head	1.11;
access;
symbols
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.32
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.24
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.28
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.26
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.22
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.20
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.18
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.16
	OPENBSD_5_0:1.8.0.14
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.12
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.10
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.6
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.8
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.6
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.4
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.2
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2017.02.13.19.19.21;	author krw;	state dead;
branches;
next	1.10;
commitid	hoFZEe47uEhzJYkM;

1.10
date	2017.02.11.16.12.36;	author krw;	state Exp;
branches;
next	1.9;
commitid	eWsyZlm9X0T2fxXC;

1.9
date	2016.02.06.23.50.10;	author krw;	state Exp;
branches;
next	1.8;
commitid	8GMcSAoPYCa1rXN3;

1.8
date	2008.05.07.12.19.20;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2007.03.02.11.37.53;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.18.16.39.25;	author moritz;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.11.19.59.07;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.11.18.59.45;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.11.18.50.37;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.16.18.35.43;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.13.23.41.48;	author henning;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Banished to the attic.
@
text
@/*	$OpenBSD: errwarn.c,v 1.10 2017/02/11 16:12:36 krw Exp $	*/

/* Errors and warnings... */

/*
 * Copyright (c) 1996 The Internet Software Consortium.
 * All Rights Reserved.
 * Copyright (c) 1995 RadioMail Corporation.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of RadioMail Corporation, the Internet Software
 *    Consortium nor the names of its contributors may be used to endorse
 *    or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY RADIOMAIL CORPORATION, THE INTERNET
 * SOFTWARE CONSORTIUM AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL RADIOMAIL CORPORATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This software was written for RadioMail Corporation by Ted Lemon
 * under a contract with Vixie Enterprises.   Further modifications have
 * been made for the Internet Software Consortium under a contract
 * with Vixie Laboratories.
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <net/if.h>

#include <netinet/in.h>

#include <errno.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <unistd.h>

#include "dhcp.h"
#include "tree.h"
#include "dhcpd.h"

char mbuf[1024];
char fbuf[1024];

int warnings_occurred;

/*
 * Log an error message, then exit.
 */
void
error(char *fmt, ...)
{
	va_list list;

	do_percentm(fbuf, sizeof(fbuf), fmt);

	va_start(list, fmt);
	vsnprintf(mbuf, sizeof(mbuf), fbuf, list);
	va_end(list);

	/* Also log it to stderr? */
	if (log_perror) {
		write(STDERR_FILENO, mbuf, strlen(mbuf));
		write(STDERR_FILENO, "\n", 1);
	} else
		syslog_r(log_priority | LOG_ERR, &sdata, "%s", mbuf);

	if (log_perror) {
		fprintf(stderr, "exiting.\n");
		fflush(stderr);
	} else
		syslog_r(LOG_CRIT, &sdata, "exiting.");

	exit(1);
}

/*
 * Log a warning message...
 */
int
warning(char *fmt, ...)
{
	va_list list;

	do_percentm(fbuf, sizeof(fbuf), fmt);

	va_start(list, fmt);
	vsnprintf(mbuf, sizeof(mbuf), fbuf, list);
	va_end(list);

	if (log_perror) {
		write(STDERR_FILENO, mbuf, strlen(mbuf));
		write(STDERR_FILENO, "\n", 1);
	} else
		syslog_r(log_priority | LOG_ERR, &sdata, "%s", mbuf);

	return (0);
}

/*
 * Log a note...
 */
int
note(char *fmt, ...)
{
	va_list list;

	do_percentm(fbuf, sizeof(fbuf), fmt);

	va_start(list, fmt);
	vsnprintf(mbuf, sizeof(mbuf), fbuf, list);
	va_end(list);

	if (log_perror) {
		write(STDERR_FILENO, mbuf, strlen(mbuf));
		write(STDERR_FILENO, "\n", 1);
	} else
		syslog_r(log_priority | LOG_INFO, &sdata, "%s", mbuf);

	return (0);
}

/*
 * Log a debug message...
 */
int
debug(char *fmt, ...)
{
	va_list list;

	do_percentm(fbuf, sizeof(fbuf), fmt);

	va_start(list, fmt);
	vsnprintf(mbuf, sizeof(mbuf), fbuf, list);
	va_end(list);

	if (log_perror) {
		write(STDERR_FILENO, mbuf, strlen(mbuf));
		write(STDERR_FILENO, "\n", 1);
	} else
		syslog_r(log_priority | LOG_DEBUG, &sdata, "%s", mbuf);

	return (0);
}

/*
 * Find %m in the input string and substitute an error message string.
 */
void
do_percentm(char *obuf, size_t size, char *ibuf)
{
	char ch;
	char *s = ibuf;
	char *t = obuf;
	size_t prlen;
	size_t fmt_left;
	int saved_errno = errno;

	/*
	 * We wouldn't need this mess if printf handled %m, or if
	 * strerror() had been invented before syslog_r().
	 */
	for (fmt_left = size; (ch = *s); ++s) {
		if (ch == '%' && s[1] == 'm') {
			++s;
			prlen = snprintf(t, fmt_left, "%s",
			    strerror(saved_errno));
			if (prlen == -1)
				prlen = 0;
			if (prlen >= fmt_left)
				prlen = fmt_left - 1;
			t += prlen;
			fmt_left -= prlen;
		} else {
			if (fmt_left > 1) {
				*t++ = ch;
				fmt_left--;
			}
		}
	}
	*t = '\0';
}
@


1.10
log
@Move parse_warning() into parse.c to prepare to replace errwarn.c
with standard daemon log.[ch].

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.9 2016/02/06 23:50:10 krw Exp $	*/
@


1.9
log
@Eliminate #include inside *.h files and include only needed headers in
each *.c file.

Inspired by mention of header silliness by Edgar Pettijohn and mmcc@@
on tech@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.8 2008/05/07 12:19:20 beck Exp $	*/
d62 2
a63 4
static void do_percentm(char *obuf, size_t size, char *ibuf);

static char mbuf[1024];
static char fbuf[1024];
d169 1
a169 1
static void
a201 47
}

int
parse_warn(char *fmt, ...)
{
	va_list list;
	static char spaces[] =
	    "                                        "
	    "                                        "; /* 80 spaces */
	struct iovec iov[6];
	size_t iovcnt;

	do_percentm(mbuf, sizeof(mbuf), fmt);
	snprintf(fbuf, sizeof(fbuf), "%s line %d: %s", tlname, lexline, mbuf);
	va_start(list, fmt);
	vsnprintf(mbuf, sizeof(mbuf), fbuf, list);
	va_end(list);

	if (log_perror) {
		iov[0].iov_base = mbuf;
		iov[0].iov_len = strlen(mbuf);
		iov[1].iov_base = "\n";
		iov[1].iov_len = 1;
		iov[2].iov_base = token_line;
		iov[2].iov_len = strlen(token_line);
		iov[3].iov_base = "\n";
		iov[3].iov_len = 1;
		iovcnt = 4;
		if (lexchar < 81) {
			iov[4].iov_base = spaces;
			iov[4].iov_len = lexchar - 1;
			iov[5].iov_base = "^\n";
			iov[5].iov_len = 2;
			iovcnt += 2;
		}
		writev(STDERR_FILENO, iov, iovcnt);
	} else {
		syslog_r(log_priority | LOG_ERR, &sdata, "%s", mbuf);
		syslog_r(log_priority | LOG_ERR, &sdata, "%s", token_line);
		if (lexchar < 81)
			syslog_r(log_priority | LOG_ERR, &sdata, "%*c", lexchar,
			    '^');
	}

	warnings_occurred = 1;

	return (0);
@


1.8
log
@Add synchronisation support for dhcpd - this allows for two dhcpd's
with the same configuration to be run on the same net and they will
keep their lease files/state in synch, and therefore allowing you to
run redundant dhcpd's. Synchronization code stolen from spamd, uses
an hmac key in /var/db/dhcpd.key if it exists.
ok krw@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.7 2007/03/02 11:37:53 henning Exp $	*/
d44 12
a55 1
#include <sys/uio.h>
a56 1
#include <errno.h>
d58 2
@


1.7
log
@pull in spaces array overflow fixes from dhclient
the code here is slightly different, but also has the overfow in both cases
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.15 2007/03/02 11:31:17 henning Exp $	*/
d76 1
a76 1
		syslog(log_priority | LOG_ERR, "%s", mbuf);
d82 1
a82 1
		syslog(LOG_CRIT, "exiting.");
d105 1
a105 1
		syslog(log_priority | LOG_ERR, "%s", mbuf);
d128 1
a128 1
		syslog(log_priority | LOG_INFO, "%s", mbuf);
d151 1
a151 1
		syslog(log_priority | LOG_DEBUG, "%s", mbuf);
d171 1
a171 1
	 * strerror() had been invented before syslog().
d229 2
a230 2
		syslog(log_priority | LOG_ERR, "%s", mbuf);
		syslog(log_priority | LOG_ERR, "%s", token_line);
d232 2
a233 1
			syslog(log_priority | LOG_ERR, "%*c", lexchar, '^');
@


1.6
log
@snprintf() return value handling. ok cloder@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.5 2005/04/11 19:59:07 deraadt Exp $	*/
d202 1
d219 9
a227 5
		iov[4].iov_base = spaces;
		iov[4].iov_len = lexchar - 1;
		iov[5].iov_base = "^\n";
		iov[5].iov_len = 2;
		writev(STDERR_FILENO, iov, sizeof(iov)/sizeof(iov[0]));
d231 2
a232 3
		if (lexline < 81)
			syslog(log_priority | LOG_ERR,
			    "%s^", &spaces[sizeof(spaces) - lexchar]);
@


1.5
log
@use STDERR_FILENO; ok cloder
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.4 2005/04/11 18:59:45 deraadt Exp $	*/
d178 2
@


1.4
log
@use writev() here too; henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.3 2005/04/11 18:50:37 fgsch Exp $	*/
d73 2
a74 2
		write(2, mbuf, strlen(mbuf));
		write(2, "\n", 1);
d102 2
a103 2
		write(2, mbuf, strlen(mbuf));
		write(2, "\n", 1);
d125 2
a126 2
		write(2, mbuf, strlen(mbuf));
		write(2, "\n", 1);
d148 2
a149 2
		write(2, mbuf, strlen(mbuf));
		write(2, "\n", 1);
d220 1
a220 1
		writev(2, iov, sizeof(iov)/sizeof(iov[0]));
@


1.3
log
@when -d is used, log to stderr, not via syslog(3); fixed pr/4171.
ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.2 2004/09/16 18:35:43 deraadt Exp $	*/
d43 3
d199 1
d208 13
a220 6
		write(2, mbuf, strlen(mbuf));
		write(2, "\n", 1);
		write(2, token_line, strlen(token_line));
		write(2, "\n", 1);
		write(2, spaces, lexchar - 1);
		write(2, "^\n", 2);
@


1.2
log
@avoid aliasing with libc functions; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.1 2004/04/13 23:41:48 henning Exp $	*/
a67 4
#ifndef DEBUG
	syslog(log_priority | LOG_ERR, "%s", mbuf);
#endif

d72 2
a73 1
	}
a74 1
	syslog(LOG_CRIT, "exiting.");
d78 3
a80 1
	}
a97 4
#ifndef DEBUG
	syslog(log_priority | LOG_ERR, "%s", mbuf);
#endif

d101 2
a102 1
	}
a120 4
#ifndef DEBUG
	syslog(log_priority | LOG_INFO, "%s", mbuf);
#endif

d124 2
a125 1
	}
a143 4
#ifndef DEBUG
	syslog(log_priority | LOG_DEBUG, "%s", mbuf);
#endif

d147 2
a148 1
	}
a202 8
#ifndef DEBUG
	syslog(log_priority | LOG_ERR, "%s", mbuf);
	syslog(log_priority | LOG_ERR, "%s", token_line);
	if (lexline < 81)
		syslog(log_priority | LOG_ERR,
		    "%s^", &spaces[sizeof(spaces) - lexchar]);
#endif

d210 6
@


1.1
log
@may the whacking begin
@
text
@d1 1
a1 1
/*	$OpenBSD: errwarn.c,v 1.6 2004/03/05 23:57:16 deraadt Exp $	*/
d90 1
a90 1
warn(char *fmt, ...)
@

