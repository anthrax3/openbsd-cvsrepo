head	1.18;
access;
symbols
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.15.0.8
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.13.0.34
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.30
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.28
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.26
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.24
	OPENBSD_5_0:1.13.0.22
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.20
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.18
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.14
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.16
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.12
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.10
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.8
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.6
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.12.0.6
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.4
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9;
locks; strict;
comment	@ * @;


1.18
date	2017.02.13.22.33.39;	author krw;	state Exp;
branches;
next	1.17;
commitid	aD6aChUv7GEv3CLZ;

1.17
date	2017.02.13.19.13.14;	author krw;	state Exp;
branches;
next	1.16;
commitid	syYFt6P4XI7prXRF;

1.16
date	2016.02.06.23.50.10;	author krw;	state Exp;
branches;
next	1.15;
commitid	8GMcSAoPYCa1rXN3;

1.15
date	2014.07.11.09.42.27;	author yasuoka;	state Exp;
branches;
next	1.14;
commitid	7SRccEu66mJK3N60;

1.14
date	2014.06.11.16.45.15;	author pelikan;	state Exp;
branches;
next	1.13;
commitid	NbG26tGSsKbvQUxZ;

1.13
date	2006.03.13.19.57.42;	author otto;	state Exp;
branches;
next	1.12;

1.12
date	2005.01.31.21.23.08;	author claudio;	state Exp;
branches;
next	1.11;

1.11
date	2004.09.16.18.35.42;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2004.09.16.09.35.24;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2004.05.11.04.08.35;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2004.05.04.20.28.40;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.21.09.11.58;	author canacar;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.18.01.32.40;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.18.01.19.07;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.18.00.43.27;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.15.21.57.04;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.14.04.34.19;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.13.23.41.48;	author henning;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Adjust some long lines.
@
text
@/*	$OpenBSD: bootp.c,v 1.17 2017/02/13 19:13:14 krw Exp $	*/

/*
 * BOOTP Protocol support.
 */

/*
 * Copyright (c) 1995, 1996, 1998, 1999 The Internet Software Consortium.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include <sys/socket.h>

#include <arpa/inet.h>

#include <net/if.h>

#include <netinet/in.h>

#include <errno.h>
#include <stdio.h>
#include <string.h>

#include "dhcp.h"
#include "tree.h"
#include "dhcpd.h"
#include "log.h"

void
bootp(struct packet *packet)
{
	struct host_decl *hp, *host = NULL;
	struct packet outgoing;
	struct dhcp_packet raw;
	struct sockaddr_in to;
	struct in_addr from;
	struct tree_cache *options[256];
	struct shared_network *s;
	struct subnet *subnet = NULL;
	struct lease *lease;
	struct iaddr ip_address;
	int i;

	if (packet->raw->op != BOOTREQUEST)
		return;

	log_info("BOOTREQUEST from %s via %s%s",
	    print_hw_addr(packet->raw->htype, packet->raw->hlen,
	    packet->raw->chaddr), packet->raw->giaddr.s_addr ?
	    inet_ntoa(packet->raw->giaddr) : packet->interface->name,
	    packet->options_valid ? "" : " (non-rfc1048)");

	if (!locate_network(packet))
		return;

	hp = find_hosts_by_haddr(packet->raw->htype, packet->raw->chaddr,
	    packet->raw->hlen);

	s = packet->shared_network;
	lease = find_lease(packet, s, 0);

	/*
	 * Find an IP address in the host_decl that matches the specified
	 * network.
	 */
	if (hp)
		subnet = find_host_for_network(&hp, &ip_address, s);

	if (!subnet) {
		/*
		 * We didn't find an applicable host declaration. Just in case
		 * we may be able to dynamically assign an address, see if
		 * there's a host declaration that doesn't have an ip address
		 * associated with it.
		 */
		if (hp)
			for (; hp; hp = hp->n_ipaddr)
				if (!hp->fixed_addr) {
					host = hp;
					break;
				}

		if (host && (!host->group->allow_booting)) {
			log_info("Ignoring excluded BOOTP client %s",
			    host->name ?  host->name :
			    print_hw_addr (packet->raw->htype,
			    packet->raw->hlen, packet->raw->chaddr));
			return;
		}

		if (host && (!host->group->allow_bootp)) {
			log_info("Ignoring BOOTP request from client %s",
			    host->name ? host->name :
			    print_hw_addr(packet->raw->htype,
			    packet->raw->hlen, packet->raw->chaddr));
			return;
		}

		/*
		 * If we've been told not to boot unknown clients, and we
		 * didn't find any host record for this client, ignore it.
		 */
		if (!host && !(s->group->boot_unknown_clients)) {
			log_info("Ignoring unknown BOOTP client %s via %s",
			    print_hw_addr(packet->raw->htype,
			    packet->raw->hlen, packet->raw->chaddr),
			    packet->raw->giaddr.s_addr ?
			    inet_ntoa(packet->raw->giaddr) :
			    packet->interface->name);
			return;
		}

		/*
		 * If we've been told not to boot with bootp on this network,
		 * ignore it.
		 */
		if (!host && !(s->group->allow_bootp)) {
			log_info("Ignoring BOOTP request from client %s via "
			    "%s", print_hw_addr(packet->raw->htype,
			    packet->raw->hlen, packet->raw->chaddr),
			    packet->raw->giaddr.s_addr ?
			    inet_ntoa(packet->raw->giaddr) :
			    packet->interface->name);
			return;
		}

		/*
		 * If the packet is from a host we don't know and there are no
		 * dynamic bootp addresses on the network it came in on, drop
		 * it on the floor.
		 */
		if (!(s->group->dynamic_bootp)) {
lose:
			log_info("No applicable record for BOOTP host %s via "
			    "%s", print_hw_addr(packet->raw->htype,
			    packet->raw->hlen, packet->raw->chaddr),
			    packet->raw->giaddr.s_addr ?
			    inet_ntoa(packet->raw->giaddr) :
			    packet->interface->name);
			return;
		}

		/*
		 * If a lease has already been assigned to this client and it's
		 * still okay to use dynamic bootp on that lease, reassign it.
		 */
		if (lease) {
			/*
			 * If this lease can be used for dynamic bootp, do so.
			 */
			if ((lease->flags & DYNAMIC_BOOTP_OK)) {
				/*
				 * If it's not a DYNAMIC_BOOTP lease, release
				 * it before reassigning it so that we don't
				 * get a lease conflict.
				 */
				if (!(lease->flags & BOOTP_LEASE))
					release_lease(lease);

				lease->host = host;
				ack_lease(packet, lease, 0, 0);
				return;
			}

			 /*
			  * If dynamic BOOTP is no longer allowed for this
			  * lease, set it free.
			  */
			release_lease(lease);
		}

		/*
		 * If there are dynamic bootp addresses that might be
		 * available, try to snag one.
		 */
		for (lease = s->last_lease;
		    lease && lease->ends <= cur_time;
		    lease = lease->prev) {
			if ((lease->flags & DYNAMIC_BOOTP_OK)) {
				lease->host = host;
				ack_lease(packet, lease, 0, 0);
				return;
			}
		}
		goto lose;
	}

	/* Make sure we're allowed to boot this client. */
	if (hp && (!hp->group->allow_booting)) {
		log_info("Ignoring excluded BOOTP client %s", hp->name);
		return;
	}

	/* Make sure we're allowed to boot this client with bootp. */
	if (hp && (!hp->group->allow_bootp)) {
		log_info("Ignoring BOOTP request from client %s", hp->name);
		return;
	}

	/* Set up the outgoing packet... */
	memset(&outgoing, 0, sizeof outgoing);
	memset(&raw, 0, sizeof raw);
	outgoing.raw = &raw;

	/*
	 * If we didn't get a known vendor magic number on the way in, just
	 * copy the input options to the output.
	 */
	if (!packet->options_valid && !subnet->group->always_reply_rfc1048 &&
	    (!hp || !hp->group->always_reply_rfc1048)) {
		memcpy(outgoing.raw->options, packet->raw->options,
		    DHCP_OPTION_LEN);
		outgoing.packet_length = BOOTP_MIN_LEN;
	} else {
		struct tree_cache netmask_tree;   /*  -- RBF */

		/*
		 * Come up with a list of options that we want to send to this
		 * client. Start with the per-subnet options, and then override
		 * those with client-specific options.
		 */

		memcpy(options, subnet->group->options, sizeof(options));

		for (i = 0; i < 256; i++)
			if (hp->group->options[i])
				options[i] = hp->group->options[i];

		/*
		 * Use the subnet mask from the subnet declaration if no other
		 * mask has been provided.
		 */
		if (!options[DHO_SUBNET_MASK]) {
			options[DHO_SUBNET_MASK] = &netmask_tree;
			netmask_tree.flags = TC_TEMPORARY;
			netmask_tree.value = lease->subnet->netmask.iabuf;
			netmask_tree.len = lease->subnet->netmask.len;
			netmask_tree.buf_size = lease->subnet->netmask.len;
			netmask_tree.timeout = -1;
			netmask_tree.tree = NULL;
		}

		/*
		 * Pack the options into the buffer. Unlike DHCP, we can't pack
		 * options into the filename and server name buffers.
		 */

		outgoing.packet_length = cons_options(packet, outgoing.raw,
		    0, options, 0, 0, 1, NULL, 0);

		if (outgoing.packet_length < BOOTP_MIN_LEN)
			outgoing.packet_length = BOOTP_MIN_LEN;
	}

	/* Take the fields that we care about... */
	raw.op = BOOTREPLY;
	raw.htype = packet->raw->htype;
	raw.hlen = packet->raw->hlen;
	memcpy(raw.chaddr, packet->raw->chaddr, sizeof(raw.chaddr));
	raw.hops = packet->raw->hops;
	raw.xid = packet->raw->xid;
	raw.secs = packet->raw->secs;
	raw.flags = packet->raw->flags;
	raw.ciaddr = packet->raw->ciaddr;
	memcpy(&raw.yiaddr, ip_address.iabuf, sizeof(raw.yiaddr));

	/* Figure out the address of the next server. */
	if (hp && hp->group->next_server.len)
		memcpy(&raw.siaddr, hp->group->next_server.iabuf, 4);
	else if (subnet->group->next_server.len)
		memcpy(&raw.siaddr, subnet->group->next_server.iabuf, 4);
	else if (subnet->interface_address.len)
		memcpy(&raw.siaddr, subnet->interface_address.iabuf, 4);
	else
		raw.siaddr = packet->interface->primary_address;

	raw.giaddr = packet->raw->giaddr;
	if (hp->group->server_name)
		strncpy(raw.sname, hp->group->server_name, sizeof(raw.sname));
	else if (subnet->group->server_name)
		strncpy(raw.sname, subnet->group->server_name,
		    sizeof(raw.sname));

	if (hp->group->filename)
		strncpy(raw.file, hp->group->filename, sizeof(raw.file));
	else if (subnet->group->filename)
		strncpy(raw.file, subnet->group->filename, sizeof(raw.file));
	else
		memcpy(raw.file, packet->raw->file, sizeof(raw.file));

	from = packet->interface->primary_address;

	/* Report what we're doing... */
	log_info("BOOTREPLY for %s to %s (%s) via %s", piaddr(ip_address),
	    hp->name, print_hw_addr(packet->raw->htype, packet->raw->hlen,
	    packet->raw->chaddr), packet->raw->giaddr.s_addr ?
	    inet_ntoa(packet->raw->giaddr) : packet->interface->name);

	/* Set up the parts of the address that are in common. */
	memset(&to, 0, sizeof(to));
	to.sin_family = AF_INET;
#ifdef HAVE_SA_LEN
	to.sin_len = sizeof(to);
#endif

	/* If this was gatewayed, send it back to the gateway... */
	if (raw.giaddr.s_addr) {
		to.sin_addr = raw.giaddr;
		to.sin_port = server_port;

		(void) packet->interface->send_packet(packet->interface, &raw,
		    outgoing.packet_length, from, &to, packet->haddr);
		return;
	}

	/*
	 * If it comes from a client that already knows its address and is not
	 * requesting a broadcast response, and we can unicast to a client
	 * without using the ARP protocol, sent it directly to that client.
	 */
	else if (!(raw.flags & htons(BOOTP_BROADCAST))) {
		to.sin_addr = raw.yiaddr;
		to.sin_port = client_port;
	} else {
		/* Otherwise, broadcast it on the local network. */
		to.sin_addr.s_addr = INADDR_BROADCAST;
		to.sin_port = client_port; /* XXX */
	}

	errno = 0;
	(void) packet->interface->send_packet(packet->interface, &raw,
	    outgoing.packet_length, from, &to, packet->haddr);
}
@


1.17
log
@Switch from old errwarn.c logging to shiny new log.[ch].

ok benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.16 2016/02/06 23:50:10 krw Exp $	*/
d80 4
a83 4
	log_info("BOOTREQUEST from %s via %s%s", print_hw_addr(packet->raw->htype,
	    packet->raw->hlen, packet->raw->chaddr),
	    packet->raw->giaddr.s_addr ? inet_ntoa(packet->raw->giaddr) :
	    packet->interface->name,
d117 3
a119 2
			log_info("Ignoring excluded BOOTP client %s", host->name ?
			    host->name : print_hw_addr (packet->raw->htype,
d133 2
a134 2
		 * If we've been told not to boot unknown clients, and we didn't
		 * find any host record for this client, ignore it.
d151 2
a152 2
			log_info("Ignoring BOOTP request from client %s via %s",
			    print_hw_addr(packet->raw->htype,
d167 2
a168 2
			log_info("No applicable record for BOOTP host %s via %s",
			    print_hw_addr(packet->raw->htype,
d186 3
a188 3
				 * If it's not a DYNAMIC_BOOTP lease, release it
				 * before reassigning it so that we don't get a
				 * lease conflict.
@


1.16
log
@Eliminate #include inside *.h files and include only needed headers in
each *.c file.

Inspired by mention of header silliness by Edgar Pettijohn and mmcc@@
on tech@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.15 2014/07/11 09:42:27 yasuoka Exp $	*/
d60 1
d80 1
a80 1
	note("BOOTREQUEST from %s via %s%s", print_hw_addr(packet->raw->htype,
d117 1
a117 1
			note("Ignoring excluded BOOTP client %s", host->name ?
d124 1
a124 1
			note("Ignoring BOOTP request from client %s",
d136 1
a136 1
			note("Ignoring unknown BOOTP client %s via %s",
d150 1
a150 1
			note("Ignoring BOOTP request from client %s via %s",
d166 1
a166 1
			note("No applicable record for BOOTP host %s via %s",
d222 1
a222 1
		note("Ignoring excluded BOOTP client %s", hp->name);
d228 1
a228 1
		note("Ignoring BOOTP request from client %s", hp->name);
d326 1
a326 1
	note("BOOTREPLY for %s to %s (%s) via %s", piaddr(ip_address),
@


1.15
log
@Add -u option to bind UDP port as a socket to answer DHCPINFORM from
the clients on non ethernet interfaces (eg. tun(4) or pppx(4)).

input krw
ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.14 2014/06/11 16:45:15 pelikan Exp $	*/
d45 14
@


1.14
log
@Prettify & refactor, no functional change.

ok beck
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.13 2006/03/13 19:57:42 otto Exp $	*/
d328 1
a328 1
		(void) send_packet(packet->interface, &raw,
d348 1
a348 1
	(void) send_packet(packet->interface, &raw,
@


1.13
log
@tiny bit of delinting; ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.12 2005/01/31 21:23:08 claudio Exp $	*/
d56 1
d77 2
a78 1
	lease = find_lease(packet, packet->shared_network, 0);
d85 1
a85 2
		subnet = find_host_for_network(&hp, &ip_address,
		    packet->shared_network);
d120 1
a120 2
		if (!host &&
		    !(packet->shared_network->group->boot_unknown_clients)) {
d134 1
a134 2
		if (!host &&
		    !(packet->shared_network->group->allow_bootp)) {
d149 1
a149 1
		if (!(packet->shared_network->group->dynamic_bootp)) {
d193 1
a193 1
		for (lease = packet->shared_network->last_lease;
@


1.12
log
@Simply use the ethernet source address of the request as new ethernet
destination instead of the one included in the dhcp packet. Especially
because there are to many cases where the supplied address is wrong.
This hopefully solves all problems with gateways involved, like the
one reported by Dylan Martin.
OK krw@@ henning@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.11 2004/09/16 18:35:42 deraadt Exp $	*/
d257 1
a257 1
			netmask_tree.timeout = 0xFFFFFFFF;
@


1.11
log
@avoid aliasing with libc functions; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.10 2004/09/16 09:35:24 claudio Exp $	*/
a54 1
	struct hardware hto;
a308 5
	/* Set up the hardware destination address... */
	hto.htype = packet->raw->htype;
	hto.hlen = packet->raw->hlen;
	memcpy(hto.haddr, packet->raw->chaddr, hto.hlen);

d350 1
a350 1
	    outgoing.packet_length, from, &to, &hto);
@


1.10
log
@Remove the not initialized fallback_interface code and use the normal bpf
interface for that. Also store the hardware (ethernet) address in the state
so that relayed dhcp request are sent to the correct destination.
OK henning@@ requested by deraadt@@ tested otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.9 2004/05/11 04:08:35 deraadt Exp $	*/
d60 1
a60 1
	int result, i;
d335 1
a335 1
		result = send_packet(packet->interface, &raw,
d355 1
a355 1
	result = send_packet(packet->interface, &raw,
@


1.9
log
@knf
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.8 2004/05/04 20:28:40 deraadt Exp $	*/
d335 3
a337 6
		if (fallback_interface) {
			result = send_packet(fallback_interface, &raw,
			    outgoing.packet_length, from, &to, &hto);
			return;
		}

@


1.8
log
@remove things not used, spotted by lint mostly; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.7 2004/04/21 09:11:58 canacar Exp $	*/
d68 2
a69 2
	    packet->interface->name, packet->options_valid ? "" :
	    " (non-rfc1048)");
@


1.7
log
@filter writes and lock bpf descriptor, ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.6 2004/04/18 01:32:40 deraadt Exp $	*/
d336 1
a336 1
			result = send_packet(fallback_interface, NULL, &raw,
d358 1
a358 1
	result = send_packet(packet->interface, packet, &raw,
@


1.6
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.5 2004/04/18 01:19:07 henning Exp $	*/
d333 1
a333 1
		to.sin_port = local_port;
d350 1
a350 1
		to.sin_port = remote_port;
d354 1
a354 1
		to.sin_port = remote_port; /* XXX */
@


1.5
log
@more KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.4 2004/04/18 00:43:27 deraadt Exp $	*/
d287 1
a287 1
	if (hp  && hp->group->next_server.len)
@


1.4
log
@various knf; henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.3 2004/04/15 21:57:04 henning Exp $	*/
d138 1
a138 1
			    print_hw_addr (packet->raw->htype,
d154 1
a154 1
			    print_hw_addr (packet->raw->htype,
@


1.3
log
@cleaning; from pedro
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 1
a50 3
	int result;
	struct host_decl *hp;
	struct host_decl *host = (struct host_decl *)0;
d56 2
a57 2
	struct tree_cache *options [256];
	struct subnet *subnet;
d60 1
a60 1
	int i;
a85 2
	else
		subnet = (struct subnet *)0;
d196 2
a197 2
		     lease && lease->ends <= cur_time;
		     lease = lease->prev) {
d259 1
a259 1
			netmask_tree.tree = (struct tree *)0;
d268 1
a268 1
		    0, options, 0, 0, 1, (u_int8_t *)0, 0);
d336 2
a337 3
			result = send_packet(fallback_interface,
			    (struct packet *)0, &raw, outgoing.packet_length,
			    from, &to, &hto);
a350 1
	/* Otherwise, broadcast it on the local network. */
d352 1
@


1.2
log
@spaces
@
text
@d1 1
a1 1
/* bootp.c
d3 3
a5 1
   BOOTP Protocol support. */
d47 2
a48 2
void bootp (packet)
	struct packet *packet;
d64 1
a64 1
	if (packet -> raw -> op != BOOTREQUEST)
d67 5
a71 10
	note ("BOOTREQUEST from %s via %s%s",
	      print_hw_addr (packet -> raw -> htype,
			     packet -> raw -> hlen,
			     packet -> raw -> chaddr),
	      packet -> raw -> giaddr.s_addr
	      ? inet_ntoa (packet -> raw -> giaddr)
	      : packet -> interface -> name,
	      packet -> options_valid ? "" : " (non-rfc1048)");


d73 1
a73 1
	if (!locate_network (packet))
d76 2
a77 3
	hp = find_hosts_by_haddr (packet -> raw -> htype,
				  packet -> raw -> chaddr,
				  packet -> raw -> hlen);
d79 1
a79 1
	lease = find_lease (packet, packet -> shared_network, 0);
d81 4
a84 2
	/* Find an IP address in the host_decl that matches the
	   specified network. */
d86 2
a87 2
		subnet = find_host_for_network (&hp, &ip_address,
						packet -> shared_network);
d92 9
a100 7
		/* We didn't find an applicable host declaration.
		   Just in case we may be able to dynamically assign
		   an address, see if there's a host declaration
		   that doesn't have an ip address associated with it. */
		if (hp) {
			for (; hp; hp = hp -> n_ipaddr) {
				if (!hp -> fixed_addr) {
a103 2
			}
		}
d105 4
a108 7
		if (host && (!host -> group -> allow_booting)) {
			note ("Ignoring excluded BOOTP client %s",
			      host -> name
			      ? host -> name
			      : print_hw_addr (packet -> raw -> htype,
					       packet -> raw -> hlen,
					       packet -> raw -> chaddr));
d112 5
a116 7
		if (host && (!host -> group -> allow_bootp)) {
			note ("Ignoring BOOTP request from client %s",
			      host -> name
			      ? host -> name
			      : print_hw_addr (packet -> raw -> htype,
					       packet -> raw -> hlen,
					       packet -> raw -> chaddr));
d120 12
a131 12
		/* If we've been told not to boot unknown clients,
		   and we didn't find any host record for this client,
		   ignore it. */
		if (!host && !(packet -> shared_network ->
			       group -> boot_unknown_clients)) {
			note ("Ignoring unknown BOOTP client %s via %s",
			      print_hw_addr (packet -> raw -> htype,
					     packet -> raw -> hlen,
					     packet -> raw -> chaddr),
			      packet -> raw -> giaddr.s_addr
			      ? inet_ntoa (packet -> raw -> giaddr)
			      : packet -> interface -> name);
d135 4
a138 2
		/* If we've been told not to boot with bootp on this
		   network, ignore it. */
d140 7
a146 8
		    !(packet -> shared_network -> group -> allow_bootp)) {
			note ("Ignoring BOOTP request from client %s via %s",
			      print_hw_addr (packet -> raw -> htype,
					     packet -> raw -> hlen,
					     packet -> raw -> chaddr),
			      packet -> raw -> giaddr.s_addr
			      ? inet_ntoa (packet -> raw -> giaddr)
			      : packet -> interface -> name);
d150 13
a162 12
		/* If the packet is from a host we don't know and there
		   are no dynamic bootp addresses on the network it came
		   in on, drop it on the floor. */
		if (!(packet -> shared_network -> group -> dynamic_bootp)) {
		      lose:
			note ("No applicable record for BOOTP host %s via %s",
			      print_hw_addr (packet -> raw -> htype,
					     packet -> raw -> hlen,
					     packet -> raw -> chaddr),
			      packet -> raw -> giaddr.s_addr
			      ? inet_ntoa (packet -> raw -> giaddr)
			      : packet -> interface -> name);
d166 4
a169 3
		/* If a lease has already been assigned to this client
		   and it's still okay to use dynamic bootp on
		   that lease, reassign it. */
d171 11
a181 10
			/* If this lease can be used for dynamic bootp,
			   do so. */
			if ((lease -> flags & DYNAMIC_BOOTP_OK)) {

				/* If it's not a DYNAMIC_BOOTP lease,
				   release it before reassigning it
				   so that we don't get a lease
				   conflict. */
				if (!(lease -> flags & BOOTP_LEASE))
					release_lease (lease);
d183 2
a184 2
				lease -> host = host;
				ack_lease (packet, lease, 0, 0);
d188 17
a204 13
			 /* If dynamic BOOTP is no longer allowed for
			   this lease, set it free. */
			release_lease (lease);
		}

		/* If there are dynamic bootp addresses that might be
		   available, try to snag one. */
		for (lease = packet -> shared_network -> last_lease;
		     lease && lease -> ends <= cur_time;
		     lease = lease -> prev) {
			if ((lease -> flags & DYNAMIC_BOOTP_OK)) {
				lease -> host = host;
				ack_lease (packet, lease, 0, 0);
d212 2
a213 3
	if (hp && (!hp -> group -> allow_booting)) {
		note ("Ignoring excluded BOOTP client %s",
		      hp -> name);
d218 2
a219 3
	if (hp && (!hp -> group -> allow_bootp)) {
		note ("Ignoring BOOTP request from client %s",
		      hp -> name);
d224 2
a225 2
	memset (&outgoing, 0, sizeof outgoing);
	memset (&raw, 0, sizeof raw);
d228 8
a235 7
	/* If we didn't get a known vendor magic number on the way in,
	   just copy the input options to the output. */
	if (!packet -> options_valid &&
	    !subnet -> group -> always_reply_rfc1048 &&
	    (!hp || !hp -> group -> always_reply_rfc1048)) {
		memcpy (outgoing.raw -> options,
			packet -> raw -> options, DHCP_OPTION_LEN);
d240 18
a257 16
		/* Come up with a list of options that we want to send
		   to this client.  Start with the per-subnet options,
		   and then override those with client-specific
		   options. */

		memcpy (options, subnet -> group -> options, sizeof options);

		for (i = 0; i < 256; i++) {
			if (hp -> group -> options [i])
				options [i] = hp -> group -> options [i];
		}

		/* Use the subnet mask from the subnet declaration if no other
		   mask has been provided. */
		if (!options [DHO_SUBNET_MASK]) {
			options [DHO_SUBNET_MASK] = &netmask_tree;
d259 3
a261 3
			netmask_tree.value = lease -> subnet -> netmask.iabuf;
			netmask_tree.len = lease -> subnet -> netmask.len;
			netmask_tree.buf_size = lease -> subnet -> netmask.len;
d266 8
a273 7
		/* Pack the options into the buffer.  Unlike DHCP, we
		   can't pack options into the filename and server
		   name buffers. */

		outgoing.packet_length =
			cons_options (packet, outgoing.raw,
				      0, options, 0, 0, 1, (u_int8_t *)0, 0);
d280 9
a288 9
	raw.htype = packet -> raw -> htype;
	raw.hlen = packet -> raw -> hlen;
	memcpy (raw.chaddr, packet -> raw -> chaddr, sizeof raw.chaddr);
	raw.hops = packet -> raw -> hops;
	raw.xid = packet -> raw -> xid;
	raw.secs = packet -> raw -> secs;
	raw.flags = packet -> raw -> flags;
	raw.ciaddr = packet -> raw -> ciaddr;
	memcpy (&raw.yiaddr, ip_address.iabuf, sizeof raw.yiaddr);
d291 6
a296 6
	if (hp  && hp -> group -> next_server.len)
		memcpy (&raw.siaddr, hp -> group -> next_server.iabuf, 4);
	else if (subnet -> group -> next_server.len)
		memcpy (&raw.siaddr, subnet -> group -> next_server.iabuf, 4);
	else if (subnet -> interface_address.len)
		memcpy (&raw.siaddr, subnet -> interface_address.iabuf, 4);
d298 1
a298 1
		raw.siaddr = packet -> interface -> primary_address;
d300 11
a310 14
	raw.giaddr = packet -> raw -> giaddr;
	if (hp -> group -> server_name)
		strncpy (raw.sname, hp -> group -> server_name,
			 (sizeof raw.sname));
	else if (subnet -> group -> server_name)
		strncpy (raw.sname, subnet -> group -> server_name,
			 (sizeof raw.sname));

	if (hp -> group -> filename)
		strncpy (raw.file, hp -> group -> filename,
			 (sizeof raw.file));
	else if (subnet -> group -> filename)
		strncpy (raw.file, subnet -> group -> filename,
			 (sizeof raw.file));
d312 1
a312 1
		memcpy (raw.file, packet -> raw -> file, sizeof raw.file);
d315 3
a317 3
	hto.htype = packet -> raw -> htype;
	hto.hlen = packet -> raw -> hlen;
	memcpy (hto.haddr, packet -> raw -> chaddr, hto.hlen);
d319 1
a319 1
	from = packet -> interface -> primary_address;
d322 4
a325 8
	note ("BOOTREPLY for %s to %s (%s) via %s",
	      piaddr (ip_address), hp -> name,
	      print_hw_addr (packet -> raw -> htype,
			     packet -> raw -> hlen,
			     packet -> raw -> chaddr),
	      packet -> raw -> giaddr.s_addr
	      ? inet_ntoa (packet -> raw -> giaddr)
	      : packet -> interface -> name);
d328 1
a328 1
	memset (&to, 0, sizeof to);
d331 1
a331 1
	to.sin_len = sizeof to;
d340 3
a342 4
			result = send_packet (fallback_interface,
					      (struct packet *)0,
					      &raw, outgoing.packet_length,
					      from, &to, &hto);
d346 8
a353 5
	/* If it comes from a client that already knows its address
	   and is not requesting a broadcast response, and we can
	   unicast to a client without using the ARP protocol, sent it
	   directly to that client. */
	} else if (!(raw.flags & htons (BOOTP_BROADCAST))) {
a355 1

d363 2
a364 3
	result = send_packet (packet -> interface,
			      packet, &raw, outgoing.packet_length,
			      from, &to, &hto);
@


1.1
log
@may the whacking begin
@
text
@d116 1
a116 1
			
d126 1
a126 1
			
d216 1
a216 1
			
d223 1
a223 1
			
@

