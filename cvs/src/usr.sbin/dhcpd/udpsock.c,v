head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.0.4
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2017.02.13.22.33.39;	author krw;	state Exp;
branches;
next	1.9;
commitid	aD6aChUv7GEv3CLZ;

1.9
date	2017.02.13.21.53.53;	author krw;	state Exp;
branches;
next	1.8;
commitid	iao5yt5BDQh8mK3C;

1.8
date	2017.02.13.19.13.14;	author krw;	state Exp;
branches;
next	1.7;
commitid	syYFt6P4XI7prXRF;

1.7
date	2016.04.27.10.16.10;	author mestre;	state Exp;
branches;
next	1.6;
commitid	WQSSYw5rrvOlbZbc;

1.6
date	2016.04.04.14.00.42;	author mestre;	state Exp;
branches;
next	1.5;
commitid	KaFR8EKzpzUCIgzJ;

1.5
date	2016.02.08.02.06.07;	author krw;	state Exp;
branches;
next	1.4;
commitid	x1F3SoxAM8gR5APX;

1.4
date	2016.02.06.23.50.10;	author krw;	state Exp;
branches;
next	1.3;
commitid	8GMcSAoPYCa1rXN3;

1.3
date	2015.12.14.01.08.50;	author krw;	state Exp;
branches;
next	1.2;
commitid	vJvor8PLKTXbbTt2;

1.2
date	2015.01.16.06.40.16;	author deraadt;	state Exp;
branches;
next	1.1;
commitid	Uu5nFG3wCl0LACBb;

1.1
date	2014.07.11.09.42.27;	author yasuoka;	state Exp;
branches;
next	;
commitid	7SRccEu66mJK3N60;


desc
@@


1.10
log
@Adjust some long lines.
@
text
@/*	$OpenBSD: udpsock.c,v 1.9 2017/02/13 21:53:53 krw Exp $	*/

/*
 * Copyright (c) 2014 YASUOKA Masahiko <yasuoka@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/socket.h>

#include <arpa/inet.h>

#include <net/if.h>
#include <net/if_dl.h>

#include <netinet/in.h>

#include <ctype.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "dhcp.h"
#include "tree.h"
#include "dhcpd.h"
#include "log.h"

void	 udpsock_handler (struct protocol *);
ssize_t	 udpsock_send_packet(struct interface_info *, struct dhcp_packet *,
    size_t, struct in_addr, struct sockaddr_in *, struct hardware *);

struct udpsock {
	int	 sock;
};

void
udpsock_startup(struct in_addr bindaddr)
{
	int			 sock, onoff;
	struct sockaddr_in	 sin4;
	struct udpsock		*udpsock;

	if ((udpsock = calloc(1, sizeof(struct udpsock))) == NULL)
		fatal("could not create udpsock");

	memset(&sin4, 0, sizeof(sin4));
	if ((sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0)
		fatal("creating a socket failed for udp");

	onoff = 1;
	if (setsockopt(sock, IPPROTO_IP, IP_RECVIF, &onoff, sizeof(onoff)) !=
	    0)
		fatal("setsocketopt IP_RECVIF failed for udp");

	sin4.sin_family = AF_INET;
	sin4.sin_len = sizeof(sin4);
	sin4.sin_addr = bindaddr;
	sin4.sin_port = server_port;

	if (bind(sock, (struct sockaddr *)&sin4, sizeof(sin4)) != 0)
		fatal("bind failed for udp");

	add_protocol("udp", sock, udpsock_handler, (void *)(intptr_t)udpsock);
	log_info("Listening on %s:%d/udp.", inet_ntoa(sin4.sin_addr),
	    ntohs(server_port));

	udpsock->sock = sock;
}

void
udpsock_handler(struct protocol *protocol)
{
	int			 sockio;
	char			 cbuf[256], ifname[IF_NAMESIZE];
	ssize_t			 len;
	struct udpsock		*udpsock = protocol->local;
	struct msghdr		 m;
	struct cmsghdr		*cm;
	struct iovec		 iov[1];
	struct sockaddr_storage	 ss;
	struct sockaddr_in	*sin4;
	struct sockaddr_dl	*sdl = NULL;
	struct interface_info	 iface;
	struct iaddr		 from, addr;
	unsigned char		 packetbuf[4095];
	struct dhcp_packet	*packet = (struct dhcp_packet *)packetbuf;
	struct hardware		 hw;
	struct ifreq		 ifr;
	struct subnet		*subnet;

	memset(&hw, 0, sizeof(hw));

	iov[0].iov_base = packetbuf;
	iov[0].iov_len = sizeof(packetbuf);
	memset(&m, 0, sizeof(m));
	m.msg_name = &ss;
	m.msg_namelen = sizeof(ss);
	m.msg_iov = iov;
	m.msg_iovlen = 1;
	m.msg_control = cbuf;
	m.msg_controllen = sizeof(cbuf);

	memset(&iface, 0, sizeof(iface));
	if ((len = recvmsg(udpsock->sock, &m, 0)) < 0) {
		log_warn("receiving a DHCP message failed");
		return;
	}
	if (ss.ss_family != AF_INET) {
		log_warnx("received DHCP message is not AF_INET");
		return;
	}
	sin4 = (struct sockaddr_in *)&ss;
	for (cm = (struct cmsghdr *)CMSG_FIRSTHDR(&m);
	    m.msg_controllen != 0 && cm;
	    cm = (struct cmsghdr *)CMSG_NXTHDR(&m, cm)) {
		if (cm->cmsg_level == IPPROTO_IP &&
		    cm->cmsg_type == IP_RECVIF)
			sdl = (struct sockaddr_dl *)CMSG_DATA(cm);
	}
	if (sdl == NULL) {
		log_warnx("could not get the received interface by IP_RECVIF");
		return;
	}
	if_indextoname(sdl->sdl_index, ifname);

	if ((sockio = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
		log_warn("socket creation failed");
		return;
	}
	strlcpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
	if (ioctl(sockio, SIOCGIFADDR, &ifr, sizeof(ifr)) != 0) {
		log_warn("Failed to get address for %s", ifname);
		close(sockio);
		return;
	}
	close(sockio);

	if (ifr.ifr_addr.sa_family != AF_INET)
		return;

	iface.is_udpsock = 1;
	iface.send_packet = udpsock_send_packet;
	iface.wfdesc = udpsock->sock;
	iface.ifp = &ifr;
	iface.index = sdl->sdl_index;
	iface.primary_address =
	    ((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr;
	strlcpy(iface.name, ifname, sizeof(iface.name));

	addr.len = 4;
	memcpy(&addr.iabuf, &iface.primary_address, addr.len);

	if ((subnet = find_subnet(addr)) == NULL)
		return;
	iface.shared_network = subnet->shared_network ;
	from.len = 4;
	memcpy(&from.iabuf, &sin4->sin_addr, from.len);
	do_packet(&iface, packet, len, sin4->sin_port, from, &hw);
}

ssize_t
udpsock_send_packet(struct interface_info *interface, struct dhcp_packet *raw,
    size_t len, struct in_addr from, struct sockaddr_in *to,
    struct hardware *hto)
{
	return (sendto(interface->wfdesc, raw, len, 0, (struct sockaddr *)to,
	    sizeof(struct sockaddr_in)));
}
@


1.9
log
@Do the strerror() elimination dance with log_warnx() -> log_warn(),
fatalx() -> fatal() and even a couple of fprintf(stderr) -> log_warn().
@
text
@d1 1
a1 1
/*	$OpenBSD: udpsock.c,v 1.8 2017/02/13 19:13:14 krw Exp $	*/
d65 2
a66 1
	if (setsockopt(sock, IPPROTO_IP, IP_RECVIF, &onoff, sizeof(onoff)) != 0)
d160 2
a161 1
	iface.primary_address = ((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr;
@


1.8
log
@Switch from old errwarn.c logging to shiny new log.[ch].

ok benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: udpsock.c,v 1.7 2016/04/27 10:16:10 mestre Exp $	*/
d58 1
a58 1
		fatalx("could not create udpsock: %s", strerror(errno));
d62 1
a62 1
		fatalx("creating a socket failed for udp: %s", strerror(errno));
d66 1
a66 2
		fatalx("setsocketopt IP_RECVIF failed for udp: %s",
		    strerror(errno));
d74 1
a74 1
		fatalx("bind failed for udp: %s", strerror(errno));
d118 1
a118 1
		log_warnx("receiving a DHCP message failed: %s", strerror(errno));
d140 1
a140 1
		log_warnx("socket creation failed: %s", strerror(errno));
d145 1
a145 2
		log_warnx("Failed to get address for %s: %s", ifname,
		    strerror(errno));
@


1.7
log
@Remove pledge(2)'s that are called before chroot(2) since in the near future
this will be forbidden. The remaining pledge(2) calls after chroot(2) are still
kept.

OK semarie@@ "it is time now"
@
text
@d1 1
a1 1
/*	$OpenBSD: udpsock.c,v 1.6 2016/04/04 14:00:42 mestre Exp $	*/
d40 1
d58 1
a58 1
		error("could not create udpsock: %s", strerror(errno));
d62 1
a62 1
		error("creating a socket failed for udp: %s", strerror(errno));
d66 1
a66 1
		error("setsocketopt IP_RECVIF failed for udp: %s",
d75 1
a75 1
		error("bind failed for udp: %s", strerror(errno));
d78 1
a78 1
	note("Listening on %s:%d/udp.", inet_ntoa(sin4.sin_addr),
d119 1
a119 1
		warning("receiving a DHCP message failed: %s", strerror(errno));
d123 1
a123 1
		warning("received DHCP message is not AF_INET");
d135 1
a135 1
		warning("could not get the received interface by IP_RECVIF");
d141 1
a141 1
		warning("socket creation failed: %s", strerror(errno));
d146 1
a146 1
		warning("Failed to get address for %s: %s", ifname,
@


1.6
log
@In udpsockmode codepath dhcpd.c had the promise route for pledge(2) but it was
missing from udpsock_startup() (udpsock.c) which happens earlier and therefore
would abort the program due to SIOCGIFADDR ioctl(2) on udpsock_handler

Reported by Philip Higgins <phil ! unita.com.au>

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: udpsock.c,v 1.5 2016/02/08 02:06:07 krw Exp $	*/
a66 3

	if (pledge("stdio rpath inet route sendfd proc id", NULL) == -1)
		error("pledge: %s", strerror(errno));
@


1.5
log
@sys/param.h -> sys/types.h. No need to drag in nitems() only to
use it once on an array declared iov[1]. Just use '1'.

ok yasuoka@@
@
text
@d1 1
a1 1
/*	$OpenBSD: udpsock.c,v 1.4 2016/02/06 23:50:10 krw Exp $	*/
d68 1
a68 1
	if (pledge("stdio rpath inet sendfd proc id", NULL) == -1)
@


1.4
log
@Eliminate #include inside *.h files and include only needed headers in
each *.c file.

Inspired by mention of header silliness by Edgar Pettijohn and mmcc@@
on tech@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: udpsock.c,v 1.3 2015/12/14 01:08:50 krw Exp $	*/
d19 1
a19 1
#include <sys/param.h>	/* nitems */
d115 1
a115 1
	m.msg_iovlen = nitems(iov);
@


1.3
log
@pledge.

Diff from Ricardo Mestre. Test report from sthen@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: udpsock.c,v 1.2 2015/01/16 06:40:16 deraadt Exp $	*/
d20 1
d22 6
a27 2
#include <sys/uio.h>
#include <sys/ioctl.h>
a28 1
#include <arpa/inet.h>
d30 1
d32 2
a33 1
#include <stdint.h>
d35 1
d37 2
@


1.2
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: udpsock.c,v 1.1 2014/07/11 09:42:27 yasuoka Exp $	*/
d58 3
@


1.1
log
@Add -u option to bind UDP port as a socket to answer DHCPINFORM from
the clients on non ethernet interfaces (eg. tun(4) or pppx(4)).

input krw
ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d19 1
a19 1
#include <sys/param.h>
@

