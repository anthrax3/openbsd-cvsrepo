head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.2
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.26
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.18
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.22
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.20
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.16
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.14
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.3.0.22
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.18
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.16
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.14
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2017.02.13.19.13.14;	author krw;	state Exp;
branches;
next	1.7;
commitid	syYFt6P4XI7prXRF;

1.7
date	2016.02.06.23.50.10;	author krw;	state Exp;
branches;
next	1.6;
commitid	8GMcSAoPYCa1rXN3;

1.6
date	2010.01.01.20.30.25;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2010.01.01.19.10.24;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2010.01.01.06.25.37;	author krw;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.16.18.35.43;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.14.00.56.02;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.13.23.41.48;	author henning;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Switch from old errwarn.c logging to shiny new log.[ch].

ok benno@@
@
text
@/*	$OpenBSD: hash.c,v 1.7 2016/02/06 23:50:10 krw Exp $	*/

/* Routines for manipulating hash tables... */

/*
 * Copyright (c) 1995, 1996, 1997, 1998 The Internet Software Consortium.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <net/if.h>

#include <netinet/in.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "dhcp.h"
#include "tree.h"
#include "dhcpd.h"
#include "log.h"

static int do_hash(unsigned char *, int, int);

struct hash_table *
new_hash(void)
{
	struct hash_table *rv;

	rv = calloc(1, sizeof(struct hash_table));
	if (!rv)
		log_warnx("No memory for new hash.");
	else
		rv->hash_count = DEFAULT_HASH_SIZE;

	return (rv);
}

static int
do_hash(unsigned char *name, int len, int size)
{
	int accum = 0;
	unsigned char *s = name;
	int i = len;

	while (i--) {
		/* Add the character in... */
		accum += *s++;
		/* Add carry back in... */
		while (accum > 255)
			accum = (accum & 255) + (accum >> 8);
	}
	return (accum % size);
}

void add_hash(struct hash_table *table, unsigned char *name, int len,
    unsigned char *pointer)
{
	int hashno;
	struct hash_bucket *bp;

	if (!table)
		return;
	if (!len)
		len = strlen((char *)name);

	hashno = do_hash(name, len, table->hash_count);
	bp = calloc(1, sizeof(struct hash_bucket));
	if (!bp) {
		log_warnx("Can't add %s to hash table.", name);
		return;
	}
	bp->name = name;
	bp->value = pointer;
	bp->next = table->buckets[hashno];
	bp->len = len;
	table->buckets[hashno] = bp;
}

void
delete_hash_entry(struct hash_table *table, unsigned char *name, int len)
{
	int hashno;
	struct hash_bucket *bp, *pbp = NULL;

	if (!table)
		return;
	if (!len)
		len = strlen((char *)name);

	hashno = do_hash(name, len, table->hash_count);

	/*
	 * Go through the list looking for an entry that matches; if we
	 * find it, delete it.
	 */
	for (bp = table->buckets[hashno]; bp; bp = bp->next) {
		if ((!bp->len &&
		    !strcmp((char *)bp->name, (char *)name)) ||
		    (bp->len == len && !memcmp(bp->name, name, len))) {
			if (pbp)
				pbp->next = bp->next;
			else
				table->buckets[hashno] = bp->next;
			free(bp);
			break;
		}
		pbp = bp;	/* jwg, 9/6/96 - nice catch! */
	}
}

unsigned char *
hash_lookup(struct hash_table *table, unsigned char *name, int len)
{
	int hashno;
	struct hash_bucket *bp;

	if (!table)
		return (NULL);

	if (!len)
		len = strlen((char *)name);

	hashno = do_hash(name, len, table->hash_count);

	for (bp = table->buckets[hashno]; bp; bp = bp->next)
		if (len == bp->len && !memcmp(bp->name, name, len))
			return (bp->value);

	return (NULL);
}
@


1.7
log
@Eliminate #include inside *.h files and include only needed headers in
each *.c file.

Inspired by mention of header silliness by Edgar Pettijohn and mmcc@@
on tech@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.6 2010/01/01 20:30:25 krw Exp $	*/
d57 1
d68 1
a68 1
		warning("No memory for new hash.");
d106 1
a106 1
		warning("Can't add %s to hash table.", name);
@


1.6
log
@Wrappers around a wrapper around free() are of no more use than
wrappers around wrappers around calloc().

The purpose of the free() wrapper is to generate an error message
when free'ing NULL. But free_hash_bucket(), free_lease(), and
free_tree() are all called immediately after dereferencing the
pointer to be freed. Thus the error message will never be issued.
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.5 2010/01/01 19:10:24 krw Exp $	*/
d43 13
@


1.5
log
@A slightly more complex calloc() wrapper wrapper, new_hash_table(),
bites the dust.
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.4 2010/01/01 06:25:37 krw Exp $	*/
d127 1
a127 1
			free_hash_bucket(bp, "delete_hash_entry");
@


1.4
log
@Single-use wrapper functions that just call a wrapper function
around calloc() and end up producing duplicate error messages are
just confusing.

Eliminate new_hash_bucket(), new_lease(), new_leases(), new_group().
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.3 2004/09/16 18:35:43 deraadt Exp $	*/
d50 3
a52 1
	struct hash_table *rv = new_hash_table(DEFAULT_HASH_SIZE, "new_hash");
d54 4
a57 3
		return (rv);
	memset(&rv->buckets[0], 0,
	    DEFAULT_HASH_SIZE * sizeof(struct hash_bucket *));
@


1.3
log
@avoid aliasing with libc functions; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.2 2004/04/14 00:56:02 henning Exp $	*/
d87 1
a87 2
	bp = new_hash_bucket("add_hash");

@


1.2
log
@more crap bites the dust
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.c,v 1.5 2004/02/07 13:59:45 henning Exp $	*/
d90 1
a90 1
		warn("Can't add %s to hash table.", name);
@


1.1
log
@may the whacking begin
@
text
@d1 1
a1 1
/* hash.c
d3 1
a3 1
   Routines for manipulating hash tables... */
d45 1
a45 1
static int do_hash PROTO ((unsigned char *, int, int));
d47 2
a48 1
struct hash_table *new_hash ()
d50 1
a50 1
	struct hash_table *rv = new_hash_table (DEFAULT_HASH_SIZE, "new_hash");
d52 4
a55 4
		return rv;
	memset (&rv -> buckets [0], 0,
		DEFAULT_HASH_SIZE * sizeof (struct hash_bucket *));
	return rv;
d58 2
a59 4
static int do_hash (name, len, size)
	unsigned char *name;
	int len;
	int size;
d61 2
a62 2
	register int accum = 0;
	register unsigned char *s = name;
d64 1
d69 1
a69 1
		while (accum > 255) {
a70 1
		}
d72 1
a72 1
	return accum % size;
d75 2
a76 5
void add_hash (table, name, len, pointer)
	struct hash_table *table;
	int len;
	unsigned char *name;
	unsigned char *pointer;
d84 1
a84 1
		len = strlen ((char *)name);
d86 2
a87 2
	hashno = do_hash (name, len, table -> hash_count);
	bp = new_hash_bucket ("add_hash");
d90 1
a90 1
		warn ("Can't add %s to hash table.", name);
d93 5
a97 5
	bp -> name = name;
	bp -> value = pointer;
	bp -> next = table -> buckets [hashno];
	bp -> len = len;
	table -> buckets [hashno] = bp;
d100 2
a101 4
void delete_hash_entry (table, name, len)
	struct hash_table *table;
	int len;
	unsigned char *name;
d104 1
a104 1
	struct hash_bucket *bp, *pbp = (struct hash_bucket *)0;
d109 1
a109 1
		len = strlen ((char *)name);
d111 1
a111 1
	hashno = do_hash (name, len, table -> hash_count);
d113 13
a125 13
	/* Go through the list looking for an entry that matches;
	   if we find it, delete it. */
	for (bp = table -> buckets [hashno]; bp; bp = bp -> next) {
		if ((!bp -> len &&
		     !strcmp ((char *)bp -> name, (char *)name)) ||
		    (bp -> len == len &&
		     !memcmp (bp -> name, name, len))) {
			if (pbp) {
				pbp -> next = bp -> next;
			} else {
				table -> buckets [hashno] = bp -> next;
			}
			free_hash_bucket (bp, "delete_hash_entry");
d132 2
a133 4
unsigned char *hash_lookup (table, name, len)
	struct hash_table *table;
	unsigned char *name;
	int len;
d139 1
a139 1
		return (unsigned char *)0;
d142 1
a142 1
		len = strlen ((char *)name);
d144 1
a144 1
	hashno = do_hash (name, len, table -> hash_count);
d146 5
a150 5
	for (bp = table -> buckets [hashno]; bp; bp = bp -> next) {
		if (len == bp -> len && !memcmp (bp -> name, name, len))
			return bp -> value;
	}
	return (unsigned char *)0;
@

