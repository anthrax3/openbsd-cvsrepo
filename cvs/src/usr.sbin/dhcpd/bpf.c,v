head	1.16;
access;
symbols
	OPENBSD_6_0:1.14.0.2
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.6.0.14
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.12
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.10
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4;
locks; strict;
comment	@ * @;


1.16
date	2017.02.13.23.04.05;	author krw;	state Exp;
branches;
next	1.15;
commitid	amfLXbU964CBXnkr;

1.15
date	2017.02.13.19.13.14;	author krw;	state Exp;
branches;
next	1.14;
commitid	syYFt6P4XI7prXRF;

1.14
date	2016.05.28.07.00.18;	author natano;	state Exp;
branches;
next	1.13;
commitid	V3qpA476A18HvhDy;

1.13
date	2016.02.06.23.50.10;	author krw;	state Exp;
branches;
next	1.12;
commitid	8GMcSAoPYCa1rXN3;

1.12
date	2014.10.25.03.23.49;	author lteo;	state Exp;
branches;
next	1.11;
commitid	2uw1UTO4k6erpWzK;

1.11
date	2014.07.11.09.42.27;	author yasuoka;	state Exp;
branches;
next	1.10;
commitid	7SRccEu66mJK3N60;

1.10
date	2013.04.05.19.31.36;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2013.02.03.21.04.19;	author krw;	state Exp;
branches;
next	1.8;

1.8
date	2009.12.14.22.12.14;	author mpf;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.15.20.38.17;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2005.07.29.17.26.28;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.16.18.35.42;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.04.20.28.40;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.21.09.11.58;	author canacar;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.15.23.17.19;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.13.23.41.48;	author henning;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Eliminate pointless'%m' (a.k.a. hand rolled strerror()) by using fatal() and
log_warn(). Zap a couple of explicit 'syslog()' calls.
@
text
@/*	$OpenBSD: bpf.c,v 1.15 2017/02/13 19:13:14 krw Exp $	*/

/* BPF socket interface code, originally contributed by Archie Cobbs. */

/*
 * Copyright (c) 1995, 1996, 1998, 1999
 * The Internet Software Consortium.    All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/socket.h>

#include <arpa/inet.h>

#include <net/bpf.h>
#include <net/if.h>

#include <netinet/if_ether.h>
#include <netinet/in.h>

#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "dhcp.h"
#include "tree.h"
#include "dhcpd.h"
#include "log.h"

ssize_t send_packet	 (struct interface_info *, struct dhcp_packet *,
    size_t, struct in_addr, struct sockaddr_in *, struct hardware *);

/*
 * Called by get_interface_list for each interface that's discovered.
 * Opens a packet filter for each interface and adds it to the select
 * mask.
 */
int
if_register_bpf(struct interface_info *info)
{
	int sock;

	if ((sock = open("/dev/bpf0", O_RDWR)) == -1)
		fatal("Can't open bpf device");

	/* Set the BPF device to point at this interface. */
	if (ioctl(sock, BIOCSETIF, info->ifp) == -1)
		fatal("Can't attach interface %s to bpf device", info->name);

	info->send_packet = send_packet;
	return (sock);
}

void
if_register_send(struct interface_info *info)
{
	/*
	 * If we're using the bpf API for sending and receiving, we
	 * don't need to register this interface twice.
	 */
	info->wfdesc = info->rfdesc;
}

/*
 * Packet read filter program: 'ip and udp and dst port bootps'
 */
struct bpf_insn dhcp_bpf_filter[] = {
	/* Make sure this is an IP packet... */
	BPF_STMT(BPF_LD + BPF_H + BPF_ABS, 12),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ETHERTYPE_IP, 0, 8),

	/* Make sure it's a UDP packet... */
	BPF_STMT(BPF_LD + BPF_B + BPF_ABS, 23),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, IPPROTO_UDP, 0, 6),

	/* Make sure this isn't a fragment... */
	BPF_STMT(BPF_LD + BPF_H + BPF_ABS, 20),
	BPF_JUMP(BPF_JMP + BPF_JSET + BPF_K, 0x1fff, 4, 0),

	/* Get the IP header length... */
	BPF_STMT(BPF_LDX + BPF_B + BPF_MSH, 14),

	/* Make sure it's to the right port... */
	BPF_STMT(BPF_LD + BPF_H + BPF_IND, 16),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, SERVER_PORT, 0, 1),

	/* If we passed all the tests, ask for the whole packet. */
	BPF_STMT(BPF_RET+BPF_K, (u_int)-1),

	/* Otherwise, drop it. */
	BPF_STMT(BPF_RET+BPF_K, 0),
};

int dhcp_bpf_filter_len = sizeof(dhcp_bpf_filter) / sizeof(struct bpf_insn);


/*
 * Packet write filter program:
 * 'ip and udp and src port bootps and dst port (bootps or bootpc)'
 */
struct bpf_insn dhcp_bpf_wfilter[] = {
	/* Make sure this is an IP packet... */
	BPF_STMT(BPF_LD + BPF_H + BPF_ABS, 12),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ETHERTYPE_IP, 0, 11),

	/* Make sure it's a UDP packet... */
	BPF_STMT(BPF_LD + BPF_B + BPF_ABS, 23),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, IPPROTO_UDP, 0, 9),

	/* Make sure this isn't a fragment... */
	BPF_STMT(BPF_LD + BPF_H + BPF_ABS, 20),
	BPF_JUMP(BPF_JMP + BPF_JSET + BPF_K, 0x1fff, 7, 0),

	/* Get the IP header length... */
	BPF_STMT(BPF_LDX + BPF_B + BPF_MSH, 14),

	/* Make sure it's from the right port... */
	BPF_STMT(BPF_LD + BPF_H + BPF_IND, 14),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, SERVER_PORT, 0, 4),

	/* Make sure it is to the right ports ... */
	BPF_STMT(BPF_LD + BPF_H + BPF_IND, 16),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, CLIENT_PORT, 1, 0),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, SERVER_PORT, 0, 1),

	/* If we passed all the tests, ask for the whole packet. */
	BPF_STMT(BPF_RET+BPF_K, (u_int)-1),

	/* Otherwise, drop it. */
	BPF_STMT(BPF_RET+BPF_K, 0),
};

int dhcp_bpf_wfilter_len = sizeof(dhcp_bpf_wfilter) / sizeof(struct bpf_insn);

void
if_register_receive(struct interface_info *info)
{
	struct bpf_version v;
	struct bpf_program p;
	int flag = 1, sz, cmplt = 0;

	/* Open a BPF device and hang it on this interface... */
	info->rfdesc = if_register_bpf(info);

	/* Make sure the BPF version is in range... */
	if (ioctl(info->rfdesc, BIOCVERSION, &v) == -1)
		fatal("Can't get BPF version");

	if (v.bv_major != BPF_MAJOR_VERSION ||
	    v.bv_minor < BPF_MINOR_VERSION)
		fatalx("Kernel BPF version out of range - recompile dhcpd!");

	/*
	 * Set immediate mode so that reads return as soon as a packet
	 * comes in, rather than waiting for the input buffer to fill
	 * with packets.
	 */
	if (ioctl(info->rfdesc, BIOCIMMEDIATE, &flag) == -1)
		fatal("Can't set immediate mode on bpf device");

	if (ioctl(info->rfdesc, BIOCSFILDROP, &flag) == -1)
		fatal("Can't set filter-drop mode on bpf device");

	/* make sure kernel fills in the source ethernet address */
	if (ioctl(info->rfdesc, BIOCSHDRCMPLT, &cmplt) == -1)
		fatal("Can't set header complete flag on bpf device");

	/* Get the required BPF buffer length from the kernel. */
	if (ioctl(info->rfdesc, BIOCGBLEN, &sz) == -1)
		fatal("Can't get bpf buffer length");
	info->rbuf_max = sz;
	info->rbuf = malloc(info->rbuf_max);
	if (!info->rbuf)
		fatalx("Can't allocate %lu bytes for bpf input buffer.",
		    (unsigned long)info->rbuf_max);
	info->rbuf_offset = 0;
	info->rbuf_len = 0;

	/* Set up the bpf filter program structure. */
	p.bf_len = dhcp_bpf_filter_len;
	p.bf_insns = dhcp_bpf_filter;

	if (ioctl(info->rfdesc, BIOCSETF, &p) == -1)
		fatal("Can't install packet filter program");

	/* Set up the bpf write filter program structure. */
	p.bf_len = dhcp_bpf_wfilter_len;
	p.bf_insns = dhcp_bpf_wfilter;

	if (ioctl(info->rfdesc, BIOCSETWF, &p) == -1)
		fatal("Can't install write filter program");

	/* make sure these settings cannot be changed after dropping privs */
	if (ioctl(info->rfdesc, BIOCLOCK) == -1)
		fatal("Failed to lock bpf descriptor");
}

ssize_t
send_packet(struct interface_info *interface, struct dhcp_packet *raw,
    size_t len, struct in_addr from, struct sockaddr_in *to,
    struct hardware *hto)
{
	unsigned char buf[256];
	struct iovec iov[2];
	ssize_t result;
	int bufp = 0;

	/* Assemble the headers... */
	assemble_hw_header(interface, buf, &bufp, hto);
	assemble_udp_ip_header(interface, buf, &bufp, from.s_addr,
	    to->sin_addr.s_addr, to->sin_port, (unsigned char *)raw, len);

	/* Fire it off */
	iov[0].iov_base = (char *)buf;
	iov[0].iov_len = bufp;
	iov[1].iov_base = (char *)raw;
	iov[1].iov_len = len;

	result = writev(interface->wfdesc, iov, 2);
	if (result == -1)
		log_warn("send_packet");
	return (result);
}

ssize_t
receive_packet(struct interface_info *interface, unsigned char *buf,
    size_t len, struct sockaddr_in *from, struct hardware *hfrom)
{
	int length = 0, offset = 0;
	struct bpf_hdr hdr;

	/*
	 * All this complexity is because BPF doesn't guarantee that
	 * only one packet will be returned at a time.  We're getting
	 * what we deserve, though - this is a terrible abuse of the BPF
	 * interface.  Sigh.
	 */

	/* Process packets until we get one we can return or until we've
	 * done a read and gotten nothing we can return...
	 */
	do {
		/* If the buffer is empty, fill it. */
		if (interface->rbuf_offset == interface->rbuf_len) {
			length = read(interface->rfdesc, interface->rbuf,
			    interface->rbuf_max);
			if (length <= 0)
				return (length);
			interface->rbuf_offset = 0;
			interface->rbuf_len = BPF_WORDALIGN(length);
		}

		/*
		 * If there isn't room for a whole bpf header, something
		 * went wrong, but we'll ignore it and hope it goes
		 * away... XXX
		 */
		if (interface->rbuf_len - interface->rbuf_offset <
		    sizeof(hdr)) {
			interface->rbuf_offset = interface->rbuf_len;
			continue;
		}

		/* Copy out a bpf header... */
		memcpy(&hdr, &interface->rbuf[interface->rbuf_offset],
		    sizeof(hdr));

		/*
		 * If the bpf header plus data doesn't fit in what's
		 * left of the buffer, stick head in sand yet again...
		 */
		if (interface->rbuf_offset + hdr.bh_hdrlen + hdr.bh_caplen >
		    interface->rbuf_len) {
			interface->rbuf_offset = interface->rbuf_len;
			continue;
		}

		/*
		 * If the captured data wasn't the whole packet, or if
		 * the packet won't fit in the input buffer, all we can
		 * do is drop it.
		 */
		if (hdr.bh_caplen != hdr.bh_datalen) {
			interface->rbuf_offset = BPF_WORDALIGN(
			    interface->rbuf_offset + hdr.bh_hdrlen +
			    hdr.bh_caplen);
			continue;
		}

		/* Skip over the BPF header... */
		interface->rbuf_offset += hdr.bh_hdrlen;

		/* Decode the physical header... */
		offset = decode_hw_header(interface,
		    interface->rbuf, interface->rbuf_offset, hfrom);

		/*
		 * If a physical layer checksum failed (dunno of any
		 * physical layer that supports this, but WTH), skip
		 * this packet.
		 */
		if (offset < 0) {
			interface->rbuf_offset = BPF_WORDALIGN(
			    interface->rbuf_offset + hdr.bh_caplen);
			continue;
		}
		interface->rbuf_offset += offset;
		hdr.bh_caplen -= offset;

		/* Decode the IP and UDP headers... */
		offset = decode_udp_ip_header(interface, interface->rbuf,
		    interface->rbuf_offset, from, hdr.bh_caplen);

		/* If the IP or UDP checksum was bad, skip the packet... */
		if (offset < 0) {
			interface->rbuf_offset = BPF_WORDALIGN(
			    interface->rbuf_offset + hdr.bh_caplen);
			continue;
		}
		interface->rbuf_offset += offset;
		hdr.bh_caplen -= offset;

		/*
		 * If there's not enough room to stash the packet data,
		 * we have to skip it (this shouldn't happen in real
		 * life, though).
		 */
		if (hdr.bh_caplen > len) {
			interface->rbuf_offset = BPF_WORDALIGN(
			    interface->rbuf_offset + hdr.bh_caplen);
			continue;
		}

		/* Copy out the data in the packet... */
		memcpy(buf, interface->rbuf + interface->rbuf_offset,
		    hdr.bh_caplen);
		interface->rbuf_offset = BPF_WORDALIGN(interface->rbuf_offset +
		    hdr.bh_caplen);
		return (hdr.bh_caplen);
	} while (!length);
	return (0);
}
@


1.15
log
@Switch from old errwarn.c logging to shiny new log.[ch].

ok benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.14 2016/05/28 07:00:18 natano Exp $	*/
d81 1
a81 1
		fatalx("Can't open bpf device: %m");
d85 1
a85 2
		fatalx("Can't attach interface %s to bpf device: %m",
		    info->name);
d184 1
a184 1
		fatalx("Can't get BPF version: %m");
d196 1
a196 1
		fatalx("Can't set immediate mode on bpf device: %m");
d199 1
a199 1
		fatalx("Can't set filter-drop mode on bpf device: %m");
d203 1
a203 1
		fatalx("Can't set header complete flag on bpf device: %m");
d207 1
a207 1
		fatalx("Can't get bpf buffer length: %m");
d221 1
a221 1
		fatalx("Can't install packet filter program: %m");
d228 1
a228 1
		fatalx("Can't install write filter program: %m");
d232 1
a232 1
		fatalx("Failed to lock bpf descriptor: %m");
d258 1
a258 1
		log_warnx("send_packet: %m");
@


1.14
log
@Replace the /dev/bpf* open loop with a plain open("/dev/bpf0", ...).
ok deraadt jca
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.13 2016/02/06 23:50:10 krw Exp $	*/
d65 1
d81 1
a81 1
		error("Can't open bpf device: %m");
d85 1
a85 1
		error("Can't attach interface %s to bpf device: %m",
d185 1
a185 1
		error("Can't get BPF version: %m");
d189 1
a189 1
		error("Kernel BPF version out of range - recompile dhcpd!");
d197 1
a197 1
		error("Can't set immediate mode on bpf device: %m");
d200 1
a200 1
		error("Can't set filter-drop mode on bpf device: %m");
d204 1
a204 1
		error("Can't set header complete flag on bpf device: %m");
d208 1
a208 1
		error("Can't get bpf buffer length: %m");
d212 1
a212 1
		error("Can't allocate %lu bytes for bpf input buffer.",
d222 1
a222 1
		error("Can't install packet filter program: %m");
d229 1
a229 1
		error("Can't install write filter program: %m");
d233 1
a233 1
		error("Failed to lock bpf descriptor: %m");
d259 1
a259 1
		warning("send_packet: %m");
@


1.13
log
@Eliminate #include inside *.h files and include only needed headers in
each *.c file.

Inspired by mention of header silliness by Edgar Pettijohn and mmcc@@
on tech@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.12 2014/10/25 03:23:49 lteo Exp $	*/
a65 2
#define BPF_FORMAT "/dev/bpf%d"

d77 1
a77 2
	char filename[50];
	int sock, b;
d79 2
a80 12
	/* Open a BPF device */
	for (b = 0; 1; b++) {
		snprintf(filename, sizeof(filename), BPF_FORMAT, b);
		sock = open(filename, O_RDWR, 0);
		if (sock == -1) {
			if (errno == EBUSY)
				continue;
			else
				error("Can't find free bpf: %m");
		} else
			break;
	}
d84 2
a85 2
		error("Can't attach interface %s to bpf device %s: %m",
		    info->name, filename);
@


1.12
log
@Remove unnecessary netinet/in_systm.h include.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.11 2014/07/11 09:42:27 yasuoka Exp $	*/
a42 1
#include "dhcpd.h"
d44 4
a47 1
#include <sys/uio.h>
d50 2
a51 2
#include <netinet/ip.h>
#include <netinet/udp.h>
d53 12
@


1.11
log
@Add -u option to bind UDP port as a socket to answer DHCPINFORM from
the clients on non ethernet interfaces (eg. tun(4) or pppx(4)).

input krw
ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.10 2013/04/05 19:31:36 krw Exp $	*/
a47 1
#include <netinet/in_systm.h>
@


1.10
log
@send_packet() and writev() return ssize_t, not int. Use correct
type to store the returned value. From dhill.
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.9 2013/02/03 21:04:19 krw Exp $	*/
d55 3
d87 1
@


1.9
log
@Remove unused (a.k.a. always passed NULL) parameter 'data' from
decode_udp_ip_header() and the useless check of it. Part of original
diff from pelikan about udp length errors.
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.8 2009/12/14 22:12:14 mpf Exp $	*/
d238 2
a239 1
	int result, bufp = 0;
@


1.8
log
@Just like dhclient(8), we use the bpf filter drop to prevent
us from sending an icmp error along with the dhcp reply.
OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.7 2008/09/15 20:38:17 claudio Exp $	*/
d344 1
a344 1
		    interface->rbuf_offset, from, NULL, hdr.bh_caplen);
@


1.7
log
@When checking if a syscall like open(), ioctl() or writev() failed compare
directly against -1 and do not use a < 0 test. OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.6 2005/07/29 17:26:28 krw Exp $	*/
d193 3
@


1.6
log
@Fix erroneous use of '=' instead of '+' that caused infinite loops
when skipping packets. Use BPF_WORDALIGN() to properly skip packets.
From Brooks Davis at FreeBSD.

ok deraadt@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.5 2004/09/16 18:35:42 deraadt Exp $	*/
d70 1
a70 1
		if (sock < 0) {
d80 1
a80 1
	if (ioctl(sock, BIOCSETIF, info->ifp) < 0)
d179 1
a179 1
	if (ioctl(info->rfdesc, BIOCVERSION, &v) < 0)
d191 1
a191 1
	if (ioctl(info->rfdesc, BIOCIMMEDIATE, &flag) < 0)
d195 1
a195 1
	if (ioctl(info->rfdesc, BIOCSHDRCMPLT, &cmplt) < 0)
d199 1
a199 1
	if (ioctl(info->rfdesc, BIOCGBLEN, &sz) < 0)
d213 1
a213 1
	if (ioctl(info->rfdesc, BIOCSETF, &p) < 0)
d220 1
a220 1
	if (ioctl(info->rfdesc, BIOCSETWF, &p) < 0)
d224 1
a224 1
	if (ioctl(info->rfdesc, BIOCLOCK) < 0)
d249 1
a249 1
	if (result < 0)
@


1.5
log
@avoid aliasing with libc functions; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.4 2004/05/04 20:28:40 deraadt Exp $	*/
d279 1
a279 1
			interface->rbuf_len = length;
d313 3
a315 1
			interface->rbuf_offset += hdr.bh_hdrlen = hdr.bh_caplen;
d332 2
a333 1
			interface->rbuf_offset += hdr.bh_caplen;
d345 2
a346 1
			interface->rbuf_offset += hdr.bh_caplen;
d358 2
a359 1
			interface->rbuf_offset += hdr.bh_caplen;
d366 2
a367 1
		interface->rbuf_offset += hdr.bh_caplen;
@


1.4
log
@remove things not used, spotted by lint mostly; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.3 2004/04/21 09:11:58 canacar Exp $	*/
d250 1
a250 1
		warn("send_packet: %m");
@


1.3
log
@filter writes and lock bpf descriptor, ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.2 2004/04/15 23:17:19 henning Exp $	*/
d229 3
a231 3
send_packet(struct interface_info *interface, struct packet *packet,
    struct dhcp_packet *raw, size_t len, struct in_addr from,
    struct sockaddr_in *to, struct hardware *hto)
@


1.2
log
@dhcpd actually does not listen on port 68 ...
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.1 2004/04/13 23:41:48 henning Exp $	*/
d98 1
a98 4
 * Packet filter program...
 *
 * XXX: Changes to the filter program may require changes to the
 * constant offsets used in if_register_send to patch the BPF program!
d118 1
a118 1
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, 67, 0, 1),		/* patch */
d129 39
d173 1
a173 1
	int flag = 1, sz;
d194 4
a212 7
	/* Patch the server port into the BPF program...
	 *
	 * XXX: changes to filter program may require changes to the
	 * insn number(s) used below!
	 */
	dhcp_bpf_filter[8].k = ntohs(local_port);

d215 11
@


1.1
log
@may the whacking begin
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.10 2004/03/02 18:49:21 deraadt Exp $	*/
d178 1
a178 1
	dhcp_bpf_filter[8].k = LOCAL_PORT;
@

