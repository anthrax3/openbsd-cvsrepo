head	1.18;
access;
symbols
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.15.0.4
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.14.0.10
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.10.0.34
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.32
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.30
	OPENBSD_5_0:1.10.0.28
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.26
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.24
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.20
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.22
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.18
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.16
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.14
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.12
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.10
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.8
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9;
locks; strict;
comment	@ * @;


1.18
date	2017.02.13.23.04.05;	author krw;	state Exp;
branches;
next	1.17;
commitid	amfLXbU964CBXnkr;

1.17
date	2017.02.13.19.13.14;	author krw;	state Exp;
branches;
next	1.16;
commitid	syYFt6P4XI7prXRF;

1.16
date	2016.08.27.01.26.22;	author guenther;	state Exp;
branches;
next	1.15;
commitid	mLhDPn5m6RI81k8n;

1.15
date	2016.02.06.23.50.10;	author krw;	state Exp;
branches;
next	1.14;
commitid	8GMcSAoPYCa1rXN3;

1.14
date	2014.02.08.18.12.17;	author krw;	state Exp;
branches;
next	1.13;

1.13
date	2013.04.20.01.18.55;	author krw;	state Exp;
branches;
next	1.12;

1.12
date	2013.04.17.19.26.10;	author krw;	state Exp;
branches;
next	1.11;

1.11
date	2013.04.13.16.40.36;	author krw;	state Exp;
branches;
next	1.10;

1.10
date	2004.09.16.18.35.42;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2004.07.29.11.58.41;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2004.07.09.16.22.02;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.18.01.19.07;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.18.00.43.27;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.15.23.20.23;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.15.21.57.04;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.14.04.34.19;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.13.23.57.49;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.13.23.41.48;	author henning;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Eliminate pointless'%m' (a.k.a. hand rolled strerror()) by using fatal() and
log_warn(). Zap a couple of explicit 'syslog()' calls.
@
text
@/*	$OpenBSD: db.c,v 1.17 2017/02/13 19:13:14 krw Exp $	*/

/*
 * Persistent database management routines for DHCPD.
 */

/*
 * Copyright (c) 1995, 1996 The Internet Software Consortium.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <net/if.h>

#include <netinet/in.h>

#include <fcntl.h>
#include <stdio.h>
#include <time.h>
#include <unistd.h>

#include "dhcp.h"
#include "tree.h"
#include "dhcpd.h"
#include "log.h"

FILE *db_file;

static int counting = 0;
static int count = 0;
time_t write_time;

/*
 * Write the specified lease to the current lease database file.
 */
int
write_lease(struct lease *lease)
{
	char tbuf[26];	/* "w yyyy/mm/dd hh:mm:ss UTC" */
	size_t rsltsz;
	int errors = 0;
	int i;

	if (counting)
		++count;
	if (fprintf(db_file, "lease %s {\n", piaddr(lease->ip_addr)) == -1)
		++errors;

	rsltsz = strftime(tbuf, sizeof(tbuf), DB_TIMEFMT,
	    gmtime(&lease->starts));
	if (rsltsz == 0 || fprintf(db_file, "\tstarts %s;\n", tbuf) == -1)
		errors++;

	rsltsz = strftime(tbuf, sizeof(tbuf), DB_TIMEFMT,
	    gmtime(&lease->ends));
	if (rsltsz == 0 || fprintf(db_file, "\tends %s;\n", tbuf) == -1)
		errors++;

	if (lease->hardware_addr.hlen) {
		if (fprintf(db_file, "\thardware %s %s;",
		    hardware_types[lease->hardware_addr.htype],
		    print_hw_addr(lease->hardware_addr.htype,
		    lease->hardware_addr.hlen,
		    lease->hardware_addr.haddr)) == -1)
			++errors;
	}

	if (lease->uid_len) {
		int j;

		if (fprintf(db_file, "\n\tuid %2.2x", lease->uid[0]) == -1)
			++errors;

		for (j = 1; j < lease->uid_len; j++) {
			if (fprintf(db_file, ":%2.2x", lease->uid[j]) == -1)
				++errors;
		}
		if (fputc(';', db_file) == EOF)
			++errors;
	}

	if (lease->flags & BOOTP_LEASE) {
		if (fprintf(db_file, "\n\tdynamic-bootp;") == -1)
			++errors;
	}

	if (lease->flags & ABANDONED_LEASE) {
		if (fprintf(db_file, "\n\tabandoned;") == -1)
			++errors;
	}

	if (lease->client_hostname) {
		for (i = 0; lease->client_hostname[i]; i++)
			if (lease->client_hostname[i] < 33 ||
			    lease->client_hostname[i] > 126)
				goto bad_client_hostname;
		if (fprintf(db_file, "\n\tclient-hostname \"%s\";",
		    lease->client_hostname) == -1)
			++errors;
	}

bad_client_hostname:
	if (lease->hostname) {
		for (i = 0; lease->hostname[i]; i++)
			if (lease->hostname[i] < 33 ||
			    lease->hostname[i] > 126)
				goto bad_hostname;
		if (fprintf(db_file, "\n\thostname \"%s\";",
		    lease->hostname) == -1)
			++errors;
	}

bad_hostname:
	if (fputs("\n}\n", db_file) == EOF)
		++errors;

	if (errors)
		log_info("write_lease: unable to write lease %s",
		    piaddr(lease->ip_addr));

	return (!errors);
}

/*
 * Commit any leases that have been written out...
 */
int
commit_leases(void)
{
	/*
	 * Commit any outstanding writes to the lease database file. We need to
	 * do this even if we're rewriting the file below, just in case the
	 * rewrite fails.
	 */
	if (fflush(db_file) == EOF) {
		log_warn("commit_leases: unable to commit");
		return (0);
	}

	if (fsync(fileno(db_file)) == -1) {
		log_warn("commit_leases: unable to commit");
		return (0);
	}

	/*
	 * If we've written more than a thousand leases or if we haven't
	 * rewritten the lease database in over an hour, rewrite it now.
	 */
	if (count > 1000 || (count && cur_time - write_time > 3600)) {
		count = 0;
		write_time = cur_time;
		new_lease_file();
	}

	return (1);
}

void
db_startup(void)
{
	int db_fd;

	/* open lease file. once we dropped privs it has to stay open */
	db_fd = open(path_dhcpd_db, O_WRONLY|O_CREAT, 0640);
	if (db_fd == -1)
		fatal("Can't create new lease file");
	if ((db_file = fdopen(db_fd, "w")) == NULL)
		fatalx("Can't fdopen new lease file!");

	/* Read in the existing lease file... */
	read_leases();
	time(&write_time);

	new_lease_file();
}

void
new_lease_file(void)
{
	fflush(db_file);
	rewind(db_file);

	/* Write out all the leases that we know of... */
	counting = 0;
	write_leases();

	fflush(db_file);
	ftruncate(fileno(db_file), ftello(db_file));
	fsync(fileno(db_file));

	counting = 1;
}
@


1.17
log
@Switch from old errwarn.c logging to shiny new log.[ch].

ok benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db.c,v 1.16 2016/08/27 01:26:22 guenther Exp $	*/
d171 1
a171 1
		log_info("commit_leases: unable to commit: %m");
d176 1
a176 1
		log_info("commit_leases: unable to commit: %m");
d201 1
a201 1
		fatalx("Can't create new lease file: %m");
@


1.16
log
@Pull in <time.h> for one or more of gmtime, strftime, strptime, time,
timegm, and tzset

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db.c,v 1.15 2016/02/06 23:50:10 krw Exp $	*/
d60 1
d153 1
a153 1
		note("write_lease: unable to write lease %s",
d171 1
a171 1
		note("commit_leases: unable to commit: %m");
d176 1
a176 1
		note("commit_leases: unable to commit: %m");
d201 1
a201 1
		error("Can't create new lease file: %m");
d203 1
a203 1
		error("Can't fdopen new lease file!");
@


1.15
log
@Eliminate #include inside *.h files and include only needed headers in
each *.c file.

Inspired by mention of header silliness by Edgar Pettijohn and mmcc@@
on tech@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: db.c,v 1.14 2014/02/08 18:12:17 krw Exp $	*/
d54 1
@


1.14
log
@Create dhclient lease files and dhcpd lease files with permissions 0640,
rather than 0000 and 0664 respectively.

ok kettenis@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db.c,v 1.13 2013/04/20 01:18:55 krw Exp $	*/
d45 13
@


1.13
log
@Remove extraneous "\n" erroneously introduced by move to strftime().

Spotted by sthen@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: db.c,v 1.12 2013/04/17 19:26:10 krw Exp $	*/
d184 1
a184 1
	db_fd = open(path_dhcpd_db, O_WRONLY|O_CREAT, 0664);
@


1.12
log
@Replace hand-rolled date printing/parsing code with strftime()/strptime().
Use timegm() because all the dates are in UTC and the 'standard'
routines can't handle the truth.

Remove some 'time_t is 32bits' assumptions.

Print 'UTC' at the end of dates in the leases file, rather than
mentioning that all dates are UTC in a comment at the top of the
file.

Feedback and suggestions from guenther@@, kettenis@@, otto@@, tedu@@,
deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: db.c,v 1.11 2013/04/13 16:40:36 krw Exp $	*/
d80 1
a80 1
		if (fprintf(db_file, "\n\thardware %s %s;",
@


1.11
log
@Don't dance with errno, just check the return values of fprintf(),
fputs() and fputc() to see if a failure occurred. Add a couple of
missing checks. Replace putc() with fputc(). Shorter, nicer code.
No functional change.

ok fgsch@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db.c,v 1.10 2004/09/16 18:35:42 deraadt Exp $	*/
d59 2
a60 2
	struct tm *t;
	char tbuf[64];
d69 9
a77 15
	t = gmtime(&lease->starts);
	snprintf(tbuf, sizeof(tbuf), "%d %d/%02d/%02d %02d:%02d:%02d;",
	    t->tm_wday, t->tm_year + 1900, t->tm_mon + 1, t->tm_mday,
	    t->tm_hour, t->tm_min, t->tm_sec);

	if (fprintf(db_file, "\tstarts %s\n", tbuf) == -1)
		++errors;

	t = gmtime(&lease->ends);
	snprintf(tbuf, sizeof(tbuf), "%d %d/%02d/%02d %02d:%02d:%02d;",
	    t->tm_wday, t->tm_year + 1900, t->tm_mon + 1, t->tm_mday,
	    t->tm_hour, t->tm_min, t->tm_sec);

	if (fprintf(db_file, "\tends %s", tbuf) == -1)
		++errors;
a201 8

	/*
	 * Write an introduction so people don't complain about time being off.
	 */
	fprintf(db_file, "# All times in this file are in UTC (GMT), "
	    "not your local timezone.\n");
	fprintf(db_file, "# The format of this file is documented in "
	    "the dhcpd.leases(5) manual page.\n\n");
@


1.10
log
@avoid aliasing with libc functions; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: db.c,v 1.9 2004/07/29 11:58:41 henning Exp $	*/
d66 1
a66 3
	errno = 0;
	fprintf(db_file, "lease %s {\n", piaddr(lease->ip_addr));
	if (errno)
d74 1
a74 3
	errno = 0;
	fprintf(db_file, "\tstarts %s\n", tbuf);
	if (errno)
d82 1
a82 3
	errno = 0;
	fprintf(db_file, "\tends %s", tbuf);
	if (errno)
d86 1
a86 2
		errno = 0;
		fprintf(db_file, "\n\thardware %s %s;",
d90 1
a90 2
		    lease->hardware_addr.haddr));
		if (errno)
d97 1
a97 3
		errno = 0;
		fprintf(db_file, "\n\tuid %2.2x", lease->uid[0]);
		if (errno)
d101 1
a101 3
			errno = 0;
			fprintf(db_file, ":%2.2x", lease->uid[j]);
			if (errno)
d104 2
a105 1
		putc(';', db_file);
d109 1
a109 3
		errno = 0;
		fprintf(db_file, "\n\tdynamic-bootp;");
		if (errno)
d114 1
a114 3
		errno = 0;
		fprintf(db_file, "\n\tabandoned;");
		if (errno)
d123 2
a124 4
		errno = 0;
		fprintf(db_file, "\n\tclient-hostname \"%s\";",
		    lease->client_hostname);
		if (errno)
d134 2
a135 4
		errno = 0;
		fprintf(db_file, "\n\thostname \"%s\";",
		    lease->hostname);
		if (errno)
d140 1
a140 3
	errno = 0;
	fputs("\n}\n", db_file);
	if (errno)
@


1.9
log
@don't wipe lease file on startup, found & solution tested nick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db.c,v 1.8 2004/07/09 16:22:02 deraadt Exp $	*/
d103 2
a104 1
		int i;
d110 1
a110 1
		for (i = 1; i < lease->uid_len; i++) {
d112 1
a112 1
			fprintf(db_file, ":%2.2x", lease->uid[i]);
d243 1
a243 1
	ftruncate(fileno(db_file), ftell(db_file));
@


1.8
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: db.c,v 1.7 2004/04/18 01:19:07 henning Exp $	*/
d210 1
a210 1
	db_fd = open(path_dhcpd_db, O_WRONLY|O_TRUNC|O_CREAT, 0664);
@


1.7
log
@more KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: db.c,v 1.6 2004/04/18 00:43:27 deraadt Exp $	*/
d224 1
a224 1
new_lease_file()
@


1.6
log
@various knf; henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: db.c,v 1.5 2004/04/15 23:20:23 henning Exp $	*/
d115 1
a115 1
		putc (';', db_file);
@


1.5
log
@do not close and re-open the leases file all the time, instead open it once
and rewind as neccessary
@
text
@d1 1
a1 1
/*	$OpenBSD: db.c,v 1.4 2004/04/15 21:57:04 henning Exp $	*/
d60 1
a60 1
	char tbuf [64];
d146 3
a148 3
		for (i = 0; lease->hostname [i]; i++)
			if (lease->hostname [i] < 33 ||
			    lease->hostname [i] > 126)
@


1.4
log
@cleaning; from pedro
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d207 9
d219 1
d226 2
a227 19
	char newfname [MAXPATHLEN];
	char backfname [MAXPATHLEN];
	time_t t;
	int db_fd;

	/* If we already have an open database, close it. */
	if (db_file)
		fclose(db_file);

	/* Make a temporary lease file... */
	time(&t);
	snprintf(newfname, sizeof(newfname), "%s.%d", path_dhcpd_db,
	    (int)t);

	db_fd = open (newfname, O_WRONLY | O_TRUNC | O_CREAT, 0664);
	if (db_fd == -1)
		error("Can't create new lease file: %m");
	if ((db_file = fdopen(db_fd, "w")) == NULL)
		error("Can't fdopen new lease file!");
d241 3
a243 13
	/* Get the old database out of the way... */
	snprintf(backfname, sizeof(backfname), "%s~", path_dhcpd_db);
	if (unlink(backfname) == -1 && errno != ENOENT)
		error("Can't remove old lease database backup %s: %m",
		    backfname);
	if (link(path_dhcpd_db, backfname) == -1)
		error("Can't backup lease database %s to %s: %m",
		    path_dhcpd_db, backfname);

	/* Move in the new file... */
	if (rename(newfname, path_dhcpd_db) == -1)
		error("Can't install new lease database %s to %s: %m",
		    newfname, path_dhcpd_db);
@


1.3
log
@spaces
@
text
@d1 1
a1 1
/* db.c
d3 3
a5 1
   Persistent database management routines for DHCPD... */
d53 5
a57 4
/* Write the specified lease to the current lease database file. */

int write_lease (lease)
	struct lease *lease;
d67 2
a68 2
	fprintf (db_file, "lease %s {\n", piaddr (lease -> ip_addr));
	if (errno) {
a69 1
	}
d71 5
a75 5
	t = gmtime (&lease -> starts);
	snprintf (tbuf, sizeof tbuf, "%d %d/%02d/%02d %02d:%02d:%02d;",
		 t -> tm_wday, t -> tm_year + 1900,
		 t -> tm_mon + 1, t -> tm_mday,
		 t -> tm_hour, t -> tm_min, t -> tm_sec);
d77 2
a78 2
	fprintf (db_file, "\tstarts %s\n", tbuf);
	if (errno) {
a79 1
	}
d81 5
a85 5
	t = gmtime (&lease -> ends);
	snprintf (tbuf, sizeof tbuf,"%d %d/%02d/%02d %02d:%02d:%02d;",
		 t -> tm_wday, t -> tm_year + 1900,
		 t -> tm_mon + 1, t -> tm_mday,
		 t -> tm_hour, t -> tm_min, t -> tm_sec);
d87 2
a88 2
	fprintf (db_file, "\tends %s", tbuf);
	if (errno) {
a89 1
	}
d91 1
a91 1
	if (lease -> hardware_addr.hlen) {
d93 6
a98 6
		fprintf (db_file, "\n\thardware %s %s;",
			 hardware_types [lease -> hardware_addr.htype],
			 print_hw_addr (lease -> hardware_addr.htype,
					lease -> hardware_addr.hlen,
					lease -> hardware_addr.haddr));
		if (errno) {
a99 1
		}
d101 2
a102 1
	if (lease -> uid_len) {
d105 2
a106 2
		fprintf (db_file, "\n\tuid %2.2x", lease -> uid [0]);
		if (errno) {
d108 2
a109 2
		}
		for (i = 1; i < lease -> uid_len; i++) {
d111 2
a112 2
			fprintf (db_file, ":%2.2x", lease -> uid [i]);
			if (errno) {
a113 1
			}
d117 2
a118 1
	if (lease -> flags & BOOTP_LEASE) {
d120 2
a121 2
		fprintf (db_file, "\n\tdynamic-bootp;");
		if (errno) {
a122 1
		}
d124 2
a125 1
	if (lease -> flags & ABANDONED_LEASE) {
d127 2
a128 2
		fprintf (db_file, "\n\tabandoned;");
		if (errno) {
a129 1
		}
d131 5
a135 4
	if (lease -> client_hostname) {
		for (i = 0; lease -> client_hostname [i]; i++)
			if (lease -> client_hostname [i] < 33 ||
			    lease -> client_hostname [i] > 126)
d138 3
a140 3
		fprintf (db_file, "\n\tclient-hostname \"%s\";",
			 lease -> client_hostname);
		if (errno) {
a141 1
		}
d143 6
a148 5
       bad_client_hostname:
	if (lease -> hostname) {
		for (i = 0; lease -> hostname [i]; i++)
			if (lease -> hostname [i] < 33 ||
			    lease -> hostname [i] > 126)
d151 3
a153 4
		errno = 0;
		fprintf (db_file, "\n\thostname \"%s\";",
			 lease -> hostname);
		if (errno) {
a154 1
		}
d156 2
a157 1
       bad_hostname:
d159 2
a160 2
	fputs ("\n}\n", db_file);
	if (errno) {
d162 1
a162 1
	}
d164 4
a167 3
		note ("write_lease: unable to write lease %s",
		      piaddr (lease -> ip_addr));
	return !errors;
d170 5
a174 3
/* Commit any leases that have been written out... */

int commit_leases ()
d176 19
a194 15
	/* Commit any outstanding writes to the lease database file.
	   We need to do this even if we're rewriting the file below,
	   just in case the rewrite fails. */
	if (fflush (db_file) == EOF) {
		note ("commit_leases: unable to commit: %m");
		return 0;
	}
	if (fsync (fileno (db_file)) == -1) {
		note ("commit_leases: unable to commit: %m");
		return 0;
	}

	/* If we've written more than a thousand leases or if
	   we haven't rewritten the lease database in over an
	   hour, rewrite it now. */
d198 1
a198 1
		new_lease_file ();
d200 2
a201 1
	return 1;
d204 2
a205 1
void db_startup ()
d208 1
a208 2
	read_leases ();

d210 1
a210 1
	new_lease_file ();
d213 2
a214 1
void new_lease_file ()
d222 2
a223 3
	if (db_file) {
		fclose (db_file);
	}
d227 3
a229 1
	snprintf (newfname, sizeof newfname,"%s.%d", path_dhcpd_db, (int)t);
d231 12
a242 13
	if (db_fd == -1) {
		error ("Can't create new lease file: %m");
	}
	if ((db_file = fdopen (db_fd, "w")) == NULL) {
		error ("Can't fdopen new lease file!");
	}

	/* Write an introduction so people don't complain about time
	   being off. */
	fprintf (db_file, "# All times in this file are in UTC (GMT), not %s",
		 "your local timezone.\n");
	fprintf (db_file, "# The format of this file is documented in the %s",
		 "dhcpd.leases(5) manual page.\n\n");
d246 1
a246 1
	write_leases ();
d249 7
a255 7
	snprintf (backfname, sizeof backfname, "%s~", path_dhcpd_db);
	if (unlink (backfname) == -1 && errno != ENOENT)
		error ("Can't remove old lease database backup %s: %m",
		       backfname);
	if (link (path_dhcpd_db, backfname) == -1)
		error ("Can't backup lease database %s to %s: %m",
		       path_dhcpd_db, backfname);
d258 3
a260 3
	if (rename (newfname, path_dhcpd_db) == -1)
		error ("Can't install new lease database %s to %s: %m",
		       newfname, path_dhcpd_db);
@


1.2
log
@time_t and kill a few dumb defines
@
text
@d248 1
a248 1
	
@


1.1
log
@may the whacking begin
@
text
@d49 1
a49 1
TIME write_time;
d202 1
a202 1
	GET_TIME (&write_time);
d210 1
a210 1
	TIME t;
d219 1
a219 1
	GET_TIME (&t);
@

