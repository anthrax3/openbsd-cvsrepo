head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.2
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.15.0.4
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.14
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.14
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.10
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.8
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.6
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.17
date	2017.02.13.22.33.39;	author krw;	state Exp;
branches;
next	1.16;
commitid	aD6aChUv7GEv3CLZ;

1.16
date	2016.02.06.23.50.10;	author krw;	state Exp;
branches;
next	1.15;
commitid	8GMcSAoPYCa1rXN3;

1.15
date	2015.05.18.17.51.21;	author krw;	state Exp;
branches;
next	1.14;
commitid	SjQKXPdyGuKrZRc7;

1.14
date	2015.05.02.14.29.32;	author krw;	state Exp;
branches;
next	1.13;
commitid	JcR9NePskWu9skGw;

1.13
date	2015.05.02.12.37.35;	author krw;	state Exp;
branches;
next	1.12;
commitid	Fd1cG6Ltt63O8Ell;

1.12
date	2013.12.05.22.31.35;	author krw;	state Exp;
branches;
next	1.11;

1.11
date	2013.06.04.13.00.07;	author krw;	state Exp;
branches;
next	1.10;

1.10
date	2009.09.01.08.42.31;	author reyk;	state Exp;
branches;
next	1.9;

1.9
date	2006.12.17.18.03.33;	author stevesk;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.20.19.50.08;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.18.19.18.31;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.25.16.24.12;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2005.07.26.19.14.57;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.16.18.35.42;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.14.00.56.02;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.13.23.57.49;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.13.23.41.48;	author henning;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Adjust some long lines.
@
text
@/*	$OpenBSD: conflex.c,v 1.16 2016/02/06 23:50:10 krw Exp $	*/

/* Lexical scanner for dhcpd config file... */

/*
 * Copyright (c) 1995, 1996, 1997 The Internet Software Consortium.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <net/if.h>

#include <netinet/in.h>

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "dhcp.h"
#include "tree.h"
#include "dhcpd.h"
#include "dhctoken.h"

int lexline;
int lexchar;
char *token_line;
char *prev_line;
char *cur_line;
char *tlname;
int eol_token;

static char line1[81];
static char line2[81];
static int lpos;
static int line;
static int tlpos;
static int tline;
static int token;
static int ugflag;
static char *tval;
static char tokbuf[1500];

static int get_char(FILE *);
static int get_token(FILE *);
static void skip_to_eol(FILE *);
static int read_string(FILE *);
static int read_num_or_name(int, FILE *);
static int intern(char *, int);

void
new_parse(char *name)
{
	tlname = name;
	lpos = line = 1;
	cur_line = line1;
	prev_line = line2;
	token_line = cur_line;
	cur_line[0] = prev_line[0] = 0;
	warnings_occurred = 0;
}

static int
get_char(FILE *cfile)
{
	int c = getc(cfile);
	if (!ugflag) {
		if (c == '\n') {
			if (cur_line == line1) {
				cur_line = line2;
				prev_line = line1;
			} else {
				cur_line = line1;
				prev_line = line2;
			}
			line++;
			lpos = 1;
			cur_line[0] = 0;
		} else if (c != EOF) {
			if (lpos < sizeof(line1)) {
				cur_line[lpos - 1] = c;
				cur_line[lpos] = 0;
			}
			lpos++;
		}
	} else
		ugflag = 0;
	return (c);
}

static int
get_token(FILE *cfile)
{
	int		c, ttok;
	static char	tb[2];
	int		l, p;

	do {
		l = line;
		p = lpos;

		c = get_char(cfile);

		if (!(c == '\n' && eol_token) && isascii(c) && isspace(c))
			continue;
		if (c == '#') {
			skip_to_eol(cfile);
			continue;
		}
		lexline = l;
		lexchar = p;
		if (c == '"') {
			ttok = read_string(cfile);
			break;
		} else if (c == '-' || (isascii(c) && isalnum(c))) {
			ttok = read_num_or_name(c, cfile);
			break;
		} else {
			tb[0] = c;
			tb[1] = 0;
			tval = tb;
			ttok = c;
			break;
		}
	} while (1);
	return (ttok);
}

int
next_token(char **rval, FILE *cfile)
{
	int	rv;

	if (token) {
		if (lexline != tline)
			token_line = cur_line;
		lexchar = tlpos;
		lexline = tline;
		rv = token;
		token = 0;
	} else {
		rv = get_token(cfile);
		token_line = cur_line;
	}
	if (rval)
		*rval = tval;

	return (rv);
}

int
peek_token(char **rval, FILE *cfile)
{
	int	x;

	if (!token) {
		tlpos = lexchar;
		tline = lexline;
		token = get_token(cfile);
		if (lexline != tline)
			token_line = prev_line;
		x = lexchar;
		lexchar = tlpos;
		tlpos = x;
		x = lexline;
		lexline = tline;
		tline = x;
	}
	if (rval)
		*rval = tval;

	return (token);
}

static void
skip_to_eol(FILE *cfile)
{
	int	c;

	do {
		c = get_char(cfile);
		if (c == EOF)
			return;
		if (c == '\n')
			return;
	} while (1);
}

static int
read_string(FILE *cfile)
{
	int i, c, bs;

	bs = i = 0;
	do {
		c = get_char(cfile);
		if (bs)
			bs = 0;
		else if (c == '\\')
			bs = 1;

		if (c != '"' && c != EOF && bs == 0)
			tokbuf[i++] = c;

	} while (i < (sizeof(tokbuf) - 1) && c != EOF && c != '"');

	if (c == EOF)
		parse_warn("eof in string constant");
	else if (c != '"')
		parse_warn("string constant larger than internal buffer");

	tokbuf[i] = 0;
	tval = tokbuf;

	return (TOK_STRING);
}

static int
read_num_or_name(int c, FILE *cfile)
{
	int i, rv, xdigits;

	xdigits = isxdigit(c) ? 1 : 0;

	tokbuf[0] = c;
	for (i = 1; i < sizeof(tokbuf); i++) {
		c = get_char(cfile);
		if (!isascii(c) || (c != '-' && c != '_' && !isalnum(c))) {
			ungetc(c, cfile);
			ugflag = 1;
			break;
		}
		if (isxdigit(c))
			xdigits++;
		tokbuf[i] = c;
	}
	if (i == sizeof(tokbuf)) {
		parse_warn("token larger than internal buffer");
		i--;
		c = tokbuf[i];
		if (isxdigit(c))
			xdigits--;
	}
	tokbuf[i] = 0;
	tval = tokbuf;

	c = (unsigned int)tokbuf[0];

	if (c == '-')
		rv = TOK_NUMBER;
	else
		rv = intern(tval, TOK_NUMBER_OR_NAME);

	if (rv == TOK_NUMBER_OR_NAME && xdigits != i)
		rv = TOK_NAME;

	return (rv);
}

static const struct keywords {
	const char	*k_name;
	int		k_val;
} keywords[] = {
	{ "abandoned",			TOK_ABANDONED },
	{ "allow",			TOK_ALLOW },
	{ "always-reply-rfc1048",	TOK_ALWAYS_REPLY_RFC1048 },
	{ "authoritative",		TOK_AUTHORITATIVE },
	{ "booting",			TOK_BOOTING },
	{ "bootp",			TOK_BOOTP },
	{ "class",			TOK_CLASS },
	{ "client-hostname",		TOK_CLIENT_HOSTNAME },
	{ "default-lease-time",		TOK_DEFAULT_LEASE_TIME },
	{ "deny",			TOK_DENY },
	{ "domain",			TOK_DOMAIN },
	{ "dynamic-bootp",		TOK_DYNAMIC_BOOTP },
	{ "dynamic-bootp-lease-cutoff",	TOK_DYNAMIC_BOOTP_LEASE_CUTOFF },
	{ "dynamic-bootp-lease-length",	TOK_DYNAMIC_BOOTP_LEASE_LENGTH },
	{ "ends",			TOK_ENDS },
	{ "ethernet",			TOK_ETHERNET },
	{ "filename",			TOK_FILENAME },
	{ "fixed-address",		TOK_FIXED_ADDR },
	{ "get-lease-hostnames",	TOK_GET_LEASE_HOSTNAMES },
	{ "group",			TOK_GROUP },
	{ "hardware",			TOK_HARDWARE },
	{ "host",			TOK_HOST },
	{ "hostname",			TOK_HOSTNAME },
	{ "ipsec-tunnel",		TOK_IPSEC_TUNNEL },
	{ "lease",			TOK_LEASE },
	{ "max-lease-time",		TOK_MAX_LEASE_TIME },
	{ "netmask",			TOK_NETMASK },
	{ "next-server",		TOK_NEXT_SERVER },
	{ "not",			TOK_TOKEN_NOT },
	{ "option",			TOK_OPTION },
	{ "range",			TOK_RANGE },
	{ "server-identifier",		TOK_SERVER_IDENTIFIER },
	{ "server-name",		TOK_SERVER_NAME },
	{ "shared-network",		TOK_SHARED_NETWORK },
	{ "starts",			TOK_STARTS },
	{ "subnet",			TOK_SUBNET },
	{ "timeout",			TOK_TIMEOUT },
	{ "timestamp",			TOK_TIMESTAMP },
	{ "uid",			TOK_UID },
	{ "unknown-clients",		TOK_UNKNOWN_CLIENTS },
	{ "use-host-decl-names",	TOK_USE_HOST_DECL_NAMES },
	{ "use-lease-addr-for-default-route",
					TOK_USE_LEASE_ADDR_FOR_DEFAULT_ROUTE },
	{ "user-class",			TOK_USER_CLASS },
	{ "vendor-class",		TOK_VENDOR_CLASS }
};

int
kw_cmp(const void *k, const void *e)
{
	return (strcasecmp(k, ((const struct keywords *)e)->k_name));
}

static int
intern(char *atom, int dfv)
{
	const struct keywords *p;

	p = bsearch(atom, keywords, sizeof(keywords)/sizeof(keywords[0]),
	    sizeof(keywords[0]), kw_cmp);
	if (p)
		return (p->k_val);
	return (dfv);
}
@


1.16
log
@Eliminate #include inside *.h files and include only needed headers in
each *.c file.

Inspired by mention of header silliness by Edgar Pettijohn and mmcc@@
on tech@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: conflex.c,v 1.15 2015/05/18 17:51:21 krw Exp $	*/
d299 45
a343 44
	{ "abandoned",				TOK_ABANDONED },
	{ "allow",				TOK_ALLOW },
	{ "always-reply-rfc1048",		TOK_ALWAYS_REPLY_RFC1048 },
	{ "authoritative",			TOK_AUTHORITATIVE },
	{ "booting",				TOK_BOOTING },
	{ "bootp",				TOK_BOOTP },
	{ "class",				TOK_CLASS },
	{ "client-hostname",			TOK_CLIENT_HOSTNAME },
	{ "default-lease-time",			TOK_DEFAULT_LEASE_TIME },
	{ "deny",				TOK_DENY },
	{ "domain",				TOK_DOMAIN },
	{ "dynamic-bootp",			TOK_DYNAMIC_BOOTP },
	{ "dynamic-bootp-lease-cutoff",		TOK_DYNAMIC_BOOTP_LEASE_CUTOFF },
	{ "dynamic-bootp-lease-length",		TOK_DYNAMIC_BOOTP_LEASE_LENGTH },
	{ "ends",				TOK_ENDS },
	{ "ethernet",				TOK_ETHERNET },
	{ "filename",				TOK_FILENAME },
	{ "fixed-address",			TOK_FIXED_ADDR },
	{ "get-lease-hostnames",		TOK_GET_LEASE_HOSTNAMES },
	{ "group",				TOK_GROUP },
	{ "hardware",				TOK_HARDWARE },
	{ "host",				TOK_HOST },
	{ "hostname",				TOK_HOSTNAME },
	{ "ipsec-tunnel",			TOK_IPSEC_TUNNEL },
	{ "lease",				TOK_LEASE },
	{ "max-lease-time",			TOK_MAX_LEASE_TIME },
	{ "netmask",				TOK_NETMASK },
	{ "next-server",			TOK_NEXT_SERVER },
	{ "not",				TOK_TOKEN_NOT },
	{ "option",				TOK_OPTION },
	{ "range",				TOK_RANGE },
	{ "server-identifier",			TOK_SERVER_IDENTIFIER },
	{ "server-name",			TOK_SERVER_NAME },
	{ "shared-network",			TOK_SHARED_NETWORK },
	{ "starts",				TOK_STARTS },
	{ "subnet",				TOK_SUBNET },
	{ "timeout",				TOK_TIMEOUT },
	{ "timestamp",				TOK_TIMESTAMP },
	{ "uid",				TOK_UID },
	{ "unknown-clients",			TOK_UNKNOWN_CLIENTS },
	{ "use-host-decl-names",		TOK_USE_HOST_DECL_NAMES },
	{ "use-lease-addr-for-default-route",	TOK_USE_LEASE_ADDR_FOR_DEFAULT_ROUTE },
	{ "user-class",				TOK_USER_CLASS },
	{ "vendor-class",			TOK_VENDOR_CLASS }
@


1.15
log
@Tweak parsing so that hostnames starting with 0-9 are accepted.

Reported long ago by matthieu@@. Also Jacob Berkman via the lists.

Tests and suggestions from Jacob and Matthieu.
@
text
@d1 1
a1 1
/*	$OpenBSD: conflex.c,v 1.14 2015/05/02 14:29:32 krw Exp $	*/
d43 7
d51 3
d55 2
@


1.14
log
@Hoist common assignments out of a series of if/if-else statements
in get_token(). Simplifies code and shrinks future diff.

No intentional functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: conflex.c,v 1.13 2015/05/02 12:37:35 krw Exp $	*/
a70 1
static int read_number(int, FILE *);
d138 1
a138 5
		}
		if ((isascii(c) && isdigit(c)) || c == '-') {
			ttok = read_number(c, cfile);
			break;
		} else if (isascii(c) && isalpha(c)) {
d242 1
a242 1
read_number(int c, FILE *cfile)
d244 3
a246 1
	int	seenx = 0, i = 0, token = TOK_NUMBER;
d248 2
a249 2
	tokbuf[i++] = c;
	for (; i < sizeof(tokbuf); i++) {
d251 1
a251 3
		if (!seenx && c == 'x')
			seenx = 1;
		else if (!isascii(c) || !isxdigit(c)) {
d256 2
d261 1
a261 1
		parse_warn("numeric token larger than internal buffer");
d263 3
d270 1
a270 2
	return (token);
}
d272 4
a275 5
static int
read_num_or_name(int c, FILE *cfile)
{
	int	i = 0;
	int	rv = TOK_NUMBER_OR_NAME;
d277 2
a278 18
	tokbuf[i++] = c;
	for (; i < sizeof(tokbuf); i++) {
		c = get_char(cfile);
		if (!isascii(c) || (c != '-' && c != '_' && !isalnum(c))) {
			ungetc(c, cfile);
			ugflag = 1;
			break;
		}
		if (!isxdigit(c))
			rv = TOK_NAME;
		tokbuf[i] = c;
	}
	if (i == sizeof(tokbuf)) {
		parse_warn("token larger than internal buffer");
		i--;
	}
	tokbuf[i] = 0;
	tval = tokbuf;
d280 1
a280 1
	return (intern(tval, rv));
@


1.13
log
@Correct switch between current and previous line buffers when
encountering a carriage return in the input.

Found by jsg@@ a long time ago in a respository far, far away.
@
text
@d1 1
a1 1
/*	$OpenBSD: conflex.c,v 1.12 2013/12/05 22:31:35 krw Exp $	*/
d134 2
a136 2
			lexline = l;
			lexchar = p;
a140 2
			lexline = l;
			lexchar = p;
a143 2
			lexline = l;
			lexchar = p;
a146 2
			lexline = l;
			lexchar = p;
@


1.12
log
@Stop pretending we still support FDDI or token ring hardware types.

idea ok deraadt@@ matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: conflex.c,v 1.11 2013/06/04 13:00:07 krw Exp $	*/
d97 2
a98 2
				cur_line = line2;
				prev_line = line1;
@


1.11
log
@Fix "\" escape handling in read_string().

Problem noted, fix tested and ok sthen@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: conflex.c,v 1.10 2009/09/01 08:42:31 reyk Exp $	*/
a326 1
	{ "fddi",				TOK_FDDI },
a348 1
	{ "token-ring",				TOK_TOKEN_RING },
@


1.10
log
@Echo back the Relay Agent Information option if present (RFC 3046).
Also add support for the "ipsec-tunnel" hardware type as described in
RFC 3456.

ok henning@@ krw@@ (but needs more testing from others)
@
text
@d1 1
a1 1
/*	$OpenBSD: conflex.c,v 1.9 2006/12/17 18:03:33 stevesk Exp $	*/
d226 1
a226 1
	int	i, c, bs = 0;
d228 2
a229 1
	for (i = 0; i < sizeof(tokbuf); i++) {
d231 1
a231 5
		if (c == EOF) {
			parse_warn("eof in string constant");
			break;
		}
		if (bs) {
d233 1
a233 2
			tokbuf[i] = c;
		} else if (c == '\\')
d235 9
a243 10
		else if (c == '"')
			break;
		else
			tokbuf[i] = c;
	}
	/*
	 * Normally, I'd feel guilty about this, but we're talking about
	 * strings that'll fit in a DHCP packet here...
	 */
	if (i == sizeof(tokbuf)) {
d245 1
a245 2
		i--;
	}
d248 1
@


1.9
log
@remove one-lease-per-client parameter which was never implemented (it
doesn't do anything and is not documented); ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: conflex.c,v 1.8 2006/04/20 19:50:08 deraadt Exp $	*/
d340 1
@


1.8
log
@list must be sorted
@
text
@d1 1
a1 1
/*	$OpenBSD: conflex.c,v 1.7 2006/04/18 19:18:31 deraadt Exp $	*/
a344 1
	{ "one-lease-per-client",		TOK_ONE_LEASE_PER_CLIENT },
@


1.7
log
@cleanup keyword lookup for the lexer, and remove keywords not valid in
either dhclient or dhcpd context; tested by many
@
text
@d1 1
a1 1
/*	$OpenBSD: conflex.c,v 1.6 2005/11/25 16:24:12 krw Exp $	*/
a357 1
	{ "user-class",				TOK_USER_CLASS },
d360 1
@


1.6
log
@Missing 'break;' found by lint. 'blass' is not the same as 'class'!

ok moritz@@ otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: conflex.c,v 1.5 2005/07/26 19:14:57 krw Exp $	*/
d254 1
a254 1
	return (STRING);
d260 1
a260 1
	int	seenx = 0, i = 0, token = NUMBER;
d288 1
a288 1
	int	rv = NUMBER_OR_NAME;
d299 1
a299 1
			rv = NAME;
d312 58
d373 1
a373 2
	if (!isascii(atom[0]))
		return (dfv);
d375 4
a378 207
	switch (tolower(atom[0])) {
	case 'a':
		if (!strcasecmp(atom + 1, "lways-reply-rfc1048"))
			return (ALWAYS_REPLY_RFC1048);
		if (!strcasecmp(atom + 1, "ppend"))
			return (APPEND);
		if (!strcasecmp(atom + 1, "llow"))
			return (ALLOW);
		if (!strcasecmp(atom + 1, "lias"))
			return (ALIAS);
		if (!strcasecmp(atom + 1, "bandoned"))
			return (ABANDONED);
		if (!strcasecmp(atom + 1, "uthoritative"))
			return (AUTHORITATIVE);
		break;
	case 'b':
		if (!strcasecmp(atom + 1, "ackoff-cutoff"))
			return (BACKOFF_CUTOFF);
		if (!strcasecmp(atom + 1, "ootp"))
			return (BOOTP);
		if (!strcasecmp(atom + 1, "ooting"))
			return (BOOTING);
		if (!strcasecmp(atom + 1, "oot-unknown-clients"))
			return (BOOT_UNKNOWN_CLIENTS);
		break;
	case 'c':
		if (!strcasecmp(atom + 1, "lass"))
			return (CLASS);
		if (!strcasecmp(atom + 1, "iaddr"))
			return (CIADDR);
		if (!strcasecmp(atom + 1, "lient-identifier"))
			return (CLIENT_IDENTIFIER);
		if (!strcasecmp(atom + 1, "lient-hostname"))
			return (CLIENT_HOSTNAME);
		break;
	case 'd':
		if (!strcasecmp(atom + 1, "omain"))
			return (DOMAIN);
		if (!strcasecmp(atom + 1, "eny"))
			return (DENY);
		if (!strncasecmp(atom + 1, "efault", 6)) {
			if (!atom[7])
				return (DEFAULT);
			if (!strcasecmp(atom + 7, "-lease-time"))
				return (DEFAULT_LEASE_TIME);
			break;
		}
		if (!strncasecmp(atom + 1, "ynamic-bootp", 12)) {
			if (!atom[13])
				return (DYNAMIC_BOOTP);
			if (!strcasecmp(atom + 13, "-lease-cutoff"))
				return (DYNAMIC_BOOTP_LEASE_CUTOFF);
			if (!strcasecmp(atom + 13, "-lease-length"))
				return (DYNAMIC_BOOTP_LEASE_LENGTH);
			break;
		}
		break;
	case 'e':
		if (!strcasecmp(atom + 1, "thernet"))
			return (ETHERNET);
		if (!strcasecmp(atom + 1, "nds"))
			return (ENDS);
		if (!strcasecmp(atom + 1, "xpire"))
			return (EXPIRE);
		break;
	case 'f':
		if (!strcasecmp(atom + 1, "ilename"))
			return (FILENAME);
		if (!strcasecmp(atom + 1, "ixed-address"))
			return (FIXED_ADDR);
		if (!strcasecmp(atom + 1, "ddi"))
			return (FDDI);
		break;
	case 'g':
		if (!strcasecmp(atom + 1, "iaddr"))
			return (GIADDR);
		if (!strcasecmp(atom + 1, "roup"))
			return (GROUP);
		if (!strcasecmp(atom + 1, "et-lease-hostnames"))
			return (GET_LEASE_HOSTNAMES);
		break;
	case 'h':
		if (!strcasecmp(atom + 1, "ost"))
			return (HOST);
		if (!strcasecmp(atom + 1, "ardware"))
			return (HARDWARE);
		if (!strcasecmp(atom + 1, "ostname"))
			return (HOSTNAME);
		break;
	case 'i':
		if (!strcasecmp(atom + 1, "nitial-interval"))
			return (INITIAL_INTERVAL);
		if (!strcasecmp(atom + 1, "nterface"))
			return (INTERFACE);
		break;
	case 'l':
		if (!strcasecmp(atom + 1, "ease"))
			return (LEASE);
		break;
	case 'm':
		if (!strcasecmp(atom + 1, "ax-lease-time"))
			return (MAX_LEASE_TIME);
		if (!strncasecmp(atom + 1, "edi", 3)) {
			if (!strcasecmp(atom + 4, "a"))
				return (MEDIA);
			if (!strcasecmp(atom + 4, "um"))
				return (MEDIUM);
			break;
		}
		break;
	case 'n':
		if (!strcasecmp(atom + 1, "ameserver"))
			return (NAMESERVER);
		if (!strcasecmp(atom + 1, "etmask"))
			return (NETMASK);
		if (!strcasecmp(atom + 1, "ext-server"))
			return (NEXT_SERVER);
		if (!strcasecmp(atom + 1, "ot"))
			return (TOKEN_NOT);
		break;
	case 'o':
		if (!strcasecmp(atom + 1, "ption"))
			return (OPTION);
		if (!strcasecmp(atom + 1, "ne-lease-per-client"))
			return (ONE_LEASE_PER_CLIENT);
		break;
	case 'p':
		if (!strcasecmp(atom + 1, "repend"))
			return (PREPEND);
		if (!strcasecmp(atom + 1, "acket"))
			return (PACKET);
		break;
	case 'r':
		if (!strcasecmp(atom + 1, "ange"))
			return (RANGE);
		if (!strcasecmp(atom + 1, "equest"))
			return (REQUEST);
		if (!strcasecmp(atom + 1, "equire"))
			return (REQUIRE);
		if (!strcasecmp(atom + 1, "etry"))
			return (RETRY);
		if (!strcasecmp(atom + 1, "enew"))
			return (RENEW);
		if (!strcasecmp(atom + 1, "ebind"))
			return (REBIND);
		if (!strcasecmp(atom + 1, "eboot"))
			return (REBOOT);
		if (!strcasecmp(atom + 1, "eject"))
			return (REJECT);
		break;
	case 's':
		if (!strcasecmp(atom + 1, "earch"))
			return (SEARCH);
		if (!strcasecmp(atom + 1, "tarts"))
			return (STARTS);
		if (!strcasecmp(atom + 1, "iaddr"))
			return (SIADDR);
		if (!strcasecmp(atom + 1, "ubnet"))
			return (SUBNET);
		if (!strcasecmp(atom + 1, "hared-network"))
			return (SHARED_NETWORK);
		if (!strcasecmp(atom + 1, "erver-name"))
			return (SERVER_NAME);
		if (!strcasecmp(atom + 1, "erver-identifier"))
			return (SERVER_IDENTIFIER);
		if (!strcasecmp(atom + 1, "elect-timeout"))
			return (SELECT_TIMEOUT);
		if (!strcasecmp(atom + 1, "end"))
			return (SEND);
		if (!strcasecmp(atom + 1, "cript"))
			return (SCRIPT);
		if (!strcasecmp(atom + 1, "upersede"))
			return (SUPERSEDE);
		break;
	case 't':
		if (!strcasecmp(atom + 1, "imestamp"))
			return (TIMESTAMP);
		if (!strcasecmp(atom + 1, "imeout"))
			return (TIMEOUT);
		if (!strcasecmp(atom + 1, "oken-ring"))
			return (TOKEN_RING);
		break;
	case 'u':
		if (!strncasecmp(atom + 1, "se", 2)) {
			if (!strcasecmp(atom + 3, "r-class"))
				return (USER_CLASS);
			if (!strcasecmp(atom + 3, "-host-decl-names"))
				return (USE_HOST_DECL_NAMES);
			if (!strcasecmp(atom + 3,
					 "-lease-addr-for-default-route"))
				return (USE_LEASE_ADDR_FOR_DEFAULT_ROUTE);
			break;
		}
		if (!strcasecmp(atom + 1, "id"))
			return (UID);
		if (!strcasecmp(atom + 1, "nknown-clients"))
			return (UNKNOWN_CLIENTS);
		break;
	case 'v':
		if (!strcasecmp(atom + 1, "endor-class"))
			return (VENDOR_CLASS);
		break;
	case 'y':
		if (!strcasecmp(atom + 1, "iaddr"))
			return (YIADDR);
		break;
	}
@


1.5
log
@Fix buffer overflows in dhcpd and dhclient. Closes PR#4306.

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: conflex.c,v 1.4 2004/09/16 18:35:42 deraadt Exp $	*/
d342 1
@


1.4
log
@avoid aliasing with libc functions; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: conflex.c,v 1.3 2004/04/14 00:56:02 henning Exp $	*/
d104 1
a104 1
			if (lpos <= 81) {
@


1.3
log
@more crap bites the dust
@
text
@d1 1
a1 1
/*	$OpenBSD: conflex.c,v 1.6 2004/02/24 13:08:26 henning Exp $	*/
d120 1
a120 1
	int		l, p, u;
a124 1
		u = ugflag;
@


1.2
log
@time_t and kill a few dumb defines
@
text
@d1 1
a1 1
/* conflex.c
d3 1
a3 1
   Lexical scanner for dhcpd config file... */
d43 2
a46 1
#include <ctype.h>
d56 2
a57 2
static char line1 [81];
static char line2 [81];
d65 1
a65 1
static char tokbuf [1500];
d67 7
a73 13
#ifdef OLD_LEXER
char comments [4096];
int comment_index;
#endif


static int get_char PROTO ((FILE *));
static int get_token PROTO ((FILE *));
static void skip_to_eol PROTO ((FILE *));
static int read_string PROTO ((FILE *));
static int read_number PROTO ((int, FILE *));
static int read_num_or_name PROTO ((int, FILE *));
static int intern PROTO ((char *, int));
d75 2
a76 2
void new_parse (name)
	char *name;
d83 1
a83 1
	cur_line [0] = prev_line [0] = 0;
d87 2
a88 2
static int get_char (cfile)
	FILE *cfile;
d90 1
a90 1
	int c = getc (cfile);
d93 1
a93 1
			if (cur_line == line1) {	
d102 1
a102 1
			cur_line [0] = 0;
d105 2
a106 2
				cur_line [lpos - 1] = c;
				cur_line [lpos] = 0;
d112 1
a112 1
	return c;		
d115 2
a116 2
static int get_token (cfile)
	FILE *cfile;
d118 3
a120 4
	int c;
	int ttok;
	static char tb [2];
	int l, p, u;
d127 1
a127 1
		c = get_char (cfile);
d129 1
a129 1
		if (!(c == '\n' && eol_token) && isascii (c) && isspace (c))
d132 1
a132 1
			skip_to_eol (cfile);
d138 1
a138 1
			ttok = read_string (cfile);
d141 1
a141 1
		if ((isascii (c) && isdigit (c)) || c == '-') {
d144 1
a144 1
			ttok = read_number (c, cfile);
d146 1
a146 1
		} else if (isascii (c) && isalpha (c)) {
d149 1
a149 1
			ttok = read_num_or_name (c, cfile);
d154 2
a155 2
			tb [0] = c;
			tb [1] = 0;
d161 1
a161 1
	return ttok;
d164 2
a165 3
int next_token (rval, cfile)
	char **rval;
	FILE *cfile;
d167 1
a167 1
	int rv;
d177 1
a177 1
		rv = get_token (cfile);
d182 2
a183 4
#ifdef DEBUG_TOKENS
	fprintf (stderr, "%s:%d ", tval, rv);
#endif
	return rv;
d186 2
a187 3
int peek_token (rval, cfile)
	char **rval;
	FILE *cfile;
d189 1
a189 1
	int x;
d194 1
a194 1
		token = get_token (cfile);
d197 6
a202 2
		x = lexchar; lexchar = tlpos; tlpos = x;
		x = lexline; lexline = tline; tline = x;
d206 2
a207 4
#ifdef DEBUG_TOKENS
	fprintf (stderr, "(%s:%d) ", tval, token);
#endif
	return token;
d210 2
a211 2
static void skip_to_eol (cfile)
	FILE *cfile;
d213 2
a214 1
	int c;
d216 1
a216 1
		c = get_char (cfile);
d224 2
a225 2
static int read_string (cfile)
	FILE *cfile;
d227 1
a227 3
	int i;
	int bs = 0;
	int c;
d229 2
a230 2
	for (i = 0; i < sizeof tokbuf; i++) {
		c = get_char (cfile);
d232 1
a232 1
			parse_warn ("eof in string constant");
d237 1
a237 1
			tokbuf [i] = c;
d243 1
a243 1
			tokbuf [i] = c;
d245 7
a251 5
	/* Normally, I'd feel guilty about this, but we're talking about
	   strings that'll fit in a DHCP packet here... */
	if (i == sizeof tokbuf) {
		parse_warn ("string constant larger than internal buffer");
		--i;
d253 1
a253 1
	tokbuf [i] = 0;
d255 1
a255 1
	return STRING;
d258 2
a259 3
static int read_number (c, cfile)
	int c;
	FILE *cfile;
d261 6
a266 8
	int seenx = 0;
	int i = 0;
	int token = NUMBER;

	tokbuf [i++] = c;
	for (; i < sizeof tokbuf; i++) {
		c = get_char (cfile);
		if (!seenx && c == 'x') {
d268 2
a269 2
		} else if (!isascii (c) || !isxdigit (c)) {
			ungetc (c, cfile);
d273 1
a273 1
		tokbuf [i] = c;
d275 3
a277 3
	if (i == sizeof tokbuf) {
		parse_warn ("numeric token larger than internal buffer");
		--i;
d279 1
a279 1
	tokbuf [i] = 0;
d281 2
a282 1
	return token;
d285 2
a286 3
static int read_num_or_name (c, cfile)
	int c;
	FILE *cfile;
d288 8
a295 8
	int i = 0;
	int rv = NUMBER_OR_NAME;
	tokbuf [i++] = c;
	for (; i < sizeof tokbuf; i++) {
		c = get_char (cfile);
		if (!isascii (c) ||
		    (c != '-' && c != '_' && !isalnum (c))) {
			ungetc (c, cfile);
d299 1
a299 1
		if (!isxdigit (c))
d301 1
a301 1
		tokbuf [i] = c;
d303 3
a305 3
	if (i == sizeof tokbuf) {
		parse_warn ("token larger than internal buffer");
		--i;
d307 1
a307 1
	tokbuf [i] = 0;
d309 2
a310 1
	return intern (tval, rv);
d313 2
a314 3
static int intern (atom, dfv)
	char *atom;
	int dfv;
d316 2
a317 2
	if (!isascii (atom [0]))
		return dfv;
d319 188
a506 188
	switch (tolower (atom [0])) {
	      case 'a':
		if (!strcasecmp (atom + 1, "lways-reply-rfc1048"))
			return ALWAYS_REPLY_RFC1048;
		if (!strcasecmp (atom + 1, "ppend"))
			return APPEND;
		if (!strcasecmp (atom + 1, "llow"))
			return ALLOW;
		if (!strcasecmp (atom + 1, "lias"))
			return ALIAS;
		if (!strcasecmp (atom + 1, "bandoned"))
			return ABANDONED;
		if (!strcasecmp (atom + 1, "uthoritative"))
			return AUTHORITATIVE;
		break;
	      case 'b':
		if (!strcasecmp (atom + 1, "ackoff-cutoff"))
			return BACKOFF_CUTOFF;
		if (!strcasecmp (atom + 1, "ootp"))
			return BOOTP;
		if (!strcasecmp (atom + 1, "ooting"))
			return BOOTING;
		if (!strcasecmp (atom + 1, "oot-unknown-clients"))
			return BOOT_UNKNOWN_CLIENTS;
	      case 'c':
		if (!strcasecmp (atom + 1, "lass"))
			return CLASS;
		if (!strcasecmp (atom + 1, "iaddr"))
			return CIADDR;
		if (!strcasecmp (atom + 1, "lient-identifier"))
			return CLIENT_IDENTIFIER;
		if (!strcasecmp (atom + 1, "lient-hostname"))
			return CLIENT_HOSTNAME;
		break;
	      case 'd':
		if (!strcasecmp (atom + 1, "omain"))
			return DOMAIN;
		if (!strcasecmp (atom + 1, "eny"))
			return DENY;
		if (!strncasecmp (atom + 1, "efault", 6)) {
			if (!atom [7])
				return DEFAULT;
			if (!strcasecmp (atom + 7, "-lease-time"))
				return DEFAULT_LEASE_TIME;
			break;
		}
		if (!strncasecmp (atom + 1, "ynamic-bootp", 12)) {
			if (!atom [13])
				return DYNAMIC_BOOTP;
			if (!strcasecmp (atom + 13, "-lease-cutoff"))
				return DYNAMIC_BOOTP_LEASE_CUTOFF;
			if (!strcasecmp (atom + 13, "-lease-length"))
				return DYNAMIC_BOOTP_LEASE_LENGTH;
			break;
		}
		break;
	      case 'e':
		if (!strcasecmp (atom + 1, "thernet"))
			return ETHERNET;
		if (!strcasecmp (atom + 1, "nds"))
			return ENDS;
		if (!strcasecmp (atom + 1, "xpire"))
			return EXPIRE;
		break;
	      case 'f':
		if (!strcasecmp (atom + 1, "ilename"))
			return FILENAME;
		if (!strcasecmp (atom + 1, "ixed-address"))
			return FIXED_ADDR;
		if (!strcasecmp (atom + 1, "ddi"))
			return FDDI;
		break;
	      case 'g':
		if (!strcasecmp (atom + 1, "iaddr"))
			return GIADDR;
		if (!strcasecmp (atom + 1, "roup"))
			return GROUP;
		if (!strcasecmp (atom + 1, "et-lease-hostnames"))
			return GET_LEASE_HOSTNAMES;
		break;
	      case 'h':
		if (!strcasecmp (atom + 1, "ost"))
			return HOST;
		if (!strcasecmp (atom + 1, "ardware"))
			return HARDWARE;
		if (!strcasecmp (atom + 1, "ostname"))
			return HOSTNAME;
		break;
	      case 'i':
		if (!strcasecmp (atom + 1, "nitial-interval"))
			return INITIAL_INTERVAL;
		if (!strcasecmp (atom + 1, "nterface"))
			return INTERFACE;
		break;
	      case 'l':
		if (!strcasecmp (atom + 1, "ease"))
			return LEASE;
		break;
	      case 'm':
		if (!strcasecmp (atom + 1, "ax-lease-time"))
			return MAX_LEASE_TIME;
		if (!strncasecmp (atom + 1, "edi", 3)) {
			if (!strcasecmp (atom + 4, "a"))
				return MEDIA;
			if (!strcasecmp (atom + 4, "um"))
				return MEDIUM;
			break;
		}
		break;
	      case 'n':
		if (!strcasecmp (atom + 1, "ameserver"))
			return NAMESERVER;
		if (!strcasecmp (atom + 1, "etmask"))
			return NETMASK;
		if (!strcasecmp (atom + 1, "ext-server"))
			return NEXT_SERVER;
		if (!strcasecmp (atom + 1, "ot"))
			return TOKEN_NOT;
		break;
	      case 'o':
		if (!strcasecmp (atom + 1, "ption"))
			return OPTION;
		if (!strcasecmp (atom + 1, "ne-lease-per-client"))
			return ONE_LEASE_PER_CLIENT;
		break;
	      case 'p':
		if (!strcasecmp (atom + 1, "repend"))
			return PREPEND;
		if (!strcasecmp (atom + 1, "acket"))
			return PACKET;
		break;
	      case 'r':
		if (!strcasecmp (atom + 1, "ange"))
			return RANGE;
		if (!strcasecmp (atom + 1, "equest"))
			return REQUEST;
		if (!strcasecmp (atom + 1, "equire"))
			return REQUIRE;
		if (!strcasecmp (atom + 1, "etry"))
			return RETRY;
		if (!strcasecmp (atom + 1, "enew"))
			return RENEW;
		if (!strcasecmp (atom + 1, "ebind"))
			return REBIND;
		if (!strcasecmp (atom + 1, "eboot"))
			return REBOOT;
		if (!strcasecmp (atom + 1, "eject"))
			return REJECT;
		break;
	      case 's':
		if (!strcasecmp (atom + 1, "earch"))
			return SEARCH;
		if (!strcasecmp (atom + 1, "tarts"))
			return STARTS;
		if (!strcasecmp (atom + 1, "iaddr"))
			return SIADDR;
		if (!strcasecmp (atom + 1, "ubnet"))
			return SUBNET;
		if (!strcasecmp (atom + 1, "hared-network"))
			return SHARED_NETWORK;
		if (!strcasecmp (atom + 1, "erver-name"))
			return SERVER_NAME;
		if (!strcasecmp (atom + 1, "erver-identifier"))
			return SERVER_IDENTIFIER;
		if (!strcasecmp (atom + 1, "elect-timeout"))
			return SELECT_TIMEOUT;
		if (!strcasecmp (atom + 1, "end"))
			return SEND;
		if (!strcasecmp (atom + 1, "cript"))
			return SCRIPT;
		if (!strcasecmp (atom + 1, "upersede"))
			return SUPERSEDE;
		break;
	      case 't':
		if (!strcasecmp (atom + 1, "imestamp"))
			return TIMESTAMP;
		if (!strcasecmp (atom + 1, "imeout"))
			return TIMEOUT;
		if (!strcasecmp (atom + 1, "oken-ring"))
			return TOKEN_RING;
		break;
	      case 'u':
		if (!strncasecmp (atom + 1, "se", 2)) {
			if (!strcasecmp (atom + 3, "r-class"))
				return USER_CLASS;
			if (!strcasecmp (atom + 3, "-host-decl-names"))
				return USE_HOST_DECL_NAMES;
			if (!strcasecmp (atom + 3,
d508 1
a508 1
				return USE_LEASE_ADDR_FOR_DEFAULT_ROUTE;
d511 4
a514 4
		if (!strcasecmp (atom + 1, "id"))
			return UID;
		if (!strcasecmp (atom + 1, "nknown-clients"))
			return UNKNOWN_CLIENTS;
d516 3
a518 3
	      case 'v':
		if (!strcasecmp (atom + 1, "endor-class"))
			return VENDOR_CLASS;
d520 3
a522 3
	      case 'y':
		if (!strcasecmp (atom + 1, "iaddr"))
			return YIADDR;
d525 1
a525 1
	return dfv;
@


1.1
log
@may the whacking begin
@
text
@d97 1
a97 1
		if (c == EOL) {
d226 1
a226 1
		if (c == EOL)
@

