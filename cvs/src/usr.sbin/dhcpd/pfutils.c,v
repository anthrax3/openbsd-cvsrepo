head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.6
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.24
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.22
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.20
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.18
	OPENBSD_5_0:1.9.0.16
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.14
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.12
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.8
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.10
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.6
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.4
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5;
locks; strict;
comment	@ * @;


1.18
date	2017.02.13.23.04.05;	author krw;	state Exp;
branches;
next	1.17;
commitid	amfLXbU964CBXnkr;

1.17
date	2017.02.13.21.53.53;	author krw;	state Exp;
branches;
next	1.16;
commitid	iao5yt5BDQh8mK3C;

1.16
date	2017.02.13.19.13.14;	author krw;	state Exp;
branches;
next	1.15;
commitid	syYFt6P4XI7prXRF;

1.15
date	2016.11.15.10.49.37;	author mestre;	state Exp;
branches;
next	1.14;
commitid	MJxFs9s3mqdgRyMT;

1.14
date	2016.02.06.23.50.10;	author krw;	state Exp;
branches;
next	1.13;
commitid	8GMcSAoPYCa1rXN3;

1.13
date	2015.02.05.09.42.52;	author krw;	state Exp;
branches;
next	1.12;
commitid	b21DKSVSF8QaIOtP;

1.12
date	2015.01.21.21.50.33;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	3o2AkhiRPQXvG94X;

1.11
date	2015.01.16.06.40.16;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	Uu5nFG3wCl0LACBb;

1.10
date	2013.10.18.15.19.39;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2007.12.23.21.52.16;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.06.15.45.00;	author ckuethe;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.15.06.22.32;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2006.10.20.19.45.02;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.14.14.58.52;	author ckuethe;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.14.14.49.46;	author ckuethe;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.14.14.44.39;	author ckuethe;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.31.14.40.14;	author ckuethe;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.31.02.43.15;	author ckuethe;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Eliminate pointless'%m' (a.k.a. hand rolled strerror()) by using fatal() and
log_warn(). Zap a couple of explicit 'syslog()' calls.
@
text
@/*	$OpenBSD: pfutils.c,v 1.17 2017/02/13 21:53:53 krw Exp $ */
/*
 * Copyright (c) 2006 Chris Kuethe <ckuethe@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/socket.h>

#include <netinet/in.h>
#include <net/if.h>
#include <net/pfvar.h>

#include <errno.h>
#include <fcntl.h>
#include <paths.h>
#include <poll.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "dhcp.h"
#include "tree.h"
#include "dhcpd.h"
#include "log.h"

extern struct passwd *pw;
extern int pfpipe[2];
extern int gotpipe;
extern char *abandoned_tab;
extern char *changedmac_tab;
extern char *leased_tab;

__dead void
pftable_handler()
{
	struct pf_cmd cmd;
	struct pollfd pfd[1];
	int l, r, fd, nfds;

	if ((fd = open(_PATH_DEV_PF, O_RDWR|O_NOFOLLOW, 0660)) == -1)
		log_warn("can't open pf device");
	if (chroot(_PATH_VAREMPTY) == -1)
		log_warn("chroot %s", _PATH_VAREMPTY);
	if (chdir("/") == -1)
		log_warn("chdir(\"/\")");
	if (setgroups(1, &pw->pw_gid) ||
	    setresgid(pw->pw_gid, pw->pw_gid, pw->pw_gid) ||
	    setresuid(pw->pw_uid, pw->pw_uid, pw->pw_uid))
		log_warn("can't drop privileges");

	setproctitle("pf table handler");
	l = sizeof(struct pf_cmd);

	for (;;) {
		pfd[0].fd = pfpipe[0];
		pfd[0].events = POLLIN;
		if ((nfds = poll(pfd, 1, -1)) == -1)
			if (errno != EINTR)
				log_warn("poll");

		if (nfds > 0 && (pfd[0].revents & POLLHUP))
			log_warnx("pf pipe closed");

		if (nfds > 0 && (pfd[0].revents & POLLIN)) {
			memset(&cmd, 0, l);
			r = atomicio(read, pfpipe[0], &cmd, l);

			if (r != l)
				log_warn("pf pipe error");

			switch (cmd.type) {
			case 'A':
				/*
				 * When we abandon an address, we add it to
				 * the table of abandoned addresses, and remove
				 * it from the table of active leases.
				 */
				pf_change_table(fd, 1, cmd.ip, abandoned_tab);
				pf_change_table(fd, 0, cmd.ip, leased_tab);
				pf_kill_state(fd, cmd.ip);
				break;
			case 'C':
				/*
				 * When the hardware address for an IP changes,
				 * remove it from the table of abandoned
				 * addresses, and from the table of overloaded
				 * addresses.
				 */
				pf_change_table(fd, 0, cmd.ip, abandoned_tab);
				pf_change_table(fd, 0, cmd.ip, changedmac_tab);
				break;
			case 'L':
				/*
				 * When a lease is granted or renewed, remove
				 * it from the table of abandoned addresses,
				 * and ensure it is in the table of active
				 * leases.
				 */
				pf_change_table(fd, 0, cmd.ip, abandoned_tab);
				pf_change_table(fd, 1, cmd.ip, leased_tab);
				break;
			case 'R':
				/*
				 * When we release or expire a lease, remove
				 * it from the table of active leases. As long
				 * as dhcpd doesn't abandon the address, no
				 * further action is required.
				 */
				pf_change_table(fd, 0, cmd.ip, leased_tab);
				break;
			default:
				break;
			}
		}
	}
	/* not reached */
	exit(1);
}

/* inspired by ("stolen") from usr.sbin/authpf/authpf.c */
void
pf_change_table(int fd, int op, struct in_addr ip, char *table)
{
	struct pfioc_table	io;
	struct pfr_addr		addr;

	if (table == NULL)
		return;

	memset(&io, 0, sizeof(io));
	strlcpy(io.pfrio_table.pfrt_name, table,
	    sizeof(io.pfrio_table.pfrt_name));
	io.pfrio_buffer = &addr;
	io.pfrio_esize = sizeof(addr);
	io.pfrio_size = 1;

	memset(&addr, 0, sizeof(addr));
	memcpy(&addr.pfra_ip4addr, &ip, 4);
	addr.pfra_af = AF_INET;
	addr.pfra_net = 32;

	if (ioctl(fd, op ? DIOCRADDADDRS : DIOCRDELADDRS, &io) &&
	    errno != ESRCH) {
		log_warn( "DIOCR%sADDRS on table %s", op ? "ADD" : "DEL",
		    table);
	}
}

void
pf_kill_state(int fd, struct in_addr ip)
{
	struct pfioc_state_kill	psk;
	struct pf_addr target;

	memset(&psk, 0, sizeof(psk));
	memset(&target, 0, sizeof(target));

	memcpy(&target.v4, &ip.s_addr, 4);
	psk.psk_af = AF_INET;

	/* Kill all states from target */
	memcpy(&psk.psk_src.addr.v.a.addr, &target,
	    sizeof(psk.psk_src.addr.v.a.addr));
	memset(&psk.psk_src.addr.v.a.mask, 0xff,
	    sizeof(psk.psk_src.addr.v.a.mask));
	if (ioctl(fd, DIOCKILLSTATES, &psk)) {
		log_warn("DIOCKILLSTATES failed");
	}

	/* Kill all states to target */
	memset(&psk.psk_src, 0, sizeof(psk.psk_src));
	memcpy(&psk.psk_dst.addr.v.a.addr, &target,
	    sizeof(psk.psk_dst.addr.v.a.addr));
	memset(&psk.psk_dst.addr.v.a.mask, 0xff,
	    sizeof(psk.psk_dst.addr.v.a.mask));
	if (ioctl(fd, DIOCKILLSTATES, &psk)) {
		log_warn("DIOCKILLSTATES failed");
	}
}

/* inspired by ("stolen") from usr.bin/ssh/atomicio.c */
size_t
atomicio(ssize_t (*f) (int, void *, size_t), int fd, void *_s, size_t n)
{
	char *s = _s;
	size_t pos = 0;
	ssize_t res;

	while (n > pos) {
		res = (f) (fd, s + pos, n - pos);
		switch (res) {
		case -1:
			if (errno == EINTR || errno == EAGAIN)
				continue;
			return 0;
		case 0:
			errno = EPIPE;
			return pos;
		default:
			pos += (size_t)res;
		}
	}
	return (pos);
}

/*
 * This function sends commands to the pf table handler. It will safely and
 * silently return if the handler is unconfigured, therefore it can be called
 * on all interesting lease events, whether or not the user actually wants to
 * use the pf table feature.
 */
void
pfmsg(char c, struct lease *lp)
{
	struct pf_cmd cmd;

	if (gotpipe == 0)
		return;

	cmd.type = c;
	memcpy(&cmd.ip.s_addr, lp->ip_addr.iabuf, 4);

	switch (c) {
	case 'A': /* address is being abandoned */
		/* FALLTHROUGH */
	case 'C': /* IP moved to different ethernet address */
		/* FALLTHROUGH */
	case 'L': /* Address is being leased (unabandoned) */
		/* FALLTHROUGH */
	case 'R': /* Address is being released or lease has expired */
		(void)atomicio(vwrite, pfpipe[1], &cmd,
		    sizeof(struct pf_cmd));
		break;
	default: /* silently ignore unknown commands */
		break;
	}
}
@


1.17
log
@Do the strerror() elimination dance with log_warnx() -> log_warn(),
fatalx() -> fatal() and even a couple of fprintf(stderr) -> log_warn().
@
text
@d1 1
a1 1
/*	$OpenBSD: pfutils.c,v 1.16 2017/02/13 19:13:14 krw Exp $ */
d56 1
a56 1
		log_warnx("can't open pf device: %m");
d58 1
a58 1
		log_warnx("chroot %s: %m", _PATH_VAREMPTY);
d60 1
a60 1
		log_warnx("chdir(\"/\"): %m");
d64 1
a64 1
		log_warnx("can't drop privileges: %m");
d74 1
a74 1
				log_warnx("poll: %m");
d84 1
a84 1
				log_warnx("pf pipe error: %m");
@


1.16
log
@Switch from old errwarn.c logging to shiny new log.[ch].

ok benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pfutils.c,v 1.15 2016/11/15 10:49:37 mestre Exp $ */
d159 2
a160 2
		log_warnx( "DIOCR%sADDRS on table %s: %s",
		    op ? "ADD" : "DEL", table, strerror(errno));
d182 1
a182 1
		log_warnx("DIOCKILLSTATES failed (%s)", strerror(errno));
d192 1
a192 1
		log_warnx("DIOCKILLSTATES failed (%s)", strerror(errno));
@


1.15
log
@Replace bzero(3) with memset(3)

"Looks good" to deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pfutils.c,v 1.14 2016/02/06 23:50:10 krw Exp $ */
d39 1
d56 1
a56 1
		error("can't open pf device: %m");
d58 1
a58 1
		error("chroot %s: %m", _PATH_VAREMPTY);
d60 1
a60 1
		error("chdir(\"/\"): %m");
d64 1
a64 1
		error("can't drop privileges: %m");
d74 1
a74 1
				error("poll: %m");
d77 1
a77 1
			error("pf pipe closed");
d84 1
a84 1
				error("pf pipe error: %m");
d159 1
a159 1
		warning( "DIOCR%sADDRS on table %s: %s",
d182 1
a182 1
		warning("DIOCKILLSTATES failed (%s)", strerror(errno));
d192 1
a192 1
		warning("DIOCKILLSTATES failed (%s)", strerror(errno));
@


1.14
log
@Eliminate #include inside *.h files and include only needed headers in
each *.c file.

Inspired by mention of header silliness by Edgar Pettijohn and mmcc@@
on tech@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: pfutils.c,v 1.13 2015/02/05 09:42:52 krw Exp $ */
d79 1
a79 1
			bzero(&cmd, l);
d144 1
a144 1
	bzero(&io, sizeof(io));
d151 1
a151 1
	bzero(&addr, sizeof(addr));
d169 2
a170 2
	bzero(&psk, sizeof(psk));
	bzero(&target, sizeof(target));
d185 1
a185 1
	bzero(&psk.psk_src, sizeof(psk.psk_src));
@


1.13
log
@The pf table process should die if the pipe to the dhcpd process is
closed. e.g. dhcpd has been killed.

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pfutils.c,v 1.12 2015/01/21 21:50:33 deraadt Exp $ */
a20 1
#include <sys/time.h>
a22 1
#include <arpa/inet.h>
a25 2
#include <ctype.h>
#include <err.h>
d28 1
d36 2
@


1.12
log
@Include <netinet/in.h> before <net/pfvar.h>.  In a future change when
ports is ready, <net/pfvar.h> will stop including a pile of balony.
@
text
@d1 1
a1 1
/*	$OpenBSD: pfutils.c,v 1.11 2015/01/16 06:40:16 deraadt Exp $ */
d75 3
@


1.11
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: pfutils.c,v 1.10 2013/10/18 15:19:39 krw Exp $ */
d23 2
a26 1
#include <arpa/inet.h>
@


1.10
log
@Scattering a few bcopy()'s around source using mostly memcpy() is just
asking for confusion. Replace bcopy()'s with memcpy()'s.
@
text
@d1 1
a1 1
/*	$OpenBSD: pfutils.c,v 1.9 2007/12/23 21:52:16 jmc Exp $ */
a19 1
#include <sys/param.h>
@


1.9
log
@remove double word in comment;
@
text
@d1 1
a1 1
/*	$OpenBSD: pfutils.c,v 1.8 2007/10/06 15:45:00 ckuethe Exp $ */
d150 1
a150 1
	bcopy(&ip, &addr.pfra_ip4addr, 4);
d170 1
a170 1
	bcopy(&ip.s_addr, &target.v4, 4);
d174 1
a174 1
	bcopy(&target, &psk.psk_src.addr.v.a.addr,
d184 1
a184 1
	bcopy(&target, &psk.psk_dst.addr.v.a.addr,
d233 1
a233 1
	bcopy(lp->ip_addr.iabuf, &cmd.ip.s_addr, 4);
@


1.8
log
@Allow the various pf table actions to operate independently. For example,
"-L leased" wouldn't work without "-A abandoned".
testing help from merdely
"i like" deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: pfutils.c,v 1.7 2007/05/15 06:22:32 tedu Exp $ */
d86 1
a86 1
				 * When we abandon an address, we add it to the
@


1.7
log
@use the correct fd for poll.  we're waiting on the pipe, not pf
ok ckuethe deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: pfutils.c,v 1.6 2006/10/20 19:45:02 deraadt Exp $ */
d237 1
a237 4
		if (abandoned_tab != NULL)
			(void)atomicio(vwrite, pfpipe[1], &cmd,
			    sizeof(struct pf_cmd));
		break;
d239 1
a239 4
		if (changedmac_tab != NULL)
			(void)atomicio(vwrite, pfpipe[1], &cmd,
			    sizeof(struct pf_cmd));
		break;
d241 1
a241 4
		if (abandoned_tab != NULL)
			(void)atomicio(vwrite, pfpipe[1], &cmd,
			    sizeof(struct pf_cmd));
		break;
d243 2
a244 3
		if (leased_tab != NULL)
			(void)atomicio(vwrite, pfpipe[1], &cmd,
			    sizeof(struct pf_cmd));
@


1.6
log
@indent
@
text
@d1 1
a1 1
/*	$OpenBSD: pfutils.c,v 1.5 2006/06/14 14:58:52 ckuethe Exp $ */
d70 1
a70 1
		pfd[0].fd = fd;
@


1.5
log
@This diff allows dhcpd to put active leases into a pf table. Dhcpd will then
periodically - based on the length of the shortest lease time - walk across
all leases searching for expired leases which are then removed from the pf
table.

ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: pfutils.c,v 1.4 2006/06/14 14:49:46 ckuethe Exp $ */
d69 1
a69 1
	for(;;){
d76 1
a76 1
		if (nfds > 0 && (pfd[0].revents & POLLIN)){
d83 2
a84 2
			switch (cmd.type){
 			case 'A':
d90 1
a90 1
 				pf_change_table(fd, 1, cmd.ip, abandoned_tab);
d92 3
a94 3
 				pf_kill_state(fd, cmd.ip);
 				break;
 			case 'C':
d101 4
a104 4
 				pf_change_table(fd, 0, cmd.ip, abandoned_tab);
 				pf_change_table(fd, 0, cmd.ip, changedmac_tab);
 				break;
 			case 'L':
d111 1
a111 1
 				pf_change_table(fd, 0, cmd.ip, abandoned_tab);
d113 1
a113 1
 				break;
d178 1
a178 1
	if (ioctl(fd, DIOCKILLSTATES, &psk)){
d188 1
a188 1
	if (ioctl(fd, DIOCKILLSTATES, &psk)){
d235 1
a235 1
	switch(c){
@


1.4
log
@Move the transmission of privsep messages into its own function. Wherever
we might have conditionally sent a message, we now just call the pfmsg()
function, and let it figure out whether the message should be sent or not.

ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: pfutils.c,v 1.3 2006/06/14 14:44:39 ckuethe Exp $ */
d46 1
d84 38
a121 10
			case 'A':
				pf_change_table(fd, 1, cmd.ip, abandoned_tab);
				pf_kill_state(fd, cmd.ip);
				break;
			case 'C':
				pf_change_table(fd, 0, cmd.ip, abandoned_tab);
				pf_change_table(fd, 0, cmd.ip, changedmac_tab);
				break;
			case 'L':
				pf_change_table(fd, 0, cmd.ip, abandoned_tab);
d248 5
@


1.3
log
@Avoid changing pf tables when table name is NULL
ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: pfutils.c,v 1.2 2006/05/31 14:40:14 ckuethe Exp $ */
d43 1
d187 38
@


1.2
log
@Missing $OpenBSD$ tag. Spotted by Masao Uebayashi.
ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d108 3
@


1.1
log
@This diff makes dhcpd able to manipulate pf tables on certain lease events.

dhcpd is now able to place abandoned addresses into a table (to offer some
protection against machines camping on an address) and remove them from the
table if they are properly leased.

When dhcpd assigns an IP to a new hardware address, it can remove that
address from a table. This is for use with the overload table in pf; newly
arrived machines will not be punished for the actions of a machine that
went away.

beck@@ and krw@@ liked previous versions of this, henning@@ final ok
@
text
@d1 1
@

