head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.6
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.12.0.26
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.18
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.22
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.20
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.4.0.22
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.18
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.16
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.14
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.12
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.10
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.8
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.15
date	2017.02.13.19.13.14;	author krw;	state Exp;
branches;
next	1.14;
commitid	syYFt6P4XI7prXRF;

1.14
date	2016.02.06.23.50.10;	author krw;	state Exp;
branches;
next	1.13;
commitid	8GMcSAoPYCa1rXN3;

1.13
date	2015.12.21.21.39.11;	author mmcc;	state Exp;
branches;
next	1.12;
commitid	qL5PsV7SFwmqz7sG;

1.12
date	2010.01.02.04.21.16;	author krw;	state Exp;
branches;
next	1.11;

1.11
date	2010.01.01.20.46.19;	author krw;	state Exp;
branches;
next	1.10;

1.10
date	2010.01.01.20.30.24;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2010.01.01.19.10.24;	author krw;	state Exp;
branches;
next	1.8;

1.8
date	2010.01.01.18.01.44;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2010.01.01.08.02.34;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2010.01.01.06.25.37;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2010.01.01.01.47.41;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.16.18.35.42;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.04.20.28.40;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.14.00.20.25;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.13.23.41.48;	author henning;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Switch from old errwarn.c logging to shiny new log.[ch].

ok benno@@
@
text
@/*	$OpenBSD: alloc.c,v 1.14 2016/02/06 23:50:10 krw Exp $	*/

/* Memory allocation... */

/*
 * Copyright (c) 1995, 1996, 1998 The Internet Software Consortium.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <net/if.h>

#include <netinet/in.h>

#include <stdio.h>
#include <stdlib.h>

#include "dhcp.h"
#include "tree.h"
#include "dhcpd.h"
#include "log.h"

struct lease_state *free_lease_states;
struct tree_cache *free_tree_caches;

struct tree_cache *
new_tree_cache(char *name)
{
	struct tree_cache *rval;

	if (free_tree_caches) {
		rval = free_tree_caches;
		free_tree_caches = (struct tree_cache *)(rval->value);
	} else {
		rval = calloc(1, sizeof(struct tree_cache));
		if (!rval)
			fatalx("unable to allocate tree cache for %s.", name);
	}
	return (rval);
}

void
free_tree_cache(struct tree_cache *ptr)
{
	ptr->value = (unsigned char *)free_tree_caches;
	free_tree_caches = ptr;
}

struct lease_state *
new_lease_state(char *name)
{
	struct lease_state *rval;

	if (free_lease_states) {
		rval = free_lease_states;
		free_lease_states = free_lease_states->next;
	} else {
		rval = calloc(1, sizeof(struct lease_state));
		if (!rval)
			fatalx("unable to allocate lease state for %s.", name);
	}

	return (rval);
}

void
free_lease_state(struct lease_state *ptr, char *name)
{
	free(ptr->prl);
	ptr->next = free_lease_states;
	free_lease_states = ptr;
}
@


1.14
log
@Eliminate #include inside *.h files and include only needed headers in
each *.c file.

Inspired by mention of header silliness by Edgar Pettijohn and mmcc@@
on tech@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.13 2015/12/21 21:39:11 mmcc Exp $	*/
d56 1
d72 1
a72 1
			error("unable to allocate tree cache for %s.", name);
d95 1
a95 1
			error("unable to allocate lease state for %s.", name);
@


1.13
log
@remove NULL-checks before free()
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.12 2010/01/02 04:21:16 krw Exp $	*/
d43 12
@


1.12
log
@Eliminate all uses of dmalloc() where the returned pointer
is checked for NULL and a specific error/warning issued. Add
two such manual warning/error checks and kill those dmalloc
calls. And then there were none, so kill dmalloc(). Whew.
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.11 2010/01/01 20:46:19 krw Exp $	*/
d91 1
a91 2
	if (ptr->prl)
		free(ptr->prl);
@


1.11
log
@Eliminate all uses of dfree() where the pointer is either dereferenced
immediately before the use or the pointer is checked for NULL before
the call. And then there were none, so kill dfree().
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.10 2010/01/01 20:30:24 krw Exp $	*/
a45 11

void *
dmalloc(int size, char *name)
{
	void *foo = calloc(size, sizeof(char));

	if (!foo)
		warning("No memory for %s.", name);
	return (foo);
}

d57 1
a57 1
		rval = dmalloc(sizeof(struct tree_cache), name);
d78 7
a84 4
		free_lease_states =
			(struct lease_state *)(free_lease_states->next);
	} else
		rval = dmalloc (sizeof (struct lease_state), name);
@


1.10
log
@Wrappers around a wrapper around free() are of no more use than
wrappers around wrappers around calloc().

The purpose of the free() wrapper is to generate an error message
when free'ing NULL. But free_hash_bucket(), free_lease(), and
free_tree() are all called immediately after dereferencing the
pointer to be freed. Thus the error message will never be issued.
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.9 2010/01/01 19:10:24 krw Exp $	*/
a56 10
void
dfree(void *ptr, char *name)
{
	if (!ptr) {
		warning("dfree %s: free on null pointer.", name);
		return;
	}
	free(ptr);
}

d100 1
a100 1
		dfree(ptr->prl, name);
@


1.9
log
@A slightly more complex calloc() wrapper wrapper, new_hash_table(),
bites the dust.
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.8 2010/01/01 18:01:44 krw Exp $	*/
a85 6
free_hash_bucket(struct hash_bucket *ptr, char *name)
{
	dfree(ptr, name);
}

void
a91 6
void
free_tree(struct tree *ptr, char *name)
{
	dfree(ptr, name);
}

a112 6
}

void
free_lease(struct lease *ptr, char *name)
{
	dfree(ptr, name);
@


1.8
log
@Another calloc() wrapper wrapper, new_tree(), bites the dust.
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.7 2010/01/01 08:02:34 krw Exp $	*/
a81 14
	return (rval);
}

struct hash_table *
new_hash_table(int count, char *name)
{
	struct hash_table *rval;

	rval = dmalloc(sizeof(struct hash_table) -
	    (DEFAULT_HASH_SIZE * sizeof(struct hash_bucket *)) +
	    (count * sizeof(struct hash_bucket *)), name);
	if (rval == NULL)
		return (NULL);
	rval->hash_count = count;
@


1.7
log
@Two more calloc() wrapper wrappers, new_shared_network() and
new_subnet(), bite the dust.
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.6 2010/01/01 06:25:37 krw Exp $	*/
a64 8
}

struct tree *
new_tree(char *name)
{
	struct tree *rval = dmalloc(sizeof(struct tree), name);

	return (rval);
@


1.6
log
@Single-use wrapper functions that just call a wrapper function
around calloc() and end up producing duplicate error messages are
just confusing.

Eliminate new_hash_bucket(), new_lease(), new_leases(), new_group().
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.5 2010/01/01 01:47:41 krw Exp $	*/
a123 15
}

struct shared_network *
new_shared_network(char *name)
{
	struct shared_network *rval =
		dmalloc(sizeof(struct shared_network), name);
	return (rval);
}

struct subnet *
new_subnet(char *name)
{
	struct subnet *rval = dmalloc(sizeof(struct subnet), name);
	return (rval);
@


1.5
log
@Plug a potential leak similar to the one parfait spotted and Theo
fixed.

Eliminate the function new_class() by expanding the only use

Use strdup() and calloc() rather than manually simulating them.

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.4 2004/09/16 18:35:42 deraadt Exp $	*/
a106 8
struct hash_bucket *
new_hash_bucket(char *name)
{
	struct hash_bucket *rval = dmalloc(sizeof(struct hash_bucket), name);

	return (rval);
}

a161 22
}

struct lease *
new_leases(int n, char *name)
{
	struct lease *rval = dmalloc(n * sizeof(struct lease), name);
	return (rval);
}

struct lease *
new_lease(char *name)
{
	struct lease *rval = dmalloc(sizeof(struct lease), name);
	return (rval);
}

struct group *
new_group(char *name)
{
	struct group *rval =
		dmalloc(sizeof(struct group), name);
	return (rval);
@


1.4
log
@avoid aliasing with libc functions; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.3 2004/05/04 20:28:40 deraadt Exp $	*/
a145 7
	return (rval);
}

struct class *
new_class(char *name)
{
	struct class *rval = dmalloc(sizeof(struct class), name);
@


1.3
log
@remove things not used, spotted by lint mostly; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.2 2004/04/14 00:20:25 henning Exp $	*/
d53 1
a53 1
		warn("No memory for %s.", name);
d61 1
a61 1
		warn("dfree %s: free on null pointer.", name);
@


1.2
log
@cheat to KNF and ansi this: take the one from dhclient and add back the
few missing functions
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.5 2004/02/24 15:35:55 henning Exp $	*/
a44 2
struct dhcp_packet *dhcp_free_list;
struct packet *packet_free_list;
a74 11
struct string_list *
new_string_list(size_t size, char * name)
{
	struct string_list *rval;

	rval = dmalloc(sizeof(struct string_list) + size, name);
	if (rval != NULL)
		rval->string = ((char *)rval) + sizeof(struct string_list);
	return (rval);
}

d122 1
a122 7
free_hash_table(struct hash_table *ptr, char *name)
{
	dfree(ptr, name);
}

void
free_tree_cache(struct tree_cache *ptr, char *name)
a128 12
free_packet(struct packet *ptr, char *name)
{
	dfree(ptr, name);
}

void
free_dhcp_packet(struct dhcp_packet *ptr, char *name)
{
	dfree(ptr, name);
}

void
a129 6
{
	dfree(ptr, name);
}

void
free_string_list(struct string_list *ptr, char *name)
@


1.1
log
@may the whacking begin
@
text
@d1 1
a1 1
/* alloc.c
d3 1
a3 1
   Memory allocation... */
d47 1
d49 2
a50 3
void * dmalloc(size, name)
	int size;
	char *name;
d53 1
d55 2
a56 2
		warn ("No memory for %s.", name);
	return foo;
d59 2
a60 3
void dfree(ptr, name)
	void *ptr;
	char *name;
d63 1
a63 1
		warn ("dfree %s: free on null pointer.", name);
d66 1
a66 1
	free (ptr);
d69 2
a70 2
struct packet *new_packet(name)
	char *name;
d72 1
a72 13
	struct packet *rval;
	rval = (struct packet *)dmalloc(sizeof(struct packet), name);
	return rval;
}

struct dhcp_packet *new_dhcp_packet(name)
	char *name;
{
	struct dhcp_packet *rval;
	rval = (struct dhcp_packet *)dmalloc(sizeof(struct dhcp_packet),
	          name);
	return rval;
}
d74 1
a74 5
struct tree *new_tree(name)
	char *name;
{
	struct tree *rval = dmalloc(sizeof(struct tree), name);
	return rval;
d77 2
a78 3
struct string_list *new_string_list(size, name)
	size_t size;
	char * name;
d82 2
a83 2
	rval =dmalloc(sizeof(struct string_list) + size, name);
	if (rval != NULL) 
d85 1
a85 1
	return rval;
d90 2
a91 2
struct tree_cache *new_tree_cache(name)
	char *name;
d97 1
a97 2
		free_tree_caches =
			(struct tree_cache *)(rval->value);
d103 1
a103 1
	return rval;
d106 2
a107 3
struct hash_table *new_hash_table(count, name)
	int count;
	char *name;
d110 4
a113 3
	rval = dmalloc(sizeof (struct hash_table)
          - (DEFAULT_HASH_SIZE * sizeof(struct hash_bucket *))
          + (count * sizeof(struct hash_bucket *)), name);
d115 1
a115 1
		return NULL;
d117 1
a117 1
	return rval;
d120 2
a121 2
struct hash_bucket *new_hash_bucket(name)
	char *name;
d124 2
a125 1
	return rval;
d128 2
a129 3
struct lease *new_leases(n, name)
	int n;
	char *name;
d131 1
a131 2
	struct lease *rval = dmalloc(n * sizeof(struct lease), name);
	return rval;
d134 2
a135 2
struct lease *new_lease(name)
	char *name;
d137 1
a137 2
	struct lease *rval = dmalloc(sizeof(struct lease), name);
	return rval;
d140 2
a141 2
struct subnet *new_subnet(name)
	char *name;
d143 2
a144 2
	struct subnet *rval = dmalloc(sizeof(struct subnet), name);
	return rval;
d147 2
a148 2
struct class *new_class(name)
	char *name;
d150 1
a150 2
	struct class *rval = dmalloc(sizeof(struct class), name);
	return rval;
d153 2
a154 2
struct shared_network *new_shared_network(name)
	char *name;
d156 1
a156 3
	struct shared_network *rval =
		dmalloc (sizeof(struct shared_network), name);
	return rval;
d159 2
a160 2
struct group *new_group(name)
	char *name;
d162 1
a162 3
	struct group *rval =
		dmalloc(sizeof(struct group), name);
	return rval;
d165 2
a166 2
struct protocol *new_protocol(name)
	char *name;
d168 1
a168 2
	struct protocol *rval = dmalloc(sizeof(struct protocol), name);
	return rval;
d171 2
a172 4
struct lease_state *free_lease_states;

struct lease_state *new_lease_state (name)
	char *name;
d174 3
a176 10
	struct lease_state *rval;

	if (free_lease_states) {
		rval = free_lease_states;
		free_lease_states =
			(struct lease_state *)(free_lease_states->next);
	} else {
		rval = dmalloc (sizeof (struct lease_state), name);
	}
	return rval;
d179 2
a180 2
struct domain_search_list *new_domain_search_list (name)
	char *name;
d182 2
a183 3
	struct domain_search_list *rval =
		dmalloc (sizeof (struct domain_search_list), name);
	return rval;
d186 2
a187 2
struct name_server *new_name_server (name)
	char *name;
d189 2
a190 3
	struct name_server *rval =
		dmalloc (sizeof (struct name_server), name);
	return rval;
d193 2
a194 3
void free_name_server (ptr, name)
	struct name_server *ptr;
	char *name;
d196 1
a196 2
	dfree (ptr, name);
}
d198 7
a204 5
void free_domain_search_list (ptr, name)
	struct domain_search_list *ptr;
	char *name;
{
	dfree (ptr, name);
d207 2
a208 3
void free_lease_state (ptr, name)
	struct lease_state *ptr;
	char *name;
d211 1
a211 1
		dfree (ptr->prl, name);
d216 2
a217 3
void free_protocol (ptr, name)
	struct protocol *ptr;
	char *name;
d219 2
a220 1
	dfree (ptr, name);
d223 2
a224 3
void free_group (ptr, name)
	struct group *ptr;
	char *name;
d226 2
a227 1
	dfree (ptr, name);
d230 2
a231 3
void free_shared_network (ptr, name)
	struct shared_network *ptr;
	char *name;
d233 3
a235 65
	dfree (ptr, name);
}

void free_class (ptr, name)
	struct class *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_subnet (ptr, name)
	struct subnet *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_lease (ptr, name)
	struct lease *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_hash_bucket (ptr, name)
	struct hash_bucket *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_hash_table (ptr, name)
	struct hash_table *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_tree_cache (ptr, name)
	struct tree_cache *ptr;
	char *name;
{
	ptr->value = (unsigned char *)free_tree_caches;
	free_tree_caches = ptr;
}

void free_packet (ptr, name)
	struct packet *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_dhcp_packet (ptr, name)
	struct dhcp_packet *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_tree (ptr, name)
	struct tree *ptr;
	char *name;
{
	dfree (ptr, name);
d238 2
a239 3
void free_string_list (ptr, name)
	struct string_list *ptr;
	char *name;
d241 1
a241 1
	dfree (ptr, name);
@

