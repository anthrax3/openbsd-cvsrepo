head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.48
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.44
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.46
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.38
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.42
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.40
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.36
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.34
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.32
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.30
	OPENBSD_5_0:1.5.0.28
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.26
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.24
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.20
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.22
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.18
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.16
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.14
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.12
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.10
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.8
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4;
locks; strict;
comment	@ * @;


1.5
date	2004.09.16.18.35.43;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.15.21.47.13;	author hshoexer;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.14.01.09.52;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.13.23.57.49;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.13.23.41.49;	author henning;	state Exp;
branches;
next	;


desc
@@


1.5
log
@avoid aliasing with libc functions; ok henning
@
text
@/*	$OpenBSD: tree.h,v 1.4 2004/04/15 21:47:13 hshoexer Exp $	*/

/* Definitions for address trees... */

/*
 * Copyright (c) 1995 The Internet Software Consortium.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

/* A pair of pointers, suitable for making a linked list. */
typedef struct _pair {
	caddr_t		 car;
	struct _pair	*cdr;
} *pair;

/* Tree node types... */
#define TREE_CONCAT		1
#define TREE_HOST_LOOKUP	2
#define TREE_CONST		3
#define TREE_LIMIT		4

/* Tree structure for deferred evaluation of changing values. */
struct tree {
	int	op;
	union {
		struct concat {
			struct tree	*left;
			struct tree	*right;
		} concat;
		struct host_lookup {
			struct dns_host_entry *host;
		} host_lookup;
		struct const_val {
			unsigned char	*data;
			int		 len;
		} const_val;
		struct limit {
			struct tree	*tree;
			int		 limit;
		} limit;
	} data;
};

/* DNS host entry structure... */
struct dns_host_entry {
	char		*hostname;
	unsigned char	*data;
	int		 data_len;
	int		 buf_len;
	time_t		 timeout;
};

struct tree_cache {
	unsigned char	*value;
	int		 len;
	unsigned int	 buf_size;
	time_t		 timeout;
	struct tree	*tree;
	int		 flags;
#define	TC_AWAITING_RESOLUTION	1
#define TC_TEMPORARY		2
};

struct universe {
	char		*name;
	struct hash_table *hash;
	struct option	*options[256];
};

struct option {
	char		*name;
	char		*format;
	struct universe	*universe;
	unsigned char	code;
};
@


1.4
log
@knf + ansi

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tree.h,v 1.3 2004/04/14 01:09:52 henning Exp $	*/
d88 1
a88 1
	int		 buf_size;
@


1.3
log
@fold in 10liners and clean up other .hs a bit
@
text
@d1 1
a1 1
/*	$OpenBSD: tree.h,v 1.4 2004/02/23 20:09:02 deraadt Exp $	*/
d44 2
a45 2
	caddr_t car;
	struct _pair *cdr;
d56 1
a56 1
	int op;
d59 2
a60 2
			struct tree *left;
			struct tree *right;
d66 2
a67 2
			unsigned char *data;
			int len;
d70 2
a71 2
			struct tree *tree;
			int limit;
d78 5
a82 5
	char *hostname;
	unsigned char *data;
	int data_len;
	int buf_len;
	time_t timeout;
d86 6
a91 6
	unsigned char *value;
	int len;
	int buf_size;
	time_t timeout;
	struct tree *tree;
	int flags;
d97 1
a97 1
	char *name;
d99 1
a99 1
	struct option *options[256];
d103 4
a106 4
	char *name;
	char *format;
	struct universe *universe;
	unsigned char code;
@


1.2
log
@time_t and kill a few dumb defines
@
text
@d1 1
a1 1
/* tree.h
d3 1
a3 1
   Definitions for address trees... */
d99 1
a99 1
	struct option *options [256];
@


1.1
log
@may the whacking begin
@
text
@d82 1
a82 1
	TIME timeout;
d89 1
a89 1
	TIME timeout;
@

