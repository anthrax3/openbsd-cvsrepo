head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.4.0.48
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.40
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.44
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.42
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.38
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.36
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.34
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.32
	OPENBSD_5_0:1.4.0.30
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.28
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.26
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.22
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.24
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4;
locks; strict;
comment	@ * @;


1.5
date	2016.02.06.23.50.10;	author krw;	state Exp;
branches;
next	1.4;
commitid	8GMcSAoPYCa1rXN3;

1.4
date	2004.05.04.21.25.27;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.04.20.28.40;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.14.01.27.49;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.13.23.41.48;	author henning;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Eliminate #include inside *.h files and include only needed headers in
each *.c file.

Inspired by mention of header silliness by Edgar Pettijohn and mmcc@@
on tech@@.
@
text
@/*	$OpenBSD: convert.c,v 1.4 2004/05/04 21:25:27 deraadt Exp $	*/

/*
 * Safe copying of option values into and out of the option buffer,
 * which can't be assumed to be aligned.
 */

/*
 * Copyright (c) 1995, 1996 The Internet Software Consortium.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <net/if.h>

#include <netinet/in.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "dhcp.h"
#include "tree.h"
#include "dhcpd.h"

u_int32_t
getULong(unsigned char *buf)
{
	u_int32_t ibuf;

	memcpy(&ibuf, buf, sizeof(ibuf));
	return (ntohl(ibuf));
}

u_int16_t
getUShort(unsigned char *buf)
{
	u_int16_t ibuf;

	memcpy(&ibuf, buf, sizeof(ibuf));
	return (ntohs(ibuf));
}

void
putULong(unsigned char *obuf, u_int32_t val)
{
	u_int32_t tmp = htonl(val);

	memcpy(obuf, &tmp, sizeof(tmp));
}

void
putLong(unsigned char *obuf, int32_t val)
{
	int32_t tmp = htonl(val);

	memcpy(obuf, &tmp, sizeof(tmp));
}

void
putUShort(unsigned char *obuf, unsigned int val)
{
	u_int16_t tmp = htons(val);

	memcpy(obuf, &tmp, sizeof(tmp));
}

void
putShort(unsigned char *obuf, int val)
{
	int16_t tmp = htons(val);

	memcpy(obuf, &tmp, sizeof(tmp));
}
@


1.4
log
@remove DEBUG_PACKET stuff; henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: convert.c,v 1.3 2004/05/04 20:28:40 deraadt Exp $	*/
d46 13
@


1.3
log
@remove things not used, spotted by lint mostly; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: convert.c,v 1.2 2004/04/14 01:27:49 henning Exp $	*/
a56 11
#ifdef DEBUG_PACKET
int32_t
getLong(unsigned char *(buf))
{
	int32_t ibuf;

	memcpy(&ibuf, buf, sizeof(ibuf));
	return (ntohl(ibuf));
}
#endif

a64 11

#ifdef DEBUG_PACKET
int16_t
getShort(unsigned char *buf)
{
	int16_t ibuf;

	memcpy(&ibuf, buf, sizeof(ibuf));
	return (ntohs(ibuf));
}
#endif
@


1.2
log
@the ones from dhclient do, and they're already KNF'd and annsified...
@
text
@d1 1
a1 1
/*	$OpenBSD: convert.c,v 1.5 2004/02/07 11:35:59 henning Exp $	*/
d57 1
d66 1
d77 1
d86 1
@


1.1
log
@may the whacking begin
@
text
@d1 1
a1 1
/* convert.c
d3 4
a6 2
   Safe copying of option values into and out of the option buffer, which
   can't be assumed to be aligned. */
d48 2
a49 2
u_int32_t getULong (buf)
	unsigned char *buf;
d53 2
a54 2
	memcpy (&ibuf, buf, sizeof (ibuf));
	return ntohl (ibuf);
d57 2
a58 2
int32_t getLong (buf)
	unsigned char *buf;
d62 2
a63 2
	memcpy (&ibuf, buf, sizeof (ibuf));
	return ntohl (ibuf);
d66 2
a67 2
u_int16_t getUShort (buf)
	unsigned char *buf;
d71 2
a72 2
	memcpy (&ibuf, buf, sizeof (ibuf));
	return ntohs (ibuf);
d75 2
a76 2
int16_t getShort (buf)
	unsigned char *buf;
d80 2
a81 2
	memcpy (&ibuf, buf, sizeof (ibuf));
	return ntohs (ibuf);
d84 2
a85 3
void putULong (obuf, val)
	unsigned char *obuf;
	u_int32_t val;
d87 3
a89 2
	u_int32_t tmp = htonl (val);
	memcpy (obuf, &tmp, sizeof tmp);
d92 2
a93 3
void putLong (obuf, val)
	unsigned char *obuf;
	int32_t val;
d95 3
a97 2
	int32_t tmp = htonl (val);
	memcpy (obuf, &tmp, sizeof tmp);
d100 2
a101 3
void putUShort (obuf, val)
	unsigned char *obuf;
	unsigned int val;
d103 3
a105 2
	u_int16_t tmp = htons (val);
	memcpy (obuf, &tmp, sizeof tmp);
d108 2
a109 3
void putShort (obuf, val)
	unsigned char *obuf;
	int val;
d111 3
a113 2
	int16_t tmp = htons (val);
	memcpy (obuf, &tmp, sizeof tmp);
a114 1

@

