head	1.26;
access;
symbols
	OPENBSD_6_1:1.26.0.2
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.24.0.2
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.6
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.17.0.6
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.4
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.2
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.6
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12;
locks; strict;
comment	@ * @;


1.26
date	2017.02.24.14.28.31;	author gsoares;	state Exp;
branches;
next	1.25;
commitid	gP8L5uaH17MdCR8a;

1.25
date	2017.01.20.11.55.08;	author benno;	state Exp;
branches;
next	1.24;
commitid	amLxRcKegr7GUlIs;

1.24
date	2016.05.01.00.32.37;	author jmatthew;	state Exp;
branches;
next	1.23;
commitid	uX93IkNwEDxO7hQ6;

1.23
date	2015.12.24.17.47.57;	author mmcc;	state Exp;
branches;
next	1.22;
commitid	ZJPTqgdVcu8wUk8G;

1.22
date	2015.11.02.06.32.51;	author jmatthew;	state Exp;
branches;
next	1.21;
commitid	Gxv6LrGmzNUGQSrd;

1.21
date	2015.11.02.04.48.43;	author jmatthew;	state Exp;
branches;
next	1.20;
commitid	1NRDuerpryMuLROX;

1.20
date	2015.06.03.02.24.36;	author millert;	state Exp;
branches;
next	1.19;
commitid	GouatFiJVxwlAVIQ;

1.19
date	2015.01.16.16.04.38;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	6T6qhOmTPOtl2ps3;

1.18
date	2013.11.02.13.31.51;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2012.06.16.00.08.32;	author jmatthew;	state Exp;
branches;
next	1.16;

1.16
date	2012.04.11.08.31.37;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2012.04.01.16.20.00;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2010.11.10.08.00.54;	author martinh;	state Exp;
branches;
next	1.13;

1.13
date	2010.09.01.17.34.15;	author martinh;	state Exp;
branches;
next	1.12;

1.12
date	2010.07.10.14.27.15;	author martinh;	state Exp;
branches;
next	1.11;

1.11
date	2010.07.01.20.09.34;	author martinh;	state Exp;
branches;
next	1.10;

1.10
date	2010.07.01.02.19.11;	author martinh;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.30.17.16.09;	author martinh;	state Exp;
branches;
next	1.8;

1.8
date	2010.06.29.21.54.38;	author martinh;	state Exp;
branches;
next	1.7;

1.7
date	2010.06.29.21.00.34;	author martinh;	state Exp;
branches;
next	1.6;

1.6
date	2010.06.23.12.40.19;	author martinh;	state Exp;
branches;
next	1.5;

1.5
date	2010.06.15.15.12.54;	author martinh;	state Exp;
branches;
next	1.4;

1.4
date	2010.06.11.08.27.58;	author martinh;	state Exp;
branches;
next	1.3;

1.3
date	2010.06.03.17.29.54;	author martinh;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.31.18.29.04;	author martinh;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.31.17.36.31;	author martinh;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Implement fork+exec model

OK jmatthew@@
@
text
@/*	$OpenBSD: ldape.c,v 1.25 2017/01/20 11:55:08 benno Exp $ */

/*
 * Copyright (c) 2009, 2010 Martin Hedenfalk <martin@@bzero.se>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/queue.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/un.h>
#include <sys/wait.h>

#include <err.h>
#include <errno.h>
#include <signal.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "ldapd.h"
#include "log.h"

void			 ldape_sig_handler(int fd, short why, void *data);
static void		 ldape_auth_result(struct imsg *imsg);
static void		 ldape_open_result(struct imsg *imsg);
static void		 ldape_imsgev(struct imsgev *iev, int code,
			    struct imsg *imsg);
static void		 ldape_needfd(struct imsgev *iev);

int			 ldap_starttls(struct request *req);
void			 send_ldap_extended_response(struct conn *conn,
				int msgid, unsigned long type,
				long long result_code,
				const char *extended_oid);

struct imsgev		*iev_ldapd;
struct control_sock	 csock;

void
ldape_sig_handler(int sig, short why, void *data)
{
	log_debug("ldape: got signal %d", sig);
	if (sig == SIGCHLD) {
		for (;;) {
			pid_t	 pid;
			int	 status;

			pid = waitpid(WAIT_ANY, &status, WNOHANG);
			if (pid <= 0)
				break;
		}
		return;
	}

	event_loopexit(NULL);
}

void
send_ldap_extended_response(struct conn *conn, int msgid, unsigned long type,
    long long result_code, const char *extended_oid)
{
	int			 rc;
	struct ber_element	*root, *elm;
	void			*buf;

	log_debug("sending response %u with result %lld", type, result_code);

	if ((root = ber_add_sequence(NULL)) == NULL)
		goto fail;

	elm = ber_printf_elements(root, "d{tEss",
	    msgid, BER_CLASS_APP, type, result_code, "", "");
	if (elm == NULL)
		goto fail;

	if (extended_oid)
		if (ber_add_string(elm, extended_oid) == NULL)
			goto fail;

	ldap_debug_elements(root, type, "sending response on fd %d", conn->fd);

	rc = ber_write_elements(&conn->ber, root);
	ber_free_elements(root);

	if (rc < 0)
		log_warn("failed to create ldap result");
	else {
		ber_get_writebuf(&conn->ber, &buf);
		if (bufferevent_write(conn->bev, buf, rc) != 0)
			log_warn("failed to send ldap result");
	}

	return;
fail:
	if (root)
		ber_free_elements(root);
}

int
ldap_refer(struct request *req, const char *basedn, struct search *search,
    struct referrals *refs)
{
	struct ber_element	*root, *elm, *ref_root = NULL;
	struct referral		*ref;
	long long		 result_code = LDAP_REFERRAL;
	unsigned long		 type;
	int			 rc;
	void			*buf;
	char			*url, *scope_str = NULL;

	if (req->type == LDAP_REQ_SEARCH)
		type = LDAP_RES_SEARCH_RESULT;
	else
		type = req->type + 1;

	if (search != NULL) {
		if (search->scope != LDAP_SCOPE_SUBTREE)
			scope_str = "base";
		else
			scope_str = "sub";
	}

	log_debug("sending referral in response %u on msgid %lld",
	    type, req->msgid);

	if ((root = ber_add_sequence(NULL)) == NULL)
		goto fail;

	if ((elm = ref_root = ber_add_sequence(NULL)) == NULL)
		goto fail;
	ber_set_header(ref_root, BER_CLASS_CONTEXT, LDAP_REQ_SEARCH);
	SLIST_FOREACH(ref, refs, next) {
		if (search != NULL)
			rc = asprintf(&url, "%s/%s??%s", ref->url, basedn,
			    scope_str);
		else
			rc = asprintf(&url, "%s/%s", ref->url, basedn);
		if (rc == -1) {
			log_warn("asprintf");
			goto fail;
		}
		log_debug("adding referral '%s'", url);
		elm = ber_add_string(elm, url);
		free(url);
		if (elm == NULL)
			goto fail;
	}

	elm = ber_printf_elements(root, "d{tEsse",
	    req->msgid, BER_CLASS_APP, type, result_code, "", "", ref_root);
	if (elm == NULL)
		goto fail;
	ref_root = NULL;

	rc = ber_write_elements(&req->conn->ber, root);
	ber_free_elements(root);

	if (rc < 0)
		log_warn("failed to create ldap result");
	else {
		ber_get_writebuf(&req->conn->ber, &buf);
		if (bufferevent_write(req->conn->bev, buf, rc) != 0)
			log_warn("failed to send ldap result");
	}

	request_free(req);
	return LDAP_REFERRAL;

fail:
	if (root != NULL)
		ber_free_elements(root);
	if (ref_root != NULL)
		ber_free_elements(ref_root);
	request_free(req);
	return LDAP_REFERRAL;
}

void
send_ldap_result(struct conn *conn, int msgid, unsigned long type,
    long long result_code)
{
	send_ldap_extended_response(conn, msgid, type, result_code, NULL);
}

int
ldap_respond(struct request *req, int code)
{
	if (code >= 0)
		send_ldap_result(req->conn, req->msgid, req->type + 1, code);
	request_free(req);
	return code;
}

int
ldap_abandon(struct request *req)
{
	long long	 msgid;
	struct search	*search;

	if (ber_scanf_elements(req->op, "i", &msgid) != 0) {
		request_free(req);
		return -1;	/* protocol error, but don't respond */
	}

	TAILQ_FOREACH(search, &req->conn->searches, next) {
		if (search->req->msgid == msgid) {
			/* unlinks the search from conn->searches */
			search_close(search);
			break;
		}
	}
	request_free(req);
	return -1;
}

int
ldap_unbind(struct request *req)
{
	log_debug("current bind dn = %s", req->conn->binddn);
	conn_disconnect(req->conn);
	request_free(req);
	return -1;		/* don't send any response */
}

int
ldap_compare(struct request *req)
{
	struct ber_element	*entry, *elm, *attr;
	struct namespace	*ns;
	struct referrals	*refs;
	struct attr_type	*at;
	char			*dn, *aname, *value, *s;

	if (ber_scanf_elements(req->op, "{s{ss", &dn, &aname, &value) != 0) {
		log_debug("%s: protocol error", __func__);
		request_free(req);
		return -1;
	}

	if ((at = lookup_attribute(conf->schema, aname)) == NULL)
		return ldap_respond(req, LDAP_UNDEFINED_TYPE);

	if ((ns = namespace_for_base(dn)) == NULL) {
		refs = namespace_referrals(dn);
		if (refs == NULL)
			return ldap_respond(req, LDAP_NO_SUCH_OBJECT);
		else
			return ldap_refer(req, dn, NULL, refs);
	}

	if ((entry = namespace_get(ns, dn)) == NULL)
		return ldap_respond(req, LDAP_NO_SUCH_OBJECT);

	if ((attr = ldap_find_attribute(entry, at)) == NULL)
		return ldap_respond(req, LDAP_NO_SUCH_ATTRIBUTE);

	if ((attr = attr->be_next) == NULL)	/* skip attribute name */
		return ldap_respond(req, LDAP_OTHER);

	for (elm = attr->be_sub; elm != NULL; elm = elm->be_next) {
		if (ber_get_string(elm, &s) != 0)
			return ldap_respond(req, LDAP_OTHER);
		if (strcasecmp(value, s) == 0)
			return ldap_respond(req, LDAP_COMPARE_TRUE);
	}

	return ldap_respond(req, LDAP_COMPARE_FALSE);
}

int
ldap_starttls(struct request *req)
{
	if ((req->conn->listener->flags & F_STARTTLS) == 0) {
		log_debug("StartTLS not configured for this connection");
		return LDAP_OPERATIONS_ERROR;
	}

	req->conn->s_flags |= F_STARTTLS;
	return LDAP_SUCCESS;
}

int
ldap_extended(struct request *req)
{
	int			 i, rc = LDAP_PROTOCOL_ERROR;
	char			*oid = NULL;
	struct ber_element	*ext_val = NULL;
	struct {
		const char	*oid;
		int (*fn)(struct request *);
	} extended_ops[] = {
		{ "1.3.6.1.4.1.1466.20037", ldap_starttls },
		{ NULL }
	};

	if (ber_scanf_elements(req->op, "{se", &oid, &ext_val) != 0)
		goto done;

	log_debug("got extended operation %s", oid);
	req->op = ext_val;

	for (i = 0; extended_ops[i].oid != NULL; i++) {
		if (strcmp(oid, extended_ops[i].oid) == 0) {
			rc = extended_ops[i].fn(req);
			break;
		}
	}

	if (extended_ops[i].fn == NULL)
		log_warnx("unimplemented extended operation %s", oid);

done:
	send_ldap_extended_response(req->conn, req->msgid, LDAP_RES_EXTENDED,
	    rc, oid);

	request_free(req);
	return 0;
}

void
ldape(int debug, int verbose, char *csockpath)
{
	int			 on = 1;
	struct namespace	*ns;
	struct listener		*l;
	struct sockaddr_un	*sun = NULL;
	struct event		 ev_sigint;
	struct event		 ev_sigterm;
	struct event		 ev_sigchld;
	struct event		 ev_sighup;
	struct ssl		 key;
	struct passwd		*pw;
	char			 host[128];
	mode_t			old_umask = 0;
	
	log_init(debug);
	log_verbose(verbose);

	TAILQ_INIT(&conn_list);

	setproctitle("ldap server");
	event_init();

	signal_set(&ev_sigint, SIGINT, ldape_sig_handler, NULL);
	signal_set(&ev_sigterm, SIGTERM, ldape_sig_handler, NULL);
	signal_set(&ev_sigchld, SIGCHLD, ldape_sig_handler, NULL);
	signal_set(&ev_sighup, SIGHUP, ldape_sig_handler, NULL);
	signal_add(&ev_sigint, NULL);
	signal_add(&ev_sigterm, NULL);
	signal_add(&ev_sigchld, NULL);
	signal_add(&ev_sighup, NULL);
	signal(SIGPIPE, SIG_IGN);

	/* Initialize parent imsg events. */
	if ((iev_ldapd = calloc(1, sizeof(struct imsgev))) == NULL)
		fatal("calloc");
	imsgev_init(iev_ldapd, PROC_PARENT_SOCK_FILENO, NULL, ldape_imsgev,
	    ldape_needfd);

	/* Initialize control socket. */
	memset(&csock, 0, sizeof(csock));
	csock.cs_name = csockpath;
	control_init(&csock);
	control_listen(&csock);
	TAILQ_INIT(&ctl_conns);

	/* Initialize LDAP listeners.
	 */
	TAILQ_FOREACH(l, &conf->listeners, entry) {
		l->fd = socket(l->ss.ss_family, SOCK_STREAM | SOCK_NONBLOCK,
		    0);
		if (l->fd < 0)
			fatal("ldape: socket");

		setsockopt(l->fd, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on));

		if (l->ss.ss_family == AF_UNIX) {
			sun = (struct sockaddr_un *)&l->ss;
			log_info("listening on %s", sun->sun_path);
			if (unlink(sun->sun_path) == -1 && errno != ENOENT)
				fatal("ldape: unlink");
		} else {
			print_host(&l->ss, host, sizeof(host));
			log_info("listening on %s:%d", host, ntohs(l->port));
		}

		if (l->ss.ss_family == AF_UNIX) {
			old_umask = umask(S_IXUSR|S_IXGRP|S_IXOTH);
		}

		if (bind(l->fd, (struct sockaddr *)&l->ss, l->ss.ss_len) != 0)
			fatal("ldape: bind");

		if (l->ss.ss_family == AF_UNIX) {
			mode_t mode = S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH;

			(void)umask(old_umask);
			if (chmod(sun->sun_path, mode) == -1) {
				unlink(sun->sun_path);
				fatal("ldape: chmod");
			}
		}

		if (listen(l->fd, 20) != 0)
			fatal("ldape: listen");

		event_set(&l->ev, l->fd, EV_READ, conn_accept, l);
		event_add(&l->ev, NULL);
		evtimer_set(&l->evt, conn_accept, l);

		if (l->flags & F_SSL) {
			if (strlcpy(key.ssl_name, l->ssl_cert_name,
			    sizeof(key.ssl_name)) >= sizeof(key.ssl_name))
				fatal("ldape: certificate name truncated");

			l->ssl = SPLAY_FIND(ssltree, conf->sc_ssl, &key);
			if (l->ssl == NULL)
				fatal("ldape: certificate tree corrupted");

			l->tls = tls_server();
			if (l->tls == NULL)
				fatal("ldape: couldn't allocate tls context");

			if (tls_configure(l->tls, l->ssl->config)) {
				log_warn("ldape: %s", tls_error(l->tls));
				fatal("ldape: couldn't configure tls");
			}
		}
	}

	TAILQ_FOREACH(ns, &conf->namespaces, next) {
		if (!namespace_has_referrals(ns) && namespace_open(ns) != 0)
			fatal(ns->suffix);
	}

	if ((pw = getpwnam(LDAPD_USER)) == NULL)
		fatal("getpwnam");

	if (pw != NULL) {
		if (chroot(pw->pw_dir) == -1)
			fatal("chroot");
		if (chdir("/") == -1)
			fatal("chdir(\"/\")");

		if (setgroups(1, &pw->pw_gid) ||
		    setresgid(pw->pw_gid, pw->pw_gid, pw->pw_gid) ||
		    setresuid(pw->pw_uid, pw->pw_uid, pw->pw_uid))
			fatal("cannot drop privileges");
	}

	if (pledge("stdio flock inet unix recvfd", NULL) == -1)
		fatal("pledge");

	log_debug("ldape: entering event loop");
	event_dispatch();

	while ((ns = TAILQ_FIRST(&conf->namespaces)) != NULL)
		namespace_remove(ns);

	control_cleanup(&csock);

	log_info("ldape: exiting");
	exit(0);
}

static void
ldape_imsgev(struct imsgev *iev, int code, struct imsg *imsg)
{
	switch (code) {
	case IMSGEV_IMSG:
		log_debug("%s: got imsg %d on fd %d",
		    __func__, imsg->hdr.type, iev->ibuf.fd);
		switch (imsg->hdr.type) {
		case IMSG_LDAPD_AUTH_RESULT:
			ldape_auth_result(imsg);
			break;
		case IMSG_LDAPD_OPEN_RESULT:
			ldape_open_result(imsg);
			break;
		default:
			log_debug("%s: unexpected imsg %d",
			    __func__, imsg->hdr.type);
			break;
		}
		break;
	case IMSGEV_EREAD:
	case IMSGEV_EWRITE:
	case IMSGEV_EIMSG:
		fatal("imsgev read/write error");
		break;
	case IMSGEV_DONE:
		event_loopexit(NULL);
		break;
	}
}

static void
ldape_needfd(struct imsgev *iev)
{
	/* Try to close a control connection first */
	if (control_close_any(&csock) == 0) {
		log_warn("closed a control connection");
		return;
	}

	if (conn_close_any() == 0) {
		log_warn("closed a client connection");
		return;
	}

	fatal("unable to free an fd");
}

static void
ldape_auth_result(struct imsg *imsg)
{
	struct conn		*conn;
	struct auth_res		*ares = imsg->data;

	log_debug("authentication on conn %d/%lld = %d", ares->fd, ares->msgid,
	    ares->ok);
	conn = conn_by_fd(ares->fd);
	if (conn->bind_req != NULL && conn->bind_req->msgid == ares->msgid)
		ldap_bind_continue(conn, ares->ok);
	else
		log_warnx("spurious auth result");
}

static void
ldape_open_result(struct imsg *imsg)
{
	struct namespace	*ns;
	struct open_req		*oreq = imsg->data;

	if (imsg->hdr.len != sizeof(*oreq) + IMSG_HEADER_SIZE)
		fatal("invalid size of open result");

	/* make sure path is null-terminated */
	oreq->path[PATH_MAX] = '\0';

	log_debug("open(%s) returned fd %d", oreq->path, imsg->fd);

	TAILQ_FOREACH(ns, &conf->namespaces, next) {
		if (namespace_has_referrals(ns))
			continue;
		if (strcmp(oreq->path, ns->data_path) == 0) {
			namespace_set_data_fd(ns, imsg->fd);
			break;
		}
		if (strcmp(oreq->path, ns->indx_path) == 0) {
			namespace_set_indx_fd(ns, imsg->fd);
			break;
		}
	}

	if (ns == NULL) {
		log_warnx("spurious open result");
		close(imsg->fd);
	} else
		namespace_queue_schedule(ns, 0);
}

@


1.25
log
@work on making log.c similar in all daemons:

move daemon-local functions into new logmsg.c, and reduce
the (mostly whitespace) differences so that log.c's can be diffed easily.

ok krw@@ jmatthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.24 2016/05/01 00:32:37 jmatthew Exp $ */
d333 2
a334 2
pid_t
ldape(struct passwd *pw, char *csockpath, int pipe_parent2ldap[2])
a336 1
	pid_t			 pid;
d345 1
d348 3
a353 6
	pid = fork();
	if (pid < 0)
		fatal("ldape: fork");
	if (pid > 0)
		return pid;

a366 2
	close(pipe_parent2ldap[0]);

d370 1
a370 1
	imsgev_init(iev_ldapd, pipe_parent2ldap[1], NULL, ldape_imsgev,
d449 3
d476 1
a476 1
	_exit(0);
@


1.24
log
@convert ldapd to use the libtls api, bringing in a copy of the evbuffer_tls
code from syslogd.

ok beck@@ benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.23 2015/12/24 17:47:57 mmcc Exp $ */
d34 1
@


1.23
log
@bzero -> memset. No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.22 2015/11/02 06:32:51 jmatthew Exp $ */
d344 1
d428 18
a445 1
		ssl_setup(conf, l);
@


1.22
log
@use SOCK_NONBLOCK instead of fcntl

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.21 2015/11/02 04:48:43 jmatthew Exp $ */
d377 1
a377 1
	bzero(&csock, sizeof(csock));
@


1.21
log
@Both ldapd processes need "stdio" to talk to clients and each other.
The parent process opens database files ("rpath wpath cpath"), sends fds to
the child ("sendfd"), and does bsd auth on behalf of the child ("getpw proc
exec").

The child process accepts client connections ("inet unix"), receives fds from
the parent ("recvfd") and locks database files ("flock").

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.20 2015/06/03 02:24:36 millert Exp $ */
d386 2
a387 1
		l->fd = socket(l->ss.ss_family, SOCK_STREAM, 0);
a421 2

		fd_nonblock(l->fd);
@


1.20
log
@Do not assume that asprintf() clears the pointer on failure, which
is non-portable.  Also add missing asprintf() return value checks.
OK deraadt@@ guenther@@ doug@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.19 2015/01/16 16:04:38 deraadt Exp $ */
d447 3
@


1.19
log
@change to <limits.h> universe.  The only changes in the binary are due
to the heavy use of assert.
ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.18 2013/11/02 13:31:51 deraadt Exp $ */
d146 1
a146 1
			asprintf(&url, "%s/%s??%s", ref->url, basedn,
d149 2
a150 2
			asprintf(&url, "%s/%s", ref->url, basedn);
		if (url == NULL) {
@


1.18
log
@bunch of format string cleanups, removing %i, signed vs unsigned, and even
a few long long's
ok jmatthew
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.17 2012/06/16 00:08:32 jmatthew Exp $ */
d533 1
a533 1
	oreq->path[MAXPATHLEN] = '\0';
@


1.17
log
@Protect against fd exhaustion when reopening database files.  Only accept
client or control connections when there are at least 8 fds available,
and close a connection before calling imsg_read if it would be unable to
accept an fd from the parent process.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.16 2012/04/11 08:31:37 deraadt Exp $ */
d135 2
a136 1
	log_debug("sending referral in response %u on msgid %i", type, req->msgid);
d465 1
a465 1
		log_debug("%s: got imsg %i on fd %i",
d514 1
a514 1
	log_debug("authentication on conn %i/%lld = %d", ares->fd, ares->msgid,
d535 1
a535 1
	log_debug("open(%s) returned fd %i", oreq->path, imsg->fd);
@


1.16
log
@rate limiting of accept() in various cases.  Testing by jmatthew.  there
maybe still be a corner case where it needs one more file descriptor
beyond the limit..
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.15 2012/04/01 16:20:00 deraadt Exp $ */
d40 1
d372 2
a373 1
	imsgev_init(iev_ldapd, pipe_parent2ldap[1], NULL, ldape_imsgev);
d488 17
@


1.15
log
@use our umask() before AF_UNIX bind() semantics; ok pyr
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.14 2010/11/10 08:00:54 martinh Exp $ */
d421 1
a421 1
		event_set(&l->ev, l->fd, EV_READ|EV_PERSIST, conn_accept, l);
d423 1
@


1.14
log
@Make -dvv flags produce debug traces of decoded BER messages on stderr.
Also shows a hexdump of the input buffer if BER decoding fails.
Useful when debugging protocol issues.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.13 2010/09/01 17:34:15 martinh Exp $ */
d343 1
d399 4
a404 2
		if (listen(l->fd, 20) != 0)
			fatal("ldape: listen");
d408 2
d415 3
@


1.13
log
@Move generic imsg/libevent glue to a separate file.

with eric@@ at c2k10
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.12 2010/07/10 14:27:15 martinh Exp $ */
d90 2
@


1.12
log
@Retry requests when the btree is busy. Without this, clients will just hang
waiting for a response if the btree was being reopened when the request was
received.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.11 2010/07/01 20:09:34 martinh Exp $ */
a35 1
void			 ldape_dispatch_ldapd(int fd, short event, void *ptr);
d38 2
d368 1
a368 3
	imsg_init(&iev_ldapd->ibuf, pipe_parent2ldap[1]);
	iev_ldapd->handler = ldape_dispatch_ldapd;
	imsg_event_add(iev_ldapd);
d446 2
a447 2
void
ldape_dispatch_ldapd(int fd, short event, void *ptr)
d449 5
a453 16
	struct imsgev		*iev = ptr;
	struct imsgbuf		*ibuf;
	struct imsg		 imsg;
	ssize_t			 n;

	if (imsg_event_handle(iev, event) != 0)
		return;

	ibuf = &iev->ibuf;
	for (;;) {
		if ((n = imsg_get(ibuf, &imsg)) == -1)
			fatal("ldape_dispatch_ldapd: imsg_read error");
		if (n == 0)
			break;

		switch (imsg.hdr.type) {
d455 1
a455 1
			ldape_auth_result(&imsg);
d458 1
a458 1
			ldape_open_result(&imsg);
d461 2
a462 2
			log_debug("ldape_dispatch_ldapd: unexpected imsg %d",
			    imsg.hdr.type);
d465 9
a473 1
		imsg_free(&imsg);
a474 1
	imsg_event_add(iev);
@


1.11
log
@Implement the LDAP compare operation.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.10 2010/07/01 02:19:11 martinh Exp $ */
d528 1
a528 1
		namespace_queue_schedule(ns);
@


1.10
log
@Remove dead assignments. Found by clang static analyzer.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.9 2010/06/30 17:16:09 martinh Exp $ */
d230 45
@


1.9
log
@Don't send statistics for referral namespaces. This unbreaks ldapctl stats.
Avoid null pointer dereference when reopening a namespace.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.8 2010/06/29 21:54:38 martinh Exp $ */
d87 2
a88 1
		elm = ber_add_string(elm, extended_oid);
@


1.8
log
@Add support for referrals. Referrals are configured in the config file,
either in the global context or in a namespace. The latter can be used to
delegate requests to different servers for specific parts of the DIT. The
former is a global catch-all referral.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.7 2010/06/29 21:00:34 martinh Exp $ */
d466 2
@


1.7
log
@Remember on what listener a connection got from, and return protocol error
if trying to use starttls without a configured certificate, instead of just
blocking the client.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.6 2010/06/23 12:40:19 martinh Exp $ */
d106 78
d373 1
a373 1
		if (namespace_open(ns) != 0)
@


1.6
log
@Remove compaction and indexing from ldapd. It is better done by a separate
process now that the btree can pick up the changes automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.5 2010/06/15 15:12:54 martinh Exp $ */
d156 5
@


1.5
log
@Implement support in the parent to (re-)open database files on behalf of
the unprivileged child over imsg. Part of a larger change that will fix
database compaction.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.4 2010/06/11 08:27:58 martinh Exp $ */
a60 1
			check_compaction(pid, status);
@


1.4
log
@print long long int as %lld
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.3 2010/06/03 17:29:54 martinh Exp $ */
d37 2
d338 5
a342 13
		case IMSG_LDAPD_AUTH_RESULT: {
			struct conn		*conn;
			struct auth_res		*ares;

			ares = imsg.data;
			log_debug("authentication on conn %i/%lld = %d",
			    ares->fd, ares->msgid, ares->ok);
			conn = conn_by_fd(ares->fd);
			if (conn->bind_req &&
			    conn->bind_req->msgid == ares->msgid)
				ldap_bind_continue(conn, ares->ok);
			else
				log_warnx("spurious auth result");
a343 1
		}
d352 47
@


1.3
log
@Open database files before chrooting, and use an absolute path to
the database files, instead of relying on the chrooted-to path.

This breaks compaction as the ldape process can't re-open the
database files. This is being worked on.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.2 2010/05/31 18:29:04 martinh Exp $ */
d75 1
a75 1
	log_debug("sending response %u with result %d", type, result_code);
@


1.2
log
@Remove trailing whitespace and spaces before tabs.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldape.c,v 1.1 2010/05/31 17:36:31 martinh Exp $ */
d288 5
a302 5
	}

	TAILQ_FOREACH(ns, &conf->namespaces, next) {
		if (namespace_open(ns) != 0)
			fatal(ns->suffix);
@


1.1
log
@Initial import of ldapd, a small LDAP daemon. Work in progress.

ok deraadt@@ jacekm@@ gilles@@ back@@ henning@@ blambert@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d166 1
a166 1
		const char 	*oid;
@

