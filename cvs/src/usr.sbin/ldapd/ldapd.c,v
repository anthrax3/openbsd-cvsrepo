head	1.23;
access;
symbols
	OPENBSD_6_1:1.23.0.2
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.20.0.2
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.6
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.4
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5;
locks; strict;
comment	@ * @;


1.23
date	2017.03.01.00.50.12;	author gsoares;	state Exp;
branches;
next	1.22;
commitid	QM8qu9ueorNEJGT9;

1.22
date	2017.02.24.14.28.31;	author gsoares;	state Exp;
branches;
next	1.21;
commitid	gP8L5uaH17MdCR8a;

1.21
date	2017.01.20.11.55.08;	author benno;	state Exp;
branches;
next	1.20;
commitid	amLxRcKegr7GUlIs;

1.20
date	2016.05.01.00.32.37;	author jmatthew;	state Exp;
branches;
next	1.19;
commitid	uX93IkNwEDxO7hQ6;

1.19
date	2016.02.04.12.48.06;	author jca;	state Exp;
branches;
next	1.18;
commitid	hrTUQUsDKYDAjLPb;

1.18
date	2016.02.02.14.59.20;	author gsoares;	state Exp;
branches;
next	1.17;
commitid	JdEHLvkcPckz00MD;

1.17
date	2016.02.01.20.00.18;	author landry;	state Exp;
branches;
next	1.16;
commitid	DHpO2e5k3smQyFDY;

1.16
date	2016.01.17.08.13.34;	author landry;	state Exp;
branches;
next	1.15;
commitid	mhJTGdZ8jCoBbnRX;

1.15
date	2015.12.24.17.47.57;	author mmcc;	state Exp;
branches;
next	1.14;
commitid	ZJPTqgdVcu8wUk8G;

1.14
date	2015.11.02.06.32.51;	author jmatthew;	state Exp;
branches;
next	1.13;
commitid	Gxv6LrGmzNUGQSrd;

1.13
date	2015.11.02.04.48.43;	author jmatthew;	state Exp;
branches;
next	1.12;
commitid	1NRDuerpryMuLROX;

1.12
date	2015.01.16.16.04.38;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	6T6qhOmTPOtl2ps3;

1.11
date	2014.08.25.07.50.26;	author doug;	state Exp;
branches;
next	1.10;
commitid	vcwz0sp1JH7QzUmA;

1.10
date	2013.11.02.13.31.51;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2012.06.16.00.08.32;	author jmatthew;	state Exp;
branches;
next	1.8;

1.8
date	2010.11.10.08.00.54;	author martinh;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.26.01.58.22;	author william;	state Exp;
branches;
next	1.6;

1.6
date	2010.09.01.17.34.15;	author martinh;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.01.02.19.11;	author martinh;	state Exp;
branches;
next	1.4;

1.4
date	2010.06.15.15.12.54;	author martinh;	state Exp;
branches;
next	1.3;

1.3
date	2010.06.15.14.43.56;	author martinh;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.31.18.29.04;	author martinh;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.31.17.36.31;	author martinh;	state Exp;
branches;
next	;


desc
@@


1.23
log
@move up getpid() and getpwnam(LDAP USER) checks
to fail earlier and also make them consistent with
other daemons.

while here:
- fix getpwnam(LDAPD_USER) errx()
- no need to skip_chroot

ok jmatthew@@
@
text
@/*	$OpenBSD: ldapd.c,v 1.22 2017/02/24 14:28:31 gsoares Exp $ */

/*
 * Copyright (c) 2009, 2010 Martin Hedenfalk <martin@@bzero.se>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/queue.h>
#include <sys/stat.h>
#include <sys/un.h>
#include <sys/types.h>
#include <sys/wait.h>

#include <assert.h>
#include <bsd_auth.h>
#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <event.h>
#include <fcntl.h>
#include <login_cap.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#include "ldapd.h"
#include "log.h"

void		 usage(void);
void		 ldapd_sig_handler(int fd, short why, void *data);
void		 ldapd_sigchld_handler(int sig, short why, void *data);
static void	 ldapd_imsgev(struct imsgev *iev, int code, struct imsg *imsg);
static void	 ldapd_needfd(struct imsgev *iev);
static void	 ldapd_auth_request(struct imsgev *iev, struct imsg *imsg);
static void	 ldapd_open_request(struct imsgev *iev, struct imsg *imsg);
static void	 ldapd_log_verbose(struct imsg *imsg);
static void	 ldapd_cleanup(char *);
static pid_t	 start_child(enum ldapd_process, char *, int, int, int,
		    char *, char *);

struct ldapd_stats	 stats;
pid_t			 ldape_pid;
const char		*datadir = DATADIR;

void
usage(void)
{
	extern char	*__progname;

	fprintf(stderr, "usage: %s [-dnv] [-D macro=value] "
	    "[-f file] [-r directory] [-s file]\n", __progname);
	exit(1);
}

void
ldapd_sig_handler(int sig, short why, void *data)
{
	log_info("ldapd: got signal %d", sig);
	if (sig == SIGINT || sig == SIGTERM)
		event_loopexit(NULL);
}

void
ldapd_sigchld_handler(int sig, short why, void *data)
{
	pid_t		 pid;
	int		 status;

	while ((pid = waitpid(WAIT_ANY, &status, WNOHANG)) != 0) {
		if (pid == -1) {
			if (errno == EINTR)
				continue;
			if (errno != ECHILD)
				log_warn("waitpid");
			break;
		}

		if (WIFEXITED(status))
			log_debug("child %d exited with status %d",
			    pid, WEXITSTATUS(status));
		else if (WIFSIGNALED(status))
			log_debug("child %d exited due to signal %d",
			    pid, WTERMSIG(status));
		else
			log_debug("child %d terminated abnormally", pid);

		if (pid == ldape_pid) {
			log_info("ldapd: lost ldap server");
			event_loopexit(NULL);
			break;
		}
	}
}

int
main(int argc, char *argv[])
{
	int			 c;
	int			 debug = 0, verbose = 0, eflag = 0;
	int			 configtest = 0;
	int			 pipe_parent2ldap[2];
	char			*conffile = CONFFILE;
	char			*csockpath = LDAPD_SOCKET;
	char			*saved_argv0;
	struct imsgev		*iev_ldape;
	struct event		 ev_sigint;
	struct event		 ev_sigterm;
	struct event		 ev_sigchld;
	struct event		 ev_sighup;
	struct stat		 sb;

	log_init(1);		/* log to stderr until daemonized */

	saved_argv0 = argv[0];
	if (saved_argv0 == NULL)
		saved_argv0 = "ldapd";

	while ((c = getopt(argc, argv, "dhvD:f:nr:s:E")) != -1) {

		switch (c) {
		case 'd':
			debug = 1;
			break;
		case 'D':
			if (cmdline_symset(optarg) < 0) {
				warnx("could not parse macro definition %s",
				    optarg);
			}
			break;
		case 'f':
			conffile = optarg;
			break;
		case 'h':
			usage();
			/* NOTREACHED */
		case 'n':
			configtest = 1;
			break;
		case 'r':
			datadir = optarg;
			break;
		case 's':
			csockpath = optarg;
			break;
		case 'v':
			verbose++;
			break;
		case 'E':
			eflag = 1;
			break;
		default:
			usage();
			/* NOTREACHED */
		}
	}

	argc -= optind;
	if (argc > 0)
		usage();

	/* check for root privileges  */
	if (geteuid())
		errx(1, "need root privileges");

	/* check for ldapd user */
	if (getpwnam(LDAPD_USER) == NULL)
		errx(1, "unknown user %s", LDAPD_USER);

	log_verbose(verbose);
	stats.started_at = time(0);
	tls_init();

	if (parse_config(conffile) != 0)
		exit(2);

	if (configtest) {
		fprintf(stderr, "configuration ok\n");
		exit(0);
	}

	if (eflag)
		ldape(debug, verbose, csockpath);

	if (stat(datadir, &sb) == -1)
		err(1, "%s", datadir);
	if (!S_ISDIR(sb.st_mode))
		errx(1, "%s is not a directory", datadir);

	if (!debug) {
		if (daemon(1, 0) == -1)
			err(1, "failed to daemonize");
	}

	log_init(debug);
	log_info("startup");

	if (socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC | SOCK_NONBLOCK,
	    PF_UNSPEC, pipe_parent2ldap) != 0)
		fatal("socketpair");
	
	ldape_pid = start_child(PROC_LDAP_SERVER, saved_argv0,
	    pipe_parent2ldap[1], debug, verbose, csockpath, conffile);

	setproctitle("auth");
	event_init();

	signal_set(&ev_sigint, SIGINT, ldapd_sig_handler, NULL);
	signal_set(&ev_sigterm, SIGTERM, ldapd_sig_handler, NULL);
	signal_set(&ev_sigchld, SIGCHLD, ldapd_sigchld_handler, NULL);
	signal_set(&ev_sighup, SIGHUP, ldapd_sig_handler, NULL);
	signal_add(&ev_sigint, NULL);
	signal_add(&ev_sigterm, NULL);
	signal_add(&ev_sigchld, NULL);
	signal_add(&ev_sighup, NULL);
	signal(SIGPIPE, SIG_IGN);

	if ((iev_ldape = calloc(1, sizeof(struct imsgev))) == NULL)
		fatal("calloc");
	imsgev_init(iev_ldape, pipe_parent2ldap[0], NULL, ldapd_imsgev,
	    ldapd_needfd);

	if (pledge("stdio rpath wpath cpath getpw sendfd proc exec",
	    NULL) == -1)
		err(1, "pledge");

	event_dispatch();

	ldapd_cleanup(csockpath);
	log_debug("ldapd: exiting");

	return 0;
}

static void
ldapd_cleanup(char * csockpath)
{
	struct listener		*l;
	struct sockaddr_un	*sun = NULL;

	/* Remove control socket. */
	(void)unlink(csockpath);

	/* Remove unix listening sockets. */
	TAILQ_FOREACH(l, &conf->listeners, entry) {
		if (l->ss.ss_family == AF_UNIX) {
			sun = (struct sockaddr_un *)&l->ss;
			log_info("ldapd: removing unix socket %s", sun->sun_path);
			(void)unlink(sun->sun_path);
		}
	}
}

static void
ldapd_imsgev(struct imsgev *iev, int code, struct imsg *imsg)
{
	switch (code) {
	case IMSGEV_IMSG:
		log_debug("%s: got imsg %d on fd %d",
		    __func__, imsg->hdr.type, iev->ibuf.fd);
		switch (imsg->hdr.type) {
		case IMSG_LDAPD_AUTH:
			ldapd_auth_request(iev, imsg);
			break;
		case IMSG_CTL_LOG_VERBOSE:
			ldapd_log_verbose(imsg);
			break;
		case IMSG_LDAPD_OPEN:
			ldapd_open_request(iev, imsg);
			break;
		default:
			log_debug("%s: unexpected imsg %d",
			    __func__, imsg->hdr.type);
			break;
		}
		break;
	case IMSGEV_EREAD:
	case IMSGEV_EWRITE:
	case IMSGEV_EIMSG:
		fatal("imsgev read/write error");
		break;
	case IMSGEV_DONE:
		event_loopexit(NULL);
		break;
	}
}

static void
ldapd_needfd(struct imsgev *iev)
{
	fatal("should never need an fd for parent messages");
}

static int
ldapd_auth_classful(char *name, char *password)
{
	login_cap_t		*lc = NULL;
	char			*class = NULL, *style = NULL;
	auth_session_t		*as;

	if ((class = strchr(name, '#')) == NULL) {
		log_debug("regular auth");
		return auth_userokay(name, NULL, "auth-ldap", password);
	}
	*class++ = '\0';

	if ((lc = login_getclass(class)) == NULL) {
		log_debug("login_getclass(%s) for [%s] failed", class, name);
		return 0;
	}
	if ((style = login_getstyle(lc, style, "auth-ldap")) == NULL) {
		log_debug("login_getstyle() for [%s] failed", name);
		login_close(lc);
		return 0;
	}
	if (password) {
		if ((as = auth_open()) == NULL) {
			login_close(lc);
			return 0;
		}
		auth_setitem(as, AUTHV_SERVICE, "response");
		auth_setdata(as, "", 1);
		auth_setdata(as, password, strlen(password) + 1);
		explicit_bzero(password, strlen(password));
	} else
		as = NULL;

	as = auth_verify(as, style, name, lc->lc_class, (char *)NULL);
	login_close(lc);
	return (as != NULL ? auth_close(as) : 0);
}

static void
ldapd_auth_request(struct imsgev *iev, struct imsg *imsg)
{
	struct auth_req		*areq = imsg->data;
	struct auth_res		 ares;

	if (imsg->hdr.len != sizeof(*areq) + IMSG_HEADER_SIZE)
		fatal("invalid size of auth request");

	/* make sure name and password are null-terminated */
	areq->name[sizeof(areq->name) - 1] = '\0';
	areq->password[sizeof(areq->password) - 1] = '\0';

	log_debug("authenticating [%s]", areq->name);
	ares.ok = ldapd_auth_classful(areq->name, areq->password);
	ares.fd = areq->fd;
	ares.msgid = areq->msgid;
	memset(areq, 0, sizeof(*areq));
	imsgev_compose(iev, IMSG_LDAPD_AUTH_RESULT, 0, 0, -1, &ares,
	    sizeof(ares));
}

static void
ldapd_log_verbose(struct imsg *imsg)
{
	int	 verbose;

	if (imsg->hdr.len != sizeof(verbose) + IMSG_HEADER_SIZE)
		fatal("invalid size of log verbose request");

	bcopy(imsg->data, &verbose, sizeof(verbose));
	log_verbose(verbose);
}

static void
ldapd_open_request(struct imsgev *iev, struct imsg *imsg)
{
	struct open_req		*oreq = imsg->data;
	int			 oflags, fd;

	if (imsg->hdr.len != sizeof(*oreq) + IMSG_HEADER_SIZE)
		fatal("invalid size of open request");

	/* make sure path is null-terminated */
	oreq->path[PATH_MAX] = '\0';

	if (strncmp(oreq->path, datadir, strlen(datadir)) != 0) {
		log_warnx("refusing to open file %s", oreq->path);
		fatal("ldape sent invalid open request");
	}

	if (oreq->rdonly)
		oflags = O_RDONLY;
	else
		oflags = O_RDWR | O_CREAT | O_APPEND;

	log_debug("opening [%s]", oreq->path);
	fd = open(oreq->path, oflags | O_NOFOLLOW, 0600);
	if (fd == -1)
		log_warn("%s", oreq->path);

	imsgev_compose(iev, IMSG_LDAPD_OPEN_RESULT, 0, 0, fd, oreq,
	    sizeof(*oreq));
}

static pid_t
start_child(enum ldapd_process p, char *argv0, int fd, int debug,
    int verbose, char *csockpath, char *conffile)
{
	char		*argv[9];
	int		 argc = 0;
	pid_t		 pid;

	switch (pid = fork()) {
	case -1:
		fatal("cannot fork");
	case 0:
		break;
	default:
		close(fd);
		return (pid);
	}

	if (dup2(fd, PROC_PARENT_SOCK_FILENO) == -1)
		fatal("cannot setup imsg fd");

	argv[argc++] = argv0;
	switch (p) {
	case PROC_MAIN_AUTH:
		fatalx("Can not start main process");
	case PROC_LDAP_SERVER:
		argv[argc++] = "-E";
		break;
	}
	if (debug)
		argv[argc++] = "-d";
	if (verbose)
		argv[argc++] = "-v";
	if (csockpath) {
		argv[argc++] = "-s";
		argv[argc++] = csockpath;
	}
	if (conffile) {
		argv[argc++] = "-f";
		argv[argc++] = conffile;
	}
	
	argv[argc++] = NULL;

	execvp(argv0, argv);
	fatal("execvp");
}
@


1.22
log
@Implement fork+exec model

OK jmatthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.21 2017/01/20 11:55:08 benno Exp $ */
d114 1
a114 1
	int			 configtest = 0, skip_chroot = 0;
d175 8
a196 6
	
	if (geteuid()) {
		if (!debug)
			errx(1, "need root privileges");
		skip_chroot = 1;
	}
a201 3

	if (!skip_chroot && (getpwnam(LDAPD_USER) == NULL))
		err(1, "%s", LDAPD_USER);
@


1.21
log
@work on making log.c similar in all daemons:

move daemon-local functions into new logmsg.c, and reduce
the (mostly whitespace) differences so that log.c's can be diffed easily.

ok krw@@ jmatthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.20 2016/05/01 00:32:37 jmatthew Exp $ */
d52 2
d113 1
a113 1
	int			 debug = 0, verbose = 0;
d118 1
a118 1
	struct passwd		*pw = NULL;
d128 6
a133 1
	while ((c = getopt(argc, argv, "dhvD:f:nr:s:")) != -1) {
d162 3
d187 3
d201 1
a201 1
	if (!skip_chroot && (pw = getpwnam(LDAPD_USER)) == NULL)
d212 2
a213 2
	if (socketpair(AF_UNIX, SOCK_STREAM | SOCK_NONBLOCK, PF_UNSPEC,
	    pipe_parent2ldap) != 0)
d215 3
a217 2

	ldape_pid = ldape(pw, csockpath, pipe_parent2ldap);
a231 2
	close(pipe_parent2ldap[1]);

d412 47
@


1.20
log
@convert ldapd to use the libtls api, bringing in a copy of the evbuffer_tls
code from syslogd.

ok beck@@ benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.19 2016/02/04 12:48:06 jca Exp $ */
d41 1
@


1.19
log
@Minor ldapd -r tweaks

- fix style
- the string pointed to by datadir shouldn't be modified, use const
- initialize datadir at compile time
- in namespace.c, move the extern datadir decl above local decls
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.18 2016/02/02 14:59:20 gsoares Exp $ */
d166 1
a166 1
	ssl_init();
@


1.18
log
@use stat(2) instead of chdir(2) to check if given the directory is valid.
OK landry@@ jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.17 2016/02/01 20:00:18 landry Exp $ */
d54 1
a54 1
char *			 datadir;
a122 1
	datadir = DATADIR;
@


1.17
log
@Add -r argument to ldapd, to specify an alternative directory to
store/read the database, still defaulting to /var/db/ldap.

This will allow running totally separate instances, to be used by an
upcoming regress suite for example.

With a tweak from gsoares@@ to check that the directory exists.
ok dlg@@ semarie@@ jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.16 2016/01/17 08:13:34 landry Exp $ */
d20 1
d121 1
d183 4
a186 2
	if (datadir && chdir(datadir))
		err(1, "chdir");
@


1.16
log
@Properly remove unix sockets (control & listening) upon exit of the
parent process.

Child process was killed by pledge because it tried to remove the
control socket and didnt have cpath - anyway it couldnt remove it since
it had chrooted..

ok jmatthew@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.15 2015/12/24 17:47:57 mmcc Exp $ */
d53 1
d61 1
a61 1
	    "[-f file] [-s file]\n", __progname);
d121 1
d124 1
a124 1
	while ((c = getopt(argc, argv, "dhvD:f:ns:")) != -1) {
d144 3
d181 3
d377 1
a377 1
	if (strncmp(oreq->path, DATADIR, strlen(DATADIR)) != 0) {
@


1.15
log
@bzero -> memset. No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.14 2015/11/02 06:32:51 jmatthew Exp $ */
d20 1
d49 1
d218 2
d223 19
@


1.14
log
@use SOCK_NONBLOCK instead of fcntl

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.13 2015/11/02 04:48:43 jmatthew Exp $ */
d317 1
a317 1
	bzero(areq, sizeof(*areq));
@


1.13
log
@Both ldapd processes need "stdio" to talk to clients and each other.
The parent process opens database files ("rpath wpath cpath"), sends fds to
the child ("sendfd"), and does bsd auth on behalf of the child ("getpw proc
exec").

The child process accepts client connections ("inet unix"), receives fds from
the parent ("recvfd") and locks database files ("flock").

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.12 2015/01/16 16:04:38 deraadt Exp $ */
a101 12
/* set socket non-blocking */
void
fd_nonblock(int fd)
{
	int flags = fcntl(fd, F_GETFL, 0);
	int rc = fcntl(fd, F_SETFL, flags | O_NONBLOCK);
	if (rc == -1) {
		log_warn("failed to set fd %d non-blocking", fd);
	}
}


d185 2
a186 1
	if (socketpair(AF_UNIX, SOCK_STREAM, PF_UNSPEC, pipe_parent2ldap) != 0)
a187 3

	fd_nonblock(pipe_parent2ldap[0]);
	fd_nonblock(pipe_parent2ldap[1]);
@


1.12
log
@change to <limits.h> universe.  The only changes in the binary are due
to the heavy use of assert.
ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.11 2014/08/25 07:50:26 doug Exp $ */
d224 4
@


1.11
log
@Delete secret or secret-derived data with explicit_bzero.

concept ok deraadt@@
diff looks ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.10 2013/11/02 13:31:51 deraadt Exp $ */
d354 1
a354 1
	oreq->path[MAXPATHLEN] = '\0';
@


1.10
log
@bunch of format string cleanups, removing %i, signed vs unsigned, and even
a few long long's
ok jmatthew
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.9 2012/06/16 00:08:32 jmatthew Exp $ */
d301 1
a301 1
		memset(password, 0, strlen(password));
@


1.9
log
@Protect against fd exhaustion when reopening database files.  Only accept
client or control connections when there are at least 8 fds available,
and close a connection before calling imsg_read if it would be unable to
accept an fd from the parent process.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.8 2010/11/10 08:00:54 martinh Exp $ */
d109 1
a109 1
		log_warn("failed to set fd %i non-blocking", fd);
d236 1
a236 1
		log_debug("%s: got imsg %i on fd %i",
@


1.8
log
@Make -dvv flags produce debug traces of decoded BER messages on stderr.
Also shows a hexdump of the input buffer if BER decoding fails.
Useful when debugging protocol issues.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.7 2010/10/26 01:58:22 william Exp $ */
d44 1
d222 2
a223 1
	imsgev_init(iev_ldape, pipe_parent2ldap[0], NULL, ldapd_imsgev);
d263 6
@


1.7
log
@Allow the userPassword attribute to specify a login class when using
simple binds with BSD Authentication, using '#' as the delimiter, such
as:

userPassword: {BSDAUTH}username#loginclass

Useful for auth modules that require parameters such as login_radius.

ok martinh
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.6 2010/09/01 17:34:15 martinh Exp $ */
d155 1
a155 1
			verbose = 1;
@


1.6
log
@Move generic imsg/libevent glue to a separate file.

with eric@@ at c2k10
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.5 2010/07/01 02:19:11 martinh Exp $ */
d30 1
d263 39
d316 1
a316 1
	ares.ok = auth_userokay(areq->name, NULL, "auth-ldap", areq->password);
@


1.5
log
@Remove dead assignments. Found by clang static analyzer.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.4 2010/06/15 15:12:54 martinh Exp $ */
d42 1
a42 1
void		 ldapd_dispatch_ldape(int fd, short event, void *ptr);
d220 1
a220 3
	imsg_init(&iev_ldape->ibuf, pipe_parent2ldap[0]);
	iev_ldape->handler = ldapd_dispatch_ldape;
	imsg_event_add(iev_ldape);
d228 2
a229 16
void
imsg_event_add(struct imsgev *iev)
{
	iev->events = EV_READ;
	if (iev->ibuf.w.queued)
		iev->events |= EV_WRITE;

	if (event_initialized(&iev->ev))
		event_del(&iev->ev);
	event_set(&iev->ev, iev->ibuf.fd, iev->events, iev->handler, iev);
	event_add(&iev->ev, NULL);
}

int
imsg_compose_event(struct imsgev *iev, u_int16_t type,
    u_int32_t peerid, pid_t pid, int fd, void *data, u_int16_t datalen)
d231 5
a235 57
	int     ret;

	if ((ret = imsg_compose(&iev->ibuf, type, peerid,
	    pid, fd, data, datalen)) != -1)
		imsg_event_add(iev);
	return (ret);
}

int
imsg_event_handle(struct imsgev *iev, short event)
{
	ssize_t			 n = 0;

	if ((event & ~(EV_READ | EV_WRITE)) != 0)
		fatalx("unknown event");

	if (event & EV_READ) {
		if ((n = imsg_read(&iev->ibuf)) == -1)
			fatal("imsg_read error");
		if (n == 0) {
			/* this pipe is dead, so remove the event handler */
			event_del(&iev->ev);
			event_loopexit(NULL);
			return -1;
		}
	}

	if (event & EV_WRITE) {
		if (msgbuf_write(&iev->ibuf.w) == -1)
			fatal("msgbuf_write");
		imsg_event_add(iev);
	}

	return (n == 0) ? 1 : 0;
}

void
ldapd_dispatch_ldape(int fd, short event, void *ptr)
{
	struct imsgev		*iev = ptr;
	struct imsgbuf		*ibuf;
	struct imsg		 imsg;
	ssize_t			 n;

	if (imsg_event_handle(iev, event) != 0)
		return;

	ibuf = &iev->ibuf;
	for (;;) {
		if ((n = imsg_get(ibuf, &imsg)) == -1)
			fatal("ldapd_dispatch_ldape: imsg_read error");
		if (n == 0)
			break;

		log_debug("ldapd_dispatch_ldape: imsg type %u", imsg.hdr.type);

		switch (imsg.hdr.type) {
d237 1
a237 1
			ldapd_auth_request(iev, &imsg);
d240 1
a240 1
			ldapd_log_verbose(&imsg);
d243 1
a243 1
			ldapd_open_request(iev, &imsg);
d246 2
a247 2
			log_debug("ldapd_dispatch_ldape: unexpected imsg %d",
			    imsg.hdr.type);
d250 9
a258 1
		imsg_free(&imsg);
a259 1
	imsg_event_add(iev);
d280 1
a280 1
	imsg_compose_event(iev, IMSG_LDAPD_AUTH_RESULT, 0, 0, -1, &ares,
d292 1
a292 1
	memcpy(&verbose, imsg->data, sizeof(verbose));
d323 1
a323 1
	imsg_compose_event(iev, IMSG_LDAPD_OPEN_RESULT, 0, 0, fd, oreq,
@


1.4
log
@Implement support in the parent to (re-)open database files on behalf of
the unprivileged child over imsg. Part of a larger change that will fix
database compaction.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.3 2010/06/15 14:43:56 martinh Exp $ */
a162 1
	argv += optind;
@


1.3
log
@EV_READ and EV_WRITE are not mutually exclusive, so check if we get both in
the same event.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.2 2010/05/31 18:29:04 martinh Exp $ */
d39 7
a45 4
void			 usage(void);
void			 ldapd_sig_handler(int fd, short why, void *data);
void			 ldapd_sigchld_handler(int sig, short why, void *data);
void			 ldapd_dispatch_ldape(int fd, short event, void *ptr);
a290 1
	int			 verbose;
d305 2
a306 13
		case IMSG_LDAPD_AUTH: {
			struct auth_req		*areq = imsg.data;
			struct auth_res		 ares;

			log_debug("authenticating [%s]", areq->name);
			ares.ok = auth_userokay(areq->name, NULL, "auth-ldap",
			    areq->password);
			ares.fd = areq->fd;
			ares.msgid = areq->msgid;
			bzero(areq, sizeof(*areq));
			imsg_compose(ibuf, IMSG_LDAPD_AUTH_RESULT, 0, 0, -1,
			    &ares, sizeof(ares));
			imsg_event_add(iev);
a307 1
		}
d309 4
a312 2
			memcpy(&verbose, imsg.data, sizeof(verbose));
			log_verbose(verbose);
d322 65
@


1.2
log
@Remove trailing whitespace and spaces before tabs.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ldapd.c,v 1.1 2010/05/31 17:36:31 martinh Exp $ */
d256 1
a256 1
	ssize_t			 n;
d258 4
a261 2
	switch (event) {
	case EV_READ:
d270 3
a272 2
		break;
	case EV_WRITE:
a275 3
		return 1;
	default:
		fatalx("unknown event");
d278 1
a278 1
	return 0;
@


1.1
log
@Initial import of ldapd, a small LDAP daemon. Work in progress.

ok deraadt@@ jacekm@@ gilles@@ back@@ henning@@ blambert@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d232 1
a232 1
	if (iev->ibuf.w.queued) 
@

