head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.6
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.18
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.16
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.12
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.10
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.8
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2017.01.20.11.55.08;	author benno;	state Exp;
branches;
next	1.3;
commitid	amLxRcKegr7GUlIs;

1.3
date	2014.09.21.05.33.49;	author daniel;	state Exp;
branches;
next	1.2;
commitid	81b4WjsvoGmBy7gS;

1.2
date	2010.11.03.10.33.17;	author martinh;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.31.17.36.31;	author martinh;	state Exp;
branches;
next	;


desc
@@


1.4
log
@work on making log.c similar in all daemons:

move daemon-local functions into new logmsg.c, and reduce
the (mostly whitespace) differences so that log.c's can be diffed easily.

ok krw@@ jmatthew@@
@
text
@/*	$OpenBSD: filter.c,v 1.3 2014/09/21 05:33:49 daniel Exp $ */

/*
 * Copyright (c) 2009, 2010 Martin Hedenfalk <martinh@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/queue.h>
#include <sys/types.h>

#include <string.h>
#include <stdint.h>

#include "ldapd.h"
#include "log.h"

static int	 ldap_filt_eq(struct ber_element *root, struct plan *plan);
static int	 ldap_filt_subs(struct ber_element *root, struct plan *plan);
static int	 ldap_filt_and(struct ber_element *root, struct plan *plan);
static int	 ldap_filt_or(struct ber_element *root, struct plan *plan);
static int	 ldap_filt_not(struct ber_element *root, struct plan *plan);

static int
ldap_filt_eq(struct ber_element *root, struct plan *plan)
{
	char			*vs;
	struct ber_element	*a, *vals, *v;

	if (plan->adesc != NULL)
		a = ldap_get_attribute(root, plan->adesc);
	else
		a = ldap_find_attribute(root, plan->at);
	if (a == NULL) {
		log_debug("no attribute [%s] found", plan->adesc ? plan->adesc : ATTR_NAME(plan->at));
		return -1;
	}

	vals = a->be_next;
	if (vals == NULL)
		return -1;

	for (v = vals->be_sub; v; v = v->be_next) {
		if (ber_get_string(v, &vs) != 0)
			continue;
		if (strcasecmp(plan->assert.value, vs) == 0)
			return 0;
	}

	return -1;
}

static int
ldap_filt_subs_value(struct ber_element *v, struct ber_element *sub)
{
	int		 class;
	unsigned long	 type;
	const char	*cmpval;
	char		*vs, *p, *end;

	if (ber_get_string(v, &vs) != 0)
		return -1;

	for (; sub; sub = sub->be_next) {
		if (ber_scanf_elements(sub, "ts", &class, &type, &cmpval) != 0)
			return -1;

		if (class != BER_CLASS_CONTEXT)
			return -1;

		switch (type) {
		case LDAP_FILT_SUBS_INIT:
			if (strncasecmp(cmpval, vs, strlen(cmpval)) == 0)
				vs += strlen(cmpval);
			else
				return 1; /* no match */
			break;
		case LDAP_FILT_SUBS_ANY:
			if ((p = strcasestr(vs, cmpval)) != NULL)
				vs = p + strlen(cmpval);
			else
				return 1; /* no match */
			break;
		case LDAP_FILT_SUBS_FIN:
			if (strlen(vs) < strlen(cmpval))
				return 1; /* no match */
			end = vs + strlen(vs) - strlen(cmpval);
			if (strcasecmp(end, cmpval) == 0)
				vs = end + strlen(cmpval);
			else
				return 1; /* no match */
			break;
		default:
			log_warnx("invalid subfilter type %d", type);
			return -1;
		}
	}

	return 0; /* match */
}

static int
ldap_filt_subs(struct ber_element *root, struct plan *plan)
{
	const char		*attr;
	struct ber_element	*a, *v;

	if (plan->adesc != NULL)
		a = ldap_get_attribute(root, plan->adesc);
	else
		a = ldap_find_attribute(root, plan->at);
	if (a == NULL) {
		log_debug("no attribute [%s] found", plan->adesc ? plan->adesc : ATTR_NAME(plan->at));
		return -1;
	}

	if (ber_scanf_elements(a, "s(e", &attr, &v) != 0)
		return -1; /* internal failure, false or undefined? */

	/* Loop through all values, stop if any matches.
	 */
	for (; v; v = v->be_next) {
		/* All substrings must match. */
		switch (ldap_filt_subs_value(v, plan->assert.substring)) {
		case 0:
			return 0;
		case -1:
			return -1;
		default:
			break;
		}
	}

	/* All values checked, no match. */
	return -1;
}

static int
ldap_filt_and(struct ber_element *root, struct plan *plan)
{
	struct plan	*arg;

	TAILQ_FOREACH(arg, &plan->args, next)
		if (ldap_matches_filter(root, arg) != 0)
			return -1;

	return 0;
}

static int
ldap_filt_or(struct ber_element *root, struct plan *plan)
{
	struct plan	*arg;

	TAILQ_FOREACH(arg, &plan->args, next)
		if (ldap_matches_filter(root, arg) == 0)
			return 0;

	return -1;
}

static int
ldap_filt_not(struct ber_element *root, struct plan *plan)
{
	struct plan	*arg;

	TAILQ_FOREACH(arg, &plan->args, next)
		if (ldap_matches_filter(root, arg) != 0)
			return 0;

	return -1;
}

static int
ldap_filt_presence(struct ber_element *root, struct plan *plan)
{
	struct ber_element	*a;

	if (plan->adesc != NULL)
		a = ldap_get_attribute(root, plan->adesc);
	else
		a = ldap_find_attribute(root, plan->at);
	if (a == NULL) {
		log_debug("no attribute [%s] found", plan->adesc ? plan->adesc : ATTR_NAME(plan->at));
		return -1;
	}

	return 0;
}

int
ldap_matches_filter(struct ber_element *root, struct plan *plan)
{
	if (plan == NULL)
		return 0;

	switch (plan->op) {
	case LDAP_FILT_EQ:
	case LDAP_FILT_APPR:
		return ldap_filt_eq(root, plan);
	case LDAP_FILT_SUBS:
		return ldap_filt_subs(root, plan);
	case LDAP_FILT_AND:
		return ldap_filt_and(root, plan);
	case LDAP_FILT_OR:
		return ldap_filt_or(root, plan);
	case LDAP_FILT_NOT:
		return ldap_filt_not(root, plan);
	case LDAP_FILT_PRES:
		return ldap_filt_presence(root, plan);
	default:
		log_warnx("filter type %d not implemented", plan->op);
		return -1;
	}
}

@


1.3
log
@eliminate the use of a gcc C extension (conditionals with omitted
operands).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.2 2010/11/03 10:33:17 martinh Exp $ */
d26 1
@


1.2
log
@Evaluate filters according to the three-valued logic of X.511, as required
by RFC 4511. A filter term can now be evaluated as undefined if the
attribute description is not recognized, the attribute type doesn't define
the appropriate matching rule, or the filtering is not implemented.

This also implements the NOT filter in the query planner.
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.1 2010/05/31 17:36:31 martinh Exp $ */
d44 1
a44 1
		log_debug("no attribute [%s] found", plan->adesc ?: ATTR_NAME(plan->at));
d122 1
a122 1
		log_debug("no attribute [%s] found", plan->adesc ?: ATTR_NAME(plan->at));
d193 1
a193 1
		log_debug("no attribute [%s] found", plan->adesc ?: ATTR_NAME(plan->at));
@


1.1
log
@Initial import of ldapd, a small LDAP daemon. Work in progress.

ok deraadt@@ jacekm@@ gilles@@ back@@ henning@@ blambert@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d4 1
a4 1
 * Copyright (c) 2009 Martin Hedenfalk <martin@@bzero.se>
d27 5
a31 10
static int		 ldap_filt_eq(struct ber_element *root,
				struct ber_element *filter);
static int		 ldap_filt_subs(struct ber_element *root,
				struct ber_element *filter);
static int		 ldap_filt_and(struct ber_element *root,
				struct ber_element *filter);
static int		 ldap_filt_or(struct ber_element *root,
				struct ber_element *filter);
static int		 ldap_filt_not(struct ber_element *root,
				struct ber_element *filter);
d34 1
a34 1
ldap_filt_eq(struct ber_element *root, struct ber_element *filter)
d36 1
a36 1
	const char		*key, *cmp;
d39 4
a42 4
	if (ber_scanf_elements(filter, "{ss", &key, &cmp) != 0)
		return -1;

	a = ldap_get_attribute(root, key);
d44 1
a44 1
		log_debug("no attribute [%s] found", key);
a52 1
		char *vs;
d55 1
a55 1
		if (strcasecmp(cmp, vs) == 0)
d112 1
a112 1
ldap_filt_subs(struct ber_element *root, struct ber_element *filter)
d114 2
a115 2
	const char		*key, *attr;
	struct ber_element	*sub, *a, *v;
d117 6
a122 1
	if (ber_scanf_elements(filter, "{s{e", &key, &sub) != 0)
d124 1
a124 4

	a = ldap_get_attribute(root, key);
	if (a == NULL)
		return -1; /* attribute not found, false or undefined? */
d133 1
a133 1
		switch (ldap_filt_subs_value(v, sub)) {
d148 1
a148 1
ldap_filt_and(struct ber_element *root, struct ber_element *filter)
d150 1
a150 4
	struct ber_element	*elm;

	if (ber_scanf_elements(filter, "{e", &elm) != 0)
		return -1;
d152 2
a153 2
	for (; elm; elm = elm->be_next) {
		if (ldap_matches_filter(root, elm) != 0)
a154 1
	}
d160 1
a160 1
ldap_filt_or(struct ber_element *root, struct ber_element *filter)
d162 1
a162 6
	struct ber_element	*elm;

	if (ber_scanf_elements(filter, "{e", &elm) != 0) {
		log_warnx("failed to parse search filter");
		return -1;
	}
d164 2
a165 2
	for (; elm; elm = elm->be_next) {
		if (ldap_matches_filter(root, elm) == 0)
a166 1
	}
d172 1
a172 1
ldap_filt_not(struct ber_element *root, struct ber_element *filter)
d174 1
a174 1
	struct ber_element	*elm;
d176 2
a177 7
	if (ber_scanf_elements(filter, "{e", &elm) != 0) {
		log_warnx("failed to parse search filter");
		return -1;
	}

	for (; elm; elm = elm->be_next) {
		if (ldap_matches_filter(root, elm) != 0)
a178 1
	}
d184 1
a184 1
ldap_filt_presence(struct ber_element *root, struct ber_element *filter)
a185 1
	const char		*key;
d188 6
a193 2
	if (ber_scanf_elements(filter, "s", &key) != 0) {
		log_warnx("failed to parse presence filter");
a196 6
	a = ldap_get_attribute(root, key);
	if (a == NULL) {
		log_debug("attribute %s not found", key);
		return -1; /* attribute not found */
	}

d201 1
a201 1
ldap_matches_filter(struct ber_element *root, struct ber_element *filter)
d203 1
a203 1
	if (filter == NULL)
d206 1
a206 6
	if (filter->be_class != BER_CLASS_CONTEXT) {
		log_warnx("invalid class %d in filter", filter->be_class);
		return -1;
	}

	switch (filter->be_type) {
d209 1
a209 1
		return ldap_filt_eq(root, filter);
d211 1
a211 1
		return ldap_filt_subs(root, filter);
d213 1
a213 1
		return ldap_filt_and(root, filter);
d215 1
a215 1
		return ldap_filt_or(root, filter);
d217 1
a217 1
		return ldap_filt_not(root, filter);
d219 1
a219 1
		return ldap_filt_presence(root, filter);
d221 1
a221 1
		log_warnx("filter type %d not implemented", filter->be_type);
@

