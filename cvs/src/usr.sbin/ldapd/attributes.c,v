head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.2
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.3.0.24
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.20
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.22
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.14
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.18
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.16
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.12
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.10
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.8
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2017.02.11.20.40.03;	author guenther;	state Exp;
branches;
next	1.4;
commitid	QYGklk7n5R3aVoPB;

1.4
date	2017.01.20.11.55.08;	author benno;	state Exp;
branches;
next	1.3;
commitid	amLxRcKegr7GUlIs;

1.3
date	2010.10.19.09.34.41;	author martinh;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.13.12.54.51;	author martinh;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.31.17.36.31;	author martinh;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Correct handling of requests to delete individual attribute values.

reported by ZHANG Huangbin (zhb (at) iredmail.org)
fix by Robert Klein (roklein (at) roklein.de)
@
text
@/*	$OpenBSD: attributes.c,v 1.4 2017/01/20 11:55:08 benno Exp $ */

/*
 * Copyright (c) 2009 Martin Hedenfalk <martin@@bzero.se>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/queue.h>
#include <sys/types.h>

#include <assert.h>
#include <string.h>
#include <time.h>

#include "ldapd.h"
#include "log.h"

struct ber_element *
ldap_get_attribute(struct ber_element *entry, const char *attr)
{
	char			*s;
	struct ber_element	*elm, *a;

	assert(entry);
	assert(attr);
	if (entry->be_encoding != BER_TYPE_SEQUENCE)
		return NULL;

	for (elm = entry->be_sub; elm != NULL; elm = elm->be_next) {
		a = elm->be_sub;
		if (a && ber_get_string(a, &s) == 0 && strcasecmp(s, attr) == 0)
			return a;
	}

	return NULL;
}

struct ber_element *
ldap_find_attribute(struct ber_element *entry, struct attr_type *at)
{
	struct ber_element	*elm = NULL;
	struct name		*an;

	SLIST_FOREACH(an, at->names, next) {
		if ((elm = ldap_get_attribute(entry, an->name)) != NULL)
			return elm;
	}
	if (an == NULL)
		elm = ldap_get_attribute(entry, at->oid);

	return elm;
}

struct ber_element *
ldap_find_value(struct ber_element *elm, const char *value)
{
	char			*s;
	struct ber_element	*a;

	if (elm == NULL)
		return NULL;

	for (a = elm->be_sub; a != NULL; a = a->be_next) {
		if (ber_get_string(a, &s) == 0 && strcasecmp(s, value) == 0)
			return a;
	}

	return NULL;
}

struct ber_element *
ldap_add_attribute(struct ber_element *entry, const char *attr,
	struct ber_element *value_set)
{
	struct ber_element	*elm, *a, *last;

	assert(entry);
	assert(attr);
	assert(value_set);

	if (entry->be_encoding != BER_TYPE_SEQUENCE) {
		log_warnx("entries should be a sequence");
		return NULL;
	}

	if (value_set->be_type != BER_TYPE_SET) {
		log_warnx("values should be a set");
		return NULL;
	}

	last = entry->be_sub;
	if (last == NULL)
		last = entry;
	else while (last != NULL && last->be_next != NULL)
		last = last->be_next;

	if ((elm = ber_add_sequence(last)) == NULL)
		return NULL;
	if ((a = ber_add_string(elm, attr)) == NULL) {
		ber_free_elements(elm);
		return NULL;
	}
	ber_link_elements(a, value_set);

	return elm;
}

int
ldap_set_values(struct ber_element *elm, struct ber_element *vals)
{
	char			*attr;
	struct ber_element	*old_vals;

	assert(elm);
	assert(vals);
	assert(vals->be_sub);

	if (ber_scanf_elements(elm, "se(", &attr, &old_vals) != 0) {
		log_warnx("failed to parse element");
		return -1;
	}

	ber_free_elements(old_vals->be_sub);
	old_vals->be_sub = NULL;
	ber_link_elements(old_vals, vals->be_sub);

	vals->be_sub = NULL;
	ber_free_elements(vals);

	return 0;
}

int
ldap_merge_values(struct ber_element *elm, struct ber_element *vals)
{
	char			*attr;
	struct ber_element	*old_vals, *last;

	assert(elm);
	assert(vals);
	assert(vals->be_type == BER_TYPE_SET);
	assert(vals->be_sub);

	if (ber_scanf_elements(elm, "se(", &attr, &old_vals) != 0) {
		log_warnx("failed to parse element");
		return -1;
	}

	last = old_vals->be_sub;
	while (last && last->be_next)
		last = last->be_next;

	ber_link_elements(last, vals->be_sub);

	vals->be_sub = NULL;
	ber_free_elements(vals);

	return 0;
}


int
ldap_del_attribute(struct ber_element *entry, const char *attrdesc)
{
	struct ber_element	*attr, *prev = NULL;
	char			*s;

	assert(entry);
	assert(attrdesc);

	attr = entry->be_sub;
	while (attr) {
		if (ber_scanf_elements(attr, "{s(", &s) != 0) {
			log_warnx("failed to parse attribute");
			return -1;
		}

		if (strcasecmp(s, attrdesc) == 0) {
			if (prev == NULL)
				entry->be_sub = attr->be_next;
			else
				prev->be_next = attr->be_next;
			attr->be_next = NULL;
			ber_free_elements(attr);
			break;
		}

		prev = attr;
		attr = attr->be_next;
	}

	return 0;
}

int
ldap_del_values(struct ber_element *elm, struct ber_element *vals)
{
	char			*attr;
	struct ber_element	*old_vals, *v, *x, *prev, *next;
	struct ber_element	*removed;
	int			removed_p;
	assert(elm);
	assert(vals);
	assert(vals->be_sub);

	if (ber_scanf_elements(elm, "se(", &attr, &old_vals) != 0) {
		log_warnx("failed to parse element");
		return -1;
	}

	prev = old_vals;
	removed_p = 0;
	for (v = old_vals->be_sub; v; v = next) {
		next = v->be_next;

		for (x = vals->be_sub; x; x = x->be_next) {
			if (x && v->be_len == x->be_len &&
			    memcmp(v->be_val, x->be_val, x->be_len) == 0) {
				removed = ber_unlink_elements(prev);
				ber_link_elements(prev, removed->be_next);
				ber_free_element(removed);
				removed_p = 1;
				break;
			}
		}
		if (removed_p) {
			removed_p = 0;
		} else {
			prev = v;
		}
	}

	return 0;
}

char *
ldap_strftime(time_t tm)
{
	static char	 tmbuf[16];
	struct tm	*gmt = gmtime(&tm);

	strftime(tmbuf, sizeof(tmbuf), "%Y%m%d%H%M%SZ", gmt);
	return tmbuf;
}

char *
ldap_now(void)
{
	return ldap_strftime(time(0));
}

@


1.4
log
@work on making log.c similar in all daemons:

move daemon-local functions into new logmsg.c, and reduce
the (mostly whitespace) differences so that log.c's can be diffed easily.

ok krw@@ jmatthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: attributes.c,v 1.3 2010/10/19 09:34:41 martinh Exp $ */
d210 1
a210 1
	struct ber_element	*old_vals, *v, *x, *vk, *xk, *prev;
d212 1
a212 1

d223 4
a226 2
	for (v = old_vals->be_sub; v; v = v->be_next) {
		vk = v->be_sub;
d228 2
a229 3
			xk = x->be_sub;
			if (xk && vk->be_len == xk->be_len &&
			    memcmp(vk->be_val, xk->be_val, xk->be_len) == 0) {
d232 2
a233 1
				ber_free_elements(removed);
d237 5
a241 1
		prev = v;
@


1.3
log
@Fix a segmentation fault when adding an attribute to an empty entry.
@
text
@d1 1
a1 1
/*	$OpenBSD: attributes.c,v 1.2 2010/07/13 12:54:51 martinh Exp $ */
d27 1
@


1.2
log
@Avoid double free in ldap modify requests. The values received in the
modify request is linked into the stored ber structure, and then both are
freed. Fix this by unlinking the values from the request.
@
text
@d1 1
a1 1
/*	$OpenBSD: attributes.c,v 1.1 2010/05/31 17:36:31 martinh Exp $ */
d102 3
a104 1
	while (last && last->be_next != NULL)
@


1.1
log
@Initial import of ldapd, a small LDAP daemon. Work in progress.

ok deraadt@@ jacekm@@ gilles@@ back@@ henning@@ blambert@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d135 3
d162 3
@

