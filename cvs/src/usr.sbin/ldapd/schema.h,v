head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.28
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.24
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.20
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.22
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.14
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.18
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.16
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.12
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.10
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.8
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.6
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4;
locks; strict;
comment	@ * @;


1.7
date	2010.11.04.15.35.00;	author martinh;	state Exp;
branches;
next	1.6;

1.6
date	2010.11.03.14.17.01;	author martinh;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.03.09.39.17;	author martinh;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.02.05.23.40;	author martinh;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.01.18.37.12;	author martinh;	state Exp;
branches;
next	1.2;

1.2
date	2010.06.30.04.17.04;	author martinh;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.29.02.45.46;	author martinh;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Publish matching rules in the cn=schema subentry as the matchingRules
attribute. This is an operational attribute and only returned if explicitly
asked for. Required by RFC 4517.
@
text
@/*	$OpenBSD: schema.h,v 1.6 2010/11/03 14:17:01 martinh Exp $ */

/*
 * Copyright (c) 2010 Martin Hedenfalk <martinh@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _schema_h_
#define _schema_h_

#define OBJ_NAME(obj)	 ((obj)->names ? SLIST_FIRST((obj)->names)->name : \
				(obj)->oid)
#define ATTR_NAME(at)	 OBJ_NAME(at)

enum usage {
	USAGE_USER_APP,
	USAGE_DIR_OP,		/* operational attribute */
	USAGE_DIST_OP,		/* operational attribute */
	USAGE_DSA_OP		/* operational attribute */
};

enum match_rule_type {
	MATCH_EQUALITY,
	MATCH_ORDERING,
	MATCH_SUBSTR,
};

struct name {
	SLIST_ENTRY(name)	 next;
	char			*name;
};
SLIST_HEAD(name_list, name);

struct schema;
struct syntax {
	char			*oid;
	char			*desc;
	int			(*is_valid)(struct schema *schema, char *value,
					size_t len);
};

struct match_rule
{
	char			*oid;
	char			*name;
	enum match_rule_type	 type;
	int			(*prepare)(char *value, size_t len);
	const char		*syntax_oid;
	const char		**alt_syntax_oids;
};

struct attr_type {
	RB_ENTRY(attr_type)	 link;
	char			*oid;
	struct name_list	*names;
	char			*desc;
	int			 obsolete;
	struct attr_type	*sup;
	const struct match_rule	*equality;
	const struct match_rule	*ordering;
	const struct match_rule	*substr;
	const struct syntax	*syntax;
	int			 single;
	int			 collective;
	int			 immutable;	/* no-user-modification */
	enum usage		 usage;
};
RB_HEAD(attr_type_tree, attr_type);
RB_PROTOTYPE(attr_type_tree, attr_type, link, attr_oid_cmp);

struct attr_ptr {
	SLIST_ENTRY(attr_ptr)	 next;
	struct attr_type	*attr_type;
};
SLIST_HEAD(attr_list, attr_ptr);

enum object_kind {
	KIND_ABSTRACT,
	KIND_STRUCTURAL,
	KIND_AUXILIARY
};

struct object;
struct obj_ptr {
	SLIST_ENTRY(obj_ptr)	 next;
	struct object		*object;
};
SLIST_HEAD(obj_list, obj_ptr);

struct object {
	RB_ENTRY(object)	 link;
	char			*oid;
	struct name_list	*names;
	char			*desc;
	int			 obsolete;
	struct obj_list		*sup;
	enum object_kind	 kind;
	struct attr_list	*must;
	struct attr_list	*may;
};
RB_HEAD(object_tree, object);
RB_PROTOTYPE(object_tree, object, link, obj_oid_cmp);

struct oidname {
	RB_ENTRY(oidname)	 link;
	const char		*on_name;
#define	on_attr_type		 on_ptr.ou_attr_type
#define	on_object		 on_ptr.ou_object
	union	{
		struct attr_type	*ou_attr_type;
		struct object		*ou_object;
	} on_ptr;
};
RB_HEAD(oidname_tree, oidname);
RB_PROTOTYPE(oidname_tree, oidname, link, oidname_cmp);

struct symoid {
	RB_ENTRY(symoid)	 link;
	char			*name;		/* symbolic name */
	char			*oid;
};
RB_HEAD(symoid_tree, symoid);
RB_PROTOTYPE(symoid_tree, symoid, link, symoid_cmp);

#define SCHEMA_MAXPUSHBACK	128

struct schema
{
	struct attr_type_tree	 attr_types;
	struct oidname_tree	 attr_names;
	struct object_tree	 objects;
	struct oidname_tree	 object_names;
	struct symoid_tree	 symbolic_oids;

	FILE			*fp;
	const char		*filename;
	char			 pushback_buffer[SCHEMA_MAXPUSHBACK];
	int			 pushback_index;
	int			 lineno;
	int			 error;
};

struct schema		*schema_new(void);
int			 schema_parse(struct schema *schema,
			    const char *filename);
int			 schema_dump_object(struct object *obj,
			    char *buf, size_t size);
int			 schema_dump_attribute(struct attr_type *obj,
			    char *buf, size_t size);
int			 schema_dump_match_rule(struct match_rule *mr,
			    char *buf, size_t size);

struct attr_type	*lookup_attribute_by_oid(struct schema *schema, char *oid);
struct attr_type	*lookup_attribute_by_name(struct schema *schema, char *name);
struct attr_type	*lookup_attribute(struct schema *schema, char *oid_or_name);
struct object		*lookup_object_by_oid(struct schema *schema, char *oid);
struct object		*lookup_object_by_name(struct schema *schema, char *name);
struct object		*lookup_object(struct schema *schema, char *oid_or_name);
char			*lookup_symbolic_oid(struct schema *schema, char *name);
int			 is_oidstr(const char *oidstr);

/* syntax.c */
const struct syntax	*syntax_lookup(const char *oid);

/* matching.c */
extern struct match_rule match_rules[];
extern int num_match_rules;
const struct match_rule *match_rule_lookup(const char *oid);

#endif

@


1.6
log
@Validate matching rules against attribute syntaxes. All matching rules from
RFC 4517 are recognized, except the optional wordMatch and keywordMatch.

Requires a current core.schema file.
@
text
@d1 1
a1 1
/*	$OpenBSD: schema.h,v 1.5 2010/09/03 09:39:17 martinh Exp $ */
d161 2
d177 2
@


1.5
log
@Implement attribute syntaxes from RFC4517. This adds validation to the most
common attribute types. Specialized attribute types like Delivery Method or
Teletex Terminal Identifier are recognized for completeness, but not
validated.
@
text
@d1 1
a1 1
/*	$OpenBSD: schema.h,v 1.4 2010/07/02 05:23:40 martinh Exp $ */
d33 6
d53 10
d70 3
a72 3
	char			*equality;
	char			*ordering;
	char			*substr;
d173 3
@


1.4
log
@Dump parsed schema to buffer and send in requests for the cn=schema
subschema namespace. Only do this if 'objectClasses' and 'attributeTypes'
are expicitly requested. This allows clients to for example present custom
editing forms.
@
text
@d1 1
a1 1
/*	$OpenBSD: schema.h,v 1.3 2010/07/01 18:37:12 martinh Exp $ */
d39 8
d57 1
a57 1
	char			*syntax;
d152 1
d154 3
@


1.3
log
@Parse (and ignore) schema extensions with an X- prefix. Bail on unknown keywords.
@
text
@d1 1
a1 1
/*	$OpenBSD: schema.h,v 1.2 2010/06/30 04:17:04 martinh Exp $ */
d120 1
a120 1
	struct symoid_tree		 symbolic_oids;
d133 4
@


1.2
log
@Move OBJ_NAME and ATTR_NAME macros to schema.h so it's reachable from
schema parser. Also fix a typo.
@
text
@d1 1
a1 1
/*	$OpenBSD: schema.h,v 1.1 2010/06/29 02:45:46 martinh Exp $ */
d35 1
a35 1
	const char		*name;
@


1.1
log
@Rewrite the schema parser, as it's not a context-free grammar.
This also brings the config parser more in line with other parse.y in the
tree. The new schema parser also supports symbolic OID names.

You need to update your /etc/ldapd.conf. Schema files are no longer
included with the 'include' keyword, you have to use 'schema' for that.

Moves schema-related structures to a separate include file to ease reuse.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d21 4
@

