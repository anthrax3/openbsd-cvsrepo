head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.14.0.20
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.18
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.14
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.12
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.10
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.8
	OPENBSD_5_0:1.14.0.6
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.4
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.2
	OPENBSD_4_8_BASE:1.14;
locks; strict;
comment	@ * @;


1.19
date	2017.02.11.20.40.03;	author guenther;	state Exp;
branches;
next	1.18;
commitid	QYGklk7n5R3aVoPB;

1.18
date	2017.01.20.11.55.08;	author benno;	state Exp;
branches;
next	1.17;
commitid	amLxRcKegr7GUlIs;

1.17
date	2015.12.24.17.47.57;	author mmcc;	state Exp;
branches;
next	1.16;
commitid	ZJPTqgdVcu8wUk8G;

1.16
date	2015.02.11.04.04.30;	author pelikan;	state Exp;
branches;
next	1.15;
commitid	vv3P8WdGXrpxuR3F;

1.15
date	2014.09.21.05.33.49;	author daniel;	state Exp;
branches;
next	1.14;
commitid	81b4WjsvoGmBy7gS;

1.14
date	2010.07.28.10.06.19;	author martinh;	state Exp;
branches;
next	1.13;

1.13
date	2010.07.13.12.54.51;	author martinh;	state Exp;
branches;
next	1.12;

1.12
date	2010.07.06.20.02.33;	author martinh;	state Exp;
branches;
next	1.11;

1.11
date	2010.07.06.09.27.05;	author martinh;	state Exp;
branches;
next	1.10;

1.10
date	2010.07.05.14.27.06;	author martinh;	state Exp;
branches;
next	1.9;

1.9
date	2010.07.02.02.42.02;	author martinh;	state Exp;
branches;
next	1.8;

1.8
date	2010.07.02.01.44.45;	author martinh;	state Exp;
branches;
next	1.7;

1.7
date	2010.07.01.00.43.56;	author martinh;	state Exp;
branches;
next	1.6;

1.6
date	2010.06.29.21.54.38;	author martinh;	state Exp;
branches;
next	1.5;

1.5
date	2010.06.29.02.54.20;	author martinh;	state Exp;
branches;
next	1.4;

1.4
date	2010.06.29.02.45.46;	author martinh;	state Exp;
branches;
next	1.3;

1.3
date	2010.06.23.13.10.14;	author martinh;	state Exp;
branches;
next	1.2;

1.2
date	2010.06.15.15.47.56;	author martinh;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.31.17.36.31;	author martinh;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Correct handling of requests to delete individual attribute values.

reported by ZHANG Huangbin (zhb (at) iredmail.org)
fix by Robert Klein (roklein (at) roklein.de)
@
text
@/*	$OpenBSD: modify.c,v 1.18 2017/01/20 11:55:08 benno Exp $ */

/*
 * Copyright (c) 2009, 2010 Martin Hedenfalk <martin@@bzero.se>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>

#include <assert.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>

#include "ldapd.h"
#include "log.h"
#include "uuid.h"

int
ldap_delete(struct request *req)
{
	struct btval		 key;
	char			*dn;
	struct namespace	*ns;
	struct referrals	*refs;
	struct cursor		*cursor;
	int			 rc = LDAP_OTHER;

	++stats.req_mod;

	if (ber_scanf_elements(req->op, "s", &dn) != 0)
		return ldap_respond(req, LDAP_PROTOCOL_ERROR);

	normalize_dn(dn);
	log_debug("deleting entry %s", dn);

	if ((ns = namespace_for_base(dn)) == NULL) {
		refs = namespace_referrals(dn);
		if (refs == NULL)
			return ldap_respond(req, LDAP_NAMING_VIOLATION);
		else
			return ldap_refer(req, dn, NULL, refs);
	}

	if (!authorized(req->conn, ns, ACI_WRITE, dn, LDAP_SCOPE_BASE))
		return ldap_respond(req, LDAP_INSUFFICIENT_ACCESS);

	if (namespace_begin(ns) != 0) {
		if (errno == EBUSY) {
			if (namespace_queue_request(ns, req) != 0)
				return ldap_respond(req, LDAP_BUSY);
			return LDAP_BUSY;
		}
		return ldap_respond(req, LDAP_OTHER);
	}

	/* Check that this is a leaf node by getting a cursor to the DN
	 * we're about to delete. If there is a next entry with the DN
	 * as suffix (ie, a child node), the DN can't be deleted.
	 */
	if ((cursor = btree_txn_cursor_open(NULL, ns->data_txn)) == NULL)
		goto done;

	memset(&key, 0, sizeof(key));
	key.data = dn;
	key.size = strlen(dn);
	if (btree_cursor_get(cursor, &key, NULL, BT_CURSOR_EXACT) != 0) {
		if (errno == ENOENT)
			rc = LDAP_NO_SUCH_OBJECT;
		goto done;
	}

	btval_reset(&key);
	if (btree_cursor_get(cursor, &key, NULL, BT_NEXT) != 0) {
		if (errno != ENOENT)
			goto done;
	} else if (has_suffix(&key, dn)) {
		rc = LDAP_NOT_ALLOWED_ON_NONLEAF;
		goto done;
	}

	if (namespace_del(ns, dn) == 0 && namespace_commit(ns) == 0)
		rc = LDAP_SUCCESS;

done:
	btree_cursor_close(cursor);
	btval_reset(&key);
	namespace_abort(ns);
	return ldap_respond(req, rc);
}

int
ldap_add(struct request *req)
{
	char			 uuid_str[64];
	struct uuid		 uuid;
	char			*dn, *s;
	struct attr_type	*at;
	struct ber_element	*attrs, *attr, *elm, *set = NULL;
	struct namespace	*ns;
	struct referrals	*refs;
	int			 rc;

	++stats.req_mod;

	if (ber_scanf_elements(req->op, "{se", &dn, &attrs) != 0)
		return ldap_respond(req, LDAP_PROTOCOL_ERROR);

	normalize_dn(dn);
	log_debug("adding entry %s", dn);

	if (*dn == '\0')
		return ldap_respond(req, LDAP_INVALID_DN_SYNTAX);

	if ((ns = namespace_for_base(dn)) == NULL) {
		refs = namespace_referrals(dn);
		if (refs == NULL)
			return ldap_respond(req, LDAP_NAMING_VIOLATION);
		else
			return ldap_refer(req, dn, NULL, refs);
	}

	if (!authorized(req->conn, ns, ACI_WRITE, dn, LDAP_SCOPE_BASE) != 0)
		return ldap_respond(req, LDAP_INSUFFICIENT_ACCESS);

	/* Check that we're not adding immutable attributes.
	 */
	for (elm = attrs->be_sub; elm != NULL; elm = elm->be_next) {
		attr = elm->be_sub;
		if (attr == NULL || ber_get_string(attr, &s) != 0)
			return ldap_respond(req, LDAP_PROTOCOL_ERROR);
		if (!ns->relax) {
			at = lookup_attribute(conf->schema, s);
			if (at == NULL) {
				log_debug("unknown attribute type %s", s);
				return ldap_respond(req,
				    LDAP_NO_SUCH_ATTRIBUTE);
			}
			if (at->immutable) {
				log_debug("attempt to add immutable"
				    " attribute %s", s);
				return ldap_respond(req,
				    LDAP_CONSTRAINT_VIOLATION);
			}
		}
	}

	if (namespace_begin(ns) == -1) {
		if (errno == EBUSY) {
			if (namespace_queue_request(ns, req) != 0)
				return ldap_respond(req, LDAP_BUSY);
			return LDAP_BUSY;
		}
		return ldap_respond(req, LDAP_OTHER);
	}

	/* add operational attributes
	 */
	if ((set = ber_add_set(NULL)) == NULL)
		goto fail;
	if (ber_add_string(set, req->conn->binddn ? req->conn->binddn : "") == NULL)
		goto fail;
	if (ldap_add_attribute(attrs, "creatorsName", set) == NULL)
		goto fail;

	if ((set = ber_add_set(NULL)) == NULL)
		goto fail;
	if (ber_add_string(set, ldap_now()) == NULL)
		goto fail;
	if (ldap_add_attribute(attrs, "createTimestamp", set) == NULL)
		goto fail;

	uuid_create(&uuid);
	uuid_to_string(&uuid, uuid_str, sizeof(uuid_str));
	if ((set = ber_add_set(NULL)) == NULL)
		goto fail;
	if (ber_add_string(set, uuid_str) == NULL)
		goto fail;
	if (ldap_add_attribute(attrs, "entryUUID", set) == NULL)
		goto fail;

	if ((rc = validate_entry(dn, attrs, ns->relax)) != LDAP_SUCCESS ||
	    namespace_add(ns, dn, attrs) != 0) {
		namespace_abort(ns);
		if (rc == LDAP_SUCCESS && errno == EEXIST)
			rc = LDAP_ALREADY_EXISTS;
		else if (rc == LDAP_SUCCESS)
			rc = LDAP_OTHER;
	} else if (namespace_commit(ns) != 0)
		rc = LDAP_OTHER;

	return ldap_respond(req, rc);

fail:
	if (set != NULL)
		ber_free_elements(set);
	namespace_abort(ns);
	return ldap_respond(req, LDAP_OTHER);
}

int
ldap_modify(struct request *req)
{
	int			 rc = LDAP_OTHER;
	char			*dn;
	long long		 op;
	char			*attr;
	struct ber_element	*mods, *entry, *mod, *a, *set;
	struct ber_element	*vals = NULL, *prev = NULL;
	struct namespace	*ns;
	struct attr_type	*at;
	struct referrals	*refs;

	++stats.req_mod;

	if (ber_scanf_elements(req->op, "{se", &dn, &mods) != 0)
		return ldap_respond(req, LDAP_PROTOCOL_ERROR);

	normalize_dn(dn);
	log_debug("modifying dn %s", dn);

	if (*dn == 0)
		return ldap_respond(req, LDAP_INVALID_DN_SYNTAX);

	if ((ns = namespace_for_base(dn)) == NULL) {
		refs = namespace_referrals(dn);
		if (refs == NULL)
			return ldap_respond(req, LDAP_NAMING_VIOLATION);
		else
			return ldap_refer(req, dn, NULL, refs);
	}

	if (!authorized(req->conn, ns, ACI_WRITE, dn, LDAP_SCOPE_BASE) != 0)
		return ldap_respond(req, LDAP_INSUFFICIENT_ACCESS);

	if (namespace_begin(ns) == -1) {
		if (errno == EBUSY) {
			if (namespace_queue_request(ns, req) != 0)
				return ldap_respond(req, LDAP_BUSY);
			return LDAP_BUSY;
		}
		return ldap_respond(req, LDAP_OTHER);
	}

	if ((entry = namespace_get(ns, dn)) == NULL) {
		rc = LDAP_NO_SUCH_OBJECT;
		goto done;
	}

	for (mod = mods->be_sub; mod; mod = mod->be_next) {
		if (ber_scanf_elements(mod, "{E{ese(", &op, &prev, &attr, &vals) != 0) {
			rc = LDAP_PROTOCOL_ERROR;
			vals = NULL;
			goto done;
		}

		prev->be_next = NULL;

		if (!ns->relax) {
			at = lookup_attribute(conf->schema, attr);
			if (at == NULL) {
				log_debug("unknown attribute type %s", attr);
				rc = LDAP_NO_SUCH_ATTRIBUTE;
				goto done;
			}
			if (at->immutable) {
				log_debug("attempt to modify immutable"
				    " attribute %s", attr);
				rc = LDAP_CONSTRAINT_VIOLATION;
				goto done;
			}
		}

		a = ldap_get_attribute(entry, attr);

		switch (op) {
		case LDAP_MOD_ADD:
			if (a == NULL) {
				if (ldap_add_attribute(entry, attr, vals) != NULL)
					vals = NULL;
			} else {
				if (ldap_merge_values(a, vals) == 0)
					vals = NULL;
			}
			break;
		case LDAP_MOD_DELETE:
			/*
			 * We're already in the "SET OF value
			 * AttributeValue" (see RFC2411 section
			 * 4.1.7) have either EOC, so all values
			 * for the attribute gets deleted, or we
			 * have a (first) octetstring (there is one
			 * for each AttributeValue to be deleted)
			 */
			if (vals->be_sub &&
			    vals->be_sub->be_type == BER_TYPE_OCTETSTRING) {
				ldap_del_values(a, vals);
			} else {
				ldap_del_attribute(entry, attr);
			}
			break;
		case LDAP_MOD_REPLACE:
			if (vals->be_sub != NULL &&
			    vals->be_sub->be_type != BER_TYPE_EOC) {
				if (a == NULL) {
					if (ldap_add_attribute(entry, attr, vals) != NULL)
						vals = NULL;
				} else {
					if (ldap_set_values(a, vals) == 0)
						vals = NULL;
				}
			} else if (a != NULL)
				ldap_del_attribute(entry, attr);
			break;
		}

		if (vals != NULL) {
			ber_free_elements(vals);
			vals = NULL;
		}
	}

	if ((rc = validate_entry(dn, entry, ns->relax)) != LDAP_SUCCESS)
		goto done;

	set = ber_add_set(NULL);
	ber_add_string(set, req->conn->binddn ? req->conn->binddn : "");
	if ((a = ldap_get_attribute(entry, "modifiersName")) != NULL)
		ldap_set_values(a, set);
	else
		ldap_add_attribute(entry, "modifiersName", set);

	set = ber_add_set(NULL);
	ber_add_string(set, ldap_now());
	if ((a = ldap_get_attribute(entry, "modifyTimestamp")) != NULL)
		ldap_set_values(a, set);
	else
		ldap_add_attribute(entry, "modifyTimestamp", set);

	if (namespace_update(ns, dn, entry) == 0 && namespace_commit(ns) == 0)
		rc = LDAP_SUCCESS;
	else
		rc = LDAP_OTHER;

done:
	if (vals != NULL)
		ber_free_elements(vals);
	namespace_abort(ns);
	return ldap_respond(req, rc);
}

@


1.18
log
@work on making log.c similar in all daemons:

move daemon-local functions into new logmsg.c, and reduce
the (mostly whitespace) differences so that log.c's can be diffed easily.

ok krw@@ jmatthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: modify.c,v 1.17 2015/12/24 17:47:57 mmcc Exp $ */
d299 8
d308 1
a308 1
			    vals->be_sub->be_type == BER_TYPE_SET)
d310 1
a310 1
			else
d312 1
@


1.17
log
@bzero -> memset. No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: modify.c,v 1.16 2015/02/11 04:04:30 pelikan Exp $ */
d28 1
@


1.16
log
@initialize a variable in case "goto done" makes us compare it

found by clang, ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: modify.c,v 1.15 2014/09/21 05:33:49 daniel Exp $ */
d75 1
a75 1
	bzero(&key, sizeof(key));
@


1.15
log
@eliminate the use of a gcc C extension (conditionals with omitted
operands).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: modify.c,v 1.14 2010/07/28 10:06:19 martinh Exp $ */
d219 2
a220 1
	struct ber_element	*mods, *entry, *mod, *vals, *a, *set, *prev = NULL;
@


1.14
log
@Revert parts of previous change leading to assertion failure for
certain modify operations. Also fix logic error when replacing an attribute
with the empty set.
@
text
@d1 1
a1 1
/*	$OpenBSD: modify.c,v 1.13 2010/07/13 12:54:51 martinh Exp $ */
d172 1
a172 1
	if (ber_add_string(set, req->conn->binddn ?: "") == NULL)
d328 1
a328 1
	ber_add_string(set, req->conn->binddn ?: "");
@


1.13
log
@Avoid double free in ldap modify requests. The values received in the
modify request is linked into the stored ber structure, and then both are
freed. Fix this by unlinking the values from the request.
@
text
@d1 1
a1 1
/*	$OpenBSD: modify.c,v 1.12 2010/07/06 20:02:33 martinh Exp $ */
d261 1
a261 1
		if (ber_scanf_elements(mod, "{E{ese", &op, &prev, &attr, &vals) != 0) {
d292 1
a292 1
				if (ldap_merge_values(a, vals->be_sub) == 0)
d304 2
a305 1
			if (vals->be_sub != NULL) {
d310 1
a310 1
					if (ldap_set_values(a, vals->be_sub) == 0)
d313 1
a313 1
			} else if (a == NULL)
@


1.12
log
@Plug another memory leak. Forgot to reset key returned from cursor, having
a reference to a cached page.
@
text
@d1 1
a1 1
/*	$OpenBSD: modify.c,v 1.11 2010/07/06 09:27:05 martinh Exp $ */
d219 1
a219 1
	struct ber_element	*mods, *entry, *mod, *vals, *a, *set;
d261 1
a261 1
		if (ber_scanf_elements(mod, "{E{se", &op, &attr, &vals) != 0) {
d263 1
d267 2
d288 7
a294 4
			if (a == NULL)
				ldap_add_attribute(entry, attr, vals);
			else
				ldap_merge_values(a, vals);
d304 8
a311 5
			if (vals->be_sub) {
				if (a == NULL)
					ldap_add_attribute(entry, attr, vals);
				else
					ldap_set_values(a, vals);
d316 5
d346 2
@


1.11
log
@Check return code from commit. Incorrectly returned success when commit
failed due to disk full.
@
text
@d1 1
a1 1
/*	$OpenBSD: modify.c,v 1.10 2010/07/05 14:27:06 martinh Exp $ */
d84 1
d98 1
@


1.10
log
@Close cursor on delete. Fixes memory leak introduced by non-leaf delete
check.
@
text
@d1 1
a1 1
/*	$OpenBSD: modify.c,v 1.9 2010/07/02 02:42:02 martinh Exp $ */
d92 1
a92 2
	if (namespace_del(ns, dn) == 0) {
		namespace_commit(ns);
a93 1
	}
d213 1
a213 1
	int			 rc;
d324 1
a324 1
	if (namespace_update(ns, dn, entry) == 0)
d330 2
a331 8
	if (rc == LDAP_SUCCESS)
		namespace_commit(ns);
	else
		namespace_abort(ns);

	if (rc >= 0)
		ldap_respond(req, rc);
	return rc;
@


1.9
log
@Don't validate modification of immutable attributes if the namespace is
configured with relaxed schema checking.
@
text
@d1 1
a1 1
/*	$OpenBSD: modify.c,v 1.8 2010/07/02 01:44:45 martinh Exp $ */
d38 1
d73 1
a73 1
		goto fail;
d78 6
a83 2
	if (btree_cursor_get(cursor, &key, NULL, BT_CURSOR_EXACT) != 0)
		goto fail;
d86 1
a86 1
			goto fail;
d88 2
a89 2
		namespace_abort(ns);
		return ldap_respond(req, LDAP_NOT_ALLOWED_ON_NONLEAF);
d94 1
a94 1
		return ldap_respond(req, LDAP_SUCCESS);
d97 2
a98 1
fail:
d100 1
a100 3
	if (errno == ENOENT)
		return ldap_respond(req, LDAP_NO_SUCH_OBJECT);
	return ldap_respond(req, LDAP_OTHER);
@


1.8
log
@Disallow deleting non-leaf nodes.
@
text
@d1 1
a1 1
/*	$OpenBSD: modify.c,v 1.7 2010/07/01 00:43:56 martinh Exp $ */
d139 13
a151 8
		at = lookup_attribute(conf->schema, s);
		if (at == NULL) {
			log_debug("unknown attribute type %s", s);
			return ldap_respond(req, LDAP_NO_SUCH_ATTRIBUTE);
		}
		if (at->immutable) {
			log_debug("attempt to add immutable attribute %s", s);
			return ldap_respond(req, LDAP_CONSTRAINT_VIOLATION);
d262 13
a274 11
		if ((at = lookup_attribute(conf->schema, attr)) == NULL &&
		    !ns->relax) {
			log_debug("unknown attribute type %s", attr);
			rc = LDAP_NO_SUCH_ATTRIBUTE;
			goto done;
		}
		if (at != NULL && at->immutable) {
			log_debug("attempt to modify immutable attribute %s",
			    attr);
			rc = LDAP_CONSTRAINT_VIOLATION;
			goto done;
@


1.7
log
@Add checks that we're not adding immutable attributes, just as we're
disallowing modifying immutable attributes. Remove the check for modifying
operational attributes, as there's nothing that disallows that (except that
they're also often marked as immutable).

While here, check the return value from ber_add_* and ldap_add_attribute.
@
text
@d1 1
a1 1
/*	$OpenBSD: modify.c,v 1.6 2010/06/29 21:54:38 martinh Exp $ */
d33 1
d37 1
d67 20
a89 6
	} else {
		namespace_abort(ns);
		if (errno == ENOENT)
			return ldap_respond(req, LDAP_NO_SUCH_OBJECT);
		else
			return ldap_respond(req, LDAP_OTHER);
d91 6
@


1.6
log
@Add support for referrals. Referrals are configured in the config file,
either in the global context or in a namespace. The latter can be used to
delegate requests to different servers for specific parts of the DIT. The
former is a global catch-all referral.
@
text
@d1 1
a1 1
/*	$OpenBSD: modify.c,v 1.5 2010/06/29 02:54:20 martinh Exp $ */
d82 3
a84 2
	char			*dn;
	struct ber_element	*attrs, *set;
d111 17
d139 13
a151 7
	set = ber_add_set(NULL);
	ber_add_string(set, req->conn->binddn ?: "");
	ldap_add_attribute(attrs, "creatorsName", set);

	set = ber_add_set(NULL);
	ber_add_string(set, ldap_now());
	ldap_add_attribute(attrs, "createTimestamp", set);
d155 6
a160 3
	set = ber_add_set(NULL);
	ber_add_string(set, uuid_str);
	ldap_add_attribute(attrs, "entryUUID", set);
d173 6
d235 2
a236 1
		if ((at = lookup_attribute(conf->schema, attr)) == NULL && !ns->relax) {
a242 6
			    attr);
			rc = LDAP_CONSTRAINT_VIOLATION;
			goto done;
		}
		if (at != NULL && at->usage != USAGE_USER_APP) {
			log_debug("attempt to modify operational attribute %s",
@


1.5
log
@don't overwrite the return code from validate_entry
@
text
@d1 1
a1 1
/*	$OpenBSD: modify.c,v 1.4 2010/06/29 02:45:46 martinh Exp $ */
d35 1
d45 7
a51 2
	if ((ns = namespace_for_base(dn)) == NULL)
		return ldap_respond(req, LDAP_NAMING_VIOLATION);
d85 1
d99 7
a105 2
	if ((ns = namespace_for_base(dn)) == NULL)
		return ldap_respond(req, LDAP_NAMING_VIOLATION);
d158 1
d171 7
a177 2
	if ((ns = namespace_for_base(dn)) == NULL)
		return ldap_respond(req, LDAP_NAMING_VIOLATION);
@


1.4
log
@Rewrite the schema parser, as it's not a context-free grammar.
This also brings the config parser more in line with other parse.y in the
tree. The new schema parser also supports symbolic OID names.

You need to update your /etc/ldapd.conf. Schema files are no longer
included with the 'include' keyword, you have to use 'schema' for that.

Moves schema-related structures to a separate include file to ease reuse.
@
text
@d1 1
a1 1
/*	$OpenBSD: modify.c,v 1.3 2010/06/23 13:10:14 martinh Exp $ */
d128 1
a128 1
		else
@


1.3
log
@Set errno to appropriate values when returning failure in btree. Make btree
functions only return success or failure (-1 or NULL). Update callers to
check errno.
@
text
@d1 1
a1 1
/*	$OpenBSD: modify.c,v 1.2 2010/06/15 15:47:56 martinh Exp $ */
d142 1
a142 1
	const char		*attr;
d184 1
a184 1
		if ((at = lookup_attribute(attr)) == NULL && !ns->relax) {
@


1.2
log
@Make modify and simple auth requests open their own transactions, as search
already does. Trigger a reopen imsg request if either the data or index
databases are compacted. Queue the failed request and try again when the
file is reopened.

Compaction can now be done by a separate process, and ldapd will pick up
the change and reopen the file.
@
text
@d1 1
a1 1
/*	$OpenBSD: modify.c,v 1.1 2010/05/31 17:36:31 martinh Exp $ */
d23 1
a32 1
	int			 rc;
d50 6
a55 5
	if ((rc = namespace_begin(ns)) == BT_DEAD) {
		if (namespace_queue_request(ns, req) != 0)
			return ldap_respond(req, LDAP_BUSY);
		return LDAP_BUSY;
	} else if (rc != BT_SUCCESS)
d57 1
d59 9
a67 10
	switch (namespace_del(ns, dn)) {
	case BT_NOTFOUND:
		rc = LDAP_NO_SUCH_OBJECT;
		break;
	case BT_SUCCESS:
		rc = LDAP_SUCCESS;
		break;
	default:
		rc = LDAP_OTHER;
		break;
a68 5

	namespace_commit(ns);
	if (rc >= 0)
		ldap_respond(req, rc);
	return rc;
d98 6
a103 5
	if ((rc = namespace_begin(ns)) == BT_DEAD) {
		if (namespace_queue_request(ns, req) != 0)
			return ldap_respond(req, LDAP_BUSY);
		return LDAP_BUSY;
	} else if (rc != BT_SUCCESS)
d105 1
d123 8
a130 11
	if ((rc = validate_entry(dn, attrs, ns->relax)) != LDAP_SUCCESS)
		goto done;

	switch (namespace_add(ns, dn, attrs)) {
	case BT_SUCCESS:
		rc = LDAP_SUCCESS;
		break;
	case BT_EXISTS:
		rc = LDAP_ALREADY_EXISTS;
		break;
	default:
a131 2
		break;
	}
d133 1
a133 5
done:
	namespace_commit(ns);
	if (rc >= 0)
		ldap_respond(req, rc);
	return rc;
d164 6
a169 5
	if ((rc = namespace_begin(ns)) == BT_DEAD) {
		if (namespace_queue_request(ns, req) != 0)
			return ldap_respond(req, LDAP_BUSY);
		return LDAP_BUSY;
	} else if (rc != BT_SUCCESS)
d171 1
d247 1
a247 2
	switch (namespace_update(ns, dn, entry)) {
	case BT_SUCCESS:
d249 1
a249 5
		break;
	case BT_EXISTS:
		rc = LDAP_ALREADY_EXISTS;
		break;
	default:
a250 2
		break;
	}
d253 5
a257 1
	namespace_commit(ns);
@


1.1
log
@Initial import of ldapd, a small LDAP daemon. Work in progress.

ok deraadt@@ jacekm@@ gilles@@ back@@ henning@@ blambert@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d32 1
d50 1
a50 1
	if (namespace_should_queue(ns, req)) {
d54 2
a55 1
	}
d59 2
a60 1
		return ldap_respond(req, LDAP_NO_SUCH_OBJECT);
d62 2
a63 1
		return ldap_respond(req, LDAP_SUCCESS);
d65 2
a66 1
		return ldap_respond(req, LDAP_OTHER);
d68 5
d102 1
a102 1
	if (namespace_should_queue(ns, req)) {
d106 2
a107 1
	}
d126 1
a126 1
		return ldap_respond(req, rc);
d130 2
a131 1
		return ldap_respond(req, LDAP_SUCCESS);
d133 2
a134 1
		return ldap_respond(req, LDAP_ALREADY_EXISTS);
d136 2
a137 1
		return ldap_respond(req, LDAP_OTHER);
d139 6
d175 1
a175 1
	if (namespace_should_queue(ns, req)) {
d179 6
a186 3
	if ((entry = namespace_get(ns, dn)) == NULL)
		return ldap_respond(req, LDAP_NO_SUCH_OBJECT);

d188 4
a191 2
		if (ber_scanf_elements(mod, "{E{se", &op, &attr, &vals) != 0)
			return ldap_respond(req, LDAP_PROTOCOL_ERROR);
d195 2
a196 1
			return ldap_respond(req, LDAP_NO_SUCH_ATTRIBUTE);
d201 2
a202 1
			return ldap_respond(req, LDAP_CONSTRAINT_VIOLATION);
d207 2
a208 1
			return ldap_respond(req, LDAP_CONSTRAINT_VIOLATION);
d240 1
a240 1
		return ldap_respond(req, rc);
d258 2
a259 1
		return ldap_respond(req, LDAP_SUCCESS);
d261 2
a262 1
		return ldap_respond(req, LDAP_ALREADY_EXISTS);
d264 2
a265 1
		return ldap_respond(req, LDAP_OTHER);
d267 6
@

