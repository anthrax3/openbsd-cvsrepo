head	1.29;
access;
symbols
	OPENBSD_6_1:1.29.0.16
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.29.0.14
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.29.0.8
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.29.0.10
	OPENBSD_5_8_BASE:1.29
	OPENBSD_5_7:1.29.0.4
	OPENBSD_5_7_BASE:1.29
	OPENBSD_5_6:1.29.0.6
	OPENBSD_5_6_BASE:1.29
	OPENBSD_5_5:1.29.0.2
	OPENBSD_5_5_BASE:1.29
	OPENBSD_5_4:1.28.0.2
	OPENBSD_5_4_BASE:1.28
	OPENBSD_5_3:1.26.0.2
	OPENBSD_5_3_BASE:1.26
	OPENBSD_5_2:1.20.0.4
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.2
	OPENBSD_5_0:1.17.0.2
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.15.0.2
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.13.0.2
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7;
locks; strict;
comment	@ * @;


1.29
date	2014.02.04.15.22.39;	author eric;	state Exp;
branches;
next	1.28;

1.28
date	2013.07.19.13.41.23;	author eric;	state Exp;
branches;
next	1.27;

1.27
date	2013.05.24.17.03.14;	author eric;	state Exp;
branches;
next	1.26;

1.26
date	2013.02.14.12.30.49;	author gilles;	state Exp;
branches;
next	1.25;

1.25
date	2013.01.28.11.09.53;	author gilles;	state Exp;
branches;
next	1.24;

1.24
date	2013.01.26.09.37.23;	author gilles;	state Exp;
branches;
next	1.23;

1.23
date	2012.10.14.11.58.23;	author gilles;	state Exp;
branches;
next	1.22;

1.22
date	2012.10.10.19.39.11;	author gilles;	state Exp;
branches;
next	1.21;

1.21
date	2012.08.30.22.06.00;	author gilles;	state Exp;
branches;
next	1.20;

1.20
date	2012.01.12.18.06.18;	author eric;	state Exp;
branches;
next	1.19;

1.19
date	2011.10.23.17.12.41;	author gilles;	state Exp;
branches;
next	1.18;

1.18
date	2011.08.16.19.12.40;	author gilles;	state Exp;
branches;
next	1.17;

1.17
date	2011.07.21.23.29.24;	author gilles;	state Exp;
branches;
next	1.16;

1.16
date	2011.04.13.20.53.18;	author gilles;	state Exp;
branches;
next	1.15;

1.15
date	2010.10.09.22.05.35;	author gilles;	state Exp;
branches;
next	1.14;

1.14
date	2010.09.04.21.31.04;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2010.06.01.23.06.23;	author jacekm;	state Exp;
branches;
next	1.12;

1.12
date	2010.06.01.19.47.09;	author jacekm;	state Exp;
branches;
next	1.11;

1.11
date	2010.05.31.23.38.56;	author jacekm;	state Exp;
branches;
next	1.10;

1.10
date	2010.01.10.16.42.35;	author gilles;	state Exp;
branches;
next	1.9;

1.9
date	2010.01.03.14.37.37;	author chl;	state Exp;
branches;
next	1.8;

1.8
date	2009.08.08.00.02.22;	author gilles;	state Exp;
branches;
next	1.7;

1.7
date	2009.02.24.12.07.47;	author gilles;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.29.21.59.15;	author jacekm;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.04.22.35.09;	author gilles;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.04.19.37.41;	author gilles;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.27.16.45.01;	author jacekm;	state Exp;
branches;
next	1.2;

1.2
date	2008.12.06.02.44.08;	author gilles;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.05.03.28.37;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Allow the admin to pause relaying to a specific domain:
 - smtpctl pause mta from <source> for <domain>
 - smtpctl resume mta from <source> for <domain>
 - smtpctl show mta paused
@
text
@/*	$OpenBSD$	*/

/*
 * Copyright (c) 2013 Eric Faurot	<eric@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

enum {
	P_TOKEN,
	P_STR,
	P_INT,
	P_MSGID,
	P_EVPID,
	P_ROUTEID,
	P_ADDR,
};

struct parameter {
	int	type;
	union {
		const char	*u_str;
		int		 u_int;
		uint32_t	 u_msgid;
		uint64_t	 u_evpid;
		uint64_t	 u_routeid;
		struct sockaddr_storage u_ss;
	} u;
};

int cmd_install(const char *, int (*)(int, struct parameter *));
int cmd_run(int, char **);
int cmd_show_params(int argc, struct parameter *argv);
@


1.28
log
@New implementation for smtpctl and the command line parser.  Allows
richer syntax, and makes the code way simpler to follow and extend
with new commands.
@
text
@d26 1
d37 1
@


1.27
log
@sync with OpenSMTPD 5.3.2

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.26 2013/02/14 12:30:49 gilles Exp $	*/
d4 1
a4 1
 * Copyright (c) 2006 Pierre-Yves Ritschard <pyr@@openbsd.org>
d19 7
a25 50
enum actions {
	NONE,
	SHUTDOWN,
	MONITOR,
	LOG_VERBOSE,
	LOG_BRIEF,
	SCHEDULE,
	SHOW_QUEUE,
	SHOW_STATS,
	SHOW_SIZES,
	SHOW_ENVELOPE,
	SHOW_MESSAGE,
	PAUSE_MDA,
	PAUSE_MTA,
	PAUSE_SMTP,
	REMOVE,
	RESUME_MDA,
	RESUME_MTA,
	RESUME_SMTP,
	UPDATE_TABLE,
	LOG_TRACE_IMSG,
	LOG_TRACE_IO,
	LOG_TRACE_SMTP,
	LOG_TRACE_MFA,
	LOG_TRACE_MTA,
	LOG_TRACE_BOUNCE,
	LOG_TRACE_SCHEDULER,
	LOG_TRACE_LOOKUP,
	LOG_TRACE_STAT,
	LOG_TRACE_RULES,
	LOG_TRACE_MPROC,
	LOG_TRACE_EXPAND,
	LOG_TRACE_ALL,
	LOG_UNTRACE_IMSG,
	LOG_UNTRACE_IO,
	LOG_UNTRACE_SMTP,
	LOG_UNTRACE_MFA,
	LOG_UNTRACE_MTA,
	LOG_UNTRACE_BOUNCE,
	LOG_UNTRACE_SCHEDULER,
	LOG_UNTRACE_LOOKUP,
	LOG_UNTRACE_STAT,
	LOG_UNTRACE_RULES,
	LOG_UNTRACE_MPROC,
	LOG_UNTRACE_EXPAND,
	LOG_UNTRACE_ALL,
	LOG_PROFILE_IMSG,
	LOG_PROFILE_QUEUE,
	LOG_UNPROFILE_IMSG,
	LOG_UNPROFILE_QUEUE,
d28 9
a36 3
struct ctl_id {
	uint32_t	 id;
	char		 name[MAX_NAME_SIZE];
d39 3
a41 7
struct parse_result {
	struct ctl_id	id;
	enum actions	action;
	const char     *data;
};

struct parse_result	*parse(int, char *[]);
@


1.26
log
@- smtpctl trace expand, enables tracing of aliases expansion
- replace "users" keyword with "userbase" when providing alternate userbase
- disambiguise expansion nodes when expanding across domains and userbases
- allow use of '=' instead of '=>' when declaring a mapping

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.25 2013/01/28 11:09:53 gilles Exp $	*/
d49 1
a49 1
	LOG_TRACE_IMSG_SIZE,
d62 1
a62 1
	LOG_UNTRACE_IMSG_SIZE,
d72 1
a72 1
	objid_t		 id;
@


1.25
log
@- introduce 'smtpctl trace lookup' to trace lookup process
- improve logging of the transfer process

trace by me, logging by eric
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.24 2013/01/26 09:37:23 gilles Exp $	*/
d50 1
d63 1
@


1.24
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.23 2012/10/14 11:58:23 gilles Exp $	*/
d46 1
d58 1
@


1.23
log
@introduce map_file.c which will deprecate map_stdio.c

The idea is to have a file-backed map but to have smtpd(8) cache the maps
so that it cannot be partially read if edited while mail is received. The
file is read and converted to a static map (map_static.c), changes aren't
visible to smtpd until an explicit: smtpctl update map  which reads file,
builds a new static map and invalidates the former.

partial-read issue discussed with beck@@ and halex@@
idea to convert internally to a static map by eric@@

diff ok eric@@ and chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.22 2012/10/10 19:39:11 gilles Exp $	*/
a25 1
	SCHEDULE_ALL,
d38 32
a69 1
	UPDATE_MAP,
@


1.22
log
@teach smtpctl how to display envelopes and messages using their id.
this allows an admin to inspect the queue without having to manually
extract bucket and find the path to an envelope or message.

diff by Sunil Nimmagadda <sunil@@poolp.org>

ok eric@@, chl@@ and I
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.21 2012/08/30 22:06:00 gilles Exp $	*/
d39 1
@


1.21
log
@- rename show_envelope() to show_queue_envelope()
- remove SHOW_RUNQUEUE it was a noop since runqueues have been removed
  years ago from smtpd
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.20 2012/01/12 18:06:18 eric Exp $	*/
d30 2
@


1.20
log
@Remove dead code for config reloading for now. It is not functionnal
and confusing.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.19 2011/10/23 17:12:41 gilles Exp $	*/
a27 1
	SHOW_RUNQUEUE,
@


1.19
log
@- smtpctl schedule no longer works, instead, use 'smtpctl schedule-id <id>'
- introduce 'smtpctl schedule-all'

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.18 2011/08/16 19:12:40 gilles Exp $	*/
a21 1
	RELOAD,
@


1.18
log
@smtpctl show sizes, displays the size of queue-related structures, useful
for developers to see the impact of structure changes on memory and disk
usage, and useful for users to better understand 'smtpctl show stats'
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.17 2011/07/21 23:29:24 gilles Exp $	*/
d27 1
@


1.17
log
@- update smtpctl.8 to reflect reality
- bring back 'smtpctl schedule' and 'smtpctl remove' to life

Things you should know:

The ramqueue data structure is not finished yet and lacks an envelope tree
for evpid lookups. I wanted to wait until I'm done but too many people are
affected by not being able to reschedule envelopes, this is a quick fix.

So right now there's an O(rrible) complexity as both commands will perform
a (possibly aborted) queue scan leading to O(n). I will make that O(log n)
soon.

Also, smtpctl remove no longer supports removing an entire message, I will
fix that very soon too.
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.16 2011/04/13 20:53:18 gilles Exp $	*/
d30 1
@


1.16
log
@following an idea from jacekm@@, smtpd now uses a ram-queue instead of doing
a continuous walk on the disk-queue. the implementation differs from what
jacekm@@ commited (and I backed out) a while ago in that it uses a queue and
a host tree required for upcoming features.

code will be improved in tree, it requires changes to be done in queue and
bounce API, I just wanted to commit a working version first ...

tested by todd@@ and I
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.15 2010/10/09 22:05:35 gilles Exp $	*/
d26 1
d33 1
@


1.15
log
@backout the "new" queue code commited 4 months ago. it has many good ideas,
is way more optimized than what we had earlier and there's definitely stuff
we want to keep, however it is early optimization that doesn't account for
many features and makes them hard (if not impossible) to write without
ugly workarounds that ruin the purpose of the optimizations.

the backout goes to 30 May's right before the commit and catches up on all
the non-queue related commits that happened since then.

i'll work on reintroducing the ideas from this queue when the basic
features we expect from a MTA are implemented.

suggested on tech@@ about a week ago, no objections, several "please make
smtpd move forward" mails from hackers and tech readers.
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.10 2010/01/10 16:42:35 gilles Exp $	*/
a23 2
	SCHEDULE,
	REMOVE,
@


1.14
log
@move some things around to make intentions clear.  not really a functional
change.  ok claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.13 2010/06/01 23:06:23 jacekm Exp $	*/
a28 1
	SHOW_QUEUE_RAW,
@


1.13
log
@new queue, again; gcc2 compile tested by deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.11 2010/05/31 23:38:56 jacekm Exp $	*/
a46 2
const struct token      *match_token(const char *, const struct token *);
void                     show_valid_args(const struct token *);
@


1.12
log
@New queue doesn't compile on gcc2, back out.  Spotted by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.10 2010/01/10 16:42:35 gilles Exp $	*/
d29 1
@


1.11
log
@Rewrite entire queue code.

Major goals:

1) Fix bad performance caused by the runner process doing full queue
read in 1s intervals.  My Soekris can now happily accept >50 msg/s
while having multi-thousand queue; before, one hundred queue would
bring the system to its knees.

2) Introduce Qmail-like scheduler that doesn't write as much to the
disk so that it needs less code for servicing error conditions,
which in some places can be tricky to get right.

3) Introduce separation between the scheduler and the backend; these
two queue aspects shouldn't be too tied too each other.  This means
that eg. storing queue in SQL requires rewrite of just queue_backend.c.

4) Make on-disk queue format architecture independent, and more
easily extensible, to reduce number of flag days in the future.

Minor goals:

ENOSPC no longer prevents delivery attempts, fixed session limiting
for relayed mail, improved batching of "relay via" mails, human-readable
mailq output, "show queue raw" command, clearer logging, sending
of single bounce about multiple recipients, exact delay= computation,
zero delay between deliveries while within session limit (currently
1s delay between re-scheduling is enforced), mta no longer requests
content fd, corrected session limit for bounce submissions, tiny
<100B queue files instead of multi-KB, detect loops before accepting
mail, reduce traffic on imsg channels by killing enormous struct
submit_status.
@
text
@a28 1
	SHOW_QUEUE_RAW,
@


1.10
log
@- teach runner how to remove a message from queue given a message id/uid
	and assuming message is not in processing/scheduled state
- teach smtpctl how to request message removal from runner

discussed with todd@@, idea ok jacekm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.9 2010/01/03 14:37:37 chl Exp $	*/
d29 1
@


1.9
log
@Implement "log verbose" and "log brief" to enable or disable verbose debug
logging on runtime.

Based on claudio@@'s work on ripd, ospfd, ospf6d, dvmrpd, ldpd, bgpd.

With help/ideas/testing from gilles@@ jacekm@@ todd@@

ok jacekm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.8 2009/08/08 00:02:22 gilles Exp $	*/
d25 1
@


1.8
log
@import some changes from portable smtpd to reduce the delta between both.
this commit contains mostly missing casts and cosmethic changes, do not
expect to build this anywhere but on OpenBSD, it does not contain any of
the portable glue.
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.7 2009/02/24 12:07:47 gilles Exp $	*/
d25 2
@


1.7
log
@teach smtpctl's parser how to deal with parameters that are not necessarily
a token so that it is possible to do: smtpctl schedule <message id/uid>

introduce F_MESSAGE_FORCESCHEDULE which lets the runner schedule a message
even if the retry delay has not been expired.

F_MESSAGE_ENQUEUED is a valid flag for a message and should not cause an\
errx() in smtpctl show queue
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.6 2009/01/29 21:59:15 jacekm Exp $	*/
d43 2
a44 2
const struct token      *match_token(const char *, const struct token []);
void                     show_valid_args(const struct token []);
@


1.6
log
@Implement "smtpctl show stats"; ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.5 2009/01/04 22:35:09 gilles Exp $	*/
d24 1
d39 1
@


1.5
log
@- smtp can now pause/resume the accepting of incoming messages
- smtpctl recognizes "pause incoming" and "resume incoming"
- setup imsg communication between control process and smtp process
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.4 2009/01/04 19:37:41 gilles Exp $	*/
d26 1
@


1.4
log
@- runner is now capable of pausing/resuming the scheduling of deliveries
for both mda and mta batches.
- smtpctl can be used to disable/enable deliveries at runtime using the
pause/resume commands.

ok jacekm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.3 2008/12/27 16:45:01 jacekm Exp $	*/
d28 1
d31 1
@


1.3
log
@Break showqueue and showrunqueue into 2 words; ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.2 2008/12/06 02:44:08 gilles Exp $	*/
d25 5
a29 1
	SHOW_RUNQUEUE
@


1.2
log
@- teach smtpctl how to inspect queue and runqueue, it supports two commands
	`showqueue' which displays the content of the queue (all envelopes)
	`showrunqueue` which displays envelopes scheduled for delivery. The
	utility will be improved and extended, but for now we need at least
	this basic support to help debug queue-related issues.

	Output format is spamdb-alike:
	type|envelope uid|sender|recipient|last delivery date|retry count

	ok jacek@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.1 2008/12/05 03:28:37 gilles Exp $	*/
d24 2
a25 2
	SHOWQUEUE,
	SHOWRUNQUEUE
@


1.1
log
@- smtpctl utility to control the smtpd, don't expect too much yet as it is
	just an empty clone of relayctl with the glue needed to have it
	exchange imsg with smtpd correctly. code mostly by pyr@@, reviewed
	by chl@@ and I a while ago.
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.9 2007/12/20 20:15:43 reyk Exp $	*/
d23 3
a25 1
	MONITOR
@

