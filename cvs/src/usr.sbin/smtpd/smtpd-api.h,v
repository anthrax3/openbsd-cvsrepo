head	1.32;
access;
symbols
	OPENBSD_6_1:1.31.0.4
	OPENBSD_6_1_BASE:1.31
	OPENBSD_6_0:1.30.0.4
	OPENBSD_6_0_BASE:1.30
	OPENBSD_5_9:1.29.0.2
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.21.0.6
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.20.0.4
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.16.0.2
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.32
date	2017.09.08.16.51.22;	author eric;	state Exp;
branches;
next	1.31;
commitid	cDPfTCH0EHmjwhsg;

1.31
date	2016.09.03.16.06.26;	author eric;	state Exp;
branches;
next	1.30;
commitid	KHEgnvbdOZ4TgZyl;

1.30
date	2016.06.29.06.46.06;	author eric;	state Exp;
branches;
next	1.29;
commitid	Zr1tUk1x7OqbFhmN;

1.29
date	2016.02.09.22.18.17;	author gilles;	state Exp;
branches;
next	1.28;
commitid	V8n7kDsAO2i8H1IH;

1.28
date	2015.12.12.11.31.29;	author sunil;	state Exp;
branches;
next	1.27;
commitid	xbftp8DyefrEq9pW;

1.27
date	2015.11.30.14.49.54;	author gilles;	state Exp;
branches;
next	1.26;
commitid	I9fhRV4eEXZKiWa3;

1.26
date	2015.11.30.14.47.39;	author gilles;	state Exp;
branches;
next	1.25;
commitid	Z7zuGP3pmJ8BNEfL;

1.25
date	2015.11.23.21.50.12;	author gilles;	state Exp;
branches;
next	1.24;
commitid	HCn8C2lUMSgPueow;

1.24
date	2015.11.05.09.14.31;	author sunil;	state Exp;
branches;
next	1.23;
commitid	3vo6L6sIqhuEjLcD;

1.23
date	2015.10.29.10.25.36;	author sunil;	state Exp;
branches;
next	1.22;
commitid	TXZugvtal96cI6ec;

1.22
date	2015.10.14.21.02.11;	author gilles;	state Exp;
branches;
next	1.21;
commitid	ljNHKm24r1AdOW8I;

1.21
date	2015.01.20.17.37.54;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	ZBTFreARDSMmzOIV;

1.20
date	2014.07.10.14.45.02;	author eric;	state Exp;
branches;
next	1.19;
commitid	dolePHRcgnf1dDVL;

1.19
date	2014.07.08.15.45.32;	author eric;	state Exp;
branches;
next	1.18;
commitid	BLF7pkUK3dHr6Hox;

1.18
date	2014.07.08.14.24.16;	author eric;	state Exp;
branches;
next	1.17;
commitid	J5xwY1c9OfJT14c6;

1.17
date	2014.07.08.13.49.09;	author eric;	state Exp;
branches;
next	1.16;
commitid	pEybL9fsrDOC6PJj;

1.16
date	2014.02.04.15.44.06;	author eric;	state Exp;
branches;
next	1.15;

1.15
date	2014.02.04.14.56.03;	author eric;	state Exp;
branches;
next	1.14;

1.14
date	2014.02.04.13.55.34;	author eric;	state Exp;
branches;
next	1.13;

1.13
date	2013.12.05.09.26.47;	author eric;	state Exp;
branches;
next	1.12;

1.12
date	2013.11.20.09.22.42;	author eric;	state Exp;
branches;
next	1.11;

1.11
date	2013.11.18.11.47.16;	author eric;	state Exp;
branches;
next	1.10;

1.10
date	2013.10.27.17.47.53;	author eric;	state Exp;
branches;
next	1.9;

1.9
date	2013.10.27.11.01.47;	author eric;	state Exp;
branches;
next	1.8;

1.8
date	2013.07.19.21.34.31;	author eric;	state Exp;
branches;
next	1.7;

1.7
date	2013.07.19.20.37.07;	author eric;	state Exp;
branches;
next	1.6;

1.6
date	2013.07.19.19.53.33;	author eric;	state Exp;
branches;
next	1.5;

1.5
date	2013.07.19.16.02.00;	author eric;	state Exp;
branches;
next	1.4;

1.4
date	2013.05.24.17.03.14;	author eric;	state Exp;
branches;
next	1.3;

1.3
date	2013.04.12.18.22.49;	author eric;	state Exp;
branches;
next	1.2;

1.2
date	2013.02.14.14.34.07;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.26.09.37.23;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.32
log
@remove more filter-related cruft

ok gilles@@
@
text
@/*	$OpenBSD: smtpd-api.h,v 1.31 2016/09/03 16:06:26 eric Exp $	*/

/*
 * Copyright (c) 2013 Eric Faurot <eric@@openbsd.org>
 * Copyright (c) 2011 Gilles Chehade <gilles@@poolp.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef	_SMTPD_API_H_
#define	_SMTPD_API_H_

struct mailaddr {
	char	user[SMTPD_MAXLOCALPARTSIZE];
	char	domain[SMTPD_MAXDOMAINPARTSIZE];
};

SPLAY_HEAD(_dict, dictentry);
SPLAY_HEAD(_tree, treeentry);

struct tree {
	struct _tree	tree;
	size_t		count;
};

struct dict {
	struct _dict	dict;
	size_t		count;
};

#define PROC_QUEUE_API_VERSION	2

enum {
	PROC_QUEUE_OK,
	PROC_QUEUE_FAIL,
	PROC_QUEUE_INIT,
	PROC_QUEUE_CLOSE,
	PROC_QUEUE_MESSAGE_CREATE,
	PROC_QUEUE_MESSAGE_DELETE,
	PROC_QUEUE_MESSAGE_COMMIT,
	PROC_QUEUE_MESSAGE_FD_R,
	PROC_QUEUE_MESSAGE_CORRUPT,
	PROC_QUEUE_MESSAGE_UNCORRUPT,
	PROC_QUEUE_ENVELOPE_CREATE,
	PROC_QUEUE_ENVELOPE_DELETE,
	PROC_QUEUE_ENVELOPE_LOAD,
	PROC_QUEUE_ENVELOPE_UPDATE,
	PROC_QUEUE_ENVELOPE_WALK,
};

#define PROC_SCHEDULER_API_VERSION	2

struct scheduler_info;

enum {
	PROC_SCHEDULER_OK,
	PROC_SCHEDULER_FAIL,
	PROC_SCHEDULER_INIT,
	PROC_SCHEDULER_INSERT,
	PROC_SCHEDULER_COMMIT,
	PROC_SCHEDULER_ROLLBACK,
	PROC_SCHEDULER_UPDATE,
	PROC_SCHEDULER_DELETE,
	PROC_SCHEDULER_HOLD,
	PROC_SCHEDULER_RELEASE,
	PROC_SCHEDULER_BATCH,
	PROC_SCHEDULER_MESSAGES,
	PROC_SCHEDULER_ENVELOPES,
	PROC_SCHEDULER_SCHEDULE,
	PROC_SCHEDULER_REMOVE,
	PROC_SCHEDULER_SUSPEND,
	PROC_SCHEDULER_RESUME,
};

enum envelope_flags {
	EF_AUTHENTICATED	= 0x01,
	EF_BOUNCE		= 0x02,
	EF_INTERNAL		= 0x04, /* Internal expansion forward */

	/* runstate, not saved on disk */

	EF_PENDING		= 0x10,
	EF_INFLIGHT		= 0x20,
	EF_SUSPEND		= 0x40,
	EF_HOLD			= 0x80,
};

struct evpstate {
	uint64_t		evpid;
	uint16_t		flags;
	uint16_t		retry;
	time_t			time;
};

enum delivery_type {
	D_MDA,
	D_MTA,
	D_BOUNCE,
};

struct scheduler_info {
	uint64_t		evpid;
	enum delivery_type	type;
	uint16_t		retry;
	time_t			creation;
	time_t			expire;
	time_t			lasttry;
	time_t			lastbounce;
	time_t			nexttry;
};

#define SCHED_REMOVE		0x01
#define SCHED_EXPIRE		0x02
#define SCHED_UPDATE		0x04
#define SCHED_BOUNCE		0x08
#define SCHED_MDA		0x10
#define SCHED_MTA		0x20

#define PROC_TABLE_API_VERSION	2

struct table_open_params {
	uint32_t	version;
	char		name[LINE_MAX];
};

enum table_service {
	K_NONE		= 0x000,
	K_ALIAS		= 0x001,	/* returns struct expand	*/
	K_DOMAIN	= 0x002,	/* returns struct destination	*/
	K_CREDENTIALS	= 0x004,	/* returns struct credentials	*/
	K_NETADDR	= 0x008,	/* returns struct netaddr	*/
	K_USERINFO	= 0x010,	/* returns struct userinfo	*/
	K_SOURCE	= 0x020,	/* returns struct source	*/
	K_MAILADDR	= 0x040,	/* returns struct mailaddr	*/
	K_ADDRNAME	= 0x080,	/* returns struct addrname	*/
	K_MAILADDRMAP	= 0x100,	/* returns struct maddrmap	*/
};
#define K_ANY		  0xfff

enum {
	PROC_TABLE_OK,
	PROC_TABLE_FAIL,
	PROC_TABLE_OPEN,
	PROC_TABLE_CLOSE,
	PROC_TABLE_UPDATE,
	PROC_TABLE_CHECK,
	PROC_TABLE_LOOKUP,
	PROC_TABLE_FETCH,
};

enum enhanced_status_code {
	/* 0.0 */
	ESC_OTHER_STATUS				= 00,

	/* 1.x */
	ESC_OTHER_ADDRESS_STATUS			= 10,
	ESC_BAD_DESTINATION_MAILBOX_ADDRESS		= 11,
	ESC_BAD_DESTINATION_SYSTEM_ADDRESS		= 12,
	ESC_BAD_DESTINATION_MAILBOX_ADDRESS_SYNTAX     	= 13,
	ESC_DESTINATION_MAILBOX_ADDRESS_AMBIGUOUS	= 14,
	ESC_DESTINATION_ADDRESS_VALID			= 15,
	ESC_DESTINATION_MAILBOX_HAS_MOVED      		= 16,
	ESC_BAD_SENDER_MAILBOX_ADDRESS_SYNTAX		= 17,
	ESC_BAD_SENDER_SYSTEM_ADDRESS			= 18,

	/* 2.x */
	ESC_OTHER_MAILBOX_STATUS			= 20,
	ESC_MAILBOX_DISABLED				= 21,
	ESC_MAILBOX_FULL				= 22,
	ESC_MESSAGE_LENGTH_TOO_LARGE   			= 23,
	ESC_MAILING_LIST_EXPANSION_PROBLEM		= 24,

	/* 3.x */
	ESC_OTHER_MAIL_SYSTEM_STATUS			= 30,
	ESC_MAIL_SYSTEM_FULL				= 31,
	ESC_SYSTEM_NOT_ACCEPTING_MESSAGES		= 32,
	ESC_SYSTEM_NOT_CAPABLE_OF_SELECTED_FEATURES    	= 33,
	ESC_MESSAGE_TOO_BIG_FOR_SYSTEM		    	= 34,
	ESC_SYSTEM_INCORRECTLY_CONFIGURED      	    	= 35,

	/* 4.x */
	ESC_OTHER_NETWORK_ROUTING_STATUS      	    	= 40,
	ESC_NO_ANSWER_FROM_HOST		      	    	= 41,
	ESC_BAD_CONNECTION		      	    	= 42,
	ESC_DIRECTORY_SERVER_FAILURE   	      	    	= 43,
	ESC_UNABLE_TO_ROUTE	   	      	    	= 44,
	ESC_MAIL_SYSTEM_CONGESTION   	      	    	= 45,
	ESC_ROUTING_LOOP_DETECTED   	      	    	= 46,
	ESC_DELIVERY_TIME_EXPIRED   	      	    	= 47,

	/* 5.x */
	ESC_INVALID_RECIPIENT   	      	    	= 50,
	ESC_INVALID_COMMAND	   	      	    	= 51,
	ESC_SYNTAX_ERROR	   	      	    	= 52,
	ESC_TOO_MANY_RECIPIENTS	   	      	    	= 53,
	ESC_INVALID_COMMAND_ARGUMENTS  	      	    	= 54,
	ESC_WRONG_PROTOCOL_VERSION  	      	    	= 55,

	/* 6.x */
	ESC_OTHER_MEDIA_ERROR   	      	    	= 60,
	ESC_MEDIA_NOT_SUPPORTED   	      	    	= 61,
	ESC_CONVERSION_REQUIRED_AND_PROHIBITED		= 62,
	ESC_CONVERSION_REQUIRED_BUT_NOT_SUPPORTED      	= 63,
	ESC_CONVERSION_WITH_LOSS_PERFORMED	     	= 64,
	ESC_CONVERSION_FAILED			     	= 65,

	/* 7.x */
	ESC_OTHER_SECURITY_STATUS      		     	= 70,
	ESC_DELIVERY_NOT_AUTHORIZED_MESSAGE_REFUSED	= 71,
	ESC_MAILING_LIST_EXPANSION_PROHIBITED		= 72,
	ESC_SECURITY_CONVERSION_REQUIRED_NOT_POSSIBLE  	= 73,
	ESC_SECURITY_FEATURES_NOT_SUPPORTED	  	= 74,
	ESC_CRYPTOGRAPHIC_FAILURE			= 75,
	ESC_CRYPTOGRAPHIC_ALGORITHM_NOT_SUPPORTED	= 76,
	ESC_MESSAGE_INTEGRITY_FAILURE			= 77,
};

enum enhanced_status_class {
	ESC_STATUS_OK		= 2,
	ESC_STATUS_TEMPFAIL	= 4,
	ESC_STATUS_PERMFAIL	= 5,
};

static inline uint32_t
evpid_to_msgid(uint64_t evpid)
{
	return (evpid >> 32);
}

static inline uint64_t
msgid_to_evpid(uint32_t msgid)
{
        return ((uint64_t)msgid << 32);
}

/* dict.c */
#define dict_init(d) do { SPLAY_INIT(&((d)->dict)); (d)->count = 0; } while(0)
#define dict_empty(d) SPLAY_EMPTY(&((d)->dict))
#define dict_count(d) ((d)->count)
int dict_check(struct dict *, const char *);
void *dict_set(struct dict *, const char *, void *);
void dict_xset(struct dict *, const char *, void *);
void *dict_get(struct dict *, const char *);
void *dict_xget(struct dict *, const char *);
void *dict_pop(struct dict *, const char *);
void *dict_xpop(struct dict *, const char *);
int dict_poproot(struct dict *, void **);
int dict_root(struct dict *, const char **, void **);
int dict_iter(struct dict *, void **, const char **, void **);
int dict_iterfrom(struct dict *, void **, const char *, const char **, void **);
void dict_merge(struct dict *, struct dict *);


/* esc.c */
const char *esc_code(enum enhanced_status_class, enum enhanced_status_code);
const char *esc_description(enum enhanced_status_code);


/* queue */
void queue_api_on_close(int(*)(void));
void queue_api_on_message_create(int(*)(uint32_t *));
void queue_api_on_message_commit(int(*)(uint32_t, const char*));
void queue_api_on_message_delete(int(*)(uint32_t));
void queue_api_on_message_fd_r(int(*)(uint32_t));
void queue_api_on_message_corrupt(int(*)(uint32_t));
void queue_api_on_message_uncorrupt(int(*)(uint32_t));
void queue_api_on_envelope_create(int(*)(uint32_t, const char *, size_t, uint64_t *));
void queue_api_on_envelope_delete(int(*)(uint64_t));
void queue_api_on_envelope_update(int(*)(uint64_t, const char *, size_t));
void queue_api_on_envelope_load(int(*)(uint64_t, char *, size_t));
void queue_api_on_envelope_walk(int(*)(uint64_t *, char *, size_t));
void queue_api_on_message_walk(int(*)(uint64_t *, char *, size_t,
    uint32_t, int *, void **));
void queue_api_no_chroot(void);
void queue_api_set_chroot(const char *);
void queue_api_set_user(const char *);
int queue_api_dispatch(void);

/* scheduler */
void scheduler_api_on_init(int(*)(void));
void scheduler_api_on_insert(int(*)(struct scheduler_info *));
void scheduler_api_on_commit(size_t(*)(uint32_t));
void scheduler_api_on_rollback(size_t(*)(uint32_t));
void scheduler_api_on_update(int(*)(struct scheduler_info *));
void scheduler_api_on_delete(int(*)(uint64_t));
void scheduler_api_on_hold(int(*)(uint64_t, uint64_t));
void scheduler_api_on_release(int(*)(int, uint64_t, int));
void scheduler_api_on_batch(int(*)(int, int *, size_t *, uint64_t *, int *));
void scheduler_api_on_messages(size_t(*)(uint32_t, uint32_t *, size_t));
void scheduler_api_on_envelopes(size_t(*)(uint64_t, struct evpstate *, size_t));
void scheduler_api_on_schedule(int(*)(uint64_t));
void scheduler_api_on_remove(int(*)(uint64_t));
void scheduler_api_on_suspend(int(*)(uint64_t));
void scheduler_api_on_resume(int(*)(uint64_t));
void scheduler_api_no_chroot(void);
void scheduler_api_set_chroot(const char *);
void scheduler_api_set_user(const char *);
int scheduler_api_dispatch(void);

/* table */
void table_api_on_update(int(*)(void));
void table_api_on_check(int(*)(int, struct dict *, const char *));
void table_api_on_lookup(int(*)(int, struct dict *, const char *, char *, size_t));
void table_api_on_fetch(int(*)(int, struct dict *, char *, size_t));
int table_api_dispatch(void);
const char *table_api_get_name(void);

/* tree.c */
#define tree_init(t) do { SPLAY_INIT(&((t)->tree)); (t)->count = 0; } while(0)
#define tree_empty(t) SPLAY_EMPTY(&((t)->tree))
#define tree_count(t) ((t)->count)
int tree_check(struct tree *, uint64_t);
void *tree_set(struct tree *, uint64_t, void *);
void tree_xset(struct tree *, uint64_t, void *);
void *tree_get(struct tree *, uint64_t);
void *tree_xget(struct tree *, uint64_t);
void *tree_pop(struct tree *, uint64_t);
void *tree_xpop(struct tree *, uint64_t);
int tree_poproot(struct tree *, uint64_t *, void **);
int tree_root(struct tree *, uint64_t *, void **);
int tree_iter(struct tree *, void **, uint64_t *, void **);
int tree_iterfrom(struct tree *, void **, uint64_t, uint64_t *, void **);
void tree_merge(struct tree *, struct tree *);

#endif
@


1.31
log
@get rid of the type-checking system on internal messages.
bump all imsg protocol versions since message format changed.

ok gilles@@ sunil@@
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.30 2016/06/29 06:46:06 eric Exp $	*/
a22 2
#define	FILTER_API_VERSION	 52

a40 56
enum filter_status {
	FILTER_OK,
	FILTER_FAIL,
	FILTER_CLOSE,
};

enum filter_imsg {
	IMSG_FILTER_REGISTER,
	IMSG_FILTER_EVENT,
	IMSG_FILTER_QUERY,
	IMSG_FILTER_PIPE,
	IMSG_FILTER_RESPONSE
};

/* XXX - server side requires mfa_session.c update on filter_event */
enum filter_event_type {
	EVENT_CONNECT,
	EVENT_RESET,
	EVENT_DISCONNECT,
	EVENT_TX_BEGIN,
	EVENT_TX_COMMIT,
	EVENT_TX_ROLLBACK,
};

/* XXX - server side requires mfa_session.c update on filter_hook changes */
enum filter_query_type {
	QUERY_CONNECT,
	QUERY_HELO,
	QUERY_MAIL,
	QUERY_RCPT,
	QUERY_DATA,
	QUERY_EOM,
	QUERY_DATALINE,
};

/* XXX - server side requires mfa_session.c update on filter_hook changes */
enum filter_hook_type {
	HOOK_CONNECT		= 1 << 0,
	HOOK_HELO		= 1 << 1,
	HOOK_MAIL		= 1 << 2,
	HOOK_RCPT		= 1 << 3,
	HOOK_DATA		= 1 << 4,
	HOOK_EOM		= 1 << 5,
	HOOK_RESET		= 1 << 6,
	HOOK_DISCONNECT		= 1 << 7,
	HOOK_COMMIT		= 1 << 8,
	HOOK_ROLLBACK		= 1 << 9,
	HOOK_DATALINE		= 1 << 10,
};

struct filter_connect {
	struct sockaddr_storage	 local;
	struct sockaddr_storage	 remote;
	const char		*hostname;
};

a267 28

/* filter_api.c */
void filter_api_setugid(uid_t, gid_t);
void filter_api_set_chroot(const char *);
void filter_api_no_chroot(void);
void filter_api_set_udata(uint64_t, void *);
void *filter_api_get_udata(uint64_t);

void filter_api_loop(void);
int filter_api_accept(uint64_t);
int filter_api_reject(uint64_t, enum filter_status);
int filter_api_reject_code(uint64_t, enum filter_status, uint32_t,
    const char *);
void filter_api_writeln(uint64_t, const char *);
const char *filter_api_sockaddr_to_text(const struct sockaddr *);
const char *filter_api_mailaddr_to_text(const struct mailaddr *);

void filter_api_on_connect(int(*)(uint64_t, struct filter_connect *));
void filter_api_on_helo(int(*)(uint64_t, const char *));
void filter_api_on_mail(int(*)(uint64_t, struct mailaddr *));
void filter_api_on_rcpt(int(*)(uint64_t, struct mailaddr *));
void filter_api_on_data(int(*)(uint64_t));
void filter_api_on_dataline(void(*)(uint64_t, const char *));
void filter_api_on_eom(int(*)(uint64_t, size_t));
void filter_api_on_reset(void(*)(uint64_t));
void filter_api_on_disconnect(void(*)(uint64_t));
void filter_api_on_commit(void(*)(uint64_t));
void filter_api_on_rollback(void(*)(uint64_t));
@


1.30
log
@Explicitely enclose SMTP transactions between BEGIN and COMMIT/ROLLBACK
filter events. Bump filter API version.

ok gilles@@ jung@@
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.29 2016/02/09 22:18:17 gilles Exp $	*/
d23 1
a23 1
#define	FILTER_API_VERSION	 51
d99 1
a99 1
#define PROC_QUEUE_API_VERSION	1
d119 1
a119 1
#define PROC_SCHEDULER_API_VERSION	1
d187 1
a187 1
#define PROC_TABLE_API_VERSION	1
@


1.29
log
@add PROC_QUEUE_MESSAGE_UNCORRUPT to smtpd-api.h, needed by privsep queues
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.28 2015/12/12 11:31:29 sunil Exp $	*/
d23 1
a23 1
#define	FILTER_API_VERSION	 50
d62 3
a64 2
	EVENT_COMMIT,
	EVENT_ROLLBACK,
@


1.28
log
@Implement senders map.

senders table allows to restrict the addresses that an authenticated
user can use in the SMTP dialogue.

Ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.27 2015/11/30 14:49:54 gilles Exp $	*/
d110 1
@


1.27
log
@fix prototype
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.26 2015/11/30 14:47:39 gilles Exp $	*/
d199 3
a201 3
	K_SOURCE	= 0x020, /* returns struct source	*/
	K_MAILADDR	= 0x040, /* returns struct mailaddr	*/
	K_ADDRNAME	= 0x080, /* returns struct addrname	*/
@


1.26
log
@smtpd-api.h update, missing prototypes, no functional change
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.25 2015/11/23 21:50:12 gilles Exp $	*/
d330 1
a330 1
void filter_api_get_udata(uint64_t);
@


1.25
log
@allow table API to lookup for mailaddr mappings

ok sunil@@, ok jung@@
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.24 2015/11/05 09:14:31 sunil Exp $	*/
d193 9
a201 9
	K_NONE		= 0x00,
	K_ALIAS		= 0x01,	/* returns struct expand	*/
	K_DOMAIN	= 0x02,	/* returns struct destination	*/
	K_CREDENTIALS	= 0x04,	/* returns struct credentials	*/
	K_NETADDR	= 0x08,	/* returns struct netaddr	*/
	K_USERINFO	= 0x10,	/* returns struct userinfo	*/
	K_SOURCE	= 0x20, /* returns struct source	*/
	K_MAILADDR	= 0x40, /* returns struct mailaddr	*/
	K_ADDRNAME	= 0x80, /* returns struct addrname	*/
d329 2
a333 1
int filter_api_accept_notify(uint64_t, uint64_t *);
d348 4
@


1.24
log
@Implement smtpctl uncorrupt <msgid>

"uncorrupt" moves envelopes from corrupt bucket back to the queue
for further discovery by the daemon.

After correcting the corrupt envelopes, admin could now...

# smtpctl uncorrupt msgid
# smtpctl discover msgid

to schedule the messages.

Ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.23 2015/10/29 10:25:36 sunil Exp $	*/
d202 1
d204 1
a204 1
#define K_ANY		  0xff
@


1.23
log
@Implement smtpctl discover <evpid|msgid>.

discover subcommand schedules envelopes manually moved to the queue.
It triggers a queue walk searching for envelopes with the given id,
schedules them and informs the user number of envelopes scheduled.
Admins no longer would need to restart the daemon to discover
manually moved messages.

Ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.22 2015/10/14 21:02:11 gilles Exp $	*/
d354 1
@


1.22
log
@fix define and enhanced status code reason for 5.5.0
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.21 2015/01/20 17:37:54 deraadt Exp $	*/
d359 2
@


1.21
log
@use <limits.h> comprehensively.  For now try to push <> includes to
each .c file, and out of the .h files.  To avoid overinclude.
ok gilles, in principle.  If this has been done right, -portable should
become easier to maintain.
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.20 2014/07/10 14:45:02 eric Exp $	*/
d257 1
a257 1
	ESC_OTHER_PROTOCOL_STATUS   	      	    	= 50,
@


1.20
log
@Improve the scheduler, better and simpler.

- Get rid of the scheduler_batch structure. The scheduler can now return
  envelopes of different types in a single run, interlacing them to avoid
  batch effects.

- Ask for an acknowledgement from the queue when removing or expiring
  an envelope to benefit from the inflight envelope limitation mechanism.
  This ensures that the scheduler always keeps sending envelopes at a rate
  that the queue can sustain in all cases.

- Limit the number of envelopes in a holdq.  When a holdq is full,
  new envelopes are put back in the pending queue instead, with a
  shorter retry time.

- Plumbing for proc-ified schedulers.

imsg version bump. smtpctl stop before updating.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a22 7
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>

#include <netinet/in.h>
#include <netdb.h>

d189 1
a189 1
	char		name[SMTPD_MAXLINESIZE];
@


1.19
log
@various queue improvements:

- add a "close" hook to the backend API.
- improve the sync() pattern in queue_fs: only sync at commit
  time and not for every envelope creation
- various fixes to the experimental external queue API.
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.18 2014/07/08 14:24:16 eric Exp $	*/
a126 1
struct scheduler_batch;
d185 6
a190 16
#define SCHED_NONE		0x00
#define SCHED_DELAY		0x01
#define SCHED_REMOVE		0x02
#define SCHED_EXPIRE		0x04
#define SCHED_UPDATE		0x08
#define SCHED_BOUNCE		0x10
#define SCHED_MDA		0x20
#define SCHED_MTA		0x40

struct scheduler_batch {
	int		 mask;
	int		 type;
	time_t		 delay;
	size_t		 evpcount;
	uint64_t	*evpids;
};
d380 1
a380 1
void scheduler_api_on_batch(int(*)(int, struct scheduler_batch *));
d387 3
@


1.18
log
@make the filter API move forward (still not plugged).
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.17 2014/07/08 13:49:09 eric Exp $	*/
d111 1
d366 1
d377 3
@


1.17
log
@Update the table API: lookup functions can take an optional parameters
dictionnary (currently not set). While there, add a helper for forking
external backends, and remove unused table functions.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.16 2014/02/04 15:44:06 eric Exp $	*/
d60 1
a60 3
	IMSG_FILTER_PIPE_SETUP,
	IMSG_FILTER_PIPE_ABORT,
	IMSG_FILTER_NOTIFY,
d64 9
d74 9
a82 12
enum filter_hook {
	HOOK_CONNECT		= 1 << 0,	/* req */
	HOOK_HELO		= 1 << 1,	/* req */
	HOOK_MAIL		= 1 << 2,	/* req */
	HOOK_RCPT		= 1 << 3,	/* req */
	HOOK_DATA		= 1 << 4,	/* req */
	HOOK_EOM		= 1 << 5,	/* req */

	HOOK_RESET		= 1 << 6,	/* evt */
	HOOK_DISCONNECT		= 1 << 7,	/* evt */
	HOOK_COMMIT		= 1 << 8,	/* evt */
	HOOK_ROLLBACK		= 1 << 9,	/* evt */
d84 13
a96 1
	HOOK_DATALINE		= 1 << 10,	/* data */
d347 4
a350 4
void filter_api_accept(uint64_t);
void filter_api_accept_notify(uint64_t, uint64_t *);
void filter_api_reject(uint64_t, enum filter_status);
void filter_api_reject_code(uint64_t, enum filter_status, uint32_t,
d353 2
d356 5
a360 6
void filter_api_on_notify(void(*)(uint64_t, enum filter_status));
void filter_api_on_connect(void(*)(uint64_t, struct filter_connect *));
void filter_api_on_helo(void(*)(uint64_t, const char *));
void filter_api_on_mail(void(*)(uint64_t, struct mailaddr *));
void filter_api_on_rcpt(void(*)(uint64_t, struct mailaddr *));
void filter_api_on_data(void(*)(uint64_t));
d362 1
a362 2
void filter_api_on_eom(void(*)(uint64_t));
void filter_api_on_event(void(*)(uint64_t, enum filter_hook));
@


1.16
log
@Add support for DSN and Enhanced Status Code
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d381 3
a383 3
void table_api_on_check(int(*)(int, const char *));
void table_api_on_lookup(int(*)(int, const char *, char *, size_t));
void table_api_on_fetch(int(*)(int, char *, size_t));
@


1.15
log
@internal improvements and cleanups

- get rid of the whole penalty thing for failed envelopes in the mta and scheduler.
- do not disable routes on smtp errors
- try to schedule all types of envelopes on each scheduler frame.
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.14 2014/02/04 13:55:34 eric Exp $	*/
d217 73
d318 6
@


1.14
log
@socketmap table backend.
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.13 2013/12/05 09:26:47 eric Exp $	*/
a166 1
	uint8_t			penalty;
d179 1
@


1.13
log
@When a relay fails, let the scheduler update all envelopes in the
holdq as if they tempfailed.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d188 5
d306 1
@


1.12
log
@Rework the mda and scheduler to use the holdq mechanism instead of
tempfail for limiting the number of pending deliveries to the same
user.  This allows to reach optimal delivery time even in case of
burst, while keeping the number of inflight envelopes low.
@
text
@d174 4
a177 3
#define SCHED_BOUNCE		0x08
#define SCHED_MDA		0x10
#define SCHED_MTA		0x20
@


1.11
log
@change dict_poproot() prototype: do not take key placeholder parameter as
it can't work that way.
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.10 2013/10/27 17:47:53 eric Exp $	*/
d284 1
a284 1
void scheduler_api_on_release(int(*)(uint64_t, int));
@


1.10
log
@Implement a feedback mechanism which allows the mta to "hold" envelopes
in the scheduler when it has too many tasks for a given relay.  The
envelopes are put on a wait queue, and are not scheduled again until
the mta "releases" some envelopes from that queue.

It prevents from having too many inflight envelopes, which are out of reach
for the admin.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d234 3
a236 3
int dict_poproot(struct dict *, const char * *, void **);
int dict_root(struct dict *, const char * *, void **);
int dict_iter(struct dict *, void **, const char * *, void **);
@


1.9
log
@Make the filter infrastructure move forward.
This is a work-in-progress and it's not supposed to be useable for now.
@
text
@d121 2
d142 1
d283 2
@


1.8
log
@Implement a scheduler_proc backend
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.7 2013/07/19 20:37:07 eric Exp $	*/
d60 2
d63 1
a63 2
	IMSG_FILTER_DATA,
	IMSG_FILTER_RESPONSE,
a65 2
#define	FILTER_ALTERDATA	0x01 /* The filter wants to alter the message */

d244 1
a244 1
void filter_api_accept_notify(uint64_t);
d248 1
a248 1
void filter_api_data(uint64_t, const char *);
d251 7
a257 7
void filter_api_on_connect(void(*)(uint64_t, uint64_t, struct filter_connect *));
void filter_api_on_helo(void(*)(uint64_t, uint64_t, const char *));
void filter_api_on_mail(void(*)(uint64_t, uint64_t, struct mailaddr *));
void filter_api_on_rcpt(void(*)(uint64_t, uint64_t, struct mailaddr *));
void filter_api_on_data(void(*)(uint64_t, uint64_t));
void filter_api_on_dataline(void(*)(uint64_t, const char *), int);
void filter_api_on_eom(void(*)(uint64_t, uint64_t));
@


1.7
log
@Assorted queue improvements:
- cleanup the internal queue backend API and get rid of the QOP_* thing.
- implement a queue_proc backend
- rename queue_fsqueue.c to queue_fs
- enable support for queue encryption
- add an envelope cache
- better logging and error reporting
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.6 2013/07/19 19:53:33 eric Exp $	*/
d108 75
d273 16
@


1.6
log
@Add a table_proc backend for delegating table lookups to another
process.  Stop building experimental table_sqlite and table_ldap as
they will be provided as external backends.
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.5 2013/07/19 16:02:00 eric Exp $	*/
d90 18
d185 13
@


1.5
log
@Move the filter infrastructure forward.
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.4 2013/05/24 17:03:14 eric Exp $	*/
d4 1
d90 26
d167 7
@


1.4
log
@sync with OpenSMTPD 5.3.2

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.2 2013/02/14 14:34:07 eric Exp $	*/
d89 12
d119 4
@


1.3
log
@replace MAX_LINE_SIZE and SMTP_LINE_MAX with SMTPD_MAXLINESIZE for
consistency and clarity.  Remove useless and confusing extra byte in
a few arrays based on this define.

ok gilles@@
@
text
@d31 7
a37 3
#define SMTPD_MAXLINESIZE		 2048
#define MAX_LOCALPART_SIZE	 (64 + 1)
#define MAX_DOMAINPART_SIZE	 (255 + 1)
d39 3
a41 3
struct mailaddr {
	char	user[MAX_LOCALPART_SIZE];
	char	domain[MAX_DOMAINPART_SIZE];
d44 4
a47 2
SPLAY_HEAD(dict, dictentry);
SPLAY_HEAD(tree, treeentry);
d90 3
a92 2
#define dict_init(d) SPLAY_INIT((d))
#define dict_empty(d) SPLAY_EMPTY((d))
d126 3
a128 2
#define tree_init(t) SPLAY_INIT((t))
#define tree_empty(t) SPLAY_EMPTY((t))
@


1.2
log
@grow MAX_LOCALPART_SIZE and MAX_DOMAINPART_SIZE by 1 (for the '\0')

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpd-api.h,v 1.1 2013/01/26 09:37:23 gilles Exp $	*/
d31 1
a31 1
#define MAX_LINE_SIZE		 2048
@


1.1
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: filter_api.h,v 1.4 2012/08/20 21:14:17 gilles Exp $	*/
d32 2
a33 2
#define MAX_LOCALPART_SIZE	 64
#define MAX_DOMAINPART_SIZE	 255
@

