head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.10
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.4
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6;
locks; strict;
comment	@ * @;


1.10
date	2015.01.20.17.37.54;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	ZBTFreARDSMmzOIV;

1.9
date	2014.04.19.14.11.55;	author gilles;	state Exp;
branches;
next	1.8;

1.8
date	2013.05.24.17.03.14;	author eric;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.08.19.11.52;	author chl;	state Exp;
branches;
next	1.6;

1.6
date	2013.01.26.09.37.24;	author gilles;	state Exp;
branches;
next	1.5;

1.5
date	2012.09.27.17.47.49;	author chl;	state Exp;
branches;
next	1.4;

1.4
date	2012.08.25.10.23.12;	author gilles;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.24.13.16.15;	author chl;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.20.17.32.37;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.18.18.18.23;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.10
log
@use <limits.h> comprehensively.  For now try to push <> includes to
each .c file, and out of the .h files.  To avoid overinclude.
ok gilles, in principle.  If this has been done right, -portable should
become easier to maintain.
@
text
@/*	$OpenBSD: stat_ramstat.c,v 1.9 2014/04/19 14:11:55 gilles Exp $	*/

/*
 * Copyright (c) 2012 Gilles Chehade <gilles@@poolp.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/queue.h>
#include <sys/tree.h>

#include <event.h>
#include <imsg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

#include "smtpd.h"
#include "log.h"


static void	ramstat_init(void);
static void	ramstat_close(void);
static void	ramstat_increment(const char *, size_t);
static void	ramstat_decrement(const char *, size_t);
static void	ramstat_set(const char *, const struct stat_value *);
static int	ramstat_iter(void **, char **, struct stat_value *);

struct ramstat_entry {
	RB_ENTRY(ramstat_entry)	entry;
	char			key[STAT_KEY_SIZE];
	struct stat_value	value;
};
RB_HEAD(stats_tree, ramstat_entry)	stats;
RB_PROTOTYPE(stats_tree, ramstat_entry, entry, ramstat_entry_cmp);

struct stat_backend	stat_backend_ramstat = {
	ramstat_init,
	ramstat_close,
	ramstat_increment,
	ramstat_decrement,
	ramstat_set,
	ramstat_iter
};

static void
ramstat_init(void)
{
	log_trace(TRACE_STAT, "ramstat: init");

	RB_INIT(&stats);

	/* ramstat_set() should be called for each key we want
	 * to have displayed by smtpctl show stats at startup.
	 */
	ramstat_set("uptime", stat_timestamp(env->sc_uptime));
}

static void
ramstat_close(void)
{
	log_trace(TRACE_STAT, "ramstat: close");
}

static void
ramstat_increment(const char *name, size_t val)
{
	struct ramstat_entry	*np, lk;

	log_trace(TRACE_STAT, "ramstat: increment: %s", name);
	(void)strlcpy(lk.key, name, sizeof (lk.key));
	np = RB_FIND(stats_tree, &stats, &lk);
	if (np == NULL) {
		np = xcalloc(1, sizeof *np, "ramstat_increment");
		(void)strlcpy(np->key, name, sizeof (np->key));
		RB_INSERT(stats_tree, &stats, np);
	}
	log_trace(TRACE_STAT, "ramstat: %s (%p): %zd -> %zd",
	    name, name, np->value.u.counter, np->value.u.counter + val);
	np->value.u.counter += val;
}

static void
ramstat_decrement(const char *name, size_t val)
{
	struct ramstat_entry	*np, lk;

	log_trace(TRACE_STAT, "ramstat: decrement: %s", name);
	(void)strlcpy(lk.key, name, sizeof (lk.key));
	np = RB_FIND(stats_tree, &stats, &lk);
	if (np == NULL) {
		np = xcalloc(1, sizeof *np, "ramstat_decrement");
		(void)strlcpy(np->key, name, sizeof (np->key));
		RB_INSERT(stats_tree, &stats, np);
	}
	log_trace(TRACE_STAT, "ramstat: %s (%p): %zd -> %zd",
	    name, name, np->value.u.counter, np->value.u.counter - val);
	np->value.u.counter -= val;
}

static void
ramstat_set(const char *name, const struct stat_value *val)
{
	struct ramstat_entry	*np, lk;

	log_trace(TRACE_STAT, "ramstat: set: %s", name);
	(void)strlcpy(lk.key, name, sizeof (lk.key));
	np = RB_FIND(stats_tree, &stats, &lk);
	if (np == NULL) {
		np = xcalloc(1, sizeof *np, "ramstat_set");
		(void)strlcpy(np->key, name, sizeof (np->key));
		RB_INSERT(stats_tree, &stats, np);
	}
	log_trace(TRACE_STAT, "ramstat: %s: n/a -> n/a", name);
	np->value = *val;
}

static int
ramstat_iter(void **iter, char **name, struct stat_value *val)
{
	struct ramstat_entry *np;

	log_trace(TRACE_STAT, "ramstat: iter");
	if (RB_EMPTY(&stats))
		return 0;

	if (*iter == NULL)
		np = RB_MIN(stats_tree, &stats);
	else
		np = RB_NEXT(stats_tree, &stats, *iter);

	*iter = np;
	if (np == NULL)
		return 0;

	*name = np->key;
	*val  = np->value;
	return 1;
}


static int
ramstat_entry_cmp(struct ramstat_entry *e1, struct ramstat_entry *e2)
{
	return strcmp(e1->key, e2->key);
}

RB_GENERATE(stats_tree, ramstat_entry, entry, ramstat_entry_cmp);
@


1.9
log
@(void) cast strlcpy() calls that cannot truncate
@
text
@d1 1
a1 1
/*	$OpenBSD: stat_ramstat.c,v 1.8 2013/05/24 17:03:14 eric Exp $	*/
d29 1
@


1.8
log
@sync with OpenSMTPD 5.3.2

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stat_ramstat.c,v 1.7 2013/03/08 19:11:52 chl Exp $	*/
d83 1
a83 1
	strlcpy(lk.key, name, sizeof (lk.key));
d87 1
a87 1
		strlcpy(np->key, name, sizeof (np->key));
d101 1
a101 1
	strlcpy(lk.key, name, sizeof (lk.key));
d105 1
a105 1
		strlcpy(np->key, name, sizeof (np->key));
d119 1
a119 1
	strlcpy(lk.key, name, sizeof (lk.key));
d123 1
a123 1
		strlcpy(np->key, name, sizeof (np->key));
@


1.7
log
@Add missing $OpenBSD$ RCS tags

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a22 1
#include <sys/param.h>
@


1.6
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@d1 2
@


1.5
log
@use xmalloc()/xcalloc() helpers

while there unify usage of log_trace() in ramstat_set()

ok gilles@@ eric@@
@
text
@d2 1
a2 1
 * Copyright (c) 2012 Gilles Chehade <gilles@@openbsd.org>
@


1.4
log
@- introduce struct stat_value
- statistics can now have a type (counter, timestamp, timeval, timespec and
  possibly others in the future)
- stat_increment() / stat_decrement() now take an increment/decrement value
  and are at the moment only of type counter
- stat_set() now takes a stat_value
- provide helpers to convert raw values to stat_value

ok eric@@, ok chl@@

while at it fix a rq_queue_dump() call using a bogus timestamp in scheduler
ramqueue.
@
text
@d85 1
a85 3
		np = calloc(1, sizeof *np);
		if (np == NULL)
			fatal("calloc");
d103 1
a103 3
		np = calloc(1, sizeof *np);
		if (np == NULL)
			fatal("calloc");
d117 1
a117 1
	log_trace(TRACE_STAT, "ramstat: set");
d121 1
a121 3
		np = calloc(1, sizeof *np);
		if (np == NULL)
			fatal("calloc");
@


1.3
log
@fix smtpctl show stats crash seen on -portable

reported by todd@@

ok gilles@@
@
text
@d35 4
a38 4
static void	ramstat_increment(const char *);
static void	ramstat_decrement(const char *);
static void	ramstat_set(const char *, size_t);
static int	ramstat_iter(void **, char **, size_t *);
d42 2
a43 3
	
	char	key[STAT_KEY_SIZE];
	size_t	value;
d61 1
d67 1
a67 1
	ramstat_set("uptime", env->sc_uptime);
d77 1
a77 1
ramstat_increment(const char *name)
d91 3
a93 3
	log_trace(TRACE_STAT, "ramstat: %s (%p): %d -> %d",
	    name, name, (int)np->value, (int)np->value + 1);
	np->value++;
d97 1
a97 1
ramstat_decrement(const char *name)
d111 3
a113 3
	log_trace(TRACE_STAT, "ramstat: %s (%p): %d -> %d",
	    name, name, (int)np->value, (int)np->value - 1);
	np->value--;
d117 1
a117 1
ramstat_set(const char *name, size_t val)
d131 2
a132 3
	log_trace(TRACE_STAT, "ramstat: %s: %d -> %d",
	    name, (int)np->value, (int)val);
	np->value = val;
d136 1
a136 1
ramstat_iter(void **iter, char **name, size_t *val)
@


1.2
log
@start iterating from min, not root.

ok gilles@@
@
text
@a149 4
	if (np) {
		*name = np->key;
		*val  = np->value;
	}
d151 5
@


1.1
log
@- introduce stat_backend, an API for pluggable statistic backends
  > statistics are no longer static structures in shared memory
  > statistics are only set, smtpd never uses them in its logic
  > each statistic is a key/value where key can be any (dynamic) string
- convert all uses of the former API to use the new one
- implement stat_ramstat that keeps non-persistent stats in ram structure

ok eric@@, ok chl@@
@
text
@d146 1
a146 1
		np = RB_ROOT(&stats);
@

