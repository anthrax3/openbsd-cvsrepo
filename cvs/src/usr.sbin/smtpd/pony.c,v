head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.4
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6;
locks; strict;
comment	@ * @;


1.18
date	2017.08.13.11.10.30;	author eric;	state Exp;
branches;
next	1.17;
commitid	gfmSsnStq4224Spd;

1.17
date	2017.01.09.09.53.23;	author reyk;	state Exp;
branches;
next	1.16;
commitid	jM4eOMW1AJwdfKrr;

1.16
date	2016.09.08.12.06.43;	author eric;	state Exp;
branches;
next	1.15;
commitid	LkfnyKFoItZAAepX;

1.15
date	2016.09.04.16.10.31;	author eric;	state Exp;
branches;
next	1.14;
commitid	I2r1xe6emhZl6xPg;

1.14
date	2016.09.01.10.54.25;	author eric;	state Exp;
branches;
next	1.13;
commitid	fYsbH2IujjKSME9c;

1.13
date	2016.05.28.21.21.20;	author eric;	state Exp;
branches;
next	1.12;
commitid	KhU4hSodVCiVoZ62;

1.12
date	2016.01.01.12.37.14;	author jung;	state Exp;
branches;
next	1.11;
commitid	3e7AYxmkMNA4cojt;

1.11
date	2015.12.13.10.54.11;	author gilles;	state Exp;
branches;
next	1.10;
commitid	7oThDZgvowAZS6Fw;

1.10
date	2015.12.01.09.44.54;	author gilles;	state Exp;
branches;
next	1.9;
commitid	pquxrFI63B8M69sw;

1.9
date	2015.11.30.12.49.35;	author gilles;	state Exp;
branches;
next	1.8;
commitid	ZyOzw2IPUjoaWKi5;

1.8
date	2015.10.14.19.39.16;	author gilles;	state Exp;
branches;
next	1.7;
commitid	0HLvBm9mHjIhBrVK;

1.7
date	2015.01.20.17.37.54;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	ZBTFreARDSMmzOIV;

1.6
date	2014.07.08.20.14.46;	author eric;	state Exp;
branches;
next	1.5;
commitid	AHjSiMjlXwD7KM7Y;

1.5
date	2014.05.01.15.50.20;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.30.08.23.42;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.29.19.13.13;	author reyk;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.09.18.55.19;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2014.04.04.16.10.42;	author eric;	state Exp;
branches;
next	;


desc
@@


1.18
log
@bypass the filter code for incoming smtp sessions.
experimental support for filters has been removed from the config
parser already, and we want to get rid of the remaining code.

ok gilles@@
@
text
@/*	$OpenBSD: pony.c,v 1.17 2017/01/09 09:53:23 reyk Exp $	*/

/*
 * Copyright (c) 2014 Gilles Chehade <gilles@@poolp.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <event.h>
#include <imsg.h>
#include <inttypes.h>
#include <pwd.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <limits.h>
#include <grp.h>
#include <vis.h>

#include "smtpd.h"
#include "log.h"

void mda_imsg(struct mproc *, struct imsg *);
void mta_imsg(struct mproc *, struct imsg *);
void smtp_imsg(struct mproc *, struct imsg *);

static void pony_shutdown(void);

void
pony_imsg(struct mproc *p, struct imsg *imsg)
{
	struct msg	m;
	int		v;

	if (imsg == NULL)
		pony_shutdown();

	switch (imsg->hdr.type) {
	case IMSG_CONF_START:
		return;
	case IMSG_CONF_END:
		smtp_configure();
		return;
	case IMSG_CTL_VERBOSE:
		m_msg(&m, imsg);
		m_get_int(&m, &v);
		m_end(&m);
		log_trace_verbose(v);
		return;
	case IMSG_CTL_PROFILE:
		m_msg(&m, imsg);
		m_get_int(&m, &v);
		m_end(&m);
		profiling = v;
		return;

	/* smtp imsg */
	case IMSG_SMTP_DNS_PTR:
	case IMSG_SMTP_CHECK_SENDER:
	case IMSG_SMTP_EXPAND_RCPT:
	case IMSG_SMTP_LOOKUP_HELO:
	case IMSG_SMTP_AUTHENTICATE:
	case IMSG_SMTP_TLS_INIT:
	case IMSG_SMTP_TLS_VERIFY:
	case IMSG_SMTP_MESSAGE_COMMIT:
	case IMSG_SMTP_MESSAGE_CREATE:
	case IMSG_SMTP_MESSAGE_OPEN:
	case IMSG_QUEUE_ENVELOPE_SUBMIT:
	case IMSG_QUEUE_ENVELOPE_COMMIT:
	case IMSG_QUEUE_SMTP_SESSION:
	case IMSG_CTL_SMTP_SESSION:
	case IMSG_CTL_PAUSE_SMTP:
	case IMSG_CTL_RESUME_SMTP:
		smtp_imsg(p, imsg);
		return;

        /* mta imsg */
	case IMSG_QUEUE_TRANSFER:
	case IMSG_MTA_OPEN_MESSAGE:
	case IMSG_MTA_LOOKUP_CREDENTIALS:
	case IMSG_MTA_LOOKUP_SOURCE:
	case IMSG_MTA_LOOKUP_HELO:
	case IMSG_MTA_DNS_HOST:
	case IMSG_MTA_DNS_HOST_END:
	case IMSG_MTA_DNS_MX_PREFERENCE:
	case IMSG_MTA_DNS_PTR:
	case IMSG_MTA_TLS_INIT:
	case IMSG_MTA_TLS_VERIFY:
	case IMSG_CTL_RESUME_ROUTE:
	case IMSG_CTL_MTA_SHOW_HOSTS:
	case IMSG_CTL_MTA_SHOW_RELAYS:
	case IMSG_CTL_MTA_SHOW_ROUTES:
	case IMSG_CTL_MTA_SHOW_HOSTSTATS:
	case IMSG_CTL_MTA_BLOCK:
	case IMSG_CTL_MTA_UNBLOCK:
	case IMSG_CTL_MTA_SHOW_BLOCK:
		mta_imsg(p, imsg);
		return;

        /* mda imsg */
	case IMSG_MDA_LOOKUP_USERINFO:
	case IMSG_QUEUE_DELIVER:
	case IMSG_MDA_OPEN_MESSAGE:
	case IMSG_MDA_FORK:
	case IMSG_MDA_DONE:
		mda_imsg(p, imsg);
		return;
	default:
		break;
	}

	errx(1, "session_imsg: unexpected %s imsg", imsg_to_str(imsg->hdr.type));
}

static void
pony_shutdown(void)
{
	log_debug("debug: pony agent exiting");
	_exit(0);
}

int
pony(void)
{
	struct passwd	*pw;

	mda_postfork();
	mta_postfork();
	smtp_postfork();

	/* do not purge listeners and pki, they are purged
	 * in smtp_configure()
	 */
	purge_config(PURGE_TABLES|PURGE_RULES);

	if ((pw = getpwnam(SMTPD_USER)) == NULL)
		fatalx("unknown user " SMTPD_USER);

	if (chroot(PATH_CHROOT) == -1)
		fatal("pony: chroot");
	if (chdir("/") == -1)
		fatal("pony: chdir(\"/\")");

	config_process(PROC_PONY);

	if (setgroups(1, &pw->pw_gid) ||
	    setresgid(pw->pw_gid, pw->pw_gid, pw->pw_gid) ||
	    setresuid(pw->pw_uid, pw->pw_uid, pw->pw_uid))
		fatal("pony: cannot drop privileges");

	imsg_callback = pony_imsg;
	event_init();

	mda_postprivdrop();
	mta_postprivdrop();
	smtp_postprivdrop();

	signal(SIGINT, SIG_IGN);
	signal(SIGTERM, SIG_IGN);
	signal(SIGPIPE, SIG_IGN);
	signal(SIGHUP, SIG_IGN);

	config_peer(PROC_PARENT);
	config_peer(PROC_QUEUE);
	config_peer(PROC_LKA);
	config_peer(PROC_CONTROL);
	config_peer(PROC_CA);

	ca_engine_init();

	if (pledge("stdio inet unix recvfd sendfd", NULL) == -1)
		err(1, "pledge");

	event_dispatch();
	fatalx("exited event loop");

	return (0);
}
@


1.17
log
@smtpd joins the 7 other daemons that share the same log.c file.

The only major difference was the "log_trace" concept that is only
used by smtpd - move it from log.c into util.c and make it a local
concept.  This also needed to rename the global "verbose" variable to
"tracing" in a few places.

OK krw@@ gilles@@ eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pony.c,v 1.16 2016/09/08 12:06:43 eric Exp $	*/
d63 1
a63 1
		filter_configure();
a150 1
	filter_postfork();
@


1.16
log
@Streamline the daemon shutdown sequence.

Only the parent process handles SIGTERM and SIGINT.  Upon receiving one
of those, it closes all imsg sockets and waitpid() for the children. It
fatal()s if one of the sockets is closed unexpectedly.  Other processes
exit() "normally" when one of the imsg sockets is closed.

ok gilles@@ sunil@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pony.c,v 1.15 2016/09/04 16:10:31 eric Exp $	*/
d69 1
a69 1
		log_verbose(v);
a171 1

@


1.15
log
@The smtpd processes are not expected to ever leave their event loop.
So stop pretending that the *_shutdown() functions could ever be called
in this context, and just fatal() if event_dispatch() returns.

ok gilles@@ sunil@@ giovanni@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pony.c,v 1.14 2016/09/01 10:54:25 eric Exp $	*/
a48 1
static void pony_sig_handler(int, short, void *);
d56 3
a136 13
pony_sig_handler(int sig, short event, void *p)
{
	switch (sig) {
	case SIGINT:
	case SIGTERM:
		pony_shutdown();
		break;
	default:
		fatalx("pony_sig_handler: unexpected signal");
	}
}

static void
d139 1
a139 1
	log_info("info: pony agent exiting");
a146 2
	struct event	 ev_sigint;
	struct event	 ev_sigterm;
d181 2
a182 4
	signal_set(&ev_sigint, SIGINT, pony_sig_handler, NULL);
	signal_set(&ev_sigterm, SIGTERM, pony_sig_handler, NULL);
	signal_add(&ev_sigint, NULL);
	signal_add(&ev_sigterm, NULL);
@


1.14
log
@remove noop function

ok sunil@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pony.c,v 1.13 2016/05/28 21:21:20 eric Exp $	*/
d212 2
a213 3
	if (event_dispatch() < 0)
		fatal("event_dispatch");
	pony_shutdown();
@


1.13
log
@Implement the fork+exec pattern in smtpd.

The parent process forks child processes and re-exec each of them with
an additional "-x <proc>" argument.  During the early setup phase, the
parent process sends ipc socket pairs to interconnect the child
processes as needed, and it passes the queue encryption key to the
queue if necessary. When this is done, all processes have their
environment set as in the fork-only case, and they can start doing
their work as before.

ok gilles@@ jung@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pony.c,v 1.12 2016/01/01 12:37:14 jung Exp $	*/
a205 1
	config_done();
@


1.12
log
@add grp.h for setgroups, not necessarily required on OpenBSD but reduces diff
to -portable

ok gilles
@
text
@d1 1
a1 1
/*	$OpenBSD: pony.c,v 1.11 2015/12/13 10:54:11 gilles Exp $	*/
d154 1
a154 1
pid_t
a156 1
	pid_t		 pid;
a159 10

	switch (pid = fork()) {
	case -1:
		fatal("pony: cannot fork");
	case 0:
		post_fork(PROC_PONY);
		break;
	default:
		return (pid);
	}
@


1.11
log
@refactor smtp_session to plug into the filters infrastructure
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 1
@


1.10
log
@add IMSG_SMTP_CHECK_SENDER in list of smtp IMSG
@
text
@d1 1
a1 1
/*	$OpenBSD: pony.c,v 1.9 2015/11/30 12:49:35 gilles Exp $	*/
d60 1
a60 1
		smtp_configure();
d174 1
@


1.9
log
@mechanical rename of some IMSG constants

ok sunil@@, ok jung@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pony.c,v 1.8 2015/10/14 19:39:16 gilles Exp $	*/
d77 1
@


1.8
log
@pledge() pony and lookup

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pony.c,v 1.7 2015/01/20 17:37:54 deraadt Exp $	*/
d80 2
a81 2
	case IMSG_SMTP_SSL_INIT:
	case IMSG_SMTP_SSL_VERIFY:
d104 2
a105 2
	case IMSG_MTA_SSL_INIT:
	case IMSG_MTA_SSL_VERIFY:
@


1.7
log
@use <limits.h> comprehensively.  For now try to push <> includes to
each .c file, and out of the .h files.  To avoid overinclude.
ok gilles, in principle.  If this has been done right, -portable should
become easier to maintain.
@
text
@d1 1
a1 1
/*	$OpenBSD: pony.c,v 1.6 2014/07/08 20:14:46 eric Exp $	*/
d217 3
@


1.6
log
@get rid of mfa leftovers
@
text
@d1 1
a1 1
/*	$OpenBSD: pony.c,v 1.5 2014/05/01 15:50:20 reyk Exp $	*/
d37 1
@


1.5
log
@Move RSA keys from "lka" to a new dedicated "ca" process because lka
is handling some async requests and shouldn't be busy with sync RSA.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pony.c,v 1.4 2014/04/30 08:23:42 reyk Exp $	*/
a80 1
	case IMSG_MFA_SMTP_RESPONSE:
@


1.4
log
@The RSA engine (used by pony) has to wait for a response from the
privileged process (lka) and receive the imsgs in a while loop
synchronously.  But the lka also sends other imsgs (DNS etc.) that can
still be queued up in the buffer when waiting for the RSA response.
This only happens under load with many concurrent connections.  For
now, we just call the pony imsg handler for non-RSA imsgs that are
already in the buffer.

ok gilles@@ eric@@ blambert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pony.c,v 1.3 2014/04/29 19:13:13 reyk Exp $	*/
d213 1
@


1.3
log
@Implement RSA privilege separation for OpenSMTPD, based on my previous
implementation for relayd(8).  The smtpd(8) pony processes (mta
client, smtp server) don't keep the private keys in memory but send
their private key operations as imsgs to the "lookup"/mta process.
It's worth mentioning that this prevents acidental private key leakage
as it could have been caused by "Heartbleed".

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pony.c,v 1.2 2014/04/09 18:55:19 eric Exp $	*/
a45 1
static void pony_imsg(struct mproc *, struct imsg *);
d49 1
a49 1
static void
@


1.2
log
@Zap the mfa process. It is not currently doing anything, and content filtering
will be done at session level anyway.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d215 2
@


1.1
log
@Merge the mda, mta and smtp processes into a single unprivileged
process managing message reception, delivery and transfer.  Mostly
mechanical, but very intrusive as it required to rewamp all IMSG to
fix ambiguities.

with and ok gilles@@
@
text
@a213 1
	config_peer(PROC_MFA);
@

