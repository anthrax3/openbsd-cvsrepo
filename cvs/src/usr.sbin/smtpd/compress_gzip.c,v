head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.6
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.8
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6;
locks; strict;
comment	@ * @;


1.10
date	2015.12.28.22.08.30;	author jung;	state Exp;
branches;
next	1.9;
commitid	ZxnqOQqX6IeYI9jW;

1.9
date	2015.12.14.10.22.11;	author jung;	state Exp;
branches;
next	1.8;
commitid	HRAnniyhGW9Sadln;

1.8
date	2015.01.20.17.37.54;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	ZBTFreARDSMmzOIV;

1.7
date	2013.05.24.17.03.14;	author eric;	state Exp;
branches;
next	1.6;

1.6
date	2013.01.26.09.37.23;	author gilles;	state Exp;
branches;
next	1.5;

1.5
date	2012.10.11.21.34.19;	author gilles;	state Exp;
branches;
next	1.4;

1.4
date	2012.09.16.15.55.55;	author chl;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.30.22.38.22;	author chl;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.30.19.33.25;	author chl;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.26.13.38.43;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.10
log
@remove spaces after '!'

no binary change

ok millert
@
text
@/*	$OpenBSD: compress_gzip.c,v 1.9 2015/12/14 10:22:11 jung Exp $	*/

/*
 * Copyright (c) 2012 Gilles Chehade <gilles@@poolp.org>
 * Copyright (c) 2012 Charles Longeau <chl@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>
#include <sys/stat.h>

#include <ctype.h>
#include <err.h>
#include <fcntl.h>
#include <imsg.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>

#include <zlib.h>

#include "smtpd.h"
#include "log.h"


#define	GZIP_BUFFER_SIZE	16384


static size_t	compress_gzip_chunk(void *, size_t, void *, size_t);
static size_t	uncompress_gzip_chunk(void *, size_t, void *, size_t);
static int	compress_gzip_file(FILE *, FILE *);
static int	uncompress_gzip_file(FILE *, FILE *);


struct compress_backend	compress_gzip = {
	compress_gzip_chunk,
	uncompress_gzip_chunk,

	compress_gzip_file,
	uncompress_gzip_file,
};

static size_t
compress_gzip_chunk(void *ib, size_t ibsz, void *ob, size_t obsz)
{
	z_stream       *strm;
	size_t		ret = 0;

	if ((strm = calloc(1, sizeof *strm)) == NULL)
		return 0;

	strm->zalloc = Z_NULL;
	strm->zfree = Z_NULL;
	strm->opaque = Z_NULL;
	if (deflateInit2(strm, Z_DEFAULT_COMPRESSION, Z_DEFLATED,
		(15+16), 8, Z_DEFAULT_STRATEGY) != Z_OK)
		goto end;

	strm->avail_in  = ibsz;
	strm->next_in   = (unsigned char *)ib;
	strm->avail_out = obsz;
	strm->next_out  = (unsigned char *)ob;
	if (deflate(strm, Z_FINISH) != Z_STREAM_END)
		goto end;

	ret = strm->total_out;

end:
	deflateEnd(strm);
	free(strm);
	return ret;
}


static size_t
uncompress_gzip_chunk(void *ib, size_t ibsz, void *ob, size_t obsz)
{
	z_stream       *strm;
	size_t		ret = 0;

	if ((strm = calloc(1, sizeof *strm)) == NULL)
		return 0;

	strm->zalloc   = Z_NULL;
	strm->zfree    = Z_NULL;
	strm->opaque   = Z_NULL;
	strm->avail_in = 0;
	strm->next_in  = Z_NULL;

	if (inflateInit2(strm, (15+16)) != Z_OK)
		goto end;

	strm->avail_in  = ibsz;
	strm->next_in   = (unsigned char *)ib;
	strm->avail_out = obsz;
	strm->next_out  = (unsigned char *)ob;

	if (inflate(strm, Z_FINISH) != Z_STREAM_END)
		goto end;

	ret = strm->total_out;

end:
	deflateEnd(strm);
	free(strm);
	return ret;
}


static int
compress_gzip_file(FILE *in, FILE *out)
{
	gzFile  gzf;
	char  ibuf[GZIP_BUFFER_SIZE];
	int  r, w;
	int  ret = 0;

	if (in == NULL || out == NULL)
		return (0);

	gzf = gzdopen(fileno(out), "wb");
	if (gzf == NULL)
		return (0);

	while ((r = fread(ibuf, 1, GZIP_BUFFER_SIZE, in)) != 0) {
		if ((w = gzwrite(gzf, ibuf, r)) != r)
			goto end;
	}
	if (!feof(in))
		goto end;

	ret = 1;

end:
	gzclose(gzf);
	return (ret);
}


static int
uncompress_gzip_file(FILE *in, FILE *out)
{
	gzFile  gzf;
	char  obuf[GZIP_BUFFER_SIZE];
	int  r, w;
	int  ret = 0;

	if (in == NULL || out == NULL)
		return (0);

	gzf = gzdopen(fileno(in), "r");
	if (gzf == NULL)
		return (0);

	while ((r = gzread(gzf, obuf, sizeof(obuf))) > 0) {
		if  ((w = fwrite(obuf, r, 1, out)) != 1)
			goto end;
	}
	if (!gzeof(gzf))
		goto end;

	ret = 1;

end:
	gzclose(gzf);
	return (ret);
}
@


1.9
log
@remove trailing whitespace

ok sunil gilles
@
text
@d1 1
a1 1
/*	$OpenBSD: compress_gzip.c,v 1.8 2015/01/20 17:37:54 deraadt Exp $	*/
d146 1
a146 1
	if (! feof(in))
d176 1
a176 1
	if (! gzeof(gzf))
@


1.8
log
@use <limits.h> comprehensively.  For now try to push <> includes to
each .c file, and out of the .h files.  To avoid overinclude.
ok gilles, in principle.  If this has been done right, -portable should
become easier to maintain.
@
text
@d1 1
a1 1
/*	$OpenBSD: compress_gzip.c,v 1.7 2013/05/24 17:03:14 eric Exp $	*/
d68 1
a68 1
	
d134 1
a134 1
	
d137 1
a137 1
	
d141 1
a141 1
	
d148 1
a148 1
	
d150 1
a150 1
	
@


1.7
log
@sync with OpenSMTPD 5.3.2

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: compress_gzip.c,v 1.6 2013/01/26 09:37:23 gilles Exp $	*/
d35 1
@


1.6
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: compress_gzip.c,v 1.5 2012/10/11 21:34:19 gilles Exp $	*/
a22 1
#include <sys/param.h>
d41 9
a49 6
static void*	compress_gzip_new(void);
static size_t	compress_gzip_chunk(void *, void *, size_t, void *, size_t);
static size_t	compress_gzip_finalize(void *, void *, size_t);
static void*	uncompress_gzip_new(void);
static size_t	uncompress_gzip_chunk(void *, void *, size_t, void *, size_t);
static size_t	uncompress_gzip_finalize(void *, void *, size_t);
a51 1
	compress_gzip_new,
d53 1
a53 1
	compress_gzip_finalize,
d55 2
a56 3
	uncompress_gzip_new,
	uncompress_gzip_chunk,
	uncompress_gzip_finalize,
d59 2
a60 2
static void *
compress_gzip_new(void)
d62 26
a87 1
	return (NULL);
d90 1
d92 1
a92 1
compress_gzip_chunk(void *hdl, void *ib, size_t ibsz, void *ob, size_t obsz)
d94 29
a122 1
	return (-1);
a124 5
static size_t
compress_gzip_finalize(void *hdl, void *ob, size_t obsz)
{
	return (-1);
}
d126 2
a127 2
static void *
uncompress_gzip_new(void)
d129 24
a152 1
	return (NULL);
a154 5
static size_t
uncompress_gzip_chunk(void *hdl, void *ib, size_t ibsz, void *ob, size_t obsz)
{
	return (-1);
}
d156 2
a157 2
static size_t
uncompress_gzip_finalize(void *hdl, void *ob, size_t obsz)
d159 24
a182 1
	return (-1);
@


1.5
log
@- char * -> unsigned char *

spotted by clang, ok eric@@ and chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: compress_gzip.c,v 1.4 2012/09/16 15:55:55 chl Exp $	*/
d4 1
a4 1
 * Copyright (c) 2012 Gilles Chehade <gilles@@openbsd.org>
d42 6
a47 6
#define	GZIP_BUFFER_SIZE	16384

static int compress_file_gzip(FILE *, FILE *);
static int uncompress_file_gzip(FILE *, FILE *);
static size_t compress_buffer_gzip(char *, size_t, char *, size_t);
static size_t uncompress_buffer_gzip(char *, size_t, char *, size_t);
d50 7
a56 4
	compress_file_gzip,
	uncompress_file_gzip,
	compress_buffer_gzip,
	uncompress_buffer_gzip
d59 2
a60 2
static int
compress_file_gzip(FILE *in, FILE *out)
d62 1
a62 24
	gzFile	gzf;
	char	ibuf[GZIP_BUFFER_SIZE];
	int	r, w;
	int	ret = 0;

	if (in == NULL || out == NULL)
		return (0);

	gzf = gzdopen(fileno(out), "wb");
	if (gzf == NULL)
		return (0);

	while ((r = fread(ibuf, 1, GZIP_BUFFER_SIZE, in)) != 0) {
		if ((w = gzwrite(gzf, ibuf, r)) != r)
			goto end;
	}
	if (! feof(in))
		goto end;

	ret = 1;

end:
	gzclose(gzf);
	return (ret);
d65 2
a66 2
static int
uncompress_file_gzip(FILE *in, FILE *out)
d68 1
a68 24
	gzFile	gzf;
	char	obuf[GZIP_BUFFER_SIZE];
	int	r, w;
	int	ret = 0;

	if (in == NULL || out == NULL)
		return (0);

	gzf = gzdopen(fileno(in), "r");
	if (gzf == NULL)
		return (0);

	while ((r = gzread(gzf, obuf, sizeof(obuf))) > 0) {
		if  ((w = fwrite(obuf, r, 1, out)) != 1)
			goto end;
	}
	if (! gzeof(gzf))
		goto end;

	ret = 1;

end:
	gzclose(gzf);
	return (ret);
d72 1
a72 1
compress_buffer_gzip(char *in, size_t inlen, char *out, size_t outlen)
d74 2
a75 2
	z_stream	strm;
	size_t		ret = 0;
d77 4
a80 23
	strm.zalloc = Z_NULL;
	strm.zfree = Z_NULL;
	strm.opaque = Z_NULL;

	ret = deflateInit2(&strm, Z_DEFAULT_COMPRESSION, Z_DEFLATED,
	    (15+16), 8, Z_DEFAULT_STRATEGY);
	if (ret != Z_OK)
		return 0;

	strm.avail_in = inlen;
	strm.next_in = (unsigned char *)in;
	strm.avail_out = outlen;
	strm.next_out = (unsigned char *)out;

	ret = deflate(&strm, Z_FINISH);
	if (ret != Z_STREAM_END)
		goto end;

	ret = strm.total_out;

end:
	(void)deflateEnd(&strm);
	return ret;
d84 1
a84 1
uncompress_buffer_gzip(char *in, size_t inlen, char *out, size_t outlen)
d86 2
a87 2
	z_stream	strm;
	size_t		ret = 0;
d89 4
a92 24
	strm.zalloc = Z_NULL;
	strm.zfree = Z_NULL;
	strm.opaque = Z_NULL;
	strm.avail_in = 0;
	strm.next_in = Z_NULL;

	ret = inflateInit2(&strm, (15+16));
	if (ret != Z_OK)
		return ret;

	strm.avail_in = inlen;
	strm.next_in = (unsigned char *)in;
	strm.avail_out = outlen;
	strm.next_out = (unsigned char *)out;

	ret = inflate(&strm, Z_FINISH);
	if (ret != Z_STREAM_END)
		goto end;

	ret = strm.total_out;

end:
	(void)inflateEnd(&strm);
	return ret;
@


1.4
log
@silent warnings

reported by ajacoutot@@

ok gilles@@ ajacoutot@@
@
text
@d1 1
a1 1
/*	$OpenBSD: compress_gzip.c,v 1.3 2012/08/30 22:38:22 chl Exp $	*/
d130 1
a130 1
	strm.next_in = in;
d132 1
a132 1
	strm.next_out = out;
d162 1
a162 1
	strm.next_in = in;
d164 1
a164 1
	strm.next_out = out;
@


1.3
log
@increase fread()/fwrite() buffer from 8k to 16k

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: compress_gzip.c,v 1.2 2012/08/30 19:33:25 chl Exp $	*/
d46 2
a47 2
static size_t compress_buffer_gzip(const char *, size_t, char *, size_t);
static size_t uncompress_buffer_gzip(const char *, size_t, char *, size_t);
d115 1
a115 1
compress_buffer_gzip(const char *in, size_t inlen, char *out, size_t outlen)
d146 1
a146 1
uncompress_buffer_gzip(const char *in, size_t inlen, char *out, size_t outlen)
@


1.2
log
@switch compress_backend to use FILE * instead of file descriptors, like
crypto_backend

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: compress_gzip.c,v 1.1 2012/08/26 13:38:43 gilles Exp $	*/
d42 1
a42 1
#define	GZIP_BUFFER_SIZE	8192
@


1.1
log
@- use the same compression algorithm, gzip, for message file and envelopes
- rename compress_zlib.c to compress_gzip.c

with this commit it is possible to inspect a compressed queue with gzcat :)
@
text
@d1 1
a1 1
/*	$OpenBSD: compress_zlib.c,v 1.4 2012/08/26 11:52:48 gilles Exp $	*/
d44 2
a45 2
static int compress_file_gzip(int, int);
static int uncompress_file_gzip(int, int);
d57 1
a57 1
compress_file_gzip(int fdin, int fdout)
d59 2
a60 2
	gzFile	gzfd;
	char	buf[GZIP_BUFFER_SIZE];
d64 1
a64 1
	if (fdin == -1 || fdout == -1)
d67 2
a68 2
	gzfd = gzdopen(fdout, "wb");
	if (gzfd == NULL)
d71 2
a72 3
	while ((r = read(fdin, buf, sizeof(buf))) > 0) {
		w = gzwrite(gzfd, buf, r);
		if (w != r)
d75 1
a75 1
	if (r == -1)
d81 1
a81 1
	gzclose(gzfd);
d86 1
a86 1
uncompress_file_gzip(int fdin, int fdout)
d88 2
a89 2
	gzFile	gzfd;
	char	buf[GZIP_BUFFER_SIZE];
d93 1
a93 1
	if (fdin == -1 || fdout == -1)
d95 3
a97 3
	
	gzfd = gzdopen(fdin, "r");
	if (gzfd == NULL)
d100 2
a101 3
	while ((r = gzread(gzfd, buf, sizeof(buf))) > 0) {
		w = write(fdout, buf, r);
		if (w != r)
d104 1
a104 1
	if (r == -1)
d110 1
a110 1
	gzclose(gzfd);
@

