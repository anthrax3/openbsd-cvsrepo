head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.14
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.12
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.10
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.4
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.01.20.17.37.54;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	ZBTFreARDSMmzOIV;

1.5
date	2014.07.08.15.45.32;	author eric;	state Exp;
branches;
next	1.4;
commitid	BLF7pkUK3dHr6Hox;

1.4
date	2013.07.19.20.37.07;	author eric;	state Exp;
branches;
next	1.3;

1.3
date	2013.07.19.11.14.08;	author eric;	state Exp;
branches;
next	1.2;

1.2
date	2013.05.24.17.03.14;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.26.09.37.23;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.6
log
@use <limits.h> comprehensively.  For now try to push <> includes to
each .c file, and out of the .h files.  To avoid overinclude.
ok gilles, in principle.  If this has been done right, -portable should
become easier to maintain.
@
text
@/*	$OpenBSD: queue_null.c,v 1.5 2014/07/08 15:45:32 eric Exp $	*/

/*
 * Copyright (c) 2012 Eric Faurot <eric@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>
#include <sys/stat.h>

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <event.h>
#include <fcntl.h>
#include <imsg.h>
#include <inttypes.h>
#include <libgen.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <limits.h>

#include "smtpd.h"
#include "log.h"

static int
queue_null_message_create(uint32_t *msgid)
{
	*msgid = queue_generate_msgid();
	return (1);
}

static int
queue_null_message_commit(uint32_t msgid, const char *path)
{
	return (1);
}

static int
queue_null_message_delete(uint32_t msgid)
{
	return (1);
}

static int
queue_null_message_fd_r(uint32_t msgid)
{
	return (-1);
}

static int
queue_null_message_corrupt(uint32_t msgid)
{
	return (0);
}

static int
queue_null_envelope_create(uint32_t msgid, const char *buf, size_t len,
    uint64_t *evpid)
{
	*evpid = queue_generate_evpid(msgid);
	return (1);
}

static int
queue_null_envelope_delete(uint64_t evpid)
{
	return (1);
}

static int
queue_null_envelope_update(uint64_t evpid, const char *buf, size_t len)
{
	return (1);
}

static int
queue_null_envelope_load(uint64_t evpid, char *buf, size_t len)
{
	return (0);
}

static int
queue_null_envelope_walk(uint64_t *evpid, char *buf, size_t len)
{
	return (-1);
}

static int
queue_null_init(struct passwd *pw, int server, const char *conf)
{
	queue_api_on_message_create(queue_null_message_create);
	queue_api_on_message_commit(queue_null_message_commit);
	queue_api_on_message_delete(queue_null_message_delete);
	queue_api_on_message_fd_r(queue_null_message_fd_r);
	queue_api_on_message_corrupt(queue_null_message_corrupt);
	queue_api_on_envelope_create(queue_null_envelope_create);
	queue_api_on_envelope_delete(queue_null_envelope_delete);
	queue_api_on_envelope_update(queue_null_envelope_update);
	queue_api_on_envelope_load(queue_null_envelope_load);
	queue_api_on_envelope_walk(queue_null_envelope_walk);

	return (1);
}

struct queue_backend queue_backend_null = {
	queue_null_init,
};
@


1.5
log
@various queue improvements:

- add a "close" hook to the backend API.
- improve the sync() pattern in queue_fs: only sync at commit
  time and not for every envelope creation
- various fixes to the experimental external queue API.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 1
@


1.4
log
@Assorted queue improvements:
- cleanup the internal queue backend API and get rid of the QOP_* thing.
- implement a queue_proc backend
- rename queue_fsqueue.c to queue_fs
- enable support for queue encryption
- add an envelope cache
- better logging and error reporting
@
text
@d107 1
a107 1
queue_null_init(struct passwd *pw, int server)
@


1.3
log
@Get rid of env->sc_pw and env->sc_pwqueue.  Early queue initialization
now happens in queue_init(), and backends take the queue passwd as
parameter in their init function.

Remove useless SMTPD_FILTER_USER while there.
@
text
@d1 1
a1 1
/*	$OpenBSD: queue_null.c,v 1.2 2013/05/24 17:03:14 eric Exp $	*/
d43 6
a48 3
static int queue_null_init(struct passwd *, int);
static int queue_null_message(enum queue_op, uint32_t *);
static int queue_null_envelope(enum queue_op , uint64_t *, char *, size_t);
d50 11
a60 5
struct queue_backend queue_backend_null = {
	queue_null_init,
	queue_null_message,
	queue_null_envelope,
};
d62 5
a66 1
static int	devnull;
d69 1
a69 1
queue_null_init(struct passwd *pw, int server)
d71 2
d74 7
a80 5
	devnull = open("/dev/null", O_WRONLY, 0777);
	if (devnull == -1) {
		log_warn("open");
		return (0);
	}
d82 3
d89 4
a92 18
queue_null_message(enum queue_op qop, uint32_t *msgid)
{
	switch (qop) {
	case QOP_CREATE:
		*msgid = queue_generate_msgid();
		return (1);
	case QOP_DELETE:
	case QOP_COMMIT:
		return (1);
	case QOP_FD_R:
		return (-1);
	case QOP_FD_RW:
		return dup(devnull);
	case QOP_CORRUPT:
		return (0);
	default:
		fatalx("queue_null_message: unsupported operation.");
	}
d94 3
d101 1
a101 1
queue_null_envelope(enum queue_op qop, uint64_t *evpid, char *buf, size_t len)
d103 2
a104 1
	uint32_t	msgid;
d106 13
a118 2
	if (qop == QOP_WALK)
		return (-1);
d120 2
a121 14
	switch (qop) {
	case QOP_CREATE:
		msgid = evpid_to_msgid(*evpid);
		*evpid = queue_generate_evpid(msgid);
		return (1);
	case QOP_DELETE:
		return (1);
	case QOP_LOAD:
		return (0);
	case QOP_UPDATE:
		return (1);
	default:
		fatalx("queue_null_envelope: unsupported operation.");
	}
d123 3
a125 2
	return (0);
}
@


1.2
log
@sync with OpenSMTPD 5.3.2

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: queue_null.c,v 1.1 2013/01/26 09:37:23 gilles Exp $	*/
d43 1
a43 1
static int queue_null_init(int);
d56 1
a56 1
queue_null_init(int server)
@


1.1
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: queue_fsqueue.c,v 1.53 2012/08/30 18:19:50 eric Exp $	*/
a21 1
#include <sys/param.h>
@

