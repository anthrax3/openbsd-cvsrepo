head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.8
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.10
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.4
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.01.20.17.37.54;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	ZBTFreARDSMmzOIV;

1.8
date	2014.07.10.14.45.02;	author eric;	state Exp;
branches;
next	1.7;
commitid	dolePHRcgnf1dDVL;

1.7
date	2014.02.04.14.56.03;	author eric;	state Exp;
branches;
next	1.6;

1.6
date	2013.11.20.09.22.42;	author eric;	state Exp;
branches;
next	1.5;

1.5
date	2013.10.27.17.47.53;	author eric;	state Exp;
branches;
next	1.4;

1.4
date	2013.07.19.21.34.31;	author eric;	state Exp;
branches;
next	1.3;

1.3
date	2013.07.19.15.14.23;	author eric;	state Exp;
branches;
next	1.2;

1.2
date	2013.05.24.17.03.14;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.26.09.37.23;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.9
log
@use <limits.h> comprehensively.  For now try to push <> includes to
each .c file, and out of the .h files.  To avoid overinclude.
ok gilles, in principle.  If this has been done right, -portable should
become easier to maintain.
@
text
@/*	$OpenBSD: scheduler_null.c,v 1.8 2014/07/10 14:45:02 eric Exp $	*/

/*
 * Copyright (c) 2012 Eric Faurot <eric@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>

#include <ctype.h>
#include <err.h>
#include <event.h>
#include <fcntl.h>
#include <imsg.h>
#include <stdio.h>
#include <limits.h>

#include "smtpd.h"

static int scheduler_null_init(const char *);
static int scheduler_null_insert(struct scheduler_info *);
static size_t scheduler_null_commit(uint32_t);
static size_t scheduler_null_rollback(uint32_t);
static int scheduler_null_update(struct scheduler_info *);
static int scheduler_null_delete(uint64_t);
static int scheduler_null_hold(uint64_t, uint64_t);
static int scheduler_null_release(int, uint64_t, int);
static int scheduler_null_batch(int, int*, size_t*, uint64_t*, int*);
static size_t scheduler_null_messages(uint32_t, uint32_t *, size_t);
static size_t scheduler_null_envelopes(uint64_t, struct evpstate *, size_t);
static int scheduler_null_schedule(uint64_t);
static int scheduler_null_remove(uint64_t);
static int scheduler_null_suspend(uint64_t);
static int scheduler_null_resume(uint64_t);

struct scheduler_backend scheduler_backend_null = {
	scheduler_null_init,

	scheduler_null_insert,
	scheduler_null_commit,
	scheduler_null_rollback,

	scheduler_null_update,
	scheduler_null_delete,
	scheduler_null_hold,
	scheduler_null_release,

	scheduler_null_batch,

	scheduler_null_messages,
	scheduler_null_envelopes,
	scheduler_null_schedule,
	scheduler_null_remove,
	scheduler_null_suspend,
	scheduler_null_resume,
};

static int
scheduler_null_init(const char *arg)
{
	return (1);
}

static int
scheduler_null_insert(struct scheduler_info *si)
{
	return (0);
}

static size_t
scheduler_null_commit(uint32_t msgid)
{
	return (0);
}

static size_t
scheduler_null_rollback(uint32_t msgid)
{
	return (0);
}

static int
scheduler_null_update(struct scheduler_info *si)
{
	return (0);
}

static int
scheduler_null_delete(uint64_t evpid)
{
	return (0);
}

static int
scheduler_null_hold(uint64_t evpid, uint64_t holdq)
{
	return (0);
}

static int
scheduler_null_release(int type, uint64_t holdq, int n)
{
	return (0);
}

static int
scheduler_null_batch(int typemask, int *delay, size_t *count, uint64_t *evpids, int *types)
{
	*delay = 0;

	return (0);
}

static int
scheduler_null_schedule(uint64_t evpid)
{
	return (0);
}

static int
scheduler_null_remove(uint64_t evpid)
{
	return (0);
}

static int
scheduler_null_suspend(uint64_t evpid)
{
	return (0);
}

static int
scheduler_null_resume(uint64_t evpid)
{
	return (0);
}

static size_t
scheduler_null_messages(uint32_t from, uint32_t *dst, size_t size)
{
	return (0);
}

static size_t
scheduler_null_envelopes(uint64_t from, struct evpstate *dst, size_t size)
{
	return (0);
}
@


1.8
log
@Improve the scheduler, better and simpler.

- Get rid of the scheduler_batch structure. The scheduler can now return
  envelopes of different types in a single run, interlacing them to avoid
  batch effects.

- Ask for an acknowledgement from the queue when removing or expiring
  an envelope to benefit from the inflight envelope limitation mechanism.
  This ensures that the scheduler always keeps sending envelopes at a rate
  that the queue can sustain in all cases.

- Limit the number of envelopes in a holdq.  When a holdq is full,
  new envelopes are put back in the pending queue instead, with a
  shorter retry time.

- Plumbing for proc-ified schedulers.

imsg version bump. smtpctl stop before updating.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d30 1
@


1.7
log
@internal improvements and cleanups

- get rid of the whole penalty thing for failed envelopes in the mta and scheduler.
- do not disable routes on smtp errors
- try to schedule all types of envelopes on each scheduler frame.
@
text
@d33 1
a33 1
static int scheduler_null_init(void);
d41 1
a41 1
static int scheduler_null_batch(int, struct scheduler_batch *);
d72 1
a72 1
scheduler_null_init(void)
d120 1
a120 1
scheduler_null_batch(int typemask, struct scheduler_batch *ret)
d122 1
a122 2
	ret->type = SCHED_NONE;
	ret->evpcount = 0;
@


1.6
log
@Rework the mda and scheduler to use the holdq mechanism instead of
tempfail for limiting the number of pending deliveries to the same
user.  This allows to reach optimal delivery time even in case of
burst, while keeping the number of inflight envelopes low.
@
text
@@


1.5
log
@Implement a feedback mechanism which allows the mta to "hold" envelopes
in the scheduler when it has too many tasks for a given relay.  The
envelopes are put on a wait queue, and are not scheduled again until
the mta "releases" some envelopes from that queue.

It prevents from having too many inflight envelopes, which are out of reach
for the admin.
@
text
@d40 1
a40 1
static int scheduler_null_release(uint64_t, int);
d114 1
a114 1
scheduler_null_release(uint64_t holdq, int n)
@


1.4
log
@Implement a scheduler_proc backend
@
text
@d39 2
d58 2
d103 12
@


1.3
log
@scheduler improvements:
- implement suspend/resume scheduling for individual envelopes or message,
  with the associated smtpctl commands.
- allow the mta to request immediate scheduling of an envelope.
- on temporary failures a penalty can be given to further delay the next try.
@
text
@@


1.2
log
@sync with OpenSMTPD 5.3.2

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scheduler_null.c,v 1.1 2013/01/26 09:37:23 gilles Exp $	*/
d44 2
d63 2
d120 12
@


1.1
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scheduler_ramqueue.c,v 1.24 2012/11/12 14:58:53 eric Exp $	*/
a21 1
#include <sys/param.h>
d33 2
a34 2
static void scheduler_null_init(void);
static void scheduler_null_insert(struct scheduler_info *);
d37 3
a39 3
static void scheduler_null_update(struct scheduler_info *);
static void scheduler_null_delete(uint64_t);
static void scheduler_null_batch(int, struct scheduler_batch *);
d42 2
a43 2
static void scheduler_null_schedule(uint64_t);
static void scheduler_null_remove(uint64_t);
d63 1
a63 1
static void
d66 1
d69 1
a69 1
static void
d72 1
d87 1
a87 1
static void
d90 1
d93 1
a93 1
static void
d96 1
d99 1
a99 1
static void
d103 3
d108 1
a108 1
static void
d111 1
d114 1
a114 1
static void
d117 1
@

