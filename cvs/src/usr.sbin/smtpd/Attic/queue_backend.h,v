head	1.4;
access;
symbols
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2010.10.09.22.07.56;	author gilles;	state dead;
branches;
next	1.3;

1.3
date	2010.06.01.23.06.23;	author jacekm;	state Exp;
branches;
next	1.2;

1.2
date	2010.06.01.19.47.09;	author jacekm;	state dead;
branches;
next	1.1;

1.1
date	2010.05.31.23.38.56;	author jacekm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@no longer compiled, i will reintroduce them later, lots of stuff needs to
be done before we can write queue backends anyway ...
@
text
@/*	$OpenBSD: queue_backend.h,v 1.3 2010/06/01 23:06:23 jacekm Exp $	*/

/*
 * Copyright (c) 2010 Jacek Masiulaniec <jacekm@@dobremiasto.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define INVALID_ID	1

struct action_be {
	u_int64_t	 content_id;
	u_int64_t	 action_id;
	time_t		 birth;
	char		*aux;
	char		*status;
};

int		 queue_be_content_create(u_int64_t *);
int		 queue_be_content_open(u_int64_t, int);
void		 queue_be_content_delete(u_int64_t);

int		 queue_be_action_new(u_int64_t, u_int64_t *, char *);
int		 queue_be_action_read(struct action_be *, u_int64_t, u_int64_t);
int		 queue_be_action_status(u_int64_t, u_int64_t, char *);
void		 queue_be_action_delete(u_int64_t, u_int64_t);

int		 queue_be_commit(u_int64_t);

u_int64_t	 queue_be_encode(const char *);
char		*queue_be_decode(u_int64_t);

int		 queue_be_init(char *, uid_t, gid_t);
int		 queue_be_getnext(struct action_be *);
@


1.3
log
@new queue, again; gcc2 compile tested by deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: queue_backend.h,v 1.1 2010/05/31 23:38:56 jacekm Exp $	*/
@


1.2
log
@New queue doesn't compile on gcc2, back out.  Spotted by deraadt@@
@
text
@@


1.1
log
@Rewrite entire queue code.

Major goals:

1) Fix bad performance caused by the runner process doing full queue
read in 1s intervals.  My Soekris can now happily accept >50 msg/s
while having multi-thousand queue; before, one hundred queue would
bring the system to its knees.

2) Introduce Qmail-like scheduler that doesn't write as much to the
disk so that it needs less code for servicing error conditions,
which in some places can be tricky to get right.

3) Introduce separation between the scheduler and the backend; these
two queue aspects shouldn't be too tied too each other.  This means
that eg. storing queue in SQL requires rewrite of just queue_backend.c.

4) Make on-disk queue format architecture independent, and more
easily extensible, to reduce number of flag days in the future.

Minor goals:

ENOSPC no longer prevents delivery attempts, fixed session limiting
for relayed mail, improved batching of "relay via" mails, human-readable
mailq output, "show queue raw" command, clearer logging, sending
of single bounce about multiple recipients, exact delay= computation,
zero delay between deliveries while within session limit (currently
1s delay between re-scheduling is enforced), mta no longer requests
content fd, corrected session limit for bounce submissions, tiny
<100B queue files instead of multi-KB, detect loops before accepting
mail, reduce traffic on imsg channels by killing enormous struct
submit_status.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

