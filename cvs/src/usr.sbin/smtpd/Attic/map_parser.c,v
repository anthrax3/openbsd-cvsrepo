head	1.7;
access;
symbols
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2011.08.29.20.34.09;	author chl;	state dead;
branches;
next	1.6;

1.6
date	2011.04.17.13.36.07;	author gilles;	state Exp;
branches;
next	1.5;

1.5
date	2010.11.28.14.35.58;	author gilles;	state Exp;
branches;
next	1.4;

1.4
date	2010.11.28.13.56.43;	author gilles;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.27.09.49.23;	author gilles;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.21.21.47.38;	author gilles;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.21.21.04.29;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove unused file

ok gilles@@
@
text
@/*	$OpenBSD: map_parser.c,v 1.6 2011/04/17 13:36:07 gilles Exp $	*/

/*
 * Copyright (c) 2010 Gilles Chehade <gilles@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/param.h>
#include <sys/socket.h>

#include <ctype.h>
#include <event.h>
#include <imsg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "smtpd.h"
#include "log.h"

struct map_parser *map_parser_lookup(enum map_kind);

static void *map_parse_secret(char *, char *, size_t);
static void *map_parse_alias(char *, char *, size_t);
static void *map_parse_virtual(char *, char *, size_t);

struct map_parser map_parsers[] = {
	{ K_NONE,	NULL },
	{ K_ALIAS,	map_parse_alias },
	{ K_VIRTUAL,	map_parse_virtual },
	{ K_SECRET,	map_parse_secret }
};

struct map_parser *
map_parser_lookup(enum map_kind kind)
{
	u_int8_t i;

	for (i = 0; i < nitems(map_parsers); ++i)
		if (map_parsers[i].kind == kind)
			break;

	if (i == nitems(map_parsers))
		fatalx("invalid map kind");

	return &map_parsers[i];
}

static void *
map_parse_secret(char *key, char *line, size_t len)
{
	struct map_secret *map_secret = NULL;
	char *p;

	/* credentials are stored as user:password */
	if (len < 3)
		return NULL;

	/* too big to fit in a smtp session line */
	if (len >= MAX_LINE_SIZE)
		return NULL;

	p = strchr(line, ':');
	if (p == NULL)
		return NULL;

	if (p == line || p == line + len - 1)
		return NULL;
	*p++ = '\0';

	map_secret = calloc(1, sizeof(struct map_secret));
	if (map_secret == NULL)
		fatalx("calloc");

	if (strlcpy(map_secret->username, line,
		sizeof(map_secret->username)) >=
	    sizeof(map_secret->username))
		goto err;

	if (strlcpy(map_secret->password, p,
		sizeof(map_secret->password)) >=
	    sizeof(map_secret->password))
		goto err;

	return map_secret;

err:
	free(map_secret);
	return NULL;
}

static void *
map_parse_alias(char *key, char *line, size_t len)
{
	char	       	*subrcpt;
	char	       	*endp;
	struct map_alias	*map_alias = NULL;
	struct expandnode	 expnode;

	map_alias = calloc(1, sizeof(struct map_alias));
	if (map_alias == NULL)
		fatalx("calloc");

	while ((subrcpt = strsep(&line, ",")) != NULL) {
		/* subrcpt: strip initial whitespace. */
		while (isspace((int)*subrcpt))
			++subrcpt;
		if (*subrcpt == '\0')
			goto error;

		/* subrcpt: strip trailing whitespace. */
		endp = subrcpt + strlen(subrcpt) - 1;
		while (subrcpt < endp && isspace((int)*endp))
			*endp-- = '\0';

		bzero(&expnode, sizeof (struct expandnode));
		if (! alias_parse(&expnode, subrcpt))
			goto error;

		expandtree_increment_node(&map_alias->expandtree, &expnode);
		map_alias->nbnodes++;
	}

	return map_alias;

error:
	/* free elements in map_alias->expandtree */
	expandtree_free_nodes(&map_alias->expandtree);
	free(map_alias);
	return NULL;
}

static void *
map_parse_virtual(char *key, char *line, size_t len)
{
	char	       	*subrcpt;
	char	       	*endp;
	struct map_virtual	*map_virtual = NULL;
	struct expandnode	 expnode;

	map_virtual = calloc(1, sizeof(struct map_virtual));
	if (map_virtual == NULL)
		fatalx("calloc");

	/* domain key, discard value */
	if (strchr(key, '@@') == NULL)
		return map_virtual;

	while ((subrcpt = strsep(&line, ",")) != NULL) {
		/* subrcpt: strip initial whitespace. */
		while (isspace((int)*subrcpt))
			++subrcpt;
		if (*subrcpt == '\0')
			goto error;

		/* subrcpt: strip trailing whitespace. */
		endp = subrcpt + strlen(subrcpt) - 1;
		while (subrcpt < endp && isspace((int)*endp))
			*endp-- = '\0';

		bzero(&expnode, sizeof (struct expandnode));
		if (! alias_parse(&expnode, subrcpt))
			goto error;

		expandtree_increment_node(&map_virtual->expandtree, &expnode);
		map_virtual->nbnodes++;
	}

	return map_virtual;

error:
	/* free elements in map_virtual->expandtree */
	expandtree_free_nodes(&map_virtual->expandtree);
	free(map_virtual);
	return NULL;
}
@


1.6
log
@cleanups, cosmethic changes, functions that should be static are now static
no functionnal change
@
text
@d1 1
a1 1
/*	$OpenBSD: map_parser.c,v 1.5 2010/11/28 14:35:58 gilles Exp $	*/
@


1.5
log
@remove all unused headers
@
text
@d1 1
a1 1
/*	$OpenBSD: map_parser.c,v 1.4 2010/11/28 13:56:43 gilles Exp $	*/
d37 3
a39 3
void *map_parse_secret(char *, char *, size_t);
void *map_parse_alias(char *, char *, size_t);
void *map_parse_virtual(char *, char *, size_t);
d63 1
a63 1
void *
d106 1
a106 1
void *
d147 1
a147 1
void *
@


1.4
log
@a bit of .h cleanups, no functionnal change
@
text
@d1 1
a1 1
/*	$OpenBSD: map_parser.c,v 1.3 2010/04/27 09:49:23 gilles Exp $	*/
a25 3
#include <db.h>
#include <err.h>
#include <errno.h>
a26 1
#include <fcntl.h>
@


1.3
log
@initial work at fixing aliases support:
- kill struct alias, struct expandnode is used instead
- introduce map_parse_alias() and map_parse_virtual()
- aliases and virtual code no longer assume db(3) but use the map API which
  lets them become backend agnostic AND value-checked. this actually makes
  the code simpler by removing all values parsing from aliases.c
- rename K_SECRETS -> K_SECRET, K_ALIASES -> K_ALIAS for consistency the
  enum has singular names.
- aliases, virtual and forward now work with an expandtree and deal with
  multiple levels of resolving by merging expandtree's

more coming soon ;)
@
text
@d1 1
a1 1
/*	$OpenBSD: map_parser.c,v 1.2 2010/04/21 21:47:38 gilles Exp $	*/
d31 1
d37 1
@


1.2
log
@introduce first map parser for maps of kind K_SECRETS !

map_parse_secret() converts a map value into a struct map_secret. lka no
longer needs to do any parsing, it simply calls map_lookup() with kind
K_SECRETS, checks if it returned a !NULL value, and call lka_encode_secret
to safely do the base64 encoding.
@
text
@d1 1
a1 1
/*	$OpenBSD: map_parser.c,v 1.1 2010/04/21 21:04:29 gilles Exp $	*/
d39 3
a41 1
void *map_parse_secret(char *, size_t);
d44 4
a47 4
	{ K_NONE, NULL },
	{ K_ALIASES, NULL },
	{ K_VIRTUAL, NULL },
	{ K_SECRETS, map_parse_secret }
d66 1
a66 1
map_parse_secret(char *line, size_t len)
d105 86
@


1.1
log
@map.c is growing big, split it into three different files:
map.c contains the map API calls as usable by smtpd processes,
map_backend.c contains backend implementations and map_parser.c contains
parser implementations used internally by the map API
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 1
d45 1
a45 1
	{ K_SECRETS, NULL }
d61 43
@

