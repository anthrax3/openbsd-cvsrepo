head	1.7;
access;
symbols
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@ * @;


1.7
date	2013.07.19.12.36.42;	author eric;	state dead;
branches;
next	1.6;

1.6
date	2013.01.26.09.37.24;	author gilles;	state Exp;
branches;
next	1.5;

1.5
date	2012.09.03.21.28.21;	author chl;	state Exp;
branches;
next	1.4;

1.4
date	2012.08.20.18.15.37;	author gilles;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.19.14.16.58;	author chl;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.14.21.56.13;	author gilles;	state Exp;
branches;
next	1.1;

1.1
date	2011.08.27.22.32.41;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove obsolete file
@
text
@/*	$OpenBSD: smtpfilter.c,v 1.6 2013/01/26 09:37:24 gilles Exp $	*/

/*
 * Copyright (c) 2011 Gilles Chehade <gilles@@poolp.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <stdlib.h>

#include "filter_api.h"

enum filter_status helo_cb(uint64_t, struct filter_helo *, void *);
enum filter_status ehlo_cb(uint64_t, struct filter_helo *, void *);
enum filter_status mail_cb(uint64_t, struct filter_mail *, void *);
enum filter_status rcpt_cb(uint64_t, struct filter_rcpt *, void *);
enum filter_status dataline_cb(uint64_t, struct filter_dataline *, void *);


/*
 * *ALL* of the callbacks follow the same principle:
 *
 * First parameter is a unique identifier that has been assigned to the
 * client session when it connected. The same client session entering a
 * second callback will enter it with the same id.
 *
 * Second parameter is a callback-specific structure filled with all of
 * the information necessary to handle filtering at the callback stage.
 * Some of the callbacks allow envelope or data rewriting.
 *
 * Third parameter is a filter-specific argument. It can be NULL, or it
 * can be anything the developer wants, typically a structure allocated
 * in main() to keep various states.
 * A different paramter can be registered for each callback.
 *
 * RETURN VALUES:
 *
 * callbacks return either one of:
 *
 *	STATUS_IGNORE  : do not take a decision to accept or reject
 *	STATUS_REJECT  : reject the envelope / message depending on hook
 *	STATUS_ACCEPT  : accept the envelope / message depending on hook
 *	STATUS_WAITING : the callback is waiting for an asynch. event
 *
 * -- gilles@@
 *
 */

enum filter_status
helo_cb(uint64_t id, struct filter_helo *helo, void *mystuff)
{
	return STATUS_IGNORE;
}

enum filter_status
mail_cb(uint64_t id, struct filter_mail *mail, void *mystuff)
{
	return STATUS_IGNORE;
}

enum filter_status
rcpt_cb(uint64_t id, struct filter_rcpt *rcpt, void *mystuff)
{
	if (rcpt->user[0] == 'a')
		return STATUS_REJECT;
	return STATUS_IGNORE;
}


/*
 * Not all callbacks need to be implemented !
 */

int
main(int argc, char *argv[])
{
	void	*mystuff;

	/*
	 * this MUST be the first think your filter does.
	 * do not do anything before that call: NOTHING.
	 */
	filter_init();


	/*
	 * NOW you can allocate your structures, read a configuration
	 * file or do anything required to prepare your filter before
	 * it starts handling requests.
	 */
	mystuff = malloc(42);


	/*
	 * we only need to register for callbacks we're interested in
	 */
	filter_register_helo_callback(helo_cb, mystuff);
	filter_register_mail_callback(mail_cb, mystuff);
	filter_register_rcpt_callback(rcpt_cb, mystuff);

	/*
	 * filter_register_ehlo_callback(helo_cb, mystuff);
	 * filter_register_rcpt_callback(rcpt_cb, mystuff);
	 * filter_register_dataline_callback(dataline_cb, mystuff);
	 * filter_register_quit_callback(quit_cb, mystuff);
	 */

	/*
	 * finally, enter the filter_loop().
	 * it will not return unless a critical failure happens.
	 * do not call exit() from a callback.
	 */
	filter_loop();

	return 0;
}
@


1.6
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpfilter.c,v 1.5 2012/09/03 21:28:21 chl Exp $	*/
@


1.5
log
@fix the example filter to match current API by using
enum filter_status return value instead of plain int

ok todd@@ gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpfilter.c,v 1.4 2012/08/20 18:15:37 gilles Exp $	*/
d4 1
a4 1
 * Copyright (c) 2011 Gilles Chehade <gilles@@openbsd.org>
@


1.4
log
@- fix the example filter to match current API

spotted by todd@@ ;-)
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpfilter.c,v 1.3 2012/08/19 14:16:58 chl Exp $	*/
d64 1
a64 1
	return 1;
d70 1
a70 1
	return 1;
d77 2
a78 2
		return 0;
	return 1;
@


1.3
log
@coding style: replace all occurences of u_int* with uint*

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpfilter.c,v 1.2 2012/06/14 21:56:13 gilles Exp $	*/
d25 5
a29 5
int helo_cb(uint64_t, struct filter_helo *, void *);
int ehlo_cb(uint64_t, struct filter_helo *, void *);
int mail_cb(uint64_t, struct filter_mail *, void *);
int rcpt_cb(uint64_t, struct filter_rcpt *, void *);
int data_cb(uint64_t, struct filter_data *, void *);
d50 1
a50 2
 * callbacks return 1 if the test succeesd, 0 if it fails.
 * once a test fails, the entire envelope is rejected.
d52 4
d61 1
a61 1
int
d67 1
a67 1
int
d73 1
a73 1
int
d116 2
a117 2
	 * filter_register_data_callback(data_cb, mystuff);
	 * filter_register_quit_callback(data_cb, mystuff);
@


1.2
log
@- rename filter.h -> filter_api.h to be consistent with upcoming changes
@
text
@d1 1
a1 1
/*	$OpenBSD: smtpfilter.c,v 1.1 2011/08/27 22:32:41 gilles Exp $	*/
d25 5
a29 5
int helo_cb(u_int64_t, struct filter_helo *, void *);
int ehlo_cb(u_int64_t, struct filter_helo *, void *);
int mail_cb(u_int64_t, struct filter_mail *, void *);
int rcpt_cb(u_int64_t, struct filter_rcpt *, void *);
int data_cb(u_int64_t, struct filter_data *, void *);
d59 1
a59 1
helo_cb(u_int64_t id, struct filter_helo *helo, void *mystuff)
d65 1
a65 1
mail_cb(u_int64_t id, struct filter_mail *mail, void *mystuff)
d71 1
a71 1
rcpt_cb(u_int64_t id, struct filter_rcpt *rcpt, void *mystuff)
@


1.1
log
@initial support for a session-time filtering API

currently only HELO/EHLO, MAIL, RCPT are supported, however ... I have
voluntarily disabled filters at smtpd.conf level so people don't play with
it until the API has stabilized a bit

discussed with several people in private, no one opposed the feature
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d23 1
a23 1
#include "filter.h"
@

