head	1.4;
access;
symbols
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@ * @;


1.4
date	2013.01.26.09.48.29;	author gilles;	state dead;
branches;
next	1.3;

1.3
date	2012.09.25.17.38.55;	author eric;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.25.15.39.11;	author gilles;	state Exp;
branches;
next	1.1;

1.1
date	2011.12.13.22.04.35;	author eric;	state Exp;
branches;
next	;


desc
@@


1.4
log
@users can now be looked up in tables, the user_backend code is no longer
used and can bite the dust
@
text
@/*	$OpenBSD: user_pwd.c,v 1.3 2012/09/25 17:38:55 eric Exp $	*/

/*
 * Copyright (c) 2011 Gilles Chehade <gilles@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/param.h>
#include <sys/socket.h>
#include <sys/stat.h>

#include <event.h>
#include <imsg.h>
#include <libgen.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "smtpd.h"
#include "log.h"

static int user_getpw_ret(struct mta_user *, struct passwd *); /* helper */
static int user_getpwnam(struct mta_user *, const char *);

struct user_backend user_backend_pwd = {
	user_getpwnam
};

static int
user_getpw_ret(struct mta_user *u, struct passwd *pw)
{
	if (strlcpy(u->username, pw->pw_name, sizeof (u->username))
	    >= sizeof (u->username))
		return 0;

	if (strlcpy(u->password, pw->pw_passwd, sizeof (u->password))
	    >= sizeof (u->password))
		return 0;

	if (strlcpy(u->directory, pw->pw_dir, sizeof (u->directory))
	    >= sizeof (u->directory))
		return 0;

	u->uid = pw->pw_uid;
	u->gid = pw->pw_gid;

	return 1;
}

static int
user_getpwnam(struct mta_user *u, const char *username)
{
	struct passwd *pw;

	pw = getpwnam(username);
	if (pw == NULL)
		return 0;

	return user_getpw_ret(u, pw);
}
@


1.3
log
@make const arguments const, and static functions static.

ok chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: user_pwd.c,v 1.2 2012/08/25 15:39:11 gilles Exp $	*/
@


1.2
log
@- offline enqueue does not need to use the user_backend API, it relies on
	system users ... use getpwuid() instead of ub->getbyuid()
- since that was the only caller, get rid of user_backend->getbyuid()

this is the first step towards removing the user_backend API and making
user lookups available through the maps API (yes, virtual user support ;)

ok eric@@, ok chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: user_pwd.c,v 1.1 2011/12/13 22:04:35 eric Exp $	*/
d38 2
a39 2
int user_getpw_ret(struct mta_user *, struct passwd *); /* helper */
int user_getpwnam(struct mta_user *, char *);
d45 1
a45 1
int
d66 2
a67 2
int
user_getpwnam(struct mta_user *u, char *username)
@


1.1
log
@split user_backend.c into user.c and user_pwd.c to be consistent with the
backend scheme. Also rename USER_GETPWNAM to USER_PWD.

ok chl@@ gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: user_backend.c,v 1.2 2011/12/08 17:00:28 todd Exp $	*/
a39 1
int user_getpwuid(struct mta_user *, uid_t);
d42 1
a42 2
	user_getpwnam,
	user_getpwuid,
a71 12
	if (pw == NULL)
		return 0;

	return user_getpw_ret(u, pw);
}

int
user_getpwuid(struct mta_user *u, uid_t uid)
{
	struct passwd *pw;

	pw = getpwuid(uid);
@

