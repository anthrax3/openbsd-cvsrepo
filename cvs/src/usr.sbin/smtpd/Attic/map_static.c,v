head	1.10;
access;
symbols
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2013.01.26.09.42.46;	author gilles;	state dead;
branches;
next	1.9;

1.9
date	2012.11.12.14.58.53;	author eric;	state Exp;
branches;
next	1.8;

1.8
date	2012.10.14.11.58.23;	author gilles;	state Exp;
branches;
next	1.7;

1.7
date	2012.09.27.17.47.49;	author chl;	state Exp;
branches;
next	1.6;

1.6
date	2012.09.21.16.40.20;	author eric;	state Exp;
branches;
next	1.5;

1.5
date	2012.09.21.10.22.29;	author eric;	state Exp;
branches;
next	1.4;

1.4
date	2012.09.19.12.59.59;	author eric;	state Exp;
branches;
next	1.3;

1.3
date	2012.09.19.12.45.04;	author eric;	state Exp;
branches;
next	1.2;

1.2
date	2012.09.19.09.06.35;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2012.05.29.19.53.10;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.10
log
@these are no longer used, maps were replaced with something better
@
text
@/*	$OpenBSD: map_static.c,v 1.9 2012/11/12 14:58:53 eric Exp $	*/

/*
 * Copyright (c) 2012 Gilles Chehade <gilles@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/param.h>
#include <sys/socket.h>

#include <ctype.h>
#include <err.h>
#include <event.h>
#include <fcntl.h>
#include <imsg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "smtpd.h"
#include "log.h"


/* static backend */
static void *map_static_open(struct map *);
static void *map_static_lookup(void *, const char *, enum map_kind);
static int   map_static_compare(void *, const char *, enum map_kind,
    int (*)(const char *, const char *));
static void  map_static_close(void *);

static void *map_static_credentials(const char *, char *, size_t);
static void *map_static_alias(const char *, char *, size_t);
static void *map_static_virtual(const char *, char *, size_t);
static void *map_static_netaddr(const char *, char *, size_t);

struct map_backend map_backend_static = {
	map_static_open,
	NULL,
	map_static_close,
	map_static_lookup,
	map_static_compare
};

static void *
map_static_open(struct map *map)
{
	return map;
}

static void
map_static_close(void *hdl)
{
	return;
}

static void *
map_static_lookup(void *hdl, const char *key, enum map_kind kind)
{
	struct map	*m  = hdl;
	struct mapel	*me = NULL;
	char		*line;
	void		*ret;
	size_t		 len;

	line = NULL;
	TAILQ_FOREACH(me, &m->m_contents, me_entry) {
		if (strcmp(key, me->me_key) == 0) {
			if (me->me_val == NULL)
				return NULL;
			line = strdup(me->me_val);
			break;
		}
	}

	if (line == NULL)
		return NULL;

	len = strlen(line);
	switch (kind) {
	case K_ALIAS:
		ret = map_static_alias(key, line, len);
		break;

	case K_CREDENTIALS:
		ret = map_static_credentials(key, line, len);
		break;

	case K_VIRTUAL:
		ret = map_static_virtual(key, line, len);
		break;

	case K_NETADDR:
		ret = map_static_netaddr(key, line, len);
		break;

	default:
		ret = NULL;
		break;
	}

	free(line);

	return ret;
}

static int
map_static_compare(void *hdl, const char *key, enum map_kind kind,
    int (*func)(const char *, const char *))
{
	struct map	*m   = hdl;
	struct mapel	*me  = NULL;
	int		 ret = 0;

	TAILQ_FOREACH(me, &m->m_contents, me_entry) {
		if (! func(key, me->me_key))
			continue;
		ret = 1;
		break;
	}

	return ret;
}

static void *
map_static_credentials(const char *key, char *line, size_t len)
{
	struct map_credentials *map_credentials = NULL;
	char *p;

	/* credentials are stored as user:password */
	if (len < 3)
		return NULL;

	/* too big to fit in a smtp session line */
	if (len >= MAX_LINE_SIZE)
		return NULL;

	p = strchr(line, ':');
	if (p == NULL)
		return NULL;

	if (p == line || p == line + len - 1)
		return NULL;
	*p++ = '\0';

	map_credentials = xcalloc(1, sizeof *map_credentials,
	    "map_static_credentials");

	if (strlcpy(map_credentials->username, line,
		sizeof(map_credentials->username)) >=
	    sizeof(map_credentials->username))
		goto err;

	if (strlcpy(map_credentials->password, p,
		sizeof(map_credentials->password)) >=
	    sizeof(map_credentials->password))
		goto err;

	return map_credentials;

err:
	free(map_credentials);
	return NULL;
}

static void *
map_static_alias(const char *key, char *line, size_t len)
{
	char	       	*subrcpt;
	char	       	*endp;
	struct map_alias	*map_alias = NULL;
	struct expandnode	 xn;

	map_alias = xcalloc(1, sizeof *map_alias, "map_static_alias");

	while ((subrcpt = strsep(&line, ",")) != NULL) {
		/* subrcpt: strip initial whitespace. */
		while (isspace((int)*subrcpt))
			++subrcpt;
		if (*subrcpt == '\0')
			goto error;

		/* subrcpt: strip trailing whitespace. */
		endp = subrcpt + strlen(subrcpt) - 1;
		while (subrcpt < endp && isspace((int)*endp))
			*endp-- = '\0';

		if (! alias_parse(&xn, subrcpt))
			goto error;

		expand_insert(&map_alias->expand, &xn);
		map_alias->nbnodes++;
	}

	return map_alias;

error:
	expand_free(&map_alias->expand);
	free(map_alias);
	return NULL;
}

static void *
map_static_virtual(const char *key, char *line, size_t len)
{
	char	       	*subrcpt;
	char	       	*endp;
	struct map_virtual	*map_virtual = NULL;
	struct expandnode	 xn;

	map_virtual = xcalloc(1, sizeof *map_virtual, "map_static_virtual");

	/* domain key, discard value */
	if (strchr(key, '@@') == NULL)
		return map_virtual;

	while ((subrcpt = strsep(&line, ",")) != NULL) {
		/* subrcpt: strip initial whitespace. */
		while (isspace((int)*subrcpt))
			++subrcpt;
		if (*subrcpt == '\0')
			goto error;

		/* subrcpt: strip trailing whitespace. */
		endp = subrcpt + strlen(subrcpt) - 1;
		while (subrcpt < endp && isspace((int)*endp))
			*endp-- = '\0';

		if (! alias_parse(&xn, subrcpt))
			goto error;

		expand_insert(&map_virtual->expand, &xn);
		map_virtual->nbnodes++;
	}

	return map_virtual;

error:
	expand_free(&map_virtual->expand);
	free(map_virtual);
	return NULL;
}


static void *
map_static_netaddr(const char *key, char *line, size_t len)
{
	struct map_netaddr	*map_netaddr = NULL;

	map_netaddr = xcalloc(1, sizeof *map_netaddr, "map_static_netaddr");

	if (! text_to_netaddr(&map_netaddr->netaddr, line))
	    goto error;

	return map_netaddr;

error:
	free(map_netaddr);
	return NULL;
}
@


1.9
log
@Cleanups and improvements:

* Log more events (especially client session) and use a better scheme
  for that: each messages is prefixed with a token to easily identify
  its class:
    - info/warn/debug: general server messages
    - smtp-in: smtp client connections
    - relay: status update for relayed messages
    - delivery: status update for local deliveries

* Implement "smtpctl monitor" to display updates of selected internal
  counters.

* When reloading the on-disk queue at startup do not commit a message
  if no envelope was submitted for that message.

* Remove unused stuff in the config parser.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map_static.c,v 1.8 2012/10/14 11:58:23 gilles Exp $	*/
@


1.8
log
@introduce map_file.c which will deprecate map_stdio.c

The idea is to have a file-backed map but to have smtpd(8) cache the maps
so that it cannot be partially read if edited while mail is received. The
file is read and converted to a static map (map_static.c), changes aren't
visible to smtpd until an explicit: smtpctl update map  which reads file,
builds a new static map and invalidates the former.

partial-read issue discussed with beck@@ and halex@@
idea to convert internally to a static map by eric@@

diff ok eric@@ and chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map_static.c,v 1.7 2012/09/27 17:47:49 chl Exp $	*/
d81 2
a82 2
		if (strcmp(key, me->me_key.med_string) == 0) {
			if (me->me_val.med_string == NULL)
d84 1
a84 1
			line = strdup(me->me_val.med_string);
d129 1
a129 1
		if (! func(key, me->me_key.med_string))
@


1.7
log
@use xmalloc()/xcalloc() helpers

while there unify usage of log_trace() in ramstat_set()

ok gilles@@ eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map_static.c,v 1.6 2012/09/21 16:40:20 eric Exp $	*/
d52 1
@


1.6
log
@wrap expandtree into a "struct expand".

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map_static.c,v 1.5 2012/09/21 10:22:29 eric Exp $	*/
d159 2
a160 3
	map_credentials = calloc(1, sizeof(struct map_credentials));
	if (map_credentials == NULL)
		fatalx("calloc");
d187 1
a187 3
	map_alias = calloc(1, sizeof(struct map_alias));
	if (map_alias == NULL)
		fatalx("calloc");
d224 1
a224 3
	map_virtual = calloc(1, sizeof(struct map_virtual));
	if (map_virtual == NULL)
		fatalx("calloc");
d263 1
a263 3
	map_netaddr = calloc(1, sizeof(struct map_netaddr));
	if (map_netaddr == NULL)
		fatalx("calloc");
@


1.5
log
@Move ruleset_match() prototype to smtpd.h and make the envelope const.
Adapt a lot of functions in chain to use const args where required.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map_static.c,v 1.4 2012/09/19 12:59:59 eric Exp $	*/
d207 1
a207 1
		expand_insert(&map_alias->expandtree, &xn);
d214 1
a214 2
	/* free elements in map_alias->expandtree */
	expand_free(&map_alias->expandtree);
d250 1
a250 1
		expand_insert(&map_virtual->expandtree, &xn);
d257 1
a257 2
	/* free elements in map_virtual->expandtree */
	expand_free(&map_virtual->expandtree);
@


1.4
log
@expandnodes must be bzero()'d before parsing to be sure there is no bogus
data left on return, since the RB compare functions uses memcmp().  While
there, remove all calls to bzero() before alias_parse().

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map_static.c,v 1.3 2012/09/19 12:45:04 eric Exp $	*/
d40 3
a42 3
static void *map_static_lookup(void *, char *, enum map_kind);
static int   map_static_compare(void *, char *, enum map_kind,
    int (*)(char *, char *));
d45 4
a48 4
static void *map_static_credentials(char *, char *, size_t);
static void *map_static_alias(char *, char *, size_t);
static void *map_static_virtual(char *, char *, size_t);
static void *map_static_netaddr(char *, char *, size_t);
d70 1
a70 1
map_static_lookup(void *hdl, char *key, enum map_kind kind)
d120 2
a121 2
map_static_compare(void *hdl, char *key, enum map_kind kind,
    int (*func)(char *, char *))
d138 1
a138 1
map_static_credentials(char *key, char *line, size_t len)
d181 1
a181 1
map_static_alias(char *key, char *line, size_t len)
d221 1
a221 1
map_static_virtual(char *key, char *line, size_t len)
d266 1
a266 1
map_static_netaddr(char *key, char *line, size_t len)
@


1.3
log
@rename variables for consistency

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map_static.c,v 1.2 2012/09/19 09:06:35 eric Exp $	*/
a203 1
		bzero(&xn, sizeof (struct expandnode));
a247 1
		bzero(&xn, sizeof (struct expandnode));
@


1.2
log
@start cleaning the expansion code:

- change expandtree_* prefix to expand_ for better readability and
  because the structure might change at some point
- rename <>_free_nodes() to <>_free()
- remove unused <>_remove_node()
- refcounting has no purpose at all; just remove it as well as the
  decrement/increment functions, and replace the latter with <>_insert
- expandnode flags is only used to know if it's been processed or not,
  don't make it a flag but a simple field with clear name.

ok gilles@@ chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map_static.c,v 1.1 2012/05/29 19:53:10 gilles Exp $	*/
d186 1
a186 1
	struct expandnode	 expnode;
d204 2
a205 2
		bzero(&expnode, sizeof (struct expandnode));
		if (! alias_parse(&expnode, subrcpt))
d208 1
a208 1
		expand_insert(&map_alias->expandtree, &expnode);
d227 1
a227 1
	struct expandnode	 expnode;
d249 2
a250 2
		bzero(&expnode, sizeof (struct expandnode));
		if (! alias_parse(&expnode, subrcpt))
d253 1
a253 1
		expand_insert(&map_virtual->expandtree, &expnode);
@


1.1
log
@- introduce map_static.c as a backend to static maps in parse.y, this has
  the benefit that we no longer have two code paths whenever we deal with
  maps, we can always use the backend mechanism.

I have not plugged this in yet, I'll do it in a later commit, just get it
out of my sandbox
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d208 1
a208 1
		expandtree_increment_node(&map_alias->expandtree, &expnode);
d216 1
a216 1
	expandtree_free_nodes(&map_alias->expandtree);
d253 1
a253 1
		expandtree_increment_node(&map_virtual->expandtree, &expnode);
d261 1
a261 1
	expandtree_free_nodes(&map_virtual->expandtree);
@

