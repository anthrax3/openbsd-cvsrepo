head	1.8;
access;
symbols
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2;
locks; strict;
comment	@ * @;


1.8
date	2012.06.14.21.56.13;	author gilles;	state dead;
branches;
next	1.7;

1.7
date	2012.01.18.13.41.54;	author chl;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.28.22.13.27;	author chl;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.16.10.24.41;	author chl;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.15.23.22.47;	author gilles;	state Exp;
branches;
next	1.3;

1.3
date	2011.09.12.20.47.15;	author gilles;	state Exp;
branches;
next	1.2;

1.2
date	2011.08.31.18.56.30;	author gilles;	state Exp;
branches;
next	1.1;

1.1
date	2011.08.27.22.32.41;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.8
log
@- rename filter.h -> filter_api.h to be consistent with upcoming changes
@
text
@/*	$OpenBSD: filter.h,v 1.7 2012/01/18 13:41:54 chl Exp $	*/

/*
 * Copyright (c) 2011 Gilles Chehade <gilles@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/socket.h>

#include <netdb.h>

#define	FILTER_API_VERSION	50

#if !defined(MAX_LINE_SIZE)
#define MAX_LINE_SIZE		 1024
#endif

#if !defined(MAX_LOCALPART_SIZE)
#define MAX_LOCALPART_SIZE	 128
#endif

#if !defined(MAX_DOMAINPART_SIZE)
#define MAX_DOMAINPART_SIZE	 (MAX_LINE_SIZE-MAX_LOCALPART_SIZE)
#endif

enum filter_status {
	STATUS_IGNORE,
	STATUS_REJECT,
	STATUS_ACCEPT,
	STATUS_WAITING
};

enum filter_type {
	FILTER_CONNECT		= 0x001,
	FILTER_HELO		= 0x002,
	FILTER_EHLO		= 0x004,
	FILTER_MAIL		= 0x008,
	FILTER_RCPT		= 0x010,
	FILTER_DATALINE		= 0x020,
	FILTER_QUIT		= 0x040,
	FILTER_CLOSE		= 0x080,
	FILTER_RSET		= 0x100,
};

struct filter_connect {
	char			hostname[MAXHOSTNAMELEN];
	struct sockaddr_storage	hostaddr;
};

struct filter_helo {
	char			helohost[MAXHOSTNAMELEN];
};
 
struct filter_mail {
	char			user[MAX_LOCALPART_SIZE];
	char			domain[MAX_DOMAINPART_SIZE];
};

struct filter_rcpt {
	char			user[MAX_LOCALPART_SIZE];
	char			domain[MAX_DOMAINPART_SIZE];
};

struct filter_dataline {
	char			line[MAX_LINE_SIZE];
};

union filter_union {
	struct filter_connect	connect;
	struct filter_helo	helo;
	struct filter_mail	mail;
	struct filter_rcpt	rcpt;
	struct filter_dataline	dataline;
};

struct filter_msg {
	u_int64_t		id;	 /* set by smtpd(8) */
	u_int64_t		cl_id;	 /* set by smtpd(8) */
	int8_t       		code;
	u_int8_t		version;
	enum filter_type	type;
	union filter_union	u;
};

/**/
void filter_init(void);
void filter_loop(void);

void filter_register_connect_callback(enum filter_status (*)(u_int64_t, struct filter_connect *, void *), void *);
void filter_register_helo_callback(enum filter_status (*)(u_int64_t, struct filter_helo *, void *), void *);
void filter_register_ehlo_callback(enum filter_status (*)(u_int64_t, struct filter_helo *, void *), void *);
void filter_register_mail_callback(enum filter_status (*)(u_int64_t, struct filter_mail *, void *), void *);
void filter_register_rcpt_callback(enum filter_status (*)(u_int64_t, struct filter_rcpt *, void *), void *);
void filter_register_dataline_callback(enum filter_status (*)(u_int64_t, struct filter_dataline *, void *), void *);
void filter_register_quit_callback(enum filter_status (*)(u_int64_t, void *), void *);
void filter_register_close_callback(enum filter_status (*)(u_int64_t, void *), void *);
void filter_register_rset_callback(enum filter_status (*)(u_int64_t, void *), void *);

@


1.7
log
@Add new filters callbacks for:
- network events (CONNECT/CLOSE)
- commands (QUIT/RSET)

ok gilles@@ eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.h,v 1.6 2011/11/28 22:13:27 chl Exp $	*/
@


1.6
log
@use STATUS_* filter codes, instead of -1/0/1 hard coded values

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.h,v 1.5 2011/11/16 10:24:41 chl Exp $	*/
d19 3
d45 14
a58 5
	FILTER_HELO		= 0x01,
	FILTER_EHLO		= 0x02,
	FILTER_MAIL		= 0x04,
	FILTER_RCPT		= 0x08,
	FILTER_DATALINE		= 0x10,
d62 1
a62 1
	char	buffer[1024];
d64 1
a64 1

d66 2
a67 2
	char	user[MAX_LOCALPART_SIZE];
	char	domain[MAX_DOMAINPART_SIZE];
d71 2
a72 2
	char	user[MAX_LOCALPART_SIZE];
	char	domain[MAX_DOMAINPART_SIZE];
d76 1
a76 1
	char	line[MAX_LINE_SIZE];
d80 1
d100 1
d106 4
@


1.5
log
@fix obvious variable substitution mistake
change code type back to int8_t

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.h,v 1.4 2011/11/15 23:22:47 gilles Exp $	*/
d35 1
@


1.4
log
@- change callback prototypes in filter.c to allow stricter checks
- introduce STATUS_WAITING, filters will reroute async DNS queries through
  LKA in a near future
- filter_api.c will contain our filter API (empty for now)
- Makefile to build libsmtpdfilter (not linked to the build,dev stuff only)
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.h,v 1.3 2011/09/12 20:47:15 gilles Exp $	*/
d76 1
a76 1
	u_int8_t       		code;
@


1.3
log
@- introduce filtermask in struct smtpd
- do not forward lines to mfa when FILTER_DATALINE is not set in filtermask

prevents smtpd from handling mails slowly while I'm hacking on filters
support
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.h,v 1.2 2011/08/31 18:56:30 gilles Exp $	*/
d34 6
d76 1
a76 1
	int8_t			code;
d86 5
a90 5
void filter_register_helo_callback(int (*)(u_int64_t, struct filter_helo *, void *), void *);
void filter_register_ehlo_callback(int (*)(u_int64_t, struct filter_helo *, void *), void *);
void filter_register_mail_callback(int (*)(u_int64_t, struct filter_mail *, void *), void *);
void filter_register_rcpt_callback(int (*)(u_int64_t, struct filter_rcpt *, void *), void *);
void filter_register_dataline_callback(int (*)(u_int64_t, struct filter_dataline *, void *), void *);
@


1.2
log
@add support for per-line DATA callbacks, this allows filters to take their
decisions *while* the message is being received by the client.
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.h,v 1.1 2011/08/27 22:32:41 gilles Exp $	*/
d35 5
a39 5
	FILTER_HELO,
	FILTER_EHLO,
	FILTER_MAIL,
	FILTER_RCPT,
	FILTER_DATALINE,
@


1.1
log
@initial support for a session-time filtering API

currently only HELO/EHLO, MAIL, RCPT are supported, however ... I have
voluntarily disabled filters at smtpd.conf level so people don't play with
it until the API has stabilized a bit

discussed with several people in private, no one opposed the feature
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 1
a39 2
	FILTER_DATA,
	FILTER_QUIT,
d56 2
a57 6
struct filter_data {
	char	data[4096];
};

struct filter_quit {
	char	data[4096];
d64 1
a64 2
	struct filter_data	data;
	struct filter_quit	quit;
d84 1
a84 2
void filter_register_data_callback(int (*)(u_int64_t, struct filter_data *, void *), void *);
void filter_register_quit_callback(int (*)(u_int64_t, struct filter_quit *, void *), void *);
@

