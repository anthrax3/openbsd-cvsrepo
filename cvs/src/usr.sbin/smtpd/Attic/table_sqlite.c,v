head	1.18;
access;
symbols
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.11.0.2
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.18
date	2015.11.30.19.54.25;	author jung;	state dead;
branches;
next	1.17;
commitid	LaSdnghRSVqZPgAk;

1.17
date	2015.10.11.12.50.00;	author sunil;	state Exp;
branches;
next	1.16;
commitid	dmRjMYloxUoaVmb9;

1.16
date	2015.01.20.17.37.54;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	ZBTFreARDSMmzOIV;

1.15
date	2015.01.16.06.40.21;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	Uu5nFG3wCl0LACBb;

1.14
date	2014.07.08.13.49.09;	author eric;	state Exp;
branches;
next	1.13;
commitid	pEybL9fsrDOC6PJj;

1.13
date	2014.07.01.17.33.51;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	VWr9eTYloJ4pB7bn;

1.12
date	2014.06.10.16.43.46;	author gilles;	state Exp;
branches;
next	1.11;
commitid	UFLkkqlmWhAvarfC;

1.11
date	2013.12.26.17.25.32;	author eric;	state Exp;
branches;
next	1.10;

1.10
date	2013.11.28.10.43.37;	author eric;	state Exp;
branches;
next	1.9;

1.9
date	2013.11.18.11.47.16;	author eric;	state Exp;
branches;
next	1.8;

1.8
date	2013.10.26.12.27.59;	author eric;	state Exp;
branches;
next	1.7;

1.7
date	2013.10.24.20.26.45;	author eric;	state Exp;
branches;
next	1.6;

1.6
date	2013.07.22.13.14.49;	author eric;	state Exp;
branches;
next	1.5;

1.5
date	2013.07.21.09.25.38;	author eric;	state Exp;
branches;
next	1.4;

1.4
date	2013.07.20.09.06.46;	author eric;	state Exp;
branches;
next	1.3;

1.3
date	2013.05.24.17.03.14;	author eric;	state Exp;
branches;
next	1.2;

1.2
date	2013.01.31.18.34.43;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.26.09.37.24;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.18
log
@remove table-passwd, table-sqlite, and table-ldap
about 4k lines seldom used code

people who rely on this install mail/opensmtpd-extras

direction discussed (and agreed) with many

ok gilles
@
text
@/*	$OpenBSD: table_sqlite.c,v 1.17 2015/10/11 12:50:00 sunil Exp $	*/

/*
 * Copyright (c) 2013 Eric Faurot <eric@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>

#include <netinet/in.h>
#include <netdb.h>

#include <ctype.h>
#include <fcntl.h>
#include <sqlite3.h>
#include <stdio.h>
#include <limits.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <limits.h>

#include "smtpd-defines.h"
#include "smtpd-api.h"
#include "log.h"

enum {
	SQL_ALIAS = 0,
	SQL_DOMAIN,
	SQL_CREDENTIALS,
	SQL_NETADDR,
	SQL_USERINFO,
	SQL_SOURCE,
	SQL_MAILADDR,
	SQL_ADDRNAME,

	SQL_MAX
};

static int table_sqlite_update(void);
static int table_sqlite_lookup(int, struct dict *, const char *, char *, size_t);
static int table_sqlite_check(int, struct dict *, const char *);
static int table_sqlite_fetch(int, struct dict *, char *, size_t);

static sqlite3_stmt *table_sqlite_query(const char *, int);

#define	DEFAULT_EXPIRE	60
#define	DEFAULT_REFRESH	1000

static char		*config;
static sqlite3		*db;
static sqlite3_stmt	*statements[SQL_MAX];
static sqlite3_stmt	*stmt_fetch_source;
static struct dict	 sources;
static void		*source_iter;
static size_t		 source_refresh = 1000;
static size_t		 source_ncall;
static int		 source_expire = 60;
static time_t		 source_update;

int
main(int argc, char **argv)
{
	int	ch;

	log_init(1);
	log_verbose(~0);

	while ((ch = getopt(argc, argv, "")) != -1) {
		switch (ch) {
		default:
			log_warnx("warn: table-sqlite: bad option");
			return (1);
			/* NOTREACHED */
		}
	}
	argc -= optind;
	argv += optind;

	if (argc != 1) {
		log_warnx("warn: table-sqlite: bogus argument(s)");
		return (1);
	}

	config = argv[0];

	dict_init(&sources);

	if (table_sqlite_update() == 0) {
		log_warnx("warn: table-sqlite: error parsing config file");
		return (1);
	}

	table_api_on_update(table_sqlite_update);
	table_api_on_check(table_sqlite_check);
	table_api_on_lookup(table_sqlite_lookup);
	table_api_on_fetch(table_sqlite_fetch);
	table_api_dispatch();

	return (0);
}

static int
table_sqlite_getconfstr(const char *key, const char *value, char **var)
{
	if (*var) {
		log_warnx("warn: table-sqlite: duplicate %s %s", key, value);
		free(*var);
	}
	*var = strdup(value);
	if (*var == NULL) {
		log_warn("warn: table-sqlite: strdup");
		return (-1);
	}
	return (0);
}

static sqlite3_stmt *
table_sqlite_prepare_stmt(sqlite3 *_db, const char *query, int ncols)
{
	sqlite3_stmt	*stmt;

	if (sqlite3_prepare_v2(_db, query, -1, &stmt, 0) != SQLITE_OK) {
		log_warnx("warn: table-sqlite: sqlite3_prepare_v2: %s",
		    sqlite3_errmsg(_db));
		goto end;
	}
	if (sqlite3_column_count(stmt) != ncols) {
		log_warnx("warn: table-sqlite: columns: invalid columns count for query: %s", query);
		goto end;
	}

	return (stmt);
    end:
	sqlite3_finalize(stmt);
	return (NULL);
}

static int
table_sqlite_update(void)
{
	static const struct {
		const char	*name;
		int		 cols;
	} qspec[SQL_MAX] = {
		{ "query_alias",	1 },
		{ "query_domain",	1 },
		{ "query_credentials",	2 },
		{ "query_netaddr",	1 },
		{ "query_userinfo",	3 },
		{ "query_source",	1 },
		{ "query_mailaddr",	1 },
		{ "query_addrname",	1 },
	};
	sqlite3		*_db;
	sqlite3_stmt	*_statements[SQL_MAX];
	sqlite3_stmt	*_stmt_fetch_source;
	char		*_query_fetch_source;
	char		*queries[SQL_MAX];
	ssize_t		 flen;
	size_t		 sz = 0, _source_refresh;
	int		 _source_expire;
	FILE		*fp;
	char		*key, *value, *buf = NULL, *dbpath;
	const char	*e;
	int		 i, ret;
	long long	 ll;

	dbpath = NULL;
	_db = NULL;
	memset(queries, 0, sizeof(queries));
	memset(_statements, 0, sizeof(_statements));
	_query_fetch_source = NULL;
	_stmt_fetch_source = NULL;

	_source_refresh = DEFAULT_REFRESH;
	_source_expire = DEFAULT_EXPIRE;

	ret = 0;

	/* Parse configuration */

	fp = fopen(config, "r");
	if (fp == NULL)
		return (0);

	while ((flen = getline(&buf, &sz, fp)) != -1) {
		if (buf[flen - 1] == '\n')
			buf[flen - 1] = '\0';

		key = buf;
		while (isspace((unsigned char)*key))
			++key;
		if (*key == '\0' || *key == '#')
			continue;
		value = key;
		strsep(&value, " \t:");
		if (value) {
			while (*value) {
				if (!isspace((unsigned char)*value) &&
				    !(*value == ':' && isspace((unsigned char)*(value + 1))))
					break;
				++value;
			}
			if (*value == '\0')
				value = NULL;
		}

		if (value == NULL) {
			log_warnx("warn: table-sqlite: missing value for key %s", key);
			continue;
		}

		if (!strcmp("dbpath", key)) {
			if (table_sqlite_getconfstr(key, value, &dbpath) == -1)
				goto end;
			continue;
		}
		if (!strcmp("fetch_source", key)) {
			if (table_sqlite_getconfstr(key, value, &_query_fetch_source) == -1)
				goto end;
			continue;
		}
		if (!strcmp("fetch_source_expire", key)) {
			e = NULL;
			ll = strtonum(value, 0, INT_MAX, &e);
			if (e) {
				log_warnx("warn: table-sqlite: bad value for %s: %s", key, e);
				goto end;
			}
			_source_expire = ll;
			continue;
		}
		if (!strcmp("fetch_source_refresh", key)) {
			e = NULL;
			ll = strtonum(value, 0, INT_MAX, &e);
			if (e) {
				log_warnx("warn: table-sqlite: bad value for %s: %s", key, e);
				goto end;
			}
			_source_refresh = ll;
			continue;
		}

		for(i = 0; i < SQL_MAX; i++)
			if (!strcmp(qspec[i].name, key))
				break;
		if (i == SQL_MAX) {
			log_warnx("warn: table-sqlite: bogus key %s", key);
			continue;
		}

		if (queries[i]) {
			log_warnx("warn: table-sqlite: duplicate key %s", key);
			continue;
		}

		queries[i] = strdup(value);
		if (queries[i] == NULL) {
			log_warnx("warn: table-sqlite: strdup");
			goto end;
		}
	}

	/* Setup db */

	log_debug("debug: table-sqlite: opening %s", dbpath);

	if (sqlite3_open(dbpath, &_db) != SQLITE_OK) {
		log_warnx("warn: table-sqlite: open: %s",
		    sqlite3_errmsg(_db));
		goto end;
	}

	for (i = 0; i < SQL_MAX; i++) {
		if (queries[i] == NULL)
			continue;
		if ((_statements[i] = table_sqlite_prepare_stmt(_db, queries[i], qspec[i].cols)) == NULL)
			goto end;
	}

	if (_query_fetch_source &&
	    (_stmt_fetch_source = table_sqlite_prepare_stmt(_db, _query_fetch_source, 1)) == NULL)
		goto end;

	/* Replace previous setup */

	for (i = 0; i < SQL_MAX; i++) {
		if (statements[i])
			sqlite3_finalize(statements[i]);
		statements[i] = _statements[i];
		_statements[i] = NULL;
	}
	if (stmt_fetch_source)
		sqlite3_finalize(stmt_fetch_source);
	stmt_fetch_source = _stmt_fetch_source;
	_stmt_fetch_source = NULL;

	if (db)
		sqlite3_close(_db);
	db = _db;
	_db = NULL;

	source_update = 0; /* force update */
	source_expire = _source_expire;
	source_refresh = _source_refresh;

	log_debug("debug: table-sqlite: config successfully updated");
	ret = 1;

    end:

	/* Cleanup */
	for (i = 0; i < SQL_MAX; i++) {
		if (_statements[i])
			sqlite3_finalize(_statements[i]);
		free(queries[i]);
	}
	if (_db)
		sqlite3_close(_db);

	free(dbpath);
	free(_query_fetch_source);

	free(buf);
	fclose(fp);
	return (ret);
}

static sqlite3_stmt *
table_sqlite_query(const char *key, int service)
{
	int		 i;
	sqlite3_stmt	*stmt;

	stmt = NULL;
	for(i = 0; i < SQL_MAX; i++)
		if (service == (1 << i)) {
			stmt = statements[i];
			break;
		}

	if (stmt == NULL)
		return (NULL);

	if (sqlite3_bind_text(stmt, 1, key, strlen(key), NULL) != SQLITE_OK) {
		log_warnx("warn: table-sqlite: sqlite3_bind_text: %s",
		    sqlite3_errmsg(db));
		return (NULL);
	}

	return (stmt);
}

static int
table_sqlite_check(int service, struct dict *params, const char *key)
{
	sqlite3_stmt	*stmt;
	int		 r;

	stmt = table_sqlite_query(key, service);
	if (stmt == NULL)
		return (-1);

	r = sqlite3_step(stmt);
	sqlite3_reset(stmt);

	if (r == SQLITE_ROW)
		return (1);

	if (r == SQLITE_DONE)
		return (0);

	return (-1);
}

static int
table_sqlite_lookup(int service, struct dict *params, const char *key, char *dst, size_t sz)
{
	sqlite3_stmt	*stmt;
	const char	*value;
	int		 r, s;

	stmt = table_sqlite_query(key, service);
	if (stmt == NULL)
		return (-1);

	s = sqlite3_step(stmt);
	if (s == SQLITE_DONE) {
		sqlite3_reset(stmt);
		return (0);
	}

	if (s != SQLITE_ROW) {
		log_warnx("warn: table-sqlite: sqlite3_step: %s",
		    sqlite3_errmsg(db));
		sqlite3_reset(stmt);
		return (-1);
	}

	r = 1;

	switch(service) {
	case K_ALIAS:
		memset(dst, 0, sz);
		do {
			value = sqlite3_column_text(stmt, 0);
			if (dst[0] && strlcat(dst, ", ", sz) >= sz) {
				log_warnx("warn: table-sqlite: result too large");
				r = -1;
				break;
			}
			if (strlcat(dst, value, sz) >= sz) {
				log_warnx("warn: table-sqlite: result too large");
				r = -1;
				break;
			}
			s = sqlite3_step(stmt);
		} while (s == SQLITE_ROW);
		if (s !=  SQLITE_ROW && s != SQLITE_DONE) {
			log_warnx("warn: table-sqlite: sqlite3_step: %s",
			    sqlite3_errmsg(db));
			r = -1;
		}
		break;
	case K_CREDENTIALS:
		if (snprintf(dst, sz, "%s:%s",
		    sqlite3_column_text(stmt, 0),
		    sqlite3_column_text(stmt, 1)) >= (ssize_t)sz) {
			log_warnx("warn: table-sqlite: result too large");
			r = -1;
		}
		break;
	case K_USERINFO:
		if (snprintf(dst, sz, "%d:%d:%s",
		    sqlite3_column_int(stmt, 0),
		    sqlite3_column_int(stmt, 1),
		    sqlite3_column_text(stmt, 2)) >= (ssize_t)sz) {
			log_warnx("warn: table-sqlite: result too large");
			r = -1;
		}
		break;
	case K_DOMAIN:
	case K_NETADDR:
	case K_SOURCE:
	case K_MAILADDR:
	case K_ADDRNAME:
		if (strlcpy(dst, sqlite3_column_text(stmt, 0), sz) >= sz) {
			log_warnx("warn: table-sqlite: result too large");
			r = -1;
		}
		break;
	default:
		log_warnx("warn: table-sqlite: unknown service %d", service);
		r = -1;
	}

	sqlite3_reset(stmt);
	return (r);
}

static int
table_sqlite_fetch(int service, struct dict *params, char *dst, size_t sz)
{
	const char	*k;
	int		 s;

	if (service != K_SOURCE)
		return (-1);

	if (stmt_fetch_source == NULL)
		return (-1);

	if (source_ncall < source_refresh &&
	    time(NULL) - source_update < source_expire)
	    goto fetch;

	source_iter = NULL;
	while (dict_poproot(&sources, NULL))
		;

	while ((s = sqlite3_step(stmt_fetch_source)) == SQLITE_ROW)
		dict_set(&sources, sqlite3_column_text(stmt_fetch_source, 0), NULL);

	if (s != SQLITE_DONE)
		log_warnx("warn: table-sqlite: sqlite3_step: %s",
		    sqlite3_errmsg(db));

	sqlite3_reset(stmt_fetch_source);

	source_update = time(NULL);
	source_ncall = 0;

    fetch:

	source_ncall += 1;

        if (! dict_iter(&sources, &source_iter, &k, (void **)NULL)) {
		source_iter = NULL;
		if (! dict_iter(&sources, &source_iter, &k, (void **)NULL))
			return (0);
	}

	if (strlcpy(dst, k, sz) >= sz)
		return (-1);

	return (1);
}
@


1.17
log
@Convert some fgetln to getline.

Ok gilles@@, giovanni@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_sqlite.c,v 1.16 2015/01/20 17:37:54 deraadt Exp $	*/
@


1.16
log
@use <limits.h> comprehensively.  For now try to push <> includes to
each .c file, and out of the .h files.  To avoid overinclude.
ok gilles, in principle.  If this has been done right, -portable should
become easier to maintain.
@
text
@d1 1
a1 1
/*	$OpenBSD: table_sqlite.c,v 1.15 2015/01/16 06:40:21 deraadt Exp $	*/
d175 2
a176 2
	size_t		 flen;
	size_t		 _source_refresh;
d179 1
a179 1
	char		*key, *value, *buf, *lbuf, *dbpath;
d202 1
a202 2
	lbuf = NULL;
	while ((buf = fgetln(fp, &flen))) {
a204 10
		else {
			lbuf = malloc(flen + 1);
			if (lbuf == NULL) {
				log_warn("warn: table-sqlite: malloc");
				return (0);
			}
			memcpy(lbuf, buf, flen);
			lbuf[flen] = '\0';
			buf = lbuf;
		}
d340 1
a340 1
	free(lbuf);
@


1.15
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: table_sqlite.c,v 1.14 2014/07/08 13:49:09 eric Exp $	*/
d20 6
d36 1
@


1.14
log
@Update the table API: lookup functions can take an optional parameters
dictionnary (currently not set). While there, add a helper for forking
external backends, and remove unused table functions.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d25 1
@


1.13
log
@Fix snprintf() return value tests. ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_sqlite.c,v 1.12 2014/06/10 16:43:46 gilles Exp $	*/
d48 3
a50 3
static int table_sqlite_lookup(int, const char *, char *, size_t);
static int table_sqlite_check(int, const char *);
static int table_sqlite_fetch(int, char *, size_t);
d136 1
a136 1
		log_warnx("warn: table-sqlite: columns: invalid resultset");
d374 1
a374 1
table_sqlite_check(int service, const char *key)
d396 1
a396 1
table_sqlite_lookup(int service, const char *key, char *dst, size_t sz)
a437 1

d481 1
a481 1
table_sqlite_fetch(int service, char *dst, size_t sz)
@


1.12
log
@we should really zero a buffer we strlcat to otherwise aliases resolution
really resolves nothing :-)
@
text
@d1 1
a1 1
/*	$OpenBSD: table_sqlite.c,v 1.11 2013/12/26 17:25:32 eric Exp $	*/
d448 1
a448 1
		    sqlite3_column_text(stmt, 1)) > (ssize_t)sz) {
d457 1
a457 1
		    sqlite3_column_text(stmt, 2)) > (ssize_t)sz) {
@


1.11
log
@bcopy -> memmove
bzero -> memset
@
text
@d1 1
a1 1
/*	$OpenBSD: table_sqlite.c,v 1.10 2013/11/28 10:43:37 eric Exp $	*/
d423 1
@


1.10
log
@unsigned char casts for ctype
ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_sqlite.c,v 1.9 2013/11/18 11:47:16 eric Exp $	*/
d178 2
a179 2
	bzero(queries, sizeof(queries));
	bzero(_statements, sizeof(_statements));
@


1.9
log
@change dict_poproot() prototype: do not take key placeholder parameter as
it can't work that way.
@
text
@d1 1
a1 1
/*	$OpenBSD: table_sqlite.c,v 1.8 2013/10/26 12:27:59 eric Exp $	*/
d210 1
a210 1
		while (isspace((int)*key))
d218 2
a219 2
				if (!isspace(*value) &&
				    !(*value == ':' && isspace(*(value + 1))))
@


1.8
log
@%i -> %d in format strings
@
text
@d1 1
a1 1
/*	$OpenBSD: table_sqlite.c,v 1.7 2013/10/24 20:26:45 eric Exp $	*/
d497 1
a497 1
	while(dict_poproot(&sources, NULL, NULL))
@


1.7
log
@fix USERINFO and CREDENTIALS lookups in experimental sqlite backend.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d453 1
a453 1
		if (snprintf(dst, sz, "%i:%i:%s",
d472 1
a472 1
		log_warnx("warn: table-sqlite: unknown service %i", service);
@


1.6
log
@use unistd.h instead of getopt.h
@
text
@d157 1
a157 1
		{ "query_userinfo",	4 },
d356 1
a356 1
		if (service == 1 << i) {
d453 2
a454 2
		if (snprintf(dst, sz, "%s:%i:%i:%s",
		    sqlite3_column_text(stmt, 0),
d456 1
a456 2
		    sqlite3_column_int(stmt, 2),
		    sqlite3_column_text(stmt, 3)) > (ssize_t)sz) {
d476 1
@


1.5
log
@tweak log messages
@
text
@d1 1
a1 1
/*	$OpenBSD: table_sqlite.c,v 1.4 2013/07/20 09:06:46 eric Exp $	*/
d28 1
@


1.4
log
@Update ldap and sqlite table backends and provide them as external backends.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d364 1
a364 1
		log_warnx("table-sqlite: sqlite3_bind_text: %s",
d412 1
a412 1
		log_warnx("table-sqlite: sqlite3_step: %s",
d438 1
a438 1
			log_warnx("table-sqlite: sqlite3_step: %s",
@


1.3
log
@sync with OpenSMTPD 5.3.2

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_sqlite.c,v 1.2 2013/01/31 18:34:43 eric Exp $	*/
d4 1
a4 1
 * Copyright (c) 2012 Gilles Chehade <gilles@@poolp.org>
a19 3
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>
a21 2
#include <err.h>
#include <event.h>
a22 1
#include <imsg.h>
d27 1
d29 2
a30 1
#include "smtpd.h"
d33 9
a41 16
/* sqlite(3) backend */
static int table_sqlite_config(struct table *);
static int table_sqlite_update(struct table *);
static void *table_sqlite_open(struct table *);
static int table_sqlite_lookup(void *, const char *, enum table_service,
    union lookup *);
static void  table_sqlite_close(void *);

struct table_backend table_backend_sqlite = {
	K_ALIAS|K_CREDENTIALS|K_DOMAIN|K_NETADDR|K_USERINFO,
	table_sqlite_config,
	table_sqlite_open,
	table_sqlite_update,
	table_sqlite_close,
	table_sqlite_lookup,
};
d43 1
a43 3
struct table_sqlite_handle {
	sqlite3	        *ppDb;	
	struct table	*table;
d46 20
a65 5
static int table_sqlite_alias(struct table_sqlite_handle *, const char *, union lookup *);
static int table_sqlite_domain(struct table_sqlite_handle *, const char *, union lookup *);
static int table_sqlite_userinfo(struct table_sqlite_handle *, const char *, union lookup *);
static int table_sqlite_credentials(struct table_sqlite_handle *, const char *, union lookup *);
static int table_sqlite_netaddr(struct table_sqlite_handle *, const char *, union lookup *);
d67 2
a68 2
static int
table_sqlite_config(struct table *table)
d70 15
a84 1
	struct table	*cfg;
d86 6
a91 3
	/* no config ? broken */
	if (table->t_config[0] == '\0')
		return 0;
d93 1
a93 3
	cfg = table_create("static", table->t_name, "conf", table->t_config);
	if (!table_config(cfg))
		goto err;
d95 3
a97 4
	/* sanity checks */
	if (table_get(cfg, "dbpath") == NULL) {
		log_warnx("table_sqlite: missing 'dbpath' configuration");
		return 0;
d100 5
a104 1
	return 1;
d106 1
a106 3
err:
	table_destroy(cfg);
	return 0;
d110 16
a125 1
table_sqlite_update(struct table *table)
d127 16
a142 2
	log_info("info: Table \"%s\" successfully updated", table->t_name);
	return 1;
d145 2
a146 2
static void *
table_sqlite_open(struct table *table)
d148 59
a206 3
	struct table_sqlite_handle	*tsh;
	struct table	*cfg;
	const char	*dbpath;
d208 17
a224 2
	tsh = xcalloc(1, sizeof *tsh, "table_sqlite_open");
	tsh->table = table;
d226 4
a229 2
	cfg = table_find(table->t_name, "conf");
	dbpath = table_get(cfg, "dbpath");
d231 59
a289 4
	if (sqlite3_open(dbpath, &tsh->ppDb) != SQLITE_OK) {
		log_warnx("table_sqlite: open: %s", sqlite3_errmsg(tsh->ppDb));
		free(tsh);
		return NULL;
d292 6
a297 2
	return tsh;
}
d299 3
a301 5
static void
table_sqlite_close(void *hdl)
{
	return;
}
d303 1
a303 5
static int
table_sqlite_lookup(void *hdl, const char *key, enum table_service service,
    union lookup *lk)
{
	struct table_sqlite_handle	*tsh = hdl;
d305 5
a309 14
	switch (service) {
	case K_ALIAS:
		return table_sqlite_alias(tsh, key, lk);
	case K_DOMAIN:
		return table_sqlite_domain(tsh, key, lk);
	case K_USERINFO:
		return table_sqlite_userinfo(tsh, key, lk);
	case K_CREDENTIALS:
		return table_sqlite_credentials(tsh, key, lk);
	case K_NETADDR:
		return table_sqlite_netaddr(tsh, key, lk);
	default:
		log_warnx("table_sqlite: lookup: unsupported lookup service");
		return -1;
d311 4
d316 11
a326 2
	return 0;
}
d328 1
a328 2
static int
table_sqlite_alias(struct table_sqlite_handle *tsh, const char *key, union lookup *lk)
d330 5
a334 38
{
	struct table	       *cfg = table_find(tsh->table->t_name, "conf");
	const char	       *query = table_get(cfg, "query_alias");
	sqlite3_stmt	       *stmt;
	struct expandnode	xn;
	int			nrows;
	
	if (query == NULL) {
		log_warnx("table_sqlite: lookup: no query configured for aliases");
		return -1;
	}

	if (sqlite3_prepare_v2(tsh->ppDb, query, -1, &stmt, 0) != SQLITE_OK) {
		log_warnx("table_sqlite: prepare: %s", sqlite3_errmsg(tsh->ppDb));
		return -1;
	}

	if (sqlite3_column_count(stmt) != 1) {
		log_warnx("table_sqlite: columns: invalid resultset");
		sqlite3_finalize(stmt);
		return -1;
	}

	if (lk)
		lk->expand = xcalloc(1, sizeof(*lk->expand), "table_sqlite_alias");

	nrows = 0;

	sqlite3_bind_text(stmt, 1, key, strlen(key), NULL);
	while (sqlite3_step(stmt) == SQLITE_ROW) {
		if (lk == NULL) {
			sqlite3_finalize(stmt);
			return 1;
		}
		if (! text_to_expandnode(&xn, sqlite3_column_text(stmt, 0)))
			goto error;
		expand_insert(lk->expand, &xn);
		nrows++;
d336 2
d339 2
a340 2
	sqlite3_finalize(stmt);
	return nrows ? 1 : 0;
d342 3
a344 4
error:
	if (lk && lk->expand)
		expand_free(lk->expand);
	return -1;
d347 2
a348 2
static int
table_sqlite_domain(struct table_sqlite_handle *tsh, const char *key, union lookup *lk)
d350 9
a358 32
	struct table	       *cfg = table_find(tsh->table->t_name, "conf");
	const char	       *query = table_get(cfg, "query_domain");
	sqlite3_stmt	       *stmt;
	
	if (query == NULL) {
		log_warnx("table_sqlite: lookup: no query configured for domain");
		return -1;
	}

	if (sqlite3_prepare_v2(tsh->ppDb, query, -1, &stmt, 0) != SQLITE_OK) {
		log_warnx("table_sqlite: prepare: %s", sqlite3_errmsg(tsh->ppDb));
		return -1;
	}

	if (sqlite3_column_count(stmt) != 1) {
		log_warnx("table_sqlite: columns: invalid resultset");
		sqlite3_finalize(stmt);
		return -1;
	}

	sqlite3_bind_text(stmt, 1, key, strlen(key), NULL);

	switch (sqlite3_step(stmt)) {
	case SQLITE_ROW:
		if (lk)
			strlcpy(lk->domain.name, sqlite3_column_text(stmt, 0), sizeof(lk->domain.name));
		sqlite3_finalize(stmt);
		return 1;

	case SQLITE_DONE:
		sqlite3_finalize(stmt);
		return 0;
d360 7
a366 2
	default:
		sqlite3_finalize(stmt);
d369 1
a369 1
	return -1;
d373 1
a373 1
table_sqlite_userinfo(struct table_sqlite_handle *tsh, const char *key, union lookup *lk)
d375 6
a380 43
	struct table	       *cfg = table_find(tsh->table->t_name, "conf");
	const char	       *query = table_get(cfg, "query_userinfo");
	sqlite3_stmt	       *stmt;
	size_t			s;
	
	if (query == NULL) {
		log_warnx("table_sqlite: lookup: no query configured for user");
		return -1;
	}

	if (sqlite3_prepare_v2(tsh->ppDb, query, -1, &stmt, 0) != SQLITE_OK) {
		log_warnx("table_sqlite: prepare: %s", sqlite3_errmsg(tsh->ppDb));
		return -1;
	}

	if (sqlite3_column_count(stmt) != 4) {
		log_warnx("table_sqlite: columns: invalid resultset");
		sqlite3_finalize(stmt);
		return -1;
	}

	sqlite3_bind_text(stmt, 1, key, strlen(key), NULL);

	switch (sqlite3_step(stmt)) {
	case SQLITE_ROW:
		if (lk) {
			s = strlcpy(lk->userinfo.username, sqlite3_column_text(stmt, 0),
			    sizeof(lk->userinfo.username));
			if (s >= sizeof(lk->userinfo.username))
				goto error;
			lk->userinfo.uid = sqlite3_column_int(stmt, 1);
			lk->userinfo.gid = sqlite3_column_int(stmt, 2);
			s = strlcpy(lk->userinfo.directory, sqlite3_column_text(stmt, 3),
			    sizeof(lk->userinfo.directory));
			if (s >= sizeof(lk->userinfo.directory))
				goto error;
		}
		sqlite3_finalize(stmt);
		return 1;

	case SQLITE_DONE:
		sqlite3_finalize(stmt);
		return 0;
d382 8
a389 3
	default:
		goto error;
	}
d391 1
a391 3
error:
	sqlite3_finalize(stmt);
	return -1;
d395 1
a395 1
table_sqlite_credentials(struct table_sqlite_handle *tsh, const char *key, union lookup *lk)
d397 7
a403 40
	struct table	       *cfg = table_find(tsh->table->t_name, "conf");
	const char	       *query = table_get(cfg, "query_credentials");
	sqlite3_stmt	       *stmt;
	size_t			s;
	
	if (query == NULL) {
		log_warnx("table_sqlite: lookup: no query configured for credentials");
		return -1;
	}

	if (sqlite3_prepare_v2(tsh->ppDb, query, -1, &stmt, 0) != SQLITE_OK) {
		log_warnx("table_sqlite: prepare: %s", sqlite3_errmsg(tsh->ppDb));
		return -1;
	}

	if (sqlite3_column_count(stmt) != 2) {
		log_warnx("table_sqlite: columns: invalid resultset");
		sqlite3_finalize(stmt);
		return -1;
	}

	sqlite3_bind_text(stmt, 1, key, strlen(key), NULL);
	switch (sqlite3_step(stmt)) {
	case SQLITE_ROW:
		if (lk) {
			s = strlcpy(lk->creds.username, sqlite3_column_text(stmt, 0),
			    sizeof(lk->creds.username));
			if (s >= sizeof(lk->creds.username))
				goto error;
			s = strlcpy(lk->creds.password, sqlite3_column_text(stmt, 1),
			    sizeof(lk->creds.password));
			if (s >= sizeof(lk->creds.password))
				goto error;
		}
		sqlite3_finalize(stmt);
		return 1;

	case SQLITE_DONE:
		sqlite3_finalize(stmt);
		return 0;
d405 66
d472 2
a473 1
		goto error;
d476 1
a476 3
error:
	sqlite3_finalize(stmt);
	return -1;
a478 1

d480 1
a480 1
table_sqlite_netaddr(struct table_sqlite_handle *tsh, const char *key, union lookup *lk)
d482 8
a489 33
	struct table	       *cfg = table_find(tsh->table->t_name, "conf");
	const char	       *query = table_get(cfg, "query_netaddr");
	sqlite3_stmt	       *stmt;
	
	if (query == NULL) {
		log_warnx("table_sqlite: lookup: no query configured for netaddr");
		return -1;
	}

	if (sqlite3_prepare_v2(tsh->ppDb, query, -1, &stmt, 0) != SQLITE_OK) {
		log_warnx("table_sqlite: prepare: %s", sqlite3_errmsg(tsh->ppDb));
		return -1;
	}

	if (sqlite3_column_count(stmt) != 1) {
		log_warnx("table_sqlite: columns: invalid resultset");
		sqlite3_finalize(stmt);
		return -1;
	}

	sqlite3_bind_text(stmt, 1, key, strlen(key), NULL);
	switch (sqlite3_step(stmt)) {
	case SQLITE_ROW:
		if (lk) {
			if (! text_to_netaddr(&lk->netaddr, sqlite3_column_text(stmt, 0)))
				goto error;
		}
		sqlite3_finalize(stmt);
		return 1;

	case SQLITE_DONE:
		sqlite3_finalize(stmt);
		return 0;
d491 28
a518 2
	default:
		goto error;
d521 4
a524 3
error:
	sqlite3_finalize(stmt);
	return -1;
@


1.2
log
@assorted fixes spotted by Coverity.
some log message updates.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_sqlite.c,v 1.1 2013/01/26 09:37:24 gilles Exp $	*/
a21 1
#include <sys/param.h>
d38 1
a38 1
static int table_sqlite_config(struct table *, const char *);
d42 1
a42 1
    void **);
d59 5
a63 5
static int table_sqlite_alias(struct table_sqlite_handle *, const char *, void **);
static int table_sqlite_domain(struct table_sqlite_handle *, const char *, void **);
static int table_sqlite_userinfo(struct table_sqlite_handle *, const char *, void **);
static int table_sqlite_credentials(struct table_sqlite_handle *, const char *, void **);
static int table_sqlite_netaddr(struct table_sqlite_handle *, const char *, void **);
d66 1
a66 1
table_sqlite_config(struct table *table, const char *config)
d68 1
a68 1
	void	*cfg;
d71 1
a71 1
	if (config == NULL)
d74 2
a75 2
	cfg = table_config_create();
	if (! table_config_parse(cfg, config, T_HASH))
d79 1
a79 1
	if (table_config_get(cfg, "dbpath") == NULL) {
a83 1
	table_set_configuration(table, cfg);
d87 1
a87 1
	table_config_destroy(cfg);
d102 1
a102 1
	void		*cfg;
d108 1
a108 1
	cfg = table_get_configuration(table);
d128 1
a128 1
    void **retp)
d134 1
a134 1
		return table_sqlite_alias(tsh, key, retp);
d136 1
a136 1
		return table_sqlite_domain(tsh, key, retp);
d138 1
a138 1
		return table_sqlite_userinfo(tsh, key, retp);
d140 1
a140 1
		return table_sqlite_credentials(tsh, key, retp);
d142 1
a142 1
		return table_sqlite_netaddr(tsh, key, retp);
d152 1
a152 1
table_sqlite_alias(struct table_sqlite_handle *tsh, const char *key, void **retp)
d155 1
a155 1
	struct table	       *cfg = table_get_configuration(tsh->table);
a157 1
	struct expand	       *xp = NULL;
d177 2
a178 2
	if (retp)
		xp = xcalloc(1, sizeof *xp, "table_sqlite_alias");
d184 1
a184 1
		if (retp == NULL) {
d190 1
a190 1
		expand_insert(xp, &xn);
a194 2
	if (retp)
		*retp = xp;
d198 2
a199 4
	if (retp)
		*retp = NULL;
	if (xp)
		expand_free(xp);
d204 1
a204 1
table_sqlite_domain(struct table_sqlite_handle *tsh, const char *key, void **retp)
d206 1
a206 1
	struct table	       *cfg = table_get_configuration(tsh->table);
a208 1
	struct destination     *domain = NULL;
d230 2
a231 5
		if (retp) {
			domain = xcalloc(1, sizeof *domain, "table_sqlite_domain");
			strlcpy(domain->name, sqlite3_column_text(stmt, 0), sizeof domain->name);
			*retp = domain;
		}
a242 3
	free(domain);
	if (retp)
		*retp = NULL;
d247 1
a247 1
table_sqlite_userinfo(struct table_sqlite_handle *tsh, const char *key, void **retp)
d249 1
a249 1
	struct table	       *cfg = table_get_configuration(tsh->table);
a251 1
	struct userinfo	       *userinfo = NULL;
d274 4
a277 5
		if (retp) {
			userinfo = xcalloc(1, sizeof *userinfo, "table_sqlite_userinfo");
			s = strlcpy(userinfo->username, sqlite3_column_text(stmt, 0),
			    sizeof(userinfo->username));
			if (s >= sizeof(userinfo->username))
d279 5
a283 5
			userinfo->uid = sqlite3_column_int(stmt, 1);
			userinfo->gid = sqlite3_column_int(stmt, 2);
			s = strlcpy(userinfo->directory, sqlite3_column_text(stmt, 3),
			    sizeof(userinfo->directory));
			if (s >= sizeof(userinfo->directory))
a284 1
			*retp = userinfo;
a298 3
	free(userinfo);
	if (retp)
		*retp = NULL;
d303 1
a303 1
table_sqlite_credentials(struct table_sqlite_handle *tsh, const char *key, void **retp)
d305 1
a305 1
	struct table	       *cfg = table_get_configuration(tsh->table);
a307 1
	struct credentials     *creds = NULL;
d329 4
a332 5
		if (retp) {
			creds = xcalloc(1, sizeof *creds, "table_sqlite_credentials");
			s = strlcpy(creds->username, sqlite3_column_text(stmt, 0),
			    sizeof(creds->username));
			if (s >= sizeof(creds->username))
d334 3
a336 3
			s = strlcpy(creds->password, sqlite3_column_text(stmt, 1),
			    sizeof(creds->password));
			if (s >= sizeof(creds->password))
a337 1
			*retp = creds;
a351 3
	free(creds);
	if (retp)
		*retp = NULL;
d357 1
a357 1
table_sqlite_netaddr(struct table_sqlite_handle *tsh, const char *key, void **retp)
d359 1
a359 1
	struct table	       *cfg = table_get_configuration(tsh->table);
a361 1
	struct netaddr	       *netaddr = NULL;
d382 2
a383 3
		if (retp) {
			netaddr = xcalloc(1, sizeof *netaddr, "table_sqlite_netaddr");
			if (! text_to_netaddr(netaddr, sqlite3_column_text(stmt, 0)))
a384 1
			*retp = netaddr;
a398 3
	free(netaddr);
	if (retp)
		*retp = NULL;
@


1.1
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d115 1
@

