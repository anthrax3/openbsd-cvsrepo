head	1.12;
access;
symbols
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.12
date	2015.11.30.19.54.25;	author jung;	state dead;
branches;
next	1.11;
commitid	LaSdnghRSVqZPgAk;

1.11
date	2015.10.11.12.50.00;	author sunil;	state Exp;
branches;
next	1.10;
commitid	dmRjMYloxUoaVmb9;

1.10
date	2015.01.20.17.37.54;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	ZBTFreARDSMmzOIV;

1.9
date	2015.01.16.06.40.21;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	Uu5nFG3wCl0LACBb;

1.8
date	2014.09.29.08.41.55;	author gilles;	state Exp;
branches;
next	1.7;
commitid	QjFvTaDPuFNSj0Ld;

1.7
date	2014.07.08.13.49.09;	author eric;	state Exp;
branches;
next	1.6;
commitid	pEybL9fsrDOC6PJj;

1.6
date	2014.07.01.17.33.51;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	VWr9eTYloJ4pB7bn;

1.5
date	2013.11.18.11.47.16;	author eric;	state Exp;
branches;
next	1.4;

1.4
date	2013.10.26.12.27.59;	author eric;	state Exp;
branches;
next	1.3;

1.3
date	2013.10.24.20.07.16;	author eric;	state Exp;
branches;
next	1.2;

1.2
date	2013.07.22.13.14.49;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2013.07.21.09.38.52;	author eric;	state Exp;
branches;
next	;


desc
@@


1.12
log
@remove table-passwd, table-sqlite, and table-ldap
about 4k lines seldom used code

people who rely on this install mail/opensmtpd-extras

direction discussed (and agreed) with many

ok gilles
@
text
@/*	$OpenBSD: table_passwd.c,v 1.11 2015/10/11 12:50:00 sunil Exp $	*/

/*
 * Copyright (c) 2013 Gilles Chehade <gilles@@poolp.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>

#include <netinet/in.h>
#include <netdb.h>

#include <err.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <string.h>
#include <unistd.h>

#include "smtpd-defines.h"
#include "smtpd-api.h"
#include "log.h"

static int table_passwd_update(void);
static int table_passwd_check(int, struct dict *, const char *);
static int table_passwd_lookup(int, struct dict *, const char *, char *, size_t);
static int table_passwd_fetch(int, struct dict *, char *, size_t);
static int parse_passwd_entry(struct passwd *, char *);

static char	       *config;
static struct dict     *passwd;

int
main(int argc, char **argv)
{
	int	ch;

	log_init(1);

	while ((ch = getopt(argc, argv, "")) != -1) {
		switch (ch) {
		default:
			log_warnx("warn: table-passwd: bad option");
			return (1);
			/* NOTREACHED */
		}
	}
	argc -= optind;
	argv += optind;

	if (argc != 1) {
		log_warnx("warn: table-passwd: bogus argument(s)");
		return (1);
	}

	config = argv[0];

	if (table_passwd_update() == 0) {
		log_warnx("warn: table-passwd: error parsing config file");
		return (1);
	}

	table_api_on_update(table_passwd_update);
	table_api_on_check(table_passwd_check);
	table_api_on_lookup(table_passwd_lookup);
	table_api_on_fetch(table_passwd_fetch);
	table_api_dispatch();

	return (0);
}

static int
table_passwd_update(void)
{
	FILE	       *fp;
	char	       *buf = NULL, *p;
	char		tmp[LINE_MAX];
	size_t		sz = 0;
	ssize_t		len;
	char	       *line;
	struct passwd	pw;
	struct dict    *npasswd;

	/* Parse configuration */
	fp = fopen(config, "r");
	if (fp == NULL)
		return (0);

	npasswd = calloc(1, sizeof *passwd);
	if (npasswd == NULL)
		goto err;

	dict_init(npasswd);

	while ((len = getline(&buf, &sz, fp)) != -1) {
		if (buf[len - 1] == '\n')
			buf[len - 1] = '\0';

		if (strlcpy(tmp, buf, sizeof tmp) >= sizeof tmp) {
			log_warnx("warn: table-passwd: line too long");
			goto err;
		}
		if (! parse_passwd_entry(&pw, tmp)) {
			log_warnx("warn: table-passwd: invalid entry");
			goto err;
		}
		if ((line = strdup(buf)) == NULL)
			err(1, NULL);
		dict_set(npasswd, pw.pw_name, line);
	}
	fclose(fp);

	/* swap passwd table and release old one*/
	if (passwd)
		while (dict_poproot(passwd, (void**)&p))
			free(p);
	passwd = npasswd;

	return (1);

err:
	if (fp)
		fclose(fp);
	free(buf);

	/* release passwd table */
	if (npasswd) {
		while (dict_poproot(npasswd, (void**)&p))
			free(p);
		free(npasswd);
	}
	return (0);
}

static int
table_passwd_check(int service, struct dict *params, const char *key)
{
	return (-1);
}

static int
table_passwd_lookup(int service, struct dict *params, const char *key, char *dst, size_t sz)
{
	int		r;
	struct passwd	pw;
	char	       *line;
	char		tmp[LINE_MAX];

	line = dict_get(passwd, key);
	if (line == NULL)
		return 0;

	(void)strlcpy(tmp, line, sizeof tmp);
	if (! parse_passwd_entry(&pw, tmp)) {
		log_warnx("warn: table-passwd: invalid entry");
		return -1;
	}

	r = 1;
	switch (service) {
	case K_CREDENTIALS:
		if (snprintf(dst, sz, "%s:%s",
			pw.pw_name, pw.pw_passwd) >= (ssize_t)sz) {
			log_warnx("warn: table-passwd: result too large");
			r = -1;
		}
		break;
	case K_USERINFO:
		if (snprintf(dst, sz, "%d:%d:%s",
			pw.pw_uid, pw.pw_gid, pw.pw_dir)
		    >= (ssize_t)sz) {
			log_warnx("warn: table-passwd: result too large");
			r = -1;
		}
		break;
	default:
		log_warnx("warn: table-passwd: unknown service %d",
		    service);
		r = -1;
	}

	return (r);
}

static int
table_passwd_fetch(int service, struct dict *params, char *dst, size_t sz)
{
	return (-1);
}

static int
parse_passwd_entry(struct passwd *pw, char *buf)
{
	const char     *errstr;
	char	       *p, *q;

	p = buf;

	/* username */
	q = p;
	if ((p = strchr(q, ':')) == NULL)
		return 0;
	*p++ = 0;
	pw->pw_name = q;

	/* password */
	q = p;
	if ((p = strchr(q, ':')) == NULL)
		return 0;
	*p++ = 0;
	pw->pw_passwd = q;

	/* uid */
	q = p;
	if ((p = strchr(q, ':')) == NULL)
		return 0;
	*p++ = 0;
	pw->pw_uid = strtonum(q, 1, UID_MAX, &errstr);
	if (errstr)
		return 0;

	/* gid */
	q = p;
	if ((p = strchr(q, ':')) == NULL)
		return 0;
	*p++ = 0;
	pw->pw_gid = strtonum(q, 1, GID_MAX, &errstr);
	if (errstr)
		return 0;

	/* gecos */
	q = p;
	if ((p = strchr(q, ':')) == NULL)
		return 0;
	*p++ = 0;
	pw->pw_gecos = q;

	/* home */
	q = p;
	if ((p = strchr(q, ':')) == NULL)
		return 0;
	*p++ = 0;
	pw->pw_dir = q;

	/* shell */
	q = p;
	if (strchr(q, ':') != NULL)
		return 0;
	pw->pw_shell = q;

	return 1;
}
@


1.11
log
@Convert some fgetln to getline.

Ok gilles@@, giovanni@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_passwd.c,v 1.10 2015/01/20 17:37:54 deraadt Exp $	*/
@


1.10
log
@use <limits.h> comprehensively.  For now try to push <> includes to
each .c file, and out of the .h files.  To avoid overinclude.
ok gilles, in principle.  If this has been done right, -portable should
become easier to maintain.
@
text
@d1 1
a1 1
/*	$OpenBSD: table_passwd.c,v 1.9 2015/01/16 06:40:21 deraadt Exp $	*/
d91 1
a91 1
	char	       *buf, *lbuf = NULL;
d93 2
a94 1
	size_t		len;
d110 1
a110 1
	while ((buf = fgetln(fp, &len))) {
a112 8
		else {
			/* EOF without EOL, copy and add the NUL */
			if ((lbuf = malloc(len + 1)) == NULL)
				err(1, NULL);
			memcpy(lbuf, buf, len);
			lbuf[len] = '\0';
			buf = lbuf;
		}
a125 1
	free(lbuf);
d130 2
a131 2
		while (dict_poproot(passwd, (void**)&buf))
			free(buf);
d139 1
a139 1
	free(lbuf);
d143 2
a144 2
		while (dict_poproot(npasswd, (void**)&buf))
			free(buf);
@


1.9
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: table_passwd.c,v 1.8 2014/09/29 08:41:55 gilles Exp $	*/
d20 6
@


1.8
log
@during a small refactor, we broke table_passwd.

lookup function rely on a parsing function to have a struct passwd members
point to the appropriate position in a buffer... but instead of passing the
buffer, the parsing function uses its own internal buffer which will no
longer be valid upon return.

turns out to work by luck in my tests, not so much when Daniel Adolfsson
tried to use it.

spotted by Daniel Adolfsson <daniel@@priv.nu>
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d25 1
@


1.7
log
@Update the table API: lookup functions can take an optional parameters
dictionnary (currently not set). While there, add a helper for forking
external backends, and remove unused table functions.

ok gilles@@
@
text
@d36 1
a36 1
static int parse_passwd_entry(struct passwd *, const char *);
d85 1
d113 6
a118 1
		if (! parse_passwd_entry(&pw, buf)) {
d163 1
d169 2
a170 1
	if (! parse_passwd_entry(&pw, line)) {
d208 1
a208 1
parse_passwd_entry(struct passwd *pw, const char *line)
a211 1
	char		buf[LINE_MAX];
a212 2
	if (strlcpy(buf, line, sizeof buf) >= sizeof buf)
		return 0;
@


1.6
log
@Fix snprintf() return value tests. ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_passwd.c,v 1.5 2013/11/18 11:47:16 eric Exp $	*/
d33 3
a35 3
static int table_passwd_check(int, const char *);
static int table_passwd_lookup(int, const char *, char *, size_t);
static int table_passwd_fetch(int, char *, size_t);
d146 1
a146 1
table_passwd_check(int service, const char *key)
d152 1
a152 1
table_passwd_lookup(int service, const char *key, char *dst, size_t sz)
d194 1
a194 1
table_passwd_fetch(int service, char *dst, size_t sz)
@


1.5
log
@change dict_poproot() prototype: do not take key placeholder parameter as
it can't work that way.
@
text
@d1 1
a1 1
/*	$OpenBSD: table_passwd.c,v 1.4 2013/10/26 12:27:59 eric Exp $	*/
d171 1
a171 1
			pw.pw_name, pw.pw_passwd) > (ssize_t)sz) {
d179 1
a179 1
		    > (ssize_t)sz) {
@


1.4
log
@%i -> %d in format strings
@
text
@d1 1
a1 1
/*	$OpenBSD: table_passwd.c,v 1.3 2013/10/24 20:07:16 eric Exp $	*/
d125 1
a125 1
		while (dict_poproot(passwd, NULL, (void**)&buf))
d138 1
a138 1
		while (dict_poproot(npasswd, NULL, (void**)&buf))
@


1.3
log
@fix leaks on update
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d177 1
a177 1
		if (snprintf(dst, sz, "%i:%i:%s",
d185 1
a185 1
		log_warnx("warn: table-passwd: unknown service %i",
@


1.2
log
@use unistd.h instead of getopt.h
@
text
@d84 1
a84 1
	char	       *buf, *lbuf;
a89 1

a100 1
	lbuf = NULL;
d121 1
d132 4
d137 1
a137 1
	if (npasswd)
d140 2
d258 1
a258 1
	if ((p = strchr(q, ':')) != NULL)
@


1.1
log
@Add a "passwd" table backend. Useful for sharing vusers with other programs.
@
text
@a21 1
#include <getopt.h>
d26 1
@

