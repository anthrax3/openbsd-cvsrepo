head	1.36;
access;
symbols
	OPENBSD_5_2:1.27.0.2
	OPENBSD_5_2_BASE:1.27
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.2
	OPENBSD_5_0:1.24.0.2
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.22.0.2
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.19.0.2
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4;
locks; strict;
comment	@ * @;


1.36
date	2013.01.26.09.42.46;	author gilles;	state dead;
branches;
next	1.35;

1.35
date	2012.11.12.14.58.53;	author eric;	state Exp;
branches;
next	1.34;

1.34
date	2012.10.14.11.58.23;	author gilles;	state Exp;
branches;
next	1.33;

1.33
date	2012.10.13.08.01.47;	author eric;	state Exp;
branches;
next	1.32;

1.32
date	2012.10.11.21.43.11;	author gilles;	state Exp;
branches;
next	1.31;

1.31
date	2012.09.26.12.28.08;	author eric;	state Exp;
branches;
next	1.30;

1.30
date	2012.09.21.10.22.29;	author eric;	state Exp;
branches;
next	1.29;

1.29
date	2012.09.17.20.19.18;	author eric;	state Exp;
branches;
next	1.28;

1.28
date	2012.08.30.18.25.44;	author gilles;	state Exp;
branches;
next	1.27;

1.27
date	2012.05.29.19.53.10;	author gilles;	state Exp;
branches;
next	1.26;

1.26
date	2012.05.13.00.10.49;	author gilles;	state Exp;
branches;
next	1.25;

1.25
date	2011.12.13.22.09.53;	author eric;	state Exp;
branches;
next	1.24;

1.24
date	2011.05.21.18.43.08;	author gilles;	state Exp;
branches;
next	1.23;

1.23
date	2011.05.01.12.57.11;	author eric;	state Exp;
branches;
next	1.22;

1.22
date	2010.11.28.14.35.58;	author gilles;	state Exp;
branches;
next	1.21;

1.21
date	2010.11.28.13.56.43;	author gilles;	state Exp;
branches;
next	1.20;

1.20
date	2010.10.09.22.05.35;	author gilles;	state Exp;
branches;
next	1.19;

1.19
date	2010.06.01.23.06.23;	author jacekm;	state Exp;
branches;
next	1.18;

1.18
date	2010.06.01.19.47.09;	author jacekm;	state Exp;
branches;
next	1.17;

1.17
date	2010.05.31.23.38.56;	author jacekm;	state Exp;
branches;
next	1.16;

1.16
date	2010.04.27.09.49.23;	author gilles;	state Exp;
branches;
next	1.15;

1.15
date	2010.04.21.21.47.38;	author gilles;	state Exp;
branches;
next	1.14;

1.14
date	2010.04.21.21.04.29;	author gilles;	state Exp;
branches;
next	1.13;

1.13
date	2010.04.21.20.10.24;	author gilles;	state Exp;
branches;
next	1.12;

1.12
date	2010.04.21.19.53.16;	author gilles;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.21.19.45.07;	author gilles;	state Exp;
branches;
next	1.10;

1.10
date	2010.04.21.19.37.32;	author gilles;	state Exp;
branches;
next	1.9;

1.9
date	2010.02.17.17.37.15;	author gilles;	state Exp;
branches;
next	1.8;

1.8
date	2010.02.17.13.47.31;	author gilles;	state Exp;
branches;
next	1.7;

1.7
date	2009.11.03.22.57.41;	author gilles;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.13.21.20.55;	author jacekm;	state Exp;
branches;
next	1.5;

1.5
date	2009.03.06.23.38.18;	author gilles;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.01.16.15.47;	author jacekm;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.06.14.30.51;	author jacekm;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.05.12.14.45;	author sobrado;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.01.21.35.28;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.36
log
@these are no longer used, maps were replaced with something better
@
text
@/*	$OpenBSD: map.c,v 1.35 2012/11/12 14:58:53 eric Exp $	*/

/*
 * Copyright (c) 2008 Gilles Chehade <gilles@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/param.h>
#include <sys/socket.h>

#include <err.h>
#include <errno.h>
#include <event.h>
#include <imsg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "smtpd.h"
#include "log.h"

struct map_backend *map_backend_lookup(enum map_src);

extern struct map_backend map_backend_static;

extern struct map_backend map_backend_db;
extern struct map_backend map_backend_file;

static objid_t	last_map_id = 0;

struct map_backend *
map_backend_lookup(enum map_src source)
{
	switch (source) {
	case S_NONE:
		return &map_backend_static;

	case S_DB:
		return &map_backend_db;

	case S_FILE:
		return &map_backend_file;

	default:
		fatalx("invalid map type");
	}
	return NULL;
}

struct map *
map_findbyname(const char *name)
{
	struct map	*m;

	TAILQ_FOREACH(m, env->sc_maps, m_entry) {
		if (strcmp(m->m_name, name) == 0)
			break;
	}
	return (m);
}

struct map *
map_find(objid_t id)
{
	struct map	*m;

	TAILQ_FOREACH(m, env->sc_maps, m_entry) {
		if (m->m_id == id)
			break;
	}
	return (m);
}

void *
map_lookup(objid_t mapid, const char *key, enum map_kind kind)
{
	void *hdl = NULL;
	char *ret = NULL;
	struct map *map;
	struct map_backend *backend = NULL;

	map = map_find(mapid);
	if (map == NULL) {
		errno = EINVAL;
		return NULL;
	}

	backend = map_backend_lookup(map->m_src);
	hdl = backend->open(map);
	if (hdl == NULL) {
		log_warn("warn: map_lookup: can't open %s", map->m_config);
		if (errno == 0)
			errno = ENOTSUP;
		return NULL;
	}

	ret = backend->lookup(hdl, key, kind);

	backend->close(hdl);
	errno = 0;
	return ret;
}

int
map_compare(objid_t mapid, const char *key, enum map_kind kind,
    int (*func)(const char *, const char *))
{
	void *hdl = NULL;
	struct map *map;
	struct map_backend *backend = NULL;
	int ret;

	map = map_find(mapid);
	if (map == NULL) {
		errno = EINVAL;
		return 0;
	}

	backend = map_backend_lookup(map->m_src);
	hdl = backend->open(map);
	if (hdl == NULL) {
		log_warn("warn: map_compare: can't open %s", map->m_config);
		if (errno == 0)
			errno = ENOTSUP;
		return 0;
	}

	ret = backend->compare(hdl, key, kind, func);

	backend->close(hdl);
	errno = 0;
	return ret;	
}

struct map *
map_create(enum map_src src, const char *name)
{
	struct map	*m;
	size_t		 n;

	if (name && map_findbyname(name))
		errx(1, "map_create: map \"%s\" already defined", name);

	m = xcalloc(1, sizeof(*m), "map_create");
	m->m_src = src;
	m->m_id = ++last_map_id;
	if (m->m_id == INT_MAX)
		errx(1, "map_create: too many maps defined");

	if (name == NULL)
		snprintf(m->m_name, sizeof(m->m_name), "<dynamic:%u>", m->m_id);
	else {
		n = strlcpy(m->m_name, name, sizeof(m->m_name));
		if (n >= sizeof(m->m_name))
			errx(1, "map_create: map name too long");
	}

	TAILQ_INIT(&m->m_contents);

	TAILQ_INSERT_TAIL(env->sc_maps, m, m_entry);

	return (m);
}

void
map_destroy(struct map *m)
{
	struct mapel	*me;

	if (m->m_src != S_NONE)
		errx(1, "map_add: cannot delete all from map");

	while ((me = TAILQ_FIRST(&m->m_contents))) {
		TAILQ_REMOVE(&m->m_contents, me, me_entry);
		free(me);
	}

	TAILQ_REMOVE(env->sc_maps, m, m_entry);
	free(m);
}

void
map_add(struct map *m, const char *key, const char * val)
{
	struct mapel	*me;
	size_t		 n;

	if (m->m_src != S_NONE)
		errx(1, "map_add: cannot add to map");

	me = xcalloc(1, sizeof(*me), "map_add");
	n = strlcpy(me->me_key, key, sizeof(me->me_key));
	if (n >= sizeof(me->me_key))
		errx(1, "map_add: key too long");

	if (val) {
		n = strlcpy(me->me_val, val,
		    sizeof(me->me_val));
		if (n >= sizeof(me->me_val))
			errx(1, "map_add: value too long");
	}

	TAILQ_INSERT_TAIL(&m->m_contents, me, me_entry);
}

void
map_delete(struct map *m, const char *key)
{
	struct mapel	*me;
	
	if (m->m_src != S_NONE)
		errx(1, "map_add: cannot delete from map");

	TAILQ_FOREACH(me, &m->m_contents, me_entry) {
		if (strcmp(me->me_key, key) == 0)
			break;
	}
	if (me == NULL)
		return;
	TAILQ_REMOVE(&m->m_contents, me, me_entry);
	free(me);
}

void *
map_open(struct map *m)
{
	struct map_backend *backend = NULL;

	backend = map_backend_lookup(m->m_src);
	return backend->open(m);
}

void
map_close(struct map *m, void *hdl)
{
	struct map_backend *backend = NULL;

	backend = map_backend_lookup(m->m_src);
	backend->close(hdl);
}


void
map_update(struct map *m)
{
	struct map_backend *backend = NULL;

	backend = map_backend_lookup(m->m_src);
	if (backend->update)
		backend->update(m);
}
@


1.35
log
@Cleanups and improvements:

* Log more events (especially client session) and use a better scheme
  for that: each messages is prefixed with a token to easily identify
  its class:
    - info/warn/debug: general server messages
    - smtp-in: smtp client connections
    - relay: status update for relayed messages
    - delivery: status update for local deliveries

* Implement "smtpctl monitor" to display updates of selected internal
  counters.

* When reloading the on-disk queue at startup do not commit a message
  if no envelope was submitted for that message.

* Remove unused stuff in the config parser.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.34 2012/10/14 11:58:23 gilles Exp $	*/
@


1.34
log
@introduce map_file.c which will deprecate map_stdio.c

The idea is to have a file-backed map but to have smtpd(8) cache the maps
so that it cannot be partially read if edited while mail is received. The
file is read and converted to a static map (map_static.c), changes aren't
visible to smtpd until an explicit: smtpctl update map  which reads file,
builds a new static map and invalidates the former.

partial-read issue discussed with beck@@ and halex@@
idea to convert internally to a static map by eric@@

diff ok eric@@ and chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.33 2012/10/13 08:01:47 eric Exp $	*/
d105 1
a105 1
		log_warn("map_lookup: can't open %s", map->m_config);
d136 1
a136 1
		log_warn("map_compare: can't open %s", map->m_config);
d206 2
a207 2
	n = strlcpy(me->me_key.med_string, key, sizeof(me->me_key.med_string));
	if (n >= sizeof(me->me_key.med_string))
d211 3
a213 3
		n = strlcpy(me->me_val.med_string, val,
		    sizeof(me->me_val.med_string));
		if (n >= sizeof(me->me_val.med_string))
d229 1
a229 1
		if (strcmp(me->me_key.med_string, key) == 0)
@


1.33
log
@Make map_lookup() and make_compare() set errno on failure to distinguish
between "no match" and "internal error" (e.g. missing or broken db file).
Adapt alias expansion and ruleset matching code to check for such errors,
in which case the current processing is aborted, and a temporary failure
is reported to the smtp session.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.32 2012/10/11 21:43:11 gilles Exp $	*/
d41 1
a41 2
extern struct map_backend map_backend_stdio;
/* extern struct map_backend map_backend_ldap; */
d55 3
a57 6
	case S_PLAIN:
		return &map_backend_stdio;
/*
	case S_LDAP:
		return &map_backend_ldap;
*/
d149 1
a149 1
struct map*
d180 17
d211 1
a211 1
		n = strlcpy(me->me_val.med_string, key,
d216 8
d225 40
a264 1
	TAILQ_INSERT_TAIL(&m->m_contents, me, me_entry);
@


1.32
log
@- map_create() takes a map_src not a map_kind

ok eric@@ and chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.31 2012/09/26 12:28:08 eric Exp $	*/
d26 1
d101 2
a102 1
	if (map == NULL)
d104 1
d110 2
d118 1
d132 2
a133 1
	if (map == NULL)
d135 1
d140 3
a142 1
		log_warn("map_lookup: can't open %s", map->m_config);
d149 1
@


1.31
log
@maps must be numbered from 1 up, as 0 means "no map".

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.30 2012/09/21 10:22:29 eric Exp $	*/
d143 1
a143 1
map_create(enum map_kind kind, const char *name)
d152 1
a152 1
	m->m_src = kind;
@


1.30
log
@Move ruleset_match() prototype to smtpd.h and make the envelope const.
Adapt a lot of functions in chain to use const args where required.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.29 2012/09/17 20:19:18 eric Exp $	*/
d153 1
a153 1
	m->m_id = last_map_id++;
@


1.29
log
@Add map_create() and map_add() helpers.  Simplify the config parser by a
great deal.

While there, rename the default "localhost" map to "<localhost>" to make
it look more internal, and create a single "<anyhost>" map referenced by
"from all" rules, instead of creating a dynamic one for each of them.

ok gilles@@ chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.28 2012/08/30 18:25:44 gilles Exp $	*/
d92 1
a92 1
map_lookup(objid_t mapid, char *key, enum map_kind kind)
d117 2
a118 2
map_compare(objid_t mapid, char *key, enum map_kind kind,
    int (*func)(char *, char *))
@


1.28
log
@- import latest aldap.[ch] and ber.[ch] from ypldap
- revive map_ldap.c by updating it to the current API

diff by Mathieu Masson who played puzzle with an oooold changeset of mine,
this import is to let us work on it in tree, it won't work as is.

idea ok eric@@ and chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.27 2012/05/29 19:53:10 gilles Exp $	*/
d25 1
d43 2
d140 54
@


1.27
log
@- introduce map_static.c as a backend to static maps in parse.y, this has
  the benefit that we no longer have two code paths whenever we deal with
  maps, we can always use the backend mechanism.

I have not plugged this in yet, I'll do it in a later commit, just get it
out of my sandbox
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.26 2012/05/13 00:10:49 gilles Exp $	*/
d40 1
d54 4
a57 1

@


1.26
log
@- cleanup parse.y by removing lots of code that should not have been there,
  but in ruleset.c and util.c instead.

- introduce the new map_compare() map API call to allow iterating over keys
  and comparing them with provided key using provided function. this allows
  checking a partial key in a key set, very useful for comparing an address
  to a set of netmask.

- introduce new map kind K_NETADDR
- implement K_NETADDR for map_db and map_stdio
- teach ruleset checking how to use the map_compare() with K_NETADDR

we can now do the following:

   map "srcaddr" source plain "/etc/mail/srcaddr.txt"

   accept from map srcaddr for domain "openbsd.org" [...]
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.25 2011/12/13 22:09:53 eric Exp $	*/
d36 2
d45 3
d97 1
a97 1
	hdl = backend->open(map->m_config);
d123 1
a123 1
	hdl = backend->open(map->m_config);
@


1.25
log
@merge map_backend.c into map.c

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.24 2011/05/21 18:43:08 gilles Exp $	*/
d102 26
@


1.24
log
@until now the map_backend API was not really useful for backends that are
not key/val stores. refactored a bit so that smtpd can really take
advantage of backends. preliminary work for ldap support ;-)

no functionnal change
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.23 2011/05/01 12:57:11 eric Exp $	*/
d35 19
a53 1
struct map_parser *map_parser_lookup(enum map_kind);
@


1.23
log
@the smtpd env is meant to be global, so do not pass it all around.

discussed with and ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.22 2010/11/28 14:35:58 gilles Exp $	*/
a64 1
	char *result = NULL;
a65 1
	size_t len;
a67 1
	struct map_parser *parser = NULL;
a73 2
	parser  = map_parser_lookup(kind);

d80 1
a80 8
	ret = result = backend->get(hdl, key, &len);
	if (ret == NULL)
		goto end;

	if (parser->extract != NULL) {
		ret = parser->extract(key, result, len);
		free(result);
	}
a81 1
end:
@


1.22
log
@remove all unused headers
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.21 2010/11/28 13:56:43 gilles Exp $	*/
d38 1
a38 1
map_findbyname(struct smtpd *env, const char *name)
d50 1
a50 1
map_find(struct smtpd *env, objid_t id)
d62 1
a62 1
map_lookup(struct smtpd *env, objid_t mapid, char *key, enum map_kind kind)
d72 1
a72 1
	map = map_find(env, mapid);
@


1.21
log
@a bit of .h cleanups, no functionnal change
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.20 2010/10/09 22:05:35 gilles Exp $	*/
a24 4
#include <ctype.h>
#include <db.h>
#include <err.h>
#include <errno.h>
a25 1
#include <fcntl.h>
@


1.20
log
@backout the "new" queue code commited 4 months ago. it has many good ideas,
is way more optimized than what we had earlier and there's definitely stuff
we want to keep, however it is early optimization that doesn't account for
many features and makes them hard (if not impossible) to write without
ugly workarounds that ruin the purpose of the optimizations.

the backout goes to 30 May's right before the commit and catches up on all
the non-queue related commits that happened since then.

i'll work on reintroducing the ideas from this queue when the basic
features we expect from a MTA are implemented.

suggested on tech@@ about a week ago, no objections, several "please make
smtpd move forward" mails from hackers and tech readers.
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.16 2010/04/27 09:49:23 gilles Exp $	*/
d31 1
d37 1
@


1.19
log
@new queue, again; gcc2 compile tested by deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.17 2010/05/31 23:38:56 jacekm Exp $	*/
d67 3
a69 2
	void *hdl;
	char *result, *tmp;
d72 2
a73 2
	struct map_backend *backend;
	struct map_parser *parser;
d88 2
a89 2
	result = backend->get(hdl, key, &len);
	if (result == NULL)
d92 3
a94 4
	if (parser->extract) {
		tmp = result;
		result = parser->extract(key, result, len);
		free(tmp);
d99 1
a99 1
	return result;
@


1.18
log
@New queue doesn't compile on gcc2, back out.  Spotted by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.16 2010/04/27 09:49:23 gilles Exp $	*/
d67 2
a68 3
	void *hdl = NULL;
	char *result = NULL;
	char *ret = NULL;
d71 2
a72 2
	struct map_backend *backend = NULL;
	struct map_parser *parser = NULL;
d87 2
a88 2
	ret = result = backend->get(hdl, key, &len);
	if (ret == NULL)
d91 4
a94 3
	if (parser->extract != NULL) {
		ret = parser->extract(key, result, len);
		free(result);
d99 1
a99 1
	return ret;
@


1.17
log
@Rewrite entire queue code.

Major goals:

1) Fix bad performance caused by the runner process doing full queue
read in 1s intervals.  My Soekris can now happily accept >50 msg/s
while having multi-thousand queue; before, one hundred queue would
bring the system to its knees.

2) Introduce Qmail-like scheduler that doesn't write as much to the
disk so that it needs less code for servicing error conditions,
which in some places can be tricky to get right.

3) Introduce separation between the scheduler and the backend; these
two queue aspects shouldn't be too tied too each other.  This means
that eg. storing queue in SQL requires rewrite of just queue_backend.c.

4) Make on-disk queue format architecture independent, and more
easily extensible, to reduce number of flag days in the future.

Minor goals:

ENOSPC no longer prevents delivery attempts, fixed session limiting
for relayed mail, improved batching of "relay via" mails, human-readable
mailq output, "show queue raw" command, clearer logging, sending
of single bounce about multiple recipients, exact delay= computation,
zero delay between deliveries while within session limit (currently
1s delay between re-scheduling is enforced), mta no longer requests
content fd, corrected session limit for bounce submissions, tiny
<100B queue files instead of multi-KB, detect loops before accepting
mail, reduce traffic on imsg channels by killing enormous struct
submit_status.
@
text
@d67 3
a69 2
	void *hdl;
	char *result, *tmp;
d72 2
a73 2
	struct map_backend *backend;
	struct map_parser *parser;
d88 2
a89 2
	result = backend->get(hdl, key, &len);
	if (result == NULL)
d92 3
a94 4
	if (parser->extract) {
		tmp = result;
		result = parser->extract(key, result, len);
		free(tmp);
d99 1
a99 1
	return result;
@


1.16
log
@initial work at fixing aliases support:
- kill struct alias, struct expandnode is used instead
- introduce map_parse_alias() and map_parse_virtual()
- aliases and virtual code no longer assume db(3) but use the map API which
  lets them become backend agnostic AND value-checked. this actually makes
  the code simpler by removing all values parsing from aliases.c
- rename K_SECRETS -> K_SECRET, K_ALIASES -> K_ALIAS for consistency the
  enum has singular names.
- aliases, virtual and forward now work with an expandtree and deal with
  multiple levels of resolving by merging expandtree's

more coming soon ;)
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.15 2010/04/21 21:47:38 gilles Exp $	*/
d67 2
a68 3
	void *hdl = NULL;
	char *result = NULL;
	char *ret = NULL;
d71 2
a72 2
	struct map_backend *backend = NULL;
	struct map_parser *parser = NULL;
d87 2
a88 2
	ret = result = backend->get(hdl, key, &len);
	if (ret == NULL)
d91 4
a94 3
	if (parser->extract != NULL) {
		ret = parser->extract(key, result, len);
		free(result);
d99 1
a99 1
	return ret;
@


1.15
log
@introduce first map parser for maps of kind K_SECRETS !

map_parse_secret() converts a map value into a struct map_secret. lka no
longer needs to do any parsing, it simply calls map_lookup() with kind
K_SECRETS, checks if it returned a !NULL value, and call lka_encode_secret
to safely do the base64 encoding.
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.14 2010/04/21 21:04:29 gilles Exp $	*/
d93 1
a93 1
		ret = parser->extract(result, len);
@


1.14
log
@map.c is growing big, split it into three different files:
map.c contains the map API calls as usable by smtpd processes,
map_backend.c contains backend implementations and map_parser.c contains
parser implementations used internally by the map API
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.13 2010/04/21 20:10:24 gilles Exp $	*/
d64 1
a64 1
char *
@


1.13
log
@change prototypes for map_*_get() functions, we need the get-er function
to fill the size of value for the caller.

have map_lookup() actually lookup the parser in map_parsers table and
call it if it is set, otherwise return raw value which is similar to
current behavior. currently, no map kind has a parser set, so this is
essentially no functionnal change.

fix map_stdio_get(), it was not used yet in -current but i spotted a
bug while enabling it in my sandbox. it returns key and value instead
of key.
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.12 2010/04/21 19:53:16 gilles Exp $	*/
a39 36
/* db(3) backend */
void *map_db_open(char *);
void map_db_close(void *);
char *map_db_get(void *, char *, size_t *);
int map_db_put(void *, char *, char *);

/* stdio(3) backend */
void *map_stdio_open(char *);
void map_stdio_close(void *);
char *map_stdio_get(void *, char *, size_t *);
int map_stdio_put(void *, char *, char *);


struct map_backend {
	enum map_src source;
	void *(*open)(char *);
	void (*close)(void *);
	char *(*get)(void *, char *, size_t *);
	int (*put)(void *, char *, char *);
} map_backends[] = {
	{ S_DB,
	  map_db_open, map_db_close, map_db_get, map_db_put },
	{ S_FILE,
	  map_stdio_open, map_stdio_close, map_stdio_get, map_stdio_put },
};

struct map_parser {
	enum map_kind kind;
	void *(*extract)(char *, size_t len);
} map_parsers[] = {
	{ K_NONE, NULL },
	{ K_ALIASES, NULL },
	{ K_VIRTUAL, NULL },
	{ K_SECRETS, NULL }
};

a99 146
}

struct map_backend *
map_backend_lookup(enum map_src source)
{
	u_int8_t i;

	for (i = 0; i < nitems(map_backends); ++i)
		if (map_backends[i].source == source)
			break;

	if (i == nitems(map_backends))
		fatalx("invalid map type");

	return &map_backends[i];
}

struct map_parser *
map_parser_lookup(enum map_kind kind)
{
	u_int8_t i;

	for (i = 0; i < nitems(map_parsers); ++i)
		if (map_parsers[i].kind == kind)
			break;

	if (i == nitems(map_parsers))
		fatalx("invalid map kind");

	return &map_parsers[i];
}

/* db(3) backend */
void *
map_db_open(char *src)
{
	return dbopen(src, O_RDONLY, 0600, DB_HASH, NULL);
}

void
map_db_close(void *hdl)
{
	DB *db = hdl;

	db->close(db);
}

char *
map_db_get(void *hdl, char *key, size_t *len)
{
	int ret;
	DBT dbk;
	DBT dbv;
	DB *db = hdl;
	char *result = NULL;

	dbk.data = key;
	dbk.size = strlen(dbk.data) + 1;

	if ((ret = db->get(db, &dbk, &dbv, 0)) != 0)
		return NULL;

	result = calloc(dbv.size, 1);
	if (result == NULL)
		fatal("calloc");
	(void)strlcpy(result, dbv.data, dbv.size);

	*len = dbv.size;

	return result;
}

int
map_db_put(void *hdl, char *key, char *val)
{
	return 0;
}


/* stdio(3) backend */
void *
map_stdio_open(char *src)
{
	return fopen(src, "r");
}

void
map_stdio_close(void *hdl)
{
	FILE *fp = hdl;

	fclose(fp);
}

char *
map_stdio_get(void *hdl, char *key, size_t *len)
{
	char *buf, *lbuf;
	size_t flen;
	char *keyp;
	char *valp;
	FILE *fp = hdl;
	char *result = NULL;

	lbuf = NULL;
	while ((buf = fgetln(fp, &flen))) {
		if (buf[flen - 1] == '\n')
			buf[flen - 1] = '\0';
		else {
			if ((lbuf = malloc(flen + 1)) == NULL)
				err(1, NULL);
			memcpy(lbuf, buf, flen);
			lbuf[flen] = '\0';
			buf = lbuf;
		}

		keyp = buf;
		while (isspace((int)*keyp))
			++keyp;
		if (*keyp == '\0' || *keyp == '#')
			continue;

		valp = keyp;
		strsep(&valp, " \t:");
		if (valp == NULL || valp == keyp)
			continue;

		if (strcmp(keyp, key) != 0)
			continue;

		result = strdup(valp);
		if (result == NULL)
			err(1, NULL);
		*len = strlen(result);

		break;
	}
	free(lbuf);

	return result;
}

int
map_stdio_put(void *hdl, char *key, char *val)
{
	return 0;
@


1.12
log
@map_lookup() takes an additionnal parameter of type enum map_kind which
will be used to select the appropriate map parser. make sure every call
to map_lookup() is updated. map_lookup() currently ignores the value.
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.10 2010/04/21 19:37:32 gilles Exp $	*/
d43 1
a43 1
char *map_db_get(void *, char *);
d49 1
a49 1
char *map_stdio_get(void *, char *);
d57 1
a57 1
	char *(*get)(void *, char *);
d105 2
d109 1
d116 1
d124 10
a133 1
	result = backend->get(hdl, key);
d135 1
a135 2

	return result;
d184 1
a184 1
map_db_get(void *hdl, char *key)
d203 2
d231 1
a231 1
map_stdio_get(void *hdl, char *key)
d234 1
a234 1
	size_t len;
d241 3
a243 3
	while ((buf = fgetln(fp, &len))) {
		if (buf[len - 1] == '\n')
			buf[len - 1] = '\0';
d245 1
a245 1
			if ((lbuf = malloc(len + 1)) == NULL)
d247 2
a248 2
			memcpy(lbuf, buf, len);
			lbuf[len] = '\0';
d266 1
a266 1
		result = strdup(buf);
d269 2
@


1.11
log
@introduce enum map_kind, the map_parsers array and map_parser_lookup()
which will be used to perform stronger checks on map values. they are
unused yet ...
@
text
@d72 2
a73 1
	{ K_CREDENTIALS, NULL }
d101 1
a101 1
map_lookup(struct smtpd *env, objid_t mapid, char *key)
@


1.10
log
@simplify map_lookup() by having the backend lookup done in new
map_backend_lookup() function, no functionnal change, first of
many changes to come in map.c
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.9 2010/02/17 17:37:15 gilles Exp $	*/
d38 1
d66 9
d140 14
@


1.9
log
@in map_stdio_get() use strdup on the right buffer, not on a pointer that
will be NULL 99% of the times... fixes segv in path that's not enabled
yet
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.8 2010/02/17 13:47:31 gilles Exp $	*/
d37 2
d53 1
a53 1
	enum map_src map_type;
a91 1
	u_int8_t i;
d101 1
a101 3
	for (i = 0; i < nitems(map_backends); ++i)
		if (map_backends[i].map_type == map->m_src)
			break;
a102 4
	if (i == nitems(map_backends))
		fatalx("invalid map type");

	backend = &map_backends[i];
d113 15
@


1.8
log
@the map api becomes backend-agnostic with initial support for db(3) and
stdio(3) backends, though for now we only enable db(3). this is the first
commit of a serie to improve maps and everything related.

idea discussed with and diff okay jacekm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.7 2009/11/03 22:57:41 gilles Exp $	*/
d217 1
a217 1
		result = strdup(lbuf);
@


1.7
log
@teach makemap how to build a set, which is a map containing only keys.
smtpd is now capable of looking primary domains at runtime in a set, which
means that the following becomes possible:

	map "primary" { source db "/etc/mail/primary.db" }
	accept for domain map "primary" deliver to mbox

while at it fix a couple bugs in the aliases resolution path which caused
recipients to bounce if a ruleset did not have an "accept for local" rule

"diff reads good" jacekm@@, flush queue & make clean
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.6 2009/05/13 21:20:55 jacekm Exp $	*/
d25 1
d27 1
d37 26
d88 1
a88 1
map_dblookup(struct smtpd *env, objid_t mapid, char *keyname)
d90 3
a92 4
	int ret;
	DBT key;
	DBT val;
	DB *db;
d94 1
a94 1
	char *result = NULL;
d100 11
a110 2
	if (map->m_src != S_DB) {
		log_warn("invalid map type for map %d", map->m_id);
d114 35
a148 3
	db = dbopen(map->m_config, O_RDONLY, 0600, DB_HASH, NULL);
	if (db == NULL) {
		log_warn("map_dblookup: can't open %s", map->m_config);
a149 1
	}
d151 13
a163 2
	key.data = keyname;
	key.size = strlen(key.data) + 1;
a164 5
	if ((ret = db->get(db, &key, &val, 0)) == -1) {
		log_warn("map_dblookup: map '%d'", map->m_id);
		db->close(db);
		return NULL;
	}
d166 6
a171 6
	if (ret == 0) {
		result = calloc(val.size, 1);
		if (result == NULL)
			fatal("calloc");
		(void)strlcpy(result, val.data, val.size);
	}
d173 4
a176 1
	db->close(db);
d178 1
a178 1
	return ret == 0 ? result : NULL;
d182 1
a182 1
map_dblookupbyname(struct smtpd *env, char *mapname, char *keyname)
d184 39
a222 1
	struct map *map;
d224 2
a225 3
	map = map_findbyname(env, mapname);
	if (map == NULL)
		return NULL;
d227 4
a230 1
	return map_dblookup(env, map->m_id, keyname);
@


1.6
log
@log dbopen and db->get errors; based on diff from Daniel Ouellet.
looks ok to gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.5 2009/03/06 23:38:18 gilles Exp $	*/
d60 1
a60 1
map_dblookup(struct smtpd *env, char *mapname, char *keyname)
d69 1
a69 1
	map = map_findbyname(env, mapname);
d74 1
a74 1
		log_warn("invalid map type for map \"%s\"", mapname);
d88 1
a88 1
		log_warn("map_dblookup: map '%s'", mapname);
d103 12
@


1.5
log
@introduce map_dblookup() which allows us to query db maps for plain entries
and catch (and warn) about invalid map types.
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.4 2009/01/01 16:15:47 jacekm Exp $	*/
d79 2
a80 1
	if (db == NULL)
d82 1
d88 1
@


1.4
log
@remove unnecessary includes; ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.3 2008/12/06 14:30:51 jacekm Exp $	*/
d25 1
d28 1
d57 43
@


1.3
log
@Don't include <err.h> where log.c API must be used.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.2 2008/11/05 12:14:45 sobrado Exp $	*/
a23 2
#include <sys/wait.h>
#include <sys/stat.h>
a26 5
#include <fcntl.h>
#include <paths.h>
#include <pwd.h>
#include <signal.h>
#include <stdarg.h>
a29 2
#include <sysexits.h>
#include <unistd.h>
@


1.2
log
@add a few missing id tags; there are a bunch of files, and developers
will probably miss this change when working on more important matters,
so it is probably better to sort them now.  there is a risk of losing
the tags if a change needs to be reverted too.

written with excellent advice from jmc@@

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a26 1
#include <err.h>
@


1.1
log
@smtpd is a smtp server implementation for OpenBSD. It is a work in progress
which still lacks many features. bringing it in tree will help working on it
more easily.

"at this stage it should go in" henning@@, "move ahead" deraadt@@
@
text
@d1 2
@

