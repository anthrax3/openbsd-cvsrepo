head	1.29;
access;
symbols
	OPENBSD_4_6:1.19.0.4
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.14.0.2
	OPENBSD_4_5_BASE:1.14;
locks; strict;
comment	@ * @;


1.29
date	2009.09.04.11.53.48;	author jacekm;	state dead;
branches;
next	1.28;

1.28
date	2009.09.02.21.04.11;	author jacekm;	state Exp;
branches;
next	1.27;

1.27
date	2009.09.02.10.00.58;	author jacekm;	state Exp;
branches;
next	1.26;

1.26
date	2009.08.18.18.38.05;	author gilles;	state Exp;
branches;
next	1.25;

1.25
date	2009.08.08.00.02.22;	author gilles;	state Exp;
branches;
next	1.24;

1.24
date	2009.08.06.16.29.35;	author gilles;	state Exp;
branches;
next	1.23;

1.23
date	2009.08.06.16.26.39;	author gilles;	state Exp;
branches;
next	1.22;

1.22
date	2009.08.06.14.27.41;	author gilles;	state Exp;
branches;
next	1.21;

1.21
date	2009.08.06.13.40.45;	author gilles;	state Exp;
branches;
next	1.20;

1.20
date	2009.07.28.13.53.51;	author gilles;	state Exp;
branches;
next	1.19;

1.19
date	2009.06.05.21.55.40;	author jacekm;	state Exp;
branches;
next	1.18;

1.18
date	2009.05.27.13.14.18;	author jacekm;	state Exp;
branches;
next	1.17;

1.17
date	2009.03.15.19.15.25;	author gilles;	state Exp;
branches;
next	1.16;

1.16
date	2009.03.12.11.08.26;	author pea;	state Exp;
branches;
next	1.15;

1.15
date	2009.03.03.15.47.28;	author gilles;	state Exp;
branches;
next	1.14;

1.14
date	2009.02.23.00.51.32;	author chl;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.30.20.11.13;	author form;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.29.15.20.34;	author gilles;	state Exp;
branches;
next	1.11;

1.11
date	2009.01.28.12.28.25;	author jacekm;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.14.22.41.41;	author gilles;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.01.16.15.47;	author jacekm;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.06.14.30.51;	author jacekm;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.06.14.24.15;	author gilles;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.17.21.56.18;	author chl;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.11.20.59.11;	author gilles;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.10.16.33.07;	author gilles;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.05.12.14.45;	author sobrado;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.01.21.41.02;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.01.21.35.28;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.29
log
@merged with mda.c
@
text
@/*	$OpenBSD: store.c,v 1.28 2009/09/02 21:04:11 jacekm Exp $	*/

/*
 * Copyright (c) 2008 Gilles Chehade <gilles@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/param.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>

#include <netinet/in.h>
#include <arpa/inet.h>

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <event.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#include "smtpd.h"

int
file_copy(FILE *dest, FILE *src, struct path *path, enum action_type type, int session)
{
	char *buf, *lbuf;
	size_t len;
	char *escape;

	if (!session && path && fprintf(dest, "Delivered-To: %s@@%s\n",
		path->user, path->domain) == -1)
		return 0;

	lbuf = NULL;
	while ((buf = fgetln(src, &len))) {
		if (buf[len - 1] == '\n') {
			buf[len - 1] = '\0';
			len--;
		}
		else {
			/* EOF without EOL, copy and add the NUL */
			if ((lbuf = malloc(len + 1)) == NULL)
				err(1, NULL);
			memcpy(lbuf, buf, len);
			lbuf[len] = '\0';
			buf = lbuf;
		}

		if (!session && type == A_MBOX) {
			escape = buf;
			while (*escape == '>')
				++escape;
			if (strncmp("From ", escape, 5) == 0) {
				if (fprintf(dest, ">") != 1)
					return 0;
			}
		}

		/* "If first character of the line is a period, one
		 *  additional period is inserted at the beginning."
		 * [4.5.2]
		 */
		if (session && *buf == '.')
			if (fprintf(dest, ".") != 1)
				return 0;

		if (fprintf(dest, "%s%s", buf, session ? "\r\n" : "\n") !=
			(int)len + (session ? 2 : 1))
			return 0;
	}
	free(lbuf);

	if (!session && type == A_MBOX) {
		if (fprintf(dest, "\n") != 1)
			return 0;
	}

	return 1;
}

int
store_write_message(struct batch *batchp, struct message *messagep)
{
	FILE *mboxfp;
	FILE *messagefp;

	mboxfp = fdopen(batchp->sessionp->mboxfd, "a");
	if (mboxfp == NULL)
		return 0;

	messagefp = fdopen(batchp->sessionp->messagefd, "r");
	if (messagefp == NULL)
		goto bad;

	if (! file_copy(mboxfp, messagefp, &messagep->session_rcpt,
		messagep->recipient.rule.r_action, 0))
		goto bad;

	fflush(mboxfp);
	fsync(fileno(mboxfp));
	fclose(mboxfp);
	fclose(messagefp);
	return 1;

bad:
	if (mboxfp != NULL)
		fclose(mboxfp);

	if (messagefp != NULL)
		fclose(messagefp);

	return 0;
}

int
store_message(struct batch *batchp, struct message *messagep)
{
	struct stat sb;

	if (fstat(batchp->sessionp->mboxfd, &sb) == -1)
		return 0;

	if (! store_write_message(batchp, messagep))
		return 0;
	return 1;
}
@


1.28
log
@Prepend Delivered-To, not append.  Discussed with gilles@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.27 2009/09/02 10:00:58 jacekm Exp $	*/
@


1.27
log
@remove dead code, gilles ok
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.26 2009/08/18 18:38:05 gilles Exp $	*/
d47 4
a50 1
	int inheaders = 1;
a64 14
		}

		/* If we are NOT dealing with a mailer daemon copy, we have
		 * path set to the original recipient. In that case, we can
		 * add the Delivered-To header to help loop detection.
		 */
		if (!session && path != NULL && inheaders &&
			(*buf == '\0' ||
				(!isspace((int)*buf) &&
				 strchr(buf, ':') == NULL))) {
			if (fprintf(dest, "Delivered-To: %s@@%s\n",
				path->user, path->domain) == -1)
				return 0;
			inheaders = 0;
@


1.26
log
@The end of headers check that is used to determine where to insert our
Delivered-To header was wrong and could eventually lead to smtpd adding it
too early and making the remaining headers appear as body part to MUAs.

issue reported by Mathieu Goessens <gebura@@poolp.org>
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.25 2009/08/08 00:02:22 gilles Exp $	*/
d152 1
a152 5
	if (! store_write_message(batchp, messagep)) {
		if (S_ISREG(sb.st_mode)) {
			ftruncate(batchp->sessionp->mboxfd, sb.st_size);
			return 0;
		}
a153 1
	}
@


1.25
log
@import some changes from portable smtpd to reduce the delta between both.
this commit contains mostly missing casts and cosmethic changes, do not
expect to build this anywhere but on OpenBSD, it does not contain any of
the portable glue.
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.24 2009/08/06 16:29:35 gilles Exp $	*/
d69 3
a71 1
		    strchr(buf, ':') == NULL && !isspace((int)*buf)) {
@


1.24
log
@replace X-OpenSMPTD-Loop with Delivered-To

idea by jacekm@@ a few weeks ago, discussed with pyr
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.23 2009/08/06 16:26:39 gilles Exp $	*/
d69 1
a69 1
		    strchr(buf, ':') == NULL && !isspace(*buf)) {
@


1.23
log
@when writing a bounce, follow the same rule as for mta sessions and prepend
with a dot lines starting with a dot
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.22 2009/08/06 14:27:41 gilles Exp $	*/
d66 1
a66 1
		 * add the X-OpenSMTPD-Loop header to help loop detection.
d70 1
a70 1
			if (fprintf(dest, "X-OpenSMTPD-Loop: %s@@%s\n",
@


1.22
log
@factorize file_copy_session() and file_copy() so file_copy() can handle
both deliveries to mailboxes (mbox/maildir) and copying to a session.
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.21 2009/08/06 13:40:45 gilles Exp $	*/
d85 8
@


1.21
log
@This commit reworks the entire mailer daemon support to actually make it
work for real. As an added bonus, it simplifies it, makes it follow the
same code path as regular messages and kills quite some code from mta,
mda and store. There's still some work needed but the most painful part
is behind us now ;)

ok jacekm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.20 2009/07/28 13:53:51 gilles Exp $	*/
a40 31
int file_copy(FILE *, FILE *, struct path *, enum action_type);

int
file_copy_session(struct smtpd *env, FILE *dest, FILE *src)
{
	char *buf, *lbuf;
	size_t len;

	lbuf = NULL;
	while ((buf = fgetln(src, &len))) {
		if (buf[len - 1] == '\n') {
			buf[len - 1] = '\0';
			len--;
		}
		else {
			/* EOF without EOL, copy and add the NUL */
			if ((lbuf = malloc(len + 1)) == NULL)
				err(1, NULL);
			memcpy(lbuf, buf, len);
			lbuf[len] = '\0';
			buf = lbuf;
		}

		if (fprintf(dest, "%s\r\n", buf) != (int)len + 2)
			return 0;
	}
	free(lbuf);

	return 1;
}

d42 1
a42 1
file_copy(FILE *dest, FILE *src, struct path *path, enum action_type type)
d68 1
a68 1
		if (path != NULL && inheaders &&
d76 1
a76 1
		if (type == A_MBOX) {
d86 2
a87 1
		if (fprintf(dest, "%s\n", buf) != (int)len + 1)
d92 1
a92 1
	if (type == A_MBOX) {
d115 1
a115 1
		messagep->recipient.rule.r_action))
@


1.20
log
@add missing bit to correctly spot loops in all cases.
at the moment we only break out of the loop, but do not generate
mailer daemon, this will come soon.

ok pyr@@, tested by me with help from gui at iroqwa dot org
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.19 2009/06/05 21:55:40 jacekm Exp $	*/
d44 29
a130 96
store_write_daemon(struct batch *batchp, struct message *messagep)
{
	u_int32_t i;
	struct message *recipient;
	FILE *mboxfp;
	FILE *messagefp;

	mboxfp = fdopen(batchp->sessionp->mboxfd, "a");
	if (mboxfp == NULL)
		return 0;

	messagefp = fdopen(batchp->sessionp->messagefd, "r");
	if (messagefp == NULL)
		goto bad;

	if (fprintf(mboxfp, "Hi !\n\n"
		"This is the MAILER-DAEMON, please DO NOT REPLY to this e-mail it is\n"
		"just a notification to let you know that an error has occurred.\n\n") == -1)
		goto bad;

	if ((batchp->status & S_BATCH_PERMFAILURE) && fprintf(mboxfp,
		"You ran into a PERMANENT FAILURE, which means that the e-mail can't\n"
		"be delivered to the remote host no matter how much I try.\n\n"
		"Diagnostic:\n"
		"%s\n\n", batchp->errorline) == -1)
		goto bad;

	if ((batchp->status & S_BATCH_TEMPFAILURE) && fprintf(mboxfp,
		"You ran into a TEMPORARY FAILURE, which means that the e-mail can't\n"
		"be delivered right now, but could be deliverable at a later time. I\n"
		"will attempt until it succeeds for the next four days, then let you\n"
		"know if it didn't work out.\n\n"
		"Diagnostic:\n"
		"%s\n\n", batchp->errorline) == -1)
		goto bad;

	if (! (batchp->status & S_BATCH_TEMPFAILURE)) {
		/* First list the temporary failures */
		i = 0;
		TAILQ_FOREACH(recipient, &batchp->messages, entry) {
			if (recipient->status & S_MESSAGE_TEMPFAILURE) {
				if (i == 0) {
					if (fprintf(mboxfp,
						"The following recipients caused a temporary failure:\n") == -1)
						goto bad;
					++i;
				}
				if (fprintf(mboxfp,
					"\t<%s@@%s>:\n%s\n\n", recipient->recipient.user, recipient->recipient.domain,
					recipient->session_errorline) == -1)
					goto bad;
			}
		}

		/* Then list the permanent failures */
		i = 0;
		TAILQ_FOREACH(recipient, &batchp->messages, entry) {
			if (recipient->status & S_MESSAGE_PERMFAILURE) {
				if (i == 0) {
					if (fprintf(mboxfp,
						"The following recipients caused a permanent failure:\n") == -1)
						goto bad;
					++i;
				}
				if (fprintf(mboxfp,
					"\t<%s@@%s>:\n%s\n\n", recipient->recipient.user, recipient->recipient.domain,
					recipient->session_errorline) == -1)
					goto bad;
			}
		}
	}

	if (fprintf(mboxfp, "Below is a copy of the original message:\n\n") == -1)
		goto bad;

	if (! file_copy(mboxfp, messagefp, NULL,
		messagep->recipient.rule.r_action))
		goto bad;

	fflush(mboxfp);
	fsync(fileno(mboxfp));
	fclose(mboxfp);
	fclose(messagefp);
	return 1;

bad:
	if (mboxfp != NULL)
		fclose(mboxfp);

	if (messagefp != NULL)
		fclose(messagefp);

	return 0;
}

int
d165 1
a165 2
store_message(struct batch *batchp, struct message *messagep,
    int (*writer)(struct batch *, struct message *))
d172 1
a172 1
	if (! writer(batchp, messagep)) {
@


1.19
log
@Remove unneeded function that prepends mail with "From " marker.
mail.local(8) does it for us in mbox case, maildir doesn't need
this, and in ext. mda case we delegate it to the external program.

committing on gilles@@'s behalf
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.18 2009/05/27 13:14:18 jacekm Exp $	*/
d29 1
d41 1
a41 1
int file_copy(FILE *, FILE *, enum action_type);
d44 1
a44 1
file_copy(FILE *dest, FILE *src, enum action_type type)
d49 2
a50 1
	
d66 12
d177 2
a178 1
	if (! file_copy(mboxfp, messagefp, messagep->recipient.rule.r_action))
d211 2
a212 1
	if (! file_copy(mboxfp, messagefp, messagep->recipient.rule.r_action))
@


1.18
log
@Insert Received: at receive time instead of delivery time; ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.17 2009/03/15 19:15:25 gilles Exp $	*/
a87 42
store_write_header(struct batch *batchp, struct message *messagep, FILE *fp,
    int finalize)
{
	time_t tm;
	void *p;
	char addrbuf[INET6_ADDRSTRLEN];

	tm = time(NULL);

	if (messagep->session_ss.ss_family == PF_INET) {
		struct sockaddr_in *ssin = (struct sockaddr_in *)&messagep->session_ss;
		p = &ssin->sin_addr.s_addr;
	}
	if (messagep->session_ss.ss_family == PF_INET6) {
		struct sockaddr_in6 *ssin6 = (struct sockaddr_in6 *)&messagep->session_ss;
		p = &ssin6->sin6_addr.s6_addr;
	}

	bzero(addrbuf, sizeof (addrbuf));
	inet_ntop(messagep->session_ss.ss_family, p, addrbuf, sizeof (addrbuf));

	if (messagep->recipient.rule.r_action != A_MBOX) {
		if (batchp->type & T_DAEMON_BATCH) {
			if (fprintf(fp, "From %s@@%s %s\n", "MAILER-DAEMON",
				batchp->env->sc_hostname, time_to_text(tm)) == -1) {
				return 0;
			}
		}
		else {
			if (fprintf(fp, "From %s@@%s %s\n",
				messagep->sender.user, messagep->sender.domain, time_to_text(tm)) == -1)
				return 0;
		}
	}

	if (finalize && fprintf(fp, "\n") == -1)
		return 0;
		
	return 1;
}

int
a102 3
	if (! store_write_header(batchp, messagep, mboxfp, 1))
		goto bad;

a193 3
		goto bad;

	if (! store_write_header(batchp, messagep, mboxfp, 0))
@


1.17
log
@the mda process no longer uses struct batch as its central structure to
deal with deliveries, it now uses struct session just like mta and smtp
processes. we now keep the mbox and message descriptors in the session,
saving space in struct message which is now as small as we can make it.
While at it, plugged a memory leak and did some cosmethic changes

This was the last planned change to our struct message which means that
later changes will no longer require a queue flush before rebuild.
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.16 2009/03/12 11:08:26 pea Exp $	*/
d122 2
a123 9
	
	if (fprintf(fp, "Received: from %s (%s [%s%s])\n"
	    "\tby %s with ESMTP id %s\n"
	    "\tfor <%s@@%s>; %s\n%s",
	    messagep->session_helo, messagep->session_hostname,
	    messagep->session_ss.ss_family == PF_INET ? "" : "IPv6:", addrbuf,
	    batchp->env->sc_hostname, messagep->message_id,
	    messagep->sender.user, messagep->sender.domain, time_to_text(messagep->creation),
	    finalize ? "\n" : "") == -1) {
d125 1
a125 1
	}
@


1.16
log
@Add new function time_to_text to correctly display the date.
Use it to display the date in received from header and when we
store headers.

ok jacekm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.15 2009/03/03 15:47:28 gilles Exp $	*/
d144 1
a144 1
	mboxfp = fdopen(messagep->mboxfd, "a");
d148 1
a148 1
	messagefp = fdopen(messagep->messagefd, "r");
d240 1
a240 1
	mboxfp = fdopen(messagep->mboxfd, "a");
d244 1
a244 1
	messagefp = fdopen(messagep->messagefd, "r");
d276 1
a276 1
	if (fstat(messagep->mboxfd, &sb) == -1)
d281 1
a281 1
			ftruncate(messagep->mboxfd, sb.st_size);
@


1.15
log
@fix mbox locking by having it done by mail.local(8) which in turns uses
lockspool(1). this means our mbox delivery follows a code path that has
become almost identical to external mda deliveries. this is the first
of a serie of diffs actually...

lockspool(1) suggestion by deraadt@@, mail.local(8) idea by jacekm@@, and
fix and testing by me
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.14 2009/02/23 00:51:32 chl Exp $	*/
a91 2
	char timebuf[26];	/* current time	 */
	char ctimebuf[26];	/* creation time */
a95 6
	ctime_r(&tm, timebuf);
	timebuf[strcspn(timebuf, "\n")] = '\0';

	tm = time(&messagep->creation);
	ctime_r(&tm, ctimebuf);
	ctimebuf[strcspn(ctimebuf, "\n")] = '\0';
d112 1
a112 1
				batchp->env->sc_hostname, timebuf) == -1) {
d118 1
a118 1
				messagep->sender.user, messagep->sender.domain, timebuf) == -1)
d129 1
a129 1
	    messagep->sender.user, messagep->sender.domain, ctimebuf,
@


1.14
log
@add missing headers needed by time()

ok jacekm@@ gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.13 2009/01/30 20:11:13 form Exp $	*/
d117 11
a127 4
	if (batchp->type & T_DAEMON_BATCH) {
		if (fprintf(fp, "From %s@@%s %s\n", "MAILER-DAEMON",
			batchp->env->sc_hostname, timebuf) == -1) {
			return 0;
a128 5
	}
	else {
		if (fprintf(fp, "From %s@@%s %s\n",
			messagep->sender.user, messagep->sender.domain, timebuf) == -1)
			return 0;
@


1.13
log
@Do not break header for messages received via smtp.

look ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.12 2009/01/29 15:20:34 gilles Exp $	*/
d35 1
@


1.12
log
@Received header line was incomplete for mail submitted through the enqueuer
as well as for some outgoing messages, this is fixed now
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.11 2009/01/28 12:28:25 jacekm Exp $	*/
d87 2
a88 1
store_write_header(struct batch *batchp, struct message *messagep, FILE *fp)
d129 7
a135 6
		"\tby %s with ESMTP id %s\n"
		"\tfor <%s@@%s>; %s\n\n",
		messagep->session_helo, messagep->session_hostname,
		messagep->session_ss.ss_family == PF_INET ? "" : "IPv6:", addrbuf,
		batchp->env->sc_hostname, messagep->message_id,
		messagep->sender.user, messagep->sender.domain, ctimebuf) == -1) {
d157 1
a157 1
	if (! store_write_header(batchp, messagep, mboxfp))
d253 1
a253 1
	if (! store_write_header(batchp, messagep, mboxfp))
@


1.11
log
@">From" escaping and \n appending is not needed for maildir; ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.10 2009/01/14 22:41:41 gilles Exp $	*/
a115 1

d120 4
a123 8

		if (fprintf(fp, "Received: from %s (%s [%s%s])\n"
			"\tby %s with ESMTP id %s\n"
			"\tfor <%s@@%s>; %s\n\n",
			messagep->session_helo, messagep->session_hostname,
			messagep->session_ss.ss_family == PF_INET ? "" : "IPv6:", addrbuf,
			batchp->env->sc_hostname, messagep->message_id,
			messagep->sender.user, messagep->sender.domain, ctimebuf) == -1) {
a124 2
		}
		return 1;
d126 2
a127 3

	if (fprintf(fp, "From %s@@%s %s\n"
		"Received: from %s (%s [%s%s])\n"
d129 1
a129 2
		"\tfor <%s@@%s>; %s\n",
		messagep->sender.user, messagep->sender.domain, timebuf,
d132 2
a133 2
		batchp->env->sc_hostname, batchp->message_id,
		messagep->recipient.user, messagep->recipient.domain, ctimebuf) == -1) {
@


1.10
log
@- simplify file_copy() and teach it how to write in mboxrd format
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.9 2009/01/01 16:15:47 jacekm Exp $	*/
d39 1
a39 2
int file_copy(FILE *, FILE *);
int file_append(FILE *, FILE *);
d42 1
a42 1
file_copy(FILE *dest, FILE *src)
d63 8
a70 6
		escape = buf;
		while (*escape != '\0' && *escape == '>')
			++escape;
		if (strncmp("From ", escape, 5) == 0) {
			if (fprintf(dest, ">") != 1)
				return 0;
a76 2
	return 1;
}
d78 4
a81 12
int
file_append(FILE *dest, FILE *src)
{
	struct stat sb;
	size_t srcsz;

	if (fstat(fileno(src), &sb) == -1)
		return 0;
	srcsz = sb.st_size;

	if (! file_copy(dest, src))
		return 0;
d227 1
a227 4
	if (! file_append(mboxfp, messagefp))
		goto bad;

	if (fprintf(mboxfp, "\n") == -1)
d263 1
a263 4
	if (! file_append(mboxfp, messagefp))
		goto bad;

	if (fprintf(mboxfp, "\n") == -1)
a264 1

@


1.9
log
@remove unnecessary includes; ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.8 2008/12/06 14:30:51 jacekm Exp $	*/
d29 1
d39 1
a39 1
int file_copy(FILE *, FILE *, size_t);
d43 1
a43 1
file_copy(FILE *dest, FILE *src, size_t len)
d45 26
a70 2
	char buffer[8192];
	size_t rlen;
d72 1
a72 8
	for (; len;) {

		rlen = len < sizeof(buffer) ? len : sizeof(buffer);

		if (fread(buffer, 1, rlen, src) != rlen)
			return 0;

		if (fwrite(buffer, 1, rlen, dest) != rlen)
a73 2

		len -= rlen;
d75 1
a75 1

d89 1
a89 1
	if (! file_copy(dest, src, srcsz))
@


1.8
log
@Don't include <err.h> where log.c API must be used.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.7 2008/12/06 14:24:15 gilles Exp $	*/
a23 1
#include <sys/ioctl.h>
a28 1
#include <dirent.h>
a30 4
#include <fcntl.h>
#include <paths.h>
#include <pwd.h>
#include <signal.h>
a33 3
#include <sysexits.h>
#include <time.h>
#include <util.h>
@


1.7
log
@- fix spelling and grammar, From Nicholas Marriott <nicm__@@ntlworld.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.6 2008/11/17 21:56:18 chl Exp $	*/
a30 1
#include <err.h>
@


1.6
log
@add missing header needed by time(), ctime_r() and tzset().

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.5 2008/11/11 20:59:11 gilles Exp $	*/
d172 1
a172 1
		"just a notification to let you know that an error has occured.\n\n") == -1)
d177 1
a177 1
		"be delivered to the remote host no matter how much I'll try.\n\n"
@


1.5
log
@- now that we fdopen() message file descriptor, do not forget to fclose()
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.4 2008/11/10 16:33:07 gilles Exp $	*/
d42 1
@


1.4
log
@- remove last occurences of the atomic api in store.c, smtpd no longer uses
	atomic api when dealing with files but uses stdio instead
@
text
@d1 1
a1 1
/*	$OpenBSD: store.c,v 1.3 2008/11/05 12:14:45 sobrado Exp $	*/
d238 1
d278 1
a306 1

@


1.3
log
@add a few missing id tags; there are a bunch of files, and developers
will probably miss this change when working on more important matters,
so it is probably better to sort them now.  there is a risk of losing
the tags if a change needs to be reverted too.

written with excellent advice from jmc@@

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 2
a48 2
int fd_copy(int, int, size_t);
int fd_append(int, int);
d51 1
a51 1
fd_copy(int dest, int src, size_t len)
d59 2
a60 1
		if (atomic_read(src, buffer, rlen) == -1)
d63 1
a63 1
		if (atomic_write(dest, buffer, rlen) == -1)
d73 1
a73 1
fd_append(int dest, int src)
d78 1
a78 1
	if (fstat(src, &sb) == -1)
d82 1
a82 1
	if (! fd_copy(dest, src, srcsz))
d89 1
a89 1
store_write_header(struct batch *batchp, struct message *messagep)
d118 3
a120 2
		if (atomic_printfd(messagep->mboxfd, "From %s@@%s %s\n",
			"MAILER-DAEMON", batchp->env->sc_hostname, timebuf) == -1)
d122 3
a124 2
		if (atomic_printfd(messagep->mboxfd,
			"Received: from %s (%s [%s%s])\n"
d136 1
a136 2
	if (atomic_printfd(messagep->mboxfd,
		"From %s@@%s %s\n"
a146 1

d155 2
d158 2
a159 1
	if (! store_write_header(batchp, messagep))
d162 8
a169 2
	if (atomic_printfd(messagep->mboxfd,
		"Hi !\n\n"
d171 2
a172 3
		"just a notification to let you know that an error has occured.\n\n") == -1) {
		return 0;
	}
d174 1
a174 1
	if ((batchp->status & S_BATCH_PERMFAILURE) && atomic_printfd(messagep->mboxfd,
d178 2
a179 3
		"%s\n\n", batchp->errorline) == -1) {
		return 0;
	}
d181 1
a181 1
	if ((batchp->status & S_BATCH_TEMPFAILURE) && atomic_printfd(messagep->mboxfd,
d187 2
a188 3
		"%s\n\n", batchp->errorline) == -1) {
		return 0;
	}
d196 1
a196 1
					if (atomic_printfd(messagep->mboxfd,
d198 1
a198 1
						return 0;
d201 1
a201 1
				if (atomic_printfd(messagep->mboxfd,
d203 2
a204 3
					recipient->session_errorline) == -1) {
					return 0;
				}
d213 1
a213 1
					if (atomic_printfd(messagep->mboxfd,
d215 1
a215 1
						return 0;
d218 1
a218 1
				if (atomic_printfd(messagep->mboxfd,
d220 2
a221 3
					recipient->session_errorline) == -1) {
					return 0;
				}
d226 2
a227 3
	if (atomic_printfd(messagep->mboxfd,
		"Below is a copy of the original message:\n\n") == -1)
		return 0;
d229 2
a230 2
	if (! fd_append(messagep->mboxfd, messagep->messagefd))
		return 0;
d232 2
a233 2
	if (atomic_printfd(messagep->mboxfd, "\n") == -1)
		return 0;
d235 3
d239 9
d253 5
a257 1
	if (! store_write_header(batchp, messagep))
d260 12
a271 2
	if (! fd_append(messagep->mboxfd, messagep->messagefd))
		return 0;
a272 2
	if (atomic_printfd(messagep->mboxfd, "\n") == -1)
		return 0;
d274 3
d278 9
@


1.2
log
@correct order of includes
@
text
@d1 2
@


1.1
log
@smtpd is a smtp server implementation for OpenBSD. It is a work in progress
which still lacks many features. bringing it in tree will help working on it
more easily.

"at this stage it should go in" henning@@, "move ahead" deraadt@@
@
text
@d25 1
a26 1
#include <netinet/in.h>
@

