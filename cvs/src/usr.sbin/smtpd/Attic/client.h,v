head	1.15;
access;
symbols
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11;
locks; strict;
comment	@ * @;


1.15
date	2012.01.29.11.37.32;	author eric;	state dead;
branches;
next	1.14;

1.14
date	2011.03.26.10.59.59;	author gilles;	state Exp;
branches;
next	1.13;

1.13
date	2010.11.28.13.56.43;	author gilles;	state Exp;
branches;
next	1.12;

1.12
date	2010.05.26.13.56.08;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2010.01.02.16.41.19;	author jacekm;	state Exp;
branches;
next	1.10;

1.10
date	2010.01.02.13.42.42;	author jacekm;	state Exp;
branches;
next	1.9;

1.9
date	2010.01.02.11.06.37;	author jacekm;	state Exp;
branches;
next	1.8;

1.8
date	2009.12.23.17.16.03;	author jacekm;	state Exp;
branches;
next	1.7;

1.7
date	2009.12.15.11.45.51;	author jacekm;	state Exp;
branches;
next	1.6;

1.6
date	2009.12.12.14.03.59;	author jacekm;	state Exp;
branches;
next	1.5;

1.5
date	2009.12.12.10.33.11;	author jacekm;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.22.12.24.06;	author jacekm;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.15.16.50.06;	author jacekm;	state Exp;
branches;
next	1.2;

1.2
date	2009.08.27.11.42.50;	author jacekm;	state Exp;
branches;
next	1.1;

1.1
date	2009.08.27.11.41.26;	author jacekm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Rewrite io code in smtp and mta using the iobuf/ioev interface to have
a better separation between io and protocol logic.  As a side-effect,
it fixes a couple of long-standing issues in the io path, and
hopefully add fresh ones instead.  Kill client.c in the process.

ok gilles@@
@
text
@/*	$OpenBSD: client.h,v 1.14 2011/03/26 10:59:59 gilles Exp $	*/

/*
 * Copyright (c) 2009 Jacek Masiulaniec <jacekm@@dobremiasto.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef nitems
#define nitems(_a) (sizeof((_a)) / sizeof((_a)[0]))
#endif

struct smtp_client;

/* return codes for io routines */
#define CLIENT_DONE		-1	/* finished */
#define CLIENT_WANT_WRITE	-2	/* want read + write */
#define CLIENT_STOP_WRITE	-3	/* want read */
#define CLIENT_RCPT_FAIL	-4	/* recipient refused */

/* client commands */
#define CLIENT_BANNER		0x1
#define CLIENT_EHLO		0x2
#define CLIENT_HELO		0x3
#define CLIENT_STARTTLS		0x4
#define CLIENT_AUTH		0x5
#define CLIENT_MAILFROM		0x6
#define CLIENT_RCPTTO		0x7
#define CLIENT_DATA		0x8
#define CLIENT_DOT		0x9
#define CLIENT_QUIT		0xa

struct client_cmd {
	TAILQ_ENTRY(client_cmd)	 entry;
	char			*action;
	int			 type;
	void			*data;
};
TAILQ_HEAD(cmdqueue, client_cmd);

/* smtp extensions */
#define CLIENT_EXT_STARTTLS	0
#define CLIENT_EXT_AUTH		1
#define CLIENT_EXT_PIPELINING	2

struct client_ext {
	short			 have;
	short			 want;
	short			 must;
	short			 done;
	short			 fail;
	char			*name;
};

struct client_auth {
	char			*plain;
	char			*cert;
	size_t			 certsz;
	char			*key;
	size_t			 keysz;
};

/* session flags */
#define CLIENT_FLAG_FIRSTTIME	0x1
#define CLIENT_FLAG_HANDSHAKING	0x2
#define CLIENT_FLAG_RCPTOKAY	0x4
#define CLIENT_FLAG_DYING	0x8

struct smtp_client {
	size_t			 cmdi;		/* iterator */
	size_t			 cmdw;		/* window */
	struct cmdqueue		 cmdsendq;	/* cmds to send */
	struct cmdqueue		 cmdrecvq;	/* replies waited for */

	int			 flags;
	void			*rcptfail;
	char			*ehlo;
	char			 reply[1024];
	struct ibuf_read	 r;
	struct msgbuf		 w;
	void			*ssl;
	int			 sndlowat;
	struct timeval		 timeout;
	FILE			*verbose;

	struct ibuf		*content;	/* current chunk of content */
	struct ibuf		*head;		/* headers + part of body */
	FILE			*body;		/* rest of body */

	struct client_ext	 exts[3];
	struct client_auth	 auth;

	char			 status[1024];
};

struct smtp_client	*client_init(int, FILE *, char *, int);
void			 client_ssl_smtps(struct smtp_client *);
void			 client_ssl_optional(struct smtp_client *);
void			 client_certificate(struct smtp_client *, char *,
			     size_t, char *, size_t);
void			 client_auth(struct smtp_client *, char *);
void			 client_sender(struct smtp_client *, char *, ...);
void			 client_rcpt(struct smtp_client *, void *, char *, ...);
void			 client_printf(struct smtp_client *, char *, ...);
int			 client_talk(struct smtp_client *, int);
void			 client_close(struct smtp_client *);


struct client_cmd *cmd_new(int, char *, ...);
void		 cmd_free(struct client_cmd *);
int		 client_read(struct smtp_client *);
void		 client_get_reply(struct smtp_client *, struct client_cmd *,
    int *);
int		 client_write(struct smtp_client *);
int		 client_use_extensions(struct smtp_client *);
void		 client_status(struct smtp_client *, char *, ...);
int		 client_getln(struct smtp_client *, int);
void		 client_putln(struct smtp_client *, char *, ...);
struct ibuf	*client_content_read(FILE *, size_t);
int		 client_poll(struct smtp_client *);
void		 client_quit(struct smtp_client *);

int		 client_socket_read(struct smtp_client *);
int		 client_socket_write(struct smtp_client *);

char		*buf_getln(struct ibuf_read *);
int		 buf_read(int, struct ibuf_read *);
@


1.14
log
@have the client API receive a stdio stream rather than a fd to the message
fd. this shifts responsibility for the fclose to the caller, prevents a
memory leak and makes everyone happy.

diff by Jared Yanovich, thanks !
@
text
@d1 1
a1 1
/*	$OpenBSD: client.h,v 1.13 2010/11/28 13:56:43 gilles Exp $	*/
@


1.13
log
@a bit of .h cleanups, no functionnal change
@
text
@d1 1
a1 1
/*	$OpenBSD: client.h,v 1.12 2010/05/26 13:56:08 nicm Exp $	*/
d106 1
a106 1
struct smtp_client	*client_init(int, int, char *, int);
@


1.12
log
@Rename some imsg bits to make namespace collisions less likely buf to
ibuf, buf_read to ibuf_read, READ_BUF_SIZE to IBUF_READ_SIZE.

ok henning gilles claudio jacekm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: client.h,v 1.11 2010/01/02 16:41:19 jacekm Exp $	*/
d117 21
@


1.11
log
@Replace 3 struct smtp_client members (ssl_handshake, rcptokay, dying) with a
bitmap called "flags".
@
text
@d1 1
a1 1
/*	$OpenBSD: client.h,v 1.10 2010/01/02 13:42:42 jacekm Exp $	*/
d89 1
a89 1
	struct buf_read		 r;
d96 2
a97 2
	struct buf		*content;	/* current chunk of content */
	struct buf		*head;		/* headers + part of body */
@


1.10
log
@Factor out parts of client_read() into client_socket_read() and
client_get_reply(), downsizing it from 170+ to just over 30 lines.
The gotos are now gone, too.
@
text
@d1 1
a1 1
/*	$OpenBSD: client.h,v 1.9 2010/01/02 11:06:37 jacekm Exp $	*/
d73 6
d85 1
a86 2
	size_t			 rcptokay;

a90 1
	short			 ssl_handshake;
a103 1
	short			 dying;
@


1.9
log
@Simplify code by removing struct smtp_client member, int iomode, which was
used for keeping track of the current polling mode.  Introduce new function
client_poll() that determines what mode of polling is required at the time of
call.
@
text
@d1 1
a1 1
/*	$OpenBSD: client.h,v 1.8 2009/12/23 17:16:03 jacekm Exp $	*/
d26 4
a29 4
#define CLIENT_DONE		 0	/* finished */
#define CLIENT_WANT_WRITE	-1	/* want read + write */
#define CLIENT_STOP_WRITE	-2	/* want read */
#define CLIENT_RCPT_FAIL	-3	/* recipient refused */
@


1.8
log
@Implementation of RFC 2920 PIPELINING extension, client side only for now.

This restructures the client_* API internals significantly.  The code becomes
pipelining in nature.  All SMTP commands are put on the output queue and
dequeued as quickly as possible.  Once dequeued, they're moved to the receive
queue so that replies can be matched with previous commands.

Dequeuing commands from the output queue halts when the count of commands
currently in-pipeline (``cmdi'') is equal to the command send window (``cmdw'').
There are three cmdw values useful in practice:

0               clear pipeline, ie. inhibit all future sends
1               disable pipelining, ie. use old ``one-request-one-reply`` mode
SIZE_T_MAX      enable pipelining, ie. dequeue as many commands as possible

At the beginning of session cmdw is 1.  When it is found that peer supports
PIPELINING, it grows to SIZE_T_MAX.  After dequeing DATA it is again 1.  After
sending QUIT it is 0.

Each command dequeued from the output queue becomes a buf in a msgbuf.  The act
of combining multiple commands into a single send operation did not need to be
implemented: buf_write() already combines bufs using iovec and sends them at
once using sendmsg(2).

Tested by todd@@ and oga@@

"looks good" to gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: client.h,v 1.7 2009/12/15 11:45:51 jacekm Exp $	*/
a87 1
	int			 iomode;
@


1.7
log
@Simplify SSL code client-side, no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: client.h,v 1.6 2009/12/12 14:03:59 jacekm Exp $	*/
d26 3
a28 3
#define CLIENT_DONE		 0	/* finished ok */
#define CLIENT_WANT_READ	-1	/* need more data */
#define CLIENT_WANT_WRITE	-2	/* have to send sth */
d31 19
a49 13
/* client states */
#define CLIENT_SSL_INIT		0x1
#define CLIENT_SSL_CONNECT	0x2
#define CLIENT_INIT		0x3
#define CLIENT_EHLO		0x4
#define CLIENT_HELO		0x5
#define CLIENT_STARTTLS		0x6
#define CLIENT_AUTH		0x7
#define CLIENT_MAILFROM		0x8
#define CLIENT_RCPTTO		0x9
#define CLIENT_DATA		0xa
#define CLIENT_DATA_BODY	0xb
#define CLIENT_QUIT		0xc
d54 1
a54 1
#define CLIENT_EXT_MAX		2
d56 7
a62 4
struct rcpt {
	TAILQ_ENTRY(rcpt)	 entry;
	char			*mbox;
	void			*p;
d73 8
a80 9
struct client_ext {
	short			 have;
	short			 want;
	short			 must;
	short			 done;
	short			 fail;
	char			*name;
	int			 state;
};
a81 2
struct smtp_client {
	int			 state;
d83 1
a83 5
	char			*sender;
	TAILQ_HEAD(rlist,rcpt)	 recipients;
	struct rcpt		*rcpt;
	struct rcpt		*rcptfail;
	size_t			 rcptokay;
d86 1
a86 4
	struct buf		*head;
	FILE			*body;
	struct client_ext	 exts[CLIENT_EXT_MAX];
	int			(*handler)(struct smtp_client *);
d88 10
d99 1
a99 2
	struct timeval		 timeout;
	char			 reply[1024];
d101 1
a101 1
	FILE			*verbose;
d113 1
a113 1
int			 client_talk(struct smtp_client *);
@


1.6
log
@When acting as a client do content reads from the disk progressively
as the remote accepts more data instead of doing one big read into
the memory in the beginning of session.
@
text
@d1 1
a1 1
/*	$OpenBSD: client.h,v 1.5 2009/12/12 10:33:11 jacekm Exp $	*/
d88 1
a88 1
	void			*ssl_state;
@


1.5
log
@Simplify client_* api, mainly by making fatal conditions result in immediate
fatals instead of passing the error up (kills ~300 lines).

Implement sending of the QUIT command which replaces crude close(2).

tested by gilles@@, todd@@
@
text
@d1 1
a1 1
/*	$OpenBSD: client.h,v 1.4 2009/09/22 12:24:06 jacekm Exp $	*/
d84 2
a85 1
	struct buf		*data;
d96 1
a96 1
struct smtp_client	*client_init(int, char *, int);
d104 1
a104 2
void			 client_data_fd(struct smtp_client *, int);
void			 client_data_printf(struct smtp_client *, char *, ...);
@


1.4
log
@When at MAIL FROM stage, handle the case when STARTTLS is required but not
available.  Also, make the client_next_state() calls across the code more
idiomatic.
@
text
@d1 1
a1 1
/*	$OpenBSD: client.h,v 1.3 2009/09/15 16:50:06 jacekm Exp $	*/
d27 3
a29 4
#define CLIENT_ERROR		-1	/* generic error */
#define CLIENT_WANT_READ	-2	/* need more data */
#define CLIENT_WANT_WRITE	-3	/* have to send sth */
#define CLIENT_RCPT_FAIL	-4	/* recipient refused */
d43 1
d53 1
a53 1
	void			*udata;
d79 3
a81 1
	struct rcpt		*rcptsent;
d86 1
d91 1
a91 1
	char			 ebuf[1024];
d95 4
a98 6
struct smtp_client	*client_init(int, char *);
struct timeval		*client_timeout(struct smtp_client *);
void			 client_verbose(struct smtp_client *, FILE *);
int			 client_ssl_smtps(struct smtp_client *);
int			 client_ssl_optional(struct smtp_client *);
int			 client_certificate(struct smtp_client *, char *,
d100 6
a105 9
int			 client_auth(struct smtp_client *, char *);
int			 client_sender(struct smtp_client *, char *, ...);
int			 client_rcpt(struct smtp_client *, char *, ...);
void			 client_udata_set(struct smtp_client *, void *);
void			*client_udata_get(struct smtp_client *);
int			 client_data_fd(struct smtp_client *, int);
int			 client_data_printf(struct smtp_client *, char *, ...);
int			 client_read(struct smtp_client *);
int			 client_write(struct smtp_client *);
a106 2
char			*client_reply(struct smtp_client *);
char			*client_strerror(struct smtp_client *);
@


1.3
log
@Extend SMTP client_* API to support SSL+AUTH, and use it in the mta
process to relay mails.  ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: client.h,v 1.2 2009/08/27 11:42:50 jacekm Exp $	*/
d70 1
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d19 4
d26 5
a30 4
#define	CLIENT_DONE		 0	/* finished ok */
#define	CLIENT_ERROR		-1	/* generic error */
#define	CLIENT_WANT_READ	-2	/* need more data */
#define	CLIENT_WANT_WRITE	-3	/* have to send sth */
d33 16
a48 7
#define CLIENT_INIT		0x1
#define CLIENT_EHLO		0x2
#define CLIENT_HELO		0x3
#define CLIENT_MAILFROM		0x4
#define CLIENT_RCPTTO		0x5
#define CLIENT_DATA		0x6
#define CLIENT_DATA_BODY	0x7
d53 18
d77 2
a78 1
	TAILQ_HEAD(,rcpt)	 recipients;
d82 6
a88 1
	char			 errbuf[1024];
d92 7
a98 1
void			 client_verbose(struct smtp_client *, int);
d101 2
d105 2
a106 2
int			 client_read(struct smtp_client *, char **);
int			 client_write(struct smtp_client *, char **);
d108 2
@


1.1
log
@Implement client side of the SMTP protocol in a library-like module.
Make bounce code and /usr/sbin/sendmail interface use this new API.
The mta process continues to use its own implementation, but
eventually will be switched to use this shared module.

Buffer routines are taken from buffer.c rather than from evbuffer.
This is one step forward to using a single buffer API across the
program.

"it looks sexy" gilles@@
@
text
@d1 2
@

