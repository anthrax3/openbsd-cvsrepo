head	1.8;
access;
symbols
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2011.12.13.22.09.53;	author eric;	state dead;
branches;
next	1.7;

1.7
date	2011.08.30.11.19.51;	author chl;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.21.18.43.08;	author gilles;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.17.13.36.07;	author gilles;	state Exp;
branches;
next	1.4;

1.4
date	2010.11.28.14.35.58;	author gilles;	state Exp;
branches;
next	1.3;

1.3
date	2010.11.28.13.56.43;	author gilles;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.27.10.17.53;	author gilles;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.21.21.04.29;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.8
log
@merge map_backend.c into map.c

ok gilles@@
@
text
@/*	$OpenBSD: map_backend.c,v 1.7 2011/08/30 11:19:51 chl Exp $	*/

/*
 * Copyright (c) 2010 Gilles Chehade <gilles@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/param.h>
#include <sys/socket.h>

#include <ctype.h>
#include <err.h>
#include <event.h>
#include <fcntl.h>
#include <imsg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "smtpd.h"
#include "log.h"

struct map_backend *map_backend_lookup(enum map_src);

extern struct map_backend map_backend_db;
extern struct map_backend map_backend_stdio;

struct map_backend *
map_backend_lookup(enum map_src source)
{
	switch (source) {
	case S_DB:
		return &map_backend_db;

	case S_PLAIN:
		return &map_backend_stdio;

	default:
		fatalx("invalid map type");
	}

	return NULL;
}
@


1.7
log
@remove unused header

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map_backend.c,v 1.6 2011/05/21 18:43:08 gilles Exp $	*/
@


1.6
log
@until now the map_backend API was not really useful for backends that are
not key/val stores. refactored a bit so that smtpd can really take
advantage of backends. preliminary work for ldap support ;-)

no functionnal change
@
text
@d1 1
a1 1
/*	$OpenBSD: map_backend.c,v 1.5 2011/04/17 13:36:07 gilles Exp $	*/
a24 1
#include <db.h>
@


1.5
log
@cleanups, cosmethic changes, functions that should be static are now static
no functionnal change
@
text
@d1 1
a1 1
/*	$OpenBSD: map_backend.c,v 1.4 2010/11/28 14:35:58 gilles Exp $	*/
d40 2
a41 20
/* db(3) backend */
static void *map_db_open(char *);
static void map_db_close(void *);
static char *map_db_get(void *, char *, size_t *);
static int map_db_put(void *, char *, char *);

/* stdio(3) backend */
static void *map_stdio_open(char *);
static void map_stdio_close(void *);
static char *map_stdio_get(void *, char *, size_t *);
static int map_stdio_put(void *, char *, char *);


struct map_backend map_backends[] = {
	{ S_DB,
	  map_db_open, map_db_close, map_db_get, map_db_put },
	{ S_PLAIN,
	  map_stdio_open, map_stdio_close, map_stdio_get, map_stdio_put },
};

d46 3
a48 1
	u_int8_t i;
d50 2
a51 3
	for (i = 0; i < nitems(map_backends); ++i)
		if (map_backends[i].source == source)
			break;
d53 1
a53 1
	if (i == nitems(map_backends))
a54 109

	return &map_backends[i];
}


/* db(3) backend */
static void *
map_db_open(char *src)
{
	return dbopen(src, O_RDONLY, 0600, DB_HASH, NULL);
}

static void
map_db_close(void *hdl)
{
	DB *db = hdl;

	db->close(db);
}

static char *
map_db_get(void *hdl, char *key, size_t *len)
{
	int ret;
	DBT dbk;
	DBT dbv;
	DB *db = hdl;
	char *result = NULL;

	dbk.data = key;
	dbk.size = strlen(dbk.data) + 1;

	if ((ret = db->get(db, &dbk, &dbv, 0)) != 0)
		return NULL;

	result = calloc(dbv.size, 1);
	if (result == NULL)
		fatal("calloc");
	(void)strlcpy(result, dbv.data, dbv.size);

	*len = dbv.size;

	return result;
}

static int
map_db_put(void *hdl, char *key, char *val)
{
	return 0;
}


/* stdio(3) backend */
static void *
map_stdio_open(char *src)
{
	return fopen(src, "r");
}

static void
map_stdio_close(void *hdl)
{
	FILE *fp = hdl;

	fclose(fp);
}

static char *
map_stdio_get(void *hdl, char *key, size_t *len)
{
	char *buf, *lbuf;
	size_t flen;
	char *keyp;
	char *valp;
	FILE *fp = hdl;
	char *result = NULL;

	lbuf = NULL;
	while ((buf = fgetln(fp, &flen))) {
		if (buf[flen - 1] == '\n')
			buf[flen - 1] = '\0';
		else {
			if ((lbuf = malloc(flen + 1)) == NULL)
				err(1, NULL);
			memcpy(lbuf, buf, flen);
			lbuf[flen] = '\0';
			buf = lbuf;
		}

		keyp = buf;
		while (isspace((int)*keyp))
			++keyp;
		if (*keyp == '\0' || *keyp == '#')
			continue;

		valp = keyp;
		strsep(&valp, " \t:");
		if (valp == NULL || valp == keyp)
			continue;

		if (strcmp(keyp, key) != 0)
			continue;

		result = strdup(valp);
		if (result == NULL)
			err(1, NULL);
		*len = strlen(result);

		break;
a55 4
	free(lbuf);

	return result;
}
d57 1
a57 4
static int
map_stdio_put(void *hdl, char *key, char *val)
{
	return 0;
@


1.4
log
@remove all unused headers
@
text
@d1 1
a1 1
/*	$OpenBSD: map_backend.c,v 1.3 2010/11/28 13:56:43 gilles Exp $	*/
d41 4
a44 4
void *map_db_open(char *);
void map_db_close(void *);
char *map_db_get(void *, char *, size_t *);
int map_db_put(void *, char *, char *);
d47 4
a50 4
void *map_stdio_open(char *);
void map_stdio_close(void *);
char *map_stdio_get(void *, char *, size_t *);
int map_stdio_put(void *, char *, char *);
d78 1
a78 1
void *
d84 1
a84 1
void
d92 1
a92 1
char *
d117 1
a117 1
int
d125 1
a125 1
void *
d131 1
a131 1
void
d139 1
a139 1
char *
d187 1
a187 1
int
@


1.3
log
@a bit of .h cleanups, no functionnal change
@
text
@d1 1
a1 1
/*	$OpenBSD: map_backend.c,v 1.2 2010/04/27 10:17:53 gilles Exp $	*/
d25 1
a26 1
#include <db.h>
a27 1
#include <errno.h>
@


1.2
log
@this commit enables "plain" as a backend for maps (that means aliases,
virtual AND secrets), adds a description in smtpd.conf.5 and removes a
mention to special map "aliases" which was removed a while ago.

to use plain maps:  map "myaliases" { source plain "/etc/mail/aliases" }

code diff was okayd a while ago by jacekm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map_backend.c,v 1.1 2010/04/21 21:04:29 gilles Exp $	*/
d31 1
d37 1
a37 1

@


1.1
log
@map.c is growing big, split it into three different files:
map.c contains the map API calls as usable by smtpd processes,
map_backend.c contains backend implementations and map_parser.c contains
parser implementations used internally by the map API
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d56 1
a56 1
	{ S_FILE,
@

