head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2012.08.26.13.38.43;	author gilles;	state dead;
branches;
next	1.4;

1.4
date	2012.08.26.11.52.48;	author gilles;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.26.11.21.28;	author gilles;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.26.10.17.13;	author chl;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.25.23.35.09;	author chl;	state Exp;
branches;
next	;


desc
@@


1.5
log
@- use the same compression algorithm, gzip, for message file and envelopes
- rename compress_zlib.c to compress_gzip.c

with this commit it is possible to inspect a compressed queue with gzcat :)
@
text
@/*	$OpenBSD: compress_zlib.c,v 1.4 2012/08/26 11:52:48 gilles Exp $	*/

/*
 * Copyright (c) 2012 Charles Longeau <chl@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/param.h>
#include <sys/socket.h>
#include <sys/stat.h>

#include <ctype.h>
#include <err.h>
#include <fcntl.h>
#include <imsg.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <zlib.h>

#include "smtpd.h"
#include "log.h"

#define	ZLIB_BUFFER_SIZE	8192

static int compress_file_zlib(int, int);
static int uncompress_file_zlib(int, int);
static size_t compress_buffer_zlib(const char *, size_t, char *, size_t);
static size_t uncompress_buffer_zlib(const char *, size_t, char *, size_t);

struct compress_backend	compress_zlib = {
	compress_file_zlib,
	uncompress_file_zlib,
	compress_buffer_zlib,
	uncompress_buffer_zlib
};

static int
compress_file_zlib(int fdin, int fdout)
{
	gzFile	gzfd;
	char	buf[ZLIB_BUFFER_SIZE];
	int	r, w;
	int	ret = 0;

	if (fdin == -1 || fdout == -1)
		return (0);

	gzfd = gzdopen(fdout, "wb");
	if (gzfd == NULL)
		return (0);

	while ((r = read(fdin, buf, sizeof(buf))) > 0) {
		w = gzwrite(gzfd, buf, r);
		if (w != r)
			goto end;
	}
	if (r == -1)
		goto end;

	ret = 1;

end:
	gzclose(gzfd);
	return (ret);
}

static int
uncompress_file_zlib(int fdin, int fdout)
{
	gzFile	gzfd;
	char	buf[ZLIB_BUFFER_SIZE];
	int	r, w;
	int	ret = 0;

	if (fdin == -1 || fdout == -1)
		return (0);
	
	gzfd = gzdopen(fdin, "r");
	if (gzfd == NULL)
		return (0);

	while ((r = gzread(gzfd, buf, sizeof(buf))) > 0) {
		w = write(fdout, buf, r);
		if (w != r)
			goto end;
	}
	if (r == -1)
		goto end;

	ret = 1;

end:
	gzclose(gzfd);
	return (ret);
}

static size_t
compress_buffer_zlib(const char *inbuf, size_t inbuflen, char *outbuf, size_t outbuflen)
{
	uLong	compress_bound;
	int	ret;
	
	compress_bound = compressBound((uLongf) inbuflen);

	if (compress_bound > outbuflen)
		return (0);

	ret = compress((Bytef *) outbuf, (uLongf *) &outbuflen,
	    (const Bytef *) inbuf, (uLong) inbuflen);

	return (ret == Z_OK ? outbuflen : 0);
}

static size_t
uncompress_buffer_zlib(const char *inbuf, size_t inbuflen, char *outbuf, size_t outbuflen)
{
	int	ret;

	ret = uncompress((Bytef *) outbuf, (uLongf *) &outbuflen,
	    (const Bytef *) inbuf, (uLong) inbuflen);

	return (ret == Z_OK ? outbuflen : 0);
}
@


1.4
log
@- define ZLIB_BUFFER_SIZE instead of hardcoding 8192
- check gzdopen() failure
- call gzclose() whenever a failure occurs after gzdopen()
- simplify slightly some checks in compress/uncompress
- create PATH_TEMPORARY in /var/spool/smtpd, chmod 700, owned by _smtpd
- compress_zlib should use PATH_TEMPORARY instread of /tmp as we're
	chrooted and this will otherwise lead to a fatal()

ok chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: compress_zlib.c,v 1.3 2012/08/26 11:21:28 gilles Exp $	*/
@


1.3
log
@- remove unused variable
- comment variables unused at this time
@
text
@d1 1
a1 1
/*	$OpenBSD: compress_zlib.c,v 1.2 2012/08/26 10:17:13 chl Exp $	*/
d41 2
a54 1

d59 1
a59 1
	char	buf[8192];
d61 1
d67 2
d70 1
a70 4
	while ((r = read(fdin, buf, sizeof(buf)))) {
		if (r == -1)
			return (0);

d72 2
a73 2
		if (w == 0 || w != r)
			return (0);
d75 6
d82 1
a82 2

	return (1);
d88 4
a91 3
	gzFile	 gzfd;
	int	 r, w;
	char	 buf[8192];
d95 1
a95 1

d97 2
a98 1
	while ((r = gzread(gzfd, buf, sizeof(buf)))) {
d100 7
a106 2
		if (r == -1)
			return (0);
d108 1
a108 1
		w = write(fdout, buf, r);
d110 1
a110 3
		if (w == -1 || w != r)
			return (0);
	}
d112 1
a112 2

	return (1);
d120 1
a120 1

d127 1
a127 1
		 (const Bytef *) inbuf, (uLong) inbuflen);
@


1.2
log
@Add missing RCS Id.

Reminded by jasper@@

ok gilles@@ eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a82 1
	int	 outfd;
@


1.1
log
@Add compress_backend, allowing compression of messages and envelopes in the queue.
To use it, just add "queue compress" in smtpd.conf. For now, only zlib is used.

lots of feedback from eric@@ and gilles@@

ok eric@@ gilles@@
@
text
@d1 2
@

