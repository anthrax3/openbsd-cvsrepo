head	1.16;
access;
symbols
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.16
date	2015.11.30.19.54.25;	author jung;	state dead;
branches;
next	1.15;
commitid	LaSdnghRSVqZPgAk;

1.15
date	2015.10.11.12.50.00;	author sunil;	state Exp;
branches;
next	1.14;
commitid	dmRjMYloxUoaVmb9;

1.14
date	2015.10.06.14.02.25;	author stsp;	state Exp;
branches;
next	1.13;
commitid	2xn6oJjoDjUQvc6z;

1.13
date	2015.01.20.17.37.54;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	ZBTFreARDSMmzOIV;

1.12
date	2014.07.09.08.38.08;	author eric;	state Exp;
branches;
next	1.11;
commitid	mTLIoLTSrxqejmRp;

1.11
date	2014.07.08.13.49.09;	author eric;	state Exp;
branches;
next	1.10;
commitid	pEybL9fsrDOC6PJj;

1.10
date	2014.06.10.16.43.46;	author gilles;	state Exp;
branches;
next	1.9;
commitid	UFLkkqlmWhAvarfC;

1.9
date	2014.03.08.15.57.31;	author eric;	state Exp;
branches;
next	1.8;

1.8
date	2013.12.26.17.25.32;	author eric;	state Exp;
branches;
next	1.7;

1.7
date	2013.11.28.10.43.37;	author eric;	state Exp;
branches;
next	1.6;

1.6
date	2013.07.22.13.14.49;	author eric;	state Exp;
branches;
next	1.5;

1.5
date	2013.07.20.09.06.46;	author eric;	state Exp;
branches;
next	1.4;

1.4
date	2013.05.24.17.03.14;	author eric;	state Exp;
branches;
next	1.3;

1.3
date	2013.03.08.19.11.52;	author chl;	state Exp;
branches;
next	1.2;

1.2
date	2013.01.31.18.34.43;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.26.09.37.24;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.16
log
@remove table-passwd, table-sqlite, and table-ldap
about 4k lines seldom used code

people who rely on this install mail/opensmtpd-extras

direction discussed (and agreed) with many

ok gilles
@
text
@/*	$OpenBSD: table_ldap.c,v 1.15 2015/10/11 12:50:00 sunil Exp $	*/

/*
 * Copyright (c) 2013 Eric Faurot <eric@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>

#include <netinet/in.h>
#include <netdb.h>

#include <ctype.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>

#include "smtpd-defines.h"
#include "smtpd-api.h"
#include "log.h"
#include "aldap.h"

#define MAX_LDAP_IDENTIFIER      32
#define MAX_LDAP_URL             256
#define MAX_LDAP_USERNAME        256
#define MAX_LDAP_PASSWORD        256
#define MAX_LDAP_BASELEN         128
#define MAX_LDAP_FILTERLEN       1024
#define MAX_LDAP_FIELDLEN        128


enum {
	LDAP_ALIAS = 0,
	LDAP_DOMAIN,
	LDAP_CREDENTIALS,
	LDAP_NETADDR,
	LDAP_USERINFO,
	LDAP_SOURCE,
	LDAP_MAILADDR,
	LDAP_ADDRNAME,

	LDAP_MAX
};

#define MAX_ATTRS	6

struct query {
	char	*filter;
	char	*attrs[MAX_ATTRS];
	int	 attrn;
};

static int table_ldap_update(void);
static int table_ldap_check(int, struct dict *, const char *);
static int table_ldap_lookup(int, struct dict *, const char *, char *, size_t);
static int table_ldap_fetch(int, struct dict *, char *, size_t);

static int ldap_config(void);
static int ldap_open(void);
static int ldap_query(const char *, char **, char ***, size_t);
static int ldap_parse_attributes(struct query *, const char *, const char *, size_t);
static int ldap_run_query(int type, const char *, char *, size_t);

static char *config;

static char *url;
static char *username;
static char *password;
static char *basedn;

static struct aldap *aldap;
static struct query queries[LDAP_MAX];

int
main(int argc, char **argv)
{
	int	ch;

	log_init(1);
	log_verbose(~0);

	while ((ch = getopt(argc, argv, "")) != -1) {
		switch (ch) {
		default:
			log_warnx("warn: table-ldap: bad option");
			return (1);
			/* NOTREACHED */
		}
	}
	argc -= optind;
	argv += optind;

	if (argc != 1) {
		log_warnx("warn: table-ldap: bogus argument(s)");
		return (1);
	}

	config = argv[0];

	if (!ldap_config()) {
		log_warnx("warn: table-ldap: could not parse config");
		return (1);
	}

	log_debug("debug: table-ldap: done reading config");

	if (!ldap_open()) {
		log_warnx("warn: table-ldap: failed to connect");
		return (1);
	}

	log_debug("debug: table-ldap: connected");

	table_api_on_update(table_ldap_update);
	table_api_on_check(table_ldap_check);
	table_api_on_lookup(table_ldap_lookup);
	table_api_on_fetch(table_ldap_fetch);
	table_api_dispatch();

	return (0);
}

static int
table_ldap_update(void)
{
	return (1);
}

static int
table_ldap_check(int service, struct dict *params, const char *key)
{
	switch(service) {
	case K_ALIAS:
	case K_DOMAIN:
	case K_CREDENTIALS:
	case K_USERINFO:
	case K_MAILADDR:
		return ldap_run_query(service, key, NULL, 0);
	default:
		return (-1);
	}
}

static int
table_ldap_lookup(int service, struct dict *params, const char *key, char *dst, size_t sz)
{
	switch(service) {
	case K_ALIAS:
	case K_DOMAIN:
	case K_CREDENTIALS:
	case K_USERINFO:
	case K_MAILADDR:
		return ldap_run_query(service, key, dst, sz);
	default:
		return (-1);
	}
}

static int
table_ldap_fetch(int service, struct dict *params, char *dst, size_t sz)
{
	return (-1);
}

static struct aldap *
ldap_connect(const char *addr)
{
	struct aldap_url lu;
	struct addrinfo	 hints, *res0, *res;
	char		*buf;
	int		 error, fd = -1;

	if ((buf = strdup(addr)) == NULL)
		return (NULL);

	/* aldap_parse_url frees buf on success */
	if (aldap_parse_url(buf, &lu) != 1) {
		log_warnx("warn: table-ldap: ldap_parse_url fail");
		free(buf);
		return (NULL);
	}

	memset(&hints, 0, sizeof(hints));
	hints.ai_family = PF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM; /* DUMMY */
	error = getaddrinfo(lu.host, NULL, &hints, &res0);
	if (error == EAI_AGAIN || error == EAI_NODATA || error == EAI_NONAME)
		return (NULL);
	if (error) {
		log_warnx("warn: table-ldap: could not parse \"%s\": %s",
		    lu.host, gai_strerror(error));
		return (NULL);
	}

	for (res = res0; res; res = res->ai_next) {
		if (res->ai_family != AF_INET && res->ai_family != AF_INET6)
			continue;

		fd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
		if (fd == -1)
			continue;

		if (res->ai_family == AF_INET) {
			struct sockaddr_in sin4 = *(struct sockaddr_in *)res->ai_addr;
			sin4.sin_port = htons(lu.port);
			if (connect(fd, (struct sockaddr *)&sin4, res->ai_addrlen) == 0)
				return aldap_init(fd);
		}
		else if (res->ai_family == AF_INET6) {
			struct sockaddr_in6 sin6 = *(struct sockaddr_in6 *)res->ai_addr;
			sin6.sin6_port = htons(lu.port);
			if (connect(fd, (struct sockaddr *)&sin6, res->ai_addrlen) == 0)
				return aldap_init(fd);
		}

		close(fd);
		fd = -1;
	}

	return (NULL);
}

static int
read_value(char **store, const char *key, const char *value)
{
	log_debug("debug: table-ldap: reading key \"%s\" -> \"%s\"",
	    key, value);

	if (*store) {
		log_warnx("warn: table-ldap: duplicate key %s", key);
		return (0);
	}
	
	if ((*store = strdup(value)) == NULL) {
		log_warn("warn: table-ldap: strdup");
		return (0);
	}

	return (1);
}

static int
ldap_parse_attributes(struct query *query, const char *key, const char *line,
    size_t expect)
{
	char	buffer[1024];
	char   *p;
	size_t	m, n;

	log_debug("debug: table-ldap: parsing attribute \"%s\" (%zu) -> \"%s\"",
	    key, expect, line);

	if (strlcpy(buffer, line, sizeof buffer) >= sizeof buffer)
		return (0);

	m = 1;
	for (p = buffer; *p; ++p) {
		if (*p == ',') {
			*p = 0;
			m++;
		}
	}
	if (expect != m)
		return (0);

	p = buffer;
	for (n = 0; n < expect; ++n)
		query->attrs[n] = NULL;
	for (n = 0; n < m; ++n) {
		query->attrs[n] = strdup(p);
		if (query->attrs[n] == NULL) {
			log_warnx("warn: table-ldap: strdup");
			return (0); /* XXX cleanup */
		}
		p += strlen(p) + 1;
		query->attrn++;
	}
	return (1);
}

static int
ldap_config(void)
{
	size_t		 sz = 0;
	ssize_t		 flen;
	FILE		*fp;
	char		*key, *value, *buf = NULL;

	fp = fopen(config, "r");
	if (fp == NULL)
		return (0);

	while ((flen = getline(&buf, &sz, fp)) != -1) {
		if (buf[flen - 1] == '\n')
			buf[flen - 1] = '\0';

		key = buf;
		while (isspace((unsigned char)*key))
			++key;
		if (*key == '\0' || *key == '#')
			continue;
		value = key;
		strsep(&value, " \t:");
		if (value) {
			while (*value) {
				if (!isspace((unsigned char)*value) &&
				    !(*value == ':' && isspace((unsigned char)*(value + 1))))
					break;
				++value;
			}
			if (*value == '\0')
				value = NULL;
		}

		if (value == NULL) {
			log_warnx("warn: table-ldap: missing value for key %s", key);
			continue;
		}

		if (!strcmp(key, "url"))
			read_value(&url, key, value);
		else if (!strcmp(key, "username"))
			read_value(&username, key, value);
		else if (!strcmp(key, "password"))
			read_value(&password, key, value);
		else if (!strcmp(key, "basedn"))
			read_value(&basedn, key, value);

		else if (!strcmp(key, "alias_filter"))
			read_value(&queries[LDAP_ALIAS].filter, key, value);
		else if (!strcmp(key, "alias_attributes")) {
			ldap_parse_attributes(&queries[LDAP_ALIAS],
			    key, value, 1);
		}

		else if (!strcmp(key, "credentials_filter"))
			read_value(&queries[LDAP_CREDENTIALS].filter, key, value);
		else if (!strcmp(key, "credentials_attributes")) {
			ldap_parse_attributes(&queries[LDAP_CREDENTIALS],
			    key, value, 2);
		}

		else if (!strcmp(key, "domain_filter"))
			read_value(&queries[LDAP_DOMAIN].filter, key, value);
		else if (!strcmp(key, "domain_attributes")) {
			ldap_parse_attributes(&queries[LDAP_DOMAIN],
			    key, value, 1);
		}

		else if (!strcmp(key, "userinfo_filter"))
			read_value(&queries[LDAP_USERINFO].filter, key, value);
		else if (!strcmp(key, "userinfo_attributes")) {
			ldap_parse_attributes(&queries[LDAP_USERINFO],
			    key, value, 3);
		}

		else if (!strcmp(key, "mailaddr_filter"))
			read_value(&queries[LDAP_MAILADDR].filter, key, value);
		else if (!strcmp(key, "mailaddr_attributes")) {
			ldap_parse_attributes(&queries[LDAP_MAILADDR],
			    key, value, 1);
		}
		else
			log_warnx("warn: table-ldap: bogus entry \"%s\"", key);
	}

	free(buf);
	fclose(fp);
	return (1);
}

static int
ldap_open(void)
{
	struct aldap_message	*amsg = NULL;

	aldap = ldap_connect(url);
	if (aldap == NULL) {
		log_warnx("warn: table-ldap: ldap_connect error");
		goto err;
	}

	if (aldap_bind(aldap, username, password) == -1) {
		log_warnx("warn: table-ldap: aldap_bind error");
		goto err;
	}

	if ((amsg = aldap_parse(aldap)) == NULL) {
		log_warnx("warn: table-ldap: aldap_parse");
		goto err;
	}

	switch (aldap_get_resultcode(amsg)) {
	case LDAP_SUCCESS:
		log_debug("debug: table-ldap: ldap server accepted credentials");
		break;
	case LDAP_INVALID_CREDENTIALS:
		log_warnx("warn: table-ldap: ldap server refused credentials");
		goto err;
	default:
		log_warnx("warn: table-ldap: failed to bind, result #%d",
		    aldap_get_resultcode(amsg));
		goto err;
	}

	if (amsg)
		aldap_freemsg(amsg);
	return (1);

err:
	if (aldap)
		aldap_close(aldap);
	if (amsg)
		aldap_freemsg(amsg);
	return (0);
}

static int
ldap_query(const char *filter, char **attributes, char ***outp, size_t n)
{
	struct aldap_message		*m = NULL;
	struct aldap_page_control	*pg = NULL;
	int				 ret, found;
	size_t				 i;
	char				 basedn__[MAX_LDAP_BASELEN];
	char				 filter__[MAX_LDAP_FILTERLEN];

	if (strlcpy(basedn__, basedn, sizeof basedn__) >= sizeof basedn__)
		return -1;
	if (strlcpy(filter__, filter, sizeof filter__) >= sizeof filter__)
		return -1;
	found = 0;
	do {
		if ((ret = aldap_search(aldap, basedn__, LDAP_SCOPE_SUBTREE,
			    filter__, NULL, 0, 0, 0, pg)) == -1) {
			log_debug("ret=%d", ret);
			return -1;
		}
		if (pg != NULL) {
			aldap_freepage(pg);
			pg = NULL;
		}

		while ((m = aldap_parse(aldap)) != NULL) {
			if (aldap->msgid != m->msgid)
				goto error;
			if (m->message_type == LDAP_RES_SEARCH_RESULT) {
				if (m->page != NULL && m->page->cookie_len)
					pg = m->page;
				aldap_freemsg(m);
				m = NULL;
				break;
			}
			if (m->message_type != LDAP_RES_SEARCH_ENTRY)
				goto error;

			found = 1;
			for (i = 0; i < n; ++i)
				if (aldap_match_attr(m, attributes[i], &outp[i]) != 1)
					goto error;
			aldap_freemsg(m);
			m = NULL;
		}
	} while (pg != NULL);

	ret = found ? 1 : 0;
	goto end;

error:
	ret = -1;

end:
	if (m)
		aldap_freemsg(m);
	log_debug("debug: table_ldap: ldap_query: filter=%s, ret=%d", filter, ret);
	return ret;
}

static int
ldap_run_query(int type, const char *key, char *dst, size_t sz)
{
	struct query	 *q;
	char		**res[4], filter[MAX_LDAP_FILTERLEN];
	int		  ret, i;

	switch (type) {
	case K_ALIAS:		q = &queries[LDAP_ALIAS];	break;
	case K_DOMAIN:		q = &queries[LDAP_DOMAIN];	break;
	case K_CREDENTIALS:	q = &queries[LDAP_CREDENTIALS];	break;
	case K_NETADDR:		q = &queries[LDAP_NETADDR];	break;
	case K_USERINFO:	q = &queries[LDAP_USERINFO];	break;
	case K_SOURCE:		q = &queries[LDAP_SOURCE];	break;
	case K_MAILADDR:	q = &queries[LDAP_MAILADDR];	break;
	case K_ADDRNAME:	q = &queries[LDAP_ADDRNAME];	break;
	default:
		return (-1);
	}

	if (snprintf(filter, sizeof(filter), q->filter, key)
	    >= (int)sizeof(filter)) {
		log_warnx("warn: table-ldap: filter too large");
		return (-1);
	}

	memset(res, 0, sizeof(res));
	ret = ldap_query(filter, q->attrs, res, q->attrn);
	if (ret <= 0 || dst == NULL)
		goto end;

	switch (type) {

	case K_ALIAS:
		memset(dst, 0, sz);
		for (i = 0; res[0][i]; i++) {
			if (i && strlcat(dst, ", ", sz) >= sz) {
				ret = -1;
				break;
			}
			if (strlcat(dst, res[0][i], sz) >= sz) {
				ret = -1;
				break;
			}
		}
		break;
	case K_DOMAIN:
	case K_MAILADDR:
		if (strlcpy(dst, res[0][0], sz) >= sz)
			ret = -1;
		break;
	case K_CREDENTIALS:
		if (snprintf(dst, sz, "%s:%s", res[0][0], res[1][0]) >= (int)sz)
			ret = -1;
		break;
	case K_USERINFO:
		if (snprintf(dst, sz, "%s:%s:%s", res[0][0], res[1][0],
		    res[2][0]) >= (int)sz)
			ret = -1;
		break;
	default:
		log_warnx("warn: table-ldap: unsupported lookup kind");
		ret = -1;
	}

	if (ret == -1)
		log_warnx("warn: table-ldap: could not format result");

end:
	for (i = 0; i < q->attrn; ++i)
		if (res[i])
			aldap_free_attr(res[i]);

	return (ret);
}
@


1.15
log
@Convert some fgetln to getline.

Ok gilles@@, giovanni@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_ldap.c,v 1.14 2015/10/06 14:02:25 stsp Exp $	*/
@


1.14
log
@Fix buf leak in error path. ok gilles@@ eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_ldap.c,v 1.13 2015/01/20 17:37:54 deraadt Exp $	*/
d300 2
a301 1
	size_t		 flen;
d303 1
a303 1
	char		*key, *value, *buf, *lbuf;
d309 1
a309 2
	lbuf = NULL;
	while ((buf = fgetln(fp, &flen))) {
a311 10
		else {
			lbuf = malloc(flen + 1);
			if (lbuf == NULL) {
				log_warn("warn: table-ldap: malloc");
				return (0);
			}
			memcpy(lbuf, buf, flen);
			lbuf[flen] = '\0';
			buf = lbuf;
		}
d383 1
a383 1
	free(lbuf);
@


1.13
log
@use <limits.h> comprehensively.  For now try to push <> includes to
each .c file, and out of the .h files.  To avoid overinclude.
ok gilles, in principle.  If this has been done right, -portable should
become easier to maintain.
@
text
@d1 1
a1 1
/*	$OpenBSD: table_ldap.c,v 1.12 2014/07/09 08:38:08 eric Exp $	*/
d192 1
a192 2
	/* XXX buf leak */

d195 1
@


1.12
log
@various fixes in experimental ldap backend and add support for mailaddr service.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d20 6
d29 1
d32 1
@


1.11
log
@Update the table API: lookup functions can take an optional parameters
dictionnary (currently not set). While there, add a helper for forking
external backends, and remove unused table functions.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_ldap.c,v 1.10 2014/06/10 16:43:46 gilles Exp $	*/
d69 1
a69 1
static int ldap_parse_attributes(char **, const char *, const char *, size_t);
d145 1
d160 1
d251 1
a251 1
ldap_parse_attributes(char **attributes, const char *key, const char *line,
d276 1
a276 1
		attributes[n] = NULL;
d278 2
a279 2
		attributes[n] = strdup(p);
		if (attributes[n] == NULL) {
d284 1
d349 2
a350 2
		else if (!strcmp(key, "alias_attributes"))
			ldap_parse_attributes(queries[LDAP_ALIAS].attrs,
d352 1
d356 2
a357 2
		else if (!strcmp(key, "credentials_attributes"))
			ldap_parse_attributes(queries[LDAP_CREDENTIALS].attrs,
d359 1
d363 2
a364 2
		else if (!strcmp(key, "domain_attributes"))
			ldap_parse_attributes(queries[LDAP_DOMAIN].attrs,
d366 1
d370 11
a380 3
		else if (!strcmp(key, "userinfo_attributes"))
			ldap_parse_attributes(queries[LDAP_USERINFO].attrs,
			    key, value, 4);
d454 1
a456 1

d493 1
a493 1
	log_debug("debug: table_ldap_internal_query: filter=%s, ret=%d", filter, ret);
d544 1
d549 1
a549 1
		if (snprintf(dst, sz, "%s:%s", res[0][0], res[0][1]) >= (int)sz)
d557 3
@


1.10
log
@we should really zero a buffer we strlcat to otherwise aliases resolution
really resolves nothing :-)
@
text
@d1 1
a1 1
/*	$OpenBSD: table_ldap.c,v 1.9 2014/03/08 15:57:31 eric Exp $	*/
d62 3
a64 3
static int table_ldap_check(int, const char *);
static int table_ldap_lookup(int, const char *, char *, size_t);
static int table_ldap_fetch(int, char *, size_t);
d138 1
a138 1
table_ldap_check(int service, const char *key)
d152 1
a152 1
table_ldap_lookup(int service, const char *key, char *dst, size_t sz)
d166 1
a166 1
table_ldap_fetch(int service, char *dst, size_t sz)
@


1.9
log
@format string has changed for K_USERINFO
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d517 1
@


1.8
log
@bcopy -> memmove
bzero -> memset
@
text
@d1 1
a1 1
/*	$OpenBSD: table_ldap.c,v 1.7 2013/11/28 10:43:37 eric Exp $	*/
d537 2
a538 2
		if (snprintf(dst, sz, "%s:%s:%s:%s", res[0][0], res[1][0],
		    res[2][0], res[3][0]) >= (int)sz)
@


1.7
log
@unsigned char casts for ctype
ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_ldap.c,v 1.6 2013/07/22 13:14:49 eric Exp $	*/
d189 1
a189 1
	bzero(&hints, sizeof(hints));
d509 1
a509 1
	bzero(res, sizeof(res));
@


1.6
log
@use unistd.h instead of getopt.h
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d313 1
a313 1
		while (isspace((int)*key))
d321 2
a322 2
				if (!isspace(*value) &&
				    !(*value == ':' && isspace(*(value + 1))))
@


1.5
log
@Update ldap and sqlite table backends and provide them as external backends.
@
text
@a21 1
#include <getopt.h>
@


1.4
log
@sync with OpenSMTPD 5.3.2

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_ldap.c,v 1.3 2013/03/08 19:11:52 chl Exp $	*/
d4 1
a4 1
 * Copyright (c) 2010-2012 Gilles Chehade <gilles@@poolp.org>
a19 6
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>

#include <netinet/in.h>
#include <arpa/inet.h>
d22 1
a22 6
#include <err.h>
#include <errno.h>
#include <event.h>
#include <fcntl.h>
#include <imsg.h>
#include <stdio.h>
d27 3
a29 1
#include "smtpd.h"
a30 1
#include "log.h"
d32 20
a51 24
#define MAX_LDAP_IDENTIFIER    	 32
#define MAX_LDAP_URL   	 	 256
#define MAX_LDAP_USERNAME      	 256
#define MAX_LDAP_PASSWORD      	 256
#define MAX_LDAP_BASELEN      	 128
#define MAX_LDAP_FILTERLEN     	 1024
#define MAX_LDAP_FIELDLEN      	 128

static void	*table_ldap_open(struct table *);
static int	 table_ldap_update(struct table *);
static int	 table_ldap_config(struct table *);
static int	 table_ldap_lookup(void *, const  char *, enum table_service, union lookup *);
static int	 table_ldap_fetch(void *, enum table_service, union lookup *);
static void	 table_ldap_close(void *);
static struct aldap	*ldap_client_connect(const char *);

struct table_backend table_backend_ldap = {
	K_ALIAS|K_CREDENTIALS|K_DOMAIN|K_USERINFO, /* K_NETADDR|K_SOURCE,*/
	table_ldap_config,
	table_ldap_open,
	table_ldap_update,
	table_ldap_close,
	table_ldap_lookup,
	table_ldap_fetch
d54 6
a59 3
struct table_ldap_handle {
	struct aldap	*aldap;
	struct table	*table;
d62 39
a100 8
static int	parse_attributes(char **, const char *, size_t);
static int	table_ldap_internal_query(struct aldap *, const char *,
    const char *, char **, char ***, size_t);

static int	table_ldap_alias(struct table_ldap_handle *, const char *, union lookup *);
static int	table_ldap_credentials(struct table_ldap_handle *, const char *, union lookup *);
static int	table_ldap_domain(struct table_ldap_handle *, const char *, union lookup *);
static int	table_ldap_userinfo(struct table_ldap_handle *, const char *, union lookup *);
d102 4
d107 1
a107 4
static int
table_ldap_config(struct table *table)
{
	struct table	*cfg = NULL;
d109 4
a112 3
	/* no config ? broken */
	if (table->t_config[0] == '\0')
		return 0;
d114 1
a114 3
	cfg = table_create("static", table->t_name, "conf", table->t_config);
	if (!table_config(cfg))
		goto err;
d116 3
a118 4
	/* sanity checks */
	if (table_get(cfg, "url") == NULL) {
		log_warnx("table_ldap: missing 'url' configuration");
		goto err;
d121 10
a130 4
	if (table_get(cfg, "basedn") == NULL) {
		log_warnx("table_ldap: missing 'basedn' configuration");
		goto err;
	}
d132 5
a136 1
	return 1;
d138 13
a150 3
err:
	table_destroy(cfg);
	return 0;
d152 12
d167 1
a167 1
table_ldap_update(struct table *table)
d169 1
a169 1
	return 1;
d172 2
a173 2
static void *
table_ldap_open(struct table *table)
d175 7
a181 6
	struct table			*cfg = NULL;
	struct table_ldap_handle	*tlh = NULL;
	struct aldap_message		*message = NULL;
	char     			*url = NULL;
	char     			*username = NULL;
	char     			*password = NULL;
d183 1
a183 5
	cfg = table_find(table->t_name, "conf");
	if (table_get(cfg, "url") == NULL ||
	    table_get(cfg, "username") == NULL ||
	    table_get(cfg, "password") == NULL)
		goto err;
d185 3
a187 10
	url      = xstrdup(table_get(cfg, "url"), "table_ldap_open");
	username = xstrdup(table_get(cfg, "username"), "table_ldap_open");
	password = xstrdup(table_get(cfg, "password"), "table_ldap_open");

	tlh = xcalloc(1, sizeof(*tlh), "table_ldap_open");
	tlh->table = table;
	tlh->aldap = ldap_client_connect(url);
	if (tlh->aldap == NULL) {
		log_warnx("table_ldap_open: ldap_client_connect error");
		goto err;
d190 10
a199 3
	if (aldap_bind(tlh->aldap, username, password) == -1) {
		log_warnx("table_ldap_open: aldap_bind error");
		goto err;
d202 23
a224 3
	if ((message = aldap_parse(tlh->aldap)) == NULL) {
		log_warnx("table_ldap_open: aldap_parse");
		goto err;
d227 2
a228 11
	switch (aldap_get_resultcode(message)) {
	case LDAP_SUCCESS:
		log_warnx("table_ldap_open: ldap server accepted credentials");
		break;
	case LDAP_INVALID_CREDENTIALS:
		log_warnx("table_ldap_open: ldap server refused credentials");
		goto err;
	default:
		log_warnx("table_ldap_open: failed to bind, result #%d", aldap_get_resultcode(message));
		goto err;
	}
d230 5
a234 1
	return tlh;
d236 8
a243 5
err:
	if (tlh) {
		if (tlh->aldap != NULL)
			aldap_close(tlh->aldap);
		free(tlh);
d245 2
a246 3
	if (message != NULL)
		aldap_freemsg(message);
	return NULL;
d249 3
a251 2
static void
table_ldap_close(void *hdl)
d253 19
a271 1
	struct table_ldap_handle	*tlh = hdl;
d273 12
a284 2
	aldap_close(tlh->aldap);
	free(tlh);
d288 1
a288 2
table_ldap_lookup(void *hdl, const char *key, enum table_service service,
    union lookup *lk)
d290 40
a329 1
	struct table_ldap_handle	*tlh = hdl;
d331 13
a343 3
	switch (service) {
	case K_ALIAS:
		return table_ldap_alias(tlh, key, lk);
d345 5
a349 2
	case K_CREDENTIALS:
		return table_ldap_credentials(tlh, key, lk);
d351 5
a355 2
	case K_DOMAIN:
		return table_ldap_domain(tlh, key, lk);
d357 5
a361 2
	case K_USERINFO:
		return table_ldap_userinfo(tlh, key, lk);
d363 7
a369 2
	default:
		break;
d372 3
a374 1
	return 0;
d378 1
a378 1
table_ldap_fetch(void *hdl, enum table_service service, union lookup *lk)
d380 34
a413 3
	/* fetch not support for LDAP at this point */
	return -1;
}
d415 6
a420 6
static int
filter_expand(char **expfilter, const char *filter, const char *key)
{
	if (asprintf(expfilter, filter, key) < 0)
		return 0;
	return 1;
d424 1
a424 2
table_ldap_internal_query(struct aldap *aldap, const char *basedn,
    const char *filter, char **attributes, char ***outp, size_t n)
d426 6
a431 7
	struct aldap_message	       *m = NULL;
	struct aldap_page_control      *pg = NULL;
	int				ret;
	int				found;
	size_t				i;
	char				basedn__[MAX_LDAP_BASELEN];
	char				filter__[MAX_LDAP_FILTERLEN];
d433 1
a433 2
	if (strlcpy(basedn__, basedn, sizeof basedn__)
	    >= sizeof basedn__)
d435 1
a435 2
	if (strlcpy(filter__, filter, sizeof filter__)
	    >= sizeof filter__)
a483 1

d485 1
a485 1
table_ldap_credentials(struct table_ldap_handle *tlh, const char *key, union lookup *lk)
d487 15
a501 19
	struct aldap	       *aldap = tlh->aldap;
	struct table	       *cfg = table_find(tlh->table->t_name, "conf");
	const char	       *filter = NULL;
	const char	       *basedn = NULL;
	char		       *expfilter = NULL;
	char     	       *attributes[4];
	char     	      **ret_attr[4];
	const char     	       *attr;
	char			line[1024];
	int			ret = -1;
	size_t			i;

	bzero(&attributes, sizeof attributes);
	bzero(&ret_attr, sizeof ret_attr);

	basedn = table_get(cfg, "basedn");
	if ((filter = table_get(cfg, "credentials_filter")) == NULL) {
		log_warnx("table_ldap: lookup: no filter configured for credentials");
		goto end;
d504 4
a507 3
	if ((attr = table_get(cfg, "credentials_attributes")) == NULL) {
		log_warnx("table_ldap: lookup: no attributes configured for credentials");
		goto end;
d510 3
a512 2
	if (! filter_expand(&expfilter, filter, key)) {
		log_warnx("table_ldap: lookup: couldn't expand filter");
a513 1
	}
d515 1
a515 4
	if (! parse_attributes(attributes, attr, 2)) {
		log_warnx("table_ldap: lookup: failed to parse attributes");
		goto end;
	}
d517 25
a541 190
	if ((ret = table_ldap_internal_query(aldap, basedn, expfilter, attributes,
		    ret_attr, nitems(attributes))) <= 0)
		goto end;

	if (lk == NULL)
		goto end;

	if (! bsnprintf(line, sizeof line, "%s:%s", ret_attr[0][0], ret_attr[0][1])) {
		ret = -1;
		goto end;
	}

	bzero(&lk->creds, sizeof(lk->creds));
	if (! text_to_credentials(&lk->creds, line))
		ret = -1;

end:
	for (i = 0; i < nitems(attributes); ++i) {
		free(attributes[i]);
		if (ret_attr[i])
			aldap_free_attr(ret_attr[i]);
	}
	
	free(expfilter);
	log_debug("debug: table_ldap_credentials: ret=%d", ret);
	return ret;
}

static int
table_ldap_domain(struct table_ldap_handle *tlh, const char *key, union lookup *lk)
{
	struct aldap	       *aldap = tlh->aldap;
	struct table	       *cfg = table_find(tlh->table->t_name, "conf");
	const char	       *filter = NULL;
	const char	       *basedn = NULL;
	char		       *expfilter = NULL;
	char     	       *attributes[1];
	char     	      **ret_attr[1];
	const char     	       *attr;
	int			ret = -1;
	size_t			i;

	bzero(&attributes, sizeof attributes);
	bzero(&ret_attr, sizeof ret_attr);

	log_debug("domain: %s", key);
	basedn = table_get(cfg, "basedn");
	if ((filter = table_get(cfg, "domain_filter")) == NULL) {
		log_warnx("table_ldap: lookup: no filter configured for domain");
		goto end;
	}

	if ((attr = table_get(cfg, "domain_attributes")) == NULL) {
		log_warnx("table_ldap: lookup: no attributes configured for domain");
		goto end;
	}

	if (! filter_expand(&expfilter, filter, key)) {
		log_warnx("table_ldap: lookup: couldn't expand filter");
		goto end;
	}

	if (! parse_attributes(attributes, attr, 1)) {
		log_warnx("table_ldap: lookup: failed to parse attributes");
		goto end;
	}

	if ((ret = table_ldap_internal_query(aldap, basedn, expfilter, attributes,
		    ret_attr, nitems(attributes))) <= 0)
		goto end;

	if (lk == NULL)
		goto end;

	bzero(&lk->domain, sizeof(lk->domain));
	if (strlcpy(lk->domain.name, ret_attr[0][0], sizeof(lk->domain.name))
	    >= sizeof(lk->domain.name))
		ret = -1;

end:
	for (i = 0; i < nitems(attributes); ++i) {
		free(attributes[i]);
		if (ret_attr[i])
			aldap_free_attr(ret_attr[i]);
	}
	free(expfilter);
	log_debug("debug: table_ldap_domain: ret=%d", ret);
	return ret;
}

static int
table_ldap_userinfo(struct table_ldap_handle *tlh, const char *key, union lookup *lk)
{
	struct aldap	       *aldap = tlh->aldap;
	struct table	       *cfg = table_find(tlh->table->t_name, "conf");
	const char	       *filter = NULL;
	const char	       *basedn = NULL;
	char		       *expfilter = NULL;
	char     	       *attributes[4];
	char     	      **ret_attr[4];
	const char     	       *attr;
	char			line[1024];
	int			ret = -1;
	size_t			i;

	bzero(&attributes, sizeof attributes);
	bzero(&ret_attr, sizeof ret_attr);

	basedn = table_get(cfg, "basedn");
	if ((filter = table_get(cfg, "userinfo_filter")) == NULL) {
		log_warnx("table_ldap: lookup: no filter configured for userinfo");
		goto end;
	}

	if ((attr = table_get(cfg, "userinfo_attributes")) == NULL) {
		log_warnx("table_ldap: lookup: no attributes configured for userinfo");
		goto end;
	}

	if (! filter_expand(&expfilter, filter, key)) {
		log_warnx("table_ldap: lookup: couldn't expand filter");
		goto end;
	}

	if (! parse_attributes(attributes, attr, 4)) {
		log_warnx("table_ldap: lookup: failed to parse attributes");
		goto end;
	}

	if ((ret = table_ldap_internal_query(aldap, basedn, expfilter, attributes,
		    ret_attr, nitems(attributes))) <= 0)
		goto end;

	if (lk == NULL)
		goto end;

	if (! bsnprintf(line, sizeof line, "%s:%s:%s:%s",
		ret_attr[0][0], ret_attr[1][0], ret_attr[2][0], ret_attr[3][0])) {
		ret = -1;
		goto end;
	}

	bzero(&lk->userinfo, sizeof(lk->userinfo));
	if (!text_to_userinfo(&(lk->userinfo), line))
		ret = -1;

end:
	for (i = 0; i < nitems(attributes); ++i) {
		free(attributes[i]);
		if (ret_attr[i])
			aldap_free_attr(ret_attr[i]);
	}
	free(expfilter);
	log_debug("debug: table_ldap_userinfo: ret=%d", ret);
	return ret;
}

static int
table_ldap_alias(struct table_ldap_handle *tlh, const char *key, union lookup *lk)
{
	struct aldap	       *aldap = tlh->aldap;
	struct table	       *cfg = table_find(tlh->table->t_name, "conf");
	const char	       *filter = NULL;
	const char	       *basedn = NULL;
	char		       *expfilter = NULL;
	char     	       *attributes[1];
	char     	      **ret_attr[1];
	const char     	       *attr;
	int			ret = -1;
	size_t			i;

	bzero(&attributes, sizeof attributes);
	bzero(&ret_attr, sizeof ret_attr);
	if (lk)
		lk->expand = NULL;

	basedn = table_get(cfg, "basedn");
	if ((filter = table_get(cfg, "alias_filter")) == NULL) {
		log_warnx("table_ldap: lookup: no filter configured for alias");
		goto end;
	}

	if ((attr = table_get(cfg, "alias_attributes")) == NULL) {
		log_warnx("table_ldap: lookup: no attributes configured for alias");
		goto end;
	}

	if (! filter_expand(&expfilter, filter, key)) {
		log_warnx("table_ldap: lookup: couldn't expand filter");
		goto end;
d544 2
a545 19
	if (! parse_attributes(attributes, attr, 1)) {
		log_warnx("table_ldap: lookup: failed to parse attributes");
		goto end;
	}

	if ((ret = table_ldap_internal_query(aldap, basedn, expfilter, attributes,
		    ret_attr, nitems(attributes))) <= 0)
		goto end;

	if (lk == NULL)
		goto end;

	lk->expand = xcalloc(1, sizeof(*lk->expand), "table_ldap_alias");
	for (i = 0; ret_attr[0][i]; ++i) {
		if (! expand_line(lk->expand, ret_attr[0][i], 1)) {
			ret = -1;
			goto end;
		}
	}
d548 3
a550 68
	for (i = 0; i < nitems(attributes); ++i) {
		free(attributes[i]);
		if (ret_attr[i])
			aldap_free_attr(ret_attr[i]);
	}
	if (ret != 1 && lk && lk->expand)
		expand_free(lk->expand);

	free(expfilter);
	log_debug("debug: table_ldap_alias: ret=%d", ret);
	return ret;
}

static struct aldap *
ldap_client_connect(const char *addr)
{
	struct aldap_url	lu;
	struct addrinfo		 hints, *res0, *res;
	int			 error;

	char *url;
	int fd = -1;

	if ((url = strdup(addr)) == NULL)
		err(1, NULL);

	if (aldap_parse_url(url, &lu) != 1) {
		warnx("aldap_parse_url fail");
		goto err;
	}
	url = NULL;

	bzero(&hints, sizeof(hints));
	hints.ai_family = PF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM; /* DUMMY */
	error = getaddrinfo(lu.host, NULL, &hints, &res0);
	if (error == EAI_AGAIN || error == EAI_NODATA || error == EAI_NONAME)
		goto err;
	if (error) {
		log_warnx("ldap_client_connect: could not parse \"%s\": %s", lu.host,
		    gai_strerror(error));
		goto err;
	}

	for (res = res0; res; res = res->ai_next) {
		if (res->ai_family != AF_INET && res->ai_family != AF_INET6)
			continue;

		fd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
		if (fd == -1)
			continue;

		if (res->ai_family == AF_INET) {
			struct sockaddr_in sin4 = *(struct sockaddr_in *)res->ai_addr;
			sin4.sin_port = htons(lu.port);
			if (connect(fd, (struct sockaddr *)&sin4, res->ai_addrlen) == 0)
				return aldap_init(fd);
		}
		else if (res->ai_family == AF_INET6) {
			struct sockaddr_in6 sin6 = *(struct sockaddr_in6 *)res->ai_addr;
			sin6.sin6_port = htons(lu.port);
			if (connect(fd, (struct sockaddr *)&sin6, res->ai_addrlen) == 0)
				return aldap_init(fd);
		}

		close(fd);
		fd = -1;
	}
d552 1
a552 34
err:
	free(url);
	return NULL;
}

static int
parse_attributes(char **attributes, const char *line, size_t expect)
{
	char	buffer[1024];
	char   *p;
	size_t	m, n;

	if (strlcpy(buffer, line, sizeof buffer)
	    >= sizeof buffer)
		return 0;

	m = 1;
	for (p = buffer; *p; ++p) {
		if (*p == ',') {
			*p = 0;
			m++;
		}
	}
	if (expect != m)
		return 0;

	p = buffer;
	for (n = 0; n < expect; ++n)
		attributes[n] = NULL;
	for (n = 0; n < m; ++n) {
		attributes[n] = xstrdup(p, "parse_attributes");
		p += strlen(p) + 1;
	}
	return 1;
@


1.3
log
@Add missing $OpenBSD$ RCS tags

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a21 1
#include <sys/param.h>
d50 7
a56 7
static void			*table_ldap_open(struct table *);
static int			 table_ldap_update(struct table *);
static int			 table_ldap_config(struct table *, const char *);
static int			 table_ldap_lookup(void *, const  char *, enum table_service, void **);
static int			 table_ldap_fetch(void *, enum table_service, char **);
static void			 table_ldap_close(void *);
static struct aldap		*ldap_client_connect(const char *);
d77 4
a80 4
static int	table_ldap_alias(struct table_ldap_handle *, const char *, void **);
static int	table_ldap_credentials(struct table_ldap_handle *, const char *, void **);
static int	table_ldap_domain(struct table_ldap_handle *, const char *, void **);
static int	table_ldap_userinfo(struct table_ldap_handle *, const char *, void **);
d84 1
a84 1
table_ldap_config(struct table *table, const char *config)
d86 1
a86 1
	void	*cfg = NULL;
d89 1
a89 1
	if (config == NULL)
d92 2
a93 2
	cfg = table_config_create();
	if (! table_config_parse(cfg, config, T_HASH))
d97 1
a97 1
	if (table_config_get(cfg, "url") == NULL) {
d102 1
a102 1
	if (table_config_get(cfg, "basedn") == NULL) {
a106 1
	table_set_configuration(table, cfg);
d131 1
a131 1
	cfg = table_get_configuration(table);
d195 1
a195 1
		void **retp)
d201 1
a201 1
		return table_ldap_alias(tlh, key, retp);
d204 1
a204 1
		return table_ldap_credentials(tlh, key, retp);
d207 1
a207 1
		return table_ldap_domain(tlh, key, retp);
d210 1
a210 1
		return table_ldap_userinfo(tlh, key, retp);
d220 1
a220 1
table_ldap_fetch(void *hdl, enum table_service service, char **retp)
d301 1
a301 1
table_ldap_credentials(struct table_ldap_handle *tlh, const char *key, void **retp)
d303 11
a313 12
	struct aldap		       *aldap = tlh->aldap;
	struct table		       *cfg = table_get_configuration(tlh->table);
	const char		       *filter = NULL;
	const char		       *basedn = NULL;
	struct credentials		credentials;
	char			       *expfilter = NULL;
	char     		       *attributes[4];
	char     		      **ret_attr[4];
	const char     		       *attr;
	char				line[1024];
	int				ret = -1;
	size_t				i;
d343 1
a343 1
	if (retp == NULL)
d351 2
a352 2
	bzero(&credentials, sizeof credentials);
	if (! text_to_credentials(&credentials, line)) {
a353 4
		goto end;
	}

	*retp = xmemdup(&credentials, sizeof credentials, "table_ldap_credentials");
d368 1
a368 1
table_ldap_domain(struct table_ldap_handle *tlh, const char *key, void **retp)
d370 10
a379 11
	struct aldap		       *aldap = tlh->aldap;
	struct table		       *cfg = table_get_configuration(tlh->table);
	const char		       *filter = NULL;
	const char		       *basedn = NULL;
	struct destination		destination;
	char			       *expfilter = NULL;
	char     		       *attributes[1];
	char     		      **ret_attr[1];
	const char     		       *attr;
	int				ret = -1;
	size_t				i;
d410 1
a410 1
	if (retp == NULL)
d413 4
a416 4
	bzero(&destination, sizeof destination);
	if (strlcpy(destination.name, ret_attr[0][0], sizeof destination.name)
	    >= sizeof destination.name);
	*retp = xmemdup(&destination, sizeof destination, "table_ldap_destination");
d425 1
a425 1
	log_debug("debug: table_ldap_destination: ret=%d", ret);
d430 1
a430 1
table_ldap_userinfo(struct table_ldap_handle *tlh, const char *key, void **retp)
d432 11
a442 12
	struct aldap		       *aldap = tlh->aldap;
	struct table		       *cfg = table_get_configuration(tlh->table);
	const char		       *filter = NULL;
	const char		       *basedn = NULL;
	struct userinfo			userinfo;
	char			       *expfilter = NULL;
	char     		       *attributes[4];
	char     		      **ret_attr[4];
	const char     		       *attr;
	char				line[1024];
	int				ret = -1;
	size_t				i;
d472 1
a472 1
	if (retp == NULL)
d481 2
a482 2
	bzero(&userinfo, sizeof userinfo);
	if (! text_to_userinfo(&userinfo, line)) {
a483 4
		goto end;
	}

	*retp = xmemdup(&userinfo, sizeof userinfo, "table_ldap_userinfo");
d497 1
a497 1
table_ldap_alias(struct table_ldap_handle *tlh, const char *key, void **retp)
d499 10
a508 11
	struct aldap		       *aldap = tlh->aldap;
	struct table		       *cfg = table_get_configuration(tlh->table);
	const char		       *filter = NULL;
	const char		       *basedn = NULL;
	struct expand		       *xp = NULL;
	char			       *expfilter = NULL;
	char     		       *attributes[1];
	char     		      **ret_attr[1];
	const char     		       *attr;
	int				ret = -1;
	size_t				i;
d512 2
d540 1
a540 1
	if (retp == NULL)
d543 1
a543 1
	xp = xcalloc(1, sizeof *xp, "table_ldap_alias");
d545 1
a545 1
		if (! expand_line(xp, ret_attr[0][i], 1)) {
a549 1
	*retp = xp;
d557 3
a559 6
	if (ret != 1) {
		if (retp)
			*retp = NULL;
		if (xp)
			expand_free(xp);
	}
@


1.2
log
@assorted fixes spotted by Coverity.
some log message updates.

ok gilles@@
@
text
@d1 2
@


1.1
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@d174 5
a178 3
	if (tlh->aldap != NULL)
		aldap_close(tlh->aldap);
	free(tlh);
a292 2
	if (pg)
		aldap_freepage(pg);
d596 1
d632 1
a635 2
	if (fd != -1)
		close(fd);
@

