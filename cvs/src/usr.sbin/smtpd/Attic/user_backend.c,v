head	1.3;
access;
symbols
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2011.12.13.22.04.35;	author eric;	state dead;
branches;
next	1.2;

1.2
date	2011.12.08.17.00.28;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.17.18.54.32;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.3
log
@split user_backend.c into user.c and user_pwd.c to be consistent with the
backend scheme. Also rename USER_GETPWNAM to USER_PWD.

ok chl@@ gilles@@
@
text
@/*	$OpenBSD: user_backend.c,v 1.2 2011/12/08 17:00:28 todd Exp $	*/

/*
 * Copyright (c) 2011 Gilles Chehade <gilles@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/param.h>
#include <sys/socket.h>
#include <sys/stat.h>

#include <event.h>
#include <imsg.h>
#include <libgen.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "smtpd.h"
#include "log.h"

int user_getpw_ret(struct mta_user *, struct passwd *); /* helper */
int user_getpwnam(struct mta_user *, char *);
int user_getpwuid(struct mta_user *, uid_t);
struct user_backend *user_backend_lookup(enum user_type);

struct user_backend user_backends[] = {
	{ USER_GETPWNAM, user_getpwnam, user_getpwuid }
};

struct user_backend *
user_backend_lookup(enum user_type type)
{
	u_int8_t i;

	for (i = 0; i < nitems(user_backends); ++i)
		if (user_backends[i].type == type)
			break;

	if (i == nitems(user_backends))
		fatalx("invalid user type");

	return &user_backends[i];
}



int
user_getpw_ret(struct mta_user *u, struct passwd *pw)
{
	if (strlcpy(u->username, pw->pw_name, sizeof (u->username))
	    >= sizeof (u->username))
		return 0;

	if (strlcpy(u->password, pw->pw_passwd, sizeof (u->password))
	    >= sizeof (u->password))
		return 0;

	if (strlcpy(u->directory, pw->pw_dir, sizeof (u->directory))
	    >= sizeof (u->directory))
		return 0;

	u->uid = pw->pw_uid;
	u->gid = pw->pw_gid;

	return 1;
}

int
user_getpwnam(struct mta_user *u, char *username)
{
	struct passwd *pw;

	pw = getpwnam(username);
	if (pw == NULL)
		return 0;

	return user_getpw_ret(u, pw);
}

int
user_getpwuid(struct mta_user *u, uid_t uid)
{
	struct passwd *pw;

	pw = getpwuid(uid);
	if (pw == NULL)
		return 0;

	return user_getpw_ret(u, pw);
}
@


1.2
log
@rename struct user to struct mta_user to avoid namespace conflict elsewhere
ok chl@@ & gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: user_backend.c,v 1.1 2011/05/17 18:54:32 gilles Exp $	*/
@


1.1
log
@introduce new user_backend API for smtpd to lookup the users it wants to
deliver mail to. the only backend supported for now is USER_GETPWNAM and
it is not yet possible to switch to an alternate backend.

yes this means that we're very close from smtpd being able to handle fully
virtual accounts for both incoming and outgoing messages.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 3
a40 3
int user_getpw_ret(struct user *, struct passwd *); /* helper */
int user_getpwnam(struct user *, char *);
int user_getpwuid(struct user *, uid_t);
d65 1
a65 1
user_getpw_ret(struct user *u, struct passwd *pw)
d86 1
a86 1
user_getpwnam(struct user *u, char *username)
d98 1
a98 1
user_getpwuid(struct user *u, uid_t uid)
@

