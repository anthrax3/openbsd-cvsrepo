head	1.33;
access;
symbols
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10;
locks; strict;
comment	@ * @;


1.33
date	2012.01.28.11.33.55;	author gilles;	state dead;
branches;
next	1.32;

1.32
date	2012.01.28.11.33.07;	author gilles;	state Exp;
branches;
next	1.31;

1.31
date	2012.01.12.23.17.02;	author gilles;	state Exp;
branches;
next	1.30;

1.30
date	2012.01.12.22.40.16;	author gilles;	state Exp;
branches;
next	1.29;

1.29
date	2012.01.12.22.00.21;	author gilles;	state Exp;
branches;
next	1.28;

1.28
date	2012.01.11.22.55.16;	author gilles;	state Exp;
branches;
next	1.27;

1.27
date	2012.01.11.22.40.36;	author gilles;	state Exp;
branches;
next	1.26;

1.26
date	2011.11.15.23.06.39;	author gilles;	state Exp;
branches;
next	1.25;

1.25
date	2011.11.07.11.14.10;	author eric;	state Exp;
branches;
next	1.24;

1.24
date	2011.10.27.14.32.57;	author chl;	state Exp;
branches;
next	1.23;

1.23
date	2011.10.23.17.12.41;	author gilles;	state Exp;
branches;
next	1.22;

1.22
date	2011.10.23.15.36.53;	author eric;	state Exp;
branches;
next	1.21;

1.21
date	2011.10.23.13.03.05;	author gilles;	state Exp;
branches;
next	1.20;

1.20
date	2011.10.23.09.30.07;	author gilles;	state Exp;
branches;
next	1.19;

1.19
date	2011.09.18.21.37.53;	author gilles;	state Exp;
branches;
next	1.18;

1.18
date	2011.09.01.19.56.49;	author eric;	state Exp;
branches;
next	1.17;

1.17
date	2011.08.30.17.06.01;	author chl;	state Exp;
branches;
next	1.16;

1.16
date	2011.08.26.14.39.47;	author chl;	state Exp;
branches;
next	1.15;

1.15
date	2011.08.17.20.54.16;	author gilles;	state Exp;
branches;
next	1.14;

1.14
date	2011.08.17.20.35.11;	author gilles;	state Exp;
branches;
next	1.13;

1.13
date	2011.08.17.20.04.43;	author gilles;	state Exp;
branches;
next	1.12;

1.12
date	2011.08.17.19.36.23;	author gilles;	state Exp;
branches;
next	1.11;

1.11
date	2011.08.16.19.02.03;	author gilles;	state Exp;
branches;
next	1.10;

1.10
date	2011.07.21.23.29.24;	author gilles;	state Exp;
branches;
next	1.9;

1.9
date	2011.07.19.13.07.07;	author eric;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.16.21.05.52;	author gilles;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.01.12.57.11;	author eric;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.17.13.36.07;	author gilles;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.17.11.39.23;	author gilles;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.15.17.01.05;	author gilles;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.14.22.36.09;	author gilles;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.14.20.11.08;	author gilles;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.13.20.53.18;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.33
log
@no longer needed
@
text
@@


1.32
log
@- introduce the scheduler_backend API
- introduce the scheduler_ramqueue backend
- remove all occurences of ramqueue outside of the ramqueue backend
- teach runner how to use the new API

it is now possible to write custom schedulers !

ok eric@@, ok chl@@
@
text
@@


1.31
log
@we should never use ramqueue_first_envelope() as a mean to determine the
first schedulable envelope otherwise we end up with nsched wrong ...

heck, let's kill ramqueue_first_envelope() and be done with it ;)
@
text
@a0 476
/*	$OpenBSD: ramqueue.c,v 1.30 2012/01/12 22:40:16 gilles Exp $	*/

/*
 * Copyright (c) 2011 Gilles Chehade <gilles@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/param.h>
#include <sys/socket.h>
#include <sys/stat.h>

#include <dirent.h>
#include <err.h>
#include <errno.h>
#include <event.h>
#include <fcntl.h>
#include <imsg.h>
#include <inttypes.h>
#include <libgen.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#include "smtpd.h"
#include "log.h"


void ramqueue_insert(struct ramqueue *, struct envelope *, time_t);
int ramqueue_host_cmp(struct ramqueue_host *, struct ramqueue_host *);
void ramqueue_put_host(struct ramqueue *, struct ramqueue_host *);
void ramqueue_put_batch(struct ramqueue *, struct ramqueue_batch *);

static int ramqueue_expire(struct envelope *, time_t);
static time_t ramqueue_next_schedule(struct envelope *, time_t);
static struct ramqueue_host *ramqueue_get_host(struct ramqueue *, char *);
static struct ramqueue_batch *ramqueue_get_batch(struct ramqueue *,
    struct ramqueue_host *, struct envelope *);


void
ramqueue_init(struct ramqueue *rqueue)
{
	bzero(rqueue, sizeof (*rqueue));
	TAILQ_INIT(&rqueue->queue);
	RB_INIT(&rqueue->hosttree);
	RB_INIT(&rqueue->msgtree);
}

int
ramqueue_is_empty(struct ramqueue *rqueue)
{
	return TAILQ_FIRST(&rqueue->queue) == NULL;
}

int
ramqueue_message_is_empty(struct ramqueue_message *rq_message)
{
	return RB_EMPTY(&rq_message->evptree);
}

int
ramqueue_batch_is_empty(struct ramqueue_batch *rq_batch)
{
	return TAILQ_FIRST(&rq_batch->envelope_queue) == NULL;
}

int
ramqueue_host_is_empty(struct ramqueue_host *rq_host)
{
	return TAILQ_FIRST(&rq_host->batch_queue) == NULL;
}

struct ramqueue_envelope *
ramqueue_next_envelope(struct ramqueue *rqueue)
{
	struct ramqueue_envelope *rq_evp = NULL;

	TAILQ_FOREACH(rq_evp, &rqueue->queue, queue_entry) {
		if (rq_evp->rq_batch->type == D_MDA)
			if (env->sc_opts & SMTPD_MDA_PAUSED)
				continue;
		if (rq_evp->rq_batch->type == D_MTA)
			if (env->sc_opts & SMTPD_MTA_PAUSED)
				continue;
		break;
	}

	return rq_evp;
}

struct ramqueue_envelope *
ramqueue_batch_first_envelope(struct ramqueue_batch *rq_batch)
{
	return TAILQ_FIRST(&rq_batch->envelope_queue);
}

int
ramqueue_load(struct ramqueue *rqueue, time_t *nsched)
{
	time_t			curtm;
	struct envelope		envelope;
	static struct qwalk    *q = NULL;
	struct ramqueue_envelope *rq_evp;
	u_int64_t	evpid;

	log_debug("ramqueue: queue loading in progress");

	if (q == NULL)
		q = qwalk_new(Q_QUEUE, 0);

	while (qwalk(q, &evpid)) {
		curtm = time(NULL);
		if (! queue_envelope_load(Q_QUEUE, evpid, &envelope)) {
			log_debug("ramqueue: moved envelope to /corrupt");
			queue_message_corrupt(Q_QUEUE, evpid_to_msgid(evpid));
			continue;
		}
		if (ramqueue_expire(&envelope, curtm))
			continue;
		ramqueue_insert(rqueue, &envelope, curtm);

		rq_evp = ramqueue_next_envelope(rqueue);
		if (rq_evp == NULL)
			continue;

		if (rq_evp->sched <= *nsched)
			*nsched = rq_evp->sched;

		if (*nsched <= curtm) {
			log_debug("ramqueue: loading interrupted");
			return (0);
		}
	}
	qwalk_close(q);
	q = NULL;
	log_debug("ramqueue: loading over");
	return (1);
}

void
ramqueue_insert(struct ramqueue *rqueue, struct envelope *envelope, time_t curtm)
{
	struct ramqueue_envelope *rq_evp;
	struct ramqueue_envelope *evp;
	struct ramqueue_message  *rq_msg, msgkey;

	msgkey.msgid = evpid_to_msgid(envelope->id);
	rq_msg = RB_FIND(msgtree, &rqueue->msgtree, &msgkey);
	if (rq_msg == NULL) {
		rq_msg = calloc(1, sizeof (*rq_msg));
		if (rq_msg == NULL)
			fatal("calloc");
		rq_msg->msgid = msgkey.msgid;
		RB_INSERT(msgtree, &rqueue->msgtree, rq_msg);
		RB_INIT(&rq_msg->evptree);
		stat_increment(STATS_RAMQUEUE_MESSAGE);
	}

	rq_evp = calloc(1, sizeof (*rq_evp));
	if (rq_evp == NULL)
		fatal("calloc");
	rq_evp->evpid = envelope->id;
	rq_evp->sched = ramqueue_next_schedule(envelope, curtm);
	rq_evp->rq_host = ramqueue_get_host(rqueue, envelope->dest.domain);
	rq_evp->rq_batch = ramqueue_get_batch(rqueue, rq_evp->rq_host, envelope);
	RB_INSERT(evptree, &rq_msg->evptree, rq_evp);
	rq_evp->rq_msg = rq_msg;

	TAILQ_INSERT_TAIL(&rq_evp->rq_batch->envelope_queue, rq_evp,
	    batchqueue_entry);

	/* sorted insert */
	TAILQ_FOREACH(evp, &rqueue->queue, queue_entry) {
		if (evp->sched >= rq_evp->sched) {
			TAILQ_INSERT_BEFORE(evp, rq_evp, queue_entry);
			break;
		}
	}
	if (evp == NULL)
		TAILQ_INSERT_TAIL(&rqueue->queue, rq_evp, queue_entry);

	stat_increment(STATS_RAMQUEUE_ENVELOPE);
}

static int
ramqueue_expire(struct envelope *envelope, time_t curtm)
{
	struct envelope bounce;

	if (curtm - envelope->creation >= envelope->expire) {
		envelope_set_errormsg(envelope,
		    "message expired after sitting in queue for %d days",
		    envelope->expire / 60 / 60 / 24);
		bounce_record_message(envelope, &bounce);
		ramqueue_insert(&env->sc_rqueue, &bounce, time(NULL));
		log_debug("#### %s: queue_envelope_delete: %016" PRIx64,
		    __func__, envelope->id);
		queue_envelope_delete(Q_QUEUE, envelope);
		return 1;
	}
	return 0;
}

static time_t
ramqueue_next_schedule(struct envelope *envelope, time_t curtm)
{
	time_t delay;

	if (envelope->lasttry == 0)
		return curtm;

	delay = SMTPD_QUEUE_MAXINTERVAL;
	
	if (envelope->type == D_MDA ||
	    envelope->type == D_BOUNCE) {
		if (envelope->retry < 5)
			return curtm;
			
		if (envelope->retry < 15)
			delay = (envelope->retry * 60) + arc4random_uniform(60);
	}

	if (envelope->type == D_MTA) {
		if (envelope->retry < 3)
			delay = SMTPD_QUEUE_INTERVAL;
		else if (envelope->retry <= 7) {
			delay = SMTPD_QUEUE_INTERVAL * (1 << (envelope->retry - 3));
			if (delay > SMTPD_QUEUE_MAXINTERVAL)
				delay = SMTPD_QUEUE_MAXINTERVAL;
		}
	}

	if (curtm >= envelope->lasttry + delay)
		return curtm;

	return curtm + delay;
}

static struct ramqueue_host *
ramqueue_get_host(struct ramqueue *rqueue, char *hostname)
{
	struct ramqueue_host *rq_host, key;

	strlcpy(key.hostname, hostname, sizeof(key.hostname));
	rq_host = RB_FIND(hosttree, &rqueue->hosttree, &key);
	if (rq_host == NULL) {
		rq_host = calloc(1, sizeof (*rq_host));
		if (rq_host == NULL)
			fatal("calloc");
		rq_host->h_id = generate_uid();
		strlcpy(rq_host->hostname, hostname, sizeof(rq_host->hostname));
		TAILQ_INIT(&rq_host->batch_queue);
		RB_INSERT(hosttree, &rqueue->hosttree, rq_host);
		stat_increment(STATS_RAMQUEUE_HOST);
	}

	return rq_host;
}

void
ramqueue_put_host(struct ramqueue *rqueue, struct ramqueue_host *host)
{
	TAILQ_INIT(&host->batch_queue);
	RB_INSERT(hosttree, &rqueue->hosttree, host);
}

static struct ramqueue_batch *
ramqueue_get_batch(struct ramqueue *rqueue, struct ramqueue_host *host,
    struct envelope *envelope)
{
	struct ramqueue_batch *rq_batch;

	TAILQ_FOREACH(rq_batch, &host->batch_queue, batch_entry) {
		if (rq_batch->msgid == evpid_to_msgid(envelope->id))
			return rq_batch;
	}

	rq_batch = calloc(1, sizeof (*rq_batch));
	if (rq_batch == NULL)
		fatal("calloc");
	rq_batch->b_id = generate_uid();
	rq_batch->relay = envelope->agent.mta.relay;
	rq_batch->type = envelope->type;
	rq_batch->msgid = evpid_to_msgid(envelope->id);

	TAILQ_INIT(&rq_batch->envelope_queue);
	TAILQ_INSERT_TAIL(&host->batch_queue, rq_batch, batch_entry);

	stat_increment(STATS_RAMQUEUE_BATCH);

	return rq_batch;
}

void
ramqueue_put_batch(struct ramqueue *rqueue, struct ramqueue_batch *rq_batch)
{
	struct ramqueue_host *rq_host;

	TAILQ_INIT(&rq_batch->envelope_queue);
	RB_FOREACH(rq_host, hosttree, &rqueue->hosttree) {
		if (rq_host->h_id == rq_batch->h_id) {
			TAILQ_INSERT_TAIL(&rq_host->batch_queue, rq_batch,
			    batch_entry);
			return;
		}
	}
}

void
ramqueue_remove_batch(struct ramqueue_host *rq_host, struct ramqueue_batch *rq_batch)
{
	TAILQ_REMOVE(&rq_host->batch_queue, rq_batch, batch_entry);
	free(rq_batch);
	stat_decrement(STATS_RAMQUEUE_BATCH);
}

void
ramqueue_remove_host(struct ramqueue *rqueue, struct ramqueue_host *rq_host)
{
	RB_REMOVE(hosttree, &rqueue->hosttree, rq_host);
	free(rq_host);
	stat_decrement(STATS_RAMQUEUE_HOST);
}

void
ramqueue_remove_message(struct ramqueue *rqueue, struct ramqueue_message *rq_msg)
{
	RB_REMOVE(msgtree, &rqueue->msgtree, rq_msg);
	free(rq_msg);
	stat_decrement(STATS_RAMQUEUE_MESSAGE);
}

void
ramqueue_schedule(struct ramqueue *rq, u_int64_t id)
{
	struct ramqueue_message *rq_msg;
	struct ramqueue_envelope *rq_evp;

	/* schedule *all* */
	if (id == 0) {
		TAILQ_FOREACH(rq_evp, &rq->queue, queue_entry) {
			rq_evp->sched = 0;
		}
	}

	/* scheduling by evpid */
	if (id > 0xffffffffL) {
		rq_evp = ramqueue_lookup_envelope(rq, id);
		if (rq_evp == NULL)
			return;
		ramqueue_schedule_envelope(rq, rq_evp);
		return;
	}

	rq_msg = ramqueue_lookup_message(rq, id);
	if (rq_msg == NULL)
		return;

	/* scheduling by msgid */
	RB_FOREACH(rq_evp, evptree, &rq_msg->evptree) {
		ramqueue_schedule_envelope(rq, rq_evp);
	}
}

void
ramqueue_schedule_envelope(struct ramqueue *rq, struct ramqueue_envelope *rq_evp)
{
	rq_evp->sched = 0;
	TAILQ_REMOVE(&rq->queue, rq_evp, queue_entry);
	TAILQ_INSERT_HEAD(&rq->queue, rq_evp, queue_entry);
}

struct ramqueue_envelope *
ramqueue_envelope_by_id(struct ramqueue *rqueue, u_int64_t id)
{
	struct ramqueue_envelope *rq_evp;

	TAILQ_FOREACH(rq_evp, &rqueue->queue, queue_entry) {
		if (rq_evp->evpid == id)
			return rq_evp;
	}

	return NULL;
}

int
ramqueue_host_cmp(struct ramqueue_host *h1, struct ramqueue_host *h2)
{
	return strcmp(h1->hostname, h2->hostname);
}


int
ramqueue_msg_cmp(struct ramqueue_message *m1, struct ramqueue_message *m2)
{
	return (m1->msgid < m2->msgid ? -1 : m1->msgid > m2->msgid);
}

int
ramqueue_evp_cmp(struct ramqueue_envelope *e1, struct ramqueue_envelope *e2)
{
	return (e1->evpid < e2->evpid ? -1 : e1->evpid > e2->evpid);
}

struct ramqueue_host *
ramqueue_lookup_host(struct ramqueue *rq, char *hostname)
{
	struct ramqueue_host hostkey;

	if (strlcpy(hostkey.hostname, hostname, sizeof(hostkey.hostname))
	    >= sizeof(hostkey.hostname))
		fatalx("ramqueue_lookup_host: hostname truncated");

	return RB_FIND(hosttree, &rq->hosttree, &hostkey);
}

struct ramqueue_message *
ramqueue_lookup_message(struct ramqueue *rq, u_int32_t msgid)
{
	struct ramqueue_message  msgkey;

	msgkey.msgid = msgid;
	return RB_FIND(msgtree, &rq->msgtree, &msgkey);
}

struct ramqueue_envelope *
ramqueue_lookup_envelope(struct ramqueue *rq, u_int64_t evpid)
{
	struct ramqueue_envelope  evpkey;
	struct ramqueue_message *rq_msg;

	rq_msg = ramqueue_lookup_message(rq, evpid_to_msgid(evpid));
	if (rq_msg == NULL)
		return NULL;

	evpkey.evpid = evpid;
	return RB_FIND(evptree, &rq_msg->evptree, &evpkey);
}

void
ramqueue_remove_envelope(struct ramqueue *rq, struct ramqueue_envelope *rq_evp)
{
	struct ramqueue_batch *rq_batch;
	struct ramqueue_message *rq_msg;

	rq_msg = rq_evp->rq_msg;
	rq_batch = rq_evp->rq_batch;

	RB_REMOVE(evptree, &rq_msg->evptree, rq_evp);
	TAILQ_REMOVE(&rq_batch->envelope_queue, rq_evp, batchqueue_entry);
	TAILQ_REMOVE(&rq->queue, rq_evp, queue_entry);
	stat_decrement(STATS_RAMQUEUE_ENVELOPE);
	free(rq_evp);
}


RB_GENERATE(hosttree, ramqueue_host, hosttree_entry, ramqueue_host_cmp);
RB_GENERATE(msgtree, ramqueue_message, msgtree_entry, ramqueue_msg_cmp);
RB_GENERATE(evptree, ramqueue_envelope, evptree_entry, ramqueue_evp_cmp);

@


1.30
log
@the ramqueue filling at startup was busted, it would load envelopes one by
one instead of doing it efficiently.

fix runner_timeout() and ramqueue_load() so that at startup smtpd fills the
ramqueue as long as there's no schedulable envelope in it, interrupts
filling if there is and resume once it's scheduled.

bug spotted by Nathanael Rensel, bug fix by me w/ help from eric@@
tested by eric@@ and I
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.29 2012/01/12 22:00:21 gilles Exp $	*/
a86 6
}

struct ramqueue_envelope *
ramqueue_first_envelope(struct ramqueue *rqueue)
{
	return TAILQ_FIRST(&rqueue->queue);
@


1.29
log
@now that we no longer do a stateful iteration on schedule queue, we need
to make ramqueue_next_envelope() aware of pauses in mda/mta. while at it
kill the pausing of bounces since they are reinjected in smtp and end up
paused by the mda/mta cases.

fixes an infinite loop observed by eric@@ when pausing deliveries and
trying to interrupt smtpd while it attempts to fetch next envelope :)

tested by eric@@ and I, ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.28 2012/01/11 22:55:16 gilles Exp $	*/
d136 1
a136 1
			log_debug("failed to load envelope");
d144 6
a149 2
		rq_evp = TAILQ_FIRST(&rqueue->queue);
		*nsched = rq_evp->sched;
d151 1
a151 1
		if (rq_evp->sched <= *nsched) {
@


1.28
log
@remove stateful iteration from ramqueue, if we ever need to reintroduce it
we'll do it, but it isn't used and causes potential bugs

idea by Nathanael Rensel, diff by me, ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.27 2012/01/11 22:40:36 gilles Exp $	*/
d98 13
a110 1
	return TAILQ_FIRST(&rqueue->queue);
a121 1
//	char			path[MAXPATHLEN];
a125 1
//	u_int32_t	msgid;
@


1.27
log
@in ramqueue_schedule(), do not reorder ramqueue envelopes when forcing a
reschedule of the entire queue as that can lead to an infinite loop.

bug spotted and bugfix by Nathanael Rensen, thanks !

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.26 2011/11/15 23:06:39 gilles Exp $	*/
a62 1
	rqueue->current_evp = NULL;
d98 1
a98 5
	if (rqueue->current_evp == NULL)
		rqueue->current_evp = TAILQ_FIRST(&rqueue->queue);
	else
		rqueue->current_evp = TAILQ_NEXT(rqueue->current_evp, queue_entry);
	return rqueue->current_evp;
a452 3

	if (rq_evp == rq->current_evp)
		rq->current_evp = TAILQ_NEXT(rq->current_evp, queue_entry);
@


1.26
log
@Qwalk, our API to linearly walk over the persistent queue, did not take the
queue_backend into account and assumed a filesystem with a specific layout.

This commit does plenty of things:

- make qwalk an abstraction in the queue_backend API, and impose queue
  drivers to implement qwalk_open(), qwalk() and qwalk_close();

- move previous qwalk_open(), qwalk() and qwalk_close() to the fsqueue
  driver since they were fsqueue specific ...

- make qwalk API work with msgid/evpid instead of pathnames since we're
  going to use the queue_backend API to load envelopes by evpid anyway;

- makes smtpd use *solely* the queue_backend API when manipulating the
  queue. pathnames were removed from smtpd.h and moved into the fsqueue
  which means we can now store a queue anywhere ... as long as we write
  the ten functions or so required for a queue driver ;-)

ok eric@@, ok chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.25 2011/11/07 11:14:10 eric Exp $	*/
d355 1
a355 1
			ramqueue_schedule_envelope(rq, rq_evp);
@


1.25
log
@Let the smtpd process handle the enqueueing of offline messages at
startup, rather than playing tricks with the runner. This will allow
further simplifications and improvements in the runner/queue.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.24 2011/10/27 14:32:57 chl Exp $	*/
d115 1
a115 1
	char			path[MAXPATHLEN];
d120 2
a121 2


d126 1
a126 3
		q = qwalk_new(PATH_QUEUE);
	while (qwalk(q, path)) {
		u_int64_t evpid;
d128 1
a129 4

		if ((evpid = filename_to_evpid(basename(path))) == 0)
			continue;

@


1.24
log
@Use PRI{x,d}64 in format strings instead of %llx, %lld or %qd to print {u_,}int64_t or time_t

While there, cast some time_t to int64_t

These will fix build warnings for portable smptd

ok gilles@@ eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.23 2011/10/23 17:12:41 gilles Exp $	*/
a47 1
int ramqueue_load_offline(struct ramqueue *);
a109 22
}

int
ramqueue_load_offline(struct ramqueue *rqueue)
{
	char		 path[MAXPATHLEN];
	static struct qwalk    *q = NULL;

	log_debug("ramqueue: offline queue loading in progress");
	if (q == NULL)
		q = qwalk_new(PATH_OFFLINE);
	while (qwalk(q, path)) {
		imsg_compose_event(env->sc_ievs[PROC_QUEUE],
		    IMSG_PARENT_ENQUEUE_OFFLINE, PROC_PARENT, 0, -1, path,
		    strlen(path) + 1);
		log_debug("ramqueue: offline queue loading interrupted");
		return 0;
	}
	qwalk_close(q);
	q = NULL;
	log_debug("ramqueue: offline queue loading over");
	return 1;
@


1.23
log
@- smtpctl schedule no longer works, instead, use 'smtpctl schedule-id <id>'
- introduce 'smtpctl schedule-all'

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.22 2011/10/23 15:36:53 eric Exp $	*/
d32 1
d237 1
a237 1
		log_debug("#### %s: queue_envelope_delete: %016llx",
@


1.22
log
@a few important fixes:

- use correct endianness when dumping/loading port
- use the right flag set when dumping/loading flags
- keep and use the authmap name when needed, rather than an id that
  might change when smtpd is restarted
- dump/load the authmap name with the envelope
- remove the rule struct from rq_batch as only the relay info is useful

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.21 2011/10/23 13:03:05 gilles Exp $	*/
d378 7
@


1.21
log
@introduce Q_CORRUPT and queue_backend operation to move a message from
schedule queue to corrupt queue upon envelope loading failure.

tested by me, ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.20 2011/10/23 09:30:07 gilles Exp $	*/
d322 1
a322 1
	rq_batch->rule = envelope->rule;
@


1.20
log
@fsqueue no longer stores envelopes by dumping the structure, instead use a
couple of load/dump functions to convert to and from a human readable fmt.
while at it kill struct delivery and merge back its fields to the envelope.

this basically means we shouldn't require users to flush their queues every
time we make a change to struct envelope.

work is not done, but we're at a better state than the binary fsqueue so
we'll improve it in-tree.

has been running on my own box for the last 12 hours or so
ok eric@@, chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.19 2011/09/18 21:37:53 gilles Exp $	*/
d157 3
a159 1
		if (! queue_envelope_load(Q_QUEUE, evpid, &envelope))
d161 1
@


1.19
log
@a single ramqueue message may be shared by many ramqueue envelopes to be
delivered to many ramqueue hosts, therefore storing the rq_host pointer in
the rq_msg envelope is wrong and causes baaaaad behavior.

this commit fixes reliability issues in runner process, experienced and
reported by many
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.18 2011/09/01 19:56:49 eric Exp $	*/
d184 1
a184 1
	msgkey.msgid = evpid_to_msgid(envelope->delivery.id);
d199 1
a199 1
	rq_evp->evpid = envelope->delivery.id;
d201 1
a201 1
	rq_evp->rq_host = ramqueue_get_host(rqueue, envelope->delivery.rcpt.domain);
d227 1
a227 1
	if (curtm - envelope->delivery.creation >= envelope->delivery.expire) {
d230 1
a230 1
		    envelope->delivery.expire / 60 / 60 / 24);
d233 2
d246 1
a246 1
	if (envelope->delivery.lasttry == 0)
d251 3
a253 3
	if (envelope->delivery.type == D_MDA ||
	    envelope->delivery.type == D_BOUNCE) {
		if (envelope->delivery.retry < 5)
d256 2
a257 2
		if (envelope->delivery.retry < 15)
			delay = (envelope->delivery.retry * 60) + arc4random_uniform(60);
d260 2
a261 2
	if (envelope->delivery.type == D_MTA) {
		if (envelope->delivery.retry < 3)
d263 2
a264 2
		else if (envelope->delivery.retry <= 7) {
			delay = SMTPD_QUEUE_INTERVAL * (1 << (envelope->delivery.retry - 3));
d270 1
a270 1
	if (curtm >= envelope->delivery.lasttry + delay)
d311 1
a311 1
		if (rq_batch->msgid == (u_int32_t)(envelope->delivery.id >> 32))
d320 2
a321 2
	rq_batch->type = envelope->delivery.type;
	rq_batch->msgid = envelope->delivery.id >> 32;
@


1.18
log
@Introduce a small set of functions to manage stat counters in a
simpler and hopefully saner way.

ok gilles@@ chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.17 2011/08/30 17:06:01 chl Exp $	*/
a186 1
		log_debug("inserting new message node in msgtree: %d", msgkey.msgid);
a194 1
	rq_msg->rq_host = ramqueue_get_host(rqueue, envelope->delivery.rcpt.domain);
d201 2
a202 1
	rq_evp->rq_batch = ramqueue_get_batch(rqueue, rq_msg->rq_host, envelope);
@


1.17
log
@Call free() into ramqueue_remove_{batch,host,message,envelope}() instead of just after the function call.

While there, also include stats counters into their respective function.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.16 2011/08/26 14:39:47 chl Exp $	*/
d194 1
a194 3
		env->stats->ramqueue.messages++;
		SET_IF_GREATER(env->stats->ramqueue.messages,
		    env->stats->ramqueue.messages_max);
d220 1
a220 3
 	env->stats->ramqueue.envelopes++;
	SET_IF_GREATER(env->stats->ramqueue.envelopes,
	    env->stats->ramqueue.envelopes_max);
d290 1
a290 3
		env->stats->ramqueue.hosts++;
		SET_IF_GREATER(env->stats->ramqueue.hosts,
		    env->stats->ramqueue.hosts_max);
d325 2
a326 3
	env->stats->ramqueue.batches++;
	SET_IF_GREATER(env->stats->ramqueue.batches,
	    env->stats->ramqueue.batches_max);
d350 1
a350 1
	env->stats->ramqueue.batches--;
d358 1
a358 1
	env->stats->ramqueue.hosts--;
d366 1
a366 1
	env->stats->ramqueue.messages--;
d484 1
a484 1
	env->stats->ramqueue.envelopes--;
@


1.16
log
@add missing header needed by time()

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.15 2011/08/17 20:54:16 gilles Exp $	*/
d356 2
d364 2
d372 2
d492 1
@


1.15
log
@- plug a memory leak in runner_remove_envelope()
- cosmetic change
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.14 2011/08/17 20:35:11 gilles Exp $	*/
d36 1
@


1.14
log
@move ramqueue_host pointer from ramqueue_envelope to ramqueue_message.
this allows us to save one pointer from each envelope stored in ram while
still allowing O(1) host lookups by ramqueue_envelope.
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.13 2011/08/17 20:04:43 gilles Exp $	*/
a483 1

@


1.13
log
@- teach smtpctl remove about the new ramqueue structure
- bonus #1: O(log n) removal of envelopes
- bonus #2: removing all envelopes that have the same msgid works again
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.12 2011/08/17 19:36:23 gilles Exp $	*/
d197 1
d204 1
a204 2
	rq_evp->host = ramqueue_get_host(rqueue, envelope->delivery.rcpt.domain);
	rq_evp->batch = ramqueue_get_batch(rqueue, rq_evp->host, envelope);
d206 1
a206 1
	rq_evp->message = rq_msg;
d208 1
a208 1
	TAILQ_INSERT_TAIL(&rq_evp->batch->envelope_queue, rq_evp,
d472 2
a473 2
	struct ramqueue_batch *rq_batch = rq_evp->batch;
	struct ramqueue_message *rq_msg = rq_evp->message;
d477 3
@


1.12
log
@- introduce ramqueue_lookup_{host,message,envelope} to perform lookups in
  the new ramqueue structure
- introduce ramqueue_reschedule() and ramqueue_reschedule_envelope() which
  to reschedule a message or a specific envelope.

O(n) ->  O(log n)  \o/
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.11 2011/08/16 19:02:03 gilles Exp $	*/
a225 16
void
ramqueue_remove(struct ramqueue *rqueue, struct ramqueue_envelope *rq_evp)
{
	struct ramqueue_batch *rq_batch = rq_evp->batch;
	struct ramqueue_message *rq_message = rq_evp->message;

	if (rq_evp == rqueue->current_evp)
		rqueue->current_evp = TAILQ_NEXT(rqueue->current_evp, queue_entry);

	RB_REMOVE(evptree, &rq_message->evptree, rq_evp);
	TAILQ_REMOVE(&rq_batch->envelope_queue, rq_evp, batchqueue_entry);
	TAILQ_REMOVE(&rqueue->queue, rq_evp, queue_entry);

	env->stats->ramqueue.envelopes--;
}

d370 1
a370 1
ramqueue_reschedule(struct ramqueue *rq, u_int64_t id)
d380 1
a380 1
		ramqueue_reschedule_envelope(rq, rq_evp);
d390 1
a390 1
		ramqueue_reschedule_envelope(rq, rq_evp);
d395 1
a395 1
ramqueue_reschedule_envelope(struct ramqueue *rq, struct ramqueue_envelope *rq_evp)
d468 17
@


1.11
log
@add a host-tree and an envelope-tree in the ramqueue, they will be used to
improve scheduling and general ramqueue operations. unused yet
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.10 2011/07/21 23:29:24 gilles Exp $	*/
d386 1
a386 1
ramqueue_reschedule(struct ramqueue *rqueue, u_int64_t id)
d388 1
a389 1
	time_t tm;
d391 12
a402 6
	tm = time(NULL);
	TAILQ_FOREACH(rq_evp, &rqueue->queue, queue_entry) {
		if (id != rq_evp->evpid &&
		    (id <= 0xffffffffLL &&
			evpid_to_msgid(rq_evp->evpid) != id))
			continue;
d404 3
a406 9
		TAILQ_REMOVE(&rqueue->queue, rq_evp, queue_entry);
		rq_evp->sched = 0;
		TAILQ_INSERT_HEAD(&rqueue->queue, rq_evp, queue_entry);

		/* we were scheduling one envelope and found it,
		 * no need to go through the entire queue
		 */
		if (id > 0xffffffffLL)
			break;
d410 8
d450 34
@


1.10
log
@- update smtpctl.8 to reflect reality
- bring back 'smtpctl schedule' and 'smtpctl remove' to life

Things you should know:

The ramqueue data structure is not finished yet and lacks an envelope tree
for evpid lookups. I wanted to wait until I'm done but too many people are
affected by not being able to reschedule envelopes, this is a quick fix.

So right now there's an O(rrible) complexity as both commands will perform
a (possibly aborted) queue scan leading to O(n). I will make that O(log n)
soon.

Also, smtpctl remove no longer supports removing an entire message, I will
fix that very soon too.
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.9 2011/07/19 13:07:07 eric Exp $	*/
d60 2
d72 6
d181 16
d205 2
d230 1
d235 1
d238 1
d379 2
a380 2
int
ramqueue_host_cmp(struct ramqueue_host *h1, struct ramqueue_host *h2)
d382 1
a382 1
	return strcmp(h1->hostname, h2->hostname);
d423 23
a445 1
RB_GENERATE(hosttree, ramqueue_host, host_entry, ramqueue_host_cmp);
@


1.9
log
@fix retry delay calculation

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.8 2011/05/16 21:05:52 gilles Exp $	*/
d356 38
d395 1
@


1.8
log
@murder struct path and make sure smtpd uses simpler structures that do not
bring a shitload of unnecessary information everywhere. this required many
parts of smtpd to be refactored and more specifically envelope expansion.

in the process lots of code got simplified, and the envelope expansion code
has been isolated to lka_session.c with some longstanding bugs fixed.

Diff has been tested by many with no major regression reported.
armani@@ spotted a bug in a setup where a domain is listed a both primary
and virtual, I will fix that in-tree as it's becoming painful to maintain
this diff out.
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.7 2011/05/01 12:57:11 eric Exp $	*/
d249 1
a249 1
	if (envelope->delivery.type == D_MDA) {
@


1.7
log
@the smtpd env is meant to be global, so do not pass it all around.

discussed with and ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.6 2011/04/17 13:36:07 gilles Exp $	*/
d177 1
a177 1
	rq_evp->evpid = envelope->evpid;
d179 1
a179 1
	rq_evp->host = ramqueue_get_host(rqueue, envelope->recipient.domain);
d218 2
a219 2
	if (curtm - envelope->creation >= envelope->expire) {
		message_set_errormsg(envelope,
d221 1
a221 1
		    envelope->expire / 60 / 60 / 24);
d235 1
a235 1
	if (envelope->lasttry == 0)
d239 4
a242 4

	if (envelope->type == T_MDA_MESSAGE ||
	    envelope->type == T_BOUNCE_MESSAGE) {
		if (envelope->retry < 5)
d245 2
a246 2
		if (envelope->retry < 15)
			delay = (envelope->retry * 60) + arc4random_uniform(60);
d249 2
a250 2
	if (envelope->type == T_MTA_MESSAGE) {
		if (envelope->retry < 3)
d252 2
a253 2
		else if (envelope->retry <= 7) {
			delay = SMTPD_QUEUE_INTERVAL * (1 << (envelope->retry - 3));
d259 1
a259 1
	if (curtm >= envelope->lasttry + delay)
d302 1
a302 1
		if (rq_batch->msgid == (u_int32_t)(envelope->evpid >> 32))
d310 4
a313 3
	rq_batch->type = envelope->type;
	rq_batch->rule = envelope->recipient.rule;
	rq_batch->msgid = envelope->evpid >> 32;
@


1.6
log
@cleanups, cosmethic changes, functions that should be static are now static
no functionnal change
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.5 2011/04/17 11:39:23 gilles Exp $	*/
d48 1
a48 1
static int ramqueue_expire(struct smtpd *, struct envelope *, time_t);
d56 1
a56 1
ramqueue_init(struct smtpd *env, struct ramqueue *rqueue)
a59 1
	rqueue->env = env;
a106 1
	struct smtpd	*env = rqueue->env;
d148 1
a148 2
		if (! queue_envelope_load(rqueue->env, Q_QUEUE,
			evpid, &envelope))
d150 1
a150 1
		if (ramqueue_expire(rqueue->env, &envelope, curtm))
d195 3
a197 3
	rqueue->env->stats->ramqueue.envelopes++;
	SET_IF_GREATER(rqueue->env->stats->ramqueue.envelopes,
	    rqueue->env->stats->ramqueue.envelopes_max);
d210 1
a210 1
	rqueue->env->stats->ramqueue.envelopes--;
d214 1
a214 1
ramqueue_expire(struct smtpd *env, struct envelope *envelope, time_t curtm)
d222 1
a222 1
		bounce_record_message(env, envelope, &bounce);
d224 1
a224 1
		queue_envelope_delete(env, Q_QUEUE, envelope);
d280 3
a282 3
		rqueue->env->stats->ramqueue.hosts++;
		SET_IF_GREATER(rqueue->env->stats->ramqueue.hosts,
		    rqueue->env->stats->ramqueue.hosts_max);
d316 3
a318 3
	rqueue->env->stats->ramqueue.batches++;
	SET_IF_GREATER(rqueue->env->stats->ramqueue.batches,
	    rqueue->env->stats->ramqueue.batches_max);
@


1.5
log
@a structure describing an envelope should be called struct envelope, not
struct message ...
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.4 2011/04/15 17:01:05 gilles Exp $	*/
d41 11
a51 6
int	ramqueue_expire(struct smtpd *, struct envelope *, time_t);
void	ramqueue_insert(struct ramqueue *, struct envelope *, time_t);
time_t	ramqueue_next_schedule(struct envelope *, time_t);
int	ramqueue_host_cmp(struct ramqueue_host *, struct ramqueue_host *);
struct ramqueue_host *ramqueue_get_host(struct ramqueue *, char *);
struct ramqueue_batch *ramqueue_get_batch(struct ramqueue *,
a52 3
void	ramqueue_put_host(struct ramqueue *, struct ramqueue_host *);
void	ramqueue_put_batch(struct ramqueue *, struct ramqueue_batch *);
int	ramqueue_load_offline(struct ramqueue *);
a53 2
u_int32_t	filename_to_msgid(char *);
u_int64_t	filename_to_evpid(char *);
d216 1
a216 1
int
d233 1
a233 1
time_t
d268 1
a268 1
struct ramqueue_host *
d298 1
a298 1
struct ramqueue_batch *
@


1.4
log
@kill message_id and message_uid

smtpd now has an evpid associated to each delivery message, the evpid is an
u_int64_t where the upper 32 bits are the msgid, and the 32 bits are the
envelope unique identifier for that message. this results in lots of space
saved in both disk-based and ram-based queues, but also simplifies a lot of
code.

change has been stressed on my desktop, and has ran on my MX for the entire
afternoon without a regression.
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.3 2011/04/14 22:36:09 gilles Exp $	*/
d41 3
a43 3
int	ramqueue_expire(struct smtpd *, struct message *, time_t);
void	ramqueue_insert(struct ramqueue *, struct message *, time_t);
time_t	ramqueue_next_schedule(struct message *, time_t);
d47 1
a47 1
    struct ramqueue_host *, struct message *);
d132 1
a132 1
	struct message		envelope;
d172 1
a172 1
ramqueue_insert(struct ramqueue *rqueue, struct message *envelope, time_t curtm)
d217 1
a217 1
ramqueue_expire(struct smtpd *env, struct message *envelope, time_t curtm)
d219 1
a219 1
	struct message bounce;
d234 1
a234 1
ramqueue_next_schedule(struct message *envelope, time_t curtm)
d300 1
a300 1
    struct message *envelope)
@


1.3
log
@- implement fsqueue_message_create() and fsqueue_message_commit()
- change a few prototypes to allow bounce messages to use the
	queue_backend API until it gets merged in
- kill functions of the queue API that have been deprecated
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.2 2011/04/14 20:11:08 gilles Exp $	*/
d52 2
d143 2
d147 3
d151 1
a151 1
			basename(path), &envelope))
d180 1
a180 1
	strlcpy(rq_evp->id, envelope->message_uid, sizeof(rq_evp->id));
d305 1
a305 1
		if (strcmp(rq_batch->m_id, envelope->message_id) == 0)
d315 1
a315 1
	strlcpy(rq_batch->m_id, envelope->message_id, sizeof(rq_batch->m_id));
@


1.2
log
@fsqueue queue backend will implement a filesystem queue:
- fsqueue->setup() performs the queue initialization;
- fsqueue->message() controls messages;
- fsqueue->envelope() controls envelopes;

This commit brings the following to fsbackend:
fsqueue_setup(), fsqueue_message_delete(), fsqueue_envelope_load(),
fsqueue_envelope_update(), fsqueue_envelope_delete().

It also makes smtpd use the queue_backend API for these operations.
@
text
@d1 1
a1 1
/*	$OpenBSD: ramqueue.c,v 1.1 2011/04/13 20:53:18 gilles Exp $	*/
d218 1
a218 1
		bounce_record_message(envelope, &bounce);
@


1.1
log
@following an idea from jacekm@@, smtpd now uses a ram-queue instead of doing
a continuous walk on the disk-queue. the implementation differs from what
jacekm@@ commited (and I backed out) a while ago in that it uses a queue and
a host tree required for upcoming features.

code will be improved in tree, it requires changes to be done in queue and
bounce API, I just wanted to commit a working version first ...

tested by todd@@ and I
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d143 2
a144 1
		if (! queue_load_envelope(&envelope, basename(path)))
d220 1
a220 1
		queue_remove_envelope(envelope);
@

