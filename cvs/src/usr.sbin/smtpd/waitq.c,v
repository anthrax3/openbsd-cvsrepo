head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.8
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.10
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.4
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.8
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2015.01.20.17.37.54;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	ZBTFreARDSMmzOIV;

1.4
date	2013.05.24.17.03.14;	author eric;	state Exp;
branches;
next	1.3;

1.3
date	2013.01.26.09.37.24;	author gilles;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.23.10.55.25;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.07.17.21.37;	author eric;	state Exp;
branches;
next	;


desc
@@


1.5
log
@use <limits.h> comprehensively.  For now try to push <> includes to
each .c file, and out of the .h files.  To avoid overinclude.
ok gilles, in principle.  If this has been done right, -portable should
become easier to maintain.
@
text
@/*	$OpenBSD: waitq.c,v 1.4 2013/05/24 17:03:14 eric Exp $	*/

/*
 * Copyright (c) 2012 Eric Faurot <eric@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/uio.h>

#include <imsg.h>
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#include "smtpd.h"

struct waiter {
	TAILQ_ENTRY(waiter)	 entry;
	void			(*cb)(void *, void *, void *);
	void			*arg;
};

struct waitq {
	SPLAY_ENTRY(waitq)	 entry;
	void			*tag;
	TAILQ_HEAD(, waiter)	 waiters;
};

static int waitq_cmp(struct waitq *, struct waitq *);

SPLAY_HEAD(waitqtree, waitq);
SPLAY_PROTOTYPE(waitqtree, waitq, entry, waitq_cmp);

static struct waitqtree waitqs = SPLAY_INITIALIZER(&waitqs);

static int
waitq_cmp(struct waitq *a, struct waitq *b)
{
	if (a->tag < b->tag)
		return (-1);
	if (a->tag > b->tag)
		return (1);
	return (0);
}

SPLAY_GENERATE(waitqtree, waitq, entry, waitq_cmp);

int
waitq_wait(void *tag, void (*cb)(void *, void *, void *), void *arg)
{
	struct waitq	*wq, key;
	struct waiter	*w;

	key.tag = tag;
	wq = SPLAY_FIND(waitqtree, &waitqs, &key);
	if (wq == NULL) {
		wq = xmalloc(sizeof *wq, "waitq_wait");
		wq->tag = tag;
		TAILQ_INIT(&wq->waiters);
		SPLAY_INSERT(waitqtree, &waitqs, wq);
	}

	w = xmalloc(sizeof *w, "waitq_wait");
	w->cb = cb;
	w->arg = arg;
	TAILQ_INSERT_TAIL(&wq->waiters, w, entry);

	return (w == TAILQ_FIRST(&wq->waiters));
}

void
waitq_run(void *tag, void *result)
{
	struct waitq	*wq, key;
	struct waiter	*w;

	key.tag = tag;
	wq = SPLAY_FIND(waitqtree, &waitqs, &key);
	SPLAY_REMOVE(waitqtree, &waitqs, wq);

	while ((w = TAILQ_FIRST(&wq->waiters))) {
		TAILQ_REMOVE(&wq->waiters, w, entry);
		w->cb(tag, w->arg, result);
		free(w);
	}
	free(wq);
}
@


1.4
log
@sync with OpenSMTPD 5.3.2

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: waitq.c,v 1.3 2013/01/26 09:37:24 gilles Exp $	*/
d20 1
d28 1
@


1.3
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: waitq.c,v 1.1 2012/10/07 17:21:37 eric Exp $	*/
d20 1
a21 1
#include <sys/queue.h>
@


1.2
log
@knf

ok gilles@@
@
text
@@


1.1
log
@Implement a simple wait queue API.  The idea is to allow multiple "waiters"
to wait on the same "tag" for a deferred result.

A waiter is a callback and a void *argument.  The first waiter (the one for
which waitq_wait() returns true) is supposed to run some code that leads to
waitq_run() being run, which will destroy that waitq and call all callbacks
in turn.

Not used at the moment, but will be soon.

ok gilles@@ chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tree.c,v 1.1 2012/08/07 21:47:58 eric Exp $	*/
d94 1
a94 1
	while((w = TAILQ_FIRST(&wq->waiters))) {
@

