head	1.44;
access;
symbols
	OPENBSD_6_1:1.44.0.2
	OPENBSD_6_1_BASE:1.44
	OPENBSD_6_0:1.44.0.4
	OPENBSD_6_0_BASE:1.44
	OPENBSD_5_9:1.43.0.2
	OPENBSD_5_9_BASE:1.43
	OPENBSD_5_8:1.37.0.6
	OPENBSD_5_8_BASE:1.37
	OPENBSD_5_7:1.37.0.2
	OPENBSD_5_7_BASE:1.37
	OPENBSD_5_6:1.36.0.4
	OPENBSD_5_6_BASE:1.36
	OPENBSD_5_5:1.35.0.2
	OPENBSD_5_5_BASE:1.35
	OPENBSD_5_4:1.33.0.2
	OPENBSD_5_4_BASE:1.33
	OPENBSD_5_3:1.30.0.2
	OPENBSD_5_3_BASE:1.30
	OPENBSD_5_2:1.22.0.4
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.2
	OPENBSD_5_0:1.17.0.2
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.8.0.4
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6;
locks; strict;
comment	@# @;


1.44
date	2016.03.30.06.38.46;	author jmc;	state Exp;
branches;
next	1.43;
commitid	LN9ijdk9SEnzWAbM;

1.43
date	2015.12.28.13.26.44;	author benno;	state Exp;
branches;
next	1.42;
commitid	RXYDAZD3ExWtah2P;

1.42
date	2015.12.09.08.13.28;	author sunil;	state Exp;
branches;
next	1.41;
commitid	mdKejJsOCwpIvYJ6;

1.41
date	2015.12.07.12.29.19;	author sunil;	state Exp;
branches;
next	1.40;
commitid	NjgUX1eM1Q27CUqm;

1.40
date	2015.12.01.09.58.38;	author gilles;	state Exp;
branches;
next	1.39;
commitid	enSUyU8BMzyT1aW7;

1.39
date	2015.10.09.14.37.38;	author gilles;	state Exp;
branches;
next	1.38;
commitid	Av5gnXBLeZb6m0W2;

1.38
date	2015.10.06.00.30.32;	author deraadt;	state Exp;
branches;
next	1.37;
commitid	PDerChiZfmP0Ac2f;

1.37
date	2014.09.29.20.56.47;	author jmc;	state Exp;
branches;
next	1.36;
commitid	5PQJVhTJoS3UXxLR;

1.36
date	2014.04.01.23.14.25;	author fgsch;	state Exp;
branches;
next	1.35;

1.35
date	2014.01.18.05.54.51;	author martynas;	state Exp;
branches;
next	1.34;

1.34
date	2013.10.26.20.32.48;	author eric;	state Exp;
branches;
next	1.33;

1.33
date	2013.07.19.20.37.08;	author eric;	state Exp;
branches;
next	1.32;

1.32
date	2013.07.19.13.41.23;	author eric;	state Exp;
branches;
next	1.31;

1.31
date	2013.05.24.17.03.14;	author eric;	state Exp;
branches;
next	1.30;

1.30
date	2013.01.26.09.37.24;	author gilles;	state Exp;
branches;
next	1.29;

1.29
date	2012.10.07.15.46.38;	author chl;	state Exp;
branches;
next	1.28;

1.28
date	2012.09.01.16.09.15;	author gilles;	state Exp;
branches;
next	1.27;

1.27
date	2012.08.29.16.26.17;	author gilles;	state Exp;
branches;
next	1.26;

1.26
date	2012.08.26.18.56.08;	author gilles;	state Exp;
branches;
next	1.25;

1.25
date	2012.08.26.13.38.43;	author gilles;	state Exp;
branches;
next	1.24;

1.24
date	2012.08.25.23.35.09;	author chl;	state Exp;
branches;
next	1.23;

1.23
date	2012.08.18.18.18.23;	author gilles;	state Exp;
branches;
next	1.22;

1.22
date	2012.01.11.22.24.37;	author gilles;	state Exp;
branches;
next	1.21;

1.21
date	2011.12.14.18.42.27;	author eric;	state Exp;
branches;
next	1.20;

1.20
date	2011.11.02.12.01.20;	author eric;	state Exp;
branches;
next	1.19;

1.19
date	2011.10.23.09.30.07;	author gilles;	state Exp;
branches;
next	1.18;

1.18
date	2011.09.01.19.56.49;	author eric;	state Exp;
branches;
next	1.17;

1.17
date	2011.04.14.20.11.08;	author gilles;	state Exp;
branches;
next	1.16;

1.16
date	2010.10.09.22.05.35;	author gilles;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.01.23.06.25;	author jacekm;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.01.19.47.09;	author jacekm;	state Exp;
branches;
next	1.13;

1.13
date	2010.05.31.23.38.56;	author jacekm;	state Exp;
branches;
next	1.12;

1.12
date	2010.05.26.16.44.32;	author nicm;	state Exp;
branches;
next	1.11;

1.11
date	2009.12.23.17.16.03;	author jacekm;	state Exp;
branches;
next	1.10;

1.10
date	2009.09.15.16.50.07;	author jacekm;	state Exp;
branches;
next	1.9;

1.9
date	2009.08.27.11.37.30;	author jacekm;	state Exp;
branches;
next	1.8;

1.8
date	2009.03.23.15.27.39;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2009.03.16.22.03.42;	author jacekm;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.29.12.43.25;	author jacekm;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.27.22.54.01;	author gilles;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.27.22.48.29;	author gilles;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.21.13.06.43;	author jacekm;	state Exp;
branches;
next	1.2;

1.2
date	2008.12.06.02.44.08;	author gilles;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.05.03.28.37;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.44
log
@for some time now mandoc has not required MLINKS to function
correctly - logically complete that now by removing MLINKS from base;

authors need only to ensure there is an entry in NAME for any function/
util being added. MLINKS will still work, and remain for perl to ease
upgrades;

ok nicm (curses) bcook (ssl)
ok schwarze, who provided a lot of feedback and assistance
ok tb natano jung
@
text
@#	$OpenBSD: Makefile,v 1.43 2015/12/28 13:26:44 benno Exp $

.PATH:		${.CURDIR}/..

PROG=	smtpctl
BINOWN=	root
BINGRP=	_smtpq

BINMODE?=2555

BINDIR=	/usr/sbin
MAN=	smtpctl.8 aliases.5 forward.5 makemap.8 newaliases.8

CFLAGS+=	-fstack-protector-all
CFLAGS+=	-I${.CURDIR}/..
CFLAGS+=	-Wall -Wstrict-prototypes -Wmissing-prototypes
CFLAGS+=	-Wmissing-declarations
CFLAGS+=	-Wshadow -Wpointer-arith -Wcast-qual
CFLAGS+=	-Wsign-compare
CFLAGS+=	-Werror-implicit-function-declaration
CFLAGS+=	-DNO_IO

SRCS=	enqueue.c
SRCS+=	parser.c
SRCS+=	log.c
SRCS+=	envelope.c
SRCS+=	crypto.c
SRCS+=	queue_backend.c
SRCS+=	queue_fs.c
SRCS+=	smtpctl.c
SRCS+=	util.c
SRCS+=	compress_backend.c
SRCS+=	compress_gzip.c
SRCS+=	to.c
SRCS+=	expand.c
SRCS+=	tree.c
SRCS+=	dict.c
SRCS+=	aliases.c
SRCS+=	limit.c
SRCS+=	makemap.c
SRCS+=	parse.y
SRCS+=	mailaddr.c
SRCS+=	table.c
SRCS+=	table_static.c
SRCS+=	table_db.c
SRCS+=	table_getpwnam.c
SRCS+=	table_proc.c

LDADD+=	-lutil -lz -lcrypto
DPADD+=	${LIBUTIL} ${LIBZ} ${LIBCRYPTO}
.include <bsd.prog.mk>
@


1.43
log
@build smtpd and smtpctl with -Werror-implicit-function-declaration
ok tedu@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.42 2015/12/09 08:13:28 sunil Exp $
a12 1
MLINKS=	smtpctl.8 mailq.8
@


1.42
log
@Install aliases(5), forward(5), makemap(8) and newaliases(8) manpages
that got accidentally removed while merging makemap(8) into smtpctl(8).

Spotted by Nathanael Rensen.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.41 2015/12/07 12:29:19 sunil Exp $
d21 1
@


1.41
log
@Merge makemap(8) into smtpctl(8).

Ok gilles@@, jung@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.40 2015/12/01 09:58:38 gilles Exp $
d12 1
a12 1
MAN=	smtpctl.8
@


1.40
log
@cleanup Makefile
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.39 2015/10/09 14:37:38 gilles Exp $
d38 10
@


1.39
log
@turn our local enqueuer setgid _smtpq and restrict access to offline queue,
the enqueuer will revoke group and regain real gid right after mkstemp.

this would have prevented the symlink/hardlink attacks against offline, and
it will avoid having to deal with new ways users can mess with it.

ok eric@@, ok millert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.38 2015/10/06 00:30:32 deraadt Exp $
d15 1
a15 1
CFLAGS+=   -fstack-protector-all
d23 15
a37 5
SRCS=	enqueue.c parser.c log.c envelope.c crypto.c
SRCS+=	queue_backend.c queue_fs.c
SRCS+=	smtpctl.c util.c
SRCS+=	compress_backend.c compress_gzip.c
SRCS+=	to.c expand.c tree.c dict.c
@


1.38
log
@The performance hit for -fstack-protector-all is worth it here.
ok gilles
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.37 2014/09/29 20:56:47 jmc Exp $
d7 1
d9 1
a9 1
BINMODE?=555
@


1.37
log
@lightly document mailq; ok gilles
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.36 2014/04/01 23:14:25 fgsch Exp $
d14 1
@


1.36
log
@Remove -ggdb -g3, this shouldn't be here
Requested by deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.35 2014/01/18 05:54:51 martynas Exp $
d12 1
@


1.35
log
@Remove -Wbounded:  it is now the compiler default.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.34 2013/10/26 20:32:48 eric Exp $
d13 1
a13 1
CFLAGS+=	-g3 -ggdb -I${.CURDIR}/..
@


1.34
log
@Simplify code for loading and dumping envelopes.  Makes it much easier
to deal with automatic upgrade between envelope versions at load time.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.33 2013/07/19 20:37:08 eric Exp $
d17 1
a17 1
CFLAGS+=	-Wsign-compare -Wbounded
@


1.33
log
@Assorted queue improvements:
- cleanup the internal queue backend API and get rid of the QOP_* thing.
- implement a queue_proc backend
- rename queue_fsqueue.c to queue_fs
- enable support for queue encryption
- add an envelope cache
- better logging and error reporting
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.32 2013/07/19 13:41:23 eric Exp $
d24 1
a24 1
SRCS+=	to.c expand.c tree.c
@


1.32
log
@New implementation for smtpctl and the command line parser.  Allows
richer syntax, and makes the code way simpler to follow and extend
with new commands.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.31 2013/05/24 17:03:14 eric Exp $
d21 1
a21 1
SRCS+=	queue_backend.c queue_fsqueue.c
@


1.31
log
@sync with OpenSMTPD 5.3.2

ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.29 2012/10/07 15:46:38 chl Exp $
d20 1
a20 1
SRCS=	enqueue.c parser.c log.c envelope.c
d26 2
a27 2
LDADD+=	-lutil -lz
DPADD+=	${LIBUTIL} ${LIBZ}
@


1.30
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@@


1.29
log
@convert iobuf_queue()'s to iobuf_fqueue(). (idea from gilles@@)
introduce iobuf_xinit() and iobuf_xfqueue(). (idea from eric@@)

ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.28 2012/09/01 16:09:15 gilles Exp $
d24 1
@


1.28
log
@- remove crypto_backend
- remove support for encrypted queue, it will be reintroduced later after
  pouring more thinking into it

if you had it enabled, flush your queue before updating
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.27 2012/08/29 16:26:17 gilles Exp $
d18 1
@


1.27
log
@Introduce the crypto_backend API and provide support for... encrypted queue
using the new API. By default, OpenSMTPD does not provide queue encryption,
but it can be enabled with "queue encryption [args]" and will transparently
encrypt/decrypt envelopes/messages as they hit the queue.

By default, it will use Blowfish in CBC mode with a different random IV for
each envelope and message. User provided key is expanded using sha256 but a
different cipher and digest may be specified in smtpd.conf

Queue encryption is compatible with compression and if both options are set
it will do them in correct order and transparently.

tested by chl@@, a few users and myself
ok chl@@ and I
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.26 2012/08/26 18:56:08 gilles Exp $
d22 1
a22 1
SRCS+=	compress_backend.c compress_gzip.c crypto_backend.c
d24 2
a25 2
LDADD+=	-lutil -lz -lcrypto
DPADD+=	${LIBUTIL} ${LIBZ} ${LIBCRYPTO}
@


1.26
log
@missing DPADD ... sorry
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.25 2012/08/26 13:38:43 gilles Exp $
d22 1
a22 1
SRCS+=	compress_backend.c compress_gzip.c
d24 2
a25 2
LDADD+=	-lutil -lz
DPADD+=	${LIBUTIL} ${LIBZ}
@


1.25
log
@- use the same compression algorithm, gzip, for message file and envelopes
- rename compress_zlib.c to compress_gzip.c

with this commit it is possible to inspect a compressed queue with gzcat :)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.24 2012/08/25 23:35:09 chl Exp $
d22 1
a22 1
SRCS+=	compress_backend.c compress_gzip.c encrypt.c
d25 1
a25 1
DPADD+=	${LIBUTIL} ${LIBEVENT}
@


1.24
log
@Add compress_backend, allowing compression of messages and envelopes in the queue.
To use it, just add "queue compress" in smtpd.conf. For now, only zlib is used.

lots of feedback from eric@@ and gilles@@

ok eric@@ gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.23 2012/08/18 18:18:23 gilles Exp $
d22 1
a22 1
SRCS+=	compress_backend.c compress_zlib.c encrypt.c
@


1.23
log
@- introduce stat_backend, an API for pluggable statistic backends
  > statistics are no longer static structures in shared memory
  > statistics are only set, smtpd never uses them in its logic
  > each statistic is a key/value where key can be any (dynamic) string
- convert all uses of the former API to use the new one
- implement stat_ramstat that keeps non-persistent stats in ram structure

ok eric@@, ok chl@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.22 2012/01/11 22:24:37 gilles Exp $
d22 1
d24 1
a24 1
LDADD+=	-lutil
@


1.22
log
@implement an envelope_ascii API that's not tied to a specific queue_backend
simplify queue_fsqueue
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.21 2011/12/14 18:42:27 eric Exp $
d21 1
a21 1
SRCS+=	smtpctl.c stats.c util.c
@


1.21
log
@move show_queue() and related functions from queue_shared.c
to smtpctl.c

ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.20 2011/11/02 12:01:20 eric Exp $
d19 2
a20 2
SRCS=	enqueue.c parser.c log.c
SRCS+=	queue_backend.c queue_fsqueue.c queue_fsqueue_ascii.c
@


1.20
log
@simpler implementation of smtpctl local enqueuer that does not need libevent.

ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.19 2011/10/23 09:30:07 gilles Exp $
d20 1
a20 1
SRCS+=	queue_backend.c queue_fsqueue.c queue_fsqueue_ascii.c queue_shared.c
@


1.19
log
@fsqueue no longer stores envelopes by dumping the structure, instead use a
couple of load/dump functions to convert to and from a human readable fmt.
while at it kill struct delivery and merge back its fields to the envelope.

this basically means we shouldn't require users to flush their queues every
time we make a change to struct envelope.

work is not done, but we're at a better state than the binary fsqueue so
we'll improve it in-tree.

has been running on my own box for the last 12 hours or so
ok eric@@, chl@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.18 2011/09/01 19:56:49 eric Exp $
a17 1
CFLAGS+=	-DCLIENT_NO_SSL
d19 5
a23 2
SRCS=	smtpctl.c parser.c log.c enqueue.c queue_shared.c util.c client.c queue_backend.c queue_fsqueue.c queue_fsqueue_ascii.c stats.c
LDADD+=	-lutil -levent
@


1.18
log
@Introduce a small set of functions to manage stat counters in a
simpler and hopefully saner way.

ok gilles@@ chl@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2011/04/14 20:11:08 gilles Exp $
d20 1
a20 1
SRCS=	smtpctl.c parser.c log.c enqueue.c queue_shared.c util.c client.c queue_backend.c queue_fsqueue.c stats.c
@


1.17
log
@fsqueue queue backend will implement a filesystem queue:
- fsqueue->setup() performs the queue initialization;
- fsqueue->message() controls messages;
- fsqueue->envelope() controls envelopes;

This commit brings the following to fsbackend:
fsqueue_setup(), fsqueue_message_delete(), fsqueue_envelope_load(),
fsqueue_envelope_update(), fsqueue_envelope_delete().

It also makes smtpd use the queue_backend API for these operations.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2010/10/09 22:05:35 gilles Exp $
d20 1
a20 1
SRCS=	smtpctl.c parser.c log.c enqueue.c queue_shared.c util.c client.c queue_backend.c queue_fsqueue.c
@


1.16
log
@backout the "new" queue code commited 4 months ago. it has many good ideas,
is way more optimized than what we had earlier and there's definitely stuff
we want to keep, however it is early optimization that doesn't account for
many features and makes them hard (if not impossible) to write without
ugly workarounds that ruin the purpose of the optimizations.

the backout goes to 30 May's right before the commit and catches up on all
the non-queue related commits that happened since then.

i'll work on reintroducing the ideas from this queue when the basic
features we expect from a MTA are implemented.

suggested on tech@@ about a week ago, no objections, several "please make
smtpd move forward" mails from hackers and tech readers.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2010/05/26 16:44:32 nicm Exp $
d20 1
a20 1
SRCS=	smtpctl.c parser.c log.c enqueue.c queue_shared.c util.c client.c
@


1.15
log
@new queue, again; gcc2 compile tested by deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2010/05/31 23:38:56 jacekm Exp $
d20 1
a20 1
SRCS=	smtpctl.c parser.c log.c enqueue.c queue_backend.c util.c client.c
@


1.14
log
@New queue doesn't compile on gcc2, back out.  Spotted by deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2010/05/26 16:44:32 nicm Exp $
d20 1
a20 1
SRCS=	smtpctl.c parser.c log.c enqueue.c queue_shared.c util.c client.c
@


1.13
log
@Rewrite entire queue code.

Major goals:

1) Fix bad performance caused by the runner process doing full queue
read in 1s intervals.  My Soekris can now happily accept >50 msg/s
while having multi-thousand queue; before, one hundred queue would
bring the system to its knees.

2) Introduce Qmail-like scheduler that doesn't write as much to the
disk so that it needs less code for servicing error conditions,
which in some places can be tricky to get right.

3) Introduce separation between the scheduler and the backend; these
two queue aspects shouldn't be too tied too each other.  This means
that eg. storing queue in SQL requires rewrite of just queue_backend.c.

4) Make on-disk queue format architecture independent, and more
easily extensible, to reduce number of flag days in the future.

Minor goals:

ENOSPC no longer prevents delivery attempts, fixed session limiting
for relayed mail, improved batching of "relay via" mails, human-readable
mailq output, "show queue raw" command, clearer logging, sending
of single bounce about multiple recipients, exact delay= computation,
zero delay between deliveries while within session limit (currently
1s delay between re-scheduling is enforced), mta no longer requests
content fd, corrected session limit for bounce submissions, tiny
<100B queue files instead of multi-KB, detect loops before accepting
mail, reduce traffic on imsg channels by killing enormous struct
submit_status.
@
text
@d20 1
a20 1
SRCS=	smtpctl.c parser.c log.c enqueue.c queue_backend.c util.c client.c
@


1.12
log
@Move imsg into libutil and add a man page.

Minor bump for libutil.

Previous versions of this diff and man page looked at by various people.

"you should just commit" deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2009/12/23 17:16:03 jacekm Exp $
d20 1
a20 1
SRCS=	smtpctl.c parser.c log.c enqueue.c queue_shared.c util.c client.c
@


1.11
log
@Implementation of RFC 2920 PIPELINING extension, client side only for now.

This restructures the client_* API internals significantly.  The code becomes
pipelining in nature.  All SMTP commands are put on the output queue and
dequeued as quickly as possible.  Once dequeued, they're moved to the receive
queue so that replies can be matched with previous commands.

Dequeuing commands from the output queue halts when the count of commands
currently in-pipeline (``cmdi'') is equal to the command send window (``cmdw'').
There are three cmdw values useful in practice:

0               clear pipeline, ie. inhibit all future sends
1               disable pipelining, ie. use old ``one-request-one-reply`` mode
SIZE_T_MAX      enable pipelining, ie. dequeue as many commands as possible

At the beginning of session cmdw is 1.  When it is found that peer supports
PIPELINING, it grows to SIZE_T_MAX.  After dequeing DATA it is again 1.  After
sending QUIT it is 0.

Each command dequeued from the output queue becomes a buf in a msgbuf.  The act
of combining multiple commands into a single send operation did not need to be
implemented: buf_write() already combines bufs using iovec and sends them at
once using sendmsg(2).

Tested by todd@@ and oga@@

"looks good" to gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2009/09/15 16:50:07 jacekm Exp $
d20 1
a20 2
SRCS=	smtpctl.c parser.c buffer.c imsg.c log.c enqueue.c		\
	queue_shared.c util.c client.c
@


1.10
log
@Extend SMTP client_* API to support SSL+AUTH, and use it in the mta
process to relay mails.  ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2009/08/27 11:37:30 jacekm Exp $
d22 2
a23 2
LDADD+=	-lutil
DPADD+=	${LIBUTIL}
@


1.9
log
@Implement client side of the SMTP protocol in a library-like module.
Make bounce code and /usr/sbin/sendmail interface use this new API.
The mta process continues to use its own implementation, but
eventually will be switched to use this shared module.

Buffer routines are taken from buffer.c rather than from evbuffer.
This is one step forward to using a single buffer API across the
program.

"it looks sexy" gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2009/03/23 15:27:39 deraadt Exp $
d18 1
@


1.8
log
@repair library use.  this was detected on the vax, a nice static linking
architecture.  it was silently creating broken code on other architectures.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2009/03/16 22:03:42 jacekm Exp $
d19 2
a20 1
SRCS=	smtpctl.c parser.c buffer.c imsg.c log.c enqueue.c queue_shared.c util.c
@


1.7
log
@smtpctl goes to usr.sbin; ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2009/01/29 12:43:25 jacekm Exp $
d20 2
a21 1
LDFLAGS=	-lutil
@


1.6
log
@Common queue walking code for smtpd and smtpctl. Kills majority of showqueue.c,
the remaining code was moved to queue_shared.c; ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2009/01/27 22:54:01 gilles Exp $
d10 1
a10 1
BINDIR=	/usr/bin
@


1.5
log
@follow the naming convention of other files, discussed with jacekm@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2009/01/27 22:48:29 gilles Exp $
d19 1
a19 1
SRCS=	smtpctl.c parser.c buffer.c imsg.c log.c showqueue.c enqueue.c queue_shared.c util.c
@


1.4
log
@first bricks of enqueue code which allows smtpctl to submit mail to queue
without "talking" smtp to listeners. currently, a big part of the server
side code is done (and requires a cleanup), next step is to get it usable
properly from a mail user agent.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2008/12/21 13:06:43 jacekm Exp $
d19 1
a19 1
SRCS=	smtpctl.c parser.c buffer.c imsg.c log.c showqueue.c enqueue.c sharedqueue.c util.c
@


1.3
log
@Add more compile time checking; fix warnings reported by gcc.
From: Nicholas Marriott <nicholas.marriott@@gmail.com>
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2008/12/06 02:44:08 gilles Exp $
d19 1
a19 1
SRCS=	smtpctl.c parser.c buffer.c imsg.c log.c showqueue.c
@


1.2
log
@- teach smtpctl how to inspect queue and runqueue, it supports two commands
	`showqueue' which displays the content of the queue (all envelopes)
	`showrunqueue` which displays envelopes scheduled for delivery. The
	utility will be improved and extended, but for now we need at least
	this basic support to help debug queue-related issues.

	Output format is spamdb-alike:
	type|envelope uid|sender|recipient|last delivery date|retry count

	ok jacek@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2008/12/05 03:28:37 gilles Exp $
d12 6
@


1.1
log
@- smtpctl utility to control the smtpd, don't expect too much yet as it is
	just an empty clone of relayctl with the glue needed to have it
	exchange imsg with smtpd correctly. code mostly by pyr@@, reviewed
	by chl@@ and I a while ago.
@
text
@d1 1
a1 1
#	$OpenBSD$
d13 1
a13 1
SRCS=	smtpctl.c parser.c buffer.c imsg.c log.c
@

