head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.2
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.6
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.20
date	2016.04.21.14.27.41;	author jsing;	state Exp;
branches;
next	1.19;
commitid	y261bjeJ4UOVSbjW;

1.19
date	2015.12.13.09.52.44;	author gilles;	state Exp;
branches;
next	1.18;
commitid	OUT78jWdQV3PCjhK;

1.18
date	2015.12.12.20.02.31;	author gilles;	state Exp;
branches;
next	1.17;
commitid	eO2zB2XyKCWqQLmz;

1.17
date	2015.12.12.17.16.56;	author gilles;	state Exp;
branches;
next	1.16;
commitid	O1qQ3TEBrjXRGaeN;

1.16
date	2015.12.12.17.14.40;	author gilles;	state Exp;
branches;
next	1.15;
commitid	TNPSXnDBvpPd8thy;

1.15
date	2015.12.12.14.40.20;	author gilles;	state Exp;
branches;
next	1.14;
commitid	A2W9nbNgRQXNXIrB;

1.14
date	2015.12.12.11.04.19;	author gilles;	state Exp;
branches;
next	1.13;
commitid	KKhGcSw1O2Fn2xqj;

1.13
date	2015.12.01.09.33.17;	author gilles;	state Exp;
branches;
next	1.12;
commitid	Y91zLTPzwb4lVNZb;

1.12
date	2015.10.21.16.45.13;	author jsing;	state Exp;
branches;
next	1.11;
commitid	3rkrfAouOz2CB9Jg;

1.11
date	2015.01.22.09.26.05;	author reyk;	state Exp;
branches;
next	1.10;
commitid	o3hdD3oPPo4ygHrW;

1.10
date	2015.01.16.15.08.52;	author reyk;	state Exp;
branches;
next	1.9;
commitid	cBAkhi7b4UQjJ650;

1.9
date	2014.05.20.17.33.36;	author reyk;	state Exp;
branches;
next	1.8;

1.8
date	2014.05.20.14.21.46;	author reyk;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.29.19.13.14;	author reyk;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.29.10.08.55;	author reyk;	state Exp;
branches;
next	1.5;

1.5
date	2014.02.04.13.44.41;	author eric;	state Exp;
branches;
next	1.4;

1.4
date	2013.11.28.12.50.40;	author eric;	state Exp;
branches;
next	1.3;

1.3
date	2013.11.06.10.01.29;	author eric;	state Exp;
branches;
next	1.2;

1.2
date	2013.07.19.09.04.07;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.26.09.37.24;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Use automatic DH parameters, instead of fixed ones. Also disable DHE by
default since it is computationally expensive and a potential DoS vector.

ok gilles@@
@
text
@/*	$OpenBSD: ssl.h,v 1.19 2015/12/13 09:52:44 gilles Exp $	*/
/*
 * Copyright (c) 2013 Gilles Chehade <gilles@@poolp.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define SSL_CIPHERS		"HIGH:!aNULL:!MD5"
#define	SSL_SESSION_TIMEOUT	300

struct pki {
	char			 pki_name[HOST_NAME_MAX+1];

	char			*pki_cert_file;
	char			*pki_cert;
	off_t			 pki_cert_len;

	char			*pki_key_file;
	char			*pki_key;
	off_t			 pki_key_len;

	EVP_PKEY		*pki_pkey;

	int			 pki_dhe;
};

struct ca {
	char			 ca_name[HOST_NAME_MAX+1];

	char			*ca_cert_file;
	char			*ca_cert;
	off_t			 ca_cert_len;
};


/* ssl.c */
void		ssl_init(void);
int		ssl_setup(SSL_CTX **, struct pki *,
    int (*)(SSL *, int *, void *), const char *);
SSL_CTX	       *ssl_ctx_create(const char *, char *, off_t, const char *);
int	        ssl_cmp(struct pki *, struct pki *);
char	       *ssl_load_file(const char *, off_t *, mode_t);
char	       *ssl_load_key(const char *, off_t *, char *, mode_t, const char *);

const char     *ssl_to_text(const SSL *);
void		ssl_error(const char *);

int		ssl_load_certificate(struct pki *, const char *);
int		ssl_load_keyfile(struct pki *, const char *, const char *);
int		ssl_load_cafile(struct ca *, const char *);
int		ssl_load_pkey(const void *, size_t, char *, off_t,
		    X509 **, EVP_PKEY **);
int		ssl_ctx_fake_private_key(SSL_CTX *, const void *, size_t,
		    char *, off_t, X509 **, EVP_PKEY **);

/* ssl_privsep.c */
int		ssl_by_mem_ctrl(X509_LOOKUP *, int, const char *, long, char **);
@


1.19
log
@refactor a bit to move the SNI handling away from smtp_session into smtp

ok sunil@@, jung@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl.h,v 1.18 2015/12/12 20:02:31 gilles Exp $	*/
d34 1
a34 3
	char			*pki_dhparams_file;
	char			*pki_dhparams;
	off_t			 pki_dhparams_len;
a51 1
void		ssl_set_ephemeral_key_exchange(SSL_CTX *, DH *);
a60 1
int		ssl_load_dhparams(struct pki *, const char *);
@


1.18
log
@remove CA from pki and no longer allow specifying a CA with 'pki' keyword.
introduce 'ca' keyword to allow specifying a custom CA.
making CA part of pki was a bad idea and several people hit use-cases that
plain couldn't work.

instead of:
    pki foobar.org ca "/etc/mail/CA.pem"

use now:
    ca foobar.org certificate "/etc/mail/CA.pem"


ok sunil@@, jung@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl.h,v 1.17 2015/12/12 17:16:56 gilles Exp $	*/
d50 2
a51 1
int		ssl_setup(SSL_CTX **, struct pki *, const char *);
@


1.17
log
@allow overriding the default cipher-suite

ok jung@@, sunil@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl.h,v 1.16 2015/12/12 17:14:40 gilles Exp $	*/
a23 4
	char			*pki_ca_file;
	char			*pki_ca;
	off_t			 pki_ca_len;

d62 1
a62 1
int		ssl_load_cafile(struct pki *, const char *);
@


1.16
log
@bump DH params to 2048, it's been part of smtpd releases for a long time
and I've been running with it since June with no side-effect

ok sunil@@, jung@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl.h,v 1.15 2015/12/12 14:40:20 gilles Exp $	*/
d54 2
a55 2
int		ssl_setup(SSL_CTX **, struct pki *);
SSL_CTX	       *ssl_ctx_create(const char *, char *, off_t);
@


1.15
log
@pki name is a hostname not a path
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl.h,v 1.14 2015/12/12 11:04:19 gilles Exp $	*/
a56 2
DH	       *get_dh1024(void);
DH	       *get_dh_from_memory(char *, size_t);
@


1.14
log
@whitespaces
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl.h,v 1.13 2015/12/01 09:33:17 gilles Exp $	*/
d22 1
a22 1
	char			 pki_name[PATH_MAX];
@


1.13
log
@prepare the ground for the CA certificate handling refactor, this commit
adds the parse.y bit + structures & members needed but does not make use
of it yet
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl.h,v 1.12 2015/10/21 16:45:13 jsing Exp $	*/
d44 1
a44 1
	char                     ca_name[HOST_NAME_MAX+1];
d46 3
a48 3
	char                    *ca_cert_file;
	char                    *ca_cert;
	off_t                    ca_cert_len;
@


1.12
log
@Use SSL_CTX_set_ecdh_auto() instead of rolling our own version.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl.h,v 1.11 2015/01/22 09:26:05 reyk Exp $	*/
d42 9
@


1.11
log
@LibreSSL now supports loading of CA certificates from memory, replace
the internal and long-serving ssl_ctx_load_verify_memory() function
with a call to the SSL_CTX_load_verify_mem() API function.  The
ssl_privsep.c file with hacks for using OpenSSL in privsep'ed
processes can now go away; portable versions of smtpd and relayd
should start depending on LibreSSL or they have to carry ssl_privsep.c
in openbsd-compat to work with legacy OpenSSL.  No functional change.

Based on previous discussions with gilles@@ bluhm@@ and many others
OK bluhm@@ (as part of the libcrypto/libssl/libtls diff)
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl.h,v 1.10 2015/01/16 15:08:52 reyk Exp $	*/
a18 1
#define	SSL_ECDH_CURVE		"prime256v1"
a50 1
void		ssl_set_ecdh_curve(SSL_CTX *, const char *);
@


1.10
log
@SSL_CTX_use_certificate_chain() has been added to LibreSSL and there
is no need to keep a local copy in ssl_privsep.c.  This adds a little
burden on OpenSMTPD-portable because it will have to put it in
openbsd-compat for compatibility with legacy OpenSSL.

OK gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl.h,v 1.9 2014/05/20 17:33:36 reyk Exp $	*/
a52 1
extern int	ssl_ctx_load_verify_memory(SSL_CTX *, char *, off_t);
a68 1
int		ssl_ctx_load_verify_memory(SSL_CTX *, char *, off_t);
@


1.9
log
@Unify the SSL privsep key loading functions.

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl.h,v 1.8 2014/05/20 14:21:46 reyk Exp $	*/
a69 1
int		ssl_ctx_use_certificate_chain(SSL_CTX *, char *, off_t);
@


1.8
log
@Deep down inside OpenSSL, err... LibreSSL, RSA_set_ex_data attempts to
free() the external data when releasing the RSA object.  The
RSA_GET_EX_NEW_INDEX(3) manual page doesn't mention that this is the
default behaviour - it just describes the possible free_func()
callback - and the code path in libcrypto is hiding the fact behind
layers of abstraction.

Fix possible double free by allocating and copying the external data
reference that is used for RSA privsep (pkiname in smtpd's case).

ok eric@@ gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl.h,v 1.7 2014/04/29 19:13:14 reyk Exp $	*/
d64 1
a64 2

int		ssl_ctx_load_pkey(SSL_CTX *, char *, off_t,
d67 1
a67 1
		    char *, off_t);
@


1.7
log
@Implement RSA privilege separation for OpenSMTPD, based on my previous
implementation for relayd(8).  The smtpd(8) pony processes (mta
client, smtp server) don't keep the private keys in memory but send
their private key operations as imsgs to the "lookup"/mta process.
It's worth mentioning that this prevents acidental private key leakage
as it could have been caused by "Heartbleed".

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl.h,v 1.6 2014/04/29 10:08:55 reyk Exp $	*/
d47 1
a47 1
SSL_CTX	       *ssl_ctx_create(void *, char *, off_t);
d65 1
a65 1
int		ssl_ctx_load_pkey(SSL_CTX *, void *, char *, off_t,
d67 2
a68 1
int		ssl_ctx_fake_private_key(SSL_CTX *, void *, char *, off_t);
@


1.6
log
@It is only required to load the keys and certs into the same SSL
context once.  Simplify the code path by moving the loading from three
different places into ssl_ctx_create():

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl.h,v 1.5 2014/02/04 13:44:41 eric Exp $	*/
d37 2
d47 1
a47 1
SSL_CTX	       *ssl_ctx_create(char *, off_t, char *, off_t);
d65 3
d70 3
a72 4
int	 ssl_ctx_use_private_key(SSL_CTX *, char *, off_t);
int	 ssl_ctx_use_certificate_chain(SSL_CTX *, char *, off_t);
int      ssl_ctx_load_verify_memory(SSL_CTX *, char *, off_t);
int      ssl_by_mem_ctrl(X509_LOOKUP *, int, const char *, long, char **);
@


1.5
log
@pki code cleanup

- rename "struct ssl" and "cert" to "struct pki" and "cert" to "pki_name"
- inherit pki conf on fork instead of passing it through imsg at startup
- implement SNI on smtp listeners
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
SSL_CTX	       *ssl_ctx_create(void);
@


1.4
log
@fix loading of passphrase-protected keys.
@
text
@d22 2
a23 2
struct ssl {
	char			 ssl_name[PATH_MAX];
d25 15
a39 15
	char			*ssl_ca_file;
	char			*ssl_ca;
	off_t			 ssl_ca_len;

	char			*ssl_cert_file;
	char			*ssl_cert;
	off_t			 ssl_cert_len;

	char			*ssl_key_file;
	char			*ssl_key;
	off_t			 ssl_key_len;

	char			*ssl_dhparams_file;
	char			*ssl_dhparams;
	off_t			 ssl_dhparams_len;
d44 1
a44 1
int		ssl_setup(SSL_CTX **, struct ssl *);
d46 1
a46 3
void	       *ssl_mta_init(char *, off_t, char *, off_t);
void	       *ssl_smtp_init(void *, char *, off_t, char *, off_t);
int	        ssl_cmp(struct ssl *, struct ssl *);
d50 1
a50 1
void		ssl_set_ecdh_curve(SSL_CTX *);
d58 4
a61 4
int		ssl_load_certificate(struct ssl *, const char *);
int		ssl_load_keyfile(struct ssl *, const char *, const char *);
int		ssl_load_cafile(struct ssl *, const char *);
int		ssl_load_dhparams(struct ssl *, const char *);
@


1.3
log
@Much much improved config parser and related changes.
Simplify code and do not impose an order on conditions and rule options.

Format changes that may require smtpd.conf update for some setups:

- SSL certificates are no longer automatically loaded, but must be
  explicitely declared using the "pki" keyword.
- "certificate" option becomes "pki" in listener and accept rules.
- "ssl://" becomes "secure://" in relay via rules.
- "helo" becomes "hostnames" in relay rules

New features:

- accept rules do not need an explicit action, in which case alias table
  or .forward must provide one.
- new "forward-only" action to force relaying and reject rcpts that expand
  as local delivery.
- "!" (negation) modifier on rule matching conditions.
- new "recipient" rule matching condition.
- new "verify" option on listeners and relay rules to reject invalid
  certificates.

Other changes:

- remember the helo name advertised on incoming mail and use it for sending
  bounces.
- bump envelope version (existing envelopes are updated on-the-fly).
@
text
@d55 1
a55 1
char	       *ssl_load_key(const char *, off_t *, char *);
d61 1
a61 1
int		ssl_load_keyfile(struct ssl *, const char *);
@


1.2
log
@tls perfect forward secrecy with ecdhe

suggested by djm@@ on hackers@@, diff ok djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl.h,v 1.1 2013/01/26 09:37:24 gilles Exp $	*/
d24 2
d28 2
d32 2
d36 2
a39 1
	uint8_t			 flags;
a45 1
int		ssl_load_certfile(struct ssl **, const char *, const char *, uint8_t);
d59 5
@


1.1
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl.c,v 1.50 2012/11/12 14:58:53 eric Exp $	*/
d18 2
a19 1
#define SSL_CIPHERS		"HIGH"
d46 1
@

