head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.8
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.12
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.4
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.01.20.17.37.54;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	ZBTFreARDSMmzOIV;

1.3
date	2014.07.08.13.49.09;	author eric;	state Exp;
branches;
next	1.2;
commitid	pEybL9fsrDOC6PJj;

1.2
date	2013.05.24.17.03.14;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.26.09.37.24;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.4
log
@use <limits.h> comprehensively.  For now try to push <> includes to
each .c file, and out of the .h files.  To avoid overinclude.
ok gilles, in principle.  If this has been done right, -portable should
become easier to maintain.
@
text
@/*	$OpenBSD: table_getpwnam.c,v 1.3 2014/07/08 13:49:09 eric Exp $	*/

/*
 * Copyright (c) 2012 Gilles Chehade <gilles@@poolp.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <event.h>
#include <fcntl.h>
#include <imsg.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <string.h>

#include "smtpd.h"
#include "log.h"


/* getpwnam(3) backend */
static int table_getpwnam_config(struct table *);
static int table_getpwnam_update(struct table *);
static void *table_getpwnam_open(struct table *);
static int table_getpwnam_lookup(void *, struct dict *, const char *, enum table_service,
    union lookup *);
static void  table_getpwnam_close(void *);

struct table_backend table_backend_getpwnam = {
	K_USERINFO,
	table_getpwnam_config,
	table_getpwnam_open,
	table_getpwnam_update,
	table_getpwnam_close,
	table_getpwnam_lookup,
};


static int
table_getpwnam_config(struct table *table)
{
	if (table->t_config[0])
		return 0;
	return 1;
}

static int
table_getpwnam_update(struct table *table)
{
	return 1;
}

static void *
table_getpwnam_open(struct table *table)
{
	return table;
}

static void
table_getpwnam_close(void *hdl)
{
	return;
}

static int
table_getpwnam_lookup(void *hdl, struct dict *params, const char *key, enum table_service kind,
    union lookup *lk)
{
	struct passwd	       *pw;
	size_t			s;

	if (kind != K_USERINFO)
		return -1;

	errno = 0;
	do {
		pw = getpwnam(key);
	} while (pw == NULL && errno == EINTR);

	if (pw == NULL) {
		if (errno)
			return -1;
		return 0;
	}
	if (lk == NULL)
		return 1;

	lk->userinfo.uid = pw->pw_uid;
	lk->userinfo.gid = pw->pw_gid;
	s = strlcpy(lk->userinfo.username, pw->pw_name,
	    sizeof(lk->userinfo.username));
	if (s >= sizeof(lk->userinfo.username))
		return (-1);
	s = strlcpy(lk->userinfo.directory, pw->pw_dir,
	    sizeof(lk->userinfo.directory));
	if (s >= sizeof(lk->userinfo.directory))
		return (-1);

	return (1);
}
@


1.3
log
@Update the table API: lookup functions can take an optional parameters
dictionnary (currently not set). While there, add a helper for forking
external backends, and remove unused table functions.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d33 1
@


1.2
log
@sync with OpenSMTPD 5.3.2

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_getpwnam.c,v 1.1 2013/01/26 09:37:24 gilles Exp $	*/
d43 1
a43 1
static int table_getpwnam_lookup(void *, const char *, enum table_service,
d84 1
a84 1
table_getpwnam_lookup(void *hdl, const char *key, enum table_service kind,
@


1.1
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a21 1
#include <sys/param.h>
d40 1
a40 1
static int table_getpwnam_config(struct table *, const char *);
d44 1
a44 1
    void **);
d58 1
a58 1
table_getpwnam_config(struct table *table, const char *config)
d60 1
a60 1
	if (config)
d85 1
a85 1
    void **ret)
a86 1
	struct userinfo	       *userinfo;
d103 1
a103 1
	if (ret == NULL)
d106 10
a115 11
	userinfo = xcalloc(1, sizeof *userinfo, "table_getpwnam_lookup");
	userinfo->uid = pw->pw_uid;
	userinfo->gid = pw->pw_gid;
	s = strlcpy(userinfo->username, pw->pw_name,
	    sizeof(userinfo->username));
	if (s >= sizeof(userinfo->username))
		goto error;
	s = strlcpy(userinfo->directory, pw->pw_dir,
	    sizeof(userinfo->directory));
	if (s >= sizeof(userinfo->directory))
		goto error;
d117 1
a117 6
	*ret = userinfo;
	return 1;

error:
	free(userinfo);
	return -1;
@

