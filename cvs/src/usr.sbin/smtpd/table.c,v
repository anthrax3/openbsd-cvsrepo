head	1.24;
access;
symbols
	OPENBSD_6_2:1.24.0.4
	OPENBSD_6_2_BASE:1.24
	OPENBSD_6_1:1.23.0.8
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.23.0.6
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.13.0.2
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.24
date	2017.05.01.09.29.07;	author gilles;	state Exp;
branches;
next	1.23;
commitid	IoNDiwv91inkzeIb;

1.23
date	2016.01.04.13.30.20;	author jung;	state Exp;
branches;
next	1.22;
commitid	CF2whypVOFPTyiTY;

1.22
date	2015.12.28.22.08.30;	author jung;	state Exp;
branches;
next	1.21;
commitid	ZxnqOQqX6IeYI9jW;

1.21
date	2015.11.30.14.13.03;	author gilles;	state Exp;
branches;
next	1.20;
commitid	uzQcYiSR90ELNfI7;

1.20
date	2015.11.23.21.50.12;	author gilles;	state Exp;
branches;
next	1.19;
commitid	HCn8C2lUMSgPueow;

1.19
date	2015.01.20.17.37.54;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	ZBTFreARDSMmzOIV;

1.18
date	2015.01.14.09.07.51;	author gilles;	state Exp;
branches;
next	1.17;
commitid	ZhvzJqMVn4QGkPI8;

1.17
date	2014.07.08.13.49.09;	author eric;	state Exp;
branches;
next	1.16;
commitid	pEybL9fsrDOC6PJj;

1.16
date	2014.05.09.21.30.11;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.19.18.01.01;	author gilles;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.19.14.19.17;	author gilles;	state Exp;
branches;
next	1.13;

1.13
date	2013.12.26.17.25.32;	author eric;	state Exp;
branches;
next	1.12;

1.12
date	2013.11.28.10.57.29;	author eric;	state Exp;
branches;
next	1.11;

1.11
date	2013.11.18.11.47.16;	author eric;	state Exp;
branches;
next	1.10;

1.10
date	2013.10.28.18.49.14;	author eric;	state Exp;
branches;
next	1.9;

1.9
date	2013.10.27.18.13.28;	author eric;	state Exp;
branches;
next	1.8;

1.8
date	2013.10.26.12.27.59;	author eric;	state Exp;
branches;
next	1.7;

1.7
date	2013.07.20.09.06.46;	author eric;	state Exp;
branches;
next	1.6;

1.6
date	2013.07.19.19.53.33;	author eric;	state Exp;
branches;
next	1.5;

1.5
date	2013.06.03.15.50.04;	author eric;	state Exp;
branches;
next	1.4;

1.4
date	2013.05.24.17.03.14;	author eric;	state Exp;
branches;
next	1.3;

1.3
date	2013.02.05.15.23.40;	author gilles;	state Exp;
branches;
next	1.2;

1.2
date	2013.02.05.11.45.18;	author gilles;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.26.09.37.24;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.24
log
@in function used for tracing, display unknown lookup types as "???"

diff from Wolf480pl
@
text
@/*	$OpenBSD: table.c,v 1.23 2016/01/04 13:30:20 jung Exp $	*/

/*
 * Copyright (c) 2013 Eric Faurot <eric@@openbsd.org>
 * Copyright (c) 2008 Gilles Chehade <gilles@@poolp.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>
#include <sys/stat.h>

#include <netinet/in.h>
#include <arpa/inet.h>
#include <net/if.h>

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <event.h>
#include <imsg.h>
#include <stdio.h>
#include <stdlib.h>
#include <netdb.h>
#include <limits.h>
#include <string.h>
#include <unistd.h>

#include "smtpd.h"
#include "log.h"

struct table_backend *table_backend_lookup(const char *);

extern struct table_backend table_backend_static;
extern struct table_backend table_backend_db;
extern struct table_backend table_backend_getpwnam;
extern struct table_backend table_backend_proc;

static const char * table_service_name(enum table_service);
static const char * table_backend_name(struct table_backend *);
static const char * table_dump_lookup(enum table_service, union lookup *);
static int parse_sockaddr(struct sockaddr *, int, const char *);

static unsigned int last_table_id = 0;

struct table_backend *
table_backend_lookup(const char *backend)
{
	if (!strcmp(backend, "static") || !strcmp(backend, "file"))
		return &table_backend_static;
	if (!strcmp(backend, "db"))
		return &table_backend_db;
	if (!strcmp(backend, "getpwnam"))
		return &table_backend_getpwnam;
	if (!strcmp(backend, "proc"))
		return &table_backend_proc;
	return NULL;
}

static const char *
table_backend_name(struct table_backend *backend)
{
	if (backend == &table_backend_static)
		return "static";
	if (backend == &table_backend_db)
		return "db";
	if (backend == &table_backend_getpwnam)
		return "getpwnam";
	if (backend == &table_backend_proc)
		return "proc";
	return "???";
}

static const char *
table_service_name(enum table_service s)
{
	switch (s) {
	case K_NONE:		return "NONE";
	case K_ALIAS:		return "ALIAS";
	case K_DOMAIN:		return "DOMAIN";
	case K_CREDENTIALS:	return "CREDENTIALS";
	case K_NETADDR:		return "NETADDR";
	case K_USERINFO:	return "USERINFO";
	case K_SOURCE:		return "SOURCE";
	case K_MAILADDR:	return "MAILADDR";
	case K_ADDRNAME:	return "ADDRNAME";
	case K_MAILADDRMAP:	return "MAILADDRMAP";
	default:		return "???";
	}
}

struct table *
table_find(const char *name, const char *tag)
{
	char buf[LINE_MAX];

	if (tag == NULL)
		return dict_get(env->sc_tables_dict, name);

	if ((size_t)snprintf(buf, sizeof(buf), "%s#%s", name, tag) >= sizeof(buf)) {
		log_warnx("warn: table name too long: %s#%s", name, tag);
		return (NULL);
	}

	return dict_get(env->sc_tables_dict, buf);
}

int
table_lookup(struct table *table, struct dict *params, const char *key, enum table_service kind,
    union lookup *lk)
{
	int	r;
	char	lkey[1024];

	if (table->t_backend->lookup == NULL)
		return (-1);

	if (!lowercase(lkey, key, sizeof lkey)) {
		log_warnx("warn: lookup key too long: %s", key);
		return -1;
	}

	r = table->t_backend->lookup(table->t_handle, params, lkey, kind, lk);

	if (r == 1)
		log_trace(TRACE_LOOKUP, "lookup: %s \"%s\" as %s in table %s:%s -> %s%s%s",
		    lk ? "lookup" : "check",
		    lkey,
		    table_service_name(kind),
		    table_backend_name(table->t_backend),
		    table->t_name,
		    lk ? "\"" : "",
		    (lk) ? table_dump_lookup(kind, lk): "found",
		    lk ? "\"" : "");
	else
		log_trace(TRACE_LOOKUP, "lookup: %s \"%s\" as %s in table %s:%s -> %d",
		    lk ? "lookup" : "check",
		    lkey,
		    table_service_name(kind),
		    table_backend_name(table->t_backend),
		    table->t_name,
		    r);

	return (r);
}

int
table_fetch(struct table *table, struct dict *params, enum table_service kind, union lookup *lk)
{
	int 	r;

	if (table->t_backend->fetch == NULL)
		return (-1);

	r = table->t_backend->fetch(table->t_handle, params, kind, lk);

	if (r == 1)
		log_trace(TRACE_LOOKUP, "lookup: fetch %s from table %s:%s -> %s%s%s",
		    table_service_name(kind),
		    table_backend_name(table->t_backend),
		    table->t_name,
		    lk ? "\"" : "",
		    (lk) ? table_dump_lookup(kind, lk): "found",
		    lk ? "\"" : "");
	else
		log_trace(TRACE_LOOKUP, "lookup: fetch %s from table %s:%s -> %d",
		    table_service_name(kind),
		    table_backend_name(table->t_backend),
		    table->t_name,
		    r);

	return (r);
}

struct table *
table_create(const char *backend, const char *name, const char *tag,
    const char *config)
{
	struct table		*t;
	struct table_backend	*tb;
	char			 buf[LINE_MAX];
	char			 path[LINE_MAX];
	size_t			 n;
	struct stat		 sb;

	if (name && tag) {
		if ((size_t)snprintf(buf, sizeof(buf), "%s#%s", name, tag) >=
		    sizeof(buf))
			fatalx("table_create: name too long \"%s#%s\"",
			    name, tag);
		name = buf;
	}

	if (name && table_find(name, NULL))
		fatalx("table_create: table \"%s\" already defined", name);

	if ((tb = table_backend_lookup(backend)) == NULL) {
		if ((size_t)snprintf(path, sizeof(path), PATH_LIBEXEC"/table-%s",
			backend) >= sizeof(path)) {
			fatalx("table_create: path too long \""
			    PATH_LIBEXEC"/table-%s\"", backend);
		}
		if (stat(path, &sb) == 0) {
			tb = table_backend_lookup("proc");
			(void)strlcpy(path, backend, sizeof(path));
			if (config) {
				(void)strlcat(path, ":", sizeof(path));
				if (strlcat(path, config, sizeof(path))
				    >= sizeof(path))
					fatalx("table_create: config file path too long");
			}
			config = path;
		}
	}

	if (tb == NULL)
		fatalx("table_create: backend \"%s\" does not exist", backend);

	t = xcalloc(1, sizeof(*t), "table_create");
	t->t_backend = tb;

	/* XXX */
	/*
	 * until people forget about it, "file" really means "static"
	 */
	if (!strcmp(backend, "file"))
		backend = "static";

	if (config) {
		if (strlcpy(t->t_config, config, sizeof t->t_config)
		    >= sizeof t->t_config)
			fatalx("table_create: table config \"%s\" too large",
			    t->t_config);
	}

	if (strcmp(backend, "static") != 0)
		t->t_type = T_DYNAMIC;

	if (name == NULL)
		(void)snprintf(t->t_name, sizeof(t->t_name), "<dynamic:%u>",
		    last_table_id++);
	else {
		n = strlcpy(t->t_name, name, sizeof(t->t_name));
		if (n >= sizeof(t->t_name))
			fatalx("table_create: table name too long");
	}

	dict_init(&t->t_dict);
	dict_set(env->sc_tables_dict, t->t_name, t);

	return (t);
}

void
table_destroy(struct table *t)
{
	void	*p = NULL;

	while (dict_poproot(&t->t_dict, (void **)&p))
		free(p);

	dict_xpop(env->sc_tables_dict, t->t_name);
	free(t);
}

int
table_config(struct table *t)
{
	if (t->t_backend->config == NULL)
		return (1);
	return (t->t_backend->config(t));
}

void
table_add(struct table *t, const char *key, const char *val)
{
	char	lkey[1024], *old;

	if (t->t_type & T_DYNAMIC)
		fatalx("table_add: cannot add to table");

	if (!lowercase(lkey, key, sizeof lkey)) {
		log_warnx("warn: lookup key too long: %s", key);
		return;
	}

	old = dict_set(&t->t_dict, lkey, val ? xstrdup(val, "table_add") : NULL);
	if (old) {
		log_warnx("warn: duplicate key \"%s\" in static table \"%s\"",
		    lkey, t->t_name);
		free(old);
	}
}

int
table_check_type(struct table *t, uint32_t mask)
{
	return t->t_type & mask;
}

int
table_check_service(struct table *t, uint32_t mask)
{
	return t->t_backend->services & mask;
}

int
table_check_use(struct table *t, uint32_t tmask, uint32_t smask)
{
	return table_check_type(t, tmask) && table_check_service(t, smask);
}

int
table_open(struct table *t)
{
	t->t_handle = NULL;
	if (t->t_backend->open == NULL)
		return (1);
	t->t_handle = t->t_backend->open(t);
	if (t->t_handle == NULL)
		return (0);
	return (1);
}

void
table_close(struct table *t)
{
	if (t->t_backend->close)
		t->t_backend->close(t->t_handle);
}

int
table_update(struct table *t)
{
	if (t->t_backend->update == NULL)
		return (1);
	return (t->t_backend->update(t));
}


/*
 * quick reminder:
 * in *_match() s1 comes from session, s2 comes from table
 */

int
table_domain_match(const char *s1, const char *s2)
{
	return hostname_match(s1, s2);
}

int
table_mailaddr_match(const char *s1, const char *s2)
{
	struct mailaddr m1;
	struct mailaddr m2;

	if (!text_to_mailaddr(&m1, s1))
		return 0;
	if (!text_to_mailaddr(&m2, s2))
		return 0;
	return mailaddr_match(&m1, &m2);
}

static int table_match_mask(struct sockaddr_storage *, struct netaddr *);
static int table_inet4_match(struct sockaddr_in *, struct netaddr *);
static int table_inet6_match(struct sockaddr_in6 *, struct netaddr *);

int
table_netaddr_match(const char *s1, const char *s2)
{
	struct netaddr n1;
	struct netaddr n2;

	if (strcasecmp(s1, s2) == 0)
		return 1;
	if (!text_to_netaddr(&n1, s1))
		return 0;
	if (!text_to_netaddr(&n2, s2))
		return 0;
	if (n1.ss.ss_family != n2.ss.ss_family)
		return 0;
	if (n1.ss.ss_len != n2.ss.ss_len)
		return 0;
	return table_match_mask(&n1.ss, &n2);
}

static int
table_match_mask(struct sockaddr_storage *ss, struct netaddr *ssmask)
{
	if (ss->ss_family == AF_INET)
		return table_inet4_match((struct sockaddr_in *)ss, ssmask);

	if (ss->ss_family == AF_INET6)
		return table_inet6_match((struct sockaddr_in6 *)ss, ssmask);

	return (0);
}

static int
table_inet4_match(struct sockaddr_in *ss, struct netaddr *ssmask)
{
	in_addr_t mask;
	int i;

	/* a.b.c.d/8 -> htonl(0xff000000) */
	mask = 0;
	for (i = 0; i < ssmask->bits; ++i)
		mask = (mask >> 1) | 0x80000000;
	mask = htonl(mask);

	/* (addr & mask) == (net & mask) */
	if ((ss->sin_addr.s_addr & mask) ==
	    (((struct sockaddr_in *)ssmask)->sin_addr.s_addr & mask))
		return 1;

	return 0;
}

static int
table_inet6_match(struct sockaddr_in6 *ss, struct netaddr *ssmask)
{
	struct in6_addr	*in;
	struct in6_addr	*inmask;
	struct in6_addr	 mask;
	int		 i;

	memset(&mask, 0, sizeof(mask));
	for (i = 0; i < ssmask->bits / 8; i++)
		mask.s6_addr[i] = 0xff;
	i = ssmask->bits % 8;
	if (i)
		mask.s6_addr[ssmask->bits / 8] = 0xff00 >> i;

	in = &ss->sin6_addr;
	inmask = &((struct sockaddr_in6 *)&ssmask->ss)->sin6_addr;

	for (i = 0; i < 16; i++) {
		if ((in->s6_addr[i] & mask.s6_addr[i]) !=
		    (inmask->s6_addr[i] & mask.s6_addr[i]))
			return (0);
	}

	return (1);
}

void
table_dump_all(void)
{
	struct table	*t;
	void		*iter, *i2;
	const char 	*key, *sep;
	char		*value;
	char		 buf[1024];

	iter = NULL;
	while (dict_iter(env->sc_tables_dict, &iter, NULL, (void **)&t)) {
		i2 = NULL;
		sep = "";
 		buf[0] = '\0';
		if (t->t_type & T_DYNAMIC) {
			(void)strlcat(buf, "DYNAMIC", sizeof(buf));
			sep = ",";
		}
		if (t->t_type & T_LIST) {
			(void)strlcat(buf, sep, sizeof(buf));
			(void)strlcat(buf, "LIST", sizeof(buf));
			sep = ",";
		}
		if (t->t_type & T_HASH) {
			(void)strlcat(buf, sep, sizeof(buf));
			(void)strlcat(buf, "HASH", sizeof(buf));
			sep = ",";
		}
		log_debug("TABLE \"%s\" type=%s config=\"%s\"",
		    t->t_name, buf, t->t_config);
		while(dict_iter(&t->t_dict, &i2, &key, (void**)&value)) {
			if (value)
				log_debug("	\"%s\" -> \"%s\"", key, value);
			else
				log_debug("	\"%s\"", key);
		}
	}
}

void
table_open_all(void)
{
	struct table	*t;
	void		*iter;

	iter = NULL;
	while (dict_iter(env->sc_tables_dict, &iter, NULL, (void **)&t))
		if (!table_open(t))
			fatalx("failed to open table %s", t->t_name);
}

void
table_close_all(void)
{
	struct table	*t;
	void		*iter;

	iter = NULL;
	while (dict_iter(env->sc_tables_dict, &iter, NULL, (void **)&t))
		table_close(t);
}

int
table_parse_lookup(enum table_service service, const char *key,
    const char *line, union lookup *lk)
{
	char	buffer[LINE_MAX], *p;
	size_t	len;

	len = strlen(line);

	switch (service) {
	case K_ALIAS:
		lk->expand = calloc(1, sizeof(*lk->expand));
		if (lk->expand == NULL)
			return (-1);
		if (!expand_line(lk->expand, line, 1)) {
			expand_free(lk->expand);
			return (-1);
		}
		return (1);

	case K_DOMAIN:
		if (strlcpy(lk->domain.name, line, sizeof(lk->domain.name))
		    >= sizeof(lk->domain.name))
			return (-1);
		return (1);

	case K_CREDENTIALS:

		/* credentials are stored as user:password */
		if (len < 3)
			return (-1);

		/* too big to fit in a smtp session line */
		if (len >= LINE_MAX)
			return (-1);

		p = strchr(line, ':');
		if (p == NULL) {
			if (strlcpy(lk->creds.username, key, sizeof (lk->creds.username))
			    >= sizeof (lk->creds.username))
				return (-1);
			if (strlcpy(lk->creds.password, line, sizeof(lk->creds.password))
			    >= sizeof(lk->creds.password))
				return (-1);
			return (1);
		}

		if (p == line || p == line + len - 1)
			return (-1);

		memmove(lk->creds.username, line, p - line);
		lk->creds.username[p - line] = '\0';

		if (strlcpy(lk->creds.password, p+1, sizeof(lk->creds.password))
		    >= sizeof(lk->creds.password))
			return (-1);

		return (1);

	case K_NETADDR:
		if (!text_to_netaddr(&lk->netaddr, line))
			return (-1);
		return (1);

	case K_USERINFO:
		if (!bsnprintf(buffer, sizeof(buffer), "%s:%s", key, line))
			return (-1);
		if (!text_to_userinfo(&lk->userinfo, buffer))
			return (-1);
 		return (1);

	case K_SOURCE:
		if (parse_sockaddr((struct sockaddr *)&lk->source.addr,
		    PF_UNSPEC, line) == -1)
			return (-1);
		return (1);

	case K_MAILADDR:
		if (!text_to_mailaddr(&lk->mailaddr, line))
			return (-1);
		return (1);

	case K_MAILADDRMAP:
		lk->maddrmap = calloc(1, sizeof(*lk->maddrmap));
		if (lk->maddrmap == NULL)
			return (-1);
		maddrmap_init(lk->maddrmap);
		if (!mailaddr_line(lk->maddrmap, line)) {
			maddrmap_free(lk->maddrmap);
			return (-1);
		}
		return (1);

	case K_ADDRNAME:
		if (parse_sockaddr((struct sockaddr *)&lk->addrname.addr,
		    PF_UNSPEC, key) == -1)
			return (-1);
		if (strlcpy(lk->addrname.name, line, sizeof(lk->addrname.name))
		    >= sizeof(lk->addrname.name))
			return (-1);
		return (1);

	default:
		return (-1);
	}
}

static const char *
table_dump_lookup(enum table_service s, union lookup *lk)
{
	static char	buf[LINE_MAX];
	int		ret;

	switch (s) {
	case K_NONE:
		break;

	case K_ALIAS:
		expand_to_text(lk->expand, buf, sizeof(buf));
		break;

	case K_DOMAIN:
		ret = snprintf(buf, sizeof(buf), "%s", lk->domain.name);
		if (ret == -1 || (size_t)ret >= sizeof (buf))
			goto err;
		break;

	case K_CREDENTIALS:
		ret = snprintf(buf, sizeof(buf), "%s:%s",
		    lk->creds.username, lk->creds.password);
		if (ret == -1 || (size_t)ret >= sizeof (buf))
			goto err;
		break;

	case K_NETADDR:
		ret = snprintf(buf, sizeof(buf), "%s/%d",
		    sockaddr_to_text((struct sockaddr *)&lk->netaddr.ss),
		    lk->netaddr.bits);
		if (ret == -1 || (size_t)ret >= sizeof (buf))
			goto err;
		break;

	case K_USERINFO:
		ret = snprintf(buf, sizeof(buf), "%s:%d:%d:%s",
		    lk->userinfo.username,
		    lk->userinfo.uid,
		    lk->userinfo.gid,
		    lk->userinfo.directory);
		if (ret == -1 || (size_t)ret >= sizeof (buf))
			goto err;
		break;

	case K_SOURCE:
		ret = snprintf(buf, sizeof(buf), "%s",
		    ss_to_text(&lk->source.addr));
		if (ret == -1 || (size_t)ret >= sizeof (buf))
			goto err;
		break;

	case K_MAILADDR:
		ret = snprintf(buf, sizeof(buf), "%s@@%s",
		    lk->mailaddr.user,
		    lk->mailaddr.domain);
		if (ret == -1 || (size_t)ret >= sizeof (buf))
			goto err;
		break;

	case K_ADDRNAME:
		ret = snprintf(buf, sizeof(buf), "%s",
		    lk->addrname.name);
		if (ret == -1 || (size_t)ret >= sizeof (buf))
			goto err;
		break;

	default:
		(void)strlcpy(buf, "???", sizeof(buf));
		break;
	}

	return (buf);

err:
	return (NULL);
}


static int
parse_sockaddr(struct sockaddr *sa, int family, const char *str)
{
	struct in_addr		 ina;
	struct in6_addr		 in6a;
	struct sockaddr_in	*sin;
	struct sockaddr_in6	*sin6;
	char			*cp, *str2;
	const char		*errstr;

	switch (family) {
	case PF_UNSPEC:
		if (parse_sockaddr(sa, PF_INET, str) == 0)
			return (0);
		return parse_sockaddr(sa, PF_INET6, str);

	case PF_INET:
		if (inet_pton(PF_INET, str, &ina) != 1)
			return (-1);

		sin = (struct sockaddr_in *)sa;
		memset(sin, 0, sizeof *sin);
		sin->sin_len = sizeof(struct sockaddr_in);
		sin->sin_family = PF_INET;
		sin->sin_addr.s_addr = ina.s_addr;
		return (0);

	case PF_INET6:
		if (strncasecmp("ipv6:", str, 5) == 0)
			str += 5;
		cp = strchr(str, SCOPE_DELIMITER);
		if (cp) {
			str2 = strdup(str);
			if (str2 == NULL)
				return (-1);
			str2[cp - str] = '\0';
			if (inet_pton(PF_INET6, str2, &in6a) != 1) {
				free(str2);
				return (-1);
			}
			cp++;
			free(str2);
		} else if (inet_pton(PF_INET6, str, &in6a) != 1)
			return (-1);

		sin6 = (struct sockaddr_in6 *)sa;
		memset(sin6, 0, sizeof *sin6);
		sin6->sin6_len = sizeof(struct sockaddr_in6);
		sin6->sin6_family = PF_INET6;
		sin6->sin6_addr = in6a;

		if (cp == NULL)
			return (0);

		if (IN6_IS_ADDR_LINKLOCAL(&in6a) ||
		    IN6_IS_ADDR_MC_LINKLOCAL(&in6a) ||
		    IN6_IS_ADDR_MC_INTFACELOCAL(&in6a))
			if ((sin6->sin6_scope_id = if_nametoindex(cp)))
				return (0);

		sin6->sin6_scope_id = strtonum(cp, 0, UINT32_MAX, &errstr);
		if (errstr)
			return (-1);
		return (0);

	default:
		break;
	}

	return (-1);
}
@


1.23
log
@switch to /usr/local/libexec when looking for -extras and drop loop iterating
paths

this effectively reverts table.c r1.21 which was mainly introduced for a smooth
transition in -current

ok gilles
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.22 2015/12/28 22:08:30 jung Exp $	*/
d697 1
@


1.22
log
@remove spaces after '!'

no binary change

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.21 2015/11/30 14:13:03 gilles Exp $	*/
a193 2
	char			*ps;
	char			*p;
a195 1
	char			 pathsplit[LINE_MAX];
d211 13
a223 18
		(void)strlcpy(pathsplit, PATH_LIBEXEC, sizeof pathsplit);
		for (ps = pathsplit; (p = strsep(&ps, ":")) != NULL;)  {
			if ((size_t)snprintf(path, sizeof(path), "%s/table-%s",
				p, backend) >= sizeof(path)) {
				fatalx("table_create: path too long \""
				    "%s/table-%s\"", p, backend);
			}
			if (stat(path, &sb) == 0) {
				tb = table_backend_lookup("proc");
				(void)strlcpy(path, backend, sizeof(path));
				if (config) {
					(void)strlcat(path, ":", sizeof(path));
					if (strlcat(path, config, sizeof(path))
					    >= sizeof(path))
						fatalx("table_create: config file path too long");
				}
				config = path;
				break;
d225 1
@


1.21
log
@when looking up tables, start in /usr/local/libexec before /usr/libexec, so
ports/packages can be installed in the proper place

ok jung@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.20 2015/11/23 21:50:12 gilles Exp $	*/
d131 1
a131 1
	if (! lowercase(lkey, key, sizeof lkey)) {
d302 1
a302 1
	if (! lowercase(lkey, key, sizeof lkey)) {
d378 1
a378 1
	if (! text_to_mailaddr(&m1, s1))
d380 1
a380 1
	if (! text_to_mailaddr(&m2, s2))
d397 1
a397 1
	if (! text_to_netaddr(&n1, s1))
d399 1
a399 1
	if (! text_to_netaddr(&n2, s2))
d514 1
a514 1
		if (! table_open(t))
d616 1
a616 1
		if (! mailaddr_line(lk->maddrmap, line)) {
@


1.20
log
@allow table API to lookup for mailaddr mappings

ok sunil@@, ok jung@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.19 2015/01/20 17:37:54 deraadt Exp $	*/
d194 2
d198 1
d214 18
a231 13
		if ((size_t)snprintf(path, sizeof(path), PATH_LIBEXEC "/table-%s",
		    backend) >= sizeof(path)) {
			fatalx("table_create: path too long \""
			    PATH_LIBEXEC "/table-%s\"", backend);
		}
		if (stat(path, &sb) == 0) {
			tb = table_backend_lookup("proc");
			(void)strlcpy(path, backend, sizeof(path));
			if (config) {
				(void)strlcat(path, ":", sizeof(path));
				if (strlcat(path, config, sizeof(path))
				    >= sizeof(path))
					fatalx("table_create: config file path too long");
a232 1
			config = path;
@


1.19
log
@use <limits.h> comprehensively.  For now try to push <> includes to
each .c file, and out of the .h files.  To avoid overinclude.
ok gilles, in principle.  If this has been done right, -portable should
become easier to maintain.
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.18 2015/01/14 09:07:51 gilles Exp $	*/
d100 1
a369 1
	char	       *p;
d375 1
a375 16

	if (! table_domain_match(m1.domain, m2.domain))
		return 0;

	if (m2.user[0]) {
		/* if address from table has a tag, we must respect it */
		if (strchr(m2.user, '+') == NULL) {
			/* otherwise, strip tag from session address if any */
			p = strchr(m1.user, '+');
			if (p)
				*p = '\0';
		}
		if (strcasecmp(m1.user, m2.user))
			return 0;
	}
	return 1;
d602 11
@


1.18
log
@recipient and sender lists now support the user+TAG notation, allowing
among other things a secondary MX to filter recipients to be relayed to a
primary MX even if they are using tags. there are other nice things to do
with that feature, use your imagination.

tested and ok florian@@, tested by several users for a few days too
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.17 2014/07/08 13:49:09 eric Exp $	*/
d37 2
d107 1
a107 1
	char buf[SMTPD_MAXLINESIZE];
d193 2
a194 2
	char			 buf[SMTPD_MAXLINESIZE];
	char			 path[SMTPD_MAXLINESIZE];
d541 1
a541 1
	char	buffer[SMTPD_MAXLINESIZE], *p;
d570 1
a570 1
		if (len >= SMTPD_MAXLINESIZE)
d636 1
a636 1
	static char	buf[SMTPD_MAXLINESIZE];
@


1.17
log
@Update the table API: lookup functions can take an optional parameters
dictionnary (currently not set). While there, add a helper for forking
external backends, and remove unused table functions.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.16 2014/05/09 21:30:11 tedu Exp $	*/
d350 6
d367 1
d377 8
a384 1
	if (m2.user[0])
d387 1
@


1.16
log
@stop casting sizeof to int
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.15 2014/04/19 18:01:01 gilles Exp $	*/
d119 1
a119 1
table_lookup(struct table *table, const char *key, enum table_service kind,
d133 1
a133 1
	r = table->t_backend->lookup(table->t_handle, lkey, kind, lk);
d158 1
a158 1
table_fetch(struct table *table, enum table_service kind, union lookup *lk)
d165 1
a165 1
	r = table->t_backend->fetch(table->t_handle, kind, lk);
d199 1
a199 1
			errx(1, "table_create: name too long \"%s#%s\"",
d205 1
a205 1
		errx(1, "table_create: table \"%s\" already defined", name);
d208 1
a208 1
		if ((size_t)snprintf(path, sizeof(path), PATH_TABLES "/table-%s",
d210 2
a211 2
			errx(1, "table_create: path too long \""
			    PATH_TABLES "/table-%s\"", backend);
d215 1
d217 1
a217 1
				(void)strlcat(path, " ", sizeof(path));
d220 1
a220 1
					errx(1, "table_create: config file path too long");
d227 1
a227 1
		errx(1, "table_create: backend \"%s\" does not exist", backend);
d242 1
a242 1
			errx(1, "table_create: table config \"%s\" too large",
d255 1
a255 1
			errx(1, "table_create: table name too long");
d290 1
a290 1
		errx(1, "table_add: cannot add to table");
a304 16
const void *
table_get(struct table *t, const char *key)
{
	if (t->t_type & T_DYNAMIC)
		errx(1, "table_get: cannot get from table");
	return dict_get(&t->t_dict, key);
}

void
table_delete(struct table *t, const char *key)
{
	if (t->t_type & T_DYNAMIC)
		errx(1, "table_delete: cannot delete from table");
	free(dict_pop(&t->t_dict, key));
}

d506 1
a506 1
			errx(1, "failed to open table %s", t->t_name);
@


1.15
log
@these snprintf() calls can't possibly truncate because they copy data from
buffers that are already protected against truncation and that do not
exceed the destination buffer size when copied together ...

however, i think we should add checks here too because it'll help us catch
errors in table backends when adding new ones if we miss a truncation check
there.
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.14 2014/04/19 14:19:17 gilles Exp $	*/
d110 1
a110 1
	if (snprintf(buf, sizeof(buf), "%s#%s", name, tag) >= (int)sizeof(buf)) {
d197 2
a198 2
		if (snprintf(buf, sizeof(buf), "%s#%s", name, tag)
		    >= (int)sizeof(buf))
d208 2
a209 2
		if (snprintf(path, sizeof(path), PATH_TABLES "/table-%s",
		    backend) >= (int)sizeof(path)) {
d647 1
a647 1
		if (ret == -1 || ret >= (int)sizeof (buf))
d654 1
a654 1
		if (ret == -1 || ret >= (int)sizeof (buf))
d662 1
a662 1
		if (ret == -1 || ret >= (int)sizeof (buf))
d672 1
a672 1
		if (ret == -1 || ret >= (int)sizeof (buf))
d679 1
a679 1
		if (ret == -1 || ret >= (int)sizeof (buf))
d687 1
a687 1
		if (ret == -1 || ret >= (int)sizeof (buf))
d694 1
a694 1
		if (ret == -1 || ret >= (int)sizeof (buf))
@


1.14
log
@(void) cast strlcat() and snprintf() that cannot truncate

be a bit more strict with an strlcat() truncation by causing it to fail in
table_create() instead of later in parse.y - in both cases, this would
cause smtpd to fatal() at startup if a table has a config file too large
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.13 2013/12/26 17:25:32 eric Exp $	*/
d635 1
d646 3
a648 1
		snprintf(buf, sizeof(buf), "%s", lk->domain.name);
d652 1
a652 1
		snprintf(buf, sizeof(buf), "%s:%s",
d654 2
d659 1
a659 1
		snprintf(buf, sizeof(buf), "%s/%d",
d662 2
d667 1
a667 1
		snprintf(buf, sizeof(buf), "%s:%d:%d:%s",
d672 2
d677 1
a677 1
		snprintf(buf, sizeof(buf), "%s",
d679 2
d684 1
a684 1
		snprintf(buf, sizeof(buf), "%s@@%s",
d687 2
d692 1
a692 1
		snprintf(buf, sizeof(buf), "%s",
d694 2
d703 3
@


1.13
log
@bcopy -> memmove
bzero -> memset
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.12 2013/11/28 10:57:29 eric Exp $	*/
d216 4
a219 2
				strlcat(path, " ", sizeof(path));
				strlcat(path, config, sizeof(path));
d249 1
a249 1
		snprintf(t->t_name, sizeof(t->t_name), "<dynamic:%u>",
d488 1
a488 1
			strlcat(buf, "DYNAMIC", sizeof(buf));
d492 2
a493 2
			strlcat(buf, sep, sizeof(buf));
			strlcat(buf, "LIST", sizeof(buf));
d497 2
a498 2
			strlcat(buf, sep, sizeof(buf));
			strlcat(buf, "HASH", sizeof(buf));
@


1.12
log
@allow subdomain matching in mailaddr tables
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d452 1
a452 1
	bzero(&mask, sizeof(mask));
@


1.11
log
@change dict_poproot() prototype: do not take key placeholder parameter as
it can't work that way.
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.10 2013/10/28 18:49:14 eric Exp $	*/
d380 1
a380 1
	if (strcasecmp(m1.domain, m2.domain))
@


1.10
log
@accept credentials formated as "<user> <passwd>"
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d266 1
a266 1
	while (dict_poproot(&t->t_dict, NULL, (void **)&p))
@


1.9
log
@fix parsing of inet6 addresses when prefixed with "IPv6:"
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.8 2013/10/26 12:27:59 eric Exp $	*/
d570 11
a580 1
		if (p == NULL || p == line || p == line + len - 1)
@


1.8
log
@%i -> %d in format strings
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.7 2013/07/20 09:06:46 eric Exp $	*/
d707 2
@


1.7
log
@Update ldap and sqlite table backends and provide them as external backends.
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.6 2013/07/19 19:53:33 eric Exp $	*/
d146 1
a146 1
		log_trace(TRACE_LOOKUP, "lookup: %s \"%s\" as %s in table %s:%s -> %i",
d176 1
a176 1
		log_trace(TRACE_LOOKUP, "lookup: fetch %s from table %s:%s -> %i",
d642 1
a642 1
		snprintf(buf, sizeof(buf), "%s/%i",
d648 1
a648 1
		snprintf(buf, sizeof(buf), "%s:%i:%i:%s",
@


1.6
log
@Add a table_proc backend for delegating table lookups to another
process.  Stop building experimental table_sqlite and table_ldap as
they will be provided as external backends.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d208 1
a208 1
		if (snprintf(path, sizeof(path), PATH_TABLES "/backend-table-%s",
d211 1
a211 1
			    PATH_TABLES "/backend-table-%s\"", backend);
@


1.5
log
@lowercase the key when adding an entry to a static table, since the
lookups are done on lowercase strings. warn about duplicates entries
and avoid to leak memory.

ok gilles@@
@
text
@d24 1
d38 1
d48 1
a48 2
extern struct table_backend table_backend_sqlite;
extern struct table_backend table_backend_ldap;
d66 2
a67 4
	if (!strcmp(backend, "sqlite"))
		return &table_backend_sqlite;
	if (!strcmp(backend, "ldap"))
		return &table_backend_ldap;
d80 2
a81 4
	if (backend == &table_backend_sqlite)
		return "sqlite";
	if (backend == &table_backend_ldap)
		return "ldap";
d192 1
d194 1
d207 17
a223 1
	if ((tb = table_backend_lookup(backend)) == NULL)
@


1.4
log
@sync with OpenSMTPD 5.3.2

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.3 2013/02/05 15:23:40 gilles Exp $	*/
d269 2
d273 12
a284 1
	dict_set(&t->t_dict, key, val ? xstrdup(val, "table_add") : NULL);
@


1.3
log
@unbreak broken smtpctl table update

fix by eric and I, ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table.c,v 1.1 2013/01/26 09:37:24 gilles Exp $	*/
d4 1
a22 1
#include <sys/param.h>
d26 2
d49 6
a54 1
static objid_t	last_table_id = 0;
d72 2
a73 2
struct table *
table_findbyname(const char *name)
d75 28
a102 1
	return dict_get(env->sc_tables_dict, name);
d106 1
a106 1
table_find(objid_t id)
d108 11
a118 1
	return tree_get(env->sc_tables_tree, id);
d123 1
a123 1
    void **retp)
d125 33
a157 1
	return table->t_backend->lookup(table->t_handle, key, kind, retp);
d161 1
a161 1
table_fetch(struct table *table, enum table_service kind, char **retp)
d163 23
a185 1
	return table->t_backend->fetch(table->t_handle, kind, retp);
d189 2
a190 1
table_create(const char *backend, const char *name, const char *config)
d194 10
a203 1
	size_t		 n;
d205 1
a205 1
	if (name && table_findbyname(name))
d221 1
a221 5
	if (strlcpy(t->t_src, backend, sizeof t->t_src) >= sizeof t->t_src)
		errx(1, "table_create: table backend \"%s\" too large",
		    t->t_src);

	if (config && *config) {
d228 1
a228 1
	if (strcmp(t->t_src, "static") != 0)
a230 4
	t->t_id = ++last_table_id;
	if (t->t_id == INT_MAX)
		errx(1, "table_create: too many tables defined");

d232 2
a233 1
		snprintf(t->t_name, sizeof(t->t_name), "<dynamic:%u>", t->t_id);
a241 1
	tree_set(env->sc_tables_tree, t->t_id, t);
a254 1
	tree_xpop(env->sc_tables_tree, t->t_id);
d258 2
a259 19
void
table_replace(struct table *orig, struct table *tnew)
{
	void	*p = NULL;

	while (dict_poproot(&orig->t_dict, NULL, (void **)&p))
		free(p);
	dict_merge(&orig->t_dict, &tnew->t_dict);
	table_destroy(tnew);
}

void
table_set_configuration(struct table *t, struct table *config)
{
	strlcpy(t->t_cfgtable, config->t_name, sizeof t->t_cfgtable);
}

struct table *
table_get_configuration(struct table *t)
d261 3
a263 13
	return table_findbyname(t->t_cfgtable);
}

void
table_set_payload(struct table *t, void *payload)
{
	t->t_payload = payload;
}

void *
table_get_payload(struct table *t)
{
	return t->t_payload;
d269 1
a269 1
	if (strcmp(t->t_src, "static") != 0)
d277 2
a278 2
	if (strcmp(t->t_src, "static") != 0)
		errx(1, "table_add: cannot get from table");
d285 2
a286 2
	if (strcmp(t->t_src, "static") != 0)
		errx(1, "map_add: cannot delete from map");
d311 3
d316 2
a317 2
		return 0;
	return 1;
d323 2
a324 1
	t->t_backend->close(t->t_handle);
d327 1
a327 2

void
d330 3
a332 90
	t->t_backend->update(t);
}

void *
table_config_create(void)
{
	return table_create("static", NULL, NULL);
}

const char *
table_config_get(void *p, const char *key)
{
	return (const char *)table_get(p, key);
}

void
table_config_destroy(void *p)
{
	table_destroy(p);
}

int
table_config_parse(void *p, const char *config, enum table_type type)
{
	struct table	*t = p;
	FILE	*fp;
	char *buf, *lbuf;
	size_t flen;
	char *keyp;
	char *valp;
	size_t	ret = 0;

	if (strcmp("static", t->t_src) != 0) {
		log_warn("table_config_parser: config table must be static");
		return 0;
	}

	fp = fopen(config, "r");
	if (fp == NULL)
		return 0;

	lbuf = NULL;
	while ((buf = fgetln(fp, &flen))) {
		if (buf[flen - 1] == '\n')
			buf[flen - 1] = '\0';
		else {
			lbuf = xmalloc(flen + 1, "table_stdio_get_entry");
			memcpy(lbuf, buf, flen);
			lbuf[flen] = '\0';
			buf = lbuf;
		}

		keyp = buf;
		while (isspace((int)*keyp))
			++keyp;
		if (*keyp == '\0' || *keyp == '#')
			continue;
		valp = keyp;
		strsep(&valp, " \t:");
		if (valp) {
			while (*valp) {
				if (!isspace(*valp) &&
				    !(*valp == ':' && isspace(*(valp + 1))))
					break;
				++valp;
			}
			if (*valp == '\0')
				valp = NULL;
		}

		/**/
		if (t->t_type == 0)
			t->t_type = (valp == keyp || valp == NULL) ? T_LIST :
			    T_HASH;

		if (!(t->t_type & type))
			goto end;

		if ((valp == keyp || valp == NULL) && t->t_type == T_LIST)
			table_add(t, keyp, NULL);
		else if ((valp != keyp && valp != NULL) && t->t_type == T_HASH)
			table_add(t, keyp, valp);
		else
			goto end;
	}
	ret = 1;
end:
	free(lbuf);
	fclose(fp);
	return ret;
d371 1
a371 1
	if (strcmp(s1, s2) == 0)
d444 39
d489 1
a489 1
	while (tree_iter(env->sc_tables_tree, &iter, NULL, (void **)&t))
d501 1
a501 1
	while (tree_iter(env->sc_tables_tree, &iter, NULL, (void **)&t))
d503 216
@


1.2
log
@- handle getaddrinfo() error as LKA_TEMPFAIL
- handle getsockname() error in smtp_connected()
- accept '/' as part of user-part, expand to ':' as done by qmail
- fix wrong check in mda leading to bogus Return-Path header
- fix aliases parsing when there's a white space between key and separator
- some cosmethic cleanup
@
text
@d160 11
@


1.1
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map.c,v 1.35 2012/11/12 14:58:53 eric Exp $	*/
d304 4
a307 1
			while (*valp && isspace(*valp))
d309 1
@

