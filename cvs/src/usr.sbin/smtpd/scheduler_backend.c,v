head	1.15;
access;
symbols
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.12
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.10
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.4
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.13.0.2
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2015.01.20.17.37.54;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	ZBTFreARDSMmzOIV;

1.14
date	2014.07.10.14.45.02;	author eric;	state Exp;
branches;
next	1.13;
commitid	dolePHRcgnf1dDVL;

1.13
date	2014.02.04.14.56.03;	author eric;	state Exp;
branches;
next	1.12;

1.12
date	2013.10.27.17.47.53;	author eric;	state Exp;
branches;
next	1.11;

1.11
date	2013.07.19.21.34.31;	author eric;	state Exp;
branches;
next	1.10;

1.10
date	2013.07.19.15.14.23;	author eric;	state Exp;
branches;
next	1.9;

1.9
date	2013.05.24.17.03.14;	author eric;	state Exp;
branches;
next	1.8;

1.8
date	2013.01.26.09.37.23;	author gilles;	state Exp;
branches;
next	1.7;

1.7
date	2012.11.23.10.55.25;	author eric;	state Exp;
branches;
next	1.6;

1.6
date	2012.09.11.19.19.13;	author gilles;	state Exp;
branches;
next	1.5;

1.5
date	2012.08.24.12.29.50;	author eric;	state Exp;
branches;
next	1.4;

1.4
date	2012.08.24.07.32.12;	author chl;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.08.08.50.42;	author eric;	state Exp;
branches;
next	1.2;

1.2
date	2012.07.28.12.06.41;	author chl;	state Exp;
branches;
next	1.1;

1.1
date	2012.07.09.09.57.53;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.15
log
@use <limits.h> comprehensively.  For now try to push <> includes to
each .c file, and out of the .h files.  To avoid overinclude.
ok gilles, in principle.  If this has been done right, -portable should
become easier to maintain.
@
text
@/*	$OpenBSD: scheduler_backend.c,v 1.14 2014/07/10 14:45:02 eric Exp $	*/

/*
 * Copyright (c) 2012 Gilles Chehade <gilles@@poolp.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>

#include <ctype.h>
#include <err.h>
#include <event.h>
#include <fcntl.h>
#include <imsg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

#include "smtpd.h"
#include "log.h"

extern struct scheduler_backend scheduler_backend_null;
extern struct scheduler_backend scheduler_backend_proc;
extern struct scheduler_backend scheduler_backend_ramqueue;

struct scheduler_backend *
scheduler_backend_lookup(const char *name)
{
	if (!strcmp(name, "null"))
		return &scheduler_backend_null;
	if (!strcmp(name, "ramqueue"))
		return &scheduler_backend_ramqueue;

	return &scheduler_backend_proc;
}

void
scheduler_info(struct scheduler_info *sched, struct envelope *evp)
{
	sched->evpid = evp->id;
	sched->type = evp->type;
	sched->creation = evp->creation;
	sched->retry = evp->retry;
	sched->expire = evp->expire;
	sched->lasttry = evp->lasttry;
	sched->lastbounce = evp->lastbounce;
	sched->nexttry	= 0;
}
@


1.14
log
@Improve the scheduler, better and simpler.

- Get rid of the scheduler_batch structure. The scheduler can now return
  envelopes of different types in a single run, interlacing them to avoid
  batch effects.

- Ask for an acknowledgement from the queue when removing or expiring
  an envelope to benefit from the inflight envelope limitation mechanism.
  This ensures that the scheduler always keeps sending envelopes at a rate
  that the queue can sustain in all cases.

- Limit the number of envelopes in a holdq.  When a holdq is full,
  new envelopes are put back in the pending queue instead, with a
  shorter retry time.

- Plumbing for proc-ified schedulers.

imsg version bump. smtpctl stop before updating.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d32 1
@


1.13
log
@internal improvements and cleanups

- get rid of the whole penalty thing for failed envelopes in the mta and scheduler.
- do not disable routes on smtp errors
- try to schedule all types of envelopes on each scheduler frame.
@
text
@a44 2
	if (!strcmp(name, "proc"))
		return &scheduler_backend_proc;
d48 1
a48 1
	return NULL;
a61 17
}

time_t
scheduler_compute_schedule(struct scheduler_info *sched)
{
	time_t		delay;
	uint32_t	retry;

	if (sched->type == D_MTA)
		delay = 800;
	else
		delay = 10;

	retry = sched->retry;
	delay = ((delay * retry) * retry) / 2;

	return (sched->creation + delay);
@


1.12
log
@Implement a feedback mechanism which allows the mta to "hold" envelopes
in the scheduler when it has too many tasks for a given relay.  The
envelopes are put on a wait queue, and are not scheduled again until
the mta "releases" some envelopes from that queue.

It prevents from having too many inflight envelopes, which are out of reach
for the admin.
@
text
@d54 1
a54 1
scheduler_info(struct scheduler_info *sched, struct envelope *evp, uint32_t penalty)
a63 1
	sched->penalty = penalty;
d77 1
a77 1
	retry = sched->retry + sched->penalty;
@


1.11
log
@Implement a scheduler_proc backend
@
text
@@


1.10
log
@scheduler improvements:
- implement suspend/resume scheduling for individual envelopes or message,
  with the associated smtpctl commands.
- allow the mta to request immediate scheduling of an envelope.
- on temporary failures a penalty can be given to further delay the next try.
@
text
@d37 1
d45 2
@


1.9
log
@sync with OpenSMTPD 5.3.2

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scheduler_backend.c,v 1.8 2013/01/26 09:37:23 gilles Exp $	*/
d36 1
a37 1
extern struct scheduler_backend scheduler_backend_null;
d51 1
a51 1
scheduler_info(struct scheduler_info *sched, struct envelope *evp)
d61 1
d67 2
a68 1
	time_t	delay;
d75 2
a76 1
	delay = ((delay * sched->retry) * sched->retry) / 2;
@


1.8
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scheduler_backend.c,v 1.6 2012/09/11 19:19:13 gilles Exp $	*/
a21 1
#include <sys/param.h>
@


1.7
log
@knf

ok gilles@@
@
text
@d4 1
a4 1
 * Copyright (c) 2012 Gilles Chehade <gilles@@openbsd.org>
d38 1
d43 2
d54 2
a55 2
	sched->evpid    = evp->id;
	sched->type     = evp->type;
d57 5
a61 3
	sched->lasttry  = evp->lasttry;
	sched->expire   = evp->expire;
	sched->retry    = evp->retry;
@


1.6
log
@- simplify scheduler_compute_schedule by making it a quadratic delaying.
  no more if/else, we derive the delay from the retry count. works for
  qmail, should work for us too.

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scheduler_backend.c,v 1.5 2012/08/24 12:29:50 eric Exp $	*/
d71 1
a71 1
 	return (sched->creation + delay);
@


1.5
log
@Remove the rq_host and rq_batch structures from the ramqueue scheduler.
The scheduler should only allow admin to schedule specific envelopes by
id, or msgid. More advanced scheduling (per host/route/whatever) should
be achieved using smtpctl schedule-id and proper filtering on the queue,
or using ad-hoc scheduler backend and tools.

ok gilles@@ chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scheduler_backend.c,v 1.4 2012/08/24 07:32:12 chl Exp $	*/
d64 2
a65 10
	if (sched->retry == 0)
		delay = 0;
#if 0
		/* for testing scheduler sleep */
		delay = arc4random() % 30;
#endif
	else if (sched->retry < 4)
		delay = (sched->retry * 15 * 60);
	else if (sched->retry < 8)
		delay = ((sched->retry - 3) * 60 * 60);
d67 1
a67 1
		delay = ((sched->retry - 7) * 24 * 60 * 60);
d69 3
a71 1
	return (sched->creation + delay);
@


1.4
log
@fix assignment typo

ok eric@@ gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scheduler_backend.c,v 1.3 2012/08/08 08:50:42 eric Exp $	*/
a50 2
	strlcpy(sched->destination, evp->dest.domain, sizeof sched->destination);

@


1.3
log
@Improve the scheduler backend API.

New envelopes are pushed into the scheduler through the insert()
commit() rollback() transactional interface functions.

Worklists are pulled from the scheduler through a single batch()
interface function, which returns a list of envelope ids and the
type of processing. Envelopes returned in this batch are said to
be "in-flight", as opposed to "pending". They are supposed to be
processed in some way, and either updated() or deleted() at some
point.

The schedule()/remove() functions are used to alter the internal
state of "pending" envelopes to make them schedulable.  The enve-
lopes will be part of a worklist on the next call to batch().

Rewrite the scheduler_ramqueue backend.

The initial queue loading in now done by the queue.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scheduler_backend.c,v 1.2 2012/07/28 12:06:41 chl Exp $	*/
d70 1
a70 1
		delay == arc4random() % 30;
@


1.2
log
@fix uninitialized field type in scheduler_info struct.

found with valgrind on -portable.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scheduler_backend.c,v 1.1 2012/07/09 09:57:53 gilles Exp $	*/
d59 21
@


1.1
log
@- runner is the terminology we used back when we had runqueues, we no
  longer have them and runner is actually a scheduler so rename.
- introduce scheduler_backend which does the same to scheduler than
  queue_backend does to queue and map_backend does to maps
- remove all occurences of RUNNER and runner, replace them with SCHEDULER
  and scheduler

ok eric@@, ok chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: scheduler.c,v 1.3 2012/07/02 17:00:05 eric Exp $	*/
d53 2
a54 1
	sched->evpid = evp->id;
@

