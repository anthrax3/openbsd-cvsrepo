head	1.13;
access;
symbols
	OPENBSD_6_0:1.13.0.6
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.12.30.16.02.08;	author benno;	state Exp;
branches;
next	1.12;
commitid	ofoODi2EulQZ0KOh;

1.12
date	2015.12.13.09.52.44;	author gilles;	state Exp;
branches;
next	1.11;
commitid	OUT78jWdQV3PCjhK;

1.11
date	2015.12.12.17.16.56;	author gilles;	state Exp;
branches;
next	1.10;
commitid	O1qQ3TEBrjXRGaeN;

1.10
date	2015.10.21.16.44.28;	author jsing;	state Exp;
branches;
next	1.9;
commitid	VeKjz2xsP9Q9IzaX;

1.9
date	2015.04.19.20.29.12;	author gilles;	state Exp;
branches;
next	1.8;
commitid	bBwp0YicyQAoRflI;

1.8
date	2015.01.16.06.40.21;	author deraadt;	state Exp;
branches
	1.8.2.1;
next	1.7;
commitid	Uu5nFG3wCl0LACBb;

1.7
date	2014.04.29.19.13.14;	author reyk;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2014.04.29.12.18.27;	author reyk;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.29.10.08.55;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2014.02.04.13.44.41;	author eric;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2013.10.28.17.02.08;	author eric;	state Exp;
branches;
next	1.2;

1.2
date	2013.05.24.17.03.14;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.26.09.37.24;	author gilles;	state Exp;
branches;
next	;

1.4.2.1
date	2015.04.19.20.29.43;	author gilles;	state Exp;
branches;
next	;
commitid	hcouPHQe4WQRrGA6;

1.7.4.1
date	2015.04.19.20.30.06;	author gilles;	state Exp;
branches;
next	;
commitid	SFi8NK6NRchJSgfL;

1.8.2.1
date	2015.04.19.20.30.33;	author gilles;	state Exp;
branches;
next	;
commitid	V7mUb6iisKdaCe7F;


desc
@@


1.13
log
@SSL_CTX_free() and SSL_free() check for null so dont do it in smtpd
ok jung@@ tedu@@ deraadt@@
@
text
@/*	$OpenBSD: ssl_smtpd.c,v 1.12 2015/12/13 09:52:44 gilles Exp $	*/

/*
 * Copyright (c) 2008 Pierre-Yves Ritschard <pyr@@openbsd.org>
 * Copyright (c) 2008 Reyk Floeter <reyk@@openbsd.org>
 * Copyright (c) 2012 Gilles Chehade <gilles@@poolp.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>
#include <sys/stat.h>

#include <ctype.h>
#include <event.h>
#include <fcntl.h>
#include <limits.h>
#include <imsg.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <openssl/ssl.h>
#include <openssl/engine.h>
#include <openssl/err.h>

#include "smtpd.h"
#include "log.h"
#include "ssl.h"


void *
ssl_mta_init(void *pkiname, char *cert, off_t cert_len, const char *ciphers)
{
	SSL_CTX	*ctx = NULL;
	SSL	*ssl = NULL;

	ctx = ssl_ctx_create(pkiname, cert, cert_len, ciphers);

	if ((ssl = SSL_new(ctx)) == NULL)
		goto err;
	if (!SSL_set_ssl_method(ssl, SSLv23_client_method()))
		goto err;

	SSL_CTX_free(ctx);
	return (void *)(ssl);

err:
	SSL_free(ssl);
	SSL_CTX_free(ctx);
	ssl_error("ssl_mta_init");
	return (NULL);
}

/* dummy_verify */
static int
dummy_verify(int ok, X509_STORE_CTX *store)
{
	/*
	 * We *want* SMTP to request an optional client certificate, however we don't want the
	 * verification to take place in the SMTP process. This dummy verify will allow us to
	 * asynchronously verify in the lookup process.
	 */
	return 1;
}

void *
ssl_smtp_init(void *ssl_ctx, int verify)
{
	SSL	*ssl = NULL;

	log_debug("debug: session_start_ssl: switching to SSL");

	if (verify)
		SSL_CTX_set_verify(ssl_ctx, SSL_VERIFY_PEER, dummy_verify);

	if ((ssl = SSL_new(ssl_ctx)) == NULL)
		goto err;
	if (!SSL_set_ssl_method(ssl, SSLv23_server_method()))
		goto err;

	return (void *)(ssl);

err:
	SSL_free(ssl);
	ssl_error("ssl_smtp_init");
	return (NULL);
}
@


1.12
log
@refactor a bit to move the SNI handling away from smtp_session into smtp

ok sunil@@, jung@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl_smtpd.c,v 1.11 2015/12/12 17:16:56 gilles Exp $	*/
d64 2
a65 4
	if (ssl != NULL)
		SSL_free(ssl);
	if (ctx != NULL)
		SSL_CTX_free(ctx);
d100 1
a100 2
	if (ssl != NULL)
		SSL_free(ssl);
@


1.11
log
@allow overriding the default cipher-suite

ok jung@@, sunil@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl_smtpd.c,v 1.10 2015/10/21 16:44:28 jsing Exp $	*/
d85 1
a85 1
ssl_smtp_init(void *ssl_ctx, void *sni, int verify)
a87 1
	int	(*cb)(SSL *,int *,void *) = sni;
a92 3

	if (cb)
		SSL_CTX_set_tlsext_servername_callback(ssl_ctx, cb);
@


1.10
log
@Only enable SSL_VERIFY_PEER when the verify option is set on a listener.

Always enabling SSL_VERIFY_PEER unnecessarily increases the number of
messages/bytes in the TLS handshake and increases our attack surface,
since we request and then process client certificates.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl_smtpd.c,v 1.9 2015/04/19 20:29:12 gilles Exp $	*/
d48 1
a48 1
ssl_mta_init(void *pkiname, char *cert, off_t cert_len)
d53 1
a53 1
	ctx = ssl_ctx_create(pkiname, cert, cert_len);
@


1.9
log
@Incorrect logic in smtpd(8) can lead to unexpected client disconnect, invalid
certificate in SNI negotiation or server crash.

spotted by Edwin Torok
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl_smtpd.c,v 1.8 2015/01/16 06:40:21 deraadt Exp $	*/
d85 1
a85 1
ssl_smtp_init(void *ssl_ctx, void *sni)
d92 2
a93 1
	SSL_CTX_set_verify(ssl_ctx, SSL_VERIFY_PEER, dummy_verify);
@


1.8
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl_smtpd.c,v 1.7 2014/04/29 19:13:14 reyk Exp $	*/
d85 1
a85 1
ssl_smtp_init(void *ssl_ctx, void *sni, void *arg)
d94 1
a94 1
	if (cb) {
a95 2
		SSL_CTX_set_tlsext_servername_arg(ssl_ctx, arg);
	}
@


1.8.2.1
log
@Incorrect logic in smtpd(8) can lead to unexpected client disconnect, invalid
certificate in SNI negotiation or server crash.

spotted by Edwin Torok
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl_smtpd.c,v 1.8 2015/01/16 06:40:21 deraadt Exp $	*/
d85 1
a85 1
ssl_smtp_init(void *ssl_ctx, void *sni)
d94 1
a94 1
	if (cb)
d96 2
@


1.7
log
@Implement RSA privilege separation for OpenSMTPD, based on my previous
implementation for relayd(8).  The smtpd(8) pony processes (mta
client, smtp server) don't keep the private keys in memory but send
their private key operations as imsgs to the "lookup"/mta process.
It's worth mentioning that this prevents acidental private key leakage
as it could have been caused by "Heartbleed".

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl_smtpd.c,v 1.6 2014/04/29 12:18:27 reyk Exp $	*/
d30 1
@


1.7.4.1
log
@Incorrect logic in smtpd(8) can lead to unexpected client disconnect, invalid
certificate in SNI negotiation or server crash.

spotted by Edwin Torok
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl_smtpd.c,v 1.7 2014/04/29 19:13:14 reyk Exp $	*/
d84 1
a84 1
ssl_smtp_init(void *ssl_ctx, void *sni)
d93 1
a93 1
	if (cb)
d95 2
@


1.6
log
@Remove unused arguments from ssl_smtp_init()

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl_smtpd.c,v 1.5 2014/04/29 10:08:55 reyk Exp $	*/
d47 1
a47 1
ssl_mta_init(char *cert, off_t cert_len, char *key, off_t key_len)
d52 1
a52 1
	ctx = ssl_ctx_create(cert, cert_len, key, key_len);
@


1.5
log
@It is only required to load the keys and certs into the same SSL
context once.  Simplify the code path by moving the loading from three
different places into ssl_ctx_create():

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl_smtpd.c,v 1.4 2014/02/04 13:44:41 eric Exp $	*/
d84 1
a84 1
ssl_smtp_init(void *ssl_ctx, char *cert, off_t cert_len, char *key, off_t key_len, void *sni, void *arg)
@


1.4
log
@pki code cleanup

- rename "struct ssl" and "cert" to "struct pki" and "cert" to "pki_name"
- inherit pki conf on fork instead of passing it through imsg at startup
- implement SNI on smtp listeners
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 1
a52 10
	ctx = ssl_ctx_create();

	if (cert != NULL && key != NULL) {
		if (!ssl_ctx_use_certificate_chain(ctx, cert, cert_len)) 
			goto err;
		else if (!ssl_ctx_use_private_key(ctx, key, key_len))
			goto err;
		else if (!SSL_CTX_check_private_key(ctx))
			goto err;
	}
a89 6
	if (!ssl_ctx_use_certificate_chain(ssl_ctx, cert, cert_len))
		goto err;
	else if (!ssl_ctx_use_private_key(ssl_ctx, key, key_len))
		goto err;
	else if (!SSL_CTX_check_private_key(ssl_ctx))
		goto err;
@


1.4.2.1
log
@Incorrect logic in smtpd(8) can lead to unexpected client disconnect, invalid
certificate in SNI negotiation or server crash.

spotted by Edwin Torok
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl_smtpd.c,v 1.4 2014/02/04 13:44:41 eric Exp $	*/
d93 1
a93 1
ssl_smtp_init(void *ssl_ctx, char *cert, off_t cert_len, char *key, off_t key_len, void *sni)
d108 1
a108 1
	if (cb)
d110 2
@


1.3
log
@Report the ssl certificate verification status in the mail header.
Log ssl certificate validation errors.
Fix several ssl-related leaks.
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl_smtpd.c,v 1.2 2013/05/24 17:03:14 eric Exp $	*/
d93 1
a93 1
ssl_smtp_init(void *ssl_ctx, char *cert, off_t cert_len, char *key, off_t key_len)
d96 1
a98 1

d107 5
@


1.2
log
@sync with OpenSMTPD 5.3.2

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl_smtpd.c,v 1.1 2013/01/26 09:37:24 gilles Exp $	*/
d49 2
a50 2
	SSL_CTX		*ctx;
	SSL		*ssl = NULL;
d68 1
d74 2
d95 1
a95 1
	SSL *ssl = NULL;
@


1.1
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a23 1
#include <sys/param.h>
@

