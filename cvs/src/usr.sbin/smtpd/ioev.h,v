head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.6
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.4
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.4
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@ * @;


1.16
date	2016.11.30.17.43.32;	author eric;	state Exp;
branches;
next	1.15;
commitid	12DZR8Z2gR4qMwKF;

1.15
date	2016.11.30.11.52.48;	author eric;	state Exp;
branches;
next	1.14;
commitid	HLHuvF4EZizEJJ0M;

1.14
date	2016.11.24.21.25.21;	author eric;	state Exp;
branches;
next	1.13;
commitid	85eBrsNLf8b4heK8;

1.13
date	2016.11.24.20.52.13;	author eric;	state Exp;
branches;
next	1.12;
commitid	UvPJmlWnlqtYXKpn;

1.12
date	2016.11.24.20.44.04;	author eric;	state Exp;
branches;
next	1.11;
commitid	NUNgQusDh5a3bpBi;

1.11
date	2016.11.24.12.58.27;	author eric;	state Exp;
branches;
next	1.10;
commitid	5gZmKKc6mC73nyDO;

1.10
date	2016.11.20.08.43.36;	author eric;	state Exp;
branches;
next	1.9;
commitid	WsInk7NbLdaIQWny;

1.9
date	2016.11.17.17.34.55;	author eric;	state Exp;
branches;
next	1.8;
commitid	8UKnvWDg7NJwNwWd;

1.8
date	2016.11.17.07.33.06;	author eric;	state Exp;
branches;
next	1.7;
commitid	6eHngXNIBgMGOO6G;

1.7
date	2016.11.16.21.30.37;	author eric;	state Exp;
branches;
next	1.6;
commitid	3uoi1oHbQkJMXEjt;

1.6
date	2016.03.25.15.06.58;	author krw;	state Exp;
branches;
next	1.5;
commitid	0NIU7T9t8yqZHZQl;

1.5
date	2014.12.24.13.51.31;	author eric;	state Exp;
branches;
next	1.4;
commitid	hxnMsgzQw5aKfNFY;

1.4
date	2014.07.08.07.59.31;	author sobrado;	state Exp;
branches;
next	1.3;
commitid	QejPnWBk7nSpcYUN;

1.3
date	2013.01.26.09.37.23;	author gilles;	state Exp;
branches;
next	1.2;

1.2
date	2012.10.10.19.38.04;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2012.01.29.00.32.51;	author eric;	state Exp;
branches;
next	;


desc
@@


1.16
log
@hide internal io flags and rename IO_PAUSE_{IN,OUT} to IO_{IN,OUT}

ok gilles@@ sunil@@
@
text
@/*	$OpenBSD: ioev.h,v 1.15 2016/11/30 11:52:48 eric Exp $	*/
/*
 * Copyright (c) 2012 Eric Faurot <eric@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

enum {
	IO_CONNECTED = 0, 	/* connection successful	*/
	IO_TLSREADY,		/* TLS started successfully	*/
	IO_TLSERROR,		/* XXX - needs more work	*/
	IO_DATAIN,		/* new data in input buffer	*/
	IO_LOWAT,		/* output queue running low	*/
	IO_DISCONNECTED,	/* error?			*/
	IO_TIMEOUT,		/* error?			*/
	IO_ERROR,		/* details?			*/
};

#define IO_IN		0x01
#define IO_OUT		0x02

struct io;

void io_set_nonblocking(int);
void io_set_nolinger(int);

struct io *io_new(void);
void io_free(struct io *);
void io_set_read(struct io *);
void io_set_write(struct io *);
void io_set_fd(struct io *, int);
void io_set_callback(struct io *io, void(*)(struct io *, int, void *), void *);
void io_set_timeout(struct io *, int);
void io_set_lowat(struct io *, size_t);
void io_pause(struct io *, int);
void io_resume(struct io *, int);
void io_reload(struct io *);
int io_connect(struct io *, const struct sockaddr *, const struct sockaddr *);
int io_start_tls(struct io *, void *);
const char* io_strio(struct io *);
const char* io_strevent(int);
const char* io_error(struct io *);
void* io_ssl(struct io *);
int io_fileno(struct io *);
int io_paused(struct io *, int);

/* Buffered output functions */
int io_write(struct io *, const void *, size_t);
int io_writev(struct io *, const struct iovec *, int);
int io_print(struct io *, const char *);
int io_printf(struct io *, const char *, ...);
int io_vprintf(struct io *, const char *, va_list);
size_t io_queued(struct io *);

/* Buffered input functions */
void* io_data(struct io *);
size_t io_datalen(struct io *);
char* io_getline(struct io *, size_t *);
void io_drop(struct io *, size_t);
@


1.15
log
@make struct io opaque:

- move struct io definition to ioev.c
- replace io_init/io_clear with io_new/io_free
- allocate an iobuf for each new io internally
- use struct io pointer in the rest of the code
- remove remaining uses of iobuf_*

ok gilles@@ sunil@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ioev.h,v 1.14 2016/11/24 21:25:21 eric Exp $	*/
d29 2
a30 7
#define IO_READ			0x01
#define IO_WRITE		0x02
#define IO_RW			(IO_READ | IO_WRITE)
#define IO_PAUSE_IN		0x04
#define IO_PAUSE_OUT		0x08
#define IO_RESET		0x10  /* internal */
#define IO_HELD			0x20  /* internal */
@


1.14
log
@add an io_paused() function.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ioev.h,v 1.13 2016/11/24 20:52:13 eric Exp $	*/
a17 2
#include <event.h>

d37 1
a37 14
struct iobuf;
struct io {
	int		 sock;
	void		*arg;
	void		(*cb)(struct io*, int, void *);
	struct iobuf	*iobuf;
	size_t		 lowat;
	int		 timeout;
	int		 flags;
	int		 state;
	struct event	 ev;
	void		*ssl;
	const char	*error; /* only valid immediately on callback */
};
d42 2
a43 2
void io_init(struct io*, struct iobuf*);
void io_clear(struct io*);
@


1.13
log
@add an io_fileno() accessor

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ioev.h,v 1.12 2016/11/24 20:44:04 eric Exp $	*/
d75 1
@


1.12
log
@add an io_ssl() accessor

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ioev.h,v 1.11 2016/11/24 12:58:27 eric Exp $	*/
d74 1
@


1.11
log
@add an io_error() accessor to avoid dereferencing the io struct directly.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ioev.h,v 1.10 2016/11/20 08:43:36 eric Exp $	*/
d73 1
@


1.10
log
@add dedicated functions to set fd and callback on a struct io.
simplify io_init() prototype.

ok sunil@@ gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ioev.h,v 1.9 2016/11/17 17:34:55 eric Exp $	*/
d72 1
@


1.9
log
@Add io api functions for dealing with buffered data, as wrapper around
their iobuf counterparts.

ok gilles@@ sunil@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ioev.h,v 1.8 2016/11/17 07:33:06 eric Exp $	*/
d57 1
a57 2
void io_init(struct io*, int, void*, void(*)(struct io*, int, void *),
    struct iobuf*);
d61 2
@


1.8
log
@remove IO_TLSVERIFIED which is not a io event, and inline necessary code
where the callback functions are called for this event.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ioev.h,v 1.7 2016/11/16 21:30:37 eric Exp $	*/
d71 14
@


1.7
log
@pass the user pointer as parameter to the io callback instead of having
the user dereference the io structure.

ok millert@@ gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ioev.h,v 1.6 2016/03/25 15:06:58 krw Exp $	*/
a22 1
	IO_TLSVERIFIED,		/* XXX - needs more work	*/
@


1.6
log
@Nuke session_socket_blockmode() and session_socket_linger(). Use
the identical io_set_blocking() and io_set_linger().

Since both are always called to turn off blocking or lingering,
nuke the parameter and associated enum in favour of "just doing the
right thing".

While passing remove the unneeded last parameter to the remaining
fcntl(F_GETFL).

Finally, rename the functions to io_set_nonblocking() and
io_set_nolinger() for clarity.

No functional change.

Started with a sweep of fcntl() usage inspired by guenther@@.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ioev.h,v 1.5 2014/12/24 13:51:31 eric Exp $	*/
d44 1
a44 1
	void		(*cb)(struct io*, int);
d58 2
a59 1
void io_init(struct io*, int, void*, void(*)(struct io*, int), struct iobuf*);
@


1.5
log
@Correctly fallback to PLAIN if opportunistics TLS fails during TLS handshake.

fix by Stefan Sieg

ok gilles
@
text
@d1 1
a1 1
/*	$OpenBSD: ioev.h,v 1.4 2014/07/08 07:59:31 sobrado Exp $	*/
d55 2
a56 2
void io_set_blocking(int, int);
void io_set_linger(int, int);
@


1.4
log
@fix typos.

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ioev.h,v 1.3 2013/01/26 09:37:23 gilles Exp $	*/
d24 1
@


1.3
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ioev.h,v 1.2 2012/10/10 19:38:04 eric Exp $	*/
d22 1
a22 1
	IO_TLSREADY,		/* TLS started succesfully	*/
d51 1
a51 1
	const char	*error; /* only valid immediatly on callback */
@


1.2
log
@io_connect() can take an optional address to bind() before connecting.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ioev.h,v 1.1 2012/01/29 00:32:51 eric Exp $	*/
d23 1
d51 1
@


1.1
log
@Import generic network IO code.  The plan is to hide the boring
details of IO operations such as buffering or SSL, and provide a
slightly nicer interface to the protocol writer.

Not plugged to the rest of the code yet.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asr.h,v 1.5 2011/07/13 14:52:21 eric Exp $	*/
d64 1
a64 1
int io_connect(struct io *, const struct sockaddr *);
@

