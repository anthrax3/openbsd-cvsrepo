head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.8
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.6
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.15
date	2016.01.22.13.08.44;	author gilles;	state Exp;
branches;
next	1.14;
commitid	BG6qW4VU3KPVguaZ;

1.14
date	2015.12.28.22.08.30;	author jung;	state Exp;
branches;
next	1.13;
commitid	ZxnqOQqX6IeYI9jW;

1.13
date	2015.12.22.07.52.52;	author sunil;	state Exp;
branches;
next	1.12;
commitid	duvGJsSuO7Zeuid1;

1.12
date	2015.11.24.07.40.26;	author gilles;	state Exp;
branches;
next	1.11;
commitid	DcyZ1YtYURrPguDD;

1.11
date	2015.10.11.12.50.00;	author sunil;	state Exp;
branches;
next	1.10;
commitid	dmRjMYloxUoaVmb9;

1.10
date	2015.01.20.17.37.54;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	ZBTFreARDSMmzOIV;

1.9
date	2014.07.08.13.49.09;	author eric;	state Exp;
branches;
next	1.8;
commitid	pEybL9fsrDOC6PJj;

1.8
date	2013.11.28.10.43.37;	author eric;	state Exp;
branches;
next	1.7;

1.7
date	2013.11.18.11.47.16;	author eric;	state Exp;
branches;
next	1.6;

1.6
date	2013.10.28.18.50.23;	author eric;	state Exp;
branches;
next	1.5;

1.5
date	2013.05.24.17.03.14;	author eric;	state Exp;
branches;
next	1.4;

1.4
date	2013.04.12.18.22.49;	author eric;	state Exp;
branches;
next	1.3;

1.3
date	2013.02.13.14.34.43;	author gilles;	state Exp;
branches;
next	1.2;

1.2
date	2013.02.05.15.23.40;	author gilles;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.26.09.37.24;	author gilles;	state Exp;
branches;
next	;


desc
@@


1.15
log
@add a log_warn() so that when smtpd fails to start due to a problem reading
the configuration file of a table, user actually understands what happens

diff by Alexis Vachette, ok jung@@
@
text
@/*	$OpenBSD: table_static.c,v 1.14 2015/12/28 22:08:30 jung Exp $	*/

/*
 * Copyright (c) 2013 Eric Faurot <eric@@openbsd.org>
 * Copyright (c) 2012 Gilles Chehade <gilles@@poolp.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>

#include <netinet/in.h>
#include <arpa/inet.h>

#include <ctype.h>
#include <err.h>
#include <event.h>
#include <fcntl.h>
#include <imsg.h>
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <string.h>

#include "smtpd.h"
#include "log.h"

/* static backend */
static int table_static_config(struct table *);
static int table_static_update(struct table *);
static void *table_static_open(struct table *);
static int table_static_lookup(void *, struct dict *, const char *,
    enum table_service, union lookup *);
static int table_static_fetch(void *, struct dict *, enum table_service,
    union lookup *);
static void  table_static_close(void *);
static int table_static_parse(struct table *, const char *, enum table_type);

struct table_backend table_backend_static = {
	K_ALIAS|K_CREDENTIALS|K_DOMAIN|K_NETADDR|K_USERINFO|
	K_SOURCE|K_MAILADDR|K_ADDRNAME|K_MAILADDRMAP,
	table_static_config,
	table_static_open,
	table_static_update,
	table_static_close,
	table_static_lookup,
	table_static_fetch
};

static struct keycmp {
	enum table_service	service;
	int		       (*func)(const char *, const char *);
} keycmp[] = {
	{ K_DOMAIN, table_domain_match },
	{ K_NETADDR, table_netaddr_match },
	{ K_MAILADDR, table_mailaddr_match }
};


static int
table_static_config(struct table *table)
{
	/* no config ? ok */
	if (*table->t_config == '\0')
		return 1;

	return table_static_parse(table, table->t_config, T_LIST|T_HASH);
}

static int
table_static_parse(struct table *t, const char *config, enum table_type type)
{
	FILE	*fp;
	char	*buf = NULL;
	size_t	 sz = 0;
	ssize_t	 flen;
	char	*keyp;
	char	*valp;
	size_t	 ret = 0;

        if ((fp = fopen(config, "r")) == NULL) {
                log_warn("warn: Table \"%s\"", config);
                return 0;
        }

	while ((flen = getline(&buf, &sz, fp)) != -1) {
		if (buf[flen - 1] == '\n')
			buf[flen - 1] = '\0';

		keyp = buf;
		while (isspace((unsigned char)*keyp))
			++keyp;
		if (*keyp == '\0' || *keyp == '#')
			continue;
		valp = keyp;
		strsep(&valp, " \t:");
		if (valp) {
			while (*valp) {
				if (!isspace((unsigned char)*valp) &&
				    !(*valp == ':' &&
				    isspace((unsigned char)*(valp + 1))))
					break;
				++valp;
			}
			if (*valp == '\0')
				valp = NULL;
		}

		if (t->t_type == 0)
			t->t_type = (valp == keyp || valp == NULL) ? T_LIST :
			    T_HASH;

		if (!(t->t_type & type))
			goto end;

		if ((valp == keyp || valp == NULL) && t->t_type == T_LIST)
			table_add(t, keyp, NULL);
		else if ((valp != keyp && valp != NULL) && t->t_type == T_HASH)
			table_add(t, keyp, valp);
		else
			goto end;
	}
	/* Accept empty alias files; treat them as hashes */
	if (t->t_type == T_NONE && t->t_backend->services & K_ALIAS)
	    t->t_type = T_HASH;

	ret = 1;
end:
	free(buf);
	fclose(fp);
	return ret;
}

static int
table_static_update(struct table *table)
{
	struct table	*t;
	void		*p = NULL;

	/* no config ? ok */
	if (table->t_config[0] == '\0')
		goto ok;

	t = table_create("static", table->t_name, "update", table->t_config);
	if (!table_config(t))
		goto err;

	/* replace former table, frees t */
	while (dict_poproot(&table->t_dict, (void **)&p))
		free(p);
	dict_merge(&table->t_dict, &t->t_dict);
	table_destroy(t);

ok:
	log_info("info: Table \"%s\" successfully updated", table->t_name);
	return 1;

err:
	table_destroy(t);
	log_info("info: Failed to update table \"%s\"", table->t_name);
	return 0;
}

static void *
table_static_open(struct table *table)
{
	return table;
}

static void
table_static_close(void *hdl)
{
	return;
}

static int
table_static_lookup(void *hdl, struct dict *params, const char *key,
    enum table_service service, union lookup *lk)
{
	struct table   *m  = hdl;
	char	       *line;
	int		ret;
	int	       (*match)(const char *, const char *) = NULL;
	size_t		i;
	void	       *iter;
	const char     *k;
	char	       *v;

	for (i = 0; i < nitems(keycmp); ++i)
		if (keycmp[i].service == service)
			match = keycmp[i].func;

	line = NULL;
	iter = NULL;
	ret = 0;
	while (dict_iter(&m->t_dict, &iter, &k, (void **)&v)) {
		if (match) {
			if (match(key, k)) {
				line = v;
				ret = 1;
			}
		}
		else {
			if (strcmp(key, k) == 0) {
				line = v;
				ret = 1;
			}
		}
		if (ret)
			break;
	}

	if (lk == NULL)
		return ret ? 1 : 0;

	if (ret == 0)
		return 0;

	return table_parse_lookup(service, key, line, lk);
}

static int
table_static_fetch(void *hdl, struct dict *params,
    enum table_service service, union lookup *lk)
{
	struct table   *t = hdl;
	const char     *k;

	if (!dict_iter(&t->t_dict, &t->t_iter, &k, (void **)NULL)) {
		t->t_iter = NULL;
		if (!dict_iter(&t->t_dict, &t->t_iter, &k, (void **)NULL))
			return 0;
	}

	if (lk == NULL)
		return 1;

	return table_parse_lookup(service, NULL, k, lk);
}
@


1.14
log
@remove spaces after '!'

no binary change

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: table_static.c,v 1.13 2015/12/22 07:52:52 sunil Exp $	*/
d94 4
a97 3
	fp = fopen(config, "r");
	if (fp == NULL)
		return 0;
@


1.13
log
@Wrap long lines.

Ok gilles@@ jung@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_static.c,v 1.12 2015/11/24 07:40:26 gilles Exp $	*/
d241 1
a241 1
	if (! dict_iter(&t->t_dict, &t->t_iter, &k, (void **)NULL)) {
d243 1
a243 1
		if (! dict_iter(&t->t_dict, &t->t_iter, &k, (void **)NULL))
@


1.12
log
@teach table_db and table_static about mailaddr maps (unused yet)

ok sunil@@, ok jung@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_static.c,v 1.11 2015/10/11 12:50:00 sunil Exp $	*/
d45 3
a47 1
static int table_static_lookup(void *, struct dict *, const char *, enum table_service,
a48 1
static int table_static_fetch(void *, struct dict *, enum table_service, union lookup *);
d53 2
a54 1
	K_ALIAS|K_CREDENTIALS|K_DOMAIN|K_NETADDR|K_USERINFO|K_SOURCE|K_MAILADDR|K_ADDRNAME|K_MAILADDRMAP,
d112 2
a113 1
				    !(*valp == ':' && isspace((unsigned char)*(valp + 1))))
a120 1
		/**/
d189 2
a190 2
table_static_lookup(void *hdl, struct dict *params, const char *key, enum table_service service,
    union lookup *lk)
d235 2
a236 1
table_static_fetch(void *hdl, struct dict *params, enum table_service service, union lookup *lk)
@


1.11
log
@Convert some fgetln to getline.

Ok gilles@@, giovanni@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_static.c,v 1.10 2015/01/20 17:37:54 deraadt Exp $	*/
d52 1
a52 1
	K_ALIAS|K_CREDENTIALS|K_DOMAIN|K_NETADDR|K_USERINFO|K_SOURCE|K_MAILADDR|K_ADDRNAME,
@


1.10
log
@use <limits.h> comprehensively.  For now try to push <> includes to
each .c file, and out of the .h files.  To avoid overinclude.
ok gilles, in principle.  If this has been done right, -portable should
become easier to maintain.
@
text
@d1 1
a1 1
/*	$OpenBSD: table_static.c,v 1.9 2014/07/08 13:49:09 eric Exp $	*/
d85 3
a87 2
	char	*buf, *lbuf;
	size_t	 flen;
d96 1
a96 2
	lbuf = NULL;
	while ((buf = fgetln(fp, &flen))) {
a98 6
		else {
			lbuf = xmalloc(flen + 1, "table_config_parse");
			memcpy(lbuf, buf, flen);
			lbuf[flen] = '\0';
			buf = lbuf;
		}
d139 1
a139 1
	free(lbuf);
@


1.9
log
@Update the table API: lookup functions can take an optional parameters
dictionnary (currently not set). While there, add a helper for forking
external backends, and remove unused table functions.

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d35 1
@


1.8
log
@unsigned char casts for ctype
ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_static.c,v 1.7 2013/11/18 11:47:16 eric Exp $	*/
d44 1
a44 1
static int table_static_lookup(void *, const char *, enum table_service,
d46 1
a46 1
static int table_static_fetch(void *, enum table_service, union lookup *);
d192 1
a192 1
table_static_lookup(void *hdl, const char *key, enum table_service service,
d238 1
a238 1
table_static_fetch(void *hdl, enum table_service service, union lookup *lk)
@


1.7
log
@change dict_poproot() prototype: do not take key placeholder parameter as
it can't work that way.
@
text
@d1 1
a1 1
/*	$OpenBSD: table_static.c,v 1.6 2013/10/28 18:50:23 eric Exp $	*/
d106 1
a106 1
		while (isspace((int)*keyp))
d114 2
a115 2
				if (!isspace(*valp) &&
				    !(*valp == ':' && isspace(*(valp + 1))))
@


1.6
log
@alias files may be empty
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d164 1
a164 1
	while (dict_poproot(&table->t_dict, NULL, (void **)&p))
@


1.5
log
@sync with OpenSMTPD 5.3.2

ok gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_static.c,v 1.3 2013/02/13 14:34:43 gilles Exp $	*/
d138 4
@


1.4
log
@replace MAX_LINE_SIZE and SMTP_LINE_MAX with SMTPD_MAXLINESIZE for
consistency and clarity.  Remove useless and confusing extra byte in
a few arrays based on this define.

ok gilles@@
@
text
@d4 1
a22 1
#include <sys/param.h>
d41 1
a41 1
static int table_static_config(struct table *, const char *);
d45 2
a46 2
    void **);
static int table_static_fetch(void *, enum table_service, char **);
d48 1
a48 9

static int	table_static_credentials(const char *, char *, size_t, void **);
static int	table_static_alias(const char *, char *, size_t, void **);
static int	table_static_domain(const char *, char *, size_t, void **);
static int	table_static_netaddr(const char *, char *, size_t, void **);
static int	table_static_source(const char *, char *, size_t, void **);
static int	table_static_userinfo(const char *, char *, size_t, void **);
static int	table_static_mailaddr(const char *, char *, size_t, void **);
static int	table_static_addrname(const char *, char *, size_t, void **);
d71 1
a71 1
table_static_config(struct table *table, const char *config)
d74 1
a74 1
	if (config == NULL)
d77 66
a142 1
	return table_config_parse(table, config, T_LIST|T_HASH);
d148 2
a149 1
	struct table   *t;
d155 2
a156 2
	t = table_create(table->t_src, NULL, table->t_config);
	if (! t->t_backend->config(t, table->t_config))
d160 4
a163 1
	table_replace(table, t);
d189 1
a189 1
    void **retp)
a192 1
	size_t		len;
d224 1
a224 1
	if (retp == NULL)
d227 1
a227 2
	if (ret == 0) {
		*retp = NULL;
a228 1
	}
d230 1
a230 43
	if ((line = strdup(line)) == NULL)
		return -1;
	len = strlen(line);
	switch (service) {
	case K_ALIAS:
		ret = table_static_alias(key, line, len, retp);
		break;

	case K_CREDENTIALS:
		ret = table_static_credentials(key, line, len, retp);
		break;

	case K_DOMAIN:
		ret = table_static_domain(key, line, len, retp);
		break;

	case K_NETADDR:
		ret = table_static_netaddr(key, line, len, retp);
		break;

	case K_SOURCE:
		ret = table_static_source(key, line, len, retp);
		break;

	case K_USERINFO:
		ret = table_static_userinfo(key, line, len, retp);
		break;

	case K_MAILADDR:
		ret = table_static_mailaddr(key, line, len, retp);
		break;

	case K_ADDRNAME:
		ret = table_static_addrname(key, line, len, retp);
		break;

	default:
		ret = -1;
	}

	free(line);

	return ret;
d234 1
a234 1
table_static_fetch(void *hdl, enum table_service service, char **retp)
a237 1
	char	       *line;
d245 1
a245 1
	if (retp == NULL)
d248 1
a248 178
	if ((line = strdup(k)) == NULL)
		return -1;

	*retp = line;

	return 1;
}

static int
table_static_credentials(const char *key, char *line, size_t len, void **retp)
{
	struct credentials	*creds;
	char			*p;

	/* credentials are stored as user:password */
	if (len < 3)
		return -1;

	/* too big to fit in a smtp session line */
	if (len >= SMTPD_MAXLINESIZE)
		return -1;

	p = strchr(line, ':');
	if (p == NULL)
		return -1;

	if (p == line || p == line + len - 1)
		return -1;
	*p++ = '\0';

	creds = xcalloc(1, sizeof *creds, "table_static_credentials");
	if (strlcpy(creds->username, line, sizeof(creds->username))
	    >= sizeof(creds->username))
		goto err;

	if (strlcpy(creds->password, p, sizeof(creds->password))
	    >= sizeof(creds->password))
		goto err;

	*retp = creds;
	return 1;

err:
	*retp = NULL;
	free(creds);
	return -1;
}

static int
table_static_alias(const char *key, char *line, size_t len, void **retp)
{
	struct expand		*xp;

	xp = xcalloc(1, sizeof *xp, "table_static_alias");
	if (! expand_line(xp, line, 1))
		goto error;
	*retp = xp;
	return 1;

error:
	*retp = NULL;
	expand_free(xp);
	return -1;
}

static int
table_static_netaddr(const char *key, char *line, size_t len, void **retp)
{
	struct netaddr		*netaddr;

	netaddr = xcalloc(1, sizeof *netaddr, "table_static_netaddr");
	if (! text_to_netaddr(netaddr, line))
		goto error;
	*retp = netaddr;
	return 1;

error:
	*retp = NULL;
	free(netaddr);
	return -1;
}

static int
table_static_source(const char *key, char *line, size_t len, void **retp)
{
	struct source	*source = NULL;

	source = xcalloc(1, sizeof *source, "table_static_source");
	if (inet_pton(AF_INET6, line, &source->addr.in6) != 1)
		if (inet_pton(AF_INET, line, &source->addr.in4) != 1)
			goto error;
	*retp = source;
	return 1;

error:
	*retp = NULL;
	free(source);
	return 0;
}

static int
table_static_domain(const char *key, char *line, size_t len, void **retp)
{
	struct destination	*destination;

	destination = xcalloc(1, sizeof *destination, "table_static_domain");
	if (strlcpy(destination->name, line, sizeof destination->name)
	    >= sizeof destination->name)
		goto error;
	*retp = destination;
	return 1;

error:
	*retp = NULL;
	free(destination);
	return -1;
}

static int
table_static_userinfo(const char *key, char *line, size_t len, void **retp)
{
	struct userinfo		*userinfo = NULL;
	char			buffer[1024];

	if (! bsnprintf(buffer, sizeof buffer, "%s:%s", key, line))
		goto error;

	userinfo = xcalloc(1, sizeof *userinfo, "table_static_userinfo");
	if (! text_to_userinfo(userinfo, buffer))
	    goto error;
	*retp = userinfo;
	return 1;

error:
	*retp = NULL;
	free(userinfo);
	return -1;
}

static int
table_static_mailaddr(const char *key, char *line, size_t len, void **retp)
{
	struct mailaddr		*mailaddr;

	mailaddr = xcalloc(1, sizeof *mailaddr, "table_static_mailaddr");
	if (! text_to_mailaddr(mailaddr, line))
	    goto error;
	*retp = mailaddr;
	return 1;

error:
	*retp = NULL;
	free(mailaddr);
	return -1;
}

static int
table_static_addrname(const char *key, char *line, size_t len, void **retp)
{
	struct addrname		*addrname;

	addrname = xcalloc(1, sizeof *addrname, "table_static_addrname");

	if (inet_pton(AF_INET6, key, &addrname->addr.in6) != 1)
		if (inet_pton(AF_INET, key, &addrname->addr.in4) != 1)
			goto error;

	if (strlcpy(addrname->name, line, sizeof addrname->name)
	    >= sizeof addrname->name)
		goto error;

	*retp = addrname;
	return 1;

error:
	*retp = NULL;
	free(addrname);
	return -1;
@


1.3
log
@- when declaring a static table for userinfo, do not make username part of
  the value as it confuses users
  { gilles => gilles:10:100:/home } becomes { gilles => 10:100:/home }

ok eric, we'll discuss changes under the hood post-release
@
text
@d1 1
a1 1
/*	$OpenBSD: table_static.c,v 1.2 2013/02/05 15:23:40 gilles Exp $	*/
d252 1
a252 1
	if (len >= MAX_LINE_SIZE)
@


1.2
log
@unbreak broken smtpctl table update

fix by eric and I, ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: table_static.c,v 1.1 2013/01/26 09:37:24 gilles Exp $	*/
d354 5
a358 1
	struct userinfo		*userinfo;
d361 1
a361 1
	if (! text_to_userinfo(userinfo, line))
@


1.1
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: map_static.c,v 1.9 2012/11/12 14:58:53 eric Exp $	*/
a91 1
	char		name[MAX_LINE_SIZE];
d101 2
a102 12
	/* update successful, swap table names */
	strlcpy(name, table->t_name, sizeof name);
	strlcpy(table->t_name, t->t_name, sizeof table->t_name);
	strlcpy(t->t_name, name, sizeof t->t_name);

	/* swap, table id */
	table->t_id = table->t_id ^ t->t_id;
	t->t_id     = table->t_id ^ t->t_id;
	table->t_id = table->t_id ^ t->t_id;

	/* destroy former table */
	table_destroy(table);
d105 1
a105 1
	log_info("info: Table \"%s\" successfully updated", name);
d110 1
a110 1
	log_info("info: Failed to update table \"%s\"", name);
@

