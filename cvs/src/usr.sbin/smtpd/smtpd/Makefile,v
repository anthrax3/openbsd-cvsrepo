head	1.88;
access;
symbols
	OPENBSD_6_2:1.88.0.4
	OPENBSD_6_2_BASE:1.88
	OPENBSD_6_1:1.85.0.8
	OPENBSD_6_1_BASE:1.85
	OPENBSD_6_0:1.85.0.6
	OPENBSD_6_0_BASE:1.85
	OPENBSD_5_9:1.85.0.2
	OPENBSD_5_9_BASE:1.85
	OPENBSD_5_8:1.78.0.6
	OPENBSD_5_8_BASE:1.78
	OPENBSD_5_7:1.78.0.2
	OPENBSD_5_7_BASE:1.78
	OPENBSD_5_6:1.74.0.4
	OPENBSD_5_6_BASE:1.74
	OPENBSD_5_5:1.69.0.2
	OPENBSD_5_5_BASE:1.69
	OPENBSD_5_4:1.65.0.2
	OPENBSD_5_4_BASE:1.65
	OPENBSD_5_3:1.58.0.2
	OPENBSD_5_3_BASE:1.58
	OPENBSD_5_2:1.45.0.2
	OPENBSD_5_2_BASE:1.45
	OPENBSD_5_1_BASE:1.40
	OPENBSD_5_1:1.40.0.2
	OPENBSD_5_0:1.28.0.2
	OPENBSD_5_0_BASE:1.28
	OPENBSD_4_9:1.22.0.2
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.20.0.2
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.8.0.4
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6;
locks; strict;
comment	@# @;


1.88
date	2017.08.13.11.10.31;	author eric;	state Exp;
branches;
next	1.87;
commitid	gfmSsnStq4224Spd;

1.87
date	2017.05.26.21.30.00;	author gilles;	state Exp;
branches;
next	1.86;
commitid	495Pvi1mlO0oeSMF;

1.86
date	2017.05.22.13.43.15;	author gilles;	state Exp;
branches;
next	1.85;
commitid	2y0CGezRewYikytW;

1.85
date	2016.01.09.09.48.03;	author jung;	state Exp;
branches;
next	1.84;
commitid	zuzp7tPI7reNRYZS;

1.84
date	2015.12.28.13.26.44;	author benno;	state Exp;
branches;
next	1.83;
commitid	RXYDAZD3ExWtah2P;

1.83
date	2015.12.13.19.55.16;	author jung;	state Exp;
branches;
next	1.82;
commitid	tthrVCK5V2P7qt7q;

1.82
date	2015.12.13.10.54.11;	author gilles;	state Exp;
branches;
next	1.81;
commitid	7oThDZgvowAZS6Fw;

1.81
date	2015.12.01.10.06.59;	author gilles;	state Exp;
branches;
next	1.80;
commitid	JmmqApfHxPWGJXg0;

1.80
date	2015.11.23.21.50.12;	author gilles;	state Exp;
branches;
next	1.79;
commitid	HCn8C2lUMSgPueow;

1.79
date	2015.10.06.00.30.32;	author deraadt;	state Exp;
branches;
next	1.78;
commitid	PDerChiZfmP0Ac2f;

1.78
date	2015.01.22.09.26.05;	author reyk;	state Exp;
branches;
next	1.77;
commitid	o3hdD3oPPo4ygHrW;

1.77
date	2014.12.14.15.26.56;	author gilles;	state Exp;
branches;
next	1.76;
commitid	101jHHHL4Fs6QGmi;

1.76
date	2014.10.15.08.09.02;	author gilles;	state Exp;
branches;
next	1.75;
commitid	vGE3mGVwO8jbYedn;

1.75
date	2014.09.15.22.31.07;	author matthieu;	state Exp;
branches;
next	1.74;
commitid	Yxx7fUIFefxW5DrQ;

1.74
date	2014.04.15.20.55.42;	author miod;	state Exp;
branches;
next	1.73;

1.73
date	2014.04.09.18.55.19;	author eric;	state Exp;
branches;
next	1.72;

1.72
date	2014.04.04.16.10.42;	author eric;	state Exp;
branches;
next	1.71;

1.71
date	2014.04.01.23.14.25;	author fgsch;	state Exp;
branches;
next	1.70;

1.70
date	2014.03.26.18.14.22;	author eric;	state Exp;
branches;
next	1.69;

1.69
date	2014.02.04.15.44.06;	author eric;	state Exp;
branches;
next	1.68;

1.68
date	2014.01.18.05.54.51;	author martynas;	state Exp;
branches;
next	1.67;

1.67
date	2013.11.07.09.24.17;	author eric;	state Exp;
branches;
next	1.66;

1.66
date	2013.08.06.19.05.57;	author miod;	state Exp;
branches;
next	1.65;

1.65
date	2013.07.19.21.34.31;	author eric;	state Exp;
branches;
next	1.64;

1.64
date	2013.07.19.21.14.52;	author eric;	state Exp;
branches;
next	1.63;

1.63
date	2013.07.19.20.37.08;	author eric;	state Exp;
branches;
next	1.62;

1.62
date	2013.07.19.19.53.33;	author eric;	state Exp;
branches;
next	1.61;

1.61
date	2013.05.27.17.25.00;	author eric;	state Exp;
branches;
next	1.60;

1.60
date	2013.05.24.17.03.14;	author eric;	state Exp;
branches;
next	1.59;

1.59
date	2013.03.27.07.48.42;	author eric;	state Exp;
branches;
next	1.58;

1.58
date	2013.01.26.09.37.24;	author gilles;	state Exp;
branches;
next	1.57;

1.57
date	2012.10.14.11.58.23;	author gilles;	state Exp;
branches;
next	1.56;

1.56
date	2012.09.17.06.27.34;	author jmc;	state Exp;
branches;
next	1.55;

1.55
date	2012.09.16.16.24.08;	author chl;	state Exp;
branches;
next	1.54;

1.54
date	2012.09.16.10.48.28;	author eric;	state Exp;
branches;
next	1.53;

1.53
date	2012.09.05.21.52.03;	author eric;	state Exp;
branches;
next	1.52;

1.52
date	2012.09.01.16.09.15;	author gilles;	state Exp;
branches;
next	1.51;

1.51
date	2012.08.29.16.26.17;	author gilles;	state Exp;
branches;
next	1.50;

1.50
date	2012.08.26.18.56.08;	author gilles;	state Exp;
branches;
next	1.49;

1.49
date	2012.08.26.13.38.43;	author gilles;	state Exp;
branches;
next	1.48;

1.48
date	2012.08.25.23.35.09;	author chl;	state Exp;
branches;
next	1.47;

1.47
date	2012.08.18.18.18.23;	author gilles;	state Exp;
branches;
next	1.46;

1.46
date	2012.08.07.21.47.58;	author eric;	state Exp;
branches;
next	1.45;

1.45
date	2012.07.14.09.05.58;	author eric;	state Exp;
branches;
next	1.44;

1.44
date	2012.07.09.12.16.24;	author eric;	state Exp;
branches;
next	1.43;

1.43
date	2012.07.09.09.57.53;	author gilles;	state Exp;
branches;
next	1.42;

1.42
date	2012.05.29.19.53.10;	author gilles;	state Exp;
branches;
next	1.41;

1.41
date	2012.05.11.12.12.02;	author eric;	state Exp;
branches;
next	1.40;

1.40
date	2012.01.29.11.37.32;	author eric;	state Exp;
branches;
next	1.39;

1.39
date	2012.01.28.11.33.07;	author gilles;	state Exp;
branches;
next	1.38;

1.38
date	2012.01.11.22.24.37;	author gilles;	state Exp;
branches;
next	1.37;

1.37
date	2011.12.14.23.08.40;	author eric;	state Exp;
branches;
next	1.36;

1.36
date	2011.12.14.22.28.02;	author eric;	state Exp;
branches;
next	1.35;

1.35
date	2011.12.13.23.00.52;	author eric;	state Exp;
branches;
next	1.34;

1.34
date	2011.12.13.22.09.53;	author eric;	state Exp;
branches;
next	1.33;

1.33
date	2011.12.13.22.04.35;	author eric;	state Exp;
branches;
next	1.32;

1.32
date	2011.12.13.21.44.47;	author gilles;	state Exp;
branches;
next	1.31;

1.31
date	2011.10.23.09.30.07;	author gilles;	state Exp;
branches;
next	1.30;

1.30
date	2011.09.01.19.56.49;	author eric;	state Exp;
branches;
next	1.29;

1.29
date	2011.08.27.22.32.42;	author gilles;	state Exp;
branches;
next	1.28;

1.28
date	2011.05.21.18.43.08;	author gilles;	state Exp;
branches;
next	1.27;

1.27
date	2011.05.17.18.54.32;	author gilles;	state Exp;
branches;
next	1.26;

1.26
date	2011.05.17.16.42.06;	author gilles;	state Exp;
branches;
next	1.25;

1.25
date	2011.05.16.21.05.52;	author gilles;	state Exp;
branches;
next	1.24;

1.24
date	2011.04.14.17.06.43;	author gilles;	state Exp;
branches;
next	1.23;

1.23
date	2011.04.13.20.53.18;	author gilles;	state Exp;
branches;
next	1.22;

1.22
date	2010.11.29.15.25.56;	author gilles;	state Exp;
branches;
next	1.21;

1.21
date	2010.10.09.22.05.36;	author gilles;	state Exp;
branches;
next	1.20;

1.20
date	2010.06.01.23.06.25;	author jacekm;	state Exp;
branches;
next	1.19;

1.19
date	2010.06.01.19.47.09;	author jacekm;	state Exp;
branches;
next	1.18;

1.18
date	2010.05.31.23.38.56;	author jacekm;	state Exp;
branches;
next	1.17;

1.17
date	2010.05.26.16.44.32;	author nicm;	state Exp;
branches;
next	1.16;

1.16
date	2010.05.06.15.31.09;	author naddy;	state Exp;
branches;
next	1.15;

1.15
date	2010.04.21.21.04.29;	author gilles;	state Exp;
branches;
next	1.14;

1.14
date	2009.11.08.23.15.03;	author gilles;	state Exp;
branches;
next	1.13;

1.13
date	2009.09.04.11.49.23;	author jacekm;	state Exp;
branches;
next	1.12;

1.12
date	2009.08.27.11.37.30;	author jacekm;	state Exp;
branches;
next	1.11;

1.11
date	2009.08.07.20.21.48;	author gilles;	state Exp;
branches;
next	1.10;

1.10
date	2009.08.07.19.02.55;	author gilles;	state Exp;
branches;
next	1.9;

1.9
date	2009.08.06.13.40.45;	author gilles;	state Exp;
branches;
next	1.8;

1.8
date	2009.06.01.22.51.47;	author gilles;	state Exp;
branches;
next	1.7;

1.7
date	2009.03.23.15.27.41;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.27.22.54.01;	author gilles;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.27.22.48.29;	author gilles;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.21.02.18.46;	author gilles;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.11.22.17.11;	author gilles;	state Exp;
branches;
next	1.2;

1.2
date	2008.12.05.02.51.32;	author gilles;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.04.13.36.58;	author todd;	state Exp;
branches;
next	;


desc
@@


1.88
log
@bypass the filter code for incoming smtp sessions.
experimental support for filters has been removed from the config
parser already, and we want to get rid of the remaining code.

ok gilles@@
@
text
@#	$OpenBSD: Makefile,v 1.87 2017/05/26 21:30:00 gilles Exp $

.PATH:		${.CURDIR}/..

PROG=		smtpd

SRCS=	aliases.c
SRCS+=	bounce.c
SRCS+=	ca.c
SRCS+=	compress_backend.c
SRCS+=	config.c
SRCS+=	control.c
SRCS+=	crypto.c
SRCS+=	delivery.c
SRCS+=	dict.c
SRCS+=	dns.c
SRCS+=	envelope.c
SRCS+=	esc.c
SRCS+=	expand.c
SRCS+=	forward.c
SRCS+=	iobuf.c
SRCS+=	ioev.c
SRCS+=	limit.c
SRCS+=	lka.c
SRCS+=	lka_session.c
SRCS+=	log.c
SRCS+=	mailaddr.c
SRCS+=	mda.c
SRCS+=	mda_variables.c
SRCS+=	mproc.c
SRCS+=	mta.c
SRCS+=	mta_session.c
SRCS+=	parse.y
SRCS+=	pony.c
SRCS+=	queue.c
SRCS+=	queue_backend.c
SRCS+=	ruleset.c
SRCS+=	runq.c
SRCS+=	scheduler.c
SRCS+=	scheduler_backend.c
SRCS+=	smtp.c
SRCS+=	smtp_session.c
SRCS+=	smtpf_session.c
SRCS+=	smtpd.c
SRCS+=	ssl.c
SRCS+=	ssl_smtpd.c
SRCS+=	stat_backend.c
SRCS+=	table.c
SRCS+=	to.c
SRCS+=	tree.c
SRCS+=	util.c
SRCS+=	waitq.c

# RFC parsers
SRCS+=		rfc2822.c

# backends
SRCS+=		compress_gzip.c

SRCS+=		delivery_filename.c
SRCS+=		delivery_maildir.c
SRCS+=		delivery_mbox.c
SRCS+=		delivery_mda.c
SRCS+=		delivery_lmtp.c

SRCS+=		table_db.c
SRCS+=		table_getpwnam.c
SRCS+=		table_proc.c
SRCS+=		table_static.c

SRCS+=		queue_fs.c
SRCS+=		queue_null.c
SRCS+=		queue_proc.c
SRCS+=		queue_ram.c

SRCS+=		scheduler_ramqueue.c
SRCS+=		scheduler_null.c
SRCS+=		scheduler_proc.c

SRCS+=		stat_ramstat.c

MAN=		sendmail.8 smtpd.8 smtpd.conf.5 table.5
BINDIR=		/usr/sbin

LDADD+=		-levent -lutil -lssl -lcrypto -lm -lz
DPADD+=		${LIBEVENT} ${LIBUTIL} ${LIBSSL} ${LIBCRYPTO} ${LIBM} ${LIBZ}

CFLAGS+=	-fstack-protector-all
CFLAGS+=	-I${.CURDIR}/..
CFLAGS+=	-Wall -Wstrict-prototypes -Wmissing-prototypes
CFLAGS+=	-Wmissing-declarations
CFLAGS+=	-Wshadow -Wpointer-arith -Wcast-qual
CFLAGS+=	-Wsign-compare
CFLAGS+=	-Werror-implicit-function-declaration
#CFLAGS+=	-Werror # during development phase (breaks some archs)
CFLAGS+=	-DIO_SSL
CFLAGS+=	-DQUEUE_PROFILING
YFLAGS=

.include <bsd.prog.mk>
@


1.87
log
@move variables expansion out of lka_session into their own file, this is a
mechanical diff to simplify a bit the lka code and prepare for moving
variables outside of the lookup process into the chrooted mda process.
no functional change for now.

ok eric@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.86 2017/05/22 13:43:15 gilles Exp $
a19 1
SRCS+=	filter.c
@


1.86
log
@- filters are currently broken, do not allow using them until we're done
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.85 2016/01/09 09:48:03 jung Exp $
d30 1
@


1.85
log
@do not install filter_api.3 until the names are changed, to avoid namespace
pollution, this api should really be renamed with a prefix smtpd_*

prodded by deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.84 2015/12/28 13:26:44 benno Exp $
d43 1
@


1.84
log
@build smtpd and smtpctl with -Werror-implicit-function-declaration
ok tedu@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.83 2015/12/13 19:55:16 jung Exp $
d81 1
a81 1
MAN=		sendmail.8 smtpd.8 smtpd.conf.5 table.5 filter_api.3
@


1.83
log
@add filter api man page

ok gilles
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.82 2015/12/13 10:54:11 gilles Exp $
d93 1
@


1.82
log
@refactor smtp_session to plug into the filters infrastructure
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.81 2015/12/01 10:06:59 gilles Exp $
d81 1
a81 1
MAN=		sendmail.8 smtpd.8 smtpd.conf.5 table.5
@


1.81
log
@cleanup Makefile
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.80 2015/11/23 21:50:12 gilles Exp $
d20 1
@


1.80
log
@allow table API to lookup for mailaddr mappings

ok sunil@@, ok jung@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.79 2015/10/06 00:30:32 deraadt Exp $
d7 44
a50 9
SRCS=		aliases.c bounce.c ca.c compress_backend.c config.c		\
		control.c crypto.c delivery.c dict.c dns.c envelope.c esc.c	\
		expand.c forward.c iobuf.c ioev.c limit.c lka.c	lka_session.c	\
		log.c mailaddr.c mda.c mproc.c				\
		mta.c mta_session.c parse.y pony.c queue.c queue_backend.c	\
		ruleset.c runq.c scheduler.c scheduler_backend.c		\
		smtp.c smtp_session.c smtpd.c ssl.c				\
		ssl_smtpd.c stat_backend.c table.c to.c tree.c util.c		\
		waitq.c
d57 1
d63 1
d68 1
d73 1
d77 1
d86 1
a86 1
CFLAGS+=   -fstack-protector-all
@


1.79
log
@The performance hit for -fstack-protector-all is worth it here.
ok gilles
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.78 2015/01/22 09:26:05 reyk Exp $
d10 1
a10 1
		log.c mda.c mproc.c				\
@


1.78
log
@LibreSSL now supports loading of CA certificates from memory, replace
the internal and long-serving ssl_ctx_load_verify_memory() function
with a call to the SSL_CTX_load_verify_mem() API function.  The
ssl_privsep.c file with hacks for using OpenSSL in privsep'ed
processes can now go away; portable versions of smtpd and relayd
should start depending on LibreSSL or they have to carry ssl_privsep.c
in openbsd-compat to work with legacy OpenSSL.  No functional change.

Based on previous discussions with gilles@@ bluhm@@ and many others
OK bluhm@@ (as part of the libcrypto/libssl/libtls diff)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.77 2014/12/14 15:26:56 gilles Exp $
d45 2
@


1.77
log
@these are no longer used, remove
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.76 2014/10/15 08:09:02 gilles Exp $
d13 1
a13 1
		smtp.c smtp_session.c smtpd.c ssl.c ssl_privsep.c		\
@


1.76
log
@when From, To and Cc headers present users without domains, append the
listener hostname to avoid smtpd relaying a header that will be rewritten
by the destination MX.

ok eric@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.75 2014/09/15 22:31:07 matthieu Exp $
a17 1
SRCS+=		rfc822.c
@


1.75
log
@install sendmail.8 from smtpd now that sendmail is gone.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.74 2014/04/15 20:55:42 miod Exp $
d16 4
@


1.74
log
@Remove workarounds for ld reaching MAXDSIZ on vax, now that MAXDSIZ is
more comfortable.
Reminded by brad@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.73 2014/04/09 18:55:19 eric Exp $
d37 1
a37 1
MAN=		smtpd.8 smtpd.conf.5 table.5
@


1.73
log
@Zap the mfa process. It is not currently doing anything, and content filtering
will be done at session level anyway.

ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.72 2014/04/04 16:10:42 eric Exp $
a50 4

.if ${MACHINE} == "vax"
LDFLAGS+=	-Wl,--no-keep-memory
.endif
@


1.72
log
@Merge the mda, mta and smtp processes into a single unprivileged
process managing message reception, delivery and transfer.  Mostly
mechanical, but very intrusive as it required to rewamp all IMSG to
fix ambiguities.

with and ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.71 2014/04/01 23:14:25 fgsch Exp $
d10 1
a10 1
		log.c mda.c mfa.c mfa_session.c mproc.c				\
@


1.71
log
@Remove -ggdb -g3, this shouldn't be here
Requested by deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.70 2014/03/26 18:14:22 eric Exp $
d11 1
a11 1
		mta.c mta_session.c parse.y queue.c queue_backend.c		\
@


1.70
log
@asr API is now public
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.69 2014/02/04 15:44:06 eric Exp $
d42 1
a42 1
CFLAGS+=	-g3 -ggdb -I${.CURDIR}/..
@


1.69
log
@Add support for DSN and Enhanced Status Code
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.68 2014/01/18 05:54:51 martynas Exp $
d42 1
a42 1
CFLAGS+=	-g3 -ggdb -I${.CURDIR}/.. -I${.CURDIR}/../../../lib/libc/asr
@


1.68
log
@Remove -Wbounded:  it is now the compiler default.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.67 2013/11/07 09:24:17 eric Exp $
d8 1
a8 1
		control.c crypto.c delivery.c dict.c dns.c envelope.c		\
@


1.67
log
@missing manpage, spotted by jmc@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.66 2013/08/06 19:05:57 miod Exp $
d46 1
a46 1
CFLAGS+=	-Wsign-compare -Wbounded
@


1.66
log
@Switch vax to gcc 3.3.6.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.65 2013/07/19 21:34:31 eric Exp $
d37 1
a37 1
MAN=		smtpd.8 smtpd.conf.5
@


1.65
log
@Implement a scheduler_proc backend
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.64 2013/07/19 21:14:52 eric Exp $
d51 4
@


1.64
log
@Many MTA improvements:

- Better transient error handling logic: failing destinations are
  automatically disabled for a while.  When a destination is active
  again, ask the scheduler to retry previous envelopes immediatly.
- More informative error report when all routes fail for a mail.
- Implement a "smtpctl show hoststats" command to get the latest stat
  message per MX domain.
- Implement a "smtpctl show routes" command to show the state the
  currently known routes to remote MXs.
- Implement a "smtpctl resume route" command to re-enable a route that
  has been disabled.
- Do not hardcode limits
- Minor code improvements
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.63 2013/07/19 20:37:08 eric Exp $
d34 1
@


1.63
log
@Assorted queue improvements:
- cleanup the internal queue backend API and get rid of the QOP_* thing.
- implement a queue_proc backend
- rename queue_fsqueue.c to queue_fs
- enable support for queue encryption
- add an envelope cache
- better logging and error reporting
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.62 2013/07/19 19:53:33 eric Exp $
d9 1
a9 1
		expand.c forward.c iobuf.c ioev.c lka.c	lka_session.c		\
d12 1
a12 1
		ruleset.c scheduler.c scheduler_backend.c			\
@


1.62
log
@Add a table_proc backend for delegating table lookups to another
process.  Stop building experimental table_sqlite and table_ldap as
they will be provided as external backends.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.61 2013/05/27 17:25:00 eric Exp $
d8 1
a8 1
		control.c delivery.c dict.c dns.c envelope.c			\
d28 1
a28 1
SRCS+=		queue_fsqueue.c
d30 1
@


1.61
log
@No need to build asr files anymore.

ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.60 2013/05/24 17:03:14 eric Exp $
d7 8
a14 8
SRCS=		aliases.c bounce.c ca.c compress_backend.c config.c	\
		control.c delivery.c dict.c dns.c envelope.c		\
		expand.c forward.c iobuf.c ioev.c lka.c	lka_session.c	\
		log.c mda.c mfa.c mfa_session.c mproc.c			\
		mta.c mta_session.c parse.y queue.c queue_backend.c	\
		ruleset.c scheduler.c scheduler_backend.c		\
		smtp.c smtp_session.c smtpd.c ssl.c ssl_privsep.c	\
		ssl_smtpd.c stat_backend.c table.c to.c tree.c util.c	\
d26 1
a27 2
SRCS+=		table_ldap.c
SRCS+=		table_sqlite.c
a34 3
# ldap backend
SRCS+=		ber.c aldap.c

d38 2
a39 2
LDADD+=		-levent -lutil -lssl -lcrypto -lm -lz -lsqlite3
DPADD+=		${LIBEVENT} ${LIBUTIL} ${LIBSSL} ${LIBCRYPTO} ${LIBM} ${LIBZ} ${LIBSQLITE3}
@


1.60
log
@sync with OpenSMTPD 5.3.2

ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.57 2012/10/14 11:58:23 gilles Exp $
d3 1
a3 1
.PATH:		${.CURDIR}/.. ${.CURDIR}/../../../lib/libc/asr
a35 5
# resolver
SRCS+=		asr.c asr_debug.c asr_utils.c gethostnamadr_async.c	\
		res_send_async.c getaddrinfo_async.c getnameinfo_async.c \
		res_search_async.c

a51 1
CFLAGS+=	-DASR_OPT_THREADSAFE=0
a54 1

@


1.59
log
@fix build after asr update

ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.58 2013/01/26 09:37:24 gilles Exp $
d23 1
a49 1

@


1.58
log
@Sync with our smtpd repo:

* first bricks of ldap and sqlite support (not finished but both working)
* new table API to replace map API, all lookups are done through tables
* improved handling of temporary errors throughout the daemon
* improved scheduler and mta logic: connection reuse, optimizes batches
* improved queue: more tolerant to admin errors, new layout, less disk-IO
* improved memory usage under high load
* SSL certs/keys isolated to lookup process to avoid facing network
* VIRTUAL support improved, fully virtual setups possible now
* runtime tracing of processes through smtpctl trace
* ssl_privsep.c sync-ed with relayd
* ssl.c no longer contains smtpd specific interfaces
* smtpd-specific ssl bits moved to ssl_smtpd.c
* update mail address in copyright

FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE. FLUSH YOUR QUEUE.

smtpd.conf(5) simplified, it will require adaptations

ok eric@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.57 2012/10/14 11:58:23 gilles Exp $
d37 2
a38 1
		res_send_async.c getaddrinfo_async.c getnameinfo_async.c
@


1.57
log
@introduce map_file.c which will deprecate map_stdio.c

The idea is to have a file-backed map but to have smtpd(8) cache the maps
so that it cannot be partially read if edited while mail is received. The
file is read and converted to a static map (map_static.c), changes aren't
visible to smtpd until an explicit: smtpctl update map  which reads file,
builds a new static map and invalidates the former.

partial-read issue discussed with beck@@ and halex@@
idea to convert internally to a static map by eric@@

diff ok eric@@ and chl@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.56 2012/09/17 06:27:34 jmc Exp $
d7 9
a15 8
SRCS=		aliases.c auth.c bounce.c compress_backend.c config.c	\
		control.c delivery.c dns.c envelope.c			\
		expand.c forward.c iobuf.c ioev.c lka.c lka_session.c	\
		log.c map.c mda.c mfa.c mfa_session.c mta.c		\
		mta_session.c parse.y queue.c queue_backend.c ruleset.c \
		scheduler.c scheduler_backend.c smtp.c smtp_session.c	\
		smtpd.c	ssl.c ssl_privsep.c stat_backend.c tree.c	\
		user.c util.c
a17 2
SRCS+=		auth_bsd.c
SRCS+=		auth_pwd.c
d23 5
a27 3
SRCS+=		map_db.c
SRCS+=		map_file.c
SRCS+=		map_static.c
d29 2
d32 1
a33 2
#SRCS+=		stat_sqlite.c
SRCS+=		user_pwd.c
d39 3
d45 2
a46 2
LDADD+=		-levent -lutil -lssl -lcrypto -lm -lz
DPADD+=		${LIBEVENT} ${LIBUTIL} ${LIBSSL} ${LIBCRYPTO} ${LIBM} ${LIBZ}
d48 1
d55 1
d60 1
@


1.56
log
@revert previous and unlink aliases.5 and forward.5 from the build: these
files are too smtpd-specific for the general build;

ok gilles
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.55 2012/09/16 16:24:08 chl Exp $
d25 1
a26 1
SRCS+=		map_stdio.c
@


1.55
log
@link new aliases.5 and forward.5 to the build

ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.54 2012/09/16 10:48:28 eric Exp $
d37 1
a37 1
MAN=		aliases.5 forward.5 smtpd.8 smtpd.conf.5
@


1.54
log
@remove the thread_private hack.

ok chl@@ gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.53 2012/09/05 21:52:03 eric Exp $
d37 1
a37 1
MAN=		smtpd.8 smtpd.conf.5
@


1.53
log
@zap dead file
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.52 2012/09/01 16:09:15 gilles Exp $
d49 1
@


1.52
log
@- remove crypto_backend
- remove support for encrypted queue, it will be reintroduced later after
  pouring more thinking into it

if you had it enabled, flush your queue before updating
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.51 2012/08/29 16:26:17 gilles Exp $
d35 1
a35 2
		hostaddr_async.c res_send_async.c getaddrinfo_async.c	\
		getnameinfo_async.c
@


1.51
log
@Introduce the crypto_backend API and provide support for... encrypted queue
using the new API. By default, OpenSMTPD does not provide queue encryption,
but it can be enabled with "queue encryption [args]" and will transparently
encrypt/decrypt envelopes/messages as they hit the queue.

By default, it will use Blowfish in CBC mode with a different random IV for
each envelope and message. User provided key is expanded using sha256 but a
different cipher and digest may be specified in smtpd.conf

Queue encryption is compatible with compression and if both options are set
it will do them in correct order and transparently.

tested by chl@@, a few users and myself
ok chl@@ and I
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.50 2012/08/26 18:56:08 gilles Exp $
d8 1
a8 1
		control.c crypto_backend.c delivery.c dns.c envelope.c	\
@


1.50
log
@missing DPADD ... sorry
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.49 2012/08/26 13:38:43 gilles Exp $
d8 4
a11 4
		control.c delivery.c dns.c envelope.c expand.c		\
		forward.c iobuf.c ioev.c lka.c lka_session.c log.c map.c\
		mda.c mfa.c mfa_session.c mta.c mta_session.c parse.y	\
		queue.c queue_backend.c ruleset.c			\
@


1.49
log
@- use the same compression algorithm, gzip, for message file and envelopes
- rename compress_zlib.c to compress_gzip.c

with this commit it is possible to inspect a compressed queue with gzcat :)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.48 2012/08/25 23:35:09 chl Exp $
d8 1
a8 1
		control.c delivery.c dns.c encrypt.c envelope.c expand.c\
d42 1
a42 1
DPADD+=		${LIBEVENT} ${LIBUTIL} ${LIBSSL} ${LIBCRYPTO} ${LIBM}
@


1.48
log
@Add compress_backend, allowing compression of messages and envelopes in the queue.
To use it, just add "queue compress" in smtpd.conf. For now, only zlib is used.

lots of feedback from eric@@ and gilles@@

ok eric@@ gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.47 2012/08/18 18:18:23 gilles Exp $
d19 1
a19 1
SRCS+=		compress_zlib.c
@


1.47
log
@- introduce stat_backend, an API for pluggable statistic backends
  > statistics are no longer static structures in shared memory
  > statistics are only set, smtpd never uses them in its logic
  > each statistic is a key/value where key can be any (dynamic) string
- convert all uses of the former API to use the new one
- implement stat_ramstat that keeps non-persistent stats in ram structure

ok eric@@, ok chl@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.46 2012/08/07 21:47:58 eric Exp $
d7 4
a10 4
SRCS=		aliases.c auth.c bounce.c config.c control.c		\
		delivery.c dns.c expand.c envelope.c forward.c		\
		iobuf.c ioev.c lka.c lka_session.c log.c map.c mda.c	\
		mfa.c mfa_session.c mta.c mta_session.c	parse.y		\
d19 1
d41 1
a41 1
LDADD+=		-levent -lutil -lssl -lcrypto -lm
@


1.46
log
@Implement a set of tree_* functions for storing arbitrary pointers in splay
trees with uint64_t keys. Also add x{m,c}alloc and xstrdup helpers.

ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.45 2012/07/14 09:05:58 eric Exp $
d13 2
a14 1
		smtpd.c	ssl.c ssl_privsep.c stats.c tree.c user.c util.c
d28 2
@


1.45
log
@reorganize the makefile a bit

ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.44 2012/07/09 12:16:24 eric Exp $
d13 1
a13 1
		smtpd.c	ssl.c ssl_privsep.c stats.c user.c util.c
@


1.44
log
@move to the new resolver implementation, with temporary glue to use
the relevant files from asr directly.

ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.43 2012/07/09 09:57:53 gilles Exp $
d3 1
a3 1
.PATH:		 ${.CURDIR}/.. ${.CURDIR}/../../../lib/libc/asr
a5 13
SRCS=		aliases.c auth.c auth_bsd.c auth_pwd.c bounce.c		\
		iobuf.c ioev.c						\
		delivery.c delivery_filename.c delivery_maildir.c	\
		delivery_mbox.c delivery_mda.c				\
		config.c control.c dns.c expand.c envelope.c forward.c	\
		lka.c lka_session.c log.c map.c map_db.c map_stdio.c	\
		mda.c mfa.c mfa_session.c mta.c mta_session.c parse.y 	\
		queue.c ruleset.c scheduler.c scheduler_backend.c	\
		smtp.c							\
		smtp_session.c smtpd.c ssl.c ssl_privsep.c util.c	\
		queue_backend.c queue_fsqueue.c				\
		user.c user_pwd.c stats.c scheduler_ramqueue.c		\
		map_static.c
d7 26
a32 3
SRCS+=		asr.c asr_debug.c asr_utils.c				\
		res_send_async.c  hostaddr_async.c getaddrinfo_async.c	\
		getnameinfo_async.c gethostnamadr_async.c
@


1.43
log
@- runner is the terminology we used back when we had runqueues, we no
  longer have them and runner is actually a scheduler so rename.
- introduce scheduler_backend which does the same to scheduler than
  queue_backend does to queue and map_backend does to maps
- remove all occurences of RUNNER and runner, replace them with SCHEDULER
  and scheduler

ok eric@@, ok chl@@
@
text
@d1 3
a3 1
#	$OpenBSD: Makefile,v 1.42 2012/05/29 19:53:10 gilles Exp $
d15 1
a15 2
		smtp_session.c smtpd.c ssl.c ssl_privsep.c util.c asr.c \
		print.c pack.c dname.c res_random.c sockaddr.c 		\
d20 4
d29 1
a29 1
CFLAGS+=	-g3 -ggdb -I${.CURDIR}/..
a36 2

.PATH: ${.CURDIR}/..
@


1.42
log
@- introduce map_static.c as a backend to static maps in parse.y, this has
  the benefit that we no longer have two code paths whenever we deal with
  maps, we can always use the backend mechanism.

I have not plugged this in yet, I'll do it in a later commit, just get it
out of my sandbox
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.41 2012/05/11 12:12:02 eric Exp $
d11 2
a12 1
		queue.c ruleset.c runner.c smtp.c 			\
d16 1
a16 1
		user.c user_pwd.c stats.c scheduler.c scheduler_ramqueue.c \
@


1.41
log
@split the session logic off mta.c into mta_session.c

ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.40 2012/01/29 11:37:32 eric Exp $
d15 2
a16 1
		user.c user_pwd.c stats.c scheduler.c scheduler_ramqueue.c
@


1.40
log
@Rewrite io code in smtp and mta using the iobuf/ioev interface to have
a better separation between io and protocol logic.  As a side-effect,
it fixes a couple of long-standing issues in the io path, and
hopefully add fresh ones instead.  Kill client.c in the process.

ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.39 2012/01/28 11:33:07 gilles Exp $
d10 1
a10 1
		mda.c mfa.c mfa_session.c mta.c parse.y 		\
@


1.39
log
@- introduce the scheduler_backend API
- introduce the scheduler_ramqueue backend
- remove all occurences of ramqueue outside of the ramqueue backend
- teach runner how to use the new API

it is now possible to write custom schedulers !

ok eric@@, ok chl@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.38 2012/01/11 22:24:37 gilles Exp $
d5 3
a7 2
		client.c delivery.c delivery_filename.c			\
		delivery_maildir.c delivery_mbox.c delivery_mda.c	\
d28 1
@


1.38
log
@implement an envelope_ascii API that's not tied to a specific queue_backend
simplify queue_fsqueue
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.37 2011/12/14 23:08:40 eric Exp $
d13 2
a14 2
		ramqueue.c queue_backend.c queue_fsqueue.c		\
		user.c user_pwd.c stats.c
@


1.37
log
@finally kill queue_shared.c and move what is left to bounce.c
where it belongs.

ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.36 2011/12/14 22:28:02 eric Exp $
d7 1
a7 1
		config.c control.c dns.c expand.c forward.c		\
d14 1
a14 1
		queue_fsqueue_ascii.c user.c user_pwd.c stats.c
@


1.36
log
@split auth_backend.c for consistency

ok chl@@ gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.35 2011/12/13 23:00:52 eric Exp $
d10 1
a10 1
		queue.c queue_shared.c ruleset.c runner.c smtp.c 	\
@


1.35
log
@rename files for consistency.

ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.34 2011/12/13 22:09:53 eric Exp $
d4 2
a5 2
SRCS=		aliases.c auth_backend.c bounce.c client.c		\
		delivery.c delivery_filename.c				\
@


1.34
log
@merge map_backend.c into map.c

ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.33 2011/12/13 22:04:35 eric Exp $
d8 1
a8 2
		lka.c lka_session.c log.c map.c 			\
		map_backend_db.c map_backend_stdio.c			\
@


1.33
log
@split user_backend.c into user.c and user_pwd.c to be consistent with the
backend scheme. Also rename USER_GETPWNAM to USER_PWD.

ok chl@@ gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.32 2011/12/13 21:44:47 gilles Exp $
d8 1
a8 1
		lka.c lka_session.c log.c map.c map_backend.c		\
@


1.32
log
@- introduce delivery backend API (delivery.c)
- move each delivery method to it's own delivery backend
- simplify smtpd.c accordingly
- rename A_EXT -> A_MDA since that's what we really do

ok eric@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.31 2011/10/23 09:30:07 gilles Exp $
d15 1
a15 1
		queue_fsqueue_ascii.c user_backend.c stats.c
@


1.31
log
@fsqueue no longer stores envelopes by dumping the structure, instead use a
couple of load/dump functions to convert to and from a human readable fmt.
while at it kill struct delivery and merge back its fields to the envelope.

this basically means we shouldn't require users to flush their queues every
time we make a change to struct envelope.

work is not done, but we're at a better state than the binary fsqueue so
we'll improve it in-tree.

has been running on my own box for the last 12 hours or so
ok eric@@, chl@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.30 2011/09/01 19:56:49 eric Exp $
d5 2
@


1.30
log
@Introduce a small set of functions to manage stat counters in a
simpler and hopefully saner way.

ok gilles@@ chl@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.29 2011/08/27 22:32:42 gilles Exp $
d13 1
a13 1
		user_backend.c stats.c
@


1.29
log
@initial support for a session-time filtering API

currently only HELO/EHLO, MAIL, RCPT are supported, however ... I have
voluntarily disabled filters at smtpd.conf level so people don't play with
it until the API has stabilized a bit

discussed with several people in private, no one opposed the feature
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.28 2011/05/21 18:43:08 gilles Exp $
d13 1
a13 1
		user_backend.c
@


1.28
log
@until now the map_backend API was not really useful for backends that are
not key/val stores. refactored a bit so that smtpd can really take
advantage of backends. preliminary work for ldap support ;-)

no functionnal change
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.27 2011/05/17 18:54:32 gilles Exp $
d8 1
a8 1
		mda.c mfa.c mta.c parse.y 				\
@


1.27
log
@introduce new user_backend API for smtpd to lookup the users it wants to
deliver mail to. the only backend supported for now is USER_GETPWNAM and
it is not yet possible to switch to an alternate backend.

yes this means that we're very close from smtpd being able to handle fully
virtual accounts for both incoming and outgoing messages.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.26 2011/05/17 16:42:06 gilles Exp $
d7 7
a13 5
		map_parser.c mda.c mfa.c mta.c parse.y queue.c		\
		queue_shared.c ruleset.c runner.c smtp.c smtp_session.c	\
		smtpd.c ssl.c ssl_privsep.c util.c asr.c print.c pack.c	\
		dname.c	res_random.c sockaddr.c ramqueue.c		\
		queue_backend.c	queue_fsqueue.c user_backend.c
@


1.26
log
@smtpd now uses an auth_backend API to authenticate users that are allowed
to send mail so they do not necessarily need a local system account.

two backends are provided by default, bsd_auth(3) and getpwnam(3), however
smtpd will only select bsd_auth(3) for the moment and not provide a way to
chose any other backend (that's on purpose ;p).

bye bye authenticate() !
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.25 2011/05/16 21:05:52 gilles Exp $
d11 1
a11 1
		queue_backend.c	queue_fsqueue.c
@


1.25
log
@murder struct path and make sure smtpd uses simpler structures that do not
bring a shitload of unnecessary information everywhere. this required many
parts of smtpd to be refactored and more specifically envelope expansion.

in the process lots of code got simplified, and the envelope expansion code
has been isolated to lka_session.c with some longstanding bugs fixed.

Diff has been tested by many with no major regression reported.
armani@@ spotted a bug in a setup where a domain is listed a both primary
and virtual, I will fix that in-tree as it's becoming painful to maintain
this diff out.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.24 2011/04/14 17:06:43 gilles Exp $
d4 1
a4 1
SRCS=		aliases.c authenticate.c bounce.c client.c		\
@


1.24
log
@smtpd makes too many assumptions about the structure and layout of its
disk-based queue, it makes it near impossible to make changes to it without
editing twenty files... how am i going to implement mongodb support ? :-)

bring a new queue_backend API which hides the details of the disk-based
queue to smtpd. it is not "plugged in" yet and I'm filling the holes.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.23 2011/04/13 20:53:18 gilles Exp $
d6 6
a11 6
		lka.c log.c map.c map_backend.c map_parser.c mda.c	\
		mfa.c mta.c parse.y queue.c queue_shared.c ruleset.c	\
		runner.c smtp.c smtp_session.c smtpd.c ssl.c		\
		ssl_privsep.c util.c asr.c print.c pack.c dname.c	\
		res_random.c sockaddr.c ramqueue.c queue_backend.c	\
		queue_fsqueue.c
@


1.23
log
@following an idea from jacekm@@, smtpd now uses a ram-queue instead of doing
a continuous walk on the disk-queue. the implementation differs from what
jacekm@@ commited (and I backed out) a while ago in that it uses a queue and
a host tree required for upcoming features.

code will be improved in tree, it requires changes to be done in queue and
bounce API, I just wanted to commit a working version first ...

tested by todd@@ and I
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.22 2010/11/29 15:25:56 gilles Exp $
d10 2
a11 1
		res_random.c sockaddr.c ramqueue.c
@


1.22
log
@replace the fork-based-non-blocking-resolver-hack by shiny async resolver
written by eric@@. it is still experimental but still better than what we
had earlier so ... we'll improve in tree :)

diff by me with *lots* of help from eric@@, tested by todd and I (and a
few people out there)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.21 2010/10/09 22:05:36 gilles Exp $
d10 1
a10 1
		res_random.c sockaddr.c
@


1.21
log
@backout the "new" queue code commited 4 months ago. it has many good ideas,
is way more optimized than what we had earlier and there's definitely stuff
we want to keep, however it is early optimization that doesn't account for
many features and makes them hard (if not impossible) to write without
ugly workarounds that ruin the purpose of the optimizations.

the backout goes to 30 May's right before the commit and catches up on all
the non-queue related commits that happened since then.

i'll work on reintroducing the ideas from this queue when the basic
features we expect from a MTA are implemented.

suggested on tech@@ about a week ago, no objections, several "please make
smtpd move forward" mails from hackers and tech readers.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2010/05/26 16:44:32 nicm Exp $
d9 2
a10 1
		ssl_privsep.c util.c
@


1.20
log
@new queue, again; gcc2 compile tested by deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.18 2010/05/31 23:38:56 jacekm Exp $
d4 1
a4 1
SRCS=		aliases.c authenticate.c client.c		\
d7 3
a9 2
		mfa.c mta.c parse.y queue.c queue_backend.c ruleset.c	\
		smtp.c smtp_session.c smtpd.c ssl.c ssl_privsep.c util.c
@


1.19
log
@New queue doesn't compile on gcc2, back out.  Spotted by deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2010/05/26 16:44:32 nicm Exp $
d4 1
a4 1
SRCS=		aliases.c authenticate.c bounce.c client.c		\
d7 2
a8 3
		mfa.c mta.c parse.y queue.c queue_shared.c ruleset.c	\
		runner.c smtp.c smtp_session.c smtpd.c ssl.c		\
		ssl_privsep.c util.c
@


1.18
log
@Rewrite entire queue code.

Major goals:

1) Fix bad performance caused by the runner process doing full queue
read in 1s intervals.  My Soekris can now happily accept >50 msg/s
while having multi-thousand queue; before, one hundred queue would
bring the system to its knees.

2) Introduce Qmail-like scheduler that doesn't write as much to the
disk so that it needs less code for servicing error conditions,
which in some places can be tricky to get right.

3) Introduce separation between the scheduler and the backend; these
two queue aspects shouldn't be too tied too each other.  This means
that eg. storing queue in SQL requires rewrite of just queue_backend.c.

4) Make on-disk queue format architecture independent, and more
easily extensible, to reduce number of flag days in the future.

Minor goals:

ENOSPC no longer prevents delivery attempts, fixed session limiting
for relayed mail, improved batching of "relay via" mails, human-readable
mailq output, "show queue raw" command, clearer logging, sending
of single bounce about multiple recipients, exact delay= computation,
zero delay between deliveries while within session limit (currently
1s delay between re-scheduling is enforced), mta no longer requests
content fd, corrected session limit for bounce submissions, tiny
<100B queue files instead of multi-KB, detect loops before accepting
mail, reduce traffic on imsg channels by killing enormous struct
submit_status.
@
text
@d4 1
a4 1
SRCS=		aliases.c authenticate.c client.c		\
d7 3
a9 2
		mfa.c mta.c parse.y queue.c queue_backend.c ruleset.c	\
		smtp.c smtp_session.c smtpd.c ssl.c ssl_privsep.c util.c
@


1.17
log
@Move imsg into libutil and add a man page.

Minor bump for libutil.

Previous versions of this diff and man page looked at by various people.

"you should just commit" deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2010/05/06 15:31:09 naddy Exp $
d4 1
a4 1
SRCS=		aliases.c authenticate.c bounce.c client.c		\
d7 2
a8 3
		mfa.c mta.c parse.y queue.c queue_shared.c ruleset.c	\
		runner.c smtp.c smtp_session.c smtpd.c ssl.c		\
		ssl_privsep.c util.c
@


1.16
log
@don't clobber CFLAGS; ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2010/04/21 21:04:29 gilles Exp $
d4 2
a5 2
SRCS=		aliases.c authenticate.c bounce.c buffer.c client.c	\
		config.c control.c dns.c expand.c forward.c imsg.c	\
@


1.15
log
@map.c is growing big, split it into three different files:
map.c contains the map API calls as usable by smtpd processes,
map_backend.c contains backend implementations and map_parser.c contains
parser implementations used internally by the map API
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2009/11/08 23:15:03 gilles Exp $
d16 1
a16 1
CFLAGS=		-g3 -ggdb -I${.CURDIR}/..
@


1.14
log
@move expansion code to new expand.c to clearly separate it from aliases
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2009/09/04 11:49:23 jacekm Exp $
d6 4
a9 3
		lka.c log.c map.c mda.c mfa.c mta.c parse.y queue.c	\
		queue_shared.c ruleset.c runner.c smtp.c smtp_session.c	\
		smtpd.c ssl.c ssl_privsep.c util.c
@


1.13
log
@Major mda update:
- Fix: check external mda / mail.local exit code.
- Fix: check maildir rename(2) return code.
- Fix: check read(2) and write(2) return codes.
- Fix: in parent, batchp->env was not set to the env of the current process.
- Fix: clean file in tmp if maildir delivery fails.
- Fix: mark message as temporarily failed upon start, unmark upon sucessful
delivery. (safe default)
- Fix: kill all message drops, aka. PERMFAILUREs, with one exception: when the
local user no longer exists.
- Cleanup: store.c is merged with its only user, mda.c
- Feature: in parent, child_add now returns pointer to the new child struct.
This is used to store and later access child->mda_batch member in order to
associate children with their batches.
- Feature: in parent, external mda / mail.local will timeout after 5 minutes.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2009/08/27 11:37:30 jacekm Exp $
d5 4
a8 4
		config.c control.c dns.c forward.c imsg.c lka.c log.c	\
		map.c mda.c mfa.c mta.c parse.y queue.c queue_shared.c	\
		ruleset.c runner.c smtp.c smtp_session.c smtpd.c ssl.c	\
		ssl_privsep.c util.c
@


1.12
log
@Implement client side of the SMTP protocol in a library-like module.
Make bounce code and /usr/sbin/sendmail interface use this new API.
The mta process continues to use its own implementation, but
eventually will be switched to use this shared module.

Buffer routines are taken from buffer.c rather than from evbuffer.
This is one step forward to using a single buffer API across the
program.

"it looks sexy" gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2009/08/07 20:21:48 gilles Exp $
d8 1
a8 1
		ssl_privsep.c store.c util.c
@


1.11
log
@we were linking to libkeynote to use kn_base64_encode/decode, but honestly
this was a ugly hack, and i'd rather include resolv.h and use __b64_encode
and __b64_decode as openssh does. this commit kills all references to
libkeynote in smtpd, should help a bit with porting ... no functionnal
change.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2009/08/07 19:02:55 gilles Exp $
d4 6
a9 5
SRCS=		parse.y authenticate.c log.c bounce.c config.c buffer.c		\
		imsg.c smtpd.c lka.c mfa.c queue.c mta.c mda.c control.c	\
		smtp.c	smtp_session.c store.c					\
		ssl.c ssl_privsep.c dns.c aliases.c forward.c			\
		map.c runner.c util.c queue_shared.c ruleset.c
@


1.10
log
@wrap auth_userokay in a new function authenticate_user() and make sure
that only authenticate.c knows about bsd_auth, no functionnal change.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2009/08/06 13:40:45 gilles Exp $
d12 2
a13 2
LDADD+=		-levent -lutil -lkeynote -lssl -lcrypto -lm
DPADD+=		${LIBEVENT} ${LIBUTIL} ${LIBKEYNOTE} ${LIBSSL} ${LIBCRYPTO} ${LIBM}
@


1.9
log
@This commit reworks the entire mailer daemon support to actually make it
work for real. As an added bonus, it simplifies it, makes it follow the
same code path as regular messages and kills quite some code from mta,
mda and store. There's still some work needed but the most painful part
is behind us now ;)

ok jacekm@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2009/06/01 22:51:47 gilles Exp $
d4 4
a7 4
SRCS=		parse.y log.c bounce.c config.c buffer.c imsg.c		\
		smtpd.c lka.c mfa.c queue.c mta.c mda.c control.c	\
		smtp.c	smtp_session.c store.c				\
		ssl.c ssl_privsep.c dns.c aliases.c forward.c		\
@


1.8
log
@add new file ruleset.c with code related to the ruleset matching, and kill
the two or three "almost" identical versions of ruleset matching loops from
lka and mfa by having one unified function in ruleset.c; ok jacekm@@

while at it, bring maildir support back to life; trivial one-liner by me
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2009/03/23 15:27:41 deraadt Exp $
d4 1
a4 1
SRCS=		parse.y log.c config.c buffer.c imsg.c			\
@


1.7
log
@repair library use.  this was detected on the vax, a nice static linking
architecture.  it was silently creating broken code on other architectures.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2009/01/27 22:54:01 gilles Exp $
d8 1
a8 1
		map.c runner.c util.c queue_shared.c
@


1.6
log
@follow the naming convention of other files, discussed with jacekm@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2009/01/27 22:48:29 gilles Exp $
d12 2
a13 2
LDADD=		-levent -lutil -lssl -lcrypto -lkeynote -lm
DPADD=		${LIBEVENT} ${LIBSSL} ${LIBCRYPTO}
@


1.5
log
@first bricks of enqueue code which allows smtpctl to submit mail to queue
without "talking" smtp to listeners. currently, a big part of the server
side code is done (and requires a cleanup), next step is to get it usable
properly from a mail user agent.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2008/12/21 02:18:46 gilles Exp $
d8 1
a8 1
		map.c runner.c util.c sharedqueue.c
@


1.4
log
@- AUTH PLAIN may receive credentials as a parameter to AUTH or on a
	following line, this commit brings support for the latter which was
	not supported yet.
- AUTH LOGIN is now supported, allowing smtp auth support on clients that
	do not support AUTH PLAIN (ie: my mobile phone for instance ;)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2008/12/11 22:17:11 gilles Exp $
d8 1
a8 1
		map.c runner.c util.c
@


1.3
log
@- bsnprintf() is a wrapper to snprintf() that can be used when we handle an
	encoding error or a truncation the same way. This will turn many of
	our snprintf() checks into boolean checks.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2008/12/05 02:51:32 gilles Exp $
d12 1
a12 1
LDADD=		-levent -lutil -lssl -lcrypto
@


1.2
log
@- last part of the new queue code: the runner process (unprivileged and
	chrooted) is now in charge of doing the scheduling of deliveries,
	and the dispatching of messages to MDA and MTA. queue process only
	does inserts/updates/removals from the queue and can no longer be
	so busy that it delays answers to imsg from smtp server.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2008/12/04 13:36:58 todd Exp $
d8 1
a8 1
		map.c runner.c
@


1.1
log
@move smtpd build to smtpd subdir so we can traverse to newaliases and makemap
ok gilles@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2008/12/03 20:11:35 gilles Exp $
d8 1
a8 1
		map.c
@

