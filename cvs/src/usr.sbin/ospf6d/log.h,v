head	1.11;
access;
symbols
	OPENBSD_6_0:1.9.0.2
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.8.0.4
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.10
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.8
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.6
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.4
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.11
date	2017.01.23.08.41.02;	author benno;	state Exp;
branches;
next	1.10;
commitid	bknMQJV4A7RndI2I;

1.10
date	2016.09.02.14.06.35;	author benno;	state Exp;
branches;
next	1.9;
commitid	Z2jEGSLNZuIKq53q;

1.9
date	2016.06.06.15.57.44;	author benno;	state Exp;
branches;
next	1.8;
commitid	MyGYfH4IW1erkjil;

1.8
date	2014.11.03.07.40.31;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	KxzfvwQ64ayFBEwr;

1.7
date	2012.09.20.07.22.48;	author bluhm;	state Exp;
branches;
next	1.6;

1.6
date	2012.09.19.19.15.27;	author bluhm;	state Exp;
branches;
next	1.5;

1.5
date	2009.12.22.17.45.47;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2009.11.02.20.24.58;	author claudio;	state Exp;
branches;
next	1.3;

1.3
date	2009.03.29.19.07.56;	author stsp;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.14.20.42.05;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.08.10.44.50;	author norby;	state Exp;
branches;
next	;


desc
@@


1.11
log
@copy log.c/h from bgpd.
ok claudio
@
text
@/*	$OpenBSD: log.h,v 1.8 2016/09/02 14:02:48 benno Exp $ */

/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef LOG_H
#define LOG_H

#include <stdarg.h>
#include <sys/cdefs.h>

extern const char	*log_procname;

void	 log_init(int);
void	 log_verbose(int);
void	 logit(int, const char *, ...)
		__attribute__((__format__ (printf, 2, 3)));
void	 vlog(int, const char *, va_list)
		__attribute__((__format__ (printf, 2, 0)));
void	 log_warn(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 log_warnx(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 log_info(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 log_debug(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 fatal(const char *, ...) __dead
		__attribute__((__format__ (printf, 1, 2)));
void	 fatalx(const char *) __dead
		__attribute__((__format__ (printf, 1, 0)));

#endif /* LOG_H */
@


1.10
log
@work on making log.c similar in all daemons:

move daemon-local functions into new logmsg.c, and reduce
the (mostly whitespace) differences so that log.c's can be diffed easily.

ok claudio@@, feedback from henning@@, deraadt@@, reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.9 2016/06/06 15:57:44 benno Exp $ */
d41 2
a42 2
void	 fatal(const char *) __dead
		__attribute__((__format__ (printf, 1, 0)));
@


1.9
log
@add format attributes to the proper functions and then fix the
warning in rde.c
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.8 2014/11/03 07:40:31 bluhm Exp $ */
d19 2
a20 2
#ifndef _LOG_H_
#define	_LOG_H_
d23 3
d46 1
a46 6
const char	*log_in6addr(const struct in6_addr *);
const char	*log_in6addr_scope(const struct in6_addr *, unsigned int);
const char	*log_rtr_id(u_int32_t);
const char	*log_sockaddr(void *);

#endif /* _LOG_H_ */
@


1.8
log
@Convert the logic in yyerror().  Instead of creating a temporary
format string, create a temporary message.
OK deraadt@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.7 2012/09/20 07:22:48 bluhm Exp $ */
d26 16
a41 8
void	 logit(int, const char *, ...);
void	 vlog(int, const char *, va_list);
void	 log_warn(const char *, ...);
void	 log_warnx(const char *, ...);
void	 log_info(const char *, ...);
void	 log_debug(const char *, ...);
void	 fatal(const char *) __dead;
void	 fatalx(const char *) __dead;
@


1.7
log
@Bring back log_in6addr_scope() as ospf6ctl uses it.
Found by kettenis@@ the hard way.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.6 2012/09/19 19:15:27 bluhm Exp $ */
d26 1
@


1.6
log
@Do not care about the kame hack when logging a link local address.
The scope should have been converted when we received it from kernel.
Remove log_in6addr_scope(), it is not used.
ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.5 2009/12/22 17:45:47 claudio Exp $ */
d35 1
@


1.5
log
@Implement log_in6addr_scope() yet another function doing the same thing
again but different because of link local addressing.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.4 2009/11/02 20:24:58 claudio Exp $ */
a34 1
const char	*log_in6addr_scope(const struct in6_addr *, unsigned int);
@


1.4
log
@Add IMSG_CTL_LOG_VERBOSE similar to ospfd it allows to toggle debug logging.
henning, sthen, michele like the idea
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.3 2009/03/29 19:07:56 stsp Exp $ */
d35 1
@


1.3
log
@Add log_rtr_id() function to log 32bit numbers in dot-quad notation.
Most obvious use is to log router IDs.
To facilitate logging of multiple IDs within the same format string,
we use NUM_LOGS static buffers, just like log_sockaddr() does.

help and ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.2 2007/10/14 20:42:05 claudio Exp $ */
d25 1
@


1.2
log
@Switch log_sockaddr() to take a void * so it is not necessary to cast the
sockaddr_in6 or sockaddr_in to a sockaddr.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.1 2007/10/08 10:44:50 norby Exp $ */
d34 1
@


1.1
log
@Welcome ospf6d

The new ospf6d daemon will support OSPFv3, basically OSPF for IPv6 networks.

It is heavily based on ospfd(8), it is more or less a copy and paste of it.
Currently some unneeded stuff has been removed and the trasition from
IPv4 to IPv6 has begun.

ospf6d is not very usefull at the moment, it is being imported to allow more
people to work on it concurrently.

Not yet connected to the builds.

ok claudio@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.3 2006/04/25 08:40:33 claudio Exp $ */
d34 1
a34 1
const char	*log_sockaddr(struct sockaddr *);
@

