head	1.25;
access;
symbols
	OPENBSD_6_1:1.25.0.4
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.24.0.4
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.23.0.6
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.20.0.2
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.18.0.4
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.2
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.8
	OPENBSD_5_0:1.16.0.6
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.4
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.2
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4;
locks; strict;
comment	@ * @;


1.25
date	2017.01.08.23.04.42;	author krw;	state Exp;
branches;
next	1.24;
commitid	T1ZdV0xhVeBLIhr0;

1.24
date	2015.12.05.13.12.41;	author claudio;	state Exp;
branches;
next	1.23;
commitid	4xNKczBxYPO9zMjt;

1.23
date	2015.02.10.05.39.10;	author claudio;	state Exp;
branches;
next	1.22;
commitid	LcINzHD3xxMOidFk;

1.22
date	2014.07.11.16.43.33;	author krw;	state Exp;
branches;
next	1.21;
commitid	TgA9QmI8ib2B7iAZ;

1.21
date	2013.11.13.20.49.49;	author benno;	state Exp;
branches;
next	1.20;

1.20
date	2013.03.22.14.25.31;	author sthen;	state Exp;
branches;
next	1.19;

1.19
date	2013.03.11.17.40.11;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2012.04.11.08.33.53;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2012.04.10.07.56.50;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2010.07.01.19.47.04;	author bluhm;	state Exp;
branches;
next	1.15;

1.15
date	2010.05.14.11.52.19;	author claudio;	state Exp;
branches;
next	1.14;

1.14
date	2010.02.21.20.53.20;	author michele;	state Exp;
branches;
next	1.13;

1.13
date	2009.12.08.15.54.50;	author jsg;	state Exp;
branches;
next	1.12;

1.12
date	2009.12.02.19.10.02;	author mk;	state Exp;
branches;
next	1.11;

1.11
date	2009.11.02.20.24.58;	author claudio;	state Exp;
branches;
next	1.10;

1.10
date	2009.06.06.09.02.46;	author eric;	state Exp;
branches;
next	1.9;

1.9
date	2009.05.31.20.29.56;	author jacekm;	state Exp;
branches;
next	1.8;

1.8
date	2009.05.31.17.00.40;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2009.02.25.17.09.55;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.28.22.47.36;	author stsp;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.30.21.31.54;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2008.01.31.12.17.35;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2007.12.13.08.54.05;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.13.13.21.56;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.08.10.44.50;	author norby;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Replace hand-rolled for(;;) traversal of ctl_conns TAILQ with
TAILQ_FOREACH().

No intentional functional change.

ok reyk@@
@
text
@/*	$OpenBSD: control.c,v 1.24 2015/12/05 13:12:41 claudio Exp $ */

/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <errno.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "ospf6d.h"
#include "ospf6.h"
#include "ospfe.h"
#include "log.h"
#include "control.h"

#define	CONTROL_BACKLOG	5

struct ctl_conn	*control_connbyfd(int);
struct ctl_conn	*control_connbypid(pid_t);
void		 control_close(int);

int
control_init(char *path)
{
	struct sockaddr_un	 sun;
	int			 fd;
	mode_t			 old_umask;

	if ((fd = socket(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC | SOCK_NONBLOCK,
	    0)) == -1) {
		log_warn("control_init: socket");
		return (-1);
	}

	bzero(&sun, sizeof(sun));
	sun.sun_family = AF_UNIX;
	strlcpy(sun.sun_path, path, sizeof(sun.sun_path));

	if (unlink(path) == -1)
		if (errno != ENOENT) {
			log_warn("control_init: unlink %s", path);
			close(fd);
			return (-1);
		}

	old_umask = umask(S_IXUSR|S_IXGRP|S_IWOTH|S_IROTH|S_IXOTH);
	if (bind(fd, (struct sockaddr *)&sun, sizeof(sun)) == -1) {
		log_warn("control_init: bind: %s", path);
		close(fd);
		umask(old_umask);
		return (-1);
	}
	umask(old_umask);

	if (chmod(path, S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP) == -1) {
		log_warn("control_init: chmod");
		close(fd);
		(void)unlink(path);
		return (-1);
	}

	control_state.fd = fd;

	return (0);
}

int
control_listen(void)
{
	if (listen(control_state.fd, CONTROL_BACKLOG) == -1) {
		log_warn("control_listen: listen");
		return (-1);
	}

	event_set(&control_state.ev, control_state.fd, EV_READ,
	    control_accept, NULL);
	event_add(&control_state.ev, NULL);
	evtimer_set(&control_state.evt, control_accept, NULL);

	return (0);
}

void
control_cleanup(char *path)
{
	event_del(&control_state.ev);
	event_del(&control_state.evt);
	if (path)
		unlink(path);
}

/* ARGSUSED */
void
control_accept(int listenfd, short event, void *bula)
{
	int			 connfd;
	socklen_t		 len;
	struct sockaddr_un	 sun;
	struct ctl_conn		*c;

	event_add(&control_state.ev, NULL);
	if ((event & EV_TIMEOUT))
		return;

	len = sizeof(sun);
	if ((connfd = accept4(listenfd, (struct sockaddr *)&sun, &len,
	    SOCK_CLOEXEC | SOCK_NONBLOCK)) == -1) {
		/*
		 * Pause accept if we are out of file descriptors, or
		 * libevent will haunt us here too.
		 */
		if (errno == ENFILE || errno == EMFILE) {
			struct timeval evtpause = { 1, 0 };

			event_del(&control_state.ev);
			evtimer_add(&control_state.evt, &evtpause);
		} else if (errno != EWOULDBLOCK && errno != EINTR &&
		    errno != ECONNABORTED)
			log_warn("control_accept: accept");
		return;
	}

	if ((c = calloc(1, sizeof(struct ctl_conn))) == NULL) {
		log_warn("control_accept");
		close(connfd);
		return;
	}

	imsg_init(&c->iev.ibuf, connfd);
	c->iev.handler = control_dispatch_imsg;
	c->iev.events = EV_READ;
	event_set(&c->iev.ev, c->iev.ibuf.fd, c->iev.events,
	    c->iev.handler, &c->iev);
	event_add(&c->iev.ev, NULL);

	TAILQ_INSERT_TAIL(&ctl_conns, c, entry);
}

struct ctl_conn *
control_connbyfd(int fd)
{
	struct ctl_conn	*c;

	TAILQ_FOREACH(c, &ctl_conns, entry) {
		if (c->iev.ibuf.fd == fd)
			break;
	}

	return (c);
}

struct ctl_conn *
control_connbypid(pid_t pid)
{
	struct ctl_conn	*c;

	TAILQ_FOREACH(c, &ctl_conns, entry) {
		if (c->iev.ibuf.pid == pid)
			break;
	}

	return (c);
}

void
control_close(int fd)
{
	struct ctl_conn	*c;

	if ((c = control_connbyfd(fd)) == NULL) {
		log_warn("control_close: fd %d: not found", fd);
		return;
	}

	msgbuf_clear(&c->iev.ibuf.w);
	TAILQ_REMOVE(&ctl_conns, c, entry);

	event_del(&c->iev.ev);
	close(c->iev.ibuf.fd);

	/* Some file descriptors are available again. */
	if (evtimer_pending(&control_state.evt, NULL)) {
		evtimer_del(&control_state.evt);
		event_add(&control_state.ev, NULL);
	}

	free(c);
}

/* ARGSUSED */
void
control_dispatch_imsg(int fd, short event, void *bula)
{
	struct ctl_conn	*c;
	struct imsg	 imsg;
	int		 n;
	unsigned int	 ifidx;
	int		 verbose;

	if ((c = control_connbyfd(fd)) == NULL) {
		log_warn("control_dispatch_imsg: fd %d: not found", fd);
		return;
	}

	if (event & EV_READ) {
		if (((n = imsg_read(&c->iev.ibuf)) == -1 && errno != EAGAIN) ||
		    n == 0) {
			control_close(fd);
			return;
		}
	}
	if (event & EV_WRITE) {
		if (msgbuf_write(&c->iev.ibuf.w) <= 0 && errno != EAGAIN) {
			control_close(fd);
			return;
		}
	}

	for (;;) {
		if ((n = imsg_get(&c->iev.ibuf, &imsg)) == -1) {
			control_close(fd);
			return;
		}

		if (n == 0)
			break;

		switch (imsg.hdr.type) {
		case IMSG_CTL_FIB_COUPLE:
		case IMSG_CTL_FIB_DECOUPLE:
			ospfe_fib_update(imsg.hdr.type);
			/* FALLTHROUGH */
		case IMSG_CTL_RELOAD:
			c->iev.ibuf.pid = imsg.hdr.pid;
			ospfe_imsg_compose_parent(imsg.hdr.type, 0, NULL, 0);
			break;
		case IMSG_CTL_KROUTE:
		case IMSG_CTL_KROUTE_ADDR:
			c->iev.ibuf.pid = imsg.hdr.pid;
			ospfe_imsg_compose_parent(imsg.hdr.type, imsg.hdr.pid,
			    imsg.data, imsg.hdr.len - IMSG_HEADER_SIZE);
			break;
		case IMSG_CTL_SHOW_INTERFACE:
			if (imsg.hdr.len == IMSG_HEADER_SIZE +
			    sizeof(ifidx)) {
				memcpy(&ifidx, imsg.data, sizeof(ifidx));
				ospfe_iface_ctl(c, ifidx);
				imsg_compose(&c->iev.ibuf, IMSG_CTL_END, 0,
				    0, -1, NULL, 0);
			}
			break;
		case IMSG_CTL_SHOW_DATABASE:
		case IMSG_CTL_SHOW_DB_EXT:
		case IMSG_CTL_SHOW_DB_LINK:
		case IMSG_CTL_SHOW_DB_NET:
		case IMSG_CTL_SHOW_DB_RTR:
		case IMSG_CTL_SHOW_DB_INTRA:
		case IMSG_CTL_SHOW_DB_SELF:
		case IMSG_CTL_SHOW_DB_SUM:
		case IMSG_CTL_SHOW_DB_ASBR:
		case IMSG_CTL_SHOW_RIB:
		case IMSG_CTL_SHOW_SUM:
			c->iev.ibuf.pid = imsg.hdr.pid;
			ospfe_imsg_compose_rde(imsg.hdr.type, 0, imsg.hdr.pid,
			    imsg.data, imsg.hdr.len - IMSG_HEADER_SIZE);
			break;
		case IMSG_CTL_SHOW_NBR:
			ospfe_nbr_ctl(c);
			break;
		case IMSG_CTL_LOG_VERBOSE:
			if (imsg.hdr.len != IMSG_HEADER_SIZE +
			    sizeof(verbose))
				break;

			/* forward to other processes */
			ospfe_imsg_compose_parent(imsg.hdr.type, imsg.hdr.pid,
			    imsg.data, imsg.hdr.len - IMSG_HEADER_SIZE);
			ospfe_imsg_compose_rde(imsg.hdr.type, 0, imsg.hdr.pid,
			    imsg.data, imsg.hdr.len - IMSG_HEADER_SIZE);

			memcpy(&verbose, imsg.data, sizeof(verbose));
			log_verbose(verbose);
			break;
		default:
			log_debug("control_dispatch_imsg: "
			    "error handling imsg %d", imsg.hdr.type);
			break;
		}
		imsg_free(&imsg);
	}

	imsg_event_add(&c->iev);
}

int
control_imsg_relay(struct imsg *imsg)
{
	struct ctl_conn	*c;

	if ((c = control_connbypid(imsg->hdr.pid)) == NULL)
		return (0);

	return (imsg_compose_event(&c->iev, imsg->hdr.type, 0, imsg->hdr.pid,
	    -1, imsg->data, imsg->hdr.len - IMSG_HEADER_SIZE));
}
@


1.24
log
@EAGAIN handling for imsg_read. OK henning@@ benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.23 2015/02/10 05:39:10 claudio Exp $ */
d163 4
a166 3
	for (c = TAILQ_FIRST(&ctl_conns); c != NULL && c->iev.ibuf.fd != fd;
	    c = TAILQ_NEXT(c, entry))
		;	/* nothing */
d176 4
a179 3
	for (c = TAILQ_FIRST(&ctl_conns); c != NULL && c->iev.ibuf.pid != pid;
	    c = TAILQ_NEXT(c, entry))
		;	/* nothing */
@


1.23
log
@Same session_socket_blockmode() changes as done to ospfd. Also do the same
kroute change (make socket non-blocking and add trigger for partial reads).
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.22 2014/07/11 16:43:33 krw Exp $ */
d223 2
a224 1
		if ((n = imsg_read(&c->iev.ibuf)) == -1 || n == 0) {
@


1.22
log
@Close the control fd when it has reported EOF.

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.21 2013/11/13 20:49:49 benno Exp $ */
d48 2
a49 1
	if ((fd = socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {
a80 1
	session_socket_blockmode(fd, BM_NONBLOCK);
d125 2
a126 2
	if ((connfd = accept(listenfd,
	    (struct sockaddr *)&sun, &len)) == -1) {
a141 2
	session_socket_blockmode(connfd, BM_NONBLOCK);

a320 17
}

void
session_socket_blockmode(int fd, enum blockmodes bm)
{
	int	flags;

	if ((flags = fcntl(fd, F_GETFL, 0)) == -1)
		fatal("fcntl F_GETFL");

	if (bm == BM_NONBLOCK)
		flags |= O_NONBLOCK;
	else
		flags &= ~O_NONBLOCK;

	if ((flags = fcntl(fd, F_SETFL, flags)) == -1)
		fatal("fcntl F_SETFL");
@


1.21
log
@handle msgbuf_write() returning EAGAIN,
taken from claudios previous fix to ospfd.

"do it" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.20 2013/03/22 14:25:31 sthen Exp $ */
d231 1
a231 1
		if (msgbuf_write(&c->iev.ibuf.w) == -1 && errno != EAGAIN) {
@


1.20
log
@Allow use of an alternative control socket, ported from ospfd. ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.19 2013/03/11 17:40:11 deraadt Exp $ */
d231 1
a231 1
		if (msgbuf_write(&c->iev.ibuf.w) == -1) {
@


1.19
log
@handle ECONNABORTED errors from accept().  In many code blocks they can be
ignored silently and without aborting, much like EINTR and EWOULDBLOCK are.
ok's from various maintainers of these directories...
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.18 2012/04/11 08:33:53 deraadt Exp $ */
d42 1
a42 1
control_init(void)
d55 1
a55 1
	strlcpy(sun.sun_path, OSPF6D_SOCKET, sizeof(sun.sun_path));
d57 1
a57 1
	if (unlink(OSPF6D_SOCKET) == -1)
d59 1
a59 1
			log_warn("control_init: unlink %s", OSPF6D_SOCKET);
d66 1
a66 1
		log_warn("control_init: bind: %s", OSPF6D_SOCKET);
d73 1
a73 1
	if (chmod(OSPF6D_SOCKET, S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP) == -1) {
d76 1
a76 1
		(void)unlink(OSPF6D_SOCKET);
d103 1
a103 1
control_cleanup(void)
d107 2
a108 1
	unlink(OSPF6D_SOCKET);
@


1.18
log
@delete excessive evtimer_pending; ok claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.17 2012/04/10 07:56:50 deraadt Exp $ */
d135 2
a136 1
		} else if (errno != EWOULDBLOCK && errno != EINTR)
@


1.17
log
@Handle file descriptor exhaustion in the accept() case.
ok claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.16 2010/07/01 19:47:04 bluhm Exp $ */
d106 1
a106 2
	if (evtimer_pending(&control_state.evt, NULL))
		event_del(&control_state.evt);
@


1.16
log
@Fix all white space bugs in ospf6d at once.  No binary change.
ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.15 2010/05/14 11:52:19 claudio Exp $ */
d94 1
a94 1
	event_set(&control_state.ev, control_state.fd, EV_READ | EV_PERSIST,
d97 1
d105 3
d120 4
d127 10
a136 1
		if (errno != EWOULDBLOCK && errno != EINTR)
d198 7
@


1.15
log
@Use calloc() instead of malloc() to allocate the connection structure. This
way the memory is zeroed. This is equivalent to the relayd commit by reyk.
OK reyk, jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.14 2010/02/21 20:53:20 michele Exp $ */
d276 1
a276 1
			break;		
@


1.14
log
@Kill double declaration of control_imsg_relay().

From Christiano F. Haesbaert.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.13 2009/12/08 15:54:50 jsg Exp $ */
d126 1
a126 1
	if ((c = malloc(sizeof(struct ctl_conn))) == NULL) {
@


1.13
log
@porcesses -> processes
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.12 2009/12/02 19:10:02 mk Exp $ */
a35 2

int control_imsg_relay(struct imsg *imsg);
@


1.12
log
@log_warn() consistency.

`OK' claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.11 2009/11/02 20:24:58 claudio Exp $ */
d270 1
a270 1
			/* forward to other porcesses */
@


1.11
log
@Add IMSG_CTL_LOG_VERBOSE similar to ospfd it allows to toggle debug logging.
henning, sthen, michele like the idea
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.10 2009/06/06 09:02:46 eric Exp $ */
d122 1
a122 1
			log_warn("control_accept");
@


1.10
log
@make ospf6ctl/ospf6d imsg-in-a-lib ready too.

ospf6ctl is already broken in tree (not connected to build).

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.9 2009/05/31 20:29:56 jacekm Exp $ */
d194 1
d235 2
a236 3
			ospfe_imsg_compose_parent(imsg.hdr.type,
			    imsg.hdr.pid, imsg.data,
			    imsg.hdr.len - IMSG_HEADER_SIZE);
d265 14
@


1.9
log
@Remove redundant imsg_event_add calls; ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.8 2009/05/31 17:00:40 claudio Exp $ */
d134 6
a139 5
	imsg_init(&c->ibuf, connfd, control_dispatch_imsg);
	c->ibuf.events = EV_READ;
	event_set(&c->ibuf.ev, c->ibuf.fd, c->ibuf.events,
	    c->ibuf.handler, &c->ibuf);
	event_add(&c->ibuf.ev, NULL);
d149 1
a149 1
	for (c = TAILQ_FIRST(&ctl_conns); c != NULL && c->ibuf.fd != fd;
d161 1
a161 1
	for (c = TAILQ_FIRST(&ctl_conns); c != NULL && c->ibuf.pid != pid;
d178 1
a178 1
	msgbuf_clear(&c->ibuf.w);
d181 2
a182 2
	event_del(&c->ibuf.ev);
	close(c->ibuf.fd);
d201 1
a201 1
		if ((n = imsg_read(&c->ibuf)) == -1 || n == 0) {
d207 1
a207 1
		if (msgbuf_write(&c->ibuf.w) == -1) {
d214 1
a214 1
		if ((n = imsg_get(&c->ibuf, &imsg)) == -1) {
d228 1
a228 1
			c->ibuf.pid = imsg.hdr.pid;
d233 1
a233 1
			c->ibuf.pid = imsg.hdr.pid;
d243 2
a244 2
				imsg_compose(&c->ibuf, IMSG_CTL_END, 0,
				    0, NULL, 0);
d258 1
a258 1
			c->ibuf.pid = imsg.hdr.pid;
d273 1
a273 1
	imsg_event_add(&c->ibuf);
d284 2
a285 2
	return (imsg_compose(&c->ibuf, imsg->hdr.type, 0, imsg->hdr.pid,
	    imsg->data, imsg->hdr.len - IMSG_HEADER_SIZE));
@


1.8
log
@libevent handler fix to allow EV_READ and EV_WRITE to be set at the same
time in the callback. Same diff that went into ospfd applied with some
fuzz.
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.7 2009/02/25 17:09:55 claudio Exp $ */
a209 1
		imsg_event_add(&c->ibuf);
@


1.7
log
@Fix an invalid pointer dereference in control_close(). If control_connbyfd()
fails -- which should never happen -- the function does not return and is
accession the NULL set control pointer later on.
Found by Matthew Haub. OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.6 2009/01/28 22:47:36 stsp Exp $ */
d199 1
a199 2
	switch (event) {
	case EV_READ:
d204 3
a206 3
		break;
	case EV_WRITE:
		if (msgbuf_write(&c->ibuf.w) < 0) {
a210 3
		return;
	default:
		fatalx("unknown event");
@


1.6
log
@Teach ospf6d to originate Intra-Area-Prefix LSAs, which associate a list
of IPv6 prefixes with a Network LSA (there's another type of this LSA which
associates prefixes with a Router LSA -- this remains to be done).
Add what is necessary to allow ospf6ctl to read the new LSA type via IMSG.
ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.5 2008/12/30 21:31:54 claudio Exp $ */
d172 1
a172 1
	if ((c = control_connbyfd(fd)) == NULL)
d174 2
@


1.5
log
@First try at originating Link (type-8) LSA. Code is wrong and the initial
LSA is lost in lsa_flood. Put this in because it goes in the right direction
and ospf6d is work in progress. Add necessary framework so that we can print
Link LSA in ospf6ctl.
Diff mostly from stsp@@ ospf6ctl part by myself
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.4 2008/01/31 12:17:35 henning Exp $ */
d254 1
@


1.4
log
@do not leak confd on malloc failure in control_accept()
found by Igor Zinovik <zinovik@@cs.karelia.ru>
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.3 2007/12/13 08:54:05 claudio Exp $ */
d251 1
@


1.3
log
@Monster commit of stuff I did mostly last month. What it does:
 * removes kif and uses iface for everything interface related.
   This removes unneeded data redundancy which makes the code more complex.
 * adds the link local prefix to struct iface and attaches a list with
   the other prefixes to the struct iface. This is needed to generate the
   link LSA.
 * disconnects struct iface from struct area (the backpointer is gone)
   this will make the reload code a bit easier.
norby@@ agrees with the direction we're heading with this
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.2 2007/10/13 13:21:56 claudio Exp $ */
d130 1
@


1.2
log
@From ospfd: Funny typo, it is fib not fip so adjust function name.
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.1 2007/10/08 10:44:50 norby Exp $ */
a233 1
		case IMSG_CTL_IFINFO:
@


1.1
log
@Welcome ospf6d

The new ospf6d daemon will support OSPFv3, basically OSPF for IPv6 networks.

It is heavily based on ospfd(8), it is more or less a copy and paste of it.
Currently some unneeded stuff has been removed and the trasition from
IPv4 to IPv6 has begun.

ospf6d is not very usefull at the moment, it is being imported to allow more
people to work on it concurrently.

Not yet connected to the builds.

ok claudio@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: control.c,v 1.18 2007/03/21 10:54:30 claudio Exp $ */
d226 1
a226 1
			ospfe_fip_update(imsg.hdr.type);
@

