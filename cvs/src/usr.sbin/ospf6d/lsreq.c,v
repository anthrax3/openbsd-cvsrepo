head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.20
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.18
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.14
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.10
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.12
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.8
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.4
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.8
date	2013.03.22.14.26.35;	author sthen;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.02.08.56.44;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2010.06.03.10.00.34;	author bluhm;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.26.13.56.08;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.06.09.02.46;	author eric;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.16.20.26.04;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.10.14.09.25;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.08.10.44.50;	author norby;	state Exp;
branches;
next	;


desc
@@


1.8
log
@port from ospfd/lsreq.c r1.20, ok claudio@@

date: 2013/01/17 09:02:22;  author: markus;  state: Exp;  lines: +4 -2
the peer might still send more DD messages, even if the RDE has
processed all received DDs (dd_pending == 0), so we need to check
for state != NBR_STA_XCHNG; ok claudio@@
@
text
@/*	$OpenBSD: lsreq.c,v 1.7 2011/05/02 08:56:44 claudio Exp $ */

/*
 * Copyright (c) 2004, 2005, 2007 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>

#include "ospf6d.h"
#include "ospf6.h"
#include "log.h"
#include "ospfe.h"

extern struct imsgev		*iev_rde;

/* link state request packet handling */
int
send_ls_req(struct nbr *nbr)
{
	struct in6_addr		 dst;
	struct ls_req_hdr	 ls_req_hdr;
	struct lsa_entry	*le, *nle;
	struct ibuf		*buf;
	int			 ret;

	if ((buf = ibuf_open(nbr->iface->mtu - sizeof(struct ip))) == NULL)
		fatal("send_ls_req");

	switch (nbr->iface->type) {
	case IF_TYPE_POINTOPOINT:
		inet_pton(AF_INET6, AllSPFRouters, &dst);
		break;
	case IF_TYPE_BROADCAST:
	case IF_TYPE_NBMA:
	case IF_TYPE_POINTOMULTIPOINT:
	case IF_TYPE_VIRTUALLINK:
		dst = nbr->addr;
		break;
	default:
		fatalx("send_ls_req: unknown interface type");
	}

	/* OSPF header */
	if (gen_ospf_hdr(buf, nbr->iface, PACKET_TYPE_LS_REQUEST))
		goto fail;

	/* LSA header(s) */
	for (le = TAILQ_FIRST(&nbr->ls_req_list); le != NULL &&
	    buf->wpos + sizeof(struct ls_req_hdr) < buf->max; le = nle) {
		nbr->ls_req = nle = TAILQ_NEXT(le, entry);
		ls_req_hdr.zero = 0;
		ls_req_hdr.type = le->le_lsa->type;
		ls_req_hdr.ls_id = le->le_lsa->ls_id;
		ls_req_hdr.adv_rtr = le->le_lsa->adv_rtr;
		if (ibuf_add(buf, &ls_req_hdr, sizeof(ls_req_hdr)))
			goto fail;
	}

	/* calculate checksum */
	if (upd_ospf_hdr(buf, nbr->iface))
		goto fail;

	ret = send_packet(nbr->iface, buf->buf, buf->wpos, &dst);

	ibuf_free(buf);
	return (ret);
fail:
	log_warn("send_ls_req");
	ibuf_free(buf);
	return (-1);
}

void
recv_ls_req(struct nbr *nbr, char *buf, u_int16_t len)
{
	switch (nbr->state) {
	case NBR_STA_DOWN:
	case NBR_STA_ATTEMPT:
	case NBR_STA_INIT:
	case NBR_STA_2_WAY:
	case NBR_STA_XSTRT:
	case NBR_STA_SNAP:
		log_debug("recv_ls_req: packet ignored in state %s, "
		    "neighbor ID %s", nbr_state_name(nbr->state),
		    inet_ntoa(nbr->id));
		break;
	case NBR_STA_XCHNG:
	case NBR_STA_LOAD:
	case NBR_STA_FULL:
		imsg_compose_event(iev_rde, IMSG_LS_REQ, nbr->peerid,
		    0, -1, buf, len);
		break;
	default:
		fatalx("recv_ls_req: unknown neighbor state");
	}
}

/* link state request list */
void
ls_req_list_add(struct nbr *nbr, struct lsa_hdr *lsa)
{
	struct lsa_entry	*le;

	if (lsa == NULL)
		fatalx("ls_req_list_add: no LSA header");

	if ((le = calloc(1, sizeof(*le))) == NULL)
		fatal("ls_req_list_add");

	TAILQ_INSERT_TAIL(&nbr->ls_req_list, le, entry);
	le->le_lsa = lsa;
	nbr->ls_req_cnt++;
}

struct lsa_entry *
ls_req_list_get(struct nbr *nbr, struct lsa_hdr *lsa_hdr)
{
	struct lsa_entry	*le;

	TAILQ_FOREACH(le, &nbr->ls_req_list, entry) {
		if ((lsa_hdr->type == le->le_lsa->type) &&
		    (lsa_hdr->ls_id == le->le_lsa->ls_id) &&
		    (lsa_hdr->adv_rtr == le->le_lsa->adv_rtr))
			return (le);
	}
	return (NULL);
}

void
ls_req_list_free(struct nbr *nbr, struct lsa_entry *le)
{
	if (nbr->ls_req == le) {
		nbr->ls_req = TAILQ_NEXT(le, entry);
	}

	TAILQ_REMOVE(&nbr->ls_req_list, le, entry);
	free(le->le_lsa);
	free(le);
	nbr->ls_req_cnt--;

	/* received all requested LSA(s), send a new LS req */
	if (nbr->ls_req != NULL &&
	    nbr->ls_req == TAILQ_FIRST(&nbr->ls_req_list)) {
		start_ls_req_tx_timer(nbr);
	}

	/* we might not have received all DDs and are still in XCHNG */
	if (ls_req_list_empty(nbr) && nbr->dd_pending == 0 &&
	    nbr->state != NBR_STA_XCHNG)
		nbr_fsm(nbr, NBR_EVT_LOAD_DONE);
}

void
ls_req_list_clr(struct nbr *nbr)
{
	struct lsa_entry	*le;

	while ((le = TAILQ_FIRST(&nbr->ls_req_list)) != NULL) {
		TAILQ_REMOVE(&nbr->ls_req_list, le, entry);
		free(le->le_lsa);
		free(le);
	}

	nbr->ls_req_cnt = 0;
	nbr->ls_req = NULL;
}

int
ls_req_list_empty(struct nbr *nbr)
{
	return (TAILQ_EMPTY(&nbr->ls_req_list));
}

/* timers */
/* ARGSUSED */
void
ls_req_tx_timer(int fd, short event, void *arg)
{
	struct nbr	*nbr = arg;
	struct timeval	 tv;

	switch (nbr->state) {
	case NBR_STA_DOWN:
	case NBR_STA_ATTEMPT:
	case NBR_STA_INIT:
	case NBR_STA_2_WAY:
	case NBR_STA_SNAP:
	case NBR_STA_XSTRT:
	case NBR_STA_XCHNG:
		return;
	case NBR_STA_LOAD:
		send_ls_req(nbr);
		break;
	case NBR_STA_FULL:
		return;
	default:
		log_debug("ls_req_tx_timer: unknown neighbor state, "
		    "neighbor ID %s", inet_ntoa(nbr->id));
		break;
	}

	/* reschedule lsreq_tx_timer */
	if (nbr->state == NBR_STA_LOAD) {
		timerclear(&tv);
		tv.tv_sec = nbr->iface->rxmt_interval;
		if (evtimer_add(&nbr->lsreq_tx_timer, &tv) == -1)
			fatal("ls_req_tx_timer");
	}
}

void
start_ls_req_tx_timer(struct nbr *nbr)
{
	struct timeval tv;

	if (nbr == nbr->iface->self)
		return;

	timerclear(&tv);
	if (evtimer_add(&nbr->lsreq_tx_timer, &tv) == -1)
		fatal("start_ls_req_tx_timer");
}

void
stop_ls_req_tx_timer(struct nbr *nbr)
{
	if (nbr == nbr->iface->self)
		return;

	if (evtimer_del(&nbr->lsreq_tx_timer) == -1)
		fatal("stop_ls_req_tx_timer");
}
@


1.7
log
@wrap long line
@
text
@d1 1
a1 1
/*	$OpenBSD: lsreq.c,v 1.6 2010/06/03 10:00:34 bluhm Exp $ */
d163 3
a165 1
	if (ls_req_list_empty(nbr) && nbr->dd_pending == 0)
@


1.6
log
@The is no md5 authentication in OSPFv3.  Remove some leftovers from
the ospf6d packet lenght calculation.
ok claudio@@ stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lsreq.c,v 1.5 2010/05/26 13:56:08 nicm Exp $ */
d106 2
a107 1
		imsg_compose_event(iev_rde, IMSG_LS_REQ, nbr->peerid, 0, -1, buf, len);
@


1.5
log
@Rename some imsg bits to make namespace collisions less likely buf to
ibuf, buf_read to ibuf_read, READ_BUF_SIZE to IBUF_READ_SIZE.

ok henning gilles claudio jacekm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: lsreq.c,v 1.4 2009/06/06 09:02:46 eric Exp $ */
d63 1
a63 1
	/* LSA header(s), keep space for a possible md5 sum */
d65 1
a65 2
	    buf->wpos + sizeof(struct ls_req_hdr) < buf->max -
	    MD5_DIGEST_LENGTH; le = nle) {
@


1.4
log
@make ospf6ctl/ospf6d imsg-in-a-lib ready too.

ospf6ctl is already broken in tree (not connected to build).

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lsreq.c,v 1.3 2007/10/16 20:26:04 claudio Exp $ */
d39 1
a39 1
	struct buf		*buf;
d42 1
a42 1
	if ((buf = buf_open(nbr->iface->mtu - sizeof(struct ip))) == NULL)
d72 1
a72 1
		if (buf_add(buf, &ls_req_hdr, sizeof(ls_req_hdr)))
d82 1
a82 1
	buf_free(buf);
d86 1
a86 1
	buf_free(buf);
@


1.3
log
@correctly send lsreq, there is no need to change the byte-order of the lsa type.
@
text
@d1 1
a1 1
/*	$OpenBSD: lsreq.c,v 1.2 2007/10/10 14:09:25 claudio Exp $ */
d30 1
a30 1
extern struct imsgbuf		*ibuf_rde;
d107 1
a107 1
		imsg_compose(ibuf_rde, IMSG_LS_REQ, nbr->peerid, 0, buf, len);
@


1.2
log
@send_packet() now takes a struct in6_addr as destination instead of a
struct sockaddr_in6 and builds the struct sockaddr_in6 internaly adding scope
if necessary. While there switch to sendto() we don't need any of the sendmsg()
features here.
OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lsreq.c,v 1.1 2007/10/08 10:44:50 norby Exp $ */
d68 2
a69 1
		ls_req_hdr.type = htonl(le->le_lsa->type);
@


1.1
log
@Welcome ospf6d

The new ospf6d daemon will support OSPFv3, basically OSPF for IPv6 networks.

It is heavily based on ospfd(8), it is more or less a copy and paste of it.
Currently some unneeded stuff has been removed and the trasition from
IPv4 to IPv6 has begun.

ospf6d is not very usefull at the moment, it is being imported to allow more
people to work on it concurrently.

Not yet connected to the builds.

ok claudio@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lsreq.c,v 1.14 2006/03/13 09:36:06 claudio Exp $ */
d36 1
a36 1
	struct sockaddr_in6	 dst;
a44 4
	/* set destination */
	dst.sin6_family = AF_INET6;
	dst.sin6_len = sizeof(struct sockaddr_in6);

d47 1
a47 2
//XXX		inet_aton(AllSPFRouters, &dst.sin_addr);
		inet_pton(AF_INET6, AllSPFRouters, &dst.sin6_addr);
d53 1
a53 2
//XXX		dst.sin_addr.s_addr = nbr->addr.s_addr;
		dst.sin6_addr = nbr->addr;
@

