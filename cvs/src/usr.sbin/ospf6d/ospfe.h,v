head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.10
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.12
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.8
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.4
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.8
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.6
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.2
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.17.0.10
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.8
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.6
	OPENBSD_5_0:1.17.0.4
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.2
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.16.0.2
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.4
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.14.0.2
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.9.0.4
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9;
locks; strict;
comment	@ * @;


1.19
date	2014.10.25.03.23.49;	author lteo;	state Exp;
branches;
next	1.18;
commitid	2uw1UTO4k6erpWzK;

1.18
date	2013.03.25.14.29.35;	author markus;	state Exp;
branches;
next	1.17;

1.17
date	2010.08.22.20.27.52;	author bluhm;	state Exp;
branches;
next	1.16;

1.16
date	2010.05.26.13.56.08;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2009.03.29.16.24.38;	author stsp;	state Exp;
branches;
next	1.14;

1.14
date	2009.02.19.22.08.14;	author stsp;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.29.19.07.53;	author stsp;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.27.21.58.28;	author stsp;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.30.21.31.54;	author claudio;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.28.17.56.16;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2007.12.13.08.54.05;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.13.13.21.56;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2007.10.11.20.20.44;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2007.10.11.19.06.41;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2007.10.11.18.43.42;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2007.10.10.14.09.25;	author claudio;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.09.06.26.47;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.09.06.17.40;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.08.10.44.50;	author norby;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Remove unnecessary netinet/in_systm.h include.

ok millert@@
@
text
@/*	$OpenBSD: ospfe.h,v 1.18 2013/03/25 14:29:35 markus Exp $ */

/*
 * Copyright (c) 2004, 2005 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _OSPFE_H_
#define _OSPFE_H_

#define max(x,y) ((x) > (y) ? (x) : (y))

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/ip.h>

TAILQ_HEAD(ctl_conns, ctl_conn)	ctl_conns;

struct lsa_entry {
	TAILQ_ENTRY(lsa_entry)	 entry;
	union {
		struct lsa_hdr	*lu_lsa;
		struct lsa_ref	*lu_ref;
	}			 le_data;
	unsigned short		 le_when;
	unsigned short		 le_oneshot;
};
#define	le_lsa	le_data.lu_lsa
#define	le_ref	le_data.lu_ref

struct lsa_ref {
	LIST_ENTRY(lsa_ref)	 entry;
	struct lsa_hdr		 hdr;
	void			*data;
	time_t			 stamp;
	int			 refcnt;
	u_int16_t		 len;
};

struct nbr_stats {
	u_int32_t		 sta_chng;
};

struct nbr {
	LIST_ENTRY(nbr)		 entry, hash;
	struct event		 inactivity_timer;
	struct event		 db_tx_timer;
	struct event		 lsreq_tx_timer;
	struct event		 ls_retrans_timer;
	struct event		 adj_timer;

	struct nbr_stats	 stats;

	struct lsa_head		 ls_retrans_list;
	struct lsa_head		 db_sum_list;
	struct lsa_head		 ls_req_list;

	struct in6_addr		 addr;		/* ip6 address */
	struct in_addr		 id;		/* router id */
	struct in_addr		 dr;		/* designated router */
	struct in_addr		 bdr;		/* backup designated router */

	struct iface		*iface;
	struct lsa_entry	*ls_req;
	struct lsa_entry	*dd_end;

	u_int32_t		 iface_id;	/* id of neighbor's iface */
	u_int32_t		 dd_seq_num;
	u_int32_t		 dd_pending;
	u_int32_t		 peerid;	/* unique ID in DB */
	u_int32_t		 ls_req_cnt;
	u_int32_t		 ls_ret_cnt;
	u_int32_t		 options;
	u_int32_t		 last_rx_options;
	u_int32_t		 link_options;	/* options from link-LSA */

	time_t			 uptime;
	int			 state;
	u_int8_t		 priority;
	u_int8_t		 last_rx_bits;
	u_int8_t		 dd_master;
	u_int8_t		 dd_more;
	u_int8_t		 dd_snapshot;	/* snapshot running */
};

/* database.c */
int	 send_db_description(struct nbr *);
void	 recv_db_description(struct nbr *, char *, u_int16_t);
void	 db_sum_list_add(struct nbr *, struct lsa_hdr *);
int	 db_sum_list_del(struct nbr *, struct lsa_hdr *);
void	 db_sum_list_clr(struct nbr *);
void	 db_tx_timer(int, short, void *);
void	 start_db_tx_timer(struct nbr *);
void	 stop_db_tx_timer(struct nbr *);

/* hello.c */
int	 send_hello(struct iface *);
void	 recv_hello(struct iface *,  struct in6_addr *, u_int32_t,
	     char *, u_int16_t);

/* ospfe.c */
pid_t		 ospfe(struct ospfd_conf *, int[2], int[2], int[2]);
void		 ospfe_dispatch_main(int, short, void *);
void		 ospfe_dispatch_rde(int, short, void *);
int		 ospfe_imsg_compose_parent(int, pid_t, void *, u_int16_t);
int		 ospfe_imsg_compose_rde(int, u_int32_t, pid_t, void *,
		     u_int16_t);
u_int32_t	 ospfe_router_id(void);
void		 ospfe_fib_update(int);
void		 ospfe_iface_ctl(struct ctl_conn *, unsigned int);
void		 ospfe_nbr_ctl(struct ctl_conn *);
void		 orig_rtr_lsa(struct iface *);
void		 orig_net_lsa(struct iface *);
void		 orig_link_lsa(struct iface *);
void		 ospfe_demote_area(struct area *, int);
void		 ospfe_demote_iface(struct iface *, int);

/* interface.c */
int		 if_fsm(struct iface *, enum iface_event);

void		 if_del(struct iface *);
void		 if_start(struct ospfd_conf *, struct iface *);

int		 if_act_start(struct iface *);
int		 if_act_elect(struct iface *);
int		 if_act_reset(struct iface *);

struct ctl_iface	*if_to_ctl(struct iface *);

int	 if_join_group(struct iface *, struct in6_addr *);
int	 if_leave_group(struct iface *, struct in6_addr *);
int	 if_set_mcast(struct iface *);
void	 if_set_recvbuf(int);
int	 if_set_mcast_loop(int);
int	 if_set_ipv6_pktinfo(int, int);
int	 if_set_ipv6_checksum(int);

/* lsack.c */
int	 delay_lsa_ack(struct iface *, struct lsa_hdr *);
int	 send_ls_ack(struct iface *, struct in6_addr, void *, size_t);
void	 recv_ls_ack(struct nbr *, char *, u_int16_t);
int	 lsa_hdr_check(struct nbr *, struct lsa_hdr *);
void	 ls_ack_list_add(struct iface *, struct lsa_hdr *);
void	 ls_ack_list_free(struct iface *, struct lsa_entry *);
void	 ls_ack_list_clr(struct iface *);
int	 ls_ack_list_empty(struct iface *);
void	 ls_ack_tx_timer(int, short, void *);
void	 start_ls_ack_tx_timer(struct iface *);
void	 stop_ls_ack_tx_timer(struct iface *);

/* lsreq.c */
int	 send_ls_req(struct nbr *);
void	 recv_ls_req(struct nbr *, char *, u_int16_t);
void	 ls_req_list_add(struct nbr *, struct lsa_hdr *);
int	 ls_req_list_del(struct nbr *, struct lsa_hdr *);
struct lsa_entry	*ls_req_list_get(struct nbr *, struct lsa_hdr *);
void	 ls_req_list_free(struct nbr *, struct lsa_entry *);
void	 ls_req_list_clr(struct nbr *);
int	 ls_req_list_empty(struct nbr *);
void	 ls_req_tx_timer(int, short, void *);
void	 start_ls_req_tx_timer(struct nbr *);
void	 stop_ls_req_tx_timer(struct nbr *);

/* lsupdate.c */
int		 lsa_flood(struct iface *, struct nbr *, struct lsa_hdr *,
		     void *);
void		 recv_ls_update(struct nbr *, char *, u_int16_t);

void		 ls_retrans_list_add(struct nbr *, struct lsa_hdr *,
		     unsigned short, unsigned short);
int		 ls_retrans_list_del(struct nbr *, struct lsa_hdr *);
struct lsa_entry	*ls_retrans_list_get(struct nbr *, struct lsa_hdr *);
void		 ls_retrans_list_free(struct nbr *, struct lsa_entry *);
void		 ls_retrans_list_clr(struct nbr *);
void		 ls_retrans_timer(int, short, void *);

void		 lsa_cache_init(u_int32_t);
struct lsa_ref	*lsa_cache_add(void *, u_int16_t);
struct lsa_ref	*lsa_cache_get(struct lsa_hdr *);
void		 lsa_cache_put(struct lsa_ref *, struct nbr *);

/* neighbor.c */
void		 nbr_init(u_int32_t);
struct nbr	*nbr_new(u_int32_t, struct iface *, u_int32_t, int,
		     struct in6_addr *);
void		 nbr_del(struct nbr *);

struct nbr	*nbr_find_id(struct iface *, u_int32_t);
struct nbr	*nbr_find_peerid(u_int32_t);

int	 nbr_fsm(struct nbr *, enum nbr_event);

void	 nbr_itimer(int, short, void *);
void	 nbr_start_itimer(struct nbr *);
void	 nbr_stop_itimer(struct nbr *);
void	 nbr_reset_itimer(struct nbr *);

void	 nbr_adj_timer(int, short, void *);
void	 nbr_start_adj_timer(struct nbr *);

int	 nbr_act_reset_itimer(struct nbr *);
int	 nbr_act_start_itimer(struct nbr *);
int	 nbr_act_eval(struct nbr *);
int	 nbr_act_snapshot(struct nbr *);
int	 nbr_act_exchange_done(struct nbr *);
int	 nbr_act_adj_ok(struct nbr *);
int	 nbr_act_restart_dd(struct nbr *);
int	 nbr_act_delete(struct nbr *);
int	 nbr_act_clear_lists(struct nbr *);
int	 nbr_act_hello_check(struct nbr *);

struct ctl_nbr	*nbr_to_ctl(struct nbr *);

struct lsa_hdr	*lsa_hdr_new(void);

/* packet.c */
int	 gen_ospf_hdr(struct ibuf *, struct iface *, u_int8_t);
int	 upd_ospf_hdr(struct ibuf *, struct iface *);
int	 send_packet(struct iface *, void *, size_t, struct in6_addr *);
void	 recv_packet(int, short, void *);

char	*pkt_ptr;	/* packet buffer */

#endif	/* _OSPFE_H_ */
@


1.18
log
@sync w/ospfd: improve snapshot handling; ok claudio, sthen
@
text
@d1 1
a1 1
/*	$OpenBSD: ospfe.h,v 1.17 2010/08/22 20:27:52 bluhm Exp $ */
a26 1
#include <netinet/in_systm.h>
@


1.17
log
@Origin network-LSA with options based on the options of the link-LSAs.
Without this fix Cisco's OSPF 6 ignores our network-LSAs.
ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospfe.h,v 1.16 2010/05/26 13:56:08 nicm Exp $ */
d96 1
@


1.16
log
@Rename some imsg bits to make namespace collisions less likely buf to
ibuf, buf_read to ibuf_read, READ_BUF_SIZE to IBUF_READ_SIZE.

ok henning gilles claudio jacekm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: ospfe.h,v 1.15 2009/03/29 16:24:38 stsp Exp $ */
d88 1
@


1.15
log
@For SPF calculation, we will need the source address specified
in hello packets by next-hop neighbours. So when notifying the
RDE of a new neighbour, send the source address, too.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospfe.h,v 1.14 2009/02/19 22:08:14 stsp Exp $ */
d228 2
a229 2
int	 gen_ospf_hdr(struct buf *, struct iface *, u_int8_t);
int	 upd_ospf_hdr(struct buf *, struct iface *);
@


1.14
log
@Remove origination of Intra-Area-Prefix LSAs from ospfe.
Will soon be done in rde instead.

"Sure but don't wait too long before readding the code in rde" claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospfe.h,v 1.13 2009/01/29 19:07:53 stsp Exp $ */
d195 2
a196 1
struct nbr	*nbr_new(u_int32_t, struct iface *, u_int32_t, int);
@


1.13
log
@Originate Intra-Area-Prefix LSAs which reference a router LSA.
Routers can now advertise prefixes with global scope throughout
an area. This paves the way towards doing SPF calculations to
generate routing tables for a single area.
ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospfe.h,v 1.12 2009/01/27 21:58:28 stsp Exp $ */
a125 1
void		 orig_intra_lsa_rtr(struct iface *);
@


1.12
log
@Propagate the neighbour's interface ID, as received in hello packets,
to the RDE.
ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospfe.h,v 1.11 2008/12/30 21:31:54 claudio Exp $ */
d126 1
@


1.11
log
@First try at originating Link (type-8) LSA. Code is wrong and the initial
LSA is lost in lsa_flood. Put this in because it goes in the right direction
and ospf6d is work in progress. Add necessary framework so that we can print
Link LSA in ospf6ctl.
Diff mostly from stsp@@ ospf6ctl part by myself
@
text
@d1 1
a1 1
/*	$OpenBSD: ospfe.h,v 1.10 2008/12/28 17:56:16 claudio Exp $ */
d195 1
a195 1
struct nbr	*nbr_new(u_int32_t, struct iface *, int);
@


1.10
log
@Send the interface index in the correct byte order and add iface_id to
struct nbr to identify the neighbors correclty.
From Stefan Sperling stsp (at) stsp.name
@
text
@d1 1
a1 1
/*	$OpenBSD: ospfe.h,v 1.9 2007/12/13 08:54:05 claudio Exp $ */
d125 1
@


1.9
log
@Monster commit of stuff I did mostly last month. What it does:
 * removes kif and uses iface for everything interface related.
   This removes unneeded data redundancy which makes the code more complex.
 * adds the link local prefix to struct iface and attaches a list with
   the other prefixes to the struct iface. This is needed to generate the
   link LSA.
 * disconnects struct iface from struct area (the backpointer is gone)
   this will make the reload code a bit easier.
norby@@ agrees with the direction we're heading with this
@
text
@d1 1
a1 1
/*	$OpenBSD: ospfe.h,v 1.8 2007/10/13 13:21:56 claudio Exp $ */
d80 1
@


1.8
log
@From ospfd: Funny typo, it is fib not fip so adjust function name.
@
text
@d1 1
a1 1
/*	$OpenBSD: ospfe.h,v 1.7 2007/10/11 20:20:44 claudio Exp $ */
d122 1
a122 1
void		 orig_rtr_lsa(struct area *);
a129 1
struct iface	*if_new(struct kif *, struct kif_addr *);
d131 1
a131 1
void		 if_init(struct ospfd_conf *, struct iface *);
@


1.7
log
@In OSPFv3 auth crypt is no longer (actually all the auth code is gone) so
kill crypt_seq_num as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: ospfe.h,v 1.6 2007/10/11 19:06:41 claudio Exp $ */
d119 1
a119 1
void		 ospfe_fip_update(int);
@


1.6
log
@area_ospf_options() should return the options in network byte order.
@
text
@d1 1
a1 1
/*	$OpenBSD: ospfe.h,v 1.5 2007/10/11 18:43:42 claudio Exp $ */
a84 1
	u_int32_t		 crypt_seq_num;
@


1.5
log
@From ospfd:
Do not overload nbr->options with the dd exchange bits. nbr->options is used
by the hello protocol. Instead add a dd_more flag that is used together with
(the renamed) dd_master flag.
@
text
@d1 1
a1 1
/*	$OpenBSD: ospfe.h,v 1.4 2007/10/10 14:09:25 claudio Exp $ */
d86 2
a91 2
	u_int8_t		 options;
	u_int8_t		 last_rx_options;
@


1.4
log
@send_packet() now takes a struct in6_addr as destination instead of a
struct sockaddr_in6 and builds the struct sockaddr_in6 internaly adding scope
if necessary. While there switch to sendto() we don't need any of the sendmsg()
features here.
OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospfe.h,v 1.3 2007/10/09 06:26:47 claudio Exp $ */
d93 2
a94 1
	u_int8_t		 master;
@


1.3
log
@Remaining bit of last night work. Make packet reception use all the goodies
introduced (checksumming is no longer needed, no IP header checking is needed,
get a in6_pktinfo with the ifindex and dest addr, cleanup and remove a lot
of other code). With this ospf6d is able to send and receive first hello
packets.  OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospfe.h,v 1.2 2007/10/09 06:17:40 claudio Exp $ */
d228 1
a228 1
int	 send_packet(struct iface *, void *, size_t, struct sockaddr_in6 *);
@


1.2
log
@Instead of IP_RECVIF we use IPV6_RECVPKTINFO to get the ifindex and the
destination address of incomming packets. This also removes the need for
IP_HDRINCL. Additionally use IPV6_CHECKSUM to let the kernel do the
necessary packet checksumming, way easier than doing it in userland.
OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospfe.h,v 1.1 2007/10/08 10:44:50 norby Exp $ */
d108 1
a108 1
void	 recv_hello(struct iface *,  struct in6_addr, u_int32_t,
@


1.1
log
@Welcome ospf6d

The new ospf6d daemon will support OSPFv3, basically OSPF for IPv6 networks.

It is heavily based on ospfd(8), it is more or less a copy and paste of it.
Currently some unneeded stuff has been removed and the trasition from
IPv4 to IPv6 has begun.

ospf6d is not very usefull at the moment, it is being imported to allow more
people to work on it concurrently.

Not yet connected to the builds.

ok claudio@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospfe.h,v 1.36 2007/05/29 22:08:25 claudio Exp $ */
a142 1
int	 if_set_recvif(int, int);
d145 2
a146 1
int	 if_set_ip_hdrincl(int);
@

