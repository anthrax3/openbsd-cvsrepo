head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.10
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.12
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.8
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.4
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.16.0.20
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.18
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.14
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.12
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.10
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.8
	OPENBSD_5_0:1.16.0.6
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.4
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.2
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.4
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.9.0.4
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9;
locks; strict;
comment	@ * @;


1.17
date	2014.11.18.20.54.28;	author krw;	state Exp;
branches;
next	1.16;
commitid	yCis8OrOsfixbKpI;

1.16
date	2010.05.26.13.56.08;	author nicm;	state Exp;
branches;
next	1.15;

1.15
date	2010.02.01.10.22.06;	author jacekm;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.29.16.24.38;	author stsp;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.27.21.58.28;	author stsp;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.26.23.26.59;	author stsp;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.28.20.08.31;	author claudio;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.28.17.56.16;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2007.12.13.08.54.05;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.16.09.00.50;	author norby;	state Exp;
branches;
next	1.7;

1.7
date	2007.10.11.20.41.28;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2007.10.11.19.21.25;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2007.10.11.19.02.47;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2007.10.10.14.09.25;	author claudio;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.10.13.36.01;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.09.06.26.47;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.08.10.44.50;	author norby;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Nuke more obvious #include duplications.

ok deraadt@@ millert@@ tedu@@
@
text
@/*	$OpenBSD: hello.c,v 1.16 2010/05/26 13:56:08 nicm Exp $ */

/*
 * Copyright (c) 2005 Claudio Jeker <claudio@@openbsd.org>
 * Copyright (c) 2004, 2005 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/time.h>
#include <stdlib.h>
#include <string.h>
#include <event.h>

#include "ospf6d.h"
#include "ospf6.h"
#include "log.h"
#include "ospfe.h"

extern struct ospfd_conf	*oeconf;

/* hello packet handling */
int
send_hello(struct iface *iface)
{
	struct in6_addr		 dst;
	struct hello_hdr	 hello;
	struct nbr		*nbr;
	struct ibuf		*buf;
	int			 ret;
	u_int32_t		 opts;

	switch (iface->type) {
	case IF_TYPE_POINTOPOINT:
	case IF_TYPE_BROADCAST:
		inet_pton(AF_INET6, AllSPFRouters, &dst);
		break;
	case IF_TYPE_NBMA:
	case IF_TYPE_POINTOMULTIPOINT:
		log_debug("send_hello: type %s not supported, interface %s",
		    if_type_name(iface->type), iface->name);
		return (-1);
	case IF_TYPE_VIRTUALLINK:
		dst = iface->dst;
		break;
	default:
		fatalx("send_hello: unknown interface type");
	}

	/* XXX IBUF_READ_SIZE */
	if ((buf = ibuf_dynamic(PKG_DEF_SIZE, IBUF_READ_SIZE)) == NULL)
		fatal("send_hello");

	/* OSPF header */
	if (gen_ospf_hdr(buf, iface, PACKET_TYPE_HELLO))
		goto fail;

	/* hello header */
	hello.iface_id = htonl(iface->ifindex);
	LSA_24_SETHI(hello.opts, iface->priority);
	opts = area_ospf_options(area_find(oeconf, iface->area_id));
	LSA_24_SETLO(hello.opts, opts);
	hello.opts = htonl(hello.opts);

	hello.hello_interval = htons(iface->hello_interval);
	hello.rtr_dead_interval = htons(iface->dead_interval);

	if (iface->dr) {
		hello.d_rtr = iface->dr->id.s_addr;
		iface->self->dr.s_addr = iface->dr->id.s_addr;
	} else
		hello.d_rtr = 0;
	if (iface->bdr) {
		hello.bd_rtr = iface->bdr->id.s_addr;
		iface->self->bdr.s_addr = iface->bdr->id.s_addr;
	} else
		hello.bd_rtr = 0;

	if (ibuf_add(buf, &hello, sizeof(hello)))
		goto fail;

	/* active neighbor(s) */
	LIST_FOREACH(nbr, &iface->nbr_list, entry) {
		if ((nbr->state >= NBR_STA_INIT) && (nbr != iface->self))
			if (ibuf_add(buf, &nbr->id, sizeof(nbr->id)))
				goto fail;
	}

	/* calculate checksum */
	if (upd_ospf_hdr(buf, iface))
		goto fail;

	ret = send_packet(iface, buf->buf, buf->wpos, &dst);

	ibuf_free(buf);
	return (ret);
fail:
	log_warn("send_hello");
	ibuf_free(buf);
	return (-1);
}

void
recv_hello(struct iface *iface, struct in6_addr *src, u_int32_t rtr_id,
    char *buf, u_int16_t len)
{
	struct hello_hdr	 hello;
	struct nbr		*nbr = NULL, *dr;
	struct area		*area;
	u_int32_t		 nbr_id, opts;
	int			 nbr_change = 0;

	if (len < sizeof(hello) || (len & 0x03)) {
		log_warnx("recv_hello: bad packet size, interface %s",
		    iface->name);
		return;
	}

	memcpy(&hello, buf, sizeof(hello));
	buf += sizeof(hello);
	len -= sizeof(hello);

	if (ntohs(hello.hello_interval) != iface->hello_interval) {
		log_warnx("recv_hello: invalid hello-interval %d, "
		    "interface %s", ntohs(hello.hello_interval),
		    iface->name);
		return;
	}

	if (ntohs(hello.rtr_dead_interval) != iface->dead_interval) {
		log_warnx("recv_hello: invalid router-dead-interval %d, "
		    "interface %s", ntohl(hello.rtr_dead_interval),
		    iface->name);
		return;
	}

	if ((area = area_find(oeconf, iface->area_id)) == NULL)
		fatalx("interface lost area");

	opts = LSA_24_GETLO(ntohl(hello.opts));
	if ((opts & OSPF_OPTION_E && area->stub) ||
	    ((opts & OSPF_OPTION_E) == 0 && !area->stub)) {
		log_warnx("recv_hello: ExternalRoutingCapability mismatch, "
		    "interface %s", iface->name);
		return;
	}

	/* match router-id */
	LIST_FOREACH(nbr, &iface->nbr_list, entry) {
		if (nbr == iface->self)
			continue;
		if (nbr->id.s_addr == rtr_id)
			break;
	}

	if (!nbr) {
		nbr = nbr_new(rtr_id, iface, ntohl(hello.iface_id), 0, src);
		/* set neighbor parameters */
		nbr->dr.s_addr = hello.d_rtr;
		nbr->bdr.s_addr = hello.bd_rtr;
		nbr->priority = LSA_24_GETHI(ntohl(hello.opts));
		nbr_change = 1;
	}

	/* actually the neighbor address shouldn't be stored on virtual links */
	nbr->addr = *src;
	nbr->options = opts;

	nbr_fsm(nbr, NBR_EVT_HELLO_RCVD);

	while (len >= sizeof(nbr_id)) {
		memcpy(&nbr_id, buf, sizeof(nbr_id));
		if (nbr_id == ospfe_router_id()) {
			/* seen myself */
			if (nbr->state & NBR_STA_PRELIM)
				nbr_fsm(nbr, NBR_EVT_2_WAY_RCVD);
			break;
		}
		buf += sizeof(nbr_id);
		len -= sizeof(nbr_id);
	}

	if (len == 0) {
		nbr_fsm(nbr, NBR_EVT_1_WAY_RCVD);
		/* set neighbor parameters */
		nbr->dr.s_addr = hello.d_rtr;
		nbr->bdr.s_addr = hello.bd_rtr;
		nbr->priority = LSA_24_GETHI(ntohl(hello.opts));
		return;
	}

	if (nbr->priority != LSA_24_GETHI(ntohl(hello.opts))) {
		nbr->priority = LSA_24_GETHI(ntohl(hello.opts));
		nbr_change = 1;
	}

	if (iface->state & IF_STA_WAITING &&
	    hello.d_rtr == nbr->id.s_addr && hello.bd_rtr == 0)
		if_fsm(iface, IF_EVT_BACKUP_SEEN);

	if (iface->state & IF_STA_WAITING && hello.bd_rtr == nbr->id.s_addr) {
		/*
		 * In case we see the BDR make sure that the DR is around
		 * with a bidirectional (2_WAY or better) connection
		 */
		LIST_FOREACH(dr, &iface->nbr_list, entry)
			if (hello.d_rtr == dr->id.s_addr &&
			    dr->state & NBR_STA_BIDIR)
				if_fsm(iface, IF_EVT_BACKUP_SEEN);
	}

	if ((nbr->id.s_addr == nbr->dr.s_addr &&
	    nbr->id.s_addr != hello.d_rtr) ||
	    (nbr->id.s_addr != nbr->dr.s_addr &&
	    nbr->id.s_addr == hello.d_rtr))
		/* neighbor changed from or to DR */
		nbr_change = 1;
	if ((nbr->id.s_addr == nbr->bdr.s_addr &&
	    nbr->id.s_addr != hello.bd_rtr) ||
	    (nbr->id.s_addr != nbr->bdr.s_addr &&
	    nbr->id.s_addr == hello.bd_rtr))
		/* neighbor changed from or to BDR */
		nbr_change = 1;

	nbr->dr.s_addr = hello.d_rtr;
	nbr->bdr.s_addr = hello.bd_rtr;

	if (nbr_change)
		if_fsm(iface, IF_EVT_NBR_CHNG);

	/* TODO NBMA needs some special handling */
}
@


1.16
log
@Rename some imsg bits to make namespace collisions less likely buf to
ibuf, buf_read to ibuf_read, READ_BUF_SIZE to IBUF_READ_SIZE.

ok henning gilles claudio jacekm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.15 2010/02/01 10:22:06 jacekm Exp $ */
a24 1
#include <sys/socket.h>
@


1.15
log
@Fix logic error (&& vs. ||), found while looking for inspiration for smtpd
state machine needed by the features that are coming along.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.14 2009/03/29 16:24:38 stsp Exp $ */
d44 1
a44 1
	struct buf		*buf;
d65 2
a66 2
	/* XXX READ_BUF_SIZE */
	if ((buf = buf_dynamic(PKG_DEF_SIZE, READ_BUF_SIZE)) == NULL)
d94 1
a94 1
	if (buf_add(buf, &hello, sizeof(hello)))
d100 1
a100 1
			if (buf_add(buf, &nbr->id, sizeof(nbr->id)))
d110 1
a110 1
	buf_free(buf);
d114 1
a114 1
	buf_free(buf);
@


1.14
log
@For SPF calculation, we will need the source address specified
in hello packets by next-hop neighbours. So when notifying the
RDE of a new neighbour, send the source address, too.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.13 2009/01/27 21:58:28 stsp Exp $ */
d128 1
a128 1
	if (len < sizeof(hello) && (len & 0x03)) {
@


1.13
log
@Propagate the neighbour's interface ID, as received in hello packets,
to the RDE.
ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.12 2009/01/26 23:26:59 stsp Exp $ */
d172 1
a172 1
		nbr = nbr_new(rtr_id, iface, ntohl(hello.iface_id), 0);
@


1.12
log
@RFC5340 says neighbours are identified solely by their router ID in OSPFv3,
regardless of link type. So don't ever use source addresses from the IP
header to match known neighbours when receiving hello packets.
ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.11 2008/12/28 20:08:31 claudio Exp $ */
d172 1
a172 1
		nbr = nbr_new(rtr_id, iface, 0);
a203 1
		nbr->iface_id = ntohl(hello.iface_id);
@


1.11
log
@area_ospf_options() should not return network byte order options. Instead
the callers should take care of getting the byte order right. While there
remove the opts[123] from the hello_hdr and use LSA_24_* to handle this
nasty fields instead. Now router LSA have the correct flags set.
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.10 2008/12/28 17:56:16 claudio Exp $ */
d163 6
a168 24
	switch (iface->type) {
	case IF_TYPE_POINTOPOINT:
	case IF_TYPE_VIRTUALLINK:
		/* match router-id */
		LIST_FOREACH(nbr, &iface->nbr_list, entry) {
			if (nbr == iface->self)
				continue;
			if (nbr->id.s_addr == rtr_id)
				break;
		}
		break;
	case IF_TYPE_BROADCAST:
	case IF_TYPE_NBMA:
	case IF_TYPE_POINTOMULTIPOINT:
		/* match src IP */
		LIST_FOREACH(nbr, &iface->nbr_list, entry) {
			if (nbr == iface->self)
				continue;
			if (IN6_ARE_ADDR_EQUAL(&nbr->addr, src))
				break;
		}
		break;
	default:
		fatalx("recv_hello: unknown interface type");
@


1.10
log
@Send the interface index in the correct byte order and add iface_id to
struct nbr to identify the neighbors correclty.
From Stefan Sperling stsp (at) stsp.name
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.9 2007/12/13 08:54:05 claudio Exp $ */
d75 4
a78 6
	hello.rtr_priority = iface->priority;

	opts = ntohl(area_ospf_options(area_find(oeconf, iface->area_id)));
	hello.opts1 = (opts >> 16) & 0xff;
	hello.opts2 = (opts >> 8) & 0xff;
	hello.opts3 = opts & 0xff;
d125 1
a125 1
	u_int32_t		 nbr_id;
d155 3
a157 2
	if ((hello.opts3 & OSPF_OPTION_E && area->stub) ||		/* XXX */
	    ((hello.opts3 & OSPF_OPTION_E) == 0 && !area->stub)) {	/* XXX */
d194 1
a194 1
		nbr->priority = hello.rtr_priority;
d200 1
a200 1
	nbr->options = (hello.opts1 << 16) | (hello.opts2 << 8) | hello.opts3;
d221 1
a221 1
		nbr->priority = hello.rtr_priority;
d226 2
a227 2
	if (nbr->priority != hello.rtr_priority) {
		nbr->priority = hello.rtr_priority;
@


1.9
log
@Monster commit of stuff I did mostly last month. What it does:
 * removes kif and uses iface for everything interface related.
   This removes unneeded data redundancy which makes the code more complex.
 * adds the link local prefix to struct iface and attaches a list with
   the other prefixes to the struct iface. This is needed to generate the
   link LSA.
 * disconnects struct iface from struct area (the backpointer is gone)
   this will make the reload code a bit easier.
norby@@ agrees with the direction we're heading with this
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.8 2007/10/16 09:00:50 norby Exp $ */
d74 1
a74 1
	hello.iface_id = iface->ifindex;
d223 1
@


1.8
log
@Fix the neighbor election process.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.7 2007/10/11 20:41:28 claudio Exp $ */
d77 1
a77 1
	opts = ntohl(area_ospf_options(iface->area));
d126 1
d154 5
a158 2
	if ((hello.opts3 & OSPF_OPTION_E && iface->area->stub) ||		/* XXX */
	    ((hello.opts3 & OSPF_OPTION_E) == 0 && !iface->area->stub)) {	/* XXX */
@


1.7
log
@OSPFv3 runs on links not on networks so there is no need for a mask in the
hello protocol. Kill no longer needed code.
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.6 2007/10/11 19:21:25 claudio Exp $ */
a177 1
//XXX			if (nbr->addr.s_addr == src.s_addr)
a227 1
//XXX	    hello.d_rtr == nbr->addr.s_addr && hello.bd_rtr == 0)
a230 1
//XXX	if (iface->state & IF_STA_WAITING && hello.bd_rtr == nbr->addr.s_addr) {
a236 1
//XXX			if (hello.d_rtr == dr->addr.s_addr &&
d241 5
a245 5
#if 0
	if ((nbr->addr.s_addr == nbr->dr.s_addr &&
	    nbr->addr.s_addr != hello.d_rtr) ||
	    (nbr->addr.s_addr != nbr->dr.s_addr &&
	    nbr->addr.s_addr == hello.d_rtr))
d248 4
a251 4
	if ((nbr->addr.s_addr == nbr->bdr.s_addr &&
	    nbr->addr.s_addr != hello.bd_rtr) ||
	    (nbr->addr.s_addr != nbr->bdr.s_addr &&
	    nbr->addr.s_addr == hello.bd_rtr))
d254 1
a254 1
#endif
@


1.6
log
@The person that came up with the glorious idea to define a 24bit field should
be hanged and shot. Add a ntohl() around the area_ospf_options() call.
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.5 2007/10/11 19:02:47 claudio Exp $ */
a137 11

#if 0
XXX
	if (iface->type != IF_TYPE_POINTOPOINT &&
	    iface->type != IF_TYPE_VIRTUALLINK)
		if (hello.mask != iface->mask.s_addr) {
			log_warnx("recv_hello: invalid netmask, interface %s",
			    iface->name);
			return;
		}
#endif
@


1.5
log
@From ospfd:
Bye bye global ospf options. OSPF options are per area (at least the one
flag that we set). So introduce a area_ospf_options() function that will
return the correct flags for each area. This makes stub area support a lot
easier.
Don't check for OSPF_OPTION_E in the parent. OSPF_OPTION_E is per area and
so the parent process has no way to know if it should redistribute or not.
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.4 2007/10/10 14:09:25 claudio Exp $ */
d77 1
a77 1
	opts = area_ospf_options(iface->area);
@


1.4
log
@send_packet() now takes a struct in6_addr as destination instead of a
struct sockaddr_in6 and builds the struct sockaddr_in6 internaly adding scope
if necessary. While there switch to sendto() we don't need any of the sendmsg()
features here.
OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.3 2007/10/10 13:36:01 claudio Exp $ */
d46 1
d77 4
a80 4
	/* XXX options */
	hello.opts1 = 0;
	hello.opts2 = 0;
	hello.opts3 = OSPF_OPTION_V6 | OSPF_OPTION_E | OSPF_OPTION_R; /* XXX */
a207 1
//XXX	nbr->addr.s_addr = src.s_addr;
d209 1
a209 1
	nbr->options = hello.opts3;	/* XXX */
@


1.3
log
@Turn on the V6 and E bits in hello messages. This makes other OSPFv3 routers
a bit more happy. The E bit should be turned of in stub areas but there is no
support for those at the moment. OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.2 2007/10/09 06:26:47 claudio Exp $ */
d41 1
a41 1
	struct sockaddr_in6	 dst;
a46 3
	dst.sin6_family = AF_INET6;
	dst.sin6_len = sizeof(struct sockaddr_in6);

d50 1
a50 1
		inet_pton(AF_INET6, AllSPFRouters, &dst.sin6_addr);
d58 1
a58 1
		dst.sin6_addr = iface->dst;
@


1.2
log
@Remaining bit of last night work. Make packet reception use all the goodies
introduced (checksumming is no longer needed, no IP header checking is needed,
get a in6_pktinfo with the ifindex and dest addr, cleanup and remove a lot
of other code). With this ospf6d is able to send and receive first hello
packets.  OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.1 2007/10/08 10:44:50 norby Exp $ */
d82 1
a82 2
	hello.opts3 = 0;
	hello.opts3 |= OSPF_OPTION_R;	/* XXX */
@


1.1
log
@Welcome ospf6d

The new ospf6d daemon will support OSPFv3, basically OSPF for IPv6 networks.

It is heavily based on ospfd(8), it is more or less a copy and paste of it.
Currently some unneeded stuff has been removed and the trasition from
IPv4 to IPv6 has begun.

ospf6d is not very usefull at the moment, it is being imported to allow more
people to work on it concurrently.

Not yet connected to the builds.

ok claudio@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.13 2006/03/09 14:16:34 claudio Exp $ */
d124 1
a124 1
recv_hello(struct iface *iface, struct in6_addr src, u_int32_t rtr_id,
d160 1
a160 1
	if (ntohl(hello.rtr_dead_interval) != iface->dead_interval) {
d193 1
a193 1
			if (IN6_ARE_ADDR_EQUAL(&nbr->addr, &src))
d212 1
a212 1
	nbr->addr = src;
@

