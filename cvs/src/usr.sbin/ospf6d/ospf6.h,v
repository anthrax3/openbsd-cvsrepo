head	1.21;
access;
symbols
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.18
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.14
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.10
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.12
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.4
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.8
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.6
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.2
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.18.0.8
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.6
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.4
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.17.0.4
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.2
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.15.0.4
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8;
locks; strict;
comment	@ * @;


1.21
date	2013.03.25.14.29.35;	author markus;	state Exp;
branches;
next	1.20;

1.20
date	2013.03.25.14.22.02;	author markus;	state Exp;
branches;
next	1.19;

1.19
date	2013.03.22.12.00.57;	author sthen;	state Exp;
branches;
next	1.18;

1.18
date	2011.03.24.10.00.43;	author claudio;	state Exp;
branches;
next	1.17;

1.17
date	2010.07.14.17.06.52;	author claudio;	state Exp;
branches;
next	1.16;

1.16
date	2010.02.23.11.20.03;	author claudio;	state Exp;
branches;
next	1.15;

1.15
date	2009.04.09.19.00.40;	author stsp;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.29.18.59.22;	author stsp;	state Exp;
branches;
next	1.13;

1.13
date	2008.12.30.22.29.54;	author claudio;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.30.21.31.54;	author claudio;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.28.21.22.14;	author claudio;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.28.20.08.31;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.28.18.30.55;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2007.11.27.11.29.34;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2007.10.16.21.58.17;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2007.10.16.21.44.41;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2007.10.16.21.32.32;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2007.10.16.13.01.07;	author norby;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.16.12.05.52;	author norby;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.09.06.12.04;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.08.10.44.50;	author norby;	state Exp;
branches;
next	;


desc
@@


1.21
log
@sync w/ospfd: improve snapshot handling; ok claudio, sthen
@
text
@/*	$OpenBSD: ospf6.h,v 1.19 2013/03/22 12:00:57 sthen Exp $ */

/*
 * Copyright (c) 2004, 2005, 2007 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* OSPF protocol definitions */

#ifndef _OSPF_H_
#define _OSPF_H_

#include <netinet/in.h>
#include <stddef.h>

/* misc */
#define OSPF6_VERSION		3
#define IPPROTO_OSPF		89
#define AllSPFRouters		"ff02::5"
#define AllDRouters		"ff02::6"

#define PACKET_HDR		100 /* XXX used to calculate the IP payload */

#define DEFAULT_METRIC		10
#define DEFAULT_REDIST_METRIC	100
#define MIN_METRIC		1
#define MAX_METRIC		65535	/* sum & as-ext lsa use 24bit metrics */

#define DEFAULT_PRIORITY	1
#define MIN_PRIORITY		0
#define MAX_PRIORITY		255

#define DEFAULT_HELLO_INTERVAL	10
#define MIN_HELLO_INTERVAL	1
#define MAX_HELLO_INTERVAL	65535

#define DEFAULT_RTR_DEAD_TIME	40
#define MIN_RTR_DEAD_TIME	2
#define MAX_RTR_DEAD_TIME	65535

#define DEFAULT_RXMT_INTERVAL	5
#define MIN_RXMT_INTERVAL	5
#define MAX_RXMT_INTERVAL	3600

#define DEFAULT_TRANSMIT_DELAY	1
#define MIN_TRANSMIT_DELAY	1
#define MAX_TRANSMIT_DELAY	3600

#define DEFAULT_ADJ_TMOUT	120

#define DEFAULT_NBR_TMOUT	86400	/* 24 hours */

#define DEFAULT_SPF_DELAY	1
#define MIN_SPF_DELAY		1
#define MAX_SPF_DELAY		10

#define DEFAULT_SPF_HOLDTIME	5
#define MIN_SPF_HOLDTIME	1
#define MAX_SPF_HOLDTIME	5

#define MIN_MD_ID		0
#define MAX_MD_ID		255

#define DEFAULT_INSTANCE_ID	0
#define MIN_INSTANCE_ID	0
#define MAX_INSTANCE_ID	0

/* OSPF compatibility flags */
#define OSPF_OPTION_V6		0x01
#define OSPF_OPTION_E		0x02
#define OSPF_OPTION_x		0x04	/* ignored, should be 0 */
#define OSPF_OPTION_N		0x08
#define OSPF_OPTION_R		0x10
#define OSPF_OPTION_DC		0x20

/* OSPF packet types */
#define PACKET_TYPE_HELLO	1
#define PACKET_TYPE_DD		2
#define PACKET_TYPE_LS_REQUEST	3
#define PACKET_TYPE_LS_UPDATE	4
#define PACKET_TYPE_LS_ACK	5

/* LSA */
#define LS_REFRESH_TIME		1800
#define MIN_LS_INTERVAL		5
#define MIN_LS_ARRIVAL		1
#define DEFAULT_AGE		0
#define MAX_AGE			3600
#define CHECK_AGE		300
#define MAX_AGE_DIFF		900
#define LS_INFINITY		0xffffff
#define RESV_SEQ_NUM		0x80000000U	/* reserved and "unused" */
#define INIT_SEQ_NUM		0x80000001U
#define MAX_SEQ_NUM		0x7fffffffU

/* OSPF header */
struct ospf_hdr {
	u_int8_t		version;
	u_int8_t		type;
	u_int16_t		len;
	u_int32_t		rtr_id;
	u_int32_t		area_id;
	u_int16_t		chksum;
	u_int8_t		instance;
	u_int8_t		zero;		/* must be zero */
};

/* Hello header (type 1) */
struct hello_hdr {
	u_int32_t		iface_id;
	u_int32_t		opts;	/* 8bit rtr_priority + 24bits options */
	u_int16_t		hello_interval;
	u_int16_t		rtr_dead_interval;
	u_int32_t		d_rtr;
	u_int32_t		bd_rtr;
};

/* Database Description header (type 2) */
struct db_dscrp_hdr {
	u_int32_t		opts;
	u_int16_t		iface_mtu;
	u_int8_t		zero;		/* must be zero */
	u_int8_t		bits;
	u_int32_t		dd_seq_num;
};

#define OSPF_DBD_MS		0x01
#define OSPF_DBD_M		0x02
#define OSPF_DBD_I		0x04

/*  Link State Request header (type 3) */
struct ls_req_hdr {
	u_int16_t		zero;
	u_int16_t		type;
	u_int32_t		ls_id;
	u_int32_t		adv_rtr;
};

/* Link State Update header (type 4) */
struct ls_upd_hdr {
	u_int32_t		num_lsa;
};

#define LSA_TYPE_LINK		0x0008
#define	LSA_TYPE_ROUTER		0x2001
#define LSA_TYPE_NETWORK	0x2002
#define LSA_TYPE_INTER_A_PREFIX	0x2003
#define LSA_TYPE_INTER_A_ROUTER	0x2004
#define LSA_TYPE_INTRA_A_PREFIX	0x2009
#define	LSA_TYPE_EXTERNAL	0x4005

#define LSA_TYPE_FLAG_U		0x8000
#define LSA_TYPE_FLAG_S2	0x4000
#define LSA_TYPE_FLAG_S1	0x2000
#define LSA_TYPE_SCOPE_MASK	0x6000

#define LSA_IS_SCOPE_LLOCAL(x)	\
    (((x) & LSA_TYPE_SCOPE_MASK) == 0)
#define LSA_IS_SCOPE_AREA(x)	\
    (((x) & LSA_TYPE_SCOPE_MASK) == LSA_TYPE_FLAG_S1)
#define LSA_IS_SCOPE_AS(x)	\
    (((x) & LSA_TYPE_SCOPE_MASK) == LSA_TYPE_FLAG_S2)

#define LINK_TYPE_POINTTOPOINT	1
#define LINK_TYPE_TRANSIT_NET	2
#define LINK_TYPE_RESERVED	3
#define LINK_TYPE_VIRTUAL	4

/* for some reason they thought 24bit types are fun, make them less a hazard */
#define LSA_24_MASK 0xffffff
#define LSA_24_GETHI(x)		\
	((x) >> 24)
#define LSA_24_GETLO(x)		\
	((x) & LSA_24_MASK)
#define LSA_24_SETHI(x, y)	\
	((x) = ((x) & LSA_24_MASK) | (((y) & 0xff) << 24))
#define LSA_24_SETLO(x, y)	\
	((x) = ((y) & LSA_24_MASK) | ((x) & ~LSA_24_MASK))

/* LSA headers */
#define LSA_METRIC_MASK		0x00ffffff	/* only for sum & as-ext */
#define LSA_ASEXT_E_FLAG	0x04000000
#define LSA_ASEXT_F_FLAG	0x02000000
#define LSA_ASEXT_T_FLAG	0x01000000

#define OSPF_RTR_B		0x01
#define OSPF_RTR_E		0x02
#define OSPF_RTR_V		0x04
#define OSPF_RTR_x		0x08	/* ignored, should be 0 */
#define OSPF_RTR_Nt		0x10

#define OSPF_PREFIX_NU		0x01
#define OSPF_PREFIX_LA		0x02
#define OSPF_PREFIX_x		0x04	/* ignored, should be 0 */
#define OSPF_PREFIX_P		0x08
#define OSPF_PREFIX_DN		0x10

/* return encoded IPv6 prefix size in bytes depending on the prefixlen */
#define LSA_PREFIXSIZE(x)	(((x) + 31)/32 * 4)

struct lsa_prefix {
	u_int8_t		prefixlen;
	u_int8_t		options;
	u_int16_t		metric;	/* Ref. LS type in AS-Ext-LSA */
	/* + an IPv6 prefix encoded in (prefixlen + 31)/32 words */
};

struct lsa_rtr {
	u_int32_t		opts;	/* 8bit flags + 24bits options */
};

struct lsa_rtr_link {
	u_int8_t		type;
	u_int8_t		dummy;
	u_int16_t		metric;
	u_int32_t		iface_id;
	u_int32_t		nbr_iface_id;
	u_int32_t		nbr_rtr_id;
};

struct lsa_net {
	u_int32_t		opts;	/* 24bits options */
};

struct lsa_net_link {
	u_int32_t		att_rtr;
};

struct lsa_prefix_sum {
	u_int32_t		metric;		/* only lower 24 bit */
	/* + one prefix */
};

struct lsa_rtr_sum {
	u_int32_t		opts;		/* lower 24bit options */
	u_int32_t		metric;		/* only lower 24 bit */
	u_int32_t		dest_rtr_id;
};

struct lsa_asext {
	u_int32_t		metric;		/* lower 24 bit plus EFT bits */
	struct lsa_prefix	prefix;
	/* + if F bit is set, an optional forwarding address (128bit) */
	/* + if T bit is set, an optional external route tag (32bit) */
	/* + if referenced LS type (i.e. prefix.metric) is non-zero, an
	 *   optional referenced LS ID (32bit) -- not used by OSPF itself */
};

struct lsa_link {
	u_int32_t		opts;		/* rtr pri & 24bit options */
	struct in6_addr		lladdr;
	u_int32_t		numprefix;
	/* + numprefix * lsa_prefix */
};

struct lsa_intra_prefix {
	u_int16_t		numprefix;
	u_int16_t		ref_type;
	u_int32_t		ref_ls_id;
	u_int32_t		ref_adv_rtr;
	/* + numprefix * lsa_prefix */
};

struct lsa_hdr {
	u_int16_t		age;
	u_int16_t		type;
	u_int32_t		ls_id;
	u_int32_t		adv_rtr;
	u_int32_t		seq_num;
	u_int16_t		ls_chksum;
	u_int16_t		len;
};

#define LS_CKSUM_OFFSET	offsetof(struct lsa_hdr, ls_chksum)

struct lsa {
	struct lsa_hdr		hdr;
	union {
		struct lsa_rtr		rtr;
		struct lsa_net		net;
		struct lsa_prefix_sum	pref_sum;
		struct lsa_rtr_sum	rtr_sum;
		struct lsa_asext	asext;
		struct lsa_link		link;
		struct lsa_intra_prefix pref_intra;
	}			data;
};

#endif /* !_OSPF_H_ */
@


1.20
log
@sync w/ospfd: allow two minutes until neighbor adjacencies are formed;
ok claudio@@ sthen@@
@
text
@@


1.19
log
@gratuitous whitespace diff with ospfd/ospf.h
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf6.h,v 1.18 2011/03/24 10:00:43 claudio Exp $ */
d60 1
a60 1
#define DEFAULT_ADJ_TMOUT	60
@


1.18
log
@Make the sequence number constanst explicitly unsigned. The seq_num is
already defined as a u_int32_t type.
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf6.h,v 1.17 2010/07/14 17:06:52 claudio Exp $ */
d182 1
a182 1
#define LSA_24_GETHI(x)	\
d184 1
a184 1
#define LSA_24_GETLO(x)	\
@


1.17
log
@use offsetof() instead of self knitted version to please gcc4.
stolen from ospf.h
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf6.h,v 1.16 2010/02/23 11:20:03 claudio Exp $ */
d103 3
a105 3
#define RESV_SEQ_NUM		0x80000000	/* reserved and "unused" */
#define INIT_SEQ_NUM		0x80000001
#define MAX_SEQ_NUM		0x7fffffff
@


1.16
log
@Oups, forgot this file in last commit. Bit definitions for AS-ext LSA needed
by lsa_asext_check().
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf6.h,v 1.15 2009/04/09 19:00:40 stsp Exp $ */
d25 1
d285 1
a285 1
#define LS_CKSUM_OFFSET	((u_int16_t)(&((struct lsa_hdr *)0)->ls_chksum))
@


1.15
log
@Fix a naming inconsistency in struct lsa_intra_prefix (lsid -> ls_id).

"consistency is a good thing" jsing@@, ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf6.h,v 1.14 2009/03/29 18:59:22 stsp Exp $ */
d192 3
a194 1
#define LSA_ASEXT_E_FLAG	0x80000000
d214 1
a214 1
	u_int16_t		metric;
d251 6
a256 4
	u_int32_t		mask;
	u_int32_t		metric;		/* lower 24 bit plus E bit */
	u_int32_t		fw_addr;
	u_int32_t		ext_tag;
@


1.14
log
@Remove att_rtr field from struct lsa_net.
In Network-LSAs, the only thing sitting between the LSA header
and the attached router list is the options field. We already
have lsa_net_link to represent elements of the attached router list,
so there's no need to have a single entry of this list in lsa_net.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf6.h,v 1.13 2008/12/30 22:29:54 claudio Exp $ */
d265 1
a265 1
	u_int32_t		ref_lsid;
@


1.13
log
@Correctly encode the IPv6 prefix. Only (prefixlen + 31)/32 * 4 bytes are
attached to the LSA (saves 8 to 12 bytes per prefix and makes our life
more interesting or complex).
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf6.h,v 1.12 2008/12/30 21:31:54 claudio Exp $ */
a230 1
	u_int32_t		att_rtr[1];
@


1.12
log
@First try at originating Link (type-8) LSA. Code is wrong and the initial
LSA is lost in lsa_flood. Put this in because it goes in the right direction
and ospf6d is work in progress. Add necessary framework so that we can print
Link LSA in ospf6ctl.
Diff mostly from stsp@@ ospf6ctl part by myself
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf6.h,v 1.11 2008/12/28 21:22:14 claudio Exp $ */
d206 3
d213 1
a213 1
	struct in6_addr		prefix;
@


1.11
log
@Initial bits for originating net lsa again from Stefan Sperling with some
changes by myself.
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf6.h,v 1.10 2008/12/28 20:08:31 claudio Exp $ */
d200 6
a206 2
	struct in6_addr		prefix;
	u_int16_t		metric;
d209 2
d241 1
a241 1
	u_int32_t		options;	/* lower 24bit options */
d254 1
a254 1
	u_int32_t		options;	/* rtr pri & 24bit options */
d257 1
a257 1
	/* + numprefix prefix */
d265 1
a265 1
	/* + numprefix prefix */
@


1.10
log
@area_ospf_options() should not return network byte order options. Instead
the callers should take care of getting the byte order right. While there
remove the opts[123] from the hello_hdr and use LSA_24_* to handle this
nasty fields instead. Now router LSA have the correct flags set.
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf6.h,v 1.9 2008/12/28 18:30:55 claudio Exp $ */
d221 1
a221 1
	u_int32_t		mask;
@


1.9
log
@Sync up the flags with the new and shiny RFC5340 while there introduce
some macros to handle the 24bit insaneness.
rfc5340 syncup by Stefan Sperling, the insanity is mine
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf6.h,v 1.8 2007/11/27 11:29:34 claudio Exp $ */
d121 1
a121 4
	u_int8_t		rtr_priority;
	u_int8_t		opts1;
	u_int8_t		opts2;
	u_int8_t		opts3;
@


1.8
log
@Monster diff to bring us a bit on track again.
a) implement all (or at least most) lsa_check() cases.
b) classify the LSA scope correctly and add a per interface lsa_tree for
   the link local stuff.
c) implement a function to parse a prefix.

There is still a lot missing currently link local LSA are added to the
interface tree but nothing can access them (lsa_find() and a few friends
need some changes).
OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf6.h,v 1.7 2007/10/16 21:58:17 claudio Exp $ */
d81 1
a81 1
#define OSPF_OPTION_MC		0x04
d182 11
d200 2
a201 1
#define OSPF_RTR_W		0x08
@


1.7
log
@Make struct lsa_rtr a better match of the reality. Still not happy because
some people had the great idea to make the OSPF options 24bits. Still undecided
if a u_int32_t should be used or 4 u_int8_t both is gross.
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf6.h,v 1.6 2007/10/16 21:44:41 claudio Exp $ */
d165 12
d191 7
d220 7
a226 2
struct lsa_sum {
	u_int32_t		mask;
d228 1
d238 15
d270 2
a271 1
		struct lsa_sum		sum;
d273 2
@


1.6
log
@There is not auth code so there is no need for struct crypt.
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf6.h,v 1.5 2007/10/16 21:32:32 claudio Exp $ */
d177 1
d180 1
a180 3
	u_int8_t		flags;
	u_int8_t		dummy;
	u_int16_t		nlinks;
@


1.5
log
@Router LSA link type 3 is now reserved. There are no stub networks anymore.
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf6.h,v 1.4 2007/10/16 13:01:07 norby Exp $ */
a106 7
struct crypt {
	u_int16_t		dummy;
	u_int8_t		keyid;
	u_int8_t		len;
	u_int32_t		seq_num;
};

@


1.4
log
@Make ospf6d(8) not throw up on Router LSAs.

Initial step towards actually storing real LSAs.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf6.h,v 1.3 2007/10/16 12:05:52 norby Exp $ */
d174 1
a174 1
#define LINK_TYPE_STUB_NET	3
@


1.3
log
@In OSPFv3 the LSA type is a 16 bit value, furthermore it uses different
values than the v2 counterpart.

Change to u_int16_t and define new LSA types.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf6.h,v 1.2 2007/10/09 06:12:04 claudio Exp $ */
a191 2
	u_int32_t		id;
	u_int32_t		data;
d193 1
a193 1
	u_int8_t		num_tos;
d195 3
@


1.2
log
@The router dead_interval switched from 32bit to a 16bit value in OSPFv3.
OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf6.h,v 1.1 2007/10/08 10:44:50 norby Exp $ */
d164 7
a170 5
#define	LSA_TYPE_ROUTER		1
#define LSA_TYPE_NETWORK	2
#define LSA_TYPE_SUM_NETWORK	3
#define LSA_TYPE_SUM_ROUTER	4
#define	LSA_TYPE_EXTERNAL	5
@


1.1
log
@Welcome ospf6d

The new ospf6d daemon will support OSPFv3, basically OSPF for IPv6 networks.

It is heavily based on ospfd(8), it is more or less a copy and paste of it.
Currently some unneeded stuff has been removed and the trasition from
IPv4 to IPv6 has begun.

ospf6d is not very usefull at the moment, it is being imported to allow more
people to work on it concurrently.

Not yet connected to the builds.

ok claudio@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.16 2006/12/07 19:14:27 claudio Exp $ */
d49 1
a49 1
#define MAX_RTR_DEAD_TIME	2147483647
@

