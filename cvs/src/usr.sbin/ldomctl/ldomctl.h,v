head	1.5;
access;
symbols
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.20
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.16
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.12
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.14
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5;
locks; strict;
comment	@ * @;


1.5
date	2012.12.01.10.39.38;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2012.11.26.20.08.15;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.24.17.04.03;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.24.11.50.45;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2012.11.05.19.50.54;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Make it possible to share cores between domains.
@
text
@/*	$OpenBSD: ldomctl.h,v 1.4 2012/11/26 20:08:15 kettenis Exp $	*/

/*
 * Copyright (c) 2012 Mark Kettenis
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

struct core;
struct guest;

struct console {
	uint64_t ino;
	uint64_t resource_id;

	struct guest *guest;
	struct ldc_endpoint *client_endpoint;
	struct ldc_endpoint *server_endpoint;
	struct md_node *hv_node;
	TAILQ_ENTRY(console) link;
};

struct cpu {
	uint64_t pid, vid, gid, partid;
	uint64_t resource_id;

	struct guest *guest;
	struct md_node *hv_node;
	struct core *core;
	TAILQ_ENTRY(cpu) link;
};

struct device {
	uint64_t gid;
	uint64_t cfghandle;
	uint64_t resource_id;

	struct guest *guest;
	struct md_node *hv_node;
	TAILQ_ENTRY(device) link;
};

struct mblock {
	uint64_t membase;
	uint64_t memsize;
	uint64_t realbase;
	uint64_t resource_id;

	struct guest *guest;
	struct md_node *hv_node;
	TAILQ_ENTRY(mblock) link;
};

struct ldc_endpoint {
	uint64_t target_type;
	uint64_t target_guest;
	uint64_t channel;
	uint64_t target_channel;
	uint64_t tx_ino;
	uint64_t rx_ino;
	uint64_t resource_id;
	uint64_t private_svc;
	uint64_t svc_id;

	struct guest *guest;
	struct md_node *hv_node;
	TAILQ_ENTRY(ldc_endpoint) link;
};

struct ldc_channel {
	struct ldc_endpoint *client_endpoint;
	struct ldc_endpoint *server_endpoint;
};

struct guest {
	const char *name;
	uint64_t gid;
	uint64_t pid;
	uint64_t resource_id;
	uint64_t tod_offset;
	uint64_t perfctraccess;
	uint64_t perfctrhtaccess;
	uint64_t rngctlaccessible;
	uint64_t mdpa;

	struct md_node *hv_node;

	struct md *md;
	uint64_t cpu_vid;
	uint64_t endpoint_id;

	struct console *console;
	TAILQ_HEAD(, cpu) cpu_list;
	int num_cpus;
	TAILQ_HEAD(, device) device_list;
	TAILQ_HEAD(, mblock) mblock_list;
	TAILQ_HEAD(, ldc_endpoint) endpoint_list;

	struct ldc_channel domain_services;
	struct ldc_channel vio[8];
	int num_vios;

	TAILQ_ENTRY(guest) link;
};

extern TAILQ_HEAD(guest_head, guest) guest_list;

void add_guest(struct md_node *);

extern struct md *hvmd;
extern uint64_t hv_mdpa;
extern uint64_t hv_membase;
extern uint64_t hv_memsize;

struct vdisk {
	SIMPLEQ_ENTRY(vdisk)	entry;
	const char		*path;
};

struct vnet {
	SIMPLEQ_ENTRY(vnet)	entry;
	uint64_t		mac_addr;
	uint64_t		mtu;
};

struct domain {
	SIMPLEQ_ENTRY(domain)	entry;
	const char *name;
	uint64_t vcpu;
	uint64_t memory;
	SIMPLEQ_HEAD(, vdisk) vdisk_list;
	SIMPLEQ_HEAD(, vnet) vnet_list;
} *domain;

struct ldom_config {
	SIMPLEQ_HEAD(, domain) domain_list;
};

int parse_config(const char *, struct ldom_config *);
void build_config(const char *);
@


1.4
log
@Regeerate Hypervisor MD from scratch instead of modifying the existing one.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldomctl.h,v 1.3 2012/11/24 17:04:03 kettenis Exp $	*/
d19 1
d39 1
@


1.3
log
@Get rid of some hard-coded constants.  Improve memory allocation code.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldomctl.h,v 1.2 2012/11/24 11:50:45 kettenis Exp $	*/
d41 10
d88 4
d103 1
@


1.2
log
@Add code to create new system configuration.  Work in progress, but there's
enough functionality to create a configuration for a t1k or t2k running
System Firmware 6.7.x.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldomctl.h,v 1.1 2012/11/05 19:50:54 kettenis Exp $	*/
d105 2
a106 1

@


1.1
log
@Better code to download configurations onto the SP.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d19 54
d76 2
d80 8
d89 6
d99 1
a99 1
extern TAILQ_HEAD(guest_head, guest) guests;
d105 28
@

