head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.6
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.17.0.6
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.15.0.12
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.4
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.8
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.6
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.14.0.2
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.14
	OPENBSD_5_0:1.11.0.12
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.10
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.8
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.4
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.10.0.4
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.2
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.19
date	2017.01.24.04.22.42;	author benno;	state Exp;
branches;
next	1.18;
commitid	airB1W2Kb948lFil;

1.18
date	2016.09.02.14.00.29;	author benno;	state Exp;
branches;
next	1.17;
commitid	cUiKeXOsNjNjPeSK;

1.17
date	2015.10.24.08.06.45;	author claudio;	state Exp;
branches;
next	1.16;
commitid	Hm8d6FyJL3TL1cxU;

1.16
date	2015.10.11.19.25.06;	author phessler;	state Exp;
branches;
next	1.15;
commitid	hr8Ej7hOjow0btND;

1.15
date	2013.03.07.21.26.28;	author claudio;	state Exp;
branches;
next	1.14;

1.14
date	2012.09.18.09.45.51;	author claudio;	state Exp;
branches;
next	1.13;

1.13
date	2012.06.10.11.16.08;	author claudio;	state Exp;
branches;
next	1.12;

1.12
date	2012.05.22.20.42.48;	author claudio;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.11.14.49.58;	author henning;	state Exp;
branches;
next	1.10;

1.10
date	2007.12.23.18.26.13;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2007.02.25.11.59.39;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.27.21.24.36;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.23.12.11.38;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.24.10.03.44;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.19.12.32.16;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2005.06.05.19.50.09;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.21.16.01.14;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.21.11.58.32;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.04.02.13.52;	author henning;	state Exp;
branches;
next	;


desc
@@


1.19
log
@sync log.c from relayd et al to bgpd.

there is still a little difference regarding handling of the verbosity
value that will be handled later.

ok claudio@@ florian@@
@
text
@/*	$OpenBSD: log.h,v 1.18 2016/09/02 14:00:29 benno Exp $ */

/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef LOG_H
#define LOG_H

#include <stdarg.h>
#include <sys/cdefs.h>

void	log_init(int, int);
void	log_procinit(const char *);
void	log_setverbose(int);
int	log_getverbose(void);
void	log_warn(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	log_warnx(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	log_info(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	log_debug(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	logit(int, const char *, ...)
	    __attribute__((__format__ (printf, 2, 3)));
void	vlog(int, const char *, va_list)
	    __attribute__((__format__ (printf, 2, 0)));
__dead void fatal(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
__dead void fatalx(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));

#endif /* LOG_H */
@


1.18
log
@work on making log.c similar in all daemons:

move daemon-local functions into new logmsg.c, and reduce
the (mostly whitespace) differences so that log.c's can be diffed easily.

ok claudio@@, feedback from henning@@, deraadt@@, reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d25 20
a44 20
extern const char	*log_procname;

void	 log_init(int);
void	 log_verbose(int);
void	 logit(int, const char *, ...)
		__attribute__((__format__ (printf, 2, 3)));
void	 vlog(int, const char *, va_list)
		__attribute__((__format__ (printf, 2, 0)));
void	 log_warn(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 log_warnx(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 log_info(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 log_debug(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 fatal(const char *, ...) __dead
		__attribute__((__format__ (printf, 1, 2)));
void	 fatalx(const char *) __dead
		__attribute__((__format__ (printf, 1, 0)));
@


1.17
log
@Introduce msgtypenames to print bgp msg types (which will be used by bgpctl)
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.16 2015/10/11 19:25:06 phessler Exp $ */
d19 28
a46 128
static const char * const statenames[] = {
	"None",
	"Idle",
	"Connect",
	"Active",
	"OpenSent",
	"OpenConfirm",
	"Established"
};

static const char * const msgtypenames[] = {
	"NONE",
	"OPEN",
	"UPDATE",
	"NOTIFICATION",
	"KEEPALIVE",
	"RREFRESH"
};

static const char * const eventnames[] = {
	"None",
	"Start",
	"Stop",
	"Connection opened",
	"Connection closed",
	"Connection open failed",
	"Fatal error",
	"ConnectRetryTimer expired",
	"HoldTimer expired",
	"KeepaliveTimer expired",
	"OPEN message received",
	"KEEPALIVE message received",
	"UPDATE message received",
	"NOTIFICATION received"
};

static const char * const errnames[] = {
	"none",
	"Header error",
	"error in OPEN message",
	"error in UPDATE message",
	"HoldTimer expired",
	"Finite State Machine error",
	"Cease"
};

static const char * const suberr_header_names[] = {
	"none",
	"synchronization error",
	"wrong length",
	"unknown message type"
};

static const char * const suberr_open_names[] = {
	"none",
	"version mismatch",
	"AS unacceptable",
	"BGPID invalid",
	"optional parameter error",
	"authentication error",
	"unacceptable holdtime",
	"unsupported capability",
	"group membership conflict",	/* draft-ietf-idr-bgp-multisession-07 */
	"group membership required"	/* draft-ietf-idr-bgp-multisession-07 */
};

static const char * const suberr_fsm_names[] = {
	"unspecified error",
	"received unexpected message in OpenSent",
	"received unexpected message in OpenConfirm",
	"received unexpected message in Established"
};

static const char * const suberr_update_names[] = {
	"none",
	"attribute list error",
	"unknown well-known attribute",
	"well-known attribute missing",
	"attribute flags error",
	"attribute length wrong",
	"origin unacceptable",
	"loop detected",
	"nexthop unacceptable",
	"optional attribute error",
	"network unacceptable",
	"AS-Path unacceptable"
};

static const char * const suberr_cease_names[] = {
	"none",
	"max-prefix exceeded",
	"administratively down",
	"peer unconfigured",
	"administrative reset",
	"connection rejected",
	"other config change",
	"collision",
	"resource exhaustion"
};

static const char * const procnames[] = {
	"parent",
	"SE",
	"RDE"
};

static const char * const ctl_res_strerror[] = {
	"no error",
	"no such neighbor",
	"permission denied",
	"neighbor does not have this capability",
	"config file has errors, reload failed",
	"previous reload still running",
	"out of memory",
	"not a cloned peer",
	"peer still active, down peer first"
};

static const char * const timernames[] = {
	"None",
	"ConnectRetryTimer",
	"KeepaliveTimer",
	"HoldTimer",
	"IdleHoldTimer",
	"IdleHoldResetTimer",
	"CarpUndemoteTimer",
	""
};
@


1.16
log
@some peers are following an expired draft RFC and are sending "unknown"
error codes to OPEN messages.  make them "known", and show them.

OK benno@@, claudio@@, sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.15 2013/03/07 21:26:28 claudio Exp $ */
d27 9
@


1.15
log
@Implements a few missing bits for better templates support:
- on config reload also adjust the cloned neighbors so that they get the
  config changes as well.
- clean up sessions that are 1h idle but in state active (instead of down)
- add bits to allow bgpctl to destroy cloned neighbors
Tested by sthen@@ some time ago, OK phessler@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.14 2012/09/18 09:45:51 claudio Exp $ */
d71 3
a73 1
	"unsupported capability"
@


1.14
log
@Only allow one reload request at a time in bgpd. Needed for further work.
OK sthen@@, benno@@, henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.13 2012/06/10 11:16:08 claudio Exp $ */
d121 3
a123 1
	"out of memory"
@


1.13
log
@Add error messages for BGP Finite State Machine Error subcodes as defined
in RFC 6608. OK henning@@ sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.12 2012/05/22 20:42:48 claudio Exp $ */
d120 1
@


1.12
log
@Sync log strings with the possible values of IMSG_CTL_RESULT
OK henning@@ sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.11 2008/09/11 14:49:58 henning Exp $ */
d72 7
@


1.11
log
@remove hackery to un-demote after the session has been established for
a while, we can now just use a timer (since i rewrote the timer code)
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.10 2007/12/23 18:26:13 henning Exp $ */
d112 2
a113 1
	"config file has errors, reload failed"
@


1.10
log
@send timers for bgpctlshow neighbor foo timer in seperate messages after
the peer data. makes bgpctl display code independent from timer
implementation internals. only running timers are displayed now, stopped
ones are skipped.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.9 2007/02/25 11:59:39 henning Exp $ */
d122 1
@


1.9
log
@tiny typos hiding, uncovered  Leen Besselink <leen@@consolejunkie.net>
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.8 2006/05/27 21:24:36 claudio Exp $ */
d113 10
@


1.8
log
@Pass a IMSG_CTL_RESULT messgae back to bgpctl on reloads to indicate if
the reload was successful or not. OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.7 2006/05/23 12:11:38 henning Exp $ */
d69 1
a69 1
	"Authentication error",
d98 1
a98 1
	"ressource exhaustion"
@


1.7
log
@allow bgpd to request a route refresh from a neighbor if that neighbor
announced route refresh capabilities
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.6 2006/01/24 10:03:44 henning Exp $ */
d111 2
a112 1
	"neighbor does not have this capability"
@


1.6
log
@introduce a second control socket, which is restricted to certain messages,
nameley the show ones. needed for looking glass style applications,
monitoring etc. claudio ok
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.5 2005/10/19 12:32:16 henning Exp $ */
d110 2
a111 1
	"permission denied"
@


1.5
log
@for "bgpctl neighbor foo up/down/clear", make bgpctl not exit after sending
the request, but wait for the new IMSG_CTL_RESULT message, which contains
a status code to indicate wether the request was processed successfully
or wether an error occured and if so what kind of error.
no more "IMSG_CTL_NEIGHBOR_ with unknown neighbor foobaz" in the log
when you mistyped foobar - no bgpctl itself complains
claudio ok
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.4 2005/06/05 19:50:09 henning Exp $ */
d109 2
a110 1
	"no such neighbor"
@


1.4
log
@provide cleartext messages for the cease suberror codes
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.3 2004/05/21 16:01:14 claudio Exp $ */
d105 5
@


1.3
log
@Fix some gcc warnings in bgpctl because of the last commit. OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.2 2004/05/21 11:58:32 henning Exp $ */
d87 12
@


1.2
log
@move the big name tables to the .h file, makes the .c easier
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.1 2004/01/04 02:13:52 henning Exp $ */
d19 1
a19 1
static const char *statenames[] = {
d29 1
a29 1
static const char *eventnames[] = {
d46 1
a46 1
static const char *errnames[] = {
d56 1
a56 1
static const char *suberr_header_names[] = {
d63 1
a63 1
static const char *suberr_open_names[] = {
d74 1
a74 1
static const char *suberr_update_names[] = {
d89 1
a89 1
static const char *procnames[] = {
@


1.1
log
@share statenames
@
text
@d1 1
a1 1
/*	$OpenBSD: session.h,v 1.7 2004/01/03 22:44:29 henning Exp $ */
d27 66
@

