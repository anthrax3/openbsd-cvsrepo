head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.6
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.6
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.6.0.22
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.20
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.16
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.14
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.20
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.16
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.14
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.12
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.10
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.8
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.6
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2017.01.24.04.22.42;	author benno;	state Exp;
branches;
next	1.9;
commitid	airB1W2Kb948lFil;

1.9
date	2015.12.23.20.42.20;	author mmcc;	state Exp;
branches;
next	1.8;
commitid	jIvkBGlsHFSXuv8Q;

1.8
date	2015.01.21.21.50.32;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	3o2AkhiRPQXvG94X;

1.7
date	2014.10.08.16.15.37;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	8hXaK4f2GeAALziF;

1.6
date	2009.12.01.14.28.05;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2005.07.01.09.19.24;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.02.17.00.52;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.14.23.08.44;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.08.19.17.20;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.07.10.06.15;	author djm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@sync log.c from relayd et al to bgpd.

there is still a little difference regarding handling of the verbosity
value that will be handled later.

ok claudio@@ florian@@
@
text
@/*	$OpenBSD: pftable.c,v 1.9 2015/12/23 20:42:20 mmcc Exp $ */

/*
 * Copyright (c) 2004 Damien Miller <djm@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/socket.h>

#include <netinet/in.h>
#include <net/if.h>
#include <net/pfvar.h>

#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <fcntl.h>

#include "log.h"

/* Namespace collision: these are defined in both bgpd.h and pfvar.h */
#undef v4
#undef v6
#undef addr8
#undef addr16
#undef addr32

#include "bgpd.h"

static int devpf = -1;

struct pf_table {
	LIST_ENTRY(pf_table)	entry;
	char			name[PFTABLE_LEN];
	unsigned long		what;
	struct pfr_addr		*worklist;
	int			naddrs;
	int			nalloc;
};

/* List of tables under management */
LIST_HEAD(, pf_table) tables = LIST_HEAD_INITIALIZER(tables);

static int
pftable_change(struct pf_table *pft)
{
	struct pfioc_table tio;
	int ret;

	if (pft->naddrs == 0 || pft->what == 0)
		return (0);

	if (devpf == -1 && ((devpf = open("/dev/pf", O_RDWR)) == -1))
		fatal("open(/dev/pf)");

	bzero(&tio, sizeof(tio));
	strlcpy(tio.pfrio_table.pfrt_name, pft->name,
	    sizeof(tio.pfrio_table.pfrt_name));
	tio.pfrio_buffer = pft->worklist;
	tio.pfrio_esize = sizeof(*pft->worklist);
	tio.pfrio_size = pft->naddrs;

	ret = ioctl(devpf, pft->what, &tio);

	/* bad prefixes shouldn't cause us to die */
	if (ret == -1) {
		if (errno == EINVAL)
			return (0);
		log_warn("pftable_change ioctl");
	}

	return (ret);
}

static int
pftable_clear(const char *name)
{
	struct pfioc_table tio;

	if (devpf == -1 && ((devpf = open("/dev/pf", O_RDWR)) == -1))
		fatal("open(/dev/pf)");

	bzero(&tio, sizeof(tio));
	strlcpy(tio.pfrio_table.pfrt_name, name,
	    sizeof(tio.pfrio_table.pfrt_name));

	if (ioctl(devpf, DIOCRCLRADDRS, &tio) != 0) {
		log_warn("pftable_clear ioctl");
		return (-1);
	}

	return (0);
}

int
pftable_exists(const char *name)
{
	struct pfioc_table tio;
	struct pfr_astats dummy;

	if (devpf == -1 && ((devpf = open("/dev/pf", O_RDWR)) == -1))
		fatal("open(/dev/pf)");

	bzero(&tio, sizeof(tio));
	strlcpy(tio.pfrio_table.pfrt_name, name,
	    sizeof(tio.pfrio_table.pfrt_name));
	tio.pfrio_buffer = &dummy;
	tio.pfrio_esize = sizeof(dummy);
	tio.pfrio_size = 1;

	if (ioctl(devpf, DIOCRGETASTATS, &tio) != 0)
		return (-1);

	return (0);
}

int
pftable_add(const char *name)
{
	struct pf_table *pft;

	/* Ignore duplicates */
	LIST_FOREACH(pft, &tables, entry)
		if (strcmp(pft->name, name) == 0)
			return (0);

	if ((pft = malloc(sizeof(*pft))) == NULL) {
		log_warn("pftable malloc");
		return (-1);
	}

	bzero(pft, sizeof(*pft));
	if (strlcpy(pft->name, name, sizeof(pft->name)) >= sizeof(pft->name)) {
		log_warn("pf_table name too long");
		free(pft);
		return (-1);
	}

	LIST_INSERT_HEAD(&tables, pft, entry);

	return (0);
}

int
pftable_clear_all(void)
{
	struct pf_table *pft;

	LIST_FOREACH(pft, &tables, entry) {
		if (pftable_clear(pft->name) != 0)
			return (-1);
		free(pft->worklist);
		pft->worklist = NULL;
		pft->nalloc = pft->naddrs = 0;
		pft->what = 0;
	}

	return (0);
}

static int
pftable_add_work(const char *table, struct bgpd_addr *addr,
    u_int8_t len, int del)
{
	struct pf_table *pft;
	struct pfr_addr *pfa, *tmp;
	unsigned long what;

	if (*table == '\0' || len > 128)
		fatal("pftable_add_work: insane");

	/* Find table */
	LIST_FOREACH(pft, &tables, entry)
		if (strcmp(pft->name, table) == 0)
			break;

	if (pft == NULL) {
		log_warn("pf table %s not found", table);
		return (-1);
	}

	/* Only one type of work on the list at a time */
	what = del ? DIOCRDELADDRS : DIOCRADDADDRS;
	if (pft->naddrs != 0 && pft->what != what)
		fatal("attempt to mix pf table additions/deletions");

	if (pft->nalloc <= pft->naddrs)
		pft->nalloc = pft->nalloc == 0 ? 1 : pft->nalloc * 2;
	tmp = reallocarray(pft->worklist, pft->nalloc, sizeof(*tmp));
	if (tmp == NULL) {
		if (pft->worklist != NULL) {
			log_warn("pftable_add_work: malloc");
			free(pft->worklist);
			pft->worklist = NULL;
		}
		pft->nalloc = pft->naddrs = 0;
		pft->what = 0;
		return (-1);
	}
	pft->worklist = tmp;
	pfa = &pft->worklist[pft->naddrs];

	bzero(pfa, sizeof(*pfa));
	memcpy(&pfa->pfra_u, &addr->ba, (len + 7U) / 8);
	pfa->pfra_af = aid2af(addr->aid);
	pfa->pfra_net = len;

	pft->naddrs++;
	pft->what = what;

	/* Don't let the list grow too large */
	if (pft->naddrs >= 1024)
		pftable_commit();

	return (0);
}

/* imsg handlers */
int
pftable_addr_add(struct pftable_msg *m)
{
	return (pftable_add_work(m->pftable, &m->addr, m->len, 0));
}

int
pftable_addr_remove(struct pftable_msg *m)
{
	return (pftable_add_work(m->pftable, &m->addr, m->len, 1));
}

int
pftable_commit(void)
{
	struct pf_table *pft;
	int ret = 0;

	LIST_FOREACH(pft, &tables, entry) {
		if (pft->what != 0 && pftable_change(pft) != 0)
			ret = -1;
		free(pft->worklist);
		pft->worklist = NULL;
		pft->nalloc = pft->naddrs = 0;
		pft->what = 0;
	}

	return (ret);
}

@


1.9
log
@Remove NULL-checks before free(). I think I've almost scrubbed the
entire tree of these...
@
text
@d1 1
a1 1
/*	$OpenBSD: pftable.c,v 1.8 2015/01/21 21:50:32 deraadt Exp $ */
d31 2
@


1.8
log
@Include <netinet/in.h> before <net/pfvar.h>.  In a future change when
ports is ready, <net/pfvar.h> will stop including a pile of balony.
@
text
@d1 1
a1 1
/*	$OpenBSD: pftable.c,v 1.7 2014/10/08 16:15:37 deraadt Exp $ */
d163 2
a164 4
		if (pft->worklist != NULL) {
			free(pft->worklist);
			pft->worklist = NULL;
		}
d251 1
a251 2
		if (pft->worklist != NULL)
			free(pft->worklist);
@


1.7
log
@Use reallocarray() throughout to spot multiplicative int overflow.
ok henning benno
@
text
@d1 1
a1 1
/*	$OpenBSD: pftable.c,v 1.6 2009/12/01 14:28:05 claudio Exp $ */
d23 1
@


1.6
log
@Use an artificial address family id in struct bgpd_addr and almost everywhere
else. Adds conversion functions to map AFI/SAFI and the Unix AF_ values
from and into AID used in bgpd.  This is needed to support things like MPLS
VPN and other upcomming changes that need to play a lot with AFI/SAFI pairs.
Mostly mechanical change, henning@@ has no particular issues with this.
Must go in so that I can continue working.
@
text
@d1 1
a1 1
/*	$OpenBSD: pftable.c,v 1.5 2005/07/01 09:19:24 claudio Exp $ */
d201 1
a201 1
	tmp = realloc(pft->worklist, sizeof(*tmp) * pft->nalloc);
@


1.5
log
@Make the pftable filter set use the name2id "cache" like the route labels.
This saves 14 bytes per aspath. OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pftable.c,v 1.4 2004/11/02 17:00:52 henning Exp $ */
d217 1
a217 1
	pfa->pfra_af = addr->af;
@


1.4
log
@don't leak mem on strlcpy failure, Patrick Latifi
@
text
@d1 1
a1 1
/*	$OpenBSD: pftable.c,v 1.3 2004/09/14 23:08:44 henning Exp $ */
d79 1
a79 1
		log_warn("pftable_change ioctl %s", strerror(errno));
d98 1
a98 1
		log_warn("pftable_clear ioctl %s", strerror(errno));
@


1.3
log
@gccisms are bad, including __func__
requested by theo
@
text
@d1 1
a1 1
/*	$OpenBSD: pftable.c,v 1.2 2004/05/08 19:17:20 henning Exp $ */
d145 1
@


1.2
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: pftable.c,v 1.1 2004/05/07 10:06:15 djm Exp $ */
d79 1
a79 1
		log_warn("%s ioctl %s", __func__, strerror(errno));
d98 1
a98 1
		log_warn("%s ioctl %s", __func__, strerror(errno));
d203 1
a203 1
			log_warn("%s: malloc", __func__);
@


1.1
log
@add a filter option to dump prefixes learned in UPDATEs into a PF table,
intended for building realtime BGP blacklists (e.g. with spamd);
ok claudio & henning
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d57 1
a57 1
    	struct pfioc_table tio;
d173 1
a173 1
pftable_add_work(const char *table, struct bgpd_addr *addr, 
@

