head	1.17;
access;
symbols
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.16.0.10
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.4
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.12
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.10
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.6
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.4
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.2
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.6
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.13.0.8
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.4
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.6
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4;
locks; strict;
comment	@ * @;


1.17
date	2017.01.24.04.22.42;	author benno;	state Exp;
branches;
next	1.16;
commitid	airB1W2Kb948lFil;

1.16
date	2015.01.16.06.40.15;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	Uu5nFG3wCl0LACBb;

1.15
date	2012.04.12.17.26.09;	author claudio;	state Exp;
branches;
next	1.14;

1.14
date	2010.10.24.17.20.08;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.21.20.32.53;	author henning;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.11.05.30.35;	author henning;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2008.05.08.09.53.12;	author henning;	state Exp;
branches;
next	1.10;

1.10
date	2008.05.08.09.51.46;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.08.07.59.56;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.08.07.45.21;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.08.07.43.03;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.08.07.40.03;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.08.06.52.13;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2007.12.23.18.56.17;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2007.12.23.18.26.13;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.23.16.40.43;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2007.12.20.17.08.48;	author henning;	state Exp;
branches;
next	;

1.12.2.1
date	2009.02.20.07.20.15;	author henning;	state Exp;
branches;
next	;


desc
@@


1.17
log
@sync log.c from relayd et al to bgpd.

there is still a little difference regarding handling of the verbosity
value that will be handled later.

ok claudio@@ florian@@
@
text
@/*	$OpenBSD: timer.c,v 1.16 2015/01/16 06:40:15 deraadt Exp $ */

/*
 * Copyright (c) 2003-2007 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <stdlib.h>

#include "bgpd.h"
#include "session.h"
#include "log.h"

#define MAXIMUM(a, b)	(((a) > (b)) ? (a) : (b))

time_t
getmonotime(void)
{
	struct timespec	ts;

	if (clock_gettime(CLOCK_MONOTONIC, &ts) != 0)
		fatal("clock_gettime");

	return (ts.tv_sec);
}

struct peer_timer *
timer_get(struct peer *p, enum Timer timer)
{
	struct peer_timer *pt;

	TAILQ_FOREACH(pt, &p->timers, entry)
		if (pt->type == timer)
			break;

	return (pt);
}

struct peer_timer *
timer_nextisdue(struct peer *p)
{
	struct peer_timer *pt;

	pt = TAILQ_FIRST(&p->timers);
	if (pt != NULL && pt->val > 0 && pt->val <= getmonotime())
		return (pt);
	return (NULL);
}

time_t
timer_nextduein(struct peer *p)
{
	struct peer_timer *pt;

	if ((pt = TAILQ_FIRST(&p->timers)) != NULL && pt->val > 0)
		return (MAXIMUM(pt->val - getmonotime(), 0));
	return (-1);
}

int
timer_running(struct peer *p, enum Timer timer, time_t *left)
{
	struct peer_timer	*pt = timer_get(p, timer);

	if (pt != NULL && pt->val > 0) {
		if (left != NULL)
			*left = pt->val - getmonotime();
		return (1);
	}
	return (0);
}

void
timer_set(struct peer *p, enum Timer timer, u_int offset)
{
	struct peer_timer	*t, *pt = timer_get(p, timer);

	if (pt == NULL) {	/* have to create */
		if ((pt = malloc(sizeof(*pt))) == NULL)
			fatal("timer_set");
		pt->type = timer;
	} else {
		if (pt->val == getmonotime() + (time_t)offset)
			return;
		TAILQ_REMOVE(&p->timers, pt, entry);
	}

	pt->val = getmonotime() + offset;

	TAILQ_FOREACH(t, &p->timers, entry)
		if (t->val == 0 || t->val > pt->val)
			break;
	if (t != NULL)
		TAILQ_INSERT_BEFORE(t, pt, entry);
	else
		TAILQ_INSERT_TAIL(&p->timers, pt, entry);
}

void
timer_stop(struct peer *p, enum Timer timer)
{
	struct peer_timer	*pt = timer_get(p, timer);

	if (pt != NULL) {
		pt->val = 0;
		TAILQ_REMOVE(&p->timers, pt, entry);
		TAILQ_INSERT_TAIL(&p->timers, pt, entry);
	}
}

void
timer_remove(struct peer *p, enum Timer timer)
{
	struct peer_timer	*pt = timer_get(p, timer);

	if (pt != NULL) {
		TAILQ_REMOVE(&p->timers, pt, entry);
		free(pt);
	}
}

void
timer_remove_all(struct peer *p)
{
	struct peer_timer	*pt;

	while ((pt = TAILQ_FIRST(&p->timers)) != NULL) {
		TAILQ_REMOVE(&p->timers, pt, entry);
		free(pt);
	}
}
@


1.16
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.15 2012/04/12 17:26:09 claudio Exp $ */
d24 1
@


1.15
log
@accept() pacing for bgpd based on similar work done on other daemons.
OK henning@@ sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.14 2010/10/24 17:20:08 deraadt Exp $ */
a18 1
#include <sys/param.h>
d25 2
d67 1
a67 1
		return (MAX(pt->val - getmonotime(), 0));
@


1.14
log
@spacing and irrelevant glitches which disrupt lint
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.13 2009/01/21 20:32:53 henning Exp $ */
a24 2

time_t	getmonotime(void);
@


1.13
log
@timer_nextduein returned crap. fix it. so obvious... how could that happen.
found out the hard way by Marc Runkel <MRunkel@@untangle.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.12 2008/06/11 05:30:35 henning Exp $ */
d46 1
a46 1
				break;
@


1.12
log
@use monotime instead of wallclock.
makes us independent from system time changes.
diff from japan,was hiding... ok claudio some time ago
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.11 2008/05/08 09:53:12 henning Exp $ */
d68 1
a68 1
		return (pt->val);
@


1.12.2.1
log
@MFC, ok deraadt
revision 1.13
date: 2009/01/21 20:32:53;  author: henning;  state: Exp;  lines: +2 -2
timer_nextduein returned crap. fix it. so obvious... how could that happen.
found out the hard way by Marc Runkel <MRunkel@@untangle.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.12 2008/06/11 05:30:35 henning Exp $ */
d68 1
a68 1
		return (MAX(pt->val - getmonotime(), 0));
@


1.11
log
@timer_due is not needed any more
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.10 2008/05/08 09:51:46 henning Exp $ */
d26 13
d57 1
a57 1
	if (pt != NULL && pt->val > 0 && pt->val <= time(NULL))
d79 1
a79 1
			*left = pt->val - time(NULL);
d95 1
a95 1
		if (pt->val == time(NULL) + (time_t)offset)
d100 1
a100 1
	pt->val = time(NULL) + offset;
@


1.10
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.9 2008/05/08 07:59:56 henning Exp $ */
a35 10
}

int
timer_due(struct peer *p, enum Timer timer)
{
	struct peer_timer	*pt = timer_get(p, timer);

	if (pt != NULL && pt->val > 0 && pt->val <= time(NULL))
		return (1);
	return (0);
@


1.9
log
@take advanatge of the timewheelin timer_nextduein - we just need to look
at the first one
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.8 2008/05/08 07:45:21 henning Exp $ */
d127 1
a127 1
		free (pt);
@


1.8
log
@we can stopin timer_set if new timeout equals the oldone.
matters for stuff like the HoldTimer that gets reset often
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.7 2008/05/08 07:43:03 henning Exp $ */
a53 1

d62 1
a62 7
	u_int	i;
	time_t	d, r = -1;

	for (i = 1; i < Timer_Max; i++)
		if (timer_running(p, i, &d))
			if (r == -1 || d < r)
				r = d;
d64 3
a66 1
	return (r);
d92 1
a92 1
		if (pt->val == time(NULL) + offset)
@


1.7
log
@take advantage of the timewheel: instead of checking each an every
timer, just get the first off the queue and check wether it is due
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.6 2008/05/08 07:40:03 henning Exp $ */
d97 2
@


1.6
log
@in timer_set, when figuring out the right position for the timer,
wemust stop walking the list once werun into a stopped timer, or
eventually all stopped timers will queue up at the very front (instead of
at the tail)
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.5 2008/05/08 06:52:13 henning Exp $ */
d46 12
@


1.5
log
@change timer internals so that we use a timewheel (tailq, sorted by expiry
so that the timer that will expire first is always the first element,
and so on). will make the checking a bit faster and moreelegant and more
conveniant. ok claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.4 2007/12/23 18:56:17 henning Exp $ */
d91 1
a91 1
		if (t->val > pt->val)
@


1.4
log
@provide timer_nextduein, which provides the number of seconds until the
next timer expires.
use that in the session engine's mainloop, which simplifies it and
removes the last bits of timer internals knowledge from anywhere outside
timer.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.3 2007/12/23 18:26:13 henning Exp $ */
d21 1
d26 1
a26 1
time_t *
d29 5
a33 16
	switch (timer) {
	case Timer_None:
		fatal("timer_get called with Timer_None");
	case Timer_ConnectRetry:
		return (&p->ConnectRetryTimer);
	case Timer_Keepalive:
		return (&p->KeepaliveTimer);
	case Timer_Hold:
		return (&p->HoldTimer);
	case Timer_IdleHold:
		return (&p->IdleHoldTimer);
	case Timer_IdleHoldReset:
		return (&p->IdleHoldResetTimer);
	case Timer_Max:
		fatal("timer_get called with Timer_Max");
	}
d35 1
a35 1
	fatal("King Bula lost in time");
d41 1
a41 1
	time_t	*t = timer_get(p, timer);
d43 1
a43 1
	if (t != NULL && *t > 0 && *t <= time(NULL))
d65 1
a65 1
	time_t	*t = timer_get(p, timer);
d67 1
a67 1
	if (t != NULL && *t > 0) {
d69 1
a69 1
			*left = *t - time(NULL);
d78 11
a88 1
	time_t	*t = timer_get(p, timer);
d90 7
a96 1
	*t = time(NULL) + offset;
d102 24
a125 1
	time_t	*t = timer_get(p, timer);
d127 4
a130 2
	if (t != NULL)
		*t = 0;
@


1.3
log
@send timers for bgpctlshow neighbor foo timer in seperate messages after
the peer data. makes bgpctl display code independent from timer
implementation internals. only running timers are displayed now, stopped
ones are skipped.
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.2 2007/12/23 16:40:43 henning Exp $ */
d56 14
@


1.2
log
@make all timer_get() callers (except timer_set which will need
special handling) and onein session.c that will go away able to
cope with timer_get() returning NULL (i.e.nosuch timer/not running)
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.1 2007/12/20 17:08:48 henning Exp $ */
d41 2
@


1.1
log
@rework timers.
stop changing tienmr values directly, always use new
timer_(get/set/stop/running) functions. preparation for more to come :)
ok claudio
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d51 1
a51 1
	if (*t > 0 && *t <= time(NULL))
d61 3
a63 2
	*left = *t - time(NULL);
	if (*t > 0)
d65 1
d82 2
a83 1
	*t = 0;
@

