head	1.9;
access;
symbols
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.18
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.14
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.16
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.8
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.12
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.10
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.6
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.4
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6;
locks; strict;
comment	@ * @;


1.9
date	2012.04.30.21.40.03;	author jmatthew;	state Exp;
branches;
next	1.8;

1.8
date	2011.08.28.16.37.28;	author aschrijver;	state Exp;
branches;
next	1.7;

1.7
date	2010.02.06.08.04.45;	author blambert;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.27.11.33.22;	author aschrijver;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.26.21.56.15;	author pyr;	state Exp;
branches;
next	1.4;

1.4
date	2008.10.14.21.41.03;	author aschrijver;	state Exp;
branches;
next	1.3;

1.3
date	2008.10.06.11.20.20;	author aschrijver;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.30.17.28.52;	author pyr;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.30.16.24.16;	author aschrijver;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Use paged searches so we can handle larger directories.  Servers that don't
understand paging, such as ldapd(8), ignore it and return a single set of
results as before.
from Jim Smith, some tweaks and fixes by me, ok dlg@@
@
text
@/*	$Id: aldap.h,v 1.8 2011/08/28 16:37:28 aschrijver Exp $ */
/*	$OpenBSD: aldap.h,v 1.8 2011/08/28 16:37:28 aschrijver Exp $ */

/*
 * Copyright (c) 2008 Alexander Schrijver <aschrijver@@openbsd.org>
 * Copyright (c) 2006, 2007 Marc Balmer <mbalmer@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <stdio.h>
#include "ber.h"

#define LDAP_URL "ldap://"
#define LDAP_PORT 389
#define LDAP_PAGED_OID  "1.2.840.113556.1.4.319"

struct aldap {
#define ALDAP_ERR_SUCCESS		0
#define ALDAP_ERR_PARSER_ERROR		1
#define ALDAP_ERR_INVALID_FILTER	2
#define ALDAP_ERR_OPERATION_FAILED	3
	u_int8_t	err;
	int		msgid;
	struct ber	ber;
};

struct aldap_page_control {
	int size;
	char *cookie;
	unsigned int cookie_len;
};

struct aldap_message {
	int msgid;
	int message_type;

	struct ber_element	*msg;

	struct ber_element	*header;
	struct ber_element	*protocol_op;

	struct ber_element	*dn;

	union {
		struct {
			long long		 rescode;
			struct ber_element	*diagmsg;
		}			 res;
		struct {
			struct ber_element	*iter;
			struct ber_element	*attrs;
		}			 search;
	} body;
	struct ber_element	*references;
	struct aldap_page_control *page; 
};

enum aldap_protocol {
	LDAP,
	LDAPS
};

struct aldap_url {
	int		 protocol;
	char		*host;
	in_port_t	 port;
	char		*dn;
#define MAXATTR 1024
	char		*attributes[MAXATTR];
	int		 scope;
	char		*filter;
	char		*buffer;
};

enum protocol_op {
	LDAP_REQ_BIND		= 0,
	LDAP_RES_BIND		= 1,
	LDAP_REQ_UNBIND_30	= 2,
	LDAP_REQ_SEARCH		= 3,
	LDAP_RES_SEARCH_ENTRY	= 4,
	LDAP_RES_SEARCH_RESULT	= 5,
	LDAP_REQ_MODIFY		= 6,
	LDAP_RES_MODIFY		= 7,
	LDAP_REQ_ADD		= 8,
	LDAP_RES_ADD		= 9,
	LDAP_REQ_DELETE_30	= 10,
	LDAP_RES_DELETE		= 11,
	LDAP_REQ_MODRDN		= 12,
	LDAP_RES_MODRDN		= 13,
	LDAP_REQ_COMPARE	= 14,
	LDAP_RES_COMPARE	= 15,
	LDAP_REQ_ABANDON_30	= 16,

	LDAP_RES_SEARCH_REFERENCE = 19,
};

enum deref_aliases {
	LDAP_DEREF_NEVER	= 0,
	LDAP_DEREF_SEARCHING	= 1,
	LDAP_DEREF_FINDING	= 2,
	LDAP_DEREF_ALWAYS	= 3,
};

enum authentication_choice {
	LDAP_AUTH_SIMPLE	= 0,
};

enum scope {
	LDAP_SCOPE_BASE		= 0,
	LDAP_SCOPE_ONELEVEL	= 1,
	LDAP_SCOPE_SUBTREE	= 2,
};

enum result_code {
	LDAP_SUCCESS				= 0,
	LDAP_OPERATIONS_ERROR			= 1,
	LDAP_PROTOCOL_ERROR			= 2,
	LDAP_TIMELIMIT_EXCEEDED			= 3,
	LDAP_SIZELIMIT_EXCEEDED			= 4,
	LDAP_COMPARE_FALSE			= 5,
	LDAP_COMPARE_TRUE			= 6,
	LDAP_STRONG_AUTH_NOT_SUPPORTED		= 7,
	LDAP_STRONG_AUTH_REQUIRED		= 8,

	LDAP_REFERRAL				= 10,
	LDAP_ADMINLIMIT_EXCEEDED		= 11,
	LDAP_UNAVAILABLE_CRITICAL_EXTENSION	= 12,
	LDAP_CONFIDENTIALITY_REQUIRED		= 13,
	LDAP_SASL_BIND_IN_PROGRESS		= 14,
	LDAP_NO_SUCH_ATTRIBUTE			= 16,
	LDAP_UNDEFINED_TYPE			= 17,
	LDAP_INAPPROPRIATE_MATCHING		= 18,
	LDAP_CONSTRAINT_VIOLATION		= 19,
	LDAP_TYPE_OR_VALUE_EXISTS		= 20,
	LDAP_INVALID_SYNTAX			= 21,

	LDAP_NO_SUCH_OBJECT			= 32,
	LDAP_ALIAS_PROBLEM			= 33,
	LDAP_INVALID_DN_SYNTAX			= 34,

	LDAP_ALIAS_DEREF_PROBLEM		= 36,

	LDAP_INAPPROPRIATE_AUTH			= 48,
	LDAP_INVALID_CREDENTIALS		= 49,
	LDAP_INSUFFICIENT_ACCESS		= 50,
	LDAP_BUSY				= 51,
	LDAP_UNAVAILABLE			= 52,
	LDAP_UNWILLING_TO_PERFORM		= 53,
	LDAP_LOOP_DETECT			= 54,

	LDAP_NAMING_VIOLATION			= 64,
	LDAP_OBJECT_CLASS_VIOLATION		= 65,
	LDAP_NOT_ALLOWED_ON_NONLEAF		= 66,
	LDAP_NOT_ALLOWED_ON_RDN			= 67,
	LDAP_ALREADY_EXISTS			= 68,
	LDAP_NO_OBJECT_CLASS_MODS		= 69,

	LDAP_AFFECTS_MULTIPLE_DSAS		= 71,

	LDAP_OTHER				= 80,
};

enum filter {
	LDAP_FILT_AND		= 0,
	LDAP_FILT_OR		= 1,
	LDAP_FILT_NOT		= 2,
	LDAP_FILT_EQ		= 3,
	LDAP_FILT_SUBS		= 4,
	LDAP_FILT_GE		= 5,
	LDAP_FILT_LE		= 6,
	LDAP_FILT_PRES		= 7,
	LDAP_FILT_APPR		= 8,
};

enum subfilter {
	LDAP_FILT_SUBS_INIT	= 0,
	LDAP_FILT_SUBS_ANY	= 1,
	LDAP_FILT_SUBS_FIN	= 2,
};

struct aldap		*aldap_init(int fd);
int			 aldap_close(struct aldap *);
struct aldap_message	*aldap_parse(struct aldap *);
void			 aldap_freemsg(struct aldap_message *);

int	 aldap_bind(struct aldap *, char *, char *);
int	 aldap_unbind(struct aldap *);
int	 aldap_search(struct aldap *, char *, enum scope, char *, char **, int, int, int, struct aldap_page_control *);
int	 aldap_get_errno(struct aldap *, const char **);

int	 aldap_get_resultcode(struct aldap_message *);
char	*aldap_get_dn(struct aldap_message *);
char	*aldap_get_diagmsg(struct aldap_message *);
char	**aldap_get_references(struct aldap_message *);
void	 aldap_free_references(char **values);
#if 0
int	 aldap_parse_url(char *, struct aldap_url *);
void	 aldap_free_url(struct aldap_url *);
int	 aldap_search_url(struct aldap *, char *, int, int, int);
#endif

int	 aldap_count_attrs(struct aldap_message *);
int	 aldap_match_attr(struct aldap_message *, char *, char ***);
int	 aldap_first_attr(struct aldap_message *, char **, char ***);
int	 aldap_next_attr(struct aldap_message *, char **, char ***);
int	 aldap_free_attr(char **);

struct aldap_page_control *aldap_parse_page_control(struct ber_element *, size_t len);
void	 aldap_freepage(struct aldap_page_control *);
@


1.8
log
@Use the correct terminology, replace the term "entry" with the term "attribute" where applicable.

OK martinh@@ pyr@@
@
text
@d1 2
a2 2
/*	$Id: aldap.h,v 1.7 2010/02/06 08:04:45 blambert Exp $ */
/*	$OpenBSD: aldap.h,v 1.7 2010/02/06 08:04:45 blambert Exp $ */
d26 1
d38 6
d66 1
d199 1
a199 1
int	 aldap_search(struct aldap *, char *, enum scope, char *, char **, int, int, int);
d218 3
@


1.7
log
@Simplify LDAP URL handling (currently unused):
instead of strdup()'ing multiple values from an already strdup'ed
buffer (none of which were checked for NULL upon return, which is
also fixed in this), just use a buffer attached to the aldap_url
struct.

Add an aldap_search_url() function, which is a wrapper around
aldap_parse_url and aldap_search.

Finally, since the URL bits are unused, wrap them in #if 0 for now.

ok pyr@@, whose heart was a little broken by the #if 0 (temporary, I swear!)
@
text
@d1 2
a2 2
/*	$Id: aldap.h,v 1.6 2009/01/27 11:33:22 aschrijver Exp $ */
/*	$OpenBSD: aldap.h,v 1.6 2009/01/27 11:33:22 aschrijver Exp $ */
d55 1
a55 1
			struct ber_element	*entries;
d205 5
a209 5
int	 aldap_count_entries(struct aldap_message *);
int	 aldap_match_entry(struct aldap_message *, char *, char ***);
int	 aldap_first_entry(struct aldap_message *, char **, char ***);
int	 aldap_next_entry(struct aldap_message *, char **, char ***);
int	 aldap_free_entry(char **);
@


1.6
log
@

Add correct error handling to the aldap API.
Use the error handling in the ldapclient.

with help from pyr@@
@
text
@d1 2
a2 2
/*	$Id: aldap.h,v 1.5 2009/01/26 21:56:15 pyr Exp $ */
/*	$OpenBSD: aldap.h,v 1.5 2009/01/26 21:56:15 pyr Exp $ */
d75 1
d199 1
d202 2
@


1.5
log
@move aldap_close in aldap.c, where it belongs.
discussed with aschrijver@@
@
text
@d1 2
a2 2
/*	$Id: aldap.h,v 1.4 2008/10/14 21:41:03 aschrijver Exp $ */
/*	$OpenBSD: aldap.h,v 1.4 2008/10/14 21:41:03 aschrijver Exp $ */
d28 5
d191 1
@


1.4
log
@Add support for referrals and lists of attributes.
@
text
@d1 2
a2 2
/*	$Id: aldap.h,v 1.3 2008/10/06 11:20:20 aschrijver Exp $ */
/*	$OpenBSD: aldap.h,v 1.3 2008/10/06 11:20:20 aschrijver Exp $ */
d179 1
@


1.3
log
@Oops, also commit the header file. Remove silly debug message.
@
text
@d1 2
a2 2
/*	$Id: aldap.h,v 1.2 2008/09/30 17:28:52 pyr Exp $ */
/*	$OpenBSD: aldap.h,v 1.2 2008/09/30 17:28:52 pyr Exp $ */
a51 1
		struct ber_element	*references;
d53 1
@


1.2
log
@add missing copyright.
@
text
@d1 2
a2 2
/*	$Id: aldap.c,v 1.1 2008/09/30 16:24:16 aschrijver Exp $ */
/*	$OpenBSD: aldap.c,v 1.1 2008/09/30 16:24:16 aschrijver Exp $ */
d62 4
a65 4
	int	protocol;
	char	*host;
	int	 port;
	char	*dn;
d67 3
a69 3
	char	*attributes[MAXATTR];
	int	 scope;
	char	*filter;
@


1.1
log
@aldap library -- Replacement for openldap used in ypldap. aldap is an semi-asynchronous client interface to connect to LDAP servers.
@
text
@d1 20
@

