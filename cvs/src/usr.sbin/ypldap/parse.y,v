head	1.23;
access;
symbols
	OPENBSD_6_2_BASE:1.23
	OPENBSD_6_1:1.21.0.4
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.19.0.2
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.18.0.4
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.11.0.4
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.2
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.2
	OPENBSD_5_0:1.9.0.6
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.4
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.4
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.23
date	2017.08.28.06.00.05;	author florian;	state Exp;
branches;
next	1.22;
commitid	faUqpJctBIBuXYb0;

1.22
date	2017.05.30.09.33.31;	author jmatthew;	state Exp;
branches;
next	1.21;
commitid	egu4B2UiCIANQ1k3;

1.21
date	2017.01.05.13.53.10;	author krw;	state Exp;
branches;
next	1.20;
commitid	3AKCl24jEn0sIt6p;

1.20
date	2017.01.05.12.42.19;	author krw;	state Exp;
branches;
next	1.19;
commitid	uzjOUwLRoN7KbcZI;

1.19
date	2016.06.21.21.35.25;	author benno;	state Exp;
branches;
next	1.18;
commitid	AL6SnrmnHkmPOpjv;

1.18
date	2015.01.16.06.40.22;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	Uu5nFG3wCl0LACBb;

1.17
date	2014.11.20.05.51.21;	author jsg;	state Exp;
branches;
next	1.16;
commitid	3Z7yItGpFsmshk0c;

1.16
date	2014.11.14.03.20.37;	author doug;	state Exp;
branches;
next	1.15;
commitid	M08zdkdK3z1pxKwF;

1.15
date	2014.11.03.20.15.31;	author bluhm;	state Exp;
branches;
next	1.14;
commitid	ziMZlrkCPhUaYhzj;

1.14
date	2014.01.22.00.21.17;	author henning;	state Exp;
branches;
next	1.13;

1.13
date	2013.11.25.13.01.18;	author benno;	state Exp;
branches;
next	1.12;

1.12
date	2013.03.06.21.42.40;	author sthen;	state Exp;
branches;
next	1.11;

1.11
date	2012.04.30.11.28.25;	author jmatthew;	state Exp;
branches;
next	1.10;

1.10
date	2011.08.28.11.53.16;	author aschrijver;	state Exp;
branches;
next	1.9;

1.9
date	2010.08.03.18.42.41;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2009.03.31.21.03.49;	author tobias;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.13.00.16.16;	author dlg;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.28.13.47.22;	author aschrijver;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.19.12.00.54;	author aschrijver;	state Exp;
branches;
next	1.4;

1.4
date	2008.10.17.13.02.55;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2008.10.14.21.41.03;	author aschrijver;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.30.16.24.16;	author aschrijver;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.26.15.10.01;	author pyr;	state Exp;
branches;
next	;


desc
@@


1.23
log
@65535 is a valid port to listen on.
Off-by-one pointed out by and diff from Kris Katterjohn katterjohn AT
gmail, thanks!
chris@@ pointed out that more than httpd(8) is effected.
OK gilles@@
@
text
@/*	$OpenBSD: parse.y,v 1.22 2017/05/30 09:33:31 jmatthew Exp $	*/

/*
 * Copyright (c) 2008 Pierre-Yves Ritschard <pyr@@openbsd.org>
 * Copyright (c) 2007, 2008 Reyk Floeter <reyk@@openbsd.org>
 * Copyright (c) 2004, 2005 Esben Norby <norby@@openbsd.org>
 * Copyright (c) 2004 Ryan McBride <mcbride@@openbsd.org>
 * Copyright (c) 2002, 2003, 2004 Henning Brauer <henning@@openbsd.org>
 * Copyright (c) 2001 Markus Friedl.  All rights reserved.
 * Copyright (c) 2001 Daniel Hartmeier.  All rights reserved.
 * Copyright (c) 2001 Theo de Raadt.  All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

%{
#include <sys/types.h>
#include <sys/time.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>
#include <sys/stat.h>

#include <netinet/in.h>
#include <arpa/inet.h>

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <event.h>
#include <fcntl.h>
#include <limits.h>
#include <netdb.h>
#include <pwd.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <unistd.h>

#include "ypldap.h"

TAILQ_HEAD(files, file)		 files = TAILQ_HEAD_INITIALIZER(files);
static struct file {
	TAILQ_ENTRY(file)	 entry;
	FILE			*stream;
	char			*name;
	int			 lineno;
	int			 errors;
} *file, *topfile;
struct file	*pushfile(const char *, int);
int		 popfile(void);
int		 check_file_secrecy(int, const char *);
int		 yyparse(void);
int		 yylex(void);
int		 yyerror(const char *, ...)
    __attribute__((__format__ (printf, 1, 2)))
    __attribute__((__nonnull__ (1)));
int		 kw_cmp(const void *, const void *);
int		 lookup(char *);
int		 lgetc(int);
int		 lungetc(int);
int		 findeol(void);

TAILQ_HEAD(symhead, sym)	 symhead = TAILQ_HEAD_INITIALIZER(symhead);
struct sym {
	TAILQ_ENTRY(sym)	 entry;
	int			 used;
	int			 persist;
	char			*nam;
	char			*val;
};
int		 symset(const char *, const char *, int);
char		*symget(const char *);

struct env		*conf = NULL;
struct idm		*idm = NULL;
static int		 errors = 0;

typedef struct {
	union {
		int64_t		 number;
		char		*string;
	} v;
	int lineno;
} YYSTYPE;

%}

%token	SERVER FILTER ATTRIBUTE BASEDN BINDDN GROUPDN BINDCRED MAPS CHANGE DOMAIN PROVIDE
%token	USER GROUP TO EXPIRE HOME SHELL GECOS UID GID INTERVAL
%token	PASSWD NAME FIXED LIST GROUPNAME GROUPPASSWD GROUPGID MAP
%token	INCLUDE DIRECTORY CLASS PORT ERROR GROUPMEMBERS LDAPS TLS CAFILE
%token	<v.string>	STRING
%token  <v.number>	NUMBER
%type	<v.number>	opcode attribute
%type	<v.number>	port
%type	<v.number>	ssl

%%

grammar		: /* empty */
		| grammar '\n'
		| grammar include '\n'
		| grammar varset '\n'
		| grammar directory '\n'
		| grammar main '\n'
		| grammar error '\n'			{ file->errors++; }
		;

nl		: '\n' optnl
		;

optnl		: '\n' optnl
		| /* empty */
		;


include		: INCLUDE STRING			{
			struct file	*nfile;

			if ((nfile = pushfile($2, 0)) == NULL) {
				yyerror("failed to include file %s", $2);
				free($2);
				YYERROR;
			}
			free($2);

			file = nfile;
			lungetc('\n');
		}
		;

varset		: STRING '=' STRING			{
			char *s = $1;
			while (*s++) {
				if (isspace((unsigned char)*s)) {
					yyerror("macro name cannot contain "
					    "whitespace");
					YYERROR;
				}
			}
			if (symset($1, $3, 0) == -1)
				fatal("cannot store variable");
			free($1);
			free($3);
		}
		;

port		: PORT STRING				{
			struct servent *servent;

			servent = getservbyname($2, "tcp");
			if (servent == NULL) {
				yyerror("port %s is invalid", $2);
				free($2);
				YYERROR;
			}
			$$ = ntohs(servent->s_port);
			free($2);
		}
		| PORT NUMBER				{
			if ($2 <= 0 || $2 > (int)USHRT_MAX) {
				yyerror("invalid port: %lld", $2);
				YYERROR;
			}
			$$ = $2;
		}
		| /* empty */				{
			$$ = 0;
		}
		;

opcode		: GROUP					{ $$ = 0; }
		| PASSWD				{ $$ = 1; }
		;


attribute	: NAME					{ $$ = 0; }
		| PASSWD				{ $$ = 1; }
		| UID					{ $$ = 2; }
		| GID					{ $$ = 3; }
		| CLASS					{ $$ = 4; }
		| CHANGE				{ $$ = 5; }
		| EXPIRE				{ $$ = 6; }
		| GECOS					{ $$ = 7; }
		| HOME					{ $$ = 8; }
		| SHELL					{ $$ = 9; }
		| GROUPNAME				{ $$ = 10; }
		| GROUPPASSWD				{ $$ = 11; }
		| GROUPGID				{ $$ = 12; }
		| GROUPMEMBERS				{ $$ = 13; }
		;

diropt		: BINDDN STRING				{
			idm->idm_flags |= F_NEEDAUTH;
			if (strlcpy(idm->idm_binddn, $2,
			    sizeof(idm->idm_binddn)) >=
			    sizeof(idm->idm_binddn)) {
				yyerror("directory binddn truncated");
				free($2);
				YYERROR;
			}
			free($2);
		}
		| BINDCRED STRING			{
			idm->idm_flags |= F_NEEDAUTH;
			if (strlcpy(idm->idm_bindcred, $2,
			    sizeof(idm->idm_bindcred)) >=
			    sizeof(idm->idm_bindcred)) {
				yyerror("directory bindcred truncated");
				free($2);
				YYERROR;
			}
			free($2);
		}
		| BASEDN STRING			{
			if (strlcpy(idm->idm_basedn, $2,
			    sizeof(idm->idm_basedn)) >=
			    sizeof(idm->idm_basedn)) {
				yyerror("directory basedn truncated");
				free($2);
				YYERROR;
			}
			free($2);
		} 
		| GROUPDN STRING		{
			if(strlcpy(idm->idm_groupdn, $2,
			    sizeof(idm->idm_groupdn)) >=
			    sizeof(idm->idm_groupdn)) {
				yyerror("directory groupdn truncated");
				free($2);
				YYERROR;
			}
			free($2);
		}
		| opcode FILTER STRING			{
			if (strlcpy(idm->idm_filters[$1], $3,
			    sizeof(idm->idm_filters[$1])) >=
			    sizeof(idm->idm_filters[$1])) {
				yyerror("filter truncated");
				free($3);
				YYERROR;
			}
			free($3);
		}
		| ATTRIBUTE attribute MAPS TO STRING	{
			if (strlcpy(idm->idm_attrs[$2], $5,
			    sizeof(idm->idm_attrs[$2])) >=
			    sizeof(idm->idm_attrs[$2])) {
				yyerror("attribute truncated");
				free($5);
				YYERROR;
			}
			free($5);
		}
		| FIXED ATTRIBUTE attribute STRING	{
			if (strlcpy(idm->idm_attrs[$3], $4,
			    sizeof(idm->idm_attrs[$3])) >=
			    sizeof(idm->idm_attrs[$3])) {
				yyerror("attribute truncated");
				free($4);
				YYERROR;
			}
			idm->idm_flags |= F_FIXED_ATTR($3);
			free($4);
		}
		| LIST attribute MAPS TO STRING	{
			if (strlcpy(idm->idm_attrs[$2], $5,
			    sizeof(idm->idm_attrs[$2])) >=
			    sizeof(idm->idm_attrs[$2])) {
				yyerror("attribute truncated");
				free($5);
				YYERROR;
			}
			idm->idm_list |= F_LIST($2);
			free($5);
		}
		;

ssl		: /* empty */				{ $$ = 0; }
		| LDAPS					{ $$ = F_SSL; }
		| TLS					{ $$ = F_STARTTLS; }
		;

directory	: DIRECTORY STRING port ssl {
			if ((idm = calloc(1, sizeof(*idm))) == NULL)
				fatal(NULL);
			idm->idm_id = conf->sc_maxid++;

			if (strlcpy(idm->idm_name, $2,
			    sizeof(idm->idm_name)) >=
			    sizeof(idm->idm_name)) {
				yyerror("attribute truncated");
				free($2);
				YYERROR;
			}
			free($2);

			idm->idm_port = $3;

			if ($4 != 0) {
				if (tls_init()) {
					yyerror("tls init failed");
					YYERROR;
				}

				idm->idm_flags |= $4;
				idm->idm_tls_config = tls_config_new();
				if (idm->idm_tls_config == NULL) {
					yyerror("tls config failed");
					YYERROR;
				}

				if (tls_config_set_protocols(
				    idm->idm_tls_config,
				    TLS_PROTOCOLS_ALL) == -1) {
					yyerror("tls set protocols failed: %s",
					    tls_config_error(
					    idm->idm_tls_config));
					tls_config_free(idm->idm_tls_config);
					idm->idm_tls_config = NULL;
					YYERROR;
				}
				if (tls_config_set_ciphers(idm->idm_tls_config,
				    "compat") == -1) {
					yyerror("tls set ciphers failed: %s",
					    tls_config_error(
					    idm->idm_tls_config));
					tls_config_free(idm->idm_tls_config);
					idm->idm_tls_config = NULL;
					YYERROR;
				}

				if (tls_config_set_ca_file(idm->idm_tls_config,
				    conf->sc_cafile) == -1) {
					yyerror("tls set CA bundle failed: %s",
					    tls_config_error(
					    idm->idm_tls_config));
					tls_config_free(idm->idm_tls_config);
					idm->idm_tls_config = NULL;
					YYERROR;
				}
			}

		} '{' optnl diropts '}'			{
			TAILQ_INSERT_TAIL(&conf->sc_idms, idm, idm_entry);
			idm = NULL;
		}
		;

main		: INTERVAL NUMBER			{
			conf->sc_conf_tv.tv_sec = $2;
			conf->sc_conf_tv.tv_usec = 0;
		}
		| DOMAIN STRING				{
			if (strlcpy(conf->sc_domainname, $2,
			    sizeof(conf->sc_domainname)) >=
			    sizeof(conf->sc_domainname)) {
				yyerror("domainname truncated");
				free($2);
				YYERROR;
			}
			free($2);
		}
		| PROVIDE MAP STRING			{
			if (strcmp($3, "passwd.byname") == 0)
				conf->sc_flags |= YPMAP_PASSWD_BYNAME;
			else if (strcmp($3, "passwd.byuid") == 0)
				conf->sc_flags |= YPMAP_PASSWD_BYUID;
			else if (strcmp($3, "master.passwd.byname") == 0)
				conf->sc_flags |= YPMAP_MASTER_PASSWD_BYNAME;
			else if (strcmp($3, "master.passwd.byuid") == 0)
				conf->sc_flags |= YPMAP_MASTER_PASSWD_BYUID;
			else if (strcmp($3, "group.byname") == 0)
				conf->sc_flags |= YPMAP_GROUP_BYNAME;
			else if (strcmp($3, "group.bygid") == 0)
				conf->sc_flags |= YPMAP_GROUP_BYGID;
			else if (strcmp($3, "netid.byname") == 0)
				conf->sc_flags |= YPMAP_NETID_BYNAME;
			else {
				yyerror("unsupported map type: %s", $3);
				free($3);
				YYERROR;
			}
			free($3);
		}
		| CAFILE STRING				{
			free(conf->sc_cafile);
			conf->sc_cafile = $2;
		} 
		;

diropts		: diropts diropt nl
		| diropt optnl
		;

%%

struct keywords {
	const char	*k_name;
	int		 k_val;
};

int
yyerror(const char *fmt, ...)
{
	va_list		 ap;
	char		*msg;

	file->errors++;
	va_start(ap, fmt);
	if (vasprintf(&msg, fmt, ap) == -1)
		fatalx("yyerror vasprintf");
	va_end(ap);
	logit(LOG_CRIT, "%s:%d: %s", file->name, yylval.lineno, msg);
	free(msg);
	return (0);
}

int
kw_cmp(const void *k, const void *e)
{
	return (strcmp(k, ((const struct keywords *)e)->k_name));
}

int
lookup(char *s)
{
	/* this has to be sorted always */
	static const struct keywords keywords[] = {
		{ "attribute",		ATTRIBUTE },
		{ "basedn",		BASEDN },
		{ "bindcred",		BINDCRED },
		{ "binddn",		BINDDN },
		{ "cafile",		CAFILE },
		{ "change",		CHANGE },
		{ "class",		CLASS },
		{ "directory",		DIRECTORY },
		{ "domain",		DOMAIN },
		{ "expire",		EXPIRE },
		{ "filter",		FILTER },
		{ "fixed",		FIXED },
		{ "gecos",		GECOS },
		{ "gid",		GID },
		{ "group",		GROUP },
		{ "groupdn",		GROUPDN },
		{ "groupgid",		GROUPGID },
		{ "groupmembers",	GROUPMEMBERS },
		{ "groupname",		GROUPNAME },
		{ "grouppasswd",	GROUPPASSWD },
		{ "home",		HOME },
		{ "include",		INCLUDE },
		{ "interval",		INTERVAL },
		{ "ldaps",		LDAPS },
		{ "list",		LIST },
		{ "map",		MAP },
		{ "maps",		MAPS },
		{ "name",		NAME },
		{ "passwd",		PASSWD },
		{ "port",		PORT },
		{ "provide",		PROVIDE },
		{ "server",		SERVER },
		{ "shell",		SHELL },
		{ "tls",		TLS },
		{ "to",			TO },
		{ "uid",		UID },
		{ "user",		USER },
	};
	const struct keywords	*p;

	p = bsearch(s, keywords, sizeof(keywords)/sizeof(keywords[0]),
	    sizeof(keywords[0]), kw_cmp);

	if (p)
		return (p->k_val);
	else
		return (STRING);
}

#define MAXPUSHBACK	128

u_char	*parsebuf;
int	 parseindex;
u_char	 pushback_buffer[MAXPUSHBACK];
int	 pushback_index = 0;

int
lgetc(int quotec)
{
	int		c, next;

	if (parsebuf) {
		/* Read character from the parsebuffer instead of input. */
		if (parseindex >= 0) {
			c = parsebuf[parseindex++];
			if (c != '\0')
				return (c);
			parsebuf = NULL;
		} else
			parseindex++;
	}

	if (pushback_index)
		return (pushback_buffer[--pushback_index]);

	if (quotec) {
		if ((c = getc(file->stream)) == EOF) {
			yyerror("reached end of file while parsing "
			    "quoted string");
			if (file == topfile || popfile() == EOF)
				return (EOF);
			return (quotec);
		}
		return (c);
	}

	while ((c = getc(file->stream)) == '\\') {
		next = getc(file->stream);
		if (next != '\n') {
			c = next;
			break;
		}
		yylval.lineno = file->lineno;
		file->lineno++;
	}

	while (c == EOF) {
		if (file == topfile || popfile() == EOF)
			return (EOF);
		c = getc(file->stream);
	}
	return (c);
}

int
lungetc(int c)
{
	if (c == EOF)
		return (EOF);
	if (parsebuf) {
		parseindex--;
		if (parseindex >= 0)
			return (c);
	}
	if (pushback_index < MAXPUSHBACK-1)
		return (pushback_buffer[pushback_index++] = c);
	else
		return (EOF);
}

int
findeol(void)
{
	int	c;

	parsebuf = NULL;

	/* skip to either EOF or the first real EOL */
	while (1) {
		if (pushback_index)
			c = pushback_buffer[--pushback_index];
		else
			c = lgetc(0);
		if (c == '\n') {
			file->lineno++;
			break;
		}
		if (c == EOF)
			break;
	}
	return (ERROR);
}

int
yylex(void)
{
	u_char	 buf[8096];
	u_char	*p, *val;
	int	 quotec, next, c;
	int	 token;

top:
	p = buf;
	while ((c = lgetc(0)) == ' ' || c == '\t')
		; /* nothing */

	yylval.lineno = file->lineno;
	if (c == '#')
		while ((c = lgetc(0)) != '\n' && c != EOF)
			; /* nothing */
	if (c == '$' && parsebuf == NULL) {
		while (1) {
			if ((c = lgetc(0)) == EOF)
				return (0);

			if (p + 1 >= buf + sizeof(buf) - 1) {
				yyerror("string too long");
				return (findeol());
			}
			if (isalnum(c) || c == '_') {
				*p++ = c;
				continue;
			}
			*p = '\0';
			lungetc(c);
			break;
		}
		val = symget(buf);
		if (val == NULL) {
			yyerror("macro '%s' not defined", buf);
			return (findeol());
		}
		parsebuf = val;
		parseindex = 0;
		goto top;
	}

	switch (c) {
	case '\'':
	case '"':
		quotec = c;
		while (1) {
			if ((c = lgetc(quotec)) == EOF)
				return (0);
			if (c == '\n') {
				file->lineno++;
				continue;
			} else if (c == '\\') {
				if ((next = lgetc(quotec)) == EOF)
					return (0);
				if (next == quotec || c == ' ' || c == '\t')
					c = next;
				else if (next == '\n') {
					file->lineno++;
					continue;
				} else
					lungetc(next);
			} else if (c == quotec) {
				*p = '\0';
				break;
			} else if (c == '\0') {
				yyerror("syntax error");
				return (findeol());
			}
			if (p + 1 >= buf + sizeof(buf) - 1) {
				yyerror("string too long");
				return (findeol());
			}
			*p++ = c;
		}
		yylval.v.string = strdup(buf);
		if (yylval.v.string == NULL)
			err(1, "yylex: strdup");
		return (STRING);
	}

#define allowed_to_end_number(x) \
	(isspace(x) || x == ')' || x ==',' || x == '/' || x == '}' || x == '=')

	if (c == '-' || isdigit(c)) {
		do {
			*p++ = c;
			if ((unsigned)(p-buf) >= sizeof(buf)) {
				yyerror("string too long");
				return (findeol());
			}
		} while ((c = lgetc(0)) != EOF && isdigit(c));
		lungetc(c);
		if (p == buf + 1 && buf[0] == '-')
			goto nodigits;
		if (c == EOF || allowed_to_end_number(c)) {
			const char *errstr = NULL;

			*p = '\0';
			yylval.v.number = strtonum(buf, LLONG_MIN,
			    LLONG_MAX, &errstr);
			if (errstr) {
				yyerror("\"%s\" invalid number: %s",
				    buf, errstr);
				return (findeol());
			}
			return (NUMBER);
		} else {
nodigits:
			while (p > buf + 1)
				lungetc(*--p);
			c = *--p;
			if (c == '-')
				return (c);
		}
	}

#define allowed_in_string(x) \
	(isalnum(x) || (ispunct(x) && x != '(' && x != ')' && \
	x != '{' && x != '}' && x != '<' && x != '>' && \
	x != '!' && x != '=' && x != '#' && \
	x != ','))

	if (isalnum(c) || c == ':' || c == '_') {
		do {
			*p++ = c;
			if ((unsigned)(p-buf) >= sizeof(buf)) {
				yyerror("string too long");
				return (findeol());
			}
		} while ((c = lgetc(0)) != EOF && (allowed_in_string(c)));
		lungetc(c);
		*p = '\0';
		if ((token = lookup(buf)) == STRING)
			if ((yylval.v.string = strdup(buf)) == NULL)
				err(1, "yylex: strdup");
		return (token);
	}
	if (c == '\n') {
		yylval.lineno = file->lineno;
		file->lineno++;
	}
	if (c == EOF)
		return (0);
	return (c);
}

int
check_file_secrecy(int fd, const char *fname)
{
	struct stat	st;

	if (fstat(fd, &st)) {
		log_warn("cannot stat %s", fname);
		return (-1);
	}
	if (st.st_uid != 0 && st.st_uid != getuid()) {
		log_warnx("%s: owner not root or current user", fname);
		return (-1);
	}
	if (st.st_mode & (S_IWGRP | S_IXGRP | S_IRWXO)) {
		log_warnx("%s: group writable or world read/writable", fname);
		return (-1);
	}
	return (0);
}

struct file *
pushfile(const char *name, int secret)
{
	struct file	*nfile;

	if ((nfile = calloc(1, sizeof(struct file))) == NULL) {
		log_warn("malloc");
		return (NULL);
	}
	if ((nfile->name = strdup(name)) == NULL) {
		log_warn("malloc");
		free(nfile);
		return (NULL);
	}
	if ((nfile->stream = fopen(nfile->name, "r")) == NULL) {
		log_warn("%s", nfile->name);
		free(nfile->name);
		free(nfile);
		return (NULL);
	} else if (secret &&
	    check_file_secrecy(fileno(nfile->stream), nfile->name)) {
		fclose(nfile->stream);
		free(nfile->name);
		free(nfile);
		return (NULL);
	}
	nfile->lineno = 1;
	TAILQ_INSERT_TAIL(&files, nfile, entry);
	return (nfile);
}

int
popfile(void)
{
	struct file	*prev;

	if ((prev = TAILQ_PREV(file, files, entry)) != NULL)
		prev->errors += file->errors;

	TAILQ_REMOVE(&files, file, entry);
	fclose(file->stream);
	free(file->name);
	free(file);
	file = prev;
	return (file ? 0 : EOF);
}

int
parse_config(struct env *x_conf, const char *filename, int opts)
{
	struct sym	*sym, *next;

	conf = x_conf;
	bzero(conf, sizeof(*conf));

	TAILQ_INIT(&conf->sc_idms);
	conf->sc_conf_tv.tv_sec = DEFAULT_INTERVAL;
	conf->sc_conf_tv.tv_usec = 0;
	conf->sc_cafile = strdup(YPLDAP_CERT_FILE);
	if (conf->sc_cafile == NULL) {
		log_warn("malloc");
		return (-1);
	}

	errors = 0;

	if ((file = pushfile(filename, 1)) == NULL) {
		return (-1);
	}
	topfile = file;

	/*
	 * parse configuration
	 */
	setservent(1);
	yyparse();
	endservent();
	errors = file->errors;
	popfile();

	/* Free macros and check which have not been used. */
	TAILQ_FOREACH_SAFE(sym, &symhead, entry, next) {
		if ((opts & YPLDAP_OPT_VERBOSE) && !sym->used)
			fprintf(stderr, "warning: macro '%s' not "
			    "used\n", sym->nam);
		if (!sym->persist) {
			free(sym->nam);
			free(sym->val);
			TAILQ_REMOVE(&symhead, sym, entry);
			free(sym);
		}
	}

	if (errors) {
		return (-1);
	}

	return (0);
}

int
symset(const char *nam, const char *val, int persist)
{
	struct sym	*sym;

	TAILQ_FOREACH(sym, &symhead, entry) {
		if (strcmp(nam, sym->nam) == 0)
			break;
	}

	if (sym != NULL) {
		if (sym->persist == 1)
			return (0);
		else {
			free(sym->nam);
			free(sym->val);
			TAILQ_REMOVE(&symhead, sym, entry);
			free(sym);
		}
	}
	if ((sym = calloc(1, sizeof(*sym))) == NULL)
		return (-1);

	sym->nam = strdup(nam);
	if (sym->nam == NULL) {
		free(sym);
		return (-1);
	}
	sym->val = strdup(val);
	if (sym->val == NULL) {
		free(sym->nam);
		free(sym);
		return (-1);
	}
	sym->used = 0;
	sym->persist = persist;
	TAILQ_INSERT_TAIL(&symhead, sym, entry);
	return (0);
}

int
cmdline_symset(char *s)
{
	char	*sym, *val;
	int	ret;
	size_t	len;

	if ((val = strrchr(s, '=')) == NULL)
		return (-1);

	len = strlen(s) - strlen(val) + 1;
	if ((sym = malloc(len)) == NULL)
		errx(1, "cmdline_symset: malloc");

	(void)strlcpy(sym, s, len);

	ret = symset(sym, val + 1, 1);
	free(sym);

	return (ret);
}

char *
symget(const char *nam)
{
	struct sym	*sym;

	TAILQ_FOREACH(sym, &symhead, entry) {
		if (strcmp(nam, sym->nam) == 0) {
			sym->used = 1;
			return (sym->val);
		}
	}
	return (NULL);
}
@


1.22
log
@Teach ypldap to use tls when connecting to ldap servers.
libtls help from jsing@@, linker help from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.21 2017/01/05 13:53:10 krw Exp $	*/
d174 1
a174 1
			if ($2 <= 0 || $2 >= (int)USHRT_MAX) {
@


1.21
log
@Replace hand-rolled for(;;) emptying of 'symhead' TAILQ with more
modern TAILQ_FOREACH_SAFE().

No intentional functional change.

ok millert@@ bluhm@@ gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.20 2017/01/05 12:42:19 krw Exp $	*/
d104 1
a104 1
%token	INCLUDE DIRECTORY CLASS PORT ERROR GROUPMEMBERS
d108 2
a109 1
%type	<v.string>	port
d161 22
a182 2
port		: /* empty */	{ $$ = NULL; }
		| PORT STRING	{ $$ = $2; }
d292 6
a297 1
directory	: DIRECTORY STRING port {
d309 47
a356 1
			free($2);
d399 4
d447 1
d466 1
d476 1
d813 5
@


1.20
log
@Replace symset()'s hand-rolled for(;;) traversal of 'symhead' TAILQ
with more modern TAILQ_FOREACH(). This what symget() was already
doing.

Add paranoia '{}' around body of symget()'s TAILQ_FOREACH().

No intentional functional change.

ok bluhm@@ otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.19 2016/06/21 21:35:25 benno Exp $	*/
d752 1
a752 2
	for (sym = TAILQ_FIRST(&symhead); sym != NULL; sym = next) {
		next = TAILQ_NEXT(sym, entry);
@


1.19
log
@do not allow whitespace in macro names, i.e. "this is" = "a variable".
change this in all config parsers in our tree that support macros.
problem reported by sven falempin.

feedback from henning@@, stsp@@, deraadt@@
ok florian@@ mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.18 2015/01/16 06:40:22 deraadt Exp $	*/
d777 4
a780 3
	for (sym = TAILQ_FIRST(&symhead); sym && strcmp(nam, sym->nam);
	    sym = TAILQ_NEXT(sym, entry))
		;	/* nothing */
d839 1
a839 1
	TAILQ_FOREACH(sym, &symhead, entry)
d844 1
@


1.18
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.17 2014/11/20 05:51:21 jsg Exp $	*/
d145 8
@


1.17
log
@Don't allow embedded nul characters in strings.
Fixes a pfctl crash with an anchor name containing
an embedded nul found with the afl fuzzer.

pfctl parse.y patch from and ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.16 2014/11/14 03:20:37 doug Exp $	*/
a30 1
#include <sys/param.h>
@


1.16
log
@Add gcc printf format attributes to yyerror() in parse.y files.
No yyerror() calls needed to be changed.

ok bluhm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.15 2014/11/03 20:15:31 bluhm Exp $	*/
d567 3
@


1.15
log
@Convert the logic in yyerror().  Instead of creating a temporary
format string, create a temporary message.
OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.14 2014/01/22 00:21:17 henning Exp $	*/
d68 3
a70 1
int		 yyerror(const char *, ...);
@


1.14
log
@relax the cfg file secrecy check slightly to allow group readability
default permissions and mtree NOT changed.
prodded by benno, ok phessler benno jmatthew theo pelikan florian
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.12 2013/03/06 21:42:40 sthen Exp $	*/
d335 1
a335 1
	char		*nfmt;
d339 2
a340 3
	if (asprintf(&nfmt, "%s:%d: %s", file->name, yylval.lineno, fmt) == -1)
		fatalx("yyerror asprintf");
	vlog(LOG_CRIT, nfmt, ap);
d342 2
a343 1
	free(nfmt);
@


1.13
log
@use u_char for buffers in yylex, for ctype calls
found by millert@@, ok deraadt@@
@
text
@d657 2
a658 2
	if (st.st_mode & (S_IRWXG | S_IRWXO)) {
		log_warnx("%s: group/world readable/writeable", fname);
@


1.12
log
@as done in ospf{,6}d/relayd, sync yyerror in various other daemons with
that from bgpd, so that it logs to syslog when daemonized.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.11 2012/04/30 11:28:25 jmatthew Exp $	*/
d406 1
a406 1
char	*parsebuf;
d408 1
a408 1
char	 pushback_buffer[MAXPUSHBACK];
d501 2
a502 2
	char	 buf[8096];
	char	*p, *val;
d525 1
a525 1
				*p++ = (char)c;
d570 1
a570 1
			*p++ = (char)c;
@


1.11
log
@add 'groupdn' option for specifying a separate base DN for group searches.
from Jim Smith, ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.10 2011/08/28 11:53:16 aschrijver Exp $	*/
d50 1
d335 1
d339 3
a341 3
	fprintf(stderr, "%s:%d: ", file->name, yylval.lineno);
	vfprintf(stderr, fmt, ap);
	fprintf(stderr, "\n");
d343 1
@


1.10
log
@Add support for the netid.byname YP map. This map is used by getgrouplist(3),
which is used by (amongst other things) initgroups(3) to set the supplemantary
groups on login.

OK pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.9 2010/08/03 18:42:41 henning Exp $	*/
d99 1
a99 1
%token	SERVER FILTER ATTRIBUTE BASEDN BINDDN BINDCRED MAPS CHANGE DOMAIN PROVIDE
d206 10
d369 1
@


1.9
log
@fix linecount bug with comments spanning multiple lines
problem reported with the obvious fix for bgpd by Sebastian Benoit
<benoit-lists at fb12.de>, also PR 6432
applied to all the others by yours truly. ok theo
isn't it amazing how far this parser (and more) spread?
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.8 2009/03/31 21:03:49 tobias Exp $	*/
d298 2
@


1.8
log
@Fixed memory leaks which would occur if the second of two memory
allocations fails.

looks right deraadt, krw
ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.7 2009/01/13 00:16:16 dlg Exp $	*/
d541 2
a542 1
				else if (next == '\n')
d544 1
a544 1
				else
@


1.7
log
@ypldap.conf may contain secrets, so get the parse to check if its
sufficiently private.

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.5 2008/10/19 12:00:54 aschrijver Exp $	*/
d652 1
a652 2
	if ((nfile = calloc(1, sizeof(struct file))) == NULL ||
	    (nfile->name = strdup(name)) == NULL) {
d654 5
@


1.6
log
@Do the DNS resolution in a seperate process. A lot of code is copied from ntpd.
This is necessary because DNS resolution is not possible from a chroot.

Cleanup the aldap interface a bit.
@
text
@d704 1
a704 1
	if ((file = pushfile(filename, 0)) == NULL) {
@


1.5
log
@Do the DNS resolution before the chroot and disable LDAP referrals for now.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.4 2008/10/17 13:02:55 henning Exp $	*/
a73 2
struct addrinfo	*host(const char *, const char *);

d254 1
d256 6
a261 12
			if($3 != NULL) {
				if((idm->idm_addrinfo = host($2, $3)) == NULL) {
					yyerror("domain not found");
					free($2);
					YYERROR;
				}
			} else {
				if((idm->idm_addrinfo = host($2, "389")) == NULL) {
					yyerror("domain not found");
					free($2);
					YYERROR;
				}
a810 25
}

struct addrinfo *
host(const char *s, const char *port)
{
        int		 error;
	struct addrinfo	*res, hints;

	if (s == NULL)
		return NULL;

        memset(&hints, 0, sizeof(struct addrinfo));
        hints.ai_family = AF_UNSPEC;
        hints.ai_socktype = SOCK_STREAM;
        hints.ai_protocol = IPPROTO_TCP;

        if ((error = getaddrinfo(s, port, &hints, &res)) != 0) {
                errx(1, "getaddrinfo: %s", gai_strerror(error));

		freeaddrinfo(res);

		return NULL;
	}

	return res;
@


1.4
log
@bring in the findeol() fix from pfctl. list of affected parsers by sthen
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.3 2008/10/14 21:41:03 aschrijver Exp $	*/
d74 2
d104 1
a104 1
%token	INCLUDE DIRECTORY CLASS PORT SSL ERROR GROUPMEMBERS
d107 2
a108 1
%type	<v.number>	opcode attribute port ssl
d128 1
d152 2
a153 6
ssl		: SSL					{ $$ = 1; }
		| /*empty*/				{ $$ = 0; }
		;

port		: PORT NUMBER				{ $$ = $2; }
		| /*empty*/				{ $$ = 0; }
d160 1
d253 1
a253 4
directory	: DIRECTORY STRING port ssl 		{
			const char	*service;
			struct servent	*srv;

d257 12
a268 6
			if (strlcpy(idm->idm_name, $2, sizeof(idm->idm_name)) >=
			    sizeof(idm->idm_name)) {
				yyerror("directory name truncated");
				free(idm);
				free($2);
				YYERROR;
a270 15
			if ($4) {
				service = "ldaps";
			} else
				service = "ldap";
			srv = getservbyname(service, "tcp");

			if ($3)
				idm->idm_port = $3;
			else if (srv == NULL) {
				if ($4)
					idm->idm_port = 389;
				else
					idm->idm_port = 686;
			} else
				idm->idm_port = ntohs(srv->s_port);
d317 1
a379 1
		{ "ssl",		SSL },
d818 25
@


1.3
log
@Add support for referrals and lists of attributes.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.2 2008/09/30 16:24:16 aschrijver Exp $	*/
a482 1
	pushback_index = 0;
d486 4
a489 1
		c = lgetc(0);
@


1.2
log
@aldap library -- Replacement for openldap used in ypldap. aldap is an semi-asynchronous client interface to connect to LDAP servers.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.1 2008/06/26 15:10:01 pyr Exp $	*/
d101 1
a101 1
%token	PASSWD NAME FIXED GROUPNAME GROUPPASSWD GROUPGID MAP
a198 1
			idm->idm_flags |= F_NEEDAUTH;
d202 1
a202 1
				yyerror("directory bindcred truncated");
d239 11
d381 1
@


1.1
log
@ypldap -- Intended to be a drop-in replacement for ypserv, gluing in a
LDAP directory and thus providing support for users and groups stored in
LDAP for the get{pw,gr}ent family of functions.

As of now it relies on external LDAP libraries, choose the one of your
liking though openldap would do fine. Not linked to the builds until
some things are sorted out, having our own LDAP client code for
instance, better support for group membership lookup as well.

Remember to sync with the latest master.passwd and group files as well
to have the _ypldap user available, which is needed.

``just get it in'' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.y,v 1.114 2008/05/08 02:15:34 reyk Exp $	*/
d99 1
a99 1
%token	SERVER FILTER ATTRIBUTE BINDDN MAPS CHANGE DOMAIN PROVIDE
d187 22
d351 2
@

