head	1.13;
access;
symbols
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.5.0.10
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2017.04.17.16.37.39;	author otto;	state Exp;
branches;
next	1.12;
commitid	6K4HvB0mFUxKDte4;

1.12
date	2016.11.29.17.15.27;	author mestre;	state Exp;
branches;
next	1.11;
commitid	CQYD3F1ga2KSp3i3;

1.11
date	2016.04.10.09.59.21;	author jmatthew;	state Exp;
branches;
next	1.10;
commitid	ts3vZKIMheWeZZGq;

1.10
date	2015.12.05.13.15.06;	author claudio;	state Exp;
branches;
next	1.9;
commitid	FfLQmz3yqIh8whgZ;

1.9
date	2015.11.15.01.31.57;	author jmatthew;	state Exp;
branches;
next	1.8;
commitid	7Y3xWswsfF9egpoF;

1.8
date	2015.01.16.06.40.22;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	Uu5nFG3wCl0LACBb;

1.7
date	2014.07.13.15.38.09;	author krw;	state Exp;
branches;
next	1.6;
commitid	YMZZVEWN6UliVVgC;

1.6
date	2014.07.13.12.07.59;	author krw;	state Exp;
branches;
next	1.5;
commitid	2FWuacsyDR9pZNOt;

1.5
date	2012.03.16.01.57.42;	author jmatthew;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.26.13.56.08;	author nicm;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.01.18.24.04;	author zinovik;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.06.05.02.58;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.28.13.47.22;	author aschrijver;	state Exp;
branches;
next	;


desc
@@


1.13
log
@don't manipulate hdr.len, it's used internally by libutil now; ok florian@@
@
text
@/*	$OpenBSD: ypldap_dns.c,v 1.12 2016/11/29 17:15:27 mestre Exp $ */

/*
 * Copyright (c) 2003-2008 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/tree.h>
#include <sys/queue.h>

#include <netinet/in.h>
#include <arpa/nameser.h>

#include <netdb.h>
#include <pwd.h>
#include <errno.h>
#include <event.h>
#include <resolv.h>
#include <poll.h>
#include <signal.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>

#include "ypldap.h"

volatile sig_atomic_t	 quit_dns = 0;
struct imsgev		*iev_dns;

void	dns_dispatch_imsg(int, short, void *);
void	dns_sig_handler(int, short, void *);
void	dns_shutdown(void);
int	host_dns(const char *, struct ypldap_addr_list *);

void
dns_sig_handler(int sig, short event, void *p)
{
	switch (sig) {
	case SIGINT:
	case SIGTERM:
		dns_shutdown();
		break;
	default:
		fatalx("unexpected signal");
	}
}

void
dns_shutdown(void)
{
	log_info("dns engine exiting");
	_exit(0);
}

pid_t
ypldap_dns(int pipe_ntp[2], struct passwd *pw)
{
	pid_t			 pid;
	struct event	 ev_sigint;
	struct event	 ev_sigterm;
	struct event	 ev_sighup;
	struct env	 env;

	switch (pid = fork()) {
	case -1:
		fatal("cannot fork");
		break;
	case 0:
		break;
	default:
		return (pid);
	}

	setproctitle("dns engine");
	close(pipe_ntp[0]);

	if (setgroups(1, &pw->pw_gid) ||
	    setresgid(pw->pw_gid, pw->pw_gid, pw->pw_gid) ||
	    setresuid(pw->pw_uid, pw->pw_uid, pw->pw_uid))
		fatal("can't drop privileges");
	endservent();

	if (pledge("stdio dns", NULL) == -1)
		fatal("pledge");

	event_init();
	signal_set(&ev_sigint, SIGINT, dns_sig_handler, NULL);
	signal_set(&ev_sigterm, SIGTERM, dns_sig_handler, NULL);
	signal_set(&ev_sighup, SIGHUP, dns_sig_handler, NULL);
	signal_add(&ev_sigint, NULL);
	signal_add(&ev_sigterm, NULL);
	signal_add(&ev_sighup, NULL);

	if ((env.sc_iev = calloc(1, sizeof(*env.sc_iev))) == NULL)
		fatal(NULL);

	env.sc_iev->events = EV_READ;
	env.sc_iev->data = &env;
	imsg_init(&env.sc_iev->ibuf, pipe_ntp[1]);
	env.sc_iev->handler = dns_dispatch_imsg;
	event_set(&env.sc_iev->ev, env.sc_iev->ibuf.fd, env.sc_iev->events,
	    env.sc_iev->handler, &env);
	event_add(&env.sc_iev->ev, NULL);

	event_dispatch();
	dns_shutdown();

	return (0);
}

void
dns_dispatch_imsg(int fd, short events, void *p)
{
	struct imsg		 imsg;
	int			 n, cnt;
	char			*name;
	struct ypldap_addr_list	 hn = TAILQ_HEAD_INITIALIZER(hn);
	struct ypldap_addr	*h;
	struct ibuf		*buf;
	struct env		*env = p;
	struct imsgev		*iev = env->sc_iev;
	struct imsgbuf		*ibuf = &iev->ibuf;
	int			 shut = 0;
	size_t			 len;

	if ((events & (EV_READ | EV_WRITE)) == 0)
		fatalx("unknown event");

	if (events & EV_READ) {
		if ((n = imsg_read(ibuf)) == -1 && errno != EAGAIN)
			fatal("imsg_read error");
		if (n == 0)
			shut = 1;
	}
	if (events & EV_WRITE) {
		if ((n = msgbuf_write(&ibuf->w)) == -1 && errno != EAGAIN)
			fatal("msgbuf_write");
		if (n == 0)
			shut = 1;
		goto done;
	}

	for (;;) {
		if ((n = imsg_get(ibuf, &imsg)) == -1)
			fatal("client_dispatch_imsg: imsg_get error");
		if (n == 0)
			break;

		switch (imsg.hdr.type) {
		case IMSG_HOST_DNS:
			name = imsg.data;
			if (imsg.hdr.len < 1 + IMSG_HEADER_SIZE)
				fatalx("invalid IMSG_HOST_DNS received");
			len = imsg.hdr.len - 1 - IMSG_HEADER_SIZE;
			if (name[len] != '\0' ||
			    strlen(name) != len)
				fatalx("invalid IMSG_HOST_DNS received");
			if ((cnt = host_dns(name, &hn)) == -1)
				break;
			buf = imsg_create(ibuf, IMSG_HOST_DNS,
			    imsg.hdr.peerid, 0,
			    cnt * sizeof(struct sockaddr_storage));
			if (buf == NULL)
				break;
			if (cnt > 0) {
				while (!TAILQ_EMPTY(&hn)) {
					h = TAILQ_FIRST(&hn);
					TAILQ_REMOVE(&hn, h, next);
					imsg_add(buf, &h->ss, sizeof(h->ss));
					free(h);
				}
			}

			imsg_close(ibuf, buf);
			break;
		default:
			break;
		}
		imsg_free(&imsg);
	}

done:
	if (!shut)
		imsg_event_add(iev);
	else {
		/* this pipe is dead, so remove the event handler */
		event_del(&iev->ev);
		event_loopexit(NULL);
	}
}

int
host_dns(const char *s, struct ypldap_addr_list *hn)
{
	struct addrinfo		 hints, *res0, *res;
	int			 error, cnt = 0;
	struct sockaddr_in	*sa_in;
	struct sockaddr_in6	*sa_in6;
	struct ypldap_addr	*h;

	memset(&hints, 0, sizeof(hints));
	hints.ai_family = PF_UNSPEC;
	hints.ai_socktype = SOCK_DGRAM; /* DUMMY */
	error = getaddrinfo(s, NULL, &hints, &res0);
	if (error == EAI_AGAIN || error == EAI_NODATA || error == EAI_NONAME)
			return (0);
	if (error) {
		log_warnx("could not parse \"%s\": %s", s,
		    gai_strerror(error));
		return (-1);
	}

	for (res = res0; res && cnt < MAX_SERVERS_DNS; res = res->ai_next) {
		if (res->ai_family != AF_INET &&
		    res->ai_family != AF_INET6)
			continue;
		if ((h = calloc(1, sizeof(struct ypldap_addr))) == NULL)
			fatal(NULL);
		h->ss.ss_family = res->ai_family;
		if (res->ai_family == AF_INET) {
			sa_in = (struct sockaddr_in *)&h->ss;
			sa_in->sin_len = sizeof(struct sockaddr_in);
			sa_in->sin_addr.s_addr = ((struct sockaddr_in *)
			    res->ai_addr)->sin_addr.s_addr;
		} else {
			sa_in6 = (struct sockaddr_in6 *)&h->ss;
			sa_in6->sin6_len = sizeof(struct sockaddr_in6);
			memcpy(&sa_in6->sin6_addr, &((struct sockaddr_in6 *)
			    res->ai_addr)->sin6_addr, sizeof(struct in6_addr));
		}

		TAILQ_INSERT_HEAD(hn, h, next);
		cnt++;
	}
	freeaddrinfo(res0);
	return (cnt);
}
@


1.12
log
@Use memset(3) instead of bzero(3)

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ypldap_dns.c,v 1.11 2016/04/10 09:59:21 jmatthew Exp $ */
d140 1
d170 3
a172 3
			imsg.hdr.len -= 1 + IMSG_HEADER_SIZE;
			if (name[imsg.hdr.len] != '\0' ||
			    strlen(name) != imsg.hdr.len)
@


1.11
log
@convert ypldap_addr list to a tailq

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ypldap_dns.c,v 1.10 2015/12/05 13:15:06 claudio Exp $ */
d216 1
a216 1
	bzero(&hints, sizeof(hints));
@


1.10
log
@EAGAIN handling for imsg_read. OK henning@@ benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ypldap_dns.c,v 1.9 2015/11/15 01:31:57 jmatthew Exp $ */
d49 1
a49 1
int	host_dns(const char *s, struct ypldap_addr **hn);
d133 2
a134 1
	struct ypldap_addr	*h, *hn;
d181 3
a183 2
				h = hn;
				while (h != NULL) {
a184 1
					hn = h->next;
a185 1
					h = hn;
d208 1
a208 1
host_dns(const char *s, struct ypldap_addr **hn)
d214 1
a214 1
	struct ypldap_addr	*h, *hh = NULL;
d247 1
a247 2
		h->next = hh;
		hh = h;
a250 2

	*hn = hh;
@


1.9
log
@pledge for ypldap is easy because it's purely a network program.
One process talks to yp clients, one talks to ldap servers, one does dns.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ypldap_dns.c,v 1.8 2015/01/16 06:40:22 deraadt Exp $ */
d144 1
a144 1
		if ((n = imsg_read(ibuf)) == -1)
@


1.8
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: ypldap_dns.c,v 1.7 2014/07/13 15:38:09 krw Exp $ */
d98 3
@


1.7
log
@Since the event(s) passed to a callback can be a mask of all events
of interest and EV_WRITE is or'ed into the interesting events, it
is more correct to check both events each time. Pointed out by
Claudio.

ok henning@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ypldap_dns.c,v 1.6 2014/07/13 12:07:59 krw Exp $ */
a21 1
#include <sys/param.h>
d39 1
@


1.6
log
@Close connection/remove event handler when msgbuf_write() hits an
EOF.

ok jmatthew@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ypldap_dns.c,v 1.5 2012/03/16 01:57:42 jmatthew Exp $ */
d125 1
a125 1
dns_dispatch_imsg(int fd, short event, void *p)
d137 4
a140 2
	switch (event) {
	case EV_READ:
d145 2
a146 2
		break;
	case EV_WRITE:
a151 2
	default:
		fatalx("unknown event");
@


1.5
log
@don't leak ypldap_addr structures when doing dns lookups

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ypldap_dns.c,v 1.4 2010/05/26 13:56:08 nicm Exp $ */
d145 1
a145 1
		if (msgbuf_write(&ibuf->w) == -1)
d147 3
a149 2
		imsg_event_add(iev);
		return;
d193 2
@


1.4
log
@Rename some imsg bits to make namespace collisions less likely buf to
ibuf, buf_read to ibuf_read, READ_BUF_SIZE to IBUF_READ_SIZE.

ok henning gilles claudio jacekm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: ypldap_dns.c,v 1.3 2010/04/01 18:24:04 zinovik Exp $ */
d175 3
a177 2
			if (cnt > 0)
				for (h = hn; h != NULL; h = h->next)
d179 5
@


1.3
log
@fix fatal calls, that they will report function names from which they are
called, in case of failure developer will be digging for a bug in wrong place

ok krw@@, pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ypldap_dns.c,v 1.2 2009/06/06 05:02:58 eric Exp $ */
d131 1
a131 1
	struct buf		*buf;
@


1.2
log
@Sync with relayd:
Stop pushing event handling in the imsg framework.
Instead, provide a small glue layer on top of both imsg and libevent.
This finally clearly separates event handling and imsg construction.

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ypldap_dns.c,v 1.1 2008/10/28 13:47:22 aschrijver Exp $ */
d155 1
a155 1
			fatal("client_dispatch_parent: imsg_read_error");
@


1.1
log
@Do the DNS resolution in a seperate process. A lot of code is copied from ntpd.
This is necessary because DNS resolution is not possible from a chroot.

Cleanup the aldap interface a bit.
@
text
@d1 1
a1 1
/*	$OpenBSD: ntp_dns.c,v 1.1 2008/09/12 10:46:09 henning Exp $ */
d44 1
a44 1
struct imsgbuf		*ibuf_dns;
d107 1
a107 1
	if ((env.sc_ibuf = calloc(1, sizeof(*env.sc_ibuf))) == NULL)
d110 7
a116 6
	env.sc_ibuf->events = EV_READ;
	env.sc_ibuf->data = &env;
	imsg_init(env.sc_ibuf, pipe_ntp[1], dns_dispatch_imsg);
	event_set(&env.sc_ibuf->ev, env.sc_ibuf->fd, env.sc_ibuf->events,
	    env.sc_ibuf->handler, &env);
	event_add(&env.sc_ibuf->ev, NULL);
d133 2
a134 1
	struct imsgbuf		*ibuf = env->sc_ibuf;
d147 1
a147 1
		imsg_event_add(ibuf);
d187 1
a187 1
		imsg_event_add(ibuf);
d190 1
a190 1
		event_del(&ibuf->ev);
@

