head	1.22;
access;
symbols
	OPENBSD_6_2:1.22.0.2
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.22.0.4
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.21.0.2
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.14.0.6
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.4
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.2
	OPENBSD_5_0:1.13.0.4
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.12.0.8
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.4
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.14
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.12
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6;
locks; strict;
comment	@.\" @;


1.22
date	2016.09.25.15.23.37;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	YxqfPf79WCjoxCH9;

1.21
date	2016.05.26.17.23.49;	author stefan;	state Exp;
branches;
next	1.20;
commitid	6osrOkBoR3FQWrVC;

1.20
date	2015.03.13.19.58.41;	author jmc;	state Exp;
branches;
next	1.19;
commitid	OcwhWBKGs3Yn7EeA;

1.19
date	2014.11.16.12.31.01;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	yv0ECmCdICvq576h;

1.18
date	2014.09.08.04.40.30;	author doug;	state Exp;
branches;
next	1.17;
commitid	eZUjxECXTMZqzs5z;

1.17
date	2014.02.13.21.17.13;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2014.01.21.03.15.46;	author schwarze;	state Exp;
branches;
next	1.15;

1.15
date	2013.07.16.11.13.34;	author schwarze;	state Exp;
branches;
next	1.14;

1.14
date	2011.09.03.22.59.08;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2010.09.03.11.22.36;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.19.09.46.59;	author sobrado;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.18.11.17.32;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.18.08.02.53;	author otto;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.26.05.42.21;	author ray;	state Exp;
branches;
next	1.8;

1.8
date	2007.11.28.14.10.28;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.31.19.20.28;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.19.04.47.55;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.18.13.50.36;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.23.21.07.59;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.17.21.08.37;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.17.20.34.43;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.16.08.54.34;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Make a move towards ending 4 decades of kernel snooping.

Add sysctl kern.allowkmem (default 0) which controls the ability to open
/dev/mem or /dev/kmem at securelevel > 0.  Over 15 years we converted 99%
of utilities in the tree to operate on sysctl-nodes (either by themselves
or via code hiding in the guts of -lkvm).

pstat -d and -v & procmap are affected and continued use of them will
require kern.allowkmem=1 in /etc/sysctl.conf.  acpidump (and it's
buddy sendbug) are affected, but we'll work out a solution soon.

There will be some impact in ports.

ok kettenis guenther
@
text
@.\"	$OpenBSD: procmap.1,v 1.21 2016/05/26 17:23:49 stefan Exp $
.\"	$NetBSD: pmap.1,v 1.6 2003/01/19 21:25:43 atatat Exp $
.\"
.\" Copyright (c) 2002 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Andrew Brown.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: May 26 2016 $
.Dt PROCMAP 1
.Os
.Sh NAME
.Nm procmap
.Nd display process memory map
.Sh SYNOPSIS
.Nm
.Op Fl AadlmPsv
.Op Fl D Ar number
.Op Fl M Ar core
.Op Fl N Ar system
.Op Fl p Ar pid
.Op Ar pid ...
.Sh DESCRIPTION
The
.Nm
utility lists the virtual memory mappings underlying the given
process.
The start address of each entry is always given and,
depending on the options given, other information such as the end
address, the underlying file's device and inode numbers, and various
protection information will be displayed, along with the path to the
file, if such data is available.
.Pp
.Nm
requires the ability to open
.Pa /dev/kmem
which may be restricted based upon the value of the
.Ar kern.allowkmem
.Xr sysctl 8 .
.Pp
By default,
.Nm
displays information for its parent process, so that when run from a
shell prompt, the shell's memory information is displayed.
If other
PIDs are given as arguments on the command line, information for those
processes will be printed also.
If the special PID of 0 is given,
then information for the kernel's memory map is printed.
.Pp
The options are as follows:
.Bl -tag -width XXXnumberXX
.It Fl A
Print more detailed information on anonymous map usage.
.It Fl a
Display
.Dq all
information from the process's memory map.
This output
mode is an amalgam of the contents of the Solaris, Linux, and
.Ox
style output modes.
.It Fl D Ar number
Enable various debug facilities.
The
.Ar number
is a bit mask of the values:
.Pp
.Bl -tag -width flag -compact
.It Cm 1
dump the process's vmspace structure
.It Cm 2
dump the process's vm_map structure
.It Cm 4
dump the vm_map.header structure
.It Cm 8
dump each vm_map_entry in its entirety
.It Cm 16
dump the namei cache as it is traversed
.El
.It Fl d
Dumps the vm_map and vm_map_entry structures in a style similar to
that of
.Xr ddb 4 .
When combined with the
.Fl v
option, the device number, inode number, name, vnode addresses, or
other identifying information from the vm_map_entry fields will be
printed.
.It Fl l
Dumps information in a format like the contents of the maps
pseudo-file under the
.Pa /proc
file system which was, in turn, modeled after the similarly named entry
in the Linux
.Pa /proc
file system.
When combined with the
.Fl v
option, identifiers for all entries are printed.
.It Fl M Ar core
Extract values associated with the name list from the specified core
instead of the default
.Pa /dev/kmem .
.It Fl m
Dumps information in the same format as the map pseudo-file of the
.Pa /proc
file system.
When the
.Fl v
option is also given, device number, inode number, and filename
or other identifying information is printed.
.It Fl N Ar system
Extract the name list from the specified system instead of the
running kernel.
.It Fl P
Causes
.Nm
to print information about itself.
.It Fl p Ar pid
Tells
.Nm
to print information about the given process.
If
.Fl p Ar pid
occurs last on the command line, the
.Fl p
is optional.
.\" .It Fl R
.\" Recurse into submaps.
.\" In some cases, a vm_map_entry in the kernel
.\" will point to a submap.
.\" Using this flag tells
.\" .Nm
.\" to print the entries of the submap as well.
.\" The submap output is
.\" indented, and does not affect any total printed at the bottom of the
.\" output.
.It Fl s
The Solaris style output format, modeled after the Solaris command
.Dq pmap .
This is the default output style.
.It Fl v
Verbose output.
When used with
.Fl d ,
.Fl l ,
or
.Fl m ,
more information is printed, possibly including device and inode
numbers, file path names, or other identifying information.
If specified more than once, a
.Sq *
will be printed in between two
entries that are not adjacent, making the visual identification of
spaces in the process's map easier to see.
.El
.Pp
The
.Fl P
and
.Fl p
options override each other, so the last one to appear on the command
line takes effect.
If you do wish to see information about
.Nm
and another process as the same time, simply omit the
.Fl p
and place the extra PID at the end of the command line.
.Sh EXIT STATUS
.Ex -std procmap
.Sh EXAMPLES
While the meaning most of the output is self-evident, some pieces of
it may appear to be a little inscrutable.
.Pp
Here a portion of the default output from
.Nm
being run at a
.Xr sh 1
prompt shows the starting address of the map entry, the size of the
map entry, the current protection level of the map entry, and either
the name of the file backing the entry or some other descriptive text.
.Bd -literal -offset indent
$ procmap
08048000    420K read/exec         /bin/sh
080B1000      8K read/write        /bin/sh
080B3000     28K read/write          [ anon ]
080BA000     16K read/write/exec     [ heap ]
\&...
.Ed
.Pp
When the
.Xr ddb 4
output style is selected, the first thing printed is the contents of
the vm_map structure, followed by the individual map entries.
.Bd -literal -offset indent
$ procmap -d
MAP 0xcf7cac84: [0x0-\*(Gt0xbfbfe000]
        #ent=8, sz=34041856, ref=1, version=20, flags=0x21
        pmap=0xcf44cee0(resident=\*(Ltunknown\*(Gt)
 - 0xcfa3a358: 0x8048000-\*(Gt0x80b1000: obj=0xcf45a8e8/0x0, amap=0x0/0
        submap=F, cow=T, nc=T, prot(max)=5/7, inh=1, wc=0, adv=0
\&...
.Ed
.Pp
The value of the flags field (in hexadecimal) is taken from
the include file
.In uvm/uvm_map.h :
.Bd -literal -offset indent
VM_MAP_PAGEABLE		0x01	ro: entries are pageable
VM_MAP_INTRSAFE		0x02	ro: interrupt safe map
VM_MAP_WIREFUTURE	0x04	rw: wire future mappings
VM_MAP_BUSY		0x08	rw: map is busy
VM_MAP_WANTLOCK		0x10	rw: want to write-lock
.Ed
.Pp
The
.Dq submap ,
.Dq cow ,
and
.Dq nc
fields are true or false, and indicate whether the map is a submap,
whether it is marked for copy on write, and whether it needs a copy.
The
.Dq prot
(or protection) field, along with
.Dq max
(maximum protection allowed) are made up of the following flags from
.In uvm/uvm_extern.h :
.\" this column width specifically chosen so that all the header file
.\" excerpts appear to line up cleanly
.Bd -literal -offset indent
PROT_READ	0x01	read allowed
PROT_WRITE	0x02	write allowed
PROT_EXEC	0x04	execute allowed
.Ed
.Pp
The
.Dq obj
and
.Dq amap
fields are pointers to, and offsets into, the underlying uvm_object or
vm_amap object.
The value for resident is always unknown because digging such
information out of the kernel is beyond the scope of this application.
.Pp
The two output styles that mirror the contents of the
.Pa /proc
file system
appear as follows:
.Bd -literal -offset indent
$ procmap -m
0x8048000 0x80b1000 r-x rwx COW NC 1 0 0
0x80b1000 0x80b3000 rw- rwx COW NC 1 0 0
0x80b3000 0x80ba000 rw- rwx COW NNC 1 0 0
0x80ba000 0x80be000 rwx rwx COW NNC 1 0 0
\&...

$ procmap -l
08048000-080b1000 r-xp 00000000 00:00 70173     /bin/sh
080b1000-080b3000 rw-p 00068000 00:00 70173     /bin/sh
080b3000-080ba000 rw-p 00000000 00:00 0
080ba000-080be000 rwxp 00000000 00:00 0
\&...
.Ed
.Pp
Here the protection and maximum protection values are indicated with
.Sq r ,
.Sq w ,
and
.Sq x
characters, indicating read permission, write permission, and execute
permission, respectively.
The
.Dq COW ,
.Dq NC ,
and
.Dq NNC
values that follow indicate, again, that the map is marked for copy on
write and either needs or does not need a copy.
It is also possible
to see the value
.Dq NCOW
here, which indicates that an entry will not be copied.
The three
following numbers indicate the inheritance type of the map, the wired
count of the map, and any advice value assigned via
.Xr madvise 2 .
.Pp
In the second form, the permissions indicated are followed by a
.Sq p
or
.Sq s
character indicating whether the map entry is private or shared (copy
on write or not), and the numbers are the offset into the underlying
object, the device and numbers of the object if it is a file, and the
path to the file (if available).
.Pp
As noted above (see section
.Sx DESCRIPTION ) ,
the
.Dq all
output format is an amalgam of the previous output formats.
.Bd -literal -offset indent
$ procmap -a
Start    End         Size  Offset   rwxpc  RWX  I/W/A ...
08048000-080b0fff     420k 00000000 r-xp+ (rwx) 1/0/0 ...
\&...
.Ed
.Pp
In this format, the column labeled
.Dq rwxpc
contains the permissions for the mapping along with the shared/private
flag, and a character indicating whether the mapping needs to be
copied on write
.Pq Sq +
or has already been copied
.Pq Sq -
and is followed by a column that indicates the maximum permissions for
the map entry.
The column labeled
.Dq I/W/A
indicates the inheritance, wired, and advice values for the map entry,
as previously described.
.Sh SEE ALSO
.Xr ls 1 ,
.\" .Xr stat 1 ,
.Xr madvise 2 ,
.Xr mmap 2 ,
.Xr kvm 3 ,
.Xr ddb 4 ,
.Xr namei 9 ,
.Xr vnode 9
.Sh HISTORY
The
.Nm
utility first appeared in
.Ox 3.5 .
It was derived from the
.Nx
utility known as
.Dq pmap .
.Sh AUTHORS
The
.Nm
utility and documentation was written by
.An Andrew Brown Aq Mt atatat@@netbsd.org .
.Sh BUGS
Very little will work unless
.Nm
is reading from the correct kernel in order to retrieve the
proper symbol information.
.Pp
Since processes can change state while
.Nm
is running, some of the information printed may be inaccurate.
This is especially important to consider when examining the kernel's map,
since merely executing
.Nm
will cause some of the information to change.
.Pp
The pathnames to files backing certain vnodes (such as the text and
data sections of programs and shared libraries) are extracted from the
kernel's namei cache which is considerably volatile.
If a path is not
found there in its entirety, as much information as was available
will be printed.
In most cases, simply running
.Xr ls 1
.\" or
.\" .Xr stat 1
with the expected path to the file will cause the information to be
reentered into the cache.
.Pp
The Solaris version
.Pq Dq pmap
has some interesting command line flags that would be nice to emulate here.
In particular, the
.Fl r
option that lists a process's reserved addresses, and the
.Fl x
option that prints resident/shared/private mapping details for each
entry.
.Pp
Some of the output modes can be or are wider than the standard 80
columns of a terminal.
Some sort of formatting might be nice.
@


1.21
log
@Re-introduce vnode-to-filename mapping

The name cache walking code got adapted to the new name cache layout.
Along with the previous commit, procmap is now able to map a vnode
to a filename as long as it is in the name cache.

"nice stuff" deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.20 2015/03/13 19:58:41 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: March 13 2015 $
d55 7
@


1.20
log
@remove the first comma from constructs like ", and," and ", or,": you can use
"and" and "or" to join sentence clauses, and you can use commas, but both hinders
reading;
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.19 2014/11/16 12:31:01 deraadt Exp $
d31 1
a31 1
.Dd $Mdocdate: November 16 2014 $
d93 2
@


1.19
log
@Replace a plethora of historical protection options with just
PROT_NONE, PROT_READ, PROT_WRITE, and PROT_EXEC from mman.h.
PROT_MASK is introduced as the one true way of extracting those bits.
Remove UVM_ADV_* wrapper, using the standard names.
ok doug guenther kettenis
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.18 2014/09/08 04:40:30 doug Exp $
d31 1
a31 1
.Dd $Mdocdate: September 8 2014 $
d50 1
a50 1
The start address of each entry is always given, and,
@


1.18
log
@Additional cleanup for procfs removal

ok guenther@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.17 2014/02/13 21:17:13 tedu Exp $
d31 1
a31 1
.Dd $Mdocdate: February 13 2014 $
d246 3
a248 3
UVM_PROT_READ	0x01	read allowed
UVM_PROT_WRITE	0x02	write allowed
UVM_PROT_EXEC	0x04	execute allowed
@


1.17
log
@remove tendrils of namei dumping code
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.16 2014/01/21 03:15:46 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: January 21 2014 $
a344 1
.Xr mount_procfs 8 ,
@


1.16
log
@obvious .Pa fixes; found with mandocdb(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.15 2013/07/16 11:13:34 schwarze Exp $
d31 1
a31 1
.Dd $Mdocdate: July 16 2013 $
a92 2
.It Cm 16
dump the namei cache as it is traversed
@


1.15
log
@use .Mt for email addresses; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.14 2011/09/03 22:59:08 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: September 3 2011 $
d223 1
a223 1
.Aq Pa uvm/uvm_map.h :
d244 1
a244 1
.Aq Pa uvm/uvm_extern.h :
@


1.14
log
@make -column lists pretty again;

specifically, rewrite them to permit some markup in the column headers,
and use "Ta" instead of literal tabs; mandoc does not currently match groff
100%, but a mandoc fix may be some time off, and we've gone enough releases
with poorly formatting column lists.

in some cases i have rewritten the lists as -tag, where -column made
little sense.
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.13 2010/09/03 11:22:36 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: September 3 2010 $
d363 1
a363 1
.An Andrew Brown Aq atatat@@netbsd.org .
@


1.13
log
@add an EXIT STATUS section for /usr/sbin;
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.12 2009/01/19 09:46:59 sobrado Exp $
d31 1
a31 1
.Dd $Mdocdate: January 19 2009 $
d224 7
a230 7
.Bl -column VM_MAP_WIREFUTURE VM_MAP_WIREFUTURE -offset indent
.It Dv "VM_MAP_PAGEABLE"   Ta No "0x01   ro: entries are pageable"
.It Dv "VM_MAP_INTRSAFE"   Ta No "0x02   ro: interrupt safe map"
.It Dv "VM_MAP_WIREFUTURE" Ta No "0x04   rw: wire future mappings"
.It Dv "VM_MAP_BUSY"       Ta No "0x08   rw: map is busy"
.It Dv "VM_MAP_WANTLOCK"   Ta No "0x10   rw: want to write-lock"
.El
d247 5
a251 5
.Bl -column VM_MAP_WIREFUTURE VM_MAP_WIREFUTURE -offset indent
.It Dv "UVM_PROT_READ"  Ta No "0x01   read allowed"
.It Dv "UVM_PROT_WRITE" Ta No "0x02   write allowed"
.It Dv "UVM_PROT_EXEC"  Ta No "0x04   execute allowed"
.El
@


1.12
log
@replace standardized text concerning the exit values of applications
with the right mdoc macros.
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.11 2008/09/18 11:17:32 jmc Exp $
d31 1
a31 1
.Dd $Mdocdate: September 18 2008 $
d185 1
a185 1
.Pp
@


1.11
log
@add -A to SYNOPSIS;
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.10 2008/09/18 08:02:53 otto Exp $
d186 1
a186 2
.Nm
exits 0 on success, and \*(Gt0 if an error occurred.
@


1.10
log
@document -A and include in usage
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.9 2008/06/26 05:42:21 ray Exp $
d31 1
a31 1
.Dd $Mdocdate: June 26 2008 $
d39 1
a39 1
.Op Fl adlmPsv
@


1.9
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.8 2007/11/28 14:10:28 tedu Exp $
d31 1
a31 1
.Dd $Mdocdate: November 28 2007 $
d68 2
@


1.8
log
@this is openbsd, therefore the native display mode is called openbsd
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.7 2007/05/31 19:20:28 jmc Exp $
a17 7
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"        This product includes software developed by the NetBSD
.\"        Foundation, Inc. and its contributors.
.\" 4. Neither the name of The NetBSD Foundation nor the names of its
.\"    contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
d31 1
a31 1
.Dd $Mdocdate: May 31 2007 $
@


1.7
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.6 2004/03/19 04:47:55 tedu Exp $
d38 1
a38 1
.Dd $Mdocdate$
d81 1
a81 1
.Nx
@


1.6
log
@procmap/pmap confusion, spotted by jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.5 2004/03/18 13:50:36 jmc Exp $
d38 1
a38 1
.Dd August 29, 2002
@


1.5
log
@various fixes from Jared Yanovich;
thanks Jared!
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.4 2004/02/23 21:07:59 tedu Exp $
d221 1
a221 1
        procmap=0xcf44cee0(resident=\*(Ltunknown\*(Gt)
@


1.4
log
@remove security considerations section.  this has been fixed.
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.3 2004/02/17 21:08:37 jmc Exp $
d46 1
a46 1
.Op Fl adlmPRsv
d108 2
a109 1
other identifying information from the vm_map_entries will be printed.
d149 10
a158 10
.It Fl R
Recurse into submaps.
In some cases, a vm_map_entry in the kernel
will point to a submap.
Using this flag tells
.Nm
to print the entries of the submap as well.
The submap output is
indented, and does not affect any total printed at the bottom of the
output.
d160 2
a161 2
The Solaris style output format, modeled after the Solaris command of
the same name.
d219 1
a219 1
MAP 0xcf7cac84: [0x0->0xbfbfe000]
d221 2
a222 2
        procmap=0xcf44cee0(resident=<unknown>)
 - 0xcfa3a358: 0x8048000->0x80b1000: obj=0xcf45a8e8/0x0, amap=0x0/0
d264 1
a264 1
amap.
d353 3
a355 1
.Xr mount_procfs 8
d359 3
a361 1
utility appeared in
d363 2
a364 1
2.0 as pmap.
d368 2
a369 2
utility and documentation was written by Andrew Brown
.Aq atatat@@netbsd.org .
d397 3
a399 2
The Solaris command by the same name has some interesting command line
flags that would be nice to emulate here.
@


1.3
log
@couple more bits from wiz@@netbsd;
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.2 2004/02/17 20:34:43 jmc Exp $
a402 11
.Sh SECURITY CONSIDERATIONS
The Solaris command controls access to processes the user does not own
via the permissions of its
.Pa /proc
file system.
Since
.Nm
uses
.Xr kvm 3
to read the requested data directly from kernel memory, no such
limitation exists.
@


1.2
log
@tidy this page up a bit;
@
text
@d1 1
a1 1
.\"	$OpenBSD: procmap.1,v 1.1 2004/02/16 08:54:34 tedu Exp $
d196 3
a198 1
Here a portion of the default output from procmap being run at a
d358 1
a358 1
as pmap.
@


1.1
log
@rough cut of netbsd's pmap process memory map inspector.
initially from drahn@@, renamed to procmap to avoid conflict with
unrelated pmap(9).
works more or less as advertised, could definitely use some work though.
would be really nice if somebody made it use sysctl and not kmem.
more or less ok deraadt@@ drahn@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d68 1
a68 1
pids are given as arguments on the command line, information for those
d70 1
a70 1
If the special pid of 0 is given,
d75 8
a100 19
.It Fl M Ar core
Extract values associated with the name list from the specified core
instead of the default
.Pa /dev/kmem .
.It Fl N Ar system
Extract the name list from the specified system instead of the default
.Pa /netbsd .
.It Fl P
Causes
.Nm
to print information about itself.
.It Fl a
Display
.Dq all
information from the process's memory map.
This output
mode is an amalgam of the contents of the Solaris, Linux, and
.Nx
style output modes.
d120 4
d132 7
d171 3
a173 1
If specified more than once, a * will be printed in between two
d188 2
a189 2
and place the extra pid at the end of the command line.
.Sh EXIT STATUS
d191 1
a191 1
exits 0 on success, and \*[Gt]0 if an error occurred.
d193 1
a193 1
While the meaning most of the output is self evident, some pieces of
d196 1
a196 1
Here a portion of the default output from procmap being run at an
d228 5
a232 5
.It Dv "VM_MAP_PAGEABLE"   Ta No "0x01   entries are pageable"
.It Dv "VM_MAP_INTRSAFE"   Ta No "0x02   interrupt safe map"
.It Dv "VM_MAP_WIREFUTURE" Ta No "0x04   future mappings are wired
.It Dv "VM_MAP_BUSY"       Ta No "0x08   map is busy
.It Dv "VM_MAP_WANTLOCK"   Ta No "0x10   want to write-lock
d236 2
a237 2
.Dq Tn submap ,
.Dq Tn cow ,
d239 1
a239 1
.Dq Tn nc
d243 4
a246 4
.Dq Tn prot
\&(or protection) field, along with
.Dq Tn max
\&(maximum protection allowed) are made up of the following flags from
d257 1
a257 1
.Dq Tn obj
d259 1
a259 1
.Dq Tn amap
d286 2
a287 2
.Dq Tn r ,
.Dq Tn w ,
d289 1
a289 1
.Dq Tn x
d293 2
a294 2
.Dq Tn COW ,
.Dq Tn NC ,
d296 1
a296 1
.Dq Tn NNC
d301 1
a301 1
.Dq Tn NCOW
d309 1
a309 1
.Dq Tn p
d311 2
a312 2
.Dq Tn s
character indicated whether the map entry is private or shared (copy
d320 1
a320 1
.Dq Tn all
d330 1
a330 1
.Dq Tn rwxpc
d334 1
a334 1
.Pq Dq \&+
d336 1
a336 1
.Pq Dq \&-
d340 1
a340 1
.Dq Tn I/W/A
d345 1
a345 1
.Xr stat 1 ,
d355 1
a355 1
.Nx 2.0
d371 1
a371 1
This is especially important to consider when examining the kernel's map
d384 2
a385 2
or
.Xr stat 1
@

