head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.14
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.10
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.12
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.8
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.38
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.36
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.34
	OPENBSD_5_0:1.4.0.32
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.30
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.28
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.24
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.26
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.22
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.20
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.18
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.16
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.14
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.12
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.10
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4;
locks; strict;
comment	@# @;


1.6
date	2016.09.16.04.45.35;	author dlg;	state Exp;
branches;
next	1.5;
commitid	dGgXkqY8OAYTt6kH;

1.5
date	2013.06.25.15.11.58;	author dcoppa;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.23.21.09.28;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.23.21.07.32;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.23.21.06.26;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.16.08.54.34;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@procmap fumbles with uvm_map_addr structures, which are now in RBTs

it also does proper traversal of the tree (ie, it does FOREACH)
which in turn uses MIN and NEXT operations to iterate over the whole
tree. theyre complicated and need code.

so for now this pulls in subr_tree.c from the kernel and builds it
as part of procmap. that allows for traversal of the RBT using the
same code that the kernel uses.

it is a bit ugly though because procmap updates the pointers between
items in the tree so they point at local copies instead of kernel
addresses. its made worse because RBT code has pointers between
rb_entry structs, not between the nodes.

im putting this in now to unbreak the tree. it can be polished after
coffee/naps.
@
text
@#	$OpenBSD: Makefile,v 1.5 2013/06/25 15:11:58 dcoppa Exp $

PROG=		procmap
SRCS=		procmap.c
CFLAGS+=	-Wall
LDADD=		-lkvm
DPADD=		${LIBKVM}

.PATH: ${.CURDIR}/../../sys/kern
SRCS+=		subr_tree.c

.include <bsd.prog.mk>
@


1.5
log
@Since the "better kmem pointer hiding" commit, procmap does not work
anymore for regular users.
So remove the setgid kmem for the time being (until tedu@@ fixes it).

ok tedu@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2004/02/23 21:09:28 tedu Exp $
d8 3
@


1.4
log
@bogus leftover SRCS line
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2004/02/23 21:07:32 tedu Exp $
a4 2
BINGRP=		kmem
BINMODE=	2555
@


1.3
log
@supposed to use cflags, oops
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2004/02/23 21:06:26 tedu Exp $
a3 1
SRCS=		main.c 
@


1.2
log
@Wall
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2004/02/16 08:54:34 tedu Exp $
d8 1
a8 1
COPTS=		-Wall
@


1.1
log
@rough cut of netbsd's pmap process memory map inspector.
initially from drahn@@, renamed to procmap to avoid conflict with
unrelated pmap(9).
works more or less as advertised, could definitely use some work though.
would be really nice if somebody made it use sysctl and not kmem.
more or less ok deraadt@@ drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD$
d8 1
@

