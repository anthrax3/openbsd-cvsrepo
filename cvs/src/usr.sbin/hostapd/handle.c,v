head	1.12;
access;
symbols
	OPENBSD_6_0:1.12.0.8
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.4
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.34
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.32
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.28
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.26
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.24
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.22
	OPENBSD_5_0:1.11.0.20
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.18
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.16
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.12
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.14
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.10
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.8
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.6
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.4
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.2
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.12
date	2015.01.16.06.40.17;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	Uu5nFG3wCl0LACBb;

1.11
date	2007.02.08.11.15.55;	author reyk;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.27.18.14.59;	author reyk;	state Exp;
branches;
next	1.9;

1.9
date	2006.06.01.22.09.09;	author reyk;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.18.17.54.12;	author reyk;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.01.01.11.30;	author reyk;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.23.20.40.38;	author reyk;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.20.12.02.04;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.11.14.22.22;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.30.16.50.03;	author reyk;	state Exp;
branches;
next	1.2;

1.2
date	2005.07.04.16.48.55;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.17.19.13.35;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/*	$OpenBSD: handle.c,v 1.11 2007/02/08 11:15:55 reyk Exp $	*/

/*
 * Copyright (c) 2005, 2006 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>

#include <net/if.h>
#include <net/if_dl.h>
#include <net/if_media.h>
#include <net/if_arp.h>
#include <net/if_llc.h>
#include <net/bpf.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <arpa/inet.h>

#include <net80211/ieee80211.h>
#include <net80211/ieee80211_radiotap.h>

#include <fcntl.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>

#include "hostapd.h"

int	 hostapd_handle_frame(struct hostapd_apme *, struct hostapd_frame *,
	    u_int8_t *, const u_int);
int	 hostapd_handle_action(struct hostapd_apme *, struct hostapd_frame *,
	    u_int8_t *, u_int8_t *, u_int8_t *, u_int8_t *, const u_int);
void	 hostapd_handle_addr(const u_int32_t, u_int32_t *, u_int8_t *,
	    u_int8_t *, struct hostapd_table *);
void	 hostapd_handle_ref(u_int, u_int, u_int8_t *, u_int8_t *, u_int8_t *,
	    u_int8_t *);
int	 hostapd_handle_radiotap(struct hostapd_radiotap *, u_int8_t *,
	    const u_int);
int	 hostapd_cmp(enum hostapd_op, int, int);

int
hostapd_handle_input(struct hostapd_apme *apme, u_int8_t *buf, u_int len)
{
	struct hostapd_config *cfg = (struct hostapd_config *)apme->a_cfg;
	struct hostapd_frame *frame;
	int ret;

	TAILQ_FOREACH(frame, &cfg->c_frames, f_entries) {
		if ((ret = hostapd_handle_frame(apme, frame, buf, len)) != 0)
			return (ret);
	}

	return (0);
}

void
hostapd_handle_addr(const u_int32_t mask, u_int32_t *flags, u_int8_t *addr,
    u_int8_t *maddr, struct hostapd_table *table)
{
	int ret = 0;

	if ((*flags & mask) & HOSTAPD_FRAME_TABLE) {
		if (hostapd_entry_lookup(table, addr) == NULL)
			ret = 1;
	} else if (bcmp(addr, maddr, IEEE80211_ADDR_LEN) != 0)
			ret = 1;

	if ((ret == 1 && (*flags & mask) & HOSTAPD_FRAME_N) ||
	    (ret == 0 && ((*flags & mask) & HOSTAPD_FRAME_N) == 0))
		*flags &= ~mask;
}

void
hostapd_handle_ref(u_int flags, u_int shift, u_int8_t *wfrom, u_int8_t *wto,
    u_int8_t *wbssid, u_int8_t *addr)
{
	if (flags & (HOSTAPD_ACTION_F_REF_FROM << shift))
		bcopy(wfrom, addr, IEEE80211_ADDR_LEN);
	else if (flags & (HOSTAPD_ACTION_F_REF_TO << shift))
		bcopy(wto, addr, IEEE80211_ADDR_LEN);
	else if (flags & (HOSTAPD_ACTION_F_REF_BSSID << shift))
		bcopy(wbssid, addr, IEEE80211_ADDR_LEN);
	else if (flags & (HOSTAPD_ACTION_F_REF_RANDOM << shift)) {
		hostapd_randval(addr, IEEE80211_ADDR_LEN);
		/* Avoid multicast/broadcast addresses */
		addr[0] &= ~0x1;
	}
}

int
hostapd_handle_frame(struct hostapd_apme *apme, struct hostapd_frame *frame,
    u_int8_t *buf, const u_int len)
{
	struct hostapd_config *cfg = (struct hostapd_config *)apme->a_cfg;
	struct ieee80211_frame *wh;
	struct hostapd_ieee80211_frame *mh;
	struct hostapd_radiotap rtap;
	u_int8_t *wfrom, *wto, *wbssid;
	struct timeval t_now;
	u_int32_t flags;
	int offset, min_rate = 0, val;

	if ((offset = hostapd_apme_offset(apme, buf, len)) < 0)
		return (0);
	wh = (struct ieee80211_frame *)(buf + offset);

	mh = &frame->f_frame;
	flags = frame->f_flags;

	/* Get timestamp */
	if (gettimeofday(&t_now, NULL) == -1)
		hostapd_fatal("gettimeofday");

	/* Handle optional limit */
	if (frame->f_limit.tv_sec || frame->f_limit.tv_usec) {
		if (timercmp(&t_now, &frame->f_then, <))
			return (0);
		timeradd(&t_now, &frame->f_limit, &frame->f_then);
	}

	switch (wh->i_fc[1] & IEEE80211_FC1_DIR_MASK) {
	case IEEE80211_FC1_DIR_NODS:
		wfrom = wh->i_addr2;
		wto = wh->i_addr1;
		wbssid = wh->i_addr3;
		break;
	case IEEE80211_FC1_DIR_TODS:
		wfrom = wh->i_addr2;
		wto = wh->i_addr3;
		wbssid = wh->i_addr1;
		break;
	case IEEE80211_FC1_DIR_FROMDS:
		wfrom = wh->i_addr3;
		wto = wh->i_addr1;
		wbssid = wh->i_addr2;
		break;
	default:
	case IEEE80211_FC1_DIR_DSTODS:
		return (0);
	}

	if (flags & HOSTAPD_FRAME_F_APME_M) {
		if (frame->f_apme == NULL)
			return (0);
		/* Match hostap interface */
		if ((flags & HOSTAPD_FRAME_F_APME &&
		    apme == frame->f_apme) ||
		    (flags & HOSTAPD_FRAME_F_APME_N &&
		    apme != frame->f_apme))
			flags &= ~HOSTAPD_FRAME_F_APME_M;
	}

	if (flags & HOSTAPD_FRAME_F_TYPE) {
		/* type $type */
		if ((wh->i_fc[0] & IEEE80211_FC0_TYPE_MASK) ==
		    (mh->i_fc[0] & IEEE80211_FC0_TYPE_MASK))
			flags &= ~HOSTAPD_FRAME_F_TYPE;
	} else if (flags & HOSTAPD_FRAME_F_TYPE_N) {
		/* type !$type */
		if ((wh->i_fc[0] & IEEE80211_FC0_TYPE_MASK) !=
		    (mh->i_fc[0] & IEEE80211_FC0_TYPE_MASK))
			flags &= ~HOSTAPD_FRAME_F_TYPE_N;
	}

	if (flags & HOSTAPD_FRAME_F_SUBTYPE) {
		/* subtype $subtype */
		if ((wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK) ==
		    (mh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK))
			flags &= ~HOSTAPD_FRAME_F_SUBTYPE;
	} else if (flags & HOSTAPD_FRAME_F_SUBTYPE_N) {
		/* subtype !$subtype */
		if ((wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK) !=
		    (mh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK))
			flags &= ~HOSTAPD_FRAME_F_SUBTYPE_N;
	}

	if (flags & HOSTAPD_FRAME_F_DIR) {
		/* dir $dir */
		if ((wh->i_fc[1] & IEEE80211_FC1_DIR_MASK) ==
		    (mh->i_fc[1] & IEEE80211_FC1_DIR_MASK))
			flags &= ~HOSTAPD_FRAME_F_DIR;
	} else if (flags & HOSTAPD_FRAME_F_DIR_N) {
		/* dir !$dir */
		if ((wh->i_fc[1] & IEEE80211_FC1_DIR_MASK) !=
		    (mh->i_fc[1] & IEEE80211_FC1_DIR_MASK))
			flags &= ~HOSTAPD_FRAME_F_DIR_N;
	}

	/* from/to/bssid [!]$addr/<table> */
	hostapd_handle_addr(HOSTAPD_FRAME_F_FROM_M, &flags, wfrom,
	    mh->i_from, frame->f_from);
	hostapd_handle_addr(HOSTAPD_FRAME_F_TO_M, &flags, wto,
	    mh->i_to, frame->f_to);
	hostapd_handle_addr(HOSTAPD_FRAME_F_BSSID_M, &flags, wbssid,
	    mh->i_bssid, frame->f_bssid);

	/* parse the optional radiotap header if required */
	if (frame->f_radiotap) {
		if (hostapd_handle_radiotap(&rtap, buf, len) != 0)
			return (0);
		else if ((rtap.r_present & frame->f_radiotap) !=
		    frame->f_radiotap) {
			cfg->c_stats.cn_rtap_miss++;
			return (0);
		}
		if (flags & HOSTAPD_FRAME_F_RSSI && rtap.r_max_rssi) {
			val = ((float)rtap.r_rssi / rtap.r_max_rssi) * 100;
			if (hostapd_cmp(frame->f_rssi_op,
			    val, frame->f_rssi))
				flags &= ~HOSTAPD_FRAME_F_RSSI;
		}
		if (flags & HOSTAPD_FRAME_F_RATE) {
			val = rtap.r_txrate;
			if (hostapd_cmp(frame->f_txrate_op,
			    val, frame->f_txrate))
				flags &= ~HOSTAPD_FRAME_F_RATE;
		}
		if (flags & HOSTAPD_FRAME_F_CHANNEL) {
			val = rtap.r_chan;
			if (hostapd_cmp(frame->f_chan_op,
			    val, frame->f_chan))
				flags &= ~HOSTAPD_FRAME_F_CHANNEL;
		}
	}

	/* Handle if frame matches */
	if ((flags & HOSTAPD_FRAME_F_M) != 0)
		return (0);

	/* Handle optional minimal rate */
	if (frame->f_rate && frame->f_rate_intval) {
		frame->f_rate_delay = t_now.tv_sec - frame->f_last.tv_sec;
		if (frame->f_rate_delay < frame->f_rate_intval) {
			frame->f_rate_cnt++;
			if (frame->f_rate_cnt < frame->f_rate)
				min_rate = 1;
		} else {
			min_rate = 1;
			frame->f_rate_cnt = 0;
		}
	}

	/* Update timestamp for the last match of this event */
	if (frame->f_rate_cnt == 0 || min_rate == 0)
		bcopy(&t_now, &frame->f_last, sizeof(struct timeval));

	/* Return if the minimal rate is not reached, yet */
	if (min_rate)
		return (0);

	if (hostapd_handle_action(apme, frame, wfrom, wto, wbssid, buf,
	    len) != 0)
		return (0);

	/* Reset minimal rate counter after successfully handled the frame */
	frame->f_rate_cnt = 0;

	return ((frame->f_flags & HOSTAPD_FRAME_F_RET_M) >>
	    HOSTAPD_FRAME_F_RET_S);
}

int
hostapd_handle_action(struct hostapd_apme *apme, struct hostapd_frame *frame,
    u_int8_t *wfrom, u_int8_t *wto, u_int8_t *wbssid, u_int8_t *buf,
    const u_int len)
{
	struct hostapd_config *cfg = (struct hostapd_config *)apme->a_cfg;
	struct hostapd_iapp *iapp = &cfg->c_iapp;
	struct hostapd_action_data *action = &frame->f_action_data;
	struct hostapd_node node;
	u_int8_t *lladdr = NULL;
	int ret = 0, offset;

	switch (frame->f_action) {
	case HOSTAPD_ACTION_RADIOTAP:
		/* Send IAPP frame with radiotap/pcap payload */
		if ((ret = hostapd_iapp_radiotap(apme, buf, len)) != 0)
			return (ret);

		if ((frame->f_action_flags & HOSTAPD_ACTION_VERBOSE) == 0)
			return (0);

		hostapd_log(HOSTAPD_LOG,
		    "%s: sent IAPP frame HOSTAPD_%s (%u bytes)",
		    iapp->i_iface, cfg->c_apme_dlt ==
		    DLT_IEEE802_11_RADIO ? "RADIOTAP" : "PCAP", len);
		break;

	case HOSTAPD_ACTION_LOG:
		/* Log frame to syslog/stderr */
		if (frame->f_rate && frame->f_rate_intval) {
			hostapd_printf("%s: (rate: %ld/%ld sec) ",
			    apme->a_iface, frame->f_rate_cnt,
			    frame->f_rate_delay + 1);
		} else
			hostapd_printf("%s: ", apme->a_iface);

		hostapd_print_ieee80211(cfg->c_apme_dlt, frame->f_action_flags &
		    HOSTAPD_ACTION_VERBOSE, buf, len);

		/* Flush output buffer */
		hostapd_printf(NULL);
		break;

	case HOSTAPD_ACTION_DELNODE:
	case HOSTAPD_ACTION_ADDNODE:
		bzero(&node, sizeof(node));

		if (action->a_flags & HOSTAPD_ACTION_F_REF_FROM)
			lladdr = wfrom;
		else if (action->a_flags & HOSTAPD_ACTION_F_REF_TO)
			lladdr = wto;
		else if (action->a_flags & HOSTAPD_ACTION_F_REF_BSSID)
			lladdr = wbssid;
		else
			lladdr = action->a_lladdr;

		bcopy(lladdr, &node.ni_macaddr, IEEE80211_ADDR_LEN);

		if (frame->f_action == HOSTAPD_ACTION_DELNODE)
			ret = hostapd_apme_delnode(apme, &node);
		else
			ret = hostapd_apme_addnode(apme, &node);

		if (ret != 0)  {
			hostapd_log(HOSTAPD_LOG_DEBUG,
			    "%s: node add/delete %s failed: %s",
			    apme->a_iface, etheraddr_string(lladdr),
			    strerror(ret));
		}
		break;

	case HOSTAPD_ACTION_NONE:
		/* Nothing */
		break;

	case HOSTAPD_ACTION_RESEND:
		/* Resend received raw IEEE 802.11 frame */
		if ((offset = hostapd_apme_offset(apme, buf, len)) < 0)
			return (EINVAL);
		if (write(apme->a_raw, buf + offset, len - offset) == -1)
			ret = errno;
		break;

	case HOSTAPD_ACTION_FRAME:
		if (action->a_flags & HOSTAPD_ACTION_F_REF_M) {
			hostapd_handle_ref(action->a_flags &
			    HOSTAPD_ACTION_F_REF_FROM_M,
			    HOSTAPD_ACTION_F_REF_FROM_S, wfrom, wto, wbssid,
			    action->a_frame.i_from);
			hostapd_handle_ref(action->a_flags &
			    HOSTAPD_ACTION_F_REF_TO_M,
			    HOSTAPD_ACTION_F_REF_TO_S, wfrom, wto, wbssid,
			    action->a_frame.i_to);
			hostapd_handle_ref(action->a_flags &
			    HOSTAPD_ACTION_F_REF_BSSID_M,
			    HOSTAPD_ACTION_F_REF_BSSID_S, wfrom, wto, wbssid,
			    action->a_frame.i_bssid);
		}

		/* Send a raw IEEE 802.11 frame */
		return (hostapd_apme_output(apme, &action->a_frame));

	default:
		return (0);
	}

	return (ret);
}

int
hostapd_handle_radiotap(struct hostapd_radiotap *rtap,
    u_int8_t *buf, const u_int len)
{
	struct ieee80211_radiotap_header *rh =
	    (struct ieee80211_radiotap_header*)buf;
	u_int8_t *t, *ptr = NULL;
	u_int rh_len;
	const u_int8_t *snapend = buf + len;

	TCHECK(*rh);

	rh_len = letoh16(rh->it_len);
	if (rh->it_version != 0)
		return (EINVAL);
	if (len <= rh_len)
		goto trunc;

	bzero(rtap, sizeof(struct hostapd_radiotap));

	t = (u_int8_t*)buf + sizeof(struct ieee80211_radiotap_header);
	if ((rtap->r_present = letoh32(rh->it_present)) == 0)
		return (0);

#define RADIOTAP(_x, _len)						\
	if (rtap->r_present & HOSTAPD_RADIOTAP_F(_x)) {			\
		TCHECK2(*t, _len);					\
		ptr = t;						\
		t += _len;						\
	} else								\
		ptr = NULL;

	/* radiotap doesn't use TLV header fields, ugh */
	RADIOTAP(TSFT, 8);
	RADIOTAP(FLAGS, 1);

	RADIOTAP(RATE, 1);
	if (ptr != NULL) {
		rtap->r_txrate = *(u_int8_t *)ptr;
	}

	RADIOTAP(CHANNEL, 4);
	if (ptr != NULL) {
		rtap->r_chan = letoh16(*(u_int16_t*)ptr);
		rtap->r_chan_flags = letoh16(*(u_int16_t*)ptr + 1);
	}

	RADIOTAP(FHSS, 2);
	RADIOTAP(DBM_ANTSIGNAL, 1);
	RADIOTAP(DBM_ANTNOISE, 1);
	RADIOTAP(LOCK_QUALITY, 2);
	RADIOTAP(TX_ATTENUATION, 2);
	RADIOTAP(DB_TX_ATTENUATION, 2);
	RADIOTAP(DBM_TX_POWER, 1);
	RADIOTAP(ANTENNA, 1);
	RADIOTAP(DB_ANTSIGNAL, 1);
	RADIOTAP(DB_ANTNOISE, 1);
	RADIOTAP(FCS, 4);

	RADIOTAP(RSSI, 2);
	if (ptr != NULL) {
		rtap->r_rssi = *(u_int8_t *)ptr;
		rtap->r_max_rssi = *(u_int8_t *)ptr + 1;
	}

	return (0);

 trunc:
	return (EINVAL);
}

int
hostapd_cmp(enum hostapd_op op, int val1, int val2)
{
	if ((op == HOSTAPD_OP_EQ && val1 == val2) ||
	    (op == HOSTAPD_OP_NE && val1 != val2) ||
	    (op == HOSTAPD_OP_LE && val1 <= val2) ||
	    (op == HOSTAPD_OP_LT && val1 <  val2) ||
	    (op == HOSTAPD_OP_GE && val1 >= val2) ||
	    (op == HOSTAPD_OP_GT && val1 >  val2))
		return (1);
	return (0);
}
@


1.11
log
@carefully check some return values and make lint happy. check for
truncation before feeding strings into the kernel.
@
text
@d1 1
a1 1
/*	$OpenBSD: handle.c,v 1.10 2006/06/27 18:14:59 reyk Exp $	*/
a18 1
#include <sys/param.h>
d43 1
@


1.10
log
@add new event rules to match optional elements of radiotap headers:
signal percentage, transmit rate and channel frequency.

ok and hints by jsg@@ jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: handle.c,v 1.9 2006/06/01 22:09:09 reyk Exp $	*/
d129 2
a130 1
	gettimeofday(&t_now, NULL);
@


1.9
log
@don't use the newline character in hostapd_log() calls
@
text
@d1 1
a1 1
/*	$OpenBSD: handle.c,v 1.8 2005/12/18 17:54:12 reyk Exp $	*/
d4 1
a4 1
 * Copyright (c) 2005 Reyk Floeter <reyk@@openbsd.org>
d36 3
d55 3
d112 1
d115 1
d119 1
a119 1
	int offset, min_rate = 0;
d214 29
d386 84
@


1.8
log
@Update my e-mail address in the copyright statement, no binary changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: handle.c,v 1.7 2005/12/01 01:11:30 reyk Exp $	*/
d264 1
a264 1
		    "%s: sent IAPP frame HOSTAPD_%s (%u bytes)\n",
d307 1
a307 1
			    "%s: node add/delete %s failed: %s\n",
@


1.7
log
@move iapp configuration in a separate data structure
@
text
@d1 1
a1 1
/*	$OpenBSD: handle.c,v 1.6 2005/11/23 20:40:38 reyk Exp $	*/
d4 1
a4 1
 * Copyright (c) 2005 Reyk Floeter <reyk@@vantronix.net>
@


1.6
log
@add optional interface rule for event rules
@
text
@d1 1
a1 1
/*	$OpenBSD: handle.c,v 1.5 2005/11/20 12:02:04 reyk Exp $	*/
d248 1
d265 1
a265 1
		    cfg->c_iapp_iface, cfg->c_apme_dlt ==
@


1.5
log
@add support for multiple hostap (wireless) interfaces.

for example, if you run one hostapd with two ath(4) devices. you have
to specify "set hostap interface { ath0, ath1 }" in hostapd.conf(5).

man page bits by jmc@@, tested by others
@
text
@d1 1
a1 1
/*	$OpenBSD: handle.c,v 1.4 2005/10/11 14:22:22 reyk Exp $	*/
d149 11
@


1.4
log
@fix "node add"
@
text
@d1 1
a1 1
/*	$OpenBSD: handle.c,v 1.3 2005/09/30 16:50:03 reyk Exp $	*/
d44 1
a44 1
int	 hostapd_handle_frame(struct hostapd_config *, struct hostapd_frame *,
d46 1
a46 1
int	 hostapd_handle_action(struct hostapd_config *, struct hostapd_frame *,
d54 1
a54 1
hostapd_handle_input(struct hostapd_config *cfg, u_int8_t *buf, u_int len)
d56 2
a58 1
	struct hostapd_frame *frame;
d61 1
a61 1
		if ((ret = hostapd_handle_frame(cfg, frame, buf, len)) != 0)
d103 1
a103 1
hostapd_handle_frame(struct hostapd_config *cfg, struct hostapd_frame *frame,
d113 1
a113 1
	if ((offset = hostapd_apme_offset(cfg, buf, len)) < 0)
d220 1
a220 1
	if (hostapd_handle_action(cfg, frame, wfrom, wto, wbssid, buf,
d232 1
a232 1
hostapd_handle_action(struct hostapd_config *cfg, struct hostapd_frame *frame,
d236 1
d245 1
a245 1
		if ((ret = hostapd_iapp_radiotap(cfg, buf, len)) != 0)
d261 1
a261 1
			    cfg->c_apme_iface, frame->f_rate_cnt,
d264 1
a264 1
			hostapd_printf("%s: ", cfg->c_apme_iface);
d289 1
a289 1
			ret = hostapd_apme_delnode(cfg, &node);
d291 1
a291 1
			ret = hostapd_apme_addnode(cfg, &node);
d296 1
a296 1
			    cfg->c_apme_iface, etheraddr_string(lladdr),
d307 1
a307 1
		if ((offset = hostapd_apme_offset(cfg, buf, len)) < 0)
d309 1
a309 1
		if (write(cfg->c_apme_raw, buf + offset, len - offset) == -1)
d330 1
a330 1
		return (hostapd_apme_output(cfg, &action->a_frame));
@


1.3
log
@implement a way to match IEEE 802.11 flooding. this will help to detect
known DoS attacks, like de-auth flooding against wireless networks.
an example is provided in the manual page.

"or could you just got for it?", deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: handle.c,v 1.2 2005/07/04 16:48:55 reyk Exp $	*/
d286 1
a286 1
		if (HOSTAPD_ACTION_DELNODE)
@


1.2
log
@add 'random' action address and auth open request/response
@
text
@d1 1
a1 1
/*	$OpenBSD: handle.c,v 1.1 2005/06/17 19:13:35 reyk Exp $	*/
d110 1
a110 1
	int offset;
d119 3
a123 1
		gettimeofday(&t_now, NULL);
d198 21
d223 3
d257 6
a262 1
		hostapd_printf("%s: ", cfg->c_apme_iface);
@


1.1
log
@first step to implement a proactive wireless monitoring system using
hostapd(8). it's a very simple but powerful approach using highly
flexible and stateless event and action rules for IEEE 802.11 traffic.
you can monitor a wireless network by watching frames with types and
addresses (with support for tables and masks) and you can trigger
actions like writing log messages, sending pcap/radiotap dumps to the
IAPP network, removing nodes from the hostap, resending received
frames and sending contructed 802.11 frames in reply to traffic
received from any rogue nodes.

it's based on some initial work from the c2k5 which has been tested
and improved during the last weeks. some missing documentation for
hostapd.conf(5) will be written as soon as possible.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d94 5
@

