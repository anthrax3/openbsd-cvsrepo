head	1.19;
access;
symbols
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.8
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.4
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.24
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.22
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.18
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.16
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.14
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.12
	OPENBSD_5_0:1.18.0.10
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.8
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.6
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.4
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.17.0.10
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.8
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.6
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.4
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.2
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.16.0.2
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.14.0.2
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7;
locks; strict;
comment	@ * @;


1.19
date	2015.01.16.06.40.17;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	Uu5nFG3wCl0LACBb;

1.18
date	2009.04.16.20.13.13;	author sobrado;	state Exp;
branches;
next	1.17;

1.17
date	2007.02.08.11.15.55;	author reyk;	state Exp;
branches;
next	1.16;

1.16
date	2006.06.01.22.09.09;	author reyk;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.15.20.53.02;	author reyk;	state Exp;
branches;
next	1.14;

1.14
date	2005.12.18.17.54.12;	author reyk;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.01.02.03.58;	author reyk;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.01.01.11.30;	author reyk;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.01.00.36.41;	author reyk;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.23.20.47.29;	author reyk;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.20.12.02.04;	author reyk;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.07.22.32.52;	author reyk;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.17.13.18.33;	author reyk;	state Exp;
branches;
next	1.6;

1.6
date	2005.07.04.18.48.26;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2005.06.17.19.13.35;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.13.21.02.44;	author moritz;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.13.20.25.31;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.13.18.25.28;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.13.18.12.23;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/*	$OpenBSD: iapp.c,v 1.18 2009/04/16 20:13:13 sobrado Exp $	*/

/*
 * Copyright (c) 2004, 2005 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <sys/uio.h>

#include <net/if.h>
#include <net/if_dl.h>
#include <net/if_media.h>
#include <net/if_arp.h>
#include <net/if_llc.h>
#include <net/bpf.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <arpa/inet.h>

#include <fcntl.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>

#include "hostapd.h"
#include "iapp.h"

void
hostapd_iapp_init(struct hostapd_config *cfg)
{
	struct hostapd_apme *apme;
	struct hostapd_iapp *iapp = &cfg->c_iapp;

	if ((cfg->c_flags & HOSTAPD_CFG_F_APME) == 0)
		return;

	TAILQ_FOREACH(apme, &cfg->c_apmes, a_entries) {
		/* Get Host AP's BSSID */
		hostapd_priv_apme_bssid(apme);
		hostapd_log(HOSTAPD_LOG,
		    "%s/%s: attached Host AP interface with BSSID %s",
		    apme->a_iface, iapp->i_iface,
		    etheraddr_string(apme->a_bssid));

		/* Deauthenticate all stations on startup */
		(void)hostapd_apme_deauth(apme);
	}
}

void
hostapd_iapp_term(struct hostapd_config *cfg)
{
	struct hostapd_apme *apme;
	struct hostapd_iapp *iapp = &cfg->c_iapp;

	if ((cfg->c_flags & HOSTAPD_CFG_F_APME) == 0)
		return;

	TAILQ_FOREACH(apme, &cfg->c_apmes, a_entries) {
		hostapd_log(HOSTAPD_LOG_VERBOSE,
		    "%s/%s: detaching from Host AP",
		    apme->a_iface, iapp->i_iface);
	}
}

int
hostapd_iapp_add_notify(struct hostapd_apme *apme, struct hostapd_node *node)
{
	struct hostapd_config *cfg = (struct hostapd_config *)apme->a_cfg;
	struct hostapd_iapp *iapp = &cfg->c_iapp;
	struct sockaddr_in *addr;
	struct {
		struct ieee80211_iapp_frame hdr;
		struct ieee80211_iapp_add_notify add;
	} __packed frame;

	if ((iapp->i_flags & HOSTAPD_IAPP_F_ADD_NOTIFY) == 0)
		return (0);

	/*
	 * Send an ADD.notify message to other access points to notify
	 * about a new association on our Host AP.
	 */
	bzero(&frame, sizeof(frame));

	frame.hdr.i_version = IEEE80211_IAPP_VERSION;
	frame.hdr.i_command = IEEE80211_IAPP_FRAME_ADD_NOTIFY;
	frame.hdr.i_identifier = htons(iapp->i_cnt++);
	frame.hdr.i_length = sizeof(struct ieee80211_iapp_add_notify);

	frame.add.a_length = IEEE80211_ADDR_LEN;
	frame.add.a_seqnum = htons(node->ni_rxseq);
	bcopy(node->ni_macaddr, frame.add.a_macaddr, IEEE80211_ADDR_LEN);

	if (cfg->c_flags & HOSTAPD_CFG_F_BRDCAST)
		addr = &iapp->i_broadcast;
	else
		addr = &iapp->i_multicast;

	if (sendto(iapp->i_udp, &frame, sizeof(frame),
	    0, (struct sockaddr *)addr, sizeof(struct sockaddr_in)) == -1) {
		hostapd_log(HOSTAPD_LOG,
		    "%s: failed to send ADD notification: %s",
		    iapp->i_iface, strerror(errno));
		return (errno);
	}

	hostapd_log(HOSTAPD_LOG, "%s/%s: sent ADD notification for %s",
	    apme->a_iface, iapp->i_iface,
	    etheraddr_string(frame.add.a_macaddr));

	/* Send a LLC XID frame, see llc.c for details */
	return (hostapd_priv_llc_xid(cfg, node));
}

int
hostapd_iapp_radiotap(struct hostapd_apme *apme, u_int8_t *buf,
    const u_int len)
{
	struct hostapd_config *cfg = (struct hostapd_config *)apme->a_cfg;
	struct hostapd_iapp *iapp = &cfg->c_iapp;
	struct sockaddr_in *addr;
	struct ieee80211_iapp_frame hdr;
	struct msghdr msg;
	struct iovec iov[2];

	/*
	 * Send an HOSTAPD.pcap/radiotap message to other access points
	 * with an appended network dump. This is an hostapd extension to
	 * IAPP.
	 */
	bzero(&hdr, sizeof(hdr));

	hdr.i_version = IEEE80211_IAPP_VERSION;
	if (cfg->c_apme_dlt == DLT_IEEE802_11_RADIO)
		hdr.i_command = IEEE80211_IAPP_FRAME_HOSTAPD_RADIOTAP;
	else if (cfg->c_apme_dlt == DLT_IEEE802_11)
		hdr.i_command = IEEE80211_IAPP_FRAME_HOSTAPD_PCAP;
	else
		return (EINVAL);
	hdr.i_identifier = htons(iapp->i_cnt++);
	hdr.i_length = len;

	if (cfg->c_flags & HOSTAPD_CFG_F_BRDCAST)
		addr = &iapp->i_broadcast;
	else
		addr = &iapp->i_multicast;

	iov[0].iov_base = &hdr;
	iov[0].iov_len = sizeof(hdr);
	iov[1].iov_base = buf;
	iov[1].iov_len = len;
	msg.msg_name = (caddr_t)addr;
	msg.msg_namelen = sizeof(struct sockaddr_in);
	msg.msg_iov = iov;
	msg.msg_iovlen = 2;
	msg.msg_control = 0;
	msg.msg_controllen = 0;
	msg.msg_flags = 0;

	if (sendmsg(iapp->i_udp, &msg, 0) == -1) {
		hostapd_log(HOSTAPD_LOG,
		    "%s: failed to send HOSTAPD %s: %s",
		    iapp->i_iface, cfg->c_apme_dlt ==
		    DLT_IEEE802_11_RADIO ? "radiotap" : "pcap",
		    strerror(errno));
		return (errno);
	}

	return (0);
}

void
hostapd_iapp_input(int fd, short sig, void *arg)
{
	struct hostapd_config *cfg = (struct hostapd_config *)arg;
	struct hostapd_iapp *iapp = &cfg->c_iapp;
	struct hostapd_apme *apme;
	struct sockaddr_in addr;
	socklen_t addr_len;
	ssize_t len;
	u_int8_t buf[IAPP_MAXSIZE];
	struct hostapd_node node;
	struct ieee80211_iapp_recv {
		struct ieee80211_iapp_frame hdr;
		union {
			struct ieee80211_iapp_add_notify add;
			u_int8_t buf[1];
		} u;
	} __packed *frame;
	u_int dlt;
	int ret = 0;

	/* Ignore invalid signals */
	if (sig != EV_READ)
		return;

	/*
	 * Listen to possible messages from other IAPP
	 */
	bzero(buf, sizeof(buf));

	if ((len = recvfrom(fd, buf, sizeof(buf), 0,
	    (struct sockaddr*)&addr, &addr_len)) < 1)
		return;

	if (bcmp(&iapp->i_addr.sin_addr, &addr.sin_addr,
	    sizeof(addr.sin_addr)) == 0)
		return;

	frame = (struct ieee80211_iapp_recv*)buf;

	/* Validate the IAPP version */
	if (len < (ssize_t)sizeof(struct ieee80211_iapp_frame) ||
	    frame->hdr.i_version != IEEE80211_IAPP_VERSION ||
	    addr_len < sizeof(struct sockaddr_in))
		return;

	cfg->c_stats.cn_rx_iapp++;

	/*
	 * Process the IAPP frame
	 */
	switch (frame->hdr.i_command) {
	case IEEE80211_IAPP_FRAME_ADD_NOTIFY:
		/* Short frame */
		if (len < (ssize_t)(sizeof(struct ieee80211_iapp_frame) +
		    sizeof(struct ieee80211_iapp_add_notify)))
			return;

		/* Don't support non-48bit MAC addresses, yet */
		if (frame->u.add.a_length != IEEE80211_ADDR_LEN)
			return;

		node.ni_rxseq = frame->u.add.a_seqnum;
		bcopy(frame->u.add.a_macaddr, node.ni_macaddr,
		    IEEE80211_ADDR_LEN);

		/*
		 * Try to remove a node from our Host AP and to free
		 * any allocated resources. Otherwise the received
		 * ADD.notify message will be ignored.
		 */
		if (iapp->i_flags & HOSTAPD_IAPP_F_ADD &&
		    cfg->c_flags & HOSTAPD_CFG_F_APME) {
			TAILQ_FOREACH(apme, &cfg->c_apmes, a_entries) {
				if (iapp->i_flags & HOSTAPD_IAPP_F_ROAMING)
					(void)hostapd_roaming_del(apme, &node);
				if (iapp->i_flags & HOSTAPD_IAPP_F_ADD_NOTIFY &&
				    (ret = hostapd_apme_delnode(apme,
				    &node)) == 0)
					cfg->c_stats.cn_tx_apme++;
			}
		} else
			ret = 0;

		hostapd_log(iapp->i_flags & HOSTAPD_IAPP_F_ADD ?
		    HOSTAPD_LOG : HOSTAPD_LOG_VERBOSE,
		    "%s: %s ADD notification for %s at %s",
		    iapp->i_iface, ret == 0 ?
		    "received" : "ignored",
		    etheraddr_string(node.ni_macaddr),
		    inet_ntoa(addr.sin_addr));
		break;

	case IEEE80211_IAPP_FRAME_HOSTAPD_PCAP:
	case IEEE80211_IAPP_FRAME_HOSTAPD_RADIOTAP:
		if ((iapp->i_flags & HOSTAPD_IAPP_F_RADIOTAP) == 0)
			return;

		/* Short frame */
		if (len <= (ssize_t)sizeof(struct ieee80211_iapp_frame) ||
		    frame->hdr.i_length < sizeof(struct ieee80211_frame))
			return;

		dlt = frame->hdr.i_command ==
		    IEEE80211_IAPP_FRAME_HOSTAPD_PCAP ?
		    DLT_IEEE802_11 : DLT_IEEE802_11_RADIO;

		hostapd_print_ieee80211(dlt, 1, (u_int8_t *)frame->u.buf,
		    len - sizeof(struct ieee80211_iapp_frame));
		return;

	case IEEE80211_IAPP_FRAME_MOVE_NOTIFY:
	case IEEE80211_IAPP_FRAME_MOVE_RESPONSE:
	case IEEE80211_IAPP_FRAME_SEND_SECURITY_BLOCK:
	case IEEE80211_IAPP_FRAME_ACK_SECURITY_BLOCK:
	case IEEE80211_IAPP_FRAME_CACHE_NOTIFY:
	case IEEE80211_IAPP_FRAME_CACHE_RESPONSE:

		/*
		 * XXX TODO
		 */

		hostapd_log(HOSTAPD_LOG_VERBOSE,
		    "%s: received unsupported IAPP message %d",
		    iapp->i_iface, frame->hdr.i_command);
		return;

	default:
		return;
	}
}
@


1.18
log
@fix a few more typos found by spell(1); rectify a double "with" pointed out
by jmc@@ while looking at this diff.

ok jmc@@, reyk@@ (for the hostapd part)
@
text
@d1 1
a1 1
/*	$OpenBSD: iapp.c,v 1.17 2007/02/08 11:15:55 reyk Exp $	*/
a18 1
#include <sys/param.h>
d40 1
@


1.17
log
@carefully check some return values and make lint happy. check for
truncation before feeding strings into the kernel.
@
text
@d1 1
a1 1
/*	$OpenBSD: iapp.c,v 1.16 2006/06/01 22:09:09 reyk Exp $	*/
d98 1
a98 1
	 * Send an ADD.notify message to other accesspoints to notify
d145 1
a145 1
	 * Send an HOSTAPD.pcap/radiotap message to other accesspoints with
@


1.16
log
@don't use the newline character in hostapd_log() calls
@
text
@d1 1
a1 1
/*	$OpenBSD: iapp.c,v 1.15 2006/05/15 20:53:02 reyk Exp $	*/
d63 1
a63 1
		hostapd_apme_deauth(apme);
d265 1
a265 1
					hostapd_roaming_del(apme, &node);
@


1.15
log
@initial implementation of "IP Roaming" in hostapd, see hostapd.conf(5).

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iapp.c,v 1.14 2005/12/18 17:54:12 reyk Exp $	*/
d58 1
a58 1
		    "%s/%s: attached Host AP interface with BSSID %s\n",
d78 1
a78 1
		    "%s/%s: detaching from Host AP\n",
d120 1
a120 1
		    "%s: failed to send ADD notification: %s\n",
d125 1
a125 1
	hostapd_log(HOSTAPD_LOG, "%s/%s: sent ADD notification for %s\n",
d180 1
a180 1
		    "%s: failed to send HOSTAPD %s: %s\n",
d276 1
a276 1
		    "%s: %s ADD notification for %s at %s\n",
d313 1
a313 1
		    "%s: received unsupported IAPP message %d\n",
@


1.14
log
@Update my e-mail address in the copyright statement, no binary changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: iapp.c,v 1.13 2005/12/01 02:03:58 reyk Exp $	*/
d261 2
a262 1
		if (cfg->c_flags & HOSTAPD_CFG_F_APME) {
d264 4
a267 1
				if ((ret = hostapd_apme_delnode(apme,
d274 3
a276 2
		hostapd_log(HOSTAPD_LOG, "%s: %s ADD notification "
		    "for %s at %s\n",
@


1.13
log
@add configuration option to enable/disable specified iapp subtype handling
@
text
@d1 1
a1 1
/*	$OpenBSD: iapp.c,v 1.12 2005/12/01 01:11:30 reyk Exp $	*/
d4 1
a4 1
 * Copyright (c) 2004, 2005 Reyk Floeter <reyk@@vantronix.net>
@


1.12
log
@move iapp configuration in a separate data structure
@
text
@d1 1
a1 1
/*	$OpenBSD: iapp.c,v 1.11 2005/12/01 00:36:41 reyk Exp $	*/
d94 3
d280 3
@


1.11
log
@deauthenticate all stations on startup which will force them to
reassociate cleanly.
@
text
@d1 1
a1 1
/*	$OpenBSD: iapp.c,v 1.10 2005/11/23 20:47:29 reyk Exp $	*/
d49 1
d59 1
a59 1
		    apme->a_iface, cfg->c_iapp_iface,
d71 1
d79 1
a79 1
		    apme->a_iface, cfg->c_iapp_iface);
d87 1
d102 1
a102 1
	frame.hdr.i_identifier = htons(cfg->c_iapp++);
d110 1
a110 1
		addr = &cfg->c_iapp_broadcast;
d112 1
a112 1
		addr = &cfg->c_iapp_multicast;
d114 1
a114 1
	if (sendto(cfg->c_iapp_udp, &frame, sizeof(frame),
d118 1
a118 1
		    cfg->c_iapp_iface, strerror(errno));
d123 1
a123 1
	    apme->a_iface, cfg->c_iapp_iface,
d135 1
d155 1
a155 1
	hdr.i_identifier = htons(cfg->c_iapp++);
d159 1
a159 1
		addr = &cfg->c_iapp_broadcast;
d161 1
a161 1
		addr = &cfg->c_iapp_multicast;
d175 1
a175 1
	if (sendmsg(cfg->c_iapp_udp, &msg, 0) == -1) {
d178 1
a178 1
		    cfg->c_iapp_iface, cfg->c_apme_dlt ==
d191 1
d221 1
a221 1
	if (bcmp(&cfg->c_iapp_addr.sin_addr, &addr.sin_addr,
d269 1
a269 1
		    cfg->c_iapp_iface, ret == 0 ?
d303 1
a303 1
		    cfg->c_iapp_iface, frame->hdr.i_command);
@


1.10
log
@log message consistency
@
text
@d1 1
a1 1
/*	$OpenBSD: iapp.c,v 1.9 2005/11/20 12:02:04 reyk Exp $	*/
d60 3
@


1.9
log
@add support for multiple hostap (wireless) interfaces.

for example, if you run one hostapd with two ath(4) devices. you have
to specify "set hostap interface { ath0, ath1 }" in hostapd.conf(5).

man page bits by jmc@@, tested by others
@
text
@d1 1
a1 1
/*	$OpenBSD: iapp.c,v 1.8 2005/10/07 22:32:52 reyk Exp $	*/
d56 3
a58 3
		hostapd_log(HOSTAPD_LOG_VERBOSE,
		    "%s/%s: attached Host AP interface with BSSID \"%s\"\n",
		    cfg->c_iapp_iface, apme->a_iface,
d74 1
a74 1
		    cfg->c_iapp_iface, apme->a_iface);
@


1.8
log
@move IAPP definitions to separate header file
@
text
@d1 1
a1 1
/*	$OpenBSD: iapp.c,v 1.7 2005/08/17 13:18:33 reyk Exp $	*/
d48 2
d53 8
a60 7
	/* Get Host AP's BSSID */
	hostapd_priv_apme_bssid(cfg);

	hostapd_log(HOSTAPD_LOG_VERBOSE,
	    "%s: attaching to Host AP %s with BSSID \"%s\"\n",
	    cfg->c_iapp_iface, cfg->c_apme_iface,
	    etheraddr_string(cfg->c_apme_bssid));
d66 2
d71 5
a75 3
	/* XXX not yet used but inspired by the APME TERMINATE action */
	hostapd_log(HOSTAPD_LOG_VERBOSE, "%s: detaching from Host AP %s\n",
	    cfg->c_iapp_iface, cfg->c_apme_iface);
d79 1
a79 1
hostapd_iapp_add_notify(struct hostapd_config *cfg, struct hostapd_node *node)
d81 1
d116 3
a118 2
	hostapd_log(HOSTAPD_LOG, "%s: sent ADD notification for %s\n",
	    cfg->c_iapp_iface, etheraddr_string(frame.add.a_macaddr));
d125 1
a125 1
hostapd_iapp_radiotap(struct hostapd_config *cfg, u_int8_t *buf,
d128 1
d184 1
d251 5
a255 2
			if ((ret = hostapd_apme_delnode(cfg, &node)) == 0)
				cfg->c_stats.cn_tx_apme++;
d261 1
a261 1
		    cfg->c_apme_iface, ret == 0 ?
@


1.7
log
@add newlines in hostapd_fatal() calls, fix some typos.
thanks to Brian Poole.
@
text
@d1 1
a1 1
/*	$OpenBSD: iapp.c,v 1.6 2005/07/04 18:48:26 deraadt Exp $	*/
d43 1
@


1.6
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: iapp.c,v 1.5 2005/06/17 19:13:35 reyk Exp $	*/
d125 1
a125 1
	 * with an appaneded network dump. This is an hostapd extension to
@


1.5
log
@first step to implement a proactive wireless monitoring system using
hostapd(8). it's a very simple but powerful approach using highly
flexible and stateless event and action rules for IEEE 802.11 traffic.
you can monitor a wireless network by watching frames with types and
addresses (with support for tables and masks) and you can trigger
actions like writing log messages, sending pcap/radiotap dumps to the
IAPP network, removing nodes from the hostap, resending received
frames and sending contructed 802.11 frames in reply to traffic
received from any rogue nodes.

it's based on some initial work from the c2k5 which has been tested
and improved during the last weeks. some missing documentation for
hostapd.conf(5) will be written as soon as possible.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iapp.c,v 1.4 2005/04/13 21:02:44 moritz Exp $	*/
d126 1
a126 1
	 * IAPP. 
@


1.4
log
@add some missing arguments, where format strings
expect them and a minor comment fix. ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iapp.c,v 1.3 2005/04/13 20:25:31 deraadt Exp $	*/
d24 1
d54 3
a56 3
	    "%s/%s: attaching to Host AP with BSSID \"%s\"\n",
	    cfg->c_apme_iface, cfg->c_iapp_iface,
	    ether_ntoa((struct ether_addr *)cfg->c_apme_bssid));
d66 2
a67 2
	hostapd_log(HOSTAPD_LOG_VERBOSE, "%s/%s: detaching from Host AP\n",
	    cfg->c_apme_iface, cfg->c_iapp_iface);
d88 1
d102 2
a103 3
		    "%s/%s: failed to send ADD notification: %s\n",
		    cfg->c_apme_iface, cfg->c_iapp_iface,
		    strerror(errno));
d107 2
a108 3
	hostapd_log(HOSTAPD_LOG, "%s/%s: sent ADD notification for %s\n",
	    cfg->c_apme_iface, cfg->c_iapp_iface,
	    ether_ntoa((struct ether_addr*)frame.add.a_macaddr));
d114 55
d175 1
d182 1
d185 1
d197 2
a198 2
	if (recvfrom(fd, buf, sizeof(buf), 0,
	    (struct sockaddr*)&addr, &addr_len) < 1)
d201 1
a201 1
	if (memcmp(&cfg->c_iapp_addr.sin_addr, &addr.sin_addr,
d208 2
a209 1
	if (frame->hdr.i_version != IEEE80211_IAPP_VERSION ||
d220 5
d238 4
a241 3
		if (cfg->c_flags & HOSTAPD_CFG_F_APME)
			ret = hostapd_priv_apme_delnode(cfg, &node);
		else
d244 1
a244 1
		hostapd_log(HOSTAPD_LOG, "%s/%s: %s ADD notification "
d246 3
a248 3
		    cfg->c_apme_iface, cfg->c_iapp_iface,
		    ret == 0 ? "received" : "ignored",
		    ether_ntoa((struct ether_addr*)node.ni_macaddr),
d252 15
d279 2
a280 3
		    "%s/%s: received unsupported IAPP message %d\n",
		    cfg->c_apme_iface, cfg->c_iapp_iface,
		    frame->hdr.i_command);
@


1.3
log
@tighten code vertically
@
text
@d1 1
a1 1
/*	$OpenBSD: iapp.c,v 1.2 2005/04/13 18:25:28 henning Exp $	*/
d180 2
a181 1
		    "for %s at %s (%s)\n",
a182 1
		    cfg->c_apme_iface, cfg->c_iapp_iface,
@


1.2
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: iapp.c,v 1.1 2005/04/13 18:12:23 reyk Exp $	*/
a81 1

a136 1

@


1.1
log
@add the initial version of the OpenBSD hostapd daemon

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d48 1
a48 1
	
@

