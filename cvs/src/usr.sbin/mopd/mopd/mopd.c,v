head	1.19;
access;
symbols
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.8
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.4
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.8
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.6
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.2
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.17.0.14
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.12
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.10
	OPENBSD_5_0:1.17.0.8
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.6
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.15.0.16
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.12
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.10
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.8
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.6
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.4
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.2
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.13.0.4
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.2
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.12.0.4
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.16
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.14
	OPENBSD_2_8:1.4.0.12
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.10
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.8
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.6
	OPENBSD_2_5_BASE:1.4
	MOPD254:1.4
	OPENBSD_2_4:1.4.0.4
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	MOPD253:1.1.1.1
	MAJA:1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2015.02.09.23.00.14;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	822YD61EeG0Xl9Na;

1.18
date	2013.07.05.21.02.07;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2009.10.27.23.59.52;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2009.07.11.13.42.32;	author sobrado;	state Exp;
branches;
next	1.15;

1.15
date	2006.04.17.18.55.36;	author maja;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.17.16.23.01;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2005.05.02.02.29.27;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2004.05.12.10.43.44;	author henning;	state Exp;
branches;
next	1.11;

1.11
date	2004.04.15.21.42.53;	author henning;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.12.20.01.11;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2003.12.01.00.56.51;	author avsm;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.21.38.39;	author maja;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.10.21.05.25;	author maja;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.26.09.25.21;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.28.04;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.03.04.20.21.59;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.01.15.23.44.28;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.09.21.19.12.24;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	96.09.21.13.49.17;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.09.21.13.49.17;	author maja;	state Exp;
branches;
next	;


desc
@@


1.19
log
@clean up flags++ instances around getopt()
ok florian
@
text
@/*	$OpenBSD: mopd.c,v 1.18 2013/07/05 21:02:07 miod Exp $ */

/*
 * Copyright (c) 1993-96 Mats O Jansson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * mopd - MOP Dump/Load Daemon
 *
 * Usage:	mopd [-3 | -4] [-adfv] interface
 */

#include "os.h"
#include "common/common.h"
#include "common/mopdef.h"
#include "common/device.h"
#include "common/print.h"
#include "common/pf.h"
#include "common/cmp.h"
#include "common/get.h"
#include "common/dl.h"
#include "common/rc.h"
#include "process.h"

#include "pwd.h"

/*
 * The list of all interfaces that are being listened to. 
 * "selects" on the descriptors in this list.
 */
struct if_info	*iflist;

void		Usage(void);
void		mopProcess(struct if_info *, u_char *);

int	 AllFlag = 0;		/* listen on "all" interfaces */
int	 DebugFlag = 0;		/* print debugging messages   */
int	 ForegroundFlag = 0;	/* run in foreground          */
int	 VersionFlag = 0;	/* print version              */
int	 Not3Flag = 0;		/* Not MOP V3 messages.       */
int	 Not4Flag = 0;		/* Not MOP V4 messages.       */
int	 promisc = 1;		/* Need promisc mode    */

extern char *__progname;

int
main(int argc, char *argv[])
{
	int		 c;
	char		*interface;
	struct passwd	*pw;

	extern char version[];

	while ((c = getopt(argc, argv, "34adfv")) != -1)
		switch (c) {
		case '3':
			Not3Flag = 1;
			break;
		case '4':
			Not4Flag = 1;
			break;
		case 'a':
			AllFlag = 1;
			break;
		case 'd':
			DebugFlag++;
			break;
		case 'f':
			ForegroundFlag = 1;
			break;
		case 'v':
			VersionFlag = 1;
			break;
		default:
			Usage();
			/* NOTREACHED */
		}

	if (VersionFlag) {
		fprintf(stdout,"%s: version %s\n", __progname, version);
		exit(0);
	}

	interface = argv[optind++];

	if ((AllFlag && interface) || (!AllFlag && interface == 0) ||
	    (argc > optind) || (Not3Flag && Not4Flag))
		Usage();

	/* All error reporting is done through syslogs. */
	openlog(__progname, LOG_PID | LOG_CONS, LOG_DAEMON);
	tzset();

	if ((pw = getpwnam("_mopd")) == NULL)
		err(1, "getpwnam");

	if ((!ForegroundFlag) && DebugFlag)
		fprintf(stdout, "%s: not running as daemon, -d given.\n",
		    __progname);

	if ((!ForegroundFlag) && (!DebugFlag))
		if (daemon(0, 0) == -1)
			err(1, NULL);

	syslog(LOG_INFO, "%s %s started.", __progname, version);

	if (AllFlag)
		deviceInitAll();
	else
		deviceInitOne(interface);

	if (chroot(MOP_FILE_PATH) == -1) {
		syslog(LOG_CRIT, "chroot %s: %m", MOP_FILE_PATH);
		exit(1);
	}
	if (chdir("/") == -1) {
		syslog(LOG_CRIT, "chdir(\"/\"): %m");
		exit(1);
	}
	if (setgroups(1, &pw->pw_gid) ||
	    setresgid(pw->pw_gid, pw->pw_gid, pw->pw_gid) ||
	    setresuid(pw->pw_uid, pw->pw_uid, pw->pw_uid)) {
		syslog(LOG_CRIT, "can't drop privileges: %m");
		exit(1);
	}
	endpwent();

	Loop();
	/* NOTREACHED */
}

void
Usage()
{
	fprintf(stderr, "usage: %s [-3 | -4] [-adfv] interface\n",
	    __progname);
	exit(1);
}

/*
 * Process incoming packages.
 */
void
mopProcess(struct if_info *ii, u_char *pkt)
{
	u_char	*dst, *src;
	u_short  ptype;
	int	 idx, trans, len;

	/* We don't known with transport, Guess! */
	trans = mopGetTrans(pkt, 0);

	/* Ok, return if we don't wan't this message */
	if ((trans == TRANS_ETHER) && Not3Flag) return;
	if ((trans == TRANS_8023) && Not4Flag)	return;

	idx = 0;
	mopGetHeader(pkt, &idx, &dst, &src, &ptype, &len, trans);

	/*
	 * Ignore our own transmissions
	 *
	 */	
	if (mopCmpEAddr(ii->eaddr,src) == 0)
		return;

	switch (ptype) {
	case MOP_K_PROTO_DL:
		mopProcessDL(stdout, ii, pkt, &idx, dst, src, trans, len);
		break;
	case MOP_K_PROTO_RC:
		mopProcessRC(stdout, ii, pkt, &idx, dst, src, trans, len);
		break;
	default:
		break;
	}
}
@


1.18
log
@Teach mopd and mopa.out about ELF files, and allow forthcoming VAX ELF boot
blocks to be converted to working mop binaries. From NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: mopd.c,v 1.17 2009/10/27 23:59:52 deraadt Exp $ */
d78 1
a78 1
			Not3Flag++;
d81 1
a81 1
			Not4Flag++;
d84 1
a84 1
			AllFlag++;
d90 1
a90 1
			ForegroundFlag++;
d93 1
a93 1
			VersionFlag++;
@


1.17
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: mopd.c,v 1.16 2009/07/11 13:42:32 sobrado Exp $ */
a52 1
__dead void	Loop(void);
@


1.16
log
@synchronize the synopsis and usage of mopa.out(1); mopchk(1) can handle
more than one filename at a time; add a description for -3 and -4
in mopd(8), and document -v; remove a duplicate flag in mopprobe(1);
use a better style for synopses; sort flags and arguments.

written with help by jmc@@

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mopd.c,v 1.15 2006/04/17 18:55:36 maja Exp $ */
a25 5

#ifndef lint
static const char rcsid[] =
    "$OpenBSD: mopd.c,v 1.15 2006/04/17 18:55:36 maja Exp $";
#endif
@


1.15
log
@Remove 'ipc' in PLT message and replace it with current hostname.
Some more code cleanup and make lint happier. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: mopd.c,v 1.14 2006/04/17 16:23:01 deraadt Exp $ */
d29 1
a29 1
    "$OpenBSD: mopd.c,v 1.14 2006/04/17 16:23:01 deraadt Exp $";
d35 1
a35 2
 * Usage:	mopd -a [ -d -f -v ] [ -3 | -4 ]
 *		mopd [ -d -f -v ] [ -3 | -4 ] interface
d162 1
a162 2
	fprintf(stderr, "usage: %s -a [ -d -f -v ] [ -3 | -4 ]\n", __progname);
	fprintf(stderr, "       %s [ -d -f -v ] [ -3 | -4 ] interface\n",
@


1.14
log
@more cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: mopd.c,v 1.13 2005/05/02 02:29:27 djm Exp $ */
d29 1
a29 1
    "$OpenBSD: mopd.c,v 1.13 2005/05/02 02:29:27 djm Exp $";
d157 1
d177 1
a177 1
	int	 index, trans, len;
d186 2
a187 2
	index = 0;
	mopGetHeader(pkt, &index, &dst, &src, &ptype, &len, trans);
d198 1
a198 1
		mopProcessDL(stdout, ii, pkt, &index, dst, src, trans, len);
d201 1
a201 1
		mopProcessRC(stdout, ii, pkt, &index, dst, src, trans, len);
@


1.13
log
@more setres[ug]id; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mopd.c,v 1.12 2004/05/12 10:43:44 henning Exp $ */
d27 1
a27 1
#ifndef LINT
d29 1
a29 1
    "$OpenBSD: mopd.c,v 1.12 2004/05/12 10:43:44 henning Exp $";
d76 1
a76 1
	int		 c, devnull, f;
a77 1
	pid_t		 pid;
@


1.12
log
@tzset
@
text
@d1 1
a1 1
/*	$OpenBSD: mopd.c,v 1.11 2004/04/15 21:42:53 henning Exp $ */
d29 1
a29 1
    "$OpenBSD: mopd.c,v 1.11 2004/04/15 21:42:53 henning Exp $";
d150 2
a151 2
	    setegid(pw->pw_gid) || setgid(pw->pw_gid) ||
	    seteuid(pw->pw_uid) || setuid(pw->pw_uid)) {
@


1.11
log
@chroot and drop privileges to _mopd:_mopd after initialization.
testing and ok hshoexer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mopd.c,v 1.10 2004/04/12 20:01:11 henning Exp $ */
d29 1
a29 1
    "$OpenBSD: mopd.c,v 1.10 2004/04/12 20:01:11 henning Exp $";
d121 1
@


1.10
log
@~1000 lines worth of ansi, KNF, various cleaning, replacing a homebrown
daemon() equivalent and such things, theo ok
@
text
@d1 1
a1 1
/*	$OpenBSD: mopd.c,v 1.9 2003/12/01 00:56:51 avsm Exp $ */
d29 1
a29 1
    "$OpenBSD: mopd.c,v 1.9 2003/12/01 00:56:51 avsm Exp $";
d51 2
d76 4
a79 3
	int	c, devnull, f;
	char   *interface;
	pid_t	pid;
d122 3
d139 16
@


1.9
log
@-Wall cleanup: trim unused vars, right format strings, constify rcsids,
braces where needed, add missing prototypes.

tested and ok maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mopd.c,v 1.8 2003/06/02 21:38:39 maja Exp $ */
d28 2
a29 1
static const char rcsid[] = "$OpenBSD: mopd.c,v 1.8 2003/06/02 21:38:39 maja Exp $";
d55 1
a55 1
struct if_info *iflist;
d57 13
a69 12
__dead void   Loop(void);
void   Usage(void);
void   mopProcess(struct if_info *, u_char *);

int     AllFlag = 0;		/* listen on "all" interfaces */
int     DebugFlag = 0;		/* print debugging messages   */
int	ForegroundFlag = 0;	/* run in foreground          */
int	VersionFlag = 0;	/* print version              */
int	Not3Flag = 0;		/* Not MOP V3 messages.       */
int	Not4Flag = 0;		/* Not MOP V4 messages.       */
int	promisc = 1;		/* Need promisc mode    */
char    *Program;
d72 1
a72 3
main(argc, argv)
	int     argc;
	char  **argv;
a77 1
	extern int optind;
a79 8
	if ((Program = strrchr(argv[0], '/')))
		Program++;
	else
		Program = argv[0];

	if (*Program == '-')
		Program++;

d82 21
a102 21
			case '3':
				Not3Flag++;
				break;
			case '4':
				Not4Flag++;
				break;
			case 'a':
				AllFlag++;
				break;
			case 'd':
				DebugFlag++;
				break;
			case 'f':
				ForegroundFlag++;
				break;
			case 'v':
				VersionFlag++;
				break;
			default:
				Usage();
				/* NOTREACHED */
d104 1
a104 1
	
d106 1
a106 1
		fprintf(stdout,"%s: version %s\n", Program, version);
d112 2
a113 4
	if ((AllFlag && interface) ||
	    (!AllFlag && interface == 0) ||
	    (argc > optind) ||
	    (Not3Flag && Not4Flag))  
d117 1
a117 1
	openlog(Program, LOG_PID | LOG_CONS, LOG_DAEMON);
d119 3
a121 5
	if ((!ForegroundFlag) && DebugFlag) {
		fprintf(stdout,
			"%s: not running as daemon, -d given.\n",
			Program);
	}
d123 3
a125 1
	if ((!ForegroundFlag) && (!DebugFlag)) {
d127 1
a127 37
		pid = fork();
		if (pid > 0)
			/* Parent exits, leaving child in background. */
			exit(0);
		else
			if (pid == -1) {
				syslog(LOG_ERR, "cannot fork");
				exit(0);
			}

		/* Fade into the background */
		f = open("/dev/tty", O_RDWR);
		if (f >= 0) {
			if (ioctl(f, TIOCNOTTY, 0) < 0) {
				syslog(LOG_ERR, "TIOCNOTTY: %m");
				exit(0);
			}
			(void) close(f);
		}
		
		(void) chdir("/");
#ifdef SETPGRP_NOPARAM
		(void) setpgrp();
#else
		(void) setpgrp(0, getpid());
#endif
		devnull = open("/dev/null", O_RDWR);
		if (devnull >= 0) {
			(void) dup2(devnull, 0);
			(void) dup2(devnull, 1);
			(void) dup2(devnull, 2);
			if (devnull > 2)
				(void) close(devnull);
		}
	}

	syslog(LOG_INFO, "%s %s started.", Program, version);
d130 1
a130 1
 		deviceInitAll();
d140 3
a142 2
	(void) fprintf(stderr, "usage: %s -a [ -d -f -v ] [ -3 | -4 ]\n",Program);
	(void) fprintf(stderr, "       %s [ -d -f -v ] [ -3 | -4 ] interface\n",Program);
d147 1
a147 1
 * Process incomming packages.
d150 1
a150 3
mopProcess(ii, pkt)
	struct if_info *ii;
	u_char *pkt;
a156 1

a159 1

d173 1
a173 1
	switch(ptype) {
@


1.8
log
@remove clause 3 and 4. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: mopd.c,v 1.7 2002/06/10 21:05:25 maja Exp $ */
d28 1
a28 1
static char rcsid[] = "$OpenBSD: mopd.c,v 1.7 2002/06/10 21:05:25 maja Exp $";
d56 1
a56 1
void   Loop(void);
@


1.7
log
@Remove NO__P since __P has been removed. Found by hin@@ -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: mopd.c,v 1.6 2002/05/26 09:25:21 deraadt Exp $ */
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Mats O Jansson.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d28 1
a28 1
static char rcsid[] = "$OpenBSD: mopd.c,v 1.6 2002/05/26 09:25:21 deraadt Exp $";
@


1.6
log
@pid_t cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: mopd.c,v 1.5 2002/02/16 21:28:04 millert Exp $ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: mopd.c,v 1.5 2002/02/16 21:28:04 millert Exp $";
a60 5
#ifdef NO__P
void   Loop	     (/* void */);
void   Usage         (/* void */);
void   mopProcess    (/* struct if_info *, u_char * */);
#else
a63 1
#endif
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: mopd.c,v 1.4 1998/03/04 20:21:59 deraadt Exp $ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: mopd.c,v 1.4 1998/03/04 20:21:59 deraadt Exp $";
d85 1
a85 1
	int	c, pid, devnull, f;
d87 1
@


1.4
log
@Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: mopd.c,v 1.3 1997/01/15 23:44:28 millert Exp $ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: mopd.c,v 1.3 1997/01/15 23:44:28 millert Exp $";
d66 3
a68 3
void   Loop	     __P((void));
void   Usage         __P((void));
void   mopProcess    __P((struct if_info *, u_char *));
@


1.3
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: mopd.c,v 1.2 1996/09/21 19:12:24 maja Exp $ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: mopd.c,v 1.2 1996/09/21 19:12:24 maja Exp $";
d80 1
a80 1
void
@


1.2
log
@Replace $Id with $OpenBSD, 3:rd try. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: mopd.c,v 1.1.1.1 1996/09/21 13:49:17 maja Exp $";
d99 1
a99 1
	while ((c = getopt(argc, argv, "34adfv")) != EOF)
@


1.1
log
@Initial revision
@
text
@d1 2
d33 1
a33 1
static char rcsid[] = "$Id: mopd.c,v 1.14 1996/03/31 19:20:42 moj Exp $";
@


1.1.1.1
log
@Initial import of mopd-2.5.3. -moj
@
text
@@

