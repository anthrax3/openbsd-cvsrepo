head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.30
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.28
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.24
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.26
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.18
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.22
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.20
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.16
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.14
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.10
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.8
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.6
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.4
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.2
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	MOPD254:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	MOPD253:1.1.1.1
	MAJA:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2009.10.27.23.59.52;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2006.11.10.23.02.08;	author maja;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.17.13.17.07;	author maja;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.14.20.37.28;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.01.00.56.51;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.21.38.39;	author maja;	state Exp;
branches;
next	1.2;

1.2
date	96.09.21.19.12.06;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	96.09.21.13.49.16;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.09.21.13.49.16;	author maja;	state Exp;
branches;
next	;


desc
@@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@/*	$OpenBSD: rc.c,v 1.7 2006/11/10 23:02:08 maja Exp $ */

/*
 * Copyright (c) 1993-95 Mats O Jansson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "os.h"
#include "common/get.h"
#include "common/print.h"
#include "common/mopdef.h"

void
mopDumpRC(FILE *fd, u_char *pkt, int trans)
{
	int	i, idx = 0;
	long	tmpl;
	u_char	tmpc, code, control;
	u_short	len, tmps, moplen;

	len = mopGetLength(pkt, trans);

	switch (trans) {
	case TRANS_8023:
		idx = 22;
		moplen = len - 8;
		break;
	default:
		idx = 16;
		moplen = len;
	}
	code = mopGetChar(pkt, &idx);

	switch (code) {
	case MOP_K_CODE_RID:

		tmpc = mopGetChar(pkt, &idx);
		fprintf(fd, "Reserved     :   %02x\n", tmpc);

		tmps = mopGetShort(pkt, &idx);
		fprintf(fd, "Receipt Nbr  : %04x\n", tmps);

		break;
	case MOP_K_CODE_BOT:

		if ((moplen == 5)) {
			tmps = mopGetShort(pkt, &idx);
			fprintf(fd, "Verification : %04x\n", tmps);
		} else {

			tmpl = mopGetLong(pkt, &idx);
			fprintf(fd, "Verification : %08lx\n", tmpl);

			tmpc = mopGetChar(pkt, &idx);	/* Processor */
			fprintf(fd, "Processor    :   %02x ", tmpc);
			mopPrintBPTY(fd, tmpc);  fprintf(fd, "\n");

			control = mopGetChar(pkt, &idx);	/* Control */
			fprintf(fd, "Control    :   %02x ", control);
			if ((control & (1<<MOP_K_BOT_CNTL_SERVER)))
				fprintf(fd, "Bootserver Requesting system ");
			else
				fprintf(fd, "Bootserver System default ");
			if ((control & (1<<MOP_K_BOT_CNTL_DEVICE)))
				fprintf(fd, "Bootdevice Specified device");
			else
				fprintf(fd, "Bootdevice System default");
			fprintf(fd, "\n");

			if ((control & (1<<MOP_K_BOT_CNTL_DEVICE))) {
				tmpc = mopGetChar(pkt, &idx);/* Device ID */
				fprintf(fd, "Device ID    :   %02x '", tmpc);
				for (i = 0; i < ((int) tmpc); i++)
					fprintf(fd, "%c",
					    mopGetChar(pkt, &idx));
				fprintf(fd, "'\n");
			}

			tmpc = mopGetChar(pkt, &idx);      /* Software ID */
			fprintf(fd, "Software ID  :   %02x ", tmpc);
			if ((tmpc == 0))
				fprintf(fd, "No software id");
			if ((tmpc == 254)) {
				fprintf(fd, "Maintenance system");
				tmpc = 0;
			}
			if ((tmpc == 255)) {
				fprintf(fd, "Standard operating system");
				tmpc = 0;
			}
			if ((tmpc > 0)) {
				fprintf(fd, "'");
				for (i = 0; i < ((int) tmpc); i++)
					fprintf(fd, "%c",
					    mopGetChar(pkt, &idx));
				fprintf(fd, "'");
			}
			fprintf(fd, "'\n");

		}
		break;
	case MOP_K_CODE_SID:

		tmpc = mopGetChar(pkt, &idx);		/* Reserved */
		fprintf(fd, "Reserved     :   %02x\n", tmpc);

		tmps = mopGetShort(pkt, &idx);		/* Receipt # */
		fprintf(fd, "Receipt Nbr  : %04x\n", tmpc);

		mopPrintInfo(fd, pkt, &idx, moplen, code, trans);

		break;
	case MOP_K_CODE_RQC:

		tmps = mopGetShort(pkt, &idx);
		fprintf(fd, "Receipt Nbr  : %04x\n", tmps);

		break;
	case MOP_K_CODE_CNT:

		tmps = mopGetShort(pkt, &idx);
		fprintf(fd, "Receipt Nbr  : %04x %d\n", tmps, tmps);

		tmps = mopGetShort(pkt, &idx);
		fprintf(fd, "Last Zeroed  : %04x %d\n", tmps, tmps);

		tmpl = mopGetLong(pkt, &idx);
		fprintf(fd, "Bytes rec    : %08lx %ld\n", tmpl, tmpl);

		tmpl = mopGetLong(pkt, &idx);
		fprintf(fd, "Bytes snd    : %08lx %ld\n", tmpl, tmpl);

		tmpl = mopGetLong(pkt, &idx);
		fprintf(fd, "Frames rec   : %08lx %ld\n", tmpl, tmpl);

		tmpl = mopGetLong(pkt, &idx);
		fprintf(fd, "Frames snd   : %08lx %ld\n", tmpl, tmpl);

		tmpl = mopGetLong(pkt, &idx);
		fprintf(fd, "Mcst Bytes re: %08lx %ld\n", tmpl, tmpl);

		tmpl = mopGetLong(pkt, &idx);
		fprintf(fd, "Mcst Frame re: %08lx %ld\n", tmpl, tmpl);

		tmpl = mopGetLong(pkt, &idx);
		fprintf(fd, "Frame snd, def: %08lx %ld\n", tmpl, tmpl);

		tmpl = mopGetLong(pkt, &idx);
		fprintf(fd, "Frame snd, col: %08lx %ld\n", tmpl, tmpl);

		tmpl = mopGetLong(pkt, &idx);
		fprintf(fd, "Frame snd, mcl: %08lx %ld\n", tmpl, tmpl);

		tmps = mopGetShort(pkt, &idx);
		fprintf(fd, "Snd failure  : %04x %d\n", tmps, tmps);

		tmps = mopGetShort(pkt, &idx);
		fprintf(fd, "Snd fail reas: %04x ", tmps);
		if (tmps & 1)
			fprintf(fd, "Excess col  ");
		if (tmps & 2)
			fprintf(fd, "Carrier chk fail  ");
		if (tmps & 4)
			fprintf(fd, "Short circ  ");
		if (tmps & 8)
			fprintf(fd, "Open circ  ");
		if (tmps & 16)
			fprintf(fd, "Frm to long  ");
		if (tmps & 32)
			fprintf(fd, "Rem fail to defer  ");
		fprintf(fd, "\n");

		tmps = mopGetShort(pkt, &idx);
		fprintf(fd, "Rec failure  : %04x %d\n", tmps, tmps);

		tmps = mopGetShort(pkt, &idx);
		fprintf(fd, "Rec fail reas: %04x ", tmps);
		if (tmps & 1)
			fprintf(fd, "Block chk err  ");
		if (tmps & 2)
			fprintf(fd, "Framing err  ");
		if (tmps & 4)
			fprintf(fd, "Frm to long  ");
		fprintf(fd, "\n");

		tmps = mopGetShort(pkt, &idx);
		fprintf(fd, "Unrec frm dst: %04x %d\n", tmps, tmps);

		tmps = mopGetShort(pkt, &idx);
		fprintf(fd, "Data overrun : %04x %d\n", tmps, tmps);

		tmps = mopGetShort(pkt, &idx);
		fprintf(fd, "Sys Buf Unava: %04x %d\n", tmps, tmps);

		tmps = mopGetShort(pkt, &idx);
		fprintf(fd, "Usr Buf Unava: %04x %d\n", tmps, tmps);

		break;
	case MOP_K_CODE_RVC:

		tmpl = mopGetLong(pkt, &idx);
		fprintf(fd, "Verification : %08lx\n", tmpl);

		break;
	case MOP_K_CODE_RLC:

		/* Empty message */

		break;
	case MOP_K_CODE_CCP:
		tmpc = mopGetChar(pkt, &idx);
		fprintf(fd, "Control Flags: %02x Message %d ", tmpc, tmpc & 1);
		if (tmpc & 2)
			fprintf(fd, "Break");
		fprintf(fd, "\n");

		if (moplen > 2) {
			for (i = 0; i < (moplen - 2); i++) {
				if ((i % 16) == 0) {
					if ((i / 16) == 0)
						fprintf(fd,
						    "Image Data   : %04x ",
						    moplen-2);
					else
						fprintf(fd,
						    "                    ");
				}
				fprintf(fd, "%02x ", mopGetChar(pkt, &idx));
				if ((i % 16) == 15)
					fprintf(fd, "\n");
			}
			if ((i % 16) != 15)
				fprintf(fd, "\n");
		}

		break;
	case MOP_K_CODE_CRA:

		tmpc = mopGetChar(pkt, &idx);
		fprintf(fd, "Control Flags: %02x Message %d ", tmpc, tmpc & 1);
		if (tmpc & 2)
			fprintf(fd, "Cmd Data Lost ");
		if (tmpc & 4)
			fprintf(fd, "Resp Data Lost ");
		fprintf(fd, "\n");

		if (moplen > 2) {
			for (i = 0; i < (moplen - 2); i++) {
				if ((i % 16) == 0) {
					if ((i / 16) == 0)
						fprintf(fd,
						    "Image Data   : %04x ",
						    moplen-2);
					else
						fprintf(fd,
						    "                    ");
				}
				fprintf(fd, "%02x ", mopGetChar(pkt, &idx));
				if ((i % 16) == 15)
					fprintf(fd, "\n");
			}
			if ((i % 16) != 15)
				fprintf(fd, "\n");
		}

		break;
	default:
		break;
	}
}
@


1.7
log
@Check the correct bits in the control byte.
Found by Alexey Dobriyan (adobriyan at gmail dot com) -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: rc.c,v 1.6 2006/04/17 13:17:07 maja Exp $ */
a25 5

#ifndef lint
static const char rcsid[] =
    "$OpenBSD: rc.c,v 1.6 2006/04/17 13:17:07 maja Exp $";
#endif
@


1.6
log
@Make the code lint friendly. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: rc.c,v 1.5 2004/04/14 20:37:28 henning Exp $ */
d29 1
a29 1
    "$OpenBSD: rc.c,v 1.5 2004/04/14 20:37:28 henning Exp $";
d84 1
a84 1
			if ((control & (1>>MOP_K_BOT_CNTL_SERVER)))
d88 1
a88 1
			if ((control & (1>>MOP_K_BOT_CNTL_DEVICE)))
d94 1
a94 1
			if ((control & (1>>MOP_K_BOT_CNTL_DEVICE))) {
@


1.5
log
@4000 lines worth of cleanup, KNF, Knall&Rauch elemination and such
tested by hshoexer, "don't wait for me" miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rc.c,v 1.4 2003/12/01 00:56:51 avsm Exp $ */
d27 1
a27 1
#ifndef LINT
d29 1
a29 1
    "$OpenBSD: rc.c,v 1.4 2003/12/01 00:56:51 avsm Exp $";
d40 1
a40 1
	int	i, index = 0;
d49 1
a49 1
		index = 22;
d53 1
a53 1
		index = 16;
d56 1
a56 1
	code = mopGetChar(pkt, &index);
d61 1
a61 1
		tmpc = mopGetChar(pkt, &index);
d64 1
a64 1
		tmps = mopGetShort(pkt, &index);
d71 1
a71 1
			tmps = mopGetShort(pkt, &index);
d75 1
a75 1
			tmpl = mopGetLong(pkt, &index);
d78 1
a78 1
			tmpc = mopGetChar(pkt, &index);	/* Processor */
d82 1
a82 1
			control = mopGetChar(pkt, &index);	/* Control */
d95 1
a95 1
				tmpc = mopGetChar(pkt, &index);/* Device ID */
d99 1
a99 1
					    mopGetChar(pkt, &index));
d103 1
a103 1
			tmpc = mopGetChar(pkt, &index);      /* Software ID */
d119 1
a119 1
					    mopGetChar(pkt, &index));
d128 1
a128 1
		tmpc = mopGetChar(pkt, &index);		/* Reserved */
d131 1
a131 1
		tmps = mopGetShort(pkt, &index);		/* Receipt # */
d134 1
a134 1
		mopPrintInfo(fd, pkt, &index, moplen, code, trans);
d139 1
a139 1
		tmps = mopGetShort(pkt, &index);
d145 1
a145 1
		tmps = mopGetShort(pkt, &index);
d148 1
a148 1
		tmps = mopGetShort(pkt, &index);
d151 1
a151 1
		tmpl = mopGetLong(pkt, &index);
d154 1
a154 1
		tmpl = mopGetLong(pkt, &index);
d157 1
a157 1
		tmpl = mopGetLong(pkt, &index);
d160 1
a160 1
		tmpl = mopGetLong(pkt, &index);
d163 1
a163 1
		tmpl = mopGetLong(pkt, &index);
d166 1
a166 1
		tmpl = mopGetLong(pkt, &index);
d169 1
a169 1
		tmpl = mopGetLong(pkt, &index);
d172 1
a172 1
		tmpl = mopGetLong(pkt, &index);
d175 1
a175 1
		tmpl = mopGetLong(pkt, &index);
d178 1
a178 1
		tmps = mopGetShort(pkt, &index);
d181 1
a181 1
		tmps = mopGetShort(pkt, &index);
d197 1
a197 1
		tmps = mopGetShort(pkt, &index);
d200 1
a200 1
		tmps = mopGetShort(pkt, &index);
d210 1
a210 1
		tmps = mopGetShort(pkt, &index);
d213 1
a213 1
		tmps = mopGetShort(pkt, &index);
d216 1
a216 1
		tmps = mopGetShort(pkt, &index);
d219 1
a219 1
		tmps = mopGetShort(pkt, &index);
d225 1
a225 1
		tmpl = mopGetLong(pkt, &index);
d235 1
a235 1
		tmpc = mopGetChar(pkt, &index);
a241 1
#ifndef SHORT_PRINT
d252 1
a252 1
				fprintf(fd, "%02x ", mopGetChar(pkt, &index));
a257 3
#else
			index = index + moplen - 2;
#endif
d263 1
a263 1
		tmpc = mopGetChar(pkt, &index);
a271 1
#ifndef SHORT_PRINT
d282 1
a282 1
				fprintf(fd, "%02x ", mopGetChar(pkt, &index));
a287 3
#else
			index = index + moplen - 2;
#endif
a294 1

@


1.4
log
@-Wall cleanup: trim unused vars, right format strings, constify rcsids,
braces where needed, add missing prototypes.

tested and ok maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rc.c,v 1.3 2003/06/02 21:38:39 maja Exp $ */
d28 2
a29 1
static const char rcsid[] = "$OpenBSD: rc.c,v 1.3 2003/06/02 21:38:39 maja Exp $";
d38 1
a38 4
mopDumpRC(fd, pkt, trans)
	FILE	*fd;
	u_char 	*pkt;
	int	 trans;
d40 1
a40 1
	int	i,index = 0;
d42 2
a43 2
	u_char	tmpc,code,control;
	u_short	len,tmps,moplen;
d56 2
a57 2
	code = mopGetChar(pkt,&index);
	
d60 7
a66 7
	  	
		tmpc = mopGetChar(pkt,&index);
		(void)fprintf(fd,"Reserved     :   %02x\n",tmpc);
		
		tmps = mopGetShort(pkt,&index);
		(void)fprintf(fd,"Receipt Nbr  : %04x\n",tmps);
		
d69 1
a69 1
		
d71 2
a72 2
			tmps = mopGetShort(pkt,&index);
			(void)fprintf(fd,"Verification : %04x\n",tmps);
d74 20
a93 17
			
			tmpl = mopGetLong(pkt,&index);
			(void)fprintf(fd,"Verification : %08lx\n",tmpl);

			tmpc = mopGetChar(pkt,&index);	/* Processor */
			(void)fprintf(fd,"Processor    :   %02x ",tmpc);
			mopPrintBPTY(fd, tmpc);  (void)fprintf(fd, "\n");
			
			control = mopGetChar(pkt,&index);	/* Control */
			(void)fprintf(fd,"Control    :   %02x ",control);
			if ((control & (1>>MOP_K_BOT_CNTL_SERVER))) {
				(void)fprintf(fd,
					      "Bootserver Requesting system ");
			} else {
				(void)fprintf(fd,
					      "Bootserver System default ");
			}
d95 6
a100 23
				(void)fprintf(fd,
					      "Bootdevice Specified device");
			} else {
				(void)fprintf(fd,
					      "Bootdevice System default");
			}
			(void)fprintf(fd,"\n");
			
			if ((control & (1>>MOP_K_BOT_CNTL_DEVICE))) {
				tmpc = mopGetChar(pkt,&index);/* Device ID */
				(void)fprintf(fd,
					      "Device ID    :   %02x '",tmpc);
				for (i = 0; i < ((int) tmpc); i++) {
				  (void)fprintf(fd,"%c",
						mopGetChar(pkt,&index));
				}
				(void)fprintf(fd,"'\n");
			}
			
			tmpc = mopGetChar(pkt,&index);      /* Software ID */
			(void)fprintf(fd,"Software ID  :   %02x ",tmpc);
			if ((tmpc == 0)) {
				(void)fprintf(fd,"No software id");
d102 5
d108 1
a108 1
				(void)fprintf(fd,"Maintenance system");
d112 1
a112 1
				(void)fprintf(fd,"Standard operating system");
d116 5
a120 6
				(void)fprintf(fd,"'");
				for (i = 0; i < ((int) tmpc); i++) {
					(void)fprintf(fd,"%c",
						     mopGetChar(pkt,&index));
				}
				(void)fprintf(fd,"'");
d122 2
a123 2
			(void)fprintf(fd,"'\n");
			
d127 7
a133 7
		
		tmpc = mopGetChar(pkt,&index);		/* Reserved */
		(void)fprintf(fd, "Reserved     :   %02x\n",tmpc);
		
		tmps = mopGetShort(pkt,&index);		/* Receipt # */
		(void)fprintf(fd, "Receipt Nbr  : %04x\n",tmpc);
		
d135 1
a135 1
		
d138 4
a141 4
		
		tmps = mopGetShort(pkt,&index);
		(void)fprintf(fd,"Receipt Nbr  : %04x\n",tmps);
		
d144 78
a221 69
		
		tmps = mopGetShort(pkt,&index);
		(void)fprintf(fd,"Receipt Nbr  : %04x %d\n",tmps,tmps);
		
		tmps = mopGetShort(pkt,&index);
		(void)fprintf(fd,"Last Zeroed  : %04x %d\n",tmps,tmps);
		
		tmpl = mopGetLong(pkt,&index);
		(void)fprintf(fd,"Bytes rec    : %08lx %ld\n",tmpl,tmpl);
		
		tmpl = mopGetLong(pkt,&index);
		(void)fprintf(fd,"Bytes snd    : %08lx %ld\n",tmpl,tmpl);
		
		tmpl = mopGetLong(pkt,&index);
		(void)fprintf(fd,"Frames rec   : %08lx %ld\n",tmpl,tmpl);
		
		tmpl = mopGetLong(pkt,&index);
		(void)fprintf(fd,"Frames snd   : %08lx %ld\n",tmpl,tmpl);
		
		tmpl = mopGetLong(pkt,&index);
		(void)fprintf(fd,"Mcst Bytes re: %08lx %ld\n",tmpl,tmpl);
		
		tmpl = mopGetLong(pkt,&index);
		(void)fprintf(fd,"Mcst Frame re: %08lx %ld\n",tmpl,tmpl);
		
		tmpl = mopGetLong(pkt,&index);
		(void)fprintf(fd,"Frame snd,def: %08lx %ld\n",tmpl,tmpl);
		
		tmpl = mopGetLong(pkt,&index);
		(void)fprintf(fd,"Frame snd,col: %08lx %ld\n",tmpl,tmpl);
		
		tmpl = mopGetLong(pkt,&index);
		(void)fprintf(fd,"Frame snd,mcl: %08lx %ld\n",tmpl,tmpl);
		
		tmps = mopGetShort(pkt,&index);
		(void)fprintf(fd,"Snd failure  : %04x %d\n",tmps,tmps);
		
		tmps = mopGetShort(pkt,&index);
		(void)fprintf(fd,"Snd fail reas: %04x ",tmps);
		if ((tmps &  1)) (void)fprintf(fd,"Excess col  ");
		if ((tmps &  2)) (void)fprintf(fd,"Carrier chk fail  ");
		if ((tmps &  4)) (void)fprintf(fd,"Short circ  ");
		if ((tmps &  8)) (void)fprintf(fd,"Open circ  ");
		if ((tmps & 16)) (void)fprintf(fd,"Frm to long  ");
		if ((tmps & 32)) (void)fprintf(fd,"Rem fail to defer  ");
		(void)fprintf(fd,"\n");
		
		tmps = mopGetShort(pkt,&index);
		(void)fprintf(fd,"Rec failure  : %04x %d\n",tmps,tmps);
		
		tmps = mopGetShort(pkt,&index);
		(void)fprintf(fd,"Rec fail reas: %04x ",tmps);
		if ((tmps &  1)) (void)fprintf(fd,"Block chk err  ");
		if ((tmps &  2)) (void)fprintf(fd,"Framing err  ");
		if ((tmps &  4)) (void)fprintf(fd,"Frm to long  ");
		(void)fprintf(fd,"\n");
		
		tmps = mopGetShort(pkt,&index);
		(void)fprintf(fd,"Unrec frm dst: %04x %d\n",tmps,tmps);
		
		tmps = mopGetShort(pkt,&index);
		(void)fprintf(fd,"Data overrun : %04x %d\n",tmps,tmps);
		
		tmps = mopGetShort(pkt,&index);
		(void)fprintf(fd,"Sys Buf Unava: %04x %d\n",tmps,tmps);
		
		tmps = mopGetShort(pkt,&index);
		(void)fprintf(fd,"Usr Buf Unava: %04x %d\n",tmps,tmps);
		
d224 4
a227 4
		
		tmpl = mopGetLong(pkt,&index);
		(void)fprintf(fd,"Verification : %08lx\n",tmpl);
		
d232 1
a232 1
	  
d235 6
a240 8
		
		tmpc = mopGetChar(pkt,&index);
		(void)fprintf(fd,
			      "Control Flags: %02x Message %d ",tmpc,tmpc & 1);
		if ((tmpc & 2))
			(void)fprintf(fd,"Break");
		(void)fprintf(fd,"\n");
		
d244 8
a251 9
		  		if ((i % 16) == 0) {
					if ((i / 16) == 0) {
						(void)fprintf(fd,
							"Image Data   : %04x ",
							      moplen-2);
					} else {
						(void)fprintf(fd,
						       "                    ");
				        }
d253 1
a253 2
				(void)fprintf(fd,"%02x ",
					      mopGetChar(pkt,&index));
d255 1
a255 1
					(void)fprintf(fd,"\n");
d258 1
a258 1
				(void)fprintf(fd,"\n");
d263 1
a263 1
		
d266 9
a274 10
		
		tmpc = mopGetChar(pkt,&index);
		(void)fprintf(fd,
			      "Control Flags: %02x Message %d ",tmpc,tmpc & 1);
		if ((tmpc & 2))
			(void)fprintf(fd,"Cmd Data Lost ");
		if ((tmpc & 4))
			(void)fprintf(fd,"Resp Data Lost ");
		(void)fprintf(fd,"\n");
		
d279 7
a285 8
					if ((i / 16) == 0) {
						(void)fprintf(fd,
							"Image Data   : %04x ",
							      moplen-2);
					} else {
						(void)fprintf(fd,
						       "                    ");
					}
d287 1
a287 2
				(void)fprintf(fd,"%02x ",
					      mopGetChar(pkt,&index));
d289 1
a289 1
					(void)fprintf(fd,"\n");
d292 1
a292 1
				(void)fprintf(fd,"\n");
d297 1
a297 1
		
@


1.3
log
@remove clause 3 and 4. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: rc.c,v 1.2 1996/09/21 19:12:06 maja Exp $ */
d28 1
a28 1
static char rcsid[] = "$OpenBSD: rc.c,v 1.2 1996/09/21 19:12:06 maja Exp $";
d78 1
a78 1
			(void)fprintf(fd,"Verification : %08x\n",tmpl);
d164 1
a164 1
		(void)fprintf(fd,"Bytes rec    : %08x %d\n",tmpl,tmpl);
d167 1
a167 1
		(void)fprintf(fd,"Bytes snd    : %08x %d\n",tmpl,tmpl);
d170 1
a170 1
		(void)fprintf(fd,"Frames rec   : %08x %d\n",tmpl,tmpl);
d173 1
a173 1
		(void)fprintf(fd,"Frames snd   : %08x %d\n",tmpl,tmpl);
d176 1
a176 1
		(void)fprintf(fd,"Mcst Bytes re: %08x %d\n",tmpl,tmpl);
d179 1
a179 1
		(void)fprintf(fd,"Mcst Frame re: %08x %d\n",tmpl,tmpl);
d182 1
a182 1
		(void)fprintf(fd,"Frame snd,def: %08x %d\n",tmpl,tmpl);
d185 1
a185 1
		(void)fprintf(fd,"Frame snd,col: %08x %d\n",tmpl,tmpl);
d188 1
a188 1
		(void)fprintf(fd,"Frame snd,mcl: %08x %d\n",tmpl,tmpl);
d229 1
a229 1
		(void)fprintf(fd,"Verification : %08x\n",tmpl);
@


1.2
log
@Replace $Id with $OpenBSD, 3:rd try. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Mats O Jansson.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d28 1
a28 1
static char rcsid[] = "$OpenBSD: rc.c,v 1.1.1.1 1996/09/21 13:49:16 maja Exp $";
@


1.1
log
@Initial revision
@
text
@d1 2
d33 1
a33 1
static char rcsid[] = "$Id: rc.c,v 1.8 1995/10/13 19:25:34 moj Exp $";
@


1.1.1.1
log
@Initial import of mopd-2.5.3. -moj
@
text
@@
