head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.2
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.8.0.32
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.28
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.24
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.26
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.18
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.22
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.20
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.16
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.16
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.12
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.6.0.8
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.6
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	MOPD254:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	MOPD253:1.1.1.1
	MAJA:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2017.07.29.07.18.03;	author florian;	state Exp;
branches;
next	1.8;
commitid	B2nY1wH8vA5b25nk;

1.8
date	2009.10.27.23.59.52;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.17.13.17.07;	author maja;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.14.20.37.28;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.01.00.56.51;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.21.38.39;	author maja;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.16.44.25;	author mpech;	state Exp;
branches;
next	1.2;

1.2
date	96.09.21.19.12.01;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	96.09.21.13.49.16;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.09.21.13.49.16;	author maja;	state Exp;
branches;
next	;


desc
@@


1.9
log
@change if ((a == b)) to if (a == b); silences noisy on-by-default
"equality comparison with extraneous parentheses
[-Wparentheses-equality]" clang warning.
OK deraadt, kettenis
@
text
@/*	$OpenBSD: put.c,v 1.8 2009/10/27 23:59:52 deraadt Exp $ */

/*
 * Copyright (c) 1993-2006 Mats O Jansson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <stddef.h>
#include <sys/types.h>
#include <time.h>
#include "common/mopdef.h"

void
mopPutChar(u_char *pkt, int *idx, u_char value)
{
	pkt[*idx] = value;
	(*idx)++;
}

void
mopPutShort(u_char *pkt, int *idx, u_short value)
{
	pkt[*idx] = value % 256;
	pkt[*idx+1] = value / 256;
	*idx += 2;
}

void
mopPutNShort(u_char *pkt, int *idx, u_short value)
{
	pkt[*idx] = value / 256;
	pkt[*idx+1] = value % 256;
	*idx += 2;
}

void
mopPutLong(u_char *pkt, int *idx, u_long value)
{
	int i;

	for (i = 0; i < 4; i++) {
		pkt[*idx+i] = (u_char)(value % 256);
		value /= 256;
	}
	*idx += 4;
}

void
mopPutMulti(u_char *pkt, int *idx, u_char *value, int size)
{
	int i;

	for (i = 0; i < size; i++)
		pkt[*idx+i] = value[i];
	*idx += size;
}

void
mopPutTime(u_char *pkt, int *idx, time_t value)
{
	time_t		 tnow;
	struct tm	*timenow;

	if (value == 0)
		tnow = time(NULL);
	else
		tnow = value;

	timenow = localtime(&tnow);

	mopPutChar(pkt, idx, 10);
	mopPutChar(pkt, idx, (timenow->tm_year / 100) + 19);
	mopPutChar(pkt, idx, (timenow->tm_year % 100));
	mopPutChar(pkt, idx, (timenow->tm_mon + 1));
	mopPutChar(pkt, idx, (timenow->tm_mday));
	mopPutChar(pkt, idx, (timenow->tm_hour));
	mopPutChar(pkt, idx, (timenow->tm_min));
	mopPutChar(pkt, idx, (timenow->tm_sec));
	mopPutChar(pkt, idx, 0x00);
	mopPutChar(pkt, idx, 0x00);
	mopPutChar(pkt, idx, 0x00);
}

void
mopPutHeader(u_char *pkt, int *idx, u_char *dst, u_char *src, u_short proto,
    int trans)
{
	mopPutMulti(pkt, idx, dst, 6);
	mopPutMulti(pkt, idx, src, 6);
	if (trans == TRANS_8023) {
		mopPutShort(pkt, idx, 0);
		mopPutChar(pkt, idx, MOP_K_PROTO_802_DSAP);
		mopPutChar(pkt, idx, MOP_K_PROTO_802_SSAP);
		mopPutChar(pkt, idx, MOP_K_PROTO_802_CNTL);
		mopPutChar(pkt, idx, 0x08);
		mopPutChar(pkt, idx, 0x00);
		mopPutChar(pkt, idx, 0x2b);
	}
#if !defined(__FreeBSD__)
	mopPutNShort(pkt, idx, proto);
#else
	if (trans == TRANS_8023) {
		mopPutNShort(pkt, idx, proto);
	} else {
		mopPutShort(pkt, idx, proto);
	}
#endif
	if (trans == TRANS_ETHER)
		mopPutShort(pkt, idx, 0);

}

void
mopPutLength(u_char *pkt, int trans, u_short len)
{
	int	 idx;

	switch (trans) {
	case TRANS_ETHER:
		idx = 14;
		mopPutShort(pkt, &idx, len-16);
		break;
	case TRANS_8023:
		idx = 12;
#if !defined(__FreeBSD__)
		mopPutNShort(pkt, &idx, len-14);
#else
		mopPutShort(pkt, &idx, len-14);
#endif
		break;
	}
}
@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: put.c,v 1.7 2006/04/17 13:17:07 maja Exp $ */
d83 1
a83 1
	if ((value == 0))
@


1.7
log
@Make the code lint friendly. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: put.c,v 1.6 2004/04/14 20:37:28 henning Exp $ */
a25 5

#ifndef lint
static const char rcsid[] =
    "$OpenBSD: put.c,v 1.6 2004/04/14 20:37:28 henning Exp $";
#endif
@


1.6
log
@4000 lines worth of cleanup, KNF, Knall&Rauch elemination and such
tested by hshoexer, "don't wait for me" miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: put.c,v 1.5 2003/12/01 00:56:51 avsm Exp $ */
d4 1
a4 1
 * Copyright (c) 1993-95 Mats O Jansson.  All rights reserved.
d27 1
a27 1
#ifndef LINT
d29 1
a29 1
    "$OpenBSD: put.c,v 1.5 2003/12/01 00:56:51 avsm Exp $";
d38 1
a38 1
mopPutChar(u_char *pkt, int *index, u_char value)
d40 2
a41 2
	pkt[*index] = value;
	(*index)++;
d45 1
a45 1
mopPutShort(u_char *pkt, int *index, u_short value)
d47 4
a50 1
	int i;
d52 6
a57 5
	for (i = 0; i < 2; i++) {
		pkt[*index + i] = value % 256;
		value /= 256;
	}
	*index += 2;
d61 1
a61 1
mopPutLong(u_char *pkt, int *index, u_long value)
d66 1
a66 1
		pkt[*index + i] = value % 256;
d69 1
a69 1
	*index += 4;
d73 1
a73 1
mopPutMulti(u_char *pkt, int *index, u_char *value, int size)
d78 2
a79 2
		pkt[*index + i] = value[i];
	*index += size;
d83 1
a83 1
mopPutTime(u_char *pkt, int *index, time_t value)
d95 11
a105 11
	mopPutChar(pkt, index, 10);
	mopPutChar(pkt, index, (timenow->tm_year / 100) + 19);
	mopPutChar(pkt, index, (timenow->tm_year % 100));
	mopPutChar(pkt, index, (timenow->tm_mon + 1));
	mopPutChar(pkt, index, (timenow->tm_mday));
	mopPutChar(pkt, index, (timenow->tm_hour));
	mopPutChar(pkt, index, (timenow->tm_min));
	mopPutChar(pkt, index, (timenow->tm_sec));
	mopPutChar(pkt, index, 0x00);
	mopPutChar(pkt, index, 0x00);
	mopPutChar(pkt, index, 0x00);
d109 1
a109 1
mopPutHeader(u_char *pkt, int *index, char dst[], char src[], u_short proto,
d112 2
a113 2
	mopPutMulti(pkt, index, dst, 6);
	mopPutMulti(pkt, index, src, 6);
d115 7
a121 7
		mopPutShort(pkt, index, 0);
		mopPutChar(pkt, index, MOP_K_PROTO_802_DSAP);
		mopPutChar(pkt, index, MOP_K_PROTO_802_SSAP);
		mopPutChar(pkt, index, MOP_K_PROTO_802_CNTL);
		mopPutChar(pkt, index, 0x08);
		mopPutChar(pkt, index, 0x00);
		mopPutChar(pkt, index, 0x2b);
d124 1
a124 2
	mopPutChar(pkt, index, (proto / 256));
	mopPutChar(pkt, index, (proto % 256));
d127 1
a127 2
		mopPutChar(pkt, index, (proto / 256));
		mopPutChar(pkt, index, (proto % 256));
d129 1
a129 2
		mopPutChar(pkt, index, (proto % 256));
		mopPutChar(pkt, index, (proto / 256));
d133 1
a133 1
		mopPutShort(pkt, index, 0);
d140 1
a140 1
	int	 index = 0;
d144 2
a145 3
		index = 14;
		mopPutChar(pkt, &index, ((len - 16) % 256));
		mopPutChar(pkt, &index, ((len - 16) / 256));
d148 1
a148 1
		index = 12;
d150 1
a150 2
		mopPutChar(pkt, &index, ((len - 14) / 256));
		mopPutChar(pkt, &index, ((len - 14) % 256));
d152 1
a152 2
		mopPutChar(pkt, &index, ((len - 14) % 256));
		mopPutChar(pkt, &index, ((len - 14) / 256));
a155 1

a156 3



@


1.5
log
@-Wall cleanup: trim unused vars, right format strings, constify rcsids,
braces where needed, add missing prototypes.

tested and ok maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD: put.c,v 1.4 2003/06/02 21:38:39 maja Exp $ */
d28 2
a29 1
static const char rcsid[] = "$OpenBSD: put.c,v 1.4 2003/06/02 21:38:39 maja Exp $";
d38 1
a38 4
mopPutChar(pkt, index, value)
	u_char *pkt;
	int    *index;
	u_char   value;
d41 1
a41 1
	*index = *index + 1;
d45 1
a45 4
mopPutShort(pkt, index, value)
	u_char *pkt;
	int    *index;
	u_short  value;
d47 2
a48 1
        int i;
d50 2
a51 2
	  pkt[*index+i] = value % 256;
	  value = value / 256;
d53 1
a53 1
	*index = *index + 2;
d57 1
a57 4
mopPutLong(pkt, index, value)
	u_char *pkt;
	int    *index;
	u_long   value;
d59 2
a60 1
        int i;
d62 2
a63 2
	  pkt[*index+i] = value % 256;
	  value = value / 256;
d65 1
a65 1
	*index = *index + 4;
d69 1
a69 3
mopPutMulti(pkt, index, value, size)
	u_char *pkt,*value;
	int    *index,size;
d73 3
a75 4
	for (i = 0; i < size; i++) {
	  pkt[*index+i] = value[i];
	}  
	*index = *index + size;
d79 1
a79 4
mopPutTime(pkt, index, value)
	u_char *pkt;
	int    *index;
	time_t value;
d81 2
a82 2
	time_t tnow;
	struct tm *timenow;
d84 4
a87 5
	if ((value == 0)) {
	  tnow = time(NULL);
	} else {
	  tnow = value;
	}
d91 11
a101 11
	mopPutChar (pkt,index,10);
	mopPutChar (pkt,index,(timenow->tm_year / 100) + 19);
	mopPutChar (pkt,index,(timenow->tm_year % 100));
	mopPutChar (pkt,index,(timenow->tm_mon + 1));
	mopPutChar (pkt,index,(timenow->tm_mday));
	mopPutChar (pkt,index,(timenow->tm_hour));
	mopPutChar (pkt,index,(timenow->tm_min));
	mopPutChar (pkt,index,(timenow->tm_sec));
	mopPutChar (pkt,index,0x00);
	mopPutChar (pkt,index,0x00);
	mopPutChar (pkt,index,0x00);
d105 2
a106 6
mopPutHeader(pkt, index, dst, src, proto, trans)
	u_char *pkt;
	int    *index;
	char	 dst[], src[];
	u_short	 proto;
	int	 trans;
a107 1
	
d112 6
a117 6
		mopPutChar (pkt, index, MOP_K_PROTO_802_DSAP);
		mopPutChar (pkt, index, MOP_K_PROTO_802_SSAP);
		mopPutChar (pkt, index, MOP_K_PROTO_802_CNTL);
		mopPutChar (pkt, index, 0x08);
		mopPutChar (pkt, index, 0x00);
		mopPutChar (pkt, index, 0x2b);
d137 1
a137 4
mopPutLength(pkt, trans, len)
	u_char *pkt;
	int	 trans;
	u_short	 len;
d140 2
a141 2
	
	switch(trans) {
@


1.4
log
@remove clause 3 and 4. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: put.c,v 1.3 2002/03/14 16:44:25 mpech Exp $ */
d28 1
a28 1
static char rcsid[] = "$OpenBSD: put.c,v 1.3 2002/03/14 16:44:25 mpech Exp $";
@


1.3
log
@kill more registers.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: put.c,v 1.2 1996/09/21 19:12:01 maja Exp $ */
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Mats O Jansson.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d28 1
a28 1
static char rcsid[] = "$OpenBSD: put.c,v 1.2 1996/09/21 19:12:01 maja Exp $";
@


1.2
log
@Replace $Id with $OpenBSD, 3:rd try. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: put.c,v 1.1.1.1 1996/09/21 13:49:16 maja Exp $";
d43 2
a44 2
	register u_char *pkt;
	register int    *index;
d53 2
a54 2
	register u_char *pkt;
	register int    *index;
d67 2
a68 2
	register u_char *pkt;
	register int    *index;
d81 2
a82 2
	register u_char *pkt,*value;
	register int    *index,size;
d94 2
a95 2
	register u_char *pkt;
	register int    *index;
d124 2
a125 2
	register u_char *pkt;
	register int    *index;
d161 1
a161 1
	register u_char *pkt;
@


1.1
log
@Initial revision
@
text
@d1 2
d33 1
a33 1
static char rcsid[] = "$Id: put.c,v 1.5 1996/08/16 22:42:56 moj Exp $";
@


1.1.1.1
log
@Initial import of mopd-2.5.3. -moj
@
text
@@
