head	1.12;
access;
symbols
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.28
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.24
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.26
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.18
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.22
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.20
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.16
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.12
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.10
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.14
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.12
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.10
	OPENBSD_2_8:1.3.0.8
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	MOPD254:1.3
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	MOPD253:1.1.1.1
	MAJA:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2009.10.27.23.59.52;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.20.08.52.52;	author maja;	state Exp;
branches;
next	1.10;

1.10
date	2006.04.17.16.23.01;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.15.11.55.48;	author maja;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.20.17.51.07;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.14.20.37.28;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.01.00.56.51;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.21.38.39;	author maja;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.07.07.58.21;	author maja;	state Exp;
branches;
next	1.3;

1.3
date	99.03.27.14.31.21;	author maja;	state Exp;
branches;
next	1.2;

1.2
date	96.09.21.19.11.57;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	96.09.21.13.49.16;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.09.21.13.49.16;	author maja;	state Exp;
branches;
next	;


desc
@@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@/*	$OpenBSD: print.c,v 1.11 2006/04/20 08:52:52 maja Exp $ */

/*
 * Copyright (c) 1993-96 Mats O Jansson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <stdio.h>

#include "os.h"
#include "common/mopdef.h"
#include "common/nmadef.h"
#include "common/nma.h"
#include "common/cmp.h"
#include "common/get.h"

#define SHORT_PRINT

void
mopPrintHWA(FILE *fd, u_char *ap)
{
	fprintf(fd, "%x:%x:%x:%x:%x:%x", ap[0], ap[1], ap[2], ap[3], ap[4],
	    ap[5]);
	if (ap[0] < 16) fprintf(fd, " ");
	if (ap[1] < 16) fprintf(fd, " ");
	if (ap[2] < 16) fprintf(fd, " ");
	if (ap[3] < 16) fprintf(fd, " ");
	if (ap[4] < 16) fprintf(fd, " ");
	if (ap[5] < 16) fprintf(fd, " ");
}

void
mopPrintBPTY(FILE *fd, u_char bpty)
{
	switch (bpty) {
	case MOP_K_BPTY_SYS:
		fprintf(fd, "System Processor");
		break;
	case MOP_K_BPTY_COM:
		fprintf(fd, "Communication Processor");
		break;
	default:
		fprintf(fd, "Unknown");
		break;
	};
}

void
mopPrintPGTY(FILE *fd, u_char pgty)
{
	switch (pgty) {
	case MOP_K_PGTY_SECLDR:
		fprintf(fd, "Secondary Loader");
		break;
	case MOP_K_PGTY_TERLDR:
		fprintf(fd, "Tertiary Loader");
		break;
	case MOP_K_PGTY_OPRSYS:
		fprintf(fd, "Operating System");
		break;
	case MOP_K_PGTY_MGNTFL:
		fprintf(fd, "Management File");
		break;
	default:
		fprintf(fd, "Unknown");
		break;
	};
}

void
mopPrintOneline(FILE *fd, u_char *pkt, int trans)
{
	int	 idx = 0;
	u_char	*dst, *src, code;
	u_short	 proto;
	int	 len;

	trans = mopGetTrans(pkt, trans);
	mopGetHeader(pkt, &idx, &dst, &src, &proto, &len, trans);
	code = mopGetChar(pkt, &idx);

	switch (proto) {
	case MOP_K_PROTO_DL:
		fprintf(fd, "MOP DL ");
		break;
	case MOP_K_PROTO_RC:
		fprintf(fd, "MOP RC ");
		break;
	case MOP_K_PROTO_LP:
		fprintf(fd, "MOP LP ");
		break;
	default:
		switch ((proto % 256) * 256 + (proto / 256)) {
		case MOP_K_PROTO_DL:
			fprintf(fd, "MOP DL ");
			proto = MOP_K_PROTO_DL;
			break;
		case MOP_K_PROTO_RC:
			fprintf(fd, "MOP RC ");
			proto = MOP_K_PROTO_RC;
			break;
		case MOP_K_PROTO_LP:
			fprintf(fd, "MOP LP ");
			proto = MOP_K_PROTO_LP;
			break;
		default:
			fprintf(fd, "MOP ?? ");
			break;
		}
	}

	if (trans == TRANS_8023)
		fprintf(fd, "802.3 ");

	mopPrintHWA(fd, src); fprintf(fd, " > ");
	mopPrintHWA(fd, dst);
	if (len < 1600)
	fprintf(fd, " len %4d code %02x ", len, code);
	else
		fprintf(fd, " len %4d code %02x ",
		    (len % 256)*256 + (len /256), code);

	switch (proto) {
	case MOP_K_PROTO_DL:
	switch (code) {
		case MOP_K_CODE_MLT:
			fprintf(fd, "MLT ");
			break;
		case MOP_K_CODE_DCM:
			fprintf(fd, "DCM ");
			break;
		case MOP_K_CODE_MLD:
			fprintf(fd, "MLD ");
			break;
		case MOP_K_CODE_ASV:
			fprintf(fd, "ASV ");
			break;
		case MOP_K_CODE_RMD:
			fprintf(fd, "RMD ");
			break;
		case MOP_K_CODE_RPR:
			fprintf(fd, "RPR ");
			break;
		case MOP_K_CODE_RML:
			fprintf(fd, "RML ");
			break;
		case MOP_K_CODE_RDS:
			fprintf(fd, "RDS ");
			break;
		case MOP_K_CODE_MDD:
			fprintf(fd, "MDD ");
			break;
		case MOP_K_CODE_PLT:
			fprintf(fd, "PLT ");
			break;
		default:
			fprintf(fd, "??? ");
			break;
		}
		break;
	case MOP_K_PROTO_RC:
		switch (code) {
		case MOP_K_CODE_RID:
			fprintf(fd, "RID ");
			break;
		case MOP_K_CODE_BOT:
			fprintf(fd, "BOT ");
			break;
		case MOP_K_CODE_SID:
			fprintf(fd, "SID ");
			break;
		case MOP_K_CODE_RQC:
			fprintf(fd, "RQC ");
			break;
		case MOP_K_CODE_CNT:
			fprintf(fd, "CNT ");
			break;
		case MOP_K_CODE_RVC:
			fprintf(fd, "RVC ");
			break;
		case MOP_K_CODE_RLC:
			fprintf(fd, "RLC ");
			break;
		case MOP_K_CODE_CCP:
			fprintf(fd, "CCP ");
			break;
		case MOP_K_CODE_CRA:
			fprintf(fd, "CRA ");
			break;
		default:
			fprintf(fd, "??? ");
			break;
		}
		break;
	case MOP_K_PROTO_LP:
		switch (code) {
		case MOP_K_CODE_ALD:
			fprintf(fd, "ALD ");
			break;
		case MOP_K_CODE_PLD:
			fprintf(fd, "PLD ");
			break;
		default:
			fprintf(fd, "??? ");
			break;
		}
		break;
	default:
		fprintf(fd, "??? ");
		break;
	}
	fprintf(fd, "\n");
}

void
mopPrintHeader(FILE *fd, u_char *pkt, int trans)
{
	u_char	*dst, *src;
	u_short	 proto;
	int	 len, idx = 0;

	trans = mopGetTrans(pkt, trans);
	mopGetHeader(pkt, &idx, &dst, &src, &proto, &len, trans);

	fprintf(fd, "\nDst          : ");
	mopPrintHWA(fd, dst);
	if (mopCmpEAddr(dl_mcst, dst) == 0)
		fprintf(fd, " MOP Dump/Load Multicast");
	if (mopCmpEAddr(rc_mcst, dst) == 0)
		fprintf(fd, " MOP Remote Console Multicast");
	fprintf(fd, "\n");

	fprintf(fd, "Src          : ");
	mopPrintHWA(fd, src);
	fprintf(fd, "\n");
	fprintf(fd, "Proto        : %04x ", proto);

	switch (proto) {
	case MOP_K_PROTO_DL:
		switch (trans) {
		case TRANS_8023:
			fprintf(fd, "MOP Dump/Load (802.3)\n");
			break;
		default:
			fprintf(fd, "MOP Dump/Load\n");
		}
		break;
	case MOP_K_PROTO_RC:
		switch (trans) {
		case TRANS_8023:
			fprintf(fd, "MOP Remote Console (802.3)\n");
			break;
		default:
			fprintf(fd, "MOP Remote Console\n");
		}
		break;
	case MOP_K_PROTO_LP:
		switch (trans) {
		case TRANS_8023:
			fprintf(fd, "MOP Loopback (802.3)\n");
			break;
		default:
			fprintf(fd, "MOP Loopback\n");
		}
		break;
	default:
		fprintf(fd, "\n");
		break;
	}

	fprintf(fd, "Length       : %04x (%d)\n", len, len);
}

void
mopPrintMopHeader(FILE *fd, u_char *pkt, int trans)
{
	u_char	*dst, *src;
	u_short	 proto;
	int	 len, idx = 0;
	u_char   code;

	trans = mopGetTrans(pkt, trans);
	mopGetHeader(pkt, &idx, &dst, &src, &proto, &len, trans);

	code = mopGetChar(pkt, &idx);

	fprintf(fd, "Code         :   %02x ", code);

	switch (proto) {
	case MOP_K_PROTO_DL:
		switch (code) {
		case MOP_K_CODE_MLT:
			fprintf(fd, "Memory Load with transfer address\n");
			break;
		case MOP_K_CODE_DCM:
			fprintf(fd, "Dump Complete\n");
			break;
		case MOP_K_CODE_MLD:
			fprintf(fd, "Memory Load\n");
			break;
		case MOP_K_CODE_ASV:
			fprintf(fd, "Assistance volunteer\n");
			break;
		case MOP_K_CODE_RMD:
			fprintf(fd, "Request memory dump\n");
			break;
		case MOP_K_CODE_RPR:
			fprintf(fd, "Request program\n");
			break;
		case MOP_K_CODE_RML:
			fprintf(fd, "Request memory load\n");
			break;
		case MOP_K_CODE_RDS:
			fprintf(fd, "Request Dump Service\n");
			break;
		case MOP_K_CODE_MDD:
			fprintf(fd, "Memory dump data\n");
			break;
		case MOP_K_CODE_PLT:
			fprintf(fd, "Parameter load with transfer address\n");
			break;
		default:
			fprintf(fd, "(unknown)\n");
			break;
		}
		break;
	case MOP_K_PROTO_RC:
		switch (code) {
		case MOP_K_CODE_RID:
			fprintf(fd, "Request ID\n");
			break;
		case MOP_K_CODE_BOT:
			fprintf(fd, "Boot\n");
			break;
		case MOP_K_CODE_SID:
			fprintf(fd, "System ID\n");
			break;
		case MOP_K_CODE_RQC:
			fprintf(fd, "Request Counters\n");
			break;
		case MOP_K_CODE_CNT:
			fprintf(fd, "Counters\n");
			break;
		case MOP_K_CODE_RVC:
			fprintf(fd, "Reserve Console\n");
			break;
		case MOP_K_CODE_RLC:
			fprintf(fd, "Release Console\n");
			break;
		case MOP_K_CODE_CCP:
			fprintf(fd, "Console Command and Poll\n");
			break;
		case MOP_K_CODE_CRA:
			fprintf(fd, "Console Response and Acknnowledge\n");
			break;
		default:
			fprintf(fd, "(unknown)\n");
			break;
		}
		break;
	case MOP_K_PROTO_LP:
		switch (code) {
		case MOP_K_CODE_ALD:
			fprintf(fd, "Active loop data\n");
			break;
		case MOP_K_CODE_PLD:
			fprintf(fd, "Passive looped data\n");
			break;
		default:
			fprintf(fd, "(unknown)\n");
			break;
		}
		break;
	default:
		fprintf(fd, "(unknown)\n");
		break;
	}
}

void
mopPrintDevice(FILE *fd, u_char device)
{
	char	*sname, *name;

	sname = nmaGetShort((int) device);
	name = nmaGetDevice((int) device);

	fprintf(fd, "%s '%s'", sname, name);
}

void
mopPrintTime(FILE *fd, u_char *ap)
{
	fprintf(fd, "%04d-%02d-%02d %02d:%02d:%02d.%02d %d:%02d",
	    ap[0] * 100 + ap[1], ap[2], ap[3], ap[4], ap[5], ap[6], ap[7],
	    ap[8], ap[9]);
}

void
mopPrintInfo(FILE *fd, u_char *pkt, int *idx, u_short moplen, u_char mopcode,
    int trans)
{
	u_short itype, tmps;
	u_char  ilen, tmpc, device;
	u_char  uc1, uc2, uc3, *ucp;
	int     i;

	device = 0;

	switch (trans) {
	case TRANS_ETHER:
		moplen = moplen + 16;
		break;
	case TRANS_8023:
		moplen = moplen + 14;
		break;
	}

	itype = mopGetShort(pkt, idx);

	while (*idx < (moplen + 2)) {
		ilen = mopGetChar(pkt, idx);
		switch (itype) {
		case 0:
			tmpc  = mopGetChar(pkt, idx);
			*idx = *idx + tmpc;
			break;
		case MOP_K_INFO_VER:
			uc1 = mopGetChar(pkt, idx);
			uc2 = mopGetChar(pkt, idx);
			uc3 = mopGetChar(pkt, idx);
			fprintf(fd, "Maint Version: %d.%d.%d\n", uc1, uc2, uc3);
			break;
		case MOP_K_INFO_MFCT:
			tmps = mopGetShort(pkt, idx);
			fprintf(fd, "Maint Funcion: %04x ( ", tmps);
			if (tmps &   1) fprintf(fd, "Loop ");
			if (tmps &   2) fprintf(fd, "Dump ");
			if (tmps &   4) fprintf(fd, "Pldr ");
			if (tmps &   8) fprintf(fd, "MLdr ");
			if (tmps &  16) fprintf(fd, "Boot ");
			if (tmps &  32) fprintf(fd, "CC ");
			if (tmps &  64) fprintf(fd, "DLC ");
			if (tmps & 128) fprintf(fd, "CCR ");
			fprintf(fd, ")\n");
			break;
		case MOP_K_INFO_CNU:
			ucp = pkt + *idx;
			*idx = *idx + 6;
			fprintf(fd, "Console User : ");
			mopPrintHWA(fd, ucp);
			fprintf(fd, "\n");
			break;
		case MOP_K_INFO_RTM:
			tmps = mopGetShort(pkt, idx);
			fprintf(fd, "Reserv Timer : %04x (%d)\n", tmps, tmps);
			break;
		case MOP_K_INFO_CSZ:
			tmps = mopGetShort(pkt, idx);
			fprintf(fd, "Cons Cmd Size: %04x (%d)\n", tmps, tmps);
			break;
		case MOP_K_INFO_RSZ:
			tmps = mopGetShort(pkt, idx);
			fprintf(fd, "Cons Res Size: %04x (%d)\n", tmps, tmps);
			break;
		case MOP_K_INFO_HWA:
			ucp = pkt + *idx;
			*idx = *idx + 6;
			fprintf(fd, "Hardware Addr: ");
			mopPrintHWA(fd, ucp);
			fprintf(fd, "\n");
			break;
		case MOP_K_INFO_TIME:
			ucp = pkt + *idx;
			*idx = *idx + 10;
			fprintf(fd, "System Time: ");
			mopPrintTime(fd, ucp);
			fprintf(fd, "\n");
			break;
		case MOP_K_INFO_SOFD:
			device = mopGetChar(pkt, idx);
			fprintf(fd, "Comm Device  :   %02x ", device);
			mopPrintDevice(fd, device);
			fprintf(fd, "\n");
			break;
		case MOP_K_INFO_SFID:
			tmpc = mopGetChar(pkt, idx);
			fprintf(fd, "Software ID  :   %02x ", tmpc);
			if ((tmpc == 0))
				fprintf(fd, "No software id");
			if ((tmpc == 254)) {
				fprintf(fd, "Maintenance system");
				tmpc = 0;
			}
			if ((tmpc == 255)) {
				fprintf(fd, "Standard operating system");
				tmpc = 0;
			}
			if ((tmpc > 0)) {
				fprintf(fd, "'");
				for (i = 0; i < ((int) tmpc); i++)
					fprintf(fd, "%c",
					    mopGetChar(pkt, idx));
				fprintf(fd, "'");
			}
			fprintf(fd, "\n");
			break;
		case MOP_K_INFO_PRTY:
			tmpc = mopGetChar(pkt, idx);
			fprintf(fd, "System Proc  :   %02x ", tmpc);
			switch (tmpc) {
			case MOP_K_PRTY_11:
				fprintf(fd, "PDP-11\n");
				break;
			case MOP_K_PRTY_CMSV:
				fprintf(fd, "Communication Server\n");
				break;
			case MOP_K_PRTY_PRO:
				fprintf(fd, "Professional\n");
				break;
			case MOP_K_PRTY_SCO:
				fprintf(fd, "Scorpio\n");
				break;
			case MOP_K_PRTY_AMB:
				fprintf(fd, "Amber\n");
				break;
			case MOP_K_PRTY_BRI:
				fprintf(fd, "XLII Bridge\n");
				break;
			default:
				fprintf(fd, "Unknown\n");
				break;
			};
			break;
		case MOP_K_INFO_DLTY:
			tmpc = mopGetChar(pkt, idx);
			fprintf(fd, "DLnk Type    :   %02x ", tmpc);
			switch (tmpc) {
			case MOP_K_DLTY_NI:
				fprintf(fd, "Ethernet\n");
				break;
			case MOP_K_DLTY_DDCMP:
				fprintf(fd, "DDCMP\n");
				break;
			case MOP_K_DLTY_LAPB:
				fprintf(fd, "LAPB (X.25)\n");
				break;
			default:
				fprintf(fd, "Unknown\n");
				break;
			};
			break;
		case MOP_K_INFO_DLBSZ:
			tmps = mopGetShort(pkt, idx);
			fprintf(fd, "DLnk Buf Size: %04x (%d)\n", tmps, tmps);
			break;
		default:
			if (((device == NMA_C_SOFD_LCS) ||  /* DECserver 100 */
			     (device == NMA_C_SOFD_DS2) ||  /* DECserver 200 */
			     (device == NMA_C_SOFD_DP2) ||  /* DECserver 250 */
			     (device == NMA_C_SOFD_DS3)) && /* DECserver 300 */
			    ((itype > 101) && (itype < 107)))
			{
			switch (itype) {
				case 102:
					ucp = pkt + *idx;
					*idx = *idx + ilen;
					fprintf(fd, "ROM SW Ver   :   %02x '",
					    ilen);
					for (i = 0; i < ilen; i++)
						fprintf(fd, "%c", ucp[i]);
					fprintf(fd, "'\n");
					break;
				case 103:
					ucp = pkt + *idx;
					*idx = *idx + ilen;
					fprintf(fd, "Loaded SW Ver:   %02x '",
					    ilen);
					for (i = 0; i < ilen; i++)
						fprintf(fd, "%c", ucp[i]);
					fprintf(fd, "'\n");
					break;
				case 104:
					tmps = mopGetShort(pkt, idx);
					fprintf(fd,
					    "DECnet Addr  : %d.%d (%d)\n",
					    tmps / 1024, tmps % 1024, tmps);
					break;
				case 105:
					ucp = pkt + *idx;
					*idx = *idx + ilen;
					fprintf(fd, "Node Name    :   %02x '",
					    ilen);
					for (i = 0; i < ilen; i++)
						fprintf(fd, "%c", ucp[i]);
					fprintf(fd, "'\n");
					break;
				case 106:
					ucp = pkt + *idx;
					*idx = *idx + ilen;
					fprintf(fd, "Node Ident   :   %02x '",
					    ilen);
					for (i = 0; i < ilen; i++)
						fprintf(fd, "%c", ucp[i]);
					fprintf(fd, "'\n");
					break;
				}
			} else {
				ucp = pkt + *idx;
				*idx = *idx + ilen;
				fprintf(fd, "Info Type    : %04x (%d)\n",
				    itype, itype);
				fprintf(fd, "Info Data    :   %02x ", ilen);
				for (i = 0; i < ilen; i++) {
					if ((i % 16) == 0)
						if ((i / 16) != 0)
							fprintf(fd,
						     "\n                    ");
					fprintf(fd, "%02x ", ucp[i]);
				}
				fprintf(fd, "\n");
			}
		}
		itype = mopGetShort(pkt, idx);
	}
}
@


1.11
log
@More delint. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.10 2006/04/17 16:23:01 deraadt Exp $ */
a25 5

#ifndef lint
static const char rcsid[] =
    "$OpenBSD: print.c,v 1.10 2006/04/17 16:23:01 deraadt Exp $";
#endif
@


1.10
log
@more cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.9 2006/04/15 11:55:48 maja Exp $ */
d29 1
a29 1
    "$OpenBSD: print.c,v 1.9 2006/04/15 11:55:48 maja Exp $";
d98 1
a98 1
	int	 index = 0;
d104 2
a105 2
	mopGetHeader(pkt, &index, &dst, &src, &proto, &len, trans);
	code = mopGetChar(pkt, &index);
d245 1
a245 1
	int	 len, index = 0;
d248 1
a248 1
	mopGetHeader(pkt, &index, &dst, &src, &proto, &len, trans);
d304 1
a304 1
	int	 len, index = 0;
d308 1
a308 1
	mopGetHeader(pkt, &index, &dst, &src, &proto, &len, trans);
d310 1
a310 1
	code = mopGetChar(pkt, &index);
d425 1
a425 1
mopPrintInfo(FILE *fd, u_char *pkt, int *index, u_short moplen, u_char mopcode,
d444 1
a444 1
	itype = mopGetShort(pkt, index);
d446 2
a447 2
	while (*index < (moplen + 2)) {
		ilen = mopGetChar(pkt, index);
d450 2
a451 2
			tmpc  = mopGetChar(pkt, index);
			*index = *index + tmpc;
d454 3
a456 3
			uc1 = mopGetChar(pkt, index);
			uc2 = mopGetChar(pkt, index);
			uc3 = mopGetChar(pkt, index);
d460 1
a460 1
			tmps = mopGetShort(pkt, index);
d473 2
a474 2
			ucp = pkt + *index;
			*index = *index + 6;
d480 1
a480 1
			tmps = mopGetShort(pkt, index);
d484 1
a484 1
			tmps = mopGetShort(pkt, index);
d488 1
a488 1
			tmps = mopGetShort(pkt, index);
d492 2
a493 2
			ucp = pkt + *index;
			*index = *index + 6;
d499 2
a500 2
			ucp = pkt + *index;
			*index = *index + 10;
d506 1
a506 1
			device = mopGetChar(pkt, index);
d512 1
a512 1
			tmpc = mopGetChar(pkt, index);
d528 1
a528 1
					    mopGetChar(pkt, index));
d534 1
a534 1
			tmpc = mopGetChar(pkt, index);
d561 1
a561 1
			tmpc = mopGetChar(pkt, index);
d579 1
a579 1
			tmps = mopGetShort(pkt, index);
d591 2
a592 2
					ucp = pkt + *index;
					*index = *index + ilen;
d600 2
a601 2
					ucp = pkt + *index;
					*index = *index + ilen;
d609 1
a609 1
					tmps = mopGetShort(pkt, index);
d615 2
a616 2
					ucp = pkt + *index;
					*index = *index + ilen;
d624 2
a625 2
					ucp = pkt + *index;
					*index = *index + ilen;
d634 2
a635 2
				ucp = pkt + *index;
				*index = *index + ilen;
d649 1
a649 1
		itype = mopGetShort(pkt, index);
a651 1

@


1.9
log
@Fix some bugs in printing of MOP packets. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.8 2004/09/20 17:51:07 miod Exp $ */
d27 1
a27 1
#ifndef LINT
d29 1
a29 1
    "$OpenBSD: print.c,v 1.8 2004/09/20 17:51:07 miod Exp $";
@


1.8
log
@addres -> address
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.7 2004/04/14 20:37:28 henning Exp $ */
d29 1
a29 1
    "$OpenBSD: print.c,v 1.7 2004/04/14 20:37:28 henning Exp $";
d562 1
a562 1
			fprintf(fd, "Data Link Type:   %02x ", tmpc);
d580 1
a580 1
			fprintf(fd, "DL Buff Size : %04x (%d)\n", tmps, tmps);
d583 4
a586 4
			if (((device = NMA_C_SOFD_LCS) ||   /* DECserver 100 */
			     (device = NMA_C_SOFD_DS2) ||   /* DECserver 200 */
			     (device = NMA_C_SOFD_DP2) ||   /* DECserver 250 */
			     (device = NMA_C_SOFD_DS3)) &&  /* DECserver 300 */
d593 1
a593 1
					fprintf(fd, "ROM Sftwr Ver:   %02x '",
d602 1
a602 1
					fprintf(fd, "Software Ver :   %02x '",
@


1.7
log
@4000 lines worth of cleanup, KNF, Knall&Rauch elemination and such
tested by hshoexer, "don't wait for me" miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c, v 1.6 2003/12/01 00:56:51 avsm Exp $ */
d29 1
a29 1
    "$OpenBSD: print.c, v 1.6 2003/12/01 00:56:51 avsm Exp $";
d345 1
a345 1
			fprintf(fd, "Parameter load with transfer addres\n");
@


1.6
log
@-Wall cleanup: trim unused vars, right format strings, constify rcsids,
braces where needed, add missing prototypes.

tested and ok maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.5 2003/06/02 21:38:39 maja Exp $ */
d28 2
a29 1
static const char rcsid[] = "$OpenBSD: print.c,v 1.5 2003/06/02 21:38:39 maja Exp $";
d45 1
a45 3
mopPrintHWA(fd, ap)
	FILE	*fd;
        u_char *ap;
d47 8
a54 8
	(void)fprintf(fd, "%x:%x:%x:%x:%x:%x",
		      ap[0],ap[1],ap[2],ap[3],ap[4],ap[5]);
	if (ap[0] < 16) (void)fprintf(fd, " ");
	if (ap[1] < 16) (void)fprintf(fd, " ");
	if (ap[2] < 16) (void)fprintf(fd, " ");
	if (ap[3] < 16) (void)fprintf(fd, " ");
	if (ap[4] < 16) (void)fprintf(fd, " ");
	if (ap[5] < 16) (void)fprintf(fd, " ");
d58 1
a58 3
mopPrintBPTY(fd, bpty)
	FILE	*fd;
	u_char 	bpty;
d60 1
a60 1
	switch(bpty) {
d62 1
a62 1
		(void)fprintf(fd, "System Processor");
d65 1
a65 1
		(void)fprintf(fd, "Communication Processor");
d68 1
a68 1
		(void)fprintf(fd, "Unknown");
d74 1
a74 3
mopPrintPGTY(fd, pgty)
	FILE	*fd;
	u_char 	pgty;
d76 1
a76 1
	switch(pgty) {
d78 1
a78 1
		(void)fprintf(fd, "Secondary Loader");
d81 1
a81 1
		(void)fprintf(fd, "Tertiary Loader");
d84 1
a84 1
		(void)fprintf(fd, "Operating System");
d87 1
a87 1
		(void)fprintf(fd, "Management File");
d90 1
a90 1
		(void)fprintf(fd, "Unknown");
d96 1
a96 4
mopPrintOneline(fd, pkt, trans)
	FILE	*fd;
	u_char	*pkt;
	int	 trans;
d109 1
a109 1
		(void)fprintf(fd, "MOP DL ");
d112 1
a112 1
		(void)fprintf(fd, "MOP RC ");
d115 1
a115 1
		(void)fprintf(fd, "MOP LP ");
d118 1
a118 1
		switch((proto % 256)*256 + (proto / 256)) {
d120 1
a120 1
			(void)fprintf(fd, "MOP DL ");
d124 1
a124 1
			(void)fprintf(fd, "MOP RC ");
d128 1
a128 1
			(void)fprintf(fd, "MOP LP ");
d132 1
a132 1
			(void)fprintf(fd, "MOP ?? ");
d137 2
a138 3
	if (trans == TRANS_8023) {
		(void)fprintf(fd, "802.3 ");
	}
d140 1
a140 1
	mopPrintHWA(fd, src); (void)fprintf(fd," > ");
d142 5
a146 6
	if (len < 1600) {
        	(void)fprintf(fd, " len %4d code %02x ",len,code);
	} else {
		(void)fprintf(fd, " len %4d code %02x ",
			      (len % 256)*256 + (len /256), code);
	}
d150 1
a150 1
        	switch (code) {
d152 1
a152 1
			(void)fprintf(fd, "MLT ");
d155 1
a155 1
			(void)fprintf(fd, "DCM ");
d158 1
a158 1
			(void)fprintf(fd, "MLD ");
d161 1
a161 1
			(void)fprintf(fd, "ASV ");
d164 1
a164 1
			(void)fprintf(fd, "RMD ");
d167 1
a167 1
			(void)fprintf(fd, "RPR ");
d170 1
a170 1
			(void)fprintf(fd, "RML ");
d172 2
a173 2
	        case MOP_K_CODE_RDS:
			(void)fprintf(fd, "RDS ");
d176 1
a176 1
			(void)fprintf(fd, "MDD ");
d179 1
a179 1
			(void)fprintf(fd, "PLT ");
d181 2
a182 2
	        default:
			(void)fprintf(fd, "??? ");
d189 1
a189 1
			(void)fprintf(fd, "RID ");
d192 1
a192 1
			(void)fprintf(fd, "BOT ");
d195 1
a195 1
			(void)fprintf(fd, "SID ");
d198 1
a198 1
			(void)fprintf(fd, "RQC ");
d201 1
a201 1
			(void)fprintf(fd, "CNT ");
d204 1
a204 1
			(void)fprintf(fd, "RVC ");
d207 1
a207 1
			(void)fprintf(fd, "RLC ");
d210 1
a210 1
			(void)fprintf(fd, "CCP ");
d213 1
a213 1
			(void)fprintf(fd, "CRA ");
d216 1
a216 1
			(void)fprintf(fd, "??? ");
d223 1
a223 1
			(void)fprintf(fd, "ALD ");
d226 1
a226 1
			(void)fprintf(fd, "PLD ");
d229 1
a229 1
			(void)fprintf(fd, "??? ");
d234 1
a234 1
		(void)fprintf(fd, "??? ");
d237 1
a237 1
	(void)fprintf(fd, "\n");
d241 1
a241 4
mopPrintHeader(fd, pkt, trans)
	FILE	*fd;
	u_char	*pkt;
	int	 trans;
d249 2
a250 2
	
	(void)fprintf(fd,"\nDst          : ");
d252 5
a256 7
	if (mopCmpEAddr(dl_mcst,dst) == 0) {
		(void)fprintf(fd," MOP Dump/Load Multicast");
	};
	if (mopCmpEAddr(rc_mcst,dst) == 0) {
		(void)fprintf(fd," MOP Remote Console Multicast");
	};
	(void)fprintf(fd,"\n");
d258 1
a258 1
	(void)fprintf(fd,"Src          : ");
d260 3
a262 2
	(void)fprintf(fd,"\n");
	(void)fprintf(fd,"Proto        : %04x ",proto);
d267 1
a267 1
			(void)fprintf(fd, "MOP Dump/Load (802.3)\n");
d270 1
a270 1
			(void)fprintf(fd, "MOP Dump/Load\n");
d276 1
a276 1
			(void)fprintf(fd, "MOP Remote Console (802.3)\n");
d279 1
a279 1
			(void)fprintf(fd, "MOP Remote Console\n");
d285 1
a285 1
			(void)fprintf(fd, "MOP Loopback (802.3)\n");
d288 1
a288 1
			(void)fprintf(fd, "MOP Loopback\n");
d292 1
a292 1
		(void)fprintf(fd, "\n");
d296 1
a296 2
	
        (void)fprintf(fd,"Length       : %04x (%d)\n",len,len);
d300 1
a300 4
mopPrintMopHeader(fd, pkt, trans)
	FILE	*fd;
	u_char	*pkt;
	int	 trans;
d309 1
a309 1
	
d312 1
a312 1
	(void)fprintf(fd, "Code         :   %02x ",code);
d318 1
a318 2
			(void)fprintf(fd,
				      "Memory Load with transfer address\n");
d321 1
a321 1
			(void)fprintf(fd, "Dump Complete\n");
d324 1
a324 1
			(void)fprintf(fd, "Memory Load\n");
d327 1
a327 1
			(void)fprintf(fd, "Assistance volunteer\n");
d330 1
a330 1
			(void)fprintf(fd, "Request memory dump\n");
d333 1
a333 1
			(void)fprintf(fd, "Request program\n");
d336 1
a336 1
			(void)fprintf(fd, "Request memory load\n");
d339 1
a339 1
			(void)fprintf(fd, "Request Dump Service\n");
d342 1
a342 1
			(void)fprintf(fd, "Memory dump data\n");
d345 1
a345 2
			(void)fprintf(fd,
				      "Parameter load with transfer addres\n");
d348 1
a348 1
			(void)fprintf(fd, "(unknown)\n");
d355 1
a355 1
			(void)fprintf(fd, "Request ID\n");
d358 1
a358 1
			(void)fprintf(fd, "Boot\n");
d361 1
a361 1
			(void)fprintf(fd, "System ID\n");
d364 1
a364 1
			(void)fprintf(fd, "Request Counters\n");
d367 1
a367 1
			(void)fprintf(fd, "Counters\n");
d370 1
a370 1
			(void)fprintf(fd, "Reserve Console\n");
d373 1
a373 1
			(void)fprintf(fd, "Release Console\n");
d376 1
a376 1
			(void)fprintf(fd, "Console Command and Poll\n");
d379 1
a379 2
			(void)fprintf(fd,
				      "Console Response and Acknnowledge\n");
d382 1
a382 1
			(void)fprintf(fd, "(unknown)\n");
d389 1
a389 1
			(void)fprintf(fd, "Active loop data\n");
d392 1
a392 1
			(void)fprintf(fd, "Passive looped data\n");
d395 1
a395 1
			(void)fprintf(fd, "(unknown)\n");
d400 1
a400 1
		(void)fprintf(fd, "(unknown)\n");
d406 1
a406 3
mopPrintDevice(fd, device)
	FILE	*fd;
        u_char device;
d411 3
a413 3
	name  = nmaGetDevice((int) device);
	
        (void)fprintf(fd, "%s '%s'",sname,name);
d417 1
a417 3
mopPrintTime(fd, ap)
	FILE	*fd;
        u_char *ap;
d419 3
a421 4
	(void)fprintf(fd,
		      "%04d-%02d-%02d %02d:%02d:%02d.%02d %d:%02d",
		      ap[0]*100 + ap[1],
		      ap[2],ap[3],ap[4],ap[5],ap[6],ap[7],ap[8],ap[9]);
d425 2
a426 5
mopPrintInfo(fd, pkt, index, moplen, mopcode, trans)
	FILE	*fd;
	u_char  *pkt, mopcode;
	int     *index, trans;
	u_short moplen;
d428 3
a430 3
        u_short itype,tmps;
	u_char  ilen ,tmpc,device;
	u_char  uc1,uc2,uc3,*ucp;
d432 1
a432 1
	
d435 1
a435 1
	switch(trans) {
d444 1
a444 1
	itype = mopGetShort(pkt,index); 
d446 2
a447 2
	while (*index < (int)(moplen + 2)) {
		ilen  = mopGetChar(pkt,index);
d450 1
a450 1
			tmpc  = mopGetChar(pkt,index);
d454 4
a457 5
			uc1 = mopGetChar(pkt,index);
			uc2 = mopGetChar(pkt,index);
			uc3 = mopGetChar(pkt,index);
			(void)fprintf(fd,"Maint Version: %d.%d.%d\n",
				      uc1,uc2,uc3);
d460 11
a470 11
			tmps = mopGetShort(pkt,index);
			(void)fprintf(fd,"Maint Funcion: %04x ( ",tmps);
			if (tmps &   1) (void)fprintf(fd, "Loop ");
			if (tmps &   2) (void)fprintf(fd, "Dump ");
			if (tmps &   4) (void)fprintf(fd, "Pldr ");
			if (tmps &   8) (void)fprintf(fd, "MLdr ");
			if (tmps &  16) (void)fprintf(fd, "Boot ");
			if (tmps &  32) (void)fprintf(fd, "CC ");
			if (tmps &  64) (void)fprintf(fd, "DLC ");
			if (tmps & 128) (void)fprintf(fd, "CCR ");
			(void)fprintf(fd, ")\n");
d473 3
a475 2
			ucp = pkt + *index; *index = *index + 6;
			(void)fprintf(fd,"Console User : ");
d477 1
a477 1
			(void)fprintf(fd, "\n");
d480 2
a481 3
			tmps = mopGetShort(pkt,index);
			(void)fprintf(fd,"Reserv Timer : %04x (%d)\n",
				      tmps,tmps); 
d484 2
a485 3
			tmps = mopGetShort(pkt,index);
			(void)fprintf(fd,"Cons Cmd Size: %04x (%d)\n",
				      tmps,tmps);
d488 2
a489 3
			tmps = mopGetShort(pkt,index);
			(void)fprintf(fd,"Cons Res Size: %04x (%d)\n",
				      tmps,tmps);
d492 3
a494 2
			ucp = pkt + *index; *index = *index + 6;
			(void)fprintf(fd,"Hardware Addr: ");
d496 1
a496 1
			(void)fprintf(fd, "\n");
d499 3
a501 2
			ucp = pkt + *index; *index = *index + 10;
			(void)fprintf(fd,"System Time: ");
d503 1
a503 1
			(void)fprintf(fd,"\n");
d506 2
a507 2
			device = mopGetChar(pkt,index);
			(void)fprintf(fd,"Comm Device  :   %02x ",device);
d509 1
a509 1
			(void)fprintf(fd, "\n");
d512 4
a515 5
			tmpc = mopGetChar(pkt,index);
			(void)fprintf(fd,"Software ID  :   %02x ",tmpc);
			if ((tmpc == 0)) {
				(void)fprintf(fd,"No software id");
			}
d517 1
a517 1
				(void)fprintf(fd,"Maintenance system");
d521 1
a521 1
				(void)fprintf(fd,"Standard operating system");
d525 5
a529 6
				(void)fprintf(fd,"'");
				for (i = 0; i < ((int) tmpc); i++) {
					(void)fprintf(fd,"%c",
						     mopGetChar(pkt,index));
				}
				(void)fprintf(fd,"'");
d531 1
a531 1
			(void)fprintf(fd,"\n");
d534 3
a536 3
			tmpc = mopGetChar(pkt,index);
			(void)fprintf(fd,"System Proc  :   %02x ",tmpc);
			switch (tmpc) { 
d538 1
a538 1
				(void)fprintf(fd, "PDP-11\n");
d541 1
a541 2
				(void)fprintf(fd,
					      "Communication Server\n");
d544 1
a544 1
				(void)fprintf(fd, "Professional\n");
d547 1
a547 1
				(void)fprintf(fd, "Scorpio\n");
d550 1
a550 1
				(void)fprintf(fd, "Amber\n");
d553 1
a553 1
				(void)fprintf(fd, "XLII Bridge\n");
d556 1
a556 1
				(void)fprintf(fd, "Unknown\n");
d561 3
a563 3
			tmpc = mopGetChar(pkt,index);
			(void)fprintf(fd,"Data Link Typ:   %02x ",tmpc);
			switch (tmpc) { 
d565 1
a565 1
				(void)fprintf(fd, "Ethernet\n");
d568 1
a568 1
				(void)fprintf(fd, "DDCMP\n");
d571 1
a571 1
				(void)fprintf(fd, "LAPB (X.25)\n");
d574 1
a574 1
				(void)fprintf(fd, "Unknown\n");
d579 2
a580 3
			tmps = mopGetShort(pkt,index);
			(void)fprintf(fd,"DL Buff Size : %04x (%d)\n",
				      tmps,tmps);
d589 1
a589 1
		        	switch (itype) {
d593 5
a597 7
					(void)fprintf(fd,
						     "ROM Sftwr Ver:   %02x '",
						      ilen);
					for (i = 0; i < ilen; i++) {
						(void)fprintf(fd,"%c",ucp[i]);
					}
					(void)fprintf(fd, "'\n");
d602 5
a606 7
					(void)fprintf(fd,
						     "Software Ver :   %02x '",
						      ilen);
					for (i = 0; i < ilen; i++) {
						(void)fprintf(fd, "%c",ucp[i]);
					}
					(void)fprintf(fd, "'\n");
d609 4
a612 6
					tmps = mopGetShort(pkt,index);
					(void)fprintf(fd,
						"DECnet Addr  : %d.%d (%d)\n",
						      tmps / 1024,
						      tmps % 1024,
						      tmps);
d617 5
a621 7
					(void)fprintf(fd,
						     "Node Name    :   %02x '",
						      ilen);
					for (i = 0; i < ilen; i++) {
						(void)fprintf(fd, "%c",ucp[i]);
					}
					(void)fprintf(fd, "'\n");
d626 5
a630 7
					(void)fprintf(fd,
						     "Node Ident   :   %02x '",
						      ilen);
					for (i = 0; i < ilen; i++) {
						(void)fprintf(fd, "%c",ucp[i]);
					}
					(void)fprintf(fd, "'\n");
d632 1
a632 1
				};
d634 5
a638 6
				ucp = pkt + *index; *index = *index + ilen;
				(void)fprintf(fd, "Info Type    : %04x (%d)\n",
					      itype,
					      itype);
				(void)fprintf(fd, "Info Data    :   %02x ",
					      ilen);
d640 3
a642 4
					if ((i % 16) == 0) {
						if ((i / 16) == 0) { 
						} else { 
							(void)fprintf(fd,
d644 1
a644 3
						};
					};
					(void)fprintf(fd, "%02x ",ucp[i]); 
d646 2
a647 2
				(void)fprintf(fd, "\n");
			};
d649 2
a650 2
		itype = mopGetShort(pkt,index); 
        }
@


1.5
log
@remove clause 3 and 4. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.4 2002/09/07 07:58:21 maja Exp $ */
d28 1
a28 1
static char rcsid[] = "$OpenBSD: print.c,v 1.4 2002/09/07 07:58:21 maja Exp $";
@


1.4
log
@pedantic ansify. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.3 1999/03/27 14:31:21 maja Exp $ */
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Mats O Jansson.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d28 1
a28 1
static char rcsid[] = "$OpenBSD: print.c,v 1.3 1999/03/27 14:31:21 maja Exp $";
@


1.3
log
@Upgrade to 2.5.4. Mopprobe is working again, and some linux support. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: print.c,v 1.2 1996/09/21 19:11:57 maja Exp $ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: print.c,v 1.2 1996/09/21 19:11:57 maja Exp $";
d79 1
a79 1
};
@


1.2
log
@Replace $Id with $OpenBSD, 3:rd try. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: print.c,v 1.1.1.1 1996/09/21 13:49:16 maja Exp $";
d55 6
a60 6
	if (ap[0] < 10) (void)fprintf(fd, " ");
	if (ap[1] < 10) (void)fprintf(fd, " ");
	if (ap[2] < 10) (void)fprintf(fd, " ");
	if (ap[3] < 10) (void)fprintf(fd, " ");
	if (ap[4] < 10) (void)fprintf(fd, " ");
	if (ap[5] < 10) (void)fprintf(fd, " ");
@


1.1
log
@Initial revision
@
text
@d1 2
d33 1
a33 1
static char rcsid[] = "$Id: print.c,v 1.18 1996/08/16 22:42:08 moj Exp $";
@


1.1.1.1
log
@Initial import of mopd-2.5.3. -moj
@
text
@@
