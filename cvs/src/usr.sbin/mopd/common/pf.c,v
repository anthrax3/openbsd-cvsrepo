head	1.17;
access;
symbols
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.16.0.6
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.2
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.15.0.24
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.26
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.18
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.22
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.20
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.16
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.14
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.12
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.10
	OPENBSD_5_0:1.15.0.8
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.16
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.12
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.10
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.8
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.6
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.4
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.2
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.11.0.6
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.4
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.4.0.10
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	MOPD254:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	MOPD253:1.1.1.1
	MAJA:1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2017.04.19.05.36.13;	author natano;	state Exp;
branches;
next	1.16;
commitid	0scK6D05EyEW7eqZ;

1.16
date	2016.05.28.07.00.18;	author natano;	state Exp;
branches;
next	1.15;
commitid	V3qpA476A18HvhDy;

1.15
date	2009.10.27.23.59.52;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.20.08.52.52;	author maja;	state Exp;
branches;
next	1.13;

1.13
date	2006.04.17.16.23.01;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.21.01.40.24;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2004.05.08.20.23.21;	author canacar;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.14.20.37.28;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2004.01.04.21.41.12;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.01.00.56.51;	author avsm;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.04.04.43.56;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.07.08.09.49;	author maja;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.13.10.13.27;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.20.17.45.33;	author bitblt;	state Exp;
branches;
next	1.3;

1.3
date	97.08.18.03.11.31;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.09.21.19.11.52;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	96.09.21.13.49.16;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.09.21.13.49.16;	author maja;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Switch base tools from /dev/bpf0 to /dev/bpf. Now that /dev/bpf has been
around for two releases, it should be safe to do so.

ok bluhm deraadt sthen tb yasuoka
@
text
@/*	$OpenBSD: pf.c,v 1.16 2016/05/28 07:00:18 natano Exp $ */

/*
 * Copyright (c) 1993-95 Mats O Jansson.  All rights reserved.
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is partly derived from rarpd.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <sys/socket.h>
#include <sys/uio.h>
#include <net/if.h>

#include <net/bpf.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <netdb.h>
#include <ctype.h>
#include <string.h>
#include <err.h>
#include <errno.h>

#include <syslog.h>

#include "common/mopdef.h"

/*
 * Variables
 */

extern int promisc;

/*
 * Return information to device.c how to open device.
 * In this case the driver can handle both Ethernet type II and
 * IEEE 802.3 frames (SNAP) in a single pfOpen.
 */
/* ARGSUSED */
int
pfTrans(char *interface)
{
	return (TRANS_ETHER + TRANS_8023 + TRANS_AND);
}

/*
 * Open and initialize packet filter.
 */
/* ARGSUSED */
int
pfInit(char *interface, int mode, u_short protocol, int typ)
{
	int		fd;
	struct ifreq	ifr;
	u_int		dlt;
	int		immediate;

	static struct bpf_insn insns[] = {
		BPF_STMT(BPF_LD | BPF_H | BPF_ABS, 12),
		BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, 0x4711, 4, 0),
		BPF_STMT(BPF_LD | BPF_H | BPF_ABS, 20),
		BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, 0x4711, 0, 3),
		BPF_STMT(BPF_LD | BPF_H | BPF_ABS, 14),
		BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, 0xaaaa, 0, 1),
		BPF_STMT(BPF_RET | BPF_K, 1520),
		BPF_STMT(BPF_RET | BPF_K, 0),
	};
	static struct bpf_program filter = {
		sizeof insns / sizeof(insns[0]),
		insns
	};

	if ((fd = open("/dev/bpf", mode)) == -1) {
		syslog(LOG_ERR,"pfInit: open bpf %m");
		return (-1);
	}

	/* Set immediate mode so packets are processed as they arrive. */
	immediate = 1;
	if (ioctl(fd, BIOCIMMEDIATE, &immediate) < 0) {
		syslog(LOG_ERR,"pfInit: BIOCIMMEDIATE: %m");
		return (-1);
	}
	strncpy(ifr.ifr_name, interface, sizeof ifr.ifr_name);
	if (ioctl(fd, BIOCSETIF, &ifr) < 0) {
		syslog(LOG_ERR,"pfInit: BIOCSETIF: %m");
		return (-1);
	}
	/* Check that the data link layer is an Ethernet; this code won't work
	 * with anything else. */
	if (ioctl(fd, BIOCGDLT, &dlt) < 0) {
		syslog(LOG_ERR,"pfInit: BIOCGDLT: %m");
		return (-1);
	}
	if (dlt != DLT_EN10MB) {
		syslog(LOG_ERR,"pfInit: %s is not ethernet", interface);
		return (-1);
	}
	if (promisc)
		/* Set promiscuous mode. */
		if (ioctl(fd, BIOCPROMISC, 0) < 0) {
			syslog(LOG_ERR,"pfInit: BIOCPROMISC: %m");
			return (-1);
		}

	/* Set filter program. */
	insns[1].k = protocol;
	insns[3].k = protocol;

	if (ioctl(fd, BIOCSETF, &filter) < 0) {
		syslog(LOG_ERR,"pfInit: BIOCSETF: %m");
		return (-1);
	}

	/* XXX set the same write filter (for protocol only) */
	if (ioctl(fd, BIOCSETWF, &filter) < 0) {
		syslog(LOG_ERR,"pfInit: BIOCSETWF: %m");
		return (-1);
	}

	/* Lock the interface to prevent further changes */
	if (ioctl(fd, BIOCLOCK) < 0) {
		syslog(LOG_ERR,"pfInit: BIOCLOCK: %m");
		return (-1);
	}

	return (fd);
}

/*
 * Add a Multicast address to the interface
 */
/* ARGSUSED */
int
pfAddMulti(int s, char *interface, char *addr)
{
	struct ifreq	ifr;
	int		fd;

	strncpy(ifr.ifr_name, interface, sizeof(ifr.ifr_name) - 1);
	ifr.ifr_name[sizeof(ifr.ifr_name) - 1] = 0;

	ifr.ifr_addr.sa_family = AF_UNSPEC;
	bcopy(addr, ifr.ifr_addr.sa_data, 6);

	/*
	 * open a socket, temporarily, to use for SIOC* ioctls
	 */
	if ((fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
		syslog(LOG_ERR, "pfAddMulti: socket: %m");
		return (-1);
	}
	if (ioctl(fd, SIOCADDMULTI, &ifr) < 0) {
		syslog(LOG_ERR, "pfAddMulti: SIOCADDMULTI: %m");
		close(fd);
		return (-1);
	}
	close(fd);

	return (0);
}

/*
 * Delete a Multicast address from the interface
 */
/* ARGSUSED */
int
pfDelMulti(int s, char *interface, char *addr)
{
	struct ifreq	ifr;
	int		fd;

	strncpy(ifr.ifr_name, interface, sizeof (ifr.ifr_name) - 1);
	ifr.ifr_name[sizeof(ifr.ifr_name)-1] = 0;

	ifr.ifr_addr.sa_family = AF_UNSPEC;
	bcopy(addr, ifr.ifr_addr.sa_data, 6);

	/*
	 * open a socket, temporarily, to use for SIOC* ioctls
	 *
	 */
	if ((fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
		syslog(LOG_ERR, "pfDelMulti: socket: %m");
		return (-1);
	}
	if (ioctl(fd, SIOCDELMULTI, &ifr) < 0) {
		syslog(LOG_ERR, "pfAddMulti: SIOCDELMULTI: %m");
		close(fd);
		return (-1);
	}
	close(fd);

	return (0);
}

/*
 * read a packet
 */
int
pfRead(int fd, u_char *buf, int len)
{
	return (read(fd, buf, len));
}

/*
 * write a packet
 */
int
pfWrite(int fd, u_char *buf, int len, int trans)
{
	struct iovec	iov[2];

	/* XXX */
	switch (trans) {
	case TRANS_8023:
		iov[0].iov_base = buf;
		iov[0].iov_len = 22;
		iov[1].iov_base = buf + 22;
		iov[1].iov_len = len - 22;
		break;
	default:
		iov[0].iov_base = buf;
		iov[0].iov_len = 14;
		iov[1].iov_base = buf + 14;
		iov[1].iov_len = len - 14;
		break;
	}

	if (writev(fd, iov, 2) == len)
		return (len);

	return (-1);
}

@


1.16
log
@Replace the /dev/bpf* open loop with a plain open("/dev/bpf0", ...).
ok deraadt jca
@
text
@d1 1
a1 1
/*	$OpenBSD: pf.c,v 1.15 2009/10/27 23:59:52 deraadt Exp $ */
d101 1
a101 1
	if ((fd = open("/dev/bpf0", mode)) == -1) {
@


1.15
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: pf.c,v 1.14 2006/04/20 08:52:52 maja Exp $ */
a81 2
	int		n = 0;
	char		device[sizeof "/dev/bpf000"];
d101 1
a101 7
	/* Go through all the minors and find one that isn't in use. */
	do {
		snprintf(device, sizeof device, "/dev/bpf%d", n++);
		fd = open(device, mode);
	} while (fd < 0 && errno == EBUSY);

	if (fd < 0) {
d124 1
a124 1
		syslog(LOG_ERR,"pfInit: %s is not ethernet", device);
@


1.14
log
@More delint. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: pf.c,v 1.13 2006/04/17 16:23:01 deraadt Exp $ */
a29 5

#ifndef lint
static const char rcsid[] =
    "$OpenBSD: pf.c,v 1.13 2006/04/17 16:23:01 deraadt Exp $";
#endif
@


1.13
log
@more cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: pf.c,v 1.12 2005/12/21 01:40:24 millert Exp $ */
d33 1
a33 1
    "$OpenBSD: pf.c,v 1.12 2005/12/21 01:40:24 millert Exp $";
d72 1
a72 1

d82 1
d126 1
a126 1
	if (ioctl(fd, BIOCSETIF, (caddr_t) & ifr) < 0) {
d132 1
a132 1
	if (ioctl(fd, BIOCGDLT, (caddr_t)&dlt) < 0) {
d142 1
a142 1
		if (ioctl(fd, BIOCPROMISC, (caddr_t)0) < 0) {
d151 1
a151 1
	if (ioctl(fd, BIOCSETF, (caddr_t) & filter) < 0) {
d157 1
a157 1
	if (ioctl(fd, BIOCSETWF, (caddr_t) & filter) < 0) {
d174 1
d194 1
a194 1
	if (ioctl(fd, SIOCADDMULTI, (caddr_t)&ifr) < 0) {
d207 1
d228 1
a228 1
	if (ioctl(fd, SIOCDELMULTI, (caddr_t)&ifr) < 0) {
@


1.12
log
@Userland programs should include <errno.h> not <sys/errno.h>
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pf.c,v 1.11 2004/05/08 20:23:21 canacar Exp $ */
d31 1
a31 1
#ifndef LINT
d33 1
a33 1
    "$OpenBSD: pf.c,v 1.11 2004/05/08 20:23:21 canacar Exp $";
@


1.11
log
@Filter bpf writes and lock descriptor. tested by hshoexer@@
ok henning@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pf.c,v 1.10 2004/04/14 20:37:28 henning Exp $ */
d33 1
a33 1
    "$OpenBSD: pf.c,v 1.10 2004/04/14 20:37:28 henning Exp $";
a46 1
#include <sys/errno.h>
d55 1
@


1.10
log
@4000 lines worth of cleanup, KNF, Knall&Rauch elemination and such
tested by hshoexer, "don't wait for me" miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pf.c,v 1.9 2004/01/04 21:41:12 drahn Exp $ */
d33 1
a33 1
    "$OpenBSD: pf.c,v 1.9 2004/01/04 21:41:12 drahn Exp $";
d154 13
@


1.9
log
@gcc3 doesn't like varargs, it was found that the varargs.h inclusion is
unnecessary for these files, delete. ok espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pf.c,v 1.8 2003/12/01 00:56:51 avsm Exp $ */
d32 2
a33 1
static const char rcsid[] = "$OpenBSD: pf.c,v 1.8 2003/12/01 00:56:51 avsm Exp $";
d55 1
a64 1
extern int errno;
d74 1
a74 2
pfTrans(interface)
	char *interface;
d76 1
a76 1
	return TRANS_ETHER+TRANS_8023+TRANS_AND;
a81 1

d83 1
a83 4
pfInit(interface, mode, protocol, typ)
	char *interface;
	u_short protocol;
	int typ, mode;
d85 6
a90 6
	int	fd;
	int	n = 0;
	char	device[sizeof "/dev/bpf000"];
	struct ifreq ifr;
	u_int	dlt;
	int	immediate;
d106 2
a107 2
	
  	/* Go through all the minors and find one that isn't in use. */
d109 1
a109 1
		(void) snprintf(device, sizeof device, "/dev/bpf%d", n++);
d114 2
a115 2
      		syslog(LOG_ERR,"pfInit: open bpf %m");
		return(-1);
d117 1
a117 1
  
d121 2
a122 2
      		syslog(LOG_ERR,"pfInit: BIOCIMMEDIATE: %m");
		return(-1);
d124 1
a124 1
	(void) strncpy(ifr.ifr_name, interface, sizeof ifr.ifr_name);
d126 2
a127 2
      		syslog(LOG_ERR,"pfInit: BIOCSETIF: %m");
		return(-1);
d131 3
a133 3
	if (ioctl(fd, BIOCGDLT, (caddr_t) & dlt) < 0) {
      		syslog(LOG_ERR,"pfInit: BIOCGDLT: %m");
		return(-1);
d136 2
a137 2
      		syslog(LOG_ERR,"pfInit: %s is not ethernet", device);
		return(-1);
d139 1
a139 1
	if (promisc) {
d142 2
a143 2
      			syslog(LOG_ERR,"pfInit: BIOCPROMISC: %m");
			return(-1);
d145 1
a145 1
	}
d151 2
a152 2
      		syslog(LOG_ERR,"pfInit: BIOCSETF: %m");
		return(-1);
d154 1
a154 1
	return(fd);
a159 1

d161 1
a161 3
pfAddMulti(s, interface, addr)
	int s;
	char *interface, *addr;
d163 5
a167 5
	struct ifreq ifr;
	int	fd;
	
	strncpy(ifr.ifr_name, interface,sizeof(ifr.ifr_name) - 1);
	ifr.ifr_name[sizeof(ifr.ifr_name)-1] = 0;
d171 1
a171 1
	
a173 1
	 *
d177 1
a177 1
		return(-1);
d182 1
a182 1
		return(-1);
d185 2
a186 2
	
	return(0);
a191 1

d193 1
a193 3
pfDelMulti(s, interface, addr)
	int s;
	char *interface, *addr;
d195 3
a197 3
	struct ifreq ifr;
	int	fd;
	
d200 1
a200 1
	
d203 1
a203 1
	
d210 1
a210 1
		return(-1);
d215 1
a215 1
		return(-1);
d218 2
a219 2
	
	return(0);
a224 1

d226 1
a226 3
pfRead(fd, buf, len)
	int	fd, len;
	u_char *buf;
d228 1
a228 1
	return(read(fd, buf, len));
a233 1

d235 1
a235 3
pfWrite(fd, buf, len, trans)
	int fd, len, trans;
	u_char *buf;
d237 3
a239 3
	
	struct iovec iov[2];
	
d242 1
a242 1
		iov[0].iov_base = (caddr_t)buf;
d244 2
a245 2
		iov[1].iov_base = (caddr_t)buf+22;
		iov[1].iov_len = len-22;
d248 1
a248 1
		iov[0].iov_base = (caddr_t)buf;
d250 2
a251 2
		iov[1].iov_base = (caddr_t)buf+14;
		iov[1].iov_len = len-14;
d256 3
a258 3
		return(len);
	
	return(-1);
@


1.8
log
@-Wall cleanup: trim unused vars, right format strings, constify rcsids,
braces where needed, add missing prototypes.

tested and ok maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pf.c,v 1.7 2003/06/04 04:43:56 deraadt Exp $ */
d32 1
a32 1
static const char rcsid[] = "$OpenBSD: pf.c,v 1.7 2003/06/04 04:43:56 deraadt Exp $";
a55 1
#include <varargs.h>
@


1.7
log
@more 3/4 cleanups for lazy developers
@
text
@d1 1
a1 1
/*	$OpenBSD: pf.c,v 1.6 2002/09/07 08:09:49 maja Exp $ */
d32 1
a32 1
static char rcsid[] = "$OpenBSD: pf.c,v 1.6 2002/09/07 08:09:49 maja Exp $";
@


1.6
log
@off by one fix from aaron@@. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: pf.c,v 1.5 2002/07/13 10:13:27 deraadt Exp $ */
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Mats O Jansson.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d32 1
a32 1
static char rcsid[] = "$OpenBSD: pf.c,v 1.5 2002/07/13 10:13:27 deraadt Exp $";
@


1.5
log
@use snprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: pf.c,v 1.4 2000/02/20 17:45:33 bitblt Exp $ */
d37 1
a37 1
static char rcsid[] = "$OpenBSD: pf.c,v 1.4 2000/02/20 17:45:33 bitblt Exp $";
d180 1
a180 1
	ifr.ifr_name[sizeof(ifr.ifr_name)] = 0;
d216 1
a216 1
	ifr.ifr_name[sizeof(ifr.ifr_name)] = 0;
@


1.4
log
@

string manipluation paranoia changes.  Most probably not exploitable.
@
text
@d1 1
a1 1
/*	$OpenBSD: pf.c,v 1.3 1997/08/18 03:11:31 millert Exp $ */
d37 1
a37 1
static char rcsid[] = "$OpenBSD: pf.c,v 1.3 1997/08/18 03:11:31 millert Exp $";
d119 1
a119 1
		(void) sprintf(device, "/dev/bpf%d", n++);
@


1.3
log
@#include <string.h> not <strings.h> -- Yes, I'm a weanie...
@
text
@d1 1
a1 1
/*	$OpenBSD: pf.c,v 1.2 1996/09/21 19:11:52 maja Exp $ */
d37 1
a37 1
static char rcsid[] = "$OpenBSD: pf.c,v 1.2 1996/09/21 19:11:52 maja Exp $";
d179 2
a180 1
	strcpy(ifr.ifr_name, interface);
d215 2
a216 1
	strcpy(ifr.ifr_name, interface);
@


1.2
log
@Replace $Id with $OpenBSD, 3:rd try. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d37 1
a37 1
static char rcsid[] = "$OpenBSD: pf.c,v 1.1.1.1 1996/09/21 13:49:16 maja Exp $";
d58 1
a58 1
#include <strings.h>
@


1.1
log
@Initial revision
@
text
@d1 2
d37 1
a37 1
static char rcsid[] = "$Id: pf.c,v 1.16 1996/08/06 14:19:48 moj Exp $";
@


1.1.1.1
log
@Initial import of mopd-2.5.3. -moj
@
text
@@
