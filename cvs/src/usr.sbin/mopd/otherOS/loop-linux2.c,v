head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.32
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.28
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.24
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.26
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.18
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.22
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.20
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.16
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.14
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.12
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.10
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.0.12
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.10
	OPENBSD_2_8:1.1.0.8
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.6
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1
	MOPD254:1.1;
locks; strict;
comment	@ * @;


1.7
date	2009.10.27.23.59.52;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.17.16.23.01;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.21.01.40.24;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.01.00.56.51;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.21.38.40;	author maja;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.16.21.28.04;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	99.03.27.14.31.22;	author maja;	state Exp;
branches;
next	;


desc
@@


1.7
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@/*
 * Copyright (c) 1993-95 Mats O Jansson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <errno.h>
#include <stdlib.h>
#include <strings.h>
#include <unistd.h>
#if defined(__bsdi__) || defined(__FreeBSD__)
#include <sys/time.h>
#endif
#include <sys/ioctl.h>

#include "os.h"
#include "common/common.h"
#include "common/mopdef.h"

int
mopOpenRC(p, trans)
	struct if_info *p;
	int	trans;
{
#ifndef NORC
	return (*(p->iopen))(p->if_name,
			     O_RDWR,
			     MOP_K_PROTO_RC,
			     trans);
#else
	return -1;
#endif
}

int
mopOpenDL(p, trans)
	struct if_info *p;
	int	trans;
{
#ifndef NODL
	return (*(p->iopen))(p->if_name,
			     O_RDWR,
			     MOP_K_PROTO_DL,
			     trans);
#else
	return -1;
#endif
}

void
mopReadRC()
{
}

void
mopReadDL()
{
}

/*
 * The list of all interfaces that are being listened to.  loop()
 * "selects" on the descriptors in this list.
 */
struct if_info *iflist;

void   mopProcess(struct if_info *, u_char *);

/*
 * Loop indefinitely listening for MOP requests on the
 * interfaces in 'iflist'.
 */
void
Loop()
{
	u_char *buf, *bp, *ep;
	int     cc;
	fd_set  fds, listeners;
	int     bufsize = 1100, maxfd =0;
	struct if_info *ii;

/* FIXME : this is a hack, for some reason specifying an interface would 
 * cause it to fail because bufsize is an impossible number, so I added a 
 * sanity check because I'm too lazy to figure out why. -- Karl
 */
	if (bufsize > 1100)
	 	bufsize = 64;

	if (iflist == 0) {
		syslog(LOG_ERR, "no interfaces");
		exit(0);
	}

	 buf = (u_char *) malloc((unsigned) bufsize); 

	if (buf == 0) {
		syslog(LOG_ERR, "malloc: %m");
		exit(0);
	}
	/*
         * Find the highest numbered file descriptor for select().
         * Initialize the set of descriptors to listen to.
         */
	FD_ZERO(&fds);
	for (ii = iflist; ii; ii = ii->next) {
		if (ii->fd != -1) {
			FD_SET(ii->fd, &fds);
			if (ii->fd > maxfd)
				maxfd = ii->fd;
	        }
	}
	while (1) {
		listeners = fds;
		if (select(maxfd + 1, &listeners, (fd_set *) 0,
			(fd_set *) 0, (struct timeval *) 0) < 0) {
			syslog(LOG_ERR, "select: %m");
			exit(0);
		}
		for (ii = iflist; ii; ii = ii->next) {
			if (ii->fd != -1) {
				if (!FD_ISSET(ii->fd, &listeners))
					continue;
			}
	again:
			cc = read(ii->fd, (char *) buf, bufsize);
			/* Don't choke when we get ptraced */
			if (cc < 0 && errno == EINTR)
				goto again;

			bp = buf;
			ep = bp + cc;
	
if(bp < ep)
	{
	mopProcess(ii,buf);
	}

}

}		
}	

@


1.6
log
@more cleanup
@
text
@a24 4
#ifndef lint
static const char rcsid[] = "$Id: loop-linux2.c,v 1.5 2005/12/21 01:40:24 millert Exp $";
#endif

@


1.5
log
@Userland programs should include <errno.h> not <sys/errno.h>
OK deraadt@@
@
text
@d25 2
a26 2
#ifndef LINT
static const char rcsid[] = "$Id: loop-linux2.c,v 1.4 2003/12/01 00:56:51 avsm Exp $";
@


1.4
log
@-Wall cleanup: trim unused vars, right format strings, constify rcsids,
braces where needed, add missing prototypes.

tested and ok maja@@
@
text
@d26 1
a26 1
static const char rcsid[] = "$Id: loop-linux2.c,v 1.3 2003/06/02 21:38:40 maja Exp $";
d29 1
a36 1
#include <sys/errno.h>
@


1.3
log
@remove clause 3 and 4. -moj
@
text
@d26 1
a26 1
static char rcsid[] = "$Id: loop-linux2.c,v 1.2 2002/02/16 21:28:04 millert Exp $";
@


1.2
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@a11 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Mats O Jansson.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d26 1
a26 1
static char rcsid[] = "$Id: loop-linux2.c,v 1.1 1999/03/27 14:31:22 maja Exp $";
@


1.1
log
@Upgrade to 2.5.4. Mopprobe is working again, and some linux support. -moj
@
text
@d31 1
a31 1
static char rcsid[] = "$Id: loop-bsd.c,v 1.11 1996/08/16 22:41:28 moj Exp $";
d93 1
a93 1
void   mopProcess    __P((struct if_info *, u_char *));
@

