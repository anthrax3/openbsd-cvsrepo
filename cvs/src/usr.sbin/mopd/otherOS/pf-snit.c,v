head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.34
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.32
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.28
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.24
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.26
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.18
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.22
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.20
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.16
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.16
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.12
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	MOPD254:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	MOPD253:1.1.1.1
	MAJA:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2009.10.27.23.59.53;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.17.16.23.01;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.01.00.56.51;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.21.38.40;	author maja;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.16.44.25;	author mpech;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.20.17.45.34;	author bitblt;	state Exp;
branches;
next	1.2;

1.2
date	96.09.21.19.12.50;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	96.09.21.13.49.17;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.09.21.13.49.17;	author maja;	state Exp;
branches;
next	;


desc
@@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@/*	$OpenBSD: pf-snit.c,v 1.7 2006/04/17 16:23:01 deraadt Exp $ */

/*
 * Copyright (c) 1993-96 Mats O Jansson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <stdio.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <sys/socket.h>
#include <sys/uio.h>
#include <net/if.h>

#define	DEV_NIT	"/dev/nit"
#include <net/nit.h>
#include <net/nit_if.h>
#include <net/nit_pf.h>
#include <net/nit_buf.h>
#include <net/packetfilt.h>
#include <stropts.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <netdb.h>
#include <ctype.h>
#include <syslog.h>

#include "common/mopdef.h"

/*
 * Variables
 */

/* struct ifreq ifr; */
extern int errno;
extern int promisc;

/*
 * Return information to device.c how to open device.
 * In this case the driver can handle both Ethernet type II and
 * IEEE 802.3 frames (SNAP) in a single pfOpen.
 */

int
pfTrans(interface)
	char *interface;
{
	return TRANS_ETHER+TRANS_8023+TRANS_AND;
}

/*
 * Open and initialize packet filter.
 */

int
pfInit(interface, mode, protocol, trans)
	char *interface;
	u_short protocol;
	int trans, mode;
{
	int	 fd;
	int	 ioarg;
	char	 device[64];
	unsigned long if_flags;
	
	struct ifreq ifr;
	struct strioctl si;
	
	/* get clone */
	if ((fd = open(DEV_NIT, mode)) < 0) {
		syslog(LOG_ERR,"pfInit: open nit %m");
		return(-1);
	}
	
	/*
	 * set filter for protocol 
	 */
	
	if (setup_pf(fd, protocol, trans) < 0)
		return(-1);
	
	/*
	 * set options, bind to underlying interface
	 */
	
	strncpy(ifr.ifr_name, interface, sizeof(ifr.ifr_name));
	
	/* bind */
	si.ic_cmd = NIOCBIND;	/* bind to underlying interface */
	si.ic_timout = 10;
	si.ic_len = sizeof(ifr);
	si.ic_dp = (caddr_t)&ifr;
	if (ioctl(fd, I_STR, (caddr_t)&si) < 0) {
		syslog(LOG_ERR,"pfinit: I_STR %m");
		return(-1);
	}
	
	if (promisc) {
		if_flags = NI_PROMISC;
		si.ic_cmd = NIOCSFLAGS;
		si.ic_timout = 10;
		si.ic_len = sizeof(if_flags);
		si.ic_dp = (caddr_t)&if_flags;
		if (ioctl(fd, I_STR, (caddr_t)&si) < 0) {
			syslog(LOG_ERR,"pfInit: I_STR (promisc) %m");
			return(-1);
		}
	}
	
	/* set up messages */
	if (ioctl(fd, I_SRDOPT, (char *)RMSGD) < 0) { /* want messages */
		syslog(LOG_ERR,"pfInit: I_SRDOPT %m");
		return(-1);
	}

	/* flush read queue */
	if (ioctl(fd, I_FLUSH, (char *)FLUSHR) < 0) {
		syslog(LOG_ERR,"pfInit: I_FLUSH %m");
		return(-1);
	}
	
	return(fd);
}

/*
 * establish protocol filter
 */

int
setup_pf(s, prot, trans)
	int s, trans;
	u_short prot;
{
	int ioarg;
	u_short offset;

	struct packetfilt pf;
	u_short *fwp = pf.Pf_Filter;
	struct strioctl si;

#define	s_offset(structp, element) (&(((structp)0)->element))

	bzero(&pf, sizeof(pf));
 	pf.Pf_Priority = 128;

	offset = ((int)s_offset(struct ether_header *, ether_type))/sizeof(u_short);
	*fwp++ = ENF_PUSHWORD + offset;		/* Check Ethernet type II    */
	*fwp++ = ENF_PUSHLIT | ENF_EQ;		/* protocol prot             */
	*fwp++ = htons(prot);
	*fwp++ = ENF_PUSHWORD + offset + 4;	/* Check 802.3 protocol prot */
	*fwp++ = ENF_PUSHLIT | ENF_EQ;
	*fwp++ = htons(prot);
	*fwp++ = ENF_PUSHWORD + offset + 1;	/* Check for SSAP and DSAP   */
	*fwp++ = ENF_PUSHLIT | ENF_EQ;
	*fwp++ = htons(0xaaaa);
	*fwp++ = ENF_AND;
	*fwp++ = ENF_OR;
	pf.Pf_FilterLen = 11;

	si.ic_cmd = NIOCSETF;
	si.ic_timout = 10;
	si.ic_len = sizeof(pf);
	si.ic_dp = (char *)&pf;
	if (ioctl(s, I_PUSH, "pf") < 0) {
		syslog(LOG_ERR,"setup_pf: I_PUSH %m");
		return(-1);
	}
	if (ioctl(s, I_STR, (char *)&si) < 0) {
		syslog(LOG_ERR,"setup_pf: I_STR %m");
		return(-1);
	}
	
	return(0);
}

/*
 * Get the interface ethernet address
 */

int
pfEthAddr(fd, addr)
int fd;
u_char *addr;
{
	struct ifreq ifr;
	struct sockaddr *sa;
	
	if (ioctl(fd, SIOCGIFADDR, &ifr) < 0) {
		syslog(LOG_ERR,"pfEthAddr: SIOCGIFADDR %m");
		return(-1);
	}
	sa = (struct sockaddr *)ifr.ifr_data;
	bcopy((char *)sa->sa_data, (char *)addr, 6);
	
	return(0);
}

/*
 * Add a Multicast address to the interface
 */

int
pfAddMulti(s, interface, addr)
	int s;
	char *interface, *addr;
{
	struct ifreq ifr;
	int fd;
	
	strncpy(ifr.ifr_name, interface, sizeof (ifr.ifr_name) -1);
	ifr.ifr_name[sizeof(ifr.ifr_name)] = 0;
	
	ifr.ifr_addr.sa_family = AF_UNSPEC;
	bcopy(addr, ifr.ifr_addr.sa_data, 6);
	
	/*
	 * open a socket, temporarily, to use for SIOC* ioctls
	 */

	if ((fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
		syslog(LOG_ERR,"pfAddMulti: socket() %m");
		return(-1);
	}
	if (ioctl(fd, SIOCADDMULTI, (caddr_t)&ifr) < 0) {
		syslog(LOG_ERR,"pfAddMulti: SIOCADDMULTI %m");
		close(fd);
		return(-1);
	}
	close(fd);
	
	return(0);
}

/*
 * delete a multicast address from the interface
 */

int
pfDelMulti(s, interface, addr)
int s;
char *interface, *addr;
{
	struct ifreq ifr;
	int fd;
	
	strncpy(ifr.ifr_name, interface, sizeof (ifr.ifr_name) -1);
	ifr.ifr_name[sizeof(ifr.ifr_name)] = 0;
	
	ifr.ifr_addr.sa_family = AF_UNSPEC;
	bcopy(addr, ifr.ifr_addr.sa_data, 6);
	
	/*
	 * open a socket, temporarily, to use for SIOC* ioctls
	 *
	 */
	if ((fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
		syslog(LOG_ERR,"pfDelMulti: socket() %m");
		return(-1);
	}
	
	if (ioctl(fd, SIOCDELMULTI, (caddr_t)&ifr) < 0) {
		syslog(LOG_ERR,"pfDelMulti: SIOCDELMULTI %m");
		close(fd);
		return(-1);
	}
	close(fd);
	
	return(0);
}

/*
 * read a packet
 */

int
pfRead(fd, buf, len)
int fd, len;
u_char *buf;
{
	return(read(fd, buf, len));
}

/*
 * write a packet
 */

int
pfWrite(fd, buf, len, trans)
	int fd, len, trans;
	u_char *buf;
{
	
	struct sockaddr sa;
	struct strbuf pbuf, dbuf;
	
	sa.sa_family = AF_UNSPEC;
	bcopy(buf, sa.sa_data, sizeof(sa.sa_data));

	switch (trans) {
	default:
		pbuf.len = sizeof(struct sockaddr);
		pbuf.buf = (char *) &sa;
		dbuf.len = len-14;
		dbuf.buf = (char *)buf+14;
		break;
	}

	if (putmsg(fd, &pbuf, &dbuf, 0) == 0)
	  return(len);
	
	return(-1);
}
@


1.7
log
@more cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: pf-snit.c,v 1.6 2003/12/01 00:56:51 avsm Exp $ */
a25 4

#ifndef lint
static const char rcsid[] = "$OpenBSD: pf-snit.c,v 1.6 2003/12/01 00:56:51 avsm Exp $";
#endif
@


1.6
log
@-Wall cleanup: trim unused vars, right format strings, constify rcsids,
braces where needed, add missing prototypes.

tested and ok maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pf-snit.c,v 1.5 2003/06/02 21:38:40 maja Exp $ */
d27 2
a28 2
#ifndef LINT
static const char rcsid[] = "$OpenBSD: pf-snit.c,v 1.5 2003/06/02 21:38:40 maja Exp $";
@


1.5
log
@remove clause 3 and 4. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: pf-snit.c,v 1.4 2002/03/14 16:44:25 mpech Exp $ */
d28 1
a28 1
static char rcsid[] = "$OpenBSD: pf-snit.c,v 1.4 2002/03/14 16:44:25 mpech Exp $";
@


1.4
log
@kill more registers.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: pf-snit.c,v 1.3 2000/02/20 17:45:34 bitblt Exp $ */
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Mats O Jansson.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d28 1
a28 1
static char rcsid[] = "$OpenBSD: pf-snit.c,v 1.3 2000/02/20 17:45:34 bitblt Exp $";
@


1.3
log
@

string manipluation paranoia changes.  Most probably not exploitable.
@
text
@d1 1
a1 1
/*	$OpenBSD: pf-snit.c,v 1.2 1996/09/21 19:12:50 maja Exp $ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: pf-snit.c,v 1.2 1996/09/21 19:12:50 maja Exp $";
d170 1
a170 1
	register u_short *fwp = pf.Pf_Filter;
@


1.2
log
@Replace $Id with $OpenBSD, 3:rd try. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: pf-snit.c,v 1.1.1.1 1996/09/21 13:49:17 maja Exp $";
d242 2
a243 1
	strcpy(ifr.ifr_name, interface);
d278 2
a279 1
	strcpy(ifr.ifr_name, interface);
@


1.1
log
@Initial revision
@
text
@d1 2
d33 1
a33 1
static char rcsid[] = "$Id: pf-snit.c,v 1.1 1996/08/08 11:47:33 moj Exp $";
@


1.1.1.1
log
@Initial import of mopd-2.5.3. -moj
@
text
@@
