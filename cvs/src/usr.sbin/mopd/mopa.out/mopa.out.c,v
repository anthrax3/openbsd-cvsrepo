head	1.16;
access;
symbols
	OPENBSD_6_0:1.14.0.8
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.4
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.13.0.6
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.11.0.10
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.8
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.12
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	MOPD254:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	MOPD253:1.1.1.1
	MAJA:1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2017.01.21.08.33.51;	author krw;	state Exp;
branches;
next	1.15;
commitid	xpTSTOgSQRGS1RiF;

1.15
date	2016.12.20.22.19.08;	author krw;	state Exp;
branches;
next	1.14;
commitid	he6NK9EzIygmfrzo;

1.14
date	2014.12.13.14.44.59;	author miod;	state Exp;
branches;
next	1.13;
commitid	KfI83DTUbjunQXXj;

1.13
date	2013.10.17.08.02.21;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2013.07.05.21.02.07;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2010.11.19.21.09.20;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.27.23.59.52;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2009.07.11.13.42.32;	author sobrado;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.29.16.26.56;	author maja;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.17.16.23.01;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.01.00.56.51;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.13.22.39.38;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.14.21.35.01;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.07.20.17.43;	author todd;	state Exp;
branches;
next	1.2;

1.2
date	96.09.21.18.04.56;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	96.09.21.13.49.17;	author maja;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.09.21.13.49.17;	author maja;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Nuke whitespace foolish enough to expose itself during the great
"warning:" rectification.
@
text
@/*	$OpenBSD: mopa.out.c,v 1.15 2016/12/20 22:19:08 krw Exp $ */

/*
 * mopa.out - Convert a Unix format kernel into something that
 * can be transferred via MOP.
 *
 * This code was written while referring to the NetBSD/vax boot
 * loader. Therefore anything that can be booted by the Vax
 * should be convertable with this program.
 *
 * If necessary, the a.out header is stripped, and the program
 * segments are padded out. The BSS segment is zero filled.
 * A header is prepended that looks like an IHD header. In
 * particular the Unix machine ID is placed where mopd expects
 * the image type to be (offset is IHD_W_ALIAS). If the machine
 * ID could be mistaken for a DEC image type, then the conversion
 * is aborted. The original a.out header is copied into the front
 * of the header so that once we have detected the Unix machine
 * ID we can haul the load address and the xfer address out.
 */

/*
 * Copyright (c) 1996 Lloyd Parkes.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Lloyd Parkes.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "os.h"
#include "common/common.h"
#include "common/mopdef.h"
#include "common/file.h"
#if defined(__OpenBSD__)
#include <sys/exec.h>
#endif
#if defined(__FreeBSD__)
#include <sys/imgact_aout.h>
#endif
#if defined(__bsdi__)
#include <a.out.h>
#define NOAOUT
#endif
#if !defined(MID_VAX)
#define MID_VAX 140
#endif

#ifndef NOELF
#if defined(__NetBSD__) || defined(__OpenBSD__)
#include <sys/exec_elf.h>
#else
#define NOELF
#endif
#endif

#ifndef NOELF
#if !defined(_LP64)
#define NOELF64
#endif
#endif

u_char header[512];		/* The MOP header we generate is 1 block. */
#if !defined(NOAOUT)
struct exec ex, ex_swap;
#endif

int
main (int argc, char **argv)
{
	FILE   *out;		/* A FILE because that is easier. */
	int	i, j;
	struct dllist dl;
	short image_type;

#ifdef NOAOUT
	fprintf(stderr, "%s: has no function in OS/BSD\n", argv[0]);
	return(1);
#endif

	if (argc != 3) {
		fprintf (stderr, "usage: %s infile outfile\n", argv[0]);
		return (1);
	}

	dl.ldfd = open (argv[1], O_RDONLY);
	if (dl.ldfd == -1)
		err(2, "open `%s'", argv[1]);

	if (GetFileInfo(&dl, 0) == -1)
		errx(3, "`%s' is an unknown file type", argv[1]);

	switch (dl.image_type) {
	case IMAGE_TYPE_MOP:
		errx(3, "`%s' is already a MOP image", argv[1]);
		break;

#ifndef NOELF
	case IMAGE_TYPE_ELF32:
		if (dl.e_machine != EM_VAX)
			printf("WARNING: `%s' is not a VAX image "
			    "(machine=%d)\n", argv[1], dl.e_machine);
		for (i = 0, j = 0; j < dl.e_nsec; j++)
			i += dl.e_sections[j].s_fsize + dl.e_sections[j].s_pad;
		image_type = IHD_C_NATIVE;
		break;
#endif

#if !defined(NOELF) && !defined(NOELF64)
	case IMAGE_TYPE_ELF64:
		if (dl.e_machine != EM_ALPHA && dl.e_machine != EM_ALPHA_EXP)
			printf("WARNING: `%s' is not an ALPHA image "
			    "(machine=%d)\n", argv[1], dl.e_machine);
		for (i = 0, j = 0; j < dl.e_nsec; j++)
			i += dl.e_sections[j].s_fsize + dl.e_sections[j].s_pad;
		image_type = IHD_C_ALPHA;
		break;
#endif

#ifndef NOAOUT
	case IMAGE_TYPE_AOUT:
		if (dl.a_mid != MID_VAX)
			printf("WARNING: `%s' is not a VAX image (mid=%d)\n",
			    argv[1], dl.a_mid);
		i = dl.a_text + dl.a_text_fill + dl.a_data + dl.a_data_fill +
		    dl.a_bss  + dl.a_bss_fill;
		image_type = IHD_C_NATIVE;
		break;
#endif

	default:
		errx(3, "Image type `%s' not supported",
		    FileTypeName(dl.image_type));
	}

	dl.nloadaddr = dl.loadaddr;
	dl.lseek     = lseek(dl.ldfd,0L,SEEK_CUR);
	dl.a_lseek   = 0;
	dl.count     = 0;
	dl.dl_bsz    = 512;

	switch (image_type) {
	default:
	case IHD_C_NATIVE:
		/* Offset to ISD section. */
		mopFilePutLX(header, IHD_W_SIZE, 0xd4, 2);
		/* Offset to 1st section.*/
		mopFilePutLX(header, IHD_W_ACTIVOFF, 0x30, 2);
		/* It's a VAX image.*/
		mopFilePutLX(header, IHD_W_ALIAS, IHD_C_NATIVE, 2);
		/* Only one header block. */
		mopFilePutLX(header, IHD_B_HDRBLKCNT, 1, 1);

		/* Xfer Addr */
		mopFilePutLX(header, 0x30 + IHA_L_TFRADR1, dl.xferaddr, 4);

		/* load Addr */
		mopFilePutLX(header, 0xd4 + ISD_V_VPN, dl.loadaddr / 512, 2);
		/* Imagesize in blks.*/
		i = (i + 1) / 512;
		mopFilePutLX(header, 0xd4 + ISD_W_PAGCNT, i, 2);
		break;
	case IHD_C_ALPHA:
		/* Offset to ISD section. */
		mopFilePutLX(header, EIHD_L_ISDOFF, 0xd4, 4);
		/* It's an alpha image.*/
		mopFilePutLX(header, IHD_W_ALIAS, IHD_C_ALPHA, 2);
		/* Only one header block. */
		mopFilePutLX(header, EIHD_L_HDRBLKCNT, 1, 4);

		/* Imagesize in bytes.*/
		mopFilePutLX(header, 0xd4 + EISD_L_SECSIZE, i, 4);
		break;
	}

	out = fopen (argv[2], "w");
	if (!out)
		err(2, "writing `%s'", argv[2]);

	/* Now we do the actual work. Write MOP-image header */

	fwrite (header, sizeof (header), 1, out);

	switch (dl.image_type) {
	case IMAGE_TYPE_MOP:
		abort();

	case IMAGE_TYPE_ELF32:
#ifdef NOELF
		abort();
#else
		fprintf(stderr, "copying ");
		for (j = 0; j < dl.e_nsec; j++)
			fprintf(stderr, "%s%u+%u", j == 0 ? "" : "+",
			    dl.e_sections[j].s_fsize,
			    dl.e_sections[j].s_pad);
		fprintf(stderr, "->0x%x\n", dl.xferaddr);
#endif
		break;

	case IMAGE_TYPE_AOUT:
#ifdef NOAOUT
		abort();
#else
		fprintf(stderr, "copying %u+%u+%u->0x%x\n", dl.a_text,
		    dl.a_data, dl.a_bss, dl.xferaddr);
#endif
		break;
	default:
		break;
	}

	while ((i = mopFileRead(&dl,header)) > 0) {
		(void)fwrite(header, i, 1, out);
	}

	fclose (out);
	exit(0);
}
@


1.15
log
@Add 'default:' cases to switch statements that gcc whines about.

ok jung@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mopa.out.c,v 1.14 2014/12/13 14:44:59 miod Exp $ */
d13 1
a13 1
 * A header is prepended that looks like an IHD header. In 
d16 1
a16 1
 * ID could be mistaken for a DEC image type, then the conversion 
d95 1
a95 1
	
d99 1
a99 1
#endif	
d105 1
a105 1
	
d109 1
a109 1
	
d195 1
a195 1
	
d199 1
a199 1
	
d201 1
a201 1
	
d232 1
a232 1
	
d236 1
a236 1
	
@


1.14
log
@Give the mop suite the ability to process alpha Elf64 files and create mop
alpha images of them.
@
text
@d1 1
a1 1
/*	$OpenBSD: mopa.out.c,v 1.13 2013/10/17 08:02:21 deraadt Exp $ */
d228 2
@


1.13
log
@Remove support for a.out and ecoff.  We only do elf now.
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: mopa.out.c,v 1.12 2013/07/05 21:02:07 miod Exp $ */
d3 2
a4 1
/* mopa.out - Convert a Unix format kernel into something that
d75 5
a79 2
#if !defined(EM_VAX)
#define EM_VAX 75
d83 1
a83 1
u_char header[512];		/* The VAX header we generate is 1 block. */
d94 1
d125 12
d147 1
a155 2
	i = (i+1) / 512;

d162 33
a194 7
	mopFilePutLX(header,IHD_W_SIZE,0xd4,2);   /* Offset to ISD section. */
	mopFilePutLX(header,IHD_W_ACTIVOFF,0x30,2);/* Offset to 1st section.*/
	mopFilePutLX(header,IHD_W_ALIAS,IHD_C_NATIVE,2);/* It's a VAX image.*/
	mopFilePutLX(header,IHD_B_HDRBLKCNT,1,1); /* Only one header block. */
	mopFilePutLX(header,0xd4+ISD_V_VPN,dl.loadaddr/512,2);/* load Addr */
	mopFilePutLX(header,0x30+IHA_L_TFRADR1,dl.xferaddr,4); /* Xfer Addr */
	mopFilePutLX(header,0xd4+ISD_W_PAGCNT,i,2);/* Imagesize in blks.*/
d200 1
a200 1
	/* Now we do the actual work. Write VAX MOP-image header */
@


1.12
log
@Teach mopd and mopa.out about ELF files, and allow forthcoming VAX ELF boot
blocks to be converted to working mop binaries. From NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: mopa.out.c,v 1.11 2010/11/19 21:09:20 miod Exp $ */
d54 2
a55 2
#if defined(__NetBSD__) || defined(__OpenBSD__)
#include <sys/exec_aout.h>
@


1.11
log
@mahine->machine
@
text
@d1 1
a1 1
/*	$OpenBSD: mopa.out.c,v 1.10 2009/10/27 23:59:52 deraadt Exp $ */
d68 11
d80 1
d82 1
d88 1
a88 1
	int	i;
d102 2
a103 4
	if (dl.ldfd == -1) {
		perror (argv[1]);
		return (2);
	}
d105 31
a135 17
	GetFileInfo(dl.ldfd,
		    &dl.loadaddr,
		    &dl.xferaddr,
		    &dl.aout,
		    &dl.a_text,&dl.a_text_fill,
		    &dl.a_data,&dl.a_data_fill,
		    &dl.a_bss ,&dl.a_bss_fill, 0);

	if (dl.aout == -1) {
		fprintf(stderr,"%s: not an a.out file\n",argv[1]);
		return (3);
        }

	if (dl.aout != MID_VAX) {
		fprintf(stderr,"%s: file is not a VAX image (mid=%d)\n",
			argv[1],dl.aout);
		return (4);
a137 2
	i = dl.a_text + dl.a_text_fill + dl.a_data + dl.a_data_fill +
	    dl.a_bss  + dl.a_bss_fill;
d150 1
d155 2
a156 4
	if (!out) {
		perror (argv[2]);
		return (2);
	}
d162 26
a187 5
	fprintf (stderr, "copying %lu", dl.a_text);
	fprintf (stderr, "+%lu", dl.a_data);
	fprintf (stderr, "+%lu", dl.a_bss);
	fprintf (stderr, "->%lu", dl.xferaddr);
	fprintf (stderr, "\n");
@


1.10
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: mopa.out.c,v 1.9 2009/07/11 13:42:32 sobrado Exp $ */
d13 1
a13 1
 * particular the Unix mahine ID is placed where mopd expects
@


1.9
log
@synchronize the synopsis and usage of mopa.out(1); mopchk(1) can handle
more than one filename at a time; add a description for -3 and -4
in mopd(8), and document -v; remove a duplicate flag in mopprobe(1);
use a better style for synopses; sort flags and arguments.

written with help by jmc@@

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mopa.out.c,v 1.8 2006/04/29 16:26:56 maja Exp $ */
a48 4

#ifndef lint
static const char rcsid[] = "$OpenBSD: mopa.out.c,v 1.8 2006/04/29 16:26:56 maja Exp $";
#endif
@


1.8
log
@Change the compile time option -DINFO into a runtime option to get ride
of some lint warnings. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: mopa.out.c,v 1.7 2006/04/17 16:23:01 deraadt Exp $ */
d51 1
a51 1
static const char rcsid[] = "$OpenBSD: mopa.out.c,v 1.7 2006/04/17 16:23:01 deraadt Exp $";
d88 1
a88 1
		fprintf (stderr, "usage: %s kernel-in sys-out\n", argv[0]);
@


1.7
log
@more cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: mopa.out.c,v 1.6 2003/12/01 00:56:51 avsm Exp $ */
d51 1
a51 1
static const char rcsid[] = "$OpenBSD: mopa.out.c,v 1.6 2003/12/01 00:56:51 avsm Exp $";
d104 1
a104 1
		    &dl.a_bss ,&dl.a_bss_fill );
@


1.6
log
@-Wall cleanup: trim unused vars, right format strings, constify rcsids,
braces where needed, add missing prototypes.

tested and ok maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mopa.out.c,v 1.5 2003/04/13 22:39:38 avsm Exp $ */
d50 2
a51 2
#ifndef LINT
static const char rcsid[] = "$OpenBSD: mopa.out.c,v 1.5 2003/04/13 22:39:38 avsm Exp $";
@


1.5
log
@obvious typo: "s%" -> "%s" in format string
@
text
@d1 1
a1 1
/*	$OpenBSD: mopa.out.c,v 1.4 2002/06/14 21:35:01 todd Exp $ */
d51 1
a51 1
static char rcsid[] = "$OpenBSD: mopa.out.c,v 1.4 2002/06/14 21:35:01 todd Exp $";
d155 1
@


1.4
log
@spelling; from Brian Poole <raj@@cerias.purdue.edu>
@
text
@d1 1
a1 1
/*	$OpenBSD: mopa.out.c,v 1.3 2001/02/07 20:17:43 todd Exp $ */
d51 1
a51 1
static char rcsid[] = "$OpenBSD: mopa.out.c,v 1.3 2001/02/07 20:17:43 todd Exp $";
d107 1
a107 1
		fprintf(stderr,"s%: not an a.out file\n",argv[1]);
@


1.3
log
@spelling
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d6 1
a6 1
 * This code was written while refering to the NetBSD/vax boot
d51 1
a51 1
static char rcsid[] = "$OpenBSD: mopa.out.c,v 1.1.1.1 1996/09/21 13:49:17 maja Exp $";
@


1.2
log
@Replace $Id with $OpenBSD. -moj
@
text
@d4 1
a4 1
 * can be transfered via MOP.
@


1.1
log
@Initial revision
@
text
@d1 1
d51 1
a51 1
static char rcsid[] = "$Id: mopa.out.c,v 1.5 1996/08/16 22:44:58 moj Exp $";
@


1.1.1.1
log
@Initial import of mopd-2.5.3. -moj
@
text
@@
