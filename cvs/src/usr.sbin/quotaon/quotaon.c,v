head	1.26;
access;
symbols
	OPENBSD_6_2_BASE:1.26
	OPENBSD_6_1:1.26.0.12
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.26.0.8
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.26.0.4
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.26.0.6
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.24.0.6
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.24.0.4
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.23.0.16
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.23.0.14
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.12
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.10
	OPENBSD_5_0:1.23.0.8
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.23.0.6
	OPENBSD_4_9_BASE:1.23
	OPENBSD_4_8:1.23.0.4
	OPENBSD_4_8_BASE:1.23
	OPENBSD_4_7:1.23.0.2
	OPENBSD_4_7_BASE:1.23
	OPENBSD_4_6:1.22.0.14
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.10
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.22.0.8
	OPENBSD_4_4_BASE:1.22
	OPENBSD_4_3:1.22.0.6
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.22.0.4
	OPENBSD_4_2_BASE:1.22
	OPENBSD_4_1:1.22.0.2
	OPENBSD_4_1_BASE:1.22
	OPENBSD_4_0:1.21.0.2
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.20.0.12
	OPENBSD_3_9_BASE:1.20
	OPENBSD_3_8:1.20.0.10
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.20.0.8
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.20.0.6
	OPENBSD_3_6_BASE:1.20
	OPENBSD_3_5:1.20.0.4
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.20.0.2
	OPENBSD_3_4_BASE:1.20
	OPENBSD_3_3:1.17.0.4
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.2
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.16
	OPENBSD_2_8:1.10.0.14
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.12
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.10.0.10
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.8
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.6
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.10.0.4
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.7.0.2
	OPENBSD_2_0_BASE:1.7
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2015.02.09.23.00.14;	author deraadt;	state Exp;
branches;
next	1.25;
commitid	822YD61EeG0Xl9Na;

1.25
date	2015.01.16.06.40.19;	author deraadt;	state Exp;
branches;
next	1.24;
commitid	Uu5nFG3wCl0LACBb;

1.24
date	2013.11.12.22.27.12;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2009.10.27.23.59.54;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2007.02.18.23.04.56;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2006.05.14.17.10.41;	author dhill;	state Exp;
branches;
next	1.20;

1.20
date	2003.07.18.22.58.56;	author david;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.26.19.47.09;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.02.23.36.54;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2002.09.06.21.49.21;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2002.09.06.18.29.37;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2002.06.02.06.42.29;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.29.09.45.08;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.22.09.09.32;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.14.16.44.25;	author mpech;	state Exp;
branches;
next	1.11;

1.11
date	2001.07.27.20.34.36;	author pvalchev;	state Exp;
branches;
next	1.10;

1.10
date	97.06.22.06.09.02;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	97.06.04.04.18.37;	author dm;	state Exp;
branches;
next	1.8;

1.8
date	97.01.17.07.14.19;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	96.05.04.12.28.18;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.04.25.11.04.13;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.04.21.23.41.36;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.01.07.05.28.05;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	95.11.06.21.40.57;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.10.24.14.32.20;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.02;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.02;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.26
log
@clean up flags++ instances around getopt()
ok florian
@
text
@/*
 * Copyright (c) 1980, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Robert Elz at The University of Melbourne.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Turn quota on/off for a filesystem.
 */
#include <sys/file.h>
#include <sys/mount.h>
#include <ufs/ufs/quota.h>
#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fstab.h>
#include <unistd.h>

char *qfname = QUOTAFILENAME;
char *qfextension[] = INITQFNAMES;

int	aflag;		/* all file systems */
int	gflag;		/* operate on group quotas */
int	uflag;		/* operate on user quotas */
int	vflag;		/* verbose */

void	usage(char *whoami);
int	hasquota(struct fstab *fs, int type, char **qfnamep, int force);
int	quotaonoff(struct fstab *fs, int offmode, int type, char *qfpathname);
int	oneof(char *target, char *list[], int cnt);
int	readonly(struct fstab *fs);


int
main(int argc, char *argv[])
{
	struct fstab *fs;
	char *qfnp, *whoami;
	long argnum, done = 0;
	int i, offmode = 0, errs = 0;
	extern int optind;
	int ch;

	whoami = strrchr(*argv, '/') + 1;
	if (whoami == (char *)1)
		whoami = *argv;
	if (strcmp(whoami, "quotaoff") == 0)
		offmode = 1;
	else if (strcmp(whoami, "quotaon") != 0) {
		fprintf(stderr, "Name must be quotaon or quotaoff not %s\n",
			whoami);
		exit(1);
	}
	while ((ch = getopt(argc, argv, "avug")) != -1) {
		switch (ch) {
		case 'a':
			aflag = 1;
			break;
		case 'g':
			gflag = 1;
			break;
		case 'u':
			uflag = 1;
			break;
		case 'v':
			vflag = 1;
			break;
		default:
			usage(whoami);
		}
	}
	argc -= optind;
	argv += optind;
	if (argc <= 0 && !aflag)
		usage(whoami);
	if (!gflag && !uflag) {
		gflag = 1;
		uflag = 1;
	}
	setfsent();
	while ((fs = getfsent()) != NULL) {
		if (strcmp(fs->fs_type, FSTAB_RW))
			continue;
		if (strcmp(fs->fs_vfstype, "ffs") &&
		    strcmp(fs->fs_vfstype, "ufs") &&
		    strcmp(fs->fs_vfstype, "mfs"))
			continue;
		if (aflag) {
			if (gflag && hasquota(fs, GRPQUOTA, &qfnp, 0))
				errs += quotaonoff(fs, offmode, GRPQUOTA, qfnp);
			if (uflag && hasquota(fs, USRQUOTA, &qfnp, 0))
				errs += quotaonoff(fs, offmode, USRQUOTA, qfnp);
			continue;
		}
		if ((argnum = oneof(fs->fs_file, argv, argc)) >= 0 ||
		    (argnum = oneof(fs->fs_spec, argv, argc)) >= 0) {
			done |= 1 << argnum;
			if (gflag) {
				hasquota(fs, GRPQUOTA, &qfnp, 1);
				errs += quotaonoff(fs, offmode, GRPQUOTA, qfnp);
			}
			if (uflag) {
				hasquota(fs, USRQUOTA, &qfnp, 1);
				errs += quotaonoff(fs, offmode, USRQUOTA, qfnp);
			}
		}
	}
	endfsent();
	for (i = 0; i < argc; i++)
		if ((done & (1 << i)) == 0)
			fprintf(stderr, "%s not found in fstab\n",
				argv[i]);
	exit(errs);
}

void
usage(char *whoami)
{

	fprintf(stderr, "usage: %s [-aguv] filesystem ...\n", whoami);
	exit(1);
}

int
quotaonoff(struct fstab *fs, int offmode, int type, char *qfpathname)
{
	if (strcmp(fs->fs_file, "/") && readonly(fs))
		return (1);
	if (offmode) {
		if (quotactl(fs->fs_file, QCMD(Q_QUOTAOFF, type), 0, 0) < 0) {
			fprintf(stderr, "quotaoff: ");
			perror(fs->fs_file);
			return (1);
		}
		if (vflag)
			printf("%s: %s quotas turned off\n", fs->fs_file,
			    qfextension[type]);
		return (0);
	}
	if (quotactl(fs->fs_file, QCMD(Q_QUOTAON, type), 0, qfpathname) < 0) {
		warn("%s: %s quotas using %s", fs->fs_file,
		    qfextension[type], qfpathname);
		return (1);
	}
	if (vflag)
		printf("%s: %s quotas turned on\n", fs->fs_file,
		    qfextension[type]);
	return (0);
}

/*
 * Check to see if target appears in list of size cnt.
 */
int
oneof(char *target, char *list[], int cnt)
{
	int i;

	for (i = 0; i < cnt; i++)
		if (strcmp(target, list[i]) == 0)
			return (i);
	return (-1);
}

/*
 * Check to see if a particular quota is to be enabled.
 */
int
hasquota(struct fstab *fs, int type, char **qfnamep, int force)
{
	char *opt;
	char *cp;
	static char initname, usrname[100], grpname[100];
	static char buf[BUFSIZ];

	if (!initname) {
		snprintf(usrname, sizeof usrname, "%s%s",
		    qfextension[USRQUOTA], qfname);
		snprintf(grpname, sizeof grpname, "%s%s",
		    qfextension[GRPQUOTA], qfname);
		initname = 1;
	}
	strlcpy(buf, fs->fs_mntops, sizeof buf);
	for (opt = strtok(buf, ","); opt; opt = strtok(NULL, ",")) {
		if ((cp = strchr(opt, '=')) != NULL)
			*cp++ = '\0';
		if (type == USRQUOTA && strcmp(opt, usrname) == 0)
			break;
		if (type == GRPQUOTA && strcmp(opt, grpname) == 0)
			break;
	}
	if (!force && !opt)
		return (0);
	if (cp) {
		*qfnamep = cp;
		return (1);
	}
	(void) snprintf(buf, sizeof buf, "%s/%s.%s", fs->fs_file,
	    qfname, qfextension[type]);
	*qfnamep = buf;
	return (1);
}

/*
 * Verify file system is mounted and not readonly.
 * MFS is special -- it puts "mfs:" in the kernel's mount table
 */
int
readonly(struct fstab *fs)
{
	struct statfs fsbuf;

	if (statfs(fs->fs_file, &fsbuf) < 0 ||
	    strcmp(fsbuf.f_mntonname, fs->fs_file) ||
	    strcmp(fsbuf.f_mntfromname, fs->fs_spec)) {
		if (strcmp(fs->fs_file, "mfs") ||
		    memcmp(fsbuf.f_mntfromname, "mfs:", sizeof("mfs:")-1))
			;
		else {
			printf("%s: not mounted\n", fs->fs_file);
			return (1);
		}
	}
	if (fsbuf.f_flags & MNT_RDONLY) {
		printf("%s: mounted read-only\n", fs->fs_file);
		return (1);
	}
	return (0);
}
@


1.25
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d75 1
a75 1
		offmode++;
d84 1
a84 1
			aflag++;
d87 1
a87 1
			gflag++;
d90 1
a90 1
			uflag++;
d93 1
a93 1
			vflag++;
d104 2
a105 2
		gflag++;
		uflag++;
@


1.24
log
@ensure there are prototypes
@
text
@a35 1
#include <sys/param.h>
@


1.23
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d55 8
d144 1
@


1.22
log
@simplify synopsis and usage(); based on a diff from Igor Sobrado
@
text
@a32 11
#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1980, 1990, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
/*static char sccsid[] = "from: @@(#)quotaon.c	8.1 (Berkeley) 6/6/93";*/
static char *rcsid = "$Id: quotaon.c,v 1.21 2006/05/14 17:10:41 dhill Exp $";
#endif /* not lint */

@


1.21
log
@add ()'s to improve readability.

ok ray
@
text
@d41 1
a41 1
static char *rcsid = "$Id: quotaon.c,v 1.20 2003/07/18 22:58:56 david Exp $";
d150 1
a150 2
	fprintf(stderr, "Usage:\n\t%s [-g] [-u] [-v] -a\n", whoami);
	fprintf(stderr, "\t%s [-g] [-u] [-v] filesys ...\n", whoami);
@


1.20
log
@add missing includes
ok tedu@@
@
text
@d41 1
a41 1
static char *rcsid = "$Id: quotaon.c,v 1.19 2003/06/26 19:47:09 deraadt Exp $";
d216 1
a216 1
		if (cp = strchr(opt, '='))
@


1.19
log
@strict proto cleanups
@
text
@d41 1
a41 1
static char *rcsid = "$Id: quotaon.c,v 1.18 2003/06/02 23:36:54 millert Exp $";
d51 1
d53 1
d56 1
@


1.18
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d41 1
a41 1
static char *rcsid = "$Id: quotaon.c,v 1.17 2002/09/06 21:49:21 deraadt Exp $";
d63 1
a63 3
main(argc, argv)
	int argc;
	char **argv;
d144 1
a144 2
usage(whoami)
	char *whoami;
d152 2
a153 4
quotaonoff(fs, offmode, type, qfpathname)
	struct fstab *fs;
	int offmode, type;
	char *qfpathname;
d182 2
a183 3
oneof(target, list, cnt)
	char *target, *list[];
	int cnt;
d196 2
a197 5
hasquota(fs, type, qfnamep, force)
	struct fstab *fs;
	int type;
	char **qfnamep;
	int force;
d236 2
a237 2
readonly(fs)
	struct fstab *fs;
@


1.17
log
@cope with INITQFNAMES without a ;
@
text
@d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d41 1
a41 1
static char *rcsid = "$Id: quotaon.c,v 1.16 2002/09/06 18:29:37 deraadt Exp $";
@


1.16
log
@no ; after INITQFNAMES
@
text
@d45 1
a45 1
static char *rcsid = "$Id: quotaon.c,v 1.15 2002/06/02 06:42:29 deraadt Exp $";
d60 1
a60 1
char *qfextension[] = INITQFNAMES
@


1.15
log
@minor KNF
@
text
@d45 1
a45 1
static char *rcsid = "$Id: quotaon.c,v 1.14 2002/05/29 09:45:08 deraadt Exp $";
d60 1
a60 1
char *qfextension[] = INITQFNAMES;
@


1.14
log
@more sprintf
@
text
@d45 1
a45 1
static char *rcsid = "$Id: quotaon.c,v 1.13 2002/05/22 09:09:32 deraadt Exp $";
d89 1
a89 1
		switch(ch) {
@


1.13
log
@more strcpy/sprintf death; mpech ok
@
text
@d45 1
a45 1
static char *rcsid = "$Id: quotaon.c,v 1.12 2002/03/14 16:44:25 mpech Exp $";
d218 4
a221 2
		sprintf(usrname, "%s%s", qfextension[USRQUOTA], qfname);
		sprintf(grpname, "%s%s", qfextension[GRPQUOTA], qfname);
d239 2
a240 1
	(void) sprintf(buf, "%s/%s.%s", fs->fs_file, qfname, qfextension[type]);
@


1.12
log
@kill more registers.

millert@@ ok
@
text
@d45 1
a45 1
static char *rcsid = "$Id: quotaon.c,v 1.11 2001/07/27 20:34:36 pvalchev Exp $";
d222 1
a222 1
	strcpy(buf, fs->fs_mntops);
@


1.11
log
@Wall cleanup
@
text
@d45 1
a45 1
static char *rcsid = "$Id: quotaon.c,v 1.10 1997/06/22 06:09:02 deraadt Exp $";
d71 1
a71 1
	register struct fstab *fs;
d160 1
a160 1
	register struct fstab *fs;
d192 1
a192 1
	register char *target, *list[];
d195 1
a195 1
	register int i;
d207 1
a207 1
	register struct fstab *fs;
d212 1
a212 1
	register char *opt;
d247 1
a247 1
	register struct fstab *fs;
@


1.10
log
@fix messages; like from jonny@@gaia.coppe.ufrj.br
@
text
@d45 1
a45 1
static char *rcsid = "$Id: quotaon.c,v 1.9 1997/06/04 04:18:37 dm Exp $";
a74 1
	extern char *optarg;
@


1.9
log
@Dumped core.
@
text
@d45 1
a45 1
static char *rcsid = "$Id: quotaon.c,v 1.8 1997/01/17 07:14:19 millert Exp $";
d174 2
a175 1
			printf("%s: quotas turned off\n", fs->fs_file);
d179 2
a180 2
		fprintf(stderr, "quotaon: using %s on", qfpathname);
		perror(fs->fs_file);
@


1.8
log
@r?index -> strr?chr
@
text
@d45 1
a45 1
static char *rcsid = "$Id: quotaon.c,v 1.7 1996/05/04 12:28:18 deraadt Exp $";
d124 1
a124 1
			if (gflag && hasquota(fs, GRPQUOTA, &qfnp))
d126 1
a126 1
			if (uflag && hasquota(fs, USRQUOTA, &qfnp))
d133 2
a134 1
			if (gflag)
d136 3
a138 1
			if (uflag)
d140 1
a164 1

d206 1
a206 1
hasquota(fs, type, qfnamep)
d210 1
d231 1
a231 1
	if (!opt)
@


1.7
log
@allow operation even if fstab does not label filesystem as supporting
quotas; pointed out by jonny@@gaia.coppe.ufrj.br
@
text
@d45 1
a45 1
static char *rcsid = "$Id: quotaon.c,v 1.6 1996/04/25 11:04:13 deraadt Exp $";
d72 1
a72 1
	char *qfnp, *whoami, *rindex();
d79 1
a79 1
	whoami = rindex(*argv, '/') + 1;
d209 1
a209 1
	char *cp, *index(), *strtok();
d220 1
a220 1
		if (cp = index(opt, '='))
@


1.6
log
@permit quotas to work on mfs; problem reported by rdante@@pnet.net
@
text
@d45 1
a45 1
static char *rcsid = "$Id: quotaon.c,v 1.5 1996/04/21 23:41:36 deraadt Exp $";
d133 1
a133 1
			if (gflag && hasquota(fs, GRPQUOTA, &qfnp))
d135 1
a135 1
			if (uflag && hasquota(fs, USRQUOTA, &qfnp))
@


1.5
log
@sync to netbsd 960418
@
text
@d45 1
a45 1
static char *rcsid = "$Id: quotaon.c,v 1.4 1996/01/07 05:28:05 deraadt Exp $";
d120 2
a121 1
		    strcmp(fs->fs_vfstype, "ufs"))
d240 1
d250 7
a256 2
		printf("%s: not mounted\n", fs->fs_file);
		return (1);
@


1.4
log
@accept either ffs or ufs for filesystem name
@
text
@d45 1
a45 1
static char *rcsid = "$Id: quotaon.c,v 1.3 1995/11/06 21:40:57 deraadt Exp $";
d72 1
a72 1
	char ch, *qfnp, *whoami, *rindex();
d77 1
d89 1
a89 1
	while ((ch = getopt(argc, argv, "avug")) != EOF) {
@


1.3
log
@Complete change from ufs -> ffs; (From Tatoku Ogaito; PR #1679)
@
text
@d45 1
a45 1
static char *rcsid = "$Id: quotaon.c,v 1.5.2.1 1995/11/01 00:32:15 jtc Exp $";
d116 4
a119 2
		if (strcmp(fs->fs_vfstype, "ffs") ||
		    strcmp(fs->fs_type, FSTAB_RW))
@


1.2
log
@ufs -> ffs
@
text
@d45 1
a45 1
static char *rcsid = "$Id: quotaon.c,v 1.1.1.1 1995/10/18 08:48:02 deraadt Exp $";
@


1.1
log
@Initial revision
@
text
@d45 1
a45 1
static char *rcsid = "$Id: quotaon.c,v 1.5 1994/12/23 16:39:33 cgd Exp $";
d116 1
a116 1
		if (strcmp(fs->fs_vfstype, "ufs") ||
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
