head	1.17;
access;
symbols
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.8
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.6
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.4
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.2
	OPENBSD_5_0:1.13.0.16
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.14
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.12
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.8
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.10
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.6
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.4
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.12.0.14
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.12
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.10
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.8
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.6
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.4
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	PPPOE_USER:1.1.1.1
	PPPOE:1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2014.03.17.18.42.41;	author deraadt;	state dead;
branches;
next	1.16;

1.16
date	2013.11.19.15.12.23;	author mikeb;	state Exp;
branches;
next	1.15;

1.15
date	2011.11.05.09.20.36;	author yasuoka;	state Exp;
branches;
next	1.14;

1.14
date	2011.10.11.23.41.51;	author yasuoka;	state Exp;
branches;
next	1.13;

1.13
date	2007.09.03.14.26.54;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2004.05.06.20.29.04;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.28.20.37.29;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.04.04.46.13;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	2002.09.08.04.33.46;	author jason;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.06.19.57.24;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.17.19.42.39;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.28.07;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.29.16.49.09;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.16.05.34.15;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.16.05.01.40;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.20.04.53.32;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.18.07.30.41;	author jason;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.18.07.30.41;	author jason;	state Exp;
branches;
next	;


desc
@@


1.17
log
@to the great bit bucket in the sky...
@
text
@/*	$OpenBSD: server.c,v 1.16 2013/11/19 15:12:23 mikeb Exp $	*/

/*
 * Copyright (c) 2000 Network Security Technologies, Inc. http://www.netsec.net
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/uio.h>
#include <sys/socket.h>
#include <sys/param.h>
#include <sys/queue.h>
#include <net/if.h>
#include <net/if_dl.h>
#include <net/if_types.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <net/bpf.h>
#include <errno.h>
#include <string.h>
#include <err.h>
#include <unistd.h>
#include <sysexits.h>
#include <stdlib.h>
#include <md5.h>

#include "pppoe.h"

#define	COOKIE_LEN	4	/* bytes/cookie, must be <= 16 */
#define	COOKIE_MAX	16

static u_int8_t ac_cookie_key[8];

static void getpackets(int, u_int8_t *, struct ether_addr *);

static void recv_padi(int, struct ether_addr *,
    struct ether_header *, struct pppoe_header *, u_long, u_int8_t *);
static void recv_padr(int, u_int8_t *, struct ether_addr *,
    struct ether_header *, struct pppoe_header *, u_long, u_int8_t *);
static void recv_padt(int, struct ether_addr *,
    struct ether_header *, struct pppoe_header *, u_long, u_int8_t *);

static void send_pado(int, struct ether_addr *,
    struct ether_header *, struct pppoe_header *, u_long, u_int8_t *);
static void send_pads(int, u_int8_t *, struct ether_addr *,
    struct ether_header *, struct pppoe_header *, u_long, u_int8_t *);
static void key_gen(void);
static u_int8_t *key_make(u_int8_t *, int, u_int8_t *, int);
static int key_cmp(u_int8_t *, int, u_int8_t *, int, u_int8_t *, int);

void
server_mode(int bpffd, u_int8_t *sysname, u_int8_t *srvname,
    struct ether_addr *ea)
{
	struct pppoe_session *ses;
	fd_set *fdsp = NULL;
	int n, oldmax = 0;

	key_gen();

	while (1) {
		n = bpffd;
		LIST_FOREACH(ses, &session_master.sm_sessions, s_next) {
			if (ses->s_fd != -1 && ses->s_fd > n)
				n = ses->s_fd;
		}
		n++;

		if (n > oldmax) {
			if (fdsp != NULL)
				free(fdsp);
			fdsp = (fd_set *)calloc(howmany(n, NFDBITS),
			    sizeof(fd_mask));
			if (fdsp == NULL)
				break;
			oldmax = n;
		}
		bzero(fdsp, howmany(n, NFDBITS) * sizeof(fd_mask));

		FD_SET(bpffd, fdsp);
		LIST_FOREACH(ses, &session_master.sm_sessions, s_next) {
			if (ses->s_fd != -1)
				FD_SET(ses->s_fd, fdsp);
		}

		n = select(n, fdsp, NULL, NULL, NULL);
		if (n < 0) {
			if (errno == EINTR)
				continue;
			err(EX_IOERR, "select");
			/* NOTREACHED */
		}
		if (n == 0)
			continue;
		if (FD_ISSET(bpffd, fdsp)) {
			n--;
			getpackets(bpffd, sysname, ea);
		}
		if (n == 0)
			continue;

		LIST_FOREACH(ses, &session_master.sm_sessions, s_next) {
			if (ses->s_fd != -1 && FD_ISSET(ses->s_fd, fdsp)) {
				if (ppp_to_bpf(bpffd, ses->s_fd, ea,
					&ses->s_ea, ses->s_id) < 0) {
					send_padt(bpffd, ea,
					    &ses->s_ea, ses->s_id);
					session_destroy(ses);
				}
				n--;
				if (n == 0)
					break;
			}
		}
	}

	if (fdsp != NULL)
		free(fdsp);
}

void
key_gen(void)
{
	u_int32_t r;

	r = arc4random();
	memcpy(ac_cookie_key, &r, sizeof(r));
	r = arc4random();
	memcpy(ac_cookie_key + sizeof(r), &r, sizeof(r));
}

u_int8_t *
key_make(u_int8_t *in1, int in1len, u_int8_t *in2, int in2len)
{
	u_int8_t *p;
	MD5_CTX ctx;

	p = (u_int8_t *)malloc(COOKIE_MAX);
	if (p == NULL)
		return (p);

	MD5Init(&ctx);
	MD5Update(&ctx, in1, in1len);
	MD5Update(&ctx, in2, in2len);
	MD5Final(p, &ctx);
	return (p);
}

int
key_cmp(u_int8_t *k, int klen, u_int8_t *in1, int in1len,
    u_int8_t *in2, int in2len)
{
	u_int8_t *p;
	int r;

	if (klen != COOKIE_LEN)
		return (-1);

	p = key_make(in1, in1len, in2, in2len);
	if (p == NULL)
		return (-1);

	r = memcmp(k, p, COOKIE_LEN);
	free(p);
	return (r);
}

static void
getpackets(int bpffd, u_int8_t *sysname, struct ether_addr *ea)
{
	static u_int8_t *pktbuf;
	u_int8_t *mpkt, *pkt, *epkt;
	struct ether_header eh;
	struct pppoe_header ph;
	struct bpf_hdr *bh;
	u_long len;
	int rlen;

	if (pktbuf == NULL) {
		pktbuf = (u_int8_t *)malloc(PPPOE_BPF_BUFSIZ);
		if (pktbuf == NULL)
			return;
	}

	rlen = read(bpffd, pktbuf, PPPOE_BPF_BUFSIZ);
	if (rlen < 0)
		return;

	pkt = pktbuf;
	epkt = pkt + rlen;
	while (pkt < epkt) {
		bh = (struct bpf_hdr *)pkt;
		len = bh->bh_caplen;
		mpkt = pkt + bh->bh_hdrlen;

		/* Pull out ethernet header */
		if (len < sizeof(struct ether_header))
			goto next;
		bcopy(mpkt, &eh, sizeof(struct ether_header));
		eh.ether_type = ntohs(eh.ether_type);
		len -= sizeof(struct ether_header);
		mpkt += sizeof(struct ether_header);

		/* Pull out pppoe header */
		if (len < sizeof(struct pppoe_header))
			goto next;
		bcopy(mpkt, &ph, sizeof(struct pppoe_header));
		mpkt += sizeof(struct pppoe_header);
		len -= sizeof(struct pppoe_header);
		ph.len = ntohs(ph.len);
		ph.sessionid = ntohs(ph.sessionid);

		if (PPPOE_VER(ph.vertype) != 1 ||
		    PPPOE_TYPE(ph.vertype) != 1)
			goto next;

		if (len > ph.len)
			len = ph.len;

		if (eh.ether_type == ETHERTYPE_PPPOEDISC) {
			/* Discovery Stage */
			switch (ph.code) {
			case PPPOE_CODE_PADI:
				recv_padi(bpffd, ea, &eh, &ph, len, mpkt);
				break;
			case PPPOE_CODE_PADR:
				recv_padr(bpffd, sysname, ea, &eh, &ph,
				    len, mpkt);
				break;
			case PPPOE_CODE_PADT:
				recv_padt(bpffd, ea, &eh, &ph, len, mpkt);
				break;
			default:
				break;
			}
		}
		else if (eh.ether_type == ETHERTYPE_PPPOE) {
			/* Session Stage */
			struct pppoe_session *s;

			s = session_find_eaid(
			    (struct ether_addr *)&eh.ether_shost[0],
			    ph.sessionid);
			if (s != NULL && bpf_to_ppp(s->s_fd, len, mpkt) <= 0)
				session_destroy(s);
		}
next:
		pkt += BPF_WORDALIGN(bh->bh_hdrlen + bh->bh_caplen);
	}
}

static void
recv_padi(int bpffd, struct ether_addr *ea, struct ether_header *eh,
    struct pppoe_header *ph, u_long pktlen, u_int8_t *pktbuf)
{
	struct tag_list tl;

	if (ph->sessionid != 0)
		return;
	if (bcmp(&eh->ether_dhost[0], etherbroadcastaddr, ETHER_ADDR_LEN))
		return;

	tag_init(&tl);
	if (tag_pkt(&tl, pktlen, pktbuf) < 0)
		goto out;

	if (tag_lookup(&tl, PPPOE_TAG_SERVICE_NAME, 1) != NULL)
		goto out;

	send_pado(bpffd, ea, eh, ph, pktlen, pktbuf);

out:
	tag_destroy(&tl);
}

static void
send_pado(int bpffd, struct ether_addr *ea, struct ether_header *eh,
    struct pppoe_header *ph, u_long pktlen, u_int8_t *pktbuf)
{
	struct pppoe_tag ktag, htag;
	u_int8_t hn[MAXHOSTNAMELEN];
	u_int8_t *k = NULL;
	struct iovec v[7];
	int idx = 0;

	memcpy(&eh->ether_dhost[0], &eh->ether_shost[0], ETHER_ADDR_LEN);
	memcpy(&eh->ether_shost[0], ea, ETHER_ADDR_LEN);
	eh->ether_type = htons(eh->ether_type);
	v[idx].iov_base = eh; v[idx].iov_len = sizeof(*eh); idx++;

	ph->code = PPPOE_CODE_PADO;
	v[idx].iov_base = ph; v[idx].iov_len = sizeof(*ph); idx++;

	v[idx].iov_base = pktbuf; v[idx].iov_len = pktlen; idx++;

	if (gethostname((char *)hn, sizeof(hn)) < 0)
		return;
	htag.len = strlen((char *)hn);
	htag.type = htons(PPPOE_TAG_AC_NAME);
	htag.val = hn;
	v[idx].iov_base = &htag;
	v[idx].iov_len = sizeof(htag.len) + sizeof(htag.type);
	idx++;
	v[idx].iov_base = hn; v[idx].iov_len = htag.len; idx++;
	ph->len += sizeof(htag.len) + sizeof(htag.type) + htag.len;
	htag.len = htons(htag.len);

	k = key_make(&eh->ether_dhost[0], ETHER_ADDR_LEN, ac_cookie_key,
	    sizeof(ac_cookie_key));
	if (k == NULL)
		return;
	ktag.type = htons(PPPOE_TAG_AC_COOKIE);
	ktag.len = COOKIE_LEN;
	ktag.val = k;
	v[idx].iov_base = &ktag;
	v[idx].iov_len = sizeof(ktag.len) + sizeof(ktag.type);
	idx++;
	v[idx].iov_base = k; v[idx].iov_len = COOKIE_LEN; idx++;
	ph->len += sizeof(ktag.len) + sizeof(ktag.type) + COOKIE_LEN;
	ktag.len = htons(COOKIE_LEN);

	ph->len = htons(ph->len);

	writev(bpffd, v, idx);

	if (k)
		free(k);
}

static void
recv_padr(int bpffd, u_int8_t *sysname, struct ether_addr *ea,
    struct ether_header *eh, struct pppoe_header *ph,
    u_long pktlen, u_int8_t *pktbuf)
{
	struct tag_list tl;
	struct tag_node *n;

	if (ph->sessionid != 0)
		return;

	tag_init(&tl);
	if (tag_pkt(&tl, pktlen, pktbuf) < 0)
		return;

	n = tag_lookup(&tl, PPPOE_TAG_AC_COOKIE, 0);
	if (n == NULL)
		return;
	if (key_cmp(n->val, n->len, &eh->ether_shost[0], ETHER_ADDR_LEN,
	    ac_cookie_key, sizeof(ac_cookie_key)))
		return;

	send_pads(bpffd, sysname, ea, eh, ph, pktlen, pktbuf);

	tag_destroy(&tl);
}

static void
send_pads(int bpffd, u_int8_t *sysname, struct ether_addr *ea,
    struct ether_header *eh, struct pppoe_header *ph,
    u_long pktlen, u_int8_t *pktbuf)
{
	u_int8_t hn[MAXHOSTNAMELEN];
	struct iovec v[16];
	struct pppoe_session *s;
	struct pppoe_tag htag;
	int idx = 0;

	s = session_new((struct ether_addr *)&eh->ether_shost[0]);
	if (s == NULL)
		return;

	memcpy(&eh->ether_dhost[0], &eh->ether_shost[0], ETHER_ADDR_LEN);
	memcpy(&eh->ether_shost[0], ea, ETHER_ADDR_LEN);
	eh->ether_type = htons(eh->ether_type);
	v[idx].iov_base = eh; v[idx].iov_len = sizeof(*eh); idx++;

	ph->code = PPPOE_CODE_PADS;
	ph->sessionid = htons(s->s_id);
	if (gethostname((char *)hn, sizeof(hn)) < 0)
		return;
	v[idx].iov_base = ph; v[idx].iov_len = sizeof(*ph); idx++;

	v[idx].iov_base = pktbuf; v[idx].iov_len = pktlen; idx++;

	htag.len = strlen((char *)hn);
	htag.type = htons(PPPOE_TAG_AC_NAME);
	htag.val = hn;
	v[idx].iov_base = &htag;
	v[idx].iov_len = sizeof(htag.len) + sizeof(htag.type);
	idx++;
	v[idx].iov_base = hn; v[idx].iov_len = htag.len; idx++;
	ph->len += sizeof(htag.len) + sizeof(htag.type) + htag.len;
	htag.len = htons(htag.len);

	ph->len = htons(ph->len);

	writev(bpffd, v, idx);

	s->s_fd = runppp(bpffd, sysname);
	if (s->s_fd < 0) {
		/* XXX Send PADT with Generic-Error */
		s->s_fd = -1;
	}
}

static void
recv_padt(int bpffd, struct ether_addr *ea, struct ether_header *eh,
    struct pppoe_header *ph, u_long pktlen, u_int8_t *pktbuf)
{
	struct pppoe_session *s;
	struct tag_list tl;

	tag_init(&tl);
	if (tag_pkt(&tl, pktlen, pktbuf) < 0)
		goto out;

	s = session_find_eaid((struct ether_addr *)&eh->ether_shost[0],
	    ph->sessionid);
	if (s == NULL)
		goto out;
	session_destroy(s);

out:
	tag_destroy(&tl);
}
@


1.16
log
@include queue.h directly instead of relying on if.h to provide it;
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.15 2011/11/05 09:20:36 yasuoka Exp $	*/
@


1.15
log
@Remove unnecessary #include's.  From Michael W. Bombardieri.

No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.14 2011/10/11 23:41:51 yasuoka Exp $	*/
d32 1
@


1.14
log
@We don't need to break after calling err(3) because this function will
not return.  This diff produces no binary change.

diff from Michael W. Bombardieri.

ok dlg@@, claudio@@
CV: Enter eog.  Lines beginning with `CVS:' are removed automatically
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.13 2007/09/03 14:26:54 deraadt Exp $	*/
a27 1
#include <stdio.h>
a29 1
#include <sys/time.h>
a30 1
#include <sys/ioctl.h>
a37 1
#include <net/ppp_defs.h>
a40 1
#include <fcntl.h>
@


1.13
log
@malloc(n * m) -> calloc(n, m); ok espie
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.12 2004/05/06 20:29:04 deraadt Exp $	*/
d115 1
a115 1
			break;
@


1.12
log
@knf and other cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.11 2003/06/28 20:37:29 deraadt Exp $	*/
d96 1
a96 1
			fdsp = (fd_set *)malloc(howmany(n, NFDBITS) *
@


1.11
log
@() to (void)
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.10 2003/06/04 04:46:13 jason Exp $	*/
d76 2
a77 4
server_mode(bpffd, sysname, srvname, ea)
	int bpffd;
	u_int8_t *sysname, *srvname;
	struct ether_addr *ea;
d157 1
a157 3
key_make(in1, in1len, in2, in2len)
	u_int8_t *in1, *in2;
	int in1len, in2len;
d174 2
a175 3
key_cmp(k, klen, in1, in1len, in2, in2len)
	u_int8_t *k, *in1, *in2;
	int klen, in1len, in2len;
d193 1
a193 4
getpackets(bpffd, sysname, ea)
	int bpffd;
	u_int8_t *sysname;
	struct ether_addr *ea;
d200 1
a201 1
	u_long len;
d277 2
a278 7
recv_padi(bpffd, ea, eh, ph, pktlen, pktbuf)
	int bpffd;
	struct ether_addr *ea;
	struct ether_header *eh;
	struct pppoe_header *ph;
	u_long pktlen;
	u_int8_t *pktbuf;
d301 2
a302 7
send_pado(bpffd, ea, eh, ph, pktlen, pktbuf)
	int bpffd;
	struct ether_addr *ea;
	struct ether_header *eh;
	struct pppoe_header *ph;
	u_long pktlen;
	u_int8_t *pktbuf;
d355 3
a357 8
recv_padr(bpffd, sysname, ea, eh, ph, pktlen, pktbuf)
	int bpffd;
	u_int8_t *sysname;
	struct ether_addr *ea;
	struct ether_header *eh;
	struct pppoe_header *ph;
	u_long pktlen;
	u_int8_t *pktbuf;
d382 3
a384 8
send_pads(bpffd, sysname, ea, eh, ph, pktlen, pktbuf)
	int bpffd;
	u_int8_t *sysname;
	struct ether_addr *ea;
	struct ether_header *eh;
	struct pppoe_header *ph;
	u_long pktlen;
	u_int8_t *pktbuf;
d431 2
a432 7
recv_padt(bpffd, ea, eh, ph, pktlen, pktbuf)
	int bpffd;
	struct ether_addr *ea;
	struct ether_header *eh;
	struct pppoe_header *ph;
	u_long pktlen;
	u_int8_t *pktbuf;
@


1.10
log
@kill terms 3 & 4
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.9 2002/09/08 04:33:46 jason Exp $	*/
d148 1
a148 1
key_gen()
@


1.9
log
@Fix a bunch of -pedantic errors
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.8 2002/09/06 19:57:24 deraadt Exp $	*/
a4 1
 * All rights reserved.
a13 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Network Security
 *	Technologies, Inc.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.8
log
@default: needs statement after it
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.7 2002/02/17 19:42:39 millert Exp $	*/
d63 1
a63 1
static char ac_cookie_key[8];
d65 1
a65 1
static void getpackets(int, char *, struct ether_addr *);
d69 1
a69 1
static void recv_padr(int, char *, struct ether_addr *,
d76 1
a76 1
static void send_pads(int, char *, struct ether_addr *,
d85 1
a85 1
	char *sysname, *srvname;
d207 1
a207 1
	char *sysname;
d330 1
a330 1
	char hn[MAXHOSTNAMELEN];
d345 1
a345 1
	if (gethostname(hn, sizeof(hn)) < 0)
d347 1
a347 1
	htag.len = strlen(hn);
d382 1
a382 1
	char *sysname;
d414 1
a414 1
	char *sysname;
d421 1
a421 1
	char hn[MAXHOSTNAMELEN];
d438 1
a438 1
	if (gethostname(hn, sizeof(hn)) < 0)
d444 1
a444 1
	htag.len = strlen(hn);
@


1.7
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.6 2002/02/16 21:28:07 millert Exp $	*/
d273 1
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.5 2001/11/29 16:49:09 miod Exp $	*/
d67 11
a77 11
static void recv_padi __P((int, struct ether_addr *,
    struct ether_header *, struct pppoe_header *, u_long, u_int8_t *));
static void recv_padr __P((int, char *, struct ether_addr *,
    struct ether_header *, struct pppoe_header *, u_long, u_int8_t *));
static void recv_padt __P((int, struct ether_addr *,
    struct ether_header *, struct pppoe_header *, u_long, u_int8_t *));

static void send_pado __P((int, struct ether_addr *,
    struct ether_header *, struct pppoe_header *, u_long, u_int8_t *));
static void send_pads __P((int, char *, struct ether_addr *,
    struct ether_header *, struct pppoe_header *, u_long, u_int8_t *));
@


1.5
log
@Replace strncpy() calls with adequate strlcpy() ones, and fix a cosmeto.
jason@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.4 2001/01/16 05:34:15 jason Exp $	*/
d65 1
a65 1
static void getpackets __P((int, char *, struct ether_addr *));
d78 3
a80 3
static void key_gen __P((void));
static u_int8_t *key_make __P((u_int8_t *, int, u_int8_t *, int));
static int key_cmp __P((u_int8_t *, int, u_int8_t *, int, u_int8_t *, int));
@


1.4
log
@bzero the sets before FD_SET'n them
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.3 2001/01/16 05:01:40 jason Exp $	*/
a94 1
reselect:
d122 1
a122 1
				goto reselect;
@


1.3
log
@fix fd_set overflows
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.2 2000/06/20 04:53:32 jason Exp $	*/
d106 1
a106 1
			fdsp = (fd_set *)calloc(howmany(n, NFDBITS),
d112 2
@


1.2
log
@hush
@
text
@d1 1
a1 1
/*	$OpenBSD: server.c,v 1.1.1.1 2000/06/18 07:30:41 jason Exp $	*/
d89 2
a90 2
	fd_set rfds;
	int n;
a95 2
		FD_ZERO(&rfds);
		FD_SET(bpffd, &rfds);
d97 19
a115 8
		ses = LIST_FIRST(&session_master.sm_sessions);
		while (ses) {
			if (ses->s_fd != -1) {
				FD_SET(ses->s_fd, &rfds);
				if (ses->s_fd > n)
					n = ses->s_fd;
			}
			ses = LIST_NEXT(ses, s_next);
d118 1
a118 1
		n = select(n+1, &rfds, NULL, NULL, NULL);
d123 1
a123 1
			return;
d127 1
a127 1
		if (FD_ISSET(bpffd, &rfds)) {
d134 2
a135 3
		ses = LIST_FIRST(&session_master.sm_sessions);
		while (ses) {
			if (ses->s_fd != -1 && FD_ISSET(ses->s_fd, &rfds)) {
a145 1
			ses = LIST_NEXT(ses, s_next);
d148 3
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a261 1
				recv_debug(bpffd, ea, &eh, &ph, len, mpkt);
@


1.1.1.1
log
@import my pppoe code
@
text
@@
