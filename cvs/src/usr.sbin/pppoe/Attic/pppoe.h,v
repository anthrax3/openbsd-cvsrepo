head	1.11;
access;
symbols
	OPENBSD_5_5:1.10.0.12
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.8
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.6
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.4
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.2
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.7.0.28
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.26
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.22
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.24
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.20
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.18
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.16
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.14
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.12
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.10
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.2.0.4
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_8:1.1.1.1.0.2
	OPENBSD_2_8_BASE:1.1.1.1
	PPPOE_USER:1.1.1.1
	PPPOE:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2014.03.17.18.42.41;	author deraadt;	state dead;
branches;
next	1.10;

1.10
date	2011.10.15.02.05.07;	author yasuoka;	state Exp;
branches;
next	1.9;

1.9
date	2011.07.04.16.29.35;	author sthen;	state Exp;
branches;
next	1.8;

1.8
date	2011.03.31.09.19.35;	author sobrado;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.06.20.29.04;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.04.04.46.13;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.08.04.33.46;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.17.19.42.39;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.28.07;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.24.05.02.34;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.18.07.30.41;	author jason;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.18.07.30.41;	author jason;	state Exp;
branches;
next	;


desc
@@


1.11
log
@to the great bit bucket in the sky...
@
text
@/*	$OpenBSD: pppoe.h,v 1.10 2011/10/15 02:05:07 yasuoka Exp $	*/

/*
 * Copyright (c) 2000 Network Security Technologies, Inc. http://www.netsec.net
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/* XXX */
#ifndef	ETHERTYPE_PPPOEDISC
#define	ETHERTYPE_PPPOEDISC	0x8863	/* PPP Over Ethernet Discovery Stage */
#endif
#ifndef	ETHERTYPE_PPPOE
#define	ETHERTYPE_PPPOE		0x8864  /* PPP Over Ethernet Session Stage */
#endif

#define	PPPOE_MAXSESSIONS	32
#define	PPPOE_BPF_BUFSIZ	65536

struct pppoe_header {
	u_int8_t vertype;	/* PPPoE version (low 4), type (high 4) */
	u_int8_t code;		/* PPPoE code (packet type) */
	u_int16_t sessionid;	/* PPPoE session id */
	u_int16_t len;		/* PPPoE payload length */
};
#define	PPPOE_MTU		(ETHERMTU - sizeof(struct pppoe_header))

#define	PPPOE_VER_S		0	/* Version shift */
#define	PPPOE_VER_M		0x0f	/* Version mask */
#define	PPPOE_TYPE_S		4	/* Type shift */
#define	PPPOE_TYPE_M		0xf0	/* Type mask */

#define	PPPOE_VER(vt)	(((vt) & PPPOE_VER_M) >> PPPOE_VER_S)
#define	PPPOE_TYPE(vt)	(((vt) & PPPOE_TYPE_M) >> PPPOE_TYPE_S)
#define	PPPOE_VERTYPE(v,t)					\
	((((v) << PPPOE_VER_S) & PPPOE_VER_M) |			\
	(((t) << PPPOE_TYPE_S) & PPPOE_TYPE_M))

#define	PPPOE_CODE_SESSION	0x00	/* Session */
#define	PPPOE_CODE_PADO		0x07	/* Active Discovery Offer */
#define	PPPOE_CODE_PADI		0x09	/* Active Discovery Initiation */
#define	PPPOE_CODE_PADR		0x19	/* Active Discovery Request */
#define	PPPOE_CODE_PADS		0x65	/* Active Discovery Session-Confirm */
#define	PPPOE_CODE_PADT		0xa7	/* Active Discovery Terminate */

struct pppoe_tag {
	u_int16_t type;		/* Tag Type */
	u_int16_t len;		/* Tag Length */
	u_int8_t *val;		/* Tag Value */
};

#define	PPPOE_TAG_END_OF_LIST		0x0000	/* End Of List */
#define	PPPOE_TAG_SERVICE_NAME		0x0101	/* Service Name */
#define	PPPOE_TAG_AC_NAME		0x0102	/* Access Concentrator Name */
#define	PPPOE_TAG_HOST_UNIQ		0x0103	/* Host Uniq */
#define	PPPOE_TAG_AC_COOKIE		0x0104	/* Access Concentratr Cookie */
#define	PPPOE_TAG_VENDOR_SPEC		0x0105	/* Vendor Specific */
#define	PPPOE_TAG_RELAY_SESSION		0x0110	/* Relay Session Id */
#define	PPPOE_TAG_SERVICE_NAME_ERROR	0x0201	/* Service Name Error */
#define	PPPOE_TAG_AC_SYSTEM_ERROR	0x0202	/* Acc. Concentrator Error */
#define	PPPOE_TAG_GENERIC_ERROR		0x0203	/* Generic Error */

extern int option_verbose;
extern u_char etherbroadcastaddr[];

void server_mode(int, u_int8_t *, u_int8_t *, struct ether_addr *);
int client_mode(int, u_int8_t *, u_int8_t *, struct ether_addr *);

struct tag_list {
	LIST_HEAD(, tag_node)		thelist;
};

struct tag_node {
	LIST_ENTRY(tag_node)		next;
	u_int16_t	type;
	u_int16_t	len;
	u_int8_t	*val;
	int		_ref;
};

void tag_init(struct tag_list *);
void tag_destroy(struct tag_list *);
struct tag_node *tag_lookup(struct tag_list *, u_int16_t, int);
int tag_add(struct tag_list *, u_int16_t, u_int16_t, u_int8_t *);
int tag_pkt(struct tag_list *, u_long, u_int8_t *);
void tag_hton(struct tag_list *);

struct pppoe_session {
	LIST_ENTRY(pppoe_session)	s_next;
	struct ether_addr s_ea;		/* remote ethernet mac */
	u_int16_t s_id;			/* session id */
	int s_fd;			/* ttyfd */
};

struct pppoe_session_master {
	LIST_HEAD(, pppoe_session)	sm_sessions;	/* session list */
	int 				sm_nsessions;	/* # of sessions */
};

extern struct pppoe_session_master session_master;

void session_destroy(struct pppoe_session *);
struct pppoe_session *session_new(struct ether_addr *);
struct pppoe_session *session_find_eaid(struct ether_addr *, u_int16_t);

int runppp(int, u_int8_t *);
int bpf_to_ppp(int, u_long, u_int8_t *);
int ppp_to_bpf(int, int, struct ether_addr *, struct ether_addr *, u_int16_t);
int send_padt(int, struct ether_addr *, struct ether_addr *, u_int16_t);
void debug_packet(u_int8_t *, int);

u_int32_t cookie_bake(void);
@


1.10
log
@Delete unused field s_first in 'struct pppoe_session' that is assigned
1 in session_new(), but it is never used.

Diff from Michael W. Bombardieri

henning@@ claudio@@ sthen@@ fgsch@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pppoe.h,v 1.9 2011/07/04 16:29:35 sthen Exp $	*/
@


1.9
log
@Bring back byte-order conversion that was inadvertently removed in previous
commit. Problem reported by Scott McEachern, ok yasuoka@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pppoe.h,v 1.8 2011/03/31 09:19:35 sobrado Exp $	*/
a112 1
	int s_first;
@


1.8
log
@remove dead code from pppoe(8).

found by Michael W. Bombardieri for tag_ntoh() and tag_show(),
improved later by yasuoka@@ to include tag_hton() which is called
one time but never used.

ok yasuoka@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pppoe.h,v 1.7 2004/05/06 20:29:04 deraadt Exp $	*/
d106 1
@


1.7
log
@knf and other cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: pppoe.h,v 1.6 2003/06/04 04:46:13 jason Exp $	*/
a101 1
void tag_show(struct tag_list *);
a105 2
void tag_hton(struct tag_list *);
void tag_ntoh(struct tag_list *);
@


1.6
log
@kill terms 3 & 4
@
text
@d1 1
a1 1
/*	$OpenBSD: pppoe.h,v 1.5 2002/09/08 04:33:46 jason Exp $	*/
a124 1
void session_init(void);
a127 1
struct pppoe_session *session_find_fd(int);
a132 2
void recv_debug(int, struct ether_addr *,
    struct ether_header *, struct pppoe_header *, u_long, u_int8_t *);
@


1.5
log
@Fix a bunch of -pedantic errors
@
text
@d1 1
a1 1
/*	$OpenBSD: pppoe.h,v 1.4 2002/02/17 19:42:39 millert Exp $	*/
a14 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Network Security
 *	Technologies, Inc.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.4
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: pppoe.h,v 1.3 2002/02/16 21:28:07 millert Exp $	*/
d92 2
a93 2
void server_mode(int, char *, char *, struct ether_addr *);
int client_mode(int, char *, char *, struct ether_addr *);
d137 1
a137 1
int runppp(int, char *);
@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: pppoe.h,v 1.2 2001/04/24 05:02:34 jason Exp $	*/
d139 1
a139 2
int ppp_to_bpf __P((int, int, struct ether_addr *, struct ether_addr *,
    u_int16_t));
d141 2
a142 2
void recv_debug __P((int, struct ether_addr *,
    struct ether_header *, struct pppoe_header *, u_long, u_int8_t *));
@


1.2
log
@PPPOE_MTU should be (ETHERMTU - sizeof(struct pppoe_header)) not two bytes
less.  (This is the MTU between ppp and bpf, not to be confused with the link
negotiated ppp mtu).  Many thanks to Russell T Hunt <alaric@@MIT.EDU> and
Brian Somers <brian@@Awfulhak.org> for finding this.
@
text
@d1 1
a1 1
/*	$OpenBSD: pppoe.h,v 1.1.1.1 2000/06/18 07:30:41 jason Exp $	*/
d92 2
a93 2
void server_mode __P((int, char *, char *, struct ether_addr *));
int client_mode __P((int, char *, char *, struct ether_addr *));
d107 8
a114 8
void tag_init __P((struct tag_list *));
void tag_show __P((struct tag_list *));
void tag_destroy __P((struct tag_list *));
struct tag_node *tag_lookup __P((struct tag_list *, u_int16_t, int));
int tag_add __P((struct tag_list *, u_int16_t, u_int16_t, u_int8_t *));
int tag_pkt __P((struct tag_list *, u_long, u_int8_t *));
void tag_hton __P((struct tag_list *));
void tag_ntoh __P((struct tag_list *));
d131 5
a135 5
void session_init __P((void));
void session_destroy __P((struct pppoe_session *));
struct pppoe_session *session_new __P((struct ether_addr *));
struct pppoe_session *session_find_eaid __P((struct ether_addr *, u_int16_t));
struct pppoe_session *session_find_fd __P((int));
d137 2
a138 2
int runppp __P((int, char *));
int bpf_to_ppp __P((int, u_long, u_int8_t *));
d141 1
a141 1
int send_padt __P((int, struct ether_addr *, struct ether_addr *, u_int16_t));
d144 1
a144 1
void debug_packet __P((u_int8_t *, int));
d146 1
a146 1
u_int32_t cookie_bake __P((void));
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 1
a52 1
#define	PPPOE_MTU		(ETHERMTU - sizeof(struct pppoe_header) - 2)
@


1.1.1.1
log
@import my pppoe code
@
text
@@
