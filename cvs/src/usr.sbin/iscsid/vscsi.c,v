head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.2
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.8.0.14
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.10
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.8
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4;
locks; strict;
comment	@ * @;


1.17
date	2016.08.16.18.41.57;	author tedu;	state Exp;
branches;
next	1.16;
commitid	eyeRGwF24702KeRh;

1.16
date	2015.12.02.16.37.10;	author mmcc;	state Exp;
branches;
next	1.15;
commitid	zOBJFmBsq7P49RUS;

1.15
date	2015.01.16.15.57.06;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	smcy37dFZU9pEOE0;

1.14
date	2014.05.10.11.28.02;	author claudio;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.21.18.59.05;	author claudio;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.21.12.24.58;	author claudio;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.21.09.48.31;	author claudio;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.20.22.18.04;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.19.18.31.33;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.04.21.00.04;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2011.04.28.18.25.42;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.27.19.02.07;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.27.07.25.26;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2011.01.06.15.32.47;	author claudio;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.04.10.02.20;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.25.16.20.06;	author sobrado;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.24.09.43.19;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.17
log
@stop including sys/param.h for nitems. define locally as needed.
ok natano reyk
@
text
@/*	$OpenBSD: vscsi.c,v 1.16 2015/12/02 16:37:10 mmcc Exp $ */

/*
 * Copyright (c) 2009 Claudio Jeker <claudio@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/ioctl.h>
#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/uio.h>

#include <scsi/iscsi.h>
#include <scsi/scsi_all.h>
#include <dev/vscsivar.h>

#include <event.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>

#include "iscsid.h"
#include "log.h"

struct vscsi {
	struct event		ev;
	int			fd;
	struct vscsi_stats	stats;
} v;

struct scsi_task {
	struct task	task;
	int		tag;
	u_int		target;
	u_int		lun;
	size_t		datalen;
};

void	vscsi_callback(struct connection *, void *, struct pdu *);
void	vscsi_fail(void *arg);
void	vscsi_dataout(struct connection *, struct scsi_task *, u_int32_t,
	    size_t, size_t);

void
vscsi_open(char *dev)
{
	if ((v.fd = open(dev, O_RDWR)) == -1)
		fatal("vscsi_open");

	event_set(&v.ev, v.fd, EV_READ|EV_PERSIST, vscsi_dispatch, NULL);
	event_add(&v.ev, NULL);
}

void
vscsi_dispatch(int fd, short event, void *arg)
{
	struct vscsi_ioc_i2t i2t;
	struct iscsi_pdu_scsi_request *sreq;
	struct session *s;
	struct scsi_task *t;
	struct pdu *p;

	if (!(event & EV_READ)) {
		log_debug("spurious read call");
		return;
	}

	if (ioctl(v.fd, VSCSI_I2T, &i2t) == -1)
		fatal("vscsi_dispatch");

	v.stats.cnt_i2t++;
	if (i2t.direction < (int)nitems(v.stats.cnt_i2t_dir))
		v.stats.cnt_i2t_dir[i2t.direction]++;

	s = initiator_t2s(i2t.target);
	if (s == NULL)
		fatalx("vscsi_dispatch: unknown target");

	if (!(t = calloc(1, sizeof(*t))))
		fatal("vscsi_dispatch");

	t->tag = i2t.tag;
	t->target = i2t.target;
	t->lun = i2t.lun;

	if (!(p = pdu_new()))
		fatal("vscsi_dispatch");
	if (!(sreq = pdu_gethdr(p)))
		fatal("vscsi_dispatch");

	sreq->opcode = ISCSI_OP_SCSI_REQUEST;
	/* XXX use untagged commands, dlg sais so */
	sreq->flags = ISCSI_SCSI_F_F | ISCSI_SCSI_ATTR_UNTAGGED;
	if (i2t.direction == VSCSI_DIR_WRITE)
		sreq->flags |= ISCSI_SCSI_F_W;
	if (i2t.direction == VSCSI_DIR_READ)
		sreq->flags |= ISCSI_SCSI_F_R;
	sreq->bytes = htonl(i2t.datalen);

	/* LUN handling: currently we only do single level LUNs < 256 */
	if (t->lun >= 256)
		fatal("vscsi_dispatch: I'm sorry, Dave. "
		    "I'm afraid I can't do that.");
	sreq->lun[1] = t->lun;

	memcpy(sreq->cdb, &i2t.cmd, i2t.cmdlen);

	/* include immediate data of up to FirstBurstLength bytes if allowed */
	if (i2t.direction == VSCSI_DIR_WRITE && s->active.ImmediateData) {
		struct connection *c;
		char *buf;
		u_int32_t t32;
		size_t size;

		size = i2t.datalen > s->active.FirstBurstLength ?
		    s->active.FirstBurstLength : i2t.datalen;

		/* XXX assumes all connections have same settings */
		c = TAILQ_FIRST(&s->connections);
		if (c && size > c->active.MaxRecvDataSegmentLength)
			size = c->active.MaxRecvDataSegmentLength;

		if (!(buf = pdu_alloc(size)))
			fatal("vscsi_dispatch");
		t32 = htonl(size);
		memcpy(&sreq->ahslen, &t32, sizeof(t32));
		vscsi_data(VSCSI_DATA_WRITE, i2t.tag, buf, size);
		pdu_addbuf(p, buf, size, PDU_DATA);
	}

	task_init(&t->task, s, 0, t, vscsi_callback, vscsi_fail);
	task_pdu_add(&t->task, p);
	session_task_issue(s, &t->task);
}

/* read / write data to vscsi */
void
vscsi_data(unsigned long req, int tag, void *buf, size_t len)
{
	struct vscsi_ioc_data data;

	if (req == VSCSI_DATA_READ) {
		v.stats.cnt_read++;
		v.stats.bytes_rd += len;
	} else if (req == VSCSI_DATA_WRITE) {
		v.stats.cnt_write++;
		v.stats.bytes_wr += len;
	}
	data.tag = tag;
	data.data = buf;
	data.datalen = len;

	if (ioctl(v.fd, req, &data) == -1)
		fatal("vscsi_data");
}

void
vscsi_status(int tag, int status, void *buf, size_t len)
{
	struct vscsi_ioc_t2i t2i;

	v.stats.cnt_t2i++;
	if (status < (int)nitems(v.stats.cnt_t2i_status))
		v.stats.cnt_t2i_status[status]++;

	bzero(&t2i, sizeof(t2i));
	t2i.tag = tag;
	t2i.status = status;
	if (buf) {
		if (len > sizeof(t2i.sense))
			len = sizeof(t2i.sense);
		memcpy(&t2i.sense, buf, len);
	}

	if (ioctl(v.fd, VSCSI_T2I, &t2i) == -1)
		fatal("vscsi_status");
}

void
vscsi_event(unsigned long req, u_int target, u_int lun)
{
	struct vscsi_ioc_devevent devev;

	if (req == VSCSI_REQPROBE)
		v.stats.cnt_probe++;
	else if (req == VSCSI_REQDETACH)
		v.stats.cnt_detach++;

	devev.target = target;
	devev.lun = lun;

	if (ioctl(v.fd, req, &devev) == -1)
		fatal("vscsi_event");
}

void
vscsi_callback(struct connection *c, void *arg, struct pdu *p)
{
	struct scsi_task *t = arg;
	struct iscsi_pdu_scsi_response *sresp;
	struct iscsi_pdu_rt2 *r2t;
	int status = VSCSI_STAT_DONE;
	u_char *buf = NULL;
	size_t size, off, n;
	int tag;

	sresp = pdu_getbuf(p, NULL, PDU_HEADER);
	switch (ISCSI_PDU_OPCODE(sresp->opcode)) {
	case ISCSI_OP_SCSI_RESPONSE:
		conn_task_cleanup(c, &t->task);
		tag = t->tag;
		free(t);

		if (!(sresp->flags & 0x80) || (sresp->flags & 0x06) == 0x06 ||
		    (sresp->flags & 0x18) == 0x18) {
			log_debug("vscsi_callback: bad scsi response");
			conn_fail(c);
			break;
		}
		size = 0;
		/* XXX handle the various serial numbers */
		if (sresp->response) {
			status = VSCSI_STAT_ERR;
			goto send_status;
		}
		switch (sresp->status) {
		case ISCSI_SCSI_STAT_GOOD:
			break;
		case ISCSI_SCSI_STAT_CHCK_COND:
			status = VSCSI_STAT_SENSE;
			/* stupid encoding of sense data in the data segment */
			buf = pdu_getbuf(p, &n, PDU_DATA);
			if (buf) {
				size = buf[0] << 8 | buf[1];
				buf += 2;
			}
			break;
		default:
			status = VSCSI_STAT_ERR;
			break;
		}
send_status:
		vscsi_status(tag, status, buf, size);
		break;
	case ISCSI_OP_DATA_IN:
		buf = pdu_getbuf(p, &n, PDU_DATA);
		size = sresp->datalen[0] << 16 | sresp->datalen[1] << 8 |
		    sresp->datalen[2];
		if (size > n)
			fatal("This does not work as it should");
		vscsi_data(VSCSI_DATA_READ, t->tag, buf, size);
		if (sresp->flags & 1) {			/* XXX magic */
			conn_task_cleanup(c, &t->task);
			vscsi_status(t->tag, status, NULL, 0);
			free(t);
		}
		break;
	case ISCSI_OP_R2T:
		conn_task_cleanup(c, &t->task);
		r2t = (struct iscsi_pdu_rt2 *)sresp;
		off = ntohl(r2t->buffer_offs);
		size = ntohl(r2t->desired_datalen);

		vscsi_dataout(c, t, r2t->ttt, size, off);
		break;
	default:
		log_debug("scsi task: tag %d, target %d lun %d", t->tag,
		    t->target, t->lun);
		log_pdu(p, 1);
	}
	pdu_free(p);
}

void
vscsi_fail(void *arg)
{
	struct scsi_task *t = arg;

	log_debug("vscsi_fail: task failed, resetting it");
	vscsi_status(t->tag, VSCSI_STAT_RESET, NULL, 0);
}

void
vscsi_dataout(struct connection *c, struct scsi_task *t, u_int32_t ttt,
    size_t len, size_t buffer_off)
{
	struct pdu *p;
	struct iscsi_pdu_data_out *dout;
	u_char *buf = NULL;
	size_t size, off;
	u_int32_t t32, dsn = 0;

	for (off = 0; off < len; off += size) {
		size = len - off > c->active.MaxRecvDataSegmentLength ?
		    c->active.MaxRecvDataSegmentLength : len - off;

		/* XXX also respect the MaxBurstLength */

		if (!(p = pdu_new()))
			fatal("vscsi_r2t");
		if (!(dout = pdu_gethdr(p)))
			fatal("vscsi_r2t");

		dout->opcode = ISCSI_OP_DATA_OUT;
		if (off + size == len)
			dout->flags = 0x80; /* XXX magic value: F flag*/
		/* LUN handling: currently we only do single level LUNs < 256 */
		dout->lun[1] = t->lun;
		dout->ttt = ttt;
		dout->datasn = htonl(dsn++);
		t32 = htonl(size);
		memcpy(&dout->ahslen, &t32, sizeof(t32));

		dout->buffer_offs = htonl(buffer_off + off);
		if (!(buf = pdu_alloc(size)))
			fatal("vscsi_r2t");

		vscsi_data(VSCSI_DATA_WRITE, t->tag, buf, size);
		pdu_addbuf(p, buf, size, PDU_DATA);
		task_pdu_add(&t->task, p);
	}
	conn_task_issue(c, &t->task);
}

struct vscsi_stats *
vscsi_stats(void)
{
	return &v.stats;
}
@


1.16
log
@typo in log entry
@
text
@d1 1
a1 1
/*	$OpenBSD: vscsi.c,v 1.15 2015/01/16 15:57:06 deraadt Exp $ */
a18 1
#include <sys/param.h>	/* for nitems */
@


1.15
log
@move to <limits.h> where possible, annotate <sys/param.h> otherwise
@
text
@d1 1
a1 1
/*	$OpenBSD: vscsi.c,v 1.14 2014/05/10 11:28:02 claudio Exp $ */
d291 1
a291 1
	log_debug("vscsi_fail: task failed, reseting it");
@


1.14
log
@Move the task cleanup from the task fail callback to taskq_cleanup.
This makes the one failure callback a lot simpler.
@
text
@d1 1
a1 1
/*	$OpenBSD: vscsi.c,v 1.13 2014/04/21 18:59:05 claudio Exp $ */
a18 1
#include <sys/types.h>
@


1.13
log
@Bind to localAddr if specified and add some XXX comments about stuff
that is not prefect yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: vscsi.c,v 1.12 2014/04/21 12:24:58 claudio Exp $ */
a290 1
	int tag;
d292 2
a293 4
	conn_task_cleanup(NULL, &t->task);
	tag = t->tag;
	free(t);
	vscsi_status(tag, VSCSI_STAT_RESET, NULL, 0);
@


1.12
log
@It is possible that we can't burst all of the data in the immediate data
part of the write request. In that case R2T requests with be sent for the
rest of the data. The amount of data we can send is defined by
MaxRecvDataSegmentLength which is per connection and so a bit hackish to
read out. In the long run the min() of all connection MaxRecvDataSegmentLength
should be stored in the session struct.
@
text
@d1 1
a1 1
/*	$OpenBSD: vscsi.c,v 1.11 2014/04/21 09:48:31 claudio Exp $ */
d312 2
@


1.11
log
@Now that we properly negotiate the session params we can enable sending
of immediate data for write commands. This gives a nice 20% performance
boost on writes compared to the solicited data transaction we did before.
@
text
@d1 1
a1 1
/*	$OpenBSD: vscsi.c,v 1.10 2014/04/20 22:18:04 claudio Exp $ */
d52 4
a55 3
void vscsi_callback(struct connection *, void *, struct pdu *);
void vscsi_fail(void *arg);
void vscsi_dataout(struct connection *, struct scsi_task *, u_int32_t, size_t);
d122 2
a123 2
	if (i2t.direction == VSCSI_DIR_WRITE &&
	    s->active.ImmediateData) {
d130 6
d217 1
a217 1
	size_t size = 0, n;
d233 1
d274 1
a274 2
		if (ntohl(r2t->buffer_offs))
			fatalx("vscsi: r2t bummer failure");
d277 1
a277 1
		vscsi_dataout(c, t, r2t->ttt, size);
d301 1
a301 1
    size_t len)
d328 1
a328 1
		dout->buffer_offs = htonl(off);
@


1.10
log
@Introduce some basic stats for the vscsi layer. Just counting the commands
and the bytes we push through vscsi(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: vscsi.c,v 1.9 2014/04/19 18:31:33 claudio Exp $ */
a73 4
#if 0
	char *buf;
	u_int32_t t32;
#endif
d120 10
a129 3
#if 0
	if (i2t.direction == VSCSI_DIR_WRITE) {
		if (!(buf = pdu_alloc(i2t.datalen)))
d131 1
a131 1
		t32 = htonl(i2t.datalen);
d133 2
a134 2
		vscsi_data(VSCSI_DATA_WRITE, i2t.tag, buf, i2t.datalen);
		pdu_addbuf(p, buf, i2t.datalen, PDU_DATA);
a135 1
#endif
@


1.9
log
@COnveret the bcopy() to memcpy()
@
text
@d1 1
a1 1
/*	$OpenBSD: vscsi.c,v 1.8 2011/05/04 21:00:04 claudio Exp $ */
d20 1
d39 3
a41 2
	struct event	ev;
	int		fd;
d87 4
d140 1
d146 7
d166 4
d188 5
d328 6
@


1.8
log
@Massive diff to handle logins more correctly. iscsid will now do
better operational parameter negotiation but more is needed.
Tested by todd@@ and myself.
@
text
@d1 1
a1 1
/*	$OpenBSD: vscsi.c,v 1.7 2011/04/28 18:25:42 claudio Exp $ */
d116 1
a116 1
	bcopy(&i2t.cmd, sreq->cdb, i2t.cmdlen);
d123 1
a123 1
		bcopy(&t32, &sreq->ahslen, sizeof(t32));
d158 1
a158 1
		bcopy(buf, &t2i.sense, len);
d294 1
a294 1
		bcopy(&t32, &dout->ahslen, sizeof(t32));
@


1.7
log
@DATA OUT operations need to be piggibacked on the same connection as
the initial SCSI REQUEST so use conn_task_issue() in vscsi_dataout().
@
text
@d1 1
a1 1
/*	$OpenBSD: vscsi.c,v 1.6 2011/04/27 19:02:07 claudio Exp $ */
d278 2
a279 2
		/* XXX hardcoded numbers, bad bad bad */
		size = len - off > 8 * 1024 ? 8 * 1024 : len - off;
@


1.6
log
@Rename task_cleanup() to conn_task_cleanup() seems a better place for
this function since it does connections scheduling.
@
text
@d1 1
a1 1
/*	$OpenBSD: vscsi.c,v 1.5 2011/04/27 07:25:26 claudio Exp $ */
d52 1
a52 1
void vscsi_dataout(struct session *, struct scsi_task *, u_int32_t, size_t);
d232 1
a232 1
		if (sresp->flags & 1) {
d245 1
a245 1
		vscsi_dataout(c->session, t, r2t->ttt, size);
d268 2
a269 1
vscsi_dataout(struct session *s, struct scsi_task *t, u_int32_t ttt, size_t len)
d304 1
a304 1
	session_task_issue(s, &t->task);
@


1.5
log
@Start implementing the FSM. Introduce a session FSM that is run via a
callback and implement some of the connection FSM actions. Implement
logouts so that discovery sessions do a nice login -> query -> logout.
Fix the task scheduling especially for immediate and connection specific
tasks. The session will now only schedule tasks to a session that is
in LOGGED_IN state.
looks good dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vscsi.c,v 1.4 2011/01/06 15:32:47 claudio Exp $ */
d191 1
a191 1
		task_cleanup(&t->task, c);
d233 1
a233 1
			task_cleanup(&t->task, c);
d239 1
a239 1
		task_cleanup(&t->task, c);
d261 1
a261 1
	task_cleanup(&t->task, NULL);
@


1.4
log
@Add minimal LUN handling. Currently only single level LUN addressing is
supported because the vscsi ioctl interface is limited to that.
Seems to work according to my iscsi target having 2 units per target.
OK dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vscsi.c,v 1.3 2011/01/04 10:02:20 claudio Exp $ */
d51 1
d129 1
a129 1
	task_init(&t->task, s, 0, t, vscsi_callback);
a232 1
			log_debug("and a vscsi_status");
d256 12
d277 1
@


1.3
log
@Truncate the scsi sense data to 18 bytes if more data was supplied.
dlg@@ said it is OK to do that since the additional data is optional.
My connection to the iscsi target sending 64byte sense data is now
much happier.
@
text
@d1 1
a1 1
/*	$OpenBSD: vscsi.c,v 1.2 2010/09/25 16:20:06 sobrado Exp $ */
d109 5
a113 1
	/* XXX LUN HANDLING !!!! */
d275 2
@


1.2
log
@spacing, no binary changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: vscsi.c,v 1.1 2010/09/24 09:43:19 claudio Exp $ */
d152 1
a152 2
			fatal("vscsi_status: I'm sorry, Dave. "
			    "I'm afraid I can't do that.");
@


1.1
log
@iSCSI Initiatior daemon using vscsi(4).
Currently implements the absolute minimum of the protocol to make
it work against targets. Many things still in flux but we're annoyed
to work outside of the tree.  Commited from a source tree on an iSCSI
disk served via iscsid but it is not yet production ready.
OK dlg@@, matthew@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d9 1
a9 1
 * 
@

