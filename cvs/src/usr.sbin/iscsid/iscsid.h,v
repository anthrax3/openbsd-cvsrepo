head	1.16;
access;
symbols
	OPENBSD_6_1:1.16.0.4
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.14.0.10
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.6
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.8
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.9.0.14
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.10
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.8
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4;
locks; strict;
comment	@ * @;


1.16
date	2016.09.02.16.22.31;	author benno;	state Exp;
branches;
next	1.15;
commitid	TGFs3VTBtPNgUl3F;

1.15
date	2016.08.16.18.41.57;	author tedu;	state Exp;
branches;
next	1.14;
commitid	eyeRGwF24702KeRh;

1.14
date	2014.05.10.11.30.47;	author claudio;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.21.17.41.52;	author claudio;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.21.09.48.31;	author claudio;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.20.22.18.04;	author claudio;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.07.19.55.46;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2011.05.04.21.00.04;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.02.06.32.56;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2011.04.27.19.02.07;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.27.07.25.26;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.05.18.26.19;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2011.01.04.13.19.55;	author claudio;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.04.09.50.18;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.25.16.20.06;	author sobrado;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.24.09.43.19;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.16
log
@work on making log.c similar in all daemons:

move daemon-local functions into new logmsg.c, and reduce
the (mostly whitespace) differences so that log.c's can be diffed easily.

ok claudio@@
@
text
@/*	$OpenBSD: iscsid.h,v 1.15 2016/08/16 18:41:57 tedu Exp $ */

/*
 * Copyright (c) 2009 Claudio Jeker <claudio@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define ISCSID_DEVICE	"/dev/vscsi0"
#define ISCSID_CONTROL	"/var/run/iscsid.sock"
#define ISCSID_CONFIG	"/etc/iscsi.conf"
#define ISCSID_USER	"_iscsid"

#define ISCSID_BASE_NAME	"iqn.1995-11.org.openbsd.iscsid"
#define ISCSID_DEF_CONNS	8
#define ISCSID_HOLD_TIME_MAX	128

#define PDU_READ_SIZE		(256 * 1024)
#define CONTROL_READ_SIZE	8192
#define PDU_MAXIOV		5
#define PDU_WRIOV		(PDU_MAXIOV * 8)

#define PDU_HEADER	0
#define PDU_AHS		1
#define PDU_HDIGEST	2
#define PDU_DATA	3
#define PDU_DDIGEST	4

#define PDU_LEN(x)	((((x) + 3) / 4) * 4)

#ifndef nitems
#define nitems(_a) (sizeof((_a)) / sizeof((_a)[0]))
#endif

/*
 * Common control message header.
 * A message can consist of up to 3 parts with specified length.
 */
struct ctrlmsghdr {
	u_int16_t	type;
	u_int16_t	len[3];
};

struct ctrldata {
	void		*buf;
	size_t		 len;
};

#define CTRLARGV(x...)	((struct ctrldata []){ x })

/* Control message types */
#define CTRL_SUCCESS		1
#define CTRL_FAILURE		2
#define CTRL_INPROGRESS		3
#define CTRL_INITIATOR_CONFIG	4
#define CTRL_SESSION_CONFIG	5
#define CTRL_LOG_VERBOSE	6
#define CTRL_VSCSI_STATS	7
#define CTRL_SHOW_SUM		8


TAILQ_HEAD(session_head, session);
TAILQ_HEAD(connection_head, connection);
TAILQ_HEAD(pduq, pdu);
TAILQ_HEAD(taskq, task);

/* as in tcp_seq.h */
#define SEQ_LT(a,b)     ((int)((a)-(b)) < 0)
#define SEQ_LEQ(a,b)    ((int)((a)-(b)) <= 0)
#define SEQ_GT(a,b)     ((int)((a)-(b)) > 0)
#define SEQ_GEQ(a,b)    ((int)((a)-(b)) >= 0)

#define SESS_INIT		0x0001
#define SESS_FREE		0x0002
#define SESS_LOGGED_IN		0x0004
#define SESS_FAILED		0x0008
#define SESS_ANYSTATE		0xffff
#define SESS_RUNNING		(SESS_FREE | SESS_LOGGED_IN | SESS_FAILED)

#define CONN_FREE		0x0001	/* S1 = R3 */
#define CONN_XPT_WAIT		0x0002	/* S2 */
#define CONN_XPT_UP		0x0004	/* S3 */
#define CONN_IN_LOGIN		0x0008	/* S4 */
#define CONN_LOGGED_IN		0x0010	/* S5 */
#define CONN_IN_LOGOUT		0x0020	/* S6 */
#define CONN_LOGOUT_REQ		0x0040	/* S7 */
#define CONN_CLEANUP_WAIT	0x0080	/* S8 = R1 */
#define CONN_IN_CLEANUP		0x0100	/* R2 */
#define CONN_ANYSTATE		0xffff
#define CONN_RUNNING		(CONN_LOGGED_IN | CONN_LOGOUT_REQ)
#define CONN_FAILED		(CONN_CLEANUP_WAIT | CONN_IN_CLEANUP)
#define CONN_NEVER_LOGGED_IN	(CONN_FREE | CONN_XPT_WAIT | CONN_XPT_UP | \
				    CONN_IN_LOGIN)

enum c_event {
	CONN_EV_FAIL,
	CONN_EV_FREE,
	CONN_EV_CONNECT,
	CONN_EV_CONNECTED,
	CONN_EV_LOGGED_IN,
	CONN_EV_REQ_LOGOUT,
	CONN_EV_LOGOUT,
	CONN_EV_LOGGED_OUT,
	CONN_EV_CLOSED,
	CONN_EV_CLEANING_UP
};

enum s_event {
	SESS_EV_START,
	SESS_EV_STOP,
	SESS_EV_CONN_LOGGED_IN,
	SESS_EV_CONN_FAIL,
	SESS_EV_CONN_CLOSED,
	SESS_EV_REINSTATEMENT,
	SESS_EV_TIMEOUT,
	SESS_EV_CLOSED,
	SESS_EV_FAIL,
	SESS_EV_FREE
};

#define SESS_ACT_UP		0
#define SESS_ACT_DOWN		1

struct pdu {
	TAILQ_ENTRY(pdu)	 entry;
	struct iovec		 iov[PDU_MAXIOV];
	size_t			 resid;
};

struct pdu_readbuf {
	char		*buf;
	size_t		 size;
	size_t		 rpos;
	size_t		 wpos;
	struct pdu	*wip;
};

struct connection_config {
	/* values inherited from session_config */
	struct sockaddr_storage	 TargetAddr;	/* IP:port of target */
	struct sockaddr_storage	 LocalAddr;	/* IP:port of target */
};

struct initiator_config {
	u_int32_t		isid_base;	/* only 24 bits */
	u_int16_t		isid_qual;
	u_int16_t		pad;
};

struct session_config {
	/* unique session ID */
	char			SessionName[32];
	/*
	 * I = initialize only, L = leading only
	 * S = session wide, C = connection only
	 */
	struct connection_config connection;

	char			*TargetName;	/* String: IS */

	char			*InitiatorName;	/* String: IS */

	u_int16_t		 MaxConnections;
				 /* 1, 1-65535 (min()): LS */
	u_int8_t		 HeaderDigest;
				 /* None , (None|CRC32): IC */
	u_int8_t		 DataDigest;
				 /* None , (None|CRC32): IC */
	u_int8_t		 SessionType;
				 /* Normal, (Discovery|Normal): LS */
	u_int8_t		 disabled;
};

#define SESSION_TYPE_NORMAL	0
#define SESSION_TYPE_DISCOVERY	1

struct session_params {
	u_int32_t		 MaxBurstLength;
				 /* 262144, 512-to-(2**24-1) (min()): LS */
	u_int32_t		 FirstBurstLength;
				 /* 65536, 512-to-(2**24-1) (min()): LS */
	u_int16_t		 DefaultTime2Wait;
				 /* 2, 0-to-3600 (max()): LS */
	u_int16_t		 DefaultTime2Retain;
				 /* 20, 0-to-3600 (min()): LS */
	u_int16_t		 MaxOutstandingR2T;
				 /* 1, 1-to-65535 (min()): LS */
	u_int16_t		 TargetPortalGroupTag;
				 /* 1- 65535: IS */
	u_int16_t		 MaxConnections;
				 /* 1, 1-65535 (min()): LS */
	u_int8_t		 InitialR2T;
				 /* yes, bool (||): LS  */
	u_int8_t		 ImmediateData;
				 /* yes, bool (&&): LS */
	u_int8_t		 DataPDUInOrder;
				 /* yes, bool (||): LS */
	u_int8_t		 DataSequenceInOrder;
				 /* yes, bool (||): LS */
	u_int8_t		 ErrorRecoveryLevel;
				 /* 0, 0 - 2 (min()): LS */
};

struct connection_params {
	u_int32_t		 MaxRecvDataSegmentLength;
				 /* 8192, 512-to-(2**24-1): C */
				 /* inherited from session_config */
	u_int8_t		 HeaderDigest;
	u_int8_t		 DataDigest;
};

struct initiator {
	struct session_head	sessions;
	struct initiator_config	config;
	u_int			target;
};

struct sessev {
	struct session		*sess;
	struct connection	*conn;
	enum s_event		 event;
};

struct session {
	TAILQ_ENTRY(session)	 entry;
	struct connection_head	 connections;
	struct taskq		 tasks;
	struct session_config	 config;
	struct session_params	 mine;
	struct session_params	 his;
	struct session_params	 active;
	struct initiator	*initiator;
	u_int32_t		 cmdseqnum;
	u_int32_t		 itt;
	u_int32_t		 isid_base;	/* only 24 bits */
	u_int16_t		 isid_qual;	/* inherited from initiator */
	u_int16_t		 tsih;		/* target session id handle */
	u_int			 target;
	int			 holdTimer;	/* internal hold timer */
	int			 state;
	int			 action;
};

struct connection {
	struct event		 ev;
	struct event		 wev;
	TAILQ_ENTRY(connection)	 entry;
	struct connection_params mine;
	struct connection_params his;
	struct connection_params active;
	struct connection_config config;
	struct pdu_readbuf	 prbuf;
	struct pduq		 pdu_w;
	struct taskq		 tasks;
	struct session		*session;
	u_int32_t		 expstatsn;
	int			 state;
	int			 fd;
	u_int16_t		 cid;	/* conection id */
};

struct task {
	TAILQ_ENTRY(task)	 entry;
	struct pduq		 sendq;
	struct pduq		 recvq;
	void			*callarg;
	void	(*callback)(struct connection *, void *, struct pdu *);
	void	(*failback)(void *);
	u_int32_t		 cmdseqnum;
	u_int32_t		 itt;
	u_int8_t		 pending;
};

struct kvp {
	char	*key;
	char	*value;
	long	 flags;
};
#define KVP_KEY_ALLOCED		0x01
#define KVP_VALUE_ALLOCED	0x02

struct vscsi_stats {
	u_int64_t	bytes_rd;
	u_int64_t	bytes_wr;
	u_int64_t	cnt_read;
	u_int64_t	cnt_write;
	u_int64_t	cnt_i2t;
	u_int64_t	cnt_i2t_dir[3];
	u_int64_t	cnt_t2i;
	u_int64_t	cnt_t2i_status[3];
	u_int32_t	cnt_probe;
	u_int32_t	cnt_detach;
};

extern const struct session_params iscsi_sess_defaults;
extern const struct connection_params iscsi_conn_defaults;
extern struct session_params initiator_sess_defaults;
extern struct connection_params initiator_conn_defaults;

void	iscsid_ctrl_dispatch(void *, struct pdu *);
void	iscsi_merge_sess_params(struct session_params *,
	    struct session_params *, struct session_params *);
void	iscsi_merge_conn_params(struct connection_params *,
	    struct connection_params *, struct connection_params *);

struct initiator *initiator_init(void);
void	initiator_cleanup(struct initiator *);
void	initiator_shutdown(struct initiator *);
int	initiator_isdown(struct initiator *);
struct session *initiator_t2s(u_int);
void	initiator_login(struct connection *);
void	initiator_discovery(struct session *);
void	initiator_logout(struct session *, struct connection *, u_int8_t);
void	initiator_nop_in_imm(struct connection *, struct pdu *);
char	*default_initiator_name(void);

int	control_init(char *);
void	control_cleanup(char *);
void	control_event_init(void);
void	control_queue(void *, struct pdu *);
int	control_compose(void *, u_int16_t, void *, size_t);
int	control_build(void *, u_int16_t, int, struct ctrldata *);

struct session	*session_find(struct initiator *, char *);
struct session	*session_new(struct initiator *, u_int8_t);
void	session_cleanup(struct session *);
int	session_shutdown(struct session *);
void	session_config(struct session *, struct session_config *);
void	session_task_issue(struct session *, struct task *);
void	session_logout_issue(struct session *, struct task *);
void	session_schedule(struct session *);
void	session_task_login(struct connection *);
void	session_fsm(struct session *, enum s_event, struct connection *,
	    unsigned int);

void	conn_new(struct session *, struct connection_config *);
void	conn_free(struct connection *);
int	conn_task_ready(struct connection *);
void	conn_task_issue(struct connection *, struct task *);
void	conn_task_schedule(struct connection *);
void	conn_task_cleanup(struct connection *, struct task *);
int	conn_parse_kvp(struct connection *, struct kvp *);
int	conn_gen_kvp(struct connection *, struct kvp *, size_t *);
void	conn_pdu_write(struct connection *, struct pdu *);
void	conn_fail(struct connection *);
void	conn_fsm(struct connection *, enum c_event);

void	*pdu_gethdr(struct pdu *);
int	text_to_pdu(struct kvp *, struct pdu *);
struct kvp *pdu_to_text(char *, size_t);
u_int64_t	text_to_num(const char *, u_int64_t, u_int64_t, const char **);
int		text_to_bool(const char *, const char **);
void	pdu_free_queue(struct pduq *);
ssize_t	pdu_read(struct connection *);
ssize_t	pdu_write(struct connection *);
int	pdu_pending(struct connection *);
void	pdu_parse(struct connection *);
int	pdu_readbuf_set(struct pdu_readbuf *, size_t);
void	pdu_readbuf_free(struct pdu_readbuf *);

struct pdu *pdu_new(void);
void	*pdu_alloc(size_t);
void	*pdu_dup(void *, size_t);
int	pdu_addbuf(struct pdu *, void *, size_t, unsigned int);
void	*pdu_getbuf(struct pdu *, size_t *, unsigned int);
void	pdu_free(struct pdu *);
int	socket_setblockmode(int, int);
const char *log_sockaddr(void *);

void	task_init(struct task *, struct session *, int, void *,
	    void (*)(struct connection *, void *, struct pdu *),
	    void (*)(void *));
void	taskq_cleanup(struct taskq *);
void	task_pdu_add(struct task *, struct pdu *);
void	task_pdu_cb(struct connection *, struct pdu *);

void	vscsi_open(char *);
void	vscsi_dispatch(int, short, void *);
void	vscsi_data(unsigned long, int, void *, size_t);
void	vscsi_status(int, int, void *, size_t);
void	vscsi_event(unsigned long, u_int, u_int);
struct vscsi_stats *vscsi_stats(void);

/* logmsg.c */
void	log_hexdump(void *, size_t);
void	log_pdu(struct pdu *, int);
@


1.15
log
@stop including sys/param.h for nitems. define locally as needed.
ok natano reyk
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.h,v 1.14 2014/05/10 11:30:47 claudio Exp $ */
d393 4
@


1.14
log
@Extend the connection and session FSMs so that connection failure is
handled more gracefully. Losing the TCP connection no longer results
in an unrecoverable stop requiring a restart of iscsid.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.h,v 1.13 2014/04/21 17:41:52 claudio Exp $ */
d40 4
@


1.13
log
@Redo most of the control message handling. Switch it back to use
SOCK_SEQPACKET and provide functions to build the control messages that
can also be used by iscsictl.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.h,v 1.12 2014/04/21 09:48:31 claudio Exp $ */
d26 1
a82 1
#define SESS_DOWN		0x0010
d86 9
a94 9
#define CONN_FREE		0x0001
#define CONN_XPT_WAIT		0x0002
#define CONN_XPT_UP		0x0004
#define CONN_IN_LOGIN		0x0008
#define CONN_LOGGED_IN		0x0010
#define CONN_IN_LOGOUT		0x0020
#define CONN_LOGOUT_REQ		0x0040
#define CONN_CLEANUP_WAIT	0x0080
#define CONN_IN_CLEANUP		0x0100
d107 1
d110 2
a111 1
	CONN_EV_CLOSED
d116 1
d120 2
d123 2
a124 1
	SESS_EV_FAIL
d225 1
a225 1
	SIMPLEQ_ENTRY(sessev)	 entry;
a238 2
	struct event		 fsm_ev;
	SIMPLEQ_HEAD(, sessev)	 fsmq;
d245 1
d339 2
a340 1
void	session_fsm(struct session *, enum s_event, struct connection *);
@


1.12
log
@Now that we properly negotiate the session params we can enable sending
of immediate data for write commands. This gives a nice 20% performance
boost on writes compared to the solicited data transaction we did before.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.h,v 1.11 2014/04/20 22:18:04 claudio Exp $ */
d49 7
d321 1
a321 1
int	control_queue(void *, struct pdu *);
d323 1
@


1.11
log
@Introduce some basic stats for the vscsi layer. Just counting the commands
and the bytes we push through vscsi(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.h,v 1.10 2014/04/07 19:55:46 claudio Exp $ */
d57 1
@


1.10
log
@To win the startup race on the control socket we need to listen to it as
well only then the connect() call from iscsictl will not fail. Move listen()
into the init function and rename control_listen() to control_event_init()
since it is now only doing that.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.h,v 1.9 2011/05/04 21:00:04 claudio Exp $ */
d56 1
d275 13
d373 1
@


1.9
log
@Massive diff to handle logins more correctly. iscsid will now do
better operational parameter negotiation but more is needed.
Tested by todd@@ and myself.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.h,v 1.8 2011/05/02 06:32:56 claudio Exp $ */
d298 1
a298 1
int	control_listen(void);
@


1.8
log
@Rework the logout code and use this to do a proper logout when
exiting.  This works well for idle sessions but still has some
issues on busy session. It seems more task scheduler changes are
needed to make this work.  This also includes some mem-leak fixes
in error pathes found by Igor Zinovik.
go for it dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.h,v 1.7 2011/04/27 19:02:07 claudio Exp $ */
d25 1
d77 9
a85 9
#define	CONN_FREE		0x0001
#define	CONN_XPT_WAIT		0x0002
#define	CONN_XPT_UP		0x0004
#define	CONN_IN_LOGIN		0x0008
#define	CONN_LOGGED_IN		0x0010
#define	CONN_IN_LOGOUT		0x0020
#define	CONN_LOGOUT_REQ		0x0040
#define	CONN_CLEANUP_WAIT	0x0080
#define	CONN_IN_CLEANUP		0x0100
d89 2
a90 1
#define CONN_NEVER_LOGGED_IN	(CONN_FREE | CONN_XPT_WAIT | CONN_XPT_UP)
d182 1
a182 1
				 /* 1, 1-65535 (min()): LO */
d274 5
d280 4
d318 3
a320 1
void	conn_task_cleanup(struct connection *c, struct task *);
d328 2
@


1.7
log
@Rename task_cleanup() to conn_task_cleanup() seems a better place for
this function since it does connections scheduling.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.h,v 1.6 2011/04/27 07:25:26 claudio Exp $ */
d70 3
a72 2
#define SESS_LOGGED_IN		0x0003
#define SESS_FAILED		0x0004
d74 1
a75 1
#define CONN_DONE		0x0000	/* no real state just return value */
d86 3
a88 1
#define CONN_NOT_LOGGED_IN	(CONN_FREE | CONN_XPT_WAIT | CONN_XPT_UP)
d92 1
a95 1
	CONN_EV_DISCOVERY,
d103 1
d106 1
d110 3
d231 1
d276 2
d281 1
a281 1
void	initiator_logout(struct connection *, u_int8_t, int);
d294 1
d297 1
a308 1
void	conn_logout(struct connection *);
a309 1
void	conn_loggedin(struct connection *);
@


1.6
log
@Start implementing the FSM. Introduce a session FSM that is run via a
callback and implement some of the connection FSM actions. Implement
logouts so that discovery sessions do a nice login -> query -> logout.
Fix the task scheduling especially for immediate and connection specific
tasks. The session will now only schedule tasks to a session that is
in LOGGED_IN state.
looks good dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.h,v 1.5 2011/04/05 18:26:19 claudio Exp $ */
d51 4
a54 2
#define CTRL_INITIATOR_CONFIG	3
#define CTRL_SESSION_CONFIG	4
d294 1
a324 1
void	task_cleanup(struct task *, struct connection *c);
@


1.5
log
@Move session related code into session.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.h,v 1.4 2011/01/04 13:19:55 claudio Exp $ */
d66 5
a70 3
#define SESS_FREE		0x0001
#define SESS_LOGGED_IN		0x0002
#define SESS_FAILED		0x0003
d83 1
d91 10
a100 1
	CONN_EV_CLOSE
d197 6
d212 2
d247 1
d250 1
d268 1
d280 1
a280 1
void	session_close(struct session *);
d285 1
d289 2
a290 1
int	conn_task_issue(struct connection *, struct task *);
d293 1
a293 1
void	conn_close(struct connection *);
d296 1
d319 3
a321 1
	    void (*)(struct connection *, void *, struct pdu *));
@


1.4
log
@Implememnt NOP-IN -> NOP-OUT handling. If the NOP-In was issued by the
target (itt = 0xffffffff) send back an immediate NOP-Out reusing the
NOP-In PDU. This makes my iscsi target happy.
Also plug a mem leak on error path which was found by Igor Zinovik.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.h,v 1.3 2011/01/04 09:50:18 claudio Exp $ */
d70 1
d247 1
@


1.3
log
@Add missing session parameter.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.h,v 1.2 2010/09/25 16:20:06 sobrado Exp $ */
d241 1
a241 1
void initiator_cleanup(struct initiator *);
d243 3
a259 2
void	initiator_login(struct connection *);
void	initiator_discovery(struct session *);
@


1.2
log
@spacing, no binary changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.h,v 1.1 2010/09/24 09:43:19 claudio Exp $ */
d156 2
@


1.1
log
@iSCSI Initiatior daemon using vscsi(4).
Currently implements the absolute minimum of the protocol to make
it work against targets. Many things still in flux but we're annoyed
to work outside of the tree.  Commited from a source tree on an iSCSI
disk served via iscsid but it is not yet production ready.
OK dlg@@, matthew@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d9 1
a9 1
 * 
@

