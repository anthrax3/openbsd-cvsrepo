head	1.21;
access;
symbols
	OPENBSD_6_1:1.21.0.6
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.4
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.4
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.13.0.14
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.10
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.8
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.6
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.4
	OPENBSD_5_0:1.13.0.2
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7;
locks; strict;
comment	@ * @;


1.21
date	2015.12.05.06.38.18;	author mmcc;	state Exp;
branches;
next	1.20;
commitid	w23M5Qk8sqvawSlZ;

1.20
date	2014.11.23.13.10.30;	author claudio;	state Exp;
branches;
next	1.19;
commitid	VCwHESl2Vy8OziLU;

1.19
date	2014.05.10.11.30.47;	author claudio;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.21.18.59.05;	author claudio;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.21.12.26.50;	author claudio;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.20.20.12.31;	author claudio;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.20.18.17.12;	author claudio;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.20.16.49.56;	author claudio;	state Exp;
branches;
next	1.13;

1.13
date	2011.05.04.21.00.04;	author claudio;	state Exp;
branches;
next	1.12;

1.12
date	2011.05.02.06.32.56;	author claudio;	state Exp;
branches;
next	1.11;

1.11
date	2011.04.28.18.32.01;	author claudio;	state Exp;
branches;
next	1.10;

1.10
date	2011.04.27.19.02.07;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2011.04.27.07.25.26;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2011.04.05.01.07.24;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2011.01.10.12.53.32;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2011.01.06.15.35.06;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2011.01.04.13.12.40;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.25.16.20.06;	author sobrado;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.24.10.46.13;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.24.10.44.39;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.24.09.43.19;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.21
log
@strings.h -> string.h as necessary to prevent implicit declaration
warnings
@
text
@/*	$OpenBSD: connection.c,v 1.20 2014/11/23 13:10:30 claudio Exp $ */

/*
 * Copyright (c) 2009 Claudio Jeker <claudio@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/uio.h>

#include <netinet/in.h>
#include <netinet/tcp.h>

#include <scsi/iscsi.h>

#include <errno.h>
#include <event.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "iscsid.h"
#include "log.h"

void	conn_dispatch(int, short, void *);
void	conn_write_dispatch(int, short, void *);

int	c_do_connect(struct connection *, enum c_event);
int	c_do_login(struct connection *, enum c_event);
int	c_do_loggedin(struct connection *, enum c_event);
int	c_do_req_logout(struct connection *, enum c_event);
int	c_do_logout(struct connection *, enum c_event);
int	c_do_loggedout(struct connection *, enum c_event);
int	c_do_fail(struct connection *, enum c_event);
int	c_do_cleanup(struct connection *, enum c_event);

const char *conn_state(int);
const char *conn_event(enum c_event);

void
conn_new(struct session *s, struct connection_config *cc)
{
	struct connection *c;
	int nodelay = 1;

	if (!(c = calloc(1, sizeof(*c))))
		fatal("session_add_conn");

	c->fd = -1;
	c->state = CONN_FREE;
	c->session = s;
	c->cid = arc4random();
	c->config = *cc;
	c->mine = initiator_conn_defaults;
	c->mine.HeaderDigest = s->config.HeaderDigest;
	c->mine.DataDigest = s->config.DataDigest;
	c->his = iscsi_conn_defaults;
	c->active = iscsi_conn_defaults;

	TAILQ_INIT(&c->pdu_w);
	TAILQ_INIT(&c->tasks);
	TAILQ_INSERT_TAIL(&s->connections, c, entry);

	if (pdu_readbuf_set(&c->prbuf, PDU_READ_SIZE)) {
		log_warn("conn_new");
		conn_free(c);
		return;
	}

	/* create socket */
	c->fd = socket(c->config.TargetAddr.ss_family, SOCK_STREAM, 0);
	if (c->fd == -1) {
		log_warn("conn_new: socket");
		conn_free(c);
		return;
	}
	if (socket_setblockmode(c->fd, 1)) {
		log_warn("conn_new: socket_setblockmode");
		conn_free(c);
		return;
	}

	/* try to turn off TCP Nagle */
	if (setsockopt(c->fd, IPPROTO_TCP, TCP_NODELAY, &nodelay,
	    sizeof(nodelay)) == -1)
		log_warn("conn_new: setting TCP_NODELAY");

	event_set(&c->ev, c->fd, EV_READ|EV_PERSIST, conn_dispatch, c);
	event_set(&c->wev, c->fd, EV_WRITE, conn_write_dispatch, c);

	conn_fsm(c, CONN_EV_CONNECT);
}

void
conn_free(struct connection *c)
{
	log_debug("conn_free");

	pdu_readbuf_free(&c->prbuf);
	pdu_free_queue(&c->pdu_w);

	event_del(&c->ev);
	event_del(&c->wev);
	if (c->fd != -1)
		close(c->fd);

	taskq_cleanup(&c->tasks);

	TAILQ_REMOVE(&c->session->connections, c, entry);
	free(c);
}

void
conn_dispatch(int fd, short event, void *arg)
{
	struct connection *c = arg;
	ssize_t n;

	if (!(event & EV_READ)) {
		log_debug("spurious read call");
		return;
	}
	if ((n = pdu_read(c)) == -1) {
		if (errno == EAGAIN || errno == ENOBUFS ||
		    errno == EINTR)	/* try later */
			return;
		log_warn("pdu_read");
		conn_fsm(c, CONN_EV_FAIL);
		return;
	}
	if (n == 0) {    /* connection closed */
		conn_fsm(c, CONN_EV_CLOSED);
		return;
	}

	pdu_parse(c);
}

void
conn_write_dispatch(int fd, short event, void *arg)
{
	struct connection *c = arg;
	ssize_t n;
	int error;
	socklen_t len;

	if (!(event & EV_WRITE)) {
		log_debug("spurious write call");
		return;
	}

	switch (c->state) {
	case CONN_XPT_WAIT:
		len = sizeof(error);
		if (getsockopt(c->fd, SOL_SOCKET, SO_ERROR,
		    &error, &len) == -1 || (errno = error)) {
			log_warn("connect to %s failed",
			    log_sockaddr(&c->config.TargetAddr));
			conn_fsm(c, CONN_EV_FAIL);
			return;
		}
		conn_fsm(c, CONN_EV_CONNECTED);
		break;
	default:
		if ((n = pdu_write(c)) == -1) {
			log_warn("pdu_write");
			conn_fsm(c, CONN_EV_FAIL);
			return;
		}
		if (n == 0) {    /* connection closed */
			conn_fsm(c, CONN_EV_CLOSED);
			return;
		}

		/* check if there is more to send */
		if (pdu_pending(c))
			event_add(&c->wev, NULL);
	}
}

void
conn_fail(struct connection *c)
{
	log_debug("conn_fail");
	conn_fsm(c, CONN_EV_FAIL);
}

int
conn_task_ready(struct connection *c)
{
	if ((c->state & CONN_RUNNING) && TAILQ_EMPTY(&c->tasks))
		return 1;
	return 0;
}

void
conn_task_issue(struct connection *c, struct task *t)
{
	TAILQ_INSERT_TAIL(&c->tasks, t, entry);
	conn_task_schedule(c);
}

void
conn_task_schedule(struct connection *c)
{
	struct task *t = TAILQ_FIRST(&c->tasks);
	struct pdu *p, *np;

	if (!t) {
		log_debug("conn_task_schedule: task is hiding");
		return;
	}

	/* move pdus to the write queue */
	for (p = TAILQ_FIRST(&t->sendq); p != NULL; p = np) {
		np = TAILQ_NEXT(p, entry);
		TAILQ_REMOVE(&t->sendq, p, entry);
		conn_pdu_write(c, p);
	}
	if (t->callback == NULL) {
		/* no callback, immediate command expecting no answer */
		conn_task_cleanup(c, t);
		free(t);
	}
}

void
conn_task_cleanup(struct connection *c, struct task *t)
{
	pdu_free_queue(&t->sendq);
	pdu_free_queue(&t->recvq);
	/* XXX need some state to know if queued or not */
	if (c) {
		TAILQ_REMOVE(&c->tasks, t, entry);
		if (!TAILQ_EMPTY(&c->tasks))
			conn_task_schedule(c);
		else
			session_schedule(c->session);
	}
}

#define SET_NUM(p, x, v, min, max)				\
do {								\
	if (!strcmp((p)->key, #v)) {				\
		(x)->his.v = text_to_num((p)->value, (min), (max), &err); \
		if (err) {					\
			log_warnx("bad param %s=%s: %s",	\
			    (p)->key, (p)->value, err);		\
			errors++;				\
		}						\
log_debug("SET_NUM: %s = %llu", #v, (u_int64_t)(x)->his.v);	\
	}							\
} while (0)

#define SET_BOOL(p, x, v)					\
do {								\
	if (!strcmp((p)->key, #v)) {				\
		(x)->his.v = text_to_bool((p)->value, &err);	\
		if (err) {					\
			log_warnx("bad param %s=%s: %s",	\
			    (p)->key, (p)->value, err);		\
			errors++;				\
		}						\
log_debug("SET_BOOL: %s = %u", #v, (int)(x)->his.v);		\
	}							\
} while (0)

int
conn_parse_kvp(struct connection *c, struct kvp *kvp)
{
	struct kvp *k;
	struct session *s = c->session;
	const char *err;
	int errors = 0;


	for (k = kvp; k->key; k++) {
log_debug("conn_parse_kvp: %s = %s", k->key, k->value);
		/* XXX handle NotUnderstood|Irrelevant|Reject */
		SET_NUM(k, s, MaxBurstLength, 512, 16777215);
		SET_NUM(k, s, FirstBurstLength, 512, 16777215);
		SET_NUM(k, s, DefaultTime2Wait, 0, 3600);
		SET_NUM(k, s, DefaultTime2Retain, 0, 3600);
		SET_NUM(k, s, MaxOutstandingR2T, 1, 65535);
		SET_NUM(k, s, TargetPortalGroupTag, 0, 65535);
		SET_NUM(k, s, MaxConnections, 1, 65535);
		SET_BOOL(k, s, InitialR2T);
		SET_BOOL(k, s, ImmediateData);
		SET_BOOL(k, s, DataPDUInOrder);
		SET_BOOL(k, s, DataSequenceInOrder);
		SET_NUM(k, s, ErrorRecoveryLevel, 0, 2);
		SET_NUM(k, c, MaxRecvDataSegmentLength, 512, 16777215);
	}

	if (errors) {
		log_warnx("conn_parse_kvp: errors found");
		return -1;
	}
	return 0;
}

#undef SET_NUM
#undef SET_BOOL

int
conn_gen_kvp(struct connection *c, struct kvp *kvp, size_t *nkvp)
{
	struct session *s = c->session;
	size_t i = 0;

	if (s->mine.MaxConnections != iscsi_sess_defaults.MaxConnections) {
		if (kvp && i < *nkvp) {
			kvp[i].key = strdup("MaxConnections");
			if (kvp[i].key == NULL)
				return -1;
			if (asprintf(&kvp[i].value, "%hu",
			    s->mine.MaxConnections) == -1) {
				kvp[i].value = NULL;
				return -1;
			}
		}
		i++;
	}
	if (c->mine.MaxRecvDataSegmentLength !=
	    iscsi_conn_defaults.MaxRecvDataSegmentLength) {
		if (kvp && i < *nkvp) {
			kvp[i].key = strdup("MaxRecvDataSegmentLength");
			if (kvp[i].key == NULL)
				return -1;
			if (asprintf(&kvp[i].value, "%u",
			    c->mine.MaxRecvDataSegmentLength) == -1) {
				kvp[i].value = NULL;
				return -1;
			}
		}
		i++;
	}

	*nkvp = i;
	return 0;
}

void
conn_pdu_write(struct connection *c, struct pdu *p)
{
	struct iscsi_pdu *ipdu;

/* XXX I GUESS THIS SHOULD BE MOVED TO PDU SOMEHOW... */
	ipdu = pdu_getbuf(p, NULL, PDU_HEADER);
	switch (ISCSI_PDU_OPCODE(ipdu->opcode)) {
	case ISCSI_OP_I_NOP:
	case ISCSI_OP_SCSI_REQUEST:
	case ISCSI_OP_TASK_REQUEST:
	case ISCSI_OP_LOGIN_REQUEST:
	case ISCSI_OP_TEXT_REQUEST:
	case ISCSI_OP_DATA_OUT:
	case ISCSI_OP_LOGOUT_REQUEST:
	case ISCSI_OP_SNACK_REQUEST:
		ipdu->expstatsn = ntohl(c->expstatsn);
		break;
	}

	TAILQ_INSERT_TAIL(&c->pdu_w, p, entry);
	event_add(&c->wev, NULL);
}

/* connection state machine more or less as specified in the RFC */
struct {
	int		state;
	enum c_event	event;
	int		(*action)(struct connection *, enum c_event);
} fsm[] = {
	{ CONN_FREE, CONN_EV_CONNECT, c_do_connect },		/* T1 */
	{ CONN_XPT_WAIT, CONN_EV_CONNECTED, c_do_login },	/* T4 */
	{ CONN_IN_LOGIN, CONN_EV_LOGGED_IN, c_do_loggedin },	/* T5 */
	{ CONN_LOGGED_IN, CONN_EV_LOGOUT, c_do_logout },	/* T9 */
	{ CONN_LOGGED_IN, CONN_EV_REQ_LOGOUT, c_do_req_logout },/* T11 */
	{ CONN_LOGOUT_REQ, CONN_EV_LOGOUT, c_do_logout },	/* T10 */
	{ CONN_LOGOUT_REQ, CONN_EV_REQ_LOGOUT, c_do_req_logout},/* T12 */
	{ CONN_LOGOUT_REQ, CONN_EV_LOGGED_OUT, c_do_loggedout },/* T18 */
	{ CONN_IN_LOGOUT, CONN_EV_LOGGED_OUT, c_do_loggedout },	/* T13 */
	{ CONN_IN_LOGOUT, CONN_EV_REQ_LOGOUT, c_do_req_logout },/* T14 */
	{ CONN_CLEANUP_WAIT, CONN_EV_CLEANING_UP, c_do_cleanup},/* M2 */
	{ CONN_CLEANUP_WAIT, CONN_EV_FREE, c_do_loggedout },	/* M1 */
	{ CONN_IN_CLEANUP, CONN_EV_FREE, c_do_loggedout },	/* M4 */
	{ CONN_IN_CLEANUP, CONN_EV_CLEANING_UP, c_do_cleanup},
	/* either one of T2, T7, T15, T16, T17, M3 */
	{ CONN_ANYSTATE, CONN_EV_CLOSED, c_do_fail },
	{ CONN_ANYSTATE, CONN_EV_FAIL, c_do_fail },
	{ CONN_ANYSTATE, CONN_EV_FREE, c_do_fail },
	{ 0, 0, NULL }
};

void
conn_fsm(struct connection *c, enum c_event event)
{
	int	i, ns;

	for (i = 0; fsm[i].action != NULL; i++) {
		if (c->state & fsm[i].state && event == fsm[i].event) {
			log_debug("conn_fsm[%s]: %s ev %s",
			    c->session->config.SessionName,
			    conn_state(c->state), conn_event(event));
			ns = fsm[i].action(c, event);
			if (ns == -1)
				/* XXX better please */
				fatalx("conn_fsm: action failed");
			log_debug("conn_fsm[%s]: new state %s",
			    c->session->config.SessionName, conn_state(ns));
			c->state = ns;
			return;
		}
	}
	log_warnx("conn_fsm[%s]: unhandled state transition [%s, %s]",
	    c->session->config.SessionName, conn_state(c->state),
	    conn_event(event));
	fatalx("bork bork bork");
}

int
c_do_connect(struct connection *c, enum c_event ev)
{
	if (c->fd == -1) {
		log_warnx("connect(%s), lost socket",
		    log_sockaddr(&c->config.TargetAddr));
		session_fsm(c->session, SESS_EV_CONN_FAIL, c, 0);
		return CONN_FREE;
	}
	if (c->config.LocalAddr.ss_len != 0) {
		if (bind(c->fd, (struct sockaddr *)&c->config.LocalAddr,
		    c->config.LocalAddr.ss_len) == -1) {
			log_warn("bind(%s)",
			    log_sockaddr(&c->config.LocalAddr));
			session_fsm(c->session, SESS_EV_CONN_FAIL, c, 0);
			return CONN_FREE;
		}
	}
	if (connect(c->fd, (struct sockaddr *)&c->config.TargetAddr,
	    c->config.TargetAddr.ss_len) == -1) {
		if (errno == EINPROGRESS) {
			event_add(&c->wev, NULL);
			event_add(&c->ev, NULL);
			return CONN_XPT_WAIT;
		} else {
			log_warn("connect(%s)",
			    log_sockaddr(&c->config.TargetAddr));
			session_fsm(c->session, SESS_EV_CONN_FAIL, c, 0);
			return CONN_FREE;
		}
	}
	event_add(&c->ev, NULL);
	/* move forward */
	return c_do_login(c, CONN_EV_CONNECTED);
}

int
c_do_login(struct connection *c, enum c_event ev)
{
	/* start a login session and hope for the best ... */
	initiator_login(c);
	return CONN_IN_LOGIN;
}

int
c_do_loggedin(struct connection *c, enum c_event ev)
{
	iscsi_merge_conn_params(&c->active, &c->mine, &c->his);
	session_fsm(c->session, SESS_EV_CONN_LOGGED_IN, c, 0);

	return CONN_LOGGED_IN;
}

int
c_do_req_logout(struct connection *c, enum c_event ev)
{
	/* target requested logout. XXX implement async handler */

	if (c->state & CONN_IN_LOGOUT)
		return CONN_IN_LOGOUT;
	else
		return CONN_LOGOUT_REQ;
}

int
c_do_logout(struct connection *c, enum c_event ev)
{
	/* logout is in progress ... */
	return CONN_IN_LOGOUT;
}

int
c_do_loggedout(struct connection *c, enum c_event ev)
{
	/*
	 * Called by the session fsm before calling conn_free.
	 * Doing this so the state transition is logged.
	 */
	return CONN_FREE;
}

int
c_do_fail(struct connection *c, enum c_event ev)
{
	log_debug("c_do_fail");

	/* cleanup events so that the connection does not retrigger */
	event_del(&c->ev);
	event_del(&c->wev);
	close(c->fd);
	c->fd = -1;	/* make sure this fd is not closed again */

	/* all pending task have failed so clean them up */
	taskq_cleanup(&c->tasks);

	/* session will take care of cleaning up the mess */
	session_fsm(c->session, SESS_EV_CONN_FAIL, c, 0);

	if (ev == CONN_EV_FREE || c->state & CONN_NEVER_LOGGED_IN)
		return CONN_FREE;
	return CONN_CLEANUP_WAIT;
}

int
c_do_cleanup(struct connection *c, enum c_event ev)
{
	/* nothing to do here just adjust state */
	return CONN_IN_CLEANUP;
}

const char *
conn_state(int s)
{
	static char buf[15];

	switch (s) {
	case CONN_FREE:
		return "FREE";
	case CONN_XPT_WAIT:
		return "XPT_WAIT";
	case CONN_XPT_UP:
		return "XPT_UP";
	case CONN_IN_LOGIN:
		return "IN_LOGIN";
	case CONN_LOGGED_IN:
		return "LOGGED_IN";
	case CONN_IN_LOGOUT:
		return "IN_LOGOUT";
	case CONN_LOGOUT_REQ:
		return "LOGOUT_REQ";
	case CONN_CLEANUP_WAIT:
		return "CLEANUP_WAIT";
	case CONN_IN_CLEANUP:
		return "IN_CLEANUP";
	default:
		snprintf(buf, sizeof(buf), "UKNWN %x", s);
		return buf;
	}
	/* NOTREACHED */
}

const char *
conn_event(enum c_event e)
{
	static char buf[15];

	switch (e) {
	case CONN_EV_FAIL:
		return "fail";
	case CONN_EV_CONNECT:
		return "connect";
	case CONN_EV_CONNECTED:
		return "connected";
	case CONN_EV_LOGGED_IN:
		return "logged in";
	case CONN_EV_REQ_LOGOUT:
		return "logout requested";
	case CONN_EV_LOGOUT:
		return "logout";
	case CONN_EV_LOGGED_OUT:
		return "logged out";
	case CONN_EV_CLEANING_UP:
		return "cleaning up";
	case CONN_EV_CLOSED:
		return "closed";
	case CONN_EV_FREE:
		return "forced free";
	}

	snprintf(buf, sizeof(buf), "UKNWN %d", e);
	return buf;
}
@


1.20
log
@TargetPortalGroupTag is a binary 16-bit value so 0 is allowed.
Still not perfect since binary values can also be base64 encoded but
one step closer.
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.19 2014/05/10 11:30:47 claudio Exp $ */
d33 1
a33 1
#include <strings.h>
@


1.19
log
@Extend the connection and session FSMs so that connection failure is
handled more gracefully. Losing the TCP connection no longer results
in an unrecoverable stop requiring a restart of iscsid.
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.18 2014/04/21 18:59:05 claudio Exp $ */
d292 1
d299 1
a299 1
		SET_NUM(k, s, TargetPortalGroupTag, 1, 65535);
@


1.18
log
@Bind to localAddr if specified and add some XXX comments about stuff
that is not prefect yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.17 2014/04/21 12:26:50 claudio Exp $ */
d45 1
d49 1
a103 1
	event_add(&c->ev, NULL);
d111 2
d118 2
a119 1
	close(c->fd);
d171 1
a171 1
			log_warn("cwd connect(%s)",
d390 1
d392 2
d395 6
d439 1
a439 1
		session_fsm(c->session, SESS_EV_CONN_FAIL, c);
d447 1
a447 1
			session_fsm(c->session, SESS_EV_CONN_FAIL, c);
d455 1
d460 1
a460 1
			session_fsm(c->session, SESS_EV_CONN_FAIL, c);
d464 1
d481 1
a481 1
	session_fsm(c->session, SESS_EV_CONN_LOGGED_IN, c);
d487 11
d507 4
a510 6
	/* close TCP session and cleanup */
	event_del(&c->ev);
	event_del(&c->wev);
	close(c->fd);

	/* session is informed by the logout handler */
d517 2
d523 4
d528 2
a529 1
	session_fsm(c->session, SESS_EV_CONN_FAIL, c);
d536 7
d588 2
d594 2
@


1.17
log
@Handle EAGAIN, ENOBUFS and EINTR a bit better. Ignore them one layer above
and do not fail and tear down the world when they happen.
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.16 2014/04/20 20:12:31 claudio Exp $ */
d288 1
d429 9
a437 1

@


1.16
log
@After doing all of the loging dance to get the target's params it makes
sense to merge them into the active set. At least that way we run with
the right params and finally do reads and writes that are > 8k.
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.15 2014/04/20 18:17:12 claudio Exp $ */
d134 4
@


1.15
log
@Use only one style for "return foo;"
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.14 2014/04/20 16:49:56 claudio Exp $ */
d452 1
@


1.14
log
@Fix conn_gen_kvp and its caller to fill the kvp array properly (including
the NULL terminator at the end). Now iscsid does proper LoginOperational
negotiation (which will bump the MaxRecvDataSegmentLength to 64k)
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.13 2011/05/04 21:00:04 claudio Exp $ */
d319 1
a319 1
				return (-1);
d323 1
a323 1
				return (-1);
d333 1
a333 1
				return (-1);
d337 1
a337 1
				return (-1);
d344 1
a344 1
	return (0);
d422 1
a422 1
		return (CONN_FREE);
d429 1
a429 1
			return (CONN_XPT_WAIT);
d434 1
a434 1
			return (CONN_FREE);
d438 1
a438 1
	return (c_do_login(c, CONN_EV_CONNECTED));
d446 1
a446 1
	return (CONN_IN_LOGIN);
d454 1
a454 1
	return (CONN_LOGGED_IN);
d461 1
a461 1
	return (CONN_IN_LOGOUT);
d473 1
a473 1
	return (CONN_FREE);
d487 2
a488 2
		return (CONN_FREE);
	return (CONN_CLEANUP_WAIT);
@


1.13
log
@Massive diff to handle logins more correctly. iscsid will now do
better operational parameter negotiation but more is needed.
Tested by todd@@ and myself.
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.12 2011/05/02 06:32:56 claudio Exp $ */
a315 1
		i++;
d320 2
a321 2
			if (asprintf(&kvp[i].value, "%u",
			    (unsigned int)s->mine.MaxConnections) == -1) {
d326 1
a329 1
		i++;
d335 1
a335 1
			    (unsigned int)c->mine.MaxRecvDataSegmentLength) == -1) {
d340 1
@


1.12
log
@Rework the logout code and use this to do a proper logout when
exiting.  This works well for idle sessions but still has some
issues on busy session. It seems more task scheduler changes are
needed to make this work.  This also includes some mem-leak fixes
in error pathes found by Igor Zinovik.
go for it dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.11 2011/04/28 18:32:01 claudio Exp $ */
d33 1
d66 6
a235 1
/* XXX THIS FEELS WRONG FOR NOW */
d248 98
@


1.11
log
@Try to schedule a new task for the connection in conn_task_cleanup()
this removes the session_schedule() in the task_pdu_cb().
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.10 2011/04/27 19:02:07 claudio Exp $ */
a19 1
#include <sys/ioctl.h>
a27 2
#include <scsi/scsi_all.h>
#include <dev/vscsivar.h>
a180 6
conn_logout(struct connection *c)
{
	conn_fsm(c, CONN_EV_LOGOUT);
}

void
a186 9
void
conn_loggedin(struct connection *c)
{
	if (c->session->config.SessionType == SESSION_TYPE_DISCOVERY)
		conn_fsm(c, CONN_EV_DISCOVERY);
	else
		conn_fsm(c, CONN_EV_LOGGED_IN);
}

d190 1
a190 1
	if ((c->state & CONN_LOGGED_IN) && TAILQ_EMPTY(&c->tasks))
a275 1
	{ CONN_IN_LOGIN, CONN_EV_DISCOVERY, c_do_loggedin },	/* T5 */
d281 1
d348 2
a349 4
	if (ev == CONN_EV_LOGGED_IN)
		vscsi_event(VSCSI_REQPROBE, c->session->target, -1);
	else
		initiator_discovery(c->session);
d356 1
a356 2
	/* do full logout */
	initiator_logout(c, ISCSI_LOGOUT_CLOSE_SESS, 1);
d368 1
a368 2
	session_fsm(c->session, SESS_EV_CONN_CLOSED, c);

d382 1
a382 1
	if (c->state & CONN_NOT_LOGGED_IN)
a386 1

a431 2
	case CONN_EV_DISCOVERY:
		return "discovery";
d438 2
@


1.10
log
@Rename task_cleanup() to conn_task_cleanup() seems a better place for
this function since it does connections scheduling.
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.9 2011/04/27 07:25:26 claudio Exp $ */
d255 2
@


1.9
log
@Start implementing the FSM. Introduce a session FSM that is run via a
callback and implement some of the connection FSM actions. Implement
logouts so that discovery sessions do a nice login -> query -> logout.
Fix the task scheduling especially for immediate and connection specific
tasks. The session will now only schedule tasks to a session that is
in LOGGED_IN state.
looks good dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.8 2011/04/05 01:07:24 claudio Exp $ */
d239 1
a239 1
		task_cleanup(t, c);
d243 15
@


1.8
log
@Log the SessionName so that it is possible to understand which session
caused the problem.
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.7 2011/01/10 12:53:32 claudio Exp $ */
a40 1
void	conn_fsm(struct connection *, enum c_event);
d48 2
d113 2
d130 1
a130 1
		conn_fail(c);
d134 1
a134 1
		conn_fsm(c, CONN_EV_CLOSE);
d161 1
a161 1
			conn_fail(c);
d168 2
a169 1
			conn_fail(c);
d173 1
a173 1
			conn_fsm(c, CONN_EV_CLOSE);
d184 1
a184 1
conn_close(struct connection *c)
d186 1
a186 1
	conn_fsm(c, CONN_EV_CLOSE);
d192 1
d206 8
a215 5
	/* XXX need to verify that we're in the right state for the task */

	if (!TAILQ_EMPTY(&c->tasks))
		return 0;

a217 1
	return 1;
d235 1
a235 1
		conn_pdu_write(c, p);	/* maybe inline ? */
d274 9
a282 5
	{ CONN_FREE, CONN_EV_CONNECT, c_do_connect },
	{ CONN_XPT_WAIT, CONN_EV_CONNECTED, c_do_login },
	{ CONN_IN_LOGIN, CONN_EV_LOGGED_IN, c_do_loggedin },
	{ CONN_IN_LOGIN, CONN_EV_DISCOVERY, c_do_loggedin },
	{ CONN_LOGGED_IN, CONN_EV_CLOSE, c_do_logout },
d293 3
a296 3
			log_debug("conn_fsm[%s]: %s ev %s -> %s",
			   c->session->config.SessionName, conn_state(c->state),
			   conn_event(event), conn_state(ns));
d300 2
d307 2
a308 2
		c->session->config.SessionName, conn_state(c->state),
		conn_event(event));
d315 6
a320 2
	if (c->fd == -1)
		fatalx("c_do_connect, lost socket");
d330 2
a331 1
			return (-1);
d360 14
d377 16
d440 6
a445 2
	case CONN_EV_CLOSE:
		return "close";
@


1.7
log
@Remove 2 empty lines.
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.6 2011/01/06 15:35:06 claudio Exp $ */
d283 3
a285 3
			log_debug("conn_fsm: %s ev %s -> %s",
			   conn_state(c->state), conn_event(event),
			   conn_state(ns));
d293 3
a295 2
	log_warnx("conn_fsm: unhandled state transition [%s, %s]",
		conn_state(c->state), conn_event(event));
@


1.6
log
@Pass the magic LUN -1 to VSCSI_REQPROBE so that all LU are probed
by the midlayer. With help from dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.5 2011/01/04 13:12:40 claudio Exp $ */
a93 2


@


1.5
log
@Cleanup tasks with a NULL callback after queuing the PDU to be sent out.
This allows immediate responses (e.g. NOP-out) to be issued with a task
instead of very special code. Also set expstatsn on all PDU that carry
it.
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.4 2010/09/25 16:20:06 sobrado Exp $ */
d333 1
a333 1
		vscsi_event(VSCSI_REQPROBE, c->session->target, 0);
@


1.4
log
@spacing, no binary changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.3 2010/09/24 10:46:13 claudio Exp $ */
d232 5
d247 2
d250 5
@


1.3
log
@another useless and noisy debug message
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.2 2010/09/24 10:44:39 claudio Exp $ */
d9 1
a9 1
 * 
d207 1
a207 1
	if (!TAILQ_EMPTY(&c->tasks))  
@


1.2
log
@Set TCP_NODELAY since we want the request to be sent ASAP.
OK dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: connection.c,v 1.1 2010/09/24 09:43:19 claudio Exp $ */
a206 1
log_debug("conn_task_issue");
@


1.1
log
@iSCSI Initiatior daemon using vscsi(4).
Currently implements the absolute minimum of the protocol to make
it work against targets. Many things still in flux but we're annoyed
to work outside of the tree.  Commited from a source tree on an iSCSI
disk served via iscsid but it is not yet production ready.
OK dlg@@, matthew@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d26 1
d57 1
d89 7
@

