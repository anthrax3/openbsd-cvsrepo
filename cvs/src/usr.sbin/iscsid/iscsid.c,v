head	1.20;
access;
symbols
	OPENBSD_6_0:1.18.0.8
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.4
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.8.0.8
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.6
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.4
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3;
locks; strict;
comment	@ * @;


1.20
date	2017.01.23.08.40.07;	author benno;	state Exp;
branches;
next	1.19;
commitid	aVoRuUdT99JaB3Ww;

1.19
date	2016.08.16.18.41.57;	author tedu;	state Exp;
branches;
next	1.18;
commitid	eyeRGwF24702KeRh;

1.18
date	2015.01.16.15.57.06;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	smcy37dFZU9pEOE0;

1.17
date	2014.11.03.16.45.00;	author tedu;	state Exp;
branches;
next	1.16;
commitid	0YGhvcepbNEe8U3m;

1.16
date	2014.07.13.17.07.00;	author claudio;	state Exp;
branches;
next	1.15;
commitid	Q1Zn89KuB9L9WwBE;

1.15
date	2014.05.10.11.30.47;	author claudio;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.21.18.00.23;	author claudio;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.21.09.48.31;	author claudio;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.20.22.18.04;	author claudio;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.20.12.22.16;	author claudio;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.07.19.55.46;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2014.02.17.18.59.50;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2011.08.20.19.03.39;	author sthen;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.04.21.00.04;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.02.06.32.56;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.27.19.16.15;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.27.07.25.26;	author claudio;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.25.16.20.06;	author sobrado;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.25.11.57.22;	author sobrado;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.24.09.43.19;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.20
log
@copy log.c/h from bgpd.
ok claudio
@
text
@/*	$OpenBSD: iscsid.c,v 1.19 2016/08/16 18:41:57 tedu Exp $ */

/*
 * Copyright (c) 2009 Claudio Jeker <claudio@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/sysctl.h>
#include <sys/time.h>
#include <sys/uio.h>

#include <err.h>
#include <event.h>
#include <pwd.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "iscsid.h"
#include "log.h"

void		main_sig_handler(int, short, void *);
__dead void	usage(void);
void		shutdown_cb(int, short, void *);

struct initiator *initiator;
struct event exit_ev;
int exit_rounds;
#define ISCSI_EXIT_WAIT 5

const struct session_params	iscsi_sess_defaults = {
	.MaxBurstLength = 262144,
	.FirstBurstLength = 65536,
	.DefaultTime2Wait = 2,
	.DefaultTime2Retain = 20,
	.MaxOutstandingR2T = 1,
	.MaxConnections = 1,
	.InitialR2T = 1,
	.ImmediateData = 1,
	.DataPDUInOrder = 1,
	.DataSequenceInOrder = 1,
	.ErrorRecoveryLevel = 0
};

const struct connection_params	iscsi_conn_defaults = {
	.MaxRecvDataSegmentLength = 8192
};

int
main(int argc, char *argv[])
{
	struct event ev_sigint, ev_sigterm, ev_sighup;
	struct passwd *pw;
	char *ctrlsock = ISCSID_CONTROL;
	char *vscsidev = ISCSID_DEVICE;
	int name[] = { CTL_KERN, KERN_PROC_NOBROADCASTKILL, 0 };
	int ch, debug = 0, verbose = 0, nobkill = 1;

	log_procname = getprogname();

	log_init(1);    /* log to stderr until daemonized */
	log_verbose(1);

	while ((ch = getopt(argc, argv, "dn:s:v")) != -1) {
		switch (ch) {
		case 'd':
			debug = 1;
			break;
		case 'n':
			vscsidev = optarg;
			break;
		case 's':
			ctrlsock = optarg;
			break;
		case 'v':
			verbose = 1;
			break;
		default:
			usage();
			/* NOTREACHED */
		}
	}

	argc -= optind;
	argv += optind;

	if (argc > 0)
		usage();

	/* check for root privileges  */
	if (geteuid())
		errx(1, "need root privileges");

	log_init(debug);
	log_verbose(verbose);

	if (control_init(ctrlsock) == -1)
		fatalx("control socket setup failed");

	if (!debug)
		daemon(1, 0);
	log_info("startup");

	name[2] = getpid();
	if (sysctl(name, 3, NULL, 0, &nobkill, sizeof(nobkill)) != 0)
		fatal("sysctl");

	event_init();
	vscsi_open(vscsidev);

	/* chroot and drop to iscsid user */
	if ((pw = getpwnam(ISCSID_USER)) == NULL)
		errx(1, "unknown user %s", ISCSID_USER);

	if (chroot(pw->pw_dir) == -1)
		fatal("chroot");
	if (chdir("/") == -1)
		fatal("chdir(\"/\")");
	if (setgroups(1, &pw->pw_gid) ||
	    setresgid(pw->pw_gid, pw->pw_gid, pw->pw_gid) ||
	    setresuid(pw->pw_uid, pw->pw_uid, pw->pw_uid))
		fatal("can't drop privileges");

	/* setup signal handler */
	signal_set(&ev_sigint, SIGINT, main_sig_handler, NULL);
	signal_set(&ev_sigterm, SIGTERM, main_sig_handler, NULL);
	signal_set(&ev_sighup, SIGHUP, main_sig_handler, NULL);
	signal_add(&ev_sigint, NULL);
	signal_add(&ev_sigterm, NULL);
	signal_add(&ev_sighup, NULL);
	signal(SIGPIPE, SIG_IGN);

	control_event_init();
	initiator = initiator_init();

	event_dispatch();

	/* do some cleanup on the way out */
	control_cleanup(ctrlsock);
	initiator_cleanup(initiator);
	log_info("exiting.");
	return 0;
}

void
shutdown_cb(int fd, short event, void *arg)
{
	struct timeval tv;

	if (exit_rounds++ >= ISCSI_EXIT_WAIT || initiator_isdown(initiator))
		event_loopexit(NULL);

	timerclear(&tv);
	tv.tv_sec = 1;

	if (evtimer_add(&exit_ev, &tv) == -1)
		fatal("shutdown_cb");
}

void
main_sig_handler(int sig, short event, void *arg)
{
	struct timeval tv;

	/* signal handler rules don't apply, libevent decouples for us */
	switch (sig) {
	case SIGTERM:
	case SIGINT:
	case SIGHUP:
		initiator_shutdown(initiator);
		evtimer_set(&exit_ev, shutdown_cb, NULL);
		timerclear(&tv);
		if (evtimer_add(&exit_ev, &tv) == -1)
			fatal("main_sig_handler");
		break;
	default:
		fatalx("unexpected signal");
		/* NOTREACHED */
	}
}

__dead void
usage(void)
{
	extern char *__progname;

	fprintf(stderr, "usage: %s [-dv] [-n device] [-s socket]\n",
	    __progname);
	exit(1);
}

void
iscsid_ctrl_dispatch(void *ch, struct pdu *pdu)
{
	struct ctrlmsghdr *cmh;
	struct initiator_config *ic;
	struct session_config *sc;
	struct session *s;
	int *valp;

	cmh = pdu_getbuf(pdu, NULL, 0);
	if (cmh == NULL)
		goto done;

	switch (cmh->type) {
	case CTRL_INITIATOR_CONFIG:
		if (cmh->len[0] != sizeof(*ic)) {
			log_warnx("CTRL_INITIATOR_CONFIG bad size");
			control_compose(ch, CTRL_FAILURE, NULL, 0);
			break;
		}
		ic = pdu_getbuf(pdu, NULL, 1);
		memcpy(&initiator->config, ic, sizeof(initiator->config));
		control_compose(ch, CTRL_SUCCESS, NULL, 0);
		break;
	case CTRL_SESSION_CONFIG:
		if (cmh->len[0] != sizeof(*sc)) {
			log_warnx("CTRL_SESSION_CONFIG bad size");
			control_compose(ch, CTRL_FAILURE, NULL, 0);
			break;
		}
		sc = pdu_getbuf(pdu, NULL, 1);
		if (cmh->len[1])
			sc->TargetName = pdu_getbuf(pdu, NULL, 2);
		else if (sc->SessionType != SESSION_TYPE_DISCOVERY) {
			control_compose(ch, CTRL_FAILURE, NULL, 0);
			goto done;
		} else
			sc->TargetName = NULL;
		if (cmh->len[2])
			sc->InitiatorName = pdu_getbuf(pdu, NULL, 3);
		else
			sc->InitiatorName = NULL;

		s = session_find(initiator, sc->SessionName);
		if (s == NULL) {
			s = session_new(initiator, sc->SessionType);
			if (s == NULL) {
				control_compose(ch, CTRL_FAILURE, NULL, 0);
				goto done;
			}
		}

		session_config(s, sc);
		if (s->state == SESS_INIT)
			session_fsm(s, SESS_EV_START, NULL, 0);

		control_compose(ch, CTRL_SUCCESS, NULL, 0);
		break;
	case CTRL_LOG_VERBOSE:
		if (cmh->len[0] != sizeof(int)) {
			log_warnx("CTRL_LOG_VERBOSE bad size");
			control_compose(ch, CTRL_FAILURE, NULL, 0);
			break;
		}
		valp = pdu_getbuf(pdu, NULL, 1);
		log_verbose(*valp);
		control_compose(ch, CTRL_SUCCESS, NULL, 0);
		break;
	case CTRL_VSCSI_STATS:
		control_compose(ch, CTRL_VSCSI_STATS, vscsi_stats(),
		    sizeof(struct vscsi_stats));
		break;
	case CTRL_SHOW_SUM:
		control_compose(ch, CTRL_INITIATOR_CONFIG, &initiator->config,
		    sizeof(initiator->config));

		TAILQ_FOREACH(s, &initiator->sessions, entry) {
			struct ctrldata cdv[3];
			bzero(cdv, sizeof(cdv));

			cdv[0].buf = &s->config;
			cdv[0].len = sizeof(s->config);

			if (s->config.TargetName) {
				cdv[1].buf = s->config.TargetName;
				cdv[1].len =
				    strlen(s->config.TargetName) + 1;
			}
			if (s->config.InitiatorName) {
				cdv[2].buf = s->config.InitiatorName;
				cdv[2].len =
				    strlen(s->config.InitiatorName) + 1;
			}

			control_build(ch, CTRL_SESSION_CONFIG,
			    nitems(cdv), cdv);
		}

		control_compose(ch, CTRL_SUCCESS, NULL, 0);
		break;
	default:
		log_warnx("unknown control message type %d", cmh->type);
		control_compose(ch, CTRL_FAILURE, NULL, 0);
		break;
	}

done:
	pdu_free(pdu);
}

#define MERGE_MIN(r, a, b, v)				\
	r->v = (a->v < b->v ? a->v : b->v)
#define MERGE_MAX(r, a, b, v)				\
	r->v = (a->v > b->v ? a->v : b->v)
#define MERGE_OR(r, a, b, v)				\
	r->v = (a->v || b->v)
#define MERGE_AND(r, a, b, v)				\
	r->v = (a->v && b->v)

void
iscsi_merge_sess_params(struct session_params *res,
    struct session_params *mine, struct session_params *his)
{
	MERGE_MIN(res, mine, his, MaxBurstLength);
	MERGE_MIN(res, mine, his, FirstBurstLength);
	MERGE_MAX(res, mine, his, DefaultTime2Wait);
	MERGE_MIN(res, mine, his, DefaultTime2Retain);
	MERGE_MIN(res, mine, his, MaxOutstandingR2T);
	res->TargetPortalGroupTag = his->TargetPortalGroupTag;
	MERGE_MIN(res, mine, his, MaxConnections);
	MERGE_OR(res, mine, his, InitialR2T);
	MERGE_AND(res, mine, his, ImmediateData);
	MERGE_OR(res, mine, his, DataPDUInOrder);
	MERGE_OR(res, mine, his, DataSequenceInOrder);
	MERGE_MIN(res, mine, his, ErrorRecoveryLevel);

}

void
iscsi_merge_conn_params(struct connection_params *res,
    struct connection_params *mine, struct connection_params *his)
{
	res->MaxRecvDataSegmentLength = his->MaxRecvDataSegmentLength;
	/* XXX HeaderDigest and DataDigest */
}

#undef MERGE_MIN
#undef MERGE_MAX
#undef MERGE_OR
#undef MERGE_AND
@


1.19
log
@stop including sys/param.h for nitems. define locally as needed.
ok natano reyk
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.c,v 1.18 2015/01/16 15:57:06 deraadt Exp $ */
d73 2
@


1.18
log
@move to <limits.h> where possible, annotate <sys/param.h> otherwise
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.c,v 1.17 2014/11/03 16:45:00 tedu Exp $ */
a18 1
#include <sys/param.h>	/* nitems */
@


1.17
log
@actually use macro argument instead of shadowed variable name
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.c,v 1.16 2014/07/13 17:07:00 claudio Exp $ */
d19 1
a19 2
#include <sys/types.h>
#include <sys/param.h>
@


1.16
log
@Set KERN_PROC_NOBROADCASTKILL so that iscsid is not killed by init
when terminating multi-user so that we have a chance to sync the
file systems mounted via iscsi.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.c,v 1.15 2014/05/10 11:30:47 claudio Exp $ */
d318 1
a318 1
	res->v = (mine->v < his->v ? mine->v : his->v)
d320 1
a320 1
	res->v = (mine->v > his->v ? mine->v : his->v)
d322 1
a322 1
	res->v = (mine->v || his->v)
d324 1
a324 1
	res->v = (mine->v && his->v)
@


1.15
log
@Extend the connection and session FSMs so that connection failure is
handled more gracefully. Losing the TCP connection no longer results
in an unrecoverable stop requiring a restart of iscsid.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.c,v 1.14 2014/04/21 18:00:23 claudio Exp $ */
d23 1
d73 2
a74 1
	int ch, debug = 0, verbose = 0;
d118 4
@


1.14
log
@Start passing the initiator and target name in the show command.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.c,v 1.13 2014/04/21 09:48:31 claudio Exp $ */
d255 1
a255 1
			session_fsm(s, SESS_EV_START, NULL);
@


1.13
log
@Now that we properly negotiate the session params we can enable sending
of immediate data for write commands. This gives a nice 20% performance
boost on writes compared to the solicited data transaction we did before.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.c,v 1.12 2014/04/20 22:18:04 claudio Exp $ */
d20 1
d277 21
a297 3
		TAILQ_FOREACH(s, &initiator->sessions, entry)
			control_compose(ch, CTRL_SESSION_CONFIG,
			    &s->config, sizeof(s->config));
@


1.12
log
@Introduce some basic stats for the vscsi layer. Just counting the commands
and the bytes we push through vscsi(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.c,v 1.11 2014/04/20 12:22:16 claudio Exp $ */
d271 10
@


1.11
log
@Cleanup a bit, switch on bcopy to memcpy and move a function a bit up
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.c,v 1.10 2014/04/07 19:55:46 claudio Exp $ */
d267 4
@


1.10
log
@To win the startup race on the control socket we need to listen to it as
well only then the connect() call from iscsictl will not fail. Move listen()
into the init function and rename control_listen() to control_event_init()
since it is now only doing that.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.c,v 1.9 2014/02/17 18:59:50 claudio Exp $ */
d146 1
a146 1
	/* CLEANUP XXX */
d153 15
a167 1
/* ARGSUSED */
d221 1
a221 1
		bcopy(ic, &initiator->config, sizeof(initiator->config));
a275 15
}

void
shutdown_cb(int fd, short event, void *arg)
{
	struct timeval tv;

	if (exit_rounds++ >= ISCSI_EXIT_WAIT || initiator_isdown(initiator))
		event_loopexit(NULL);

	timerclear(&tv);
	tv.tv_sec = 1;

	if (evtimer_add(&exit_ev, &tv) == -1)
		fatal("shutdown_cb");
@


1.9
log
@Call control_init() before daemon() so that iscsid && iscsictl reload works
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.c,v 1.8 2011/08/20 19:03:39 sthen Exp $ */
d141 1
a141 3
	if (control_listen() == -1)
		fatalx("control socket listen failed");

@


1.8
log
@Add support for -v (enable verbose logging on the command line).
Previously only available via iscsictl. ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.c,v 1.7 2011/05/04 21:00:04 claudio Exp $ */
d109 3
a117 2
	if (control_init(ctrlsock) == -1)
		fatalx("control socket setup failed");
@


1.7
log
@Massive diff to handle logins more correctly. iscsid will now do
better operational parameter negotiation but more is needed.
Tested by todd@@ and myself.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.c,v 1.6 2011/05/02 06:32:56 claudio Exp $ */
d71 1
a71 1
	int ch, debug = 0;
d74 1
d76 1
a76 1
	while ((ch = getopt(argc, argv, "dn:s:")) != -1) {
d87 3
d107 2
d182 1
a182 1
	fprintf(stderr, "usage: %s [-d] [-n device] [-s socket]\n",
@


1.6
log
@Rework the logout code and use this to do a proper logout when
exiting.  This works well for idle sessions but still has some
issues on busy session. It seems more task scheduler changes are
needed to make this work.  This also includes some mem-leak fixes
in error pathes found by Igor Zinovik.
go for it dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.c,v 1.5 2011/04/27 19:16:15 claudio Exp $ */
d46 18
d273 41
@


1.5
log
@Implement CTRL_LOG_VERBOSE to toggle log verbosity.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.c,v 1.4 2011/04/27 07:25:26 claudio Exp $ */
d39 1
d42 3
d134 2
d141 5
a145 1
		event_loopexit(NULL);
d239 15
@


1.4
log
@Start implementing the FSM. Introduce a session FSM that is run via a
callback and implement some of the connection FSM actions. Implement
logouts so that discovery sessions do a nice login -> query -> logout.
Fix the task scheduling especially for immediate and connection specific
tasks. The session will now only schedule tasks to a session that is
in LOGGED_IN state.
looks good dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.c,v 1.3 2010/09/25 16:20:06 sobrado Exp $ */
d160 1
d179 1
a179 1
			log_warnx("CTRL_INITIATOR_CONFIG bad size");
d209 10
@


1.3
log
@spacing, no binary changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.c,v 1.2 2010/09/25 11:57:22 sobrado Exp $ */
a166 1
log_debug("CTRL_INITIATOR_CONFIG");
a176 1
log_debug("CTRL_SESSION_CONFIG");
a185 1
log_debug("no TargetName but not discovery");
a194 1
log_debug("session %s to %s", sc->SessionName, log_sockaddr(&sc->connection.TargetAddr));
d205 2
a206 6

		if (s->state == SESS_FREE) {
			log_debug("new connection to %s",
			    log_sockaddr(&s->config.connection.TargetAddr));
			conn_new(s, &s->config.connection);
		}
@


1.2
log
@use a consistent argument name in both synopsis and usage; argument
name choosed with help from dlg@@

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsid.c,v 1.1 2010/09/24 09:43:19 claudio Exp $ */
d9 1
a9 1
 * 
@


1.1
log
@iSCSI Initiatior daemon using vscsi(4).
Currently implements the absolute minimum of the protocol to make
it work against targets. Many things still in flux but we're annoyed
to work outside of the tree.  Commited from a source tree on an iSCSI
disk served via iscsid but it is not yet production ready.
OK dlg@@, matthew@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d148 1
a148 1
	fprintf(stderr, "usage: %s [-d] [-n vscsi] [-s socket]\n",
@

