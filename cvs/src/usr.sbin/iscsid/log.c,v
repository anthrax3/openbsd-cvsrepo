head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.2
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.6.0.10
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.12
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3;
locks; strict;
comment	@ * @;


1.9
date	2017.03.21.12.06.55;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	6uuBMurt3Uh42fgX;

1.8
date	2017.01.23.08.40.07;	author benno;	state Exp;
branches;
next	1.7;
commitid	aVoRuUdT99JaB3Ww;

1.7
date	2016.09.02.16.22.31;	author benno;	state Exp;
branches;
next	1.6;
commitid	TGFs3VTBtPNgUl3F;

1.6
date	2014.04.19.18.31.33;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2011.08.20.19.03.39;	author sthen;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.27.18.59.01;	author claudio;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.04.10.36.31;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.25.16.20.06;	author sobrado;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.24.09.43.19;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.9
log
@From a syslog perspective it does not make sense to log fatal and
warn with the same severity.  Switch log_warn() to LOG_ERR and keep
fatal() at LOG_CRIT.
OK reyk@@ florian@@
@
text
@/*	$OpenBSD: log.c,v 1.8 2017/01/23 08:40:07 benno Exp $ */

/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <errno.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <time.h>

#include "log.h"

int		 debug;
int		 verbose;
const char	*log_procname;

void
log_init(int n_debug)
{
	extern char	*__progname;

	debug = n_debug;

	if (!debug)
		openlog(__progname, LOG_PID | LOG_NDELAY, LOG_DAEMON);

	tzset();
}

void
log_verbose(int v)
{
	verbose = v;
}

void
logit(int pri, const char *fmt, ...)
{
	va_list	ap;

	va_start(ap, fmt);
	vlog(pri, fmt, ap);
	va_end(ap);
}

void
vlog(int pri, const char *fmt, va_list ap)
{
	char	*nfmt;

	if (debug) {
		/* best effort in out of mem situations */
		if (asprintf(&nfmt, "%s\n", fmt) == -1) {
			vfprintf(stderr, fmt, ap);
			fprintf(stderr, "\n");
		} else {
			vfprintf(stderr, nfmt, ap);
			free(nfmt);
		}
		fflush(stderr);
	} else
		vsyslog(pri, fmt, ap);
}

void
log_warn(const char *emsg, ...)
{
	char	*nfmt;
	va_list	 ap;

	/* best effort to even work in out of memory situations */
	if (emsg == NULL)
		logit(LOG_ERR, "%s", strerror(errno));
	else {
		va_start(ap, emsg);

		if (asprintf(&nfmt, "%s: %s", emsg, strerror(errno)) == -1) {
			/* we tried it... */
			vlog(LOG_ERR, emsg, ap);
			logit(LOG_ERR, "%s", strerror(errno));
		} else {
			vlog(LOG_ERR, nfmt, ap);
			free(nfmt);
		}
		va_end(ap);
	}
}

void
log_warnx(const char *emsg, ...)
{
	va_list	 ap;

	va_start(ap, emsg);
	vlog(LOG_ERR, emsg, ap);
	va_end(ap);
}

void
log_info(const char *emsg, ...)
{
	va_list	 ap;

	va_start(ap, emsg);
	vlog(LOG_INFO, emsg, ap);
	va_end(ap);
}

void
log_debug(const char *emsg, ...)
{
	va_list	 ap;

	if (verbose) {
		va_start(ap, emsg);
		vlog(LOG_DEBUG, emsg, ap);
		va_end(ap);
	}
}

void
fatal(const char *emsg, ...)
{
	char	 s[1024];
	va_list	 ap;

	va_start(ap, emsg);
	vsnprintf(s, sizeof(s), emsg, ap);
	va_end(ap);

	if (emsg == NULL)
		logit(LOG_CRIT, "fatal in %s: %s", log_procname,
		    strerror(errno));
	else
		if (errno)
			logit(LOG_CRIT, "fatal in %s: %s: %s",
			    log_procname, s, strerror(errno));
		else
			logit(LOG_CRIT, "fatal in %s: %s",
			    log_procname, s);

	exit(1);
}

void
fatalx(const char *emsg)
{
	errno = 0;
	fatal(emsg);
}
@


1.8
log
@copy log.c/h from bgpd.
ok claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.61 2016/09/02 14:00:29 benno Exp $ */
d89 1
a89 1
		logit(LOG_CRIT, "%s", strerror(errno));
d95 2
a96 2
			vlog(LOG_CRIT, emsg, ap);
			logit(LOG_CRIT, "%s", strerror(errno));
d98 1
a98 1
			vlog(LOG_CRIT, nfmt, ap);
d111 1
a111 1
	vlog(LOG_CRIT, emsg, ap);
@


1.7
log
@work on making log.c similar in all daemons:

move daemon-local functions into new logmsg.c, and reduce
the (mostly whitespace) differences so that log.c's can be diffed easily.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.6 2014/04/19 18:31:33 claudio Exp $ */
a3 1
 * Copyright (c) 2009 Claudio Jeker <claudio@@openbsd.org>
d31 1
d138 1
a138 1
fatal(const char *emsg)
d140 7
d148 2
a149 1
		logit(LOG_CRIT, "fatal: %s", strerror(errno));
d152 2
a153 1
			logit(LOG_CRIT, "fatal: %s: %s", emsg, strerror(errno));
d155 2
a156 1
			logit(LOG_CRIT, "fatal: %s", emsg);
@


1.6
log
@COnveret the bcopy() to memcpy()
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.5 2011/08/20 19:03:39 sthen Exp $ */
a18 6
#include <sys/types.h>
#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/uio.h>

#include <scsi/iscsi.h>
a20 2
#include <event.h>
#include <netdb.h>
d26 1
a26 1
#include <unistd.h>
a27 1
#include "iscsid.h"
d30 2
a31 4
int	debug;
int	verbose;

void	 logit(int, const char *, ...);
a155 65
}

void
log_hexdump(void *buf, size_t len)
{
	u_char b[16];
	size_t i, j, l;

	if (!debug)
		return;

	for (i = 0; i < len; i += l) {
		fprintf(stderr, "%4zi:", i);
		l = sizeof(b) < len - i ? sizeof(b) : len - i;
		memcpy(b, (char *)buf + i, l);

		for (j = 0; j < sizeof(b); j++) {
			if (j % 2 == 0)
				fprintf(stderr, " ");
			if (j % 8 == 0)
				fprintf(stderr, " ");
			if (j < l)
				fprintf(stderr, "%02x", (int)b[j]);
			else
				fprintf(stderr, "  ");
		}
		fprintf(stderr, "  |");
		for (j = 0; j < l; j++) {
			if (b[j] >= 0x20 && b[j] <= 0x7e)
				fprintf(stderr, "%c", b[j]);
			else
				fprintf(stderr, ".");
		}
		fprintf(stderr, "|\n");
	}
}

void
log_pdu(struct pdu *p, int all)
{
	struct iscsi_pdu *pdu;
	void *b;
	size_t s;

	if (!debug)
		return;

	if (!(pdu = pdu_getbuf(p, NULL, PDU_HEADER))) {
		log_debug("empty pdu");
		return;
	}

	fprintf(stderr, "PDU: op %x%s flags %02x%02x%02x ahs %d len %d\n",
		ISCSI_PDU_OPCODE(pdu->opcode), ISCSI_PDU_I(pdu) ? " I" : "",
		pdu->flags, pdu->_reserved1[0], pdu->_reserved1[1],
		pdu->ahslen, pdu->datalen[0] << 16 | pdu->datalen[1] << 8 |
		pdu->datalen[2]);
	fprintf(stderr, "     lun %02x%02x%02x%02x%02x%02x%02x%02x itt %u "
	    "cmdsn %u expstatsn %u\n", pdu->lun[0], pdu->lun[1], pdu->lun[2],
	    pdu->lun[3], pdu->lun[4], pdu->lun[5], pdu->lun[6], pdu->lun[7],
	    ntohl(pdu->itt), ntohl(pdu->cmdsn), ntohl(pdu->expstatsn));
	log_hexdump(pdu, sizeof(*pdu));

	if (all && (b = pdu_getbuf(p, &s, PDU_DATA)))
		log_hexdump(b, s);
@


1.5
log
@Add support for -v (enable verbose logging on the command line).
Previously only available via iscsictl. ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.4 2011/04/27 18:59:01 claudio Exp $ */
d181 1
a181 1
		bcopy((char *)buf + i, b, l);
@


1.4
log
@Add log_verbose() like all the other log.c users.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.3 2011/01/04 10:36:31 claudio Exp $ */
a49 1
	verbose = n_debug;
@


1.3
log
@Print itt, cmdsn and expstatsn as unsigned when printing a PDU.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.2 2010/09/25 16:20:06 sobrado Exp $ */
d40 1
d50 1
d59 6
d142 1
a142 1
	if (debug) {
@


1.2
log
@spacing, no binary changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.1 2010/09/24 09:43:19 claudio Exp $ */
d217 2
a218 2
	fprintf(stderr, "     lun %02x%02x%02x%02x%02x%02x%02x%02x itt %d "
	    "cmdsn %d expstatsn %d\n", pdu->lun[0], pdu->lun[1], pdu->lun[2],
@


1.1
log
@iSCSI Initiatior daemon using vscsi(4).
Currently implements the absolute minimum of the protocol to make
it work against targets. Many things still in flux but we're annoyed
to work outside of the tree.  Commited from a source tree on an iSCSI
disk served via iscsid but it is not yet production ready.
OK dlg@@, matthew@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.5 2006/03/09 16:58:40 claudio Exp $ */
d175 1
a175 1
		
@

