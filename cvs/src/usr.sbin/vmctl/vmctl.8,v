head	1.34;
access;
symbols
	OPENBSD_6_1:1.27.0.4
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10;
locks; strict;
comment	@.\" @;


1.34
date	2017.09.05.22.06.49;	author edd;	state Exp;
branches;
next	1.33;
commitid	nopsfx8uMqaApvaV;

1.33
date	2017.09.01.03.37.35;	author mlarkin;	state Exp;
branches;
next	1.32;
commitid	l0aTO2kBt47pUrmC;

1.32
date	2017.08.14.17.52.05;	author jasper;	state Exp;
branches;
next	1.31;
commitid	Dh94qje7idl8ldsw;

1.31
date	2017.07.15.07.33.56;	author jmc;	state Exp;
branches;
next	1.30;
commitid	2S9Pk5qXkGsRqr9J;

1.30
date	2017.07.15.05.05.36;	author pd;	state Exp;
branches;
next	1.29;
commitid	l7Kfh3b63PsFu8PF;

1.29
date	2017.04.19.15.38.32;	author reyk;	state Exp;
branches;
next	1.28;
commitid	Wp87uvjcKIIYK6nL;

1.28
date	2017.04.14.00.53.28;	author mlarkin;	state Exp;
branches;
next	1.27;
commitid	qgjhClV3tvHkzsAY;

1.27
date	2017.03.25.16.28.25;	author reyk;	state Exp;
branches;
next	1.26;
commitid	s82EA2LBuZtftmLN;

1.26
date	2017.01.24.11.29.30;	author jmc;	state Exp;
branches;
next	1.25;
commitid	51OwGy1TmSAStHZ5;

1.25
date	2017.01.24.08.52.17;	author procter;	state Exp;
branches;
next	1.24;
commitid	9ov4QX9GgNH2P8m6;

1.24
date	2017.01.24.06.08.36;	author procter;	state Exp;
branches;
next	1.23;
commitid	ilf2KjhowP3unjUk;

1.23
date	2017.01.13.19.21.16;	author edd;	state Exp;
branches;
next	1.22;
commitid	G03UUOsXsvVsTKN2;

1.22
date	2017.01.13.14.53.33;	author reyk;	state Exp;
branches;
next	1.21;
commitid	4d6APlXJTrIaWlN4;

1.21
date	2017.01.11.22.38.10;	author reyk;	state Exp;
branches;
next	1.20;
commitid	36vA2wHEJBH4Kmuc;

1.20
date	2016.11.26.19.49.11;	author reyk;	state Exp;
branches;
next	1.19;
commitid	ad2wVCUrs7CBTqdu;

1.19
date	2016.11.26.19.23.27;	author jmc;	state Exp;
branches;
next	1.18;
commitid	kZHB8HyqB00f502h;

1.18
date	2016.11.26.18.37.32;	author reyk;	state Exp;
branches;
next	1.17;
commitid	4mwZd0uGv1GQ6kH5;

1.17
date	2016.10.13.19.43.44;	author martijn;	state Exp;
branches;
next	1.16;
commitid	m7xnHgKNFj5C3pq3;

1.16
date	2016.10.12.19.10.03;	author reyk;	state Exp;
branches;
next	1.15;
commitid	ghkPP3DbrIiwazmp;

1.15
date	2016.10.04.17.25.52;	author reyk;	state Exp;
branches;
next	1.14;
commitid	Hzv45kQ2q7TgqSeB;

1.14
date	2016.09.12.06.20.18;	author jmc;	state Exp;
branches;
next	1.13;
commitid	mVFd5mflaaNnl3SU;

1.13
date	2016.08.18.16.12.05;	author jmc;	state Exp;
branches;
next	1.12;
commitid	20NSlSrUWsrpjaCB;

1.12
date	2016.08.18.11.33.48;	author jmc;	state Exp;
branches;
next	1.11;
commitid	xLPuM897f37EHAm5;

1.11
date	2016.08.18.00.06.32;	author mlarkin;	state Exp;
branches;
next	1.10;
commitid	W53xGC3cKTSguAA2;

1.10
date	2016.01.03.23.03.30;	author mlarkin;	state Exp;
branches;
next	1.9;
commitid	mObYVNMIJA0UTfII;

1.9
date	2015.12.11.10.16.53;	author reyk;	state Exp;
branches;
next	1.8;
commitid	czO28zk1ubQjkjYC;

1.8
date	2015.12.08.08.01.20;	author reyk;	state Exp;
branches;
next	1.7;
commitid	c3yBcgquzyIeX3Y7;

1.7
date	2015.12.05.22.34.31;	author sobrado;	state Exp;
branches;
next	1.6;
commitid	R6n9qvidcrQDHnbm;

1.6
date	2015.12.05.04.40.05;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	l2hLGc6dvAwEASIY;

1.5
date	2015.12.04.19.17.55;	author jmc;	state Exp;
branches;
next	1.4;
commitid	ph7HAcnUwzViQjD3;

1.4
date	2015.12.04.15.40.17;	author reyk;	state Exp;
branches;
next	1.3;
commitid	foauN6yiJ6HjqIH0;

1.3
date	2015.12.04.07.02.21;	author sobrado;	state Exp;
branches;
next	1.2;
commitid	Gc72lPygRI8LxHfM;

1.2
date	2015.12.03.23.32.32;	author reyk;	state Exp;
branches;
next	1.1;
commitid	ABlEnH3RsSBpSsyK;

1.1
date	2015.12.03.21.45.45;	author reyk;	state Exp;
branches;
next	;
commitid	MPLOtGQkSv2xIotz;


desc
@@


1.34
log
@Detail how VM guests acquire a nameserver for local interfaces.

OK mlarkin@@, krw@@. Thanks!
@
text
@.\"	$OpenBSD: vmctl.8,v 1.33 2017/09/01 03:37:35 mlarkin Exp $
.\"
.\" Copyright (c) 2015 Mike Larkin <mlarkin@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: September 1 2017 $
.Dt VMCTL 8
.Os
.Sh NAME
.Nm vmctl
.Nd control the virtual machine daemon
.Sh SYNOPSIS
.Nm
.Ar command
.Op Ar arg ...
.Sh DESCRIPTION
The
.Nm
utility is used to control the virtual machine monitor (VMM) subsystem.
A VMM manages virtual machines (VMs) on a host.
The VMM subsystem is responsible for creating, destroying, and executing
VMs.
.Pp
Within the commands,
the
.Ar size
argument can be specified with a human-readable scale,
using the format described in
.Xr scan_scaled 3 .
The
.Ar id
argument can be either a numeric, non-zero identifier or alternatively
the name of a virtual machine.
.Pp
The commands are as follows:
.Bl -tag -width Ds
.It Cm console Ar id
Using
.Xr cu 1
connect to the console of the VM with the specified
.Ar id .
.It Cm create Ar path Fl s Ar size
Creates a VM disk image file with the specified
.Ar path
and
.Ar size ,
rounded to megabytes.
.It Cm load Ar filename
Load additional configuration from the specified file.
.It Cm log brief
Disable verbose debug logging.
.It Cm log verbose
Enable verbose debug logging.
.It Cm pause Ar id
Pause a VM with the specified
.Ar id .
.It Cm receive Ar name
Receive a VM from standard input and start it with the specified
.Ar name .
.It Cm reload
Remove all stopped VMs and reload the configuration from the default
configuration file.
.It Cm reset Op Cm all
Reset the running state.
.It Cm reset switches
Reset the configured switches.
.It Cm reset vms
Reset and terminate all VMs.
.It Cm send Ar id
Send a VM with the specified
.Ar id
to standard output and terminate it.
.It Xo Cm start Ar name
.Op Fl Lc
.Op Fl b Ar path
.Op Fl d Ar path
.Op Fl i Ar count
.Op Fl m Ar size
.Op Fl n Ar switch
.Xc
Starts a VM defined by the specified name and parameters:
.Bl -tag -width "-i count"
.It Fl b Ar path
Boot the VM with the specified kernel or BIOS image.
If not specified, the default is to boot using the BIOS image in
.Pa /etc/firmware/vmm-bios .
.It Fl c
Automatically connect to the VM console.
.It Fl d Ar path
Disk image file (may be specified multiple times to add multiple disk images).
.It Fl i Ar count
Number of network interfaces to add to the VM.
.It Fl L
Add a local network interface.
.Xr vmd 8
will auto-generate an IPv4 subnet for the interface,
configure a gateway address on the VM host side,
and run a simple DHCP (BOOTP) server for the VM.
See
.Sx LOCAL INTERFACES
below for more information on how addresses are calculated and assigned when
using the
.Fl L
option.
.It Fl m Ar size
Memory
.Ar size
of the VM, rounded to megabytes.
The default is 512M.
.It Fl n Ar switch
Add a network interface that is attached to the specified virtual
.Ar switch .
See
.Sx SWITCH CONFIGURATION
in
.Xr vm.conf 5
for more information.
.El
.Pp
Note that the VM name supplied to the 'start' command can only consist of
alphanumeric characters, including '.', '-', and '_'. The name cannot start
with '.', '-' or '_'.
.It Cm status Op Ar id
Lists VMs running on the host, optionally listing just the selected VM
.Ar id .
.It Cm stop Ar id
Stops (terminates) a VM defined by the specified VM
.Ar id .
A graceful shutdown will be attempted if the VM supports the
.Xr vmmci 4
device.
Once stopped, if the VM was not defined in a configuration file, then it is
removed.
.It Cm unpause Ar id
Unpause (resume from a paused state) a VM with the specified
.Ar id .
.El
.Pp
If the
.Fl i
option is specified during VM startup, a corresponding number
of host-side
.Xr tap 4
interfaces will be allocated and mapped to the
.Xr vio 4
interfaces inside the guest VM.
This tap/vio interface mapping
allows guest network traffic to be manipulated by the host.
Any valid host-side interface configuration may be performed on these
tap interfaces, such as bridging (via
.Xr bridge 4 ) ,
or using
.Xr pf 4
nat-to rules to create private or host-side NATed networks, as desired.
.Sh LOCAL INTERFACES
Local interfaces can be used to easily configure VM networking without
needing to manually assign network addresses.
A local interface is added
to a VM using the -L option to the 'vmctl start' command and results in the
addition of a
.Xr vio 4
interface inside the VM and a corresponding
.Xr tap 4
interface on the host.
When using local interfaces,
.Xr vmd 8
will provide DHCP services to the guest VM and offer addresses selected
from the 100.64.0.0/10 IPv4 range.
From within the 100.64.0.0/10
range,
.Xr vmd 8
allocates a pair of addresses for the guest-side
.Xr vio 4
and host-side
.Xr tap 4
interfaces as follows:
.Pp
For the first local interface:
.Bl -bullet -compact
.It
The host (tapX) address is assigned 100.64.n.2,
where 'n' is the numeric VM ID visible in the 'vmctl status' command
.It
The guest (vio0) address is assigned 100.64.n.3
.El
.Pp
For the second and subsequent local interface(s):
.Bl -bullet -compact
.It
The second local interface uses 100.64.n.4 and 100.64.n.5 for the
host (tapX) and guest (vio1) interfaces, respectively.
.It
Subsequent local interfaces are numbered similarly, continuing with 100.64.n.6
and 100.64.n.7, etc
.El
.Pp
Multiple -L options can be provided to the 'vmctl start' command, if more than
one interface is desired.
Local interfaces are assigned to the VM before
any other interfaces specified with the -i option (thus, local interfaces,
if requested, are numbered starting at vio0 inside the guest VM).
.Pp
When using local interfaces, the DHCP configuration offered to the guest VM
specifies the address of the corresponding host
.Xr tap 4
interface as both the default route and the (sole) nameserver.
Guest VM traffic can optionally be NATed through the host
with an entry in the host machine's
.Pa /etc/pf.conf
similar to the following (if desired):
.Bd -literal -offset indent
pass out on $ext_if from 100.64.0.0/10 to any nat-to $ext_if
.Ed
.Pp
If NATing is desired, the net.inet.ip.forwarding sysctl must also be set to 1.
.Pp
If desired, DNS queries originating from Guest VMs can be redirected to a
different DNS server with an entry in the host machine's
.Pa /etc/pf.conf
similar to the following:
.Bd -literal -offset indent
pass in proto udp from 100.64.0.0/10 to any port domain \e
      rdr-to $dns_server port domain
.Ed
.Sh FILES
.Bl -tag -width "/etc/var/run/vmd.sockXX" -compact
.It Pa /etc/vm.conf
Default configuration file.
.It Pa /var/run/vmd.sock
.Ux Ns -domain
socket used for communication with
.Xr vmd 8 .
.El
.Sh EXIT STATUS
.Ex -std vmctl
.Nm
may fail due to one of the following reasons:
.Pp
.Bl -bullet -compact
.It
The VMM subsystem could not be enabled or disabled as requested.
.It
A requested VM-based operation could not be completed.
.El
.Sh EXAMPLES
Create a 4.5 Gigabyte disk image, disk.img:
.Bd -literal -offset indent
$ vmctl create disk.img -s 4.5G
.Ed
.Pp
Create a new VM with 1GB memory, one network interface, one disk image
('disk.img') and boot from kernel '/bsd':
.Bd -literal -offset indent
# vmctl start "myvm" -m 1G -i 1 -b /bsd -d disk.img
.Ed
.Pp
.Xr vmd 8
will create a new
.Xr tap 4
network interface on the host side and set the description to indicate
the VM by ID, interface number, and name:
.Bd -literal -offset indent
# ifconfig tap0
tap0: flags=8842<BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500
	lladdr fe:e1:ba:d8:50:d1
	description: vm1-if0-myvm
	index 15 priority 0 llprio 3
	groups: tap
	status: active
.Ed
.Pp
Terminate VM number 1:
.Bd -literal -offset indent
# vmctl stop 1
.Ed
.Sh SEE ALSO
.Xr bridge 4 ,
.Xr pf 4 ,
.Xr tap 4 ,
.Xr vio 4 ,
.Xr vmm 4 ,
.Xr vm.conf 5 ,
.Xr rc.conf 8 ,
.Xr sysctl 8 ,
.Xr vmd 8
.Sh HISTORY
The
.Nm
command first appeared in
.Ox 5.9 .
.Sh AUTHORS
.An -nosplit
.An Mike Larkin Aq Mt mlarkin@@openbsd.org
and
.An Reyk Floeter Aq Mt reyk@@openbsd.org .
@


1.33
log
@vmctl: -L option clarification in man page
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.32 2017/08/14 17:52:05 jasper Exp $
d17 1
a17 1
.Dd $Mdocdate: August 14 2017 $
d215 1
a215 1
specifies a default route to the corresponding host
d217 1
a217 1
interface.
d227 9
@


1.32
log
@don't allow starting vms whose name starts with '-', '.' or '_'
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.31 2017/07/15 07:33:56 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: July 15 2017 $
d110 6
d130 4
a133 3
The VM can only consist of alphanumeric characters, including
a '.', '-' or '_'.
However it cannot start with '.', '-' or '_'.
d166 61
d286 1
@


1.31
log
@consistent case;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.30 2017/07/15 05:05:36 pd Exp $
d124 3
@


1.30
log
@Add vmctl send and vmctl receive

ok reyk@@ and mlarkin@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.29 2017/04/19 15:38:32 reyk Exp $
d17 1
a17 1
.Dd $Mdocdate: April 19 2017 $
d136 1
a136 1
Unpause (resume from a paused state) a vm with the specified
@


1.29
log
@Add support for dynamic "NAT" interfaces (-L/local interface).

When a local interface is configured, vmd configures a /31 address on
the tap(4) interface of the host and provides another IP in the same
subnet via DHCP (BOOTP) to the VM.  vmd runs an internal BOOTP server
that replies with IP, gateway, and DNS addresses to the VM.  The
built-in server only ever responds to the VM on the inside and cannot
leak its DHCP responses to the outside.

Thanks to Uwe Werler, Josh Grosse, and some others for testing!

OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.28 2017/04/14 00:53:28 mlarkin Exp $
d17 1
a17 1
.Dd $Mdocdate: April 14 2017 $
d65 6
d80 4
d135 3
@


1.28
log
@Update a man page example to reflect recent changes.

Spotted by Ilya Kaliman, thanks.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.27 2017/03/25 16:28:25 reyk Exp $
d17 1
a17 1
.Dd $Mdocdate: March 25 2017 $
d75 1
a76 1
.Op Fl c
d94 6
@


1.27
log
@Boot using BIOS from /etc/firmware/vmm-bios by default.

Instead of using the internal "vmboot", VMs will now be booted using
the external BIOS firmware in /etc/firmware/vmm-bios (which is subject
to a LGPLv3 license).  Direct booting of OpenBSD kernels or
non-default BIOS images is still supported for now using the -b/boot
option that is replacing the -k/kernel option.

As requested by Theo, vmd(8) fails if neither the default BIOS is
found nor a kernel has been specified in the VM configuration.  The
"vmm" BIOS has to be installed using fw_update(1), which will be done
automatically in most cases where the OpenBSD can fetch it after
install/upgrade.

OK mlarkin@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.26 2017/01/24 11:29:30 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: January 24 2017 $
d166 1
a166 1
# vmctl start "myvm" -m 1G -i 1 -d disk.img
@


1.26
log
@sort previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.25 2017/01/24 08:52:17 procter Exp $
d75 1
a78 1
.Op Fl k Ar path
d84 4
a93 2
.It Fl k Ar path
Boot the VM with a kernel loaded from the host, not the first disk image.
d166 1
a166 1
# vmctl start "myvm" -m 1G -i 1 -d disk.img -k /bsd
@


1.25
log
@mark start -m as optional; reorder start synopsis to match vmctl usage
ok mlarkin@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.24 2017/01/24 06:08:36 procter Exp $
d76 2
a80 2
.Op Fl i Ar count
.Op Fl d Ar path
d86 4
a104 4
.It Fl i Ar count
Number of network interfaces to add to the VM.
.It Fl d Ar path
Disk image file (may be specified multiple times to add multiple disk images).
@


1.24
log
@vmctl start -k is optional; also emphasise it specifies a path on the host
ok mlarkin@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.23 2017/01/13 19:21:16 edd Exp $
d17 1
a17 1
.Dd $Mdocdate: January 13 2017 $
d77 3
a79 1
.Fl m Ar size
a80 2
.Op Fl i Ar count
.Op Fl n Ar switch
a85 4
.It Fl d Ar path
Disk image file (may be specified multiple times to add multiple disk images).
.It Fl i Ar count
Number of network interfaces to add to the VM.
d101 4
@


1.23
log
@Make it possible to remove VMs from vmd(8)'s internal queue.

The semantics agreed with reyk@@ are:

 * ad-hoc created vms, created  with `vmctl start`, are removed once stopped.
 * Stopped VMs defined in a config file are flushed before a `vmctl reload`.

OK reyk@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.22 2017/01/13 14:53:33 reyk Exp $
d76 1
a76 1
.Fl k Ar path
d91 1
a91 1
Kernel to load when booting the VM.
@


1.22
log
@Mention attempted graceful shutdown and vmmci(4)
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.21 2017/01/11 22:38:10 reyk Exp $
d17 1
a17 1
.Dd $Mdocdate: January 11 2017 $
d60 1
a60 1
Load the configuration from the specified file.
d66 2
a67 1
Reload the configuration from the default configuration file.
d115 2
@


1.21
log
@Add imsg communication channel between vmd and invividual VMs.
For now, this is only used to forward "log verbose|brief" requests,
but it will be used for better things later.

OK mlarkin@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.20 2016/11/26 19:49:11 reyk Exp $
d17 1
a17 1
.Dd $Mdocdate: November 26 2016 $
d111 3
@


1.20
log
@If -m/memory is not specified, use 512M by default.

Default value picked with mlarkin - not too small and not too large.

OK mlarkin@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.19 2016/11/26 19:23:27 jmc Exp $
d61 4
@


1.19
log
@-add -n to the main summary;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.18 2016/11/26 18:37:32 reyk Exp $
d91 1
d151 1
a151 1
Create a new VM with 512MB memory, one network interface, one disk image
d154 1
a154 1
# vmctl start "myvm" -m 512M -i 1 -d disk.img -k /bsd
@


1.18
log
@Add the vmctl start -n option to specify add a network interface to
the specified virtual switch from the command line.

OK mlarkin@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.17 2016/10/13 19:43:44 martijn Exp $
d17 1
a17 1
.Dd $Mdocdate: October 13 2016 $
d75 1
@


1.17
log
@The name argument is of the start command is not optional.

OK mlarkin@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.16 2016/10/12 19:10:03 reyk Exp $
d17 1
a17 1
.Dd $Mdocdate: October 12 2016 $
d90 8
@


1.16
log
@Fix functionality and semantics of vmctl load/reload/reset.

OK rzalamena@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.15 2016/10/04 17:25:52 reyk Exp $
d17 1
a17 1
.Dd $Mdocdate: October 4 2016 $
d69 1
a69 1
.It Xo Cm start Op Ar name
@


1.15
log
@Add an example to find the generated tap(4) interface description.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.14 2016/09/12 06:20:18 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: September 12 2016 $
d59 1
a59 1
.It Cm load Op Ar filename
d61 1
a61 1
.It Cm reload Op Ar filename
d63 6
@


1.14
log
@less markup; from rob pierce
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.13 2016/08/18 16:12:05 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: August 18 2016 $
d131 3
a133 1
.Dl $ vmctl create disk.img -s 4.5G
d138 16
a153 1
$ vmctl start "myvm" -m 512M -i 1 -d disk.img -k /bsd
d157 3
a159 1
.Dl $ vmctl stop 1
@


1.13
log
@use a more standard page layout; ok mlarkin
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.12 2016/08/18 11:33:48 jmc Exp $
d31 1
a31 2
A VMM manages virtual machines (VMs) on a
.Ar host .
@


1.12
log
@various fixes for previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.11 2016/08/18 00:06:32 mlarkin Exp $
d46 2
a47 2
.Sh VM COMMANDS
The options are as follows:
d93 17
a129 17
.Sh VM NETWORKING
If the
.Fl i
option is specified during VM startup, a corresponding number
of host-side
.Xr tap 4
interfaces will be allocated and mapped to the
.Xr vio 4
interfaces inside the guest VM.
This tap/vio interface mapping
allows guest network traffic to be manipulated by the host.
Any valid host-side interface configuration may be performed on these
tap interfaces, such as bridging (via
.Xr bridge 4 ) ,
or using
.Xr pf 4
nat-to rules to create private or host-side NATed networks, as desired.
@


1.11
log
@
add section on VM networking. more to come, this is a starting point for
further documentation.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.10 2016/01/03 23:03:30 mlarkin Exp $
d17 1
a17 1
.Dd $Mdocdate: January 3 2016 $
d114 3
a116 1
If the -i option is specified during VM start, a corresponding number
d121 7
a127 10
interfaces inside the guest VM. This
.Xr tap 4 /
.Xr vio 4
interface mapping allows guest network traffic to be manipulated by
the host. Any valid host-side interface configuration may be performed
on these
.Xr tap 4
interfaces, such as bridging (via
.Xr bridge 4
), or using
d143 4
d150 1
a150 5
.Xr vmd 8 ,
.Xr vio 4 ,
.Xr tap 4 ,
.Xr bridge 4 ,
.Xr pf 4
@


1.10
log
@
Clarify vmctl console operation.

From Michal Mazurek, thanks!
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.9 2015/12/11 10:16:53 reyk Exp $
d17 1
a17 1
.Dd $Mdocdate: December 11 2015 $
d113 18
d147 5
a151 1
.Xr vmd 8
@


1.9
log
@The vmctl "id" argument can now be a number of or a vm name, eg.
vmctl stop 3
vmctl stop "openbsd.vm"
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.8 2015/12/08 08:01:20 reyk Exp $
d17 1
a17 1
.Dd $Mdocdate: December 8 2015 $
d50 3
a52 1
Connect to the console of the VM with the specified
@


1.8
log
@Add "vmctl console" to connect to a specified VM console by id.

Requested by mlarkin@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.7 2015/12/05 22:34:31 sobrado Exp $
d17 1
a17 1
.Dd $Mdocdate: December 5 2015 $
d42 4
@


1.7
log
@use argument names consistently.

ok reyk@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.6 2015/12/05 04:40:05 deraadt Exp $
d45 3
@


1.6
log
@vmctl has no need to change the socket that talks to vmd.
discussed with reyk
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.5 2015/12/04 19:17:55 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: December 4 2015 $
d38 1
a38 1
.Ar bytes
d45 5
a49 2
.It Cm create Ar path Fl s Ar bytes
Creates a VM disk image file with the specified pathname and size,
d58 1
a58 1
.Fl m Ar bytes
d63 1
a63 1
.Bl -tag -width "memory size"
d72 4
a75 2
.It Fl m Ar bytes
Memory size of the VM, in bytes, rounded to megabytes.
@


1.5
log
@macro args in previous were the wrong way round;
zap some trailing whitespace while here;
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.4 2015/12/04 15:40:17 reyk Exp $
a24 1
.Op Fl s Ar socket
@


1.4
log
@Add -c option to "vmctl start" to automatically connect to the VM
console after startup.  This calls 'cu -l $TTY -s 9600' internally -
a "safe mode" for cu is proposed by tedu@@.

Requested by mlarkin@@
OK tedu@@ on the execl/cu chunk
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.3 2015/12/04 07:02:21 sobrado Exp $
d51 1
a51 1
.It Cm reload Op Ar filename 
d54 1
a54 1
.Fl Op c
@


1.3
log
@sort flags.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.2 2015/12/03 23:32:32 reyk Exp $
d17 1
a17 1
.Dd $Mdocdate: December 3 2015 $
d54 1
d62 2
@


1.2
log
@Re-add the "load" and "reload" commands to vmctl: Instead of parsing
the configuration in vmctl directly, it now sends a (re)load request
to vmd.  The reload also resets the existing configuration status -
this doesn't do much difference yet but a future change will compare
if a specified VM is already running.  "load" will allow to add
configuration, while "reload" resets the state before loading.
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmctl.8,v 1.1 2015/12/03 21:45:45 reyk Exp $
d63 2
a68 2
.It Fl i Ar count
Number of network interfaces to add to the VM.
@


1.1
log
@Replace vmmctl with vmctl.  Also remove parse.y from the "new" vmctl.

As discussed with mlarkin@@ and deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: vmmctl.8,v 1.7 2015/11/27 09:11:39 reyk Exp $
d17 1
a17 1
.Dd $Mdocdate: November 27 2015 $
d49 5
a53 1
.It Xo Cm start Ar name
@

