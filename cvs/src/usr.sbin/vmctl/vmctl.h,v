head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.2
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7;
locks; strict;
comment	@ * @;


1.13
date	2017.03.01.21.22.57;	author reyk;	state Exp;
branches;
next	1.12;
commitid	X6VByFJujQU3GivX;

1.12
date	2017.03.01.21.15.26;	author mlarkin;	state Exp;
branches;
next	1.11;
commitid	OX3MysWIwhlli2T6;

1.11
date	2017.01.11.22.38.10;	author reyk;	state Exp;
branches;
next	1.10;
commitid	36vA2wHEJBH4Kmuc;

1.10
date	2016.11.26.18.37.32;	author reyk;	state Exp;
branches;
next	1.9;
commitid	4mwZd0uGv1GQ6kH5;

1.9
date	2016.10.12.19.10.03;	author reyk;	state Exp;
branches;
next	1.8;
commitid	ghkPP3DbrIiwazmp;

1.8
date	2016.09.03.20.49.05;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	WDfwFbkmcUbLy69j;

1.7
date	2015.12.11.10.16.53;	author reyk;	state Exp;
branches;
next	1.6;
commitid	czO28zk1ubQjkjYC;

1.6
date	2015.12.11.09.24.10;	author reyk;	state Exp;
branches;
next	1.5;
commitid	BIUjAKLrcioUOQVp;

1.5
date	2015.12.08.08.01.20;	author reyk;	state Exp;
branches;
next	1.4;
commitid	c3yBcgquzyIeX3Y7;

1.4
date	2015.12.06.02.26.14;	author reyk;	state Exp;
branches;
next	1.3;
commitid	DA7pwA53qcaD5xYQ;

1.3
date	2015.12.04.15.40.17;	author reyk;	state Exp;
branches;
next	1.2;
commitid	foauN6yiJ6HjqIH0;

1.2
date	2015.12.03.23.32.32;	author reyk;	state Exp;
branches;
next	1.1;
commitid	ABlEnH3RsSBpSsyK;

1.1
date	2015.12.03.21.45.45;	author reyk;	state Exp;
branches;
next	;
commitid	MPLOtGQkSv2xIotz;


desc
@@


1.13
log
@Rename start_vm_complete to vm_start_complete for consistency.
@
text
@/*	$OpenBSD: vmctl.h,v 1.12 2017/03/01 21:15:26 mlarkin Exp $	*/

/*
 * Copyright (c) 2015 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef VMCTL_PARSER_H
#define VMCTL_PARSER_H

#define VMCTL_CU	"/usr/bin/cu"

enum actions {
	NONE,
	CMD_CONSOLE,
	CMD_CREATE,
	CMD_LOAD,
	CMD_LOG,
	CMD_RELOAD,
	CMD_RESET,
	CMD_START,
	CMD_STATUS,
	CMD_STOP,
};

struct ctl_command;

struct parse_result {
	enum actions		 action;
	uint32_t		 id;
	char			*name;
	char			*path;
	long long		 size;
	int			 nifs;
	char			**nets;
	int			 nnets;
	size_t			 ndisks;
	char			**disks;
	int			 disable;
	int			 verbose;
	unsigned int		 mode;
	struct ctl_command	*ctl;
};

struct ctl_command {
	const char		*name;
	enum actions		 action;
	int			(*main)(struct parse_result *, int, char *[]);
	const char		*usage;
	int			 has_pledge;
};

struct imsgbuf	*ibuf;

/* main.c */
int	 vmmaction(struct parse_result *);
int	 parse_ifs(struct parse_result *, char *, int);
int	 parse_network(struct parse_result *, char *);
int	 parse_size(struct parse_result *, char *, long long);
int	 parse_disk(struct parse_result *, char *);
int	 parse_vmid(struct parse_result *, char *);
void	 parse_free(struct parse_result *);
int	 parse(int, char *[]);
__dead void
	 ctl_openconsole(const char *);

/* vmctl.c */
int	 create_imagefile(const char *, long);
int	 vm_start(const char *, int, int, char **, int, char **, char *);
int	 vm_start_complete(struct imsg *, int *, int);
void	 terminate_vm(uint32_t, const char *);
int	 terminate_vm_complete(struct imsg *, int *);
int	 check_info_id(const char *, uint32_t);
void	 get_info_vm(uint32_t, const char *, int);
int	 add_info(struct imsg *, int *);
void	 print_vm_info(struct vmop_info_result *, size_t);
__dead void
	 vm_console(struct vmop_info_result *, size_t);

#endif /* VMCTL_PARSER_H */
@


1.12
log
@unbreak vmctl build by renaming a function that now conflicts with
something from vmd.h . Temporary fix until the original committer can
fix it the way he desires.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmctl.h,v 1.11 2017/01/11 22:38:10 reyk Exp $	*/
d81 1
a81 1
int	 start_vm_complete(struct imsg *, int *, int);
@


1.11
log
@Add imsg communication channel between vmd and invividual VMs.
For now, this is only used to forward "log verbose|brief" requests,
but it will be used for better things later.

OK mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmctl.h,v 1.10 2016/11/26 18:37:32 reyk Exp $	*/
d80 1
a80 1
int	 start_vm(const char *, int, int, char **, int, char **, char *);
@


1.10
log
@Add the vmctl start -n option to specify add a network interface to
the specified virtual switch from the command line.

OK mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmctl.h,v 1.9 2016/10/12 19:10:03 reyk Exp $	*/
d29 1
d51 1
@


1.9
log
@Fix functionality and semantics of vmctl load/reload/reset.

OK rzalamena@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmctl.h,v 1.8 2016/09/03 20:49:05 deraadt Exp $	*/
d45 2
d67 1
d78 1
a78 1
int	 start_vm(const char *, int, int, int, char **, char *);
@


1.8
log
@Some .h files are not needed
@
text
@d1 1
a1 1
/*	$OpenBSD: vmctl.h,v 1.7 2015/12/11 10:16:53 reyk Exp $	*/
d30 1
d48 1
@


1.7
log
@The vmctl "id" argument can now be a number of or a vm name, eg.
vmctl stop 3
vmctl stop "openbsd.vm"
@
text
@d1 1
a1 1
/*	$OpenBSD: vmctl.h,v 1.6 2015/12/11 09:24:10 reyk Exp $	*/
a17 3

#include <sys/queue.h>
#include <imsg.h>
@


1.6
log
@Remove unused argument in parse_vmid()
@
text
@d1 1
a1 1
/*	$OpenBSD: vmctl.h,v 1.5 2015/12/08 08:01:20 reyk Exp $	*/
d78 1
a78 1
void	 terminate_vm(uint32_t);
d80 2
a81 1
void	 get_info_vm(uint32_t, int);
@


1.5
log
@Add "vmctl console" to connect to a specified VM console by id.

Requested by mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmctl.h,v 1.4 2015/12/06 02:26:14 reyk Exp $	*/
d68 1
a68 1
int	 parse_vmid(struct parse_result *, char *, uint32_t);
@


1.4
log
@Print the TTY in the vmctl status output.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmctl.h,v 1.3 2015/12/04 15:40:17 reyk Exp $	*/
d29 1
d71 2
d80 1
a80 1
void	 get_info_vm(uint32_t);
d83 2
@


1.3
log
@Add -c option to "vmctl start" to automatically connect to the VM
console after startup.  This calls 'cu -l $TTY -s 9600' internally -
a "safe mode" for cu is proposed by tedu@@.

Requested by mlarkin@@
OK tedu@@ on the execl/cu chunk
@
text
@d1 1
a1 1
/*	$OpenBSD: vmctl.h,v 1.2 2015/12/03 23:32:32 reyk Exp $	*/
d79 1
a79 1
void	 print_vm_info(struct vm_info_result *, size_t);
@


1.2
log
@Re-add the "load" and "reload" commands to vmctl: Instead of parsing
the configuration in vmctl directly, it now sends a (re)load request
to vmd.  The reload also resets the existing configuration status -
this doesn't do much difference yet but a future change will compare
if a specified VM is already running.  "load" will allow to add
configuration, while "reload" resets the state before loading.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmctl.h,v 1.1 2015/12/03 21:45:45 reyk Exp $	*/
d25 2
d74 1
a74 1
int	 start_vm_complete(struct imsg *, int *);
@


1.1
log
@Replace vmmctl with vmctl.  Also remove parse.y from the "new" vmctl.

As discussed with mlarkin@@ and deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.h,v 1.4 2015/12/01 20:52:44 halex Exp $	*/
d29 1
@

