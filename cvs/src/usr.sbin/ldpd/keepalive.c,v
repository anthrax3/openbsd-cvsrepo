head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.2
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.12.0.4
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.7.0.10
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.8
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.6
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.17
date	2016.07.01.23.36.38;	author renato;	state Exp;
branches;
next	1.16;
commitid	h9Qy21EPYXbAFnoh;

1.16
date	2016.05.23.19.11.42;	author renato;	state Exp;
branches;
next	1.15;
commitid	AQBoOveMRKjtVfFv;

1.15
date	2016.05.23.17.43.42;	author renato;	state Exp;
branches;
next	1.14;
commitid	VpAym8dVR6eY4drQ;

1.14
date	2016.05.23.16.04.04;	author renato;	state Exp;
branches;
next	1.13;
commitid	sfghEB6dR4Eaf77g;

1.13
date	2016.05.23.15.14.07;	author renato;	state Exp;
branches;
next	1.12;
commitid	l3e6PhvoAh8C7elc;

1.12
date	2014.10.25.03.23.49;	author lteo;	state Exp;
branches;
next	1.11;
commitid	2uw1UTO4k6erpWzK;

1.11
date	2013.10.15.20.27.40;	author renato;	state Exp;
branches;
next	1.10;

1.10
date	2013.06.04.02.34.48;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2013.06.01.18.47.07;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2013.06.01.18.35.02;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2010.11.04.09.52.16;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2010.05.26.13.56.07;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2010.02.25.17.40.46;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2010.02.20.21.28.39;	author michele;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.18.09.26.29;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.05.22.34.45;	author michele;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.20.59.45;	author michele;	state Exp;
branches;
next	;


desc
@@


1.17
log
@More renaming and whitespace cleanup.

No binary change after "strip -s".
@
text
@/*	$OpenBSD: keepalive.c,v 1.16 2016/05/23 19:11:42 renato Exp $ */

/*
 * Copyright (c) 2009 Michele Marchetto <michele@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <string.h>

#include "ldpd.h"
#include "ldpe.h"
#include "log.h"

void
send_keepalive(struct nbr *nbr)
{
	struct ibuf	*buf;
	uint16_t	 size;

	size = LDP_HDR_SIZE + LDP_MSG_SIZE;
	if ((buf = ibuf_open(size)) == NULL)
		fatal(__func__);

	gen_ldp_hdr(buf, size);
	size -= LDP_HDR_SIZE;
	gen_msg_hdr(buf, MSG_TYPE_KEEPALIVE, size);

	evbuf_enqueue(&nbr->tcp->wbuf, buf);
}

int
recv_keepalive(struct nbr *nbr, char *buf, uint16_t len)
{
	struct ldp_msg msg;

	memcpy(&msg, buf, sizeof(msg));
	if (len != LDP_MSG_SIZE) {
		session_shutdown(nbr, S_BAD_MSG_LEN, msg.id, msg.type);
		return (-1);
	}

	if (nbr->state != NBR_STA_OPER)
		nbr_fsm(nbr, NBR_EVT_KEEPALIVE_RCVD);

	return (0);
}
@


1.16
log
@Remove superfluous includes.
@
text
@d1 1
a1 1
/*	$OpenBSD: keepalive.c,v 1.15 2016/05/23 17:43:42 renato Exp $ */
d46 1
a46 1
	struct ldp_msg ka;
d48 1
a48 1
	memcpy(&ka, buf, sizeof(ka));
d50 1
a50 1
		session_shutdown(nbr, S_BAD_MSG_LEN, ka.msgid, ka.type);
@


1.15
log
@Fix mess caused by my commit script.

I screwed up everything... trying to fix now.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a19 12
#include <sys/socket.h>
#include <sys/uio.h>

#include <netinet/in.h>
#include <netinet/ip.h>
#include <arpa/inet.h>
#include <net/if_dl.h>
#include <unistd.h>

#include <errno.h>
#include <event.h>
#include <stdlib.h>
d23 1
a23 1
#include "ldp.h"
a24 1
#include "ldpe.h"
@


1.14
log
@Improve the parser of TCP/session packets.

Add more safeguards against malformed packets and fix existing ones. Also,
rename a few variables and constants to match their real meaning. For
example, rename gen_msg_tlv() to gen_msg_hdr() because this function
generates an LDP header, not a TLV.

Finally, clean-up all the send_* functions so they all follow the same
pattern.
@
text
@d1 1
a1 1
/*	$OpenBSD: keepalive.c,v 1.13 2016/05/23 15:14:07 renato Exp $ */
d43 1
a43 1
	u_int16_t	 size;
d57 1
a57 1
recv_keepalive(struct nbr *nbr, char *buf, u_int16_t len)
d61 2
a62 3
	bcopy(buf, &ka, sizeof(ka));

	if (len != LDP_MSG_LEN) {
@


1.13
log
@Replace manually written function names with __func__.
@
text
@d1 1
a1 1
/*	$OpenBSD: keepalive.c,v 1.12 2014/10/25 03:23:49 lteo Exp $ */
d45 2
a46 1
	if ((buf = ibuf_open(LDP_MAX_LEN)) == NULL)
a48 2
	size = LDP_HDR_SIZE + sizeof(struct ldp_msg);

a49 1

d51 1
a51 2

	gen_msg_tlv(buf, MSG_TYPE_KEEPALIVE, size);
d71 1
a71 1
	return (ntohs(ka.length));
@


1.12
log
@Remove unnecessary netinet/in_systm.h include.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: keepalive.c,v 1.11 2013/10/15 20:27:40 renato Exp $ */
d46 1
a46 1
		fatal("send_keepalive");
@


1.11
log
@Generate the NBR_EVT_PDU_RCVD event in a single point.
OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: keepalive.c,v 1.10 2013/06/04 02:34:48 claudio Exp $ */
a23 1
#include <netinet/in_systm.h>
@


1.10
log
@Always accept TCP connection requests and identify to which neighbor
it belongs only _after_ receiving an Initialization message containing
the information we need. Before an Initialization message is received,
the TCP connection shouldn't be associated with any neighbor/adjacency.
Therefor refactor that part into a own module.
From Renato Westphal
@
text
@d1 1
a1 1
/*	$OpenBSD: keepalive.c,v 1.9 2013/06/01 18:47:07 claudio Exp $ */
a73 2
	else
		nbr_fsm(nbr, NBR_EVT_PDU_RCVD);
@


1.9
log
@Drop support for per-interface labelspaces.
Support for per-interface labelspaces is only necessary for legacy ATM/FR
interfaces running in cell-mode. We shouldn't worry about this.
For platform-wide label spaces the label space id is always 0.
Diff by Renato Westphal
@
text
@d1 1
a1 1
/*	$OpenBSD: keepalive.c,v 1.8 2013/06/01 18:35:02 claudio Exp $ */
d57 1
a57 1
	evbuf_enqueue(&nbr->wbuf, buf);
@


1.8
log
@Drop support for passive interfaces.
Support for passive interfaces was inherited from ospfd but it doesn't
make any sense at all for ldpd.
Diff from Renato Westphal
@
text
@d1 1
a1 1
/*	$OpenBSD: keepalive.c,v 1.7 2010/11/04 09:52:16 claudio Exp $ */
d51 1
a51 1
	gen_ldp_hdr(buf, nbr->iface, size);
@


1.7
log
@Rewrite all packet parsers to be more careful about alignment. Until
now ldpd had no chance to run on a strict alignment architecture but
this makes ldpd happy on sparc64. Be careful to do all needed overflow
checks and try to make all parsing functions look similar.
OK michele@@
@
text
@d1 1
a1 1
/*	$OpenBSD: keepalive.c,v 1.6 2010/05/26 13:56:07 nicm Exp $ */
a44 3

	if (nbr->iface->passive)
		return;
@


1.6
log
@Rename some imsg bits to make namespace collisions less likely buf to
ibuf, buf_read to ibuf_read, READ_BUF_SIZE to IBUF_READ_SIZE.

ok henning gilles claudio jacekm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: keepalive.c,v 1.5 2010/02/25 17:40:46 claudio Exp $ */
d66 1
a66 1
	struct ldp_msg *ka;
d68 1
a68 1
	ka = (struct ldp_msg *)buf;
d70 2
a71 2
	if ((len - TLV_HDR_LEN) < ntohs(ka->length)) {
		session_shutdown(nbr, S_BAD_MSG_LEN, ka->msgid, ka->type);
a74 3
	buf += sizeof(struct ldp_msg);
	len -= sizeof(struct ldp_msg);

d80 1
a80 1
	return (ntohs(ka->length));
@


1.5
log
@Do not use bufferevent for something that's already covered in the imsg
buffer API. This fixes a few possible problems in session_read and does
some further cleanup in various places. Wrap msgbuf into evbuf to add
libevent functionality and use buf_read to handle the read side of a
session.  OK michele@@ and dlg@@ did not see anything evil
@
text
@d1 1
a1 1
/*	$OpenBSD: keepalive.c,v 1.4 2010/02/20 21:28:39 michele Exp $ */
d43 1
a43 1
	struct buf	*buf;
d49 1
a49 1
	if ((buf = buf_open(LDP_MAX_LEN)) == NULL)
@


1.4
log
@Make send_* functions return void (and not int) as they can just succeed
or fatal().

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: keepalive.c,v 1.3 2010/02/18 09:26:29 claudio Exp $ */
d60 1
a60 2
	bufferevent_write(nbr->bev, buf->buf, buf->wpos);
	buf_free(buf);
@


1.3
log
@Remove some debug messages that are too verbose and no longer needed.
OK michele@@
@
text
@d1 1
a1 1
/*	$OpenBSD: keepalive.c,v 1.2 2009/06/05 22:34:45 michele Exp $ */
d40 1
a40 1
int
d47 1
a47 1
		return (0);
a61 2

	return (0);
@


1.2
log
@Correctly send notification messages when errors occur.

ok claudio@@ laurent@@
@
text
@d1 1
a1 1
/*	$OpenBSD: keepalive.c,v 1.1 2009/06/01 20:59:45 michele Exp $ */
a48 2
	log_debug("send_keepalive: neighbor ID %s", inet_ntoa(nbr->id));

a69 2

	log_debug("recv_keepalive: neighbor ID %s", inet_ntoa(nbr->id));
@


1.1
log
@Welcome ldpd, the Label Distribution Protocol daemon.
Built using the imsg/three process framework, its main aim
is to redistribute MPLS labels between peers.

Right now it has some really basic functionalities,
the basic protocol works and peers are able to exchange
labels and insert them in the kernel.
It still does not react to changes of topology.

Not yet connected to the builds.

ok claudio@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a71 1
	u_int32_t messageid;
d78 1
a78 1
		/* XXX: send notification */
a80 2

	messageid = ka->msgid;
@

