head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.14.0.2
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.8
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.12
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.16
date	2017.01.20.12.19.18;	author benno;	state Exp;
branches;
next	1.15;
commitid	qrjsXLNhiS0G91tf;

1.15
date	2016.09.02.17.08.02;	author renato;	state Exp;
branches;
next	1.14;
commitid	BOhRdj3Gcm8K4Ipy;

1.14
date	2016.07.18.21.10.37;	author benno;	state Exp;
branches;
next	1.13;
commitid	BWYySJ4mItuEVXus;

1.13
date	2016.07.15.17.09.25;	author renato;	state Exp;
branches;
next	1.12;
commitid	VGEMIeHBWOrVJjkU;

1.12
date	2016.07.01.23.36.38;	author renato;	state Exp;
branches;
next	1.11;
commitid	h9Qy21EPYXbAFnoh;

1.11
date	2016.05.23.19.09.25;	author renato;	state Exp;
branches;
next	1.10;
commitid	t07H0Mk6WGdVWB0W;

1.10
date	2016.05.23.18.58.48;	author renato;	state Exp;
branches;
next	1.9;
commitid	D7VvXbswyzx5Ahb2;

1.9
date	2016.05.23.18.55.21;	author renato;	state Exp;
branches;
next	1.8;
commitid	85kONxXVWUqI2Jhb;

1.8
date	2016.05.23.18.33.56;	author renato;	state Exp;
branches;
next	1.7;
commitid	YK3Z5X8iSxlfPhoT;

1.7
date	2016.05.23.17.43.42;	author renato;	state Exp;
branches;
next	1.6;
commitid	VpAym8dVR6eY4drQ;

1.6
date	2015.07.21.04.52.29;	author renato;	state Exp;
branches;
next	1.5;
commitid	puLLDX1XPNc3GxB9;

1.5
date	2014.11.03.18.44.36;	author bluhm;	state Exp;
branches;
next	1.4;
commitid	8nAFL7sqdqdC8oHX;

1.4
date	2013.06.01.20.13.04;	author claudio;	state Exp;
branches;
next	1.3;

1.3
date	2010.06.09.14.01.03;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2009.11.02.20.34.58;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.20.59.45;	author michele;	state Exp;
branches;
next	;


desc
@@


1.16
log
@work on making log.c similar in all daemons:

move daemon-local functions into new logmsg.c, and reduce
the (mostly whitespace) differences so that log.c's can be diffed easily.

removal of log_rtmsg() aproved by claudio@@

ok claudio@@ krw@@
@
text
@/*	$OpenBSD: log.h,v 1.8 2016/09/02 14:02:48 benno Exp $ */

/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef LOG_H
#define LOG_H

#include <stdarg.h>

extern const char	*log_procname;

void	 log_init(int);
void	 log_verbose(int);
void	 logit(int, const char *, ...)
		__attribute__((__format__ (printf, 2, 3)));
void	 vlog(int, const char *, va_list)
		__attribute__((__format__ (printf, 2, 0)));
void	 log_warn(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 log_warnx(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 log_info(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 log_debug(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 fatal(const char *) __dead
		__attribute__((__format__ (printf, 1, 0)));
void	 fatalx(const char *) __dead
		__attribute__((__format__ (printf, 1, 0)));

#endif /* LOG_H */
@


1.15
log
@Improve logging of sent and received messages.

* Standardize the logging format of sent and received messages:
  "msg-[in|out]: message type: lsr-id A.B.C.D [additional info]";

* Log sent label messages as well, not only the received ones;

* Move the logging of sent notification messages from
  send_notification_nbr() to send_notification_full(), this way notification
  triggered by the lde process are logged as well;

* Minor clean-up.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.14 2016/07/18 21:10:37 benno Exp $ */
d19 2
a20 2
#ifndef _LOG_H_
#define	_LOG_H_
d24 1
a24 38
struct in6_addr;
union ldpd_addr;
struct hello_source;
struct fec;

void		 log_init(int);
void		 log_verbose(int);
void		 logit(int, const char *, ...)
			__attribute__((__format__ (printf, 2, 3)));
void		 log_warn(const char *, ...)
			__attribute__((__format__ (printf, 1, 2)));
void		 log_warnx(const char *, ...)
			__attribute__((__format__ (printf, 1, 2)));
void		 log_info(const char *, ...)
			__attribute__((__format__ (printf, 1, 2)));
void		 log_debug(const char *, ...)
			__attribute__((__format__ (printf, 1, 2)));
void		 fatal(const char *) __dead
			__attribute__((__format__ (printf, 1, 0)));
void		 fatalx(const char *) __dead
			__attribute__((__format__ (printf, 1, 0)));
const char	*log_sockaddr(void *);
const char	*log_in6addr(const struct in6_addr *);
const char	*log_in6addr_scope(const struct in6_addr *, unsigned int);
const char	*log_addr(int, const union ldpd_addr *);
char		*log_label(uint32_t);
char		*log_hello_src(const struct hello_source *);
const char	*log_map(const struct map *);
const char	*log_fec(const struct fec *);
const char	*af_name(int);
const char	*socket_name(int);
const char	*nbr_state_name(int);
const char	*if_state_name(int);
const char	*if_type_name(enum iface_type);
const char	*msg_name(uint16_t);
const char	*status_code_name(uint32_t);
const char	*pw_type_name(uint16_t);
void		 log_rtmsg(unsigned char);
d26 20
a45 1
#endif /* _LOG_H_ */
@


1.14
log
@add format attributes to log functions and fix am error when using
log_warnx()

ok renato@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.13 2016/07/15 17:09:25 renato Exp $ */
d58 1
@


1.13
log
@Improve logging of reserved labels.

Print "exp-null" and "imp-null" instead of "0" and "3", for example. Also,
remove print_label() and print_pw_type() from ldpctl.c and use the
equivalent functions from ldpd's log.c.

While here, be more paranoid and use UINT32_MAX instead of UINT_MAX
for NO_LABEL.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.12 2016/07/01 23:36:38 renato Exp $ */
d31 14
a44 7
void		 logit(int, const char *, ...);
void		 log_warn(const char *, ...);
void		 log_warnx(const char *, ...);
void		 log_info(const char *, ...);
void		 log_debug(const char *, ...);
void		 fatal(const char *) __dead;
void		 fatalx(const char *) __dead;
@


1.12
log
@More renaming and whitespace cleanup.

No binary change after "strip -s".
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.11 2016/05/23 19:09:25 renato Exp $ */
d42 4
a52 3
char		*log_hello_src(const struct hello_source *);
const char	*log_map(const struct map *);
const char	*log_fec(const struct fec *);
@


1.11
log
@Make functions and variables static whenever possible.

The benefits of this include:
* clean up of the ldpd global namespace;
* improved readability;
* more hints to the compiler/linker to generate more efficient code.

Whenever possible, move global static variables to a smaller scope
(function).

All extern variables are now declared in header files to avoid unnecessary
duplication.

This patch also cleans up the indentation of all function prototypes
and global variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.10 2016/05/23 18:58:48 renato Exp $ */
d47 1
a47 1
const char	*notification_name(uint32_t);
@


1.10
log
@Add support for IPv6 (RFC 7552).

This includes:
* Full compliance to RFC 7552;
* Support for MD5 on LDPov6 sessions;
* Support for pseudowires over IPv6 LSPs (we're probably the world's
  first implementation doing this);
* Support for the IPv6 explicit-null label;
* Knob to specify the prefered address-family for TCP transport
  connections;
* Knob to use cisco non-compliant format to send and interpret the
  Dual-Stack capability TLV.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.9 2016/05/23 18:55:21 renato Exp $ */
d26 1
a26 15

void	log_init(int);
void	log_verbose(int);
void	logit(int, const char *, ...);
void	vlog(int, const char *, va_list);
void	log_warn(const char *, ...);
void	log_warnx(const char *, ...);
void	log_info(const char *, ...);
void	log_debug(const char *, ...);
void	fatal(const char *) __dead;
void	fatalx(const char *) __dead;
const char *af_name(int);
const char *socket_name(int);
const char *pw_type_name(uint16_t);
const char *log_map(const struct map *);
a27 4
const char *log_fec(const struct fec *);
void	log_rtmsg(unsigned char);
struct hello_source;
char	*log_hello_src(const struct hello_source *);
d29 10
a40 1
const char	*log_sockaddr(void *);
d42 11
@


1.9
log
@Assorted fixes and small cleanup.

Nothing really interesting here.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.8 2016/05/23 18:33:56 renato Exp $ */
d24 3
d37 1
d46 5
@


1.8
log
@Create network sockets on the parent process.

We drop our privileges in ldpe right after we create the network sockets.
The problem is that we might want to change the transport-address and
reload the config, in which case we need new sockets. To allow that,
always create the network sockets in the parent process and pass them
to ldpe via imsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.7 2016/05/23 17:43:42 renato Exp $ */
d36 1
a36 1
const char *log_map(struct map *);
d38 1
a38 1
const char *log_fec(struct fec *);
@


1.7
log
@Fix mess caused by my commit script.

I screwed up everything... trying to fix now.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d34 1
@


1.6
log
@VPLS signaling support.

This patch introduces full support for pseudowire signaling in ldpd(8),
including Control Word and Status TLV negotiation.

As of now it's not possible to configure a VPWS, but the signaling is
the same. In the future, when VPWS support is available in the kernel,
ldpd(8) can be extended to support VPWS with only a few modifications.

Limitations:
* No support for FEC 129, only FEC 128 (more widely deployed);
* No support for group withdraws (not widely deployed);
* No support for MAC withdraws (not widely deployed).

Related RFCs:
* RFC 3916: Requirements for Pseudo-Wire Emulation Edge-to-Edge (PWE3)
* RFC 3985: Pseudo Wire Emulation Edge-to-Edge (PWE3) Architecture
* RFC 4385: Pseudowire Emulation Edge-to-Edge (PWE3) Control Word for
  Use over an MPLS PSN
* RFC 4446: IANA Allocations for Pseudowire Edge to Edge Emulation (PWE3)
* RFC 4447: Pseudowire Setup and Maintenance Using the Label Distribution
  Protocol (LDP)
* RFC 4448: Encapsulation Methods for Transport of Ethernet over MPLS
  Networks
* RFC 4905: Encapsulation Methods for Transport of Layer 2 Frames over
  MPLS Networks
* RFC 4906: Transport of Layer 2 Frames Over MPLS

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.5 2014/11/03 18:44:36 bluhm Exp $ */
d34 1
a34 1
const char *pw_type_name(u_int16_t);
d38 3
a40 1
void	log_rtmsg(u_char);
@


1.5
log
@Convert the logic in yyerror().  Instead of creating a temporary
format string, create a temporary message.
OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.4 2013/06/01 20:13:04 claudio Exp $ */
d34 4
a37 1
const char *log_fec(struct map *);
@


1.4
log
@Filter out route messages we don't need and log kernel messages in
super verbose mode.
From Renato Westphal
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.3 2010/06/09 14:01:03 claudio Exp $ */
d26 1
@


1.3
log
@Move the logging of FEC changes to the LDE and print the FEC and label
information. This is more useful.
OK michele
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.2 2009/11/02 20:34:58 claudio Exp $ */
d34 1
@


1.2
log
@More IMSG_CTL_LOG_VERBOSE, still doing the same toggeling of log_debug().
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.1 2009/06/01 20:59:45 michele Exp $ */
d33 1
@


1.1
log
@Welcome ldpd, the Label Distribution Protocol daemon.
Built using the imsg/three process framework, its main aim
is to redistribute MPLS labels between peers.

Right now it has some really basic functionalities,
the basic protocol works and peers are able to exchange
labels and insert them in the kernel.
It still does not react to changes of topology.

Not yet connected to the builds.

ok claudio@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d25 1
@

