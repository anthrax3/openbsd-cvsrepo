head	1.27;
access;
symbols
	OPENBSD_6_2:1.27.0.2
	OPENBSD_6_2_BASE:1.27
	OPENBSD_6_1:1.27.0.4
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.26.0.2
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.7.0.4
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.8
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.3.0.12
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.27
date	2017.03.03.23.36.06;	author renato;	state Exp;
branches;
next	1.26;
commitid	nsyffCkbHeLwduqi;

1.26
date	2016.07.01.23.14.31;	author renato;	state Exp;
branches;
next	1.25;
commitid	DKNC9fIizmSRxKR1;

1.25
date	2016.05.23.19.14.03;	author renato;	state Exp;
branches;
next	1.24;
commitid	TLlfi1Pk0Z97z8HM;

1.24
date	2016.05.23.19.11.42;	author renato;	state Exp;
branches;
next	1.23;
commitid	AQBoOveMRKjtVfFv;

1.23
date	2016.05.23.19.09.25;	author renato;	state Exp;
branches;
next	1.22;
commitid	t07H0Mk6WGdVWB0W;

1.22
date	2016.05.23.18.58.48;	author renato;	state Exp;
branches;
next	1.21;
commitid	D7VvXbswyzx5Ahb2;

1.21
date	2016.05.23.18.55.21;	author renato;	state Exp;
branches;
next	1.20;
commitid	85kONxXVWUqI2Jhb;

1.20
date	2016.05.23.18.54.10;	author renato;	state Exp;
branches;
next	1.19;
commitid	4EkwSufPwnvCGASL;

1.19
date	2016.05.23.17.43.42;	author renato;	state Exp;
branches;
next	1.18;
commitid	VpAym8dVR6eY4drQ;

1.18
date	2016.05.23.16.54.22;	author renato;	state Exp;
branches;
next	1.17;
commitid	LfWxXXNhiR6poNUS;

1.17
date	2016.05.23.16.35.37;	author renato;	state Exp;
branches;
next	1.16;
commitid	kBkfn3IA7pHWJlRN;

1.16
date	2016.05.23.16.18.51;	author renato;	state Exp;
branches;
next	1.15;
commitid	0IKOnhMGNkMbV1lE;

1.15
date	2016.05.23.16.14.37;	author renato;	state Exp;
branches;
next	1.14;
commitid	hNzA87VdOHsaOms9;

1.14
date	2016.05.23.15.47.24;	author renato;	state Exp;
branches;
next	1.13;
commitid	Eng7dm0NElMq9Yi3;

1.13
date	2016.05.23.15.43.11;	author renato;	state Exp;
branches;
next	1.12;
commitid	weS0xzAgWBV4f0dh;

1.12
date	2016.05.23.15.41.04;	author renato;	state Exp;
branches;
next	1.11;
commitid	GWVZlQK3ZbMPg5pq;

1.11
date	2015.07.21.04.52.29;	author renato;	state Exp;
branches;
next	1.10;
commitid	puLLDX1XPNc3GxB9;

1.10
date	2015.07.21.04.40.56;	author renato;	state Exp;
branches;
next	1.9;
commitid	aaU19t2dCdAdF6ZH;

1.9
date	2015.07.19.21.01.56;	author renato;	state Exp;
branches;
next	1.8;
commitid	3CZZKtMxWnvDQhpO;

1.8
date	2015.07.19.20.50.03;	author renato;	state Exp;
branches;
next	1.7;
commitid	HQ4RevpYoLNvLRj2;

1.7
date	2013.06.04.02.25.28;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2013.06.03.16.58.14;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2013.06.01.19.28.55;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.01.18.35.02;	author claudio;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.25.13.29.45;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.18.15.27.31;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.20.59.45;	author michele;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Allow to run on a non-default rdomain.

OK claudio@@
@
text
@/*	$OpenBSD: printconf.c,v 1.26 2016/07/01 23:14:31 renato Exp $ */

/*
 * Copyright (c) 2013, 2016 Renato Westphal <renato@@openbsd.org>
 * Copyright (c) 2009 Michele Marchetto <michele@@openbsd.org>
 * Copyright (c) 2004, 2005, 2008 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <arpa/inet.h>
#include <stdio.h>

#include "ldpd.h"
#include "ldpe.h"
#include "log.h"

static void	print_mainconf(struct ldpd_conf *);
static void	print_af(int, struct ldpd_conf *, struct ldpd_af_conf *);
static void	print_iface(struct iface *, struct iface_af *);
static void	print_tnbr(struct tnbr *);
static void	print_nbrp(struct nbr_params *);
static void	print_l2vpn(struct l2vpn *);
static void	print_pw(struct l2vpn_pw *);

static void
print_mainconf(struct ldpd_conf *conf)
{
	printf("router-id %s\n", inet_ntoa(conf->rtr_id));

	if (conf->flags & F_LDPD_NO_FIB_UPDATE)
		printf("fib-update no\n");
	else
		printf("fib-update yes\n");

	printf("rdomain %u\n", conf->rdomain);
	if (conf->trans_pref == DUAL_STACK_LDPOV4)
		printf("transport-preference ipv4\n");
	else if (conf->trans_pref == DUAL_STACK_LDPOV6)
		printf("transport-preference ipv6\n");

	if (conf->flags & F_LDPD_DS_CISCO_INTEROP)
		printf("ds-cisco-interop yes\n");
	else
		printf("ds-cisco-interop no\n");
}

static void
print_af(int af, struct ldpd_conf *conf, struct ldpd_af_conf *af_conf)
{
	struct iface		*iface;
	struct iface_af		*ia;
	struct tnbr		*tnbr;

	printf("\naddress-family %s {\n", af_name(af));

	if (af_conf->flags & F_LDPD_AF_THELLO_ACCEPT)
		printf("\ttargeted-hello-accept yes\n");
	else
		printf("\ttargeted-hello-accept no\n");

	if (af_conf->flags & F_LDPD_AF_EXPNULL)
		printf("\texplicit-null yes\n");
	else
		printf("\texplicit-null no\n");

	if (af_conf->flags & F_LDPD_AF_NO_GTSM)
		printf("\tgtsm-enable no\n");
	else
		printf("\tgtsm-enable yes\n");

	printf("\tkeepalive %u\n", af_conf->keepalive);
	printf("\ttransport-address %s\n", log_addr(af, &af_conf->trans_addr));

	LIST_FOREACH(iface, &conf->iface_list, entry) {
		ia = iface_af_get(iface, af);
		if (ia->enabled)
			print_iface(iface, ia);
	}

	LIST_FOREACH(tnbr, &conf->tnbr_list, entry)
		if (tnbr->af == af && tnbr->flags & F_TNBR_CONFIGURED)
			print_tnbr(tnbr);

	printf("}\n");
}

static void
print_iface(struct iface *iface, struct iface_af *ia)
{
	printf("\tinterface %s {\n", iface->name);
	printf("\t\tlink-hello-holdtime %u\n", ia->hello_holdtime);
	printf("\t\tlink-hello-interval %u\n", ia->hello_interval);
	printf("\t}\n");
}

static void
print_tnbr(struct tnbr *tnbr)
{
	printf("\n\ttargeted-neighbor %s {\n", log_addr(tnbr->af, &tnbr->addr));
	printf("\t\ttargeted-hello-holdtime %u\n", tnbr->hello_holdtime);
	printf("\t\ttargeted-hello-interval %u\n", tnbr->hello_interval);
	printf("\t}\n");
}

static void
print_nbrp(struct nbr_params *nbrp)
{
	printf("\nneighbor %s {\n", inet_ntoa(nbrp->lsr_id));

	if (nbrp->flags & F_NBRP_KEEPALIVE)
		printf("\tkeepalive %u\n", nbrp->keepalive);

	if (nbrp->flags & F_NBRP_GTSM) {
		if (nbrp->gtsm_enabled)
			printf("\tgtsm-enable yes\n");
		else
			printf("\tgtsm-enable no\n");
	}

	if (nbrp->flags & F_NBRP_GTSM_HOPS)
		printf("\tgtsm-hops %u\n", nbrp->gtsm_hops);

	if (nbrp->auth.method == AUTH_MD5SIG)
		printf("\tpassword XXXXXX\n");

	printf("}\n");
}

static void
print_l2vpn(struct l2vpn *l2vpn)
{
	struct l2vpn_if	*lif;
	struct l2vpn_pw	*pw;

	printf("\nl2vpn %s type vpls {\n", l2vpn->name);

	if (l2vpn->pw_type == PW_TYPE_ETHERNET)
		printf("\tpw-type ethernet\n");
	else
		printf("\tpw-type ethernet-tagged\n");

	printf("\tmtu %u\n", l2vpn->mtu);
	if (l2vpn->br_ifindex != 0)
		printf("\tbridge %s\n", l2vpn->br_ifname);
	LIST_FOREACH(lif, &l2vpn->if_list, entry)
		printf("\tinterface %s\n", lif->ifname);
	LIST_FOREACH(pw, &l2vpn->pw_list, entry)
		print_pw(pw);

	printf("}\n");
}

static void
print_pw(struct l2vpn_pw *pw)
{
	printf("\tpseudowire %s {\n", pw->ifname);

	printf("\t\tneighbor-id %s\n", inet_ntoa(pw->lsr_id));
	printf("\t\tneighbor-addr %s\n", log_addr(pw->af, &pw->addr));
	printf("\t\tpw-id %u\n", pw->pwid);

	if (pw->flags & F_PW_STATUSTLV_CONF)
		printf("\t\tstatus-tlv yes\n");
	else
		printf("\t\tstatus-tlv no\n");

	if (pw->flags & F_PW_CWORD_CONF)
		printf("\t\tcontrol-word yes\n");
	else
		printf("\t\tcontrol-word no\n");

	printf("\t}\n");
}

void
print_config(struct ldpd_conf *conf)
{
	struct nbr_params	*nbrp;
	struct l2vpn		*l2vpn;

	print_mainconf(conf);

	if (conf->ipv4.flags & F_LDPD_AF_ENABLED)
		print_af(AF_INET, conf, &conf->ipv4);
	if (conf->ipv6.flags & F_LDPD_AF_ENABLED)
		print_af(AF_INET6, conf, &conf->ipv6);

	LIST_FOREACH(nbrp, &conf->nbrp_list, entry)
		print_nbrp(nbrp);

	LIST_FOREACH(l2vpn, &conf->l2vpn_list, entry)
		print_l2vpn(l2vpn);
}
@


1.26
log
@Add GTSM support (RFC 6720).

This also finishes the missing bits from our RFC 7552 implementation
because GTSM is mandatory for LDPv6.

To avoid any kind of interoperability problems, I included a few
knobs to enable/disable GTSM on a per-address-family and per-neighbor
basis. Cisco's LDPv6 implementation, for instance, doesn't support GTSM.

"reads good" claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.25 2016/05/23 19:14:03 renato Exp $ */
d47 1
@


1.25
log
@Update copyright information.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.24 2016/05/23 19:11:42 renato Exp $ */
d77 5
d123 10
@


1.24
log
@Remove superfluous includes.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.23 2016/05/23 19:09:25 renato Exp $ */
d4 2
@


1.23
log
@Make functions and variables static whenever possible.

The benefits of this include:
* clean up of the ldpd global namespace;
* improved readability;
* more hints to the compiler/linker to generate more efficient code.

Whenever possible, move global static variables to a smaller scope
(function).

All extern variables are now declared in header files to avoid unnecessary
duplication.

This patch also cleans up the indentation of all function prototypes
and global variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.22 2016/05/23 18:58:48 renato Exp $ */
a18 1
#include <sys/queue.h>
a19 2
#include <sys/socket.h>
#include <netinet/in.h>
a20 1

a22 1
#include "ldp.h"
@


1.22
log
@Add support for IPv6 (RFC 7552).

This includes:
* Full compliance to RFC 7552;
* Support for MD5 on LDPov6 sessions;
* Support for pseudowires over IPv6 LSPs (we're probably the world's
  first implementation doing this);
* Support for the IPv6 explicit-null label;
* Knob to specify the prefered address-family for TCP transport
  connections;
* Knob to use cisco non-compliant format to send and interpret the
  Dual-Stack capability TLV.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.21 2016/05/23 18:55:21 renato Exp $ */
d32 7
a38 7
void	print_mainconf(struct ldpd_conf *);
void	print_af(int, struct ldpd_conf *, struct ldpd_af_conf *);
void	print_iface(struct iface *, struct iface_af *);
void	print_tnbr(struct tnbr *);
void	print_nbrp(struct nbr_params *);
void	print_l2vpn(struct l2vpn *);
void	print_pw(struct l2vpn_pw *);
d40 1
a40 1
void
d61 1
a61 1
void
d96 1
a96 1
void
d105 1
a105 1
void
d114 1
a114 1
void
d128 1
a128 1
void
d152 1
a152 1
void
@


1.21
log
@Assorted fixes and small cleanup.

Nothing really interesting here.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.20 2016/05/23 18:54:10 renato Exp $ */
d30 1
d33 2
a34 1
void	print_iface(struct iface *);
d50 7
a56 2
	if (conf->flags & F_LDPD_TH_ACCEPT)
		printf("targeted-hello-accept yes\n");
d58 9
a66 1
		printf("targeted-hello-accept no\n");
d68 9
a76 2
	if (conf->flags & F_LDPD_EXPNULL)
		printf("explicit-null yes\n");
d78 14
a91 1
		printf("explicit-null no\n");
d93 1
a93 2
	printf("keepalive %u\n", conf->keepalive);
	printf("transport-address %s\n", inet_ntoa(conf->trans_addr));
d97 1
a97 1
print_iface(struct iface *iface)
d99 4
a102 4
	printf("\ninterface %s {\n", iface->name);
	printf("\tlink-hello-holdtime %u\n", iface->hello_holdtime);
	printf("\tlink-hello-interval %u\n", iface->hello_interval);
	printf("}\n");
d108 4
a111 4
	printf("\ntargeted-neighbor %s {\n", inet_ntoa(tnbr->addr));
	printf("\ttargeted-hello-holdtime %u\n", tnbr->hello_holdtime);
	printf("\ttargeted-hello-interval %u\n", tnbr->hello_interval);
	printf("}\n");
d156 3
a158 1
	printf("\t\tneighbor %s\n", inet_ntoa(pw->lsr_id));
a176 2
	struct iface		*iface;
	struct tnbr		*tnbr;
d182 4
a185 6
	LIST_FOREACH(iface, &conf->iface_list, entry)
		print_iface(iface);

	LIST_FOREACH(tnbr, &conf->tnbr_list, entry)
		if (tnbr->flags & F_TNBR_CONFIGURED)
			print_tnbr(tnbr);
@


1.20
log
@Remove redundant new lines in print_config().
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.19 2016/05/23 17:43:42 renato Exp $ */
d84 1
d87 1
d90 1
d101 1
d106 1
d114 1
d124 1
d129 1
d134 1
@


1.19
log
@Fix mess caused by my commit script.

I screwed up everything... trying to fix now.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d41 1
a41 1
	printf("router-id %s\n\n", inet_ntoa(conf->rtr_id));
d97 1
a97 1
	printf("l2vpn %s type vpls {\n", l2vpn->name);
a102 1
	printf("\n");
a137 1
	printf("\n");
d141 1
a141 1
	printf("\n");
d145 1
a145 1
	printf("\n");
d148 1
a148 1
	printf("\n");
@


1.18
log
@Rework L2VPN code.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.17 2016/05/23 16:35:37 renato Exp $ */
d43 1
a43 1
	if (conf->flags & LDPD_FLAG_NO_FIB_UPDATE)
d48 1
a48 1
	if (conf->flags & LDPD_FLAG_TH_ACCEPT)
d52 5
@


1.17
log
@Do not accept incomplete pseudowires in the configuration.

There's no point on keeping in the config something that can not be used,
it just adds unnecessary complexity. Also, it's better to warn the user
that there's something wrong rather than play nice and ignore the problem.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.16 2016/05/23 16:18:51 renato Exp $ */
d112 1
a112 1
	printf("\t\tneighbor %s\n", inet_ntoa(pw->addr));
@


1.16
log
@Make neighbor parameters per lsr-id not per transport-address.

With the advent of IPv6 support, a single neighbor can have two different
transport-addresses: one for ipv4 and one for ipv6. In order to define
neighbor-specific parameters in an indistinguishable way, define them
by lsr-id. This way we can switch between LDPov4 and LDPov6 and keep
the same configuration.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.15 2016/05/23 16:14:37 renato Exp $ */
d112 2
a113 4
	if (pw->addr.s_addr != INADDR_ANY)
		printf("\t\tneighbor %s\n", inet_ntoa(pw->addr));
	if (pw->pwid != 0)
		printf("\t\tpw-id %u\n", pw->pwid);
@


1.15
log
@More renaming.

Rename a few more things to improve readability.

* s/F_PW_CONTROLWORD_CONF/F_PW_CWORD_CONF/ (shorter)
* s/F_PW_CONTROLWORD/F_PW_CWORD/ (shorter)
* s/LDPD_FLAG_*/F_LDPD_*/ (consistency)
* s/lde_nbr_address/lde_addr/ (shorter)
* s/ldp_discovery_socket/ldp_disc_socket/ (shorter)
* s/ldp_ediscovery_socket/ldp_edisc_socket/ (shorter)
* s/ldp_sendboth/main_imsg_compose_both/ (consistency)
* s/cons/total/ (makes more sense)
* s/kaddr/ka/ (consistency with remaining code)
* Always use 'ln' for lde_nbrs (consistency)
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.14 2016/05/23 15:47:24 renato Exp $ */
d78 1
a78 1
	printf("\nneighbor %s {\n", inet_ntoa(nbrp->addr));
@


1.14
log
@Move some code around.

This patch doesn't introduce any logical change.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.13 2016/05/23 15:43:11 renato Exp $ */
d120 1
a120 1
	if (pw->flags & F_PW_CONTROLWORD_CONF)
@


1.13
log
@Add knob to configure the transport address.

This will be especially important when we add support for IPv6, because
we'll not be able to use the router-id as the transport-address in
this case.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.12 2016/05/23 15:41:04 renato Exp $ */
a86 19
print_pw(struct l2vpn_pw *pw)
{
	printf("\tpseudowire %s {\n", pw->ifname);
	if (pw->addr.s_addr != INADDR_ANY)
		printf("\t\tneighbor %s\n", inet_ntoa(pw->addr));
	if (pw->pwid != 0)
		printf("\t\tpw-id %u\n", pw->pwid);
	if (pw->flags & F_PW_STATUSTLV_CONF)
		printf("\t\tstatus-tlv yes\n");
	else
		printf("\t\tstatus-tlv no\n");
	if (pw->flags & F_PW_CONTROLWORD_CONF)
		printf("\t\tcontrol-word yes\n");
	else
		printf("\t\tcontrol-word no\n");
	printf("\t}\n");
}

void
d106 19
@


1.12
log
@Allow setting the session holdtime per neighbor.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.11 2015/07/21 04:52:29 renato Exp $ */
d54 1
@


1.11
log
@VPLS signaling support.

This patch introduces full support for pseudowire signaling in ldpd(8),
including Control Word and Status TLV negotiation.

As of now it's not possible to configure a VPWS, but the signaling is
the same. In the future, when VPWS support is available in the kernel,
ldpd(8) can be extended to support VPWS with only a few modifications.

Limitations:
* No support for FEC 129, only FEC 128 (more widely deployed);
* No support for group withdraws (not widely deployed);
* No support for MAC withdraws (not widely deployed).

Related RFCs:
* RFC 3916: Requirements for Pseudo-Wire Emulation Edge-to-Edge (PWE3)
* RFC 3985: Pseudo Wire Emulation Edge-to-Edge (PWE3) Architecture
* RFC 4385: Pseudowire Emulation Edge-to-Edge (PWE3) Control Word for
  Use over an MPLS PSN
* RFC 4446: IANA Allocations for Pseudowire Edge to Edge Emulation (PWE3)
* RFC 4447: Pseudowire Setup and Maintenance Using the Label Distribution
  Protocol (LDP)
* RFC 4448: Encapsulation Methods for Transport of Ethernet over MPLS
  Networks
* RFC 4905: Encapsulation Methods for Transport of Layer 2 Frames over
  MPLS Networks
* RFC 4906: Transport of Layer 2 Frames Over MPLS

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.10 2015/07/21 04:40:56 renato Exp $ */
d78 2
@


1.10
log
@Assorted fixes and code cleanup for targeted neighbors.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.9 2015/07/19 21:01:56 renato Exp $ */
d35 2
d84 41
d130 1
d144 3
@


1.9
log
@Implement md5 authentication support.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.8 2015/07/19 20:50:03 renato Exp $ */
d95 2
a96 1
		print_tnbr(tnbr);
@


1.8
log
@Remove incomplete support for unnecessary modes of  operation.

LDP has several modes of operation, it was designed in that way so it
could run on legacy equipment like ATM/FR switches with very strict
memory limitations.

For modern hardware there's no point on using either the "Conservative
Label Retention" or "Downstream On Demand" modes of operation since they
save memory at cost of blackholing traffic when routing changes. Major
vendors implement only the "Liberal Label Retention" and "Downstream
Unsolicited" modes for non ATM/FR hardware. Let's do that too.

As for using either "Independent Control" or "Ordered Control", let's
stick with the first option mainly because it's easier to implement
and because it doesn't really matter which control mode is used. For
reference, Cisco implements only "Independent Control" and Juniper only
"Ordered Control". Both modes are interoperable.

The point of supporting only one combination of all modes of operation
is that it will allow for the writing of a simpler code without removing
useful functionality.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.7 2013/06/04 02:25:28 claudio Exp $ */
d33 2
a34 1
void	print_tnbr(struct tnbr *tnbr);
d73 9
d84 3
a86 2
	struct iface	*iface;
	struct tnbr	*tnbr;
d96 3
@


1.7
log
@Implement support for adjacencies and targeted hellos
Refactor adjacencies out of the neighbor handling so that it is possible to
have more complex topologies with targeted sessions.
From Renato Westphal
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.6 2013/06/03 16:58:14 claudio Exp $ */
a43 15

	if (conf->mode & MODE_DIST_INDEPENDENT)
		printf("distribution independent\n");
	else
		printf("distribution ordered\n");

	if (conf->mode & MODE_RET_LIBERAL)
		printf("retention liberal\n");
	else
		printf("retention conservative\n");

	if (conf->mode & MODE_ADV_ONDEMAND)
		printf("advertisement ondemand\n");
	else
		printf("advertisement unsolicited\n");
@


1.6
log
@Fix bug in the fib-update command
The "fib-update" directive wasn't accepting "no" as an option.
Diff by Renato Westphal
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.5 2013/06/01 19:28:55 claudio Exp $ */
d33 1
d60 5
d72 11
a82 2
	printf("\tholdtime %d\n", iface->holdtime);
	printf("\thello-interval %d\n", iface->hello_interval);
d90 1
d95 1
a95 1
	LIST_FOREACH(iface, &conf->iface_list, entry) {
d97 3
a99 1
	}
@


1.5
log
@The keepalive timeout should be configured on a global basis and not per
interface.
Remove the iface pointer from the 'nbr' structure because it's not
needed anymore.
Diff from Renato Westphal
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.4 2013/06/01 18:35:02 claudio Exp $ */
d38 5
@


1.4
log
@Drop support for passive interfaces.
Support for passive interfaces was inherited from ospfd but it doesn't
make any sense at all for ldpd.
Diff from Renato Westphal
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.3 2010/05/25 13:29:45 claudio Exp $ */
d53 2
@


1.3
log
@Remove another leftover from ospfd. ldpd does not have a concept of ext_tag
and so there is no need to carry ext_tag and rtlabels around.
"Yes! kill kill kill" michele@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.2 2010/02/18 15:27:31 claudio Exp $ */
a60 2
	if (iface->passive)
		printf("\tpassive\n");
@


1.2
log
@Make the output of printconf() look like a real config file.
OK michele@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.1 2009/06/01 20:59:45 michele Exp $ */
a31 1
void	print_rtlabel(struct ldpd_conf *);
a52 11
}

void
print_rtlabel(struct ldpd_conf *conf)
{
	struct n2id_label	*label;

	TAILQ_FOREACH(label, &rt_labels, entry)
		if (label->ext_tag)
			printf("rtlabel \"%s\" external-tag %u\n",
			    label->name, label->ext_tag);
@


1.1
log
@Welcome ldpd, the Label Distribution Protocol daemon.
Built using the imsg/three process framework, its main aim
is to redistribute MPLS labels between peers.

Right now it has some really basic functionalities,
the basic protocol works and peers are able to exchange
labels and insert them in the kernel.
It still does not react to changes of topology.

Not yet connected to the builds.

ok claudio@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d41 1
a41 1
		printf("Distribution: Independent\n");
d43 1
a43 1
		printf("Distribution: Ordered\n");
d46 1
a46 1
		printf("Retention: Liberal\n");
d48 1
a48 1
		printf("Retention: Conservative\n");
d51 1
a51 1
		printf("Advertisement: On demand\n");
d53 1
a53 1
		printf("Advertisement: Unsolicited\n");
d70 3
a72 6

	printf("\tinterface %s: %s {\n", iface->name, inet_ntoa(iface->addr));

	printf("\t\tholdtime %d\n", iface->holdtime);
	printf("\t\thello-interval %d\n", iface->hello_interval);

d74 2
a75 3
		printf("\t\tpassive\n");

	printf("\t}\n");
a82 1
	printf("\n");
@

