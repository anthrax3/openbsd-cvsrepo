head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.6
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.05.23.19.11.42;	author renato;	state Exp;
branches;
next	1.9;
commitid	AQBoOveMRKjtVfFv;

1.9
date	2016.05.23.19.09.25;	author renato;	state Exp;
branches;
next	1.8;
commitid	t07H0Mk6WGdVWB0W;

1.8
date	2016.05.23.18.58.48;	author renato;	state Exp;
branches;
next	1.7;
commitid	D7VvXbswyzx5Ahb2;

1.7
date	2016.05.23.18.28.22;	author renato;	state Exp;
branches;
next	1.6;
commitid	FV8IR5RMrg1EHRis;

1.6
date	2016.05.23.17.43.42;	author renato;	state Exp;
branches;
next	1.5;
commitid	VpAym8dVR6eY4drQ;

1.5
date	2016.05.23.16.25.11;	author renato;	state Exp;
branches;
next	1.4;
commitid	rbQYKxfpthpZ0H0X;

1.4
date	2016.05.23.16.20.59;	author renato;	state Exp;
branches;
next	1.3;
commitid	nAtgYzDo97D7UnEI;

1.3
date	2016.05.23.15.43.11;	author renato;	state Exp;
branches;
next	1.2;
commitid	weS0xzAgWBV4f0dh;

1.2
date	2016.05.23.15.01.54;	author renato;	state Exp;
branches;
next	1.1;
commitid	O3dwWs11JmseW6UY;

1.1
date	2015.07.19.21.01.56;	author renato;	state Exp;
branches;
next	;
commitid	3CZZKtMxWnvDQhpO;


desc
@@


1.10
log
@Remove superfluous includes.
@
text
@/*	$OpenBSD: pfkey.c,v 1.9 2016/05/23 19:09:25 renato Exp $ */

/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 * Copyright (c) 2003, 2004 Markus Friedl <markus@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "ldpd.h"
#include "ldpe.h"
#include "log.h"

static int	 pfkey_send(int, uint8_t, uint8_t, uint8_t,
		    int, union ldpd_addr *, union ldpd_addr *,
		    uint32_t, uint8_t, int, char *, uint8_t, int, char *,
		    uint16_t, uint16_t);
static int	 pfkey_reply(int, uint32_t *);
static int	 pfkey_sa_add(int, union ldpd_addr *, union ldpd_addr *,
		    uint8_t, char *, uint32_t *);
static int	 pfkey_sa_remove(int, union ldpd_addr *, union ldpd_addr *,
		    uint32_t *);
static int	 pfkey_md5sig_establish(struct nbr *, struct nbr_params *nbrp);
static int	 pfkey_md5sig_remove(struct nbr *);

#define	PFKEY2_CHUNK sizeof(uint64_t)
#define	ROUNDUP(x) (((x) + (PFKEY2_CHUNK - 1)) & ~(PFKEY2_CHUNK - 1))
#define	IOV_CNT	20

static uint32_t	 sadb_msg_seq;
static uint32_t	 pid; /* should pid_t but pfkey needs uint32_t */
static int	 fd;

static int
pfkey_send(int sd, uint8_t satype, uint8_t mtype, uint8_t dir,
    int af, union ldpd_addr *src, union ldpd_addr *dst, uint32_t spi,
    uint8_t aalg, int alen, char *akey, uint8_t ealg, int elen, char *ekey,
    uint16_t sport, uint16_t dport)
{
	struct sadb_msg		smsg;
	struct sadb_sa		sa;
	struct sadb_address	sa_src, sa_dst;
	struct sadb_key		sa_akey, sa_ekey;
	struct sadb_spirange	sa_spirange;
	struct iovec		iov[IOV_CNT];
	ssize_t			n;
	int			len = 0;
	int			iov_cnt;
	struct sockaddr_storage	ssrc, sdst, smask, dmask;
	struct sockaddr		*saptr;

	if (!pid)
		pid = getpid();

	/* we need clean sockaddr... no ports set */
	memset(&ssrc, 0, sizeof(ssrc));
	memset(&smask, 0, sizeof(smask));
	if ((saptr = addr2sa(af, src, 0)))
		memcpy(&ssrc, saptr, sizeof(ssrc));
	switch (af) {
	case AF_INET:
		memset(&((struct sockaddr_in *)&smask)->sin_addr, 0xff, 32/8);
		break;
	case AF_INET6:
		memset(&((struct sockaddr_in6 *)&smask)->sin6_addr, 0xff,
		    128/8);
		break;
	default:
		return (-1);
	}
	smask.ss_family = ssrc.ss_family;
	smask.ss_len = ssrc.ss_len;

	memset(&sdst, 0, sizeof(sdst));
	memset(&dmask, 0, sizeof(dmask));
	if ((saptr = addr2sa(af, dst, 0)))
		memcpy(&sdst, saptr, sizeof(sdst));
	switch (af) {
	case AF_INET:
		memset(&((struct sockaddr_in *)&dmask)->sin_addr, 0xff, 32/8);
		break;
	case AF_INET6:
		memset(&((struct sockaddr_in6 *)&dmask)->sin6_addr, 0xff,
		    128/8);
		break;
	default:
		return (-1);
	}
	dmask.ss_family = sdst.ss_family;
	dmask.ss_len = sdst.ss_len;

	memset(&smsg, 0, sizeof(smsg));
	smsg.sadb_msg_version = PF_KEY_V2;
	smsg.sadb_msg_seq = ++sadb_msg_seq;
	smsg.sadb_msg_pid = pid;
	smsg.sadb_msg_len = sizeof(smsg) / 8;
	smsg.sadb_msg_type = mtype;
	smsg.sadb_msg_satype = satype;

	switch (mtype) {
	case SADB_GETSPI:
		memset(&sa_spirange, 0, sizeof(sa_spirange));
		sa_spirange.sadb_spirange_exttype = SADB_EXT_SPIRANGE;
		sa_spirange.sadb_spirange_len = sizeof(sa_spirange) / 8;
		sa_spirange.sadb_spirange_min = 0x100;
		sa_spirange.sadb_spirange_max = 0xffffffff;
		sa_spirange.sadb_spirange_reserved = 0;
		break;
	case SADB_ADD:
	case SADB_UPDATE:
	case SADB_DELETE:
		memset(&sa, 0, sizeof(sa));
		sa.sadb_sa_exttype = SADB_EXT_SA;
		sa.sadb_sa_len = sizeof(sa) / 8;
		sa.sadb_sa_replay = 0;
		sa.sadb_sa_spi = spi;
		sa.sadb_sa_state = SADB_SASTATE_MATURE;
		break;
	}

	memset(&sa_src, 0, sizeof(sa_src));
	sa_src.sadb_address_exttype = SADB_EXT_ADDRESS_SRC;
	sa_src.sadb_address_len = (sizeof(sa_src) + ROUNDUP(ssrc.ss_len)) / 8;

	memset(&sa_dst, 0, sizeof(sa_dst));
	sa_dst.sadb_address_exttype = SADB_EXT_ADDRESS_DST;
	sa_dst.sadb_address_len = (sizeof(sa_dst) + ROUNDUP(sdst.ss_len)) / 8;

	sa.sadb_sa_auth = aalg;
	sa.sadb_sa_encrypt = SADB_X_EALG_AES; /* XXX */

	switch (mtype) {
	case SADB_ADD:
	case SADB_UPDATE:
		memset(&sa_akey, 0, sizeof(sa_akey));
		sa_akey.sadb_key_exttype = SADB_EXT_KEY_AUTH;
		sa_akey.sadb_key_len = (sizeof(sa_akey) +
		    ((alen + 7) / 8) * 8) / 8;
		sa_akey.sadb_key_bits = 8 * alen;

		memset(&sa_ekey, 0, sizeof(sa_ekey));
		sa_ekey.sadb_key_exttype = SADB_EXT_KEY_ENCRYPT;
		sa_ekey.sadb_key_len = (sizeof(sa_ekey) +
		    ((elen + 7) / 8) * 8) / 8;
		sa_ekey.sadb_key_bits = 8 * elen;

		break;
	}

	iov_cnt = 0;

	/* msghdr */
	iov[iov_cnt].iov_base = &smsg;
	iov[iov_cnt].iov_len = sizeof(smsg);
	iov_cnt++;

	switch (mtype) {
	case SADB_ADD:
	case SADB_UPDATE:
	case SADB_DELETE:
		/* SA hdr */
		iov[iov_cnt].iov_base = &sa;
		iov[iov_cnt].iov_len = sizeof(sa);
		smsg.sadb_msg_len += sa.sadb_sa_len;
		iov_cnt++;
		break;
	case SADB_GETSPI:
		/* SPI range */
		iov[iov_cnt].iov_base = &sa_spirange;
		iov[iov_cnt].iov_len = sizeof(sa_spirange);
		smsg.sadb_msg_len += sa_spirange.sadb_spirange_len;
		iov_cnt++;
		break;
	}

	/* dest addr */
	iov[iov_cnt].iov_base = &sa_dst;
	iov[iov_cnt].iov_len = sizeof(sa_dst);
	iov_cnt++;
	iov[iov_cnt].iov_base = &sdst;
	iov[iov_cnt].iov_len = ROUNDUP(sdst.ss_len);
	smsg.sadb_msg_len += sa_dst.sadb_address_len;
	iov_cnt++;

	/* src addr */
	iov[iov_cnt].iov_base = &sa_src;
	iov[iov_cnt].iov_len = sizeof(sa_src);
	iov_cnt++;
	iov[iov_cnt].iov_base = &ssrc;
	iov[iov_cnt].iov_len = ROUNDUP(ssrc.ss_len);
	smsg.sadb_msg_len += sa_src.sadb_address_len;
	iov_cnt++;

	switch (mtype) {
	case SADB_ADD:
	case SADB_UPDATE:
		if (alen) {
			/* auth key */
			iov[iov_cnt].iov_base = &sa_akey;
			iov[iov_cnt].iov_len = sizeof(sa_akey);
			iov_cnt++;
			iov[iov_cnt].iov_base = akey;
			iov[iov_cnt].iov_len = ((alen + 7) / 8) * 8;
			smsg.sadb_msg_len += sa_akey.sadb_key_len;
			iov_cnt++;
		}
		if (elen) {
			/* encryption key */
			iov[iov_cnt].iov_base = &sa_ekey;
			iov[iov_cnt].iov_len = sizeof(sa_ekey);
			iov_cnt++;
			iov[iov_cnt].iov_base = ekey;
			iov[iov_cnt].iov_len = ((elen + 7) / 8) * 8;
			smsg.sadb_msg_len += sa_ekey.sadb_key_len;
			iov_cnt++;
		}
		break;
	}

	len = smsg.sadb_msg_len * 8;
	do {
		n = writev(sd, iov, iov_cnt);
	} while (n == -1 && (errno == EAGAIN || errno == EINTR));

	if (n == -1) {
		log_warn("writev (%d/%d)", iov_cnt, len);
		return (-1);
	}

	return (0);
}

int
pfkey_read(int sd, struct sadb_msg *h)
{
	struct sadb_msg hdr;

	if (recv(sd, &hdr, sizeof(hdr), MSG_PEEK) != sizeof(hdr)) {
		if (errno == EAGAIN || errno == EINTR)
			return (0);
		log_warn("pfkey peek");
		return (-1);
	}

	/* XXX: Only one message can be outstanding. */
	if (hdr.sadb_msg_seq == sadb_msg_seq &&
	    hdr.sadb_msg_pid == pid) {
		if (h)
			*h = hdr;
		return (0);
	}

	/* not ours, discard */
	if (read(sd, &hdr, sizeof(hdr)) == -1) {
		if (errno == EAGAIN || errno == EINTR)
			return (0);
		log_warn("pfkey read");
		return (-1);
	}

	return (1);
}

static int
pfkey_reply(int sd, uint32_t *spip)
{
	struct sadb_msg hdr, *msg;
	struct sadb_ext *ext;
	struct sadb_sa *sa;
	uint8_t *data;
	ssize_t len;
	int rv;

	do {
		rv = pfkey_read(sd, &hdr);
		if (rv == -1)
			return (-1);
	} while (rv);

	if (hdr.sadb_msg_errno != 0) {
		errno = hdr.sadb_msg_errno;
		if (errno == ESRCH)
			return (0);
		else {
			log_warn("pfkey");
			return (-1);
		}
	}
	if ((data = reallocarray(NULL, hdr.sadb_msg_len, PFKEY2_CHUNK)) == NULL) {
		log_warn("pfkey malloc");
		return (-1);
	}
	len = hdr.sadb_msg_len * PFKEY2_CHUNK;
	if (read(sd, data, len) != len) {
		log_warn("pfkey read");
		explicit_bzero(data, len);
		free(data);
		return (-1);
	}

	if (hdr.sadb_msg_type == SADB_GETSPI) {
		if (spip == NULL) {
			explicit_bzero(data, len);
			free(data);
			return (0);
		}

		msg = (struct sadb_msg *)data;
		for (ext = (struct sadb_ext *)(msg + 1);
		    (size_t)((uint8_t *)ext - (uint8_t *)msg) <
		    msg->sadb_msg_len * PFKEY2_CHUNK;
		    ext = (struct sadb_ext *)((uint8_t *)ext +
		    ext->sadb_ext_len * PFKEY2_CHUNK)) {
			if (ext->sadb_ext_type == SADB_EXT_SA) {
				sa = (struct sadb_sa *) ext;
				*spip = sa->sadb_sa_spi;
				break;
			}
		}
	}
	explicit_bzero(data, len);
	free(data);
	return (0);
}

static int
pfkey_sa_add(int af, union ldpd_addr *src, union ldpd_addr *dst, uint8_t keylen,
    char *key, uint32_t *spi)
{
	if (pfkey_send(fd, SADB_X_SATYPE_TCPSIGNATURE, SADB_GETSPI, 0,
	    af, src, dst, 0, 0, 0, NULL, 0, 0, NULL, 0, 0) < 0)
		return (-1);
	if (pfkey_reply(fd, spi) < 0)
		return (-1);
	if (pfkey_send(fd, SADB_X_SATYPE_TCPSIGNATURE, SADB_UPDATE, 0,
	    af, src, dst, *spi, 0, keylen, key, 0, 0, NULL, 0, 0) < 0)
		return (-1);
	if (pfkey_reply(fd, NULL) < 0)
		return (-1);
	return (0);
}

static int
pfkey_sa_remove(int af, union ldpd_addr *src, union ldpd_addr *dst,
    uint32_t *spi)
{
	if (pfkey_send(fd, SADB_X_SATYPE_TCPSIGNATURE, SADB_DELETE, 0,
	    af, src, dst, *spi, 0, 0, NULL, 0, 0, NULL, 0, 0) < 0)
		return (-1);
	if (pfkey_reply(fd, NULL) < 0)
		return (-1);
	*spi = 0;
	return (0);
}

static int
pfkey_md5sig_establish(struct nbr *nbr, struct nbr_params *nbrp)
{
	sleep(1);

	if (!nbr->auth.spi_out)
		if (pfkey_sa_add(nbr->af, &nbr->laddr, &nbr->raddr,
		    nbrp->auth.md5key_len, nbrp->auth.md5key,
		    &nbr->auth.spi_out) == -1)
			return (-1);
	if (!nbr->auth.spi_in)
		if (pfkey_sa_add(nbr->af, &nbr->raddr, &nbr->laddr,
		    nbrp->auth.md5key_len, nbrp->auth.md5key,
		    &nbr->auth.spi_in) == -1)
			return (-1);

	nbr->auth.established = 1;
	return (0);
}

static int
pfkey_md5sig_remove(struct nbr *nbr)
{
	if (nbr->auth.spi_out)
		if (pfkey_sa_remove(nbr->af, &nbr->laddr, &nbr->raddr,
		    &nbr->auth.spi_out) == -1)
			return (-1);
	if (nbr->auth.spi_in)
		if (pfkey_sa_remove(nbr->af, &nbr->raddr, &nbr->laddr,
		    &nbr->auth.spi_in) == -1)
			return (-1);

	nbr->auth.established = 0;
	nbr->auth.spi_in = 0;
	nbr->auth.spi_out = 0;
	nbr->auth.method = AUTH_NONE;
	memset(nbr->auth.md5key, 0, sizeof(nbr->auth.md5key));

	return (0);
}

int
pfkey_establish(struct nbr *nbr, struct nbr_params *nbrp)
{
	if (nbrp->auth.method == AUTH_NONE)
		return (0);

	/*
	 * make sure we keep copies of everything we need to
	 * remove SAs and flows later again.
	 */
	nbr->auth.method = nbrp->auth.method;

	switch (nbr->auth.method) {
	case AUTH_MD5SIG:
		strlcpy(nbr->auth.md5key, nbrp->auth.md5key,
		    sizeof(nbr->auth.md5key));
		return (pfkey_md5sig_establish(nbr, nbrp));
	default:
		break;
	}

	return (0);
}

int
pfkey_remove(struct nbr *nbr)
{
	if (nbr->auth.method == AUTH_NONE || !nbr->auth.established)
		return (0);

	switch (nbr->auth.method) {
	case AUTH_MD5SIG:
		return (pfkey_md5sig_remove(nbr));
	default:
		break;
	}

	return (0);
}

int
pfkey_init(void)
{
	if ((fd = socket(PF_KEY, SOCK_RAW | SOCK_CLOEXEC | SOCK_NONBLOCK,
	    PF_KEY_V2)) == -1) {
		if (errno == EPROTONOSUPPORT) {
			log_warnx("PF_KEY not available");
			sysdep.no_pfkey = 1;
			return (-1);
		} else
			fatal("pfkey setup failed");
	}
	return (fd);
}
@


1.9
log
@Make functions and variables static whenever possible.

The benefits of this include:
* clean up of the ldpd global namespace;
* improved readability;
* more hints to the compiler/linker to generate more efficient code.

Whenever possible, move global static variables to a smaller scope
(function).

All extern variables are now declared in header files to avoid unnecessary
duplication.

This patch also cleans up the indentation of all function prototypes
and global variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: pfkey.c,v 1.8 2016/05/23 18:58:48 renato Exp $ */
a20 5
#include <sys/socket.h>
#include <sys/uio.h>
#include <net/pfkeyv2.h>
#include <netinet/ip_ipsp.h>
#include <ctype.h>
a21 1
#include <limits.h>
@


1.8
log
@Add support for IPv6 (RFC 7552).

This includes:
* Full compliance to RFC 7552;
* Support for MD5 on LDPov6 sessions;
* Support for pseudowires over IPv6 LSPs (we're probably the world's
  first implementation doing this);
* Support for the IPv6 explicit-null label;
* Knob to specify the prefered address-family for TCP transport
  connections;
* Knob to use cisco non-compliant format to send and interpret the
  Dual-Stack capability TLV.
@
text
@d1 1
a1 1
/*	$OpenBSD: pfkey.c,v 1.7 2016/05/23 18:28:22 renato Exp $ */
d36 12
d52 3
a54 15
static uint32_t	sadb_msg_seq = 0;
static uint32_t	pid = 0; /* should pid_t but pfkey needs uint32_t */
static int	fd;

int	pfkey_reply(int, uint32_t *);
int	pfkey_send(int, uint8_t, uint8_t, uint8_t,
	    int, union ldpd_addr *, union ldpd_addr *,
	    uint32_t, uint8_t, int, char *, uint8_t, int, char *,
	    uint16_t, uint16_t);
int	pfkey_sa_add(int, union ldpd_addr *, union ldpd_addr *, uint8_t, char *,
	    uint32_t *);
int	pfkey_sa_remove(int, union ldpd_addr *, union ldpd_addr *, uint32_t *);

int	pfkey_md5sig_establish(struct nbr *, struct nbr_params *nbrp);
int	pfkey_md5sig_remove(struct nbr *);
d56 1
a56 1
int
d286 1
a286 1
int
d348 1
a348 1
int
d365 1
a365 1
int
d378 1
a378 1
int
d398 1
a398 1
int
d460 1
a460 1
pfkey_init(struct ldpd_sysdep *sysdep)
d466 1
a466 1
			sysdep->no_pfkey = 1;
@


1.7
log
@Copy structs by assignment instead of memcpy.

Copying by straight assignment is shorter, easier to read and has a
higher level of abstraction. We'll only avoid it when copying from an
unaligned source (e.g., network buffers).

In addition, copy in_addr structs directly.
@
text
@d1 1
a1 1
/*	$OpenBSD: pfkey.c,v 1.6 2016/05/23 17:43:42 renato Exp $ */
d46 1
a46 1
	    struct in_addr *, struct in_addr *,
d49 1
a49 1
int	pfkey_sa_add(struct in_addr *, struct in_addr *, uint8_t, char *,
d51 1
a51 1
int	pfkey_sa_remove(struct in_addr *, struct in_addr *, uint32_t *);
a55 15
static struct sockaddr *
addr2sa(struct in_addr *addr)
{
	static struct sockaddr_storage	 ss;
	struct sockaddr_in		*sa_in = (struct sockaddr_in *)&ss;

	memset(&ss, 0, sizeof(ss));
	sa_in->sin_family = AF_INET;
	sa_in->sin_len = sizeof(struct sockaddr_in);
	sa_in->sin_addr = *addr;
	sa_in->sin_port = htons(0);

	return ((struct sockaddr *)&ss);
}

d58 1
a58 1
    struct in_addr *src, struct in_addr *dst, uint32_t spi,
d80 1
a80 1
	if ((saptr = addr2sa(src)))
d82 11
a92 1
	memset(&((struct sockaddr_in *)&smask)->sin_addr, 0xff, 32/8);
d98 1
a98 1
	if ((saptr = addr2sa(dst)))
d100 11
a110 1
	memset(&((struct sockaddr_in *)&dmask)->sin_addr, 0xff, 32/8);
d349 1
a349 1
pfkey_sa_add(struct in_addr *src, struct in_addr *dst, uint8_t keylen,
d353 1
a353 1
	    src, dst, 0, 0, 0, NULL, 0, 0, NULL, 0, 0) < 0)
d358 1
a358 1
		src, dst, *spi, 0, keylen, key, 0, 0, NULL, 0, 0) < 0)
d366 2
a367 1
pfkey_sa_remove(struct in_addr *src, struct in_addr *dst, uint32_t *spi)
d370 1
a370 1
	    src, dst, *spi, 0, 0, NULL, 0, 0, NULL, 0, 0) < 0)
d384 1
a384 1
		if (pfkey_sa_add(&nbr->laddr, &nbr->raddr,
d389 1
a389 1
		if (pfkey_sa_add(&nbr->raddr, &nbr->laddr,
d402 1
a402 1
		if (pfkey_sa_remove(&nbr->laddr, &nbr->raddr,
d406 1
a406 1
		if (pfkey_sa_remove(&nbr->raddr, &nbr->laddr,
@


1.6
log
@Fix mess caused by my commit script.

I screwed up everything... trying to fix now.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d65 1
a65 1
	sa_in->sin_addr.s_addr = addr->s_addr;
d266 1
a266 1
			memcpy(h, &hdr, sizeof(hdr));
@


1.5
log
@Remove unnecessary break statements.
@
text
@d1 1
a1 1
/*	$OpenBSD: pfkey.c,v 1.4 2016/05/23 16:20:59 renato Exp $ */
d36 1
a36 1
#define	PFKEY2_CHUNK sizeof(u_int64_t)
d40 3
a42 3
static u_int32_t	sadb_msg_seq = 0;
static u_int32_t	pid = 0; /* should pid_t but pfkey needs u_int32_t */
static int		fd;
d44 1
a44 1
int	pfkey_reply(int, u_int32_t *);
d47 1
a47 1
	    u_int32_t, uint8_t, int, char *, uint8_t, int, char *,
d49 3
a51 3
int	pfkey_sa_add(struct in_addr *, struct in_addr *, u_int8_t, char *,
	    u_int32_t *);
int	pfkey_sa_remove(struct in_addr *, struct in_addr *, u_int32_t *);
d62 1
a62 1
	bzero(&ss, sizeof(ss));
d73 1
a73 1
    struct in_addr *src, struct in_addr *dst, u_int32_t spi,
d93 2
a94 2
	bzero(&ssrc, sizeof(ssrc));
	bzero(&smask, sizeof(smask));
d101 2
a102 2
	bzero(&sdst, sizeof(sdst));
	bzero(&dmask, sizeof(dmask));
d109 1
a109 1
	bzero(&smsg, sizeof(smsg));
d119 1
a119 1
		bzero(&sa_spirange, sizeof(sa_spirange));
d129 1
a129 1
		bzero(&sa, sizeof(sa));
d138 1
a138 1
	bzero(&sa_src, sizeof(sa_src));
d142 1
a142 1
	bzero(&sa_dst, sizeof(sa_dst));
d152 1
a152 1
		bzero(&sa_akey, sizeof(sa_akey));
d158 1
a158 1
		bzero(&sa_ekey, sizeof(sa_ekey));
d266 1
a266 1
			bcopy(&hdr, h, sizeof(hdr));
d282 1
a282 1
pfkey_reply(int sd, u_int32_t *spip)
d287 1
a287 1
	u_int8_t *data;
d327 1
a327 1
		    (size_t)((u_int8_t *)ext - (u_int8_t *)msg) <
d329 1
a329 1
		    ext = (struct sadb_ext *)((u_int8_t *)ext +
d344 2
a345 2
pfkey_sa_add(struct in_addr *src, struct in_addr *dst, u_int8_t keylen,
    char *key, u_int32_t *spi)
d361 1
a361 1
pfkey_sa_remove(struct in_addr *src, struct in_addr *dst, u_int32_t *spi)
@


1.4
log
@Standardize some log messages and fix some inconsistencies.

We were using several different names for the same thing in our log
messages: neighbor, neighbor ID, nbr ID and LSR ID.

Standardize to always use "lsr-id" to refer to a neighbor.

Also:
* Use log_warnx() instead of log_warn() when appropriate;
* Use fatal(x) instead of err(x) when appropriate;
* Fix some inconsistent log messages.
@
text
@d1 1
a1 1
/*	$OpenBSD: pfkey.c,v 1.3 2016/05/23 15:43:11 renato Exp $ */
a429 1
		break;
a445 1
		break;
@


1.3
log
@Add knob to configure the transport address.

This will be especially important when we add support for IPv6, because
we'll not be able to use the router-id as the transport-address in
this case.
@
text
@d1 1
a1 1
/*	$OpenBSD: pfkey.c,v 1.2 2016/05/23 15:01:54 renato Exp $ */
d461 1
a461 1
			log_warnx("PF_KEY not available, disabling ipsec");
@


1.2
log
@Pull explicit_bzero patch from bgpd.

Original author: Michael McConville.
@
text
@d1 1
a1 1
/*	$OpenBSD: pfkey.c,v 1.1 2015/07/19 21:01:56 renato Exp $ */
d378 1
a378 1
		if (pfkey_sa_add(&nbr->auth.local_addr, &nbr->addr,
d383 1
a383 1
		if (pfkey_sa_add(&nbr->addr, &nbr->auth.local_addr,
d396 1
a396 1
		if (pfkey_sa_remove(&nbr->auth.local_addr, &nbr->addr,
d400 1
a400 1
		if (pfkey_sa_remove(&nbr->addr, &nbr->auth.local_addr,
a404 1
	nbr->auth.local_addr.s_addr = 0;
a422 1
	nbr->auth.local_addr.s_addr = ldpe_router_id();
@


1.1
log
@Implement md5 authentication support.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d313 1
a313 1
		bzero(data, len);
d320 1
a320 1
			bzero(data, len);
d338 1
a338 1
	bzero(data, len);
@

