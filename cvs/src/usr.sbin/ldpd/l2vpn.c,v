head	1.24;
access;
symbols
	OPENBSD_6_2:1.24.0.6
	OPENBSD_6_2_BASE:1.24
	OPENBSD_6_1:1.24.0.4
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.21.0.2
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.24
date	2017.03.04.00.21.48;	author renato;	state Exp;
branches;
next	1.23;
commitid	luKtDak9oSLriyOU;

1.23
date	2017.03.04.00.12.25;	author renato;	state Exp;
branches;
next	1.22;
commitid	bHPjS8k63pM8XVeR;

1.22
date	2017.03.04.00.03.04;	author renato;	state Exp;
branches;
next	1.21;
commitid	QsrgLdkTVf5ppNUE;

1.21
date	2016.07.01.23.36.38;	author renato;	state Exp;
branches;
next	1.20;
commitid	h9Qy21EPYXbAFnoh;

1.20
date	2016.07.01.23.33.46;	author renato;	state Exp;
branches;
next	1.19;
commitid	o5yBQ1cPVCcMZ7gA;

1.19
date	2016.06.27.19.08.39;	author renato;	state Exp;
branches;
next	1.18;
commitid	eg2E4llYfG7Ytkaq;

1.18
date	2016.06.18.17.13.05;	author renato;	state Exp;
branches;
next	1.17;
commitid	C9BDjZlAk1G5zEq3;

1.17
date	2016.06.18.01.25.53;	author renato;	state Exp;
branches;
next	1.16;
commitid	ru2TxJdOjUpe8t8d;

1.16
date	2016.05.23.19.11.42;	author renato;	state Exp;
branches;
next	1.15;
commitid	AQBoOveMRKjtVfFv;

1.15
date	2016.05.23.19.09.25;	author renato;	state Exp;
branches;
next	1.14;
commitid	t07H0Mk6WGdVWB0W;

1.14
date	2016.05.23.18.58.48;	author renato;	state Exp;
branches;
next	1.13;
commitid	D7VvXbswyzx5Ahb2;

1.13
date	2016.05.23.18.55.21;	author renato;	state Exp;
branches;
next	1.12;
commitid	85kONxXVWUqI2Jhb;

1.12
date	2016.05.23.18.36.55;	author renato;	state Exp;
branches;
next	1.11;
commitid	Ba6Sgjw90tNqVKLo;

1.11
date	2016.05.23.18.33.56;	author renato;	state Exp;
branches;
next	1.10;
commitid	YK3Z5X8iSxlfPhoT;

1.10
date	2016.05.23.18.31.12;	author renato;	state Exp;
branches;
next	1.9;
commitid	nHUSXWKa1vdMbRgF;

1.9
date	2016.05.23.17.43.42;	author renato;	state Exp;
branches;
next	1.8;
commitid	VpAym8dVR6eY4drQ;

1.8
date	2016.05.23.16.54.22;	author renato;	state Exp;
branches;
next	1.7;
commitid	LfWxXXNhiR6poNUS;

1.7
date	2016.05.23.16.37.42;	author renato;	state Exp;
branches;
next	1.6;
commitid	qJtTdb5IuvrEX2lR;

1.6
date	2016.05.23.16.35.37;	author renato;	state Exp;
branches;
next	1.5;
commitid	kBkfn3IA7pHWJlRN;

1.5
date	2016.05.23.16.33.32;	author renato;	state Exp;
branches;
next	1.4;
commitid	mFupE64RyIWQWfMY;

1.4
date	2016.05.23.16.20.59;	author renato;	state Exp;
branches;
next	1.3;
commitid	nAtgYzDo97D7UnEI;

1.3
date	2016.05.23.16.14.36;	author renato;	state Exp;
branches;
next	1.2;
commitid	hNzA87VdOHsaOms9;

1.2
date	2016.05.23.15.47.24;	author renato;	state Exp;
branches;
next	1.1;
commitid	Eng7dm0NElMq9Yi3;

1.1
date	2015.07.21.04.52.29;	author renato;	state Exp;
branches;
next	;
commitid	puLLDX1XPNc3GxB9;


desc
@@


1.24
log
@Send VPLS MAC withdrawals.

RFC 4762 says that MAC address withdrawal messages can be used to
improve convergence time in VPLS networks. This patch makes ldpd send
MAC withdrawals whenever a non-pseudowire interface pertaining to a
VPLS goes down. The processing of received MAC withdrawals will be
implemented later.
@
text
@/*	$OpenBSD: l2vpn.c,v 1.23 2017/03/04 00:12:25 renato Exp $ */

/*
 * Copyright (c) 2015 Renato Westphal <renato@@openbsd.org>
 * Copyright (c) 2009 Michele Marchetto <michele@@openbsd.org>
 * Copyright (c) 2005 Claudio Jeker <claudio@@openbsd.org>
 * Copyright (c) 2004, 2005, 2008 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

#include "ldpd.h"
#include "ldpe.h"
#include "lde.h"
#include "log.h"

static void	 l2vpn_pw_fec(struct l2vpn_pw *, struct fec *);

struct l2vpn *
l2vpn_new(const char *name)
{
	struct l2vpn	*l2vpn;

	if ((l2vpn = calloc(1, sizeof(*l2vpn))) == NULL)
		fatal("l2vpn_new: calloc");

	strlcpy(l2vpn->name, name, sizeof(l2vpn->name));

	/* set default values */
	l2vpn->mtu = DEFAULT_L2VPN_MTU;
	l2vpn->pw_type = DEFAULT_PW_TYPE;

	LIST_INIT(&l2vpn->if_list);
	LIST_INIT(&l2vpn->pw_list);

	return (l2vpn);
}

struct l2vpn *
l2vpn_find(struct ldpd_conf *xconf, const char *name)
{
	struct l2vpn	*l2vpn;

	LIST_FOREACH(l2vpn, &xconf->l2vpn_list, entry)
		if (strcmp(l2vpn->name, name) == 0)
			return (l2vpn);

	return (NULL);
}

void
l2vpn_del(struct l2vpn *l2vpn)
{
	struct l2vpn_if		*lif;
	struct l2vpn_pw		*pw;

	while ((lif = LIST_FIRST(&l2vpn->if_list)) != NULL) {
		LIST_REMOVE(lif, entry);
		free(lif);
	}
	while ((pw = LIST_FIRST(&l2vpn->pw_list)) != NULL) {
		LIST_REMOVE(pw, entry);
		free(pw);
	}

	free(l2vpn);
}

void
l2vpn_init(struct l2vpn *l2vpn)
{
	struct l2vpn_pw	*pw;

	LIST_FOREACH(pw, &l2vpn->pw_list, entry)
		l2vpn_pw_init(pw);
}

void
l2vpn_exit(struct l2vpn *l2vpn)
{
	struct l2vpn_pw		*pw;

	LIST_FOREACH(pw, &l2vpn->pw_list, entry)
		l2vpn_pw_exit(pw);
}

struct l2vpn_if *
l2vpn_if_new(struct l2vpn *l2vpn, struct kif *kif)
{
	struct l2vpn_if	*lif;

	if ((lif = calloc(1, sizeof(*lif))) == NULL)
		fatal("l2vpn_if_new: calloc");

	lif->l2vpn = l2vpn;
	strlcpy(lif->ifname, kif->ifname, sizeof(lif->ifname));
	lif->ifindex = kif->ifindex;
	lif->flags = kif->flags;
	lif->linkstate = kif->link_state;

	return (lif);
}

struct l2vpn_if *
l2vpn_if_find(struct l2vpn *l2vpn, unsigned int ifindex)
{
	struct l2vpn_if	*lif;

	LIST_FOREACH(lif, &l2vpn->if_list, entry)
		if (lif->ifindex == ifindex)
			return (lif);

	return (NULL);
}

void
l2vpn_if_update(struct l2vpn_if *lif)
{
	struct l2vpn	*l2vpn = lif->l2vpn;
	struct l2vpn_pw	*pw;
	struct map	 fec;
	struct nbr	*nbr;

	if ((lif->flags & IFF_UP) && LINK_STATE_IS_UP(lif->linkstate))
		return;

	LIST_FOREACH(pw, &l2vpn->pw_list, entry) {
		nbr = nbr_find_ldpid(pw->lsr_id.s_addr);
		if (nbr == NULL)
			continue;

		memset(&fec, 0, sizeof(fec));
		fec.type = MAP_TYPE_PWID;
		fec.fec.pwid.type = l2vpn->pw_type;
		fec.fec.pwid.group_id = 0;
		fec.flags |= F_MAP_PW_ID;
		fec.fec.pwid.pwid = pw->pwid;

		send_mac_withdrawal(nbr, &fec, lif->mac);
	}
}

struct l2vpn_pw *
l2vpn_pw_new(struct l2vpn *l2vpn, struct kif *kif)
{
	struct l2vpn_pw	*pw;

	if ((pw = calloc(1, sizeof(*pw))) == NULL)
		fatal("l2vpn_pw_new: calloc");

	pw->l2vpn = l2vpn;
	strlcpy(pw->ifname, kif->ifname, sizeof(pw->ifname));
	pw->ifindex = kif->ifindex;

	return (pw);
}

struct l2vpn_pw *
l2vpn_pw_find(struct l2vpn *l2vpn, unsigned int ifindex)
{
	struct l2vpn_pw	*pw;

	LIST_FOREACH(pw, &l2vpn->pw_list, entry)
		if (pw->ifindex == ifindex)
			return (pw);

	return (NULL);
}

void
l2vpn_pw_init(struct l2vpn_pw *pw)
{
	struct fec	 fec;

	l2vpn_pw_reset(pw);

	l2vpn_pw_fec(pw, &fec);
	lde_kernel_insert(&fec, AF_INET, (union ldpd_addr*)&pw->lsr_id, 0,
	    0, (void *)pw);
}

void
l2vpn_pw_exit(struct l2vpn_pw *pw)
{
	struct fec	 fec;

	l2vpn_pw_fec(pw, &fec);
	lde_kernel_remove(&fec, AF_INET, (union ldpd_addr*)&pw->lsr_id, 0);
}

static void
l2vpn_pw_fec(struct l2vpn_pw *pw, struct fec *fec)
{
	memset(fec, 0, sizeof(*fec));
	fec->type = FEC_TYPE_PWID;
	fec->u.pwid.type = pw->l2vpn->pw_type;
	fec->u.pwid.pwid = pw->pwid;
	fec->u.pwid.lsr_id = pw->lsr_id;
}

void
l2vpn_pw_reset(struct l2vpn_pw *pw)
{
	pw->remote_group = 0;
	pw->remote_mtu = 0;
	pw->remote_status = 0;

	if (pw->flags & F_PW_CWORD_CONF)
		pw->flags |= F_PW_CWORD;
	else
		pw->flags &= ~F_PW_CWORD;

	if (pw->flags & F_PW_STATUSTLV_CONF)
		pw->flags |= F_PW_STATUSTLV;
	else
		pw->flags &= ~F_PW_STATUSTLV;
}

int
l2vpn_pw_ok(struct l2vpn_pw *pw, struct fec_nh *fnh)
{
	struct fec		 fec;
	struct fec_node		*fn;

	/* check for a remote label */
	if (fnh->remote_label == NO_LABEL)
		return (0);

	/* MTUs must match */
	if (pw->l2vpn->mtu != pw->remote_mtu)
		return (0);

	/* check pw status if applicable */
	if ((pw->flags & F_PW_STATUSTLV) &&
	    pw->remote_status != PW_FORWARDING)
		return (0);

	/* check for a working lsp to the nexthop */
	memset(&fec, 0, sizeof(fec));
	switch (pw->af) {
	case AF_INET:
		fec.type = FEC_TYPE_IPV4;
		fec.u.ipv4.prefix = pw->addr.v4;
		fec.u.ipv4.prefixlen = 32;
		break;
	case AF_INET6:
		fec.type = FEC_TYPE_IPV6;
		fec.u.ipv6.prefix = pw->addr.v6;
		fec.u.ipv6.prefixlen = 128;
		break;
	default:
		fatalx("l2vpn_pw_ok: unknown af");
	}

	fn = (struct fec_node *)fec_find(&ft, &fec);
	if (fn == NULL || fn->local_label == NO_LABEL)
		return (0);
	/*
	 * Need to ensure that there's a label binding for all nexthops.
	 * Otherwise, ECMP for this route could render the pseudowire unusable.
	 */
	LIST_FOREACH(fnh, &fn->nexthops, entry)
		if (fnh->remote_label == NO_LABEL)
			return (0);

	return (1);
}

int
l2vpn_pw_negotiate(struct lde_nbr *ln, struct fec_node *fn, struct map *map)
{
	struct l2vpn_pw		*pw;
	struct status_tlv	 st;

	/* NOTE: thanks martini & friends for all this mess */

	pw = (struct l2vpn_pw *) fn->data;
	if (pw == NULL)
		/*
		 * pseudowire not configured, return and record
		 * the mapping later
		 */
		return (0);

	/* RFC4447 - Section 6.2: control word negotiation */
	if (fec_find(&ln->sent_map, &fn->fec)) {
		if ((map->flags & F_MAP_PW_CWORD) &&
		    !(pw->flags & F_PW_CWORD_CONF)) {
			/* ignore the received label mapping */
			return (1);
		} else if (!(map->flags & F_MAP_PW_CWORD) &&
		    (pw->flags & F_PW_CWORD_CONF)) {
			/* append a "Wrong C-bit" status code */
			st.status_code = S_WRONG_CBIT;
			st.msg_id = map->msg_id;
			st.msg_type = htons(MSG_TYPE_LABELMAPPING);
			lde_send_labelwithdraw(ln, fn, NULL, &st);

			pw->flags &= ~F_PW_CWORD;
			lde_send_labelmapping(ln, fn, 1);
		}
	} else if (map->flags & F_MAP_PW_CWORD) {
		if (pw->flags & F_PW_CWORD_CONF)
			pw->flags |= F_PW_CWORD;
		else
			/* act as if no label mapping had been received */
			return (1);
	} else
		pw->flags &= ~F_PW_CWORD;

	/* RFC4447 - Section 5.4.3: pseudowire status negotiation */
	if (fec_find(&ln->recv_map, &fn->fec) == NULL &&
	    !(map->flags & F_MAP_PW_STATUS))
		pw->flags &= ~F_PW_STATUSTLV;

	return (0);
}

void
l2vpn_send_pw_status(struct lde_nbr *ln, uint32_t status, struct fec *fec)
{
	struct notify_msg	 nm;

	memset(&nm, 0, sizeof(nm));
	nm.status_code = S_PW_STATUS;
	nm.pw_status = status;
	nm.flags |= F_NOTIF_PW_STATUS;
	lde_fec2map(fec, &nm.fec);
	nm.flags |= F_NOTIF_FEC;

	lde_imsg_compose_ldpe(IMSG_NOTIFICATION_SEND, ln->peerid, 0, &nm,
	    sizeof(nm));
}

void
l2vpn_send_pw_status_wcard(struct lde_nbr *ln, uint32_t status,
    uint16_t pw_type, uint32_t group_id)
{
	struct notify_msg	 nm;

	memset(&nm, 0, sizeof(nm));
	nm.status_code = S_PW_STATUS;
	nm.pw_status = status;
	nm.flags |= F_NOTIF_PW_STATUS;
	nm.fec.type = MAP_TYPE_PWID;
	nm.fec.fec.pwid.type = pw_type;
	nm.fec.fec.pwid.group_id = group_id;
	nm.flags |= F_NOTIF_FEC;

	lde_imsg_compose_ldpe(IMSG_NOTIFICATION_SEND, ln->peerid, 0, &nm,
	    sizeof(nm));
}

void
l2vpn_recv_pw_status(struct lde_nbr *ln, struct notify_msg *nm)
{
	struct fec		 fec;
	struct fec_node		*fn;
	struct fec_nh		*fnh;
	struct l2vpn_pw		*pw;

	if (nm->fec.type == MAP_TYPE_TYPED_WCARD ||
	    !(nm->fec.flags & F_MAP_PW_ID)) {
		l2vpn_recv_pw_status_wcard(ln, nm);
		return;
	}

	lde_map2fec(&nm->fec, ln->id, &fec);
	fn = (struct fec_node *)fec_find(&ft, &fec);
	if (fn == NULL)
		/* unknown fec */
		return;

	pw = (struct l2vpn_pw *) fn->data;
	if (pw == NULL)
		return;

	fnh = fec_nh_find(fn, AF_INET, (union ldpd_addr *)&ln->id, 0);
	if (fnh == NULL)
		return;

	/* remote status didn't change */
	if (pw->remote_status == nm->pw_status)
		return;
	pw->remote_status = nm->pw_status;

	if (l2vpn_pw_ok(pw, fnh))
		lde_send_change_klabel(fn, fnh);
	else
		lde_send_delete_klabel(fn, fnh);
}

/* RFC4447 PWid group wildcard */
void
l2vpn_recv_pw_status_wcard(struct lde_nbr *ln, struct notify_msg *nm)
{
	struct fec		*f;
	struct fec_node		*fn;
	struct fec_nh		*fnh;
	struct l2vpn_pw		*pw;
	struct map		*wcard = &nm->fec;

	RB_FOREACH(f, fec_tree, &ft) {
		fn = (struct fec_node *)f;
		if (fn->fec.type != FEC_TYPE_PWID)
			continue;

		pw = (struct l2vpn_pw *) fn->data;
		if (pw == NULL)
			continue;

		switch (wcard->type) {
		case MAP_TYPE_TYPED_WCARD:
			if (wcard->fec.twcard.u.pw_type != PW_TYPE_WILDCARD &&
			    wcard->fec.twcard.u.pw_type != fn->fec.u.pwid.type)
				continue;
			break;
		case MAP_TYPE_PWID:
			if (wcard->fec.pwid.type != fn->fec.u.pwid.type)
				continue;
			if (wcard->fec.pwid.group_id != pw->remote_group)
				continue;
			break;
		}

		fnh = fec_nh_find(fn, AF_INET, (union ldpd_addr *)&ln->id, 0);
		if (fnh == NULL)
			continue;

		/* remote status didn't change */
		if (pw->remote_status == nm->pw_status)
			continue;
		pw->remote_status = nm->pw_status;

		if (l2vpn_pw_ok(pw, fnh))
			lde_send_change_klabel(fn, fnh);
		else
			lde_send_delete_klabel(fn, fnh);
	}
}

void
l2vpn_sync_pws(int af, union ldpd_addr *addr)
{
	struct l2vpn		*l2vpn;
	struct l2vpn_pw		*pw;
	struct fec		 fec;
	struct fec_node		*fn;
	struct fec_nh		*fnh;

	LIST_FOREACH(l2vpn, &ldeconf->l2vpn_list, entry) {
		LIST_FOREACH(pw, &l2vpn->pw_list, entry) {
			if (af != pw->af || ldp_addrcmp(af, &pw->addr, addr))
				continue;

			l2vpn_pw_fec(pw, &fec);
			fn = (struct fec_node *)fec_find(&ft, &fec);
			if (fn == NULL)
				continue;
			fnh = fec_nh_find(fn, AF_INET, (union ldpd_addr *)
			    &pw->lsr_id, 0);
			if (fnh == NULL)
				continue;

			if (l2vpn_pw_ok(pw, fnh))
				lde_send_change_klabel(fn, fnh);
			else
				lde_send_delete_klabel(fn, fnh);
		}
	}
}

void
l2vpn_pw_ctl(pid_t pid)
{
	struct l2vpn		*l2vpn;
	struct l2vpn_pw		*pw;
	static struct ctl_pw	 pwctl;

	LIST_FOREACH(l2vpn, &ldeconf->l2vpn_list, entry)
		LIST_FOREACH(pw, &l2vpn->pw_list, entry) {
			memset(&pwctl, 0, sizeof(pwctl));
			strlcpy(pwctl.ifname, pw->ifname,
			    sizeof(pwctl.ifname));
			pwctl.pwid = pw->pwid;
			pwctl.lsr_id = pw->lsr_id;
			pwctl.status = pw->flags & F_PW_STATUS_UP;

			lde_imsg_compose_ldpe(IMSG_CTL_SHOW_L2VPN_PW, 0,
			    pid, &pwctl, sizeof(pwctl));
		}
}

void
l2vpn_binding_ctl(pid_t pid)
{
	struct fec		*f;
	struct fec_node		*fn;
	struct lde_map		*me;
	struct l2vpn_pw		*pw;
	static struct ctl_pw	 pwctl;

	RB_FOREACH(f, fec_tree, &ft) {
		if (f->type != FEC_TYPE_PWID)
			continue;

		fn = (struct fec_node *)f;
		if (fn->local_label == NO_LABEL &&
		    LIST_EMPTY(&fn->downstream))
			continue;

		memset(&pwctl, 0, sizeof(pwctl));
		pwctl.type = f->u.pwid.type;
		pwctl.pwid = f->u.pwid.pwid;
		pwctl.lsr_id = f->u.pwid.lsr_id;

		pw = (struct l2vpn_pw *) fn->data;
		if (pw) {
			pwctl.local_label = fn->local_label;
			pwctl.local_gid = 0;
			pwctl.local_ifmtu = pw->l2vpn->mtu;
		} else
			pwctl.local_label = NO_LABEL;

		LIST_FOREACH(me, &fn->downstream, entry)
			if (f->u.pwid.lsr_id.s_addr == me->nexthop->id.s_addr)
				break;

		if (me) {
			pwctl.remote_label = me->map.label;
			pwctl.remote_gid = me->map.fec.pwid.group_id;
			if (me->map.flags & F_MAP_PW_IFMTU)
				pwctl.remote_ifmtu = me->map.fec.pwid.ifmtu;

			lde_imsg_compose_ldpe(IMSG_CTL_SHOW_L2VPN_BINDING,
			    0, pid, &pwctl, sizeof(pwctl));
		} else if (pw) {
			pwctl.remote_label = NO_LABEL;

			lde_imsg_compose_ldpe(IMSG_CTL_SHOW_L2VPN_BINDING,
			    0, pid, &pwctl, sizeof(pwctl));
		}
	}
}

/* ldpe */

void
ldpe_l2vpn_init(struct l2vpn *l2vpn)
{
	struct l2vpn_pw		*pw;

	LIST_FOREACH(pw, &l2vpn->pw_list, entry)
		ldpe_l2vpn_pw_init(pw);
}

void
ldpe_l2vpn_exit(struct l2vpn *l2vpn)
{
	struct l2vpn_pw		*pw;

	LIST_FOREACH(pw, &l2vpn->pw_list, entry)
		ldpe_l2vpn_pw_exit(pw);
}

void
ldpe_l2vpn_pw_init(struct l2vpn_pw *pw)
{
	struct tnbr		*tnbr;

	tnbr = tnbr_find(leconf, pw->af, &pw->addr);
	if (tnbr == NULL) {
		tnbr = tnbr_new(leconf, pw->af, &pw->addr);
		tnbr_update(tnbr);
		LIST_INSERT_HEAD(&leconf->tnbr_list, tnbr, entry);
	}

	tnbr->pw_count++;
}

void
ldpe_l2vpn_pw_exit(struct l2vpn_pw *pw)
{
	struct tnbr		*tnbr;

	tnbr = tnbr_find(leconf, pw->af, &pw->addr);
	if (tnbr) {
		tnbr->pw_count--;
		tnbr_check(tnbr);
	}
}
@


1.23
log
@Implement RFC 6667 (Typed Wildcard FEC for PWid).
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.22 2017/03/04 00:03:04 renato Exp $ */
d114 1
a114 1
	lif->link_state = kif->link_state;
d129 27
@


1.22
log
@Implement support for PWid group wildcards.

This was missing from our original RFC 4447 VPLS implementation. Now
ldpd understands group wildcards as mandated by the RFC, but we still
don't send them ourselves. I can't see any case in which sending a group
wildcard would be useful, but nonetheless this patch provides a function
called lde_send_labelwithdraw_pwid_wcard() which is ready to be used in
the future anytime we feel like it might be useful.
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.21 2016/07/01 23:36:38 renato Exp $ */
d350 2
a351 1
	if (!(nm->fec.flags & F_MAP_PW_ID)) {
d389 1
a394 2
		if (fn->fec.u.pwid.type != nm->fec.fec.pwid.type)
			continue;
d399 14
a412 2
		if (pw->remote_group != nm->fec.fec.pwid.group_id)
			continue;
@


1.21
log
@More renaming and whitespace cleanup.

No binary change after "strip -s".
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.20 2016/07/01 23:33:46 renato Exp $ */
d285 1
a285 1
			lde_send_labelwithdraw(ln, fn, NO_LABEL, &st);
d308 1
a308 1
l2vpn_send_pw_status(uint32_t peerid, uint32_t status, struct fec *fec)
d319 21
a339 2
	lde_imsg_compose_ldpe(IMSG_NOTIFICATION_SEND, peerid, 0,
	    &nm, sizeof(nm));
d350 2
a351 2
	/* TODO group wildcard */
	if (!(nm->fec.flags & F_MAP_PW_ID))
d353 1
a371 1

d378 38
@


1.20
log
@Be more compliant with RFC 4447.

When sending a label withdraw during the pseudowire Control Word
negotiation, append a "Wrong C-bit" status TLV after the FEC TLV (in
conformance to RFC 4447 section 6.2). Apparently this has no use other
than aiding in troubleshooting.

Also, extend the recv_labelmessage() function to accept Status TLVs and
ignore them instead of shutting down the session.
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.19 2016/06/27 19:08:39 renato Exp $ */
d261 1
a261 1
	struct status_tlv	 status;
d282 4
a285 4
			status.status_code = S_WRONG_CBIT;
			status.msg_id = map->messageid;
			status.msg_type = htons(MSG_TYPE_LABELMAPPING);
			lde_send_labelwithdraw(ln, fn, NO_LABEL, &status);
d313 1
a313 2
	nm.status = S_PW_STATUS;

a315 1

@


1.19
log
@Remove superfluous call to l2vpn_pw_exit().
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.18 2016/06/18 17:13:05 renato Exp $ */
d261 1
d281 5
a285 2
			/* TODO append a "Wrong C-bit" status code */
			lde_send_labelwithdraw(ln, fn, NO_LABEL);
@


1.18
log
@Fix memory leak found with valgrind.
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.17 2016/06/18 01:25:53 renato Exp $ */
a76 1
		l2vpn_pw_exit(pw);
@


1.17
log
@Fix small LIB<->LFIB synchronization issue.

ldpd operates only with the best routes of each IP prefix. In other words,
the routes with the lowest priorities.

When a route with a better priority is detected (possibly with a different
nexthop), we should uninstall the labels from the "old" routes and try
to install a new label for the new route (if there's one available in
the LIB).

In this specific case, ldpd was failing to uninstall the labels from the
old routes because it wasn't keeping track of each route's priority in
lde. With this missing bit of information, the parent process had no way
to get the correct label to uninstall when processing a IMSG_KLABEL_DELETE
message.
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.16 2016/05/23 19:11:42 renato Exp $ */
d92 9
@


1.16
log
@Remove superfluous includes.
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.15 2016/05/23 19:09:25 renato Exp $ */
d158 1
a158 1
	lde_kernel_insert(&fec, AF_INET, (union ldpd_addr*)&pw->lsr_id,
d168 1
a168 1
	lde_kernel_remove(&fec, AF_INET, (union ldpd_addr*)&pw->lsr_id);
d335 1
a335 1
	fnh = fec_nh_find(fn, AF_INET, (union ldpd_addr *)&ln->id);
d370 1
a370 1
			    &pw->lsr_id);
@


1.15
log
@Make functions and variables static whenever possible.

The benefits of this include:
* clean up of the ldpd global namespace;
* improved readability;
* more hints to the compiler/linker to generate more efficient code.

Whenever possible, move global static variables to a smaller scope
(function).

All extern variables are now declared in header files to avoid unnecessary
duplication.

This patch also cleans up the indentation of all function prototypes
and global variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.14 2016/05/23 18:58:48 renato Exp $ */
a22 5
#include <sys/socket.h>
#include <arpa/inet.h>

#include <err.h>
#include <stdio.h>
d25 1
d28 1
a29 2
#include "ldpe.h"
#include "control.h"
@


1.14
log
@Add support for IPv6 (RFC 7552).

This includes:
* Full compliance to RFC 7552;
* Support for MD5 on LDPov6 sessions;
* Support for pseudowires over IPv6 LSPs (we're probably the world's
  first implementation doing this);
* Support for the IPv6 explicit-null label;
* Knob to specify the prefered address-family for TCP transport
  connections;
* Knob to use cisco non-compliant format to send and interpret the
  Dual-Stack capability TLV.
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.13 2016/05/23 18:55:21 renato Exp $ */
d37 1
a37 5
RB_PROTOTYPE(fec_tree, fec, entry, fec_compare)
extern struct fec_tree		 ft;

extern struct ldpd_conf		*ldeconf;
extern struct ldpd_conf		*leconf;
d176 1
a176 1
void
@


1.13
log
@Assorted fixes and small cleanup.

Nothing really interesting here.
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.12 2016/05/23 18:36:55 renato Exp $ */
d167 2
a168 1
	lde_kernel_insert(&fec, pw->lsr_id, 0, (void *)pw);
d177 1
a177 1
	lde_kernel_remove(&fec, pw->lsr_id);
d229 15
a243 3
	fec.type = FEC_TYPE_IPV4;
	fec.u.ipv4.prefix = pw->lsr_id;
	fec.u.ipv4.prefixlen = 32;
d344 1
a344 1
	fnh = fec_nh_find(fn, ln->id);
d361 1
a361 1
l2vpn_sync_pws(struct in_addr addr)
d371 1
a371 1
			if (pw->lsr_id.s_addr != addr.s_addr)
d378 2
a379 1
			fnh = fec_nh_find(fn, pw->lsr_id);
d489 1
a489 1
	tnbr = tnbr_find(leconf, pw->lsr_id);
d491 1
a491 1
		tnbr = tnbr_new(leconf, pw->lsr_id);
d504 1
a504 1
	tnbr = tnbr_find(leconf, pw->lsr_id);
@


1.12
log
@Don't create l2vpn targeted neighbors inside the config parser.

When removing a configured pseudowire, we remove the associated tnbr
in ldpe_l2vpn_pw_exit(). So, when a new pseudowire is configured, it
makes sense to create its tnbr in ldpe_l2vpn_pw_init() to keep things
consistent.
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.11 2016/05/23 18:33:56 renato Exp $ */
d358 15
a372 14
			if (pw->lsr_id.s_addr == addr.s_addr) {
				l2vpn_pw_fec(pw, &fec);
				fn = (struct fec_node *)fec_find(&ft, &fec);
				if (fn == NULL)
					continue;
				fnh = fec_nh_find(fn, pw->lsr_id);
				if (fnh == NULL)
					continue;

				if (l2vpn_pw_ok(pw, fnh))
					lde_send_change_klabel(fn, fnh);
				else
					lde_send_delete_klabel(fn, fnh);
			}
@


1.11
log
@Create network sockets on the parent process.

We drop our privileges in ldpe right after we create the network sockets.
The problem is that we might want to change the transport-address and
reload the config, in which case we need new sockets. To allow that,
always create the network sockets in the parent process and pass them
to ldpe via imsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.10 2016/05/23 18:31:12 renato Exp $ */
d86 1
d88 1
a88 1
		l2vpn_pw_del(pw);
d171 1
a171 1
l2vpn_pw_del(struct l2vpn_pw *pw)
a176 1
	free(pw);
d475 2
a476 1
	if (!event_initialized(&tnbr->hello_timer))
d478 4
@


1.10
log
@Fix bugs in pseudowire parameters negotiation.
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.9 2016/05/23 17:43:42 renato Exp $ */
d476 1
a476 1
		tnbr_init(tnbr);
@


1.9
log
@Fix mess caused by my commit script.

I screwed up everything... trying to fix now.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d163 2
d194 5
a198 1
	if (!(pw->flags & F_PW_CWORD_CONF))
d200 4
a203 1
	if (!(pw->flags & F_PW_STATUSTLV_CONF))
a258 2

	l2vpn_pw_reset(pw);
@


1.8
log
@Rework L2VPN code.
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.7 2016/05/23 16:37:42 renato Exp $ */
d180 1
a180 1
	bzero(fec, sizeof(*fec));
d218 1
a218 1
	bzero(&fec, sizeof(fec));
d256 1
a256 1
		    !(pw->flags & F_PW_CONTROLWORD_CONF)) {
d260 1
a260 1
		    (pw->flags & F_PW_CONTROLWORD_CONF)) {
d262 1
a262 1
			lde_send_labelwithdraw(ln, fn);
d264 1
a264 1
			pw->flags &= ~F_PW_CONTROLWORD;
d268 2
a269 2
		if (pw->flags & F_PW_CONTROLWORD_CONF)
			pw->flags |= F_PW_CONTROLWORD;
d274 1
a274 1
		pw->flags &= ~F_PW_CONTROLWORD;
d285 1
a285 1
l2vpn_send_pw_status(u_int32_t peerid, u_int32_t status, struct fec *fec)
d289 1
a289 1
	bzero(&nm, sizeof(nm));
d378 1
a378 1
			bzero(&pwctl, sizeof(pwctl));
d408 1
a408 7
		fnh = fec_nh_find(fn, f->u.pwid.nexthop);
		if (fnh != NULL)
			pw = (struct l2vpn_pw *) fnh->data;
		else
			pw = NULL;

		bzero(&pwctl, sizeof(pwctl));
d411 1
a411 1
		pwctl.nexthop = f->u.pwid.nexthop;
d413 1
d467 3
a469 3
	tnbr = tnbr_find(leconf, pw->addr);
	if (tnbr->discovery_fd == 0)
		tnbr_init(leconf, tnbr);
@


1.7
log
@Check for local label before trying to install pseudowire.

While here, add a comment about ECMP and pseudowires.
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.6 2016/05/23 16:35:37 renato Exp $ */
d164 1
a164 1
	lde_kernel_insert(&fec, pw->addr, 0, (void *)pw);
d173 1
a173 1
	lde_kernel_remove(&fec, pw->addr);
d184 1
a184 1
	fec->u.pwid.nexthop.s_addr = pw->addr.s_addr;
d220 1
a220 1
	fec.u.ipv4.prefix.s_addr = pw->addr.s_addr;
a238 1
	struct fec_nh		*fnh;
d243 2
a244 2
	fnh = fec_nh_find(fn, ln->id);
	if (fnh == NULL)
a249 1
	pw = (struct l2vpn_pw *) fnh->data;
d320 4
a326 1
	pw = (struct l2vpn_pw *) fnh->data;
d351 1
a351 1
			if (pw->addr.s_addr == addr.s_addr) {
d356 1
a356 1
				fnh = fec_nh_find(fn, pw->addr);
d382 1
a382 1
			pwctl.nexthop.s_addr = pw->addr.s_addr;
a395 1
	struct fec_nh		*fnh;
d427 1
a427 1
			if (f->u.pwid.nexthop.s_addr == me->nexthop->id.s_addr)
d482 1
a482 1
	tnbr = tnbr_find(leconf, pw->addr);
@


1.6
log
@Do not accept incomplete pseudowires in the configuration.

There's no point on keeping in the config something that can not be used,
it just adds unnecessary complexity. Also, it's better to warn the user
that there's something wrong rather than play nice and ignore the problem.
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.5 2016/05/23 16:33:32 renato Exp $ */
d223 1
a223 1
	if (fn == NULL)
d225 4
@


1.5
log
@Minor adjustments in l2vpn code.

* Define a new constant for the default pseudowire type;
* On l2vpn_new(), initialize the l2vpn lists with LIST_NEW (cosmetic
  because the struct was calloc'ed);
* Add a const qualifier to the second parameter of l2vpn_find();
* Remove l2vpn_if_del() and use just free() instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.4 2016/05/23 16:20:59 renato Exp $ */
a162 3
	if (pw->pwid == 0 || pw->addr.s_addr == INADDR_ANY)
		return;

a171 3
	if (pw->pwid == 0 || pw->addr.s_addr == INADDR_ANY)
		return;

a467 3
	if (pw->pwid == 0 || pw->addr.s_addr == INADDR_ANY)
		return;

a476 3

	if (pw->pwid == 0 || pw->addr.s_addr == INADDR_ANY)
		return;
@


1.4
log
@Standardize some log messages and fix some inconsistencies.

We were using several different names for the same thing in our log
messages: neighbor, neighbor ID, nbr ID and LSR ID.

Standardize to always use "lsr-id" to refer to a neighbor.

Also:
* Use log_warnx() instead of log_warn() when appropriate;
* Use fatal(x) instead of err(x) when appropriate;
* Fix some inconsistent log messages.
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.3 2016/05/23 16:14:36 renato Exp $ */
d55 4
a58 1
	l2vpn->pw_type = PW_TYPE_ETHERNET;
d64 1
a64 1
l2vpn_find(struct ldpd_conf *xconf, char *name)
d83 1
a83 1
		l2vpn_if_del(lif);
a128 6
}

void
l2vpn_if_del(struct l2vpn_if *lif)
{
	free(lif);
@


1.3
log
@More renaming.

Rename a few more things to improve readability.

* s/F_PW_CONTROLWORD_CONF/F_PW_CWORD_CONF/ (shorter)
* s/F_PW_CONTROLWORD/F_PW_CWORD/ (shorter)
* s/LDPD_FLAG_*/F_LDPD_*/ (consistency)
* s/lde_nbr_address/lde_addr/ (shorter)
* s/ldp_discovery_socket/ldp_disc_socket/ (shorter)
* s/ldp_ediscovery_socket/ldp_edisc_socket/ (shorter)
* s/ldp_sendboth/main_imsg_compose_both/ (consistency)
* s/cons/total/ (makes more sense)
* s/kaddr/ka/ (consistency with remaining code)
* Always use 'ln' for lde_nbrs (consistency)
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.2 2016/05/23 15:47:24 renato Exp $ */
d49 1
a49 1
		err(1, "l2vpn_new: calloc");
d105 1
a105 1
		err(1, "l2vpn_if_new: calloc");
d140 1
a140 1
		err(1, "l2vpn_pw_new: calloc");
@


1.2
log
@Move some code around.

This patch doesn't introduce any logical change.
@
text
@d1 1
a1 1
/*	$OpenBSD: l2vpn.c,v 1.1 2015/07/21 04:52:29 renato Exp $ */
d201 2
a202 2
	if (!(pw->flags & F_PW_CONTROLWORD_CONF))
		pw->flags &= ~F_PW_CONTROLWORD;
@


1.1
log
@VPLS signaling support.

This patch introduces full support for pseudowire signaling in ldpd(8),
including Control Word and Status TLV negotiation.

As of now it's not possible to configure a VPWS, but the signaling is
the same. In the future, when VPWS support is available in the kernel,
ldpd(8) can be extended to support VPWS with only a few modifications.

Limitations:
* No support for FEC 129, only FEC 128 (more widely deployed);
* No support for group withdraws (not widely deployed);
* No support for MAC withdraws (not widely deployed).

Related RFCs:
* RFC 3916: Requirements for Pseudo-Wire Emulation Edge-to-Edge (PWE3)
* RFC 3985: Pseudo Wire Emulation Edge-to-Edge (PWE3) Architecture
* RFC 4385: Pseudowire Emulation Edge-to-Edge (PWE3) Control Word for
  Use over an MPLS PSN
* RFC 4446: IANA Allocations for Pseudowire Edge to Edge Emulation (PWE3)
* RFC 4447: Pseudowire Setup and Maintenance Using the Label Distribution
  Protocol (LDP)
* RFC 4448: Encapsulation Methods for Transport of Ethernet over MPLS
  Networks
* RFC 4905: Encapsulation Methods for Transport of Layer 2 Frames over
  MPLS Networks
* RFC 4906: Transport of Layer 2 Frames Over MPLS

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d162 1
a162 1
l2vpn_pw_del(struct l2vpn_pw *pw)
d170 1
a170 2
	lde_kernel_remove(&fec, pw->addr);
	free(pw);
d174 1
a174 1
l2vpn_pw_init(struct l2vpn_pw *pw)
d182 2
a183 1
	lde_kernel_insert(&fec, pw->addr, 0, (void *)pw);
@

