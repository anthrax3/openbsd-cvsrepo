head	1.7;
access;
symbols
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2010.05.26.16.44.32;	author nicm;	state dead;
branches;
next	1.6;

1.6
date	2010.05.26.13.56.07;	author nicm;	state Exp;
branches;
next	1.5;

1.5
date	2010.04.27.21.04.04;	author nicm;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.15.10.54.59;	author jacekm;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.07.05.56.25;	author eric;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.06.22.11.25;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.06.08.09.43;	author pyr;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Move imsg into libutil and add a man page.

Minor bump for libutil.

Previous versions of this diff and man page looked at by various people.

"you should just commit" deraadt
@
text
@/*	$OpenBSD: imsg.h,v 1.6 2010/05/26 13:56:07 nicm Exp $	*/

/*
 * Copyright (c) 2006, 2007 Pierre-Yves Ritschard <pyr@@openbsd.org>
 * Copyright (c) 2006, 2007, 2008 Reyk Floeter <reyk@@openbsd.org>
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define IBUF_READ_SIZE		65535
#define IMSG_HEADER_SIZE	sizeof(struct imsg_hdr)
#define MAX_IMSGSIZE		16384

struct ibuf {
	TAILQ_ENTRY(ibuf)	 entry;
	u_char			*buf;
	size_t			 size;
	size_t			 max;
	size_t			 wpos;
	size_t			 rpos;
	int			 fd;
};

struct msgbuf {
	TAILQ_HEAD(, ibuf)	 bufs;
	u_int32_t		 queued;
	int			 fd;
};

struct ibuf_read {
	u_char			 buf[IBUF_READ_SIZE];
	u_char			*rptr;
	size_t			 wpos;
};

struct imsg_fd {
	TAILQ_ENTRY(imsg_fd)	entry;
	int			fd;
};

struct imsgbuf {
	TAILQ_HEAD(, imsg_fd)	 fds;
	struct ibuf_read	 r;
	struct msgbuf		 w;
	int			 fd;
	pid_t			 pid;
};

#define IMSGF_HASFD	1

struct imsg_hdr {
	u_int32_t	 type;
	u_int16_t	 len;
	u_int16_t	 flags;
	u_int32_t	 peerid;
	u_int32_t	 pid;
};

struct imsg {
	struct imsg_hdr	 hdr;
	int		 fd;
	void		*data;
};


/* buffer.c */
struct ibuf	*ibuf_open(size_t);
struct ibuf	*ibuf_dynamic(size_t, size_t);
int		 ibuf_add(struct ibuf *, const void *, size_t);
void		*ibuf_reserve(struct ibuf *, size_t);
void		*ibuf_seek(struct ibuf *, size_t, size_t);
size_t		 ibuf_size(struct ibuf *);
size_t		 ibuf_left(struct ibuf *);
void		 ibuf_close(struct msgbuf *, struct ibuf *);
int		 ibuf_write(struct msgbuf *);
void		 ibuf_free(struct ibuf *);
void		 msgbuf_init(struct msgbuf *);
void		 msgbuf_clear(struct msgbuf *);
int		 msgbuf_write(struct msgbuf *);
void		 msgbuf_drain(struct msgbuf *, size_t);

/* imsg.c */
void	 imsg_init(struct imsgbuf *, int);
ssize_t	 imsg_read(struct imsgbuf *);
ssize_t	 imsg_get(struct imsgbuf *, struct imsg *);
int	 imsg_compose(struct imsgbuf *, u_int32_t, u_int32_t, pid_t,
	    int, void *, u_int16_t);
int	 imsg_composev(struct imsgbuf *, u_int32_t, u_int32_t,  pid_t,
	    int, const struct iovec *, int);
struct ibuf *imsg_create(struct imsgbuf *, u_int32_t, u_int32_t, pid_t,
	    u_int16_t);
int	 imsg_add(struct ibuf *, void *, u_int16_t);
void	 imsg_close(struct imsgbuf *, struct ibuf *);
void	 imsg_free(struct imsg *);
int	 imsg_flush(struct imsgbuf *);
void	 imsg_clear(struct imsgbuf *);
@


1.6
log
@Rename some imsg bits to make namespace collisions less likely buf to
ibuf, buf_read to ibuf_read, READ_BUF_SIZE to IBUF_READ_SIZE.

ok henning gilles claudio jacekm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.h,v 1.5 2010/04/27 21:04:04 nicm Exp $	*/
@


1.5
log
@imsg.h does not need sys/tree.h.

ok eric
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.h,v 1.2 2009/09/15 18:12:51 jacekm Exp $	*/
d21 1
a21 1
#define READ_BUF_SIZE		65535
d25 2
a26 2
struct buf {
	TAILQ_ENTRY(buf)	 entry;
d36 1
a36 1
	TAILQ_HEAD(, buf)	 bufs;
d41 2
a42 2
struct buf_read {
	u_char			 buf[READ_BUF_SIZE];
d54 1
a54 1
	struct buf_read		 r;
d78 10
a87 10
struct buf	*buf_open(size_t);
struct buf	*buf_dynamic(size_t, size_t);
int		 buf_add(struct buf *, const void *, size_t);
void		*buf_reserve(struct buf *, size_t);
void		*buf_seek(struct buf *, size_t, size_t);
size_t		 buf_size(struct buf *);
size_t		 buf_left(struct buf *);
void		 buf_close(struct msgbuf *, struct buf *);
int		 buf_write(struct msgbuf *);
void		 buf_free(struct buf *);
d101 1
a101 1
struct buf *imsg_create(struct imsgbuf *, u_int32_t, u_int32_t, pid_t,
d103 2
a104 2
int	 imsg_add(struct buf *, void *, u_int16_t);
void	 imsg_close(struct imsgbuf *, struct buf *);
@


1.4
log
@Enclose repeated buffer draining code in a new msgbuf_drain()
function, which is additionally exported for use by others.

It will be needed by smtpd's SSL module when the SMTP client code
is changed to replace libevent's evbuffers with our msgbuf_* API.

ok gilles@@ henning@@ guenther@@ eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.h,v 1.3 2009/06/07 05:56:24 eric Exp $	*/
a19 2

#include <sys/tree.h>
@


1.3
log
@Change the way fds passed over a socket are retreived on the receiving side.

Currently the receiver fetches an imsg via imsg_get() and if he expects
an fd, he then calls imsg_get_fd() to fetch the next fd queued on the
imsgbuf from which the imsg came.

This changes hides the fd queueing mechanism to the API user.  When closing
an imsg with an fd, the message is flagged so that the receiving end knows
it must dequeue the fd in imsg_get() and return it with the imsg structure.
This way there is no (less) possible screw up from imsg_get_fd() not being
called directly after imsg_get() by the user. The retreived imsg is
self-contained.

ok pyr@@, "I like that" henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.h,v 1.11 2009/06/06 22:11:25 eric Exp $	*/
d93 1
@


1.2
log
@change the imsg header fields a bit to prepare for upcoming changes.
add a flag field, use u_int32_t for pid_t and extend type to 32 bits
for padding.

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.h,v 1.10 2009/06/05 23:44:14 eric Exp $	*/
d62 2
d74 1
a106 1
int	 imsg_get_fd(struct imsgbuf *);
@


1.1
log
@make ldpd imsg-in-a-lib ready too.
@
text
@d63 1
a63 1
	u_int16_t	 type;
d65 1
d67 1
a67 1
	pid_t		 pid;
d95 1
a95 1
int	 imsg_compose(struct imsgbuf *, u_int16_t, u_int32_t, pid_t,
d97 1
a97 1
int	 imsg_composev(struct imsgbuf *, u_int16_t, u_int32_t,  pid_t,
d99 1
a99 1
struct buf *imsg_create(struct imsgbuf *, u_int16_t, u_int32_t, pid_t,
@

