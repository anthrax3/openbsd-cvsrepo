head	1.26;
access;
symbols
	OPENBSD_6_2:1.26.0.8
	OPENBSD_6_2_BASE:1.26
	OPENBSD_6_1:1.26.0.6
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.26.0.2
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.26
date	2016.06.18.17.31.32;	author renato;	state Exp;
branches;
next	1.25;
commitid	Ou0pUplgSHSojMsH;

1.25
date	2016.06.18.17.11.37;	author renato;	state Exp;
branches;
next	1.24;
commitid	2c6p4fHYsfwnJH9e;

1.24
date	2016.06.13.20.13.34;	author renato;	state Exp;
branches;
next	1.23;
commitid	PXA9uYNvrI5vhKkE;

1.23
date	2016.06.09.17.26.32;	author renato;	state Exp;
branches;
next	1.22;
commitid	iKrQLOonXcGPkDwb;

1.22
date	2016.05.23.19.14.03;	author renato;	state Exp;
branches;
next	1.21;
commitid	TLlfi1Pk0Z97z8HM;

1.21
date	2016.05.23.19.11.42;	author renato;	state Exp;
branches;
next	1.20;
commitid	AQBoOveMRKjtVfFv;

1.20
date	2016.05.23.19.09.25;	author renato;	state Exp;
branches;
next	1.19;
commitid	t07H0Mk6WGdVWB0W;

1.19
date	2016.05.23.18.58.48;	author renato;	state Exp;
branches;
next	1.18;
commitid	D7VvXbswyzx5Ahb2;

1.18
date	2016.05.23.18.55.21;	author renato;	state Exp;
branches;
next	1.17;
commitid	85kONxXVWUqI2Jhb;

1.17
date	2016.05.23.18.41.59;	author renato;	state Exp;
branches;
next	1.16;
commitid	zjb4P8L4wSROotP5;

1.16
date	2016.05.23.18.33.56;	author renato;	state Exp;
branches;
next	1.15;
commitid	YK3Z5X8iSxlfPhoT;

1.15
date	2016.05.23.18.28.22;	author renato;	state Exp;
branches;
next	1.14;
commitid	FV8IR5RMrg1EHRis;

1.14
date	2016.05.23.17.43.42;	author renato;	state Exp;
branches;
next	1.13;
commitid	VpAym8dVR6eY4drQ;

1.13
date	2016.05.23.16.31.27;	author renato;	state Exp;
branches;
next	1.12;
commitid	c72xshgOyJT70vM6;

1.12
date	2016.05.23.16.27.16;	author renato;	state Exp;
branches;
next	1.11;
commitid	cGXVHKZkPMEKUfRM;

1.11
date	2016.05.23.16.20.59;	author renato;	state Exp;
branches;
next	1.10;
commitid	nAtgYzDo97D7UnEI;

1.10
date	2016.05.23.15.57.50;	author renato;	state Exp;
branches;
next	1.9;
commitid	412vkTYh5W4EltoT;

1.9
date	2016.05.23.15.47.24;	author renato;	state Exp;
branches;
next	1.8;
commitid	Eng7dm0NElMq9Yi3;

1.8
date	2016.05.23.15.14.07;	author renato;	state Exp;
branches;
next	1.7;
commitid	l3e6PhvoAh8C7elc;

1.7
date	2015.07.21.04.52.29;	author renato;	state Exp;
branches;
next	1.6;
commitid	puLLDX1XPNc3GxB9;

1.6
date	2015.07.21.04.43.28;	author renato;	state Exp;
branches;
next	1.5;
commitid	QaTrdqMa9i0CUoyW;

1.5
date	2015.07.21.04.40.56;	author renato;	state Exp;
branches;
next	1.4;
commitid	aaU19t2dCdAdF6ZH;

1.4
date	2015.04.04.15.09.47;	author renato;	state Exp;
branches;
next	1.3;
commitid	LIJMvAJU0aJtE45t;

1.3
date	2013.10.15.20.21.24;	author renato;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.15.20.13.47;	author renato;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.04.13.16.21;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Fix removal of dual-stack neighbors.
@
text
@/*	$OpenBSD: adjacency.c,v 1.25 2016/06/18 17:11:37 renato Exp $ */

/*
 * Copyright (c) 2013, 2015 Renato Westphal <renato@@openbsd.org>
 * Copyright (c) 2009 Michele Marchetto <michele@@openbsd.org>
 * Copyright (c) 2005 Claudio Jeker <claudio@@openbsd.org>
 * Copyright (c) 2004, 2005, 2008 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <string.h>

#include "ldpd.h"
#include "ldpe.h"
#include "log.h"

static void	 adj_del_single(struct adj *);
static void	 adj_itimer(int, short, void *);
static void	 tnbr_del(struct tnbr *);
static void	 tnbr_hello_timer(int, short, void *);
static void	 tnbr_start_hello_timer(struct tnbr *);
static void	 tnbr_stop_hello_timer(struct tnbr *);

struct adj *
adj_new(struct in_addr lsr_id, struct hello_source *source,
    union ldpd_addr *addr)
{
	struct adj	*adj;

	log_debug("%s: lsr-id %s, %s", __func__, inet_ntoa(lsr_id),
	    log_hello_src(source));

	if ((adj = calloc(1, sizeof(*adj))) == NULL)
		fatal(__func__);

	adj->lsr_id = lsr_id;
	adj->nbr = NULL;
	adj->source = *source;
	adj->trans_addr = *addr;

	evtimer_set(&adj->inactivity_timer, adj_itimer, adj);

	LIST_INSERT_HEAD(&global.adj_list, adj, global_entry);

	switch (source->type) {
	case HELLO_LINK:
		LIST_INSERT_HEAD(&source->link.ia->adj_list, adj, ia_entry);
		break;
	case HELLO_TARGETED:
		source->target->adj = adj;
		break;
	}

	return (adj);
}

static void
adj_del_single(struct adj *adj)
{
	log_debug("%s: lsr-id %s, %s (%s)", __func__, inet_ntoa(adj->lsr_id),
	    log_hello_src(&adj->source), af_name(adj_get_af(adj)));

	adj_stop_itimer(adj);

	LIST_REMOVE(adj, global_entry);
	if (adj->nbr)
		LIST_REMOVE(adj, nbr_entry);
	switch (adj->source.type) {
	case HELLO_LINK:
		LIST_REMOVE(adj, ia_entry);
		break;
	case HELLO_TARGETED:
		adj->source.target->adj = NULL;
		break;
	}

	free(adj);
}

void
adj_del(struct adj *adj, uint32_t notif_status)
{
	struct nbr	*nbr = adj->nbr;
	struct adj	*atmp;

	adj_del_single(adj);

	/*
	 * If the neighbor still exists but none of its remaining
	 * adjacencies (if any) are from the preferred address-family,
	 * then delete it.
	 */
	if (nbr && nbr_adj_count(nbr, nbr->af) == 0) {
		LIST_FOREACH_SAFE(adj, &nbr->adj_list, nbr_entry, atmp)
			adj_del_single(adj);
		session_shutdown(nbr, notif_status, 0, 0);
		nbr_del(nbr);
	}
}

struct adj *
adj_find(struct hello_source *source)
{
	struct adj *adj;

	LIST_FOREACH(adj, &global.adj_list, global_entry) {
		if (adj->source.type != source->type)
			continue;

		switch (source->type) {
		case HELLO_LINK:
			if (ldp_addrcmp(source->link.ia->af,
			    &adj->source.link.src_addr,
			    &source->link.src_addr) == 0)
				return (adj);
			break;
		case HELLO_TARGETED:
			if (adj->source.target == source->target)
				return (adj);
			break;
		}
	}

	return (NULL);
}

int
adj_get_af(struct adj *adj)
{
	switch (adj->source.type) {
	case HELLO_LINK:
		return (adj->source.link.ia->af);
	case HELLO_TARGETED:
		return (adj->source.target->af);
	default:
		fatalx("adj_get_af: unknown hello type");
	}
}

/* adjacency timers */

/* ARGSUSED */
static void
adj_itimer(int fd, short event, void *arg)
{
	struct adj *adj = arg;

	log_debug("%s: lsr-id %s", __func__, inet_ntoa(adj->lsr_id));

	if (adj->source.type == HELLO_TARGETED) {
		if (!(adj->source.target->flags & F_TNBR_CONFIGURED) &&
		    adj->source.target->pw_count == 0) {
			/* remove dynamic targeted neighbor */
			tnbr_del(adj->source.target);
			return;
		}
		adj->source.target->adj = NULL;
	}

	adj_del(adj, S_HOLDTIME_EXP);
}

void
adj_start_itimer(struct adj *adj)
{
	struct timeval	tv;

	timerclear(&tv);
	tv.tv_sec = adj->holdtime;
	if (evtimer_add(&adj->inactivity_timer, &tv) == -1)
		fatal(__func__);
}

void
adj_stop_itimer(struct adj *adj)
{
	if (evtimer_pending(&adj->inactivity_timer, NULL) &&
	    evtimer_del(&adj->inactivity_timer) == -1)
		fatal(__func__);
}

/* targeted neighbors */

struct tnbr *
tnbr_new(struct ldpd_conf *xconf, int af, union ldpd_addr *addr)
{
	struct tnbr		*tnbr;

	if ((tnbr = calloc(1, sizeof(*tnbr))) == NULL)
		fatal(__func__);

	tnbr->af = af;
	tnbr->addr = *addr;
	tnbr->state = TNBR_STA_DOWN;
	tnbr->hello_holdtime = (ldp_af_conf_get(xconf, af))->thello_holdtime;
	tnbr->hello_interval = (ldp_af_conf_get(xconf, af))->thello_interval;

	return (tnbr);
}

static void
tnbr_del(struct tnbr *tnbr)
{
	tnbr_stop_hello_timer(tnbr);
	if (tnbr->adj)
		adj_del(tnbr->adj, S_SHUTDOWN);
	LIST_REMOVE(tnbr, entry);
	free(tnbr);
}

struct tnbr *
tnbr_find(struct ldpd_conf *xconf, int af, union ldpd_addr *addr)
{
	struct tnbr *tnbr;

	LIST_FOREACH(tnbr, &xconf->tnbr_list, entry)
		if (af == tnbr->af &&
		    ldp_addrcmp(af, addr, &tnbr->addr) == 0)
			return (tnbr);

	return (NULL);
}

struct tnbr *
tnbr_check(struct tnbr *tnbr)
{
	if (!(tnbr->flags & (F_TNBR_CONFIGURED|F_TNBR_DYNAMIC)) &&
	    tnbr->pw_count == 0) {
		tnbr_del(tnbr);
		return (NULL);
	}

	return (tnbr);
}

void
tnbr_update(struct tnbr *tnbr)
{
	int			 socket_ok, rtr_id_ok;

	if ((ldp_af_global_get(&global, tnbr->af))->ldp_edisc_socket != -1)
		socket_ok = 1;
	else
		socket_ok = 0;

	if (leconf->rtr_id.s_addr != INADDR_ANY)
		rtr_id_ok = 1;
	else
		rtr_id_ok = 0;

	if (tnbr->state == TNBR_STA_DOWN) {
		if (!socket_ok || !rtr_id_ok)
			return;

		tnbr->state = TNBR_STA_ACTIVE;
		send_hello(HELLO_TARGETED, NULL, tnbr);

		evtimer_set(&tnbr->hello_timer, tnbr_hello_timer, tnbr);
		tnbr_start_hello_timer(tnbr);
	} else if (tnbr->state == TNBR_STA_ACTIVE) {
		if (socket_ok && rtr_id_ok)
			return;

		tnbr->state = TNBR_STA_DOWN;
		tnbr_stop_hello_timer(tnbr);
	}
}

void
tnbr_update_all(int af)
{
	struct tnbr		*tnbr;

	/* update targeted neighbors */
	LIST_FOREACH(tnbr, &leconf->tnbr_list, entry)
		if (tnbr->af == af || af == AF_UNSPEC)
			tnbr_update(tnbr);
}

/* target neighbors timers */

/* ARGSUSED */
static void
tnbr_hello_timer(int fd, short event, void *arg)
{
	struct tnbr	*tnbr = arg;

	send_hello(HELLO_TARGETED, NULL, tnbr);
	tnbr_start_hello_timer(tnbr);
}

static void
tnbr_start_hello_timer(struct tnbr *tnbr)
{
	struct timeval	 tv;

	timerclear(&tv);
	tv.tv_sec = tnbr->hello_interval;
	if (evtimer_add(&tnbr->hello_timer, &tv) == -1)
		fatal(__func__);
}

static void
tnbr_stop_hello_timer(struct tnbr *tnbr)
{
	if (evtimer_pending(&tnbr->hello_timer, NULL) &&
	    evtimer_del(&tnbr->hello_timer) == -1)
		fatal(__func__);
}

struct ctl_adj *
adj_to_ctl(struct adj *adj)
{
	static struct ctl_adj	 actl;

	actl.af = adj_get_af(adj);
	actl.id = adj->lsr_id;
	actl.type = adj->source.type;
	switch (adj->source.type) {
	case HELLO_LINK:
		memcpy(actl.ifname, adj->source.link.ia->iface->name,
		    sizeof(actl.ifname));
		break;
	case HELLO_TARGETED:
		actl.src_addr = adj->source.target->addr;
		break;
	}
	actl.holdtime = adj->holdtime;
	actl.trans_addr = adj->trans_addr;

	return (&actl);
}
@


1.25
log
@Fix use after free bug.
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.24 2016/06/13 20:13:34 renato Exp $ */
d31 1
d71 2
a72 2
void
adj_del(struct adj *adj, int send_notif, uint32_t notif_status)
d74 2
a75 5
	struct nbr	*nbr = adj->nbr;
	struct adj	*atmp;

	log_debug("%s: lsr-id %s, %s", __func__, inet_ntoa(adj->lsr_id),
	    log_hello_src(&adj->source));
d92 7
d100 1
a100 7
	/* last adjacency deleted */
	if (nbr && LIST_EMPTY(&nbr->adj_list)) {
		if (send_notif)
			session_shutdown(nbr, notif_status, 0, 0);
		nbr_del(nbr);
		nbr = NULL;
	}
d103 3
a105 2
	 * If the neighbor still exists but none of its remaining adjacencies
	 * are from the preferred address-family, then delete it.
d109 3
a111 1
			adj_del(adj, 0, 0);
d174 1
a174 1
	adj_del(adj, 1, S_HOLDTIME_EXP);
d220 1
a220 1
		adj_del(tnbr->adj, 1, S_SHUTDOWN);
@


1.24
log
@Rework the handling of Hello packets.

With the introduction of IPv6 support by RFC 7552, the handling of Hello
packets in ldpd became something incredibly complex. Neighbors can change
from single-stack LDP to dual-stack and vice-versa. They can change
their transport preference, their transport addresses (IPv4 and IPv6)
and even start or stop sending the Dual-Stack TLV. We also have to take
care to reject things like multiple adjacencies advertising different
transport-addresses for the same neighbor. ldpd was failing for some of
the cases mentioned above, this patch fixes these issues and attempts
to make the code easier to read.
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.23 2016/06/09 17:26:32 renato Exp $ */
d84 2
a85 1
	if (adj->source.type == HELLO_LINK)
d87 6
@


1.23
log
@Send a fatal notification when the last hello adjacency is deleted.

RFC 5036 says:
  "When the last Hello adjacency for an LDP session is
  deleted, the LSR terminates the LDP session by sending a Notification
  message and closing the transport connection".

Send a "Hold Timer Expired" notification when the triggering event is
a hello hold time timeout. In the other cases, like disabling LDP on an
interface, send a "Shutdown" notification instead.

Before this patch we were just closing the neighbor's transport
connection.

Fixes the following ANVL LDP tests: 7.17 and 23.3.
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.22 2016/05/23 19:14:03 renato Exp $ */
d73 3
d86 1
d89 1
a89 1
	if (adj->nbr && LIST_EMPTY(&adj->nbr->adj_list)) {
d91 3
a93 2
			session_shutdown(adj->nbr, notif_status, 0, 0);
		nbr_del(adj->nbr);
d96 8
a103 1
	free(adj);
@


1.22
log
@Update copyright information.
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.21 2016/05/23 19:11:42 renato Exp $ */
d71 1
a71 1
adj_del(struct adj *adj)
d85 3
a87 1
	if (adj->nbr && LIST_EMPTY(&adj->nbr->adj_list))
d89 1
d153 1
a153 1
	adj_del(adj);
d199 1
a199 1
		adj_del(tnbr->adj);
@


1.21
log
@Remove superfluous includes.
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.20 2016/05/23 19:09:25 renato Exp $ */
d4 1
@


1.20
log
@Make functions and variables static whenever possible.

The benefits of this include:
* clean up of the ldpd global namespace;
* improved readability;
* more hints to the compiler/linker to generate more efficient code.

Whenever possible, move global static variables to a smaller scope
(function).

All extern variables are now declared in header files to avoid unnecessary
duplication.

This patch also cleans up the indentation of all function prototypes
and global variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.19 2016/05/23 18:58:48 renato Exp $ */
a21 1
#include <sys/socket.h>
a22 2

#include <stdio.h>
a27 1
#include "control.h"
@


1.19
log
@Add support for IPv6 (RFC 7552).

This includes:
* Full compliance to RFC 7552;
* Support for MD5 on LDPov6 sessions;
* Support for pseudowires over IPv6 LSPs (we're probably the world's
  first implementation doing this);
* Support for the IPv6 explicit-null label;
* Knob to specify the prefered address-family for TCP transport
  connections;
* Knob to use cisco non-compliant format to send and interpret the
  Dual-Stack capability TLV.
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.18 2016/05/23 18:55:21 renato Exp $ */
d34 5
a38 6
extern struct ldpd_conf        *leconf;

void	 adj_itimer(int, short, void *);
void	 tnbr_hello_timer(int, short, void *);
void	 tnbr_start_hello_timer(struct tnbr *);
void	 tnbr_stop_hello_timer(struct tnbr *);
d136 1
a136 1
void
d194 1
a194 1
void
d276 1
a276 1
void
d285 1
a285 1
void
d296 1
a296 1
void
@


1.18
log
@Assorted fixes and small cleanup.

Nothing really interesting here.
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.17 2016/05/23 18:41:59 renato Exp $ */
d42 2
a43 1
adj_new(struct nbr *nbr, struct hello_source *source, struct in_addr addr)
d47 1
a47 1
	log_debug("%s: lsr-id %s, %s", __func__, inet_ntoa(nbr->id),
d53 2
a54 1
	adj->nbr = nbr;
d56 1
a56 1
	adj->addr = addr;
d60 1
a60 1
	LIST_INSERT_HEAD(&nbr->adj_list, adj, nbr_entry);
d64 1
a64 2
		LIST_INSERT_HEAD(&source->link.iface->adj_list, adj,
		    iface_entry);
d77 1
a77 1
	log_debug("%s: lsr-id %s, %s", __func__, inet_ntoa(adj->nbr->id),
d82 3
a84 1
	LIST_REMOVE(adj, nbr_entry);
d86 1
a86 1
		LIST_REMOVE(adj, iface_entry);
d89 1
a89 1
	if (LIST_EMPTY(&adj->nbr->adj_list))
d96 1
a96 1
adj_find(struct nbr *nbr, struct hello_source *source)
d100 1
a100 1
	LIST_FOREACH(adj, &nbr->adj_list, nbr_entry) {
d106 3
a108 2
			if (adj->source.link.src_addr.s_addr ==
			    source->link.src_addr.s_addr)
d121 13
d142 1
a142 1
	log_debug("%s: lsr-id %s", __func__, inet_ntoa(adj->nbr->id));
d179 1
a179 1
tnbr_new(struct ldpd_conf *xconf, struct in_addr addr)
d186 2
a187 1
	tnbr->addr = addr;
d189 2
a190 2
	tnbr->hello_holdtime = xconf->thello_holdtime;
	tnbr->hello_interval = xconf->thello_interval;
d206 1
a206 1
tnbr_find(struct ldpd_conf *xconf, struct in_addr addr)
d211 2
a212 1
		if (addr.s_addr == tnbr->addr.s_addr)
d235 1
a235 1
	if (global.ldp_edisc_socket != -1)
d264 1
a264 1
tnbr_update_all(void)
d270 2
a271 1
		tnbr_update(tnbr);
d310 2
a311 1
	actl.id = adj->nbr->id;
d315 1
a315 1
		memcpy(actl.ifname, adj->source.link.iface->name,
d323 1
@


1.17
log
@Enable changing the router-id via config reload.

Now ldpd can start without a router-id, since it can be set later. Since
a router-id of 0.0.0.0 is invalid, interfaces and targeted-neighbors
will check for a valid router-id in order to be activated.

When the router-id is changed, all the neighborships are reset.
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.16 2016/05/23 18:33:56 renato Exp $ */
a36 1

a146 1

@


1.16
log
@Create network sockets on the parent process.

We drop our privileges in ldpe right after we create the network sockets.
The problem is that we might want to change the transport-address and
reload the config, in which case we need new sockets. To allow that,
always create the network sockets in the parent process and pass them
to ldpe via imsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.15 2016/05/23 18:28:22 renato Exp $ */
d216 1
a216 1
	int			 socket_ok;
d223 5
d229 1
a229 1
		if (!socket_ok)
d238 1
a238 1
		if (socket_ok)
@


1.15
log
@Copy structs by assignment instead of memcpy.

Copying by straight assignment is shorter, easier to read and has a
higher level of abstraction. We'll only avoid it when copying from an
unaligned source (e.g., network buffers).

In addition, copy in_addr structs directly.
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.14 2016/05/23 17:43:42 renato Exp $ */
d172 1
d214 1
a214 1
tnbr_init(struct tnbr *tnbr)
d216 1
a216 2
	/* set event handlers for targeted neighbor */
	evtimer_set(&tnbr->hello_timer, tnbr_hello_timer, tnbr);
d218 31
a248 2
	send_hello(HELLO_TARGETED, NULL, tnbr);
	tnbr_start_hello_timer(tnbr);
@


1.14
log
@Fix mess caused by my commit script.

I screwed up everything... trying to fix now.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d54 1
a54 1
	memcpy(&adj->source, source, sizeof(*source));
d171 1
a171 1
	tnbr->addr.s_addr = addr.s_addr;
d258 1
a258 1
	actl.id.s_addr = adj->nbr->id.s_addr;
d266 1
a266 1
		actl.src_addr.s_addr = adj->source.target->addr.s_addr;
@


1.13
log
@Remove unnecessary mirroring of sockets.
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.12 2016/05/23 16:27:16 renato Exp $ */
d213 1
a213 1
tnbr_init(struct ldpd_conf *xconf, struct tnbr *tnbr)
d218 1
a218 1
	tnbr->discovery_fd = xconf->ldp_ediscovery_socket;
a229 1
	tnbr->discovery_fd = global.ldp_edisc_socket;
@


1.12
log
@Simplify removal of targeted neighbors and adjacencies.

Unlink these structures inside their own delete function rather than from
the outside.
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.11 2016/05/23 16:20:59 renato Exp $ */
d230 1
@


1.11
log
@Standardize some log messages and fix some inconsistencies.

We were using several different names for the same thing in our log
messages: neighbor, neighbor ID, nbr ID and LSR ID.

Standardize to always use "lsr-id" to refer to a neighbor.

Also:
* Use log_warnx() instead of log_warn() when appropriate;
* Use fatal(x) instead of err(x) when appropriate;
* Fix some inconsistent log messages.
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.10 2016/05/23 15:57:50 renato Exp $ */
d83 2
d128 1
a128 5
	switch (adj->source.type) {
	case HELLO_LINK:
		LIST_REMOVE(adj, iface_entry);
		break;
	case HELLO_TARGETED:
a131 1
			LIST_REMOVE(adj->source.target, entry);
a135 1
		break;
d184 1
a204 1
		LIST_REMOVE(tnbr, entry);
@


1.10
log
@Remove duplicated code in timer functions.
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.9 2016/05/23 15:47:24 renato Exp $ */
d47 1
a47 1
	log_debug("%s: LSR ID %s, %s", __func__, inet_ntoa(nbr->id),
d77 1
a77 1
	log_debug("%s: LSR ID %s, %s", __func__, inet_ntoa(adj->nbr->id),
d124 1
a124 1
	log_debug("%s: LDP ID %s", __func__, inet_ntoa(adj->nbr->id));
@


1.9
log
@Move some code around.

This patch doesn't introduce any logical change.
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.8 2016/05/23 15:14:07 renato Exp $ */
d232 1
a232 2
	struct tnbr *tnbr = arg;
	struct timeval tv;
d235 1
a235 6

	/* reschedule hello_timer */
	timerclear(&tv);
	tv.tv_sec = tnbr->hello_interval;
	if (evtimer_add(&tnbr->hello_timer, &tv) == -1)
		fatal(__func__);
d241 1
a241 3
	struct timeval tv;

	send_hello(HELLO_TARGETED, NULL, tnbr);
@


1.8
log
@Replace manually written function names with __func__.
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.7 2015/07/21 04:52:29 renato Exp $ */
a36 1
char	*print_hello_src(struct hello_source *);
d48 1
a48 1
	    print_hello_src(source));
d78 1
a78 1
	    print_hello_src(&adj->source));
a115 19
char *
print_hello_src(struct hello_source *src)
{
	static char buffer[64];

	switch (src->type) {
	case HELLO_LINK:
		snprintf(buffer, sizeof(buffer), "iface %s",
		    src->link.iface->name);
		break;
	case HELLO_TARGETED:
		snprintf(buffer, sizeof(buffer), "source %s",
		    inet_ntoa(src->target->addr));
		break;
	}

	return (buffer);
}

d192 12
a225 12
struct tnbr *
tnbr_find(struct ldpd_conf *xconf, struct in_addr addr)
{
	struct tnbr *tnbr;

	LIST_FOREACH(tnbr, &xconf->tnbr_list, entry)
		if (addr.s_addr == tnbr->addr.s_addr)
			return (tnbr);

	return (NULL);
}

a283 27
}

void
ldpe_adj_ctl(struct ctl_conn *c)
{
	struct adj	*adj;
	struct iface	*iface;
	struct tnbr	*tnbr;
	struct ctl_adj	*actl;

	/* basic discovery mechanism */
	LIST_FOREACH(iface, &leconf->iface_list, entry)
		LIST_FOREACH(adj, &iface->adj_list, iface_entry) {
			actl = adj_to_ctl(adj);
			imsg_compose_event(&c->iev, IMSG_CTL_SHOW_DISCOVERY,
			    0, 0, -1, actl, sizeof(struct ctl_adj));
		}

	/* extended discovery mechanism */
	LIST_FOREACH(tnbr, &leconf->tnbr_list, entry)
		if (tnbr->adj) {
			actl = adj_to_ctl(tnbr->adj);
			imsg_compose_event(&c->iev, IMSG_CTL_SHOW_DISCOVERY,
			    0, 0, -1, actl, sizeof(struct ctl_adj));
		}

	imsg_compose_event(&c->iev, IMSG_CTL_END, 0, 0, -1, NULL, 0);
@


1.7
log
@VPLS signaling support.

This patch introduces full support for pseudowire signaling in ldpd(8),
including Control Word and Status TLV negotiation.

As of now it's not possible to configure a VPWS, but the signaling is
the same. In the future, when VPWS support is available in the kernel,
ldpd(8) can be extended to support VPWS with only a few modifications.

Limitations:
* No support for FEC 129, only FEC 128 (more widely deployed);
* No support for group withdraws (not widely deployed);
* No support for MAC withdraws (not widely deployed).

Related RFCs:
* RFC 3916: Requirements for Pseudo-Wire Emulation Edge-to-Edge (PWE3)
* RFC 3985: Pseudo Wire Emulation Edge-to-Edge (PWE3) Architecture
* RFC 4385: Pseudowire Emulation Edge-to-Edge (PWE3) Control Word for
  Use over an MPLS PSN
* RFC 4446: IANA Allocations for Pseudowire Edge to Edge Emulation (PWE3)
* RFC 4447: Pseudowire Setup and Maintenance Using the Label Distribution
  Protocol (LDP)
* RFC 4448: Encapsulation Methods for Transport of Ethernet over MPLS
  Networks
* RFC 4905: Encapsulation Methods for Transport of Layer 2 Frames over
  MPLS Networks
* RFC 4906: Transport of Layer 2 Frames Over MPLS

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.6 2015/07/21 04:43:28 renato Exp $ */
d48 1
a48 1
	log_debug("adj_new: LSR ID %s, %s", inet_ntoa(nbr->id),
d52 1
a52 1
		fatal("adj_new");
d78 1
a78 1
	log_debug("adj_del: LSR ID %s, %s", inet_ntoa(adj->nbr->id),
d144 1
a144 1
	log_debug("adj_itimer: LDP ID %s", inet_ntoa(adj->nbr->id));
d174 1
a174 1
		fatal("adj_start_itimer");
d182 1
a182 1
		fatal("adj_stop_itimer");
d193 1
a193 1
		fatal("tnbr_new");
d261 1
a261 1
		fatal("tnbr_hello_timer");
d274 1
a274 1
		fatal("tnbr_start_hello_timer");
d282 1
a282 1
		fatal("tnbr_stop_hello_timer");
@


1.6
log
@Add configuration reload support.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.5 2015/07/21 04:40:56 renato Exp $ */
d151 2
a152 1
		if (!(adj->source.target->flags & F_TNBR_CONFIGURED)) {
d214 2
a215 1
	if (!(tnbr->flags & (F_TNBR_CONFIGURED|F_TNBR_DYNAMIC))) {
@


1.5
log
@Assorted fixes and code cleanup for targeted neighbors.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.4 2015/04/04 15:09:47 renato Exp $ */
d233 1
a233 1
tnbr_find(struct in_addr addr)
d237 1
a237 1
	LIST_FOREACH(tnbr, &leconf->tnbr_list, entry)
@


1.4
log
@Remove unused parameter from adj_new().

The adjacency holdtime is set in recv_hello().

OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.3 2013/10/15 20:21:24 renato Exp $ */
a150 1
		adj->source.target->adj = NULL;
d152 1
d155 1
d157 1
d187 1
a187 1
tnbr_new(struct ldpd_conf *xconf, struct in_addr addr, int configured)
d195 2
a196 6
	if (configured)
		tnbr->flags |= F_TNBR_CONFIGURED;
	else {
		tnbr->hello_holdtime = xconf->thello_holdtime;
		tnbr->hello_interval = xconf->thello_interval;
	}
d208 12
@


1.3
log
@Fix whitespace and other style issues.
OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.2 2013/10/15 20:13:47 renato Exp $ */
d44 1
a44 2
adj_new(struct nbr *nbr, struct hello_source *source, u_int16_t holdtime,
    struct in_addr addr)
@


1.2
log
@Since a targeted neighbor can be created both by configuration and
on runtime, the ldpd_conf structure used should be passed as an
argument to avoid segfaults.
@
text
@d1 1
a1 1
/*	$OpenBSD: adjacency.c,v 1.1 2013/06/04 13:16:21 claudio Exp $ */
d80 1
a80 1
		print_hello_src(&adj->source));
d123 2
a124 1
	if (src->type == HELLO_LINK)
d127 2
a128 1
	else
d131 2
d134 1
a134 1
	return buffer;
@


1.1
log
@I screwed up and forgot to commit this new file :(
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d182 1
a182 1
tnbr_new(struct in_addr addr, int configured)
d193 2
a194 2
		tnbr->hello_holdtime = leconf->thello_holdtime;
		tnbr->hello_interval = leconf->thello_interval;
@

