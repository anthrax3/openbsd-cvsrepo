head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.4
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.8
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.4
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.20
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.18
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.14
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.12
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.10
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.8
	OPENBSD_5_0:1.11.0.6
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.4
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.10.0.6
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.8
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.4
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.6.0.2
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5;
locks; strict;
comment	@ * @;


1.13
date	2016.12.23.14.53.16;	author jca;	state Exp;
branches;
next	1.12;
commitid	cJhNb0pP1YdfAvXH;

1.12
date	2014.10.25.03.23.49;	author lteo;	state Exp;
branches;
next	1.11;
commitid	2uw1UTO4k6erpWzK;

1.11
date	2010.05.26.13.56.08;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2008.03.24.16.11.05;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2008.03.15.16.24.58;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2008.03.13.01.49.53;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2007.10.24.20.52.50;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.27.20.19.04;	author michele;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.23.21.10.10;	author michele;	state Exp;
branches;
next	1.4;

1.4
date	2006.10.31.23.43.11;	author michele;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.24.16.37.48;	author david;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.19.12.29.58;	author mcbride;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.16.11.58;	author norby;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Support p2p links where endpoints aren't in the same subnet.

Diff from Piotr Durlej, similar diff from chris@@, ok mpi@@
@
text
@/*	$OpenBSD: packet.c,v 1.12 2014/10/25 03:23:49 lteo Exp $ */

/*
 * Copyright (c) 2006 Michele Marchetto <mydecay@@openbeer.it>
 * Copyright (c) 2004, 2005 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/uio.h>

#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/udp.h>
#include <arpa/inet.h>

#include <net/if_dl.h>

#include <errno.h>
#include <event.h>
#include <stdlib.h>
#include <string.h>

#include "ripd.h"
#include "rip.h"
#include "log.h"
#include "ripe.h"

int		 rip_hdr_sanity_check(struct rip_hdr *);
struct iface	*find_iface(struct ripd_conf *, unsigned int, struct in_addr);

int
gen_rip_hdr(struct ibuf *buf, u_int8_t command)
{
	struct rip_hdr	rip_hdr;

	bzero(&rip_hdr, sizeof(rip_hdr));
	rip_hdr.version = RIP_VERSION;
	rip_hdr.command = command;

	return (ibuf_add(buf, &rip_hdr, sizeof(rip_hdr)));
}

/* send and receive packets */
int
send_packet(struct iface *iface, void *pkt, size_t len, struct sockaddr_in *dst)
{
	/* set outgoing interface for multicast traffic */
	if (IN_MULTICAST(ntohl(dst->sin_addr.s_addr)))
		if (if_set_mcast(iface) == -1) {
			log_warn("send_packet: error setting multicast "
			    "interface, %s", iface->name);
			return (-1);
		}

	if (sendto(iface->fd, pkt, len, 0,
	    (struct sockaddr *)dst, sizeof(*dst)) == -1) {
		log_warn("send_packet: error sending packet on interface %s",
		    iface->name);
		return (-1);
	}

	return (0);
}

void
recv_packet(int fd, short event, void *bula)
{
	union {
		struct cmsghdr hdr;
		char	buf[CMSG_SPACE(sizeof(struct sockaddr_dl))];
	} cmsgbuf;
	struct sockaddr_in	 src;
	struct iovec		 iov;
	struct msghdr		 msg;
	struct cmsghdr		*cmsg;
	struct sockaddr_dl	*dst = NULL;
	struct nbr_failed	*nbr_failed = NULL;
	struct ripd_conf	*xconf = bula;
	struct iface		*iface;
	struct rip_hdr		*rip_hdr;
	struct nbr		*nbr;
	u_int8_t		*buf;
	ssize_t			 r;
	u_int16_t		 len, srcport;
	u_int32_t		 auth_crypt_num = 0;

	if (event != EV_READ)
		return;

	/* setup buffer */
	buf = pkt_ptr;

	bzero(&msg, sizeof(msg));

	iov.iov_base = buf;
	iov.iov_len = IBUF_READ_SIZE;
	msg.msg_name = &src;
	msg.msg_namelen = sizeof(src);
	msg.msg_iov = &iov;
	msg.msg_iovlen = 1;
	msg.msg_control = &cmsgbuf.buf;
	msg.msg_controllen = sizeof(cmsgbuf.buf);

	if ((r = recvmsg(fd, &msg, 0)) == -1) {
		if (errno != EINTR && errno != EAGAIN)
			log_debug("recv_packet: read error: %s",
			    strerror(errno));
		return;
	}

	for (cmsg = CMSG_FIRSTHDR(&msg); cmsg != NULL;
	    cmsg = CMSG_NXTHDR(&msg, cmsg)) {
		if (cmsg->cmsg_level == IPPROTO_IP &&
		    cmsg->cmsg_type == IP_RECVIF) {
			dst = (struct sockaddr_dl *)CMSG_DATA(cmsg);
			break;
		}
	}

	if (dst == NULL)
		return;

	len = (u_int16_t)r;

	/* Check the packet is not from one of the local interfaces */
	LIST_FOREACH(iface, &xconf->iface_list, entry) {
		if (iface->addr.s_addr == src.sin_addr.s_addr)
			return;
	}

	/* find a matching interface */
	if ((iface = find_iface(xconf, dst->sdl_index, src.sin_addr)) == NULL) {
		log_debug("recv_packet: cannot find a matching interface");
		return;
	}

	srcport = ntohs(src.sin_port);

	/* RIP header sanity checks */
	if (len < RIP_HDR_LEN) {
		log_debug("recv_packet: bad packet size");
		return;
	}
	rip_hdr = (struct rip_hdr *)buf;

	if (rip_hdr_sanity_check(rip_hdr) == -1)
		return;

	nbr = nbr_find_ip(iface, src.sin_addr.s_addr);

	if (nbr == NULL && iface->auth_type == AUTH_CRYPT)
		nbr_failed = nbr_failed_find(iface, src.sin_addr.s_addr);

	/* switch RIP command */
	switch (rip_hdr->command) {
	case COMMAND_REQUEST:
		/* Requests don't create a real neighbor, just a temporary
		 * one to build the response.
		 */
		if ((msg.msg_flags & MSG_MCAST) == 0 && srcport == RIP_PORT)
			return;

		if (nbr == NULL) {
			nbr = nbr_new(src.sin_addr.s_addr, iface);
			nbr->addr = src.sin_addr;
		}
		nbr->port = srcport;
		nbr_fsm(nbr, NBR_EVT_REQUEST_RCVD);

		buf += RIP_HDR_LEN;
		len -= RIP_HDR_LEN;

		recv_request(iface, nbr, buf, len);
		break;
	case COMMAND_RESPONSE:
		if (srcport != RIP_PORT)
			return;

		if (auth_validate(&buf, &len, iface, nbr, nbr_failed,
		    &auth_crypt_num)) {
			log_warnx("recv_packet: authentication error, "
			    "interface %s", iface->name);
			return;
		}

		if (nbr == NULL) {
			nbr = nbr_new(src.sin_addr.s_addr, iface);
			if (nbr_failed != NULL)
				nbr_failed_delete(nbr_failed);
			nbr->addr = src.sin_addr;
		}
		nbr->auth_seq_num = auth_crypt_num;
		nbr_fsm(nbr, NBR_EVT_RESPONSE_RCVD);

		recv_response(iface, nbr, buf, len);
		break;
	default:
		log_debug("recv_packet: unknown RIP command, interface %s",
		    iface->name);
	}
}

int
rip_hdr_sanity_check(struct rip_hdr *rip_hdr)
{
	if (rip_hdr->version != RIP_VERSION) {
		log_debug("rip_hdr_sanity_check: invalid RIP version %d",
		    rip_hdr->version);
		return (-1);
	}

	return (0);
}

struct iface *
find_iface(struct ripd_conf *xconf, unsigned int ifindex, struct in_addr src)
{
	struct iface	*iface = NULL;

	/* returned interface needs to be active */
	LIST_FOREACH(iface, &xconf->iface_list, entry) {
		if (ifindex == 0 || ifindex != iface->ifindex)
			continue;

		if (iface->passive)
			continue;

		if ((iface->addr.s_addr & iface->mask.s_addr) ==
		    (src.s_addr & iface->mask.s_addr))
			return (iface);

		if (iface->dst.s_addr && iface->dst.s_addr == src.s_addr)
			return (iface);
	}

	return (NULL);
}
@


1.12
log
@Remove unnecessary netinet/in_systm.h include.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.11 2010/05/26 13:56:08 nicm Exp $ */
d235 11
a245 9
		if (ifindex != 0 && ifindex == iface->ifindex &&
		    !iface->passive && (iface->addr.s_addr &
		    iface->mask.s_addr) == (src.s_addr & iface->mask.s_addr))
			/*
			 * XXX may fail on P2P links because src and dst don't
			 * have to share a common subnet on the otherhand
			 * checking something like this will help to support
			 * multiple networks configured on one interface.
			 */
@


1.11
log
@Rename some imsg bits to make namespace collisions less likely buf to
ibuf, buf_read to ibuf_read, READ_BUF_SIZE to IBUF_READ_SIZE.

ok henning gilles claudio jacekm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.10 2008/03/24 16:11:05 deraadt Exp $ */
a24 1
#include <netinet/in_systm.h>
@


1.10
log
@msg_controllen has to be CMSG_SPACE so that the kernel can account for
each cmsg_len (ie. msg_controllen = sum of CMSG_ALIGN(cmsg_len).  This
works now that kernel fd passing has been fixed to accept a bit of
sloppiness because of this ABI repair.
lots of discussion with kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.9 2008/03/15 16:24:58 deraadt Exp $ */
d46 1
a46 1
gen_rip_hdr(struct buf *buf, u_int8_t command)
d54 1
a54 1
	return (buf_add(buf, &rip_hdr, sizeof(rip_hdr)));
d110 1
a110 1
	iov.iov_len = READ_BUF_SIZE;
@


1.9
log
@Repair more msg_controllen dealing with structures or arrays of
descriptors; ok hshoexer, also looked at by kettenis and henning
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.8 2008/03/13 01:49:53 deraadt Exp $ */
d116 1
a116 1
	msg.msg_controllen = CMSG_LEN(sizeof(struct sockaddr_dl));
@


1.8
log
@Correct CMSG_SPACE and CMSG_LEN usage everywhere in the tree. Due to
an extensive discussion with otto, kettenis, millert, and hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.7 2007/10/24 20:52:50 claudio Exp $ */
d116 1
a116 1
	msg.msg_controllen = sizeof(&cmsgbuf.buf);
@


1.7
log
@Make the packet buffer u_int8_t * everywhere. This is binary data and not
a string.
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.6 2007/03/27 20:19:04 michele Exp $ */
d82 4
a85 1
	char			 cbuf[CMSG_SPACE(sizeof(struct sockaddr_dl))];
d115 2
a116 2
	msg.msg_control = cbuf;
	msg.msg_controllen = sizeof(cbuf);
@


1.6
log
@Remove unused parameter in nbr_new
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.5 2007/01/23 21:10:10 michele Exp $ */
d93 1
a93 1
	char			*buf;
@


1.5
log
@add timeout for failed nbr structures

OK claudio@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.4 2006/10/31 23:43:11 michele Exp $ */
d175 1
a175 1
			nbr = nbr_new(src.sin_addr.s_addr, iface, 0);
d198 1
a198 1
			nbr = nbr_new(src.sin_addr.s_addr, iface, 0);
@


1.4
log
@create a temporary neighbor instead of a permanent one when a request is received
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.3 2006/10/24 16:37:48 david Exp $ */
d200 1
a200 1
				nbr_failed_delete(iface, nbr_failed);
@


1.3
log
@spelling and typo fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.2 2006/10/19 12:29:58 mcbride Exp $ */
d168 3
a173 4
		/* XXX: it would be better to not create a nbr on request
		 * because this could lead to DoS even on a authenticated
		 * environment.
		 */
a175 4
			if (nbr_failed != NULL) {
				nbr->auth_seq_num = nbr_failed->auth_seq_num;
				nbr_failed_delete(iface, nbr_failed);
			}
@


1.2
log
@Correct function name in log_debug() messages
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.1 2006/10/18 16:11:58 norby Exp $ */
d172 1
a172 1
		 * becouse this could lead to DoS even on a authenticated
d244 1
a244 1
			 * checking somthing like this will help to support
@


1.1
log
@Welcome ripd
started by Michele Marchetto some time ago by using the imsg/three process framework
of ospfd. He implemented most of the daemon with a little help and guidance from
Claudio and I.

Currently the daemon is more or less complete, with the exception of key lifetime
and rollover.

Not yet connected to the builds.
OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d223 1
a223 1
		log_debug("recv_packet: invalid RIP version %d",
@

