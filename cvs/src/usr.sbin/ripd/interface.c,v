head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.2
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.16
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.14
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.10
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.8
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.6
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.4
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.9.0.4
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.2.0.4
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.14
date	2017.01.17.16.30.54;	author jca;	state Exp;
branches;
next	1.13;
commitid	Ywz8bnXTyXEFkF5Y;

1.13
date	2015.09.27.17.32.36;	author stsp;	state Exp;
branches;
next	1.12;
commitid	i6S6VoG4dUqAlOvy;

1.12
date	2015.02.09.12.13.42;	author claudio;	state Exp;
branches;
next	1.11;
commitid	b41fu1pxXgU3PIfI;

1.11
date	2011.07.04.04.34.14;	author claudio;	state Exp;
branches;
next	1.10;

1.10
date	2011.06.21.17.31.07;	author mikeb;	state Exp;
branches;
next	1.9;

1.9
date	2010.07.03.04.44.52;	author guenther;	state Exp;
branches;
next	1.8;

1.8
date	2009.09.26.18.24.58;	author michele;	state Exp;
branches;
next	1.7;

1.7
date	2009.09.26.11.12.50;	author michele;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.17.14.19.39;	author michele;	state Exp;
branches;
next	1.5;

1.5
date	2007.10.24.19.50.33;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2007.10.18.17.00.59;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.11.18.05.36;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.28.19.21.15;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.16.11.58;	author norby;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Keep track of dead peers instead of freeing them right away.

This mimics what ospfd does, and avoids a (mostly harmless)
use-after-free.  Delay suggested by claudio@@, ok florian@@
@
text
@/*	$OpenBSD: interface.c,v 1.13 2015/09/27 17:32:36 stsp Exp $ */

/*
 * Copyright (c) 2006 Michele Marchetto <mydecay@@openbeer.it>
 * Copyright (c) 2005 Claudio Jeker <claudio@@openbsd.org>
 * Copyright (c) 2004, 2005 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <net/if.h>
#include <net/if_types.h>
#include <ctype.h>
#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <event.h>

#include "ripd.h"
#include "log.h"
#include "rip.h"
#include "rde.h"
#include "ripe.h"

extern struct ripd_conf	*conf;

int	 if_act_start(struct iface *);
int	 if_act_reset(struct iface *);

struct {
	int			state;
	enum iface_event	event;
	enum iface_action	action;
	int			new_state;
} iface_fsm[] = {
    /* current state	event that happened	action to take	resulting state */
    {IF_STA_DOWN,	IF_EVT_UP,		IF_ACT_STRT,	0},
    {IF_STA_ANY,	IF_EVT_DOWN,		IF_ACT_RST,	IF_STA_DOWN},
    {-1,		IF_EVT_NOTHING,		IF_ACT_NOTHING,	0},
};

const char * const if_action_names[] = {
	"NOTHING",
	"START",
	"RESET"
};

static const char * const if_event_names[] = {
	"NOTHING",
	"UP",
	"DOWN",
};

void
if_init(struct ripd_conf *xconf, struct iface *iface)
{
	struct ifreq	ifr;
	u_int		rdomain;

	/* XXX as in ospfd I would like to kill that. This is a design error */
	iface->fd = xconf->rip_socket;

	strlcpy(ifr.ifr_name, iface->name, sizeof(ifr.ifr_name));
	if (ioctl(iface->fd, SIOCGIFRDOMAIN, (caddr_t)&ifr) == -1)
		rdomain = 0;
	else {
		rdomain = ifr.ifr_rdomainid;
		if (setsockopt(iface->fd, SOL_SOCKET, SO_RTABLE, &rdomain,
		    sizeof(rdomain)) == -1)
			fatal("failed to set rdomain");
	}
	if (rdomain != xconf->rdomain)
		fatalx("interface rdomain mismatch");

	ripe_demote_iface(iface, 0);
}

int
if_fsm(struct iface *iface, enum iface_event event)
{
	int	 old_state;
	int	 new_state = 0;
	int	 i, ret = 0;

	old_state = iface->state;

	for (i = 0; iface_fsm[i].state != -1; i++)
		if ((iface_fsm[i].state & old_state) &&
		    (iface_fsm[i].event == event)) {
			new_state = iface_fsm[i].new_state;
			break;
		}

	if (iface_fsm[i].state == -1) {
		/* event outside of the defined fsm, ignore it. */
		log_debug("if_fsm: interface %s, "
		    "event '%s' not expected in state '%s'", iface->name,
		    if_event_name(event), if_state_name(old_state));
		return (0);
	}

	switch (iface_fsm[i].action) {
	case IF_ACT_STRT:
		ret = if_act_start(iface);
		break;
	case IF_ACT_RST:
		ret = if_act_reset(iface);
		break;
	case IF_ACT_NOTHING:
		/* do nothing */
		break;
	}

	if (ret) {
		log_debug("if_fsm: error changing state for interface %s, "
		    "event '%s', state '%s'", iface->name, if_event_name(event),
		    if_state_name(old_state));
		return (0);
	}

	if (new_state != 0)
		iface->state = new_state;

	if (old_state == IF_STA_ACTIVE && iface->state == IF_STA_DOWN)
		ripe_demote_iface(iface, 0);
	if (old_state & IF_STA_DOWN && iface->state == IF_STA_ACTIVE)
		ripe_demote_iface(iface, 1);

	log_debug("if_fsm: event '%s' resulted in action '%s' and changing "
	    "state for interface %s from '%s' to '%s'",
	    if_event_name(event), if_action_name(iface_fsm[i].action),
	    iface->name, if_state_name(old_state), if_state_name(iface->state));

	return (ret);
}

struct iface *
if_find_index(u_short ifindex)
{
	struct iface	 *iface;

	LIST_FOREACH(iface, &conf->iface_list, entry) {
		if (iface->ifindex == ifindex)
			return (iface);
	}

	return (NULL);
}


/* actions */
int
if_act_start(struct iface *iface)
{
	struct in_addr	 addr;
	struct timeval	 now;

	if (iface->passive) {
		log_debug("if_act_start: cannot start passive interface %s",
		    iface->name);
		return (0);
	}

	if (!((iface->flags & IFF_UP) &&
	    LINK_STATE_IS_UP(iface->linkstate))) {
		log_debug("if_act_start: interface %s link down",
		    iface->name);
		return (0);
	}

	gettimeofday(&now, NULL);
	iface->uptime = now.tv_sec;

	switch (iface->type) {
	case IF_TYPE_POINTOPOINT:
	case IF_TYPE_BROADCAST:
		inet_aton(ALL_RIP_ROUTERS, &addr);
		if (if_join_group(iface, &addr)) {
			log_warn("if_act_start: error joining group %s, "
			    "interface %s", inet_ntoa(addr), iface->name);
			return (-1);
		}

		iface->state = IF_STA_ACTIVE;
		break;
	default:
		fatalx("if_act_start: unknown interface type");
	}

	return (0);
}

int
if_act_reset(struct iface *iface)
{
	struct nbr		*nbr = NULL;
	struct in_addr		 addr;

	if (iface->passive)
		return (0);

	switch (iface->type) {
	case IF_TYPE_POINTOPOINT:
	case IF_TYPE_BROADCAST:
		inet_aton(ALL_RIP_ROUTERS, &addr);
		if (if_leave_group(iface, &addr)) {
		log_warn("if_act_reset: error leaving group %s, "
		    "interface %s", inet_ntoa(addr), iface->name);
		}
		break;
	default:
		fatalx("if_act_reset: unknown interface type");
	}

	LIST_FOREACH(nbr, &iface->nbr_list, entry) {
		if (nbr_fsm(nbr, NBR_EVT_KILL_NBR)) {
			log_debug("if_act_reset: error killing neighbor %s",
			    inet_ntoa(nbr->id));
		}
	}

	return (0);
}

const char *
if_event_name(int event)
{
	return (if_event_names[event]);
}

const char *
if_action_name(int action)
{
	return (if_action_names[action]);
}

/* misc */
int
if_set_mcast_ttl(int fd, u_int8_t ttl)
{
	if (setsockopt(fd, IPPROTO_IP, IP_MULTICAST_TTL,
	    (char *)&ttl, sizeof(ttl)) < 0) {
		log_warn("if_set_mcast_ttl: error setting "
		    "IP_MULTICAST_TTL to %d", ttl);
		return (-1);
	}

	return (0);
}

int
if_set_opt(int fd)
{
	int	 yes = 1;

	if (setsockopt(fd, IPPROTO_IP, IP_RECVIF, &yes,
	    sizeof(int)) < 0) {
		log_warn("if_set_opt: error setting IP_RECVIF");
		return (-1);
	}

	return (0);
}

int
if_set_tos(int fd, int tos)
{
	if (setsockopt(fd, IPPROTO_IP, IP_TOS,
	    (int *)&tos, sizeof(tos)) < 0) {
		log_warn("if_set_tos: error setting IP_TOS to 0x%x", tos);
		return (-1);
	}

	return (0);
}

int
if_set_mcast(struct iface *iface)
{
	switch (iface->type) {
	case IF_TYPE_POINTOPOINT:
	case IF_TYPE_BROADCAST:
		if (setsockopt(iface->fd, IPPROTO_IP, IP_MULTICAST_IF,
		    &iface->addr.s_addr, sizeof(iface->addr.s_addr)) < 0) {
			log_debug("if_set_mcast: error setting "
				"IP_MULTICAST_IF, interface %s", iface->name);
			return (-1);
		}
		break;
	default:
		fatalx("if_set_mcast: unknown interface type");
	}

	return (0);
}

int
if_set_mcast_loop(int fd)
{
	u_int8_t	 loop = 0;

	if (setsockopt(fd, IPPROTO_IP, IP_MULTICAST_LOOP,
	    (char *)&loop, sizeof(loop)) < 0) {
		log_warn("if_set_mcast_loop: error setting IP_MULTICAST_LOOP");
		return (-1);
	}

	return (0);
}

void
if_set_recvbuf(int fd)
{
	int	 bsize;

	bsize = 65535;
	while (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &bsize,
	    sizeof(bsize)) == -1)
		bsize /= 2;
}

int
if_join_group(struct iface *iface, struct in_addr *addr)
{
	struct ip_mreq	 mreq;

	switch (iface->type) {
	case IF_TYPE_POINTOPOINT:
	case IF_TYPE_BROADCAST:
		mreq.imr_multiaddr.s_addr = addr->s_addr;
		mreq.imr_interface.s_addr = iface->addr.s_addr;

		if (setsockopt(iface->fd, IPPROTO_IP, IP_ADD_MEMBERSHIP,
		    (void *)&mreq, sizeof(mreq)) < 0)
			return (-1);
		break;
	default:
		fatalx("if_join_group: unknown interface type");
	}

	return (0);
}

int
if_leave_group(struct iface *iface, struct in_addr *addr)
{
	struct ip_mreq	 mreq;

	switch (iface->type) {
	case IF_TYPE_POINTOPOINT:
	case IF_TYPE_BROADCAST:
		mreq.imr_multiaddr.s_addr = addr->s_addr;
		mreq.imr_interface.s_addr = iface->addr.s_addr;

		if (setsockopt(iface->fd, IPPROTO_IP, IP_DROP_MEMBERSHIP,
		    (void *)&mreq, sizeof(mreq)) < 0)
			return (-1);
		break;
	default:
		fatalx("if_leave_group: unknown interface type");
	}

	return (0);
}

struct iface *
if_new(struct kif *kif)
{
	struct sockaddr_in	*sain;
	struct iface		*iface;
	struct ifreq		*ifr;
	int			s;

	if ((iface = calloc(1, sizeof(*iface))) == NULL)
		err(1, "if_new: calloc");

	iface->state = IF_STA_DOWN;

	LIST_INIT(&iface->nbr_list);
	TAILQ_INIT(&iface->rp_list);
	TAILQ_INIT(&iface->rq_list);

	strlcpy(iface->name, kif->ifname, sizeof(iface->name));

	if ((ifr = calloc(1, sizeof(*ifr))) == NULL)
		err(1, "if_new: calloc");

	/* set up ifreq */
	strlcpy(ifr->ifr_name, kif->ifname, sizeof(ifr->ifr_name));
	if ((s = socket(AF_INET, SOCK_DGRAM | SOCK_CLOEXEC | SOCK_NONBLOCK,
	    0)) < 0)
		err(1, "if_new: socket");

	/* get type */
	if (kif->flags & IFF_POINTOPOINT)
		iface->type = IF_TYPE_POINTOPOINT;
	if (kif->flags & IFF_BROADCAST &&
	    kif->flags & IFF_MULTICAST)
		iface->type = IF_TYPE_BROADCAST;
	if (kif->flags & IFF_LOOPBACK) {
		iface->type = IF_TYPE_POINTOPOINT;
		/* XXX protect loopback from sending packets over lo? */
	}

	/* get mtu, index and flags */
	iface->mtu = kif->mtu;
	iface->ifindex = kif->ifindex;
	iface->flags = kif->flags;
	iface->linkstate = kif->link_state;
	iface->if_type = kif->if_type;
	iface->baudrate = kif->baudrate;

	/* get address */
	if (ioctl(s, SIOCGIFADDR, ifr) < 0)
		err(1, "if_new: cannot get address");
	sain = (struct sockaddr_in *)&ifr->ifr_addr;
	iface->addr = sain->sin_addr;

	/* get mask */
	if (ioctl(s, SIOCGIFNETMASK, ifr) < 0)
		err(1, "if_new: cannot get mask");
	sain = (struct sockaddr_in *)&ifr->ifr_addr;
	iface->mask = sain->sin_addr;

	/* get p2p dst address */
	if (kif->flags & IFF_POINTOPOINT) {
		if (ioctl(s, SIOCGIFDSTADDR, ifr) < 0)
			err(1, "if_new: cannot get dst addr");
		sain = (struct sockaddr_in *)&ifr->ifr_addr;
		iface->dst = sain->sin_addr;
	}

	free(ifr);
	close(s);

	return (iface);
}

void
if_del(struct iface *iface)
{
	struct nbr	*nbr;

	log_debug("if_del: interface %s", iface->name);

	/* revert the demotion when the interface is deleted */
	if (iface->state == IF_STA_DOWN)
		ripe_demote_iface(iface, 1);

	/* clear lists etc */
	while ((nbr = LIST_FIRST(&iface->nbr_list)) != NULL)
		nbr_del(nbr);

	/* XXX rq_list, rp_list */

	free(iface);
}

struct ctl_iface *
if_to_ctl(struct iface *iface)
{
	static struct ctl_iface	 ictl;
	struct timeval		 now;

	memcpy(ictl.name, iface->name, sizeof(ictl.name));
	memcpy(&ictl.addr, &iface->addr, sizeof(ictl.addr));
	memcpy(&ictl.mask, &iface->mask, sizeof(ictl.mask));

	ictl.ifindex = iface->ifindex;
	ictl.state = iface->state;
	ictl.mtu = iface->mtu;

	ictl.baudrate = iface->baudrate;
	ictl.flags = iface->flags;
	ictl.metric = iface->cost;
	ictl.type = iface->type;
	ictl.linkstate = iface->linkstate;
	ictl.passive = iface->passive;
	ictl.if_type = iface->if_type;

	gettimeofday(&now, NULL);

	if (iface->state != IF_STA_DOWN) {
		ictl.uptime = now.tv_sec - iface->uptime;
	} else
		ictl.uptime = 0;

	return (&ictl);
}
@


1.13
log
@As done for bgpd recently, rename if_mediatype to if_type in ripd.
And some ifmedia64 fixes.
"move forward" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.c,v 1.12 2015/02/09 12:13:42 claudio Exp $ */
d470 1
a470 1
		nbr_act_del(nbr);
@


1.12
log
@More session_socket_blockmode() removal. While there make the main UDP
socket non-blocking by default.
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.c,v 1.11 2011/07/04 04:34:14 claudio Exp $ */
d428 1
a428 1
	iface->media_type = kif->media_type;
d497 1
a497 1
	ictl.mediatype = iface->media_type;
@


1.11
log
@LINK_STATE_IS_UP() cleanup userland part. There is no need to special
case carp(4) interfaces anymore. LINK_STATE_IS_UP() almost always does
the right job.
OK deraadt@@ henning@@

This needs a -current kernel or link state may be not reported correctly.
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.c,v 1.10 2011/06/21 17:31:07 mikeb Exp $ */
d408 2
a409 1
	if ((s = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
@


1.10
log
@Convert SO_RTABLE's protocol level to the SOL_SOCKET;  ok claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.c,v 1.9 2010/07/03 04:44:52 guenther Exp $ */
d183 1
a183 3
	    (LINK_STATE_IS_UP(iface->linkstate) ||
	    (iface->linkstate == LINK_STATE_UNKNOWN &&
	    iface->media_type != IFT_CARP)))) {
@


1.9
log
@Fix the naming of interfaces and variables for rdomains and rtables
and make it possible to bind sockets (including listening sockets!)
to rtables and not just rdomains.  This changes the name of the
system calls, socket option, and ioctl.  After building with this
you should remove the files /usr/share/man/cat2/[gs]etrdomain.0.

Since this removes the existing [gs]etrdomain() system calls, the
libc major is bumped.

Written by claudio@@, criticized^Wcritiqued by me
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.c,v 1.8 2009/09/26 18:24:58 michele Exp $ */
d86 1
a86 1
		if (setsockopt(iface->fd, IPPROTO_IP, SO_RTABLE, &rdomain,
@


1.8
log
@Preliminary rdomain support.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.c,v 1.7 2009/09/26 11:12:50 michele Exp $ */
d82 1
a82 1
	if (ioctl(iface->fd, SIOCGIFRTABLEID, (caddr_t)&ifr) == -1)
d86 1
a86 1
		if (setsockopt(iface->fd, IPPROTO_IP, SO_RDOMAIN, &rdomain,
@


1.7
log
@Whitespace cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.c,v 1.6 2008/12/17 14:19:39 michele Exp $ */
d75 3
d80 12
@


1.6
log
@Add support for demotion counter.
When interfaces go up/down the demotion counter of the
specified group is decreased/increased.

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.c,v 1.5 2007/10/24 19:50:33 claudio Exp $ */
d452 1
a452 1
                ripe_demote_iface(iface, 1);
@


1.5
log
@Garbage collect unused stuff found by lint.
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.c,v 1.4 2007/10/18 17:00:59 deraadt Exp $ */
d77 2
d127 5
d449 4
@


1.4
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.c,v 1.3 2007/09/11 18:05:36 claudio Exp $ */
a46 1
void	 if_keepalive_timer(int, short, void *);
@


1.3
log
@More baudrate fixes. Again don't forget to initialize the iface->baudrate.
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.c,v 1.2 2006/11/28 19:21:15 reyk Exp $ */
d137 1
a137 1
	struct iface    *iface;
d299 1
a299 1
	u_int8_t        loop = 0;
d313 1
a313 1
	int     bsize;
d346 1
a346 1
	struct ip_mreq   mreq;
d368 4
a371 4
	struct sockaddr_in      *sain;
	struct iface            *iface;
	struct ifreq            *ifr;
	int                      s;
@


1.2
log
@add additional link states to report the half duplex / full duplex
state, if known by the driver. this is required to check the full
duplex state without depending on the ifmedia ioctl which can't be
called in the kernel without process context.

ok henning@@, brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.c,v 1.1 2006/10/18 16:11:58 norby Exp $ */
d409 1
@


1.1
log
@Welcome ripd
started by Michele Marchetto some time ago by using the imsg/three process framework
of ospfd. He implemented most of the daemon with a little help and guidance from
Claudio and I.

Currently the daemon is more or less complete, with the exception of key lifetime
and rollover.

Not yet connected to the builds.
OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d162 1
a162 1
	    (iface->linkstate == LINK_STATE_UP ||
@

