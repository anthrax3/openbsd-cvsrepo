head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.6
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.4
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.12
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.10
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.8
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.6
	OPENBSD_5_0:1.15.0.4
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.2
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.12.0.4
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.9.0.6
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.4
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.6.0.2
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4;
locks; strict;
comment	@ * @;


1.21
date	2016.09.03.10.28.08;	author renato;	state Exp;
branches;
next	1.20;
commitid	3pamvrppu41vvs6n;

1.20
date	2016.09.02.14.07.52;	author benno;	state Exp;
branches;
next	1.19;
commitid	GaB0AXyD9uoXsTK0;

1.19
date	2015.12.05.13.13.47;	author claudio;	state Exp;
branches;
next	1.18;
commitid	b7fx00QUWNpx3oj5;

1.18
date	2015.01.16.06.40.20;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	Uu5nFG3wCl0LACBb;

1.17
date	2014.07.12.20.16.38;	author krw;	state Exp;
branches;
next	1.16;
commitid	lIxCxHhVEpsmXOdi;

1.16
date	2013.11.19.22.25.32;	author benno;	state Exp;
branches;
next	1.15;

1.15
date	2010.12.31.21.49.54;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2009.11.02.20.28.49;	author claudio;	state Exp;
branches;
next	1.13;

1.13
date	2009.09.18.16.17.02;	author michele;	state Exp;
branches;
next	1.12;

1.12
date	2009.06.06.08.20.55;	author eric;	state Exp;
branches;
next	1.11;

1.11
date	2009.05.31.20.30.15;	author jacekm;	state Exp;
branches;
next	1.10;

1.10
date	2009.05.31.17.06.01;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2007.10.24.20.38.03;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.24.19.05.06;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2007.10.18.17.00.59;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2007.04.09.20.45.52;	author michele;	state Exp;
branches;
next	1.5;

1.5
date	2007.03.31.09.49.20;	author michele;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.24.10.14.17;	author claudio;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.08.13.01.10;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.24.16.37.48;	author david;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.16.11.58;	author norby;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Simplify shutdown process.

On shutdown, there's no need to use kill(2) to kill the child
processes. Just closing the IPC sockets will make the children receive
an EOF, break out from the event loop and then exit.

Tha advantages of this "pipe teardown" are:
* simpler code;
* no need to pledge "proc" in the parent process;
* removal of a (hard to trigger) PID reuse race condition.

ok benno@@ claudio@@
@
text
@/*	$OpenBSD: rde.c,v 1.20 2016/09/02 14:07:52 benno Exp $ */

/*
 * Copyright (c) 2006 Michele Marchetto <mydecay@@openbeer.it>
 * Copyright (c) 2004, 2005 Claudio Jeker <claudio@@openbsd.org>
 * Copyright (c) 2004 Esben Norby <norby@@openbsd.org>
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/socket.h>
#include <sys/queue.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <err.h>
#include <errno.h>
#include <stdlib.h>
#include <signal.h>
#include <string.h>
#include <pwd.h>
#include <unistd.h>
#include <event.h>

#include "ripd.h"
#include "rip.h"
#include "ripe.h"
#include "log.h"
#include "rde.h"

#define	MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

struct ripd_conf	*rdeconf = NULL;
struct imsgev		*iev_ripe;
struct imsgev		*iev_main;

void	rde_sig_handler(int, short, void *);
__dead void rde_shutdown(void);
void	rde_dispatch_imsg(int, short, void *);
void	rde_dispatch_parent(int, short, void *);
int	rde_imsg_compose_ripe(int, u_int32_t, pid_t, void *, u_int16_t);
int	rde_check_route(struct rip_route *);
void	triggered_update(struct rt_node *);

/* ARGSUSED */
void
rde_sig_handler(int sig, short event, void *arg)
{
	/*
	 * signal handler rules don't apply, libevent decouples for us
	 */

	switch (sig) {
	case SIGINT:
	case SIGTERM:
		rde_shutdown();
		/* NOTREACHED */
	default:
		fatalx("unexpected signal");
	}
}

/* route decision engine */
pid_t
rde(struct ripd_conf *xconf, int pipe_parent2rde[2], int pipe_ripe2rde[2],
    int pipe_parent2ripe[2])
{
	struct event		 ev_sigint, ev_sigterm;
	struct passwd		*pw;
	struct redistribute	*r;
	pid_t			 pid;

	switch (pid = fork()) {
	case -1:
		fatal("cannot fork");
		/* NOTREACHED */
	case 0:
		break;
	default:
		return (pid);
	}

	rdeconf = xconf;

	if ((pw = getpwnam(RIPD_USER)) == NULL)
		fatal("getpwnam");

	if (chroot(pw->pw_dir) == -1)
		fatal("chroot");
	if (chdir("/") == -1)
		fatal("chdir(\"/\")");

	setproctitle("route decision engine");
	ripd_process = PROC_RDE_ENGINE;
	log_procname = log_procnames[ripd_process];

	if (setgroups(1, &pw->pw_gid) ||
	    setresgid(pw->pw_gid, pw->pw_gid, pw->pw_gid) ||
	    setresuid(pw->pw_uid, pw->pw_uid, pw->pw_uid))
		fatal("can't drop privileges");

	event_init();

	/* setup signal handler */
	signal_set(&ev_sigint, SIGINT, rde_sig_handler, NULL);
	signal_set(&ev_sigterm, SIGTERM, rde_sig_handler, NULL);
	signal_add(&ev_sigint, NULL);
	signal_add(&ev_sigterm, NULL);
	signal(SIGPIPE, SIG_IGN);
	signal(SIGHUP, SIG_IGN);

	/* setup pipes */
	close(pipe_ripe2rde[0]);
	close(pipe_parent2rde[0]);
	close(pipe_parent2ripe[0]);
	close(pipe_parent2ripe[1]);

	if ((iev_ripe = malloc(sizeof(struct imsgev))) == NULL ||
	    (iev_main = malloc(sizeof(struct imsgev))) == NULL)
		fatal(NULL);
	imsg_init(&iev_ripe->ibuf, pipe_ripe2rde[1]);
	iev_ripe->handler =  rde_dispatch_imsg;
	imsg_init(&iev_main->ibuf, pipe_parent2rde[1]);
	iev_main->handler = rde_dispatch_parent;

	/* setup event handler */
	iev_ripe->events = EV_READ;
	event_set(&iev_ripe->ev, iev_ripe->ibuf.fd, iev_ripe->events,
	    iev_ripe->handler, iev_ripe);
	event_add(&iev_ripe->ev, NULL);

	iev_main->events = EV_READ;
	event_set(&iev_main->ev, iev_main->ibuf.fd, iev_main->events,
	    iev_main->handler, iev_main);
	event_add(&iev_main->ev, NULL);
	rt_init();

	/* remove unneeded config stuff */
	while ((r = SIMPLEQ_FIRST(&rdeconf->redist_list)) != NULL) {
		SIMPLEQ_REMOVE_HEAD(&rdeconf->redist_list, entry);
		free(r);
	}

	event_dispatch();

	rde_shutdown();
	/* NOTREACHED */

	return (0);
}

__dead void
rde_shutdown(void)
{
	/* close pipes */
	msgbuf_clear(&iev_ripe->ibuf.w);
	close(iev_ripe->ibuf.fd);
	msgbuf_clear(&iev_main->ibuf.w);
	close(iev_main->ibuf.fd);

	rt_clear();
	free(iev_ripe);
	free(iev_main);
	free(rdeconf);

	log_info("route decision engine exiting");
	_exit(0);
}

int
rde_imsg_compose_ripe(int type, u_int32_t peerid, pid_t pid, void *data,
    u_int16_t datalen)
{
	return (imsg_compose_event(iev_ripe, type, peerid, pid, -1,
		    data, datalen));
}

/* ARGSUSED */
void
rde_dispatch_imsg(int fd, short event, void *bula)
{
	struct imsgev		*iev = bula;
	struct imsgbuf		*ibuf = &iev->ibuf;
	struct rip_route	 rr;
	struct imsg		 imsg;
	ssize_t			 n;
	int			 shut = 0, verbose;

	if (event & EV_READ) {
		if ((n = imsg_read(ibuf)) == -1 && errno != EAGAIN)
			fatal("imsg_read error");
		if (n == 0)	/* connection closed */
			shut = 1;
	}
	if (event & EV_WRITE) {
		if ((n = msgbuf_write(&ibuf->w)) == -1 && errno != EAGAIN)
			fatal("msgbuf_write");
		if (n == 0)	/* connection closed */
			shut = 1;
	}

	for (;;) {
		if ((n = imsg_get(ibuf, &imsg)) == -1)
			fatal("rde_dispatch_imsg: imsg_get error");
		if (n == 0)
			break;

		switch (imsg.hdr.type) {
		case IMSG_ROUTE_FEED:
			if (imsg.hdr.len - IMSG_HEADER_SIZE != sizeof(rr))
				fatalx("invalid size of RDE request");

			memcpy(&rr, imsg.data, sizeof(rr));

			if (rde_check_route(&rr) == -1)
				log_debug("rde_dispatch_imsg: "
				    "packet malformed\n");
			break;
		case IMSG_FULL_REQUEST:
			bzero(&rr, sizeof(rr));
			/*
			 * AFI == 0 && metric == INFINITY request the
			 * whole routing table
			 */
			rr.metric = INFINITY;
			rde_imsg_compose_ripe(IMSG_REQUEST_ADD, 0,
			    0, &rr, sizeof(rr));
			rde_imsg_compose_ripe(IMSG_SEND_REQUEST, 0,
			    0, NULL, 0);
			break;
		case IMSG_FULL_RESPONSE:
			rt_snap(imsg.hdr.peerid);
			rde_imsg_compose_ripe(IMSG_SEND_RESPONSE,
			    imsg.hdr.peerid, 0, NULL, 0);
			break;
		case IMSG_ROUTE_REQUEST:
			if (imsg.hdr.len - IMSG_HEADER_SIZE != sizeof(rr))
				fatalx("invalid size of RDE request");

			memcpy(&rr, imsg.data, sizeof(rr));

			rt_complete(&rr);
			rde_imsg_compose_ripe(IMSG_RESPONSE_ADD,
			    imsg.hdr.peerid, 0, &rr, sizeof(rr));

			break;
		case IMSG_ROUTE_REQUEST_END:
			rde_imsg_compose_ripe(IMSG_SEND_RESPONSE,
			    imsg.hdr.peerid, 0, NULL, 0);
			break;
		case IMSG_CTL_SHOW_RIB:
			rt_dump(imsg.hdr.pid);

			imsg_compose_event(iev_ripe, IMSG_CTL_END, 0,
			    imsg.hdr.pid, -1, NULL, 0);

			break;
		case IMSG_CTL_LOG_VERBOSE:
			/* already checked by ripe */
			memcpy(&verbose, imsg.data, sizeof(verbose));
			log_verbose(verbose);
			break;
		default:
			log_debug("rde_dispatch_msg: unexpected imsg %d",
			    imsg.hdr.type);
			break;
		}
		imsg_free(&imsg);
	}
	if (!shut)
		imsg_event_add(iev);
	else {
		/* this pipe is dead, so remove the event handler */
		event_del(&iev->ev);
		event_loopexit(NULL);
	}
}

/* ARGSUSED */
void
rde_dispatch_parent(int fd, short event, void *bula)
{
	struct imsg		 imsg;
	struct rt_node		*rt;
	struct kroute		 kr;
	struct imsgev		*iev = bula;
	struct imsgbuf		*ibuf = &iev->ibuf;
	ssize_t			 n;
	int			 shut = 0;

	if (event & EV_READ) {
		if ((n = imsg_read(ibuf)) == -1 && errno != EAGAIN)
			fatal("imsg_read error");
		if (n == 0)	/* connection closed */
			shut = 1;
	}
	if (event & EV_WRITE) {
		if ((n = msgbuf_write(&ibuf->w)) == -1 && errno != EAGAIN)
			fatal("msgbuf_write");
		if (n == 0)	/* connection closed */
			shut = 1;
	}

	for (;;) {
		if ((n = imsg_get(ibuf, &imsg)) == -1)
			fatal("rde_dispatch_parent: imsg_get error");
		if (n == 0)
			break;

		switch (imsg.hdr.type) {
		case IMSG_NETWORK_ADD:
			if (imsg.hdr.len - IMSG_HEADER_SIZE != sizeof(kr)) {
				log_warnx("rde_dispatch: wrong imsg len");
				break;
			}

			memcpy(&kr, imsg.data, sizeof(kr));

			rt = rt_new_kr(&kr);
			rt_insert(rt);
			break;
		case IMSG_NETWORK_DEL:
			if (imsg.hdr.len - IMSG_HEADER_SIZE != sizeof(kr)) {
				log_warnx("rde_dispatch: wrong imsg len");
				break;
			}
			memcpy(&kr, imsg.data, sizeof(kr));

			if ((rt = rt_find(kr.prefix.s_addr,
			    kr.netmask.s_addr)) != NULL)
				rt_remove(rt);
			break;
		default:
			log_debug("rde_dispatch_parent: unexpected imsg %d",
			    imsg.hdr.type);
			break;
		}
		imsg_free(&imsg);
	}
	if (!shut)
		imsg_event_add(iev);
	else {
		/* this pipe is dead, so remove the event handler */
		event_del(&iev->ev);
		event_loopexit(NULL);
	}
}

void
rde_send_change_kroute(struct rt_node *r)
{
	struct kroute	 kr;

	bzero(&kr, sizeof(kr));
	kr.prefix.s_addr = r->prefix.s_addr;
	kr.nexthop.s_addr = r->nexthop.s_addr;
	kr.netmask.s_addr = r->netmask.s_addr;
	kr.metric = r->metric;
	kr.flags = r->flags;
	kr.ifindex = r->ifindex;

	imsg_compose_event(iev_main, IMSG_KROUTE_CHANGE, 0, 0, -1,
	    &kr, sizeof(kr));
}

void
rde_send_delete_kroute(struct rt_node *r)
{
	struct kroute	 kr;

	bzero(&kr, sizeof(kr));
	kr.prefix.s_addr = r->prefix.s_addr;
	kr.nexthop.s_addr = r->nexthop.s_addr;
	kr.netmask.s_addr = r->netmask.s_addr;
	kr.metric = r->metric;
	kr.flags = r->flags;
	kr.ifindex = r->ifindex;

	imsg_compose_event(iev_main, IMSG_KROUTE_DELETE, 0, 0, -1,
	    &kr, sizeof(kr));
}

int
rde_check_route(struct rip_route *e)
{
	struct timeval	 tv, now;
	struct rt_node	*rn;
	struct iface	*iface;
	u_int8_t	 metric;

	if ((e->nexthop.s_addr & htonl(IN_CLASSA_NET)) ==
	    htonl(INADDR_LOOPBACK & IN_CLASSA_NET) ||
	    e->nexthop.s_addr == INADDR_ANY)
		return (-1);

	if ((iface = if_find_index(e->ifindex)) == NULL)
		return (-1);

	metric = MINIMUM(INFINITY, e->metric + iface->cost);

	if ((rn = rt_find(e->address.s_addr, e->mask.s_addr)) == NULL) {
		if (metric >= INFINITY)
			return (0);
		rn = rt_new_rr(e, metric);
		rt_insert(rn);
		rde_send_change_kroute(rn);
		route_start_timeout(rn);
		triggered_update(rn);
	} else {
		/*
		 * XXX don't we have to track all incoming routes?
		 * what happens if the kernel route is removed later.
		 */
		if (rn->flags & F_KERNEL)
			return (0);

		if (metric < rn->metric) {
			rn->metric = metric;
			rn->nexthop.s_addr = e->nexthop.s_addr;
			rn->ifindex = e->ifindex;
			rde_send_change_kroute(rn);
			triggered_update(rn);
		} else if (e->nexthop.s_addr == rn->nexthop.s_addr &&
		    metric > rn->metric) {
				rn->metric = metric;
				rde_send_change_kroute(rn);
				triggered_update(rn);
				if (rn->metric == INFINITY)
					route_start_garbage(rn);
		} else if (e->nexthop.s_addr != rn->nexthop.s_addr &&
		    metric == rn->metric) {
			/* If the new metric is the same as the old one,
			 * examine the timeout for the existing route.  If it
			 * is at least halfway to the expiration point, switch
			 * to the new route.
			 */
			timerclear(&tv);
			gettimeofday(&now, NULL);
			evtimer_pending(&rn->timeout_timer, &tv);
			if (tv.tv_sec - now.tv_sec < ROUTE_TIMEOUT / 2) {
				rn->nexthop.s_addr = e->nexthop.s_addr;
				rn->ifindex = e->ifindex;
				rde_send_change_kroute(rn);
			}
		}

		if (e->nexthop.s_addr == rn->nexthop.s_addr &&
		    rn->metric < INFINITY)
			route_reset_timers(rn);
	}

	return (0);
}

void
triggered_update(struct rt_node *rn)
{
	struct rip_route	 rr;

	rr.address.s_addr = rn->prefix.s_addr;
	rr.mask.s_addr = rn->netmask.s_addr;
	rr.nexthop.s_addr = rn->nexthop.s_addr;
	rr.metric = rn->metric;
	rr.ifindex = rn->ifindex;

	rde_imsg_compose_ripe(IMSG_SEND_TRIGGERED_UPDATE, 0, 0, &rr,
	    sizeof(struct rip_route));
}
@


1.20
log
@work on making log.c similar in all daemons:

move daemon-local functions into new logmsg.c, and reduce
the (mostly whitespace) differences so that log.c's can be diffed easily.

ok claudio@@, feedback from henning@@, deraadt@@, reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.19 2015/12/05 13:13:47 claudio Exp $ */
d48 1
a48 1
void	rde_shutdown(void);
d162 1
a162 1
void
d165 6
a171 2

	msgbuf_clear(&iev_ripe->ibuf.w);
a172 1
	msgbuf_clear(&iev_main->ibuf.w);
@


1.19
log
@EAGAIN handling for imsg_read. OK henning@@ benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.18 2015/01/16 06:40:20 deraadt Exp $ */
d105 1
@


1.18
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.17 2014/07/12 20:16:38 krw Exp $ */
d196 1
a196 1
		if ((n = imsg_read(ibuf)) == -1)
d210 1
a210 1
			fatal("rde_dispatch_imsg: imsg_read error");
d298 1
a298 1
		if ((n = imsg_read(ibuf)) == -1)
d312 1
a312 1
			fatal("rde_dispatch_parent: imsg_read error");
@


1.17
log
@Close connections when msgbuf_write() returns 0.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.16 2013/11/19 22:25:32 benno Exp $ */
a21 1
#include <sys/param.h>		/* for MIN() */
d41 2
d405 1
a405 1
	metric = MIN(INFINITY, e->metric + iface->cost);
@


1.16
log
@handle msgbuf_write() returning EAGAIN

"looks right" deraadt and sthen.
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.15 2010/12/31 21:49:54 guenther Exp $ */
d201 1
a201 1
		if (msgbuf_write(&ibuf->w) == -1 && errno != EAGAIN)
d203 2
d303 1
a303 1
		if (msgbuf_write(&ibuf->w) == -1 && errno != EAGAIN)
d305 2
@


1.15
log
@Change <sys/types.h> to <sys/param.h> instead of assuming that some
system header pulls the latter in

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.14 2009/11/02 20:28:49 claudio Exp $ */
d201 1
a201 1
		if (msgbuf_write(&ibuf->w) == -1)
d301 1
a301 1
		if (msgbuf_write(&ibuf->w) == -1)
@


1.14
log
@Another routing daemon that gets IMSG_CTL_LOG_VERBOSE to allow toggeling of
log_debug(). ok michele, henning, sthen
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.13 2009/09/18 16:17:02 michele Exp $ */
d22 1
a22 1
#include <sys/types.h>
@


1.13
log
@Make kroute code routing priority aware.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.12 2009/06/06 08:20:55 eric Exp $ */
d192 1
a192 1
	int			 shut = 0;
d260 5
@


1.12
log
@make ripctl/ripd imsg-in-a-lib ready too.

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.11 2009/05/31 20:30:15 jacekm Exp $ */
a327 16
			break;
		case IMSG_KROUTE_GET:
			if (imsg.hdr.len - IMSG_HEADER_SIZE != sizeof(kr)) {
				log_warnx("rde_dispatch: wrong imsg len");
				break;
			}
			memcpy(&kr, imsg.data, sizeof(kr));

			if ((rt = rt_find(kr.prefix.s_addr,
			    kr.netmask.s_addr)) != NULL)
				rde_send_change_kroute(rt);
			else
				/* should not happen */
				imsg_compose_event(iev_main, IMSG_KROUTE_DELETE,
 				    0, 0, -1, &kr, sizeof(kr));

@


1.11
log
@Remove redundant imsg_event_add calls; ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.10 2009/05/31 17:06:01 claudio Exp $ */
d43 2
a44 2
struct imsgbuf		*ibuf_ripe;
struct imsgbuf		*ibuf_main;
d126 2
a127 2
	if ((ibuf_ripe = malloc(sizeof(struct imsgbuf))) == NULL ||
	    (ibuf_main = malloc(sizeof(struct imsgbuf))) == NULL)
d129 4
a132 2
	imsg_init(ibuf_ripe, pipe_ripe2rde[1], rde_dispatch_imsg);
	imsg_init(ibuf_main, pipe_parent2rde[1], rde_dispatch_parent);
d135 9
a143 9
	ibuf_ripe->events = EV_READ;
	event_set(&ibuf_ripe->ev, ibuf_ripe->fd, ibuf_ripe->events,
	    ibuf_ripe->handler, ibuf_ripe);
	event_add(&ibuf_ripe->ev, NULL);

	ibuf_main->events = EV_READ;
	event_set(&ibuf_main->ev, ibuf_main->fd, ibuf_main->events,
	    ibuf_main->handler, ibuf_main);
	event_add(&ibuf_main->ev, NULL);
d165 4
a168 4
	msgbuf_clear(&ibuf_ripe->w);
	free(ibuf_ripe);
	msgbuf_clear(&ibuf_main->w);
	free(ibuf_main);
d179 2
a180 1
	return (imsg_compose(ibuf_ripe, type, peerid, pid, data, datalen));
d187 2
a188 1
	struct imsgbuf		*ibuf = bula;
d257 2
a258 2
			imsg_compose(ibuf_ripe, IMSG_CTL_END, 0, imsg.hdr.pid,
			    NULL, 0);
d269 1
a269 1
		imsg_event_add(ibuf);
d272 1
a272 1
		event_del(&ibuf->ev);
d284 2
a285 1
	struct imsgbuf		*ibuf = bula;
d341 2
a342 2
				imsg_compose(ibuf_main, IMSG_KROUTE_DELETE, 0,
				    0, &kr, sizeof(kr));
d353 1
a353 1
		imsg_event_add(ibuf);
d356 1
a356 1
		event_del(&ibuf->ev);
d374 2
a375 1
	imsg_compose(ibuf_main, IMSG_KROUTE_CHANGE, 0, 0, &kr, sizeof(kr));
d391 2
a392 1
	imsg_compose(ibuf_main, IMSG_KROUTE_DELETE, 0, 0, &kr, sizeof(kr));
@


1.10
log
@Better EV_READ and EV_WRITE handling in the libevent callbacks. Again mostly
the same ospfd diff applied with some fuzz.
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.9 2007/10/24 20:38:03 claudio Exp $ */
a198 1
		imsg_event_add(ibuf);
a292 1
		imsg_event_add(ibuf);
@


1.9
log
@The metric is a 8bit value ranging from 1 to INFINITY (defined as a whopping
16). So use u_int8_t everywhere.
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.8 2007/10/24 19:05:06 claudio Exp $ */
d190 1
a190 2
	switch (event) {
	case EV_READ:
d195 2
a196 2
		break;
	case EV_WRITE:
a199 3
		return;
	default:
		fatalx("unknown event");
d285 1
a285 2
	switch (event) {
	case EV_READ:
d290 2
a291 2
		break;
	case EV_WRITE:
a294 3
		return;
	default:
		fatalx("unknown event");
@


1.8
log
@Sync a bit more with ospfd. Do not fatal if one of the pipes is closed,
instead do a "nice" shutdown. Ignore SIGHUP in the childs even though we
have no reload support (yet). Remove some redundant code and clean up some
types.
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.7 2007/10/18 17:00:59 deraadt Exp $ */
d404 1
a404 1
	int		 metric;
@


1.7
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.6 2007/04/09 20:45:52 michele Exp $ */
d118 1
a172 1
/* imesg */
d187 2
a188 1
	int			 n;
d195 1
a195 1
			fatalx("pipe closed");
d269 7
a275 1
	imsg_event_add(ibuf);
d287 1
d294 1
a294 1
			fatalx("pipe closed");
d357 7
a363 1
	imsg_event_add(ibuf);
d408 1
a408 5
	    (e->nexthop.s_addr == INADDR_ANY))
		return (-1);

	if ((e->address.s_addr & htonl(IN_CLASSA_NET)) ==
	    htonl(INADDR_LOOPBACK & IN_CLASSA_NET))
@


1.6
log
@Improve the handling of "counting to infinity" mechanism and add an heuristic
higly recommended in the rfc.

tested by me and OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.5 2007/03/31 09:49:20 michele Exp $ */
d224 3
a226 2
			/* AFI == 0 && metric == INFINITY request the
			   whole routing table
d355 1
a355 1
	struct kroute    kr;
d371 1
a371 1
	struct kroute    kr;
d429 1
a429 1
		    metric > rn->metric) { 
@


1.5
log
@Some code cleanups. Added one lint command, removed one unused function and
some other cosmetics.
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.4 2007/01/24 10:14:17 claudio Exp $ */
d386 1
a399 3
	if (e->metric > INFINITY)
		return (-1);

a403 2
	if (metric >= INFINITY)
		return (0);
d406 2
d428 21
a448 4
		    e->metric > metric) {
			rn->metric = metric;
			rde_send_change_kroute(rn);
			triggered_update(rn);
d451 2
a452 1
		if (e->nexthop.s_addr == rn->nexthop.s_addr)
@


1.4
log
@Ingore SIGPIPE in the parent and rde as well. This is needed to correctly
report crashes. Discussed with norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.3 2007/01/08 13:01:10 claudio Exp $ */
a49 1
int	rde_imsg_compose_parent(int, pid_t, void *, u_int16_t);
a172 6
int
rde_imsg_compose_parent(int type, pid_t pid, void *data, u_int16_t datalen)
{
	return (imsg_compose(ibuf_main, type, 0, pid, data, datalen));
}

@


1.3
log
@New redistribute code adapted from ospfd. It is now possible to do the same
redistribute setups as in ospfd (rtlables, per prefix, negation).
Tested, input and OK michele@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.2 2006/10/24 16:37:48 david Exp $ */
d118 1
@


1.2
log
@spelling and typo fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: rde.c,v 1.1 2006/10/18 16:11:58 norby Exp $ */
d78 1
d80 1
a80 1
	struct event		 ev_sigint, ev_sigterm;
d141 7
a148 1
	rt_init();
@


1.1
log
@Welcome ripd
started by Michele Marchetto some time ago by using the imsg/three process framework
of ospfd. He implemented most of the daemon with a little help and guidance from
Claudio and I.

Currently the daemon is more or less complete, with the exception of key lifetime
and rollover.

Not yet connected to the builds.
OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d416 1
a416 1
		 * XXX don't we have to track all incomming routes?
@

