head	1.24;
access;
symbols
	OPENBSD_6_1:1.24.0.2
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.22.0.4
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.21.0.26
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.18
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.22
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.20
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.16
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.14
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.12
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.10
	OPENBSD_5_0:1.21.0.8
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.6
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.4
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.15.0.4
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.10.0.4
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.2
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5;
locks; strict;
comment	@ * @;


1.24
date	2016.09.02.14.07.52;	author benno;	state Exp;
branches;
next	1.23;
commitid	GaB0AXyD9uoXsTK0;

1.23
date	2016.08.02.16.05.32;	author jca;	state Exp;
branches;
next	1.22;
commitid	M3zXmxiZhTfusmGR;

1.22
date	2015.09.27.17.32.36;	author stsp;	state Exp;
branches;
next	1.21;
commitid	i6S6VoG4dUqAlOvy;

1.21
date	2009.11.02.20.28.49;	author claudio;	state Exp;
branches;
next	1.20;

1.20
date	2009.09.26.18.24.58;	author michele;	state Exp;
branches;
next	1.19;

1.19
date	2009.09.26.11.12.50;	author michele;	state Exp;
branches;
next	1.18;

1.18
date	2009.09.24.12.30.36;	author michele;	state Exp;
branches;
next	1.17;

1.17
date	2009.09.18.16.17.02;	author michele;	state Exp;
branches;
next	1.16;

1.16
date	2009.07.07.12.07.23;	author michele;	state Exp;
branches;
next	1.15;

1.15
date	2009.06.06.18.31.42;	author pyr;	state Exp;
branches;
next	1.14;

1.14
date	2009.06.06.08.20.55;	author eric;	state Exp;
branches;
next	1.13;

1.13
date	2009.06.02.21.43.36;	author claudio;	state Exp;
branches;
next	1.12;

1.12
date	2009.03.24.19.26.13;	author michele;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.17.14.19.39;	author michele;	state Exp;
branches;
next	1.10;

1.10
date	2007.10.24.20.16.49;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2007.10.18.17.00.59;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.18.09.47.57;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.11.18.05.36;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2007.09.11.17.26.22;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.08.13.01.10;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.15.20.21.46;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.31.23.43.11;	author michele;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.31.07.16.45;	author mcbride;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.16.11.58;	author norby;	state Exp;
branches;
next	;


desc
@@


1.24
log
@work on making log.c similar in all daemons:

move daemon-local functions into new logmsg.c, and reduce
the (mostly whitespace) differences so that log.c's can be diffed easily.

ok claudio@@, feedback from henning@@, deraadt@@, reyk@@
@
text
@/*	$OpenBSD: ripd.h,v 1.23 2016/08/02 16:05:32 jca Exp $ */

/*
 * Copyright (c) 2004 Esben Norby <norby@@openbsd.org>
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef RIPD_H
#define RIPD_H

#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/tree.h>
#include <md5.h>
#include <net/if.h>
#include <netinet/in.h>
#include <event.h>

#include <imsg.h>

#define	CONF_FILE		"/etc/ripd.conf"
#define	RIPD_SOCKET		"/var/run/ripd.sock"
#define	RIPD_USER		"_ripd"

#define	NBR_HASHSIZE		128
#define	NBR_IDSELF		1
#define	NBR_CNTSTART		(NBR_IDSELF + 1)

#define	ROUTE_TIMEOUT		180
#define ROUTE_GARBAGE		120

#define	NBR_TIMEOUT		180

#define RT_BUF_SIZE		16384
#define MAX_RTSOCK_BUF		128 * 1024

#define	RIPD_FLAG_NO_FIB_UPDATE	0x0001

#define	F_RIPD_INSERTED		0x0001
#define	F_KERNEL		0x0002
#define	F_CONNECTED		0x0008
#define	F_DOWN			0x0010
#define	F_STATIC		0x0020
#define	F_DYNAMIC		0x0040
#define	F_REDISTRIBUTED		0x0100
#define	F_REJECT		0x0200
#define	F_BLACKHOLE		0x0400

#define REDISTRIBUTE_ON		0x01

#define	OPT_SPLIT_HORIZON	0x01
#define	OPT_SPLIT_POISONED	0x02
#define	OPT_TRIGGERED_UPDATES	0x04

enum imsg_type {
	IMSG_NONE,
	IMSG_CTL_END,
	IMSG_CTL_RELOAD,
	IMSG_CTL_IFINFO,
	IMSG_IFINFO,
	IMSG_CTL_FIB_COUPLE,
	IMSG_CTL_FIB_DECOUPLE,
	IMSG_CTL_KROUTE,
	IMSG_CTL_KROUTE_ADDR,
	IMSG_CTL_SHOW_INTERFACE,
	IMSG_CTL_SHOW_IFACE,
	IMSG_CTL_SHOW_NBR,
	IMSG_CTL_SHOW_RIB,
	IMSG_CTL_LOG_VERBOSE,
	IMSG_KROUTE_CHANGE,
	IMSG_KROUTE_DELETE,
	IMSG_NETWORK_ADD,
	IMSG_NETWORK_DEL,
	IMSG_ROUTE_FEED,
	IMSG_RESPONSE_ADD,
	IMSG_SEND_RESPONSE,
	IMSG_FULL_RESPONSE,
	IMSG_ROUTE_REQUEST,
	IMSG_ROUTE_REQUEST_END,
	IMSG_FULL_REQUEST,
	IMSG_REQUEST_ADD,
	IMSG_SEND_REQUEST,
	IMSG_SEND_TRIGGERED_UPDATE,
	IMSG_DEMOTE
};

static const char * const log_procnames[] = {
	"parent",
	"ripe",
	"rde"
};

struct imsgev {
	struct imsgbuf		 ibuf;
	void			(*handler)(int, short, void *);
	struct event		 ev;
	void			*data;
	short			 events;
};

/* interface states */
#define IF_STA_DOWN		0x01
#define IF_STA_ACTIVE		(~IF_STA_DOWN)
#define IF_STA_ANY		0x7f

/* interface events */
enum iface_event {
	IF_EVT_NOTHING,
	IF_EVT_UP,
	IF_EVT_DOWN
};

/* interface actions */
enum iface_action {
	IF_ACT_NOTHING,
	IF_ACT_STRT,
	IF_ACT_RST
};

/* interface types */
enum iface_type {
	IF_TYPE_POINTOPOINT,
	IF_TYPE_BROADCAST,
	IF_TYPE_NBMA,
	IF_TYPE_POINTOMULTIPOINT
};

/* neighbor states */
#define NBR_STA_DOWN		0x01
#define	NBR_STA_REQ_RCVD	0x02
#define NBR_STA_ACTIVE		(~NBR_STA_DOWN)
#define NBR_STA_ANY		0xff

struct auth_md {
	TAILQ_ENTRY(auth_md)	 entry;
	u_int32_t		 seq_modulator;
	u_int8_t		 key[MD5_DIGEST_LENGTH];
	u_int8_t		 keyid;
};

#define MAX_SIMPLE_AUTH_LEN	16

/* auth types */
enum auth_type {
	AUTH_NONE = 1,
	AUTH_SIMPLE,
	AUTH_CRYPT
};

TAILQ_HEAD(auth_md_head, auth_md);
TAILQ_HEAD(packet_head, packet_entry);

struct iface {
	LIST_ENTRY(iface)	 entry;
	LIST_HEAD(, nbr)	 nbr_list;
	LIST_HEAD(, nbr_failed)	 failed_nbr_list;
	char			 name[IF_NAMESIZE];
	char			 demote_group[IFNAMSIZ];
	u_int8_t		 auth_key[MAX_SIMPLE_AUTH_LEN];
	struct in_addr		 addr;
	struct in_addr		 dst;
	struct in_addr		 mask;
	struct packet_head	 rq_list;
	struct packet_head	 rp_list;
	struct auth_md_head	 auth_md_list;

	u_int64_t		 baudrate;
	time_t			 uptime;
	u_int			 mtu;
	int			 fd; /* XXX */
	int			 state;
	u_short			 ifindex;
	u_int16_t		 cost;
	u_int16_t		 flags;
	enum iface_type		 type;
	enum auth_type		 auth_type;
	u_int8_t		 linktype;
	u_int8_t		 if_type;
	u_int8_t		 passive;
	u_int8_t		 linkstate;
	u_int8_t		 auth_keyid;
};

struct rip_route {
	struct in_addr		 address;
	struct in_addr		 mask;
	struct in_addr		 nexthop;
	int			 refcount;
	u_short			 ifindex;
	u_int8_t		 metric;
};

struct packet_entry {
	TAILQ_ENTRY(packet_entry)	 entry;
	struct rip_route		*rr;
};

enum {
	PROC_MAIN,
	PROC_RIP_ENGINE,
	PROC_RDE_ENGINE
} ripd_process;

#define	REDIST_CONNECTED	0x01
#define	REDIST_STATIC		0x02
#define	REDIST_LABEL		0x04
#define	REDIST_ADDR		0x08
#define	REDIST_DEFAULT		0x10
#define	REDIST_NO		0x20

struct redistribute {
	SIMPLEQ_ENTRY(redistribute)	entry;
	struct in_addr			addr;
	struct in_addr			mask;
	u_int32_t			metric;
	u_int16_t			label;
	u_int16_t			type;
};

struct ripd_conf {
	struct event		 ev;
	struct event		 report_timer;
	LIST_HEAD(, iface)	 iface_list;
	SIMPLEQ_HEAD(, redistribute) redist_list;

	u_int32_t		 opts;
#define RIPD_OPT_VERBOSE	0x00000001
#define	RIPD_OPT_VERBOSE2	0x00000002
#define	RIPD_OPT_NOACTION	0x00000004
#define	RIPD_OPT_FORCE_DEMOTE	0x00000008
	int			 flags;
	int			 options;
	int			 rip_socket;
	int			 redistribute;
	u_int			 rdomain;
	char			*csock;
};

/* kroute */
struct kroute {
	struct in_addr	prefix;
	struct in_addr	netmask;
	struct in_addr	nexthop;
	u_int16_t	flags;
	u_int16_t	rtlabel;
	u_short		ifindex;
	u_int8_t	metric;
	u_int8_t	priority;
};

struct kif {
	char		 ifname[IF_NAMESIZE];
	u_int64_t	 baudrate;
	int		 flags;
	int		 mtu;
	u_short		 ifindex;
	u_int8_t	 if_type;
	u_int8_t	 link_state;
	u_int8_t	 nh_reachable;	/* for nexthop verification */
};

/* control data structures */
struct ctl_iface {
	char			 name[IF_NAMESIZE];
	struct in_addr		 addr;
	struct in_addr		 mask;

	time_t			 uptime;
	time_t			 report_timer;

	u_int64_t		 baudrate;
	unsigned int		 ifindex;
	int			 state;
	int			 mtu;

	u_int16_t		 flags;
	u_int16_t		 metric;
	enum iface_type		 type;
	u_int8_t		 linkstate;
	u_int8_t		 if_type;
	u_int8_t		 passive;
};

struct ctl_rt {
	struct in_addr		 prefix;
	struct in_addr		 netmask;
	struct in_addr		 nexthop;
	time_t			 uptime;
	time_t			 expire;
	u_int32_t		 metric;
	u_int16_t		 flags;
};

struct ctl_nbr {
	char			 name[IF_NAMESIZE];
	struct in_addr		 id;
	struct in_addr		 addr;
	time_t			 dead_timer;
	time_t			 uptime;
	int			 nbr_state;
	int			 iface_state;
};

struct demote_msg {
	char			 demote_group[IF_NAMESIZE];
	int			 level;
};

int		 kif_init(void);
int		 kr_init(int, u_int);
int		 kr_change(struct kroute *);
int		 kr_delete(struct kroute *);
void		 kr_shutdown(void);
void		 kr_fib_couple(void);
void		 kr_fib_decouple(void);
void		 kr_dispatch_msg(int, short, void *);
void		 kr_show_route(struct imsg *);
void		 kr_ifinfo(char *, pid_t);
struct kif	*kif_findname(char *);

in_addr_t	 prefixlen2mask(u_int8_t);
u_int8_t	 mask2prefixlen(in_addr_t);

/* ripd.c */
void		 main_imsg_compose_ripe(int, pid_t, void *, u_int16_t);
void		 main_imsg_compose_rde(int, pid_t, void *, u_int16_t);
int		 rip_redistribute(struct kroute *);
void		 imsg_event_add(struct imsgev *);
int		 imsg_compose_event(struct imsgev *, u_int16_t, u_int32_t,
		    pid_t, int, void *, u_int16_t);

/* parse.y */
struct ripd_conf	*parse_config(char *, int);
int			 cmdline_symset(char *);

/* carp.c */
int		 carp_demote_init(char *, int);
void		 carp_demote_shutdown(void);
int		 carp_demote_get(char *);
int		 carp_demote_set(char *, int);

/* printconf.c */
void		 print_config(struct ripd_conf *);

/* logmsg.c */
const char	*nbr_state_name(int);
const char	*if_type_name(enum iface_type);
const char	*if_auth_name(enum auth_type);
const char	*if_state_name(int);

/* interface.c */
struct iface	*if_find_index(u_short);

/* name2id.c */
u_int16_t	 rtlabel_name2id(const char *);
const char	*rtlabel_id2name(u_int16_t);
void		 rtlabel_unref(u_int16_t);

#endif /* RIPD_H */
@


1.23
log
@Allow specifying an alternate socket path.

This allows one to run multiple ripd instances, for example to serve
multiple rdomains.  Diff from Nima GHOTBI, ok claudio@@ florian@@ benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.22 2015/09/27 17:32:36 stsp Exp $ */
d20 2
a21 2
#ifndef _RIPD_H_
#define _RIPD_H_
d99 6
d357 4
a360 1
/* log.c */
a361 2
const char	*if_auth_name(enum auth_type);
const char	*nbr_state_name(int);
d371 1
a371 1
#endif /* _RIPD_H_ */
@


1.22
log
@As done for bgpd recently, rename if_mediatype to if_type in ripd.
And some ifmedia64 fixes.
"move forward" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.21 2009/11/02 20:28:49 claudio Exp $ */
d242 1
@


1.21
log
@Another routing daemon that gets IMSG_CTL_LOG_VERBOSE to allow toggeling of
log_debug(). ok michele, henning, sthen
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.20 2009/09/26 18:24:58 michele Exp $ */
d184 1
a184 1
	u_int8_t		 media_type;
d262 1
a262 1
	u_int8_t	 media_type;
d285 1
a285 1
	u_int8_t		 mediatype;
@


1.20
log
@Preliminary rdomain support.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.19 2009/09/26 11:12:50 michele Exp $ */
d81 1
@


1.19
log
@Whitespace cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.18 2009/09/24 12:30:36 michele Exp $ */
d240 1
d314 1
a314 1
int		 kr_init(int);
@


1.18
log
@Priorities are now handled in the kernel so:

- RTF_PROTO3 is useless
- MPLS routes don't need special treatment anymore, so don't track them at all

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.17 2009/09/18 16:17:02 michele Exp $ */
d332 1
a332 1
int	 	 imsg_compose_event(struct imsgev *, u_int16_t, u_int32_t,
@


1.17
log
@Make kroute code routing priority aware.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.16 2009/07/07 12:07:23 michele Exp $ */
a59 1
#define	F_LDPD_INSERTED		0x0800
@


1.16
log
@Make ripd(8) aware of MPLS routes.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.15 2009/06/06 18:31:42 pyr Exp $ */
a52 1
#define	F_BGPD_INSERTED		0x0004
a56 1
#define	F_OSPFD_INSERTED	0x0080
a83 1
	IMSG_KROUTE_GET,
d252 1
@


1.15
log
@Get ready for including imsg.h from a lib, when it comes along.
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.14 2009/06/06 08:20:55 eric Exp $ */
d62 1
@


1.14
log
@make ripctl/ripd imsg-in-a-lib ready too.

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.13 2009/06/02 21:43:36 claudio Exp $ */
d31 1
a31 1
#include "imsg.h"
@


1.13
log
@Same reject and blackhole route handling as in ospfd. Allow those routes
to be redistributed even though they point to 127.0.0.1. OK michele@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.12 2009/03/24 19:26:13 michele Exp $ */
d31 2
a45 1
#define	READ_BUF_SIZE		65535
a68 36
/* buffer */
struct buf {
	TAILQ_ENTRY(buf)	 entry;
	u_char			*buf;
	size_t			 size;
	size_t			 max;
	size_t			 wpos;
	size_t			 rpos;
};

struct msgbuf {
	TAILQ_HEAD(, buf)	 bufs;
	u_int32_t		 queued;
	int			 fd;
};

#define IMSG_HEADER_SIZE	sizeof(struct imsg_hdr)
#define MAX_IMSGSIZE		8192

struct buf_read {
	u_char			 buf[READ_BUF_SIZE];
	u_char			*rptr;
	size_t			 wpos;
};

struct imsgbuf {
	TAILQ_HEAD(, imsg_fd)	fds;
	struct buf_read		r;
	struct msgbuf		w;
	struct event		ev;
	void			(*handler)(int, short, void *);
	int			fd;
	pid_t			pid;
	short			events;
};

d101 6
a106 15
struct imsg_hdr {
	enum imsg_type	type;
	u_int16_t	len;
	u_int32_t	peerid;
	pid_t		pid;
};

struct imsg {
	struct imsg_hdr	 hdr;
	void		*data;
};

struct imsg_fd {
	TAILQ_ENTRY(imsg_fd)	entry;
	int			fd;
d333 3
a340 12
/* buffer.c */
struct buf	*buf_open(size_t);
struct buf	*buf_dynamic(size_t, size_t);
int		 buf_add(struct buf *, void *, size_t);
void		*buf_reserve(struct buf *, size_t);
void		*buf_seek(struct buf *, size_t, size_t);
int		 buf_close(struct msgbuf *, struct buf *);
void		 buf_free(struct buf *);
void		 msgbuf_init(struct msgbuf *);
void		 msgbuf_clear(struct msgbuf *);
int		 msgbuf_write(struct msgbuf *);

a345 13

/* imsg.c */
void		 imsg_init(struct imsgbuf *, int, void (*)(int, short, void *));
ssize_t		 imsg_read(struct imsgbuf *);
ssize_t		 imsg_get(struct imsgbuf *, struct imsg *);
int		 imsg_compose(struct imsgbuf *, enum imsg_type, u_int32_t,
		    pid_t, void *, u_int16_t);
struct buf	*imsg_create(struct imsgbuf *, enum imsg_type, u_int32_t, pid_t,
		    u_int16_t);
int		 imsg_add(struct buf *, void *, u_int16_t);
int		 imsg_close(struct imsgbuf *, struct buf *);
void		 imsg_free(struct imsg *);
void		 imsg_event_add(struct imsgbuf *);
@


1.12
log
@Change the behaviour of redistribute default.
Now a default route have to be present in the fib to be correctly advertised.

Spotted and tested by Steven Surdok on ripd.
ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.11 2008/12/17 14:19:39 michele Exp $ */
d59 2
@


1.11
log
@Add support for demotion counter.
When interfaces go up/down the demotion counter of the
specified group is decreased/increased.

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.10 2007/10/24 20:16:49 claudio Exp $ */
a60 1
#define REDISTRIBUTE_DEFAULT	0x02
d258 2
a259 1
#define	REDIST_NO		0x10
@


1.10
log
@ctl_rt flags should be u_int16_t -- noticed by lint
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.9 2007/10/18 17:00:59 deraadt Exp $ */
d131 2
a132 1
	IMSG_SEND_TRIGGERED_UPDATE
d209 1
d280 1
d351 5
d391 6
@


1.9
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.8 2007/10/18 09:47:57 claudio Exp $ */
d335 1
a335 1
	u_int8_t		 flags;
@


1.8
log
@Massive cleanup in the authentication code. the simple auth_key and the crypt
keys are not strings so a) use u_int8_t instead of char and b) uses memcpy
to copy the full MAX_SIMPLE_AUTH_LEN resp. MD5_DIGEST_LENGTH bytes around.
The parser needs some special code to ensure that the string is not to long
and if it is shorter then the buffer the rest needs to be zero padded.
Avoid to use strncpy() instead use a bzero(); memcpy() combo.
with and OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.7 2007/09/11 18:05:36 claudio Exp $ */
d205 1
a205 1
	LIST_HEAD(, nbr)         nbr_list;
d207 1
a207 1
	char                     name[IF_NAMESIZE];
d209 3
a211 3
	struct in_addr           addr;
	struct in_addr           dst;
	struct in_addr           mask;
@


1.7
log
@More baudrate fixes. Again don't forget to initialize the iface->baudrate.
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.6 2007/09/11 17:26:22 henning Exp $ */
d187 1
a187 1
	char			 key[MD5_DIGEST_LENGTH];
d208 1
a208 1
	char			 auth_key[MAX_SIMPLE_AUTH_LEN];
@


1.6
log
@baudrate, two non-obvious ones marked for michele
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.5 2007/01/08 13:01:10 claudio Exp $ */
d216 1
d218 1
a218 2
	u_long			 mtu;
	u_long			 baudrate;	/* XXX u_int64_t */
d315 1
a315 2
	u_int32_t		 baudrate;	/* XXX 32bit only? */

@


1.5
log
@New redistribute code adapted from ospfd. It is now possible to do the same
redistribute setups as in ospfd (rtlables, per prefix, negation).
Tested, input and OK michele@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.4 2006/11/15 20:21:46 deraadt Exp $ */
d218 1
a218 1
	u_long			 baudrate;
d297 1
a297 1
	u_long		 baudrate;
d315 1
a315 1
	u_int32_t		 baudrate;
@


1.4
log
@remove double define; dunceor@@gmail.com
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.3 2006/10/31 23:43:11 michele Exp $ */
d60 2
a61 4
#define	REDISTRIBUTE_NONE	0x0
#define	REDISTRIBUTE_STATIC	0x01
#define	REDISTRIBUTE_CONNECTED	0x02
#define	REDISTRIBUTE_DEFAULT	0x04
d253 15
d272 2
a278 1
	int			 redistribute_flags;
d281 1
d286 7
a292 6
	struct in_addr   prefix;
	struct in_addr   netmask;
	struct in_addr	 nexthop;
	u_int8_t	 metric;
	u_int16_t	 flags;
	u_short		 ifindex;
d408 5
@


1.3
log
@create a temporary neighbor instead of a permanent one when a request is received
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.2 2006/10/31 07:16:45 mcbride Exp $ */
a33 1
#define	READ_BUF_SIZE		65535
@


1.2
log
@Time is not a secret.
Modulate the timer with an MD5 hash of the key to generate the sequence number.
Ensure that the most significant bit of the modulated value is 0 to prevent
wrapping of the sequence number.

ok michele@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ripd.h,v 1.1 2006/10/18 16:11:58 norby Exp $ */
d183 1
@


1.1
log
@Welcome ripd
started by Michele Marchetto some time ago by using the imsg/three process framework
of ospfd. He implemented most of the daemon with a little help and guidance from
Claudio and I.

Currently the daemon is more or less complete, with the exception of key lifetime
and rollover.

Not yet connected to the builds.
OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d188 1
@

