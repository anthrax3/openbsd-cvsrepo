head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.28
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.30
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.26
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.22
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.24
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.16
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.20
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.18
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.14
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.12
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.10
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.8
	OPENBSD_5_0:1.11.0.6
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.4
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.10
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.6
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.4
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4;
locks; strict;
comment	@ * @;


1.11
date	2010.05.26.13.56.08;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2009.09.26.11.12.50;	author michele;	state Exp;
branches;
next	1.9;

1.9
date	2007.10.24.20.52.50;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.18.17.00.59;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2007.10.18.09.47.57;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2007.10.17.20.36.27;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2007.03.31.09.49.20;	author michele;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.27.15.02.34;	author stevesk;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.31.07.16.45;	author mcbride;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.19.12.29.58;	author mcbride;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.16.11.58;	author norby;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Rename some imsg bits to make namespace collisions less likely buf to
ibuf, buf_read to ibuf_read, READ_BUF_SIZE to IBUF_READ_SIZE.

ok henning gilles claudio jacekm deraadt
@
text
@/*	$OpenBSD: auth.c,v 1.10 2009/09/26 11:12:50 michele Exp $ */

/*
 * Copyright (c) 2006 Michele Marchetto <mydecay@@openbeer.it>
 * Copyright (c) 2004, 2005 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <limits.h>
#include <md5.h>
#include <stdlib.h>
#include <string.h>

#include "ripd.h"
#include "rip.h"
#include "log.h"
#include "ripe.h"

u_int32_t	 auth_calc_modulator(struct auth_md *md);
struct auth_md	*md_list_find(struct auth_md_head *, u_int8_t);
void		 auth_trailer_header_gen(struct ibuf *);
u_int32_t	 auth_get_seq_num(struct auth_md*);

u_int32_t
auth_calc_modulator(struct auth_md *md)
{
	u_int32_t		r;
	MD5_CTX			md5ctx;
	u_int8_t		digest[MD5_DIGEST_LENGTH];

	MD5Init(&md5ctx);
	MD5Update(&md5ctx, (void *)&md->keyid, sizeof(md->keyid));
	MD5Update(&md5ctx, (void *)&md->key, MD5_DIGEST_LENGTH);
	MD5Final(digest, &md5ctx);

	bcopy(&digest, &r, sizeof(r));

	return ((r >> 1) - time(NULL));
}

u_int32_t
auth_get_seq_num(struct auth_md *md)
{
	return (time(NULL) + md->seq_modulator);
}

void
auth_trailer_header_gen(struct ibuf *buf)
{
	u_int16_t	 field1 = 0xFFFF;
	u_int16_t	 field2 = htons(0x01);

	ibuf_add(buf, &field1, sizeof(field1));
	ibuf_add(buf, &field2, sizeof(field2));
}

/* XXX add the support for key lifetime and rollover */
int
auth_validate(u_int8_t **buf, u_int16_t *len, struct iface *iface,
    struct nbr *nbr, struct nbr_failed *nbr_failed, u_int32_t *crypt_seq_num)
{
	MD5_CTX			 hash;
	u_int8_t		 digest[MD5_DIGEST_LENGTH];
	u_int8_t		 recv_digest[MD5_DIGEST_LENGTH];
	char			 pwd[MAX_SIMPLE_AUTH_LEN];
	struct rip_auth		*auth_head;
	struct md5_auth		*a;
	struct auth_md		*md;
	u_int8_t		*auth_data;
	u_int8_t		*b = *buf;

	*buf += RIP_HDR_LEN;
	*len -= RIP_HDR_LEN;

	auth_head = (struct rip_auth *)(*buf);

	if (auth_head->auth_fixed != AUTH) {
		if (iface->auth_type != AUTH_NONE) {
			log_debug("auth_validate: packet carrying no"
			    " authentication");
			return (-1);
		}
		return (0);
	} else {
		if (ntohs(auth_head->auth_type) !=
		    (u_int16_t)iface->auth_type) {
			log_debug("auth_validate: wrong auth type");
			return (-1);
		}
	}

	switch (iface->auth_type) {
	case AUTH_SIMPLE:
		bcopy(*buf+sizeof(*auth_head), pwd, MAX_SIMPLE_AUTH_LEN);
		if (bcmp(pwd, iface->auth_key, MAX_SIMPLE_AUTH_LEN)) {
			log_debug("auth_validate: wrong password, "
			    "interface: %s", iface->name);
			return (-1);
		}
		break;
	case AUTH_CRYPT:
		a = (struct md5_auth *)(*buf + sizeof(*auth_head));

		if ((md = md_list_find(&iface->auth_md_list,
		    a->auth_keyid)) == NULL) {
			log_debug("auth_validate: keyid %d not configured, "
			    "interface %s", a->auth_keyid,
			    iface->name);
			return (-1);
		}

		if (nbr != NULL) {
			if (ntohl(a->auth_seq) < nbr->auth_seq_num) {
				log_debug("auth_validate: decreasing seq num, "
				    "interface %s", iface->name);
				return (-1);
			}
		} else if (nbr_failed != NULL) {
			if (ntohl(a->auth_seq) < nbr_failed->auth_seq_num &&
			    ntohl(a->auth_seq)) {
				log_debug("auth_validate: decreasing seq num, "
				    "interface %s", iface->name);
				return (-1);
			}
		}

		/* XXX: maybe validate also the trailer header */
		if (a->auth_length != MD5_DIGEST_LENGTH + AUTH_TRLR_HDR_LEN) {
			log_debug("auth_validate: invalid key length, "
			    "interface %s", iface->name);
			return (-1);
		}

		auth_data = *buf;
		auth_data += ntohs(a->auth_offset);

		/* save the received digest and clear it in the packet */
		bcopy(auth_data, recv_digest, sizeof(recv_digest));
		bzero(auth_data, MD5_DIGEST_LENGTH);

		/* insert plaintext key */
		memcpy(digest, md->key, MD5_DIGEST_LENGTH);

		/* calculate MD5 digest */
		MD5Init(&hash);
		MD5Update(&hash, b, ntohs(a->auth_offset) + RIP_HDR_LEN);
		MD5Update(&hash, digest, MD5_DIGEST_LENGTH);
		MD5Final(digest, &hash);

		if (bcmp(recv_digest, digest, sizeof(digest))) {
			log_debug("auth_validate: invalid MD5 digest, "
			    "interface %s", iface->name);
			return (-1);
		}

		*crypt_seq_num = ntohl(a->auth_seq);

		*len -= AUTH_TRLR_HDR_LEN + MD5_DIGEST_LENGTH;

		break;
	default:
		log_debug("auth_validate: unknown auth type, interface %s",
		    iface->name);
		return (-1);
	}

	*buf += RIP_ENTRY_LEN;
	*len -= RIP_ENTRY_LEN;

	return (0);
}

int
auth_gen(struct ibuf *buf, struct iface *iface)
{
	struct rip_auth		 auth_head;
	struct md5_auth		 a;
	struct auth_md		 *md;

	auth_head.auth_fixed = AUTH;
	auth_head.auth_type = htons(iface->auth_type);

	ibuf_add(buf, &auth_head, sizeof(auth_head));

	switch (iface->auth_type) {
	case AUTH_SIMPLE:
		ibuf_add(buf, &iface->auth_key, MAX_SIMPLE_AUTH_LEN);
		break;
	case AUTH_CRYPT:
		if ((md = md_list_find(&iface->auth_md_list,
		    iface->auth_keyid)) == NULL) {
			log_debug("auth_gen: keyid %d not configured, "
			    "interface %s", iface->auth_keyid, iface->name);
			return (-1);
		}
		bzero(&a, sizeof(a));
		a.auth_keyid = iface->auth_keyid;
		a.auth_seq = htonl(auth_get_seq_num(md));
		a.auth_length = MD5_DIGEST_LENGTH + AUTH_TRLR_HDR_LEN;

		ibuf_add(buf, &a, sizeof(a));
		break;
	default:
		log_debug("auth_gen: unknown auth type, interface %s",
		    iface->name);
		return (-1);
	}

	return (0);
}

int
auth_add_trailer(struct ibuf *buf, struct iface *iface)
{
	MD5_CTX			 hash;
	u_int8_t		 digest[MD5_DIGEST_LENGTH];
	struct auth_md		*md;
	struct md5_auth		*a;
	int			 pos;

	pos = sizeof(struct rip_hdr) + sizeof(struct rip_auth);

	/* add offset to header */
	a = ibuf_seek(buf, pos, sizeof(*a));
	a->auth_offset = htons(buf->wpos);

	/* insert plaintext key */
	if ((md = md_list_find(&iface->auth_md_list,
	    iface->auth_keyid)) == NULL) {
		log_debug("auth_add_trailer: keyid %d not configured, "
		    "interface %s", iface->auth_keyid, iface->name);
			return (-1);
	}

	memcpy(digest, md->key, MD5_DIGEST_LENGTH);

	auth_trailer_header_gen(buf);

	/* calculate MD5 digest */
	MD5Init(&hash);
	MD5Update(&hash, buf->buf, buf->wpos);
	MD5Update(&hash, digest, MD5_DIGEST_LENGTH);
	MD5Final(digest, &hash);

	return (ibuf_add(buf, digest, MD5_DIGEST_LENGTH));
}

/* md list */
int
md_list_add(struct auth_md_head *head, u_int8_t keyid, char *key)
{
	struct auth_md	*md;

	if (strlen(key) > MD5_DIGEST_LENGTH)
		return (-1);

	if ((md = md_list_find(head, keyid)) != NULL) {
		/* update key */
		bzero(md->key, sizeof(md->key));
		memcpy(md->key, key, strlen(key));
		return (0);
	}

	if ((md = calloc(1, sizeof(struct auth_md))) == NULL)
		fatalx("md_list_add");

	md->keyid = keyid;
	memcpy(md->key, key, strlen(key));
	md->seq_modulator = auth_calc_modulator(md);
	TAILQ_INSERT_TAIL(head, md, entry);

	return (0);
}

void
md_list_copy(struct auth_md_head *to, struct auth_md_head *from)
{
	struct auth_md	*m, *md;

	TAILQ_INIT(to);

	TAILQ_FOREACH(m, from, entry) {
		if ((md = calloc(1, sizeof(struct auth_md))) == NULL)
			fatalx("md_list_copy");

		md->keyid = m->keyid;
		memcpy(md->key, m->key, sizeof(md->key));
		md->seq_modulator = m->seq_modulator;
		TAILQ_INSERT_TAIL(to, md, entry);
	}
}

void
md_list_clr(struct auth_md_head *head)
{
	struct auth_md	*m;

	while ((m = TAILQ_FIRST(head)) != NULL) {
		TAILQ_REMOVE(head, m, entry);
		free(m);
	}
}

struct auth_md *
md_list_find(struct auth_md_head *head, u_int8_t keyid)
{
	struct auth_md	*m;

	TAILQ_FOREACH(m, head, entry)
		if (m->keyid == keyid)
			return (m);

	return (NULL);
}
@


1.10
log
@Whitespace cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: auth.c,v 1.9 2007/10/24 20:52:50 claudio Exp $ */
d34 1
a34 1
void		 auth_trailer_header_gen(struct buf *);
d61 1
a61 1
auth_trailer_header_gen(struct buf *buf)
d66 2
a67 2
	buf_add(buf, &field1, sizeof(field1));
	buf_add(buf, &field2, sizeof(field2));
d187 1
a187 1
auth_gen(struct buf *buf, struct iface *iface)
d196 1
a196 1
	buf_add(buf, &auth_head, sizeof(auth_head));
d200 1
a200 1
		buf_add(buf, &iface->auth_key, MAX_SIMPLE_AUTH_LEN);
d214 1
a214 1
		buf_add(buf, &a, sizeof(a));
d226 1
a226 1
auth_add_trailer(struct buf *buf, struct iface *iface)
d237 1
a237 1
	a = buf_seek(buf, pos, sizeof(*a));
d258 1
a258 1
	return (buf_add(buf, digest, MD5_DIGEST_LENGTH));
@


1.9
log
@Make the packet buffer u_int8_t * everywhere. This is binary data and not
a string.
@
text
@d1 1
a1 1
/*	$OpenBSD: auth.c,v 1.8 2007/10/18 17:00:59 deraadt Exp $ */
d48 1
a48 1
	
@


1.8
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: auth.c,v 1.7 2007/10/18 09:47:57 claudio Exp $ */
d72 2
a73 2
auth_validate(char **buf, u_int16_t *len, struct iface *iface, struct nbr *nbr,
    struct nbr_failed *nbr_failed, u_int32_t *crypt_seq_num)
d82 2
a83 2
	char			*auth_data;
	char			*b = *buf;
@


1.7
log
@Massive cleanup in the authentication code. the simple auth_key and the crypt
keys are not strings so a) use u_int8_t instead of char and b) uses memcpy
to copy the full MAX_SIMPLE_AUTH_LEN resp. MD5_DIGEST_LENGTH bytes around.
The parser needs some special code to ensure that the string is not to long
and if it is shorter then the buffer the rest needs to be zero padded.
Avoid to use strncpy() instead use a bzero(); memcpy() combo.
with and OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: auth.c,v 1.6 2007/10/17 20:36:27 deraadt Exp $ */
d32 1
a32 1
u_int32_t	 auth_calc_modulator(struct auth_md  *md);
d38 1
a38 1
auth_calc_modulator(struct auth_md  *md)
@


1.6
log
@wrong type for digest; ok claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: auth.c,v 1.5 2007/03/31 09:49:20 michele Exp $ */
d155 1
a155 2
		bzero(digest, MD5_DIGEST_LENGTH);
		strncpy(digest, md->key, MD5_DIGEST_LENGTH);
d248 1
a248 2
	bzero(digest, MD5_DIGEST_LENGTH);
	strncpy(digest, md->key, MD5_DIGEST_LENGTH);
d262 1
a262 1
void
d267 3
d272 3
a274 2
		strncpy(md->key, key, sizeof(md->key));
		return;
d281 1
a281 1
	strncpy(md->key, key, sizeof(md->key));
d284 2
d300 1
a300 1
		strncpy(md->key, m->key, sizeof(md->key));
@


1.5
log
@Some code cleanups. Added one lint command, removed one unused function and
some other cosmetics.
@
text
@d1 1
a1 1
/*	$OpenBSD: auth.c,v 1.4 2006/11/27 15:02:34 stevesk Exp $ */
d42 1
a42 1
	char			digest[MD5_DIGEST_LENGTH];
@


1.4
log
@use correct function name in error message; ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: auth.c,v 1.3 2006/10/31 07:16:45 mcbride Exp $ */
d201 1
a201 1
		return (buf_add(buf, &iface->auth_key, MAX_SIMPLE_AUTH_LEN));
d215 1
a215 1
		return (buf_add(buf, &a, sizeof(a)));
d218 3
a220 2
		/* NOTREACHED */
		break;
@


1.3
log
@Time is not a secret.
Modulate the timer with an MD5 hash of the key to generate the sequence number.
Ensure that the most significant bit of the modulated value is 0 to prevent
wrapping of the sequence number.

ok michele@@
@
text
@d1 1
a1 1
/*	$OpenBSD: auth.c,v 1.2 2006/10/19 12:29:58 mcbride Exp $ */
d292 1
a292 1
			fatalx("md_list_add");
@


1.2
log
@Correct function name in log_debug() messages
@
text
@d1 1
a1 1
/*	$OpenBSD: auth.c,v 1.1 2006/10/18 16:11:58 norby Exp $ */
d32 1
d35 1
a35 1
u_int32_t	 auth_get_seq_num(void);
d38 1
a38 1
auth_get_seq_num()
d40 18
a57 1
	return time(NULL);
d192 1
d204 6
d212 1
a212 1
		a.auth_seq = htonl(auth_get_seq_num());
d279 1
d296 1
@


1.1
log
@Welcome ripd
started by Michele Marchetto some time ago by using the imsg/three process framework
of ospfd. He implemented most of the daemon with a little help and guidance from
Claudio and I.

Currently the daemon is more or less complete, with the exception of key lifetime
and rollover.

Not yet connected to the builds.
OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d218 1
a218 1
		log_debug("auth_validate: keyid %d not configured, "
@

