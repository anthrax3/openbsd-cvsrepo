head	1.12;
access;
symbols
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.12
date	2004.05.28.20.15.48;	author brad;	state dead;
branches;
next	1.11;

1.11
date	2003.07.04.17.31.19;	author avsm;	state Exp;
branches;
next	1.10;

1.10
date	2003.04.05.18.02.32;	author avsm;	state Exp;
branches;
next	1.9;

1.9
date	2003.04.05.16.06.01;	author avsm;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.05.10.42.19;	author avsm;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.04.08.56.01;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.06.51.42;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	2001.04.08.16.45.48;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	98.10.13.23.09.54;	author marc;	state Exp;
branches;
next	1.3;

1.3
date	97.01.17.07.14.17;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.06.04.08.43.46;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.06.04.07.56.14;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.12
log
@bye bye old package tools.

ok deraadt@@
@
text
@/*	$OpenBSD: str.c,v 1.11 2003/07/04 17:31:19 avsm Exp $	*/

#ifndef lint
static const char rcsid[] = "$OpenBSD: str.c,v 1.11 2003/07/04 17:31:19 avsm Exp $";
#endif

/*
 * FreeBSD install - a package for the installation and maintainance
 * of non-core utilities.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * Jordan K. Hubbard
 * 18 July 1993
 *
 * Miscellaneous string utilities.
 *
 */

#include <err.h>
#include <fnmatch.h>
#include "lib.h"

/* Return the filename portion of a path */
char *
basename_of(char *str)
{
	char *slash;

	return ((slash = strrchr(str, '/')) == (char *) NULL) ? str : slash + 1;
}

/* Return the dirname portion of a path */
char *
dirname_of(const char *path)
{
	size_t	cc;
	char	*s;
	char	*t;

	if ((s = strrchr(path, '/')) == (char *) NULL) {
		return ".";
	}
	if (s == path) {
		/* "/foo" -> return "/" */
		return "/";
	}
	cc = (size_t)(s - path) + 1;
	if ((t = (char *) malloc(cc)) == (char *) NULL) {
		errx(1, "out of memory in dirname_of");
	}
	(void) memcpy(t, path, cc);
	t[cc] = 0;
	return t;
}

char *
strconcat(char *s1, char *s2)
{
    static char tmp[FILENAME_MAX];

    strlcpy(tmp, s1 ? s1 : s2, sizeof(tmp));
    if (s1 && s2)
	strlcat(tmp, s2, sizeof(tmp));
    return tmp;
}

/* Get a string parameter as a file spec or as a "contents follow -" spec */
char *
get_dash_string(char **str)
{
    char *s = *str;

    if (*s == '-')
	*str = copy_string(s + 1);
    else
	*str = fileGetContents(s);
    return *str;
}

/* Rather Obvious */
char *
copy_string(char *str)
{
    char *ret;

    if (!str)
	ret = NULL;
    else {
	ret = strdup(str);
    }
    return ret;
}

/* Return TRUE if 'str' ends in suffix 'suff' */
Boolean
suffix(char *str, char *suff)
{
    char *idx;
    Boolean ret = FALSE;

    idx = strrchr(str, '.');
    if (idx && !strcmp(idx + 1, suff))
	ret = TRUE;
    return ret;
}

/* Assuming str has a suffix, brutally murder it! */
void
nuke_suffix(char *str)
{
    char *idx;

    idx = strrchr(str, '.');
    if (idx)
	*idx = '\0';  /* Yow!  Don't try this on a const! */
}

/* Lowercase a whole string */
void
str_lowercase(char *str)
{
    while (*str) {
	*str = tolower(*str);
	++str;
    }
}


enum deweycmp_ops {
	GT,
	GE,
	LT,
	LE
};

/* compare two dewey decimal numbers */
static int
deweycmp(char *a, enum deweycmp_ops op, char *b)
{
	int             ad;
	int             bd;
	int             cmp;

	for (;;) {
		if (*a == 0 && *b == 0) {
			cmp = 0;
			break;
		}
		ad = bd = 0;
		for (; *a && *a != '.'; a++) {
			ad = (ad * 10) + (*a - '0');
		}
		for (; *b && *b != '.'; b++) {
			bd = (bd * 10) + (*b - '0');
		}
		if ((cmp = ad - bd) != 0) {
			break;
		}
		if (*a == '.') {
			a++;
		}
		if (*b == '.') {
			b++;
		}
	}
	return (op == GE) ? cmp >= 0 : (op == GT) ? cmp > 0 : (op == LE) ? cmp <= 0 : cmp < 0;
}

/* perform alternate match on "pkg" against "pattern", */
/* calling pmatch (recursively) to resolve any other patterns */
/* return 1 on match, 0 otherwise */
static int
alternate_match(const char *pattern, const char *pkg)
{
	char           *sep;
	char            buf[FILENAME_MAX];
	char           *last;
	char           *alt;
	char           *cp;
	int             cnt;
	int             found;

	if ((sep = strchr(pattern, '{')) == (char *) NULL) {
		errx(1, "alternate_match(): '{' expected in \"%s\"", pattern);
	}
	(void) strncpy(buf, pattern, (size_t)(sep - pattern));
	alt = &buf[sep - pattern];
	last = (char *) NULL;
	for (cnt = 0, cp = sep; *cp && last == (char *) NULL ; cp++) {
		if (*cp == '{') {
			cnt++;
		} else if (*cp == '}' && --cnt == 0 && last == (char *) NULL) {
			last = cp + 1;
		}
	}
	if (cnt != 0) {
		pwarnx("Malformed alternate `%s'", pattern);
		return 1;
	}
	for (found = 0, cp = sep + 1; *sep != '}'; cp = sep + 1) {
		for (cnt = 0, sep = cp; cnt > 0 || (cnt == 0 && *sep != '}' && *sep != ','); sep++) {
			if (*sep == '{') {
				cnt++;
			} else if (*sep == '}') {
				cnt--;
			}
		}
		(void) snprintf(alt, sizeof(buf) - (alt - buf), "%.*s%s", (int) (sep - cp), cp, last);
		if (pmatch(buf, pkg) == 1) {
			found = 1;
		}
	}
	return found;
}

/* perform dewey match on "pkg" against "pattern" */
/* return 1 on match, 0 otherwise */
static int
dewey_match(const char *pattern, const char *pkg)
{
	char           *cp;
	char           *sep;
	char           *ver;
	int             found;
	enum deweycmp_ops op;
	int             n;
	char            name[FILENAME_MAX];

	found = 0;
	if ((sep = strpbrk(pattern, "<>")) == NULL)
		errx(1, "dewey_match(): '<' or '>' expexted in \"%s\"", pattern);

	/* next three lines are static in loops, too (-> cache!) */
	snprintf(name, sizeof(name), "%.*s", (int) (sep - pattern), pattern);
	op = (*sep == '>') ? (*(sep + 1) == '=') ? GE : GT : (*(sep + 1) == '=') ? LE : LT;
	ver = (op == GE || op == LE) ? sep + 2 : sep + 1;
	n = (int)(sep - pattern);
	if ((cp = strrchr(pkg, '-')) != (char *) NULL) {
		if (strncmp(pkg, name, (size_t)(cp - pkg)) == 0 && n == cp - pkg) {
			if (deweycmp(cp + 1, op, ver)) {
				found = 1;
			}
		}
	}
	return found;
}

/* perform glob match on "pkg" against "pattern" */
/* return 1 on match, 0 otherwise */
static int
glob_match(const char *pattern, const char *pkg)
{
	return fnmatch(pattern, pkg, FNM_PERIOD) == 0;
}

/* perform simple match on "pkg" against "pattern" */
/* return 1 on match, 0 otherwise */
static int
simple_match(const char *pattern, const char *pkg)
{
	return !strcmp(pattern, pkg);
}

/* match pkg against pattern, return 1 if matching, 0 else */
/*
 * Optimize: this is called many times in readdir()-loops, where the
 * pattern doesn't change, so the {,} alternates may be unrolles/cached.
 */
int 
pmatch(const char *pattern, const char *pkg)
{
	if (strchr(pattern, '{')) {
		/* emulate csh-type alternates */
		return alternate_match(pattern, pkg);
	}
	if (strpbrk(pattern, "<>")) {
		/* perform relational dewey match on version number */
		return dewey_match(pattern, pkg);
	}
	if (strpbrk(pattern, "*?[]")) {
		/* glob match */
		return glob_match(pattern, pkg);
	}
	/* no alternate, dewey or glob match -> simple compare */
	return simple_match(pattern, pkg);
}


/* search dir for pattern, writing the found match in buf */
/* let's hope there's only one ... - HF */
/* returns -1 on error, 1 if found, 0 otherwise. */
int
findmatchingname(const char *dir, const char *pattern, matchfn f, char *data, int len)
{
    struct dirent  *dp;
    DIR            *dirp;
    int             found;
    
    found = 0;
    if ((dirp = opendir(dir)) == NULL) {
	/* pwarnx("can't opendir dir '%s'", dir); */
	return -1;
    }
    while ((dp = readdir(dirp)) != NULL) {
	if (strcmp(dp->d_name, ".") == 0 ||
	    strcmp(dp->d_name, "..") == 0) {
	    continue;
	}
	if (pmatch(pattern, dp->d_name)) {
	    if(f)
		f(dp->d_name, data, len);
	    found=1;
	}
    }
    closedir(dirp);

    return found;    
}

/* does the pkgname contain any of the special chars ("{[]?*<>")? */
/* if so, return 1, else 0 */
int
ispkgpattern(const char *pkg)
{
    return strpbrk(pkg, "<>[]?*{") != NULL;
}

/* auxiliary function called by findbestmatchingname() */
static int
findbestmatchingname_fn(const char *pkg, char *data, int len)
{
    /* if pkg > data */
    char *s1, *s2;

    s1=strrchr(pkg, '-')+1;
    s2=strrchr(data, '-')+1;

    if(data[0] == '\0' || deweycmp(s1, GT, s2))
	strlcpy(data, pkg, len);

    return 0;
}

/* find best matching filename, i.e. the pkg with the highest
 * matching(!) version */
/* returns pointer to pkg name (which can be free(3)ed),
 * or NULL if no match is available. */
char *
findbestmatchingname(const char *dir, const char *pattern)
{
	char buf[FILENAME_MAX];

	buf[0]='\0';
	if (findmatchingname(dir, pattern, findbestmatchingname_fn, buf, sizeof(buf)) > 0 && buf[0] != '\0') {
		return strdup(buf);
	}
	return NULL;
}
@


1.11
log
@'static const char rcsid[]' to make it -Wall clean
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.10 2003/04/05 18:02:32 avsm Exp $	*/
d4 1
a4 1
static const char rcsid[] = "$OpenBSD: str.c,v 1.10 2003/04/05 18:02:32 avsm Exp $";
@


1.10
log
@remove a dead function, simplify copy_string with strdup ; rohee@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.9 2003/04/05 16:06:01 avsm Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: str.c,v 1.9 2003/04/05 16:06:01 avsm Exp $";
@


1.9
log
@correct a bad strncpy; replace with strlcat; rohee@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.8 2003/04/05 10:42:19 avsm Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: str.c,v 1.8 2003/04/05 10:42:19 avsm Exp $";
d97 1
a97 3
	int len = strlen(str) + 1;
	ret = (char *)malloc(len);
	strlcpy(ret, str, len);
a365 14
}

/* bounds-checking strncpy */
char *
strnncpy(char *to, size_t tosize, char *from, size_t cc)
{
	size_t	len;

	if ((len = cc) >= tosize - 1) {
		len = tosize - 1;
	}
	(void) strncpy(to, from, len);
	to[len] = 0;
	return to;
@


1.8
log
@some strlcpy,snprintf,strlcat conversions, tedu@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.7 2003/04/04 08:56:01 avsm Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: str.c,v 1.7 2003/04/04 08:56:01 avsm Exp $";
d69 1
a69 2
    tmp[0] = '\0';
    strncpy(tmp, s1 ? s1 : s2, FILENAME_MAX);
d71 1
a71 1
	strncat(tmp, s2, FILENAME_MAX - strlen(tmp));
@


1.7
log
@some more strcpy/strcat -> strlcpy/strlcat conversions
ok and tweaks by ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.6 2002/03/14 06:51:42 mpech Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: str.c,v 1.6 2002/03/14 06:51:42 mpech Exp $";
d98 3
a100 2
	ret = (char *)malloc(strlen(str) + 1);
	strcpy(ret, str);
@


1.6
log
@Remove \n from err/errx/warn/warnx().

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.5 2001/04/08 16:45:48 espie Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: str.c,v 1.5 2001/04/08 16:45:48 espie Exp $";
d303 1
a303 1
findmatchingname(const char *dir, const char *pattern, matchfn f, char *data)
d321 1
a321 1
		f(dp->d_name, data);
d340 1
a340 1
findbestmatchingname_fn(const char *pkg, char *data)
d349 1
a349 1
	strcpy(data, pkg);
d364 1
a364 2
	if (findmatchingname(dir, pattern, findbestmatchingname_fn, buf) > 0
	    && buf[0] != '\0') {
@


1.5
log
@Better error messages: pwarnx function, which works like pwarn, except
it shows a current package name along with the program name, e.g.,
pkg_add(foo-3.0): some error occurred.

A few messages now bear redundant pkgnames, which is much better than
doing pkg_add * and being informed that something went slightly wrong
somewhere...
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.4 1998/10/13 23:09:54 marc Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: str.c,v 1.4 1998/10/13 23:09:54 marc Exp $";
d194 1
a194 1
		errx(1, "alternate_match(): '{' expected in \"%s\"\n", pattern);
d241 1
a241 1
		errx(1, "dewey_match(): '<' or '>' expexted in \"%s\"\n", pattern);
@


1.4
log
@Sync with recent NetBSD changes:
- use snprintf in place of sprintf
- code cleanup
- Package -> package_t, PackingList -> plist_t
Also: remove files that haven't been linked in a while
Pass -q to mtree so it is quiet in the presence of symlinks
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.3 1997/01/17 07:14:17 millert Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: str.c,v 1.3 1997/01/17 07:14:17 millert Exp $";
d207 1
a207 1
		warnx("Malformed alternate `%s'", pattern);
d311 1
a311 1
	/* warnx("can't opendir dir '%s'", dir); */
@


1.3
log
@r?index -> strr?chr
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.2 1996/06/04 08:43:46 niklas Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: str.c,v 1.2 1996/06/04 08:43:46 niklas Exp $";
d27 2
d35 1
a35 1
    char *basename = str + strlen(str) - 1;
d37 25
a61 3
    while (basename != str && basename[-1] != '/')
	--basename;
    return basename;
d136 247
@


1.2
log
@Oops, screwed up the $OpenBSD$ IDs
@
text
@d1 1
a1 1
/*	$OpenBSD: str.c,v 1.1 1996/06/04 07:56:14 niklas Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD$";
d87 1
a87 1
    idx = rindex(str, '.');
d99 1
a99 1
    idx = rindex(str, '.');
@


1.1
log
@add package tools from FreeBSD
@
text
@d1 2
a2 1
#	$OpenBSD$
d4 1
a4 1
static const char *rcsid = "$OpenBSD";
@
