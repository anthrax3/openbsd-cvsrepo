head	1.14;
access;
symbols
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.9.0.4
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_8:1.8.0.10
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.8
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.8.0.6
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.4
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.14
date	2004.05.28.20.15.48;	author brad;	state dead;
branches;
next	1.13;

1.13
date	2003.07.04.17.31.19;	author avsm;	state Exp;
branches;
next	1.12;

1.12
date	2003.04.04.08.56.01;	author avsm;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.18.00.18.07;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.26.05.04.33;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2001.04.08.16.45.48;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	98.10.13.23.09.54;	author marc;	state Exp;
branches;
next	1.7;

1.7
date	98.09.07.22.30.17;	author marc;	state Exp;
branches;
next	1.6;

1.6
date	98.04.25.05.09.07;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.07.14.14.13.17;	author graichen;	state Exp;
branches;
next	1.4;

1.4
date	97.06.17.08.39.47;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.06.17.08.38.03;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.06.04.08.43.45;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.06.04.07.56.13;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.14
log
@bye bye old package tools.

ok deraadt@@
@
text
@/*	$OpenBSD: pen.c,v 1.13 2003/07/04 17:31:19 avsm Exp $	*/

#ifndef lint
static const char rcsid[] = "$OpenBSD: pen.c,v 1.13 2003/07/04 17:31:19 avsm Exp $";
#endif

/*
 * FreeBSD install - a package for the installation and maintainance
 * of non-core utilities.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * Jordan K. Hubbard
 * 18 July 1993
 *
 * Routines for managing the "play pen".
 *
 */

#include <err.h>
#include "lib.h"
#include <sys/signal.h>
#include <sys/param.h>
#include <sys/mount.h>
#include <errno.h>

/* For keeping track of where we are */
static char Current[FILENAME_MAX];
static char Previous[FILENAME_MAX];

/* Backup Current and Previous into temp. strings that are later
 * restored & freed by restore_dirs
 * This is to make nested calls to makeplaypen/leave_playpen work
 */
void
save_dirs(char **c, char **p)
{
    *c=strdup(Current);
    *p=strdup(Previous);
}

/* Restore Current and Previous from temp strings that were created
 * by safe_dirs.
 * This is to make nested calls to makeplaypen/leave_playpen work
 */
void
restore_dirs(char *c, char *p)
{
    strlcpy(Current, c, sizeof(Current));  free(c);
    strlcpy(Previous, p, sizeof(Previous)); free(p);
}

char *
where_playpen(void)
{
    return Current;
}

/* Find a good place to play. */
static char *
find_play_pen(char *pen, size_t pensize, size_t sz)
{
    char *cp;
    struct stat sb;

    if (pen[0] && stat(pen, &sb) != FAIL && (min_free(pen) >= sz))
	return pen;
    else if ((cp = getenv("PKG_TMPDIR")) != NULL && stat(cp, &sb) != FAIL && (min_free(cp) >= sz))
	(void) snprintf(pen, pensize, "%s/instmp.XXXXXXXXXX", cp);
    else if ((cp = getenv("TMPDIR")) != NULL && stat(cp, &sb) != FAIL && (min_free(cp) >= sz))
	(void) snprintf(pen, pensize, "%s/instmp.XXXXXXXXXX", cp);
    else if (stat("/var/tmp", &sb) != FAIL && min_free("/var/tmp") >= sz)
	strlcpy(pen, "/var/tmp/instmp.XXXXXXXXXX", pensize);
    else if (stat("/tmp", &sb) != FAIL && min_free("/tmp") >= sz)
	strlcpy(pen, "/tmp/instmp.XXXXXXXXXX", pensize);
    else if ((stat("/usr/tmp", &sb) == SUCCESS || mkdir("/usr/tmp", 01777) == SUCCESS) && min_free("/usr/tmp") >= sz)
	strlcpy(pen, "/usr/tmp/instmp.XXXXXXXXXX", pensize);
    else {
	cleanup(0);
	errx(2,
"can't find enough temporary space to extract the files, please set your\n"
"PKG_TMPDIR environment variable to a location with at least %lu bytes\n"
"free", (u_long)sz);
	return NULL;
    }
    return pen;
}

/*
 * Make a temporary directory to play in and chdir() to it, returning
 * pathname of previous working directory.
 */
char *
make_playpen(char *pen, size_t pensize, size_t sz)
{
    if (!find_play_pen(pen, pensize, sz))
	return NULL;

    if (!mkdtemp(pen)) {
	cleanup(0);
	errx(2, "can't mkdtemp '%s'", pen);
    }
    if (Verbose) {
	if (sz)
	    fprintf(stderr, "Requested space: %lu bytes, free space: %qd bytes in %s\n", (u_long)sz, (long long)min_free(pen), pen);
    }
    if (min_free(pen) < sz) {
	rmdir(pen);
	cleanup(0);
	errx(2, "not enough free space to create '%s'.\n"
	     "Please set your PKG_TMPDIR environment variable to a location\n"
	     "with more space and\ntry the command again", pen);
    }
    if (Current[0])
	strlcpy(Previous, Current, sizeof(Previous));
    else if (!getcwd(Previous, FILENAME_MAX)) {
	cleanup(0);
	err(1, "fatal error during execution: getcwd");
    }
    if (chdir(pen) == FAIL) {
	cleanup(0);
	errx(2, "can't chdir to '%s'", pen);
    }
    strlcpy(Current, pen, sizeof(Current));
    return Previous;
}

/* Convenience routine for getting out of playpen */
void
leave_playpen(char *save)
{
    int save_errno = errno;
    void (*oldsig)(int);

    /* XXX big signal race! */
    /* Don't interrupt while we're cleaning up */
    oldsig = signal(SIGINT, SIG_IGN);
    if (Previous[0] && chdir(Previous) == FAIL) {
	cleanup(0);	/* XXX */
	warnx("can't chdir back to '%s'", Previous);
	_exit(2);
    } else if (Current[0] && strcmp(Current, Previous)) {
        if (strcmp(Current,"/")==0) {
            fprintf(stderr,"PANIC: About to rm -rf / (not doing so, aborting)\n");
            abort();	/* XXX is abort safe? */
        }
	if (vsystem("rm -rf %s", Current))
	    pwarnx("couldn't remove temporary dir '%s'", Current);
	strlcpy(Current, Previous, sizeof(Current));	/* XXX */
    }
    if (save)
	strlcpy(Previous, save, sizeof(Previous));		/* XXX */
    else
	Previous[0] = '\0';
    signal(SIGINT, oldsig);
    errno = save_errno;
}

off_t
min_free(char *tmpdir)
{
    struct statfs buf;

    if (statfs(tmpdir, &buf) != 0) {
	warn("statfs");
	return -1;
    }
    return (off_t)buf.f_bavail * (off_t)buf.f_bsize;
}
@


1.13
log
@'static const char rcsid[]' to make it -Wall clean
@
text
@d1 1
a1 1
/*	$OpenBSD: pen.c,v 1.12 2003/04/04 08:56:01 avsm Exp $	*/
d4 1
a4 1
static const char rcsid[] = "$OpenBSD: pen.c,v 1.12 2003/04/04 08:56:01 avsm Exp $";
@


1.12
log
@some more strcpy/strcat -> strlcpy/strlcat conversions
ok and tweaks by ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pen.c,v 1.11 2002/02/18 00:18:07 millert Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: pen.c,v 1.11 2002/02/18 00:18:07 millert Exp $";
@


1.11
log
@Don't chmod 0755 the directory we just mkdtemp()'d.  mkdtemp() uses
mode 0700 which is better.  From Yozo TODA based on a FreeBSD advisory.
@
text
@d1 1
a1 1
/*	$OpenBSD: pen.c,v 1.10 2001/11/26 05:04:33 deraadt Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: pen.c,v 1.10 2001/11/26 05:04:33 deraadt Exp $";
d56 2
a57 2
    strcpy(Current, c);  free(c);
    strcpy(Previous, p); free(p);
d80 1
a80 1
	strcpy(pen, "/var/tmp/instmp.XXXXXXXXXX");
d82 1
a82 1
	strcpy(pen, "/tmp/instmp.XXXXXXXXXX");
d84 1
a84 1
	strcpy(pen, "/usr/tmp/instmp.XXXXXXXXXX");
d122 1
a122 1
	strcpy(Previous, Current);
d131 1
a131 1
    strcpy(Current, pen);
d156 1
a156 1
	strcpy(Current, Previous);	/* XXX */
d159 1
a159 1
	strcpy(Previous, save);		/* XXX */
@


1.10
log
@mostly mark signal races
@
text
@d1 1
a1 1
/*	$OpenBSD: pen.c,v 1.9 2001/04/08 16:45:48 espie Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: pen.c,v 1.9 2001/04/08 16:45:48 espie Exp $";
a108 4
    }
    if (chmod(pen, 0755) == FAIL) {
	cleanup(0);
	errx(2, "can't chmod '%s'", pen);
@


1.9
log
@Better error messages: pwarnx function, which works like pwarn, except
it shows a current package name along with the program name, e.g.,
pkg_add(foo-3.0): some error occurred.

A few messages now bear redundant pkgnames, which is much better than
doing pkg_add * and being informed that something went slightly wrong
somewhere...
@
text
@d1 1
a1 1
/*	$OpenBSD: pen.c,v 1.8 1998/10/13 23:09:54 marc Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: pen.c,v 1.8 1998/10/13 23:09:54 marc Exp $";
d32 1
d143 1
d146 1
d150 3
a152 2
	cleanup(0);
	errx(2, "can't chdir back to '%s'", Previous);
d156 1
a156 1
            abort();
d160 1
a160 1
	strcpy(Current, Previous);
d163 1
a163 1
	strcpy(Previous, save);
d167 1
@


1.8
log
@Sync with recent NetBSD changes:
- use snprintf in place of sprintf
- code cleanup
- Package -> package_t, PackingList -> plist_t
Also: remove files that haven't been linked in a while
Pass -q to mtree so it is quiet in the presence of symlinks
@
text
@d1 1
a1 1
/*	$OpenBSD: pen.c,v 1.7 1998/09/07 22:30:17 marc Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: pen.c,v 1.7 1998/09/07 22:30:17 marc Exp $";
d155 1
a155 1
	    warnx("couldn't remove temporary dir '%s'", Current);
@


1.7
log
@updated pkg_* tools.  Merged in many changes/improvements from NetBSD.
New features include md5 hash so pkg_delete won't remove files that have
changed and the ability to define conflicting packages, e.g. you can't
install both mh and nmh.  The ports tree will have to be updated to take
advantage of this.

Let me know of any problems, real or imagined :-)
@
text
@d1 1
a1 1
/*	$OpenBSD: pen.c,v 1.6 1998/04/25 05:09:07 millert Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: pen.c,v 1.6 1998/04/25 05:09:07 millert Exp $";
d37 22
d67 1
a67 1
find_play_pen(char *pen, size_t sz)
d75 1
a75 1
	sprintf(pen, "%s/instmp.XXXXXXXXXX", cp);
d77 1
a77 1
	sprintf(pen, "%s/instmp.XXXXXXXXXX", cp);
d100 1
a100 1
make_playpen(char *pen, size_t sz)
d102 1
a102 1
    if (!find_play_pen(pen, sz))
d127 2
a128 2
	upchuck("getcwd");
	return NULL;
@


1.6
log
@Use mkdtemp(3), not mktemp(3).
@
text
@d1 1
a1 1
/*	$OpenBSD: pen.c,v 1.5 1997/07/14 14:13:17 graichen Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: pen.c,v 1.5 1997/07/14 14:13:17 graichen Exp $";
d27 1
d63 5
a67 3
	barf("Can't find enough temporary space to extract the files, please set\n"
	     "your PKG_TMPDIR environment variable to a location with at least %d bytes\n"
	     "free.", sz);
d80 2
a82 3
    if (!find_play_pen(pen, sz)) {
	return NULL;
    }
d84 2
a85 2
	barf("Can't mkdtemp '%s'.", pen);
	return NULL;
d88 2
a89 2
	barf("Can't chmod 0755 '%s'.", pen);
	return NULL;
a90 1

d93 1
a93 1
	    fprintf(stderr, "Requested space: %d bytes, free space: %d bytes in %s\n", (int)sz, min_free(pen), pen);
d97 2
a98 1
	barf("Not enough free space to create: `%s'\n"
d100 1
a100 2
	     "with more space and\ntry the command again.", pen);
        return NULL;
d108 4
a111 2
    if (chdir(pen) == FAIL)
	barf("Can't chdir to '%s'.", pen);
d124 8
a131 3
    if (Previous[0] && chdir(Previous) == FAIL)
	barf("Can't chdir back to '%s'.", Previous);
    else if (Current[0] && strcmp(Current, Previous)) {
d133 1
a133 1
	    whinge("Couldn't remove temporary dir '%s'", Current);
d143 1
a143 1
size_t
d149 1
a149 1
	perror("Error in statfs");
d152 1
a152 1
    return buf.f_bavail * buf.f_bsize;
@


1.5
log
@sometimes - so at least it seems - also theo does'nt check what he is
committing :-) ... i hope i got it right now
@
text
@d1 1
a1 1
/*	$OpenBSD: pen.c,v 1.4 1997/06/17 08:39:47 deraadt Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: pen.c,v 1.4 1997/06/17 08:39:47 deraadt Exp $";
a76 24
    char *tmp;
    int i = 0;
    mode_t um;

    um = umask(S_IWGRP|S_IWOTH);
    while (1) {
	if (!find_play_pen(pen, sz)) {
	    umask(um);
	    return NULL;
	}

        if (!mktemp(pen)) {
	    barf("Can't mktemp '%s'.", pen);
	    umask(um);
	    return NULL;
        }

        if (mkdir(pen, 0755) == FAIL) {
	    if (i++ < 100) {
	        /* try again! */
	        continue;
	    }
	} else
	    break;
d78 9
a86 2
        barf("Can't mkdir '%s'.", pen);
        umask(um);
a88 1
    umask(um);
@


1.4
log
@do some umask stuff too
@
text
@d1 1
a1 1
/*	$OpenBSD: pen.c,v 1.3 1997/06/17 08:38:03 deraadt Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: pen.c,v 1.3 1997/06/17 08:38:03 deraadt Exp $";
d93 8
a100 4
        if (mkdir(pen, 0755) == FAIL && i++ < 100) {
	    /* try again! */
	    continue;
	}
@


1.3
log
@use mktemp, but use it without guessability or DOS attacks
@
text
@d1 1
a1 1
/*	$OpenBSD: pen.c,v 1.2 1996/06/04 08:43:45 niklas Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: pen.c,v 1.2 1996/06/04 08:43:45 niklas Exp $";
d79 1
d81 1
d83 2
a84 1
	if (!find_play_pen(pen, sz))
d86 1
d90 1
d99 1
d102 1
@


1.2
log
@Oops, screwed up the $OpenBSD$ IDs
@
text
@d1 1
a1 1
/*	$OpenBSD: pen.c,v 1.1 1996/06/04 07:56:13 niklas Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: pen.c,v 1.1 1996/06/04 07:56:13 niklas Exp $";
d52 1
a52 1
	sprintf(pen, "%s/instmp.XXXXXX", cp);
d54 1
a54 1
	sprintf(pen, "%s/instmp.XXXXXX", cp);
d56 1
a56 1
	strcpy(pen, "/var/tmp/instmp.XXXXXX");
d58 1
a58 1
	strcpy(pen, "/tmp/instmp.XXXXXX");
d60 1
a60 1
	strcpy(pen, "/usr/tmp/instmp.XXXXXX");
d78 1
d80 12
a91 2
    if (!find_play_pen(pen, sz))
	return NULL;
d93 1
a93 6
    if (!mktemp(pen)) {
	barf("Can't mktemp '%s'.", pen);
	return NULL;
    }
    if (mkdir(pen, 0755) == FAIL) {
	barf("Can't mkdir '%s'.", pen);
d96 1
@


1.1
log
@add package tools from FreeBSD
@
text
@d1 2
a2 1
#	$OpenBSD$
d4 1
a4 1
static const char *rcsid = "$OpenBSD: pen.c,v 1.20 1996/02/09 12:05:26 jkh Exp $";
@
