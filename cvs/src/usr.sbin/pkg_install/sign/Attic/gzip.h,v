head	1.6;
access;
symbols
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.2.0.10
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.8
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2004.05.28.20.15.48;	author brad;	state dead;
branches;
next	1.5;

1.5
date	2003.06.04.04.29.03;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.17.19.42.38;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.28.07;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.10.04.21.46.28;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	99.09.27.21.40.04;	author espie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@bye bye old package tools.

ok deraadt@@
@
text
@/* $OpenBSD: gzip.h,v 1.5 2003/06/04 04:29:03 deraadt Exp $ */
/*-
 * Copyright (c) 1999 Marc Espie.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS 
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#define GZIP_MAGIC0	'\037'
#define GZIP_MAGIC1	'\213'
/* flags values */
#define CONTINUATION	0x02
#define EXTRA_FIELD 	0x04

/* meaningful fields in a gzip header, see gzip proper for details.
   This structure should not be fiddled with outside of gzip_read_header
   and gzip_write_header 
 */
struct mygzip_header {
	char method;
	char flags;
	char stamp[6];
	char part[2];
		/* remaining extra, after know signs have been read */
	unsigned int  remaining;
};
	
#define TAGSIZE 8
#define TAGCHECK 6

typedef unsigned char SIGNTAG[8];

/* stack of signatures */
struct signature {
	SIGNTAG tag;
	int  type;
	int  length;
	char *data;
	struct signature *next;
};

/* returns from gzip_read_header */
#define GZIP_UNSIGNED 		0	/* gzip file, no signature */
#define GZIP_SIGNED 		1	/* gzip file, signature parsed ok */
#define GZIP_NOT_GZIP 		2	/* not a proper gzip file */
#define GZIP_NOT_PGPSIGNED 	3	/* gzip file, unknown extension */
extern int gzip_read_header(FILE *f, /*@@out@@*/struct mygzip_header *h, \
	/*@@null@@*/struct signature **sign);
/* gzip_write_header returns 1 for success */
extern int gzip_write_header(FILE *f, const struct mygzip_header *h, \
	/*@@null@@*/struct signature *sign);
/* writing header to memory. Returns size needed, or 0 if buffer too small
   buffer must be at least 14 characters */
extern int gzip_copy_header(const struct mygzip_header *h, \
	/*@@null@@*/struct signature *sign, \
	void (*add)(void *, const char *, size_t), void *data);

extern void free_signature(/*@@null@@*/struct signature *sign);
extern void sign_fill_tag(struct signature *sign);
#define KNOWN_TAGS 3
#define TAG_PGP 0
#define TAG_SHA1 1
#define TAG_OLD 2
#define TAG_ANY -1
#define pgptag (known_tags[TAG_PGP])
#define sha1tag (known_tags[TAG_SHA1])
extern SIGNTAG known_tags[KNOWN_TAGS];
@


1.5
log
@toast some 3 & 4 for espie
@
text
@d1 1
a1 1
/* $OpenBSD: gzip.h,v 1.4 2002/02/17 19:42:38 millert Exp $ */
@


1.4
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/* $OpenBSD: gzip.h,v 1.3 2002/02/16 21:28:07 millert Exp $ */
a12 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Marc Espie for the OpenBSD
 * Project.
@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/* $OpenBSD: gzip.h,v 1.2 1999/10/04 21:46:28 espie Exp $ */
d69 2
a70 2
extern int gzip_read_header __P((FILE *f, /*@@out@@*/struct mygzip_header *h, \
	/*@@null@@*/struct signature **sign));
d72 2
a73 2
extern int gzip_write_header __P((FILE *f, const struct mygzip_header *h, \
	/*@@null@@*/struct signature *sign));
d76 1
a76 1
extern int gzip_copy_header __P((const struct mygzip_header *h, \
d78 1
a78 1
	void (*add)(void *, const char *, size_t), void *data));
@


1.2
log
@Synch with current development:
* signatures no longer deal with zcat. Instead, we sign the gzip file
itself (stripped of the signature part of the header, of course). Thanks
Angelos.  Niels seems to think passing the header itself to sign is not
a problem, even though no-one cares about checking it ?
* gzip header handling revamped: can write to memory. Will eliminate some
pipes later on. Can stack signatures.
* taken out specific signature schemes (e.g., pgp and sha1).  Code is now
signature scheme independent, mostly, and writes with client data from
memory, e.g., check.c can invoke several checks in parallel without needing
to fork.
* need the full set of popen-like functionalities (keep track of opened
file descriptors to avoid passing them down to children)
* remove simple_check.c, functionality absorbed elsewhere.

To do:
* re-check message output and what to do with unsigned/unchecked/verified
packages,
* check pkg_add implementation and remove extra-pipe in asynchronous
checking,
* control over what to do when several signatures are stacked... Simple
way would be to disable that for now (possibility for release)
* get the code through a linter again.
@
text
@d1 1
a1 1
/* $OpenBSD: gzip.h,v 1.1 1999/09/27 21:40:04 espie Exp $ */
d80 2
a81 2
extern void free_signature __P((/*@@null@@*/struct signature *sign));
extern void sign_fill_tag __P((struct signature *sign));
@


1.1
log
@Stand-alone package signer.

Requires pgp for now, though the general scheme is generic.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d41 1
a41 2
struct mygzip_header
	{
d46 3
a48 1
	};
d50 14
d69 2
a70 2
extern int gzip_read_header 
	__P((FILE *f, /*@@out@@*/struct mygzip_header *h, /*@@null@@*/char sign[]));
d72 7
a78 6
extern int gzip_write_header
	__P((FILE *f, const struct mygzip_header *h, /*@@null@@*/const char sign[]));

#ifndef GZCAT
#define GZCAT "/usr/bin/gzcat"
#endif
d80 10
@

