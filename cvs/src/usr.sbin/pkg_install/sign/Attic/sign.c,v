head	1.6;
access;
symbols
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.3.0.16
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.14
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.12
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.10
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.8
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.6
date	2004.05.28.20.15.48;	author brad;	state dead;
branches;
next	1.5;

1.5
date	2003.06.04.04.29.03;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.25.09.08.18;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	99.10.04.21.46.29;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	99.09.28.21.31.23;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	99.09.27.21.40.04;	author espie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@bye bye old package tools.

ok deraadt@@
@
text
@/* $OpenBSD: sign.c,v 1.5 2003/06/04 04:29:03 deraadt Exp $ */
/*-
 * Copyright (c) 1999 Marc Espie.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS 
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/types.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <errno.h>
#include <signal.h>
#include <pwd.h>
#include <assert.h>
#include "stand.h"
#include "pgp.h"
#include "gzip.h"
#include "extern.h"

#define COPY_TEMPLATE "%s.sign"

static int 
embed_signature_FILE(orig, dest, sign, filename)
	/*@@temp@@*/FILE *orig;
	/*@@temp@@*/FILE *dest; 
	struct signature *sign;
	const char *filename;
{
	struct mygzip_header h;
	int c;

	if (gzip_read_header(orig, &h, NULL) == GZIP_NOT_GZIP)
		return 0;

	if (gzip_write_header(dest, &h, sign) == 0)
		return 0;
	while ((c = fgetc(orig)) != EOF && fputc(c, dest) != EOF)
		;
	if (ferror(dest) != 0) 
		return 0;
	return 1;
}

static int 
embed_signature(filename, copy, sign)
	const char *filename;
	const char *copy; 
	struct signature *sign;
{
	FILE *orig, *dest;
	int success;
	
	success = 0;
	orig= fopen(filename, "r");
	if (orig) {
		dest = fopen(copy, "w");
		if (dest) {
			success = embed_signature_FILE(orig, dest, sign, filename);
			if (fclose(dest) != 0)
				success = 0;
		}
		if (fclose(orig) != 0)
			success = 0;
	}
	return success;
}

int 
sign(filename, type, userid, envp)
	const char *filename;
	const char *userid;
	int type;
	char *envp[];
{
	char *copy;
	int result;
	struct signature *sign;
	int success;

	switch(type) {
	case TAG_PGP:
		success = retrieve_pgp_signature(filename, &sign, userid, envp);
		break;
	case TAG_SHA1:
		success =retrieve_sha1_marker(filename, &sign, userid);
		break;
	}

	if (!success) {
		fprintf(stderr, "Problem signing %s\n", filename);
		free_signature(sign);
		return 0;
	}
	if (asprintf(&copy, COPY_TEMPLATE, filename) == -1) {
		fprintf(stderr, "Can't allocate memory\n");
		free_signature(sign);
		return 0;
	}
	result = embed_signature(filename, copy, sign);
	if (result == 0) {
		fprintf(stderr, "Can't embed signature in %s\n", filename);
	} else if (unlink(filename) != 0) {
		fprintf(stderr, "Can't unlink original %s\n", filename);
		result = 0;
	} else if (rename(copy, filename) != 0) {
		fprintf(stderr, "Can't rename new file %s\n", copy);
		result = 0;
	}
	free(copy);
	free_signature(sign);
	return result;
}

@


1.5
log
@toast some 3 & 4 for espie
@
text
@d1 1
a1 1
/* $OpenBSD: sign.c,v 1.4 2003/04/25 09:08:18 henning Exp $ */
@


1.4
log
@eliminate a sprintf in code we don't use, prodded by and ok jsyn@@
@
text
@d1 1
a1 1
/* $OpenBSD: sign.c,v 1.3 1999/10/04 21:46:29 espie Exp $ */
a12 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Marc Espie for the OpenBSD
 * Project.
@


1.3
log
@Synch with current development:
* signatures no longer deal with zcat. Instead, we sign the gzip file
itself (stripped of the signature part of the header, of course). Thanks
Angelos.  Niels seems to think passing the header itself to sign is not
a problem, even though no-one cares about checking it ?
* gzip header handling revamped: can write to memory. Will eliminate some
pipes later on. Can stack signatures.
* taken out specific signature schemes (e.g., pgp and sha1).  Code is now
signature scheme independent, mostly, and writes with client data from
memory, e.g., check.c can invoke several checks in parallel without needing
to fork.
* need the full set of popen-like functionalities (keep track of opened
file descriptors to avoid passing them down to children)
* remove simple_check.c, functionality absorbed elsewhere.

To do:
* re-check message output and what to do with unsigned/unchecked/verified
packages,
* check pkg_add implementation and remove extra-pipe in asynchronous
checking,
* control over what to do when several signatures are stacked... Simple
way would be to disable that for now (possibility for release)
* get the code through a linter again.
@
text
@d1 1
a1 1
/* $OpenBSD: sign.c,v 1.2 1999/09/28 21:31:23 espie Exp $ */
d117 1
a117 2
	copy = malloc(strlen(filename)+sizeof(COPY_TEMPLATE));
	if (copy == NULL) {
a121 1
	sprintf(copy, COPY_TEMPLATE, filename);
@


1.2
log
@Debug code is one thing, commenting out pclose is another...
@
text
@d1 1
a1 1
/* $OpenBSD: sign.c,v 1.1 1999/09/27 21:40:04 espie Exp $ */
d34 1
d37 1
a42 2
#define SIGN_TEMPLATE "%s %s | %s +batchmode +compress=off -f -s"
#define SIGN2_TEMPLATE "%s %s | %s +batchmode +compress=off -f -u %s -s"
a44 32
static int
retrieve_signature(filename, sign, userid)
	const char *filename; 
	char sign[];
	const char *userid;
{
	char *buffer;
	FILE *cmd;

	if (userid) {
		buffer = malloc(strlen(GZCAT) + strlen(filename) +
		    strlen(PGP) + strlen(userid) + sizeof(SIGN2_TEMPLATE));
		if (!buffer)
			return 0;
		sprintf(buffer, SIGN2_TEMPLATE, GZCAT, filename, PGP, userid);
    	} else {
		buffer = malloc(strlen(GZCAT) + strlen(filename) +
		    strlen(PGP) + sizeof(SIGN_TEMPLATE));
		if (!buffer)
			return 0;
		sprintf(buffer, SIGN_TEMPLATE, GZCAT, filename, PGP);
	}
	cmd = popen(buffer, "r");
	free(buffer);
	if (!cmd)
		return 0;
	if (fread(sign, 1, SIGNSIZE, cmd) != SIGNSIZE)
		return 0;
	(void)pclose(cmd);
	return 1;
}

d49 1
a49 1
	const char sign[]; 
d55 1
a55 1
	if (read_header_and_diagnose(orig, &h, NULL, filename) == 0)
d71 1
a71 1
	const char sign[];
d92 1
a92 1
sign(filename, userid, envp)
d95 2
a96 1
	/*@@unused@@*/char *envp[] __attribute__((unused));
a97 1
	char sign[SIGNSIZE];
d100 2
d103 10
a112 1
	if (retrieve_signature(filename, sign, userid) == 0) {
d114 1
d120 1
d135 1
a136 44
}

void
handle_passphrase()
{
	pid_t pid;
	int fd[2];
	char *p;

		/* Retrieve the pgp passphrase */
	p = getpass("Enter passphrase:");

		/* somewhat kludgy code to get the passphrase to pgp, see 
		   pgp documentation for the gore
		 */
	if (pipe(fd) != 0)	{
		perror("pkg_sign");
		exit(EXIT_FAILURE);
	}
	switch(pid = fork()) {
	case -1:
		perror("pkg_sign");
		exit(EXIT_FAILURE);
	case 0:
		{
			(void)close(fd[0]);
				/* the child fills the pipe with copies of the passphrase.
				   Expect violent death when father exits.
				 */
			for(;;) {
				char c = '\n';
				(void)write(fd[1], p, strlen(p));
				(void)write(fd[1], &c, 1);
			}
		}
	default:
		{
			char buf[10];

			(void)close(fd[1]);
			(void)sprintf(buf, "%d", fd[0]);
			(void)setenv("PGPPASSFD", buf, 1);
		}
	}
@


1.1
log
@Stand-alone package signer.

Requires pgp for now, though the general scheme is generic.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d73 1
a73 3
#ifdef DEBUG_PGP
	printf("%d\n", pclose(cmd));
#endif
@

