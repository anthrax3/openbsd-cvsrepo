head	1.4;
access;
symbols
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.16
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.14
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.12
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.10
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.8
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2004.05.28.20.15.48;	author brad;	state dead;
branches;
next	1.3;

1.3
date	2003.06.04.04.29.03;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.10.04.21.46.27;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	99.09.27.21.40.03;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@bye bye old package tools.

ok deraadt@@
@
text
@/* $OpenBSD: check.c,v 1.3 2003/06/04 04:29:03 deraadt Exp $ */
/*-
 * Copyright (c) 1999 Marc Espie.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS 
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* Simple code for a stand-alone package checker */
#include <sys/types.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <stdio.h>
#include "stand.h"
#include "pgp.h"
#include "gzip.h"
#include "extern.h"

struct checker {
	void *context;
	void (*add)(void *, const char *, size_t);
	int (*get)(void *);
	int status;
};

#define MAX_CHECKERS 20

int 
check_signature(file, userid, envp, filename)
	/*@@dependent@@*/FILE *file;
	const char *userid;	
	char *envp[];
	/*@@observer@@*/const char *filename;
{
	struct signature *sign;
	struct mygzip_header h;
	int status;
	char buffer[1024];
	size_t length;
	struct checker checker[MAX_CHECKERS];
	struct signature *sweep;
	int i, j;

	status = read_header_and_diagnose(file, &h, &sign, filename);
	if (status != 1)
		return PKG_UNSIGNED;

	for (sweep = sign, i = 0;  
		sweep != NULL && i < MAX_CHECKERS;
		sweep=sweep->next, i++) {
		switch(sweep->type) {
		case TAG_OLD:
			fprintf(stderr, "File %s uses old signatures, no longer supported\n",
				filename);
			checker[i].context = NULL;
			break;
		case TAG_SHA1: 
			checker[i].context = new_sha1_checker(&h, sweep, userid, envp, filename);
			checker[i].add = sha1_add;
			checker[i].get = sha1_sign_ok;
			break;
		case TAG_PGP: 
			checker[i].context = new_pgp_checker(&h, sweep, userid, envp, filename);
			checker[i].add = pgp_add;
			checker[i].get = pgp_sign_ok;
			break;
		default:
			abort();
		}
	}
	while ((length = fread(buffer, 1, sizeof buffer, file)) > 0) 
		for (j = 0; j < i; j++)
			if (checker[j].context)
				(*checker[j].add)(checker[j].context, buffer, length);
//	for (j = i-1; j >= 0; j--)
	for (j = 0; j < i; j++)
		if (checker[j].context)
			checker[j].status = (*checker[j].get)(checker[j].context);
		else 
			checker[j].status = PKG_SIGERROR;
	free_signature(sign);
	return checker[0].status;
}

@


1.3
log
@toast some 3 & 4 for espie
@
text
@d1 1
a1 1
/* $OpenBSD: check.c,v 1.2 1999/10/04 21:46:27 espie Exp $ */
@


1.2
log
@Synch with current development:
* signatures no longer deal with zcat. Instead, we sign the gzip file
itself (stripped of the signature part of the header, of course). Thanks
Angelos.  Niels seems to think passing the header itself to sign is not
a problem, even though no-one cares about checking it ?
* gzip header handling revamped: can write to memory. Will eliminate some
pipes later on. Can stack signatures.
* taken out specific signature schemes (e.g., pgp and sha1).  Code is now
signature scheme independent, mostly, and writes with client data from
memory, e.g., check.c can invoke several checks in parallel without needing
to fork.
* need the full set of popen-like functionalities (keep track of opened
file descriptors to avoid passing them down to children)
* remove simple_check.c, functionality absorbed elsewhere.

To do:
* re-check message output and what to do with unsigned/unchecked/verified
packages,
* check pkg_add implementation and remove extra-pipe in asynchronous
checking,
* control over what to do when several signatures are stacked... Simple
way would be to disable that for now (possibility for release)
* get the code through a linter again.
@
text
@d1 1
a1 1
/* $OpenBSD: check.c,v 1.1 1999/09/27 21:40:03 espie Exp $ */
a12 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Marc Espie for the OpenBSD
 * Project.
@


1.1
log
@Stand-alone package signer.

Requires pgp for now, though the general scheme is generic.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a34 1
#include <unistd.h>
a35 3
#include <fcntl.h>
#include <paths.h>
#include <errno.h>
d41 6
a46 55
#ifndef _PATH_DEVNULL
#define _PATH_DEVNULL	"/dev/null"
#endif

typedef /*@@observer@@*/char *pchar;

static void 
gzcat(fdin, fdout, envp) 
	int fdin, fdout;
	char *envp[];
{
	pchar argv[2];

	argv[0] = GZCAT;
	argv[1] = NULL;
	if (dup2(fdin, fileno(stdin)) == -1 || 
	    dup2(fdout, fileno(stdout)) == -1 ||
	    execve(GZCAT, argv, envp) == -1)
		exit(errno);
}

static void 
pgpcheck(fd, userid, envp) 
	int fd;
	const char *userid;
	char *envp[];
{
	int fdnull;
	pchar argv[6];

	argv[0] = PGP;
	argv[1] = "+batchmode";
	argv[2] = "-f";

	if (userid) {
		argv[3] = "-u";
		argv[4] = (char *)userid;
		argv[5] = NULL;
	} else
		argv[3] = NULL;

	fdnull = open(_PATH_DEVNULL, O_RDWR);
	if (fdnull == -1 ||
	    dup2(fd, fileno(stdin)) == -1 || 
	    dup2(fdnull, fileno(stdout)) == -1 ||
	    execve(PGP, argv, envp)  == -1)
		exit(errno);
}

static int 
reap(pid)
	pid_t pid;
{
	pid_t result;
	int pstat;
d48 1
a48 5
	do {
		result = waitpid(pid, &pstat, 0);
	} while (result == -1 && errno == EINTR);
	return result == -1 ? -1 : pstat;
}
d57 1
a57 3
	FILE *file2;
	int c;
	char sign[SIGNSIZE];
d60 5
a64 2
	int togzcat[2], topgpcheck[2];
	pid_t pgpid, gzcatid;
d66 1
a66 1
	status = read_header_and_diagnose(file, &h, sign, filename);
d70 21
a90 69
	if (pipe(topgpcheck) == -1) {
		fprintf(stderr, "Error creating pipe\n");
		return PKG_SIGERROR;
	}
	switch(pgpid = fork()) {
	case -1:
		fprintf(stderr, "Error creating pgp process\n");
		return PKG_SIGERROR;
	case 0:
		if (close(topgpcheck[1]) == -1)
			exit(errno);
		pgpcheck(topgpcheck[0], userid, envp);
		/*@@notreached@@*/
		break;
	default:
		(void)close(topgpcheck[0]);
		break;
	}
	if (write(topgpcheck[1], sign, sizeof(sign)) != sizeof(sign)) {
		fprintf(stderr, "Error writing to pgp pipe\n");
		(void)close(topgpcheck[1]);
		(void)reap(pgpid);
		return PKG_SIGERROR;
	}
	if (pipe(togzcat) == -1) {
		fprintf(stderr, "Error creating pipe\n");
		(void)close(topgpcheck[1]);
		(void)reap(pgpid);
		return PKG_SIGERROR;
	}
	switch (gzcatid=fork()) {
	case -1:
		fprintf(stderr, "Error creating gzcat process\n");
		(void)reap(pgpid);
		return PKG_SIGERROR;
	case 0:
		if (close(togzcat[1]) == -1)
			exit(errno);
		gzcat(togzcat[0], topgpcheck[1], envp);
		/*@@notreached@@*/
		break;
	default:
		(void)close(topgpcheck[1]);
		(void)close(togzcat[0]);
	}

	file2 = fdopen(togzcat[1], "w");
	if (file2 == NULL) {
		(void)close(togzcat[1]);
		(void)reap(gzcatid);
		(void)reap(pgpid);
		fprintf(stderr, "Error turning fd into FILE *\n");
		return PKG_SIGERROR;
	}

	if (gzip_write_header(file2, &h, NULL) != 1) {
		(void)fclose(file2);
		(void)reap(pgpid);
		(void)reap(gzcatid);
		fprintf(stderr, "Error writing gzip header\n");
		return PKG_SIGERROR;
	}
	while((c = fgetc(file)) != EOF) {
		if (fputc(c, file2) == EOF) {
		 	fprintf(stderr, "Problem writing to zcat\n");
			(void)fclose(file2);
			(void)reap(pgpid);
			(void)reap(gzcatid);
			return PKG_SIGERROR;
a91 1

d93 12
a104 8
	status = PKG_GOODSIG;
	if (fclose(file2) != 0)
		status = PKG_SIGERROR;
	if (reap(gzcatid) != 0)
		status = PKG_SIGERROR;
	if (reap(pgpid) != 0)
		status = PKG_BADSIG;
	return status;
d106 1
@

