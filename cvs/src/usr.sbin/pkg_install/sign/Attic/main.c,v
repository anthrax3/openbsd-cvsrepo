head	1.4;
access;
symbols
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.16
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.14
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.12
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.10
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.8
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2004.05.28.20.15.48;	author brad;	state dead;
branches;
next	1.3;

1.3
date	2003.06.04.04.29.03;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.10.04.21.46.28;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	99.09.27.21.40.04;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@bye bye old package tools.

ok deraadt@@
@
text
@/* $OpenBSD: main.c,v 1.3 2003/06/04 04:29:03 deraadt Exp $ */
/*-
 * Copyright (c) 1999 Marc Espie.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS 
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/wait.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include "stand.h"
#include "gzip.h"
#include "pgp.h"
#include "extern.h"

#ifdef __OpenBSD__
extern char *__progname;
#define argv0	__progname
#else
static char *argv0;
#endif

#define NM_SIGN	"pkg_sign"

static void 
usage()
{
	fprintf(stderr, "usage: %s [-sc] [-u userid] pkg1 ...\n", argv0);
	exit(EXIT_FAILURE);
}

#define SIGN 0
#define CHECK 1

/* wrapper for the check_signature function (open file if needed) */
static int
check(filename, type, userid, envp)
	/*@@observer@@*/const char *filename;
	int type;
	/*@@null@@*/const char *userid;
	char *envp[];
{
	int result;
	FILE *file;

	if (strcmp(filename, "-") == 0)
		return check_signature(stdin, userid, envp, "stdin");
	file = fopen(filename, "r");
	if (file == NULL) {
		fprintf(stderr, "Can't open %s\n", filename);
		return 0;
	}
	result = check_signature(file, userid, envp, filename);
	if (fclose(file) == 0) {
		if (result == PKG_BADSIG || result == PKG_SIGERROR)
			return 0;
		else
			return 1;
	} else
		return 0;
}

int 
main(argc, argv, envp)
	int argc; 
	char *argv[];
	char *envp[];
{
	int success = 1;
	int ch;
	char *userid = NULL;
	int mode;
	int i;
	int type = TAG_ANY;

#ifndef BSD4_4
	set_program_name(argv[0]);
#endif
#ifdef CHECKER_ONLY
	mode = CHECK;
#else
#ifndef __OpenBSD__
	if ((argv0 = strrchr(argv[0], '/')) != NULL)
		argv0++;
	else
		argv0 = argv[0];
#endif
	if (strcmp(argv0, NM_SIGN) == 0)
		mode = SIGN;
	else
		mode = CHECK;
#endif

	while ((ch = getopt(argc, argv, "u:t:sc")) != -1) {
		switch(ch) {
		case 't':
			if (strcmp(optarg, "pgp") == 0) 
				type = TAG_PGP;
			else if (strcmp(optarg, "sha1") == 0)
				type = TAG_SHA1;
			else
				usage();
			break;
		case 'u':
			userid = strdup(optarg);
			break;
#ifndef CHECKER_ONLY
		case 's':
			mode = SIGN;
			break;
#endif
		case 'c':
			mode = CHECK;
			break;
		default:
			usage();
		}
	}
	argc -= optind;
	argv += optind;
	if (argc == 0) {
		if (mode == CHECK)
			success &= check("-", userid, envp);
		else
			usage();
	}
	
#ifndef CHECKER_ONLY
	if (mode == SIGN && type == TAG_ANY)
		type = TAG_PGP;
	if (mode == SIGN && type == TAG_PGP)
		handle_pgp_passphrase();
#endif
	for (i = 0; i < argc; i++)
		success &= (mode == SIGN ? sign : check)(argv[i], type, userid, envp);
	exit(success == 1 ? EXIT_SUCCESS : EXIT_FAILURE);
}
@


1.3
log
@toast some 3 & 4 for espie
@
text
@d1 1
a1 1
/* $OpenBSD: main.c,v 1.2 1999/10/04 21:46:28 espie Exp $ */
@


1.2
log
@Synch with current development:
* signatures no longer deal with zcat. Instead, we sign the gzip file
itself (stripped of the signature part of the header, of course). Thanks
Angelos.  Niels seems to think passing the header itself to sign is not
a problem, even though no-one cares about checking it ?
* gzip header handling revamped: can write to memory. Will eliminate some
pipes later on. Can stack signatures.
* taken out specific signature schemes (e.g., pgp and sha1).  Code is now
signature scheme independent, mostly, and writes with client data from
memory, e.g., check.c can invoke several checks in parallel without needing
to fork.
* need the full set of popen-like functionalities (keep track of opened
file descriptors to avoid passing them down to children)
* remove simple_check.c, functionality absorbed elsewhere.

To do:
* re-check message output and what to do with unsigned/unchecked/verified
packages,
* check pkg_add implementation and remove extra-pipe in asynchronous
checking,
* control over what to do when several signatures are stacked... Simple
way would be to disable that for now (possibility for release)
* get the code through a linter again.
@
text
@d1 1
a1 1
/* $OpenBSD: main.c,v 1.1 1999/09/27 21:40:04 espie Exp $ */
a12 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Marc Espie for the OpenBSD
 * Project.
@


1.1
log
@Stand-alone package signer.

Requires pgp for now, though the general scheme is generic.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d32 1
d39 1
d61 1
d63 1
a63 1
check(filename, userid, envp)
d65 1
d80 6
a85 3
	if (fclose(file) == 0)
		return result;
	else
d100 1
d102 3
d120 1
a120 3
	if (check_helpers() == 0)
		exit(EXIT_FAILURE);
	while ((ch = getopt(argc, argv, "u:sc")) != -1) {
d122 8
d155 4
a158 2
	if (mode == SIGN)
		handle_passphrase();
d161 1
a161 1
		success &= (mode == SIGN ? sign : check)(argv[i], userid, envp);
@

