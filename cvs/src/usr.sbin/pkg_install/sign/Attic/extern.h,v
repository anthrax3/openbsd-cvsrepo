head	1.7;
access;
symbols
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.3.0.10
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.8
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2004.05.28.20.15.48;	author brad;	state dead;
branches;
next	1.6;

1.6
date	2003.06.04.04.29.03;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.17.19.42.38;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.28.07;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.10.07.16.30.32;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	99.10.04.21.46.27;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	99.09.27.21.40.03;	author espie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@bye bye old package tools.

ok deraadt@@
@
text
@/* $OpenBSD: extern.h,v 1.6 2003/06/04 04:29:03 deraadt Exp $ */
/*-
 * Copyright (c) 1999 Marc Espie.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS 
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* Convention: all functions that operate on a FILE * also take a filename
   for diagnostic purposes.  The file can be connected to a pipe, so
	- don't rewind
	- don't reopen from filename.
 */

struct mygzip_header;
struct signature;

/* common.c */
extern int read_header_and_diagnose(FILE *file, \
	/*@@out@@*/struct mygzip_header *h, /*@@null@@*/struct signature **sign, \
	const char *filename);
extern int reap(pid_t pid);

/* sign.c */
extern int sign(/*@@observer@@*/const char *filename, int type, \
	/*@@null@@*/const char *userid, char *envp[]);

/* check.c */
extern int check_signature(/*@@dependent@@*/FILE *file, \
	/*@@null@@*/const char *userid, char *envp[], \
	/*@@observer@@*/const char *filename);

#define PKG_BADSIG 0
#define PKG_GOODSIG 1
#define PKG_UNSIGNED 2
#define PKG_SIGNED 4
#define PKG_SIGERROR 8
#define PKG_SIGUNKNOWN	16

typedef /*@@observer@@*/char *pchar;

#define MAXID	512
/* sha1.c */
#define SHA1_DB_NAME	"/var/db/pkg/SHA1"

extern void *new_sha1_checker(struct mygzip_header *h, \
	struct signature *sign, const char *userid, char *envp[], \
	const char *filename);

extern void sha1_add(void *arg, const char *buffer, size_t length);

extern int sha1_sign_ok(void *arg);

extern int retrieve_sha1_marker(const char *filename, \
	struct signature **sign, const char *userid);
@


1.6
log
@toast some 3 & 4 for espie
@
text
@d1 1
a1 1
/* $OpenBSD: extern.h,v 1.5 2002/02/17 19:42:38 millert Exp $ */
@


1.5
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/* $OpenBSD: extern.h,v 1.4 2002/02/16 21:28:07 millert Exp $ */
a12 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Marc Espie for the OpenBSD
 * Project.
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/* $OpenBSD: extern.h,v 1.3 1999/10/07 16:30:32 espie Exp $ */
d41 1
a41 1
extern int read_header_and_diagnose __P((FILE *file, \
d43 1
a43 1
	const char *filename));
d47 2
a48 2
extern int sign __P((/*@@observer@@*/const char *filename, int type, \
	/*@@null@@*/const char *userid, char *envp[]));
d51 1
a51 1
extern int check_signature __P((/*@@dependent@@*/FILE *file, \
d53 1
a53 1
	/*@@observer@@*/const char *filename));
d68 1
a68 1
extern void *new_sha1_checker __P((struct mygzip_header *h, \
d70 1
a70 1
	const char *filename));
d72 1
a72 2
extern void sha1_add __P((void *arg, const char *buffer, \
	size_t length));
d76 2
a77 2
extern int retrieve_sha1_marker __P((const char *filename, \
	struct signature **sign, const char *userid));
@


1.3
log
@Remove scaffolding for tracking pipe fds.
FD_CLOEXEC is much more appropriate here.
@
text
@d1 1
a1 1
/* $OpenBSD: extern.h,v 1.2 1999/10/04 21:46:27 espie Exp $ */
d44 1
a44 1
extern int reap __P((pid_t pid));
d75 1
a75 1
extern int sha1_sign_ok __P((void *arg));
@


1.2
log
@Synch with current development:
* signatures no longer deal with zcat. Instead, we sign the gzip file
itself (stripped of the signature part of the header, of course). Thanks
Angelos.  Niels seems to think passing the header itself to sign is not
a problem, even though no-one cares about checking it ?
* gzip header handling revamped: can write to memory. Will eliminate some
pipes later on. Can stack signatures.
* taken out specific signature schemes (e.g., pgp and sha1).  Code is now
signature scheme independent, mostly, and writes with client data from
memory, e.g., check.c can invoke several checks in parallel without needing
to fork.
* need the full set of popen-like functionalities (keep track of opened
file descriptors to avoid passing them down to children)
* remove simple_check.c, functionality absorbed elsewhere.

To do:
* re-check message output and what to do with unsigned/unchecked/verified
packages,
* check pkg_add implementation and remove extra-pipe in asynchronous
checking,
* control over what to do when several signatures are stacked... Simple
way would be to disable that for now (possibility for release)
* get the code through a linter again.
@
text
@d1 1
a1 1
/* $OpenBSD: extern.h,v 1.1 1999/09/27 21:40:03 espie Exp $ */
a44 5

extern int terminate_pipe __P((int fd));
extern void close_dangling_pipes __P((void));
extern void register_pipe __P((int fd, pid_t pid));

@


1.1
log
@Stand-alone package signer.

Requires pgp for now, though the general scheme is generic.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d31 6
d38 1
d40 19
a58 10
extern int read_header_and_diagnose
	__P((FILE *file, /*@@out@@*/struct mygzip_header *h, /*@@null@@*/char sign[], const char *filename));
extern int check_helpers __P((void));

extern int sign 
	__P((/*@@observer@@*/const char *filename, /*@@null@@*/const char *userid, char *envp[]));

extern int check_signature
	__P((/*@@dependent@@*/FILE *file, /*@@null@@*/const char *userid, char *envp[], /*@@observer@@*/const char *filename));
extern void handle_passphrase __P((void));
d65 16
d82 2
a83 1
extern int simple_check __P((const char *pkg_name));
@

