head	1.5;
access;
symbols
	OPENBSD_3_5:1.4.0.10
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.2.0.10
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.8
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2004.05.28.20.15.48;	author brad;	state dead;
branches;
next	1.4;

1.4
date	2002.02.17.19.42.38;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.28.07;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.10.04.21.46.28;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	99.09.27.21.40.04;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@bye bye old package tools.

ok deraadt@@
@
text
@/* $OpenBSD: pgp.h,v 1.4 2002/02/17 19:42:38 millert Exp $ */
/* Estimate size of pgp signature */
#define MAXPGPSIGNSIZE	1024

#ifndef PGP
#define PGP "/usr/local/bin/pgp"
#endif

struct mygzip_header;
struct signature;

extern void *new_pgp_checker(struct mygzip_header *h, \
	struct signature *sign, const char *userid, char *envp[], \
	const char *filename);

extern void pgp_add(void *arg, const char *buffer, size_t length);

extern int pgp_sign_ok(void *arg);

extern void handle_pgp_passphrase(void);

extern int retrieve_pgp_signature(const char *filename, \
	struct signature **sign, const char *userid, char *envp[]);
@


1.4
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/* $OpenBSD: pgp.h,v 1.3 2002/02/16 21:28:07 millert Exp $ */
@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/* $OpenBSD: pgp.h,v 1.2 1999/10/04 21:46:28 espie Exp $ */
d12 1
a12 1
extern void *new_pgp_checker __P((struct mygzip_header *h, \
d14 1
a14 1
	const char *filename));
d16 1
a16 2
extern void pgp_add __P((void *arg, const char *buffer, \
	size_t length));
d22 2
a23 2
extern int retrieve_pgp_signature __P((const char *filename, \
struct signature **sign, const char *userid, char *envp[]));
@


1.2
log
@Synch with current development:
* signatures no longer deal with zcat. Instead, we sign the gzip file
itself (stripped of the signature part of the header, of course). Thanks
Angelos.  Niels seems to think passing the header itself to sign is not
a problem, even though no-one cares about checking it ?
* gzip header handling revamped: can write to memory. Will eliminate some
pipes later on. Can stack signatures.
* taken out specific signature schemes (e.g., pgp and sha1).  Code is now
signature scheme independent, mostly, and writes with client data from
memory, e.g., check.c can invoke several checks in parallel without needing
to fork.
* need the full set of popen-like functionalities (keep track of opened
file descriptors to avoid passing them down to children)
* remove simple_check.c, functionality absorbed elsewhere.

To do:
* re-check message output and what to do with unsigned/unchecked/verified
packages,
* check pkg_add implementation and remove extra-pipe in asynchronous
checking,
* control over what to do when several signatures are stacked... Simple
way would be to disable that for now (possibility for release)
* get the code through a linter again.
@
text
@d1 1
a1 1
/* $OpenBSD: pgp.h,v 1.1 1999/09/27 21:40:04 espie Exp $ */
d19 1
a19 1
extern int pgp_sign_ok __P((void *arg));
d21 1
a21 1
extern void handle_pgp_passphrase __P((void));
@


1.1
log
@Stand-alone package signer.

Requires pgp for now, though the general scheme is generic.
@
text
@d1 3
a3 3
/* $OpenBSD$ */
/* Hardcode size of a pgp signature */
#define SIGNSIZE	168
d8 17
@

