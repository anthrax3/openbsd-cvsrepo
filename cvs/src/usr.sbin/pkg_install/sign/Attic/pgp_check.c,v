head	1.5;
access;
symbols
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.10
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.8
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2004.05.28.20.15.48;	author brad;	state dead;
branches;
next	1.4;

1.4
date	2003.06.04.04.29.03;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2001.04.08.16.45.48;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	99.10.07.16.30.32;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	99.10.04.21.46.29;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@bye bye old package tools.

ok deraadt@@
@
text
@/* $OpenBSD: pgp_check.c,v 1.4 2003/06/04 04:29:03 deraadt Exp $ */
/*-
 * Copyright (c) 1999 Marc Espie.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS 
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <stdio.h>
#include <errno.h>
#include <assert.h>
#include <unistd.h>
#include <fcntl.h>
#include <paths.h>
#include <stdlib.h>
#include <sys/stat.h>
#include "stand.h"
#include "pgp.h"
#include "gzip.h"
#include "extern.h"

#ifndef _PATH_DEVNULL
#define _PATH_DEVNULL	"/dev/null"
#endif

/* transform current process into pgp signature checker -u userid <fd */
static void 
pgpcheck(fd, userid, envp) 
	int fd;
	const char *userid;
	char *envp[];
{
	int fdnull;
	pchar argv[6];
	int argc = 0;

	argv[argc++] = PGP;
	argv[argc++] = "+batchmode";
	argv[argc++] = "-f";

	if (userid) {
		argv[argc++] = "-u";
		argv[argc++] = (char *)userid;
	}
	argv[argc++] = NULL;

	assert(argc <= sizeof argv / sizeof(pchar));

	fdnull = open(_PATH_DEVNULL, O_RDWR);
	if (fdnull == -1 ||
	    dup2(fd, fileno(stdin)) == -1 || 
	    dup2(fdnull, fileno(stdout)) == -1 ||
		 close(fdnull) == -1 || close(fd) == -1 ||
	    execve(PGP, argv, envp)  == -1)
		 perror("launching pgp");
		exit(errno);
}

struct pgp_checker {
	pid_t id;
	int fdout;
	int status;
#ifdef DEBUG_DUMP
	FILE *out;
#endif
};

void *
new_pgp_checker(h, sign, userid, envp, filename)
	struct mygzip_header *h;
	struct signature *sign;
	const char *userid;	
	char *envp[];
	/*@@observer@@*/const char *filename;
{
	struct pgp_checker *n;
	int topgpcheck[2];

	assert(sign->type == TAG_PGP);
	n = malloc(sizeof *n);

	{
		struct stat sbuf;

		if (stat(PGP, &sbuf) == -1) {
			pwarnx("%s does not exist", PGP);
			return NULL;
		}
	}
	if (n == NULL) {
		pwarnx("Can't allocate pgp_checker");
		return NULL;
	}

	if (pipe(topgpcheck) == -1) {
		warn("Pgp checker pipe");
		free(n);
		return NULL;
	}
	switch(n->id = fork()) {
	case -1:
		warn("Pgp checker process");
		free(n);
		return NULL;
	case 0:
		if (close(topgpcheck[1]) == -1)
			exit(errno);
		pgpcheck(topgpcheck[0], userid, envp);
		/*@@notreached@@*/
		break;
	default:
		(void)close(topgpcheck[0]);
		break;
	}
	n->fdout = topgpcheck[1];
		/* so that subsequent fork() won't duplicate it inadvertently */
	(void)fcntl(n->fdout, F_SETFD, FD_CLOEXEC);	
#ifdef DEBUG_DUMP
	n->out = fopen("compare", "w");
#endif
	n->status = PKG_GOODSIG;

	pgp_add(n, sign->data, sign->length);
	if (gzip_copy_header(h, sign->next, pgp_add, n) == 0) {
		pwarnx("Unexpected header in %s", filename);
		n->status = PKG_SIGERROR;
	}
	return n;
}
	
void 
pgp_add(arg, buffer, length)
	void *arg;
	const char *buffer;
	size_t length;
{
	struct pgp_checker *n = arg;

	if (n->status == PKG_GOODSIG) {
#ifdef DEBUG_DUMP
	fwrite(buffer, 1, length, n->out);
#endif
		while (length > 0) {
			ssize_t l = write(n->fdout, buffer, length);
			if (l == -1) {
				n->status = PKG_SIGERROR;
				break;
			}
			length -= l;
			buffer += l;
		}
	}
}

int
pgp_sign_ok(arg)
	void *arg;
{
	struct pgp_checker *n = arg;
	int status = n->status;

#ifdef DEBUG_DUMP
	fclose(n->out);
#endif
	if (close(n->fdout) != 0)
		status = PKG_SIGERROR;
	if (reap(n->id) != 0)
		status = PKG_BADSIG;
	free(n);
	return status;
}
@


1.4
log
@toast some 3 & 4 for espie
@
text
@d1 1
a1 1
/* $OpenBSD: pgp_check.c,v 1.3 2001/04/08 16:45:48 espie Exp $ */
@


1.3
log
@Better error messages: pwarnx function, which works like pwarn, except
it shows a current package name along with the program name, e.g.,
pkg_add(foo-3.0): some error occurred.

A few messages now bear redundant pkgnames, which is much better than
doing pkg_add * and being informed that something went slightly wrong
somewhere...
@
text
@d1 1
a1 1
/* $OpenBSD: pgp_check.c,v 1.2 1999/10/07 16:30:32 espie Exp $ */
a12 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Marc Espie for the OpenBSD
 * Project.
@


1.2
log
@Remove scaffolding for tracking pipe fds.
FD_CLOEXEC is much more appropriate here.
@
text
@d1 1
a1 1
/* $OpenBSD: pgp_check.c,v 1.1 1999/10/04 21:46:29 espie Exp $ */
d108 1
a108 1
			warnx("%s does not exist", PGP);
d113 1
a113 1
		warnx("Can't allocate pgp_checker");
d147 1
a147 1
		warnx("Unexpected header in %s", filename);
@


1.1
log
@Synch with current development:
* signatures no longer deal with zcat. Instead, we sign the gzip file
itself (stripped of the signature part of the header, of course). Thanks
Angelos.  Niels seems to think passing the header itself to sign is not
a problem, even though no-one cares about checking it ?
* gzip header handling revamped: can write to memory. Will eliminate some
pipes later on. Can stack signatures.
* taken out specific signature schemes (e.g., pgp and sha1).  Code is now
signature scheme independent, mostly, and writes with client data from
memory, e.g., check.c can invoke several checks in parallel without needing
to fork.
* need the full set of popen-like functionalities (keep track of opened
file descriptors to avoid passing them down to children)
* remove simple_check.c, functionality absorbed elsewhere.

To do:
* re-check message output and what to do with unsigned/unchecked/verified
packages,
* check pkg_add implementation and remove extra-pipe in asynchronous
checking,
* control over what to do when several signatures are stacked... Simple
way would be to disable that for now (possibility for release)
* get the code through a linter again.
@
text
@d1 1
a1 1
/* $OpenBSD: check.c,v 1.1 1999/09/27 21:40:03 espie Exp $ */
a58 2
	close_dangling_pipes();
	setsid();
a99 1
	pid_t pgpid;
d122 1
a122 1
	switch(pgpid = fork()) {
d138 2
a139 1
	register_pipe(n->fdout, pgpid);
d187 3
a189 1
	if (terminate_pipe(n->fdout) != 0)
@

