head	1.10;
access;
symbols
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.8
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.6
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.4
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3;
locks; strict;
comment	@.\" @;


1.10
date	2004.05.28.20.15.48;	author brad;	state dead;
branches;
next	1.9;

1.9
date	2003.06.12.12.59.52;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.04.04.29.03;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.17.11.13.58;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	2000.04.15.02.15.20;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.12.21.47.55;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.19.17.57.11;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	99.10.05.22.30.49;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	99.10.04.21.46.29;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	99.09.27.21.40.04;	author espie;	state Exp;
branches;
next	;


desc
@@


1.10
log
@bye bye old package tools.

ok deraadt@@
@
text
@.\" $OpenBSD: pkg_sign.1,v 1.9 2003/06/12 12:59:52 jmc Exp $
.\"
.\" Copyright (c) 1999 Marc Espie.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
.\" PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.Dd September 24, 1999
.Dt PKG_SIGN 1
.Os
.Sh NAME
.Nm pkg_sign ,
.Nm check_sign
.Nd handle package signatures
.Sh SYNOPSIS
.Nm pkg_sign
.Op Fl sc
.Op Fl t Ar type
.Op Fl u Ar id
.Op Ar
.Nm pkg_check
.Op Fl sc
.Op Fl u Ar id
.Op Ar
.Sh DESCRIPTION
.Nm pkg_sign
embeds a cryptographic signature within a gzip file
.Ar file .
.Ar type
can be
.Li pgp
(default) or
.Li sha1 .
If
.Ar type
is
.Li pgp ,
it will always prompt you for a passphrase to unlock your private
pgp key, even if you don't use a passphrase (which is a bad idea, anyway).
If
.Ar type
is
.Li sha1 ,
you must supply an
.Ar id ,
which will be recorded as the name of the package, and printed as the
SHA1 checksum.
.Pp
.Nm pkg_check
checks that cryptographic signature.
It currently disregards
.Ar type
and checks only the topmost signature.
For sha1, it checksums the file
and verifies that the result matches the list of checksums recorded in
.Pa /var/db/pkg/SHA1 .
.Pp
Options
.Fl s
and
.Fl c
can be used to force package signing or signature checking mode.
.Pp
For pgp, the
.Ar id
to use to sign the package or verify the signature can be forced with
.Fl u .
.Pp
If
.Ar file
is a single dash
.Pq Sq \&-
or absent,
.Nm check_sign
reads from the standard input.
.Pp
Package signing uses a feature of the gzip format, namely that one can
set a flag
.Dv EXTRA_FIELD
in the gzip header and store extra data between the gzip header and the
compressed file proper.
The
.Ox
signing scheme uses eight bytes markers such `SIGPGP' \+ length
or `CKSHA1' \+ length for its signatures (those markers are conveniently
eight bytes long).
.Sh RESULTS
.Nm pkg_sign
and
.Nm pkg_check
return with an exit code > 0 if anything went wrong for any
.Ar file .
For
.Nm pkg_check ,
this usually indicates that the package is not signed, or that the
signature is forged.
.Sh FILES
.Bl -tag -width "/usr/local/bin/pgp" -compact
.It Pa file.sign
Temporary file built by
.Nm pkg_sign
from
.Ar file .
.It Pa /usr/local/bin/pgp
Default path to
.Xr pgp 1 .
.It Pa /var/db/pkgs/SHA1
Recorded checksums.
.El
.Sh DIAGNOSTICS
.Bl -diag
.It "File %s is already signed"
There is a signature embedded within the gzip file already.
.Nm pkg_sign
currently does not handle multiple signatures.
.It "File %s is not a signed gzip file"
This is an unsigned package.
.It "File %s is not a gzip file"
The program couldn't find a proper gzip header.
.It "File %s contains an unknown extension"
The extended area of the gzip file has been used for an unknown purpose.
.It "File %s uses old signatures, no longer supported"
The gzip file uses a very early version of package signing that was
substantially slower.
.El
.Sh SEE ALSO
.Xr gzip 1 ,
.Xr pgp 1 ,
.Xr pkg_add 1 ,
.Xr sha1 1
.Sh BUGS
.Xr pgp 1
is an ill-designed program, which is hard to interface with.
For instance, the `separate signing scheme' it pretends to offer is
useless, as it can't be used with pipes, so that
.Nm pgp_sign
needs to kludge it by knowing the length of a pgp signature, and invoking
pgp in `seamless' signature mode, without compression of the main file,
and just retrieving the signature.
.Pp
The checking scheme is little less convoluted, namely we rebuild the file
that pgp expects on the fly.
.Pp
Paths to
.Nm pgp
and
the checksum file are hard-coded to avoid tampering and hinder flexibility.
@


1.9
log
@- section reorder
- macro fixes
- kill whitespace at EOL
- new sentence, new line
@
text
@d1 1
a1 1
.\" $OpenBSD: pkg_sign.1,v 1.8 2003/06/04 04:29:03 deraadt Exp $
@


1.8
log
@toast some 3 & 4 for espie
@
text
@d1 1
a1 1
.\" $OpenBSD: pkg_sign.1,v 1.7 2001/08/17 11:13:58 mpech Exp $
a24 1

d114 13
d143 5
a164 18
.Sh FILES
.Bl -tag -width "/usr/local/bin/pgp" -compact
.It Pa file.sign
Temporary file built by
.Nm pkg_sign
from
.Ar file .
.It Pa /usr/local/bin/pgp
Default path to
.Xr pgp 1 .
.It Pa /var/db/pkgs/SHA1
Recorded checksums.
.El
.Sh SEE ALSO
.Xr gzip 1 ,
.Xr pgp 1 ,
.Xr pkg_add 1 ,
.Xr sha1 1
@


1.7
log
@o) {Open,Net,Free}BSD -> .{O,N,F}x;
o) "start sentence on new line" issues;
o) minimal -mdoc improvements;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: pkg_sign.1,v 1.6 2000/04/15 02:15:20 aaron Exp $
a12 4
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"    This product includes software developed by Marc Espie for the OpenBSD
.\"    Project.
@


1.6
log
@Mostly punctuation fixes.
@
text
@d1 1
a1 1
.\" $OpenBSD: pkg_sign.1,v 1.5 2000/04/12 21:47:55 aaron Exp $
d104 3
a106 1
The OpenBSD signing scheme uses eight bytes markers such `SIGPGP' \+ length
@


1.5
log
@Trailing whitespace begone!
@
text
@d1 1
a1 1
.\" $OpenBSD: pkg_sign.1,v 1.4 2000/03/19 17:57:11 aaron Exp $
d67 1
a67 1
.Ar id,
@


1.4
log
@Remove hard sentence breaks. Add $OpenBSD$ tags where appropriate. Some other
cleanup along the way.
@
text
@d1 1
a1 1
.\" $OpenBSD: pkg_sign.1,v 1.3 1999/10/05 22:30:49 espie Exp $ 
d18 3
a20 3
.\" THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS 
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
d22 6
a27 6
.\" PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
d52 3
a54 3
can be 
.Li pgp 
(default) or 
d57 4
a60 4
.Ar type 
is 
.Li pgp , 
it will always prompt you for a passphrase to unlock your private 
d64 2
a65 2
is 
.Li sha1 , 
d68 1
a68 1
which will be recorded as the name of the package, and printed as the 
d73 1
a73 1
It currently disregards 
d91 3
a93 3
If 
.Ar file 
is a single dash 
d99 1
a99 1
Package signing uses a feature of the gzip format, namely that one can 
d111 1
a111 1
return with an exit code > 0 if anything went wrong for any 
d121 1
a121 1
.Nm pkg_sign 
d137 1
a137 1
useless, as it can't be used with pipes, so that 
d146 1
a146 1
Paths to 
d153 1
a153 1
Temporary file built by 
d158 1
a158 1
Default path to 
d167 1
a167 1
.Xr sha1 1 
@


1.3
log
@Typo.
@
text
@d1 2
a2 1
.\" $OpenBSD: pkg_sign.1,v 1.2 1999/10/04 21:46:29 espie Exp $ 
d55 1
a55 1
.Li sha1 .  
d72 2
a73 1
checks that cryptographic signature. It currently disregards 
d75 2
a76 1
and checks only the topmost signature. For sha1, it checksums the file
d112 1
a112 1
.Ar file .  
@


1.2
log
@Synch with current development:
* signatures no longer deal with zcat. Instead, we sign the gzip file
itself (stripped of the signature part of the header, of course). Thanks
Angelos.  Niels seems to think passing the header itself to sign is not
a problem, even though no-one cares about checking it ?
* gzip header handling revamped: can write to memory. Will eliminate some
pipes later on. Can stack signatures.
* taken out specific signature schemes (e.g., pgp and sha1).  Code is now
signature scheme independent, mostly, and writes with client data from
memory, e.g., check.c can invoke several checks in parallel without needing
to fork.
* need the full set of popen-like functionalities (keep track of opened
file descriptors to avoid passing them down to children)
* remove simple_check.c, functionality absorbed elsewhere.

To do:
* re-check message output and what to do with unsigned/unchecked/verified
packages,
* check pkg_add implementation and remove extra-pipe in asynchronous
checking,
* control over what to do when several signatures are stacked... Simple
way would be to disable that for now (possibility for release)
* get the code through a linter again.
@
text
@d1 1
a1 1
.\" $OpenBSD: pkg_sign.1,v 1.1 1999/09/27 21:40:04 espie Exp $ 
d54 1
a54 2
.Li 
sha1 .  
@


1.1
log
@Stand-alone package signer.

Requires pgp for now, though the general scheme is generic.
@
text
@d1 1
a1 1
.\" $OpenBSD$ 
d39 2
a40 1
.Op Fl u Ar userid
d44 1
a44 1
.Op Fl u Ar userid
d48 1
a48 1
embeds a cryptographic signature (currently PGP) within a gzip file
d50 21
a70 2
It will always prompt you for a passphrase to unlock your private pgp key,
even if you don't use a passphrase (which is a bad idea, anyway).
d72 5
a76 9
cheks that cryptographic signature.
.Pp
This uses a feature of the gzip format, namely that one can set a flag
.Dv EXTRA_FIELD
in the gzip header and store extra data between the gzip header and the
compressed file proper.
The OpenBSD signing scheme uses `SigPGP\\0\\xa8'
as a magic number for its signature (this marker is conveniently 8 bytes
long, and the `\\0\\xa8' is the length of the pgp signature proper).
d84 2
a85 2
The 
.Ar userid
d96 9
d127 3
d147 1
a147 2
.Nm gzcat
are hard-coded to avoid tampering and hinder flexibility.
d158 2
a159 3
.It Pa /usr/bin/gzcat
Default path to 
.Xr gzcat 1 .
d162 1
d165 1
a165 1
.Xr gzip 1
@

