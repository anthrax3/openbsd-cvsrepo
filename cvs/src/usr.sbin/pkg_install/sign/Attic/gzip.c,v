head	1.5;
access;
symbols
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.16
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.14
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.12
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.10
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.8
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2004.05.28.20.15.48;	author brad;	state dead;
branches;
next	1.4;

1.4
date	2003.06.04.04.29.03;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	99.10.04.21.46.28;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	99.10.01.01.14.38;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	99.09.27.21.40.04;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@bye bye old package tools.

ok deraadt@@
@
text
@/* $OpenBSD: gzip.c,v 1.4 2003/06/04 04:29:03 deraadt Exp $ */
/*-
 * Copyright (c) 1999 Marc Espie.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS 
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/types.h>
#include <sys/wait.h>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <string.h>
#include "stand.h"
#include "gzip.h"
#include "pgp.h"

/* Signatures follow a simple format
   (endianess was chosen to conform to gzip header format)
 */

SIGNTAG known_tags[KNOWN_TAGS] = { 
	{'S', 'I', 'G', 'P', 'G', 'P', 0, 0 },
	{'C', 'K', 'S', 'H', 'A', '1', 0, 0 },
	{'S', 'i', 'g', 'P', 'G', 'P', 0, 0 }	/* old format */
};

void
sign_fill_tag(sign)
	struct signature *sign;
{
	sign->tag[6] = sign->length % 256;
	sign->tag[7] = sign->length / 256;
}
	
void
sign_fill_length(sign)
	struct signature *sign;
{
	sign->length = sign->tag[6] + 256 * sign->tag[7];
}

static size_t
stack_sign(match, t, f, sign)
	SIGNTAG match;
	int t;
	FILE *f;
	struct signature **sign;
{
	struct signature *new_sign;
	size_t length;
	
	new_sign = malloc(sizeof *new_sign);
	if (new_sign == NULL)
		return 0;
	new_sign->type = t;
	new_sign->next = NULL;
	memcpy(new_sign->tag, match, sizeof(SIGNTAG));	
	sign_fill_length(new_sign);
	new_sign->data = malloc(new_sign->length);
	if (new_sign->data == NULL || 
		fread(new_sign->data, 1, new_sign->length, f) != new_sign->length) {
		free_signature(new_sign);
		return 0;
	}
	length = new_sign->length;
	if (sign != NULL) {
		if (!*sign)
			*sign = new_sign;
		else {
			while ((*sign)->next != NULL)
				sign = &((*sign)->next);
			(*sign)->next = new_sign;
		}
	} else 
		free_signature(new_sign);
	return length;
}


static int 
add_sign(f, sign)
	FILE *f;
	struct signature **sign;
{
	SIGNTAG match;
	int i;

	if (fread(match, 1, sizeof(SIGNTAG), f) != sizeof(SIGNTAG)) 
		return -1;
	for (i = 0; i < KNOWN_TAGS; i++) {
		if (memcmp(match, known_tags[i], TAGCHECK) == 0) {
			unsigned int sign_length = stack_sign(match, i, f, sign);
			if (sign_length > 0)
				return sign_length + sizeof(SIGNTAG);
			else
				return -1;
		}
	}
	return 0;
}

static int
gzip_magic(f)
	FILE *f;
{
	int c, d;

	c = fgetc(f);
	d = fgetc(f);
	if ((unsigned char)c != (unsigned char)GZIP_MAGIC0 
		 || (unsigned char)d != (unsigned char)GZIP_MAGIC1)	
		return 0;
	else
		return 1;
}

static int
fill_gzip_fields(f, h)
	FILE *f;
	struct mygzip_header *h;
{
	int method, flags;
		
	method = fgetc(f);
	flags = fgetc(f);

	if (method == EOF || flags == EOF || fread(h->stamp, 1, 6, f) != 6)
		return 0;
	h->method = (char)method;
	h->flags = (char)flags;
	if ((h->flags & CONTINUATION) != 0)
		if (fread(h->part, 1, 2, f) != 2)
			return 0;
	return 1;
}

/* retrieve a gzip header, including signatures */
int 
gzip_read_header(f, h, sign)
	FILE *f;
	struct mygzip_header *h;
	struct signature **sign;
{
	if (sign != NULL)
		*sign = NULL;
	if (!gzip_magic(f) || !fill_gzip_fields(f, h))
		return GZIP_NOT_GZIP;

	if ((h->flags & EXTRA_FIELD) == 0) {
		h->remaining = 0;
		return GZIP_UNSIGNED;
	}
	else {
		int c;

		c = fgetc(f);
		if (c == EOF)
			return GZIP_NOT_GZIP;
		h->remaining = (unsigned)c;
		c = fgetc(f);
		if (c == EOF)
			return GZIP_NOT_PGPSIGNED;
		h->remaining += ((unsigned) c) << 8;
		while (h->remaining >= sizeof(SIGNTAG)) {
			int sign_length = add_sign(f, sign);
			if (sign_length > 0)
				h->remaining -= sign_length;
			if (sign_length < 0)
				return GZIP_NOT_GZIP;
			if (sign_length == 0)
				return GZIP_SIGNED;
		}
	return GZIP_SIGNED;
	}
}

static unsigned 
sign_length(sign)
	struct signature *sign;
{
	unsigned total = 0;

	while (sign != NULL)	{
		total += sizeof(SIGNTAG) + sign->length;
		sign = sign->next;
	}
	return total;
}

struct mydata {
	FILE *file;
	int ok;
};

static void myadd(arg, buffer, size)
	void *arg;
	const char *buffer;
	size_t size;
{
	struct mydata *d = arg;

	if (fwrite(buffer, 1, size, d->file) == size)
		d->ok = 1;
	else
		d->ok = 0;
}

/* write a gzip header, including signatures */
int 
gzip_write_header(f, h, sign)
	FILE *f;
	const struct mygzip_header *h;
	struct signature *sign;
{
	struct mydata d;
	d.file = f;
	if (gzip_copy_header(h, sign, myadd, &d) == 0)
		return 0;
	return d.ok;
}
		
int 
gzip_copy_header(h, sign, add, data)
	const struct mygzip_header *h;
	struct signature *sign;
	void (*add)(void *, const char *, size_t);
	void *data;
{
	char flags;
	size_t length;
	size_t buflength;
	size_t i;
	char *buffer;

	length = h->remaining + sign_length(sign);
	if (length) {
		buflength = length + 2;
		flags = h->flags | EXTRA_FIELD;
	} else {
		flags = h->flags & ~EXTRA_FIELD;
		buflength = 0;
	}
	buflength += 10;
	if ((h->flags & CONTINUATION) != 0)
		buflength += 2;

	buffer = malloc(buflength);
	if (buffer == NULL)
		return 0;

	i = 0;
	buffer[i++] = GZIP_MAGIC0;
	buffer[i++] = GZIP_MAGIC1;
	buffer[i++] = h->method;
	buffer[i++] = flags;
	memcpy(buffer+i, h->stamp, 6);
	i += 6;
	if ((flags & CONTINUATION) != 0) {
		memcpy(buffer+i, h->part, 2);
		i += 2;
	}
	if (length) {
		buffer[i++] = (char)(length % 256);
		buffer[i++] = (char)(length / 256);
		while (sign != NULL) {
			memcpy(buffer+i, sign->tag, sizeof(SIGNTAG));
			i += sizeof(SIGNTAG);
			memcpy(buffer+i, sign->data, sign->length);
			i += sign->length;
			sign = sign->next;
		}
	}
	(*add)(data, buffer, buflength);
	free(buffer);
	return 1;
}
	
void 
free_signature(sign)
	struct signature *sign;
{
	struct signature *next;

	while (sign != NULL) {
		next = sign->next;
		free(sign->data);
		free(sign);
		sign = next;
	}
}
@


1.4
log
@toast some 3 & 4 for espie
@
text
@d1 1
a1 1
/* $OpenBSD: gzip.c,v 1.3 1999/10/04 21:46:28 espie Exp $ */
@


1.3
log
@Synch with current development:
* signatures no longer deal with zcat. Instead, we sign the gzip file
itself (stripped of the signature part of the header, of course). Thanks
Angelos.  Niels seems to think passing the header itself to sign is not
a problem, even though no-one cares about checking it ?
* gzip header handling revamped: can write to memory. Will eliminate some
pipes later on. Can stack signatures.
* taken out specific signature schemes (e.g., pgp and sha1).  Code is now
signature scheme independent, mostly, and writes with client data from
memory, e.g., check.c can invoke several checks in parallel without needing
to fork.
* need the full set of popen-like functionalities (keep track of opened
file descriptors to avoid passing them down to children)
* remove simple_check.c, functionality absorbed elsewhere.

To do:
* re-check message output and what to do with unsigned/unchecked/verified
packages,
* check pkg_add implementation and remove extra-pipe in asynchronous
checking,
* control over what to do when several signatures are stacked... Simple
way would be to disable that for now (possibility for release)
* get the code through a linter again.
@
text
@d1 1
a1 1
/* $OpenBSD: gzip.c,v 1.2 1999/10/01 01:14:38 espie Exp $ */
a12 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Marc Espie for the OpenBSD
 * Project.
@


1.2
log
@Bug fix: skip over signature if not wanted, return correct category of
file.
@
text
@d1 1
a1 1
/* $OpenBSD: gzip.c,v 1.1 1999/09/27 21:40:04 espie Exp $ */
d33 2
d40 1
a40 1
/* For now, signatures follow a hardcoded format
a42 3
static char tagsign[] = 
	{'S', 'i', 'g', 'P', 'G', 'P', 
	    (char)(SIGNSIZE /256), (char)(SIGNSIZE & 255) };
d44 61
a104 3
/* retrieve a gzip header, including PGP signatures */
int 
gzip_read_header(f, h, sign)
d106 1
a106 2
	struct mygzip_header *h;
	char sign[];
d108 2
a109 2
	{
		int c, d;
d111 10
a120 5
		c = fgetc(f);
		d = fgetc(f);
		if ((unsigned char)c != (unsigned char)GZIP_MAGIC0 
			 || (unsigned char)d != (unsigned char)GZIP_MAGIC1)	
			return GZIP_NOT_GZIP;
d122 24
a145 2
	{
		int method, flags;
d147 2
a148 8
		method = fgetc(f);
		flags = fgetc(f);

		if (method == EOF || flags == EOF || fread(h->stamp, 1, 6, f) != 6)
			return GZIP_NOT_GZIP;
		h->method = (char)method;
		h->flags = (char)flags;
	}
d150 4
d156 21
a176 4
			return GZIP_NOT_GZIP;
	if ((h->flags & EXTRA_FIELD) != 0) {
		char match[sizeof(tagsign)];
		unsigned int len;
d181 2
a182 2
			return GZIP_NOT_PGPSIGNED;
		len = (unsigned)c;
d186 8
a193 13
		len |= ((unsigned) c) << 8;
		if (len != sizeof(tagsign) + SIGNSIZE)
			return GZIP_NOT_PGPSIGNED;
		if (fread(match, 1, sizeof(match), f) != sizeof(match) ||
			memcmp(match, tagsign, sizeof(match)) != 0)
			return GZIP_NOT_PGPSIGNED;
		if (sign != NULL) {
			if (fread(sign, 1, SIGNSIZE, f) == SIGNSIZE)
				return GZIP_SIGNED;
			else
				return GZIP_NOT_PGPSIGNED;
		} else {
			if (fseek(f, SIGNSIZE, SEEK_CUR) != -1)
a194 2
			else
				return GZIP_NOT_PGPSIGNED;
d196 33
a228 2
	} else
		return GZIP_UNSIGNED;
d231 1
a231 1
/* write a gzip header, including PGP signature */
d236 15
a250 1
	const char sign[];
d253 16
d270 3
a272 1
	flags = h->flags;
d274 21
a294 20
	if (sign != NULL)
		flags |= EXTRA_FIELD;
	else
		flags &= ~EXTRA_FIELD;
	if (fputc(GZIP_MAGIC0, f) == EOF ||
	    fputc(GZIP_MAGIC1, f) == EOF ||
	    fputc(h->method, f) == EOF ||
	    fputc(flags, f) == EOF || 
		 fwrite(h->stamp, 1, 6, f) != 6)
		 return 0;
	if ((h->flags & CONTINUATION) != 0)
		if (fwrite(h->part, 1, 2, f) != 2)
			return 0;
	if (sign != NULL) {
		unsigned short len = sizeof(tagsign) + SIGNSIZE;
		if (fputc(len & 255, f) == EOF ||
			fputc(len/256, f) == EOF ||
			fwrite(tagsign, 1, sizeof(tagsign), f) != sizeof(tagsign) ||
		    fwrite(sign, 1, SIGNSIZE, f) != SIGNSIZE)
			 return 0;
d296 2
d299 14
@


1.1
log
@Stand-alone package signer.

Requires pgp for now, though the general scheme is generic.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d31 1
d99 6
a104 2
		} else
			return GZIP_UNSIGNED;
d109 1
@

