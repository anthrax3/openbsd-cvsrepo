head	1.18;
access;
symbols
	OPENBSD_3_5:1.17.0.4
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.13.0.6
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.13.0.4
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.12.0.4
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_8:1.11.0.4
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.2
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.18
date	2004.05.28.20.15.48;	author brad;	state dead;
branches;
next	1.17;

1.17
date	2003.08.27.06.51.26;	author jolan;	state Exp;
branches;
next	1.16;

1.16
date	2003.08.15.00.03.22;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2003.07.04.17.31.19;	author avsm;	state Exp;
branches;
next	1.14;

1.14
date	2003.04.05.18.01.54;	author avsm;	state Exp;
branches;
next	1.13;

1.13
date	2001.11.26.05.04.33;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2001.02.10.17.21.11;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2000.04.04.15.12.02;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2000.03.24.00.24.18;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	99.07.28.12.35.00;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	99.02.26.16.13.31;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	98.11.19.04.12.55;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	98.10.13.23.09.50;	author marc;	state Exp;
branches;
next	1.5;

1.5
date	98.09.07.22.30.14;	author marc;	state Exp;
branches;
next	1.4;

1.4
date	97.01.17.07.14.13;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.12.29.12.18.28;	author graichen;	state Exp;
branches;
next	1.2;

1.2
date	96.06.04.08.43.36;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.06.04.07.56.05;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.18
log
@bye bye old package tools.

ok deraadt@@
@
text
@/*	$OpenBSD: perform.c,v 1.17 2003/08/27 06:51:26 jolan Exp $	*/

#ifndef lint
static const char rcsid[] = "$OpenBSD: perform.c,v 1.17 2003/08/27 06:51:26 jolan Exp $";
#endif

/*
 * FreeBSD install - a package for the installation and maintainance
 * of non-core utilities.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * Jordan K. Hubbard
 * 18 July 1993
 *
 * This is the main body of the create module.
 *
 */

#include "lib.h"
#include "create.h"

#include <sys/syslimits.h>
#include <sys/wait.h>

#include <err.h>
#include <errno.h>
#include <signal.h>
#include <unistd.h>

static void sanity_check(void);
static void make_dist(char *, char *, char *, package_t *);

static char *home;

int
pkg_perform(char **pkgs)
{
    char *pkg = *pkgs;		/* Only one arg to create */
    char *cp;
    FILE *pkg_in, *fp;
    package_t plist;
    char *suffix;  /* What we tack on to the end of the finished package */

    /* Preliminary setup */
    sanity_check();
    if (Verbose && !PlistOnly)
	printf("Creating package %s\n", pkg);
    get_dash_string(&Comment);
    if (strlen(Comment) > MAXINDEXSIZE && !PlistOnly) {
	errx(2,"Comment string is over %d characters long:\n%s",
	   MAXINDEXSIZE, Comment);
    }
    get_dash_string(&Desc);
    if (!strcmp(Contents, "-"))
	pkg_in = stdin;
    else {
	pkg_in = fopen(Contents, "r");
	if (!pkg_in) {
	    cleanup(0);
	    errx(2, "unable to open contents file '%s' for input", Contents);
	}
    }
    plist.head = plist.tail = NULL;

    /* Break the package name into base and desired suffix (if any) */
    if ((cp = strrchr(pkg, '.')) != NULL) {
	suffix = cp + 1;
	*cp = '\0';
    }
    else
	suffix = "tgz";

    if (Prefix)
	add_plist(&plist, PLIST_CWD, Prefix);
    /* If a SrcDir override is set, add it now */
    if (SrcDir) {
	if (Verbose && !PlistOnly)
	    printf("Using SrcDir value of %s\n", SrcDir);
	add_plist(&plist, PLIST_SRC, SrcDir);
    }

    /* Stick the dependencies, if any, at the top */
    if (Pkgdeps) {
	if (Verbose && !PlistOnly)
	    printf("Registering depends:");
	while (Pkgdeps) {
	    cp = strsep(&Pkgdeps, " \t\n");
	    if (*cp) {
		add_plist(&plist, PLIST_PKGDEP, cp);
		if (Verbose && !PlistOnly)
		    printf(" %s", cp);
	    }
	}
	if (Verbose && !PlistOnly)
	    printf(".\n");
    }

    /* Put the conflicts directly after the dependencies, if any */
    if (Pkgcfl) {
	if (Verbose && !PlistOnly)
	    printf("Registering conflicts:");
	while (Pkgcfl) {
	   cp = strsep(&Pkgcfl, " \t\n");
	   if (*cp) {
		add_plist(&plist, PLIST_PKGCFL, cp);
		if (Verbose && !PlistOnly)
		    printf(" %s", cp);
	   }
	}
	if (Verbose && !PlistOnly)
	    printf(".\n");
    }

    /* Slurp in the packing list */
    read_plist(&plist, pkg_in);

    /*
     * Run down the list and see if we've named it, if not stick in a name
     * at the top.
     */
    if (find_plist(&plist, PLIST_NAME) == NULL)
	add_plist_top(&plist, PLIST_NAME, basename_of(pkg));

    /*
     * We're just here for to dump out a revised plist for the FreeBSD ports
     * hack.  It's not a real create in progress.
     */
    if (PlistOnly) {
	check_list(home, &plist);
	write_plist(&plist, stdout);
	exit(0);
    }

    /* Make a directory to stomp around in */
    home = make_playpen(PlayPen, PlayPenSize, 0);
    signal(SIGINT, cleanup);
    signal(SIGHUP, cleanup);

    /* Make first "real contents" pass over it */
    check_list(home, &plist);
    (void) umask(022);	/* make sure gen'ed directories, files don't have
			   group or other write bits. */
    /* copy_plist(home, &plist); */
    /* mark_plist(&plist); */

    /* Now put the release specific items in */
    add_plist(&plist, PLIST_CWD, ".");
    write_file(COMMENT_FNAME, Comment);
    add_plist(&plist, PLIST_IGNORE, NULL);
    add_plist(&plist, PLIST_FILE, COMMENT_FNAME);
    write_file(DESC_FNAME, Desc);
    add_plist(&plist, PLIST_IGNORE, NULL);
    add_plist(&plist, PLIST_FILE, DESC_FNAME);

    if (Install) {
	copy_file(home, Install, INSTALL_FNAME);
	add_plist(&plist, PLIST_IGNORE, NULL);
	add_plist(&plist, PLIST_FILE, INSTALL_FNAME);
    }
    if (DeInstall) {
	copy_file(home, DeInstall, DEINSTALL_FNAME);
	add_plist(&plist, PLIST_IGNORE, NULL);
	add_plist(&plist, PLIST_FILE, DEINSTALL_FNAME);
    }
    if (Require) {
	copy_file(home, Require, REQUIRE_FNAME);
	add_plist(&plist, PLIST_IGNORE, NULL);
	add_plist(&plist, PLIST_FILE, REQUIRE_FNAME);
    }
    if (Display) {
	copy_file(home, Display, DISPLAY_FNAME);
	add_plist(&plist, PLIST_IGNORE, NULL);
	add_plist(&plist, PLIST_FILE, DISPLAY_FNAME);
	add_plist(&plist, PLIST_DISPLAY, DISPLAY_FNAME);
    }
    if (Mtree) {
	copy_file(home, Mtree, MTREE_FNAME);
	add_plist(&plist, PLIST_IGNORE, NULL);
	add_plist(&plist, PLIST_FILE, MTREE_FNAME);
	add_plist(&plist, PLIST_MTREE, MTREE_FNAME);
    }

    /* Finally, write out the packing list */
    fp = fopen(CONTENTS_FNAME, "w");
    if (!fp) {
	cleanup(0);
	errx(2, "can't open file %s for writing", CONTENTS_FNAME);
    }
    write_plist(&plist, fp);
    if (fclose(fp)) {
	cleanup(0);
	errx(2, "error while closing %s", CONTENTS_FNAME);
    }

    /* And stick it into a tar ball */
    make_dist(home, pkg, suffix, &plist);

    /* Cleanup */
    free(Comment);
    free(Desc);
    free_plist(&plist);
    leave_playpen(home);
    return TRUE;	/* Success */
}

static void
make_dist(char *home, char *pkg, char *suffix, package_t *plist)
{
    char tball[FILENAME_MAX];
    plist_t *p;
    int ret;
#define DIST_MAX_ARGS 4096
    char *args[DIST_MAX_ARGS];	
    char *tempfile[DIST_MAX_ARGS/2];
    int current = 0;
    FILE *flist = 0;
    int nargs = 0;
    int i;
    pid_t pid;

    args[nargs++] = "tar";	/* argv[0] */

    if (*pkg == '/')
	snprintf(tball, FILENAME_MAX, "%s.%s", pkg, suffix);
    else
	snprintf(tball, FILENAME_MAX, "%s/%s.%s", home, pkg, suffix);

    args[nargs++] = "-c";
    args[nargs++] = "-f";
    args[nargs++] = tball;
    if (strchr(suffix, 'z'))	/* Compress/gzip? */
	args[nargs++] = "-z";
    if (Dereference)
	args[nargs++] = "-h";
    if (ExcludeFrom) {
      /* XXX this won't work until someone adds the gtar -X option
	 (--exclude-from-file) to paxtar - so long it is disabled
	 here and a warning is printed in main.c
	args[nargs++] = "-X";
	args[nargs++] = ExcludeFrom;
	*/
    }

    if (Verbose) {
        if (strchr(suffix, 'z'))
	    printf("Creating gzip'd tar ball in '%s'\n", tball);
        else
	    printf("Creating tar ball in '%s'\n", tball);
    }
    args[nargs++] = CONTENTS_FNAME;
    args[nargs++] = COMMENT_FNAME;
    args[nargs++] = DESC_FNAME;
    if (Install)
        args[nargs++] = INSTALL_FNAME;
    if (DeInstall)
	args[nargs++] = DEINSTALL_FNAME;
    if (Require)
	args[nargs++] = REQUIRE_FNAME;
    if (Display)
	args[nargs++] = DISPLAY_FNAME;
    if (Mtree)
	args[nargs++] = MTREE_FNAME;

    for (p = plist->head; p; p = p->next) {
	if (nargs > (DIST_MAX_ARGS - 2))
	    errx(2, "too many args for tar command");
	if (p->type == PLIST_FILE) {
	    if (!flist) {
	    	int fd;
	    	tempfile[current] = strdup("/tmp/tpkg.XXXXXXXXXX");
		if ((fd = mkstemp(tempfile[current])) == -1)
		    errx(2, "can't make temp file");
		if (! (flist = fdopen(fd, "w")))
		    errx(2, "can't write to temp file");
		if (strcmp(args[nargs], "-C") == 0)
		    nargs+= 2;
		args[nargs++] = "-I";
		args[nargs++] = tempfile[current++];
	    }
	    fprintf(flist, "%s\n", p->name);
	}
	else if (p->type == PLIST_CWD || p->type == PLIST_SRC) {
	    /* XXX let PLIST_SRC override PLIST_CWD */
	    if (p->type == PLIST_CWD && p->next != NULL && 
	    	p->next->type == PLIST_SRC)
		    continue;
	    if (flist) 
		fclose(flist);
	    flist = 0;
	    args[nargs] = "-C";
	    if (BaseDir) {
		    size_t size = strlen(BaseDir)+2+strlen(p->name);
		    args[nargs+1] = malloc(size);
		    if (args[nargs+1] == NULL) {
			    cleanup(0);
			    errx(2, "can't get Cwd space");
		    }
		    snprintf(args[nargs+1], size, "%s/%s", BaseDir, p->name);
	    } else
		    args[nargs+1] = p->name;
	}
	else if (p->type == PLIST_IGNORE)
	     p = p->next;
    }
    if (flist) 
    	fclose(flist);
    args[nargs] = NULL;

    /* fork/exec tar to create the package */

    if (Verbose) {
    	printf("Running \"");
    	for (i = 0; i < nargs; i++) {
		printf("%s ", args[i]);
	}
	printf("\"\n");
    }
    pid = fork();
    if ( pid < 0 )
	err(2, "failed to fork");
    else if ( pid == 0 ) {
	execv("/bin/tar", args);
	for (i = 0; i < current; i++)
	    unlink(tempfile[i]);
	err(2, "failed to execute tar command");
    }
    wait(&ret);
    for (i = 0; i < current; i++)
	unlink(tempfile[i]);
    if (BaseDir) {
    	for (i = 0; i < nargs-1; i++) {
	    if (!strcmp(args[i], "-C"))
		free(args[++i]);
	}
    }
    /* assume either signal or bad exit is enough for us */
    if (ret) {
	cleanup(0);
	errx(2, "tar command failed with code %d", ret);
    }
}

static void
sanity_check()
{
    if (!Comment) {
	cleanup(0);
	errx(2, "required package comment string is missing (-c comment)");
    }
    if (!Desc) {
	cleanup(0);
	errx(2, "required package description string is missing (-d desc)");
    }
    if (!Contents) {
	cleanup(0);
	errx(2, "required package contents list is missing (-f [-]file)");
    }
}


/* Clean up those things that would otherwise hang around */
void
cleanup(int sig)
{
    int save_errno = errno;
    static int	alreadyCleaning;
    void (*oldint)(int);
    void (*oldhup)(int);
    char buf[1024];
    oldint = signal(SIGINT, SIG_IGN);
    oldhup = signal(SIGHUP, SIG_IGN);

    if (!alreadyCleaning) {
    	alreadyCleaning = 1;
	if (sig) {
	    snprintf(buf, sizeof buf, "Signal %d received, cleaning up.\n", sig);
	    write(STDOUT_FILENO, buf, strlen(buf));
	}
	leave_playpen(home);
	if (sig)
	    _exit(1);
    }
    signal(SIGINT, oldint);
    signal(SIGHUP, oldhup);
    errno = save_errno;
}
@


1.17
log
@Avoid doing @@cwd if no file follows.  Patch from Pedro Bastos (based on
one from espie@@)

ok fgsch@@ naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.16 2003/08/15 00:03:22 espie Exp $	*/
d4 1
a4 1
static const char rcsid[] = "$OpenBSD: perform.c,v 1.16 2003/08/15 00:03:22 espie Exp $";
@


1.16
log
@-S basedir, simpler to use than -s.

Sets prefix logic better, so that it doesn't interfere with existing @@cwd
in packing lists.

tests by naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.15 2003/07/04 17:31:19 avsm Exp $	*/
d4 1
a4 1
static const char rcsid[] = "$OpenBSD: perform.c,v 1.15 2003/07/04 17:31:19 avsm Exp $";
d283 2
d298 1
a298 1
	    args[nargs++] = "-C";
d301 2
a302 2
		    args[nargs] = malloc(size);
		    if (!args[nargs]) {
d306 1
a306 2
		    snprintf(args[nargs], size, "%s/%s", BaseDir, p->name);
		    nargs++;
d308 1
a308 1
		    args[nargs++] = p->name;
@


1.15
log
@'static const char rcsid[]' to make it -Wall clean
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.14 2003/04/05 18:01:54 avsm Exp $	*/
d4 1
a4 1
static const char rcsid[] = "$OpenBSD: perform.c,v 1.14 2003/04/05 18:01:54 avsm Exp $";
d81 2
a124 5
    /* Prefix should override the packing list */
    if (Prefix) {
	delete_plist(&plist, FALSE, PLIST_CWD, NULL);
	add_plist_top(&plist, PLIST_CWD, Prefix);
    }
d297 11
a307 1
	    args[nargs++] = p->name;
d318 7
d337 6
@


1.14
log
@remove some unused variables, disambiguate braces; rohee@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.13 2001/11/26 05:04:33 deraadt Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.13 2001/11/26 05:04:33 deraadt Exp $";
@


1.13
log
@mostly mark signal races
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.12 2001/02/10 17:21:11 millert Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.12 2001/02/10 17:21:11 millert Exp $";
a228 1
    int pipefds[2];
a229 1
    FILE *totar;
d255 1
a255 1
    if (Verbose)
d260 1
@


1.12
log
@Give tar the new -I flag, not -T
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.11 2000/04/04 15:12:02 espie Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.11 2000/04/04 15:12:02 espie Exp $";
d30 3
d34 1
a35 2
#include <sys/syslimits.h>
#include <sys/wait.h>
d353 1
d357 1
d363 4
a366 2
	if (sig)
	    printf("Signal %d received, cleaning up.\n", sig);
d369 1
a369 1
	    exit(1);
d373 1
@


1.11
log
@Register PLIST_SRC before dependencies and conflicts so that the
PLIST_CWD != PLIST_SRC hack works with dependencies present.

Noticed and tested by Camiel.
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.10 2000/03/24 00:24:18 espie Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.10 2000/03/24 00:24:18 espie Exp $";
d285 1
a285 1
		args[nargs++] = "-T";
@


1.10
log
@Fake buglet fix: if PLIST_SRC directly follows PLIST_CWD, ignore
the PLIST_CWD in creating the tar pipe.

This takes care of pkg_create -p PREFIX -s FAKE
where PREFIX does not exist at pkg creation time.
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.9 1999/07/28 12:35:00 espie Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.9 1999/07/28 12:35:00 espie Exp $";
d79 7
a115 7
    }

    /* If a SrcDir override is set, add it now */
    if (SrcDir) {
	if (Verbose && !PlistOnly)
	    printf("Using SrcDir value of %s\n", SrcDir);
	add_plist(&plist, PLIST_SRC, SrcDir);
@


1.9
log
@Use new tar -T option.
Removes an annoying limit on PLIST lengths.
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.8 1999/02/26 16:13:31 espie Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.8 1999/02/26 16:13:31 espie Exp $";
d291 4
@


1.8
log
@You've been warned: turn too long package comments into errors.
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.7 1998/11/19 04:12:55 espie Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.7 1998/11/19 04:12:55 espie Exp $";
d222 4
a225 1
    char *args[DIST_MAX_ARGS];	/* Much more than enough. */
d228 1
d277 13
a289 2
	if (p->type == PLIST_FILE)
	    args[nargs++] = p->name;
d291 3
d300 2
d311 2
d316 2
@


1.7
log
@- fix pkg_info to give more rational summary when COMMENTS files are weird.
- warn when COMMENT > 60 characters.
*** In one month we turn this into an error -> fix packages files ***
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.6 1998/10/13 23:09:50 marc Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.6 1998/10/13 23:09:50 marc Exp $";
d56 1
a56 1
	warnx("Comment string is over %d characters long:\n%s",
@


1.6
log
@Sync with recent NetBSD changes:
- use snprintf in place of sprintf
- code cleanup
- Package -> package_t, PackingList -> plist_t
Also: remove files that haven't been linked in a while
Pass -q to mtree so it is quiet in the presence of symlinks
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.5 1998/09/07 22:30:14 marc Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.5 1998/09/07 22:30:14 marc Exp $";
d55 4
@


1.5
log
@updated pkg_* tools.  Merged in many changes/improvements from NetBSD.
New features include md5 hash so pkg_delete won't remove files that have
changed and the ability to define conflicting packages, e.g. you can't
install both mh and nmh.  The ports tree will have to be updated to take
advantage of this.

Let me know of any problems, real or imagined :-)
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.4 1997/01/17 07:14:13 millert Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.4 1997/01/17 07:14:13 millert Exp $";
d37 1
a37 1
static void make_dist(char *, char *, char *, Package *);
d47 1
a47 1
    Package plist;
d60 4
a63 3
	if (!pkg_in)
	    cleanup(0), errx(2, "unable to open contents file '%s' for input",
				Contents);
d140 1
a140 1
    home = make_playpen(PlayPen, 0);
d190 4
a193 2
    if (!fp)
	cleanup(0), errx(2, "can't open file %s for writing", CONTENTS_FNAME);
d195 4
a198 2
    if (fclose(fp))
	cleanup(0), errx(2, "error while closing %s", CONTENTS_FNAME);
d212 1
a212 1
make_dist(char *home, char *pkg, char *suffix, Package *plist)
d215 1
a215 1
    PackingList p;
d291 4
a294 2
    if (ret)
	cleanup(0), errx(2, "tar command failed with code %d", ret);
d300 12
a311 9
    if (!Comment)
	cleanup(0), errx(2,
		"required package comment string is missing (-c comment)");
    if (!Desc)
	cleanup(0), errx(2,
		"required package description string is missing (-d desc)");
    if (!Contents)
	cleanup(0), errx(2,
		"required package contents list is missing (-f [-]file)");
@


1.4
log
@r?index -> strr?chr
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.3 1996/12/29 12:18:28 graichen Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.3 1996/12/29 12:18:28 graichen Exp $";
d30 1
a30 1
#include <errno.h>
d33 1
d61 2
a62 1
	    barf("Unable to open contents file '%s' for input.", Contents);
d89 24
d133 1
a186 5
    /* Run through the list again, picking up extra "local" items */
    /* check_list(".", &plist); */
    /* copy_plist(".", &plist); */
    /* mark_plist(&plist); */

d190 1
a190 1
	barf("Can't open file %s for writing.", CONTENTS_FNAME);
d193 1
a193 1
	barf("Error while closing %s.", CONTENTS_FNAME);
d202 1
a202 1
    cleanup(0);
d211 3
a213 4
    int ret, max, len;
                        /* XXX - The next one should be 
			   allocated dynamically  */
    char *args[4096];	/* Much more than enough. */
d262 2
a273 2
    execv("/bin/tar", args);
    barf("Failed to execute tar command: %s", strerror(errno));
d275 9
d287 1
a287 1
	barf("tar command failed with code %d", ret);
d294 2
a295 1
	barf("Required package comment string is missing (-c comment).");
d297 2
a298 1
	barf("Required package description string is missing (-d desc).");
d300 2
a301 1
	barf("Required package contents list is missing (-f [-]file).");
d309 16
a324 1
    leave_playpen(home);
@


1.3
log
@work around the missing (gtar) -T (--files-from) option of our paxtar
in pkg_create so that it should work now with paxtar (the -X option is
still missing due to missing -X - in the gtar meaning --exclude-from-file
option)

i did it by changing the FreeBSD way of doing it (open a pipe to tar with
-T - (read filenames from stdin) and give all the filenames to the pipe)
to constructing a big :-) argumentlist for tar and executing it without
the pipe (not the best solution but it works :-)
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.2 1996/06/04 08:43:36 niklas Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.2 1996/06/04 08:43:36 niklas Exp $";
d65 1
a65 1
    if ((cp = rindex(pkg, '.')) != NULL) {
d208 1
a208 1
    if (index(suffix, 'z'))	/* Compress/gzip? */
d222 1
a222 1
        if (index(suffix, 'z'))
@


1.2
log
@Oops, screwed up the $OpenBSD$ IDs
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.1 1996/06/04 07:56:05 niklas Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.1 1996/06/04 07:56:05 niklas Exp $";
d190 3
a192 1
    char *args[50];	/* Much more than enough. */
d213 3
d218 1
a219 3
    args[nargs++] = "-T";	/* Take filenames from file instead of args. */
    args[nargs++] = "-";	/* Use stdin for the file. */
    args[nargs] = NULL;
d222 7
a228 24
	printf("Creating gzip'd tar ball in '%s'\n", tball);

    /* Set up a pipe for passing the filenames, and fork off a tar process. */
    if (pipe(pipefds) == -1)
	barf("Cannot create pipe: %s", strerror(errno));
    if ((pid = fork()) == -1)
	barf("Cannot fork process for tar: %s", strerror(errno));
    if (pid == 0) {	/* The child */
	dup2(pipefds[0], 0);
	close(pipefds[0]);
	close(pipefds[1]);
	execv("/usr/bin/tar", args);
	barf("Failed to execute tar command: %s", strerror(errno));
    }

    /* Meanwhile, back in the parent process ... */
    close(pipefds[0]);
    if ((totar = fdopen(pipefds[1], "w")) == NULL)
	barf("fdopen failed: %s", strerror(errno));

    fprintf(totar, "%s\n", CONTENTS_FNAME);
    fprintf(totar, "%s\n", COMMENT_FNAME);
    fprintf(totar, "%s\n", DESC_FNAME);

d230 1
a230 1
	fprintf(totar, "%s\n", INSTALL_FNAME);
d232 1
a232 1
	fprintf(totar, "%s\n", DEINSTALL_FNAME);
d234 1
a234 1
	fprintf(totar, "%s\n", REQUIRE_FNAME);
d236 1
a236 1
	fprintf(totar, "%s\n", DISPLAY_FNAME);
d238 1
a238 1
	fprintf(totar, "%s\n", MTREE_FNAME);
d242 5
a246 3
	    fprintf(totar, "%s\n", p->name);
	else if (p->type == PLIST_CWD || p->type == PLIST_SRC)
	    fprintf(totar, "-C\n%s\n", p->name);
d250 3
a253 1
    fclose(totar);
@


1.1
log
@add package tools from FreeBSD
@
text
@d1 2
a2 1
#	$OpenBSD$
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.30 1996/03/20 19:05:59 jdp Exp $";
@
