head	1.17;
access;
symbols
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.10.0.4
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.7.0.4
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.17
date	2004.05.28.20.15.48;	author brad;	state dead;
branches;
next	1.16;

1.16
date	2003.08.23.09.14.43;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2003.08.18.16.56.02;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2003.07.04.17.31.19;	author avsm;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.04.17.23.15;	author avsm;	state Exp;
branches;
next	1.12;

1.12
date	2003.04.04.08.56.01;	author avsm;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.26.05.04.33;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2001.04.18.14.34.31;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2001.04.08.16.45.47;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.10.18.44.31;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	99.02.27.13.40.24;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	98.11.19.04.12.55;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	98.10.13.23.09.51;	author marc;	state Exp;
branches;
next	1.4;

1.4
date	98.09.07.22.30.15;	author marc;	state Exp;
branches;
next	1.3;

1.3
date	97.12.14.09.42.19;	author gene;	state Exp;
branches;
next	1.2;

1.2
date	96.06.04.08.43.39;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.06.04.07.56.10;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.17
log
@bye bye old package tools.

ok deraadt@@
@
text
@/*	$OpenBSD: perform.c,v 1.16 2003/08/23 09:14:43 tedu Exp $	*/

#ifndef lint
static const char rcsid[] = "$OpenBSD: perform.c,v 1.16 2003/08/23 09:14:43 tedu Exp $";
#endif

/* This is OpenBSD pkg_install, based on:
 *
 * FreeBSD install - a package for the installation and maintainance
 * of non-core utilities.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * Jordan K. Hubbard
 * 23 Aug 1993
 *
 * This is the main body of the info module.
 *
 */

#include "lib.h"
#include "info.h"

#include <sys/types.h>
#include <sys/stat.h>

#include <err.h>
#include <signal.h>
#include <dirent.h>
#include <ctype.h>

static char    *Home;

/* retrieve info on installed packages from the base name:
 * find a full name of the form pkg-xxx.
 */
static char *
find_prefix(char *buffer, int bufsize, char *base, char *pkg)
{
	DIR 		*dirp;
	struct dirent 	*dp;
	char 		*res;
	int 		 pkg_length = strlen(pkg);


	if (! (dirp = opendir(base)) )
		return 0;
	while ( (dp = readdir(dirp)) ) {
		if (strncmp(dp->d_name, pkg, pkg_length) == 0
		    && dp->d_name[pkg_length] == '-') {
			snprintf(buffer, bufsize, "%s/%s", base, dp->d_name);
			  /* pedantic: need to dup res before closedir() */
			res = strdup(dp->d_name);
			(void)closedir(dirp);
			return res;
		}
	}
	(void)closedir(dirp);
	return 0;
}

static int
pkg_do(char *pkg)
{
	Boolean         installed = FALSE, isTMP = FALSE;
	char            log_dir[FILENAME_MAX];
	char            fname[FILENAME_MAX];
	package_t       plist;
	FILE           *fp;
	struct stat     sb;
	char           *cp = NULL;
	int             code = 0;
	char           *pkg2 = 0; /* hold full name of package, storage to free */
	int             len;
	int		isurl = 0;

	set_pkg(pkg);

	if (AllInstalled)
		goto installed;

	if (isURL(pkg)) {
		if ((cp = fileGetURL(NULL, pkg)) != NULL) {
			strlcpy(fname, cp, sizeof(fname));
			isTMP = TRUE;
		}
		isurl = 1;
	} else if (fexists(pkg) && isfile(pkg)) {

		if (*pkg != '/') {
			if (!getcwd(fname, sizeof(fname))) {
			    cleanup(0);
			    err(1, "fatal error during execution: getcwd");
			}
			len = strlen(fname);
			snprintf(&fname[len], sizeof(fname) - len, "/%s", pkg);
		} else
			strlcpy(fname, pkg, sizeof(fname));
		cp = fname;
	} else {
		if ((cp = fileFindByPath(NULL, pkg)) != NULL) {
			strlcpy(fname, cp, sizeof(fname));
			if (isURL(fname) && (cp = fileGetURL(NULL, fname))
			    != NULL) {
				strlcpy(fname, cp, sizeof(fname));
				isTMP = TRUE;
				isurl = 1;
			} else if (*cp != '/') {
				if (!getcwd(fname, sizeof(fname))) {
				    	cleanup(0);
					err(1, "fatal error during execution: "
					    "getcwd");
				}
				len = strlen(fname);
				snprintf(&fname[len], sizeof(fname) - len,
				    "/%s", cp);
			}
		}
	}
	if (cp) {
		if (isurl) {
			/* file is already unpacked by fileGetURL() */
			strlcpy(PlayPen, cp, PlayPenSize);
		} else {
			/*
			 * Apply a crude heuristic to see how much space the package will
			 * take up once it's unpacked.  I've noticed that most packages
			 * compress an average of 75%, but we're only unpacking the + files so
			 * be very optimistic.
			 */
			if (stat(fname, &sb) == FAIL) {
				pwarnx("can't stat package file '%s'", fname);
				code = 1;
				goto bail;
			}
			Home = make_playpen(PlayPen, PlayPenSize, sb.st_size / 2);
			if (unpack(fname, "+*")) {
				pwarnx("error during unpacking, no info for '%s' available", pkg);
				code = 1;
				goto bail;
			}
		}
	}
	/*
	 * It's not an uninstalled package, try and find it among the
	 * installed
	 */
	else
installed:
	{
		char           *tmp;

		if (!(tmp = getenv(PKG_DBDIR)))
			tmp = DEF_LOG_DIR;

		(void) snprintf(log_dir, sizeof(log_dir), "%s/%s", tmp,
			pkg);
		if (!fexists(log_dir) && 
			! (pkg2 = find_prefix(log_dir, sizeof(log_dir), tmp, pkg))) {
			pwarnx("can't find package `%s' installed or in a file!", pkg);
			return 1;
		}
		if (pkg2) 
			pkg = pkg2;
		if (chdir(log_dir) == FAIL) {
			pwarnx("can't change directory to '%s'!", log_dir);
			free(pkg2);
			return 1;
		}
		installed = TRUE;
	}

	/*
         * Index is special info type that has to override all others to make
         * any sense.
         */
	if (Flags & SHOW_INDEX) {
		show_index(pkg, COMMENT_FNAME);
	} else {
		/* Suck in the contents list */
		plist.head = plist.tail = NULL;
		fp = fopen(CONTENTS_FNAME, "r");
		if (!fp) {
			pwarnx("unable to open %s file", CONTENTS_FNAME);
			if (isurl) /* file not on server, check installed */
				goto installed;
			code = 1;
			goto bail;
		}
		/* If we have a prefix, add it now */
		read_plist(&plist, fp);
		fclose(fp);

		/* Start showing the package contents */
		if (!Quiet)
			printf("%sInformation for %s:\n\n", InfoPrefix, pkg);
		if (Flags & SHOW_COMMENT)
			show_file("Comment:\n", COMMENT_FNAME);
		if ((Flags & SHOW_REQBY) && !isemptyfile(REQUIRED_BY_FNAME))
			show_file("Required by:\n", REQUIRED_BY_FNAME);
		if (Flags & SHOW_DESC)
			show_file("Description:\n", DESC_FNAME);
		if ((Flags & SHOW_DISPLAY) && fexists(DISPLAY_FNAME))
			show_file("Install notice:\n", DISPLAY_FNAME);
		if (Flags & SHOW_PLIST)
			show_plist("Packing list:\n", &plist, PLIST_SHOW_ALL);
		if ((Flags & SHOW_INSTALL) && fexists(INSTALL_FNAME))
			show_file("Install script:\n", INSTALL_FNAME);
		if ((Flags & SHOW_DEINSTALL) && fexists(DEINSTALL_FNAME))
			show_file("De-Install script:\n", DEINSTALL_FNAME);
		if ((Flags & SHOW_MTREE) && fexists(MTREE_FNAME))
			show_file("mtree file:\n", MTREE_FNAME);
		if (Flags & SHOW_PREFIX)
			show_plist("Prefix(s):\n", &plist, PLIST_CWD);
		if (Flags & SHOW_FILES)
			show_files("Files:\n", &plist);
		if (!Quiet)
			puts(InfoPrefix);
		free_plist(&plist);
	}
bail:
	free(pkg2);
	leave_playpen(Home);
	if (isTMP)
		unlink(fname);
	return code;
}

/* fn to be called for pkgs found */
static int
foundpkg(const char *found, char *data, int unused)
{
    if(!Quiet)
	printf("%s\n", found);
    return 0;
}

/* check if a package "pkgspec" (which can be a pattern) is installed */
/* return 0 if found, 1 otherwise (indicating an error). */
static int
check4pkg(char *pkgspec, char *dbdir)
{
	if (strpbrk(pkgspec, "<>[]?*{")) {
	    /* expensive (pattern) match */
	    int found;

	    found=findmatchingname(dbdir, pkgspec, foundpkg, NULL, 0);
	    return !found;
	} else {
		/* simple match */
	char            buf[FILENAME_MAX];
	int             error;
		struct stat     st;

		snprintf(buf, sizeof(buf), "%s/%s", dbdir, pkgspec);
		error = (stat(buf, &st) < 0);
		if (!error && !Quiet)
		printf("%s\n", pkgspec);

	return error;
	}
}

void
cleanup(int sig)
{
	leave_playpen(Home);		/* XXX signal race */
	_exit(1);
}

int
pkg_perform(char **pkgs)
{
	int             i, err_cnt = 0;
	char           *tmp;

	signal(SIGINT, cleanup);

	tmp = getenv(PKG_DBDIR);
	if (!tmp)
		tmp = DEF_LOG_DIR;
	/* Overriding action? */
	if (CheckPkg) {
		err_cnt += check4pkg(CheckPkg, tmp);
	} else if (AllInstalled) {
		struct dirent  *dp;
		DIR            *dirp;

		if (!(isdir(tmp) || islinktodir(tmp)))
			return 1;
		if (chdir(tmp) != 0)
			return 1;
		if ((dirp = opendir(".")) != (DIR *) NULL) {
			while ((dp = readdir(dirp)) != (struct dirent *) NULL) {
				if (strcmp(dp->d_name, ".") && strcmp(dp->d_name, "..")) {
					err_cnt += pkg_do(dp->d_name);
				}
			}
			(void) closedir(dirp);
		}
	} else {
		for (i = 0; pkgs[i]; i++) {
			err_cnt += pkg_do(pkgs[i]);
		}
	}
	return err_cnt;
}
@


1.16
log
@
oops, if file is not on ftp server with PKG_PATH, check installed too.
should resolve han boetes's problem.
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.15 2003/08/18 16:56:02 tedu Exp $	*/
d4 1
a4 1
static const char rcsid[] = "$OpenBSD: perform.c,v 1.15 2003/08/18 16:56:02 tedu Exp $";
@


1.15
log
@fix two bugs found by ben goren.  -a should only look at installed
packages, and if we build a URL from PKG_PATH don't treat it like a
filename. ok espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.14 2003/07/04 17:31:19 avsm Exp $	*/
d4 1
a4 1
static const char rcsid[] = "$OpenBSD: perform.c,v 1.14 2003/07/04 17:31:19 avsm Exp $";
d192 2
@


1.14
log
@'static const char rcsid[]' to make it -Wall clean
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.13 2003/07/04 17:23:15 avsm Exp $	*/
d4 1
a4 1
static const char rcsid[] = "$OpenBSD: perform.c,v 1.13 2003/07/04 17:23:15 avsm Exp $";
d82 1
d86 3
d94 1
d109 15
a123 5
		    strlcpy(fname, cp, sizeof(fname));
		    if (*cp != '/') {
			if (!getcwd(fname, sizeof(fname))) {
			    cleanup(0);
			    err(1, "fatal error during execution: getcwd");
a124 3
			len = strlen(fname);
			snprintf(&fname[len], sizeof(fname) - len, "/%s", cp);
		    }
d128 1
a128 1
		if (isURL(pkg)) {
d155 3
a157 1
	else {
@


1.13
log
@- use sizeof(var) instead of hardcoding length in functions that need it
- krw@@ rewrote make_preserve_name() to get rid of some hard to read string code
- some trivial strn{cpy,cat} - > strl{cpy,cat} conversions
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.12 2003/04/04 08:56:01 avsm Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.12 2003/04/04 08:56:01 avsm Exp $";
@


1.12
log
@some more strcpy/strcat -> strlcpy/strlcat conversions
ok and tweaks by ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.11 2001/11/26 05:04:33 deraadt Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.11 2001/11/26 05:04:33 deraadt Exp $";
d93 1
a93 1
			if (!getcwd(fname, FILENAME_MAX)) {
d98 1
a98 1
			snprintf(&fname[len], FILENAME_MAX - len, "/%s", pkg);
d104 1
a104 1
		    strncpy(fname, cp, FILENAME_MAX);
d106 1
a106 1
			if (!getcwd(fname, FILENAME_MAX)) {
d111 1
a111 1
			snprintf(&fname[len], FILENAME_MAX - len, "/%s", cp);
@


1.11
log
@mostly mark signal races
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.10 2001/04/18 14:34:31 espie Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.10 2001/04/18 14:34:31 espie Exp $";
d87 1
a87 1
			strcpy(fname, cp);
d100 1
a100 1
			strcpy(fname, pkg);
d118 1
a118 1
			strcpy(PlayPen, cp);
d222 1
a222 1
foundpkg(const char *found, char *data)
d238 1
a238 1
	    found=findmatchingname(dbdir, pkgspec, foundpkg, NULL);
@


1.10
log
@fix two bugs.
- create a full path name to the package, so that the chdir of playpen
won't confuse tar.
- do a chdir dbdir in pkg_info -a mode, so that we only get installed
packages, and not pick up whatever is around in the current directory
instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.9 2001/04/08 16:45:47 espie Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.9 2001/04/08 16:45:47 espie Exp $";
d258 2
a259 2
	leave_playpen(Home);
	exit(1);
@


1.9
log
@Better error messages: pwarnx function, which works like pwarn, except
it shows a current package name along with the program name, e.g.,
pkg_add(foo-3.0): some error occurred.

A few messages now bear redundant pkgnames, which is much better than
doing pkg_add * and being informed that something went slightly wrong
somewhere...
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.8 2000/04/10 18:44:31 espie Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.8 2000/04/10 18:44:31 espie Exp $";
d81 1
a90 1
		int             len;
d103 11
a113 2
		if ((cp = fileFindByPath(NULL, pkg)) != NULL)
			strncpy(fname, cp, FILENAME_MAX);
d282 3
a284 1
		if ((dirp = opendir(tmp)) != (DIR *) NULL) {
@


1.8
log
@Speed up simple pkg_info: don't retrieve information we don't use.
Improve pkg list display slightly, insert space between pkg name and info
always (requested by aaron@@).
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.7 1999/02/27 13:40:24 espie Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.7 1999/02/27 13:40:24 espie Exp $";
d82 2
d118 1
a118 1
				warnx("can't stat package file '%s'", fname);
d124 1
a124 1
				warnx("error during unpacking, no info for '%s' available", pkg);
d144 1
a144 1
			warnx("can't find package `%s' installed or in a file!", pkg);
d150 1
a150 1
			warnx("can't change directory to '%s'!", log_dir);
d168 1
a168 1
			warnx("unable to open %s file", CONTENTS_FNAME);
@


1.7
log
@Small new feature: pkg_info pkg
now tries to complete the package name with a version number while
scanning the installed list of packages.

Not foolproof. The pkg_* tools are atrocious anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.6 1998/11/19 04:12:55 espie Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.6 1998/11/19 04:12:55 espie Exp $";
a154 12
	/* Suck in the contents list */
	plist.head = plist.tail = NULL;
	fp = fopen(CONTENTS_FNAME, "r");
	if (!fp) {
		warnx("unable to open %s file", CONTENTS_FNAME);
		code = 1;
		goto bail;
	}
	/* If we have a prefix, add it now */
	read_plist(&plist, fp);
	fclose(fp);

d162 12
d199 1
a200 1
	free_plist(&plist);
@


1.6
log
@- fix pkg_info to give more rational summary when COMMENTS files are weird.
- warn when COMMENT > 60 characters.
*** In one month we turn this into an error -> fix packages files ***
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.5 1998/10/13 23:09:51 marc Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.5 1998/10/13 23:09:51 marc Exp $";
d7 2
a8 1
/*
d41 28
d80 1
d135 4
a138 1
		(void) snprintf(log_dir, sizeof(log_dir), "%s/%s", (tmp = getenv(PKG_DBDIR)) ? tmp : DEF_LOG_DIR,
d140 2
a141 1
		if (!fexists(log_dir)) {
d145 2
d149 1
d202 1
@


1.5
log
@Sync with recent NetBSD changes:
- use snprintf in place of sprintf
- code cleanup
- Package -> package_t, PackingList -> plist_t
Also: remove files that haven't been linked in a while
Pass -q to mtree so it is quiet in the presence of symlinks
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.4 1998/09/07 22:30:15 marc Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.4 1998/09/07 22:30:15 marc Exp $";
d135 1
a135 4
		char            tmp[FILENAME_MAX];

		snprintf(tmp, FILENAME_MAX, "%-19s ", pkg);
		show_index(tmp, COMMENT_FNAME);
@


1.4
log
@updated pkg_* tools.  Merged in many changes/improvements from NetBSD.
New features include md5 hash so pkg_delete won't remove files that have
changed and the ability to define conflicting packages, e.g. you can't
install both mh and nmh.  The ports tree will have to be updated to take
advantage of this.

Let me know of any problems, real or imagined :-)
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.3 1997/12/14 09:42:19 gene Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.3 1997/12/14 09:42:19 gene Exp $";
a35 1
#include <fnmatch.h>
d46 1
a46 1
	Package         plist;
d61 4
a64 2
			if (!getcwd(fname, FILENAME_MAX))
				upchuck("getcwd");
d90 1
a90 1
			Home = make_playpen(PlayPen, sb.st_size / 2);
d99 1
a99 1
	 * It's not an ininstalled package, try and find it among the
d105 1
a105 1
		sprintf(log_dir, "%s/%s", (tmp = getenv(PKG_DBDIR)) ? tmp : DEF_LOG_DIR,
d152 1
a152 1
			show_plist("Packing list:\n", &plist, (plist_t) - 1);
d174 1
a174 2
/* use fnmatch to do a glob-style match */
/* returns 0 if found, 1 if not (1) */
d176 1
a176 1
globmatch(char *pkgspec, char *dbdir, int quiet)
d178 3
a180 22
	/* Using glob-match */
	struct dirent  *dp;
	int             found;
	DIR            *dirp;

	found = 0;
	if ((dirp = opendir(dbdir)) == (DIR *) NULL) {
		warnx("can't opendir package dir '%s'", dbdir);
		return !0;
	}
	while ((dp = readdir(dirp)) != (struct dirent *) NULL) {
		if (strcmp(dp->d_name, ".") == 0 || strcmp(dp->d_name, "..") == 0) {
			continue;
		}
		if (fnmatch(pkgspec, dp->d_name, FNM_PERIOD) == 0) {
			if (!quiet)
				printf("%s\n", dp->d_name);
			found = 1;
		}
	}
	closedir(dirp);
	return !found;
d183 2
a184 8
enum {
	GT,
	GE,
	LT,
	LE
};

/* compare two dewey decimal numbers */
d186 1
a186 1
deweycmp(char *a, int op, char *b)
d188 3
a190 28
	int	ad;
	int	bd;
	int	cmp;

	for (;;) {
		if (*a == 0 && *b == 0) {
			cmp = 0;
			break;
		}
		ad = bd = 0;
		for ( ; *a && *a != '.' ; a++) {
			ad = (ad * 10) + (*a - '0');
		}
		for ( ; *b && *b != '.' ; b++) {
			bd = (bd * 10) + (*b - '0');
		}
		if ((cmp = ad - bd) != 0) {
			break;
		}
		if (*a == '.') {
			a++;
		}
		if (*b == '.') {
			b++;
		}
	}
	return (op == GE) ? cmp >= 0 : (op == GT) ? cmp > 0 : (op == LE) ? cmp <= 0 : cmp < 0;
}
d192 4
a195 41
/* match on a relation against dewey decimal numbers */
/* returns 0 if found, 1 if not (!) */
static int
deweymatch(char *name, int op, char *ver, char *dbdir, int quiet)
{
	struct dirent  *dp;
	char		*cp;
	DIR            *dirp;
	int             ret;
        int     	n;

	n = strlen(name);
	ret = 1;
	if ((dirp = opendir(dbdir)) == (DIR *) NULL) {
		warnx("can't opendir package dir '%s'", dbdir);
		return 1;
	}
	while ((dp = readdir(dirp)) != (struct dirent *) NULL) {
		if (strcmp(dp->d_name, ".") == 0 || strcmp(dp->d_name, "..") == 0) {
			continue;
		}
		if ((cp = strrchr(dp->d_name, '-')) != (char *) NULL) {
			if (strncmp(dp->d_name, name, cp - dp->d_name) == 0 && n == cp - dp->d_name) {
				if (deweycmp(cp + 1, op, ver)) {
					if (!quiet)
						printf("%s\n", dp->d_name);
					ret = 0;
				}
			}
		}
	}
	closedir(dirp);
	return ret;
}

/* do a match on a package pattern in dbdir */
/* returns 0 if found, 1 if not (!) */
static int
matchname(char *pkgspec, char *dbdir, int quiet)
{
	struct stat	st;
a196 4
	char		*sep;
	char		*last;
	char		*alt;
	char		*cp;
d198 1
a198 2
	int		cnt;
	int		ret;
d200 3
a202 44
	if ((sep = strchr(pkgspec, '{')) != (char *) NULL) {
		/* emulate csh-type alternates */
		(void) strncpy(buf, pkgspec, sep - pkgspec);
		alt = &buf[sep - pkgspec];
		for (last = NULL, cnt = 0, cp = sep ; *cp && !last ; cp++) {
			if (*cp == '{') {
				cnt++;
			} else if (*cp == '}' && --cnt == 0 && last == NULL) {
				last = cp + 1;
			}
		}
		if (cnt != 0) {
			warnx("Malformed alternate `%s'", pkgspec);
			return 1;
		}
		for (ret = 1, cp = sep + 1 ; *sep != '}' ; cp = sep + 1) {
			for (cnt = 0, sep = cp ; cnt > 0 || (cnt == 0 && *sep != '}' && *sep != ',') ; sep++) {
				if (*sep == '{') {
					cnt++;
				} else if (*sep == '}') {
					cnt--;
				}
			}
			(void) snprintf(alt, sizeof(buf) - (alt - buf), "%.*s%s", (int)(sep - cp), cp, last);
			if (matchname(buf, dbdir, quiet) == 0) {
				ret = 0;
			}
		}
		return ret;
	}
	if ((sep = strpbrk(pkgspec, "<>")) != (char *) NULL) {
		/* perform relational dewey match on version number */
		(void) snprintf(buf, sizeof(buf), "%.*s", (int)(sep - pkgspec), pkgspec);
		cnt = (*sep == '>') ? (*(sep + 1) == '=') ? GE : GT : (*(sep + 1) == '=') ? LE : LT;
		cp = (cnt == GE || cnt == LE) ? sep + 2 : sep + 1;
		return deweymatch(buf, cnt, cp, dbdir, quiet);
	}
	if (strpbrk(pkgspec, "*?[]") != (char *) NULL) {
		return globmatch(pkgspec, dbdir, quiet);
	}
	/* No shell meta character given - simple check */
	(void) snprintf(buf, sizeof(buf), "%s/%s", dbdir, pkgspec);
	error = (lstat(buf, &st) < 0);
	if (!error && !quiet)
d204 1
d206 1
d229 1
a229 1
		return matchname(CheckPkg, tmp, Quiet);
@


1.3
log
@Invoke raging paranoia on strcpy's that should be strncpy's.
These should be checked in all but one case anyway, but you never know.
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.2 1996/06/04 08:43:39 niklas Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.2 1996/06/04 08:43:39 niklas Exp $";
d30 4
d35 81
d117 11
a127 1
static int pkg_do(char *);
d129 48
a176 2
int
pkg_perform(char **pkgs)
d178 23
a200 2
    int i, err_cnt = 0;
    char *tmp;
d202 6
a207 1
    signal(SIGINT, cleanup);
d209 31
a239 34
    tmp = getenv(PKG_DBDIR);
    if (!tmp)
	tmp = DEF_LOG_DIR;
    /* Overriding action? */
    if (AllInstalled || CheckPkg) {
	if (isdir(tmp)) {
	    DIR *dirp;
	    struct dirent *dp;

	    dirp = opendir(tmp);
	    if (dirp) {
		for (dp = readdir(dirp); dp != NULL; dp = readdir(dirp)) {
		    if (strcmp(dp->d_name, ".") && strcmp(dp->d_name, "..")) {
			if (CheckPkg) {
			    if (!strcmp(dp->d_name, CheckPkg))
				return 0;
			}
			else
			    err_cnt += pkg_do(dp->d_name);
		    }
		}
		(void)closedir(dirp);
		if (CheckPkg)
		    return 1;
	    }
	    else
		++err_cnt;
	} else if (CheckPkg)
	    return 1;			/* no dir -> not installed! */

    }
    for (i = 0; pkgs[i]; i++)
	err_cnt += pkg_do(pkgs[i]);
    return err_cnt;
d242 34
a275 1
static char *Home;
d277 2
d280 1
a280 1
pkg_do(char *pkg)
d282 56
a337 123
    Boolean installed = FALSE, isTMP = FALSE;
    char log_dir[FILENAME_MAX];
    char fname[FILENAME_MAX];
    Package plist;
    FILE *fp;
    struct stat sb;
    char *cp = NULL;
    int code = 0;

    if (isURL(pkg)) {
	if ((cp = fileGetURL(NULL, pkg)) != NULL) {
	    strncpy(fname, cp, FILENAME_MAX);
	    isTMP = TRUE;
	}
    }
    else if (fexists(pkg) && isfile(pkg)) {
	int len;

	if (*pkg != '/') {
	    if (!getcwd(fname, FILENAME_MAX))
		upchuck("getcwd");
	    len = strlen(fname);
	    snprintf(&fname[len], FILENAME_MAX - len, "/%s", pkg);
	}
	else
	    strncpy(fname, pkg, FILENAME_MAX);
	cp = fname;
    }
    else {
	if ((cp = fileFindByPath(NULL, pkg)) != NULL)
	    strncpy(fname, cp, FILENAME_MAX);
    }
    if (cp) {
	/*
	 * Apply a crude heuristic to see how much space the package will
	 * take up once it's unpacked.  I've noticed that most packages
	 * compress an average of 75%, but we're only unpacking the + files so
	 * be very optimistic.
	 */
	if (stat(fname, &sb) == FAIL) {
	    whinge("Can't stat package file '%s'.", fname);
	    code = 1;
	    goto bail;
	}
	Home = make_playpen(PlayPen, sb.st_size / 2);
	if (unpack(fname, "+*")) {
	    whinge("Error during unpacking, no info for '%s' available.", pkg);
	    code = 1;
	    goto bail;
	}
    }
    /* It's not an ininstalled package, try and find it among the installed */
    else {
	char *tmp;

	sprintf(log_dir, "%s/%s", (tmp = getenv(PKG_DBDIR)) ? tmp : DEF_LOG_DIR,
		pkg);
	if (!fexists(log_dir)) {
	    whinge("Can't find package `%s' installed or in a file!", pkg);
	    return 1;
	}
	if (chdir(log_dir) == FAIL) {
	    whinge("Can't change directory to '%s'!", log_dir);
	    return 1;
	}
	installed = TRUE;
    }

    /* Suck in the contents list */
    plist.head = plist.tail = NULL;
    fp = fopen(CONTENTS_FNAME, "r");
    if (!fp) {
	whinge("Unable to open %s file.", CONTENTS_FNAME);
	code = 1;
	goto bail;
    }
    /* If we have a prefix, add it now */
    read_plist(&plist, fp);
    fclose(fp);

    /*
     * Index is special info type that has to override all others to make
     * any sense.
     */
    if (Flags & SHOW_INDEX) {
	char tmp[FILENAME_MAX];

	snprintf(tmp, FILENAME_MAX, "%-19s ", pkg);
	show_index(tmp, COMMENT_FNAME);
    }
    else {
	/* Start showing the package contents */
	if (!Quiet)
	    printf("%sInformation for %s:\n\n", InfoPrefix, pkg);
	if (Flags & SHOW_COMMENT)
	    show_file("Comment:\n", COMMENT_FNAME);
	if ((Flags & SHOW_REQBY) && !isemptyfile(REQUIRED_BY_FNAME))
	    show_file("Required by:\n", REQUIRED_BY_FNAME);
	if (Flags & SHOW_DESC)
	    show_file("Description:\n", DESC_FNAME);
	if ((Flags & SHOW_DISPLAY) && fexists(DISPLAY_FNAME))
	    show_file("Install notice:\n", DISPLAY_FNAME);
	if (Flags & SHOW_PLIST)
	    show_plist("Packing list:\n", &plist, (plist_t)-1);
	if ((Flags & SHOW_INSTALL) && fexists(INSTALL_FNAME))
	    show_file("Install script:\n", INSTALL_FNAME);
	if ((Flags & SHOW_DEINSTALL) && fexists(DEINSTALL_FNAME))
	    show_file("De-Install script:\n", DEINSTALL_FNAME);
	if ((Flags & SHOW_MTREE) && fexists(MTREE_FNAME))
	    show_file("mtree file:\n", MTREE_FNAME);
	if (Flags & SHOW_PREFIX)
	    show_plist("Prefix(s):\n", &plist, PLIST_CWD);
	if (Flags & SHOW_FILES)
	    show_files("Files:\n", &plist);
	if (!Quiet)
	    puts(InfoPrefix);
    }
    free_plist(&plist);
 bail:
    leave_playpen(Home);
    if (isTMP)
	unlink(fname);
    return code;
d343 38
a380 1
    leave_playpen(Home);
@


1.2
log
@Oops, screwed up the $OpenBSD$ IDs
@
text
@d1 1
a1 1
/*	$OpenBSD: perform.c,v 1.1 1996/06/04 07:56:10 niklas Exp $	*/
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.1 1996/06/04 07:56:10 niklas Exp $";
d94 1
a94 1
	    strcpy(fname, cp);
d108 1
a108 1
	    strcpy(fname, pkg);
@


1.1
log
@add package tools from FreeBSD
@
text
@d1 2
a2 1
#	$OpenBSD$
d4 1
a4 1
static const char *rcsid = "$OpenBSD: perform.c,v 1.18 1995/10/25 15:38:31 jkh Exp $";
@
