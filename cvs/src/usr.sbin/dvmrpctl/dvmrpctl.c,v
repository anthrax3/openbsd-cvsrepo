head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.10
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.8
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.4
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.11.0.10
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.7.0.4
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.1.0.2
	OPENBSD_4_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2015.12.05.13.11.00;	author claudio;	state Exp;
branches;
next	1.14;
commitid	IgfRve2khGGqPTCy;

1.14
date	2015.10.25.20.23.00;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	T3iUB0AYQfBtLYCw;

1.13
date	2015.10.10.22.11.37;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	Bq6EcLtDgrQ2yWDa;

1.12
date	2015.09.27.17.29.45;	author stsp;	state Exp;
branches;
next	1.11;
commitid	4R1EROmhJjzhK6EW;

1.11
date	2013.11.14.20.48.51;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2013.04.09.14.51.33;	author gilles;	state Exp;
branches;
next	1.9;

1.9
date	2009.11.02.20.32.17;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2009.09.14.11.49.25;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2009.06.06.07.52.04;	author pyr;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.24.16.23.52;	author michele;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.31.14.10.20;	author sobrado;	state Exp;
branches;
next	1.4;

1.4
date	2007.10.15.02.16.35;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.30.02.21.08;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.28.19.21.15;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.01.14.21.28;	author norby;	state Exp;
branches;
next	;


desc
@@


1.15
log
@EAGAIN handling for imsg_read. OK henning@@ benno@@
@
text
@/*	$OpenBSD: dvmrpctl.c,v 1.14 2015/10/25 20:23:00 deraadt Exp $ */

/*
 * Copyright (c) 2005 Claudio Jeker <claudio@@openbsd.org>
 * Copyright (c) 2004, 2005, 2006 Esben Norby <norby@@openbsd.org>
 * Copyright (c) 2003 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <netinet/in.h>
#include <netinet/ip_mroute.h>
#include <arpa/inet.h>
#include <net/if_types.h>

#include <err.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "igmp.h"
#include "dvmrp.h"
#include "dvmrpd.h"
#include "dvmrpe.h"
#include "parser.h"
#include "log.h"

__dead void	 usage(void);
int		 show_summary_msg(struct imsg *);
int		 show_interface_msg(struct imsg *);
int		 show_interface_detail_msg(struct imsg *);
int		 show_igmp_msg(struct imsg *);
const char	*print_if_type(enum iface_type type);
const char	*print_nbr_state(int);
const char	*print_link(int);
const char	*fmt_timeframe(time_t t);
const char	*fmt_timeframe_core(time_t t);
int		 show_nbr_msg(struct imsg *);
const char	*print_dvmrp_options(u_int8_t);
int		 show_nbr_detail_msg(struct imsg *);
int		 show_rib_msg(struct imsg *);
int		 show_rib_detail_msg(struct imsg *);
int		 show_mfc_msg(struct imsg *);
int		 show_mfc_detail_msg(struct imsg *);
const char *	 get_linkstate(uint8_t, int);

struct imsgbuf	*ibuf;

__dead void
usage(void)
{
	extern char *__progname;

	fprintf(stderr, "usage: %s command [argument ...]\n", __progname);
	exit(1);
}

int
main(int argc, char *argv[])
{
	struct sockaddr_un	 sun;
	struct parse_result	*res;
	struct imsg		 imsg;
	unsigned int		 ifidx = 0;
	int			 ctl_sock;
	int			 done = 0, verbose = 0;
	int			 n;

	/* parse options */
	if ((res = parse(argc - 1, argv + 1)) == NULL)
		exit(1);

	/* connect to dvmrpd control socket */
	if ((ctl_sock = socket(AF_UNIX, SOCK_STREAM, 0)) == -1)
		err(1, "socket");

	bzero(&sun, sizeof(sun));
	sun.sun_family = AF_UNIX;
	strlcpy(sun.sun_path, DVMRPD_SOCKET, sizeof(sun.sun_path));
	if (connect(ctl_sock, (struct sockaddr *)&sun, sizeof(sun)) == -1)
		err(1, "connect: %s", DVMRPD_SOCKET);

	if (pledge("stdio", NULL) == -1)
		err(1, "pledge");

	if ((ibuf = malloc(sizeof(struct imsgbuf))) == NULL)
		fatal(NULL);
	imsg_init(ibuf, ctl_sock);
	done = 0;

	/* process user request */
	switch (res->action) {
	case NONE:
		usage();
		/* NOTREACHED */
	case SHOW:
	case SHOW_SUM:
		imsg_compose(ibuf, IMSG_CTL_SHOW_SUM, 0, 0, -1, NULL, 0);
		break;
	case SHOW_IFACE:
		printf("%-11s %-18s %-10s %-10s %-10s %-8s %s\n",
		    "Interface", "Address", "State", "ProbeTimer", "Linkstate",
		    "Uptime", "Groups");
		/* FALLTHROUGH */
	case SHOW_IFACE_DTAIL:
		if (*res->ifname) {
			ifidx = if_nametoindex(res->ifname);
			if (ifidx == 0)
				errx(1, "no such interface %s", res->ifname);
		}
		imsg_compose(ibuf, IMSG_CTL_SHOW_IFACE, 0, 0, -1, &ifidx,
		    sizeof(ifidx));
		break;
	case SHOW_IGMP:
		if (*res->ifname) {
			ifidx = if_nametoindex(res->ifname);
			if (ifidx == 0)
				errx(1, "no such interface %s", res->ifname);
		}
		imsg_compose(ibuf, IMSG_CTL_SHOW_IGMP, 0, 0, -1, &ifidx,
		    sizeof(ifidx));
		break;
	case SHOW_NBR:
		printf("%-15s %-10s %-9s %-15s %-11s %-8s\n", "ID", "State",
		    "DeadTime", "Address", "Interface", "Uptime");
		/* FALLTHROUGH */
	case SHOW_NBR_DTAIL:
		imsg_compose(ibuf, IMSG_CTL_SHOW_NBR, 0, 0, -1, NULL, 0);
		break;
	case SHOW_RIB:
		printf("%-20s %-17s %-7s %-10s %-s\n", "Destination", "Nexthop",
		    "Cost", "Uptime", "Expire");
		/* FALLTHROUGH */
	case SHOW_RIB_DTAIL:
		imsg_compose(ibuf, IMSG_CTL_SHOW_RIB, 0, 0, -1, NULL, 0);
		break;
	case SHOW_MFC:
		printf("%-16s %-16s %-9s %-9s %-4s %-10s %-10s\n", "Group",
		    "Origin", "Incoming", "Outgoing", "TTL", "Uptime",
		    "Expire");
		/* FALLTHROUGH */
	case SHOW_MFC_DTAIL:
		imsg_compose(ibuf, IMSG_CTL_SHOW_MFC, 0, 0, -1, NULL, 0);
		break;
	case LOG_VERBOSE:
		verbose = 1;
		/* FALLTHROUGH */
	case LOG_BRIEF:
		imsg_compose(ibuf, IMSG_CTL_LOG_VERBOSE, 0, 0, -1,
		    &verbose, sizeof(verbose));
		printf("logging request sent.\n");
		done = 1;
		break;
	case RELOAD:
		imsg_compose(ibuf, IMSG_CTL_RELOAD, 0, 0, -1, NULL, 0);
		printf("reload request sent.\n");
		done = 1;
		break;
	}

	while (ibuf->w.queued)
		if (msgbuf_write(&ibuf->w) <= 0 && errno != EAGAIN)
			err(1, "write error");

	while (!done) {
		if ((n = imsg_read(ibuf)) == -1 && errno != EAGAIN)
			errx(1, "imsg_read error");
		if (n == 0)
			errx(1, "pipe closed");

		while (!done) {
			if ((n = imsg_get(ibuf, &imsg)) == -1)
				errx(1, "imsg_get error");
			if (n == 0)
				break;
			switch (res->action) {
			case SHOW:
			case SHOW_SUM:
				done = show_summary_msg(&imsg);
				break;
			case SHOW_IFACE:
				done = show_interface_msg(&imsg);
				break;
			case SHOW_IFACE_DTAIL:
				done = show_interface_detail_msg(&imsg);
				break;
			case SHOW_IGMP:
				done = show_igmp_msg(&imsg);
				break;
			case SHOW_NBR:
				done = show_nbr_msg(&imsg);
				break;
			case SHOW_NBR_DTAIL:
				done = show_nbr_detail_msg(&imsg);
				break;
			case SHOW_RIB:
				done = show_rib_msg(&imsg);
				break;
			case SHOW_RIB_DTAIL:
				done = show_rib_detail_msg(&imsg);
				break;
			case SHOW_MFC:
				done = show_mfc_msg(&imsg);
				break;
			case SHOW_MFC_DTAIL:
				done = show_mfc_detail_msg(&imsg);
				break;
			case NONE:
			case LOG_VERBOSE:
			case LOG_BRIEF:
			case RELOAD:
				break;
			}
			imsg_free(&imsg);
		}
	}
	close(ctl_sock);
	free(ibuf);

	return (0);
}

int
show_summary_msg(struct imsg *imsg)
{
	struct ctl_sum		*sum;

	switch (imsg->hdr.type) {
	case IMSG_CTL_SHOW_SUM:
		sum = imsg->data;
		printf("Router ID: %s\n", inet_ntoa(sum->rtr_id));
		printf("Hold time is %d sec(s)\n", sum->hold_time);
		break;
	case IMSG_CTL_END:
		printf("\n");
		return (1);
	default:
		break;
	}

	return (0);
}

int
show_interface_msg(struct imsg *imsg)
{
	struct ctl_iface	*iface;
	char			*netid;

	switch (imsg->hdr.type) {
	case IMSG_CTL_SHOW_IFACE:
		iface = imsg->data;

		if (asprintf(&netid, "%s/%d", inet_ntoa(iface->addr),
		    mask2prefixlen(iface->mask.s_addr)) == -1)
			err(1, NULL);
		printf("%-11s %-18s %-10s %-10s %-10s %-8s %5d\n",
		    iface->name, netid, if_state_name(iface->state),
		    iface->probe_timer == 0 ? "00:00:00" :
		    fmt_timeframe_core(iface->probe_timer),
		    get_linkstate(iface->if_type, iface->linkstate),
		    iface->uptime == 0 ? "00:00:00" :
		    fmt_timeframe_core(iface->uptime), iface->group_cnt);
		free(netid);
		break;
	case IMSG_CTL_END:
		printf("\n");
		return (1);
	default:
		break;
	}

	return (0);
}

int
show_interface_detail_msg(struct imsg *imsg)
{
	struct ctl_iface	*iface;

	switch (imsg->hdr.type) {
	case IMSG_CTL_SHOW_IFACE:
		iface = imsg->data;

		printf("\n");
		printf("Interface %s, line protocol is %s\n",
		    iface->name, print_link(iface->flags));
		printf("  Internet address %s/%d\n",
		    inet_ntoa(iface->addr),
		    mask2prefixlen(iface->mask.s_addr));
		printf("  Linkstate %s\n",
		    get_linkstate(iface->if_type, iface->linkstate));
		printf("  Network type %s, cost: %d\n",
		    if_type_name(iface->type), iface->metric);
		printf("  State %s, querier ", if_state_name(iface->state));
		if (iface->state == IF_STA_QUERIER)
			printf("%s\n", inet_ntoa(iface->addr));
		else
			printf("%s\n", inet_ntoa(iface->querier));
		printf("  Generation ID %d\n", iface->gen_id);
		printf("  Timer intervals configured, "
		    "probe %d, dead %d\n", iface->probe_interval,
		    iface->dead_interval);
		if (iface->passive)
			printf("    Passive interface (No Hellos)\n");
		else if (iface->probe_timer < 0)
			printf("    Hello timer not running\n");
		else
			printf("    Hello timer due in %s\n",
			    fmt_timeframe_core(iface->probe_timer));
		printf("    Uptime %s\n", iface->uptime == 0 ?
		    "00:00:00" : fmt_timeframe_core(iface->uptime));
		printf("  Adjacent neighbor count is "
		    "%d\n", iface->adj_cnt);
		break;
	case IMSG_CTL_END:
		printf("\n");
		return (1);
	default:
		break;
	}

	return (0);
}

int
show_igmp_msg(struct imsg *imsg)
{
	struct ctl_iface	*iface;
	struct ctl_group	*group;
	char			*netid;

	switch (imsg->hdr.type) {
	case IMSG_CTL_SHOW_IFACE:
		iface = imsg->data;
		if (asprintf(&netid, "%s/%d", inet_ntoa(iface->addr),
		    mask2prefixlen(iface->mask.s_addr)) == -1)
			err(1, NULL);
		printf("\nInterface %s, address %s, state %s, groups %d\n",
		    iface->name, netid, if_state_name(iface->state),
		    iface->group_cnt);
		free(netid);
		printf("  %-16s %-10s %-10s %-10s\n", "Group", "State",
		    "DeadTimer", "Uptime");
		break;
	case IMSG_CTL_SHOW_IGMP:
		group = imsg->data;
		printf("  %-16s %-10s %-10s %-10s\n", inet_ntoa(group->addr),
		    group_state_name(group->state),
		    group->dead_timer == 0 ? "00:00:00" :
		    fmt_timeframe_core(group->dead_timer),
		    group->uptime == 0 ? "00:00:00" :
		    fmt_timeframe_core(group->uptime));
		break;
	case IMSG_CTL_END:
		printf("\n");
		return (1);
	default:
		break;
	}

	return (0);
}

const char *
print_if_type(enum iface_type type)
{
	switch (type) {
	case IF_TYPE_POINTOPOINT:
		return ("POINTOPOINT");
	case IF_TYPE_BROADCAST:
		return ("BROADCAST");
	default:
		return ("UNKNOWN");
	}
}

const char *
print_nbr_state(int state)
{
	switch (state) {
	case NBR_STA_DOWN:
		return ("DOWN");
	case NBR_STA_1_WAY:
		return ("1-WAY");
	case NBR_STA_2_WAY:
		return ("2-WAY");
	default:
		return ("UNKNOWN");
	}
}

const char *
print_link(int state)
{
	if (state & IFF_UP)
		return ("UP");
	else
		return ("DOWN");
}

#define TF_BUFS	8
#define TF_LEN	9

const char *
fmt_timeframe(time_t t)
{
	if (t == 0)
		return ("Never");
	else
		return (fmt_timeframe_core(time(NULL) - t));
}

const char *
fmt_timeframe_core(time_t t)
{
	char		*buf;
	static char	 tfbuf[TF_BUFS][TF_LEN];	/* ring buffer */
	static int	 idx = 0;
	unsigned int	 sec, min, hrs, day;
	unsigned long long	week;

	if (t == 0)
		return ("Stopped");

	buf = tfbuf[idx++];
	if (idx == TF_BUFS)
		idx = 0;

	week = t;

	sec = week % 60;
	week /= 60;
	min = week % 60;
	week /= 60;
	hrs = week % 24;
	week /= 24;
	day = week % 7;
	week /= 7;

	if (week > 0)
		snprintf(buf, TF_LEN, "%02lluw%01ud%02uh", week, day, hrs);
	else if (day > 0)
		snprintf(buf, TF_LEN, "%01ud%02uh%02um", day, hrs, min);
	else
		snprintf(buf, TF_LEN, "%02u:%02u:%02u", hrs, min, sec);

	return (buf);
}

/* prototype defined in dvmrpd.h and shared with the kroute.c version */
u_int8_t
mask2prefixlen(in_addr_t ina)
{
	if (ina == 0)
		return (0);
	else
		return (33 - ffs(ntohl(ina)));
}

int
show_nbr_msg(struct imsg *imsg)
{
	struct ctl_nbr	*nbr;

	switch (imsg->hdr.type) {
	case IMSG_CTL_SHOW_NBR:
		nbr = imsg->data;
		printf("%-15s %-10s %-10s", inet_ntoa(nbr->id),
		    print_nbr_state(nbr->state),
		    fmt_timeframe_core(nbr->dead_timer));
		printf("%-15s %-11s %s\n", inet_ntoa(nbr->addr),
		    nbr->name, fmt_timeframe_core(nbr->uptime));
		break;
	case IMSG_CTL_END:
		printf("\n");
		return (1);
	default:
		break;
	}

	return (0);
}

const char *
print_dvmrp_options(u_int8_t opts)
{
	static char	optbuf[32];

	snprintf(optbuf, sizeof(optbuf), "*|*|%s|%s|%s|%s|%s|%s",
	    opts & DVMRP_CAP_NETMASK ? "N" : "-",
	    opts & DVMRP_CAP_SNMP ? "S" : "-",
	    opts & DVMRP_CAP_MTRACE ? "M" : "-",
	    opts & DVMRP_CAP_GENID ? "G" : "-",
	    opts & DVMRP_CAP_PRUNE ? "P" : "-",
	    opts & DVMRP_CAP_LEAF ? "L" : "-");
	return (optbuf);
}

int
show_nbr_detail_msg(struct imsg *imsg)
{
	struct ctl_nbr	*nbr;

	switch (imsg->hdr.type) {
	case IMSG_CTL_SHOW_NBR:
		nbr = imsg->data;
		break;
	case IMSG_CTL_END:
		printf("\n");
		return (1);
	default:
		break;
	}

	return (0);
}

int
show_rib_msg(struct imsg *imsg)
{
	struct ctl_rt	*rt;
	char		*dstnet;

	switch (imsg->hdr.type) {
	case IMSG_CTL_SHOW_RIB:
		rt = imsg->data;
		if (asprintf(&dstnet, "%s/%d", inet_ntoa(rt->prefix),
		    rt->prefixlen) == -1)
			err(1, NULL);

		printf("%-20s %-17s %-7d %-9s %9s\n", dstnet,
		    inet_ntoa(rt->nexthop),
		    rt->cost, rt->uptime == 0 ? "-" :
		    fmt_timeframe_core(rt->uptime),
		    rt->expire == 0 ? "00:00:00" :
		    fmt_timeframe_core(rt->expire));
		free(dstnet);

		break;
	case IMSG_CTL_END:
		printf("\n");
		return (1);
	default:
		break;
	}

	return (0);
}

int
show_rib_detail_msg(struct imsg *imsg)
{

	switch (imsg->hdr.type) {
	case IMSG_CTL_SHOW_RIB:
		break;
	case IMSG_CTL_END:
		printf("\n");
		return (1);
	default:
		break;
	}

	return (0);
}

int
show_mfc_msg(struct imsg *imsg)
{
	char		 iname[IF_NAMESIZE];
	char		 oname[IF_NAMESIZE] = "-";
	struct ctl_mfc	*mfc;
	int		 i;


	switch (imsg->hdr.type) {
	case IMSG_CTL_SHOW_MFC:
		mfc = imsg->data;
		if_indextoname(mfc->ifindex, iname);

		/* search for first entry with ttl > 0 */
		for (i = 0; i < MAXVIFS; i++) {
			if (mfc->ttls[i] > 0) {
				if_indextoname(i, oname);
				i++;
				break;
			}
		}

		/* display first entry with uptime */
		printf("%-16s ", inet_ntoa(mfc->group));
		printf("%-16s %-9s %-9s %-4d %-10s %-10s\n",
		    inet_ntoa(mfc->origin), iname, oname, mfc->ttls[i - 1],
		    mfc->uptime == 0 ? "-" : fmt_timeframe_core(mfc->uptime),
		    mfc->expire == 0 ? "-" : fmt_timeframe_core(mfc->expire));

		/* display remaining entries with ttl > 0 */
		for (; i < MAXVIFS; i++) {
			if (mfc->ttls[i] > 0) {
				if_indextoname(i, oname);
				printf("%43s %-9s %-4d\n", " ", oname,
				    mfc->ttls[i]);
			}
		}
		break;
	case IMSG_CTL_END:
		printf("\n");
		return (1);
	default:
		break;
	}

	return (0);
}

int
show_mfc_detail_msg(struct imsg *imsg)
{

	switch (imsg->hdr.type) {
	case IMSG_CTL_SHOW_MFC:
		break;
	case IMSG_CTL_END:
		printf("\n");
		return (1);
	default:
		break;
	}

	return (0);
}

const struct if_status_description
		if_status_descriptions[] = LINK_STATE_DESCRIPTIONS;

const char *
get_linkstate(uint8_t if_type, int link_state)
{
	const struct if_status_description *p;
	static char buf[8];

	for (p = if_status_descriptions; p->ifs_string != NULL; p++) {
		if (LINK_STATE_DESC_MATCH(p, if_type, link_state))
			return (p->ifs_string);
	}
	snprintf(buf, sizeof(buf), "[#%d]", link_state);
	return (buf);
}
@


1.14
log
@pledge "route" no longer needed for if_indextoname & if_nametoindex
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpctl.c,v 1.13 2015/10/10 22:11:37 deraadt Exp $ */
d181 1
a181 1
		if ((n = imsg_read(ibuf)) == -1)
@


1.13
log
@pledge "stdio route"; untested.  this has the if_nametoindex() problem as
other *ctl programs using their daemon's log.c, and thus requires "route"
for now.  we hope to solve that issue soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpctl.c,v 1.12 2015/09/27 17:29:45 stsp Exp $ */
d98 1
a98 1
	if (pledge("stdio route", NULL) == -1)
@


1.12
log
@As done for bgpd recently, rename if_mediatype to if_type in dvrmpd.
Remove unused function get_ifms_type(). No ifmedia in here anymore.
"move forward" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpctl.c,v 1.11 2013/11/14 20:48:51 deraadt Exp $ */
d97 3
@


1.11
log
@cope with the EAGAIN API change for msgbuf_write()
ok benno
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpctl.c,v 1.10 2013/04/09 14:51:33 gilles Exp $ */
a26 1
#include <net/if_media.h>
a44 1
int		 get_ifms_type(int);
d60 1
a60 1
const char *	 get_linkstate(int, int);
a256 19
get_ifms_type(int mediatype)
{
	switch (mediatype) {
	case IFT_ETHER:
		return (IFM_ETHER);
		break;
	case IFT_FDDI:
		return (IFM_FDDI);
		break;
	case IFT_CARP:
		return (IFM_CARP);
		break;
	default:
		return (0);
		break;
	}
}

int
d273 1
a273 1
		    get_linkstate(iface->mediatype, iface->linkstate),
d304 1
a304 1
		    get_linkstate(iface->mediatype, iface->linkstate));
d650 1
a650 1
get_linkstate(int media_type, int link_state)
d656 1
a656 1
		if (LINK_STATE_DESC_MATCH(p, media_type, link_state))
@


1.10
log
@do not store a time_t or the result of a time_t division in an int

prompted by deraadt@@, ok claudio@@ chl@@ guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpctl.c,v 1.9 2009/11/02 20:32:17 claudio Exp $ */
d31 1
d176 1
a176 1
		if (msgbuf_write(&ibuf->w) < 0)
@


1.9
log
@Implement "log verbose" and "log brief" to enable or disable verbose debug
logging. henning, sthen, michele like the idea
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpctl.c,v 1.8 2009/09/14 11:49:25 claudio Exp $ */
d452 2
a453 1
	unsigned int	 sec, min, hrs, day, week;
d474 1
a474 1
		snprintf(buf, TF_LEN, "%02uw%01ud%02uh", week, day, hrs);
@


1.8
log
@Switch the various link state printing codes to use the new if_media
independent LINK_STATE_DESCRIPTIONS. Code is now more or less a one to
one copy of get_linkstate() in route/route.c.
OK henning, michele, sthen, deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpctl.c,v 1.7 2009/06/06 07:52:04 pyr Exp $ */
d82 1
a82 1
	int			 done = 0;
d158 9
d222 2
@


1.7
log
@make dvmrpd imsg-in-a-lib ready as well.
``put it in'' claudio@@, ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpctl.c,v 1.6 2009/01/24 16:23:52 michele Exp $ */
d282 2
a283 2
		    get_linkstate(get_ifms_type(iface->mediatype),
		    iface->linkstate), iface->uptime == 0 ? "00:00:00" :
d313 1
a313 2
		    get_linkstate(get_ifms_type(iface->mediatype),
		    iface->linkstate));
d654 2
a655 5
const int	ifm_status_valid_list[] = IFM_STATUS_VALID_LIST;
const struct ifmedia_status_description
		ifm_status_descriptions[] = IFM_STATUS_DESCRIPTIONS;
const struct ifmedia_description
		ifm_type_descriptions[] = IFM_TYPE_DESCRIPTIONS;
d660 2
a661 2
	const struct ifmedia_status_description	*p;
	int					 i;
d663 6
a668 14
	if (link_state == LINK_STATE_UNKNOWN)
		return ("unknown");

	for (i = 0; ifm_status_valid_list[i] != 0; i++)
		for (p = ifm_status_descriptions; p->ifms_valid != 0; p++) {
			if (p->ifms_type != media_type ||
			    p->ifms_valid != ifm_status_valid_list[i])
				continue;
			if (LINK_STATE_IS_UP(link_state))
				return (p->ifms_string[1]);
			return (p->ifms_string[0]);
		}

	return ("unknown link state");
@


1.6
log
@Reflect dvmrpd changes, nbr_cnt is no more needed.

ok norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpctl.c,v 1.5 2008/12/31 14:10:20 sobrado Exp $ */
a73 5
void
imsg_event_add(struct imsgbuf *i)
{
}

d101 1
a101 1
	imsg_init(ibuf, ctl_sock, NULL);
d111 1
a111 1
		imsg_compose(ibuf, IMSG_CTL_SHOW_SUM, 0, 0, NULL, 0);
d124 1
a124 1
		imsg_compose(ibuf, IMSG_CTL_SHOW_IFACE, 0, 0, &ifidx,
d133 1
a133 1
		imsg_compose(ibuf, IMSG_CTL_SHOW_IGMP, 0, 0, &ifidx,
d141 1
a141 1
		imsg_compose(ibuf, IMSG_CTL_SHOW_NBR, 0, 0, NULL, 0);
d148 1
a148 1
		imsg_compose(ibuf, IMSG_CTL_SHOW_RIB, 0, 0, NULL, 0);
d156 1
a156 1
		imsg_compose(ibuf, IMSG_CTL_SHOW_MFC, 0, 0, NULL, 0);
d159 1
a159 1
		imsg_compose(ibuf, IMSG_CTL_RELOAD, 0, 0, NULL, 0);
@


1.5
log
@sync synopsis/usage.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpctl.c,v 1.4 2007/10/15 02:16:35 deraadt Exp $ */
d340 2
a341 2
		printf("  Neighbor count is %d, adjacent neighbor count is "
		    "%d\n", iface->nbr_cnt, iface->adj_cnt);
@


1.4
log
@specifying int instead of just unsigned is better style
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpctl.c,v 1.3 2007/05/30 02:21:08 henning Exp $ */
d70 1
a70 1
	fprintf(stderr, "usage: %s <command> [arg [...]]\n", __progname);
@


1.3
log
@yuck, no cookie for me
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpctl.c,v 1.2 2006/11/28 19:21:15 reyk Exp $ */
d447 1
a447 1
	unsigned	 sec, min, hrs, day, week;
@


1.2
log
@add additional link states to report the half duplex / full duplex
state, if known by the driver. this is required to check the full
duplex state without depending on the ifmedia ioctl which can't be
called in the kernel without process context.

ok henning@@, brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpctl.c,v 1.1 2006/06/01 14:21:28 norby Exp $ */
a259 3
		break;
	case IFT_ISO88025:
		return (IFM_TOKEN);
@


1.1
log
@Controller for dvmrpd.

Almost all available information in dvmrpd can be read.
Not connected to builds yet.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d683 3
a685 1
			return (p->ifms_string[link_state == LINK_STATE_UP]);
@

