head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2012.08.23.06.21.46;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.09.16.14;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.49.04;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.40.29;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.03;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.52.51;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.52.51;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.18;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.20.58;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@README for arla-0.35 ($arla:  $)
$arla: README,v 1.87 2003/07/15 16:22:58 lha Exp $

1. What is arla?

Arla is a free AFS cache-manager implementation.

2. Where do I find this file?

This file is contained inside
ftp://ftp.stacken.kth.se/pub/arla/arla-0.35.tar.gz
(aka /afs/stacken.kth.se/ftp/pub/arla/arla-0.35.tar.gz).

3. What is AFS?

AFS is a world-wide distributed file system.  See
<http://www.transarc.com/afs/transarc.com/public/www/Product/AFS/FAQ/faq.html>
for more information.

4. What's included in arla?

There is kernel support (with different level of functionality) for
the following operating systems:

- FreeBSD 4.5 (and later), and 5.1 and later
- OpenBSD 3.1 - 3.2
- NetBSD 1.5 and 1.6
- Linux 2.2.x, 2.4.x
- SunOS 4
- Solaris 2.6, 7, and 8
- AIX 4.x
- IRIX 6.x
- Digital Unix 4.0, Compaq Tru64 5.0 (OSF/1)
- Mac OS X 10.0 and 10.2 (and Darwin)

A cache manager (arlad) that works both in user-level mode and with
the kernel module.  The user-level mode is quite portable and has even
been working under Windows NT (with the cygwin32 libraries).

Some simple programs (amon, bos, fs, pts, tokens, vos, and udebug).

An experimental AFS server called milko.

5. What's the status of arla?

- Working stable client (currently cacheing whole files)
  Arlad caches ranges of files, from the first byte to the last requested.
- Authentication (using kth-krb4 or any other krb4 implantation)
- Used in production systems with OpenBSD, FreeBSD, NetBSD, Linux, and
  Mac OS X
- Some administration programs (bos, fs, vos, pts and bos)
- An experimental AFS server (milko)
- Graphical program, amon, for monitoring the state of the cache.
- A graphical interface for managing ACLs (for MacOS X only)
- A configuration utility for Mac OS X

6. What do I need to run arla?

If you have one of the systems listed above you will be able to mount
afs as a file system (and probably to panic your kernel as well).

The user-level programs should work and build on almost any other unix
dialect.

If you want to use authentication, you will also need a Kerberos v4
implementation.  We use and recommend the one at
<http://www.pdc.kth.se/kth-krb/>.

OpenBSD 2.3 and above already ships with kth-krb.  On OpenBSD 2.3 only, you'll
have to add the line 'AFS=yes' to /etc/mk.conf and rebuild libkafs and
afslog.  (can be found in /usr/src/kerberosIV/{kafs,afslog}) (versions
since 2.3 have AFS=yes on by default, except for m88k).

If you are using MIT-Kerberos or CNS Kerberos you can find a replacement
for libkafs in http://web.mit.edu/openafs/krbafs/. Then you
need to use the --with-krbafs=dir option when running configure.
Thanks to Derrick J Brashear <shadow@@dementia.org> and Alexandra
Ellwood <lxs@@mit.edu> for making this available for the MIT kerberos
users.

If you don't have Kerberos, you should still be able to test that it
works, but there's not much point in running unauthenticated, and it's
not very tested.

7. How do I compile/install/start arla?

See the file INSTALL

8. What do I do when I find a bug?

Report it with as much detail as possible (including patches) to
<arla-drinkers@@stacken.kth.se>.

If you find a bug, and do not have a clue what is wrong, please run
arlad with `arlad -n -z --debug=almost-all' and append the output the
the mail.  You can also turn on debug on an already running arlad with
`fs arladebug <debug-level>'.  To enable debugging in the nnpfs kernel
module, use `fs nnpfsdebug <debug-level>'.  The output will end up in
your syslog (like /var/log/messages or /var/adm/messages).

If arlad crashes, at least run gdb on the core dump and do a `bt'.
Print out variables around where it crashes if they seem useful.  If
you don't get a core dump, try starting arlad under gdb (the `-n'
option is useful here) and then do the same thing when it crashes.

If the kernel crashes, try to obtain a crash dump by whatever means
your OS has for this and then run the debugger on it.  The
documentation on your OS should have more information on how to
perform this task.

Without this info we are probably as lost as you are.

9. How do I adjust the amount of debug information?

Both arlad and the nnpfs (the kernel module) have variables for
controlling what type of debug messages should be printed.

They are controlled by the `--debug' option to arlad and then by
running `fs arladebug' and `fs nnpfsdebug'.

10. How hard is it to port arla to a new operating system?

It's not hard.  The user-level code is quite portable and is not much
different between different operating systems.  The kernel module is
system-specific but not that large and you can probably start with the
one in `nnpfs/SYSTEM' that's most similar to your system.  If you're
interested in doing the port or even run Arla on an OS not mentioned
above, send mail to
<arla-drinkers@@stacken.kth.se>.

11. Known problems.

OpenBSD on some architectures have serious problems with mmap.  If arlad
doesn't seem to work om your system run configure with `--disable-mmap'.
This problem has only been noticed on sun4m platforms.

The same problem exists on Mac OS X 10.1 (Darwin 1.4). Use the
--disable-mmap option.

If you have problems with stale data cached or arlad is misbehaving a
lot try zapping the entire cache directory (`/usr/arla/cache' per
default) and restarting arlad.

12. How can I help?

With code.  Send us bug-reports and/or patches.

13. Are there any mailing lists for arla?

arla-drinkers@@stacken.kth.se	general discussion
arla-announce@@stacken.kth.se	only announcements

Send mail to <LIST>-request@@stacken.kth.se to subscribe.

14. Is there a web page?

Yes, http://www.stacken.kth.se/project/arla/

15. Are there any copyrights on parts of arla?

lwp and rx are copyrighted by IBM.  We're grateful to Derrick J
Brashear <shadow@@dementia.org> and Jim Doyle <jrd@@bu.edu> for making
them available.

The rxkad implementation was written by Björn Grönvall <bg@@sics.se>
and is also part of the kth-krb distribution.

editline was written by Simmule Turner and Rich Salz.

The code for disconnected operation was written by Wuwei Shen.

The code for gluing these together were written by ourselves.

<arla-drinkers@@stacken.kth.se>

16. What has changed since *?

See NEWS and ChangeLog.

17. What does `arla' mean?

- Arla in Swedish means `early'.  Most of the code has been written
early in the morning.

- Arla is also the name of the largest producer of dairy products in
Sweden.  They produce, among others, a milk product called `fil'
(filmjölk = sour milk) which also happens to be the swedish word for
`file'.
@


1.5
log
@Merge
@
text
@@


1.4
log
@merge
@
text
@d1 2
a2 2
README for arla-0.35.7 ($KTH: arla-0-35-7 $)
$KTH: README,v 1.77.2.11 2002/02/25 02:35:01 lha Exp $
d11 2
a12 2
ftp://ftp.stacken.kth.se/pub/arla/arla-0.35.7.tar.gz
(aka /afs/stacken.kth.se/ftp/pub/arla/arla-0.35.7.tar.gz).
d25 4
a28 4
- FreeBSD 3.x, 4.,x, and 5.x
- OpenBSD 2.2-2.9
- NetBSD 1.2, 1.3, 1.4, and 1.5
- Linux 2.2.x, 2.3.x, 2.4.x
d30 1
a30 1
- Solaris 2.5, 2.6, 7, and 8
d34 1
a34 4
- Darwin 1.3 and 1.4, Mac OS X 10.0 and 10.1

Userland only:
- Ultrix 4.4
d40 1
a40 1
Some simple programs (amon, fs, klog, tokens, vos, udebug, and pts).
d47 1
d49 3
a51 3
- Used in production systems with OpenBSD, FreeBSD, NetBSD, Linux,
  Mac OS X, Compaq Tru64.
- Some administration programs (fs, vos, pts and bos)
d54 1
a54 1
- A graphical interface for managing ACLs
d75 1
a75 1
for libkafs in http://andrew2.andrew.cmu.edu/dist/krbafs.html. Then you
d77 3
a79 2
Thanks to Derrick J Brashear <shadow@@dementia.org> for making this
available for the american users.
d97 2
a98 2
`fs arladebug <debug-level>'.  To enable debugging in the xfs kernel
module, use `fs xfsdebug <debug-level>'.  The output will end up in
d115 1
a115 1
Both arlad and the xfs (the kernel module) have variables for
d119 1
a119 1
running `fs arladebug' and `fs xfsdebug'.
d126 1
a126 1
one in `xfs/SYSTEM' that's most similar to your system.  If you're
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d1 2
a2 2
README for arla-0.34 ($Name:  $)
$Id: README,v 1.76 2000/08/02 09:27:56 haba Exp $
d11 2
a12 2
ftp://ftp.stacken.kth.se/pub/arla/arla-0.34.tar.gz
(aka /afs/stacken.kth.se/ftp/pub/arla/arla-0.34.tar.gz).
d26 1
a26 1
- OpenBSD 2.2-2.7
d28 1
a28 1
- Linux 2.0.x, 2.1.x, 2.2.x, 2.3.x, 2.4.x
d33 2
a34 2
- Digital Unix 4.0, 5.0 (OSF/1)
- Darwin (MacOS DP3)
d47 1
a47 1
5. What's the status or arla?
d49 9
a57 6
This is a snapshot and pre-greek letters.

Most of the functionality is there.  You can read and write files and
directories, with or without authentication.  It's not as stable or
high-performing as we would like, yet.  It only does whole-file
caching, but that's probably good enough for now.
d71 1
a71 1
OpenBSD 2.3 and above already ships with kth-krb.  However, you'll
d73 2
a74 1
afslog.  (can be found in /usr/src/kerberosIV/{kafs,afslog}).
d138 3
a143 8

If you are using Digital's cc you should use the option -std1 (i.e.
setting CC to "cc -std1" when runing configure).

Solaris does not have an memcpy function in the kernel and gcc can
sometimes generate calls to this function.  If you get unresolved
symbol errors on memcpy, either compile with Sun's compiler or define
memcpy in terms of bcopy.
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@d1 2
a2 2
README for arla-0.23 ($Name:  $)
$Id: README,v 1.56 1999/03/27 00:23:05 rb Exp $
d11 2
a12 2
ftp://ftp.stacken.kth.se/pub/arla/arla-0.23.tar.gz
(aka /afs/stacken.kth.se/ftp/pub/arla/arla-0.23.tar.gz).
d25 4
a28 4
- FreeBSD 2.2, 3.0, and 4.0
- OpenBSD 2.2, 2.3 and 2.4
- NetBSD 1.2 and 1.3
- Linux 2.0.x, 2.1.x, and 2.2.x
d30 1
a30 1
- Solaris 2.5, 2.6 and 7
d33 2
a34 2
- Digital Unix 4.0 (OSF/1)
- Rhapsody DR2
d43 1
a43 4
Some simple programs (fs, vos and pts).

Programs for acquiring tokens (kauth, afslog) are not included but are
part of the kth-krb distribution.
d68 3
a70 3
OpenBSD 2.3 already ships with kth-krb.  However, you'll have to
add the line 'AFS=yes' to /etc/mk.conf and rebuild libkafs and afslog.
(can be found in /usr/src/kerberosIV/{kafs,afslog}).
d98 10
d112 1
a112 1
Both arlad and the xfs (the kernel module) has variables for
d124 2
a125 1
interested in doing the port, send mail to
d138 2
a139 2
If you are using Digital's cc you should probably use the
options -std1 (ie setting CC to "cc -std1" when runing configure).
d141 4
a144 3
Solaris does not have an `memcpy' in the kernel and gcc can somtimes
generate calls to it.  If you get unresolved symbol errors on memcpy,
either compile with Sun's compiler or define memcpy in terms of bcopy.
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
README for arla-0.9 ($Name:  $)
$Id: README,v 1.29 1998/07/30 20:29:48 rb Exp $
d6 1
a6 1
Arla is a free AFS cache-manager/client implementation.
d11 2
a12 2
ftp://ftp.stacken.kth.se/pub/arla/arla-0.9.tar.gz
(aka /afs/stacken.kth.se/ftp/pub/arla/arla-0.9.tar.gz).
d25 2
a26 2
- FreeBSD 2.2
- OpenBSD 2.2 and 2.3
d28 1
a28 1
- Linux 2.0.x and 2.1.x
d30 1
a30 1
- Solaris 2.5, 2.6 and 2.7 beta
d36 3
d48 2
d57 1
a57 1
caching, but that's probably good enough.
d94 9
d108 2
a109 2
They are controlled by the `--debug' option to arlad and by setting
the `xfsdeb' variable in xfs (see xfs/<system>/xfs_deb.c).
d122 3
a124 4
OpenBSD 2.3 (current) and OpenBSD 2.2 on some architectures have
serious problems with mmap.  If arlad doesn't seem to work om your
system run configure with `--disable-mmap'. This problem has only
been noticed on sun4m platforms (probably just Microsparc 2).
d133 4
d158 1
a158 1
the rxkad implementation was written by Björn Grönvall <bg@@sics.se>
d162 2
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 2
a2 2
README for arla-0.35.7 ($KTH: arla-0-35-7 $)
$KTH: README,v 1.77.2.11 2002/02/25 02:35:01 lha Exp $
d6 1
a6 1
Arla is a free AFS cache-manager implementation.
d11 2
a12 2
ftp://ftp.stacken.kth.se/pub/arla/arla-0.35.7.tar.gz
(aka /afs/stacken.kth.se/ftp/pub/arla/arla-0.35.7.tar.gz).
d25 4
a28 4
- FreeBSD 3.x, 4.,x, and 5.x
- OpenBSD 2.2-2.9
- NetBSD 1.2, 1.3, 1.4, and 1.5
- Linux 2.2.x, 2.3.x, 2.4.x
d30 1
a30 1
- Solaris 2.5, 2.6, 7, and 8
d33 2
a34 5
- Digital Unix 4.0, Compaq Tru64 5.0 (OSF/1)
- Darwin 1.3 and 1.4, Mac OS X 10.0 and 10.1

Userland only:
- Ultrix 4.4
d40 4
a43 1
Some simple programs (amon, fs, klog, tokens, vos, udebug, and pts).
d45 1
a45 1
An experimental AFS server called milko.
d47 1
a47 1
5. What's the status of arla?
d49 4
a52 9
- Working stable client (currently cacheing whole files)
- Authentication (using kth-krb4 or any other krb4 implantation)
- Used in production systems with OpenBSD, FreeBSD, NetBSD, Linux,
  Mac OS X, Compaq Tru64.
- Some administration programs (fs, vos, pts and bos)
- An experimental AFS server (milko)
- Graphical program, amon, for monitoring the state of the cache.
- A graphical interface for managing ACLs
- A configuration utility for Mac OS X
d66 3
a68 4
OpenBSD 2.3 and above already ships with kth-krb.  On OpenBSD 2.3 only, you'll
have to add the line 'AFS=yes' to /etc/mk.conf and rebuild libkafs and
afslog.  (can be found in /usr/src/kerberosIV/{kafs,afslog}) (versions
since 2.3 have AFS=yes on by default, except for m88k).
a88 19
If you find a bug, and do not have a clue what is wrong, please run
arlad with `arlad -n -z --debug=almost-all' and append the output the
the mail.  You can also turn on debug on an already running arlad with
`fs arladebug <debug-level>'.  To enable debugging in the xfs kernel
module, use `fs xfsdebug <debug-level>'.  The output will end up in
your syslog (like /var/log/messages or /var/adm/messages).

If arlad crashes, at least run gdb on the core dump and do a `bt'.
Print out variables around where it crashes if they seem useful.  If
you don't get a core dump, try starting arlad under gdb (the `-n'
option is useful here) and then do the same thing when it crashes.

If the kernel crashes, try to obtain a crash dump by whatever means
your OS has for this and then run the debugger on it.  The
documentation on your OS should have more information on how to
perform this task.

Without this info we are probably as lost as you are.

d91 1
a91 1
Both arlad and the xfs (the kernel module) have variables for
d94 2
a95 2
They are controlled by the `--debug' option to arlad and then by
running `fs arladebug' and `fs xfsdebug'.
d103 1
a103 2
interested in doing the port or even run Arla on an OS not mentioned
above, send mail to
d108 4
a111 6
OpenBSD on some architectures have serious problems with mmap.  If arlad
doesn't seem to work om your system run configure with `--disable-mmap'.
This problem has only been noticed on sun4m platforms.

The same problem exists on Mac OS X 10.1 (Darwin 1.4). Use the
--disable-mmap option.
d117 3
d141 1
a141 1
The rxkad implementation was written by Björn Grönvall <bg@@sics.se>
a144 2

The code for disconnected operation was written by Wuwei Shen.
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d1 2
a2 2
README for arla-0.35 ($arla:  $)
$arla: README,v 1.87 2003/07/15 16:22:58 lha Exp $
d11 2
a12 2
ftp://ftp.stacken.kth.se/pub/arla/arla-0.35.tar.gz
(aka /afs/stacken.kth.se/ftp/pub/arla/arla-0.35.tar.gz).
d25 4
a28 4
- FreeBSD 4.5 (and later), and 5.1 and later
- OpenBSD 3.1 - 3.2
- NetBSD 1.5 and 1.6
- Linux 2.2.x, 2.4.x
d30 1
a30 1
- Solaris 2.6, 7, and 8
d34 4
a37 1
- Mac OS X 10.0 and 10.2 (and Darwin)
d43 1
a43 1
Some simple programs (amon, bos, fs, pts, tokens, vos, and udebug).
a49 1
  Arlad caches ranges of files, from the first byte to the last requested.
d51 3
a53 3
- Used in production systems with OpenBSD, FreeBSD, NetBSD, Linux, and
  Mac OS X
- Some administration programs (bos, fs, vos, pts and bos)
d56 1
a56 1
- A graphical interface for managing ACLs (for MacOS X only)
d77 1
a77 1
for libkafs in http://web.mit.edu/openafs/krbafs/. Then you
d79 2
a80 3
Thanks to Derrick J Brashear <shadow@@dementia.org> and Alexandra
Ellwood <lxs@@mit.edu> for making this available for the MIT kerberos
users.
d98 2
a99 2
`fs arladebug <debug-level>'.  To enable debugging in the nnpfs kernel
module, use `fs nnpfsdebug <debug-level>'.  The output will end up in
d116 1
a116 1
Both arlad and the nnpfs (the kernel module) have variables for
d120 1
a120 1
running `fs arladebug' and `fs nnpfsdebug'.
d127 1
a127 1
one in `nnpfs/SYSTEM' that's most similar to your system.  If you're
@


