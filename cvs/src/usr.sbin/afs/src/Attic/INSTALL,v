head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2012.08.23.06.21.46;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.09.16.14;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.49.04;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.40.28;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.03;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.52.51;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.52.51;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.18;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.20.58;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@Id: INSTALL,v 1.93 2002/09/07 10:41:43 lha Exp $arla:  $)

* Building arla

Arla is configured with autoconf.  Start the configuration process by
typing:

- `./configure' in the source directory, or
- `SRCDIR/configure' in the directory where you want to build arla.
  (this is the recommended way but requires a make that understands VPATH)

If you want to install somewhere different from the default
`/usr/arla' give `--prefix=PATH' as an argument to configure.  Note
that if you change your prefix from the default your kerberos
libraries may have problems that your kerberos/afs libraries are
unable to find what cell you belong to.

Note that the kernel module is fairly specific to a particular version
of the OS kernel, so you should make sure that you have built Arla for
the same version that are you are running on.

There are also some arla-specific arguments to configure:

  --with-arlacachedir=dir use dir as cachedir instead of $prefix/cache
  --with-arlaconffile=file use file for configuration instead of $prefix/etc/arla.conf
  --with-krb4=dir         use kerberos 4 in dir
  --with-krb4-lib=dir     use krb4-lib in dir
  --with-krb4-include=dir use krb4-include in dir
  --with-krbafs=dir       use krbafs lib. For non kth-krb users, see README
			  for more information about libkrbafs)
  --with-krb5=dir	  use kerberos 4 compat from kerberos 5 in dir
  --with-sl=dir	          use the sl in dir
  --with-sl-lib=dir	  use the sl library in dir
  --with-sl-include=dir	  use the sl includes in dir
  --disable-mmap	  don't use mmap at all
  --disable-dynamic-afs	  don't use loaded AFS library with AIX
  --enable-smp		  compile for SMP (currently only on Linux and FreeBSD)
  --enable-knfs		  enable code to nfsmount AFS (*BSD only).
  --enable-kld		  build KLD modules (for FreeBSD[34]-current)
  --disable-nnpfs	  do not build NNPFS
  --without-x		  don't build X code
  --with-pthreads=dir	  use the pthreads library in dir
  --with-sys=dir          The base directory of your kernel source
			  (compile-tree in case of osf)

  --with-readline=dir	  link against readline in dir
  --with-readline-lib=dir  (readline's library is in dir)
  --with-readline-include=dir (readline's headers are in dir)

  --with-roken=dir        The with-roken options are for the users
  --with-roken-include=dir   that knowns what they do and want to use
  --with-roken-lib=dir       another roken the default. You will shot off
                             your feet using this option.
			     If you use a roken, you want to use it from
			     KTH-KRB1.2 or Heimdal 0.4e (or later)
  --with-bsd-make=prog    When using a bsd and cross compiling we need
                             to know your make, default /usr/bin/make
  --without-lwp-redzone   LWP creates a redzone page on top of all
			     thread stacks with mmap(), if this causes
			     you problem you can turn it of with this option.

By default configure will use gcc if it finds it.  If you want to use
a specific compiler or some special options you can specify that when
running configure.

If you change CFLAGS you might also have to set KERNEL_CFLAGS. The
reason for having different variables is that lots of times totally
different compilation environment are required (64-bit and 32-bit on
linux/sparcv9 and MacOS for example).

Type:

  env CC=my-compiler CFLAGS='magic-flags' ./configure

If there's no kernel support for your operating system, configure will
print a warning to that effect and only the user-level stuff will be
configured.

Solaris 2.7, 2.8 (or Solaris 7, 8)

On Solaris 2.7, 2.8 the kernel itself can be either 32 bit or 64 bit.
The nnpfs kernel module needs to be of the same type as the kernel.  You
can find out what type of kernel you have from `dmesg'.  It should say
something like:

If it says:

   SunOS Release 5.7 Version Generic [UNIX(R) System V Release 4.0]

that means it's a 32 bit kernel, but if it says:

   SunOS Release 5.7 Version Generic 64-bit [UNIX(R) System V Release 4.0]

then it's 64 bit.

To build a 32 bit arla you don't need to do anything special.  If you
however want a 64 bit one the magic incarnation of configure is:

env CC='cc -xarch=v9' AS='as -xarch=v9' configure sparc64-sun-solaris2.7

Once configured has completed, just run `make'.

One common problem is the file lwp/process.S.  This has to be
preprocessed with the appropriate defines and then assembled.  If the
magic in lwp/make-process.o.sh.in for some reason fails, try doing it
by hand. Then figure out what should be added and send us a patch to
lwp/make-process.o.sh.in.

Mac OS X/Darwin

The platforms we have tested are Mac OS X 10.2. You must install the
Developer Tools CD before you can compile Arla.

There is documentation to configure the native kerberos in Mac OS X provided by MIT here: <http://web.mit.edu/macdev/Development/MITKerberos/Common/Documentation/preferences.html>

If you choose to use the native Kerberos stuff you'll need krbafs, see
the README where to find it.

Linux

RedHat ships in the 7.0 release a gcc that can't compile the linux
kernel. To remedy this problem they also ship a kgcc that should be
used to compile the linux kernel and kernel modules. When running
configure on such a computer, please set KERNEL_CC to kgcc. Example:

  env KERNEL_CC=kgcc ./configure --argument-to-configure-if-any

If you are running a kernel that isn't the kernel symlinked/unpacked
to/in /usr/src/linux you will need to use --with-sys=dir
option (see <http://www.pathname.com/fhs/2.0/fhs-6.1.6.html>).
Without it will not work, either you will get error when doing
insmod or strange error when accessing files in /afs.

You need to have run make config (or make xconfig or make menuconfig)
and make dep before you run arla's configure. This since
header files (like linux/version.h) need to have right datestamp to 
please make. Another problem is that all symbol-rewrite #defines
doesn't exists.

{Net,Free,Open}BSD

You will need the kernel source installed in /usr/src/sys.

NetBSD

NetBSD 1.5 include kth-krb and heimdal and due to that arla and
kth-krb uses a common library (libroken) there might be some
collisions you should run configure like this:

configure \
        --with-roken=yes \
        --with-roken-include=/usr/include/krb5 \
        --with-roken-lib=/usr/lib

Tru64 Unix (aka Digital Unix (aka OSF/1)):

We recommend building with Digital's cc, since that's what the rest of
the kernel is built with.  We suggest using env CC='cc -std1' configure.

Solaris

Solaris does not have an memcpy function in the kernel and gcc can
sometimes generate calls to this function.  If you get unresolved
symbol errors on memcpy, either compile with Sun's compiler or define
memcpy in terms of bcopy.

* Installing arla

Run `make install'.  It will create and populate these directories:

/usr/arla/bin		all user binaries
/usr/arla/sbin		arla-cli and the startarla script
/usr/arla/libexec	the arlad
/usr/arla/cache		the cached files will be stored here
			(core-dumps from arlad as well)
/usr/arla/etc		configuration files:
			ThisCell, CellServDB, arla.conf
/usr/arla/lib		random libraries

If you're already part of an AFS cell, modify /usr/arla/etc/ThisCell
and make sure your cell is mentioned in /usr/arla/etc/CellServDB.  If
you don't have a cell you'll still be able to run as a client in the
cell `stacken.kth.se' and access all cells listed in CellServDB.

* Services

Everything works fine even if your /etc/services is not updated, but
you might not get netstat, tcpdump, and other programs might not print
the symbolic names.  To make all of this work, add the
contents of SRCDIR/conf/services to /etc/services.

  cat SRCDIR/conf/services >> /etc/services

* Starting arla

To start Arla just run `/usr/arla/sbin/startarla'.  (On Linux there is
also a rc.d-based script, see below).

Here are some detailed quirks for some operating systems and
instructions as to what to try when startarla does not give you
full and complete satisfaction.

Linux:

  Use the script /usr/arla/sbin/startarla to start Arla.  There's also
  a SysV-based init script called arla.init you can install into
  /etc/rc.d (or where your init files are located).

  If you are using Linux 2.2 and libc4, libc5 or glibc 2.0,
  (or programs that use these version of libc, such as Matlab)
  you may want to enable the getcwd syscall, which works much better
  than the old way of doing getcwd. In order to do this, follow
  these steps:

  1. Copy /usr/arla/lib/libgetcwd.so.X (where X is the arla version)
     to /lib.
  2. Run "/sbin/ldconfig".
  3. Run "LD_PRELOAD=/lib/libgetcwd.so.0 /bin/pwd". If this fails
     with "/bin/pwd: can't load library '/lib/libgetcwd.so.0'" or
     some other error message, report this error.
  4. If the previous step went well, add this line to /etc/ld.so.preload:
     /lib/libgetcwd.so.0

  DO NOT load the file from /usr/arla/lib, since /usr probably is not
  part of the root partition of your system. If you do this, your system
  will probably not be able to boot, even in single user, since in most
  Linux installations, init, sh, mount and other programs are dynamically
  linked.

  If you use glibc 2.1 or later, the above method is unnecessary and
  the line /lib/libgetcwd.so.0 should be removed from /etc/ld.so.preload
  if present.

SunOS4:

  modload /usr/arla/bin/libnnpfs.o
  modstat
  mknod /dev/nnpfs0 c <C-major from modstat> 0
  mkdir /afs
  /usr/arla/bin/mount_nnpfs /afs /dev/nnpfs0
  /usr/arla/libexec/arlad

{Net|Open}BSD:

  You can not load kernel modules (the modload step) when your
  securelevel is above zero. There are two ways to make sure that you
  can load kernel modules:

  * You can compile a new kernel with "option INSECURE". This will make
    the securelevel be zero in multiuser. Then you can load the modules
    with the above commands. Some people might consider this a security
    risk.

  * You can load the modules in /etc/lkm.conf (for NetBSD) or
    /etc/rc.securelevel (for OpenBSD).

FreeBSD:
  
  Do like in {Net|Open} except that after the first time (when /dev/nnpfs0
  exists) you can skip the modload since the module with automatically
  be loaded by mount_nnpfs assuming you have copied nnpfs_mod.o to /modules with
  something like the following commands:

    mkdir /modules
    cp /usr/arla/bin/nnpfs.ko /modules

  And mount_nnpfs will load the filesystem into the kernel.

  As with other BSDs, /usr/arla/bin/startarla should do everything for you.

Solaris:

  Just use /usr/arla/sbin/startarla.  If that does not work, see the
  more detailed explanation here.

  Add a line to /etc/name_to_major with (138 should be any unused number)

    nnpfs 138

  and another one to /etc/name_to_sysnum (105 is the preferred system
  call number by Solaris < 7 and 73 for Solaris 7).  If that's already
  used by Transarc AFS on your machine pick some other number.  You can
  only pick system calls that are marked as loadable, namely these
  system calls on Solaris 7:
  40, 42, 45, 49, 51 - 53, 64-78, 82, 83, 101, 102, 110, 111, 127, 140,
  150, 151, 176 - 184, 226 - 229

    nnpfs 105

  (or)

    nnpfs 73

  You might have to reboot for these changes to take effect.  Then, type:

    modload nnpfs

  You should probably add a file in /usr/kernel/drv/nnpfs.conf with:

    name="nnpfs" parent="pseudo" instance=0;

  and then run:

    drvconfig -i nnpfs

  Create a /dev link and a directory:

    ln -s "/devices/pseudo/nnpfs@@0:" /dev/nnpfs0
    mkdir /afs

  Now you can try mounting the file system and start the daemon:

    /usr/arla/bin/mount_nnpfs /dev/nnpfs0 /afs
    /usr/arla/libexec/arlad

  Note that if you are using a syscall other than 105, you have to use a
  new kth-krb (with afssys.c 1.59 or newer) and set AFS_SYSCALL=nnpfs
  before starting arlad.

  If you want to, you can copy the nnpfs/solaris/nnpfs module to /kernel/fs
  and nnpfs/solaris/bin/mount_nnpfs to /lib/fs/nnpfs/mount which enables you to
  automatically load the nnpfs module when mounting the nnpfs file system.

AIX:

  Create the device node:

    mknod /dev/nnpfs0 c 100 0

  And add a line like the following to /etc/vfs:

    arla    8       none    none

  Now you can try mounting the file system and start the daemon:

    /usr/arla/bin/nnpfs_load /usr/arla/bin/nnpfs
    /usr/arla/bin/mount_nnpfs /dev/nnpfs0 /afs
    /usr/arla/libexec/arlad

Tru64 Unix (aka Digital Unix (aka OSF/1)):

  Copy the nnpfs.mod to some of /subsys, /var/subsys, /sys/BINARY,
  or /subsystems. Depending on what your kloadsrv thinks is the
  right thing<tm>.

  Load (configure) the module with sysconfig -c nnpfs

  Query the module to see if it loaded ok and get the
  character device and syscall number from it with:
  sysconfig -q nnpfs

  Create the char-device "mknod /dev/nnpfs0 c <MAJOR> 0"
  where <MAJOR> is the number obtained above.

  Create the afs directory: mkdir /afs

  Mount the device and start the daemon: 
     /usr/arla/bin/mount_nnpfs /dev/nnpfs0 /afs
     /usr/arla/libexec/arlad

  It could look something like this:

  datan:~# sysconfig -c nnpfs
  datan:~# sysconfig -q nnpfs
  syscall = 34
  major = 68
  debug = 255
  datan:~# mknod /dev/nnpfs0 c 68 0
  datan:~# mkdir /afs
  datan:~# /usr/arla/bin/mount_nnpfs /dev/nnpfs0 /afs
  datan:~# /usr/arla/libexec/arlad 
  datan:~# ls /afs | head
  .stacken.kth.se
  afs.brain.de
  afs.hursley.ibm.com
  afs1.scri.fsu.edu

* command-line mode

If Arla does not work completely, if you do not have root permission
on your machine or want to test for some other reason, there is a
user-space command-line based program called arla-cli, that you can
use to to access AFS.  When starting, it should print some messages
and then give you the prompt `arla>'.  There are very minimal commands
for navigating the AFS space (ls, cd and cat).  Type `help' to get a
list of all the commands.

Run `arla-cli --help' for a list of the options supported.

* Tests

There are a number of tests in the `tests' directory.  Use a command
similar to the following to run them:

env WORKDIR=workdir ./run-tests

where `workdir' is a temporary directory in AFS space where you have
read and write permission.  run-tests takes lots of options, try
`-help'.  You should probably start by running `-fast -all' and if you
have a lot of patience and time try `-all'.  The `-fast -all' tests
test most of the common operations and is a good general test run.
The test that aren't marked `fast' do a rather unkind stress test of
things and takes a few hours to run.

* Firewalls

If you have to use Arla thru a firewall, it is useful to review how
Arla communicates.  Arla uses UDP in the following way:

arlad			Server
7001(*)	 <-->		7000,7003

Tools(**)		Server
whatever(***) <-->	7002,7003,7005

(*) arla older then 0.36 used 4711

(**) vos/pts/bos

(***) dynamically assigned port numbers, depends on your OS

If your server is on the other side of a firewall and the
configuration allows connections to be opened only one way, your
client will probably miss file updates from other clients, even if
your file system looks good after startup.
@


1.5
log
@Merge
@
text
@@


1.4
log
@merge
@
text
@d1 1
a1 1
$KTH: arla-0-35-7 $)
d29 2
a30 3
  --with-krbafs=dir       use cmu's krbafs lib (If you not are using kth-krb.
			  This is not needed when using kth-krb since
			  libkafs is included there.)
d32 3
a35 2
  --enable-mmaptime       use mmap:ed time from /dev/kmem
                          (known to work on FreeBSD)
d40 1
a40 1
  --disable-xfs		  do not build XFS
d54 7
d82 1
a82 1
The xfs kernel module needs to be of the same type as the kernel.  You
d111 7
a117 5
The platforms we have tested are Mac OS X 10.0.4 (Darwin 1.3.7) and
Mac OS X 10.1 (Darwin 1.4). You must install the Developer Tools CD
before you can compile Arla. On Mac OS X 10.1, you must currently use
the option --disable-mmap to the configure script, since mmap is
broken in that version.
d140 4
d236 1
a236 1
  modload /usr/arla/bin/libxfs.o
d238 1
a238 1
  mknod /dev/xfs0 c <C-major from modstat> 0
d240 1
a240 1
  /usr/arla/bin/mount_xfs /afs /dev/xfs0
a244 4
  NetBSD 1.4.2 have a problem with syscall(2) and shared libs, it will
  simply not work. The configure script tries to detect that its 1.4.2
  and build everything static. Gross, but at least working.

d259 1
a259 1
  Do like in {Net|Open} except that after the first time (when /dev/xfs0
d261 1
a261 1
  be loaded by mount_xfs assuming you have copied xfs_mod.o to /modules with
d265 1
a265 1
    cp /usr/arla/bin/xfs.ko /modules
d267 1
a267 1
  And mount_xfs will load the filesystem into the kernel.
d278 1
a278 1
    xfs 138
d288 1
a288 1
    xfs 105
d292 1
a292 1
    xfs 73
d296 1
a296 1
    modload xfs
d298 1
a298 1
  You should probably add a file in /usr/kernel/drv/xfs.conf with:
d300 1
a300 1
    name="xfs" parent="pseudo" instance=0;
d304 1
a304 1
    drvconfig -i xfs
d308 1
a308 1
    ln -s "/devices/pseudo/xfs@@0:" /dev/xfs0
d313 1
a313 1
    /usr/arla/bin/mount_xfs /dev/xfs0 /afs
d317 1
a317 1
  new kth-krb (with afssys.c 1.59 or newer) and set AFS_SYSCALL=xfs
d320 3
a322 3
  If you want to, you can copy the xfs/solaris/xfs module to /kernel/fs
  and xfs/solaris/bin/mount_xfs to /lib/fs/xfs/mount which enables you to
  automatically load the xfs module when mounting the xfs file system.
d328 1
a328 1
    mknod /dev/xfs0 c 100 0
d336 2
a337 2
    /usr/arla/bin/xfs_load /usr/arla/bin/xfs
    /usr/arla/bin/mount_xfs /dev/xfs0 /afs
d342 1
a342 1
  Copy the xfs.mod to some of /subsys, /var/subsys, /sys/BINARY,
d346 1
a346 1
  Load (configure) the module with sysconfig -c xfs
d350 1
a350 1
  sysconfig -q xfs
d352 1
a352 1
  Create the char-device "mknod /dev/xfs0 c <MAJOR> 0"
d358 1
a358 1
     /usr/arla/bin/mount_xfs /dev/xfs0 /afs
d363 2
a364 2
  datan:~# sysconfig -c xfs
  datan:~# sysconfig -q xfs
d368 1
a368 1
  datan:~# mknod /dev/xfs0 c 68 0
d370 1
a370 1
  datan:~# /usr/arla/bin/mount_xfs /dev/xfs0 /afs
d411 4
a414 1
4711	 <-->		7000,7003
d416 1
a416 2
Tools(*)		Server
whatever(**) <-->	7002,7003,7005
d418 1
a418 1
(*) vos/pts/bos
d420 1
a420 1
(**) dynamically assigned port numbers, depends on your OS
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d1 1
a1 1
$Id: INSTALL,v 1.76 2000/08/05 00:41:26 mattiasa Exp $ ($Name:  $)
d18 4
d35 1
a35 1
                          (known to work in FreeBSD)
d40 1
d46 9
d64 1
a64 5
Running in a sh-style shell, type:

  CC=my-compiler CFLAGS='magic-flags' ./configure

If you are stuck with a broken shell, try using the env program:
d72 1
a72 1
Solaris 2.7 (or Solaris 7)
d74 3
a76 3
On Solaris 2.7 the kernel itself can be either 32 bit or 64 bit.  The
xfs kernel module needs to be of the same type as the kernel.  You can
find out what type of kernel you have from `dmesg'.  It should say
d92 1
a92 1
CC='cc -xarch=v9' AS='as -xarch=v9' configure sparc64-sun-solaris2.7
d104 49
a152 3
The only platform that we have used is Mac OS X DP3 with the Kernel
development kit. Without the Kernel development kit, you won't be able
to compile the kernel module. It may also work under Darwin 1.0.
d158 3
a160 1
/usr/arla/bin		all binaries used
d175 2
a176 1
programs will print warning messages.  To get rid of these, add the
d183 6
a188 10
First try running arlad in test mode with `-t'.  If all goes well, it
should print some messages and then give you the prompt `arla>'.
There are very minimal commands for navigating the AFS space (ls, cd
and cat).  Type `help' to get a list of all the commands.

Run `arlad --help' for a list of the options supported.

If you have a kernel module you can try to load it and mount the
file system.  That's done somewhat differently depending on the
operating system:
d192 3
a194 15
  If you are running a kernel that isn't the kernel symlinked/unpacked
  to/in /usr/src/linux you will need to use --with-sys=dir
  option (see <http://www.pathname.com/fhs/2.0/fhs-6.1.6.html>).
  Without it will not work, either you will get error when doing
  insmod or strange error when accessing files in /afs.

  The linux major device number has changed in arla 0.5. Please
  remove your old device and create a new one with the command
  below if you have used arla before 0.5.

  mknod /dev/xfs0 c 103 0
  insmod /usr/arla/bin/xfs.o
  /usr/arla/bin/arlad
  mkdir /afs
  mount -t xfs arla /afs
d196 2
a197 6
  These commands are executed by the script /usr/arla/bin/startarla so
  you might want to use that instead.  There's also a SysV-based init
  script called arla.init you can install into /etc/rc.d (or where
  your init files are located).

  If you are using Linux 2.1 or 2.2 and libc4, libc5 or glibc 2.0,
d228 1
a228 1
  /usr/arla/bin/arlad
d236 8
a243 6
  modload -e xfs_mod -o /var/tmp/symbols -p /usr/arla/bin/xfs_makedev /usr/arla/bin/xfs_mod.o
  mkdir /afs
  /usr/arla/bin/mount_xfs /dev/xfs0 /afs
  /usr/arla/bin/arlad

  (or should you be able to use /usr/arla/bin/startarla)
d245 2
a246 11
You can not load kernel modules (the modload step) when your
securelevel is above zero. There are two ways to make sure that you
can load kernel modules:

* You can compile a new kernel with "option INSECURE". This will make
  the securelevel be zero in multiuser. Then you can load the modules
  with the above commands. Some people might consider this a security
  risk.

* You can load the modules in /etc/lkm.conf (for NetBSD) or
  /etc/rc.securelevel (for OpenBSD).
d250 4
a253 4
Do like in {Net|Open} except that after the first time (when /dev/xfs0
exists) you can skip the modload since the module with automatically
be loaded by mount_xfs assuming you have copied xfs_mod.o to /modules with
something like the following commands:
d255 2
a256 2
  mkdir /modules
  cp /usr/arla/bin/xfs.ko /modules
d258 1
a258 1
And mount_xfs will load the filesystem into the kernel.
d260 1
a260 1
As with other BSDs, /usr/arla/bin/startarla should do everything for you.
d262 1
a262 1
Mac OS X/Darwin:
d264 2
a265 4
  kmodload -o /var/tmp/symbols /usr/arla/bin/xfs_mod.o
  mkdir /afs
  /usr/arla/bin/mount_xfs /dev/xfs0 /afs
  /usr/arla/bin/arlad
d267 1
a267 1
or run /usr/arla/bin/startarla
d269 1
a269 1
Solaris:
d271 7
a277 1
add a line to /etc/name_to_major with (138 should be any unused number)
d279 1
a279 1
  xfs 138
d281 1
a281 7
and another one to /etc/name_to_sysnum (105 is the preferred system
call number by Solaris < 7 and 73 for Solaris 7).  If that's already
used by Transarc AFS on your machine pick some other number.  You can
only pick system calls that are marked as loadable, namely these
system calls on Solaris 7:
40, 42, 45, 49, 51 - 53, 64-78, 82, 83, 101, 102, 110, 111, 127, 140,
150, 151, 176 - 184, 226 - 229
d283 1
a283 1
  xfs 105
d285 1
a285 1
(or)
d287 1
a287 1
  xfs 73
d289 1
a289 1
You might have to reboot for these changes to take effect.  Then, type:
d291 1
a291 1
  modload xfs
d293 1
a293 1
You should probably add a file in /usr/kernel/drv/xfs.conf with:
d295 1
a295 1
  name="xfs" parent="pseudo" instance=0;
d297 1
a297 1
and then run:
d299 2
a300 1
  drvconfig -i xfs
d302 1
a302 1
Create a /dev link and a directory:
d304 2
a305 2
  ln -s "/devices/pseudo/xfs@@0:" /dev/xfs0
  mkdir /afs
d307 3
a309 1
Now you can try mounting the file system and start the daemon:
d311 3
a313 10
  /usr/arla/bin/mount_xfs /dev/xfs0 /afs
  /usr/arla/bin/arlad

Note that if you are using a syscall other than 105, you have to use a
new kth-krb (with afssys.c 1.59 or newer) and set AFS_SYSCALL=xfs
before starting arlad.

If you want to, you can copy the xfs/solaris/xfs module to /kernel/fs
and xfs/solaris/bin/mount_xfs to /lib/fs/xfs/mount which enables you to
automatically load the xfs module when mounting the xfs file system.
d317 1
a317 1
Create the device node:
d319 1
a319 1
  mknod /dev/xfs0 c 100 0
d321 1
a321 1
And add a line like the following to /etc/vfs:
d323 1
a323 1
  arla    8       none    none
d325 1
a325 1
Now you can try mounting the file system and start the daemon:
d327 3
a329 3
  /usr/arla/bin/xfs_load /usr/arla/bin/xfs
  /usr/arla/bin/mount_xfs /dev/xfs0 /afs
  /usr/arla/bin/arlad
d333 47
a379 35
Copy the xfs.mod to some of /subsys, /var/subsys, /sys/BINARY,
or /subsystems. Depending on what your kloadsrv thinks is the
right thing<tm>.

Load (configure) the module with sysconfig -c xfs

Query the module to see if it loaded ok and get the
character device and syscall number from it with:
sysconfig -q xfs

Create the char-device "mknod /dev/xfs0 c <MAJOR> 0"
where <MAJOR> is the number obtained above.

Create the afs directory: mkdir /afs

Mount the device and start the daemon: 
   /usr/arla/bin/mount_xfs /dev/xfs0 /afs
   /usr/arla/bin/arlad

It could look something like this:

datan:~# sysconfig -c xfs
datan:~# sysconfig -q xfs
syscall = 34
major = 68
debug = 255
datan:~# mknod /dev/xfs0 c 68 0
datan:~# mkdir /afs
datan:~# /usr/arla/bin/mount_xfs /dev/xfs0 /afs
datan:~# /usr/arla/bin/arlad 
datan:~# ls /afs | head
.stacken.kth.se
afs.brain.de
afs.hursley.ibm.com
afs1.scri.fsu.edu
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@d1 1
a1 1
$Id: INSTALL,v 1.57 1999/03/27 00:20:57 rb Exp $ ($Name:  $)
d3 1
a3 1
Building arla
d13 6
a18 2
`/usr/arla' give `--prefix=PATH' as an argument to configure.  There
are also some arla-specific arguments to configure:
d33 1
a33 1
  --enable-smp		  compile for SMP (currently only on Linux)
d35 1
a35 1
  --enable-kld		  build KLD modules (for FreeBSD3-current)
d38 2
d43 8
a50 1
running configure.  Running in a sh-style shell, type:
d62 22
d92 7
a98 1
Installing arla
d114 1
a114 1
Services
d122 1
a122 1
Starting arla
d137 6
d153 5
d193 4
d202 14
d220 1
a220 1
be loaded by mount_xfs assuming you have copied xfs_mod.o to /lkm with
d223 3
a225 3
  mkdir /lkm
  cp /usr/arla/bin/xfs_mod.o /lkm/xfs_mod.o
  
d228 11
d246 6
a251 2
call number, if that's already used by Transarc AFS on your machine or
you are using Solaris 7 (which uses 105 itself), pick some other number)
d255 4
d342 35
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$Id: INSTALL,v 1.41 1998/07/29 20:32:23 assar Exp $ ($Name:  $)
d28 6
d106 13
a118 10
  If you are using Linux 2.1, you may want to copy /usr/arla/lib/getcwd.so
  to /lib and add this line to your /etc/ld.so.preload:

  /lib/getcwd.so

  This enables the getcwd syscall, which works much better than the old
  way of doing getcwd. Be careful though, and execute /bin/pwd as a test
  before you exit your editor. If /bin/pwd fails with a message like
  "/bin/pwd: can't load library '/lib/getcwd.so'", remove the line from
  /etc/ld.so.preload, and report the problem.
d126 4
d146 1
a146 1
FreeBSD
d148 4
a151 1
Do like in {Net|Open} except for doing the modload you can just do:
d156 1
a156 1
And mount_xfs vill load the filesystem into the kernel.
d160 1
a160 1
add a line to /etc/name_to_major with (134 should be any unused number)
d162 1
a162 1
  xfs 134
d165 2
a166 2
call number, if that's already used by Transarc AFS on your machine,
pick some other number)
d182 1
a182 1
Create a device with the name_to_major number and a directory:
d184 1
a184 1
  mknod /dev/xfs0 c 134 0
d192 3
d212 1
d216 1
a216 1
Digital Unix (aka OSF/1)
d218 3
a220 1
Copy the xfs.mod to /subsystems.
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
a1 1
$KTH: arla-0-35-7 $)
d3 1
a3 1
* Building arla
d13 2
a14 10
`/usr/arla' give `--prefix=PATH' as an argument to configure.  Note
that if you change your prefix from the default your kerberos
libraries may have problems that your kerberos/afs libraries are
unable to find what cell you belong to.

Note that the kernel module is fairly specific to a particular version
of the OS kernel, so you should make sure that you have built Arla for
the same version that are you are running on.

There are also some arla-specific arguments to configure:
d27 1
a27 19
                          (known to work on FreeBSD)
  --disable-dynamic-afs	  don't use loaded AFS library with AIX
  --enable-smp		  compile for SMP (currently only on Linux and FreeBSD)
  --enable-knfs		  enable code to nfsmount AFS (*BSD only).
  --enable-kld		  build KLD modules (for FreeBSD[34]-current)
  --disable-xfs		  do not build XFS
  --without-x		  don't build X code
  --with-pthreads=dir	  use the pthreads library in dir
  --with-sys=dir          The base directory of your kernel source
			  (compile-tree in case of osf)

  --with-readline=dir	  link against readline in dir
  --with-readline-lib=dir  (readline's library is in dir)
  --with-readline-include=dir (readline's headers are in dir)

  --with-roken=dir        The with-roken options are for the users
  --with-roken-include=dir   that knowns what they do and want to use
  --with-roken-lib=dir       another roken the default. You will shot off
                             your feet using this option.
d31 1
a31 1
running configure.
d33 1
a33 4
If you change CFLAGS you might also have to set KERNEL_CFLAGS. The
reason for having different variables is that lots of times totally
different compilation environment are required (64-bit and 32-bit on
linux/sparcv9 and MacOS for example).
d35 1
a35 1
Type:
a42 22
Solaris 2.7, 2.8 (or Solaris 7, 8)

On Solaris 2.7, 2.8 the kernel itself can be either 32 bit or 64 bit.
The xfs kernel module needs to be of the same type as the kernel.  You
can find out what type of kernel you have from `dmesg'.  It should say
something like:

If it says:

   SunOS Release 5.7 Version Generic [UNIX(R) System V Release 4.0]

that means it's a 32 bit kernel, but if it says:

   SunOS Release 5.7 Version Generic 64-bit [UNIX(R) System V Release 4.0]

then it's 64 bit.

To build a 32 bit arla you don't need to do anything special.  If you
however want a 64 bit one the magic incarnation of configure is:

env CC='cc -xarch=v9' AS='as -xarch=v9' configure sparc64-sun-solaris2.7

d51 1
a51 53
Mac OS X/Darwin

The platforms we have tested are Mac OS X 10.0.4 (Darwin 1.3.7) and
Mac OS X 10.1 (Darwin 1.4). You must install the Developer Tools CD
before you can compile Arla. On Mac OS X 10.1, you must currently use
the option --disable-mmap to the configure script, since mmap is
broken in that version.

Linux

RedHat ships in the 7.0 release a gcc that can't compile the linux
kernel. To remedy this problem they also ship a kgcc that should be
used to compile the linux kernel and kernel modules. When running
configure on such a computer, please set KERNEL_CC to kgcc. Example:

  env KERNEL_CC=kgcc ./configure --argument-to-configure-if-any

If you are running a kernel that isn't the kernel symlinked/unpacked
to/in /usr/src/linux you will need to use --with-sys=dir
option (see <http://www.pathname.com/fhs/2.0/fhs-6.1.6.html>).
Without it will not work, either you will get error when doing
insmod or strange error when accessing files in /afs.

You need to have run make config (or make xconfig or make menuconfig)
and make dep before you run arla's configure. This since
header files (like linux/version.h) need to have right datestamp to 
please make. Another problem is that all symbol-rewrite #defines
doesn't exists.

NetBSD

NetBSD 1.5 include kth-krb and heimdal and due to that arla and
kth-krb uses a common library (libroken) there might be some
collisions you should run configure like this:

configure \
        --with-roken=yes \
        --with-roken-include=/usr/include/krb5 \
        --with-roken-lib=/usr/lib

Tru64 Unix (aka Digital Unix (aka OSF/1)):

We recommend building with Digital's cc, since that's what the rest of
the kernel is built with.  We suggest using env CC='cc -std1' configure.

Solaris

Solaris does not have an memcpy function in the kernel and gcc can
sometimes generate calls to this function.  If you get unresolved
symbol errors on memcpy, either compile with Sun's compiler or define
memcpy in terms of bcopy.

* Installing arla
d55 1
a55 3
/usr/arla/bin		all user binaries
/usr/arla/sbin		arla-cli and the startarla script
/usr/arla/libexec	the arlad
d67 1
a67 1
* Services
d70 1
a70 2
you might not get netstat, tcpdump, and other programs might not print
the symbolic names.  To make all of this work, add the
d75 1
a75 1
* Starting arla
d77 10
a86 2
To start Arla just run `/usr/arla/sbin/startarla'.  (On Linux there is
also a rc.d-based script, see below).
d88 11
a98 3
Here are some detailed quirks for some operating systems and
instructions as to what to try when startarla does not give you
full and complete satisfaction.
d100 4
a103 1
Linux:
d105 5
a109 18
  Use the script /usr/arla/sbin/startarla to start Arla.  There's also
  a SysV-based init script called arla.init you can install into
  /etc/rc.d (or where your init files are located).

  If you are using Linux 2.2 and libc4, libc5 or glibc 2.0,
  (or programs that use these version of libc, such as Matlab)
  you may want to enable the getcwd syscall, which works much better
  than the old way of doing getcwd. In order to do this, follow
  these steps:

  1. Copy /usr/arla/lib/libgetcwd.so.X (where X is the arla version)
     to /lib.
  2. Run "/sbin/ldconfig".
  3. Run "LD_PRELOAD=/lib/libgetcwd.so.0 /bin/pwd". If this fails
     with "/bin/pwd: can't load library '/lib/libgetcwd.so.0'" or
     some other error message, report this error.
  4. If the previous step went well, add this line to /etc/ld.so.preload:
     /lib/libgetcwd.so.0
a116 4
  If you use glibc 2.1 or later, the above method is unnecessary and
  the line /lib/libgetcwd.so.0 should be removed from /etc/ld.so.preload
  if present.

d124 1
a124 1
  /usr/arla/libexec/arlad
d128 4
a131 12
  NetBSD 1.4.2 have a problem with syscall(2) and shared libs, it will
  simply not work. The configure script tries to detect that its 1.4.2
  and build everything static. Gross, but at least working.

  You can not load kernel modules (the modload step) when your
  securelevel is above zero. There are two ways to make sure that you
  can load kernel modules:

  * You can compile a new kernel with "option INSECURE". This will make
    the securelevel be zero in multiuser. Then you can load the modules
    with the above commands. Some people might consider this a security
    risk.
d133 3
a135 2
  * You can load the modules in /etc/lkm.conf (for NetBSD) or
    /etc/rc.securelevel (for OpenBSD).
d137 2
a138 1
FreeBSD:
d140 1
a140 11
  Do like in {Net|Open} except that after the first time (when /dev/xfs0
  exists) you can skip the modload since the module with automatically
  be loaded by mount_xfs assuming you have copied xfs_mod.o to /modules with
  something like the following commands:

    mkdir /modules
    cp /usr/arla/bin/xfs.ko /modules

  And mount_xfs will load the filesystem into the kernel.

  As with other BSDs, /usr/arla/bin/startarla should do everything for you.
d144 1
a144 2
  Just use /usr/arla/sbin/startarla.  If that does not work, see the
  more detailed explanation here.
d146 1
a146 1
  Add a line to /etc/name_to_major with (138 should be any unused number)
d148 3
a150 1
    xfs 138
d152 1
a152 7
  and another one to /etc/name_to_sysnum (105 is the preferred system
  call number by Solaris < 7 and 73 for Solaris 7).  If that's already
  used by Transarc AFS on your machine pick some other number.  You can
  only pick system calls that are marked as loadable, namely these
  system calls on Solaris 7:
  40, 42, 45, 49, 51 - 53, 64-78, 82, 83, 101, 102, 110, 111, 127, 140,
  150, 151, 176 - 184, 226 - 229
d154 1
a154 1
    xfs 105
d156 1
a156 1
  (or)
d158 1
a158 1
    xfs 73
d160 1
a160 1
  You might have to reboot for these changes to take effect.  Then, type:
d162 1
a162 1
    modload xfs
d164 1
a164 1
  You should probably add a file in /usr/kernel/drv/xfs.conf with:
d166 1
a166 1
    name="xfs" parent="pseudo" instance=0;
d168 2
a169 3
  and then run:

    drvconfig -i xfs
d171 1
a171 1
  Create a /dev link and a directory:
d173 2
a174 2
    ln -s "/devices/pseudo/xfs@@0:" /dev/xfs0
    mkdir /afs
a175 1
  Now you can try mounting the file system and start the daemon:
d177 3
a179 10
    /usr/arla/bin/mount_xfs /dev/xfs0 /afs
    /usr/arla/libexec/arlad

  Note that if you are using a syscall other than 105, you have to use a
  new kth-krb (with afssys.c 1.59 or newer) and set AFS_SYSCALL=xfs
  before starting arlad.

  If you want to, you can copy the xfs/solaris/xfs module to /kernel/fs
  and xfs/solaris/bin/mount_xfs to /lib/fs/xfs/mount which enables you to
  automatically load the xfs module when mounting the xfs file system.
d183 1
a183 51
  Create the device node:

    mknod /dev/xfs0 c 100 0

  And add a line like the following to /etc/vfs:

    arla    8       none    none

  Now you can try mounting the file system and start the daemon:

    /usr/arla/bin/xfs_load /usr/arla/bin/xfs
    /usr/arla/bin/mount_xfs /dev/xfs0 /afs
    /usr/arla/libexec/arlad

Tru64 Unix (aka Digital Unix (aka OSF/1)):

  Copy the xfs.mod to some of /subsys, /var/subsys, /sys/BINARY,
  or /subsystems. Depending on what your kloadsrv thinks is the
  right thing<tm>.

  Load (configure) the module with sysconfig -c xfs

  Query the module to see if it loaded ok and get the
  character device and syscall number from it with:
  sysconfig -q xfs

  Create the char-device "mknod /dev/xfs0 c <MAJOR> 0"
  where <MAJOR> is the number obtained above.

  Create the afs directory: mkdir /afs

  Mount the device and start the daemon: 
     /usr/arla/bin/mount_xfs /dev/xfs0 /afs
     /usr/arla/libexec/arlad

  It could look something like this:

  datan:~# sysconfig -c xfs
  datan:~# sysconfig -q xfs
  syscall = 34
  major = 68
  debug = 255
  datan:~# mknod /dev/xfs0 c 68 0
  datan:~# mkdir /afs
  datan:~# /usr/arla/bin/mount_xfs /dev/xfs0 /afs
  datan:~# /usr/arla/libexec/arlad 
  datan:~# ls /afs | head
  .stacken.kth.se
  afs.brain.de
  afs.hursley.ibm.com
  afs1.scri.fsu.edu
d185 1
a185 1
* command-line mode
d187 1
a187 7
If Arla does not work completely, if you do not have root permission
on your machine or want to test for some other reason, there is a
user-space command-line based program called arla-cli, that you can
use to to access AFS.  When starting, it should print some messages
and then give you the prompt `arla>'.  There are very minimal commands
for navigating the AFS space (ls, cd and cat).  Type `help' to get a
list of all the commands.
d189 1
a189 1
Run `arla-cli --help' for a list of the options supported.
d191 1
a191 1
* Tests
d193 2
a194 2
There are a number of tests in the `tests' directory.  Use a command
similar to the following to run them:
d196 1
a196 1
env WORKDIR=workdir ./run-tests
d198 1
a198 7
where `workdir' is a temporary directory in AFS space where you have
read and write permission.  run-tests takes lots of options, try
`-help'.  You should probably start by running `-fast -all' and if you
have a lot of patience and time try `-all'.  The `-fast -all' tests
test most of the common operations and is a good general test run.
The test that aren't marked `fast' do a rather unkind stress test of
things and takes a few hours to run.
d200 1
a200 1
* Firewalls
d202 3
a204 2
If you have to use Arla thru a firewall, it is useful to review how
Arla communicates.  Arla uses UDP in the following way:
d206 2
a207 2
arlad			Server
4711	 <-->		7000,7003
d209 1
a209 2
Tools(*)		Server
whatever(**) <-->	7002,7003,7005
d211 3
a213 1
(*) vos/pts/bos
d215 1
a215 1
(**) dynamically assigned port numbers, depends on your OS
d217 14
a230 4
If your server is on the other side of a firewall and the
configuration allows connections to be opened only one way, your
client will probably miss file updates from other clients, even if
your file system looks good after startup.
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d1 1
a1 1
Id: INSTALL,v 1.93 2002/09/07 10:41:43 lha Exp $arla:  $)
d29 3
a31 2
  --with-krbafs=dir       use krbafs lib. For non kth-krb users, see README
			  for more information about libkrbafs)
a32 3
  --with-sl=dir	          use the sl in dir
  --with-sl-lib=dir	  use the sl library in dir
  --with-sl-include=dir	  use the sl includes in dir
d34 2
d40 1
a40 1
  --disable-nnpfs	  do not build NNPFS
a53 7
			     If you use a roken, you want to use it from
			     KTH-KRB1.2 or Heimdal 0.4e (or later)
  --with-bsd-make=prog    When using a bsd and cross compiling we need
                             to know your make, default /usr/bin/make
  --without-lwp-redzone   LWP creates a redzone page on top of all
			     thread stacks with mmap(), if this causes
			     you problem you can turn it of with this option.
d75 1
a75 1
The nnpfs kernel module needs to be of the same type as the kernel.  You
d104 5
a108 7
The platforms we have tested are Mac OS X 10.2. You must install the
Developer Tools CD before you can compile Arla.

There is documentation to configure the native kerberos in Mac OS X provided by MIT here: <http://web.mit.edu/macdev/Development/MITKerberos/Common/Documentation/preferences.html>

If you choose to use the native Kerberos stuff you'll need krbafs, see
the README where to find it.
a130 4
{Net,Free,Open}BSD

You will need the kernel source installed in /usr/src/sys.

d223 1
a223 1
  modload /usr/arla/bin/libnnpfs.o
d225 1
a225 1
  mknod /dev/nnpfs0 c <C-major from modstat> 0
d227 1
a227 1
  /usr/arla/bin/mount_nnpfs /afs /dev/nnpfs0
d232 4
d250 1
a250 1
  Do like in {Net|Open} except that after the first time (when /dev/nnpfs0
d252 1
a252 1
  be loaded by mount_nnpfs assuming you have copied nnpfs_mod.o to /modules with
d256 1
a256 1
    cp /usr/arla/bin/nnpfs.ko /modules
d258 1
a258 1
  And mount_nnpfs will load the filesystem into the kernel.
d269 1
a269 1
    nnpfs 138
d279 1
a279 1
    nnpfs 105
d283 1
a283 1
    nnpfs 73
d287 1
a287 1
    modload nnpfs
d289 1
a289 1
  You should probably add a file in /usr/kernel/drv/nnpfs.conf with:
d291 1
a291 1
    name="nnpfs" parent="pseudo" instance=0;
d295 1
a295 1
    drvconfig -i nnpfs
d299 1
a299 1
    ln -s "/devices/pseudo/nnpfs@@0:" /dev/nnpfs0
d304 1
a304 1
    /usr/arla/bin/mount_nnpfs /dev/nnpfs0 /afs
d308 1
a308 1
  new kth-krb (with afssys.c 1.59 or newer) and set AFS_SYSCALL=nnpfs
d311 3
a313 3
  If you want to, you can copy the nnpfs/solaris/nnpfs module to /kernel/fs
  and nnpfs/solaris/bin/mount_nnpfs to /lib/fs/nnpfs/mount which enables you to
  automatically load the nnpfs module when mounting the nnpfs file system.
d319 1
a319 1
    mknod /dev/nnpfs0 c 100 0
d327 2
a328 2
    /usr/arla/bin/nnpfs_load /usr/arla/bin/nnpfs
    /usr/arla/bin/mount_nnpfs /dev/nnpfs0 /afs
d333 1
a333 1
  Copy the nnpfs.mod to some of /subsys, /var/subsys, /sys/BINARY,
d337 1
a337 1
  Load (configure) the module with sysconfig -c nnpfs
d341 1
a341 1
  sysconfig -q nnpfs
d343 1
a343 1
  Create the char-device "mknod /dev/nnpfs0 c <MAJOR> 0"
d349 1
a349 1
     /usr/arla/bin/mount_nnpfs /dev/nnpfs0 /afs
d354 2
a355 2
  datan:~# sysconfig -c nnpfs
  datan:~# sysconfig -q nnpfs
d359 1
a359 1
  datan:~# mknod /dev/nnpfs0 c 68 0
d361 1
a361 1
  datan:~# /usr/arla/bin/mount_nnpfs /dev/nnpfs0 /afs
d402 1
a402 4
7001(*)	 <-->		7000,7003

Tools(**)		Server
whatever(***) <-->	7002,7003,7005
d404 2
a405 1
(*) arla older then 0.36 used 4711
d407 1
a407 1
(**) vos/pts/bos
d409 1
a409 1
(***) dynamically assigned port numbers, depends on your OS
@


