head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.38
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.36
	OPENBSD_5_0:1.3.0.34
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.32
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.30
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2012.08.23.06.21.51;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.39.57;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.40.53;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.27;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.21.02;	author hin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@the afs src tree can go away
@
text
@@@c Copyright (c) 1998 - 2000 Kungliga Tekniska Högskolan
@@c (Royal Institute of Technology, Stockholm, Sweden).
@@c All rights reserved.

@@c $arla: porting.texi,v 1.14 2002/09/07 10:43:55 lha Exp $

@@node Porting, Programming, Darwin/MacOS X, Top
@@comment  node-name,  next,  previous,  up
@@chapter Porting

The largest part of the work needed to port Arla to a new operating
system is in porting nnpfs, as kernel programming always is harder, less
portable and messier than user-space dito.  Arla in test mode
(@@kbd{arla-cli}) should work without any porting on any system that's
not very far away from Unix and that provides berkeley sockets
(including cygwin32).  The hard part is porting the NNPFS kernel module,
and we will spent most of this text on how to do that.

@@menu
* Porting user-space::
* Porting NNPFS::
@@end menu

@@node Porting user-space, Porting NNPFS, Porting, Porting
@@section user-space

The user-space parts should work on basically any system that is
reasonably Posix and has berkeley sockets.  The build uses autoconf and
should adapt itself to most forseeable circumstances.  If it fails to
consider something that is missing or not working on the particular OS
you are porting to, hard-code it to make sure that is what is missing
and then try to create an autoconf test for it.  If you fail to do so,
or have no autoconf experience, send us the patches anyway and tell us
where you are having the problem.

@@subsection LWP

The only thing that might take a little bit more effort in porting is
the context-switch in the LWP user-level threads package.  There are
assembler versions for most of the common architectures in @@file{lwp}.
Part of the problem is getting this code assembled properly.  There is
unfortunately no easy and portable way of preprocessing and assembling
code.  There is a script @@file{lwp/make-process.o.sh} that tries to do
in some different ways, but it may fail for you.  Next problem is that
assembler syntax can vary a lot even on the same CPU.  The source files
are written in such a way that they should be acceptable to almost any
syntax, but if it fails you have to find out what particular syntax has
to be used and adapt the source file for that.

The more interesting problem is if there is no support for your CPU.
The first thing to try then is the @@kbd{--with-pthreads} option that
uses the pthreads library.  If that fails or you want LWP working you
have to figure out enough details on your CPU to write two functions in
assembler, @@samp{savecontext} and @@samp{returnto} that save and
restore the processor context.

@@node Porting NNPFS, , Porting user-space, Porting
@@section NNPFS

@@enumerate

@@item
It helps to have source code for your operating system.

In theory, if stuff was documented well enough, you wouldn't need it.
In practice it never is, so you find out interfaces specs and how stuff
works by reading the source code.  If you're unable to find source code
for your OS, try finding source for the closest match.  If your OS is
based on BSD, try the appropriate version of BSD, for example.

@@item
If you don't have source, try second best, include files.

You can usually gather quite a lot of information on the workings of the
kernel by reading the includes files in @@file{<sys/*.h>}.

@@item
Be lazy

Try to find out what other NNPFS port is most similar to your OS and start
with that code.

@@item
Figure out how your kernel works.

You need to figure out how a few things work in your kernel:

@@enumerate

@@item
Loading/unloading kernel modules

That varies quite a lot but it's probably easy to figure out if you
have the source code for some other loadable module.  Sometimes you
can get the kernel to add your cdev, system call and file system
automatically but usually you have to write code in your `entry-point'
to add these to the appropriate tables.

@@item
Adding a new character device driver

The kernel has a table of all known device drivers, ordered by major
number.  Some kernels have one for block devices and one for character
devices and some have a common one.  That entry usually consists of a
number of function pointers that perform the operations (open, close,
read, write, ...), and possible a name and some flags.  It could look
something like the following:

@@example
struct cdevsw @@{
	int (*d_open)();
	int (*d_close)();
	...
@@};

struct cdevsw cdevsw[];
@@end example

These are then usually stored in a table `cdevsw' indexed by the major
device number. If you're really lucky there's a new way to get the
kernel to add your `struct cdevsw' to the global table when loading the
module or a function that does the addition for you.  Otherwise there
might be functions for adding/removing devices to the global table.
If not, you'll have
to fallback on looking for a free slot in the table and putting your
struct cdevsw there. In some cases, this is not stored in a table but
then there'll be a way of adding entries to the new data structure so
you don't need to worry about it.

@@item
Adding a new system call

This is quite similar to adding a new cdev but the table is usually
called @@code{sysent} instead.

@@item
Adding a new file system

Once again, quite similar in principle. The names of the structures
tend to vary quite a lot more.

@@item
Finding out how the VFS/Vnode switch works

The structure vfsops contains function pointers for all of the file
system operations.  You need to figure out what operations you need to
implement (usually at least mount, unmount, root, sync, and statfs).

The operations that are performed on files are vnode operations
(usually stored in a struct vnodeops), and you need to figure which of
these you need and how they should work.  Also, which is not as
explicit, how vnodes are supposed to be allocated and freed and such.

@@end enumerate

@@item
Suggested plan of action

@@enumerate

@@item
Start by writing a minimal hello-world module and make sure you can load
and unload it properly.

@@item
Then add a device driver to the module which dummy functions and
verify that works.

@@item
Try to fit the device driver functions in @@file{nnpfs_dev.c} into the
device driver.

@@item
Do a dummy module with a system call and verify that you can call it.

@@item
Start trying to add enough of the vfs/vnode operations from
@@file{nnpfs_vfsops.c} and @@file{nnpfs_vnodeops.c} so that you can build it.

@@item
Debug it.

@@item
Send us patches

@@end enumerate

@@end enumerate
@


1.3
log
@Merge
@
text
@@


1.2
log
@merge
@
text
@d5 1
a5 1
@@c $KTH: porting.texi,v 1.11 2000/11/25 14:18:42 lha Exp $
d7 2
a8 1
@@node Porting, Oddities, Darwin/MacOS X, Top
d12 1
a12 1
system is in porting xfs, as kernel programming always is harder, less
d16 1
a16 1
(including cygwin32).  The hard part is porting the XFS kernel module,
d21 1
a21 1
* Porting XFS::
d24 1
a24 1
@@node Porting user-space, Porting XFS, Porting, Porting
d57 2
a58 2
@@node Porting XFS, , Porting user-space, Porting
@@section XFS
d80 1
a80 1
Try to find out what other XFS port is most similar to your OS and start
d170 1
a170 1
Try to fit the device driver functions in @@file{xfs_dev.c} into the
d178 1
a178 1
@@file{xfs_vfsops.c} and @@file{xfs_vnodeops.c} so that you can build it.
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d1 3
a3 1
@@c $Id: porting.texi,v 1.5 2000/08/13 13:45:46 lha Exp $
d5 3
a7 1
@@node Porting, Oddities, Debugging, Top
d12 43
a54 5
portable and messier than user-space dito.  Arlad in test mode
(@@kbd{arlad --test}) should work without any porting on any system
that's not very far away from Unix and that provides berkeley sockets
(including cygwin32).  Therefore we will concern ourselves mostly with
how to port the XFS module.
d56 1
d121 3
a123 1
module or a function that does the addition for you. If not, you'll have
d133 1
a133 1
called `sysent' instead.
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d1 1
a1 3
@@c Copyright (c) 1998 - 2000 Kungliga Tekniska Högskolan
@@c (Royal Institute of Technology, Stockholm, Sweden).
@@c All rights reserved.
d3 1
a3 3
@@c $KTH: porting.texi,v 1.11 2000/11/25 14:18:42 lha Exp $

@@node Porting, Oddities, Darwin/MacOS X, Top
d8 5
a12 43
portable and messier than user-space dito.  Arla in test mode
(@@kbd{arla-cli}) should work without any porting on any system that's
not very far away from Unix and that provides berkeley sockets
(including cygwin32).  The hard part is porting the XFS kernel module,
and we will spent most of this text on how to do that.

@@menu
* Porting user-space::
* Porting XFS::
@@end menu

@@node Porting user-space, Porting XFS, Porting, Porting
@@section user-space

The user-space parts should work on basically any system that is
reasonably Posix and has berkeley sockets.  The build uses autoconf and
should adapt itself to most forseeable circumstances.  If it fails to
consider something that is missing or not working on the particular OS
you are porting to, hard-code it to make sure that is what is missing
and then try to create an autoconf test for it.  If you fail to do so,
or have no autoconf experience, send us the patches anyway and tell us
where you are having the problem.

@@subsection LWP

The only thing that might take a little bit more effort in porting is
the context-switch in the LWP user-level threads package.  There are
assembler versions for most of the common architectures in @@file{lwp}.
Part of the problem is getting this code assembled properly.  There is
unfortunately no easy and portable way of preprocessing and assembling
code.  There is a script @@file{lwp/make-process.o.sh} that tries to do
in some different ways, but it may fail for you.  Next problem is that
assembler syntax can vary a lot even on the same CPU.  The source files
are written in such a way that they should be acceptable to almost any
syntax, but if it fails you have to find out what particular syntax has
to be used and adapt the source file for that.

The more interesting problem is if there is no support for your CPU.
The first thing to try then is the @@kbd{--with-pthreads} option that
uses the pthreads library.  If that fails or you want LWP working you
have to figure out enough details on your CPU to write two functions in
assembler, @@samp{savecontext} and @@samp{returnto} that save and
restore the processor context.
a13 1
@@node Porting XFS, , Porting user-space, Porting
d78 1
a78 3
module or a function that does the addition for you.  Otherwise there
might be functions for adding/removing devices to the global table.
If not, you'll have
d88 1
a88 1
called @@code{sysent} instead.
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d5 1
a5 1
@@c $arla: porting.texi,v 1.14 2002/09/07 10:43:55 lha Exp $
d7 1
a7 2
@@node Porting, Programming, Darwin/MacOS X, Top
@@comment  node-name,  next,  previous,  up
d11 1
a11 1
system is in porting nnpfs, as kernel programming always is harder, less
d15 1
a15 1
(including cygwin32).  The hard part is porting the NNPFS kernel module,
d20 1
a20 1
* Porting NNPFS::
d23 1
a23 1
@@node Porting user-space, Porting NNPFS, Porting, Porting
d56 2
a57 2
@@node Porting NNPFS, , Porting user-space, Porting
@@section NNPFS
d79 1
a79 1
Try to find out what other NNPFS port is most similar to your OS and start
d169 1
a169 1
Try to fit the device driver functions in @@file{nnpfs_dev.c} into the
d177 1
a177 1
@@file{nnpfs_vfsops.c} and @@file{nnpfs_vnodeops.c} so that you can build it.
@


