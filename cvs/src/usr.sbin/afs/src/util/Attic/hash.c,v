head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.08.23.06.21.56;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.45.18;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.41.38;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.17;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.23;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.23;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.38;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.08;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Hash table functions
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
RCSID("$arla: hash.c,v 1.18 2002/05/23 15:21:41 lha Exp $");
#endif

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <ctype.h>
#include <bool.h>
#include <hash.h>
#include <arlamath.h>

struct ht_bucket {
     Hashentry *e;
     int len;
};


struct hashtab {		/* Hash table */
     int (*cmp)(void *, void *); /* Compare function */
     unsigned (*hash)(void *);	/* hash function */
     int flags;			/* flags */
     int sz;			/* Size */
     int maxbucketlen;		/* max bucket length */
     struct ht_bucket *tab;	/* The table */
};

struct hashentry {		/* Entry in bucket */
     struct hashentry **prev;
     struct hashentry *next;
     void *ptr;
};

#define HASHTAB_INITAL_SIZE	17
#define HASHTAB_MAX_BUCKET_LEN	20

static Hashentry *_search(Hashtab * htab,	/* The hash table */
			  void *ptr);	/* And key */
static void *_add(Hashtab * htab,
		  void *ptr,
		  Bool unique);

static void _might_resize(Hashtab *htab,	/* The hash table */
			  int bucket_len);	/* Hash bucket len */

Hashtab *
hashtabnew(int sz,
	   int (*cmp) (void *, void *),
	   unsigned (*hash) (void *))
{
     return hashtabnewf(sz, cmp, hash, 0);
}

Hashtab *
hashtabnewf(int sz,
	    int (*cmp) (void *, void *),
	    unsigned (*hash) (void *),
	    int flags) 
{
    Hashtab *htab;
    int i;

    assert(sz > 0 || (flags & HASHTAB_GROW));

    htab = (Hashtab *) malloc(sizeof(Hashtab));

    if (htab == NULL)
	return NULL;

    if (sz == 0 && (flags & HASHTAB_GROW))
	 sz = HASHTAB_INITAL_SIZE;

    htab->tab = malloc(sz * sizeof(struct ht_bucket));
    if (htab->tab == NULL){
	 free(htab);
	 return NULL;
    }

    for (i = 0; i < sz; ++i) {
	htab->tab[i].e = NULL;
	htab->tab[i].len = 0;
    }

    htab->cmp = cmp;
    htab->hash = hash;
    htab->sz = sz;
    htab->maxbucketlen = HASHTAB_MAX_BUCKET_LEN;
    htab->flags = flags;
	
    return htab;
}

/* Intern search function */

static Hashentry *
_search(Hashtab * htab, void *ptr)
{
    Hashentry *hptr;

    assert(htab && ptr);

    for (hptr = htab->tab[(*htab->hash) (ptr) % htab->sz].e;
	 hptr;
	 hptr = hptr->next)
	if ((*htab->cmp) (ptr, hptr->ptr) == 0)
	    break;
    return hptr;
}

/* Interal resize function */

static Bool
_resize(void *ptr, void *arg)
{
     Hashtab *h = arg;
     _add(h, ptr, TRUE);
     return TRUE;
}

static void
_might_resize(Hashtab *htab, int bucket_len)
{
     if (bucket_len > htab->maxbucketlen) {
	  Hashtab *nhtab;
	  struct ht_bucket *tab;
	  int new_size, old_size;

	  new_size = arlautil_findprime(htab->sz * 2);
	  assert (new_size > htab->sz);

	  nhtab = hashtabnewf(new_size, htab->cmp,
			      htab->hash, htab->flags);
	  if (nhtab == NULL)
	       return;

	  hashtabcleantab(htab, _resize, nhtab);

	  /* switch place between the tab and size */
	  tab = htab->tab;
	  htab->tab = nhtab->tab;
	  nhtab->tab = tab;

	  old_size = htab->sz;
	  htab->sz = nhtab->sz;
	  nhtab->sz = old_size;
	  
	  hashtabrelease(nhtab);
     }
}


/* Search for element in hash table */

void *
hashtabsearch(Hashtab * htab, void *ptr)
{
    Hashentry *tmp;

    tmp = _search(htab, ptr);
    return tmp ? tmp->ptr : tmp;
}

/* add element to hash table */
/* if already there, set new value */
/* !NULL if succesful */

static void *
_add(Hashtab * htab, void *ptr, Bool unique)
{
    Hashentry *h = _search(htab, ptr);
    Hashentry **tabptr;
    struct ht_bucket *hb;

    assert(htab && ptr);

    if (h) {
	if (unique)
	    return NULL;
	free((void *) h->ptr);
	h->ptr = ptr;
    } else {
	h = (Hashentry *) malloc(sizeof(Hashentry));
	if (h == NULL) {
	    return NULL;
	}
	hb = &htab->tab[(*htab->hash) (ptr) % htab->sz];
	hb->len++;
	tabptr = &hb->e;
	h->next = *tabptr;
	*tabptr = h;
	h->prev = tabptr;
	if (h->next)
	    h->next->prev = &h->next;
	h->ptr = ptr;
	if (htab->flags & HASHTAB_GROW)
	     _might_resize(htab, hb->len);
    }
    return h;
}

void *
hashtabaddreplace (Hashtab *htab, void *ptr)
{
    return _add (htab, ptr, FALSE);
}

void *
hashtabadd (Hashtab *htab, void *ptr)
{
    return _add (htab, ptr, TRUE);
}

/* delete element with key key. Iff freep, free Hashentry->ptr */

int
_hashtabdel(Hashtab * htab, void *ptr, int freep)
{
    Hashentry *h;

    assert(htab && ptr);

    h = _search(htab, ptr);
    if (h) {
	if (freep)
	    free(h->ptr);
	if ((*(h->prev) = h->next))
	    h->next->prev = h->prev;
	free(h);
	return 0;
    } else
	return -1;
}

/* Do something for each element */

void
hashtabforeach(Hashtab * htab, Bool(*func) (void *ptr, void *arg),
	       void *arg)
{
    struct ht_bucket *h;
    Hashentry *g, *next;

    assert(htab);

    for (h = htab->tab; h < &htab->tab[htab->sz]; ++h)
	for (g = h->e; g; g = next) {
	    next = g->next;
	    if ((*func) (g->ptr, arg))
		return;
	}
}


/* Clean out all elements that meet condition */

void
hashtabcleantab(Hashtab * htab, Bool(*cond) (void *ptr, void *arg),
	       void *arg)
{
    struct ht_bucket *h;
    Hashentry *g, *f;

    assert(htab);

    for (h = htab->tab; h < &htab->tab[htab->sz]; ++h) {
	for (g = h->e; g;) {
	    if ((*cond) (g->ptr, arg)) {
		f = g ; 
		g = g->next ;
		if ((*(f->prev) = f->next))
		    f->next->prev = f->prev;
		free(f);
		assert(h->len > 0);
		h->len--;
	    } else {
		 g = g->next;
	    }
	}
    }
}

static Bool
true_cond(void *ptr, void *arg)
{
    return TRUE;
}

/* Free the hashtab and all items in it */

void
hashtabrelease(Hashtab *htab)
{
    hashtabcleantab(htab, true_cond, NULL);
    free(htab->tab);
    free(htab);
}


/* standard hash-functions for strings */

unsigned
hashadd(const char *s)
{				/* Standard hash function */
    unsigned i;

    assert(s);

    for (i = 0; *s; ++s)
	i += *s;
    return i;
}

unsigned
hashcaseadd(const char *s)
{				/* Standard hash function */
    unsigned i;

    assert(s);

    for (i = 0; *s; ++s)
	i += toupper((unsigned char)*s);
    return i;
}

#define TWELVE (sizeof(unsigned))
#define SEVENTYFIVE (6*sizeof(unsigned))
#define HIGH_BITS (~((unsigned)(~0) >> TWELVE))

unsigned
hashjpw(const char *ss)
{				/* another hash function */
    unsigned h = 0;
    unsigned g;
    unsigned const char *s = (unsigned const char *) ss;

    for (; *s; ++s) {
	h = (h << TWELVE) + *s;
	if ((g = h & HIGH_BITS))
	    h = (h ^ (g >> SEVENTYFIVE)) & ~HIGH_BITS;
    }
    return h;
}
@


1.5
log
@Merge
@
text
@@


1.4
log
@merge
@
text
@d40 1
a40 1
RCSID("$KTH: hash.c,v 1.14.2.1 2001/08/31 18:10:43 ahltorp Exp $");
d50 25
d78 6
d90 9
d102 1
a102 1
    assert(sz > 0);
d104 1
a104 1
    htab = (Hashtab *) malloc(sizeof(Hashtab) + (sz - 1) * sizeof(Hashentry *));
d109 13
a121 2
    for (i = 0; i < sz; ++i)
	htab->tab[i] = NULL;
d126 3
d141 1
a141 1
    for (hptr = htab->tab[(*htab->hash) (ptr) % htab->sz];
d149 42
d211 1
d219 1
d225 3
a227 1
	tabptr = &htab->tab[(*htab->hash) (ptr) % htab->sz];
d233 3
a236 1
    h->ptr = ptr;
d279 2
a280 1
    Hashentry **h, *g, *next;
d285 1
a285 1
	for (g = *h; g; g = next) {
d299 2
a300 1
    Hashentry **h, *g, *f;
d305 1
a305 1
	for (g = *h; g;) {
d312 2
d333 1
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d40 1
a40 1
RCSID("$Id: hash.c,v 1.13 1999/05/16 22:13:18 assar Exp $");
d207 1
a207 1
		free(g);
d213 15
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@a0 1
/*	$OpenBSD$	*/
d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997 Kungliga Tekniska Högskolan
d45 1
a45 1
RCSID("$KTH: hash.c,v 1.12 1998/12/02 00:48:38 assar Exp $");
d243 1
a243 1
	i += toupper(*s);
@


1.1
log
@Initial revision
@
text
@d46 1
a46 1
RCSID("$KTH: hash.c,v 1.10 1998/03/18 19:30:03 art Exp $");
d116 2
a117 2
void *
hashtabadd(Hashtab * htab, void *ptr)
d124 3
a126 1
    if (h)
d128 1
a128 1
    else {
d142 12
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d46 1
a46 1
RCSID("$KTH: hash.c,v 1.14.2.1 2001/08/31 18:10:43 ahltorp Exp $");
d116 2
a117 2
static void *
_add(Hashtab * htab, void *ptr, Bool unique)
d124 1
a124 3
    if (h) {
	if (unique)
	    return NULL;
d126 1
a126 1
    } else {
a141 12
void *
hashtabaddreplace (Hashtab *htab, void *ptr)
{
    return _add (htab, ptr, FALSE);
}

void *
hashtabadd (Hashtab *htab, void *ptr)
{
    return _add (htab, ptr, TRUE);
}

d199 1
a199 1
		free(f);
a206 15
static Bool
true_cond(void *ptr, void *arg)
{
    return TRUE;
}

/* Free the hashtab and all items in it */

void
hashtabrelease(Hashtab *htab)
{
    hashtabcleantab(htab, true_cond, NULL);
    free(htab);
}

d230 1
a230 1
	i += toupper((unsigned char)*s);
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d40 1
a40 1
RCSID("$arla: hash.c,v 1.18 2002/05/23 15:21:41 lha Exp $");
a49 25
#include <arlamath.h>

struct ht_bucket {
     Hashentry *e;
     int len;
};


struct hashtab {		/* Hash table */
     int (*cmp)(void *, void *); /* Compare function */
     unsigned (*hash)(void *);	/* hash function */
     int flags;			/* flags */
     int sz;			/* Size */
     int maxbucketlen;		/* max bucket length */
     struct ht_bucket *tab;	/* The table */
};

struct hashentry {		/* Entry in bucket */
     struct hashentry **prev;
     struct hashentry *next;
     void *ptr;
};

#define HASHTAB_INITAL_SIZE	17
#define HASHTAB_MAX_BUCKET_LEN	20
a52 6
static void *_add(Hashtab * htab,
		  void *ptr,
		  Bool unique);

static void _might_resize(Hashtab *htab,	/* The hash table */
			  int bucket_len);	/* Hash bucket len */
a58 9
     return hashtabnewf(sz, cmp, hash, 0);
}

Hashtab *
hashtabnewf(int sz,
	    int (*cmp) (void *, void *),
	    unsigned (*hash) (void *),
	    int flags) 
{
d62 1
a62 1
    assert(sz > 0 || (flags & HASHTAB_GROW));
d64 1
a64 1
    htab = (Hashtab *) malloc(sizeof(Hashtab));
d69 2
a70 13
    if (sz == 0 && (flags & HASHTAB_GROW))
	 sz = HASHTAB_INITAL_SIZE;

    htab->tab = malloc(sz * sizeof(struct ht_bucket));
    if (htab->tab == NULL){
	 free(htab);
	 return NULL;
    }

    for (i = 0; i < sz; ++i) {
	htab->tab[i].e = NULL;
	htab->tab[i].len = 0;
    }
a74 3
    htab->maxbucketlen = HASHTAB_MAX_BUCKET_LEN;
    htab->flags = flags;
	
d87 1
a87 1
    for (hptr = htab->tab[(*htab->hash) (ptr) % htab->sz].e;
a94 42
/* Interal resize function */

static Bool
_resize(void *ptr, void *arg)
{
     Hashtab *h = arg;
     _add(h, ptr, TRUE);
     return TRUE;
}

static void
_might_resize(Hashtab *htab, int bucket_len)
{
     if (bucket_len > htab->maxbucketlen) {
	  Hashtab *nhtab;
	  struct ht_bucket *tab;
	  int new_size, old_size;

	  new_size = arlautil_findprime(htab->sz * 2);
	  assert (new_size > htab->sz);

	  nhtab = hashtabnewf(new_size, htab->cmp,
			      htab->hash, htab->flags);
	  if (nhtab == NULL)
	       return;

	  hashtabcleantab(htab, _resize, nhtab);

	  /* switch place between the tab and size */
	  tab = htab->tab;
	  htab->tab = nhtab->tab;
	  nhtab->tab = tab;

	  old_size = htab->sz;
	  htab->sz = nhtab->sz;
	  nhtab->sz = old_size;
	  
	  hashtabrelease(nhtab);
     }
}


a114 1
    struct ht_bucket *hb;
a121 1
	h->ptr = ptr;
d127 1
a127 3
	hb = &htab->tab[(*htab->hash) (ptr) % htab->sz];
	hb->len++;
	tabptr = &hb->e;
a132 3
	h->ptr = ptr;
	if (htab->flags & HASHTAB_GROW)
	     _might_resize(htab, hb->len);
d134 1
d177 1
a177 2
    struct ht_bucket *h;
    Hashentry *g, *next;
d182 1
a182 1
	for (g = h->e; g; g = next) {
d196 1
a196 2
    struct ht_bucket *h;
    Hashentry *g, *f;
d201 1
a201 1
	for (g = h->e; g;) {
a207 2
		assert(h->len > 0);
		h->len--;
a226 1
    free(htab->tab);
@


