head	1.5;
access;
symbols
	OPENBSD_5_2:1.4.0.38
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.36
	OPENBSD_5_0:1.4.0.34
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.32
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.30
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.26
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.1.1.0.8
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.6
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2012.08.23.06.21.56;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	2003.08.05.09.16.16;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.07.04.45.18;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.11.14.41.39;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.24;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.24;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.38;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.08;	author hin;	state Exp;
branches;
next	;


desc
@@


1.5
log
@the afs src tree can go away
@
text
@OBSOLETE /*
OBSOLETE  * Copyright (c) 1998 Kungliga Tekniska Högskolan
OBSOLETE  * (Royal Institute of Technology, Stockholm, Sweden).
OBSOLETE  * All rights reserved.
OBSOLETE  * 
OBSOLETE  * Redistribution and use in source and binary forms, with or without
OBSOLETE  * modification, are permitted provided that the following conditions
OBSOLETE  * are met:
OBSOLETE  * 
OBSOLETE  * 1. Redistributions of source code must retain the above copyright
OBSOLETE  *    notice, this list of conditions and the following disclaimer.
OBSOLETE  * 
OBSOLETE  * 2. Redistributions in binary form must reproduce the above copyright
OBSOLETE  *    notice, this list of conditions and the following disclaimer in the
OBSOLETE  *    documentation and/or other materials provided with the distribution.
OBSOLETE  * 
OBSOLETE  * 3. Neither the name of the Institute nor the names of its contributors
OBSOLETE  *    may be used to endorse or promote products derived from this software
OBSOLETE  *    without specific prior written permission.
OBSOLETE  * 
OBSOLETE  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
OBSOLETE  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
OBSOLETE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
OBSOLETE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
OBSOLETE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
OBSOLETE  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OBSOLETE  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
OBSOLETE  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
OBSOLETE  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OBSOLETE  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
OBSOLETE  * SUCH DAMAGE.
OBSOLETE  */
OBSOLETE 
OBSOLETE #ifdef HAVE_CONFIG_H
OBSOLETE #include <config.h>
OBSOLETE #endif
OBSOLETE 
OBSOLETE RCSID("$arla: mmaptime.c,v 1.8 2002/12/20 12:57:07 lha Exp $");
OBSOLETE 
OBSOLETE #include <stdio.h>
OBSOLETE 
OBSOLETE /*
OBSOLETE  * Speed hack
OBSOLETE  *
OBSOLETE  *   Here we try to mmap time from the kernelspace.
OBSOLETE  *   There are people claiming that this is about 100 times faster
OBSOLETE  *   then gettimeofday()
OBSOLETE  *
OBSOLETE  *   You need to have USE_MMAPTIME defined to get it.
OBSOLETE  *
OBSOLETE  *   Other thing that you need is mmap(), getpagesize(), kvm_open() & co
OBSOLETE  *
OBSOLETE  *   If not initalized with mmaptime_probe gettimeofday will be called
OBSOLETE  *
OBSOLETE  */
OBSOLETE 
OBSOLETE #if defined(USE_MMAPTIME)
OBSOLETE 
OBSOLETE #if defined(HAVE_MMAP) && defined(HAVE_KVM_OPEN)  && defined(HAVE_KVM_NLIST) && defined(HAVE_GETPAGESIZE)
OBSOLETE 
OBSOLETE #include "mmaptime.h"
OBSOLETE 
OBSOLETE #ifdef HAVE_UNISTD_H
OBSOLETE #include <unistd.h>
OBSOLETE #endif
OBSOLETE #ifdef HAVE_SYS_MMAN_H
OBSOLETE #include <sys/mman.h>
OBSOLETE #endif
OBSOLETE #ifdef HAVE_FCNTL_H
OBSOLETE #include <fcntl.h>
OBSOLETE #endif
OBSOLETE #ifdef HAVE_NLIST_H
OBSOLETE #include <nlist.h>
OBSOLETE #endif
OBSOLETE #ifdef HAVE_ELFLIB_NLIST_H
OBSOLETE #include <elflib/nlist.h>
OBSOLETE #endif
OBSOLETE #ifdef HAVE_KVM_H
OBSOLETE #include <kvm.h>
OBSOLETE #endif
OBSOLETE #include <errno.h>
OBSOLETE 
OBSOLETE 
OBSOLETE static unsigned long ps;
OBSOLETE static unsigned long begpage;
OBSOLETE static void *mem;
OBSOLETE static int kmemfd = -1;
OBSOLETE static struct timeval *tp = NULL;
OBSOLETE 
OBSOLETE 
OBSOLETE int mmaptime_probe(void)
OBSOLETE {
OBSOLETE     kvm_t *kvm;
OBSOLETE     unsigned long value;
OBSOLETE     struct nlist nl[2];
OBSOLETE     int i, saved_errno;
OBSOLETE     
OBSOLETE     if (tp)
OBSOLETE 	return 0;
OBSOLETE     
OBSOLETE     if (geteuid()) {
OBSOLETE         fprintf(stderr, "mmaptime needs to be run as root, falling back on gettimeofday\n");
OBSOLETE         return EPERM;
OBSOLETE     }	
OBSOLETE 
OBSOLETE     kvm = kvm_open(NULL, NULL, NULL, O_RDONLY, "util/mmaptime");
OBSOLETE     nl[0].n_name = "_time";
OBSOLETE     nl[1].n_name = NULL;
OBSOLETE     i = kvm_nlist(kvm, nl);
OBSOLETE 
OBSOLETE     /*
OBSOLETE      * SunOS 5.6 is broken and returns a zero even when it fails.
OBSOLETE      */
OBSOLETE 
OBSOLETE     if (nl[0].n_value == 0) {
OBSOLETE 	nl[0].n_name = "time";
OBSOLETE 	nl[1].n_name = NULL;
OBSOLETE 	i = kvm_nlist(kvm, nl);
OBSOLETE     }
OBSOLETE 
OBSOLETE     kvm_close(kvm);
OBSOLETE 
OBSOLETE     if (i != 0)
OBSOLETE 	return ENOENT;
OBSOLETE 
OBSOLETE     kmemfd = open("/dev/kmem", O_RDONLY);
OBSOLETE     if (kmemfd < 0) 
OBSOLETE 	return errno;
OBSOLETE 
OBSOLETE     value = nl[0].n_value;
OBSOLETE 
OBSOLETE     ps = getpagesize();
OBSOLETE 
OBSOLETE     begpage = value - value % ps ;
OBSOLETE     mem = mmap(NULL, ps, PROT_READ, MAP_SHARED, kmemfd, begpage);
OBSOLETE 
OBSOLETE     if (mem == (void *) -1) {
OBSOLETE 	saved_errno = errno;
OBSOLETE 	close(kmemfd);
OBSOLETE 	return saved_errno;
OBSOLETE     }
OBSOLETE 
OBSOLETE     tp = (struct timeval *) (mem + value % ps);
OBSOLETE     return 0;
OBSOLETE }
OBSOLETE 
OBSOLETE 
OBSOLETE int 
OBSOLETE mmaptime_close(void)
OBSOLETE {
OBSOLETE     if (tp)
OBSOLETE 	munmap(mem, ps);
OBSOLETE 
OBSOLETE     tp = NULL;
OBSOLETE 
OBSOLETE     if (kmemfd >= 0)
OBSOLETE 	close(kmemfd);
OBSOLETE 
OBSOLETE     
OBSOLETE     return 0;
OBSOLETE }
OBSOLETE 
OBSOLETE int
OBSOLETE mmaptime_gettimeofday(struct timeval *t, void *tzp)
OBSOLETE {
OBSOLETE     if (t && tp && !tzp) {
OBSOLETE 	*t = *tp;
OBSOLETE 	return 0;
OBSOLETE     } else 
OBSOLETE 	return gettimeofday(tp, tzp);
OBSOLETE 
OBSOLETE     /* NOT REACHED */
OBSOLETE     return -1;
OBSOLETE }
OBSOLETE 
OBSOLETE 
OBSOLETE #else /* USE_MMAPTIME not useable */
OBSOLETE 
OBSOLETE #include <errno.h>
OBSOLETE 
OBSOLETE int 
OBSOLETE mmaptime_probe(void) 
OBSOLETE {
OBSOLETE     return EOPNOTSUPP;
OBSOLETE }
OBSOLETE 
OBSOLETE int 
OBSOLETE mmaptime_gettimeofday(struct timeval *tp, void *tzp)
OBSOLETE {
OBSOLETE     return gettimeofday(tp, tzp);
OBSOLETE }
OBSOLETE 
OBSOLETE int 
OBSOLETE mmaptime_close(void)
OBSOLETE {
OBSOLETE     return 0;
OBSOLETE }
OBSOLETE 
OBSOLETE #endif /* USE_MMAPTIME not useable */
OBSOLETE #endif /* USE_MMAPTIME */
OBSOLETE 
@


1.4
log
@Merge
@
text
@@


1.3
log
@merge
@
text
@d1 201
a201 197
/*
 * Copyright (c) 1998 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

RCSID("$KTH: mmaptime.c,v 1.6 2000/10/03 00:31:36 lha Exp $");

#include <stdio.h>

/*
 * Speed hack
 *
 *   Here we try to mmap time from the kernelspace.
 *   There are people claiming that this is about 100 times faster
 *   then gettimeofday()
 *
 *   You need to have USE_MMAPTIME defined to get it.
 *
 *   Other thing that you need is mmap(), getpagesize(), kvm_open() & co
 *
 *   If not initalized with mmaptime_probe gettimeofday will be called
 *
 */

#include "mmaptime.h"

#if defined(USE_MMAPTIME) && defined(HAVE_MMAP) && defined(HAVE_KVM_OPEN)  && defined(HAVE_KVM_NLIST) && defined(HAVE_GETPAGESIZE)

#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#ifdef HAVE_SYS_MMAN_H
#include <sys/mman.h>
#endif
#ifdef HAVE_FCNTL_H
#include <fcntl.h>
#endif
#ifdef HAVE_NLIST_H
#include <nlist.h>
#endif
#ifdef HAVE_ELFLIB_NLIST_H
#include <elflib/nlist.h>
#endif
#ifdef HAVE_KVM_H
#include <kvm.h>
#endif
#include <errno.h>


static unsigned long ps;
static unsigned long begpage;
static void *mem;
static int kmemfd = -1;
static struct timeval *tp = NULL;


int mmaptime_probe(void)
{
    kvm_t *kvm;
    unsigned long value;
    struct nlist nl[2];
    int i, saved_errno;
    
    if (tp)
	return 0;
    
    if (geteuid()) {
        fprintf(stderr, "mmaptime needs to be run as root, falling back on gettimeofday\n");
        return EPERM;
    }	

    kvm = kvm_open(NULL, NULL, NULL, O_RDONLY, "util/mmaptime");
    nl[0].n_name = "_time";
    nl[1].n_name = NULL;
    i = kvm_nlist(kvm, nl);

    /*
     * SunOS 5.6 is broken and returns a zero even when it fails.
     */

    if (nl[0].n_value == 0) {
	nl[0].n_name = "time";
	nl[1].n_name = NULL;
	i = kvm_nlist(kvm, nl);
    }

    kvm_close(kvm);

    if (i != 0)
	return ENOENT;

    kmemfd = open("/dev/kmem", O_RDONLY);
    if (kmemfd < 0) 
	return errno;

    value = nl[0].n_value;

    ps = getpagesize();

    begpage = value - value % ps ;
    mem = mmap(NULL, ps, PROT_READ, MAP_SHARED, kmemfd, begpage);

    if (mem == (void *) -1) {
	saved_errno = errno;
	close(kmemfd);
	return saved_errno;
    }

    tp = (struct timeval *) (mem + value % ps);
    return 0;
}


int 
mmaptime_close(void)
{
    if (tp)
	munmap(mem, ps);

    tp = NULL;

    if (kmemfd >= 0)
	close(kmemfd);

    
    return 0;
}

int
mmaptime_gettimeofday(struct timeval *t, void *tzp)
{
    if (t && tp && !tzp) {
	*t = *tp;
	return 0;
    } else 
	return gettimeofday(tp, tzp);

    /* NOT REACHED */
    return -1;
}


#else /* USE_MMAPTIME */

#include <errno.h>

int 
mmaptime_probe(void) 
{
    return EOPNOTSUPP;
}

int 
mmaptime_gettimeofday(struct timeval *tp, void *tzp)
{
    return gettimeofday(tp, tzp);
}

int 
mmaptime_close(void)
{
    return 0;
}

#endif
@


1.2
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d38 1
a38 1
RCSID("$Id: mmaptime.c,v 1.5 1998/05/24 16:07:18 lha Exp $");
@


1.1
log
@Initial revision
@
text
@a0 1
/*	$OpenBSD$	*/
d43 1
a43 1
RCSID("$KTH: mmaptime.c,v 1.5 1998/05/24 16:07:18 lha Exp $");
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d44 1
a44 1
RCSID("$KTH: mmaptime.c,v 1.6 2000/10/03 00:31:36 lha Exp $");
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d1 197
a197 201
OBSOLETE /*
OBSOLETE  * Copyright (c) 1998 Kungliga Tekniska Högskolan
OBSOLETE  * (Royal Institute of Technology, Stockholm, Sweden).
OBSOLETE  * All rights reserved.
OBSOLETE  * 
OBSOLETE  * Redistribution and use in source and binary forms, with or without
OBSOLETE  * modification, are permitted provided that the following conditions
OBSOLETE  * are met:
OBSOLETE  * 
OBSOLETE  * 1. Redistributions of source code must retain the above copyright
OBSOLETE  *    notice, this list of conditions and the following disclaimer.
OBSOLETE  * 
OBSOLETE  * 2. Redistributions in binary form must reproduce the above copyright
OBSOLETE  *    notice, this list of conditions and the following disclaimer in the
OBSOLETE  *    documentation and/or other materials provided with the distribution.
OBSOLETE  * 
OBSOLETE  * 3. Neither the name of the Institute nor the names of its contributors
OBSOLETE  *    may be used to endorse or promote products derived from this software
OBSOLETE  *    without specific prior written permission.
OBSOLETE  * 
OBSOLETE  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
OBSOLETE  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
OBSOLETE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
OBSOLETE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
OBSOLETE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
OBSOLETE  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OBSOLETE  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
OBSOLETE  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
OBSOLETE  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OBSOLETE  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
OBSOLETE  * SUCH DAMAGE.
OBSOLETE  */
OBSOLETE 
OBSOLETE #ifdef HAVE_CONFIG_H
OBSOLETE #include <config.h>
OBSOLETE #endif
OBSOLETE 
OBSOLETE RCSID("$arla: mmaptime.c,v 1.8 2002/12/20 12:57:07 lha Exp $");
OBSOLETE 
OBSOLETE #include <stdio.h>
OBSOLETE 
OBSOLETE /*
OBSOLETE  * Speed hack
OBSOLETE  *
OBSOLETE  *   Here we try to mmap time from the kernelspace.
OBSOLETE  *   There are people claiming that this is about 100 times faster
OBSOLETE  *   then gettimeofday()
OBSOLETE  *
OBSOLETE  *   You need to have USE_MMAPTIME defined to get it.
OBSOLETE  *
OBSOLETE  *   Other thing that you need is mmap(), getpagesize(), kvm_open() & co
OBSOLETE  *
OBSOLETE  *   If not initalized with mmaptime_probe gettimeofday will be called
OBSOLETE  *
OBSOLETE  */
OBSOLETE 
OBSOLETE #if defined(USE_MMAPTIME)
OBSOLETE 
OBSOLETE #if defined(HAVE_MMAP) && defined(HAVE_KVM_OPEN)  && defined(HAVE_KVM_NLIST) && defined(HAVE_GETPAGESIZE)
OBSOLETE 
OBSOLETE #include "mmaptime.h"
OBSOLETE 
OBSOLETE #ifdef HAVE_UNISTD_H
OBSOLETE #include <unistd.h>
OBSOLETE #endif
OBSOLETE #ifdef HAVE_SYS_MMAN_H
OBSOLETE #include <sys/mman.h>
OBSOLETE #endif
OBSOLETE #ifdef HAVE_FCNTL_H
OBSOLETE #include <fcntl.h>
OBSOLETE #endif
OBSOLETE #ifdef HAVE_NLIST_H
OBSOLETE #include <nlist.h>
OBSOLETE #endif
OBSOLETE #ifdef HAVE_ELFLIB_NLIST_H
OBSOLETE #include <elflib/nlist.h>
OBSOLETE #endif
OBSOLETE #ifdef HAVE_KVM_H
OBSOLETE #include <kvm.h>
OBSOLETE #endif
OBSOLETE #include <errno.h>
OBSOLETE 
OBSOLETE 
OBSOLETE static unsigned long ps;
OBSOLETE static unsigned long begpage;
OBSOLETE static void *mem;
OBSOLETE static int kmemfd = -1;
OBSOLETE static struct timeval *tp = NULL;
OBSOLETE 
OBSOLETE 
OBSOLETE int mmaptime_probe(void)
OBSOLETE {
OBSOLETE     kvm_t *kvm;
OBSOLETE     unsigned long value;
OBSOLETE     struct nlist nl[2];
OBSOLETE     int i, saved_errno;
OBSOLETE     
OBSOLETE     if (tp)
OBSOLETE 	return 0;
OBSOLETE     
OBSOLETE     if (geteuid()) {
OBSOLETE         fprintf(stderr, "mmaptime needs to be run as root, falling back on gettimeofday\n");
OBSOLETE         return EPERM;
OBSOLETE     }	
OBSOLETE 
OBSOLETE     kvm = kvm_open(NULL, NULL, NULL, O_RDONLY, "util/mmaptime");
OBSOLETE     nl[0].n_name = "_time";
OBSOLETE     nl[1].n_name = NULL;
OBSOLETE     i = kvm_nlist(kvm, nl);
OBSOLETE 
OBSOLETE     /*
OBSOLETE      * SunOS 5.6 is broken and returns a zero even when it fails.
OBSOLETE      */
OBSOLETE 
OBSOLETE     if (nl[0].n_value == 0) {
OBSOLETE 	nl[0].n_name = "time";
OBSOLETE 	nl[1].n_name = NULL;
OBSOLETE 	i = kvm_nlist(kvm, nl);
OBSOLETE     }
OBSOLETE 
OBSOLETE     kvm_close(kvm);
OBSOLETE 
OBSOLETE     if (i != 0)
OBSOLETE 	return ENOENT;
OBSOLETE 
OBSOLETE     kmemfd = open("/dev/kmem", O_RDONLY);
OBSOLETE     if (kmemfd < 0) 
OBSOLETE 	return errno;
OBSOLETE 
OBSOLETE     value = nl[0].n_value;
OBSOLETE 
OBSOLETE     ps = getpagesize();
OBSOLETE 
OBSOLETE     begpage = value - value % ps ;
OBSOLETE     mem = mmap(NULL, ps, PROT_READ, MAP_SHARED, kmemfd, begpage);
OBSOLETE 
OBSOLETE     if (mem == (void *) -1) {
OBSOLETE 	saved_errno = errno;
OBSOLETE 	close(kmemfd);
OBSOLETE 	return saved_errno;
OBSOLETE     }
OBSOLETE 
OBSOLETE     tp = (struct timeval *) (mem + value % ps);
OBSOLETE     return 0;
OBSOLETE }
OBSOLETE 
OBSOLETE 
OBSOLETE int 
OBSOLETE mmaptime_close(void)
OBSOLETE {
OBSOLETE     if (tp)
OBSOLETE 	munmap(mem, ps);
OBSOLETE 
OBSOLETE     tp = NULL;
OBSOLETE 
OBSOLETE     if (kmemfd >= 0)
OBSOLETE 	close(kmemfd);
OBSOLETE 
OBSOLETE     
OBSOLETE     return 0;
OBSOLETE }
OBSOLETE 
OBSOLETE int
OBSOLETE mmaptime_gettimeofday(struct timeval *t, void *tzp)
OBSOLETE {
OBSOLETE     if (t && tp && !tzp) {
OBSOLETE 	*t = *tp;
OBSOLETE 	return 0;
OBSOLETE     } else 
OBSOLETE 	return gettimeofday(tp, tzp);
OBSOLETE 
OBSOLETE     /* NOT REACHED */
OBSOLETE     return -1;
OBSOLETE }
OBSOLETE 
OBSOLETE 
OBSOLETE #else /* USE_MMAPTIME not useable */
OBSOLETE 
OBSOLETE #include <errno.h>
OBSOLETE 
OBSOLETE int 
OBSOLETE mmaptime_probe(void) 
OBSOLETE {
OBSOLETE     return EOPNOTSUPP;
OBSOLETE }
OBSOLETE 
OBSOLETE int 
OBSOLETE mmaptime_gettimeofday(struct timeval *tp, void *tzp)
OBSOLETE {
OBSOLETE     return gettimeofday(tp, tzp);
OBSOLETE }
OBSOLETE 
OBSOLETE int 
OBSOLETE mmaptime_close(void)
OBSOLETE {
OBSOLETE     return 0;
OBSOLETE }
OBSOLETE 
OBSOLETE #endif /* USE_MMAPTIME not useable */
OBSOLETE #endif /* USE_MMAPTIME */
OBSOLETE 
@


