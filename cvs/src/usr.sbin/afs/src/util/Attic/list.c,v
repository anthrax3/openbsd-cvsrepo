head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.08.23.06.21.56;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.45.18;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.41.38;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.17;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.23;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.23;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.38;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.08;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995, 1996, 1997, 1998, 2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * List handling functions
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
RCSID("$arla: list.c,v 1.12 2002/04/20 17:06:21 lha Exp $");
#endif

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include "list.h"

/*
 * The representation is with a double-linked list, a pointer to
 * the tail, and another one to the head.
 */

/*
 * Create a new list.
 */

List*
listnew (void)
{
     List *tmp = (List *)malloc (sizeof (List));

     if (tmp)
	  tmp->head = tmp->tail = NULL;
     return tmp;
}

/*
 * Free a list, assume that its empty
 */

void
listfree(List *list)
{
	list->head = list->tail = NULL;
	free(list);
} 

/*
 * Add an element before `item'
 */

Listitem *
listaddbefore (List *list, Listitem *old_item, void *data)
{
     Listitem *item = (Listitem *)malloc (sizeof (Listitem));

     if (item == NULL)
	 return item;

     item->data = data;
     item->prev = old_item->prev;
     item->next = old_item;
     if (item->prev)
	 item->prev->next = item;
     else
	 list->head = item;
     old_item->prev = item;
     return item;
}

/*
 * Add an element after `item'
 */

Listitem *
listaddafter (List *list, Listitem *old_item, void *data)
{
     Listitem *item = (Listitem *)malloc (sizeof (Listitem));

     if (item == NULL)
	 return item;

     item->data = data;
     item->next = old_item->next;
     item->prev = old_item;
     if (item->next)
	 item->next->prev = item;
     else
	 list->tail = item;
     old_item->next = item;
     return item;
}

/*
 * Add an element to the head of the list
 */

Listitem *
listaddhead (List *list, void *data)
{
     Listitem *item = (Listitem *)malloc (sizeof (Listitem));

     if (item == NULL)
	 return item;

     item->data = data;
     item->prev = NULL;
     item->next = list->head;
     if (list->head)
	  list->head->prev = item;
     list->head = item;
     if (list->tail == NULL)
	  list->tail = item;
     return item;
}

/*
 * Add an element to the tail of the list
 */

Listitem *
listaddtail (List *list, void *data)
{
     Listitem *item = (Listitem *)malloc (sizeof (Listitem));

     if (item == NULL)
	 return item;

     item->data = data;
     item->next = NULL;
     item->prev = list->tail;
     if (list->tail)
	  list->tail->next = item;
     list->tail = item;
     if (list->head == NULL)
	  list->head = item;
     return item;
}

/*
 * Remove an element from the head of the list.
 * Return this element.
 */

void *
listdelhead (List *list)
{
     Listitem	*item = list->head;
     void	*ret;

     if (item == NULL)
	 return NULL;
     ret = item->data;

     list->head = list->head->next;
     if (list->head)
	  list->head->prev = NULL;
     free(item);
     if (list->tail == item)
	  list->tail = NULL;
     return ret;
}

/*
 * Remove an element from the tail of the list.
 * Return this element.
 */

void *
listdeltail (List *list)
{
     Listitem	*item = list->tail;
     void	*ret;

     if (item == NULL)
	 return NULL;
     ret = item->data;

     list->tail = list->tail->prev;
     if (list->tail)
	  list->tail->next = NULL;
     free (item);
     if (list->head == item)
	  list->head = NULL;
     return ret;
}

/*
 * listdel
 */

void
listdel (List *list, Listitem *item)
{
     if (item->prev)
	  item->prev->next = item->next;
     if (item->next)
	  item->next->prev = item->prev;
     if (item == list->head)
	  list->head = item->next;
     if (item == list->tail)
	  list->tail = item->prev;
     free (item);
}

/*
 * Iterate through all the items in a list.
 */

void listiter (List *list, Bool (*fn)(List *, Listitem *, void *arg),
	       void *arg)
{
     Listitem *item;

     for (item = list->head; item; item = item->next)
	  if ((*fn) (list, item, arg))
	       break;
}
@


1.5
log
@Merge
@
text
@@


1.4
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
d40 1
a40 1
RCSID("$KTH: list.c,v 1.11 2000/10/03 00:31:09 lha Exp $");
d66 11
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d40 1
a40 1
RCSID("$Id: list.c,v 1.10 1998/12/27 02:11:06 assar Exp $");
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@a0 1
/*	$OpenBSD$	*/
d45 1
a45 1
RCSID("$KTH: list.c,v 1.10 1998/12/27 02:11:06 assar Exp $");
@


1.1
log
@Initial revision
@
text
@d46 1
a46 1
RCSID("$KTH: list.c,v 1.7 1998/07/05 18:25:55 assar Exp $");
a165 10
 * TRUE iff the list is empty.
 */

Bool
listemptyp (List *list)
{
     return list->head == NULL;
}

/*
a228 30
}

Listitem *
listhead (List *list)
{
     return list->head;
}

Listitem *
listtail (List *list)
{
     return list->tail;
}

Listitem *
listprev (List *list, Listitem *item)
{
     return item->prev;
}

Listitem *
listnext (List *list, Listitem *item)
{
     return item->next;
}

void *
listdata (Listitem *item)
{
     return item->data;
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d46 1
a46 1
RCSID("$KTH: list.c,v 1.11 2000/10/03 00:31:09 lha Exp $");
d166 10
d239 30
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998, 2002 Kungliga Tekniska Högskolan
d40 1
a40 1
RCSID("$arla: list.c,v 1.12 2002/04/20 17:06:21 lha Exp $");
a65 11

/*
 * Free a list, assume that its empty
 */

void
listfree(List *list)
{
	list->head = list->tail = NULL;
	free(list);
} 
@


