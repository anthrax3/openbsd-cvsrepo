head	1.5;
access;
symbols
	OPENBSD_5_2:1.4.0.38
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.36
	OPENBSD_5_0:1.4.0.34
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.32
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.30
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.26
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.1.1.0.8
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.6
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2012.08.23.06.21.56;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.07.04.45.18;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.11.14.41.39;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.23;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.23;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.38;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.08;	author hin;	state Exp;
branches;
next	;


desc
@@


1.5
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995, 1996, 1997 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* $arla: log.h,v 1.12 2003/01/10 12:38:44 lha Exp $ */

#ifndef _ARLAUTIL_LOG_H
#define _ARLAUTIL_LOG_H 1

#include <stdarg.h>
#include <parse_units.h>

#if !defined(__GNUC__) && !defined(__attribute__)
#define __attribute__(x)
#endif

typedef enum {
    LOG_CPU_USAGE = 1
} log_flags;

typedef struct log_method Log_method;
typedef struct log_unit Log_unit;

/*
 * Functions for handling logging
 */

Log_method *log_open (const char *progname, char *fname);
/* Starting logging to `fname'.  Label all messages as coming from
 * `progname'. */

void log_close (Log_method *logm);

Log_unit *log_unit_init (Log_method *method, const char *name,
			 struct units *lognames,
			 unsigned long default_mask);

void log_unit_free (Log_method *method, Log_unit *logu);

log_flags log_setflags(Log_method *logm, log_flags flags);
log_flags log_getflags(Log_method *logm);

void log_log (Log_unit *logu, unsigned level, const char *fmt, ...)
__attribute__((format (printf, 3, 4)))
;

void log_vlog(Log_unit *logu, unsigned level, const char *fmt, va_list args)
__attribute__((format (printf, 3, 0)))
;

unsigned log_get_mask (Log_unit *logu);

void log_set_mask (Log_unit *logu, unsigned mask);

void log_set_mask_str (Log_method *method, Log_unit *default_unit,
		       const char *str);

size_t log_mask2str (Log_method *method, Log_unit *unit, char *buf, size_t sz);

#endif /* _ARLAUTIL_LOG_H */
@


1.4
log
@Merge
@
text
@@


1.3
log
@merge
@
text
@d34 1
a34 1
/* $KTH: log.h,v 1.8.2.1 2001/04/29 23:53:31 lha Exp $ */
d36 2
a37 2
#ifndef _LOG_
#define _LOG_
d42 4
d61 1
a61 1
void log_close (Log_method *log);
d67 1
a67 1
void log_unit_free (Log_method *method, Log_unit *log);
d69 2
a70 2
log_flags log_setflags(Log_method *log, log_flags flags);
log_flags log_getflags(Log_method *log);
d72 1
a72 1
void log_log (Log_unit *log, unsigned level, const char *fmt, ...)
d76 1
a76 1
void log_vlog(Log_unit *log, unsigned level, const char *fmt, va_list args)
d80 1
a80 1
unsigned log_get_mask (Log_unit *log);
d82 1
a82 1
void log_set_mask (Log_unit *log, unsigned mask);
d89 1
a89 1
#endif /* _LOG_ */
@


1.2
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d34 1
a34 1
/* $Id: log.h,v 1.6 2000/08/24 21:42:39 lha Exp $ */
d42 3
a44 3
#if HAVE_SYSLOG
#include <syslog.h>
#endif /* HAVE_SYSLOG */
d53 1
a53 1
Log_method *log_open (char *progname, char *fname);
d64 3
@


1.1
log
@Initial revision
@
text
@a0 1
/*	$OpenBSD$	*/
d39 1
a39 1
/* $KTH: log.h,v 1.5 1998/04/03 03:34:26 assar Exp $ */
d45 1
d52 1
d64 7
a70 1
void log_log (Log_method *log, unsigned level, const char *fmt, ...)
d74 1
a74 1
void log_vlog(Log_method *log, unsigned level, const char *fmt, va_list args)
d78 6
a83 1
unsigned log_get_mask (Log_method *log);
d85 1
a85 1
void log_set_mask (Log_method *log, unsigned mask);
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d40 1
a40 1
/* $KTH: log.h,v 1.8.2.1 2001/04/29 23:53:31 lha Exp $ */
a45 1
#include <parse_units.h>
d47 3
a49 3
typedef enum {
    LOG_CPU_USAGE = 1
} log_flags;
a51 1
typedef struct log_unit Log_unit;
d57 1
a57 1
Log_method *log_open (const char *progname, char *fname);
d63 1
a63 10
Log_unit *log_unit_init (Log_method *method, const char *name,
			 struct units *lognames,
			 unsigned long default_mask);

void log_unit_free (Log_method *method, Log_unit *log);

log_flags log_setflags(Log_method *log, log_flags flags);
log_flags log_getflags(Log_method *log);

void log_log (Log_unit *log, unsigned level, const char *fmt, ...)
d67 1
a67 1
void log_vlog(Log_unit *log, unsigned level, const char *fmt, va_list args)
d71 1
a71 6
unsigned log_get_mask (Log_unit *log);

void log_set_mask (Log_unit *log, unsigned mask);

void log_set_mask_str (Log_method *method, Log_unit *default_unit,
		       const char *str);
d73 1
a73 1
size_t log_mask2str (Log_method *method, Log_unit *unit, char *buf, size_t sz);
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d34 1
a34 1
/* $arla: log.h,v 1.12 2003/01/10 12:38:44 lha Exp $ */
d36 2
a37 2
#ifndef _ARLAUTIL_LOG_H
#define _ARLAUTIL_LOG_H 1
a41 4
#if !defined(__GNUC__) && !defined(__attribute__)
#define __attribute__(x)
#endif

d57 1
a57 1
void log_close (Log_method *logm);
d63 1
a63 1
void log_unit_free (Log_method *method, Log_unit *logu);
d65 2
a66 2
log_flags log_setflags(Log_method *logm, log_flags flags);
log_flags log_getflags(Log_method *logm);
d68 1
a68 1
void log_log (Log_unit *logu, unsigned level, const char *fmt, ...)
d72 1
a72 1
void log_vlog(Log_unit *logu, unsigned level, const char *fmt, va_list args)
d76 1
a76 1
unsigned log_get_mask (Log_unit *logu);
d78 1
a78 1
void log_set_mask (Log_unit *logu, unsigned mask);
d85 1
a85 1
#endif /* _ARLAUTIL_LOG_H */
@


