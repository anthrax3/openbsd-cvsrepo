head	1.7;
access;
symbols
	OPENBSD_5_2:1.6.0.22
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.20
	OPENBSD_5_0:1.6.0.18
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.16
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.14
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.10
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.12
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.8
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.6
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.4
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.2
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2012.08.23.06.21.55;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2007.05.26.00.36.04;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.44.13;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.41.25;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.16;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.18;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.18;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.36;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.07;	author hin;	state Exp;
branches;
next	;


desc
@@


1.7
log
@the afs src tree can go away
@
text
@/*
 * Interface to Volumeserver, 
 * reference /afs/nada.kth.se/misc/reference/programming/afs/shadow/
 *
 * $arla: volumeserver.xg,v 1.25 2002/08/05 16:46:14 lha Exp $
 */

package VOLSER_

%#include <fs_errors.h>

error-function conv_to_arla_errno

const VLDB_MAXSERVER		= 80;
const VOLSERVICE_PORT		= 7005;
const VOLSERVICE_ID		= 4;
const INVALID_BID		= 0;
const VOLSER_MAXVOLNAME		= 65;
const VOLSER_OLDMAXVOLNAME	= 32;
const VOLSER_MAX_REPSITES	= 7;
const VNAMESIZE			= 32;

const VOLCREATEVOLUME	= 100;
const VOLDELETEVOLUME	= 101;
const VOLRESTORE	= 102;
const VOLFORWARD	= 103;
const VOLENDTRANS	= 104;
const VOLCLONE		= 105;
const VOLSETFLAGS	= 106;
const VOLGETFLAGS	= 107;
const VOLTRANSCREATE	= 108;
const VOLDUMP		= 109;
const VOLGETNTHVOLUME	= 110;
const VOLSETFORWARDING	= 111;
const VOLGETNAME	= 112;
const VOLGETSTATUS	= 113;
const VOLSIGNALRESTORE	= 114;
const VOLLISTPARTITIONS	= 115;
const VOLLISTVOLUMES	= 116;
const VOLSETIDTYPES	= 117;
const VOLMONITOR	= 118;
const VOLPARTITIONINFO	= 119;
const VOLRECLONE	= 120;
const VOLLISTONEVOLUME	= 121;
const VOLNUKEVOLUME	= 122;
const VOLSETDATE	= 123;
const VOLXLISTVOLUMES	= 124;
const VOLXLISTONEVOL	= 125;
const VOLSETINFO	= 126;
const VOLXLISTPARTITIONS= 127;
const VOLFORWARDMULTIPLE= 128;

const PARTVALID	= 0x01;
const VOK	= 0x02;
const VBUSY	= 110;

const VOLSERTRELE_ERROR       = 1492325120;
const VOLSERNO_OP             = 1492325121;
const VOLSERREAD_DUMPERROR    = 1492325122;
const VOLSERDUMPERROR         = 1492325123;
const VOLSERATTACH_ERROR      = 1492325124;
const VOLSERILLEGAL_PARTITION = 1492325125;
const VOLSERDETACH_ERROR      = 1492325126;
const VOLSERBAD_ACCESS        = 1492325127;
const VOLSERVLDB_ERROR        = 1492325128;
const VOLSERBADNAME           = 1492325129;
const VOLSERVOLMOVED          = 1492325130;
const VOLSERBADOP             = 1492325131;
const VOLSERBADRELEASE        = 1492325132;
const VOLSERVOLBUSY           = 1492325133;
const VOLSERNO_MEMORY         = 1492325134;
const VOLSERNOVOL	      = 1492325135;
const VOLSERMULTIRWVOL        = 1492325136;
const VOLSERFAILEDOP          = 1492325137;

const ITOffline = 0x1;
const ITBusy = 0x2;
const ITReadOnly = 0x8;
const ITCreate = 0x10;
const ITCreateVolID = 0x1000;

const VTDeleteOnSalvage = 1;
const VTOutOfService = 2;
const VTDeleted = 4;

#if 0
struct volser_trans { 
    volser_trans *next;
    long tid;
    long time;
    long creationTime;
    long returnCode;
    long volid;
    long partition;
    long dumpTransId;
    long dumpSeq;   /* Not used */
    short refCount;
    short iflags;
    char vflags;    
    char tflags;
    char incremental;
    char lastProcName[30];
/*    struct rx_call *rxCallPtr; XXXXXXX BROKEN /lha */
};
#endif
struct volDescription {
    char volName[VOLSER_MAXVOLNAME];
    long volId;
    long volSize;
    long volFlags;
    long volCloneId;
};

struct partList {
    int partId[26];
    long partFlags[26];
};

struct volser_status {
    long volID;
    long nextUnique;
    long type;
    long parentID;
    long cloneID;
    long backupID;
    long restoredFromID;
    long maxQuota;
    long minQuota;
    long owner;
    long creationDate;
    long accessDate;
    long updateDate;
    long exprirationDate;
    long backupDate;
    long copyDate;
};

struct destServer {
    long destHost;
    long destPort;
    long destSSID;   /* currently always set to 1 */
};

struct volintInfo {
    char name[VNAMESIZE];
    long volid;
    long type;
    long backupID;
    long parentID;
    long cloneID;
    long status;
    long copyDate;
    char inUse;
    char needsSalvaged;
    char destroyMe;
    long creationDate;
    long accessDate;
    long updateDate;
    long backupDate;
    long dayUse;
    long filecount;
    long maxquota;
    long size;
    long flags;
    long spare0;
    long spare1;
    long spare2;
    long spare3;
};

struct xvolintInfo {
    char name[VNAMESIZE];
    long volid;
    long type;
    long backupID;
    long parentID;
    long cloneID;
    long status;
    long copyDate;
    char inUse;
    long creationDate;
    long accessDate;
    long updateDate;
    long backupDate;
    long dayUse;
    long filecount;
    long maxquota;
    long size;
    int32_t stat_reads[4];
    int32_t stat_writes[4];
    int32_t stat_fileSameAuthor[6];
    int32_t stat_fileDiffAuthor[6];
    int32_t stat_dirSameAuthor[6];
    int32_t stat_dirDiffAuthor[6];
};

/*
 * same site total, same site authenticated
 * diff site total, diff site authenticated
 */

/*
 * 0-60 s
 * 1-10 min
 * 10-60 min
 * 1-24 hour
 * 1-7 days
 * >7 days
 */

struct transDebugInfo {
    long tid;
    long time;
    long creationTime;
    long returnCode;
    long volid;
    long partition;
    short iflags;
    char vflags;
    char tflags;
    char lastProcName[30];
    long callValid;
    long readNext;
    long transmitNext;
    long lastSendTime;
    long lastReceiveTime;
};

struct pIDs {
    long partIds[26];		/* -1 if none */
};

struct diskPartition {
    char name[32];
    char devName[32];
    long lock_fd;
    long totalUsable;
    long free;
    long minFree;
};

struct restoreCookie {
    char name[32];
    long type;
    long clone;
    long parent;
};
  
typedef transDebugInfo transDebugEntries<>;
typedef volintInfo volEntries<>;
typedef xvolintInfo xvolEntries<>;
typedef int32_t part_entries<>;
typedef int32_t multi_results<>;

struct replica {
    int32_t trans_id;
    struct destServer destserver;
};

#define AFS_MAX_DESTINATIONS	255

typedef replica manyDests<AFS_MAX_DESTINATIONS>;

AFSVolCreateVolume(IN long partition,
		   IN string name,
		   IN long type,
		   IN long parent,
		   INOUT long *volid,
		   OUT long *trans) = VOLCREATEVOLUME;

AFSVolDeleteVolume(IN long trans) = VOLDELETEVOLUME;

AFSVolNukeVolume(IN long partID,
		 IN long volID) = VOLNUKEVOLUME;

AFSVolDump(IN long fromTrans,
	   IN long fromDate) split = VOLDUMP;

AFSVolSignalRestore(IN string name<>,
		    IN int type,
		    IN long pid,
		    IN long cloneid) = VOLSIGNALRESTORE;

AFSVolRestore(IN long toTrans,
	      IN long flags,
	      IN restoreCookie *cookie) split = VOLRESTORE;

AFSVolForward(IN int32_t fromTrans,
	      IN int32_t fromData,
	      IN struct destServer *destination,
	      IN long destTrans,
	      IN struct restoreCookie *cookie) = VOLFORWARD;

AFSVolClone(IN long trans,
	    IN long purgeVol,
	    IN long newType,
	    IN string newName,
	    INOUT long *newVol) = VOLCLONE;

AFSVolReClone(IN long tid,
	      IN long cloneID) = VOLRECLONE;

AFSVolSetForwarding(IN long tid,
		    IN long newsite) = VOLSETFORWARDING;

AFSVolTransCreate(IN long volume,
		  IN long partition,
		  IN long flags,
		  OUT long *trans) = VOLTRANSCREATE;

AFSVolEndTrans(IN long trans,
	       OUT long *rcode) = VOLENDTRANS;

AFSVolGetFlags(IN long trans,
	       OUT long *flags) = VOLGETFLAGS;

AFSVolSetFlags(IN long trans,
	       IN long flags) = VOLSETFLAGS;

AFSVolGetName(IN long tid,
	      OUT string tname<256>) = VOLGETNAME;

AFSVolGetStatus(IN long tid,
		OUT volser_status *status) = VOLGETSTATUS;

AFSVolSetIdsTypes(IN long tId,
		  IN string name<>,
		  IN long type,
		  IN long pId,
		  IN long cloneId,
		  IN long backupId) = VOLSETIDTYPES;

AFSVolSetDate(IN long tid,
	      IN long newDate) = VOLSETDATE;

AFSVolListPartitions(OUT struct pIDs *partIDs) = VOLLISTPARTITIONS;

AFSVolPartitionInfo(IN string name<>, 
		    OUT struct diskPartition *partition) = VOLPARTITIONINFO;

AFSVolListVolumes(IN long partID,
		  IN long flags,
		  OUT struct volEntries *resultEntries) = VOLLISTVOLUMES;

AFSVolListOneVolume(IN long partID,
		    IN long volid,
		    OUT struct volEntries *resultEntries) = VOLLISTONEVOLUME;

AFSVolGetNthVolume(IN long index,
		   OUT long *volume,
		   OUT long *partition) = VOLGETNTHVOLUME;

AFSVolMonitor(OUT transDebugEntries *result) = VOLMONITOR;
    
AFSVolXListVolumes(IN long partID,
		   IN long flags,
		   OUT struct xvolEntries *resultEntries) = VOLXLISTVOLUMES;

AFSVolXListOneVolume(IN long partID,
		     IN long volid,
		     OUT struct xvolEntries *resultEntries) = VOLXLISTONEVOL;

AFSVolSetInfo(IN long transid,
	      IN volintInfo *volinfo) = VOLSETINFO;

AFSVolXListPartitions(OUT part_entries *ent) = VOLXLISTPARTITIONS;

AFSVolForwardMultiple(IN int32_t fromTrans,
		      IN int32_t fromData,
		      IN manyDests *destinations,
		      IN long spare0,
		      IN struct restoreCookie *cookie,
		      OUT multi_results *results) = VOLFORWARDMULTIPLE;
@


1.6
log
@More comment typos from Diego Casati. Including winners like funtion, allmost,
oustside, seqencer, toghether, nessissary, etc.
@
text
@@


1.5
log
@Merge
@
text
@d141 1
a141 1
    long destSSID;   /* currently allways set to 1 */
@


1.4
log
@merge
@
text
@d5 1
a5 1
 * $KTH: volumeserver.xg,v 1.20 2000/06/01 23:59:02 ahltorp Exp $
a9 2
%#include <config.h>
%#include <roken.h>
d260 3
a262 1
typedef replica replicas<>;
d279 1
a279 1
AFSVolSignalRestore(IN char *name,
d297 1
a297 1
	    IN char *newName,
d327 1
a327 1
		  IN char *name,
d370 1
a370 1
		      IN replicas *destinations,
d373 1
a373 1
		      IN multi_results *results) = VOLFORWARDMULTIPLE;
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d5 1
a5 1
 * $Id: volumeserver.xg,v 1.20 2000/06/01 23:59:02 ahltorp Exp $
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@d5 1
a5 1
 * $Id: volumeserver.xg,v 1.17 1999/03/10 01:20:14 assar Exp $
d78 11
d107 1
a107 1

@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
 * $Id: volumeserver.xg,v 1.10 1998/04/07 15:08:50 mikeee Exp $
d10 67
a76 61
%#include <atypes.h>
%#include <rx/rx.h>
%#include <rx/rx_null.h>

const VLDB_MAXSERVER = 80;
const VOLSERVICE_PORT = 7005;
const VOLSERVICE_ID = 4;
const INVALID_BID = 0;
const VOLSER_MAXVOLNAME = 65;
const VOLSER_OLDMAXVOLNAME = 32;
const VOLSER_MAX_REPSITES = 7;
const VNAMESIZE = 32;


const VOLCREATEVOLUME = 100;
const VOLDELETEVOLUME = 101;
const VOLRESTORE = 102;
const VOLFORWARD = 103;
const VOLENDTRANS = 104;
const VOLCLONE = 105;
const VOLSETFLAGS = 106;
const VOLGETFLAGS = 107;
const VOLTRANSCREATE = 108;
const VOLDUMP = 109;
const VOLGETNTHVOLUME = 110;
const VOLSETFORWARDING = 111;
const VOLGETNAME = 112;
const VOLGETSTATUS = 113;
const VOLSIGRESTORE = 114;
const VOLLISTPARTITIONS = 115;
const VOLLISTVOLS = 116;
const VOLSETIDTYPES = 117;
const VOLMONITOR = 118;
const VOLDISKPART = 119;
const VOLRECLOSE = 120;
const VOLLISTONEVOL = 121;
const VOLNUKE = 122;
const VOLSETDATE = 123;

const PARTVALID = 0x01;
const VOK = 0x02;
const VBUSY = 110;

const VOLSERTRELE_ERROR       = 1492325120 ;
const VOLSERNO_OP             = 1492325121 ;
const VOLSERREAD_DUMPERROR    = 1492325122 ;
const VOLSERDUMPERROR         = 1492325123 ;
const VOLSERATTACH_ERROR      = 1492325124 ;
const VOLSERILLEGAL_PARTITION = 1492325125 ;
const VOLSERDETACH_ERROR      = 1492325126 ;
const VOLSERBAD_ACCESS        = 1492325127 ;
const VOLSERVLDB_ERROR        = 1492325128 ;
const VOLSERBADNAME           = 1492325129 ;
const VOLSERVOLMOVED          = 1492325130 ;
const VOLSERBADOP             = 1492325131 ;
const VOLSERBADRELEASE        = 1492325132 ;
const VOLSERVOLBUSY           = 1492325133 ;
const VOLSERNO_MEMORY         = 1492325134 ;
const VOLSERNOVOL	      = 1492325135 ;
const VOLSERMULTIRWVOL        = 1492325136 ;
const VOLSERFAILEDOP          = 1492325137 ;
d162 40
d207 1
a207 1
    long volid ;
d221 1
a221 1
    long partIds[26];
d242 8
d251 1
d254 40
a293 5
	     IN char *name,
	     IN long type,
	     IN long parent,
	     INOUT long *volid,
	     OUT long *trans) = 100 ;
d296 3
a298 3
	    IN long partition,
	    IN long flags,
	    OUT long *trans) = 108 ;
d301 1
a301 1
	 OUT long *rcode) = 104 ;
d304 1
a304 1
	 OUT long *flags) = 107 ;
d307 1
a307 1
	 IN long flags) = 106 ;
d310 11
a320 1
	      OUT string tname<256>) = 112 ;
d323 1
a323 1
	      IN long newDate) = 123 ;
d325 1
a325 1
AFSVolListPartitions(OUT struct pIDs *partIDs) = 115 ;
d328 1
a328 1
		    OUT struct diskPartition *partition) = 119 ;
d332 1
a332 1
		  OUT struct volEntries *resultEntries) = 116 ;
d335 6
a340 2
	      IN long volid,
	      OUT struct volEntries *resultEntries) = 121 ;
d342 1
a342 1
AFSVolMonitor(OUT transDebugEntries *result) = 118 ;
d344 19
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d5 1
a5 1
 * $KTH: volumeserver.xg,v 1.20 2000/06/01 23:59:02 ahltorp Exp $
d10 61
a70 77
%#include <config.h>
%#include <roken.h>
%#include <fs_errors.h>

error-function conv_to_arla_errno

const VLDB_MAXSERVER		= 80;
const VOLSERVICE_PORT		= 7005;
const VOLSERVICE_ID		= 4;
const INVALID_BID		= 0;
const VOLSER_MAXVOLNAME		= 65;
const VOLSER_OLDMAXVOLNAME	= 32;
const VOLSER_MAX_REPSITES	= 7;
const VNAMESIZE			= 32;

const VOLCREATEVOLUME	= 100;
const VOLDELETEVOLUME	= 101;
const VOLRESTORE	= 102;
const VOLFORWARD	= 103;
const VOLENDTRANS	= 104;
const VOLCLONE		= 105;
const VOLSETFLAGS	= 106;
const VOLGETFLAGS	= 107;
const VOLTRANSCREATE	= 108;
const VOLDUMP		= 109;
const VOLGETNTHVOLUME	= 110;
const VOLSETFORWARDING	= 111;
const VOLGETNAME	= 112;
const VOLGETSTATUS	= 113;
const VOLSIGNALRESTORE	= 114;
const VOLLISTPARTITIONS	= 115;
const VOLLISTVOLUMES	= 116;
const VOLSETIDTYPES	= 117;
const VOLMONITOR	= 118;
const VOLPARTITIONINFO	= 119;
const VOLRECLONE	= 120;
const VOLLISTONEVOLUME	= 121;
const VOLNUKEVOLUME	= 122;
const VOLSETDATE	= 123;
const VOLXLISTVOLUMES	= 124;
const VOLXLISTONEVOL	= 125;
const VOLSETINFO	= 126;
const VOLXLISTPARTITIONS= 127;
const VOLFORWARDMULTIPLE= 128;

const PARTVALID	= 0x01;
const VOK	= 0x02;
const VBUSY	= 110;

const VOLSERTRELE_ERROR       = 1492325120;
const VOLSERNO_OP             = 1492325121;
const VOLSERREAD_DUMPERROR    = 1492325122;
const VOLSERDUMPERROR         = 1492325123;
const VOLSERATTACH_ERROR      = 1492325124;
const VOLSERILLEGAL_PARTITION = 1492325125;
const VOLSERDETACH_ERROR      = 1492325126;
const VOLSERBAD_ACCESS        = 1492325127;
const VOLSERVLDB_ERROR        = 1492325128;
const VOLSERBADNAME           = 1492325129;
const VOLSERVOLMOVED          = 1492325130;
const VOLSERBADOP             = 1492325131;
const VOLSERBADRELEASE        = 1492325132;
const VOLSERVOLBUSY           = 1492325133;
const VOLSERNO_MEMORY         = 1492325134;
const VOLSERNOVOL	      = 1492325135;
const VOLSERMULTIRWVOL        = 1492325136;
const VOLSERFAILEDOP          = 1492325137;

const ITOffline = 0x1;
const ITBusy = 0x2;
const ITReadOnly = 0x8;
const ITCreate = 0x10;
const ITCreateVolID = 0x1000;

const VTDeleteOnSalvage = 1;
const VTOutOfService = 2;
const VTDeleted = 4;
a71 1
#if 0
d90 1
a90 1
#endif
a155 40
struct xvolintInfo {
    char name[VNAMESIZE];
    long volid;
    long type;
    long backupID;
    long parentID;
    long cloneID;
    long status;
    long copyDate;
    char inUse;
    long creationDate;
    long accessDate;
    long updateDate;
    long backupDate;
    long dayUse;
    long filecount;
    long maxquota;
    long size;
    int32_t stat_reads[4];
    int32_t stat_writes[4];
    int32_t stat_fileSameAuthor[6];
    int32_t stat_fileDiffAuthor[6];
    int32_t stat_dirSameAuthor[6];
    int32_t stat_dirDiffAuthor[6];
};

/*
 * same site total, same site authenticated
 * diff site total, diff site authenticated
 */

/*
 * 0-60 s
 * 1-10 min
 * 10-60 min
 * 1-24 hour
 * 1-7 days
 * >7 days
 */

d161 1
a161 1
    long volid;
d175 1
a175 1
    long partIds[26];		/* -1 if none */
a195 8
typedef xvolintInfo xvolEntries<>;
typedef int32_t part_entries<>;
typedef int32_t multi_results<>;

struct replica {
    int32_t trans_id;
    struct destServer destserver;
};
a196 1
typedef replica replicas<>;
d199 5
a203 40
		   IN string name,
		   IN long type,
		   IN long parent,
		   INOUT long *volid,
		   OUT long *trans) = VOLCREATEVOLUME;

AFSVolDeleteVolume(IN long trans) = VOLDELETEVOLUME;

AFSVolNukeVolume(IN long partID,
		 IN long volID) = VOLNUKEVOLUME;

AFSVolDump(IN long fromTrans,
	   IN long fromDate) split = VOLDUMP;

AFSVolSignalRestore(IN char *name,
		    IN int type,
		    IN long pid,
		    IN long cloneid) = VOLSIGNALRESTORE;

AFSVolRestore(IN long toTrans,
	      IN long flags,
	      IN restoreCookie *cookie) split = VOLRESTORE;

AFSVolForward(IN int32_t fromTrans,
	      IN int32_t fromData,
	      IN struct destServer *destination,
	      IN long destTrans,
	      IN struct restoreCookie *cookie) = VOLFORWARD;

AFSVolClone(IN long trans,
	    IN long purgeVol,
	    IN long newType,
	    IN char *newName,
	    INOUT long *newVol) = VOLCLONE;

AFSVolReClone(IN long tid,
	      IN long cloneID) = VOLRECLONE;

AFSVolSetForwarding(IN long tid,
		    IN long newsite) = VOLSETFORWARDING;
d206 3
a208 3
		  IN long partition,
		  IN long flags,
		  OUT long *trans) = VOLTRANSCREATE;
d211 1
a211 1
	       OUT long *rcode) = VOLENDTRANS;
d214 1
a214 1
	       OUT long *flags) = VOLGETFLAGS;
d217 1
a217 1
	       IN long flags) = VOLSETFLAGS;
d220 1
a220 11
	      OUT string tname<256>) = VOLGETNAME;

AFSVolGetStatus(IN long tid,
		OUT volser_status *status) = VOLGETSTATUS;

AFSVolSetIdsTypes(IN long tId,
		  IN char *name,
		  IN long type,
		  IN long pId,
		  IN long cloneId,
		  IN long backupId) = VOLSETIDTYPES;
d223 1
a223 1
	      IN long newDate) = VOLSETDATE;
d225 1
a225 1
AFSVolListPartitions(OUT struct pIDs *partIDs) = VOLLISTPARTITIONS;
d228 1
a228 1
		    OUT struct diskPartition *partition) = VOLPARTITIONINFO;
d232 1
a232 1
		  OUT struct volEntries *resultEntries) = VOLLISTVOLUMES;
d235 2
a236 6
		    IN long volid,
		    OUT struct volEntries *resultEntries) = VOLLISTONEVOLUME;

AFSVolGetNthVolume(IN long index,
		   OUT long *volume,
		   OUT long *partition) = VOLGETNTHVOLUME;
d238 1
a238 1
AFSVolMonitor(OUT transDebugEntries *result) = VOLMONITOR;
a239 19
AFSVolXListVolumes(IN long partID,
		   IN long flags,
		   OUT struct xvolEntries *resultEntries) = VOLXLISTVOLUMES;

AFSVolXListOneVolume(IN long partID,
		     IN long volid,
		     OUT struct xvolEntries *resultEntries) = VOLXLISTONEVOL;

AFSVolSetInfo(IN long transid,
	      IN volintInfo *volinfo) = VOLSETINFO;

AFSVolXListPartitions(OUT part_entries *ent) = VOLXLISTPARTITIONS;

AFSVolForwardMultiple(IN int32_t fromTrans,
		      IN int32_t fromData,
		      IN replicas *destinations,
		      IN long spare0,
		      IN struct restoreCookie *cookie,
		      IN multi_results *results) = VOLFORWARDMULTIPLE;
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d5 1
a5 1
 * $arla: volumeserver.xg,v 1.25 2002/08/05 16:46:14 lha Exp $
d10 2
d262 1
a262 3
#define AFS_MAX_DESTINATIONS	255

typedef replica manyDests<AFS_MAX_DESTINATIONS>;
d279 1
a279 1
AFSVolSignalRestore(IN string name<>,
d297 1
a297 1
	    IN string newName,
d327 1
a327 1
		  IN string name<>,
d370 1
a370 1
		      IN manyDests *destinations,
d373 1
a373 1
		      OUT multi_results *results) = VOLFORWARDMULTIPLE;
@


