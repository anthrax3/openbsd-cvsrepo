head	1.5;
access;
symbols
	OPENBSD_5_2:1.4.0.38
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.36
	OPENBSD_5_0:1.4.0.34
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.32
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.30
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.26
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.3.0.12
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.10
	OPENBSD_3_2_BASE:1.3
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2012.08.23.06.21.55;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.41.24;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.15;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.18;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.18;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.35;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.07;	author hin;	state Exp;
branches;
next	;


desc
@@


1.5
log
@the afs src tree can go away
@
text
@/* This is -*-c-*- */

/*
 * Interface to CM
 */

package RXAFSCB_

%#include <fs_errors.h>
%#include <fs.h>

error-function conv_to_arla_errno

/*
 * Interface
 */

#include "common.h"

struct AFSDBLockDesc {
    char waitStates;
    char exclLocked;
    short readersReading;
    short numWaiting;
    short spare;
    int pid_last_reader;
    int pid_writer;
    int src_indicator;
};

struct AFSDBLock {
    char name[16];
    struct AFSDBLockDesc lock;
};

struct AFSDBCacheEntry {
    int32_t addr;
    int32_t cell;                         /*Cell part of the fid*/
    AFSFid netFid;                      /*Network part of the fid*/
    int32_t Length;
    int32_t DataVersion;
    struct AFSDBLockDesc lock;
    int32_t callback;
    int32_t cbExpires;
    short refCount;
    short opens;
    short writers;
    char mvstat;
    char states;
};

const AFSCB_MAX_XSTAT_LONGS = 2048;
typedef int32_t AFSCB_CollData<AFSCB_MAX_XSTAT_LONGS>;
const AFSCB_XSTATSCOLL_CALL_INFO = 0;    /*CM call counting & info*/
const AFSCB_XSTATSCOLL_PERF_INFO = 1;    /*CM performance info*/
const AFSCB_XSTATSCOLL_FULL_PERF_INFO = 2;       /*CM performance info*/

const AFS_MAX_INTERFACE_ADDR  =  32;
struct interfaceAddr {          /* for multihomed clients */
    int         numberOfInterfaces;
    afsUUID     uuid;
    ASIS int32_t     addr_in[AFS_MAX_INTERFACE_ADDR]; /* interface addresses */
    ASIS int32_t     subnetmask[AFS_MAX_INTERFACE_ADDR]; /* subnet masks in net ord */
    int32_t     mtu[AFS_MAX_INTERFACE_ADDR]; /* MTU */
};

const AFSMAXCELLHOSTS = 8;	/*Max VLDB servers per cell*/

typedef int32_t serverList[AFSMAXCELLHOSTS];

typedef afs_uint32 cacheConfig<>;


CallBack (IN AFSCBFids *a_fidArrayP,
	  IN AFSCBs *a_callBackArrayP) = 204;

InitCallBackState () = 205;

Probe () =  206;

/* return 0 if ok, 1 if bad index, lock == lock number index */

GetLock(IN int32_t index, OUT AFSDBLock *lock) = 207;

/* return 0 if ok, 1 if bad index, cbentry == cbentry number index */

GetCE(IN int32_t index, OUT AFSDBCacheEntry *cbentry) = 208;

/* AFSCB_XSTAT_VERSION */

XStatsVersion(OUT int32_t *version) = 209;

GetXStats(IN int32_t client_version_num,
	  IN int32_t collection_number,
	  OUT int32_t *server_version_number, /* AFSCB_XSTAT_VERSION */
	  OUT int32_t *time,
	  OUT AFSCB_CollData *stats) = 210;

InitCallBackState2(OUT interfaceAddr *addr) = 211;

/* fill in interfaces et al in `addr' */

WhoAreYou(OUT interfaceAddr *addr) = 212;

/* to be done */

InitCallBackState3(IN afsUUID *serverUuid) = 213;

/* still there?  0 if match, !0 otherwise */

ProbeUUID(IN afsUUID *uuid) = 214;

GetCellServDB(IN afs_int32 cellIndex,
	      OUT string cellName<AFSNAMEMAX>,
	      OUT serverList *cellHosts) = 216;

GetLocalCell(OUT string cellName<AFSNAMEMAX>) = 217;

GetCacheConfig(IN afs_uint32 callerVersion,
	       OUT afs_uint32 *serverVersion,
	       OUT afs_uint32 *configCount,
	       OUT cacheConfig *config) = 218;

GetCellByNum(IN  int32_t cellNumber,
	     OUT string cellName<AFSNAMEMAX>,
	     OUT serverList *cellHosts) = 65537;

TellMeAboutYourself(OUT struct interfaceAddr *addr,
		    OUT Capabilities *capabilities) = 65538;
@


1.4
log
@Merge
@
text
@@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@a8 2
%#include <config.h>
%#include <roken.h>
d10 1
a13 2
/*%#include "fs.h"*/

d67 7
d112 18
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@d23 10
a32 2
#if 0
const AFSCBMAX = 50;
d34 4
a37 1
typedef AFSCallBack AFSCBs<AFSCBMAX>;
d39 30
a68 2
typedef AFSFid AFSCBFids<AFSCBMAX>;
#endif
d76 32
@


1.1
log
@Initial revision
@
text
@d9 6
a14 3
%#include <atypes.h>
%#include <rx/rx.h>
%#include <rx/rx_null.h>
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d9 3
a11 6
%#include <config.h>
%#include <roken.h>
%#include <fs_errors.h>

error-function conv_to_arla_errno

d20 7
a26 46
struct AFSDBLockDesc {
    char waitStates;
    char exclLocked;
    short readersReading;
    short numWaiting;
    short spare;
    int pid_last_reader;
    int pid_writer;
    int src_indicator;
};

struct AFSDBLock {
    char name[16];
    struct AFSDBLockDesc lock;
};

struct AFSDBCacheEntry {
    int32_t addr;
    int32_t cell;                         /*Cell part of the fid*/
    AFSFid netFid;                      /*Network part of the fid*/
    int32_t Length;
    int32_t DataVersion;
    struct AFSDBLockDesc lock;
    int32_t callback;
    int32_t cbExpires;
    short refCount;
    short opens;
    short writers;
    char mvstat;
    char states;
};

const AFSCB_MAX_XSTAT_LONGS = 2048;
typedef int32_t AFSCB_CollData<AFSCB_MAX_XSTAT_LONGS>;
const AFSCB_XSTATSCOLL_CALL_INFO = 0;    /*CM call counting & info*/
const AFSCB_XSTATSCOLL_PERF_INFO = 1;    /*CM performance info*/
const AFSCB_XSTATSCOLL_FULL_PERF_INFO = 2;       /*CM performance info*/

const AFS_MAX_INTERFACE_ADDR  =  32;
struct interfaceAddr {          /* for multihomed clients */
    int         numberOfInterfaces;
    afsUUID     uuid;
    ASIS int32_t     addr_in[AFS_MAX_INTERFACE_ADDR]; /* interface addresses */
    ASIS int32_t     subnetmask[AFS_MAX_INTERFACE_ADDR]; /* subnet masks in net ord */
    int32_t     mtu[AFS_MAX_INTERFACE_ADDR]; /* MTU */
};
a33 32

/* return 0 if ok, 1 if bad index, lock == lock number index */

GetLock(IN int32_t index, OUT AFSDBLock *lock) = 207;

/* return 0 if ok, 1 if bad index, cbentry == cbentry number index */

GetCE(IN int32_t index, OUT AFSDBCacheEntry *cbentry) = 208;

/* AFSCB_XSTAT_VERSION */

XStatsVersion(OUT int32_t *version) = 209;

GetXStats(IN int32_t client_version_num,
	  IN int32_t collection_number,
	  OUT int32_t *server_version_number, /* AFSCB_XSTAT_VERSION */
	  OUT int32_t *time,
	  OUT AFSCB_CollData *stats) = 210;

InitCallBackState2(OUT interfaceAddr *addr) = 211;

/* fill in interfaces et al in `addr' */

WhoAreYou(OUT interfaceAddr *addr) = 212;

/* to be done */

InitCallBackState3(IN afsUUID *serverUuid) = 213;

/* still there?  0 if match, !0 otherwise */

ProbeUUID(IN afsUUID *uuid) = 214;
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d9 2
a11 1
%#include <fs.h>
d15 2
a69 7
const AFSMAXCELLHOSTS = 8;	/*Max VLDB servers per cell*/

typedef int32_t serverList[AFSMAXCELLHOSTS];

typedef afs_uint32 cacheConfig<>;


a107 18

GetCellServDB(IN afs_int32 cellIndex,
	      OUT string cellName<AFSNAMEMAX>,
	      OUT serverList *cellHosts) = 216;

GetLocalCell(OUT string cellName<AFSNAMEMAX>) = 217;

GetCacheConfig(IN afs_uint32 callerVersion,
	       OUT afs_uint32 *serverVersion,
	       OUT afs_uint32 *configCount,
	       OUT cacheConfig *config) = 218;

GetCellByNum(IN  int32_t cellNumber,
	     OUT string cellName<AFSNAMEMAX>,
	     OUT serverList *cellHosts) = 65537;

TellMeAboutYourself(OUT struct interfaceAddr *addr,
		    OUT Capabilities *capabilities) = 65538;
@


