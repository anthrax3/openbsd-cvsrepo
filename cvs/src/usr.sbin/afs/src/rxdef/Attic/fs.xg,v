head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2012.08.23.06.21.55;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.44.13;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.41.24;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.15;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.18;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.18;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.36;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.07;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/* This is -*-c-*- */

/* $arla: fs.xg,v 1.18 2003/03/06 16:15:53 lha Exp $ */

/*
 * Interface to FS
 */

package RXAFS_

%#include <fs_errors.h>

error-function conv_to_arla_errno

#define AFSUUID_GENERATE

#include "common.h"

const FLUSHMAX = 10;
typedef int32_t ViceIds<FLUSHMAX>;
typedef int32_t IPAddrs<FLUSHMAX>;

/*
 * Interface
 */

FetchData (IN AFSFid *a_fidToFetchP,
	   IN long a_offset,
	   IN long a_lenInBytes,
	   OUT AFSFetchStatus *a_fidStatP,
	   OUT AFSCallBack *a_callBackP,
	   OUT AFSVolSync *a_volSyncP) split = 130;

FetchACL (IN AFSFid *a_dirFidP,
	  OUT AFSOpaque *a_ACLP,
	  OUT AFSFetchStatus *a_dirNewStatP,
	  OUT AFSVolSync *a_volSyncP) = 131;

FetchStatus (IN AFSFid *a_fidToStatP,
	     OUT AFSFetchStatus *a_currStatP,
	     OUT AFSCallBack *a_callBackP,
	     OUT AFSVolSync *a_volSyncP) = 132;

StoreData (IN AFSFid *a_fidToStoreP,
	   IN AFSStoreStatus *a_fidStatusP,
	   IN long a_offset,
	   IN long a_lenInBytes,
	   IN long a_fileLenInBytes,
	   OUT AFSFetchStatus *a_fidStatP,
	   OUT AFSVolSync *a_volSyncP) split = 133;

/*
 * Correct documentation wouldn't make this fun enough. Gaah.
 */
StoreACL (IN AFSFid *a_dirFidP,
	  IN AFSOpaque *a_ACLToStoreP,
	  OUT AFSFetchStatus *a_dirNewStatP,
	  OUT AFSVolSync *a_volSyncP) = 134;

StoreStatus (IN AFSFid *a_fidP,
	     IN AFSStoreStatus *a_currStatusP,
	     OUT AFSFetchStatus *a_srStatusP,
	     OUT AFSVolSync *a_volSyncP) = 135;

RemoveFile (IN AFSFid *a_dirFidP,
	    IN string a_name<AFSNAMEMAX>,
	    OUT AFSFetchStatus *a_srvStatusP,
	    OUT AFSVolSync *a_volSyncP) = 136;

CreateFile (IN AFSFid *DirFid,
	    IN string Name<AFSNAMEMAX>,
	    IN AFSStoreStatus *InStatus,
	    OUT AFSFid *OutFid,
	    OUT AFSFetchStatus *OutFidStatus,
	    OUT AFSFetchStatus *OutDirStatus,
	    OUT AFSCallBack *CallBack,
	    OUT AFSVolSync *a_volSyncP) = 137;

Rename (IN AFSFid *a_origDirFidP,
	IN string a_origNameP<AFSNAMEMAX>,
	IN AFSFid *a_newDirFidP,
	IN string a_newNameP<AFSNAMEMAX>,
	OUT AFSFetchStatus *a_origDirStatusP,
	OUT AFSFetchStatus *a_newDirStatusP,
	OUT AFSVolSync *a_volSyncP) = 138;

Symlink (IN AFSFid *a_dirFidP,
	 IN string a_nameP<AFSNAMEMAX>,
	 IN string a_linkContentsP<AFSNAMEMAX>,
	 IN AFSStoreStatus *a_origDirStatP,
	 OUT AFSFid *a_newFidP,
	 OUT AFSFetchStatus *a_newFidStatP,
	 OUT AFSFetchStatus *a_newDirStatP,
	 OUT AFSVolSync *a_volSyncP) = 139;

Link (IN AFSFid *a_dirFidP,
      IN string a_nameP<AFSNAMEMAX>,
      IN AFSFid *a_existingFidP,
      OUT AFSFetchStatus *a_newFidStatP,
      OUT AFSFetchStatus *a_newDirStatP,
      OUT AFSVolSync *a_volSyncP) = 140;

MakeDir (IN AFSFid *a_parentDirFidP,
	 IN string a_newDirNameP<AFSNAMEMAX>,
	 IN AFSStoreStatus *a_currStatP,
	 OUT AFSFid *a_newDirFidP,
	 OUT AFSFetchStatus *a_dirFidStatP,
	 OUT AFSFetchStatus *a_parentDirStatP,
	 OUT AFSCallBack *a_newDirCallBackP,
	 OUT AFSVolSync *a_volSyncP) = 141;

RemoveDir (IN AFSFid *a_parentDirStatP,
	   IN string a_dirNameP<AFSNAMEMAX>,
	   OUT AFSFetchStatus *a_newParentDirStatP,
	   OUT AFSVolSync *a_volSyncP) = 142;

GiveUpCallBacks (IN AFSCBFids *a_fidArrayP,
		 IN AFSCBs *a_callBackArrayP) = 147;

/*
 * fetch the status of volume `a_volIDP' into `a_volFetchStatP'.
 * a_volNameP is not filled in.
 */

GetVolumeStatus (IN long a_volIDP,
		 OUT AFSFetchVolumeStatus *a_volFetchStatP,
		 OUT string a_volNameP<AFSNAMEMAX>,
		 OUT string a_offLineMsgP<AFSOPAQUEMAX>,
		 OUT string a_motdP<AFSOPAQUEMAX>) = 149;

SetVolumeStatus (IN long a_volIDP,
		 IN AFSStoreVolumeStatus *a_volStoreStatP,
		 IN string a_volNameP<AFSNAMEMAX>,
		 IN string a_offLineMsgP<AFSOPAQUEMAX>,
		 IN string a_motdP<AFSOPAQUEMAX>) = 150;

GetRootVolume (OUT string a_rootVolNameP<AFSNAMEMAX>) = 151;

GetTime (OUT unsigned long *a_secondsP,
	 OUT unsigned long *a_uSecondsP) = 153;

NGetVolumeInfo	(IN  string VolumeName<AFSNAMEMAX>,
		 OUT AFSVolumeInfo *stuff) = 154;

BulkStatus	(IN  AFSCBFids *FidsArray,
		 OUT AFSBulkStats *StatArray,
		 OUT AFSCBs *CBArray,
		 OUT AFSVolSync *Sync) = 155;

SetLock		(IN  AFSFid *Fid, 
		 IN  ViceLockType Type, 
		 OUT AFSVolSync *Sync) = 156;

ExtendLock	(IN  AFSFid *Fid, 
		 OUT AFSVolSync *Sync) = 157;

ReleaseLock	(IN  AFSFid *Fid, 
		 OUT AFSVolSync *Sync) = 158;

FlushCPS	(IN  ViceIds *IdsArray,
		 IN IPAddrs *AddrsArray,
		 IN int32_t spare1,
	         OUT int32_t *spare2,
		 OUT int32_t *spare3) = 162;

#if 0
FetchData64	(IN  AFSFid *Fid, 
		 IN int64_t Pos, 
		 IN int64_t Length, 
		 OUT AFSFetchStatus *OutStatus, 
		 OUT AFSCallBack *CallBack, 
		 OUT AFSVolSync *Sync) split = 65537;

StoreData64	(IN  AFSFid *Fid, 
		 IN AFSStoreStatus *InStatus, 
		 IN uint64_t Pos, 
		 INT uint64_t Length, 
		 INT uint64_t FileLength, 
		 OUT AFSFetchStatus *OutStatus, 
		 AFSVolSync *Sync) split = 65538;
#endif

GiveUpAllCallBacks () = 65539 ;

GetCapabilities(OUT Capabilities *capabilities) = 65540;
@


1.5
log
@Merge
@
text
@@


1.4
log
@merge
@
text
@d3 1
a3 1
/* $KTH: fs.xg,v 1.13 2000/04/30 10:14:25 assar Exp $ */
a10 2
%#include <config.h>
%#include <roken.h>
d15 2
d19 4
d159 27
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d3 1
a3 1
/* $Id: fs.xg,v 1.13 2000/04/30 10:14:25 assar Exp $ */
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@d3 2
a45 1
	   OUT AFSCallBack *a_callBackP,
d115 5
@


1.1
log
@Initial revision
@
text
@d9 5
a13 3
%#include <atypes.h>
%#include <rx/rx.h>
%#include <rx/rx_null.h>
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@a2 2
/* $KTH: fs.xg,v 1.13 2000/04/30 10:14:25 assar Exp $ */

d9 3
a11 5
%#include <config.h>
%#include <roken.h>
%#include <fs_errors.h>

error-function conv_to_arla_errno
d42 1
a111 5

/*
 * fetch the status of volume `a_volIDP' into `a_volFetchStatP'.
 * a_volNameP is not filled in.
 */
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d3 1
a3 1
/* $arla: fs.xg,v 1.18 2003/03/06 16:15:53 lha Exp $ */
d11 2
a16 2
#define AFSUUID_GENERATE

a18 4
const FLUSHMAX = 10;
typedef int32_t ViceIds<FLUSHMAX>;
typedef int32_t IPAddrs<FLUSHMAX>;

a154 27

FlushCPS	(IN  ViceIds *IdsArray,
		 IN IPAddrs *AddrsArray,
		 IN int32_t spare1,
	         OUT int32_t *spare2,
		 OUT int32_t *spare3) = 162;

#if 0
FetchData64	(IN  AFSFid *Fid, 
		 IN int64_t Pos, 
		 IN int64_t Length, 
		 OUT AFSFetchStatus *OutStatus, 
		 OUT AFSCallBack *CallBack, 
		 OUT AFSVolSync *Sync) split = 65537;

StoreData64	(IN  AFSFid *Fid, 
		 IN AFSStoreStatus *InStatus, 
		 IN uint64_t Pos, 
		 INT uint64_t Length, 
		 INT uint64_t FileLength, 
		 OUT AFSFetchStatus *OutStatus, 
		 AFSVolSync *Sync) split = 65538;
#endif

GiveUpAllCallBacks () = 65539 ;

GetCapabilities(OUT Capabilities *capabilities) = 65540;
@


