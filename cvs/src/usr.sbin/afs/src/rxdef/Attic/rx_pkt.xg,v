head	1.2;
access;
symbols
	OPENBSD_5_2:1.1.0.54
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.52
	OPENBSD_5_0:1.1.0.50
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.48
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.46
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.42
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.44
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.40
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.38
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.36
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.34
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.32
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.30
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.28
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.26
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.24
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.22
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.20
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.18
	OPENBSD_3_4_BASE:1.1
	arla-20030805:1.1.1.1
	OPENBSD_3_3:1.1.0.16
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.14
	OPENBSD_3_2_BASE:1.1
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.12
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.10
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.8
	OPENBSD_2_8:1.1.0.6
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2012.08.23.06.21.55;	author deraadt;	state dead;
branches;
next	1.1;

1.1
date	99.04.30.01.59.15;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.36;	author hin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@the afs src tree can go away
@
text
@/* rx_pkt.xg,v 1.3 1994/12/27 03:37:04 assar Exp */

/* header of a RPC packet */

enum rx_header_type {
     HT_DATA = 1,
     HT_ACK = 2,
     HT_BUSY = 3,
     HT_ABORT = 4,
     HT_ACKALL = 5,
     HT_CHAL = 6,
     HT_RESP = 7,
     HT_DEBUG = 8
};

/* For flags in header */

enum rx_header_flag {
     HF_CLIENT_INITIATED = 1,
     HF_REQ_ACK = 2,
     HF_LAST = 4,
     HF_MORE = 8
};

%#define MAXCALLS 4

%#define CALL_MASK (MAXCALLS-1)
%#define CONNID_MASK (~(MAXCALLS-1))

const RX_HEADER_SIZE=28;

struct rx_header {
     unsigned epoch;
     unsigned connid;		/* And channel ID */
     unsigned callid;
     unsigned seqno;
     unsigned serialno;
     u_char type;
     u_char flags;
     u_char status;
     u_char secindex;
     u_short reserved;	/* ??? verifier? */
     u_short serviceid;
/* This should be the other way around according to everything but */
/* tcpdump */
};

enum rx_ack_reason {
     RX_ACK_REQUESTED = 1, 
     RX_ACK_DUPLICATE = 2,
     RX_ACK_OUT_OF_SEQUENCE = 3,
     RX_ACK_EXEEDS_WINDOW = 4,
     RX_ACK_NOSPACE = 5,
     RX_ACK_PING = 6,
     RX_ACK_PING_RESPONSE = 7,
     RX_ACK_DELAY = 8
};

enum rx_ack_type {
     RX_ACK_TYPE_NACK = 0,
     RX_ACK_TYPE_ACK = 1
};

const RXMAXACKS=255;

struct rx_ack_header {
     u_short bufferspace;	/* # of packet buffers available */
     u_short maxskew;
     u_long firstpacket;	/* First packet in acks below */
     u_long prevpacket;
     u_long serial;		/* Packet that prompted this one */
     u_char reason;		/* rx_ack_reason */
/*     u_char nacks;*/		/* # of acks */
     u_char acks<u_char>;
/*     u_char acks[RXMAXACKS];*/	/* acks (rx_ack_type) */
};

@


1.1
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@@

