head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2012.08.23.06.21.55;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.44.13;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.41.24;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.15;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.18;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.18;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.36;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.07;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/* This is -*-c-*- */

/*
 * Interface to PTS
 */

package PR_

%#include <fs_errors.h>

error-function conv_to_arla_errno

/*
 * Interface
 */


/* Opcodes */

const PRINEWUSER = 500;
const PRWHEREISIT = 501;
const PRDUMPENTRY = 502;
const PRADDTOGROUP = 503;
const PRNAMETOUID = 504;
const PRIDTONAME = 505;
const PRDELETE = 506;
const PRREMOVEFROMGROUP = 507;
const PRGETCPS = 508;
const PRNEWENTRY = 509;
const PRLISTMAX = 510;
const PRSETMAX = 511;
const PRLISTENTRY = 512;
const PRCHANGEENTRY = 513;
const PRLISTELEMENTS = 514;
const PROSAMEMBEROF = 515;
const PRSETFIELDSENTRY = 516;
const PRLISTOWNED = 517;

/* Constants */

const PR_MAXNAMELEN = 64;
const PR_MAXGROUPS = 5000;
const PR_MAXLIST = 5000;
const PRSIZE = 10;
const COSIZE = 39;
const PRSRV = 73;
const ENTRYSIZE = 192;
const HASHSIZE = 8191;

const PRDBVERSION = 0;

/* Bits for PR_SetFieldsEntry() */

const PR_SF_NGROUPS = 0x80000000;
const PR_SF_NUSERS = 0x40000000;
const PR_SF_ALLBITS = 0xff;

/* Reserved IDs */
const PR_SYSADMINID = -204;
const PR_ANYUSERID = -101;
const PR_AUTHUSERID = -102;
const PR_ANONYMOUSID = 32766;
const PR_BADID = 0x80000000;

/* Bits for struct prentry flags */
const PRTYPE = 0x3f;
const PRFREE = 1;
const PRGRP = 2;
const PRCONT = 4;
const PRCELL = 8;
const PRFOREIGN = 16;
const PRINST = 32;
const PRUSER = 0;

const PRACCESS = 0x40;
const PRQUOTA = 0x80;

/* Privacy Bits */

const PRP_REMOVE_MEM = 0x010000;
const PRP_ADD_MEM    = 0x020000;
const PRP_ADD_ANY    = 0x040000;
const PRP_MEMBER_MEM = 0x080000;
const PRP_MEMBER_ANY = 0x100000;
const PRP_OWNED_ANY  = 0x200000;
const PRP_STATUS_MEM = 0x400000;
const PRP_STATUS_ANY = 0x800000;

/* Misc */
const PRSUCCESS = 0;
const PR_REMEMBER_TIMES = 1;


struct prheader {
    long version;
    long headerSize;
    long freePtr;
    long eofPtr;
    long maxGroup;
    long maxID;
    long maxForeign;
    long maxInst;
    long orphan;
    long usercount;
    long groupcount;
    long foreigncount;
    long instcount;
    long reserved[5];
    long nameHash[HASHSIZE];
    long idHash[HASHSIZE];
};

struct prheader_disk {
    long version;
    long headerSize;
    long maxGroup;
    long maxID;
    long orphan<>;
    long usercount;
    long groupcount;
};

struct prentry {
    long flags;
    long id;
    long cellid;
    long next;
    long reserved[5];
    long entries[PRSIZE];
    long nextID;
    long nextName;
    long owner;
    long creator;
    long ngroups;
    long nusers;
    long count;
    long instance;
    long owned;
    long nextOwned;
    long parent;
    long sibling;
    long child;
    char name[PR_MAXNAMELEN];
};

struct prentry_disk {
    long flags;
    long id;
    long cellid;
    long owner;
    long creator;
    long ngroups;
    long owned<PR_MAXGROUPS>;
    string name<PR_MAXNAMELEN>;
    long entries<PR_MAXGROUPS>;
};

struct prdebugentry {
    long flags;
    long id;
    long cellid;
    long next;
    long reserved[5];
    long entries[PRSIZE];
    long nextID;
    long nextname;
    long owner;
    long creator;
    long ngroups;
    long nusers;
    long count;
    long instance;
    long owned;
    long nextOwned;
    long parent;
    long sibling;
    long child;
    char name[PR_MAXNAMELEN];
};

struct prcheckentry {
    long flags;
    long id;
    long owner;
    long creator;
    long ngroups;
    long nusers;
    long count;
    long reserved[5];
    char name[PR_MAXNAMELEN];
};


typedef char prname[PR_MAXNAMELEN];

typedef prname namelist<PR_MAXLIST>;

typedef long idlist<PR_MAXLIST>;

typedef long prlist<PR_MAXGROUPS>;


/* Error codes */

const PREXIST        = 267264 ;
const PRIDEXIST      = 267265 ;
const PRNOIDS        = 267266 ;
const PRDBFAIL       = 267267 ;
const PRNOENT        = 267268 ;
const PRPERM         = 267269 ;
const PRNOTGROUP     = 267270 ;
const PRNOTUSER      = 267271 ;
const PRBADNAM       = 267272 ;
const PRBADARG       = 267273 ;
const PRNOMORE       = 267274 ;
const PRDBBAD        = 267275 ;
const PRGROUPEMPTY   = 267276 ;
const PRINCONSISTENT = 267277 ;
const PRBADDR        = 267278 ;
const PRTOOMANY      = 267279 ;


NameToID(IN namelist *nlist,
	 OUT idlist *ilist) = 504;

IDToName(IN idlist *ilist,
	 OUT namelist *nlist) = 505;

NewEntry(IN string name<PR_MAXNAMELEN>,
	 IN long flag,
	 IN long oid,
	 OUT long *id) = 509;

INewEntry(IN string name<PR_MAXNAMELEN>,
	  IN long id,
	  IN long oid) = 500;

ListEntry(IN long id,
	  OUT struct prcheckentry *entry) = 512;

DumpEntry(IN long pos,
	  OUT struct prdebugentry *entry) = 502;

ChangeEntry(IN long id,
	    IN string name<PR_MAXNAMELEN>,
	    IN long oid,
	    IN long newid) = 513;

SetFieldsEntry(IN long id,
	       IN long mask,
	       IN long flags,
	       IN long ngroups,
	       IN long nusers,
	       IN long spare1,
	       IN long spare2) = 516;

/*
 * Group/entries that can't be deleted: SYSADMINID, ANYUSERID,
 * AUTHUSERID, ANONYMOUSID. Error returned is PRPERM.
 *
 * Rights: member of SYSADMINID, or owner to entry, or member of the
 * owner to `id'.
 *
 * Sucess: PRSUCCESS.
 */

Delete(IN long id) = 506;

WhereIsIt(IN long id,
	  OUT long *ps) = 501;

AddToGroup(IN long uid,
	   IN long gid) = 503;

RemoveFromGroup(IN long id,
		IN long gid) = 507;

ListMax(OUT long *uid,
	OUT long *gid) = 510;

SetMax(IN long uid,
       IN long gflag) = 511;

ListElements(IN long id,
	     OUT prlist *elist,
	     OUT long *over) = 514;

GetCPS(IN long id,
       OUT prlist *elist,
       OUT long *over) = 508;

ListOwned(IN long id,
	  OUT prlist *elist,
	  INOUT long *over) = 517;

IsAMemberOf(IN long uid,
	    IN long gid,
	    OUT long *flag) = 515;



/* the end */
@


1.5
log
@Merge
@
text
@@


1.4
log
@merge
@
text
@a8 2
%#include <config.h>
%#include <roken.h>
d113 10
a149 5
    long next;
    long reserved[5];
    long entries[PRSIZE];
    long nextID;
    long nextName;
d153 1
a153 8
    long nusers;
    long count;
    long instance;
    long owned;
    long nextOwned;
    long parent;
    long sibling;
    long child;
d155 1
a155 9
};

struct contentry {
    long flags;
    long id;
    long cellid;
    long next;
    long reserved[5];
    long entries[COSIZE];
d256 10
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d296 1
a296 1
	  OUT long *over) = 517;
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@d61 5
a65 5
const SYSADMINID = -204;
const ANYUSERID = -101;
const AUTHUSERID = -102;
const ANONYMOUSID = 32766;
const PRBADID = 0x80000000;
d246 1
a246 1
INewEntry(IN char name[PR_MAXNAMELEN],
@


1.1
log
@Initial revision
@
text
@d9 3
a11 3
%#include <atypes.h>
%#include <rx/rx.h>
%#include <rx/rx_null.h>
d13 1
d241 1
a241 1
NewEntry(IN char name[PR_MAXNAMELEN],
d257 1
a257 1
	    IN char name[PR_MAXNAMELEN],
d261 7
a267 7
SetFieldesEntry(IN long id,
		IN long mask,
		IN long flags,
		IN long ngroups,
		IN long nusers,
		IN long spare1,
		IN long spare2) = 516;
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d9 3
a11 3
%#include <config.h>
%#include <roken.h>
%#include <fs_errors.h>
a12 1
error-function conv_to_arla_errno
d60 5
a64 5
const PR_SYSADMINID = -204;
const PR_ANYUSERID = -101;
const PR_AUTHUSERID = -102;
const PR_ANONYMOUSID = 32766;
const PR_BADID = 0x80000000;
d240 1
a240 1
NewEntry(IN string name<PR_MAXNAMELEN>,
d245 1
a245 1
INewEntry(IN string name<PR_MAXNAMELEN>,
d256 1
a256 1
	    IN string name<PR_MAXNAMELEN>,
d260 7
a266 7
SetFieldsEntry(IN long id,
	       IN long mask,
	       IN long flags,
	       IN long ngroups,
	       IN long nusers,
	       IN long spare1,
	       IN long spare2) = 516;
d295 1
a295 1
	  INOUT long *over) = 517;
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d9 2
a114 10
struct prheader_disk {
    long version;
    long headerSize;
    long maxGroup;
    long maxID;
    long orphan<>;
    long usercount;
    long groupcount;
};

d142 5
d150 8
a157 1
    long owned<PR_MAXGROUPS>;
d159 9
a167 1
    long entries<PR_MAXGROUPS>;
a267 10

/*
 * Group/entries that can't be deleted: SYSADMINID, ANYUSERID,
 * AUTHUSERID, ANONYMOUSID. Error returned is PRPERM.
 *
 * Rights: member of SYSADMINID, or owner to entry, or member of the
 * owner to `id'.
 *
 * Sucess: PRSUCCESS.
 */
@


