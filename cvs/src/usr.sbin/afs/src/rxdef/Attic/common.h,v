head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.08.23.06.21.55;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.44.13;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.41.24;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.15;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.18;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.18;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.35;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.07;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/*
 * Common defintions used by several *.xg files
 */

/* $arla: common.h,v 1.19 2003/03/06 20:39:47 lha Exp $ */

%#ifndef _COMMON_
%#define _COMMON_

const LockRead = 0;
const LockWrite	= 1;
const LockExtend = 2;
const LockRelease = 3;

const AFSNAMEMAX = 256;

const RWVOL   = 0;
const ROVOL   = 1;
const BACKVOL = 2;

struct AFSFid {
     uint32_t Volume;
     uint32_t Vnode;
     uint32_t Unique;
};

struct VenusFid {
     int32_t Cell;
     AFSFid fid;
};

struct AFSCallBack {
     uint32_t CallBackVersion;
     uint32_t ExpirationTime;
     uint32_t CallBackType;
};

enum CallBackType { CBEXCLUSIVE = 1, CBSHARED = 2, CBDROPPED = 3};

const CALLBACK_VERSION = 1;

struct AFSVolSync {
     uint32_t spare1;
     uint32_t spare2;
     uint32_t spare3;
     uint32_t spare4;
     uint32_t spare5;
     uint32_t spare6;
};

const TYPE_FILE = 1;
const TYPE_DIR  = 2;
const TYPE_LINK = 3;

struct AFSFetchStatus {
     uint32_t InterfaceVersion;
     uint32_t FileType;
     uint32_t LinkCount;
     uint32_t Length;
     uint32_t DataVersion;
     uint32_t Author;
     uint32_t Owner;
     uint32_t CallerAccess;
     uint32_t AnonymousAccess;
     uint32_t UnixModeBits;
     uint32_t ParentVnode;
     uint32_t ParentUnique;
     uint32_t SegSize;
     uint32_t ClientModTime;
     uint32_t ServerModTime;
     uint32_t Group;
     uint32_t SyncCount;
     uint32_t DataVersionHigh;	/* For AFS/DFS translator */
     uint32_t LockCount;
     uint32_t LengthHigh;
     uint32_t ErrorCode;
};

/*
 * Things in AFSStoreStatus.mask
 */

const SS_MODTIME     = 0x01 ;
const SS_OWNER       = 0x02 ;
const SS_GROUP       = 0x04 ;
const SS_MODEBITS    = 0x08 ;
const SS_SEGSIZE     = 0x10 ;
const SS_FSYNC       = 0x400; /* 1024 */


struct AFSStoreStatus {
     uint32_t Mask;
     uint32_t ClientModTime;
     uint32_t Owner;
     uint32_t Group;
     uint32_t UnixModeBits;
     uint32_t SegSize;
};

struct AFSFetchVolumeStatus {
    int32_t   Vid;
    int32_t   ParentId;
    char      Online;
    char      InService;
    char      Blessed;
    char      NeedsSalvage;
    int32_t   Type;
    int32_t   MinQuota;
    int32_t   MaxQuota;
    int32_t   BlocksInUse;
    int32_t   PartBlocksAvail;
    int32_t   PartMaxBlocks;
};

struct AFSStoreVolumeStatus {
    int32_t   Mask;
    int32_t   MinQuota;
    int32_t   MaxQuota;
};

const AFS_SETMINQUOTA = 1;
const AFS_SETMAXQUOTA = 2;

const AFSOPAQUEMAX = 1024;

typedef opaque AFSOpaque<AFSOPAQUEMAX>;

typedef int32_t ViceLockType;

const AFSCBMAX = 50;

typedef AFSCallBack AFSCBs<AFSCBMAX>;
typedef AFSFetchStatus AFSBulkStats<AFSCBMAX>;
typedef AFSFid AFSCBFids<AFSCBMAX>;

/* Definitions for ACLs */

const PRSFS_READ       =  1 ; /* Read files */
const PRSFS_WRITE      =  2 ; /* Write files & write-lock existing files */
const PRSFS_INSERT     =  4 ; /* Insert & write-lock new files */
const PRSFS_LOOKUP     =  8 ; /* Enumerate files and examine ACL */
const PRSFS_DELETE     = 16 ; /* Remove files */
const PRSFS_LOCK       = 32 ; /* Read-lock files */
const PRSFS_ADMINISTER = 64 ; /* Set access list of directory */

struct AFSVolumeInfo {
    uint32_t  Vid;
    int32_t   Type;
    uint32_t  Type0;
    uint32_t  Type1;
    uint32_t  Type2;
    uint32_t  Type3;
    uint32_t  Type4;
    uint32_t  ServerCount;
    uint32_t  Server0;
    uint32_t  Server1;
    uint32_t  Server2;
    uint32_t  Server3;
    uint32_t  Server4;
    uint32_t  Server5;
    uint32_t  Server6;
    uint32_t  Server7;
    uint16_t  Port0;
    uint16_t  Port1;
    uint16_t  Port2;
    uint16_t  Port3;
    uint16_t  Port4;
    uint16_t  Port5;
    uint16_t  Port6;
    uint16_t  Port7;
};

#include "afsuuid.h"

const AFSCAPABILITIESMAX = 196;

typedef int32_t Capabilities<AFSCAPABILITIESMAX>;

%#endif /* _COMMON_ */
@


1.5
log
@Merge
@
text
@@


1.4
log
@merge
@
text
@d5 1
a5 1
/* $KTH: common.h,v 1.12 2000/11/03 10:09:48 lha Exp $ */
d17 4
d22 3
a24 3
     unsigned long Volume;
     unsigned long Vnode;
     unsigned long Unique;
d28 1
a28 1
     long Cell;
d33 3
a35 3
     unsigned long CallBackVersion;
     unsigned long ExpirationTime;
     unsigned long CallBackType;
d43 6
a48 6
     unsigned spare1;
     unsigned spare2;
     unsigned spare3;
     unsigned spare4;
     unsigned spare5;
     unsigned spare6;
d56 21
a76 21
     unsigned long InterfaceVersion;
     unsigned long FileType;
     unsigned long LinkCount;
     unsigned long Length;
     unsigned long DataVersion;
     unsigned long Author;
     unsigned long Owner;
     unsigned long CallerAccess;
     unsigned long AnonymousAccess;
     unsigned long UnixModeBits;
     unsigned long ParentVnode;
     unsigned long ParentUnique;
     unsigned long SegSize;
     unsigned long ClientModTime;
     unsigned long ServerModTime;
     unsigned long Group;
     unsigned long SyncCount;
     unsigned spare1;
     unsigned spare2;
     unsigned spare3;
     unsigned spare4;
d92 6
a97 6
     unsigned long Mask;
     unsigned long ClientModTime;
     unsigned long Owner;
     unsigned long Group;
     unsigned long UnixModeBits;
     unsigned long SegSize;
d121 3
d128 1
a128 1
typedef long ViceLockType;
d147 24
a170 33
    u_long  Vid;
    long    Type;
    u_long  Type0;
    u_long  Type1;
    u_long  Type2;
    u_long  Type3;
    u_long  Type4;
    u_long  ServerCount;
    u_long  Server0;
    u_long  Server1;
    u_long  Server2;
    u_long  Server3;
    u_long  Server4;
    u_long  Server5;
    u_long  Server6;
    u_long  Server7;
    unsigned short Port0;
    unsigned short Port1;
    unsigned short Port2;
    unsigned short Port3;
    unsigned short Port4;
    unsigned short Port5;
    unsigned short Port6;
    unsigned short Port7;
};

struct afsUUID {
     u_long time_low;
     u_short time_mid;
     u_short time_hi_and_version;
     char clock_seq_hi_and_reserved;
     char clock_seq_low;
     char node[6];
d172 6
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d5 1
a5 1
/* $Id: common.h,v 1.11 1999/10/26 07:30:39 lha Exp $ */
d35 2
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@a0 1
/*	$OpenBSD$	*/
d2 1
a2 1
 * Common defintions for cb.xg and fs.xg
d5 1
a5 1
/* $KTH: common.h,v 1.9 1998/10/31 02:29:18 lha Exp $ */
d82 2
d164 8
a171 2


@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
/* $KTH: common.h,v 1.8 1998/09/03 18:47:29 lha Exp $ */
d82 1
a82 1
const SS_SEGSIZE     = 0x0F ;
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d3 1
a3 1
 * Common defintions used by several *.xg files
d6 1
a6 1
/* $KTH: common.h,v 1.12 2000/11/03 10:09:48 lha Exp $ */
a36 2
const CALLBACK_VERSION = 1;

d82 1
a82 3
const SS_SEGSIZE     = 0x10 ;
const SS_FSYNC       = 0x400; /* 1024 */

d163 2
a164 8
struct afsUUID {
     u_long time_low;
     u_short time_mid;
     u_short time_hi_and_version;
     char clock_seq_hi_and_reserved;
     char clock_seq_low;
     char node[6];
};
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d5 1
a5 1
/* $arla: common.h,v 1.19 2003/03/06 20:39:47 lha Exp $ */
a16 4
const RWVOL   = 0;
const ROVOL   = 1;
const BACKVOL = 2;

d18 3
a20 3
     uint32_t Volume;
     uint32_t Vnode;
     uint32_t Unique;
d24 1
a24 1
     int32_t Cell;
d29 3
a31 3
     uint32_t CallBackVersion;
     uint32_t ExpirationTime;
     uint32_t CallBackType;
d39 6
a44 6
     uint32_t spare1;
     uint32_t spare2;
     uint32_t spare3;
     uint32_t spare4;
     uint32_t spare5;
     uint32_t spare6;
d52 21
a72 21
     uint32_t InterfaceVersion;
     uint32_t FileType;
     uint32_t LinkCount;
     uint32_t Length;
     uint32_t DataVersion;
     uint32_t Author;
     uint32_t Owner;
     uint32_t CallerAccess;
     uint32_t AnonymousAccess;
     uint32_t UnixModeBits;
     uint32_t ParentVnode;
     uint32_t ParentUnique;
     uint32_t SegSize;
     uint32_t ClientModTime;
     uint32_t ServerModTime;
     uint32_t Group;
     uint32_t SyncCount;
     uint32_t DataVersionHigh;	/* For AFS/DFS translator */
     uint32_t LockCount;
     uint32_t LengthHigh;
     uint32_t ErrorCode;
d88 6
a93 6
     uint32_t Mask;
     uint32_t ClientModTime;
     uint32_t Owner;
     uint32_t Group;
     uint32_t UnixModeBits;
     uint32_t SegSize;
a116 3
const AFS_SETMINQUOTA = 1;
const AFS_SETMAXQUOTA = 2;

d121 1
a121 1
typedef int32_t ViceLockType;
d140 33
a172 24
    uint32_t  Vid;
    int32_t   Type;
    uint32_t  Type0;
    uint32_t  Type1;
    uint32_t  Type2;
    uint32_t  Type3;
    uint32_t  Type4;
    uint32_t  ServerCount;
    uint32_t  Server0;
    uint32_t  Server1;
    uint32_t  Server2;
    uint32_t  Server3;
    uint32_t  Server4;
    uint32_t  Server5;
    uint32_t  Server6;
    uint32_t  Server7;
    uint16_t  Port0;
    uint16_t  Port1;
    uint16_t  Port2;
    uint16_t  Port3;
    uint16_t  Port4;
    uint16_t  Port5;
    uint16_t  Port6;
    uint16_t  Port7;
a173 6

#include "afsuuid.h"

const AFSCAPABILITIESMAX = 196;

typedef int32_t Capabilities<AFSCAPABILITIESMAX>;
@


