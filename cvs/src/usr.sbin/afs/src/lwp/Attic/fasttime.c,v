head	1.5;
access;
symbols
	OPENBSD_5_2:1.4.0.38
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.36
	OPENBSD_5_0:1.4.0.34
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.32
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.30
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.26
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.1.1.0.8
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.6
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2012.08.23.06.21.52;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	2003.08.05.09.07.34;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.07.04.41.27;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.11.14.41.08;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.11;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.11;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.29;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.04;	author hin;	state Exp;
branches;
next	;


desc
@@


1.5
log
@the afs src tree can go away
@
text
@/*
****************************************************************************
*        Copyright IBM Corporation 1988, 1989 - All Rights Reserved        *
*                                                                          *
* Permission to use, copy, modify, and distribute this software and its    *
* documentation for any purpose and without fee is hereby granted,         *
* provided that the above copyright notice appear in all copies and        *
* that both that copyright notice and this permission notice appear in     *
* supporting documentation, and that the name of IBM not be used in        *
* advertising or publicity pertaining to distribution of the software      *
* without specific, written prior permission.                              *
*                                                                          *
* IBM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL *
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL IBM *
* BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY      *
* DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER  *
* IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING   *
* OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.    *
****************************************************************************
*/
/*
 * fasttime.c -- Get the time of day quickly by mapping the kernel's
 *	         time of day variable.
 *
 * David Nichols
 *  6 January 1986
 *
 * Modification History
 * 3/21/86:  Added FT_ApproxTime which returns the last time
 *           in seconds returned by RT_FastTime.  The intent is to give
 *           routines which aren't too concerned about the exact time
 *           fast access to the time, even on kernels without mmap.
 *           - Bob Sidebotham.
 * 4/2/86:   Fixed my previous mod and fixed FT_Init so it doesn't initialize
 *	     a second time if explicitly called after being implicitly called.
 *	     This saves a (precious) file descriptor.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
RCSID("$arla: fasttime.c,v 1.10 2002/12/20 12:54:55 lha Exp $");
#endif

#include <stdio.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/file.h>
#ifdef HAVE_SYS_MMAN_H
#include <sys/mman.h>
#endif

#ifdef HAVE_NLIST_H
#include <nlist.h>
#else
#ifdef HAVE_LIBELF_NLIST_H
#include <libelf/nlist.h>
#endif
#endif 

#include "timer.h"

#define TRUE	1
#define FALSE	0

static enum InitState {
    notTried, tried, done
} initState = notTried;

/* last time returned by RT_FastTime. Used to implement FT_ApproxTime */
struct timeval FT_LastTime;


/*
 * Call this to get the memory mapped.  It will return -1 if anything went
 * wrong.  In that case, calls to FT_GetTimeOfDay will call gettimeofday
 * instead.  If printErrors is true, errors in initialization will cause
 * error messages to be printed on stderr.  If notReally is true, then
 * things are set up so that all calls to FT_GetTimeOfDay call gettimeofday.
 * You might want this if your program won't run too long and the nlist
 * call is too expensive.  Yeah, it's pretty horrible.
 */
int
FT_Init(int printErrors, int notReally)
{

    /*
     * This is in case explicit initialization occurs after automatic
     * initialization
     */
    if (initState != notTried && !notReally)
	return (initState == done ? 0 : -1);

    initState = tried;
    if (notReally)
	return 0;		       /* fake success, but leave initState
				        * wrong. */
    return (-1);
}

/*
 * Call this to get the time of day.  It will automatically initialize the
 * first time you call it.  If you want error messages when you initialize,
 * call FT_Init yourself.  If the initialization failed, this will just
 * call gettimeofday.  If you ask for the timezone info, this routine will
 * punt to gettimeofday.
 */
int
FT_GetTimeOfDay(struct timeval * tv, struct timezone * tz)
{
    int ret;

    ret = gettimeofday(tv, tz);
    if (!ret) {

	/*
	 * need to bounds check 'cause Unix can fail these checks, (esp on
	 * Suns) and time package can generate invalid (to select syscall)
	 * values for the time until the next interesting event if it
	 * encounters out of range microsecond fields
	 */
	if (tv->tv_usec < 0)
	    tv->tv_usec = 0;
	if (tv->tv_usec > 999999)
	    tv->tv_usec = 999999;
	FT_LastTime.tv_sec = tv->tv_sec;
	FT_LastTime.tv_usec = tv->tv_usec;
    }
    return ret;
}


/* For compatibility.  Should go away. */
int
TM_GetTimeOfDay(struct timeval * tv, struct timezone * tz)
{
    return FT_GetTimeOfDay(tv, tz);
}

int
FT_AGetTimeOfDay(struct timeval * tv, struct timezone * tz)
{
    if (FT_LastTime.tv_sec) {
	tv->tv_sec = FT_LastTime.tv_sec;
	tv->tv_usec = FT_LastTime.tv_usec;
	return 0;
    }
    return FT_GetTimeOfDay(tv, tz);
}

unsigned int
FT_ApproxTime(void)
{
    if (!FT_LastTime.tv_sec) {
	FT_GetTimeOfDay(&FT_LastTime, 0);
    }
    return FT_LastTime.tv_sec;
}



@


1.4
log
@Merge
@
text
@@


1.3
log
@merge
@
text
@d41 1
a41 1
RCSID("$KTH: fasttime.c,v 1.8 1999/12/31 05:38:58 assar Exp $");
a58 3
#ifdef USE_MMAPTIME
#include <mmaptime.h>
#endif
a96 6
#ifdef USE_MMAPTIME
    printErrors = mmaptime_probe();
#endif

    if (printErrors)
	fprintf(stderr, "FT_Init: mmap  not implemented on this kernel\n");
d108 1
a108 1
FT_GetTimeOfDay(register struct timeval * tv, register struct timezone * tz)
d110 1
a110 1
    register int ret;
a111 3
#ifdef USE_MMAPTIME
    ret = mmaptime_gettimeofday(tv, tz);
#else
a112 1
#endif
a141 3
#ifdef USE_MMAPTIME
    return mmaptime_gettimeofday(tv, tz);
#else
a147 1
#endif
a152 3
#ifdef USE_MMAPTIME
    mmaptime_gettimeofday(&FT_LastTime, NULL);
#else
a155 1
#endif
@


1.2
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d41 1
a41 1
RCSID("$Id: fasttime.c,v 1.8 1999/12/31 05:38:58 assar Exp $");
@


1.1
log
@Initial revision
@
text
@a0 1
/*	$OpenBSD$	*/
d41 1
a41 1
RCSID("$KTH: fasttime.c,v 1.6 1998/03/28 16:35:44 lha Exp $");
d48 1
a48 1
#ifndef	AFS_AIX_ENV
d63 1
a63 3

extern char *valloc();
int ft_debug;
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d42 1
a42 1
RCSID("$KTH: fasttime.c,v 1.8 1999/12/31 05:38:58 assar Exp $");
d49 1
a49 1
#ifdef HAVE_SYS_MMAN_H
d64 3
a66 1
#include "timer.h"
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d41 1
a41 1
RCSID("$arla: fasttime.c,v 1.10 2002/12/20 12:54:55 lha Exp $");
d59 3
d100 6
d117 1
a117 1
FT_GetTimeOfDay(struct timeval * tv, struct timezone * tz)
d119 1
a119 1
    int ret;
d121 3
d125 1
d155 3
d164 1
d170 3
d176 1
@


