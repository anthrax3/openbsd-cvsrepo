head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.38
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.36
	OPENBSD_5_0:1.3.0.34
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.32
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.30
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2012.08.23.06.21.52;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2003.08.05.09.07.34;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.41.27;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.41.09;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.30;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.21.04;	author hin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@the afs src tree can go away
@
text
@/* $arla: process.i386.S,v 1.1 2000/01/02 02:11:16 lha Exp $ */

/*
****************************************************************************
*        Copyright IBM Corporation 1988, 1989 - All Rights Reserved        *
*                                                                          *
* Permission to use, copy, modify, and distribute this software and its    *
* documentation for any purpose and without fee is hereby granted,         *
* provided that the above copyright notice appear in all copies and        *
* that both that copyright notice and this permission notice appear in     *
* supporting documentation, and that the name of IBM not be used in        *
* advertising or publicity pertaining to distribution of the software      *
* without specific, written prior permission.                              *
*                                                                          *
* IBM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL *
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL IBM *
* BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY      *
* DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER  *
* IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING   *
* OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.    *
****************************************************************************
*/

#include <config.h>

#undef RCSID

/* i386 Assembly
 *
 * Written by Derek Atkins <warlord@@MIT.EDU>
 * (debugging help by Chris Provenzano <proven@@mit.edu>)
 * 11/1991
 * +  * "ojala que sea correcto!"
 */
	
#ifdef HAVE_MACHINE_ASM_H
#include <machine/asm.h>
#endif

#include <lwp_elf.h>

	
	.file "process.s"
	
	.data
	
	.text

/*
 * struct savearea {
 *    char    *topstack;
 * }
 */

	.set    topstack,0

/*
 * savecontext(f, area1, newsp)
 *    int (*f)(); struct savearea *area1; char *newsp;
 */

/* offsets, to make my life easier! */
	.set    f,8
	.set    area1,12
	.set    newsp,16

.globl		_C_LABEL(PRE_Block)
.globl		_C_LABEL(savecontext)

ENTRY(savecontext)
	pushl   %ebp                    /* New Frame! */
	movl    %esp,%ebp
	pushal                           /* Push all registers */
	movl    $1,_C_LABEL(PRE_Block)        /* Do not allow any interrupt finagling */
	movl    area1(%ebp),%eax        /* eax = base of savearea */
	movl    %esp,topstack(%eax)	/* area->topstack = esp */
	movl    newsp(%ebp),%eax        /* get new sp into eax */
	cmpl    $0,%eax
	je      L1                      /* if new sp is 0 then dont change esp */
	movl    %eax,%esp               /* go ahead.  make my day! */
L1:
	jmp     *f(%ebp)                        /* ebx = &f */

/* Shouldnt be here....*/

	call    _C_LABEL(abort)

/*
 * returnto(area2)
 *    struct savearea *area2;
 */

/* stack offset */
	.set    area2,8

.globl		_C_LABEL(returnto)

ENTRY(returnto)
	pushl   %ebp
	movl    %esp, %ebp              /* New frame, to get correct pointer */
	movl    area2(%ebp),%eax        /* eax = area2 */
	movl    topstack(%eax),%esp	/* restore esp */
	popal
	movl    $0,_C_LABEL(PRE_Block)            /* clear it up... */
	popl    %ebp
	ret
	
/* I see, said the blind man, as he picked up his hammer and saw! */
	pushl   $1234
	call    _C_LABEL(abort)

@


1.3
log
@Merge
@
text
@@


1.2
log
@merge
@
text
@d1 1
a1 1
/* $KTH: process.i386.S,v 1.1 2000/01/02 02:11:16 lha Exp $ */
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d1 1
a1 1
/* $Id: process.i386.S,v 1.1 2000/01/02 02:11:16 lha Exp $ */
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d1 1
a1 1
/* $KTH: process.i386.S,v 1.1 2000/01/02 02:11:16 lha Exp $ */
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d1 1
a1 1
/* $arla: process.i386.S,v 1.1 2000/01/02 02:11:16 lha Exp $ */
@


