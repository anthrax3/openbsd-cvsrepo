head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.24
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.22
	OPENBSD_5_0:1.3.0.20
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.18
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.16
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.12
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.14
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.10
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.8
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.6
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.4
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.1.1.1.0.18
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.16
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.14
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.12
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.10
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.8
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.6
	OPENBSD_3_4_BASE:1.1.1.1
	arla-20030805:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.4
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.2
	OPENBSD_3_2_BASE:1.1.1.1
	arla-0-35-7:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2012.08.23.06.21.52;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2006.12.16.17.39.19;	author tsi;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.17.20.54.47;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.07.04.14.30;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.30;	author hin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@the afs src tree can go away
@
text
@/*	$OpenBSD: process.s390.S,v 1.3 2006/12/16 17:39:19 tsi Exp $ */
/*
 * Copyright (c) 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* Linux for S/390 (31 bit)
 *
 * Written by Neale Ferguson <Neale.Ferguson@@SoftwareAG-usa.com>
 *
 *  additional munging by Adam Thornton <adam@@sinenomine.net>
 */
	        .file   "process.s"

	        .globl savecontext
	        .type  savecontext,%function
	/*
	 * savecontext(f, area1, newsp)
	 *      int (*f)()      ;   struct savearea *area1; char *newsp;
	 * f     - r2
	 * area1 - r3
	 * newsp - r4
	 */

savecontext:
	        stm     %r7,%r15,28(%r15)       /* Save our registers */
	        lr      %r1,%r15
	        ahi     %r15,-96
	        st      %r1,0(%r15)

	        l       %r5,P_PRE               /* Get A(PRE_Block) */
		la	%r7,1
		st	%r7,0(%r5)		/* Set it */
	        l	%r7,124(%r15)		/* Restore %r7 */
	        st      %r15,0(%r3)             /* Save stack pointer */
	        ltr     %r4,%r4                 /* If new sp is 0 */
	        jz      .L1                     /* ... don't change sp */
	        lr      %r15,%r4                /* Set new stack pointer */
	.L1:
	        br      %r2                     /* Call the routine */

	        /* Can't get here....*/

	        l       %r5,P_ABORT
	        basr    %r14,%r5

	.savecontext_end:
	        .size   savecontext,.savecontext_end-savecontext

	/*
	 * returnto(area2)
	 *      struct savearea *area2;
	 *
	 * area2 - r2
	 */

	        .globl  returnto
	        .type   returnto,%function

returnto:
	        l       %r15,0(%r2)             /* New frame, to get correct pointer
	*/
	        l       %r5,P_PRE               /* Get A(PRE_Block) */
		sr	%r7,%r7
		st	%r7,0(%r5)		/* Clear it */
	        l       %r15,0(%r15)            /* Point to next stack frame */
	        lm      %r7,%r15,28(%r15)       /* Restore registers */
	        br      %r14                    /* Return */

	        /* Can't happen */

	        la      %r2,1234
	        l       %r9,P_ABORT
	        basr    %r14,%r9

	.returnto_end:
	        .size   returnto,.returnto_end-returnto
	
	 /*
	  * struct savearea {
	  *      char    *topstack;
	  * }
	  */

P_PRE:	        .long   PRE_Block
P_ABORT:	.long   abort

@


1.3
log
@Fix up s390 assembler in arla's lwp threading.  Results from beck@@ request to
look into it, even though there's no OpenBSD/s390.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@


1.2
log
@change PRE_Block to an int, which architectures like alpha can access
atomically. Adapt all the others (except s390 which is not fixed yet).

mips and hppa still do not work for some other reason.

testing by beck, ckuethe, todd, asm proofreading by miod
@
text
@d1 1
a52 9
	 /*
	  * struct savearea {
	  *      char    *topstack;
	  * }
	  */

P_PRE:	          .long   PRE_Block
P_ABORT:	        .long   abort

d59 4
a62 6
	/*        larl    %r5,P_PRE               /* Get A((PRE_Block)) */
	        bras    %r5,.L0                 /* Get A(A(PRE_Block)) */
	        .long   PRE_Block
	.L0:
	        l       %r5,0(%r5)              /* Get A(PRE_Block) */
	        mvi     0(%r5),1                /* Set it */			/* XXX should be a word */
d72 1
a72 5
	/*        larl    %r5,P_ABORT */
	        bras    %r5,.L2
	        .long   abort
	.L2:
	        l       %r5,0(%r5)
d91 3
a93 6
	/*        larl    %r5,P_PRE               /* Get A((PRE_Block)) */
	        bras    %r5,.L3                 /* Get A(A(PRE_Block)) */
	        .long   PRE_Block
	.L3:
	        l       %r5,0(%r5)              /* Get A(PRE_Block) */
	        mvi     0(%r5),0                /* Clear it */				/* XXX should be a word */
d101 1
a101 5
	/*        larl    %r9,P_ABORT */
	        bras    %r9,.L4
	        .long   abort
	.L4:
	        l       %r9,0(%r9)
d107 9
@


1.1
log
@Initial revision
@
text
@d72 1
a72 1
	        mvi     0(%r5),1                /* Set it */
d110 1
a110 1
	        mvi     0(%r5),0                /* Clear it */
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@@
