head	1.3;
access;
symbols
	OPENBSD_5_2:1.2.0.24
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.22
	OPENBSD_5_0:1.2.0.20
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.18
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.16
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.12
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.14
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.10
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.8
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.6
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.4
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.1.0.12
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.10
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2012.08.23.06.21.52;	author deraadt;	state dead;
branches;
next	1.2;

1.2
date	2006.11.17.20.54.47;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.11.21.52.49;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@the afs src tree can go away
@
text
@/* $OpenBSD: process.arm.S,v 1.2 2006/11/17 20:54:47 deraadt Exp $ */

/*
 * Copyright (c) 2004 Dale Rahn. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */  

#include <config.h>

#define FRAME_OFFSET	8	/* XXX */
#define FRAME_SIZE	(52 +(11*4)+FRAME_OFFSET)	/* FP + r4-r14 */

#define TOP_OF_STACK	(0*4)
#define RETURN 		(1*4)


/*
 * savecontext(int (*f)(), struct savearea *save, char *newsp)
 */
	.globl	savecontext
	.type	savecontext%function
savecontext:
	str	r2, [r1]
	ldr	r3, .LPRE_Block
	mov	r2, #1
	str	r2, [r3]
	ldr	r2, [r1]

	sub	sp, sp, #FRAME_SIZE
	add	r3, sp, #FRAME_OFFSET
#if __SOFTFP__
	add	r3, r3, #52
#else
	/* Store fp registers */
	sfm	f4, 4, [r3], #48
	/* Store fpsr */
	rfs	r3
	str	r3, [r3], #0x0004
#endif	/*__SOFTFP__*/
	/* Store integer registers */
        stmia	r3, {r4-r13}

	/* SAVE SP */
	str	sp, [r1, #TOP_OF_STACK]
	str	r14, [r1, #RETURN]
	cmp	r2, #0
        movne	sp, r2
        mov	r15, r0

.LPRE_Block:
	.word	PRE_Block

/*
 * returnto(struct savearea *area)
 */
	.globl	returnto
	.type	returnto%function
returnto:
	ldr	sp, [r0, #TOP_OF_STACK]
	ldr	r14, [r0, #RETURN]
	add	r3, sp, #FRAME_OFFSET
	mov	r1, r3
#if __SOFTFP__
	add	r3, r3, #52
#else
	/* Restore fp registers */
	lfm	f4, 4, [r3], #48
	/* Restore FPSR */
	ldr	r4, [r3], #0x0004
	wfs	r4
#endif	/* __SOFTFP__ */
	/* Restore integer registers */
        ldmia	r3, {r4-r13}

	ldr	r3, .LPRE_Block
	mov	r2, #0
	str	r2, [r3]

	add	sp, sp, #FRAME_SIZE
#ifdef __ARM_26__
	mov	r15, r14
#else
	mov	r15, r14
#endif
@


1.2
log
@change PRE_Block to an int, which architectures like alpha can access
atomically. Adapt all the others (except s390 which is not fixed yet).

mips and hppa still do not work for some other reason.

testing by beck, ckuethe, todd, asm proofreading by miod
@
text
@d1 1
a1 1
/* $OpenBSD: process.arm.S,v 1.1 2004/02/11 21:52:49 drahn Exp $ */
@


1.1
log
@Arm routine for process swapping in afs, appears to pass testlwp.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d45 1
a45 1
	strb	r2, [r3]
d96 1
a96 1
	strb	r2, [r3]
@

