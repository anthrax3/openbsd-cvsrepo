head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.24
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.22
	OPENBSD_5_0:1.5.0.20
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.18
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.16
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.12
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.14
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.10
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.8
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.6
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.4.0.8
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3;
locks; strict;
comment	@# @;


1.6
date	2012.08.23.06.21.52;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2006.11.17.20.54.47;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.15.05.55.46;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.08.20.52.03;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.02.23.36.45;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.02.18.17.51;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/*	$OpenBSD: process.m88k.S,v 1.5 2006/11/17 20:54:47 deraadt Exp $	*/

/*
 * Copyright (c) 2004, Miodrag Vallat.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <machine/asm.h>

#include <config.h>

.globl	_C_LABEL(PRE_Block)

/*
 * savecontext(int (*f)(), struct savearea *a1, char *newsp)
 */
ENTRY(savecontext)
	/* save all registers but r0, r2, r3 and r31 on stack - we could
	   skip r4 but saving it allows us to use it as a temporary below. */
	subu	r31, r31, 4 * 30
	st.d	r4,  r31, 4 * 0
	st.d	r6,  r31, 4 * 2
	st.d	r8,  r31, 4 * 4
	st.d	r10, r31, 4 * 6
	st.d	r12, r31, 4 * 8
	st.d	r14, r31, 4 * 10
	st.d	r16, r31, 4 * 12
	st.d	r18, r31, 4 * 14
	st.d	r20, r31, 4 * 16
	st.d	r22, r31, 4 * 18
	st.d	r24, r31, 4 * 20
	st.d	r26, r31, 4 * 22
	st.d	r28, r31, 4 * 24
	st	r30, r31, 4 * 26
	st	r1,  r31, 4 * 27
	fldcr	r4,  fcr62
	fldcr	r5,  fcr63
	st.d	r4,  r31, 4 * 28

	/* set preemption lock */
	or.u	r4,  r0,  hi16(_C_LABEL(PRE_Block))
	set	r1,  r0,  1<0>
	st	r1,  r4,  lo16(_C_LABEL(PRE_Block))
	ld.d	r4,  r31, 4 * 0

	/* save stack pointer, and fetch the new one if non NULL */
	bcnd.n	eq0, r4,  1f
	 st	r31, r3,  0
	or	r31, r4,  r0
1:

	/* invoke function */
	jsr	r2

	/* should not return, invoke abort() if this happens */
	bsr	_C_LABEL(abort)
	/* NOTREACHED */
	
/*
 * returnto(struct savearea *a2)
*/
ENTRY(returnto)
	/* pick stack */
	ld	r31, r2,  0

	/* restore registers */
	ld.d	r4,  r31, 4 * 28
	fstcr	r4,  fcr62
	fstcr	r5,  fcr63
	ld.d	r4,  r31, 4 * 0
	ld.d	r6,  r31, 4 * 2
	ld.d	r8,  r31, 4 * 4
	ld.d	r10, r31, 4 * 6
	ld.d	r12, r31, 4 * 8
	ld.d	r14, r31, 4 * 10
	ld.d	r16, r31, 4 * 12
	ld.d	r18, r31, 4 * 14
	ld.d	r20, r31, 4 * 16
	ld.d	r22, r31, 4 * 18
	ld.d	r24, r31, 4 * 20
	ld.d	r26, r31, 4 * 22
	ld.d	r28, r31, 4 * 24
	ld	r30, r31, 4 * 26
	ld	r1,  r31, 4 * 27
	addu	r31, r31, 4 * 30

	/* clear preemption lock and return */
	or.u	r2,  r0,  hi16(_C_LABEL(PRE_Block))
	jmp.n	r1
	 st	r0,  r2,  lo16(_C_LABEL(PRE_Block))
@


1.5
log
@change PRE_Block to an int, which architectures like alpha can access
atomically. Adapt all the others (except s390 which is not fixed yet).

mips and hppa still do not work for some other reason.

testing by beck, ckuethe, todd, asm proofreading by miod
@
text
@d1 1
a1 1
/*	$OpenBSD: process.m88k.S,v 1.4 2004/09/15 05:55:46 miod Exp $	*/
@


1.4
log
@Use less stack, as allowed by the new ABI.
@
text
@d1 1
a1 1
/*	$OpenBSD: process.m88k.S,v 1.3 2004/03/08 20:52:03 miod Exp $	*/
d63 1
a63 1
	st.b	r1,  r4,  lo16(_C_LABEL(PRE_Block))
d110 1
a110 1
	 st.b	r0,  r2,  lo16(_C_LABEL(PRE_Block))
@


1.3
log
@Slightly optimize and make both routines one instruction shorter.
@
text
@d1 1
a1 1
/*	$OpenBSD: process.m88k.S,v 1.2 2004/03/02 23:36:45 miod Exp $	*/
d73 1
a73 2
	jsr.n	r2
	 subu	r31, r31, 32
a77 1
	addu	r31, r31, 32
@


1.2
log
@A wrong comment is worth a thousand bugs...
@
text
@d1 1
a1 1
/*	$OpenBSD: process.m88k.S,v 1.1 2004/03/02 18:17:51 miod Exp $	*/
d40 1
a40 1
	sub	r31, r31, 4 * 30
d62 2
a63 3
	or	r4,  r4,  lo16(_C_LABEL(PRE_Block))
	add	r1,  r0,  1		/* use ext or mak */
	st.b	r1,  r4,  0
a65 1

d74 1
a74 1
	 sub	r31, r31, 32
d76 1
a76 1
	/* should not return. Arla invokes abort() if this happens */
d79 1
a79 1
	add	r31, r31, 32
d107 1
a107 1
	add	r31, r31, 4 * 30
a110 1
	or	r2,  r2,  lo16(_C_LABEL(PRE_Block))
d112 1
a112 1
	 st.b	r0,  r2,  0
@


1.1
log
@Arla lwp support for m88k systems. Slightly abuses the framework to
enforce 8-byte stack alignment.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 2
a39 1
	/* save all registers but r0, r2, r3 and r4 on stack */
@

