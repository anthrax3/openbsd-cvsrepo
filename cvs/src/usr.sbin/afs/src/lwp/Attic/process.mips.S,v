head	1.8;
access;
symbols
	OPENBSD_5_2:1.7.0.12
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.10
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.12
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.8
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.6
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.4
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.2
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@# @;


1.8
date	2012.08.23.06.21.52;	author deraadt;	state dead;
branches;
next	1.7;

1.7
date	2009.12.11.05.10.17;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2007.07.21.21.37.21;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.17.20.54.47;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.11.11.16.41;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.05.09.07.34;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.41.27;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.41.09;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.30;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.21.04;	author hin;	state Exp;
branches;
next	;


desc
@@


1.8
log
@the afs src tree can go away
@
text
@/* $arla: process.mips.S,v 1.1 2000/01/02 02:11:17 lha Exp $ */

/*
****************************************************************************
*        Copyright IBM Corporation 1988, 1989 - All Rights Reserved        *
*                                                                          *
* Permission to use, copy, modify, and distribute this software and its    *
* documentation for any purpose and without fee is hereby granted,         *
* provided that the above copyright notice appear in all copies and        *
* that both that copyright notice and this permission notice appear in     *
* supporting documentation, and that the name of IBM not be used in        *
* advertising or publicity pertaining to distribution of the software      *
* without specific, written prior permission.                              *
*                                                                          *
* IBM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL *
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL IBM *
* BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY      *
* DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER  *
* IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING   *
* OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.    *
****************************************************************************
*/

#include <config.h>

#undef RCSID

#ifdef __LP64__
#define	REGSIZE	8
#define	REG_S	sd
#define	REG_L	ld
#define	ADDU	daddu
#define	SUBU	dsubu
#else
#define	REGSIZE	4
#define	REG_S	sw
#define	REG_L	lw
#define	ADDU	addu
#define	SUBU	subu
#endif
	
#ifdef HAVE_PIC
	.option	pic2

#if defined(HAVE_MACHINE_REGDEF_H) || defined(__OpenBSD__)
#include <machine/regdef.h>
#elif defined(HAVE_REGDEF_H)
#include <regdef.h>
#endif

/* 9 sregs, ra, 6 fp regs, gp, pad to 8 byte boundary */
#ifdef __LP64__
#define regspace 9 * REGSIZE + REGSIZE + 6 * 8 + REGSIZE
#else
#define regspace 9 * REGSIZE + REGSIZE + 6 * 8 + 4 + REGSIZE
#endif
#define floats 0
#define registers floats + 6 * 8
#define returnaddr regspace - REGSIZE
#define topstack 0
#define GPOFF	regspace - 8
	.globl savecontext /* MIPS' C compiler doesnt prepend underscores. */
	.ent savecontext /* Insert debugger information. */
savecontext:
        .set    noreorder
        .cpload t9                      # set up gp for KPIC
        .set    reorder
        SUBU sp, regspace
        .cprestore GPOFF                # trigger t9/jalr
	.set	noreorder
	li	t0, 1
	.extern	PRE_Block
	sw	t0, PRE_Block
        .set    reorder
	.frame	sp, regspace, ra
/* Save registers. */
	REG_S	s0, registers + (0 * REGSIZE)(sp)
	REG_S	s1, registers + (1 * REGSIZE)(sp)
	REG_S	s2, registers + (2 * REGSIZE)(sp)
	REG_S	s3, registers + (3 * REGSIZE)(sp)
	REG_S	s4, registers + (4 * REGSIZE)(sp)
	REG_S	s5, registers + (5 * REGSIZE)(sp)
	REG_S	s6, registers + (6 * REGSIZE)(sp)
	REG_S	s7, registers + (7 * REGSIZE)(sp)
	REG_S	s8, registers + (8 * REGSIZE)(sp)
/* Save return address */
	REG_S	ra, returnaddr(sp)
	.mask	0xc0ff0000, -4
/* Need to save floating point registers? */
	s.d	$f20, floats + 0(sp)
	s.d	$f22, floats + 8(sp)
	s.d	$f24, floats + 16(sp)
	s.d	$f26, floats + 24(sp)
	s.d	$f28, floats + 32(sp)
	s.d	$f30, floats + 40(sp)
	.fmask	0x55400000, regspace
	REG_S	sp, topstack(a1)
	beq	a2, $0, samestack
	move	sp, a2
samestack:
	move	t9, a0
	j	t9
	 nop
	.end	savecontext

	.globl	returnto
	.ent	returnto
returnto:
        .set    noreorder
        .cpload t9                      # set up gp for KPIC
        .set    reorder

	REG_L	sp, topstack(a0)
	REG_L	s0, registers + (0 * REGSIZE)(sp)
	REG_L	s1, registers + (1 * REGSIZE)(sp)
	REG_L	s2, registers + (2 * REGSIZE)(sp)
	REG_L	s3, registers + (3 * REGSIZE)(sp)
	REG_L	s4, registers + (4 * REGSIZE)(sp)
	REG_L	s5, registers + (5 * REGSIZE)(sp)
	REG_L	s6, registers + (6 * REGSIZE)(sp)
	REG_L	s7, registers + (7 * REGSIZE)(sp)
	REG_L	s8, registers + (8 * REGSIZE)(sp)
/* Save return address */
	REG_L	ra, returnaddr(sp)
/* Need to save floating point registers? */
	l.d	$f20, floats + 0(sp)
	l.d	$f22, floats + 8(sp)
	l.d	$f24, floats + 16(sp)
	l.d	$f26, floats + 24(sp)
	l.d	$f28, floats + 32(sp)
	l.d	$f30, floats + 40(sp)
	.set	noreorder
	ADDU	sp, regspace
	sw	zero, PRE_Block
	j	ra
	 nop
	.set	reorder
	.end	returnto

#else
/* Code for MIPS R2000/R3000 architecture
 * Written by Zalman Stern April 30th, 1989.
 */

#if defined(HAVE_MACHINE_REGDEF_H) || defined(__OpenBSD__)
#include <machine/regdef.h>
#elif defined(HAVE_REGDEF_H)
#include <regdef.h> /* Allow use of symbolic names for registers. */
#else
#define sp     $29
#define ra     $31
#define t0     $8	/* XXX this only works for 32 bit systems */
#define a0     $4
#define a1     $5
#define a2     $6
#define s0     $16
#define s1     $17
#define s2     $18
#define s3     $19
#define s4     $20
#define s5     $21
#define s6     $22
#define s7     $23
#define s8     $30
#endif
	
#define regspace 9 * REGSIZE + REGSIZE + 6 * 8
#define floats 0
#define registers floats + 6 * 8
#define returnaddr regspace - REGSIZE
#define topstack 0
	.globl savecontext /* MIPS' C compiler doesnt prepend underscores. */
	.ent savecontext /* Insert debugger information. */
savecontext:
	li	t0, 1
	.extern	PRE_Block
	sw	t0, PRE_Block
	SUBU	sp, regspace
	.frame	sp, regspace, ra
/* Save registers. */
	REG_S	s0, registers + (0 * REGSIZE)(sp)
	REG_S	s1, registers + (1 * REGSIZE)(sp)
	REG_S	s2, registers + (2 * REGSIZE)(sp)
	REG_S	s3, registers + (3 * REGSIZE)(sp)
	REG_S	s4, registers + (4 * REGSIZE)(sp)
	REG_S	s5, registers + (5 * REGSIZE)(sp)
	REG_S	s6, registers + (6 * REGSIZE)(sp)
	REG_S	s7, registers + (7 * REGSIZE)(sp)
	REG_S	s8, registers + (8 * REGSIZE)(sp)
/* Save return address */
	REG_S	ra, returnaddr(sp)
	.mask	0xc0ff0000, -4
/* Need to save floating point registers? */
	s.d	$f20, floats + 0(sp)
	s.d	$f22, floats + 8(sp)
	s.d	$f24, floats + 16(sp)
	s.d	$f26, floats + 24(sp)
	s.d	$f28, floats + 32(sp)
	s.d	$f30, floats + 40(sp)
	.fmask	0x55400000, regspace
	REG_S	sp, topstack(a1)
	beq	a2, $0, samestack
	addu	sp, $0, a2
samestack:
	jal	a0
	.end	savecontext

	.globl	returnto
	.ent	returnto
returnto:
	REG_L	sp, topstack(a0)
	REG_L	s0, registers + (0 * REGSIZE)(sp)
	REG_L	s1, registers + (1 * REGSIZE)(sp)
	REG_L	s2, registers + (2 * REGSIZE)(sp)
	REG_L	s3, registers + (3 * REGSIZE)(sp)
	REG_L	s4, registers + (4 * REGSIZE)(sp)
	REG_L	s5, registers + (5 * REGSIZE)(sp)
	REG_L	s6, registers + (6 * REGSIZE)(sp)
	REG_L	s7, registers + (7 * REGSIZE)(sp)
	REG_L	s8, registers + (8 * REGSIZE)(sp)
/* Save return address */
	REG_L	ra, returnaddr(sp)
/* Need to save floating point registers? */
	l.d	$f20, floats + 0(sp)
	l.d	$f22, floats + 8(sp)
	l.d	$f24, floats + 16(sp)
	l.d	$f26, floats + 24(sp)
	l.d	$f28, floats + 32(sp)
	l.d	$f30, floats + 40(sp)
	addu	sp, regspace
	sw	$0, PRE_Block
	.end	returnto
#endif	/* HAVE_PIC */
@


1.7
log
@More changes to avoid truncating 64 bit pointers to 32 bits and sign-extending
them; allows userland with stack beyond 2GB to run.
@
text
@@


1.6
log
@64 bit mips support for the arla lwp code, requested by todd@@ long ago...
@
text
@d32 2
d38 2
d68 1
a68 1
        subu sp, regspace
d133 1
a133 1
	addu	sp, regspace
d178 1
a178 1
	subu	sp, regspace
@


1.5
log
@change PRE_Block to an int, which architectures like alpha can access
atomically. Adapt all the others (except s390 which is not fixed yet).

mips and hppa still do not work for some other reason.

testing by beck, ckuethe, todd, asm proofreading by miod
@
text
@d28 10
d46 1
a46 1
	
d48 5
a52 1
#define regspace 9 * 4 + 4 + 6 * 8 + 4 + 4
d55 1
a55 1
#define returnaddr regspace - 4
d73 9
a81 9
	sw	s0, registers + 0(sp)
	sw	s1, registers + 4(sp)
	sw	s2, registers + 8(sp)
	sw	s3, registers + 12(sp)
	sw	s4, registers + 16(sp)
	sw	s5, registers + 20(sp)
	sw	s6, registers + 24(sp)
	sw	s7, registers + 28(sp)
	sw	s8, registers + 32(sp)
d83 1
a83 1
	sw	ra, returnaddr(sp)
d93 1
a93 1
	sw	sp, topstack(a1)
d99 1
d109 10
a118 10
	lw	sp, topstack(a0)
	lw	s0, registers + 0(sp)
	lw	s1, registers + 4(sp)
	lw	s2, registers + 8(sp)
	lw	s3, registers + 12(sp)
	lw	s4, registers + 16(sp)
	lw	s5, registers + 20(sp)
	lw	s6, registers + 24(sp)
	lw	s7, registers + 28(sp)
	lw	s8, registers + 32(sp)
d120 1
a120 1
	lw	ra, returnaddr(sp)
d141 3
a143 1
#if defined(HAVE_REGDEF_H)	
d148 1
a148 1
#define t0     $8
d163 1
a163 1
#define regspace 9 * 4 + 4 + 6 * 8
d166 1
a166 1
#define returnaddr regspace - 4
d177 9
a185 9
	sw	s0, registers + 0(sp)
	sw	s1, registers + 4(sp)
	sw	s2, registers + 8(sp)
	sw	s3, registers + 12(sp)
	sw	s4, registers + 16(sp)
	sw	s5, registers + 20(sp)
	sw	s6, registers + 24(sp)
	sw	s7, registers + 28(sp)
	sw	s8, registers + 32(sp)
d187 1
a187 1
	sw	ra, returnaddr(sp)
d197 1
a197 1
	sw	sp, topstack(a1)
d207 10
a216 10
	lw	sp, topstack(a0)
	lw	s0, registers + 0(sp)
	lw	s1, registers + 4(sp)
	lw	s2, registers + 8(sp)
	lw	s3, registers + 12(sp)
	lw	s4, registers + 16(sp)
	lw	s5, registers + 20(sp)
	lw	s6, registers + 24(sp)
	lw	s7, registers + 28(sp)
	lw	s8, registers + 32(sp)
d218 1
a218 1
	lw	ra, returnaddr(sp)
a227 1
	j	ra
@


1.4
log
@config is not set up with regdef.h. force it in if OpenBSD.
ok deraadt@@
@
text
@d55 1
a55 1
	sb	t0, PRE_Block
d115 1
a115 1
	la	t0, PRE_Block
d117 1
a117 1
	sb	zero, 0(t0)
d156 1
a156 1
	sb	t0, PRE_Block
d210 1
a210 1
	sb	$0, PRE_Block
@


1.3
log
@Merge
@
text
@d31 1
a31 1
#if defined(HAVE_MACHINE_REGDEF_H)
@


1.2
log
@merge
@
text
@d1 1
a1 1
/* $KTH: process.mips.S,v 1.1 2000/01/02 02:11:17 lha Exp $ */
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d1 1
a1 1
/* $Id: process.mips.S,v 1.1 2000/01/02 02:11:17 lha Exp $ */
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d1 1
a1 1
/* $KTH: process.mips.S,v 1.1 2000/01/02 02:11:17 lha Exp $ */
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d1 1
a1 1
/* $arla: process.mips.S,v 1.1 2000/01/02 02:11:17 lha Exp $ */
@


