head	1.7;
access;
symbols
	OPENBSD_5_2:1.6.0.36
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.34
	OPENBSD_5_0:1.6.0.32
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.30
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.28
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.24
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.26
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.22
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.20
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.18
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.16
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.14
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.12
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2012.08.23.06.21.52;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2004.03.02.18.17.51;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.05.09.07.34;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.41.27;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.41.08;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.13;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.12;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.12;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.29;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.04;	author hin;	state Exp;
branches;
next	;


desc
@@


1.7
log
@the afs src tree can go away
@
text
@#!/bin/sh
#
# make-process.o.sh
#  Try to make process.o various ways.
#
#  $arla: make-process.o.sh.in,v 1.28 2002/11/29 19:48:14 tol Exp $
#

srcdir=@@srcdir@@

CC=${CC-"@@CC@@"}
GCC=${GCC-"@@GCC@@"}
CPP=${CPP-"@@CPP@@"}
AS=${AS-"@@AS@@"}
RM=rm
HOST_CPU="@@host_cpu@@"
HOST_OS="@@host_os@@"
LN_S="@@LN_S@@"
LWP_O="@@LWP_O@@"

#
# Here is a test to check if we manage to build process.o
#  (use this because some sh doesn't have functions)
#
# $CC -o testprocess testprocess.o process.o preempt.o ${LWP_O} && exit 0
# $RM -f process.o

#
# Options that you may need to override for your CPU/OS
#

PROCESS_S="undefined_you_lose"
USE_AS="no"
MYDEF="-DUSING_ASM"


#
# Clean out the process.o
#

$RM -f process.o process.S foo.c

# 
# Add PROCESS_S you need
#

case "$HOST_CPU" in
    sparc*)  PROCESS_S="process.sparc.S" ;;
    i*86*)   PROCESS_S="process.i386.S" ;;
    m68k)    PROCESS_S="process.m68k.S" ;;
    m88k)    PROCESS_S="process.m88k.S" ;;
    mips*)   PROCESS_S="process.mips.S" ;;
    alpha*)  PROCESS_S="process.alpha.S" ;;
    hppa*)   PROCESS_S="process.hpux.S" ;;
    powerpc) PROCESS_S="process.ppc.S" ;;
    rs6000)  PROCESS_S="process.rios.S" ;;
    vax)     PROCESS_S="process.vax.S" ;;
    s390*)   PROCESS_S="process.s390.S" ;;
    f301) ;;
    *)  echo "Unknown host_cpu, good luck" ;;
esac 

#
# Add OSDEF your OS need
#

case "$HOST_OS" in 
    *bsd*) OSDEF="-DHAVE_PIC -DAFS_BSD_ENV" ;; 
    *linux*) OSDEF="-DAFS_LINUX_ENV" ;; 
    *dux* | *osf*) OSDEF="-DAFS_OSF_ENV" ;; 
    *solaris*) OSDEF="-DAFS_SUN5_ENV -D_ASM" USE_AS="yes" ;; 
    *irix*) OSDEF="-Dsgi -n32 -DHAVE_PIC"; ASDEF="-n32" ;; 
    *hpux*) OSDEF="-DAFS_HPUX_ENV" ;; 
    aix*) CPUDEF=""; OSDEF="" ;; 
    uxpv*) 
	$CPP $MYDEF -P ${srcdir}/process-vpp.s > foo.s
	$AS -o process.o foo.s && $RM -f foo.s && exit 0
	$RM -f foo.s
	exit 1
	;;
    *) ;; 
esac 

#
# Now try to do the magic stuff.
#

$LN_S ${srcdir}/${PROCESS_S} process.S

#
# Can we use $CC to do the asm for us ? (GCC)
#   

if test "X$GCC" = "Xyes" -a "X$USE_AS" = "Xno"; then 
    ${CC} -I../include -I$srcdir -DASSEMBLER $MYDEF $CPUDEF $OSDEF -c process.S

# process.o there ?
    $CC -o testprocess testprocess.o process.o preempt.o ${LWP_O} && exit 0
    $RM -f process.o
fi

#
# Try to use $AS -P for assably 
#

$AS -P -I../include -I$srcdir -DASSEMBLER $MYDEF $CPUDEF $OSDEF process.S -o process.o

# process.o there ?
$CC -o testprocess testprocess.o process.o preempt.o ${LWP_O} && exit 0
$RM -f process.o


#
# Some $AS does "interesting" things, like ignorings the -o flag
# and creats a .i file that is preprocessed. (Digital Unix)
#

if test -s process.i ; then
    $AS $ASDEF process.i -o process.o
    $RM -f process.i

    # process.o there ?
    $CC -o testprocess testprocess.o process.o preempt.o ${LWP_O} && exit 0
    $RM -f process.o
fi

#
# Try to use $AS (without -P) for assably 
#

$AS -I../include -I$srcdir -DASSEMBLER $MYDEF $CPUDEF $OSDEF process.S -o process.o

# process.o there ?
$CC -o testprocess testprocess.o process.o preempt.o ${LWP_O} && exit 0
$RM -f process.o


#
# Some $AS does "intresting" things, like ignorings the -o flag
# and creats a .i file that is preprocessed. (Digital Unix)
#

if test -s process.i ; then
    $AS process.i -o process.o
    $RM -f process.i

    # process.o there ?
    $CC -o testprocess testprocess.o process.o preempt.o ${LWP_O} && exit 0
    $RM -f process.o
fi


#
# Try to use $CPP to preprocess
#

$CPP -I../include -I$srcdir $MYDEF $CPUDEF $OSDEF process.S > process.ss 
$AS process.ss -o process.o 
$RM -f process.ss

# process.o there ?
$CC -o testprocess testprocess.o process.o preempt.o ${LWP_O} && exit 0
$RM -f process.o

#
# Try to fool $CC by adding a .c extension. 
#

$LN_S process.S foo.c 
$CPP -I../include -I$srcdir $MYDEF $CPUDEF $OSDEF foo.c > process.ss 
$RM -f foo.c
$AS process.ss -o process.o 
$RM -f process.ss

# process.o there ?
$CC -o testprocess testprocess.o process.o preempt.o ${LWP_O} && exit 0
$RM -f process.o

echo "WE HAVE NO process.o !"
exit 1
@


1.6
log
@Arla lwp support for m88k systems. Slightly abuses the framework to
enforce 8-byte stack alignment.
@
text
@@


1.5
log
@Merge
@
text
@d51 1
@


1.4
log
@merge
@
text
@d6 1
a6 1
#  $KTH: make-process.o.sh.in,v 1.24.2.1 2001/02/21 17:53:19 lha Exp $
d32 1
a32 1
PROCESS_S="undefined_you_loose"
d34 1
a34 1
MYDEF=""
d75 1
a75 1
	$CPP -P ${srcdir}/process-vpp.s > foo.s
d113 1
a113 1
# Some $AS does "intresting" things, like ignorings the -o flag
d150 13
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d6 1
a6 1
#  $Id: make-process.o.sh.in,v 1.22 2000/07/28 12:17:46 lha Exp $
d56 2
a72 1
    rhapsody*) OSDEF="-DAFS_BSD_ENV" ;; 
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@d6 1
a6 1
#  $Id: make-process.o.sh.in,v 1.10 1999/01/23 20:17:24 lha Exp $
d11 4
a14 4
CC="@@CC@@"
GCC="@@GCC@@"
CPP="@@CPP@@"
AS="as"
d19 1
d25 1
a25 1
# $CC -o testprocess testprocess.o process.o preempt.o lwp.o && exit 0
d32 1
a32 1
PROCESS_S="process.S"
d41 1
a41 1
$RM -f process.o
d44 1
a44 1
# Add CPUDEFs that you CPU needs
d48 8
a55 8
    sparc) CPUDEF="-Dsparc" ;;
    i*86*) CPUDEF="-DAFS_386i_ENV" ;;
    m68k)  CPUDEF="-Dmc68000" ;;
    mips)  CPUDEF="-Dmips" ;;
    alpha) CPUDEF="-Dalpha" ;;
    hppa*) CPUDEF="" ;;
    powerpc) CPUDEF="-D__powerpc__" ;;
    rs6000) CPUDEF="-DRIOS" ;;
d70 1
a70 1
    *hpux*) OSDEF="-DAFS_HPUX_ENV" PROCESS_S="process.s.hpux" ;; 
d72 1
a72 1
    aix*) CPUDEF="-DRIOS"; OSDEF="" ;; 
d86 1
d93 1
a93 1
    ${CC} -I../include $MYDEF $CPUDEF $OSDEF -c ${srcdir}/${PROCESS_S} ; 
d96 1
a96 1
    $CC -o testprocess testprocess.o process.o preempt.o lwp.o && exit 0
d104 1
a104 1
$AS -P -I../include $MYDEF $CPUDEF $OSDEF ${srcdir}/${PROCESS_S} -o process.o
d107 1
a107 1
$CC -o testprocess testprocess.o process.o preempt.o lwp.o && exit 0
d121 1
a121 1
    $CC -o testprocess testprocess.o process.o preempt.o lwp.o && exit 0
d129 1
a129 1
$AS -I../include $MYDEF $CPUDEF $OSDEF ${srcdir}/${PROCESS_S} -o process.o
d132 1
a132 1
$CC -o testprocess testprocess.o process.o preempt.o lwp.o && exit 0
d146 1
a146 1
    $CC -o testprocess testprocess.o process.o preempt.o lwp.o && exit 0
d154 2
a155 2
$RM -f foo.c && $LN_S ${srcdir}/${PROCESS_S} foo.c 
$CPP -I../include $MYDEF $CPUDEF $OSDEF foo.c > process.ss 
d161 1
a161 1
$CC -o testprocess testprocess.o process.o preempt.o lwp.o && exit 0
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
#  $Id: make-process.o.sh.in,v 1.3 1998/07/13 20:58:12 assar Exp $
d14 1
a14 1
AS=as
d55 1
d64 1
a64 1
    *bsd*) OSDEF="-DAFS_NETBSD_ENV" ;; 
a65 1
    *irix*) OSDEF="-Dsgi" ;; 
d68 1
a68 1
    *irix*) OSDEF="-Dsgi" ;; 
d70 1
a70 1
    rhapsody*) OSDEF="-DAFS_NETBSD_ENV" ;; 
d72 6
d90 2
a91 2
if test "$GCC" = "yes" -a "$USE_AS" = "no"; then 
    ${CC} $MYDEF $CPUDEF $OSDEF -c ${srcdir}/${PROCESS_S} ; 
d102 1
a102 1
$AS -P $MYDEF $CPUDEF $OSDEF ${srcdir}/${PROCESS_S} -o process.o
d115 1
a115 1
    $AS process.i -o process.o
d127 1
a127 1
$AS $MYDEF $CPUDEF $OSDEF ${srcdir}/${PROCESS_S} -o process.o
d153 2
a154 1
$CPP $MYDEF $CPUDEF $OSDEF foo.c > process.ss 
a163 5





@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d6 1
a6 1
#  $KTH: make-process.o.sh.in,v 1.24.2.1 2001/02/21 17:53:19 lha Exp $
d11 4
a14 4
CC=${CC-"@@CC@@"}
GCC=${GCC-"@@GCC@@"}
CPP=${CPP-"@@CPP@@"}
AS=${AS-"@@AS@@"}
a18 1
LWP_O="@@LWP_O@@"
d24 1
a24 1
# $CC -o testprocess testprocess.o process.o preempt.o ${LWP_O} && exit 0
d31 1
a31 1
PROCESS_S="undefined_you_loose"
d40 1
a40 1
$RM -f process.o process.S foo.c
d43 1
a43 1
# Add PROCESS_S you need
d47 8
a54 11
    sparc*)  PROCESS_S="process.sparc.S" ;;
    i*86*)   PROCESS_S="process.i386.S" ;;
    m68k)    PROCESS_S="process.m68k.S" ;;
    mips*)   PROCESS_S="process.mips.S" ;;
    alpha*)  PROCESS_S="process.alpha.S" ;;
    hppa*)   PROCESS_S="process.hpux.S" ;;
    powerpc) PROCESS_S="process.ppc.S" ;;
    rs6000)  PROCESS_S="process.rios.S" ;;
    vax)     PROCESS_S="process.vax.S" ;;
    s390*)   PROCESS_S="process.s390.S" ;;
    f301) ;;
d63 1
a63 1
    *bsd*) OSDEF="-DHAVE_PIC -DAFS_BSD_ENV" ;; 
d65 1
d68 4
a71 9
    *irix*) OSDEF="-Dsgi -n32 -DHAVE_PIC"; ASDEF="-n32" ;; 
    *hpux*) OSDEF="-DAFS_HPUX_ENV" ;; 
    aix*) CPUDEF=""; OSDEF="" ;; 
    uxpv*) 
	$CPP -P ${srcdir}/process-vpp.s > foo.s
	$AS -o process.o foo.s && $RM -f foo.s && exit 0
	$RM -f foo.s
	exit 1
	;;
a78 1
$LN_S ${srcdir}/${PROCESS_S} process.S
d84 2
a85 2
if test "X$GCC" = "Xyes" -a "X$USE_AS" = "Xno"; then 
    ${CC} -I../include -I$srcdir -DASSEMBLER $MYDEF $CPUDEF $OSDEF -c process.S
d88 1
a88 1
    $CC -o testprocess testprocess.o process.o preempt.o ${LWP_O} && exit 0
d96 1
a96 1
$AS -P -I../include -I$srcdir -DASSEMBLER $MYDEF $CPUDEF $OSDEF process.S -o process.o
d99 1
a99 1
$CC -o testprocess testprocess.o process.o preempt.o ${LWP_O} && exit 0
d109 1
a109 1
    $AS $ASDEF process.i -o process.o
d113 1
a113 1
    $CC -o testprocess testprocess.o process.o preempt.o ${LWP_O} && exit 0
d121 1
a121 1
$AS -I../include -I$srcdir -DASSEMBLER $MYDEF $CPUDEF $OSDEF process.S -o process.o
d124 1
a124 1
$CC -o testprocess testprocess.o process.o preempt.o ${LWP_O} && exit 0
d138 1
a138 1
    $CC -o testprocess testprocess.o process.o preempt.o ${LWP_O} && exit 0
d146 2
a147 3
$LN_S process.S foo.c 
$CPP -I../include -I$srcdir $MYDEF $CPUDEF $OSDEF foo.c > process.ss 
$RM -f foo.c
d152 1
a152 1
$CC -o testprocess testprocess.o process.o preempt.o ${LWP_O} && exit 0
d157 5
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d6 1
a6 1
#  $arla: make-process.o.sh.in,v 1.28 2002/11/29 19:48:14 tol Exp $
d32 1
a32 1
PROCESS_S="undefined_you_lose"
d34 1
a34 1
MYDEF="-DUSING_ASM"
d75 1
a75 1
	$CPP $MYDEF -P ${srcdir}/process-vpp.s > foo.s
d113 1
a113 1
# Some $AS does "interesting" things, like ignorings the -o flag
a149 13


#
# Try to use $CPP to preprocess
#

$CPP -I../include -I$srcdir $MYDEF $CPUDEF $OSDEF process.S > process.ss 
$AS process.ss -o process.o 
$RM -f process.ss

# process.o there ?
$CC -o testprocess testprocess.o process.o preempt.o ${LWP_O} && exit 0
$RM -f process.o
@


