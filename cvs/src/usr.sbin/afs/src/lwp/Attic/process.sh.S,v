head	1.7;
access;
symbols
	OPENBSD_5_2:1.6.0.24
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.22
	OPENBSD_5_0:1.6.0.20
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.18
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.16
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.12
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.14
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.10
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.8
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.6
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.4
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6;
locks; strict;
comment	@# @;


1.7
date	2012.08.23.06.21.52;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2007.03.03.13.40.45;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.17.20.54.47;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.16.05.19.52;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.16.04.00.51;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.15.14.58.14;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.15.00.22.39;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@the afs src tree can go away
@
text
@/*	$OpenBSD: process.sh.S,v 1.6 2007/03/03 13:40:45 deraadt Exp $	*/

/*
 * Copyright (c) 2006 Theo de Raadt
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <config.h>

#undef RCSID

#include <machine/asm.h>

/*
# savecontext(f, area1, newsp)
#     int (*f)(); struct savearea *area1; char *newsp;
#	r4             r5                      r6
*/

ENTRY(savecontext)

	mov.l	.L_PRE_Block, r0	/* PRE_Block = 1 */
	mov	#1, r1
	mov.l	r1, @@r0

	/* sp == r15 - automatically handled */
	mov.l	r14, @@-sp
	mov.l	r13, @@-sp
	mov.l	r12, @@-sp
	mov.l	r11, @@-sp
	mov.l	r10, @@-sp
	mov.l	r9, @@-sp
	mov.l	r8, @@-sp
	sts.l	pr, @@-sp
	sts.l	macl, @@-sp
	sts.l	mach, @@-sp

#if defined(__SH4__) && !defined(__SH4_NOFPU__)
	/* float point registers */
	sts	fpscr, r0
	mov.l	r0, @@-sp
	mov	#0, r1
	sts.l	fpul, @@-sp
	lds	r1, fpscr
	fmov.s	fr15, @@-sp
	fmov.s	fr14, @@-sp
	fmov.s	fr13, @@-sp
	fmov.s	fr12, @@-sp
	frchg
	fmov.s	fr15, @@-sp
	fmov.s	fr14, @@-sp
	fmov.s	fr13, @@-sp
	fmov.s	fr12, @@-sp
	lds	r0, fpscr
#endif

	mov.l	sp,@@r5			/* store top of stack */
	tst	r6,r6
	bt	1f

	mov	r6,sp			/* swap to new sp */
	mov	sp, r14			/* frame pointer */
1:
	jmp	@@r4
	 nop

	.align	2
.L_PRE_Block:	.long _C_LABEL(PRE_Block)
	SET_ENTRY_SIZE(savecontext)

/*
 * returnto(struct savearea *r4)
*/
ENTRY(returnto)
	mov.l	@@r4, sp

#if defined(__SH4__) && !defined(__SH4_NOFPU__)
	/* float point registers */
	mov	#0, r1
	lds	r1, fpscr
	frchg
	fmov.s	@@sp+, fr12
	fmov.s	@@sp+, fr13
	fmov.s	@@sp+, fr14
	fmov.s	@@sp+, fr15
	frchg
	fmov.s	@@sp+, fr12
	fmov.s	@@sp+, fr13
	fmov.s	@@sp+, fr14
	fmov.s	@@sp+, fr15
	lds.l	@@sp+, fpul
	lds.l	@@sp+, fpscr
#endif
	lds.l	@@sp+, mach
	lds.l	@@sp+, macl
	lds.l   @@sp+, pr
	mov.l	@@sp+, r8
	mov.l	@@sp+, r9
	mov.l	@@sp+, r10
	mov.l	@@sp+, r11
	mov.l	@@sp+, r12
	mov.l	@@sp+, r13
	mov.l	@@sp+, r14
	/* sp == r15 - automatically handled */

	mov.l	.L_PRE_Block2, r0	/* PRE_Block = 0 */
	mov	#0, r4
	mov.l	r4, @@r0

	rts
	 nop

	.align	2
.L_PRE_Block2:	.long _C_LABEL(PRE_Block)
	SET_ENTRY_SIZE(returnto)
@


1.6
log
@save macl/mach as well as fp registers, done with miod's help
@
text
@d1 1
a1 1
/*	$OpenBSD: process.sh.S,v 1.5 2006/11/17 20:54:47 deraadt Exp $	*/
@


1.5
log
@change PRE_Block to an int, which architectures like alpha can access
atomically. Adapt all the others (except s390 which is not fixed yet).

mips and hppa still do not work for some other reason.

testing by beck, ckuethe, todd, asm proofreading by miod
@
text
@d1 1
a1 1
/*	$OpenBSD: process.sh.S,v 1.4 2006/11/16 05:19:52 deraadt Exp $	*/
d55 2
d60 5
d69 6
d99 3
d106 7
d114 2
a115 1

@


1.4
log
@only do the sp swap if requested (the tests now appear to work)
@
text
@d1 1
a1 1
/*	$OpenBSD: process.sh.S,v 1.3 2006/11/16 04:00:51 drahn Exp $	*/
d44 1
a44 1
	mov.b	r1, @@r0
d104 1
a104 1
	mov.b	r4, @@r0
@


1.3
log
@more symmetric add support for fpu.
@
text
@d1 1
a1 1
/*	$OpenBSD: process.sh.S,v 1.2 2006/11/15 14:58:14 deraadt Exp $	*/
d65 3
a68 1

d70 1
@


1.2
log
@closer to correct, maybe
@
text
@d1 1
a1 1
/*	$OpenBSD: process.sh.S,v 1.1 2006/11/15 00:22:39 deraadt Exp $	*/
d41 6
a46 3
	mov.l	r4, @@-sp
	mov.l	r0, @@-sp		/* save on stack */
	mov.l	r15, @@-sp
d56 7
a62 3
	mov.l	.L_PRE_Block, r0	/* PRE_Block = 1 */
	mov	#1, r4
	mov.l	r4, @@r0
d65 1
a65 1
	mov.l	@@r6,sp			/* swap to new sp */
d67 2
a68 2
	mov.l	r4,@@-sp			/* call function */
	rts
d76 1
a76 1
 * returnto(struct savearea *a2)
d79 1
a79 1
	mov	r4, sp
d81 17
a97 9
	lds.l	@@r4+, pr
	mov.l	@@r4+, r8
	mov.l	@@r4+, r9
	mov.l	@@r4+, r10
	mov.l	@@r4+, r11
	mov.l	@@r4+, r12
	mov.l	@@r4+, r13
	mov.l	@@r4+, r14
	mov.l	@@r4+, r15
d99 1
a99 1
	mov.l	.L_PRE_Block2, r0	/* PRE_Block = 1 */
d101 1
a101 1
	mov.l	r4, @@r0
a102 3
	mov.l	@@sp+, r0
	mov.l	@@sp+, r4
	
@


1.1
log
@a start at a sh4 context switcher (what a bizzare architecture...)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 1
a40 1
ENTRY(_savecontext)
d65 2
a66 2
.L_PRE_Block:	.long _C_LABEL(PRE_Block) - _C_LABEL(_savecontext)
	SET_ENTRY_SIZE(_savecontext)
d71 1
a71 1
ENTRY(_returnto)
d95 2
a96 2
.L_PRE_Block2:	.long _C_LABEL(PRE_Block) - _C_LABEL(_returnto)
	SET_ENTRY_SIZE(_savecontext)
@

