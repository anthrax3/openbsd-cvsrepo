head	1.7;
access;
symbols
	OPENBSD_5_2:1.6.0.30
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.28
	OPENBSD_5_0:1.6.0.26
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.24
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.22
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.18
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.20
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.16
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.14
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.12
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.10
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2012.08.23.06.21.53;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2005.05.02.17.51.37;	author moritz;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.16.20.13.56;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.02.00.41.15;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.42.38;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.41.16;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.32;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.21.05;	author hin;	state Exp;
branches;
next	;


desc
@@


1.7
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1999 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sfvol_private.h>

RCSID("$arla: common.c,v 1.3 2000/10/03 00:18:41 lha Exp $");

/*
 * Translate the `opaque' to the `ino'.
 */

static int
local_ino2opaque (ino_t *ino, onode_opaque *opaque)
{
    unsigned char *ptr = opaque->data;

    opaque->size =  sizeof(ino_t) + 1;

    *ptr = 'L';
    ptr++;

    memcpy (ptr, ino, sizeof (*ino));
    return 0;
}

/*
 * The reverse
 */

static int
local_opaque2ino (onode_opaque *opaque, ino_t *ino)
{
    unsigned char *ptr = opaque->data;

    if (*ptr != 'L')
	return EINVAL;

    ptr++;
    
    memcpy (ino, ptr, sizeof (*ino));
    opaque->size = sizeof(ino_t) + 1;
    return 0;
}

/*
 *
 */

Bool
local_opaquep (onode_opaque *opaque)
{
    unsigned char *ptr = opaque->data;

    if (opaque->size < 1) return FALSE;
    if (*ptr == 'L') return TRUE;
    return FALSE;
}

/*
 *
 */

int
local_unlink_file (struct dp_part *dp, onode_opaque *o)
{
    char name[MAXPATHLEN];
    int ret;
    ino_t ino;

    ret = local_opaque2ino (o, &ino);
    if (ret)
	return ret;

    ret = local_create_name (dp, ino, name, sizeof (name));
    if (ret)
	return ret;

    ret = unlink (name);
    if (ret)
	return errno;

    return 0;

}

/*
 *
 */

int
local_open_file (struct dp_part *dp, onode_opaque *o,
		 int flags, int *fd)
{
    char p[MAXPATHLEN];
    ino_t ino;
    int ret;

    ret = local_opaque2ino (o, &ino);
    if (ret) return ret;
	
    ret = local_create_name (dp, ino, p, sizeof(p));
    if (ret) return ret;

    ret = open (p, flags, 0600);
    if (ret < 0) return errno;

    *fd = ret;
    return 0;
}

/*
 *
 */

int
local_create_name (struct dp_part *dp, int32_t num, char *name, size_t sz)
{
    size_t i;
    
    assert (name);

    i = snprintf (name, sz, "%s/%02x/%02x/%02x/%02x",
		  DP_NAME(dp),
		  (unsigned int) (num >> 24) & 0xff,
		  (unsigned int) (num >> 16) & 0xff,
		  (unsigned int) (num >> 8) & 0xff,
		  (unsigned int) num & 0xff);
    
    if (i == -1 || i >= sz)
	return(-1);
    return 0;
}

int
local_create_file (struct dp_part *dp, onode_opaque *o,
		   struct mnode *n)
{
    char name[MAXPATHLEN];
    char nodename[MAXPATHLEN];
    int fd, ret, i;
    struct stat sb;
    
    i = snprintf(nodename, sizeof(nodename), "%s/inodeXXXXXXXXXX",
		 DP_NAME(dp));
    if (i == -1 || i >= sizeof(nodename))
	return(ENOMEM);
    
    fd = mkstemp(nodename);
    if (fd == -1)
	return errno;
    ret = fstat(fd, &sb);
    if (ret == -1) {
	close(fd);
	unlink(nodename);
	return errno;
    }

    if (n) {
	n->fd = fd;
	n->sb = sb;
	n->flags.fdp = TRUE;
	n->flags.sbp = TRUE;
    } else {
	close(fd);
    }
 


    i = snprintf(name, sizeof(name), "%s/%02x", DP_NAME(dp), 
		 (unsigned int) (sb.st_ino >> 24) & 0xff);
    if (i == -1 || i >= sizeof(name)) {
	    ret = ENOMEM
	    goto bad;
    }
    mkdir(name, 0700);
    i = snprintf(name, sizeof(name), "%s/%02x/%02x", DP_NAME(dp), 
	     (unsigned int) (sb.st_ino >> 24) & 0xff, 
	     (unsigned int) (sb.st_ino >> 16) & 0xff);
    if (i == -1 || i >= sizeof(name)) {
	    ret = ENOMEM
	    goto bad;
    }

    mkdir(name, 0700);
    i = snprintf(name, sizeof(name), "%s/%02x/%02x/%02x", DP_NAME(dp), 
	     (unsigned int) (sb.st_ino >> 24) & 0xff, 
	     (unsigned int) (sb.st_ino >> 16) & 0xff,
	     (unsigned int) (sb.st_ino >> 8) & 0xff);
    if (i == -1 || i >= sizeof(name)) {
	    ret = ENOMEM
	    goto bad;
    }
    if (mkdir(name, 0700) == -1) {
	    ret = errno;
	    goto bad;
    }
    if (local_create_name (dp, sb.st_ino, name, sizeof(name)) == -1) {
	    ret = ENOMEM;
	    goto bad;
    }

    ret = rename(nodename, name);
    if (ret < 0) {
	ret = errno;
	goto bad;
    }

    ret = local_ino2opaque (&sb.st_ino, o);
    if (ret) {
	ret = errno;
	unlink (name);
	return ret;
    }
    return 0;
 bad:
    unlink(nodename);
    return(ret);
	    
}

@


1.6
log
@fix snprintf misuse. ok bob@@ hin@@
@
text
@@


1.5
log
@afs cleanup, realloc strings, abort, etc.
testing by beck, hin, jose, fries. ok deraadt@@
@
text
@d159 1
a159 1
    if (i >= sz)
d175 1
a175 1
    if (i > sizeof(nodename))
d201 1
a201 1
    if (i > sizeof(name)) {
d209 1
a209 1
    if (i > sizeof(name)) {
d219 1
a219 1
    if (i > sizeof(name)) {
@


1.4
log
@Merge
@
text
@d160 1
a160 1
	abort();
d170 1
a170 1
    int fd, ret;
d173 5
a177 1
    snprintf(nodename, sizeof(nodename), "%s/inodeXXXXXXXXXX", DP_NAME(dp));
d182 1
a182 1
    if (ret < 0) {
d196 2
d199 6
a204 2
    snprintf(name, sizeof(name), "%s/%02x", DP_NAME(dp), 
	     (unsigned int) (sb.st_ino >> 24) & 0xff);
d206 1
a206 1
    snprintf(name, sizeof(name), "%s/%02x/%02x", DP_NAME(dp), 
d209 5
d215 1
a215 1
    snprintf(name, sizeof(name), "%s/%02x/%02x/%02x", DP_NAME(dp), 
d219 12
a230 2
    mkdir(name, 0700);
    local_create_name (dp, sb.st_ino, name, sizeof(name));
d235 1
a235 2
	unlink (nodename);
	return ret;
a243 1

d245 4
@


1.3
log
@bump mktemp randomness from 6 to 10 X's
@
text
@d36 1
a36 1
RCSID("$KTH: common.c,v 1.3 2000/10/03 00:18:41 lha Exp $");
@


1.2
log
@merge
@
text
@d173 1
a173 1
    snprintf(nodename, sizeof(nodename), "%s/inodeXXXXXX", DP_NAME(dp));
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d36 1
a36 1
RCSID("$Id: common.c,v 1.2 2000/05/25 01:17:10 lha Exp $");
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d41 1
a41 1
RCSID("$KTH: common.c,v 1.3 2000/10/03 00:18:41 lha Exp $");
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d36 1
a36 1
RCSID("$arla: common.c,v 1.3 2000/10/03 00:18:41 lha Exp $");
@


