head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.38
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.36
	OPENBSD_5_0:1.3.0.34
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.32
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.30
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.08.23.06.21.53;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.42.38;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.41.18;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.33;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.21.06;	author hin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1999 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* $arla: voldb.h,v 1.21 2002/02/07 17:59:58 lha Exp $ */

#ifndef FILBUNKE_VOLDB_H
#define FILBUNKE_VOLDB_H 1

#include <volumeserver.h>
#include <fs_def.h>
#include <vstatus.h>

/*
 * Of this space half is shared of the voldb and the underlaying
 * layer.
 */

#define VOLDB_HEADER_SIZE (10*4)
#define VOLDB_HEADER_HALF (VOLDB_HEADER_SIZE/2) 

/*
 * Data structure for a file (link is same)
 */

struct voldb_file_entry {    
    uint32_t nextptr;
    uint32_t unique;
    onode_opaque ino;
    uint32_t spare2;		/* Must be zero */
    uint32_t InterfaceVersion;
    uint32_t FileType;
    uint32_t LinkCount;
    uint32_t Length;
    uint32_t spare3;		/* Must be zero */
    uint32_t DataVersion;
    uint32_t Author;
    uint32_t Owner;
    uint32_t UnixModeBits;
    uint32_t ParentVnode;
    uint32_t ParentUnique;
    uint32_t SegSize;
    uint32_t ServerModTime;
    uint32_t spare4;		/* Must be zero */
    uint32_t Group;
    uint32_t spare5;		/* Must be zero */
};

/*
 * Data structure for an acl_entry
 */

struct acl_entry {
    uint32_t owner;
    uint32_t flags;
};

/*
 * Data structure for a dir
 */

struct voldb_dir_entry {    
    uint32_t nextptr;
    uint32_t unique;
    onode_opaque ino;
    uint32_t spare2;		/* Must be zero */
    uint32_t InterfaceVersion;
    uint32_t FileType;
    uint32_t LinkCount;
    uint32_t Length;
    uint32_t spare3;		/* Must be zero */
    uint32_t DataVersion;
    uint32_t Author;
    uint32_t Owner;
    uint32_t UnixModeBits;
    uint32_t ParentVnode;
    uint32_t ParentUnique;
    uint32_t SegSize;
    uint32_t ServerModTime;
    uint32_t spare4;		/* Must be zero */
    uint32_t Group;
    uint32_t spare5;		/* Must be zero */
    struct acl_entry negacl[FS_MAX_ACL];
    struct acl_entry acl[FS_MAX_ACL];
};

struct voldb_entry {
    int32_t type;
    union {
	struct voldb_dir_entry dir;
	struct voldb_file_entry file;
    } u;
};

/* defines */

#define VOLDB_FILE 0x1
#define VOLDB_DIR 0x2

#define VOLDB_DEFAULT_TYPE 0

#define VOLDB_FREELIST_END 0xffffffff
#define VOLDB_ENTRY_USED 0xfffffffe

/* forward declarations */

struct voldb;

/* prototypes */

int
voldb_init (int fd, int32_t type, int32_t volume, struct voldb **db);

int
voldb_close (struct voldb *db);

int
voldb_put_entry (struct voldb *db, int32_t num, struct voldb_entry *e);

int
voldb_get_size (struct voldb *db, int32_t *total_size, int32_t *num_entries);

int
voldb_get_entry (struct voldb *db, int32_t num, struct voldb_entry *e);

int
voldb_put_acl (struct voldb *db, uint32_t num, struct voldb_dir_entry *e);

int
voldb_pretty_print_file (struct voldb_file_entry *e);

int
voldb_pretty_print_dir (struct voldb_dir_entry *e);

int
voldb_pretty_print_header (struct voldb *db);

int
voldb_create_header (int fd, int type, int flags);

int
voldb_flush (struct voldb *db);

int
voldb_new_entry (struct voldb *db, uint32_t *num, uint32_t *unique);

int
voldb_del_entry (struct voldb *db, uint32_t num, onode_opaque *ino);

int
voldb_header_info (struct voldb *db, 
		   uint32_t *num,
		   uint32_t *flags);

uint32_t
voldb_get_volume (struct voldb *db);

int
voldb_write_hdr (int fd, struct voldb *db);

void
voldb_update_time(struct voldb_entry *e, time_t t);

/* vol.c */

int
vol_getname (uint32_t num, char *str, size_t sz);

int
vol_getfullname (uint32_t part, uint32_t num, char *str, size_t sz);

int
vol_read_header (int fd, volintInfo *info);

int
vol_write_header (int fd, volintInfo *info);

int
vol_create (int fd, uint32_t num, const char *name,
	    uint32_t type, uint32_t parent);

void
vol_pretty_print_info (FILE *out, volintInfo *info);

int
voldb_expand (struct voldb *db, int32_t num);

int
voldb_rebuild (struct voldb *db);

enum voldb_newnum_sizes {  VOLDB_ENTEND_NUM = 10 } ;

const char *
vol_voltype2name (int32_t type);


int
afs_dir_p (int32_t vno);

int32_t
dir_afs2local (int32_t vno);

int32_t
dir_local2afs (int32_t vno);

int32_t
file_afs2local (int32_t vno);

int32_t
file_local2afs (int32_t vno);

#endif /*  FILBUNKE_VOLDB_H 1 */
@


1.3
log
@Merge
@
text
@@


1.2
log
@merge
@
text
@d34 1
a34 1
/* $KTH: voldb.h,v 1.17 2000/10/03 00:20:19 lha Exp $ */
d56 2
a57 2
    u_int32_t nextptr;
    u_int32_t unique;
d59 17
a75 17
    u_int32_t spare2;		/* Must be zero */
    u_int32_t InterfaceVersion;
    u_int32_t FileType;
    u_int32_t LinkCount;
    u_int32_t Length;
    u_int32_t spare3;		/* Must be zero */
    u_int32_t DataVersion;
    u_int32_t Author;
    u_int32_t Owner;
    u_int32_t UnixModeBits;
    u_int32_t ParentVnode;
    u_int32_t ParentUnique;
    u_int32_t SegSize;
    u_int32_t ServerModTime;
    u_int32_t spare4;		/* Must be zero */
    u_int32_t Group;
    u_int32_t spare5;		/* Must be zero */
d83 2
a84 2
    u_int32_t owner;
    u_int32_t flags;
d92 2
a93 2
    u_int32_t nextptr;
    u_int32_t unique;
d95 17
a111 17
    u_int32_t spare2;		/* Must be zero */
    u_int32_t InterfaceVersion;
    u_int32_t FileType;
    u_int32_t LinkCount;
    u_int32_t Length;
    u_int32_t spare3;		/* Must be zero */
    u_int32_t DataVersion;
    u_int32_t Author;
    u_int32_t Owner;
    u_int32_t UnixModeBits;
    u_int32_t ParentVnode;
    u_int32_t ParentUnique;
    u_int32_t SegSize;
    u_int32_t ServerModTime;
    u_int32_t spare4;		/* Must be zero */
    u_int32_t Group;
    u_int32_t spare5;		/* Must be zero */
d131 3
d156 1
a156 1
voldb_put_acl (struct voldb *db, u_int32_t num, struct voldb_dir_entry *e);
d174 1
a174 1
voldb_new_entry (struct voldb *db, u_int32_t *num, u_int32_t *unique);
d177 1
a177 1
voldb_del_entry (struct voldb *db, u_int32_t num, onode_opaque *ino);
d181 2
a182 2
		   u_int32_t *num,
		   u_int32_t *flags);
d184 1
a184 1
u_int32_t
d196 1
a196 1
vol_getname (u_int32_t num, char *str, size_t sz);
d199 1
a199 1
vol_getfullname (u_int32_t part, u_int32_t num, char *str, size_t sz);
d208 2
a209 2
vol_create (int fd, u_int32_t num, const char *name,
	    u_int32_t type, u_int32_t parent);
d213 6
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d34 1
a34 1
/* $Id: voldb.h,v 1.16 2000/07/15 23:28:45 lha Exp $ */
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d39 1
a39 1
/* $KTH: voldb.h,v 1.17 2000/10/03 00:20:19 lha Exp $ */
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d34 1
a34 1
/* $arla: voldb.h,v 1.21 2002/02/07 17:59:58 lha Exp $ */
d56 2
a57 2
    uint32_t nextptr;
    uint32_t unique;
d59 17
a75 17
    uint32_t spare2;		/* Must be zero */
    uint32_t InterfaceVersion;
    uint32_t FileType;
    uint32_t LinkCount;
    uint32_t Length;
    uint32_t spare3;		/* Must be zero */
    uint32_t DataVersion;
    uint32_t Author;
    uint32_t Owner;
    uint32_t UnixModeBits;
    uint32_t ParentVnode;
    uint32_t ParentUnique;
    uint32_t SegSize;
    uint32_t ServerModTime;
    uint32_t spare4;		/* Must be zero */
    uint32_t Group;
    uint32_t spare5;		/* Must be zero */
d83 2
a84 2
    uint32_t owner;
    uint32_t flags;
d92 2
a93 2
    uint32_t nextptr;
    uint32_t unique;
d95 17
a111 17
    uint32_t spare2;		/* Must be zero */
    uint32_t InterfaceVersion;
    uint32_t FileType;
    uint32_t LinkCount;
    uint32_t Length;
    uint32_t spare3;		/* Must be zero */
    uint32_t DataVersion;
    uint32_t Author;
    uint32_t Owner;
    uint32_t UnixModeBits;
    uint32_t ParentVnode;
    uint32_t ParentUnique;
    uint32_t SegSize;
    uint32_t ServerModTime;
    uint32_t spare4;		/* Must be zero */
    uint32_t Group;
    uint32_t spare5;		/* Must be zero */
a130 3
#define VOLDB_FREELIST_END 0xffffffff
#define VOLDB_ENTRY_USED 0xfffffffe

d153 1
a153 1
voldb_put_acl (struct voldb *db, uint32_t num, struct voldb_dir_entry *e);
d171 1
a171 1
voldb_new_entry (struct voldb *db, uint32_t *num, uint32_t *unique);
d174 1
a174 1
voldb_del_entry (struct voldb *db, uint32_t num, onode_opaque *ino);
d178 2
a179 2
		   uint32_t *num,
		   uint32_t *flags);
d181 1
a181 1
uint32_t
d193 1
a193 1
vol_getname (uint32_t num, char *str, size_t sz);
d196 1
a196 1
vol_getfullname (uint32_t part, uint32_t num, char *str, size_t sz);
d205 2
a206 2
vol_create (int fd, uint32_t num, const char *name,
	    uint32_t type, uint32_t parent);
a209 6

int
voldb_expand (struct voldb *db, int32_t num);

int
voldb_rebuild (struct voldb *db);
@


