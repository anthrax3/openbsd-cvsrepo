head	1.5;
access;
symbols
	OPENBSD_5_2:1.4.0.30
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.28
	OPENBSD_5_0:1.4.0.26
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.24
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.22
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.18
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.20
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.16
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.14
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.12
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.10
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.8
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.6
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2012.08.23.06.21.53;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	2005.05.02.17.51.37;	author moritz;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.42.38;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.41.18;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.33;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.21.05;	author hin;	state Exp;
branches;
next	;


desc
@@


1.5
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1999 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * the volume data file
 */

#include "voldb_locl.h"

RCSID("$arla: vol.c,v 1.7 2002/02/07 17:59:55 lha Exp $");

/*
 * get the partial name of the volume
 * `num' points out the volume and the name is passed back in the
 * string `str' that has size `sz'.
 */

int
vol_getname (uint32_t num, char *str, size_t sz)
{
    int i;
    i = snprintf (str, sz, "vol%08u", num);
    assert (i > 0 && i < sz);
    return 0;
}

/*
 * get the full name of the volume.
 * `part' and `num' points out the volume, the named of passed back in
 * `str' that has the size of `sz'.
 */

int
vol_getfullname (uint32_t part, uint32_t num, char *str, size_t sz)
{
    int ret;
    char volname[VOLSER_MAXVOLNAME];

    ret = vol_getname (num, volname, sizeof (volname));
    if (ret)
	return ret;

    if (part <= 'z' - 'a')
	ret = snprintf (str, sz, "%s/vicep%c/%s",
			dpart_root, 'a' + part, volname);
#if 0
    else if (part <= ('z' - 'a') * ('z' - 'a'))
	ret = snprintf (str, sz, "%s/vicep%c%c/%s", dpart_root,
		      'a' + part / ('z' - 'a'),
		      'a' + part % ('z' - 'a'),
		      volname);
#endif
    else
	return EINVAL; /* XXX */
	
    assert (ret > 0 && ret < siz);
    return 0;
}

/*
 * read header from stable storage
 */

int
vol_read_header (int fd, volintInfo *info)
{
    struct stat sb;
    char *buf, *ptr;
    size_t size;
    int ret;

    assert (info);

    ret = fstat (fd, &sb);
    if (ret)
	return errno; /* XXX */

    if (sb.st_size != VOLINTINFO_SIZE)
	return EINVAL;

    ret = lseek (fd, 0, SEEK_SET);
    if (ret)
	return errno; /* XXX */

    buf = malloc (VOLINTINFO_SIZE);
    if (buf == NULL)
	return ENOMEM; /* XXX */

    ret = read (fd, buf, VOLINTINFO_SIZE);
    if (ret <= 0) {
	free (buf);
	return ret;
    }
    
    size = VOLINTINFO_SIZE;
    ptr = ydr_decode_volintInfo(info, buf, &size);
    if (ptr == NULL) {
	free (buf);
	return errno; /* XXX */ 
    }

    free (buf);

    return 0;
}

/*
 * write header to stable storage
 */

int
vol_write_header (int fd, volintInfo *info)
{
    char *buf, *ptr;
    size_t size;
    int ret;

    assert (info);

    ret = lseek (fd, 0, SEEK_SET);
    if (ret)
	return errno; /* XXX */

    size = VOLINTINFO_SIZE;
    buf = malloc (size);
    if (buf == NULL)
	return ENOMEM; /* XXX */

    ptr = ydr_encode_volintInfo(info, buf, &size);
    if (ptr == NULL) {
	free (buf);
	return errno; /* XXX */ 
    }
    
    size = ptr - buf;
    ret = write (fd, buf, size);
    if (ret != size)
	ret = errno;
    else
	ret = 0;

    free (buf);

    return ret;

}

/*
 * create a partition `part' with number `num', name `name'
 * of type `type' that has `parent' as parent.
 */

int
vol_create (int fd, uint32_t num, const char *name,
	    uint32_t type, uint32_t parent)
{
    int ret;
    struct timeval tv;
    volintInfo info;

    gettimeofday (&tv, NULL);

    strlcpy (info.name, name, sizeof (info.name));
    info.name[sizeof (info.name)-1] = '\0';
    info.type = type;
    info.volid = num;
    info.backupID = 0;
    info.parentID = parent;
    info.cloneID = 0;
    info.status = 0;
    info.copyDate = 0;
    info.inUse = 1;
    info.needsSalvaged = 0;
    info.destroyMe = 'c';
    info.creationDate = tv.tv_sec;
    info.accessDate = tv.tv_sec;
    info.updateDate = tv.tv_sec;
    info.backupDate = tv.tv_sec;
    info.dayUse = 0;
    info.filecount = 1;
    info.maxquota = 5000; /* XXX */
    info.size = 0;
    info.flags = 0;
    info.spare0 = 0;
    info.spare1 = 0;
    info.spare2 = 0;
    info.spare3 = 0;

    ret = vol_write_header (fd, &info);
    close (fd);
    return ret;
}


/*
 * Pretty print the volintInfo structure
 */

void
vol_pretty_print_info (FILE *out, volintInfo *info)
{
    assert (info);

    fprintf (out, "name:\t\t%-32s\n", info->name);
    fprintf (out, "type:\t\t%d\n", info->type);
    fprintf (out, "volid: %d backupID: %d parentID: %d cloneID: %d\n", 
	     info->volid, info->backupID, info->parentID, info->cloneID);
    fprintf (out, "status:\t\t0x%x\n", info->status);
    fprintf (out, "copyDate:\t%d\n", info->copyDate);
    fprintf (out, "inUse:\t\t%d\n", info->inUse);
    fprintf (out, "needsSalvaged:\t%d\n", info->needsSalvaged);
    fprintf (out, "destroyMe:\t%d\n", info->destroyMe);
    
    fprintf (out, " XXX \n");
}

/*
 *
 */

static char *type_array[] = {
    "RW",
    "RO",
    "BACK",
};

const char *
vol_voltype2name (int32_t type)
{
    if (type < 0 || type > 2)
	return "UNKN";
    return type_array[type];
}

@


1.4
log
@fix snprintf misuse. ok bob@@ hin@@
@
text
@@


1.3
log
@Merge
@
text
@d53 1
a53 1
    assert (i > 0);
d86 1
a86 1
    assert (ret > 0);
@


1.2
log
@merge
@
text
@d40 1
a40 1
RCSID("$KTH: vol.c,v 1.6 2000/12/29 20:16:01 tol Exp $");
d49 1
a49 1
vol_getname (u_int32_t num, char *str, size_t sz)
d64 1
a64 1
vol_getfullname (u_int32_t part, u_int32_t num, char *str, size_t sz)
d184 2
a185 2
vol_create (int fd, u_int32_t num, const char *name,
	    u_int32_t type, u_int32_t parent)
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d40 1
a40 1
RCSID("$Id: vol.c,v 1.4 2000/08/16 02:31:19 lha Exp $");
d74 2
a75 1
	ret = snprintf (str, sz, "/vicep%c/%s", 'a' + part, volname);
d78 1
a78 1
	ret = snprintf (str, sz, "/vicep%c%c/%s", 
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d45 1
a45 1
RCSID("$KTH: vol.c,v 1.6 2000/12/29 20:16:01 tol Exp $");
d79 1
a79 2
	ret = snprintf (str, sz, "%s/vicep%c/%s",
			dpart_root, 'a' + part, volname);
d82 1
a82 1
	ret = snprintf (str, sz, "%s/vicep%c%c/%s", dpart_root,
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d40 1
a40 1
RCSID("$arla: vol.c,v 1.7 2002/02/07 17:59:55 lha Exp $");
d49 1
a49 1
vol_getname (uint32_t num, char *str, size_t sz)
d64 1
a64 1
vol_getfullname (uint32_t part, uint32_t num, char *str, size_t sz)
d184 2
a185 2
vol_create (int fd, uint32_t num, const char *name,
	    uint32_t type, uint32_t parent)
@


