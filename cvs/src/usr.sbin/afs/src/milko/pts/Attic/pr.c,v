head	1.5;
access;
symbols
	OPENBSD_5_2:1.4.0.26
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.24
	OPENBSD_5_0:1.4.0.22
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.20
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.18
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.14
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.16
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.12
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.10
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2012.08.23.06.21.53;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	2006.03.23.02.52.14;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.42.38;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.41.19;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.33;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.21.06;	author hin;	state Exp;
branches;
next	;


desc
@@


1.5
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1998, 1999 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <sys/types.h>
#include <ctype.h>
#include <assert.h>

#include <rx/rx.h>
#include <rx/rx_null.h>

#include <ports.h>
#include <ko.h>
#include <bool.h>

#ifdef KERBEROS
#ifdef HAVE_OPENSSL
#include <openssl/des.h>
#else
#include <des.h>
#endif
#include <krb.h>
#include <rxkad.h>
#include "rxkad_locl.h"
#endif

#include <err.h>

#ifndef HAVE_UNISTD_H
#include <unistd.h>
#endif

#include <service.h>

#include "pts.h"
#include "pts.ss.h"
#include "ptserver.h"
#include "pts.ss.h"

#include "msecurity.h"

#include <mlog.h>
#include <mdebug.h>

RCSID("$arla: pr.c,v 1.24 2002/04/20 15:57:17 lha Exp $");

/*
 *
 */

int
PR_NameToID(struct rx_call *call, const namelist *nlist, idlist *ilist)
{
    int i;
    int status;

    mlog_log (MDEBPR, "PR_NameToID: securityIndex: %d ilen: %d",
	      call->conn->securityIndex, nlist->len);

#ifdef KERBEROS
    if (call->conn->securityIndex == 2) {
	serv_con_data *cdat = call->conn->securityData;
	mlog_log (MDEBPR, "  user: %s.%s@@%s",
		  cdat->user->name,
		  cdat->user->instance,
		  cdat->user->realm);
    }
#endif

    ilist->len = nlist->len;
    ilist->val = malloc(sizeof(int) * ilist->len);
    if (ilist->val == NULL)
	return PRDBBAD;

    for (i = 0; i < nlist->len; i++) {
	mlog_log (MDEBPR, "  name: %s", nlist->val[i]);
	
	status = conv_name_to_id(nlist->val[i], &ilist->val[i]);
	if (status == PRNOENT)
	    ilist->val[i] = PR_ANONYMOUSID;
	else if (status)
	    return status;
    }
    return 0;
}

/*
 *
 */

int
PR_IDToName(struct rx_call *call, const idlist *ilist, namelist *nlist)
{
    int i;
    int status;
    
    mlog_log (MDEBPR, "PR_IDToName: securityIndex: %d ilen %d",
	      call->conn->securityIndex, ilist->len);

    
    if (ilist->len < 0 || ilist->len >= PR_MAXLIST)
	return PRTOOMANY;

    nlist->len = ilist->len;

    if (ilist->len == 0) {
	nlist->val = NULL;
	return 0;
    }

    nlist->val = calloc(nlist->len, sizeof(prname));
    if (nlist->val == NULL)
	return PRDBBAD;

    for (i = 0; i < ilist->len; i++) {
	mlog_log (MDEBPR, "  id: %d", ilist->val[i]);
	status = conv_id_to_name(ilist->val[i], nlist->val[i]);
	if (status == PRNOENT)
	    snprintf (nlist->val[i], PR_MAXNAMELEN, "%d", ilist->val[i]);
	else if (status)
	    return status;
    }
    return 0;
}

/*
 *
 */

int
PR_NewEntry(struct rx_call *call, const char *name, 
	    const int32_t flag, const int32_t oid, int32_t *id)
{
    int error;
    int32_t owner;
    char *localname;
    Bool localp;

    mlog_log (MDEBPR, "PR_NewEntry: securityIndex: %d name: %s oid: %d",
	      call->conn->securityIndex, name, oid);


    /* XXX should be authuser? */
    if (!sec_is_superuser(call))
	return PRPERM;

    localname = localize_name(name, &localp);

    /* XXX do it properly! */
    if (localp == FALSE)
	owner = PR_SYSADMINID;
    else
	owner = oid;

    if ((flag & PRTYPE) == PRUSER) {
	error = next_free_user_id(id);
	if (!error)
	    error = create_user(localname, *id, owner, PR_SYSADMINID); /* XXX */
    } else if ((flag & PRTYPE) == PRGRP) {
	error = next_free_group_id(id);
	if (!error)
	    error = create_group(localname, *id, owner, PR_SYSADMINID); /* XXX */
    } else {
	error = PRPERM;
    }

    return error;
}

/*
 *
 */

int
PR_INewEntry(struct rx_call *call, const char *name, 
	     const int32_t id, const int32_t oid)
{
    int error;
    char *localname;
    Bool localp;
    int32_t owner = PR_SYSADMINID;
    int32_t creator = PR_SYSADMINID;
    
    /* XXX should be authuser? */
    if (!sec_is_superuser(call))
	return PRPERM;

    mlog_log (MDEBPR, "PR_INewEntry securityIndex: %d name: %s oid: %d",
	      call->conn->securityIndex, name, oid);

    localname = localize_name(name, &localp);
    
    /* XXX do it properly! */
    if (localp == TRUE)
	owner = oid;
    
    if (id > 0)
	error = create_user(localname, id, owner, creator); /* XXX */
    else if (id < 0)
	error = create_group(localname, id, owner, creator); /* XXX */
    else
	error = PRPERM;

    return error;
}

/*
 *
 */

int
PR_ListEntry(struct rx_call *call, const int32_t id,
	     struct prcheckentry *entry)
{
    prentry pr_entry;
    int status;
   
    mlog_log (MDEBPR, "PR_ListEntry securityIndex: %d id: %d", 
	      call->conn->securityIndex, id);
#ifdef KERBEROS
    if (call->conn->securityIndex == 2) {
	serv_con_data *cdat = call->conn->securityData;
	mlog_log (MDEBPR, "PR_ListEntry user: %s.%s@@%s",
		  cdat->user->name,
		  cdat->user->instance,
		  cdat->user->realm);
    }
#endif

    memset(&pr_entry, 0, sizeof(pr_entry));
    status = read_prentry(id, &pr_entry);
    if (status)
	return status;
    entry->flags = pr_entry.flags;
    entry->id = pr_entry.id;
    entry->owner = pr_entry.owner;
    entry->creator = pr_entry.creator;
    entry->ngroups = pr_entry.ngroups;
    entry->nusers = pr_entry.nusers;
    entry->count = pr_entry.count;
    memcpy(entry->reserved, pr_entry.reserved, sizeof(pr_entry.reserved));
    strlcpy(entry->name, pr_entry.name, PR_MAXNAMELEN);

    return 0;
}

/*
 *
 */

int
PR_DumpEntry(struct rx_call *call, const int32_t pos, 
	     struct prdebugentry *entry)
{
    mlog_log (MDEBPR, "PR_DumpEntry");
    return -1;
}

/*
 *
 */

int
PR_ChangeEntry(struct rx_call *call, const int32_t id, const char *name,
	       const int32_t oid, const int32_t newid)
{
    mlog_log (MDEBPR, "PR_ChangeEntry");
    return -1;
}


/*
 *
 */

int
PR_SetFieldsEntry(struct rx_call *call, const int32_t id, const int32_t mask,
		  const int32_t flags, const int32_t ngroups, 
		  const int32_t nusers,
		  const int32_t spare1, const int32_t spare2)
{
    mlog_log (MDEBPR, "PR_SetFieldsEntry");
    return -1;
}


/*
 *
 */

int
PR_Delete(struct rx_call *call, const int32_t id)
{
    mlog_log (MDEBPR, "PR_Delete");

    if (!sec_is_superuser(call))
	return PRPERM;

    return -1;
}


/*
 *
 */

int
PR_WhereIsIt(struct rx_call *call, const int32_t id, int32_t *ps)
{
    mlog_log (MDEBPR, "PR_WhereIsIt");
    return -1;
}


/*
 *
 */

int
PR_AddToGroup(struct rx_call *call, const int32_t uid, const int32_t gid)
{
    mlog_log (MDEBPR, "PR_AddToGroup");

    if (!sec_is_superuser(call))
      return PRPERM;

    return addtogroup(uid,gid);
}


/*
 *
 */

int
PR_RemoveFromGroup(struct rx_call *call, const int32_t id, const int32_t gid)
{
    mlog_log (MDEBPR, "PR_RemoveFromGroup");

    if (!sec_is_superuser(call))
	return PRPERM;

    return removefromgroup(id, gid);
}


/*
 *
 */

int
PR_ListMax(struct rx_call *call, int32_t *uid, int32_t *gid)
{
    mlog_log (MDEBPR, "PR_ListMax");
    *uid = pr_header.maxID;
    *gid = pr_header.maxGroup;
    return 0;
}


/*
 *
 */

int
PR_SetMax(struct rx_call *call, const int32_t uid, const int32_t gflag)
{
    mlog_log (MDEBPR, "PR_SetMax");

    if(gflag) {
	pr_header.maxGroup = uid;
    } else {
	pr_header.maxID = uid;
    }

    return 0;
}


/*
 *
 */

int
PR_ListElements(struct rx_call *call, const int32_t id, 
		prlist *elist, int32_t *over)
{
    mlog_log (MDEBPR, "PR_ListElements");

    return listelements(id, elist, FALSE);
}


/*
 *
 */

int
PR_GetCPS(struct rx_call *call, const int32_t id, 
	  prlist *elist, int32_t *over)
{
    mlog_log (MDEBPR, "PR_GetCPS");

    return listelements(id, elist, TRUE);
}


/*
 *
 */

int
PR_ListOwned(struct rx_call *call, const int32_t id, 
	     prlist *elist, int32_t *over)
{
    mlog_log (MDEBPR, "PR_ListOwned");
    return -1;
}


/*
 *
 */

int
PR_IsAMemberOf(struct rx_call *call, const int32_t uid, const int32_t gid,
	       int32_t *flag)
{

  /* XXX Check authorization */

    prlist elist;
    int ret=0;
    int i=0;

    mlog_log (MDEBPR, "PR_IsAMemberOf");

    if((ret = listelements(uid, &elist, TRUE)) !=0) {
	free(elist.val);
	return ret;
    }

    for(i=0; i < elist.len ; i++) {
	if(elist.val[i] == gid) {
	    *flag=1;
	    free(elist.val);
	    return 0;
	}
    }
    
    free(elist.val);
    return 0;
}
@


1.4
log
@use calloc better; adobriyan@@gmail
@
text
@@


1.3
log
@Merge
@
text
@d144 1
a144 1
    nlist->val = calloc(1, sizeof(prname) * nlist->len);
@


1.2
log
@merge
@
text
@d46 1
d50 3
d54 1
d75 4
a78 1
RCSID("$KTH: pr.c,v 1.21 2001/01/04 12:06:17 mattiasa Exp $");
a88 1
    char *localname;
d90 1
a90 1
    pt_debug (PRDB_RPC, "PR_NameToID: securityIndex: %d ilen: %d",
d96 4
a99 4
	pt_debug (PRDB_RPC,"  user: %s.%s@@%s",
	       cdat->user->name,
	       cdat->user->instance,
	       cdat->user->realm);
d109 1
a109 1
	pt_debug (PRDB_RPC,"  name: %s", nlist->val[i]);
d111 1
a111 3
	localname = localize_name(nlist->val[i]);

	status = conv_name_to_id(localname, &ilist->val[i]);
d130 1
a130 1
    pt_debug (PRDB_RPC, "PR_IDToName: securityIndex: %d ilen %d",
d149 1
a149 1
	pt_debug (PRDB_RPC,"  id: %d", ilist->val[i]);
d168 1
d170 1
d172 1
a172 1
    pt_debug (PRDB_RPC, "PR_NewEntry: securityIndex: %d name: %s oid: %d",
d176 1
a176 1
/* XXX should be authuser? */
d180 8
a187 1
    localname = localize_name(name);
d189 3
a191 6
	error = conv_name_to_id(localname, id);
	if (error == PRNOENT) {
	    *id = next_free_user_id();
	    error = create_user(localname, *id, oid, PR_SYSADMINID); /* XXX */
	} else
	    error = PREXIST;
d193 3
a195 6
	error = conv_name_to_id(localname, id);
	if (error == PRNOENT) {
	    *id = next_free_group_id();
	    error = create_group(localname, *id, oid, PR_SYSADMINID); /* XXX */
	} else
	    error = PREXIST;
a211 1
    int tempid;
d213 5
a217 1

d221 1
a221 1
    pt_debug (PRDB_RPC, "PR_INewEntry securityIndex: %d name: %s oid: %d",
d224 11
a234 14
    localname = localize_name(name);
    if (id > 0) {
	error = conv_name_to_id(localname, &tempid);
	if (error == PRNOENT) {
	    error = create_user(localname, id, oid, PR_SYSADMINID); /* XXX */
	} else
	    error = PREXIST;
    } else if (id < 0) {
	error = conv_name_to_id(localname, &tempid);
	if (error == PRNOENT) {
	    error = create_group(localname, id, oid, PR_SYSADMINID); /* XXX */
	} else
	    error = PREXIST;
    } else {
a235 1
    }
d251 1
a251 1
    pt_debug (PRDB_RPC, "PR_ListEntry securityIndex: %d id: %d", 
d256 1
a256 1
	pt_debug (PRDB_RPC, "PR_ListEntry user: %s.%s@@%s",
d264 1
a264 1
    status = get_pr_entry_by_id(id, &pr_entry);
d288 1
a288 1
    pt_debug (PRDB_RPC, "PR_DumpEntry");
d300 1
a300 1
    pt_debug (PRDB_RPC, "PR_ChangeEntry");
d315 1
a315 1
    pt_debug (PRDB_RPC, "PR_SetFieldsEntry");
d327 5
a331 1
    pt_debug (PRDB_RPC, "PR_Delete");
d343 1
a343 1
    pt_debug (PRDB_RPC, "PR_WhereIsIt");
d355 1
a355 1
    pt_debug (PRDB_RPC, "PR_AddToGroup");
d371 1
a371 1
    pt_debug (PRDB_RPC, "PR_RemoveFromGroup");
d387 1
a387 1
    pt_debug (PRDB_RPC, "PR_ListMax");
d401 1
a401 1
    pt_debug (PRDB_RPC, "PR_SetMax");
d404 1
a404 1
      pr_header.maxGroup = uid;
d406 1
a406 1
      pr_header.maxID = uid;
d408 1
d421 1
a421 1
    pt_debug (PRDB_RPC, "PR_ListElements");
d435 1
a435 1
    pt_debug (PRDB_RPC, "PR_GetCPS");
d449 1
a449 1
    pt_debug (PRDB_RPC, "PR_ListOwned");
d469 1
a469 1
    pt_debug (PRDB_RPC, "PR_IsAMemberOf");
d472 2
a473 2
      free(elist.val);
      return ret;
d477 5
a481 5
      if(elist.val[i] == gid) {
	*flag=1;
	free(elist.val);
	return 0;
      }
d483 1
a483 1

@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d70 5
a74 1
RCSID("$Id: pr.c,v 1.17 2000/08/16 23:08:19 tol Exp $");
d76 2
a77 3
int PR_NameToID(struct rx_call *call,
		const namelist *nlist,
		idlist *ilist)
d83 3
a85 2
    printf("PR_NameToID\n");
/*    printf("  securityIndex: %d\n", call->conn->securityIndex);*/
d89 1
a89 1
	printf("  user: %s.%s@@%s\n",
d102 1
a102 1
	printf("  name: %s\n", nlist->val[i]);
d115 4
d120 1
a120 3
PR_IDToName(struct rx_call *call,
	    const idlist *ilist,
	    namelist *nlist)
d124 3
a126 2

    printf("PR_IDToName\n");
d144 1
a144 1
/*	printf("  id: %d\n", ilist->val[i]);*/
d154 7
a160 6
int PR_NewEntry(struct rx_call *call
    , const char name[ 64 ]
    , const int32_t flag
    , const int32_t oid
    , int32_t *id
    )
d165 2
a166 3
    printf("PR_NewEntry\n");
    printf("  securityIndex: %d\n", call->conn->securityIndex);
    printf("  name:%s oid:%d\n", name, oid);
d195 7
a201 6
int PR_INewEntry(
    struct rx_call *call
    , const char name[ 64 ]
    , const int32_t id
    , const int32_t oid
    )
d210 2
a211 3
    printf("PR_INewEntry\n");
    printf("  securityIndex: %d\n", call->conn->securityIndex);
    printf("  name:%s oid:%d\n", name, oid);
d233 7
a239 5
int PR_ListEntry(
    struct rx_call *call
    , const int32_t id
    , struct prcheckentry *entry
    )
d244 2
a245 3
    printf("PR_ListEntry\n");
    printf("  securityIndex: %d\n", call->conn->securityIndex);
    printf("  id:%d\n", id);
d249 4
a252 4
	printf("  user: %s.%s@@%s\n",
	       cdat->user->name,
	       cdat->user->instance,
	       cdat->user->realm);
d273 7
a279 5
int PR_DumpEntry(
    struct rx_call *call
    , const int32_t pos
    , struct prdebugentry *entry
    )
d281 1
a281 1
    printf("PR_DumpEntry\n");
d285 7
a291 7
int PR_ChangeEntry(
    struct rx_call *call
    , const int32_t id
    , const char name[ 64 ]
    , const int32_t oid
    , const int32_t newid
    )
d293 1
a293 1
    printf("PR_ChangeEntry\n");
d298 9
a306 10
int PR_SetFieldsEntry(
    struct rx_call *call
    , const int32_t id
    , const int32_t mask
    , const int32_t flags
    , const int32_t ngroups
    , const int32_t nusers
    , const int32_t spare1
    , const int32_t spare2
    )
d308 1
a308 1
    printf("PR_SetFieldsEntry\n");
d313 6
a318 4
int PR_Delete(
    struct rx_call *call
    , const int32_t id
    )
d320 1
a320 1
    printf("PR_Delete\n");
d325 6
a330 5
int PR_WhereIsIt(
    struct rx_call *call
    , const int32_t id
    , int32_t *ps
    )
d332 1
a332 1
    printf("PR_WhereIsIt\n");
d337 6
a342 5
int PR_AddToGroup(
    struct rx_call *call
    , const int32_t uid
    , const int32_t gid
    )
d344 1
a344 1
    printf("PR_AddToGroup\n");
d353 6
a358 5
int PR_RemoveFromGroup(
    struct rx_call *call
    , const int32_t id
    , const int32_t gid
    )
d360 1
a360 1
    printf("PR_RemoveFromGroup\n");
d369 6
a374 5
int PR_ListMax(
    struct rx_call *call
    , int32_t *uid
    , int32_t *gid
    )
d376 1
a376 1
    printf("PR_ListMax\n");
d383 6
a388 5
int PR_SetMax(
    struct rx_call *call
    , const int32_t uid
    , const int32_t gflag
    )
d390 8
a397 2
    printf("PR_SetMax\n");
    return -1;
d401 7
a407 6
int PR_ListElements(
    struct rx_call *call
    , const int32_t id
    , prlist *elist
    , int32_t *over
    )
d409 1
a409 1
    printf("PR_ListElements\n");
d415 7
a421 6
int PR_GetCPS(
    struct rx_call *call
    , const int32_t id
    , prlist *elist
    , int32_t *over
    )
d423 1
a423 1
    printf("PR_GetCPS\n");
d429 7
a435 6
int PR_ListOwned(
    struct rx_call *call
    , const int32_t id
    , prlist *elist
    , int32_t *over
    )
d437 1
a437 1
    printf("PR_ListOwned\n");
d442 7
a448 6
int PR_IsAMemberOf(
    struct rx_call *call
    , const int32_t uid
    , const int32_t gid
    , int32_t *flag
    )
d450 24
a473 2
    printf("PR_IsAMemberOf\n");
    return -1;
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d75 1
a75 5
RCSID("$KTH: pr.c,v 1.21 2001/01/04 12:06:17 mattiasa Exp $");

/*
 *
 */
d77 3
a79 2
int
PR_NameToID(struct rx_call *call, const namelist *nlist, idlist *ilist)
d85 2
a86 3
    pt_debug (PRDB_RPC, "PR_NameToID: securityIndex: %d ilen: %d",
	      call->conn->securityIndex, nlist->len);

d90 1
a90 1
	pt_debug (PRDB_RPC,"  user: %s.%s@@%s",
d103 1
a103 1
	pt_debug (PRDB_RPC,"  name: %s", nlist->val[i]);
a115 4
/*
 *
 */

d117 3
a119 1
PR_IDToName(struct rx_call *call, const idlist *ilist, namelist *nlist)
d123 2
a124 3
    
    pt_debug (PRDB_RPC, "PR_IDToName: securityIndex: %d ilen %d",
	      call->conn->securityIndex, ilist->len);
d142 1
a142 1
	pt_debug (PRDB_RPC,"  id: %d", ilist->val[i]);
d152 6
a157 7
/*
 *
 */

int
PR_NewEntry(struct rx_call *call, const char *name, 
	    const int32_t flag, const int32_t oid, int32_t *id)
d162 3
a164 2
    pt_debug (PRDB_RPC, "PR_NewEntry: securityIndex: %d name: %s oid: %d",
	      call->conn->securityIndex, name, oid);
d193 6
a198 7
/*
 *
 */

int
PR_INewEntry(struct rx_call *call, const char *name, 
	     const int32_t id, const int32_t oid)
d207 3
a209 2
    pt_debug (PRDB_RPC, "PR_INewEntry securityIndex: %d name: %s oid: %d",
	      call->conn->securityIndex, name, oid);
d231 5
a235 7
/*
 *
 */

int
PR_ListEntry(struct rx_call *call, const int32_t id,
	     struct prcheckentry *entry)
d240 3
a242 2
    pt_debug (PRDB_RPC, "PR_ListEntry securityIndex: %d id: %d", 
	      call->conn->securityIndex, id);
d246 4
a249 4
	pt_debug (PRDB_RPC, "PR_ListEntry user: %s.%s@@%s",
		  cdat->user->name,
		  cdat->user->instance,
		  cdat->user->realm);
d270 5
a274 7
/*
 *
 */

int
PR_DumpEntry(struct rx_call *call, const int32_t pos, 
	     struct prdebugentry *entry)
d276 1
a276 1
    pt_debug (PRDB_RPC, "PR_DumpEntry");
d280 7
a286 7
/*
 *
 */

int
PR_ChangeEntry(struct rx_call *call, const int32_t id, const char *name,
	       const int32_t oid, const int32_t newid)
d288 1
a288 1
    pt_debug (PRDB_RPC, "PR_ChangeEntry");
d293 10
a302 9
/*
 *
 */

int
PR_SetFieldsEntry(struct rx_call *call, const int32_t id, const int32_t mask,
		  const int32_t flags, const int32_t ngroups, 
		  const int32_t nusers,
		  const int32_t spare1, const int32_t spare2)
d304 1
a304 1
    pt_debug (PRDB_RPC, "PR_SetFieldsEntry");
d309 4
a312 6
/*
 *
 */

int
PR_Delete(struct rx_call *call, const int32_t id)
d314 1
a314 1
    pt_debug (PRDB_RPC, "PR_Delete");
d319 5
a323 6
/*
 *
 */

int
PR_WhereIsIt(struct rx_call *call, const int32_t id, int32_t *ps)
d325 1
a325 1
    pt_debug (PRDB_RPC, "PR_WhereIsIt");
d330 5
a334 6
/*
 *
 */

int
PR_AddToGroup(struct rx_call *call, const int32_t uid, const int32_t gid)
d336 1
a336 1
    pt_debug (PRDB_RPC, "PR_AddToGroup");
d345 5
a349 6
/*
 *
 */

int
PR_RemoveFromGroup(struct rx_call *call, const int32_t id, const int32_t gid)
d351 1
a351 1
    pt_debug (PRDB_RPC, "PR_RemoveFromGroup");
d360 5
a364 6
/*
 *
 */

int
PR_ListMax(struct rx_call *call, int32_t *uid, int32_t *gid)
d366 1
a366 1
    pt_debug (PRDB_RPC, "PR_ListMax");
d373 5
a377 6
/*
 *
 */

int
PR_SetMax(struct rx_call *call, const int32_t uid, const int32_t gflag)
d379 2
a380 8
    pt_debug (PRDB_RPC, "PR_SetMax");

    if(gflag) {
      pr_header.maxGroup = uid;
    } else {
      pr_header.maxID = uid;
    }
    return 0;
d384 6
a389 7
/*
 *
 */

int
PR_ListElements(struct rx_call *call, const int32_t id, 
		prlist *elist, int32_t *over)
d391 1
a391 1
    pt_debug (PRDB_RPC, "PR_ListElements");
d397 6
a402 7
/*
 *
 */

int
PR_GetCPS(struct rx_call *call, const int32_t id, 
	  prlist *elist, int32_t *over)
d404 1
a404 1
    pt_debug (PRDB_RPC, "PR_GetCPS");
d410 6
a415 7
/*
 *
 */

int
PR_ListOwned(struct rx_call *call, const int32_t id, 
	     prlist *elist, int32_t *over)
d417 1
a417 1
    pt_debug (PRDB_RPC, "PR_ListOwned");
d422 6
a427 7
/*
 *
 */

int
PR_IsAMemberOf(struct rx_call *call, const int32_t uid, const int32_t gid,
	       int32_t *flag)
d429 2
a430 24

  /* XXX Check authorization */

    prlist elist;
    int ret=0;
    int i=0;

    pt_debug (PRDB_RPC, "PR_IsAMemberOf");

    if((ret = listelements(uid, &elist, TRUE)) !=0) {
      free(elist.val);
      return ret;
    }

    for(i=0; i < elist.len ; i++) {
      if(elist.val[i] == gid) {
	*flag=1;
	free(elist.val);
	return 0;
      }
    }

    free(elist.val);
    return 0;
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@a45 1
#include <ko.h>
a48 3
#ifdef HAVE_OPENSSL
#include <openssl/des.h>
#else
a49 1
#endif
d70 1
a70 4
#include <mlog.h>
#include <mdebug.h>

RCSID("$arla: pr.c,v 1.24 2002/04/20 15:57:17 lha Exp $");
d81 1
d83 1
a83 1
    mlog_log (MDEBPR, "PR_NameToID: securityIndex: %d ilen: %d",
d89 4
a92 4
	mlog_log (MDEBPR, "  user: %s.%s@@%s",
		  cdat->user->name,
		  cdat->user->instance,
		  cdat->user->realm);
d102 1
a102 1
	mlog_log (MDEBPR, "  name: %s", nlist->val[i]);
d104 3
a106 1
	status = conv_name_to_id(nlist->val[i], &ilist->val[i]);
d125 1
a125 1
    mlog_log (MDEBPR, "PR_IDToName: securityIndex: %d ilen %d",
d144 1
a144 1
	mlog_log (MDEBPR, "  id: %d", ilist->val[i]);
a162 1
    int32_t owner;
a163 1
    Bool localp;
d165 1
a165 1
    mlog_log (MDEBPR, "PR_NewEntry: securityIndex: %d name: %s oid: %d",
d169 1
a169 1
    /* XXX should be authuser? */
d173 1
a173 8
    localname = localize_name(name, &localp);

    /* XXX do it properly! */
    if (localp == FALSE)
	owner = PR_SYSADMINID;
    else
	owner = oid;

d175 6
a180 3
	error = next_free_user_id(id);
	if (!error)
	    error = create_user(localname, *id, owner, PR_SYSADMINID); /* XXX */
d182 6
a187 3
	error = next_free_group_id(id);
	if (!error)
	    error = create_group(localname, *id, owner, PR_SYSADMINID); /* XXX */
d204 1
d206 1
a206 5
    Bool localp;
    int32_t owner = PR_SYSADMINID;
    int32_t creator = PR_SYSADMINID;
    
    /* XXX should be authuser? */
d210 1
a210 1
    mlog_log (MDEBPR, "PR_INewEntry securityIndex: %d name: %s oid: %d",
d213 14
a226 11
    localname = localize_name(name, &localp);
    
    /* XXX do it properly! */
    if (localp == TRUE)
	owner = oid;
    
    if (id > 0)
	error = create_user(localname, id, owner, creator); /* XXX */
    else if (id < 0)
	error = create_group(localname, id, owner, creator); /* XXX */
    else
d228 1
d244 1
a244 1
    mlog_log (MDEBPR, "PR_ListEntry securityIndex: %d id: %d", 
d249 1
a249 1
	mlog_log (MDEBPR, "PR_ListEntry user: %s.%s@@%s",
d257 1
a257 1
    status = read_prentry(id, &pr_entry);
d281 1
a281 1
    mlog_log (MDEBPR, "PR_DumpEntry");
d293 1
a293 1
    mlog_log (MDEBPR, "PR_ChangeEntry");
d308 1
a308 1
    mlog_log (MDEBPR, "PR_SetFieldsEntry");
d320 1
a320 5
    mlog_log (MDEBPR, "PR_Delete");

    if (!sec_is_superuser(call))
	return PRPERM;

d332 1
a332 1
    mlog_log (MDEBPR, "PR_WhereIsIt");
d344 1
a344 1
    mlog_log (MDEBPR, "PR_AddToGroup");
d360 1
a360 1
    mlog_log (MDEBPR, "PR_RemoveFromGroup");
d376 1
a376 1
    mlog_log (MDEBPR, "PR_ListMax");
d390 1
a390 1
    mlog_log (MDEBPR, "PR_SetMax");
d393 1
a393 1
	pr_header.maxGroup = uid;
d395 1
a395 1
	pr_header.maxID = uid;
a396 1

d409 1
a409 1
    mlog_log (MDEBPR, "PR_ListElements");
d423 1
a423 1
    mlog_log (MDEBPR, "PR_GetCPS");
d437 1
a437 1
    mlog_log (MDEBPR, "PR_ListOwned");
d457 1
a457 1
    mlog_log (MDEBPR, "PR_IsAMemberOf");
d460 2
a461 2
	free(elist.val);
	return ret;
d465 5
a469 5
	if(elist.val[i] == gid) {
	    *flag=1;
	    free(elist.val);
	    return 0;
	}
d471 1
a471 1
    
@


