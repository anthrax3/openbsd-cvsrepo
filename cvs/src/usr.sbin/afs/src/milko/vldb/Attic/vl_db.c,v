head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.38
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.36
	OPENBSD_5_0:1.3.0.34
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.32
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.30
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.08.23.06.21.53;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.42.38;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.41.20;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.33;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.21.06;	author hin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "vldb_locl.h"

RCSID("$arla: vl_db.c,v 1.10 2002/06/02 21:12:20 lha Exp $");

#define DISK_VLENTRY_MAX 10000

static void open_db (char *databaseprefix, int flags);

int vl_database;
vital_vlheader vl_header;

MDB *idtoname, *nametodata;

void
vldb_write_header(void)
{
    int length = VITAL_VLHEADER_SIZE;
    struct mdb_datum key, value;
    char vl_header_ydr[VITAL_VLHEADER_SIZE];
    int code;
    char headerid[] = "\0\0\0\0";

    if (ydr_encode_vital_vlheader(&vl_header, vl_header_ydr, &length) == NULL)
        err(1, "write_header");

    assert (length == 0);

    key.data = headerid;
    key.length = sizeof(headerid);

    value.data = vl_header_ydr;
    value.length = VITAL_VLHEADER_SIZE;

    code = mdb_store(nametodata, &key, &value);
    assert(code == 0);

}

void
vldb_read_header(void)
{
    int length = VITAL_VLHEADER_SIZE;
    struct mdb_datum key, value;
    char headerid[] = "\0\0\0\0";
    int ret;

    key.data = headerid;
    key.length = sizeof(headerid);

    value.data = malloc(length);
    value.length = length;

    ret = mdb_fetch(nametodata, &key, &value);

    if (ret) {
	errx(1, "read_header: mdb_fetch failed");
    }

    assert(value.length == VITAL_VLHEADER_SIZE);
    
    if (ydr_decode_vital_vlheader(&vl_header, value.data, &length) == NULL)
        err(1, "read_header");
}

static void
create_database(void)
{
    int i;

    vl_header.vldbversion = 0;
    vl_header.headersize = VITAL_VLHEADER_SIZE;
    vl_header.freePtr = 0;
    vl_header.eofPtr = VITAL_VLHEADER_SIZE;
    vl_header.allocs = 0;
    vl_header.frees = 0;
    vl_header.MaxVolumeId = 0x20000000;
    for (i = 0; i < MAXTYPES; i++)
	vl_header.totalEntries[i] = 0;

    vldb_write_header();
}

int
vldb_write_entry(const disk_vlentry *vldb_entry)
{
    struct mdb_datum datum;
    struct mdb_datum key;
    char *disk_vlentry_ydr;
    int length = DISK_VLENTRY_MAX;
    int ret;

    disk_vlentry_ydr = malloc(length);

    if (ydr_encode_disk_vlentry(vldb_entry, disk_vlentry_ydr, &length) == NULL)
        err(1, "write_entry");

    datum.data = disk_vlentry_ydr;
    datum.length = DISK_VLENTRY_MAX - length;

    length = datum.length;

    key.data = (char *) vldb_entry->name;
    key.length = strlen(vldb_entry->name);

    ret = mdb_store(nametodata, &key, &datum);
    free(disk_vlentry_ydr);
    return ret;
}

int
vldb_read_entry(const char *name, disk_vlentry *entry)
{
    struct mdb_datum key, value;
    int length;
    int ret;

    key.data = (char *) name;
    key.length = strlen(name);

    ret = mdb_fetch(nametodata, &key, &value);

    if (ret)
	return ret;

    length = value.length;

    if (ydr_decode_disk_vlentry(entry, value.data, &length) == NULL)
        err(1, "read_entry");

    return 0;
}

int
vldb_delete_entry(const char *name)
{
    struct mdb_datum key;
    int ret;

    key.data = (char *) name;
    key.length = strlen(name);

    ret = mdb_delete(nametodata, &key);

    if (ret)
	return ret;

    return 0;
}

int
vldb_id_to_name(const int32_t volid, char **name)
{
    struct mdb_datum key, value;
    int ret;

    key.data = (char *)&volid;
    key.length = sizeof(volid);

    ret = mdb_fetch(idtoname, &key, &value);

    if (ret)
	return ret;

    *name = malloc(value.length+1);

    if (*name == 0)
	return ENOMEM;

    memcpy(*name, value.data, value.length);
    (*name)[value.length] = '\0';

    return 0;
}

int
vldb_write_id (const char *name, const uint32_t volid)
{
    struct mdb_datum datum, key;
    char *name_copy;
    uint32_t volid_copy = volid;

    if (volid == 0)
	return 0;

    name_copy = strdup(name);

    datum.data = name_copy;
    datum.length = strlen(name_copy);

    key.data=&volid_copy;
    key.length = sizeof(volid);

    mdb_store(idtoname, &key, &datum);
    
    free(name_copy);
    return 0;
}

int
vldb_delete_id (const char *name, const uint32_t volid)
{
    struct mdb_datum named, vold;
    char *name_copy;
    uint32_t volid_copy = volid;
    int ret;

    if (volid == 0)
	return 0;

    name_copy = strdup(name);

    named.data = name_copy;
    named.length = strlen(name_copy);

    vold.data=&volid_copy;
    vold.length = sizeof(volid);

    ret = mdb_delete(idtoname, &vold);
    if (ret)
	return ret;
    
    free(name_copy);
    return 0;
}

int
vldb_print_entry (vldbentry *entry, int long_print)
{
    int i;
    printf ("name: %s\n"
	    "\tid: rw: %u ro: %u bu: %u\n",
	    entry->name,
	    entry->volumeId[RWVOL], 
	    entry->volumeId[ROVOL],
	    entry->volumeId[BACKVOL]);
    if (!long_print)
	return 0;
    printf ("\tservers:\n");
    for (i = 0; i < MAXNSERVERS; i++) {
	struct in_addr in;
	in.s_addr = ntohl(entry->serverNumber[i]);
	if (entry->serverFlags[i])
	    printf ("\t\t%2d: %-16s %d %s %s %s %s\n",
		    i,
		    inet_ntoa (in),
		    entry->serverPartition[i],
		    entry->serverFlags[i] & VLSF_RWVOL   ? "RW" : "  ",
		    entry->serverFlags[i] & VLSF_ROVOL   ? "RO" : "  ",
		    entry->serverFlags[i] & VLSF_BACKVOL ? "BU" : "  ",
		    entry->serverFlags[i] & VLSF_NEWREPSITE ? "New site" : "");
    }

    return 0;
}

static void
open_db (char *databaseprefix, int flags)
{

    char database[MAXPATHLEN];

    if (databaseprefix == NULL)
	databaseprefix = MILKO_SYSCONFDIR;

    snprintf (database, sizeof(database), "%s/vl_idtoname", 
	      databaseprefix);

    mlog_log (MDEBVL, "Loading db from file %s\n", database);

    idtoname = mdb_open(database, flags, 0600);

    if (idtoname == NULL)
        err(1, "failed open (%s)", database);

    snprintf (database, sizeof(database), "%s/vl_nametodata", 
	      databaseprefix);

    mlog_log (MDEBVL, "Loading db from file %s\n", database);

    nametodata = mdb_open(database, flags, 0600);

    if (nametodata == NULL)
        err(1, "failed open (%s)", database);
}

#ifndef O_BINARY
#define O_BINARY 0
#endif

void
vldb_create (char *databaseprefix)
{
    open_db (databaseprefix, O_RDWR|O_CREAT|O_EXCL|O_BINARY);

    printf ("Creating a new vl-database.\n");
    create_database();
}

void
vldb_init(char *databaseprefix)
{
    open_db (databaseprefix, O_RDWR|O_BINARY);
    vldb_read_header();
}

void
vldb_close(void)
{
    mdb_close(nametodata);
    mdb_close(idtoname);
}

void
vldb_flush(void)
{
    mdb_flush(nametodata);
    mdb_flush(idtoname);
}
@


1.3
log
@Merge
@
text
@@


1.2
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
d36 3
a38 1
RCSID("$KTH: vl_db.c,v 1.3 2000/10/03 00:21:07 lha Exp $");
d43 1
a43 2
vlheader vl_header;
off_t file_length;
d45 1
a45 1
static char vl_header_ydr[VLHEADER_SIZE];
d50 5
a54 2
    off_t pos;
    int length = VLHEADER_SIZE;
d56 1
a56 1
    if (ydr_encode_vlheader(&vl_header, vl_header_ydr, &length) == NULL)
d59 10
a68 2
    pos = lseek(vl_database, 0, SEEK_SET);
    assert(pos == 0);
a69 2
    length = write(vl_database, vl_header_ydr, VLHEADER_SIZE);
    assert (length == VLHEADER_SIZE);
d75 4
a78 2
    char vl_header_ydr[VLHEADER_SIZE];
    int length = VLHEADER_SIZE;
d80 2
a81 2
    if (lseek(vl_database, 0, SEEK_SET) == -1)
        err(1, "lseek");
d83 2
a84 5
    length = read(vl_database, vl_header_ydr, VLHEADER_SIZE);
    if (length == -1)
        err(1, "read");
    if (length != VLHEADER_SIZE)
        errx(1, "read_header read failed");
d86 9
a94 1
    if (ydr_decode_vlheader(&vl_header, vl_header_ydr, &length) == NULL)
d98 2
a99 2
void
vldb_get_file_length(void)
d101 1
a101 5
    file_length = lseek(vl_database, 0, SEEK_END);
    if (file_length == -1) {
        err(1, "lseek");
    }
}
d103 9
a111 4
off_t
vldb_find_first_free(void)
{
    off_t pos;
d113 1
a113 13
    if (vl_header.vital_header.freePtr == 0) {
	/* if there are no free entries */
	pos = lseek(vl_database, 0, SEEK_END);
	if (pos == -1)
	    err(1, "lseek");
	if (ftruncate(vl_database, pos + DISK_VLENTRY_SIZE) == -1)
	    err(1, "ftruncate");
	return pos;
    } else { /* there are free entries */
	/* Not implemented yet */
	assert(0);
    }
    return 0;
d117 1
a117 1
vldb_write_entry(off_t offset, disk_vlentry *vl_entry)
d119 7
a125 3
    off_t pos;
    char vl_entry_ydr[DISK_VLENTRY_SIZE];
    int length = DISK_VLENTRY_SIZE;
d127 2
a128 2
    if (ydr_encode_disk_vlentry(vl_entry, vl_entry_ydr, &length) == NULL)
	err(1, "write_entry");
d130 2
a131 2
    pos = lseek(vl_database, offset, SEEK_SET);
    assert(pos == offset);
d133 1
a133 2
    length = write(vl_database, vl_entry_ydr, DISK_VLENTRY_SIZE);
    assert (length == DISK_VLENTRY_SIZE);
d135 6
a140 1
    return 0;
d144 1
a144 1
vldb_read_entry(off_t offset, disk_vlentry *vl_entry)
d146 8
a153 3
    off_t pos;
    char vl_entry_ydr[DISK_VLENTRY_SIZE];
    int length = DISK_VLENTRY_SIZE;
d155 2
a156 2
    pos = lseek(vl_database, offset, SEEK_SET);
    assert(pos == offset);
d158 1
a158 2
    length = read(vl_database, vl_entry_ydr, DISK_VLENTRY_SIZE);
    assert (length == DISK_VLENTRY_SIZE);
d160 2
a161 3
    if (ydr_decode_disk_vlentry((disk_vlentry *) vl_entry, 
				vl_entry_ydr, &length) == NULL)
	err(1, "write_entry");
d166 2
a167 2
static void
create_database(void)
d169 2
a170 1
    int i;
d172 2
a173 9
    vl_header.vital_header.vldbversion = 0;
    vl_header.vital_header.headersize = VLHEADER_SIZE;
    vl_header.vital_header.freePtr = 0;
    vl_header.vital_header.eofPtr = VLHEADER_SIZE;
    vl_header.vital_header.allocs = 0;
    vl_header.vital_header.frees = 0;
    vl_header.vital_header.MaxVolumeId = 0xA0000000 - 1;
    for (i = 0; i < MAXTYPES; i++)
	vl_header.vital_header.totalEntries[i] = 0;
d175 1
a175 2
    for (i = 0; i < MAXSERVERID+1; i++)
	vl_header.IpMappedAddr[i] = 0;
d177 2
a178 5
    memset(vl_header.VolnameHash, 0, HASHSIZE * sizeof(int32_t));
    memset(vl_header.VolidHash, 0, HASHSIZE * MAXTYPES * sizeof(int32_t));
    vldb_write_header();
    vldb_get_file_length();
}
d180 1
a180 4
unsigned long
vldb_get_id_hash(long id)
{
    return ((unsigned long) id) % HASHSIZE;
d183 2
a184 2
unsigned long
vldb_get_name_hash(const char *name)
d186 2
a187 2
    int i;
    unsigned long hash = 0x47114711;
d189 2
a190 2
    for (i = 0; name[i] && i < 32; i++)
	hash *= name[i];
d192 1
a192 2
    return hash % HASHSIZE;
}
d194 2
a195 6
int
vldb_get_first_id_entry(unsigned long hash_id, long type,
			disk_vlentry *vl_entry)
{
    off_t offset = vl_header.VolidHash[type][hash_id];
    int status;
d197 1
a197 2
    vldb_debug ("  get_first_id_entry hash_id: %lu type: %ld offset: %d\n", 
		 hash_id, type, (int) offset);
d199 2
a200 2
    if (offset == 0)
	return VL_NOENT;
d202 2
a203 1
    status = vldb_read_entry(offset, vl_entry);
d205 1
a205 1
    return status;
d209 1
a209 1
vldb_get_first_name_entry(unsigned long hash_name, disk_vlentry *vl_entry)
d211 8
a218 2
    off_t offset = vl_header.VolnameHash[hash_name];
    int status;
d220 2
a221 4
    vldb_debug ("  get_first_name_entry hash_name: %lu offset: %d\n", 
		 hash_name, (int) offset);
    if (offset == 0)
	return VL_NOENT;
d223 2
a224 1
    status = vldb_read_entry(offset, vl_entry);
d226 4
a229 1
    return status;
d233 1
a233 1
vldb_insert_entry(disk_vlentry *vl_entry)
d235 4
a238 8
    off_t offset;
    int status;
    unsigned long hash_id, hash_name;
    disk_vlentry first_id_entry;
    disk_vlentry first_name_entry;
    
    /* Allokera plats i filen */
    offset = vldb_find_first_free();
d240 2
a241 10
    /* Allocate new volume id? */
    /*id = vl_header.vital_header.MaxVolumeId++;*/

    /* Hitta plats i hashtabellerna */
    /* XXX At present, only RW is handled */
    hash_id = vldb_get_id_hash(vl_entry->volumeId[RWVOL]);
    hash_name = vldb_get_name_hash(vl_entry->name);

    status = vldb_get_first_id_entry(hash_id, vl_entry->volumeType,
				     &first_id_entry);
d243 1
a243 2
/* XXX    vl_entry->nextIDHash[vldb_entry->type] = status ? 0 : first_id_entry.nextID;*/
    vl_entry->nextIdHash[vl_entry->volumeType] = status ? 0 : vl_header.VolidHash[vl_entry->volumeType][hash_id];
d245 2
a246 3
    status = vldb_get_first_name_entry(hash_name, &first_name_entry);
/* XXX    pr_entry->nextName = status ? 0 : first_name_entry.nextName;*/
    vl_entry->nextNameHash = status ? 0 : vl_header.VolnameHash[hash_name];
d248 2
a249 1
    /* XXX: uppdatera owned och nextOwned */
d251 3
a253 4
    /* Lägg in entryt i filen */
    status = vldb_write_entry(offset, vl_entry);
    if (status)
	return status;
d255 1
a255 4
    /* Uppdatera hashtabell */
    vl_header.VolidHash[vl_entry->volumeType][hash_id] = offset;
    vl_header.VolnameHash[hash_name] = offset;
    vldb_write_header();
d260 1
a260 1
vldb_print_entry (struct disk_vlentry *entry, int long_print)
a285 15
#if 0
    u_long volumeId[MAXTYPES];
    long flags;
    long LockAfsId;
    long LockTimestamp;
    long cloneId;
    long AssociatedChain;
    long nextIdHash[MAXTYPES];
    long nextNameHash;
    long spares1[2];
    char name[VLDB_MAXNAMELEN];
    u_char volumeType;
    u_char RefCount;
    char spares2[1];
#endif
d292 1
d298 1
a298 1
    snprintf (database, sizeof(database), "%s/vl_database", 
d301 1
a301 1
    vldb_debug ("Loading db from file %s\n", database);
d303 1
a303 1
    vl_database = open(database, flags, S_IRWXU);
d305 11
a315 1
    if (vl_database == -1)
d319 4
a336 1
    vldb_get_file_length();
d339 2
a340 4
static int vldbdebug = 0;

int
vldb_setdebug (int debug)
d342 2
a343 3
    int odebug = vldbdebug;
    vldbdebug = debug;
    return odebug;
d347 1
a347 1
vldb_debug (char *fmt, ...)
d349 2
a350 7
    va_list args;
    if (!vldbdebug)
	return ;

    va_start (args, fmt);
    vfprintf (stderr, fmt, args);
    va_end(args);
a351 1

@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d36 1
a36 1
RCSID("$Id: vl_db.c,v 1.2 2000/05/25 01:20:45 lha Exp $");
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d41 1
a41 1
RCSID("$KTH: vl_db.c,v 1.3 2000/10/03 00:21:07 lha Exp $");
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 3
RCSID("$arla: vl_db.c,v 1.10 2002/06/02 21:12:20 lha Exp $");

#define DISK_VLENTRY_MAX 10000
d41 2
a42 1
vital_vlheader vl_header;
d44 1
a44 1
MDB *idtoname, *nametodata;
d49 2
a50 5
    int length = VITAL_VLHEADER_SIZE;
    struct mdb_datum key, value;
    char vl_header_ydr[VITAL_VLHEADER_SIZE];
    int code;
    char headerid[] = "\0\0\0\0";
d52 1
a52 1
    if (ydr_encode_vital_vlheader(&vl_header, vl_header_ydr, &length) == NULL)
d55 2
a56 10
    assert (length == 0);

    key.data = headerid;
    key.length = sizeof(headerid);

    value.data = vl_header_ydr;
    value.length = VITAL_VLHEADER_SIZE;

    code = mdb_store(nametodata, &key, &value);
    assert(code == 0);
d58 2
d65 2
a66 4
    int length = VITAL_VLHEADER_SIZE;
    struct mdb_datum key, value;
    char headerid[] = "\0\0\0\0";
    int ret;
d68 2
a69 2
    key.data = headerid;
    key.length = sizeof(headerid);
d71 5
a75 2
    value.data = malloc(length);
    value.length = length;
d77 3
a79 1
    ret = mdb_fetch(nametodata, &key, &value);
d81 6
a86 2
    if (ret) {
	errx(1, "read_header: mdb_fetch failed");
a87 5

    assert(value.length == VITAL_VLHEADER_SIZE);
    
    if (ydr_decode_vital_vlheader(&vl_header, value.data, &length) == NULL)
        err(1, "read_header");
d90 2
a91 2
static void
create_database(void)
d93 1
a93 1
    int i;
d95 13
a107 11
    vl_header.vldbversion = 0;
    vl_header.headersize = VITAL_VLHEADER_SIZE;
    vl_header.freePtr = 0;
    vl_header.eofPtr = VITAL_VLHEADER_SIZE;
    vl_header.allocs = 0;
    vl_header.frees = 0;
    vl_header.MaxVolumeId = 0x20000000;
    for (i = 0; i < MAXTYPES; i++)
	vl_header.totalEntries[i] = 0;

    vldb_write_header();
d111 1
a111 1
vldb_write_entry(const disk_vlentry *vldb_entry)
d113 3
a115 5
    struct mdb_datum datum;
    struct mdb_datum key;
    char *disk_vlentry_ydr;
    int length = DISK_VLENTRY_MAX;
    int ret;
d117 2
a118 1
    disk_vlentry_ydr = malloc(length);
d120 2
a121 2
    if (ydr_encode_disk_vlentry(vldb_entry, disk_vlentry_ydr, &length) == NULL)
        err(1, "write_entry");
d123 2
a124 2
    datum.data = disk_vlentry_ydr;
    datum.length = DISK_VLENTRY_MAX - length;
d126 1
a126 8
    length = datum.length;

    key.data = (char *) vldb_entry->name;
    key.length = strlen(vldb_entry->name);

    ret = mdb_store(nametodata, &key, &datum);
    free(disk_vlentry_ydr);
    return ret;
d130 1
a130 1
vldb_read_entry(const char *name, disk_vlentry *entry)
d132 3
a134 8
    struct mdb_datum key, value;
    int length;
    int ret;

    key.data = (char *) name;
    key.length = strlen(name);

    ret = mdb_fetch(nametodata, &key, &value);
d136 2
a137 2
    if (ret)
	return ret;
d139 2
a140 1
    length = value.length;
d142 3
a144 2
    if (ydr_decode_disk_vlentry(entry, value.data, &length) == NULL)
        err(1, "read_entry");
d149 2
a150 2
int
vldb_delete_entry(const char *name)
d152 1
a152 2
    struct mdb_datum key;
    int ret;
d154 9
a162 2
    key.data = (char *) name;
    key.length = strlen(name);
d164 2
a165 1
    ret = mdb_delete(nametodata, &key);
d167 5
a171 2
    if (ret)
	return ret;
d173 4
a176 1
    return 0;
d179 2
a180 2
int
vldb_id_to_name(const int32_t volid, char **name)
d182 2
a183 2
    struct mdb_datum key, value;
    int ret;
d185 2
a186 2
    key.data = (char *)&volid;
    key.length = sizeof(volid);
d188 2
a189 1
    ret = mdb_fetch(idtoname, &key, &value);
d191 6
a196 2
    if (ret)
	return ret;
d198 2
a199 1
    *name = malloc(value.length+1);
d201 2
a202 2
    if (*name == 0)
	return ENOMEM;
d204 1
a204 2
    memcpy(*name, value.data, value.length);
    (*name)[value.length] = '\0';
d206 1
a206 1
    return 0;
d210 1
a210 1
vldb_write_id (const char *name, const uint32_t volid)
d212 2
a213 8
    struct mdb_datum datum, key;
    char *name_copy;
    uint32_t volid_copy = volid;

    if (volid == 0)
	return 0;

    name_copy = strdup(name);
d215 4
a218 2
    datum.data = name_copy;
    datum.length = strlen(name_copy);
d220 1
a220 2
    key.data=&volid_copy;
    key.length = sizeof(volid);
d222 1
a222 4
    mdb_store(idtoname, &key, &datum);
    
    free(name_copy);
    return 0;
d226 1
a226 1
vldb_delete_id (const char *name, const uint32_t volid)
d228 11
a238 4
    struct mdb_datum named, vold;
    char *name_copy;
    uint32_t volid_copy = volid;
    int ret;
d240 7
a246 2
    if (volid == 0)
	return 0;
d248 2
a249 1
    name_copy = strdup(name);
d251 3
a253 2
    named.data = name_copy;
    named.length = strlen(name_copy);
d255 1
a255 2
    vold.data=&volid_copy;
    vold.length = sizeof(volid);
d257 4
a260 3
    ret = mdb_delete(idtoname, &vold);
    if (ret)
	return ret;
d262 4
a265 1
    free(name_copy);
d270 1
a270 1
vldb_print_entry (vldbentry *entry, int long_print)
d296 15
a316 1

d322 1
a322 1
    snprintf (database, sizeof(database), "%s/vl_idtoname", 
d325 1
a325 1
    mlog_log (MDEBVL, "Loading db from file %s\n", database);
d327 1
a327 1
    idtoname = mdb_open(database, flags, 0600);
d329 1
a329 11
    if (idtoname == NULL)
        err(1, "failed open (%s)", database);

    snprintf (database, sizeof(database), "%s/vl_nametodata", 
	      databaseprefix);

    mlog_log (MDEBVL, "Loading db from file %s\n", database);

    nametodata = mdb_open(database, flags, 0600);

    if (nametodata == NULL)
a332 4
#ifndef O_BINARY
#define O_BINARY 0
#endif

d347 1
d350 4
a353 2
void
vldb_close(void)
d355 3
a357 2
    mdb_close(nametodata);
    mdb_close(idtoname);
d361 1
a361 1
vldb_flush(void)
d363 7
a369 2
    mdb_flush(nametodata);
    mdb_flush(idtoname);
d371 1
@


