head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.08.23.06.21.52;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.11.03.12;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.06.19.09.04;	author pvalchev;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.42.38;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.41.12;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.31;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.21.05;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1999, 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "bos_locl.h"

RCSID("$arla: bosprocs.c,v 1.6 2002/06/02 21:12:15 lha Exp $");

/*
 *
 */

int
BOZO_CreateBnode(struct rx_call *call,
		 const char *type,
		 const char *instance,
		 const char *p1,
		 const char *p2,
		 const char *p3,
		 const char *p4,
		 const char *p5,
		 const char *p6)
{
    bosdebug ("BOZO_CreateNode: %s %s\n", type, instance);

    if (!sec_is_superuser(call))
	return VL_PERM;

    return 0;
}

/*
 *
 */

int
BOZO_DeleteBnode(struct rx_call *call,
		 const char *instance)
{
    bosdebug ("BOZO_DeleteBnode: %s\n", instance);

    return 0;
}


/*
 *
 */

int
BOZO_GetStatus(struct rx_call *call,
	       const char *instance,
	       int32_t *inStat,
	       char *statdescr)
{
    bosdebug ("BOZO_GetStatus: %s\n", instance);

    snprintf(statdescr, BOZE_BSSIZE, "foo");
    *inStat = 0;
    return 0;
}


/*
 *
 */

int
BOZO_SetStatus(struct rx_call *call,
	       const char *instance,
	       const int32_t status)
{
    bosdebug ("BOZO_SetStatus: %s\n", instance);

    return 0;
}

/*
 *
 */

int
BOZO_EnumerateInstance(struct rx_call *call,
			   const int32_t instance,
			   char *iname)
{
    bosdebug ("BOZO_EnumerateInstance: %d\n", instance);

    return -1;
}

/*
 *
 */

int
BOZO_GetInstanceInfo(struct rx_call *call,
		     const char *instance,
		     char *type,
		     struct bozo_status *status)
{
    bosdebug ("BOZO_GetInstanceInfo: %s\n", instance);

    strlcpy (type, "simple", BOZO_BSSIZE);
    memset (status, 0, sizeof(*status));
    return 0;
}


/*
 *
 */

int
BOZO_GetInstanceParm(struct rx_call *call,
		     const char *instance,
		     const int32_t num,
		     char *param)
{
    bosdebug ("BOZO_GetInstanceParm: %s %d\n", instance, num);

    strlcpy (param, "foo", BOZO_BSSIZE);
    return 0;
}

/*
 *
 */

int
BOZO_AddSUser(struct rx_call *call, const char *name)
{
    char *n;
    int ret;

    if (strchr(name, '@@'))
	n = strdup (name);
    else
	asprintf (&n, "%s@@%s", name, cell_getthiscell());
    if (n == NULL)
	return BZIO;
    if (strlen(n) > BOZO_BSSIZE)
	n[BOZO_BSSIZE - 1] = '\0';
    ret = sec_add_superuser (n);
    free (n);
    if (ret)
	return BZIO;
    return 0;
}


/*
 *
 */

int
BOZO_DeleteSUser(struct rx_call *call, const char *name)
{
    char *n;
    int ret;

    if (strchr(name, '@@'))
	asprintf (&n, "%s", name);
    else
	asprintf (&n, "%s@@%s", name, cell_getthiscell());
    if (n == NULL)
	return BZIO;
    if (strlen(n) > BOZO_BSSIZE)
	n[BOZO_BSSIZE - 1] = '\0';
    ret = sec_del_superuser (n);
    free (n);
    if (ret)
	return BZIO;
    return 0;
}


/*
 *
 */

int
BOZO_ListSUsers(struct rx_call *call, const /*
 *
 */

int32_t an, char *name)
{
    return -1;
}


/*
 *
 */

int
BOZO_ListKeys(struct rx_call *call, const int32_t an, int32_t *kvno,
	      struct bozo_key *key, struct bozo_keyInfo *keinfo)
{
    return -1;
}


/*
 *
 */

int
BOZO_AddKey(struct rx_call *call, const int32_t an,
	    const struct bozo_key *key)
{
    return -1;
}


/*
 *
 */

int
BOZO_DeleteKey(struct rx_call *call, const /*
 *
 */

int32_t an)
{
    return -1;
}


/*
 *
 */

int
BOZO_SetCellName(struct rx_call *call, const char *name)
{
    return -1;
}


/*
 *
 */

int
BOZO_GetCellName(struct rx_call *call, char *name)
{
    return -1;
}


/*
 *
 */

int
BOZO_GetCellHost(struct rx_call *call, const int32_t awhich, char *name)
{
    return -1;
}


/*
 *
 */

int
BOZO_AddCellHost(struct rx_call *call, const char *name)
{
    return -1;
}


/*
 *
 */

int
BOZO_DeleteCellHost(struct rx_call *call, const char *name)
{
    return -1;
}


/*
 *
 */

int
BOZO_SetTStatus(struct rx_call *call, const char *instance,
		const /*
 *
 */

int32_t status)
{
    return -1;
}


/*
 *
 */

int
BOZO_ShutdownAll(struct rx_call *call)
{
    return -1;
}


/*
 *
 */

int
BOZO_RestartAll(struct rx_call *call)
{
    return -1;
}


/*
 *
 */

int
BOZO_StartupAll(struct rx_call *call)
{
    return -1;
}


/*
 *
 */

int
BOZO_SetNoAuthFlag(struct rx_call *call, const /*
 *
 */

int32_t flag)
{
    return -1;
}


/*
 *
 */

int
BOZO_ReBozo(struct rx_call *call)
{
    return -1;
}


/*
 *
 */

int
BOZO_Restart(struct rx_call *call, const char *instance)
{
    return -1;
}


/*
 *
 */

int
BOZO_Install(struct rx_call *call, const char *path, const int32_t size,
	     const int32_t flags, const int32_t date)
{
    return -1;
}


/*
 *
 */

int
BOZO_UnInstall(struct rx_call *call, const char *path)
{
    return -1;
}


/*
 *
 */

int
BOZO_GetDates(struct rx_call *call, const char *path, int32_t *newtime,
	      int32_t *baktime, int32_t *oldtime)
{
    return -1;
}


/*
 *
 */

int
BOZO_Exec(struct rx_call *call, const char *cmd)
{
    return -1;
}


/*
 *
 */

int
BOZO_Prune(struct rx_call *call, const int32_t flags)
{
    return -1;
}


/*
 *
 */

int
BOZO_SetRestartTime(struct rx_call *call, const int32_t type,
		    const struct bozo_netKTime *restartTime)
{
    return -1;
}


/*
 *
 */

int
BOZO_GetRestartTime(struct rx_call *call, const int32_t type,
		    struct bozo_netKTime *restartTime)
{
    return -1;
}


/*
 *
 */

int
BOZO_GetLog(struct rx_call *call, const char *name)
{
    return -1;
}


/*
 *
 */

int
BOZO_WaitAll(struct rx_call *call)
{
    return -1;
}


/*
 *
 */

int
BOZO_GetInstanceStrings(struct rx_call *call, const char *instance,
			char *errorname, char *spare1, char *spare2, char *spare3)
{
    return -1;
}

@


1.5
log
@Removing strcpy/strcat is nice, but don't change a _wire protocol_
when fixing it. Instead, spend 30 seconds to find the real solution.
Why was i not asked to approve this before it was commited?
@
text
@@


1.4
log
@Merge
@
text
@d83 1
a83 2
	       char *statdescr,
	       size_t statdescrlen)
d87 1
a87 1
    strlcpy (statdescr, "foo", statdescrlen);
@


1.3
log
@strcpy/strcat/sprintf cleanups; ok krw deraadt
@
text
@d36 1
a36 1
RCSID("$KTH: bosprocs.c,v 1.4 2000/10/03 00:16:53 lha Exp $");
d100 2
a101 1
	       const char *instance)
d169 1
a169 1
	asnprintf (&n, BOZO_BSSIZE, "%s@@%s", name, cell_getthiscell());
d172 2
d193 1
a193 1
	asnprintf (&n, BOZO_BSSIZE, "%s", name);
d195 1
a195 1
	asnprintf (&n, BOZO_BSSIZE, "%s@@%s", name, cell_getthiscell());
d198 2
@


1.2
log
@merge
@
text
@d83 2
a84 1
	       char *statdescr)
d88 1
a88 1
    strcpy (statdescr, "foo");
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d36 1
a36 1
RCSID("$Id: bosprocs.c,v 1.1 2000/07/21 13:28:29 lha Exp $");
d113 1
a113 1
			   char **iname)
d127 1
a127 1
		     char **type,
d132 1
a132 3
#if 0
    strcpy (type, "simple");
#endif
d146 1
a146 1
		     char **param)
d150 1
a150 3
#if 0
    strcpy (param, "foo");
#endif
d152 357
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d41 1
a41 1
RCSID("$KTH: bosprocs.c,v 1.4 2000/10/03 00:16:53 lha Exp $");
d118 1
a118 1
			   char *iname)
d132 1
a132 1
		     char *type,
d137 3
a139 1
    strlcpy (type, "simple", BOZO_BSSIZE);
d153 1
a153 1
		     char *param)
d157 3
a159 1
    strlcpy (param, "foo", BOZO_BSSIZE);
a160 357
}

/*
 *
 */

int
BOZO_AddSUser(struct rx_call *call, const char *name)
{
    char *n;
    int ret;

    if (strchr(name, '@@'))
	n = strdup (name);
    else
	asnprintf (&n, BOZO_BSSIZE, "%s@@%s", name, cell_getthiscell());
    if (n == NULL)
	return BZIO;
    ret = sec_add_superuser (n);
    free (n);
    if (ret)
	return BZIO;
    return 0;
}


/*
 *
 */

int
BOZO_DeleteSUser(struct rx_call *call, const char *name)
{
    char *n;
    int ret;

    if (strchr(name, '@@'))
	asnprintf (&n, BOZO_BSSIZE, "%s", name);
    else
	asnprintf (&n, BOZO_BSSIZE, "%s@@%s", name, cell_getthiscell());
    if (n == NULL)
	return BZIO;
    ret = sec_del_superuser (n);
    free (n);
    if (ret)
	return BZIO;
    return 0;
}


/*
 *
 */

int
BOZO_ListSUsers(struct rx_call *call, const /*
 *
 */

int32_t an, char *name)
{
    return -1;
}


/*
 *
 */

int
BOZO_ListKeys(struct rx_call *call, const int32_t an, int32_t *kvno,
	      struct bozo_key *key, struct bozo_keyInfo *keinfo)
{
    return -1;
}


/*
 *
 */

int
BOZO_AddKey(struct rx_call *call, const int32_t an,
	    const struct bozo_key *key)
{
    return -1;
}


/*
 *
 */

int
BOZO_DeleteKey(struct rx_call *call, const /*
 *
 */

int32_t an)
{
    return -1;
}


/*
 *
 */

int
BOZO_SetCellName(struct rx_call *call, const char *name)
{
    return -1;
}


/*
 *
 */

int
BOZO_GetCellName(struct rx_call *call, char *name)
{
    return -1;
}


/*
 *
 */

int
BOZO_GetCellHost(struct rx_call *call, const int32_t awhich, char *name)
{
    return -1;
}


/*
 *
 */

int
BOZO_AddCellHost(struct rx_call *call, const char *name)
{
    return -1;
}


/*
 *
 */

int
BOZO_DeleteCellHost(struct rx_call *call, const char *name)
{
    return -1;
}


/*
 *
 */

int
BOZO_SetTStatus(struct rx_call *call, const char *instance,
		const /*
 *
 */

int32_t status)
{
    return -1;
}


/*
 *
 */

int
BOZO_ShutdownAll(struct rx_call *call)
{
    return -1;
}


/*
 *
 */

int
BOZO_RestartAll(struct rx_call *call)
{
    return -1;
}


/*
 *
 */

int
BOZO_StartupAll(struct rx_call *call)
{
    return -1;
}


/*
 *
 */

int
BOZO_SetNoAuthFlag(struct rx_call *call, const /*
 *
 */

int32_t flag)
{
    return -1;
}


/*
 *
 */

int
BOZO_ReBozo(struct rx_call *call)
{
    return -1;
}


/*
 *
 */

int
BOZO_Restart(struct rx_call *call, const char *instance)
{
    return -1;
}


/*
 *
 */

int
BOZO_Install(struct rx_call *call, const char *path, const int32_t size,
	     const int32_t flags, const int32_t date)
{
    return -1;
}


/*
 *
 */

int
BOZO_UnInstall(struct rx_call *call, const char *path)
{
    return -1;
}


/*
 *
 */

int
BOZO_GetDates(struct rx_call *call, const char *path, int32_t *newtime,
	      int32_t *baktime, int32_t *oldtime)
{
    return -1;
}


/*
 *
 */

int
BOZO_Exec(struct rx_call *call, const char *cmd)
{
    return -1;
}


/*
 *
 */

int
BOZO_Prune(struct rx_call *call, const int32_t flags)
{
    return -1;
}


/*
 *
 */

int
BOZO_SetRestartTime(struct rx_call *call, const int32_t type,
		    const struct bozo_netKTime *restartTime)
{
    return -1;
}


/*
 *
 */

int
BOZO_GetRestartTime(struct rx_call *call, const int32_t type,
		    struct bozo_netKTime *restartTime)
{
    return -1;
}


/*
 *
 */

int
BOZO_GetLog(struct rx_call *call, const char *name)
{
    return -1;
}


/*
 *
 */

int
BOZO_WaitAll(struct rx_call *call)
{
    return -1;
}


/*
 *
 */

int
BOZO_GetInstanceStrings(struct rx_call *call, const char *instance,
			char *errorname, char *spare1, char *spare2, char *spare3)
{
    return -1;
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d36 1
a36 1
RCSID("$arla: bosprocs.c,v 1.6 2002/06/02 21:12:15 lha Exp $");
d99 1
a99 2
	       const char *instance,
	       const int32_t status)
d167 1
a167 1
	asprintf (&n, "%s@@%s", name, cell_getthiscell());
a169 2
    if (strlen(n) > BOZO_BSSIZE)
	n[BOZO_BSSIZE - 1] = '\0';
d189 1
a189 1
	asprintf (&n, "%s", name);
d191 1
a191 1
	asprintf (&n, "%s@@%s", name, cell_getthiscell());
a193 2
    if (strlen(n) > BOZO_BSSIZE)
	n[BOZO_BSSIZE - 1] = '\0';
@


