head	1.7;
access;
symbols
	OPENBSD_5_2:1.6.0.38
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.36
	OPENBSD_5_0:1.6.0.34
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.32
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.30
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.26
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2012.08.23.06.21.56;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2003.08.05.09.16.16;	author hin;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.20.14.59.29;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.45.57;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.41.41;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.19;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.27;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.27;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.38;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.08;	author hin;	state Exp;
branches;
next	;


desc
@@


1.7
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
RCSID("$arla: main.c,v 1.23 2002/11/27 23:48:58 lha Exp $");
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <roken.h>
#include "sym.h"
#include "output.h"
#include <err.h>
#include <roken.h>

extern FILE *yyin;

int parse_errors;

/*
 * ydr - generate stub routines for encode/decoding and RX
 */

int yyparse(void);

/*
 * Return the basename of `s'.
 * The result is malloc'ed.
 */

static char *
ydr_basename (const char *s)
{
     const char *p, *q;
     char *res;

     p = strrchr (s, '/');
     if (p == NULL)
	  p = s;
     else
	  ++p;
     q = strchr (p, '.');
     if (q == NULL)
	  q = s + strlen (s);
     res = malloc (q - p + 1);
     if (res == NULL)
	 return NULL;
     memmove (res, p, q - p);
     res[q - p] = '\0';
     return res;
}

/*
 *
 */

int
main (int argc, char **argv)
{
    int ret;
    FILE *foo;
    char tmp_filename[64];
    char *cpp = CPP;
    int arglen;
    int i;
    char *arg;
    char *filename;

    if (argc < 2)
	errx (1, "Usage: %s [cpp-arguments] filename", argv[0]);

    snprintf (tmp_filename, sizeof(tmp_filename),
	      "ydr_tmp_%u.c", (unsigned)getpid());
    foo = fopen (tmp_filename, "w");
    if (foo == NULL)
	err (1, "error opening %s", tmp_filename);
    filename = ydr_basename (argv[argc - 1]);
    fprintf (foo, "#include \"%s\"\n", argv[argc - 1]);
    fclose (foo);

    initsym ();
    init_generate (filename);

    arglen = strlen(cpp) + 1;
    for (i = 1; i < argc - 1; ++i) {
	arglen += strlen (argv[i]) + 1;
    }
    arglen += strlen(tmp_filename) + 1;

    arg = malloc (arglen);
    if (arg == NULL) {
	unlink (tmp_filename);
	errx (1, "malloc: out of memory");
    }
    strlcpy (arg, cpp, arglen);
    strlcat (arg, " ", arglen);
    for (i = 1; i < argc - 1; ++i) {
	strlcat (arg, argv[i], arglen);
	strlcat (arg, " ", arglen);
    }
    strlcat (arg, tmp_filename, arglen);

    yyin = popen (arg, "r");
    if (yyin == NULL) {
	unlink (tmp_filename);
	err (1, "popen `%s'", arg);
    }
    free (arg);
    ret = yyparse ();
    generate_server_switch (serverfile.stream, serverhdrfile.stream);
    pclose (yyin);
    close_generator (filename);
    unlink (tmp_filename);

    return ret + parse_errors;
}

@


1.6
log
@Merge
@
text
@@


1.5
log
@more afs string cleaning; pvalchev ok
@
text
@d36 1
a36 1
RCSID("$KTH: main.c,v 1.22 2000/10/16 22:01:45 assar Exp $");
a143 1
    generate_tcpdump_patches (td_file.stream, filename);
@


1.4
log
@merge
@
text
@d128 2
a129 2
    strcpy (arg, cpp);
    strcat (arg, " ");
d131 2
a132 2
	strcat (arg, argv[i]);
	strcat (arg, " ");
d134 1
a134 1
    strcat (arg, tmp_filename);
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d36 1
a36 1
RCSID("$Id: main.c,v 1.19 2000/09/06 17:39:21 art Exp $");
d59 31
d107 4
a110 2
    foo = efopen (tmp_filename, "w");
    filename = copy_basename (argv[argc - 1]);
d112 1
a112 1
    efclose (foo);
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@a0 1
/*	$OpenBSD$	*/
d41 1
a41 1
RCSID("$KTH: main.c,v 1.15 1999/03/01 08:45:13 assar Exp $");
a48 1
#include <fnameutil.h>
d81 1
a81 3
    foo = fopen (tmp_filename, "w");
    if (foo == NULL)
	errx (1, "Cannot fopen %s for writing", tmp_filename);
d84 1
a84 1
    fclose (foo);
d109 4
a120 21
    if (getenv("USER") && strcmp(getenv("USER"), "art") == 0) {
	char *foo;
	
	if (asprintf(&foo, "indent %s.cs.c", filename) > 0) {
	    system(foo);
	    free(foo);
	}
	if (asprintf(&foo, "indent %s.ss.c", filename) > 0) {
	    system(foo);
	    free(foo);
	}
	if (asprintf(&foo, "indent %s.ydr.c", filename) > 0) {
	    system(foo);
	    free(foo);
	}
	if (asprintf(&foo, "indent %s.h", filename) > 0) {
	    system(foo);
	    free(foo);
	}
    }

d123 1
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
d42 1
a42 1
RCSID("$KTH: main.c,v 1.9 1998/03/13 04:46:33 assar Exp $");
d49 1
a49 1
#include <mem.h>
d58 2
d115 2
a116 1
    generate_server_switch (serverfile, serverhdrfile);
d120 23
a142 1
    return ret;
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d42 1
a42 1
RCSID("$KTH: main.c,v 1.22 2000/10/16 22:01:45 assar Exp $");
d49 2
a50 1
#include <roken.h>
a57 2
int parse_errors;

a63 31
/*
 * Return the basename of `s'.
 * The result is malloc'ed.
 */

static char *
ydr_basename (const char *s)
{
     const char *p, *q;
     char *res;

     p = strrchr (s, '/');
     if (p == NULL)
	  p = s;
     else
	  ++p;
     q = strchr (p, '.');
     if (q == NULL)
	  q = s + strlen (s);
     res = malloc (q - p + 1);
     if (res == NULL)
	 return NULL;
     memmove (res, p, q - p);
     res[q - p] = '\0';
     return res;
}

/*
 *
 */

d83 2
a84 2
	err (1, "error opening %s", tmp_filename);
    filename = ydr_basename (argv[argc - 1]);
a110 4
    if (yyin == NULL) {
	unlink (tmp_filename);
	err (1, "popen `%s'", arg);
    }
d113 1
a113 2
    generate_server_switch (serverfile.stream, serverhdrfile.stream);
    generate_tcpdump_patches (td_file.stream, filename);
d117 1
a117 2

    return ret + parse_errors;
a118 1

@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d36 1
a36 1
RCSID("$arla: main.c,v 1.23 2002/11/27 23:48:58 lha Exp $");
d144 1
@


