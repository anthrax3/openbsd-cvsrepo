head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.08.23.06.21.57;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.09.16.16;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.45.57;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.41.41;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.20;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.27;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.27;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.38;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.08;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
RCSID("$arla: types.c,v 1.10 2002/04/15 14:53:19 lha Exp $");
#endif

#include <stdio.h>
#include <roken.h>
#include "types.h"
#include "lex.h"

Symbol *
define_const (char *name, int value)
{
     Symbol *s;

     s = addsym (name);

     if (s->type != YDR_TUNDEFINED) {
	  error_message (1, "Redeclaration of %s\n", s->name);
	  return NULL;
     }
     s->type = YDR_TCONST;
     s->u.val = value;
     return s;
}

Symbol *
define_enum (char *name, List *list)
{
     Symbol *s;

     s = addsym (name);

     if (s->type != YDR_TUNDEFINED) {
	  error_message (1, "Redeclaration of %s\n", s->name);
	  return NULL;
     }
     s->type = YDR_TENUM;
     s->u.list = list;
     return s;
}

Symbol *
define_struct (char *name)
{
     Symbol *s;

     s = addsym (name);

     if (s->type != YDR_TSTRUCT && s->type != YDR_TUNDEFINED) {
	  error_message (1, "Redeclaration of %s as a different type\n",
			 s->name);
	  return NULL;
     }
     s->type = YDR_TSTRUCT;
     s->u.list = NULL;
     return s;
}

Symbol *
set_struct_body_sym (Symbol *s, List *list)
{
    s->u.list = list;
    return s;
}

Symbol *
set_struct_body (char *name, List *list)
{
    Symbol *s;

    s = findsym(name);
    if (s == NULL) {
	error_message(1, "struct %s not declared", name);
	return NULL;
    }
    return set_struct_body_sym (s, list);
}

Symbol *
define_typedef (StructEntry *entry)
{
     Symbol *s;

     s = addsym (entry->name);

     if (s->type != YDR_TUNDEFINED) {
	  error_message (1, "Redeclaration of %s\n", s->name);
	  return NULL;
     }
     s->type = YDR_TTYPEDEF;
     s->name = entry->name;
     s->u.type = entry->type;
     free (entry);
     return s;
}


Symbol *
define_proc (char *name, List *args, unsigned id)
{
     Symbol *s;

     s = addsym (name);

     if (s->type != YDR_TUNDEFINED) {
	  error_message (1, "Redeclaration of %s\n", s->name);
	  return NULL;
     }
     s->type = YDR_TPROC;
     s->u.proc.id = id;
     s->u.proc.arguments = args;
     return s;
}

Symbol *
createenumentry (char *name, int value)
{
     Symbol *s;

     s = addsym (name);

     if (s->type != YDR_TUNDEFINED) {
	  error_message (1,"Redeclaration of %s\n", s->name);
	  return NULL;
     }
     s->type = YDR_TENUMVAL;
     s->u.val = value;
     return s;
}

StructEntry *
createstructentry (char *name, Type *type)
{
     StructEntry *e;

     e = (StructEntry *)emalloc (sizeof (StructEntry));
     e->name = name;
     e->type = type;
     return e;
}

struct Type *
create_type (TypeType type, Symbol *symbol, unsigned size,
	     Type *subtype, Type *indextype, int flags)
{
    Type *t;

    t = emalloc(sizeof(*t));

    t->type = type;
    t->symbol = symbol;
    t->size = size;
    t->subtype = subtype;
    t->indextype = indextype;
    t->flags = flags;

    return t;
}

void
set_sym_attrs(Symbol *symbol, List *attrs)
{
    switch (symbol->type) {
    case YDR_TSTRUCT:
	break;
    default:
	error_message(1, "can't set attribues for %s", symbol->name);
	return;
    }
    symbol->attrs = attrs;
}

struct fa {
    char *attr;
    int found;
};

static int
find_attr(List *l, Listitem *li, void *ptr)
{
    struct fa *f = ptr;
    char *mem = listdata(li);
    if (strcmp(f->attr, mem) == 0) {
	f->found = 1;
	return 1;
    }
    return 0;
}

int
sym_find_attr(Symbol *symbol, char *attr)
{
    struct fa f;

    if (symbol->attrs == NULL)
	return 0;

    f.attr = attr;
    f.found = 0;

    listiter(symbol->attrs, find_attr, &f);

    return f.found;
}
@


1.5
log
@Merge
@
text
@@


1.4
log
@merge
@
text
@d36 1
a36 1
RCSID("$KTH: types.c,v 1.8 2000/10/02 22:37:15 lha Exp $");
d51 1
a51 1
     if (s->type != TUNDEFINED) {
d55 1
a55 1
     s->type = TCONST;
d67 1
a67 1
     if (s->type != TUNDEFINED) {
d71 1
a71 1
     s->type = TENUM;
d83 1
a83 1
     if (s->type != TSTRUCT && s->type != TUNDEFINED) {
d88 1
a88 1
     s->type = TSTRUCT;
d120 1
a120 1
     if (s->type != TUNDEFINED) {
d124 1
a124 1
     s->type = TTYPEDEF;
d139 1
a139 1
     if (s->type != TUNDEFINED) {
d143 1
a143 1
     s->type = TPROC;
d156 1
a156 1
     if (s->type != TUNDEFINED) {
d160 1
a160 1
     s->type = TENUMVAL;
d194 45
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d36 1
a36 1
RCSID("$Id: types.c,v 1.7 1999/03/19 06:06:30 lha Exp $");
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@a0 1
/*	$OpenBSD$	*/
d41 1
a41 1
RCSID("$KTH: types.c,v 1.7 1999/03/19 06:06:30 lha Exp $");
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
d42 1
a42 1
RCSID("$KTH: types.c,v 1.3 1998/02/19 05:17:08 assar Exp $");
d46 1
a46 1
#include <mem.h>
d58 1
a58 1
	  error_message ("Redeclaration of %s\n", s->name);
d74 1
a74 1
	  error_message ("Redeclaration of %s\n", s->name);
d89 3
a91 2
     if (s->type != TUNDEFINED) {
	  error_message ("Redeclaration of %s\n", s->name);
d100 7
d113 1
a113 1
	error_message("struct %s not declared", name);
d116 1
a116 2
    s->u.list = list;
    return s;
d127 1
a127 1
	  error_message ("Redeclaration of %s\n", s->name);
d146 1
a146 1
	  error_message ("Redeclaration of %s\n", s->name);
d163 1
a163 1
	  error_message ("Redeclaration of %s\n", s->name);
d182 18
a199 2
Symbol *
define_proc (char *name, List *params, unsigned id);
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d42 1
a42 1
RCSID("$KTH: types.c,v 1.8 2000/10/02 22:37:15 lha Exp $");
d46 1
a46 1
#include <roken.h>
d58 1
a58 1
	  error_message (1, "Redeclaration of %s\n", s->name);
d74 1
a74 1
	  error_message (1, "Redeclaration of %s\n", s->name);
d89 2
a90 3
     if (s->type != TSTRUCT && s->type != TUNDEFINED) {
	  error_message (1, "Redeclaration of %s as a different type\n",
			 s->name);
a98 7
set_struct_body_sym (Symbol *s, List *list)
{
    s->u.list = list;
    return s;
}

Symbol *
d105 1
a105 1
	error_message(1, "struct %s not declared", name);
d108 2
a109 1
    return set_struct_body_sym (s, list);
d120 1
a120 1
	  error_message (1, "Redeclaration of %s\n", s->name);
d139 1
a139 1
	  error_message (1, "Redeclaration of %s\n", s->name);
d156 1
a156 1
	  error_message (1,"Redeclaration of %s\n", s->name);
d175 2
a176 18
struct Type *
create_type (TypeType type, Symbol *symbol, unsigned size,
	     Type *subtype, Type *indextype, int flags)
{
    Type *t;

    t = emalloc(sizeof(*t));

    t->type = type;
    t->symbol = symbol;
    t->size = size;
    t->subtype = subtype;
    t->indextype = indextype;
    t->flags = flags;

    return t;
}

@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d36 1
a36 1
RCSID("$arla: types.c,v 1.10 2002/04/15 14:53:19 lha Exp $");
d51 1
a51 1
     if (s->type != YDR_TUNDEFINED) {
d55 1
a55 1
     s->type = YDR_TCONST;
d67 1
a67 1
     if (s->type != YDR_TUNDEFINED) {
d71 1
a71 1
     s->type = YDR_TENUM;
d83 1
a83 1
     if (s->type != YDR_TSTRUCT && s->type != YDR_TUNDEFINED) {
d88 1
a88 1
     s->type = YDR_TSTRUCT;
d120 1
a120 1
     if (s->type != YDR_TUNDEFINED) {
d124 1
a124 1
     s->type = YDR_TTYPEDEF;
d139 1
a139 1
     if (s->type != YDR_TUNDEFINED) {
d143 1
a143 1
     s->type = YDR_TPROC;
d156 1
a156 1
     if (s->type != YDR_TUNDEFINED) {
d160 1
a160 1
     s->type = YDR_TENUMVAL;
a193 45
void
set_sym_attrs(Symbol *symbol, List *attrs)
{
    switch (symbol->type) {
    case YDR_TSTRUCT:
	break;
    default:
	error_message(1, "can't set attribues for %s", symbol->name);
	return;
    }
    symbol->attrs = attrs;
}

struct fa {
    char *attr;
    int found;
};

static int
find_attr(List *l, Listitem *li, void *ptr)
{
    struct fa *f = ptr;
    char *mem = listdata(li);
    if (strcmp(f->attr, mem) == 0) {
	f->found = 1;
	return 1;
    }
    return 0;
}

int
sym_find_attr(Symbol *symbol, char *attr)
{
    struct fa f;

    if (symbol->attrs == NULL)
	return 0;

    f.attr = attr;
    f.found = 0;

    listiter(symbol->attrs, find_attr, &f);

    return f.found;
}
@


