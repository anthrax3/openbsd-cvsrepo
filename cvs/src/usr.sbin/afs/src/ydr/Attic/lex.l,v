head	1.7;
access;
symbols
	OPENBSD_5_2:1.6.0.38
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.36
	OPENBSD_5_0:1.6.0.34
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.32
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.30
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.26
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2012.08.23.06.21.56;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2003.08.05.09.16.16;	author hin;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.06.19.09.05;	author pvalchev;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.45.57;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.41.41;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.19;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.27;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.27;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.38;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.08;	author hin;	state Exp;
branches;
next	;


desc
@@


1.7
log
@the afs src tree can go away
@
text
@%{
/*
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
RCSID("$arla: lex.l,v 1.31 2003/01/20 07:12:56 lha Exp $");
#endif

/*
 * This is to handle the definition of this symbol in some AIX
 * headers, which will conflict with the definition that lex will
 * generate for it.  It's only a problem for AIX lex.
 */

#ifndef __osf__
#undef ECHO
#endif

#include <stdio.h>
#include <ctype.h>
#include <stdarg.h>
#include <string.h>
#include <roken.h>
#include "sym.h"
#include "types.h"
#include "parse.h"
#include "lex.h"
#include "output.h"

#ifndef __osf__
#undef ECHO
#endif

#define YY_NO_UNPUT

static unsigned lineno;

static char filename[256];

static void parse_filename (char *s);
static void parse_lineno (char *s);
%}

%%
^\#[ ][0-9]+[ ]\"[^\n\"]*\".*\n	{ parse_filename (yytext); }
^\#line[ ][0-9]+[ ]\"[^\n\"]*\".*\n	{ parse_filename (yytext); }
^\#[ ][0-9]+.*\n		{ parse_lineno (yytext); }
^\#line[ ][0-9]+.*\n		{ parse_lineno (yytext); }
^\#ident.*$			{ }
const				{ return T_CONST; }
enum				{ return T_ENUM; }
struct				{ return T_STRUCT; }
typedef				{ return T_TYPEDEF; }
unsigned			{ return T_UNSIGNED; }
long				{ return T_LONG; }
afs_int32			{ return T_LONG; }
int32_t				{ return T_LONG; }
afs_int64			{ return T_LONGLONG; }
int64_t				{ return T_LONGLONG; }
u_long				{ return T_ULONG; }
uint32_t			{ return T_ULONG; }
afs_uint32			{ return T_ULONG; }
uint64_t			{ return T_ULONGLONG; }
afs_uint64			{ return T_ULONGLONG; }
short				{ return T_SHORT; }
int16_t				{ return T_SHORT; }
u_short				{ return T_USHORT; }
uint16_t			{ return T_USHORT; }
int				{ return T_INT; }
u_char				{ return T_UCHAR; }
char				{ return T_CHAR; }
string				{ return T_STRING; }
opaque				{ return T_OPAQUE; }
package				{ return T_PACKAGE; }
prefix				{ return T_PREFIX; }
proc				{ return T_PROC; }
error-function			{ return T_ERROR_FUNCTION; }
split				{ return T_SPLIT; }
multi				{ return T_MULTI; }
IN				{ return T_IN; }
OUT				{ return T_OUT; }
INOUT				{ return T_INOUT; }
ASIS				{ return T_ASIS; }
"["|"]"|[,;=()<>]|"{"|"}"|"*"	{ return *yytext; }
^\%[^\n]*$			{ yylval.name = strdup (yytext+1); return T_VERBATIM; }
-?[0-9]+			{ yylval.constant = atoi(yytext); return T_CONSTANT; }
0[Xx][0-9a-fA-F]+		{ yylval.constant = (int)strtol(yytext+2, NULL, 0x10); return T_CONSTANT; }
[A-Za-z_][A-Za-z0-9_]*		{
Symbol *sym;

sym = findsym(yytext);
yylval.sym = sym;
if (sym == NULL) {
    yylval.name = strdup(yytext);
    return T_IDENTIFIER;
} else if (sym->type == YDR_TCONST)
    return T_IDCONST;
else if (sym->type == YDR_TTYPEDEF
	 || sym->type == YDR_TENUM
	 || sym->type == YDR_TSTRUCT)
    return T_IDTYPE;
else
    error_message (0, "Ignoring \"%s\"\n", yytext);
}
[ \t]				;
\n				{ lineno++; }
.				{ error_message(0, "Ignoring char(%c)\n", *yytext); }
%%

#ifndef yywrap
int
yywrap (void)
{
     return 1;
}
#endif /* !yywrap */

void
error_message (int errorp, char *format, ...)
{
     va_list args;

     va_start (args, format);
     fprintf (stderr, "%s:%d: ", filename, lineno);
     vfprintf (stderr, format, args);
     va_end (args);
     if (errorp)
	 parse_errors = 1;
}

static void
parse_filename (char *s)
{
     char *d1, *d2;

     while (!isspace((unsigned char)*s))
	 ++s;
     while (isspace((unsigned char)*s))
	 ++s;

     lineno = atoi (s);
     d1 = strchr (s, '"') + 1;
     d2 = strchr (d1, '"');
     *d2 = '\0';
     if (strcmp (d1, "") != 0)
	 strlcpy (filename, d1, sizeof(filename));
}

static void
parse_lineno (char *s)
{
     while (!isspace((unsigned char)*s))
	 ++s;
     while (isspace((unsigned char)*s))
	 ++s;

     lineno = atoi (s);
}
@


1.6
log
@Merge
@
text
@@


1.5
log
@strcpy/strcat/sprintf cleanups; ok krw deraadt
@
text
@d3 1
a3 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d37 1
a37 1
RCSID("$KTH: lex.l,v 1.24.2.1 2001/05/28 23:23:03 mattiasa Exp $");
d87 1
d89 2
d92 4
a95 1
u_int32_t			{ return T_ULONG; }
d99 1
a99 1
u_int16_t			{ return T_USHORT; }
d119 1
a119 1
[A-Za-z][A-Za-z0-9_]*		{
d127 1
a127 1
} else if (sym->type == TCONST)
d129 3
a131 1
else if (sym->type == TTYPEDEF || sym->type == TENUM || sym->type == TSTRUCT)
@


1.4
log
@merge
@
text
@d169 1
a169 1
	 strcpy (filename, d1);
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d18 1
a18 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d37 1
a37 1
RCSID("$Id: lex.l,v 1.23 2000/06/27 02:43:55 assar Exp $");
d46 1
d48 1
d61 1
d63 1
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@d3 1
a3 1
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
d42 1
a42 1
RCSID("$Id: lex.l,v 1.20 1999/03/04 06:56:11 assar Exp $");
d64 4
d160 1
a160 1
     while (!isspace(*s))
d162 1
a162 1
     while (isspace(*s))
d176 1
a176 1
     while (!isspace(*s))
d178 1
a178 1
     while (isspace(*s))
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
d42 1
a42 1
RCSID("$Id: lex.l,v 1.15 1998/09/06 23:33:39 assar Exp $");
d45 6
d73 4
a76 4
^\#[ ][0-9]+[ ]\"[^\n\"]*\".*$	{ parse_filename (yytext); }
^\#line[ ][0-9]+[ ]\"[^\n\"]*\".*$	{ parse_filename (yytext); }
^\#[ ][0-9]+			{ parse_lineno (yytext); }
^\#line[ ][0-9]+		{ parse_lineno (yytext); }
d97 3
d123 1
a123 1
    error_message ("Ignoring \"%s\"\n", yytext);
d127 1
a127 1
.				{ error_message("Ignoring char(%c)\n", *yytext); }
d139 1
a139 1
error_message (char *format, ...)
d147 2
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d3 1
a3 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d42 1
a42 1
RCSID("$KTH: lex.l,v 1.24.2.1 2001/05/28 23:23:03 mattiasa Exp $");
a44 7
/*
 * This is to handle the definition of this symbol in some AIX
 * headers, which will conflict with the definition that lex will
 * generate for it.  It's only a problem for AIX lex.
 */

#ifndef __osf__
a45 1
#endif
a57 6
#ifndef __osf__
#undef ECHO
#endif

#define YY_NO_UNPUT

d67 4
a70 4
^\#[ ][0-9]+[ ]\"[^\n\"]*\".*\n	{ parse_filename (yytext); }
^\#line[ ][0-9]+[ ]\"[^\n\"]*\".*\n	{ parse_filename (yytext); }
^\#[ ][0-9]+.*\n		{ parse_lineno (yytext); }
^\#line[ ][0-9]+.*\n		{ parse_lineno (yytext); }
a90 3
prefix				{ return T_PREFIX; }
proc				{ return T_PROC; }
error-function			{ return T_ERROR_FUNCTION; }
d114 1
a114 1
    error_message (0, "Ignoring \"%s\"\n", yytext);
d118 1
a118 1
.				{ error_message(0, "Ignoring char(%c)\n", *yytext); }
d130 1
a130 1
error_message (int errorp, char *format, ...)
a137 2
     if (errorp)
	 parse_errors = 1;
d145 1
a145 1
     while (!isspace((unsigned char)*s))
d147 1
a147 1
     while (isspace((unsigned char)*s))
d161 1
a161 1
     while (!isspace((unsigned char)*s))
d163 1
a163 1
     while (isspace((unsigned char)*s))
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d3 1
a3 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d37 1
a37 1
RCSID("$arla: lex.l,v 1.31 2003/01/20 07:12:56 lha Exp $");
a86 1
afs_int32			{ return T_LONG; }
a87 2
afs_int64			{ return T_LONGLONG; }
int64_t				{ return T_LONGLONG; }
d89 1
a89 4
uint32_t			{ return T_ULONG; }
afs_uint32			{ return T_ULONG; }
uint64_t			{ return T_ULONGLONG; }
afs_uint64			{ return T_ULONGLONG; }
d93 1
a93 1
uint16_t			{ return T_USHORT; }
d113 1
a113 1
[A-Za-z_][A-Za-z0-9_]*		{
d121 1
a121 1
} else if (sym->type == YDR_TCONST)
d123 1
a123 3
else if (sym->type == YDR_TTYPEDEF
	 || sym->type == YDR_TENUM
	 || sym->type == YDR_TSTRUCT)
d169 1
a169 1
	 strlcpy (filename, d1, sizeof(filename));
@


