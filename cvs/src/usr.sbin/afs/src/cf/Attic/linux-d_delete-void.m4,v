head	1.2;
access;
symbols
	OPENBSD_5_2:1.1.1.1.0.42
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.40
	OPENBSD_5_0:1.1.1.1.0.38
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.36
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.34
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.30
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.32
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.28
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.26
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.24
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.22
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.20
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.18
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.16
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.14
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.12
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.10
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.8
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.6
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.4
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.2
	OPENBSD_3_2_BASE:1.1.1.1
	arla-0-35-7:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2012.08.23.06.21.50;	author deraadt;	state dead;
branches;
next	1.1;

1.1
date	2002.06.07.04.14.25;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.25;	author hin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@the afs src tree can go away
@
text
@dnl
dnl $KTH: linux-d_delete-void.m4,v 1.1.2.1 2002/01/31 10:23:22 lha Exp $
dnl

AC_DEFUN(AC_LINUX_D_DELETE_VOID, [
AC_CACHE_CHECK(if d_delete in struct dentry_operations returns void,
ac_cv_member_dentry_operations_d_delete_void,
AC_TRY_COMPILE_KERNEL([#include <asm/current.h>
#include <linux/fs.h>
#include <linux/dcache.h>],
[
struct dentry_operations foo_operations;

int hata_foo(void)
{
  return foo_operations.d_delete(0);
}
],
ac_cv_member_dentry_operations_d_delete_void=no,
ac_cv_member_dentry_operations_d_delete_void=yes))

if test "$ac_cv_member_dentry_operations_d_delete_void" = "yes"; then
  AC_DEFINE(HAVE_D_DELETE_VOID, 1,
	[define if d_delete in struct dentry_operations returns void])
fi
])
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@@
