head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.08.23.06.21.50;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.08.42.41;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.28.57;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.40.40;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.07;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.52.55;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.52.55;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.22;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.00;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* XXX need this to get dirent and DIRSIZ */
#ifdef __osf__
#define _OSF_SOURCE
#define _BSD
/* Might want to define _KERNEL for osf and use KDIRSIZ */
#endif

#include "arla_local.h"
RCSID("$arla: bsd-subr.c,v 1.61 2003/02/15 02:24:08 lha Exp $");

#ifdef __linux__
#include <nnpfs/nnpfs_dirent.h>
#else
#define NNPFS_DIRENT_BLOCKSIZE 512
#define nnpfs_dirent dirent
#endif

static long blocksize = NNPFS_DIRENT_BLOCKSIZE;	/* XXX */

/*
 * Write out all remaining data in `args'
 */

static void
flushbuf (void *vargs)
{
    struct write_dirent_args *args = (struct write_dirent_args *)vargs;
    unsigned inc = blocksize - (args->ptr - args->buf);
    struct nnpfs_dirent *last = (struct nnpfs_dirent *)args->last;

    last->d_reclen += inc;
    if (write (args->fd, args->buf, blocksize) != blocksize)
	arla_warn (ADEBWARN, errno, "write");
    args->ptr = args->buf;
    args->last = NULL;
}

/*
 * Write a dirent to the args buf in `arg' containg `fid' and `name'.
 */

static int
write_dirent(VenusFid *fid, const char *name, void *arg)
{
     struct nnpfs_dirent dirent, *real;
     struct write_dirent_args *args = (struct write_dirent_args *)arg;

     dirent.d_namlen = strlen (name);
#ifdef _GENERIC_DIRSIZ
     dirent.d_reclen = _GENERIC_DIRSIZ(&dirent);
#elif defined(DIRENT_SIZE)
     dirent.d_reclen = DIRENT_SIZE(&dirent);
#else
     dirent.d_reclen = DIRSIZ(&dirent);
#endif

     if (args->ptr + dirent.d_reclen > args->buf + blocksize)
	  flushbuf (args);
     real = (struct nnpfs_dirent *)args->ptr;

     real->d_namlen = dirent.d_namlen;
     real->d_reclen = dirent.d_reclen;
#if defined(HAVE_STRUCT_DIRENT_D_TYPE) && !defined(__linux__)
     real->d_type   = DT_UNKNOWN;
#endif
     
     real->d_fileno = dentry2ino (name, fid, args->e);
     strlcpy (real->d_name, name, sizeof(real->d_name));
     args->ptr += real->d_reclen;
     args->off += real->d_reclen;
     args->last = real;
     return 0;
}

int
conv_dir (FCacheEntry *e, CredCacheEntry *ce, u_int tokens,
	  fcache_cache_handle *cache_handle,
	  char *cache_name, size_t cache_name_sz)
{
    return conv_dir_sub (e, ce, tokens, cache_handle, cache_name,
			 cache_name_sz, write_dirent, flushbuf, blocksize);
}

/*
 * remove `filename` from the converted directory for `e'
 */

#ifndef DIRBLKSIZ
#define DIRBLKSIZ 1024
#endif

int
dir_remove_name (FCacheEntry *e, const char *filename,
		 fcache_cache_handle *cache_handle,
		 char *cache_name, size_t cache_name_sz)
{
    int ret;
    int fd;
    fbuf fb;
    struct stat sb;
    char *buf;
    char *p;
    size_t len;
    struct nnpfs_dirent *dp;
    struct nnpfs_dirent *last_dp;

    fcache_extra_file_name (e, cache_name, cache_name_sz);
    fd = open (cache_name, O_RDWR, 0);
    if (fd < 0)
	return errno;
    fcache_fhget (cache_name, cache_handle);
    if (fstat (fd, &sb) < 0) {
	ret = errno;
	close (fd);
	return ret;
    }
    len = sb.st_size;

    ret = fbuf_create (&fb, fd, len, FBUF_READ|FBUF_WRITE|FBUF_SHARED);
    if (ret) {
	close (fd);
	return ret;
    }
    last_dp = NULL;
    ret = ENOENT;
    for (p = buf = fbuf_buf (&fb); p < buf + len; p += dp->d_reclen) {

	dp = (struct nnpfs_dirent *)p;

	assert (dp->d_reclen > 0);

	if (strcmp (filename, dp->d_name) == 0) {
	    if (last_dp != NULL) {
		size_t off1, off2;
		unsigned len;

		/*
		 * d_reclen can be as largest (in worst case)
		 * DIRBLKSIZ, and may not cause the entry to cross a
		 * DIRBLKSIZ boundery.
		 */
		len = last_dp->d_reclen + dp->d_reclen;

                off1 = (char *)last_dp - buf;
                off2 = off1 + len;
		off1 /= DIRBLKSIZ;
		off2 /= DIRBLKSIZ;

		if (len < DIRBLKSIZ && off1 == off2)
		    last_dp->d_reclen = len;
	    }
	    dp->d_fileno = 0;
	    ret = 0;
	    break;
	}
	last_dp = dp;
    }
    fbuf_end (&fb);
    close (fd);
    return ret;
}
@


1.5
log
@Merge
@
text
@@


1.4
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d42 1
a42 1
RCSID("$KTH: bsd-subr.c,v 1.55.2.1 2001/01/29 02:02:17 lha Exp $");
d45 1
a45 1
#include <xfs/xfs_dirent.h>
d47 2
a48 2
#define XFS_DIRENT_BLOCKSIZE 512
#define xfs_dirent dirent
d51 1
a51 1
static long blocksize = XFS_DIRENT_BLOCKSIZE;	/* XXX */
d62 1
a62 1
    struct xfs_dirent *last = (struct xfs_dirent *)args->last;
d75 1
a75 1
static void
d78 1
a78 1
     struct xfs_dirent dirent, *real;
d92 1
a92 1
     real = (struct xfs_dirent *)args->ptr;
d105 1
d108 1
a108 1
Result
d137 2
a138 2
    struct xfs_dirent *dp;
    struct xfs_dirent *last_dp;
d161 1
a161 1
	dp = (struct xfs_dirent *)p;
d167 1
d171 3
a173 3
		 * It's not totally clear how large we can make
		 * d_reclen without loosing.  Not making it larger
		 * than DIRBLKSIZ seems safe.
d176 7
a182 1
		if (len < DIRBLKSIZ)
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d38 1
d40 1
d42 1
a42 1
RCSID("$Id: bsd-subr.c,v 1.50 2000/03/26 11:52:00 assar Exp $");
d47 1
a47 1
#define XFS_DIRENT_BLOCKSIZE 1024
d101 1
a101 1
     strcpy (real->d_name, name);
d109 1
a109 1
	  xfs_cache_handle *cache_handle,
d126 1
a126 1
		 xfs_cache_handle *cache_handle,
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@a0 1
/*	$OpenBSD$	*/
d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
d45 1
a45 1
RCSID("$KTH: bsd-subr.c,v 1.32 1998/12/22 13:15:54 lha Exp $");
a52 7
#if defined(GENERIC_DIRSIZ_IN_SYS_DIRENT_H)
#include <sys/dirent.h>
#elif defined(DIRSIZ_IN_DIRENT_H)
#include <dirent.h>
#elif defined(DIRSIZ_IN_SYS_DIR_H)
#include <sys/dir.h>
#endif
a55 9
struct args {
    int fd;
    off_t off;
    char *buf;
    char *ptr;
    struct xfs_dirent *last;
    FCacheEntry *e; 
};

d61 1
a61 1
flushbuf (struct args *args)
d63 9
a71 7
     unsigned inc = blocksize - (args->ptr - args->buf);

     args->last->d_reclen += inc;
     if (write (args->fd, args->buf, blocksize) != blocksize)
	  arla_warn (ADEBWARN, errno, "write");
     args->ptr = args->buf;
     args->last = NULL;
d82 1
a82 1
     struct args *args = (struct args *)arg;
d87 2
d103 1
a103 10
     if (dirent.d_namlen == 2
	 && strcmp(name, "..") == 0
	 && args->e->flags.mountp) {
	 real->d_fileno = afsfid2inode (&args->e->parent);
     } else if (dirent.d_namlen == 1 && 
		strcmp(name, ".") == 0 &&
		args->e->flags.mountp) {
	 real->d_fileno = afsfid2inode (&args->e->realfid); 
     } else
	 real->d_fileno = afsfid2inode (fid);
a106 3
#if 0
     real->d_off = args->off;
#endif
a109 4
/*
 *
 */

d115 74
a188 46
     struct args args;
     Result res;
     int ret;

     e->flags.extradirp = TRUE;
     fcache_extra_file_name (e, cache_name, cache_name_sz);
     res.tokens = e->tokens |= XFS_DATA_R | XFS_OPEN_NR;

     args.fd = open (cache_name, O_WRONLY | O_CREAT | O_TRUNC | O_BINARY, 0666);
     if (args.fd == -1) {
	  res.res = -1;
	  res.error = errno;
	  arla_warn (ADEBWARN, errno, "open %s", cache_name);
	  return res;
     }
     ret = fcache_fhget (cache_name, cache_handle);
     if(ret) {
	 res.res = -1;
	 res.error = errno;
	 close (args.fd);
	 arla_warn (ADEBWARN, res.error, "fcache_fhget(%s)", cache_name);
	 return res;
     }

     args.off  = 0;
     args.buf  = (char *)malloc (blocksize);
     if (args.buf == NULL) {
	 arla_warn (ADEBWARN, errno, "malloc %u", (unsigned)blocksize);
	 res.res = -1;
	 res.error = errno;
	 close (args.fd);
	 return res;
     }
     args.ptr  = args.buf;
     args.last = NULL;
     args.e = e;
     ReleaseWriteLock (&e->lock); /* XXX */
     adir_readdir (e->fid, write_dirent, (void *)&args, ce);
     ObtainWriteLock (&e->lock); /* XXX */
     if (args.last)
	  flushbuf (&args);
     free (args.buf);
     res.res = close (args.fd);
     if (res.res)
	  res.error = errno;
     return res;
@


1.1
log
@Initial revision
@
text
@d46 1
a46 1
RCSID("$KTH: bsd-subr.c,v 1.24 1998/05/02 02:28:46 assar Exp $");
d48 15
a62 1
static long blocksize = 1024;	/* XXX */
d69 1
a69 1
    struct dirent *last;
d73 4
a82 3
#if 0
     args->last->d_off    += inc;
#endif
d89 4
d96 1
a96 1
     struct dirent dirent, *real;
d100 3
d104 1
d108 1
a108 1
     real = (struct dirent *)args->ptr;
d112 1
a112 1
#ifdef HAVE_STRUCT_DIRENT_D_TYPE
d140 3
a142 2
conv_dir (FCacheEntry *e, char *handle, size_t handle_size,
	  CredCacheEntry *ce, u_int tokens)
d146 1
d149 1
a149 1
     fcache_extra_file_name (e, handle, handle_size);
d152 1
a152 1
     args.fd = open (handle, O_WRONLY | O_CREAT | O_TRUNC | O_BINARY, 0666);
d156 1
a156 1
	  arla_warn (ADEBWARN, errno, "open %s", handle);
d159 9
d180 1
a180 1
     ReleaseWriteLock (&e->lock);
d182 1
a182 1
     ObtainWriteLock (&e->lock);
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
a43 1
/* Might want to define _KERNEL for osf and use KDIRSIZ */
a44 1

d46 1
a46 1
RCSID("$KTH: bsd-subr.c,v 1.55.2.1 2001/01/29 02:02:17 lha Exp $");
d48 1
a48 6
#ifdef __linux__
#include <xfs/xfs_dirent.h>
#else
#define XFS_DIRENT_BLOCKSIZE 512
#define xfs_dirent dirent
#endif
d50 8
a57 5
static long blocksize = XFS_DIRENT_BLOCKSIZE;	/* XXX */

/*
 * Write out all remaining data in `args'
 */
d60 1
a60 1
flushbuf (void *vargs)
d62 10
a71 9
    struct write_dirent_args *args = (struct write_dirent_args *)vargs;
    unsigned inc = blocksize - (args->ptr - args->buf);
    struct xfs_dirent *last = (struct xfs_dirent *)args->last;

    last->d_reclen += inc;
    if (write (args->fd, args->buf, blocksize) != blocksize)
	arla_warn (ADEBWARN, errno, "write");
    args->ptr = args->buf;
    args->last = NULL;
a73 4
/*
 * Write a dirent to the args buf in `arg' containg `fid' and `name'.
 */

d77 2
a78 2
     struct xfs_dirent dirent, *real;
     struct write_dirent_args *args = (struct write_dirent_args *)arg;
a80 5
#ifdef _GENERIC_DIRSIZ
     dirent.d_reclen = _GENERIC_DIRSIZ(&dirent);
#elif defined(DIRENT_SIZE)
     dirent.d_reclen = DIRENT_SIZE(&dirent);
#else
a81 1
#endif
d85 1
a85 1
     real = (struct xfs_dirent *)args->ptr;
d89 1
a89 1
#if defined(HAVE_STRUCT_DIRENT_D_TYPE) && !defined(__linux__)
d93 11
a103 2
     real->d_fileno = dentry2ino (name, fid, args->e);
     strlcpy (real->d_name, name, sizeof(real->d_name));
d106 3
a111 9
Result
conv_dir (FCacheEntry *e, CredCacheEntry *ce, u_int tokens,
	  fcache_cache_handle *cache_handle,
	  char *cache_name, size_t cache_name_sz)
{
    return conv_dir_sub (e, ce, tokens, cache_handle, cache_name,
			 cache_name_sz, write_dirent, flushbuf, blocksize);
}

d113 1
a113 1
 * remove `filename` from the converted directory for `e'
d116 6
a121 3
#ifndef DIRBLKSIZ
#define DIRBLKSIZ 1024
#endif
d123 33
a155 62
int
dir_remove_name (FCacheEntry *e, const char *filename,
		 fcache_cache_handle *cache_handle,
		 char *cache_name, size_t cache_name_sz)
{
    int ret;
    int fd;
    fbuf fb;
    struct stat sb;
    char *buf;
    char *p;
    size_t len;
    struct xfs_dirent *dp;
    struct xfs_dirent *last_dp;

    fcache_extra_file_name (e, cache_name, cache_name_sz);
    fd = open (cache_name, O_RDWR, 0);
    if (fd < 0)
	return errno;
    fcache_fhget (cache_name, cache_handle);
    if (fstat (fd, &sb) < 0) {
	ret = errno;
	close (fd);
	return ret;
    }
    len = sb.st_size;

    ret = fbuf_create (&fb, fd, len, FBUF_READ|FBUF_WRITE|FBUF_SHARED);
    if (ret) {
	close (fd);
	return ret;
    }
    last_dp = NULL;
    ret = ENOENT;
    for (p = buf = fbuf_buf (&fb); p < buf + len; p += dp->d_reclen) {

	dp = (struct xfs_dirent *)p;

	assert (dp->d_reclen > 0);

	if (strcmp (filename, dp->d_name) == 0) {
	    if (last_dp != NULL) {
		unsigned len;

		/*
		 * It's not totally clear how large we can make
		 * d_reclen without loosing.  Not making it larger
		 * than DIRBLKSIZ seems safe.
		 */
		len = last_dp->d_reclen + dp->d_reclen;
		if (len < DIRBLKSIZ)
		    last_dp->d_reclen = len;
	    }
	    dp->d_fileno = 0;
	    ret = 0;
	    break;
	}
	last_dp = dp;
    }
    fbuf_end (&fb);
    close (fd);
    return ret;
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
d42 1
a42 1
RCSID("$arla: bsd-subr.c,v 1.61 2003/02/15 02:24:08 lha Exp $");
d45 1
a45 1
#include <nnpfs/nnpfs_dirent.h>
d47 2
a48 2
#define NNPFS_DIRENT_BLOCKSIZE 512
#define nnpfs_dirent dirent
d51 1
a51 1
static long blocksize = NNPFS_DIRENT_BLOCKSIZE;	/* XXX */
d62 1
a62 1
    struct nnpfs_dirent *last = (struct nnpfs_dirent *)args->last;
d75 1
a75 1
static int
d78 1
a78 1
     struct nnpfs_dirent dirent, *real;
d92 1
a92 1
     real = (struct nnpfs_dirent *)args->ptr;
a104 1
     return 0;
d107 1
a107 1
int
d136 2
a137 2
    struct nnpfs_dirent *dp;
    struct nnpfs_dirent *last_dp;
d160 1
a160 1
	dp = (struct nnpfs_dirent *)p;
a165 1
		size_t off1, off2;
d169 3
a171 3
		 * d_reclen can be as largest (in worst case)
		 * DIRBLKSIZ, and may not cause the entry to cross a
		 * DIRBLKSIZ boundery.
d174 1
a174 7

                off1 = (char *)last_dp - buf;
                off2 = off1 + len;
		off1 /= DIRBLKSIZ;
		off2 /= DIRBLKSIZ;

		if (len < DIRBLKSIZ && off1 == off2)
@


