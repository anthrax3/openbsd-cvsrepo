head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.08.23.06.21.50;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.08.42.41;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.28.57;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.40.41;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.07;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.52.55;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.52.55;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.22;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.00;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Header for connection cache
 */

/* $arla: conn.h,v 1.31 2002/09/07 10:42:57 lha Exp $ */

#ifndef _CONN_H_
#define _CONN_H_

#include <stdio.h>
#include <nnpfs/nnpfs_message.h>
#include <cred.h>

struct conncacheentry {
    uint32_t host;		/* IP address of host */
    uint16_t port;		/* port number at host */
    uint16_t service;		/* RX service # */
    int32_t cell;		/* cell of host */
    int securityindex;
    int (*probe)(struct rx_connection *);
    nnpfs_pag_t cred;
    struct rx_connection *connection;
    struct {
	unsigned alivep : 1;
	unsigned killme : 1;
	unsigned old : 1;	/* Old server,vldb -> only VL_GetEntryByName */
    } flags;
    unsigned refcount;
    Listitem *probe_le;
    unsigned probe_next;
    unsigned ntries;
    struct conncacheentry *parent;
    int rtt;
};

typedef struct conncacheentry ConnCacheEntry;

typedef enum { CONN_CS_NONE = 0,
	       CONN_CS_CELL = 1, 
	       CONN_CS_CRED = 2, 
	       CONN_CS_SECIDX = 4,
	       CONN_CS_ALL = 0xffff
	       
} clear_state_mask;

extern int conn_rxkad_level;

void
conn_init (unsigned nentries);

ConnCacheEntry *
conn_get (int32_t cell, uint32_t host, uint16_t port, uint16_t service,
	  int (*probe)(struct rx_connection *),
	  CredCacheEntry *ce);

void
conn_dead (ConnCacheEntry *);

void
conn_alive (ConnCacheEntry *);

void
conn_probe (ConnCacheEntry *);

void
conn_ref (ConnCacheEntry *e);

void
conn_free (ConnCacheEntry *e);

int32_t
conn_host2cell (uint32_t host, uint16_t port, uint16_t service);

Bool
conn_serverupp (uint32_t host, uint16_t port, uint16_t service);

void
conn_status (void);

void
conn_clearcred (clear_state_mask mask,
		int32_t cell, nnpfs_pag_t cred, int securityindex);

void
conn_downhosts(int32_t cell, uint32_t *hosts, int *num, int flags);

int
conn_rtt_cmp (const void *v1, const void *v2);

Bool
host_downp (int error);

Bool
conn_isalivep (ConnCacheEntry *e);

/*
 * Random factor to add to rtts when comparing them.
 * This is in microseconds/8
 */

static const int RTT_FUZZ = 400000;

#endif /* _CONN_H_ */
@


1.5
log
@Merge
@
text
@@


1.4
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
d38 1
a38 1
/* $KTH: conn.h,v 1.24.2.2 2001/09/28 00:59:11 mattiasa Exp $ */
d44 1
a44 1
#include <xfs/xfs_message.h>
d48 3
a50 3
    u_int32_t host;		/* IP address of host */
    u_int16_t port;		/* port number at host */
    u_int16_t service;		/* RX service # */
d54 1
a54 1
    xfs_pag_t cred;
d85 1
a85 1
conn_get (int32_t cell, u_int32_t host, u_int16_t port, u_int16_t service,
d99 3
d105 1
a105 1
conn_host2cell (u_int32_t host, u_int16_t port, u_int16_t service);
d108 1
a108 1
conn_serverupp (u_int32_t host, u_int16_t port, u_int16_t service);
d115 1
a115 1
		int32_t cell, xfs_pag_t cred, int securityindex);
d118 1
a118 1
conn_downhosts(int32_t cell, u_int32_t *hosts, int *num, int flags);
d125 3
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d38 1
a38 1
/* $Id: conn.h,v 1.22 2000/02/20 04:23:48 assar Exp $ */
d71 8
d111 2
a112 1
conn_clearcred (int32_t cell, xfs_pag_t cred, int securityindex);
d120 3
d125 1
a125 1
 * This is in milliseconds/8
d128 1
a128 1
static const int RTT_FUZZ = 400;
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@a0 1
/*	$OpenBSD$	*/
d43 1
a43 1
/* $KTH: conn.h,v 1.20 1999/04/14 15:27:34 map Exp $ */
d59 1
a59 1
    pag_t cred;
d76 2
d108 1
a108 1
conn_clearcred (int32_t cell, pag_t cred, int securityindex);
@


1.1
log
@Initial revision
@
text
@d44 1
a44 1
/* $KTH: conn.h,v 1.11 1998/02/19 05:39:03 assar Exp $ */
d53 1
a53 1
typedef struct {
d59 1
d65 1
d68 8
a75 1
} ConnCacheEntry;
d82 1
d86 9
d104 1
a104 1
conn_status (FILE *);
d108 13
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d44 1
a44 1
/* $KTH: conn.h,v 1.24.2.2 2001/09/28 00:59:11 mattiasa Exp $ */
d53 1
a53 1
struct conncacheentry {
d59 1
a59 2
    int (*probe)(struct rx_connection *);
    xfs_pag_t cred;
a63 1
	unsigned old : 1;	/* Old server,vldb -> only VL_GetEntryByName */
d66 1
a66 18
    Listitem *probe_le;
    unsigned probe_next;
    unsigned ntries;
    struct conncacheentry *parent;
    int rtt;
};

typedef struct conncacheentry ConnCacheEntry;

typedef enum { CONN_CS_NONE = 0,
	       CONN_CS_CELL = 1, 
	       CONN_CS_CRED = 2, 
	       CONN_CS_SECIDX = 4,
	       CONN_CS_ALL = 0xffff
	       
} clear_state_mask;

extern int conn_rxkad_level;
a72 1
	  int (*probe)(struct rx_connection *),
a75 9
conn_dead (ConnCacheEntry *);

void
conn_alive (ConnCacheEntry *);

void
conn_probe (ConnCacheEntry *);

void
d85 1
a85 1
conn_status (void);
d88 1
a88 18
conn_clearcred (clear_state_mask mask,
		int32_t cell, xfs_pag_t cred, int securityindex);

void
conn_downhosts(int32_t cell, u_int32_t *hosts, int *num, int flags);

int
conn_rtt_cmp (const void *v1, const void *v2);

Bool
host_downp (int error);

/*
 * Random factor to add to rtts when comparing them.
 * This is in microseconds/8
 */

static const int RTT_FUZZ = 400000;
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
d38 1
a38 1
/* $arla: conn.h,v 1.31 2002/09/07 10:42:57 lha Exp $ */
d44 1
a44 1
#include <nnpfs/nnpfs_message.h>
d48 3
a50 3
    uint32_t host;		/* IP address of host */
    uint16_t port;		/* port number at host */
    uint16_t service;		/* RX service # */
d54 1
a54 1
    nnpfs_pag_t cred;
d85 1
a85 1
conn_get (int32_t cell, uint32_t host, uint16_t port, uint16_t service,
a98 3
conn_ref (ConnCacheEntry *e);

void
d102 1
a102 1
conn_host2cell (uint32_t host, uint16_t port, uint16_t service);
d105 1
a105 1
conn_serverupp (uint32_t host, uint16_t port, uint16_t service);
d112 1
a112 1
		int32_t cell, nnpfs_pag_t cred, int securityindex);
d115 1
a115 1
conn_downhosts(int32_t cell, uint32_t *hosts, int *num, int flags);
a121 3

Bool
conn_isalivep (ConnCacheEntry *e);
@


