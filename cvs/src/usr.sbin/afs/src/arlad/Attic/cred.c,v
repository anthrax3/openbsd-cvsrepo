head	1.7;
access;
symbols
	OPENBSD_5_2:1.6.0.36
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.34
	OPENBSD_5_0:1.6.0.32
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.30
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.28
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.24
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.26
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.22
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.20
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.18
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.16
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.14
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.12
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2012.08.23.06.21.50;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2004.02.27.19.17.36;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.05.08.42.41;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.28.57;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.40.41;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.07;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.52.55;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.52.55;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.22;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.00;	author hin;	state Exp;
branches;
next	;


desc
@@


1.7
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Cache of credentials
 *
 *   Each 'cred,type' pair is collected on a list where the head is in
 *   the cell CRED_ROOT_CELL. This is to enable fast iterations over
 *   all creds for a user (indexed on cred,type).
 */

#include "arla_local.h"
RCSID("$arla: cred.c,v 1.42 2003/06/10 04:23:23 lha Exp $");

#define CRED_ROOT_CELL	(-1)

#define CREDCACHESIZE 101

#define CREDFREEINC 10

/* a hashtable of all credentials */
static Hashtab *credhtab;

/* list of all free entries */
static List *freelist;

/* # of credentials */
static unsigned ncredentials;

/* # of active credentials */
static unsigned nactive_credentials;

static void root_free(CredCacheEntry *);

/*
 * Functions for handling entries into the credentials cache.
 */

static int
credcmp (void *a, void *b)
{
     CredCacheEntry *c1 = (CredCacheEntry*)a;
     CredCacheEntry *c2 = (CredCacheEntry*)b;

     return c1->cred    != c2->cred
	 || c1->type    != c2->type
	 || c1->cell    != c2->cell;
}

static unsigned
credhash (void *a)
{
     CredCacheEntry *c = (CredCacheEntry*)a;

     return c->cred + c->type + c->cell;
}


/*
 * Create `n' credentials and add them to `freelist'
 */

static void
create_new_credentials (unsigned n)
{
    unsigned i;
    CredCacheEntry *entries;

    entries = (CredCacheEntry*)calloc (n, sizeof (CredCacheEntry));
    if (entries == NULL)
	arla_errx (1, ADEBERROR, "credcache: calloc failed");
    for (i = 0; i < n; ++i) {
	entries[i].cred_data = NULL;
	listaddhead (freelist, &entries[i]);
    }
    ncredentials += n;
}

/* 
 * Initialize the cred cache.
 */

void
cred_init (unsigned nentries)
{
     credhtab = hashtabnew (CREDCACHESIZE, credcmp, credhash);
     if (credhtab == NULL)
	 arla_errx (1, ADEBERROR, "cred_init: hashtabnew failed");
     freelist = listnew ();
     if (freelist == NULL)
	 arla_errx (1, ADEBERROR, "cred_init: listnew failed");
     ncredentials = 0;
     create_new_credentials (nentries);
}

static CredCacheEntry *
internal_get (long cell, nnpfs_pag_t cred, int type)
{
    CredCacheEntry *e;
    CredCacheEntry key;

    if (cell == CRED_ROOT_CELL)
	return NULL;

    key.cell = cell;
    key.type = type;
    key.cred = cred;

    e = (CredCacheEntry *)hashtabsearch (credhtab, (void *)&key);

    if (e == NULL && type == CRED_NONE) {
	e = cred_add (cred, type, 0, cell, 0, NULL, 0, 0);
    }

    if (e != NULL) {
	++e->refcount;
	assert(e->cell != CRED_ROOT_CELL);
    }

    return e;
}

struct list_pag {
    int (*func)(CredCacheEntry *, void *);
    void *arg;
};

static Bool
list_pag_func(List *l, Listitem *li, void *arg)
{
    CredCacheEntry *e = listdata(li);
    struct list_pag *d = arg;

    return (d->func)(e, d->arg);
}

int
cred_list_pag(nnpfs_pag_t cred, int type, 
	      int (*func)(CredCacheEntry *, void *), 
	      void *ptr)
{
    CredCacheEntry key, *root_e;
    struct list_pag d;

    key.cell = CRED_ROOT_CELL;
    key.type = type;
    key.cred = cred;

    root_e = (CredCacheEntry *)hashtabsearch (credhtab, (void *)&key);
    if (root_e == NULL)
	return 0;

    d.func = func;
    d.arg = ptr;

    listiter(root_e->pag.list, list_pag_func, &d);

    return 0;
}

CredCacheEntry *
cred_get (long cell, nnpfs_pag_t cred, int type)
{
    if (type == CRED_ANY) {
	CredCacheEntry *e;
	int i;

	for (i = CRED_MAX; i > CRED_NONE; --i) {
	    e = internal_get (cell, cred, i);
	    if (e != NULL)
		return e;
	}

	return internal_get (cell, cred, CRED_NONE);
    } else
	return internal_get (cell, cred, type);
}

static void
recycle_entry (CredCacheEntry *ce)
{
    assert(ce->refcount == 0);

    if (ce->cell != CRED_ROOT_CELL)
	root_free(ce);
    if (!ce->flags.killme)
	hashtabdel (credhtab, ce);
    if (ce->cred_data != NULL)
	free (ce->cred_data);
    memset (ce, 0, sizeof(*ce));
    listaddhead (freelist, ce);
    --nactive_credentials;
}

void
cred_free (CredCacheEntry *ce)
{ 
    if (ce == NULL)
        return;
    assert (ce->cell != CRED_ROOT_CELL);

    --ce->refcount;
    if (ce->flags.killme && ce->refcount == 0)
	recycle_entry (ce);
}

static CredCacheEntry *
get_free_cred (void)
{
    CredCacheEntry *e;

    e = (CredCacheEntry *)listdelhead (freelist);
    if (e != NULL)
	return e;

    create_new_credentials (CREDFREEINC);

    e = (CredCacheEntry *)listdelhead (freelist);
    if (e != NULL)
	return e;

    arla_errx (1, ADEBERROR,
	       "credcache: there was no way of getting a cred");
}

static void
root_free(CredCacheEntry *e)
{
    CredCacheEntry key, *root_e;

    assert(e->cell != CRED_ROOT_CELL);

    if (e->pag.li == NULL)
	return;

    key.cell = CRED_ROOT_CELL;
    key.type = e->type;
    key.cred = e->cred;

    root_e = (CredCacheEntry *)hashtabsearch (credhtab, (void *)&key);
    assert(root_e);

    listdel(root_e->pag.list, e->pag.li);
    e->pag.li = NULL;

    if (listemptyp(root_e->pag.list)) {
	listfree(root_e->pag.list);
	root_e->pag.list = NULL;
	recycle_entry(root_e);
    }
}

static void
add_to_root_entry(CredCacheEntry *e)
{
    CredCacheEntry key, *root_e;

    assert(e->cell != CRED_ROOT_CELL);

    key.cell = CRED_ROOT_CELL;
    key.type = e->type;
    key.cred = e->cred;

    root_e = (CredCacheEntry *)hashtabsearch (credhtab, (void *)&key);
    if (root_e == NULL) {
	root_e = get_free_cred ();

	root_e->cell          = CRED_ROOT_CELL;
	root_e->type          = e->type;
	root_e->cred          = e->cred;
	root_e->securityindex = -1;
	root_e->expire        = 0;
	root_e->cred_data     = NULL;
	root_e->uid           = e->uid;
	root_e->pag.list      = listnew();
	if (root_e->pag.list == NULL)
	    arla_errx (1, ADEBERROR, "add_to_root_entry: out of memory");

	hashtabadd(credhtab, root_e);

	++nactive_credentials;
    }
    e->pag.li = listaddhead (root_e->pag.list, e);
}

CredCacheEntry *
cred_add (nnpfs_pag_t cred, int type, int securityindex, long cell,
	  time_t expire, void *cred_data, size_t cred_data_sz,
	  uid_t uid)
{
    void *data;
    CredCacheEntry *e;
    CredCacheEntry *old;

    if (cred_data != NULL) {
	data = malloc (cred_data_sz);
	if (data == NULL)
	    return NULL;
	memcpy (data, cred_data, cred_data_sz);
    } else
	data = NULL;

    e = get_free_cred ();

    e->cred          = cred;
    e->type          = type;
    e->securityindex = securityindex;
    e->cell          = cell;
    e->expire        = expire;
    e->cred_data     = data;
    e->uid           = uid;
    e->pag.li	     = NULL;

    add_to_root_entry(e);

    old = (CredCacheEntry *)hashtabsearch (credhtab, (void *)e);
    if (old != NULL)
	cred_delete (old);

    hashtabadd (credhtab, e);

    ++nactive_credentials;

    return e;
}

/*
 *
 */

void
cred_delete (CredCacheEntry *ce)
{
    assert(ce->cell != CRED_ROOT_CELL);

    if (ce->refcount > 0) {
	ce->flags.killme = 1;
	hashtabdel (credhtab, ce);
	root_free(ce);
    } else
	recycle_entry (ce);
}

/*
 *
 */

void
cred_expire (CredCacheEntry *ce)
{
    const char *cell_name = cell_num2name (ce->cell);

    if (cell_name != NULL)
	arla_warnx (ADEBWARN,
		    "Credentials for UID %u in cell %s have expired",
		    (unsigned)ce->uid, cell_name);
    else
	arla_warnx (ADEBWARN,
		    "Credentials for UID %u in cell unknown %ld have expired",
		    (unsigned)ce->uid, ce->cell);

    cred_delete (ce);
}

static Bool
remove_entry (void *ptr, void *arg)
{
    CredCacheEntry *ce = (CredCacheEntry *)ptr;
    nnpfs_pag_t *cred = (nnpfs_pag_t *)arg;

    if (ce->cell == CRED_ROOT_CELL)
	return FALSE;

    if (ce->cred == *cred)
	cred_delete (ce);
    return FALSE;
}

void
cred_remove (nnpfs_pag_t cred)
{
    hashtabforeach (credhtab, remove_entry, &cred);
}

static Bool
print_cred (void *ptr, void *arg)
{
    CredCacheEntry *e = (CredCacheEntry *)ptr;

    arla_log(ADEBVLOG, "cred = %u, type = %d, securityindex = %d, "
	     "cell = %ld, refcount = %u, killme = %d, uid = %lu",
	     e->cred, e->type, e->securityindex, e->cell, e->refcount,
	     e->flags.killme, (unsigned long)e->uid);
    return FALSE;
}

void
cred_status (void)
{
    arla_log(ADEBVLOG, "%u(%u) credentials",
	     nactive_credentials, ncredentials);
    hashtabforeach (credhtab, print_cred, NULL);
}
@


1.6
log
@fix bogus assert() usage in afsd, and avoid an assert when
ThisCell is specified as a nonexeistent cell. found by matthieu@@,
ok deraadt@@
@
text
@@


1.5
log
@Merge
@
text
@d227 3
a229 1
{
@


1.4
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d36 4
d43 3
a45 1
RCSID("$KTH: cred.c,v 1.33.2.2 2001/04/21 14:55:34 lha Exp $");
d63 2
d127 1
a127 1
internal_get (long cell, xfs_pag_t cred, int type)
d132 3
d145 1
a145 1
    if (e != NULL)
d147 2
d153 38
d192 1
a192 1
cred_get (long cell, xfs_pag_t cred, int type)
d212 4
d228 2
d254 60
d315 1
a315 1
cred_add (xfs_pag_t cred, int type, int securityindex, long cell,
d340 1
d342 3
a344 1
    old = hashtabsearch (credhtab, e);
d346 1
a346 1
	recycle_entry (old);
d349 1
d351 1
a354 25
#if KERBEROS
CredCacheEntry *
cred_add_krb4 (xfs_pag_t cred, uid_t uid, CREDENTIALS *c)
{
    CredCacheEntry *ce;
    char *cellname;
    int cellnum;

    if (*c->instance == '\0')
	cellname = strdup (c->realm);
    else
	cellname = strdup (c->instance);
    if (cellname == NULL)
	return NULL;
    strlwr (cellname);
    cellnum = cell_name2num(cellname);
    free (cellname);
    if (cellnum == -1)
	return NULL;

    ce = cred_add (cred, CRED_KRB4, 2, cellnum, -1, c, sizeof(*c), uid);
    return ce;
}
#endif

d362 2
d367 1
d383 1
a383 1
		    "Credentials for UID %u in cell %s has expired",
d387 1
a387 1
		    "Credentials for UID %u in cell unknown %ld has expired",
d397 4
a400 1
    xfs_pag_t *cred = (xfs_pag_t *)arg;
d408 1
a408 1
cred_remove (xfs_pag_t cred)
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d39 1
a39 1
RCSID("$Id: cred.c,v 1.32 2000/02/20 04:23:49 assar Exp $");
d161 2
a162 1
    hashtabdel (credhtab, ce);
d265 1
a265 1
    if (ce->refcount > 0)
d267 2
a268 1
    else
a279 7
    struct passwd *pwd = getpwuid (ce->uid);
    const char *user_name;

    if (pwd != NULL)
	user_name = pwd->pw_name;
    else
	user_name = "<who-are-you?>";
d283 2
a284 2
		    "Credentials for %s (%u) in cell %s has expired",
		    user_name, (unsigned)ce->uid, cell_name);
d287 2
a288 2
		    "Credentials for %s (%u) in cell unknown %ld has expired",
		    user_name, (unsigned)ce->uid, ce->cell);
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@a0 1
/*	$OpenBSD$	*/
d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
d44 1
a44 1
RCSID("$KTH: cred.c,v 1.28 1999/04/20 20:58:07 map Exp $");
d124 1
a124 1
internal_get (long cell, pag_t cred, int type)
d146 1
a146 1
cred_get (long cell, pag_t cred, int type)
d202 1
a202 1
cred_add (pag_t cred, int type, int securityindex, long cell,
d239 1
a239 1
cred_add_krb4 (pag_t cred, uid_t uid, CREDENTIALS *c)
d249 2
d254 2
a255 1
    assert (cellnum != -1);
d307 1
a307 1
    pag_t *cred = (pag_t *)arg;
d315 1
a315 1
cred_remove (pag_t cred)
d325 2
a326 2
    arla_log(ADEBVLOG, "cred = %u, type = %d, securityindex = %d\n"
	     "cell = %ld, refcount = %u, killme = %d, uid = %lu\n\n",
d335 1
a335 1
    arla_log(ADEBVLOG, "%u(%u) credentials\n",
@


1.1
log
@Initial revision
@
text
@d45 1
a45 1
RCSID("$KTH: cred.c,v 1.22 1998/06/08 22:26:59 map Exp $");
d137 1
a137 1
	e = cred_add (cred, type, 0, cell, 0, NULL, 0);
d204 2
a205 1
	  time_t expire, void *cred_data, size_t cred_data_sz)
d226 2
a227 1
    e->cred_data = data;
d240 1
a240 1
cred_add_krb4 (pag_t cred, CREDENTIALS *c)
d255 1
a255 1
    ce = cred_add (cred, CRED_KRB4, 2, cellnum, -1, c, sizeof(*c));
d280 18
a321 1
    FILE *f = (FILE *)arg;
d323 2
a324 2
    fprintf (f, "cred = %u, type = %d, securityindex = %d\n"
	     "cell = %ld, refcount = %u, killme = %d\n\n",
d326 1
a326 1
	     e->flags.killme);
d331 1
a331 1
cred_status (FILE *f)
d333 1
a333 1
    fprintf (f, "%u(%u) credentials\n",
d335 1
a335 1
    hashtabforeach (credhtab, print_cred, f);
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d45 1
a45 1
RCSID("$KTH: cred.c,v 1.33.2.2 2001/04/21 14:55:34 lha Exp $");
d125 1
a125 1
internal_get (long cell, xfs_pag_t cred, int type)
d137 1
a137 1
	e = cred_add (cred, type, 0, cell, 0, NULL, 0, 0);
d147 1
a147 1
cred_get (long cell, xfs_pag_t cred, int type)
d167 1
a167 2
    if (!ce->flags.killme)
	hashtabdel (credhtab, ce);
d203 2
a204 3
cred_add (xfs_pag_t cred, int type, int securityindex, long cell,
	  time_t expire, void *cred_data, size_t cred_data_sz,
	  uid_t uid)
d225 1
a225 2
    e->cred_data     = data;
    e->uid           = uid;
d238 1
a238 1
cred_add_krb4 (xfs_pag_t cred, uid_t uid, CREDENTIALS *c)
a247 2
    if (cellname == NULL)
	return NULL;
d251 1
a251 2
    if (cellnum == -1)
	return NULL;
d253 1
a253 1
    ce = cred_add (cred, CRED_KRB4, 2, cellnum, -1, c, sizeof(*c), uid);
d265 1
a265 1
    if (ce->refcount > 0) {
d267 1
a267 2
	hashtabdel (credhtab, ce);
    } else
a277 11
    const char *cell_name = cell_num2name (ce->cell);

    if (cell_name != NULL)
	arla_warnx (ADEBWARN,
		    "Credentials for UID %u in cell %s has expired",
		    (unsigned)ce->uid, cell_name);
    else
	arla_warnx (ADEBWARN,
		    "Credentials for UID %u in cell unknown %ld has expired",
		    (unsigned)ce->uid, ce->cell);

d285 1
a285 1
    xfs_pag_t *cred = (xfs_pag_t *)arg;
d293 1
a293 1
cred_remove (xfs_pag_t cred)
d302 1
d304 2
a305 2
    arla_log(ADEBVLOG, "cred = %u, type = %d, securityindex = %d, "
	     "cell = %ld, refcount = %u, killme = %d, uid = %lu",
d307 1
a307 1
	     e->flags.killme, (unsigned long)e->uid);
d312 1
a312 1
cred_status (void)
d314 1
a314 1
    arla_log(ADEBVLOG, "%u(%u) credentials",
d316 1
a316 1
    hashtabforeach (credhtab, print_cred, NULL);
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
a35 4
 *
 *   Each 'cred,type' pair is collected on a list where the head is in
 *   the cell CRED_ROOT_CELL. This is to enable fast iterations over
 *   all creds for a user (indexed on cred,type).
d39 1
a39 3
RCSID("$arla: cred.c,v 1.42 2003/06/10 04:23:23 lha Exp $");

#define CRED_ROOT_CELL	(-1)
a56 2
static void root_free(CredCacheEntry *);

d119 1
a119 1
internal_get (long cell, nnpfs_pag_t cred, int type)
a123 3
    if (cell == CRED_ROOT_CELL)
	return NULL;

d134 1
a134 1
    if (e != NULL) {
a135 2
	assert(e->cell != CRED_ROOT_CELL);
    }
a139 38
struct list_pag {
    int (*func)(CredCacheEntry *, void *);
    void *arg;
};

static Bool
list_pag_func(List *l, Listitem *li, void *arg)
{
    CredCacheEntry *e = listdata(li);
    struct list_pag *d = arg;

    return (d->func)(e, d->arg);
}

int
cred_list_pag(nnpfs_pag_t cred, int type, 
	      int (*func)(CredCacheEntry *, void *), 
	      void *ptr)
{
    CredCacheEntry key, *root_e;
    struct list_pag d;

    key.cell = CRED_ROOT_CELL;
    key.type = type;
    key.cred = cred;

    root_e = (CredCacheEntry *)hashtabsearch (credhtab, (void *)&key);
    if (root_e == NULL)
	return 0;

    d.func = func;
    d.arg = ptr;

    listiter(root_e->pag.list, list_pag_func, &d);

    return 0;
}

d141 1
a141 1
cred_get (long cell, nnpfs_pag_t cred, int type)
a160 4
    assert(ce->refcount == 0);

    if (ce->cell != CRED_ROOT_CELL)
	root_free(ce);
a172 2
    assert (ce->cell != CRED_ROOT_CELL);

a196 60
static void
root_free(CredCacheEntry *e)
{
    CredCacheEntry key, *root_e;

    assert(e->cell != CRED_ROOT_CELL);

    if (e->pag.li == NULL)
	return;

    key.cell = CRED_ROOT_CELL;
    key.type = e->type;
    key.cred = e->cred;

    root_e = (CredCacheEntry *)hashtabsearch (credhtab, (void *)&key);
    assert(root_e);

    listdel(root_e->pag.list, e->pag.li);
    e->pag.li = NULL;

    if (listemptyp(root_e->pag.list)) {
	listfree(root_e->pag.list);
	root_e->pag.list = NULL;
	recycle_entry(root_e);
    }
}

static void
add_to_root_entry(CredCacheEntry *e)
{
    CredCacheEntry key, *root_e;

    assert(e->cell != CRED_ROOT_CELL);

    key.cell = CRED_ROOT_CELL;
    key.type = e->type;
    key.cred = e->cred;

    root_e = (CredCacheEntry *)hashtabsearch (credhtab, (void *)&key);
    if (root_e == NULL) {
	root_e = get_free_cred ();

	root_e->cell          = CRED_ROOT_CELL;
	root_e->type          = e->type;
	root_e->cred          = e->cred;
	root_e->securityindex = -1;
	root_e->expire        = 0;
	root_e->cred_data     = NULL;
	root_e->uid           = e->uid;
	root_e->pag.list      = listnew();
	if (root_e->pag.list == NULL)
	    arla_errx (1, ADEBERROR, "add_to_root_entry: out of memory");

	hashtabadd(credhtab, root_e);

	++nactive_credentials;
    }
    e->pag.li = listaddhead (root_e->pag.list, e);
}

d198 1
a198 1
cred_add (nnpfs_pag_t cred, int type, int securityindex, long cell,
a222 1
    e->pag.li	     = NULL;
d224 1
a224 3
    add_to_root_entry(e);

    old = (CredCacheEntry *)hashtabsearch (credhtab, (void *)e);
d226 1
a226 1
	cred_delete (old);
d229 11
d241 11
a251 1
    ++nactive_credentials;
d253 2
a254 1
    return e;
d256 1
a264 2
    assert(ce->cell != CRED_ROOT_CELL);

a267 1
	root_free(ce);
d283 1
a283 1
		    "Credentials for UID %u in cell %s have expired",
d287 1
a287 1
		    "Credentials for UID %u in cell unknown %ld have expired",
d297 1
a297 4
    nnpfs_pag_t *cred = (nnpfs_pag_t *)arg;

    if (ce->cell == CRED_ROOT_CELL)
	return FALSE;
d305 1
a305 1
cred_remove (nnpfs_pag_t cred)
@


