head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.08.23.06.21.50;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.08.42.41;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.28.57;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.40.40;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.06;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.52.55;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.52.55;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.22;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.00;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <arla_local.h>
RCSID("$arla: arladeb.c,v 1.29 2002/12/06 04:57:31 lha Exp $");

Log_method* arla_log_method = NULL;
Log_unit* arla_log_unit = NULL;

void
arla_log(unsigned level, const char *fmt, ...)
{
    va_list args;
    
    assert (arla_log_method);
    
    va_start(args, fmt);
    log_vlog(arla_log_unit, level, fmt, args);
    va_end(args);
}


void
arla_loginit(char *logname, log_flags flags)
{
    assert (logname);
    
    arla_log_method = log_open("arla", logname);
    if (arla_log_method == NULL)
	errx (1, "arla_loginit: log_opened failed with log `%s'", logname);
    arla_log_unit = log_unit_init (arla_log_method, "arla", arla_deb_units,
				   ARLA_DEFAULT_LOG);
    if (arla_log_unit == NULL)
	errx (1, "arla_loginit: log_unit_init failed");
    log_setflags (arla_log_method, flags);
}

int
arla_log_set_level (const char *s)
{
    log_set_mask_str (arla_log_method, NULL, s);
    return 0;
}

void
arla_log_set_level_num (unsigned level)
{
    log_set_mask (arla_log_unit, level);
}

void
arla_log_get_level (char *s, size_t len)
{
    log_mask2str (arla_log_method, NULL, s, len);
}

unsigned
arla_log_get_level_num (void)
{
    return log_get_mask (arla_log_unit);
}

/*
 *
 */

void
arla_err (int eval, unsigned level, int error, const char *fmt, ...)
{
    va_list args;

    va_start (args, fmt);
    arla_verr (eval, level, error, fmt, args);
    va_end (args);
}

void
arla_verr (int eval, unsigned level, int error, const char *fmt, va_list args)
{
    char *s;

    vasprintf (&s, fmt, args);
    if (s == NULL) {
	log_log (arla_log_unit, level,
		 "Sorry, no memory to print `%s'...", fmt);
	exit (eval);
    }
    log_log (arla_log_unit, level, "%s: %s", s, koerr_gettext (error));
    free (s);
    exit (eval);
}

void
arla_errx (int eval, unsigned level, const char *fmt, ...)
{
    va_list args;

    va_start (args, fmt);
    arla_verrx (eval, level, fmt, args);
    va_end (args);
}

void
arla_verrx (int eval, unsigned level, const char *fmt, va_list args)
{
    log_vlog (arla_log_unit, level, fmt, args);
    exit (eval);
}

void
arla_warn (unsigned level, int error, const char *fmt, ...)
{
    va_list args;

    va_start (args, fmt);
    arla_vwarn (level, error, fmt, args);
    va_end (args);
}

void
arla_vwarn (unsigned level, int error, const char *fmt, va_list args)
{
    char *s;

    vasprintf (&s, fmt, args);
    if (s == NULL) {
	log_log (arla_log_unit, level,
		 "Sorry, no memory to print `%s'...", fmt);
	return;
    }
    log_log (arla_log_unit, level, "%s: %s", s, koerr_gettext (error));
    free (s);
}

void
arla_warnx (unsigned level, const char *fmt, ...)
{
    va_list args;

    va_start (args, fmt);
    arla_vwarnx (level, fmt, args);
    va_end (args);
}

void
arla_vwarnx (unsigned level, const char *fmt, va_list args)
{
    log_vlog (arla_log_unit, level, fmt, args);
}

void
arla_warnx_with_fid (unsigned level, const VenusFid *fid, const char *fmt, ...)
{
    va_list args;

    va_start (args, fmt);
    arla_vwarnx_with_fid (level, fid, fmt, args);
    va_end(args);
}

void
arla_vwarnx_with_fid (unsigned level, const VenusFid *fid, const char *fmt,
		      va_list args)
{
    char *s;
    const char *cellname;
    char volname[VLDB_MAXNAMELEN];

    cellname = cell_num2name (fid->Cell);
    if (cellname == NULL)
	cellname = "<unknown>";
    if (volcache_getname (fid->fid.Volume, fid->Cell,
			  volname, sizeof(volname)) != 0)
	strlcpy(volname, "<unknown>", sizeof(volname));

    vasprintf (&s, fmt, args);
    if (s == NULL) {
	log_log (arla_log_unit, level,
		 "Sorry, no memory to print `%s'...", fmt);
	return;
    }
    log_log (arla_log_unit, level,
	     "volume %s (%ld) in cell %s (%ld): %s",
	     volname, (unsigned long)fid->fid.Volume, cellname,
	     (long)fid->Cell, s);
    free (s);
}
@


1.5
log
@Merge
@
text
@@


1.4
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d35 1
a35 1
RCSID("$KTH: arladeb.c,v 1.24.2.2 2001/04/30 00:01:59 lha Exp $");
d41 1
a41 1
arla_log(unsigned level, char *fmt, ...)
d54 1
a54 1
arla_loginit(char *log, log_flags flags)
d56 1
a56 1
    assert (log);
d58 1
a58 1
    arla_log_method = log_open("arla", log);
d60 1
a60 1
	errx (1, "arla_loginit: log_opened failed with log `%s'", log);
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d34 2
a35 15
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <assert.h>
#include <stdarg.h>
#include <stdlib.h>
#include <err.h>
#include <parse_units.h>
#include <roken.h>
#include "volcache.h"
#include "ko.h"

#include "arladeb.h"

RCSID("$Id: arladeb.c,v 1.22 2000/08/24 21:44:32 lha Exp $");
a39 30
#define all (ADEBERROR | ADEBWARN | ADEBDISCONN | ADEBFBUF |		\
	     ADEBMSG | ADEBKERNEL | ADEBCLEANER | ADEBCALLBACK |	\
	     ADEBCM | ADEBVOLCACHE | ADEBFCACHE | ADEBINIT |		\
	     ADEBCONN | ADEBMISC | ADEBVLOG)

#define DEFAULT_LOG (ADEBWARN | ADEBERROR)

struct units arla_deb_units[] = {
    { "all",		all},
    { "almost-all",	all & ~ADEBCLEANER},
    { "errors",		ADEBERROR },
    { "warnings",	ADEBWARN },
    { "disconn",	ADEBDISCONN },
    { "fbuf",		ADEBFBUF },
    { "messages",	ADEBMSG },
    { "kernel",		ADEBKERNEL },
    { "cleaner",	ADEBCLEANER },
    { "callbacks",	ADEBCALLBACK },
    { "cache-manager",	ADEBCM },
    { "volume-cache",	ADEBVOLCACHE },
    { "file-cache",	ADEBFCACHE },
    { "initialization",	ADEBINIT },
    { "connection",	ADEBCONN },
    { "miscellaneous",	ADEBMISC },
    { "venuslog",	ADEBVLOG },
    { "default",	DEFAULT_LOG },
    { "none",		0 },
    { NULL }
};

d52 1
d54 1
a54 1
arla_loginit(char *log)
d62 1
a62 1
				   DEFAULT_LOG);
d65 1
a92 6
void
arla_log_print_levels (FILE *f)
{
    print_flags_table (arla_deb_units, f);
}

d179 38
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@a0 1
/*	$OpenBSD$	*/
d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
d39 11
a49 1
#include "arla_local.h"
d51 1
a51 1
RCSID("$KTH: arladeb.c,v 1.15 1999/04/20 20:58:07 map Exp $");
d53 4
a56 1
static Log_method* arla_log_method = NULL;
d96 1
a96 1
    log_vlog(arla_log_method, level, fmt, args);
d106 6
a111 1
    log_set_mask(arla_log_method, DEFAULT_LOG);
d117 2
a118 9
    int ret;

    ret = parse_flags (s, arla_deb_units, log_get_mask(arla_log_method));
    if (ret < 0)
	return ret;
    else {
	log_set_mask (arla_log_method, ret);
	return 0;
    }
d124 1
a124 1
    log_set_mask (arla_log_method, level);
d130 1
a130 2
    unparse_flags (log_get_mask (arla_log_method),
		   arla_deb_units, s, len);
d136 1
a136 1
    return log_get_mask (arla_log_method);
d166 1
a166 1
	log_log (arla_log_method, level,
d170 1
a170 1
    log_log (arla_log_method, level, "%s: %s", s, koerr_gettext (error));
d188 1
a188 1
    log_vlog (arla_log_method, level, fmt, args);
d209 1
a209 1
	log_log (arla_log_method, level,
d213 1
a213 1
    log_log (arla_log_method, level, "%s: %s", s, koerr_gettext (error));
d230 1
a230 1
    log_vlog (arla_log_method, level, fmt, args);
@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
RCSID("$KTH: arladeb.c,v 1.12 1998/04/03 03:30:17 assar Exp $");
d46 7
d54 15
a68 1
    { "all",		(unsigned)(~0) >> 1 },
d70 2
a71 12
    { "connection",	ADEBCONN },
    { "initialization",	ADEBINIT },
    { "file-cache",	ADEBFCACHE },
    { "volume-cache",	ADEBVOLCACHE },
    { "cache-manager",	ADEBCM },
    { "callbacks",	ADEBCALLBACK },
    { "cleaner",	ADEBCLEANER },
    { "kernel",		ADEBKERNEL },
    { "messages",	ADEBMSG },
    { "fbuf",		ADEBFBUF },
    { "warnings",	ADEBWARN },
    { "errors",		ADEBERROR },
a75 2
#define DEFAULT_LOG (ADEBWARN | ADEBERROR)

d112 6
d122 6
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d40 24
a63 2
#include <arla_local.h>
RCSID("$KTH: arladeb.c,v 1.24.2.2 2001/04/30 00:01:59 lha Exp $");
d65 1
a65 2
Log_method* arla_log_method = NULL;
Log_unit* arla_log_unit = NULL;
d75 1
a75 1
    log_vlog(arla_log_unit, level, fmt, args);
a78 1

d80 1
a80 1
arla_loginit(char *log, log_flags flags)
d85 1
a85 7
    if (arla_log_method == NULL)
	errx (1, "arla_loginit: log_opened failed with log `%s'", log);
    arla_log_unit = log_unit_init (arla_log_method, "arla", arla_deb_units,
				   ARLA_DEFAULT_LOG);
    if (arla_log_unit == NULL)
	errx (1, "arla_loginit: log_unit_init failed");
    log_setflags (arla_log_method, flags);
d91 1
a91 3
    log_set_mask_str (arla_log_method, NULL, s);
    return 0;
}
d93 7
a99 4
void
arla_log_set_level_num (unsigned level)
{
    log_set_mask (arla_log_unit, level);
d105 2
a106 1
    log_mask2str (arla_log_method, NULL, s, len);
d109 2
a110 2
unsigned
arla_log_get_level_num (void)
d112 1
a112 1
    return log_get_mask (arla_log_unit);
d136 1
a136 1
	log_log (arla_log_unit, level,
d140 1
a140 1
    log_log (arla_log_unit, level, "%s: %s", s, koerr_gettext (error));
d158 1
a158 1
    log_vlog (arla_log_unit, level, fmt, args);
d179 1
a179 1
	log_log (arla_log_unit, level,
d183 1
a183 1
    log_log (arla_log_unit, level, "%s: %s", s, koerr_gettext (error));
d200 1
a200 39
    log_vlog (arla_log_unit, level, fmt, args);
}

void
arla_warnx_with_fid (unsigned level, const VenusFid *fid, const char *fmt, ...)
{
    va_list args;

    va_start (args, fmt);
    arla_vwarnx_with_fid (level, fid, fmt, args);
    va_end(args);
}

void
arla_vwarnx_with_fid (unsigned level, const VenusFid *fid, const char *fmt,
		      va_list args)
{
    char *s;
    const char *cellname;
    char volname[VLDB_MAXNAMELEN];

    cellname = cell_num2name (fid->Cell);
    if (cellname == NULL)
	cellname = "<unknown>";
    if (volcache_getname (fid->fid.Volume, fid->Cell,
			  volname, sizeof(volname)) != 0)
	strlcpy(volname, "<unknown>", sizeof(volname));

    vasprintf (&s, fmt, args);
    if (s == NULL) {
	log_log (arla_log_unit, level,
		 "Sorry, no memory to print `%s'...", fmt);
	return;
    }
    log_log (arla_log_unit, level,
	     "volume %s (%ld) in cell %s (%ld): %s",
	     volname, (unsigned long)fid->fid.Volume, cellname,
	     (long)fid->Cell, s);
    free (s);
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
d35 1
a35 1
RCSID("$arla: arladeb.c,v 1.29 2002/12/06 04:57:31 lha Exp $");
d41 1
a41 1
arla_log(unsigned level, const char *fmt, ...)
d54 1
a54 1
arla_loginit(char *logname, log_flags flags)
d56 1
a56 1
    assert (logname);
d58 1
a58 1
    arla_log_method = log_open("arla", logname);
d60 1
a60 1
	errx (1, "arla_loginit: log_opened failed with log `%s'", logname);
@


