head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.38
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.36
	OPENBSD_5_0:1.3.0.34
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.32
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.30
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2012.08.23.06.21.49;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2003.08.05.08.42.41;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.28.57;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.40.39;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.22;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.21.00;	author hin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@the afs src tree can go away
@
text
@#
# $arla: .gdbinit,v 1.10 2002/04/10 08:56:33 lha Exp $
#

define memoryusage
y
printf "rx bytes: bytes: %d allocations: %d\n", rxi_Allocsize, rxi_Alloccnt
printf "fcache: highvnode: %d usedvnode: %d\n", highvnodes, usedvnodes
printf "conn: nconnections %d\n", nconnections
printf "cred: ncredentials %d\n", ncredentials
end


define listfcachenodes
set $foo = lrulist->head
while $foo != 0
print *(FCacheEntry *) $foo->data
set $foo = $foo->next
end
print 4711
end

document listfcachenodes
List all fcache nodes in the lru-list
end


define listfcachenodes_fid
set $foo = lrulist->head
while $foo != 0
print ((FCacheEntry *) $foo->data)->fid
set $foo = $foo->next
end
print 4711
end

document listfcachenodes_fid
List all fcache nodes's fids in the lru-list
end

define fcache_lru_num_nodes
set $bar = 0
set $foo = lrulist->head
while $foo != 0
set $bar = $bar + 1
set $foo = $foo->next
end
print $bar
end

document fcache_lru_num_nodes
Count number of nodes in the fcache lrulist
end

define fcache_lru_num_used_nodes
set $bar = 0
set $foo = lrulist->head
while $foo != 0
if ((FCacheEntry *) $foo->data)->flags.usedp != 0
set $bar = $bar + 1
end
set $foo = $foo->next
end
print $bar
end

document fcache_lru_num_used_nodes
Count number of USED nodes in the fcache lrulist
end

define lwp_ps_internal
set $lwp_ps_queue = $arg0
set $bf = $arg1
set $lwp_ps_counter = $lwp_ps_queue.count
set $lwp_ps_foo = $lwp_ps_queue->head
while $lwp_ps_counter != 0
  printf " name: %s   index: %d", (char *) $lwp_ps_foo->name, $lwp_ps_foo->index
  if $lwp_ps_foo == lwp_cpptr
    printf "                 RUNNING THREAD"
  end
  printf "\n"
  if $bf == 0
    printf "  eventlist:"
    set $lwp_ps_envcnt = 0
    while $lwp_ps_envcnt < $lwp_ps_foo->eventcnt
      printf " %x",  $lwp_ps_foo->eventlist[$lwp_ps_envcnt]
      set $lwp_ps_envcnt = $lwp_ps_envcnt + 1
    end
    printf "\n"
    if $lwp_ps_foo == lwp_cpptr
      printf "  fp: 0x%x\n", $fp
      printf "  pc: 0x%x\n", $pc
      printf "  pointers on topstack added for completeness\n"
    end
    printf "  fp: 0x%x\n",  ((int *)$lwp_ps_foo->context->topstack)[2]
    printf "  pc: 0x%x\n",  ((int *)$lwp_ps_foo->context->topstack)[3]
  else
    set $foo = ((int *)$lwp_ps_foo->context->topstack)[2]
    backfrom $foo $foo
  end
  set $lwp_ps_foo = $lwp_ps_foo->next
  set $lwp_ps_counter = $lwp_ps_counter - 1
end
end

define lwp_ps_int
set $bf = $arg0
echo Runnable[0]\n
lwp_ps_internal runnable[0] $bf
echo Runnable[1]\n
lwp_ps_internal runnable[1] $bf
echo Runnable[2]\n
lwp_ps_internal runnable[2] $bf
echo Runnable[3]\n
lwp_ps_internal runnable[3] $bf
echo Runnable[4]\n
lwp_ps_internal runnable[4] $bf
echo Blocked\n
lwp_ps_internal blocked $bf
end

define lwp_ps
lwp_ps_int 0
end

document lwp_ps
Print all processes, running or blocked
end

define lwp_backfrom_all
lwp_ps_int 1
end

document lwp_backfrom_all
Traces from all processes, running or blocked
end



define list_count
   set $count = 0
   set $current = ((List *)$arg0)->head
   while $current != 0
     set $count = $count + 1
     set $current = $current->next
   end
   printf "List contains %d entries\n", $count
end

document list_count
Count number of elements on util LIST.
end

define volume_print
   set $current = 'volcache.c'::lrulist->head
   while $current != 0
     set $entry = (VolCacheEntry *)$current->data
     if $entry->refcount != 0
        printf "%p - %s ref: %d\n", $entry, $entry->entry->name, $entry->refcount
     end
     set $current = $current->next
   end
end

document volume_print
Print the volume in the volcache
end

define volume_count
   set $cnt = 0
   set $vol_refs = 0
   set $total_cnt = 0
   set $current = 'volcache.c'::lrulist->head
   while $current != 0
     set $entry = (VolCacheEntry *)$current->data
     if $entry->refcount != 0
	set $cnt = $cnt + 1
        set $total_cnt = $total_cnt + $entry->refcount
     end
     set $vol_refs = $vol_refs + $entry->vol_refs
     set $current = $current->next
   end
   printf "Used volcache: counted: %d count: %d max: %d\n", $cnt, nactive_volcacheentries, nvolcacheentries
   printf "Refcount total: %d, used fcache nodes are: %d\n", $total_cnt, 'fcache.c'::usedvnodes
   printf "Volrefs total to %d\n", $vol_refs
end

document volume_count
Print the number of active entries in volcache, by counting 
them and printing the accounting variables
end

define volume_check
   set $current = 'volcache.c'::lrulist->head
   while $current != 0
     set $entry = (VolCacheEntry *)$current->data
     printf "checking %s\n", $entry->entry->name

     if $entry->refcount != 0
        set $cnt = 0
        printf "  checking fcache\n"
        set $fcur = 'fcache.c'::lrulist->head
        while $fcur != 0
           if ((FCacheEntry *)$fcur->data)->volume == $entry
              set $cnt = $cnt + 1
           end
           set $fcur = $fcur->next
        end
        if $cnt != $entry->refcount
           printf " failed %d fcache entries used, while entry was accounted for %d\n", $cnt, $entry->refcount
        else	   
           printf " ok\n"	   
        end	   
     end

     set $current = $current->next
   end
end

document volume_check
Check volcache consistency WRT fcache usage, too slow to use !
end


define conn_print
set $num = 0
while $num < connhtab->sz
  set $current = connhtab->tab[$num]
  while $current != 0
     set $data = (ConnCacheEntry *)$current->ptr
     print *$data
     printf " Cuid: %lx/%lx\n", $data->connection.epoch, $data->connection.cid
     set $current = $current->next
  end
  set $num = $num + 1
end
end

document conn_print
Print all entries on volcache cache
end
@


1.3
log
@Merge
@
text
@@


1.2
log
@merge
@
text
@d2 1
a2 1
# $KTH: .gdbinit,v 1.5 2000/11/02 12:41:46 lha Exp $
d5 8
d73 1
d77 1
a77 1
  printf " name: %s", (char *) $lwp_ps_foo->name
d82 18
a99 11
  printf "  eventlist:"
  set $lwp_ps_envcnt = 0
  while $lwp_ps_envcnt < $lwp_ps_foo->eventcnt
    printf " %x",  $lwp_ps_foo->eventlist[$lwp_ps_envcnt]
    set $lwp_ps_envcnt = $lwp_ps_envcnt + 1
  end
  printf "\n"
  if $lwp_ps_foo == lwp_cpptr
    printf "  fp: 0x%x\n", $fp
    printf "  pc: 0x%x\n", $pc
    printf "  pointers on topstack added for completeness\n"
a100 2
  printf "  fp: 0x%x\n",  ((int *)$lwp_ps_foo->context->topstack)[2]
  printf "  pc: 0x%x\n",  ((int *)$lwp_ps_foo->context->topstack)[3]
d106 2
a107 1
define lwp_ps
d109 1
a109 1
lwp_ps_internal runnable[0]
d111 1
a111 1
lwp_ps_internal runnable[1]
d113 1
a113 1
lwp_ps_internal runnable[2]
d115 1
a115 1
lwp_ps_internal runnable[3]
d117 1
a117 1
lwp_ps_internal runnable[4]
d119 5
a123 1
lwp_ps_internal blocked
d130 10
d222 19
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d2 1
a2 1
# $Id: .gdbinit,v 1.3 1999/12/14 22:27:32 lha Exp $
d109 84
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d2 1
a2 1
# $KTH: .gdbinit,v 1.5 2000/11/02 12:41:46 lha Exp $
a108 84
end

define list_count
   set $count = 0
   set $current = ((List *)$arg0)->head
   while $current != 0
     set $count = $count + 1
     set $current = $current->next
   end
   printf "List contains %d entries\n", $count
end

document list_count
Count number of elements on util LIST.
end

define volume_print
   set $current = 'volcache.c'::lrulist->head
   while $current != 0
     set $entry = (VolCacheEntry *)$current->data
     if $entry->refcount != 0
        printf "%p - %s ref: %d\n", $entry, $entry->entry->name, $entry->refcount
     end
     set $current = $current->next
   end
end

document volume_print
Print the volume in the volcache
end

define volume_count
   set $cnt = 0
   set $vol_refs = 0
   set $total_cnt = 0
   set $current = 'volcache.c'::lrulist->head
   while $current != 0
     set $entry = (VolCacheEntry *)$current->data
     if $entry->refcount != 0
	set $cnt = $cnt + 1
        set $total_cnt = $total_cnt + $entry->refcount
     end
     set $vol_refs = $vol_refs + $entry->vol_refs
     set $current = $current->next
   end
   printf "Used volcache: counted: %d count: %d max: %d\n", $cnt, nactive_volcacheentries, nvolcacheentries
   printf "Refcount total: %d, used fcache nodes are: %d\n", $total_cnt, 'fcache.c'::usedvnodes
   printf "Volrefs total to %d\n", $vol_refs
end

document volume_count
Print the number of active entries in volcache, by counting 
them and printing the accounting variables
end

define volume_check
   set $current = 'volcache.c'::lrulist->head
   while $current != 0
     set $entry = (VolCacheEntry *)$current->data
     printf "checking %s\n", $entry->entry->name

     if $entry->refcount != 0
        set $cnt = 0
        printf "  checking fcache\n"
        set $fcur = 'fcache.c'::lrulist->head
        while $fcur != 0
           if ((FCacheEntry *)$fcur->data)->volume == $entry
              set $cnt = $cnt + 1
           end
           set $fcur = $fcur->next
        end
        if $cnt != $entry->refcount
           printf " failed %d fcache entries used, while entry was accounted for %d\n", $cnt, $entry->refcount
        else	   
           printf " ok\n"	   
        end	   
     end

     set $current = $current->next
   end
end

document volume_check
Check volcache consistency WRT fcache usage, too slow to use !
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d2 1
a2 1
# $arla: .gdbinit,v 1.10 2002/04/10 08:56:33 lha Exp $
a4 8
define memoryusage
y
printf "rx bytes: bytes: %d allocations: %d\n", rxi_Allocsize, rxi_Alloccnt
printf "fcache: highvnode: %d usedvnode: %d\n", highvnodes, usedvnodes
printf "conn: nconnections %d\n", nconnections
printf "cred: ncredentials %d\n", ncredentials
end

a64 1
set $bf = $arg1
d68 1
a68 1
  printf " name: %s   index: %d", (char *) $lwp_ps_foo->name, $lwp_ps_foo->index
d73 11
a83 18
  if $bf == 0
    printf "  eventlist:"
    set $lwp_ps_envcnt = 0
    while $lwp_ps_envcnt < $lwp_ps_foo->eventcnt
      printf " %x",  $lwp_ps_foo->eventlist[$lwp_ps_envcnt]
      set $lwp_ps_envcnt = $lwp_ps_envcnt + 1
    end
    printf "\n"
    if $lwp_ps_foo == lwp_cpptr
      printf "  fp: 0x%x\n", $fp
      printf "  pc: 0x%x\n", $pc
      printf "  pointers on topstack added for completeness\n"
    end
    printf "  fp: 0x%x\n",  ((int *)$lwp_ps_foo->context->topstack)[2]
    printf "  pc: 0x%x\n",  ((int *)$lwp_ps_foo->context->topstack)[3]
  else
    set $foo = ((int *)$lwp_ps_foo->context->topstack)[2]
    backfrom $foo $foo
d85 2
d92 1
a92 2
define lwp_ps_int
set $bf = $arg0
d94 1
a94 1
lwp_ps_internal runnable[0] $bf
d96 1
a96 1
lwp_ps_internal runnable[1] $bf
d98 1
a98 1
lwp_ps_internal runnable[2] $bf
d100 1
a100 1
lwp_ps_internal runnable[3] $bf
d102 1
a102 1
lwp_ps_internal runnable[4] $bf
d104 1
a104 5
lwp_ps_internal blocked $bf
end

define lwp_ps
lwp_ps_int 0
a110 10
define lwp_backfrom_all
lwp_ps_int 1
end

document lwp_backfrom_all
Traces from all processes, running or blocked
end



a192 19
end


define conn_print
set $num = 0
while $num < connhtab->sz
  set $current = connhtab->tab[$num]
  while $current != 0
     set $data = (ConnCacheEntry *)$current->ptr
     print *$data
     printf " Cuid: %lx/%lx\n", $data->connection.epoch, $data->connection.cid
     set $current = $current->next
  end
  set $num = $num + 1
end
end

document conn_print
Print all entries on volcache cache
@


