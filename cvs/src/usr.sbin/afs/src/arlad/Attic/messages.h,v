head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.08.23.06.21.50;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.08.42.41;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.28.57;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.40.43;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.10;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.52.57;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.52.57;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.24;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.01;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 *
 */

/* $arla: messages.h,v 1.24 2002/09/07 10:43:22 lha Exp $ */

#ifndef _MESSAGES_H_
#define _MESSAGES_H_

void nnpfs_message_init (void);
int nnpfs_message_receive (int fd, struct nnpfs_message_header *h, u_int size);
void break_callback (FCacheEntry *e);
void install_attr (FCacheEntry *e, int flags);

long afsfid2inode(const VenusFid *fid);

int
nnpfs_attr2afsstorestatus(struct nnpfs_attr *xa,
			AFSStoreStatus *storestatus);

void
update_fid(VenusFid oldfid, FCacheEntry *old_entry,
	   VenusFid newfid, FCacheEntry *new_entry);

enum { FCACHE2NNPFSNODE_LENGTH = 1 } ;	/* allow update of filedata */

#define FCACHE2NNPFSNODE_NO_LENGTH	0
#define FCACHE2NNPFSNODE_ALL		(FCACHE2NNPFSNODE_LENGTH)

void
fcacheentry2nnpfsnode (const VenusFid *fid,
		     const VenusFid *statfid, 
		     AFSFetchStatus *status,
		     struct nnpfs_msg_node *node,
                     AccessEntry *ae,
		     int flags);

int
VenusFid_cmp (const VenusFid *fid1, const VenusFid *fid2);

#endif /* _MESSAGES_H_ */
@


1.5
log
@Merge
@
text
@@


1.4
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d38 1
a38 1
/* $KTH: messages.h,v 1.17 2001/01/07 18:32:49 lha Exp $ */
d43 2
a44 2
void xfs_message_init (void);
int xfs_message_receive (int fd, struct xfs_message_header *h, u_int size);
d51 1
a51 1
xfs_attr2afsstorestatus(struct xfs_attr *xa,
d58 1
a58 2
enum { FCACHE2XFSNODE_ATTR = 1,
       FCACHE2XFSNODE_RIGHT = 2 } ;
d60 2
a61 1
#define FCACHE2XFSNODE_ALL (FCACHE2XFSNODE_ATTR|FCACHE2XFSNODE_RIGHT)
d64 1
a64 1
fcacheentry2xfsnode (const VenusFid *fid,
d67 1
a67 1
		     struct xfs_msg_node *node,
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d38 1
a38 1
/* $Id: messages.h,v 1.15 2000/06/10 16:45:44 assar Exp $ */
d46 1
a46 1
void install_attr (FCacheEntry *e);
d58 5
d68 2
a69 1
                     AccessEntry *ae);
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@a0 1
/*	$OpenBSD$	*/
d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
d43 1
a43 1
/* $KTH: messages.h,v 1.8 1998/12/02 16:53:41 lha Exp $ */
d50 1
a50 1
void break_callback (VenusFid fid);
d53 1
a53 1
long afsfid2inode(VenusFid *fid);
d60 12
a71 1
update_kernelfid(VenusFid oldfid, VenusFid newfid);
@


1.1
log
@Initial revision
@
text
@d44 1
a44 1
/* $KTH: messages.h,v 1.5 1998/03/25 03:27:20 assar Exp $ */
d52 2
d55 7
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d44 1
a44 1
/* $KTH: messages.h,v 1.17 2001/01/07 18:32:49 lha Exp $ */
d51 2
a52 28
void break_callback (FCacheEntry *e);
void install_attr (FCacheEntry *e, int flags);

long afsfid2inode(const VenusFid *fid);

int
xfs_attr2afsstorestatus(struct xfs_attr *xa,
			AFSStoreStatus *storestatus);

void
update_fid(VenusFid oldfid, FCacheEntry *old_entry,
	   VenusFid newfid, FCacheEntry *new_entry);

enum { FCACHE2XFSNODE_ATTR = 1,
       FCACHE2XFSNODE_RIGHT = 2 } ;

#define FCACHE2XFSNODE_ALL (FCACHE2XFSNODE_ATTR|FCACHE2XFSNODE_RIGHT)

void
fcacheentry2xfsnode (const VenusFid *fid,
		     const VenusFid *statfid, 
		     AFSFetchStatus *status,
		     struct xfs_msg_node *node,
                     AccessEntry *ae,
		     int flags);

int
VenusFid_cmp (const VenusFid *fid1, const VenusFid *fid2);
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
d38 1
a38 1
/* $arla: messages.h,v 1.24 2002/09/07 10:43:22 lha Exp $ */
d43 2
a44 2
void nnpfs_message_init (void);
int nnpfs_message_receive (int fd, struct nnpfs_message_header *h, u_int size);
d51 1
a51 1
nnpfs_attr2afsstorestatus(struct nnpfs_attr *xa,
d58 2
a59 1
enum { FCACHE2NNPFSNODE_LENGTH = 1 } ;	/* allow update of filedata */
d61 1
a61 2
#define FCACHE2NNPFSNODE_NO_LENGTH	0
#define FCACHE2NNPFSNODE_ALL		(FCACHE2NNPFSNODE_LENGTH)
d64 1
a64 1
fcacheentry2nnpfsnode (const VenusFid *fid,
d67 1
a67 1
		     struct nnpfs_msg_node *node,
@


