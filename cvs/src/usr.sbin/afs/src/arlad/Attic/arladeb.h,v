head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.08.23.06.21.50;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.08.42.41;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.28.57;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.40.40;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.06;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.52.55;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.52.55;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.22;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.00;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * $arla: arladeb.h,v 1.31 2002/12/06 04:58:00 lha Exp $
 */

#ifndef _arladeb_h
#define _arladeb_h

#include <stdio.h>
#include <stdarg.h>
#include <log.h>

#include <roken.h>

extern Log_method* arla_log_method;
extern Log_unit* arla_log_unit;
extern struct units arla_deb_units[];

/* masks */
#define ADEBANY		0xffffffff
#define ADEBMISC        0x00000001	/* misc debugging */
#define ADEBCONN        0x00000002	/* conncache */
#define ADEBINIT        0x00000004	/* initialization debug */
#define ADEBFCACHE	0x00000008	/* file cache */
#define ADEBVOLCACHE	0x00000010	/* volume cache */
#define ADEBCM		0x00000020      /* cache manager */
#define ADEBCALLBACK	0x00000040      /* callbacks */
#define ADEBCLEANER	0x00000080      /* cleaner */
#define ADEBKERNEL	0x00000100      /* kernel interface */
#define ADEBMSG		0x00000200	/* messages */
#define ADEBFBUF	0x00000400	/* fbuf */
#define ADEBDISCONN	0x00000800	/* disconn */
#define ADEBWARN	0x08000000      /* don't ignore warning */
#define ADEBERROR	0x10000000      /* don't ignore error */
#define ADEBVLOG	0x20000000	/* venuslog output */
#define ADEBINVALIDATOR	0x40000000	/* invalidator output */

#define ARLA_DEFAULT_LOG (ADEBWARN | ADEBERROR)

extern struct units arla_deb_units[];

void arla_log(unsigned level, const char *fmt, ...);
void arla_loginit(char *logname, log_flags flags);
int arla_log_set_level (const char *s);
void arla_log_set_level_num (unsigned level);
void arla_log_get_level (char *s, size_t len);
unsigned arla_log_get_level_num (void);
void arla_log_print_levels (FILE *f);

void
arla_err (int eval, unsigned level, int error, const char *fmt, ...)
__attribute__ ((noreturn))
__attribute__ ((format (printf, 4, 5)))
;

void
arla_verr (int eval, unsigned level, int error, const char *fmt, va_list args)
__attribute__ ((noreturn))
__attribute__ ((format (printf, 4, 0)))
;

void
arla_errx (int eval, unsigned level, const char *fmt, ...)
__attribute__ ((noreturn))
__attribute__ ((format (printf, 3, 4)))
;

void
arla_verrx (int eval, unsigned level, const char *fmt, va_list args)
__attribute__ ((noreturn))
__attribute__ ((format (printf, 3, 0)))
;

void
arla_warn (unsigned level, int error, const char *fmt, ...)
__attribute__ ((format (printf, 3, 4)))
;

void
arla_vwarn (unsigned level, int error, const char *fmt, va_list args)
__attribute__ ((format (printf, 3, 0)))
;

void
arla_warnx (unsigned level, const char *fmt, ...)
__attribute__ ((format (printf, 2, 3)))
;

void
arla_vwarnx (unsigned level, const char *fmt, va_list args)
__attribute__ ((format (printf, 2, 0)))
;

void
arla_warnx_with_fid (unsigned level, const VenusFid *fid, const char *fmt, ...)
__attribute__ ((format (printf, 3, 4)));

void
arla_vwarnx_with_fid (unsigned level, const VenusFid *fid, const char *fmt,
		      va_list args)
__attribute__ ((format (printf, 3, 0)));

#endif				       /* _arladeb_h */
@


1.5
log
@Merge
@
text
@@


1.4
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
d35 1
a35 1
 * $KTH: arladeb.h,v 1.24.2.1 2001/04/30 00:02:15 lha Exp $
d68 1
d74 2
a75 2
void arla_log(unsigned level, char *fmt, ...);
void arla_loginit(char *log, log_flags flags);
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d35 1
a35 1
 * $Id: arladeb.h,v 1.22 2000/08/24 21:44:32 lha Exp $
d49 1
d69 2
d74 1
a74 1
void arla_loginit(char *log);
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@a0 1
/*	$OpenBSD$	*/
d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
d40 1
a40 1
 * $KTH: arladeb.h,v 1.19 1999/04/20 20:58:07 map Exp $
d48 1
d52 3
d126 9
@


1.1
log
@Initial revision
@
text
@d41 1
a41 1
 * $KTH: arladeb.h,v 1.16 1998/05/23 05:25:47 assar Exp $
d65 1
d68 3
d75 1
d77 1
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d41 1
a41 1
 * $KTH: arladeb.h,v 1.24.2.1 2001/04/30 00:02:15 lha Exp $
a48 1
#include <log.h>
a51 4
extern Log_method* arla_log_method;
extern Log_unit* arla_log_unit;
extern struct units arla_deb_units[];

a64 1
#define ADEBDISCONN	0x00000800	/* disconn */
a66 5
#define ADEBVLOG	0x20000000	/* venuslog output */

#define ARLA_DEFAULT_LOG (ADEBWARN | ADEBERROR)

extern struct units arla_deb_units[];
d69 1
a69 1
void arla_loginit(char *log, log_flags flags);
a70 1
void arla_log_set_level_num (unsigned level);
a71 1
unsigned arla_log_get_level_num (void);
a116 9

void
arla_warnx_with_fid (unsigned level, const VenusFid *fid, const char *fmt, ...)
__attribute__ ((format (printf, 3, 4)));

void
arla_vwarnx_with_fid (unsigned level, const VenusFid *fid, const char *fmt,
		      va_list args)
__attribute__ ((format (printf, 3, 0)));
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
d35 1
a35 1
 * $arla: arladeb.h,v 1.31 2002/12/06 04:58:00 lha Exp $
a67 1
#define ADEBINVALIDATOR	0x40000000	/* invalidator output */
d73 2
a74 2
void arla_log(unsigned level, const char *fmt, ...);
void arla_loginit(char *logname, log_flags flags);
@


