head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.38
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.36
	OPENBSD_5_0:1.3.0.34
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.32
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.30
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.08.23.06.21.50;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2003.08.05.08.42.41;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.28.57;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.40.43;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.25;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.21.01;	author hin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "arla_local.h"
RCSID("$arla: subr.c,v 1.12 2002/09/07 10:43:30 lha Exp $");

/*
 * come up with a good inode number for `name', `fid' in `parent'
 */

ino_t
dentry2ino (const char *name, const VenusFid *fid, const FCacheEntry *parent)
{
    if (strcmp (name, ".") == 0
	&& (parent->flags.vol_root
	    || (fid->fid.Vnode == 1 && fid->fid.Unique == 1))
	&& parent->volume != NULL)
	return afsfid2inode (&parent->volume->mp_fid);
    else if (strcmp (name, "..") == 0
	     && (parent->flags.vol_root
		 || (parent->fid.fid.Vnode == 1
		     && parent->fid.fid.Unique == 1))
	     && parent->volume != NULL)
	    return afsfid2inode (&parent->volume->parent_fid);
    else if (strcmp (name, "..") == 0
	     && fid->fid.Vnode == 1 && fid->fid.Unique == 1
	     && parent->volume != NULL)
	return afsfid2inode (&parent->volume->mp_fid);
    else
	return afsfid2inode (fid);
}

/*
 * Assume `e' has valid data.
 */

int
conv_dir_sub (FCacheEntry *e, CredCacheEntry *ce, u_int tokens,
	      fcache_cache_handle *cache_handle,
	      char *cache_name, size_t cache_name_sz,
	      fdir_readdir_func func,
	      void (*flush_func)(void *),
	      size_t blocksize)
{
     struct write_dirent_args args;
     int ret;
     int fd;
     fbuf the_fbuf;

     e->flags.extradirp = TRUE;
     fcache_extra_file_name (e, cache_name, cache_name_sz);
     e->tokens |= NNPFS_DATA_R | NNPFS_OPEN_NR;

     args.fd = open (cache_name, O_WRONLY | O_CREAT | O_TRUNC | O_BINARY, 0666);
     if (args.fd == -1) {
	  ret = errno;
	  arla_warn (ADEBWARN, ret, "open %s", cache_name);
	  return ret;
     }
     ret = fcache_fhget (cache_name, cache_handle);

     args.off  = 0;
     args.buf  = (char *)malloc (blocksize);
     if (args.buf == NULL) {
	 ret = errno;
	 arla_warn (ADEBWARN, ret, "malloc %u", (unsigned)blocksize);
	 close (args.fd);
	 return ret;
     }

     ret = fcache_get_fbuf (e, &fd, &the_fbuf,
			    O_RDONLY, FBUF_READ|FBUF_PRIVATE);
     if (ret) {
	 close (args.fd);
	 free (args.buf);
	 return ret;
     }
     
     args.ptr  = args.buf;
     args.last = NULL;
     args.e    = e;
     args.ce   = ce;
     
     /* translate to local dir format, write in args.fd */
     fdir_readdir (&the_fbuf, func, (void *)&args, e->fid, NULL);

     fbuf_end (&the_fbuf);
     close (fd);

     if (args.last)
	  (*flush_func) (&args);
     free (args.buf);
     ret = close (args.fd);
     if (ret)
	  ret = errno;
     return ret;
}
@


1.3
log
@Merge
@
text
@@


1.2
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d35 1
a35 1
RCSID("$KTH: subr.c,v 1.7 2000/10/14 19:58:12 map Exp $");
d67 1
a67 1
Result
a75 1
     Result res;
d82 1
a82 1
     res.tokens = e->tokens |= XFS_DATA_R | XFS_OPEN_NR;
d86 3
a88 4
	  res.res = -1;
	  res.error = errno;
	  arla_warn (ADEBWARN, errno, "open %s", cache_name);
	  return res;
d95 2
a96 3
	 arla_warn (ADEBWARN, errno, "malloc %u", (unsigned)blocksize);
	 res.res = -1;
	 res.error = errno;
d98 1
a98 1
	 return res;
a103 2
	 res.res = -1;
	 res.error = ret;
d106 1
a106 1
	 return res;
d114 2
a115 1
     fdir_readdir (&the_fbuf, func, (void *)&args, &e->fid);
d123 4
a126 4
     res.res = close (args.fd);
     if (res.res)
	  res.error = errno;
     return res;
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d35 1
a35 1
RCSID("$Id: subr.c,v 1.5 2000/06/19 19:37:24 assar Exp $");
d69 1
a69 1
	      xfs_cache_handle *cache_handle,
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d40 1
a40 1
RCSID("$KTH: subr.c,v 1.7 2000/10/14 19:58:12 map Exp $");
d74 1
a74 1
	      fcache_cache_handle *cache_handle,
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
d35 1
a35 1
RCSID("$arla: subr.c,v 1.12 2002/09/07 10:43:30 lha Exp $");
d67 1
a67 1
int
d76 1
d83 1
a83 1
     e->tokens |= NNPFS_DATA_R | NNPFS_OPEN_NR;
d87 4
a90 3
	  ret = errno;
	  arla_warn (ADEBWARN, ret, "open %s", cache_name);
	  return ret;
d97 3
a99 2
	 ret = errno;
	 arla_warn (ADEBWARN, ret, "malloc %u", (unsigned)blocksize);
d101 1
a101 1
	 return ret;
d107 2
d111 1
a111 1
	 return ret;
d119 1
a119 2
     /* translate to local dir format, write in args.fd */
     fdir_readdir (&the_fbuf, func, (void *)&args, e->fid, NULL);
d127 4
a130 4
     ret = close (args.fd);
     if (ret)
	  ret = errno;
     return ret;
@


