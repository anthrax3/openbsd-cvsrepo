head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.08.23.06.21.50;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.08.42.41;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.28.57;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.40.44;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.10;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.52.57;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.52.57;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.25;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.01;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Our cache of volume information.
 */

/* $arla: volcache.h,v 1.36 2002/05/15 22:31:16 lha Exp $ */

#ifndef _VOLCACHE_
#define _VOLCACHE_

#include <stdio.h>
#include <cred.h>
#include <list.h>
#include "vldb.h"

/*
 * index for number into a VolCacheEntry
 */

struct num_ptr {
    int32_t cell;
    uint32_t vol;
    struct volcacheentry *ptr;
    int32_t type;
};

/*
 * index for name into a VolCacheEntry
 */

struct name_ptr {
    int32_t cell;
    char name[VLDB_MAXNAMELEN];
    struct volcacheentry *ptr;
};

struct volcacheentry {
    nvldbentry entry;
    AFSVolSync volsync;
    int32_t cell;
    unsigned refcount;		/* number of files refererring this */
    unsigned vol_refs;		/* number of volumes refing this */
    Listitem *li;
    VenusFid mp_fid;		/* pointing to this volume */
    VenusFid parent_fid;	/* .. of this volume */
    struct volcacheentry *parent; /* parent volume */
    struct {
	unsigned validp  : 1;
	unsigned stablep : 1;
	unsigned lookupp : 1;
	unsigned waiting : 1;
    } flags;
    struct name_ptr name_ptr;
    struct num_ptr num_ptr[MAXTYPES];
    time_t timeout;
    int status[NMAXNSERVERS];
};

enum { VOLCACHE_NOVOL		= 1,	/* server claim there is no volume */
       VOLCACHE_UNAVAILABLE	= 2,	/* server failed to respond */
       VOLCACHE_CHECKED		= 4	/* error-condition already processed */
};

typedef struct volcacheentry VolCacheEntry;

const char *volcache_get_rootvolume (void);

void volcache_set_rootvolume (const char *volname);

void volcache_init (unsigned nentries, Bool recover);

int volcache_getbyname (const char *volname,
			int32_t cell,
			CredCacheEntry *ce,
			VolCacheEntry **e,
			int *type);

int volcache_getbyid (uint32_t id,
		      int32_t cell,
		      CredCacheEntry *ce,
		      VolCacheEntry **e,
		      int *type);

void volcache_update_volsync (VolCacheEntry *e, AFSVolSync volsync);

void volcache_free (VolCacheEntry *e);

void volcache_ref (VolCacheEntry *e);

void volcache_volref (VolCacheEntry *e, VolCacheEntry *parent);

void volcache_volfree (VolCacheEntry *e);

void volcache_invalidate (uint32_t id, int32_t cell);

void volcache_invalidate_ve (VolCacheEntry *ve);

void volcache_invalidate_all (void);

int volume_make_uptodate (VolCacheEntry *e, CredCacheEntry *ce);

Bool volume_downp (int error);

void volcache_mark_down (VolCacheEntry *ve, int i, int error);

void volcache_process_marks (VolCacheEntry *e);

Bool volcache_reliablep_el (VolCacheEntry *ve, int i);
Bool volcache_reliablep (uint32_t id, int32_t cell);

int volcache_getname (uint32_t id, int32_t cell, char *, size_t);

void volcache_reliable_el (VolCacheEntry *ve, int i);

void volcache_status (void);

int
volcache_store_state (void);

int
volcache_volid2bit (const VolCacheEntry *ve, uint32_t volid);

enum { VOLCACHE_OLD = 120 };

enum { VOLCACHE_TIMEOUT = 600 };

#endif /* _VOLCACHE_ */
@


1.5
log
@Merge
@
text
@@


1.4
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d38 1
a38 1
/* $KTH: volcache.h,v 1.28.2.2 2001/02/12 12:53:02 assar Exp $ */
d54 1
a54 1
    u_int32_t vol;
a74 1
    time_t last_fetch;
d82 2
d87 7
a97 14
/*
 * This is magic cookie for the dump of the volcache.
 * It's supposed not to be able to be confused with an old-style
 * dump (with no header)
 */

#define VOLCACHE_MAGIC_COOKIE	0x00120100

/*
 * current version number of the dump file
 */

#define VOLCACHE_VERSION	0x3

d110 1
a110 1
int volcache_getbyid (u_int32_t id,
d126 1
a126 1
void volcache_invalidate (u_int32_t id, int32_t cell);
d130 2
d134 3
a136 1
Bool volcache_reliable (u_int32_t id, int32_t cell);
d138 8
a145 1
int volcache_getname (u_int32_t id, int32_t cell, char *, size_t);
d153 1
a153 1
volcache_volid2bit (const VolCacheEntry *ve, u_int32_t volid);
d156 2
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d38 1
a38 1
/* $Id: volcache.h,v 1.27 2000/07/11 22:24:37 assar Exp $ */
a47 3
#define BACKSUFFIX ".backup"
#define ROSUFFIX   ".readonly"

a66 1
    int32_t type;
d84 1
a84 1
    struct name_ptr name_ptr[MAXTYPES];
d102 1
a102 1
#define VOLCACHE_VERSION	0x2
d126 2
d140 1
a140 1
const char *volcache_getname (u_int32_t id, int32_t cell);
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@a0 1
/*	$OpenBSD$	*/
d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
d43 1
a43 1
/* $KTH: volcache.h,v 1.17 1999/04/14 15:27:37 map Exp $ */
d50 2
d56 4
d67 4
d82 7
a88 1
    unsigned refcount;
d90 2
a91 1
	unsigned validp : 1;
d99 14
d123 1
a123 1
			int32_t *type);
d129 1
a129 1
		      int32_t *type);
d135 4
d141 2
d145 4
d154 5
a159 1

@


1.1
log
@Initial revision
@
text
@d44 1
a44 1
/* $KTH: volcache.h,v 1.13 1998/07/29 21:29:10 assar Exp $ */
d59 1
d66 1
d70 1
a70 1
    vldbentry entry;
d89 11
a99 7
VolCacheEntry *volcache_getbyname (const char *volname,
				   int32_t cell,
				   CredCacheEntry *ce);

VolCacheEntry *volcache_getbyid (u_int32_t id,
				 int32_t cell,
				 CredCacheEntry *ce);
d107 3
a109 1
void volcache_status (FILE *f);
d115 1
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d44 1
a44 1
/* $KTH: volcache.h,v 1.28.2.2 2001/02/12 12:53:02 assar Exp $ */
a50 2
#include <list.h>
#include "vldb.h"
d52 2
a53 3
/*
 * index for number into a VolCacheEntry
 */
a58 1
    int32_t type;
a60 4
/*
 * index for name into a VolCacheEntry
 */

d68 1
a68 1
    nvldbentry entry;
d71 1
a71 7
    unsigned refcount;		/* number of files refererring this */
    unsigned vol_refs;		/* number of volumes refing this */
    time_t last_fetch;
    Listitem *li;
    VenusFid mp_fid;		/* pointing to this volume */
    VenusFid parent_fid;	/* .. of this volume */
    struct volcacheentry *parent; /* parent volume */
d73 1
a73 2
	unsigned validp  : 1;
	unsigned stablep : 1;
d75 1
a75 1
    struct name_ptr name_ptr;
a80 14
/*
 * This is magic cookie for the dump of the volcache.
 * It's supposed not to be able to be confused with an old-style
 * dump (with no header)
 */

#define VOLCACHE_MAGIC_COOKIE	0x00120100

/*
 * current version number of the dump file
 */

#define VOLCACHE_VERSION	0x3

d87 7
a93 11
int volcache_getbyname (const char *volname,
			int32_t cell,
			CredCacheEntry *ce,
			VolCacheEntry **e,
			int *type);

int volcache_getbyid (u_int32_t id,
		      int32_t cell,
		      CredCacheEntry *ce,
		      VolCacheEntry **e,
		      int *type);
a98 6
void volcache_ref (VolCacheEntry *e);

void volcache_volref (VolCacheEntry *e, VolCacheEntry *parent);

void volcache_volfree (VolCacheEntry *e);

d101 1
a101 9
void volcache_invalidate_ve (VolCacheEntry *ve);

int volume_make_uptodate (VolCacheEntry *e, CredCacheEntry *ce);

Bool volcache_reliable (u_int32_t id, int32_t cell);

int volcache_getname (u_int32_t id, int32_t cell, char *, size_t);

void volcache_status (void);
a104 5

int
volcache_volid2bit (const VolCacheEntry *ve, u_int32_t volid);

enum { VOLCACHE_OLD = 120 };
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
d38 1
a38 1
/* $arla: volcache.h,v 1.36 2002/05/15 22:31:16 lha Exp $ */
d54 1
a54 1
    uint32_t vol;
d75 1
a82 2
	unsigned lookupp : 1;
	unsigned waiting : 1;
a85 2
    time_t timeout;
    int status[NMAXNSERVERS];
d88 13
a100 4
enum { VOLCACHE_NOVOL		= 1,	/* server claim there is no volume */
       VOLCACHE_UNAVAILABLE	= 2,	/* server failed to respond */
       VOLCACHE_CHECKED		= 4	/* error-condition already processed */
};
d102 1
a102 1
typedef struct volcacheentry VolCacheEntry;
d116 1
a116 1
int volcache_getbyid (uint32_t id,
d132 1
a132 1
void volcache_invalidate (uint32_t id, int32_t cell);
a135 2
void volcache_invalidate_all (void);

d138 1
a138 3
Bool volume_downp (int error);

void volcache_mark_down (VolCacheEntry *ve, int i, int error);
d140 1
a140 8
void volcache_process_marks (VolCacheEntry *e);

Bool volcache_reliablep_el (VolCacheEntry *ve, int i);
Bool volcache_reliablep (uint32_t id, int32_t cell);

int volcache_getname (uint32_t id, int32_t cell, char *, size_t);

void volcache_reliable_el (VolCacheEntry *ve, int i);
d148 1
a148 1
volcache_volid2bit (const VolCacheEntry *ve, uint32_t volid);
a150 2

enum { VOLCACHE_TIMEOUT = 600 };
@


