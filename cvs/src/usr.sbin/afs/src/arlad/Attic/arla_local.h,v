head	1.7;
access;
symbols
	OPENBSD_5_2:1.6.0.34
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.32
	OPENBSD_5_0:1.6.0.30
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.28
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.26
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.22
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.24
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.20
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.18
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.16
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.14
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.12
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.10
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.8
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.6
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2012.08.23.06.21.50;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2004.05.07.23.04.07;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.05.08.42.41;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.28.57;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.40.40;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.06;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.52.54;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.52.54;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.22;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.00;	author hin;	state Exp;
branches;
next	;


desc
@@


1.7
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995 - 2003 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 *  Include file for whole arlad
 *  $arla: arla_local.h,v 1.88 2003/06/10 16:26:19 lha Exp $
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <ctype.h>
#include <time.h>
#include <limits.h>
#include <errno.h>
#include <sys/time.h>
#if defined(HAVE_DIRENT_H)
#include <dirent.h>
#if DIRENT_AND_SYS_DIR_H
#include <sys/dir.h>
#endif
#elif defined(HAVE_SYS_DIR_H)
#include <sys/dir.h>
#endif
#include <unistd.h>
#include <sys/types.h>
#ifdef HAVE_LINUX_TYPES_H
#include <linux/types.h>
#endif
#include <sys/param.h>
#include <sys/socket.h>
#include <sys/uio.h>
#ifdef HAVE_SYS_MMAN_H
#include <sys/mman.h>
#endif
#ifdef HAVE_SYS_IOCCOM_H
#include <sys/ioccom.h>
#endif
#ifdef HAVE_SYS_STAT_H
#include <sys/stat.h>
#endif
#ifdef HAVE_SYS_MOUNT_H
#include <sys/mount.h>
#endif
#ifdef HAVE_SYS_PRCTL_H
#include <sys/prctl.h>
#endif
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <fcntl.h>
#include <pwd.h>
#include <err.h>
#include <parse_units.h>
#include <roken.h>

#include <lwp.h>
#include <lock.h>

#include <rx/rx.h>
#include <rx/rx_null.h>

#ifdef HAVE_KRB4
#ifdef HAVE_OPENSSL
#include <openssl/des.h>
#else
#include <des.h>
#endif
#include <krb.h>
#endif
#include <rxkad.h>

#include <ifaddrs.h>

#include <kafs.h>

#include <uae.h>

#include "log.h"

#include "fs.h"
#include "cmcb.h"
#include "fs.cs.h"
#include "list.h"
#include "vldb.h"
#include "vldb.cs.h"
#include "volcache.h"
#include "fbuf.h"
#include "bool.h"
#include "hash.h"
#include "heap.h"
#include "afs_dir.h"
#include "ports.h"
#include "conn.h"
#include "poller.h"
#include "fcache.h"
#include "state.h"
#include "inter.h"
#include "cred.h"
#include "adir.h"
#include "service.h"
#include "subr.h"
#include "fprio.h"
#include "disco.h"
#include "stats.h"
#include "kernel.h"
#include "messages.h"
#include "fs_errors.h"
#include "arladeb.h"
#include "ko.h"
#include "nnpfs.h"
#include "afs_uuid.h"

enum connected_mode { CONNECTED  = 0,
		      FETCH_ONLY = 1,
		      DISCONNECTED = 2,
                      CONNECTEDLOG = 4};

extern enum connected_mode connected_mode;

#include "dynroot.h"

#if 0
#define assert_flag(e,f)	assert((e)->flags.f)
#define assert_not_flag(e,f)	assert(!(e)->flags.f)
#else
#define assert_flag(e,f)	do { } while(0)
#define assert_not_flag(e,f)	do { } while(0)
#endif

#define SYSNAMEMAXLEN 2048
extern char **sysnamelist;
extern int sysnamenum;


#define ARLA_NUMCONNS 200
#define ARLA_HIGH_VNODES 4000
#define ARLA_LOW_VNODES 3000
#define ARLA_HIGH_BYTES 40000000
#define ARLA_LOW_BYTES 30000000
#define ARLA_NUMCREDS 200
#define ARLA_NUMVOLS 100

/* 
 * This should be a not used uid in the system, 
 * NNPFS_ANONYMOUSID may be good
 */

#define ARLA_NO_AUTH_CRED 4

extern int fake_mp;
extern char *default_log_file;
extern char *default_arla_cachedir;

extern int fork_flag;		/* if the program should fork */
extern int num_workers;		/* number of workers program should use */
extern int client_port;		/* what port the client is using */
extern int afs_BusyWaitPeriod;	/* number of sec to wait on fs when VBUSY */

void
store_state (void);

int
arla_init (void);

char *
get_default_cache_dir (void);

#ifndef O_BINARY
#define O_BINARY 0
#endif

extern const char *conf_file;
extern char *log_file;
extern char *debug_levels;
extern char *connected_mode_string;
#ifdef KERBEROS
extern const char *rxkad_level_string;
#endif
extern const char *argv_sysname;
extern char *root_volume;
extern int cpu_usage;
extern int version_flag;
extern int help_flag;
extern int recover;
extern int dynroot_enable;
extern int cm_consistency;
extern int fake_stat;
extern int fetch_block_size;

extern char *cache_dir;
extern struct passwd *pw;
@


1.6
log
@This makes afsd drop priviledge to user _afs inside a chroot (the
cache directory). This is privledge dropping, not full privsep.
@
text
@@


1.5
log
@Merge
@
text
@d227 1
@


1.4
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d36 1
a36 1
 *  $KTH: arla_local.h,v 1.61.2.3 2001/09/14 13:25:45 lha Exp $
a70 1
#include <sys/stat.h>
a96 1
#include <rx/rxgencon.h>
d98 4
a101 1
#ifdef KERBEROS
d103 1
d105 1
a106 1
#endif
d108 1
a108 3
#ifdef USE_MMAPTIME
#include <mmaptime.h>
#endif
d112 2
d124 1
d126 1
a127 1
#include "service.h"
d130 1
d132 1
d139 2
a140 1
#include "bool.h"
d146 2
a147 1
#include "xfs.h"
d156 1
a156 4
#include "darla.h"
#include "discon_log.h"
#include "discon.h"
#include "reconnect.h"
d158 7
a164 1
#include "dynroot.h"
d167 2
a168 1
extern char arlasysname[SYSNAMEMAXLEN];
d181 1
a181 1
 * XFS_ANONYMOUSID may be good
a197 3
void
arla_start (char *device_file, const char *cache_dir);

d199 1
a199 1
arla_init (int argc, char **argv);
d208 1
a208 1
extern char *conf_file;
d213 1
a213 1
extern char *rxkad_level_string;
d215 1
a215 1
extern const char *temp_sysname;
d223 2
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d36 1
a36 1
 *  $Id: arla_local.h,v 1.55 2000/07/02 16:24:37 assar Exp $
a52 1
#define _KERNEL
a53 1
#undef _KERNEL
d81 3
d172 1
d176 41
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@a0 1
/*	$OpenBSD$	*/
d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
d41 1
a41 1
 *  $KTH: arla_local.h,v 1.42 1999/02/05 07:28:36 lha Exp $
d58 1
d60 4
d75 1
d77 1
d85 3
a127 1
#include "ip.h"
a138 1
#include "minmax.h"
a140 1
#include "strutil.h"
d144 1
d158 2
d178 1
a178 1

@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
 *  $KTH: arla_local.h,v 1.32 1998/07/03 12:38:19 assar Exp $
d55 1
d58 1
a58 1
#ifdef HAVE_DIRENT_H
d60 1
a60 2
#endif
#ifdef USE_SYS_DIR_H
d83 1
d93 1
d97 1
a97 1
#include <kerberosIV/krb.h>
d105 1
a105 1
#include <kerberosIV/kafs.h>
a116 1
#include "fcache.h"
d122 1
a123 1
#include "conn.h"
d135 1
a138 3
#define SYSNAMEMAXLEN 2048
extern char arlasysname[SYSNAMEMAXLEN];

d145 9
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d42 1
a42 1
 *  $KTH: arla_local.h,v 1.61.2.3 2001/09/14 13:25:45 lha Exp $
a54 1
#include <limits.h>
d57 1
a57 1
#if defined(HAVE_DIRENT_H)
a58 2
#if DIRENT_AND_SYS_DIR_H
#include <sys/dir.h>
d60 1
a60 1
#elif defined(HAVE_SYS_DIR_H)
a70 1
#ifdef HAVE_SYS_MMAN_H
a71 1
#endif
a78 6
#ifdef HAVE_SYS_MOUNT_H
#include <sys/mount.h>
#endif
#ifdef HAVE_SYS_PRCTL_H
#include <sys/prctl.h>
#endif
a82 1
#include <pwd.h>
a91 1
#include <rx/rxgencon.h>
d95 1
a95 1
#include <krb.h>
d103 1
a103 1
#include <kafs.h>
d115 1
d118 1
d121 1
a122 1
#include "fcache.h"
d130 1
d133 1
a133 1
#include "fs_errors.h"
d136 3
a138 1
#include "xfs.h"
a146 11
#include "darla.h"
#include "discon_log.h"
#include "discon.h"
#include "reconnect.h"

#include "dynroot.h"

#define SYSNAMEMAXLEN 2048
extern char arlasysname[SYSNAMEMAXLEN];


a158 1

a160 40
extern int fake_mp;
extern char *default_log_file;
extern char *default_arla_cachedir;

extern int fork_flag;		/* if the program should fork */
extern int num_workers;		/* number of workers program should use */
extern int client_port;		/* what port the client is using */
extern int afs_BusyWaitPeriod;	/* number of sec to wait on fs when VBUSY */

void
store_state (void);

void
arla_start (char *device_file, const char *cache_dir);

int
arla_init (int argc, char **argv);

char *
get_default_cache_dir (void);

#ifndef O_BINARY
#define O_BINARY 0
#endif

extern char *conf_file;
extern char *log_file;
extern char *debug_levels;
extern char *connected_mode_string;
#ifdef KERBEROS
extern char *rxkad_level_string;
#endif
extern const char *temp_sysname;
extern char *root_volume;
extern int cpu_usage;
extern int version_flag;
extern int help_flag;
extern int recover;
extern int dynroot_enable;
extern int cm_consistency;
a161 1
extern char *cache_dir;
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2003 Kungliga Tekniska Högskolan
d36 1
a36 1
 *  $arla: arla_local.h,v 1.88 2003/06/10 16:26:19 lha Exp $
d71 1
d98 1
d100 1
a100 4
#ifdef HAVE_KRB4
#ifdef HAVE_OPENSSL
#include <openssl/des.h>
#else
a101 1
#endif
d103 1
a104 1
#include <rxkad.h>
d106 3
a108 1
#include <ifaddrs.h>
a111 2
#include <uae.h>

a121 1
#include "bool.h"
a122 1
#include "heap.h"
d124 1
a126 1
#include "poller.h"
a127 1
#include "state.h"
d134 1
a134 2
#include "disco.h"
#include "stats.h"
d140 1
a140 2
#include "nnpfs.h"
#include "afs_uuid.h"
d149 5
a155 8
#if 0
#define assert_flag(e,f)	assert((e)->flags.f)
#define assert_not_flag(e,f)	assert(!(e)->flags.f)
#else
#define assert_flag(e,f)	do { } while(0)
#define assert_not_flag(e,f)	do { } while(0)
#endif

d157 1
a157 2
extern char **sysnamelist;
extern int sysnamenum;
d170 1
a170 1
 * NNPFS_ANONYMOUSID may be good
d187 3
d191 1
a191 1
arla_init (void);
d200 1
a200 1
extern const char *conf_file;
d205 1
a205 1
extern const char *rxkad_level_string;
d207 1
a207 1
extern const char *argv_sysname;
a214 2
extern int fake_stat;
extern int fetch_block_size;
@


