head	1.3;
access;
symbols
	OPENBSD_5_2:1.2.0.42
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.40
	OPENBSD_5_0:1.2.0.38
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.36
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.34
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.30
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.32
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.28
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.26
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.24
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.22
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.20
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.18
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.16
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.14
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.12
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.10
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2012.08.23.06.21.56;	author deraadt;	state dead;
branches;
next	1.2;

1.2
date	2002.06.07.04.45.18;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.41.30;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.37;	author hin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1999 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Test if agetarg works as expected
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <stdio.h>

#include <err.h>
#include <roken.h>

#include <agetarg.h>

RCSID("$KTH: ga-test.c,v 1.12 2000/10/03 00:33:59 lha Exp $");

typedef struct {
    int style;
    int argc;
    char *argv[10];
    enum { GA_SUCCESS = 0, GA_FAILURE } retval ;
} ga_tests;


/* XXX TODO: aarg_negative_flag, manualpage generation ? */

/*
 *
 */

static void
test_simple_string (void)
{
    char *string;
    int i, optind;
    ga_tests tests[] = {
	{ AARG_GNUSTYLE, 2, { "string", "--string=foo", NULL } },
	{ AARG_GNUSTYLE, 3, { "string", "-s", "foo", NULL} },
	{ AARG_AFSSTYLE, 3, { "string", "-string", "foo", NULL} },
	{ AARG_AFSSTYLE, 2, { "string", "--flag"}, 		GA_FAILURE },
	{ AARG_AFSSTYLE, 2, { "string", "foo", NULL} }
    };

    struct agetargs args[] = {
	{ "string", 's', aarg_string, NULL,
	  "string test", "stringfoo", aarg_mandatory},
	{ NULL, 0, aarg_end, NULL, NULL }
    }, *a = args;

    a->value = &string;

    for (i = 0 ; i < sizeof(tests)/sizeof(*tests); i++) {
	string = NULL;
	optind = 0;

	if (agetarg (args, tests[i].argc, tests[i].argv, &optind, 
		    tests[i].style)) {
	    if (tests[i].retval == GA_FAILURE)
		continue;
	    warnx ("test_string: %s failed for test %d",
		   tests[i].argv[1], i);
	    continue;
	} else {
	    if (tests[i].retval != GA_SUCCESS) {
		warnx ("test_string: %s failed to fail for test %d",
		       tests[i].argv[1], i);
		continue;
	    }
	}
	
	if (optind != tests[i].argc) {
	    warnx ("argc != optind for test %s, %d", tests[i].argv[1], i);
	    continue;
	}

	if (string == NULL || strcmp (string, "foo") != 0) {
	    warnx ("error parsing for test %d: string", i);
	    continue;
	}
    }
}

/*
 *
 */

static void
test_simple_strings (void)
{
    agetarg_strings strings;

    int i, optind;
    ga_tests tests[] = {
	{ AARG_GNUSTYLE, 3, { "strings", 
			     "--strings=foo", "--strings=bar", NULL } },
	{ AARG_GNUSTYLE, 5, { "strings", "-s", "foo", "-s", "bar", NULL} },
	{ AARG_AFSSTYLE, 4, { "strings", "-string", "foo", "bar", NULL} }
#if 0
	{ AARG_AFSSTYLE, 3, { "strings", "foo", "bar", NULL} }
#endif
    };

    struct agetargs args[] = {
	{ "strings", 's', aarg_strings, NULL,
	  "strings test", "stringsfoo", aarg_optional},
	{ NULL, 0, aarg_end, NULL, NULL }
    }, *a = args;

    a->value = &strings;

    for (i = 0 ; i < sizeof(tests)/sizeof(*tests); i++) {
	strings.num_strings = 0;
	strings.strings = NULL;
	optind = 0;

	if (agetarg (args, tests[i].argc, tests[i].argv, &optind, 
		    tests[i].style)) {
	    if (tests[i].retval == GA_FAILURE)
		continue;
	    warnx ("test_strings: %s failed for test %d",
		   tests[i].argv[1], i);
	    continue;
	} else {
	    if (tests[i].retval != GA_SUCCESS) {
		warnx ("test_strings: %s failed to fail for test %d",
		       tests[i].argv[1], i);
		continue;
	    }
	}
	
	if (optind != tests[i].argc) {
	    warnx ("argc != optind for test %s, %d",
		   tests[i].argv[1], i);
	    continue;
	}

	if (strings.num_strings != 2 
	    || strcmp(strings.strings[0], "foo") != 0
	    || strcmp(strings.strings[1], "bar") != 0)
	{
	    warnx ("error parsing for test %d: strings", i);
	    continue;
	}
    }
}

/*
 *
 */

static void
test_simple_integer (void)
{
    int integer;
    int i, optind;
    ga_tests tests[] = {
	{ AARG_GNUSTYLE, 2, { "integer", "--integer=4711", NULL } },
	{ AARG_GNUSTYLE, 3, { "integer", "-i", "4711", NULL} },
	{ AARG_AFSSTYLE, 3, { "integer", "-integer", "4711", NULL} },
	{ AARG_AFSSTYLE, 2, { "integer", "4711", NULL} }
    };

    struct agetargs args[] = {
	{ "integer", 'i', aarg_integer, NULL,
	  "integer test", "integer", aarg_mandatory},
	{ NULL, 0, aarg_end, NULL, NULL }
    }, *a = args;

    a->value = &integer;

    for (i = 0 ; i < sizeof(tests)/sizeof(*tests); i++) {
	integer = 0;
	optind = 0;

	if (agetarg (args, tests[i].argc, tests[i].argv, &optind, 
		    tests[i].style)) {
	    if (tests[i].retval == GA_FAILURE)
		continue;
	    warnx ("test_integer: %s failed for test %d",
		   tests[i].argv[1], i);
	    continue;
	} else {
	    if (tests[i].retval != GA_SUCCESS) {
		warnx ("test_integer: %s failed to fail for test %d",
		       tests[i].argv[1], i);
		continue;
	    }
	}
	
	if (optind != tests[i].argc) {
	    warnx ("argc != optind for test %s, %d",
		   tests[i].argv[1], i);	
	    continue;
	}

	if (integer != 4711) {
	    warnx ("error parsing for test %d: integer 4711", i);
	    continue;
	}
    }
}

/*
 *
 */

static void
test_simple_flag (void)
{
    int flag;
    int i, optind;
    ga_tests tests[] = {
	{ AARG_GNUSTYLE, 2, { "flag", "--flag=yes", NULL },	GA_SUCCESS },
	{ AARG_GNUSTYLE, 2, { "flag", "-g", NULL},		GA_SUCCESS },
	{ AARG_AFSSTYLE, 2, { "flag", "--flag"}, 		GA_FAILURE },
	{ AARG_AFSSTYLE, 2, { "flag", "-flag", NULL},		GA_SUCCESS },
#if 0
	/* XXX */
	{ AARG_AFSSTYLE, 2, { "flag", "yes", NULL},		GA_SUCCESS },
#endif
	{ AARG_GNUSTYLE, 2, { "flag", "--no-flag", NULL},	GA_SUCCESS }
    };

    struct agetargs args[] = {
	{ "flag", 'g', aarg_flag, NULL,
	  "flag", "flag bar", aarg_optional},
	{ NULL, 0, aarg_end, NULL, NULL }
    }, *a = args;

    a->value = &flag;

    for (i = 0 ; i < sizeof(tests)/sizeof(*tests); i++) {
	if (i < 4)
	    flag = 0;
	else
	    flag = 1;
	optind = 0;

	if (agetarg (args, tests[i].argc, tests[i].argv, &optind, 
		    tests[i].style)) {
	    if (tests[i].retval == GA_FAILURE)
		continue;
	    warnx ("test_flag: %s failed for test %d",
		   tests[i].argv[1], i);
	    continue;
	} else {
	    if (tests[i].retval != GA_SUCCESS) {
		warnx ("test_flag: %s failed to fail for test %d",
		       tests[i].argv[1], i);
		continue;
	    }
	}
	
	if (optind != tests[i].argc) {
	    warnx ("argc != optind for test %s, %d",
		   tests[i].argv[1], i);
	    continue;
	}

	if (i < 4) {
	    if (flag == 0) {
		warnx ("error parsing for test %d: flag %s",
		       i,
		       tests[i].argv[1]);
		continue;
	    }
	} else {
	    if (flag != 0) {
		warnx ("error parsing test %d: flag %s",
		       i,
		       tests[i].argv[1]);
		    continue;
	    }
	}
    }
}

/*
 *
 */

int
main (int argc, char **argv)
{
    set_progname (argv[0]);

    test_simple_string();
    test_simple_strings();
    test_simple_integer();
    test_simple_flag();
    
    return 0;
}
@


1.2
log
@merge
@
text
@@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d35 1
a35 1
 * Test if getarg works as expected
d47 1
a47 1
#include <getarg.h>
d49 1
a49 1
RCSID("$Id: ga-test.c,v 1.9 2000/05/23 04:01:21 assar Exp $");
d59 1
a59 1
/* XXX TODO: arg_negative_flag, manualpage generation ? */
d71 5
a75 5
	{ ARG_GNUSTYLE, 2, { "string", "--string=foo", NULL } },
	{ ARG_GNUSTYLE, 3, { "string", "-s", "foo", NULL} },
	{ ARG_AFSSTYLE, 3, { "string", "-string", "foo", NULL} },
	{ ARG_AFSSTYLE, 2, { "string", "--flag"}, 		GA_FAILURE },
	{ ARG_AFSSTYLE, 2, { "string", "foo", NULL} }
d78 4
a81 4
    struct getargs args[] = {
	{ "string", 's', arg_string, NULL,
	  "string test", "stringfoo", arg_mandatory},
	{ NULL, 0, arg_end, NULL, NULL }
d90 1
a90 1
	if (getarg (args, tests[i].argc, tests[i].argv, &optind, 
d124 1
a124 1
    getarg_strings strings;
d128 1
a128 1
	{ ARG_GNUSTYLE, 3, { "strings", 
d130 2
a131 2
	{ ARG_GNUSTYLE, 5, { "strings", "-s", "foo", "-s", "bar", NULL} },
	{ ARG_AFSSTYLE, 4, { "strings", "-string", "foo", "bar", NULL} }
d133 1
a133 1
	{ ARG_AFSSTYLE, 3, { "strings", "foo", "bar", NULL} }
d137 4
a140 4
    struct getargs args[] = {
	{ "strings", 's', arg_strings, NULL,
	  "strings test", "stringsfoo", arg_optional},
	{ NULL, 0, arg_end, NULL, NULL }
d150 1
a150 1
	if (getarg (args, tests[i].argc, tests[i].argv, &optind, 
d191 4
a194 4
	{ ARG_GNUSTYLE, 2, { "integer", "--integer=4711", NULL } },
	{ ARG_GNUSTYLE, 3, { "integer", "-i", "4711", NULL} },
	{ ARG_AFSSTYLE, 3, { "integer", "-integer", "4711", NULL} },
	{ ARG_AFSSTYLE, 2, { "integer", "4711", NULL} }
d197 4
a200 4
    struct getargs args[] = {
	{ "integer", 'i', arg_integer, NULL,
	  "integer test", "integer", arg_mandatory},
	{ NULL, 0, arg_end, NULL, NULL }
d209 1
a209 1
	if (getarg (args, tests[i].argc, tests[i].argv, &optind, 
d247 4
a250 4
	{ ARG_GNUSTYLE, 2, { "flag", "--flag=yes", NULL },	GA_SUCCESS },
	{ ARG_GNUSTYLE, 2, { "flag", "-g", NULL},		GA_SUCCESS },
	{ ARG_AFSSTYLE, 2, { "flag", "--flag"}, 		GA_FAILURE },
	{ ARG_AFSSTYLE, 2, { "flag", "-flag", NULL},		GA_SUCCESS },
d253 1
a253 1
	{ ARG_AFSSTYLE, 2, { "flag", "yes", NULL},		GA_SUCCESS },
d255 1
a255 1
	{ ARG_GNUSTYLE, 2, { "flag", "--no-flag", NULL},	GA_SUCCESS }
d258 4
a261 4
    struct getargs args[] = {
	{ "flag", 'g', arg_flag, NULL,
	  "flag", "flag bar", arg_optional},
	{ NULL, 0, arg_end, NULL, NULL }
d273 1
a273 1
	if (getarg (args, tests[i].argc, tests[i].argv, &optind, 
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d40 1
a40 1
 * Test if agetarg works as expected
d52 1
a52 1
#include <agetarg.h>
d54 1
a54 1
RCSID("$KTH: ga-test.c,v 1.12 2000/10/03 00:33:59 lha Exp $");
d64 1
a64 1
/* XXX TODO: aarg_negative_flag, manualpage generation ? */
d76 5
a80 5
	{ AARG_GNUSTYLE, 2, { "string", "--string=foo", NULL } },
	{ AARG_GNUSTYLE, 3, { "string", "-s", "foo", NULL} },
	{ AARG_AFSSTYLE, 3, { "string", "-string", "foo", NULL} },
	{ AARG_AFSSTYLE, 2, { "string", "--flag"}, 		GA_FAILURE },
	{ AARG_AFSSTYLE, 2, { "string", "foo", NULL} }
d83 4
a86 4
    struct agetargs args[] = {
	{ "string", 's', aarg_string, NULL,
	  "string test", "stringfoo", aarg_mandatory},
	{ NULL, 0, aarg_end, NULL, NULL }
d95 1
a95 1
	if (agetarg (args, tests[i].argc, tests[i].argv, &optind, 
d129 1
a129 1
    agetarg_strings strings;
d133 1
a133 1
	{ AARG_GNUSTYLE, 3, { "strings", 
d135 2
a136 2
	{ AARG_GNUSTYLE, 5, { "strings", "-s", "foo", "-s", "bar", NULL} },
	{ AARG_AFSSTYLE, 4, { "strings", "-string", "foo", "bar", NULL} }
d138 1
a138 1
	{ AARG_AFSSTYLE, 3, { "strings", "foo", "bar", NULL} }
d142 4
a145 4
    struct agetargs args[] = {
	{ "strings", 's', aarg_strings, NULL,
	  "strings test", "stringsfoo", aarg_optional},
	{ NULL, 0, aarg_end, NULL, NULL }
d155 1
a155 1
	if (agetarg (args, tests[i].argc, tests[i].argv, &optind, 
d196 4
a199 4
	{ AARG_GNUSTYLE, 2, { "integer", "--integer=4711", NULL } },
	{ AARG_GNUSTYLE, 3, { "integer", "-i", "4711", NULL} },
	{ AARG_AFSSTYLE, 3, { "integer", "-integer", "4711", NULL} },
	{ AARG_AFSSTYLE, 2, { "integer", "4711", NULL} }
d202 4
a205 4
    struct agetargs args[] = {
	{ "integer", 'i', aarg_integer, NULL,
	  "integer test", "integer", aarg_mandatory},
	{ NULL, 0, aarg_end, NULL, NULL }
d214 1
a214 1
	if (agetarg (args, tests[i].argc, tests[i].argv, &optind, 
d252 4
a255 4
	{ AARG_GNUSTYLE, 2, { "flag", "--flag=yes", NULL },	GA_SUCCESS },
	{ AARG_GNUSTYLE, 2, { "flag", "-g", NULL},		GA_SUCCESS },
	{ AARG_AFSSTYLE, 2, { "flag", "--flag"}, 		GA_FAILURE },
	{ AARG_AFSSTYLE, 2, { "flag", "-flag", NULL},		GA_SUCCESS },
d258 1
a258 1
	{ AARG_AFSSTYLE, 2, { "flag", "yes", NULL},		GA_SUCCESS },
d260 1
a260 1
	{ AARG_GNUSTYLE, 2, { "flag", "--no-flag", NULL},	GA_SUCCESS }
d263 4
a266 4
    struct agetargs args[] = {
	{ "flag", 'g', aarg_flag, NULL,
	  "flag", "flag bar", aarg_optional},
	{ NULL, 0, aarg_end, NULL, NULL }
d278 1
a278 1
	if (agetarg (args, tests[i].argc, tests[i].argv, &optind, 
@

