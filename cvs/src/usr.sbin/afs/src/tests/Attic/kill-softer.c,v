head	1.3;
access;
symbols
	OPENBSD_5_2:1.2.0.42
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.40
	OPENBSD_5_0:1.2.0.38
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.36
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.34
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.30
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.32
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.28
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.26
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.24
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.22
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.20
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.18
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.16
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.14
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.12
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.10
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2012.08.23.06.21.56;	author deraadt;	state dead;
branches;
next	1.2;

1.2
date	2002.06.07.04.45.18;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.41.30;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.37;	author hin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <dirent.h>

#include <err.h>
#include <roken.h>

#ifdef RCSID
RCSID("$KTH: kill-softer.c,v 1.10 2000/10/03 00:34:15 lha Exp $");
#endif

static FILE *verbose;

struct entry {
    char *name;
    int status;
};

static void
kill_one (struct entry *ents, int ind, int curents);

static void
do_dir (const char *dirname);

static void
kill_dir (const char *dirname);

static void
kill_one (struct entry *ents, int ind, int curents)
{
    int ret;
    int i;

    ret = unlink (ents[ind].name);
    if (ret < 0) {
	if (errno == EISDIR || errno == EPERM)
	    do_dir (ents[ind].name);
	else
	    err (1, "unlink %s", ents[ind].name);
    }
    ents[ind].status = 0;
    for (i = 0; i <= ind; ++i) {
	struct stat sb;

	ret = lstat (ents[i].name, &sb);
	if (ret == 0 || errno != ENOENT)
	    err (1, "%s still exists?", ents[i].name);
    }

    for (i = ind + 1; i < curents; ++i) {
	struct stat sb;

	ret = lstat (ents[i].name, &sb);
	if (ret < 0)
	    err (1, "stat %s", ents[i].name);
    }
}

static void
do_dir (const char *dirname)
{
    int ret;

    ret = chdir (dirname);
    if (ret < 0)
	err (1, "chdir %s", dirname);
    kill_dir (dirname);
    ret = chdir ("..");
    if (ret < 0)
	err (1, "chdir ..");
    ret = rmdir (dirname);
    if (ret < 0)
	err (1, "rmdir %s", dirname);
}

static void
kill_dir (const char *dirname)
{
    struct entry *ents;
    int maxents;
    int curents = 0;
    DIR *dir;
    struct dirent *dp;
    int i;

    fprintf (verbose, "reading %s\n", dirname);

    dir = opendir (".");
    if (dir == NULL)
	err (1, "opendir %s", dirname);
    maxents = 10;
    ents = malloc (sizeof (*ents) * maxents);
    if (ents == NULL)
	err (1, "malloc");
    while ((dp = readdir (dir)) != NULL) {
	if (strcmp (dp->d_name, ".") == 0
	    || strcmp (dp->d_name, "..") == 0)
	    continue;

	if (curents >= maxents) {
	    maxents *= 2;
	    ents = realloc (ents, sizeof(*ents) * maxents);
	    if (ents == NULL)
		err (1, "realloc");
	}
	ents[curents].name   = strdup (dp->d_name);
	ents[curents].status = 1;
	++curents;
	fprintf (verbose, "  adding %s\n", dp->d_name);
    }
    closedir (dir);
    dir = opendir (".");
    if (dir == NULL)
	err (1, "opendir %s", dirname);
    i = 0;
    while((dp = readdir (dir)) != NULL) {
	if (strcmp (dp->d_name, ".") == 0
	    || strcmp (dp->d_name, "..") == 0)
	    continue;

	if (strcmp (ents[i].name, dp->d_name) != 0) {
	    errx (1, "%s != %s", ents[i].name, dp->d_name);
	}
	fprintf (verbose, "  deleting %s\n", ents[i].name);
	kill_one (ents, i, curents);
	++i;
    }
    if (i != curents)
	errx (1, "missing %d entries in %s", curents - i, dirname);
    closedir (dir);
    free (ents);
    fprintf (verbose, "end of %s\n", dirname);
}

int
main(int argc, char **argv)
{
    set_progname (argv[0]);

    verbose = fdopen (4, "w");
    if (verbose == NULL) {
	verbose = fopen ("/dev/null", "w");
	if (verbose == NULL)
	    err (1, "fopen /dev/null");
    }

    if (argc != 2)
	errx (1, "usage: %s directory", argv[0]);
    do_dir (argv[1]);
    return 0;
}
@


1.2
log
@merge
@
text
@@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d51 1
a51 1
RCSID("$Id: kill-softer.c,v 1.9 2000/05/23 04:01:21 assar Exp $");
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d56 1
a56 1
RCSID("$KTH: kill-softer.c,v 1.10 2000/10/03 00:34:15 lha Exp $");
@

