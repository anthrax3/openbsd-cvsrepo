head	1.2;
access;
symbols
	OPENBSD_5_2:1.1.1.1.0.38
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.36
	OPENBSD_5_0:1.1.1.1.0.34
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.32
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.30
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.26
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.28
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.24
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.22
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.20
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.18
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.16
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.14
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.12
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.10
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.8
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.6
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.4
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.2
	OPENBSD_3_4_BASE:1.1.1.1
	arla-20030805:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2012.08.23.06.21.53;	author deraadt;	state dead;
branches;
next	1.1;

1.1
date	2003.08.05.08.21.06;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.08.05.08.21.06;	author hin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@the afs src tree can go away
@
text
@/*
 * Copyright 2000, International Business Machines Corporation and others.
 * All Rights Reserved.
 * 
 * This software has been released under the terms of the IBM Public
 * License.  For details, see the LICENSE file in the top-level source
 * directory or online at http://www.openafs.org/dl/license10.html
 */

/*
 * rx_kmutex.h - mutex and condition variable macros for kernel environment.
 *
 * Solaris implementation.
 */

#ifndef _RX_KMUTEX_H_
#define _RX_KMUTEX_H_

#define AFS_GLOBAL_RXLOCK_KERNEL
#define RX_ENABLE_LOCKS		1

#define	afs_kmutex_t		usr_mutex_t
#define	afs_kcondvar_t		usr_cond_t
#define RX_MUTEX_INIT(A,B,C,D)	usr_mutex_init(A)
#define RX_MUTEX_ENTER(A)	usr_mutex_lock(A)
#define RX_MUTEX_TRYENTER(A)	usr_mutex_trylock(A)
#define RX_MUTEX_ISMINE(A)	(1)
#define RX_MUTEX_EXIT(A)	usr_mutex_unlock(A)
#define RX_MUTEX_DESTROY(A)	usr_mutex_destroy(A)
#define CV_INIT(A,B,C,D)	usr_cond_init(A)
#define CV_TIMEDWAIT(A,B,C)	usr_cond_timedwait(A,B,C)
#define CV_SIGNAL(A)		usr_cond_signal(A)
#define CV_BROADCAST(A)		usr_cond_broadcast(A)
#define CV_DESTROY(A)		usr_cond_destroy(A)
#define CV_WAIT(_cv, _lck)	{ \
				    int isGlockOwner = ISAFS_GLOCK(); \
				    if (isGlockOwner) { \
					AFS_GUNLOCK(); \
				    } \
				    usr_cond_wait(_cv, _lck); \
				    if (isGlockOwner) { \
					RX_MUTEX_EXIT(_lck); \
					AFS_GLOCK(); \
					RX_MUTEX_ENTER(_lck); \
				    } \
				}

extern void osirx_AssertMine(afs_kmutex_t *lockaddr, char *msg);

#define AFS_RXGLOCK()
#define AFS_RXGUNLOCK()
#define ISAFS_RXGLOCK()		1
#define AFS_ASSERT_RXGLOCK()

#define SPLVAR
#define NETPRI
#define USERPRI

#endif /* _RX_KMUTEX_H_ */

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@@
