head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.38
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.36
	OPENBSD_5_0:1.3.0.34
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.32
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.30
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.08.23.06.21.55;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2003.08.05.09.11.12;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.43.30;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.41.23;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.35;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.21.07;	author hin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@the afs src tree can go away
@
text
@/*
****************************************************************************
*        Copyright IBM Corporation 1988, 1989 - All Rights Reserved        *
*                                                                          *
* Permission to use, copy, modify, and distribute this software and its    *
* documentation for any purpose and without fee is hereby granted,         *
* provided that the above copyright notice appear in all copies and        *
* that both that copyright notice and this permission notice appear in     *
* supporting documentation, and that the name of IBM not be used in        *
* advertising or publicity pertaining to distribution of the software      *
* without specific, written prior permission.                              *
*                                                                          *
* IBM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL *
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL IBM *
* BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY      *
* DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER  *
* IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING   *
* OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.    *
****************************************************************************
*/
#include <sys/types.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <sys/file.h>
#include <sys/stat.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <agetarg.h>

#include <stdio.h>
#include <err.h>

#include "rx_user.h"
#include "rx_clock.h"
#include "rx_queue.h"
#include "rx.h"

#include "config.h"
#include "roken.h"

RCSID ("$arla: rxdebug.c,v 1.15 2003/01/19 08:50:12 lha Exp $");

#define	TIMEOUT	    20

static uint16_t
PortNumber(char *aport)
{
    uint16_t port = atoi(aport);
    return htons(port);
}

static uint16_t
PortName(char *aname)
{
    struct servent *ts = getservbyname(aname, NULL);
    if (ts == NULL)
	return 0;
    return ts->s_port;	/* returns it in network byte order */
}

static int
MakeCall (int asocket, uint32_t ahost, uint16_t aport, char *adata, 
	  long alen, char *aresult, long aresultLen)
{
    static long counter = 100;
    long endTime;
    struct rx_header theader;
    char tbuffer[1500];
    int code;
    struct timeval tv;
    struct sockaddr_in taddr, faddr;
    int faddrLen;
    fd_set imask;
    char *tp;

    endTime = time(0) +	TIMEOUT; /* try for N seconds */
    counter++;
    tp = &tbuffer[sizeof(struct rx_header)];
    taddr.sin_family = AF_INET;
    taddr.sin_port = aport;
    taddr.sin_addr.s_addr = ahost;
    while(1) {
	memset(&theader, 0, sizeof(theader));
	theader.epoch = htonl(999);
	theader.cid = 0;
	theader.callNumber = htonl(counter);
	theader.seq = 0;
	theader.serial = 0;
	theader.type = RX_PACKET_TYPE_DEBUG;
	theader.flags = RX_CLIENT_INITIATED | RX_LAST_PACKET;
	theader.serviceId = 0;
	
	if (sizeof(theader) + alen > sizeof(tbuffer))
	    errx(1, "message to large");

	memcpy(tbuffer, &theader, sizeof(theader));
	memcpy(tp, adata, alen);
	code = sendto(asocket, tbuffer, alen+sizeof(struct rx_header), 0,
		      (struct sockaddr *)&taddr, sizeof(struct sockaddr_in));
	if (code == -1) {
	    err(1, "sendto");
	}
	/* see if there's a packet available */
	
	if (asocket >= FD_SETSIZE) {
	    printf("rxdebug: socket fd too large\n");
	    exit (1);
	}

	FD_ZERO(&imask);
	FD_SET(asocket,&imask); 
	tv.tv_sec = 1;
	tv.tv_usec = 0;
	code = select(asocket + 1, &imask, NULL, NULL, &tv);
	if (code == -1) {
	    err(1, "select");
	}
	if (code > 0) {
	    /* now receive a packet */
	    faddrLen = sizeof(struct sockaddr_in);
	    code = recvfrom(asocket, tbuffer, sizeof(tbuffer), 0,
			    (struct sockaddr *)&faddr, &faddrLen);
	    if (code == -1) {
		err(1, "recvfrom");
	    }
	    memcpy(&theader, tbuffer, sizeof(struct rx_header));
	    if (counter == ntohl(theader.callNumber)) 
		break;
	}

	/* see if we've timed out */
	if (endTime < time(0)) return -1;
    }
    code -= sizeof(struct rx_header);
    if (code > aresultLen) code = aresultLen;
    memcpy(aresult, tp, code);
    return code;
}

static int
GetVersion(int asocket, uint32_t ahost, uint16_t aport, 
	   void *adata, long alen, 
	   char *aresult, long aresultLen)
{
    static long counter = 100;
    long endTime;
    struct rx_header theader;
    char tbuffer[1500];
    int code;
    struct timeval tv;
    struct sockaddr_in taddr, faddr;
    int faddrLen;
    fd_set imask;
    char *tp;

    endTime = time(0) +	TIMEOUT; /* try for N seconds */
    counter++;
    tp = &tbuffer[sizeof(struct rx_header)];
    taddr.sin_family = AF_INET;
    taddr.sin_port = aport;
    taddr.sin_addr.s_addr = ahost;
    while(1) {
	memset(&theader, 0, sizeof(theader));
	theader.epoch = htonl(999);
	theader.cid = 0;
	theader.callNumber = htonl(counter);
	theader.seq = 0;
	theader.serial = 0;
	theader.type = RX_PACKET_TYPE_VERSION;
	theader.flags = RX_CLIENT_INITIATED | RX_LAST_PACKET;
	theader.serviceId = 0;
	
	if (sizeof(theader) + alen > sizeof(tbuffer))
	    errx(1, "message to large");

	memcpy(tbuffer, &theader, sizeof(theader));
	memcpy(tp, adata, alen);

	code = sendto(asocket, tbuffer, alen+sizeof(struct rx_header), 0,
		      (struct sockaddr *)&taddr, sizeof(struct sockaddr_in));
	if (code == -1) {
            err(1, "sendto");
        }

	if (asocket >= FD_SETSIZE) {
	    printf("rxdebug: socket fd too large\n");
	    exit (1);
	}

	/* see if there's a packet available */
	FD_ZERO(&imask);
	FD_SET(asocket, &imask);

/* should be 1 */

	tv.tv_sec = 10;
	tv.tv_usec = 0;

	code = select(asocket + 1, &imask, 0, 0, &tv);
	if (code == -1) {
	    err(1, "select");
	}
	if (code > 0) {
	    /* now receive a packet */
	    faddrLen = sizeof(struct sockaddr_in);

	    code = recvfrom(asocket, tbuffer, sizeof(tbuffer), 0,
			    (struct sockaddr *)&faddr, &faddrLen);
	    if (code == -1) {
		err(1, "recvfrom");
	    }

	    memcpy(&theader, tbuffer, sizeof(struct rx_header));

	    if (counter == ntohl(theader.callNumber)) 
		break;
	}

	/* see if we've timed out */
	if (endTime < time(0)) return -1;
    }
    code -= sizeof(struct rx_header);
    if (code > aresultLen) 
	code = aresultLen;
    memcpy(aresult, tp, code);
    return code;
}

static int
MapOldConn (char version, struct rx_debugConn *tconn)
{
    int i;
    struct rx_debugConn_vL *vL = (struct rx_debugConn_vL *)tconn;
#define MOVEvL(a) (tconn->a = vL->a)
    
    if ((version <= RX_DEBUGI_VERSION_W_UNALIGNED_CONN) ||
	(version > RX_DEBUGI_VERSION)) {
	/* any old or unrecognized version... */
	for (i=0;i<RX_MAXCALLS;i++) {
	    MOVEvL(callState[i]);
	    MOVEvL(callMode[i]);
	    MOVEvL(callFlags[i]);
	    MOVEvL(callOther[i]);
	}
	if (version == RX_DEBUGI_VERSION_W_SECSTATS) {
	    MOVEvL(secStats.type);
	    MOVEvL(secStats.level);
	    MOVEvL(secStats.flags);
	    MOVEvL(secStats.expires);
	    MOVEvL(secStats.packetsReceived);
	    MOVEvL(secStats.packetsSent);
	    MOVEvL(secStats.bytesReceived);
	    MOVEvL(secStats.bytesSent);
	}
    }
    return 0;
}

static char *hostName;
static char *portName;
static int nodally;
static int allconns;
static int rxstats;
static char *onlyPortName;
static char *onlyHostName;
static int onlyServer;
static int onlyClient;
static char *onlyAuthName;
static int version_flag;
static int noConns;
static int helpflag;

static int
MainCommand (void)
{
    int i;
    int s;
    int j;
    struct sockaddr_in taddr;
    uint32_t host;
    struct in_addr hostAddr;
    uint16_t port;
    struct hostent *th;
    struct rx_debugIn tin;
    int code;
    uint32_t onlyHost;
    uint16_t onlyPort;
    int onlyAuth;
    int flag;
    int dallyCounter;
    int withSecStats;
    int withAllConn;
    int withRxStats;
    int withWaiters;
    struct rx_debugStats tstats;
    struct rx_debugConn tconn;

    char version[64];
    char nada[64];
    long length=64;
    
    if (onlyPortName) {
	char *name = onlyPortName;
	if ((onlyPort = PortNumber(name)) == 0)
	    onlyPort = PortName(name);
	if (onlyPort == 0) {
	    printf("rxdebug: can't resolve port name %s\n", name);
	    exit(1);
	}
    } else
	onlyPort = 0xffff;
    
    if (onlyHostName) {
	char *name = onlyHostName;
	struct hostent *th;
	th = gethostbyname(name);
	if (!th) {
	    printf("rxdebug: host %s not found in host table\n", name);
	    exit(1);
	}
	memcpy(&onlyHost, th->h_addr, sizeof(onlyHost));
    } else 
	onlyHost = 0xffffffff;

    if (onlyAuthName) {
	char *name = onlyAuthName;
	if (strcmp (name, "clear") == 0) onlyAuth = 0;
	else if (strcmp (name, "auth") == 0) onlyAuth = 1;
	else if (strcmp (name, "crypt") == 0) onlyAuth = 2;
	else if ((strcmp (name, "null") == 0) ||
		 (strcmp (name, "none") == 0) ||
		 (strncmp (name, "noauth", 6) == 0) ||
		 (strncmp (name, "unauth", 6) == 0)) onlyAuth = -1;
	else {
	    fprintf (stderr, "Unknown authentication level: %s\n", name);
	    exit (1);
	}
    } else onlyAuth = 999;

    /* lookup host */
    if (hostName) {
	th = gethostbyname(hostName);
	if (!th) {
	    printf("rxdebug: host %s not found in host table\n", hostName);
	    exit(1);
	}
	memcpy(&host, th->h_addr, sizeof(host));
    }
    else host = htonl(0x7f000001);	/* IP localhost */

    if (!portName)
	port = htons(7000);		/* default is fileserver */
    else {
	if ((port = PortNumber(portName)) == 0)
	    port = PortName(portName);
	if (port == 0) {
	    printf("rxdebug: can't resolve port name %s\n", portName);
	    exit(1);
	}
    }

    dallyCounter = 0; 

    hostAddr.s_addr = host;
    printf("Trying %s (port %d):\n", inet_ntoa(hostAddr), ntohs(port));
    s = socket(AF_INET, SOCK_DGRAM, 0);

    memset(&taddr, 0, sizeof(taddr));
    taddr.sin_family = AF_INET;
    taddr.sin_port = 0;
    taddr.sin_addr.s_addr = 0;

    code = bind(s, (struct sockaddr *)&taddr, sizeof(struct sockaddr_in));
    if (code) {
	perror("bind");
	exit(1);
    }
    
    if(version_flag)
    {
	nada[0] = '\0';
	
	code = GetVersion(s, host, port, nada, length,
			  version, length);
	if (code < 0)
	{
	    printf("get version call failed with code %d, errno %d\n",
		   code,errno);
	    exit(1);
	}
	printf("AFS version: %s\n",version);fflush(stdout);
	
	exit(0);
	
    }
    
    
    tin.type = htonl(RX_DEBUGI_GETSTATS);
    tin.index = 0;
    code = MakeCall(s, host, port, (char *) &tin, sizeof(tin),
		    (char *) &tstats, sizeof(tstats));
    if (code < 0) {
	printf("getstats call failed with code %d\n", code);
	exit(1);
    }

    withSecStats = (tstats.version >= RX_DEBUGI_VERSION_W_SECSTATS);
    withAllConn = (tstats.version >= RX_DEBUGI_VERSION_W_GETALLCONN);
    withRxStats = (tstats.version >= RX_DEBUGI_VERSION_W_RXSTATS);
    withWaiters = (tstats.version >= RX_DEBUGI_VERSION_W_WAITERS);

    printf("Free packets: %ld, packet reclaims: %ld, calls: %ld, "
	   "used FDs: %d\n",
	   (long)ntohl(tstats.nFreePackets),
	   (long)ntohl(tstats.packetReclaims),
	   (long)ntohl(tstats.callsExecuted),
	   tstats.usedFDs);
    if (!tstats.waitingForPackets) printf("not ");
    printf("waiting for packets.\n");
    if (withWaiters)
	printf("%ld calls waiting for a thread\n",
	       (long)ntohl(tstats.nWaiting));
    
    if (rxstats && withRxStats) {
	if(!withRxStats) {
	    fprintf (stderr, "WARNING: Server doens't support "
		     "retrieval of Rx statistics\n");
	} else {
	    struct rx_stats rxstats;
	    int i;
	    uint32_t *lp;
	
	    memset (&rxstats, 0, sizeof(rxstats));
	    tin.type = htonl(RX_DEBUGI_RXSTATS);
	    tin.index = 0;
	    /* should gracefully handle the case where rx_stats grows */
	    code = MakeCall(s, host, port, (char *) &tin, sizeof(tin),
			    (char *) &rxstats, sizeof(rxstats));
	    if (code < 0) {
		printf("rxstats call failed with code %d\n", code);
		exit(1);
	    }

	    if ((code == sizeof(tin)) &&
		(ntohl(((struct rx_debugIn *)(&rxstats))->type) ==
		 RX_DEBUGI_BADTYPE)) {
		fprintf (stderr, "WARNING: Server doens't support "
			 "retrieval of Rx statistics\n");
	    } else {
		if  (code != sizeof(rxstats)) {
		    /* handle other versions?... */
		    fprintf (stderr, "WARNING: returned Rx statistics of "
			     "unexpected size (got %d)\n",
			     code);
		}
		/* Since its all int32's, convert to host order with a loop. */
		lp = (uint32_t*)&rxstats;
		for (i=0; i< sizeof(rxstats)/sizeof(uint32_t); i++)
		    lp[i] = ntohl(lp[i]);
		
		rx_PrintTheseStats (stdout, &rxstats, sizeof(rxstats));
	    }
	}
    }
    
    if (noConns)
	return 0;
    
    tin.type = htonl(RX_DEBUGI_GETCONN);
    if (allconns)
	tin.type = htonl(RX_DEBUGI_GETALLCONN);
    
    if (onlyServer) printf ("Showing only server connections\n");
    if (onlyClient) printf ("Showing only client connections\n");
    if (onlyAuth != 999) {
	static char *name[] =
	    {"unauthenticated", "rxkad_clear", "rxkad_auth", "rxkad_crypt"};
	printf ("Showing only %s connections\n", name[onlyAuth+1]);
    }
    if (onlyHost != 0xffffffff) {
	hostAddr.s_addr = onlyHost;
	printf ("Showing only connections from host %s\n",
		inet_ntoa(hostAddr));
    }
    if (onlyPort != 0xffff)
	printf ("Showing only connections on port %u\n", ntohs(onlyPort));
    
    for(i=0;;i++) {
	tin.index = htonl(i);
	memset (&tconn, 0, sizeof(tconn));
	code = MakeCall(s, host, port, (char *)&tin, sizeof(tin),
			(char *) &tconn, sizeof(tconn));
	if (code < 0) {
	    printf("getconn call failed with code %d\n", code);
	    break;
	}
	MapOldConn (tstats.version, &tconn);
	if (tconn.cid == htonl(0xffffffff)) {
	    printf("Done.\n");
	    break;
	}
	
	/* see if we're in nodally mode and all calls are dallying */
	if (nodally) {
	    flag = 0;
	    for(j=0;j<RX_MAXCALLS;j++) {
		if (tconn.callState[j] != RX_STATE_NOTINIT &&
		    tconn.callState[j] != RX_STATE_DALLY) {
		    flag = 1;
		    break;
		}
	    }
	    if (flag == 0) {
		/* 
		 * this call looks too ordinary, bump skipped count and go
                 * around again
		 */
		dallyCounter++;
		continue;
	    }
	}
	if ((onlyHost != -1) && (onlyHost != tconn.host)) continue;
	if ((onlyPort != 0) && (onlyPort != tconn.port)) continue;
	if (onlyServer && (tconn.type != RX_SERVER_CONNECTION)) continue;
	if (onlyClient && (tconn.type != RX_CLIENT_CONNECTION)) continue;
	if (onlyAuth != 999) {
	    if (onlyAuth == -1) {
		if (tconn.securityIndex != 0) continue;
	    } else {
		if (tconn.securityIndex != 2) continue;
		if (withSecStats && (tconn.secStats.type == 3) &&
		    (tconn.secStats.level != onlyAuth)) continue;
	    }
	}
	
	/* now display the connection */
	hostAddr.s_addr = tconn.host;
	printf("Connection from host %s, port %d, ",
	       inet_ntoa(hostAddr), ntohs(tconn.port));
	if (tconn.epoch)
	    printf ("Cuid %lx/%lx", (unsigned long)ntohl(tconn.epoch),
		    (unsigned long)ntohl(tconn.cid));
	else
	    printf ("cid %lx", (unsigned long)ntohl(tconn.cid));
	if (tconn.error)
	    printf (", error %ld", (long)ntohl(tconn.error));
	printf("\n  serial %ld, ", (long)ntohl(tconn.serial));
	printf(" maxPacketSize %ld, ", (long)ntohl(tconn.maxPacketSize));
	
	if (tconn.flags) {
	    printf ("flags");
	    if (tconn.flags & RX_CONN_MAKECALL_WAITING)
		printf(" MAKECALL_WAITING");
	    if (tconn.flags & RX_CONN_DESTROY_ME) printf(" DESTROYED");
	    if (tconn.flags & RX_CONN_USING_PACKET_CKSUM) printf(" pktCksum");
	    printf (", ");
	}
	printf("security index %d, ", tconn.securityIndex);
	if (tconn.type == RX_CLIENT_CONNECTION) printf("client conn\n");
	else printf("server conn\n");
	
	if (withSecStats) {
	    switch ((int)tconn.secStats.type) {
	    case 0:
		if (tconn.securityIndex == 2)
		    printf ("  no GetStats procedure for security object\n");
		break;
	    case 1:
		printf ("  rxnull level=%d, flags=%d\n",
			tconn.secStats.level, (int)tconn.secStats.flags);
		break;
	    case 2:
		printf ("  rxvab level=%d, flags=%d\n",
			tconn.secStats.level, (int)tconn.secStats.flags);
		break;
	    case 3: {
		char *level;
		char flags = ntohl(tconn.secStats.flags);
		if (tconn.secStats.level == 0) level = "clear";
		else if (tconn.secStats.level == 1) level = "auth";
		else if (tconn.secStats.level == 2) level = "crypt";
		else level = "unknown";
		printf ("  rxkad: level %s", level);
		if (flags) printf (", flags");
		if (flags & 1) printf (" unalloc");
		if (flags & 2) printf (" authenticated");
		if (flags & 4) printf (" expired");
		if (flags & 8) printf (" pktCksum");
		if (tconn.secStats.expires)
		    /* Apparently due to a bug in the RT compiler that
		     * prevents (u_long)0xffffffff => (double) from working,
		     * this code produces negative lifetimes when run on the
		     * RT. */
		    printf (", expires in %.1f hours",
			    ((u_long)ntohl(tconn.secStats.expires) -
			     time(0)) / 3600.0);
		if (!(flags & 1)) {
		    printf ("\n  Received %lu bytes in %lu packets\n", 
			    (long)ntohl(tconn.secStats.bytesReceived),
			    (long)ntohl(tconn.secStats.packetsReceived));
		    printf ("  Sent %lu bytes in %lu packets\n", 
			    (long)ntohl(tconn.secStats.bytesSent),
			    (long)ntohl(tconn.secStats.packetsSent));
		} else
		    printf ("\n");
		break;
	    }
	    
	    default: printf("  unknown\n");
	    }
	}
	
	for(j=0;j<RX_MAXCALLS;j++) {
	    printf("    call %d: # %ld, state ", j,
		   (long)ntohl(tconn.callNumber[j]));
	    if (tconn.callState[j]==RX_STATE_NOTINIT) {
		printf("not initialized\n");
		continue;
	    }
	    else if (tconn.callState[j]==RX_STATE_PRECALL)
		printf("precall, ");
	    else if (tconn.callState[j] == RX_STATE_ACTIVE)
		printf("active, ");
	    else if (tconn.callState[j] == RX_STATE_DALLY)
		printf("dally, ");
	    printf("mode: ");
	    if (tconn.callMode[j]==RX_MODE_SENDING)
		printf("sending");
	    else if (tconn.callMode[j]==RX_MODE_RECEIVING)
		printf("receiving");
	    else if (tconn.callMode[j]==RX_MODE_ERROR)
		printf("error");
	    else if (tconn.callMode[j] == RX_MODE_EOF)
		printf("eof");
	    else printf("unknown");
	    if (tconn.callFlags[j]) {
		printf(", flags:");
		if (tconn.callFlags[j]&RX_CALL_READER_WAIT)
		    printf(" reader_wait");
		if (tconn.callFlags[j]&RX_CALL_WAIT_WINDOW_ALLOC)
		    printf(" window_alloc");
		if (tconn.callFlags[j]&RX_CALL_WAIT_WINDOW_SEND)
		    printf(" window_send");
		if (tconn.callFlags[j]&RX_CALL_WAIT_PACKETS)
		    printf(" wait_packets");
		if (tconn.callFlags[j]&RX_CALL_WAIT_PROC)
		    printf(" waiting_for_process");
		if (tconn.callFlags[j]&RX_CALL_RECEIVE_DONE)
		    printf(" receive_done");
		if (tconn.callFlags[j]&RX_CALL_CLEARED)
		    printf(" call_cleared");
	    }
	    if (tconn.callOther[j] & RX_OTHER_IN)
		printf(", has_input_packets");
	    if (tconn.callOther[j] & RX_OTHER_OUT)
		printf(", has_output_packets");
	    printf("\n");
	}
    }
    if (nodally) printf("Skipped %d dallying connections.\n", dallyCounter);
    return 0;
}

static struct agetargs args[] = {
    {"servers",  0, aarg_string,  &hostName,
     "server machine", NULL, aarg_mandatory},
    {"port", 0, aarg_string, &portName,
     "IP port", NULL, aarg_optional_swless },
    {"nodally", 0, aarg_flag, &nodally,
     "don't show dallying conns", NULL },
    {"allconnections", 0, aarg_flag, &allconns,
     "don't filter out uninteresting connections on server"},
    {"rxstats", 0, aarg_flag, &rxstats,
     "show Rx statistics", NULL },
    {"onlyserver", 0, aarg_flag, &onlyServer,
     "only show server conns", NULL },
    {"onlyclient", 0, aarg_flag, &onlyClient,
     "only show client conns", NULL},
    {"onlyport", 0, aarg_integer, &onlyPortName,
     "show only <port>", NULL },
    {"onlyhost", 0, aarg_string, &onlyHostName,
     "show only <host>", NULL },
    {"onlyauth", 0, aarg_string, &onlyAuthName,
     "show only <auth level>", NULL },
    {"version", 0, aarg_flag, &version_flag,
     "show AFS version id", NULL },
    {"noconns", 0, aarg_flag, &noConns,
     "show no connections", NULL },
    {NULL}
};

static void
usage(void)
{   
    aarg_printusage (args, "rxdebug", "", AARG_AFSSTYLE);
}


/* simple main program */

int
main(int argc, char **argv)
{

    int optind = 0;
    
    if (agetarg (args, argc, argv, &optind, AARG_AFSSTYLE)) {
        usage();
        return 0;
    }

    if(helpflag) {
        usage();
        return 0;
    }

    argc -= optind;
    argv += optind;

    if (argc > 0) {
        fprintf (stderr, "create volume: unparsed arguments\n");
        return 0;
    }

    return MainCommand();
}
@


1.3
log
@Merge
@
text
@@


1.2
log
@merge
@
text
@d47 1
a47 1
RCSID ("$KTH: rxdebug.c,v 1.7.2.5 2001/11/24 17:00:58 mattiasa Exp $");
d51 1
a51 1
static short
d54 2
a55 1
    return htons(atoi (aport));
d58 1
a58 1
static short
d63 1
a63 1
	return -1;
d68 1
a68 1
MakeCall (int asocket, long ahost, short aport, char *adata, 
d75 1
a75 1
    register long code;
d80 1
a80 1
    register char *tp;
d89 1
a89 1
	bzero(&theader, sizeof(theader));
d99 5
a103 2
	bcopy(&theader, tbuffer, sizeof(theader));
	bcopy(adata, tp, alen);
d120 1
a120 1
	code = select(asocket+1, &imask, NULL, NULL, &tv);
d132 3
a134 2
	    bcopy(tbuffer, &theader, sizeof(struct rx_header));
	    if (counter == ntohl(theader.callNumber)) break;
d142 1
a142 1
    bcopy(tp, aresult, code);
d147 2
a148 1
GetVersion(int asocket, long ahost, short aport, void *adata, long alen, 
d155 1
a155 1
    register long code;
d160 1
a160 1
    register char *tp;
d169 1
a169 1
	bzero(&theader, sizeof(theader));
d179 5
a183 2
	bcopy(&theader, tbuffer, sizeof(theader));
	bcopy(adata, tp, alen);
d205 1
a205 1
	code = select(32, &imask, 0, 0, &tv);
d219 1
a219 1
	    bcopy(tbuffer, &theader, sizeof(struct rx_header));
d221 2
a222 1
	    if (counter == ntohl(theader.callNumber)) break;
d229 3
a231 2
    if (code > aresultLen) code = aresultLen;
    bcopy(tp, aresult, code);
d282 1
a282 1
    register int i;
d286 1
a286 1
    long host;
d288 1
a288 1
    short port;
d292 2
a293 2
    long onlyHost;
    short onlyPort;
d310 1
a310 1
	if ((onlyPort = PortNumber(name)) == -1)
d312 1
a312 1
	if (onlyPort == -1) {
d316 2
a317 1
    } else onlyPort = -1;
d327 3
a329 2
	bcopy(th->h_addr, &onlyHost, sizeof(long));
    } else onlyHost = -1;
d353 1
a353 1
	bcopy(th->h_addr, &host, sizeof(long));
d360 1
a360 1
	if ((port = PortNumber(portName)) == -1)
d362 1
a362 1
	if (port == -1) {
d373 2
d378 1
a412 3
    if ((tstats.version < RX_DEBUGI_VERSION_MINIMUM) ||
	(tstats.version > RX_DEBUGI_VERSION))
	tstats.version = RX_DEBUGI_VERSION_MINIMUM-1;
d437 1
a437 1
	    long *lp;
d439 1
a439 1
	    bzero (&rxstats, sizeof(rxstats));
d462 4
a465 4
		/* Since its all longs convert to host order with a loop. */
		lp = (long *)&rxstats;
		for (i=0; i<sizeof(rxstats)/sizeof(int); i++,lp++)
		    *lp = ntohl(*lp);
d476 1
a476 1
    if (allconns) {
a477 1
    }
d486 1
a486 1
    if (onlyHost != -1) {
d491 1
a491 1
    if (onlyPort != -1)
d496 1
a496 1
	bzero (&tconn, sizeof(tconn));
d529 1
a529 1
	if ((onlyPort != -1) && (onlyPort != tconn.port)) continue;
d575 2
a576 2
		printf ("  rxnull level=%d, flags=%ld\n",
			tconn.secStats.level, tconn.secStats.flags);
d579 2
a580 2
		printf ("  rxvab level=%d, flags=%ld\n",
			tconn.secStats.level, tconn.secStats.flags);
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d34 1
a34 1
#include <cmd.h>
d37 1
d44 4
a47 1
RCSID ("$Id: rxdebug.c,v 1.5 2000/08/02 00:21:12 assar Exp $");
d102 3
a104 1
	
d107 5
d117 3
d125 3
a127 1

d178 9
a186 1
	
d197 3
d206 3
d254 14
d269 1
a269 1
MainCommand (struct cmd_syndesc *as, void *arock)
a280 4
    int nodally;
    int allconns;
    int rxstats;
    int onlyClient, onlyServer;
a290 1
    char *portName, *hostName;
a291 1
    short noConns;
a292 1
    int version_flag;
d297 2
a298 20
    nodally = (as->parms[2].items ? 1 : 0);
    allconns = (as->parms[3].items ? 1 : 0);
    rxstats = (as->parms[4].items ? 1 : 0);
    onlyServer = (as->parms[5].items ? 1 : 0);
    onlyClient = (as->parms[6].items ? 1 : 0);
    version_flag=(as->parms[10].items ? 1 : 0);
    noConns = (as->parms[11].items ? 1 : 0);
    
    if (as->parms[0].items)
	hostName = as->parms[0].items->data;
    else
	hostName = (char *) 0;
    
    if (as->parms[1].items)
	portName = as->parms[1].items->data;
    else
	portName = (char *) 0;
    
    if (as->parms[7].items) {
	char *name = as->parms[7].items->data;
d307 2
a308 2
    if (as->parms[8].items) {
	char *name = as->parms[8].items->data;
d318 2
a319 2
    if (as->parms[9].items) {
	char *name = as->parms[9].items->data;
d417 2
a418 4
    if (rxstats) {
	if (!withRxStats) {
	noRxStats:
	    withRxStats = 0;
d425 1
a425 1
	    
d436 19
a454 8
	    if (code != sizeof(rxstats)) {
		if ((code == sizeof(tin)) &&
		    (ntohl(((struct rx_debugIn *)(&rxstats))->type) ==
		     RX_DEBUGI_BADTYPE)) goto noRxStats;
		fprintf (stderr, "WARNING: returned Rx statistics of "
			 "unexpected size (got %d)\n",
			code);
		/* handle other versions?... */
a455 7
	    
	    /* Since its all longs convert to host order with a loop. */
	    lp = (long *)&rxstats;
	    for (i=0; i<sizeof(rxstats)/sizeof(int); i++,lp++)
		*lp = ntohl(*lp);
	    
	    rx_PrintTheseStats (stdout, &rxstats, sizeof(rxstats));
d464 1
a464 5
	if (!withAllConn) 
	    fprintf (stderr, "WARNING: Server doesn't support retrieval of "
		     "all connections,\n"
		     "getting only interesting instead.\n");
	else tin.type = htonl(RX_DEBUGI_GETALLCONN);
d592 1
a592 1
		    printf ("\n  Received %ld bytes in %ld packets\n", 
d595 1
a595 1
		    printf ("  Sent %ld bytes in %ld packets\n", 
d658 35
d698 2
a699 1
    struct cmd_syndesc *ts;
d701 19
a719 22
    ts = cmd_CreateSyntax((char *) 0, MainCommand, 0, "probe RX server");
    cmd_AddParm(ts, "-servers", CMD_SINGLE, CMD_REQUIRED, "server machine");
    cmd_AddParm(ts, "-port", CMD_SINGLE, CMD_OPTIONAL, "IP port");
    cmd_AddParm(ts, "-nodally", CMD_FLAG, CMD_OPTIONAL,
		"don't show dallying conns");
    cmd_AddParm(ts, "-allconnections", CMD_FLAG, CMD_OPTIONAL,
		"don't filter out uninteresting connections on server");
    cmd_AddParm(ts, "-rxstats", CMD_FLAG, CMD_OPTIONAL, "show Rx statistics");
    cmd_AddParm(ts, "-onlyserver", CMD_FLAG, CMD_OPTIONAL,
		"only show server conns");
    cmd_AddParm(ts, "-onlyclient", CMD_FLAG, CMD_OPTIONAL,
		"only show client conns");
    cmd_AddParm(ts, "-onlyport", CMD_SINGLE, CMD_OPTIONAL, "show only <port>");
    cmd_AddParm(ts, "-onlyhost", CMD_SINGLE, CMD_OPTIONAL, "show only <host>");
    cmd_AddParm(ts, "-onlyauth", CMD_SINGLE, CMD_OPTIONAL,
		"show only <auth level>");
    
    cmd_AddParm(ts,"-version",CMD_FLAG,CMD_OPTIONAL,"show AFS version id");
    cmd_AddParm(ts,"-noconns",CMD_FLAG,CMD_OPTIONAL,"show no connections");
    
    cmd_Dispatch(argc, argv);
    return 0;
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d34 1
a34 1
#include <agetarg.h>
a36 1
#include <err.h>
d43 1
a43 4
#include "config.h"
#include "roken.h"

RCSID ("$KTH: rxdebug.c,v 1.7.2.5 2001/11/24 17:00:58 mattiasa Exp $");
d98 1
a98 3
	if (code == -1) {
	    err(1, "sendto");
	}
a100 5
	if (asocket >= FD_SETSIZE) {
	    printf("rxdebug: socket fd too large\n");
	    exit (1);
	}

a105 3
	if (code == -1) {
	    err(1, "select");
	}
d111 1
a111 3
	    if (code == -1) {
		err(1, "recvfrom");
	    }
d162 1
a162 9
	if (code == -1) {
            err(1, "sendto");
        }

	if (asocket >= FD_SETSIZE) {
	    printf("rxdebug: socket fd too large\n");
	    exit (1);
	}

a172 3
	if (code == -1) {
	    err(1, "select");
	}
a178 3
	    if (code == -1) {
		err(1, "recvfrom");
	    }
a223 14
static char *hostName;
static char *portName;
static int nodally;
static int allconns;
static int rxstats;
static char *onlyPortName;
static char *onlyHostName;
static int onlyServer;
static int onlyClient;
static char *onlyAuthName;
static int version_flag;
static int noConns;
static int helpflag;

d225 1
a225 1
MainCommand (void)
d237 4
d251 1
d253 1
d255 1
d260 20
a279 2
    if (onlyPortName) {
	char *name = onlyPortName;
d288 2
a289 2
    if (onlyHostName) {
	char *name = onlyHostName;
d299 2
a300 2
    if (onlyAuthName) {
	char *name = onlyAuthName;
d398 4
a401 2
    if (rxstats && withRxStats) {
	if(!withRxStats) {
d408 1
a408 1
	
d419 8
a426 19

	    if ((code == sizeof(tin)) &&
		(ntohl(((struct rx_debugIn *)(&rxstats))->type) ==
		 RX_DEBUGI_BADTYPE)) {
		fprintf (stderr, "WARNING: Server doens't support "
			 "retrieval of Rx statistics\n");
	    } else {
		if  (code != sizeof(rxstats)) {
		    /* handle other versions?... */
		    fprintf (stderr, "WARNING: returned Rx statistics of "
			     "unexpected size (got %d)\n",
			     code);
		}
		/* Since its all longs convert to host order with a loop. */
		lp = (long *)&rxstats;
		for (i=0; i<sizeof(rxstats)/sizeof(int); i++,lp++)
		    *lp = ntohl(*lp);
		
		rx_PrintTheseStats (stdout, &rxstats, sizeof(rxstats));
d428 7
d443 5
a447 1
	tin.type = htonl(RX_DEBUGI_GETALLCONN);
d575 1
a575 1
		    printf ("\n  Received %lu bytes in %lu packets\n", 
d578 1
a578 1
		    printf ("  Sent %lu bytes in %lu packets\n", 
a640 35
static struct agetargs args[] = {
    {"servers",  0, aarg_string,  &hostName,
     "server machine", NULL, aarg_mandatory},
    {"port", 0, aarg_string, &portName,
     "IP port", NULL, aarg_optional_swless },
    {"nodally", 0, aarg_flag, &nodally,
     "don't show dallying conns", NULL },
    {"allconnections", 0, aarg_flag, &allconns,
     "don't filter out uninteresting connections on server"},
    {"rxstats", 0, aarg_flag, &rxstats,
     "show Rx statistics", NULL },
    {"onlyserver", 0, aarg_flag, &onlyServer,
     "only show server conns", NULL },
    {"onlyclient", 0, aarg_flag, &onlyClient,
     "only show client conns", NULL},
    {"onlyport", 0, aarg_integer, &onlyPortName,
     "show only <port>", NULL },
    {"onlyhost", 0, aarg_string, &onlyHostName,
     "show only <host>", NULL },
    {"onlyauth", 0, aarg_string, &onlyAuthName,
     "show only <auth level>", NULL },
    {"version", 0, aarg_flag, &version_flag,
     "show AFS version id", NULL },
    {"noconns", 0, aarg_flag, &noConns,
     "show no connections", NULL },
    {NULL}
};

static void
usage(void)
{   
    aarg_printusage (args, "rxdebug", "", AARG_AFSSTYLE);
}


d646 21
a666 2

    int optind = 0;
d668 2
a669 19
    if (agetarg (args, argc, argv, &optind, AARG_AFSSTYLE)) {
        usage();
        return 0;
    }

    if(helpflag) {
        usage();
        return 0;
    }

    argc -= optind;
    argv += optind;

    if (argc > 0) {
        fprintf (stderr, "create volume: unparsed arguments\n");
        return 0;
    }

    return MainCommand();
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d47 1
a47 1
RCSID ("$arla: rxdebug.c,v 1.15 2003/01/19 08:50:12 lha Exp $");
d51 1
a51 1
static uint16_t
d54 1
a54 2
    uint16_t port = atoi(aport);
    return htons(port);
d57 1
a57 1
static uint16_t
d62 1
a62 1
	return 0;
d67 1
a67 1
MakeCall (int asocket, uint32_t ahost, uint16_t aport, char *adata, 
d74 1
a74 1
    int code;
d79 1
a79 1
    char *tp;
d88 1
a88 1
	memset(&theader, 0, sizeof(theader));
d98 2
a99 5
	if (sizeof(theader) + alen > sizeof(tbuffer))
	    errx(1, "message to large");

	memcpy(tbuffer, &theader, sizeof(theader));
	memcpy(tp, adata, alen);
d116 1
a116 1
	code = select(asocket + 1, &imask, NULL, NULL, &tv);
d128 2
a129 3
	    memcpy(&theader, tbuffer, sizeof(struct rx_header));
	    if (counter == ntohl(theader.callNumber)) 
		break;
d137 1
a137 1
    memcpy(aresult, tp, code);
d142 1
a142 2
GetVersion(int asocket, uint32_t ahost, uint16_t aport, 
	   void *adata, long alen, 
d149 1
a149 1
    int code;
d154 1
a154 1
    char *tp;
d163 1
a163 1
	memset(&theader, 0, sizeof(theader));
d173 2
a174 5
	if (sizeof(theader) + alen > sizeof(tbuffer))
	    errx(1, "message to large");

	memcpy(tbuffer, &theader, sizeof(theader));
	memcpy(tp, adata, alen);
d196 1
a196 1
	code = select(asocket + 1, &imask, 0, 0, &tv);
d210 1
a210 1
	    memcpy(&theader, tbuffer, sizeof(struct rx_header));
d212 1
a212 2
	    if (counter == ntohl(theader.callNumber)) 
		break;
d219 2
a220 3
    if (code > aresultLen) 
	code = aresultLen;
    memcpy(aresult, tp, code);
d271 1
a271 1
    int i;
d275 1
a275 1
    uint32_t host;
d277 1
a277 1
    uint16_t port;
d281 2
a282 2
    uint32_t onlyHost;
    uint16_t onlyPort;
d299 1
a299 1
	if ((onlyPort = PortNumber(name)) == 0)
d301 1
a301 1
	if (onlyPort == 0) {
d305 1
a305 2
    } else
	onlyPort = 0xffff;
d315 2
a316 3
	memcpy(&onlyHost, th->h_addr, sizeof(onlyHost));
    } else 
	onlyHost = 0xffffffff;
d340 1
a340 1
	memcpy(&host, th->h_addr, sizeof(host));
d347 1
a347 1
	if ((port = PortNumber(portName)) == 0)
d349 1
a349 1
	if (port == 0) {
a359 2

    memset(&taddr, 0, sizeof(taddr));
a362 1

d397 3
d424 1
a424 1
	    uint32_t *lp;
d426 1
a426 1
	    memset (&rxstats, 0, sizeof(rxstats));
d449 4
a452 4
		/* Since its all int32's, convert to host order with a loop. */
		lp = (uint32_t*)&rxstats;
		for (i=0; i< sizeof(rxstats)/sizeof(uint32_t); i++)
		    lp[i] = ntohl(lp[i]);
d463 1
a463 1
    if (allconns)
d465 1
d474 1
a474 1
    if (onlyHost != 0xffffffff) {
d479 1
a479 1
    if (onlyPort != 0xffff)
d484 1
a484 1
	memset (&tconn, 0, sizeof(tconn));
d517 1
a517 1
	if ((onlyPort != 0) && (onlyPort != tconn.port)) continue;
d563 2
a564 2
		printf ("  rxnull level=%d, flags=%d\n",
			tconn.secStats.level, (int)tconn.secStats.flags);
d567 2
a568 2
		printf ("  rxvab level=%d, flags=%d\n",
			tconn.secStats.level, (int)tconn.secStats.flags);
@


