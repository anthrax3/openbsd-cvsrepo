head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.08.23.06.21.53;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.09.11.12;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.43.30;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.41.21;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.15;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.14;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.14;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.34;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.06;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/*
****************************************************************************
*        Copyright IBM Corporation 1988, 1989 - All Rights Reserved        *
*                                                                          *
* Permission to use, copy, modify, and distribute this software and its    *
* documentation for any purpose and without fee is hereby granted,         *
* provided that the above copyright notice appear in all copies and        *
* that both that copyright notice and this permission notice appear in     *
* supporting documentation, and that the name of IBM not be used in        *
* advertising or publicity pertaining to distribution of the software      *
* without specific, written prior permission.                              *
*                                                                          *
* IBM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL *
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL IBM *
* BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY      *
* DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER  *
* IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING   *
* OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.    *
****************************************************************************
*/

/* Elapsed time package */

#include "rx_locl.h"

RCSID("$arla: rx_clock.c,v 1.15 2000/11/26 22:29:28 lha Exp $");

#ifndef KERNEL

struct clock clock_now;

int clock_haveCurrentTime;

int clock_nUpdates;

/* Magic tdiff that guarantees a monotonically increasing clock value. */ 
static struct clock tdiff;

void
clock_Init(void)
{
    struct timeval tv;

    gettimeofday(&tv, 0);
    tdiff.sec  = tv.tv_sec;
    tdiff.usec = tv.tv_usec;
    clock_now.sec = clock_now.usec = 0;
    clock_haveCurrentTime = 1;
    clock_nUpdates = 0;
}

/* Refresh value of clock_now. */
void 
clock_UpdateTime(void)
{
    struct timeval tv;
    struct clock t;
    
    gettimeofday(&tv, 0);
    t.sec  = tv.tv_sec;
    t.usec = tv.tv_usec;
    clock_Sub(&t, &tdiff);
    
    /* We can't have time running backwards!!! */
    if (clock_Le(&t, &clock_now))
    {
	/* Calculate new tdiff. */
	t.sec = tv.tv_sec;
	t.usec = tv.tv_usec;
	clock_Sub(&t, &clock_now);
	tdiff.sec  = t.sec;
	tdiff.usec = t.usec;
	
	/* Fake new time. */
	t.sec = tv.tv_sec;
	t.usec = tv.tv_usec;
	clock_Sub(&t, &tdiff);
	t.usec++;
	if (t.usec >= 1000000)
	{
	    t.sec += 1;
	    t.usec = 0;
	}
    }
    
    clock_now = t;
    clock_haveCurrentTime = 1;
    clock_nUpdates++;
}

void
clock_ReInit(void)
{
}

#endif				       /* KERNEL */
@


1.5
log
@Merge
@
text
@@


1.4
log
@merge
@
text
@d26 1
a26 1
RCSID("$KTH: rx_clock.c,v 1.15 2000/11/26 22:29:28 lha Exp $");
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@a22 1
/* See rx_clock.h for calling conventions */
d26 1
a26 1
RCSID("$Id: rx_clock.c,v 1.14 1999/11/18 02:25:32 assar Exp $");
d30 1
a30 1
#ifdef HAVE_GETITIMER
a31 9
struct clock clock_now;		       /* The last elapsed time ready by
				        * clock_GetTimer */

/*
 * This is set to 1 whenever the time is read, and reset to 0 whenever
 * clock_NewTime is called.  This is to allow the caller to control the
 * frequency with which the actual time is re-evaluated (an expensive
 * operation)
 */
d34 1
a34 13
int clock_nUpdates;		       /* The actual number of clock updates */

/*
 * Dynamically figured out start-value of the ITIMER_REAL interval timer
 */

static struct clock startvalue;

/*
 * The offset we need to add.
 */

static struct clock offset;
d36 2
a37 3
/*
 * We need to restart the timer.
 */
a38 72
static int do_restart;

/*
 * When the interval timer has counted to zero, set offset and make
 * sure it gets restarted.
 */

static void
alrm_handler (int signo)
{
    clock_Add(&offset, &startvalue);
    do_restart  = 1;
    clock_NewTime ();
}

/*
 * Install handler for SIGALRM
 */

static void
set_alrm_handler (void)
{
#if defined(HAVE_POSIX_SIGNALS) && defined(SA_RESTART)
    {
	struct sigaction act;

	sigemptyset(&act.sa_mask);
	act.sa_flags   = SA_RESTART;
	act.sa_handler = alrm_handler;
	if (sigaction (SIGALRM, &act, NULL) < 0) {
	    fprintf (stderr, "sigaction failed");
	    exit (1);
	}
    }
#else
    signal (SIGALRM, alrm_handler);
#endif
}

/*
 * Start an interval timer counting down to `timer_val'
 */

static int
clock_starttimer (time_t timer_val)
{
    struct itimerval itimer;

    itimer.it_value.tv_sec     = timer_val; 
    itimer.it_value.tv_usec    = 0;
    itimer.it_interval.tv_sec  = 0;
    itimer.it_interval.tv_usec = 0;

    if (setitimer (ITIMER_REAL, &itimer, NULL) != 0) {
	if (errno != EINVAL) {
	    fprintf (stderr, "setitimer failed\n");
	    exit (1);
	}
	return 1;
    }
    if (getitimer (ITIMER_REAL, &itimer) != 0) {
	fprintf (stderr, "setitimer failed\n");
	exit (1);
    }
    startvalue.sec  = itimer.it_value.tv_sec;
    startvalue.usec = itimer.it_value.tv_usec;
    do_restart  = 0;
    set_alrm_handler ();
    return 0;
}

/* Initialize the clock */
d42 1
a42 32
    static int initialized = 0;
    int timer_val;

    for (timer_val = INT_MAX;
	 !initialized && clock_starttimer (timer_val);
	 timer_val /= 2)
	;
    initialized = 1;
    clock_UpdateTime();
}

/*
 * Compute the current time.  The timer gets the current total elapsed
 * time since startup, expressed in seconds and microseconds.  This call
 * is almost 200 usec on an APC RT
 */
void 
clock_UpdateTime(void)
{
    struct itimerval itimer;
    struct clock tmp_clock;

    if (do_restart)
	clock_starttimer (startvalue.sec);

    getitimer(ITIMER_REAL, &itimer);
    tmp_clock.sec  = itimer.it_value.tv_sec;
    tmp_clock.usec = itimer.it_value.tv_usec;

    clock_now = offset;
    clock_Add(&clock_now, &startvalue);
    clock_Sub(&clock_now, &tmp_clock);
d44 4
d49 1
a49 1
    clock_nUpdates++;
d52 1
a52 53
/* Restart the interval timer */
void
clock_ReInit(void)
{
    struct clock tmp_clock;
    struct itimerval itimer;

    tmp_clock = offset;
    clock_Add(&tmp_clock, &startvalue);
    clock_Sub(&tmp_clock, &clock_now);
    itimer.it_value.tv_sec  = tmp_clock.sec;
    itimer.it_value.tv_usec = tmp_clock.usec;
    itimer.it_interval.tv_sec  = 0;
    itimer.it_interval.tv_usec = 0;

    if (setitimer(ITIMER_REAL, &itimer, NULL) != 0) {
	fprintf(stderr, "clock:  could not set interval timer; aborted\n");
	fflush(stderr);
	exit(1);
    }
}

#else /* ! HAVE_GETITIMER */

struct clock clock_now;		       /* The last elapsed time ready by
				        * clock_GetTimer */

static struct clock offset;	/* time when we start counting */

/*
 * This is set to 1 whenever the time is read, and reset to 0 whenever
 * clock_NewTime is called.  This is to allow the caller to control the
 * frequency with which the actual time is re-evaluated (an expensive
 * operation)
 */
int clock_haveCurrentTime;

int clock_nUpdates;		       /* The actual number of clock updates */

/* Initialize the clock */

void
clock_Init(void)
{
    clock_UpdateTime();
    offset = clock_now;
    clock_now.sec = clock_now.usec = 0;
}

/*
 * Compute the current time.
 */

d57 30
a86 8

    gettimeofday (&tv, NULL);

    clock_now.sec  = tv.tv_sec;
    clock_now.usec = tv.tv_usec;

    clock_Sub(&clock_now, &offset);

a90 1
/* Restart the interval timer */
a95 3
#endif /* HAVE_GETITIMER */

#else				       /* KERNEL */
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@a0 1
/*	$OpenBSD$	*/
d27 1
a27 1
RCSID("$KTH: rx_clock.c,v 1.5 1998/10/25 19:38:30 joda Exp $");
d31 1
a31 14
#if defined(AGS_GFS_ENV)
#define STARTVALUE 8000000	       /* Ultrix bounds smaller, too small
				        * for general use */
#else
#ifdef	AFS_SUN5_ENV
#define	STARTVALUE 10000000	       /* Max number of seconds setitimer
				        * allows, for some reason */
#elif defined(__uxpv__)
#define STARTVALUE 42949672
#else
#define	STARTVALUE 100000000	       /* Max number of seconds setitimer
				        * allows, for some reason */
#endif
#endif
d46 87
d138 1
a138 1
    struct itimerval itimer, otimer;
d140 5
a144 13
    if (!initialized) {
	itimer.it_value.tv_sec = STARTVALUE;
	itimer.it_value.tv_usec = 0;
	itimer.it_interval.tv_sec = 0;
	itimer.it_interval.tv_usec = 0;

	if (setitimer(ITIMER_REAL, &itimer, &otimer) != 0) {
	    fprintf(stderr, "clock:  could not set interval timer; aborted\n");
	    fflush(stderr);
	    exit(1);
	}
	initialized = 1;
    }
d157 4
d163 2
d166 3
a168 2
    clock_now.sec = STARTVALUE - 1 - itimer.it_value.tv_sec;
    /* The "-1" makes up for adding 1000000 usec, on the next line */
a169 3
    clock_now.usec = 1000000 - itimer.it_value.tv_usec;
    if (clock_now.usec == 1000000)
	clock_now.usec = 0, clock_now.sec++;
d173 77
@


1.1
log
@Initial revision
@
text
@d28 1
a28 1
RCSID("$KTH: rx_clock.c,v 1.4 1998/03/13 01:10:57 art Exp $");
d39 2
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d24 1
d28 1
a28 1
RCSID("$KTH: rx_clock.c,v 1.15 2000/11/26 22:29:28 lha Exp $");
d32 12
a43 1
struct clock clock_now;
d45 9
d56 1
a56 4
int clock_nUpdates;

/* Magic tdiff that guarantees a monotonically increasing clock value. */ 
static struct clock tdiff;
d58 1
d62 2
a63 1
    struct timeval tv;
d65 14
a78 6
    gettimeofday(&tv, 0);
    tdiff.sec  = tv.tv_sec;
    tdiff.usec = tv.tv_usec;
    clock_now.sec = clock_now.usec = 0;
    clock_haveCurrentTime = 1;
    clock_nUpdates = 0;
d81 5
a85 1
/* Refresh value of clock_now. */
d89 10
a98 31
    struct timeval tv;
    struct clock t;
    
    gettimeofday(&tv, 0);
    t.sec  = tv.tv_sec;
    t.usec = tv.tv_usec;
    clock_Sub(&t, &tdiff);
    
    /* We can't have time running backwards!!! */
    if (clock_Le(&t, &clock_now))
    {
	/* Calculate new tdiff. */
	t.sec = tv.tv_sec;
	t.usec = tv.tv_usec;
	clock_Sub(&t, &clock_now);
	tdiff.sec  = t.sec;
	tdiff.usec = t.usec;
	
	/* Fake new time. */
	t.sec = tv.tv_sec;
	t.usec = tv.tv_usec;
	clock_Sub(&t, &tdiff);
	t.usec++;
	if (t.usec >= 1000000)
	{
	    t.sec += 1;
	    t.usec = 0;
	}
    }
    
    clock_now = t;
d103 1
a103 5
void
clock_ReInit(void)
{
}

@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d26 1
a26 1
RCSID("$arla: rx_clock.c,v 1.15 2000/11/26 22:29:28 lha Exp $");
@


