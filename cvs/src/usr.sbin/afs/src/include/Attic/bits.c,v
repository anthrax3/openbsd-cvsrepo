head	1.7;
access;
symbols
	OPENBSD_5_2:1.6.0.38
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.36
	OPENBSD_5_0:1.6.0.34
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.32
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.30
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.26
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2012.08.23.06.21.51;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.06.19.09.04;	author pvalchev;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.40.41;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.40.54;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.10;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.52.59;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.52.59;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.27;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.03;	author hin;	state Exp;
branches;
next	;


desc
@@


1.7
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1997, 1998 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. All advertising materials mentioning features or use of this software 
 *    must display the following acknowledgement: 
 *      This product includes software developed by Kungliga Tekniska 
 *      Högskolan and its contributors. 
 *
 * 4. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
RCSID("$arla: bits.c,v 1.7 2002/02/07 17:59:15 lha Exp $");
#endif
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#ifndef HAVE_STRUPR
static void
strupr(char *s)
{
    unsigned char *p = (unsigned char *)s;
    while(*p){
	if(islower(*p))
	    *p = toupper(*p);
	p++;
    }	
}
#endif

#define BITSIZE(TYPE)						\
{								\
    int b = 0; TYPE x = 1, zero = 0; char *pre = "u";		\
    char tmp[128], tmp2[128];					\
    while(x){ x <<= 1; b++; if(x < zero) pre=""; }		\
    if(b >= len){						\
        int tabs;						\
	snprintf(tmp, sizeof(tmp), "%sint%d_t" , pre, len);	\
	snprintf(tmp2, sizeof(tmp2), "typedef %s %s;", #TYPE, tmp);	\
	strupr(tmp);						\
	tabs = 5 - strlen(tmp2) / 8;				\
        fprintf(f, "%s", tmp2);					\
	while(tabs-- > 0) fprintf(f, "\t");			\
	fprintf(f, "/* %2d bits */\n", b);			\
        return;                                                 \
    }								\
}

#ifndef HAVE___ATTRIBUTE__
#define __attribute__(x)
#endif

static void __attribute__ ((unused))
try_signed(FILE *f, int len)
{
    BITSIZE(signed char);
    BITSIZE(short);
    BITSIZE(int);
    BITSIZE(long);
#ifdef HAVE_LONG_LONG
    BITSIZE(long long);
#endif
    fprintf(f, "/* There is no %d bit type */\n", len);
}

static void __attribute__ ((unused))
try_unsigned(FILE *f, int len)
{
    BITSIZE(unsigned char);
    BITSIZE(unsigned short);
    BITSIZE(unsigned int);
    BITSIZE(unsigned long);
#ifdef HAVE_LONG_LONG
    BITSIZE(unsigned long long);
#endif
    fprintf(f, "/* There is no %d bit type */\n", len);
}

static int __attribute__ ((unused))
print_bt(FILE *f, int flag)
{
    if(flag == 0){
	fprintf(f, "/* For compatibility with various type definitions */\n");
	fprintf(f, "#ifndef __BIT_TYPES_DEFINED__\n");
	fprintf(f, "#define __BIT_TYPES_DEFINED__\n");
	fprintf(f, "\n");
    }
    return 1;
}

int main(int argc, char **argv)
{
    FILE *f;
    int flag;
    char *fn, *hb;
    
    if(argc < 2){
	fn = "bits.h";
	hb = "__BITS_H__";
	f = stdout;
    } else {
	char *p;
	fn = argv[1];
	asprintf(&hb, "__%s__", fn);
	for(p = hb; *p; p++){
	    if(!isalnum((int)*p))
		*p = '_';
	}
	f = fopen(argv[1], "w");
    }
    fprintf(f, "/* %s -- this file was generated for %s by\n", fn, HOST);
    fprintf(f, "   %*s    %s */\n\n", strlen(fn), "", 
	    "$arla: bits.c,v 1.7 2002/02/07 17:59:15 lha Exp $");
    fprintf(f, "#ifndef %s\n", hb);
    fprintf(f, "#define %s\n", hb);
    fprintf(f, "\n");
#ifdef HAVE_SYS_TYPES_H
    fprintf(f, "#include <sys/types.h>\n");
#endif
#ifdef HAVE_STDINT_H
    fprintf(f, "#include <stdint.h>\n");
#endif
#ifdef HAVE_SYS_BITYPES_H
    fprintf(f, "#include <sys/bitypes.h>\n");
#endif
#ifdef HAVE_NETINET_IN6_MACHTYPES_H
    fprintf(f, "#include <netinet/in6_machtypes.h>\n");
#endif
#ifdef HAVE_KTYPES_H
    fprintf(f, "#include <ktypes.h>\n");
#endif
    fprintf(f, "\n");

    flag = 0;
#ifndef HAVE_INT8_T
    flag = print_bt(f, flag);
    try_signed (f, 8);
#endif /* HAVE_INT8_T */
#ifndef HAVE_INT16_T
    flag = print_bt(f, flag);
    try_signed (f, 16);
#endif /* HAVE_INT16_T */
#ifndef HAVE_INT32_T
    flag = print_bt(f, flag);
    try_signed (f, 32);
#endif /* HAVE_INT32_T */
#if 0
#ifndef HAVE_INT64_T
    flag = print_bt(f, flag);
    try_signed (f, 64);
#endif /* HAVE_INT64_T */
#endif

#ifndef HAVE_UINT8_T
    flag = print_bt(f, flag);
    try_unsigned (f, 8);
#endif /* HAVE_INT8_T */
#ifndef HAVE_UINT16_T
    flag = print_bt(f, flag);
    try_unsigned (f, 16);
#endif /* HAVE_UINT16_T */
#ifndef HAVE_UINT32_T
    flag = print_bt(f, flag);
    try_unsigned (f, 32);
#endif /* HAVE_UINT32_T */
#if 0
#ifndef HAVE_UINT64_T
    flag = print_bt(f, flag);
    try_unsigned (f, 64);
#endif /* HAVE_UINT64_T */
#endif

    if(flag){
	fprintf(f, "\n");
	fprintf(f, "#endif /* __BIT_TYPES_DEFINED__ */\n\n");
    }
    fprintf(f, "#endif /* %s */\n", hb);
    return 0;
}
@


1.6
log
@Merge
@
text
@@


1.5
log
@strcpy/strcat/sprintf cleanups; ok krw deraadt
@
text
@d41 1
a41 1
RCSID("$KTH: bits.c,v 1.6 1998/12/20 15:55:29 assar Exp $");
d63 1
a63 1
    int b = 0; TYPE x = 1, zero = 0; char *pre = "u_";		\
d143 1
a143 1
	    "$KTH: bits.c,v 1.6 1998/12/20 15:55:29 assar Exp $");
d150 2
a151 2
#ifdef HAVE_INTTYPES_H
    fprintf(f, "#include <inttypes.h>\n");
d184 1
a184 1
#ifndef HAVE_U_INT8_T
d188 1
a188 1
#ifndef HAVE_U_INT16_T
d191 2
a192 2
#endif /* HAVE_U_INT16_T */
#ifndef HAVE_U_INT32_T
d195 1
a195 1
#endif /* HAVE_U_INT32_T */
d197 1
a197 1
#ifndef HAVE_U_INT64_T
d200 1
a200 1
#endif /* HAVE_U_INT64_T */
@


1.4
log
@merge
@
text
@d68 2
a69 2
	sprintf(tmp, "%sint%d_t" , pre, len);			\
	sprintf(tmp2, "typedef %s %s;", #TYPE, tmp);		\
d134 1
a134 2
	hb = malloc(strlen(fn) + 5);
	sprintf(hb, "__%s__", fn);
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d41 1
a41 1
RCSID("$Id: bits.c,v 1.6 1998/12/20 15:55:29 assar Exp $");
d144 1
a144 1
	    "$Id: bits.c,v 1.6 1998/12/20 15:55:29 assar Exp $");
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@a0 1
/*	$OpenBSD$	*/
d41 1
a41 1
RCSID("$KTH: bits.c,v 1.6 1998/12/20 15:55:29 assar Exp $");
d144 1
a144 1
	    "$KTH: bits.c,v 1.6 1998/12/20 15:55:29 assar Exp $");
@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
RCSID("$KTH: bits.c,v 1.4 1998/03/28 09:24:30 lha Exp $");
d53 1
a53 1
    char *p = s;
d55 2
a56 2
	if(islower((int)*p))
	    *p = toupper((int)*p);
d80 5
a84 1
static void
d97 1
a97 1
static void
d110 1
a110 1
static int
d145 1
a145 1
	    "$KTH: bits.c,v 1.4 1998/03/28 09:24:30 lha Exp $");
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d42 1
a42 1
RCSID("$KTH: bits.c,v 1.6 1998/12/20 15:55:29 assar Exp $");
d53 1
a53 1
    unsigned char *p = (unsigned char *)s;
d55 2
a56 2
	if(islower(*p))
	    *p = toupper(*p);
d80 1
a80 5
#ifndef HAVE___ATTRIBUTE__
#define __attribute__(x)
#endif

static void __attribute__ ((unused))
d93 1
a93 1
static void __attribute__ ((unused))
d106 1
a106 1
static int __attribute__ ((unused))
d141 1
a141 1
	    "$KTH: bits.c,v 1.6 1998/12/20 15:55:29 assar Exp $");
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d41 1
a41 1
RCSID("$arla: bits.c,v 1.7 2002/02/07 17:59:15 lha Exp $");
d63 1
a63 1
    int b = 0; TYPE x = 1, zero = 0; char *pre = "u";		\
d144 1
a144 1
	    "$arla: bits.c,v 1.7 2002/02/07 17:59:15 lha Exp $");
d151 2
a152 2
#ifdef HAVE_STDINT_H
    fprintf(f, "#include <stdint.h>\n");
d185 1
a185 1
#ifndef HAVE_UINT8_T
d189 1
a189 1
#ifndef HAVE_UINT16_T
d192 2
a193 2
#endif /* HAVE_UINT16_T */
#ifndef HAVE_UINT32_T
d196 1
a196 1
#endif /* HAVE_UINT32_T */
d198 1
a198 1
#ifndef HAVE_UINT64_T
d201 1
a201 1
#endif /* HAVE_UINT64_T */
@


