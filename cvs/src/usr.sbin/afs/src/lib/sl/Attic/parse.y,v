head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.38
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.36
	OPENBSD_5_0:1.3.0.34
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.32
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.30
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.08.23.06.21.52;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2003.08.05.08.47.46;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.38.03;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.41.07;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.29;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.21.04;	author hin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@the afs src tree can go away
@
text
@%{
/*
 * Copyright (c) 1998 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
 */

#include "make_cmds.h"
RCSID("$arla: parse.y,v 1.2 2000/06/27 02:41:12 assar Exp $");

static void yyerror (char *s);

struct string_list* append_string(struct string_list*, char*);
void free_string_list(struct string_list *list);
unsigned string_to_flag(const char *);

/* This is for bison */

#if !defined(alloca) && !defined(HAVE_ALLOCA)
#define alloca(x) malloc(x)
#endif

%}

%union {
  char *string;
  unsigned number;
  struct string_list *list;
}

%token TABLE REQUEST UNKNOWN UNIMPLEMENTED END
%token <string> STRING
%type <number> flag flags
%type <list> aliases

%%

file		: /* */ 
		| statements
		;

statements	: statement
		| statements statement
		;

statement	: TABLE STRING ';'
		{
		    table_name = $2;
		}
		| REQUEST STRING ',' STRING ',' aliases ',' '(' flags ')' ';'
		{
		    add_command($2, $4, $6, $9);
		}
		| REQUEST STRING ',' STRING ',' aliases ';'
		{
		    add_command($2, $4, $6, 0);
		}
		| UNIMPLEMENTED STRING ',' STRING ',' aliases ';'
		{
		    free($2);
		    free($4);
		    free_string_list($6);
		}
		| UNKNOWN aliases ';'
		{
		    free_string_list($2);
		}
		| END ';'
		{
		    YYACCEPT;
		}
		;

aliases		: STRING
		{
		    $$ = append_string(NULL, $1);
		}
		| aliases ',' STRING
		{
		    $$ = append_string($1, $3);
		}
		;

flags		: flag
		{
		    $$ = $1;
		}
		| flags ',' flag
		{
		    $$ = $1 | $3;
		}
		;
flag		: STRING
		{
		    $$ = string_to_flag($1);
		    free($1);
		}
		;



%%

static void
yyerror (char *s)
{
    error_message ("%s\n", s);
}

struct string_list*
append_string(struct string_list *list, char *str)
{
    struct string_list *sl = malloc(sizeof(*sl));
    sl->string = str;
    sl->next = NULL;
    if(list) {
	*list->tail = sl;
	list->tail = &sl->next;
	return list;
    }
    sl->tail = &sl->next;
    return sl;
}

void
free_string_list(struct string_list *list)
{
    while(list) {
	struct string_list *sl = list->next;
	free(list->string);
	free(list);
	list = sl;
    }
}

unsigned
string_to_flag(const char *string)
{
    return 0;
}
@


1.3
log
@Merge
@
text
@@


1.2
log
@merge
@
text
@d36 1
a36 1
RCSID("$KTH: parse.y,v 1.2 2000/06/27 02:41:12 assar Exp $");
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d36 1
a36 1
RCSID("$Id: parse.y,v 1.2 2000/06/27 02:41:12 assar Exp $");
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d36 1
a36 1
RCSID("$KTH: parse.y,v 1.2 2000/06/27 02:41:12 assar Exp $");
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d36 1
a36 1
RCSID("$arla: parse.y,v 1.2 2000/06/27 02:41:12 assar Exp $");
@


