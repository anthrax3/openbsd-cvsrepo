head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.36
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.34
	OPENBSD_5_0:1.5.0.32
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.30
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.28
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.24
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.26
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.22
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.20
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.18
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.16
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.14
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.12
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.08.23.06.21.52;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.12.16.20.13.55;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.05.08.47.46;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.06.19.09.04;	author pvalchev;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.38.03;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.41.07;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.29;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.21.04;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1998 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
 */

#include "sl_locl.h"
#if defined(HAVE_COM_ERR_H)
#include <com_err.h>
#elif defined(HAVE_ET_COM_ERR_H)
#include <et/com_err.h>
#endif
#include "ss.h"

RCSID("$arla: ss.c,v 1.2 2000/06/17 03:14:59 assar Exp $");

struct ss_subst {
    char *name;
    char *version;
    char *info;
    ss_request_table *table;
};

static struct ss_subst subsystems[2];
static int num_subsystems;

int
ss_create_invocation(const char *subsystem, 
		     const char *version, 
		     const char *info, 
		     ss_request_table *table, 
		     int *code)
{
    struct ss_subst *ss;
    if(num_subsystems >= sizeof(subsystems) / sizeof(subsystems[0])) {
	*code = 17;
	return 0;
    }
    ss = &subsystems[num_subsystems];
    ss->name = subsystem ? strdup(subsystem) : NULL;
    ss->version = version ? strdup(version) : NULL;
    ss->info = info ? strdup(info) : NULL;
    ss->table = table;
    *code = 0;
    return num_subsystems++;
}

void
ss_error (int index, long code, const char *fmt, ...)
{
    va_list ap;
    va_start(ap, fmt);
    com_err_va (subsystems[index].name, code, fmt, ap);
    va_end(ap);
}

void
ss_perror (int index, long code, const char *msg)
{
    ss_error(index, code, "%s", msg);
}

int
ss_execute_command(int index, char **argv)
{
    int argc = 0;
    while(argv[argc++]);
    sl_command(subsystems[index].table, argc, argv);
    return 0;
}

int
ss_execute_line (int index, const char *line)
{
    char *buf = strdup(line);
    int argc;
    char **argv;
    
    sl_make_argv(buf, &argc, &argv);
    sl_command(subsystems[index].table, argc, argv);
    free(buf);
    return 0;
}

int
ss_listen (int index)
{
    char *prompt;

    if (asprintf(&prompt, "%s: ", subsystems[index].name) == -1) {
	errx(-1, "ss_listen: malloc failed\n");
    }
    sl_loop(subsystems[index].table, prompt);
    free(prompt);
    return 0;
}

int
ss_list_requests(int argc, char **argv /* , int index, void *info */)
{
    sl_help(subsystems[0 /* index */].table, argc, argv);
    return 0;
}

int
ss_quit(int argc, char **argv)
{
    return 1;
}
@


1.5
log
@afs cleanup, realloc strings, abort, etc.
testing by beck, hin, jose, fries. ok deraadt@@
@
text
@@


1.4
log
@Merge
@
text
@d118 1
a118 1
	abort();
@


1.3
log
@strcpy/strcat/sprintf cleanups; ok krw deraadt
@
text
@d42 1
a42 1
RCSID("$KTH: ss.c,v 1.2 2000/06/17 03:14:59 assar Exp $");
@


1.2
log
@merge
@
text
@d115 3
a117 2
    char *prompt = malloc(strlen(subsystems[index].name) + 3);
    if(prompt == NULL) {
a119 2
    strcpy(prompt, subsystems[index].name);
    strcat(prompt, ": ");
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d42 1
a42 1
RCSID("$Id: ss.c,v 1.2 2000/06/17 03:14:59 assar Exp $");
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d42 1
a42 1
RCSID("$KTH: ss.c,v 1.2 2000/06/17 03:14:59 assar Exp $");
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d42 1
a42 1
RCSID("$arla: ss.c,v 1.2 2000/06/17 03:14:59 assar Exp $");
@


