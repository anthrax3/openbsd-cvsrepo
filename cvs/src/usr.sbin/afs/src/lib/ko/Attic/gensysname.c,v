head	1.10;
access;
symbols
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.8.0.30
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.28
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.24
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.26
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.22
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.20
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.18
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.16
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.14
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2012.08.23.06.21.51;	author deraadt;	state dead;
branches;
next	1.9;

1.9
date	2011.07.04.20.09.13;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.16.20.13.55;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.05.08.47.46;	author hin;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.06.19.09.04;	author pvalchev;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.07.18.45.48;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.38.03;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.40.57;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.11;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.00;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.00;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.28;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.03;	author hin;	state Exp;
branches;
next	;


desc
@@


1.10
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1998 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "ko_locl.h"
#include <fnmatch.h>
#include <getarg.h>

RCSID("$arla: gensysname.c,v 1.39 2003/04/09 02:39:31 lha Exp $");

typedef int (*test_sysname)(void);
typedef void (*gen_sysname)(char*, size_t, const char*, 
			    const char*, const char*);

struct sysname {
    const char *sysname;
    const char *cpu;
    const char *vendor;
    const char *os;
    test_sysname atest;
    gen_sysname gen;
};

enum { OUTPUT_C, OUTPUT_TEXT, OUTPUT_MACHINE } output = OUTPUT_TEXT;

/*
 *
 * The test is for hosts that can not be matched with config.guess
 * (like a linux 1.2.x/elf)
 *
 */

static int
linux_glibc_test(void)
{
    int ret;
    struct stat sb;

    ret = stat("/lib/libc.so.6", &sb);
    return ret == 0;
}

static void
osf_gen_sysname(char *buf, 
		size_t len, 
		const char *cpu, 
		const char *vendor, 
		const char *os)
{
    int minor, major, nargs;
    char patch;
    nargs = sscanf(os, "osf%d.%d%c", &major, &minor, &patch);
    if(nargs == 3) {
	snprintf(buf, len, "alpha_osf%d%d%c", major, minor, patch);
    } else if(nargs == 2) {
	snprintf(buf, len, "alpha_osf%d%d", major, minor);
    } else {
	snprintf(buf, len, "alpha_osf");
    }
}


/*
 * generic function for generating sysnames for *BSD systems.  the
 * sysname is written into `buf' (of length `len') based on `cpu,
 * vender, os'.
 */

#ifdef HAVE_SYS_UTSNAME_H
static void
bsd_gen_sysname(char *buf, 
		size_t len, 
		const char *cpu, 
		const char *vendor, 
		const char *os)
{
    struct utsname uts;
    int major, minor;
    const char *name;
    if(uname(&uts) < 0) {
	warn("uname");
	strlcpy(buf, "bsdhost", len);
	return;
    }
    if(strcmp(uts.sysname, "FreeBSD") == 0)
	name = "fbsd";
    else if(strcmp(uts.sysname, "NetBSD") == 0)
	name = "nbsd";
    else if(strcmp(uts.sysname, "OpenBSD") == 0)
	name = "obsd";
    else if(strcmp(uts.sysname, "BSD/OS") == 0)
	name = "bsdi";
    else
	name = "bsd";
    /* this is perhaps a bit oversimplified */
    if(sscanf(uts.release, "%d.%d", &major, &minor) == 2)
	snprintf(buf, len, "%s_%s%d%d", uts.machine, name, major, minor);
    else
	snprintf(buf, len, "%s_%s", uts.machine, name);
}
#endif

/* 
 * HELP:
 *
 * Add your sysname to the struct below, it's searched from top
 * to bottom, first match wins.
 *
 * ? will match any character
 * * will match any sequence of characters
 */

struct sysname sysnames[] = {
    { "sparc_linux6", "sparc*", "*", "linux-gnu*", &linux_glibc_test },
    { "sparc_linux5", "sparc*", "*", "linux-gnu*", NULL },
    { "i386_linux6", "i*86*", "*pc*", "linux-gnu*", &linux_glibc_test },
    { "i386_linux5", "i*86*", "*pc*", "linux-gnu*", NULL },
    { "alpha_linux6", "alpha", "*", "linux-gnu*", &linux_glibc_test },
    { "alpha_linux5", "alpha", "*", "linux-gnu*", NULL },
    { "alpha_dux40", "alpha*", "*", "osf4.0*", NULL},  
    { "ppc_linux22",  "powerpc", "*", "linux-gnu*", NULL },
    { "sun4x_54",     "sparc*", "*", "solaris2.4*", NULL },
    { "sun4x_551",    "sparc*", "*", "solaris2.5.1*", NULL },
    { "sun4x_55",     "sparc*", "*", "solaris2.5*", NULL },
    { "sun4x_56",     "sparc*", "*", "solaris2.6*", NULL },
    { "sun4x_57",     "sparc*", "*", "solaris2.7*", NULL },
    { "sun4x_58",     "sparc*", "*", "solaris2.8*", NULL }, 
    { "sunx86_54",    "i386", "*", "solaris2.4*", NULL },
    { "sunx86_551",   "i386", "*", "solaris2.5.1*", NULL },
    { "sunx86_55",    "i386", "*", "solaris2.5*", NULL },
    { "sunx86_56",    "i386", "*", "solaris2.6*", NULL },
    { "sunx86_57",    "i386", "*", "solaris2.7*", NULL },
    { "i386_nt35",    "i*86*", "*", "cygwin*", NULL },
    { "ppc_macosx",   "powerpc", "*", "darwin*", NULL },
    { "",	      "alpha*",    "*", "*osf*", NULL, &osf_gen_sysname },
    /* catch-all bsd entry */
#ifdef HAVE_SYS_UTSNAME_H
    { "",	      "*",    "*", "*bsd*",       NULL, &bsd_gen_sysname },
#endif
    {NULL}
};

static void
printsysname(const char *sysname)
{
    switch (output) {
    case OUTPUT_TEXT:
	printf("%s\n", sysname);
	break;
    case OUTPUT_MACHINE:
	printf("%s\n", sysname);
	break;
    case OUTPUT_C:
	printf("/* Generated from $arla: gensysname.c,v 1.39 2003/04/09 02:39:31 lha Exp $ */\n\n");
	printf("#ifdef HAVE_CONFIG_H\n#include <config.h>\n#endif\n");
	printf("#include <ko.h>\n\n");
	printf("const char *arla_getsysname(void) { return \"%s\" ; }\n", 
	       sysname);
	break;
    default:
	errx(-1, "printsysname: unknown output type %d\n", output);
	/* NOTREACHED */
    }
    
}

static int machineflag = 0;
static int ccodeflag = 0;
static int humanflag = 0;
static int helpflag = 0;
static int allflag = 0;
static int sysnameflag = 0;
static int versionflag = 0;

struct getargs args[] = {
    {"machine", 'm', arg_flag,    &machineflag, "machine output", NULL},
    {"human",   'h', arg_flag,    &humanflag,   "human", NULL},
    {"ccode",   'c', arg_flag,    &ccodeflag, "", NULL},
    {"sysname",	's', arg_flag,    &sysnameflag, NULL, NULL},
    {"version", 'v', arg_flag,    &versionflag, NULL, NULL},
    {"all",     'a', arg_flag,    &allflag, NULL, NULL},
    {"help",	0,   arg_flag,    &helpflag, NULL, NULL},
};

static void
usage(void)
{
    arg_printusage(args, sizeof(args)/sizeof(args[0]), "[sysname]", 0);
    exit(1);
    
}

static void
try_parsing (int *argc, char ***argv, const char **var)
{
    char *p;

    if (*argc > 0) {
	p = strchr (**argv, '-');

	*var = **argv;

	if (p != NULL) {
	    *p = '\0';
	    **argv = p + 1;
	} else {
	    --*argc;
	    ++*argv;
	}
    }
}

int 
main(int argc, char **argv)
{
    const char *cpu    = ARLACPU;
    const char *vendor = ARLAVENDOR;
    const char *os     = ARLAOS;
    struct sysname *sysname = sysnames;
    int found = 0;
    int optind = 0;

    if (getarg (args, sizeof(args)/sizeof(args[0]), argc, argv, &optind)) 
	usage();

    argc -= optind;
    argv += optind;

    if (helpflag)
	usage();

    if (versionflag)
	errx(0, "Version: $arla: gensysname.c,v 1.39 2003/04/09 02:39:31 lha Exp $");

    if (ccodeflag)
	output = OUTPUT_C;
    if (humanflag)
	output = OUTPUT_TEXT;
    if (machineflag)
	output = OUTPUT_MACHINE;

    if (sysnameflag) {
	printf ("%s-%s-%s\n", cpu, vendor, os);
	return 0;
    }

    if (allflag) {
	while (sysname->sysname) {
	    printf("%-20s == %s %s %s\n",
		   sysname->sysname,
		   sysname->cpu,
		   sysname->vendor,
		   sysname->os);
	    sysname++;
	}
	return 0;
    }
    
    try_parsing (&argc, &argv, &cpu);
    try_parsing (&argc, &argv, &vendor);
    try_parsing (&argc, &argv, &os);

    while (sysname->sysname && !found) {
	char sn[64];
	if (!fnmatch(sysname->cpu, cpu, 0) &&
	    !fnmatch(sysname->vendor, vendor, 0) &&
	    !fnmatch(sysname->os, os, 0) &&
	    (sysname->atest == NULL || ((*(sysname->atest))()))) {
	    
	    found = 1;
	    if(sysname->gen != NULL)
		(*sysname->gen)(sn, sizeof(sn), cpu, vendor, os);
	    else {
		strlcpy(sn, sysname->sysname, sizeof(sn));
	    }
	    printsysname(sn);   
	}
	sysname++;
    }

    /* XXX need some better here? */
    if (!found) {
	fprintf(stderr, "our host was not found using generic\n"); 
	printsysname("arlahost");
    }
    
    return 0;
}
@


1.9
log
@fix incorrect use of NULL, from 1.45 of upstream
ok miod@@
@
text
@@


1.8
log
@afs cleanup, realloc strings, abort, etc.
testing by beck, hin, jose, fries. ok deraadt@@
@
text
@d217 1
a217 1
    arg_printusage(args, NULL, "[sysname]", 0);
@


1.7
log
@Merge
@
text
@d190 2
a191 1
	abort();
@


1.6
log
@strcpy/strcat/sprintf cleanups; ok krw deraadt
@
text
@d36 1
d38 1
a38 1
RCSID("$KTH: gensysname.c,v 1.35.2.1 2001/09/15 13:33:04 mattiasa Exp $");
a78 1

a88 1

d156 1
d183 1
a183 1
	printf("/* Generated from $KTH: gensysname.c,v 1.35.2.1 2001/09/15 13:33:04 mattiasa Exp $ */\n\n");
d203 8
a210 9
struct agetargs args[] = {
    {"machine", 'm', aarg_flag,    &machineflag, "machine output", NULL},
    {"human",   'h', aarg_flag,    &humanflag,   "human", NULL},
    {"ccode",   'c', aarg_flag,    &ccodeflag, "", NULL},
    {"sysname",	's', aarg_flag,    &sysnameflag, NULL, NULL},
    {"version", 'v', aarg_flag,    &versionflag, NULL, NULL},
    {"all",     'a', aarg_flag,    &allflag, NULL, NULL},
    {"help",	0,   aarg_flag,    &helpflag, NULL, NULL},
    {NULL,      0, aarg_end, NULL}
d216 1
a216 1
    aarg_printusage(args, NULL, "[sysname]", 0);
d251 1
a251 1
    if (agetarg (args, argc, argv, &optind, AARG_GNUSTYLE)) 
d261 1
a261 1
	errx(0, "Version: $KTH: gensysname.c,v 1.35.2.1 2001/09/15 13:33:04 mattiasa Exp $");
@


1.5
log
@no more set_progname
@
text
@d112 1
a112 1
	strcpy(buf, "bsdhost");
@


1.4
log
@merge
@
text
@a251 2
    set_progname (argv[0]);

@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d35 1
d37 1
a37 1
RCSID("$Id: gensysname.c,v 1.27 2000/08/16 02:31:15 lha Exp $");
d71 22
d144 2
a145 2
    { "sparc_linux6", "sparc", "*", "linux-gnu*", &linux_glibc_test },
    { "sparc_linux5", "sparc", "*", "linux-gnu*", NULL },
d150 1
d152 5
a156 6
    { "alpha_dux40",  "alpha", "*", "osf4.0*", NULL },
    { "sun4x_54",     "sparc", "*", "solaris2.4*", NULL },
    { "sun4x_551",    "sparc", "*", "solaris2.5.1*", NULL },
    { "sun4x_55",     "sparc", "*", "solaris2.5*", NULL },
    { "sun4x_56",     "sparc", "*", "solaris2.6*", NULL },
    { "sun4x_57",     "sparc", "*", "solaris2.7*", NULL },
d163 3
a166 1
    /* catch-all bsd entry */
d183 2
a184 1
	printf("/* Generated from $Id: gensysname.c,v 1.27 2000/08/16 02:31:15 lha Exp $ */\n\n");
d203 9
a211 9
struct getargs args[] = {
    {"machine", 'm', arg_flag,    &machineflag, "machine output", NULL},
    {"human",   'h', arg_flag,    &humanflag,   "human", NULL},
    {"ccode",   'c', arg_flag,    &ccodeflag, "", NULL},
    {"sysname",	's', arg_flag,    &sysnameflag, NULL, NULL},
    {"version", 'v', arg_flag,    &versionflag, NULL, NULL},
    {"all",     'a', arg_flag,    &allflag, NULL, NULL},
    {"help",	0,   arg_flag,    &helpflag, NULL, NULL},
    {NULL,      0, arg_end, NULL}
d217 1
a217 1
    arg_printusage(args, NULL, "[sysname]", 0);
d254 1
a254 1
    if (getarg (args, argc, argv, &optind, ARG_GNUSTYLE)) 
d264 1
a264 1
	errx(0, "Version: $Id: gensysname.c,v 1.27 2000/08/16 02:31:15 lha Exp $");
d296 3
a298 3
	if (!strmatch(sysname->cpu, cpu) &&
	    !strmatch(sysname->vendor, vendor) &&
	    !strmatch(sysname->os, os) &&
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@a0 1
/*	$OpenBSD$	*/
d2 1
a2 1
 * Copyright (c) 1998, 1999 Kungliga Tekniska Högskolan
d41 1
a41 1
RCSID("$KTH: gensysname.c,v 1.24 1999/01/04 23:21:29 lha Exp $");
d58 1
a58 5
/* 
 * HELP:
 *
 * Add your sysname to the struct below, it's searched from top
 * to bottom, first match wins.
a62 2
 * ? will match any character
 * * will match any sequence of characters
d75 6
d115 10
d132 1
d163 2
a164 1
	printf("/* Generated from $KTH: gensysname.c,v 1.24 1999/01/04 23:21:29 lha Exp $ */\n");
d243 1
a243 1
	errx(0, "Version: $KTH: gensysname.c,v 1.24 1999/01/04 23:21:29 lha Exp $");
d284 1
a284 2
		strncpy(sn, sysname->sysname, sizeof(sn));
		sn[sizeof(sn) - 1] = '\0';
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Copyright (c) 1998 Kungliga Tekniska Högskolan
d42 1
a42 1
RCSID("$KTH: gensysname.c,v 1.13 1998/08/23 22:50:24 assar Exp $");
d45 2
d54 1
d57 1
a57 1
enum { O_C, O_TEXT, O_MACHINE } output = O_TEXT;
d82 34
a116 2
    { "sparc_nbsd13", "sparc", "*", "netbsd1.3*", NULL },
    { "sparc_obsd23", "sparc", "*", "openbsd2.3*", NULL },
a118 2
    { "i386_obsd23", "i*86*", "*", "openbsd2.3*", NULL },
    { "i386_fbsd30", "i*86*", "*", "freebsd3.0*", NULL },
d123 1
d134 5
d146 1
a146 1
    case O_TEXT:
d149 1
a149 1
    case O_MACHINE:
d152 2
a153 2
    case O_C:
	printf("/* Generated from $KTH: gensysname.c,v 1.13 1998/08/23 22:50:24 assar Exp $ */\n");
d185 1
a185 1
    arg_printusage(args, NULL, "[sysname]");
d232 1
a232 1
	errx(0, "Version: $KTH: gensysname.c,v 1.13 1998/08/23 22:50:24 assar Exp $");
d235 1
a235 1
	output = O_C;
d237 1
a237 1
	output = O_TEXT;
d239 1
a239 1
	output = O_MACHINE;
d263 1
d270 7
a276 1
	    printsysname(sysname->sysname);   
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1998 - 2000 Kungliga Tekniska Högskolan
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
a40 1
#include <fnmatch.h>
d42 1
a42 1
RCSID("$KTH: gensysname.c,v 1.35.2.1 2001/09/15 13:33:04 mattiasa Exp $");
a44 2
typedef void (*gen_sysname)(char*, size_t, const char*, 
			    const char*, const char*);
a51 1
    gen_sysname gen;
d54 1
a54 1
enum { OUTPUT_C, OUTPUT_TEXT, OUTPUT_MACHINE } output = OUTPUT_TEXT;
d56 5
a60 1
/*
d65 2
a78 72
static void
osf_gen_sysname(char *buf, 
		size_t len, 
		const char *cpu, 
		const char *vendor, 
		const char *os)
{

    int minor, major, nargs;
    char patch;
    nargs = sscanf(os, "osf%d.%d%c", &major, &minor, &patch);
    if(nargs == 3) {
	snprintf(buf, len, "alpha_osf%d%d%c", major, minor, patch);
    } else if(nargs == 2) {
	snprintf(buf, len, "alpha_osf%d%d", major, minor);
    } else {
	snprintf(buf, len, "alpha_osf");
    }

}


/*
 * generic function for generating sysnames for *BSD systems.  the
 * sysname is written into `buf' (of length `len') based on `cpu,
 * vender, os'.
 */

#ifdef HAVE_SYS_UTSNAME_H
static void
bsd_gen_sysname(char *buf, 
		size_t len, 
		const char *cpu, 
		const char *vendor, 
		const char *os)
{
    struct utsname uts;
    int major, minor;
    const char *name;
    if(uname(&uts) < 0) {
	warn("uname");
	strcpy(buf, "bsdhost");
	return;
    }
    if(strcmp(uts.sysname, "FreeBSD") == 0)
	name = "fbsd";
    else if(strcmp(uts.sysname, "NetBSD") == 0)
	name = "nbsd";
    else if(strcmp(uts.sysname, "OpenBSD") == 0)
	name = "obsd";
    else if(strcmp(uts.sysname, "BSD/OS") == 0)
	name = "bsdi";
    else
	name = "bsd";
    /* this is perhaps a bit oversimplified */
    if(sscanf(uts.release, "%d.%d", &major, &minor) == 2)
	snprintf(buf, len, "%s_%s%d%d", uts.machine, name, major, minor);
    else
	snprintf(buf, len, "%s_%s", uts.machine, name);
}
#endif

/* 
 * HELP:
 *
 * Add your sysname to the struct below, it's searched from top
 * to bottom, first match wins.
 *
 * ? will match any character
 * * will match any sequence of characters
 */

d80 6
a85 2
    { "sparc_linux6", "sparc*", "*", "linux-gnu*", &linux_glibc_test },
    { "sparc_linux5", "sparc*", "*", "linux-gnu*", NULL },
d90 5
a94 7
    { "alpha_dux40", "alpha*", "*", "osf4.0*", NULL},  
    { "ppc_linux22",  "powerpc", "*", "linux-gnu*", NULL },
    { "sun4x_54",     "sparc*", "*", "solaris2.4*", NULL },
    { "sun4x_551",    "sparc*", "*", "solaris2.5.1*", NULL },
    { "sun4x_55",     "sparc*", "*", "solaris2.5*", NULL },
    { "sun4x_56",     "sparc*", "*", "solaris2.6*", NULL },
    { "sun4x_57",     "sparc*", "*", "solaris2.7*", NULL },
a99 7
    { "i386_nt35",    "i*86*", "*", "cygwin*", NULL },
    { "ppc_macosx",   "powerpc", "*", "darwin*", NULL },
    { "",	      "alpha*",    "*", "*osf*", NULL, &osf_gen_sysname },
    /* catch-all bsd entry */
#ifdef HAVE_SYS_UTSNAME_H
    { "",	      "*",    "*", "*bsd*",       NULL, &bsd_gen_sysname },
#endif
d107 1
a107 1
    case OUTPUT_TEXT:
d110 1
a110 1
    case OUTPUT_MACHINE:
d113 2
a114 4
    case OUTPUT_C:
	printf("/* Generated from $KTH: gensysname.c,v 1.35.2.1 2001/09/15 13:33:04 mattiasa Exp $ */\n\n");
	printf("#ifdef HAVE_CONFIG_H\n#include <config.h>\n#endif\n");
	printf("#include <ko.h>\n\n");
d132 9
a140 9
struct agetargs args[] = {
    {"machine", 'm', aarg_flag,    &machineflag, "machine output", NULL},
    {"human",   'h', aarg_flag,    &humanflag,   "human", NULL},
    {"ccode",   'c', aarg_flag,    &ccodeflag, "", NULL},
    {"sysname",	's', aarg_flag,    &sysnameflag, NULL, NULL},
    {"version", 'v', aarg_flag,    &versionflag, NULL, NULL},
    {"all",     'a', aarg_flag,    &allflag, NULL, NULL},
    {"help",	0,   aarg_flag,    &helpflag, NULL, NULL},
    {NULL,      0, aarg_end, NULL}
d146 1
a146 1
    aarg_printusage(args, NULL, "[sysname]", 0);
d183 1
a183 1
    if (agetarg (args, argc, argv, &optind, AARG_GNUSTYLE)) 
d193 1
a193 1
	errx(0, "Version: $KTH: gensysname.c,v 1.35.2.1 2001/09/15 13:33:04 mattiasa Exp $");
d196 1
a196 1
	output = OUTPUT_C;
d198 1
a198 1
	output = OUTPUT_TEXT;
d200 1
a200 1
	output = OUTPUT_MACHINE;
d224 3
a226 4
	char sn[64];
	if (!fnmatch(sysname->cpu, cpu, 0) &&
	    !fnmatch(sysname->vendor, vendor, 0) &&
	    !fnmatch(sysname->os, os, 0) &&
d230 1
a230 6
	    if(sysname->gen != NULL)
		(*sysname->gen)(sn, sizeof(sn), cpu, vendor, os);
	    else {
		strlcpy(sn, sysname->sysname, sizeof(sn));
	    }
	    printsysname(sn);   
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@a35 1
#include <getarg.h>
d37 1
a37 1
RCSID("$arla: gensysname.c,v 1.39 2003/04/09 02:39:31 lha Exp $");
d78 1
d89 1
d112 1
a112 1
	strlcpy(buf, "bsdhost", len);
a156 1
    { "sun4x_58",     "sparc*", "*", "solaris2.8*", NULL }, 
d183 1
a183 1
	printf("/* Generated from $arla: gensysname.c,v 1.39 2003/04/09 02:39:31 lha Exp $ */\n\n");
d203 9
a211 8
struct getargs args[] = {
    {"machine", 'm', arg_flag,    &machineflag, "machine output", NULL},
    {"human",   'h', arg_flag,    &humanflag,   "human", NULL},
    {"ccode",   'c', arg_flag,    &ccodeflag, "", NULL},
    {"sysname",	's', arg_flag,    &sysnameflag, NULL, NULL},
    {"version", 'v', arg_flag,    &versionflag, NULL, NULL},
    {"all",     'a', arg_flag,    &allflag, NULL, NULL},
    {"help",	0,   arg_flag,    &helpflag, NULL, NULL},
d217 1
a217 1
    arg_printusage(args, NULL, "[sysname]", 0);
d254 1
a254 1
    if (getarg (args, sizeof(args)/sizeof(args[0]), argc, argv, &optind)) 
d264 1
a264 1
	errx(0, "Version: $arla: gensysname.c,v 1.39 2003/04/09 02:39:31 lha Exp $");
@


