head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.08.23.06.21.51;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.08.47.46;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.38.03;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.40.57;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.11;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.00;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.00;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.28;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.03;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1998 - 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* $arla: ko.h,v 1.36 2002/12/06 05:00:04 lha Exp $ */

#ifndef __KO_H
#define __KO_H 1

#include <sys/types.h>
#include <netinet/in.h>
#include <atypes.h>
#include <bool.h>
#include <log.h>

typedef int32_t koerr_t;

/*
 * Error messages
 */

const char    *koerr_gettext(koerr_t err);

/*
 * sysname
 */

const char *arla_getsysname(void);


/*
 * Cell managing
 */

typedef struct {
    const char *name;
    struct in_addr addr;
    time_t timeout;		/* timeout of address */
} cell_db_entry;

enum { SUID_CELL 	= 0x1,	/* if this is a suid cell */
       DYNROOT_CELL	= 0x2	/* cell should show up in dynroot */
};

enum { DYNROOT_CELLID = 0 };

enum { 
    DYNROOT_ALIAS_READONLY = 0,
    DYNROOT_ALIAS_READWRITE = 1
};

typedef struct {
    int32_t id;			/* Cell-ID */
    const char *name;		/* Domain-style name */
    const char *expl;		/* Longer name */
    unsigned ndbservers;	/* # of database servers */
    unsigned active_hosts;	/* # of active db servers */
    cell_db_entry *dbservers;	/* Database servers */
    unsigned flags;		/* Various flags, like SUID_CELL */
    time_t timeout;		/* when this entry expire */
    time_t poller_timeout;	/* delta time between poller calls */
} cell_entry;

void	      cell_init (int cellcachesize, Log_method *logm);

const cell_db_entry *cell_dbservers_by_id (int32_t cell, int *);

const char    *cell_findnamedbbyname (const char *cell);
const char    *cell_getthiscell (void);
const char    *cell_getcellbyhost(const char *host);
int32_t        cell_name2num (const char *cell);
const char    *cell_num2name (int32_t cell);
cell_entry    *cell_get_by_name (const char *cellname);
cell_entry    *cell_get_by_id (int32_t cell);
cell_entry    *cell_new (const char *name);
cell_entry    *cell_new_dynamic (const char *name);
Bool	       cell_dynroot (const cell_entry *c);
Bool           cell_issuid (const cell_entry *c);
Bool           cell_issuid_by_num (int32_t cell);
Bool           cell_issuid_by_name (const char *cell);
Bool	       cell_setsuid_by_num (int32_t cell);
int            cell_setthiscell (const char *cell);
int	       cell_foreach (int (*func) (const cell_entry *, void *), 
			     void *arg);
typedef	int    (*cell_alias_fn)(const char *, const char *, int, void *);
int	       cell_alias_foreach (cell_alias_fn, void *);
int	       cell_addalias(const char *, const char *, const char *);
const char    *cell_expand_cell (const char *cell);
unsigned long  cell_get_version(void);
Bool 	       cell_is_sanep (int cell);
const char **  cell_thesecells (void);
void 	       cell_print_cell (const cell_entry *c, FILE *out);
void	       cell_status (FILE *f);
time_t	       cell_get_poller_time(const cell_entry *c);
void	       cell_set_poller_time(cell_entry *c, time_t time);


/*
 * misc vl
 */

#include <vldb.h>
#include <volumeserver.h>

void vldb2vldbN (const vldbentry *old, nvldbentry *new);
void volintInfo2xvolintInfo (const volintInfo *old, xvolintInfo *new);

int volname_canonicalize (char *volname);
size_t volname_specific (const char *volname, int type,
			 char *buf, size_t buf_sz);
const char *volname_suffix (int type);

char *vol_getopname(int32_t op, char *str, size_t sz);
const char *volumetype_from_serverflag(int32_t flag);
const char *volumetype_from_volsertype(int32_t type);

/*
 * misc
 */

int
VenusFid_cmp (const VenusFid *fid1, const VenusFid *fid2);

#endif /* __KO_H */
@


1.5
log
@Merge
@
text
@@


1.4
log
@merge
@
text
@d34 1
a34 1
/* $KTH: ko.h,v 1.27.2.2 2001/05/06 22:40:49 ahltorp Exp $ */
d74 6
d90 1
d93 1
a93 1
void	      cell_init (int cellcachesize, Log_method *log);
d114 3
d121 4
a124 1
void 	       cell_print_cell (cell_entry *c, FILE *out);
d141 11
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d2 1
a2 1
 * Copyright (c) 1998 - 2000 Kungliga Tekniska Högskolan
d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d34 1
a34 1
/* $Id: ko.h,v 1.24 2000/08/06 15:59:00 lha Exp $ */
d43 1
d65 3
a67 2
     const char *name;
     struct in_addr addr;
d70 5
d80 1
d82 2
a83 1
    enum { NOSUID_CELL, SUID_CELL } suid_cell ; /* if this is a suid cell */
d86 1
a86 1
void           cell_init (int cellcachesize);
d99 2
a100 1
Bool           cell_issuid (cell_entry *c);
d111 2
d123 5
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@a0 1
/*	$OpenBSD$	*/
d2 1
a2 1
 * Copyright (c) 1998, 1999 Kungliga Tekniska Högskolan
d39 1
a39 1
/* $KTH: ko.h,v 1.16 1999/03/03 15:39:51 assar Exp $ */
d44 2
d74 1
a74 1
    int32_t id;		/* Cell-ID */
d84 1
a84 1
const cell_db_entry *cell_dbservers (int32_t cell, int *);
d94 1
d99 7
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * Copyright (c) 1998 Kungliga Tekniska Högskolan
d40 1
a40 1
/* $KTH: ko.h,v 1.10 1998/07/25 15:18:48 map Exp $ */
d46 1
d64 1
a64 1
 * Cell manglening
d67 14
d83 2
a84 2
struct in_addr cell_finddbserver (int32_t cell);
u_long         cell_listdbserver (int32_t cell, int index);
d90 7
d98 3
a100 6
/* NIY
int            cell_serverdown (struct in_addr addr);
int            cell_cellup_p (int32_t cell);
int            cell_probe(int32_t cell);
int            cell_probeserver(struct in_addr addr);
*/
d102 2
a103 1
#endif
d105 2
d108 1
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1998 - 2001 Kungliga Tekniska Högskolan
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d40 1
a40 1
/* $KTH: ko.h,v 1.27.2.2 2001/05/06 22:40:49 ahltorp Exp $ */
a44 2
#include <sys/types.h>
#include <netinet/in.h>
a45 2
#include <bool.h>
#include <log.h>
d63 1
a63 1
 * Cell managing
d66 1
a66 25
typedef struct {
    const char *name;
    struct in_addr addr;
    time_t timeout;		/* timeout of address */
} cell_db_entry;

enum { SUID_CELL 	= 0x1,	/* if this is a suid cell */
       DYNROOT_CELL	= 0x2	/* cell should show up in dynroot */
};


typedef struct {
    int32_t id;			/* Cell-ID */
    const char *name;		/* Domain-style name */
    const char *expl;		/* Longer name */
    unsigned ndbservers;	/* # of database servers */
    unsigned active_hosts;	/* # of active db servers */
    cell_db_entry *dbservers;	/* Database servers */
    unsigned flags;		/* Various flags, like SUID_CELL */
    time_t timeout;		/* when this entry expire */
} cell_entry;

void	      cell_init (int cellcachesize, Log_method *log);

const cell_db_entry *cell_dbservers_by_id (int32_t cell, int *);
d68 2
a74 22
cell_entry    *cell_get_by_name (const char *cellname);
cell_entry    *cell_get_by_id (int32_t cell);
cell_entry    *cell_new (const char *name);
cell_entry    *cell_new_dynamic (const char *name);
Bool	       cell_dynroot (const cell_entry *c);
Bool           cell_issuid (const cell_entry *c);
Bool           cell_issuid_by_num (int32_t cell);
Bool           cell_issuid_by_name (const char *cell);
Bool	       cell_setsuid_by_num (int32_t cell);
int            cell_setthiscell (const char *cell);
int	       cell_foreach (int (*func) (const cell_entry *, void *), 
			     void *arg);
const char    *cell_expand_cell (const char *cell);
unsigned long  cell_get_version(void);
Bool 	       cell_is_sanep (int cell);
const char **  cell_thesecells (void);
void 	       cell_print_cell (cell_entry *c, FILE *out);


/*
 * misc vl
 */
d76 6
a81 2
#include <vldb.h>
#include <volumeserver.h>
d83 1
a83 2
void vldb2vldbN (const vldbentry *old, nvldbentry *new);
void volintInfo2xvolintInfo (const volintInfo *old, xvolintInfo *new);
a84 4
int volname_canonicalize (char *volname);
size_t volname_specific (const char *volname, int type,
			 char *buf, size_t buf_sz);
const char *volname_suffix (int type);
a85 1
#endif /* __KO_H */
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d34 1
a34 1
/* $arla: ko.h,v 1.36 2002/12/06 05:00:04 lha Exp $ */
a73 6
enum { DYNROOT_CELLID = 0 };

enum { 
    DYNROOT_ALIAS_READONLY = 0,
    DYNROOT_ALIAS_READWRITE = 1
};
a83 1
    time_t poller_timeout;	/* delta time between poller calls */
d86 1
a86 1
void	      cell_init (int cellcachesize, Log_method *logm);
a106 3
typedef	int    (*cell_alias_fn)(const char *, const char *, int, void *);
int	       cell_alias_foreach (cell_alias_fn, void *);
int	       cell_addalias(const char *, const char *, const char *);
d111 1
a111 4
void 	       cell_print_cell (const cell_entry *c, FILE *out);
void	       cell_status (FILE *f);
time_t	       cell_get_poller_time(const cell_entry *c);
void	       cell_set_poller_time(cell_entry *c, time_t time);
a127 11

char *vol_getopname(int32_t op, char *str, size_t sz);
const char *volumetype_from_serverflag(int32_t flag);
const char *volumetype_from_volsertype(int32_t type);

/*
 * misc
 */

int
VenusFid_cmp (const VenusFid *fid1, const VenusFid *fid2);
@


