head	1.7;
access;
symbols
	OPENBSD_5_2:1.6.0.38
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.36
	OPENBSD_5_0:1.6.0.34
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.32
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.30
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.26
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.1.1.0.8
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.6
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2012.08.23.06.21.55;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.07.04.44.13;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.17.19.42.35;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.28.00;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.11.14.41.26;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.21;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.21;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.36;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.07;	author hin;	state Exp;
branches;
next	;


desc
@@


1.7
log
@the afs src tree can go away
@
text
@/* -*- C -*- */

/*
 * Copyright (c) 1995 - 2001, 2003 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* @@(#)$arla: rxkad.h,v 1.11 2003/06/10 16:15:39 lha Exp $ */

#ifndef __RXKAD_H
#define __RXKAD_H

#ifdef HAVE_STDS_H
#include <stds.h>
#endif

/* Krb4 tickets can't have a key version number of 256. This is used
 * as a magic kvno to indicate that this is really a krb5 ticket. The
 * real kvno can be retrieved from the cleartext portion of the
 * ticket. For more info see the Transarc header file rxkad.h.
 */
#define RXKAD_TKT_TYPE_KERBEROS_V5 256

/* Is this really large enough for a krb5 ticket? */
#define MAXKRB5TICKETLEN	1024
#define MAXKRB4TICKETLEN	1024

typedef char rxkad_level;
#define rxkad_clear 0		/* checksum some selected header fields */
#define rxkad_auth 1		/* rxkad_clear + protected packet length */
#define rxkad_crypt 2		/* rxkad_crypt + encrypt packet payload */
extern int rxkad_min_level;	/* enforce min level at client end */

extern int rxkad_EpochWasSet;

#ifndef __P
#define __P(x) x
#endif

struct rx_connection;

int32_t rxkad_GetServerInfo __P((struct rx_connection *con,
			       rxkad_level *level,
			       uint32_t *expiration,
			       char *name,
			       char *instance,
			       char *cell,
			       int32_t *kvno));

struct rx_securityClass *
rxkad_NewServerSecurityObject __P((/*rxkad_level*/ int min_level,
				   void *appl_data,
				   int (*get_key)(void *appl_data,
						  int kvno,
						  void *key),
				   int (*user_ok)(char *name,
						  char *inst,
						  char *realm,
						  int kvno)));

struct rx_securityClass *
rxkad_NewClientSecurityObject __P((/*rxkad_level*/ int level,
				   void *sessionkey,
				   int32_t kvno,
				   int ticketLen,
				   char *ticket));

#define RXKADINCONSISTENCY	(19270400L)
#define RXKADPACKETSHORT	(19270401L)
#define RXKADLEVELFAIL		(19270402L)
#define RXKADTICKETLEN		(19270403L)
#define RXKADOUTOFSEQUENCE	(19270404L)
#define RXKADNOAUTH		(19270405L)
#define RXKADBADKEY		(19270406L)
#define RXKADBADTICKET		(19270407L)
#define RXKADUNKNOWNKEY		(19270408L)
#define RXKADEXPIRED		(19270409L)
#define RXKADSEALEDINCON	(19270410L)
#define RXKADDATALEN		(19270411L)
#define RXKADILLEGALLEVEL	(19270412L)

/* The rest is backwards compatibility stuff that we don't use! */
#define MAXKTCTICKETLIFETIME (30*24*60*60)
#define MINKTCTICKETLEN (32)
#define MAXKTCTICKETLEN (344)
#define MAXKTCNAMELEN (64)
#define MAXKTCREALMLEN (64)

/*
#define MAXKTCNAMELEN		ANAME_SZ
#define MAXKTCREALMLEN		REALM_SZ
*/

#ifndef CLOCK_SKEW
#define CLOCK_SKEW (5*60)
#endif

#define KTC_TIME_UNCERTAINTY (CLOCK_SKEW)

/*
#define KTC_TIME_UNCERTAINTY	(60*15)
*/

struct ktc_encryptionKey {
  char data[8];
};

struct ktc_principal {
  char name[MAXKTCNAMELEN];
  char instance[MAXKTCNAMELEN];
  char cell[MAXKTCREALMLEN];
};

uint32_t life_to_time __P((uint32_t start, int life_));

int time_to_life __P((uint32_t start, uint32_t end));

int tkt_CheckTimes __P((int32_t begin, int32_t end, int32_t now));

int
tkt_MakeTicket __P((char *ticket,
		    int *ticketLen,
		    struct ktc_encryptionKey *key,
		    char *name, char *inst, char *cell,
		    uint32_t start, uint32_t end,
		    struct ktc_encryptionKey *sessionKey,
		    uint32_t host,
		    char *sname, char *sinst));

int
tkt_DecodeTicket __P((char *asecret,
		      int32_t ticketLen,
		      struct ktc_encryptionKey *key,
		      char *name,
		      char *inst,
		      char *cell,
		      char *sessionKey,
		      int32_t *host,
		      int32_t *start,
		      int32_t *end));

#endif /* __RXKAD_H */
@


1.6
log
@Merge
@
text
@@


1.5
log
@merge
@
text
@d4 1
a4 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
/* @@(#)$KTH: rxkad.h,v 1.8.2.1 2001/10/03 22:55:31 assar Exp $ */
d54 1
d68 3
a70 1
int32 rxkad_GetServerInfo __P((struct rx_connection *con,
d72 1
a72 1
			       u_int32 *expiration,
d76 1
a76 1
			       int32 *kvno));
d83 1
a83 1
						  des_cblock *key),
d92 1
a92 1
				   int32 kvno,
d142 1
a142 1
u_int32 life_to_time __P((u_int32 start, int life_));
d144 1
a144 1
int time_to_life __P((u_int32 start, u_int32 end));
d146 1
a146 1
int tkt_CheckTimes __P((int32 begin, int32 end, int32 now));
d153 1
a153 1
		    u_int32 start, u_int32 end,
d155 1
a155 1
		    u_int32 host,
d160 1
a160 1
		      int32 ticketLen,
d166 3
a168 3
		      int32 *host,
		      int32 *start,
		      int32 *end));
@


1.4
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d4 1
a4 1
 * Copyright (c) 1995, 1996, 1997 Kungliga Tekniska Högskolan
d19 1
a19 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d36 1
a36 1
/* @@(#)$Id: rxkad.h,v 1.3 2002/02/16 21:28:00 millert Exp $ */
d63 11
a73 7
int32 rxkad_GetServerInfo(struct rx_connection *con,
			  rxkad_level *level,
			  u_int32 *expiration,
			  char *name,
			  char *instance,
			  char *cell,
			  int32 *kvno);
d76 9
a84 9
rxkad_NewServerSecurityObject(/*rxkad_level*/ int min_level,
			      void *appl_data,
			      int (*get_key)(void *appl_data,
			      int kvno,
			      des_cblock *key),
			      int (*user_ok)(char *name,
					     char *inst,
					     char *realm,
					     int kvno));
d87 5
a91 5
rxkad_NewClientSecurityObject(/*rxkad_level*/ int level,
			      void *sessionkey,
			      int32 kvno,
			      int ticketLen,
			      char *ticket);
d119 4
d139 1
a139 1
u_int32 life_to_time(u_int32 start, int life_);
d141 1
a141 1
int time_to_life(u_int32 start, u_int32 end);
d143 1
a143 1
int tkt_CheckTimes(int32 begin, int32 end, int32 now);
d146 8
a153 8
tkt_MakeTicket(char *ticket,
	       int *ticketLen,
	       struct ktc_encryptionKey *key,
	       char *name, char *inst, char *cell,
	       u_int32 start, u_int32 end,
	       struct ktc_encryptionKey *sessionKey,
	       u_int32 host,
	       char *sname, char *sinst);
d156 10
a165 10
tkt_DecodeTicket(char *asecret,
		 int32 ticketLen,
		 struct ktc_encryptionKey *key,
		 char *name,
		 char *inst,
		 char *cell,
		 char *sessionKey,
		 int32 *host,
		 int32 *start,
		 int32 *end);
@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d41 1
a41 1
/* @@(#)$Id: rxkad.h,v 1.2 2000/09/11 14:41:26 art Exp $ */
d68 7
a74 11
#ifndef __P
#define __P(x) x
#endif

int32 rxkad_GetServerInfo __P((struct rx_connection *con,
			       rxkad_level *level,
			       u_int32 *expiration,
			       char *name,
			       char *instance,
			       char *cell,
			       int32 *kvno));
d77 9
a85 9
rxkad_NewServerSecurityObject __P((/*rxkad_level*/ int min_level,
				   void *appl_data,
				   int (*get_key)(void *appl_data,
						  int kvno,
						  des_cblock *key),
				   int (*user_ok)(char *name,
						  char *inst,
						  char *realm,
						  int kvno)));
d88 5
a92 5
rxkad_NewClientSecurityObject __P((/*rxkad_level*/ int level,
				   void *sessionkey,
				   int32 kvno,
				   int ticketLen,
				   char *ticket));
d143 8
a150 8
tkt_MakeTicket __P((char *ticket,
		    int *ticketLen,
		    struct ktc_encryptionKey *key,
		    char *name, char *inst, char *cell,
		    u_int32 start, u_int32 end,
		    struct ktc_encryptionKey *sessionKey,
		    u_int32 host,
		    char *sname, char *sinst));
d153 10
a162 10
tkt_DecodeTicket __P((char *asecret,
		      int32 ticketLen,
		      struct ktc_encryptionKey *key,
		      char *name,
		      char *inst,
		      char *cell,
		      char *sessionKey,
		      int32 *host,
		      int32 *start,
		      int32 *end));
@


1.2
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d41 1
a41 1
/* @@(#)$Id: rxkad.h,v 1.7 1998/02/23 03:23:24 assar Exp $ */
d140 1
a140 1
u_int32 life_to_time __P((u_int32 start, int life_));
d142 1
a142 1
int time_to_life __P((u_int32 start, u_int32 end));
d144 1
a144 1
int tkt_CheckTimes __P((int32 begin, int32 end, int32 now));
@


1.1
log
@Initial revision
@
text
@a0 1
/*	$OpenBSD$	*/
d41 1
a41 1
/* @@(#)$KTH: rxkad.h,v 1.7 1998/02/23 03:23:24 assar Exp $ */
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d5 1
a5 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d20 6
a25 1
 * 3. Neither the name of the Institute nor the names of its contributors
d42 1
a42 1
/* @@(#)$KTH: rxkad.h,v 1.8.2.1 2001/10/03 22:55:31 assar Exp $ */
a123 4

#ifndef CLOCK_SKEW
#define CLOCK_SKEW (5*60)
#endif
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d4 1
a4 1
 * Copyright (c) 1995 - 2001, 2003 Kungliga Tekniska Högskolan
d36 1
a36 1
/* @@(#)$arla: rxkad.h,v 1.11 2003/06/10 16:15:39 lha Exp $ */
a53 1
#define MAXKRB4TICKETLEN	1024
d67 1
a67 3
struct rx_connection;

int32_t rxkad_GetServerInfo __P((struct rx_connection *con,
d69 1
a69 1
			       uint32_t *expiration,
d73 1
a73 1
			       int32_t *kvno));
d80 1
a80 1
						  void *key),
d89 1
a89 1
				   int32_t kvno,
d139 1
a139 1
uint32_t life_to_time __P((uint32_t start, int life_));
d141 1
a141 1
int time_to_life __P((uint32_t start, uint32_t end));
d143 1
a143 1
int tkt_CheckTimes __P((int32_t begin, int32_t end, int32_t now));
d150 1
a150 1
		    uint32_t start, uint32_t end,
d152 1
a152 1
		    uint32_t host,
d157 1
a157 1
		      int32_t ticketLen,
d163 3
a165 3
		      int32_t *host,
		      int32_t *start,
		      int32_t *end));
@


