head	1.5;
access;
symbols
	OPENBSD_5_2:1.4.0.38
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.36
	OPENBSD_5_0:1.4.0.34
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.32
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.30
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.26
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.1.1.0.8
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.6
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2012.08.23.06.21.55;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.07.04.44.13;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.11.14.41.25;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.19;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.19;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.36;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.07;	author hin;	state Exp;
branches;
next	;


desc
@@


1.5
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995, 1996, 1997, 2003 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "rxkad_locl.h"

RCSID("$arla: compat.c,v 1.6 2003/01/11 00:50:30 lha Exp $");

void initialize_rxk_error_table(void);

void
initialize_rxk_error_table(void)
{
  /* A no op, our com_err is not compatible anyways. */
}

uint32_t
life_to_time(uint32_t start, int life_)
{
  return krb_life_to_time(start, life_);
}

int
time_to_life(uint32_t start, uint32_t end)
{
  return krb_time_to_life(start, end);
}

/* function returns:
 *
 * -2 if zero or negative lifetime, or start time is more than now plus time
 * uncertainty plus max ticket lifetime, or if there is an end time, it's
 * before now minus uncertainty, the start time is non-zero, and now minus
 * the start time is greater than the max ticket lifetime plus 24 hours
 *
 * -1 if there is an end time, it's before now minus uncertainty, and the
 * start time is not non-zero or now minus the start time is not greater
 * than the max ticket lifetime plus 24 hours
 *
 * 0 if the times are consistent (not covered by above) but start time is 
 * less than now plus uncertainty
 *
 * 1 if the start time is in the past and the end time is infinity.
 *
 * 2 if the start time is past and the end time is in the future
 * and the lifetime is within the legal limit.
 */
int
tkt_CheckTimes(int32_t begin, int32_t end, int32_t now)
{
    if (end <= begin
	|| begin > now + KTC_TIME_UNCERTAINTY + MAXKTCTICKETLIFETIME
	|| (end
	    && end < now - KTC_TIME_UNCERTAINTY
	    && now - begin > MAXKTCTICKETLIFETIME + MAXKTCTICKETLIFETIME))
	return -2;
    if (end
	&& end < now - KTC_TIME_UNCERTAINTY
	&& (begin == 0 || now - begin <= 2 * MAXKTCTICKETLIFETIME))
	return -1;
    if (begin < now + KTC_TIME_UNCERTAINTY)
	return 0;
    if (begin < now && end == 0)
	return 1;
    if (begin < now
	&& end > now
	&& (end - begin) < MAXKTCTICKETLIFETIME)
	return 2;
    return 2;
}


int
tkt_MakeTicket(char *ticket,
	       int *ticketLen,
	       struct ktc_encryptionKey *key,
	       char *name, char *inst, char *cell,
	       uint32_t start, uint32_t end,
	       struct ktc_encryptionKey *sessionKey,
	       uint32_t host,
	       char *sname, char *sinst)
{
  int code;
  KTEXT_ST tkt;

  /* This routine will probably never be called, only kaserver needs it */

  code = krb_create_ticket(&tkt,
			   0, /*flags*/
			   name, inst, cell,
			   host,
			   sessionKey,
			   krb_time_to_life(start, end), start,
			   sname, sinst,
			   (des_cblock *)key);
  if (code != KSUCCESS)
    return code;

  *ticketLen = tkt.length;
  memcpy(ticket, tkt.dat, tkt.length);
  return code;
}

int
tkt_DecodeTicket (char *asecret,
		  int32_t ticketLen,
		  struct ktc_encryptionKey *key_,
		  char *name,
		  char *inst,
		  char *cell,
		  char *sessionKey,
		  int32_t *host_,
		  int32_t *start_,
		  int32_t *end)
{
    des_cblock *key = (des_cblock *)key_;
    des_key_schedule sched;
    KTEXT_ST txt;
    int ret;
    unsigned char flags;
    int life;
    char sname[ANAME_SZ];
    char sinst[INST_SZ];
    uint32_t *start = (uint32_t *)start_;
    uint32_t *host = (uint32_t *)host_;

    des_key_sched(key, sched);
    txt.length = ticketLen;
    memcpy (txt.dat, asecret, ticketLen);
    ret = decomp_ticket (&txt,
			 &flags,
			 name,
			 inst,
			 cell,
			 host,
			 (unsigned char *)sessionKey,
			 &life,
			 start,
			 sname,
			 sinst,
			 key,
			 sched);
    if (ret == KSUCCESS)
	*end = krb_life_to_time(*start, life);
    return ret;
}
@


1.4
log
@Merge
@
text
@@


1.3
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: compat.c,v 1.5 2000/10/03 00:38:11 lha Exp $");
d46 2
a47 2
u_int32
life_to_time(u_int32 start, int life_)
d53 1
a53 1
time_to_life(u_int32 start, u_int32 end)
d78 1
a78 1
tkt_CheckTimes(int32 begin, int32 end, int32 now)
d107 1
a107 1
	       u_int32 start, u_int32 end,
d109 1
a109 1
	       u_int32 host,
d135 1
a135 1
		  int32 ticketLen,
d141 3
a143 3
		  int32 *host_,
		  int32 *start_,
		  int32 *end)
d153 2
a154 2
    u_int32 *start = (u_int32 *)start_;
    u_int32 *host = (u_int32 *)host_;
@


1.2
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d36 1
a36 1
RCSID("$Id: compat.c,v 1.4 2000/06/05 10:00:05 lha Exp $");
@


1.1
log
@Initial revision
@
text
@a0 1
/*	$OpenBSD$	*/
d41 3
a43 1
RCSID("$KTH: compat.c,v 1.2 1998/04/05 10:58:16 assar Exp $");
d146 2
a147 2
		  int32 *host,
		  int32 *start,
d158 2
d170 1
a170 1
			 sessionKey,
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d42 1
a42 3
RCSID("$KTH: compat.c,v 1.5 2000/10/03 00:38:11 lha Exp $");

void initialize_rxk_error_table(void);
d145 2
a146 2
		  int32 *host_,
		  int32 *start_,
a156 2
    u_int32 *start = (u_int32 *)start_;
    u_int32 *host = (u_int32 *)host_;
d167 1
a167 1
			 (unsigned char *)sessionKey,
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 2003 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$arla: compat.c,v 1.6 2003/01/11 00:50:30 lha Exp $");
d46 2
a47 2
uint32_t
life_to_time(uint32_t start, int life_)
d53 1
a53 1
time_to_life(uint32_t start, uint32_t end)
d78 1
a78 1
tkt_CheckTimes(int32_t begin, int32_t end, int32_t now)
d107 1
a107 1
	       uint32_t start, uint32_t end,
d109 1
a109 1
	       uint32_t host,
d135 1
a135 1
		  int32_t ticketLen,
d141 3
a143 3
		  int32_t *host_,
		  int32_t *start_,
		  int32_t *end)
d153 2
a154 2
    uint32_t *start = (uint32_t *)start_;
    uint32_t *host = (uint32_t *)host_;
@


