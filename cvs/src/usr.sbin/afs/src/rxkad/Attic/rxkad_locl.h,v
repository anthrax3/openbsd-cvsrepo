head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.2
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.08.23.06.21.55;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.09.16.15;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.44.13;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.41.26;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.59.16;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.19;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.19;	author art;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.07.04.14.36;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.05.08.21.07;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995, 1996, 1997, 2003 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* @@(#)$arla: rxkad_locl.h,v 1.14 2003/06/12 05:32:16 lha Exp $ */

#ifndef __RXKAD_LOCL_H
#define __RXKAD_LOCL_H

/* $arla: rxkad_locl.h,v 1.14 2003/06/12 05:32:16 lha Exp $ */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <stdlib.h>
#include <string.h>
#include <limits.h>

#include <sys/types.h>
#include <netinet/in.h>

#ifdef NDEBUG
#ifndef assert
#define assert(e) ((void)0)
#endif
#else
#ifndef assert
#define assert(e) ((e) ? (void)0 : (void)osi_Panic("assert(%s) failed: file %s, line %d\n", #e, __FILE__, __LINE__, #e))
#endif
#endif

#ifdef HAVE_OPENSSL
#include <openssl/des.h>
#else
#include <des.h>
#endif
#ifdef HAVE_KRB4
#include <krb.h>
#endif /* HAVE_KRB4 */

#undef RCSID
#include <rx/rx.h>
#undef RCSID
#define RCSID(msg) \
static /**/const char *const rcsid[] = { (char *)rcsid, "\100(#)" msg }

extern int rx_epoch, rx_nextCid;

#include "rxkad.h"

#define rxkad_disipline 3

#define rxkad_unallocated 1
#define rxkad_authenticated 2
#define rxkad_expired 4
#define rxkad_checksummed 8

#define ROUNDS 16

int fc_keysched(const void *key_, int32_t sched[ROUNDS]);

/* In_ and out_ MUST be uint32_t aligned */
int fc_ecb_encrypt(const void *in_, void *out_,
		   const int32_t sched[ROUNDS], int encrypt);

/* In_ and out_ MUST be uint32_t aligned */
int fc_cbc_encrypt(const void *in_, void *out_, int32_t length,
		   const int32_t sched[ROUNDS], uint32_t iv[2],
		   int encrypt);

int rxkad_EncryptPacket(const void *rx_connection_not_used,
			const int32_t sched[ROUNDS], const uint32_t iv[2],
			int len, struct rx_packet *packet);

int rxkad_DecryptPacket(const void *rx_connection_not_used,
			const int32_t sched[ROUNDS], const uint32_t iv[2],
			int len, struct rx_packet *packet);

#ifdef __GNUC__
static inline
void
fc_cbc_enc2(const void *in, void *out, int32_t length, const int32_t sched[ROUNDS],
	    const uint32_t iv_[2], int encrypt)
{
  uint32_t iv[2];
  iv[0] = iv_[0];
  iv[1] = iv_[1];
  fc_cbc_encrypt(in, out, length, sched, iv, encrypt);
}
#else
#define fc_cbc_enc2(in, out, length, sched, iv_, encrypt) \
{ uint32_t _iv_[2]; uint32_t *_tmp_ = (iv_); \
  memcpy(_iv_, _tmp_, 8);  \
  fc_cbc_encrypt((in), (out), (length), (sched), (_iv_), (encrypt)); }
#endif

#define RXKAD_VERSION 2

/* Version 2 challenge format */
typedef struct rxkad_challenge {
  int32_t version;
  int32_t nonce;
  int32_t min_level;
  int32_t unused;
} rxkad_challenge;

/* To protect the client from being used as an oracle the response
 * contains connection specific information. */
typedef struct rxkad_response {
  int32_t version;
  int32_t unused;
  struct {
    int32_t epoch;
    int32_t cid;
    uint32_t cksum;		/* Cksum of this response */
    int32_t security_index;
    int32_t call_numbers[RX_MAXCALLS];
    int32_t inc_nonce;
    int32_t level;
  } encrypted;
  int32_t kvno;
  int32_t ticket_len;
  /* u_char the_ticket[ticket_len]; */
} rxkad_response;

typedef struct key_stuff {
  int32_t keysched[ROUNDS];
  des_cblock key;
} key_stuff;

typedef struct end_stuff {
  uint32_t header_iv[2];
  uint32_t bytesReceived, packetsReceived, bytesSent, packetsSent;
} end_stuff;

uint32_t
rxkad_cksum_response(rxkad_response *r);

void
rxkad_calc_header_iv(const struct rx_connection *conn,
		     const int32_t sched[ROUNDS],
		     const des_cblock *in_iv,
		     uint32_t out_iv[2]);

int
rxkad_prepare_packet(struct rx_packet *pkt, struct rx_connection *con,
		     int level, key_stuff *k, end_stuff *e);

int
rxkad_check_packet(struct rx_packet *pkt, struct rx_connection *con,
		   int level, key_stuff *k, end_stuff *e);

#ifdef HAVE_KRB4

/* Per connection specific server data */
typedef struct serv_con_data {
  end_stuff e;
  key_stuff k;
  uint32_t expires;
  int32_t nonce;
  krb_principal *user;
  rxkad_level cur_level;	/* Starts at min_level and can only increase */
  char authenticated;
} serv_con_data;

#endif

#endif /* __RXKAD_LOCL_H */
@


1.5
log
@Merge
@
text
@@


1.4
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997 Kungliga Tekniska Högskolan
d34 1
a34 1
/* @@(#)$KTH: rxkad_locl.h,v 1.10 2000/10/03 00:38:55 lha Exp $ */
d39 1
a39 1
/* $KTH: rxkad_locl.h,v 1.10 2000/10/03 00:38:55 lha Exp $ */
a51 5
#ifdef USE_MMAPTIME
#include <mmaptime.h>
#define gettimeofday mmaptime_gettimeofday
#endif

d62 3
d66 2
d69 1
d90 1
a90 1
int fc_keysched(const void *key_, int32 sched[ROUNDS]);
d92 1
a92 1
/* In_ and out_ MUST be u_int32 aligned */
d94 1
a94 1
		   const int32 sched[ROUNDS], int encrypt);
d96 3
a98 3
/* In_ and out_ MUST be u_int32 aligned */
int fc_cbc_encrypt(const void *in_, void *out_, int32 length,
		   const int32 sched[ROUNDS], u_int32 iv[2],
d102 1
a102 1
			const int32 sched[ROUNDS], const u_int32 iv[2],
d106 1
a106 1
			const int32 sched[ROUNDS], const u_int32 iv[2],
d112 2
a113 2
fc_cbc_enc2(const void *in, void *out, int32 length, const int32 sched[ROUNDS],
	    const u_int32 iv_[2], int encrypt)
d115 1
a115 1
  u_int32 iv[2];
d122 1
a122 1
{ u_int32 _iv_[2]; u_int32 *_tmp_ = (iv_); \
d131 4
a134 4
  int32 version;
  int32 nonce;
  int32 min_level;
  int32 unused;
d140 2
a141 2
  int32 version;
  int32 unused;
d143 7
a149 7
    int32 epoch;
    int32 cid;
    u_int32 cksum;		/* Cksum of this response */
    int32 security_index;
    int32 call_numbers[RX_MAXCALLS];
    int32 inc_nonce;
    int32 level;
d151 2
a152 2
  int32 kvno;
  int32 ticket_len;
d157 1
a157 1
  int32 keysched[ROUNDS];
d162 2
a163 2
  u_int32 header_iv[2];
  u_int32 bytesReceived, packetsReceived, bytesSent, packetsSent;
d166 1
a166 1
u_int32
d171 1
a171 1
		     const int32 sched[ROUNDS],
d173 1
a173 1
		     u_int32 out_iv[2]);
d183 2
d189 2
a190 2
  u_int32 expires;
  int32 nonce;
d195 2
@


1.3
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d34 1
a34 1
/* @@(#)$Id: rxkad_locl.h,v 1.9 1998/10/23 02:15:47 lha Exp $ */
d39 1
a39 1
/* $Id: rxkad_locl.h,v 1.9 1998/10/23 02:15:47 lha Exp $ */
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@a0 1
/*	$OpenBSD$	*/
d39 1
a39 1
/* @@(#)$KTH: rxkad_locl.h,v 1.9 1998/10/23 02:15:47 lha Exp $ */
d44 1
a44 1
/* $KTH: rxkad_locl.h,v 1.9 1998/10/23 02:15:47 lha Exp $ */
@


1.1
log
@Initial revision
@
text
@d40 1
a40 1
/* @@(#)$KTH: rxkad_locl.h,v 1.8 1998/03/28 16:35:49 lha Exp $ */
d45 1
a45 1
/* $KTH: rxkad_locl.h,v 1.8 1998/03/28 16:35:49 lha Exp $ */
d64 1
d66 1
d68 1
d71 1
d74 1
a74 1
#include <kerberosIV/krb.h>
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@


1.1.1.2
log
@Import of arla-0.35.7
@
text
@d1 1
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d40 1
a40 1
/* @@(#)$KTH: rxkad_locl.h,v 1.10 2000/10/03 00:38:55 lha Exp $ */
d45 1
a45 1
/* $KTH: rxkad_locl.h,v 1.10 2000/10/03 00:38:55 lha Exp $ */
a63 1
#ifndef assert
a64 1
#endif
a65 1
#ifndef assert
a67 1
#endif
d70 1
a70 1
#include <krb.h>
@


1.1.1.3
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 2003 Kungliga Tekniska Högskolan
d34 1
a34 1
/* @@(#)$arla: rxkad_locl.h,v 1.14 2003/06/12 05:32:16 lha Exp $ */
d39 1
a39 1
/* $arla: rxkad_locl.h,v 1.14 2003/06/12 05:32:16 lha Exp $ */
d52 5
a66 3
#ifdef HAVE_OPENSSL
#include <openssl/des.h>
#else
a67 2
#endif
#ifdef HAVE_KRB4
a68 1
#endif /* HAVE_KRB4 */
d89 1
a89 1
int fc_keysched(const void *key_, int32_t sched[ROUNDS]);
d91 1
a91 1
/* In_ and out_ MUST be uint32_t aligned */
d93 1
a93 1
		   const int32_t sched[ROUNDS], int encrypt);
d95 3
a97 3
/* In_ and out_ MUST be uint32_t aligned */
int fc_cbc_encrypt(const void *in_, void *out_, int32_t length,
		   const int32_t sched[ROUNDS], uint32_t iv[2],
d101 1
a101 1
			const int32_t sched[ROUNDS], const uint32_t iv[2],
d105 1
a105 1
			const int32_t sched[ROUNDS], const uint32_t iv[2],
d111 2
a112 2
fc_cbc_enc2(const void *in, void *out, int32_t length, const int32_t sched[ROUNDS],
	    const uint32_t iv_[2], int encrypt)
d114 1
a114 1
  uint32_t iv[2];
d121 1
a121 1
{ uint32_t _iv_[2]; uint32_t *_tmp_ = (iv_); \
d130 4
a133 4
  int32_t version;
  int32_t nonce;
  int32_t min_level;
  int32_t unused;
d139 2
a140 2
  int32_t version;
  int32_t unused;
d142 7
a148 7
    int32_t epoch;
    int32_t cid;
    uint32_t cksum;		/* Cksum of this response */
    int32_t security_index;
    int32_t call_numbers[RX_MAXCALLS];
    int32_t inc_nonce;
    int32_t level;
d150 2
a151 2
  int32_t kvno;
  int32_t ticket_len;
d156 1
a156 1
  int32_t keysched[ROUNDS];
d161 2
a162 2
  uint32_t header_iv[2];
  uint32_t bytesReceived, packetsReceived, bytesSent, packetsSent;
d165 1
a165 1
uint32_t
d170 1
a170 1
		     const int32_t sched[ROUNDS],
d172 1
a172 1
		     uint32_t out_iv[2]);
a181 2
#ifdef HAVE_KRB4

d186 2
a187 2
  uint32_t expires;
  int32_t nonce;
a191 2

#endif
@


