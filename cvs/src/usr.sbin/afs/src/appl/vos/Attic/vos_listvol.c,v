head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.38
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.36
	OPENBSD_5_0:1.3.0.34
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.32
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.30
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.08.23.06.21.49;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2003.08.05.09.05.49;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.28.42;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.40.38;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.21;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.20.59;	author hin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "appl_locl.h"
#include <sl.h>
#include "vos_local.h"

RCSID("$arla: vos_listvol.c,v 1.7 2001/09/17 21:40:26 mattiasa Exp $");

/*
 * list volume on a afs-server
 */

static char *server;
static char *partition;
static int  listvol_machine;
static char *cell;
static int noauth;
static int localauth;
static int helpflag;
static int fast;

static struct agetargs args[] = {
    {"server",	0, aarg_string,  &server,  
     "server", NULL, aarg_mandatory},
    {"partition", 0, aarg_string, &partition,
     "partition", NULL, aarg_optional_swless},
    {"machine", 'm', aarg_flag, &listvol_machine,
     "machineparseableform", NULL},
    {"cell",	0, aarg_string,  &cell, 
     "cell", NULL},
    {"noauth",	0, aarg_flag,    &noauth, 
     "do not authenticate", NULL},
    {"localauth",	0, aarg_flag,    &localauth, 
     "use local authentication", NULL},
    {"fast",		0, aarg_flag,	&fast,
     "only list IDs", NULL},
    {"help",	0, aarg_flag,    &helpflag,
     NULL, NULL},
    {NULL,      0, aarg_end, NULL}
};

static void
usage(void)
{
    aarg_printusage (args, "vos listvol", "", AARG_AFSSTYLE);
}

int
vos_listvol(int argc, char **argv)
{
    struct rx_connection *connvolser;
    int optind = 0;
    int flags = 0;
    int error;
    int part;

    server = partition = cell = NULL;
    listvol_machine = noauth = localauth = helpflag = fast = 0;

    if (agetarg (args, argc, argv, &optind, AARG_AFSSTYLE)) {
	usage();
	return 0;
    }

    if(helpflag) {
	usage();
	return 0;
    }
    
    argc -= optind;
    argv += optind;

    if (server == NULL) {
	usage();
	return 0;
    }

    if (partition == NULL) {
	part = -1;
    } else {
	part = partition_name2num(partition);
	if (part == -1) {
	    usage();
	    return 0;
	}
    }

    if (listvol_machine)
	flags |= LISTVOL_PART;
    if (localauth)
	flags |= LISTVOL_LOCALAUTH;
    if (fast)
	flags |= LISTVOL_FAST;


    connvolser = arlalib_getconnbyname(cell, server, afsvolport,
				       VOLSERVICE_ID,
		 arlalib_getauthflag (noauth, 0, 0, 0));

    if (connvolser == NULL) {
	printf("vos listvolume: failed to contact volser on host %s",
	       server);
	return -1 ;
    }

    error = printlistvol(connvolser, server, part, flags);
    if (error) {
	printf("vos listvolume: partinfo failed with: %s (%d)\n", 
	       koerr_gettext(error), error);
	return -1;
    }

    arlalib_destroyconn(connvolser);

    return 0;
}
@


1.3
log
@Merge
@
text
@@


1.2
log
@merge
@
text
@d38 1
a38 1
RCSID("$KTH: vos_listvol.c,v 1.5.2.1 2001/09/17 21:42:29 mattiasa Exp $");
d44 8
a51 8
char *server;
char *partition;
int  listvol_machine;
char *cell;
int noauth;
int localauth;
int helpflag;
int fast;
d82 1
d85 1
d126 3
a128 1
    printlistvol(cell, server, part, flags, 
d130 16
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d38 1
a38 1
RCSID("$Id: vos_listvol.c,v 1.2 1999/03/04 09:17:32 lha Exp $");
d53 6
a58 6
static struct getargs args[] = {
    {"server",	0, arg_string,  &server,  
     "server", NULL, arg_mandatory},
    {"partition", 0, arg_string, &partition,
     "partition", NULL},
    {"machine", 'm', arg_flag, &listvol_machine,
d60 1
a60 1
    {"cell",	0, arg_string,  &cell, 
d62 1
a62 1
    {"noauth",	0, arg_flag,    &noauth, 
d64 1
a64 1
    {"localauth",	0, arg_flag,    &localauth, 
d66 1
a66 1
    {"fast",		0, arg_flag,	&fast,
d68 1
a68 1
    {"help",	0, arg_flag,    &helpflag,
d70 1
a70 1
    {NULL,      0, arg_end, NULL}
d76 1
a76 1
    arg_printusage (args, "vos listvol", "", ARG_AFSSTYLE);
d89 1
a89 1
    if (getarg (args, argc, argv, &optind, ARG_AFSSTYLE)) {
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d43 1
a43 1
RCSID("$KTH: vos_listvol.c,v 1.5.2.1 2001/09/17 21:42:29 mattiasa Exp $");
d58 6
a63 6
static struct agetargs args[] = {
    {"server",	0, aarg_string,  &server,  
     "server", NULL, aarg_mandatory},
    {"partition", 0, aarg_string, &partition,
     "partition", NULL, aarg_optional_swless},
    {"machine", 'm', aarg_flag, &listvol_machine,
d65 1
a65 1
    {"cell",	0, aarg_string,  &cell, 
d67 1
a67 1
    {"noauth",	0, aarg_flag,    &noauth, 
d69 1
a69 1
    {"localauth",	0, aarg_flag,    &localauth, 
d71 1
a71 1
    {"fast",		0, aarg_flag,	&fast,
d73 1
a73 1
    {"help",	0, aarg_flag,    &helpflag,
d75 1
a75 1
    {NULL,      0, aarg_end, NULL}
d81 1
a81 1
    aarg_printusage (args, "vos listvol", "", AARG_AFSSTYLE);
d94 1
a94 1
    if (agetarg (args, argc, argv, &optind, AARG_AFSSTYLE)) {
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d38 1
a38 1
RCSID("$arla: vos_listvol.c,v 1.7 2001/09/17 21:40:26 mattiasa Exp $");
d44 8
a51 8
static char *server;
static char *partition;
static int  listvol_machine;
static char *cell;
static int noauth;
static int localauth;
static int helpflag;
static int fast;
a81 1
    struct rx_connection *connvolser;
a83 1
    int error;
d124 1
a124 3

    connvolser = arlalib_getconnbyname(cell, server, afsvolport,
				       VOLSERVICE_ID,
a125 16

    if (connvolser == NULL) {
	printf("vos listvolume: failed to contact volser on host %s",
	       server);
	return -1 ;
    }

    error = printlistvol(connvolser, server, part, flags);
    if (error) {
	printf("vos listvolume: partinfo failed with: %s (%d)\n", 
	       koerr_gettext(error), error);
	return -1;
    }

    arlalib_destroyconn(connvolser);

@


