head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.38
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.36
	OPENBSD_5_0:1.3.0.34
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.32
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.30
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.08.23.06.21.49;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2003.08.05.09.05.49;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.28.42;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.40.38;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.22;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.21.00;	author hin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "appl_locl.h"
#include <sl.h>
#include "vos_local.h"

RCSID("$arla: vos_status.c,v 1.11 2003/03/08 02:33:34 lha Exp $");

static int
printstatus (const char *cell, const char *host,
	     int noauth, int verbose)
{
    struct rx_connection *connvolser = NULL;
    struct transDebugInfo *entries;
    transDebugEntries info;
    unsigned int entries_len, i;
    int error;

    connvolser = arlalib_getconnbyname(cell,
				       host,
				       afsvolport,
				       VOLSERVICE_ID,
				       0);

    if (connvolser == NULL)
	return -1;

    error = VOLSER_AFSVolMonitor(connvolser, &info);
    if (error) {
	printf("printstatus: GetStat failed with: %s (%d)\n",
	       koerr_gettext(error), error);
	return -1;
    }
    
    entries_len = info.len;
    entries = info.val;

    if (entries_len == 0)
	printf ("No active transactions on %s\n", host);
    else {
	char *line = "--------------------------------------";

	printf("Total transactions: %d\n", i);
	for (i = 0; i < entries_len; i++) {
	    char timestr[128];
	    char part[100];
	    struct tm tm;
	    time_t t;

	    printf("%s\n", line);
	    
	    memset (&tm, 0, sizeof(tm));
	    t = entries->creationTime;
	    if (strftime (timestr, sizeof(timestr), "%Y-%m-%d %H:%M:%S %Z",
			  localtime_r(&t, &tm)) <= 0)
		strlcpy(timestr, "unknown-time", sizeof(timestr));
	    printf("transaction: %d  created: %s\n", entries->tid, timestr);
	    printf("attachFlags:  ");

	    if ((entries->iflags & ITOffline) == ITOffline)
		printf(" offline");
	    if ((entries->iflags & ITBusy) == ITBusy)
		printf(" busy");
	    if ((entries->iflags & ITReadOnly) == ITReadOnly)
		printf("read-only");
	    if ((entries->iflags & ITCreate) == ITCreate)
		printf("create");
	    if ((entries->iflags & ITCreateVolID) == ITCreateVolID)
		printf("create-VolID");

	    partition_num2name(entries->partition, part, sizeof(part));
	    printf("\nvolume: %d  partition: %s procedure: %s\n", 
		   entries->volid, part, entries->lastProcName);
	    printf("packetRead: %d  lastReceiveTime: %d  "
		   "packetSend: %d  lastSendTime: %d\n",
		   entries->readNext, 
		   entries->lastReceiveTime, 
		   entries->transmitNext, 
		   entries->lastSendTime);
	    entries++;
	}
	printf("%s\n", line);
    }

    arlalib_destroyconn(connvolser);
    return 0;
}

static int helpflag;
static const char *server;
static const char *cell;
static int noauth;
static int verbose;

static struct agetargs args[] = {
    {"server",	0, aarg_string,	&server,	"server", NULL,aarg_mandatory},
    {"cell",	0, aarg_string,	&cell,		"cell",	  NULL},
    {"noauth",	0, aarg_flag,	&noauth,	"do not authenticate", NULL},
    {"verbose",	0, aarg_flag,	&verbose,	"be verbose", NULL},
    {"help",	0, aarg_flag,	&helpflag,	NULL, NULL},
    {NULL,	0, aarg_end,	NULL,		NULL, NULL}
};

static void
usage (void)
{
    aarg_printusage (args, "vos status", "", AARG_AFSSTYLE);
}

int
vos_status(int argc, char **argv)
{
    int optind = 0;

    if (agetarg (args, argc, argv, &optind, AARG_AFSSTYLE)) {
	usage ();
	return 0;
    }

    if (helpflag) {
	usage ();
	return 0;
    }

    argc -= optind;
    argv += optind;

    if (server == NULL) {
	printf ("vos status: missing -server\n");
	return 0;
    }

    if (cell == NULL)
	cell = cell_getcellbyhost (server);

    printstatus (cell, server, noauth, verbose);
    return 0;
}
@


1.3
log
@Merge
@
text
@@


1.2
log
@merge
@
text
@d38 1
a38 1
RCSID("$KTH: vos_status.c,v 1.7.2.1 2001/03/04 04:16:20 lha Exp $");
d72 6
a77 1
	for (i = 0; i < entries_len; i--) {
d79 1
a79 2
	    char timestr[20];
	    char part[100];
d81 1
a81 1
	    printf("--------------------------------------\n");
d84 5
a88 4
	    strftime (timestr, sizeof(timestr), "%Y-%m-%d %H:%M:%S %Z",
		      localtime_r((time_t*) &entries->creationTime, &tm));
	    printf("transaction: %d  created: %s\n", entries->tid, 
		   timestr);
d113 1
a113 1
	printf("--------------------------------------\n");
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d38 1
a38 1
RCSID("$Id: vos_status.c,v 1.3 2000/08/01 20:04:40 assar Exp $");
d41 2
a42 2
printstatus(const char *cell, const char *host,
	    int noauth, int verbose)
d59 2
a60 2
    if ((error = VOLSER_AFSVolMonitor(connvolser,
				      &info)) != 0) {
d62 1
a62 2
	       koerr_gettext(error),
	       error);
d65 1
a65 1

d73 4
d78 6
a83 1
	    printf("transaction: %d  created: %s", entries->tid, ctime((time_t *) &entries->creationTime));
d97 9
a105 2
	    printf("\nvolume: %d  partition: <insert partition name here>  procedure: %s\n", entries->volid, entries->lastProcName);
	    printf("packetRead: %d  lastReceiveTime: %d  packetSend: %d  lastSendTime: %d\n", entries->readNext, entries->lastReceiveTime, entries->transmitNext, entries->lastSendTime);
d121 7
a127 7
static struct getargs args[] = {
    {"server",	0, arg_string,	&server,	"server", NULL, arg_mandatory},
    {"cell",	0, arg_string,	&cell,		"cell",	  NULL},
    {"noauth",	0, arg_flag,	&noauth,	"do not authenticate", NULL},
    {"verbose",	0, arg_flag,	&verbose,	"be verbose", NULL},
    {"help",	0, arg_flag,	&helpflag,	NULL, NULL},
    {NULL,	0, arg_end,	NULL,		NULL, NULL}
d133 1
a133 1
    arg_printusage (args, "vos status", "", ARG_AFSSTYLE);
d141 1
a141 1
    if (getarg (args, argc, argv, &optind, ARG_AFSSTYLE)) {
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d43 1
a43 1
RCSID("$KTH: vos_status.c,v 1.7.2.1 2001/03/04 04:16:20 lha Exp $");
d46 2
a47 2
printstatus (const char *cell, const char *host,
	     int noauth, int verbose)
d64 2
a65 2
    error = VOLSER_AFSVolMonitor(connvolser, &info);
    if (error) {
d67 2
a68 1
	       koerr_gettext(error), error);
d71 1
a71 1
    
a78 4
	    struct tm tm;
	    char timestr[20];
	    char part[100];

d80 1
a80 6
	    
	    memset (&tm, 0, sizeof(tm));
	    strftime (timestr, sizeof(timestr), "%Y-%m-%d %H:%M:%S %Z",
		      localtime_r((time_t*) &entries->creationTime, &tm));
	    printf("transaction: %d  created: %s\n", entries->tid, 
		   timestr);
d94 2
a95 9
	    partition_num2name(entries->partition, part, sizeof(part));
	    printf("\nvolume: %d  partition: %s procedure: %s\n", 
		   entries->volid, part, entries->lastProcName);
	    printf("packetRead: %d  lastReceiveTime: %d  "
		   "packetSend: %d  lastSendTime: %d\n",
		   entries->readNext, 
		   entries->lastReceiveTime, 
		   entries->transmitNext, 
		   entries->lastSendTime);
d111 7
a117 7
static struct agetargs args[] = {
    {"server",	0, aarg_string,	&server,	"server", NULL,aarg_mandatory},
    {"cell",	0, aarg_string,	&cell,		"cell",	  NULL},
    {"noauth",	0, aarg_flag,	&noauth,	"do not authenticate", NULL},
    {"verbose",	0, aarg_flag,	&verbose,	"be verbose", NULL},
    {"help",	0, aarg_flag,	&helpflag,	NULL, NULL},
    {NULL,	0, aarg_end,	NULL,		NULL, NULL}
d123 1
a123 1
    aarg_printusage (args, "vos status", "", AARG_AFSSTYLE);
d131 1
a131 1
    if (agetarg (args, argc, argv, &optind, AARG_AFSSTYLE)) {
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d38 1
a38 1
RCSID("$arla: vos_status.c,v 1.11 2003/03/08 02:33:34 lha Exp $");
d72 3
a74 5
	char *line = "--------------------------------------";

	printf("Total transactions: %d\n", i);
	for (i = 0; i < entries_len; i++) {
	    char timestr[128];
a75 2
	    struct tm tm;
	    time_t t;
d77 1
a77 1
	    printf("%s\n", line);
d80 4
a83 5
	    t = entries->creationTime;
	    if (strftime (timestr, sizeof(timestr), "%Y-%m-%d %H:%M:%S %Z",
			  localtime_r(&t, &tm)) <= 0)
		strlcpy(timestr, "unknown-time", sizeof(timestr));
	    printf("transaction: %d  created: %s\n", entries->tid, timestr);
d108 1
a108 1
	printf("%s\n", line);
@


