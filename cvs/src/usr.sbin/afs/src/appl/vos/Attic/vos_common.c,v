head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.36
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.34
	OPENBSD_5_0:1.5.0.32
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.30
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.28
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.24
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.26
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.22
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.20
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.18
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.16
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.14
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.12
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.08.23.06.21.49;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.12.16.20.13.55;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.05.09.05.48;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.16.20.00.41;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.28.42;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.40.37;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.21;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.20.59;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "appl_locl.h"
#include <sl.h>
#include "vos_local.h"

RCSID("$arla: vos_common.c,v 1.19 2002/07/16 20:36:42 lha Exp $");

/*
 * Get the list of partitions from the server `host' in cell `cell'
 * and store them in `parts'.  Use authentication as specifined in `auth'.
 */

int
getlistparts(const char *cell, const char *host,
	     part_entries *parts, arlalib_authflags_t auth)
{
    struct rx_connection *connvolser;
    int error;
    
    connvolser = arlalib_getconnbyname(cell,
				       host,
				       afsvolport,
				       VOLSERVICE_ID,
				       auth);
    if (connvolser == NULL)
	return -1 ;
    
    error = getlistparts_conn(connvolser, parts);

    arlalib_destroyconn(connvolser);

    if (error != 0) {
	printf("getlistparts: ListPartitions failed with: %s (%d)\n", 
	       koerr_gettext(error), error);
	return -1;
    }

    return error;
}

/*
 * Do the same a `getlistparts', but operate on connection to the
 * `volser', return the data in `parts'.
 */

int
getlistparts_conn(struct rx_connection *volser, part_entries *parts)
{
    int error;
    
    error = VOLSER_AFSVolXListPartitions(volser, parts);
    if (error == RXGEN_OPCODE) {
	pIDs old_parts;

	error = VOLSER_AFSVolListPartitions(volser, &old_parts);
	if (error == 0) {
	    int n, i;

	    for (n = 0, i = 0; i < 26; ++i)
		if (old_parts.partIds[i] != -1)
		    ++n;
	    parts->len = n;
	    parts->val = emalloc(n * sizeof(*parts->val));

	    for (n = 0, i = 0; i < 26; ++i)
		if (old_parts.partIds[i] != -1)
		    parts->val[n++] = old_parts.partIds[i];
	}
    }

    return error;
}

static void
print_fast_vols (volEntries ve)
{
    int i;

    for (i = 0; i < ve.len; ++i)
	printf ("%d\n", ve.val[i].volid);
}

static void
print_slow_vols (volEntries ve, const char *part_name, int flags)
{
    int i;
    int busy = 0, online = 0, offline = 0;

    if ((flags & LISTVOL_PART) == 0)
	part_name = "";

    for (i = 0; i < ve.len; i++) {
	volintInfo *vi = &ve.val[i];
	    
	if (vi->status == VBUSY)
	    busy++;
	else if (vi->inUse)
	    online++;
	else
	    offline++;

	if(vi->status == VOK) {
	    printf("%-38s %10u %s %10u K %s %s\n", 
		   vi->name,
		   vi->volid,
		   volumetype_from_volsertype(vi->type),
		   vi->size,
		   vi->inUse ? "On-line" : "Off-line",
		   part_name);
	} else { /* if not VOK, either is busy or "messed up" */
	    printf("***** %-32s %10u ??          * K %s\n",
		   vi->name, vi->volid,
		   vi->status == VBUSY ? "Busy" : "Not attached");
	}
    }
	
    printf("\nTotal volumes onLine %d ; Total volumes offLine %d " \
	   "; Total busy %d\n\n",
	   online, offline, busy);
}

/*
 * print all the volumes of host `host' in cell `cell' and partition `part'.
 */

/* const char *cell, const char *host, arlalib_authflags_t auth */


int
printlistvol(struct rx_connection *connvolser, const char *host, 
	     int part, int flags)
{
    part_entries parts;
    int error;
    int i;
    
    if (part == -1) {
	if ((error = getlistparts_conn(connvolser, &parts)) != 0)
	    return error;
    } else {
	parts.len = 1;
	parts.val = emalloc (sizeof(*parts.val));
	parts.val[0] = part;
    }

    for (i = 0; i < parts.len; ++i) {
	char part_name[17];
	volEntries volint;

	volint.val = NULL;
	if ((error = VOLSER_AFSVolListVolumes(connvolser,
					      parts.val[i],
					      1, /* We want full info */
					      &volint)) != 0) {
	    free(parts.val);
	    return error;
	}
	partition_num2name (parts.val[i], part_name, sizeof(part_name));

	printf("Total number of volumes on server %s partition %s: %d\n",
	       host, part_name, volint.len);

	if (flags & LISTVOL_FAST)
	    print_fast_vols (volint);
	else
	    print_slow_vols (volint, part_name, flags);
	free(volint.val);
    }

    free(parts.val);
    return 0;
}

/*
 * Return the volume entry for `volname' in `cell' by asking the DB
 * server at `host', with the auth flags in `auth' and returning the
 * result in `nvldbentry'.  Returns 0 or error.
 */

int
get_vlentry (const char *cell, const char *host, const char *volname,
	     arlalib_authflags_t auth, nvldbentry *nvldbentry)
{
    struct rx_connection *conn;
    struct db_server_context *conn_context = NULL;
    int error;

    if(host == NULL) {
	conn_context = malloc(sizeof(struct db_server_context));
	memset(conn_context, 0, sizeof(struct db_server_context));
	for (conn = arlalib_first_db(conn_context,
				     cell, host, afsvldbport, VLDB_SERVICE_ID, 
				     auth);
	     conn != NULL && arlalib_try_next_db(error);
	     conn = arlalib_next_db(conn_context));
    } else {
	conn = arlalib_getconnbyname(cell, host, afsvldbport, VLDB_SERVICE_ID,
				     auth);
    }

    if (conn == NULL)
	return -1;

    error = VL_GetEntryByNameN (conn, volname, nvldbentry);

    if (error == RXGEN_OPCODE) {
	vldbentry vlentry;

	error = VL_GetEntryByName (conn, volname, &vlentry);
	if (error == 0)
	    vldb2vldbN (&vlentry, nvldbentry);
    }

    arlalib_destroyconn(conn);

    if(conn_context != NULL) {
	free_db_server_context(conn_context);
	free(conn_context);
    }

    return error;
}


/* 
 * insert `nvldbentry' to the dbserver using `conn' or it `conn' ==
 * NULL use `cell' (and if specified `host') to get a new conn. If the
 * db-server is old, use old method.  
 */

int
new_vlentry (struct rx_connection *conn, const char *cell, const char *host,
	     nvldbentry *nvldbentry, arlalib_authflags_t auth)
{
    int error;
    int freeconnp = 0;

    if (conn == NULL) {
	find_db_cell_and_host (&cell, &host);

	if (cell == NULL) {
	    fprintf (stderr, "Unable to find cell of host '%s'\n", host);
	    return -1;
	}

	if (host == NULL) {
	    fprintf (stderr, "Unable to find DB server in cell '%s'\n", cell);
	    return -1;
	}
	
	conn = arlalib_getconnbyname(cell, host, afsvldbport, VLDB_SERVICE_ID,
				     auth);
	freeconnp = 1;
	if (conn == NULL)
	    return -1;
    }

    error = VL_CreateEntryN (conn, nvldbentry);

    if (error == RXGEN_OPCODE) {
#if 0
	vldbentry vlentry;

	vldbN2vldb (nvldbentry, &vlentry);
	error = VL_CreateEntry (conn, volname, &vlentry);
#endif
	exit(-1);
    }
    if (freeconnp)
	arlalib_destroyconn(conn);
    return error;
}

/*
 * Try to set *cell and *host to reasonable values.
 */

void
find_db_cell_and_host (const char **cell, const char **host)
{
    if (*cell == NULL && *host != NULL) {
	*cell = cell_getcellbyhost (*host);
	return;
    } 
    if (*cell == NULL) {
	*cell = cell_getthiscell();
    }
    if (*host == NULL) {
	*host = cell_findnamedbbyname (*cell);
    }
}
@


1.5
log
@afs cleanup, realloc strings, abort, etc.
testing by beck, hin, jose, fries. ok deraadt@@
@
text
@@


1.4
log
@Merge
@
text
@d299 1
a299 1
	abort();
@


1.3
log
@correct memset arguments; from Moritz Jodeit <moritz@@jodeit.org> via PR/2822.
@
text
@d38 1
a38 50
RCSID("$KTH: vos_common.c,v 1.10.2.2 2001/09/18 00:15:32 mattiasa Exp $");

/*
 * Print the first of RW, RO, or BACKUP that there's a clone of
 * according to serverFlag.
 */

const char *
getvolumetype(int32_t flag)
{
    const char *str;

    if (flag & VLSF_RWVOL)
	str = "RW";
    else if (flag & VLSF_ROVOL)
	str = "RO";
    else if (flag & VLSF_BACKVOL)
	str = "BACKUP";
    else if (flag & VLSF_NEWREPSITE)
	str = "NewRepSite";
    else
	str = "FOO!";

    return str;
}

/*
 * Convert a volume `type' to a string.
 */

const char *
getvolumetype2(int32_t type)
{
    const char *str;

    switch (type) {
    case RWVOL:
	str = "RW";
	break;
    case ROVOL:
	str = "RO";
	break;
    case BACKVOL:
	str = "BK";
	break;
    default:
	str = "FOO!";
    }
    return str;
}
d60 24
a83 1
    error = VOLSER_AFSVolXListPartitions(connvolser, parts);
d87 1
a87 1
	error = VOLSER_AFSVolListPartitions(connvolser, &old_parts);
d103 1
a103 8
    if (error != 0) {
	printf("getlistparts: ListPartitions failed with: %s (%d)\n", 
	       koerr_gettext(error), error);
	return -1;
    }

    arlalib_destroyconn(connvolser);
    return 0;
d121 3
d138 1
a138 1
		   getvolumetype2(vi->type),
d141 6
a146 2
		   flags & LISTVOL_PART ? part_name : "");
	} 
d148 1
a148 9

    for (i = 0; i < ve.len; i++) {
	volintInfo *vi = &ve.val[i];

	if(vi->status == VBUSY)
	    printf("Volume with id number %u is currently busy\n",
		   vi->volid);
    }

d158 3
d162 2
a163 2
printlistvol(const char *cell, const char *host, int part, int flags,
	     arlalib_authflags_t auth)
a164 1
    struct rx_connection *connvolser;
a168 8
    connvolser = arlalib_getconnbyname(cell,
				       host,
				       afsvolport,
				       VOLSERVICE_ID,
				       auth);
    if (connvolser == NULL)
	return -1 ;

d170 2
a171 3
	if ((error = getlistparts(cell, host, &parts,
				  auth)) != 0)
	    return -1;
d187 2
a188 4
	    printf("printlistvol: PartitionInfo failed with: %s (%d)\n", 
		   koerr_gettext(error),
		   error);
	    return -1;
d202 1
a202 1
    arlalib_destroyconn(connvolser);
a322 24
}

/*
 * give a name for the server `addr'
 */

void
get_servername (u_int32_t addr, char *str, size_t str_sz)
{
    struct sockaddr_in sock;
    int error;

    memset (&sock, 0, sizeof(sock));
#if HAVE_STRUCT_SOCKADDR_IN_SIN_LEN
    sock.sin_len = sizeof(sock);
#endif
    sock.sin_family = AF_INET;
    sock.sin_port = 0;
    sock.sin_addr.s_addr = addr;

    error = getnameinfo((struct sockaddr *)&sock, sizeof(sock),
			str, str_sz, NULL, 0, 0);
    if (error)
	strlcpy (str, "<unknown>", str_sz);
@


1.2
log
@merge
@
text
@d265 1
a265 1
	memset(conn_context, sizeof(struct db_server_context), 0);
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d38 1
a38 1
RCSID("$Id: vos_common.c,v 1.9 1999/07/12 08:39:59 map Exp $");
d260 1
d263 13
a275 2
    conn = arlalib_getconnbyname(cell, host, afsvldbport, VLDB_SERVICE_ID,
				 auth);
d288 1
d290 6
d366 24
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d43 1
a43 1
RCSID("$KTH: vos_common.c,v 1.10.2.2 2001/09/18 00:15:32 mattiasa Exp $");
a264 1
    struct db_server_context *conn_context = NULL;
d267 2
a268 13
    if(host == NULL) {
	conn_context = malloc(sizeof(struct db_server_context));
	memset(conn_context, sizeof(struct db_server_context), 0);
	for (conn = arlalib_first_db(conn_context,
				     cell, host, afsvldbport, VLDB_SERVICE_ID, 
				     auth);
	     conn != NULL && arlalib_try_next_db(error);
	     conn = arlalib_next_db(conn_context));
    } else {
	conn = arlalib_getconnbyname(cell, host, afsvldbport, VLDB_SERVICE_ID,
				     auth);
    }

a280 1

a281 6

    if(conn_context != NULL) {
	free_db_server_context(conn_context);
	free(conn_context);
    }

a351 24
}

/*
 * give a name for the server `addr'
 */

void
get_servername (u_int32_t addr, char *str, size_t str_sz)
{
    struct sockaddr_in sock;
    int error;

    memset (&sock, 0, sizeof(sock));
#if HAVE_STRUCT_SOCKADDR_IN_SIN_LEN
    sock.sin_len = sizeof(sock);
#endif
    sock.sin_family = AF_INET;
    sock.sin_port = 0;
    sock.sin_addr.s_addr = addr;

    error = getnameinfo((struct sockaddr *)&sock, sizeof(sock),
			str, str_sz, NULL, 0, 0);
    if (error)
	strlcpy (str, "<unknown>", str_sz);
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d38 50
a87 1
RCSID("$arla: vos_common.c,v 1.19 2002/07/16 20:36:42 lha Exp $");
d109 1
a109 24
    error = getlistparts_conn(connvolser, parts);

    arlalib_destroyconn(connvolser);

    if (error != 0) {
	printf("getlistparts: ListPartitions failed with: %s (%d)\n", 
	       koerr_gettext(error), error);
	return -1;
    }

    return error;
}

/*
 * Do the same a `getlistparts', but operate on connection to the
 * `volser', return the data in `parts'.
 */

int
getlistparts_conn(struct rx_connection *volser, part_entries *parts)
{
    int error;
    
    error = VOLSER_AFSVolXListPartitions(volser, parts);
d113 1
a113 1
	error = VOLSER_AFSVolListPartitions(volser, &old_parts);
d129 8
a136 1
    return error;
a153 3
    if ((flags & LISTVOL_PART) == 0)
	part_name = "";

d168 1
a168 1
		   volumetype_from_volsertype(vi->type),
d171 10
a180 6
		   part_name);
	} else { /* if not VOK, either is busy or "messed up" */
	    printf("***** %-32s %10u ??          * K %s\n",
		   vi->name, vi->volid,
		   vi->status == VBUSY ? "Busy" : "Not attached");
	}
d182 1
a182 1
	
a191 3
/* const char *cell, const char *host, arlalib_authflags_t auth */


d193 2
a194 2
printlistvol(struct rx_connection *connvolser, const char *host, 
	     int part, int flags)
d196 1
d201 8
d210 3
a212 2
	if ((error = getlistparts_conn(connvolser, &parts)) != 0)
	    return error;
d228 4
a231 2
	    free(parts.val);
	    return error;
d245 1
a245 1
    free(parts.val);
d265 1
a265 1
	memset(conn_context, 0, sizeof(struct db_server_context));
d366 24
@


