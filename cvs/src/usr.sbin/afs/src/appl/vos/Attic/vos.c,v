head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.08.23.06.21.49;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2003.08.05.09.05.48;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.05.05.15;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.07.04.28.42;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.28.19.33.21;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.40.37;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.21;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.20.59;	author hin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "appl_locl.h"
#include <sl.h>
#include "vos_local.h"
#include <vers.h>

RCSID("$arla: vos.c,v 1.68 2003/06/04 11:53:00 hin Exp $");

int vos_interactive = 0;

static int empty_cmd(int argc, char **argv);
static int quit_cmd(int argc, char **argv);
static int help_cmd(int argc, char **argv);
static int apropos_cmd(int argc, char **argv);


/*
 * command table
 */

static SL_cmd cmds[] = {
    {"addsite",    empty_cmd,       "not yet implemented"},
    {"apropos",    apropos_cmd,     "apropos"},
    {"backup",     vos_backup,      "Make a backup copy of a volume"},
    {"backupsys",  vos_backupsys,   "Make backup copies of multiple volumes"},
    {"changeaddr", empty_cmd,       "not yet implemented"},
    {"create",     vos_create,      "create a volume"},
    {"createentry",vos_createentry, "create a vldb entry"},
    {"delentry",   empty_cmd,       "not yet implemented"},  
    {"dump",       vos_dump,        "dump a volume"},
    {"endtrans",   vos_endtrans,    "end a transaction"},
    {"examine",    vos_examine,     "print information about a volume"},
    {"volinfo"},
    {"help",       help_cmd,        "print help"},
    {"?"},
    {"listpart",   vos_listpart,    "list partitions on a server"},
    {"listvldb",   vos_listvldb,    "list volumes in volume-location-database"},
    {"listvol",    vos_listvol,     "list volumes on a server"},
    {"listaddrs",  vos_listaddrs,   "list addresses listed in vldb"},
    {"lock",       vos_lock,        "lock VLDB entry"},
    {"move",       empty_cmd,       "not yet implemented"},
    {"partinfo",   vos_partinfo,    "print partition information on a server"},
    {"release",    empty_cmd,       "not yet implemented"},
    {"remove",     empty_cmd,       "not yet implemented"},
    {"remsite",    empty_cmd,       "not yet implemented"},
    {"rename",     empty_cmd,       "not yet implemented"},
    {"restore",    empty_cmd,       "not yet implemented"},
    {"status",     vos_status,      "Show volume server transactions"},
    {"syncserv",   empty_cmd,       "not yet implemented"},
    {"syncvldb",   empty_cmd,       "not yet implemented"},
    {"syncsite",   vos_syncsite,    "print the syncsite"},
    {"version",	   arlalib_version_cmd, "print version"},
    {"vldbexamine",vos_vldbexamine, "print only vldb info"},
    {"unlock",     vos_unlock,      "Unlock a VLDB entry"},
    {"unlockvldb", empty_cmd,       "not yet implemented"},
    {"zap",        vos_zap,         "delete the volume, don't bother with VLDB"},
    {"quit",       quit_cmd,        "exit interactive mode"},
    {NULL}
};

/*
 * Dummy command
 */

static int
empty_cmd(int argc, char **argv)
{
    printf("%s%s has not been implemented yet!\n", PROGNAME, argv[0]);
    return 0;
}

/*
 * quit
 */

static int
quit_cmd(int argc, char **argv)
{
    printf("exiting\n");
    return 1;
}

/*
 * help
 */

static int
help_cmd(int argc, char **argv)
{
    sl_help(cmds, argc, argv);
    return 0;
}

/*
 * apropos
 */

static int
apropos_cmd(int argc, char **argv)
{
    if (argc < 2) {
	fprintf (stderr, "apropos: missing topic\n");
	return 0;
    }

    sl_apropos(cmds, argv[1]);
    return 0;
}

/*
 * Main program
 */

int
main(int argc, char **argv)
{
    Log_method *method;
    int ret = 0;
    
    tzset();

    method = log_open (__progname, "/dev/stderr:notime");
    if (method == NULL)
	errx (1, "log_open failed");
    cell_init(0, method);
    ports_init();

    if (argc > 1)
	ret = sl_command(cmds, argc - 1, argv + 1);
    else {
	vos_interactive = 1;
	printf("vos - an arla tool for administrating AFS volumes.\n");
	printf("Type \"help\" to get a list of commands.\n");
	ret = sl_loop(cmds, __progname": ");
    }
    return ret;
}
@


1.5
log
@Merge
@
text
@@


1.4
log
@Merge in some progname changes, and a couple of bugfixes from arla.
@
text
@d37 1
d39 1
a39 1
RCSID("$KTH: vos.c,v 1.61.2.2 2001/09/18 00:24:17 mattiasa Exp $");
d71 1
d84 1
d88 1
a88 1
    {"zap",        empty_cmd,       "not yet implemented"},
a140 1

@


1.3
log
@merge
@
text
@a149 1
    set_progname(argv[0]);
d152 1
a152 1
    method = log_open (get_progname(), "/dev/stderr:notime");
@


1.2
log
@fix coredump on apropos; fixes PR# 2320.
art@@ ok.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d38 1
a38 1
RCSID("$Id: vos.c,v 1.1 2000/09/11 14:40:37 art Exp $");
d55 2
a56 2
    {"backup",     empty_cmd,       "not yet implemented"},
    {"backupsys",  empty_cmd,       "not yet implemented"},
d147 1
d150 7
a156 1
    cell_init(0);
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d43 1
a43 1
RCSID("$Id: vos.c,v 1.58 1999/06/19 23:16:54 hin Exp $");
d135 2
a136 2
    if (argc == 0) {
	fprintf (stderr, "apropos: missing topic");
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d43 1
a43 1
RCSID("$KTH: vos.c,v 1.61.2.2 2001/09/18 00:24:17 mattiasa Exp $");
d60 2
a61 2
    {"backup",     vos_backup,      "Make a backup copy of a volume"},
    {"backupsys",  vos_backupsys,   "Make backup copies of multiple volumes"},
a151 1
    Log_method *method;
d154 1
a154 7
    set_progname(argv[0]);
    tzset();

    method = log_open (get_progname(), "/dev/stderr:notime");
    if (method == NULL)
	errx (1, "log_open failed");
    cell_init(0, method);
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@a36 1
#include <vers.h>
d38 1
a38 1
RCSID("$arla: vos.c,v 1.68 2003/06/04 11:53:00 hin Exp $");
a69 1
    {"listaddrs",  vos_listaddrs,   "list addresses listed in vldb"},
a81 1
    {"version",	   arlalib_version_cmd, "print version"},
d85 1
a85 1
    {"zap",        vos_zap,         "delete the volume, don't bother with VLDB"},
d130 2
a131 2
    if (argc < 2) {
	fprintf (stderr, "apropos: missing topic\n");
d139 1
d150 1
a150 1
    setprogname(argv[0]);
d153 1
a153 1
    method = log_open (getprogname(), "/dev/stderr:notime");
@


