head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.38
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.36
	OPENBSD_5_0:1.3.0.34
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.32
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.30
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.08.23.06.21.49;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2003.08.05.09.05.48;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.28.42;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.40.38;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.21;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.20.59;	author hin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "appl_locl.h"
#include <sl.h>
#include "vos_local.h"

RCSID("$arla: vos_examine.c,v 1.33 2003/03/08 02:03:12 lha Exp $");

static void
print_extended_stats (const xvolintInfo *v)
{
	printf("    File count:\t%d\n\n", v->filecount);

	printf("                      Raw Read/Write Stats\n"
	       "          |-------------------------------------------|\n"
	       "          |    Same Network     |    Diff Network     |\n"
	       "          |----------|----------|----------|----------|\n"
	       "          |  Total   |   Auth   |   Total  |   Auth   |\n"
	       "          |----------|----------|----------|----------|\n");
	printf("Reads     |%9d |%9d |%9d |%9d |\n",
	       v->stat_reads[0],
	       v->stat_reads[1],
	       v->stat_reads[2],
	       v->stat_reads[3]);
	printf("Writes    |%9d |%9d |%9d |%9d |\n",
	       v->stat_writes[0],
	       v->stat_writes[1],
	       v->stat_writes[2],
	       v->stat_writes[3]);
	printf("          |-------------------------------------------|\n");
	printf("\n");
	printf("                   Writes Affecting Authorship\n"
	       "          |-------------------------------------------|\n"
	       "          |   File Authorship   | Directory Authorship|\n"
	       "          |----------|----------|----------|----------|\n"
	       "          |   Same   |   Diff   |    Same  |   Diff   |\n"
	       "          |----------|----------|----------|----------|\n");
	printf("0-60 sec  |%9d |%9d |%9d |%9d |\n",
	       v->stat_fileSameAuthor[0], v->stat_fileDiffAuthor[0],
	       v->stat_dirSameAuthor[0],  v->stat_dirDiffAuthor[0]);
	printf("1-10 min  |%9d |%9d |%9d |%9d |\n",
	       v->stat_fileSameAuthor[1], v->stat_fileDiffAuthor[1],
	       v->stat_dirSameAuthor[1],  v->stat_dirDiffAuthor[1]);
	printf("10min-1hr |%9d |%9d |%9d |%9d |\n",
	       v->stat_fileSameAuthor[2], v->stat_fileDiffAuthor[2],
	       v->stat_dirSameAuthor[2],  v->stat_dirDiffAuthor[2]);
	printf("1hr-1day  |%9d |%9d |%9d |%9d |\n",
	       v->stat_fileSameAuthor[3], v->stat_fileDiffAuthor[3],
	       v->stat_dirSameAuthor[3],  v->stat_dirDiffAuthor[3]);
	printf("1day-1wk  |%9d |%9d |%9d |%9d |\n",
	       v->stat_fileSameAuthor[4], v->stat_fileDiffAuthor[4],
	       v->stat_dirSameAuthor[4],  v->stat_dirDiffAuthor[4]);
	printf("> 1wk     |%9d |%9d |%9d |%9d |\n",
	       v->stat_fileSameAuthor[5], v->stat_fileDiffAuthor[5],
	       v->stat_dirSameAuthor[5],  v->stat_dirDiffAuthor[5]);
	printf("          |-------------------------------------------|\n");
}

static void
print_volume (const nvldbentry *nvlentry, const xvolintInfo *v,
	      const char *server_name, int extended)
{
    char part_name[17];
    char timestr[128];

    printf("%s\t\t\t%10u %s ",
	   v->name,
	   v->volid,
	   volumetype_from_volsertype(v->type));

    if (v != NULL)
	printf("%8d K  %s\n", v->size, v->status == VOK ? "On-line" : "Busy");
    else
	printf("unknown  K\n");
    
    if (v != NULL && v->status == VOK) {
	struct tm tm;
	
	partition_num2name (nvlentry->serverPartition[0],
			    part_name, sizeof(part_name));

	printf("    %s %s\n", server_name, part_name);
	printf("    ");
	
	if (nvlentry->flags & VLF_RWEXISTS)
	    printf("RWrite %u\t", nvlentry->volumeId[RWVOL]);
    
	if (nvlentry->flags & VLF_ROEXISTS )
	    printf("ROnly %u\t", nvlentry->volumeId[ROVOL]);

	if (nvlentry->flags & VLF_BACKEXISTS)
	    printf("Backup %u\t", nvlentry->volumeId[BACKVOL]);

	printf("\n    MaxQuota %10d K\n", v->maxquota);
	
	memset (&tm, 0, sizeof(tm));
	if (strftime (timestr, sizeof(timestr), "%Y-%m-%d %H:%M:%S %Z",
		      localtime_r((time_t*) &v->creationDate, &tm)) > 0)
	    printf("    Creation    %s\n", timestr);
	
	memset (&tm, 0, sizeof(tm));
	if (strftime (timestr, sizeof(timestr), "%Y-%m-%d %H:%M:%S %Z",
		      localtime_r((time_t*) &v->updateDate, &tm)) > 0)
	    printf("    Last Update %s\n", timestr);

	printf("    %d accesses in the past day (i.e., vnode references)\n",
	       v->dayUse);
    }

    if (extended && v != NULL)
	print_extended_stats (v);

    printf("\n");
}

static int
printvolstat(const char *vol, const char *cell, const char *host,
	     arlalib_authflags_t auth, int verbose, int extended)
{
    struct rx_connection *connvolser;
    int error;
    int i;
    xvolEntries xvolint;
    nvldbentry nvlentry;
    char server_name[MAXHOSTNAMELEN];
    char part_name[17];
    int was_xvol = 1;
    char volname[VLDB_MAXNAMELEN];
    int type;
    uint32_t server;
    int part;
    int bit;
    int xvolintp = 0;

    find_db_cell_and_host (&cell, &host);

    if (cell == NULL) {
	fprintf (stderr, "Unable to find cell of host '%s'\n", host);
	return -1;
    }

    if (host == NULL) {
	fprintf (stderr, "Unable to find DB server in cell '%s'\n", cell);
	return -1;
    }
	
    strlcpy (volname, vol, sizeof(volname));
    type = volname_canonicalize (volname);

    if (verbose)
	fprintf (stderr,
		 "Getting volume `%s' from the VLDB at `%s'...",
		 volname, host);

    error = get_vlentry (cell, host, volname, auth, &nvlentry);

    if (error) {
	fprintf(stderr, "VL_GetEntryByName(%s) failed: %s\n",
		volname, koerr_gettext(error));
	return -1;
    }

    if (verbose)
	fprintf (stderr, "done\n");

    switch (type) {
    case RWVOL :
	bit = VLSF_RWVOL;
	break;
    case ROVOL :
	bit = VLSF_ROVOL;
	break;
    case BACKVOL :
	bit = (VLSF_BACKVOL|VLSF_RWVOL);
	break;
    default :
	abort ();
    }

    for (i = 0; i < nvlentry.nServers; ++i)
	if (nvlentry.serverFlags[i] & bit) {
	    server = nvlentry.serverNumber[i];
	    part   = nvlentry.serverPartition[i];
	    break;
	}

    if (i == nvlentry.nServers) {
	fprintf (stderr, "Volume %s does not have a %s clone\n",
		 volname, volumetype_from_volsertype(type));
	return -1;
    }

    arlalib_host_to_name (htonl(server),
			  server_name, sizeof(server_name));

    connvolser = arlalib_getconnbyaddr(cell,
				       htonl(server),
				       NULL,
				       afsvolport,
				       VOLSERVICE_ID,
				       auth);
    if (connvolser == NULL)
	return -1;
    
    if (verbose) {
	fprintf (stderr, "getting information on `%s' from %s\n",
		 vol, server_name);
    }

    xvolint.val = NULL;
    error = VOLSER_AFSVolXListOneVolume(connvolser,
					part,
					nvlentry.volumeId[type],
					&xvolint);

    if (error == RXGEN_OPCODE) {
	volEntries volint;

	was_xvol   = 0;
	volint.val = NULL;
	error = VOLSER_AFSVolListOneVolume(connvolser,
					   part,
					   nvlentry.volumeId[type],
					   &volint);
	if (error == 0) {
	    xvolint.val = emalloc (sizeof (*xvolint.val));
	    volintInfo2xvolintInfo (volint.val, xvolint.val);
	}
    }

    if (error != 0) {
	printf("ListOneVolume of %s from %s failed with: %s (%d)\n", 
	       vol, server_name,
	       koerr_gettext(error), error);
    } else {
	xvolintp = 1;
	if (verbose)
	    fprintf (stderr, "done\n");
    }


    if(xvolintp)
	print_volume (&nvlentry, xvolint.val, server_name, was_xvol && extended);
    else {
	printf("\nDump only information from VLDB\n\n");
	printf("%s\n", nvlentry.name);

	printf("    ");
	
	if(nvlentry.flags & VLF_RWEXISTS)
	    printf("RWrite: %u\t", nvlentry.volumeId[RWVOL]);
	if(nvlentry.flags & VLF_ROEXISTS)
	    printf("ROnly: %u\t", nvlentry.volumeId[ROVOL]);
	if(nvlentry.flags & VLF_BACKEXISTS)
	    printf("Backup: %u\t", nvlentry.volumeId[BACKVOL]);
    }

    printf("\n    number of sites -> %d\n", nvlentry.nServers );
    
     for (i = 0; i < nvlentry.nServers; i++) {
	 printf("       ");
	 
	 arlalib_host_to_name (htonl(nvlentry.serverNumber[i]),
			       server_name, sizeof(server_name));

	 partition_num2name (nvlentry.serverPartition[i],
			     part_name, sizeof(part_name));
	 printf("server %s partition %s %s Site",
		server_name, part_name,
		volumetype_from_serverflag(nvlentry.serverFlags[i]));

	 if (nvlentry.serverFlags[i] & VLSF_DONTUSE)
	     printf(" -- not replicated yet");

	 printf("\n");
     }
     
     if (nvlentry.flags & VLOP_ALLOPERS) {
	 char msg[100];

	 printf("Volume is currently LOCKED, reson: %s\n", 
		vol_getopname(nvlentry.flags, msg, sizeof(msg)));
     }
     
     free(xvolint.val);
     arlalib_destroyconn(connvolser);
     return 0;
}

static int helpflag;
static char *host;
static char *cell;
static char *vol;
static int noauth;
static int localauth;
static int verbose;
static int extended;

static struct agetargs args[] = {
    {"id",	0, aarg_string,  &vol,  "id of volume", "volume",
     aarg_mandatory},
    {"host",	0, aarg_string,  &host, "what host to use", NULL},
    {"cell",	0, aarg_string,  &cell, "what cell to use", NULL},
    {"noauth",	0, aarg_flag,    &noauth, "do not authenticate", NULL},
    {"localauth",0,aarg_flag,    &localauth, "localauth", NULL},
    {"verbose", 0, aarg_flag,	&verbose, "be verbose", NULL},
    {"extended",0, aarg_flag,	&extended, "more output", NULL},
    {"help",	0, aarg_flag,    &helpflag, NULL, NULL},
    {NULL,      0, aarg_end,	NULL}
};

static void
usage(void)
{
    aarg_printusage(args, "vos examine", "", AARG_AFSSTYLE);
}

int
vos_examine(int argc, char **argv)
{
    int optind = 0;

    helpflag = noauth = localauth = verbose = extended = 0;
    host = cell = vol = NULL;

    if (agetarg (args, argc, argv, &optind, AARG_AFSSTYLE)) {
	usage ();
	return 0;
    }

    if (helpflag) {
	usage ();
	return 0;
    }

    argc -= optind;
    argv += optind;

    if (argc) {
	printf("unknown option %s\n", *argv);
	return 0;
    }

    /* don't allow any bogus volname */
    if (vol == NULL || vol[0] == '\0') {
	usage ();
	return 0;
    }

    printvolstat(vol, cell, host, 
		 arlalib_getauthflag (noauth, localauth, 0, 0), 
		 verbose, extended);
    return 0;
}
@


1.3
log
@Merge
@
text
@@


1.2
log
@merge
@
text
@d38 1
a38 1
RCSID("$KTH: vos_examine.c,v 1.17.2.3 2001/09/19 10:03:36 mattiasa Exp $");
d43 2
d95 1
a95 1
    char timestr[30];
d100 1
a100 1
	   getvolumetype2(v->type));
d128 3
a130 3
	strftime (timestr, sizeof(timestr), "%Y-%m-%d %H:%M:%S %Z",
		  localtime_r((time_t*) &v->creationDate, &tm));
	printf("    Creation    %s\n", timestr);
d133 3
a135 3
	strftime (timestr, sizeof(timestr), "%Y-%m-%d %H:%M:%S %Z",
		  localtime_r((time_t*) &v->updateDate, &tm));
	printf("    Last Update %s\n", timestr);
d137 1
a137 1
	printf("    %d accesses in the past day (i.e., vnode references)\n\n",
d143 2
d161 1
a161 1
    u_int32_t server;
d220 1
a220 1
		 volname, getvolumetype2(type));
d224 2
a225 2
    get_servername (htonl(server),
		    server_name, sizeof(server_name));
d278 9
a288 8
    printf("    ");
    if(nvlentry.flags & VLF_RWEXISTS)
	printf("RWrite: %u\t", nvlentry.volumeId[RWVOL]);
    if(nvlentry.flags & VLF_ROEXISTS)
	printf("ROnly: %u\t", nvlentry.volumeId[ROVOL]);
    if(nvlentry.flags & VLF_BACKEXISTS)
	printf("Backup: %u\t", nvlentry.volumeId[BACKVOL]);

d294 2
a295 2
	 get_servername (htonl(nvlentry.serverNumber[i]),
			 server_name, sizeof(server_name));
d301 1
a301 1
		getvolumetype(nvlentry.serverFlags[i]));
d307 7
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d38 1
a38 1
RCSID("$Id: vos_examine.c,v 1.7 2000/08/16 11:19:30 assar Exp $");
d96 3
a98 3
	   nvlentry->name, 
	   nvlentry->volumeId[0], 
	   getvolumetype(nvlentry->serverFlags[0]));
d106 2
d125 3
a127 4
	/* Get and format date */
	strlcpy(timestr, 
		ctime( (time_t*) &v->creationDate),
		sizeof(timestr));
d130 3
a132 4
	/* Get and format date */
	strlcpy(timestr, 
	       ctime((time_t *) &v->updateDate),
	       sizeof(timestr));
d144 1
a144 1
printvolstat(const char *volname, const char *cell, const char *host,
a151 1
    struct in_addr server_addr;
d155 6
d174 3
d193 29
a221 2
    server_addr.s_addr = htonl(nvlentry.serverNumber[0]);
    inaddr2str (server_addr, server_name, sizeof(server_name));
d224 1
a224 1
				       server_addr.s_addr,
d234 1
a234 1
		 volname, server_name);
d239 2
a240 2
					nvlentry.serverPartition[0],
					nvlentry.volumeId[0],
d249 2
a250 2
					   nvlentry.serverPartition[0],
					   nvlentry.volumeId[0],
d258 1
a258 1
    if (error != 0)
d260 1
a260 1
	       volname, server_name,
d262 6
d269 6
a274 4
    if (verbose)
	fprintf (stderr, "done\n");
    
    print_volume (&nvlentry, xvolint.val, server_name, was_xvol && extended);
d277 6
a282 3
    printf("RWrite: %u\t", nvlentry.flags & VLF_RWEXISTS ? nvlentry.volumeId[RWVOL] : 0);
    printf("ROnly: %u\t", nvlentry.flags & VLF_ROEXISTS ? nvlentry.volumeId[ROVOL] : 0);
    printf("Backup: %u\t", nvlentry.flags & VLF_BACKEXISTS ? nvlentry.volumeId[BACKVOL] : 0);
d289 2
a290 2
	 server_addr.s_addr = htonl(nvlentry.serverNumber[i]);
	 inaddr2str (server_addr, server_name, sizeof(server_name));
d294 1
a294 1
	 printf("server %s partition %s %s Site\n",
d297 5
d318 11
a328 11
static struct getargs args[] = {
    {"id",	0, arg_string,  &vol,  "id of volume", "volume",
     arg_mandatory},
    {"host",	0, arg_string,  &host, "what host to use", NULL},
    {"cell",	0, arg_string,  &cell, "what cell to use", NULL},
    {"noauth",	0, arg_flag,    &noauth, "do not authenticate", NULL},
    {"localauth",0,arg_flag,    &localauth, "localauth", NULL},
    {"verbose", 0, arg_flag,	&verbose, "be verbose", NULL},
    {"extended",0, arg_flag,	&extended, "more output", NULL},
    {"help",	0, arg_flag,    &helpflag, NULL, NULL},
    {NULL,      0, arg_end,	NULL}
d334 1
a334 1
    arg_printusage(args, "vos examine", "", ARG_AFSSTYLE);
d345 1
a345 1
    if (getarg (args, argc, argv, &optind, ARG_AFSSTYLE)) {
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d43 1
a43 1
RCSID("$KTH: vos_examine.c,v 1.17.2.3 2001/09/19 10:03:36 mattiasa Exp $");
d101 3
a103 3
	   v->name,
	   v->volid,
	   getvolumetype2(v->type));
a110 2
	struct tm tm;
	
d128 4
a131 3
	memset (&tm, 0, sizeof(tm));
	strftime (timestr, sizeof(timestr), "%Y-%m-%d %H:%M:%S %Z",
		  localtime_r((time_t*) &v->creationDate, &tm));
d134 4
a137 3
	memset (&tm, 0, sizeof(tm));
	strftime (timestr, sizeof(timestr), "%Y-%m-%d %H:%M:%S %Z",
		  localtime_r((time_t*) &v->updateDate, &tm));
d149 1
a149 1
printvolstat(const char *vol, const char *cell, const char *host,
d157 1
a160 6
    char volname[VLDB_MAXNAMELEN];
    int type;
    u_int32_t server;
    int part;
    int bit;
    int xvolintp = 0;
a173 3
    strlcpy (volname, vol, sizeof(volname));
    type = volname_canonicalize (volname);

d190 2
a191 29
    switch (type) {
    case RWVOL :
	bit = VLSF_RWVOL;
	break;
    case ROVOL :
	bit = VLSF_ROVOL;
	break;
    case BACKVOL :
	bit = (VLSF_BACKVOL|VLSF_RWVOL);
	break;
    default :
	abort ();
    }

    for (i = 0; i < nvlentry.nServers; ++i)
	if (nvlentry.serverFlags[i] & bit) {
	    server = nvlentry.serverNumber[i];
	    part   = nvlentry.serverPartition[i];
	    break;
	}

    if (i == nvlentry.nServers) {
	fprintf (stderr, "Volume %s does not have a %s clone\n",
		 volname, getvolumetype2(type));
	return -1;
    }

    get_servername (htonl(server),
		    server_name, sizeof(server_name));
d194 1
a194 1
				       htonl(server),
d204 1
a204 1
		 vol, server_name);
d209 2
a210 2
					part,
					nvlentry.volumeId[type],
d219 2
a220 2
					   part,
					   nvlentry.volumeId[type],
d228 1
a228 1
    if (error != 0) {
d230 1
a230 1
	       vol, server_name,
a231 5
    } else {
	xvolintp = 1;
	if (verbose)
	    fprintf (stderr, "done\n");
    }
d233 4
a236 7

    if(xvolintp)
	print_volume (&nvlentry, xvolint.val, server_name, was_xvol && extended);
    else {
	printf("\nDump only information from VLDB\n\n");
	printf("%s\n", nvlentry.name);
    }
d239 3
a241 6
    if(nvlentry.flags & VLF_RWEXISTS)
	printf("RWrite: %u\t", nvlentry.volumeId[RWVOL]);
    if(nvlentry.flags & VLF_ROEXISTS)
	printf("ROnly: %u\t", nvlentry.volumeId[ROVOL]);
    if(nvlentry.flags & VLF_BACKEXISTS)
	printf("Backup: %u\t", nvlentry.volumeId[BACKVOL]);
d248 2
a249 2
	 get_servername (htonl(nvlentry.serverNumber[i]),
			 server_name, sizeof(server_name));
d253 1
a253 1
	 printf("server %s partition %s %s Site",
a255 5

	 if (nvlentry.serverFlags[i] & VLSF_DONTUSE)
	     printf(" -- not replicated yet");

	 printf("\n");
d272 11
a282 11
static struct agetargs args[] = {
    {"id",	0, aarg_string,  &vol,  "id of volume", "volume",
     aarg_mandatory},
    {"host",	0, aarg_string,  &host, "what host to use", NULL},
    {"cell",	0, aarg_string,  &cell, "what cell to use", NULL},
    {"noauth",	0, aarg_flag,    &noauth, "do not authenticate", NULL},
    {"localauth",0,aarg_flag,    &localauth, "localauth", NULL},
    {"verbose", 0, aarg_flag,	&verbose, "be verbose", NULL},
    {"extended",0, aarg_flag,	&extended, "more output", NULL},
    {"help",	0, aarg_flag,    &helpflag, NULL, NULL},
    {NULL,      0, aarg_end,	NULL}
d288 1
a288 1
    aarg_printusage(args, "vos examine", "", AARG_AFSSTYLE);
d299 1
a299 1
    if (agetarg (args, argc, argv, &optind, AARG_AFSSTYLE)) {
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d38 1
a38 1
RCSID("$arla: vos_examine.c,v 1.33 2003/03/08 02:03:12 lha Exp $");
a42 2
	printf("    File count:\t%d\n\n", v->filecount);

d93 1
a93 1
    char timestr[128];
d98 1
a98 1
	   volumetype_from_volsertype(v->type));
d126 3
a128 3
	if (strftime (timestr, sizeof(timestr), "%Y-%m-%d %H:%M:%S %Z",
		      localtime_r((time_t*) &v->creationDate, &tm)) > 0)
	    printf("    Creation    %s\n", timestr);
d131 3
a133 3
	if (strftime (timestr, sizeof(timestr), "%Y-%m-%d %H:%M:%S %Z",
		      localtime_r((time_t*) &v->updateDate, &tm)) > 0)
	    printf("    Last Update %s\n", timestr);
d135 1
a135 1
	printf("    %d accesses in the past day (i.e., vnode references)\n",
a140 2

    printf("\n");
d157 1
a157 1
    uint32_t server;
d216 1
a216 1
		 volname, volumetype_from_volsertype(type));
d220 2
a221 2
    arlalib_host_to_name (htonl(server),
			  server_name, sizeof(server_name));
d274 1
d276 7
a282 9
	printf("    ");
	
	if(nvlentry.flags & VLF_RWEXISTS)
	    printf("RWrite: %u\t", nvlentry.volumeId[RWVOL]);
	if(nvlentry.flags & VLF_ROEXISTS)
	    printf("ROnly: %u\t", nvlentry.volumeId[ROVOL]);
	if(nvlentry.flags & VLF_BACKEXISTS)
	    printf("Backup: %u\t", nvlentry.volumeId[BACKVOL]);
    }
d289 2
a290 2
	 arlalib_host_to_name (htonl(nvlentry.serverNumber[i]),
			       server_name, sizeof(server_name));
d296 1
a296 1
		volumetype_from_serverflag(nvlentry.serverFlags[i]));
a301 7
     }
     
     if (nvlentry.flags & VLOP_ALLOPERS) {
	 char msg[100];

	 printf("Volume is currently LOCKED, reson: %s\n", 
		vol_getopname(nvlentry.flags, msg, sizeof(msg)));
@


