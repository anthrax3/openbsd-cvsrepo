head	1.5;
access;
symbols
	OPENBSD_5_2:1.4.0.38
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.36
	OPENBSD_5_0:1.4.0.34
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.32
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.30
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.26
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2012.08.23.06.21.49;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	2003.08.05.09.05.49;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.12.02.27.15;	author jsyn;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.28.42;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.40.38;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.21;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.20.59;	author hin;	state Exp;
branches;
next	;


desc
@@


1.5
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1999 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "appl_locl.h"
#include <sl.h>
#include "vos_local.h"

RCSID("$arla: vos_listvldb.c,v 1.17 2003/06/04 11:54:13 hin Exp $");

/*
 * listvldb iteration over all entries in the DB
 */

int
vos_listvldb_iter (const char *db_host, const char *cell, const char *volname,
		   const char *fileserver, const char *part,
		   arlalib_authflags_t auth,
		   int (*proc)(void *data, struct vldbentry *), void *data)
{
    struct rx_connection *connvldb = NULL;
    struct vldbentry *entry;
    struct vldbentry vol;
    int error;
    int32_t num;
    bulkentries bulkent;
    struct VldbListByAttributes attr;
    struct hostent *he;

    memset(&attr, '\0', sizeof(struct VldbListByAttributes));

    find_db_cell_and_host (&cell, &db_host);

    if (cell == NULL) {
	fprintf (stderr, "Unable to find cell of host '%s'\n", db_host);
	return -1;
    }

    if (db_host == NULL) {
	fprintf (stderr, "Unable to find DB server in cell '%s'\n", cell);
	return -1;
    }
	
    connvldb = arlalib_getconnbyname(cell, db_host,
				     afsvldbport,
				     VLDB_SERVICE_ID,
				     auth);

    if(volname != NULL) {

	error = VL_GetEntryByName(connvldb, volname, &vol);
	if (error) {
	    fprintf(stderr, "vos_listvldb: error %s (%d)\n",
		    koerr_gettext(error), error);
	    return -1;
	}

	attr.volumeid = vol.volumeId[vol.volumeType]; 
	attr.Mask |= VLLIST_VOLUMEID;

    }

    if(fileserver != NULL) {
	he = gethostbyname(fileserver);
	if (he == NULL) {
	    warnx("listvldb: unknown host: %s", fileserver);
	    return -1;
	}
	memcpy (&attr.server, he->h_addr_list[0], 4);
	attr.server = ntohl(attr.server);
	attr.Mask |= VLLIST_SERVER;
    }

    if(part != NULL) {
	attr.partition = partition_name2num(part);
	attr.Mask |= VLLIST_PARTITION;
    }

    bulkent.val = NULL;
    bulkent.len = 0;
    num = 0;
    error = VL_ListAttributes (connvldb, 
			       &attr,
			       &num,
			       &bulkent);
    if (error == 0) {
	int i;

	for(i=0; i<num ; i++) {
	    
	    entry = &bulkent.val[i];
	    error = proc (data, entry);
	    if (error)
		break;
	    
	    if (error) {
		warnx ("listvldb: VL_ListEntry: %s", koerr_gettext(error));
		return -1;
	    }
	}
	free(bulkent.val);
    } else
        warnx ("listvldb: VL_ListAttributes: %s", koerr_gettext(error));


    arlalib_destroyconn(connvldb);
    return 0;
}

/*
 * Print vldbentry on listvldb style
 */

static int
listvldb_print (void *data, struct vldbentry *e)
{
    int i;
    char *hostname;
    char part_name[30];

    assert (e);

    printf ("%s\n", e->name);
    if(e->flags & VLF_RWEXISTS)
	printf ("    RWrite: %d", e->volumeId[RWVOL]);
    if(e->flags & VLF_ROEXISTS)
	printf ("    ROnly: %d", e->volumeId[ROVOL]);
    if(e->flags & VLF_BACKEXISTS)
	printf ("    Backup: %d", e->volumeId[BACKVOL]);
    printf("\n");
    printf ("    Number of sites -> %d\n", e->nServers);
    for (i = 0 ; i < e->nServers ; i++) {
	if (e->serverNumber[i] == 0)
	    continue;
	if (arlalib_getservername(htonl(e->serverNumber[i]), &hostname))
	    continue;
	partition_num2name (e->serverPartition[i], part_name, sizeof(part_name));
	printf ("       server %s partition %s %s Site\n",
		hostname,
		part_name,
		volumetype_from_serverflag (e->serverFlags[i]));
	free (hostname);
    }

    printf ("\n");
    
    return 0;
}


/*
 * list vldb
 */

static char *volume;
static char *fileserver;
static char *partition;
static char *cell;
static char *dbserver;
static int noauth;
static int localauth;
static int helpflag;

static struct agetargs args[] = {
    {"name",           0, aarg_string, &volume,
     "Volume to list", NULL, aarg_optional_swless},
    {"fileserver",	0, aarg_string,  &fileserver,  
     "fileserver to list", NULL, aarg_optional_swless},
    {"partition",	0, aarg_string,  &partition,  
     "partition", NULL, aarg_optional_swless},
    {"cell",	0, aarg_string,  &cell, 
     "cell", NULL},
    {"dbserver",	0, aarg_string,  &dbserver,  
     "dbserver", NULL},
    {"noauth",	0, aarg_flag,    &noauth, 
     "do not authenticate", NULL},
    {"localauth",	0, aarg_flag,    &localauth, 
     "use local authentication", NULL},
    {"help",	0, aarg_flag,    &helpflag,
     NULL, NULL},
    {NULL,      0, aarg_end, NULL}
};

static void
usage(void)
{
    aarg_printusage (args, "vos listvldb", "", AARG_AFSSTYLE);
}

int
vos_listvldb(int argc, char **argv)
{
    int optind = 0;

    volume = fileserver = dbserver = cell = NULL;
    noauth = localauth = helpflag = 0;

    if (agetarg (args, argc, argv, &optind, AARG_AFSSTYLE)) {
	usage();
	return 0;
    }

    if(helpflag) {
	usage();
	return 0;
    }
    
    argc -= optind;
    argv += optind;


    vos_listvldb_iter (dbserver, cell, volume,
		       fileserver, partition,
		       arlalib_getauthflag (noauth, localauth, 0, 0),
		       listvldb_print, NULL);
    
    return 0;
}

@


1.4
log
@Merge
@
text
@@


1.3
log
@err(3) newline cleanup in AFS parts; ok hin@@
@
text
@d38 1
a38 1
RCSID("$KTH: vos_listvldb.c,v 1.9.2.2 2001/11/16 15:02:30 mattiasa Exp $");
d53 1
a53 1
    int error,i;
d108 3
d115 17
a131 1
    if(error) {
a132 4
    }


    for(i=0; i<num ; i++) {
a133 10
	entry = &bulkent.val[i];
	error = proc (data, entry);
	if (error)
	    break;
	
	if (error) {
	    warnx ("listvldb: VL_ListEntry: %s", koerr_gettext(error));
	    return -1;
	}
    }
d167 1
a167 1
	printf ("       server %s partition %s Site %s\n",
d170 1
a170 1
		getvolumetype (e->serverFlags[i]));
@


1.2
log
@merge
@
text
@d95 1
a95 1
	    warnx("listvldb: unknown host: %s\n", fileserver);
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d38 1
a38 1
RCSID("$Id: vos_listvldb.c,v 1.6 1999/03/14 19:05:34 assar Exp $");
d45 2
a46 1
vos_listvldb_iter (const char *host, const char *cell,
d51 9
a59 3
    struct vldbentry entry;
    int error;
    int32_t num, count;
d61 1
a61 1
    find_db_cell_and_host (&cell, &host);
d64 1
a64 1
	fprintf (stderr, "Unable to find cell of host '%s'\n", host);
d68 1
a68 1
    if (host == NULL) {
d73 1
a73 1
    connvldb = arlalib_getconnbyname(cell, host,
a76 9
    num = 0;
    do { 
	error = VL_ListEntry (connvldb, 
			      num, 
			      &count,
			      &num, 
			      &entry);
	if (error)
	    break;
d78 40
a117 1
	entry.name[VLDB_MAXNAMELEN-1] = '\0';
d119 2
a120 1
	error = proc (data, &entry);
d123 5
a127 6

    } while (num != -1);

    if (error) {
	warnx ("listvldb: VL_ListEntry: %s", koerr_gettext(error));
	return -1;
d143 1
d148 7
d161 2
a162 1
	printf ("       server %s partition /vicep%c Site %s\n",
d164 1
a164 1
		'a' + e->serverPartition[i],
d179 17
a195 10
char *server;
char *cell;
int noauth;
int localauth;
int helpflag;

static struct getargs args[] = {
    {"server",	0, arg_string,  &server,  
     "server", NULL, arg_mandatory},
    {"cell",	0, arg_string,  &cell, 
d197 3
a199 1
    {"noauth",	0, arg_flag,    &noauth, 
d201 1
a201 1
    {"localauth",	0, arg_flag,    &localauth, 
d203 1
a203 1
    {"help",	0, arg_flag,    &helpflag,
d205 1
a205 1
    {NULL,      0, arg_end, NULL}
d211 1
a211 1
    arg_printusage (args, "vos listvldb", "", ARG_AFSSTYLE);
d219 1
a219 1
    server = cell = NULL;
d222 1
a222 1
    if (getarg (args, argc, argv, &optind, ARG_AFSSTYLE)) {
d236 2
a237 1
    vos_listvldb_iter (server, cell, 
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d43 1
a43 1
RCSID("$KTH: vos_listvldb.c,v 1.9.2.2 2001/11/16 15:02:30 mattiasa Exp $");
d50 1
a50 2
vos_listvldb_iter (const char *db_host, const char *cell, const char *volname,
		   const char *fileserver, const char *part,
d55 3
a57 9
    struct vldbentry *entry;
    struct vldbentry vol;
    int error,i;
    int32_t num;
    bulkentries bulkent;
    struct VldbListByAttributes attr;
    struct hostent *he;

    memset(&attr, '\0', sizeof(struct VldbListByAttributes));
d59 1
a59 1
    find_db_cell_and_host (&cell, &db_host);
d62 1
a62 1
	fprintf (stderr, "Unable to find cell of host '%s'\n", db_host);
d66 1
a66 1
    if (db_host == NULL) {
d71 1
a71 1
    connvldb = arlalib_getconnbyname(cell, db_host,
d75 9
d85 1
a85 1
    if(volname != NULL) {
d87 3
a89 6
	error = VL_GetEntryByName(connvldb, volname, &vol);
	if (error) {
	    fprintf(stderr, "vos_listvldb: error %s (%d)\n",
		    koerr_gettext(error), error);
	    return -1;
	}
d91 1
a91 2
	attr.volumeid = vol.volumeId[vol.volumeType]; 
	attr.Mask |= VLLIST_VOLUMEID;
d93 3
a95 38
    }

    if(fileserver != NULL) {
	he = gethostbyname(fileserver);
	if (he == NULL) {
	    warnx("listvldb: unknown host: %s\n", fileserver);
	    return -1;
	}
	memcpy (&attr.server, he->h_addr_list[0], 4);
	attr.server = ntohl(attr.server);
	attr.Mask |= VLLIST_SERVER;
    }

    if(part != NULL) {
	attr.partition = partition_name2num(part);
	attr.Mask |= VLLIST_PARTITION;
    }

    error = VL_ListAttributes (connvldb, 
			       &attr,
			       &num,
			       &bulkent);
    if(error) {
        warnx ("listvldb: VL_ListAttributes: %s", koerr_gettext(error));
    }


    for(i=0; i<num ; i++) {

	entry = &bulkent.val[i];
	error = proc (data, entry);
	if (error)
	    break;
	
	if (error) {
	    warnx ("listvldb: VL_ListEntry: %s", koerr_gettext(error));
	    return -1;
	}
a110 1
    char part_name[30];
a114 7
    if(e->flags & VLF_RWEXISTS)
	printf ("    RWrite: %d", e->volumeId[RWVOL]);
    if(e->flags & VLF_ROEXISTS)
	printf ("    ROnly: %d", e->volumeId[ROVOL]);
    if(e->flags & VLF_BACKEXISTS)
	printf ("    Backup: %d", e->volumeId[BACKVOL]);
    printf("\n");
d121 1
a121 2
	partition_num2name (e->serverPartition[i], part_name, sizeof(part_name));
	printf ("       server %s partition %s Site %s\n",
d123 1
a123 1
		part_name,
d138 10
a147 17
static char *volume;
static char *fileserver;
static char *partition;
static char *cell;
static char *dbserver;
static int noauth;
static int localauth;
static int helpflag;

static struct agetargs args[] = {
    {"name",           0, aarg_string, &volume,
     "Volume to list", NULL, aarg_optional_swless},
    {"fileserver",	0, aarg_string,  &fileserver,  
     "fileserver to list", NULL, aarg_optional_swless},
    {"partition",	0, aarg_string,  &partition,  
     "partition", NULL, aarg_optional_swless},
    {"cell",	0, aarg_string,  &cell, 
d149 1
a149 3
    {"dbserver",	0, aarg_string,  &dbserver,  
     "dbserver", NULL},
    {"noauth",	0, aarg_flag,    &noauth, 
d151 1
a151 1
    {"localauth",	0, aarg_flag,    &localauth, 
d153 1
a153 1
    {"help",	0, aarg_flag,    &helpflag,
d155 1
a155 1
    {NULL,      0, aarg_end, NULL}
d161 1
a161 1
    aarg_printusage (args, "vos listvldb", "", AARG_AFSSTYLE);
d169 1
a169 1
    volume = fileserver = dbserver = cell = NULL;
d172 1
a172 1
    if (agetarg (args, argc, argv, &optind, AARG_AFSSTYLE)) {
d186 1
a186 2
    vos_listvldb_iter (dbserver, cell, volume,
		       fileserver, partition,
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d38 1
a38 1
RCSID("$arla: vos_listvldb.c,v 1.17 2003/06/04 11:54:13 hin Exp $");
d53 1
a53 1
    int error;
d95 1
a95 1
	    warnx("listvldb: unknown host: %s", fileserver);
a107 3
    bulkent.val = NULL;
    bulkent.len = 0;
    num = 0;
d112 4
a115 2
    if (error == 0) {
	int i;
d117 10
a126 11
	for(i=0; i<num ; i++) {
	    
	    entry = &bulkent.val[i];
	    error = proc (data, entry);
	    if (error)
		break;
	    
	    if (error) {
		warnx ("listvldb: VL_ListEntry: %s", koerr_gettext(error));
		return -1;
	    }
d128 1
a128 4
	free(bulkent.val);
    } else
        warnx ("listvldb: VL_ListAttributes: %s", koerr_gettext(error));

d162 1
a162 1
	printf ("       server %s partition %s %s Site\n",
d165 1
a165 1
		volumetype_from_serverflag (e->serverFlags[i]));
@


