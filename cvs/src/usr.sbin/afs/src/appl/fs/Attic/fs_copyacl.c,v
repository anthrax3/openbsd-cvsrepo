head	1.3;
access;
symbols
	OPENBSD_5_2:1.2.0.30
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.28
	OPENBSD_5_0:1.2.0.26
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.24
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.22
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.18
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.20
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.16
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.14
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.12
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.10
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.8
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.6
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.1.1.1.0.8
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.6
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.4
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.2
	OPENBSD_3_4_BASE:1.1.1.1
	arla-20030805:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2012.08.23.06.21.49;	author deraadt;	state dead;
branches;
next	1.2;

1.2
date	2005.05.02.17.51.36;	author moritz;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.05.08.20.59;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.08.05.08.20.59;	author hin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "fs_local.h"

RCSID("$arla: fs_copyacl.c,v 1.2 2003/04/08 00:01:17 lha Exp $");

static void
afs_copyacl(char *fromdir, char *todir)
{
    struct Acl *acl;
    struct AclEntry *position;
    struct ViceIoctl a_params;
    int i, l, len;
    char acltext[MAXSIZE];

    if((acl=afs_getacl(fromdir))==NULL)
	exit(1);

    l = snprintf(acltext, sizeof(acltext), "%d\n%d\n", 
		 acl->NumPositiveEntries,
		 acl->NumNegativeEntries);
    len = l;
    if (len == -1 || len >= sizeof(acltext)) {
	fserr(PROGNAME, ERANGE, todir);
	return;
    }
    position=acl->pos;
    for(i=0; i<acl->NumPositiveEntries; i++) {
	l = snprintf(acltext + len, sizeof(acltext) - len, 
		     "%s %d\n", position->name, position->RightsMask);
	len += l;
	if (l == -1 || len >= sizeof(acltext)) {
	    fserr(PROGNAME, ERANGE, todir);
	    return;
	}
	position=position->next;
    }
    position=acl->neg;
    for(i=0; i<acl->NumNegativeEntries; i++) {
	l = snprintf(acltext + len, sizeof(acltext) - len, 
		     "%s %d\n", position->name, position->RightsMask);
	len += l;
	if (l == -1 || len >= sizeof(acltext)) {
	    fserr(PROGNAME, ERANGE, todir);
	    return;
	}
	position=position->next;
    }

    a_params.in_size=len;
    a_params.out_size=0;
    a_params.in=acltext;
    a_params.out=0;

    if(k_pioctl(todir,VIOCSETAL,&a_params,1)==-1) {
	fserr(PROGNAME, errno, todir);
	return;
    }
}

int
copyacl_cmd (int argc, char **argv)
{
    argc--;
    argv++;
    
    if (argc != 2) {
	printf ("fs: copyacl: Too many or too few arguments\n");
	return 0;
    }

    afs_copyacl (argv[0], argv[1]);

    return 0;
}
@


1.2
log
@fix snprintf misuse. ok bob@@ hin@@
@
text
@@


1.1
log
@Initial revision
@
text
@d54 1
a54 1
    if (len >= sizeof(acltext)) {
d63 1
a63 1
	if (len >= sizeof(acltext)) {
d74 1
a74 1
	if (len >= sizeof(acltext)) {
@


1.1.1.1
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@@
