head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.38
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.36
	OPENBSD_5_0:1.3.0.34
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.32
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.30
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	arla-20030805:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.08.23.06.21.49;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2003.08.05.09.05.48;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.04.28.42;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.11.14.40.36;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.04.14.20;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.05.08.20.59;	author hin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@the afs src tree can go away
@
text
@/*
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * $arla: fs_local.h,v 1.34 2003/01/17 03:06:09 lha Exp $
 */

#include "appl_locl.h"
#include <sl.h>
#include <kafs.h>
#include <parse_units.h>
#include <nnpfs/nnpfs_debug.h>
#include <nnpfs/nnpfs_deb.h>
#include <arladeb.h>

#include <vers.h>

#define MAXNAME 100
#define MAXSIZE 2048

int arladebug_cmd (int argc, char **argv);
int checkservers_cmd (int argc, char **argv);
int copyacl_cmd (int argc, char **argv);
int diskfree_cmd (int argc, char **argv);
int examine_cmd (int argc, char **argv);
int flush_cmd (int argc, char **argv);
int flushvolume_cmd (int argc, char **argv);
int getcache_cmd (int argc, char **argv);
int getcellstatus_cmd (int argc, char **argv);
int getfid_cmd (int argc, char **argv);
int getstatistics_cmd (int argc, char **argv);
int getprio_cmd (int argc, char **argv);
int listacl_cmd (int argc, char **argv);
int listcells_cmd (int argc, char **argv);
int suidcells_cmd (int argc, char **argv);
int listquota_cmd (int argc, char **argv);
int lsmount_cmd (int argc, char **argv);
int mkmount_cmd (int argc, char **argv);
int connect_cmd (int argc, char **argv);
int newcell_cmd (int argc, char **argv);
int quota_cmd (int argc, char **argv);
int rmmount_cmd (int argc, char **argv);
int setacl_cmd (int argc, char **argv);
int setcache_cmd (int argc, char **argv);
int setquota_cmd (int argc, char **argv);
int setcrypt_cmd (int argc, char **argv);
int strerror_cmd (int argc, char **argv);
int whereis_cmd (int argc, char **argv);
int whichcell_cmd (int argc, char **argv);
int wscell_cmd (int argc, char **argv);
int nnpfsdebug_cmd (int argc, char **argv);
int nnpfsdebug_print_cmd (int argc, char **argv);

struct Acl {
    int NumPositiveEntries;
    int NumNegativeEntries;
    struct AclEntry *pos;
    struct AclEntry *neg;
};

struct AclEntry {
    struct AclEntry *next;
    int32_t RightsMask;
    char name[MAXNAME];
};

struct VolumeStatus {
    int32_t   Vid;
    int32_t   ParentId;
    char      Online;
    char      InService;
    char      Blessed;
    char      NeedsSalvage;
    int32_t   Type;
    int32_t   MinQuota;
    int32_t   MaxQuota;
    int32_t   BlocksInUse;
    int32_t   PartBlocksAvail;
    int32_t   PartMaxBlocks;
};

/* Flags for cell status */
#define PRIMARY_CELL(flags)      ((flags) & CELLSTATUS_PRIMARY)
#define SETUID_HONORED(flags)	 ((flags) & CELLSTATUS_SETUID)
#define OBSOLETE_VERSION(flags)  ((flags) & CELLSTATUS_OBSOLETE_VL)

struct Acl *afs_getacl(char *path);
void afs_sysname(char *name);
void afs_lsmount(const char *path);
void afs_rmmount(const char *path);
void afs_quota (char *path);
int afs_connect(int32_t type);
int afs_getcrypt (void);
int afs_setcrypt (int n);
void afs_print_sysname (void);
void afs_set_sysname (const char *sys);

/* if this is set the program runs in interactive mode */
extern int fs_interactive;

/* this program needs __progname defined as a macro */
#define __progname "fs"
#define PROGNAME (fs_interactive ? "" : __progname" ")
@


1.3
log
@Merge
@
text
@@


1.2
log
@merge
@
text
@d35 1
a35 1
 * $KTH: fs_local.h,v 1.31 2000/10/03 00:07:40 lha Exp $
d38 10
d51 33
a116 3
void afs_copyacl(char *fromdir, char *todir);
void afs_listacl(char *path);
void afs_setacl(char *path, char *user, char *rights);
a118 3
void afs_listquota(char *path);
void afs_setmaxquota(char *path, int32_t maxquota);
void afs_whereis(char *path);
a120 4
void afs_examine(char *path);
int afs_setcache(int, int, int, int);
void afs_whichcell (char *path);
void afs_diskfree (char *path);
a121 3
void afs_getcellstatus (char *cell);
void afs_getfid(char *path);
int afs_listcells (int printservers, int resolve, int suid);
a126 1
void afs_wscell (void);
d128 2
a129 1
void skipline(char **curptr);
a133 3

/* if this is set the program runs in interactive mode */
static int fs_interactive = 0;
@


1.1
log
@New Arla userland from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d35 1
a35 1
 * $Id: fs_local.h,v 1.30 2000/06/10 12:33:12 assar Exp $
@


1.1.1.1
log
@Import of arla-0.35.7
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d40 1
a40 1
 * $KTH: fs_local.h,v 1.31 2000/10/03 00:07:40 lha Exp $
@


1.1.1.2
log
@Import of arla -current as of Aug 5 2003

ok todd@@ deraadt@@
@
text
@d35 1
a35 1
 * $arla: fs_local.h,v 1.34 2003/01/17 03:06:09 lha Exp $
a37 10
#include "appl_locl.h"
#include <sl.h>
#include <kafs.h>
#include <parse_units.h>
#include <nnpfs/nnpfs_debug.h>
#include <nnpfs/nnpfs_deb.h>
#include <arladeb.h>

#include <vers.h>

a40 33
int arladebug_cmd (int argc, char **argv);
int checkservers_cmd (int argc, char **argv);
int copyacl_cmd (int argc, char **argv);
int diskfree_cmd (int argc, char **argv);
int examine_cmd (int argc, char **argv);
int flush_cmd (int argc, char **argv);
int flushvolume_cmd (int argc, char **argv);
int getcache_cmd (int argc, char **argv);
int getcellstatus_cmd (int argc, char **argv);
int getfid_cmd (int argc, char **argv);
int getstatistics_cmd (int argc, char **argv);
int getprio_cmd (int argc, char **argv);
int listacl_cmd (int argc, char **argv);
int listcells_cmd (int argc, char **argv);
int suidcells_cmd (int argc, char **argv);
int listquota_cmd (int argc, char **argv);
int lsmount_cmd (int argc, char **argv);
int mkmount_cmd (int argc, char **argv);
int connect_cmd (int argc, char **argv);
int newcell_cmd (int argc, char **argv);
int quota_cmd (int argc, char **argv);
int rmmount_cmd (int argc, char **argv);
int setacl_cmd (int argc, char **argv);
int setcache_cmd (int argc, char **argv);
int setquota_cmd (int argc, char **argv);
int setcrypt_cmd (int argc, char **argv);
int strerror_cmd (int argc, char **argv);
int whereis_cmd (int argc, char **argv);
int whichcell_cmd (int argc, char **argv);
int wscell_cmd (int argc, char **argv);
int nnpfsdebug_cmd (int argc, char **argv);
int nnpfsdebug_print_cmd (int argc, char **argv);

d74 3
d79 3
d84 4
d89 3
d97 1
d99 1
a99 2
/* if this is set the program runs in interactive mode */
extern int fs_interactive;
d104 3
@


