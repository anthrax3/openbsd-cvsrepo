head	1.11;
access;
symbols
	OPENBSD_3_1:1.10.0.10
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.10.0.8
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.6
	OPENBSD_2_8:1.10.0.4
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	arla-0_9:1.1.1.1
	arla:1.1.1;
locks; strict;
comment	@.\" @;


1.11
date	2002.06.07.04.53.20;	author hin;	state dead;
branches;
next	1.10;

1.10
date	2000.04.27.23.04.36;	author hin;	state Exp;
branches;
next	1.9;

1.9
date	2000.03.29.21.43.05;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.19.17.56.59;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	2000.03.05.00.28.57;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.10.11.21.12.20;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.06.05.22.18.37;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	98.12.15.01.20.49;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	98.11.08.00.21.25;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	98.09.15.18.29.11;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.09.14.21.53.33;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.09.14.21.53.33;	author art;	state Exp;
branches;
next	;


desc
@@


1.11
log
@New buildsystem reordered a bit, so these go away; bye bye
@
text
@.\"	$OpenBSD: afsd.8,v 1.10 2000/04/27 23:04:36 hin Exp $
.\"
.Dd September 5, 1998
.Dt AFSD 8
.Os
.Sh NAME
.Nm afsd
.Nd AFS cache manager for xfs
.Sh SYNOPSIS
.Nm afsd
.Op Fl t | Fl -test
.Oo Fl c Ar string \*(Ba Xo
.Fl -conffile= Ns Ar string Oc
.Xc
.Oo Fl l Ar string \*(Ba Xo
.Fl -log= Ns Ar string Oc
.Xc
.Op Fl -debug= Ns Ar string
.Oo Fl d Ar string \*(Ba Xo
.Fl -device= Ns Ar string Oc
.Xc
.Op Fl -connected-mode= Ns Ar string
.Op Fl n | Fl -no-fork
.Oo Fl r Ar string \*(Ba Xo
.Fl -rxkad-level= Ns Ar string Oc
.Xc
.Oo Fl s Ar string \*(Ba Xo
.Fl -sysname= Ns Ar string Oc
.Xc
.Op Fl -root-volume= Ns Ar string
.Op Fl -port= Ns Ar number
.Op Fl z | Fl -recover
.Op Fl -cache-dir= Ns Ar string
.Op Fl -version
.Op Fl -help
.Op Ar device
.Sh DESCRIPTION
.Nm
runs on AFS client machines.
It is used to manage the file cache, fetch files
from AFS servers, handle callbacks and manage the authentication information
for users.
In normal cases you will not need to run it by yourself.
It is automatically started when
.Xr mount_xfs 8
is run.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Xo
.Fl t Ns ,
.Fl -test
.Xc
Run in test mode.
.It Xo
.Fl c Ar string Ns ,
.Fl -conffile= Ns Ar string
.Xc
Path to configuration file
.Po default: Pa /etc/afs/afsd.conf
.Pc .
.It Xo
.Fl l Ar string Ns ,
.Fl -log= Ns Ar string
.Xc
Where to write log [stderr|syslog|path] (default: stderr).
.It Xo
.Fl -debug= Ns Ar string
.Xc
What to write in the log (default: none).
.It Xo
.Fl d Ar string Ns ,
.Fl -device= Ns Ar string
.Xc
The XFS device to use
.Po default: Pa /dev/xfs0
.Pc .
.It Xo
.Fl -connected-mode= Ns Ar string
.Xc
Initial connected mode [conncted|fetch-only|disconnected].
.It Xo
.Fl n Ns ,
.Fl -no-fork
.Xc
Don't fork and daemonize.
.It Xo
.Fl r Ar string Ns ,
.Fl -rxkad-level= Ns Ar string
.Xc
The rxkad level to use [clear|auth|crypt] (default: auth).
.It Xo
.Fl s Ar string Ns ,
.Fl -sysname= Ns Ar string
.Xc
Set the sysname of this system.
.It Xo
.Fl -root-volume= Ns Ar string
.Xc
Name of the root volume.
.It Xo
.Fl -port= Ns Ar number
.Xc
Port number to use.
.It Xo
.Fl z Ns ,
.Fl -recover
.Xc
Don't recover state.
.It Xo
.Fl -cache-dir= Ns Ar string
.Xc
Cache directory
.Po default: Pa /var/spool/afs
.Pc .
.It Xo
.Fl -version
.Xc
Print version information.
.It Xo
.Fl -help
.Xc
Print usage information.
.El
.Sh FILES
.Bl -tag -width /etc/afs/CellServDB -compact
.It Pa /etc/afs/afsd.conf
default configuration for afsd
.It Pa /etc/afs/CellServDB
database with all known AFS servers
.It Pa /etc/afs/ThisCell
our default cell (where we get the root directory)
.It Pa /var/spool/afs
default cache directory
.El
.Pp
It is highly recommended that the default cache directory be a separate
file system.
When enough memory is available this could be a mfs to
drastically improve performance.
.Sh SEE ALSO
.Xr afsd 8 ,
.Xr mount_xfs 8 ,
.Xr vos 8 ,
.Xr fs 1 ,
.Xr pts 1 ,
.Xr CellServDB 5 ,
.Xr ThisCell 5 ,
.Xr SuidCells 5
.Sh BUGS
This code is still in the experimental stage and some bugs are present.
If
.Nm
happens to crash, it's recommended to restart it with the
.Fl z
flag.
Otherwise a corrupted cache can be reused.
@


1.10
log
@Crossreference newly added files
@
text
@d1 1
a1 1
.\"	$OpenBSD: afsd.8,v 1.9 2000/03/29 21:43:05 deraadt Exp $
@


1.9
log
@you missed a bunch of things
@
text
@d1 1
a1 1
.\"	$OpenBSD: afsd.8,v 1.8 2000/03/19 17:56:59 aaron Exp $
d146 4
a149 1
.Xr pts 1
@


1.8
log
@Remove hard sentence breaks. Add $OpenBSD$ tags where appropriate. Some other
cleanup along the way.
@
text
@d1 1
a1 1
.\"	$OpenBSD: afsd.8,v 1.7 2000/03/05 00:28:57 aaron Exp $
d142 5
a146 1
.Xr mount_xfs 8
@


1.7
log
@Finish standardizing options list introduction.
@
text
@d1 1
a1 1
.\"	$OpenBSD: afsd.8,v 1.6 1999/10/11 21:12:20 aaron Exp $
d3 1
a3 1
.Dd September  5, 1998
d39 2
a40 1
runs on AFS client machines. It is used to manage the file cache, fetch files
d42 3
a44 2
for users. In normal cases you will not need to run it by yourself. It is
automatically started when
d138 2
a139 1
filesystem. When enough memory is available this could be a mfs to
d144 2
a145 1
This code is still in the experimental stage and some bugs are present. If
d149 2
a150 1
flag. Otherwise a corrupted cache can be reused.
@


1.6
log
@mount_afs -> mount_xfs; jasoni@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: afsd.8,v 1.5 1999/06/05 22:18:37 aaron Exp $
d46 1
a46 1
Available options are as follows:
@


1.5
log
@remove trailing whitespace, some Nm cleanup
@
text
@d1 1
a1 1
.\"	$OpenBSD: afsd.8,v 1.4 1998/12/15 01:20:49 aaron Exp $
d43 1
a43 1
.Nm mount_afs
d139 1
a139 1
.Xr mount_afs 8
@


1.4
log
@always give .Nm macros an argument in SYNOPSIS sections; krw@@tcn.net
@
text
@d1 1
a1 1
.\"	$OpenBSD: afsd.8,v 1.3 1998/11/08 00:21:25 aaron Exp $
d38 1
a38 1
.Nm afsd
d116 1
a116 1
.Xc 
d142 1
a142 1
.Nm afsd
@


1.3
log
@usr.sbin/ man page repairs, a-i
@
text
@d1 1
a1 1
.\"	$OpenBSD: afsd.8,v 1.2 1998/09/15 18:29:11 art Exp $
d10 1
a10 1
.Nm
@


1.2
log
@change man page to reflect new paths
@
text
@d1 1
a1 1
.\"	$OpenBSD: afsd.8,v 1.1.1.1 1998/09/14 21:53:33 art Exp $
d8 1
a8 1
.Nd AFS cache manager for xfs.
d36 1
a36 1
.Ar [device]
d46 1
a46 1
Supported options:
d52 1
a52 1
run in test mode
d57 3
a59 1
path to configuration file (default: /etc/afs/afsd.conf)
d64 1
a64 1
where to write log [stderr|syslog|path] (default: stderr)
d68 1
a68 1
what to write in the log (default: none)
d73 3
a75 1
the XFS device to use (default: /dev/xfs0)
d79 1
a79 1
initial connected mode [conncted|fetch-only|disconnected]
d84 1
a84 1
don't fork and daemonize
d89 1
a89 1
the rxkad level to use [clear|auth|crypt] (default: auth)
d94 1
a94 1
set the sysname of this system
d98 1
a98 1
name of the root volume
d102 1
a102 1
port number to use
d107 1
a107 1
don't recover state
d111 3
a113 1
cache directory (default: /var/spool/afs)
d117 1
a117 1
print version information
d121 1
a121 1
print usage information
d124 10
a133 5
/etc/afs/afsd.conf - default configuration for afsd.
.Pp
/etc/afs/CellServDB - The "database" with all known AFS servers.
.Pp
/etc/afs/ThisCell - Our default cell (where we get the root directory).
d135 3
a137 3
/var/spool/afs - default cache directory. It is highly recommended that this
directory is a separate filesystem. When enough memory is available this
could be a mfs to drastically improve performance.
d139 1
a139 1
.Xr mount_afs 8 .
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d57 1
a57 1
path to configuration file (default: /etc/arla.conf)
d118 5
a122 1
/etc/arla.conf - default configuration for afsd.
@


1.1.1.1
log
@Initial version of Arla, a free implementation of an AFS cache-manager.
(second try, hopefully into the correct repository this time)
@
text
@@
