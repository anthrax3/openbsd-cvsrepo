head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.6
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.8
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2;
locks; strict;
comment	@# @;


1.9
date	2017.01.31.21.35.07;	author sthen;	state Exp;
branches;
next	1.8;
commitid	85Oh1MeSFQmptWuj;

1.8
date	2015.11.02.12.21.27;	author jsg;	state Exp;
branches;
next	1.7;
commitid	dXLprIb6RVxzLAjA;

1.7
date	2015.11.02.12.01.28;	author jsg;	state Exp;
branches;
next	1.6;
commitid	2Kxrjh03iAoDqOe1;

1.6
date	2014.11.22.18.15.41;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	3NByYuO1tptMzbXx;

1.5
date	2012.10.25.12.35.55;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2010.10.08.16.15.22;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2010.10.07.09.36.33;	author phessler;	state Exp;
branches;
next	1.2;

1.2
date	2010.06.10.16.14.04;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.03.16.49.00;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Teach ikectl to include extensions in the CSR, rather than just adding them
when signing the certificates by the local CA. This can make things easier if
you want to take a CSR from ikectl to another CA for signing, they often copy
extensions from the request.  ok reyk@@
@
text
@# $OpenBSD: ikeca.cnf,v 1.8 2015/11/02 12:21:27 jsg Exp $

CERT_C			= DE
CERT_ST			= Lower Saxony
CERT_L			= Hanover
CERT_O			= OpenBSD
CERT_OU			= iked
CERT_CN			=
CERT_EMAIL		= reyk@@openbsd.org

# default settings
CERTPATHLEN		= 1
CERTUSAGE		= digitalSignature,keyCertSign,cRLSign
EXTCERTUSAGE		= serverAuth,clientAuth
CERTIP			= 0.0.0.0
CERTFQDN		= nohost.nodomain
CADB			= index.txt
CASERIAL		= serial.txt
NSCERTTYPE		= server,client

[ req ]
#default_bits		= 2048
#default_md		= sha256
#default_keyfile 	= privkey.pem
distinguished_name	= req_distinguished_name
#attributes		= req_attributes
req_extensions		= $ENV::REQ_EXT

[ req_distinguished_name ]
countryName			= Country Name (2 letter code)
countryName_default		= $ENV::CERT_C
countryName_min			= 2
countryName_max			= 2

stateOrProvinceName		= State or Province Name (full name)
stateOrProvinceName_default	= $ENV::CERT_ST

localityName			= Locality Name (eg, city)
localityName_default		= $ENV::CERT_L

0.organizationName		= Organization Name (eg, company)
0.organizationName_default	= $ENV::CERT_O

# we can do this but it is not needed normally :-)
#1.organizationName		= Second Organization Name (eg, company)
#1.organizationName_default	= OpenBSD

organizationalUnitName		= Organizational Unit Name (eg, section)
organizationalUnitName_default	= $ENV::CERT_OU

commonName			= Common Name (eg, fully qualified host name)
commonName_max			= 64
commonName_default		= $ENV::CERT_CN

emailAddress			= Email Address
emailAddress_max		= 64
emailAddress_default		= $ENV::CERT_EMAIL

[ req_attributes ]
challengePassword		= A challenge password
challengePassword_min		= 4
challengePassword_max		= 20

unstructuredName		= An optional company name

[ x509v3_extensions ]
nsCaRevocationUrl		= http://127.0.0.1/ca-crl.pem
nsComment			= "This is a comment"

# under ASN.1, the 0 bit would be encoded as 80
nsCertType			= 0x40

[x509v3_CA]
basicConstraints=critical,CA:true,pathlen:$ENV::CERTPATHLEN
keyUsage=$ENV::CERTUSAGE

[x509v3_IPAddr]
keyUsage=$ENV::CERTUSAGE
nsCertType=$ENV::NSCERTTYPE
subjectAltName=IP:$ENV::CERTIP
extendedKeyUsage=$ENV::EXTCERTUSAGE

[x509v3_FQDN]
keyUsage=$ENV::CERTUSAGE
nsCertType=$ENV::NSCERTTYPE
subjectAltName=DNS:$ENV::CERTFQDN
extendedKeyUsage=$ENV::EXTCERTUSAGE

[ca]
default_ca			= CA_default

[CA_sign_policy]
countryName			= optional
stateOrProvinceName		= optional
localityName			= optional
organizationName		= optional
organizationalUnitName		= optional
commonName			= supplied
emailAddress			= optional

[CA_default]
database			= $ENV::CADB
serial				= $ENV::CASERIAL
default_md			= sha256
default_days			= 365
default_crl_days		= 365
unique_subject			= yes
email_in_dn			= yes
policy				= CA_sign_policy
@


1.8
log
@switch from using sha1 to sha256

As the ca section of the cnf file requires a default_md line
(unlike req) this change also requires updating the installed ikeca.cnf
or equivalent files.

Requested by and ok reyk@@ who also tested this against ios9 with iked.
@
text
@d1 1
a1 1
# $OpenBSD: ikeca.cnf,v 1.7 2015/11/02 12:01:28 jsg Exp $
d27 1
@


1.7
log
@sign csrs with openssl ca instead of x509 -req

This way openssl will add valid signed certs to the index file
which is required to use the builtin openssl OCSP server.

This change requires installing a new ikeca.cnf or updating
the default cnf files with equivalent sections.

Requested by and ok reyk@@
@
text
@d1 1
a1 1
# $OpenBSD: ikeca.cnf,v 1.6 2014/11/22 18:15:41 deraadt Exp $
d23 1
a23 1
#default_md		= sha1
d103 1
a103 1
default_md			= sha1
@


1.6
log
@/dev/random has created the same effect as /dev/arandom (and /dev/urandom)
for quite some time.  Mop up the last few, by using /dev/random where we
actually want it, or not even mentioning arandom where it is irrelevant.
@
text
@d1 1
a1 3
# $OpenBSD: ikeca.cnf,v 1.5 2012/10/25 12:35:55 reyk Exp $

RANDFILE		= /dev/random
d18 1
d22 3
a24 2
default_bits		= 2048
default_keyfile 	= privkey.pem
d91 9
d102 1
d104 1
d106 3
a108 1

@


1.5
log
@Remove support email address from the example that is intended for
customers for an existing company.
@
text
@d1 1
a1 1
# $OpenBSD: ikeca.cnf,v 1.4 2010/10/08 16:15:22 reyk Exp $
d3 1
a3 1
RANDFILE		= /dev/arandom
@


1.4
log
@set the client/server certificate options with all the common keyusage
and extendedkeyusage and nscerttype flags.  the ikectl CA can now be used
with all kinds of other vpn tools in addition to iked and isakmpd.

ok phessler@@
@
text
@d1 1
a1 2
# $OpenBSD: ikeca.cnf,v 1.3 2010/10/07 09:36:33 phessler Exp $
# $vantronix: ikeca.cnf,v 1.3 2010/05/31 12:26:26 reyk Exp $
d8 2
a9 2
CERT_O			= .vantronix
CERT_OU			= VPN
d11 1
a11 1
CERT_EMAIL		= support@@vantronix.com
@


1.3
log
@When we create a new CA, also create an empty (but valid) CRL list.
While here, set our used defaults in the config file.

OK reyk@@, jsg@@
@
text
@d1 1
a1 1
# $OpenBSD: ikeca.cnf,v 1.2 2010/06/10 16:14:04 jsg Exp $
d21 1
d78 2
d84 2
@


1.2
log
@Add a command to revoke a certificate and generate a CRL;
make the ca install command install the CRL as well.

discussed with reyk@@
@
text
@d1 1
a1 1
# $OpenBSD: ikeca.cnf,v 1.1 2010/06/03 16:49:00 reyk Exp $
d88 3
a90 1
database=$ENV::CADB
@


1.1
log
@Import iked, a new implementation of the IKEv2 protocol.

iked(8) is an automatic keying daemon for IPsec, like isakmpd(8), that
IPsec creates flows and SAs automatically.  Unlike isakmpd, iked(8)
implements the newer IKEv2 protocol instead of IKEv1/ISAKMP.  The
daemon is still work-in-progress and not enabled in the builds, but is
already able to establish IKEv2 sessions with some other IKEv2
implementations as a responder.

with lots of help and debugging by jsg@@
ok deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD$
d20 1
d83 7
@

