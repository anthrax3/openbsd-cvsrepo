head	1.30;
access;
symbols
	OPENBSD_5_6:1.29.0.22
	OPENBSD_5_6_BASE:1.29
	OPENBSD_5_5:1.29.0.20
	OPENBSD_5_5_BASE:1.29
	OPENBSD_5_4:1.29.0.16
	OPENBSD_5_4_BASE:1.29
	OPENBSD_5_3:1.29.0.14
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.29.0.12
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.10
	OPENBSD_5_0:1.29.0.8
	OPENBSD_5_0_BASE:1.29
	OPENBSD_4_9:1.29.0.6
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.29.0.4
	OPENBSD_4_8_BASE:1.29
	OPENBSD_4_7:1.29.0.2
	OPENBSD_4_7_BASE:1.29
	OPENBSD_4_6:1.28.0.10
	OPENBSD_4_6_BASE:1.28
	OPENBSD_4_5:1.28.0.6
	OPENBSD_4_5_BASE:1.28
	OPENBSD_4_4:1.28.0.4
	OPENBSD_4_4_BASE:1.28
	OPENBSD_4_3:1.28.0.2
	OPENBSD_4_3_BASE:1.28
	OPENBSD_4_2:1.26.0.4
	OPENBSD_4_2_BASE:1.26
	OPENBSD_4_1:1.26.0.2
	OPENBSD_4_1_BASE:1.26
	OPENBSD_4_0:1.25.0.8
	OPENBSD_4_0_BASE:1.25
	OPENBSD_3_9:1.25.0.6
	OPENBSD_3_9_BASE:1.25
	OPENBSD_3_8:1.25.0.4
	OPENBSD_3_8_BASE:1.25
	OPENBSD_3_7:1.25.0.2
	OPENBSD_3_7_BASE:1.25
	OPENBSD_3_6:1.24.0.4
	OPENBSD_3_6_BASE:1.24
	OPENBSD_3_5:1.24.0.2
	OPENBSD_3_5_BASE:1.24
	OPENBSD_3_4:1.23.0.2
	OPENBSD_3_4_BASE:1.23
	OPENBSD_3_3:1.21.0.4
	OPENBSD_3_3_BASE:1.21
	OPENBSD_3_2:1.21.0.2
	OPENBSD_3_2_BASE:1.21
	OPENBSD_3_1:1.19.0.2
	OPENBSD_3_1_BASE:1.19
	OPENBSD_3_0:1.15.0.2
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_8:1.11.0.6
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.4
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.9.0.4
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.30
date	2014.10.01.09.54.52;	author mpi;	state dead;
branches;
next	1.29;
commitid	qd1wWToTuOPbZjAS;

1.29
date	2009.10.27.23.59.54;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2007.09.14.14.29.20;	author chl;	state Exp;
branches;
next	1.27;

1.27
date	2007.09.11.16.30.59;	author gilles;	state Exp;
branches;
next	1.26;

1.26
date	2007.03.06.03.22.11;	author ray;	state Exp;
branches;
next	1.25;

1.25
date	2004.09.14.22.29.04;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2004.01.23.03.48.43;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2003.06.26.21.36.39;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2003.06.02.23.36.54;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2002.05.22.09.09.32;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2002.05.16.10.26.27;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2001.12.02.02.21.41;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2001.11.17.19.49.40;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2001.11.17.03.58.00;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2001.11.05.09.58.13;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2001.09.04.23.35.59;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2001.07.27.20.34.36;	author pvalchev;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.15.17.43.46;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	2001.02.14.03.27.15;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	99.08.06.20.41.08;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	99.04.28.17.52.44;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	98.07.10.08.06.55;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	98.07.08.21.45.04;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.01.21.00.25.26;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.12.15.05.57.20;	author bitblt;	state Exp;
branches;
next	1.5;

1.5
date	96.08.08.15.38.52;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.08.05.12.07.56;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.08.05.12.01.32;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.07.16.06.57.43;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.21;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.21;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.30
log
@tedu sliplogin and slstats to beging with the slip, slipping out of the
tree event.

Discussed with many at EuroBSDCon, ok deraadt@@, henning@@, claudio@@
@
text
@/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * sliplogin.c
 * [MUST BE RUN SUID, SLOPEN DOES A SUSER()!]
 *
 * This program initializes its own tty port to be an async TCP/IP interface.
 * It sets the line discipline to slip, invokes a shell script to initialize
 * the network interface, then pauses forever waiting for hangup.
 *
 * It is a remote descendant of several similar programs with incestuous ties:
 * - Kirk Smith's slipconf, modified by Richard Johnsson @@ DEC WRL.
 * - slattach, probably by Rick Adams but touched by countless hordes.
 * - the original sliplogin for 4.2bsd, Doug Kingston the mover behind it.
 *
 * There are two forms of usage:
 *
 * "sliplogin"
 * Invoked simply as "sliplogin", the program looks up the username
 * in the file /etc/slip.hosts.
 * If an entry is found, the line on fd0 is configured for SLIP operation
 * as specified in the file.
 *
 * "sliplogin IPhostlogin </dev/ttyb"
 * Invoked by root with a username, the name is looked up in the
 * /etc/slip.hosts file and if found fd0 is configured as in case 1.
 */

#include <sys/param.h>
#include <sys/socket.h>
#include <sys/file.h>
#include <sys/stat.h>
#include <sys/syslog.h>
#include <stdlib.h>
#include <unistd.h>
#include <netdb.h>
#include <signal.h>

#include <termios.h>
#include <sys/ioctl.h>
#include <ttyent.h>
#include <net/slip.h>

#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include "pathnames.h"

extern char **environ;

static char *restricted_environ[] = {
	"PATH=" _PATH_STDPATH,
	NULL
};

int	unit;
int	speed;
uid_t	uid;
char	loginargs[BUFSIZ];
char	loginfile[MAXPATHLEN];
char	loginname[BUFSIZ];

void
findid(char *name)
{
	FILE *fp;
	static char slopt[5][16];
	static char laddr[16];
	static char raddr[16];
	static char mask[16];
	char user[MAXLOGNAME];
	int n;

	strlcpy(loginname, name, sizeof loginname);
	if ((fp = fopen(_PATH_ACCESS, "r")) == NULL) {
		syslog(LOG_ERR, "%s: %m", _PATH_ACCESS);
		err(1, "%s", _PATH_ACCESS);
	}
	while (fgets(loginargs, sizeof(loginargs), fp)) {
		if (ferror(fp))
			break;
		loginargs[strcspn(loginargs, "#")] = '\0';
		loginargs[strcspn(loginargs, "\n")] = '\0';
		n = sscanf(loginargs, "%15s%*[ \t]%15s%*[ \t]%15s%*[ \t]%15s%*[ \t]%15s%*[ \t]%15s%*[ \t]%15s%*[ \t]%15s%*[ \t]%15s\n",
		    user, laddr, raddr, mask, slopt[0], slopt[1],
		    slopt[2], slopt[3], slopt[4]);
		if (strcmp(user, name) != 0)
			continue;

		/*
		 * we've found the guy we're looking for -- see if
		 * there's a login file we can use.  First check for
		 * one specific to this host.  If none found, try for
		 * a generic one.
		 */
		(void)snprintf(loginfile, sizeof loginfile, "%s.%s",
		    _PATH_LOGIN, name);
		if (access(loginfile, R_OK|X_OK) != 0) {
			(void)strlcpy(loginfile, _PATH_LOGIN, sizeof(loginfile));
			if (access(loginfile, R_OK|X_OK)) {
				fputs("access denied - no login file\n",
				    stderr);
				syslog(LOG_ERR,
				    "access denied for %s - no %s",
				    name, _PATH_LOGIN);
				exit(5);
			}
		}

		(void) fclose(fp);
		return;
	}
	syslog(LOG_ERR, "SLIP access denied for %s", name);
	errx(1, "SLIP access denied for %s", name);
	/* NOTREACHED */
}

const char *
sigstr(int s)
{
	if (s > 0 && s < NSIG)
		return(sys_signame[s]);
	else {
		static char buf[32];
		(void)snprintf(buf, sizeof buf, "sig %d", s);
		return(buf);
	}
}

volatile sig_atomic_t die;

/* ARGSUSED */
void
hup_handler(int signo)
{
	die = 1;
}

int
main(int argc, char *argv[])
{
	int fd, s, ldisc, odisc;
	char *name;
	struct termios tios, otios;
	char logoutfile[MAXPATHLEN], logincmd[2*BUFSIZ+32];
	sigset_t emptyset;

	environ = restricted_environ; /* minimal protection for system() */

	if ((name = strrchr(argv[0], '/')) == NULL)
		name = argv[0];
	else
		name++;
	closefrom(3);
	if (argc > 1 && strlen(argv[1]) > MAXLOGNAME)
		errx(1, "login %s too long", argv[1]);
	openlog(name, LOG_PID, LOG_DAEMON);
	uid = getuid();
	if (argc > 1) {
		findid(argv[1]);

		/*
		 * Disassociate from current controlling terminal, if any,
		 * and ensure that the slip line is our controlling terminal.
		 */
		switch (fork()) {
		case -1:
			perror("fork");
			exit(1);
		case 0:
			break;
		default:
			exit(0);
		}
		if (setsid() == -1)
			perror("setsid");
		if (argc > 2) {
			if ((fd = open(argv[2], O_RDWR)) == -1) {
				perror(argv[2]);
				exit(2);
			}
			(void) dup2(fd, 0);
			if (fd > 2)
				close(fd);
		}
#ifdef TIOCSCTTY
		if (ioctl(STDIN_FILENO, TIOCSCTTY, (caddr_t)0) != 0)
			perror("ioctl (TIOCSCTTY)");
#endif
	} else {
		if ((name = getlogin()) == NULL) {
			syslog(LOG_ERR,
			    "access denied - getlogin returned 0");
			errx(1, "access denied - no username");
		}
		findid(name);
	}
	if (!isatty(STDIN_FILENO)) {
		syslog(LOG_ERR, "stdin not a tty");
		errx(1, "stdin not a tty");
	}
	(void) fchmod(STDIN_FILENO, 0600);
	warnx("starting slip login for %s", loginname);
	/* set up the line parameters */
	if (tcgetattr(STDIN_FILENO, &tios) < 0) {
		syslog(LOG_ERR, "tcgetattr: %m");
		exit(1);
	}
	otios = tios;
	cfmakeraw(&tios);
	tios.c_iflag &= ~IMAXBEL;
	if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &tios) < 0) {
		syslog(LOG_ERR, "tcsetattr: %m");
		exit(1);
	}
	speed = cfgetispeed(&tios);
	/* find out what ldisc we started with */
	if (ioctl(STDIN_FILENO, TIOCGETD, (caddr_t)&odisc) < 0) {
		syslog(LOG_ERR, "ioctl(TIOCGETD) (1): %m");
		exit(1);
	}
	ldisc = SLIPDISC;
	if (ioctl(STDIN_FILENO, TIOCSETD, (caddr_t)&ldisc) < 0) {
		syslog(LOG_ERR, "ioctl(TIOCSETD): %m");
		exit(1);
	}
	/* find out what unit number we were assigned */
	if (ioctl(STDIN_FILENO, SLIOCGUNIT, (caddr_t)&unit) < 0) {
		syslog(LOG_ERR, "ioctl (SLIOCGUNIT): %m");
		exit(1);
	}
	(void) signal(SIGHUP, hup_handler);
	(void) signal(SIGTERM, hup_handler);

	syslog(LOG_INFO, "attaching slip unit %d for %s", unit, loginname);
	(void)snprintf(logincmd, sizeof(loginargs), "%s %d %d %s", loginfile,
	    unit, speed, loginargs);

	/*
	 * aim stdout and errout at /dev/null so logincmd output won't
	 * babble into the slip tty line.
	 */
	(void) close(1);
	if ((fd = open(_PATH_DEVNULL, O_WRONLY)) != 1) {
		if (fd < 0) {
			syslog(LOG_ERR, "open /dev/null: %m");
			exit(1);
		}
		(void) dup2(fd, 1);
		(void) close(fd);
	}
	(void) dup2(1, 2);

	/*
	 * Run login and logout scripts as root (real and effective);
	 * current route(8) is setuid root, and checks the real uid
	 * to see whether changes are allowed (or just "route get").
	 */
	(void) setuid(0);
	if ((s = system(logincmd))) {
		syslog(LOG_ERR, "%s login failed: exit status %d from %s",
		    loginname, s, loginfile);
		(void) ioctl(STDIN_FILENO, TIOCSETD, (caddr_t)&odisc);
		(void) tcsetattr(STDIN_FILENO, TCSAFLUSH, &otios);
		exit(6);
	}

	/* twiddle thumbs until we get a signal; allow user to kill */
	seteuid(uid);
	sigemptyset(&emptyset);
	while (die == 0)
		sigsuspend(&emptyset);

	seteuid(0);
	(void)snprintf(logoutfile, sizeof logoutfile, "%s.%s",
	    _PATH_LOGOUT, loginname);
	if (access(logoutfile, R_OK|X_OK) != 0)
		(void)strlcpy(logoutfile, _PATH_LOGOUT,
		    sizeof(logoutfile));
	if (access(logoutfile, R_OK|X_OK) == 0) {
		char logincmd[2*MAXPATHLEN+32];

		(void) snprintf(logincmd, sizeof logincmd, "%s %d %d %s",
		    logoutfile, unit, speed, loginargs);
		(void) system(logincmd);
	}

	close(0);
	syslog(LOG_INFO, "closed %s slip unit %d (%s)",
	    loginname, unit, sigstr(s));
	exit(1);
}
@


1.29
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@@


1.28
log
@remove some warnings:
unused variable `variable'
`variable' might be used uninitialized in this function

ok gilles@@ ray@@
@
text
@a29 11
#ifndef lint
char copyright[] =
"@@(#) Copyright (c) 1990 The Regents of the University of California.\n\
 All rights reserved.\n";
#endif /* not lint */

#ifndef lint
/*static char sccsid[] = "from: @@(#)sliplogin.c	5.6 (Berkeley) 3/2/91";*/
static char rcsid[] = "$Id: sliplogin.c,v 1.27 2007/09/11 16:30:59 gilles Exp $";
#endif /* not lint */

@


1.27
log
@use strcspn to properly overwrite '\n' in fgets returned buffer

ok pyr@@, ray@@, millert@@, moritz@@, chl@@
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: sliplogin.c,v 1.26 2007/03/06 03:22:11 ray Exp $";
d112 1
a112 1
	char user[MAXLOGNAME], *p;
@


1.26
log
@- Pass full buffer to fgets().
- Use sizeof(buf) instead of BUFSIZ.
- Only overwrite '\n'.

From Charles Longeau.

OK millert@@ and moritz@@.
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: sliplogin.c,v 1.25 2004/09/14 22:29:04 deraadt Exp $";
d123 2
a124 4
		if ((p = strchr(loginargs, '#')))
			*p = '\0';
		if ((p = strchr(loginargs, '\n')))
			*p = '\0';
@


1.25
log
@ARGSUSED before signal handler with unused signo
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: sliplogin.c,v 1.24 2004/01/23 03:48:43 deraadt Exp $";
d120 1
a120 1
	while (fgets(loginargs, sizeof(loginargs) - 1, fp)) {
@


1.24
log
@Use closefrom(); ok millert tedu
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: sliplogin.c,v 1.23 2003/06/26 21:36:39 deraadt Exp $";
d175 1
d177 1
a177 1
hup_handler(int s)
@


1.23
log
@ansi and protos
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: sliplogin.c,v 1.22 2003/06/02 23:36:54 millert Exp $";
d196 1
a196 3
	s = getdtablesize();
	for (fd = 3 ; fd < s ; fd++)
		(void) close(fd);
@


1.22
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d38 1
a38 1
static char rcsid[] = "$Id: sliplogin.c,v 1.21 2002/05/22 09:09:32 deraadt Exp $";
d105 1
a105 2
findid(name)
	char *name;
d162 1
a162 2
sigstr(s)
	int s;
d176 1
a176 2
hup_handler(s)
	int s;
d182 1
a182 3
main(argc, argv)
	int argc;
	char *argv[];
@


1.21
log
@more strcpy/sprintf death; mpech ok
@
text
@d13 1
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d38 1
a38 1
static char rcsid[] = "$Id: sliplogin.c,v 1.20 2002/05/16 10:26:27 deraadt Exp $";
@


1.20
log
@remove non-POSIX stuff; miod ok
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.19 2001/12/02 02:21:41 deraadt Exp $";
d174 1
a174 1
		(void)sprintf(buf, "sig %d", s);
@


1.19
log
@pretty much KNF or simplification; millert ok
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.18 2001/11/17 19:49:40 deraadt Exp $";
a80 4
#if BSD >= 199006
#define POSIX
#endif
#ifdef POSIX
a83 3
#else
#include <sgtty.h>
#endif
a194 1
#ifdef POSIX
a195 3
#else
	struct sgttyb tty, otty;
#endif
a197 1
	extern uid_t getuid();
a218 1
#ifdef POSIX
a229 13
#else
		if ((fd = open("/dev/tty", O_RDONLY, 0)) >= 0) {
			extern char *ttyname();

			(void) ioctl(fd, TIOCNOTTY, (caddr_t)0);
			(void) close(fd);
			/* open slip tty again to acquire as controlling tty? */
			fd = open(ttyname(0), O_RDWR, 0);
			if (fd >= 0)
				(void) close(fd);
		}
		(void) setpgrp(0, getpid());
#endif
a243 2
		extern char *getlogin();

a256 1
#ifdef POSIX
a269 14
#else
	/* set up the line parameters */
	if (ioctl(STDIN_FILENO, TIOCGETP, (caddr_t)&tty) < 0) {
		syslog(LOG_ERR, "ioctl (TIOCGETP): %m");
		exit(1);
	}
	otty = tty;
	speed = tty.sg_ispeed;
	tty.sg_flags = RAW | ANYP;
	if (ioctl(STDIN_FILENO, TIOCSETP, (caddr_t)&tty) < 0) {
		syslog(LOG_ERR, "ioctl (TIOCSETP): %m");
		exit(1);
	}
#endif
a316 1
#ifdef POSIX
a317 3
#else
		(void) ioctl(STDIN_FILENO, TIOCSETP, (caddr_t)&otty);
#endif
d341 1
a341 1
	(void) close(0);
@


1.18
log
@use volatile sig_atomic_t where possible; simply volatile i other places
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.17 2001/11/17 03:58:00 deraadt Exp $";
d74 1
d76 2
d140 1
a140 1
		    user, laddr, raddr, mask, slopt[0], slopt[1], 
d157 1
a157 1
				      stderr);
d159 2
a160 2
				       "access denied for %s - no %s",
				       name, _PATH_LOGIN);
d195 1
d207 1
a207 1
	char logincmd[2*BUFSIZ+32];
d356 1
a356 1
	if (s = system(logincmd)) {
d358 1
a358 1
		       loginname, s, loginfile);
d371 1
a371 24
	while (1) {
		if (die) {
			char logoutfile[MAXPATHLEN];

			seteuid(0);
			(void)snprintf(logoutfile, sizeof logoutfile, "%s.%s",
			    _PATH_LOGOUT, loginname);
			if (access(logoutfile, R_OK|X_OK) != 0)
				(void)strlcpy(logoutfile, _PATH_LOGOUT,
				    sizeof(logoutfile));
			if (access(logoutfile, R_OK|X_OK) == 0) {
				char logincmd[2*MAXPATHLEN+32];

				(void) snprintf(logincmd, sizeof logincmd,
				    "%s %d %d %s",
				    logoutfile, unit, speed, loginargs);
				(void) system(logincmd);
			}
			(void) close(0);
			syslog(LOG_INFO, "closed %s slip unit %d (%s)",
			    loginname, unit, sigstr(s));
			exit(1);
			/* NOTREACHED */
		}
a372 1
	}
d374 18
a391 1
	/* NOTREACHED */
@


1.17
log
@fix signal race issues
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.16 2001/11/05 09:58:13 deraadt Exp $";
d183 1
a183 1
int die;
@


1.16
log
@some syslog_r uses in signal handlers
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.15 2001/09/04 23:35:59 millert Exp $";
d183 2
d189 1
a189 20
	char logoutfile[MAXPATHLEN];
	struct syslog_data sdata = SYSLOG_DATA_INIT;

	seteuid(0);
	(void)snprintf(logoutfile, sizeof logoutfile, "%s.%s",
	    _PATH_LOGOUT, loginname);
	if (access(logoutfile, R_OK|X_OK) != 0)
		(void)strlcpy(logoutfile, _PATH_LOGOUT, sizeof(logoutfile));
	if (access(logoutfile, R_OK|X_OK) == 0) {
		char logincmd[2*MAXPATHLEN+32];

		(void) snprintf(logincmd, sizeof logincmd, "%s %d %d %s",
		    logoutfile, unit, speed, loginargs);
		(void) system(logincmd);	/* XXX major race!! */
	}
	(void) close(0);
	syslog_r(LOG_INFO, &sdata, "closed %s slip unit %d (%s)",
	    loginname, unit, sigstr(s));
	_exit(1);
	/* NOTREACHED */
d367 24
a390 1
	while (1)
d392 1
@


1.15
log
@Replace the deprecated BSD sigsetmask/sigblock/sigpause functions with their POSIX counterparts.
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.14 2001/07/27 20:34:36 pvalchev Exp $";
d151 1
a151 1
			(void)strcpy(loginfile, _PATH_LOGIN);
d188 1
d194 1
a194 1
		(void)strcpy(logoutfile, _PATH_LOGOUT);
d200 1
a200 1
		(void) system(logincmd);
d203 3
a205 3
	syslog(LOG_INFO, "closed %s slip unit %d (%s)", loginname, unit,
	       sigstr(s));
	exit(1);
@


1.14
log
@Wall cleanup
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.13 2001/06/15 17:43:46 mickey Exp $";
d220 1
d382 1
d384 1
a384 1
		sigpause(0);
@


1.13
log
@strncpy vs strlcpy and strchr fix; fromBrian Poole <raj@@pandemonium.cerias.purdue.edu>
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.12 2001/02/14 03:27:15 deraadt Exp $";
d122 1
a122 1
	int i, j, n;
@


1.12
log
@fat utmp; ianm@@cit.uws.edu.au
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.11 1999/08/06 20:41:08 deraadt Exp $";
d124 1
a124 2
	(void)strncpy(loginname, name, sizeof loginname-1);
	loginname[sizeof loginname -1] = '\0';
d226 2
@


1.11
log
@uid_t and gid_t, and use %u
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.10 1999/04/28 17:52:44 deraadt Exp $";
d121 1
a121 1
	char user[16], *p;
@


1.10
log
@check correct arg; garath@@ntplx.net
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.9 1998/07/10 08:06:55 deraadt Exp $";
d107 1
a107 1
int	uid;
@


1.9
log
@do not syslog() with "\n"; skipped smtpd/named/ipmon; 12 minutes of dabbling
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.8 1998/07/08 21:45:04 deraadt Exp $";
d230 2
a231 2
	if (strlen(argv[0]) > MAXLOGNAME)
		errx(1, "login %s too long", argv[0]);
@


1.8
log
@handle fork() failure; mrg
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.7 1998/01/21 00:25:26 deraadt Exp $";
d127 1
a127 1
		syslog(LOG_ERR, "%s: %m\n", _PATH_ACCESS);
d157 1
a157 1
				       "access denied for %s - no %s\n",
d166 1
a166 1
	syslog(LOG_ERR, "SLIP access denied for %s\n", name);
d203 1
a203 1
	syslog(LOG_INFO, "closed %s slip unit %d (%s)\n", loginname, unit,
d284 1
a284 1
			    "access denied - getlogin returned 0\n");
d341 1
a341 1
	syslog(LOG_INFO, "attaching slip unit %d for %s\n", unit, loginname);
@


1.7
log
@avoid oflow which appears not to matter
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.6 1996/12/15 05:57:20 bitblt Exp $";
d242 7
a248 1
		if (fork() > 0)
d250 1
@


1.6
log
@FIxed an ofF-by-one error.
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.5 1996/08/08 15:38:52 millert Exp $";
d230 2
@


1.5
log
@length arg goes last.
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.4 1996/08/05 12:07:56 deraadt Exp $";
d124 2
a125 1
	(void)strncpy(loginname, name, sizeof loginname);
@


1.4
log
@avoid buf overflow
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.3 1996/08/05 12:01:32 deraadt Exp $";
d124 1
a124 1
	(void)strncpy(loginname, sizeof loginname, name);
@


1.3
log
@no oflow of loginname
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.2 1996/07/16 06:57:43 deraadt Exp $";
d148 2
a149 1
		(void)sprintf(loginfile, "%s.%s", _PATH_LOGIN, name);
d190 2
a191 1
	(void)sprintf(logoutfile, "%s.%s", _PATH_LOGOUT, loginname);
d197 2
a198 2
		(void) sprintf(logincmd, "%s %d %d %s", logoutfile, unit, speed,
			      loginargs);
@


1.2
log
@patch environ, buffer limit, parse # better, let user kill with signal; some parts from freebsd
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.1.1.1 1995/10/18 08:48:21 deraadt Exp $";
d124 1
a124 1
	(void)strcpy(loginname, name);
@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: sliplogin.c,v 1.11 1995/06/19 22:52:25 jtc Exp $";
d98 7
d121 1
a121 1
	char user[16];
d132 4
d137 2
a138 4
                        user, laddr, raddr, mask, slopt[0], slopt[1], 
			slopt[2], slopt[3], slopt[4]);
		if (user[0] == '#' || isspace(user[0]))
			continue;
d188 1
d220 2
d239 1
a239 1
		if (setsid() < 0)
d330 3
a332 2
	(void)sprintf(logincmd, "%s %d %d %s", loginfile, unit, speed,
		      loginargs);
d366 2
a367 1
	/* twiddle thumbs until we get a signal */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
