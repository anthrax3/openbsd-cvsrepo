head	1.6;
access;
symbols
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.4.0.8
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.6
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2001.05.30.02.12.51;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2001.01.17.06.01.25;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	99.03.31.05.50.19;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	98.01.26.04.16.58;	author dgregor;	state Exp;
branches;
next	1.2;

1.2
date	96.07.18.05.00.23;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	96.05.10.21.40.57;	author dm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@/*	$OpenBSD: ipresend.c,v 1.5 2001/01/17 06:01:25 fgsch Exp $	*/

/*
 * ipresend.c (C) 1995-1998 Darren Reed
 *
 * This was written to test what size TCP fragments would get through
 * various TCP/IP packet filters, as used in IP firewalls.  In certain
 * conditions, enough of the TCP header is missing for unpredictable
 * results unless the filter is aware that this can happen.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that this notice is preserved and due credit is given
 * to the original author and the contributors.
 */
#if !defined(lint)
static const char sccsid[] = "%W% %G% (C)1995 Darren Reed";
static const char rcsid[] = "@@(#)$IPFilter: ipresend.c,v 2.1 1999/08/04 17:31:05 darrenr Exp $";
#endif
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <netdb.h>
#include <string.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>
#include <netinet/ip_icmp.h>
#ifndef	linux
#include <netinet/ip_var.h>
#endif
#include "ipsend.h"


extern	char	*optarg;
extern	int	optind;
#ifndef	NO_IPF
extern	struct	ipread	snoop, pcap, etherf, iphex, tcpd, iptext;
#endif

int	opts = 0;
#ifndef	DEFAULT_DEVICE
# ifdef	linux
char	default_device[] = "eth0";
# else
#  ifdef	sun
char	default_device[] = "le0";
#  else
#   ifdef	ultrix
char	default_device[] = "ln0";
#   else
#    ifdef	__bsdi__
char	default_device[] = "ef0";
#    else
#     ifdef	__sgi
char	default_device[] = "ec0";
#     else
char	default_device[] = "lan0";
#     endif
#    endif
#   endif
#  endif
# endif
#else
char	default_device[] = DEFAULT_DEVICE;
#endif


static	void	usage __P((char *));
int	main __P((int, char **));


static void usage(prog)
char	*prog;
{
	fprintf(stderr, "Usage: %s [options] <-r filename|-R filename>\n\
\t\t-r filename\tsnoop data file to resend\n\
\t\t-R filename\tlibpcap data file to resend\n\
\toptions:\n\
\t\t-d device\tSend out on this device\n\
\t\t-g gateway\tIP gateway to use if non-local dest.\n\
\t\t-m mtu\t\tfake MTU to use when sending out\n\
", prog);
	exit(1);
}


int main(argc, argv)
int	argc;
char	**argv;
{
	struct	in_addr	gwip;
	struct	ipread	*ipr = NULL;
	char	*name =  argv[0], *gateway = NULL, *dev = NULL;
	char	*resend = NULL;
	int	mtu = 1500, c;

	while ((c = getopt(argc, argv, "EHPRSTXd:g:m:r:")) != -1)
		switch (c)
		{
		case 'd' :
			dev = optarg;
			break;
		case 'g' :
			gateway = optarg;
			break;
		case 'm' :
			mtu = atoi(optarg);
			if (mtu < 28)
			    {
				fprintf(stderr, "mtu must be > 28\n");
				exit(1);
			    }
		case 'r' :
			resend = optarg;
			break;
		case 'R' :
			opts |= OPT_RAW;
			break;
#ifndef	NO_IPF
		case 'E' :
			ipr = &etherf;
			break;
		case 'H' :
			ipr = &iphex;
			break;
		case 'P' :
			ipr = &pcap;
			break;
		case 'S' :
			ipr = &snoop;
			break;
		case 'T' :
			ipr = &tcpd;
			break;
		case 'X' :
			ipr = &iptext;
			break;
#endif
		default :
			fprintf(stderr, "Unknown option \"%c\"\n", c);
			usage(name);
		}

	if (!ipr || !resend)
		usage(name);

	gwip.s_addr = 0;
	if (gateway && resolve(gateway, (char *)&gwip) == -1)
	    {
		fprintf(stderr,"Cant resolve %s\n", gateway);
		exit(2);
	    }

	if (!dev)
		dev = default_device;

	printf("Device:  %s\n", dev);
	printf("Gateway: %s\n", inet_ntoa(gwip));
	printf("mtu:     %d\n", mtu);

	return ip_resend(dev, mtu, ipr, gwip, resend);
}
@


1.5
log
@2nd part of the ipf code; need more testing.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.4
log
@name default if, plus another bug; garath@@ntplx.net
@
text
@d1 2
a2 1
/*     $OpenBSD: ipresend.c,v 1.3 1998/01/26 04:16:58 dgregor Exp $     */
d4 1
a4 1
 * ipresend.c (C) 1995-1997 Darren Reed
d17 1
a17 1
static const char rcsid[] = "@@(#)$Id: ipresend.c,v 1.3 1998/01/26 04:16:58 dgregor Exp $";
d51 1
a51 1
#  if defined(sun) || defined(__OpenBSD__)
d150 1
a150 1
	if (!ipr)
@


1.3
log
@IPF 3.2.3
@
text
@d1 1
a1 1
/*     $OpenBSD$     */
d16 1
a16 1
static const char rcsid[] = "@@(#)$Id: ipresend.c,v 2.0.2.9 1997/10/12 09:48:37 darrenr Exp $";
d50 1
a50 1
#  ifdef	sun
d149 1
a149 1
	if (!ipr || !resend)
@


1.2
log
@ipfilter 3.1.0
@
text
@d1 1
d3 1
a3 1
 * ipsend.c (C) 1995 Darren Reed
d10 3
a12 7
 * The author provides this program as-is, with no gaurantee for its
 * suitability for any specific purpose.  The author takes no responsibility
 * for the misuse/abuse of this program and provides it for the sole purpose
 * of testing packet filter policies.  This file maybe distributed freely
 * providing it is not modified and that this notice remains in tact.
 *
 * This was written and tested (successfully) on SunOS 4.1.x.
d14 3
a16 2
#ifndef	lint
static	char	sccsid[] = "%W% %G% (C)1995 Darren Reed";
d19 2
d27 1
a34 6
#include <netinet/tcpip.h>
#endif
#include "ip_compat.h"
#ifdef	linux
#include <linux/sockios.h>
#include "tcpip.h"
d36 1
a36 1
#include "ipt.h"
d41 1
d43 1
d59 3
d63 1
d73 5
a77 1
void	usage(prog)
d92 1
a92 1
main(argc, argv)
d99 2
a100 2
	char	c, *s, *resend = NULL;
	int	mtu = 1500;
d102 1
a102 1
	while ((c = getopt(argc, argv, "EHPSTXd:g:m:r:")) != -1)
d121 4
d143 1
@


1.1
log
@ipfilter 3.0.4
@
text
@d18 1
a18 1
static	char	sccsid[] = "@@(#)ipresend.c	1.1 1/11/96 (C)1995 Darren Reed";
d46 1
a46 1
extern	struct	ipread	snoop, pcap;
d48 3
a50 1
#ifdef	linux
d52 2
a53 2
#else
# ifdef	sun
d55 2
a56 2
# else
#  ifdef	ultrix
d58 2
a59 2
#  else
#   ifdef	__bsdi__
d61 1
a61 1
#   else
d63 1
d67 2
d97 1
a97 1
	while ((c = getopt(argc, argv, "R:d:g:m:r:")) != -1)
a99 4
		case 'R' :
			resend = optarg;
			ipr = &pcap;
			break;
d115 11
d128 5
@
