head	1.11;
access;
symbols
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.11
date	2001.05.30.02.12.51;	author deraadt;	state dead;
branches;
next	1.10;

1.10
date	2000.11.09.17.53.15;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	2000.11.08.19.37.34;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.23.03.13.33;	author ericj;	state Exp;
branches;
next	1.7;

1.7
date	2000.03.19.17.57.05;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.14.21.31.36;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.10.10.17.50.03;	author ericj;	state Exp;
branches;
next	1.4;

1.4
date	99.10.07.06.35.49;	author ericj;	state Exp;
branches;
next	1.3;

1.3
date	99.05.24.11.59.43;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	99.05.15.02.17.56;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	98.01.26.04.16.57;	author dgregor;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@./" $OpenBSD: ipresend.1,v 1.10 2000/11/09 17:53:15 aaron Exp $
.Dd October 9, 1999
.Dt IPRESEND 1
.Os
.Sh NAME
.Nm ipresend
.Nd resend IP packets out to network
.Sh SYNOPSIS
.Nm ipsend
.Op Fl EHPRSTX
.Op Fl d Ar device
.Op Fl g Ar gateway
.Op Fl m Ar mtu
.Op Fl r Ar filename
.Sh DESCRIPTION
.Nm
was designed to allow captured packets to be resent
onto the network for use in testing.
.Nm
supports a
number of different file formats as input, including saved snoop and
.Xr tcpdump 8
binary data.
.Pp
.Nm
must be run as root.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl d Ar interface
Set the interface name to be the name supplied.
This is useful with the
.Fl P ,
.Fl S ,
.Fl T ,
and
.Fl E
options, where it is not otherwise possible
to associate a packet with an interface.
Normal
.Sq text packets
can override this setting.
.It Fl g Ar gateway
Specify the hostname of the gateway through which to route packets.
This is required whenever the destination host isn't directly attached to the
same network as the host from which you're sending.
.It Fl m Ar mtu
Set the MTU used when sending out packets to
.Ar mtu .
This option allows you
to set a fake MTU, allowing the simulation of network interfaces with small
MTU's.
.It Fl r Ar filename
Specify the filename from which to take input.
Default is
.Va stdin .
.It Fl E
The input file is to be text output from etherfind.
The text formats which
are currently supported are those which result from the following etherfind
option combinations:
.Bd -literal -offset indent
etherfind -n
etherfind -n -t
.Ed
.It Fl H
The input file is to be hex digits, representing the binary makeup of the
packet.
No length correction is made if an incorrect length is put in
the IP header.
.It Fl P
The input file specified by
.Fl r
is a binary file produced using libpcap
(i.e.,
.Xr tcpdump 8
version 3).
Packets are read from this file as being input (for rule purposes).
.It Fl R
When sending packets out, send them out
.Sq raw
(the way they came in).
The only real significance here is that it will expect the link layer (i.e.,
Ethernet) headers to be prepended to the IP packet being output.
.It Fl S
The input file is to be in
.Sq snoop
format (see
.Tn RFC 1761 ) .
Packets are read
from this file and used as input from any interface.
This is perhaps the most useful input type, currently.
.It Fl T
The input file is to be text output from
.Xr tcpdump 8 .
The text formats which
are currently supported are those which result from the following
.Xr tcpdump 8
option combinations:
.Bd -literal -offset indent
tcpdump -n
tcpdump -nq
tcpdump -nqt
tcpdump -nqtt
tcpdump -nqte
.Ed
.It Fl X
The input file is composed of text descriptions of IP packets.
.El
.Sh SEE ALSO
.Xr ipftest 1 ,
.Xr ipresend 1 ,
.Xr iptest 1 ,
.Xr bpf 4 ,
.Xr tcpdump 8
.Sh BUGS
Not all of the input formats are sufficiently capable of introducing a
wide enough variety of packets for them to be all useful in testing.
If you find any, please send email to me at darrenr@@cyber.com.au
@


1.10
log
@Change all option list specifications to ".Bl -tag -width Ds". Most man
pages just needed their -width parameter tweaked to "Ds", which provides
a nice width of 6 constant characters. For consistency more than anything.
@
text
@d1 1
a1 1
./" $OpenBSD: ipresend.1,v 1.9 2000/11/08 19:37:34 aaron Exp $
@


1.9
log
@- Get rid of ".Sh OPTIONS" and always use the standard options list intro.
- Move some BUGS/CAVEATS to the end of the man pages where they should go.
- Correct some .Nm usage.
@
text
@d1 1
a1 1
./" $OpenBSD: ipresend.1,v 1.8 2000/08/23 03:13:33 ericj Exp $
d29 1
a29 1
.Bl -tag -width "d interface "
@


1.8
log
@mdoc'ify
@
text
@d1 1
a1 1
./" $OpenBSD$
d27 2
a28 1
.Ss OPTIONS
@


1.7
log
@Remove hard sentence breaks. Add $OpenBSD$ tags where appropriate. Some other
cleanup along the way.
@
text
@d1 1
@


1.6
log
@Suffix "i.e." and "e.g." with a comma. Just another really picky man page
commit, as we want our documentation to be as consistently formatted as
possible (it's getting there :-)).
@
text
@d1 1
a1 1
.Dd October  9, 1999
d29 2
a30 1
Set the interface name to be the name supplied.  This is useful with the
d33 1
a33 1
.Fl T
d37 2
a38 1
to associate a packet with an interface.  Normal
d42 2
a43 2
Specify the hostname of the gateway through which to route packets. This
is required whenever the destination host isn't directly attached to the
d52 2
a53 1
Specify the filename from which to take input. Default is
d56 2
a57 1
The input file is to be text output from etherfind. The text formats which
d66 2
a67 1
packet. No length correction is made if an incorrect length is put in
d75 2
a76 2
version 3). Packets are read from this file as being input
(for rule purposes).
d79 3
a81 3
.Sq  raw
(the way they came in). The
only real significance here is that it will expect the link layer (i.e.,
d89 2
a90 2
from this file and used as input from any interface. This is perhaps the
most useful input type, currently.
@


1.5
log
@mdoc'd pages <kwesterback@@home.com>
@
text
@d76 1
a76 1
only real significance here is that it will expect the link layer (i.e.
@


1.4
log
@get rid of references to non-existant manpages. Still needs to be -mandoc'd
@
text
@d1 21
a21 25
.TH IPRESEND 1
.SH NAME
ipresend \- resend IP packets out to network
.SH SYNOPSIS
.B ipsend
[
.B \-EHPRSTX
] [
.B \-d
<device>
] [
.B \-g
<\fIgateway\fP>
] [
.B \-m
<\fIMTU\fP>
] [
.B \-r
<\fIfilename\fP>
]
.SH DESCRIPTION
.PP
\fBipresend\fP was designed to allow packets to be resent, once captured,
back out onto the network for use in testing.  \fIipresend\fP supports a
number of different file formats as input, including saved snoop/tcpdump
d23 6
a28 3
.SH OPTIONS
.TP
.BR \-d \0<interface>
d30 11
a40 6
\fB\-P, \-S, \-T\fP and \fB\-E\fP options, where it is not otherwise possible
to associate a packet with an interface.  Normal "text packets" can override
this setting.
.TP
.BR \-g \0<gateway>
Specify the hostname of the gateway through which to route packets.  This
d43 4
a46 3
.TP
.BR \-m \0<MTU>
Specify the MTU to be used when sending out packets.  This option allows you
d48 6
a53 7
MTU's without setting them so.
.TP
.BR \-r \0<filename>
Specify the filename from which to take input.  Default is stdin.
.TP
.B \-E
The input file is to be text output from etherfind.  The text formats which
d56 5
a60 8
.PP
.nf
		etherfind -n
		etherfind -n -t
.fi
.LP
.TP
.B \-H
d62 1
a62 1
packet.  No length correction is made, if an incorrect length is put in
d64 7
a70 4
.TP
.B \-P
The input file specified by \fB\-i\fP is a binary file produced using libpcap
(i.e., tcpdump version 3).  Packets are read from this file as being input
d72 4
a75 3
.TP
.B \-R
When sending packets out, send them out "raw" (the way they came in).  The
d78 7
a84 4
.TP
.B \-S
The input file is to be in "snoop" format (see RFC 1761).  Packets are read
from this file and used as input from any interface.  This is perhaps the
d86 6
a91 4
.TP
.B \-T
The input file is to be text output from tcpdump.  The text formats which
are currently supported are those which result from the following tcpdump
d93 8
a100 11
.PP
.nf
		tcpdump -n
		tcpdump -nq
		tcpdump -nqt
		tcpdump -nqtt
		tcpdump -nqte
.fi
.LP
.TP
.B \-X
d102 8
a109 8
.DT
.SH SEE ALSO
tcpdump(8), ipftest(1), ipresend(1), iptest(1), bpf(4)
.SH DIAGNOSTICS
.PP
Needs to be run as root.
.SH BUGS
.PP
a112 1

@


1.3
log
@repair; d@@
@
text
@d97 1
a97 1
snoop(1m), tcpdump(8), etherfind(8c), ipftest(1), ipresend(1), iptest(1), bpf(4), dlpi(7p)
@


1.2
log
@ethernet -> Ethernet, other repairs
@
text
@d47 1
a94 2
.TP
.SH FILES
@


1.1
log
@IPF 3.2.3
@
text
@d71 1
a71 1
ethernet) headers to be prepended to the IP packet being output.
@

