head	1.8;
access;
symbols
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.6.0.8
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.6
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2001.05.30.02.12.54;	author deraadt;	state dead;
branches;
next	1.7;

1.7
date	2001.01.17.06.01.26;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	99.03.22.05.33.30;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	98.01.26.04.17.04;	author dgregor;	state Exp;
branches;
next	1.4;

1.4
date	97.10.04.00.03.19;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.04.19.19.12.26;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	97.04.06.20.15.45;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.05.10.21.40.58;	author dm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@/*	$OpenBSD: ipsend.c,v 1.7 2001/01/17 06:01:26 fgsch Exp $	*/

/*
 * ipsend.c (C) 1995-1998 Darren Reed
 *
 * This was written to test what size TCP fragments would get through
 * various TCP/IP packet filters, as used in IP firewalls.  In certain
 * conditions, enough of the TCP header is missing for unpredictable
 * results unless the filter is aware that this can happen.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that this notice is preserved and due credit is given
 * to the original author and the contributors.
 */
#if !defined(lint)
static const char sccsid[] = "@@(#)ipsend.c	1.5 12/10/95 (C)1995 Darren Reed";
static const char rcsid[] = "@@(#)$IPFilter: ipsend.c,v 2.2 1999/12/04 03:37:05 darrenr Exp $";
#endif
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <netdb.h>
#include <string.h>
#include <sys/param.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>
#include <netinet/ip_icmp.h>
#ifndef	linux
#include <netinet/ip_var.h>
#endif
#include "ipsend.h"
#include "ipf.h"


extern	char	*optarg;
extern	int	optind;
extern	void	iplang __P((FILE *));

char	options[68];
int	opts;
#ifdef	linux
char	default_device[] = "eth0";
#else
# ifdef	sun
char	default_device[] = "le0";
# else
#  ifdef	ultrix
char	default_device[] = "ln0";
#  else
#   ifdef	__bsdi__
char	default_device[] = "ef0";
#   else
#    ifdef	__sgi
char	default_device[] = "ec0";
#    else
char	default_device[] = "lan0";
#    endif
#   endif
#  endif
# endif
#endif


static	void	usage __P((char *));
static	void	do_icmp __P((ip_t *, char *));
int	main __P((int, char **));


static	void	usage(prog)
char	*prog;
{
	fprintf(stderr, "Usage: %s [options] dest [flags]\n\
\toptions:\n\
\t\t-d\tdebug mode\n\
\t\t-i device\tSend out on this device\n\
\t\t-f fragflags\tcan set IP_MF or IP_DF\n\
\t\t-g gateway\tIP gateway to use if non-local dest.\n\
\t\t-I code,type[,gw[,dst[,src]]]\tSet ICMP protocol\n\
\t\t-m mtu\t\tfake MTU to use when sending out\n\
\t\t-P protocol\tSet protocol by name\n\
\t\t-s src\t\tsource address for IP packet\n\
\t\t-T\t\tSet TCP protocol\n\
\t\t-t port\t\tdestination port\n\
\t\t-U\t\tSet UDP protocol\n\
\t\t-v\tverbose mode\n\
\t\t-w <window>\tSet the TCP window size\n\
", prog);
	fprintf(stderr, "Usage: %s [-dv] -L <filename>\n\
\toptions:\n\
\t\t-d\tdebug mode\n\
\t\t-L filename\tUse IP language for sending packets\n\
\t\t-v\tverbose mode\n\
", prog);
	exit(1);
}


static void do_icmp(ip, args)
ip_t *ip;
char *args;
{
	struct	icmp	*ic;
	char	*s;

	ip->ip_p = IPPROTO_ICMP;
	ip->ip_len += sizeof(*ic);
	ic = (struct icmp *)(ip + 1);
	bzero((char *)ic, sizeof(*ic));
	if (!(s = strchr(args, ',')))
	    {
		fprintf(stderr, "ICMP args missing: ,\n");
		return;
	    }
	*s++ = '\0';
	ic->icmp_type = atoi(args);
	ic->icmp_code = atoi(s);
	if (ic->icmp_type == ICMP_REDIRECT && strchr(s, ','))
	    {
		char	*t;

		t = strtok(s, ",");
		t = strtok(NULL, ",");
		if (resolve(t, (char *)&ic->icmp_gwaddr) == -1)
		    {
			fprintf(stderr,"Cant resolve %s\n", t);
			exit(2);
		    }
		if ((t = strtok(NULL, ",")))
		    {
			if (resolve(t, (char *)&ic->icmp_ip.ip_dst) == -1)
			    {
				fprintf(stderr,"Cant resolve %s\n", t);
				exit(2);
			    }
			if ((t = strtok(NULL, ",")))
			    {
				if (resolve(t,
					    (char *)&ic->icmp_ip.ip_src) == -1)
				    {
					fprintf(stderr,"Cant resolve %s\n", t);
					exit(2);
				    }
			    }
		    }
	    }
}


int send_packets(dev, mtu, ip, gwip)
char *dev;
int mtu;
ip_t *ip;
struct in_addr gwip;
{
	u_short	sport = 0;
	int	wfd;

	if (ip->ip_p == IPPROTO_TCP || ip->ip_p == IPPROTO_UDP)
		sport = ((struct tcpiphdr *)ip)->ti_sport;
	wfd = initdevice(dev, sport, 5);

	return send_packet(wfd, mtu, ip, gwip);
}


int main(argc, argv)
int	argc;
char	**argv;
{
	FILE	*langfile = NULL;
	struct	tcpiphdr *ti;
	struct	in_addr	gwip;
	tcphdr_t	*tcp;
	ip_t	*ip;
	char	*name =  argv[0], host[MAXHOSTNAMELEN + 1];
	char	*gateway = NULL, *dev = NULL;
	char	*src = NULL, *dst, *s;
	int	mtu = 1500, olen = 0, c, nonl = 0;

	/*
	 * 65535 is maximum packet size...you never know...
	 */
	ip = (ip_t *)calloc(1, 65536);
	ti = (struct tcpiphdr *)ip;
	tcp = (tcphdr_t *)&ti->ti_sport;
	ip->ip_len = sizeof(*ip);
	ip->ip_hl = sizeof(*ip) >> 2;

	while ((c = getopt(argc, argv, "I:L:P:TUdf:i:g:m:o:s:t:vw:")) != -1)
		switch (c)
		{
		case 'I' :
			nonl++;
			if (ip->ip_p)
			    {
				fprintf(stderr, "Protocol already set: %d\n",
					ip->ip_p);
				break;
			    }
			do_icmp(ip, optarg);
			break;
		case 'L' :
			if (nonl) {
				fprintf(stderr,
					"Incorrect usage of -L option.\n");
				usage(name);
			}
			if (!strcmp(optarg, "-"))
				langfile = stdin;
			else if (!(langfile = fopen(optarg, "r"))) {
				fprintf(stderr, "can't open file %s\n",
					optarg);
				exit(1);
			}
			iplang(langfile);
			return 0;
		case 'P' :
		    {
			struct	protoent	*p;

			nonl++;
			if (ip->ip_p)
			    {
				fprintf(stderr, "Protocol already set: %d\n",
					ip->ip_p);
				break;
			    }
			if ((p = getprotobyname(optarg)))
				ip->ip_p = p->p_proto;
			else
				fprintf(stderr, "Unknown protocol: %s\n",
					optarg);
			break;
		    }
		case 'T' :
			nonl++;
			if (ip->ip_p)
			    {
				fprintf(stderr, "Protocol already set: %d\n",
					ip->ip_p);
				break;
			    }
			ip->ip_p = IPPROTO_TCP;
			ip->ip_len += sizeof(tcphdr_t);
			break;
		case 'U' :
			nonl++;
			if (ip->ip_p)
			    {
				fprintf(stderr, "Protocol already set: %d\n",
					ip->ip_p);
				break;
			    }
			ip->ip_p = IPPROTO_UDP;
			ip->ip_len += sizeof(udphdr_t);
			break;
		case 'd' :
			opts |= OPT_DEBUG;
			break;
		case 'f' :
			nonl++;
			ip->ip_off = strtol(optarg, NULL, 0);
			break;
		case 'g' :
			nonl++;
			gateway = optarg;
			break;
		case 'i' :
			nonl++;
			dev = optarg;
			break;
		case 'm' :
			nonl++;
			mtu = atoi(optarg);
			if (mtu < 28)
			    {
				fprintf(stderr, "mtu must be > 28\n");
				exit(1);
			    }
			break;
		case 'o' :
			nonl++;
			olen = buildopts(optarg, options, (ip->ip_hl - 5) << 2);
			break;
		case 's' :
			nonl++;
			src = optarg;
			break;
		case 't' :
			nonl++;
			if (ip->ip_p == IPPROTO_TCP || ip->ip_p == IPPROTO_UDP)
				tcp->th_dport = htons(atoi(optarg));
			break;
		case 'v' :
			opts |= OPT_VERBOSE;
			break;
		case 'w' :
			nonl++;
			if (ip->ip_p == IPPROTO_TCP)
				tcp->th_win = atoi(optarg);
			else
				fprintf(stderr, "set protocol to TCP first\n");
			break;
		default :
			fprintf(stderr, "Unknown option \"%c\"\n", c);
			usage(name);
		}

	if (argc - optind < 1)
		usage(name);
	dst = argv[optind++];

	if (!src)
	    {
		gethostname(host, sizeof(host));
		src = host;
	    }

	if (resolve(src, (char *)&ip->ip_src) == -1)
	    {
		fprintf(stderr,"Cant resolve %s\n", src);
		exit(2);
	    }

	if (resolve(dst, (char *)&ip->ip_dst) == -1)
	    {
		fprintf(stderr,"Cant resolve %s\n", dst);
		exit(2);
	    }

	if (!gateway)
		gwip = ip->ip_dst;
	else if (resolve(gateway, (char *)&gwip) == -1)
	    {
		fprintf(stderr,"Cant resolve %s\n", gateway);
		exit(2);
	    }

	if (olen)
	    {
		caddr_t	ipo = (caddr_t)ip;

		printf("Options: %d\n", olen);
		ti = (struct tcpiphdr *)malloc(olen + ip->ip_len);
		bcopy((char *)ip, (char *)ti, sizeof(*ip));
		ip = (ip_t *)ti;
		ip->ip_hl = (olen >> 2);
		bcopy(options, (char *)(ip + 1), olen);
		bcopy((char *)tcp, (char *)(ip + 1) + olen, sizeof(*tcp));
		ip->ip_len += olen;
		bcopy((char *)ip, (char *)ipo, ip->ip_len);
		ip = (ip_t *)ipo;
		tcp = (tcphdr_t *)((char *)(ip + 1) + olen);
	    }

	if (ip->ip_p == IPPROTO_TCP)
		for (s = argv[optind]; s && (c = *s); s++)
			switch(c)
			{
			case 'S' : case 's' :
				tcp->th_flags |= TH_SYN;
				break;
			case 'A' : case 'a' :
				tcp->th_flags |= TH_ACK;
				break;
			case 'F' : case 'f' :
				tcp->th_flags |= TH_FIN;
				break;
			case 'R' : case 'r' :
				tcp->th_flags |= TH_RST;
				break;
			case 'P' : case 'p' :
				tcp->th_flags |= TH_PUSH;
				break;
			case 'U' : case 'u' :
				tcp->th_flags |= TH_URG;
				break;
			}

	if (!dev)
		dev = default_device;
	printf("Device:  %s\n", dev);
	printf("Source:  %s\n", inet_ntoa(ip->ip_src));
	printf("Dest:    %s\n", inet_ntoa(ip->ip_dst));
	printf("Gateway: %s\n", inet_ntoa(gwip));
	if (ip->ip_p == IPPROTO_TCP && tcp->th_flags)
		printf("Flags:   %#x\n", tcp->th_flags);
	printf("mtu:     %d\n", mtu);

#ifdef	DOSOCKET
	if (tcp->th_dport)
		return do_socket(dev, mtu, ti, gwip);
#endif
	return send_packets(dev, mtu, (ip_t *)ti, gwip);
}
@


1.7
log
@2nd part of the ipf code; need more testing.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.6
log
@set default if to something more reasonable; fix SIGSEGV when no options listed; garath@@ntplx.net
@
text
@d1 2
a2 1
/*     $OpenBSD: ipsend.c,v 1.5 1998/01/26 04:17:04 dgregor Exp $     */
d4 1
a4 1
 * ipsend.c (C) 1995-1997 Darren Reed
d17 1
a17 1
static const char rcsid[] = "@@(#)$Id: ipsend.c,v 1.5 1998/01/26 04:17:04 dgregor Exp $";
d24 1
a37 1
#include "ip_fil_compat.h"
d51 1
a51 1
# if defined(sun) || defined(__OpenBSD__)
d57 1
a57 1
#   ifdef __bsdi__
d182 2
a183 1
	char	*name =  argv[0], host[64], *gateway = NULL, *dev = NULL;
d363 2
a364 2
	if (ip->ip_p == IPPROTO_TCP && optind < argc)
		for (s = argv[optind]; (c = *s); s++)
@


1.5
log
@IPF 3.2.3
@
text
@d1 1
a1 1
/*     $OpenBSD$     */
d16 1
a16 1
static const char rcsid[] = "@@(#)$Id: ipsend.c,v 2.0.2.19 1997/10/12 09:48:38 darrenr Exp $";
d50 1
a50 1
# ifdef	sun
d56 1
a56 1
#   ifdef	__bsdi__
d361 1
a361 1
	if (ip->ip_p == IPPROTO_TCP)
@


1.4
log
@optind botch
@
text
@d1 1
d3 1
a3 1
 * ipsend.c (C) 1995 Darren Reed
d10 3
a12 7
 * The author provides this program as-is, with no gaurantee for its
 * suitability for any specific purpose.  The author takes no responsibility
 * for the misuse/abuse of this program and provides it for the sole purpose
 * of testing packet filter policies.  This file maybe distributed freely
 * providing it is not modified and that this notice remains in tact.
 *
 * This was written and tested (successfully) on SunOS 4.1.x.
d14 3
a16 2
#ifndef	lint
static	char	sccsid[] = "@@(#)ipsend.c	1.5 12/10/95 (C)1995 Darren Reed";
d20 1
d27 1
a34 6
#include <netinet/tcpip.h>
#endif
#include "ip_compat.h"
#ifdef	linux
#include <linux/sockios.h>
#include "tcpip.h"
d36 3
a38 1
#include "ipt.h"
d43 1
d46 1
d59 3
d63 1
d70 6
a75 1
void	usage(prog)
d80 2
a81 1
\t\t-d device\tSend out on this device\n\
d91 8
d104 1
a104 1
void do_icmp(ip, args)
d172 1
a172 1
main(argc, argv)
d176 1
d183 1
a183 1
	int	mtu = 1500, olen = 0, c;
d194 1
a194 1
	while ((c = getopt(argc, argv, "IP:TUd:f:g:m:o:s:t:")) != -1)
d198 1
d207 15
d226 1
d241 1
d252 1
d263 1
a263 1
			dev = optarg;
d266 1
d270 1
d273 4
d278 1
d287 2
a288 1
			olen = optname(optarg, options);
d291 1
d295 1
d299 3
d303 1
d344 17
d362 1
a362 1
		for (s = argv[optind]; c = *s; s++)
a394 13
	if (olen)
	    {
		printf("Options: %d\n", olen);
		ti = (struct tcpiphdr *)malloc(olen + ip->ip_len);
		bcopy((char *)ip, (char *)ti, sizeof(*ip));
		ip = (ip_t *)ti;
		ip->ip_hl += (olen >> 2);
		bcopy(options, (char *)(ip + 1), olen);
		bcopy((char *)tcp, (char *)(ip + 1) + olen, sizeof(*tcp));
		tcp = (tcphdr_t *)((char *)(ip + 1) + olen);
		ip->ip_len += olen;
	    }

d399 1
a399 1
	return send_packets(dev, mtu, ti, gwip);
@


1.3
log
@getopt() returns an int, not a char. (thorpej)
@
text
@d264 1
a264 1
	if (argc - optind < 2)
@


1.2
log
@#include stdlib.h to get malloc(3) and calloc(3) definitions.
Fixes compiler warnings.
@
text
@d165 2
a166 2
	char	*src = NULL, *dst, c, *s;
	int	mtu = 1500, olen = 0;
@


1.1
log
@ipfilter 3.0.4
@
text
@d21 1
@
