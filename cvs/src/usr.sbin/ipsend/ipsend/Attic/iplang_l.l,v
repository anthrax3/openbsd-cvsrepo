head	1.4;
access;
symbols
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.1.0.12
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.10
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.8
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2001.05.30.02.12.53;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2001.01.30.14.58.23;	author kjell;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.17.06.01.26;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	98.01.26.04.17.01;	author dgregor;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@%{
/*	$OpenBSD: iplang_l.l,v 1.3 2001/01/30 14:58:23 kjell Exp $	*/

/*
 * Copyright (C) 1997-1998 by Darren Reed.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that this notice is preserved and due credit is given
 * to the original author and the contributors.
 *
 * $IPFilter: iplang_l.l,v 2.2 2000/02/18 00:18:05 darrenr Exp $
 */
#include <stdio.h>
#include <string.h>
#include <sys/param.h>
#if defined(__SVR4) || defined(__sysv__)
#include <sys/stream.h>
#endif
#include <sys/types.h>
#include <netinet/in_systm.h>
#include <netinet/in.h>
#include "y.tab.h"
#include "ip_fil_compat.h"
#include "ipf.h"

#ifndef	__P
# ifdef __STDC__
#  define	__P(x)	x
# else
#  define	__P(x)	()
# endif
#endif

extern int opts;

int lineNum = 0, ipproto = 0, oldipproto = 0, next = -1, laststate = 0;
int *prstack = NULL, numpr = 0, state = 0, token = 0;

void    yyerror __P((char *));
void	push_proto __P((void));
void	pop_proto __P((void));
int	next_state __P((int, int));
int	next_item __P((int));
int	save_token __P((void));
void	swallow __P((void));
int	yylex __P((void));

struct	wordtab	{
	char	*word;
	int	state;
	int	next;
};

struct	wordtab	words[] = {
	{ "interface",	IL_INTERFACE,		-1 },
	{ "iface",	IL_INTERFACE,		-1 },
	{ "name",	IL_IFNAME,		IL_TOKEN },
	{ "ifname",	IL_IFNAME,		IL_TOKEN },
	{ "router",	IL_DEFROUTER,		IL_TOKEN },
	{ "mtu",	IL_MTU,			IL_NUMBER },
	{ "eaddr",	IL_EADDR,		IL_TOKEN },
	{ "v4addr",	IL_V4ADDR,		IL_TOKEN },
	{ "ipv4",	IL_IPV4,		-1 },
	{ "v",		IL_V4V,			IL_TOKEN },
	{ "proto",	IL_V4PROTO,		IL_TOKEN },
	{ "hl",		IL_V4HL,		IL_TOKEN },
	{ "id",		IL_V4ID,		IL_TOKEN },
	{ "ttl",	IL_V4TTL,		IL_TOKEN },
	{ "tos",	IL_V4TOS,		IL_TOKEN },
	{ "src",	IL_V4SRC,		IL_TOKEN },
	{ "dst",	IL_V4DST,		IL_TOKEN },
	{ "opt",	IL_OPT,			-1 },
	{ "len",	IL_LEN,			IL_TOKEN },
	{ "off",	IL_OFF,			IL_TOKEN },
	{ "sum",	IL_SUM,			IL_TOKEN },
	{ "tcp",	IL_TCP,			-1 },
	{ "sport",	IL_SPORT,		IL_TOKEN },
	{ "dport",	IL_DPORT,		IL_TOKEN },
	{ "seq",	IL_TCPSEQ,		IL_TOKEN },
	{ "ack",	IL_TCPACK,		IL_TOKEN },
	{ "flags",	IL_TCPFL,		IL_TOKEN },
	{ "urp",	IL_TCPURP,		IL_TOKEN },
	{ "win",	IL_TCPWIN,		IL_TOKEN },
	{ "udp",	IL_UDP,			-1 },
	{ "send",	IL_SEND,		-1 },
	{ "via",	IL_VIA,			IL_TOKEN },
	{ "arp",	IL_ARP,			-1 },
	{ "data",	IL_DATA,		-1 },
	{ "value",	IL_DVALUE,		IL_TOKEN },
	{ "file",	IL_DFILE,		IL_TOKEN },
	{ "nop",	IL_IPO_NOP,		-1 },
	{ "eol",	IL_IPO_EOL,		-1 },
	{ "rr",		IL_IPO_RR,		-1 },
	{ "zsu",	IL_IPO_ZSU,		-1 },
	{ "mtup",	IL_IPO_MTUP,		-1 },
	{ "mtur",	IL_IPO_MTUR,		-1 },
	{ "encode",	IL_IPO_ENCODE,		-1 },
	{ "ts",		IL_IPO_TS,		-1 },
	{ "tr",		IL_IPO_TR,		-1 },
	{ "sec",	IL_IPO_SEC,		-1 },
	{ "secclass",	IL_IPO_SECCLASS,	IL_TOKEN },
	{ "lsrr",	IL_IPO_LSRR,		-1 },
	{ "esec",	IL_IPO_ESEC,		-1 },
	{ "cipso",	IL_IPO_CIPSO,		-1 },
	{ "satid",	IL_IPO_SATID,		-1 },
	{ "ssrr",	IL_IPO_SSRR,		-1 },
	{ "addext",	IL_IPO_ADDEXT,		-1 },
	{ "visa",	IL_IPO_VISA,		-1 },
	{ "imitd",	IL_IPO_IMITD,		-1 },
	{ "eip",	IL_IPO_EIP,		-1 },
	{ "finn",	IL_IPO_FINN,		-1 },
	{ "mss",	IL_TCPO_MSS,		IL_TOKEN },
	{ "wscale",	IL_TCPO_WSCALE,		IL_TOKEN },
	{ "reserv-4",	IL_IPS_RESERV4,		-1 },
	{ "topsecret",	IL_IPS_TOPSECRET,	-1 },
	{ "secret",	IL_IPS_SECRET,		-1 },
	{ "reserv-3",	IL_IPS_RESERV3,		-1 },
	{ "confid",	IL_IPS_CONFID,		-1 },
	{ "unclass",	IL_IPS_UNCLASS,		-1 },
	{ "reserv-2",	IL_IPS_RESERV2,		-1 },
	{ "reserv-1",	IL_IPS_RESERV1,		-1 },
	{ "icmp",	IL_ICMP,		-1 },
	{ "type",	IL_ICMPTYPE,		-1 },
	{ "code",	IL_ICMPCODE,		-1 },
	{ "echorep",	IL_ICMP_ECHOREPLY,	-1 },
	{ "unreach",	IL_ICMP_UNREACH,	-1 },
	{ "squench",	IL_ICMP_SOURCEQUENCH,	-1 },
	{ "redir",	IL_ICMP_REDIRECT,	-1 },
	{ "echo",	IL_ICMP_ECHO,		-1 },
	{ "routerad",	IL_ICMP_ROUTERADVERT,	-1 },
	{ "routersol",	IL_ICMP_ROUTERSOLICIT,	-1 },
	{ "timex",	IL_ICMP_TIMXCEED,	-1 },
	{ "paramprob",	IL_ICMP_PARAMPROB,	-1 },
	{ "timest",	IL_ICMP_TSTAMP,		-1 },
	{ "timestrep",	IL_ICMP_TSTAMPREPLY,	-1 },
	{ "inforeq",	IL_ICMP_IREQ,		-1 },
	{ "inforep",	IL_ICMP_IREQREPLY,	-1 },
	{ "maskreq",	IL_ICMP_MASKREQ,	-1 },
	{ "maskrep",	IL_ICMP_MASKREPLY,	-1 },
	{ "net-unr",	IL_ICMP_UNREACH_NET,	-1 },
	{ "host-unr",	IL_ICMP_UNREACH_HOST,	-1 },
	{ "proto-unr",	IL_ICMP_UNREACH_PROTOCOL,	-1 },
	{ "port-unr",	IL_ICMP_UNREACH_PORT,	-1 },
	{ "needfrag",	IL_ICMP_UNREACH_NEEDFRAG,	-1 },
	{ "srcfail",	IL_ICMP_UNREACH_SRCFAIL,	-1 },
	{ "net-unk",	IL_ICMP_UNREACH_NET_UNKNOWN,	-1 },
	{ "host-unk",	IL_ICMP_UNREACH_HOST_UNKNOWN,	-1 },
	{ "isolate",	IL_ICMP_UNREACH_ISOLATED,	-1 },
	{ "net-prohib",	IL_ICMP_UNREACH_NET_PROHIB,	-1 },
	{ "host-prohib",	IL_ICMP_UNREACH_HOST_PROHIB,	-1 },
	{ "net-tos",	IL_ICMP_UNREACH_TOSNET,	-1 },
	{ "host-tos",	IL_ICMP_UNREACH_TOSHOST,	-1 },
	{ "filter-prohib",	IL_ICMP_UNREACH_FILTER_PROHIB,	-1 },
	{ "host-preced",	IL_ICMP_UNREACH_HOST_PRECEDENCE,	-1 },
	{ "cutoff-preced",	IL_ICMP_UNREACH_PRECEDENCE_CUTOFF,	-1 },
	{ "net-redir",	IL_ICMP_REDIRECT_NET,	-1 },
	{ "host-redir",	IL_ICMP_REDIRECT_HOST,	-1 },
	{ "tos-net-redir",	IL_ICMP_REDIRECT_TOSNET,	-1 },
	{ "tos-host-redir",	IL_ICMP_REDIRECT_TOSHOST,	-1 },
	{ "intrans",	IL_ICMP_TIMXCEED_INTRANS,	-1 },
	{ "reass",	IL_ICMP_TIMXCEED_REASS,	-1 },
	{ "optabsent",	IL_ICMP_PARAMPROB_OPTABSENT,	-1 },
	{ "otime",	IL_ICMP_OTIME,		-1 },
	{ "rtime",	IL_ICMP_RTIME,		-1 },
	{ "ttime",	IL_ICMP_TTIME,		-1 },
	{ "icmpseq",	IL_ICMP_SEQ,		-1 },
	{ "icmpid",	IL_ICMP_SEQ,		-1 },
	{ ".",		IL_DOT,			-1 },
	{ NULL, 0, 0 }
};
%}
white	[ \t\r]+
%%
{white}	;
\n	{ lineNum++; swallow(); }
\{	{ push_proto(); return next_item('{'); }
\}	{ pop_proto(); return next_item('}'); }
;	{ return next_item(';'); }
[0-9]+	{ return next_item(IL_NUMBER); }
[0-9a-fA-F]	{ return next_item(IL_HEXDIGIT); }
:	{ return next_item(IL_COLON); }
#[^\n]*	{ return next_item(IL_COMMENT); }
[^ \{\}\n\t;:{}]*	{ return next_item(IL_TOKEN); }
\"[^\"]*\"	{ return next_item(IL_TOKEN); }
%%
void    yyerror(msg)
char    *msg;
{
	fprintf(stderr, "%s error at \"%s\", line %d\n", msg, yytext,
		lineNum + 1);
	exit(1);
}


void push_proto()
{
	numpr++;
	if (!prstack)
		prstack = (int *)malloc(sizeof(int));
	else
		prstack = (int *)realloc((char *)prstack, numpr * sizeof(int));
	prstack[numpr - 1] = oldipproto;
}


void pop_proto()
{
	numpr--;
	ipproto = prstack[numpr];
	if (!numpr) {
		free(prstack);
		prstack = NULL;
		return;
	}
	prstack = (int *)realloc((char *)prstack, numpr * sizeof(int));
}


int save_token()
{

	yylval.str = strdup(yytext);
	return IL_TOKEN;
}


int next_item(nstate)
int nstate;
{
	struct	wordtab	*wt;

	if (opts & OPT_DEBUG)
		printf("text=[%s] id=%d next=%d\n", yytext, nstate, next);
	if (next == IL_TOKEN) {
		next = -1;
		return save_token();
	}
	token++;

	for (wt = words; wt->word; wt++)
		if (!strcasecmp(wt->word, yytext))
			return next_state(wt->state, wt->next);
	if (opts & OPT_DEBUG)
		printf("unknown keyword=[%s]\n", yytext);
	next = -1;
	if (nstate == IL_NUMBER)
		yylval.num = atoi(yytext);
	token++;
	return nstate;
}


int next_state(nstate, fornext)
int nstate, fornext;
{
	next = fornext;

	switch (nstate)
	{
	case IL_IPV4 :
	case IL_TCP :
	case IL_UDP :
	case IL_ICMP :
	case IL_DATA :
	case IL_INTERFACE :
	case IL_ARP :
		oldipproto = ipproto;
		ipproto = nstate;
		break;
	case IL_SUM :
		if (ipproto == IL_IPV4)
			nstate = IL_V4SUM;
		else if (ipproto == IL_TCP)
			nstate = IL_TCPSUM;
		else if (ipproto == IL_UDP)
			nstate = IL_UDPSUM;
		break;
	case IL_OPT :
		if (ipproto == IL_IPV4)
			nstate = IL_V4OPT;
		else if (ipproto == IL_TCP)
			nstate = IL_TCPOPT;
		break;
	case IL_IPO_NOP :
		if (ipproto == IL_TCP)
			nstate = IL_TCPO_NOP;
		break;
	case IL_IPO_EOL :
		if (ipproto == IL_TCP)
			nstate = IL_TCPO_EOL;
		break;
	case IL_IPO_TS :
		if (ipproto == IL_TCP)
			nstate = IL_TCPO_TS;
		break;
	case IL_OFF :
		if (ipproto == IL_IPV4)
			nstate = IL_V4OFF;
		else if (ipproto == IL_TCP)
			nstate = IL_TCPOFF;
		break;
	case IL_LEN :
		if (ipproto == IL_IPV4)
			nstate = IL_V4LEN;
		else if (ipproto == IL_UDP)
			nstate = IL_UDPLEN;
		break;
	}
	return nstate;
}


void swallow()
{
	int c;

	c = input();

	if (c == '#') {
		while ((c != '\n') && (c != EOF))
			c = input();
	}
	unput(c);
}
@


1.3
log
@ip_compat.h to ip_fil_compat.h. missed this one. sorry
@
text
@d2 1
a2 1
/*	$OpenBSD: iplang_l.l,v 1.2 2001/01/17 06:01:26 fgsch Exp $	*/
@


1.2
log
@2nd part of the ipf code; need more testing.
@
text
@d2 1
a2 1
/*	$OpenBSD$	*/
d23 1
a23 1
#include "ip_compat.h"
@


1.1
log
@IPF 3.2.3
@
text
@a0 4
%e 1500
%p 4000
%a 4000
%o 6000
d2 2
a3 1
/*    $OpenBSD$     */
d5 1
a5 1
 * Copyright (C) 1997 by Darren Reed.
d11 1
a11 1
 * $Id: iplang_l.l,v 2.0.2.15.2.2 1997/12/10 09:54:15 darrenr Exp $
d23 1
a23 1
#include "ip_fil_compat.h"
d36 1
a36 1
int lineNum = 0, proto = 0, oldproto = 0, next = -1, laststate = 0;
d47 124
d172 1
a172 1

d174 1
a174 1
[ \t\r]	;
a175 114
interface |
iface	{ return next_state(IL_INTERFACE, -1); }
name |
ifname	{ return next_state(IL_IFNAME, IL_TOKEN); }
router	{ return next_state(IL_DEFROUTER, IL_TOKEN); }
mtu 	{ return next_state(IL_MTU, IL_NUMBER); }
eaddr	{ return next_state(IL_EADDR, IL_TOKEN); }
v4addr	{ return next_state(IL_V4ADDR, IL_TOKEN); }
ipv4	{ return next_state(IL_IPV4, -1); }
v	{ return next_state(IL_V4V, IL_TOKEN); }
proto	{ return next_state(IL_V4PROTO, IL_TOKEN); }
hl	{ return next_state(IL_V4HL, IL_TOKEN); }
id	{ return next_state(IL_V4ID, IL_TOKEN); }
ttl	{ return next_state(IL_V4TTL, IL_TOKEN); }
tos	{ return next_state(IL_V4TOS, IL_TOKEN); }
src	{ return next_state(IL_V4SRC, IL_TOKEN); }
dst	{ return next_state(IL_V4DST, IL_TOKEN); }
opt	{ return next_state(IL_OPT, -1); }
len	{ return next_state(IL_LEN, IL_TOKEN); }
off	{ return next_state(IL_OFF, IL_TOKEN); }
sum	{ return next_state(IL_SUM, IL_TOKEN); }
tcp	{ return next_state(IL_TCP, -1); }
sport	{ return next_state(IL_SPORT, IL_TOKEN); }
dport	{ return next_state(IL_DPORT, IL_TOKEN); }
seq	{ return next_state(IL_TCPSEQ, IL_TOKEN); }
ack	{ return next_state(IL_TCPACK, IL_TOKEN); }
flags	{ return next_state(IL_TCPFL, IL_TOKEN); }
urp	{ return next_state(IL_TCPURP, IL_TOKEN); }
win	{ return next_state(IL_TCPWIN, IL_TOKEN); }
udp	{ return next_state(IL_UDP, -1); }
send	{ return next_state(IL_SEND, -1); }
via	{ return next_state(IL_VIA, IL_TOKEN); }
arp	{ return next_state(IL_ARP, -1); }
data	{ return next_state(IL_DATA, -1); }
value	{ return next_state(IL_DVALUE, IL_TOKEN); }
file	{ return next_state(IL_DFILE, IL_TOKEN); }
nop	{ return next_state(IL_IPO_NOP, -1); }
eol	{ return next_state(IL_IPO_EOL, -1); }
rr	{ return next_state(IL_IPO_RR, -1);  }
zsu	{ return next_state(IL_IPO_ZSU, -1); }
mtup	{ return next_state(IL_IPO_MTUP, -1); }
mtur	{ return next_state(IL_IPO_MTUR, -1); }
encode	{ return next_state(IL_IPO_ENCODE, -1); }
ts	{ return next_state(IL_IPO_TS, -1); }
tr	{ return next_state(IL_IPO_TR, -1); }
sec	{ return next_state(IL_IPO_SEC, -1); }
secclass	{ return next_state(IL_IPO_SECCLASS, IL_TOKEN); }
lsrr	{ return next_state(IL_IPO_LSRR, -1); }
esec	{ return next_state(IL_IPO_ESEC, -1); }
cipso	{ return next_state(IL_IPO_CIPSO, -1); }
satid	{ return next_state(IL_IPO_SATID, -1); }
ssrr	{ return next_state(IL_IPO_SSRR, -1); }
addext	{ return next_state(IL_IPO_ADDEXT, -1); }
visa	{ return next_state(IL_IPO_VISA, -1); }
imitd	{ return next_state(IL_IPO_IMITD, -1); }
eip	{ return next_state(IL_IPO_EIP, -1); }
finn	{ return next_state(IL_IPO_FINN, -1); }
mss	{ return next_state(IL_TCPO_MSS, IL_TOKEN); }
wscale	{ return next_state(IL_TCPO_MSS, IL_TOKEN); }
reserv-4	{ return next_state(IL_IPS_RESERV4, -1); }
topsecret	{ return next_state(IL_IPS_TOPSECRET, -1); }
secret		{ return next_state(IL_IPS_SECRET, -1); }
reserv-3	{ return next_state(IL_IPS_RESERV3, -1); }
confid		{ return next_state(IL_IPS_CONFID, -1); }
unclass		{ return next_state(IL_IPS_UNCLASS, -1); }
reserv-2	{ return next_state(IL_IPS_RESERV2, -1); }
reserv-1	{ return next_state(IL_IPS_RESERV1, -1); }
icmp		{ return next_state(IL_ICMP, -1); }
type		{ return next_state(IL_ICMPTYPE, -1); }
code		{ return next_state(IL_ICMPCODE, -1); }
echorep		{ return next_state(IL_ICMP_ECHOREPLY, -1); }
unreach		{ return next_state(IL_ICMP_UNREACH, -1); }
squench		{ return next_state(IL_ICMP_SOURCEQUENCH, -1); }
redir		{ return next_state(IL_ICMP_REDIRECT, -1); }
echo		{ return next_state(IL_ICMP_ECHO, -1); }
routerad	{ return next_state(IL_ICMP_ROUTERADVERT, -1); }
routersol	{ return next_state(IL_ICMP_ROUTERSOLICIT, -1); }
timex		{ return next_state(IL_ICMP_TIMXCEED, -1); }
paramprob	{ return next_state(IL_ICMP_PARAMPROB, -1); }
timest		{ return next_state(IL_ICMP_TSTAMP, -1); }
timestrep	{ return next_state(IL_ICMP_TSTAMPREPLY, -1); }
inforeq		{ return next_state(IL_ICMP_IREQ, -1); }
inforep		{ return next_state(IL_ICMP_IREQREPLY, -1); }
maskreq		{ return next_state(IL_ICMP_MASKREQ, -1); }
maskrep		{ return next_state(IL_ICMP_MASKREPLY, -1); }
net-unr		{ return next_state(IL_ICMP_UNREACH_NET, -1); }
host-unr	{ return next_state(IL_ICMP_UNREACH_HOST, -1); }
proto-unr	{ return next_state(IL_ICMP_UNREACH_PROTOCOL, -1); }
port-unr	{ return next_state(IL_ICMP_UNREACH_PORT, -1); }
needfrag	{ return next_state(IL_ICMP_UNREACH_NEEDFRAG, -1); }
srcfail		{ return next_state(IL_ICMP_UNREACH_SRCFAIL, -1); }
net-unk		{ return next_state(IL_ICMP_UNREACH_NET_UNKNOWN, -1); }
host-unk	{ return next_state(IL_ICMP_UNREACH_HOST_UNKNOWN, -1); }
isolate		{ return next_state(IL_ICMP_UNREACH_ISOLATED, -1); }
net-prohib	{ return next_state(IL_ICMP_UNREACH_NET_PROHIB, -1); }
host-prohib	{ return next_state(IL_ICMP_UNREACH_HOST_PROHIB, -1); }
net-tos		{ return next_state(IL_ICMP_UNREACH_TOSNET, -1); }
host-tos	{ return next_state(IL_ICMP_UNREACH_TOSHOST, -1); }
filter-prohib	{ return next_state(IL_ICMP_UNREACH_FILTER_PROHIB, -1); }
host-preced	{ return next_state(IL_ICMP_UNREACH_HOST_PRECEDENCE, -1); }
cutoff-preced	{ return next_state(IL_ICMP_UNREACH_PRECEDENCE_CUTOFF, -1); }
net-redir	{ return next_state(IL_ICMP_REDIRECT_NET, -1); }
host-redir	{ return next_state(IL_ICMP_REDIRECT_HOST, -1); }
tos-net-redir	{ return next_state(IL_ICMP_REDIRECT_TOSNET, -1); }
tos-host-redir	{ return next_state(IL_ICMP_REDIRECT_TOSHOST, -1); }
intrans		{ return next_state(IL_ICMP_TIMXCEED_INTRANS, -1); }
reass		{ return next_state(IL_ICMP_TIMXCEED_REASS, -1); }
optabsent	{ return next_state(IL_ICMP_PARAMPROB_OPTABSENT, -1); }
otime		{ return next_state(IL_ICMP_OTIME, -1); }
rtime		{ return next_state(IL_ICMP_RTIME, -1); }
ttime		{ return next_state(IL_ICMP_TTIME, -1); }
icmpseq		{ return next_state(IL_ICMP_SEQ, -1); }
icmpid		{ return next_state(IL_ICMP_SEQ, -1); }
\377		{ return 0; }		/* EOF */
a177 1
\.	{ return next_item(IL_DOT); }
d183 1
a183 1
[^ {}\n\t;]*	{ return next_item(IL_TOKEN); }
d202 1
a202 1
	prstack[numpr - 1] = oldproto;
d209 1
a209 1
	proto = prstack[numpr];
d230 4
d238 7
a255 7
	token++;

	if (next == IL_TOKEN) {
		next = -1;
		return save_token();
	}

d267 2
a268 2
		oldproto = proto;
		proto = nstate;
d271 1
a271 1
		if (proto == IL_IPV4)
d273 1
a273 1
		else if (proto == IL_TCP)
d275 1
a275 1
		else if (proto == IL_UDP)
d279 1
a279 1
		if (proto == IL_IPV4)
d281 1
a281 1
		else if (proto == IL_TCP)
d285 1
a285 1
		if (proto == IL_TCP)
d289 1
a289 1
		if (proto == IL_TCP)
d293 1
a293 1
		if (proto == IL_TCP)
d297 1
a297 1
		if (proto == IL_IPV4)
d299 1
a299 1
		else if (proto == IL_TCP)
d303 1
a303 1
		if (proto == IL_IPV4)
d305 1
a305 1
		else if (proto == IL_UDP)
d315 3
a317 1
	int c = input();
@

