head	1.4;
access;
symbols
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.2.0.12
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.10
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.8
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2001.05.30.02.12.48;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2001.01.17.06.01.24;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	98.01.26.04.16.50;	author dgregor;	state Exp;
branches;
next	1.1;

1.1
date	96.05.10.21.40.54;	author dm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@/*	$OpenBSD: 44arp.c,v 1.3 2001/01/17 06:01:24 fgsch Exp $	*/

/*
 * Based upon 4.4BSD's /usr/sbin/arp
 */
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <sys/param.h>
#include <sys/file.h>
#include <sys/socket.h>
#include <sys/sysctl.h>
#include <net/if.h>
#include <net/if_dl.h>
#include <net/if_types.h>
#include <net/route.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <errno.h>
#include <nlist.h>
#include <stdio.h>
#include <netinet/in.h>
#include <netinet/ip_var.h>
#include <netinet/tcp.h>
#if __FreeBSD_version >= 300000
# include <net/if_var.h>
#endif
#include "ipsend.h"
#include "iplang.h"


/*
 * lookup host and return
 * its IP address in address
 * (4 bytes)
 */
int	resolve(host, address) 
char	*host, *address;
{
        struct	hostent	*hp;
        u_long	add;

	add = inet_addr(host);
	if (add == -1)
	    {
		if (!(hp = gethostbyname(host)))
		    {
			fprintf(stderr, "unknown host: %s\n", host);
			return -1;
		    }
		bcopy((char *)hp->h_addr, (char *)address, 4);
		return 0;
	}
	bcopy((char*)&add, address, 4);
	return 0;
}


int	arp(addr, eaddr)
char	*addr, *eaddr;
{
	int	mib[6];
	size_t	needed;
	char	*lim, *buf, *next;
	struct	rt_msghdr	*rtm;
	struct	sockaddr_inarp	*sin;
	struct	sockaddr_dl	*sdl;

#ifdef	IPSEND
	if (arp_getipv4(addr, ether) == 0)
		return 0;
#endif

	mib[0] = CTL_NET;
	mib[1] = PF_ROUTE;
	mib[2] = 0;
	mib[3] = AF_INET;
	mib[4] = NET_RT_FLAGS;
	mib[5] = RTF_LLINFO;
	if (sysctl(mib, 6, NULL, &needed, NULL, 0) == -1)
	    {
		perror("route-sysctl-estimate");
		exit(-1);
	    }
	if ((buf = malloc(needed)) == NULL)
	    {
		perror("malloc");
		exit(-1);
	    }
	if (sysctl(mib, 6, buf, &needed, NULL, 0) == -1)
	    {
		perror("actual retrieval of routing table");
		exit(-1);
	    }
	lim = buf + needed;
	for (next = buf; next < lim; next += rtm->rtm_msglen)
	    {
		rtm = (struct rt_msghdr *)next;
		sin = (struct sockaddr_inarp *)(rtm + 1);
		sdl = (struct sockaddr_dl *)(sin + 1);
		if (addr && !bcmp(addr, (char *)&sin->sin_addr,
				  sizeof(struct in_addr)))
		    {
			bcopy(LLADDR(sdl), eaddr, sdl->sdl_alen);
			return 0;
		    }
	    }
	return -1;
}
@


1.3
log
@2nd part of the ipf code; need more testing.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2
log
@IPF 3.2.3
@
text
@d1 2
d31 1
d70 5
@


1.1
log
@ipfilter 3.0.4
@
text
@d4 3
d22 8
d63 1
a63 1
	char	*host, *malloc(), *lim, *buf, *next;
@
