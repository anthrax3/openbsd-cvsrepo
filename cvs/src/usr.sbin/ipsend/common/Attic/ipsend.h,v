head	1.5;
access;
symbols
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.10
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.8
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2001.05.30.02.12.49;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	2001.01.30.14.58.23;	author kjell;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.17.06.01.25;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.18.19.57.04;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	98.01.26.04.16.52;	author dgregor;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@/*	$OpenBSD: ipsend.h,v 1.4 2001/01/30 14:58:23 kjell Exp $	*/

/*
 * ipsend.h (C) 1997-1998 Darren Reed
 *
 * This was written to test what size TCP fragments would get through
 * various TCP/IP packet filters, as used in IP firewalls.  In certain
 * conditions, enough of the TCP header is missing for unpredictable
 * results unless the filter is aware that this can happen.
 *
 * The author provides this program as-is, with no gaurantee for its
 * suitability for any specific purpose.  The author takes no responsibility
 * for the misuse/abuse of this program and provides it for the sole purpose
 * of testing packet filter policies.  This file maybe distributed freely
 * providing it is not modified and that this notice remains in tact.
 *
 */
#ifndef	__P
# ifdef	__STDC__
#  define	__P(x)	x
# else
#  define	__P(x)	()
# endif
#endif

#include "ip_fil_compat.h"
#ifdef	linux
#include <linux/sockios.h>
#endif
#include "tcpip.h"
#include "ipt.h"
#include "ipf.h"

extern	int	resolve __P((char *, char *));
extern	int	arp __P((char *, char *));
extern	u_short	chksum __P((u_short *, int));
extern	int	send_ether __P((int, char *, int, struct in_addr));
extern	int	send_ip __P((int, int, ip_t *, struct in_addr, int));
extern	int	send_tcp __P((int, int, ip_t *, struct in_addr));
extern	int	send_udp __P((int, int, ip_t *, struct in_addr));
extern	int	send_icmp __P((int, int, ip_t *, struct in_addr));
extern	int	send_packet __P((int, int, ip_t *, struct in_addr));
extern	int	send_packets __P((char *, int, ip_t *, struct in_addr));
extern	u_short	seclevel __P((char *));
extern	u_32_t	buildopts __P((char *, char *, int));
extern	int	addipopt __P((char *, struct ipopt_names *, int, char *));
extern	int	initdevice __P((char *, int, int));
extern	int	sendip __P((int, char *, int));
#ifdef	linux
extern	struct	sock	*find_tcp __P((int, struct tcpiphdr *));
#else
extern	struct	tcpcb	*find_tcp __P((int, struct tcpiphdr *));
#endif
extern	int	ip_resend __P((char *, int, struct ipread *, struct in_addr, char *));

extern	void	ip_test1 __P((char *, int, ip_t *, struct in_addr, int));
extern	void	ip_test2 __P((char *, int, ip_t *, struct in_addr, int));
extern	void	ip_test3 __P((char *, int, ip_t *, struct in_addr, int));
extern	void	ip_test4 __P((char *, int, ip_t *, struct in_addr, int));
extern	void	ip_test5 __P((char *, int, ip_t *, struct in_addr, int));
extern	void	ip_test6 __P((char *, int, ip_t *, struct in_addr, int));
extern	void	ip_test7 __P((char *, int, ip_t *, struct in_addr, int));
extern	int	do_socket __P((char *, int, struct tcpiphdr *, struct in_addr));
extern	int	openkmem __P((void));
extern	int	kmemcpy __P((char *, void *, int));

#define	KMCPY(a,b,c)	kmemcpy((char *)(a), (void *)(b), (int)(c))

#ifndef	OPT_RAW
#define	OPT_RAW	0x80000
#endif
@


1.4
log
@ip_compat.h to ip_fil_compat.h. missed this one. sorry
@
text
@d1 1
a1 1
/*	$OpenBSD: ipsend.h,v 1.3 2001/01/17 06:01:25 fgsch Exp $	*/
@


1.3
log
@2nd part of the ipf code; need more testing.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d26 1
a26 1
#include "ip_compat.h"
@


1.2
log
@fix preprocessor warning
@
text
@d1 2
d4 1
a4 1
 * ipsend.h (C) 1997 Darren Reed
d26 1
a26 1
#include "ip_fil_compat.h"
d69 1
a69 1
#ifndef OPT_RAW
@


1.1
log
@IPF 3.2.3
@
text
@d67 1
d69 1
@

