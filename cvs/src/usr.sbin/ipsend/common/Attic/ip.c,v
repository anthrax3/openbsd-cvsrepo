head	1.7;
access;
symbols
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.12
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.10
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.8
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2001.05.30.02.12.48;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2001.01.17.06.01.24;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	98.01.26.04.16.50;	author dgregor;	state Exp;
branches;
next	1.4;

1.4
date	97.10.04.00.03.08;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.04.06.20.15.46;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.09.18.02.16.27;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.05.10.21.40.55;	author dm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@/*	$OpenBSD: ip.c,v 1.6 2001/01/17 06:01:24 fgsch Exp $	*/

/*
 * ip.c (C) 1995-1998 Darren Reed
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that this notice is preserved and due credit is given
 * to the original author and the contributors.
 */
#if !defined(lint)
static const char sccsid[] = "%W% %G% (C)1995";
static const char rcsid[] = "@@(#)$IPFilter: ip.c,v 2.1 1999/08/04 17:31:04 darrenr Exp $";
#endif
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <netinet/in_systm.h>
#include <sys/socket.h>
#include <net/if.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>
#include <netinet/ip_icmp.h>
#include <sys/param.h>
#ifndef	linux
# include <netinet/if_ether.h>
# include <netinet/ip_var.h>
# if __FreeBSD_version >= 300000
#  include <net/if_var.h>
# endif
#endif
#include "ipsend.h"


static	char	*ipbuf = NULL, *ethbuf = NULL;


u_short	chksum(buf,len)
u_short	*buf;
int	len;
{
	u_long	sum = 0;
	int	nwords = len >> 1;

	for(; nwords > 0; nwords--)
		sum += *buf++;
	sum = (sum>>16) + (sum & 0xffff);
	sum += (sum >>16);
	return (~sum);
}


int	send_ether(nfd, buf, len, gwip)
int	nfd, len;
char	*buf;
struct	in_addr	gwip;
{
	static	struct	in_addr	last_gw;
	static	char	last_arp[6] = { 0, 0, 0, 0, 0, 0};
	ether_header_t	*eh;
	char	*s;
	int	err;

	if (!ethbuf)
		ethbuf = (char *)calloc(1, 65536+1024);
	s = ethbuf;
	eh = (ether_header_t *)s;

	bcopy((char *)buf, s + sizeof(*eh), len);
	if (gwip.s_addr == last_gw.s_addr)
		bcopy(last_arp, (char *)A_A eh->ether_dhost, 6);
	else if (arp((char *)&gwip, (char *)A_A eh->ether_dhost) == -1)
	    {
		perror("arp");
		return -2;
	    }
	eh->ether_type = htons(ETHERTYPE_IP);
	last_gw.s_addr = gwip.s_addr;
	err = sendip(nfd, s, sizeof(*eh) + len);
	return err;
}


/*
 */
int	send_ip(nfd, mtu, ip, gwip, frag)
int	nfd, mtu;
ip_t	*ip;
struct	in_addr	gwip;
int	frag;
{
	static	struct	in_addr	last_gw;
	static	char	last_arp[6] = { 0, 0, 0, 0, 0, 0};
	static	u_short	id = 0;
	ether_header_t	*eh;
	ip_t	ipsv;
	int	err, iplen;

	if (!ipbuf)
		ipbuf = (char *)malloc(65536);
	eh = (ether_header_t *)ipbuf;

	bzero((char *)A_A eh->ether_shost, sizeof(eh->ether_shost));
	if (last_gw.s_addr && (gwip.s_addr == last_gw.s_addr))
		bcopy(last_arp, (char *)A_A eh->ether_dhost, 6);
	else if (arp((char *)&gwip, (char *)A_A eh->ether_dhost) == -1)
	    {
		perror("arp");
		return -2;
	    }
	bcopy((char *)A_A eh->ether_dhost, last_arp, sizeof(last_arp));
	eh->ether_type = htons(ETHERTYPE_IP);

	bcopy((char *)ip, (char *)&ipsv, sizeof(*ip));
	last_gw.s_addr = gwip.s_addr;
	iplen = ip->ip_len;
	ip->ip_len = htons(iplen);
	if (!(frag & 2)) {
		if (!ip->ip_v)
			ip->ip_v   = IPVERSION;
		if (!ip->ip_id)
			ip->ip_id  = htons(id++);
		if (!ip->ip_ttl)
			ip->ip_ttl = 60;
	}

	if (!frag || (sizeof(*eh) + iplen < mtu))
	    {
		ip->ip_sum = 0;
		ip->ip_sum = chksum((u_short *)ip, ip->ip_hl << 2);

		bcopy((char *)ip, ipbuf + sizeof(*eh), iplen);
		err =  sendip(nfd, ipbuf, sizeof(*eh) + iplen);
	    }
	else
	    {
		/*
		 * Actually, this is bogus because we're putting all IP
		 * options in every packet, which isn't always what should be
		 * done.  Will do for now.
		 */
		ether_header_t	eth;
		char	optcpy[48], ol;
		char	*s;
		int	i, sent = 0, ts, hlen, olen;

		hlen = ip->ip_hl << 2;
		if (mtu < (hlen + 8)) {
			fprintf(stderr, "mtu (%d) < ip header size (%d) + 8\n",
				mtu, hlen);
			fprintf(stderr, "can't fragment data\n");
			return -2;
		}
		ol = (ip->ip_hl << 2) - sizeof(*ip);
		for (i = 0, s = (char*)(ip + 1); ol > 0; )
			if (*s == IPOPT_EOL) {
				optcpy[i++] = *s;
				break;
			} else if (*s == IPOPT_NOP) {
				s++;
				ol--;
			} else
			    {
				olen = (int)(*(u_char *)(s + 1));
				ol -= olen;
				if (IPOPT_COPIED(*s))
				    {
					bcopy(s, optcpy + i, olen);
					i += olen;
					s += olen;
				    }
			    }
		if (i)
		    {
			/*
			 * pad out
			 */
			while ((i & 3) && (i & 3) != 3)
				optcpy[i++] = IPOPT_NOP;
			if ((i & 3) == 3)
				optcpy[i++] = IPOPT_EOL;
		    }

		bcopy((char *)eh, (char *)&eth, sizeof(eth));
		s = (char *)ip + hlen;
		iplen = ntohs(ip->ip_len) - hlen;
		ip->ip_off |= htons(IP_MF);

		while (1)
		    {
			if ((sent + (mtu - hlen)) >= iplen)
			    {
				ip->ip_off ^= htons(IP_MF);
				ts = iplen - sent;
			    }
			else
				ts = (mtu - hlen);
			ip->ip_off &= htons(0xe000);
			ip->ip_off |= htons(sent >> 3);
			ts += hlen;
			ip->ip_len = htons(ts);
			ip->ip_sum = 0;
			ip->ip_sum = chksum((u_short *)ip, hlen);
			bcopy((char *)ip, ipbuf + sizeof(*eh), hlen);
			bcopy(s + sent, ipbuf + sizeof(*eh) + hlen, ts - hlen);
			err =  sendip(nfd, ipbuf, sizeof(*eh) + ts);

			bcopy((char *)&eth, ipbuf, sizeof(eth));
			sent += (ts - hlen);
			if (!(ntohs(ip->ip_off) & IP_MF))
				break;
			else if (!(ip->ip_off & htons(0x1fff)))
			    {
				hlen = i + sizeof(*ip);
				ip->ip_hl = (sizeof(*ip) + i) >> 2;
				bcopy(optcpy, (char *)(ip + 1), i);
			    }
		    }
	    }

	bcopy((char *)&ipsv, (char *)ip, sizeof(*ip));
	return err;
}


/*
 * send a tcp packet.
 */
int	send_tcp(nfd, mtu, ip, gwip)
int	nfd, mtu;
ip_t	*ip;
struct	in_addr	gwip;
{
	static	tcp_seq	iss = 2;
	struct	tcpiphdr *ti;
	tcphdr_t *t;
	int	thlen, i, iplen, hlen;
	u_32_t	lbuf[20];

	iplen = ip->ip_len;
	hlen = ip->ip_hl << 2;
	t = (tcphdr_t *)((char *)ip + hlen);
	ti = (struct tcpiphdr *)lbuf;
	thlen = t->th_off << 2;
	if (!thlen)
		thlen = sizeof(tcphdr_t);
	bzero((char *)ti, sizeof(*ti));
	ip->ip_p = IPPROTO_TCP;
	ti->ti_pr = ip->ip_p;
	ti->ti_src = ip->ip_src;
	ti->ti_dst = ip->ip_dst;
	bcopy((char *)ip + hlen, (char *)&ti->ti_sport, thlen);

	if (!ti->ti_win)
		ti->ti_win = htons(4096);
	iss += 63;

	i = sizeof(struct tcpiphdr) / sizeof(long);

	if ((ti->ti_flags == TH_SYN) && !ntohs(ip->ip_off) &&
	    (lbuf[i] != htonl(0x020405b4))) {
		lbuf[i] = htonl(0x020405b4);
		bcopy((char *)ip + hlen + thlen, (char *)ip + hlen + thlen + 4,
		      iplen - thlen - hlen);
		thlen += 4;
	    }
	ti->ti_off = thlen >> 2;
	ti->ti_len = htons(thlen);
	ip->ip_len = hlen + thlen;
	ti->ti_sum = 0;
	ti->ti_sum = chksum((u_short *)ti, thlen + sizeof(ip_t));

	bcopy((char *)&ti->ti_sport, (char *)ip + hlen, thlen);
	return send_ip(nfd, mtu, ip, gwip, 1);
}


/*
 * send a udp packet.
 */
int	send_udp(nfd, mtu, ip, gwip)
int	nfd, mtu;
ip_t	*ip;
struct	in_addr	gwip;
{
	struct	tcpiphdr *ti;
	int	thlen;
	u_long	lbuf[20];

	ti = (struct tcpiphdr *)lbuf;
	bzero((char *)ti, sizeof(*ti));
	thlen = sizeof(udphdr_t);
	ti->ti_pr = ip->ip_p;
	ti->ti_src = ip->ip_src;
	ti->ti_dst = ip->ip_dst;
	bcopy((char *)ip + (ip->ip_hl << 2),
	      (char *)&ti->ti_sport, sizeof(udphdr_t));

	ti->ti_len = htons(thlen);
	ip->ip_len = (ip->ip_hl << 2) + thlen;
	ti->ti_sum = 0;
	ti->ti_sum = chksum((u_short *)ti, thlen + sizeof(ip_t));

	bcopy((char *)&ti->ti_sport,
	      (char *)ip + (ip->ip_hl << 2), sizeof(udphdr_t));
	return send_ip(nfd, mtu, ip, gwip, 1);
}


/*
 * send an icmp packet.
 */
int	send_icmp(nfd, mtu, ip, gwip)
int	nfd, mtu;
ip_t	*ip;
struct	in_addr	gwip;
{
	struct	icmp	*ic;

	ic = (struct icmp *)((char *)ip + (ip->ip_hl << 2));

	ic->icmp_cksum = 0;
	ic->icmp_cksum = chksum((u_short *)ic, sizeof(struct icmp));

	return send_ip(nfd, mtu, ip, gwip, 1);
}


int	send_packet(nfd, mtu, ip, gwip)
int	nfd, mtu;
ip_t	*ip;
struct	in_addr	gwip;
{
        switch (ip->ip_p)
        {
        case IPPROTO_TCP :
                return send_tcp(nfd, mtu, ip, gwip);
        case IPPROTO_UDP :
                return send_udp(nfd, mtu, ip, gwip);
        case IPPROTO_ICMP :
                return send_icmp(nfd, mtu, ip, gwip);
        default :
                return send_ip(nfd, mtu, ip, gwip, 1);
        }
}
@


1.6
log
@2nd part of the ipf code; need more testing.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.5
log
@IPF 3.2.3
@
text
@d1 2
d4 1
a4 1
 * ip.c (C) 1995-1997 Darren Reed
d12 1
a12 1
static const char rcsid[] = "@@(#)$Id: ip.c,v 2.0.2.11.2.2 1997/11/28 03:36:47 darrenr Exp $";
a121 1
	ip->ip_off = htons(ip->ip_off);
d264 1
a264 1
	if ((ti->ti_flags == TH_SYN) && !ip->ip_off &&
@


1.4
log
@byte order of ether_type; khym@@bga.com
@
text
@d2 1
a2 1
 * ip.c (C) 1995 Darren Reed
d4 3
a6 5
 * The author provides this program as-is, with no gaurantee for its
 * suitability for any specific purpose.  The author takes no responsibility
 * for the misuse/abuse of this program and provides it for the sole purpose
 * of testing packet filter policies.  This file maybe distributed freely
 * providing it is not modified and that this notice remains in tact.
d8 3
a10 2
#ifndef	lint
static	char	sccsid[] = "%W% %G% (C)1995";
d15 2
d26 1
d28 5
a32 7
#include <netinet/if_ether.h>
#include <netinet/ip_var.h>
#include <netinet/tcpip.h>
#endif
#include "ip_compat.h"
#ifdef	linux
#include "tcpip.h"
d34 1
d73 2
a74 2
		bcopy(last_arp, eh->ether_dhost, 6);
	else if (arp((char *)&gwip, &eh->ether_dhost) == -1)
d99 1
a99 1
	int	err;
d105 1
a105 1
	bzero(&eh->ether_shost, sizeof(eh->ether_shost));
d107 2
a108 2
		bcopy(last_arp, eh->ether_dhost, 6);
	else if (arp((char *)&gwip, &eh->ether_dhost) == -1)
d113 1
a113 1
	bcopy(eh->ether_dhost, last_arp, sizeof(last_arp));
d118 2
a119 1
	ip->ip_len = htons(ip->ip_len);
d121 8
a128 6
	if (!ip->ip_v)
		ip->ip_v   = IPVERSION;
	if (!ip->ip_id)
		ip->ip_id  = htons(id++);
	if (!ip->ip_ttl)
		ip->ip_ttl = 60;
d130 1
a130 1
	if (!frag || (sizeof(*eh) + ntohs(ip->ip_len) < mtu))
d133 1
a133 1
		ip->ip_sum = chksum(ip, ip->ip_hl << 2);
d135 2
a136 2
		bcopy((char *)ip, ipbuf + sizeof(*eh), ntohs(ip->ip_len));
		err =  sendip(nfd, ipbuf, sizeof(*eh) + ntohs(ip->ip_len));
d148 1
a148 1
		int	i, iplen, sent = 0, ts, hlen, olen;
d183 1
a183 1
			if (i & 3 == 3)
d206 1
a206 1
			ip->ip_sum = chksum(ip, hlen);
d239 7
a245 3
	int	thlen, i;
	u_long	lbuf[20];

d247 3
a250 1
	thlen = sizeof(tcphdr_t);
d255 1
a255 2
	bcopy((char *)ip + (ip->ip_hl << 2),
	      (char *)&ti->ti_sport, sizeof(tcphdr_t));
d259 1
a259 3
	if (!ti->ti_seq)
		ti->ti_seq = htonl(iss);
	iss += 64;
d261 4
a264 4
	if ((ti->ti_flags == TH_SYN) && !ip->ip_off)
	    {
		ip = (ip_t *)realloc((char *)ip, ntohs(ip->ip_len) + 4);
		i = sizeof(struct tcpiphdr) / sizeof(long);
d266 2
a267 2
		bcopy((char *)(lbuf + i), (char*)ip + ntohs(ip->ip_len),
		      sizeof(u_long));
d270 1
a270 2
	if (!ti->ti_off)
		ti->ti_off = thlen >> 2;
d272 1
a272 1
	ip->ip_len = (ip->ip_hl << 2) + thlen;
d274 1
a274 1
	ti->ti_sum = chksum(ti, thlen + sizeof(ip_t));
d276 1
a276 2
	bcopy((char *)&ti->ti_sport,
	      (char *)ip + (ip->ip_hl << 2), thlen);
d290 1
a290 1
	int	thlen, i;
d305 1
a305 1
	ti->ti_sum = chksum(ti, thlen + sizeof(ip_t));
d326 1
a326 1
	ic->icmp_cksum = chksum((char *)ic, sizeof(struct icmp));
@


1.3
log
@#include stdlib.h to get malloc(3) and calloc(3) definitions.
Fixes compiler warnings.
@
text
@d78 1
a78 1
	eh->ether_type = ETHERTYPE_IP;
d113 1
a113 1
	eh->ether_type = ETHERTYPE_IP;
@


1.2
log
@send_ether no free; sent fix to darren
@
text
@d15 1
@


1.1
log
@ipfilter 3.0.4
@
text
@a74 1
		free(buf);
a79 1
	free(buf);
@
