head	1.6;
access;
symbols
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2001.05.30.02.12.56;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2000.04.12.21.47.53;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	99.10.10.17.50.03;	author ericj;	state Exp;
branches;
next	1.3;

1.3
date	99.10.07.06.35.50;	author ericj;	state Exp;
branches;
next	1.2;

1.2
date	99.09.21.01.17.31;	author alex;	state Exp;
branches;
next	1.1;

1.1
date	98.01.26.04.17.09;	author dgregor;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@.\"     $OpenBSD: iptest.1,v 1.5 2000/04/12 21:47:53 aaron Exp $
.Dd October  8, 1999
.Dt IPTEST 1
.Os
.Sh NAME
.Nm iptest
.Nd automatically generate packets to test IP functionality
.Sh SYNOPSIS
.Nm iptest
.Op Fl 1234567
.Op Fl d Ar device
.Op Fl g Ar gateway
.Op Fl m Ar mtu
.Op Fl p Ar pointtest
.Op Fl s Ar src
.Ar destination
.Sh DESCRIPTION
.Nm
generates a series of IP packets to
.Ar destination
via
.Ar gateway
using the interface
.Ar device .
The packets generated test various aspects of IP functionality.
.Pp
By default all tests are done, using the interface
.Sq lan0 .
This interface does not normally exist on
.Ox
so an existing interface must be specified with the
.Fl d
option.
To limit the tests to a single group or to a single test within a group the
.Fl 1234567
and
.Fl p
options are available. It is not possible to specify more than one
test group or point test at a time.
.Pp
.Nm
must be run as root.
.Ss Options
.Bl -tag -width "-r "
.It Fl 1
IP header tests. This group of tests generates packets with the IP
header fields set to invalid values given other packet characteristics.
The point tests are:
.Pp
.Bl -tag -width "10 " -compact -offset indent
.It 1
ip_hl < ip_len
.It 2
ip_hl > ip_len
.It 3
ip_v < 4
.It 4
ip_v > 4
.It 5
ip_len < packetsize, long packets
.It 6
ip_len > packet size, short packets
.It 7
Zero length fragments
.It 8
packet > 64k after reassembly
.It 9
IP offset with MSB set
.It 10
ttl variations
.El
.It Fl 2
IP options tests. This group of tests generates packets with the IP
options constructed with invalid values given other packet characteristics.
The point tests are:
.Pp
.Bl -tag -compact -width "1  " -offset indent
.It 1
option length > packet length
.It 2
option length = 0
.El
.It Fl 3
ICMP tests. This group of tests generates packets with the ICMP
header fields set to non-standard values.
The point tests are:
.Pp
.Bl -tag -compact -width "1  " -offset indent
.It 1
ICMP types 0-31 & 255
.It 2
type 3 & codes 0-31
.It 3
type 4 & codes 0, 127, 128, 255
.It 4
type 5 & codes 0, 127, 128, 255
.It 5
types 8-10, 13-18 with codes 0, 127, 128 and 255
.It 6
type 12 & codes 0, 127, 128, 129, 255
.It 7
type 3 & codes 9-10, 13-14 and 17-18 - shortened packets
.El
.It Fl 4
UDP tests. This group of tests generates packets with the UDP
header fields set to non-standard values. The point tests are:
.Pp
.Bl -tag -width "1  " -compact -offset indent
.It 1
UDP length > packet size
.It 2
UDP length < packetsize
.It 3
sport = 0, 1, 32767, 32768, 65535
.It 4
dport = 0, 1, 32767, 32768, 65535
.It 5
sizeof(struct ip) <= MTU <= sizeof(struct udphdr) + sizeof(struct ip)
.El
.It Fl 5
TCP tests. This group of tests generates packets with the TCP
header fields set to non-standard values. The point tests are:
.Pp
.Bl -tag -width "1  " -compact -offset indent
.It 1
TCP flags variations, all combinations
.It 2
seq = 0, 0x7fffffff, 0x8000000, 0xa0000000, 0xffffffff
.It 3
ack = 0, 0x7fffffff, 0x8000000, 0xa0000000, 0xffffffff
.It 4
SYN packet with window of 0, 32768, 65535
.It 5
set urgent pointer to 1, 0x7fff, 0x8000, 0xffff
.It 6
data offset
.It 7
sport = 0, 1, 32767, 32768, 65535
.It 8
dport = 0, 1, 32767, 32768, 65535
.El
.It Fl 6
Overlapping fragments test. This test generates a large number of fragments in
an attempt to exhaust the network buffers used for holding packets for later
reassembly.
.Pp
WARNING: this may crash or cause serious performance degradation
to the target host.
.It Fl 7
Random packets. This test generates 1024 random IP packets with only
the IP version, checksum, length and IP offset field correct.
.It Fl d Ar device
Set the interface name to be the name supplied.
.It Fl g Ar gateway
Specify the hostname of the gateway through which to route packets. This
is required whenever the destination host isn't directly attached to the
same network as the host from which you're sending.
.It Fl m Ar mtu
Set the MTU used when sending out packets to
.Ar mtu .
This option lets you
set a fake MTU, allowing the simulation of network interfaces with small
MTU's.
.It Fl p Ar pointtest
Run point test
.Ar pointtest
of the test group.
.It Fl s Ar src
Specify the source address of the IP packets as
.Ar src
.El
.Sh SEE ALSO
.Xr ipsend 1 ,
.Xr ipresend 1 ,
.Xr bpf 4
.Sh BUGS
If you find any, please send email to me at darrenr@@cyber.com.au
@


1.5
log
@Trailing whitespace begone!
@
text
@d1 1
a1 1
.\"     $OpenBSD: iptest.1,v 1.4 1999/10/10 17:50:03 ericj Exp $
@


1.4
log
@mdoc'd pages <kwesterback@@home.com>
@
text
@d1 1
a1 1
.\"     $OpenBSD: iptest.1,v 1.3 1999/10/07 06:35:50 ericj Exp $
d34 1
a34 1
To limit the tests to a single group or to a single test within a group the 
d36 1
a36 1
and 
d67 1
a67 1
.It 9 
d69 1
a69 1
.It 10 
d78 1
a78 1
.It 1 
d80 1
a80 1
.It 2 
d89 1
a89 1
.It 1 
d127 1
a127 1
.It 2 
d129 1
a129 1
.It 3 
d131 3
a133 3
.It 4 
SYN packet with window of 0, 32768, 65535 
.It 5 
d135 1
a135 1
.It 6 
d137 1
a137 1
.It 7 
d139 1
a139 1
.It 8 
d175 1
a175 1
.Xr bpf 4 
@


1.3
log
@get rid of references to non-existant manpages. Still needs to be -mandoc'd
@
text
@d1 46
a46 31
.\"     $OpenBSD: iptest.1,v 1.2 1999/09/21 01:17:31 alex Exp $
.TH IPTEST 1
.SH NAME
iptest \- automatically generate a packets to test IP functionality
.SH SYNOPSIS
.B iptest
[
.B \-1234567
] [
.B \-d
<device>
] [
.B \-g
<gateway>
] [
.B \-m
<\fIMTU\fP>
] [
.B \-p
<\fIpointtest\fP>
] [
.B \-s
<\fIsource\fP>
] <destination>
.SH DESCRIPTION
.PP
\fBiptest\fP ...
.SH OPTIONS
.TP
.B \-1
Run IP test group #1.  This group of tests generates packets with the IP
d48 26
a73 8
The point tests are: 1 (ip_hl < ip_len), 2 (ip_hl > ip_len),
3 (ip_v < 4), 4 (ip_v > 4), 5 (ip_len < packetsize, long packets),
6 (ip_len > packet size, short packets), 7 (Zero length fragments),
8 (packet > 64k after reassembly), 9 (IP offset with MSB set), 10 (ttl
variations).
.TP
.B \-2
Run IP test group #2.  This group of tests generates packets with the IP
d75 69
a143 28
The point tests are: 1 (option length > packet length), 2 (option length = 0).
.TP
.B \-3
Run IP test group #3.  This group of tests generates packets with the ICMP
header fields set to non-standard values.  The point tests are: 1 (ICMP types
0-31 & 255), 2 (type 3 & code 0 - 31), 3 (type 4 & code 0, 127, 128, 255),
4 (type 5 & code 0, 127, 128, 255), 5 (types 8-10,13-18 with codes 0, 127,
128 and 255), 6 (type 12 & code 0, 127, 128, 129, 255) and 7 (type 3 & codes
9-10, 13-14 and 17-18 - shortened packets).
.TP
.B \-4
Run IP test group #4.  This group of tests generates packets with the UDP
header fields set to non-standard values.  The point tests are: 1 (UDP length
> packet size), 2 (UDP length < packetsize), 3 (sport = 0, 1, 32767, 32768,
65535), 4 (dport = 0, 1, 32767, 32768, 65535) and 5 (sizeof(struct ip) <= MTU
<= sizeof(struct udphdr) + sizeof(struct ip)).
.TP
.B \-5
Run IP test group #5.  This group of tests generates packets with the TCP
header fields set to non-standard values.  The point tests are: 1 (TCP flags
variations, all combinations), 2 (seq = 0, 0x7fffffff, 0x8000000, 0xa0000000,
0xffffffff),  3 (ack = 0, 0x7fffffff, 0x8000000, 0xa0000000, 0xffffffff),
4 (SYN packet with window of 0, 32768, 65535), 5 (set urgent pointer to 1,
0x7fff, 0x8000, 0xffff), 6 (data offset), 7 (sport = 0, 1, 32767, 32768,
65535) and 8 (dport = 0, 1, 32767, 32768, 65535).
.TP
.B \-6
Run IP test group #6.  This test generates a large number of fragments in
d145 3
a147 1
reassembly.  WARNING: this may crash or cause serious performance degradation
d149 2
a150 3
.TP
.B \-7
Run IP test group #7.  This test generates 1024 random IP packets with only
d152 1
a152 2
.TP
.BR \-d \0<interface>
d154 2
a155 3
.TP
.BR \-g \0<gateway>
Specify the hostname of the gateway through which to route packets.  This
d158 19
a176 17
.TP
.BR \-m \0<MTU>
Specify the MTU to be used when sending out packets.  This option allows you
to set a fake MTU, allowing the simulation of network interfaces with small
MTU's without setting them so.
.TP
.B \-p <test>
Run a...
.DT
.SH SEE ALSO
ipsend(1), ipresend(1), bpf(4)
.SH DIAGNOSTICS
Only one of the numeric test options may be given when \fIiptest\fP is run.
.PP
Needs to be run as root.
.SH BUGS
.PP
@


1.2
log
@Typo fix (invalud -> invalid); mason@@netbsd.org
@
text
@d1 1
a1 1
.\"     $OpenBSD: iptest.1,v 1.1 1998/01/26 04:17:09 dgregor Exp $
d95 1
a95 1
ipsend(1), ipresend(1), bpf(4), dlpi(7p)
@


1.1
log
@IPF 3.2.3
@
text
@d1 1
a1 1
.\"     $OpenBSD$
d41 1
a41 1
options constructed with invalud values given other packet characteristics.
@

