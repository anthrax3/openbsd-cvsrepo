head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.60
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.56
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.54
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.52
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.50
	OPENBSD_5_0:1.5.0.48
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.46
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.44
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.40
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.42
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.38
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.36
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.34
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.32
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.30
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.28
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.26
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.24
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.22
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.20
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.18
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.16
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.14
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.12
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.10
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.8
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2000.02.27.01.38.25;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.27.00.21.07;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	99.02.11.10.14.50;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.02.06.03.22.36;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.00.22.20;	author brian;	state Exp;
branches;
next	;


desc
@@


1.6
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1998 Brian Somers <brian@@Awfulhak.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$OpenBSD: descriptor.h,v 1.5 2000/02/27 01:38:25 brian Exp $
 */

#define PHYSICAL_DESCRIPTOR (1)
#define SERVER_DESCRIPTOR (2)
#define PROMPT_DESCRIPTOR (3)
#define CHAT_DESCRIPTOR (4)
#define DATALINK_DESCRIPTOR (5)
#define BUNDLE_DESCRIPTOR (6)
#define MPSERVER_DESCRIPTOR (7)
#define RADIUS_DESCRIPTOR (8)
#define CHAP_DESCRIPTOR (9)

struct bundle;

struct fdescriptor {
  int type;

  int (*UpdateSet)(struct fdescriptor *, fd_set *, fd_set *, fd_set *, int *);
  int (*IsSet)(struct fdescriptor *, const fd_set *);
  void (*Read)(struct fdescriptor *, struct bundle *, const fd_set *);
  int (*Write)(struct fdescriptor *, struct bundle *, const fd_set *);
};

#define descriptor_UpdateSet(d, r, w, e, n) ((*(d)->UpdateSet)(d, r, w, e, n))
#define descriptor_IsSet(d, s) ((*(d)->IsSet)(d, s))
#define descriptor_Read(d, b, f) ((*(d)->Read)(d, b, f))
#define descriptor_Write(d, b, f) ((*(d)->Write)(d, b, f))
@


1.5
log
@$Id$ -> $OpenBSD$
@
text
@d26 1
a26 1
 *	$OpenBSD: descriptor.h,v 1.4 2000/02/27 00:21:07 brian Exp $
@


1.4
log
@When we stop a timer that's the first in the timer list, ensure
that we adjust that timers `rest' value (with the current getitimer()
values) before using that to adjust the next items `rest' value.
After adjusting that value, restart the timer service so that we've
now got the correct setitimer() values.
When adjusting timer::rest, round to the closest TICKUNIT usecs
value.

struct descriptor -> struct fdescriptor (to avoid header polution in
NetBSD).

Introduce LOCALNAT and LOCALRAD defines.

The interface list that comes back from the PF_ROUTE/NET_RT_IFLIST mib
is aligned.  Teach this to ``show route'' and clean up some of the
sockaddr parsing routines.

Add ``set log dns'' to log DNS QUERY packets.

When ppp can't identify the relevant name, don't use "???", use
<nnn> or <0xnnn> instead.

Don't ``break'' when we come accross a non-RTM_IFINFO type
entry in the block returned by the NET_RT_IFLIST mib,
continue instead.

Correct UN_SIZE definition; ben@@scientia.demon.co.uk
@
text
@d26 1
a26 1
 *	$Id: descriptor.h,v 1.3 1999/02/11 10:14:50 brian Exp $
@


1.3
log
@When resending chap challenges, resend the same challenge
each time rather than making up a new one.

Increase the authname/authkey max sizes to 100 characters.

Allow ``authkey'' specifications beginning with ``!''.
When a challenge is received, the text following the
``!'' is executed as a program (expanding stuff in the same
way that ``sh'' and ``!bg'' do).  The program is passed the
peer name, peer challenge and local ``authname'' on standard
input and is expected to output the name/key combination that
should be used to build the CHAP response.

This provides support for Secure ID cards (guess what I was
given at work recently!) using CHAP.

Examples will follow.
@
text
@d26 1
a26 1
 *	$Id: descriptor.h,v 1.2 1999/02/06 03:22:36 brian Exp $
d41 1
a41 1
struct descriptor {
d44 4
a47 4
  int (*UpdateSet)(struct descriptor *, fd_set *, fd_set *, fd_set *, int *);
  int (*IsSet)(struct descriptor *, const fd_set *);
  void (*Read)(struct descriptor *, struct bundle *, const fd_set *);
  int (*Write)(struct descriptor *, struct bundle *, const fd_set *);
@


1.2
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d26 1
a26 1
 *	$Id: descriptor.h,v 1.4 1998/06/24 19:33:31 brian Exp $
d37 1
@


1.1
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@d36 1
@

