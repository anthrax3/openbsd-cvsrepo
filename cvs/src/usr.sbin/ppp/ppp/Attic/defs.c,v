head	1.26;
access;
symbols
	OPENBSD_5_5:1.25.0.28
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.24
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.22
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.20
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.18
	OPENBSD_5_0:1.25.0.16
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.14
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.25.0.12
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.8
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.10
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.25.0.6
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.25.0.4
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.25.0.2
	OPENBSD_4_3_BASE:1.25
	OPENBSD_4_2:1.24.0.22
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.24.0.20
	OPENBSD_4_1_BASE:1.24
	OPENBSD_4_0:1.24.0.18
	OPENBSD_4_0_BASE:1.24
	OPENBSD_3_9:1.24.0.16
	OPENBSD_3_9_BASE:1.24
	OPENBSD_3_8:1.24.0.14
	OPENBSD_3_8_BASE:1.24
	OPENBSD_3_7:1.24.0.12
	OPENBSD_3_7_BASE:1.24
	OPENBSD_3_6:1.24.0.10
	OPENBSD_3_6_BASE:1.24
	OPENBSD_3_5:1.24.0.8
	OPENBSD_3_5_BASE:1.24
	OPENBSD_3_4:1.24.0.6
	OPENBSD_3_4_BASE:1.24
	OPENBSD_3_3:1.24.0.4
	OPENBSD_3_3_BASE:1.24
	OPENBSD_3_2:1.24.0.2
	OPENBSD_3_2_BASE:1.24
	OPENBSD_3_1:1.23.0.2
	OPENBSD_3_1_BASE:1.23
	OPENBSD_3_0:1.20.0.2
	OPENBSD_3_0_BASE:1.20
	OPENBSD_2_9_BASE:1.19
	OPENBSD_2_9:1.19.0.2
	OPENBSD_2_8:1.18.0.2
	OPENBSD_2_8_BASE:1.18
	OPENBSD_2_7:1.12.0.2
	OPENBSD_2_7_BASE:1.12
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.26
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.25;

1.25
date	2008.02.26.09.52.38;	author jsg;	state Exp;
branches;
next	1.24;

1.24
date	2002.05.16.01.13.39;	author brian;	state Exp;
branches;
next	1.23;

1.23
date	2002.03.31.02.38.49;	author brian;	state Exp;
branches;
next	1.22;

1.22
date	2002.03.12.16.14.22;	author brian;	state Exp;
branches;
next	1.21;

1.21
date	2001.11.23.11.17.03;	author brian;	state Exp;
branches;
next	1.20;

1.20
date	2001.06.15.13.58.16;	author brian;	state Exp;
branches;
next	1.19;

1.19
date	2000.11.02.00.54.33;	author brian;	state Exp;
branches;
next	1.18;

1.18
date	2000.10.09.21.18.56;	author brian;	state Exp;
branches;
next	1.17;

1.17
date	2000.09.07.00.05.26;	author brian;	state Exp;
branches;
next	1.16;

1.16
date	2000.08.31.00.46.12;	author brian;	state Exp;
branches;
next	1.15;

1.15
date	2000.08.30.22.04.56;	author brian;	state Exp;
branches;
next	1.14;

1.14
date	2000.08.29.16.47.04;	author brian;	state Exp;
branches;
next	1.13;

1.13
date	2000.08.16.09.07.27;	author brian;	state Exp;
branches;
next	1.12;

1.12
date	2000.04.07.23.46.39;	author brian;	state Exp;
branches;
next	1.11;

1.11
date	2000.03.28.15.14.14;	author brian;	state Exp;
branches;
next	1.10;

1.10
date	2000.02.27.01.38.25;	author brian;	state Exp;
branches;
next	1.9;

1.9
date	2000.02.27.01.34.04;	author brian;	state Exp;
branches;
next	1.8;

1.8
date	2000.02.27.00.21.07;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.07.03.26.53;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	99.05.27.16.52.48;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	99.05.08.11.06.35;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	99.04.26.08.54.50;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	99.02.25.20.07.36;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.02.06.03.22.35;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.00.22.19;	author brian;	state Exp;
branches;
next	;


desc
@@


1.26
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1997 Brian Somers <brian@@Awfulhak.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$OpenBSD: defs.c,v 1.25 2008/02/26 09:52:38 jsg Exp $
 */


#include <sys/param.h>
#include <netdb.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/socket.h>

#include <ctype.h>
#include <errno.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#if defined(__FreeBSD__) && !defined(NOKLDLOAD)
#include <sys/module.h>
#endif
#include <termios.h>
#if !defined(__FreeBSD__) || __FreeBSD__ < 3
#include <time.h>
#endif
#include <unistd.h>

#if defined(__FreeBSD__) && !defined(NOKLDLOAD)
#include "id.h"
#include "log.h"
#endif
#include "defs.h"

#define	issep(c)	((c) == '\t' || (c) == ' ')

#if defined(__NetBSD__) || __FreeBSD__ < 3
void
randinit()
{
#if defined(__FreeBSD__)
  static int initdone;		/* srandomdev() call is only required once */

  if (!initdone) {
    initdone = 1;
    srandomdev();
  }
#else
  srandom((time(NULL)^getpid())+random());
#endif
}
#endif

ssize_t
fullread(int fd, void *v, size_t n)
{
  size_t got, total;

  for (total = 0; total < n; total += got)
    switch ((got = read(fd, (char *)v + total, n - total))) {
      case 0:
        return total;
      case -1:
        if (errno == EINTR)
          got = 0;
        else
          return -1;
    }
  return total;
}

static struct {
  int mode;
  const char *name;
} modes[] = {
  { PHYS_INTERACTIVE, "interactive" },
  { PHYS_AUTO, "auto" },
  { PHYS_DIRECT, "direct" },
  { PHYS_DEDICATED, "dedicated" },
  { PHYS_DDIAL, "ddial" },
  { PHYS_BACKGROUND, "background" },
  { PHYS_FOREGROUND, "foreground" },
  { PHYS_ALL, "*" },
  { 0, 0 }
};

const char *
mode2Nam(int mode)
{
  int m;

  for (m = 0; modes[m].mode; m++)
    if (modes[m].mode == mode)
      return modes[m].name;

  return "unknown";
}

int
Nam2mode(const char *name)
{
  int m, got, len;

  len = strlen(name);
  got = -1;
  for (m = 0; modes[m].mode; m++)
    if (!strncasecmp(name, modes[m].name, len)) {
      if (modes[m].name[len] == '\0')
	return modes[m].mode;
      if (got != -1)
        return 0;
      got = m;
    }

  return got == -1 ? 0 : modes[got].mode;
}

struct in_addr
GetIpAddr(const char *cp)
{
  struct in_addr ipaddr;

  if (!strcasecmp(cp, "default"))
    ipaddr.s_addr = INADDR_ANY;
  else if (inet_aton(cp, &ipaddr) == 0) {
    const char *ptr;

    /* Any illegal characters ? */
    for (ptr = cp; *ptr != '\0'; ptr++)
      if (!isalnum(*ptr) && strchr("-.", *ptr) == NULL)
        break;

    if (*ptr == '\0') {
      struct hostent *hp;

      hp = gethostbyname(cp);
      if (hp && hp->h_addrtype == AF_INET)
        memcpy(&ipaddr, hp->h_addr, hp->h_length);
      else
        ipaddr.s_addr = INADDR_NONE;
    } else
      ipaddr.s_addr = INADDR_NONE;
  }

  return ipaddr;
}

static const struct speeds {
  int nspeed;
  speed_t speed;
} speeds[] = {
#ifdef B50
  { 50, B50, },
#endif
#ifdef B75
  { 75, B75, },
#endif
#ifdef B110
  { 110, B110, },
#endif
#ifdef B134
  { 134, B134, },
#endif
#ifdef B150
  { 150, B150, },
#endif
#ifdef B200
  { 200, B200, },
#endif
#ifdef B300
  { 300, B300, },
#endif
#ifdef B600
  { 600, B600, },
#endif
#ifdef B1200
  { 1200, B1200, },
#endif
#ifdef B1800
  { 1800, B1800, },
#endif
#ifdef B2400
  { 2400, B2400, },
#endif
#ifdef B4800
  { 4800, B4800, },
#endif
#ifdef B9600
  { 9600, B9600, },
#endif
#ifdef B19200
  { 19200, B19200, },
#endif
#ifdef B38400
  { 38400, B38400, },
#endif
#ifndef _POSIX_SOURCE
#ifdef B7200
  { 7200, B7200, },
#endif
#ifdef B14400
  { 14400, B14400, },
#endif
#ifdef B28800
  { 28800, B28800, },
#endif
#ifdef B57600
  { 57600, B57600, },
#endif
#ifdef B76800
  { 76800, B76800, },
#endif
#ifdef B115200
  { 115200, B115200, },
#endif
#ifdef B230400
  { 230400, B230400, },
#endif
#ifdef B460800
  { 460800, B460800, },
#endif
#ifdef B921600
  { 921600, B921600, },
#endif
#ifdef EXTA
  { 19200, EXTA, },
#endif
#ifdef EXTB
  { 38400, EXTB, },
#endif
#endif				/* _POSIX_SOURCE */
  { 0, 0 }
};

int
SpeedToInt(speed_t speed)
{
  const struct speeds *sp;

  for (sp = speeds; sp->nspeed; sp++) {
    if (sp->speed == speed) {
      return sp->nspeed;
    }
  }
  return ((int)speed);
}

speed_t
IntToSpeed(int nspeed)
{
  const struct speeds *sp;

  for (sp = speeds; sp->nspeed; sp++) {
    if (sp->nspeed == nspeed) {
      return sp->speed;
    }
  }
  return ((speed_t)nspeed);
}

char *
findblank(char *p, int flags)
{
  int instring;

  instring = 0;
  while (*p) {
    if (*p == '\\') {
      if (flags & PARSE_REDUCE) {
        memmove(p, p + 1, strlen(p));
        if (!*p)
          break;
      } else
        p++;
    } else if (*p == '"') {
      memmove(p, p + 1, strlen(p));
      instring = !instring;
      continue;
    } else if (!instring && (issep(*p) ||
                             (*p == '#' && !(flags & PARSE_NOHASH))))
      return p;
    p++;
  }

  return instring ? NULL : p;
}

int
MakeArgs(char *script, char **pvect, int maxargs, int flags)
{
  int nargs;

  nargs = 0;
  while (*script) {
    script += strspn(script, " \t");
    if (*script == '#' && !(flags & PARSE_NOHASH)) {
      *script = '\0';
      break;
    }
    if (*script) {
      if (nargs >= maxargs - 1)
        break;
      *pvect++ = script;
      nargs++;
      script = findblank(script, flags);
      if (script == NULL)
        return -1;
      else if (!(flags & PARSE_NOHASH) && *script == '#')
        *script = '\0';
      else if (*script)
        *script++ = '\0';
    }
  }
  *pvect = NULL;
  return nargs;
}

const char *
NumStr(long val, char *buf, size_t sz)
{
  static char result[23];		/* handles 64 bit numbers */

  if (buf == NULL || sz == 0) {
    buf = result;
    sz = sizeof result;
  }
  snprintf(buf, sz, "<%ld>", val);
  return buf;
}

const char *
HexStr(long val, char *buf, size_t sz)
{
  static char result[21];		/* handles 64 bit numbers */

  if (buf == NULL || sz == 0) {
    buf = result;
    sz = sizeof result;
  }
  snprintf(buf, sz, "<0x%lx>", val);
  return buf;
}

const char *
ex_desc(int ex)
{
  static char num[12];		/* Used immediately if returned */
  static const char * const desc[] = {
    "normal", "start", "sock", "modem", "dial", "dead", "done",
    "reboot", "errdead", "hangup", "term", "nodial", "nologin",
    "redial", "reconnect"
  };

  if (ex >= 0 && ex < sizeof desc / sizeof *desc)
    return desc[ex];
  snprintf(num, sizeof num, "%d", ex);
  return num;
}

void
SetTitle(const char *title)
{
  if (title == NULL)
    setproctitle(NULL);
  else if (title[0] == '-' && title[1] != '\0')
    setproctitle("-%s", title + 1);
  else
    setproctitle("%s", title);
}

fd_set *
mkfdset()
{
  return (fd_set *)malloc(howmany(getdtablesize(), NFDBITS) * sizeof (fd_mask));
}

void
zerofdset(fd_set *s)
{
  memset(s, '\0', howmany(getdtablesize(), NFDBITS) * sizeof (fd_mask));
}

void
Concatinate(char *buf, size_t sz, int argc, const char *const *argv)
{
  int i, n, pos;

  *buf = '\0';
  for (pos = i = 0; i < argc; i++) {
    n = snprintf(buf + pos, sz - pos, "%s%s", i ? " " : "", argv[i]);
    if (n < 0) {
      buf[pos] = '\0';
      break;
    }
    if ((pos += n) >= sz)
      break;
  }
}

int
loadmodules(int how, const char *module, ...)
{
  int loaded = 0;
#if defined(__FreeBSD__) && !defined(NOKLDLOAD)
  va_list ap;

  va_start(ap, module);
  while (module != NULL) {
    if (modfind(module) == -1) {
      if (ID0kldload(module) == -1) {
        if (how == LOAD_VERBOSLY)
          log_Printf(LogWARN, "%s: Cannot load module\n", module);
      } else
        loaded++;
    }
    module = va_arg(ap, const char *);
  }
  va_end(ap);
#endif
  return loaded;
}
@


1.25
log
@Allow a range of baud rates in a manner similiar to tip/cu,
fixes PR 5734 as tested by Sergey Prysiazhnyi <apelsin@@atmnis.com>.

Fix suggested by and ok deraadt@@, "diff is correct" miod@@
@
text
@d26 1
a26 1
 *	$OpenBSD: defs.c,v 1.24 2002/05/16 01:13:39 brian Exp $
@


1.24
log
@o Bump the version number
o Tidy up includes
o Fix macros in auth.h
o Insist on context for ``set mru'' in MP mode
o Usage -> usage
o Don't intialise after processing config requests
o Show FSM values for ConfigAcks
o Make ident output prettier
o Fix some Id keywords
o Handle RADIUS pool address 255.255.255.254
o Support RADIUS Session-Timeout attributes
o Support RADIUS Reply-Message attributes
o Support RADIUS CHAP-Error attributes
o Store RADIUS Filter-Id attributes
o Provide a NAS-Port-Type attribute to RADIUS servers
o Provide a better NAS-Port attribute to RADIUS servers
o Support MS-CHAP with RADIUS
o Improve FSM decode functions
o Support an OCTETSIN variable
o Support an OCTETSOUT variable
o Support an PACKETSIN variable
o Support an PACKETSOUT variable
o Support an IPOCTETSIN variable
o Support an IPOCTETSOUT variable
o Support an IPPACKETSIN variable
o Support an IPPACKETSOUT variable
o Support an IPV6OCTETSIN variable
o Support an IPV6OCTETSOUT variable
o Support an IPV6PACKETSIN variable
o Support an IPV6PACKETSOUT variable
o Support a SOCKNAME variable
@
text
@d26 1
a26 1
 *	$OpenBSD: defs.c,v 1.23 2002/03/31 02:38:49 brian Exp $
d267 1
a267 1
  return 0;
d280 1
a280 1
  return B0;
@


1.23
log
@Change ``ifdef HAVE_DES'' to ``ifndef NODES'' for consistency.
Notice if the IP header length changes when doing transparent proxying; FreeBSD
Handle domain\\user entries in ppp.secret
Add some mp_Down() calls to ensure that our multi-link NCP goes away properly
Miscellaneous #ifdef'd out FreeBSD changes (mostly netgraph stuff).
@
text
@d26 1
a26 1
 *	$OpenBSD: defs.c,v 1.22 2002/03/12 16:14:22 brian Exp $
a42 1
#include <sys/linker.h>
d422 1
a422 1
void
d425 1
d431 7
a437 3
    if (modfind(module) == -1 && ID0kldload(module) == -1 &&
        how == LOAD_VERBOSLY)
      log_Printf(LogWARN, "%s: Cannot load module\n", module);
d442 1
@


1.22
log
@Handle B460800 and B921600 being defined in <termios.h>
@
text
@d26 1
a26 1
 *	$OpenBSD: defs.c,v 1.21 2001/11/23 11:17:03 brian Exp $
d30 1
a30 1
#include <sys/types.h>
d38 1
d42 4
d52 4
d421 17
@


1.21
log
@cmott@@scientech.com -> cm@@linktel.net
Add the UPTIME variable
CCP protocol ``0xffffffff'' -> ``none''
Don't leak memory when expanding command arguments and not exec()ing
Make some functions static
Add the ``log'' command for manual logging
Fix some log text bogons
@
text
@d26 1
a26 1
 *	$OpenBSD: defs.c,v 1.20 2001/06/15 13:58:16 brian Exp $
d232 6
@


1.20
log
@Correct the arg count after parsing a line with an unescaped # that isn't
preceeded with whitespace.
@
text
@d26 1
a26 1
 *	$OpenBSD: defs.c,v 1.19 2000/11/02 00:54:33 brian Exp $
d389 17
@


1.19
log
@Some whitespace changes
Some slightly better diagnostics
Add MPPE and chapv2 support; Ustimenko Semen <semen@@iclub.nsu.ru>
Bump the version number
Add ``all'' logging; perhaps@@yes.no
Handle quoted hash characters properly
Honour ``nat deny_incoming'' properly
Fix radius accounting initialisation
Moan about tcsetattr() failures
@
text
@d26 1
a26 1
 *	$OpenBSD: defs.c,v 1.18 2000/10/09 21:18:56 brian Exp $
d316 1
a316 1
      else if (!(flags & PARSE_NOHASH) && *script == '#') {
d318 1
a318 2
        nargs--;
      } else if (*script)
@


1.18
log
@Create fd_sets big enough to handle getdtablesize() descriptors.
@
text
@d26 1
a26 1
 *	$OpenBSD: defs.c,v 1.17 2000/09/07 00:05:26 brian Exp $
d304 1
a304 1
    if (*script == '#' && flags & PARSE_NOHASH) {
@


1.17
log
@Remove redundant includes
@
text
@d26 1
a26 1
 *	$OpenBSD: defs.c,v 1.16 2000/08/31 00:46:12 brian Exp $
d378 12
@


1.16
log
@Use arc4random() instead of random()

Suggested by: Theo
@
text
@d26 1
a26 1
 *	$OpenBSD: defs.c,v 1.15 2000/08/30 22:04:56 brian Exp $
a37 5
#ifdef __OpenBSD__
#include <util.h>
#else
#include <libutil.h>
#endif
@


1.15
log
@Don't treat two or more whitespace followed by a comment as
an empty argument
@
text
@d26 1
a26 1
 *	$OpenBSD: defs.c,v 1.14 2000/08/29 16:47:04 brian Exp $
d56 1
d60 1
a60 1
#if defined(__OpenBSD__) || __FreeBSD__ >= 3
d71 1
@


1.14
log
@Use srandom(); Matt Behrens <matt@@megaweapon.zigg.com>
@
text
@d26 1
a26 1
 *	$OpenBSD: defs.c,v 1.13 2000/08/16 09:07:27 brian Exp $
d305 1
a305 1
  while (*script && (*script != '#' || (flags & PARSE_NOHASH))) {
d307 4
d313 1
a313 1
	break;
d319 5
a323 4
      else if (!(flags & PARSE_NOHASH) && *script == '#')
	*script = '\0';
      else if (*script)
	*script++ = '\0';
@


1.13
log
@setproctitle() doesn't need to be called with root privs, so move
it from id.c into defs.c
@
text
@d26 1
a26 1
 *	$OpenBSD: defs.c,v 1.12 2000/04/07 23:46:39 brian Exp $
d59 1
a59 1
#if __FreeBSD__ >= 3
@


1.12
log
@When running ppp -background, show comfort messages showing
when we're redialing/reconnecting.

While we're here, log redial, reconnect and phone number
announcements to LogCHAT, and reduce some other logging to
LogDEBUG.
@
text
@d26 1
a26 1
 *	$OpenBSD: defs.c,v 1.11 2000/03/28 15:14:14 brian Exp $
d38 5
d365 11
@


1.11
log
@don't treat # specially if PARSE_NOHASH is passed
@
text
@d26 1
a26 1
 *	$OpenBSD: defs.c,v 1.10 2000/02/27 01:38:25 brian Exp $
d344 16
@


1.10
log
@$Id$ -> $OpenBSD$
@
text
@d26 1
a26 1
 *	$OpenBSD: defs.c,v 1.9 2000/02/27 01:34:04 brian Exp $
d300 1
a300 1
  while (*script && *script != '#') {
d310 1
a310 1
      else if (*script == '#')
@


1.9
log
@Fix a bug in end-of-line comment parsing.
Fix callback (don't ``forget'' to call back).
Restructure how we add/remove the address family when
writing/reading the tun device.
Notify the tun device that we've changed PID under FreeBSD.
@
text
@d26 1
a26 1
 *	$Id: defs.c,v 1.8 2000/02/27 00:21:07 brian Exp $
@


1.8
log
@When we stop a timer that's the first in the timer list, ensure
that we adjust that timers `rest' value (with the current getitimer()
values) before using that to adjust the next items `rest' value.
After adjusting that value, restart the timer service so that we've
now got the correct setitimer() values.
When adjusting timer::rest, round to the closest TICKUNIT usecs
value.

struct descriptor -> struct fdescriptor (to avoid header polution in
NetBSD).

Introduce LOCALNAT and LOCALRAD defines.

The interface list that comes back from the PF_ROUTE/NET_RT_IFLIST mib
is aligned.  Teach this to ``show route'' and clean up some of the
sockaddr parsing routines.

Add ``set log dns'' to log DNS QUERY packets.

When ppp can't identify the relevant name, don't use "???", use
<nnn> or <0xnnn> instead.

Don't ``break'' when we come accross a non-RTM_IFINFO type
entry in the block returned by the NET_RT_IFLIST mib,
continue instead.

Correct UN_SIZE definition; ben@@scientia.demon.co.uk
@
text
@d26 1
a26 1
 *	$Id: defs.c,v 1.7 2000/01/07 03:26:53 brian Exp $
d300 1
a300 1
  while (*script) {
@


1.7
log
@Upgrade from 2.23 -> 2.26
I'll follow up with a list of changes (too big for a commit message IMHO)
@
text
@d26 1
a26 1
 *	$Id: defs.c,v 1.6 1999/05/27 16:52:48 brian Exp $
d38 1
d318 26
@


1.6
log
@Handle unterminated quoted strings without dup'ing the last character
with an out-by-one-memcpy.
@
text
@d26 1
a26 1
 *	$Id: defs.c,v 1.5 1999/05/08 11:06:35 brian Exp $
d93 1
d266 2
a267 2
static char *
findblank(char *p, int instring)
d269 19
a287 16
  if (instring) {
    while (*p) {
      if (*p == '\\') {
	memmove(p, p + 1, strlen(p));
	if (!*p)
	  break;
      } else if (*p == '"')
	return (p);
      p++;
    }
  } else {
    while (*p) {
      if (issep(*p))
	return (p);
      p++;
    }
d290 1
a290 1
  return p;
d294 1
a294 1
MakeArgs(char *script, char **pvect, int maxargs)
d296 1
a296 2
  int nargs, nb;
  int instring;
d300 1
a300 2
    nb = strspn(script, " \t");
    script += nb;
a301 8
      if (*script == '"') {
	instring = 1;
	script++;
	if (*script == '\0')
	  break;		/* Shouldn't return here. Need to NULL
				 * terminate below */
      } else
	instring = 0;
d306 6
a311 2
      script = findblank(script, instring);
      if (*script)
@


1.5
log
@o Redesign the layering mechanism and make the aliasing code part of
  the layering.

  We now ``stack'' layers as soon as we open the device (when we figure
  out what we're dealing with).  A static set of `dispatch' routines are
  also declared for dealing with incoming packets after they've been
  `pulled' up through the stacked layers.

  Physical devices are now assigned handlers based on the device type
  when they're opened.  For the moment there are three device types;
  ttys, execs and tcps.

o Increment version number to 2.2
o Make an entry in [uw]tmp for non-tty -direct invocations (after
  pap/chap authentication).
o Make throughput counters quad_t's
o Account for the absolute number of mbuf malloc()s and free()s in
  ``show mem''.
o ``show modem'' becomes ``show physical''.
@
text
@d26 1
a26 1
 *	$Id: defs.c,v 1.4 1999/04/26 08:54:50 brian Exp $
d271 1
a271 1
	memmove(p, p + 1, strlen(p + 1));
d304 1
a304 1
	  break;		/* Shouldn't return here. Need to null
@


1.4
log
@#include <errno.h>, not <sys/errno.h>
@
text
@d26 1
a26 1
 *	$Id: defs.c,v 1.3 1999/02/25 20:07:36 brian Exp $
d40 1
d48 2
d156 163
@


1.3
log
@Parse IP addresses more securely - specifically, don't allow
a bum name to return as 0.0.0.0... we don't want ``delete xxx''
to delete the default route when xxx doesn't resolve.

Support IP number specifications as the host when specifying
a tcp-style device (rather than *just* hostnames).
@
text
@d26 1
a26 1
 *	$Id: defs.c,v 1.2 1999/02/06 03:22:35 brian Exp $
d37 1
a39 1
#include <sys/errno.h>
@


1.2
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d26 1
a26 1
 *	$Id: defs.c,v 1.17 1998/06/27 14:18:05 brian Exp $
d30 7
d123 30
@


1.1
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@@

