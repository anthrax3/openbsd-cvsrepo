head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.56
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.52
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.50
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.48
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.46
	OPENBSD_5_0:1.6.0.44
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.42
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.40
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.36
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.38
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.34
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.32
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.30
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.28
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.26
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.24
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.22
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.20
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.18
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.16
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.14
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.12
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.10
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.8
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.6
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2001.03.24.01.06.06;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.26.01.41.04;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.27.01.38.28;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.27.00.21.10;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.02.06.03.22.47;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.00.22.28;	author brian;	state Exp;
branches;
next	;


desc
@@


1.7
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1997 Brian Somers <brian@@Awfulhak.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$OpenBSD: server.h,v 1.6 2001/03/24 01:06:06 brian Exp $
 */

struct bundle;

struct server {
  struct fdescriptor desc;
  int fd;

  struct {
    char passwd[50];

    char sockname[PATH_MAX];		/* Points to local socket path */
    mode_t mask;

    u_short port;			/* tcp socket */
  } cfg;
};

enum server_stat {
  SERVER_OK,				/* Diagnostic socket available */
  SERVER_INVALID,			/* Bad args, can't be set up */
  SERVER_FAILED,			/* Failed - lack of resources */
  SERVER_UNSET				/* Not already set up */
};

#define descriptor2server(d) \
  ((d)->type == SERVER_DESCRIPTOR ? (struct server *)(d) : NULL)

extern struct server server;

extern enum server_stat server_LocalOpen(struct bundle *, const char *, mode_t);
extern enum server_stat server_TcpOpen(struct bundle *, u_short);
extern enum server_stat server_Reopen(struct bundle *);
extern int server_Close(struct bundle *);
extern int server_Clear(struct bundle *);
@


1.6
log
@Remove some unprotected prototype variable names
MAXPATHLEN -> PATH_MAX
Handle ENOENT from opening /dev/tun* properly
Rename _PATH_PPP -> PPP_CONFDIR and allow it to be redefined at compile time
Reduce MIN_LQRPERIOD and MIN_FSMRETRY to 1 second
Be smarter about identifying sockets on stdin
Allow primary DNS IP negotiation when the secondary IP has been rejected
Fix the call to PacketAliasProxyRule() properly.
Add/fix some comments
Fix man page markups; ru@@FreeBSD.org
Use localhost when no hostname is configured
@
text
@d26 1
a26 1
 *	$OpenBSD: server.h,v 1.5 2001/01/26 01:41:04 brian Exp $
@


1.5
log
@Allow ``set server closed'' to close the diagnostic socket.
Allow ``set server open'' to re-open the diagnostic socket.
Handle SIGUSR1 by re-opening the diagnostic socket
When receiving SIGUSR2 (and in ``set server none''), don't forget the
socket details so that ``set server open'' and SIGUSR1 open it again.

Don't create the diagnostic socket as uid 0 !  It's far to dangerous.
@
text
@d26 1
a26 1
 *	$OpenBSD: server.h,v 1.4 2000/02/27 01:38:28 brian Exp $
d38 1
a38 1
    char sockname[MAXPATHLEN];		/* Points to local socket path */
@


1.4
log
@$Id$ -> $OpenBSD$
@
text
@d26 1
a26 1
 *	$OpenBSD: server.h,v 1.3 2000/02/27 00:21:10 brian Exp $
a33 1
  char passwd[50];
d35 2
a36 2
  struct sockaddr_un ifsun;	/* local socket */
  char *rm;			/* Points to local socket path */
d38 12
a49 1
  u_short port;			/* tcp socket */
d57 3
a59 2
extern int server_LocalOpen(struct bundle *, const char *, mode_t);
extern int server_TcpOpen(struct bundle *, int);
d61 1
@


1.3
log
@When we stop a timer that's the first in the timer list, ensure
that we adjust that timers `rest' value (with the current getitimer()
values) before using that to adjust the next items `rest' value.
After adjusting that value, restart the timer service so that we've
now got the correct setitimer() values.
When adjusting timer::rest, round to the closest TICKUNIT usecs
value.

struct descriptor -> struct fdescriptor (to avoid header polution in
NetBSD).

Introduce LOCALNAT and LOCALRAD defines.

The interface list that comes back from the PF_ROUTE/NET_RT_IFLIST mib
is aligned.  Teach this to ``show route'' and clean up some of the
sockaddr parsing routines.

Add ``set log dns'' to log DNS QUERY packets.

When ppp can't identify the relevant name, don't use "???", use
<nnn> or <0xnnn> instead.

Don't ``break'' when we come accross a non-RTM_IFINFO type
entry in the block returned by the NET_RT_IFLIST mib,
continue instead.

Correct UN_SIZE definition; ben@@scientia.demon.co.uk
@
text
@d26 1
a26 1
 *	$Id: server.h,v 1.2 1999/02/06 03:22:47 brian Exp $
@


1.2
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d26 1
a26 1
 *	$Id: server.h,v 1.5 1998/05/21 21:48:18 brian Exp $
d32 1
a32 1
  struct descriptor desc;
@


1.1
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@@

