head	1.16;
access;
symbols
	OPENBSD_5_5:1.15.0.38
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.34
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.32
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.30
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.28
	OPENBSD_5_0:1.15.0.26
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.24
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.22
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.18
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.20
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.16
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.14
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.12
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.10
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.8
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.6
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.4
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.2
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.14.0.12
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.10
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.8
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.6
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.12.0.2
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.16
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.15;

1.15
date	2005.07.26.01.32.25;	author brad;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.15.08.01.59;	author brian;	state Exp;
branches;
next	1.13;

1.13
date	2001.11.23.11.17.03;	author brian;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.07.09.32.55;	author brian;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.25.12.33.04;	author brian;	state Exp;
branches;
next	1.10;

1.10
date	2000.11.02.00.53.47;	author brian;	state Exp;
branches;
next	1.9;

1.9
date	2000.08.13.22.05.47;	author brian;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.23.09.47.05;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	2000.06.15.09.37.08;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.11.14.40.26;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.27.01.38.24;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.07.03.26.52;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	99.03.24.20.32.58;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.03.08.01.40.22;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.08.16.33;	author brian;	state Exp;
branches;
next	;


desc
@@


1.16
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 2001 Charles Mott <cm@@linktel.net>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $OpenBSD: alias_local.h,v 1.15 2005/07/26 01:32:25 brad Exp $
 */

/*
 * Alias_local.h contains the function prototypes for alias.c,
 * alias_db.c, alias_util.c and alias_ftp.c, alias_irc.c (as well
 * as any future add-ons).  It also includes macros, globals and
 * struct definitions shared by more than one alias*.c file.
 *
 * This include file is intended to be used only within the aliasing
 * software.  Outside world interfaces are defined in alias.h
 *
 * This software is placed into the public domain with no restrictions
 * on its distribution.
 *
 * Initial version:  August, 1996  (cjm)
 *
 * <updated several times by original author and Eivind Eklund>
 */

#ifndef _ALIAS_LOCAL_H_
#define	_ALIAS_LOCAL_H_

/* Macros */

/*
 * The following macro is used to update an
 * internet checksum.  "delta" is a 32-bit
 * accumulation of all the changes to the
 * checksum (adding in new 16-bit words and
 * subtracting out old words), and "cksum"
 * is the checksum value to be updated.
 */
#define	ADJUST_CHECKSUM(acc, cksum) \
	do { \
		acc += cksum; \
		if (acc < 0) { \
			acc = -acc; \
			acc = (acc >> 16) + (acc & 0xffff); \
			acc += acc >> 16; \
			cksum = (u_short) ~acc; \
		} else { \
			acc = (acc >> 16) + (acc & 0xffff); \
			acc += acc >> 16; \
			cksum = (u_short) acc; \
		} \
	} while (0)

/* Globals */

extern int packetAliasMode;
extern unsigned int skinnyPort;

/* Prototypes */

/* General utilities */
u_short	 IpChecksum(struct ip *_pip);
u_short	 TcpChecksum(struct ip *_pip);
void	 DifferentialChecksum(u_short *_cksum, u_short *_new, u_short *_old,
	    int _n);

/* Internal data access */
struct alias_link *
	 FindIcmpIn(struct in_addr _dst_addr, struct in_addr _alias_addr,
	    u_short _id_alias, int _create);
struct alias_link *
	 FindIcmpOut(struct in_addr _src_addr, struct in_addr _dst_addr,
	    u_short _id, int _create);
struct alias_link *
	 FindFragmentIn1(struct in_addr _dst_addr, struct in_addr _alias_addr,
	    u_short _ip_id);
struct alias_link *
	 FindFragmentIn2(struct in_addr _dst_addr, struct in_addr _alias_addr,
	    u_short _ip_id);
struct alias_link *
	 AddFragmentPtrLink(struct in_addr _dst_addr, u_short _ip_id);
struct alias_link *
	 FindFragmentPtr(struct in_addr _dst_addr, u_short _ip_id);
struct alias_link *
	 FindProtoIn(struct in_addr _dst_addr, struct in_addr _alias_addr,
	    u_char _proto);
struct alias_link *
	 FindProtoOut(struct in_addr _src_addr, struct in_addr _dst_addr,
	    u_char _proto);
struct alias_link *
	 FindUdpTcpIn(struct in_addr _dst_addr, struct in_addr _alias_addr,
	    u_short _dst_port, u_short _alias_port, u_char _proto, int _create);
struct alias_link *
	 FindUdpTcpOut(struct in_addr _src_addr, struct in_addr _dst_addr,
	    u_short _src_port, u_short _dst_port, u_char _proto, int _create);
struct alias_link *
	 AddPptp(struct in_addr _src_addr, struct in_addr _dst_addr,
	    struct in_addr _alias_addr, u_int16_t _src_call_id);
struct alias_link *
	 FindPptpOutByCallId(struct in_addr _src_addr,
	    struct in_addr _dst_addr, u_int16_t _src_call_id);
struct alias_link *
	 FindPptpInByCallId(struct in_addr _dst_addr,
	    struct in_addr _alias_addr, u_int16_t _dst_call_id);
struct alias_link *
	 FindPptpOutByPeerCallId(struct in_addr _src_addr,
	    struct in_addr _dst_addr, u_int16_t _dst_call_id);
struct alias_link *
	 FindPptpInByPeerCallId(struct in_addr _dst_addr,
	    struct in_addr _alias_addr, u_int16_t _alias_call_id);
struct alias_link *
	 FindRtspOut(struct in_addr _src_addr, struct in_addr _dst_addr,
	    u_short _src_port, u_short _alias_port, u_char _proto);
struct in_addr
	 FindOriginalAddress(struct in_addr _alias_addr);
struct in_addr
	 FindAliasAddress(struct in_addr _original_addr);

/* External data access/modification */
int	 FindNewPortGroup(struct in_addr _dst_addr, struct in_addr _alias_addr,
                     u_short _src_port, u_short _dst_port, u_short _port_count,
		     u_char _proto, u_char _align);
void	 GetFragmentAddr(struct alias_link *_link, struct in_addr *_src_addr);
void	 SetFragmentAddr(struct alias_link *_link, struct in_addr _src_addr);
void	 GetFragmentPtr(struct alias_link *_link, char **_fptr);
void	 SetFragmentPtr(struct alias_link *_link, char *fptr);
void	 SetStateIn(struct alias_link *_link, int _state);
void	 SetStateOut(struct alias_link *_link, int _state);
int	 GetStateIn(struct alias_link *_link);
int	 GetStateOut(struct alias_link *_link);
struct in_addr
	 GetOriginalAddress(struct alias_link *_link);
struct in_addr
	 GetDestAddress(struct alias_link *_link);
struct in_addr
	 GetAliasAddress(struct alias_link *_link);
struct in_addr
	 GetDefaultAliasAddress(void);
void	 SetDefaultAliasAddress(struct in_addr _alias_addr);
u_short	 GetOriginalPort(struct alias_link *_link);
u_short	 GetAliasPort(struct alias_link *_link);
struct in_addr
	 GetProxyAddress(struct alias_link *_link);
void	 SetProxyAddress(struct alias_link *_link, struct in_addr _addr);
u_short	 GetProxyPort(struct alias_link *_link);
void	 SetProxyPort(struct alias_link *_link, u_short _port);
void	 SetAckModified(struct alias_link *_link);
int	 GetAckModified(struct alias_link *_link);
int	 GetDeltaAckIn(struct ip *_pip, struct alias_link *_link);
int	 GetDeltaSeqOut(struct ip *_pip, struct alias_link *_link);
void	 AddSeq(struct ip *_pip, struct alias_link *_link, int _delta);
void	 SetExpire(struct alias_link *_link, int _expire);
void	 ClearCheckNewLink(void);
void	 SetProtocolFlags(struct alias_link *_link, int _pflags);
int	 GetProtocolFlags(struct alias_link *_link);
void	 SetDestCallId(struct alias_link *_link, u_int16_t _cid);
#ifndef NO_FW_PUNCH
void	 PunchFWHole(struct alias_link *_link);
#endif

/* Housekeeping function */
void	 HouseKeeping(void);

/* Tcp specfic routines */
/* lint -save -library Suppress flexelint warnings */

/* FTP routines */
void	 AliasHandleFtpOut(struct ip *_pip, struct alias_link *_link,
	    int _maxpacketsize);

/* IRC routines */
void	 AliasHandleIrcOut(struct ip *_pip, struct alias_link *_link,
	    int _maxsize);

/* RTSP routines */
void	 AliasHandleRtspOut(struct ip *_pip, struct alias_link *_link,
	    int _maxpacketsize);

/* PPTP routines */
void	 AliasHandlePptpOut(struct ip *_pip, struct alias_link *_link);
void	 AliasHandlePptpIn(struct ip *_pip, struct alias_link *_link);
int	 AliasHandlePptpGreOut(struct ip *_pip);
int	 AliasHandlePptpGreIn(struct ip *_pip);

/* NetBIOS routines */
int	 AliasHandleUdpNbt(struct ip *_pip, struct alias_link *_link,
	    struct in_addr *_alias_address, u_short _alias_port);
int	 AliasHandleUdpNbtNS(struct ip *_pip, struct alias_link *_link,
	    struct in_addr *_alias_address, u_short *_alias_port,
	    struct in_addr *_original_address, u_short *_original_port);

/* CUSeeMe routines */
void	 AliasHandleCUSeeMeOut(struct ip *_pip, struct alias_link *_link);
void	 AliasHandleCUSeeMeIn(struct ip *_pip, struct in_addr _original_addr);

/* Skinny routines */
void	 AliasHandleSkinny(struct ip *_pip, struct alias_link *_link);

/* Transparent proxy routines */
int	 ProxyCheck(struct ip *_pip, struct in_addr *_proxy_server_addr,
	    u_short *_proxy_server_port);
void	 ProxyModify(struct alias_link *_link, struct ip *_pip,
	    int _maxpacketsize, int _proxy_type);

enum alias_tcp_state {
	ALIAS_TCP_STATE_NOT_CONNECTED,
	ALIAS_TCP_STATE_CONNECTED,
	ALIAS_TCP_STATE_DISCONNECTED
};

/*lint -restore */

#endif /* !_ALIAS_LOCAL_H_ */
@


1.15
log
@Add Cisco Skinny Station Protocol translation support to libalias
and supporting applications (ppp).

From marcus FreeBSD
@
text
@d26 1
a26 1
 * $OpenBSD: alias_local.h,v 1.14 2002/06/15 08:01:59 brian Exp $
@


1.14
log
@Tidy up end of line whitespace
@
text
@d26 1
a26 1
 * $OpenBSD: alias_local.h,v 1.13 2001/11/23 11:17:03 brian Exp $
d77 1
d215 3
@


1.13
log
@cmott@@scientech.com -> cm@@linktel.net
Add the UPTIME variable
CCP protocol ``0xffffffff'' -> ``none''
Don't leak memory when expanding command arguments and not exec()ing
Make some functions static
Add the ``log'' command for manual logging
Fix some log text bogons
@
text
@d26 1
a26 1
 * $OpenBSD: alias_local.h,v 1.12 2001/06/07 09:32:55 brian Exp $
d41 1
a41 1
 * Initial version:  August, 1996  (cjm)    
@


1.12
log
@Depricate the -alias option (it's been -nat for a long time)
Handle carriage-return/line-feed stuff for ftp natting more generically
Fix an alignment bug when logging DNS traffic
Fix/add some copyrights
@
text
@d2 1
a2 1
 * Copyright (c) 2001 Charles Mott <cmott@@scientech.com>
d26 1
a26 1
 * $OpenBSD$
@


1.11
log
@Add some style(9) to alias*.h
@
text
@d1 28
a43 2
 *
 * $OpenBSD: alias_local.h,v 1.10 2000/11/02 00:53:47 brian Exp $
d173 2
a174 2
void	 SetLastLineCrlfTermed(struct alias_link *_link, int _yes);
int	 GetLastLineCrlfTermed(struct alias_link *_link);
@


1.10
log
@Improvements for ICMP and GRE/PPTP; FreeBSD
@
text
@a0 25
/* -*- mode: c; tab-width: 3; c-basic-offset: 3; -*-
    Alias_local.h contains the function prototypes for alias.c,
    alias_db.c, alias_util.c and alias_ftp.c, alias_irc.c (as well
    as any future add-ons).  It also includes macros, globals and
    struct definitions shared by more than one alias*.c file.

    This include file is intended to be used only within the aliasing
    software.  Outside world interfaces are defined in alias.h

    This software is placed into the public domain with no restrictions
    on its distribution.

    Initial version:  August, 1996  (cjm)    
    
     <updated several times by original author and Eivind Eklund>

    $OpenBSD: alias_local.h,v 1.9 2000/08/13 22:05:47 brian Exp $
*/
#ifndef ALIAS_LOCAL_H
#define ALIAS_LOCAL_H

#ifndef NULL
#define NULL 0
#endif

d2 16
a17 1
    Macros
d20 2
a21 24
/*
   The following macro is used to update an
   internet checksum.  "delta" is a 32-bit
   accumulation of all the changes to the
   checksum (adding in new 16-bit words and
   subtracting out old words), and "cksum"
   is the checksum value to be updated.
*/
#define ADJUST_CHECKSUM(acc, cksum) { \
    acc += cksum; \
    if (acc < 0) \
    { \
        acc = -acc; \
        acc = (acc >> 16) + (acc & 0xffff); \
        acc += acc >> 16; \
        cksum = (u_short) ~acc; \
    } \
    else \
    { \
        acc = (acc >> 16) + (acc & 0xffff); \
        acc += acc >> 16; \
        cksum = (u_short) acc; \
    } \
}
d23 1
d26 23
a48 2
    Globals
*/
d52 1
a52 11

/*
    Structs
*/

struct alias_link;    /* Incomplete structure */


/*
    Prototypes
*/
d55 4
a58 3
u_short IpChecksum(struct ip *);
u_short TcpChecksum(struct ip *);
void DifferentialChecksum(u_short *, u_short *, u_short *, int);
d62 2
a63 2
FindIcmpIn(struct in_addr, struct in_addr, u_short, int);

d65 2
a66 2
FindIcmpOut(struct in_addr, struct in_addr, u_short, int);

d68 2
a69 2
FindFragmentIn1(struct in_addr, struct in_addr, u_short);

d71 2
a72 2
FindFragmentIn2(struct in_addr, struct in_addr, u_short);

d74 1
a74 2
AddFragmentPtrLink(struct in_addr, u_short);

d76 1
a76 2
FindFragmentPtr(struct in_addr, u_short);

d78 2
a79 2
FindProtoIn(struct in_addr, struct in_addr, u_char);

d81 2
a82 2
FindProtoOut(struct in_addr, struct in_addr, u_char);

d84 2
a85 2
FindUdpTcpIn (struct in_addr, struct in_addr, u_short, u_short, u_char, int);

d87 2
a88 2
FindUdpTcpOut(struct in_addr, struct in_addr, u_short, u_short, u_char, int);

d90 2
a91 2
AddPptp(struct in_addr, struct in_addr, struct in_addr, u_int16_t);

d93 2
a94 2
FindPptpOutByCallId(struct in_addr, struct in_addr, u_int16_t);

d96 2
a97 2
FindPptpInByCallId(struct in_addr, struct in_addr, u_int16_t);

d99 2
a100 2
FindPptpOutByPeerCallId(struct in_addr, struct in_addr, u_int16_t);

d102 2
a103 2
FindPptpInByPeerCallId(struct in_addr, struct in_addr, u_int16_t);

d105 2
a106 2
FindRtspOut(struct in_addr, struct in_addr, u_short, u_short, u_char);

d108 1
a108 2
FindOriginalAddress(struct in_addr);

d110 1
a110 1
FindAliasAddress(struct in_addr);
d113 37
a149 31
int FindNewPortGroup(struct in_addr, struct in_addr,
                     u_short, u_short, u_short, u_char, u_char);
void GetFragmentAddr(struct alias_link *, struct in_addr *);
void SetFragmentAddr(struct alias_link *, struct in_addr);
void GetFragmentPtr(struct alias_link *, char **);
void SetFragmentPtr(struct alias_link *, char *);
void SetStateIn(struct alias_link *, int);
void SetStateOut(struct alias_link *, int);
int GetStateIn(struct alias_link *);
int GetStateOut(struct alias_link *);
struct in_addr GetOriginalAddress(struct alias_link *);
struct in_addr GetDestAddress(struct alias_link *);
struct in_addr GetAliasAddress(struct alias_link *);
struct in_addr GetDefaultAliasAddress(void);
void SetDefaultAliasAddress(struct in_addr);
u_short GetOriginalPort(struct alias_link *);
u_short GetAliasPort(struct alias_link *);
struct in_addr GetProxyAddress(struct alias_link *);
void SetProxyAddress(struct alias_link *, struct in_addr);
u_short GetProxyPort(struct alias_link *);
void SetProxyPort(struct alias_link *, u_short);
void SetAckModified(struct alias_link *);
int GetAckModified(struct alias_link *);
int GetDeltaAckIn(struct ip *, struct alias_link *);
int GetDeltaSeqOut(struct ip *, struct alias_link *);
void AddSeq(struct ip *, struct alias_link *, int);
void SetExpire(struct alias_link *, int);
void ClearCheckNewLink(void);
void SetLastLineCrlfTermed(struct alias_link *, int);
int GetLastLineCrlfTermed(struct alias_link *);
void SetDestCallId(struct alias_link *, u_int16_t);
d151 1
a151 1
void PunchFWHole(struct alias_link *);
a153 1

d155 1
a155 1
void HouseKeeping(void);
d158 1
a158 1
/*lint -save -library Suppress flexelint warnings */
d161 2
a162 1
void AliasHandleFtpOut(struct ip *, struct alias_link *, int);
d165 2
a166 1
void AliasHandleIrcOut(struct ip *, struct alias_link *, int);
d169 2
a170 1
void AliasHandleRtspOut(struct ip *, struct alias_link *, int);
d173 4
a176 4
void AliasHandlePptpOut(struct ip *, struct alias_link *);
void AliasHandlePptpIn(struct ip *, struct alias_link *);
int AliasHandlePptpGreOut(struct ip *);
int AliasHandlePptpGreIn(struct ip *);
d179 5
a183 2
int AliasHandleUdpNbt(struct ip *, struct alias_link *, struct in_addr *, u_short);
int AliasHandleUdpNbtNS(struct ip *, struct alias_link *, struct in_addr *, u_short *, struct in_addr *, u_short *);
d186 2
a187 2
void AliasHandleCUSeeMeOut(struct ip *, struct alias_link *);
void AliasHandleCUSeeMeIn(struct ip *, struct in_addr);
d190 4
a193 3
int ProxyCheck(struct ip *, struct in_addr *, u_short *);
void ProxyModify(struct alias_link *, struct ip *, int, int);

d196 3
a198 3
    ALIAS_TCP_STATE_NOT_CONNECTED,
    ALIAS_TCP_STATE_CONNECTED,
    ALIAS_TCP_STATE_DISCONNECTED
d200 1
d202 2
a203 1
#endif /* defined(ALIAS_LOCAL_H) */
@


1.9
log
@Add support for streaming media; FreeBSD
Add support for radius accounting in radlib.c (not yet working in ppp); FreeBSD
@
text
@d17 1
a17 1
    $OpenBSD: alias_local.h,v 1.8 2000/06/23 09:47:05 brian Exp $
d81 1
a81 1
FindIcmpIn(struct in_addr, struct in_addr, u_short);
d84 1
a84 1
FindIcmpOut(struct in_addr, struct in_addr, u_short);
d105 1
a105 1
FindUdpTcpIn (struct in_addr, struct in_addr, u_short, u_short, u_char);
d108 1
a108 1
FindUdpTcpOut(struct in_addr, struct in_addr, u_short, u_short, u_char);
d111 1
a111 1
FindPptpIn(struct in_addr, struct in_addr, u_short);
d114 1
a114 1
FindPptpOut(struct in_addr, struct in_addr, u_short);
d117 1
a117 1
QueryUdpTcpIn (struct in_addr, struct in_addr, u_short, u_short, u_char);
d120 4
a123 1
QueryUdpTcpOut(struct in_addr, struct in_addr, u_short, u_short, u_char);
d165 1
a186 2
int  PptpGetCallID(struct ip *, u_short *);
void PptpSetCallID(struct ip *, u_short);
d189 2
@


1.8
log
@Improved 227, 229 and EPRT support in the nat code; FreeBSD
Moved security checks into one place; FreeBSD
Remove ``nat pptp'' now that it's transparent
@
text
@d17 1
a17 1
    $OpenBSD: alias_local.h,v 1.7 2000/06/15 09:37:08 brian Exp $
d116 9
d132 2
d178 3
@


1.7
log
@Full support for passive mode FTP
Ensure that the segment preceding a PORT/227 segment terminates with
a \r\n, the IP address in the PORT/227 matches the source IP address
of the packet and the port number in the PORT command or 277 reply is
greater than or equal to 1024.

Obtained from: FreeBSD
@
text
@d17 1
a17 1
    $OpenBSD: alias_local.h,v 1.6 2000/06/11 14:40:26 brian Exp $
d110 6
d167 6
@


1.6
log
@Merge libalias stuff from FreeBSD:
Ppp only really benefits from a bunch of typo fixes, transparent pptp
support and ftp/EPRT support.
@
text
@d17 1
a17 1
    $OpenBSD: alias_local.h,v 1.5 2000/02/27 01:38:24 brian Exp $
d143 2
@


1.5
log
@$Id$ -> $OpenBSD$
@
text
@d17 1
a17 1
    $OpenBSD: alias_local.h,v 1.4 2000/01/07 03:26:52 brian Exp $
d22 3
d99 6
a177 2

int GetPptpAlias (struct in_addr*);
@


1.4
log
@Upgrade from 2.23 -> 2.26
I'll follow up with a list of changes (too big for a commit message IMHO)
@
text
@d17 1
a17 1
    $Id$
@


1.3
log
@Add a ``const'' and remove some inconsistent prototype args.
@
text
@d15 3
a17 1
     <updated several times by original author and Eivind Eiklund>
@


1.2
log
@Add proxying & transparent proxying support (``alias proxy'').
Add PPTP packet aliasing (GRE fixed address) support (``alias pptp'').
Add a 0 to the front of the mode to signify octal.
Thanks to: Charles Mott <cmott@@srv.net> & Dru Nelson <dnelson@@redwoodsoft.com>
@
text
@d147 1
a147 1
void AliasHandleIrcOut(struct ip *pip, struct alias_link *link, int maxsize );
@


1.1
log
@Move libalias sources into the ppp directory.
Suggested (many times) by: Theo
@
text
@d4 5
a8 3
    as any future add-ons).  It is intended to be used only within
    the aliasing software.  Outside world interfaces are defined
    in alias.h
d20 35
d57 11
a67 1
struct alias_link;
d121 4
d142 2
d145 2
d148 6
a153 2
void AliasHandleUdpNbt(struct ip *, struct alias_link *, struct in_addr *, u_short);
void AliasHandleUdpNbtNS(struct ip *, struct alias_link *, struct in_addr *, u_short *, struct in_addr *, u_short *);
d157 3
d168 1
@

