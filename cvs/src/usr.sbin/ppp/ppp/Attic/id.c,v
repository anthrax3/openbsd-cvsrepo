head	1.11;
access;
symbols
	OPENBSD_5_5:1.10.0.50
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.46
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.44
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.42
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.40
	OPENBSD_5_0:1.10.0.38
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.36
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.34
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.30
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.32
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.28
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.26
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.24
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.22
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.20
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.18
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.16
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.14
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.12
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.10
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.8
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.6
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.6
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.4
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.10;

1.10
date	2002.06.15.08.02.00;	author brian;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.27.23.19.38;	author brian;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.05.13.10.11;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.16.09.07.27;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.11.09.40.24;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.27.01.38.26;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.27.01.34.04;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.07.03.26.54;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.02.06.03.22.37;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.00.22.21;	author brian;	state Exp;
branches;
next	;


desc
@@


1.11
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1997 Brian Somers <brian@@Awfulhak.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$OpenBSD: id.c,v 1.10 2002/06/15 08:02:00 brian Exp $
 */

#include <sys/param.h>
#include <sys/socket.h>
#include <sys/un.h>

#include <sys/ioctl.h>
#include <fcntl.h>
#ifndef NONETGRAPH
#include <netgraph.h>
#endif
#include <signal.h>
#include <stdarg.h>
#include <stdio.h>
#include <string.h>
#include <sysexits.h>
#if defined(__FreeBSD__) && !defined(NOKLDLOAD)
#include <sys/linker.h>
#endif
#include <unistd.h>
#ifdef __OpenBSD__
#include <util.h>
#else
#include <libutil.h>
#endif
#include <utmp.h>

#include "log.h"
#include "main.h"
#include "id.h"

static int uid;
static int euid;

void
ID0init()
{
  uid = getuid();
  euid = geteuid();
}

static void
ID0setuser(void)
{
  if (seteuid(uid) == -1) {
    log_Printf(LogERROR, "ID0setuser: Unable to seteuid!\n");
    AbortProgram(EX_NOPERM);
  }
}

uid_t
ID0realuid()
{
  return uid;
}

static void
ID0set0(void)
{
  if (seteuid(euid) == -1) {
    log_Printf(LogERROR, "ID0set0: Unable to seteuid!\n");
    AbortProgram(EX_NOPERM);
  }
}

int
ID0ioctl(int fd, unsigned long req, void *arg)
{
  int ret;

  ID0set0();
  ret = ioctl(fd, req, arg);
  log_Printf(LogID0, "%d = ioctl(%d, %lu, %p)\n", ret, fd, req, arg);
  ID0setuser();
  return ret;
}

int
ID0unlink(const char *name)
{
  int ret;

  ID0set0();
  ret = unlink(name);
  log_Printf(LogID0, "%d = unlink(\"%s\")\n", ret, name);
  ID0setuser();
  return ret;
}

int
ID0socket(int domain, int type, int protocol)
{
  int ret;

  ID0set0();
  ret = socket(domain, type, protocol);
  log_Printf(LogID0, "%d = socket(%d, %d, %d)\n", ret, domain, type, protocol);
  ID0setuser();
  return ret;
}

FILE *
ID0fopen(const char *path, const char *mode)
{
  FILE *ret;

  ID0set0();
  ret = fopen(path, mode);
  log_Printf(LogID0, "%p = fopen(\"%s\", \"%s\")\n", ret, path, mode);
  ID0setuser();
  return ret;
}

int
ID0open(const char *path, int flags, ...)
{
  int ret;
  va_list ap;

  va_start(ap, flags);
  ID0set0();
  ret = open(path, flags, va_arg(ap, int));
  log_Printf(LogID0, "%d = open(\"%s\", %d)\n", ret, path, flags);
  ID0setuser();
  va_end(ap);
  return ret;
}

int
ID0write(int fd, const void *data, size_t len)
{
  int ret;

  ID0set0();
  ret = write(fd, data, len);
  log_Printf(LogID0, "%d = write(%d, data, %ld)\n", ret, fd, (long)len);
  ID0setuser();
  return ret;
}

int
ID0uu_lock(const char *basettyname)
{
  int ret;

  ID0set0();
  ret = uu_lock(basettyname);
  log_Printf(LogID0, "%d = uu_lock(\"%s\")\n", ret, basettyname);
  ID0setuser();
  return ret;
}

int
ID0uu_lock_txfr(const char *basettyname, pid_t newpid)
{
  int ret;

  ID0set0();
  ret = uu_lock_txfr(basettyname, newpid);
  log_Printf(LogID0, "%d = uu_lock_txfr(\"%s\", %ld)\n", ret, basettyname,
             (long)newpid);
  ID0setuser();
  return ret;
}

int
ID0uu_unlock(const char *basettyname)
{
  int ret;

  ID0set0();
  ret = uu_unlock(basettyname);
  log_Printf(LogID0, "%d = uu_unlock(\"%s\")\n", ret, basettyname);
  ID0setuser();
  return ret;
}

void
ID0login(struct utmp *ut)
{
  ID0set0();
  if (logout(ut->ut_line)) {
    log_Printf(LogID0, "logout(\"%s\")\n", ut->ut_line);
    logwtmp(ut->ut_line, "", "");
    log_Printf(LogID0, "logwtmp(\"%s\", \"\", \"\")\n", ut->ut_line);
  }
  login(ut);
  log_Printf(LogID0, "login(\"%s\", \"%.*s\")\n",
            ut->ut_line, (int)(sizeof ut->ut_name), ut->ut_name);
  ID0setuser();
}

void
ID0logout(const char *device, int nologout)
{
  struct utmp ut;
  char ut_line[sizeof ut.ut_line + 1];

  strncpy(ut_line, device, sizeof ut_line - 1);
  ut_line[sizeof ut_line - 1] = '\0';

  ID0set0();
  if (nologout || logout(ut_line)) {
    log_Printf(LogID0, "logout(\"%s\")\n", ut_line);
    logwtmp(ut_line, "", "");
    log_Printf(LogID0, "logwtmp(\"%s\", \"\", \"\")\n", ut_line);
  } else
    log_Printf(LogERROR, "ID0logout: No longer logged in on %s\n", ut_line);
  ID0setuser();
}

int
ID0bind_un(int s, const struct sockaddr_un *name)
{
  int result;

  ID0set0();
  result = bind(s, (const struct sockaddr *)name, sizeof *name);
  log_Printf(LogID0, "%d = bind(%d, \"%s\", %d)\n",
            result, s, name->sun_path, (int)sizeof(*name));
  ID0setuser();
  return result;
}

int
ID0connect_un(int s, const struct sockaddr_un *name)
{
  int result;

  ID0set0();
  result = connect(s, (const struct sockaddr *)name, sizeof *name);
  log_Printf(LogID0, "%d = connect(%d, \"%s\", %d)\n",
            result, s, name->sun_path, (int)sizeof(*name));
  ID0setuser();
  return result;
}

int
ID0kill(pid_t pid, int sig)
{
  int result;

  ID0set0();
  result = kill(pid, sig);
  log_Printf(LogID0, "%d = kill(%ld, %d)\n", result, (long)pid, sig);
  ID0setuser();
  return result;
}

#if defined(__FreeBSD__) && !defined(NOKLDLOAD)
int
ID0kldload(const char *dev)
{
  int result;

  ID0set0();
  result = kldload(dev);
  log_Printf(LogID0, "%d = kldload(\"%s\")\n", result, dev);
  ID0setuser();
  return result;
}
#endif

#ifndef NONETGRAPH
int
ID0NgMkSockNode(const char *name, int *cs, int *ds)
{
  int result;

  ID0set0();
  result = NgMkSockNode(name, cs, ds);
  log_Printf(LogID0, "%d = NgMkSockNode(\"%s\", &cs, &ds)\n",
             result, name ? name : "");
  ID0setuser();
  return result;
}
#endif
@


1.10
log
@Tidy up end of line whitespace
@
text
@d26 1
a26 1
 *	$OpenBSD: id.c,v 1.9 2002/05/27 23:19:38 brian Exp $
@


1.9
log
@Coerce pid_t to long rather than int for better portability; theo
@
text
@d26 1
a26 1
 *	$OpenBSD: id.c,v 1.8 2002/03/05 13:10:11 brian Exp $
d231 1
a231 1
    logwtmp(ut_line, "", ""); 
@


1.8
log
@Don't drop the last character from ut_line in ID0logout()
@
text
@d26 1
a26 1
 *	$OpenBSD: id.c,v 1.7 2000/08/16 09:07:27 brian Exp $
d186 2
a187 2
  log_Printf(LogID0, "%d = uu_lock_txfr(\"%s\", %d)\n", ret, basettyname,
             (int)newpid);
d271 1
a271 1
  log_Printf(LogID0, "%d = kill(%d, %d)\n", result, (int)pid, sig);
@


1.7
log
@setproctitle() doesn't need to be called with root privs, so move
it from id.c into defs.c
@
text
@d26 1
a26 1
 *	$OpenBSD: id.c,v 1.6 2000/08/11 09:40:24 brian Exp $
d223 1
d225 2
a226 2
  strncpy(ut.ut_line, device, sizeof ut.ut_line - 1);
  ut.ut_line[sizeof ut.ut_line - 1] = '\0';
d229 4
a232 4
  if (nologout || logout(ut.ut_line)) {
    log_Printf(LogID0, "logout(\"%s\")\n", ut.ut_line);
    logwtmp(ut.ut_line, "", ""); 
    log_Printf(LogID0, "logwtmp(\"%s\", \"\", \"\")\n", ut.ut_line);
d234 1
a234 1
    log_Printf(LogERROR, "ID0logout: No longer logged in on %s\n", ut.ut_line);
@


1.6
log
@If ``set title'' is given a `-' as the first character of the
first arg, move it into the setproctitle() format string.
This is only actually useful on FreeBSD.
@
text
@d26 1
a26 1
 *	$OpenBSD: id.c,v 1.5 2000/02/27 01:38:26 brian Exp $
a40 1
#include <stdlib.h>     /* setproctitle() under OpenBSD (+NetBSD ?)*/
a272 17
}

void
ID0setproctitle(const char *title)
{
  ID0set0();
  if (title == NULL) {
    setproctitle(NULL);
    log_Printf(LogID0, "setproctitle(NULL)\n");
  } else {
    if (title[0] == '-' && title[1] != '\0')
      setproctitle("-%s", title + 1);
    else
      setproctitle("%s", title);
    log_Printf(LogID0, "setproctitle(\"%%s\", \"%s\")\n", title);
  }
  ID0setuser();
@


1.5
log
@$Id$ -> $OpenBSD$
@
text
@d26 1
a26 1
 *	$OpenBSD: id.c,v 1.4 2000/02/27 01:34:04 brian Exp $
d284 4
a287 1
    setproctitle("%s", title);
@


1.4
log
@Fix a bug in end-of-line comment parsing.
Fix callback (don't ``forget'' to call back).
Restructure how we add/remove the address family when
writing/reading the tun device.
Notify the tun device that we've changed PID under FreeBSD.
@
text
@d26 1
a26 1
 *	$Id: id.c,v 1.3 2000/01/07 03:26:54 brian Exp $
@


1.3
log
@Upgrade from 2.23 -> 2.26
I'll follow up with a list of changes (too big for a commit message IMHO)
@
text
@d26 1
a26 1
 *	$Id: id.c,v 1.2 1999/02/06 03:22:37 brian Exp $
d41 1
a41 1
#include <stdlib.h>	/* setproctitle() under OpenBSD (+NetBSD ?)*/
@


1.2
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d26 1
a26 1
 *	$Id: id.c,v 1.11 1998/06/27 23:48:44 brian Exp $
d29 1
a29 1
#include <sys/types.h>
d35 3
d41 1
d44 3
d221 1
a221 1
ID0logout(const char *device)
d229 1
a229 1
  if (logout(ut.ut_line)) {
d275 43
@


1.1
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@@

