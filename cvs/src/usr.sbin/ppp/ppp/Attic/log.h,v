head	1.13;
access;
symbols
	OPENBSD_5_5:1.12.0.36
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.32
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.30
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.28
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.26
	OPENBSD_5_0:1.12.0.24
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.22
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.20
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.16
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.18
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.14
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.12
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.10
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.8
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.6
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.4
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.11.0.14
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.12
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.10
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.8
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.6
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.4
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.12;

1.12
date	2005.09.21.16.28.47;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.15.08.02.00;	author brian;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.23.11.17.03;	author brian;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.19.23.22.18;	author brian;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.29.17.02.03;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.28.23.25.28;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	2000.02.27.01.38.27;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.27.00.21.08;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.07.03.26.54;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	99.05.12.10.03.52;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.02.06.03.22.41;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.00.22.23;	author brian;	state Exp;
branches;
next	;


desc
@@


1.13
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1997 Brian Somers <brian@@Awfulhak.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$OpenBSD: log.h,v 1.12 2005/09/21 16:28:47 brad Exp $
 */

#define LogLOG		(0)
#define LogMIN		(1)
#define LogASYNC	(1)	/* syslog(LOG_INFO, ....)	 */
#define LogCBCP		(2)
#define LogCCP		(3)
#define LogCHAT		(4)
#define LogCOMMAND	(5)
#define LogCONNECT	(6)
#define LogDEBUG	(7)	/* syslog(LOG_DEBUG, ....)	 */
#define LogDNS		(8)
#define LogFILTER       (9)
#define LogHDLC		(10)
#define LogID0		(11)
#define LogIPCP		(12)
#define LogIPV6CP	(13)
#define LogLCP		(14)
#define LogLQM		(15)
#define LogPHASE	(16)
#define LogPHYSICAL	(17)	/* syslog(LOG_INFO, ....)	 */
#define LogRADIUS	(18)	/* syslog(LOG_INFO, ....)	 */
#define LogSYNC		(19)	/* syslog(LOG_INFO, ....)	 */
#define LogTCPIP	(20)
#define LogTIMER	(21)	/* syslog(LOG_DEBUG, ....)	 */
#define LogTUN		(22)	/* If set, tun%d is output with each message */
#define LogWARN		(23)	/* Sent to VarTerm else syslog(LOG_WARNING, ) */
#define LogERROR	(24)	/* syslog(LOG_ERR, ....), + sent to VarTerm */
#define LogALERT	(25)	/* syslog(LOG_ALERT, ....)	 */

#define LogMAXCONF	(22)
#define LogMAX		(25)

struct mbuf;
struct cmdargs;
struct prompt;
struct server;
struct datalink;

/* The first int arg for all of the following is one of the above values */
extern const char *log_Name(int);
extern void log_Keep(int);
extern void log_KeepLocal(int, u_long *);
extern void log_Discard(int);
extern void log_DiscardLocal(int, u_long *);
extern void log_DiscardAll(void);
extern void log_DiscardAllLocal(u_long *);
#define LOG_KEPT_SYSLOG (1)	/* Results of log_IsKept() */
#define LOG_KEPT_LOCAL  (2)	/* Results of log_IsKept() */
extern int log_IsKept(int);
extern int log_IsKeptLocal(int, u_long);
extern void log_Open(const char *);
extern void log_SetTun(int);
extern void log_Close(void);
#ifdef __GNUC__
extern void log_Printf(int, const char *,...)
            __attribute__ ((format (printf, 2, 3)));
extern void log_WritePrompts(struct datalink *, const char *, ...)
            __attribute__ ((format (printf, 2, 3)));
#else
extern void log_Printf(int, const char *,...);
extern void log_WritePrompts(struct datalink *, const char *, ...);
#endif
extern void log_DumpBp(int, const char *, const struct mbuf *);
extern void log_DumpBuff(int, const char *, const u_char *, int);
extern int log_ShowLevel(struct cmdargs const *);
extern int log_SetLevel(struct cmdargs const *);
extern int log_ShowWho(struct cmdargs const *);

extern struct prompt *log_PromptContext;
extern int log_PromptListChanged;
extern void log_RegisterPrompt(struct prompt *);
extern void log_UnRegisterPrompt(struct prompt *);
extern void log_DestroyPrompts(struct server *);
extern void log_DisplayPrompts(void);
extern void log_ActivatePrompt(struct prompt *);
extern void log_DeactivatePrompt(struct prompt *);
extern void log_SetTtyCommandMode(struct datalink *);
extern struct prompt *log_PromptList(void);
@


1.12
log
@Support a ``set rad_alive N'' command to enable periodic RADIUS accounting
information being sent to the RADIUS server.

Logging of RADIUS accounting information moves to a ``set log [+-]radius''
level, along with the RADIUS alive info.

From brian FreeBSD
@
text
@d26 1
a26 1
 *	$OpenBSD: log.h,v 1.11 2002/06/15 08:02:00 brian Exp $
@


1.11
log
@Tidy up end of line whitespace
@
text
@d26 1
a26 1
 *	$OpenBSD: log.h,v 1.10 2001/11/23 11:17:03 brian Exp $
d48 8
a55 7
#define LogSYNC		(18)	/* syslog(LOG_INFO, ....)	 */
#define LogTCPIP	(19)
#define LogTIMER	(20)	/* syslog(LOG_DEBUG, ....)	 */
#define LogTUN		(21)	/* If set, tun%d is output with each message */
#define LogWARN		(22)	/* Sent to VarTerm else syslog(LOG_WARNING, ) */
#define LogERROR	(23)	/* syslog(LOG_ERR, ....), + sent to VarTerm */
#define LogALERT	(24)	/* syslog(LOG_ALERT, ....)	 */
d57 2
a58 2
#define LogMAXCONF	(21)
#define LogMAX		(24)
@


1.10
log
@cmott@@scientech.com -> cm@@linktel.net
Add the UPTIME variable
CCP protocol ``0xffffffff'' -> ``none''
Don't leak memory when expanding command arguments and not exec()ing
Make some functions static
Add the ``log'' command for manual logging
Fix some log text bogons
@
text
@d26 1
a26 1
 *	$OpenBSD: log.h,v 1.9 2001/08/19 23:22:18 brian Exp $
d56 1
a56 1
#define LogMAXCONF	(21)  
@


1.9
log
@Add IPv6 support.

IPV6CP support is crude for now, and hasn't been tested against
any other implementations.  RADIUS and IPv6 are independent of
eachother for now.  ppp.linkup/ppp.linkdown aren't currently used
by IPV6CP

Understand all protocols(5) in filter rules rather than only a select
few.

Allow a mask specification for the ``delete'' command.  It's now
possible to specifically delete one of two conflicting routes.

When creating and deleting proxy arp entries, do it for all IPv4
interface addresses rather than doing it just for the ``current''
peer address.

When iface-alias isn't in effect, don't blow away manually (via ``iface
add'') added interface addresses.

When listening on a tcp server (diagnostic) socket, bind so that a
tcp46 socket is created -- allowing both IPv4 and IPv6 connections.

When displaying ICMP traffic, don't display the icmp type twice.

When display traffic, display at least some information about unrecognised
traffic.

Bump version
@
text
@d26 1
a26 1
 *	$OpenBSD: log.h,v 1.8 2000/08/29 17:02:03 brian Exp $
d29 1
@


1.8
log
@Fix LogMAX; Mark Hannon <markhannon@@one.net.au>
@
text
@d26 1
a26 1
 *	$OpenBSD: log.h,v 1.7 2000/08/28 23:25:28 brian Exp $
d42 12
a53 11
#define LogLCP		(13)
#define LogLQM		(14)
#define LogPHASE	(15)
#define LogPHYSICAL	(16)	/* syslog(LOG_INFO, ....)	 */
#define LogSYNC		(17)	/* syslog(LOG_INFO, ....)	 */
#define LogTCPIP	(18)
#define LogTIMER	(19)	/* syslog(LOG_DEBUG, ....)	 */
#define LogTUN		(20)	/* If set, tun%d is output with each message */
#define LogWARN		(21)	/* Sent to VarTerm else syslog(LOG_WARNING, ) */
#define LogERROR	(22)	/* syslog(LOG_ERR, ....), + sent to VarTerm */
#define LogALERT	(23)	/* syslog(LOG_ALERT, ....)	 */
d55 2
a56 2
#define LogMAXCONF	(20)  
#define LogMAX		(23)
@


1.7
log
@Add LogFILTER logging to log packets allowed by the dial filter and
dropped by any filter.

Submitted by: Mark Hannon <markhannon@@one.net.au>

with some small tweaks by me.
@
text
@d26 1
a26 1
 *	$OpenBSD: log.h,v 1.6 2000/02/27 01:38:27 brian Exp $
d55 1
a55 1
#define LogMAX		(24)
@


1.6
log
@$Id$ -> $OpenBSD$
@
text
@d26 1
a26 1
 *	$OpenBSD: log.h,v 1.5 2000/02/27 00:21:08 brian Exp $
d38 15
a52 14
#define LogHDLC		(9)
#define LogID0		(10)
#define LogIPCP		(11)
#define LogLCP		(12)
#define LogLQM		(13)
#define LogPHASE	(14)
#define LogPHYSICAL	(15)	/* syslog(LOG_INFO, ....)	 */
#define LogSYNC		(16)	/* syslog(LOG_INFO, ....)	 */
#define LogTCPIP	(17)
#define LogTIMER	(18)	/* syslog(LOG_DEBUG, ....)	 */
#define LogTUN		(19)	/* If set, tun%d is output with each message */
#define LogWARN		(20)	/* Sent to VarTerm else syslog(LOG_WARNING, ) */
#define LogERROR	(21)	/* syslog(LOG_ERR, ....), + sent to VarTerm */
#define LogALERT	(22)	/* syslog(LOG_ALERT, ....)	 */
d54 2
a55 2
#define LogMAXCONF	(19)
#define LogMAX		(22)
@


1.5
log
@When we stop a timer that's the first in the timer list, ensure
that we adjust that timers `rest' value (with the current getitimer()
values) before using that to adjust the next items `rest' value.
After adjusting that value, restart the timer service so that we've
now got the correct setitimer() values.
When adjusting timer::rest, round to the closest TICKUNIT usecs
value.

struct descriptor -> struct fdescriptor (to avoid header polution in
NetBSD).

Introduce LOCALNAT and LOCALRAD defines.

The interface list that comes back from the PF_ROUTE/NET_RT_IFLIST mib
is aligned.  Teach this to ``show route'' and clean up some of the
sockaddr parsing routines.

Add ``set log dns'' to log DNS QUERY packets.

When ppp can't identify the relevant name, don't use "???", use
<nnn> or <0xnnn> instead.

Don't ``break'' when we come accross a non-RTM_IFINFO type
entry in the block returned by the NET_RT_IFLIST mib,
continue instead.

Correct UN_SIZE definition; ben@@scientia.demon.co.uk
@
text
@d26 1
a26 1
 *	$Id: log.h,v 1.4 2000/01/07 03:26:54 brian Exp $
@


1.4
log
@Upgrade from 2.23 -> 2.26
I'll follow up with a list of changes (too big for a commit message IMHO)
@
text
@d26 1
a26 1
 *	$Id: log.h,v 1.3 1999/05/12 10:03:52 brian Exp $
d37 18
a54 16
#define LogHDLC		(8)
#define LogID0		(9)
#define LogIPCP		(10)
#define LogLCP		(11)
#define LogLQM		(12)
#define LogPHASE	(13)
#define LogPHYSICAL	(14)	/* syslog(LOG_INFO, ....)	 */
#define LogSYNC		(15)	/* syslog(LOG_INFO, ....)	 */
#define LogTCPIP	(16)
#define LogTIMER	(17)	/* syslog(LOG_DEBUG, ....)	 */
#define LogTUN		(18)	/* If set, tun%d is output with each message */
#define LogMAXCONF	(18)
#define LogWARN		(19)	/* Sent to VarTerm else syslog(LOG_WARNING, ) */
#define LogERROR	(20)	/* syslog(LOG_ERR, ....), + sent to VarTerm */
#define LogALERT	(21)	/* syslog(LOG_ALERT, ....)	 */
#define LogMAX		(21)
@


1.3
log
@Allow ``host:port/udp'' devices and support ``host:port/tcp'' as
being the same as the previous (still supported) ``host:port''
syntax for tcp socket devices.

A udp device uses synchronous ppp rather than async, and avoids
the double-retransmit overhead that comes with ppp over tcp (it's
usually a bad idea to transport IP over a reliable transport that
itself is using an unreliable transport).  PPP over UDP provides
througput of ** 1.5Mb per second ** with all compression disabled,
maxing out a PPro/200 when running ppp twice, back-to-back.

This proves that PPPoE is plausable in userland....

This change adds a few more handler functions to struct device and
allows derivations of struct device (which may contain their own
data etc) to pass themselves through the unix domain socket for MP.
** At last **, struct physical has lost all the tty crud !

iov2physical() is now smart enough to restore the correct stack of
layers so that MP servers will work again.

The version number has bumped as our MP link transfer contents have
changed (they now may contain a `struct device').

Don't extract the protocol twice in MP mode (resulting in protocol
rejects for every MP packet).  This was broken with my original
layering changes.

Add ``Physical'' and ``Sync'' log levels for logging the relevent
raw packets and add protocol-tracking LogDEBUG stuff in various
LayerPush & LayerPull functions.

Assign our physical device name for incoming tcp connections by
calling getpeername().

Assign our physical device name for incoming udp connections from
the address retrieved by the first recvfrom().
@
text
@d26 1
a26 1
 *	$Id: log.h,v 1.2 1999/02/06 03:22:41 brian Exp $
d90 1
@


1.2
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d26 1
a26 1
 *	$Id: log.h,v 1.23 1998/08/09 15:34:11 brian Exp $
d43 10
a52 8
#define LogTCPIP	(14)
#define LogTIMER	(15)	/* syslog(LOG_DEBUG, ....)	 */
#define LogTUN		(16)	/* If set, tun%d is output with each message */
#define LogMAXCONF	(16)
#define LogWARN		(17)	/* Sent to VarTerm else syslog(LOG_WARNING, ) */
#define LogERROR	(18)	/* syslog(LOG_ERR, ....), + sent to VarTerm */
#define LogALERT	(19)	/* syslog(LOG_ALERT, ....)	 */
#define LogMAX		(19)
@


1.1
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@@

