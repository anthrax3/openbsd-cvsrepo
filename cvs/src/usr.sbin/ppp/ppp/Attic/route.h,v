head	1.9;
access;
symbols
	OPENBSD_5_5:1.8.0.54
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.50
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.48
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.46
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.44
	OPENBSD_5_0:1.8.0.42
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.40
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.38
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.34
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.36
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.32
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.30
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.28
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.26
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.24
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.22
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.20
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.18
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.16
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.14
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.12
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.10
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.8
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.6
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.8;

1.8
date	2001.08.19.23.22.18;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.13.21.33.42;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	2001.04.05.02.24.06;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.19.10.33.34;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.27.01.38.28;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.27.00.21.09;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.02.06.03.22.47;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.00.22.27;	author brian;	state Exp;
branches;
next	;


desc
@@


1.9
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1996 - 2001 Brian Somers <brian@@Awfulhak.org>
 *          based on work by Toshiharu OHNO <tony-o@@iij.ad.jp>
 *                           Internet Initiative Japan, Inc (IIJ)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $OpenBSD: route.h,v 1.8 2001/08/19 23:22:18 brian Exp $
 */

struct bundle;
struct cmdargs;
struct rt_msghdr;
struct sockaddr;

#define ROUTE_STATIC		0x0000
#define ROUTE_DSTMYADDR		0x0001
#define ROUTE_DSTMYADDR6	0x0002
#define ROUTE_DSTHISADDR	0x0004
#define ROUTE_DSTHISADDR6	0x0008
#define ROUTE_DSTDNS0		0x0010
#define ROUTE_DSTDNS1		0x0020
#define ROUTE_DSTANY		0x0040
#define ROUTE_GWHISADDR		0x0080	/* May be ORd with DST_* */
#define ROUTE_GWHISADDR6	0x0100	/* May be ORd with DST_* */

struct sticky_route {
  int type;				/* ROUTE_* value (not _STATIC) */
  struct sticky_route *next;		/* next in list */

  struct ncprange dst;
  struct ncpaddr gw;
};

extern int GetIfIndex(char *);
extern int route_Show(struct cmdargs const *);
extern void route_IfDelete(struct bundle *, int);
extern void route_UpdateMTU(struct bundle *);
extern const char *Index2Nam(int);
extern void route_Change(struct bundle *, struct sticky_route *,
                         const struct ncpaddr *, const struct ncpaddr *);
extern void route_Add(struct sticky_route **, int, const struct ncprange *,
                      const struct ncpaddr *);
extern void route_Delete(struct sticky_route **, int, const struct ncprange *);
extern void route_DeleteAll(struct sticky_route **);
extern void route_Clean(struct bundle *, struct sticky_route *);
extern void route_ShowSticky(struct prompt *, struct sticky_route *,
                             const char *, int);
extern void route_ParseHdr(struct rt_msghdr *, struct sockaddr *[RTAX_MAX]);
extern int rt_Set(struct bundle *, int, const struct ncprange *,
                  const struct ncpaddr *, int, int);
extern void rt_Update(struct bundle *, const struct sockaddr *,
                      const struct sockaddr *, const struct sockaddr *);
@


1.8
log
@Add IPv6 support.

IPV6CP support is crude for now, and hasn't been tested against
any other implementations.  RADIUS and IPv6 are independent of
eachother for now.  ppp.linkup/ppp.linkdown aren't currently used
by IPV6CP

Understand all protocols(5) in filter rules rather than only a select
few.

Allow a mask specification for the ``delete'' command.  It's now
possible to specifically delete one of two conflicting routes.

When creating and deleting proxy arp entries, do it for all IPv4
interface addresses rather than doing it just for the ``current''
peer address.

When iface-alias isn't in effect, don't blow away manually (via ``iface
add'') added interface addresses.

When listening on a tcp server (diagnostic) socket, bind so that a
tcp46 socket is created -- allowing both IPv4 and IPv6 connections.

When displaying ICMP traffic, don't display the icmp type twice.

When display traffic, display at least some information about unrecognised
traffic.

Bump version
@
text
@d28 1
a28 1
 * $OpenBSD: route.h,v 1.7 2001/06/13 21:33:42 brian Exp $
@


1.7
log
@Convert IIJ copyrights to BSD copyrights; ok tohno@@sirius.ocn.ne.jp
@
text
@d28 1
a28 1
 * $OpenBSD$
d36 10
a45 7
#define ROUTE_STATIC		0x00
#define ROUTE_DSTMYADDR		0x01
#define ROUTE_DSTHISADDR	0x02
#define ROUTE_DSTDNS0		0x04
#define ROUTE_DSTDNS1		0x08
#define ROUTE_DSTANY		0x0f
#define ROUTE_GWHISADDR		0x10	/* May be ORd with DST_* */
d51 2
a52 3
  struct in_addr dst;
  struct in_addr mask;
  struct in_addr gw;
d61 4
a64 4
                         struct in_addr, struct in_addr, struct in_addr[2]);
extern void route_Add(struct sticky_route **, int, struct in_addr,
                      struct in_addr, struct in_addr);
extern void route_Delete(struct sticky_route **, int, struct in_addr);
d70 4
a73 3
extern int rt_Set(struct bundle *, int, struct in_addr,
                           struct in_addr, struct in_addr, int, int);
extern void rt_Update(struct bundle *, struct in_addr, struct in_addr);
@


1.6
log
@When we change the interface MTU, run through the routing table and tweak
all route MTUs too.
@
text
@d1 5
a5 2
/*
 *			User Process PPP
d7 8
a14 1
 *	    Written by Toshiharu OHNO (tony-o@@iij.ad.jp)
d16 11
a26 15
 *   Copyright (C) 1993, Internet Initiative Japan, Inc. All rights reserverd.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the Internet Initiative Japan, Inc.  The name of the
 * IIJ may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $OpenBSD: route.h,v 1.5 2000/03/19 10:33:34 brian Exp $
d28 1
@


1.5
log
@Allow environment variables on command/config lines; markk@@knigma.org
Add the ``resolv'' command so that when ``enable dns''
is used, it's possible to restore the file.
@
text
@d20 1
a20 1
 * $OpenBSD: route.h,v 1.4 2000/02/27 01:38:28 brian Exp $
d49 1
d61 3
@


1.4
log
@$Id$ -> $OpenBSD$
@
text
@d20 1
a20 1
 * $OpenBSD: route.h,v 1.3 2000/02/27 00:21:09 brian Exp $
d29 7
a35 5
#define ROUTE_STATIC		0
#define ROUTE_DSTMYADDR		1
#define ROUTE_DSTHISADDR	2
#define ROUTE_DSTANY		3
#define ROUTE_GWHISADDR		4	/* May be ORd with DST_MYADDR */
d51 1
a51 1
                         struct in_addr, struct in_addr);
@


1.3
log
@When we stop a timer that's the first in the timer list, ensure
that we adjust that timers `rest' value (with the current getitimer()
values) before using that to adjust the next items `rest' value.
After adjusting that value, restart the timer service so that we've
now got the correct setitimer() values.
When adjusting timer::rest, round to the closest TICKUNIT usecs
value.

struct descriptor -> struct fdescriptor (to avoid header polution in
NetBSD).

Introduce LOCALNAT and LOCALRAD defines.

The interface list that comes back from the PF_ROUTE/NET_RT_IFLIST mib
is aligned.  Teach this to ``show route'' and clean up some of the
sockaddr parsing routines.

Add ``set log dns'' to log DNS QUERY packets.

When ppp can't identify the relevant name, don't use "???", use
<nnn> or <0xnnn> instead.

Don't ``break'' when we come accross a non-RTM_IFINFO type
entry in the block returned by the NET_RT_IFLIST mib,
continue instead.

Correct UN_SIZE definition; ben@@scientia.demon.co.uk
@
text
@d20 1
a20 1
 * $Id: route.h,v 1.2 1999/02/06 03:22:47 brian Exp $
@


1.2
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d20 1
a20 1
 * $Id: route.h,v 1.12 1999/01/28 01:56:34 brian Exp $
d26 2
d57 1
@


1.1
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@d20 1
a20 1
 * $Id: route.h,v 1.11 1998/05/21 21:48:12 brian Exp $
d53 2
a54 1
extern void route_ShowSticky(struct prompt *, struct sticky_route *);
@

