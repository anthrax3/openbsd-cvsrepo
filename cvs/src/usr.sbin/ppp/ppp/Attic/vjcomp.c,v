head	1.18;
access;
symbols
	OPENBSD_5_5:1.17.0.46
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.42
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.40
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.38
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.36
	OPENBSD_5_0:1.17.0.34
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.32
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.30
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.26
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.28
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.24
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.22
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.20
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.18
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.16
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.14
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.12
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.10
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.8
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.6
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.4
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.16.0.4
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.16.0.2
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.14.0.2
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_9:1.12.0.6
	OPENBSD_2_8:1.12.0.4
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.2
	OPENBSD_2_7_BASE:1.12
	OPENBSD_2_6:1.10.0.2
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.18
date	2014.03.17.17.15.52;	author deraadt;	state dead;
branches;
next	1.17;

1.17
date	2003.04.04.20.25.06;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2002.05.16.01.13.39;	author brian;	state Exp;
branches;
next	1.15;

1.15
date	2002.01.24.23.01.19;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.19.23.22.18;	author brian;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.13.21.33.42;	author brian;	state Exp;
branches;
next	1.12;

1.12
date	2000.02.27.01.38.29;	author brian;	state Exp;
branches;
next	1.11;

1.11
date	2000.01.07.03.26.56;	author brian;	state Exp;
branches;
next	1.10;

1.10
date	99.07.15.02.10.33;	author brian;	state Exp;
branches;
next	1.9;

1.9
date	99.07.15.02.04.07;	author brian;	state Exp;
branches;
next	1.8;

1.8
date	99.06.02.15.58.41;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	99.05.12.10.03.56;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	99.05.09.20.04.04;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	99.05.08.11.06.40;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	99.03.31.14.22.11;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	99.03.29.08.20.33;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.02.06.03.22.49;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.00.22.30;	author brian;	state Exp;
branches;
next	;


desc
@@


1.18
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1996 - 2001 Brian Somers <brian@@Awfulhak.org>
 *          based on work by Toshiharu OHNO <tony-o@@iij.ad.jp>
 *                           Internet Initiative Japan, Inc (IIJ)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $OpenBSD: vjcomp.c,v 1.17 2003/04/04 20:25:06 deraadt Exp $
 */

#include <sys/param.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <sys/socket.h>
#include <sys/un.h>

#include <stdio.h>
#include <string.h>		/* strlen/memcpy */
#include <termios.h>

#include "layer.h"
#include "mbuf.h"
#include "log.h"
#include "timer.h"
#include "fsm.h"
#include "proto.h"
#include "slcompress.h"
#include "lqr.h"
#include "hdlc.h"
#include "defs.h"
#include "iplist.h"
#include "throughput.h"
#include "ncpaddr.h"
#include "ipcp.h"
#include "lcp.h"
#include "ccp.h"
#include "link.h"
#include "filter.h"
#include "descriptor.h"
#include "mp.h"
#ifndef NORADIUS
#include "radius.h"
#endif
#include "ipv6cp.h"
#include "ncp.h"
#include "bundle.h"
#include "vjcomp.h"

#define MAX_VJHEADER 16		/* Maximum size of compressed header */

static struct mbuf *
vj_LayerPush(struct bundle *bundle, struct link *l, struct mbuf *bp, int pri,
             u_short *proto)
{
  int type;
  struct ip *pip;
  u_short cproto = bundle->ncp.ipcp.peer_compproto >> 16;

  bp = m_pullup(bp);
  pip = (struct ip *)MBUF_CTOP(bp);
  if (*proto == PROTO_IP && pip->ip_p == IPPROTO_TCP &&
      cproto == PROTO_VJCOMP) {
    type = sl_compress_tcp(bp, pip, &bundle->ncp.ipcp.vj.cslc,
                           &bundle->ncp.ipcp.vj.slstat,
                           bundle->ncp.ipcp.peer_compproto & 0xff);
    log_Printf(LogDEBUG, "vj_LayerWrite: type = %x\n", type);
    switch (type) {
    case TYPE_IP:
      break;

    case TYPE_UNCOMPRESSED_TCP:
      *proto = PROTO_VJUNCOMP;
      log_Printf(LogDEBUG, "vj_LayerPush: PROTO_IP -> PROTO_VJUNCOMP\n");
      m_settype(bp, MB_VJOUT);
      break;

    case TYPE_COMPRESSED_TCP:
      *proto = PROTO_VJCOMP;
      log_Printf(LogDEBUG, "vj_LayerPush: PROTO_IP -> PROTO_VJUNCOMP\n");
      m_settype(bp, MB_VJOUT);
      break;

    default:
      log_Printf(LogERROR, "vj_LayerPush: Unknown frame type %x\n", type);
      m_freem(bp);
      return NULL;
    }
  }

  return bp;
}

static struct mbuf *
VjUncompressTcp(struct ipcp *ipcp, struct mbuf *bp, u_char type)
{
  u_char *bufp;
  int len, olen, rlen;
  u_char work[MAX_HDR + MAX_VJHEADER];	/* enough to hold TCP/IP header */

  bp = m_pullup(bp);
  olen = len = m_length(bp);
  if (type == TYPE_UNCOMPRESSED_TCP) {
    /*
     * Uncompressed packet does NOT change its size, so that we can use mbuf
     * space for uncompression job.
     */
    bufp = MBUF_CTOP(bp);
    len = sl_uncompress_tcp(&bufp, len, type, &ipcp->vj.cslc, &ipcp->vj.slstat,
                            (ipcp->my_compproto >> 8) & 255);
    if (len <= 0) {
      m_freem(bp);
      bp = NULL;
    } else
      m_settype(bp, MB_VJIN);
    return bp;
  }

  /*
   * Handle compressed packet. 1) Read upto MAX_VJHEADER bytes into work
   * space. 2) Try to uncompress it. 3) Compute amount of necessary space. 4)
   * Copy unread data info there.
   */
  if (len > MAX_VJHEADER)
    len = MAX_VJHEADER;
  rlen = len;
  bufp = work + MAX_HDR;
  bp = mbuf_Read(bp, bufp, rlen);
  len = sl_uncompress_tcp(&bufp, olen, type, &ipcp->vj.cslc, &ipcp->vj.slstat,
                          (ipcp->my_compproto >> 8) & 255);
  if (len <= 0) {
    m_freem(bp);
    return NULL;
  }
  len -= olen;
  len += rlen;

  bp = m_prepend(bp, bufp, len, 0);
  m_settype(bp, MB_VJIN);

  return bp;
}

static struct mbuf *
vj_LayerPull(struct bundle *bundle, struct link *l, struct mbuf *bp,
             u_short *proto)
{
  u_char type;

  switch (*proto) {
  case PROTO_VJCOMP:
    type = TYPE_COMPRESSED_TCP;
    log_Printf(LogDEBUG, "vj_LayerPull: PROTO_VJCOMP -> PROTO_IP\n");
    break;
  case PROTO_VJUNCOMP:
    type = TYPE_UNCOMPRESSED_TCP;
    log_Printf(LogDEBUG, "vj_LayerPull: PROTO_VJUNCOMP -> PROTO_IP\n");
    break;
  default:
    return bp;
  }

  *proto = PROTO_IP;
  return VjUncompressTcp(&bundle->ncp.ipcp, bp, type);
}

const char *
vj2asc(u_int32_t val)
{
  static char asc[50];		/* The return value is used immediately */

  if (val)
    snprintf(asc, sizeof asc, "%d VJ slots with%s slot compression",
            (int)((val>>8)&15)+1, val & 1 ?  "" : "out");
  else
    strlcpy(asc, "VJ disabled", sizeof asc);
  return asc;
}

struct layer vjlayer = { LAYER_VJ, "vj", vj_LayerPush, vj_LayerPull };
@


1.17
log
@strlcpy and snprintf; various people ok
@
text
@d28 1
a28 1
 * $OpenBSD: vjcomp.c,v 1.16 2002/05/16 01:13:39 brian Exp $
@


1.16
log
@o Bump the version number
o Tidy up includes
o Fix macros in auth.h
o Insist on context for ``set mru'' in MP mode
o Usage -> usage
o Don't intialise after processing config requests
o Show FSM values for ConfigAcks
o Make ident output prettier
o Fix some Id keywords
o Handle RADIUS pool address 255.255.255.254
o Support RADIUS Session-Timeout attributes
o Support RADIUS Reply-Message attributes
o Support RADIUS CHAP-Error attributes
o Store RADIUS Filter-Id attributes
o Provide a NAS-Port-Type attribute to RADIUS servers
o Provide a better NAS-Port attribute to RADIUS servers
o Support MS-CHAP with RADIUS
o Improve FSM decode functions
o Support an OCTETSIN variable
o Support an OCTETSOUT variable
o Support an PACKETSIN variable
o Support an PACKETSOUT variable
o Support an IPOCTETSIN variable
o Support an IPOCTETSOUT variable
o Support an IPPACKETSIN variable
o Support an IPPACKETSOUT variable
o Support an IPV6OCTETSIN variable
o Support an IPV6OCTETSOUT variable
o Support an IPV6PACKETSIN variable
o Support an IPV6PACKETSOUT variable
o Support a SOCKNAME variable
@
text
@d28 1
a28 1
 * $OpenBSD: vjcomp.c,v 1.15 2002/01/24 23:01:19 millert Exp $
d196 1
a196 1
    strcpy(asc, "VJ disabled");
@


1.15
log
@Fix `necesary' typos; Alexander Yurchenko

Alas many of these were introduced by yours truly as necessary
just doesn't look right to me for some reason ;-)
@
text
@d28 1
a28 1
 * $OpenBSD: vjcomp.c,v 1.14 2001/08/19 23:22:18 brian Exp $
a54 1
#include "ip.h"
@


1.14
log
@Add IPv6 support.

IPV6CP support is crude for now, and hasn't been tested against
any other implementations.  RADIUS and IPv6 are independent of
eachother for now.  ppp.linkup/ppp.linkdown aren't currently used
by IPV6CP

Understand all protocols(5) in filter rules rather than only a select
few.

Allow a mask specification for the ``delete'' command.  It's now
possible to specifically delete one of two conflicting routes.

When creating and deleting proxy arp entries, do it for all IPv4
interface addresses rather than doing it just for the ``current''
peer address.

When iface-alias isn't in effect, don't blow away manually (via ``iface
add'') added interface addresses.

When listening on a tcp server (diagnostic) socket, bind so that a
tcp46 socket is created -- allowing both IPv4 and IPv6 connections.

When displaying ICMP traffic, don't display the icmp type twice.

When display traffic, display at least some information about unrecognised
traffic.

Bump version
@
text
@d28 1
a28 1
 * $OpenBSD: vjcomp.c,v 1.13 2001/06/13 21:33:42 brian Exp $
d142 1
a142 1
   * space. 2) Try to uncompress it. 3) Compute amount of necesary space. 4)
@


1.13
log
@Convert IIJ copyrights to BSD copyrights; ok tohno@@sirius.ocn.ne.jp
@
text
@d28 1
a28 1
 * $OpenBSD$
d35 1
d54 2
d66 2
@


1.12
log
@$Id$ -> $OpenBSD$
@
text
@d1 5
a5 2
/*
 *	       Input/Output VJ Compressed packets
d7 8
a14 1
 *	    Written by Toshiharu OHNO (tony-o@@iij.ad.jp)
d16 11
a26 1
 *   Copyright (C) 1993, Internet Initiative Japan, Inc. All rights reserverd.
d28 1
a28 15
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the Internet Initiative Japan, Inc.  The name of the
 * IIJ may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $OpenBSD: vjcomp.c,v 1.11 2000/01/07 03:26:56 brian Exp $
 *
 *  TODO:
d30 1
@


1.11
log
@Upgrade from 2.23 -> 2.26
I'll follow up with a list of changes (too big for a commit message IMHO)
@
text
@d20 1
a20 1
 * $Id: vjcomp.c,v 1.10 1999/07/15 02:10:33 brian Exp $
@


1.10
log
@Back out the mis-commit of my development ISDN modifications.
@
text
@d20 1
a20 1
 * $Id: vjcomp.c,v 1.8 1999/06/02 15:58:41 brian Exp $
d31 1
a31 1
#include <string.h>
d69 1
a69 1
  bp = mbuf_Contiguous(bp);
d84 1
a84 1
      mbuf_SetType(bp, MB_VJOUT);
d90 1
a90 1
      mbuf_SetType(bp, MB_VJOUT);
d95 1
a95 1
      mbuf_Free(bp);
a107 1
  struct mbuf *nbp;
d110 2
a111 2
  bp = mbuf_Contiguous(bp);
  olen = len = mbuf_Length(bp);
d121 1
a121 1
      mbuf_Free(bp);
d124 1
a124 1
      mbuf_SetType(bp, MB_VJIN);
d141 1
a141 1
    mbuf_Free(bp);
d146 5
a150 5
  nbp = mbuf_Alloc(len, MB_VJIN);
  memcpy(MBUF_CTOP(nbp), bufp, len);
  mbuf_SetType(bp, MB_VJIN);
  nbp->next = bp;
  return nbp;
@


1.9
log
@Don't declare `end' if we aren't compiling radius support.
@
text
@d31 1
a31 1
/* #include <string.h> (auto-remove) */
@


1.8
log
@o Alter the mbuf type as it's processed by different layers.
o Show more information about missing MP fragments in ``show mp''.
o Do away with mbuf_Log().  It was showing mbuf stats twice on
  receipt of LCP/CCP/IPCP packets.... ???!!?
o Pre-allocate a bit extra when creating LQR packets to avoid having
  to allocate another mbuf in mbuf_Prepend().
@
text
@d20 1
a20 1
 * $Id: vjcomp.c,v 1.7 1999/05/12 10:03:56 brian Exp $
d31 1
a31 1
#include <string.h>
@


1.7
log
@Allow ``host:port/udp'' devices and support ``host:port/tcp'' as
being the same as the previous (still supported) ``host:port''
syntax for tcp socket devices.

A udp device uses synchronous ppp rather than async, and avoids
the double-retransmit overhead that comes with ppp over tcp (it's
usually a bad idea to transport IP over a reliable transport that
itself is using an unreliable transport).  PPP over UDP provides
througput of ** 1.5Mb per second ** with all compression disabled,
maxing out a PPro/200 when running ppp twice, back-to-back.

This proves that PPPoE is plausable in userland....

This change adds a few more handler functions to struct device and
allows derivations of struct device (which may contain their own
data etc) to pass themselves through the unix domain socket for MP.
** At last **, struct physical has lost all the tty crud !

iov2physical() is now smart enough to restore the correct stack of
layers so that MP servers will work again.

The version number has bumped as our MP link transfer contents have
changed (they now may contain a `struct device').

Don't extract the protocol twice in MP mode (resulting in protocol
rejects for every MP packet).  This was broken with my original
layering changes.

Add ``Physical'' and ``Sync'' log levels for logging the relevent
raw packets and add protocol-tracking LogDEBUG stuff in various
LayerPush & LayerPull functions.

Assign our physical device name for incoming tcp connections by
calling getpeername().

Assign our physical device name for incoming udp connections from
the address retrieved by the first recvfrom().
@
text
@d20 1
a20 1
 * $Id: vjcomp.c,v 1.6 1999/05/09 20:04:04 brian Exp $
d84 1
d90 1
d124 2
a125 1
    }
d147 1
a147 1
  nbp = mbuf_Alloc(len, MB_VJCOMP);
d149 1
@


1.6
log
@Deal with the fact that as we now mbuf_Read the fsm
header in fsm_Input() we often end up with a NULL mbuf.

Deal with a possible NULL mbuf being passed into
mbuf_Prepend().

Adjust some spacing to make things more consistent.
@
text
@d20 1
a20 1
 * $Id: vjcomp.c,v 1.5 1999/05/08 11:06:40 brian Exp $
a68 2
  log_Printf(LogDEBUG, "vj_LayerWrite: COMPPROTO = %x\n",
            bundle->ncp.ipcp.peer_compproto);
d83 1
d88 1
d92 1
a92 1
      log_Printf(LogERROR, "Unknown frame type %x\n", type);
a155 3
  log_Printf(LogDEBUG, "vj_LayerPull: proto %02x\n", *proto);
  log_DumpBp(LogDEBUG, "Raw packet info:", bp);

d159 1
d163 1
@


1.5
log
@o Redesign the layering mechanism and make the aliasing code part of
  the layering.

  We now ``stack'' layers as soon as we open the device (when we figure
  out what we're dealing with).  A static set of `dispatch' routines are
  also declared for dealing with incoming packets after they've been
  `pulled' up through the stacked layers.

  Physical devices are now assigned handlers based on the device type
  when they're opened.  For the moment there are three device types;
  ttys, execs and tcps.

o Increment version number to 2.2
o Make an entry in [uw]tmp for non-tty -direct invocations (after
  pap/chap authentication).
o Make throughput counters quad_t's
o Account for the absolute number of mbuf malloc()s and free()s in
  ``show mem''.
o ``show modem'' becomes ``show physical''.
@
text
@d20 1
a20 1
 * $Id: vjcomp.c,v 1.4 1999/03/31 14:22:11 brian Exp $
d102 1
a102 1
VjUncompressTcp(struct ipcp *ipcp, struct mbuf * bp, u_char type)
@


1.4
log
@Avoid a few warnings on the alpha
@
text
@d20 1
a20 1
 * $Id: vjcomp.c,v 1.3 1999/03/29 08:20:33 brian Exp $
d32 1
d34 1
d39 1
a39 1
#include "lcpproto.h"
d61 3
a63 2
void
vj_SendFrame(struct link *l, struct mbuf * bp, struct bundle *bundle)
a65 1
  u_short proto;
d69 1
a69 1
  log_Printf(LogDEBUG, "vj_SendFrame: COMPPROTO = %x\n",
d73 2
a74 1
  if (pip->ip_p == IPPROTO_TCP && cproto == PROTO_VJCOMP) {
d78 1
a78 1
    log_Printf(LogDEBUG, "vj_SendFrame: type = %x\n", type);
a80 1
      proto = PROTO_IP;
d82 1
d84 1
a84 1
      proto = PROTO_VJUNCOMP;
d86 1
d88 1
a88 1
      proto = PROTO_VJCOMP;
d90 1
d92 1
a92 1
      log_Printf(LogALERT, "Unknown frame type %x\n", type);
d94 1
a94 1
      return;
d96 1
a96 2
  } else
    proto = PROTO_IP;
d98 1
a98 2
  if (!ccp_Compress(&l->ccp, l, PRI_NORMAL, proto, bp))
    hdlc_Output(l, PRI_NORMAL, proto, bp);
a111 1

d123 1
a123 1
    return (bp);
d147 1
a147 1
  return (nbp);
d150 3
a152 2
struct mbuf *
vj_Input(struct ipcp *ipcp, struct mbuf *bp, int proto)
d156 1
a156 1
  log_Printf(LogDEBUG, "vj_Input: proto %02x\n", proto);
d159 1
a159 1
  switch (proto) {
d167 1
a167 2
    log_Printf(LogWARN, "vj_Input...???\n");
    return (bp);
d169 3
a171 2
  bp = VjUncompressTcp(ipcp, bp, type);
  return (bp);
d180 2
a181 2
    snprintf(asc, sizeof asc, "%d VJ slots %s slot compression",
            (int)((val>>8)&15)+1, val & 1 ?  "with" : "without");
d186 2
@


1.3
log
@Ensure that the thing we're casting to struct ip
is aligned for non-i386 architectures.
@
text
@d20 1
a20 1
 * $Id: vjcomp.c,v 1.2 1999/02/06 03:22:49 brian Exp $
d31 1
@


1.2
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d20 1
a20 1
 * $Id: vjcomp.c,v 1.24 1999/01/28 01:56:34 brian Exp $
d63 1
d68 4
a71 4
  if (((struct ip *) MBUF_CTOP(bp))->ip_p == IPPROTO_TCP
      && cproto == PROTO_VJCOMP) {
    type = sl_compress_tcp(bp, (struct ip *)MBUF_CTOP(bp),
                           &bundle->ncp.ipcp.vj.cslc,
d105 1
@


1.1
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@d20 1
a20 1
 * $Id: vjcomp.c,v 1.23 1998/08/26 18:07:57 brian Exp $
d24 1
a24 1
#include <sys/types.h>
a30 1
#include <string.h>
d50 3
@

