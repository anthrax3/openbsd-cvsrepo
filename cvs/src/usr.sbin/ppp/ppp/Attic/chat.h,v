head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.60
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.56
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.54
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.52
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.50
	OPENBSD_5_0:1.6.0.48
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.46
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.44
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.40
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.42
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.38
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.36
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.34
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.32
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.30
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.28
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.26
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.24
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.22
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.20
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.18
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.16
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.14
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.12
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.10
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.8
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2000.02.27.01.38.25;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.27.00.21.06;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.07.03.26.53;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	99.05.08.11.06.34;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.02.06.03.22.33;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.00.22.18;	author brian;	state Exp;
branches;
next	;


desc
@@


1.7
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1998 Brian Somers <brian@@Awfulhak.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$OpenBSD: chat.h,v 1.6 2000/02/27 01:38:25 brian Exp $
 */

#define CHAT_EXPECT 0
#define CHAT_SEND   1
#define CHAT_DONE   2
#define CHAT_FAILED 3

#define MAXABORTS   50

struct physical;

struct chat {
  struct fdescriptor desc;
  struct physical *physical;

  int state;				/* Our CHAT_* status */

  char script[LINE_LEN];		/* Our arg buffer */
  char *argv[MAXARGS];			/* Our arguments (pointing to script) */
  int argc;				/* Number of argv's */

  int arg;				/* Our current arg number */
  char exp[LINE_LEN];			/* Our translated current argument */
  char *argptr;				/* Our current arg pointer */
  int arglen;				/* The length of argptr */
  char *nargptr;			/* Our next for expect-send-expect */

  char buf[LINE_LEN*2];			/* Our input */
  char *bufstart;			/* start of relevent data */
  char *bufend;				/* end of relevent data */

  int TimeoutSec;			/* Expect timeout value */
  int TimedOut;				/* We timed out */

  const char *phone;			/* Our phone number */

  struct {
    struct {
      char *data;			/* Abort the dial if we get one */
      int len;
    } string[MAXABORTS];
    int num;				/* How many AbortStrings */
  } abort;

  struct pppTimer pause;		/* Inactivity timer */
  struct pppTimer timeout;		/* TimeoutSec timer */
};

#define descriptor2chat(d) \
  ((d)->type == CHAT_DESCRIPTOR ? (struct chat *)(d) : NULL)
#define	VECSIZE(v)	(sizeof(v) / sizeof(v[0]))

extern void chat_Init(struct chat *, struct physical *);
extern int chat_Setup(struct chat *, const char *, const char *);
extern void chat_Finish(struct chat *);
extern void chat_Destroy(struct chat *);
@


1.6
log
@$Id$ -> $OpenBSD$
@
text
@d26 1
a26 1
 *	$OpenBSD: chat.h,v 1.5 2000/02/27 00:21:06 brian Exp $
@


1.5
log
@When we stop a timer that's the first in the timer list, ensure
that we adjust that timers `rest' value (with the current getitimer()
values) before using that to adjust the next items `rest' value.
After adjusting that value, restart the timer service so that we've
now got the correct setitimer() values.
When adjusting timer::rest, round to the closest TICKUNIT usecs
value.

struct descriptor -> struct fdescriptor (to avoid header polution in
NetBSD).

Introduce LOCALNAT and LOCALRAD defines.

The interface list that comes back from the PF_ROUTE/NET_RT_IFLIST mib
is aligned.  Teach this to ``show route'' and clean up some of the
sockaddr parsing routines.

Add ``set log dns'' to log DNS QUERY packets.

When ppp can't identify the relevant name, don't use "???", use
<nnn> or <0xnnn> instead.

Don't ``break'' when we come accross a non-RTM_IFINFO type
entry in the block returned by the NET_RT_IFLIST mib,
continue instead.

Correct UN_SIZE definition; ben@@scientia.demon.co.uk
@
text
@d26 1
a26 1
 *	$Id: chat.h,v 1.4 2000/01/07 03:26:53 brian Exp $
@


1.4
log
@Upgrade from 2.23 -> 2.26
I'll follow up with a list of changes (too big for a commit message IMHO)
@
text
@d26 1
a26 1
 *	$Id: chat.h,v 1.3 1999/05/08 11:06:34 brian Exp $
d39 1
a39 1
  struct descriptor desc;
@


1.3
log
@o Redesign the layering mechanism and make the aliasing code part of
  the layering.

  We now ``stack'' layers as soon as we open the device (when we figure
  out what we're dealing with).  A static set of `dispatch' routines are
  also declared for dealing with incoming packets after they've been
  `pulled' up through the stacked layers.

  Physical devices are now assigned handlers based on the device type
  when they're opened.  For the moment there are three device types;
  ttys, execs and tcps.

o Increment version number to 2.2
o Make an entry in [uw]tmp for non-tty -direct invocations (after
  pap/chap authentication).
o Make throughput counters quad_t's
o Account for the absolute number of mbuf malloc()s and free()s in
  ``show mem''.
o ``show modem'' becomes ``show physical''.
@
text
@d26 1
a26 1
 *	$Id: chat.h,v 1.2 1999/02/06 03:22:33 brian Exp $
d79 3
a81 2
extern void chat_Init(struct chat *, struct physical *, const char *, int,
                      const char *);
@


1.2
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d26 1
a26 1
 *	$Id: chat.h,v 1.10 1998/05/21 21:44:39 brian Exp $
a81 1
extern int MakeArgs(char *, char **, int);  /* Mangles the first arg ! */
@


1.1
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@@

