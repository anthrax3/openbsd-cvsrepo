head	1.18;
access;
symbols
	OPENBSD_5_5:1.17.0.46
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.42
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.40
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.38
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.36
	OPENBSD_5_0:1.17.0.34
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.32
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.30
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.26
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.28
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.24
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.22
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.20
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.18
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.16
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.14
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.12
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.10
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.8
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.6
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.4
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.16.0.4
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.16.0.2
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.14.0.2
	OPENBSD_3_1_BASE:1.14
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_8:1.9.0.4
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.18
date	2014.03.17.17.15.52;	author deraadt;	state dead;
branches;
next	1.17;

1.17
date	2003.04.04.20.25.06;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2002.06.15.08.02.01;	author brian;	state Exp;
branches;
next	1.15;

1.15
date	2002.05.16.01.13.39;	author brian;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.16.14.13.06;	author brian;	state Exp;
branches;
next	1.13;

1.13
date	2001.08.19.23.22.18;	author brian;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.19.10.25.01;	author brian;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.24.01.06.08;	author brian;	state Exp;
branches;
next	1.10;

1.10
date	2000.11.28.22.59.53;	author brian;	state Exp;
branches;
next	1.9;

1.9
date	2000.02.27.01.38.29;	author brian;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.07.03.26.56;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	99.08.05.10.32.14;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	99.05.08.11.06.40;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	99.04.26.08.55.01;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	99.04.26.08.54.50;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	99.02.06.03.22.49;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	98.10.29.02.21.46;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.00.22.30;	author brian;	state Exp;
branches;
next	;


desc
@@


1.18
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1997 Brian Somers <brian@@Awfulhak.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$OpenBSD: tun.c,v 1.17 2003/04/04 20:25:06 deraadt Exp $
 */

#include <sys/param.h>

#include <sys/socket.h>		/* For IFF_ defines */
#ifndef __FreeBSD__
#include <net/if.h>		/* For IFF_ defines */
#endif
#include <net/route.h>
#include <netinet/in.h>
#include <net/if_types.h>
#include <net/if_tun.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <sys/un.h>

#include <errno.h>
#include <string.h>
#if defined(__OpenBSD__) || defined(__NetBSD__)
#include <sys/ioctl.h>
#endif
#include <stdio.h>
#include <termios.h>
#ifdef __NetBSD__
#include <unistd.h>
#endif

#include "layer.h"
#include "mbuf.h"
#include "log.h"
#include "id.h"
#include "timer.h"
#include "lqr.h"
#include "hdlc.h"
#include "defs.h"
#include "fsm.h"
#include "throughput.h"
#include "iplist.h"
#include "slcompress.h"
#include "ncpaddr.h"
#include "ipcp.h"
#include "filter.h"
#include "descriptor.h"
#include "lcp.h"
#include "ccp.h"
#include "link.h"
#include "mp.h"
#include "iface.h"
#ifndef NORADIUS
#include "radius.h"
#endif
#include "ipv6cp.h"
#include "ncp.h"
#include "bundle.h"
#include "tun.h"

void
tun_configure(struct bundle *bundle)
{
#ifdef __NetBSD__
  struct ifreq ifr;
  int s;

  s = socket(PF_INET, SOCK_DGRAM, 0);

  if (s < 0) {
    log_Printf(LogERROR, "tun_configure: socket(): %s\n", strerror(errno));
    return;
  }

  snprintf(ifr.ifr_name, sizeof ifr.ifr_name, "tun%d", bundle->unit);
  ifr.ifr_mtu = bundle->iface->mtu;
  if (ioctl(s, SIOCSIFMTU, &ifr) < 0)
      log_Printf(LogERROR, "tun_configure: ioctl(SIOCSIFMTU): %s\n",
             strerror(errno));

  close(s);
#else
  struct tuninfo info;

  memset(&info, '\0', sizeof info);
  info.type = IFT_PPP;
  info.mtu = bundle->iface->mtu;

  info.baudrate = bundle->bandwidth;
#ifdef __OpenBSD__
  info.flags = IFF_UP|IFF_POINTOPOINT|IFF_MULTICAST;
#endif
  if (ID0ioctl(bundle->dev.fd, TUNSIFINFO, &info) < 0)
    log_Printf(LogERROR, "tun_configure: ioctl(TUNSIFINFO): %s\n",
	      strerror(errno));
#endif
}
@


1.17
log
@strlcpy and snprintf; various people ok
@
text
@d26 1
a26 1
 *	$OpenBSD: tun.c,v 1.16 2002/06/15 08:02:01 brian Exp $
@


1.16
log
@Tidy up end of line whitespace
@
text
@d26 1
a26 1
 *	$OpenBSD: tun.c,v 1.15 2002/05/16 01:13:39 brian Exp $
d97 1
a97 1
  sprintf(ifr.ifr_name, "tun%d", bundle->unit);
@


1.15
log
@o Bump the version number
o Tidy up includes
o Fix macros in auth.h
o Insist on context for ``set mru'' in MP mode
o Usage -> usage
o Don't intialise after processing config requests
o Show FSM values for ConfigAcks
o Make ident output prettier
o Fix some Id keywords
o Handle RADIUS pool address 255.255.255.254
o Support RADIUS Session-Timeout attributes
o Support RADIUS Reply-Message attributes
o Support RADIUS CHAP-Error attributes
o Store RADIUS Filter-Id attributes
o Provide a NAS-Port-Type attribute to RADIUS servers
o Provide a better NAS-Port attribute to RADIUS servers
o Support MS-CHAP with RADIUS
o Improve FSM decode functions
o Support an OCTETSIN variable
o Support an OCTETSOUT variable
o Support an PACKETSIN variable
o Support an PACKETSOUT variable
o Support an IPOCTETSIN variable
o Support an IPOCTETSOUT variable
o Support an IPPACKETSIN variable
o Support an IPPACKETSOUT variable
o Support an IPV6OCTETSIN variable
o Support an IPV6OCTETSOUT variable
o Support an IPV6PACKETSIN variable
o Support an IPV6PACKETSOUT variable
o Support a SOCKNAME variable
@
text
@d26 1
a26 1
 *	$OpenBSD: tun.c,v 1.14 2002/01/16 14:13:06 brian Exp $
d89 1
a89 1
  
d91 1
a91 1
  
d110 1
a110 1
  
@


1.14
log
@socket()s first argument should be a protocol family rather than an
address family.
@
text
@d26 1
a26 1
 *	$OpenBSD: tun.c,v 1.13 2001/08/19 23:22:18 brian Exp $
a66 1
#include "ip.h"
@


1.13
log
@Add IPv6 support.

IPV6CP support is crude for now, and hasn't been tested against
any other implementations.  RADIUS and IPv6 are independent of
eachother for now.  ppp.linkup/ppp.linkdown aren't currently used
by IPV6CP

Understand all protocols(5) in filter rules rather than only a select
few.

Allow a mask specification for the ``delete'' command.  It's now
possible to specifically delete one of two conflicting routes.

When creating and deleting proxy arp entries, do it for all IPv4
interface addresses rather than doing it just for the ``current''
peer address.

When iface-alias isn't in effect, don't blow away manually (via ``iface
add'') added interface addresses.

When listening on a tcp server (diagnostic) socket, bind so that a
tcp46 socket is created -- allowing both IPv4 and IPv6 connections.

When displaying ICMP traffic, don't display the icmp type twice.

When display traffic, display at least some information about unrecognised
traffic.

Bump version
@
text
@d26 1
a26 1
 *	$OpenBSD: tun.c,v 1.12 2001/06/19 10:25:01 brian Exp $
d91 1
a91 1
  s = socket(AF_INET, SOCK_DGRAM, 0);
@


1.12
log
@Handle hardware-imposed MTU/MRU limitations.

Add an optional ``max'' specifier to ``set m[rt]u'', ie.
``set mtu max 1492'' for PPPoE.

Bump the ppp version number.

Add support for stateful MPPE (microsoft encryption) providing
encryption compatibility with Windows 2000.  Stateful encryption
uses less CPU but is bad on lossy transports.

The ``set mppe'' command has been expanded.  If it's used with any
arguments, ppp will insist on encryption, closing LCP if the other
end refuses.

Sponsored by:	Monzoon Networks AG and FreeBSD Services Limited
@
text
@d26 1
a26 1
 *	$OpenBSD: tun.c,v 1.11 2001/03/24 01:06:08 brian Exp $
d66 2
d79 2
d114 1
a114 1
  info.flags = IFF_UP|IFF_POINTOPOINT;                             
@


1.11
log
@Remove some unprotected prototype variable names
MAXPATHLEN -> PATH_MAX
Handle ENOENT from opening /dev/tun* properly
Rename _PATH_PPP -> PPP_CONFDIR and allow it to be redefined at compile time
Reduce MIN_LQRPERIOD and MIN_FSMRETRY to 1 second
Be smarter about identifying sockets on stdin
Allow primary DNS IP negotiation when the secondary IP has been rejected
Fix the call to PacketAliasProxyRule() properly.
Add/fix some comments
Fix man page markups; ru@@FreeBSD.org
Use localhost when no hostname is configured
@
text
@d26 1
a26 1
 *	$OpenBSD: tun.c,v 1.10 2000/11/28 22:59:53 brian Exp $
d30 2
a32 1
#include <sys/socket.h>		/* For IFF_ defines */
d35 1
d73 1
d95 1
a95 1
  ifr.ifr_mtu = bundle->mtu;
d106 1
a106 1
  info.mtu = bundle->mtu;
@


1.10
log
@Add ``enable/disable'' tcpmssfixup - enabled by default.
@
text
@d26 1
a26 1
 *	$OpenBSD: tun.c,v 1.9 2000/02/27 01:38:29 brian Exp $
d46 1
a48 1
#include <stdio.h>
d55 1
d109 1
a109 1
  if (ioctl(bundle->dev.fd, TUNSIFINFO, &info) < 0)
@


1.9
log
@$Id$ -> $OpenBSD$
@
text
@d26 1
a26 1
 *	$OpenBSD: tun.c,v 1.8 2000/01/07 03:26:56 brian Exp $
d77 1
a77 1
tun_configure(struct bundle *bundle, int mtu)
d91 1
a91 1
  ifr.ifr_mtu = mtu;
d102 1
a102 1
  info.mtu = mtu;
@


1.8
log
@Upgrade from 2.23 -> 2.26
I'll follow up with a list of changes (too big for a commit message IMHO)
@
text
@d26 1
a26 1
 *	$Id: tun.c,v 1.7 1999/08/05 10:32:14 brian Exp $
@


1.7
log
@o Obsolete the undocumented ``set weight'' command.
o If we're using RADIUS and the RADIUS mtu is less than our
  peers mru/mrru, reduce our mtu to this value for NetBSD too.
o Make struct throughput's sample period dynamic and tweak the ppp
  version number to reflect the extra stuff being passed through
  the local domain socket as a result (MP mode).
o Measure the current throughput based on the number of samples actually
  taken rather than on the full sample period.
o Keep the throughput statisics persistent while being passed to
  another ppp invocation through the local domain socket.
o When showing throughput statistics after the timer has stopped, use
  the stopped time for overall calculations, not the current time.
  Also show the stopped time and how long the current throughput has
  been sampled for.
o Use time() consistently in throughput.c
o Tighten up the ``show bundle'' output.
o Introduce the ``set bandwidth'' command.
o Rewrite the ``set autoload'' command.  It now takes three arguments
  and works based on a rolling bundle throughput average compared against
  the theoretical bundle bandwidth over a given period (read: it's now
  functional).
@
text
@d26 1
a26 1
 *	$Id: tun.c,v 1.6 1999/05/08 11:06:40 brian Exp $
d30 1
a30 1
#ifdef __OpenBSD__
d43 1
d45 1
@


1.6
log
@o Redesign the layering mechanism and make the aliasing code part of
  the layering.

  We now ``stack'' layers as soon as we open the device (when we figure
  out what we're dealing with).  A static set of `dispatch' routines are
  also declared for dealing with incoming packets after they've been
  `pulled' up through the stacked layers.

  Physical devices are now assigned handlers based on the device type
  when they're opened.  For the moment there are three device types;
  ttys, execs and tcps.

o Increment version number to 2.2
o Make an entry in [uw]tmp for non-tty -direct invocations (after
  pap/chap authentication).
o Make throughput counters quad_t's
o Account for the absolute number of mbuf malloc()s and free()s in
  ``show mem''.
o ``show modem'' becomes ``show physical''.
@
text
@d26 1
a26 1
 *	$Id: tun.c,v 1.5 1999/04/26 08:55:01 brian Exp $
d30 1
d33 1
d100 1
a100 8
#ifndef NORADIUS
  if (bundle->radius.valid && bundle->radius.mtu && bundle->radius.mtu < mtu) {
    log_Printf(LogLCP, "Reducing MTU to radius value %lu\n",
               bundle->radius.mtu);
    info.mtu = bundle->radius.mtu;
  } else
#endif
    info.mtu = mtu;
d102 2
a103 2
  info.baudrate = bundle->ifSpeed;
#ifdef __OpenBSD__                                           
@


1.5
log
@Add support for NetBSD
@
text
@d26 1
a26 1
 *	$Id: tun.c,v 1.4 1999/04/26 08:54:50 brian Exp $
d42 1
d48 1
@


1.4
log
@#include <errno.h>, not <sys/errno.h>
@
text
@d26 1
a26 1
 *	$Id: tun.c,v 1.3 1999/02/06 03:22:49 brian Exp $
d42 4
d73 19
d112 1
@


1.3
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d26 1
a26 1
 *	$Id: tun.c,v 1.11 1999/01/28 01:56:34 brian Exp $
d39 1
a41 1
#include <sys/errno.h>
@


1.2
log
@Catch up with the latest ppp updates/fixes:

- Add enable/disable proxyall to proxy arp an entire subnet
  (smaller than class C)
- Add ``set {send,recv}pipe for controlling socket buffers.
- Fix the infamous ``first connection'' problem where the process
  that causes an auto dial to an ISP that assigns a dynamic IP never
  connects (due to the bound socket IP being changed on the tun iface).
  See ``enable/disable iface-alias'' and ``iface ...'' in the man page.
- Add PROCESSID as a substitution string when running commands.
- Add ``set proctitle'' for changing argv0.  You can use all the command
  substitutions here too (eg ``set proctitle ppp: USER INTERFACE'').
- Add a missing untimeout as soon as the chat expect string is received
  rather than waiting for the next expect to happen.
- Be less restrictive about when auth{name,key}, enddisc, shortseq and
  mrru can be changed.
- Improve some diagnostics.
- Don't send a DELAY field with CBCP_NONUM messages (as per the spec).
- Emphasise how to make callback optional in the man page.
- Allow the caller to request no callback if they're allowed choose the
  number anyway.
- Set our CBCP RESPONSE fsm id according to the REQ, moan if the peer
  gets the response id wrong (but continue anyway).
- Shuffle the ``set ?'' output back a column so that broken terminals
  that can't display 80 columns *and* a '\n' will look ok.
- If DES is compiled out, be more verbose about why CHAP 0x80 was rejected.
@
text
@d26 1
a26 1
 *	$Id: tun.c,v 1.1 1998/08/31 00:22:30 brian Exp $
d29 1
a29 1
#include <sys/types.h>
d60 3
d73 9
a81 1
  info.mtu = mtu;
@


1.1
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@d26 1
a26 1
 *	$Id: tun.c,v 1.9 1998/08/09 16:41:01 brian Exp $
d68 1
d71 1
a71 1
  info.baudrate = bundle->ifp.Speed;
@

