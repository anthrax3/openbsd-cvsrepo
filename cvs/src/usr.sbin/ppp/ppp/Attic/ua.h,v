head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.60
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.56
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.54
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.52
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.50
	OPENBSD_5_0:1.4.0.48
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.46
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.44
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.40
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.42
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.38
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.36
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.34
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.32
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.30
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.28
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.26
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.24
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.22
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.20
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.18
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.16
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.14
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.12
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.10
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2014.03.17.17.15.52;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	2000.02.27.01.38.29;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	99.02.06.03.22.49;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	98.09.15.17.21.58;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.09.04.18.27.47;	author brian;	state Exp;
branches;
next	;


desc
@@


1.5
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1998 Brian Somers <brian@@Awfulhak.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$OpenBSD: ua.h,v 1.4 2000/02/27 01:38:29 brian Exp $
 */

#ifdef __i386__		/* Do any other archs not care about alignment ? */

#  define ua_htonl(src, tgt) (*(u_int32_t *)(tgt) = htonl(*(u_int32_t *)(src)))
#  define ua_ntohl(src, tgt) (*(u_int32_t *)(tgt) = ntohl(*(u_int32_t *)(src)))
#  define ua_htons(src, tgt) (*(u_int16_t *)(tgt) = htons(*(u_int16_t *)(src)))
#  define ua_ntohs(src, tgt) (*(u_int16_t *)(tgt) = ntohs(*(u_int16_t *)(src)))

#else	/* We care about alignment (or else drop a core !) */

#  define ua_htonl(src, tgt)				\
    do {						\
      u_int32_t __oh;					\
      memcpy(&__oh, (src), sizeof __oh);		\
      *(u_char *)(tgt) = __oh >> 24;			\
      *((u_char *)(tgt) + 1) = (__oh >> 16) & 0xff;	\
      *((u_char *)(tgt) + 2) = (__oh >> 8) & 0xff;	\
      *((u_char *)(tgt) + 3) = __oh & 0xff;		\
    } while (0)

#  define ua_ntohl(src, tgt)				\
    do {						\
      u_int32_t __nh;					\
      __nh = ((u_int32_t)*(u_char *)(src) << 24) |	\
          ((u_int32_t)*((u_char *)(src) + 1) << 16) |	\
          ((u_int32_t)*((u_char *)(src) + 2) << 8) |	\
          (u_int32_t)*((u_char *)(src) + 3);		\
      memcpy((tgt), &__nh, sizeof __nh);		\
    } while (0)

#  define ua_htons(src, tgt)				\
    do {						\
      u_int16_t __oh;					\
      memcpy(&__oh, (src), sizeof __oh);		\
      *(u_char *)(tgt) = __oh >> 8;			\
      *((u_char *)(tgt) + 1) = __oh & 0xff;		\
    } while (0)

#  define ua_ntohs(src, tgt)				\
    do {						\
      u_int16_t __nh;					\
      __nh = ((u_int16_t)*(u_char *)(src) << 8) |	\
          (u_int16_t)*((u_char *)(src) + 1);		\
      memcpy((tgt), &__nh, sizeof __nh);		\
    } while (0)

#endif
@


1.4
log
@$Id$ -> $OpenBSD$
@
text
@d26 1
a26 1
 *	$OpenBSD: ua.h,v 1.3 1999/02/06 03:22:49 brian Exp $
@


1.3
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d26 1
a26 1
 *	$Id: ua.h,v 1.2 1998/09/15 17:22:20 brian Exp $
@


1.2
log
@Correct ua_ntohs.
@
text
@d26 1
a26 1
 *	$Id: ua.h,v 1.1 1998/09/04 18:27:47 brian Exp $
@


1.1
log
@Don't cast potentially unaligned addresses to pointers to
non-char types on non-i386 architectures.
On Alpha and Sparc we get a bus error if we do.
@
text
@d26 1
a26 1
 *	$Id:$
d68 3
a70 3
      u_int32_t __nh;					\
      __nh = ((u_int32_t)*(u_char *)(src) << 8) |	\
          (u_int32_t)*((u_char *)(src) + 1);		\
@

