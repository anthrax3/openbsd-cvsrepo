head	1.16;
access;
symbols
	OPENBSD_5_5:1.15.0.54
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.50
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.48
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.46
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.44
	OPENBSD_5_0:1.15.0.42
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.40
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.38
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.34
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.36
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.32
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.30
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.28
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.26
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.24
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.22
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.20
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.18
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.16
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.14
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.12
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.10
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.15.0.8
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.15.0.6
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.15.0.4
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.15.0.2
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_9:1.12.0.4
	OPENBSD_2_8:1.12.0.2
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.16
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.15;

1.15
date	2001.08.19.23.22.17;	author brian;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.13.21.33.40;	author brian;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.04.16.09.28;	author brian;	state Exp;
branches;
next	1.12;

1.12
date	2000.09.14.18.04.13;	author brian;	state Exp;
branches;
next	1.11;

1.11
date	2000.07.11.22.13.03;	author brian;	state Exp;
branches;
next	1.10;

1.10
date	2000.03.19.10.33.33;	author brian;	state Exp;
branches;
next	1.9;

1.9
date	2000.02.27.01.38.26;	author brian;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.07.03.26.54;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	99.08.02.15.28.47;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	99.07.27.23.47.21;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	99.06.23.16.49.03;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	99.05.31.23.57.37;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	99.02.06.03.22.36;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.01.19.22.21.43;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.00.22.20;	author brian;	state Exp;
branches;
next	;


desc
@@


1.16
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1996 - 2001 Brian Somers <brian@@Awfulhak.org>
 *          based on work by Toshiharu OHNO <tony-o@@iij.ad.jp>
 *                           Internet Initiative Japan, Inc (IIJ)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $OpenBSD: filter.h,v 1.15 2001/08/19 23:22:17 brian Exp $
 */

/* Operations - f_srcop, f_dstop */
#define	OP_NONE	0
#define	OP_EQ	1
#define	OP_GT	2
#define	OP_LT	3

/* srctype or dsttype */
#define T_ADDR		0
#define T_MYADDR	1
#define T_MYADDR6	2
#define T_HISADDR	3
#define T_HISADDR6	4
#define T_DNS0		5
#define T_DNS1		6

/*
 * There's a struct filterent for each possible filter rule.  The
 * layout is designed to minimise size (there are 4 * MAXFILTERS of
 * them) - which is also conveniently a power of 2 (32 bytes) on
 * architectures where sizeof(int)==4 (this makes indexing faster).
 *
 * Note that there are four free bits in the initial word for future
 * extensions.
 */
struct filterent {
  int f_proto;			/* Protocol: getprotoby*() */
  unsigned f_action : 8;	/* Filtering action: goto or A_... */
  unsigned f_srcop : 2;		/* Source port operation: OP_... */
  unsigned f_dstop : 2;		/* Destination port operation: OP_... */
  unsigned f_srctype : 3;	/* T_ value of src */
  unsigned f_dsttype : 3;	/* T_ value of dst */
  unsigned f_estab : 1;		/* Check TCP ACK bit */
  unsigned f_syn : 1;		/* Check TCP SYN bit */
  unsigned f_finrst : 1;	/* Check TCP FIN/RST bits */
  unsigned f_invert : 1;	/* true to complement match */
  struct ncprange f_src;	/* Source address and mask */
  struct ncprange f_dst;	/* Destination address and mask */
  u_short f_srcport;		/* Source port, compared with f_srcop */
  u_short f_dstport;		/* Destination port, compared with f_dstop */
  unsigned timeout;		/* Keep alive value for passed packet */
};

#define	MAXFILTERS	40	/* in each filter set */

/* f_action values [0..MAXFILTERS) specify the next filter rule, others are: */
#define	A_NONE		(MAXFILTERS)
#define	A_PERMIT	(A_NONE+1)
#define	A_DENY		(A_PERMIT+1)

struct filter {
  struct filterent rule[MAXFILTERS];	/* incoming packet filter */
  const char *name;
  unsigned fragok : 1;
  unsigned logok : 1;
};

/* Which filter set */
#define FL_IN		0
#define FL_OUT		1
#define FL_DIAL		2
#define FL_KEEP		3

struct ipcp;
struct cmdargs;

extern int filter_Show(struct cmdargs const *);
extern int filter_Set(struct cmdargs const *);
extern const char * filter_Action2Nam(int);
extern const char *filter_Op2Nam(int);
extern void filter_AdjustAddr(struct filter *, struct ncpaddr *,
                              struct ncpaddr *, struct in_addr *);
@


1.15
log
@Add IPv6 support.

IPV6CP support is crude for now, and hasn't been tested against
any other implementations.  RADIUS and IPv6 are independent of
eachother for now.  ppp.linkup/ppp.linkdown aren't currently used
by IPV6CP

Understand all protocols(5) in filter rules rather than only a select
few.

Allow a mask specification for the ``delete'' command.  It's now
possible to specifically delete one of two conflicting routes.

When creating and deleting proxy arp entries, do it for all IPv4
interface addresses rather than doing it just for the ``current''
peer address.

When iface-alias isn't in effect, don't blow away manually (via ``iface
add'') added interface addresses.

When listening on a tcp server (diagnostic) socket, bind so that a
tcp46 socket is created -- allowing both IPv4 and IPv6 connections.

When displaying ICMP traffic, don't display the icmp type twice.

When display traffic, display at least some information about unrecognised
traffic.

Bump version
@
text
@d28 1
a28 1
 * $OpenBSD: filter.h,v 1.14 2001/06/13 21:33:40 brian Exp $
@


1.14
log
@Convert IIJ copyrights to BSD copyrights; ok tohno@@sirius.ocn.ne.jp
@
text
@d28 1
a28 1
 * $OpenBSD$
a30 16
/* Known protocols - f_proto */
#define	P_NONE	0
#define	P_TCP	1
#define	P_UDP	2
#define	P_ICMP	3
#ifdef IPPROTO_OSPFIGP
#define	P_OSPF	4
#endif
#define	P_IGMP	5
#ifdef IPPROTO_GRE
#define P_GRE	6
#endif
#define P_ESP	7
#define P_AH	8
#define P_IPIP	9

d40 5
a44 3
#define T_HISADDR	2
#define T_DNS0		3
#define T_DNS1		4
a51 5
 * f_action and f_proto only need to be 6 and 3 bits, respectively,
 * but making them 8 bits allows them to be efficently accessed using
 * byte operations as well as allowing space for future expansion
 * (expanding MAXFILTERS or converting f_proto IPPROTO_... values).
 *
d56 2
a57 2
  unsigned f_action : 8;		/* Filtering action: goto or A_... */
  unsigned f_proto : 8;		/* Protocol: P_... */
d66 2
a67 2
  struct in_range f_src;	/* Source address and mask */
  struct in_range f_dst;	/* Destination address and mask */
a95 2
extern int ParseAddr(struct ipcp *, const char *, struct in_addr *,
                     struct in_addr *, int *);
a98 1
extern const char *filter_Proto2Nam(int);
d100 2
a101 3
extern struct in_addr bits2mask(int);
extern void filter_AdjustAddr(struct filter *, struct in_addr *,
                              struct in_addr *, struct in_addr [2]);
@


1.13
log
@Show the correct dial timeout when a random pause is configured
Understand ipencap traffic properly
Optimise out SIOCIFADDR ioctls that aren't necessary
Handle peers that don't send an initial IFADDR option during IPCP negotiations
Fix markup for the /etc/ttys example
Always use 4 arguments in examples of ``set ifaddr''
@
text
@d1 5
a5 2
/*
 *	    Written by Toshiharu OHNO (tony-o@@iij.ad.jp)
d7 8
a14 1
 *   Copyright (C) 1993, Internet Initiative Japan, Inc. All rights reserverd.
d16 11
a26 11
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the Internet Initiative Japan.  The name of the
 * IIJ may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
d28 1
a28 3
 * $OpenBSD: filter.h,v 1.12 2000/09/14 18:04:13 brian Exp $
 *
 *	TODO:
@


1.12
log
@Understand IPPROTO_ESP and IPPROTO_AH packets

Submitted by: Angelos D. Keromytis <angelos@@dsl.cis.upenn.edu>
@
text
@d18 1
a18 1
 * $OpenBSD: filter.h,v 1.11 2000/07/11 22:13:03 brian Exp $
d33 1
a33 1
#define P_GRE   6
d35 3
a37 2
#define P_ESP   7
#define P_AH    8
@


1.11
log
@Allow a ``timeout secs'' filter option to let specific packet types
effect the idle timer in different ways.

Submitted by: Stefan Esser <se@@freebsd.org>

With adjustments by me to document the option in the man page and to
give the same semantics for outgoing traffic as incoming.

I made the style more consistent in ip.c - this should really have
been done as a separate commit.
@
text
@d18 1
a18 1
 * $OpenBSD: filter.h,v 1.10 2000/03/19 10:33:33 brian Exp $
d35 2
@


1.10
log
@Allow environment variables on command/config lines; markk@@knigma.org
Add the ``resolv'' command so that when ``enable dns''
is used, it's possible to restore the file.
@
text
@d18 1
a18 1
 * $OpenBSD: filter.h,v 1.9 2000/02/27 01:38:26 brian Exp $
d78 1
@


1.9
log
@$Id$ -> $OpenBSD$
@
text
@d18 1
a18 1
 * $OpenBSD: filter.h,v 1.8 2000/01/07 03:26:54 brian Exp $
d46 2
d68 2
a69 2
  unsigned f_srctype : 2;	/* T_ value of src */
  unsigned f_dsttype : 2;	/* T_ value of dst */
d112 1
a112 1
                              struct in_addr *);
@


1.8
log
@Upgrade from 2.23 -> 2.26
I'll follow up with a list of changes (too big for a commit message IMHO)
@
text
@d18 1
a18 1
 * $Id: filter.h,v 1.7 1999/08/02 15:28:47 brian Exp $
@


1.7
log
@Filter ospf and igmp separately.

Kind-of submitted by: phk@@FreeBSD.org
@
text
@d18 1
a18 1
 * $Id: filter.h,v 1.6 1999/07/27 23:47:21 brian Exp $
d32 3
@


1.6
log
@o Overhaul filtering, adding facilities to jump over rules and to
  negate the sense of rules.
o Remove the redundant (and undocumented) ``host'' and ``port''
  words (README.changes updated).
o Don't permit (and ignore) garbage instead of the protocol.

Mostly submitted by:  Peter Jeremy <jeremyp@@gsmx07.alcatel.com.au>
@
text
@d18 1
a18 1
 * $Id: filter.h,v 1.5 1999/06/23 16:49:03 brian Exp $
d28 4
a31 1
#define P_IGMP	4
@


1.5
log
@Support `igmp' filters.
Mostly submitted by: Timo Geusch <freebsd@@sleepycat.ukpeople.net>
@
text
@d18 1
a18 1
 * $Id: filter.h,v 1.4 1999/05/31 23:57:37 brian Exp $
d23 1
a23 9
/* Actions */
#define	A_NONE		0
#define	A_PERMIT	1
#define	A_DENY		2
#define	A_MASK		3
#define	A_UHOST		4
#define	A_UPORT		8

/* Known protocols */
d30 1
a30 1
/* Operations */
d34 1
a34 1
#define	OP_LT	4
d41 14
d56 14
a69 15
  int action;			/* Filtering action */
  unsigned srctype : 2;		/* T_ value of src */
  struct in_range src;		/* Source address */
  unsigned dsttype : 2;		/* T_ value of dst */
  struct in_range dst;		/* Destination address */
  int proto;			/* Protocol */
  struct {
    short srcop;
    u_short srcport;
    short dstop;
    u_short dstport;
    unsigned estab : 1;
    unsigned syn : 1;
    unsigned finrst : 1;
  } opt;
d72 6
a77 1
#define	MAXFILTERS		40	/* in each filter set */
d86 1
@


1.4
log
@Remember if MYADDR or HISADDR is used in a filter add tweak all
filters any time either value changes.
@
text
@d18 1
a18 1
 * $Id: filter.h,v 1.3 1999/02/06 03:22:36 brian Exp $
d36 1
@


1.3
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d18 1
a18 1
 * $Id: filter.h,v 1.14 1999/01/28 01:56:31 brian Exp $
d23 1
a23 3
/*
 *   Actions
 */
d31 1
a31 3
/*
 *   Known protocols
 */
d37 1
a37 3
/*
 *   Operations
 */
d43 5
d50 4
a53 6
  int swidth;			/* Effective source address width */
  struct in_addr saddr;		/* Source address */
  struct in_addr smask;		/* Source address mask */
  int dwidth;			/* Effective destination address width */
  struct in_addr daddr;		/* Destination address */
  struct in_addr dmask;		/* Destination address mask */
d91 2
@


1.2
log
@Change the maximum number of filters from 20 to 40.
Increase requested by: "Clement T. Cole" <clemc@@echo.ccc.com>
@
text
@d18 1
a18 1
 * $Id: filter.h,v 1.1 1998/08/31 00:22:20 brian Exp $
d86 1
a86 1
extern int ParseAddr(struct ipcp *, int, char const *const *, struct in_addr *,
d93 1
@


1.1
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@d18 1
a18 1
 * $Id: filter.h,v 1.12 1998/05/21 21:45:16 brian Exp $
d69 1
a69 1
#define	MAXFILTERS		20	/* in each filter set */
@

