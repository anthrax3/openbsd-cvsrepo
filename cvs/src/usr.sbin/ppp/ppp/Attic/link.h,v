head	1.9;
access;
symbols
	OPENBSD_5_5:1.8.0.40
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.36
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.34
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.32
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.30
	OPENBSD_5_0:1.8.0.28
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.26
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.24
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.20
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.22
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.18
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.16
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.14
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.12
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.10
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.8
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.7.0.18
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.16
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.14
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.12
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.10
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.8
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.6
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.4
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.8;

1.8
date	2004.11.16.14.47.02;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.15.10.08.50;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	2000.02.27.01.38.27;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.07.03.26.54;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	99.05.15.02.25.23;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	99.05.08.11.06.36;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.02.06.03.22.41;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.00.22.23;	author brian;	state Exp;
branches;
next	;


desc
@@


1.9
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1998 Brian Somers <brian@@Awfulhak.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *  $OpenBSD: link.h,v 1.8 2004/11/16 14:47:02 brad Exp $
 *
 */


#define PHYSICAL_LINK	1
#define LOGICAL_LINK	2

#define NPROTOSTAT 13

struct bundle;
struct prompt;
struct cmdargs;

struct link {
  int type;                               /* _LINK type */
  const char *name;                       /* Points to datalink::name */
  int len;                                /* full size of parent struct */
  struct {
    unsigned gather : 1;                  /* Gather statistics ourself ? */
    struct pppThroughput total;           /* Link throughput statistics */
    struct pppThroughput *parent;         /* MP link throughput statistics */
  } stats;
  struct mqueue Queue[2];                 /* Our output queue of mbufs */

  u_long proto_in[NPROTOSTAT];            /* outgoing protocol stats */
  u_long proto_out[NPROTOSTAT];           /* incoming protocol stats */

  struct lcp lcp;                         /* Our line control FSM */
  struct ccp ccp;                         /* Our compression FSM */

  struct layer const *layer[LAYER_MAX];   /* i/o layers */
  int nlayers;
};

#define LINK_QUEUES(link) (sizeof (link)->Queue / sizeof (link)->Queue[0])
#define LINK_HIGHQ(link) ((link)->Queue + LINK_QUEUES(link) - 1)

extern void link_SequenceQueue(struct link *);
extern void link_DeleteQueue(struct link *);
extern size_t link_QueueLen(struct link *);
extern size_t link_QueueBytes(struct link *);
extern void link_PendingLowPriorityData(struct link *, size_t *, size_t *);
extern struct mbuf *link_Dequeue(struct link *);

extern void link_PushPacket(struct link *, struct mbuf *, struct bundle *,
                            int, u_short);
extern void link_PullPacket(struct link *, char *, size_t, struct bundle *);
extern int link_Stack(struct link *, struct layer *);
extern void link_EmptyStack(struct link *);

#define PROTO_IN  1                       /* third arg to link_ProtocolRecord */
#define PROTO_OUT 2
extern void link_ProtocolRecord(struct link *, u_short, int);
extern void link_ReportProtocolStatus(struct link *, struct prompt *);
extern int link_ShowLayers(struct cmdargs const *);
@


1.8
log
@Re-implement LQM, this time according to the rfc.

From FreeBSD

ok deraadt@@
@
text
@d26 1
a26 1
 *  $OpenBSD: link.h,v 1.7 2000/08/15 10:08:50 brian Exp $
@


1.7
log
@Calculate the average link throughput using a counter based on the
cumulative total of all active links rather than basing it on the
total of PROTO_MP traffic.

This fixes a problem whereby Cisco routers send PROTO_IP packets only
when there's only one link (hmm, what a good idea!).
@
text
@d26 1
a26 1
 *  $OpenBSD: link.h,v 1.6 2000/02/27 01:38:27 brian Exp $
d68 1
@


1.6
log
@$Id$ -> $OpenBSD$
@
text
@d26 1
a26 1
 *  $OpenBSD: link.h,v 1.5 2000/01/07 03:26:54 brian Exp $
d44 5
a48 1
  struct pppThroughput throughput;        /* Link throughput statistics */
a62 3

extern void link_AddInOctets(struct link *, int);
extern void link_AddOutOctets(struct link *, int);
@


1.5
log
@Upgrade from 2.23 -> 2.26
I'll follow up with a list of changes (too big for a commit message IMHO)
@
text
@d26 1
a26 1
 *  $Id: link.h,v 1.4 1999/05/15 02:25:23 brian Exp $
@


1.4
log
@Add ``show layers'' to see the protocol layering for a link.
@
text
@d26 1
a26 1
 *  $Id: link.h,v 1.3 1999/05/08 11:06:36 brian Exp $
a33 1
#define LINK_QUEUES (PRI_MAX + 1)
d45 1
a45 1
  struct mqueue Queue[LINK_QUEUES];       /* Our output queue of mbufs */
d57 3
d65 2
a66 2
extern int link_QueueLen(struct link *);
extern int link_QueueBytes(struct link *);
@


1.3
log
@o Redesign the layering mechanism and make the aliasing code part of
  the layering.

  We now ``stack'' layers as soon as we open the device (when we figure
  out what we're dealing with).  A static set of `dispatch' routines are
  also declared for dealing with incoming packets after they've been
  `pulled' up through the stacked layers.

  Physical devices are now assigned handlers based on the device type
  when they're opened.  For the moment there are three device types;
  ttys, execs and tcps.

o Increment version number to 2.2
o Make an entry in [uw]tmp for non-tty -direct invocations (after
  pap/chap authentication).
o Make throughput counters quad_t's
o Account for the absolute number of mbuf malloc()s and free()s in
  ``show mem''.
o ``show modem'' becomes ``show physical''.
@
text
@d26 1
a26 1
 *  $Id: link.h,v 1.2 1999/02/06 03:22:41 brian Exp $
d39 1
d77 1
@


1.2
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d26 1
a26 1
 *  $Id: link.h,v 1.4 1998/08/25 17:48:42 brian Exp $
d31 2
a32 2
#define PHYSICAL_LINK 1
#define MP_LINK       2
d52 3
d65 6
a70 3
extern void link_Write(struct link *, int, const char *, int);
extern void link_StartOutput(struct link *, struct bundle *);
extern void link_Output(struct link *, int, struct mbuf *);
@


1.1
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@@

