head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.40
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.36
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.34
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.32
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.30
	OPENBSD_5_0:1.6.0.28
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.26
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.24
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.20
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.22
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.18
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.16
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.14
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.12
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.10
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.8
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.5.0.18
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.16
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.14
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.12
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.10
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.8
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2004.11.16.14.47.02;	author brad;	state Exp;
branches;
next	1.5;

1.5
date	2000.07.19.11.06.30;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.27.01.38.24;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.07.03.26.52;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.06.02.15.58.39;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	99.05.08.11.06.32;	author brian;	state Exp;
branches;
next	;


desc
@@


1.7
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1999 Brian Somers <brian@@Awfulhak.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$OpenBSD: acf.c,v 1.6 2004/11/16 14:47:02 brad Exp $
 */

#include <sys/types.h>

#include <stdio.h>
#include <termios.h>

#include "defs.h"
#include "layer.h"
#include "timer.h"
#include "fsm.h"
#include "log.h"
#include "mbuf.h"
#include "acf.h"
#include "proto.h"
#include "throughput.h"
#include "lqr.h"
#include "hdlc.h"
#include "lcp.h"
#include "ccp.h"
#include "link.h"
#include "descriptor.h"
#include "async.h"
#include "physical.h"

int
acf_WrapperOctets(struct lcp *lcp, u_short proto)
{
  return (proto == PROTO_LCP || lcp->his_acfcomp == 0) ? 2 : 0;
}

static struct mbuf *
acf_LayerPush(struct bundle *b, struct link *l, struct mbuf *bp,
              int pri, u_short *proto)
{
  const u_char cp[2] = { HDLC_ADDR, HDLC_UI };

  if (*proto == PROTO_LCP || l->lcp.his_acfcomp == 0) {
    bp = m_prepend(bp, cp, 2, 0);
    m_settype(bp, MB_ACFOUT);
  }

  return bp;
}

static struct mbuf *
acf_LayerPull(struct bundle *b, struct link *l, struct mbuf *bp, u_short *proto)
{
  struct physical *p = link2physical(l);
  u_char cp[2];

  if (!p) {
    log_Printf(LogERROR, "Can't Pull an acf packet from a logical link\n");
    return bp;
  }

  if (mbuf_View(bp, cp, 2) == 2) {
    if (!p->link.lcp.want_acfcomp) {
      /* We expect the packet not to be compressed */
      bp = mbuf_Read(bp, cp, 2);
      if (cp[0] != HDLC_ADDR) {
        p->hdlc.lqm.ifInErrors++;
        p->hdlc.stats.badaddr++;
        log_Printf(LogDEBUG, "acf_LayerPull: addr 0x%02x\n", cp[0]);
        m_freem(bp);
        return NULL;
      }
      if (cp[1] != HDLC_UI) {
        p->hdlc.lqm.ifInErrors++;
        p->hdlc.stats.badcommand++;
        log_Printf(LogDEBUG, "acf_LayerPull: control 0x%02x\n", cp[1]);
        m_freem(bp);
        return NULL;
      }
      m_settype(bp, MB_ACFIN);
    } else if (cp[0] == HDLC_ADDR && cp[1] == HDLC_UI) {
      /*
       * We can receive compressed packets, but the peer still sends
       * uncompressed packets (or maybe this is a PROTO_LCP packet) !
       */
      bp = mbuf_Read(bp, cp, 2);
      m_settype(bp, MB_ACFIN);
    }
  }

  return bp;
}

struct layer acflayer = { LAYER_ACF, "acf", acf_LayerPush, acf_LayerPull };
@


1.6
log
@Re-implement LQM, this time according to the rfc.

From FreeBSD

ok deraadt@@
@
text
@d26 1
a26 1
 *	$OpenBSD: acf.c,v 1.5 2000/07/19 11:06:30 brian Exp $
@


1.5
log
@Support link identification from rfc1570
Add VERSION and COMPILATIONDATE macros
Two new commands are available; ``ident'' and ``sendident''.
@
text
@d26 1
a26 1
 *	$OpenBSD: acf.c,v 1.4 2000/02/27 01:38:24 brian Exp $
d88 1
a88 1
        p->hdlc.lqm.SaveInErrors++;
d95 1
a95 1
        p->hdlc.lqm.SaveInErrors++;
@


1.4
log
@$Id$ -> $OpenBSD$
@
text
@d26 1
a26 1
 *	$OpenBSD: acf.c,v 1.3 2000/01/07 03:26:52 brian Exp $
a41 1
#include "lcp.h"
d45 1
@


1.3
log
@Upgrade from 2.23 -> 2.26
I'll follow up with a list of changes (too big for a commit message IMHO)
@
text
@d26 1
a26 1
 *	$Id: acf.c,v 1.2 1999/06/02 15:58:39 brian Exp $
@


1.2
log
@o Alter the mbuf type as it's processed by different layers.
o Show more information about missing MP fragments in ``show mp''.
o Do away with mbuf_Log().  It was showing mbuf stats twice on
  receipt of LCP/CCP/IPCP packets.... ???!!?
o Pre-allocate a bit extra when creating LQR packets to avoid having
  to allocate another mbuf in mbuf_Prepend().
@
text
@d26 1
a26 1
 *	$Id: acf.c,v 1.1 1999/05/08 11:06:32 brian Exp $
d65 2
a66 2
    bp = mbuf_Prepend(bp, cp, 2, 0);
    mbuf_SetType(bp, MB_ACFOUT);
d91 1
a91 1
        mbuf_Free(bp);
d98 1
a98 1
        mbuf_Free(bp);
d101 1
a101 1
      mbuf_SetType(bp, MB_ACFIN);
d108 1
a108 1
      mbuf_SetType(bp, MB_ACFIN);
@


1.1
log
@o Redesign the layering mechanism and make the aliasing code part of
  the layering.

  We now ``stack'' layers as soon as we open the device (when we figure
  out what we're dealing with).  A static set of `dispatch' routines are
  also declared for dealing with incoming packets after they've been
  `pulled' up through the stacked layers.

  Physical devices are now assigned handlers based on the device type
  when they're opened.  For the moment there are three device types;
  ttys, execs and tcps.

o Increment version number to 2.2
o Make an entry in [uw]tmp for non-tty -direct invocations (after
  pap/chap authentication).
o Make throughput counters quad_t's
o Account for the absolute number of mbuf malloc()s and free()s in
  ``show mem''.
o ``show modem'' becomes ``show physical''.
@
text
@d26 1
a26 1
 *	$Id:$
d64 1
a64 1
  if (*proto == PROTO_LCP || l->lcp.his_acfcomp == 0)
d66 2
d101 1
d108 1
@

