head	1.10;
access;
symbols
	OPENBSD_5_5:1.9.0.50
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.46
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.44
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.42
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.40
	OPENBSD_5_0:1.9.0.38
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.36
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.34
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.30
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.32
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.28
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.26
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.24
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.22
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.20
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.18
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.16
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.14
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.12
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.10
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.8
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.6
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.6
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.9;

1.9
date	2002.05.16.01.13.39;	author brian;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.13.21.33.40;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	2000.02.27.01.38.24;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	99.02.26.21.28.19;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	99.02.18.00.50.44;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	99.02.06.03.22.31;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	99.02.02.09.49.57;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.02.01.13.50.27;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.00.22.16;	author brian;	state Exp;
branches;
next	;


desc
@@


1.10
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1996 - 2001 Brian Somers <brian@@Awfulhak.org>
 *          based on work by Toshiharu OHNO <tony-o@@iij.ad.jp>
 *                           Internet Initiative Japan, Inc (IIJ)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $OpenBSD: auth.h,v 1.9 2002/05/16 01:13:39 brian Exp $
 */

struct physical;
struct bundle;
struct authinfo;
typedef void (*auth_func)(struct authinfo *);

struct authinfo {
  struct {
    auth_func req;
    auth_func success;
    auth_func failure;
  } fn;
  struct {
    struct fsmheader hdr;
    char name[AUTHLEN];
  } in;
  struct pppTimer authtimer;
  int retry;
  int id;
  struct physical *physical;
  struct {
    struct fsm_retry fsm;	/* How often/frequently to resend requests */
  } cfg;
};

#define auth_Failure(a) (*(a)->fn.failure)(a)
#define auth_Success(a) (*(a)->fn.success)(a)

extern const char *Auth2Nam(u_short, u_char);
extern void auth_Init(struct authinfo *, struct physical *,
                      auth_func, auth_func, auth_func);
extern void auth_StopTimer(struct authinfo *);
extern void auth_StartReq(struct authinfo *);
extern int auth_Validate(struct bundle *, const char *, const char *,
                         struct physical *);
extern char *auth_GetSecret(struct bundle *, const char *, int,
                            struct physical *);
extern int auth_SetPhoneList(const char *, char *, int);
extern int auth_Select(struct bundle *, const char *);
extern struct mbuf *auth_ReadHeader(struct authinfo *, struct mbuf *);
extern struct mbuf *auth_ReadName(struct authinfo *, struct mbuf *, int);
@


1.9
log
@o Bump the version number
o Tidy up includes
o Fix macros in auth.h
o Insist on context for ``set mru'' in MP mode
o Usage -> usage
o Don't intialise after processing config requests
o Show FSM values for ConfigAcks
o Make ident output prettier
o Fix some Id keywords
o Handle RADIUS pool address 255.255.255.254
o Support RADIUS Session-Timeout attributes
o Support RADIUS Reply-Message attributes
o Support RADIUS CHAP-Error attributes
o Store RADIUS Filter-Id attributes
o Provide a NAS-Port-Type attribute to RADIUS servers
o Provide a better NAS-Port attribute to RADIUS servers
o Support MS-CHAP with RADIUS
o Improve FSM decode functions
o Support an OCTETSIN variable
o Support an OCTETSOUT variable
o Support an PACKETSIN variable
o Support an PACKETSOUT variable
o Support an IPOCTETSIN variable
o Support an IPOCTETSOUT variable
o Support an IPPACKETSIN variable
o Support an IPPACKETSOUT variable
o Support an IPV6OCTETSIN variable
o Support an IPV6OCTETSOUT variable
o Support an IPV6PACKETSIN variable
o Support an IPV6PACKETSOUT variable
o Support a SOCKNAME variable
@
text
@d28 1
a28 1
 * $OpenBSD: auth.h,v 1.8 2001/06/13 21:33:40 brian Exp $
@


1.8
log
@Convert IIJ copyrights to BSD copyrights; ok tohno@@sirius.ocn.ne.jp
@
text
@d28 1
a28 1
 * $OpenBSD$
d55 2
a56 2
#define auth_Failure(a) (*a->fn.failure)(a);
#define auth_Success(a) (*a->fn.success)(a);
@


1.7
log
@$Id$ -> $OpenBSD$
@
text
@d1 5
a5 2
/*
 *	    Written by Toshiharu OHNO (tony-o@@iij.ad.jp)
d7 8
a14 1
 *   Copyright (C) 1993, Internet Initiative Japan, Inc. All rights reserverd.
d16 11
a26 11
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the Internet Initiative Japan.  The name of the
 * IIJ may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
d28 1
a28 3
 * $OpenBSD: auth.h,v 1.6 1999/02/26 21:28:19 brian Exp $
 *
 *	TODO:
@


1.6
log
@Allow control over the number of ConfigREQ & TermREQ attempts
that are made in each of the FSMs (LCP, CCP & IPCP) and the
number of REQs/Challenges for PAP/CHAP by accepting more arguments
in the ``set {c,ip,l}cpretry'' and ``set {ch,p}apretry'' commands.

Change the non-convergence thresholds to 3 times the number of configured
REQ tries (rather than the previous fixed ``10'').  We now notice
repeated NAKs and REJs rather than just REQs.

Don't suggest that CHAP 0x05 isn't supported when it's not configured.

Fix some bugs that expose themselves with smaller numbers of retries:
o Handle instantaneous disconnects (set device /dev/null) correctly
  by stopping all fsm timers in fsm2initial.
o Don't forget to uu_unlock() devices that are files but are not
  ttys (set device /dev/zero).

Fix a *HORRENDOUS* bug in RFC1661 (already fixed for an Open event in state
``Closed''):
  According to the state transition table, a RCR+ or RCR- received in
  the ``Stopped'' state are supposed to InitRestartCounter, SendConfigReq
  and SendConfig{Ack,Nak}.  However, in ``Stopped'', we haven't yet
  done a TLS (or the last thing we did is a TLF).  We must therefore
  do the TLS at this point !

  This was never noticed before because LCP and CCP used not use
  LayerStart() for anything interesting, and IPCP tends to go into
  Stopped then get a Down because of an LCP RTR rather than getting a
  RCR again.
@
text
@d18 1
a18 1
 * $Id: auth.h,v 1.5 1999/02/18 00:50:44 brian Exp $
@


1.5
log
@Fully support both NT and LANMan CHAP type 0x80 as both
authenticator and authenticatee.
@
text
@d18 1
a18 1
 * $Id: auth.h,v 1.4 1999/02/06 03:22:31 brian Exp $
d43 1
a43 1
    u_int fsmretry;
@


1.4
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d18 1
a18 1
 * $Id: auth.h,v 1.14 1999/02/02 09:35:17 brian Exp $
d50 1
a50 1
extern const char *Auth2Nam(u_short);
@


1.3
log
@Reimplement the previous fix (no response to PAP requests)
at the authentication layer rather than at the PAP layer
so that it also applies to CHAP (no response to CHAP
challenges).
@
text
@d18 1
a18 1
 * $Id: auth.h,v 1.2 1999/02/01 13:50:27 brian Exp $
d25 2
d29 9
a37 1
  void (*ChallengeFunc)(struct authinfo *, int, struct physical *);
d47 3
d51 2
a52 2

extern void auth_Init(struct authinfo *);
d54 1
a54 3
extern void auth_StartChallenge(struct authinfo *, struct physical *,
                                void (*)(struct authinfo *, int,
                                         struct physical *));
d61 2
@


1.2
log
@If we receive no answer from the server when sending PAP
requests, give up (don't sit there indefinitely).
@
text
@d18 1
a18 1
 * $Id: auth.h,v 1.1 1998/08/31 00:22:16 brian Exp $
a27 1
  void (*FailedFunc)(struct physical *);
d43 1
a43 2
                                         struct physical *),
                                void (*)(struct physical *));
@


1.1
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@d18 1
a18 1
 * $Id: auth.h,v 1.12 1998/08/07 18:42:47 brian Exp $
d28 1
d43 3
a45 2
                                void (*fn)(struct authinfo *, int,
                                struct physical *));
@

