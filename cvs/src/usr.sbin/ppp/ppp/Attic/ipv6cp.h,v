head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.36
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.32
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.30
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.28
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.26
	OPENBSD_5_0:1.3.0.24
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.22
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.20
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.16
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.18
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.14
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.12
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.10
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.14
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.12
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.10
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.0.4
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2005.09.19.18.55.32;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.01.11.14.36;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.19.23.22.18;	author brian;	state Exp;
branches;
next	;


desc
@@


1.4
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 2001 Brian Somers <brian@@Awfulhak.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $OpenBSD: ipv6cp.h,v 1.3 2005/09/19 18:55:32 brad Exp $
 */

#ifndef NOINET6
#define	IPV6CP_MAXCODE	CODE_CODEREJ

#define	TY_TOKEN	1
#define	TY_COMPPROTO	2

#define	IPV6CP_IFIDLEN	8		/* RFC2472 */

struct ipv6cp {
  struct fsm fsm;			/* The finite state machine */

  struct {
    struct fsm_retry fsm;		/* frequency to resend requests */
  } cfg;

  unsigned peer_tokenreq : 1;		/* Any TY_TOKEN REQs from the peer ? */

  u_char my_ifid[IPV6CP_IFIDLEN];	/* Local Interface Identifier */
  u_char his_ifid[IPV6CP_IFIDLEN];	/* Peer Interface Identifier */

  struct ncpaddr myaddr;		/* Local address */
  struct ncpaddr hisaddr;		/* Peer address */

  u_int32_t his_reject;			/* Request codes rejected by peer */
  u_int32_t my_reject;			/* Request codes I have rejected */

  struct pppThroughput throughput;	/* throughput statistics */
  struct mqueue Queue[2];		/* Output packet queues */
};

#define fsm2ipv6cp(fp) (fp->proto == PROTO_IPV6CP ? (struct ipv6cp *)fp : NULL)
#define IPV6CP_QUEUES(ipv6cp) (sizeof ipv6cp->Queue / sizeof ipv6cp->Queue[0])

struct bundle;
struct link;
struct cmdargs;
struct iface_addr;

extern void ipv6cp_Init(struct ipv6cp *, struct bundle *, struct link *,
                        const struct fsm_parent *);
extern void ipv6cp_Destroy(struct ipv6cp *);
extern void ipv6cp_Setup(struct ipv6cp *);
extern void ipv6cp_SetLink(struct ipv6cp *, struct link *);

extern int  ipv6cp_Show(struct cmdargs const *);
extern struct mbuf *ipv6cp_Input(struct bundle *, struct link *, struct mbuf *);
extern void ipv6cp_AddInOctets(struct ipv6cp *, int);
extern void ipv6cp_AddOutOctets(struct ipv6cp *, int);

extern void ipv6cp_IfaceAddrAdded(struct ipv6cp *, const struct iface_addr *);
extern void ipv6cp_IfaceAddrDeleted(struct ipv6cp *, const struct iface_addr *);
extern int  ipv6cp_InterfaceUp(struct ipv6cp *);
extern size_t ipv6cp_QueueLen(struct ipv6cp *);
extern int ipv6cp_PushPacket(struct ipv6cp *, struct link *);
#endif
@


1.3
log
@rev 1.8

made ppp compliant to RFC 2472 (based on a patch from another
contributor)

rev 1.10

Once ppp session is over, the route to ff02::tun0/32 was
deleted, and never came back.  Now, the route to
ff02::tun0/32 is installed at the end of IPV6CP negitiaton.

From FreeBSD

Tested by aanriot@@ and a few end-users
@
text
@d26 1
a26 1
 * $OpenBSD: ipv6cp.h,v 1.2 2002/07/01 11:14:36 brian Exp $
@


1.2
log
@typo
@
text
@d26 1
a26 1
 * $OpenBSD$
d35 2
d46 2
a47 2
  u_int32_t my_token;			/* Token I'm willing to use */
  u_int32_t peer_token;			/* Token he's willing to use */
@


1.1
log
@Add IPv6 support.

IPV6CP support is crude for now, and hasn't been tested against
any other implementations.  RADIUS and IPv6 are independent of
eachother for now.  ppp.linkup/ppp.linkdown aren't currently used
by IPV6CP

Understand all protocols(5) in filter rules rather than only a select
few.

Allow a mask specification for the ``delete'' command.  It's now
possible to specifically delete one of two conflicting routes.

When creating and deleting proxy arp entries, do it for all IPv4
interface addresses rather than doing it just for the ``current''
peer address.

When iface-alias isn't in effect, don't blow away manually (via ``iface
add'') added interface addresses.

When listening on a tcp server (diagnostic) socket, bind so that a
tcp46 socket is created -- allowing both IPv4 and IPv6 connections.

When displaying ICMP traffic, don't display the icmp type twice.

When display traffic, display at least some information about unrecognised
traffic.

Bump version
@
text
@d26 1
a26 1
 * $FreeBSD$
@

