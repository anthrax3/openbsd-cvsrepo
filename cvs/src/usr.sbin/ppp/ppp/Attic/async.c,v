head	1.14;
access;
symbols
	OPENBSD_5_5:1.13.0.38
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.34
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.32
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.30
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.28
	OPENBSD_5_0:1.13.0.26
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.24
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.22
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.18
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.20
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.16
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.14
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.12
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.10
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.8
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.6
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.4
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.2
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.11.0.12
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.10
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.8
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.6
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.14
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.13;

1.13
date	2005.07.17.20.24.45;	author brad;	state Exp;
branches;
next	1.12;

1.12
date	2004.11.16.14.47.02;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.31.02.38.49;	author brian;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.04.10.17.40;	author brian;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.13.21.33.40;	author brian;	state Exp;
branches;
next	1.8;

1.8
date	2000.02.27.01.38.24;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.07.03.26.52;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	99.06.02.15.58.40;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	99.05.12.10.03.48;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	99.05.08.11.06.33;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	99.04.19.16.59.38;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.02.06.03.22.31;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.00.22.15;	author brian;	state Exp;
branches;
next	;


desc
@@


1.14
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1996 - 2001 Brian Somers <brian@@Awfulhak.org>
 *          based on work by Toshiharu OHNO <tony-o@@iij.ad.jp>
 *                           Internet Initiative Japan, Inc (IIJ)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $OpenBSD: async.c,v 1.13 2005/07/17 20:24:45 brad Exp $
 */

#include <sys/types.h>

#include <string.h>
#include <termios.h>

#include "layer.h"
#include "mbuf.h"
#include "log.h"
#include "defs.h"
#include "timer.h"
#include "fsm.h"
#include "lqr.h"
#include "hdlc.h"
#include "lcp.h"
#include "proto.h"
#include "async.h"
#include "throughput.h"
#include "ccp.h"
#include "link.h"
#include "descriptor.h"
#include "physical.h"

#define MODE_HUNT 0x01
#define MODE_ESC  0x02

void
async_Init(struct async *async)
{
  async_Setup(async);
  memset(async->cfg.EscMap, '\0', sizeof async->cfg.EscMap);
}

void
async_Setup(struct async *async)
{
  async->mode = MODE_HUNT;
  async->length = 0;
  async->my_accmap = async->his_accmap = 0xffffffff;
}

void
async_SetLinkParams(struct async *async, u_int32_t mymap, u_int32_t hismap)
{
  async->my_accmap = mymap;
  async->his_accmap = hismap | mymap;
}

/*
 * Encode into async HDLC byte code
 */
static void
async_Encode(struct async *async, u_char **cp, u_char c, int proto)
{
  u_char *wp;

  wp = *cp;
  if ((c < 0x20 && (proto == PROTO_LCP || (async->his_accmap & (1 << c))))
      || (c == HDLC_ESC) || (c == HDLC_SYN)) {
    *wp++ = HDLC_ESC;
    c ^= HDLC_XOR;
  }
  if (async->cfg.EscMap[32] && async->cfg.EscMap[c >> 3] & (1 << (c & 7))) {
    *wp++ = HDLC_ESC;
    c ^= HDLC_XOR;
  }
  *wp++ = c;
  *cp = wp;
}

static struct mbuf *
async_LayerPush(struct bundle *bundle, struct link *l, struct mbuf *bp,
                int pri, u_short *proto)
{
  struct physical *p = link2physical(l);
  u_char *cp, *sp, *ep;
  struct mbuf *wp;
  size_t oldcnt;
  int cnt;

  if (!p || m_length(bp) > HDLCSIZE) {
    m_freem(bp);
    return NULL;
  }

  oldcnt = m_length(bp);

  cp = p->async.xbuff;
  ep = cp + HDLCSIZE - 10;
  wp = bp;
  *cp++ = HDLC_SYN;
  while (wp) {
    sp = MBUF_CTOP(wp);
    for (cnt = wp->m_len; cnt > 0; cnt--) {
      async_Encode(&p->async, &cp, *sp++, *proto);
      if (cp >= ep) {
	m_freem(bp);
	return NULL;
      }
    }
    wp = wp->m_next;
  }
  *cp++ = HDLC_SYN;

  cnt = cp - p->async.xbuff;
  m_freem(bp);
  bp = m_get(cnt, MB_ASYNCOUT);
  memcpy(MBUF_CTOP(bp), p->async.xbuff, cnt);
  bp->priv = cnt - oldcnt;
  log_DumpBp(LogASYNC, "Write", bp);

  return bp;
}

static struct mbuf *
async_Decode(struct async *async, u_char c)
{
  struct mbuf *bp;

  if ((async->mode & MODE_HUNT) && c != HDLC_SYN)
    return NULL;

  switch (c) {
  case HDLC_SYN:
    async->mode &= ~MODE_HUNT;
    if (async->length) {		/* packet is ready. */
      bp = m_get(async->length, MB_ASYNCIN);
      mbuf_Write(bp, async->hbuff, async->length);
      async->length = 0;
      return bp;
    }
    break;
  case HDLC_ESC:
    if (!(async->mode & MODE_ESC)) {
      async->mode |= MODE_ESC;
      break;
    }
    /* FALLTHROUGH */
  default:
    if (async->length >= HDLCSIZE) {
      /* packet is too large, discard it */
      log_Printf(LogWARN, "Packet too large (%d), discarding.\n",
                 async->length);
      async->length = 0;
      async->mode = MODE_HUNT;
      break;
    }
    if (async->mode & MODE_ESC) {
      c ^= HDLC_XOR;
      async->mode &= ~MODE_ESC;
    }
    async->hbuff[async->length++] = c;
    break;
  }
  return NULL;
}

static struct mbuf *
async_LayerPull(struct bundle *b, struct link *l, struct mbuf *bp,
                u_short *proto)
{
  struct mbuf *nbp, **last;
  struct physical *p = link2physical(l);
  u_char *ch;
  size_t cnt;

  if (!p) {
    log_Printf(LogERROR, "Can't Pull an async packet from a logical link\n");
    return bp;
  }

  last = &nbp;

  log_DumpBp(LogASYNC, "Read", bp);
  while (bp) {
    ch = MBUF_CTOP(bp);
    for (cnt = bp->m_len; cnt; cnt--) {
      *last = async_Decode(&p->async, *ch++);
      if (*last != NULL)
        last = &(*last)->m_nextpkt;
    }
    bp = m_free(bp);
  }

  return nbp;
}

struct layer asynclayer =
  { LAYER_ASYNC, "async", async_LayerPush, async_LayerPull };
@


1.13
log
@Replace various spelling with FALLTHROUGH which is lint()able

From charnier FreeBSD
@
text
@d28 1
a28 1
 * $OpenBSD: async.c,v 1.12 2004/11/16 14:47:02 brad Exp $
@


1.12
log
@Re-implement LQM, this time according to the rfc.

From FreeBSD

ok deraadt@@
@
text
@d28 1
a28 1
 * $OpenBSD: async.c,v 1.11 2002/03/31 02:38:49 brian Exp $
d167 1
a167 1
    /* Fall into ... */
@


1.11
log
@Change ``ifdef HAVE_DES'' to ``ifndef NODES'' for consistency.
Notice if the IP header length changes when doing transparent proxying; FreeBSD
Handle domain\\user entries in ppp.secret
Add some mp_Down() calls to ensure that our multi-link NCP goes away properly
Miscellaneous #ifdef'd out FreeBSD changes (mostly netgraph stuff).
@
text
@d28 1
a28 1
 * $OpenBSD: async.c,v 1.10 2002/03/04 10:17:40 brian Exp $
d107 1
d115 2
d138 1
@


1.10
log
@Don't blow away ``set escape'' settings when we've completed the
login phase.  Just initialise the correct parts
@
text
@d28 1
a28 1
 * $OpenBSD: async.c,v 1.9 2001/06/13 21:33:40 brian Exp $
d72 1
a72 1
async_SetLinkParams(struct async *async, struct lcp *lcp)
d74 2
a75 2
  async->my_accmap = lcp->want_accmap;
  async->his_accmap = lcp->his_accmap | lcp->want_accmap;
@


1.9
log
@Convert IIJ copyrights to BSD copyrights; ok tohno@@sirius.ocn.ne.jp
@
text
@d28 1
a28 1
 * $OpenBSD$
d59 7
a68 1
  memset(async->cfg.EscMap, '\0', sizeof async->cfg.EscMap);
@


1.8
log
@$Id$ -> $OpenBSD$
@
text
@d1 5
a5 2
/*
 *	             PPP Async HDLC Module
d7 8
a14 1
 *	    Written by Toshiharu OHNO (tony-o@@iij.ad.jp)
d16 11
a26 15
 *   Copyright (C) 1993, Internet Initiative Japan, Inc. All rights reserverd.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the Internet Initiative Japan, Inc.  The name of the
 * IIJ may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $OpenBSD: async.c,v 1.7 2000/01/07 03:26:52 brian Exp $
d28 1
d30 1
@


1.7
log
@Upgrade from 2.23 -> 2.26
I'll follow up with a list of changes (too big for a commit message IMHO)
@
text
@d20 1
a20 1
 * $Id: async.c,v 1.6 1999/06/02 15:58:40 brian Exp $
@


1.6
log
@o Alter the mbuf type as it's processed by different layers.
o Show more information about missing MP fragments in ``show mp''.
o Do away with mbuf_Log().  It was showing mbuf stats twice on
  receipt of LCP/CCP/IPCP packets.... ???!!?
o Pre-allocate a bit extra when creating LQR packets to avoid having
  to allocate another mbuf in mbuf_Prepend().
@
text
@d20 1
a20 1
 * $Id: async.c,v 1.5 1999/05/12 10:03:48 brian Exp $
d95 2
a96 2
  if (!p || mbuf_Length(bp) > HDLCSIZE) {
    mbuf_Free(bp);
d106 1
a106 1
    for (cnt = wp->cnt; cnt > 0; cnt--) {
d109 1
a109 1
	mbuf_Free(bp);
d113 1
a113 1
    wp = wp->next;
d118 2
a119 2
  mbuf_Free(bp);
  bp = mbuf_Alloc(cnt, MB_ASYNCOUT);
d138 1
a138 1
      bp = mbuf_Alloc(async->length, MB_ASYNCIN);
d188 1
a188 1
    for (cnt = bp->cnt; cnt; cnt--) {
d191 1
a191 1
        last = &(*last)->pnext;
d193 1
a193 1
    bp = mbuf_FreeSeg(bp);
@


1.5
log
@Allow ``host:port/udp'' devices and support ``host:port/tcp'' as
being the same as the previous (still supported) ``host:port''
syntax for tcp socket devices.

A udp device uses synchronous ppp rather than async, and avoids
the double-retransmit overhead that comes with ppp over tcp (it's
usually a bad idea to transport IP over a reliable transport that
itself is using an unreliable transport).  PPP over UDP provides
througput of ** 1.5Mb per second ** with all compression disabled,
maxing out a PPro/200 when running ppp twice, back-to-back.

This proves that PPPoE is plausable in userland....

This change adds a few more handler functions to struct device and
allows derivations of struct device (which may contain their own
data etc) to pass themselves through the unix domain socket for MP.
** At last **, struct physical has lost all the tty crud !

iov2physical() is now smart enough to restore the correct stack of
layers so that MP servers will work again.

The version number has bumped as our MP link transfer contents have
changed (they now may contain a `struct device').

Don't extract the protocol twice in MP mode (resulting in protocol
rejects for every MP packet).  This was broken with my original
layering changes.

Add ``Physical'' and ``Sync'' log levels for logging the relevent
raw packets and add protocol-tracking LogDEBUG stuff in various
LayerPush & LayerPull functions.

Assign our physical device name for incoming tcp connections by
calling getpeername().

Assign our physical device name for incoming udp connections from
the address retrieved by the first recvfrom().
@
text
@d20 1
a20 1
 * $Id: async.c,v 1.4 1999/05/08 11:06:33 brian Exp $
d119 1
a119 1
  bp = mbuf_Alloc(cnt, MB_ASYNC);
d138 1
a138 1
      bp = mbuf_Alloc(async->length, MB_ASYNC);
@


1.4
log
@o Redesign the layering mechanism and make the aliasing code part of
  the layering.

  We now ``stack'' layers as soon as we open the device (when we figure
  out what we're dealing with).  A static set of `dispatch' routines are
  also declared for dealing with incoming packets after they've been
  `pulled' up through the stacked layers.

  Physical devices are now assigned handlers based on the device type
  when they're opened.  For the moment there are three device types;
  ttys, execs and tcps.

o Increment version number to 2.2
o Make an entry in [uw]tmp for non-tty -direct invocations (after
  pap/chap authentication).
o Make throughput counters quad_t's
o Account for the absolute number of mbuf malloc()s and free()s in
  ``show mem''.
o ``show modem'' becomes ``show physical''.
@
text
@d20 1
a20 1
 * $Id: async.c,v 1.3 1999/04/19 16:59:38 brian Exp $
d121 1
a122 1
  log_DumpBp(LogASYNC, "WriteModem", bp);
d185 1
@


1.3
log
@Escape stuff in the peers accmap as well as our own when async
encoding, and back out the negotiation strategy that didn't
quite have the right effect with some (bad?) ppp implementations.

Drop unexpected PAP/CHAP packets (if not in NETWORK or ESTABLISH
phase).

Make sure that we enter PHASE_ESTABLISH when we need to.

Detect HDLC frames correctly, not just when the whole header
is obtained by a single read().

Don't convert \r\n to \r\r\n in tty raw mode.

Use the correct macros for `', ``'', () and [].
@
text
@d20 1
a20 1
 * $Id: async.c,v 1.2 1999/02/06 03:22:31 brian Exp $
d28 1
d37 1
a37 1
#include "lcpproto.h"
d65 1
a65 1
 * Encode into async HDLC byte code if necessary
d68 1
a68 1
HdlcPutByte(struct async *async, u_char **cp, u_char c, int proto)
d86 3
a88 2
void
async_Output(int pri, struct mbuf *bp, int proto, struct physical *physical)
d90 1
d95 1
a95 1
  if (mbuf_Length(bp) > HDLCSIZE) {
d97 1
a97 1
    return;
d99 2
a100 1
  cp = physical->async.xbuff;
d107 1
a107 1
      HdlcPutByte(&physical->async, &cp, *sp++, proto);
d110 1
a110 1
	return;
d117 1
a117 4
  cnt = cp - physical->async.xbuff;
  log_DumpBuff(LogASYNC, "WriteModem", physical->async.xbuff, cnt);
  link_Write(&physical->link, pri, (char *)physical->async.xbuff, cnt);
  link_AddOutOctets(&physical->link, cnt);
d119 5
d169 3
a171 3
void
async_Input(struct bundle *bundle, u_char *buff, int cnt,
            struct physical *physical)
d173 9
a181 1
  struct mbuf *bp;
d183 1
a183 1
  link_AddInOctets(&physical->link, cnt);
d185 6
a190 11
  if (physical_IsSync(physical)) {
    bp = mbuf_Alloc(cnt, MB_ASYNC);
    memcpy(MBUF_CTOP(bp), buff, cnt);
    bp->cnt = cnt;
    hdlc_Input(bundle, bp, physical);
  } else {
    while (cnt > 0) {
      bp = async_Decode(&physical->async, *buff++);
      if (bp)
	hdlc_Input(bundle, bp, physical);
      cnt--;
d192 1
d194 2
d197 3
@


1.2
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d20 1
a20 1
 * $Id: async.c,v 1.17 1998/06/16 19:40:34 brian Exp $
d60 1
a60 1
  async->his_accmap = lcp->his_accmap;
@


1.1
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@@

