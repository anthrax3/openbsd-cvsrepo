head	1.10;
access;
symbols
	OPENBSD_5_5:1.9.0.54
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.50
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.48
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.46
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.44
	OPENBSD_5_0:1.9.0.42
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.40
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.38
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.34
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.36
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.32
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.30
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.28
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.26
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.24
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.22
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.20
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.18
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.16
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.14
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.12
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.10
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.8
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.6
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.4
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.4
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.9;

1.9
date	2001.08.19.23.22.17;	author brian;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.13.21.33.41;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	2000.07.11.22.13.03;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.07.14.47.54;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.27.01.38.26;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.07.03.26.54;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	99.05.08.11.06.35;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.02.06.03.22.38;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.00.22.21;	author brian;	state Exp;
branches;
next	;


desc
@@


1.10
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1996 - 2001 Brian Somers <brian@@Awfulhak.org>
 *          based on work by Toshiharu OHNO <tony-o@@iij.ad.jp>
 *                           Internet Initiative Japan, Inc (IIJ)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $OpenBSD: ip.h,v 1.9 2001/08/19 23:22:17 brian Exp $
 */

struct mbuf;
struct filter;
struct link;
struct bundle;

extern int ip_PushPacket(struct link *, struct bundle *);
extern int PacketCheck(struct bundle *, u_int32_t, const unsigned char *, int,
                          struct filter *, const char *, unsigned *secs);
extern int FilterCheck(const unsigned char *, u_int32_t, const struct filter *,
                       unsigned *);
extern struct mbuf *ipv4_Input(struct bundle *, struct link *, struct mbuf *);
#ifndef NOINET6
extern struct mbuf *ipv6_Input(struct bundle *, struct link *, struct mbuf *);
#endif
@


1.9
log
@Add IPv6 support.

IPV6CP support is crude for now, and hasn't been tested against
any other implementations.  RADIUS and IPv6 are independent of
eachother for now.  ppp.linkup/ppp.linkdown aren't currently used
by IPV6CP

Understand all protocols(5) in filter rules rather than only a select
few.

Allow a mask specification for the ``delete'' command.  It's now
possible to specifically delete one of two conflicting routes.

When creating and deleting proxy arp entries, do it for all IPv4
interface addresses rather than doing it just for the ``current''
peer address.

When iface-alias isn't in effect, don't blow away manually (via ``iface
add'') added interface addresses.

When listening on a tcp server (diagnostic) socket, bind so that a
tcp46 socket is created -- allowing both IPv4 and IPv6 connections.

When displaying ICMP traffic, don't display the icmp type twice.

When display traffic, display at least some information about unrecognised
traffic.

Bump version
@
text
@d28 1
a28 1
 * $OpenBSD: ip.h,v 1.8 2001/06/13 21:33:41 brian Exp $
@


1.8
log
@Convert IIJ copyrights to BSD copyrights; ok tohno@@sirius.ocn.ne.jp
@
text
@d28 1
a28 1
 * $OpenBSD$
d37 8
a44 6
extern int PacketCheck(struct bundle *, unsigned char *, int, struct filter *,
                       const char *, unsigned *secs);
extern void ip_Enqueue(struct ipcp *, int, char *, int);
extern struct mbuf *ip_Input(struct bundle *, struct link *, struct mbuf *);
extern void ip_DeleteQueue(struct ipcp *);
extern size_t ip_QueueLen(struct ipcp *);
@


1.7
log
@Allow a ``timeout secs'' filter option to let specific packet types
effect the idle timer in different ways.

Submitted by: Stefan Esser <se@@freebsd.org>

With adjustments by me to document the option in the man page and to
give the same semantics for outgoing traffic as incoming.

I made the style more consistent in ip.c - this should really have
been done as a separate commit.
@
text
@d1 5
a5 2
/*
 *			User Process PPP
d7 8
a14 1
 *	    Written by Toshiharu OHNO (tony-o@@iij.ad.jp)
d16 11
a26 15
 *   Copyright (C) 1993, Internet Initiative Japan, Inc. All rights reserverd.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the Internet Initiative Japan, Inc.  The name of the
 * IIJ may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $OpenBSD: ip.h,v 1.6 2000/07/07 14:47:54 brian Exp $
d28 1
@


1.6
log
@o  Log the (payload/size) of all packet types, not just TCP packets

o  If the new ``filter-decapsulation'' is enabled, delve into UDP packets
   that contain 0xff 0x03 as the first two bytes, and if we recognise it
   as PROTO_IP, decapsulate it for the purpose of filter checking.

   If we recognise it as PROTO_<anything else> mention this for logging
   purposes only.

This change is aimed at people running PPPoUDP where the UDP traffic is
being sent over another PPP link.  It's desireable to have the top level
link connected all the time, but to have the bottom level link capable
of decapsulating the traffic and comparing the payload against the filters,
thus allowing ``set filter dial ...'' to work in tunnelled environments.

The caveat here is that the top ppp cannot employ any compression layers
without making the data unreadable for the bottom ppp.  ``disable deflate
pred1 vj'' and ``deny deflate pred1 vj'' is suggested.
@
text
@d20 1
a20 1
 * $OpenBSD: ip.h,v 1.5 2000/02/27 01:38:26 brian Exp $
d31 1
a31 1
                       const char *);
@


1.5
log
@$Id$ -> $OpenBSD$
@
text
@d20 1
a20 1
 * $OpenBSD: ip.h,v 1.4 2000/01/07 03:26:54 brian Exp $
d30 2
a31 1
extern int  PacketCheck(struct bundle *, char *, int, struct filter *);
@


1.4
log
@Upgrade from 2.23 -> 2.26
I'll follow up with a list of changes (too big for a commit message IMHO)
@
text
@d20 1
a20 1
 * $Id: ip.h,v 1.3 1999/05/08 11:06:35 brian Exp $
@


1.3
log
@o Redesign the layering mechanism and make the aliasing code part of
  the layering.

  We now ``stack'' layers as soon as we open the device (when we figure
  out what we're dealing with).  A static set of `dispatch' routines are
  also declared for dealing with incoming packets after they've been
  `pulled' up through the stacked layers.

  Physical devices are now assigned handlers based on the device type
  when they're opened.  For the moment there are three device types;
  ttys, execs and tcps.

o Increment version number to 2.2
o Make an entry in [uw]tmp for non-tty -direct invocations (after
  pap/chap authentication).
o Make throughput counters quad_t's
o Account for the absolute number of mbuf malloc()s and free()s in
  ``show mem''.
o ``show modem'' becomes ``show physical''.
@
text
@d20 1
a20 1
 * $Id: ip.h,v 1.2 1999/02/06 03:22:38 brian Exp $
d34 1
a34 1
extern int  ip_QueueLen(struct ipcp *);
@


1.2
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d20 1
a20 1
 * $Id: ip.h,v 1.11 1998/08/26 17:39:37 brian Exp $
d29 1
a29 1
extern int ip_FlushPacket(struct link *, struct bundle *);
d32 1
a32 1
extern void ip_Input(struct bundle *, struct mbuf *);
@


1.1
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@@

