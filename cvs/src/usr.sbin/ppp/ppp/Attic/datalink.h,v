head	1.11;
access;
symbols
	OPENBSD_5_5:1.10.0.38
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.34
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.32
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.30
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.28
	OPENBSD_5_0:1.10.0.26
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.24
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.22
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.18
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.20
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.16
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.14
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.12
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.10
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.14
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.12
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.10
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.8
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.8
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.6
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.10;

1.10
date	2005.07.06.13.56.00;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.31.02.38.49;	author brian;	state Exp;
branches;
next	1.8;

1.8
date	2000.02.27.01.38.25;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	2000.02.27.00.21.07;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.07.03.26.53;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	99.07.15.02.10.32;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	99.07.15.02.04.06;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	99.03.04.17.42.25;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.02.06.03.22.35;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.00.22.19;	author brian;	state Exp;
branches;
next	;


desc
@@


1.11
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1998 Brian Somers <brian@@Awfulhak.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$OpenBSD: datalink.h,v 1.10 2005/07/06 13:56:00 brad Exp $
 */

#define DATALINK_CLOSED  (0)
#define DATALINK_OPENING (1)
#define DATALINK_HANGUP  (2)
#define DATALINK_DIAL    (3)
#define DATALINK_CARRIER (4)
#define DATALINK_LOGOUT  (5)
#define DATALINK_LOGIN   (6)
#define DATALINK_READY   (7)
#define DATALINK_LCP     (8)
#define DATALINK_AUTH    (9)
#define DATALINK_CBCP    (10)
#define DATALINK_OPEN    (11)

#define DATALINK_MAXNAME (20)   /* Maximum datalink::name length */

/* How to close the link */
#define CLOSE_NORMAL		0
#define CLOSE_STAYDOWN		1
#define CLOSE_LCP		2

struct iovec;
struct prompt;
struct physical;
struct bundle;

struct datalink {
  struct fdescriptor desc;	/* We play either a physical or a chat */
  int state;			/* Our DATALINK_* state */
  struct physical *physical;	/* Our link */

  struct chat chat;		/* For bringing the link up & down */

  unsigned stayonline : 1;	/* stay online when LCP is closed ? */
  struct {
    unsigned run : 1;		/* run scripts ? */
    unsigned packetmode : 1;	/* Go into packet mode after login ? */
  } script;

  struct {
    struct {
      char dial[SCRIPT_LEN];
      char login[SCRIPT_LEN];
      char logout[SCRIPT_LEN];
      char hangup[SCRIPT_LEN];
    } script;			/* various chat scripts */
    struct {
      char list[SCRIPT_LEN];	/* Telephone Numbers */
    } phone;
    struct {
      int max;			/* initially try again this number of times */
      int next_timeout;		/* Redial next timeout value */
      int inc;			/* Increment timeout by `inc' each time read */
      int maxinc;		/* Maximum number of increments */
      int timeout;		/* Redial timeout value (end of phone list) */
    } dial;
    struct {
      int max;			/* initially try again this number of times */
      int timeout;		/* Timeout before reconnect on carrier loss */
    } reconnect;
    struct callback callback;	/* Direction depends on physical type */
    struct cbcpcfg cbcp;	/* Direction depends on phys type & callback */
  } cfg;			/* All our config data is in here */

  struct {
    char list[SCRIPT_LEN];	/* copy of cfg.list for strsep() */
    char *next;			/* Next phone from the list */
    char *alt;			/* Alternate (after fail) phone from the list */
    const char *chosen;		/* Chosen phone number after DIAL */
  } phone;

  struct cbcp cbcp;

  struct {
    struct pppTimer timer;	/* For timing between close & open */
    int tries;			/* currently try again this number of times */
    int incs;			/* # times our timeout has been incremented */
  } dial;

  unsigned reconnect_tries;	/* currently try again this number of times */

  char *name;			/* Our name */

  struct peerid peer;		/* Peer identification */

  struct fsm_parent fsmp;	   /* Our callback functions */
  const struct fsm_parent *parent; /* Our parent */

  struct authinfo pap;             /* Authentication using pap */
  struct chap chap;                /* Authentication using chap */

  struct mp_link mp;               /* multilink data */

  struct bundle *bundle;	   /* for the moment */
  struct datalink *next;	   /* Next in the list */
};

#define descriptor2datalink(d) \
  ((d)->type == DATALINK_DESCRIPTOR ? (struct datalink *)(d) : NULL)

extern struct datalink *datalink_Create(const char *name, struct bundle *, int);
extern struct datalink *datalink_Clone(struct datalink *, const char *);
extern struct datalink *iov2datalink(struct bundle *, struct iovec *, int *,
                                     int, int, int *, int *);
extern int datalink2iov(struct datalink *, struct iovec *, int *, int, int *,
                        int *);
extern struct datalink *datalink_Destroy(struct datalink *);
extern void datalink_GotAuthname(struct datalink *, const char *);
extern void datalink_Up(struct datalink *, int, int);
extern void datalink_Close(struct datalink *, int);
extern void datalink_Down(struct datalink *, int);
extern void datalink_StayDown(struct datalink *);
extern void datalink_DontHangup(struct datalink *);
extern void datalink_AuthOk(struct datalink *);
extern void datalink_AuthNotOk(struct datalink *);
extern void datalink_NCPUp(struct datalink *);
extern void datalink_CBCPComplete(struct datalink *);
extern void datalink_CBCPFailed(struct datalink *);
extern int datalink_Show(struct cmdargs const *);
extern int datalink_SetRedial(struct cmdargs const *);
extern int datalink_SetReconnect(struct cmdargs const *);
extern const char *datalink_State(struct datalink *);
extern void datalink_Rename(struct datalink *, const char *);
extern int datalink_RemoveFromSet(struct datalink *, fd_set *, fd_set *,
                                  fd_set *);
extern int datalink_SetMode(struct datalink *, int);
extern int datalink_GetDialTimeout(struct datalink *);
extern const char *datalink_ChoosePhoneNumber(struct datalink *);
extern void datalink_ComeDown(struct datalink *, int);
@


1.10
log
@Add a bunch of malloc() return checks

From brian FreeBSD

ok deraadt@@ tdeval@@
@
text
@d26 1
a26 1
 *	$OpenBSD: datalink.h,v 1.9 2002/03/31 02:38:49 brian Exp $
@


1.9
log
@Change ``ifdef HAVE_DES'' to ``ifndef NODES'' for consistency.
Notice if the IP header length changes when doing transparent proxying; FreeBSD
Handle domain\\user entries in ppp.secret
Add some mp_Down() calls to ensure that our multi-link NCP goes away properly
Miscellaneous #ifdef'd out FreeBSD changes (mostly netgraph stuff).
@
text
@d26 1
a26 1
 *	$OpenBSD: datalink.h,v 1.8 2000/02/27 01:38:25 brian Exp $
a150 1
extern char *datalink_NextName(struct datalink *);
@


1.8
log
@$Id$ -> $OpenBSD$
@
text
@d26 1
a26 1
 *	$OpenBSD: datalink.h,v 1.7 2000/02/27 00:21:07 brian Exp $
d55 1
a55 1
  struct fdescriptor desc;       /* We play either a physical or a chat */
d157 1
@


1.7
log
@When we stop a timer that's the first in the timer list, ensure
that we adjust that timers `rest' value (with the current getitimer()
values) before using that to adjust the next items `rest' value.
After adjusting that value, restart the timer service so that we've
now got the correct setitimer() values.
When adjusting timer::rest, round to the closest TICKUNIT usecs
value.

struct descriptor -> struct fdescriptor (to avoid header polution in
NetBSD).

Introduce LOCALNAT and LOCALRAD defines.

The interface list that comes back from the PF_ROUTE/NET_RT_IFLIST mib
is aligned.  Teach this to ``show route'' and clean up some of the
sockaddr parsing routines.

Add ``set log dns'' to log DNS QUERY packets.

When ppp can't identify the relevant name, don't use "???", use
<nnn> or <0xnnn> instead.

Don't ``break'' when we come accross a non-RTM_IFINFO type
entry in the block returned by the NET_RT_IFLIST mib,
continue instead.

Correct UN_SIZE definition; ben@@scientia.demon.co.uk
@
text
@d26 1
a26 1
 *	$Id: datalink.h,v 1.6 2000/01/07 03:26:53 brian Exp $
@


1.6
log
@Upgrade from 2.23 -> 2.26
I'll follow up with a list of changes (too big for a commit message IMHO)
@
text
@d26 1
a26 1
 *	$Id: datalink.h,v 1.5 1999/07/15 02:10:32 brian Exp $
d55 1
a55 1
  struct descriptor desc;       /* We play either a physical or a chat */
@


1.5
log
@Back out the mis-commit of my development ISDN modifications.
@
text
@d26 1
a26 1
 *	$Id: datalink.h,v 1.3 1999/03/04 17:42:25 brian Exp $
d33 8
a40 6
#define DATALINK_LOGIN   (4)
#define DATALINK_READY   (5)
#define DATALINK_LCP     (6)
#define DATALINK_AUTH    (7)
#define DATALINK_CBCP    (8)
#define DATALINK_OPEN    (9)
d69 5
a73 4
      char dial[SCRIPT_LEN];	/* dial */
      char login[SCRIPT_LEN];	/* login */
      char hangup[SCRIPT_LEN];	/* hangup */
    } script;
d131 3
a133 2
                                     int, int);
extern int datalink2iov(struct datalink *, struct iovec *, int *, int, pid_t);
d156 1
@


1.4
log
@Don't declare `end' if we aren't compiling radius support.
@
text
@d33 6
a38 7
#define DATALINK_CARRIER (4)
#define DATALINK_LOGIN   (5)
#define DATALINK_READY   (6)
#define DATALINK_LCP     (7)
#define DATALINK_AUTH    (8)
#define DATALINK_CBCP    (9)
#define DATALINK_OPEN    (10)
a151 1
extern const char *datalink_ChoosePhoneNumber(struct datalink *);
@


1.3
log
@Extend the ``set redial'' command to allow incremental
redial timeouts.
@
text
@d26 1
a26 1
 *	$Id: datalink.h,v 1.2 1999/02/06 03:22:35 brian Exp $
d33 7
a39 6
#define DATALINK_LOGIN   (4)
#define DATALINK_READY   (5)
#define DATALINK_LCP     (6)
#define DATALINK_AUTH    (7)
#define DATALINK_CBCP    (8)
#define DATALINK_OPEN    (9)
d153 1
@


1.2
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d26 1
a26 1
 *	$Id: datalink.h,v 1.5 1998/08/07 18:42:48 brian Exp $
a64 2
  struct pppTimer dial_timer;	/* For timing between close & open */

d77 2
d92 1
a92 1
    char *alt;			/* Next phone from the list */
d98 6
a103 1
  int dial_tries;		/* currently try again this number of times */
d151 1
@


1.1
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@d126 1
a126 1
extern void datalink_GotAuthname(struct datalink *, const char *, int);
@

