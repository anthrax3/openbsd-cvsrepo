head	1.28;
access;
symbols
	OPENBSD_5_5:1.27.0.36
	OPENBSD_5_5_BASE:1.27
	OPENBSD_5_4:1.27.0.32
	OPENBSD_5_4_BASE:1.27
	OPENBSD_5_3:1.27.0.30
	OPENBSD_5_3_BASE:1.27
	OPENBSD_5_2:1.27.0.28
	OPENBSD_5_2_BASE:1.27
	OPENBSD_5_1_BASE:1.27
	OPENBSD_5_1:1.27.0.26
	OPENBSD_5_0:1.27.0.24
	OPENBSD_5_0_BASE:1.27
	OPENBSD_4_9:1.27.0.22
	OPENBSD_4_9_BASE:1.27
	OPENBSD_4_8:1.27.0.20
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.27.0.16
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.27.0.18
	OPENBSD_4_6_BASE:1.27
	OPENBSD_4_5:1.27.0.14
	OPENBSD_4_5_BASE:1.27
	OPENBSD_4_4:1.27.0.12
	OPENBSD_4_4_BASE:1.27
	OPENBSD_4_3:1.27.0.10
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.27.0.8
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.27.0.6
	OPENBSD_4_1_BASE:1.27
	OPENBSD_4_0:1.27.0.4
	OPENBSD_4_0_BASE:1.27
	OPENBSD_3_9:1.27.0.2
	OPENBSD_3_9_BASE:1.27
	OPENBSD_3_8:1.25.0.2
	OPENBSD_3_8_BASE:1.25
	OPENBSD_3_7:1.24.0.12
	OPENBSD_3_7_BASE:1.24
	OPENBSD_3_6:1.24.0.10
	OPENBSD_3_6_BASE:1.24
	OPENBSD_3_5:1.24.0.8
	OPENBSD_3_5_BASE:1.24
	OPENBSD_3_4:1.24.0.6
	OPENBSD_3_4_BASE:1.24
	OPENBSD_3_3:1.24.0.4
	OPENBSD_3_3_BASE:1.24
	OPENBSD_3_2:1.24.0.2
	OPENBSD_3_2_BASE:1.24
	OPENBSD_3_1:1.23.0.2
	OPENBSD_3_1_BASE:1.23
	OPENBSD_3_0:1.22.0.2
	OPENBSD_3_0_BASE:1.22
	OPENBSD_2_9_BASE:1.20
	OPENBSD_2_9:1.20.0.2
	OPENBSD_2_8:1.18.0.2
	OPENBSD_2_8_BASE:1.18
	OPENBSD_2_7:1.14.0.2
	OPENBSD_2_7_BASE:1.14
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.28
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.27;

1.27
date	2005.09.21.15.04.28;	author brad;	state Exp;
branches;
next	1.26;

1.26
date	2005.09.21.01.43.06;	author brad;	state Exp;
branches;
next	1.25;

1.25
date	2005.07.18.22.51.03;	author brad;	state Exp;
branches;
next	1.24;

1.24
date	2002.05.16.01.13.39;	author brian;	state Exp;
branches;
next	1.23;

1.23
date	2001.11.23.11.17.03;	author brian;	state Exp;
branches;
next	1.22;

1.22
date	2001.08.19.23.22.17;	author brian;	state Exp;
branches;
next	1.21;

1.21
date	2001.06.19.10.24.50;	author brian;	state Exp;
branches;
next	1.20;

1.20
date	2001.04.05.02.24.05;	author brian;	state Exp;
branches;
next	1.19;

1.19
date	2000.11.28.22.59.53;	author brian;	state Exp;
branches;
next	1.18;

1.18
date	2000.08.28.22.44.41;	author brian;	state Exp;
branches;
next	1.17;

1.17
date	2000.07.11.22.13.02;	author brian;	state Exp;
branches;
next	1.16;

1.16
date	2000.07.07.14.47.54;	author brian;	state Exp;
branches;
next	1.15;

1.15
date	2000.06.13.09.57.50;	author brian;	state Exp;
branches;
next	1.14;

1.14
date	2000.04.07.23.46.39;	author brian;	state Exp;
branches;
next	1.13;

1.13
date	2000.03.19.10.33.32;	author brian;	state Exp;
branches;
next	1.12;

1.12
date	2000.02.27.01.38.24;	author brian;	state Exp;
branches;
next	1.11;

1.11
date	2000.02.27.01.34.04;	author brian;	state Exp;
branches;
next	1.10;

1.10
date	2000.02.27.00.21.06;	author brian;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.07.03.26.53;	author brian;	state Exp;
branches;
next	1.8;

1.8
date	99.08.17.17.25.34;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	99.08.05.10.32.13;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	99.06.02.00.46.55;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	99.05.31.23.57.35;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	99.02.06.03.22.31;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	98.12.10.18.40.41;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	98.10.29.02.21.44;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.00.22.16;	author brian;	state Exp;
branches;
next	;


desc
@@


1.28
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1998 Brian Somers <brian@@Awfulhak.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$OpenBSD: bundle.h,v 1.27 2005/09/21 15:04:28 brad Exp $
 */

#define	PHASE_DEAD		0	/* Link is dead */
#define	PHASE_ESTABLISH		1	/* Establishing link */
#define	PHASE_AUTHENTICATE	2	/* Being authenticated */
#define	PHASE_NETWORK		3	/* We're alive ! */
#define	PHASE_TERMINATE		4	/* Terminating link */

/* cfg.opt bit settings */
#define OPT_FILTERDECAP		1
#define OPT_FORCE_SCRIPTS	2 /* force chat scripts */
#define OPT_IDCHECK		3
#define OPT_IFACEALIAS		4
#ifndef NOINET6
#define OPT_IPCP		5
#define OPT_IPV6CP		6
#endif
#define OPT_KEEPSESSION		7
#define OPT_LOOPBACK		8
#define OPT_NAS_IP_ADDRESS	9
#define OPT_NAS_IDENTIFIER	10
#define OPT_PASSWDAUTH		11
#define OPT_PROXY		12
#define OPT_PROXYALL		13
#define OPT_SROUTES		14
#define OPT_TCPMSSFIXUP		15
#define OPT_THROUGHPUT		16
#define OPT_UTMP		17
#define OPT_MAX			17

#define MAX_ENDDISC_CLASS 5

#define Enabled(b, o)		((b)->cfg.optmask & (1ull << (o)))
#define opt_enable(b, o)	((b)->cfg.optmask |= (1ull << (o)))
#define opt_disable(b, o)	((b)->cfg.optmask &= ~(1ull << (o)))

/* AutoAdjust() values */
#define AUTO_UP		1
#define AUTO_DOWN	2

struct sockaddr_un;
struct datalink;
struct physical;
struct link;
struct server;
struct prompt;
struct iface;

struct bundle {
  struct fdescriptor desc;    /* really all our datalinks */
  int unit;                   /* The device/interface unit number */

  struct {
    char Name[20];            /* The /dev/XXXX name */
    int fd;                   /* The /dev/XXXX descriptor */
    unsigned header : 1;      /* Family header sent & received ? */
  } dev;

  u_long bandwidth;           /* struct tuninfo speed */
  struct iface *iface;        /* Interface information */

  int routing_seq;            /* The current routing sequence number */
  u_int phase;                /* Curent phase */

  struct {
    int all;                  /* Union of all physical::type's */
    int open;                 /* Union of all open physical::type's */
  } phys_type;

  unsigned CleaningUp : 1;    /* Going to exit.... */
  unsigned NatEnabled : 1;    /* Are we using libalias ? */

  struct fsm_parent fsm;      /* Our callback functions */
  struct datalink *links;     /* Our data links */

  time_t upat;                /* When the link came up */

  struct {
    struct {
      int timeout;                /* NCP Idle timeout value */
      int min_timeout;            /* Don't idle out before this */
    } idle;
    struct {
      char name[AUTHLEN];         /* PAP/CHAP system name */
      char key[AUTHLEN];          /* PAP/CHAP key */
    } auth;
    unsigned long long optmask;   /* Uses OPT_ bits from above */
    char label[50];               /* last thing `load'ed */
    u_short ifqueue;              /* Interface queue size */

    struct {
      int timeout;                /* How long to leave the output queue choked */
    } choked;
  } cfg;

  struct ncp ncp;

  struct {
    struct filter in;         /* incoming packet filter */
    struct filter out;        /* outgoing packet filter */
    struct filter dial;       /* dial-out packet filter */
    struct filter alive;      /* keep-alive packet filter */
  } filter;

  struct {
    struct pppTimer timer;    /* timeout after cfg.idle_timeout */
    time_t done;
  } idle;

#ifndef NORADIUS
  struct {
    struct pppTimer timer;
    time_t done;
  } session;
#endif

  struct {
    int fd;                   /* write status here */
  } notify;

  struct {
    struct pppTimer timer;    /* choked output queue timer */
  } choked;

#ifndef NORADIUS
  struct radius radius;       /* Info retrieved from radius server */
  struct radacct radacct;
#ifndef NOINET6
  struct radacct radacct6;
#endif
#endif
};

#define descriptor2bundle(d) \
  ((d)->type == BUNDLE_DESCRIPTOR ? (struct bundle *)(d) : NULL)

extern struct bundle *bundle_Create(const char *, int, int);
extern void bundle_Destroy(struct bundle *);
extern const char *bundle_PhaseName(struct bundle *);
#define bundle_Phase(b) ((b)->phase)
extern void bundle_NewPhase(struct bundle *, u_int);
extern void bundle_LinksRemoved(struct bundle *);
extern void bundle_Close(struct bundle *, const char *, int);
extern void bundle_Down(struct bundle *, int);
extern void bundle_Open(struct bundle *, const char *, int, int);
extern void bundle_LinkClosed(struct bundle *, struct datalink *);

extern int bundle_ShowLinks(struct cmdargs const *);
extern int bundle_ShowStatus(struct cmdargs const *);
extern void bundle_StartIdleTimer(struct bundle *, unsigned secs);
extern void bundle_SetIdleTimer(struct bundle *, int, int);
extern void bundle_StopIdleTimer(struct bundle *);
extern int bundle_IsDead(struct bundle *);
extern struct datalink *bundle2datalink(struct bundle *, const char *);

#ifndef NORADIUS
extern void bundle_StartSessionTimer(struct bundle *, unsigned secs);
extern void bundle_StopSessionTimer(struct bundle *);
#endif

extern void bundle_RegisterDescriptor(struct bundle *, struct fdescriptor *);
extern void bundle_UnRegisterDescriptor(struct bundle *, struct fdescriptor *);

extern void bundle_SetTtyCommandMode(struct bundle *, struct datalink *);

extern int bundle_DatalinkClone(struct bundle *, struct datalink *,
                                const char *);
extern void bundle_DatalinkRemove(struct bundle *, struct datalink *);
extern void bundle_CleanDatalinks(struct bundle *);
extern void bundle_SetLabel(struct bundle *, const char *);
extern const char *bundle_GetLabel(struct bundle *);
extern void bundle_SendDatalink(struct datalink *, int, struct sockaddr_un *);
extern int bundle_LinkSize(void);
extern void bundle_ReceiveDatalink(struct bundle *, int);
extern int bundle_SetMode(struct bundle *, struct datalink *, int);
extern int bundle_RenameDatalink(struct bundle *, struct datalink *,
                                 const char *);
extern void bundle_setsid(struct bundle *, int);
extern void bundle_LockTun(struct bundle *);
extern int bundle_HighestState(struct bundle *);
extern int bundle_Exception(struct bundle *, int);
extern void bundle_AdjustFilters(struct bundle *, struct ncpaddr *,
                                 struct ncpaddr *);
extern void bundle_AdjustDNS(struct bundle *);
extern void bundle_CalculateBandwidth(struct bundle *);
extern void bundle_AutoAdjust(struct bundle *, int, int);
extern int bundle_WantAutoloadTimer(struct bundle *);
extern void bundle_ChangedPID(struct bundle *);
extern void bundle_Notify(struct bundle *, char);
extern int bundle_Uptime(struct bundle *);
@


1.27
log
@Send NAS-IP-Address as well as NAS-Identifier
Add ``disable NAS-IP-Address'' and ``disable NAS-Identifier'' options to
support pre-rfc2865 RADIUS servers.
This pushes our enable/disable items over the 32 bit limit, so reoganise
things to allow a bunch more options.

From brian FreeBSD
@
text
@d26 1
a26 1
 *	$OpenBSD: bundle.h,v 1.26 2005/09/21 01:43:06 brad Exp $
@


1.26
log
@Do RADIUS accounting on IPV6CP.

From ume FreeBSD
@
text
@d26 1
a26 1
 *	$OpenBSD: bundle.h,v 1.25 2005/07/18 22:51:03 brad Exp $
d36 4
a39 4
#define OPT_FILTERDECAP		0x0001
#define OPT_FORCE_SCRIPTS	0x0002 /* force chat scripts */
#define OPT_IDCHECK		0x0004
#define OPT_IFACEALIAS		0x0008
d41 2
a42 2
#define OPT_IPCP		0x0010
#define OPT_IPV6CP		0x0020
d44 12
a55 9
#define OPT_KEEPSESSION		0x0040
#define OPT_LOOPBACK		0x0080
#define OPT_PASSWDAUTH		0x0100
#define OPT_PROXY		0x0200
#define OPT_PROXYALL		0x0400
#define OPT_SROUTES		0x0800
#define OPT_TCPMSSFIXUP		0x1000
#define OPT_THROUGHPUT		0x2000
#define OPT_UTMP		0x4000
d59 3
a61 1
#define Enabled(b, o) ((b)->cfg.opt & (o))
d106 2
a107 2
      int timeout;              /* NCP Idle timeout value */
      int min_timeout;          /* Don't idle out before this */
d110 2
a111 2
      char name[AUTHLEN];     /* PAP/CHAP system name */
      char key[AUTHLEN];      /* PAP/CHAP key */
d113 3
a115 3
    unsigned opt;             /* Uses OPT_ bits from above */
    char label[50];           /* last thing `load'ed */
    u_short ifqueue;          /* Interface queue size */
d118 1
a118 1
      int timeout;            /* How long to leave the output queue choked */
@


1.25
log
@Add a ``force-scripts'' option for using chat scripts with -direct and
-dedicated links.

From brian FreeBSD
@
text
@d26 1
a26 1
 *	$OpenBSD: bundle.h,v 1.24 2002/05/16 01:13:39 brian Exp $
d149 3
@


1.24
log
@o Bump the version number
o Tidy up includes
o Fix macros in auth.h
o Insist on context for ``set mru'' in MP mode
o Usage -> usage
o Don't intialise after processing config requests
o Show FSM values for ConfigAcks
o Make ident output prettier
o Fix some Id keywords
o Handle RADIUS pool address 255.255.255.254
o Support RADIUS Session-Timeout attributes
o Support RADIUS Reply-Message attributes
o Support RADIUS CHAP-Error attributes
o Store RADIUS Filter-Id attributes
o Provide a NAS-Port-Type attribute to RADIUS servers
o Provide a better NAS-Port attribute to RADIUS servers
o Support MS-CHAP with RADIUS
o Improve FSM decode functions
o Support an OCTETSIN variable
o Support an OCTETSOUT variable
o Support an PACKETSIN variable
o Support an PACKETSOUT variable
o Support an IPOCTETSIN variable
o Support an IPOCTETSOUT variable
o Support an IPPACKETSIN variable
o Support an IPPACKETSOUT variable
o Support an IPV6OCTETSIN variable
o Support an IPV6OCTETSOUT variable
o Support an IPV6PACKETSIN variable
o Support an IPV6PACKETSOUT variable
o Support a SOCKNAME variable
@
text
@d26 1
a26 1
 *	$OpenBSD: bundle.h,v 1.23 2001/11/23 11:17:03 brian Exp $
d36 4
a39 3
#define OPT_FILTERDECAP	0x0001
#define OPT_IDCHECK	0x0002
#define OPT_IFACEALIAS	0x0004
d41 2
a42 2
#define OPT_IPCP	0x0008
#define OPT_IPV6CP	0x0010
d44 9
a52 9
#define OPT_KEEPSESSION	0x0020
#define OPT_LOOPBACK	0x0040
#define OPT_PASSWDAUTH	0x0080
#define OPT_PROXY	0x0100
#define OPT_PROXYALL	0x0200
#define OPT_SROUTES	0x0400
#define OPT_TCPMSSFIXUP	0x0800
#define OPT_THROUGHPUT	0x1000
#define OPT_UTMP	0x2000
@


1.23
log
@cmott@@scientech.com -> cm@@linktel.net
Add the UPTIME variable
CCP protocol ``0xffffffff'' -> ``none''
Don't leak memory when expanding command arguments and not exec()ing
Make some functions static
Add the ``log'' command for manual logging
Fix some log text bogons
@
text
@d26 1
a26 1
 *	$OpenBSD: bundle.h,v 1.22 2001/08/19 23:22:17 brian Exp $
d130 7
d172 5
@


1.22
log
@Add IPv6 support.

IPV6CP support is crude for now, and hasn't been tested against
any other implementations.  RADIUS and IPv6 are independent of
eachother for now.  ppp.linkup/ppp.linkdown aren't currently used
by IPV6CP

Understand all protocols(5) in filter rules rather than only a select
few.

Allow a mask specification for the ``delete'' command.  It's now
possible to specifically delete one of two conflicting routes.

When creating and deleting proxy arp entries, do it for all IPv4
interface addresses rather than doing it just for the ``current''
peer address.

When iface-alias isn't in effect, don't blow away manually (via ``iface
add'') added interface addresses.

When listening on a tcp server (diagnostic) socket, bind so that a
tcp46 socket is created -- allowing both IPv4 and IPv6 connections.

When displaying ICMP traffic, don't display the icmp type twice.

When display traffic, display at least some information about unrecognised
traffic.

Bump version
@
text
@d26 1
a26 1
 *	$OpenBSD: bundle.h,v 1.21 2001/06/19 10:24:50 brian Exp $
d195 1
@


1.21
log
@Handle hardware-imposed MTU/MRU limitations.

Add an optional ``max'' specifier to ``set m[rt]u'', ie.
``set mtu max 1492'' for PPPoE.

Bump the ppp version number.

Add support for stateful MPPE (microsoft encryption) providing
encryption compatibility with Windows 2000.  Stateful encryption
uses less CPU but is bad on lossy transports.

The ``set mppe'' command has been expanded.  If it's used with any
arguments, ppp will insist on encryption, closing LCP if the other
end refuses.

Sponsored by:	Monzoon Networks AG and FreeBSD Services Limited
@
text
@d26 1
a26 1
 *	$OpenBSD: bundle.h,v 1.20 2001/04/05 02:24:05 brian Exp $
d39 13
a51 9
#define OPT_KEEPSESSION	0x0008
#define OPT_LOOPBACK	0x0010
#define OPT_PASSWDAUTH	0x0020
#define OPT_PROXY	0x0040
#define OPT_PROXYALL	0x0080
#define OPT_SROUTES	0x0100
#define OPT_TCPMSSFIXUP	0x0200
#define OPT_THROUGHPUT	0x0400
#define OPT_UTMP	0x0800
d116 1
a116 4
  struct {
    struct ipcp ipcp;         /* Our IPCP FSM */
    struct mp mp;             /* Our MP */
  } ncp;
a152 1
extern int  bundle_LinkIsUp(const struct bundle *);
d187 3
a189 3
extern void bundle_AdjustFilters(struct bundle *, struct in_addr *,
                                 struct in_addr *);
extern void bundle_AdjustDNS(struct bundle *, struct in_addr [2]);
@


1.20
log
@When we change the interface MTU, run through the routing table and tweak
all route MTUs too.
@
text
@d26 1
a26 1
 *	$OpenBSD: bundle.h,v 1.19 2000/11/28 22:59:53 brian Exp $
a75 1
  int mtu;                    /* struct tuninfo MTU */
a104 1
    u_short mtu;              /* Required interface MTU */
@


1.19
log
@Add ``enable/disable'' tcpmssfixup - enabled by default.
@
text
@d26 1
a26 1
 *	$OpenBSD: bundle.h,v 1.18 2000/08/28 22:44:41 brian Exp $
a154 2
extern int bundle_SetRoute(struct bundle *, int, struct in_addr,
                           struct in_addr, struct in_addr, int, int);
@


1.18
log
@Support radius accounting, and add a packet count to throughput
statistics as a side effect.

Submitted by: Marcin Cieslak <saper@@system.pl>

with some tweaks to RAD_ACCT_SESSION_ID and
RAD_ACCT_MULTI_SESSION_ID generation by me.
@
text
@d26 1
a26 1
 *	$OpenBSD: bundle.h,v 1.17 2000/07/11 22:13:02 brian Exp $
d45 3
a47 2
#define OPT_THROUGHPUT	0x0200
#define OPT_UTMP	0x0400
d76 1
d106 1
a106 1
    u_short mtu;              /* Interface mtu */
@


1.17
log
@Allow a ``timeout secs'' filter option to let specific packet types
effect the idle timer in different ways.

Submitted by: Stefan Esser <se@@freebsd.org>

With adjustments by me to document the option in the man page and to
give the same semantics for outgoing traffic as incoming.

I made the style more consistent in ip.c - this should really have
been done as a separate commit.
@
text
@d26 1
a26 1
 *	$OpenBSD: bundle.h,v 1.16 2000/07/07 14:47:54 brian Exp $
d139 1
@


1.16
log
@o  Log the (payload/size) of all packet types, not just TCP packets

o  If the new ``filter-decapsulation'' is enabled, delve into UDP packets
   that contain 0xff 0x03 as the first two bytes, and if we recognise it
   as PROTO_IP, decapsulate it for the purpose of filter checking.

   If we recognise it as PROTO_<anything else> mention this for logging
   purposes only.

This change is aimed at people running PPPoUDP where the UDP traffic is
being sent over another PPP link.  It's desireable to have the top level
link connected all the time, but to have the bottom level link capable
of decapsulating the traffic and comparing the payload against the filters,
thus allowing ``set filter dial ...'' to work in tunnelled environments.

The caveat here is that the top ppp cannot employ any compression layers
without making the data unreadable for the bottom ppp.  ``disable deflate
pred1 vj'' and ``deny deflate pred1 vj'' is suggested.
@
text
@d26 1
a26 1
 *	$OpenBSD: bundle.h,v 1.15 2000/06/13 09:57:50 brian Exp $
d161 1
a161 1
extern void bundle_StartIdleTimer(struct bundle *);
@


1.15
log
@Add ``set ifqueue'' to adjust the number of packets ppp buffers.
Handle an ``open'' correctly from state DATALINK_READY.
Don't disable the autoload timer when bringing down the second last auto
link or bringing up the last auto link.
Allow ``set urgent none'' to disable IPTOS_LOWDELAY prioritisation.
Honour ``set speed sync'' for ``!program'' links and use a udp socketpair
between ppp and ``program''.
HUP ``program'' when a ``!program'' link comes down.
Don't complain about valid padded ppp frames, but complain and drop the
data if the length claims to be more than the payload.
Correct the umask when creating a new /etc/resolv.conf (when dns is enabled),
and don't segfault when trying to rewrite the previous (non-existent) contents.
Be more verbose about ``inappropriate peer'' messages in MP mode.
Allow ``nat target MYADDR'' (to redirect incoming connections to the gateway).
Pass everything through the NAT engine - let it decide if it wants it.
Fix the return code when failing to create a tcp link
@
text
@d26 1
a26 1
 *	$OpenBSD: bundle.h,v 1.14 2000/04/07 23:46:39 brian Exp $
d36 11
a46 10
#define OPT_IDCHECK	0x0001
#define OPT_IFACEALIAS	0x0002
#define OPT_KEEPSESSION	0x0004
#define OPT_LOOPBACK	0x0008
#define OPT_PASSWDAUTH	0x0010
#define OPT_PROXY	0x0020
#define OPT_PROXYALL	0x0040
#define OPT_SROUTES	0x0080
#define OPT_THROUGHPUT	0x0100
#define OPT_UTMP	0x0200
@


1.14
log
@When running ppp -background, show comfort messages showing
when we're redialing/reconnecting.

While we're here, log redial, reconnect and phone number
announcements to LogCHAT, and reduce some other logging to
LogDEBUG.
@
text
@d26 1
a26 1
 *	$OpenBSD: bundle.h,v 1.13 2000/03/19 10:33:32 brian Exp $
d104 1
@


1.13
log
@Allow environment variables on command/config lines; markk@@knigma.org
Add the ``resolv'' command so that when ``enable dns''
is used, it's possible to restore the file.
@
text
@d26 1
a26 1
 *	$OpenBSD: bundle.h,v 1.12 2000/02/27 01:38:24 brian Exp $
d193 1
@


1.12
log
@$Id$ -> $OpenBSD$
@
text
@d26 1
a26 1
 *	$OpenBSD: bundle.h,v 1.11 2000/02/27 01:34:04 brian Exp $
d188 1
@


1.11
log
@Fix a bug in end-of-line comment parsing.
Fix callback (don't ``forget'' to call back).
Restructure how we add/remove the address family when
writing/reading the tun device.
Notify the tun device that we've changed PID under FreeBSD.
@
text
@d26 1
a26 1
 *	$Id: bundle.h,v 1.10 2000/02/27 00:21:06 brian Exp $
@


1.10
log
@When we stop a timer that's the first in the timer list, ensure
that we adjust that timers `rest' value (with the current getitimer()
values) before using that to adjust the next items `rest' value.
After adjusting that value, restart the timer service so that we've
now got the correct setitimer() values.
When adjusting timer::rest, round to the closest TICKUNIT usecs
value.

struct descriptor -> struct fdescriptor (to avoid header polution in
NetBSD).

Introduce LOCALNAT and LOCALRAD defines.

The interface list that comes back from the PF_ROUTE/NET_RT_IFLIST mib
is aligned.  Teach this to ``show route'' and clean up some of the
sockaddr parsing routines.

Add ``set log dns'' to log DNS QUERY packets.

When ppp can't identify the relevant name, don't use "???", use
<nnn> or <0xnnn> instead.

Don't ``break'' when we come accross a non-RTM_IFINFO type
entry in the block returned by the NET_RT_IFLIST mib,
continue instead.

Correct UN_SIZE definition; ben@@scientia.demon.co.uk
@
text
@d26 1
a26 1
 *	$Id: bundle.h,v 1.9 2000/01/07 03:26:53 brian Exp $
d70 1
d191 1
@


1.9
log
@Upgrade from 2.23 -> 2.26
I'll follow up with a list of changes (too big for a commit message IMHO)
@
text
@d26 1
a26 1
 *	$Id: bundle.h,v 1.8 1999/08/17 17:25:34 brian Exp $
d64 1
a64 1
  struct descriptor desc;     /* really all our datalinks */
d164 2
a165 2
extern void bundle_RegisterDescriptor(struct bundle *, struct descriptor *);
extern void bundle_UnRegisterDescriptor(struct bundle *, struct descriptor *);
@


1.8
log
@Implement a minimum idle time value as an optional second argument
to ``set timeout''.
This is useful for situations where your minimum call charge is (say)
5 minutes (like mine is)
@
text
@d26 1
a26 1
 *	$Id: bundle.h,v 1.7 1999/08/05 10:32:13 brian Exp $
a65 3
  const char **argv;          /* From main() */
  const char *argv0;          /* Original */
  const char *argv1;          /* Original */
d84 1
a84 1
  unsigned AliasEnabled : 1;  /* Are we using libalias ? */
d142 1
a142 1
extern struct bundle *bundle_Create(const char *, int, const char **);
a155 1
extern int bundle_FillQueues(struct bundle *);
d176 2
a177 1
extern void bundle_ReceiveDatalink(struct bundle *, int, struct sockaddr_un *);
@


1.7
log
@o Obsolete the undocumented ``set weight'' command.
o If we're using RADIUS and the RADIUS mtu is less than our
  peers mru/mrru, reduce our mtu to this value for NetBSD too.
o Make struct throughput's sample period dynamic and tweak the ppp
  version number to reflect the extra stuff being passed through
  the local domain socket as a result (MP mode).
o Measure the current throughput based on the number of samples actually
  taken rather than on the full sample period.
o Keep the throughput statisics persistent while being passed to
  another ppp invocation through the local domain socket.
o When showing throughput statistics after the timer has stopped, use
  the stopped time for overall calculations, not the current time.
  Also show the stopped time and how long the current throughput has
  been sampled for.
o Use time() consistently in throughput.c
o Tighten up the ``show bundle'' output.
o Introduce the ``set bandwidth'' command.
o Rewrite the ``set autoload'' command.  It now takes three arguments
  and works based on a rolling bundle throughput average compared against
  the theoretical bundle bandwidth over a given period (read: it's now
  functional).
@
text
@d26 1
a26 1
 *	$Id: bundle.h,v 1.6 1999/06/02 00:46:55 brian Exp $
d92 2
d95 4
a98 1
    int idle_timeout;         /* NCP Idle timeout value */
d163 1
a163 1
extern void bundle_SetIdleTimer(struct bundle *, int);
@


1.6
log
@Introduce the ``keep-session'' option.  Refer to the man
page for details.  This allows MP over non-tty devices where
the original ppp process must not exit (such as sshd-spawned
ppp sessions).
@
text
@d26 1
a26 1
 *	$Id: bundle.h,v 1.5 1999/05/31 23:57:35 brian Exp $
d51 4
d75 1
a75 1
  u_long ifSpeed;             /* struct tuninfo speed */
a101 7
    struct {                  /* We need/don't need another link when  */
      struct {                /* more/less than                        */
        int packets;          /* this number of packets are queued for */
        int timeout;          /* this number of seconds                */
      } max, min;
    } autoload;

a128 7
    struct pppTimer timer;
    time_t done;
    unsigned running : 1;
    unsigned comingup : 1;
  } autoload;

  struct {
d185 3
@


1.5
log
@Remember if MYADDR or HISADDR is used in a filter add tweak all
filters any time either value changes.
@
text
@d26 1
a26 1
 *	$Id: bundle.h,v 1.4 1999/02/06 03:22:31 brian Exp $
d38 8
a45 7
#define OPT_LOOPBACK	0x0004
#define OPT_PASSWDAUTH	0x0008
#define OPT_PROXY	0x0010
#define OPT_PROXYALL	0x0020
#define OPT_SROUTES	0x0040
#define OPT_THROUGHPUT	0x0080
#define OPT_UTMP	0x0100
@


1.4
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d26 1
a26 1
 *	$Id: bundle.h,v 1.21 1999/01/28 01:56:30 brian Exp $
d192 2
@


1.3
log
@When using ``set device !someprogram'', when ``someprogram''
exits, it causes a select() exception.
Handle these select() exceptions on link descriptors in pretty
much the same way as loss of carrier rather than dropping out
in confusion.
@
text
@d26 1
a26 1
 *	$Id: bundle.h,v 1.2 1998/10/29 02:21:44 brian Exp $
d90 2
a91 2
      char name[50];          /* PAP/CHAP system name */
      char key[50];           /* PAP/CHAP key */
d105 1
a105 1
      int timeout;		/* How long to leave the output queue choked */
d115 4
a118 4
    struct filter in;		/* incoming packet filter */
    struct filter out;		/* outgoing packet filter */
    struct filter dial;		/* dial-out packet filter */
    struct filter alive;	/* keep-alive packet filter */
d122 1
a122 1
    struct pppTimer timer;      /* timeout after cfg.idle_timeout */
d127 1
a127 1
    int fd;                     /* write status here */
d138 1
a138 1
    struct pppTimer timer;      /* choked output queue timer */
d140 4
@


1.2
log
@Catch up with the latest ppp updates/fixes:

- Add enable/disable proxyall to proxy arp an entire subnet
  (smaller than class C)
- Add ``set {send,recv}pipe for controlling socket buffers.
- Fix the infamous ``first connection'' problem where the process
  that causes an auto dial to an ISP that assigns a dynamic IP never
  connects (due to the bound socket IP being changed on the tun iface).
  See ``enable/disable iface-alias'' and ``iface ...'' in the man page.
- Add PROCESSID as a substitution string when running commands.
- Add ``set proctitle'' for changing argv0.  You can use all the command
  substitutions here too (eg ``set proctitle ppp: USER INTERFACE'').
- Add a missing untimeout as soon as the chat expect string is received
  rather than waiting for the next expect to happen.
- Be less restrictive about when auth{name,key}, enddisc, shortseq and
  mrru can be changed.
- Improve some diagnostics.
- Don't send a DELAY field with CBCP_NONUM messages (as per the spec).
- Emphasise how to make callback optional in the man page.
- Allow the caller to request no callback if they're allowed choose the
  number anyway.
- Set our CBCP RESPONSE fsm id according to the REQ, moan if the peer
  gets the response id wrong (but continue anyway).
- Shuffle the ``set ?'' output back a column so that broken terminals
  that can't display 80 columns *and* a '\n' will look ok.
- If DES is compiled out, be more verbose about why CHAP 0x80 was rejected.
@
text
@d26 1
a26 1
 *	$Id: bundle.h,v 1.1 1998/08/31 00:22:16 brian Exp $
d187 1
@


1.1
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@d26 1
a26 1
 *	$Id: bundle.h,v 1.13 1998/08/25 17:48:42 brian Exp $
d36 9
a44 7
#define OPT_IDCHECK	0x01
#define OPT_LOOPBACK	0x02
#define OPT_PASSWDAUTH	0x04
#define OPT_PROXY	0x08
#define OPT_SROUTES	0x10
#define OPT_THROUGHPUT	0x20
#define OPT_UTMP	0x40
d56 1
d62 2
d70 2
a71 5
  struct {
    u_long Speed;             /* struct tuninfo speed */
    int Index;                /* The interface index */
    char *Name;               /* The interface name */
  } ifp;
d186 1
@

