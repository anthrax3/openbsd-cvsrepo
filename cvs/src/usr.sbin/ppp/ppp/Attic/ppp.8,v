head	1.122;
access;
symbols
	OPENBSD_5_5:1.121.0.6
	OPENBSD_5_5_BASE:1.121
	OPENBSD_5_4:1.121.0.2
	OPENBSD_5_4_BASE:1.121
	OPENBSD_2_9_BASE:1.109
	OPENBSD_2_9:1.109.0.2
	OPENBSD_2_8:1.95.0.2
	OPENBSD_2_8_BASE:1.95
	OPENBSD_2_7:1.83.0.2
	OPENBSD_2_7_BASE:1.83
	OPENBSD_2_6:1.71.0.2
	OPENBSD_2_6_BASE:1.71
	OPENBSD_2_5:1.35.0.2
	OPENBSD_2_5_BASE:1.35
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3;
locks; strict;
comment	@.\" @;


1.122
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.121;

1.121
date	2013.07.16.11.13.34;	author schwarze;	state Exp;
branches;
next	1.120;

1.120
date	2013.07.10.15.56.56;	author jmc;	state Exp;
branches;
next	1.119;

1.119
date	2001.08.09.02.27.13;	author jsyn;	state dead;
branches;
next	1.118;

1.118
date	2001.08.02.20.52.58;	author brian;	state Exp;
branches;
next	1.117;

1.117
date	2001.07.20.19.09.48;	author mpech;	state Exp;
branches;
next	1.116;

1.116
date	2001.07.09.00.12.40;	author brian;	state Exp;
branches;
next	1.115;

1.115
date	2001.07.09.00.08.55;	author brian;	state Exp;
branches;
next	1.114;

1.114
date	2001.07.07.03.08.49;	author brian;	state Exp;
branches;
next	1.113;

1.113
date	2001.06.20.19.55.35;	author brian;	state Exp;
branches;
next	1.112;

1.112
date	2001.06.19.10.24.57;	author brian;	state Exp;
branches;
next	1.111;

1.111
date	2001.06.07.09.32.55;	author brian;	state Exp;
branches;
next	1.110;

1.110
date	2001.06.04.16.09.29;	author brian;	state Exp;
branches;
next	1.109;

1.109
date	2001.03.24.01.06.04;	author brian;	state Exp;
branches;
next	1.108;

1.108
date	2001.03.09.00.15.15;	author brian;	state Exp;
branches;
next	1.107;

1.107
date	2001.01.29.01.34.38;	author brian;	state Exp;
branches;
next	1.106;

1.106
date	2001.01.26.01.46.13;	author brian;	state Exp;
branches;
next	1.105;

1.105
date	2001.01.26.01.41.04;	author brian;	state Exp;
branches;
next	1.104;

1.104
date	2001.01.22.13.23.53;	author brian;	state Exp;
branches;
next	1.103;

1.103
date	2000.12.29.14.17.54;	author angelos;	state Exp;
branches;
next	1.102;

1.102
date	2000.12.15.01.14.31;	author brian;	state Exp;
branches;
next	1.101;

1.101
date	2000.11.29.01.49.34;	author brian;	state Exp;
branches;
next	1.100;

1.100
date	2000.11.28.22.59.53;	author brian;	state Exp;
branches;
next	1.99;

1.99
date	2000.11.22.02.13.09;	author brian;	state Exp;
branches;
next	1.98;

1.98
date	2000.11.16.22.17.54;	author brian;	state Exp;
branches;
next	1.97;

1.97
date	2000.11.16.22.16.49;	author brian;	state Exp;
branches;
next	1.96;

1.96
date	2000.11.02.00.54.34;	author brian;	state Exp;
branches;
next	1.95;

1.95
date	2000.09.02.22.12.54;	author brian;	state Exp;
branches;
next	1.94;

1.94
date	2000.08.28.23.25.28;	author brian;	state Exp;
branches;
next	1.93;

1.93
date	2000.08.15.10.26.37;	author brian;	state Exp;
branches;
next	1.92;

1.92
date	2000.08.10.13.26.58;	author brian;	state Exp;
branches;
next	1.91;

1.91
date	2000.08.09.19.31.25;	author brian;	state Exp;
branches;
next	1.90;

1.90
date	2000.07.19.11.06.36;	author brian;	state Exp;
branches;
next	1.89;

1.89
date	2000.07.12.23.14.31;	author brian;	state Exp;
branches;
next	1.88;

1.88
date	2000.07.12.16.33.53;	author brian;	state Exp;
branches;
next	1.87;

1.87
date	2000.07.11.22.13.03;	author brian;	state Exp;
branches;
next	1.86;

1.86
date	2000.07.07.14.47.54;	author brian;	state Exp;
branches;
next	1.85;

1.85
date	2000.06.23.09.47.05;	author brian;	state Exp;
branches;
next	1.84;

1.84
date	2000.06.13.09.57.51;	author brian;	state Exp;
branches;
next	1.83;

1.83
date	2000.04.12.21.47.56;	author aaron;	state Exp;
branches;
next	1.82;

1.82
date	2000.03.31.14.32.51;	author brian;	state Exp;
branches;
next	1.81;

1.81
date	2000.03.19.17.57.11;	author aaron;	state Exp;
branches;
next	1.80;

1.80
date	2000.03.19.10.33.33;	author brian;	state Exp;
branches;
next	1.79;

1.79
date	2000.03.14.21.31.44;	author aaron;	state Exp;
branches;
next	1.78;

1.78
date	2000.02.28.01.20.23;	author brian;	state Exp;
branches;
next	1.77;

1.77
date	2000.02.27.01.38.27;	author brian;	state Exp;
branches;
next	1.76;

1.76
date	2000.02.27.00.21.09;	author brian;	state Exp;
branches;
next	1.75;

1.75
date	2000.01.22.02.17.52;	author aaron;	state Exp;
branches;
next	1.74;

1.74
date	2000.01.18.21.49.02;	author aaron;	state Exp;
branches;
next	1.73;

1.73
date	2000.01.15.13.15.53;	author brian;	state Exp;
branches;
next	1.72;

1.72
date	2000.01.07.03.26.55;	author brian;	state Exp;
branches;
next	1.71;

1.71
date	99.10.05.20.53.10;	author aaron;	state Exp;
branches;
next	1.70;

1.70
date	99.09.23.04.12.11;	author alex;	state Exp;
branches;
next	1.69;

1.69
date	99.08.18.15.38.15;	author brian;	state Exp;
branches;
next	1.68;

1.68
date	99.08.17.17.25.35;	author brian;	state Exp;
branches;
next	1.67;

1.67
date	99.08.05.10.32.14;	author brian;	state Exp;
branches;
next	1.66;

1.66
date	99.08.03.16.14.31;	author brian;	state Exp;
branches;
next	1.65;

1.65
date	99.08.02.21.45.45;	author brian;	state Exp;
branches;
next	1.64;

1.64
date	99.07.29.14.38.26;	author brian;	state Exp;
branches;
next	1.63;

1.63
date	99.07.28.03.02.01;	author brian;	state Exp;
branches;
next	1.62;

1.62
date	99.07.27.23.47.21;	author brian;	state Exp;
branches;
next	1.61;

1.61
date	99.07.27.13.50.20;	author brian;	state Exp;
branches;
next	1.60;

1.60
date	99.07.27.00.31.27;	author brian;	state Exp;
branches;
next	1.59;

1.59
date	99.07.26.11.18.11;	author brian;	state Exp;
branches;
next	1.58;

1.58
date	99.07.17.10.33.53;	author brian;	state Exp;
branches;
next	1.57;

1.57
date	99.07.15.02.10.32;	author brian;	state Exp;
branches;
next	1.56;

1.56
date	99.07.15.02.04.07;	author brian;	state Exp;
branches;
next	1.55;

1.55
date	99.07.07.10.50.14;	author aaron;	state Exp;
branches;
next	1.54;

1.54
date	99.07.03.02.11.10;	author aaron;	state Exp;
branches;
next	1.53;

1.53
date	99.06.23.16.49.04;	author brian;	state Exp;
branches;
next	1.52;

1.52
date	99.06.14.10.14.19;	author brian;	state Exp;
branches;
next	1.51;

1.51
date	99.06.11.11.27.23;	author brian;	state Exp;
branches;
next	1.50;

1.50
date	99.06.10.00.17.26;	author brian;	state Exp;
branches;
next	1.49;

1.49
date	99.06.09.16.55.26;	author brian;	state Exp;
branches;
next	1.48;

1.48
date	99.06.08.11.58.46;	author brian;	state Exp;
branches;
next	1.47;

1.47
date	99.06.05.22.17.51;	author aaron;	state Exp;
branches;
next	1.46;

1.46
date	99.06.05.04.16.05;	author aaron;	state Exp;
branches;
next	1.45;

1.45
date	99.06.02.00.46.55;	author brian;	state Exp;
branches;
next	1.44;

1.44
date	99.06.01.08.46.43;	author brian;	state Exp;
branches;
next	1.43;

1.43
date	99.05.23.16.48.39;	author aaron;	state Exp;
branches;
next	1.42;

1.42
date	99.05.23.14.11.35;	author aaron;	state Exp;
branches;
next	1.41;

1.41
date	99.05.16.13.38.47;	author brian;	state Exp;
branches;
next	1.40;

1.40
date	99.05.12.10.03.53;	author brian;	state Exp;
branches;
next	1.39;

1.39
date	99.05.08.11.06.38;	author brian;	state Exp;
branches;
next	1.38;

1.38
date	99.05.02.08.54.01;	author brian;	state Exp;
branches;
next	1.37;

1.37
date	99.04.21.21.27.50;	author aaron;	state Exp;
branches;
next	1.36;

1.36
date	99.04.19.16.59.40;	author brian;	state Exp;
branches;
next	1.35;

1.35
date	99.04.02.15.12.19;	author aaron;	state Exp;
branches;
next	1.34;

1.34
date	99.03.25.23.36.52;	author brian;	state Exp;
branches;
next	1.33;

1.33
date	99.03.19.09.00.03;	author brian;	state Exp;
branches;
next	1.32;

1.32
date	99.03.19.01.42.23;	author brian;	state Exp;
branches;
next	1.31;

1.31
date	99.03.18.21.54.23;	author brian;	state Exp;
branches;
next	1.30;

1.30
date	99.03.18.21.53.09;	author brian;	state Exp;
branches;
next	1.29;

1.29
date	99.03.17.00.25.43;	author brian;	state Exp;
branches;
next	1.28;

1.28
date	99.03.11.01.35.07;	author pjanzen;	state Exp;
branches;
next	1.27;

1.27
date	99.03.08.01.40.23;	author brian;	state Exp;
branches;
next	1.26;

1.26
date	99.03.07.11.55.26;	author brian;	state Exp;
branches;
next	1.25;

1.25
date	99.03.04.17.42.26;	author brian;	state Exp;
branches;
next	1.24;

1.24
date	99.03.03.23.01.11;	author brian;	state Exp;
branches;
next	1.23;

1.23
date	99.02.26.21.28.24;	author brian;	state Exp;
branches;
next	1.22;

1.22
date	99.02.25.12.07.23;	author brian;	state Exp;
branches;
next	1.21;

1.21
date	99.02.18.00.50.45;	author brian;	state Exp;
branches;
next	1.20;

1.20
date	99.02.16.00.18.03;	author brian;	state Exp;
branches;
next	1.19;

1.19
date	99.02.14.00.52.52;	author brian;	state Exp;
branches;
next	1.18;

1.18
date	99.02.12.00.53.08;	author brian;	state Exp;
branches;
next	1.17;

1.17
date	99.02.11.10.14.50;	author brian;	state Exp;
branches;
next	1.16;

1.16
date	99.02.06.03.22.42;	author brian;	state Exp;
branches;
next	1.15;

1.15
date	99.02.04.11.54.48;	author brian;	state Exp;
branches;
next	1.14;

1.14
date	99.01.19.22.21.43;	author brian;	state Exp;
branches;
next	1.13;

1.13
date	99.01.19.22.20.46;	author brian;	state Exp;
branches;
next	1.12;

1.12
date	99.01.11.15.08.09;	author brian;	state Exp;
branches;
next	1.11;

1.11
date	99.01.06.00.10.30;	author brian;	state Exp;
branches;
next	1.10;

1.10
date	98.12.16.00.49.17;	author brian;	state Exp;
branches;
next	1.9;

1.9
date	98.12.15.01.20.48;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	98.11.08.13.06.26;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	98.11.08.13.05.48;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	98.11.05.22.00.11;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	98.10.31.17.38.50;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	98.10.29.02.21.46;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	98.09.18.23.28.47;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	98.09.17.00.46.42;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.00.22.26;	author brian;	state Exp;
branches;
next	;


desc
@@


1.122
log
@ppp(8) goes to the bit bucket in the sky
@
text
@.\"
.\" Copyright (c) 2001 Brian Somers <brian@@Awfulhak.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $OpenBSD: ppp.8,v 1.121 2013/07/16 11:13:34 schwarze Exp $
.\"
.Dd $Mdocdate: July 16 2013 $
.Dt PPP 8
.Os
.Sh NAME
.Nm ppp
.Nd Point-to-Point Protocol (a.k.a. user-ppp)
.Sh SYNOPSIS
.Nm ppp
.Op Fl Va mode
.Op Fl nat
.Op Fl quiet
.Op Fl unit Ns Ar N
.Op Ar system ...
.Sh DESCRIPTION
This is a user process
.Em PPP
software package.
Normally,
.Em PPP
is implemented as a part of the kernel (e.g., as managed by
.Xr pppd 8 )
and it's thus somewhat hard to debug and/or modify its behaviour.
However, in this implementation
.Em PPP
is done as a user process with the help of the
tunnel device driver,
.Xr tun 4 .
.Pp
The
.Fl nat
flag does the equivalent of a
.Dq nat enable yes ,
enabling
.Nm Ns 's
network address translation features.
This allows
.Nm
to act as a NAT or masquerading engine for all machines on an internal
LAN.
Refer to the
.Sx NETWORK ADDRESS TRANSLATION (PACKET ALIASING)
section of this manual page for details on how to configure NAT in
.Nm ppp .
.Pp
The
.Fl quiet
flag tells
.Nm
to be silent at startup rather than displaying the mode and interface
to standard output.
.Pp
The
.Fl unit
flag tells
.Nm
to only attempt to open
.Pa /dev/tun Ns Ar N .
Normally,
.Nm
will start with a value of 0 for
.Ar N ,
and keep trying to open a tunnel device by incrementing the value of
.Ar N
by one each time until it succeeds.
If it fails three times in a row
because the device file is missing, it gives up.
.Pp
The following modes are understood by
.Nm :
.Bl -tag -width XXX -offset XXX
.It Fl auto
.Nm
opens the tun interface, configures it, then goes into the background.
The link isn't brought up until outgoing data is detected on the tun
interface at which point
.Nm
attempts to bring up the link.
Packets received (including the first one) while
.Nm
is trying to bring the link up will remain queued for a default of
2 minutes.
See the
.Ic set choked
command below.
.Pp
In
.Fl auto
mode, at least one
.Ic system
must be given on the command line (see below) and a
.Ic set ifaddr
must be done in the system profile that specifies a peer IP address to
use when configuring the interface.
Something like
.Dq 10.0.0.1/0
is usually appropriate.
See the
.Dq pmdemand
system in
.Pa /etc/ppp/ppp.conf.sample
for an example.
.It Fl background
Here,
.Nm
attempts to establish a connection with the peer immediately.
If it succeeds,
.Nm
goes into the background and the parent process returns an exit code
of 0.
If it fails,
.Nm
exits with a non-zero result.
.It Fl foreground
In foreground mode,
.Nm
attempts to establish a connection with the peer immediately, but never
becomes a daemon.
The link is created in background mode.
This is useful if you wish to control
.Nm ppp Ns 's
invocation from another process.
.It Fl direct
This is used for communicating over an already established connection,
usually when receiving incoming connections accepted by
.Xr getty 8 .
.Nm
ignores the
.Ic set device
line and uses descriptor 0 as the link.
.Nm
will also ignore any configured chat scripts unless the
.Dq force-scripts
option has been enabled.
.Pp
If callback is configured,
.Nm
will use the
.Ic set device
information when dialing back.
.It Fl dedicated
This option is designed for machines connected with a dedicated
wire.
.Nm
will always keep the device open and will ignore any configured
chat scripts unless the
.Dq force-scripts
option has been enabled.
.It Fl ddial
This mode is equivalent to
.Fl auto
mode except that
.Nm
will bring the link back up any time it's dropped for any reason.
.It Fl interactive
This is a no-op, and gives the same behaviour as if none of the above
modes have been specified.
.Nm
loads any sections specified on the command line, then provides an
interactive prompt.
.El
.Pp
One or more configuration entries or systems
(as specified in
.Pa /etc/ppp/ppp.conf )
may also be specified on the command line.
.Nm
will read the
.Dq default
system from
.Pa /etc/ppp/ppp.conf
at startup, followed by each of the systems specified on the command line.
.Sh Major Features
.Bl -diag
.It Provides an interactive user interface.
Using its command mode, the user can
easily enter commands to establish the connection with the remote end, check
the status of the connection and close the connection.
All functions can also be optionally password protected for security.
.It Supports both manual and automatic dialing.
Interactive mode has a
.Ic term
command which enables you to talk to the device directly.
When you are connected to the remote peer and it starts to talk
.Em PPP ,
.Nm
detects it and switches to packet mode automatically.
Once you have
determined the proper sequence for connecting with the remote host, you
can write a chat script to define the necessary dialing and login
procedure for later convenience.
.It Supports on-demand dialup capability.
By using
.Fl auto
mode,
.Nm
will act as a daemon and wait for a packet to be sent over the
.Em PPP
link.
When this happens, the daemon automatically dials and establishes the
connection.
In almost the same manner
.Fl ddial
mode (direct-dial mode) also automatically dials and establishes the
connection.
However, it differs in that it will dial the remote site
any time it detects the link is down, even if there are no packets to be
sent.
This mode is useful for full-time connections where we worry less
about line charges and more about being connected full time.
A third
.Fl dedicated
mode is also available.
This mode is targeted at a dedicated link between two machines.
.Nm
will never voluntarily quit from dedicated mode \- you must send it the
.Dq quit all
command via its diagnostic socket.
A
.Dv SIGHUP
will force an LCP renegotiation, and a
.Dv SIGTERM
will force it to exit.
.It Supports client callback.
.Nm
can use either the standard LCP callback protocol or the Microsoft
CallBack Control Protocol
.Pq Lk ftp://ftp.microsoft.com/developr/rfc/cbcp.txt .
.It Supports NAT or packet aliasing.
Packet aliasing (a.k.a. IP masquerading) allows computers on a
private, unregistered network to access the Internet.
The
.Em PPP
host acts as a masquerading gateway.
IP addresses as well as TCP and
UDP port numbers are NAT'd for outgoing packets and de-NAT'd for
returning packets.
.It Supports background PPP connections.
In background mode, if
.Nm
successfully establishes the connection, it will become a daemon.
Otherwise, it will exit with an error.
This allows the setup of
scripts that wish to execute certain commands only if the connection
is successfully established.
.It Supports server-side PPP connections.
In direct mode,
.Nm
acts as server which accepts incoming
.Em PPP
connections on stdin/stdout.
.It Supports PAP and CHAP (RFC 1994, 2433, and 2759) authentication.
With PAP or CHAP, it is possible to skip the Unix style
.Xr login 1
procedure, and use the
.Em PPP
protocol for authentication instead.
If the peer requests Microsoft CHAP authentication and
.Nm
is compiled with DES support, an appropriate MD4/DES response will be
made.
.It Supports RADIUS (RFC 2138 & 2548) authentication.
An extension to PAP and CHAP,
.Em \&R Ns emote
.Em \&A Ns ccess
.Em \&D Ns ial
.Em \&I Ns n
.Em \&U Ns ser
.Em \&S Ns ervice
allows authentication information to be stored in a central or
distributed database along with various per-user framed connection
characteristics.
.It Supports Proxy Arp.
.Nm
can be configured to make one or more proxy arp entries on behalf of
the peer.
This allows routing from the peer to the LAN without
configuring each machine on that LAN.
.It Supports packet filtering.
User can define four kinds of filters: the
.Em in
filter for incoming packets, the
.Em out
filter for outgoing packets, the
.Em dial
filter to define a dialing trigger packet, and the
.Em alive
filter for keeping a connection alive with the trigger packet.
.It Tunnel driver supports bpf.
The user can use
.Xr tcpdump 8
to check the packet flow over the
.Em PPP
link.
.It Supports PPP over TCP and PPP over UDP.
If a device name is specified as
.Em host : Ns Em port Ns
.Xo
.Op / Ns tcp|udp ,
.Xc
.Nm
will open a TCP or UDP connection for transporting data rather than using a
conventional serial device.
UDP connections force
.Nm
into synchronous mode.
.It Supports PPP over Ethernet (RFC 2516).
PPP over Ethernet is supported with the external program
.Xr pppoe 8 .
.It "Supports IETF draft Predictor-1 (RFC 1978) and DEFLATE (RFC 1979) compression."
.Nm
supports not only VJ-compression but also Predictor-1 and DEFLATE compression.
Normally, a modem has built-in compression (e.g., v42.bis) and the system
may receive higher data rates from it as a result of such compression.
While this is generally a good thing in most other situations, this
higher speed data imposes a penalty on the system by increasing the
number of serial interrupts the system has to process in talking to the
modem and also increases latency.
Unlike VJ-compression, Predictor-1 and DEFLATE compression pre-compresses
.Em all
network traffic flowing through the link, thus reducing overheads to a
minimum.
.It Supports Microsoft's IPCP extensions (RFC 1877).
Name Server Addresses and NetBIOS Name Server Addresses can be negotiated
with clients using the Microsoft
.Em PPP
stack (i.e., Win95, WinNT)
.It Supports Multi-link PPP (RFC 1990).
It is possible to configure
.Nm
to open more than one physical connection to the peer, combining the
bandwidth of all links for better throughput.
.It Supports MPPE (draft-ietf-pppext-mppe).
MPPE is Microsoft Point-to-Point Encryption scheme.
It is possible to configure
.Nm
to participate in Microsoft's Windows VPN.
For now,
.Nm
can only get encryption keys from CHAP 81 authentication.
.Nm
must be compiled with DES for MPPE to operate.
.It Supports IPV6CP (RFC 2472).
An IPv6 connection can be made in addition to or instead of the normal
IPv4 connection.
.El
.Sh PERMISSIONS
.Nm
is installed as user
.Dq root
and group
.Dq network ,
with permissions
.Dv 04550 .
By default,
.Nm
will not run if the invoking user ID is not zero.
This may be overridden by using the
.Ic allow users
command in
.Pa /etc/ppp/ppp.conf .
When running as a normal user,
.Nm
switches to user ID 0 in order to alter the system routing table, set up
system lock files and read the ppp configuration files.
All external commands
(executed via the
.Ic shell
or
.No !\& Ns Ic bg
commands)
are executed as the user ID that invoked
.Nm ppp .
Refer to the
.Sq ID0
logging facility if you're interested in what exactly is done as user ID
zero.
.Sh GETTING STARTED
When you first run
.Nm
you may need to deal with some initial configuration details:
.Bl -bullet
.It
Your kernel must include a tunnel device (the GENERIC kernel includes
one by default).
If it doesn't,
you'll need to rebuild your kernel with the following line in
your kernel configuration file:
.Pp
.Dl pseudo-device tun
.Pp
Tun interfaces can be created at runtime using the
.Cm ifconfig tunN create
command or by opening the character special device
.Pa /dev/tunN .
See
.Xr ifconfig 8
and
.Xr tun 4
for more information.
.It
Check your
.Pa /dev
directory for the tunnel device entries
.Pa /dev/tunN ,
where
.Sq N
represents the number of the tun device, starting at zero.
If they don't exist, you can create them by running "sh ./MAKEDEV tunN".
This will create tun devices 0 through
.Ar N .
.It
Make sure that your system has a group named
.Dq network
in the
.Pa /etc/group
file and that the group contains the names of all users expected to use
.Nm ppp .
Refer to the
.Xr group 5
manual page for details.
Each of these users must also be given access using the
.Ic allow users
command in
.Pa /etc/ppp/ppp.conf .
.It
Create a log file.
.Nm
uses
.Xr syslog 3
to log information.
A common log file name is
.Pa /var/log/ppp.log .
To make output go to this file, put the following lines in the
.Pa /etc/syslog.conf
file:
.Bd -literal -offset indent
!ppp
*.*<TAB>/var/log/ppp.log
.Ed
.Pp
It is possible to have more than one
.Em PPP
log file by creating a link to the
.Nm
executable:
.Pp
.Dl # cd /usr/sbin
.Dl # ln ppp ppp0
.Pp
and using
.Bd -literal -offset indent
!ppp0
*.*<TAB>/var/log/ppp0.log
.Ed
.Pp
in
.Pa /etc/syslog.conf .
Don't forget to send a
.Dv HUP
signal to
.Xr syslogd 8
after altering
.Pa /etc/syslog.conf .
.It
Although not strictly relevant to
.Nm ppp Ns 's
operation, you should configure your resolver so that it works correctly.
This can be done by configuring a local DNS
(using
.Xr named 8 )
or by adding the correct
.Dq nameserver
lines to the file
.Pa /etc/resolv.conf .
Refer to the
.Xr resolv.conf 5
manual page for details.
.Pp
Alternatively, if the peer supports it,
.Nm
can be configured to ask the peer for the nameserver address(es) and to
update
.Pa /etc/resolv.conf
automatically.
Refer to the
.Ic enable dns
and
.Ic resolv
commands below for details.
.El
.Sh MANUAL DIALING
In the following examples, we assume that your machine name is
.Dq awfulhak .
When you invoke
.Nm
(see
.Sx PERMISSIONS
above) with no arguments, you are presented with a prompt:
.Bd -literal -offset indent
ppp ON awfulhak>
.Ed
.Pp
The
.Sq ON
part of your prompt should always be in upper case.
If it is in lower case, it means that you must supply a password using the
.Dq passwd
command.
This only ever happens if you connect to a running version of
.Nm
and have not authenticated yourself using the correct password.
.Pp
You can start by specifying the device name and speed:
.Bd -literal -offset indent
ppp ON awfulhak> set device /dev/cua00
ppp ON awfulhak> set speed 38400
.Ed
.Pp
Normally, hardware flow control (CTS/RTS) is used.
However, under
certain circumstances (as may happen when you are connected directly
to certain PPP-capable terminal servers), this may result in
.Nm
hanging as soon as it tries to write data to your communications link
as it is waiting for the CTS (clear to send) signal \- which will never
come.
Thus, if you have a direct line and can't seem to make a
connection, try turning CTS/RTS off with
.Dq set ctsrts off .
If you need to do this, check the
.Dq set accmap
description below too \- you'll probably need to
.Dq set accmap 000a0000 .
.Pp
Usually, parity is set to
.Dq none ,
and this is
.Nm ppp Ns 's
default.
Parity is a rather archaic error checking mechanism that is no
longer used because modern modems do their own error checking, and most
link-layer protocols (that's what
.Nm
is) use much more reliable checking mechanisms.
Parity has a relatively
huge overhead (a 12.5% increase in traffic) and as a result, it is always
disabled
(set to
.Dq none )
when
.Dv PPP
is opened.
However, some ISPs (Internet Service Providers) may use
specific parity settings at connection time (before
.Dv PPP
is opened).
Notably, Compuserve insist on even parity when logging in:
.Bd -literal -offset indent
ppp ON awfulhak> set parity even
.Ed
.Pp
You can now see what your current device settings look like:
.Bd -literal -offset indent
ppp ON awfulhak> show physical
Name: deflink
 State:           closed
 Device:          N/A
 Link Type:       interactive
 Connect Count:   0
 Queued Packets:  0
 Phone Number:    N/A

Defaults:
 Device List:     /dev/cua00
 Characteristics: 38400bps, cs8, even parity, CTS/RTS on

Connect time: 0 secs
0 octets in, 0 octets out
Overall 0 bytes/sec
ppp ON awfulhak>
.Ed
.Pp
The
.Ic term
command can now be used to talk directly to the device:
.Bd -literal -offset indent
ppp ON awfulhak> term
at
OK
atdt123456
CONNECT
login: myispusername
Password: myisppassword
Protocol: ppp
.Ed
.Pp
When the peer starts to talk in
.Em PPP ,
.Nm
detects this automatically and returns to command mode.
.Bd -literal -offset indent
ppp ON awfulhak>               # No link has been established
Ppp ON awfulhak>               # We've connected & finished LCP
PPp ON awfulhak>               # We've authenticated
PPP ON awfulhak>               # We've agreed IP numbers
.Ed
.Pp
If it does not, it's probable that the peer is waiting for your end to
start negotiating.
To force
.Nm
to start sending
.Em PPP
configuration packets to the peer, use the
.Ic ~p
command to drop out of terminal mode and enter packet mode.
.Pp
If you never even receive a login prompt, it is quite likely that the
peer wants to use PAP or CHAP authentication instead of using Unix-style
login/password authentication.
To set things up properly, drop back to
the prompt and set your authentication name and key, then reconnect:
.Bd -literal -offset indent
~.
ppp ON awfulhak> set authname myispusername
ppp ON awfulhak> set authkey myisppassword
ppp ON awfulhak> term
at
OK
atdt123456
CONNECT
.Ed
.Pp
You may need to tell ppp to initiate negotiations with the peer here too:
.Bd -literal -offset indent
~p
ppp ON awfulhak>               # No link has been established
Ppp ON awfulhak>               # We've connected & finished LCP
PPp ON awfulhak>               # We've authenticated
PPP ON awfulhak>               # We've agreed IP numbers
.Ed
.Pp
You are now connected!
Note that
.Sq PPP
in the prompt has changed to capital letters to indicate that you have
a peer connection.
If only some of the three Ps go upper case, wait until
either everything is upper case or lower case.
If they revert to lower case, it means that
.Nm
couldn't successfully negotiate with the peer.
A good first step for troubleshooting at this point would be:
.Bd -literal -offset indent
ppp ON awfulhak> set log local phase lcp ipcp
.Ed
.Pp
\&...and try again.
Refer to the
.Ic set log
command description below for further details.
If things fail at this point,
it is quite important that you turn logging on and try again.
It is also
important that you note any prompt changes and report them to anyone trying
to help you.
.Pp
When the link is established, the
.Ic show
command can be used to see how things are going:
.Bd -literal -offset indent
PPP ON awfulhak> show physical
* Modem related information is shown here *
PPP ON awfulhak> show ccp
* CCP (compression) related information is shown here *
PPP ON awfulhak> show lcp
* LCP (line control) related information is shown here *
PPP ON awfulhak> show ipcp
* IPCP (IP) related information is shown here *
PPP ON awfulhak> show ipv6cp
* IPV6CP (IPv6) related information is shown here *
PPP ON awfulhak> show link
* Link (high level) related information is shown here *
PPP ON awfulhak> show bundle
* Logical (high level) connection related information is shown here *
.Ed
.Pp
At this point, your machine has a host route to the peer.
This means
that you can only make a connection with the host on the other side
of the link.
If you want to add a default route entry (telling your
machine to send all packets without another routing entry to the other
side of the
.Em PPP
link), enter the following command:
.Bd -literal -offset indent
PPP ON awfulhak> add default HISADDR
.Ed
.Pp
The string
.Dq HISADDR
represents the IP address of the connected peer.
If the
.Ic add
command fails due to an existing route, you can overwrite the existing
route using
.Ic add! :
.Bd -literal -offset indent
PPP ON awfulhak> add! default HISADDR
.Ed
.Pp
This command can also be executed before actually making the connection.
If a new IP address is negotiated at connection time,
.Nm
will update your default route accordingly.
.Pp
You can now use your network applications (ping, telnet, ftp, etc.)\&
in other windows or terminals on your machine.
If you wish to reuse the current terminal, you can put
.Nm
into the background using your standard shell suspend and background
commands (usually
.Sq ^Z
followed by
.Sq bg ) .
.Pp
Refer to the
.Sx PPP COMMAND LIST
section for details on all available commands.
.Sh AUTOMATIC DIALING
To use automatic dialing, you must prepare some Dial and Login chat scripts.
See the example definitions in
.Pa /etc/ppp/ppp.conf.sample
(the format of
.Pa /etc/ppp/ppp.conf
is pretty simple).
Each line contains one comment, inclusion, label, or command:
.Bl -bullet
.It
A line starting with a
.Sq #
character is treated as a comment line.
Leading whitespace is ignored when identifying comment lines.
.It
An inclusion is a line beginning with the word
.Dq !include .
It must have one argument \- the file to include.
You may wish to
.Dq !include ~/.ppp.conf
for compatibility with older versions of
.Nm ppp .
.It
A label name starts in the first column and is followed by
a
.Sq \&:
character.
.It
A command line must contain a space or tab in the first column.
.It
A string starting with a
.Sq $
character is substituted with the value of the environment variable by
the same name.
Likewise, a string starting with a
.Sq ~
character is substituted with the full path to the home directory of
the user account by the same name, and the
.Sq ~
character by itself is substituted with the full path to the home directory
of the current user.
Any characters following a
.Sq #
character are ignored.
To include a literal
.Sq $ ,
.Sq ~ ,
or
.Sq #
character in a command or argument, escape it with a
.Sq \e
character or quote the command/argument using the
.Sq \&"
character.
For example:
.Pp
.Dl set password pa\e$ss\e~word
.Dl set password \&"user#1234@@example.net\&"
.El
.Pp
The
.Pa /etc/ppp/ppp.conf
file should consist of at least a
.Dq default
section.
This section is always executed.
It should also contain
one or more sections, named according to their purpose, for example,
.Dq MyISP
would represent your ISP, and
.Dq ppp-in
would represent an incoming
.Nm
configuration.
You can now specify the destination label name when you invoke
.Nm ppp .
Commands associated with the
.Dq default
label are executed, followed by those associated with the destination
label provided.
When
.Nm
is started with no arguments, the
.Dq default
section is still executed.
The
.Ic load
command can be used to manually load a section from the
.Pa /etc/ppp/ppp.conf
file:
.Bd -literal -offset indent
ppp ON awfulhak> load MyISP
.Ed
.Pp
Note: no action is taken by
.Nm
after a section is loaded, whether it's the result of passing a label on
the command line or using the
.Ic load
command.
Only the commands specified for that label in the configuration
file are executed.
However, when invoking
.Nm
with the
.Fl background ,
.Fl ddial ,
or
.Fl dedicated
switches, the link mode tells
.Nm
to establish a connection.
Refer to the
.Ic set mode
command below for further details.
.Pp
Once the connection is made, the
.Dq ppp
portion of the prompt will change to
.Dq PPP :
.Bd -literal -offset indent
# ppp MyISP
\&...
ppp ON awfulhak> dial
Ppp ON awfulhak>
PPp ON awfulhak>
PPP ON awfulhak>
.Ed
.Pp
The Ppp prompt indicates that
.Nm
has entered the authentication phase.
The PPp prompt indicates that
.Nm
has entered the network phase.
The PPP prompt indicates that
.Nm
has successfully negotiated a network layer protocol and is in
a usable state.
.Pp
If the
.Pa /etc/ppp/ppp.linkup
file is available, its contents are executed
when the
.Em PPP
connection is established.
See the provided
.Dq pmdemand
example in
.Pa /etc/ppp/ppp.conf.sample
which runs a script in the background after the connection is established
(refer to the
.Ic shell
and
.Ic bg
commands below for a description of possible substitution strings).
Similarly, when a connection is closed, the contents of the
.Pa /etc/ppp/ppp.linkdown
file are executed.
Both of these files have the same format as
.Pa /etc/ppp/ppp.conf .
.Pp
In previous versions of
.Nm ppp ,
it was necessary to re-add routes such as the default route in the
.Pa ppp.linkup
file.
.Nm
supports
.Sq sticky routes ,
where all routes that contain the
.Dv HISADDR ,
.Dv MYADDR ,
.Dv HISADDR6 ,
or
.Dv MYADDR6
literals will automatically be updated when the values of these variables
change.
.Sh BACKGROUND DIALING
If you want to establish a connection using
.Nm
non-interactively (such as from a
.Xr crontab 5
entry or an
.Xr at 1
job), you should use the
.Fl background
option.
When
.Fl background
is specified,
.Nm
attempts to establish the connection immediately.
If multiple phone
numbers are specified, each phone number will be tried once.
If the attempt fails,
.Nm
exits immediately with a non-zero exit code.
If it succeeds, then
.Nm
becomes a daemon, and returns an exit status of zero to its caller.
The daemon exits automatically if the connection is dropped by the
remote system, or it receives a
.Dv TERM
signal.
.Sh DIAL ON DEMAND
Demand dialing is enabled with the
.Fl auto
or
.Fl ddial
options.
You must also specify the destination label in
.Pa /etc/ppp/ppp.conf
to use.
It must contain the
.Ic set ifaddr
command to define the remote peer's IP address
(refer to
.Pa /etc/ppp/ppp.conf.sample ) .
.Bd -literal -offset indent
# ppp -auto pmdemand
.Ed
.Pp
When
.Fl auto
or
.Fl ddial
is specified,
.Nm
runs as a daemon but you can still configure or examine its
configuration by using the
.Ic set server
command in
.Pa /etc/ppp/ppp.conf
(for example,
.Dq Li set server +3000 mypasswd )
and connecting to the diagnostic port as follows:
.Bd -literal -offset indent
# pppctl 3000	(assuming tun0)
Password:
PPP ON awfulhak> show who
tcp (127.0.0.1:1028) *
.Ed
.Pp
The
.Ic show who
command lists users that are currently connected to
.Nm
itself.
If the diagnostic socket is closed or changed to a different
socket, all connections are immediately dropped.
.Pp
In
.Fl auto
mode, when an outgoing packet is detected,
.Nm
will perform the dialing action (chat script) and try to connect
with the peer.
In
.Fl ddial
mode, the dialing action is performed any time the line is found
to be down.
If the connect fails, the default behaviour is to wait 30 seconds
and then attempt to connect when another outgoing packet is detected.
This behaviour can be changed using the
.Ic set redial
command:
.Bd -ragged -offset indent
.Ic set redial
.Sm off
.Ar secs
.Oo + Ar inc
.Op - Ar max
.Oc
.Op . Ar next
.Sm on
.Op Ar attempts
.Ed
.Pp
.Bl -tag -width attempts -compact
.It Ar secs
The number of seconds to wait before attempting
to connect again.
If the argument is the literal string
.Sq Li random ,
the delay period is a random value between 1 and 30 seconds inclusive.
.It Ar inc
The number of seconds that
.Ar secs
should be incremented each time a new dial attempt is made.
The timeout reverts to
.Ar secs
only after a successful connection is established.
The default value for
.Ar inc
is zero.
.It Ar max
The maximum number of times
.Nm
should increment
.Ar secs .
The default value for
.Ar max
is 10.
.It Ar next
The number of seconds to wait before attempting
to dial the next number in a list of numbers (see the
.Ic set phone
command).
The default is 3 seconds.
Again, if the argument is the literal string
.Sq Li random ,
the delay period is a random value between 1 and 30 seconds.
.It Ar attempts
The maximum number of times to try to connect for each outgoing packet
that triggers a dial.
The previous value is unchanged if this parameter is omitted.
If a value of zero is specified for
.Ar attempts ,
.Nm
will keep trying until a connection is made.
.El
.Pp
So, for example:
.Bd -literal -offset indent
set redial 10.3 4
.Ed
.Pp
\&...will attempt to connect 4 times for each outgoing packet that causes
a dial attempt with a 3 second delay between each number and a 10 second
delay after all numbers have been tried.
If multiple phone numbers
are specified, the total number of attempts is still 4 (it does not
attempt each number 4 times).
.Pp
Alternatively,
.Bd -literal -offset indent
set redial 10+10-5.3 20
.Ed
.Pp
\&...tells
.Nm
to attempt to connect 20 times.
After the first attempt,
.Nm
pauses for 10 seconds.
After the next attempt it pauses for 20 seconds
and so on until after the sixth attempt it pauses for 1 minute.
The next 14 pauses will also have a duration of one minute.
If
.Nm
connects, disconnects, and fails to connect again, the timeout starts again
at 10 seconds.
.Pp
Modifying the dial delay is very useful when running
.Nm
in
.Fl auto
mode on both ends of the link.
If each end has the same timeout,
both ends wind up calling each other at the same time if the link
drops and both ends have packets queued.
At some locations, the serial link may not be reliable, and carrier
may be lost at inappropriate times.
It is possible to have
.Nm
redial should carrier be unexpectedly lost during a session.
.Bd -literal -offset indent
set reconnect timeout ntries
.Ed
.Pp
This command tells
.Nm
to re-establish the connection
.Ar ntries
times on loss of carrier with a pause of
.Ar timeout
seconds before each try.
For example,
.Bd -literal -offset indent
set reconnect 3 5
.Ed
.Pp
\&...tells
.Nm
that on an unexpected loss of carrier, it should wait
3 seconds before attempting to reconnect.
This may happen up to 5 times before
.Nm
gives up.
The default value of ntries is zero (no reconnect).
Care should be taken with this option.
If the local timeout is slightly
longer than the remote timeout, the reconnect feature will always be
triggered (up to the given number of times) after the remote side
times out and hangs up.
NOTE: In this context, losing too many LQRs constitutes a loss of
carrier and will trigger a reconnect.
If the
.Fl background
flag is specified, all phone numbers are dialed at most once until
a connection is made.
The next number redial period specified with the
.Ic set redial
command is honoured, as is the reconnect tries value.
If your redial
value is less than the number of phone numbers specified, not all
the specified numbers will be tried.
To terminate the program, type:
.Bd -literal -offset indent
PPP ON awfulhak> close
ppp ON awfulhak> quit all
.Ed
.Pp
A simple
.Ic quit
command will terminate the
.Xr pppctl 8
or
.Xr telnet 1
connection but not the
.Nm
program itself.
You must use
.Ic quit all
to terminate
.Nm
as well.
.Sh RECEIVING INCOMING PPP CONNECTIONS (Method 1)
To handle an incoming
.Em PPP
connection request, follow these steps:
.Bl -enum
.It
Make sure the modem
is configured correctly:
.Pp
.Bl -bullet -compact
.It
Use Hardware Handshake (CTS/RTS) for flow control.
.It
Modem should be set to NO echo back (ATE0) and NO results string (ATQ1).
.El
.It
Edit
.Pa /etc/ttys
to enable a
.Xr getty 8
on the port where the modem is attached.
For example:
.Pp
.Dl ttyd1 Qo /usr/libexec/getty std.38400 Qc dialup on secure
.Pp
Don't forget to send a
.Dv HUP
signal to the
.Xr init 8
process to start the
.Xr getty 8 :
.Pp
.Dl # kill -HUP 1
.Pp
It is usually also necessary to train your modem to the same DTR speed
as the getty:
.Bd -literal -offset indent
# ppp
ppp ON awfulhak> set device /dev/cua01
ppp ON awfulhak> set speed 38400
ppp ON awfulhak> term
deflink: Entering terminal mode on /dev/cua01
Type `~?' for help
at
OK
at
OK
atz
OK
at
OK
~.
ppp ON awfulhak> quit
.Ed
.It
Create a
.Pa /usr/local/bin/ppplogin
file with the following contents:
.Bd -literal -offset indent
#! /bin/sh
exec /usr/sbin/ppp -direct incoming
.Ed
.Pp
Direct mode
.Pq Fl direct
lets
.Nm
work with stdin and stdout.
You can also use
.Xr pppctl 8
to connect to a configured diagnostic port, in the same manner as with
client-side
.Nm ppp .
.Pp
Here, the
.Ar incoming
section must be set up in
.Pa /etc/ppp/ppp.conf .
.Pp
Make sure that the
.Ar incoming
section contains the
.Dq allow users
command as appropriate.
.It
Prepare an account for the incoming user.
.Bd -literal
ppp:xxxx:66:66:PPP Login User:/home/ppp:/usr/local/bin/ppplogin
.Ed
.Pp
Refer to the manual entries for
.Xr adduser 8
and
.Xr vipw 8
for details.
.It
Support for IPCP Domain Name Server and NetBIOS Name Server negotiation
can be enabled using the
.Ic accept dns
and
.Ic set nbns
commands.
Refer to their descriptions below.
.El
.Sh RECEIVING INCOMING PPP CONNECTIONS (Method 2)
This method differs in that we use
.Nm
to authenticate the connection rather than
.Xr login 1 :
.Bl -enum
.It
Configure your default section in
.Pa /etc/gettytab
with automatic ppp recognition by specifying the
.Sq pp
capability:
.Bd -literal -offset indent
default:\\
	:pp=/usr/local/bin/ppplogin:\\
	.....
.Ed
.It
Configure your serial device(s), enable a
.Xr getty 8 ,
and create
.Pa /usr/local/bin/ppplogin
as in the first three steps for method 1 above.
.It
Add either
.Dq enable chap
or
.Dq enable pap
(or both)
to
.Pa /etc/ppp/ppp.conf
under the
.Dq incoming
label (or whatever label
.Pa ppplogin
uses).
.It
Create an entry in
.Pa /etc/ppp/ppp.secret
for each incoming user:
.Bd -literal -offset indent
Pfred<TAB>xxxx
Pgeorge<TAB>yyyy
.Ed
.El
.Pp
Now, as soon as
.Xr getty 8
detects a ppp connection (by recognising the HDLC frame headers), it runs
.Pa /usr/local/bin/ppplogin .
.Pp
It is
.Em VITAL
that either PAP or CHAP are enabled as above.
If they are not, you are
allowing anybody to establish a ppp session with your machine
.Em without
a password, opening yourself up to all sorts of potential attacks.
.Sh AUTHENTICATING INCOMING CONNECTIONS
Normally, the receiver of a connection requires that the peer
authenticates itself.
This may be done using
.Xr login 1 ,
but alternatively, you can use PAP or CHAP.
CHAP is the more secure of the two, but some clients may not support it.
Once you decide which you wish to use, add the command
.Dq enable chap
or
.Dq enable pap
to the relevant section of
.Pa ppp.conf .
.Pp
You must then configure the
.Pa /etc/ppp/ppp.secret
file.
This file contains one line per possible client, each line
containing up to five fields:
.Bd -ragged -offset indent
.Ar name Ar key Oo
.Ar hisaddr Op Ar label Op Ar callback-number
.Oc
.Ed
.Pp
The
.Ar name
and
.Ar key
specify the client username and password.
If
.Ar key
is
.Sq \&*
and PAP is being used,
.Nm
will look up the password database
.Pq Xr passwd 5
when authenticating.
If the client does not offer a suitable response based on any
.Ar name Ns / Ns Ar key
combination in
.Pa ppp.secret ,
authentication fails.
.Pp
If authentication is successful,
.Ar hisaddr
(if specified)
is used when negotiating IP numbers.
See the
.Ic set ifaddr
command for details.
.Pp
If authentication is successful and
.Ar label
is specified, the current system label is changed to match the given
.Ar label .
This will change the subsequent parsing of the
.Pa ppp.linkup
and
.Pa ppp.linkdown
files.
.Pp
If authentication is successful and
.Ar callback-number
is specified and
.Dq set callback
has been used in
.Pa ppp.conf ,
the client will be called back on the given number.
If CBCP is being used,
.Ar callback-number
may also contain a list of numbers or a
.Sq \&* ,
as if passed to the
.Dq set cbcp
command.
The value will be used in
.Nm ppp Ns 's
subsequent CBCP phase.
.Sh PPP OVER TCP and UDP (a.k.a. Tunnelling)
Instead of running
.Nm
over a serial link, it is possible to
use a TCP connection instead by specifying the host, port, and protocol as the
device:
.Pp
.Dl set device ui-gate:6669/tcp
.Pp
Instead of opening a serial device,
.Nm
will open a TCP connection to the given machine on the given
socket.
It should be noted however that
.Nm
doesn't use the telnet protocol and will be unable to negotiate
with a telnet server.
You should set up a port for receiving this
.Em PPP
connection on the receiving machine (ui-gate).
This is done by first updating
.Pa /etc/services
to name the service:
.Pp
.Dl ppp-in 6669/tcp # Incoming PPP connections over TCP
.Pp
and updating
.Pa /etc/inetd.conf
to tell
.Xr inetd 8
how to deal with incoming connections on that port:
.Pp
.Dl ppp-in stream tcp nowait root /usr/sbin/ppp ppp -direct ppp-in
.Pp
Don't forget to send a
.Dv HUP
signal to
.Xr inetd 8
after you've updated
.Pa /etc/inetd.conf .
Here, we use a label named
.Dq ppp-in .
The entry in
.Pa /etc/ppp/ppp.conf
on ui-gate (the receiver) should contain the following:
.Bd -literal -offset indent
ppp-in:
 set timeout 0
 set ifaddr 10.0.4.1 10.0.4.2
.Ed
.Pp
and the entry in
.Pa /etc/ppp/ppp.linkup
should contain:
.Bd -literal -offset indent
ppp-in:
 add 10.0.1.0/24 HISADDR
.Ed
.Pp
It is necessary to put the
.Dq add
command in
.Pa ppp.linkup
to ensure that the route is only added after
.Nm
has negotiated and assigned addresses to its interface.
.Pp
You may also want to enable PAP or CHAP for security.
To enable PAP, add the following line:
.Bd -literal -offset indent
 enable PAP
.Ed
.Pp
You'll also need to create the following entry in
.Pa /etc/ppp/ppp.secret :
.Bd -literal -offset indent
MyAuthName MyAuthPasswd
.Ed
.Pp
If
.Ar MyAuthPasswd
is a
.Sq * ,
the password is looked up in the
.Xr passwd 5
database.
.Pp
The entry in
.Pa /etc/ppp/ppp.conf
on awfulhak (the initiator) should contain the following:
.Bd -literal -offset indent
ui-gate:
 set escape 0xff
 set device ui-gate:ppp-in/tcp
 set dial
 set timeout 30
 set log Phase Chat Connect hdlc LCP IPCP IPV6CP CCP tun
 set ifaddr 10.0.4.2 10.0.4.1
.Ed
.Pp
\&...with the route set up in
.Pa /etc/ppp/ppp.linkup :
.Bd -literal -offset indent
ui-gate:
 add 10.0.2.0/24 HISADDR
.Ed
.Pp
Again, if you're enabling PAP, you'll also need this in the
.Pa /etc/ppp/ppp.conf
profile:
.Bd -literal -offset indent
 set authname MyAuthName
 set authkey MyAuthKey
.Ed
.Pp
We're assigning the address of 10.0.4.1 to ui-gate, and the address
10.0.4.2 to awfulhak.
To open the connection, just type
.Pp
.Dl awfulhak # ppp -background ui-gate
.Pp
The result will be an additional "route" on awfulhak to the
10.0.2.0/24 network via the TCP connection, and an additional
"route" on ui-gate to the 10.0.1.0/24 network.
The networks are effectively bridged \- the underlying TCP
connection may be across a public network (such as the
Internet), and the
.Em PPP
traffic is conceptually encapsulated
(although not packet by packet) inside the TCP stream between
the two gateways.
.Pp
The major disadvantage of this mechanism is that there are two
"guaranteed delivery" mechanisms in place \- the underlying TCP
stream and whatever protocol is used over the
.Em PPP
link \- probably TCP again.
If packets are lost, both levels will
get in each others way trying to negotiate sending of the missing
packet.
.Pp
To avoid this overhead, it is also possible to do all this using
UDP instead of TCP as the transport by simply changing the protocol
from "tcp" to "udp".
When using UDP as a transport,
.Nm
will operate in synchronous mode.
This is another gain as the incoming
data does not have to be rearranged into packets.
.Pp
Care should be taken when adding a default route through a tunnelled
setup like this.
It is quite common for the default route
(added in
.Pa /etc/ppp/ppp.linkup )
to end up routing the link's TCP connection through the tunnel,
effectively garrotting the connection.
To avoid this, make sure you add a static route for the benefit of
the link:
.Bd -literal -offset indent
ui-gate:
 set escape 0xff
 set device ui-gate:ppp-in/tcp
 add ui-gate x.x.x.x
 .....
.Ed
.Pp
where
.Dq x.x.x.x
is the IP number that your route to
.Dq ui-gate
would normally use.
.Pp
When routing your connection across a public network such as the Internet,
it is preferable to encrypt the data.
This can be done with the help of the MPPE protocol, although currently this
means that you will not be able to also compress the traffic as MPPE is
implemented as a compression layer (thank Microsoft for this).
To enable MPPE encryption, add the following lines to
.Pa /etc/ppp/ppp.conf
on the server:
.Bd -literal -offset indent
  enable MSCHAPv2
  disable deflate pred1
  deny deflate pred1
.Ed
.Pp
Ensure that you've put the requisite entry in
.Pa /etc/ppp/ppp.secret
(MSCHAPv2 is challenge based, so
.Xr passwd 5
cannot be used).
.Pp
MSCHAPv2 and MPPE are accepted by default, so the client end should work
without any additional changes (although ensure you have
.Dq set authname
and
.Dq set authkey
in your profile).
.Sh NETWORK ADDRESS TRANSLATION (PACKET ALIASING)
The
.Fl nat
command line option enables network address translation (a.k.a. packet
aliasing).
This allows the
.Nm
host to act as a masquerading gateway for other computers over
a local area network.
Outgoing IP packets are NAT'd so that they appear to come from the
.Nm
host, and incoming packets are de-NAT'd so that they are routed
to the correct machine on the local area network.
NAT allows computers on private, unregistered subnets to have Internet
access, although they are invisible from the outside world.
In general, correct
.Nm
operation should first be verified with network address translation disabled.
Then, the
.Fl nat
option should be switched on, and network applications (web browser,
.Xr telnet 1 ,
.Xr ftp 1 ,
.Xr ping 8 ,
.Xr traceroute 8 ,
etc.) should be checked on the
.Nm
host.
Finally, the same or similar applications should be checked on other
computers in the LAN.
If network applications work correctly on the
.Nm
host, but not on other machines in the LAN, then the masquerading
software is working properly, but the host is either not forwarding
or possibly receiving IP packets.
Check that IP forwarding is enabled in
.Pa /etc/sysctl.conf
and that other machines have designated the
.Nm
host as the gateway for the LAN.
.Sh PACKET FILTERING
This implementation supports packet filtering.
There are four kinds of
filters: the
.Em in
filter, the
.Em out
filter, the
.Em dial
filter, and the
.Em alive
filter.
Here are the basics:
.Bl -bullet
.It
A filter definition has the following syntax:
.Pp
.Ic set filter
.Ar name
.Ar rule-no
.Ar action
.Op !\&
.Oo
.Op host
.Ar src_addr Ns Op / Ns Ar width
.Op Ar dst_addr Ns Op / Ns Ar width
.Oc
.Ar [ proto Op src Ar cmp port
.Op dst Ar cmp port
.Op estab
.Op syn
.Op finrst
.Op timeout Ar secs ]
.Bl -enum
.It
.Ar Name
should be one of
.Dq in ,
.Dq out ,
.Dq dial ,
or
.Dq alive .
.It
.Ar Rule-no
is a numeric value between 0 and 39
specifying the rule number.
Rules are specified in numeric order according to
.Ar rule-no ,
but only if rule 0 is defined.
.It
.Ar Action
may be specified as
.Dq permit
or
.Dq deny ,
in which case if a given packet matches the rule, the associated action
is taken immediately.
.Ar Action
can also be specified as
.Dq clear
to clear the action associated with that particular rule, or as a new
rule number greater than the current rule.
In this case, if a given
packet matches the current rule, the packet will next be matched against
the new rule number (rather than the next rule number).
.Pp
The
.Ar action
may optionally be followed with an exclamation mark
.Pq Sq !\& ,
telling
.Nm
to reverse the sense of the following match.
.It
.Op Ar src_addr Ns Op / Ns Ar width
and
.Op Ar dst_addr Ns Op / Ns Ar width
are the source and destination IP number specifications.
If
.Op / Ns Ar width
is specified, it gives the number of relevant netmask bits,
allowing the specification of an address range.
.Pp
Either
.Ar src_addr
or
.Ar dst_addr
may be given the values
.Dv MYADDR ,
.Dv HISADDR ,
.Dv MYADDR6 ,
or
.Dv HISADDR6
(refer to the description of the
.Ic bg
command for a description of these values).
When these values are used,
the filters will be updated any time the values change.
This is similar to the behaviour of the
.Ic add
command below.
.It
.Ar Proto
may be any protocol from
.Xr protocols 5 .
.It
.Ar Cmp
is one of
.Sq \&lt ,
.Sq \&eq ,
or
.Sq \&gt ,
meaning less-than, equal, and greater-than, respectively.
.Ar Port
can be specified as a numeric port or by a service name from
.Pa /etc/services .
.It
The
.Sq estab ,
.Sq syn ,
and
.Sq finrst
flags are only allowed when
.Ar proto
is set to
.Sq tcp ,
and represent the TH_ACK, TH_SYN, and TH_FIN or TH_RST TCP flags, respectively.
.It
The timeout value adjusts the current idle timeout to at least
.Ar secs
seconds.
If a timeout is given in the alive filter as well as in the in/out
filter, the in/out value is used.
If no timeout is given, the default timeout (set using
.Ic set timeout
and defaulting to 180 seconds) is used.
.El
.It
Each filter can hold up to 40 rules, starting from rule 0.
The entire rule set is not effective until rule 0 is defined,
i.e., the default is to allow everything through.
.It
If no rule in a defined set of rules matches a packet, that packet will
be discarded (blocked).
If there are no rules in a given filter, the packet will be permitted.
.It
It's possible to filter based on the payload of UDP frames where those
frames contain a
.Em PROTO_IP
.Em PPP
frame header.
See the
.Ar filter-decapsulation
option below for further details.
.It
Use
.Dq Li set filter name \-1
to flush all rules.
.El
.Pp
See
.Pa /etc/ppp/ppp.conf.sample .
.Sh SETTING THE IDLE TIMER
To check/set the idle timer, use the
.Ic show bundle
and
.Ic set timeout
commands:
.Bd -literal -offset indent
ppp ON awfulhak> set timeout 600
.Ed
.Pp
The timeout period is measured in seconds, the default value for which
is 180 seconds
(or 3 min).
To disable the idle timer function, use the following command:
.Bd -literal -offset indent
ppp ON awfulhak> set timeout 0
.Ed
.Pp
In
.Fl ddial
and
.Fl dedicated
modes, the idle timeout is ignored.
In
.Fl auto
mode, when the idle timeout causes the
.Em PPP
session to be
closed, the
.Nm
program itself remains running.
Another trigger packet will cause it to attempt to re-establish the link.
.Sh PREDICTOR-1 and DEFLATE COMPRESSION
.Nm
supports both Predictor type 1 and deflate compression.
By default,
.Nm
will attempt to use (or be willing to accept) both compression protocols
when the peer agrees
(or requests them).
The deflate protocol is preferred by
.Nm ppp .
Refer to the
.Ic disable
and
.Ic deny
commands if you wish to disable this functionality.
.Pp
It is possible to use a different compression algorithm in each direction
by using only one of
.Dq disable deflate
and
.Dq deny deflate
(assuming that the peer supports both algorithms).
.Pp
By default, when negotiating DEFLATE,
.Nm
will use a window size of 15.
Refer to the
.Ic set deflate
command if you wish to change this behaviour.
.Pp
A special algorithm called DEFLATE24 is also available, and is disabled
and denied by default.
This is exactly the same as DEFLATE except that
it uses CCP ID 24 to negotiate.
This allows
.Nm
to successfully negotiate DEFLATE with
.Nm pppd
version 2.3.*.
.Sh CONTROLLING IP ADDRESS
For IPv4,
.Nm
uses IPCP to negotiate IP addresses.
Each side of the connection
specifies the IP address that it's willing to use, and if the requested
IP address is acceptable then
.Nm
returns an ACK to the requester.
Otherwise,
.Nm
returns NAK to suggest that the peer use a different IP address.
When
both sides of the connection agree to accept the received request (and
send an ACK), IPCP is set to the open state and a network level connection
is established.
To control this IPCP behaviour, this implementation has the
.Ic set ifaddr
command for defining the local and remote IP address:
.Bd -ragged -offset indent
.Ic set ifaddr Oo Ar src_addr Ns
.Op / Ns Ar \&nn
.Oo Ar dst_addr Ns Op / Ns Ar \&nn
.Oo Ar netmask
.Op Ar trigger_addr
.Oc
.Oc
.Oc
.Ed
.Pp
.Ar src_addr
is the IP address that the local side is willing to use,
.Ar dst_addr
is the IP address which the remote side should use, and
.Ar netmask
is the netmask that should be used.
.Ar src_addr
defaults to the current
.Xr hostname 1 ,
.Ar dst_addr
defaults to 0.0.0.0, and
.Ar netmask
defaults to whatever mask is appropriate for
.Ar src_addr .
It is only possible to make
.Ar netmask
smaller than the default.
The usual value is 255.255.255.255, as
most kernels ignore the netmask of a POINTOPOINT interface.
.Pp
Some incorrect
.Em PPP
implementations require that the peer negotiates a specific IP
address instead of
.Ar src_addr .
If this is the case,
.Ar trigger_addr
may be used to specify this IP number.
This will not affect the
routing table unless the other side agrees with this proposed number.
.Bd -literal -offset indent
set ifaddr 192.244.177.38 192.244.177.2 255.255.255.255 0.0.0.0
.Ed
.Pp
The above specification means:
.Pp
.Bl -bullet -compact
.It
I will first suggest that my IP address should be 0.0.0.0, but I
will only accept an address of 192.244.177.38.
.It
I strongly insist that the peer uses 192.244.177.2 as his own
address and won't permit the use of any IP address but 192.244.177.2.
When the peer requests another IP address, I will always suggest that
it uses 192.244.177.2.
.It
The routing table entry will have a netmask of 0xffffffff.
.El
.Pp
This is all fine when each side has a pre-determined IP address, however
it is often the case that one side is acting as a server which controls
all IP addresses and the other side should go along with it.
In order to allow more flexible behaviour, the
.Ic set ifaddr
command allows the user to specify IP addresses more loosely:
.Pp
.Dl set ifaddr 192.244.177.38/24 192.244.177.2/20
.Pp
A number followed by a slash
.Pq Sq /
represents the number of bits significant in the IP address.
The above example means:
.Pp
.Bl -bullet -compact
.It
I'd like to use 192.244.177.38 as my address if it is possible, but I'll
also accept any IP address between 192.244.177.0 and 192.244.177.255.
.It
I'd like to make him use 192.244.177.2 as his own address, but I'll also
permit him to use any IP address between 192.244.176.0 and
192.244.191.255.
.It
As you may have already noticed, 192.244.177.2 is equivalent to saying
192.244.177.2/32.
.It
As an exception, 0 is equivalent to 0.0.0.0/0, meaning that I have no
preferred IP address and will obey the remote peer's selection.
When using zero, no routing table entries will be made until a connection
is established.
.It
192.244.177.2/0 means that I'll accept/permit any IP address but I'll
suggest that 192.244.177.2 be used first.
.El
.Pp
When negotiating IPv6 addresses, no control is given to the user.
IPV6CP negotiation is fully automatic.
.Sh CONNECTING WITH YOUR INTERNET SERVICE PROVIDER
The following steps should be taken when connecting to your ISP:
.Bl -enum
.It
Describe your providers phone number(s) in the dial script using the
.Ic set phone
command.
This command allows you to set multiple phone numbers for
dialing and redialing separated by either a pipe
.Pq Sq \&|
or a colon
.Pq Sq \&: :
.Bd -ragged -offset indent
.Ic set phone
.Sm off
.Ar telno
.Op | Ar backupnumber
.Op : Ar nextnumber
.Sm on
.Ar ...
.Ed
.Pp
Numbers after the first in a pipe-separated list are only used if the
previous number was used in a failed dial or login script.
Numbers
separated by a colon are used sequentially, irrespective of what happened
as a result of using the previous number.
For example:
.Bd -literal -offset indent
set phone "1234567|2345678:3456789|4567890"
.Ed
.Pp
Here, the 1234567 number is attempted.
If the dial or login script fails,
the 2345678 number is used next time, but *only* if the dial or login script
fails.
On the dial after this, the 3456789 number is used.
The 4567890
number is only used if the dial or login script using the 3456789 fails.
Irrespective of whether the login script of the 2345678 number
succeeds or fails,
the next number is still the 3456789 number.
.Pp
As many pipes and colons can be used as are necessary
(although a given site would usually prefer to use either the pipe or the
colon, but not both).
The next number redial timeout is used between all numbers.
When the end of the list is reached, the normal redial period is
used before starting at the beginning again.
The selected phone number is substituted for the \\\\T string in the
.Ic set dial
command (see below).
.It
Set up your redial requirements using
.Ic set redial .
For example, if you have a bad telephone line or your provider is
usually engaged (not so common these days), you may want to specify
the following:
.Bd -literal -offset indent
set redial 10 4
.Ed
.Pp
This says that up to 4 phone calls should be attempted with a pause of 10
seconds before dialing the first number again.
.It
Describe your login procedure using the
.Ic set dial
and
.Ic set login
commands.
The
.Ic set dial
command is used to talk to your modem and establish a link with your
ISP, for example:
.Bd -literal -offset indent
set dial "ABORT BUSY ABORT NO\\\\sCARRIER TIMEOUT 4 \\"\\" \e
  ATZ OK-ATZ-OK ATDT\\\\T TIMEOUT 60 CONNECT"
.Ed
.Pp
This modem "chat" string means:
.Bl -bullet
.It
Abort if the string "BUSY" or "NO CARRIER" is received.
.It
Set the timeout to 4 seconds.
.It
Expect nothing.
.It
Send ATZ.
.It
Expect OK.
If that's not received within the 4 second timeout, send ATZ
and expect OK.
.It
Send ATDTxxxxxxx where xxxxxxx is the next number in the phone list from
above.
.It
Set the timeout to 60.
.It
Wait for the CONNECT string.
.El
.Pp
Once the connection is established, the login script is executed.
This script is written in the same style as the dial script, but care should
be taken to avoid having your password logged:
.Bd -literal -offset indent
set authkey MySecret
set login "TIMEOUT 15 login:-\\\\r-login: awfulhak \e
  word: \\\\P ocol: PPP HELLO"
.Ed
.Pp
This login "chat" string means:
.Bl -bullet
.It
Set the timeout to 15 seconds.
.It
Expect "login:".
If it's not received, send a carriage return and expect
"login:" again.
.It
Send "awfulhak".
.It
Expect "word:" (the tail end of a "Password:" prompt).
.It
Send whatever our current
.Ar authkey
value is set to.
.It
Expect "ocol:" (the tail end of a "Protocol:" prompt).
.It
Send "PPP".
.It
Expect "HELLO".
.El
.Pp
The
.Ic set authkey
command is logged specially.
When
.Ar command
or
.Ar chat
logging is enabled, the actual password is not logged;
.Sq ********
is logged instead.
.Pp
Login scripts vary greatly between ISPs.
If you're setting one up for the first time,
.Em ENABLE CHAT LOGGING
so that you can see if your script is behaving as you expect.
.It
Use
.Ic set device
and
.Ic set speed
to specify your serial line and speed, for example:
.Bd -literal -offset indent
set device /dev/cua00
set speed 115200
.Ed
.Pp
The first serial port is cua00.
The modem will attach at either
.Xr com 4
or
.Xr ucom 4 .
So, for example, if the modem attaches at
.Dq com3 ,
device should be set to
.Pa /dev/cua03 .
.Pp
A speed of 115200 should be specified
if you have a modem capable of bit rates of 28800 or more.
In general, the serial speed should be about four times the modem speed.
.It
Use the
.Ic set ifaddr
command to define the IP address.
.Bl -bullet
.It
If you know what IP address your provider uses, then use it as the remote
address (dst_addr), otherwise choose something like 10.0.0.2/0 (see below).
.It
If your provider has assigned a particular IP address to you, then use
it as your address (src_addr).
.It
If your provider assigns your address dynamically, choose a suitably
unobtrusive and unspecific IP number as your address.
10.0.0.1/0 would be appropriate.
The bit after the / specifies how many bits of the
address you consider to be important, so if you wanted to insist on
something in the class C network 1.2.3.0, you could specify 1.2.3.1/24.
.It
If you find that your ISP accepts the first IP number that you suggest,
specify third and forth arguments of
.Dq 0.0.0.0 .
This will force your ISP to assign a number
(the third argument will
be ignored as it is less restrictive than the default mask for your
.Sq src_addr ) .
.El
.Pp
An example for a connection where you don't know your IP number or your
ISP's IP number would be:
.Bd -literal -offset indent
set ifaddr 10.0.0.1/0 10.0.0.2/0 0.0.0.0 0.0.0.0
.Ed
.It
In most cases, your ISP will also be your default router.
If this is the case, add the following line to
.Pa /etc/ppp/ppp.conf
(or to
.Pa /etc/ppp/ppp.linkup
for setups that don't use
.Fl auto
mode):
.Bd -literal -offset indent
add default HISADDR
.Ed
.Pp
This tells
.Nm
to add a default route to whatever the peer address is
(10.0.0.2 in this example).
This route is
.Dq sticky ,
meaning that should the value of
.Dv HISADDR
change, the route will be updated accordingly.
.It
If your provider requests that you use PAP/CHAP authentication methods, add
the next lines to your
.Pa /etc/ppp/ppp.conf
file:
.Bd -literal -offset indent
set authname MyName
set authkey MyPassword
.Ed
.Pp
Both are accepted by default, so
.Nm
will provide whatever your ISP requires.
.Pp
It should be noted that a login script is rarely (if ever) required
when PAP or CHAP are in use.
.It
Ask your ISP to authenticate your nameserver address(es)
with the following line:
.Bd -literal -offset indent
enable dns
.Ed
.Pp
Do
.Em NOT
do this if you are running a local DNS unless you also either use
.Dq resolv readonly
or have
.Dq resolv restore
in
.Pa /etc/ppp/ppp.linkdown ,
as
.Nm
will simply circumvent its use by entering some nameserver lines in
.Pa /etc/resolv.conf .
.El
.Pp
Please refer to
.Pa /etc/ppp/ppp.conf.sample
and
.Pa /etc/ppp/ppp.linkup.sample
for some real examples.
The pmdemand label should be appropriate for most ISPs.
.Sh LOGGING FACILITY
.Nm
is able to generate the following log info either via
.Xr syslog 3
or directly to the screen:
.Bl -tag -width XXXXXXXXX -offset indent
.It Li All
Enable all logging facilities.
This generates a lot of log.
The most common use of
.Dq all
is as a basis, where you remove some facilities after enabling
.Dq all
.Pf ( Dq debug
and
.Dq timer
are usually best disabled).
.It Li Async
Dump async level packet in hex.
.It Li CBCP
Generate CBCP (CallBack Control Protocol) logs.
.It Li CCP
Generate a CCP packet trace.
.It Li Chat
Generate
.Dq dial ,
.Dq login ,
.Dq logout ,
and
.Dq hangup
chat script trace logs.
.It Li Command
Log commands executed either from the command line or any of the configuration
files.
.It Li Connect
Log Chat lines containing the string "CONNECT".
.It Li Debug
Log debug information.
.It Li DNS
Log DNS QUERY packets.
.It Li Filter
Log packets permitted by the dial filter and denied by any filter.
.It Li HDLC
Dump HDLC packet in hex.
.It Li ID0
Log all function calls specifically made as user ID 0.
.It Li IPCP
Generate an IPCP packet trace.
.It Li LCP
Generate an LCP packet trace.
.It Li LQM
Generate LQR reports.
.It Li Phase
Phase transition log output.
.It Li Physical
Dump physical level packet in hex.
.It Li Radius
Dump RADIUS information.
RADIUS information resulting from the link coming up or down is logged at
.Dq Phase
level unless
.Dq Radius
logging is enabled.
This log level is most useful for monitoring RADIUS alive information.
.It Li Sync
Dump sync level packet in hex.
.It Li TCP/IP
Dump all TCP/IP packets.
.It Li Timer
Log timer manipulation.
.It Li TUN
Include the
.Xr tun 4
device on each log line.
.It Li Warning
Output to the terminal device.
If there is currently no terminal,
output is sent to the log file using syslog's
.Dv LOG_WARNING .
.It Li Error
Output to both the terminal device
and the log file using syslog's
.Dv LOG_ERROR .
.It Li Alert
Output to the log file using
.Dv LOG_ALERT .
.El
.Pp
The
.Ic set log
command allows you to set the logging output level.
Multiple levels can be specified on a single command line.
The default is equivalent to
.Dq set log Phase .
.Pp
It is also possible to log directly to the screen.
The syntax is the same except that the word
.Dq local
should immediately follow
.Dq set log .
The default is
.Dq set log local
(i.e., only the un-maskable warning, error, and alert output).
.Pp
If the first argument to
.Dq set log Op local
begins with a
.Sq +
or a
.Sq -
character, the current log levels are
not cleared, for example:
.Bd -literal -offset indent
PPP ON awfulhak> set log phase
PPP ON awfulhak> show log
Log:   Phase Warning Error Alert
Local: Warning Error Alert
PPP ON awfulhak> set log +tcp/ip -warning
PPP ON awfulhak> set log local +command
PPP ON awfulhak> show log
Log:   Phase TCP/IP Warning Error Alert
Local: Command Warning Error Alert
.Ed
.Pp
Log messages of level Warning, Error, and Alert are not controllable
using
.Dq set log Op local .
.Pp
The
.Ar Warning
level is special in that it will not be logged if it can be displayed
locally.
.Sh SIGNAL HANDLING
.Nm
deals with the following signals:
.Bl -tag -width "USR2"
.It INT
Receipt of this signal causes the termination of the current connection
(if any).
This will cause
.Nm
to exit unless it is in
.Fl auto
or
.Fl ddial
mode.
.It HUP, TERM, & QUIT
These signals tell
.Nm
to exit.
.It USR1
This signal tells
.Nm
to re-open any existing server socket, dropping all existing diagnostic
connections.
Sockets that couldn't previously be opened will be retried.
.It USR2
This signal tells
.Nm
to close any existing server socket, dropping all existing diagnostic
connections.
.Dv SIGUSR1
can still be used to re-open the socket.
.El
.Sh MULTI-LINK PPP
If you wish to use more than one physical link to connect to a
.Em PPP
peer, that peer must also understand the
.Em MULTI-LINK PPP
protocol.
Refer to RFC 1990 for specification details.
.Pp
The peer is identified using a combination of his
.Dq endpoint discriminator
and his
.Dq authentication ID .
Either or both of these may be specified.
It is recommended that
at least one is specified, otherwise there is no way of ensuring that
all links are actually connected to the same peer program, and some
confusing lock-ups may result.
Locally, these identification variables are specified using the
.Ic set enddisc
and
.Ic set authname
commands.
The
.Sq authname
(and
.Sq authkey )
must be agreed in advance with the peer.
.Pp
Multi-link capabilities are enabled using the
.Ic set mrru
command (set maximum reconstructed receive unit).
Once multi-link is enabled,
.Nm
will attempt to negotiate a multi-link connection with the peer.
.Pp
By default, only one
.Dq link
is available
(called
.Dq deflink ) .
To create more links, the
.Ic clone
command is used.
This command will clone existing links, where all
characteristics are the same except:
.Bl -enum
.It
The new link has its own name as specified on the
.Ic clone
command line.
.It
The new link is an
.Dq interactive
link.
Its mode may subsequently be changed using the
.Ic set mode
command.
.It
The new link is in a
.Dq closed
state.
.El
.Pp
A summary of all available links can be seen using the
.Ic show links
command.
.Pp
Once a new link has been created, command usage varies.
All link specific commands must be prefixed with the
.Dq link Ar name
command, specifying on which link the command is to be applied.
When only a single link is available,
.Nm
is smart enough not to require the
.Dq link Ar name
prefix.
.Pp
Some commands can still be used without specifying a link \- resulting
in an operation at the
.Dq bundle
level.
For example, once two or more links are available, the command
.Dq show ccp
will show CCP configuration and statistics at the multi-link level, and
.Dq link deflink show ccp
will show the same information at the
.Dq deflink
link level.
.Pp
Armed with this information, the following configuration might be used:
.Bd -literal -offset indent
mp:
 set timeout 0
 set log phase chat
 set device /dev/cua00 /dev/cua01 /dev/cua02
 set phone "123456789"
 set dial "ABORT BUSY ABORT NO\\sCARRIER TIMEOUT 5 \\"\\" ATZ \e
           OK-AT-OK \\\\dATDT\\\\T TIMEOUT 45 CONNECT"
 set login
 set ifaddr 10.0.0.1/0 10.0.0.2/0 0.0.0.0 0.0.0.0
 set authname ppp
 set authkey ppppassword

 set mrru 1500
 clone 1,2,3	     # Create 3 new links - duplicates of the default
 link deflink remove # Delete the default link (called ``deflink'')
.Ed
.Pp
Note how all cloning is done at the end of the configuration.
Usually the link will be configured first, then cloned.
If you wish all links
to be up all the time, you can add the following line to the end of your
configuration:
.Bd -literal -offset indent
link 1,2,3 set mode ddial
.Ed
.Pp
If you want the links to dial on demand, this command could be used:
.Bd -literal -offset indent
link * set mode auto
.Ed
.Pp
Links may be tied to specific names by removing the
.Dq set device
line above, and specifying the following after the
.Dq clone
command:
.Bd -literal -offset indent
link 1 set device /dev/cua00
link 2 set device /dev/cua01
link 3 set device /dev/cua02
.Ed
.Pp
Use the
.Ic help
command to see which commands require context (using the
.Ic link
command), which have optional context,
and which should not have any context.
.Pp
When
.Nm
has negotiated
.Em MULTI-LINK
mode with the peer, it creates a local domain socket in the
.Pa /var/run
directory.
This socket is used to pass link information (including
the actual link file descriptor) between different
.Nm
invocations.
This facilitates
.Nm ppp Ns 's
ability to be run from a
.Xr getty 8
or directly from
.Pa /etc/gettydefs
(using the
.Sq pp=
capability), without needing to have initial control of the serial
line.
Once
.Nm
negotiates multi-link mode, it will pass its open link to any
already running process.
If there is no already running process,
.Nm
will act as the master, creating the socket and listening for new
connections.
.Sh PPP COMMAND LIST
This section lists the available commands and their effect.
They are usable either from an interactive
.Nm
session, from a configuration file or from a
.Xr pppctl 8
or
.Xr telnet 1
session.
.Bl -tag -width 2n
.It Xo
.Ic accept No \&|
.Ic deny No \&|
.Ic enable No \&|
.Ic disable
.Ar option....
.Xc
These directives tell
.Nm
how to negotiate the initial connection with the peer.
Each
.Ar option
has a default of either accept or deny and enable or disable.
.Dq Accept
means that the option will be ACK'd if the peer asks for it.
.Dq Deny
means that the option will be NAK'd if the peer asks for it.
.Dq Enable
means that the option will be requested by us.
.Dq Disable
means that the option will not be requested by us.
.Pp
.Ar option
may be one of the following:
.Bl -tag -width 2n
.It acfcomp
Default: Enabled and Accepted.
ACFComp stands for Address and Control Field Compression.
Non LCP packets will usually have an address
field of 0xff (the All-Stations address) and a control field of
0x03 (the Unnumbered Information command).
If this option is
negotiated, these two bytes are simply not sent, thus minimising
traffic.
.Pp
See RFC 1662 for details.
.It chap Ns Op \&05
Default: Disabled and Accepted.
CHAP stands for Challenge Handshake Authentication Protocol.
Only one of CHAP and PAP (below) may be negotiated.
With CHAP, the authenticator sends a "challenge" message to its peer.
The peer uses a one-way hash function to encrypt the
challenge and sends the result back.
The authenticator does the same, and compares the results.
The advantage of this mechanism is that no
passwords are sent across the connection.
A challenge is made when the connection is first made.
Subsequent challenges may occur.
If you want to have your peer authenticate itself, you must
.Dq enable chap
in
.Pa /etc/ppp/ppp.conf ,
and have an entry in
.Pa /etc/ppp/ppp.secret
for the peer.
.Pp
When using CHAP as the client, you need only specify
.Dq AuthName
and
.Dq AuthKey
in
.Pa /etc/ppp/ppp.conf .
CHAP is accepted by default.
Some
.Em PPP
implementations use "MS-CHAP" rather than MD5 when encrypting the
challenge.
MS-CHAP is a combination of MD4 and DES.
If
.Nm
was built on a machine with DES libraries available, it will respond
to MS-CHAP authentication requests, but will never request them.
.It deflate
Default: Enabled and Accepted.
This option decides if deflate
compression will be used by the Compression Control Protocol (CCP).
This is the same algorithm as used by the
.Xr gzip 1
program.
Note: There is a problem negotiating
.Ar deflate
capabilities with
.Xr pppd 8
\- a
.Em PPP
implementation available under many operating systems.
.Nm pppd
(version 2.3.1) incorrectly attempts to negotiate
.Ar deflate
compression using type
.Em 24
as the CCP configuration type rather than type
.Em 26
as specified in RFC 1979.
Type
.Ar 24
is actually specified as
.Dq PPP Magna-link Variable Resource Compression
in RFC 1975!
.Nm
is capable of negotiating with
.Nm pppd ,
but only if
.Dq deflate24
is enabled and accepted.
.It deflate24
Default: Disabled and Denied.
This is a variance of the
.Ar deflate
option, allowing negotiation with the
.Xr pppd 8
program.
Refer to the
.Ar deflate
section above for details.
It is disabled by default as it violates RFC 1975.
.It dns
Default: Disabled and Denied.
This option allows DNS negotiation.
.Pp
If enabled,
.Nm
will request that the peer confirms the entries in
.Pa /etc/resolv.conf .
If the peer NAKs our request (suggesting new IP numbers),
.Pa /etc/resolv.conf
is updated and another request is sent to confirm the new entries.
.Pp
If accepted,
.Nm
will answer any DNS queries requested by the peer rather than rejecting
them.
The answer is taken from
.Pa /etc/resolv.conf
unless the
.Ic set dns
command is used as an override.
.It enddisc
Default: Enabled and Accepted.
This option allows control over whether we
negotiate an endpoint discriminator.
We only send our discriminator if
.Ic set enddisc
is used and
.Ar enddisc
is enabled.
We reject the peer's discriminator if
.Ar enddisc
is denied.
.It LANMan|chap80lm
Default: Disabled and Accepted.
The use of this authentication protocol
is discouraged as it partially violates the authentication protocol by
implementing two different mechanisms (LANMan & NT) under the guise of
a single CHAP type (0x80).
.Dq LANMan
uses a simple DES encryption mechanism and is the least secure of the
CHAP alternatives (although still more secure than PAP).
.Pp
Refer to the
.Dq MSChap
description below for more details.
.It lqr
Default: Disabled and Accepted.
This option decides if Link Quality Requests will be sent or accepted.
LQR is a protocol that allows
.Nm
to determine that the link is down without relying on the modem's
carrier detect.
When LQR is enabled,
.Nm
sends the
.Em QUALPROTO
option (see
.Dq set lqrperiod
below) as part of the LCP request.
If the peer agrees, both sides will
exchange LQR packets at the agreed frequency, allowing detailed link
quality monitoring by enabling LQM logging.
If the peer doesn't agree, and if the
.Dq echo
option is enabled,
.Nm
will send
.Em LCP ECHO
requests instead.
These packets pass no information of interest, but they
.Em MUST
be replied to by the peer.
.Pp
Whether using
.Em LQR
or
.Em LCP ECHO ,
.Nm
will abruptly drop the connection if 5 unacknowledged packets have been
sent rather than sending a 6th.
A message is logged at the
.Em PHASE
level, and any appropriate
.Dq reconnect
values are honoured as if the peer were responsible for dropping the
connection.
.Pp
Refer to the
.Dq enable echo
command description for differences in behaviour prior to
.Nm
version 3.4.2.
.It mppe
Default: Enabled and Accepted.
This is Microsoft Point-to-Point Encryption scheme.
MPPE key size can be
40-, 56-, and 128-bits.
Refer to the
.Ic set mppe
command.
.It MSChapV2|chap81
Default: Disabled and Accepted.
It is very similar to standard CHAP (type 0x05)
except that it issues challenges of a fixed 16 bytes in length and uses a
combination of MD4, SHA-1, and DES
to encrypt the challenge rather than using the standard MD5 mechanism.
.It MSChap|chap80nt
Default: Disabled and Accepted.
The use of this authentication protocol
is discouraged as it partially violates the authentication protocol by
implementing two different mechanisms (LANMan & NT) under the guise of
a single CHAP type (0x80).
It is very similar to standard CHAP (type 0x05)
except that it issues challenges of a fixed 8 bytes in length and uses a
combination of MD4 and DES to encrypt the challenge rather than using the
standard MD5 mechanism.
CHAP type 0x80 for LANMan is also supported \- see
.Dq enable LANMan
for details.
.Pp
Because both
.Dq LANMan
and
.Sq NT
use CHAP type 0x80, when acting as authenticator with both enabled,
.Nm
will rechallenge the peer up to three times if it responds using the wrong
one of the two protocols.
This gives the peer a chance to attempt using both protocols.
.Pp
Conversely, when
.Nm
acts as the authenticatee with both protocols accepted,
the protocols are used alternately in response to challenges.
.Pp
Note: If only LANMan is enabled,
.Xr pppd 8
(version 2.3.5) misbehaves when acting as authenticatee.
It provides both
the NT and the LANMan answers, but also suggests that only the NT answer
should be used.
.It pap
Default: Disabled and Accepted.
PAP stands for Password Authentication Protocol.
Only one of PAP and CHAP (above) may be negotiated.
With PAP, the ID and Password are sent repeatedly to the peer until
authentication is acknowledged or the connection is terminated.
This is a rather poor security mechanism.
It is only performed when the connection is first established.
If you want to have your peer authenticate itself, you must
.Dq enable pap
in
.Pa /etc/ppp/ppp.conf ,
and have an entry in
.Pa /etc/ppp/ppp.secret
for the peer (although see the
.Ic passwdauth
and
.Ic set radius
options below).
.Pp
When using PAP as the client, you need only specify
.Dq AuthName
and
.Dq AuthKey
in
.Pa /etc/ppp/ppp.conf .
PAP is accepted by default.
.It pred1
Default: Enabled and Accepted.
This option decides if Predictor 1
compression will be used by the Compression Control Protocol (CCP).
.It protocomp
Default: Enabled and Accepted.
This option is used to negotiate
PFC (Protocol Field Compression), a mechanism where the protocol
field number is reduced to one octet rather than two.
.It shortseq
Default: Enabled and Accepted.
This option determines if
.Nm
will request and accept requests for short
(12-bit)
sequence numbers when negotiating multi-link mode.
This is only applicable if our MRRU is set (thus enabling multi-link).
.It vjcomp
Default: Enabled and Accepted.
This option determines if Van Jacobson header compression will be used.
.El
.Pp
The following options are not actually negotiated with the peer.
Therefore, accepting or denying them makes no sense.
.Bl -tag -width 2n
.It echo
Default: Disabled.
When this option is enabled,
.Nm
will send
.Em LCP ECHO
requests to the peer at the frequency defined by
.Dq echoperiod .
Note:
.Em LQR
requests will supersede
.Em LCP ECHO
requests if enabled and negotiated.
See
.Dq set lqrperiod
below for details.
.Pp
Prior to
.Nm
version 3.4.2,
.Dq echo
was considered enabled if lqr was enabled and negotiated, otherwise it was
considered disabled.
For the same behaviour, it is now necessary to
.Dq enable lqr echo
rather than just
.Dq enable lqr .
.It filter-decapsulation
Default: Disabled.
When this option is enabled,
.Nm
will examine UDP frames to see if they actually contain a
.Em PPP
frame as their payload.
If this is the case, all filters will operate on the payload rather
than the actual packet.
.Pp
This is useful if you want to send PPPoUDP traffic over a
.Em PPP
link, but want that link to do smart things with the real data rather than
the UDP wrapper.
.Pp
The UDP frame payload must not be compressed in any way, otherwise
.Nm
will not be able to interpret it.
It's therefore recommended that you
.Ic disable vj pred1 deflate
and
.Ic deny vj pred1 deflate
in the configuration for the
.Nm
invocation with the udp link.
.It force-scripts
Default: Disabled.
Forces execution of the configured chat scripts in
.Dv direct
and
.Dv dedicated
modes.
.It idcheck
Default: Enabled.
When
.Nm
exchanges low-level LCP, CCP, and IPCP configuration traffic, the
.Em Identifier
field of any replies is expected to be the same as that of the request.
By default,
.Nm
drops any reply packets that do not contain the expected identifier
field, reporting the fact at the respective log level.
If
.Ar idcheck
is disabled,
.Nm
will ignore the identifier field.
.It iface-alias
Default: Enabled if
.Fl nat
is specified.
This option simply tells
.Nm
to add new interface addresses to the interface rather than replacing them.
The option can only be enabled if network address translation is enabled
.Pq Dq nat enable yes .
.Pp
With this option enabled,
.Nm
will pass traffic for old interface addresses through the NAT engine,
resulting in the ability (in
.Fl auto
mode) to properly connect the process that caused the PPP link to
come up in the first place.
.Pp
Disabling NAT with
.Dq nat enable no
will also disable
.Dq iface-alias .
.It ipcp
Default: Enabled.
This option allows
.Nm
to attempt to negotiate IP control protocol capabilities and if
successful to exchange IP datagrams with the peer.
.It ipv6cp
Default: Enabled.
This option allows
.Nm
to attempt to negotiate IPv6 control protocol capabilities and if
successful to exchange IPv6 datagrams with the peer.
.It keep-session
Default: Disabled.
When
.Nm
runs as a Multi-link server, a different
.Nm
instance initially receives each connection.
After determining that
the link belongs to an already existing bundle (controlled by another
.Nm
invocation),
.Nm
will transfer the link to that process.
.Pp
If the link is a tty device or if this option is enabled,
.Nm
will not exit, but will change its process name to
.Dq session owner
and wait for the controlling
.Nm
to finish with the link and deliver a signal back to the idle process.
This prevents the confusion that results from
.Nm ppp Ns 's
parent considering the link resource available again.
.Pp
For tty devices that have entries in
.Pa /etc/ttys ,
this is necessary to prevent another
.Xr getty 8
from being started, and for program links such as
.Xr sshd 8 ,
it prevents
.Xr sshd 8
from exiting due to the death of its child.
As
.Nm
cannot determine its parents requirements (except for the tty case), this
option must be enabled manually depending on the circumstances.
.It loopback
Default: Enabled.
When
.Ar loopback
is enabled,
.Nm
will automatically loop back packets being sent
out with a destination address equal to that of the
.Em PPP
interface.
If disabled,
.Nm
will send the packet, probably resulting in an ICMP redirect from
the other end.
It is convenient to have this option enabled when
the interface is also the default route as it avoids the necessity
of a loopback route.
.It NAS-IP-Address
Default: Enabled.
This option controls whether
.Nm
sends the
.Dq NAS-IP-Address
attribute to the RADIUS server when RADIUS is in use
.Pq see Dq set radius .
.Pp
Note: at least one of
.Dq NAS-IP-Address
and
.Dq NAS-Identifier
must be enabled.
.Pp
Versions of
.Nm
prior to version 3.4.1 did not send the
.Dq NAS-IP-Address
attribute as it was reported to break the Radiator RADIUS server.
As the latest RFC (2865) no longer hints that only one of
.Dq NAS-IP-Address
and
.Dq NAS-Identifier
should be sent (as RFC 2138 did),
.Nm
now sends both and leaves it up to the administrator that chooses to use
bad RADIUS implementations to
.Dq disable NAS-IP-Address .
.It NAS-Identifier
Default: Enabled.
This option controls whether
.Nm
sends the
.Dq NAS-Identifier
attribute to the RADIUS server when RADIUS is in use
.Pq see Dq set radius .
.Pp
Note: at least one of
.Dq NAS-IP-Address
and
.Dq NAS-Identifier
must be enabled.
.It passwdauth
Default: Disabled.
Enabling this option will tell the PAP authentication
code to use the password database (see
.Xr passwd 5 )
to authenticate the caller if they cannot be found in the
.Pa /etc/ppp/ppp.secret
file.
.Pa /etc/ppp/ppp.secret
is always checked first.
If you wish to use passwords from
.Xr passwd 5 ,
but also to specify an IP number or label for a given client, use
.Sq \&*
as the client password in
.Pa /etc/ppp/ppp.secret .
.It proxy
Default: Disabled.
Enabling this option will tell
.Nm
to proxy ARP for the peer.
This means that
.Nm
will make an entry in the ARP table using
.Dv HISADDR
and the
.Dv MAC
address of the local network in which
.Dv HISADDR
appears.
This allows other machines connected to the LAN to talk to
the peer as if the peer itself was connected to the LAN.
The proxy entry cannot be made unless
.Dv HISADDR
is an address from a LAN.
.It proxyall
Default: Disabled.
Enabling this will tell
.Nm
to add proxy arp entries for every IP address in all class C or
smaller subnets routed via the tun interface.
.Pp
Proxy arp entries are only made for sticky routes that are added
using the
.Ic add
command.
No proxy arp entries are made for the interface address itself
(as created by the
.Ic set ifaddr
command).
.It sroutes
Default: Enabled.
When the
.Ic add
command is used with the
.Dv HISADDR ,
.Dv MYADDR ,
.Dv HISADDR6 ,
or
.Dv MYADDR6
values, entries are stored in the
.Dq sticky route
list.
Each time these variables change, this list is re-applied to the routing table.
.Pp
Disabling this option will prevent the re-application of sticky routes,
although the
.Dq sticky route
list will still be maintained.
.It Oo tcp Oc Ns Xo
.No mssfixup
.Xc
Default: Enabled.
This option tells
.Nm
to adjust TCP SYN packets so that the maximum receive segment
size is not greater than the amount allowed by the interface MTU.
.It throughput
Default: Enabled.
This option tells
.Nm
to gather throughput statistics.
Input and output is sampled over
a rolling 5 second window, and current, best, and total figures are retained.
This data is output when the relevant
.Em PPP
layer shuts down, and is also available using the
.Ic show
command.
Throughput statistics are available at the
.Dq IPCP
and
.Dq physical
levels.
.It utmp
Default: Enabled.
Normally, when a user is authenticated using PAP or CHAP, and when
.Nm
is running in
.Fl direct
mode, an entry is made in the utmp and wtmp files for that user.
Disabling this option will tell
.Nm
not to make any utmp or wtmp entries.
This is usually only necessary if
you require the user to both login and authenticate themselves.
.El
.It Ic add Ns Xo
.Op !\&
.Ar dest Ns Op / Ns Ar nn
.Op Ar mask
.Op Ar gateway
.Xc
.Ar Dest
is the destination IP address.
The netmask is specified either as a number of bits with
.No / Ns Ar nn
or as an IP number using
.Ar mask .
.Ar 0 0
or simply
.Ar 0
with no mask refers to the default route.
It is also possible to use the literal name
.Dq default
instead of
.Ar 0 .
.Ar Gateway
is the next hop gateway to get to the given
.Ar dest
machine/network.
Refer to the
.Xr route 8
command for further details.
.Pp
It is possible to use the symbolic names
.Dq MYADDR ,
.Dq HISADDR ,
.Dq MYADDR6 ,
or
.Dq HISADDR6
as the destination, and
.Dq HISADDR
or
.Dq HISADDR6
as the
.Ar gateway .
.Dq MYADDR
is replaced with the interface IP address,
.Dq HISADDR
is replaced with the interface IP destination (peer) address,
.Dq MYADDR6
is replaced with the interface IPv6 address, and
.Dq HISADDR6
is replaced with the interface IPv6 destination address.
.Pp
If the
.Ic add Ns !\&
command is used
(note the trailing
.Sq !\& ) ,
then if the route already exists, it will be updated as with the
.Ic route change
command (see
.Xr route 8
for further details).
.Pp
Routes that contain the
.Dq HISADDR ,
.Dq MYADDR ,
.Dq HISADDR6 ,
.Dq MYADDR6 ,
.Dq DNS0 ,
or
.Dq DNS1
constants are considered
.Dq sticky .
They are stored in a list (use
.Ic show ncp
to see the list), and each time the value of one of these variables
changes, the appropriate routing table entries are updated.
This facility may be disabled using
.Ic disable sroutes .
.It Ic allow Ar command Op Ar args
This command controls access to
.Nm
and its configuration files.
It is possible to allow user-level access,
depending on the configuration file label and on the mode that
.Nm
is being run in.
For example, you may wish to configure
.Nm
so that only user
.Dq fred
may access label
.Dq fredlabel
in
.Fl background
mode.
.Pp
User ID 0 is immune to these commands.
.Bl -tag -width 2n
.It Ic allow user Ns Xo
.Op Ic s
.Ar logname ...
.Xc
By default, only user ID 0 is allowed access to
.Nm ppp .
If this command is used, all of the listed users are allowed access to
the section in which the
.Ic allow users
command is found.
The
.Dq default
section is always checked first (even though it is only ever automatically
loaded at startup).
.Ic allow users
commands are cumulative in a given section, but users allowed in any given
section override users allowed in the default section, so it's possible to
allow users access to everything except a given label by specifying default
users in the
.Dq default
section, and then specifying a new user list for that label.
.Pp
If user
.Sq *
is specified, access is allowed to all users.
If
.Ar logname
is omitted, the user access list is emptied
(i.e. only root will have access).
There is no difference between the forms
.Ic allow user
and
.Ic allow users .
.It Ic allow mode Ns Xo
.Op Ic s
.Ar mode ...
.Xc
By default, access using any
.Nm
mode is possible.
If this command is used, it restricts the access
.Ar modes
allowed to load the label under which this command is specified.
Again, as with the
.Ic allow users
command, each
.Ic allow modes
command overrides any previous settings, and the
.Dq default
section is always checked first.
.Pp
Possible modes are:
.Dq interactive ,
.Dq auto ,
.Dq direct ,
.Dq dedicated ,
.Dq ddial ,
.Dq background ,
and
.Sq * .
There is no difference between the forms
.Ic allow mode
and
.Ic allow modes .
.Pp
When running in multi-link mode, a section can be loaded if it allows
.Em any
of the currently existing line modes.
.El
.It Oo !\& Oc Ns Xo
.Ic bg Ar command
.Xc
The given
.Ar command
is executed in the background with the following words replaced:
.Bl -tag -width IPV6PACKETSOUT
.It Li AUTHNAME
This is replaced with the local
.Ar authname
value.
See the
.Ic set authname
command below.
.It Li DNS0 & DNS1
These are replaced with the primary and secondary nameserver IP numbers.
If nameservers are negotiated by IPCP, the values of these macros will change.
.It Li ENDDISC
This is replaced with the local endpoint discriminator value.
See the
.Ic set enddisc
command below.
.It Li HISADDR
This is replaced with the peer's IP number.
.It Li HISADDR6
This is replaced with the peer's IPv6 number.
.It Li INTERFACE
This is replaced with the name of the interface that's in use.
.It Li IPOCTETSIN
This is replaced with the number of IP bytes received since the connection
was established.
.It Li IPOCTETSOUT
This is replaced with the number of IP bytes sent since the connection
was established.
.It Li IPPACKETSIN
This is replaced with the number of IP packets received since the connection
was established.
.It Li IPPACKETSOUT
This is replaced with the number of IP packets sent since the connection
was established.
.It Li IPV6OCTETSIN
This is replaced with the number of IPv6 bytes received since the connection
was established.
.It Li IPV6OCTETSOUT
This is replaced with the number of IPv6 bytes sent since the connection
was established.
.It Li IPV6PACKETSIN
This is replaced with the number of IPv6 packets received since the connection
was established.
.It Li IPV6PACKETSOUT
This is replaced with the number of IPv6 packets sent since the connection
was established.
.It Li LABEL
This is replaced with the last label name used.
A label may be specified on the
.Nm
command line, via the
.Ic load
or
.Ic dial
commands and in the
.Pa ppp.secret
file.
.It Li MYADDR
This is replaced with the IP number assigned to the local interface.
.It Li MYADDR6
This is replaced with the IPv6 number assigned to the local interface.
.It Li OCTETSIN
This is replaced with the number of bytes received since the connection
was established.
.It Li OCTETSOUT
This is replaced with the number of bytes sent since the connection
was established.
.It Li PACKETSIN
This is replaced with the number of packets received since the connection
was established.
.It Li PACKETSOUT
This is replaced with the number of packets sent since the connection
was established.
.It Li PEER_ENDDISC
This is replaced with the value of the peer's endpoint discriminator.
.It Li PROCESSID
This is replaced with the current process ID.
.It Li SOCKNAME
This is replaced with the name of the diagnostic socket.
.It Li UPTIME
This is replaced with the bundle uptime in HH:MM:SS format.
.It Li USER
This is replaced with the username that has been authenticated with PAP or
CHAP.
Normally, this variable is assigned only in
.Fl direct
mode.
This value is available irrespective of whether utmp logging is enabled.
.It Li VERSION
This is replaced with the current version number of
.Nm .
.El
.Pp
These substitutions are also done by the
.Ic set proctitle ,
.Ic ident ,
and
.Ic log
commands.
.Pp
If you wish to pause
.Nm
while the command executes, use the
.Ic shell
command instead.
.It Xo
.Ic clear
.Ic physical No \&|
.Ic ipcp No \&|
.Ic ipv6
.Oo Ic current No \&|
.Ic overall No \&|
.Ic peak No ... Oc
.Xc
Clear the specified throughput values at either the
.Dq physical ,
.Dq ipcp ,
or
.Dq ipv6cp
level.
If
.Dq physical
is specified, context must be given (see the
.Ic link
command below).
If no second argument is given, all values are cleared.
.It Ic clone Ar name Ns Xo
.Op \&, Ns Ar name Ns
.No ...
.Xc
Clone the specified link, creating one or more new links according to the
.Ar name
argument(s).
This command must be used from the
.Dq link
command below unless you've only got a single link (in which case that
link becomes the default).
Links may be removed using the
.Ic remove
command
.Pq see below .
.Pp
The default link name is
.Dq deflink .
.It Xo
.Ic close
.Oo Ic lcp Ns Oo !\& Oc |\&
.Ic ccp Ns Op !\&
.Oc
.Xc
If no arguments are given, the relevant protocol layers will be brought
down and the link will be closed.
If
.Dq lcp
is specified, the LCP layer is brought down, but
.Nm
will not bring the link offline.
It is subsequently possible to use
.Dq term
(see below)
to talk to the peer machine if, for example, something like
.Dq slirp
is being used.
If
.Dq ccp
is specified, only the relevant compression layer is closed.
If the
.Sq !\&
is used, the compression layer will remain in the closed state, otherwise
it will re-enter the STOPPED state, waiting for the peer to initiate
further CCP negotiation.
In any event, this command does not disconnect the user from
.Nm
or exit
.Nm ppp .
See the
.Ic quit
command below.
.It Ic delete Ns Xo
.Op !\&
.Ar dest
.Xc
This command deletes the route with the given
.Ar dest
IP address.
If
.Ar dest
is specified as
.Dq ALL ,
all non-direct entries in the routing table for the current interface,
and all
.Dq sticky route
entries are deleted.
If
.Ar dest
is specified as
.Dq default ,
the default route is deleted.
.Pp
If the
.Ic delete Ns !\&
command is used
(note the trailing
.Sq !\& ) ,
.Nm
will not complain if the route does not already exist.
.It Xo
.Ic dial No \&|
.Ic call
.Op Ar label ...
.Xc
This command is the equivalent of
.Dq load label
followed by
.Dq open ,
and is provided for backwards compatibility.
.It Ic down Op Ar lcp | ccp
Bring the relevant layer down ungracefully, as if the underlying layer
had become unavailable.
It's not considered polite to use this command on
a Finite State Machine that's in the OPEN state.
If no arguments are
supplied, the entire link is closed (or if no context is given, all links
are terminated).
If
.Dq lcp
is specified, the
.Em LCP
layer is terminated but the device is not brought offline and the link
is not closed.
If
.Dq ccp
is specified, only the relevant compression layer(s) are terminated.
.It Xo
.Ic help No \&|
.Ic ?\&
.Op Ar command
.Xc
Show a list of available commands.
If
.Ar command
is specified, show the usage string for that command.
.It Ic ident Op Ar text ...
Identify the link to the peer using
.Ar text .
If
.Ar text
is empty, link identification is disabled.
It is possible to use any of the words described for the
.Ic bg
command above.
Refer to the
.Ic sendident
command for details of when
.Nm
identifies itself to the peer.
.It Ic iface Ar command Op Ar args
This command is used to control the interface used by
.Nm .
.Ar Command
may be one of the following:
.Pp
.Bl -tag -width 2n -compact
.It Ic iface add Ns Xo
.Op !\&
.Ar addr Ns Op / Ns Ar bits
.Op Ar peer
.Xc
.It Ic iface add Ns Xo
.Op !\&
.Ar addr
.Ar mask
.Ar peer
.Xc
Add the given
.Ar addr mask peer
combination to the interface.
Instead of specifying
.Ar mask ,
.No / Ns Ar bits
can be used
(with no space between it and
.Ar addr ) .
If the given address already exists, the command fails unless the
.Sq !\&
is used \- in which case the previous interface address entry is overwritten
with the new one, allowing a change of netmask or peer address.
.Pp
If only
.Ar addr
is specified,
.Ar bits
defaults to 32 and
.Ar peer
defaults to 255.255.255.255.
This address (the broadcast address) is the only duplicate peer address that
.Nm
allows.
.Pp
.It Xo
.Ic iface clear
.Op Ic INET No \&| Ic INET6
.Xc
If this command is used while
.Nm
is in the OPENED state or while in
.Fl auto
mode, all addresses except for the NCP negotiated address are deleted
from the interface.
If
.Nm
is not in the OPENED state and is not in
.Fl auto
mode, all interface addresses are deleted.
.Pp
If the INET or INET6 arguments are used, only addresses for that address
family are cleared.
.Pp
.It Xo
.Ic iface
.Ic delete Ns Oo !\& Oc \&|
.Ic rm Ns Op !\&
.Ar addr
.Xc
This command deletes the given
.Ar addr
from the interface.
If the
.Sq !\&
is used, no error is given if the address isn't currently assigned to
the interface (and no deletion takes place).
.Pp
.It Ic iface show
Shows the current state and current addresses for the interface.
It is much the same as running
.Dq ifconfig INTERFACE .
.Pp
.It Ic iface help Op Ar sub-command
This command, when invoked without
.Ar sub-command ,
will show a list of possible
.Dq iface
sub-commands and a brief synopsis for each.
When invoked with
.Ar sub-command ,
only the synopsis for the given sub-command is shown.
.El
.It Oo Ic data Oc Ns Xo
.Ic link
.Ar name Ns Op , Ns Ar name Ns
.No ... Ar command Op Ar args
.Xc
This command may prefix any other command if the user wishes to
specify which link the command should affect.
This is only applicable after multiple links have been created in Multi-link
mode using the
.Ic clone
command.
.Pp
.Ar Name
specifies the name of an existing link.
If
.Ar name
is a comma separated list,
.Ar command
is executed on each link.
If
.Ar name
is
.Sq * ,
.Ar command
is executed on all links.
.It Ic load Oo Ar label Oc Ns Xo
.No ...
.Xc
Load the given
.Ar label Ns (s)
from the
.Pa ppp.conf
file.
If
.Ar label
is not given, the
.Ar default
label is used.
.Pp
Unless the
.Ar label
section uses the
.Ic set mode ,
.Ic open ,
or
.Ic dial
commands,
.Nm
will not attempt to make an immediate connection.
.It Ic log Ar word Ns ...
Send the given word(s) to the log file with the prefix
.Dq LOG: .
Word substitutions are done as explained under the
.No !\& Ns Ic bg
command above.
.It Ic nat Ar command Op Ar args
This command allows the control of the network address translation (also
known as masquerading or IP aliasing) facilities that are built into
.Nm .
NAT is done on the external interface only, and is unlikely to make sense
if used with the
.Fl direct
flag.
.Pp
If nat is enabled on your system (it may be omitted at compile time),
the following commands are possible:
.Bl -tag -width 2n
.It Ic nat enable Ar yes | no
This command either switches network address translation on or turns it off.
The
.Fl nat
command line flag is synonymous with
.Dq nat enable yes .
.It Ic nat addr Op Ar addr_local addr_alias
This command allows data for
.Ar addr_alias
to be redirected to
.Ar addr_local .
It is useful if you own a small number of real IP numbers that
you wish to map to specific machines behind your gateway.
.It Ic nat deny_incoming Ar yes | no
If set to yes, this command will refuse all incoming packets where an
aliasing link doesn't already exist.
.Pp
It should be noted under what circumstances an aliasing link is created.
It may be necessary to further protect your network from outside
connections using the
.Ic set filter
or
.Ic nat target
commands.
.It Ic nat help No \&| Ic ?\&
This command gives a summary of available nat commands.
.It Ic nat log Ar yes | no
This option causes various NAT statistics and information to
be logged to the file
.Pa /var/log/alias.log .
.It Xo Ic nat port
.Ar proto
.Ar targetIP : Ns Ar targetPort Ns Op No - Ns Ar targetPort
.Ar aliasPort Ns Op No - Ns Ar aliasPort
.Op Ar remoteIP : Ns Ar remotePort Ns Op No - Ns Ar remotePort
.Xc
This command causes incoming
.Ar proto
connections to
.Ar aliasPort
to be redirected to
.Ar targetPort
on
.Ar targetIP .
.Ar proto
is either
.Dq tcp
or
.Dq udp .
.Pp
A range of port numbers may be specified as shown above.
The ranges must be of the same size.
.Pp
If
.Ar remoteIP
is specified, only data coming from that IP number is redirected.
.Ar remotePort
must either be 0
(indicating any source port)
or a range of ports the same size as the other ranges.
.Pp
This option is useful if you wish to run things like an Internet phone on
machines behind your gateway, but it is limited in that connections to only
one interior machine per source machine and target port are possible.
.It Ic nat proto Ar proto localIP Oo
.Ar publicIP Op Ar remoteIP
.Oc
This command tells
.Nm
to redirect packets of protocol type
.Ar proto
(see
.Xr protocols 5 )
to the internal address
.Ar localIP .
.Pp
If
.Ar publicIP
is specified, only packets destined for that address are matched,
otherwise the default alias address is used.
.Pp
If
.Ar remoteIP
is specified, only packets matching that source address are matched.
.Pp
This command is useful for redirecting tunnel endpoints to an internal machine,
for example:
.Pp
.Dl nat proto ipencap 10.0.0.1
.It Ic nat proxy cmd Ar arg ...
This command tells
.Nm
to proxy certain connections, redirecting them to a given server.
.It Ic nat punch_fw Op Ar base count
This command tells
.Nm
to punch holes in the firewall for FTP or IRC DCC connections.
This is done dynamically by installing temporary firewall rules which
allow a particular connection (and only that connection) to go through
the firewall.
The rules are removed once the corresponding connection terminates.
.Pp
A maximum of
.Ar count
rules starting from rule number
.Ar base
will be used for punching firewall holes.
The range will be cleared when the
.Ic nat punch_fw
command is run.
.Pp
If no arguments are given, firewall punching is disabled.
.It Ic nat skinny_port Op Ar port
This command tells
.Nm
which TCP port is used by the Skinny Station protocol.
Skinny is used by Cisco IP phones to communicate with
Cisco Call Managers to set up voice over IP calls.
The typical port used by Skinny is 2000.
.Pp
If no argument is given, skinny aliasing is disabled.
.It Ic nat same_ports Ar yes | no
When enabled, this command tells the network address translation engine to
attempt to avoid changing the port number on outgoing packets.
This is useful
if you want to support protocols such as RPC and LPD which require
connections to come from a well known port.
.It Ic nat target Op Ar address
Set the given target address or clear it if no address is given.
The target address is used to specify how to NAT incoming packets by default.
If a target address is not set or if
.Dq default
is given, packets are not altered and are allowed to route to the internal
network.
.Pp
The target address may be set to
.Dq MYADDR ,
in which case all packets will be redirected to the interface address.
.It Ic nat use_sockets Ar yes | no
When enabled, this option tells the network address translation engine to
create a socket so that it can guarantee a correct incoming FTP data or
IRC connection.
.It Ic nat unregistered_only Ar yes | no
Only alter outgoing packets with an unregistered source address.
According to RFC 1918, unregistered source addresses
are 10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16.
.El
.Pp
These commands are also discussed in the file
.Pa README.nat
which comes with the source distribution.
.It Xo
.Ic open
.Oo Ic lcp No \&|
.Ic ccp No \&|
.Ic ipcp Oc
.Xc
This is the opposite of the
.Ic close
command.
All closed links are immediately brought up apart from second and subsequent
.Ar demand-dial
links \- these will come up based on the
.Ic set autoload
command that has been used.
.Pp
If the
.Dq lcp
argument is used while the LCP layer is already open, LCP will be
renegotiated.
This allows various LCP options to be changed, after which
.Dq open lcp
can be used to put them into effect.
After renegotiating LCP,
any agreed authentication will also take place.
.Pp
If the
.Dq ccp
argument is used, the relevant compression layer is opened.
Again, if it is already open, it will be renegotiated.
.Pp
If the
.Dq ipcp
argument is used, the link will be brought up as normal, but if
IPCP is already open, it will be renegotiated and the network
interface will be reconfigured.
.Pp
It is probably not good practice to re-open the PPP state machines
like this as it's possible that the peer will not behave correctly.
It
.Em is
however useful as a way of forcing the CCP or VJ dictionaries to be reset.
.It Ic passwd Ar pass
Specify the password required for access to the full
.Nm
command set.
This password is required when connecting to the diagnostic port (see the
.Ic set server
command).
.Ar Pass
is specified on the
.Ic set server
command line.
The value of
.Ar pass
is not logged when
.Ar command
logging is active, instead, the literal string
.Dq ********
is logged.
.It Xo
.Ic quit No \&|
.Ic bye
.Op Ic all
.Xc
If
.Ic quit
is executed from the controlling connection or from a command file,
.Nm
will exit after closing all connections.
Otherwise, if the user
is connected to a diagnostic socket, the connection is simply dropped.
.Pp
If the
.Ic all
keyword is given,
.Nm
will exit despite the source of the command after closing all existing
connections.
.It Ic remove No \&| Ic rm
This command removes the given link.
It is only really useful in multi-link mode.
A link must be in the
.Dv CLOSED
state before it is removed.
.It Ic rename No \&| Ic mv Ar name
This command renames the given link to
.Ar name .
It will fail if
.Ar name
is already used by another link.
.Pp
The default link name is
.Dq deflink .
Renaming it to
.Dq modem ,
.Dq cua00 ,
or
.Dq USR
may make the log file more readable.
.It Ic resolv Ar command
This command controls
.Nm ppp Ns 's
manipulation of the
.Xr resolv.conf 5
file.
When
.Nm
starts up, it loads the contents of this file into memory and retains this
image for future use.
.Ar command
is one of the following:
.Bl -tag -width readonly
.It Ic readonly
Treat
.Pa /etc/resolv.conf
as read only.
If
.Dq dns
is enabled,
.Nm
will still attempt to negotiate nameservers with the peer, making the results
available via the
.Dv DNS0
and
.Dv DNS1
macros.
This is the opposite of the
.Ic resolv writable
command.
.It Ic reload
Reload
.Pa /etc/resolv.conf
into memory.
This may be necessary if, for example, a DHCP client overwrote
.Pa /etc/resolv.conf .
.It Ic restore
Replace
.Pa /etc/resolv.conf
with the version originally read at startup or with the last
.Ic resolv reload
command.
This is sometimes a useful command to put in the
.Pa /etc/ppp/ppp.linkdown
file.
.It Ic rewrite
Rewrite the
.Pa /etc/resolv.conf
file.
This command will work even if the
.Ic resolv readonly
command has been used.
It may be useful as a command in the
.Pa /etc/ppp/ppp.linkup
file if you wish to defer updating
.Pa /etc/resolv.conf
until after other commands have finished.
.It Ic writable
Allow
.Nm
to update
.Pa /etc/resolv.conf
if
.Dq dns
is enabled and
.Nm
successfully negotiates a DNS.
This is the opposite of the
.Ic resolv readonly
command.
.El
.\" .It save
.\" This option is not (yet) implemented.
.It Ic sendident
This command tells
.Nm
to identify itself to the peer.
The link must be in LCP state or higher.
If no identity has been set (via the
.Ic ident
command),
.Ic sendident
will fail.
.Pp
When an identity has been set,
.Nm
will automatically identify itself when it sends or receives a configure
reject, when negotiation fails, or when LCP reaches the opened state.
.Pp
Received identification packets are logged to the LCP log (see
.Ic set log
for details) and are never responded to.
.It Ic set Ns Xo
.Op Ic up
.Ar var value
.Xc
This option allows the setting of any of the following variables:
.Bl -tag -width 2n
.It Ic set accmap Ar hex-value
ACCMap stands for Asynchronous Control Character Map.
This is always
negotiated with the peer, and defaults to a value of 00000000 in hex.
This protocol is required to defeat hardware that depends on passing
certain characters from end to end (such as XON/XOFF etc).
.Pp
For the XON/XOFF scenario, use
.Dq set accmap 000a0000 .
.It Ic set Oo Ic auth Oc Ns Xo
.Ic key Ar value
.Xc
This sets the authentication key (or password) used in client mode
PAP or CHAP negotiation to the given value.
It also specifies the
password to be used in the dial or login scripts in place of the
.Sq \eP
sequence, preventing the actual password from being logged.
If
.Ar command
or
.Ar chat
logging is in effect,
.Ar value
is logged as
.Dq ********
for security reasons.
.Pp
If the first character of
.Ar value
is an exclamation mark
.Pq Sq !\& ,
.Nm
treats the remainder of the string as a program that must be executed
to determine the
.Dq authname
and
.Dq authkey
values.
.Pp
If the
.Sq !\&
is doubled up
(to
.Sq !! ) ,
it is treated as a single literal
.Sq !\& ,
otherwise, ignoring the
.Sq !\& ,
.Ar value
is parsed as a program to execute in the same was as the
.No !\& Ns Ic bg
command above, substituting special names in the same manner.
Once executed,
.Nm
will feed the program three lines of input, each terminated by a newline
character:
.Bl -bullet
.It
The host name as sent in the CHAP challenge.
.It
The challenge string as sent in the CHAP challenge.
.It
The locally defined
.Dq authname .
.El
.Pp
Two lines of output are expected:
.Bl -bullet
.It
The
.Dq authname
to be sent with the CHAP response.
.It
The
.Dq authkey ,
which is encrypted with the challenge and request ID, the answer being sent
in the CHAP response packet.
.El
.Pp
When configuring
.Nm
in this manner, it's expected that the host challenge is a series of ASCII
digits or characters.
An encryption device or Secure ID card is usually
required to calculate the secret appropriate for the given challenge.
.It Ic set authname Ar ID
This sets the authentication ID used in client mode PAP or CHAP negotiation.
.Pp
If used in
.Fl direct
mode with CHAP enabled,
.Ar ID
is used in the initial authentication challenge and should normally be set to
the local machine name.
.It Ic set autoload Xo
.Ar min-percent max-percent period
.Xc
These settings apply only in multi-link mode and default to zero, zero, and
five, respectively.
When more than one
.Ar demand-dial
(also known as
.Fl auto )
mode link is available, only the first link is made active when
.Nm
first reads data from the tun device.
The next
.Ar demand-dial
link will be opened only when the current bundle throughput is at least
.Ar max-percent
percent of the total bundle bandwidth for
.Ar period
seconds.
When the current bundle throughput decreases to
.Ar min-percent
percent or less of the total bundle bandwidth for
.Ar period
seconds, a
.Ar demand-dial
link will be brought down as long as it's not the last active link.
.Pp
Bundle throughput is measured as the maximum of inbound and outbound
traffic.
.Pp
The default values cause
.Ar demand-dial
links to simply come up one at a time.
.Pp
Certain devices cannot determine their physical bandwidth, so it
is sometimes necessary to use the
.Ic set bandwidth
command (described below) to make
.Ic set autoload
work correctly.
.It Ic set bandwidth Ar value
This command sets the connection bandwidth in bits per second.
.Ar value
must be greater than zero.
It is currently only used by the
.Ic set autoload
command above.
.It Ic set callback Ar option ...
If no arguments are given, callback is disabled, otherwise,
.Nm
will request (or in
.Fl direct
mode, will accept) one of the given options.
In client mode, if an
.Ar option
is NAK'd
.Nm
will request a different
.Ar option ,
until no options remain; at which point
.Nm
will terminate negotiations (unless
.Dq none
is one of the specified options).
In server mode,
.Nm
will accept any of the given protocols \- but the client
.Em must
request one of them.
If you wish callback to be optional, you must include
.Ar none
as an option.
.Pp
The options are as follows (in this order of preference):
.Bl -tag -width Ds
.It auth
The callee is expected to decide the callback number based on
authentication.
If
.Nm
is the callee, the number should be specified as the fifth field of
the peer's entry in
.Pa /etc/ppp/ppp.secret .
.It cbcp
Microsoft's callback control protocol is used.
See
.Ic set cbcp
below.
.Pp
If you wish to negotiate
.Ar cbcp
in client mode but also wish to allow the server to request no callback at
CBCP negotiation time, you must specify both
.Ar cbcp
and
.Ar none
as callback options.
.It E.164 *| Ns Xo
.Ar number Ns Op , Ns Ar number Ns
.No ...
.Xc
The caller specifies the
.Ar number .
If
.Nm
is the callee,
.Ar number
should be either a comma separated list of allowable numbers or a
.Sq \&* ,
meaning any number is permitted.
If
.Nm
is the caller, only a single number should be specified.
.Pp
Note: this option is very unsafe when used with a
.Sq \&*
as a malicious caller can tell
.Nm
to call any (possibly international) number without first authenticating
themselves.
.It none
If the peer does not wish to do callback at all,
.Nm
will accept the fact and continue without callback rather than terminating
the connection.
This is required (in addition to one or more other callback
options) if you wish callback to be optional.
.El
.It Ic set cbcp Oo
.No *| Ns Ar number Ns Oo
.No , Ns Ar number Ns ...\& Oc
.Op Ar delay Op Ar retry
.Oc
If no arguments are given, CBCP (Microsoft's CallBack Control Protocol)
is disabled \- i.e., configuring CBCP in the
.Dq set callback
command will result in
.Nm
requesting no callback in the CBCP phase.
Otherwise,
.Nm
attempts to use the given phone number(s).
.Pp
In server mode
.Pq Fl direct ,
.Nm
will insist that the client uses one of these numbers, unless
.Sq \&*
is used in which case the client is expected to specify the number.
.Pp
In client mode,
.Nm
will attempt to use one of the given numbers (whichever it finds to
be agreeable with the peer), or if
.Sq \&*
is specified,
.Nm
will expect the peer to specify the number.
.It Ic set cd Oo
.No off| Ns Ar seconds Ns Op !\&
.Oc
Normally,
.Nm
checks for the existence of carrier depending on the type of device
that has been opened:
.Bl -tag -width XXX -offset XXX
.It Terminal Devices
Carrier is checked one second after the login script is complete.
If it's not set,
.Nm
assumes that this is because the device doesn't support carrier (which
is true for most
.Dq laplink
NULL-modem cables), logs the fact, and stops checking
for carrier.
.Pp
As ptys don't support the TIOCMGET ioctl, the tty device will switch all
carrier detection off when it detects that the device is a pty.
.It ISDN (i4b) Devices
Carrier is checked once per second for 6 seconds.
If it's not set after
the sixth second, the connection attempt is considered to have failed and
the device is closed.
Carrier is always required for i4b devices.
.It PPPoE (netgraph) Devices
Carrier is checked once per second for 5 seconds.
If it's not set after
the fifth second, the connection attempt is considered to have failed and
the device is closed.
Carrier is always required for PPPoE devices.
.El
.Pp
All other device types don't support carrier.
Setting a carrier value will
result in a warning when the device is opened.
.Pp
Some modems take more than one second after connecting to assert the carrier
signal.
If this delay isn't increased, this will result in
.Nm ppp Ns 's
inability to detect when the link is dropped, as
.Nm
assumes that the device isn't asserting carrier.
.Pp
The
.Ic set cd
command overrides the default carrier behaviour.
.Ar seconds
specifies the maximum number of seconds that
.Nm
should wait after the dial script has finished before deciding if
carrier is available or not.
.Pp
If
.Dq off
is specified,
.Nm
will not check for carrier on the device, otherwise
.Nm
will not proceed to the login script until either carrier is detected
or until
.Ar seconds
has elapsed, at which point
.Nm
assumes that the device will not set carrier.
.Pp
If no arguments are given, carrier settings will go back to their default
values.
.Pp
If
.Ar seconds
is followed immediately by an exclamation mark
.Pq Sq !\& ,
.Nm
will
.Em require
carrier.
If carrier is not detected after
.Ar seconds
seconds, the link will be disconnected.
.It Ic set choked Op Ar timeout
This sets the number of seconds that
.Nm
will keep a choked output queue before dropping all pending output packets.
If
.Ar timeout
is less than or equal to zero or if
.Ar timeout
isn't specified, it is set to the default value of
.Em 120 seconds .
.Pp
A choked output queue occurs when
.Nm
has read a certain number of packets from the local network for transmission,
but cannot send the data due to link failure (the peer is busy etc.).
.Nm
will not read packets indefinitely.
Instead, it reads up to
.Em 30
packets (or
.Em 30 No +
.Em nlinks No *
.Em 2
packets in multi-link mode), then stops reading the network interface
until either
.Ar timeout
seconds have passed or at least one packet has been sent.
.Pp
If
.Ar timeout
seconds pass, all pending output packets are dropped.
.It Xo
.Ic set ctsrts Ns \&| Ns Ic crtscts
.Ic on Ns \&| Ns Ic off
.Xc
This sets hardware flow control.
Hardware flow control is
.Ar on
by default.
.It Ic set deflate Ar out-winsize Op Ar in-winsize
This sets the DEFLATE algorithm's default outgoing and incoming window
sizes.
Both
.Ar out-winsize
and
.Ar in-winsize
must be values between 8 and 15.
If
.Ar in-winsize
is specified,
.Nm
will insist that this window size is used and will not accept any other
values from the peer.
.It Ic set device No \&| Ic line Xo
.Ar value ...
.Xc
This sets the device(s) to which
.Nm
will talk to the given
.Ar value .
.Pp
All serial device names are expected to begin with
.Pa /dev/ .
Serial devices are usually called
.Pa cuaXX .
.Pp
If
.Ar value
does not begin with
.Pa /dev/ ,
it must either begin with an exclamation mark
.Pq Sq !\&
or be of the format
.Sm off
.Ar host : port Op /tcp|udp .
.Sm on
.Pp
If it begins with an exclamation mark, the rest of the device name is
treated as a program name, and that program is executed when the device
is opened.
Standard input, output, and error are fed back to
.Nm
and are read and written as if they were a regular device.
.Pp
If a
.Ar host : Ns Ar port Ns Oo
.No /tcp|udp
.Oc
specification is given,
.Nm
will attempt to connect to the given
.Ar host
on the given
.Ar port .
If a
.Dq /tcp
or
.Dq /udp
suffix is not provided, the default is
.Dq /tcp .
Refer to the section on
.Em PPP OVER TCP and UDP
above for further details.
.Pp
If multiple values are specified,
.Nm
will attempt to open each one in turn until it succeeds or runs out of
devices.
.It Ic set dial Ar chat-script
This specifies the chat script that will be used to dial the other
side.
See also the
.Ic set login
command below.
Refer to
.Xr chat 8
and to the example configuration files for details of the chat script
format.
It is possible to specify some special
.Dq values
in your chat script as follows:
.Bl -tag -width 2n
.It Li \ec
When used as the last character in a
.Dq send
string, this indicates that a newline should not be appended.
.It Li \ed
When the chat script encounters this sequence, it delays two seconds.
.It Li \en
This is replaced with a newline character.
.It Li \ep
When the chat script encounters this sequence, it delays for one quarter of
a second.
.It Li \er
This is replaced with a carriage return character.
.It Li \es
This is replaced with a space character.
.It Li \et
This is replaced with a tab character.
.It Li \eT
This is replaced by the current phone number (see
.Ic set phone
below).
.It Li \eP
This is replaced by the current
.Ar authkey
value (see
.Ic set authkey
above).
.It Li \eU
This is replaced by the current
.Ar authname
value (see
.Ic set authname
above).
.El
.Pp
Note that two parsers will examine these escape sequences, so in order to
have the
.Dq chat parser
see the escape character, it is necessary to escape it from the
.Dq command parser .
This means that in practice you should use two escapes, for example:
.Bd -literal -offset indent
set dial "... ATDT\\\\T CONNECT"
.Ed
.Pp
It is also possible to execute external commands from the chat script.
To do this, the first character of the expect or send string is an
exclamation mark
.Pq Sq !\& .
If a literal exclamation mark is required, double it up to
.Sq !!\&
and it will be treated as a single literal
.Sq !\& .
When the command is executed, standard input and standard output are
directed to the open device (see the
.Ic set device
command), and standard error is read by
.Nm
and substituted as the expect or send string.
If
.Nm
is running in interactive mode, file descriptor 3 is attached to
.Pa /dev/tty .
.Pp
For example (wrapped for readability):
.Bd -literal -offset indent
set login "TIMEOUT 5 \\"\\" \\"\\" login:--login: ppp \e
word: ppp \\"!sh \\\\-c \\\\\\"echo \\\\-n label: >&2\\\\\\"\\" \e
\\"!/bin/echo in\\" HELLO"
.Ed
.Pp
would result in the following chat sequence (output using the
.Dq set log local chat
command before dialing):
.Bd -literal -offset indent
Dial attempt 1 of 1
dial OK!
Chat: Expecting:
Chat: Sending:
Chat: Expecting: login:--login:
Chat: Wait for (5): login:
Chat: Sending: ppp
Chat: Expecting: word:
Chat: Wait for (5): word:
Chat: Sending: ppp
Chat: Expecting: !sh \\-c "echo \\-n label: >&2"
Chat: Exec: sh -c "echo -n label: >&2"
Chat: Wait for (5): !sh \\-c "echo \\-n label: >&2" --> label:
Chat: Exec: /bin/echo in
Chat: Sending:
Chat: Expecting: HELLO
Chat: Wait for (5): HELLO
login OK!
.Ed
.Pp
Note (again) the use of the escape character, allowing many levels of
nesting.
Here there are four parsers at work.
The first parses the original line, reading it as three arguments.
The second parses the third argument, reading it as 11 arguments.
At this point, it is
important that the
.Sq \&-
signs are escaped, otherwise this parser will see them as constituting
an expect-send-expect sequence.
When the
.Sq !\&
character is seen, the execution parser reads the first command as three
arguments, and then
.Xr sh 1
itself expands the argument after the
.Fl c .
As we wish to send the output back to the modem, in the first example
we redirect our output to file descriptor 2 (stderr) so that
.Nm
itself sends and logs it, and in the second example we just output to stdout,
which is attached directly to the modem.
.Pp
This, of course means that it is possible to execute an entirely external
.Dq chat
command rather than using the internal one.
See
.Xr chat 8
for a good alternative.
.Pp
The external command that is executed is subjected to the same special
word expansions as the
.No !\& Ns Ic bg
command.
.It Xo
.Ic set dns
.Op Ar primary Op Ar secondary
.Xc
This command specifies DNS overrides for the
.Ic accept dns
command.
Refer to the
.Ic accept
command description above for details.
This command does not affect the IP numbers requested using
.Ic enable dns .
.It Ic set enddisc Op label|IP|MAC|magic|psn value
This command sets our local endpoint discriminator.
If set prior to LCP negotiation, and if no
.Ic disable enddisc
command has been used,
.Nm
will send the information to the peer using the LCP endpoint discriminator
option.
The following discriminators may be set:
.Bl -tag -width indent
.It Li label
The current label is used.
.It Li IP
Our local IP number is used.
As LCP is negotiated prior to IPCP, it is
possible that the IPCP layer will subsequently change this value.
If
it does, the endpoint discriminator stays at the old value unless manually
reset.
.It Li MAC
This is similar to the
.Ar IP
option above, except that the MAC address associated with the local IP
number is used.
If the local IP number is not resident on any Ethernet
interface, the command will fail.
.Pp
As the local IP number defaults to whatever the machine host name is,
.Dq set enddisc mac
is usually done prior to any
.Dq set ifaddr
commands.
.It Li magic
A 20-digit random number is used.
Care should be taken when using magic numbers as restarting
.Nm
or creating a link using a different
.Nm
invocation will also use a different magic number and will therefore not
be recognised by the peer as belonging to the same bundle.
This makes it unsuitable for
.Fl direct
connections.
.It Li psn Ar value
The given
.Ar value
is used.
.Ar Value
should be set to an absolute public switched network number with the
country code first.
.El
.Pp
If no arguments are given, the endpoint discriminator is reset.
.It Ic set escape Ar value...
This option is similar to the
.Ic set accmap
option above.
It allows the user to specify a set of characters that will be
.Dq escaped
as they travel across the link.
.It Ic set filter No dial|alive|in|out Ar rule-no Xo
.No permit|deny|clear| Ns Ar rule-no
.Op !\&
.Oo Op host
.Ar src_addr Ns Op / Ns Ar width
.Op Ar dst_addr Ns Op / Ns Ar width
.Oc [ Ns Ar proto
.Op src lt|eq|gt Ar port
.Op dst lt|eq|gt Ar port
.Op estab
.Op syn
.Op finrst
.Op timeout Ar secs ]
.Xc
.Nm
supports four filter sets.
The
.Em alive
filter specifies packets that keep the connection alive \- resetting the
idle timer.
The
.Em dial
filter specifies packets that cause
.Nm
to dial when in
.Fl auto
mode.
The
.Em in
filter specifies packets that are allowed to travel
into the machine and the
.Em out
filter specifies packets that are allowed out of the machine.
.Pp
Filtering is done prior to any IP alterations that might be done by the
NAT engine on outgoing packets and after any IP alterations that might
be done by the NAT engine on incoming packets.
By default all empty filter sets allow all packets to pass.
Rules are processed in order according to
.Ar rule-no
(unless skipped by specifying a rule number as the
.Ar action ) .
Up to 40 rules may be given for each set.
If a packet doesn't match
any of the rules in a given set, it is discarded.
In the case of
.Em in
and
.Em out
filters, this means that the packet is dropped.
In the case of
.Em alive
filters it means that the packet will not reset the idle timer (even if
the
.Ar in Ns / Ns Ar out
filter has a
.Dq timeout
value) and in the case of
.Em dial
filters it means that the packet will not trigger a dial.
A packet failing to trigger a dial will be dropped rather than queued.
Refer to the
section on
.Sx PACKET FILTERING
above for further details.
.It Ic set hangup Ar chat-script
This specifies the chat script that will be used to reset the device
before it is closed.
It should not normally be necessary, but can
be used for devices that fail to reset themselves properly on close.
.It Xo
.Ic set help No \&| Ic ?\&
.Op Ar command
.Xc
This command gives a summary of available
.Ic set
commands, or if
.Ar command
is specified, the command usage is shown.
.It Ic set ifaddr Oo Ar myaddr Ns
.Op / Ns Ar \&nn
.Oo Ar hisaddr Ns Op / Ns Ar \&nn
.Oo Ar netmask
.Op Ar triggeraddr
.Oc Oc
.Oc
This command specifies the IP addresses that will be used during
IPCP negotiation.
Addresses are specified using the following format:
.Pp
.Dl a.b.c.d/nn
.Pp
\&...where
.Dq a.b.c.d
is the preferred IP, but
.Ar nn
specifies how many bits of the address we will insist on.
If
.No / Ns Ar nn
is omitted, it defaults to
.Sq /32
unless the IP address is 0.0.0.0 in which case it defaults to
.Sq /0 .
.Pp
If you wish to assign a dynamic IP number to the peer,
.Ar hisaddr
may also be specified as a range of IP numbers in the following format:
.Bd -ragged -offset indent
.Sm off
.Ar \&IP Oo \&- Ar \&IP Oc Oo ,
.Ar \&IP Oo \&- Ar \&IP Oc Oc ...
.Sm on
.Ed
.Pp
For example:
.Pp
.Dl set ifaddr 10.0.0.1 10.0.1.2-10.0.1.10,10.0.1.20
.Pp
\&...will only negotiate
.Dq 10.0.0.1
as the local IP number, but may assign any of the given 10 IP
numbers to the peer.
If the peer requests one of these numbers,
and that number is not already in use,
.Nm
will grant the peer's request.
This is useful if the peer wants
to re-establish a link using the same IP number as was previously
allocated (thus maintaining any existing TCP or UDP connections).
.Pp
If the peer requests an IP number that's either outside
of this range or is already in use,
.Nm
will suggest a random unused IP number from the range.
.Pp
If
.Ar triggeraddr
is specified, it is used in place of
.Ar myaddr
in the initial IPCP negotiation.
However, only an address in the
.Ar myaddr
range will be accepted.
This is useful when negotiating with some
.Dv PPP
implementations that will not assign an IP number unless their peer
requests
.Dq 0.0.0.0 .
.Pp
It should be noted that in
.Fl auto
mode,
.Nm
will configure the interface immediately upon reading the
.Dq set ifaddr
line in the config file.
In any other mode, these values are just
used for IPCP negotiations, and the interface isn't configured
until the IPCP layer is up.
.Pp
Note that the
.Ar HISADDR
argument may be overridden by the third field in the
.Pa ppp.secret
file once the client has authenticated itself
(if PAP or CHAP are
.Dq enabled ) .
Refer to the
.Sx AUTHENTICATING INCOMING CONNECTIONS
section for details.
.Pp
In all cases, if the interface is already configured,
.Nm
will try to maintain the interface IP numbers so that any existing
bound sockets will remain valid.
.It Ic set ifqueue Ar packets
Set the maximum number of packets that
.Nm
will read from the tunnel interface while data cannot be sent to any of
the available links.
This queue limit is necessary to flow control outgoing data as the tunnel
interface is likely to be far faster than the combined links available to
.Nm ppp .
.Pp
If
.Ar packets
is set to a value less than the number of links,
.Nm
will read up to that value regardless.
This prevents any possible latency problems.
.Pp
The default value for
.Ar packets
is 30.
.It Xo
.Ic set ccpretry No \&|
.Ic ccpretries Oo Ar timeout
.Op Ar reqtries Op Ar trmtries
.Oc
.Xc
.It Xo
.Ic set chapretry No \&|
.Ic chapretries Oo Ar timeout
.Op Ar reqtries
.Oc
.Xc
.It Xo
.Ic set ipcpretry No \&|
.Ic ipcpretries Oo Ar timeout
.Op Ar reqtries Op Ar trmtries
.Oc
.Xc
.It Xo
.Ic set ipv6cpretry No \&|
.Ic ipv6cpretries Oo Ar timeout
.Op Ar reqtries Op Ar trmtries
.Oc
.Xc
.It Xo
.Ic set lcpretry No \&|
.Ic lcpretries Oo Ar timeout
.Op Ar reqtries Op Ar trmtries
.Oc
.Xc
.It Xo
.Ic set papretry No \&|
.Ic papretries Oo Ar timeout
.Op Ar reqtries
.Oc
.Xc
These commands set the number of seconds that
.Nm
will wait before resending Finite State Machine (FSM) Request packets.
The default
.Ar timeout
for all FSMs is 3 seconds (which should suffice in most cases).
.Pp
If
.Ar reqtries
is specified, it tells
.Nm
how many configuration request attempts it should make while receiving
no reply from the peer before giving up.
The default is 5 attempts for
CCP, LCP, and IPCP, and 3 attempts for PAP and CHAP.
.Pp
If
.Ar trmtries
is specified, it tells
.Nm
how many terminate requests should be sent before giving up waiting for the
peer's response.
The default is 3 attempts.
Authentication protocols are
not terminated and it is therefore invalid to specify
.Ar trmtries
for PAP or CHAP.
.Pp
In order to avoid negotiations with the peer that will never converge,
.Nm
will only send at most 3 times the configured number of
.Ar reqtries
in any given negotiation session before giving up and closing that layer.
.It Ic set log Xo
.Op local
.Op +|- Ns
.Ar value Ns ...
.Xc
This command allows the adjustment of the current log level.
Refer to the
.Sx LOGGING FACILITY
section above for further details.
.It Ic set login Ar chat-script
This
.Ar chat-script
compliments the dial-script.
If both are specified, the login
script will be executed after the dial script.
Escape sequences available in the dial script are also available here.
.It Ic set logout Ar chat-script
This specifies the chat script that will be used to log out
before the hangup script is called.
It should not normally be necessary.
.It Ic set lqrperiod|echoperiod Ar frequency
This command sets the
.Ar frequency
in seconds at which
.Em LQR
or
.Em LCP ECHO
packets are sent.
The default is 30 seconds.
You must also use the
.Ic enable lqr
and/or
.Dq enable echo
commands if you wish to send
.Em LQR
or
.Em LCP ECHO
requests to the peer.
.It Xo
.Ic set mode
.Ar interactive | auto | ddial | background
.Xc
This command allows you to change the
.Dq mode
of the specified link.
This is normally only useful in multi-link mode,
but may also be used in uni-link mode.
.Pp
It is not possible to change a link that is
.Dq direct
or
.Dq dedicated .
.Pp
Note: If you issue the command
.Dq set mode auto ,
and have network address translation enabled, it may be useful to
.Dq enable iface-alias
afterwards.
This will allow
.Nm
to do the necessary address translations to enable the process that
triggers the connection to connect once the link is up despite the
peer assigning us a new (dynamic) IP address.
.It Ic set mppe Op 40|56|128|* Op stateless|stateful|*
This option selects the encryption parameters used when negotiating
MPPE.
MPPE can be disabled entirely with the
.Ic disable mppe
command.
If no arguments are given,
.Nm
will attempt to negotiate a stateful link with a 128-bit key, but
will agree to whatever the peer requests (including no encryption
at all).
.Pp
If any arguments are given,
.Nm
will
.Em insist
on using MPPE and will close the link if it's rejected by the peer.
(Note: this behaviour can be overridden by a configured RADIUS server.)
.Pp
The first argument specifies the number of bits that
.Nm
should insist on during negotiations and the second specifies whether
.Nm
should insist on stateful or stateless mode.
In stateless mode, the
encryption dictionary is re-initialised with every packet according to
an encryption key that is changed with every packet.
In stateful mode,
the encryption dictionary is re-initialised every 256 packets or after
the loss of any data and the key is changed every 256 packets.
Stateless mode is less efficient but is better for unreliable transport
layers.
.It Ic set mrru Op Ar value
Setting this option enables Multi-link PPP negotiations, also known as
Multi-link Protocol or MP.
There is no default MRRU (Maximum Reconstructed Receive Unit) value.
If no argument is given, multi-link mode is disabled.
.It Ic set mru Xo
.Op Ic max Ns Op Ic imum
.Op Ar value
.Xc
The default MRU (Maximum Receive Unit) is 1500.
If it is increased, the other side *may* increase its MTU.
In theory there is no point in decreasing the MRU to below the default as the
.Em PPP
protocol says implementations *must* be able to accept packets of at
least 1500 octets.
.Pp
If the
.Ic maximum
keyword is used,
.Nm
will refuse to negotiate a higher value.
The maximum MRU can be set to 2048 at most.
Setting a maximum of less than 1500 violates the
.Em PPP
RFC, but may sometimes be necessary.
For example,
.Em PPPoE
imposes a maximum of 1492 due to hardware limitations.
.Pp
If no argument is given, 1500 is assumed.
A value must be given when
.Ic maximum
is specified.
.It Ic set mtu Xo
.Op Ic max Ns Op Ic imum
.Op Ar value
.Xc
The default MTU is 1500.
At negotiation time,
.Nm
will accept whatever MRU the peer requests (assuming it's
not less than 296 bytes or greater than the assigned maximum).
If the MTU is set,
.Nm
will not accept MRU values less than
.Ar value .
When negotiations are complete, the MTU is used when writing to the
interface, even if the peer requested a higher value MRU.
This can be useful for
limiting your packet size (giving better bandwidth sharing at the expense
of more header data).
.Pp
If the
.Ic maximum
keyword is used,
.Nm
will refuse to negotiate a higher value.
The maximum MTU can be set to 2048 at most.
.Pp
If no
.Ar value
is given, 1500, or whatever the peer asks for, is used.
A value must be given when
.Ic maximum
is specified.
.It Xo
.Ic set nbns
.Op Ar x.x.x.x Op Ar y.y.y.y
.Xc
This option allows the setting of the Microsoft NetBIOS name server
values to be returned at the peer's request.
If no values are given,
.Nm
will reject any such requests.
.It Xo
.Ic set openmode
.No active|passive Op Ar delay
.Xc
By default,
.Ic openmode
is always active with a one second
.Ar delay .
That is,
.Nm
will always initiate LCP/IPCP/CCP negotiation one second after the line
comes up.
If you want to wait for the peer to initiate negotiations, you
can use the value passive.
If you want to initiate negotiations immediately or after more than one
second, the appropriate
.Ar delay
may be specified here in seconds.
.It Ic set parity No odd|even|none|mark
This allows the line parity to be set.
The default value is
.Ar none .
.It Xo Ic set phone
.Sm off
.Ar telno
.Op | Ar backupnumber
.Op : Ar nextnumber
.Sm on
.Ar ...
.Xc
This allows the specification of the phone number to be used in
place of the \\\\T string in the dial and login chat scripts.
Multiple phone numbers may be given separated either by a pipe
.Pq Sq \&|
or a colon
.Pq Sq \&: .
.Pp
Numbers after the pipe are only dialed if the dial or login
script for the previous number failed.
.Pp
Numbers after the colon are tried sequentially, irrespective of
the reason the line was dropped.
.Pp
If multiple numbers are given,
.Nm
will dial them according to these rules until a connection is made, retrying
the maximum number of times specified by
.Ic set redial
below.
In
.Fl background
mode, each number is attempted at most once.
.It Ic set Oo Ic proc Oc Ns Xo
.Ic title Op Ar value
.Xc
The current process title as displayed by
.Xr ps 1
is changed according to
.Ar value .
If
.Ar value
is not specified, the original process title is restored.
All the
word replacements done by the shell commands (see the
.Ic bg
command above) are done here too.
.Pp
Note: if USER is required in the process title, the
.Ic set proctitle
command must appear in
.Pa ppp.linkup ,
as it is not known when the commands in
.Pa ppp.conf
are executed.
.It Ic set radius Op Ar config-file
This command enables RADIUS support (if it's compiled in).
.Ar config-file
refers to the radius client configuration file.
If PAP, CHAP, MSCHAP, or MSCHAPv2 are enabled,
.Nm
behaves as a
.Em \&N Ns etwork
.Em \&A Ns ccess
.Em \&S Ns erver
and uses the configured RADIUS server to authenticate rather than
authenticating from the
.Pa ppp.secret
file or from the passwd database.
.Pp
If none of PAP, CHAP, MSCHAP, or MSCHAPv2 are enabled,
.Ic set radius
will do nothing.
.Pp
.Nm
uses the following attributes from the RADIUS reply:
.Bl -tag -width XXX -offset XXX
.It RAD_FRAMED_IP_ADDRESS
The peer IP address is set to the given value.
.It RAD_FRAMED_IP_NETMASK
The tun interface netmask is set to the given value.
.It RAD_FRAMED_MTU
If the given MTU is less than the peer's MRU as agreed during LCP
negotiation,
.Em and
it is less that any configured MTU (see the
.Ic set mru
command), the tun interface MTU is set to the given value.
.It RAD_FRAMED_COMPRESSION
If the received compression type is
.Sq 1 ,
.Nm
will request VJ compression during IPCP negotiations despite any
.Dq disable vj
configuration command.
.It RAD_FILTER_ID
If this attribute is supplied,
.Nm
will attempt to use it as an additional label to load from the
.Pa ppp.linkup
and
.Pa ppp.linkdown
files.
The load will be attempted before (and in addition to) the normal
label search.
If the label doesn't exist, no action is taken and
.Nm
proceeds to the normal load using the current label.
.It RAD_FRAMED_ROUTE
The received string is expected to be in the format
.Ar dest Ns Op / Ns Ar bits
.Ar gw
.Op Ar metrics .
Any specified metrics are ignored.
.Dv MYADDR
and
.Dv HISADDR
are understood as valid values for
.Ar dest
and
.Ar gw ,
.Dq default
can be used for
.Ar dest
to specify the default route, and
.Dq 0.0.0.0
is understood to be the same as
.Dq default
for
.Ar dest
and
.Dv HISADDR
for
.Ar gw .
.Pp
For example, a returned value of
.Dq 1.2.3.4/24 0.0.0.0 1 2 -1 3 400
would result in a routing table entry to the 1.2.3.0/24 network via
.Dv HISADDR
and a returned value of
.Dq 0.0.0.0 0.0.0.0
or
.Dq default HISADDR
would result in a default route to
.Dv HISADDR .
.Pp
All RADIUS routes are applied after any sticky routes are applied, making
RADIUS routes override configured routes.
This also applies for RADIUS routes that don't include the
.Dv MYADDR
or
.Dv HISADDR
keywords.
.It RAD_FRAMED_IPV6_PREFIX
If this attribute is supplied, the value is substituted for IPV6PREFIX
in a command.
You may pass it to an upper layer protocol,
such as DHCPv6,
for delegating an IPv6 prefix to a peer.
.It RAD_FRAMED_IPV6_ROUTE
The received string is expected to be in the format
.Ar dest Ns Op / Ns Ar bits
.Ar gw
.Op Ar metrics .
Any specified metrics are ignored.
.Dv MYADDR6
and
.Dv HISADDR6
are understood as valid values for
.Ar dest
and
.Ar gw ;
.Dq default
can be used for
.Ar dest
to specify the default route; and
.Dq ::
is understood to be the same as
.Dq default
for
.Ar dest
and
.Dv HISADDR6
for
.Ar gw .
.Pp
For example, a returned value of
.Dq 2001:db8:abcd::/48 ::
would result in a routing table entry to the 2001:db8:abcd::/48 network via
.Dv HISADDR6
and a returned value of
.Dq :: ::
or
.Dq default HISADDR6
would result in a default route to
.Dv HISADDR6 .
.Pp
All RADIUS IPv6 routes are applied after any sticky routes are
applied, making RADIUS IPv6 routes override configured routes.
This also applies for RADIUS IPv6 routes that don't include the
.Dv MYADDR6
or
.Dv HISADDR6
keywords.
.It RAD_SESSION_TIMEOUT
If supplied, the client connection is closed after the given number of
seconds.
.It RAD_REPLY_MESSAGE
If supplied, this message is passed back to the peer as the authentication
SUCCESS text.
.It RAD_MICROSOFT_MS_CHAP_ERROR
If this
.Dv RAD_VENDOR_MICROSOFT
vendor specific attribute is supplied, it is passed back to the peer as the
authentication FAILURE text.
.It RAD_MICROSOFT_MS_CHAP2_SUCCESS
If this
.Dv RAD_VENDOR_MICROSOFT
vendor specific attribute is supplied and if MS-CHAPv2 authentication is
being used, it is passed back to the peer as the authentication SUCCESS text.
.It RAD_MICROSOFT_MS_MPPE_ENCRYPTION_POLICY
If this
.Dv RAD_VENDOR_MICROSOFT
vendor specific attribute is supplied and has a value of 2 (Required),
.Nm
will insist that MPPE encryption is used (even if no
.Dq set mppe
configuration command has been given with arguments).
If it is supplied with a value of 1 (Allowed), encryption is made optional
(despite any
.Ic set mppe
configuration commands with arguments).
.It RAD_MICROSOFT_MS_MPPE_ENCRYPTION_TYPES
If this
.Dv RAD_VENDOR_MICROSOFT
vendor specific attribute is supplied, bits 1 and 2 are examined.
If either or both are set, 40-bit and/or 128-bit (respectively) encryption
options are set, overriding any given first argument to the
.Ic set mppe
command.
Note: it is not currently possible for the RADIUS server to specify 56-bit
encryption.
.It RAD_MICROSOFT_MS_MPPE_RECV_KEY
If this
.Dv RAD_VENDOR_MICROSOFT
vendor specific attribute is supplied, its value is used as the master
key for decryption of incoming data.
When clients are authenticated using MSCHAPv2,
the RADIUS server MUST provide this attribute if inbound MPPE is
to function.
.It RAD_MICROSOFT_MS_MPPE_SEND_KEY
If this
.Dv RAD_VENDOR_MICROSOFT
vendor specific attribute is supplied, its value is used as the master
key for encryption of outgoing data.
When clients are authenticated using MSCHAPv2,
the RADIUS server MUST provide this attribute if outbound MPPE is
to function.
.El
.Pp
Values received from the RADIUS server may be viewed using
.Ic show bundle .
.It Ic set rad_alive Ar timeout
When RADIUS is configured, setting
.Dq rad_alive
to a non-zero
.Ar timeout
value will tell
.Nm
to sent RADIUS accounting information to the RADIUS server every
.Ar timeout
seconds.
.It Ic set reconnect Ar timeout ntries
Should the line drop unexpectedly (due to loss of CD or LQR
failure), a connection will be re-established after the given
.Ar timeout .
The line will be re-connected at most
.Ar ntries
times.
.Ar Ntries
defaults to zero.
A value of
.Ar random
for
.Ar timeout
will result in a variable pause, somewhere between 1 and 30 seconds.
.It Ic set recvpipe Op Ar value
This sets the routing table RECVPIPE value.
The optimum value is just over twice the MTU value.
If
.Ar value
is unspecified or zero, the default kernel controlled value is used.
.It Xo Ic set redial
.Sm off
.Ar secs
.Oo + Ar inc
.Op - Ar max
.Oc
.Op . Ar next
.Sm on
.Op Ar attempts
.Xc
.Nm
can be instructed to attempt to redial
.Ar attempts
times.
If more than one phone number is specified (see
.Ic set phone
above), a pause of
.Ar next
is taken before dialing each number.
A pause of
.Ar secs
is taken before starting at the first number again.
A literal value of
.Dq Li random
may be used here in place of
.Ar secs
and
.Ar next ,
causing a random delay of between 1 and 30 seconds.
.Pp
If
.Ar inc
is specified, its value is added onto
.Ar secs
each time
.Nm
tries a new number.
.Ar secs
will only be incremented at most
.Ar max
times.
.Ar max
defaults to 10.
.Pp
Note: the
.Ar secs
delay will be effective, even after
.Ar attempts
has been exceeded, so an immediate manual dial may appear to have
done nothing.
If an immediate dial is required, a
.Sq !\&
should immediately follow the
.Ic open
keyword.
See the
.Ic open
description above for further details.
.It Ic set sendpipe Op Ar value
This sets the routing table SENDPIPE value.
The optimum value is just over twice the MTU value.
If
.Ar value
is unspecified or zero, the default kernel controlled value is used.
.It Xo
.Ic set server Ns \&| Ns Ic socket
.Ar TcpPort Ns \&| Ns Ar LocalName Ns |none|open|closed
.Op password Op Ar mask
.Xc
This command tells
.Nm
to listen on the given socket or
.Sq diagnostic port
for incoming command connections.
.Pp
The word
.Dq none
instructs
.Nm
to close any existing socket and clear the socket configuration.
The word
.Dq open
instructs
.Nm
to attempt to re-open the port.
The word
.Dq closed
instructs
.Nm
to close the open port.
.Pp
If you wish to specify a local domain socket,
.Ar LocalName
must be specified as an absolute file name, otherwise it is assumed
to be the name or number of a TCP port.
You may specify the octal umask to be used with a local domain socket.
Refer to
.Xr umask 2
for umask details.
Refer to
.Xr services 5
for details of how to translate TCP port names.
.Pp
You must also specify the password that must be entered by the client
(using the
.Dq passwd
variable above) when connecting to this socket.
If the password is
specified as an empty string, no password is required for connecting clients.
.Pp
When specifying a local domain socket, the first
.Sq %d
sequence found in the socket name will be replaced with the current
interface unit number.
This is useful when you wish to use the same
profile for more than one connection.
.Pp
In a similar manner TCP sockets may be prefixed with the
.Sq +
character, in which case the current interface unit number is added to
the port number.
.Pp
When using
.Nm
with a server socket, the
.Xr pppctl 8
command is the preferred mechanism of communication.
Currently,
.Xr telnet 1
can also be used, but link encryption may be implemented in the future, so
.Xr telnet 1
should be avoided.
.Pp
Note:
.Dv SIGUSR1
and
.Dv SIGUSR2
interact with the diagnostic socket.
.It Ic set speed Ar value
This sets the speed of the serial device.
If speed is specified as
.Dq sync ,
.Nm
treats the device as a synchronous device.
.Pp
Certain device types will know whether they should be specified as
synchronous or asynchronous.
These devices will override incorrect
settings and log a warning to this effect.
.It Xo
.Ic set stopped
.Op Ar LCPseconds Op Ar CCPseconds
.Xc
If this option is set,
.Nm
will time out after the given FSM (Finite State Machine) has been in
the stopped state for the given number of
.Dq seconds .
This option may be useful if the peer sends a terminate request,
but never actually closes the connection despite our sending a terminate
acknowledgement.
This is also useful if you wish to
.Dq set openmode passive
and time out if the peer doesn't send a Configure Request within the
given time.
Use
.Dq set log +lcp +ccp
to make
.Nm
log the appropriate state transitions.
.Pp
The default value is zero, where
.Nm
doesn't time out in the stopped state.
.Pp
This value should not be set to less than the openmode delay (see
.Ic set openmode
above).
.It Ic set timeout Ar idleseconds Op Ar mintimeout
This command allows the setting of the idle timer.
Refer to the section titled
.Sx SETTING THE IDLE TIMER
for further details.
.Pp
If
.Ar mintimeout
is specified,
.Nm
will never idle out before the link has been up for at least that number
of seconds.
.It Ic set urgent Xo
.Op tcp|udp|none
.Oo Op +|- Ns
.Ar port
.Oc No ...
.Xc
This command controls the ports that
.Nm
prioritizes when transmitting data.
The default priority TCP ports
are ports 21 (ftp control), 22 (ssh), 23 (telnet), 513 (login), 514 (shell),
543 (klogin) and 544 (kshell).
There are no priority UDP ports by default.
See
.Xr services 5
for details.
.Pp
If neither
.Dq tcp
or
.Dq udp
are specified,
.Dq tcp
is assumed.
.Pp
If no ports are given,
the priority port lists are cleared (although if
.Dq tcp
or
.Dq udp
is specified, only that list is cleared).
If the first
.Ar port
argument is prefixed with a plus
.Pq Sq \&+
or a minus
.Pq Sq \&- ,
the current list is adjusted, otherwise the list is reassigned.
ports prefixed with a plus or not prefixed at all are added to the list and
ports prefixed with a minus are removed from the list.
.Pp
If
.Dq none
is specified, all priority port lists are disabled and even
.Dv IPTOS_LOWDELAY
packets are not prioritised.
.It Ic set vj slotcomp on|off
This command tells
.Nm
whether it should attempt to negotiate VJ slot compression.
By default, slot compression is turned
.Ar on .
.It Ic set vj slots Ar nslots
This command sets the initial number of slots that
.Nm
will try to negotiate with the peer when VJ compression is enabled (see the
.Ic enable
command above).
It defaults to a value of 16.
.Ar Nslots
must be between 4 and 16 inclusive.
.El
.It Xo
.Ic shell No \&|
.Ic !\&
.Op Ar command
.Xc
If
.Ar command
is not specified, a shell is invoked according to the
.Dv SHELL
environment variable.
Otherwise, the given
.Ar command
is executed.
Word replacement is done in the same way as for the
.No !\& Ns Ic bg
command as described above.
.Pp
Use of the
.Sq !\&
character requires a following space as with any of the other commands.
You should note that this command is executed in the foreground;
.Nm
will not continue running until this process has exited.
Use the
.Ic bg
command if you wish processing to happen in the background.
.It Ic show Ar var
This command allows the user to examine the following:
.Bl -tag -width 2n
.It Ic show bundle
Show the current bundle settings.
.It Ic show ccp
Show the current CCP compression statistics.
.It Ic show compress
Show the current VJ compression statistics.
.It Ic show escape
Show the current escape characters.
.It Ic show filter Op Ar name
List the current rules for the given filter.
If
.Ar name
is not specified, all filters are shown.
.It Ic show hdlc
Show the current HDLC statistics.
.It Ic show help No \&| Ic ?\&
Give a summary of available show commands.
.It Ic show iface
Show the current interface information
(the same as
.Ic iface show ) .
.It Ic show ipcp
Show the current IPCP statistics.
.It Ic show layers
Show the protocol layers currently in use.
.It Ic show lcp
Show the current LCP statistics.
.It Ic show Oo Ic data Oc Ns Xo
.Ic link
.Xc
Show high level link information.
.It Ic show links
Show a list of available logical links.
.It Ic show log
Show the current log values.
.It Ic show mem
Show current memory statistics.
.It Ic show ncp
Show the current NCP statistics.
.It Ic show physical
Show low level link information.
.It Ic show mp
Show Multi-link information.
.It Ic show proto
Show current protocol totals.
.It Ic show route
Show the current routing tables.
.It Ic show stopped
Show the current stopped timeouts.
.It Ic show timer
Show the active alarm timers.
.It Ic show version
Show the current version number of
.Nm ppp .
.El
.It Ic term
Go into terminal mode.
Characters typed at the keyboard are sent to the device.
Characters read from the device are displayed on the screen.
When a remote
.Em PPP
peer is detected,
.Nm
automatically enables Packet Mode and goes back into command mode.
.El
.Sh MORE DETAILS
.Bl -bullet
.It
Read the example configuration files.
They are a good source of information.
.It
Use
.Ic help ,
.Ic nat \&? ,
.Ic enable \&? ,
.Ic set ?\& ,
and
.Ic show ?\&
to get online information about what's available.
.It
The following URLs contain useful information:
.Pp
.Bl -bullet -compact
.It
.Lk http://www.FreeBSD.org/doc/en_US.ISO8859-1/books/faq/ppp.html
.It
.Lk http://www.FreeBSD.org/doc/en_US.ISO8859-1/books/handbook/userppp.html
.El
.El
.Sh FILES
.Nm
refers to four files:
.Pa ppp.conf ,
.Pa ppp.linkup ,
.Pa ppp.linkdown ,
and
.Pa ppp.secret .
These files are placed in the
.Pa /etc/ppp
directory.
.Bl -tag -width 2n
.It Pa /etc/ppp/ppp.conf
System default configuration file.
.It Pa /etc/ppp/ppp.secret
An authorisation file for each system.
.It Pa /etc/ppp/ppp.linkup
A file to check when
.Nm
establishes a network level connection.
.It Pa /etc/ppp/ppp.linkdown
A file to check when
.Nm
closes a network level connection.
.It Pa /var/log/ppp.log
Logging and debugging information file.
Note: this name is specified in
.Pa /etc/syslog.conf .
See
.Xr syslog.conf 5
for further details.
.It Pa /var/spool/lock/LCK..*
tty port locking file.
Refer to
.Xr uucplock 3
for further details.
.It Pa /var/run/tunN.pid
The process ID (PID) of the
.Nm
program connected to the tunN device, where
.Sq N
is the number of the device.
.It Pa /var/run/cuaXX.if
The tun interface used by this port.
Again, this file is only created in
.Fl background ,
.Fl auto ,
and
.Fl ddial
modes.
.It Pa /etc/services
Get port number if port number is using service name.
.It Pa /var/run/ppp-authname-class-value
In multi-link mode, local domain sockets are created using the peer
authentication name
.Pq Sq authname ,
the peer endpoint discriminator class
.Pq Sq class ,
and the peer endpoint discriminator value
.Pq Sq value .
As the endpoint discriminator value may be a binary value, it is turned
to HEX to determine the actual file name.
.Pp
This socket is used to pass links between different instances of
.Nm ppp .
.El
.Sh SEE ALSO
.Xr at 1 ,
.Xr ftp 1 ,
.Xr gzip 1 ,
.Xr hostname 1 ,
.Xr login 1 ,
.Xr ps 1 ,
.Xr telnet 1 ,
.Xr umask 2 ,
.Xr syslog 3 ,
.Xr uucplock 3 ,
.Xr com 4 ,
.Xr tun 4 ,
.Xr ucom 4 ,
.Xr crontab 5 ,
.Xr group 5 ,
.Xr passwd 5 ,
.Xr protocols 5 ,
.Xr resolv.conf 5 ,
.Xr services 5 ,
.Xr syslog.conf 5 ,
.Xr adduser 8 ,
.Xr chat 8 ,
.Xr getty 8 ,
.Xr ifconfig 8 ,
.Xr inetd 8 ,
.Xr init 8 ,
.Xr named 8 ,
.Xr ping 8 ,
.Xr pppctl 8 ,
.Xr pppd 8 ,
.Xr pppoe 8 ,
.Xr route 8 ,
.Xr sshd 8 ,
.Xr syslogd 8 ,
.Xr tcpdump 8 ,
.Xr traceroute 8 ,
.Xr vipw 8
.Sh HISTORY
This program was originally written by
.An Toshiharu OHNO Aq Mt tony-o@@iij.ad.jp ,
and was submitted to
.Fx 2.0.5
by
.An Atsushi Murai Aq Mt amurai@@spec.co.jp .
.Pp
It was substantially modified during 1997 by
.An Brian Somers Aq Mt brian@@Awfulhak.org ,
and was ported to
.Ox
in November that year
(just after the 2.2 release).
.Pp
Most of the code was rewritten by
.An Brian Somers
in early 1998 when multi-link ppp support was added.
@


1.121
log
@use .Mt for email addresses; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d26 1
a26 1
.\" $OpenBSD: ppp.8,v 1.120 2013/07/10 15:56:56 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: July 10 2013 $
@


1.120
log
@no need for this file to be .m4 any longer; i'm actually following suit
to the same move as made by, i think, freebsd, but i can;t for the life of
me find the corresponding commit;

ok/help espie
@
text
@d26 1
a26 1
.\" $OpenBSD: ppp.8.m4,v 1.46 2012/08/27 20:57:24 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: August 27 2012 $
d6065 1
a6065 1
.An Toshiharu OHNO Aq tony-o@@iij.ad.jp ,
d6069 1
a6069 1
.An Atsushi Murai Aq amurai@@spec.co.jp .
d6072 1
a6072 1
.An Brian Somers Aq brian@@Awfulhak.org ,
@


1.119
log
@Grrr...here it is.
@
text
@d26 1
a26 1
.\" $OpenBSD: ppp.8,v 1.118 2001/08/02 20:52:58 brian Exp $
d28 1
a28 1
.Dd September 20, 1995
d33 1
a33 1
.Nd Point to Point Protocol (a.k.a. user-ppp)
d53 2
a54 1
tunnel device driver (tun).
d61 1
a61 1
.Nm Ns No 's
d67 4
a70 3
Refer to
.Xr libalias 3
for details.
d95 2
a96 4
The following
.Va mode Ns No s
are understood by
.Nm ppp :
d100 1
a100 1
opens the tun interface, configures it then goes into the background.
d110 1
a110 1
.Dq set choked
d116 1
a116 1
.Dq system
d118 1
a118 1
.Dq set ifaddr
d147 1
a147 1
.Nm Ns No 's
d150 3
a152 1
This is used for receiving incoming connections.
d155 1
a155 1
.Dq set device
d157 4
d165 1
a165 1
.Dq set device
d171 4
a174 2
will always keep the device open and will never use any configured
chat scripts.
d185 1
a185 1
loads any sections specified on the command line then provides an
d190 2
a191 1
.Pq as specified in Pa /etc/ppp/ppp.conf
d204 1
a204 1
the status of connection and close the connection.
d208 1
a208 1
.Dq term
d242 1
a242 1
will never voluntarily quit from dedicated mode - you must send it the
d253 2
a254 1
CallBack Control Protocol (ftp://ftp.microsoft.com/developr/rfc/cbcp.txt).
d278 1
a278 1
.It "Supports PAP and CHAP (rfc 1994, 2433 and 2759) authentication.
d288 1
a288 1
.It Supports RADIUS (rfc 2138) authentication.
d290 6
a295 6
.Em \&R Ns No emote
.Em \&A Ns No ccess
.Em \&D Ns No ial
.Em \&I Ns No n
.Em \&U Ns No ser
.Em \&S Ns No ervice
a298 7
If
.Pa libradius
is available at compile time,
.Nm
will use it to make
.Em RADIUS
requests when configured to do so.
d312 1
a312 1
filter to define a dialing trigger packet and the
d317 1
a317 1
.Xr tcpdump 1
d323 1
a323 1
.Em host Ns No : Ns Em port Ns
d333 4
a336 32
.It Supports PPP over ISDN.
If
.Nm
is given a raw B-channel i4b device to open as a link, it's able to talk
to the
.Xr isdnd 8
daemon to establish an ISDN connection.
.It Supports PPP over Ethernet (rfc 2516).
If
.Nm
is given a device specification of the format
.No PPPoE: Ns Ar iface Ns Xo
.Op \&: Ns Ar provider Ns
.Xc
and if
.Xr netgraph 4
is available,
.Nm
will attempt talk
.Em PPP
over Ethernet to
.Ar provider
using the
.Ar iface
network interface.
.Pp
On systems that do not support
.Xr netgraph 4 ,
an external program such as
.Xr pppoe 8
may be used.
.It "Supports IETF draft Predictor-1 (rfc 1978) and DEFLATE (rfc 1979) compression."
d349 1
a349 1
.It Supports Microsoft's IPCP extensions (rfc 1877).
d354 1
a354 1
.It Supports Multi-link PPP (rfc 1990)
d359 2
a360 2
.It Supports MPPE (draft-ietf-pppext-mppe)
MPPE is Microsoft Point to Point Encryption scheme.
d369 3
d376 1
a376 1
.Dv root
d378 1
a378 1
.Dv network ,
d380 1
a380 1
.Dv 04554 .
d383 1
a383 1
will not run if the invoking user id is not zero.
d385 1
a385 1
.Dq allow users
d390 1
a390 1
switches to user id 0 in order to alter the system routing table, set up
d392 7
a398 2
All external commands (executed via the "shell" or "!bg" commands) are executed
as the user id that invoked
d402 1
a402 1
logging facility if you're interested in what exactly is done as user id
d407 1
a407 1
you may need to deal with some initial configuration details.
d412 2
a413 2
If it doesn't, or if you require more than one tun
interface, you'll need to rebuild your kernel with the following line in
d416 1
a416 1
.Dl pseudo-device tun N
d418 9
a426 5
where
.Ar N
is the maximum number of
.Em PPP
connections you wish to support.
d449 1
a449 1
.Dq allow users
d493 1
a493 1
.Nm Ns No 's
d496 2
a497 1
.Pq using Xr named 8
d499 1
a499 1
.Sq nameserver
d513 1
a513 1
.Dq enable dns
d515 1
a515 1
.Dq resolv
d520 2
a521 2
.Dv awfulhak .
when you invoke
d552 1
a552 1
as it is waiting for the CTS (clear to send) signal - which will never
d559 1
a559 1
description below too - you'll probably need to
d565 1
a565 1
.Nm Ns No 's
d575 2
a576 1
.Pq set to Dq none
d610 3
a612 1
The term command can now be used to talk directly to the device:
d642 1
a642 1
.Dq ~p
d675 3
a677 3
If only some of the three Ps go uppercase, wait until
either everything is uppercase or lowercase.
If they revert to lowercase, it means that
d680 1
a680 1
A good first step for troubleshooting at this point would be to
d685 1
a685 1
and try again.
d687 1
a687 1
.Dq set log
d695 3
a697 2
When the link is established, the show command can be used to see how
things are going:
d707 2
d729 1
a729 1
.Sq HISADDR
d732 1
a732 1
.Dq add
d735 1
d745 1
a745 1
You can now use your network applications (ping, telnet, ftp etc.)
d751 1
a751 1
.Dq ^Z
d753 1
a753 1
.Dq bg ) .
d765 1
a765 1
Each line contains one comment, inclusion, label or command:
d769 1
a769 1
.Pq Dq #
d771 1
a771 1
Leading whitespace are ignored when identifying comment lines.
d774 2
a775 2
.Sq !include .
It must have one argument - the file to include.
d782 3
a784 2
a colon
.Pq Dq \&: .
d787 29
d843 3
a845 1
The load command can be used to manually load a section from the
d852 1
a852 1
Note, no action is taken by
d856 1
a856 1
.Dq load
d871 1
a871 1
.Dq set mode
d875 1
a875 1
.Sq ppp
d877 1
a877 1
.Sq PPP :
d910 1
a910 1
.Dq shell
d912 1
a912 1
.Dq bg
d926 1
a926 1
now supports
d929 3
a931 1
.Dv HISADDR
d933 2
a934 5
.Dv MYADDR
literals will automatically be updated when the values of
.Dv HISADDR
and/or
.Dv MYADDR
d943 1
a943 1
job) you should use the
d973 2
a974 2
.Dq set ifaddr
command to define the remote peers IP address.
d976 1
a976 1
.Pa /usr/share/examples/ppp/ppp.conf.sample )
d989 1
a989 1
.Dq set server
d991 3
a993 2
.Pa /etc/ppp/ppp.conf ,
.Pq for example, Dq set server +3000 mypasswd
d1003 1
a1003 1
.Dq show who
d1023 1
a1023 1
.Dq set redial
d1025 9
a1033 5
.Pp
.No set redial Ar secs Ns Xo
.Oo + Ns Ar inc Ns
.Op - Ns Ar max Ns
.Oc Ns Op . Ns Ar next
d1035 1
a1035 1
.Xc
d1039 1
a1039 1
is the number of seconds to wait before attempting
d1045 1
a1045 1
is the number of seconds that
d1055 1
a1055 1
is the maximum number of times
d1063 1
a1063 1
is the number of seconds to wait before attempting
d1065 1
a1065 1
.Dq set phone
d1072 1
a1072 1
is the maximum number of times to try to connect for each outgoing packet
d1086 1
a1086 1
will attempt to connect 4 times for each outgoing packet that causes
a1093 1
.Pp
d1098 1
a1098 1
tells
d1109 1
a1109 1
connects, disconnects and fails to connect again, the timeout starts again
d1141 1
a1141 1
tells
d1144 2
a1145 5
.Ar 3
seconds before attempting to reconnect.
This may happen up to
.Ar 5
times before
d1161 1
a1161 1
.Dq set redial
d1166 1
a1166 1
To terminate the program, type
d1173 1
a1173 1
.Dq quit
d1182 1
a1182 1
.Dq quit all
d1192 3
a1194 3
Make sure the modem and (optionally)
.Pa /etc/rc.serial
is configured correctly.
a1200 1
.Pp
d1284 1
a1284 1
.Dq accept dns
d1286 1
a1286 1
.Dq set nbns
d1300 1
a1300 1
.Dq pp
d1302 1
a1302 1
.Bd -literal
d1309 1
a1309 1
.Xr getty 8
d1318 1
a1318 1
.Pq or both
d1322 1
a1322 1
.Sq incoming
d1330 1
a1330 1
.Bd -literal
d1339 1
a1339 1
.Dq /usr/local/bin/ppplogin .
d1345 1
a1345 1
allowing anybody to establish ppp session with your machine
d1356 1
a1356 1
.Sq enable chap
d1358 1
a1358 1
.Sq enable pap
d1367 1
a1367 1
.Pp
d1371 1
d1381 1
a1381 1
.Dq \&*
d1388 1
a1388 1
.Ar name Ns No / Ns Ar key
d1395 1
a1395 1
.Pq if specified
d1398 1
a1398 1
.Dq set ifaddr
d1421 1
a1421 1
.Dq \&* ,
d1426 1
a1426 1
.Nm Ns No 's
d1428 1
a1428 1
.Sh PPP OVER TCP and UDP (a.k.a Tunnelling)
d1432 1
a1432 1
use a TCP connection instead by specifying the host, port and protocol as the
d1510 1
a1510 1
.Dq * ,
d1524 1
a1524 1
 set log Phase Chat Connect hdlc LCP IPCP CCP tun
d1528 1
a1528 1
with the route setup in
d1552 1
a1552 1
The networks are effectively bridged - the underlying TCP
d1561 1
a1561 1
"guaranteed delivery" mechanisms in place - the underlying TCP
d1564 1
a1564 1
link - probably TCP again.
d1578 1
a1578 1
Care should be taken when adding a default route through a tunneled
d1581 2
a1582 1
.Pq added in Pa /etc/ppp/ppp.linkup
d1601 1
a1601 1
When routing your connection accross a public network such as the Internet,
d1615 1
a1615 1
ensuring that you've put the requisite entry in
d1619 1
a1619 1
cannot be used)
d1651 2
a1652 2
.Xr traceroute 8 )
should be checked on the
d1676 1
a1676 1
filter and the
d1684 1
a1684 1
set filter
d1704 3
a1706 3
.Sq in ,
.Sq out ,
.Sq dial
d1708 1
a1708 1
.Sq alive .
d1711 1
a1711 4
is a numeric value between
.Sq 0
and
.Sq 39
d1715 1
a1715 3
but only if rule
.Sq 0
is defined.
d1719 1
a1719 1
.Sq permit
d1721 2
a1722 2
.Sq deny ,
in which case, if a given packet matches the rule, the associated action
d1726 1
a1726 1
.Sq clear
d1736 1
a1736 1
.Pq Dq !\& ,
d1755 3
a1757 1
.Dv MYADDR
d1759 1
a1759 1
.Dv HISADDR
d1761 1
a1761 1
.Dq bg
d1766 1
a1766 1
.Dq add
d1770 2
a1771 8
must be one of
.Sq icmp ,
.Sq igmp ,
.Sq ipip ,
.Sq ospf ,
.Sq udp
or
.Sq tcp .
d1776 1
a1776 1
.Sq \&eq
d1779 1
a1779 1
meaning less-than, equal and greater-than respectively.
d1781 1
a1781 1
can be specified as a numeric port or by service name from
d1793 1
a1793 1
and represent the TH_ACK, TH_SYN and TH_FIN or TH_RST TCP flags respectively.
a1803 1
.Pp
d1823 1
a1823 1
.Dq set filter Ar name No -1
d1831 1
a1831 1
.Dq show bundle
d1833 1
a1833 1
.Dq set timeout
d1841 2
a1842 2
.Pq or 3 min .
To disable the idle timer function, use the command
d1868 1
a1868 1
.Pq or requests them .
d1872 1
a1872 1
.Dq disable
d1874 1
a1874 1
.Dq deny
d1882 1
a1882 1
.Pq assuming that the peer supports both algorithms .
d1888 1
a1888 1
.Dq set deflate
d1901 1
d1908 1
a1908 1
returns ACK to the requester.
d1914 1
a1914 1
send ACK), IPCP is set to the open state and a network level connection
d1917 1
a1917 1
.Dq set ifaddr
d1920 1
a1920 1
.No set ifaddr Oo Ar src_addr Ns
d1930 1
a1930 2
where,
.Sq src_addr
d1932 3
a1934 3
.Sq dst_addr
is the IP address which the remote side should use and
.Sq netmask
d1936 1
a1936 1
.Sq Src_addr
d1939 1
a1939 1
.Sq dst_addr
d1941 1
a1941 1
.Sq netmask
d1943 1
a1943 1
.Sq src_addr .
d1945 1
a1945 1
.Sq netmask
d1954 1
a1954 1
.Sq src_addr .
d1956 1
a1956 1
.Sq trigger_addr
d1983 1
a1983 1
.Dq set ifaddr
d1989 1
a1989 1
.Pq Dq /
d2006 1
a2006 1
preferred IP address and will obey the remote peers selection.
d2011 1
a2011 1
try to insist that 192.244.177.2 be used first.
d2013 3
d2021 1
a2021 1
.Dq set phone
d2025 1
a2025 1
.Pq Dq \&|
d2027 1
a2027 1
.Pq Dq \&: :
d2029 7
a2035 5
.No set phone Ar telno Ns Xo
.Oo \&| Ns Ar backupnumber
.Oc Ns ... Ns Oo : Ns Ar nextnumber
.Oc Ns ...
.Xc
d2055 4
a2058 2
If the login script of the 2345678 number fails, the next number is still the
3456789 number.
d2066 1
a2066 1
.Dq set dial
d2070 1
a2070 1
.Dq set redial .
d2082 1
a2082 1
.Dq set dial
d2084 1
a2084 1
.Dq set login
d2087 1
a2087 1
.Dq set dial
d2098 1
a2098 1
Abort if the string "BUSY" or "NO CARRIER" are received.
d2136 1
a2136 1
Send "awfulhak"
d2152 1
a2152 1
.Dq set authkey
d2168 1
a2168 1
.Dq set device
d2170 1
a2170 1
.Dq set speed
d2177 10
a2186 7
Cuaa0 is the first serial port on
.Fx .
If you're running
.Nm
on
.Ox ,
cua00 is the first.
d2192 1
a2192 1
.Dq set ifaddr
d2212 2
a2213 2
This will force your ISP to assign a number.
(The third argument will
d2215 1
a2215 1
.Sq src_addr .
d2219 1
a2219 1
ISPs IP number would be:
a2222 1
.Pp
d2225 7
a2231 1
If this is the case, add the line
a2235 3
to
.Pa /etc/ppp/ppp.conf .
.Pp
d2239 1
a2239 1
.Pq 10.0.0.2 in this example .
d2241 1
a2241 1
.Sq sticky ,
a2244 9
.Pp
Previous versions of
.Nm
required a similar entry in the
.Pa /etc/ppp/ppp.linkup
file.
Since the advent of
.Sq sticky routes ,
this is no longer required.
d2262 2
a2263 1
Ask your ISP to authenticate your nameserver address(es) with the line
d2293 1
a2293 2
.Pp
.Bl -tag -width XXXXXXXXX -offset XXX -compact
d2297 8
a2304 2
The most common use of 'all' is as a basis, where you remove some facilities
after enabling 'all' ('debug' and 'timer' are usually best disabled.)
d2313 3
a2315 3
.Sq dial ,
.Sq login ,
.Sq logout
d2317 1
a2317 1
.Sq hangup
d2333 1
a2333 1
Log all function calls specifically made as user id 0.
d2344 8
d2359 3
a2361 1
Include the tun device on each log line.
d2365 1
a2365 1
output is sent to the log file using syslogs
d2369 1
a2369 1
and the log file using syslogs
d2377 1
a2377 1
.Dq set log
d2390 1
a2390 1
(i.e., only the un-maskable warning, error and alert output).
d2392 1
a2392 1
If The first argument to
d2412 1
a2412 1
Log messages of level Warning, Error and Alert are not controllable
d2434 1
a2434 1
.It HUP, TERM & QUIT
d2439 1
a2439 1
This signal, tells
d2445 1
a2445 1
This signal, tells
d2463 1
a2463 1
.Dq authentication id .
d2470 1
a2470 1
.Dq set enddisc
d2472 1
a2472 1
.Dq set authname
d2476 2
a2477 1
.Pq and Sq authkey
d2481 1
a2481 1
.Dq set mrru
d2488 1
a2488 1
.Sq link
d2490 2
a2491 1
.Pq called Sq deflink .
d2493 1
a2493 1
.Dq clone
d2500 1
a2500 1
.Dq clone
d2504 1
a2504 1
.Sq interactive
d2507 1
a2507 1
.Dq set mode
d2511 1
a2511 1
.Sq closed
d2516 1
a2516 1
.Dq show links
d2529 1
a2529 1
Some commands can still be used without specifying a link - resulting
d2531 1
a2531 1
.Sq bundle
a2541 1
.Pp
d2556 2
a2557 2
 clone 1,2,3		# Create 3 new links - duplicates of the default
 link deflink remove	# Delete the default link (called ``deflink'')
d2561 1
a2561 1
Usually, the link will be configured first, then cloned.
d2564 1
a2564 2
configuration.
.Pp
d2566 1
a2566 1
  link 1,2,3 set mode ddial
a2569 1
.Pp
d2571 1
a2571 1
  link * set mode auto
a2578 1
.Pp
d2580 3
a2582 3
 link 1 set device /dev/cua00
 link 2 set device /dev/cua01
 link 3 set device /dev/cua02
d2586 1
a2586 1
.Dq help
d2588 3
a2590 3
.Dq link
command), which have optional
context and which should not have any context.
d2604 1
a2604 1
.Nm Ns No 's
d2631 7
a2637 1
.It accept|deny|enable|disable Ar option....
d2642 1
a2642 1
.Dq option
d2653 1
a2653 1
.Dq Option
d2666 1
a2666 3
See
.Pa rfc1662
for details.
d2680 1
a2680 1
.Dq enable chap .
d2714 1
a2714 1
- a
d2724 1
a2724 2
as specified in
.Pa rfc1979 .
d2729 1
a2729 2
in
.Pa rfc1975 Ns !
d2735 1
a2735 4
is
.Ar enable Ns No d
and
.Ar accept Ns No ed .
d2746 1
a2746 2
It is disabled by default as it violates
.Pa rfc1975 .
d2751 1
a2751 2
If
.Dq enable Ns No d,
d2759 1
a2759 2
If
.Dq accept Ns No ed,
d2766 1
a2766 1
.Dq set dns
d2773 1
a2773 1
.Dq set enddisc
d2777 1
a2777 1
We reject the peers discriminator if
d2788 1
a2788 1
CHAP alternatives (although is still more secure than PAP).
d2798 1
a2798 1
to determine that the link is down without relying on the modems
d2810 7
a2816 3
If the peer doesn't agree,
.Nm
will send ECHO LQR requests instead.
d2821 4
a2824 1
Whether using LQR or ECHO LQR,
d2834 6
d2842 1
a2842 1
This is Microsoft Point to Point Encryption scheme.
d2844 3
a2846 3
40-, 56- and 128-bits.
Refer to
.Dq set mppe
d2852 2
a2853 2
combination of MD4, SHA-1 and DES to encrypt the challenge rather than using the
standard MD5 mechanism.
d2864 1
a2864 1
CHAP type 0x80 for LANMan is also supported - see
d2871 2
a2872 3
.Dq NT
use CHAP type 0x80, when acting as authenticator with both
.Dq enable Ns No d ,
d2880 1
a2880 2
acts as the authenticatee with both protocols
.Dq accept Ns No ed ,
d2898 1
a2898 1
.Dq enable pap .
d2904 1
a2904 1
.Dq passwdauth
d2906 1
a2906 1
.Dq set radius
d2930 1
a2930 1
.Pq 12 bit
d2941 27
d2993 7
d3004 1
a3004 1
exchanges low-level LCP, CCP and IPCP configuration traffic, the
d3016 34
d3072 1
a3072 1
.Nm Ns No 's
d3105 43
d3161 1
a3161 1
.Dq \&*
d3178 1
a3178 1
This allows other machines connecteed to the LAN to talk to
d3192 1
a3192 1
.Dq add
d3196 1
a3196 1
.Dq set ifaddr
d3201 1
a3201 1
.Dq add
d3203 3
a3205 1
.Dv HISADDR
d3207 1
a3207 1
.Dv MYADDR
d3209 1
a3209 1
.Sq stick route
d3211 1
a3211 5
Each time
.Dv HISADDR
or
.Dv MYADDR
change, this list is re-applied to the routing table.
d3215 1
a3215 1
.Sq stick route
d3217 1
a3217 1
.It Op tcp Ns Xo
d3231 1
a3231 1
a rolling 5 second window, and current, best and total figures are retained.
d3235 1
a3235 1
.Dq show
a3253 23
.It iface-alias
Default: Enabled if
.Fl nat
is specified.
This option simply tells
.Nm
to add new interface addresses to the interface rather than replacing them.
The option can only be enabled if network address translation is enabled
.Pq Dq nat enable yes .
.Pp
With this option enabled,
.Nm
will pass traffic for old interface addresses through the NAT engine
.Pq see Xr libalias 3 ,
resulting in the ability (in
.Fl auto
mode) to properly connect the process that caused the PPP link to
come up in the first place.
.Pp
Disabling NAT with
.Dq nat enable no
will also disable
.Sq iface-alias .
d3255 1
a3255 2
.Pp
.It add Ns Xo
d3264 1
a3264 1
.Ar /nn
d3272 1
a3272 1
.Sq default
d3284 3
a3286 1
.Sq MYADDR
d3288 1
a3288 1
.Sq HISADDR
d3290 3
a3292 1
.Sq HISADDR
d3295 8
a3302 4
.Sq MYADDR
is replaced with the interface address and
.Sq HISADDR
is replaced with the interface destination (peer) address.
d3305 1
a3305 1
.Ar add!\&
d3307 2
a3308 1
.Pq note the trailing Dq !\& ,
d3310 1
a3310 1
.Sq route change
d3318 2
d3324 1
a3324 1
.Sq sticky .
d3326 2
a3327 7
.Dq show ipcp
to see the list), and each time the value of
.Dv HISADDR ,
.Dv MYADDR ,
.Dv DNS0 ,
or
.Dv DNS1
d3330 2
a3331 2
.Dq disable sroutes .
.It allow Ar command Op Ar args
d3342 1
a3342 1
.Sq fred
d3344 1
a3344 1
.Sq fredlabel
d3349 1
a3349 1
User id 0 is immune to these commands.
d3351 3
a3353 3
.It allow user Ns Xo
.Op s
.Ar logname Ns No ...
d3355 1
a3355 1
By default, only user id 0 is allowed access to
d3359 1
a3359 1
.Dq allow users
d3362 1
a3362 1
.Sq default
d3365 1
a3365 1
.Dq allow users
d3370 1
a3370 1
.Sq default
d3376 11
a3386 3
.It allow mode Ns Xo
.Op s
.Ar mode Ns No ...
d3395 1
a3395 1
.Dq allow users
d3397 1
a3397 1
.Dq allow modes
d3399 1
a3399 1
.Sq default
d3403 6
a3408 6
.Sq interactive ,
.Sq auto ,
.Sq direct ,
.Sq dedicated ,
.Sq ddial ,
.Sq background
d3411 4
d3420 26
a3445 187
.Pp
.It nat Ar command Op Ar args
This command allows the control of the network address translation (also
known as masquerading or IP aliasing) facilities that are built into
.Nm ppp .
NAT is done on the external interface only, and is unlikely to make sense
if used with the
.Fl direct
flag.
.Pp
If nat is enabled on your system (it may be omitted at compile time),
the following commands are possible:
.Bl -tag -width 2n
.It nat enable yes|no
This command either switches network address translation on or turns it off.
The
.Fl nat
command line flag is synonymous with
.Dq nat enable yes .
.It nat addr Op Ar addr_local addr_alias
This command allows data for
.Ar addr_alias
to be redirected to
.Ar addr_local .
It is useful if you own a small number of real IP numbers that
you wish to map to specific machines behind your gateway.
.It nat deny_incoming yes|no
If set to yes, this command will refuse all incoming packets where an
aliasing link doesn't already exist.
Refer to the
.Sx CONCEPTUAL BACKGROUND
section of
.Xr libalias 3
for a description of what an
.Dq aliasing link
is.
.Pp
It should be noted under what circumstances an aliasing link is created by
.Xr libalias 3 .
It may be necessary to further protect your network from outside
connections using the
.Dq set filter
or
.Dq nat target
commands.
.It nat help|?
This command gives a summary of available nat commands.
.It nat log yes|no
This option causes various NAT statistics and information to
be logged to the file
.Pa /var/log/alias.log .
.It nat port Ar proto Ar targetIP Ns Xo
.No : Ns Ar targetPort Ns
.Oo
.No - Ns Ar targetPort
.Oc Ar aliasPort Ns
.Oo
.No - Ns Ar aliasPort
.Oc Oo Ar remoteIP : Ns
.Ar remotePort Ns
.Oo
.No - Ns Ar remotePort
.Oc Ns
.Oc
.Xc
This command causes incoming
.Ar proto
connections to
.Ar aliasPort
to be redirected to
.Ar targetPort
on
.Ar targetIP .
.Ar proto
is either
.Dq tcp
or
.Dq udp .
.Pp
A range of port numbers may be specified as shown above.
The ranges must be of the same size.
.Pp
If
.Ar remoteIP
is specified, only data coming from that IP number is redirected.
.Ar remotePort
must either be
.Dq 0
.Pq indicating any source port
or a range of ports the same size as the other ranges.
.Pp
This option is useful if you wish to run things like Internet phone on
machines behind your gateway, but is limited in that connections to only
one interior machine per source machine and target port are possible.
.It nat proto Ar proto localIP Oo
.Ar publicIP Op Ar remoteIP
.Oc
This command tells
.Nm
to redirect packets of protocol type
.Ar proto
.Pq see Xr protocols 5
to the internall address
.Ar localIP .
.Pp
If
.Ar publicIP
is specified, only packets destined for that address are matched,
otherwise the default alias address is used.
.Pp
If
.Ar remoteIP
is specified, only packets matching that source address are matched,
.Pp
This command is useful for redirecting tunnel endpoints to an internal machine,
for example:
.Pp
.Dl nat proto ipencap 10.0.0.1
.It "nat proxy cmd" Ar arg Ns No ...
This command tells
.Nm
to proxy certain connections, redirecting them to a given server.
Refer to the description of
.Fn PacketAliasProxyRule
in
.Xr libalias 3
for details of the available commands.
.It nat same_ports yes|no
When enabled, this command will tell the network address translation engine to
attempt to avoid changing the port number on outgoing packets.
This is useful
if you want to support protocols such as RPC and LPD which require
connections to come from a well known port.
.It nat target Op Ar address
Set the given target address or clear it if no address is given.
The target address is used by libalias to specify how to NAT incoming
packets by default.
If a target address is not set or if
.Dq default
is given, packets are not altered and are allowed to route to the internal
network.
.Pp
The target address may be set to
.Dq MYADDR ,
in which case libalias will redirect all packets to the interface address.
.It nat use_sockets yes|no
When enabled, this option tells the network address translation engine to
create a socket so that it can guarantee a correct incoming ftp data or
IRC connection.
.It nat unregistered_only yes|no
Only alter outgoing packets with an unregistered source address.
According to RFC 1918, unregistered source addresses
are 10.0.0.0/8, 172.16.0.0/12 and 192.168.0.0/16.
.El
.Pp
These commands are also discussed in the file
.Pa README.nat
which comes with the source distribution.
.Pp
.It Op !\& Ns Xo
.No bg Ar command
.Xc
The given
.Ar command
is executed in the background with the following words replaced:
.Bl -tag -width PEER_ENDDISC
.It Li AUTHNAME
This is replaced with the local
.Ar authname
value.
See the
.Dq set authname
command below.
.It Li COMPILATIONDATE
This is replaced with the date on which
.Nm
was compiled.
.It Li DNS0 & DNS1
These are replaced with the primary and secondary nameserver IP numbers.
If nameservers are negotiated by IPCP, the values of these macros will change.
.It Li ENDDISC
This is replaced with the local endpoint discriminator value.
See the
.Dq set enddisc
command below.
.It Li HISADDR
This is replaced with the peers IP number.
d3448 24
d3477 1
a3477 1
.Dq load
d3479 1
a3479 1
.Dq dial
d3485 14
d3500 1
a3500 1
This is replaced with the value of the peers endpoint discriminator.
d3502 5
a3506 4
This is replaced with the current process id.
.It Li VERSION
This is replaced with the current version number of
.Nm ppp .
d3510 3
a3512 1
Normally, this variable is assigned only in -direct mode.
d3514 3
d3520 5
a3524 2
.Dq set proctitle
command.
d3529 1
a3529 1
.Dq shell
d3531 9
a3539 1
.It clear physical|ipcp Op current|overall|peak...
d3541 2
a3542 1
.Dq physical
d3544 1
a3544 1
.Dq ipcp
d3549 1
a3549 1
.Dq link
d3552 1
a3552 1
.It clone Ar name Ns Xo
d3564 3
a3566 2
.Dq remove
command below.
d3570 6
a3575 1
.It close Op lcp|ccp Ns Op !\&
d3585 1
a3585 1
.Pq see below
d3593 1
a3593 1
.Dq !\&
d3602 1
a3602 1
.Dq quit
d3604 1
a3604 1
.It delete Ns Xo
d3614 1
a3614 1
.Sq ALL ,
d3617 1
a3617 1
.Sq sticky route
d3622 1
a3622 1
.Sq default ,
d3626 1
a3626 1
.Ar delete!\&
d3628 2
a3629 1
.Pq note the trailing Dq !\& ,
d3632 4
a3635 2
.It dial|call Op Ar label Ns Xo
.No ...
d3642 1
a3642 1
.It down Op Ar lcp|ccp
d3651 1
a3651 1
.Sq lcp
d3657 1
a3657 1
.Sq ccp
d3659 5
a3663 1
.It help|? Op Ar command
d3668 1
a3668 1
.It ident Op Ar text Ns No ...
d3682 1
a3682 1
.It iface Ar command Op args
d3684 1
a3684 1
.Nm ppp .
d3687 3
a3689 2
.Bl -tag -width 2n
.It iface add Ns Xo
d3694 1
a3694 1
.It iface add Ns Xo
d3705 1
a3705 1
.Ar /bits
d3707 2
a3708 1
.Pq with no space between \&it and Ar addr .
d3710 2
a3711 2
.Dq !\&
is used - in which case the previous interface address entry is overwritten
d3718 1
a3718 3
defaults to
.Dq 32
and
d3720 1
a3720 2
defaults to
.Dq 255.255.255.255 .
d3724 5
a3728 1
.It iface clear
d3733 1
a3733 1
mode, all addresses except for the IPCP negotiated address are deleted
d3741 7
a3747 3
.It iface delete Ns Xo
.Op !\& Ns
.No |rm Ns Op !\&
d3754 1
a3754 1
.Dq !\&
d3757 2
a3758 1
.It iface show
d3762 2
a3763 1
.It iface help Op Ar sub-command
d3773 2
a3774 2
.It Op data Ns Xo
.No link
d3782 1
a3782 1
.Dq clone
d3795 1
a3795 1
.Dq * ,
d3798 1
a3798 1
.It load Op Ar label Ns Xo
d3802 1
a3802 1
.Ar label Ns No (s)
d3815 2
a3816 2
.Dq set mode ,
.Dq open
d3818 1
a3818 1
.Dq dial
d3822 175
a3996 1
.It open Op lcp|ccp|ipcp
d3998 1
a3998 1
.Dq close
d4002 2
a4003 2
links - these will come up based on the
.Dq set autoload
d4032 1
a4032 1
.It passwd Ar pass
d4037 1
a4037 1
.Dq set server
d4041 1
a4041 1
.Dq set server
d4048 1
a4048 1
.Sq ********
d4050 5
a4054 1
.It quit|bye Op all
d4056 1
a4056 1
.Dq quit
d4058 2
a4059 1
ppp will exit after closing all connections.
d4064 2
a4065 2
.Ar all
argument is given,
d4069 1
a4069 1
.It remove|rm
d4075 1
a4075 1
.It rename|mv Ar name
d4083 1
a4083 1
.Sq deflink .
d4085 2
a4086 2
.Sq modem ,
.Sq cua00
d4088 1
a4088 1
.Sq USR
d4090 1
a4090 1
.It resolv Ar command
d4092 1
a4092 1
.Nm Ns No 's
d4103 1
a4103 1
.It Em readonly
d4118 1
a4118 1
.Dq resolv writable
d4120 1
a4120 1
.It Em reload
d4124 1
a4124 1
This may be necessary if for example a DHCP client overwrote
d4126 1
a4126 1
.It Em restore
d4130 1
a4130 1
.Dq resolv reload
d4135 1
a4135 1
.It Em rewrite
d4140 1
a4140 1
.Dq resolv readonly
d4147 1
a4147 1
.It Em writable
d4158 1
a4158 1
.Dq resolv readonly
d4161 3
a4163 3
.It save
This option is not (yet) implemented.
.It sendident
d4177 1
a4177 1
reject, when negotiation fails or when LCP reaches the opened state.
d4182 2
a4183 2
.It set Ns Xo
.Op up
d4188 1
a4188 1
.It set accmap Ar hex-value
d4197 2
a4198 2
.It set Op auth Ns Xo
.No key Ar value
d4213 1
a4213 1
.Sq ********
d4219 1
a4219 1
.Pq Dq !\& ,
d4229 1
a4229 1
.Dq !\&
d4231 2
a4232 1
.Pq to Dq !! ,
d4234 1
a4234 1
.Dq !\& ,
d4236 1
a4236 1
.Dq !\& ,
d4239 1
a4239 1
.Dq !bg
d4264 1
a4264 1
which is encrypted with the challenge and request id, the answer being sent
d4274 2
a4275 2
.It set authname Ar id
This sets the authentication id used in client mode PAP or CHAP negotiation.
d4280 1
a4280 1
.Ar id
d4283 1
a4283 1
.It set autoload Xo
d4286 2
a4287 2
These settings apply only in multi-link mode and default to zero, zero and
five respectively.
d4290 2
a4291 1
.Pq also known as Fl auto
d4319 1
a4319 1
.Dq set bandwidth
d4321 1
a4321 1
.Dq set autoload
d4323 1
a4323 1
.It set bandwidth Ar value
d4328 1
a4328 1
.Dq set autoload
d4330 1
a4330 1
.It set callback Ar option Ns No ...
d4335 1
a4335 2
mode, will accept) one of the given
.Ar option Ns No s .
d4342 1
a4342 1
until no options remain at which point
d4346 1
a4346 2
is one of the specified
.Ar option ) .
d4349 1
a4349 1
will accept any of the given protocols - but the client
d4356 1
a4356 4
The
.Ar option Ns No s
are as follows (in this order of preference):
.Pp
d4364 1
a4364 1
the peers entry in
d4369 1
a4369 1
.Dq set cbcp
d4391 1
a4391 1
.Dq \&* ,
d4397 2
a4398 2
Note, this option is very unsafe when used with a
.Dq \&*
d4411 1
a4411 2
.Pp
.It set cbcp Oo
d4417 1
a4417 1
is disabled - ie, configuring CBCP in the
d4424 1
a4424 2
attempts to use the given phone
.Ar number Ns No (s).
d4430 1
a4430 1
.Dq \&*
d4437 1
a4437 1
.Dq \&*
d4441 1
a4441 1
.It set cd Oo
d4456 1
a4456 1
NULL-modem cables), logs the fact and stops checking
d4482 1
a4482 1
.Nm Ns No 's
d4488 1
a4488 1
.Dq set cd
d4515 1
a4515 1
.Pq Dq !\& ,
d4523 1
a4523 1
.It set choked Op Ar timeout
d4554 4
a4557 1
.It set ctsrts|crtscts on|off
d4562 2
a4563 2
.It set deflate Ar out-winsize Op Ar in-winsize
This sets the DEFLATE algorithms default outgoing and incoming window
d4569 1
a4569 4
must be values between
.Em 8
and
.Em 15 .
d4576 2
a4577 11
.It set dns Op Ar primary Op Ar secondary
This command specifies DNS overrides for the
.Dq accept dns
command.
Refer to the
.Dq accept
command description above for details.
This command does not affect the IP numbers requested using
.Dq enable dns .
.It set device|line Xo
.Ar value Ns No ...
d4582 1
a4582 1
.Dq value .
d4584 1
a4584 1
All ISDN and serial device names are expected to begin with
d4586 1
a4586 3
ISDN devices are usually called
.Pa i4brbchX
and serial devices are usually called
d4590 1
a4590 1
.Dq value
d4594 2
a4595 8
.Pq Dq !\& ,
be of the format
.No PPPoE: Ns Ar iface Ns Xo
.Op \&: Ns Ar provider Ns
.Xc
(on
.Xr netgraph 4
enabled systems), or be of the format
d4603 1
a4603 1
Standard input, output and error are fed back to
d4608 1
a4608 33
.No PPPoE: Ns Ar iface Ns Xo
.Op \&: Ns Ar provider Ns
.Xc
specification is given,
.Nm
will attempt to create a
.Em PPP
over Ethernet connection using the given
.Ar iface
interface by using
.Xr netgraph 4 .
If
.Xr netgraph 4
is not available,
.Nm
will attempt to load it using
.Xr kldload 2 .
If this fails, an external program must be used such as the
.Xr pppoe 8
program available under OpenBSD.
The given
.Ar provider
is passed as the service name in the PPPoE Discovery Initiation (PADI)
packet.
If no provider is given, an empty value will be used.
Refer to
.Xr netgraph 4
and
.Xr ng_pppoe 4
for further details.
.Pp
If a
.Ar host Ns No : Ns Ar port Ns Oo
d4627 1
a4627 3
If multiple
.Dq values
are specified,
d4631 1
a4631 1
.It set dial Ar chat-script
d4635 1
a4635 1
.Dq set login
d4642 1
a4642 1
.Sq values
d4647 1
a4647 1
.Sq send
d4651 2
a4655 2
.It Li \en
This is replaced with a newline character.
d4664 1
a4664 1
.Dq set phone
d4670 1
a4670 1
.Dq set authkey
d4676 1
a4676 1
.Dq set authname
d4682 1
a4682 1
.Sq chat parser
d4684 1
a4684 1
.Sq command parser .
d4693 1
a4693 1
.Pq Dq !\& .
d4695 1
a4695 1
.Dq !!\&
d4697 1
a4697 1
.Dq !\& .
d4700 1
a4700 1
.Dq set device
d4717 1
a4717 1
.Sq set log local chat
d4742 1
a4742 1
Here, there are four parsers at work.
d4747 1
a4747 1
.Dq \&-
d4751 1
a4751 1
.Dq !\&
d4760 1
a4760 1
itself sends and logs it, and in the second example, we just output to stdout,
d4772 8
a4779 1
.Dq !bg
d4781 6
a4786 1
.It set enddisc Op label|IP|MAC|magic|psn value
d4789 1
a4789 1
.Dq disable enddisc
d4819 1
a4819 1
A 20 digit random number is used.
d4839 1
a4839 1
.It set escape Ar value...
d4841 1
a4841 1
.Dq set accmap
d4844 1
a4844 1
.Sq escaped
d4846 1
a4846 1
.It set filter dial|alive|in|out Ar rule-no Xo
d4852 2
a4853 1
.Oc [ tcp|udp|ospf|ipip|igmp|icmp Op src lt|eq|gt Ar port
d4864 1
a4864 1
filter specifies packets that keep the connection alive - resetting the
d4900 1
a4900 1
.Ar in Ns No / Ns Ar out
d4911 1
a4911 1
.It set hangup Ar chat-script
d4916 7
a4922 2
.It set help|? Op Ar command
This command gives a summary of available set commands, or if
d4925 1
a4925 1
.It set ifaddr Oo Ar myaddr Ns
d4934 1
a4934 1
Addresses are specified using the format
d4938 1
a4938 1
Where
d4946 1
a4946 1
.Dq /32
d4948 1
a4948 1
.Dq /0 .
d4952 1
a4952 1
may also be specified as a range of IP numbers in the format
d4954 4
a4957 5
.Ar \&IP Ns Oo \&- Ns Ar \&IP Ns Xo
.Oc Ns Oo , Ns Ar \&IP Ns
.Op \&- Ns Ar \&IP Ns
.Oc Ns ...
.Xc
d4960 1
a4960 1
for example:
d4964 1
a4964 1
will only negotiate
d4971 1
a4971 1
will grant the peers request.
d4974 1
a4974 1
allocated (thus maintaining any existing tcp or udp connections).
d5011 2
a5012 1
.Pq if PAP or CHAP are Dq enabled .
d5021 1
a5021 1
.It set ifqueue Ar packets
d5039 4
a5042 3
is
.Dq 30 .
.It set ccpretry|ccpretries Oo Ar timeout
d5045 4
a5048 1
.It set chapretry|chapretries Oo Ar timeout
d5051 4
a5054 1
.It set ipcpretry|ipcpretries Oo Ar timeout
d5057 4
a5060 1
.It set lcpretry|lcpretries Oo Ar timeout
d5063 10
a5072 1
.It set papretry|papretries Oo Ar timeout
d5075 1
d5090 1
a5090 1
CCP, LCP and IPCP and 3 attempts for PAP and CHAP.
d5097 1
a5097 1
peers response.
d5109 1
a5109 1
.It set log Xo
d5112 1
a5112 1
.Ar value Ns No ...
d5115 4
a5118 2
Refer to the Logging Facility section for further details.
.It set login Ar chat-script
d5125 2
a5126 2
.It set logout Ar chat-script
This specifies the chat script that will be used to logout
d5129 1
a5129 1
.It set lqrperiod Ar frequency
d5135 1
a5135 1
.Em ECHO LQR
d5139 12
a5150 3
.Dq enable lqr
command if you wish to send LQR requests to the peer.
.It set mode Ar interactive|auto|ddial|background
d5152 1
a5152 1
.Sq mode
d5158 1
a5158 1
.Sq direct
d5160 1
a5160 1
.Sq dedicated .
d5172 2
a5173 2
.It set mppe Op 40|56|128|* Op stateless|stateful|*
This option selects the encryption parameters used when negotiation
d5176 1
a5176 1
.Dq disable mppe
d5180 1
a5180 1
will attempt to negotiate a stateful link with a 128 bit key, but
d5189 1
d5204 1
a5204 1
.It set mrru Op Ar value
d5209 2
a5210 2
.It set mru Xo
.Op max Ns Op imum
d5221 1
a5221 1
.Dq maximum
d5228 1
a5228 1
rfc, but may sometimes be necessary.
d5235 1
a5235 1
.Dq maximum
d5237 2
a5238 2
.It set mtu Xo
.Op max Ns Op imum
d5257 1
a5257 1
.Dq maximum
d5265 1
a5265 1
is given, 1500, or whatever the peer asks for is used.
d5267 1
a5267 1
.Dq maximum
d5269 4
a5272 1
.It set nbns Op Ar x.x.x.x Op Ar y.y.y.y
d5274 1
a5274 1
values to be returned at the peers request.
d5278 4
a5281 1
.It set openmode active|passive Op Ar delay
d5283 2
a5284 4
.Ar openmode
is always
.Ar active
with a one second
d5291 1
a5291 2
can use the value
.Ar passive .
d5296 1
a5296 1
.It set parity odd|even|none|mark
d5300 7
a5306 4
.It set phone Ar telno Ns Xo
.Oo \&| Ns Ar backupnumber
.Oc Ns ... Ns Oo : Ns Ar nextnumber
.Oc Ns ...
d5311 1
a5311 1
.Pq Dq \&|
d5313 1
a5313 1
.Pq Dq \&: .
d5325 1
a5325 1
.Dq set redial
d5330 2
a5331 2
.It set Op proc Ns Xo
.No title Op Ar value
d5342 1
a5342 1
.Dq bg
d5345 2
a5346 2
Note, if USER is required in the process title, the
.Dq set proctitle
d5352 1
a5352 1
.It set radius Op Ar config-file
d5355 2
a5356 4
refers to the radius client configuration file as described in
.Xr radius.conf 5 .
If PAP or CHAP are
.Dq enable Ns No d ,
d5359 3
a5361 3
.Em \&N Ns No etwork
.Em \&A Ns No ccess
.Em \&S Ns No erver
d5367 2
a5368 2
If neither PAP or CHAP are enabled,
.Dq set radius
d5379 5
a5383 3
If the given MTU is less than the peers MRU as agreed during LCP
negotiation, *and* it is less that any configured MTU (see the
.Dq set mru
d5387 1
a5387 1
.Dq 1 ,
d5392 13
d5421 1
a5421 1
to sepcify the default route, and
d5450 43
d5494 61
d5556 1
d5558 12
a5569 2
.Dq show bundle .
.It set reconnect Ar timeout ntries
d5583 1
a5583 1
.It set recvpipe Op Ar value
d5589 8
a5596 4
.It set redial Ar secs Ns Xo
.Oo + Ns Ar inc Ns
.Op - Ns Ar max Ns
.Oc Ns Op . Ns Ar next
d5604 1
a5604 1
.Dq set phone
d5633 1
a5633 1
Note, the
d5640 1
a5640 1
.Dq !\&
d5642 1
a5642 1
.Dq open
d5645 1
a5645 1
.Dq open
d5647 1
a5647 1
.It set sendpipe Op Ar value
d5653 3
a5655 2
.It "set server|socket" Ar TcpPort Ns No \&| Ns Xo
.Ar LocalName Ns No |none|open|closed
d5700 1
a5700 1
.Dq %d
d5707 1
a5707 1
.Dq +
d5715 1
a5715 1
command is the preferred mechanism of communications.
d5722 1
a5722 1
Note;
d5727 1
a5727 1
.It set speed Ar value
d5738 4
a5741 1
.It set stopped Op Ar LCPseconds Op Ar CCPseconds
d5765 1
a5765 1
.Dq set openmode
d5767 1
a5767 1
.It set timeout Ar idleseconds Op Ar mintimeout
d5779 1
a5779 1
.It set urgent Xo
d5804 2
a5805 3
If no
.Ar port Ns No s
are given, the priority port lists are cleared (although if
d5813 1
a5813 1
.Pq Dq \&+
d5815 1
a5815 1
.Pq Dq \&- ,
d5817 2
a5818 4
.Ar port Ns No s
prefixed with a plus or not prefixed at all are added to the list and
.Ar port Ns No s
prefixed with a minus are removed from the list.
d5825 1
a5825 1
.It set vj slotcomp on|off
d5831 1
a5831 1
.It set vj slots Ar nslots
d5835 1
a5835 1
.Sq enable
d5839 1
a5839 5
must be between
.Ar 4
and
.Ar 16
inclusive.
d5841 5
a5845 2
.Pp
.It shell|! Op Ar command
d5848 1
a5848 1
is not specified a shell is invoked according to the
d5855 1
a5855 1
.Dq !bg
d5858 3
a5860 2
Use of the ! character
requires a following space as with any of the other commands.
d5865 1
a5865 1
.Dv bg
d5867 1
a5867 1
.It show Ar var
d5870 1
a5870 1
.It show bundle
d5872 1
a5872 1
.It show ccp
d5874 1
a5874 1
.It show compress
d5876 1
a5876 1
.It show escape
d5878 1
a5878 1
.It show filter Op Ar name
d5883 1
a5883 1
.It show hdlc
d5885 1
a5885 1
.It show help|?
d5887 1
a5887 1
.It show iface
d5889 3
a5891 2
.Pq the same \&as Dq iface show .
.It show ipcp
d5893 1
a5893 1
.It show layers
d5895 1
a5895 1
.It show lcp
d5897 2
a5898 2
.It show Op data Ns Xo
.No link
d5901 1
a5901 1
.It show links
d5903 1
a5903 1
.It show log
d5905 1
a5905 1
.It show mem
d5907 3
a5909 1
.It show physical
d5911 1
a5911 1
.It show mp
d5913 1
a5913 1
.It show proto
d5915 1
a5915 1
.It show route
d5917 1
a5917 1
.It show stopped
d5919 1
a5919 1
.It show timer
d5921 1
a5921 1
.It show version
d5925 1
a5925 2
.Pp
.It term
d5942 4
a5945 4
.Dq help ,
.Dq nat \&? ,
.Dq enable \&? ,
.Dq set ?\&
d5947 1
a5947 1
.Dq show ?\&
d5951 1
d5954 1
a5954 1
http://www.FreeBSD.org/FAQ/userppp.html
d5956 1
a5956 1
http://www.FreeBSD.org/handbook/userppp.html
a5957 1
.Pp
d5964 1
a5964 1
.Pa ppp.linkdown
d5985 2
a5986 2
Note, this name is specified in
.Pa /etc/syslogd.conf .
d5996 1
a5996 1
The process id (pid) of the
d6001 1
a6001 1
.It Pa /var/run/ttyXX.if
d6005 1
a6005 1
.Fl auto
d6016 1
a6016 1
.Pq Sq class
d6031 1
a6031 1
.Xr tcpdump 1 ,
d6033 1
a6033 2
.Xr kldload 2 ,
.Xr libalias 3 ,
d6036 3
a6038 1
.Xr netgraph 4 ,
a6042 1
.Xr radius.conf 5 ,
d6044 1
d6049 1
a6051 1
.Xr isdn 8 ,
a6052 1
.Xr ng_pppoe 4 ,
d6060 1
@


1.118
log
@Formatting and whitespace cleanup
@
text
@d26 1
a26 1
.\" $OpenBSD: ppp.8,v 1.117 2001/07/20 19:09:48 mpech Exp $
@


1.117
log
@we don't like:
o) .Pp before/after .Sh;
o) .Pp before/after .Sh;
o) .Nm without argument in SYNOPSIS;
@
text
@d26 1
a26 1
.\" $OpenBSD: ppp.8,v 1.116 2001/07/09 00:12:40 brian Exp $
d385 2
a386 1
MPPE is Microsoft Point to Point Encryption scheme. It is possible to configure
d388 2
a389 1
to participate in Microsoft's Windows VPN. For now, 
d1460 1
a1460 1
It is necessary to put the 
d2405 2
a2406 1
connections.  Sockets that couldn't previously be opened will be retried.
d2798 4
a2801 2
This is Microsoft Point to Point Encryption scheme. MPPE key size can be 
40-, 56- and 128-bits. Refer to
d3072 1
a3072 1
to adjust outgoing TCP SYN packets so that the maximum receive segment
d4940 2
a4941 1
MPPE.  MPPE can be disabled entirely with the
d4960 2
a4961 1
should insist on stateful or stateless mode.  In stateless mode, the
d4963 2
a4964 1
an encryption key that is changed with every packet.  In stateful mode,
@


1.116
log
@Oops, groff still doesn't do more than 8 args :(
@
text
@d26 1
a26 1
.\" $OpenBSD: ppp.8,v 1.115 2001/07/09 00:08:55 brian Exp $
d35 1
a35 1
.Nm
a1261 1
.Pp
a1596 1
.Pp
a1992 1
.Pp
a2411 1
.Pp
a5550 1
.Pp
a5574 1
.Pp
a5640 1
.Pp
@


1.115
log
@Add a ``nat proto'' command -- similar to natd(8)'s -redirect_proto switch.
@
text
@d26 1
a26 1
.\" $OpenBSD: ppp.8,v 1.114 2001/07/07 03:08:49 brian Exp $
d3368 3
a3370 1
.It nat proto Ar proto localIP Op Ar publicIP Op Ar remoteIP
@


1.114
log
@When we miss one or more packets in stateful mode *and* need to
perform a key change, *and* our sequence numbers have wrapped,
ensure that the number of key changes is calculated correctly.

The previous code counted down from a negative number to zero,
re-encrypting the current key on each iteration - this took some
time and strangely enough got the answer wrong !!!

Spell stateful correctly while I'm here.
@
text
@d26 1
a26 1
.\" $OpenBSD: ppp.8,v 1.113 2001/06/20 19:55:35 brian Exp $
d3368 22
d5662 1
@


1.113
log
@Avoid using too many args for ``set m[tr]u''
@
text
@d26 1
a26 1
.\" $OpenBSD: ppp.8,v 1.112 2001/06/19 10:24:57 brian Exp $
d4913 1
a4913 1
.It set mppe Op 40|56|128|* Op stateless|statefull|*
d4920 1
a4920 1
will attempt to negotiate a statefull link with a 128 bit key, but
d4934 1
a4934 1
should insist on statefull or stateless mode.  In stateless mode, the
d4936 1
a4936 1
an encryption key that is changed with every packet.  In statefull mode,
@


1.112
log
@Handle hardware-imposed MTU/MRU limitations.

Add an optional ``max'' specifier to ``set m[rt]u'', ie.
``set mtu max 1492'' for PPPoE.

Bump the ppp version number.

Add support for stateful MPPE (microsoft encryption) providing
encryption compatibility with Windows 2000.  Stateful encryption
uses less CPU but is bad on lossy transports.

The ``set mppe'' command has been expanded.  If it's used with any
arguments, ppp will insist on encryption, closing LCP if the other
end refuses.

Sponsored by:	Monzoon Networks AG and FreeBSD Services Limited
@
text
@d26 1
a26 1
.\" $OpenBSD: ppp.8,v 1.111 2001/06/07 09:32:55 brian Exp $
d4946 4
a4949 1
.It set mru Oo max Ns Oo imum Oc Oc Op Ar value
d4974 4
a4977 1
.It set mtu Oo max Ns Oo imum Oc Oc Op Ar value
@


1.111
log
@Depricate the -alias option (it's been -nat for a long time)
Handle carriage-return/line-feed stuff for ftp natting more generically
Fix an alignment bug when logging DNS traffic
Fix/add some copyrights
@
text
@d26 1
a26 1
.\" $OpenBSD: ppp.8,v 1.110 2001/06/04 16:09:29 brian Exp $
d4913 28
a4940 2
.It set mppe {40|56|128}
This option selects particular key length. Default is 128.
d4946 1
a4946 1
.It set mru Op Ar value
d4949 1
a4949 1
There is no point in decreasing the MRU to below the default as the
d4951 16
a4966 1
protocol *must* be able to accept packets of at least 1500 octets.
d4968 4
a4971 1
.It set mtu Op Ar value
d4975 2
a4976 2
will accept whatever MRU or MRRU that the peer wants (assuming it's
not less than 296 bytes).
d4979 1
a4979 1
will not accept MRU/MRRU values less than
d4981 2
a4982 2
When negotiations are complete, the MTU is assigned to the interface, even
if the peer requested a higher value MRU/MRRU.
d4987 7
d4997 3
@


1.110
log
@Show the correct dial timeout when a random pause is configured
Understand ipencap traffic properly
Optimise out SIOCIFADDR ioctls that aren't necessary
Handle peers that don't send an initial IFADDR option during IPCP negotiations
Fix markup for the /etc/ttys example
Always use 4 arguments in examples of ``set ifaddr''
@
text
@d1 27
a27 1
.\" $OpenBSD: ppp.8,v 1.109 2001/03/24 01:06:04 brian Exp $
d57 1
a57 3
flag (or
.Fl alias
flag for backwards compatibility) does the equivalent of a
d252 1
a252 1
UDP port numbers are aliased for outgoing packets and de-aliased for
a1601 1
.Pq \&or Fl alias
d1608 1
a1608 1
Outgoing IP packets are aliased so that they appear to come from the
d1610 1
a1610 1
host, and incoming packets are de-aliased so that they are routed
d1612 2
a1613 3
Packet aliasing allows computers on private, unregistered
subnets to have Internet access, although they are invisible
from the outside world.
a3283 4
For backwards compatibility, the word
.Dq alias
may be used in place of
.Dq nat .
d3406 1
a3406 1
.Pa README.alias
d4392 1
a4392 1
.Xr ng_pppoe 8
d5590 1
a5590 1
.Xr ng_pppoe 8 ,
@


1.109
log
@Remove some unprotected prototype variable names
MAXPATHLEN -> PATH_MAX
Handle ENOENT from opening /dev/tun* properly
Rename _PATH_PPP -> PPP_CONFDIR and allow it to be redefined at compile time
Reduce MIN_LQRPERIOD and MIN_FSMRETRY to 1 second
Be smarter about identifying sockets on stdin
Allow primary DNS IP negotiation when the secondary IP has been rejected
Fix the call to PacketAliasProxyRule() properly.
Add/fix some comments
Fix man page markups; ru@@FreeBSD.org
Use localhost when no hostname is configured
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.108 2001/03/09 00:15:15 brian Exp $
d1157 1
a1157 1
.Dl ttyd1 "/usr/libexec/getty std.38400" dialup on secure
d1167 21
d1726 1
d2492 1
a2492 1
 set ifaddr 10.0.0.1/0 10.0.0.2/0
d2497 2
a2498 2
 clone 1,2,3
 link deflink remove
d4612 1
a4612 1
.Oc [ tcp|udp|ospf|igmp|icmp Op src lt|eq|gt Ar port
@


1.108
log
@Talk a little more about the differences between PPPoE on FreeBSD & OpenBSD.
@
text
@d1 2
a2 2
.\" $OpenBSD: ppp.8,v 1.107 2001/01/29 01:34:38 brian Exp $
.Dd 20 September 1995
d14 1
a14 2
.Op Ar system Ns
.No ...
d244 1
a244 1
.It Supports PAP and CHAP (rfc 1994, 2433 and 2759) authentication.
d976 1
a976 1
.Oc Op . Ns Ar next
d1617 1
a1617 1
.Op \&!
d1623 1
a1623 1
.Oo Ar proto Op src Ar cmp port
d1628 1
a1628 2
.Op timeout Ar secs
.Oc
d1670 1
a1670 1
.Pq Dq ! ,
d1856 1
a1856 1
.Bd -literal -offset indent
d1964 1
a1964 1
.Bd -literal -offset indent
d2091 1
a2091 1
.Sq ******** Ns
d2649 1
a2649 1
.Pa rfc1975 Ns No !
d2766 1
a2766 1
Default: Disabled and Accepted
d3084 1
a3084 1
.Op \&!
d3125 1
a3125 1
.Ar add!
d3127 1
a3127 1
.Pq note the trailing Dq \&! ,
d3369 1
a3369 1
.It Op \&! Ns Xo
d3387 1
a3387 1
.It Li DNS0 No " & " Li DNS1
d3464 1
a3464 1
.It close Op lcp|ccp Ns Op \&!
d3482 1
a3482 1
.Dq \&!
d3494 1
a3494 1
.Op \&!
d3515 1
a3515 1
.Ar delete!
d3517 1
a3517 1
.Pq note the trailing Dq \&! ,
d3571 1
a3571 1
.Op \&!
d3576 1
a3576 1
.Op \&!
d3590 1
a3590 1
.Dq \&!
d3621 2
a3622 2
.Op \&! Ns
.No |rm Ns Op \&!
d3629 1
a3629 1
.Dq \&!
d3877 1
a3877 1
.No Op up
d3898 1
a3898 1
.Sq \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\P
d3913 1
a3913 1
.Pq Dq \&! ,
d3923 1
a3923 1
.Dq \&!
d3925 1
a3925 1
.Pq to Dq \&!! ,
d3927 1
a3927 1
.Dq \&! ,
d3929 1
a3929 1
.Dq \&! ,
d4040 1
a4040 1
.Ar option Ns No ).
d4109 3
a4111 6
.It set cbcp Oo Xo
.No *| Ns Ar number Ns No
.Oo
.No , Ns Ar number Ns
.Oc
.No ...
a4113 1
.Xc
d4141 1
a4141 1
.No off| Ns Ar seconds Ns Op \&!
d4214 1
a4214 1
.Pq Dq \&! ,
d4304 1
a4304 1
.Pq Dq \&! ,
d4312 3
a4314 3
.Ar host Ns No : Ns Ar port Ns Oo
.No /tcp|udp
.Oc .
d4394 2
a4395 2
.Bd -unfilled -offset indent
.It Li \\\\\\\\\\\\\\\\c
d4399 1
a4399 1
.It Li \\\\\\\\\\\\\\\\d
d4401 1
a4401 1
.It Li \\\\\\\\\\\\\\\\p
d4404 1
a4404 1
.It Li \\\\\\\\\\\\\\\\n
d4406 1
a4406 1
.It Li \\\\\\\\\\\\\\\\r
d4408 1
a4408 1
.It Li \\\\\\\\\\\\\\\\s
d4410 1
a4410 1
.It Li \\\\\\\\\\\\\\\\t
d4412 1
a4412 1
.It Li \\\\\\\\\\\\\\\\T
d4416 1
a4416 1
.It Li \\\\\\\\\\\\\\\\P
d4422 1
a4422 1
.It Li \\\\\\\\\\\\\\\\U
d4428 1
a4428 1
.Ed
d4443 1
a4443 1
.Pq Dq \&! .
d4445 1
a4445 1
.Dq \&!!
d4447 1
a4447 1
.Dq \&! .
d4501 1
a4501 1
.Dq \&!
d4533 1
a4533 1
.Bd -unfilled -offset indent
d4574 1
a4574 1
.Ed
d4586 1
a4586 1
.Op \&!
d4590 1
a4590 1
.Oc Oo tcp|udp|ospf|igmp|icmp Op src lt|eq|gt Ar port
d4595 1
a4595 2
.Op timeout Ar secs
.Oc
d4685 1
a4685 1
.Bd -literal -offset indent
d4687 1
a4687 1
.Oc Oo , Ns Ar \&IP Ns
d4689 1
a4689 1
.Oc No ...
d5095 1
a5095 1
.Oc Op . Ns Ar next
d5139 1
a5139 1
.Dq \&!
d5440 3
a5442 3
.Dq nat ? ,
.Dq enable ? ,
.Dq set ?
d5444 1
a5444 1
.Dq show ?
@


1.107
log
@Only remove socket files with ``set server open''.
Only show the mask in ``show bundle'' when it's been specified.
Complain about unexpected arguments after ``set server {none,open,closed}''
Log re-open failures as warnings rather than phase messages.
Fix some markup for the ``set server'' man page description.
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.106 2001/01/26 01:46:13 brian Exp $
d332 6
d4315 3
a4317 1
or be of the format
d4345 1
a4345 1
will attempt to loaded it using
@


1.106
log
@Fix arg count
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.105 2001/01/26 01:41:04 brian Exp $
d5151 4
a5154 1
.It "set server|socket" Ar TcpPort|LocalName|none|open|closed Op password Op Ar mask
d5162 1
a5162 1
.Ar none
d5167 1
a5167 1
.Ar open
d5172 1
a5172 1
.Ar closed
d5181 1
a5181 1
You must specify the octal umask to be used with a local domain socket.
@


1.105
log
@Allow ``set server closed'' to close the diagnostic socket.
Allow ``set server open'' to re-open the diagnostic socket.
Handle SIGUSR1 by re-opening the diagnostic socket
When receiving SIGUSR2 (and in ``set server none''), don't forget the
socket details so that ``set server open'' and SIGUSR1 open it again.

Don't create the diagnostic socket as uid 0 !  It's far to dangerous.
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.104 2001/01/22 13:23:53 brian Exp $
d5151 1
a5151 1
.It set server|socket Ar TcpPort|LocalName|none|open|closed Op password Op Ar mask
@


1.104
log
@NetBSD can't handle ``.Oc Oc^M.Xc''.
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.103 2000/12/29 14:17:54 angelos Exp $
d2354 5
d2364 2
d5151 1
a5151 1
.It set server|socket Ar TcpPort|LocalName|none password Op Ar mask
d5162 11
a5172 1
to close any existing socket.
d5189 1
a5189 1
command above) when connecting to this socket.
d5214 7
a5220 1
should not be relied upon.
@


1.103
log
@Forwarding is set in sysctl.conf, not rc.conf (madey@@openbsd.pl)
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.102 2000/12/15 01:14:31 brian Exp $
d3285 2
a3286 1
.Oc Oc
@


1.102
log
@Correct documented defaults for mppe, chap80 and chap81
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.101 2000/11/29 01:49:34 brian Exp $
d1587 1
a1587 1
.Pa /etc/rc.conf
@


1.101
log
@Spelling and punctuation fixes; FreeBSD
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.100 2000/11/28 22:59:53 brian Exp $
d2743 1
a2743 1
Default: Disabled and Denied.
d2749 1
a2749 1
Default: Disabled and Denied.
d2755 1
a2755 1
Default: Disabled and Denied.
@


1.100
log
@Add ``enable/disable'' tcpmssfixup - enabled by default.
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.99 2000/11/22 02:13:09 brian Exp $
d34 1
a34 1
flag for backwards compatability) does the equivalent of a
d1019 1
a1019 1
So, for example;
d1594 1
a1594 1
filters; the
d3900 1
a3900 1
is an exclaimation mark
d4205 1
a4205 1
is followed immediately by an exclaimation mark
d4434 1
a4434 1
If a literal exclaimation mark is required, double it up to
d4449 1
a4449 1
For example (wrapped for readability);
@


1.99
log
@Enable and accept MPPE by default (deflate & pred1 are preferred)
Accept MSCHAPv2 by default.
Hard sentence breaks
Describe tunneling more clearly
Some cosmetic netgraph fixes (Not used in OpenBSD)
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.98 2000/11/16 22:17:54 brian Exp $
d3010 8
@


1.98
log
@Be more consistent with .Bl tags
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.97 2000/11/16 22:16:49 brian Exp $
a1398 1
 add 10.0.1.0/24 10.0.4.2
d1401 16
d1432 1
a1432 1
.Pq Dq * ,
a1447 1
 add 10.0.2.0/24 10.0.4.1
d1450 10
a1459 1
Again, if you're enabling PAP, you'll also need:
d1500 49
d1732 2
a1733 2
filter, the in/out value is used.  If no timeout is given, the default
timeout (set using
d1751 2
a1752 1
frame header.  See the
d2849 3
a2851 2
frame as their payload.  If this is the case, all filters will operate
on the payload rather than the actual packet.
d2860 2
a2861 2
will not be able to interpret it.  It's therefore recommended that
you
d3840 2
a3841 1
to identify itself to the peer.  The link must be in LCP state or higher.
@


1.97
log
@Be a bit more precise about what ``nat deny_incoming yes'' does.
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.96 2000/11/02 00:54:34 brian Exp $
a2 1
.nr XX \w'\fC00'
d2266 1
a2266 1
.Bl -tag -width XX
d2468 1
a2468 1
.Bl -tag -width XX
d2487 1
a2487 1
.Bl -tag -width XX
d2769 1
a2769 1
.Bl -tag -width XX
d3079 1
a3079 1
.Bl -tag -width XX
d3153 1
a3153 1
.Bl -tag -width XX
d3475 1
a3475 1
.Bl -tag -width XX
d3786 1
a3786 1
.Bl -tag -width XX
d5256 1
a5256 1
.Bl -tag -width XX
d5357 1
a5357 1
.Bl -tag -width XX
@


1.96
log
@Some whitespace changes
Some slightly better diagnostics
Add MPPE and chapv2 support; Ustimenko Semen <semen@@iclub.nsu.ru>
Bump the version number
Add ``all'' logging; perhaps@@yes.no
Handle quoted hash characters properly
Honour ``nat deny_incoming'' properly
Fix radius accounting initialisation
Moan about tcsetattr() failures
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.95 2000/09/02 22:12:54 brian Exp $
d3169 18
a3186 5
If set to yes, this command will refuse all incoming connections
by dropping the packets in much the same way as a firewall would.
.Pp
It should be noted that enabling this option also drops IP packets
that cannot be identified by libalias.  This will be fixed in the future.
@


1.95
log
@name-server -> nameserver
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.94 2000/08/28 23:25:28 brian Exp $
d246 1
a246 1
.It Supports PAP and CHAP (rfc 1994) authentication.
d356 8
d2154 5
d2670 12
d2683 1
a2683 1
Default: Disabled and Accepted.
d3171 3
d4769 2
@


1.94
log
@Add LogFILTER logging to log packets allowed by the dial filter and
dropped by any filter.

Submitted by: Mark Hannon <markhannon@@one.net.au>

with some small tweaks by me.
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.93 2000/08/15 10:26:37 brian Exp $
d473 1
a473 1
.Sq name-server
@


1.93
log
@Maintain input and output throughput averages and choose the highest
of the two when calculating the MP throughput average for the ``set
autoload'' implementation.

This makes more sense as all links I know of are full-duplex.  This
also means that people may need to adjust their autoload settings
as 100% bandwidth is now the theoretical maximum rather than 200%
(but of course, halfing the current settings is probably not the
correct answer either!).

This involves a ppp version bump as we need to pass an extra
throughput array through the MP local domain socket.
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.92 2000/08/10 13:26:58 brian Exp $
d2169 2
@


1.92
log
@Mention that pppoe requires netgraph(4) and without it, an external
pppoe program must be used (such as pppoe(8)).
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.91 2000/08/09 19:31:25 brian Exp $
d3863 4
a3866 3
link will be brought down as long as it's not the last active
.Ar demand-dial
link.
@


1.91
log
@Allow leading ``!'' characters in authkeys and chat scripts to
be doubled up to mean a single literaly ``!''.
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.90 2000/07/19 11:06:36 brian Exp $
d4197 11
a4207 1
interface.
d5376 1
d5398 1
@


1.90
log
@Support link identification from rfc1570
Add VERSION and COMPILATIONDATE macros
Two new commands are available; ``ident'' and ``sendident''.
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.89 2000/07/12 23:14:31 brian Exp $
d3785 7
a3791 1
Ignoring the
d4298 4
@


1.89
log
@Permit multiple ``allow user'' lines in any given section
This avoids line length limits when large numbers of users are allowed
access to ppp.
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.88 2000/07/12 16:33:53 brian Exp $
d3247 7
d3280 3
a3287 3
.It Li DNS0 No " & " Li DNS1
These are replaced with the primary and secondary nameserver IP numbers.
If nameservers are negotiated by IPCP, the values of these macros will change.
d3414 14
d3721 18
@


1.88
log
@Correct ``set filter'' usage

Spotted by: sheldonh@@FreeBSD.org
CVS: ----------------------------------------------------------------------
CVS: PR:	      Fill this in if a GNATS PR is affected by the change.
CVS: Submitted by:    Fill this in if someone else sent in the change.
CVS: Reviewed by:     Fill this in if someone else reviewed your modification.
CVS: Approved by:     Fill this in if you needed approval for this commit.
CVS: Obtained from:   Fill this in if the change is from third party software.
CVS: ----------------------------------------------------------------------
CVS: Enter Log.  Lines beginning with `CVS:' are removed automatically
CVS:
CVS: Committing in .
CVS:
CVS: Modified Files:
CVS: 	ppp.8
CVS: ----------------------------------------------------------------------
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.87 2000/07/11 22:13:03 brian Exp $
a3067 1
Each successive
d3069 4
a3072 2
command overrides the previous one, so it's possible to allow users access
to everything except a given label by specifying default users in the
@


1.87
log
@Allow a ``timeout secs'' filter option to let specific packet types
effect the idle timer in different ways.

Submitted by: Stefan Esser <se@@freebsd.org>

With adjustments by me to document the option in the man page and to
give the same semantics for outgoing traffic as incoming.

I made the style more consistent in ip.c - this should really have
been done as a separate commit.
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.86 2000/07/07 14:47:54 brian Exp $
d1544 2
a1545 1
.Oc Op timeout Ar secs
d4399 2
a4400 1
.Oc Op timeout Ar secs
@


1.86
log
@o  Log the (payload/size) of all packet types, not just TCP packets

o  If the new ``filter-decapsulation'' is enabled, delve into UDP packets
   that contain 0xff 0x03 as the first two bytes, and if we recognise it
   as PROTO_IP, decapsulate it for the purpose of filter checking.

   If we recognise it as PROTO_<anything else> mention this for logging
   purposes only.

This change is aimed at people running PPPoUDP where the UDP traffic is
being sent over another PPP link.  It's desireable to have the top level
link connected all the time, but to have the bottom level link capable
of decapsulating the traffic and comparing the payload against the filters,
thus allowing ``set filter dial ...'' to work in tunnelled environments.

The caveat here is that the top ppp cannot employ any compression layers
without making the data unreadable for the bottom ppp.  ``disable deflate
pred1 vj'' and ``deny deflate pred1 vj'' is suggested.
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.85 2000/06/23 09:47:05 brian Exp $
d1544 1
a1544 1
.Oc
d1647 9
d1663 3
a1665 2
If no rule is matched to a packet, that packet will be discarded
(blocked).
d4398 1
a4398 1
.Oc
d4423 1
a4423 1
By default all filter sets allow all packets to pass.
d4438 6
a4443 2
filters it means that the packet will not reset the idle timer and in
the case of
@


1.85
log
@Improved 227, 229 and EPRT support in the nat code; FreeBSD
Moved security checks into one place; FreeBSD
Remove ``nat pptp'' now that it's transparent
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.84 2000/06/13 09:57:51 brian Exp $
d1657 8
d2733 24
@


1.84
log
@Add ``set ifqueue'' to adjust the number of packets ppp buffers.
Handle an ``open'' correctly from state DATALINK_READY.
Don't disable the autoload timer when bringing down the second last auto
link or bringing up the last auto link.
Allow ``set urgent none'' to disable IPTOS_LOWDELAY prioritisation.
Honour ``set speed sync'' for ``!program'' links and use a udp socketpair
between ppp and ``program''.
HUP ``program'' when a ``!program'' link comes down.
Don't complain about valid padded ppp frames, but complain and drop the
data if the length claims to be more than the payload.
Correct the umask when creating a new /etc/resolv.conf (when dns is enabled),
and don't segfault when trying to rewrite the previous (non-existent) contents.
Be more verbose about ``inappropriate peer'' messages in MP mode.
Allow ``nat target MYADDR'' (to redirect incoming connections to the gateway).
Pass everything through the NAT engine - let it decide if it wants it.
Fix the return code when failing to create a tcp link
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.83 2000/04/12 21:47:56 aaron Exp $
a3147 24
.It nat pptp Op Ar addr
This tells
.Nm
to translate any
.Em G Ns No eneral
.Em R Ns No outing
.Em E Ns No encapsulated
.Pq Dv IPPROTO_GRE
packets using
.Ar addr
rather than the local interface address.
This allows the uses of the
.Em P Ns No oint
to
.Em P Ns No oint
.Em T Ns No unneling
.Em P Ns No rotocol
on a machine on the internal network.
.Pp
If
.Ar addr
is not specified,
.Dv PPTP
address translation is disabled.
@


1.83
log
@Trailing whitespace begone!
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.82 2000/03/31 14:32:51 brian Exp $
d2826 2
a3105 1
This file name is likely to change in the near future.
d3188 11
a3198 4
Set the given target address or clear it if no address is given.  The target
address is used by libalias to specify how to NAT incoming packets by default.
If a target address is not set, the alias address (that of the tun interface)
is used.
d4534 20
d5035 1
a5035 1
.Op tcp|udp
d5077 6
@


1.82
log
@Add the ``nat target'' command.
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.81 2000/03/19 17:57:11 aaron Exp $
d8 1
a8 1
.Nd Point to Point Protocol (a.k.a. user-ppp) 
d42 1
a42 1
to act as a NAT or masquerading engine for all machines on an internal 
d365 1
a365 1
By default, 
d430 1
a430 1
uses 
d580 1
a580 1
ppp ON awfulhak> 
d1490 1
a1490 1
Then, the 
d2879 1
a2879 1
and 
d4249 2
a4250 2
Chat: Expecting: 
Chat: Sending: 
d4261 1
a4261 1
Chat: Sending: 
d5214 1
a5214 1
.It Pa /var/spool/lock/LCK..* 
@


1.81
log
@Remove hard sentence breaks. Add $OpenBSD$ tags where appropriate. Some other
cleanup along the way.
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.80 2000/03/19 10:33:33 brian Exp $
d3186 5
@


1.80
log
@Allow environment variables on command/config lines; markk@@knigma.org
Add the ``resolv'' command so that when ``enable dns''
is used, it's possible to restore the file.
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.79 2000/03/14 21:31:44 aaron Exp $
d20 2
a21 1
software package.  Normally,
d39 2
a40 1
network address translation features.  This allows
d43 2
a44 1
LAN.  Refer to
d67 2
a68 1
by one each time until it succeeds.  If it fails three times in a row
d82 2
a83 2
attempts to bring up the link.  Packets received (including the first one)
while
d86 2
a87 1
2 minutes.  See the
d98 2
a99 1
use when configuring the interface.  Something like
d101 2
a102 1
is usually appropriate.  See the
d110 2
a111 2
attempts to establish a connection with the peer immediately.  If it
succeeds,
d114 2
a115 1
of 0.  If it fails,
d122 3
a124 2
becomes a daemon.  The link is created in background mode.  This is useful
if you wish to control
d173 2
a174 2
the status of connection and close the connection.  All functions can
also be optionally password protected for security.
d178 2
a179 2
command which enables you to talk to the device directly.  When you
are connected to the remote peer and it starts to talk
d182 2
a183 1
detects it and switches to packet mode automatically.  Once you have
d194 2
a195 1
link.  When this happens, the daemon automatically dials and establishes the
d200 2
a201 1
connection.  However, it differs in that it will dial the remote site
d203 2
a204 1
sent.  This mode is useful for full-time connections where we worry less
d208 2
a209 2
mode is also available.  This mode is targeted at a dedicated link
between two machines.
d213 2
a214 1
command via its diagnostic socket.  A
d225 2
a226 1
private, unregistered network to access the Internet.  The
d228 2
a229 1
host acts as a masquerading gateway.  IP addresses as well as TCP and
d236 2
a237 1
Otherwise, it will exit with an error.  This allows the setup of
d251 2
a252 2
protocol for authentication instead.  If the peer requests Microsoft
CHAP authentication and
d266 2
a267 1
characteristics.  If
d277 2
a278 1
the peer.  This allows routing from the peer to the LAN without
d304 2
a305 1
conventional serial device.  UDP connections force
d341 2
a342 2
modem and also increases latency.  Unlike VJ-compression, Predictor-1 and
DEFLATE compression pre-compresses
d367 2
a368 2
will not run if the invoking user id is not zero.  This may be overridden
by using the
d375 2
a376 2
system lock files and read the ppp configuration files.  All
external commands (executed via the "shell" or "!bg" commands) are executed
d390 2
a391 1
one by default).  If it doesn't, or if you require more than one tun
d422 2
a423 2
manual page for details.  Each of these users must also be given access
using the
d432 2
a433 1
to log information.  A common log file name is
d485 2
a486 1
automatically.  Refer to the
d506 2
a507 2
part of your prompt should always be in upper case.  If it is in lower
case, it means that you must supply a password using the
d509 2
a510 1
command.  This only ever happens if you connect to a running version of
d520 2
a521 1
Normally, hardware flow control (CTS/RTS) is used.  However, under
d527 2
a528 1
come.  Thus, if you have a direct line and can't seem to make a
d540 2
a541 1
default.  Parity is a rather archaic error checking mechanism that is no
d545 2
a546 1
is) use much more reliable checking mechanisms.  Parity has a relatively
d552 2
a553 1
is opened.  However, some ISPs (Internet Service Providers) may use
d556 2
a557 2
is opened).  Notably, Compuserve insist
on even parity when logging in:
d607 2
a608 1
start negotiating.  To force
d618 2
a619 1
login/password authentication.  To set things up properly, drop back to
d641 2
a642 1
You are now connected!  Note that
d645 4
a648 3
a peer connection.  If only some of the three Ps go uppercase, wait until
either everything is uppercase or lowercase.  If they revert to lowercase,
it means that
d650 2
a651 2
couldn't successfully negotiate with the peer.  A good first step
for troubleshooting at this point would be to
d656 2
a657 1
and try again.  Refer to the
d659 4
a662 2
command description below for further details.  If things fail at this point,
it is quite important that you turn logging on and try again.  It is also
d683 2
a684 1
At this point, your machine has a host route to the peer.  This means
d686 2
a687 1
of the link.  If you want to add a default route entry (telling your
d713 2
a714 2
in other windows or terminals on your machine.  If you wish to reuse
the current terminal, you can put
d737 2
a738 2
character is treated as a comment line.  Leading whitespace are ignored
when identifying comment lines.
d742 2
a743 1
It must have one argument - the file to include.  You may wish to
d759 3
a761 1
section.  This section is always executed.  It should also contain
d774 2
a775 1
label provided.  When
d779 2
a780 2
section is still executed.  The load command can be used to manually
load a section from the
d792 4
a795 2
command.  Only the commands specified for that label in the configuration
file are executed.  However, when invoking
d804 2
a805 1
to establish a connection.  Refer to the
d824 2
a825 1
has entered the authentication phase.  The PPp prompt indicates that
d827 2
a828 1
has entered the network phase.  The PPP prompt indicates that
d838 2
a839 1
connection is established.  See the provided
d848 2
a849 2
commands below for a description of possible substitution strings).  Similarly,
when a connection is closed, the contents of the
d851 2
a852 1
file are executed.  Both of these files have the same format as
d886 4
a889 3
attempts to establish the connection immediately.  If multiple phone
numbers are specified, each phone number will be tried once.  If the
attempt fails,
d904 2
a905 1
options.  You must also specify the destination label in
d907 2
a908 1
to use.  It must contain the
d941 2
a942 1
itself.  If the diagnostic socket is closed or changed to a different
d950 2
a951 1
with the peer.  In
d978 2
a979 2
should be incremented each time a new dial attempt is made.  The timeout
reverts to
d981 2
a982 1
only after a successful connection is established.  The default value for
d997 3
a999 2
command).  The default is 3 seconds.  Again, if the argument is the literal
string
d1004 3
a1006 2
that triggers a dial.  The previous value is unchanged if this parameter
is omitted.  If a value of zero is specified for
d1019 2
a1020 1
delay after all numbers have been tried.  If multiple phone numbers
d1032 2
a1033 1
to attempt to connect 20 times.  After the first attempt,
d1035 5
a1039 3
pauses for 10 seconds.  After the next attempt it pauses for 20 seconds
and so on until after the sixth attempt it pauses for 1 minute.  The next
14 pauses will also have a duration of one minute.  If
d1053 2
a1054 1
may be lost at inappropriate times.  It is possible to have
d1067 2
a1068 1
seconds before each try.  For example,
d1077 2
a1078 1
seconds before attempting to reconnect.  This may happen up to
d1082 4
a1085 2
gives up.  The default value of ntries is zero (no reconnect).  Care
should be taken with this option.  If the local timeout is slightly
d1089 1
a1089 1
NOTE:  In this context, losing too many LQRs constitutes a loss of
d1094 2
a1095 2
a connection is made.  The next number redial period specified with
the
d1097 2
a1098 1
command is honoured, as is the reconnect tries value.  If your redial
d1145 1
a1145 1
.Dl ttyd1  "/usr/libexec/getty std.38400" dialup on secure
d1168 2
a1169 1
work with stdin and stdout.  You can also use
d1202 2
a1203 1
commands.  Refer to their descriptions below.
d1259 2
a1260 1
that either PAP or CHAP are enabled as above.  If they are not, you are
d1266 2
a1267 1
authenticates itself.  This may be done using
d1269 3
a1271 3
but alternatively, you can use PAP or CHAP.  CHAP is the more secure
of the two, but some clients may not support it.  Once you decide which
you wish to use, add the command
d1280 2
a1281 1
file.  This file contains one line per possible client, each line
d1292 2
a1293 1
specify the client username and password.  If
d1301 2
a1302 2
when authenticating.  If the client does not offer a suitable
response based on any
d1311 2
a1312 1
is used when negotiating IP numbers.  See the
d1332 2
a1333 1
the client will be called back on the given number.  If CBCP is being used,
d1339 2
a1340 1
command.  The value will be used in
d1355 2
a1356 1
socket.  It should be noted however that
d1359 2
a1360 1
with a telnet server.  You should set up a port for receiving this
d1362 2
a1363 2
connection on the receiving machine (ui-gate).  This is
done by first updating
d1395 2
a1396 2
You may also want to enable PAP or CHAP for security.  To enable PAP, add
the following line:
d1456 2
a1457 1
link - probably TCP again.  If packets are lost, both levels will
d1463 2
a1464 1
from "tcp" to "udp".  When using UDP as a transport,
d1466 2
a1467 1
will operate in synchronous mode.  This is another gain as the incoming
d1475 2
a1476 1
aliasing).  This allows the
d1479 2
a1480 2
a local area network.  Outgoing IP packets are aliased so that
they appear to come from the
d1499 2
a1500 1
host.  Finally, the same or similar applications should be checked on other
d1506 2
a1507 1
or possibly receiving IP packets.  Check that IP forwarding is enabled in
d1523 2
a1524 1
filter.  Here are the basics:
d1560 2
a1561 1
specifying the rule number.  Rules are specified in numeric order according to
d1578 2
a1579 1
rule number greater than the current rule.  In this case, if a given
d1594 2
a1595 1
are the source and destination IP number specifications.  If
d1610 4
a1613 3
command for a description of these values).  When these values are used,
the filters will be updated any time the values change.  This is similar
to the behaviour of the
d1674 1
a1674 1
The timeout period is measured in seconds, the  default value for which
d1686 2
a1687 1
modes, the idle timeout is ignored.  In
d1694 2
a1695 2
program itself remains running.  Another trigger packet will cause it to
attempt to re-establish the link.
d1721 2
a1722 1
will use a window size of 15.  Refer to the
d1727 4
a1730 2
and denied by default.  This is exactly the same as DEFLATE except that
it uses CCP ID 24 to negotiate.  This allows
d1742 2
a1743 1
returns ACK to the requester.  Otherwise,
d1781 2
a1782 1
smaller than the default.  The usual value is 255.255.255.255, as
d1792 2
a1793 1
may be used to specify this IP number.  This will not affect the
d1816 2
a1817 2
all IP addresses and the other side should go along with it.  In order
to allow more flexible behaviour, the
d1825 2
a1826 2
represents the number of bits significant in the IP address.  The above
example means:
d1841 2
a1842 2
preferred IP address and will obey the remote peers selection.  When
using zero, no routing table entries will be made until a connection
d1855 2
a1856 1
command.  This command allows you to set multiple phone numbers for
d1870 2
a1871 1
previous number was used in a failed dial or login script.  Numbers
d1873 2
a1874 1
as a result of using the previous number.  For example:
d1879 2
a1880 1
Here, the 1234567 number is attempted.  If the dial or login script fails,
d1882 7
a1888 4
fails.  On the dial after this, the 3456789 number is used.  The 4567890
number is only used if the dial or login script using the 3456789 fails.  If
the login script of the 2345678 number fails, the next number is still the
3456789 number.  As many pipes and colons can be used as are necessary
d1890 3
a1892 2
colon, but not both).  The next number redial timeout is used between all
numbers.  When the end of the list is reached, the normal redial period is
d1914 2
a1915 1
commands.  The
d1935 2
a1936 1
Expect OK.  If that's not received within the 4 second timeout, send ATZ
d1947 2
a1948 2
Once the connection is established, the login script is executed.  This
script is written in the same style as the dial script, but care should
d1961 2
a1962 1
Expect "login:".  If it's not received, send a carriage return and expect
d1982 2
a1983 1
command is logged specially.  When
d1991 2
a1992 2
Login scripts vary greatly between ISPs.  If you're setting one up
for the first time,
d2006 3
a2008 1
Cuaa0 is the first serial port on FreeBSD.  If you're running
d2010 6
a2015 3
on OpenBSD, cua00 is the first.  A speed of 115200 should be specified
if you have a modem capable of bit rates of 28800 or more.  In general,
the serial speed should be about four times the modem speed.
d2029 3
a2031 2
unobtrusive and unspecific IP number as your address.  10.0.0.1/0 would
be appropriate.  The bit after the / specifies how many bits of the
d2038 2
a2039 1
This will force your ISP to assign a number.  (The third argument will
d2051 2
a2052 2
In most cases, your ISP will also be your default router.  If this is
the case, add the line
d2074 2
a2075 1
file.  Since the advent of
d2118 2
a2119 2
for some real examples.  The pmdemand label should be appropriate for most
ISPs.
d2173 2
a2174 1
Output to the terminal device.  If there is currently no terminal,
d2188 3
a2190 2
command allows you to set the logging output level.  Multiple levels
can be specified on a single command line.  The default is equivalent to
d2193 2
a2194 2
It is also possible to log directly to the screen.  The syntax is
the same except that the word
d2236 2
a2237 1
(if any).  This will cause
d2260 2
a2261 1
protocol.  Refer to RFC 1990 for specification details.
d2267 2
a2268 1
Either or both of these may be specified.  It is recommended that
d2271 2
a2272 2
confusing lock-ups may result.  Locally, these identification variables
are specified using the
d2276 2
a2277 1
commands.  The
d2284 2
a2285 2
command (set maximum reconstructed receive unit).  Once multi-link
is enabled,
d2295 2
a2296 1
command is used.  This command will clone existing links, where all
d2306 2
a2307 1
link.  It's mode may subsequently be changed using the
d2320 2
a2321 2
Once a new link has been created, command usage varies.  All link
specific commands must be prefixed with the
d2323 2
a2324 2
command, specifying on which link the command is to be applied.  When
only a single link is available,
d2333 2
a2334 1
level.  For example, once two or more links are available, the command
d2362 3
a2364 2
Note how all cloning is done at the end of the configuration.  Usually,
the link will be configured first, then cloned.  If you wish all links
d2403 2
a2404 1
directory.  This socket is used to pass link information (including
d2407 2
a2408 1
invocations.  This facilitates
d2417 2
a2418 1
line.  Once
d2421 2
a2422 1
already running process.  If there is no already running process,
d2427 2
a2428 2
This section lists the available commands and their effect.  They are
usable either from an interactive
d2439 2
a2440 1
how to negotiate the initial connection with the peer.  Each
d2456 3
a2458 2
Default: Enabled and Accepted.  ACFComp stands for Address and Control
Field Compression.  Non LCP packets will usually have an address
d2460 2
a2461 1
0x03 (the Unnumbered Information command).  If this option is
d2469 8
a2476 6
Default: Disabled and Accepted.  CHAP stands for Challenge Handshake
Authentication Protocol.  Only one of CHAP and PAP (below) may be
negotiated.  With CHAP, the authenticator sends a "challenge" message
to its peer.  The peer uses a one-way hash function to encrypt the
challenge and sends the result back.  The authenticator does the same,
and compares the results.  The advantage of this mechanism is that no
d2478 3
a2480 3
A challenge is made when the connection is first made.  Subsequent
challenges may occur.  If you want to have your peer authenticate
itself, you must
d2498 3
a2500 1
challenge.  MS-CHAP is a combination of MD4 and DES.  If
d2505 2
a2506 1
Default: Enabled and Accepted.  This option decides if deflate
d2543 2
a2544 1
Default: Disabled and Denied.  This is a variance of the
d2548 2
a2549 1
program.  Refer to the
d2551 2
a2552 1
section above for details.  It is disabled by default as it violates
d2555 2
a2556 1
Default: Disabled and Denied.  This option allows DNS negotiation.
d2571 2
a2572 1
them.  The answer is taken from
d2578 4
a2581 2
Default: Enabled and Accepted.  This option allows control over whether we
negotiate an endpoint discriminator.  We only send our discriminator if
d2585 2
a2586 1
is enabled.  We reject the peers discriminator if
d2590 2
a2591 1
Default: Disabled and Accepted.  The use of this authentication protocol
d2603 3
a2605 2
Default: Disabled and Accepted.  This option decides if Link Quality
Requests will be sent or accepted.  LQR is a protocol that allows
d2608 2
a2609 1
carrier detect.  When LQR is enabled,
d2615 2
a2616 1
below) as part of the LCP request.  If the peer agrees, both sides will
d2618 5
a2622 3
quality monitoring by enabling LQM logging.  If the peer doesn't agree,
ppp will send ECHO LQR requests instead.  These packets pass no
information of interest, but they
d2629 2
a2630 1
sent rather than sending a 6th.  A message is logged at the
d2637 2
a2638 1
Default: Disabled and Accepted.  The use of this authentication protocol
d2641 2
a2642 1
a single CHAP type (0x80).  It is very similar to standard CHAP (type 0x05)
d2645 2
a2646 1
standard MD5 mechanism.  CHAP type 0x80 for LANMan is also supported - see
d2658 2
a2659 2
one of the two protocols.  This gives the peer a chance to attempt using
both protocols.
d2667 1
a2667 1
Note:  If only LANMan is enabled,
d2669 2
a2670 1
(version 2.3.5) misbehaves when acting as authenticatee.  It provides both
d2674 7
a2680 6
Default: Disabled and Accepted.  PAP stands for Password Authentication
Protocol.  Only one of PAP and CHAP (above) may be negotiated.  With
PAP, the ID and Password are sent repeatedly to the peer until
authentication is acknowledged or the connection is terminated.  This
is a rather poor security mechanism.  It is only performed when the
connection is first established.
d2701 2
a2702 1
Default: Enabled and Accepted.  This option decides if Predictor 1
d2705 2
a2706 1
Default: Enabled and Accepted.  This option is used to negotiate
d2710 2
a2711 1
Default: Enabled and Accepted.  This option determines if
d2715 2
a2716 2
sequence numbers when negotiating multi-link mode.  This is only
applicable if our MRRU is set (thus enabling multi-link).
d2718 2
a2719 2
Default: Enabled and Accepted.  This option determines if Van Jacobson
header compression will be used.
d2726 2
a2727 1
Default: Enabled.  When
d2735 2
a2736 1
field, reporting the fact at the respective log level.  If
d2742 2
a2743 1
Default: Disabled.  When
d2747 2
a2748 1
instance initially receives each connection.  After determining that
d2774 2
a2775 1
from exiting due to the death of its child.  As
d2780 2
a2781 1
Default: Enabled.  When
d2788 2
a2789 1
interface.  If disabled,
d2792 2
a2793 1
the other end.  It is convenient to have this option enabled when
d2797 2
a2798 1
Default: Disabled.  Enabling this option will tell the PAP authentication
d2805 2
a2806 1
is always checked first.  If you wish to use passwords from
d2813 2
a2814 1
Default: Disabled.  Enabling this option will tell
d2816 2
a2817 1
to proxy ARP for the peer.  This means that
d2825 2
a2826 1
appears.  The proxy entry cannot be made unless
d2830 2
a2831 1
Default: Disabled.  Enabling this will tell
d2839 2
a2840 1
command.  No proxy arp entries are made for the interface address itself
d2845 2
a2846 1
Default: Enabled.  When the
d2854 2
a2855 1
list.  Each time
d2866 2
a2867 1
Default: Enabled.  This option tells
d2869 4
a2872 3
to gather throughput statistics.  Input and output is sampled over
a rolling 5 second window, and current, best and total figures are
retained.  This data is output when the relevant
d2876 2
a2877 1
command.  Throughput statistics are available at the
d2883 2
a2884 2
Default: Enabled.  Normally, when a user is authenticated using PAP or
CHAP, and when
d2888 2
a2889 2
mode, an entry is made in the utmp and wtmp files for that user.  Disabling
this option will tell
d2891 2
a2892 1
not to make any utmp or wtmp entries.  This is usually only necessary if
d2897 2
a2898 1
is specified.  This option simply tells
d2926 2
a2927 2
is the destination IP address.  The netmask is specified either as a
number of bits with
d2934 2
a2935 2
with no mask refers to the default route.  It is also possible to use the
literal name
d2942 2
a2943 1
machine/network.  Refer to the
d2986 2
a2987 2
changes, the appropriate routing table entries are updated.  This facility
may be disabled using
d2992 2
a2993 1
and its configuration files.  It is possible to allow user-level access,
d2996 2
a2997 1
is being run in.  For example, you may wish to configure
d3018 2
a3019 1
command is found.  The
d3022 2
a3023 1
loaded at startup).  Each successive
d3039 2
a3040 1
mode is possible.  If this command is used, it restricts the access
d3132 2
a3133 2
A range of port numbers may be specified as shown above.  The ranges
must be of the same size.
d3157 2
a3158 1
rather than the local interface address.  This allows the uses of the
d3174 2
a3175 2
to proxy certain connections, redirecting them to a given server.  Refer
to the description of
d3182 2
a3183 1
 attempt to avoid changing the port number on outgoing packets.  This is useful
d3191 2
a3192 2
Only alter outgoing packets with an unregistered source ad-
dress.  According to RFC 1918, unregistered source addresses
d3210 2
a3211 1
value.  See the
d3215 2
a3216 1
This is replaced with the local endpoint discriminator value.  See the
d3224 2
a3225 2
This is replaced with the last label name used.  A label may be specified
on the
d3242 3
a3244 2
CHAP.  Normally, this variable is assigned only in -direct mode.  This value
is available irrespective of whether utmp logging is enabled.
d3246 2
a3247 2
These are replaced with the primary and secondary nameserver IP numbers.  If
nameservers are negotiated by IPCP, the values of these macros will change.
d3264 2
a3265 1
level.  If
d3269 2
a3270 2
command below).  If no second argument is given, all values are
cleared.
d3277 2
a3278 1
argument(s).  This command must be used from the
d3281 2
a3282 1
link  becomes the default).  Links may be removed using the
d3290 2
a3291 1
down and the link will be closed.  If
d3295 2
a3296 1
will not bring the link offline.  It is subsequently possible to use
d3301 2
a3302 1
is being used.  If
d3304 2
a3305 1
is specified, only the relevant compression layer is closed.  If the
d3309 2
a3310 2
further CCP negotiation.  In any event, this command does not disconnect
the user from
d3323 2
a3324 1
IP address.  If
d3331 2
a3332 1
entries are deleted.  If
d3354 4
a3357 2
had become unavailable.  It's not considered polite to use this command on
a Finite State Machine that's in the OPEN state.  If no arguments are
d3359 2
a3360 1
are terminated).  If
d3365 2
a3366 1
is not closed.  If
d3370 2
a3371 1
Show a list of available commands.  If
d3393 2
a3394 1
combination to the interface.  Instead of specifying
d3423 2
a3424 1
from the interface.  If
d3437 2
a3438 1
from the interface.  If the
d3443 2
a3444 2
Shows the current state and current addresses for the interface.  It is
much the same as running
d3451 2
a3452 1
sub-commands and a brief synopsis for each.  When invoked with
d3462 2
a3463 2
specify which link the command should affect.  This is only
applicable after multiple links have been created in Multi-link
d3469 2
a3470 1
specifies the name of an existing link.  If
d3474 2
a3475 1
is executed on each link.  If
d3488 2
a3489 1
file.  If
d3508 2
a3509 2
command.  All closed links are immediately brought up apart from second
and subsequent
d3518 2
a3519 1
renegotiated.  This allows various LCP options to be changed, after which
d3521 2
a3522 1
can be used to put them into effect.  After renegotiating LCP,
d3527 2
a3528 2
argument is used, the relevant compression layer is opened.  Again,
if it is already open, it will be renegotiated.
d3544 2
a3545 2
command set.  This password is required when connecting to the diagnostic
port (see the
d3551 2
a3552 1
command line.  The value of
d3563 2
a3564 1
ppp will exit after closing all connections.  Otherwise, if the user
d3574 3
a3576 3
This command removes the given link.  It is only really useful in
multi-link mode.  A link must be
in the
d3599 2
a3600 1
file.  When
d3610 2
a3611 1
as read only.  If
d3620 2
a3621 1
macros.  This is the opposite of the
d3627 2
a3628 1
into memory.  This may be necessary if for example a DHCP client overwrote
d3635 2
a3636 1
command.  This is sometimes a useful command to put in the
d3642 2
a3643 1
file.  This command will work even if the
d3645 2
a3646 1
command has been used.  It may be useful as a command in the
d3660 2
a3661 1
successfully negotiates a DNS.  This is the opposite of the
d3674 2
a3675 1
ACCMap stands for Asynchronous Control Character Map.  This is always
d3686 2
a3687 1
PAP or CHAP negotiation to the given value.  It also specifies the
d3690 2
a3691 1
sequence, preventing the actual password from being logged.  If
d3718 2
a3719 1
command above, substituting special names in the same manner.  Once executed,
d3749 2
a3750 1
digits or characters.  An encryption device or Secure ID card is usually
d3771 2
a3772 1
first reads data from the tun device.  The next
d3778 2
a3779 1
seconds.  When the current bundle throughput decreases to
d3802 2
a3803 1
must be greater than zero.  It is currently only used by the
d3829 2
a3830 1
request one of them.  If you wish callback to be optional, you must include
d3841 2
a3842 1
authentication.  If
d3848 2
a3849 1
Microsoft's callback control protocol is used.  See
d3873 2
a3874 1
meaning any number is permitted.  If
d3888 2
a3889 1
the connection.  This is required (in addition to one or more other callback
d3937 2
a3938 2
Carrier is checked one second after the login script is complete.  If it's
not set,
d3949 2
a3950 1
Carrier is checked once per second for 6 seconds.  If it's not set after
d3952 2
a3953 1
the device is closed.  Carrier is always required for i4b devices.
d3955 2
a3956 1
Carrier is checked once per second for 5 seconds.  If it's not set after
d3958 2
a3959 1
the device is closed.  Carrier is always required for PPPoE devices.
d3962 2
a3963 1
All other device types don't support carrier.  Setting a carrier value will
d3967 2
a3968 1
signal.  If this delay isn't increased, this will result in
d4006 2
a4007 1
carrier.  If carrier is not detected after
d4026 2
a4027 1
will not read packets indefinitely.  Instead, it reads up to
d4042 2
a4043 1
This sets hardware flow control.  Hardware flow control is
d4048 2
a4049 1
sizes.  Both
d4066 2
a4067 1
command.  Refer to the
d4069 2
a4070 2
command description above for details.  This command does not affect the
IP numbers requested using
d4104 2
a4105 1
is opened.  Standard input, output and error are fed back to
d4119 2
a4120 1
interface.  The given
d4123 3
a4125 1
packet.  If no provider is given, an empty value will be used.  Refer to
d4159 2
a4160 1
side.  See also the
d4162 2
a4163 1
command below.  Refer to
d4225 2
a4226 1
and substituted as the expect or send string.  If
d4263 5
a4267 3
nesting.  Here, there are four parsers at work.  The first parses the
original line, reading it as three arguments.  The second parses the
third argument, reading it as 11 arguments.  At this point, it is
d4271 2
a4272 1
an expect-send-expect sequence.  When the
d4287 2
a4288 1
command rather than using the internal one.  See
d4297 2
a4298 2
This command sets our local endpoint discriminator.  If set prior to
LCP negotiation, and if no
d4303 2
a4304 1
option.  The following discriminators may be set:
d4309 4
a4312 2
Our local IP number is used.  As LCP is negotiated prior to IPCP, it is
possible that the IPCP layer will subsequently change this value.  If
d4319 2
a4320 1
number is used.  If the local IP number is not resident on any Ethernet
d4329 2
a4330 2
A 20 digit random number is used.  Care should be taken when using magic
numbers as restarting
d4335 2
a4336 2
be recognised by the peer as belonging to the same bundle.  This makes it
unsuitable for
d4352 2
a4353 2
option above.  It allows the user to specify a set of characters that
will be
d4370 2
a4371 1
supports four filter sets.  The
d4374 2
a4375 1
idle timer.  The
d4381 2
a4382 1
mode.  The
d4391 3
a4393 2
be done by the NAT engine on incoming packets.  By default all filter
sets allow all packets to pass.  Rules are processed in order according to
d4397 4
a4400 2
Up to 40 rules may be given for each set.  If a packet doesn't match
any of the rules in a given set, it is discarded.  In the case of
d4404 2
a4405 1
filters, this means that the packet is dropped.  In the case of
d4410 3
a4412 2
filters it means that the packet will not trigger a dial.  A packet failing
to trigger a dial will be dropped rather than queued.  Refer to the
d4418 2
a4419 1
before it is closed.  It should not normally be necessary, but can
d4433 2
a4434 1
IPCP negotiation.  Addresses are specified using the format
d4442 2
a4443 1
specifies how many bits of the address we will insist on.  If
d4468 2
a4469 1
numbers to the peer.  If the peer requests one of these numbers,
d4472 2
a4473 1
will grant the peers request.  This is useful if the peer wants
d4486 2
a4487 1
in the initial IPCP negotiation.  However, only an address in the
d4489 2
a4490 1
range will be accepted.  This is useful when negotiating with some
d4502 2
a4503 1
line in the config file.  In any other mode, these values are just
d4548 2
a4549 1
no reply from the peer before giving up.  The default is 5 attempts for
d4557 3
a4559 1
peers response.  The default is 3 attempts.  Authentication protocols are
d4574 2
a4575 2
This command allows the adjustment of the current log level.  Refer
to the Logging Facility section for further details.
d4579 4
a4582 3
compliments the dial-script.  If both are specified, the login
script will be executed after the dial script.  Escape sequences
available in the dial script are also available here.
d4585 2
a4586 1
before the hangup script is called.  It should not normally be necessary.
d4594 3
a4596 1
packets are sent.  The default is 30 seconds.  You must also use the
d4602 2
a4603 1
of the specified link.  This is normally only useful in multi-link mode,
d4615 2
a4616 1
afterwards.  This will allow
d4623 3
a4625 3
Multi-link Protocol or MP.  There is no default MRRU (Maximum
Reconstructed Receive Unit) value.  If no argument is given, multi-link
mode is disabled.
d4627 3
a4629 3
The default MRU (Maximum Receive Unit) is 1500.  If it is increased, the
other side *may* increase its mtu.  There is no point in decreasing the
MRU to below the default as the
d4631 2
a4632 2
protocol *must* be able to accept packets of at least 1500 octets.  If
no argument is given, 1500 is assumed.
d4634 2
a4635 1
The default MTU is 1500.  At negotiation time,
d4638 2
a4639 1
not less than 296 bytes).  If the MTU is set,
d4644 2
a4645 1
if the peer requested a higher value MRU/MRRU.  This can be useful for
d4654 2
a4655 1
values to be returned at the peers request.  If no values are given,
d4668 2
a4669 1
comes up.  If you want to wait for the peer to initiate negotiations, you
d4677 2
a4678 1
This allows the line parity to be set.  The default value is
d4703 2
a4704 1
below.  In
d4716 2
a4717 1
is not specified, the original process title is restored.  All the
d4808 2
a4809 2
RADIUS routes override configured routes.  This also applies for RADIUS
routes that don't include the
d4826 2
a4827 1
defaults to zero.  A value of
d4833 3
a4835 2
This sets the routing table RECVPIPE value.  The optimum value is
just over twice the MTU value.  If
d4847 2
a4848 1
times.  If more than one phone number is specified (see
d4852 2
a4853 1
is taken before dialing each number.  A pause of
d4855 2
a4856 1
is taken before starting at the first number again.  A literal value of
d4883 2
a4884 1
done nothing.  If an immediate dial is required, a
d4888 2
a4889 1
keyword.  See the
d4893 3
a4895 2
This sets the routing table SENDPIPE value.  The optimum value is
just over twice the MTU value.  If
d4914 3
a4916 2
to be the name or number of a TCP port.  You must specify the octal umask
to be used with a local domain socket.  Refer to
d4918 2
a4919 1
for umask details.  Refer to
d4926 2
a4927 1
command above) when connecting to this socket.  If the password is
d4933 2
a4934 1
interface unit number.  This is useful when you wish to use the same
d4946 2
a4947 1
command is the preferred mechanism of communications.  Currently,
d4953 2
a4954 1
This sets the speed of the serial device.  If speed is specified as
d4960 2
a4961 1
synchronous or asynchronous.  These devices will override incorrect
d4971 2
a4972 1
acknowledgement.  This is also useful if you wish to
d4975 2
a4976 1
given time.  Use
d4990 2
a4991 2
This command allows the setting of the idle timer.  Refer to the
section titled
d5009 2
a5010 1
prioritizes when transmitting data.  The default priority TCP ports
d5012 2
a5013 1
543 (klogin) and 544 (kshell).  There are no priority UDP ports by default.
d5032 2
a5033 1
is specified, only that list is cleared).  If the first
d5047 2
a5048 2
whether it should attempt to negotiate VJ slot compression.  By default,
slot compression is turned
d5055 2
a5056 1
command above).  It defaults to a value of 16.
d5070 2
a5071 1
environment variable.  Otherwise, the given
d5073 2
a5074 1
is executed.  Word replacement is done in the same way as for the
d5079 2
a5080 2
requires a following space as with any of the other commands.  You should
note that this command is executed in the foreground -
d5082 2
a5083 1
will not continue running until this process has exited.  Use the
d5098 2
a5099 1
List the current rules for the given filter.  If
d5143 4
a5146 3
Go into terminal mode.  Characters typed at the keyboard are sent to
the device.  Characters read from the device are displayed on the
screen.  When a remote
d5156 2
a5157 1
Read the example configuration files.  They are a good source of information.
d5203 2
a5204 1
Logging and debugging information file.  Note, this name is specified in
d5210 2
a5211 1
tty port locking file.  Refer to
d5221 2
a5222 1
The tun interface used by this port.  Again, this file is only created in
@


1.79
log
@Suffix "i.e." and "e.g." with a comma. Just another really picky man page
commit, as we want our documentation to be as consistently formatted as
possible (it's getting there :-)).
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.78 2000/02/28 01:20:23 brian Exp $
d37 1
a37 1
.Nm ppp Ns No s
d39 1
a39 1
.Nm ppp
d116 1
a116 1
.Nm ppp Ns No s
d446 1
a446 1
.Nm ppp Ns No s
d465 3
a467 1
command below for details.
d513 1
a513 1
.Nm ppp Ns No s
d858 3
a860 2
command to define the remote peers IP address. (refer to
.Pa /etc/ppp/ppp.conf.sample )
d917 2
a918 1
to connect again. If the argument is the literal string
d987 2
a988 1
mode on both ends of the link. If each end has the same timeout,
d1139 1
a1139 1
.Nm ppp
d1265 1
a1265 1
.Nm ppp Ns No s
d1429 2
a1430 1
This implementation supports packet filtering. There are four kinds of
d1644 2
a1645 1
uses IPCP to negotiate IP addresses. Each side of the connection
d1651 2
a1652 1
returns NAK to suggest that the peer use a different IP address. When
d1983 1
d1986 7
a1992 1
do this if you are running an local DNS, as
d2281 1
a2281 1
.Nm ppp Ns No s
d2598 1
a2598 1
.Nm ppp Ns No 's
d2724 1
a2724 1
.Pq see Xr libalias 5 ,
d2787 3
a2789 1
.Dq HISADDR
d2791 1
a2791 1
.Dq MYADDR
d2797 3
a2799 1
.Dv HISADDR
d2801 1
a2801 1
.Dv MYADDR
d3051 3
d3375 63
d3663 1
a3663 1
is disabled - i.e., configuring CBCP in the
d3723 1
a3723 1
.Nm ppp Ns No s
@


1.78
log
@Better English
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.77 2000/02/27 01:38:27 brian Exp $
d22 1
a22 1
is implemented as a part of the kernel (e.g. as managed by
d316 1
a316 1
Normally, a modem has built-in compression (e.g. v42.bis) and the system
@


1.77
log
@$Id$ -> $OpenBSD$
@
text
@d1 1
a1 1
.\" $OpenBSD: ppp.8,v 1.76 2000/02/27 00:21:09 brian Exp $
d397 1
a397 1
file and that group contains the names of all users expected to use
@


1.76
log
@When we stop a timer that's the first in the timer list, ensure
that we adjust that timers `rest' value (with the current getitimer()
values) before using that to adjust the next items `rest' value.
After adjusting that value, restart the timer service so that we've
now got the correct setitimer() values.
When adjusting timer::rest, round to the closest TICKUNIT usecs
value.

struct descriptor -> struct fdescriptor (to avoid header polution in
NetBSD).

Introduce LOCALNAT and LOCALRAD defines.

The interface list that comes back from the PF_ROUTE/NET_RT_IFLIST mib
is aligned.  Teach this to ``show route'' and clean up some of the
sockaddr parsing routines.

Add ``set log dns'' to log DNS QUERY packets.

When ppp can't identify the relevant name, don't use "???", use
<nnn> or <0xnnn> instead.

Don't ``break'' when we come accross a non-RTM_IFINFO type
entry in the block returned by the NET_RT_IFLIST mib,
continue instead.

Correct UN_SIZE definition; ben@@scientia.demon.co.uk
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.75 2000/01/22 02:17:52 aaron Exp $
@


1.75
log
@ie. -> i.e.,
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.74 2000/01/18 21:49:02 aaron Exp $
d2017 2
@


1.74
log
@Repair duplicate word occurences; (as found by a Perl script sent to us from
Tom Christiansen <tchrist@@perl.com>).
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.73 2000/01/15 13:15:53 brian Exp $
d330 1
a330 1
stack (ie. Win95, WinNT)
d1557 1
a1557 1
ie. the default is to allow everything through.
d2065 1
a2065 1
(ie. only the un-maskable warning, error and alert output).
d3576 1
a3576 1
is disabled - ie, configuring CBCP in the
@


1.73
log
@Correct the serial device name

Submitted by: Kevin Lo <kevlo@@openbsd.org>
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.72 2000/01/07 03:26:55 brian Exp $
d397 1
a397 1
file and that that group contains the names of all users expected to use
@


1.72
log
@Upgrade from 2.23 -> 2.26
I'll follow up with a list of changes (too big for a commit message IMHO)
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.71 1999/10/05 20:53:10 aaron Exp $
d490 1
a490 1
ppp ON awfulhak> set device /dev/cuaa0
d543 1
a543 1
 Device List:     /dev/cuaa0
d1886 1
a1886 1
set device /dev/cuaa0
d2206 1
a2206 1
 set device /dev/cuaa0 /dev/cuaa1 /dev/cuaa2
d2242 3
a2244 3
 link 1 set device /dev/cuaa0
 link 2 set device /dev/cuaa1
 link 3 set device /dev/cuaa2
d3347 1
a3347 1
.Sq cuaa0
@


1.71
log
@The .Bl -tag flag expects a -width argument.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.70 1999/09/23 04:12:11 alex Exp $
d8 1
a8 1
.Nd Point to Point Protocol (a.k.a. user-ppp)
d10 1
a10 2
.Nm ppp
.Op Fl alias
d12 3
d31 2
d34 2
a35 2
flag does the equivalent of an
.Dq alias enable yes ,
d38 1
a38 1
packet aliasing features.  This allows
d45 22
d110 8
d209 1
a209 1
.It Supports packet aliasing.
d280 3
a282 1
.Op / Ns Em tcp Ns No | Ns Em udp ,
d288 25
d345 1
a345 1
By default,
d347 1
a347 1
will not run if the invoking user ID is not 0.  This may be overridden
d354 1
a354 1
switches to user ID 0 in order to alter the system routing table, set up
d357 1
a357 1
as the user ID that invoked
d361 2
a362 1
logging facility if you're interested in what exactly is done as user ID 0.
d409 1
a409 1
uses
d549 1
a549 1
ppp ON awfulhak>
d1131 1
d1383 2
a1384 1
.Sh PACKET ALIASING
d1386 4
a1389 2
.Fl alias
command line option enables packet aliasing.  This allows the
d1402 3
a1404 3
operation should first be verified with packet aliasing disabled.
Then, the
.Fl alias
d1744 1
d2005 2
a2006 1
.Sq login
d2020 1
a2020 1
Log all function calls specifically made as user ID 0.
d2118 1
d2129 1
a2129 1
.Dq authentication ID .
d2681 1
a2681 1
and
d2697 1
a2697 1
.Fl alias
d2701 2
a2702 2
The option can only be enabled if IP aliasing is enabled
.Pq Dq alias enable yes .
d2706 1
a2706 1
will pass traffic for old interface addresses through the IP alias engine
d2713 2
a2714 2
Disabling IP aliasing with
.Dq alias enable no
d2800 1
a2800 1
User ID 0 is immune to these commands.
d2806 1
a2806 1
By default, only user ID 0 is allowed access to
d2856 3
a2858 3
.It alias Ar command Op Ar args
This command allows the control of the aliasing (or masquerading)
facilities that are built into
d2860 10
a2869 1
If aliasing is enabled on your system (it may be omitted at compile time),
d2872 2
a2873 2
.It alias enable Op yes|no
This command either switches aliasing on or turns it off.
d2875 1
a2875 1
.Fl alias
d2877 2
a2878 2
.Dq alias enable yes .
.It alias addr Op Ar addr_local addr_alias
d2885 1
a2885 1
.It alias deny_incoming Op yes|no
d2888 4
a2891 4
.It alias help|?
This command gives a summary of available alias commands.
.It alias log Op yes|no
This option causes various aliasing statistics and information to
d2894 2
a2895 1
.It alias port Ar proto Ar targetIP Ns Xo
d2937 1
a2937 1
.It alias pptp Op Ar addr
d2940 1
a2940 1
to alias any
d2959 2
a2960 2
aliasing is disabled.
.It "alias proxy cmd" Ar arg Ns No ...
d2969 3
a2971 3
.It alias same_ports Op yes|no
When enabled, this command will tell the alias library attempt to
avoid changing the port number on outgoing packets.  This is useful
d2974 3
a2976 3
.It alias use_sockets Op yes|no
When enabled, this option tells the alias library to create a
socket so that it can guarantee a correct incoming ftp data or
d2978 1
a2978 1
.It alias unregistered_only Op yes|no
d3025 1
a3025 1
This is replaced with the current process ID.
d3424 1
a3424 1
which is encrypted with the challenge and request ID, the answer being sent
d3430 1
a3430 1
in this manner, it's expected that the host challenge is a series of ascii
d3434 1
a3434 1
This sets the authentication ID used in client mode PAP or CHAP negotiation.
d3601 3
a3603 1
.It set cd Ar seconds Ns Op \&!
d3606 6
a3611 2
checks for the existence of carrier one second after the login script is
complete.  If it's not set,
d3614 22
a3635 3
is true for most NULL-modem cables), logs the fact and stops checking
for carrier.  However, some modems take some time to assert the carrier
signal, resulting in
d3637 1
a3637 3
inability to detect when the link is dropped.
.Ar Seconds
specifies the number of seconds that
d3639 26
a3664 2
should wait after the login script has finished before first checking for
carrier.
d3673 3
a3675 6
carrier.  If carrier is not detected at the first check, the link will
be considered disconnected.
.Pp
Carrier
.Em require Ns No ment
is ignored when the link is not a tty device.
d3693 1
a3693 1
.Em 20
d3695 1
a3695 1
.Em 20 No +
d3741 2
a3742 1
All serial device names are expected to begin with
d3744 5
d3754 5
a3758 1
.Pq Dq \&!
d3760 3
a3762 1
.Dq host:port .
d3771 22
a3792 1
.Dq host:port Ns Op /tcp|/udp
d3796 1
a3796 1
.Dq host
d3798 8
a3805 3
.Dq port .
If a tcp or udp specification is not given, the default is tcp.  Refer to
the section on
d3889 1
a3889 1
word: ppp \\"!sh \\\\\\\\-c \\\\\\"echo \\\\\\\\-n label: >&2\\\\\\"\\" \e
d3899 2
a3900 2
Chat: Expecting:
Chat: Sending:
d3911 1
a3911 1
Chat: Sending:
d4034 2
a4035 2
alias engine on outgoing packets and after any IP alterations that might
be done by the alias engine on incoming packets.  By default all filter
d4210 3
d4236 1
a4236 1
and have IP aliasing enabled, it may be useful to
d4521 1
a4521 4
that should be used with local domain sockets as a four character octal
number beginning with
.Sq 0 .
Refer to
d4598 40
d4740 1
d4748 1
a4748 1
.Dq alias ? ,
d4764 1
d4795 1
a4795 1
.It Pa /var/spool/lock/LCK..*
d4800 1
a4800 1
The process ID (PID) of the
d4828 1
d4840 1
d4852 1
d4854 1
d4864 12
a4875 5
This program was originally written by Toshiharu OHNO (tony-o@@iij.ad.jp),
and was submitted to FreeBSD-2.0.5 by Atsushi Murai (amurai@@spec.co.jp).
.Pp
It was substantially modified during 1997 by Brian Somers
(brian@@Awfulhak.org), and was ported to OpenBSD in November that year
d4878 3
a4880 2
Most of the code was rewritten by Brian Somers in early 1998 when
multi-link ppp support was added.
@


1.70
log
@Typo fixes.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.69 1999/08/18 15:38:15 brian Exp $
d3436 1
a3436 1
.Bl -tag
d3445 1
a3445 1
Microsofts callback control protocol is used.  See
d3496 1
a3496 1
If no arguments are given, CBCP (Microsofts CallBack Control Protocol)
@


1.69
log
@Mention ``alias enable no'', not ``alias enable off''.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.68 1999/08/17 17:25:35 brian Exp $
d3858 1
a3858 1
filter specifies packets that keep the connection alive - reseting the
@


1.68
log
@Implement a minimum idle time value as an optional second argument
to ``set timeout''.
This is useful for situations where your minimum call charge is (say)
5 minutes (like mine is)
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.67 1999/08/05 10:32:14 brian Exp $
d2645 1
a2645 1
.Dq alias enable off
@


1.67
log
@o Obsolete the undocumented ``set weight'' command.
o If we're using RADIUS and the RADIUS mtu is less than our
  peers mru/mrru, reduce our mtu to this value for NetBSD too.
o Make struct throughput's sample period dynamic and tweak the ppp
  version number to reflect the extra stuff being passed through
  the local domain socket as a result (MP mode).
o Measure the current throughput based on the number of samples actually
  taken rather than on the full sample period.
o Keep the throughput statisics persistent while being passed to
  another ppp invocation through the local domain socket.
o When showing throughput statistics after the timer has stopped, use
  the stopped time for overall calculations, not the current time.
  Also show the stopped time and how long the current throughput has
  been sampled for.
o Use time() consistently in throughput.c
o Tighten up the ``show bundle'' output.
o Introduce the ``set bandwidth'' command.
o Rewrite the ``set autoload'' command.  It now takes three arguments
  and works based on a rolling bundle throughput average compared against
  the theoretical bundle bandwidth over a given period (read: it's now
  functional).
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.66 1999/08/03 16:14:31 brian Exp $
d4425 1
a4425 1
.It set timeout Ar idleseconds
d4430 7
@


1.66
log
@Reorganise ppp's usage to avoid some mandoc limitations.
Suggested by: wollman@@FreeBSD.org
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.65 1999/08/02 21:45:45 brian Exp $
d3190 4
a3193 2
command.  All closed links are immediately brought up (although some auto
links may not come up depending on what
d3195 1
a3195 1
command has been used).
d3364 1
a3364 1
.Ar max-duration max-load Op Ar min-duration min-load
d3366 2
a3367 1
These settings apply only in multi-link mode and all default to zero.
d3375 11
a3385 5
link will be opened only when at least
.Ar max-load
packets have been in the send queue for
.Ar max-duration
seconds.  Because both values default to zero,
d3387 1
a3387 1
links will simply come up one at a time by default.
d3389 1
a3389 1
If two or more links are open, at least one of which is a
d3391 14
a3404 11
link, a
.Ar demand-dial
link will be closed when there is less than
.Ar min-packets
in the queue for more than
.Ar min-duration .
If
.Ar min-duration
is zero, this timer is disabled.  Because both values default to zero,
.Ar demand-dial
links will stay active until the bundle idle timer expires.
@


1.65
log
@Mention that ospf is a possible filter protocol.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.64 1999/07/29 14:38:26 brian Exp $
a10 7
.Oo
.Fl auto |
.Fl background |
.Fl ddial |
.Fl direct |
.Fl dedicated
.Oc
d12 1
d27 98
a301 116
The following command line switches are understood by
.Nm ppp :
.Bl -tag -width XXX -offset XXX
.It Fl auto
.Nm
opens the tun interface, configures it then goes into the background.
The link isn't brought up until outgoing data is detected on the tun
interface at which point
.Nm
attempts to bring up the link.  Packets received (including the first one)
while
.Nm
is trying to bring the link up will remain queued for a default of
2 minutes.  See the
.Dq set choked
command below.
.Pp
At least one
.Dq system
must be given on the command line (see below) and a
.Dq set ifaddr
must be done in the system profile that specifies a peer IP address to
use when configuring the interface.  Something like
.Dq 10.0.0.1/0
is usually appropriate.  See the
.Dq pmdemand
system in
.Pa /etc/ppp/ppp.conf.sample
for an example.
.It Fl background
Here,
.Nm
attempts to establish a connection with the peer immediately.  If it
succeeds,
.Nm
goes into the background and the parent process returns an exit code
of 0.  If it fails,
.Nm
exits with a non-zero result.
.It Fl direct
This is used for receiving incoming connections.
.Nm
ignores the
.Dq set device
line and uses descriptor 0 as the link.
.Pp
If callback is configured,
.Nm
will use the
.Dq set device
information when dialing back.
.It Fl dedicated
This option is designed for machines connected with a dedicated
wire.
.Nm
will always keep the device open and will never use any configured
chat scripts.
.It Fl ddial
This mode is equivalent to
.Fl auto
mode except that
.Nm
will bring the link back up any time it's dropped for any reason.
.It Fl interactive
This is a no-op, and gives the same behaviour as if none of the above
flags have been specified.
.Nm
loads any sections specified on the command line then provides an
interactive prompt.
.It Fl alias
This flag doesn't control
.Nm ppp Ns No 's
mode.  It does the equivalent of an
.Dq alias enable yes .
Additionally, if the
.Fl auto
flag is also specified, an implicit
.Dq enable iface-alias
is done.
See below for details.
.Pp
Enabling IP aliasing allows
.Nm ppp
to act as a NAT or masquerading engine for all machines on an internal
LAN.  Refer to
.Xr libalias 3
for details.
.El
.Pp
Additionally, one or more configuration entries
.Pq as specified in Pa /etc/ppp/ppp.conf
may be specified on the command line.
.Nm
will read the
.Dq default
system from
.Pa /etc/ppp/ppp.conf
at startup, followed by each of the systems specified on the command line.
.Pp
Only one of the
.Fl auto ,
.Fl background ,
.Fl ddial ,
.Fl direct ,
.Fl dedicated
and
.Fl interactive
switches may be specified.
.Nm ppp Ns No 's
.Sq mode
may subsequently be changed with the
.Dq set mode
command (see below).
.Pp
For now, we'll stick to using interactive mode.
.Pp
@


1.64
log
@Mention which rfc the DNS/NBNS IPCP extensions come from.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.63 1999/07/28 03:02:01 brian Exp $
d1484 1
d3860 1
a3860 1
.Oc Oo tcp|udp|igmp|icmp Op src lt|eq|gt Ar port
@


1.63
log
@Fix a load of typos
Use sizeof, not a hardcode value.

Some of it submitted by:  Peter Jeremy <jeremyp@@gsmx07.alcatel.com.au>
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.62 1999/07/27 23:47:21 brian Exp $
d173 1
a173 1
.It Supports Microsoft's IPCP extensions.
@


1.62
log
@o Overhaul filtering, adding facilities to jump over rules and to
  negate the sense of rules.
o Remove the redundant (and undocumented) ``host'' and ``port''
  words (README.changes updated).
o Don't permit (and ignore) garbage instead of the protocol.

Mostly submitted by:  Peter Jeremy <jeremyp@@gsmx07.alcatel.com.au>
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.61 1999/07/27 13:50:20 brian Exp $
d307 1
a307 1
at startup, followed by each of the systems specifed on the command line.
d760 1
a760 1
commands below for a description of possible substition strings).  Similarly,
d889 1
a889 1
is the maximun number of times
d1450 1
a1450 1
may optionally be followed with an exclaimation mark
d2871 1
a2871 1
is specified, only data comming from that IP number is redirected.
d2880 1
a2880 1
one interior machine per souce machine and target port are possible.
d3158 1
a3158 1
will show a list of possbile
d4042 1
a4042 1
In order to avoid netogiations with the peer that will never converge,
d4470 1
a4470 1
commanad as described above.
d4557 1
a4557 1
The following urls contain useful information:
@


1.61
log
@If we've negotiated CBCP and have also specified ``none'' as a possible
callback option, and the server sends us CBCP_NONUM, proceed directly
to the network phase rather than insisting on our configured CBCP
option.

Mostly submitted by: kkphang <phang@@dgate.po.my>
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.60 1999/07/27 00:31:27 brian Exp $
d1400 1
d1402 1
d1434 1
a1434 1
is either
d1437 3
a1439 3
.Sq deny .
If a given packet
matches the rule, the associated action is taken immediately.
d1443 12
a1454 1
to clear the action associated with that particular rule.
d3854 4
a3857 2
.No permit|deny
.Oo Ar src_addr Ns Op / Ns Ar width
d3884 6
a3889 3
alias engine.  By default all filter sets allow all packets to pass.
Rules are processed in order according to
.Ar rule-no .
@


1.60
log
@Be a bit more consistent with variable names.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.59 1999/07/26 11:18:11 brian Exp $
d3446 9
d3481 2
a3482 1
the connection.  This is required if you wish callback to be optional.
@


1.59
log
@Fix an off-by-one error and correct the man page WRT clearing
filters.

Submitted by:	Peter Jeremy <peter.jeremy@@alcatel.com.au>
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.58 1999/07/17 10:33:53 brian Exp $
d888 1
a888 1
.It Ar maxinc
d894 1
a894 1
.Ar maxinc
d4301 1
a4301 1
.Ar maxinc
d4303 1
a4303 1
.Ar maxinc
@


1.58
log
@Fix a typo
Submitted by:   Rich Wood <rich@@chugaboom.net>
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.57 1999/07/15 02:10:32 brian Exp $
d1424 1
a1424 1
.Sq 19
d1438 4
@


1.57
log
@Back out the mis-commit of my development ISDN modifications.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.55 1999/07/07 10:50:14 aaron Exp $
d283 1
a283 1
.Dq enable alias yes .
@


1.56
log
@Don't declare `end' if we aren't compiling radius support.
@
text
@a159 7
.It Supports PPP over ISDN
If
.Nm
is given a raw B-channel i4b device to open as a link, it's able to talk
to the
.Xr isdnd 8
daemon to establish an ISDN connection.
d3513 1
a3513 3
is true for most
.Dq laplink
NULL-modem cables), logs the fact and stops checking
d3518 1
a3518 1
.Ar seconds
d3521 2
a3522 8
should wait after the dial script has finished before deciding if
carrier is available or not.
.Pp
.Nm
will not proceed to the login script until either carrier is detected
or until
.Ar seconds
has elapsed.
d3531 2
a3532 11
carrier.  If carrier is not detected after
.Ar seconds
seconds, the link will be disconnected.
.Pp
For ISDN devices,
.Nm
will always insist on carrier.  Carrier is raised by the i4brbchX device
driver only after the call has connected.  It is therefore wise to set
a reasonable value such as
.Ar 6
seconds.
d3536 1
a3536 1
is ignored for all other device types.
d3602 1
a3602 2
.Pp
All ISDN and serial device names are expected to begin with
a3603 5
ISDN devices are usually called
.Pa i4brbchX
and serial devices are usually called
.Pa cuaaX .
.Pp
d3611 1
a3611 1
.Dq host:port Ns Op Ns /proto .
a4618 1
.Xr isdn 8 ,
@


1.55
log
@The proper order of the ``introductory'' macros in a man page is .Dd/.Dt/.Os.
Out of the approximately 1450 man pages, only about 90 of them were wrong.
Thanks to kwesterback@@home.com for coming up with a script and patch to repair
this. The patch also inserted a .Os macro in the few man pages that were
missing one.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.54 1999/07/03 02:11:10 aaron Exp $
d160 7
d3520 3
a3522 1
is true for most NULL-modem cables), logs the fact and stops checking
d3527 1
a3527 1
.Ar Seconds
d3530 8
a3537 2
should wait after the login script has finished before first checking for
carrier.
d3546 11
a3556 2
carrier.  If carrier is not detected at the first check, the link will
be considered disconnected.
d3560 1
a3560 1
is ignored when the link is not a tty device.
d3626 2
a3627 1
All serial device names are expected to begin with
d3629 5
d3641 1
a3641 1
.Dq host:port .
d4649 1
@


1.54
log
@remove redundant .Pp macros
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.53 1999/06/23 16:49:04 brian Exp $
d4 1
a5 1
.Dt PPP 8
@


1.53
log
@Support `igmp' filters.
Mostly submitted by: Timo Geusch <freebsd@@sleepycat.ukpeople.net>
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.52 1999/06/14 10:14:19 brian Exp $
a1092 1
.Pp
a1343 1
.Pp
a1683 1
.Pp
a2055 1
.Pp
a4510 1
.Pp
a4533 1
.Pp
a4596 1
.Pp
@


1.52
log
@Come up with something useful when someone searches for
``dynamic IP''.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.51 1999/06/11 11:27:23 brian Exp $
d1468 1
d3834 1
a3834 1
.Oc Oo tcp|udp|icmp Op src lt|eq|gt Ar port
@


1.51
log
@Describe why a ``magic'' enddisc is not always a good idea.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.50 1999/06/10 00:17:26 brian Exp $
d3907 2
a3908 1
.Ar Hisaddr
@


1.50
log
@Allow a remote IP and port range specification in the
``alias port'' command.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.49 1999/06/09 16:55:26 brian Exp $
d3802 10
a3811 1
A 20 digit random number is used.
@


1.49
log
@Allow our endpoint discriminator to be enabled, disabled, accepted
and denied.  This is necessary for some MP implementations that
get confused if you accept their endpoint discriminator but reject
their MRRU.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.48 1999/06/08 11:58:46 brian Exp $
d2826 1
a2826 1
.No : Ns Ar port Ns
d2828 2
a2829 2
.No - Ns Ar port
.Oc Ar aliasport Ns
d2831 6
a2836 2
.No - Ns Ar aliasport Ns
.Oc
d2840 4
a2843 4
connections to port
.Ar aliasport
to be redirected to port
.Ar port
d2846 1
a2846 1
.Ar Proto
d2855 9
d2866 1
a2866 1
one interior machine per port are possible.
@


1.48
log
@Make the ``load'', ``dial'' and ``open'' commands a big clearer.
Requested by: Michael Heitmeier <MICHAEL_HEITMEIER@@HP-Germany-om12.om.hp.com>
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.47 1999/06/05 22:17:51 aaron Exp $
d2357 9
d3762 3
a3764 1
LCP negotiation,
@


1.47
log
@remove trailing whitespace, some Nm cleanup
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.46 1999/06/05 04:16:05 aaron Exp $
d277 1
a277 1
loads any systems specified on the command line then provides an
d299 3
a301 5
Additionally, one or more systems may be specified on the command line.
A
.Sq system
is a configuration entry in
.Pa /etc/ppp/ppp.conf .
d702 1
a702 1
PPP ON awfulhak> load MyISP
d705 19
d3025 8
a3032 8
.It dial|call Op Ar label
When used with no argument, this command is the same as the
.Dq open
command.  When one or more
.Ar label
is specified, a
.Dq load
will be done first.
d3155 1
a3155 1
.Ar label(s)
d3163 11
d3177 2
a3178 6
command.  Using
.Dq open
with no arguments is the same as using
.Dq dial
with no arguments, where all closed links are brought up (some auto
links may not come up based on the
d3180 1
a3180 1
command) using the current configuration.
d3184 2
a3185 2
while the LCP layer is already open, LCP will be renegotiated.  This
allows various LCP options to be changed, after which
@


1.46
log
@capitalize the acronym ID
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.45 1999/06/02 00:46:55 brian Exp $
d8 1
a8 1
.Nd Point to Point Protocol (a.k.a. user-ppp) 
d192 1
a192 1
By default, 
d293 1
a293 1
to act as a NAT or masquerading engine for all machines on an internal 
d373 1
a373 1
uses 
d513 1
a513 1
ppp ON awfulhak> 
d1346 1
a1346 1
Then, the 
d2595 1
a2595 1
and 
d3679 2
a3680 2
Chat: Expecting: 
Chat: Sending: 
d3691 1
a3691 1
Chat: Sending: 
d4511 1
a4511 1
.It Pa /var/spool/lock/LCK..* 
@


1.45
log
@Introduce the ``keep-session'' option.  Refer to the man
page for details.  This allows MP over non-tty devices where
the original ppp process must not exit (such as sshd-spawned
ppp sessions).
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.44 1999/06/01 08:46:43 brian Exp $
d194 1
a194 1
will not run if the invoking user id is not zero.  This may be overridden
d201 1
a201 1
switches to user id 0 in order to alter the system routing table, set up
d204 1
a204 1
as the user id that invoked
d208 1
a208 2
logging facility if you're interested in what exactly is done as user id
zero.
d1943 1
a1943 1
Log all function calls specifically made as user id 0.
d2052 1
a2052 1
.Dq authentication id .
d2714 1
a2714 1
User id 0 is immune to these commands.
d2720 1
a2720 1
By default, only user id 0 is allowed access to
d2916 1
a2916 1
This is replaced with the current process id.
d3306 1
a3306 1
which is encrypted with the challenge and request id, the answer being sent
d3316 1
a3316 1
This sets the authentication id used in client mode PAP or CHAP negotiation.
d4516 1
a4516 1
The process id (pid) of the
@


1.44
log
@Mention that using MYADDR and HISADDR with ``set filter''
will result in the rules being updated any time MYADDR
or HISADDR change.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.43 1999/05/23 16:48:39 aaron Exp $
d2476 35
d4573 1
@


1.43
log
@.Nm macros should have an argument in SYNOPSIS section
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.42 1999/05/23 14:11:35 aaron Exp $
d1432 16
@


1.42
log
@remove argument from .Os macros so value in /usr/share/tmac/mdoc/doc-common
is used instead; kwesterback@@home.com
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.41 1999/05/16 13:38:47 brian Exp $
d10 1
a10 1
.Nm
@


1.41
log
@Mention ``show layers''
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.40 1999/05/12 10:03:53 brian Exp $
d4 1
a4 1
.Os FreeBSD
@


1.40
log
@Allow ``host:port/udp'' devices and support ``host:port/tcp'' as
being the same as the previous (still supported) ``host:port''
syntax for tcp socket devices.

A udp device uses synchronous ppp rather than async, and avoids
the double-retransmit overhead that comes with ppp over tcp (it's
usually a bad idea to transport IP over a reliable transport that
itself is using an unreliable transport).  PPP over UDP provides
througput of ** 1.5Mb per second ** with all compression disabled,
maxing out a PPro/200 when running ppp twice, back-to-back.

This proves that PPPoE is plausable in userland....

This change adds a few more handler functions to struct device and
allows derivations of struct device (which may contain their own
data etc) to pass themselves through the unix domain socket for MP.
** At last **, struct physical has lost all the tty crud !

iov2physical() is now smart enough to restore the correct stack of
layers so that MP servers will work again.

The version number has bumped as our MP link transfer contents have
changed (they now may contain a `struct device').

Don't extract the protocol twice in MP mode (resulting in protocol
rejects for every MP packet).  This was broken with my original
layering changes.

Add ``Physical'' and ``Sync'' log levels for logging the relevent
raw packets and add protocol-tracking LogDEBUG stuff in various
LayerPush & LayerPull functions.

Assign our physical device name for incoming tcp connections by
calling getpeername().

Assign our physical device name for incoming udp connections from
the address retrieved by the first recvfrom().
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.39 1999/05/08 11:06:38 brian Exp $
d4366 2
@


1.39
log
@o Redesign the layering mechanism and make the aliasing code part of
  the layering.

  We now ``stack'' layers as soon as we open the device (when we figure
  out what we're dealing with).  A static set of `dispatch' routines are
  also declared for dealing with incoming packets after they've been
  `pulled' up through the stacked layers.

  Physical devices are now assigned handlers based on the device type
  when they're opened.  For the moment there are three device types;
  ttys, execs and tcps.

o Increment version number to 2.2
o Make an entry in [uw]tmp for non-tty -direct invocations (after
  pap/chap authentication).
o Make throughput counters quad_t's
o Account for the absolute number of mbuf malloc()s and free()s in
  ``show mem''.
o ``show modem'' becomes ``show physical''.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.38 1999/05/02 08:54:01 brian Exp $
d151 1
a151 1
.It Supports PPP over TCP capability.
d153 2
a154 1
.Em host Ns No : Ns Em port ,
d156 4
a159 2
will open a TCP connection for transporting data rather than using a
conventional serial device.
d1208 1
a1208 1
.Sh PPP OVER TCP (a.k.a Tunnelling)
d1212 1
a1212 1
use a TCP connection instead by specifying a host and port as the
d1215 1
a1215 1
.Dl set device ui-gate:6669
d1284 1
a1284 1
 set device ui-gate:ppp-in
d1314 1
d1322 8
d1937 4
d3527 2
a3528 2
.Dq host:port
pair is given,
d3534 3
a3536 2
Refer to the section on
.Em PPP OVER TCP
d3822 1
a3822 1
allocated (thus maintaining any existing tcp connections).
d4267 8
a4274 1
This sets the speed of the serial device.
@


1.38
log
@Mention ``show mp''.
Describe ACFComp correctly.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.37 1999/04/21 21:27:50 aaron Exp $
d43 2
a44 2
command which enables you to talk to your modem directly.  When your
modem is connected to the remote peer and it starts to talk
d493 1
a493 1
You can now see what your current modem settings look like:
d495 1
a495 1
ppp ON awfulhak> show modem
d514 1
a514 1
The term command can now be used to talk directly to your modem:
d593 1
a593 1
PPP ON awfulhak> show modem
d2530 1
a2530 1
.Dq modem
d2866 1
a2866 1
.It clear modem|ipcp Op current|overall|peak...
d2868 1
a2868 1
.Dq modem
d2872 1
a2872 1
.Dq modem
d2959 1
a2959 1
layer is terminated but the modem is not brought offline and the link
d3590 1
a3590 1
directed to the modem device (see the
d3753 1
a3753 1
This specifies the chat script that will be used to reset the modem
d4354 1
a4354 1
.It show modem
d4373 4
a4376 4
the modem.  Characters read from the modem are displayed on the
screen.  When a
.Nm
peer is detected on the other side of the modem,
@


1.37
log
@seperate -> separate, people really need to learn how to spell this word
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.36 1999/04/19 16:59:40 brian Exp $
d2201 9
a2209 2
Field Compression.  Non LCP packets usually have very similar address
and control fields - making them easily compressible.
d4356 2
@


1.36
log
@Escape stuff in the peers accmap as well as our own when async
encoding, and back out the negotiation strategy that didn't
quite have the right effect with some (bad?) ppp implementations.

Drop unexpected PAP/CHAP packets (if not in NETWORK or ESTABLISH
phase).

Make sure that we enter PHASE_ESTABLISH when we need to.

Detect HDLC frames correctly, not just when the whole header
is obtained by a single read().

Don't convert \r\n to \r\r\n in tty raw mode.

Use the correct macros for `', ``'', () and [].
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.35 1999/04/02 15:12:19 aaron Exp $
d3336 1
a3336 1
should be either a comma seperated list of allowable numbers or a
@


1.35
log
@all .Nm macros should have an argument in SYNOPSIS; also misc cleanup
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.34 1999/03/25 23:36:52 brian Exp $
d10 1
a10 1
.Nm ppp
d1607 1
a1607 1
This is all fine when each side has a pre-determined IP address.  However,
d3251 3
a3253 1
.It set autoload Ar max-duration max-load [min-duration min-load]
d3283 1
a3283 1
.It set callback [none|auth|cbcp|E.164 *|number[,number]...]...
d3288 15
a3302 6
mode, will accept) one of the given protocols.  In client mode, if a
request is NAK'd
.Nm
will request another, until no options remain at which point
.Nm
will terminate negotiations.  In server mode,
d3310 3
a3312 1
The options are as follows (in this order of preference):
d3326 4
a3329 1
.It E.164 *|number[,number]...
d3355 9
a3363 1
.It set cbcp Op *|number[,number]... Op delay Op retry
d3479 3
a3481 1
.It set device|line Ar value[,value...]
d3698 11
a3708 1
.It set filter dial|alive|in|out rule-no permit|deny Ar "[src_addr/width] [dst_addr/width] [proto [src [lt|eq|gt port]] [dst [lt|eq|gt port]] [estab] [syn] [finrst]]"
d3753 7
a3759 1
.It set ifaddr Ar [myaddr [hisaddr [netmask [triggeraddr]]]]
d3763 1
a3763 1
.Dl a.b.c.d/n
d3766 1
a3766 1
.Ar a.b.c.d
d3768 1
a3768 1
.Ar n
d3770 1
a3770 1
.Ar /n
d3772 1
a3772 1
.Ar /32
d3774 1
a3774 1
.Ar /0 .
d3791 1
a3791 1
.Ar 10.0.0.1
d3815 1
a3815 1
.Ar 0.0.0.0 .
d3841 15
a3855 5
.It "set ccpretry|ccpretries" Ar "[timeout [reqtries [trmtries]]]"
.It "set chapretry|chapretries" Ar "[timeout [reqtries]]"
.It "set ipcpretry|ipcpretries" Ar "[timeout [reqtries [trmtries]]]"
.It "set lcpretry|lcpretries" Ar "[timeout [reqtries [trmtries]]]"
.It "set papretry|papretries" Ar "[timeout [reqtries]]"
d3886 5
a3890 1
.It set log [local] [+|-] Ns Ar value...
d3982 5
a3986 1
.It set phone Ar telno[|telno]...[:telno[|telno]...]...
d3989 11
a3999 4
Multiple phone numbers may be given separated by a pipe (|) or
a colon (:).  Numbers after the pipe are only dialed if the dial or login
script for the previous number failed.  Numbers separated by a colon are
tried sequentially, irrespective of the reason the line was dropped.
d4008 3
a4010 1
.It set [proc]title Op Ar value
d4136 6
a4141 1
.It set redial Ar secs[+inc[-max]][.next] [attempts]
d4244 1
a4244 1
.It set stopped Ar [LCPseconds [CCPseconds]]
d4337 3
a4339 1
.It show [data]link
@


1.34
log
@Allow port ranges in ``alias port''.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.33 1999/03/19 09:00:03 brian Exp $
d10 1
a10 1
.Nm
@


1.33
log
@Do away with some literal text that is never switched
off - I *think* these were groff bugs.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.32 1999/03/19 01:42:23 brian Exp $
d2726 8
a2733 5
.It alias port Xo
.Op Ar proto
.Ar targetIP Ns No \&: Ns Ar targetPORT
.Op Ar aliasIP Ns No \&: Ns
.Ar aliasPORT
d2735 6
a2740 6
This command allows us to redirect connections arriving at
.Ar aliasPORT
for machine
.Ar aliasIP
to
.Ar targetPORT
a2742 2
.Ar AliasIP
defaults to the current interface address.
d2744 2
a2745 2
may be either
.Sq tcp
d2747 9
a2755 5
.Sq udp ,
and only connections of the given protocol
are matched.  This option is useful if you wish to run things like
Internet phone on the machines behind your gateway.
.It "alias pptp" Op Ar addr
@


1.32
log
@Replace hardcoded quoting with Sq or Dq.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.31 1999/03/18 21:54:23 brian Exp $
d819 1
a819 1
.No # pppctl 3000	(assuming tun0)
d1149 4
a1152 5
.Bd -literal -offset indent
.Ar name Ar key Xo
.Op Ar hisaddr Op Ar label Op Ar callback-number
.Xc
.Ed
@


1.31
log
@Use ``Sx'' when xref'ing sections.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.30 1999/03/18 21:53:09 brian Exp $
d250 3
a252 1
ignores the ``set device'' line and uses descriptor 0 as the link.
d573 1
a573 1
a peer connection.  If only some of the three Ps go uppercase, wait 'till
d639 4
a642 1
commands (usually ^Z followed by ``bg'').
d819 1
a819 1
# pppctl 3000	(assuming tun0 - see the ``set server'' description)
d1610 4
a1613 3
all IP addresses and the other side should obey the direction from it.
In order to allow more flexible behaviour, `ifaddr' variable allows the
user to specify IP address more loosely:
d1617 4
a1620 2
A number followed by a slash (/) represent the number of bits significant in
the IP address.  The above example signifies that:
d1765 1
a1765 1
command is logged specially (when using
d1767 3
a1769 2
logging) so that the actual password is not compromised
(it is logged as
d1771 1
a1771 3
), and the '\\P' is logged when
.Ar chat
logging is active rather than the actual password.
d1962 5
a1966 1
begins with a '+' or a '-' character, the current log levels are
d3178 2
a3179 1
'\\P' sequence, preventing the actual password from being logged.  If
d3181 2
d3665 3
a3667 1
will be `escaped' as they travel across the link.
@


1.30
log
@Remove all remaining [ and ] characters (and do things properly).
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.29 1999/03/17 00:25:43 brian Exp $
d433 1
a433 1
.Em PERMISSIONS
d640 1
a640 1
.Em PPP COMMAND LIST
d3686 3
a3688 1
section on PACKET FILTERING above for further details.
d3772 1
a3772 1
.Em AUTHENTICATING INCOMING CONNECTIONS
d4177 1
a4177 1
.Dq SETTING THE IDLE TIMER
@


1.29
log
@Remove all hardcoded [...] syntax.
With help from: Daniel C. Sobral <dcs@@newsguy.com>
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.28 1999/03/11 01:35:07 pjanzen Exp $
d838 3
a840 1
This behaviour can be changed with
d842 6
a847 1
.Dl set redial Ar secs[+inc[-max]][.next] Op Ar attempts
d849 1
a849 1
.Bl -tag -width XXXXXXXX -compact
d1143 1
a1143 1
containing up to four fields:
d1145 3
a1147 1
name key [hisaddr [label]]
d1154 1
a1154 1
specify the client as expected.  If
d1164 1
a1164 1
.Ar name No / Ar key
d1185 16
d1545 8
a1552 1
set ifaddr [src_addr [dst_addr [netmask [trigger_addr]]]]
d1647 5
a1651 1
set phone "111[|222]...[:333[|444]...]...
d3714 7
a3720 2
.Pp
.Dl a.b.c.d[-d.e.f.g][,h.i.j.k[-l,m,n,o]]...
@


1.28
log
@fix more comma splices that involve misuse of conjunctive adverbs
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.27 1999/03/08 01:40:23 brian Exp $
d19 2
a20 1
.Op Ar system ...
d450 1
a450 1
ppp ON awfulhak> set line /dev/cuaa0
d1345 2
a1346 1
.Op Ar src_addr Ns Op / Ns Ar width
d1348 3
a1350 4
[
.Ar proto
.Op src Op Ar cmp No Ar port
.Op dst Op Ar cmp No Ar port
d1354 1
a1354 1
]
d1736 1
a1736 1
.Dq set line
d1741 1
a1741 1
set line /dev/cuaa0
d2157 1
a2157 1
.It chap[05]
d2514 6
a2519 1
.It add[!] Ar dest[/nn] [mask] gateway
d2597 4
a2600 1
.It allow user[s] Ar logname...
d2619 4
a2622 1
.It allow mode[s] Ar modelist...
d2626 2
a2627 1
mode allowed to load the label under which this command is specified.
d2632 1
a2632 1
command overrides the previous, and the
d2658 1
a2658 1
.It alias enable [yes|no]
d2671 1
a2671 1
.It alias deny_incoming [yes|no]
d2676 1
a2676 1
.It alias log [yes|no]
d2680 6
a2685 1
.It alias port Op Ar proto targetIP:targetPORT [aliasIP:]aliasPORT
d2694 2
d2736 1
a2736 1
.It alias same_ports [yes|no]
d2741 1
a2741 1
.It alias use_sockets [yes|no]
d2745 1
a2745 1
.It alias unregistered_only [yes|no]
d2755 3
a2757 1
.It [!]bg Ar command
d2819 4
a2822 1
.It clone Ar name[,name]...
d2834 1
a2834 1
.It close Op lcp|ccp[!]
d2859 4
a2862 1
.It delete[!] Ar dest
d2915 11
a2925 1
.It iface add[!] Ar addr[[/bits| mask] peer]
d2963 5
a2967 1
.It iface delete[!]|rm[!] Ar addr
d2987 5
a2991 1
.It [data]link Ar name[,name...] command Op Ar args
d3010 3
a3012 1
.It load Op Ar label ...
d3075 1
a3075 1
.It quit|bye [all]
d3111 4
a3114 1
.It set[up] Ar var value
d3125 3
a3127 1
.It set authkey|key Ar value
@


1.27
log
@Add proxying & transparent proxying support (``alias proxy'').
Add PPTP packet aliasing (GRE fixed address) support (``alias pptp'').
Add a 0 to the front of the mode to signify octal.
Thanks to: Charles Mott <cmott@@srv.net> & Dru Nelson <dnelson@@redwoodsoft.com>
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.26 1999/03/07 11:55:26 brian Exp $
d1570 1
a1570 1
This is all fine when each side has a pre-determined IP address, however
@


1.26
log
@Correctly drop existing connections when reopening the diagnostic
socket.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.25 1999/03/04 17:42:26 brian Exp $
d187 1
a187 1
.Dv 4554 .
d2651 16
d2684 32
a2715 16
.It alias addr Op Ar addr_local addr_alias
This command allows data for
.Ar addr_alias
to be redirected to
.Ar addr_local .
It is useful if you own a small number of real IP numbers that
you wish to map to specific machines behind your gateway.
.It alias deny_incoming [yes|no]
If set to yes, this command will refuse all incoming connections
by dropping the packets in much the same way as a firewall would.
.It alias help|?
This command gives a summary of available alias commands.
.It alias log [yes|no]
This option causes various aliasing statistics and information to
be logged to the file
.Pa /var/log/alias.log .
d4276 1
d4282 1
a4293 1
.Xr radius.conf 5 ,
@


1.25
log
@Extend the ``set redial'' command to allow incremental
redial timeouts.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.24 1999/03/03 23:01:11 brian Exp $
d3984 3
a3986 3
to be the name or number of a TCP port.  You may specify the octal umask that
should be used with local domain sockets as a four character octal number
beginning with
@


1.24
log
@Correct some ntohl/htonl bogons in the netmask handling.
This was pretty harmless as netmasks on a POINTOPOINT
interface are pretty much ignored, but it looked funny.

Mention the configured netmask in ``show ipcp''.

Describe in more detail what a proxy arp entry is.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.23 1999/02/26 21:28:24 brian Exp $
a837 3
.Bd -literal -offset indent
set redial seconds|random[.nseconds|random] [dial_attempts]
.Ed
d839 4
a842 1
.Sq Seconds
d844 2
a845 2
to connect again. If the argument is
.Sq random ,
d847 18
a864 1
.Sq Nseconds
d868 3
a870 2
command).  The default is 3 seconds.  Again, if the argument is
.Sq random ,
d872 3
a874 3
.Sq dial_attempts
is the number of times to try to connect for each outgoing packet
that is received. The previous value is unchanged if this parameter
d876 1
a876 1
.Sq dial_attempts ,
d879 3
d886 2
a887 2
will attempt to connect 4 times for each outgoing packet that is
detected with a 3 second delay between each number and a 10 second
d891 18
d911 3
a913 2
in demand
dial mode on both ends of the link. If each end has the same timeout,
d1609 4
a1612 1
dialing and redialing separated by either a pipe (|) or a colon (:)
d3919 1
a3919 1
.It set redial Ar seconds[.nseconds] [attempts]
d3926 1
a3926 1
.Ar nseconds
d3928 3
a3930 3
.Ar seconds
is taken before starting at the first number again.  A value of
.Ar random
d3932 1
a3932 1
.Ar seconds
d3934 1
a3934 1
.Ar nseconds ,
d3937 17
a3953 1
Note, this delay will be effective, even after
@


1.23
log
@Allow control over the number of ConfigREQ & TermREQ attempts
that are made in each of the FSMs (LCP, CCP & IPCP) and the
number of REQs/Challenges for PAP/CHAP by accepting more arguments
in the ``set {c,ip,l}cpretry'' and ``set {ch,p}apretry'' commands.

Change the non-convergence thresholds to 3 times the number of configured
REQ tries (rather than the previous fixed ``10'').  We now notice
repeated NAKs and REJs rather than just REQs.

Don't suggest that CHAP 0x05 isn't supported when it's not configured.

Fix some bugs that expose themselves with smaller numbers of retries:
o Handle instantaneous disconnects (set device /dev/null) correctly
  by stopping all fsm timers in fsm2initial.
o Don't forget to uu_unlock() devices that are files but are not
  ttys (set device /dev/zero).

Fix a *HORRENDOUS* bug in RFC1661 (already fixed for an Open event in state
``Closed''):
  According to the state transition table, a RCR+ or RCR- received in
  the ``Stopped'' state are supposed to InitRestartCounter, SendConfigReq
  and SendConfig{Ack,Nak}.  However, in ``Stopped'', we haven't yet
  done a TLS (or the last thing we did is a TLF).  We must therefore
  do the TLS at this point !

  This was never noticed before because LCP and CCP used not use
  LayerStart() for anything interesting, and IPCP tends to go into
  Stopped then get a Down because of an LCP RTR rather than getting a
  RCR again.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.22 1999/02/25 12:07:23 brian Exp $
a129 1
When
d131 2
a132 2
is set up as server, it can be configured to make one or more proxy arp
entries on behalf of the client.  This allows routing to the LAN without
d2378 11
a2388 1
to proxy ARP for the peer.
d2394 8
@


1.22
log
@When our dial timeout is ``random'', display its value
correctly by invoking the timer to get the value before
displaying the message.
Don't assume that a value of 0 is ``random'' in
``show datalink''.
Make the random value between 1 and DIAL_TIMEOUT rather
than between 0 and DIAL_TIMEOUT-1
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.21 1999/02/18 00:50:45 brian Exp $
d3591 5
a3595 5
.It set ccpretry Ar period
.It set chapretry Ar period
.It set ipcpretry Ar period
.It set lcpretry Ar period
.It set papretry Ar period
d3600 1
a3600 1
.Ar period
d3602 24
@


1.21
log
@Fully support both NT and LANMan CHAP type 0x80 as both
authenticator and authenticatee.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.20 1999/02/16 00:18:03 brian Exp $
d847 1
a847 1
the delay period is a random value between 0 and 30 seconds.
d854 1
a854 1
the delay period is a random value between 0 and 30 seconds.
d3829 1
a3829 1
will result in a variable pause, somewhere between 0 and 30 seconds.
d3851 1
a3851 1
causing a random delay of between 0 and 30 seconds.
@


1.20
log
@Wait by default for one second after the login script
is complete before checking carrier.  If it's there,
the device supports carrier.  If it's not it doesn't.

Add the ``set cd'' command for deciding how soon to check
for carrier, and for deciding if carrier is REQUIRED.

The default has changed:  Pre 2.0 versions of ppp waited
for 1 second.  Version 2 didn't wait, but this causes
problems with some (few?) modems that don't assert carrier
immediately on reporting CONNECT.  The one second delay
is back now and can be removed with ``set cd 0''.

Bump the ppp version number in case this needs to be changed
again....
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.19 1999/02/14 00:52:52 brian Exp $
d2114 1
a2114 1
.It chap
d2213 12
d2253 33
d2301 3
a2303 1
option below).
@


1.19
log
@Describe manual dialing in greater detail.
Mention more rfc numbers.
Don't ``.Nm Ppp'' (just use ``.Nm'').
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.18 1999/02/12 00:53:08 brian Exp $
d3120 31
@


1.18
log
@When executing a command as part of a dial/login/hangup
script, expand words in the same way as !bg does.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.17 1999/02/11 10:14:50 brian Exp $
d34 1
a34 1
.It Provides interactive user interface.
d70 1
a70 1
.Nm Ppp
d79 1
a79 1
.Nm Ppp
d102 1
a102 1
.It Supports PAP and CHAP authentication.
d112 1
a112 1
.It Supports RADIUS authentication.
d157 1
a157 1
.It Supports IETF draft Predictor-1 and DEFLATE compression.
d175 1
a175 1
.It Supports Multi-link PPP
d182 1
a182 1
.Nm Ppp
d212 1
a212 1
.Nm Ppp
d249 1
a249 1
.Nm Ppp
d260 1
a260 1
.Nm Ppp
d272 1
a272 1
.Nm Ppp
d300 1
a300 1
.Nm Ppp
d316 1
a316 1
.Nm Ppp Ns No 's
d368 1
a368 1
.Nm Ppp
d448 1
a448 9
You can start by specifying the device name, speed and parity for your modem,
and whether CTS/RTS signalling should be used (CTS/RTS is used by
default).  If your hardware does not provide CTS/RTS lines (as
may happen when you are connected directly to certain PPP-capable
terminal servers),
.Nm
will never send any output through the port; it waits for a signal
which never comes.  Thus, if you have a direct line and can't seem
to make a connection, try turning CTS/RTS off:
d452 36
d489 4
a492 1
ppp ON awfulhak> set ctsrts on
d494 16
a509 2
* Modem related information is shown here *
ppp ON awfulhak>
d512 1
a512 1
The term command can now be used to talk directly with your modem:
d519 2
a520 2
login: ppp
Password:
d535 2
a536 6
If it does not, it's possible that the peer is waiting for your end to
start negotiating or that
.Nm ppp
can't identify the incoming packets as being
.Em PPP
packets, perhaps due to your parity settings.  To force
d542 25
a566 1
command to enter packet mode.
d575 1
a575 2
couldn't successfully negotiate with the peer.  This is probably because
your PAP or CHAP authentication name or key is incorrect.  A good first step
d577 5
a581 2
.Dq set log local phase .
Refer to the
d583 4
a586 1
command description below for further details.
d627 5
d633 6
a638 1
in other windows on your machine.
d747 1
a747 1
.Nm Ppp
d1429 1
a1429 1
.Nm Ppp
d1802 1
a1802 1
.Nm Ppp
d1899 1
a1899 1
.Nm Ppp
d2159 1
a2159 1
.Nm Pppd
d2174 1
a2174 1
.Nm Ppp
d3135 1
a3135 1
.Nm Ppp
d3394 1
a3394 1
.Nm Ppp
d3758 1
a3758 1
.Nm Ppp
d3995 1
a3995 1
.Nm Ppp
@


1.17
log
@When resending chap challenges, resend the same challenge
each time rather than making up a new one.

Increase the authname/authkey max sizes to 100 characters.

Allow ``authkey'' specifications beginning with ``!''.
When a challenge is received, the text following the
``!'' is executed as a program (expanding stuff in the same
way that ``sh'' and ``!bg'' do).  The program is passed the
peer name, peer challenge and local ``authname'' on standard
input and is expected to output the name/key combination that
should be used to build the CHAP response.

This provides support for Secure ID cards (guess what I was
given at work recently!) using CHAP.

Examples will follow.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.16 1999/02/06 03:22:42 brian Exp $
d3265 5
@


1.16
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.144 1999/01/28 22:55:08 billf Exp $
d2857 3
a2859 3
PAP or CHAP negotiation to the given value.  It can also be used to
specify the password to be used in the dial or login scripts in place
of the '\\P' sequence, preventing the actual password from being logged.  If
d2866 50
d2921 1
a2921 1
mode with PAP or CHAP enabled,
d2923 1
a2923 1
is used in the initial authentication request and is normally set to
@


1.15
log
@Change the timer routines so that they interrupt when the next
item is scheduled rather than interrupting 10 times per second
and finding that there's nothing to do most of the time.
This change reduces interrupt overheads but will expose any
(previously small) latency problems.

Be more careful about building VJ compression requests - we
can't htonl/ntohl the entire four bytes !  Also, when we get
a NAK, try to get as close as possible to what the peer NAKs
with when sending our next REQ.  Similarily when we send a NAK,
pick values as close as possible to what the peer REQd.

Fix a couple of man page typos (compliments of billf@@FreeBSD.org)
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.14 1999/01/19 22:21:43 brian Exp $
d112 17
d131 4
a134 3
.Em PPP
is set up as server, you can also configure it to do proxy arp for your
connection.
a380 4
Make sure you use actual TABs here.  If you use spaces, the line will be
silently ignored by
.Xr syslogd 8 .
.Pp
d3515 89
d3947 1
@


1.14
log
@Change the maximum number of filters from 20 to 40.
Increase requested by: "Clement T. Cole" <clemc@@echo.ccc.com>
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.13 1999/01/19 22:20:46 brian Exp $
d10 1
a10 1
.Nm ppp
d1302 1
a1302 1
.Pa /etc/ppp/ppp.conf.example .
@


1.13
log
@Suggest that ``set proctitle'' is used in ppp.linkup when
USER is expected to be expanded.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.12 1999/01/11 15:08:09 brian Exp $
d1289 1
a1289 1
Each filter can hold up to 20 rules, starting from rule 0.
d3266 1
a3266 1
Up to 20 rules may be given for each set.  If a packet doesn't match
@


1.12
log
@Correct some formatting errors (one is a groff bug)
Noted & partially submitted by: Peter Jeremy <peter.jeremy@@auss2.alcatel.com.au>
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.11 1999/01/06 00:10:30 brian Exp $
d3493 8
@


1.11
log
@Typo:  The idle timer is ignored in -ddial and -dedicated
       mode, not in -ddial and -direct.
Pointed out by: Chris Timmons <skynyrd@@opus.cts.cwu.edu>
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.10 1998/12/16 00:49:17 brian Exp $
d3 1
d612 1
a612 1
...
d1712 51
a1762 25
.Bl -column SMMMMMM -offset indent
.It Li Async	Dump async level packet in hex
.It Li CBCP 	Generate CBCP (CallBack Control Protocol) logs
.It Li CCP	Generate a CCP packet trace
.It Li Chat	Generate Chat script trace log
.It Li Command	Log commands executed
.It Li Connect	Log Chat lines containing "CONNECT"
.It Li Debug	Log debug information
.It Li HDLC	Dump HDLC packet in hex
.It Li ID0	Log all function calls specifically made 
as user id 0.
.It Li IPCP	Generate an IPCP packet trace
.It Li LCP	Generate an LCP packet trace
.It Li LQM	Generate LQR report
.It Li Phase	Phase transition log output
.It Li TCP/IP	Dump all TCP/IP packets
.It Li Timer	Log timer manipulation
.It Li TUN	Include the tun device on each log line
.It Li Warning	Output to the terminal device.  
If there is currently no
terminal, output is sent to the log file using LOG_WARNING.
.It Li Error	Output to both the terminal device 
and the log file using
LOG_ERROR.
.It Li Alert	Output to the log file using LOG_ALERT
@


1.10
log
@Typo police
Submitted by: Bill Fumerola <billf@@FreeBSD.org>
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.9 1998/12/15 01:20:48 aaron Exp $
d1323 1
a1323 1
.Fl direct
@


1.9
log
@always give .Nm macros an argument in SYNOPSIS sections; krw@@tcn.net
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.8 1998/11/08 13:06:26 brian Exp $
d97 1
a97 1
.nm
d342 1
a342 1
manual page for details.  Each of these uses must also be given access
d1720 2
a1721 1
.It Li ID0	Log all function calls specifically made as user id 0.
d1729 2
a1730 1
.It Li Warning	Output to the terminal device.  If there is currently no
d1732 2
a1733 1
.It Li Error	Output to both the terminal device and the log file using
d2775 2
a2776 2
.Ar
all argument is given,
@


1.8
log
@Explain what the command line switches do and what the
various prompts signify.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.7 1998/11/08 13:05:48 brian Exp $
d9 1
a9 1
.Nm
@


1.7
log
@Fix a few typos
Submitted by: Forgotten (sorry)
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.6 1998/11/05 22:00:11 brian Exp $
d189 116
d469 4
a472 4
ppp ON awfulhak>
Ppp ON awfulhak>
PPp ON awfulhak>
PPP ON awfulhak>
d476 5
a480 1
start negotiating.  To force
d482 3
a484 1
to start sending PPP configuration packets to the peer, use the
@


1.6
log
@Don't delete the primary interface address when
``iface clean'' is used in auto mode while there
are no active links.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.5 1998/10/31 17:38:50 brian Exp $
d1548 1
a1548 1
his is no longer required.
d1595 1
a1595 1
.It Li Connect	Generate complete Chat log
@


1.5
log
@Allow multiple systems (config labels) on the command
line and in the ``load'' & ``dial'' commands.  The last
label loaded becomes the current label name.
Only require a label for -auto mode.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.4 1998/10/29 02:21:46 brian Exp $
d2531 4
a2534 2
is in the OPENED state, all addresses except for the IPCP negotiated
address are deleted from the interface.  If
d2536 3
a2538 1
is not in the OPENED state, all interface addresses are deleted.
@


1.4
log
@Catch up with the latest ppp updates/fixes:

- Add enable/disable proxyall to proxy arp an entire subnet
  (smaller than class C)
- Add ``set {send,recv}pipe for controlling socket buffers.
- Fix the infamous ``first connection'' problem where the process
  that causes an auto dial to an ISP that assigns a dynamic IP never
  connects (due to the bound socket IP being changed on the tun iface).
  See ``enable/disable iface-alias'' and ``iface ...'' in the man page.
- Add PROCESSID as a substitution string when running commands.
- Add ``set proctitle'' for changing argv0.  You can use all the command
  substitutions here too (eg ``set proctitle ppp: USER INTERFACE'').
- Add a missing untimeout as soon as the chat expect string is received
  rather than waiting for the next expect to happen.
- Be less restrictive about when auth{name,key}, enddisc, shortseq and
  mrru can be changed.
- Improve some diagnostics.
- Don't send a DELAY field with CBCP_NONUM messages (as per the spec).
- Emphasise how to make callback optional in the man page.
- Allow the caller to request no callback if they're allowed choose the
  number anyway.
- Set our CBCP RESPONSE fsm id according to the REQ, moan if the peer
  gets the response id wrong (but continue anyway).
- Shuffle the ``set ?'' output back a column so that broken terminals
  that can't display 80 columns *and* a '\n' will look ok.
- If DES is compiled out, be more verbose about why CHAP 0x80 was rejected.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.132 1998/10/27 22:53:22 brian Exp $
d18 1
a18 1
.Op Ar system
d2474 1
a2474 1
command.  When
d2575 1
a2575 1
.It load Op Ar label
d2577 1
a2577 1
.Ar label
@


1.3
log
@Order SEE ALSO correctly.
Pointed out by: bde@@FreeBSD.org
Patched correctly by: wosch@@FreeBSD.org
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.2 1998/09/17 00:46:42 brian Exp $
d411 4
a414 7
represents the IP address of the connected peer.  It is possible to
use the keyword
.Sq INTERFACE
in place of
.Sq HISADDR .
This will create a direct route on the tun interface.
If it fails due to an existing route, you can overwrite the existing
d514 3
a516 4
which runs a script in the background after the connection is established.
The literal strings
.Dv HISADDR ,
.Dv MYADDR
d518 3
a520 4
.Dv INTERFACE
may be used, and will be replaced with the relevant IP addresses and interface
name.  Similarly, when a connection is closed, the
contents of the
d522 1
a522 2
file are executed.
Both of these files have the same format as
d2087 5
d2136 22
d2186 1
a2186 1
as the destination, and either
a2187 2
or
.Sq INTERFACE
d2191 1
a2191 1
is replaced with the interface address,
d2193 1
a2193 9
is replaced with the interface destination address and
.Sq INTERFACE
is replaced with the current interface name.  If the interfaces destination
address has not yet been assigned
.Pq via Dq set ifaddr ,
the current
.Sq INTERFACE
is used instead of
.Sq HISADDR .
d2384 2
d2392 4
d2496 60
d2739 3
a2741 2
.Ar direct
mode, will accept) one of the given protocols.  If a request is NAK'd
d2745 8
a2752 1
will terminate negotiations.
d2790 1
a2790 1
the connection.
d3248 10
d3326 11
d3350 5
d3383 5
d3528 3
a3574 1
.Dq show ? ,
d3576 1
d3579 1
a3579 1
.Dq set ? <var>
@


1.2
log
@Alphabeticalize SEE ALSO section.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.1 1998/08/31 00:22:26 brian Exp $
a3537 1
.Xr adduser 8 ,
a3538 2
.Xr chat 8 ,
.Xr crontab 5 ,
a3539 2
.Xr getty 8 ,
.Xr group 5 ,
d3542 13
a3556 1
.Xr login 1 ,
a3557 1
.Xr passwd 5 ,
a3560 1
.Xr resolv.conf 5 ,
a3561 2
.Xr syslog 3 ,
.Xr syslog.conf 5 ,
a3562 2
.Xr tcpdump 1 ,
.Xr telnet 1 ,
a3563 1
.Xr uucplock 3 ,
@


1.1
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@d1 1
a1 1
.\" $Id: ppp.8,v 1.123 1998/08/29 23:02:45 brian Exp $
d3555 1
a3556 1
.Xr resolv.conf 5 ,
@

