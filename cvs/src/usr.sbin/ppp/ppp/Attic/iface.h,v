head	1.10;
access;
symbols
	OPENBSD_5_5:1.9.0.22
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.18
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.16
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.14
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.12
	OPENBSD_5_0:1.9.0.10
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.8
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.6
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.4
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.8.0.32
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.30
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.28
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.26
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.24
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.22
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.20
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.18
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.16
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.14
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.12
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.10
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.8
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.6
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.9;

1.9
date	2009.07.02.16.08.29;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.19.23.22.17;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.19.10.24.54;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.28.09.52.56;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.27.01.38.26;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.27.00.21.08;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	99.05.27.08.44.48;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.02.06.03.22.37;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.10.29.02.21.45;	author brian;	state Exp;
branches;
next	;


desc
@@


1.10
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1998 Brian Somers <brian@@Awfulhak.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$OpenBSD: iface.h,v 1.9 2009/07/02 16:08:29 claudio Exp $
 */

struct ifa_msghdr;

struct iface_addr {
  unsigned system : 1;		/* System alias ? */
  struct ncprange ifa;		/* local address/mask */
  struct ncpaddr peer;		/* peer address */
};

struct iface {
  char *name;			/* Interface name (malloc'd) */
  int index;			/* Interface index */
  int flags;			/* Interface flags (IFF_*) */
  int mtu;			/* struct tuninfo MTU */

  int addrs;			/* How many in_addr's */
  struct iface_addr *addr;	/* Array of addresses (malloc'd) */
};

#define IFACE_CLEAR_ALL		0	/* Nuke 'em all */
#define IFACE_CLEAR_ALIASES	1	/* Leave the NCP address */

#define IFACE_ADD_LAST		0	/* Just another alias */
#define IFACE_ADD_FIRST		1	/* The IPCP address */
#define IFACE_FORCE_ADD		2	/* OR'd with IFACE_ADD_{FIRST,LAST} */

#define IFACE_SYSTEM		4	/* Set/clear SYSTEM entries */

extern struct iface *iface_Create(const char *name);
extern void iface_Clear(struct iface *, struct ncp *, int, int);
extern int iface_Add(struct iface *, struct ncp *, const struct ncprange *,
                     const struct ncpaddr *, int);
extern int iface_Delete(struct iface *, struct ncp *, const struct ncpaddr *);
extern int iface_Show(struct cmdargs const *);
extern int iface_SetFlags(const char *, int);
extern int iface_ClearFlags(const char *, int);
extern void iface_Destroy(struct iface *);
@


1.9
log
@Rewrite the sysctl handlers to use libc functions (getifaddrs and
if_indextoname) instead of looking at the sysctl data directly. This makes
the code a lot simpler and actually work. Tested by many (todd@@, sthen@@, and
a few people on tech@@). OK sthen@@, deraadt@@
@
text
@d26 1
a26 1
 *	$OpenBSD: iface.h,v 1.8 2001/08/19 23:22:17 brian Exp $
@


1.8
log
@Add IPv6 support.

IPV6CP support is crude for now, and hasn't been tested against
any other implementations.  RADIUS and IPv6 are independent of
eachother for now.  ppp.linkup/ppp.linkdown aren't currently used
by IPV6CP

Understand all protocols(5) in filter rules rather than only a select
few.

Allow a mask specification for the ``delete'' command.  It's now
possible to specifically delete one of two conflicting routes.

When creating and deleting proxy arp entries, do it for all IPv4
interface addresses rather than doing it just for the ``current''
peer address.

When iface-alias isn't in effect, don't blow away manually (via ``iface
add'') added interface addresses.

When listening on a tcp server (diagnostic) socket, bind so that a
tcp46 socket is created -- allowing both IPv4 and IPv6 connections.

When displaying ICMP traffic, don't display the icmp type twice.

When display traffic, display at least some information about unrecognised
traffic.

Bump version
@
text
@d26 1
a26 1
 *	$OpenBSD: iface.h,v 1.7 2001/06/19 10:24:54 brian Exp $
a64 1
extern void iface_ParseHdr(struct ifa_msghdr *, struct sockaddr *[RTAX_MAX]);
@


1.7
log
@Handle hardware-imposed MTU/MRU limitations.

Add an optional ``max'' specifier to ``set m[rt]u'', ie.
``set mtu max 1492'' for PPPoE.

Bump the ppp version number.

Add support for stateful MPPE (microsoft encryption) providing
encryption compatibility with Windows 2000.  Stateful encryption
uses less CPU but is bad on lossy transports.

The ``set mppe'' command has been expanded.  If it's used with any
arguments, ppp will insist on encryption, closing LCP if the other
end refuses.

Sponsored by:	Monzoon Networks AG and FreeBSD Services Limited
@
text
@d26 1
a26 1
 *	$OpenBSD: iface.h,v 1.6 2001/03/28 09:52:56 brian Exp $
d32 3
a34 4
  struct in_addr ifa;		/* local address */
  struct in_addr mask;		/* netmask */
  int bits;			/* netmask bits - -1 if not contiguous */
  struct in_addr brd;		/* peer address */
d43 2
a44 2
  int in_addrs;			/* How many in_addr's */
  struct iface_addr *in_addr;	/* Array of addresses (malloc'd) */
d48 1
a48 1
#define IFACE_CLEAR_ALIASES	1	/* Leave the IPCP address */
d54 1
a54 1
#define iface_Clear iface_inClear	/* Same for now */
d57 4
a60 4
extern void iface_inClear(struct iface *, int);
extern int iface_inAdd(struct iface *, struct in_addr, struct in_addr,
                     struct in_addr, int);
extern int iface_inDelete(struct iface *, struct in_addr);
@


1.6
log
@Bring the netgraph PPPoE interface UP if required (only applies to FreeBSD)
@
text
@d26 1
a26 1
 *	$OpenBSD: iface.h,v 1.5 2000/02/27 01:38:26 brian Exp $
d42 1
@


1.5
log
@$Id$ -> $OpenBSD$
@
text
@d26 1
a26 1
 *	$OpenBSD: iface.h,v 1.4 2000/02/27 00:21:08 brian Exp $
d62 2
a63 2
extern int iface_SetFlags(struct iface *, int);
extern int iface_ClearFlags(struct iface *, int);
@


1.4
log
@When we stop a timer that's the first in the timer list, ensure
that we adjust that timers `rest' value (with the current getitimer()
values) before using that to adjust the next items `rest' value.
After adjusting that value, restart the timer service so that we've
now got the correct setitimer() values.
When adjusting timer::rest, round to the closest TICKUNIT usecs
value.

struct descriptor -> struct fdescriptor (to avoid header polution in
NetBSD).

Introduce LOCALNAT and LOCALRAD defines.

The interface list that comes back from the PF_ROUTE/NET_RT_IFLIST mib
is aligned.  Teach this to ``show route'' and clean up some of the
sockaddr parsing routines.

Add ``set log dns'' to log DNS QUERY packets.

When ppp can't identify the relevant name, don't use "???", use
<nnn> or <0xnnn> instead.

Don't ``break'' when we come accross a non-RTM_IFINFO type
entry in the block returned by the NET_RT_IFLIST mib,
continue instead.

Correct UN_SIZE definition; ben@@scientia.demon.co.uk
@
text
@d26 1
a26 1
 *	$Id: iface.h,v 1.3 1999/05/27 08:44:48 brian Exp $
@


1.3
log
@Move the code for tweaking interface flags into one function.
@
text
@d26 1
a26 1
 *	$Id: iface.h,v 1.2 1999/02/06 03:22:37 brian Exp $
d29 2
d65 1
@


1.2
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d26 1
a26 1
 *	$Id: iface.h,v 1.1 1998/10/22 02:32:49 brian Exp $
d60 2
@


1.1
log
@Catch up with the latest ppp updates/fixes:

- Add enable/disable proxyall to proxy arp an entire subnet
  (smaller than class C)
- Add ``set {send,recv}pipe for controlling socket buffers.
- Fix the infamous ``first connection'' problem where the process
  that causes an auto dial to an ISP that assigns a dynamic IP never
  connects (due to the bound socket IP being changed on the tun iface).
  See ``enable/disable iface-alias'' and ``iface ...'' in the man page.
- Add PROCESSID as a substitution string when running commands.
- Add ``set proctitle'' for changing argv0.  You can use all the command
  substitutions here too (eg ``set proctitle ppp: USER INTERFACE'').
- Add a missing untimeout as soon as the chat expect string is received
  rather than waiting for the next expect to happen.
- Be less restrictive about when auth{name,key}, enddisc, shortseq and
  mrru can be changed.
- Improve some diagnostics.
- Don't send a DELAY field with CBCP_NONUM messages (as per the spec).
- Emphasise how to make callback optional in the man page.
- Allow the caller to request no callback if they're allowed choose the
  number anyway.
- Set our CBCP RESPONSE fsm id according to the REQ, moan if the peer
  gets the response id wrong (but continue anyway).
- Shuffle the ``set ?'' output back a column so that broken terminals
  that can't display 80 columns *and* a '\n' will look ok.
- If DES is compiled out, be more verbose about why CHAP 0x80 was rejected.
@
text
@@

