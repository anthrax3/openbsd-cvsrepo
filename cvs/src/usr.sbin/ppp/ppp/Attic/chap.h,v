head	1.14;
access;
symbols
	OPENBSD_5_5:1.13.0.50
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.46
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.44
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.42
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.40
	OPENBSD_5_0:1.13.0.38
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.36
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.34
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.30
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.32
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.28
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.26
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.24
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.22
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.20
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.18
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.16
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.14
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.12
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.10
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.8
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.6
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.13.0.4
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_8:1.9.0.4
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.14
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.13;

1.13
date	2002.06.17.01.14.08;	author brian;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.31.02.38.49;	author brian;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.13.21.33.40;	author brian;	state Exp;
branches;
next	1.10;

1.10
date	2000.11.02.00.54.33;	author brian;	state Exp;
branches;
next	1.9;

1.9
date	2000.02.27.01.38.25;	author brian;	state Exp;
branches;
next	1.8;

1.8
date	2000.02.27.00.21.06;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	99.05.08.11.06.34;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	99.04.21.08.07.24;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	99.02.18.19.46.19;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	99.02.18.00.50.45;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	99.02.11.10.14.49;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.02.06.03.22.32;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.00.22.17;	author brian;	state Exp;
branches;
next	;


desc
@@


1.14
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/*-
 * Copyright (c) 1996 - 2001 Brian Somers <brian@@Awfulhak.org>
 *          based on work by Toshiharu OHNO <tony-o@@iij.ad.jp>
 *                           Internet Initiative Japan, Inc (IIJ)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $OpenBSD: chap.h,v 1.13 2002/06/17 01:14:08 brian Exp $
 */

struct mbuf;
struct physical;

#define	CHAP_CHALLENGE	1
#define	CHAP_RESPONSE	2
#define	CHAP_SUCCESS	3
#define	CHAP_FAILURE	4

struct chap {
  struct fdescriptor desc;
  struct {
    pid_t pid;
    int fd;
    struct {
      char ptr[AUTHLEN * 2 + 3];	/* Allow for \r\n at the end (- NUL) */
      int len;
    } buf;
  } child;
  struct authinfo auth;
  struct {
    u_char local[CHAPCHALLENGELEN + AUTHLEN];	/* I invented this one */
    u_char peer[CHAPCHALLENGELEN + AUTHLEN];	/* Peer gave us this one */
  } challenge;
#ifndef NODES
  unsigned NTRespSent : 1;		/* Our last response */
  int peertries;
  u_char authresponse[CHAPAUTHRESPONSELEN];	/* CHAP 81 response */
#endif
};

#define descriptor2chap(d) \
  ((d)->type == CHAP_DESCRIPTOR ? (struct chap *)(d) : NULL)
#define auth2chap(a) \
  ((struct chap *)((char *)a - (int)&((struct chap *)0)->auth))

struct MSCHAPv2_resp {		/* rfc2759 */
  char PeerChallenge[16];
  char Reserved[8];
  char NTResponse[24];
  char Flags;
};

extern void chap_Init(struct chap *, struct physical *);
extern void chap_ReInit(struct chap *);
extern struct mbuf *chap_Input(struct bundle *, struct link *, struct mbuf *);
@


1.13
log
@Compensate for dodgy Win98/WinME MSCHAPv2 responses later in the code
path... after we've talked to any RADIUS servers involved, so that we
haven't touched the data before it gets to the server.
@
text
@d28 1
a28 1
 * $OpenBSD: chap.h,v 1.12 2002/03/31 02:38:49 brian Exp $
@


1.12
log
@Change ``ifdef HAVE_DES'' to ``ifndef NODES'' for consistency.
Notice if the IP header length changes when doing transparent proxying; FreeBSD
Handle domain\\user entries in ppp.secret
Add some mp_Down() calls to ensure that our multi-link NCP goes away properly
Miscellaneous #ifdef'd out FreeBSD changes (mostly netgraph stuff).
@
text
@d28 1
a28 1
 * $OpenBSD: chap.h,v 1.11 2001/06/13 21:33:40 brian Exp $
d65 7
@


1.11
log
@Convert IIJ copyrights to BSD copyrights; ok tohno@@sirius.ocn.ne.jp
@
text
@d28 1
a28 1
 * $OpenBSD$
d54 1
a54 1
#ifdef HAVE_DES
@


1.10
log
@Some whitespace changes
Some slightly better diagnostics
Add MPPE and chapv2 support; Ustimenko Semen <semen@@iclub.nsu.ru>
Bump the version number
Add ``all'' logging; perhaps@@yes.no
Handle quoted hash characters properly
Honour ``nat deny_incoming'' properly
Fix radius accounting initialisation
Moan about tcsetattr() failures
@
text
@d1 5
a5 2
/*
 *	    Written by Toshiharu OHNO (tony-o@@iij.ad.jp)
d7 8
a14 1
 *   Copyright (C) 1993, Internet Initiative Japan, Inc. All rights reserverd.
d16 11
a26 11
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the Internet Initiative Japan.  The name of the
 * IIJ may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
d28 1
a28 3
 * $OpenBSD: chap.h,v 1.9 2000/02/27 01:38:25 brian Exp $
 *
 *	TODO:
@


1.9
log
@$Id$ -> $OpenBSD$
@
text
@d18 1
a18 1
 * $OpenBSD: chap.h,v 1.8 2000/02/27 00:21:06 brian Exp $
d49 1
d55 2
a56 1
#define auth2chap(a) (struct chap *)((char *)a - (int)&((struct chap *)0)->auth)
@


1.8
log
@When we stop a timer that's the first in the timer list, ensure
that we adjust that timers `rest' value (with the current getitimer()
values) before using that to adjust the next items `rest' value.
After adjusting that value, restart the timer service so that we've
now got the correct setitimer() values.
When adjusting timer::rest, round to the closest TICKUNIT usecs
value.

struct descriptor -> struct fdescriptor (to avoid header polution in
NetBSD).

Introduce LOCALNAT and LOCALRAD defines.

The interface list that comes back from the PF_ROUTE/NET_RT_IFLIST mib
is aligned.  Teach this to ``show route'' and clean up some of the
sockaddr parsing routines.

Add ``set log dns'' to log DNS QUERY packets.

When ppp can't identify the relevant name, don't use "???", use
<nnn> or <0xnnn> instead.

Don't ``break'' when we come accross a non-RTM_IFINFO type
entry in the block returned by the NET_RT_IFLIST mib,
continue instead.

Correct UN_SIZE definition; ben@@scientia.demon.co.uk
@
text
@d18 1
a18 1
 * $Id: chap.h,v 1.7 1999/05/08 11:06:34 brian Exp $
@


1.7
log
@o Redesign the layering mechanism and make the aliasing code part of
  the layering.

  We now ``stack'' layers as soon as we open the device (when we figure
  out what we're dealing with).  A static set of `dispatch' routines are
  also declared for dealing with incoming packets after they've been
  `pulled' up through the stacked layers.

  Physical devices are now assigned handlers based on the device type
  when they're opened.  For the moment there are three device types;
  ttys, execs and tcps.

o Increment version number to 2.2
o Make an entry in [uw]tmp for non-tty -direct invocations (after
  pap/chap authentication).
o Make throughput counters quad_t's
o Account for the absolute number of mbuf malloc()s and free()s in
  ``show mem''.
o ``show modem'' becomes ``show physical''.
@
text
@d18 1
a18 1
 * $Id: chap.h,v 1.6 1999/04/21 08:07:24 brian Exp $
d32 1
a32 1
  struct descriptor desc;
@


1.6
log
@Split the recorded chap challenge into two - one for the
receiver and one for the sender.  This allows two simultaneous
chap conversations - something that I *thought* I was already
doing on a daily basis myself until the existence of the
problem was
Beaten into me by: sos@@FreeBSD.org
@
text
@d18 1
a18 1
 * $Id: chap.h,v 1.5 1999/02/18 19:46:19 brian Exp $
d58 1
a58 1
extern void chap_Input(struct physical *, struct mbuf *);
@


1.5
log
@Build correctly when -DNOCRYPT is used.
@
text
@d18 1
a18 1
 * $Id: chap.h,v 1.4 1999/02/18 00:50:45 brian Exp $
d42 4
a45 1
  u_char challenge[CHAPCHALLENGELEN + AUTHLEN];
@


1.4
log
@Fully support both NT and LANMan CHAP type 0x80 as both
authenticator and authenticatee.
@
text
@d18 1
a18 1
 * $Id: chap.h,v 1.3 1999/02/11 10:14:49 brian Exp $
d43 1
d46 1
@


1.3
log
@When resending chap challenges, resend the same challenge
each time rather than making up a new one.

Increase the authname/authkey max sizes to 100 characters.

Allow ``authkey'' specifications beginning with ``!''.
When a challenge is received, the text following the
``!'' is executed as a program (expanding stuff in the same
way that ``sh'' and ``!bg'' do).  The program is passed the
peer name, peer challenge and local ``authname'' on standard
input and is expected to output the name/key combination that
should be used to build the CHAP response.

This provides support for Secure ID cards (guess what I was
given at work recently!) using CHAP.

Examples will follow.
@
text
@d18 1
a18 1
 * $Id: chap.h,v 1.2 1999/02/06 03:22:32 brian Exp $
d42 3
a44 2
  char challenge[CHAPCHALLENGELEN + AUTHLEN];
  unsigned using_MSChap : 1;	/* A combination of MD4 & DES */
@


1.2
log
@Support RADIUS

While I'm in there, validate pap & chap header IDs if
``idcheck'' is enabled (the default) for other FSM packet
types.

NOTE: This involved integrating the generation of chap
      challenges and the validation of chap responses
      (and commenting what's going on in those routines).
      I currently have no way of testing ppps ability
      to respond to M$Chap CHALLENGEs correctly, so if
      someone could do the honours, it'd be much
      appreciated (it *looks* ok!).

Sponsored by: Internet Business Solutions Ltd., Switzerland
@
text
@d18 1
a18 1
 * $Id: chap.h,v 1.10 1998/05/21 21:44:27 brian Exp $
d32 9
d46 3
a48 1
#define auth2chap(a) ((struct chap *)(a))
d51 1
@


1.1
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@a24 1
struct bundle;
d33 1
a33 2
  char challenge_data[80];
  int challenge_len;
d39 2
a40 2
extern void chap_Input(struct bundle *, struct mbuf *, struct physical *);
extern void chap_SendChallenge(struct authinfo *, int, struct physical *);
@

