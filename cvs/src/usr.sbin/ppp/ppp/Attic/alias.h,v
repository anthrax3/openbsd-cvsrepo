head	1.14;
access;
symbols
	OPENBSD_5_5:1.13.0.38
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.34
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.32
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.30
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.28
	OPENBSD_5_0:1.13.0.26
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.24
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.22
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.18
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.20
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.16
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.14
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.12
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.10
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.8
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.6
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.4
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.2
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.12.0.12
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.10
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.8
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.6
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.12.0.4
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.14
date	2014.03.17.17.15.51;	author deraadt;	state dead;
branches;
next	1.13;

1.13
date	2005.07.26.01.32.24;	author brad;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.15.08.01.59;	author brian;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.23.11.17.03;	author brian;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.07.09.32.55;	author brian;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.25.12.33.04;	author brian;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.24.01.05.56;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.13.22.05.47;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.23.09.47.04;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.11.14.40.26;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.27.01.38.24;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	99.03.24.20.32.58;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	99.03.08.01.40.22;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	98.08.31.08.16.27;	author brian;	state Exp;
branches;
next	;


desc
@@


1.14
log
@ppp(8) goes to the bit bucket in the sky
@
text
@/* lint -save -library Flexelint comment for external headers */

/*-
 * Copyright (c) 2001 Charles Mott <cm@@linktel.net>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $OpenBSD: alias.h,v 1.13 2005/07/26 01:32:24 brad Exp $
 */

/*-
 * Alias.h defines the outside world interfaces for the packet aliasing
 * software.
 *
 * This software is placed into the public domain with no restrictions on its
 * distribution.
 */

#ifndef _ALIAS_H_
#define	_ALIAS_H_

/* The external interface to libalias, the packet aliasing engine. */

/* Initialization and control functions. */
void	 PacketAliasInit(void);
void	 PacketAliasSetAddress(struct in_addr _addr);
void	 PacketAliasSetFWBase(unsigned int _base, unsigned int _num);
void	 PacketAliasSetSkinnyPort(unsigned int _port);
unsigned int
	 PacketAliasSetMode(unsigned int _flags, unsigned int _mask);
void	 PacketAliasUninit(void);

/* Packet Handling functions. */
int	 PacketAliasIn(char *_ptr, int _maxpacketsize);
int	 PacketAliasOut(char *_ptr, int _maxpacketsize);
int	 PacketUnaliasOut(char *_ptr, int _maxpacketsize);

/* Port and address redirection functions. */

/*
 * An anonymous structure, a pointer to which is returned from
 * PacketAliasRedirectAddr(), PacketAliasRedirectPort() or
 * PacketAliasRedirectProto(), passed to PacketAliasAddServer(),
 * and freed by PacketAliasRedirectDelete().
 */
struct	alias_link;

int	 PacketAliasAddServer(struct alias_link *_link,
	    struct in_addr _addr, unsigned short _port);
struct alias_link *
	 PacketAliasRedirectAddr(struct in_addr _src_addr,
	    struct in_addr _alias_addr);
void	 PacketAliasRedirectDelete(struct alias_link *_link);
struct alias_link *
	 PacketAliasRedirectPort(struct in_addr _src_addr,
	    unsigned short _src_port, struct in_addr _dst_addr,
	    unsigned short _dst_port, struct in_addr _alias_addr,
	    unsigned short _alias_port, unsigned char _proto);
struct alias_link *
	 PacketAliasRedirectProto(struct in_addr _src_addr,
	    struct in_addr _dst_addr, struct in_addr _alias_addr,
	    unsigned char _proto);

/* Fragment Handling functions. */
void	 PacketAliasFragmentIn(char *_ptr, char *_ptr_fragment);
char	*PacketAliasGetFragment(char *_ptr);
int	 PacketAliasSaveFragment(char *_ptr);

/* Miscellaneous functions. */
int	 PacketAliasCheckNewLink(void);
unsigned short
	 PacketAliasInternetChecksum(unsigned short *_ptr, int _nbytes);
void	 PacketAliasSetTarget(struct in_addr _target_addr);

/* Transparent proxying routines. */
int	 PacketAliasProxyRule(const char *_cmd);

/* Mode flags, set using PacketAliasSetMode() */

/*
 * If PKT_ALIAS_LOG is set, a message will be printed to /var/log/alias.log
 * every time a link is created or deleted.  This is useful for debugging.
 */
#define	PKT_ALIAS_LOG			0x01

/*
 * If PKT_ALIAS_DENY_INCOMING is set, then incoming connections (e.g. to ftp,
 * telnet or web servers will be prevented by the aliasing mechanism.
 */
#define	PKT_ALIAS_DENY_INCOMING		0x02

/*
 * If PKT_ALIAS_SAME_PORTS is set, packets will be attempted sent from the
 * same port as they originated on.  This allows e.g. rsh to work *99% of the
 * time*, but _not_ 100% (it will be slightly flakey instead of not working
 * at all).  This mode bit is set by PacketAliasInit(), so it is a default
 * mode of operation.
 */
#define	PKT_ALIAS_SAME_PORTS		0x04

/*
 * If PKT_ALIAS_USE_SOCKETS is set, then when partially specified links (e.g.
 * destination port and/or address is zero), the packet aliasing engine will
 * attempt to allocate a socket for the aliasing port it chooses.  This will
 * avoid interference with the host machine.  Fully specified links do not
 * require this.  This bit is set after a call to PacketAliasInit(), so it is
 * a default mode of operation.
 */
#define	PKT_ALIAS_USE_SOCKETS		0x08

/*-
 * If PKT_ALIAS_UNREGISTERED_ONLY is set, then only packets with
 * unregistered source addresses will be aliased.  Private
 * addresses are those in the following ranges:
 *
 *		10.0.0.0     ->   10.255.255.255
 *		172.16.0.0   ->   172.31.255.255
 *		192.168.0.0  ->   192.168.255.255
 */
#define	PKT_ALIAS_UNREGISTERED_ONLY	0x10

/*
 * If PKT_ALIAS_RESET_ON_ADDR_CHANGE is set, then the table of dynamic
 * aliasing links will be reset whenever PacketAliasSetAddress() changes the
 * default aliasing address.  If the default aliasing address is left
 * unchanged by this function call, then the table of dynamic aliasing links
 * will be left intact.  This bit is set after a call to PacketAliasInit().
 */
#define	PKT_ALIAS_RESET_ON_ADDR_CHANGE	0x20

#ifndef NO_FW_PUNCH
/*
 * If PKT_ALIAS_PUNCH_FW is set, active FTP and IRC DCC connections will
 * create a 'hole' in the firewall to allow the transfers to work.  The
 * ipfw rule number that the hole is created with is controlled by
 * PacketAliasSetFWBase().  The hole will be attached to that
 * particular alias_link, so when the link goes away the hole is deleted.
 */
#define	PKT_ALIAS_PUNCH_FW		0x100
#endif

/*
 * If PKT_ALIAS_PROXY_ONLY is set, then NAT will be disabled and only
 * transparent proxying is performed.
 */
#define	PKT_ALIAS_PROXY_ONLY		0x40

/*
 * If PKT_ALIAS_REVERSE is set, the actions of PacketAliasIn() and
 * PacketAliasOut() are reversed.
 */
#define	PKT_ALIAS_REVERSE		0x80

/* Function return codes. */
#define	PKT_ALIAS_ERROR			-1
#define	PKT_ALIAS_OK			1
#define	PKT_ALIAS_IGNORED		2
#define	PKT_ALIAS_UNRESOLVED_FRAGMENT	3
#define	PKT_ALIAS_FOUND_HEADER_FRAGMENT	4

#endif /* !_ALIAS_H_ */

/* lint -restore */
@


1.13
log
@Add Cisco Skinny Station Protocol translation support to libalias
and supporting applications (ppp).

From marcus FreeBSD
@
text
@d28 1
a28 1
 * $OpenBSD: alias.h,v 1.12 2002/06/15 08:01:59 brian Exp $
@


1.12
log
@Tidy up end of line whitespace
@
text
@d28 1
a28 1
 * $OpenBSD: alias.h,v 1.11 2001/11/23 11:17:03 brian Exp $
d48 1
@


1.11
log
@cmott@@scientech.com -> cm@@linktel.net
Add the UPTIME variable
CCP protocol ``0xffffffff'' -> ``none''
Don't leak memory when expanding command arguments and not exec()ing
Make some functions static
Add the ``log'' command for manual logging
Fix some log text bogons
@
text
@d28 1
a28 1
 * $OpenBSD: alias.h,v 1.10 2001/06/07 09:32:55 brian Exp $
d34 1
a34 1
 * 
@


1.10
log
@Depricate the -alias option (it's been -nat for a long time)
Handle carriage-return/line-feed stuff for ftp natting more generically
Fix an alignment bug when logging DNS traffic
Fix/add some copyrights
@
text
@d4 1
a4 1
 * Copyright (c) 2001 Charles Mott <cmott@@scientech.com>
d28 1
a28 1
 * $OpenBSD$
@


1.9
log
@Add some style(9) to alias*.h
@
text
@d4 28
a36 2
 * 
 * $OpenBSD: alias.h,v 1.8 2001/03/24 01:05:56 brian Exp $
@


1.8
log
@Remove some unprotected prototype variable names
MAXPATHLEN -> PATH_MAX
Handle ENOENT from opening /dev/tun* properly
Rename _PATH_PPP -> PPP_CONFDIR and allow it to be redefined at compile time
Reduce MIN_LQRPERIOD and MIN_FSMRETRY to 1 second
Be smarter about identifying sockets on stdin
Allow primary DNS IP negotiation when the secondary IP has been rejected
Fix the call to PacketAliasProxyRule() properly.
Add/fix some comments
Fix man page markups; ru@@FreeBSD.org
Use localhost when no hostname is configured
@
text
@d1 1
a1 1
/*lint -save -library Flexelint comment for external headers */
d3 9
a11 3
/*
    Alias.h defines the outside world interfaces for the packet
    aliasing software.
d13 2
a14 2
    This software is placed into the public domain with no restrictions
    on its distribution.
d16 1
a16 2
    $OpenBSD: alias.h,v 1.7 2000/08/13 22:05:47 brian Exp $
*/
d18 12
d31 1
a31 2
#ifndef _ALIAS_H_
#define _ALIAS_H_
d33 34
a66 2
/* Alias link representative (incomplete struct) */
struct alias_link;
d68 2
a69 1
/* External interfaces (API) to packet aliasing engine */
d71 1
a71 3
/* Initialization and Control */
    extern void
    PacketAliasInit(void);
d73 5
a77 2
    extern void
    PacketAliasUninit(void);
d79 14
a92 2
    extern void
    PacketAliasSetAddress(struct in_addr);
d94 29
a122 2
    extern unsigned int
    PacketAliasSetMode(unsigned int, unsigned int);
d125 8
a132 2
    extern void
    PacketAliasSetFWBase(unsigned int, unsigned int);
d135 5
a139 102
/* Packet Handling */
    extern int
    PacketAliasIn(char *, int);

    extern int
    PacketAliasOut(char *, int);

    extern int
    PacketUnaliasOut(char *, int);

/* Port and Address Redirection */
    extern struct alias_link *
    PacketAliasRedirectPort(struct in_addr, u_short, 
                            struct in_addr, u_short,
                            struct in_addr, u_short,
                            u_char);

    extern int
    PacketAliasAddServer(struct alias_link *, struct in_addr, u_short);

    extern struct alias_link *
    PacketAliasRedirectProto(struct in_addr,
                             struct in_addr,
                             struct in_addr,
                             u_char);

    extern struct alias_link *
    PacketAliasRedirectAddr(struct in_addr,
                            struct in_addr);

    extern void
    PacketAliasRedirectDelete(struct alias_link *);

/* Fragment Handling */
    extern int
    PacketAliasSaveFragment(char *);

    extern char *
    PacketAliasGetFragment(char *);

    extern void 
    PacketAliasFragmentIn(char *, char *);

/* Miscellaneous Functions */
    extern void
    PacketAliasSetTarget(struct in_addr);

    extern int
    PacketAliasCheckNewLink(void);

    extern u_short
    PacketAliasInternetChecksum(u_short *, int);

/* Transparent Proxying */
    extern int
    PacketAliasProxyRule(const char *);


/********************** Mode flags ********************/
/* Set these flags using PacketAliasSetMode() */

/* If PKT_ALIAS_LOG is set, a message will be printed to
	/var/log/alias.log every time a link is created or deleted.  This
	is useful for debugging */
#define PKT_ALIAS_LOG 0x01

/* If PKT_ALIAS_DENY_INCOMING is set, then incoming connections (e.g.
	to ftp, telnet or web servers will be prevented by the aliasing
	mechanism.  */
#define PKT_ALIAS_DENY_INCOMING 0x02

/* If PKT_ALIAS_SAME_PORTS is set, packets will be attempted sent from
	the same port as they originated on.  This allows e.g. rsh to work
	*99% of the time*, but _not_ 100%.  (It will be slightly flakey
	instead of not working at all.)  This mode bit is set by
        PacketAliasInit(), so it is a default mode of operation. */
#define PKT_ALIAS_SAME_PORTS 0x04

/* If PKT_ALIAS_USE_SOCKETS is set, then when partially specified
	links (e.g. destination port and/or address is zero), the packet
	aliasing engine will attempt to allocate a socket for the aliasing
	port it chooses.  This will avoid interference with the host
	machine.  Fully specified links do not require this.  This bit
        is set after a call to PacketAliasInit(), so it is a default
        mode of operation. */
#define PKT_ALIAS_USE_SOCKETS 0x08

/* If PKT_ALIAS_UNREGISTERED_ONLY is set, then only packets with
	unregistered source addresses will be aliased.  Private
	addresses are those in the following ranges:
		10.0.0.0     ->   10.255.255.255
		172.16.0.0   ->   172.31.255.255
		192.168.0.0  ->   192.168.255.255  */
#define PKT_ALIAS_UNREGISTERED_ONLY 0x10

/* If PKT_ALIAS_RESET_ON_ADDR_CHANGE is set, then the table of dynamic
	aliasing links will be reset whenever PacketAliasSetAddress()
        changes the default aliasing address.  If the default aliasing
        address is left unchanged by this function call, then the
        table of dynamic aliasing links will be left intact.  This
        bit is set after a call to PacketAliasInit(). */
#define PKT_ALIAS_RESET_ON_ADDR_CHANGE 0x20
d141 12
a152 9
#ifndef NO_FW_PUNCH
/* If PKT_ALIAS_PUNCH_FW is set, active FTP and IRC DCC connections
   will create a 'hole' in the firewall to allow the transfers to
   work.  Where (IPFW "line-numbers") the hole is created is
   controlled by PacketAliasSetFWBase(base, size). The hole will be
   attached to that particular alias_link, so when the link goes away
   so do the hole.  */
#define PKT_ALIAS_PUNCH_FW 0x100
#endif
d154 1
a154 14
/* If PKT_ALIAS_PROXY_ONLY is set, then NAT will be disabled and only
      transparent proxying performed */
#define PKT_ALIAS_PROXY_ONLY 0x40

/* If PKT_ALIAS_REVERSE is set, the actions of PacketAliasIn()
      and PacketAliasOut() are reversed */
#define PKT_ALIAS_REVERSE 0x80

/* Return Codes */
#define PKT_ALIAS_ERROR -1
#define PKT_ALIAS_OK 1
#define PKT_ALIAS_IGNORED 2
#define PKT_ALIAS_UNRESOLVED_FRAGMENT 3
#define PKT_ALIAS_FOUND_HEADER_FRAGMENT 4
d156 1
a156 2
#endif
/*lint -restore */
@


1.7
log
@Add support for streaming media; FreeBSD
Add support for radius accounting in radlib.c (not yet working in ppp); FreeBSD
@
text
@d10 1
a10 1
    $OpenBSD: alias.h,v 1.6 2000/06/23 09:47:04 brian Exp $
d42 1
a42 1
    PacketAliasIn(char *, int maxpacketsize);
d45 1
a45 1
    PacketAliasOut(char *, int maxpacketsize);
d48 1
a48 1
    PacketUnaliasOut(char *, int maxpacketsize);
d58 1
a58 3
    PacketAliasAddServer(struct alias_link *link,
                         struct in_addr addr,
                         u_short port);
d85 1
a85 1
    PacketAliasSetTarget(struct in_addr addr);
@


1.6
log
@Improved 227, 229 and EPRT support in the nat code; FreeBSD
Moved security checks into one place; FreeBSD
Remove ``nat pptp'' now that it's transparent
@
text
@d10 1
a10 1
    $OpenBSD: alias.h,v 1.5 2000/06/11 14:40:26 brian Exp $
d46 3
@


1.5
log
@Merge libalias stuff from FreeBSD:
Ppp only really benefits from a bunch of typo fixes, transparent pptp
support and ftp/EPRT support.
@
text
@d10 1
a10 1
    $OpenBSD: alias.h,v 1.4 2000/02/27 01:38:24 brian Exp $
a57 3

    extern int
    PacketAliasPptp(struct in_addr);
@


1.4
log
@$Id$ -> $OpenBSD$
@
text
@d10 1
a10 1
    $OpenBSD: alias.h,v 1.3 1999/03/24 20:32:58 brian Exp $
a16 4
#ifndef NULL
#define NULL 0
#endif

d55 5
d62 5
d101 1
a101 1
/* Set these flags using SetPacketAliasMode() */
d114 1
a114 1
	the same port as they originated on.  This allows eg rsh to work
d126 1
a126 1
        mode of operation.*/
d129 3
a131 4
/* If PKT_ALIAS_UNREGISTERED_ONLY is set, then only packets with with
	unregistered source addresses will be aliased (along with those
	of the ppp host maching itself.  Private addresses are those
        in the following ranges:
d140 1
a140 1
        address is left unchanged by this functions call, then the
d152 1
a152 1
#define PKT_ALIAS_PUNCH_FW 0x40
@


1.3
log
@Add a ``const'' and remove some inconsistent prototype args.
@
text
@d10 1
a10 1
    $Id: alias.h,v 1.2 1999/03/08 01:40:22 brian Exp $
@


1.2
log
@Add proxying & transparent proxying support (``alias proxy'').
Add PPTP packet aliasing (GRE fixed address) support (``alias pptp'').
Add a 0 to the front of the mode to signify octal.
Thanks to: Charles Mott <cmott@@srv.net> & Dru Nelson <dnelson@@redwoodsoft.com>
@
text
@d10 1
a10 1
    $Id: alias.h,v 1.1 1998/08/31 08:16:27 brian Exp $
d91 1
a91 1
    PacketAliasProxyRule(char *);
@


1.1
log
@Move libalias sources into the ppp directory.
Suggested (many times) by: Theo
@
text
@d10 1
a10 1
    $Id: alias.h,v 1.3 1998/08/31 00:22:03 brian Exp $
d58 4
d89 3
a92 21
/*
   In version 2.2, the function names were rationalized
   to all be of the form PacketAlias...  These are the
   old function names for backwards compatibility
*/
extern int SaveFragmentPtr(char *);
extern char *GetNextFragmentPtr(char *);
extern void FragmentAliasIn(char *, char *);
extern void SetPacketAliasAddress(struct in_addr);
extern void InitPacketAlias(void);
extern unsigned int SetPacketAliasMode(unsigned int, unsigned int);
extern int PacketAliasIn2(char *, struct in_addr, int maxpacketsize);
extern int PacketAliasOut2(char *, struct in_addr, int maxpacketsize);
extern int
PacketAliasPermanentLink(struct in_addr, u_short, 
                         struct in_addr, u_short,
                         u_short, u_char);
extern u_short InternetChecksum(u_short *, int);

/* Obsolete constant */
#define PKT_ALIAS_NEW_LINK 5
a126 1

d149 8
@

