head	1.6;
access;
symbols
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	PPP1_5:1.1.1.1
	BRIAN:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	98.04.27.02.13.56;	author brian;	state dead;
branches;
next	1.5;

1.5
date	98.01.21.02.13.28;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	97.12.24.10.28.15;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	97.12.21.14.26.58;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	97.12.15.23.36.34;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	97.11.23.20.27.32;	author brian;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.11.23.20.27.32;	author brian;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove mention of libalias and dlopen/dlsym.
@
text
@/*-
 * The code in this file was written by Eivind Eklund <perhaps@@yes.no>,
 * who places it in the public domain without restriction.
 *
 *	$Id: alias_cmd.c,v 1.5 1998/01/21 02:13:28 brian Exp $
 */

#include <sys/param.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "defs.h"
#include "command.h"
#include "mbuf.h"
#include "log.h"
#include "loadalias.h"
#include "vars.h"
#include "alias_cmd.h"


static int StrToAddr(const char *, struct in_addr *);
static int StrToPort(const char *, u_short *, const char *);
static int StrToAddrAndPort(const char *, struct in_addr *, u_short *, const char *);


int
AliasRedirectPort(struct cmdargs const *arg)
{
  if (!(mode & MODE_ALIAS)) {
    if (VarTerm)
      fprintf(VarTerm, "Alias not enabled\n");
    return 1;
  } else if (arg->argc == 3) {
    char proto_constant;
    const char *proto;
    u_short local_port;
    u_short alias_port;
    int error;
    struct in_addr local_addr;
    struct in_addr null_addr;
    struct alias_link *link;

    proto = arg->argv[0];
    if (strcmp(proto, "tcp") == 0) {
      proto_constant = IPPROTO_TCP;
    } else if (strcmp(proto, "udp") == 0) {
      proto_constant = IPPROTO_UDP;
    } else {
      if (VarTerm) {
	fprintf(VarTerm, "port redirect: protocol must be tcp or udp\n");
	fprintf(VarTerm, "Usage: alias %s %s\n", arg->cmd->name,
		arg->cmd->syntax);
      }
      return 1;
    }

    error = StrToAddrAndPort(arg->argv[1], &local_addr, &local_port, proto);
    if (error) {
      if (VarTerm) {
	fprintf(VarTerm, "port redirect: error reading local addr:port\n");
	fprintf(VarTerm, "Usage: alias %s %s\n", arg->cmd->name, arg->cmd->syntax);
      }
      return 1;
    }
    error = StrToPort(arg->argv[2], &alias_port, proto);
    if (error) {
      if (VarTerm) {
	fprintf(VarTerm, "port redirect: error reading alias port\n");
	fprintf(VarTerm, "Usage: alias %s %s\n", arg->cmd->name, arg->cmd->syntax);
      }
      return 1;
    }
    null_addr.s_addr = 0;

    link = VarPacketAliasRedirectPort(local_addr, local_port,
				      null_addr, 0,
				      null_addr, alias_port,
				      proto_constant);

    if (link == NULL && VarTerm)
      fprintf(VarTerm, "port redirect: error returned by packed"
	      " aliasing engine (code=%d)\n", error);
  } else
    return -1;

  return 0;
}


int
AliasRedirectAddr(struct cmdargs const *arg)
{
  if (!(mode & MODE_ALIAS)) {
    if (VarTerm)
      fprintf(VarTerm, "alias not enabled\n");
    return 1;
  } else if (arg->argc == 2) {
    int error;
    struct in_addr local_addr;
    struct in_addr alias_addr;
    struct alias_link *link;

    error = StrToAddr(arg->argv[0], &local_addr);
    if (error) {
      if (VarTerm)
	fprintf(VarTerm, "address redirect: invalid local address\n");
      return 1;
    }
    error = StrToAddr(arg->argv[1], &alias_addr);
    if (error) {
      if (VarTerm) {
	fprintf(VarTerm, "address redirect: invalid alias address\n");
	fprintf(VarTerm, "Usage: alias %s %s\n", arg->cmd->name, arg->cmd->syntax);
      }
      return 1;
    }
    link = VarPacketAliasRedirectAddr(local_addr, alias_addr);
    if (link == NULL && VarTerm) {
      fprintf(VarTerm, "address redirect: packet aliasing engine error\n");
      fprintf(VarTerm, "Usage: alias %s %s\n", arg->cmd->name, arg->cmd->syntax);
    }
  } else
    return -1;

  return 0;
}


static int
StrToAddr(const char *str, struct in_addr *addr)
{
  struct hostent *hp;

  if (inet_aton(str, addr))
    return 0;

  hp = gethostbyname(str);
  if (!hp) {
    LogPrintf(LogWARN, "StrToAddr: Unknown host %s.\n", str);
    return -1;
  }
  *addr = *((struct in_addr *) hp->h_addr);
  return 0;
}


static int
StrToPort(const char *str, u_short *port, const char *proto)
{
  int iport;
  struct servent *sp;
  char *end;

  iport = strtol(str, &end, 10);
  if (end != str) {
    *port = htons(iport);
    return 0;
  }
  sp = getservbyname(str, proto);
  if (!sp) {
    LogPrintf(LogWARN, "StrToAddr: Unknown port or service %s/%s.\n",
	      str, proto);
    return -1;
  }
  *port = sp->s_port;
  return 0;
}


static int
StrToAddrAndPort(const char *str, struct in_addr *addr, u_short *port, const char *proto)
{
  char *colon;
  int res;

  colon = strchr(str, ':');
  if (!colon) {
    LogPrintf(LogWARN, "StrToAddrAndPort: %s is missing port number.\n", str);
    return -1;
  }

  *colon = '\0';		/* Cheat the const-ness ! */
  res = StrToAddr(str, addr);
  *colon = ':';			/* Cheat the const-ness ! */
  if (res != 0)
    return -1;

  return StrToPort(colon+1, port, proto);
}
@


1.5
log
@Remove unused #includes.
Make various bits static.
Remove unused variables.
Submitted by: eivind
@
text
@d5 1
a5 1
 *	$Id: alias_cmd.c,v 1.4 1997/12/24 10:28:15 brian Exp $
@


1.4
log
@Correct copyright.

Requested by: Eivind Eklund <perhaps@@yes.no>
@
text
@d5 1
a5 1
 *	$Id: alias_cmd.c,v 1.3 1997/12/21 14:26:58 brian Exp $
a8 1
#include <sys/socket.h>
@


1.3
log
@Add (BSD) copyright headers
@
text
@d2 2
a3 2
 * Copyright (c) 1997 Charles Mott <cmott@@srv.net>
 * All rights reserved.
d5 1
a5 22
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$Id$
@


1.2
log
@Correct return values from alias routines.
(Only available if -DHAVE_LIBALIAS is specified)
@
text
@d1 26
a26 2
/*
 * $Id: alias_cmd.c,v 1.1.1.1 1997/11/23 20:27:32 brian Exp $
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id: alias_cmd.c,v 1.7 1997/11/22 03:37:21 brian Exp $
d36 1
d87 2
a88 2
  } else if (VarTerm)
    fprintf(VarTerm, "Usage: alias %s %s\n", arg->cmd->name, arg->cmd->syntax);
d90 1
a90 1
  return 1;
d100 1
d126 2
a127 2
  } else if (VarTerm)
    fprintf(VarTerm, "Usage: alias %s %s\n", arg->cmd->name, arg->cmd->syntax);
d129 1
a129 1
  return 1;
@


1.1.1.1
log
@Import version 1.5 of ppp.

<sales>
This is a user-level ppp implementation that uses the
tun driver.  It was originally created by a Japanese
ISP.  It's now piled with features.  Check the man pages
for details.
</sales>

The sources are identical to the ones in FreeBSD, except
for the Makefile.

IP aliasing (NAT) is disabled, and can be enabled by simply
doing a ``make install'' of libalias, then rebuilding
ppp.  I'll create libalias as a port soon.
@
text
@@
