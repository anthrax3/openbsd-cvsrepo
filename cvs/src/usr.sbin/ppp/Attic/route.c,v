head	1.20;
access;
symbols
	OPENBSD_2_3:1.16.0.2
	OPENBSD_2_3_BASE:1.16
	PPP1_5:1.1.1.1
	BRIAN:1.1.1;
locks; strict;
comment	@ * @;


1.20
date	98.08.31.00.21.32;	author brian;	state dead;
branches;
next	1.19;

1.19
date	98.08.17.06.45.38;	author brian;	state Exp;
branches;
next	1.18;

1.18
date	98.06.27.12.06.48;	author brian;	state Exp;
branches;
next	1.17;

1.17
date	98.04.25.00.22.13;	author brian;	state Exp;
branches;
next	1.16;

1.16
date	98.03.13.01.26.03;	author brian;	state Exp;
branches;
next	1.15;

1.15
date	98.01.21.02.13.40;	author brian;	state Exp;
branches;
next	1.14;

1.14
date	98.01.19.02.57.34;	author brian;	state Exp;
branches;
next	1.13;

1.13
date	98.01.11.04.45.06;	author brian;	state Exp;
branches;
next	1.12;

1.12
date	98.01.11.02.57.50;	author brian;	state Exp;
branches;
next	1.11;

1.11
date	97.12.30.02.45.06;	author brian;	state Exp;
branches;
next	1.10;

1.10
date	97.12.27.19.22.28;	author brian;	state Exp;
branches;
next	1.9;

1.9
date	97.12.27.13.45.21;	author brian;	state Exp;
branches;
next	1.8;

1.8
date	97.12.24.09.30.46;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	97.12.17.21.18.09;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	97.12.17.00.20.37;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	97.12.15.22.48.02;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	97.12.15.22.44.58;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	97.12.07.04.09.09;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	97.12.06.12.09.16;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	97.11.23.20.27.35;	author brian;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.11.23.20.27.35;	author brian;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@/*
 *	      PPP Routing related Module
 *
 *	    Written by Toshiharu OHNO (tony-o@@iij.ad.jp)
 *
 *   Copyright (C) 1994, Internet Initiative Japan, Inc. All rights reserverd.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the Internet Initiative Japan, Inc.  The name of the
 * IIJ may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $Id: route.c,v 1.19 1998/08/17 06:45:38 brian Exp $
 *
 */

#include <sys/param.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <net/if_types.h>
#include <net/route.h>
#include <net/if.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <net/if_dl.h>

#include <errno.h>
#include <machine/endian.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/sysctl.h>
#include <unistd.h>

#include "command.h"
#include "mbuf.h"
#include "log.h"
#include "loadalias.h"
#include "defs.h"
#include "vars.h"
#include "id.h"
#include "os.h"
#include "ipcp.h"
#include "iplist.h"
#include "route.h"

static int IfIndex;

struct rtmsg {
  struct rt_msghdr m_rtm;
  char m_space[64];
};

static int seqno;

void
OsSetRoute(int cmd,
	   struct in_addr dst,
	   struct in_addr gateway,
	   struct in_addr mask,
	   int bang)
{
  struct rtmsg rtmes;
  int s, nb, wb;
  char *cp;
  const char *cmdstr;
  struct sockaddr_in rtdata;

  if (bang)
    cmdstr = (cmd == RTM_ADD ? "Add!" : "Delete!");
  else
    cmdstr = (cmd == RTM_ADD ? "Add" : "Delete");
  s = ID0socket(PF_ROUTE, SOCK_RAW, 0);
  if (s < 0) {
    LogPrintf(LogERROR, "OsSetRoute: socket(): %s\n", strerror(errno));
    return;
  }
  memset(&rtmes, '\0', sizeof rtmes);
  rtmes.m_rtm.rtm_version = RTM_VERSION;
  rtmes.m_rtm.rtm_type = cmd;
  rtmes.m_rtm.rtm_addrs = RTA_DST;
  rtmes.m_rtm.rtm_seq = ++seqno;
  rtmes.m_rtm.rtm_pid = getpid();
  rtmes.m_rtm.rtm_flags = RTF_UP | RTF_GATEWAY | RTF_STATIC;

  memset(&rtdata, '\0', sizeof rtdata);
  rtdata.sin_len = 16;
  rtdata.sin_family = AF_INET;
  rtdata.sin_port = 0;
  rtdata.sin_addr = dst;

  cp = rtmes.m_space;
  memcpy(cp, &rtdata, 16);
  cp += 16;
  if (cmd == RTM_ADD) {
    if (gateway.s_addr == INADDR_ANY) {
      /* Add a route through the interface */
      struct sockaddr_dl dl;
      const char *iname;
      int ilen;

      iname = Index2Nam(IfIndex);
      ilen = strlen(iname);
      dl.sdl_len = sizeof dl - sizeof dl.sdl_data + ilen;
      dl.sdl_family = AF_LINK;
      dl.sdl_index = IfIndex;
      dl.sdl_type = 0;
      dl.sdl_nlen = ilen;
      dl.sdl_alen = 0;
      dl.sdl_slen = 0;
      strncpy(dl.sdl_data, iname, sizeof dl.sdl_data);

      memcpy(cp, &dl, dl.sdl_len);
      cp += dl.sdl_len;
      rtmes.m_rtm.rtm_addrs |= RTA_GATEWAY;
    } else {
      rtdata.sin_addr = gateway;
      memcpy(cp, &rtdata, 16);
      cp += 16;
      rtmes.m_rtm.rtm_addrs |= RTA_GATEWAY;
    }
  }

  if (dst.s_addr == INADDR_ANY)
    mask.s_addr = INADDR_ANY;

  if (cmd == RTM_ADD || dst.s_addr == INADDR_ANY) {
    rtdata.sin_addr = mask;
    memcpy(cp, &rtdata, 16);
    cp += 16;
    rtmes.m_rtm.rtm_addrs |= RTA_NETMASK;
  }

  nb = cp - (char *) &rtmes;
  rtmes.m_rtm.rtm_msglen = nb;
  wb = ID0write(s, &rtmes, nb);
  if (wb < 0) {
    LogPrintf(LogTCPIP, "OsSetRoute failure:\n");
    LogPrintf(LogTCPIP, "OsSetRoute:  Cmd = %s\n", cmdstr);
    LogPrintf(LogTCPIP, "OsSetRoute:  Dst = %s\n", inet_ntoa(dst));
    LogPrintf(LogTCPIP, "OsSetRoute:  Gateway = %s\n", inet_ntoa(gateway));
    LogPrintf(LogTCPIP, "OsSetRoute:  Mask = %s\n", inet_ntoa(mask));
failed:
    if (cmd == RTM_ADD && (rtmes.m_rtm.rtm_errno == EEXIST ||
                           (rtmes.m_rtm.rtm_errno == 0 && errno == EEXIST))) {
      if (!bang)
        LogPrintf(LogWARN, "Add route failed: %s already exists\n",
                  inet_ntoa(dst));
      else {
        rtmes.m_rtm.rtm_type = cmd = RTM_CHANGE;
        if ((wb = ID0write(s, &rtmes, nb)) < 0)
          goto failed;
      }
    } else if (cmd == RTM_DELETE &&
             (rtmes.m_rtm.rtm_errno == ESRCH ||
              (rtmes.m_rtm.rtm_errno == 0 && errno == ESRCH))) {
      if (!bang)
        LogPrintf(LogWARN, "Del route failed: %s: Non-existent\n",
                  inet_ntoa(dst));
    } else if (rtmes.m_rtm.rtm_errno == 0)
      LogPrintf(LogWARN, "%s route failed: %s: errno: %s\n", cmdstr,
                inet_ntoa(dst), strerror(errno));
    else
      LogPrintf(LogWARN, "%s route failed: %s: %s\n",
		cmdstr, inet_ntoa(dst), strerror(rtmes.m_rtm.rtm_errno));
  }
  LogPrintf(LogDEBUG, "wrote %d: cmd = %s, dst = %x, gateway = %x\n",
            wb, cmdstr, dst.s_addr, gateway.s_addr);
  close(s);
}

static void
p_sockaddr(struct sockaddr *phost, struct sockaddr *pmask, int width)
{
  char buf[29];
  struct sockaddr_in *ihost = (struct sockaddr_in *)phost;
  struct sockaddr_in *mask = (struct sockaddr_in *)pmask;
  struct sockaddr_dl *dl = (struct sockaddr_dl *)phost;

  switch (phost->sa_family) {
  case AF_INET:
    if (!phost)
      buf[0] = '\0';
    else if (ihost->sin_addr.s_addr == INADDR_ANY)
      strcpy(buf, "default");
    else if (!mask) 
      strcpy(buf, inet_ntoa(ihost->sin_addr));
    else {
      u_int msk = ntohl(mask->sin_addr.s_addr);
      u_int tst;
      int bits;
      int len;
      struct sockaddr_in net;

      for (tst = 1, bits=32; tst; tst <<= 1, bits--)
        if (msk & tst)
          break;

      for (tst <<=1; tst; tst <<= 1)
        if (!(msk & tst))
          break;

      net.sin_addr.s_addr = ihost->sin_addr.s_addr & mask->sin_addr.s_addr;
      strcpy(buf, inet_ntoa(net.sin_addr));
      for (len = strlen(buf); len > 3; buf[len-=2] = '\0')
        if (strcmp(buf+len-2, ".0"))
          break;

      if (tst)    /* non-contiguous :-( */
        sprintf(buf+strlen(buf),"&0x%08x", msk);
      else
        sprintf(buf+strlen(buf), "/%d", bits);
    }
    break;

  case AF_LINK:
    if (dl->sdl_nlen)
      snprintf(buf, sizeof buf, "%.*s", dl->sdl_nlen, dl->sdl_data);
    else if (dl->sdl_alen) {
      if (dl->sdl_type == IFT_ETHER) {
        if (dl->sdl_alen < sizeof buf / 3) {
          int f;
          u_char *MAC;

          MAC = (u_char *)dl->sdl_data + dl->sdl_nlen;
          for (f = 0; f < dl->sdl_alen; f++)
            sprintf(buf+f*3, "%02x:", MAC[f]);
          buf[f*3-1] = '\0';
        } else
	  strcpy(buf, "??:??:??:??:??:??");
      } else
        sprintf(buf, "<IFT type %d>", dl->sdl_type);
    } else if (dl->sdl_slen)
      sprintf(buf, "<slen %d?>", dl->sdl_slen);
    else
      sprintf(buf, "link#%d", dl->sdl_index);
    break;

  default:
    sprintf(buf, "<AF type %d>", phost->sa_family);
    break;
  }

  fprintf(VarTerm, "%-*s ", width-1, buf);
}

static struct bits {
  u_int32_t b_mask;
  char b_val;
} bits[] = {
  { RTF_UP, 'U' },
  { RTF_GATEWAY, 'G' },
  { RTF_HOST, 'H' },
  { RTF_REJECT, 'R' },
  { RTF_DYNAMIC, 'D' },
  { RTF_MODIFIED, 'M' },
  { RTF_DONE, 'd' },
  { RTF_CLONING, 'C' },
  { RTF_XRESOLVE, 'X' },
  { RTF_LLINFO, 'L' },
  { RTF_STATIC, 'S' },
  { RTF_PROTO1, '1' },
  { RTF_PROTO2, '2' },
  { RTF_BLACKHOLE, 'B' },
#ifdef RTF_WASCLONED
  { RTF_WASCLONED, 'W' },
#endif
#ifdef RTF_PRCLONING
  { RTF_PRCLONING, 'c' },
#endif
#ifdef RTF_PROTO3
  { RTF_PROTO3, '3' },
#endif
#ifdef RTF_BROADCAST
  { RTF_BROADCAST, 'b' },
#endif
  { 0, '\0' }
};

#ifndef RTF_WASCLONED
#define RTF_WASCLONED (0)
#endif

static void
p_flags(u_int32_t f, int max)
{
  if (VarTerm) {
    char name[33], *flags;
    register struct bits *p = bits;

    if (max > sizeof name - 1)
      max = sizeof name - 1;

    for (flags = name; p->b_mask && flags - name < max; p++)
      if (p->b_mask & f)
	*flags++ = p->b_val;
    *flags = '\0';
    fprintf(VarTerm, "%-*.*s", max, max, name);
  }
}

const char *
Index2Nam(int idx)
{
  static char **ifs;
  static int nifs, debug_done;

  if (!nifs) {
    int mib[6], have, had;
    size_t needed;
    char *buf, *ptr, *end;
    struct sockaddr_dl *dl;
    struct if_msghdr *ifm;

    mib[0] = CTL_NET;
    mib[1] = PF_ROUTE;
    mib[2] = 0;
    mib[3] = 0;
    mib[4] = NET_RT_IFLIST;
    mib[5] = 0;

    if (sysctl(mib, 6, NULL, &needed, NULL, 0) < 0) {
      LogPrintf(LogERROR, "Index2Nam: sysctl: estimate: %s\n", strerror(errno));
      return "???";
    }
    if ((buf = malloc(needed)) == NULL)
      return "???";
    if (sysctl(mib, 6, buf, &needed, NULL, 0) < 0) {
      free(buf);
      return "???";
    }
    end = buf + needed;

    have = 0;
    for (ptr = buf; ptr < end; ptr += ifm->ifm_msglen) {
      ifm = (struct if_msghdr *)ptr;
      dl = (struct sockaddr_dl *)(ifm + 1);
      if (ifm->ifm_index > 0) {
        if (ifm->ifm_index > have) {
          char **newifs;

          had = have;
          have = ifm->ifm_index + 5;
          if (had)
            newifs = (char **)realloc(ifs, sizeof(char *) * have);
          else
            newifs = (char **)malloc(sizeof(char *) * have);
          if (!newifs) {
            LogPrintf(LogDEBUG, "Index2Nam: %s\n", strerror(errno));
            nifs = 0;
            if (ifs)
              free(ifs);
            return "???";
          }
          ifs = newifs;
          memset(ifs + had, '\0', sizeof(char *) * (have - had));
        }
        if (ifs[ifm->ifm_index-1] == NULL) {
          ifs[ifm->ifm_index-1] = (char *)malloc(dl->sdl_nlen+1);
          memcpy(ifs[ifm->ifm_index-1], dl->sdl_data, dl->sdl_nlen);
          ifs[ifm->ifm_index-1][dl->sdl_nlen] = '\0';
          if (nifs < ifm->ifm_index)
            nifs = ifm->ifm_index;
        }
      } else if (LogIsKept(LogDEBUG))
        LogPrintf(LogDEBUG, "Skipping out-of-range interface %d!\n",
                  ifm->ifm_index);
    }
    free(buf);
  }

  if (LogIsKept(LogDEBUG) && !debug_done) {
    int f;

    LogPrintf(LogDEBUG, "Found the following interfaces:\n");
    for (f = 0; f < nifs; f++)
      if (ifs[f] != NULL)
        LogPrintf(LogDEBUG, " Index %d, name \"%s\"\n", f+1, ifs[f]);
    debug_done = 1;
  }

  if (idx < 1 || idx > nifs || ifs[idx-1] == NULL)
    return "???";

  return ifs[idx-1];
}

int
ShowRoute(struct cmdargs const *arg)
{
  struct rt_msghdr *rtm;
  struct sockaddr *sa_dst, *sa_gw, *sa_mask;
  char *sp, *ep, *cp, *wp;
  size_t needed;
  int mib[6];

  if (!VarTerm)
    return 1;

  mib[0] = CTL_NET;
  mib[1] = PF_ROUTE;
  mib[2] = 0;
  mib[3] = 0;
  mib[4] = NET_RT_DUMP;
  mib[5] = 0;
  if (sysctl(mib, 6, NULL, &needed, NULL, 0) < 0) {
    LogPrintf(LogERROR, "ShowRoute: sysctl: estimate: %s\n", strerror(errno));
    return (1);
  }
  if (needed < 0)
    return (1);
  sp = malloc(needed);
  if (sp == NULL)
    return (1);
  if (sysctl(mib, 6, sp, &needed, NULL, 0) < 0) {
    LogPrintf(LogERROR, "ShowRoute: sysctl: getroute: %s\n", strerror(errno));
    free(sp);
    return (1);
  }
  ep = sp + needed;

  fprintf(VarTerm, "%-20s%-20sFlags  Netif\n", "Destination", "Gateway");
  for (cp = sp; cp < ep; cp += rtm->rtm_msglen) {
    rtm = (struct rt_msghdr *) cp;
    wp = (char *)(rtm+1);

    if (rtm->rtm_addrs & RTA_DST) {
      sa_dst = (struct sockaddr *)wp;
      wp += sa_dst->sa_len;
    } else
      sa_dst = NULL;

    if (rtm->rtm_addrs & RTA_GATEWAY) {
      sa_gw = (struct sockaddr *)wp;
      wp += sa_gw->sa_len;
    } else
      sa_gw = NULL;

    if (rtm->rtm_addrs & RTA_NETMASK) {
      sa_mask = (struct sockaddr *)wp;
      wp += sa_mask->sa_len;
    } else
      sa_mask = NULL;

    p_sockaddr(sa_dst, sa_mask, 20);
    p_sockaddr(sa_gw, NULL, 20);

    p_flags(rtm->rtm_flags, 6);
    fprintf(VarTerm, " %s\n", Index2Nam(rtm->rtm_index));
  }
  free(sp);
  return 0;
}

/*
 *  Delete routes associated with our interface
 */
void
DeleteIfRoutes(int all)
{
  struct rt_msghdr *rtm;
  struct sockaddr *sa;
  struct in_addr sa_dst, sa_none;
  int pass;
  size_t needed;
  char *sp, *cp, *ep;
  int mib[6];

  LogPrintf(LogDEBUG, "DeleteIfRoutes (%d)\n", IfIndex);
  sa_none.s_addr = INADDR_ANY;

  mib[0] = CTL_NET;
  mib[1] = PF_ROUTE;
  mib[2] = 0;
  mib[3] = 0;
  mib[4] = NET_RT_DUMP;
  mib[5] = 0;
  if (sysctl(mib, 6, NULL, &needed, NULL, 0) < 0) {
    LogPrintf(LogERROR, "DeleteIfRoutes: sysctl: estimate: %s\n",
	      strerror(errno));
    return;
  }
  if (needed < 0)
    return;

  sp = malloc(needed);
  if (sp == NULL)
    return;

  if (sysctl(mib, 6, sp, &needed, NULL, 0) < 0) {
    LogPrintf(LogERROR, "DeleteIfRoutes: sysctl: getroute: %s\n",
	      strerror(errno));
    free(sp);
    return;
  }
  ep = sp + needed;

  for (pass = 0; pass < 2; pass++) {
    /*
     * We do 2 passes.  The first deletes all cloned routes.  The second
     * deletes all non-cloned routes.  This is necessary to avoid
     * potential errors from trying to delete route X after route Y where
     * route X was cloned from route Y (which is no longer there).
     */
    if (RTF_WASCLONED == 0 && pass == 0)
      /* So we can't tell ! */
      continue;
    for (cp = sp; cp < ep; cp += rtm->rtm_msglen) {
      rtm = (struct rt_msghdr *) cp;
      sa = (struct sockaddr *) (rtm + 1);
      LogPrintf(LogDEBUG, "DeleteIfRoutes: addrs: %x, Netif: %d (%s),"
                " flags: %x, dst: %s ?\n", rtm->rtm_addrs, rtm->rtm_index,
                Index2Nam(rtm->rtm_index), rtm->rtm_flags,
	        inet_ntoa(((struct sockaddr_in *) sa)->sin_addr));
      if (rtm->rtm_addrs & RTA_DST && rtm->rtm_addrs & RTA_GATEWAY &&
	  rtm->rtm_index == IfIndex &&
	  (all || (rtm->rtm_flags & RTF_GATEWAY))) {
        sa_dst.s_addr = ((struct sockaddr_in *)sa)->sin_addr.s_addr;
        sa = (struct sockaddr *)((char *)sa + sa->sa_len);
        if (sa->sa_family == AF_INET || sa->sa_family == AF_LINK) {
          if ((pass == 0 && (rtm->rtm_flags & RTF_WASCLONED)) ||
              (pass == 1 && !(rtm->rtm_flags & RTF_WASCLONED))) {
            LogPrintf(LogDEBUG, "DeleteIfRoutes: Remove it (pass %d)\n", pass);
            OsSetRoute(RTM_DELETE, sa_dst, sa_none, sa_none, 0);
          } else
            LogPrintf(LogDEBUG, "DeleteIfRoutes: Skip it (pass %d)\n", pass);
        } else
          LogPrintf(LogDEBUG,
                    "DeleteIfRoutes: Can't remove routes of %d family !\n",
                    sa->sa_family);
      }
    }
  }
  free(sp);
}

int
GetIfIndex(char *name)
{
  int idx;
  const char *got;

  idx = 1;
  while (strcmp(got = Index2Nam(idx), "???"))
    if (!strcmp(got, name))
      return IfIndex = idx;
    else
      idx++;
  return -1;
}

struct in_addr
ChooseHisAddr(const struct in_addr gw)
{
  struct in_addr try;
  int f;

  for (f = 0; f < DefHisChoice.nItems; f++) {
    try = iplist_next(&DefHisChoice);
    LogPrintf(LogDEBUG, "ChooseHisAddr: Check item %d (%s)\n",
              f, inet_ntoa(try));
    if (OsTrySetIpaddress(gw, try) == 0) {
      LogPrintf(LogIPCP, "ChooseHisAddr: Selected IP address %s\n",
                inet_ntoa(try));
      break;
    }
  }

  if (f == DefHisChoice.nItems) {
    LogPrintf(LogDEBUG, "ChooseHisAddr: All addresses in use !\n");
    try.s_addr = INADDR_ANY;
  }

  return try;
}
@


1.19
log
@Don't lose an allocated pointer if realloc() fails.
Free it instead.
Pointed out by: Theo de Raadt
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.18 1998/06/27 12:06:48 brian Exp $
@


1.18
log
@Fix ``sizeof(u_long) == 4'' errors.
Suggested by: theo
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.17 1998/04/25 00:22:13 brian Exp $
d348 2
d353 1
a353 1
            ifs = (char **)realloc(ifs, sizeof(char *) * have);
d355 2
a356 2
            ifs = (char **)malloc(sizeof(char *) * have);
          if (!ifs) {
d359 2
d363 1
@


1.17
log
@Fix diagnostic typo.
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.16 1998/03/13 01:26:03 brian Exp $
d256 1
a256 1
  u_long b_mask;
d293 1
a293 1
p_flags(u_long f, int max)
@


1.16
log
@Add extraneous braces to stiffle warnings from gcc-2.8
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.15 1998/01/21 02:13:40 brian Exp $
d147 1
a147 1
    LogPrintf(LogTCPIP, "OsSetRoute:  Cmd = %s\n", cmd);
@


1.15
log
@Remove unused #includes.
Make various bits static.
Remove unused variables.
Submitted by: eivind
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.14 1998/01/19 02:57:34 brian Exp $
d103 1
a103 1
  if (cmd == RTM_ADD)
d130 1
d153 1
a153 1
                           (rtmes.m_rtm.rtm_errno == 0 && errno == EEXIST)))
d162 1
a162 1
    else if (cmd == RTM_DELETE &&
d227 2
a228 2
    else if (dl->sdl_alen)
      if (dl->sdl_type == IFT_ETHER)
d239 1
a239 1
      else
d241 1
a241 1
    else if (dl->sdl_slen)
@


1.14
log
@Reimplement proxy-arp address stuff using sysctl().
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.13 1998/01/11 04:45:06 brian Exp $
a29 1
#include <netinet/in_systm.h>
d254 1
a254 1
struct bits {
@


1.13
log
@Remember any number of interface names.
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.12 1998/01/11 02:57:50 brian Exp $
a56 1
static const char *Index2Nam(int);
d310 1
a310 1
static const char *
@


1.12
log
@Allow 6 byte interface names (for >tun99)
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.11 1997/12/30 02:45:06 brian Exp $
d314 1
a314 1
  static char ifs[200][7];	/* We could have 256 tun devices ! */
d318 1
a318 1
    int mib[6], len;
d343 1
d347 22
a368 8
      if (ifm->ifm_index > 0 && ifm->ifm_index <= sizeof ifs/sizeof ifs[0]
          && ifs[ifm->ifm_index-1][0] == '\0') {
        if ((len = dl->sdl_nlen) > sizeof ifs[0] - 1)
          len = sizeof ifs[0] - 1;
        strncpy(ifs[ifm->ifm_index-1], dl->sdl_data, len);
        ifs[ifm->ifm_index-1][len] = '\0';
        if (len && nifs < ifm->ifm_index)
          nifs = ifm->ifm_index;
d381 1
a381 1
      if (*ifs[f] != '\0')
d386 1
a386 1
  if (idx < 1 || idx > nifs || ifs[idx-1][0] == '\0')
@


1.11
log
@Allow "add! dst mask gw" (note the ``!'') to do an
RTM_CHANGE if the RTM_ADD fails with an EEXIST.
Allow "delete! dst" (note the ``!'') to silently
fail if the RTM_DELETE fails with an ESRCH.
Also, make the ESRCH and EEXIST error conditions
more understandable to the casual observer.
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.10 1997/12/27 19:22:28 brian Exp $
d314 1
a314 1
  static char ifs[200][6];	/* We could have 256 tun devices ! */
@


1.10
log
@Write to the routing socket as uid 0.  It's not good enough
to just open it as uid 0 under OpenBSD.
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.9 1997/12/27 13:45:21 brian Exp $
d70 2
a71 1
	   struct in_addr mask)
d79 4
a82 1
  cmdstr = (cmd == RTM_ADD ? "Add" : "Delete");
d152 18
a169 10
    switch (rtmes.m_rtm.rtm_errno) {
    case EEXIST:
      LogPrintf(LogWARN, "Add route failed: %s already exists\n",
                inet_ntoa(dst));
      break;
    case ESRCH:
      LogPrintf(LogWARN, "Del route failed: %s: Non-existent\n",
                inet_ntoa(dst));
      break;
    case 0:
d172 1
a172 3
      break;
    case ENOBUFS:
    default:
a174 2
      break;
    }
d513 1
a513 1
            OsSetRoute(RTM_DELETE, sa_dst, sa_none, sa_none);
@


1.9
log
@Show who closes the diagnostic connection.
Show the IP range (if specified) in "show ipcp".
Close unused descriptors 0 and 2 in interactive mode.
Pass (size_t *) rather than (int *) to sysctl().
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.8 1997/12/24 09:30:46 brian Exp $
d141 1
a141 1
  wb = write(s, &rtmes, nb);
@


1.8
log
@Cosmetic (style):
  sizeof(var) -> sizeof var
  sizeof type -> sizeof(type)

Suggested by: J Wunsch <j@@uriah.heep.sax.de>
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.7 1997/12/17 21:18:09 brian Exp $
d310 2
a311 1
    int mib[6], needed, len;
d375 1
a375 1
  int needed;
d445 2
a446 1
  int needed, pass;
@


1.7
log
@Don't depend on a u_long being 32 bits.

Pointed out by: Theo de Raadt <deraadt@@cvs.openbsd.org>
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.6 1997/12/17 00:20:37 brian Exp $
d84 1
a84 1
  memset(&rtmes, '\0', sizeof(rtmes));
d92 1
a92 1
  memset(&rtdata, '\0', sizeof(rtdata));
d110 1
a110 1
      dl.sdl_len = sizeof(dl)-sizeof(dl.sdl_data)+ilen;
d117 1
a117 1
      strcpy(dl.sdl_data, iname);
d222 1
a222 1
        if (dl->sdl_alen < sizeof(buf)/3) {
d292 2
a293 2
    if (max > sizeof(name)-1)
      max = sizeof(name)-1;
d337 1
a337 1
      if (ifm->ifm_index > 0 && ifm->ifm_index <= sizeof(ifs)/sizeof(ifs[0])
d339 2
a340 2
        if ((len = dl->sdl_nlen) > sizeof(ifs[0])-1)
          len = sizeof(ifs[0])-1;
@


1.6
log
@Fix a potential overflow where, if the label passed on the command
line is > LINE_LEN (512 bytes), we scribble (*blush*).

Hinted at by: Theo de Raadt <deraadt@@cvs.openbsd.org>

Change sprintf(buf, "fixedstring") to strcpy(buf, "fixedstring").
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.5 1997/12/15 22:48:02 brian Exp $
d286 1
a286 1
p_flags(u_long f, const char *format)
d292 4
a295 1
    for (flags = name; p->b_mask; p++)
d299 1
a299 1
    fprintf(VarTerm, format, name);
d428 2
a429 2
    p_flags(rtm->rtm_flags, "%-6.6s ");
    fprintf(VarTerm, "%s\n", Index2Nam(rtm->rtm_index));
@


1.5
log
@Do 2 passes when "delete all"ing.  The first pass removes
all RTF_WASCLONED routes, and the second removes the
others.  This avoids the situation where we've added an
RTF_CLONING route (such as ``default''), created some
clones, then deleted the CLONING route before the
WASCLONED route(s).  Without the two passes, we get
errno (not rtm_errno) set to ESRCH when deleting the
WASCLONED route, despite the deletion succeeding !

This code is based on the definition of RTF_WASCLONED
which isn't available (yet).

Also:
  Enhance the route operation failure diagnostics.
  Make portability #ifdefs a bit more generic.
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.4 1997/12/15 22:44:58 brian Exp $
d205 1
a205 1
      sprintf(buf, "%s", inet_ntoa(net.sin_addr));
d231 1
a231 1
          sprintf(buf, "??:??:??:??:??:??");
@


1.4
log
@Allow random IP number allocation to peer.
Validate the peers suggested IP by attempting to make a routing table
entry.
Give up IPCP negotiation if the peer NAKs us with an unusable IP.
Always SIOCDIFADDR then SIOCAIFADDR when configuring the tun device.
Using SIOCSIFDSTADDR allows duplicate dst addresses (which we don't
want)!!!
Allow up to 200 interface names (was 50) (now that ppp can play server
properly).

Cosmetic:
  Log unexpected CCP packets in the CCP log rather than the ERROR log.
  Log unexpected Config Reqs in the appropriate LCP/IPCP/CCP log rather
  than the ERROR log.
  Log failed route additions and deletions with WARN, not TCPIP.
  Log the option id and length for unrecognised IPCP options.
  Change some .Sq to .Ar in the man page.
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.3 1997/12/07 04:09:09 brian Exp $
d143 3
a145 1
    LogPrintf(LogTCPIP, "OsSetRoute: Dst = %s\n", inet_ntoa(dst));
d158 2
a159 1
      LogPrintf(LogWARN, "%s route failed: %s\n", cmdstr, strerror(errno));
d163 2
a164 2
      LogPrintf(LogWARN, "%s route failed: %s\n",
		cmdstr, strerror(rtmes.m_rtm.rtm_errno));
a251 1

d266 1
a266 1
#ifdef __FreeBSD__
d268 2
d271 2
d274 2
d281 4
d441 1
a441 1
  int needed;
d474 34
a507 20
  for (cp = sp; cp < ep; cp += rtm->rtm_msglen) {
    rtm = (struct rt_msghdr *) cp;
    sa = (struct sockaddr *) (rtm + 1);
    LogPrintf(LogDEBUG, "DeleteIfRoutes: addrs: %x, Netif: %d (%s), flags: %x,"
	      " dst: %s ?\n", rtm->rtm_addrs, rtm->rtm_index,
              Index2Nam(rtm->rtm_index), rtm->rtm_flags,
	      inet_ntoa(((struct sockaddr_in *) sa)->sin_addr));
    if (rtm->rtm_addrs & RTA_DST && rtm->rtm_addrs & RTA_GATEWAY &&
	rtm->rtm_index == IfIndex &&
	(all || (rtm->rtm_flags & RTF_GATEWAY))) {
      sa_dst.s_addr = ((struct sockaddr_in *)sa)->sin_addr.s_addr;
      sa = (struct sockaddr *)((char *)sa + sa->sa_len);
      if (sa->sa_family == AF_INET || sa->sa_family == AF_LINK) {
        LogPrintf(LogDEBUG, "DeleteIfRoutes: Remove it\n");
        LogPrintf(LogDEBUG, "DeleteIfRoutes: Dst: %s\n", inet_ntoa(sa_dst));
        OsSetRoute(RTM_DELETE, sa_dst, sa_none, sa_none);
      } else
        LogPrintf(LogDEBUG,
                  "DeleteIfRoutes: Can't remove routes of %d family !\n",
                  sa->sa_family);
@


1.3
log
@Only allow one arg to `delete' - the mask & gateway aren't necessary.
Delete AF_LINK routes as well as AF_INET.
Allow the word `default' as the arg to `delete' or in place of the
first two args (dest & netmask) to `add'.
Accept INTERFACE as the third arg to `add'.

  You can now say `add default interface' to create a default route
  through the tun interface.  It's reported that subsequent bind()s
  will bind to a broadcast address and not to the address currently
  assigned to the tun device - this is the first step towards
  supporting that first connection that was around from before the
  dynamic IP negotiation....
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.2 1997/12/06 12:09:16 brian Exp $
d51 3
d148 2
a149 1
      LogPrintf(LogTCPIP, "Add route failed: Already exists\n");
d152 2
a153 1
      LogPrintf(LogTCPIP, "Del route failed: Non-existent\n");
d156 1
a156 1
      LogPrintf(LogTCPIP, "%s route failed: %s\n", cmdstr, strerror(errno));
d160 1
a160 1
      LogPrintf(LogTCPIP, "%s route failed: %s\n",
d291 1
a291 1
  static char ifs[50][6];
d500 25
@


1.2
log
@Understand ``sockaddr_dl''s where sdl_nlen != 0
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.1.1.1 1997/11/23 20:27:35 brian Exp $
d54 1
a72 1
  u_long *lp;
d84 1
a84 1
  rtmes.m_rtm.rtm_addrs = RTA_DST | RTA_NETMASK;
d98 33
a130 2
  if (gateway.s_addr) {
    rtdata.sin_addr = gateway;
d133 1
a133 1
    rtmes.m_rtm.rtm_addrs |= RTA_GATEWAY;
a134 12
  if (dst.s_addr == INADDR_ANY)
    mask.s_addr = INADDR_ANY;

  lp = (u_long *) cp;

  if (mask.s_addr) {
    *lp++ = 8;
    cp += sizeof(int);
    *lp = mask.s_addr;
  } else
    *lp = 0;
  cp += sizeof(u_long);
d423 1
a423 1
  struct in_addr sa_dst, sa_gw, sa_mask;
a425 1
  u_char *wp;
d429 1
a467 1
      wp = (u_char *) cp + rtm->rtm_msglen;
d469 1
a469 1
      if (sa->sa_family == AF_INET) {
a470 8
        sa_gw.s_addr = ((struct sockaddr_in *)sa)->sin_addr.s_addr;
        sa = (struct sockaddr *)((char *)sa + sa->sa_len);
        if (rtm->rtm_addrs & RTA_NETMASK)
          sa_mask.s_addr = ((struct sockaddr_in *)sa)->sin_addr.s_addr;
        else
          sa_mask.s_addr = 0xffffffff;
        if (sa_dst.s_addr == INADDR_ANY)
	  sa_mask.s_addr = INADDR_ANY;
d472 1
a472 3
        LogPrintf(LogDEBUG, "DeleteIfRoutes: Gw: %s\n", inet_ntoa(sa_gw));
        LogPrintf(LogDEBUG, "DeleteIfRoutes: Index: %d\n", rtm->rtm_index);
        OsSetRoute(RTM_DELETE, sa_dst, sa_gw, sa_mask);
d474 3
a476 1
        LogPrintf(LogDEBUG, "DeleteIfRoutes: Can't remove an AF_LINK !\n");
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
 * $Id: route.c,v 1.28 1997/11/22 13:46:02 brian Exp $
a149 1
  const char *cp;
d157 1
a157 1
      cp = "";
d159 1
a159 1
      cp = "default";
d161 1
a161 1
      cp = inet_ntoa(ihost->sin_addr);
a186 1
      cp = buf;
d191 19
a209 3
    if (!dl)
      cp = "";
    else if (dl->sdl_nlen == 0 && dl->sdl_alen == 0 && dl->sdl_slen == 0) {
a210 13
      cp = buf;
    } else if (dl->sdl_type == IFT_ETHER && dl->sdl_alen &&
               dl->sdl_alen < sizeof(buf)/3) {
      int f;
      u_char *MAC;

      MAC = (u_char *)dl->sdl_data + dl->sdl_nlen;
      for (f = 0; f < dl->sdl_alen; f++)
        sprintf(buf+f*3, "%02x:", MAC[f]);
      buf[f*3-1] = '\0';
      cp = buf;
    } else
      cp = "???";
d214 1
a214 1
    cp = "???";
d218 1
a218 1
  fprintf(VarTerm, "%-*s ", width-1, cp);
@


1.1.1.1
log
@Import version 1.5 of ppp.

<sales>
This is a user-level ppp implementation that uses the
tun driver.  It was originally created by a Japanese
ISP.  It's now piled with features.  Check the man pages
for details.
</sales>

The sources are identical to the ones in FreeBSD, except
for the Makefile.

IP aliasing (NAT) is disabled, and can be enabled by simply
doing a ``make install'' of libalias, then rebuilding
ppp.  I'll create libalias as a port soon.
@
text
@@

