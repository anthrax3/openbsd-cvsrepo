head	1.6;
access;
symbols
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	PPP1_5:1.1.1.1
	BRIAN:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	98.08.31.00.20.55;	author brian;	state dead;
branches;
next	1.5;

1.5
date	98.01.18.20.47.20;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	98.01.11.17.54.46;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	98.01.05.01.39.05;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	97.12.15.22.44.53;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	97.11.23.20.27.34;	author brian;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.11.23.20.27.34;	author brian;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@/*
 *	    Written by Toshiharu OHNO (tony-o@@iij.ad.jp)
 *
 *   Copyright (C) 1993, Internet Initiative Japan, Inc. All rights reserverd.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the Internet Initiative Japan.  The name of the
 * IIJ may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $Id: ipcp.h,v 1.5 1998/01/18 20:47:20 brian Exp $
 *
 *	TODO:
 */

#define	IPCP_MAXCODE	CODE_CODEREJ

#define	TY_IPADDRS	1
#define	TY_COMPPROTO	2
#define	TY_IPADDR	3

/* MS PPP NameServer and NetBIOS NameServer stuff */

#ifndef NOMSEXT
#define TY_PRIMARY_DNS		129
#define TY_PRIMARY_NBNS		130
#define TY_SECONDARY_DNS	131
#define TY_SECONDARY_NBNS	132

extern struct in_addr ns_entries[2];
extern struct in_addr nbns_entries[2];
#endif

struct ipcpstate {
  struct in_addr his_ipaddr;	/* IP address he is willing to use */
  u_int32_t his_compproto;

  struct in_addr want_ipaddr;	/* IP address I'm willing to use */
  u_int32_t want_compproto;

  u_int32_t his_reject;		/* Request codes rejected by peer */
  u_int32_t my_reject;		/* Request codes I have rejected */
  int heis1172;			/* True if he is speaking rfc1172 */
};

struct compreq {
  u_short proto;
  u_char slots;
  u_char compcid;
};

struct in_range {
  struct in_addr ipaddr;
  struct in_addr mask;
  int width;
};

extern struct ipcpstate IpcpInfo;
extern struct in_range DefMyAddress;
extern struct in_range DefHisAddress;
extern struct iplist DefHisChoice;
extern struct in_addr TriggerAddress;
extern int HaveTriggerAddress;
extern struct fsm IpcpFsm;

extern void IpcpInit(void);
extern void IpcpDefAddress(void);
extern void IpcpUp(void);
extern void IpcpOpen(void);
extern int  ReportIpcpStatus(struct cmdargs const *);
extern void IpcpInput(struct mbuf *);
extern void IpcpAddInOctets(int);
extern void IpcpAddOutOctets(int);
extern int  UseHisaddr(const char *, int);
extern int  SetInitVJ(struct cmdargs const *);
extern int  ShowInitVJ(struct cmdargs const *);
@


1.5
log
@Allow "set vj" for changing the default number of slots
and whether slot compression is requested.
Don't show current values with "show ipcp" if IPCP isn't
"opened".
@
text
@d18 1
a18 1
 * $Id: ipcp.h,v 1.4 1998/01/11 17:54:46 brian Exp $
@


1.4
log
@Make things work when sizeof(long) != 32 (hopefully)
@
text
@d18 1
a18 1
 * $Id: ipcp.h,v 1.3 1998/01/05 01:39:05 brian Exp $
d82 2
@


1.3
log
@o Allow the use of HISADDR as the first arg to "add".
o Allow a forth argument in ppp.secret, specifying a new
  label.  This gives control over which section of
  ppp.link{up,down} is used based on the authenticated user.
o Support random address ranges in ppp.secret (not just in ppp.conf).
o Add a AUTHENTICATING INCOMING CONNECTIONS section to the man page.
o Add a bit more about DEFLATE in the man page.
o Fix the incorrect "you must specify a password in interactive
  mode" bit of the manual.
o Space things in the man page consistently.
o Be more precice about where you can use MYADDR, HISADDR and INTERFACE
  in the "add" command documentation.
@
text
@d18 1
a18 1
 * $Id: ipcp.h,v 1.2 1997/12/15 22:44:53 brian Exp $
d43 1
a43 1
  u_long his_compproto;
d46 1
a46 1
  u_long want_compproto;
d48 2
a49 2
  u_long his_reject;		/* Request codes rejected by peer */
  u_long my_reject;		/* Request codes I have rejected */
@


1.2
log
@Allow random IP number allocation to peer.
Validate the peers suggested IP by attempting to make a routing table
entry.
Give up IPCP negotiation if the peer NAKs us with an unusable IP.
Always SIOCDIFADDR then SIOCAIFADDR when configuring the tun device.
Using SIOCSIFDSTADDR allows duplicate dst addresses (which we don't
want)!!!
Allow up to 200 interface names (was 50) (now that ppp can play server
properly).

Cosmetic:
  Log unexpected CCP packets in the CCP log rather than the ERROR log.
  Log unexpected Config Reqs in the appropriate LCP/IPCP/CCP log rather
  than the ERROR log.
  Log failed route additions and deletions with WARN, not TCPIP.
  Log the option id and length for unrecognised IPCP options.
  Change some .Sq to .Ar in the man page.
@
text
@d18 1
a18 1
 * $Id: ipcp.h,v 1.1.1.1 1997/11/23 20:27:34 brian Exp $
d77 1
a77 1
extern int ReportIpcpStatus(struct cmdargs const *);
d81 1
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
 * $Id: ipcp.h,v 1.14 1997/11/22 03:37:35 brian Exp $
d68 1
@


1.1.1.1
log
@Import version 1.5 of ppp.

<sales>
This is a user-level ppp implementation that uses the
tun driver.  It was originally created by a Japanese
ISP.  It's now piled with features.  Check the man pages
for details.
</sales>

The sources are identical to the ones in FreeBSD, except
for the Makefile.

IP aliasing (NAT) is disabled, and can be enabled by simply
doing a ``make install'' of libalias, then rebuilding
ppp.  I'll create libalias as a port soon.
@
text
@@
