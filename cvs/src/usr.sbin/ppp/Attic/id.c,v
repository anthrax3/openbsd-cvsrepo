head	1.6;
access;
symbols
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	PPP1_5:1.1.1.1
	BRIAN:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	98.08.31.00.20.48;	author brian;	state dead;
branches;
next	1.5;

1.5
date	98.02.19.02.02.46;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	98.01.21.02.13.33;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	97.12.27.19.22.26;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	97.12.21.14.27.03;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	97.11.23.20.27.34;	author brian;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.11.23.20.27.34;	author brian;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@/*-
 * Copyright (c) 1997 Brian Somers <brian@@Awfulhak.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$Id: id.c,v 1.5 1998/02/19 02:02:46 brian Exp $
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <sys/ioctl.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <sysexits.h>
#include <unistd.h>
#ifdef __OpenBSD__
#include <util.h>
#else
#include <libutil.h>
#endif
#include <utmp.h>

#include "command.h"
#include "mbuf.h"
#include "log.h"
#include "main.h"
#include "id.h"

static int uid;
static int euid;

void
ID0init()
{
  uid = getuid();
  euid = geteuid();
}

static void
ID0setuser(void)
{
  if (seteuid(uid) == -1) {
    LogPrintf(LogERROR, "ID0setuser: Unable to seteuid!\n");
    Cleanup(EX_NOPERM);
  }
}

uid_t
ID0realuid()
{
  return uid;
}

static void
ID0set0(void)
{
  if (seteuid(euid) == -1) {
    LogPrintf(LogERROR, "ID0set0: Unable to seteuid!\n");
    Cleanup(EX_NOPERM);
  }
}

int
ID0ioctl(int fd, unsigned long req, void *arg)
{
  int ret;

  ID0set0();
  ret = ioctl(fd, req, arg);
  LogPrintf(LogID0, "%d = ioctl(%d, %d, %p)\n", ret, fd, req, arg);
  ID0setuser();
  return ret;
}

int
ID0unlink(const char *name)
{
  int ret;

  ID0set0();
  ret = unlink(name);
  LogPrintf(LogID0, "%d = unlink(\"%s\")\n", ret, name);
  ID0setuser();
  return ret;
}

int
ID0socket(int domain, int type, int protocol)
{
  int ret;

  ID0set0();
  ret = socket(domain, type, protocol);
  LogPrintf(LogID0, "%d = socket(%d, %d, %d)\n", ret, domain, type, protocol);
  ID0setuser();
  return ret;
}

FILE *
ID0fopen(const char *path, const char *mode)
{
  FILE *ret;

  ID0set0();
  ret = fopen(path, mode);
  LogPrintf(LogID0, "%p = fopen(\"%s\", \"%s\")\n", ret, path, mode);
  ID0setuser();
  return ret;
}

int
ID0open(const char *path, int flags)
{
  int ret;

  ID0set0();
  ret = open(path, flags);
  LogPrintf(LogID0, "%d = open(\"%s\", %d)\n", ret, path, flags);
  ID0setuser();
  return ret;
}

int
ID0write(int fd, const void *data, size_t len)
{
  int ret;

  ID0set0();
  ret = write(fd, data, len);
  LogPrintf(LogID0, "%d = write(%d, data, %d)\n", ret, fd, len);
  ID0setuser();
  return ret;
}

int
ID0uu_lock(const char *basettyname)
{
  int ret;

  ID0set0();
  ret = uu_lock(basettyname);
  LogPrintf(LogID0, "%d = uu_lock(\"%s\")\n", ret, basettyname);
  ID0setuser();
  return ret;
}

int
ID0uu_unlock(const char *basettyname)
{
  int ret;

  ID0set0();
  ret = uu_unlock(basettyname);
  LogPrintf(LogID0, "%d = uu_unlock(\"%s\")\n", ret, basettyname);
  ID0setuser();
  return ret;
}

void
ID0login(struct utmp *ut)
{
  ID0set0();
  if (logout(ut->ut_line)) {
    LogPrintf(LogID0, "logout(\"%s\")\n", ut->ut_line);
    logwtmp(ut->ut_line, "", "");
    LogPrintf(LogID0, "logwtmp(\"%s\", \"\", \"\")\n", ut->ut_line);
  }
  login(ut);
  LogPrintf(LogID0, "login(\"%s\", \"%.*s\")\n",
            ut->ut_line, sizeof ut->ut_name, ut->ut_name);
  ID0setuser();
}

void
ID0logout(const char *device)
{
  struct utmp ut;

  strncpy(ut.ut_line, device, sizeof ut.ut_line - 1);
  ut.ut_line[sizeof ut.ut_line - 1] = '\0';

  ID0set0();
  if (logout(ut.ut_line)) {
    LogPrintf(LogID0, "logout(\"%s\")\n", ut.ut_line);
    logwtmp(ut.ut_line, "", ""); 
    LogPrintf(LogID0, "logwtmp(\"%s\", \"\", \"\")\n", ut.ut_line);
  } else
    LogPrintf(LogERROR, "ID0logout: No longer logged in on %s\n", ut.ut_line);
  ID0setuser();
}
@


1.5
log
@Allow 8 character login names.
Pointed out by: Forgotten

Do the login()/logwtmp()/logout() as id 0.
@
text
@d26 1
a26 1
 *	$Id: id.c,v 1.4 1998/01/21 02:13:33 brian Exp $
@


1.4
log
@Remove unused #includes.
Make various bits static.
Remove unused variables.
Submitted by: eivind
@
text
@d26 1
a26 1
 *	$Id: id.c,v 1.3 1997/12/27 19:22:26 brian Exp $
d35 1
d38 6
a48 5
#ifdef __OpenBSD__
#include <util.h>
#else
#include <libutil.h>
#endif
d179 33
@


1.3
log
@Write to the routing socket as uid 0.  It's not good enough
to just open it as uid 0 under OpenBSD.
@
text
@d26 1
a26 1
 *	$Id: id.c,v 1.2 1997/12/21 14:27:03 brian Exp $
a34 1
#include <stdlib.h>
a49 1
static int gid;
a50 1
static int egid;
a55 1
  gid = getgid();
a56 1
  egid = getegid();
@


1.2
log
@Add (BSD) copyright headers
@
text
@d26 1
a26 1
 *	$Id$
d144 12
@


1.1
log
@Initial revision
@
text
@d1 26
a26 2
/*
 * $Id: id.c,v 1.3 1997/11/22 03:37:33 brian Exp $
@


1.1.1.1
log
@Import version 1.5 of ppp.

<sales>
This is a user-level ppp implementation that uses the
tun driver.  It was originally created by a Japanese
ISP.  It's now piled with features.  Check the man pages
for details.
</sales>

The sources are identical to the ones in FreeBSD, except
for the Makefile.

IP aliasing (NAT) is disabled, and can be enabled by simply
doing a ``make install'' of libalias, then rebuilding
ppp.  I'll create libalias as a port soon.
@
text
@@
