head	1.7;
access;
symbols
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	PPP1_5:1.1.1.1
	BRIAN:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	98.08.31.00.20.23;	author brian;	state dead;
branches;
next	1.6;

1.6
date	98.06.28.09.41.35;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	98.01.11.17.54.45;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	98.01.10.01.55.14;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	98.01.04.20.29.22;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	97.12.06.12.08.55;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	97.11.23.20.27.33;	author brian;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.11.23.20.27.33;	author brian;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@/*
 *	    Written by Toshiharu OHNO (tony-o@@iij.ad.jp)
 *
 *   Copyright (C) 1993, Internet Initiative Japan, Inc. All rights reserverd.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the Internet Initiative Japan.  The name of the
 * IIJ may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $Id: ccp.h,v 1.6 1998/06/28 09:41:35 brian Exp $
 *
 *	TODO:
 */

#define	CCP_MAXCODE	CODE_RESETACK

#define	TY_OUI		0	/* OUI */
#define	TY_PRED1	1	/* Predictor type 1 */
#define	TY_PRED2	2	/* Predictor type 2 */
#define	TY_PUDDLE	3	/* Puddle Jumper */
#define	TY_HWPPC	16	/* Hewlett-Packard PPC */
#define	TY_STAC		17	/* Stac Electronics LZS */
#define	TY_MSPPC	18	/* Microsoft PPC */
#define	TY_GAND		19	/* Gandalf FZA */
#define	TY_V42BIS	20	/* V.42bis compression */
#define	TY_BSD		21	/* BSD LZW Compress */
#define	TY_PPPD_DEFLATE	24	/* Deflate (gzip) - (mis) numbered by pppd */
#define	TY_DEFLATE	26	/* Deflate (gzip) - rfc 1979 */

struct ccpstate {
  int his_proto;		/* peer's compression protocol */
  int my_proto;			/* our compression protocol */

  int reset_sent;		/* If != -1, ignore compressed 'till ack */
  int last_reset;		/* We can receive more (dups) w/ this id */

  u_int32_t his_reject;		/* Request codes rejected by peer */
  u_int32_t my_reject;		/* Request codes I have rejected */

  int out_init;			/* Init called for out algorithm */
  int in_init;			/* Init called for in algorithm */

  u_long uncompout, compout;	/* Outgoing bytes before/after compression */
  u_long uncompin, compin;	/* Incoming bytes after/before decompression */
};

extern struct ccpstate CcpInfo;

struct ccp_algorithm {
  int id;
  int Conf;					/* A Conf value from vars.h */
  const char *(*Disp)(struct lcp_opt *);
  struct {
    void (*Get)(struct lcp_opt *);
    int (*Set)(struct lcp_opt *);
    int (*Init)(void);
    void (*Term)(void);
    void (*Reset)(void);
    struct mbuf *(*Read)(u_short *, struct mbuf *);
    void (*DictSetup)(u_short, struct mbuf *);
  } i;
  struct {
    void (*Get)(struct lcp_opt *);
    int (*Set)(struct lcp_opt *);
    int (*Init)(void);
    void (*Term)(void);
    void (*Reset)(void);
    int (*Write)(int, u_short, struct mbuf *);
  } o;
};

extern struct fsm CcpFsm;

extern void CcpRecvResetReq(struct fsm *);
extern void CcpSendResetReq(struct fsm *);
extern void CcpInput(struct mbuf *);
extern void CcpUp(void);
extern void CcpOpen(void);
extern void CcpInit(void);
extern int ReportCcpStatus(struct cmdargs const *);
extern void CcpResetInput(u_char);
extern int CcpOutput(int, u_short, struct mbuf *);
extern struct mbuf *CompdInput(u_short *, struct mbuf *);
extern void CcpDictSetup(u_short, struct mbuf *);
@


1.6
log
@Don't assume sizeof(long) == 4
@
text
@d18 1
a18 1
 * $Id: ccp.h,v 1.5 1998/01/11 17:54:45 brian Exp $
@


1.5
log
@Make things work when sizeof(long) != 32 (hopefully)
@
text
@d18 1
a18 1
 * $Id: ccp.h,v 1.4 1998/01/10 01:55:14 brian Exp $
d51 2
a52 2
  u_long uncompout, compout;
  u_long uncompin, compin;
@


1.4
log
@Implement Reset{Req,Ack} properly, as per rfc 1962.
(I completely mis-read the rfc last time 'round!)

This means:
  o Better CCP/WARN Reset diagnostics.
  o After we've sent a REQ and before we've received an ACK, we drop
    incoming compressed data and send another REQ.
  o Before sending an ACK, re-sequence all pending PRI_NORMAL data in
    the modem queue so that pending packets won't get to the peer
    *after* the ResetAck.
  o Send ACKs with the `identifier' from the REQ frame.
  o After we've received a correct ACK, duplicate ACKs are ok (and will
    reset our history).
  o Incorrect ACKs (not matching the last REQ) are moaned about and dropped.

Also,

  o Calculate the correct FCS after compressing a packet.  DEFLATE
    *may* produce an mbuf with more than a single link in the chain,
    but HdlcOutput didn't know how to calculate the FCS :-(
  o Make `struct fsm'::reqid a u_char, not an int.
    This fix will prevent us from sending id `255' 2,000,000,000 times
    before wrapping to `0' for another 2,000,000,000 sends :-/
  o Bump the version number a little (it should already have been at 1.6).

The end result:  DEFLATE now works over an unreliable link layer.
                 I can txfr a 1.5Mb kernel over a (rather bad) null-modem
                 cable at an average of 21679 bytes per second using rcp.
Repeat after me: Don't test compression using a loopback ppp/tcp setup as
                 we never lose packets and therefore never have to reset!
@
text
@d18 1
a18 1
 * $Id: ccp.h,v 1.3 1998/01/04 20:29:22 brian Exp $
d39 2
a40 2
  u_long his_proto;		/* peer's compression protocol */
  u_long my_proto;		/* our compression protocol */
d45 2
a46 2
  u_long his_reject;		/* Request codes rejected by peer */
  u_long my_reject;		/* Request codes I have rejected */
@


1.3
log
@Initialize CcpInfo protocols to -1 (none, not OUI).
Don't Call Term() for an algorithm that hasn't been Init()d.
@
text
@d18 1
a18 1
 * $Id: ccp.h,v 1.2 1997/12/06 12:08:55 brian Exp $
d42 3
d89 1
a89 1
extern void CcpResetInput(void);
@


1.2
log
@Add DEFLATE capabilities (rfc1979).
@
text
@d18 1
a18 1
 * $Id: ccp.h,v 1.1.1.1 1997/11/23 20:27:33 brian Exp $
d44 3
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
 * $Id: ccp.h,v 1.9 1997/11/22 03:37:25 brian Exp $
d35 2
d40 1
a40 1
  u_long want_proto;		/* my compression protocol */
d45 2
a46 2
  u_long orgout, compout;
  u_long orgin, compin;
d50 24
d83 4
@


1.1.1.1
log
@Import version 1.5 of ppp.

<sales>
This is a user-level ppp implementation that uses the
tun driver.  It was originally created by a Japanese
ISP.  It's now piled with features.  Check the man pages
for details.
</sales>

The sources are identical to the ones in FreeBSD, except
for the Makefile.

IP aliasing (NAT) is disabled, and can be enabled by simply
doing a ``make install'' of libalias, then rebuilding
ppp.  I'll create libalias as a port soon.
@
text
@@
