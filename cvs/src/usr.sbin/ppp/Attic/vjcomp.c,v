head	1.5;
access;
symbols
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	PPP1_5:1.1.1.1
	BRIAN:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	98.08.31.00.21.56;	author brian;	state dead;
branches;
next	1.4;

1.4
date	98.01.21.02.13.44;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	98.01.11.17.54.49;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	97.12.06.12.09.06;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	97.11.23.20.27.37;	author brian;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.11.23.20.27.37;	author brian;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@/*
 *	       Input/Output VJ Compressed packets
 *
 *	    Written by Toshiharu OHNO (tony-o@@iij.ad.jp)
 *
 *   Copyright (C) 1993, Internet Initiative Japan, Inc. All rights reserverd.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the Internet Initiative Japan, Inc.  The name of the
 * IIJ may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $Id: vjcomp.c,v 1.4 1998/01/21 02:13:44 brian Exp $
 *
 *  TODO:
 */
#include <sys/types.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>

#include <stdio.h>
#include <string.h>

#include "command.h"
#include "mbuf.h"
#include "log.h"
#include "timer.h"
#include "fsm.h"
#include "lcpproto.h"
#include "slcompress.h"
#include "hdlc.h"
#include "ipcp.h"
#include "vjcomp.h"

#define MAX_VJHEADER 16		/* Maximum size of compressed header */

static struct slcompress cslc;

void
VjInit(int max_state)
{
  sl_compress_init(&cslc, max_state);
}

void
SendPppFrame(struct mbuf * bp)
{
  int type;
  u_short proto;
  u_short cproto = IpcpInfo.his_compproto >> 16;

  LogPrintf(LogDEBUG, "SendPppFrame: proto = %x\n", IpcpInfo.his_compproto);
  if (((struct ip *) MBUF_CTOP(bp))->ip_p == IPPROTO_TCP
      && cproto == PROTO_VJCOMP) {
    type = sl_compress_tcp(bp, (struct ip *)MBUF_CTOP(bp), &cslc,
                           IpcpInfo.his_compproto & 0xff);
    LogPrintf(LogDEBUG, "SendPppFrame: type = %x\n", type);
    switch (type) {
    case TYPE_IP:
      proto = PROTO_IP;
      break;
    case TYPE_UNCOMPRESSED_TCP:
      proto = PROTO_VJUNCOMP;
      break;
    case TYPE_COMPRESSED_TCP:
      proto = PROTO_VJCOMP;
      break;
    default:
      LogPrintf(LogERROR, "Unknown frame type %x\n", type);
      pfree(bp);
      return;
    }
  } else
    proto = PROTO_IP;
  HdlcOutput(PRI_NORMAL, proto, bp);
}

static struct mbuf *
VjUncompressTcp(struct mbuf * bp, u_char type)
{
  u_char *bufp;
  int len, olen, rlen;
  struct mbuf *nbp;
  u_char work[MAX_HDR + MAX_VJHEADER];	/* enough to hold TCP/IP header */

  olen = len = plength(bp);
  if (type == TYPE_UNCOMPRESSED_TCP) {

    /*
     * Uncompressed packet does NOT change its size, so that we can use mbuf
     * space for uncompression job.
     */
    bufp = MBUF_CTOP(bp);
    len = sl_uncompress_tcp(&bufp, len, type, &cslc);
    if (len <= 0) {
      pfree(bp);
      bp = NULL;
    }
    return (bp);
  }

  /*
   * Handle compressed packet. 1) Read upto MAX_VJHEADER bytes into work
   * space. 2) Try to uncompress it. 3) Compute amount of necesary space. 4)
   * Copy unread data info there.
   */
  if (len > MAX_VJHEADER)
    len = MAX_VJHEADER;
  rlen = len;
  bufp = work + MAX_HDR;
  bp = mbread(bp, bufp, rlen);
  len = sl_uncompress_tcp(&bufp, olen, type, &cslc);
  if (len <= 0) {
    pfree(bp);
    return NULL;
  }
  len -= olen;
  len += rlen;
  nbp = mballoc(len, MB_VJCOMP);
  memcpy(MBUF_CTOP(nbp), bufp, len);
  nbp->next = bp;
  return (nbp);
}

struct mbuf *
VjCompInput(struct mbuf * bp, int proto)
{
  u_char type;

  LogPrintf(LogDEBUG, "VjCompInput: proto %02x\n", proto);
  LogDumpBp(LogDEBUG, "Raw packet info:", bp);

  switch (proto) {
  case PROTO_VJCOMP:
    type = TYPE_COMPRESSED_TCP;
    break;
  case PROTO_VJUNCOMP:
    type = TYPE_UNCOMPRESSED_TCP;
    break;
  default:
    LogPrintf(LogERROR, "VjCompInput...???\n");
    return (bp);
  }
  bp = VjUncompressTcp(bp, type);
  return (bp);
}

const char *
vj2asc(u_int32_t val)
{
  static char asc[50];

  sprintf(asc, "%d VJ slots %s slot compression",
          (int)((val>>8)&15)+1, val & 1 ?  "with" : "without");
  return asc;
}
@


1.4
log
@Remove unused #includes.
Make various bits static.
Remove unused variables.
Submitted by: eivind
@
text
@d20 1
a20 1
 * $Id: vjcomp.c,v 1.3 1998/01/11 17:54:49 brian Exp $
@


1.3
log
@Make things work when sizeof(long) != 32 (hopefully)
@
text
@d20 1
a20 1
 * $Id: vjcomp.c,v 1.2 1997/12/06 12:09:06 brian Exp $
a34 1
#include "defs.h"
d45 1
a45 1
struct slcompress cslc;
d105 1
a105 1
      bp = NULLBUFF;
d123 1
a123 1
    return NULLBUFF;
@


1.2
log
@Add DEFLATE capabilities (rfc1979).
@
text
@d20 1
a20 1
 * $Id: vjcomp.c,v 1.1.1.1 1997/11/23 20:27:37 brian Exp $
d158 1
a158 1
vj2asc(u_long val)
d162 2
a163 2
  sprintf(asc, "%ld VJ slots %s slot compression",
          ((val>>8)&15)+1, val & 1 ?  "with" : "without");
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
 * $Id: vjcomp.c,v 1.13 1997/11/22 03:37:54 brian Exp $
d58 2
a59 2
  int proto;
  int cproto = IpcpInfo.his_compproto >> 16;
d64 2
a65 2
    type = sl_compress_tcp(bp, (struct ip *) MBUF_CTOP(bp), &cslc, IpcpInfo.his_compproto & 0xff);

d155 10
@


1.1.1.1
log
@Import version 1.5 of ppp.

<sales>
This is a user-level ppp implementation that uses the
tun driver.  It was originally created by a Japanese
ISP.  It's now piled with features.  Check the man pages
for details.
</sales>

The sources are identical to the ones in FreeBSD, except
for the Makefile.

IP aliasing (NAT) is disabled, and can be enabled by simply
doing a ``make install'' of libalias, then rebuilding
ppp.  I'll create libalias as a port soon.
@
text
@@
