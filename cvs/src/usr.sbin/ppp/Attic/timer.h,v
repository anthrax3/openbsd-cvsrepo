head	1.4;
access;
symbols
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	PPP1_5:1.1.1.1
	BRIAN:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	98.08.31.00.21.49;	author brian;	state dead;
branches;
next	1.3;

1.3
date	98.01.21.02.13.42;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	97.12.28.21.54.25;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	97.11.23.20.27.36;	author brian;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.11.23.20.27.36;	author brian;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@/*
 *	    Written by Toshiharu OHNO (tony-o@@iij.ad.jp)
 *
 *   Copyright (C) 1993, Internet Initiative Japan, Inc. All rights reserverd.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the Internet Initiative Japan.  The name of the
 * IIJ may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $Id: timer.h,v 1.3 1998/01/21 02:13:42 brian Exp $
 *
 *	TODO:
 */

#define	TICKUNIT	100000	/* Unit in usec */
#define	SECTICKS	(1000000/TICKUNIT)

struct pppTimer {
  int state;
  u_long rest;			/* Ticks to expire */
  u_long load;			/* Initial load value */
  void (*func)(void *);		/* Function called when timer is expired */
  void *arg;			/* Argument passed to timeout function */
  struct pppTimer *next;	/* Link to next timer */
  struct pppTimer *enext;	/* Link to next expired timer */
};

#define	TIMER_STOPPED	0
#define	TIMER_RUNNING	1
#define	TIMER_EXPIRED	2

extern void StartTimer(struct pppTimer *);
extern void StopTimer(struct pppTimer *);
extern void TermTimerService(void);
extern void ShowTimers(void);

#ifdef SIGALRM
extern void nointr_sleep(u_int);
extern void nointr_usleep(u_int);
#endif
@


1.3
log
@Remove unused #includes.
Make various bits static.
Remove unused variables.
Submitted by: eivind
@
text
@d18 1
a18 1
 * $Id: timer.h,v 1.2 1997/12/28 21:54:25 brian Exp $
@


1.2
log
@Don't expect select() to adjust the passed time when it's
interrupted with a SIGALRM.  In fact, select() sets the
passed time to zero, making the previous implementation
terminate always after 1/10th of a second !

Also, deal with someone changing the clock while we're
sleeping (and restart the whole sleep).

Dangers pointed out by: Theo de Raadt <deraadt@@cvs.openbsd.org>
@
text
@d18 1
a18 1
 * $Id: timer.h,v 1.1.1.1 1997/11/23 20:27:36 brian Exp $
a39 2
extern struct pppTimer *TimerList;

a41 1
extern void TimerService(void);
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
 * $Id: timer.h,v 1.3 1997/11/22 03:37:52 brian Exp $
d49 1
a49 1
extern u_int nointr_sleep(u_int);
@


1.1.1.1
log
@Import version 1.5 of ppp.

<sales>
This is a user-level ppp implementation that uses the
tun driver.  It was originally created by a Japanese
ISP.  It's now piled with features.  Check the man pages
for details.
</sales>

The sources are identical to the ones in FreeBSD, except
for the Makefile.

IP aliasing (NAT) is disabled, and can be enabled by simply
doing a ``make install'' of libalias, then rebuilding
ppp.  I'll create libalias as a port soon.
@
text
@@
