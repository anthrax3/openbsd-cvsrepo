head	1.11;
access;
symbols
	OPENBSD_2_3:1.10.0.2
	OPENBSD_2_3_BASE:1.10
	PPP1_5:1.1.1.1
	BRIAN:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	98.08.31.00.20.13;	author brian;	state dead;
branches;
next	1.10;

1.10
date	98.01.24.00.00.33;	author brian;	state Exp;
branches;
next	1.9;

1.9
date	98.01.23.22.26.34;	author brian;	state Exp;
branches;
next	1.8;

1.8
date	98.01.23.21.57.11;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	98.01.21.12.50.54;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	98.01.19.22.32.01;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	98.01.19.02.57.32;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	98.01.11.04.01.51;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	97.12.24.09.30.20;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	97.12.23.22.38.00;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	97.11.23.20.27.32;	author brian;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.11.23.20.27.32;	author brian;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@/*
 * sys-bsd.c - System-dependent procedures for setting up
 * PPP interfaces on bsd-4.4-ish systems (including 386BSD, NetBSD, etc.)
 *
 * Copyright (c) 1989 Carnegie Mellon University.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by Carnegie Mellon University.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $Id: arp.c,v 1.10 1998/01/24 00:00:33 brian Exp $
 *
 */

/*
 * TODO:
 */

#include <sys/param.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <net/if.h>
#include <net/route.h>
#include <net/if_dl.h>
#include <netinet/in.h>
#include <net/if_types.h>
#include <netinet/if_ether.h>
#include <arpa/inet.h>

#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/errno.h>
#include <sys/ioctl.h>
#include <sys/sysctl.h>
#include <sys/uio.h>
#include <unistd.h>

#include "command.h"
#include "mbuf.h"
#include "log.h"
#include "id.h"
#include "route.h"
#include "arp.h"

#ifdef DEBUG
/*
 * To test the proxy arp stuff, just
 * 
 * cc -o arp-test -DDEBUG arp.c
 *
 */
#define LogIsKept(x) 1
#define LogPrintf fprintf
#undef LogDEBUG
#define LogDEBUG stderr
#undef LogERROR
#define LogERROR stderr
#undef LogPHASE
#define LogPHASE stdout
#define ID0socket socket
#define ID0ioctl ioctl
#endif

static int rtm_seq;

static int get_ether_addr(int, struct in_addr, struct sockaddr_dl *);

/*
 * SET_SA_FAMILY - set the sa_family field of a struct sockaddr,
 * if it exists.
 */
#define SET_SA_FAMILY(addr, family)		\
    memset((char *) &(addr), '\0', sizeof(addr));	\
    addr.sa_family = (family); 			\
    addr.sa_len = sizeof(addr);


#if RTM_VERSION >= 3

/*
 * sifproxyarp - Make a proxy ARP entry for the peer.
 */
static struct {
  struct rt_msghdr hdr;
  struct sockaddr_inarp dst;
  struct sockaddr_dl hwa;
  char extra[128];
} arpmsg;

static int arpmsg_valid;

int
sifproxyarp(int unit, struct in_addr hisaddr)
{
  int routes;

  /*
   * Get the hardware address of an interface on the same subnet as our local
   * address.
   */
  memset(&arpmsg, 0, sizeof arpmsg);
  if (!get_ether_addr(unit, hisaddr, &arpmsg.hwa)) {
    LogPrintf(LogERROR, "Cannot determine ethernet address for proxy ARP\n");
    return 0;
  }
  routes = ID0socket(PF_ROUTE, SOCK_RAW, AF_INET);
  if (routes < 0) {
    LogPrintf(LogERROR, "sifproxyarp: opening routing socket: %s\n",
	      strerror(errno));
    return 0;
  }
  arpmsg.hdr.rtm_type = RTM_ADD;
  arpmsg.hdr.rtm_flags = RTF_ANNOUNCE | RTF_HOST | RTF_STATIC;
  arpmsg.hdr.rtm_version = RTM_VERSION;
  arpmsg.hdr.rtm_seq = ++rtm_seq;
  arpmsg.hdr.rtm_addrs = RTA_DST | RTA_GATEWAY;
  arpmsg.hdr.rtm_inits = RTV_EXPIRE;
  arpmsg.dst.sin_len = sizeof(struct sockaddr_inarp);
  arpmsg.dst.sin_family = AF_INET;
  arpmsg.dst.sin_addr.s_addr = hisaddr.s_addr;
  arpmsg.dst.sin_other = SIN_PROXY;

  arpmsg.hdr.rtm_msglen = (char *) &arpmsg.hwa - (char *) &arpmsg
    + arpmsg.hwa.sdl_len;
  if (write(routes, &arpmsg, arpmsg.hdr.rtm_msglen) < 0) {
    LogPrintf(LogERROR, "Add proxy arp entry: %s\n", strerror(errno));
    close(routes);
    return 0;
  }
  close(routes);
  arpmsg_valid = 1;
  return 1;
}

/*
 * cifproxyarp - Delete the proxy ARP entry for the peer.
 */
int
cifproxyarp(int unit, struct in_addr hisaddr)
{
  int routes;

  if (!arpmsg_valid)
    return 0;
  arpmsg_valid = 0;

  arpmsg.hdr.rtm_type = RTM_DELETE;
  arpmsg.hdr.rtm_seq = ++rtm_seq;

  routes = ID0socket(PF_ROUTE, SOCK_RAW, AF_INET);
  if (routes < 0) {
    LogPrintf(LogERROR, "sifproxyarp: opening routing socket: %s\n",
	      strerror(errno));
    return 0;
  }
  if (write(routes, &arpmsg, arpmsg.hdr.rtm_msglen) < 0) {
    LogPrintf(LogERROR, "Delete proxy arp entry: %s\n", strerror(errno));
    close(routes);
    return 0;
  }
  close(routes);
  return 1;
}

#else				/* RTM_VERSION */

/*
 * sifproxyarp - Make a proxy ARP entry for the peer.
 */
int
sifproxyarp(int unit, struct in_addr hisaddr)
{
  struct arpreq arpreq;
  struct {
    struct sockaddr_dl sdl;
    char space[128];
  }      dls;

  memset(&arpreq, '\0', sizeof arpreq);

  /*
   * Get the hardware address of an interface on the same subnet as our local
   * address.
   */
  if (!get_ether_addr(unit, hisaddr, &dls.sdl)) {
    LogPrintf(LOG_PHASE_BIT, "Cannot determine ethernet address for proxy ARP\n");
    return 0;
  }
  arpreq.arp_ha.sa_len = sizeof(struct sockaddr);
  arpreq.arp_ha.sa_family = AF_UNSPEC;
  memcpy(arpreq.arp_ha.sa_data, LLADDR(&dls.sdl), dls.sdl.sdl_alen);
  SET_SA_FAMILY(arpreq.arp_pa, AF_INET);
  ((struct sockaddr_in *) & arpreq.arp_pa)->sin_addr.s_addr = hisaddr.s_addr;
  arpreq.arp_flags = ATF_PERM | ATF_PUBL;
  if (ID0ioctl(unit, SIOCSARP, (caddr_t) & arpreq) < 0) {
    LogPrintf(LogERROR, "sifproxyarp: ioctl(SIOCSARP): %s\n", strerror(errno));
    return 0;
  }
  return 1;
}

/*
 * cifproxyarp - Delete the proxy ARP entry for the peer.
 */
int
cifproxyarp(int unit, struct in_addr hisaddr)
{
  struct arpreq arpreq;

  memset(&arpreq, '\0', sizeof arpreq);
  SET_SA_FAMILY(arpreq.arp_pa, AF_INET);
  ((struct sockaddr_in *) & arpreq.arp_pa)->sin_addr.s_addr = hisaddr.s_addr;
  if (ID0ioctl(unit, SIOCDARP, (caddr_t) & arpreq) < 0) {
    LogPrintf(LogERROR, "cifproxyarp: ioctl(SIOCDARP): %s\n", strerror(errno));
    return 0;
  }
  return 1;
}

#endif				/* RTM_VERSION */


/*
 * get_ether_addr - get the hardware address of an interface on the
 * the same subnet as ipaddr.
 */

static int
get_ether_addr(int s, struct in_addr ipaddr, struct sockaddr_dl *hwaddr)
{
  int mib[6], sa_len, skip, b;
  size_t needed;
  char *buf, *ptr, *end;
  struct if_msghdr *ifm;
  struct ifa_msghdr *ifam;
  struct sockaddr *sa;
  struct sockaddr_dl *dl;
  struct sockaddr_in *ifa, *mask;

  mib[0] = CTL_NET;
  mib[1] = PF_ROUTE;
  mib[2] = 0;
  mib[3] = 0;
  mib[4] = NET_RT_IFLIST;
  mib[5] = 0;

  if (sysctl(mib, 6, NULL, &needed, NULL, 0) < 0) {
    LogPrintf(LogERROR, "get_ether_addr: sysctl: estimate: %s\n",
              strerror(errno));
    return 0;
  }

  if ((buf = malloc(needed)) == NULL)
    return 0;

  if (sysctl(mib, 6, buf, &needed, NULL, 0) < 0) {
    free(buf);
    return 0;
  }
  end = buf + needed;

  ptr = buf;
  while (ptr < end) {
    ifm = (struct if_msghdr *)ptr;		/* On if_msghdr */
    if (ifm->ifm_type != RTM_IFINFO)
      break;
    dl = (struct sockaddr_dl *)(ifm + 1);	/* Single _dl at end */
    skip = (ifm->ifm_flags & (IFF_UP | IFF_BROADCAST | IFF_POINTOPOINT |
            IFF_NOARP | IFF_LOOPBACK)) != (IFF_UP | IFF_BROADCAST);
    ptr += ifm->ifm_msglen;			/* First ifa_msghdr */
    while (ptr < end) {
      ifam = (struct ifa_msghdr *)ptr;	/* Next ifa_msghdr (alias) */
      if (ifam->ifam_type != RTM_NEWADDR)	/* finished ? */
        break;
      sa = (struct sockaddr *)(ifam+1);	/* pile of sa's at end */
      ptr += ifam->ifam_msglen;
      if (skip || (ifam->ifam_addrs & (RTA_NETMASK|RTA_IFA)) !=
          (RTA_NETMASK|RTA_IFA))
        continue;
      /* Found a candidate.  Do the addresses match ? */
      if (LogIsKept(LogDEBUG) &&
          ptr == (char *)ifm + ifm->ifm_msglen + ifam->ifam_msglen)
        LogPrintf(LogDEBUG, "%.*s interface is a candidate for proxy\n",
                  dl->sdl_nlen, dl->sdl_data);
      b = 1;
      ifa = mask = NULL;
      while (b < (RTA_NETMASK|RTA_IFA) && sa < (struct sockaddr *)ptr) {
        switch (b) {
        case RTA_IFA:
          ifa = (struct sockaddr_in *)sa;
          break;
        case RTA_NETMASK:
          /*
           * Careful here !  this sockaddr doesn't have sa_family set to 
           * AF_INET, and is only 8 bytes big !  I have no idea why !
           */
          mask = (struct sockaddr_in *)sa;
          break;
        }
        if (ifam->ifam_addrs & b) {
#define ALN sizeof(ifa->sin_addr.s_addr)
          sa_len = sa->sa_len > 0 ? ((sa->sa_len-1)|(ALN-1))+1 : ALN;
          sa = (struct sockaddr *)((char *)sa + sa_len);
        }
        b <<= 1;
      }
      if (LogIsKept(LogDEBUG)) {
        char a[16];
        strncpy(a, inet_ntoa(mask->sin_addr), sizeof a - 1);
        a[sizeof a - 1] = '\0';
        LogPrintf(LogDEBUG, "Check addr %s, mask %s\n",
                  inet_ntoa(ifa->sin_addr), a);
      }
      if (ifa->sin_family == AF_INET &&
          (ifa->sin_addr.s_addr & mask->sin_addr.s_addr) ==
          (ipaddr.s_addr & mask->sin_addr.s_addr)) {
        LogPrintf(LogPHASE, "Found interface %.*s for proxy arp\n",
                  dl->sdl_alen, dl->sdl_data);
        memcpy(hwaddr, dl, dl->sdl_len);
        free(buf);
        return 1;
      }
    }
  }
  free(buf);

  return 0;
}

#ifdef DEBUG
int
main(int argc, char **argv)
{
  struct in_addr ipaddr;
  int s, f;

  s = socket(AF_INET, SOCK_DGRAM, 0);
  for (f = 1; f < argc; f++) {
    if (inet_aton(argv[f], &ipaddr))
      sifproxyarp(s, ipaddr);
  }
  close(s);
}
#endif
@


1.10
log
@Fix error message.
Don't complicate the test compilation mentioned at the start of
the file.
@
text
@d20 1
a20 1
 * $Id: arp.c,v 1.9 1998/01/23 22:26:34 brian Exp $
@


1.9
log
@Stop bogus warnings.
@
text
@d20 1
a20 1
 * $Id: arp.c,v 1.8 1998/01/23 21:57:11 brian Exp $
d58 1
a58 1
 * To test the proxy arp stuff, put the following in your Makefile:
d60 1
a60 7
 * arp-test: arp.c
 * 	cp ${.CURDIR}/arp.c arp-test.c
 * 	echo 'const char *' >>arp-test.c
 * 	awk '/^Index2Nam/,/^}/' ${.CURDIR}/route.c >>arp-test.c
 * 	cc -I${.CURDIR} -DDEBUG arp-test.c -o arp-test
 *
 * and type ``make arp-test''.
d259 2
a260 1
    LogPrintf(LogERROR, "Index2Nam: sysctl: estimate: %s\n", strerror(errno));
@


1.8
log
@Re-implement the proxy arp sockaddr_dl search routine (again).
It now works :-) and searches all interface aliases.
@
text
@d20 1
a20 1
 * $Id: arp.c,v 1.7 1998/01/21 12:50:54 brian Exp $
d302 1
@


1.7
log
@Use the sockaddr_dl with the link#, not the ethernet address
when creating proxy arp entries.
@
text
@d20 1
a20 1
 * $Id: arp.c,v 1.6 1998/01/19 22:32:01 brian Exp $
d37 1
d69 1
a69 1
#define LogIsKept(x) 0
a243 1
#define MAX_IFS		32
d248 6
a253 7
  int idx;
  const char *got;
  char *sp, *ep, *cp, *wp;
  struct ifreq ifrq;
  struct in_addr addr, mask;
  struct rt_msghdr *rtm;
  struct sockaddr *sa_dst, *sa_gw;
d255 1
a255 23
  size_t needed;
  int mib[6];

  idx = 1;
  while (strcmp(got = Index2Nam(idx), "???")) {
    strncpy(ifrq.ifr_name, got, sizeof ifrq.ifr_name - 1);
    ifrq.ifr_name[sizeof ifrq.ifr_name - 1] = '\0';
    if (ID0ioctl(s, SIOCGIFADDR, &ifrq) == 0 &&
        ifrq.ifr_addr.sa_family == AF_INET) {
      addr = ((struct sockaddr_in *)&ifrq.ifr_addr)->sin_addr;
      if (ID0ioctl(s, SIOCGIFNETMASK, &ifrq) == 0) {
        mask = ((struct sockaddr_in *)&ifrq.ifr_broadaddr)->sin_addr;
        if ((ipaddr.s_addr & mask.s_addr) == (addr.s_addr & mask.s_addr))
          break;
      }
    }
    idx++;
  }

  if (!strcmp(got, "???"))
    return 0;

  LogPrintf(LogPHASE, "Found interface %s for proxy arp\n", got);
d261 1
a261 1
  mib[4] = NET_RT_DUMP;
d263 1
d265 1
a265 2
    LogPrintf(LogERROR, "get_ether_addr: sysctl: estimate: %s\n",
              strerror(errno));
d268 2
a269 1
  if (needed < 0)
d271 48
a318 29
  if ((sp = malloc(needed)) == NULL)
    return 0;
  if (sysctl(mib, 6, sp, &needed, NULL, 0) < 0) {
    LogPrintf(LogERROR, "ShowRoute: sysctl: getroute: %s\n", strerror(errno));
    free(sp);
    return (1);
  }
  ep = sp + needed;

  for (cp = sp; cp < ep; cp += rtm->rtm_msglen) {
    rtm = (struct rt_msghdr *) cp;
    if (rtm->rtm_index == idx) {
      wp = (char *)(rtm+1);

      if (rtm->rtm_addrs & RTA_DST) {
        sa_dst = (struct sockaddr *)wp;
        wp += sa_dst->sa_len;
      } else
        sa_dst = NULL;

      if (rtm->rtm_addrs & RTA_GATEWAY) {
        sa_gw = (struct sockaddr *)wp;
        if (sa_gw->sa_family == AF_LINK) {
          dl = (struct sockaddr_dl *)wp;
          if (!dl->sdl_nlen && !dl->sdl_alen && !dl->sdl_slen) {
            memcpy(hwaddr, dl, dl->sdl_len);
            free(sp);
            return 1;
          }
d320 17
d340 2
a341 1
  free(sp);
@


1.6
log
@sys/types.h -> sys/param.h
Pointed out by: Niklas Hallqvist <niklas@@petra.appli.se>
@
text
@d20 1
a20 1
 * $Id: arp.c,v 1.5 1998/01/19 02:57:32 brian Exp $
d317 1
a317 1
          if (dl->sdl_alen && dl->sdl_type == IFT_ETHER) {
@


1.5
log
@Reimplement proxy-arp address stuff using sysctl().
@
text
@d20 1
a20 1
 * $Id: arp.c,v 1.4 1998/01/11 04:01:51 brian Exp $
d28 1
a28 1
#include <sys/types.h>
@


1.4
log
@Remove includes of if_var.h and in_var.h
@
text
@d20 1
a20 1
 * $Id: arp.c,v 1.3 1997/12/24 09:30:20 brian Exp $
d40 1
d44 1
d52 1
d55 25
d82 1
a82 1
static int get_ether_addr(int, u_long, struct sockaddr_dl *);
d109 1
a109 1
sifproxyarp(int unit, u_long hisaddr)
d136 1
a136 1
  arpmsg.dst.sin_addr.s_addr = hisaddr;
d155 1
a155 1
cifproxyarp(int unit, u_long hisaddr)
d187 1
a187 1
sifproxyarp(int unit, u_long hisaddr)
d209 1
a209 1
  ((struct sockaddr_in *) & arpreq.arp_pa)->sin_addr.s_addr = hisaddr;
d222 1
a222 1
cifproxyarp(int unit, u_long hisaddr)
d228 1
a228 1
  ((struct sockaddr_in *) & arpreq.arp_pa)->sin_addr.s_addr = hisaddr;
d246 1
a246 1
get_ether_addr(int s, u_long ipaddr, struct sockaddr_dl *hwaddr)
d248 23
a270 46
  struct ifreq *ifr, *ifend, *ifp;
  u_long ina, mask;
  struct sockaddr_dl *dla;
  struct ifreq ifreq;
  struct ifconf ifc;
  struct ifreq ifs[MAX_IFS];

  ifc.ifc_len = sizeof ifs;
  ifc.ifc_req = ifs;
  if (ioctl(s, SIOCGIFCONF, &ifc) < 0) {
    LogPrintf(LogERROR, "get_ether_addr: ioctl(SIOCGIFCONF): %s\n",
	      strerror(errno));
    return 0;
  }

  /*
   * Scan through looking for an interface with an Internet address on the
   * same subnet as `ipaddr'.
   */
  ifend = (struct ifreq *) (ifc.ifc_buf + ifc.ifc_len);
  for (ifr = ifc.ifc_req; ifr < ifend;) {
    if (ifr->ifr_addr.sa_family == AF_INET) {
      ina = ((struct sockaddr_in *) & ifr->ifr_addr)->sin_addr.s_addr;
      strncpy(ifreq.ifr_name, ifr->ifr_name, sizeof ifreq.ifr_name - 1);
      ifreq.ifr_name[sizeof ifreq.ifr_name - 1] = '\0';

      /*
       * Check that the interface is up, and not point-to-point or loopback.
       */
      if (ioctl(s, SIOCGIFFLAGS, &ifreq) < 0)
	continue;
      if ((ifreq.ifr_flags &
      (IFF_UP | IFF_BROADCAST | IFF_POINTOPOINT | IFF_LOOPBACK | IFF_NOARP))
	  != (IFF_UP | IFF_BROADCAST))
	goto nextif;

      /*
       * Get its netmask and check that it's on the right subnet.
       */
      if (ioctl(s, SIOCGIFNETMASK, &ifreq) < 0)
	continue;
      mask = ((struct sockaddr_in *) & ifreq.ifr_addr)->sin_addr.s_addr;
      if ((ipaddr & mask) != (ina & mask))
	goto nextif;

      break;
d272 1
a272 2
nextif:
    ifr = (struct ifreq *) ((char *) &ifr->ifr_addr + ifr->ifr_addr.sa_len);
d275 1
a275 1
  if (ifr >= ifend)
a276 1
  LogPrintf(LogPHASE, "Found interface %s for proxy arp\n", ifr->ifr_name);
d278 46
a323 15
  /*
   * Now scan through again looking for a link-level address for this
   * interface.
   */
  ifp = ifr;
  for (ifr = ifc.ifc_req; ifr < ifend;) {
    if (strcmp(ifp->ifr_name, ifr->ifr_name) == 0
	&& ifr->ifr_addr.sa_family == AF_LINK) {

      /*
       * Found the link-level address - copy it out
       */
      dla = (struct sockaddr_dl *) & ifr->ifr_addr;
      memcpy(hwaddr, dla, dla->sdl_len);
      return 1;
a324 1
    ifr = (struct ifreq *) ((char *) &ifr->ifr_addr + ifr->ifr_addr.sa_len);
d326 1
a326 1

a329 1

d332 1
a332 1
main()
d334 2
a335 2
  u_long ipaddr;
  int s;
d338 4
a341 2
  ipaddr = inet_addr("192.168.1.32");
  sifproxyarp(s, ipaddr);
@


1.3
log
@Cosmetic (style):
  sizeof(var) -> sizeof var
  sizeof type -> sizeof(type)

Suggested by: J Wunsch <j@@uriah.heep.sax.de>
@
text
@d20 1
a20 1
 * $Id: arp.c,v 1.2 1997/12/23 22:38:00 brian Exp $
a31 3
#ifdef __FreeBSD__
#include <net/if_var.h>
#endif
a35 1
#include <netinet/in_var.h>
@


1.2
log
@strncpy(x,y,sizeof(x)) --> strncpy(x,y,sizeof(x)-1)

Suggested by: Philippe Charnier <charnier@@lirmm.fr>
              Theo de Raadt <deraadt@@cvs.openbsd.org>
@
text
@d20 1
a20 1
 * $Id: arp.c,v 1.1.1.1 1997/11/23 20:27:32 brian Exp $
d93 1
a93 1
  memset(&arpmsg, 0, sizeof(arpmsg));
d171 1
a171 1
  memset(&arpreq, '\0', sizeof(arpreq));
d202 1
a202 1
  memset(&arpreq, '\0', sizeof(arpreq));
d231 1
a231 1
  ifc.ifc_len = sizeof(ifs);
d247 2
a248 2
      strncpy(ifreq.ifr_name, ifr->ifr_name, sizeof(ifreq.ifr_name) - 1);
      ifreq.ifr_name[sizeof(ifreq.ifr_name) - 1] = '\0';
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
 * $Id: arp.c,v 1.18 1997/11/22 03:37:22 brian Exp $
d247 1
a247 1
      strncpy(ifreq.ifr_name, ifr->ifr_name, sizeof(ifreq.ifr_name));
@


1.1.1.1
log
@Import version 1.5 of ppp.

<sales>
This is a user-level ppp implementation that uses the
tun driver.  It was originally created by a Japanese
ISP.  It's now piled with features.  Check the man pages
for details.
</sales>

The sources are identical to the ones in FreeBSD, except
for the Makefile.

IP aliasing (NAT) is disabled, and can be enabled by simply
doing a ``make install'' of libalias, then rebuilding
ppp.  I'll create libalias as a port soon.
@
text
@@
