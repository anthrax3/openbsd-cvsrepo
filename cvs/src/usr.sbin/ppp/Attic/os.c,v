head	1.11;
access;
symbols
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	PPP1_5:1.1.1.1
	BRIAN:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	98.08.31.00.21.18;	author brian;	state dead;
branches;
next	1.10;

1.10
date	98.06.28.09.41.44;	author brian;	state Exp;
branches;
next	1.9;

1.9
date	98.05.19.21.56.12;	author brian;	state Exp;
branches;
next	1.8;

1.8
date	98.01.21.02.13.39;	author brian;	state Exp;
branches;
next	1.7;

1.7
date	98.01.19.02.57.33;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	98.01.11.17.55.20;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	98.01.08.23.47.08;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	97.12.24.09.30.44;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	97.12.15.22.44.55;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	97.12.06.12.09.01;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	97.11.23.20.27.35;	author brian;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.11.23.20.27.35;	author brian;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@/*
 *	      PPP OS Layer Interface Module
 *
 *	    Written by Toshiharu OHNO (tony-o@@iij.ad.jp)
 *
 *   Copyright (C) 1993, Internet Initiative Japan, Inc. All rights reserverd.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the Internet Initiative Japan, Inc.  The name of the
 * IIJ may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $Id: os.c,v 1.10 1998/06/28 09:41:44 brian Exp $
 *
 */
#include <sys/param.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <arpa/inet.h>

#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <sys/ioctl.h>
#include <termios.h>
#include <unistd.h>

#include "command.h"
#include "mbuf.h"
#include "log.h"
#include "id.h"
#include "defs.h"
#include "timer.h"
#include "fsm.h"
#include "ipcp.h"
#include "os.h"
#include "loadalias.h"
#include "vars.h"
#include "arp.h"
#include "systems.h"
#include "route.h"
#include "lcp.h"
#include "ccp.h"

char *IfDevName;

static struct ifaliasreq ifra;
static struct ifreq ifrq;
static struct in_addr oldmine, oldhis;
static int linkup;

enum set_method { SET_UP, SET_DOWN, SET_TRY };

static int
SetIpDevice(struct in_addr myaddr,
	    struct in_addr hisaddr,
	    struct in_addr netmask,
	    enum set_method how)
{
  struct sockaddr_in *sock_in;
  int s;
  u_int32_t mask, addr;

  s = ID0socket(AF_INET, SOCK_DGRAM, 0);
  if (s < 0) {
    LogPrintf(LogERROR, "SetIpDevice: socket(): %s\n", strerror(errno));
    return (-1);
  }
  if (how == SET_DOWN) {
    if (Enabled(ConfProxy))
      cifproxyarp(s, oldhis);
    if (oldmine.s_addr == 0 && oldhis.s_addr == 0) {
      close(s);
      return (0);
    }
    memset(&ifra.ifra_addr, '\0', sizeof ifra.ifra_addr);
    memset(&ifra.ifra_broadaddr, '\0', sizeof ifra.ifra_broadaddr);
    memset(&ifra.ifra_mask, '\0', sizeof ifra.ifra_mask);
    if (ID0ioctl(s, SIOCDIFADDR, &ifra) < 0) {
      LogPrintf(LogERROR, "SetIpDevice: ioctl(SIOCDIFADDR): %s\n",
		strerror(errno));
      close(s);
      return (-1);
    }
    oldmine.s_addr = oldhis.s_addr = 0;
  } else {
    /* If given addresses are alreay set, then ignore this request */
    if (oldmine.s_addr == myaddr.s_addr && oldhis.s_addr == hisaddr.s_addr) {
      close(s);
      return (0);
    }

    /*
     * If different address has been set, then delete it first.
     */
    if (oldmine.s_addr || oldhis.s_addr) {
      memset(&ifra.ifra_addr, '\0', sizeof ifra.ifra_addr);
      memset(&ifra.ifra_broadaddr, '\0', sizeof ifra.ifra_broadaddr);
      memset(&ifra.ifra_mask, '\0', sizeof ifra.ifra_mask);
      if (ID0ioctl(s, SIOCDIFADDR, &ifra) < 0) {
        LogPrintf(LogERROR, "SetIpDevice: ioctl(SIOCDIFADDR): %s\n",
		  strerror(errno));
        close(s);
        return (-1);
      }
    }

    /* Set interface address */
    sock_in = (struct sockaddr_in *) & (ifra.ifra_addr);
    sock_in->sin_family = AF_INET;
    sock_in->sin_addr = myaddr;
    sock_in->sin_len = sizeof *sock_in;

    /* Set destination address */
    sock_in = (struct sockaddr_in *) & (ifra.ifra_broadaddr);
    sock_in->sin_family = AF_INET;
    sock_in->sin_addr = hisaddr;
    sock_in->sin_len = sizeof *sock_in;

    addr = ntohl(myaddr.s_addr);
    if (IN_CLASSA(addr))
      mask = IN_CLASSA_NET;
    else if (IN_CLASSB(addr))
      mask = IN_CLASSB_NET;
    else
      mask = IN_CLASSC_NET;

    /*
     * if subnet mask is given, use it instead of class mask.
     */
    if (netmask.s_addr && (ntohl(netmask.s_addr) & mask) == mask)
      mask = ntohl(netmask.s_addr);

    sock_in = (struct sockaddr_in *) & (ifra.ifra_mask);
    sock_in->sin_family = AF_INET;
    sock_in->sin_addr.s_addr = htonl(mask);
    sock_in->sin_len = sizeof *sock_in;

    if (ID0ioctl(s, SIOCAIFADDR, &ifra) < 0) {
      if (how != SET_TRY)
        LogPrintf(LogERROR, "SetIpDevice: ioctl(SIOCAIFADDR): %s\n",
		  strerror(errno));
      close(s);
      return (-1);
    }

    oldhis.s_addr = hisaddr.s_addr;
    oldmine.s_addr = myaddr.s_addr;
    if (Enabled(ConfProxy))
      sifproxyarp(s, hisaddr);
  }
  close(s);
  return (0);
}

int
CleanInterface(const char *name)
{
  int s;

  s = ID0socket(AF_INET, SOCK_DGRAM, 0);
  if (s < 0) {
    LogPrintf(LogERROR, "SetIpDevice: socket(): %s\n", strerror(errno));
    return (-1);
  }
  strncpy(ifrq.ifr_name, name, sizeof ifrq.ifr_name - 1);
  ifrq.ifr_name[sizeof ifrq.ifr_name - 1] = '\0';
  while (ID0ioctl(s, SIOCGIFADDR, &ifrq) == 0) {
    memset(&ifra.ifra_mask, '\0', sizeof ifra.ifra_mask);
    ifra.ifra_addr = ifrq.ifr_addr;
    if (ID0ioctl(s, SIOCGIFDSTADDR, &ifrq) < 0) {
      if (ifra.ifra_addr.sa_family == AF_INET)
        LogPrintf(LogERROR, "tun_configure: Can't get dst for %s on %s !\n",
                  inet_ntoa(((struct sockaddr_in *)&ifra.ifra_addr)->sin_addr),
                  name);
      close(s);
      return 0;
    }
    ifra.ifra_broadaddr = ifrq.ifr_dstaddr;
    if (ID0ioctl(s, SIOCDIFADDR, &ifra) < 0) {
      if (ifra.ifra_addr.sa_family == AF_INET)
        LogPrintf(LogERROR, "tun_configure: Can't delete %s address on %s !\n",
                  inet_ntoa(((struct sockaddr_in *)&ifra.ifra_addr)->sin_addr),
                  name);
      close(s);
      return 0;
    }
  }
  close(s);

  return 1;
}

int
OsTrySetIpaddress(struct in_addr myaddr, struct in_addr hisaddr)
{
  return (SetIpDevice(myaddr, hisaddr, ifnetmask, SET_TRY));
}

int
OsSetIpaddress(struct in_addr myaddr, struct in_addr hisaddr)
{
  return (SetIpDevice(myaddr, hisaddr, ifnetmask, SET_UP));
}

static struct in_addr peer_addr;

void
OsLinkup()
{
  char *s;

  if (linkup == 0) {
    reconnectState = RECON_UNKNOWN;
    if (mode & MODE_BACKGROUND && BGFiledes[1] != -1) {
      char c = EX_NORMAL;

      if (write(BGFiledes[1], &c, 1) == 1)
	LogPrintf(LogPHASE, "Parent notified of success.\n");
      else
	LogPrintf(LogPHASE, "Failed to notify parent of success.\n");
      close(BGFiledes[1]);
      BGFiledes[1] = -1;
    }
    peer_addr = IpcpInfo.his_ipaddr;
    s = (char *) inet_ntoa(peer_addr);
    if (LogIsKept(LogLINK))
      LogPrintf(LogLINK, "OsLinkup: %s\n", s);
    else
      LogPrintf(LogLCP, "OsLinkup: %s\n", s);

    if (SelectSystem(inet_ntoa(IpcpInfo.want_ipaddr), LINKUPFILE) < 0) {
      if (GetLabel()) {
	if (SelectSystem(GetLabel(), LINKUPFILE) < 0)
	  SelectSystem("MYADDR", LINKUPFILE);
      } else
	SelectSystem("MYADDR", LINKUPFILE);
    }
    linkup = 1;
  }
}

int
OsLinkIsUp()
{
  return linkup;
}

void
OsLinkdown()
{
  char *s;
  int Level;

  if (linkup) {
    s = (char *) inet_ntoa(peer_addr);
    Level = LogIsKept(LogLINK) ? LogLINK : LogIPCP;
    LogPrintf(Level, "OsLinkdown: %s\n", s);

    FsmDown(&IpcpFsm);	/* IPCP must come down */
    FsmDown(&CcpFsm);	/* CCP must come down */

    linkup = 0;
    if (SelectSystem(s, LINKDOWNFILE) < 0) {
      if (GetLabel()) {
	if (SelectSystem(GetLabel(), LINKDOWNFILE) < 0)
	  SelectSystem("MYADDR", LINKDOWNFILE);
      } else
	SelectSystem("MYADDR", LINKDOWNFILE);
    }
  }
}

int
OsInterfaceDown(int final)
{
  struct in_addr zeroaddr;
  int s;

  OsLinkdown();
  if (!final && (mode & MODE_DAEMON))	/* We still want interface alive */
    return (0);
  s = socket(AF_INET, SOCK_DGRAM, 0);
  if (s < 0) {
    LogPrintf(LogERROR, "OsInterfaceDown: socket: %s\n", strerror(errno));
    return (-1);
  }
  ifrq.ifr_flags &= ~IFF_UP;
  if (ID0ioctl(s, SIOCSIFFLAGS, &ifrq) < 0) {
    LogPrintf(LogERROR, "OsInterfaceDown: ioctl(SIOCSIFFLAGS): %s\n",
	      strerror(errno));
    close(s);
    return (-1);
  }
  zeroaddr.s_addr = 0;
  SetIpDevice(zeroaddr, zeroaddr, zeroaddr, SET_DOWN);

  close(s);
  return (0);
}

/*
 *  Open tunnel device and returns its descriptor
 */

#define MAX_TUN 256
/* MAX_TUN is set at an arbitrarily large value  *
 * as the loop aborts when it reaches the first  *
 * 'Device not configured' (ENXIO), or the third *
 * 'No such file or directory' (ENOENT) error.   */
int
OpenTunnel(int *ptun)
{
  int s;
  char ifname[IFNAMSIZ];
  static char devname[14];	/* sufficient room for "/dev/tun65535" */
  unsigned unit, enoentcount = 0;
  int err;

  err = ENOENT;
  for (unit = 0; unit <= MAX_TUN; unit++) {
    snprintf(devname, sizeof devname, "/dev/tun%d", unit);
    tun_out = ID0open(devname, O_RDWR);
    if (tun_out >= 0)
      break;
    if (errno == ENXIO) {
      unit = MAX_TUN;
      err = errno;
    } else if (errno == ENOENT) {
      enoentcount++;
      if (enoentcount > 2)
	unit = MAX_TUN;
    } else
      err = errno;
  }
  if (unit > MAX_TUN) {
    if (VarTerm)
      fprintf(VarTerm, "No tunnel device is available (%s).\n", strerror(err));
    return -1;
  }
  *ptun = unit;

  LogSetTun(unit);

  /*
   * At first, name the interface.
   */
  strncpy(ifname, devname + 5, IFNAMSIZ - 1);

  memset(&ifra, '\0', sizeof ifra);
  memset(&ifrq, '\0', sizeof ifrq);

  strncpy(ifrq.ifr_name, ifname, IFNAMSIZ - 1);
  strncpy(ifra.ifra_name, ifname, IFNAMSIZ - 1);

  s = socket(AF_INET, SOCK_DGRAM, 0);
  if (s < 0) {
    LogPrintf(LogERROR, "OpenTunnel: socket(): %s\n", strerror(errno));
    return (-1);
  }

  /*
   * Now, bring up the interface.
   */
  if (ioctl(s, SIOCGIFFLAGS, &ifrq) < 0) {
    LogPrintf(LogERROR, "OpenTunnel: ioctl(SIOCGIFFLAGS): %s\n",
	      strerror(errno));
    close(s);
    return (-1);
  }
  ifrq.ifr_flags |= IFF_UP;
  if (ID0ioctl(s, SIOCSIFFLAGS, &ifrq) < 0) {
    LogPrintf(LogERROR, "OpenTunnel: ioctl(SIOCSIFFLAGS): %s\n",
	      strerror(errno));
    close(s);
    return (-1);
  }
  tun_in = tun_out;
  IfDevName = devname + 5;
  if (GetIfIndex(IfDevName) < 0) {
    LogPrintf(LogERROR, "OpenTunnel: Can't find ifindex.\n");
    close(s);
    return (-1);
  }
  if (VarTerm)
    fprintf(VarTerm, "Using interface: %s\n", IfDevName);
  LogPrintf(LogPHASE, "Using interface: %s\n", IfDevName);
  close(s);
  return (0);
}
@


1.10
log
@Don't assume sizeof(long) == 4
@
text
@d20 1
a20 1
 * $Id: os.c,v 1.9 1998/05/19 21:56:12 brian Exp $
@


1.9
log
@Close forgotten descriptor.
Submitted by: Ruslan Ermilov <ru@@ucb.crimea.ua>
@
text
@d20 1
a20 1
 * $Id: os.c,v 1.8 1998/01/21 02:13:39 brian Exp $
d72 1
a72 1
  u_long mask, addr;
@


1.8
log
@Remove unused #includes.
Make various bits static.
Remove unused variables.
Submitted by: eivind
@
text
@d20 1
a20 1
 * $Id: os.c,v 1.7 1998/01/19 02:57:33 brian Exp $
d186 1
d195 1
d199 1
@


1.7
log
@Reimplement proxy-arp address stuff using sysctl().
@
text
@d20 1
a20 1
 * $Id: os.c,v 1.6 1998/01/11 17:55:20 brian Exp $
a24 1
#include <sys/select.h>
a27 2
#include <net/if_tun.h>
#include <net/route.h>
a53 1
#include "modem.h"
a213 1
struct in_addr defaddr;
@


1.6
log
@Lose <net/if_var.h> (was a FreeBSD brokenness) !
@
text
@d20 1
a20 1
 * $Id: os.c,v 1.5 1998/01/08 23:47:08 brian Exp $
d85 1
a85 1
      cifproxyarp(s, oldhis.s_addr);
d164 1
a164 1
      sifproxyarp(s, hisaddr.s_addr);
@


1.5
log
@Zap any addresses on the network side of the `tun' as soon
as we've successfully opened the /dev side.
@
text
@d20 1
a20 1
 * $Id: os.c,v 1.4 1997/12/24 09:30:44 brian Exp $
a28 3
#ifdef __FreeBSD__
#include <net/if_var.h>
#endif
@


1.4
log
@Cosmetic (style):
  sizeof(var) -> sizeof var
  sizeof type -> sizeof(type)

Suggested by: J Wunsch <j@@uriah.heep.sax.de>
@
text
@d20 1
a20 1
 * $Id: os.c,v 1.3 1997/12/15 22:44:55 brian Exp $
d171 35
@


1.3
log
@Allow random IP number allocation to peer.
Validate the peers suggested IP by attempting to make a routing table
entry.
Give up IPCP negotiation if the peer NAKs us with an unusable IP.
Always SIOCDIFADDR then SIOCAIFADDR when configuring the tun device.
Using SIOCSIFDSTADDR allows duplicate dst addresses (which we don't
want)!!!
Allow up to 200 interface names (was 50) (now that ppp can play server
properly).

Cosmetic:
  Log unexpected CCP packets in the CCP log rather than the ERROR log.
  Log unexpected Config Reqs in the appropriate LCP/IPCP/CCP log rather
  than the ERROR log.
  Log failed route additions and deletions with WARN, not TCPIP.
  Log the option id and length for unrecognised IPCP options.
  Change some .Sq to .Ar in the man page.
@
text
@d20 1
a20 1
 * $Id: os.c,v 1.2 1997/12/06 12:09:01 brian Exp $
d93 3
a95 3
    memset(&ifra.ifra_addr, '\0', sizeof(ifra.ifra_addr));
    memset(&ifra.ifra_broadaddr, '\0', sizeof(ifra.ifra_addr));
    memset(&ifra.ifra_mask, '\0', sizeof(ifra.ifra_addr));
d114 3
a116 3
      memset(&ifra.ifra_addr, '\0', sizeof(ifra.ifra_addr));
      memset(&ifra.ifra_broadaddr, '\0', sizeof(ifra.ifra_addr));
      memset(&ifra.ifra_mask, '\0', sizeof(ifra.ifra_addr));
d129 1
a129 1
    sock_in->sin_len = sizeof(*sock_in);
d135 1
a135 1
    sock_in->sin_len = sizeof(*sock_in);
d154 1
a154 1
    sock_in->sin_len = sizeof(*sock_in);
d302 1
a302 1
    snprintf(devname, sizeof(devname), "/dev/tun%d", unit);
d330 2
a331 2
  memset(&ifra, '\0', sizeof(ifra));
  memset(&ifrq, '\0', sizeof(ifrq));
@


1.2
log
@Add DEFLATE capabilities (rfc1979).
@
text
@d20 1
a20 1
 * $Id: os.c,v 1.1.1.1 1997/11/23 20:27:35 brian Exp $
d69 2
d75 1
a75 1
	    int updown)
a78 1
  int changeaddr = 0;
d86 1
a86 1
  if (updown == 0) {
d104 1
a104 4

    /*
     * If given addresses are alreay set, then ignore this request.
     */
d114 9
a122 1
      changeaddr = 1;
d125 1
a125 3
    /*
     * Set interface address
     */
d128 1
a128 1
    sock_in->sin_addr = oldmine = myaddr;
d131 1
a131 3
    /*
     * Set destination address
     */
d134 1
a134 1
    sock_in->sin_addr = oldhis = hisaddr;
a136 2
    /*
     * */
d156 3
a158 17
    if (changeaddr) {

      /*
       * Interface already exists. Just change the address.
       */
      memcpy(&ifrq.ifr_addr, &ifra.ifra_addr, sizeof(struct sockaddr));
      if (ID0ioctl(s, SIOCSIFADDR, &ifra) < 0)
	LogPrintf(LogERROR, "SetIpDevice: ioctl(SIFADDR): %s\n",
		  strerror(errno));
      memcpy(&ifrq.ifr_dstaddr, &ifra.ifra_broadaddr, sizeof(struct sockaddr));
      if (ID0ioctl(s, SIOCSIFDSTADDR, &ifrq) < 0)
	LogPrintf(LogERROR, "SetIpDevice: ioctl(SIFDSTADDR): %s\n",
		  strerror(errno));
#ifdef notdef
      memcpy(&ifrq.ifr_broadaddr, &ifra.ifra_mask, sizeof(struct sockaddr));
      if (ID0ioctl(s, SIOCSIFBRDADDR, &ifrq) < 0)
	LogPrintf(LogERROR, "SetIpDevice: ioctl(SIFBRDADDR): %s\n",
a159 4
#endif
    } else if (ID0ioctl(s, SIOCAIFADDR, &ifra) < 0) {
      LogPrintf(LogERROR, "SetIpDevice: ioctl(SIOCAIFADDR): %s\n",
		strerror(errno));
d163 3
d174 7
a180 3
OsSetIpaddress(struct in_addr myaddr,
	       struct in_addr hisaddr,
	       struct in_addr netmask)
d182 1
a182 1
  return (SetIpDevice(myaddr, hisaddr, netmask, 1));
d276 1
a276 1
  SetIpDevice(zeroaddr, zeroaddr, zeroaddr, 0);
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
 * $Id: os.c,v 1.35 1997/11/22 03:37:42 brian Exp $
d58 1
@


1.1.1.1
log
@Import version 1.5 of ppp.

<sales>
This is a user-level ppp implementation that uses the
tun driver.  It was originally created by a Japanese
ISP.  It's now piled with features.  Check the man pages
for details.
</sales>

The sources are identical to the ones in FreeBSD, except
for the Makefile.

IP aliasing (NAT) is disabled, and can be enabled by simply
doing a ``make install'' of libalias, then rebuilding
ppp.  I'll create libalias as a port soon.
@
text
@@
