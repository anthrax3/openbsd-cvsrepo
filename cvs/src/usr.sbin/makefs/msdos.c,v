head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.2
	OPENBSD_6_1_BASE:1.11;
locks; strict;
comment	@ * @;


1.11
date	2017.03.23.18.16.06;	author patrick;	state Exp;
branches;
next	1.10;
commitid	geC5vAyr8D7gbBcq;

1.10
date	2016.12.17.16.12.15;	author krw;	state Exp;
branches;
next	1.9;
commitid	A9ngZLAcWJ1yliUg;

1.9
date	2016.10.26.07.53.47;	author natano;	state Exp;
branches;
next	1.8;
commitid	u5FhgAQMMhudj2OK;

1.8
date	2016.10.23.10.22.21;	author natano;	state Exp;
branches;
next	1.7;
commitid	rHhaLNWxkoYu4Pqx;

1.7
date	2016.10.22.18.17.14;	author natano;	state Exp;
branches;
next	1.6;
commitid	Dnp7IFCOk553ITkR;

1.6
date	2016.10.18.17.05.30;	author natano;	state Exp;
branches;
next	1.5;
commitid	jXVdtbSbKUWYjDfE;

1.5
date	2016.10.17.01.16.22;	author tedu;	state Exp;
branches;
next	1.4;
commitid	XIRBCiI8rxgjkmJi;

1.4
date	2016.10.16.20.26.56;	author natano;	state Exp;
branches;
next	1.3;
commitid	CmcYdpJMky9LxxDQ;

1.3
date	2016.10.16.19.53.11;	author natano;	state Exp;
branches;
next	1.2;
commitid	1ZHAN76P5QzJWokO;

1.2
date	2016.10.16.18.55.10;	author natano;	state Exp;
branches;
next	1.1;
commitid	tInvejtsjWzkr4Ga;

1.1
date	2016.10.16.17.08.53;	author natano;	state Exp;
branches;
next	;
commitid	O38itEriwOj0afR7;


desc
@@


1.11
log
@Set the maximum value of the msdos options to the value of LLONG_MAX
instead of ULLONG_MAX since the type of the comparison is using long
long, which has a positive maximum of LLONG_MAX.  The affected opts
are of type off_t, which should have a maximum of LLONG_MAX anyway.
Fixes makefs(8) on msdos with options "create_size" or "offset".

ok natano@@
@
text
@/*	$OpenBSD: msdos.c,v 1.10 2016/12/17 16:12:15 krw Exp $	*/
/*	$NetBSD: msdos.c,v 1.16 2016/01/30 09:59:27 mlelstv Exp $	*/

/*-
 * Copyright (c) 2013 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Christos Zoulas.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>

#include <assert.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "ffs/buf.h"
#include "msdos/denode.h"
#include "makefs.h"
#include "msdos.h"
#include "msdos/mkfs_msdos.h"

static int msdos_populate_dir(const char *, struct denode *, fsnode *,
    fsnode *, fsinfo_t *);

void
msdos_prep_opts(fsinfo_t *fsopts)
{
	struct msdos_options *msdos_opt = ecalloc(1, sizeof(*msdos_opt));
	const option_t msdos_options[] = {
#define AOPT(_type, _name, _min) {					\
	.name = # _name,						\
	.type = _min == -1 ? OPT_STRPTR :				\
	    (_min == -2 ? OPT_BOOL :					\
	    (sizeof(_type) == 1 ? OPT_INT8 :				\
	    (sizeof(_type) == 2 ? OPT_INT16 :				\
	    (sizeof(_type) == 4 ? OPT_INT32 : OPT_INT64)))),		\
	.value = &msdos_opt->_name,					\
	.minimum = _min,						\
	.maximum = sizeof(_type) == 1 ? 0xff :				\
	    (sizeof(_type) == 2 ? 0xffff :				\
	    (sizeof(_type) == 4 ? 0xffffffff : 0x7fffffffffffffffLL)),	\
},
ALLOPTS
#undef AOPT
		{ .name = NULL }
	};

	fsopts->fs_specific = msdos_opt;
	fsopts->fs_options = copy_opts(msdos_options);
}

void
msdos_cleanup_opts(fsinfo_t *fsopts)
{
	free(fsopts->fs_specific);
	free(fsopts->fs_options);
}

int
msdos_parse_opts(const char *option, fsinfo_t *fsopts)
{
	struct msdos_options *msdos_opt = fsopts->fs_specific;
	option_t *msdos_options = fsopts->fs_options;

	int rv;

	assert(option != NULL);
	assert(fsopts != NULL);
	assert(msdos_opt != NULL);

	rv = set_option(msdos_options, option, NULL, 0);
	if (rv == -1)
		return rv;

	if (strcmp(msdos_options[rv].name, "volume_id") == 0)
		msdos_opt->volume_id_set = 1;
	else if (strcmp(msdos_options[rv].name, "media_descriptor") == 0)
		msdos_opt->media_descriptor_set = 1;
	else if (strcmp(msdos_options[rv].name, "hidden_sectors") == 0)
		msdos_opt->hidden_sectors_set = 1;
	return 1;
}


void
msdos_makefs(const char *image, const char *dir, fsnode *root, fsinfo_t *fsopts)
{
	struct msdos_options *msdos_opt = fsopts->fs_specific;
	struct mkfsvnode vp, rootvp;
	struct msdosfsmount *pmp;

	assert(image != NULL);
	assert(dir != NULL);
	assert(root != NULL);
	assert(fsopts != NULL);

	/*
	 * XXX: pick up other options from the msdos specific ones?
	 * Is minsize right here?
	 */
	msdos_opt->create_size = MAX(msdos_opt->create_size,
		fsopts->minsize);
	msdos_opt->offset = fsopts->offset;
	if (msdos_opt->bytes_per_sector == 0) {
		if (fsopts->sectorsize == -1)
			fsopts->sectorsize = 512;
		msdos_opt->bytes_per_sector = fsopts->sectorsize;
	} else if (fsopts->sectorsize == -1) {
		fsopts->sectorsize = msdos_opt->bytes_per_sector;
	} else if (fsopts->sectorsize != msdos_opt->bytes_per_sector) {
		err(1, "inconsistent sectorsize -S %u"
		    "!= -o bytes_per_sector %u",
		    fsopts->sectorsize, msdos_opt->bytes_per_sector);
	}

		/* create image */
	printf("Creating `%s'\n", image);
	if (mkfs_msdos(image, NULL, msdos_opt) == -1)
		return;

	fsopts->fd = open(image, O_RDWR);
	vp.fs = fsopts;

	if ((pmp = msdosfs_mount(&vp, 0)) == NULL)
		err(1, "msdosfs_mount");

	if (msdosfs_root(pmp, &rootvp) != 0)
		err(1, "msdosfs_root");

		/* populate image */
	printf("Populating `%s'\n", image);
	if (msdos_populate_dir(dir, VTODE(&rootvp), root, root, fsopts) == -1)
		errx(1, "Image file `%s' not created.", image);

	bcleanup();

	printf("Image `%s' complete\n", image);
}

static int
msdos_populate_dir(const char *path, struct denode *dir, fsnode *root,
    fsnode *parent, fsinfo_t *fsopts)
{
	fsnode *cur;
	char pbuf[MAXPATHLEN];

	assert(dir != NULL);
	assert(root != NULL);
	assert(fsopts != NULL);

	for (cur = root->next; cur != NULL; cur = cur->next) {
		if ((size_t)snprintf(pbuf, sizeof(pbuf), "%s/%s", path,
		    cur->name) >= sizeof(pbuf)) {
			warnx("path %s too long", pbuf);
			return -1;
		}

		if ((cur->inode->flags & FI_ALLOCATED) == 0) {
			cur->inode->flags |= FI_ALLOCATED;
			if (cur != root) {
				fsopts->curinode++;
				cur->inode->ino = fsopts->curinode;
				cur->parent = parent;
			}
		}

		if (cur->inode->flags & FI_WRITTEN) {
			continue;	// hard link
		}
		cur->inode->flags |= FI_WRITTEN;

		if (cur->child) {
			struct denode *de;
			if ((de = msdosfs_mkdire(pbuf, dir, cur)) == NULL) {
				warn("msdosfs_mkdire %s", pbuf);
				return -1;
			}
			if (msdos_populate_dir(pbuf, de, cur->child, cur,
			    fsopts) == -1) {
				warn("msdos_populate_dir %s", pbuf);
				return -1;
			}
			continue;
		} else if (!S_ISREG(cur->type)) {
			warnx("skipping non-regular file %s/%s", cur->path,
			    cur->name);
			continue;
		}
		if (msdosfs_mkfile(pbuf, dir, cur) == NULL) {
			warn("msdosfs_mkfile %s", pbuf);
			return -1;
		}
	}
	return 0;
}
@


1.10
log
@While here nuke some more annoying whitespace nits.
@
text
@d1 1
a1 1
/*	$OpenBSD: msdos.c,v 1.9 2016/10/26 07:53:47 natano Exp $	*/
d66 1
a66 1
	    (sizeof(_type) == 4 ? 0xffffffff : 0xffffffffffffffffLL)),	\
@


1.9
log
@Remove FS-specific option descriptions from the source code. We have a
manual for that. While there document the isolevel option and remove
some dysfunctional cd9660 options.
@
text
@d1 1
a1 1
/*	$OpenBSD: msdos.c,v 1.8 2016/10/23 10:22:21 natano Exp $	*/
d55 1
a55 1
#define AOPT(_type, _name, _min) { 					\
d69 1
a69 1
#undef AOPT	
d137 1
a137 1
		    "!= -o bytes_per_sector %u", 
d174 2
a175 2
	assert(fsopts != NULL);	
	
@


1.8
log
@Remove short option names for -o.
@
text
@d1 1
a1 1
/*	$OpenBSD: msdos.c,v 1.7 2016/10/22 18:17:14 natano Exp $	*/
d55 1
a55 1
#define AOPT(_type, _name, _min, _desc) { 				\
a66 1
	.desc = _desc,							\
@


1.7
log
@Remove huge amounts of debug code, that make the code nearly unreadable.
@
text
@d1 1
a1 1
/*	$OpenBSD: msdos.c,v 1.6 2016/10/18 17:05:30 natano Exp $	*/
d55 1
a55 2
#define AOPT(_opt, _type, _name, _min, _desc) { 			\
	.letter = _opt,							\
d62 1
a62 1
	.value = &msdos_opt->_name,				\
d67 1
a67 1
	.desc = _desc,						\
@


1.6
log
@Merge fs/msdosfs/ and newfs_msdos/ into msdos/.
@
text
@d1 1
a1 1
/*	$OpenBSD: msdos.c,v 1.5 2016/10/17 01:16:22 tedu Exp $	*/
a97 3
	if (debug & DEBUG_FS_PARSE_OPTS)
		printf("msdos_parse_opts: got `%s'\n", option);

a116 1
	struct timeval	start;
a144 1
	TIMER_START(start);
a146 1
	TIMER_RESULTS(start, "mkfs_msdos");
a156 4
	if (debug & DEBUG_FS_MAKEFS)
		printf("msdos_makefs: image %s directory %s root %p\n",
		    image, dir, root);

a158 1
	TIMER_START(start);
a160 4
	TIMER_RESULTS(start, "msdos_populate_dir");

	if (debug & DEBUG_FS_MAKEFS)
		putchar('\n');
d162 1
a162 3
		/* ensure no outstanding buffers remain */
	if (debug & DEBUG_FS_MAKEFS)
		bcleanup();
@


1.5
log
@mechanical rename of vnode to mkfsvnode and buf to mkfsbuf to avoid
collisions with the kernel structures of the same name.
caught one bug where the wrong header was being included.
@
text
@d1 1
a1 1
/*	$OpenBSD: msdos.c,v 1.4 2016/10/16 20:26:56 natano Exp $	*/
d41 2
a42 2
#include <ffs/buf.h>
#include <fs/msdosfs/denode.h>
d45 1
a45 1
#include "mkfs_msdos.h"
@


1.4
log
@Add OpenBSD RCS tags; reminded by tb
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d119 1
a119 1
	struct vnode vp, rootvp;
@


1.3
log
@Unused includes, as reported by include-what-you-use from ports.
@
text
@d1 1
@


1.2
log
@Replace fs/msdosfs/{msdosfs_conv.c,direntry.h} with stripped-down
versions from our own tree. This allows to remove the clock_subr.c
tentacle.
@
text
@a32 1
#include <sys/mount.h>
a34 1
#include <errno.h>
a35 1
#include <stdarg.h>
a38 3
#include <unistd.h>
#include <dirent.h>
#include <util.h>
a40 1
#include <fs/msdosfs/bpb.h>
a41 1
#include <fs/msdosfs/msdosfsmount.h>
@


1.1
log
@Import makefs - a tool to create filesystem images from a directory.

This is a rough port of the NetBSD tool with some features removed we
don't need. It compiles, but I don't promise anything more. Importing
now, so we can hack on it in tree.

The supported filesystem types are: cd9660, ffs and msdosfs.

ok deraadt
@
text
@a56 5
struct msdos_options_ex {
	struct msdos_options options;
	bool utf8;
};

d60 1
a60 1
	struct msdos_options_ex *msdos_opt = ecalloc(1, sizeof(*msdos_opt));
d70 1
a70 1
	.value = &msdos_opt->options._name,				\
a78 2
		{ 'U', "utf8", &msdos_opt->utf8, OPT_BOOL,
		  0, 1, "Use UTF8 names" },
d125 1
a125 1
	struct msdos_options_ex *msdos_opt = fsopts->fs_specific;
a128 1
	uint32_t flags;
d139 1
a139 1
	msdos_opt->options.create_size = MAX(msdos_opt->options.create_size,
d141 2
a142 2
	msdos_opt->options.offset = fsopts->offset;
	if (msdos_opt->options.bytes_per_sector == 0) {
d145 1
a145 1
		msdos_opt->options.bytes_per_sector = fsopts->sectorsize;
d147 2
a148 2
		fsopts->sectorsize = msdos_opt->options.bytes_per_sector;
	} else if (fsopts->sectorsize != msdos_opt->options.bytes_per_sector) {
d151 1
a151 1
		    fsopts->sectorsize, msdos_opt->options.bytes_per_sector);
d157 1
a157 1
	if (mkfs_msdos(image, NULL, &msdos_opt->options) == -1)
d164 1
a164 5
	flags = 0;
	if (msdos_opt->utf8)
		flags |= MSDOSFSMNT_UTF8;

	if ((pmp = msdosfs_mount(&vp, flags)) == NULL)
@

