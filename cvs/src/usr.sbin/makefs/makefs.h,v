head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12;
locks; strict;
comment	@ * @;


1.12
date	2016.12.17.16.12.15;	author krw;	state Exp;
branches;
next	1.11;
commitid	A9ngZLAcWJ1yliUg;

1.11
date	2016.10.26.07.53.47;	author natano;	state Exp;
branches;
next	1.10;
commitid	u5FhgAQMMhudj2OK;

1.10
date	2016.10.23.10.22.21;	author natano;	state Exp;
branches;
next	1.9;
commitid	rHhaLNWxkoYu4Pqx;

1.9
date	2016.10.22.19.20.36;	author natano;	state Exp;
branches;
next	1.8;
commitid	bsNhXFArB5P2xk2Y;

1.8
date	2016.10.22.19.17.47;	author natano;	state Exp;
branches;
next	1.7;
commitid	984F18i0puIYFRTL;

1.7
date	2016.10.22.18.17.14;	author natano;	state Exp;
branches;
next	1.6;
commitid	Dnp7IFCOk553ITkR;

1.6
date	2016.10.17.07.54.17;	author natano;	state Exp;
branches;
next	1.5;
commitid	bwAFBWlUquDxvgor;

1.5
date	2016.10.16.21.59.28;	author tedu;	state Exp;
branches;
next	1.4;
commitid	SARjsefQgjiMBFje;

1.4
date	2016.10.16.20.45.07;	author natano;	state Exp;
branches;
next	1.3;
commitid	8FkTvtx7GLzj3OKz;

1.3
date	2016.10.16.20.30.40;	author natano;	state Exp;
branches;
next	1.2;
commitid	MIQhJqZTHW9Z31K2;

1.2
date	2016.10.16.20.26.56;	author natano;	state Exp;
branches;
next	1.1;
commitid	CmcYdpJMky9LxxDQ;

1.1
date	2016.10.16.17.08.53;	author natano;	state Exp;
branches;
next	;
commitid	O38itEriwOj0afR7;


desc
@@


1.12
log
@While here nuke some more annoying whitespace nits.
@
text
@/*	$OpenBSD: makefs.h,v 1.11 2016/10/26 07:53:47 natano Exp $	*/
/*	$NetBSD: makefs.h,v 1.36 2015/11/25 00:48:49 christos Exp $	*/

/*
 * Copyright (c) 2001 Wasabi Systems, Inc.
 * All rights reserved.
 *
 * Written by Luke Mewburn for Wasabi Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed for the NetBSD Project by
 *      Wasabi Systems, Inc.
 * 4. The name of Wasabi Systems, Inc. may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY WASABI SYSTEMS, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL WASABI SYSTEMS, INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef	_MAKEFS_H
#define	_MAKEFS_H

#include <sys/stat.h>
#include <err.h>

/*
 * fsnode -
 *	a component of the tree; contains a filename, a pointer to
 *	fsinode, optional symlink name, and tree pointers
 *
 * fsinode -
 *	equivalent to an inode, containing target file system inode number,
 *	refcount (nlink), and stat buffer
 *
 * A tree of fsnodes looks like this:
 *
 *	name	"."		"bin"		"netbsd"
 *	type	S_IFDIR		S_IFDIR		S_IFREG
 *	next	  >		  >		NULL
 *	parent	NULL		NULL		NULL
 *	child	NULL		  v
 *
 *	name			"."		"ls"
 *	type			S_IFDIR		S_IFREG
 *	next			  >		NULL
 *	parent			  ^		^ (to "bin")
 *	child			NULL		NULL
 *
 * Notes:
 *	-   first always points to first entry, at current level, which
 *	    must be "." when the tree has been built; during build it may
 *	    not be if "." hasn't yet been found by readdir(2).
 */

enum fi_flags {
	FI_SIZED =	1<<0,		/* inode sized */
	FI_ALLOCATED =	1<<1,		/* fsinode->ino allocated */
	FI_WRITTEN =	1<<2,		/* inode written */
};

typedef struct {
	uint32_t	 ino;		/* inode number used on target fs */
	uint32_t	 nlink;		/* number of links to this entry */
	enum fi_flags	 flags;		/* flags used by fs specific code */
	struct stat	 st;		/* stat entry */
	void		*fsuse;		/* for storing FS dependent info */
} fsinode;

typedef struct _fsnode {
	struct _fsnode	*parent;	/* parent (NULL if root) */
	struct _fsnode	*child;		/* child (if type == S_IFDIR) */
	struct _fsnode	*next;		/* next */
	struct _fsnode	*first;		/* first node of current level (".") */
	uint32_t	 type;		/* type of entry */
	fsinode		*inode;		/* actual inode data */
	char		*symlink;	/* symlink target */
	const char	*root;		/* root path */
	char		*path;		/* directory name */
	char		*name;		/* file name */
	int		flags;		/* misc flags */
} fsnode;

#define	FSNODE_F_HASSPEC	0x01	/* fsnode has a spec entry */

/*
 * option_t - contains option name, description, pointer to location to store
 * result, and range checks for the result. Used to simplify fs specific
 * option setting
 */
typedef enum {
	OPT_STRARRAY,
	OPT_STRPTR,
	OPT_STRBUF,
	OPT_BOOL,
	OPT_INT8,
	OPT_INT16,
	OPT_INT32,
	OPT_INT64
} opttype_t;

typedef struct {
	const char	*name;		/* option name */
	void		*value;		/* where to stuff the value */
	opttype_t	type;		/* type of entry */
	long long	minimum;	/* minimum for value */
	long long	maximum;	/* maximum for value */
} option_t;

/*
 * fsinfo_t - contains various settings and parameters pertaining to
 * the image, including current settings, global options, and fs
 * specific options
 */
typedef struct makefs_fsinfo {
		/* current settings */
	off_t	size;		/* total size */
	off_t	inodes;		/* number of inodes */
	uint32_t curinode;	/* current inode */

		/* image settings */
	int	fd;		/* file descriptor of image */
	void	*superblock;	/* superblock */

		/* global options */
	off_t	minsize;	/* minimum size image should be */
	off_t	maxsize;	/* maximum size image can be */
	off_t	freefiles;	/* free file entries to leave */
	off_t	freeblocks;	/* free blocks to leave */
	off_t	offset;		/* offset from start of file */
	int	freefilepc;	/* free file % */
	int	freeblockpc;	/* free block % */
	int	sectorsize;	/* sector size */

	void	*fs_specific;	/* File system specific additions. */
	option_t *fs_options;	/* File system specific options */
} fsinfo_t;




const char *	inode_type(mode_t);
int		set_option(const option_t *, const char *, char *, size_t);
int		set_option_var(const option_t *, const char *, const char *,
    char *, size_t);
fsnode *	walk_dir(const char *, const char *, fsnode *, fsnode *);
void		free_fsnodes(fsnode *);
option_t *	copy_opts(const option_t *);

#define DECLARE_FUN(fs)							\
void		fs ## _prep_opts(fsinfo_t *);				\
int		fs ## _parse_opts(const char *, fsinfo_t *);		\
void		fs ## _cleanup_opts(fsinfo_t *);			\
void		fs ## _makefs(const char *, const char *, fsnode *, fsinfo_t *)

DECLARE_FUN(ffs);
DECLARE_FUN(cd9660);
DECLARE_FUN(msdos);

extern	int Tflag;
extern	time_t stampts;
extern	struct timespec	start_time;


#ifndef	DEFAULT_FSTYPE
#define	DEFAULT_FSTYPE	"ffs"
#endif


/* xmalloc.c */
void	*emalloc(size_t);
void	*ecalloc(size_t, size_t);
void	*erealloc(void *, size_t);
char	*estrdup(const char *);

#endif	/* _MAKEFS_H */
@


1.11
log
@Remove FS-specific option descriptions from the source code. We have a
manual for that. While there document the isolevel option and remove
some dysfunctional cd9660 options.
@
text
@d1 1
a1 1
/*	$OpenBSD: makefs.h,v 1.10 2016/10/23 10:22:21 natano Exp $	*/
d50 1
a50 1
 * fsinode - 
d58 1
a58 1
 *	next 	  >		  >		NULL
@


1.10
log
@Remove short option names for -o.
@
text
@d1 1
a1 1
/*	$OpenBSD: makefs.h,v 1.9 2016/10/22 19:20:36 natano Exp $	*/
a125 1
	const char	*desc;		/* option description */
@


1.9
log
@More "debug" code that has to go.
@
text
@d1 1
a1 1
/*	$OpenBSD: makefs.h,v 1.8 2016/10/22 19:17:47 natano Exp $	*/
a120 1
	char		letter;		/* option letter NUL for none */
@


1.8
log
@Clean up timestamp handling code to be less confusing.
@
text
@d1 1
a1 1
/*	$OpenBSD: makefs.h,v 1.7 2016/10/22 18:17:14 natano Exp $	*/
a161 1
void		dump_fsnodes(fsnode *);
@


1.7
log
@Remove huge amounts of debug code, that make the code nearly unreadable.
@
text
@d1 1
a1 1
/*	$OpenBSD: makefs.h,v 1.6 2016/10/17 07:54:17 natano Exp $	*/
d181 2
a182 1
extern	u_int		debug;
a183 1
extern	struct stat stampst;
@


1.6
log
@Remove "feature" defines. This code won't try to be portable when we are
done hacking it.
@
text
@d1 1
a1 1
/*	$OpenBSD: makefs.h,v 1.5 2016/10/16 21:59:28 tedu Exp $	*/
a183 43

#define	DEBUG_TIME			0x00000001
		/* debug bits 1..3 unused at this time */
#define	DEBUG_WALK_DIR			0x00000010
#define	DEBUG_WALK_DIR_NODE		0x00000020
#define	DEBUG_WALK_DIR_LINKCHECK	0x00000040
#define	DEBUG_DUMP_FSNODES		0x00000080
#define	DEBUG_DUMP_FSNODES_VERBOSE	0x00000100
#define	DEBUG_FS_PARSE_OPTS		0x00000200
#define	DEBUG_FS_MAKEFS			0x00000400
#define	DEBUG_FS_VALIDATE		0x00000800
#define	DEBUG_FS_CREATE_IMAGE		0x00001000
#define	DEBUG_FS_SIZE_DIR		0x00002000
#define	DEBUG_FS_SIZE_DIR_NODE		0x00004000
#define	DEBUG_FS_SIZE_DIR_ADD_DIRENT	0x00008000
#define	DEBUG_FS_POPULATE		0x00010000
#define	DEBUG_FS_POPULATE_DIRBUF	0x00020000
#define	DEBUG_FS_POPULATE_NODE		0x00040000
#define	DEBUG_FS_WRITE_FILE		0x00080000
#define	DEBUG_FS_WRITE_FILE_BLOCK	0x00100000
#define	DEBUG_FS_MAKE_DIRBUF		0x00200000
#define	DEBUG_FS_WRITE_INODE		0x00400000
#define	DEBUG_BUF_BREAD			0x00800000
#define	DEBUG_BUF_BWRITE		0x01000000
#define	DEBUG_BUF_GETBLK		0x02000000
#define	DEBUG_APPLY_SPECFILE		0x04000000
#define	DEBUG_APPLY_SPECENTRY		0x08000000
#define	DEBUG_APPLY_SPECONLY		0x10000000


#define	TIMER_START(x)				\
	if (debug & DEBUG_TIME)			\
		gettimeofday(&(x), NULL)

#define	TIMER_RESULTS(x,d)				\
	if (debug & DEBUG_TIME) {			\
		struct timeval end, td;			\
		gettimeofday(&end, NULL);		\
		timersub(&end, &(x), &td);		\
		printf("%s took %lld.%06ld seconds\n",	\
		    (d), (long long)td.tv_sec,		\
		    (long)td.tv_usec);			\
	}
@


1.5
log
@remove some byte swapping code from the top end
@
text
@d1 1
a1 1
/*	$OpenBSD: makefs.h,v 1.4 2016/10/16 20:45:07 natano Exp $	*/
a40 6

#define HAVE_STRUCT_STAT_ST_FLAGS 1
#define HAVE_STRUCT_STAT_ST_GEN 1
#define HAVE_STRUCT_STAT_ST_MTIMENSEC 1
#define HAVE_STRUCT_STATVFS_F_IOSIZE 0
#define HAVE_FSTATVFS 1
@


1.4
log
@Only allow one directory as argument and remove the -r option.
ok deraadt (on principle)
@
text
@d1 1
a1 1
/*	$OpenBSD: makefs.h,v 1.3 2016/10/16 20:30:40 natano Exp $	*/
a158 1
	int	needswap;	/* non-zero if byte swapping needed */
@


1.3
log
@Remove the -Z (spare ffs image) option.
@
text
@d1 1
a1 1
/*	$OpenBSD: makefs.h,v 1.2 2016/10/16 20:26:56 natano Exp $	*/
a160 1
	int	replace;	/* replace files when merging */
d174 1
a174 1
fsnode *	walk_dir(const char *, const char *, fsnode *, fsnode *, int);
@


1.2
log
@Add OpenBSD RCS tags; reminded by tb
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a160 1
	int	sparse;		/* sparse image, don't fill it with zeros */
@


1.1
log
@Import makefs - a tool to create filesystem images from a directory.

This is a rough port of the NetBSD tool with some features removed we
don't need. It compiles, but I don't promise anything more. Importing
now, so we can hack on it in tree.

The supported filesystem types are: cd9660, ffs and msdosfs.

ok deraadt
@
text
@d1 1
@

