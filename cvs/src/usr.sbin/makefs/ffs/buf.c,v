head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6;
locks; strict;
comment	@ * @;


1.6
date	2016.12.17.16.26.46;	author krw;	state Exp;
branches;
next	1.5;
commitid	QI644l1OZS5OAKBL;

1.5
date	2016.10.26.15.31.13;	author natano;	state Exp;
branches;
next	1.4;
commitid	zqExfQ3CxlIJwRFt;

1.4
date	2016.10.22.18.17.14;	author natano;	state Exp;
branches;
next	1.3;
commitid	Dnp7IFCOk553ITkR;

1.3
date	2016.10.17.01.16.22;	author tedu;	state Exp;
branches;
next	1.2;
commitid	XIRBCiI8rxgjkmJi;

1.2
date	2016.10.16.20.26.56;	author natano;	state Exp;
branches;
next	1.1;
commitid	CmcYdpJMky9LxxDQ;

1.1
date	2016.10.16.17.08.53;	author natano;	state Exp;
branches;
next	;
commitid	O38itEriwOj0afR7;


desc
@@


1.6
log
@While here nuke some more annoying whitespace nits.
@
text
@/*	$OpenBSD: buf.c,v 1.5 2016/10/26 15:31:13 natano Exp $	*/
/*	$NetBSD: buf.c,v 1.24 2016/06/24 19:24:11 christos Exp $	*/

/*
 * Copyright (c) 2001 Wasabi Systems, Inc.
 * All rights reserved.
 *
 * Written by Luke Mewburn for Wasabi Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed for the NetBSD Project by
 *      Wasabi Systems, Inc.
 * 4. The name of Wasabi Systems, Inc. may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY WASABI SYSTEMS, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL WASABI SYSTEMS, INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/time.h>

#include <assert.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <util.h>

#include "makefs.h"
#include "buf.h"

TAILQ_HEAD(buftailhead,mkfsbuf) buftail;

int
bread(struct mkfsvnode *vp, daddr_t blkno, int size, int u2 __unused,
	struct mkfsbuf **bpp)
{
	off_t	offset;
	ssize_t	rv;
	fsinfo_t *fs = vp->fs;

	assert (bpp != NULL);

	*bpp = getblk(vp, blkno, size, 0, 0);
	offset = (*bpp)->b_blkno * fs->sectorsize + fs->offset;
	if (lseek((*bpp)->b_fs->fd, offset, SEEK_SET) == -1)
		err(1, "%s: lseek %lld (%lld)", __func__,
		    (long long)(*bpp)->b_blkno, (long long)offset);
	rv = read((*bpp)->b_fs->fd, (*bpp)->b_data, (size_t)(*bpp)->b_bcount);
	if (rv == -1)				/* read error */
		err(1, "%s: read %ld (%lld) returned %zd", __func__,
		    (*bpp)->b_bcount, (long long)offset, rv);
	else if (rv != (*bpp)->b_bcount)	/* short read */
		errx(1, "%s: read %ld (%lld) returned %zd", __func__,
		    (*bpp)->b_bcount, (long long)offset, rv);
	else
		return (0);
}

void
brelse(struct mkfsbuf *bp, int u1 __unused)
{

	assert (bp != NULL);
	assert (bp->b_data != NULL);

	if (bp->b_lblkno < 0) {
		/*
		 * XXX	don't remove any buffers with negative logical block
		 *	numbers (lblkno), so that we retain the mapping
		 *	of negative lblkno -> real blkno that ffs_balloc()
		 *	sets up.
		 *
		 *	if we instead released these buffers, and implemented
		 *	ufs_strategy() (and ufs_bmaparray()) and called those
		 *	from bread() and bwrite() to convert the lblkno to
		 *	a real blkno, we'd add a lot more code & complexity
		 *	and reading off disk, for little gain, because this
		 *	simple hack works for our purpose.
		 */
		bp->b_bcount = 0;
		return;
	}

	TAILQ_REMOVE(&buftail, bp, b_tailq);
	free(bp->b_data);
	free(bp);
}

int
bwrite(struct mkfsbuf *bp)
{
	off_t	offset;
	ssize_t	rv;
	size_t	bytes;
	fsinfo_t *fs = bp->b_fs;

	assert (bp != NULL);
	offset = bp->b_blkno * fs->sectorsize + fs->offset;
	bytes  = (size_t)bp->b_bcount;
	if (lseek(bp->b_fs->fd, offset, SEEK_SET) == -1)
		return (errno);
	rv = write(bp->b_fs->fd, bp->b_data, bytes);
	brelse(bp, 0);
	if (rv == (ssize_t)bytes)
		return (0);
	else if (rv == -1)		/* write error */
		return (errno);
	else				/* short write ? */
		return (EAGAIN);
}

void
bcleanup(void)
{
#if DEBUG_BUFFERS
	struct mkfsbuf *bp;

	/*
	 * XXX	this really shouldn't be necessary, but i'm curious to
	 *	know why there's still some buffers lying around that
	 *	aren't brelse()d
	 */

	if (TAILQ_EMPTY(&buftail))
		return;

	printf("bcleanup: unflushed buffers:\n");
	TAILQ_FOREACH(bp, &buftail, b_tailq) {
		printf("\tlblkno %10lld  blkno %10lld  count %6ld  bufsize %6ld\n",
		    (long long)bp->b_lblkno, (long long)bp->b_blkno,
		    bp->b_bcount, bp->b_bufsize);
	}
	printf("bcleanup: done\n");
#endif
}

struct mkfsbuf *
getblk(struct mkfsvnode *vp, daddr_t blkno, int size, int u1 __unused,
    int u2 __unused)
{
	static int buftailinitted;
	struct mkfsbuf *bp;
	void *n;

	bp = NULL;
	if (!buftailinitted) {
		TAILQ_INIT(&buftail);
		buftailinitted = 1;
	} else {
		TAILQ_FOREACH(bp, &buftail, b_tailq) {
			if (bp->b_lblkno != blkno)
				continue;
			break;
		}
	}
	if (bp == NULL) {
		bp = ecalloc(1, sizeof(*bp));
		bp->b_bufsize = 0;
		bp->b_blkno = bp->b_lblkno = blkno;
		bp->b_fs = vp->fs;
		bp->b_data = NULL;
		TAILQ_INSERT_HEAD(&buftail, bp, b_tailq);
	}
	bp->b_bcount = size;
	if (bp->b_data == NULL || bp->b_bcount > bp->b_bufsize) {
		n = erealloc(bp->b_data, (size_t)size);
		memset(n, 0, (size_t)size);
		bp->b_data = n;
		bp->b_bufsize = size;
	}

	return (bp);
}
@


1.5
log
@s/EXIT_FAILURE/1/
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.c,v 1.4 2016/10/22 18:17:14 natano Exp $	*/
d104 1
a104 1
		
d144 1
a144 1
	
@


1.4
log
@Remove huge amounts of debug code, that make the code nearly unreadable.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.c,v 1.3 2016/10/17 01:16:22 tedu Exp $	*/
d67 1
a67 1
		err(EXIT_FAILURE, "%s: lseek %lld (%lld)", __func__,
d71 1
a71 1
		err(EXIT_FAILURE, "%s: read %ld (%lld) returned %zd", __func__,
d74 1
a74 1
		errx(EXIT_FAILURE, "%s: read %ld (%lld) returned %zd", __func__,
@


1.3
log
@mechanical rename of vnode to mkfsvnode and buf to mkfsbuf to avoid
collisions with the kernel structures of the same name.
caught one bug where the wrong header was being included.
@
text
@d1 1
a1 1
/*	$OpenBSD: buf.c,v 1.2 2016/10/16 20:26:56 natano Exp $	*/
a63 2
	if (debug & DEBUG_BUF_BREAD)
		printf("bread: blkno %lld size %d\n", (long long)blkno, size);
a65 4
	if (debug & DEBUG_BUF_BREAD)
		printf("bread: blkno %lld offset %lld bcount %ld\n",
		    (long long)(*bpp)->b_blkno, (long long) offset,
		    (*bpp)->b_bcount);
a69 3
	if (debug & DEBUG_BUF_BREAD)
		printf("bread: read %ld (%lld) returned %zd\n",
		    (*bpp)->b_bcount, (long long)offset, rv);
a120 3
	if (debug & DEBUG_BUF_BWRITE)
		printf("bwrite: blkno %lld offset %lld bcount %zu\n",
		    (long long)bp->b_blkno, (long long) offset, bytes);
a123 3
	if (debug & DEBUG_BUF_BWRITE)
		printf("bwrite: write %ld (offset %lld) returned %lld\n",
		    bp->b_bcount, (long long)offset, (long long)rv);
d136 1
d155 1
a165 3
	if (debug & DEBUG_BUF_GETBLK)
		printf("getblk: blkno %lld size %d\n", (long long)blkno, size);

a167 2
		if (debug & DEBUG_BUF_GETBLK)
			printf("getblk: initialising tailq\n");
@


1.2
log
@Add OpenBSD RCS tags; reminded by tb
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 1
a52 1
TAILQ_HEAD(buftailhead,buf) buftail;
d55 2
a56 2
bread(struct vnode *vp, daddr_t blkno, int size, int u2 __unused,
	struct buf **bpp)
d90 1
a90 1
brelse(struct buf *bp, int u1 __unused)
d120 1
a120 1
bwrite(struct buf *bp)
d151 1
a151 1
	struct buf *bp;
d171 2
a172 2
struct buf *
getblk(struct vnode *vp, daddr_t blkno, int size, int u1 __unused,
d176 1
a176 1
	struct buf *bp;
@


1.1
log
@Import makefs - a tool to create filesystem images from a directory.

This is a rough port of the NetBSD tool with some features removed we
don't need. It compiles, but I don't promise anything more. Importing
now, so we can hack on it in tree.

The supported filesystem types are: cd9660, ffs and msdosfs.

ok deraadt
@
text
@d1 1
@

