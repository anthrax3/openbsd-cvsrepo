head	1.8;
access;
symbols
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8;
locks; strict;
comment	@ * @;


1.8
date	2016.10.22.19.43.50;	author natano;	state Exp;
branches;
next	1.7;
commitid	E9ru6iMm8TbER1tL;

1.7
date	2016.10.22.16.51.52;	author natano;	state Exp;
branches;
next	1.6;
commitid	c3bc3iog8Vd2Umt6;

1.6
date	2016.10.18.17.23.21;	author natano;	state Exp;
branches;
next	1.5;
commitid	mFWxcHDQMKvsT7VE;

1.5
date	2016.10.17.01.16.22;	author tedu;	state Exp;
branches;
next	1.4;
commitid	XIRBCiI8rxgjkmJi;

1.4
date	2016.10.16.22.19.10;	author tedu;	state Exp;
branches;
next	1.3;
commitid	HedW8IcVTS60e4lT;

1.3
date	2016.10.16.20.26.56;	author natano;	state Exp;
branches;
next	1.2;
commitid	CmcYdpJMky9LxxDQ;

1.2
date	2016.10.16.19.53.11;	author natano;	state Exp;
branches;
next	1.1;
commitid	1ZHAN76P5QzJWokO;

1.1
date	2016.10.16.17.08.53;	author natano;	state Exp;
branches;
next	;
commitid	O38itEriwOj0afR7;


desc
@@


1.8
log
@Get rid of remaining FFS byteswap function stubs.
@
text
@/*	$OpenBSD: ffs_balloc.c,v 1.7 2016/10/22 16:51:52 natano Exp $	*/
/*	$NetBSD: ffs_balloc.c,v 1.21 2015/03/29 05:52:59 agc Exp $	*/
/* From NetBSD: ffs_balloc.c,v 1.25 2001/08/08 08:36:36 lukem Exp */

/*
 * Copyright (c) 1982, 1986, 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)ffs_balloc.c	8.8 (Berkeley) 6/16/95
 */

#include <assert.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>

#include <ufs/ufs/dinode.h>
#include <ufs/ffs/fs.h>

#include "ffs/buf.h"
#include "ffs/ufs_inode.h"
#include "ffs/ffs_extern.h"

static int ffs_balloc_ufs1(struct inode *, off_t, int, struct mkfsbuf **);
static int ffs_balloc_ufs2(struct inode *, off_t, int, struct mkfsbuf **);

/*
 * Balloc defines the structure of file system storage
 * by allocating the physical blocks on a device given
 * the inode and the logical block number in a file.
 *
 * Assume: flags == B_SYNC | B_CLRBUF
 */

int
ffs_balloc(struct inode *ip, off_t offset, int bufsize, struct mkfsbuf **bpp)
{
	if (ip->i_fs->fs_magic == FS_UFS2_MAGIC)
		return ffs_balloc_ufs2(ip, offset, bufsize, bpp);
	else
		return ffs_balloc_ufs1(ip, offset, bufsize, bpp);
}

static int
ffs_balloc_ufs1(struct inode *ip, off_t offset, int bufsize, struct mkfsbuf **bpp)
{
	daddr_t lbn, lastlbn;
	int size;
	int32_t nb;
	struct mkfsbuf *bp, *nbp;
	struct fs *fs = ip->i_fs;
	struct indir indirs[NIADDR + 2];
	daddr_t newb, pref;
	int32_t *bap;
	int osize, nsize, num, i, error;
	int32_t *allocblk, allociblk[NIADDR + 1];
	int32_t *allocib;

	lbn = lblkno(fs, offset);
	size = blkoff(fs, offset) + bufsize;
	if (bpp != NULL) {
		*bpp = NULL;
	}

	assert(size <= fs->fs_bsize);
	if (lbn < 0)
		return (EFBIG);

	/*
	 * If the next write will extend the file into a new block,
	 * and the file is currently composed of a fragment
	 * this fragment has to be extended to be a full block.
	 */

	lastlbn = lblkno(fs, ip->i_ffs1_size);
	if (lastlbn < NDADDR && lastlbn < lbn) {
		nb = lastlbn;
		osize = blksize(fs, ip, nb);
		if (osize < fs->fs_bsize && osize > 0) {
			warnx("need to ffs_realloccg; not supported!");
			abort();
		}
	}

	/*
	 * The first NDADDR blocks are direct blocks
	 */

	if (lbn < NDADDR) {
		nb = ip->i_ffs1_db[lbn];
		if (nb != 0 && ip->i_ffs1_size >= lblktosize(fs, lbn + 1)) {

			/*
			 * The block is an already-allocated direct block
			 * and the file already extends past this block,
			 * thus this must be a whole block.
			 * Just read the block (if requested).
			 */

			if (bpp != NULL) {
				error = bread(ip->i_devvp, lbn, fs->fs_bsize,
				    0, bpp);
				if (error) {
					brelse(*bpp, 0);
					return (error);
				}
			}
			return (0);
		}
		if (nb != 0) {

			/*
			 * Consider need to reallocate a fragment.
			 */

			osize = fragroundup(fs, blkoff(fs, ip->i_ffs1_size));
			nsize = fragroundup(fs, size);
			if (nsize <= osize) {

				/*
				 * The existing block is already
				 * at least as big as we want.
				 * Just read the block (if requested).
				 */

				if (bpp != NULL) {
					error = bread(ip->i_devvp, lbn, osize,
					    0, bpp);
					if (error) {
						brelse(*bpp, 0);
						return (error);
					}
				}
				return 0;
			} else {
				warnx("need to ffs_realloccg; not supported!");
				abort();
			}
		} else {

			/*
			 * the block was not previously allocated,
			 * allocate a new block or fragment.
			 */

			if (ip->i_ffs1_size < lblktosize(fs, lbn + 1))
				nsize = fragroundup(fs, size);
			else
				nsize = fs->fs_bsize;
			error = ffs_alloc(ip, lbn,
			    ffs_blkpref_ufs1(ip, lbn, (int)lbn,
				&ip->i_ffs1_db[0]),
				nsize, &newb);
			if (error)
				return (error);
			if (bpp != NULL) {
				bp = getblk(ip->i_devvp, lbn, nsize, 0, 0);
				bp->b_blkno = fsbtodb(fs, newb);
				clrbuf(bp);
				*bpp = bp;
			}
		}
		ip->i_ffs1_db[lbn] = newb;
		return (0);
	}

	/*
	 * Determine the number of levels of indirection.
	 */

	pref = 0;
	if ((error = ufs_getlbns(ip, lbn, indirs, &num)) != 0)
		return (error);

	if (num < 1) {
		warnx("ffs_balloc: ufs_getlbns returned indirect block");
		abort();
	}

	/*
	 * Fetch the first indirect block allocating if necessary.
	 */

	--num;
	nb = ip->i_ffs1_ib[indirs[0].in_off];
	allocib = NULL;
	allocblk = allociblk;
	if (nb == 0) {
		pref = ffs_blkpref_ufs1(ip, lbn, 0, (int32_t *)0);
		error = ffs_alloc(ip, lbn, pref, (int)fs->fs_bsize, &newb);
		if (error)
			return error;
		nb = newb;
		*allocblk++ = nb;
		bp = getblk(ip->i_devvp, indirs[1].in_lbn, fs->fs_bsize, 0, 0);
		bp->b_blkno = fsbtodb(fs, nb);
		clrbuf(bp);
		/*
		 * Write synchronously so that indirect blocks
		 * never point at garbage.
		 */
		if ((error = bwrite(bp)) != 0)
			return error;
		allocib = &ip->i_ffs1_ib[indirs[0].in_off];
		*allocib = nb;
	}

	/*
	 * Fetch through the indirect blocks, allocating as necessary.
	 */

	for (i = 1;;) {
		error = bread(ip->i_devvp, indirs[i].in_lbn, fs->fs_bsize,
		    0, &bp);
		if (error) {
			brelse(bp, 0);
			return error;
		}
		bap = (int32_t *)bp->b_data;
		nb = bap[indirs[i].in_off];
		if (i == num)
			break;
		i++;
		if (nb != 0) {
			brelse(bp, 0);
			continue;
		}
		if (pref == 0)
			pref = ffs_blkpref_ufs1(ip, lbn, 0, (int32_t *)0);
		error = ffs_alloc(ip, lbn, pref, (int)fs->fs_bsize, &newb);
		if (error) {
			brelse(bp, 0);
			return error;
		}
		nb = newb;
		*allocblk++ = nb;
		nbp = getblk(ip->i_devvp, indirs[i].in_lbn, fs->fs_bsize, 0, 0);
		nbp->b_blkno = fsbtodb(fs, nb);
		clrbuf(nbp);
		/*
		 * Write synchronously so that indirect blocks
		 * never point at garbage.
		 */

		if ((error = bwrite(nbp)) != 0) {
			brelse(bp, 0);
			return error;
		}
		bap[indirs[i - 1].in_off] = nb;

		bwrite(bp);
	}

	/*
	 * Get the data block, allocating if necessary.
	 */

	if (nb == 0) {
		pref = ffs_blkpref_ufs1(ip, lbn, indirs[num].in_off, &bap[0]);
		error = ffs_alloc(ip, lbn, pref, (int)fs->fs_bsize, &newb);
		if (error) {
			brelse(bp, 0);
			return error;
		}
		nb = newb;
		*allocblk++ = nb;
		if (bpp != NULL) {
			nbp = getblk(ip->i_devvp, lbn, fs->fs_bsize, 0, 0);
			nbp->b_blkno = fsbtodb(fs, nb);
			clrbuf(nbp);
			*bpp = nbp;
		}
		bap[indirs[num].in_off] = nb;

		/*
		 * If required, write synchronously, otherwise use
		 * delayed write.
		 */
		bwrite(bp);
		return (0);
	}
	brelse(bp, 0);
	if (bpp != NULL) {
		error = bread(ip->i_devvp, lbn, (int)fs->fs_bsize, 0, &nbp);
		if (error) {
			brelse(nbp, 0);
			return error;
		}
		*bpp = nbp;
	}
	return (0);
}

static int
ffs_balloc_ufs2(struct inode *ip, off_t offset, int bufsize, struct mkfsbuf **bpp)
{
	daddr_t lbn, lastlbn;
	int size;
	struct mkfsbuf *bp, *nbp;
	struct fs *fs = ip->i_fs;
	struct indir indirs[NIADDR + 2];
	daddr_t newb, pref, nb;
	int64_t *bap;
	int osize, nsize, num, i, error;
	int64_t *allocblk, allociblk[NIADDR + 1];
	int64_t *allocib;

	lbn = lblkno(fs, offset);
	size = blkoff(fs, offset) + bufsize;
	if (bpp != NULL) {
		*bpp = NULL;
	}

	assert(size <= fs->fs_bsize);
	if (lbn < 0)
		return (EFBIG);

	/*
	 * If the next write will extend the file into a new block,
	 * and the file is currently composed of a fragment
	 * this fragment has to be extended to be a full block.
	 */

	lastlbn = lblkno(fs, ip->i_ffs2_size);
	if (lastlbn < NDADDR && lastlbn < lbn) {
		nb = lastlbn;
		osize = blksize(fs, ip, nb);
		if (osize < fs->fs_bsize && osize > 0) {
			warnx("need to ffs_realloccg; not supported!");
			abort();
		}
	}

	/*
	 * The first NDADDR blocks are direct blocks
	 */

	if (lbn < NDADDR) {
		nb = ip->i_ffs2_db[lbn];
		if (nb != 0 && ip->i_ffs2_size >= lblktosize(fs, lbn + 1)) {

			/*
			 * The block is an already-allocated direct block
			 * and the file already extends past this block,
			 * thus this must be a whole block.
			 * Just read the block (if requested).
			 */

			if (bpp != NULL) {
				error = bread(ip->i_devvp, lbn, fs->fs_bsize,
				    0, bpp);
				if (error) {
					brelse(*bpp, 0);
					return (error);
				}
			}
			return (0);
		}
		if (nb != 0) {

			/*
			 * Consider need to reallocate a fragment.
			 */

			osize = fragroundup(fs, blkoff(fs, ip->i_ffs2_size));
			nsize = fragroundup(fs, size);
			if (nsize <= osize) {

				/*
				 * The existing block is already
				 * at least as big as we want.
				 * Just read the block (if requested).
				 */

				if (bpp != NULL) {
					error = bread(ip->i_devvp, lbn, osize,
					    0, bpp);
					if (error) {
						brelse(*bpp, 0);
						return (error);
					}
				}
				return 0;
			} else {
				warnx("need to ffs_realloccg; not supported!");
				abort();
			}
		} else {

			/*
			 * the block was not previously allocated,
			 * allocate a new block or fragment.
			 */

			if (ip->i_ffs2_size < lblktosize(fs, lbn + 1))
				nsize = fragroundup(fs, size);
			else
				nsize = fs->fs_bsize;
			error = ffs_alloc(ip, lbn,
			    ffs_blkpref_ufs2(ip, lbn, (int)lbn,
				&ip->i_ffs2_db[0]),
				nsize, &newb);
			if (error)
				return (error);
			if (bpp != NULL) {
				bp = getblk(ip->i_devvp, lbn, nsize, 0, 0);
				bp->b_blkno = fsbtodb(fs, newb);
				clrbuf(bp);
				*bpp = bp;
			}
		}
		ip->i_ffs2_db[lbn] = newb;
		return (0);
	}

	/*
	 * Determine the number of levels of indirection.
	 */

	pref = 0;
	if ((error = ufs_getlbns(ip, lbn, indirs, &num)) != 0)
		return (error);

	if (num < 1) {
		warnx("ffs_balloc: ufs_getlbns returned indirect block");
		abort();
	}

	/*
	 * Fetch the first indirect block allocating if necessary.
	 */

	--num;
	nb = ip->i_ffs2_ib[indirs[0].in_off];
	allocib = NULL;
	allocblk = allociblk;
	if (nb == 0) {
		pref = ffs_blkpref_ufs2(ip, lbn, 0, (int64_t *)0);
		error = ffs_alloc(ip, lbn, pref, (int)fs->fs_bsize, &newb);
		if (error)
			return error;
		nb = newb;
		*allocblk++ = nb;
		bp = getblk(ip->i_devvp, indirs[1].in_lbn, fs->fs_bsize, 0, 0);
		bp->b_blkno = fsbtodb(fs, nb);
		clrbuf(bp);
		/*
		 * Write synchronously so that indirect blocks
		 * never point at garbage.
		 */
		if ((error = bwrite(bp)) != 0)
			return error;
		allocib = &ip->i_ffs2_ib[indirs[0].in_off];
		*allocib = nb;
	}

	/*
	 * Fetch through the indirect blocks, allocating as necessary.
	 */

	for (i = 1;;) {
		error = bread(ip->i_devvp, indirs[i].in_lbn, fs->fs_bsize,
		    0, &bp);
		if (error) {
			brelse(bp, 0);
			return error;
		}
		bap = (int64_t *)bp->b_data;
		nb = bap[indirs[i].in_off];
		if (i == num)
			break;
		i++;
		if (nb != 0) {
			brelse(bp, 0);
			continue;
		}
		if (pref == 0)
			pref = ffs_blkpref_ufs2(ip, lbn, 0, (int64_t *)0);
		error = ffs_alloc(ip, lbn, pref, (int)fs->fs_bsize, &newb);
		if (error) {
			brelse(bp, 0);
			return error;
		}
		nb = newb;
		*allocblk++ = nb;
		nbp = getblk(ip->i_devvp, indirs[i].in_lbn, fs->fs_bsize, 0, 0);
		nbp->b_blkno = fsbtodb(fs, nb);
		clrbuf(nbp);
		/*
		 * Write synchronously so that indirect blocks
		 * never point at garbage.
		 */

		if ((error = bwrite(nbp)) != 0) {
			brelse(bp, 0);
			return error;
		}
		bap[indirs[i - 1].in_off] = nb;

		bwrite(bp);
	}

	/*
	 * Get the data block, allocating if necessary.
	 */

	if (nb == 0) {
		pref = ffs_blkpref_ufs2(ip, lbn, indirs[num].in_off, &bap[0]);
		error = ffs_alloc(ip, lbn, pref, (int)fs->fs_bsize, &newb);
		if (error) {
			brelse(bp, 0);
			return error;
		}
		nb = newb;
		*allocblk++ = nb;
		if (bpp != NULL) {
			nbp = getblk(ip->i_devvp, lbn, fs->fs_bsize, 0, 0);
			nbp->b_blkno = fsbtodb(fs, nb);
			clrbuf(nbp);
			*bpp = nbp;
		}
		bap[indirs[num].in_off] = nb;

		/*
		 * If required, write synchronously, otherwise use
		 * delayed write.
		 */
		bwrite(bp);
		return (0);
	}
	brelse(bp, 0);
	if (bpp != NULL) {
		error = bread(ip->i_devvp, lbn, (int)fs->fs_bsize, 0,
		    &nbp);
		if (error) {
			brelse(nbp, 0);
			return error;
		}
		*bpp = nbp;
	}
	return (0);
}
@


1.7
log
@Include our own <ufs/ufs/dinode.h>, <ufs/ufs/dir.h> and <ufs/ffs/fs.h>
header files instead of relying on copies of NetBSD's headers. This
required some changes in the .c files, due to renamed fields, functions
and preprocessor macros. Also pull in our own ffs_tables.c. As a bonus
this diff gets rid of layout compatibility issues in the superblock
(position of the fs_flags field).
@
text
@d1 1
a1 1
/*	$OpenBSD: ffs_balloc.c,v 1.6 2016/10/18 17:23:21 natano Exp $	*/
a44 1
#include "ffs/ufs_bswap.h"
d114 1
a114 1
		nb = ufs_rw32(ip->i_ffs1_db[lbn], 0);
d187 1
a187 1
		ip->i_ffs1_db[lbn] = ufs_rw32((int32_t)newb, 0);
d209 1
a209 1
	nb = ufs_rw32(ip->i_ffs1_ib[indirs[0].in_off], 0);
d229 1
a229 1
		*allocib = ufs_rw32((int32_t)nb, 0);
d244 1
a244 1
		nb = ufs_rw32(bap[indirs[i].in_off], 0);
d273 1
a273 1
		bap[indirs[i - 1].in_off] = ufs_rw32(nb, 0);
d297 1
a297 1
		bap[indirs[num].in_off] = ufs_rw32(nb, 0);
d363 1
a363 1
		nb = ufs_rw64(ip->i_ffs2_db[lbn], 0);
d436 1
a436 1
		ip->i_ffs2_db[lbn] = ufs_rw64(newb, 0);
d458 1
a458 1
	nb = ufs_rw64(ip->i_ffs2_ib[indirs[0].in_off], 0);
d478 1
a478 1
		*allocib = ufs_rw64(nb, 0);
d493 1
a493 1
		nb = ufs_rw64(bap[indirs[i].in_off], 0);
d522 1
a522 1
		bap[indirs[i - 1].in_off] = ufs_rw64(nb, 0);
d546 1
a546 1
		bap[indirs[num].in_off] = ufs_rw64(nb, 0);
@


1.6
log
@Merge ufs/{ufs,ffs}/ into ffs/.
@
text
@d1 1
a1 1
/*	$OpenBSD: ffs_balloc.c,v 1.5 2016/10/17 01:16:22 tedu Exp $	*/
d41 2
a42 3
#include "ffs/dinode.h"
#include "ffs/ufs_bswap.h"
#include "ffs/fs.h"
d45 1
d77 1
a77 1
	struct indir indirs[UFS_NIADDR + 2];
d81 1
a81 1
	int32_t *allocblk, allociblk[UFS_NIADDR + 1];
d84 2
a85 2
	lbn = ffs_lblkno(fs, offset);
	size = ffs_blkoff(fs, offset) + bufsize;
d100 2
a101 2
	lastlbn = ffs_lblkno(fs, ip->i_ffs1_size);
	if (lastlbn < UFS_NDADDR && lastlbn < lbn) {
d103 1
a103 1
		osize = ffs_blksize(fs, ip, nb);
d111 1
a111 1
	 * The first UFS_NDADDR blocks are direct blocks
d114 1
a114 1
	if (lbn < UFS_NDADDR) {
d116 1
a116 1
		if (nb != 0 && ip->i_ffs1_size >= ffs_lblktosize(fs, lbn + 1)) {
d141 2
a142 2
			osize = ffs_fragroundup(fs, ffs_blkoff(fs, ip->i_ffs1_size));
			nsize = ffs_fragroundup(fs, size);
d171 2
a172 2
			if (ip->i_ffs1_size < ffs_lblktosize(fs, lbn + 1))
				nsize = ffs_fragroundup(fs, size);
d183 1
a183 1
				bp->b_blkno = FFS_FSBTODB(fs, newb);
d221 1
a221 1
		bp->b_blkno = FFS_FSBTODB(fs, nb);
d263 1
a263 1
		nbp->b_blkno = FFS_FSBTODB(fs, nb);
d294 1
a294 1
			nbp->b_blkno = FFS_FSBTODB(fs, nb);
d326 1
a326 1
	struct indir indirs[UFS_NIADDR + 2];
d330 1
a330 1
	int64_t *allocblk, allociblk[UFS_NIADDR + 1];
d333 2
a334 2
	lbn = ffs_lblkno(fs, offset);
	size = ffs_blkoff(fs, offset) + bufsize;
d349 2
a350 2
	lastlbn = ffs_lblkno(fs, ip->i_ffs2_size);
	if (lastlbn < UFS_NDADDR && lastlbn < lbn) {
d352 1
a352 1
		osize = ffs_blksize(fs, ip, nb);
d360 1
a360 1
	 * The first UFS_NDADDR blocks are direct blocks
d363 1
a363 1
	if (lbn < UFS_NDADDR) {
d365 1
a365 1
		if (nb != 0 && ip->i_ffs2_size >= ffs_lblktosize(fs, lbn + 1)) {
d390 2
a391 2
			osize = ffs_fragroundup(fs, ffs_blkoff(fs, ip->i_ffs2_size));
			nsize = ffs_fragroundup(fs, size);
d420 2
a421 2
			if (ip->i_ffs2_size < ffs_lblktosize(fs, lbn + 1))
				nsize = ffs_fragroundup(fs, size);
d432 1
a432 1
				bp->b_blkno = FFS_FSBTODB(fs, newb);
d470 1
a470 1
		bp->b_blkno = FFS_FSBTODB(fs, nb);
d512 1
a512 1
		nbp->b_blkno = FFS_FSBTODB(fs, nb);
d543 1
a543 1
			nbp->b_blkno = FFS_FSBTODB(fs, nb);
@


1.5
log
@mechanical rename of vnode to mkfsvnode and buf to mkfsbuf to avoid
collisions with the kernel structures of the same name.
caught one bug where the wrong header was being included.
@
text
@d1 1
a1 1
/*	$OpenBSD: ffs_balloc.c,v 1.4 2016/10/16 22:19:10 tedu Exp $	*/
d41 3
a43 3
#include <ufs/ufs/dinode.h>
#include <ufs/ufs/ufs_bswap.h>
#include <ufs/ffs/fs.h>
@


1.4
log
@another round of deswapping
@
text
@d1 1
a1 1
/*	$OpenBSD: ffs_balloc.c,v 1.3 2016/10/16 20:26:56 natano Exp $	*/
d49 2
a50 2
static int ffs_balloc_ufs1(struct inode *, off_t, int, struct buf **);
static int ffs_balloc_ufs2(struct inode *, off_t, int, struct buf **);
d61 1
a61 1
ffs_balloc(struct inode *ip, off_t offset, int bufsize, struct buf **bpp)
d70 1
a70 1
ffs_balloc_ufs1(struct inode *ip, off_t offset, int bufsize, struct buf **bpp)
d75 1
a75 1
	struct buf *bp, *nbp;
d320 1
a320 1
ffs_balloc_ufs2(struct inode *ip, off_t offset, int bufsize, struct buf **bpp)
d324 1
a324 1
	struct buf *bp, *nbp;
@


1.3
log
@Add OpenBSD RCS tags; reminded by tb
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a82 1
	const int needswap = UFS_FSNEEDSWAP(fs);
d115 1
a115 1
		nb = ufs_rw32(ip->i_ffs1_db[lbn], needswap);
d188 1
a188 1
		ip->i_ffs1_db[lbn] = ufs_rw32((int32_t)newb, needswap);
d210 1
a210 1
	nb = ufs_rw32(ip->i_ffs1_ib[indirs[0].in_off], needswap);
d230 1
a230 1
		*allocib = ufs_rw32((int32_t)nb, needswap);
d245 1
a245 1
		nb = ufs_rw32(bap[indirs[i].in_off], needswap);
d274 1
a274 1
		bap[indirs[i - 1].in_off] = ufs_rw32(nb, needswap);
d298 1
a298 1
		bap[indirs[num].in_off] = ufs_rw32(nb, needswap);
a331 1
	const int needswap = UFS_FSNEEDSWAP(fs);
d364 1
a364 1
		nb = ufs_rw64(ip->i_ffs2_db[lbn], needswap);
d437 1
a437 1
		ip->i_ffs2_db[lbn] = ufs_rw64(newb, needswap);
d459 1
a459 1
	nb = ufs_rw64(ip->i_ffs2_ib[indirs[0].in_off], needswap);
d479 1
a479 1
		*allocib = ufs_rw64(nb, needswap);
d494 1
a494 1
		nb = ufs_rw64(bap[indirs[i].in_off], needswap);
d523 1
a523 1
		bap[indirs[i - 1].in_off] = ufs_rw64(nb, needswap);
d547 1
a547 1
		bap[indirs[num].in_off] = ufs_rw64(nb, needswap);
@


1.2
log
@Unused includes, as reported by include-what-you-use from ports.
@
text
@d1 1
@


1.1
log
@Import makefs - a tool to create filesystem images from a directory.

This is a rough port of the NetBSD tool with some features removed we
don't need. It compiles, but I don't promise anything more. Importing
now, so we can hack on it in tree.

The supported filesystem types are: cd9660, ffs and msdosfs.

ok deraadt
@
text
@a34 3
#include <sys/param.h>
#include <sys/time.h>

a38 3
#include <string.h>

#include "makefs.h"
@

