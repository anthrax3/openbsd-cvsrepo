head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.8
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.10
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.8
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.6
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.05.23.19.06.03;	author renato;	state Exp;
branches;
next	1.11;
commitid	92odz4Q2491RkKUo;

1.11
date	2016.05.23.19.04.55;	author renato;	state Exp;
branches;
next	1.10;
commitid	jK8Nhdc9G4Vfgvfh;

1.10
date	2016.05.23.19.02.49;	author renato;	state Exp;
branches;
next	1.9;
commitid	ZOmKtugTZIW20zTz;

1.9
date	2016.05.23.19.01.08;	author renato;	state Exp;
branches;
next	1.8;
commitid	y9RrB4GquJHVOOcc;

1.8
date	2015.07.21.05.44.50;	author renato;	state Exp;
branches;
next	1.7;
commitid	h1uxwLTDb1rFheT9;

1.7
date	2015.07.21.05.43.46;	author renato;	state Exp;
branches;
next	1.6;
commitid	VFWRykk9NCAGmR5t;

1.6
date	2013.06.04.02.40.17;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.04.21.31.04;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.01.13.59.17;	author claudio;	state Exp;
branches;
next	1.3;

1.3
date	2010.01.13.11.33.12;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2009.11.02.20.35.20;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.01.20.59.45;	author michele;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Introduce the 'ldpctl clear neighbors' command.
@
text
@/*	$OpenBSD: parser.c,v 1.11 2016/05/23 19:04:55 renato Exp $ */

/*
 * Copyright (c) 2009 Michele Marchetto <michele@@openbsd.org>
 * Copyright (c) 2004 Esben Norby <norby@@openbsd.org>
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <err.h>
#include <errno.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <netdb.h>

#include "ldpd.h"

#include "parser.h"

enum token_type {
	NOTOKEN,
	ENDTOKEN,
	KEYWORD,
	FAMILY,
	ADDRESS,
	FLAG,
	IFNAME
};

struct token {
	enum token_type		 type;
	const char		*keyword;
	int			 value;
	const struct token	*next;
};

static const struct token t_main[];
static const struct token t_fib[];
static const struct token t_show[];
static const struct token t_show_iface[];
static const struct token t_show_iface_af[];
static const struct token t_show_disc[];
static const struct token t_show_disc_af[];
static const struct token t_show_nbr[];
static const struct token t_show_nbr_af[];
static const struct token t_show_lib[];
static const struct token t_show_lib_af[];
static const struct token t_show_fib[];
static const struct token t_show_fib_af[];
static const struct token t_show_l2vpn[];
static const struct token t_clear[];
static const struct token t_clear_nbr[];
static const struct token t_log[];

static const struct token t_main[] = {
	{KEYWORD,	"reload",	RELOAD,		NULL},
	{KEYWORD,	"fib",		FIB,		t_fib},
	{KEYWORD,	"show",		SHOW,		t_show},
	{KEYWORD,	"clear",	CLEAR_NBR,	t_clear},
	{KEYWORD,	"log",		NONE,		t_log},
	{ENDTOKEN,	"",		NONE,		NULL}
};

static const struct token t_fib[] = {
	{ KEYWORD,	"couple",	FIB_COUPLE,	NULL},
	{ KEYWORD,	"decouple",	FIB_DECOUPLE,	NULL},
	{ ENDTOKEN,	"",		NONE,		NULL}
};

static const struct token t_show[] = {
	{NOTOKEN,	"",		NONE,		NULL},
	{KEYWORD,	"interfaces",	SHOW_IFACE,	t_show_iface},
	{KEYWORD,	"discovery",	SHOW_DISC,	t_show_disc},
	{KEYWORD,	"neighbor",	SHOW_NBR,	t_show_nbr},
	{KEYWORD,	"lib",		SHOW_LIB,	t_show_lib},
	{KEYWORD,	"fib",		SHOW_FIB,	t_show_fib},
	{KEYWORD,	"l2vpn",	NONE,		t_show_l2vpn},
	{ENDTOKEN,	"",		NONE,		NULL}
};

static const struct token t_show_iface[] = {
	{NOTOKEN,	"",		NONE,		NULL},
	{KEYWORD,	"family",	NONE,		t_show_iface_af},
	{ENDTOKEN,	"",		NONE,		NULL}
};

static const struct token t_show_iface_af[] = {
	{FAMILY,	"",		NONE,		t_show_iface},
	{ENDTOKEN,	"",		NONE,		NULL}
};

static const struct token t_show_disc[] = {
	{NOTOKEN,	"",		NONE,		NULL},
	{KEYWORD,	"family",	NONE,		t_show_disc_af},
	{ENDTOKEN,	"",		NONE,		NULL}
};

static const struct token t_show_disc_af[] = {
	{FAMILY,	"",		NONE,		t_show_disc},
	{ENDTOKEN,	"",		NONE,		NULL}
};

static const struct token t_show_nbr[] = {
	{NOTOKEN,	"",		NONE,		NULL},
	{KEYWORD,	"family",	NONE,		t_show_nbr_af},
	{ENDTOKEN,	"",		NONE,		NULL}
};

static const struct token t_show_nbr_af[] = {
	{FAMILY,	"",		NONE,		t_show_nbr},
	{ENDTOKEN,	"",		NONE,		NULL}
};

static const struct token t_show_lib[] = {
	{NOTOKEN,	"",		NONE,		NULL},
	{KEYWORD,	"family",	NONE,		t_show_lib_af},
	{ENDTOKEN,	"",		NONE,		NULL}
};

static const struct token t_show_lib_af[] = {
	{FAMILY,	"",		NONE,		t_show_lib},
	{ENDTOKEN,	"",		NONE,		NULL}
};

static const struct token t_show_fib[] = {
	{NOTOKEN,	"",		NONE,		NULL},
	{KEYWORD,	"family",	NONE,		t_show_fib_af},
	{KEYWORD,	"interface",	SHOW_FIB_IFACE,	t_show_iface},
	{FLAG,		"connected",	F_CONNECTED,	t_show_fib},
	{FLAG,		"static",	F_STATIC,	t_show_fib},
	{ADDRESS,	"",		NONE,		NULL},
	{ENDTOKEN,	"",		NONE,		NULL}
};

static const struct token t_show_fib_af[] = {
	{FAMILY,	"",		NONE,		t_show_fib},
	{ENDTOKEN,	"",		NONE,		NULL}
};

static const struct token t_show_l2vpn[] = {
	{KEYWORD,	"bindings",	SHOW_L2VPN_BINDING,	NULL},
	{KEYWORD,	"pseudowires",	SHOW_L2VPN_PW,		NULL},
	{ENDTOKEN,	"",		NONE,			NULL}
};

static const struct token t_clear[] = {
	{KEYWORD,	"neighbors",	CLEAR_NBR,	t_clear_nbr},
	{ENDTOKEN,	"",		NONE,		NULL}
};

static const struct token t_clear_nbr[] = {
	{NOTOKEN,	"",		NONE,		NULL},
	{ADDRESS,	"",		NONE,		NULL},
	{ENDTOKEN,	"",		NONE,		NULL}
};

static const struct token t_log[] = {
	{KEYWORD,	"verbose",	LOG_VERBOSE,	NULL},
	{KEYWORD,	"brief",	LOG_BRIEF,	NULL},
	{ENDTOKEN,	"",		NONE,		NULL}
};

static const struct token *match_token(const char *, const struct token *,
    struct parse_result *);
static void show_valid_args(const struct token *);

struct parse_result *
parse(int argc, char *argv[])
{
	static struct parse_result	res;
	const struct token	*table = t_main;
	const struct token	*match;

	memset(&res, 0, sizeof(res));

	while (argc >= 0) {
		if ((match = match_token(argv[0], table, &res)) == NULL) {
			fprintf(stderr, "valid commands/args:\n");
			show_valid_args(table);
			return (NULL);
		}

		argc--;
		argv++;

		if (match->type == NOTOKEN || match->next == NULL)
			break;

		table = match->next;
	}

	if (argc > 0) {
		fprintf(stderr, "superfluous argument: %s\n", argv[0]);
		return (NULL);
	}

	return (&res);
}

static const struct token *
match_token(const char *word, const struct token *table,
    struct parse_result *res)
{
	uint			 i, match;
	const struct token	*t = NULL;

	match = 0;

	for (i = 0; table[i].type != ENDTOKEN; i++) {
		switch (table[i].type) {
		case NOTOKEN:
			if (word == NULL || strlen(word) == 0) {
				match++;
				t = &table[i];
			}
			break;
		case KEYWORD:
			if (word != NULL && strncmp(word, table[i].keyword,
			    strlen(word)) == 0) {
				match++;
				t = &table[i];
				if (t->value)
					res->action = t->value;
			}
			break;
		case FLAG:
			if (word != NULL && strncmp(word, table[i].keyword,
			    strlen(word)) == 0) {
				match++;
				t = &table[i];
				res->flags |= t->value;
			}
			break;
		case FAMILY:
			if (word == NULL)
				break;
			if (!strcmp(word, "inet") ||
			    !strcasecmp(word, "IPv4")) {
				match++;
				t = &table[i];
				res->family = AF_INET;
			}
			if (!strcmp(word, "inet6") ||
			    !strcasecmp(word, "IPv6")) {
				match++;
				t = &table[i];
				res->family = AF_INET6;
			}
			break;
		case ADDRESS:
			if (parse_addr(word, &res->family, &res->addr)) {
				match++;
				t = &table[i];
				if (t->value)
					res->action = t->value;
			}
			break;
		case IFNAME:
			if (!match && word != NULL && strlen(word) > 0) {
				if (strlcpy(res->ifname, word,
				    sizeof(res->ifname)) >=
				    sizeof(res->ifname))
					err(1, "interface name too long");
				match++;
				t = &table[i];
				if (t->value)
					res->action = t->value;
			}
			break;

		case ENDTOKEN:
			break;
		}
	}

	if (match != 1) {
		if (word == NULL)
			fprintf(stderr, "missing argument:\n");
		else if (match > 1)
			fprintf(stderr, "ambiguous argument: %s\n", word);
		else if (match < 1)
			fprintf(stderr, "unknown argument: %s\n", word);
		return (NULL);
	}

	return (t);
}

static void
show_valid_args(const struct token *table)
{
	int	i;

	for (i = 0; table[i].type != ENDTOKEN; i++) {
		switch (table[i].type) {
		case NOTOKEN:
			fprintf(stderr, "  <cr>\n");
			break;
		case KEYWORD:
		case FLAG:
			fprintf(stderr, "  %s\n", table[i].keyword);
			break;
		case FAMILY:
			fprintf(stderr, "  [ inet | inet6 | IPv4 | IPv6 ]\n");
			break;
		case ADDRESS:
			fprintf(stderr, "  <address>\n");
			break;
		case IFNAME:
			fprintf(stderr, "  <interface>\n");
		case ENDTOKEN:
			break;
		}
	}
}

int
parse_addr(const char *word, int *family, union ldpd_addr *addr)
{
	struct in_addr		 ina;
	struct addrinfo		 hints, *r;
	struct sockaddr_in6	*sa_in6;

	if (word == NULL)
		return (0);

	memset(addr, 0, sizeof(*addr));
	memset(&ina, 0, sizeof(ina));

	if (inet_net_pton(AF_INET, word, &ina, sizeof(ina)) != -1) {
		*family = AF_INET;
		addr->v4.s_addr = ina.s_addr;
		return (1);
	}

	memset(&hints, 0, sizeof(hints));
	hints.ai_family = AF_INET6;
	hints.ai_socktype = SOCK_DGRAM; /*dummy*/
	hints.ai_flags = AI_NUMERICHOST;
	if (getaddrinfo(word, "0", &hints, &r) == 0) {
		sa_in6 = (struct sockaddr_in6 *)r->ai_addr;
		*family = AF_INET6;
		addr->v6 = sa_in6->sin6_addr;
		freeaddrinfo(r);
		return (1);
	}

	return (0);
}
@


1.11
log
@Sync with the latest IPv6 bits in ldpd(8).
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.c,v 1.10 2016/05/23 19:02:49 renato Exp $ */
d68 2
d76 1
d161 11
@


1.10
log
@Replace legacy bzero and bcopy by memset and memcpy.

bzero(), bcopy() and bcmp() were deprecated in POSIX.1-2001 and removed
in POSIX.1-2008 in deference to memset(), memcpy() and memcmp().
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.c,v 1.9 2016/05/23 19:01:08 renato Exp $ */
d31 1
d41 1
a43 1
	PREFIX,
d58 1
d60 1
a60 1

d62 1
d64 1
d66 1
d96 8
a103 2
	{NOTOKEN,	"",		NONE,			NULL},
	{ENDTOKEN,	"",		NONE,			NULL}
d107 8
a114 2
	{NOTOKEN,	"",		NONE,			NULL},
	{ENDTOKEN,	"",		NONE,			NULL}
d119 6
d130 1
d134 2
a135 3
static const struct token t_log[] = {
	{KEYWORD,	"verbose",	LOG_VERBOSE,	NULL},
	{KEYWORD,	"brief",	LOG_BRIEF,	NULL},
d140 12
a151 6
	{NOTOKEN,	"",		NONE,			NULL},
	{KEYWORD,	"interface",	SHOW_FIB_IFACE,		t_show_iface},
	{FLAG,		"connected",	F_CONNECTED,		t_show_fib},
	{FLAG,		"static",	F_STATIC,		t_show_fib},
	{ADDRESS,	"",		NONE,			NULL},
	{ENDTOKEN,	"",		NONE,			NULL}
d160 6
d237 11
a247 2
		case ADDRESS:
			if (parse_addr(word, &res->addr)) {
d250 1
a250 2
				if (t->value)
					res->action = t->value;
d253 2
a254 2
		case PREFIX:
			if (parse_prefix(word, &res->addr, &res->prefixlen)) {
d306 3
a311 3
		case PREFIX:
			fprintf(stderr, "  <address>[/<len>]\n");
			break;
d321 1
a321 1
parse_addr(const char *word, struct in_addr *addr)
d323 3
a325 1
	struct in_addr	ina;
d330 1
a330 1
	memset(addr, 0, sizeof(struct in_addr));
d333 3
a335 2
	if (inet_pton(AF_INET, word, &ina)) {
		addr->s_addr = ina.s_addr;
d339 9
a347 21
	return (0);
}

int
parse_prefix(const char *word, struct in_addr *addr, uint8_t *prefixlen)
{
	struct in_addr	 ina;
	int		 bits = 32;

	if (word == NULL)
		return (0);

	memset(addr, 0, sizeof(struct in_addr));
	memset(&ina, 0, sizeof(ina));

	if (strrchr(word, '/') != NULL) {
		if ((bits = inet_net_pton(AF_INET, word,
		    &ina, sizeof(ina))) == -1)
			return (0);
		addr->s_addr = ina.s_addr & htonl(prefixlen2mask(bits));
		*prefixlen = bits;
a348 3
	} else {
		*prefixlen = 32;
		return (parse_addr(word, addr));
a351 10
}

/* XXX local copy from kroute.c, should go to shared file */
in_addr_t
prefixlen2mask(uint8_t prefixlen)
{
	if (prefixlen == 0)
		return (0);

	return (0xffffffff << (32 - prefixlen));
@


1.9
log
@Change ldpctl(8) to use C99-style fixed-width integers.
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.c,v 1.8 2015/07/21 05:44:50 renato Exp $ */
d142 1
a142 1
	bzero(&res, sizeof(res));
d285 2
a286 2
	bzero(addr, sizeof(struct in_addr));
	bzero(&ina, sizeof(ina));
d305 2
a306 2
	bzero(addr, sizeof(struct in_addr));
	bzero(&ina, sizeof(ina));
@


1.8
log
@Introduce two show commands for l2vpns.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.c,v 1.7 2015/07/21 05:43:46 renato Exp $ */
d172 1
a172 1
	u_int			 i, match;
d297 1
a297 1
parse_prefix(const char *word, struct in_addr *addr, u_int8_t *prefixlen)
d325 1
a325 1
prefixlen2mask(u_int8_t prefixlen)
@


1.7
log
@Re-enable the reload command.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.c,v 1.6 2013/06/04 02:40:17 claudio Exp $ */
d58 1
a58 2
static const struct token t_show_db[];
static const struct token t_show_area[];
d62 1
d86 1
d122 6
@


1.6
log
@Introduce the 'ldpctl show discovery' command
Diff by Renato Westphal
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.c,v 1.5 2010/09/04 21:31:04 tedu Exp $ */
d66 1
a66 1
/*	{KEYWORD,	"reload",	RELOAD,		NULL}, */
@


1.5
log
@move some things around to make intentions clear.  not really a functional
change.  ok claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.c,v 1.4 2010/09/01 13:59:17 claudio Exp $ */
d57 1
d82 1
d90 5
@


1.4
log
@s/lfib/fib/ for more consistency with the other routing ctl tools.
While I also made the code more consistent the most noticable change
is the rename of the commandline arguments for fib coupling and viewing.
OK michele@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.c,v 1.3 2010/01/13 11:33:12 jsg Exp $ */
d117 3
a119 1
static struct parse_result	res;
d124 1
d131 1
a131 1
		if ((match = match_token(argv[0], table)) == NULL) {
d154 3
a156 2
const struct token *
match_token(const char *word, const struct token *table)
d177 1
a177 1
					res.action = t->value;
d185 1
a185 1
				res.flags |= t->value;
d189 1
a189 1
			if (parse_addr(word, &res.addr)) {
d193 1
a193 1
					res.action = t->value;
d197 1
a197 1
			if (parse_prefix(word, &res.addr, &res.prefixlen)) {
d201 1
a201 1
					res.action = t->value;
d206 3
a208 3
				if (strlcpy(res.ifname, word,
				    sizeof(res.ifname)) >=
				    sizeof(res.ifname))
d213 1
a213 1
					res.action = t->value;
d235 1
a235 1
void
@


1.3
log
@Fix problems with incomplete arrays that was fixed in other ospfctl
based programs a few months back.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.c,v 1.2 2009/11/02 20:35:20 claudio Exp $ */
d54 1
a54 1
static const struct token t_lfib[];
d61 1
a61 1
static const struct token t_show_lfib[];
d66 1
a66 1
	{KEYWORD,	"lfib",		LFIB,		t_lfib},
d72 3
a74 3
static const struct token t_lfib[] = {
	{ KEYWORD,	"couple",	LFIB_COUPLE,	NULL},
	{ KEYWORD,	"decouple",	LFIB_DECOUPLE,	NULL},
d83 1
a83 1
	{KEYWORD,	"lfib",		SHOW_LFIB,	t_show_lfib},
d108 1
a108 1
static const struct token t_show_lfib[] = {
d110 3
a112 3
	{KEYWORD,	"interface",	SHOW_LFIB_IFACE,	t_show_iface},
	{FLAG,		"connected",	F_CONNECTED,		t_show_lfib},
	{FLAG,		"static",	F_STATIC,		t_show_lfib},
@


1.2
log
@Implement "log verbose" and "log brief" to enable or disable verbose debug
logging. henning, sthen, michele like the idea
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.c,v 1.1 2009/06/01 20:59:45 michele Exp $ */
d152 1
a152 1
match_token(const char *word, const struct token table[])
d232 1
a232 1
show_valid_args(const struct token table[])
@


1.1
log
@Welcome ldpd, the Label Distribution Protocol daemon.
Built using the imsg/three process framework, its main aim
is to redistribute MPLS labels between peers.

Right now it has some really basic functionalities,
the basic protocol works and peers are able to exchange
labels and insert them in the kernel.
It still does not react to changes of topology.

Not yet connected to the builds.

ok claudio@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d62 1
d68 1
d99 6
@

