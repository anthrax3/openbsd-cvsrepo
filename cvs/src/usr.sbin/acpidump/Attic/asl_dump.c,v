head	1.9;
access;
symbols
	OPENBSD_4_7:1.8.0.6
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.8
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.3.0.10
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.8
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.6
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.4
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.9
date	2010.08.05.17.30.28;	author marco;	state dead;
branches;
next	1.8;

1.8
date	2008.06.06.10.16.47;	author marco;	state Exp;
branches;
next	1.7;

1.7
date	2007.12.07.18.27.07;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2007.12.02.22.23.04;	author jordan;	state Exp;
branches;
next	1.5;

1.5
date	2007.11.26.19.57.05;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.22.19.42.19;	author otto;	state Exp;
branches;
next	1.3;

1.3
date	2005.07.21.16.38.55;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.04.02.25.53;	author cloder;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.02.20.09.39;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.9
log
@kill kill kill the aml parser, kill kill kill it until it is dead

ok deraadt
@
text
@/*	$OpenBSD: asl_dump.c,v 1.8 2008/06/06 10:16:47 marco Exp $	*/
/*-
 * Copyright (c) 1999 Doug Rabson
 * Copyright (c) 2000 Mitsuru IWASAKI <iwasaki@@FreeBSD.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$Id: asl_dump.c,v 1.8 2008/06/06 10:16:47 marco Exp $
 *	$FreeBSD: src/usr.sbin/acpi/acpidump/asl_dump.c,v 1.5 2001/10/23 14:53:58 takawata Exp $
 */

#include <sys/param.h>

#include <assert.h>
#include <err.h>
#include <stdio.h>

#include "acpidump.h"

#include "aml/aml_env.h"

struct aml_environ	asl_env;

static u_int32_t
asl_dump_pkglength(u_int8_t **dpp)
{
	u_int8_t	*dp;
	u_int32_t	pkglength;

	dp = *dpp;
	pkglength = *dp++;
	switch (pkglength >> 6) {
	case 0:
		break;
	case 1:
		pkglength = (pkglength & 0xf) + (dp[0] << 4);
		dp += 1;
		break;
	case 2:
		pkglength = (pkglength & 0xf) + (dp[0] << 4) + (dp[1] << 12);
		dp += 2;
		break;
	case 3:
		pkglength = (pkglength & 0xf)
			+ (dp[0] << 4) + (dp[1] << 12) + (dp[2] << 20);
		dp += 3;
		break;
	}

	*dpp = dp;
	return (pkglength);
}

static void
print_nameseg(u_int8_t *dp)
{

	if (dp[3] != '_')
		printf("%c%c%c%c", dp[0], dp[1], dp[2], dp[3]);
	else if (dp[2] != '_')
		printf("%c%c%c_", dp[0], dp[1], dp[2]);
	else if (dp[1] != '_')
		printf("%c%c__", dp[0], dp[1]);
	else if (dp[0] != '_')
		printf("%c___", dp[0]);
}

static u_int8_t
asl_dump_bytedata(u_int8_t **dpp)
{
	u_int8_t	*dp;
	u_int8_t	data;

	dp = *dpp;
	data = dp[0];
	*dpp = dp + 1;
	return (data);
}

static u_int16_t
asl_dump_worddata(u_int8_t **dpp)
{
	u_int8_t	*dp;
	u_int16_t	data;

	dp = *dpp;
	data = dp[0] + (dp[1] << 8);
	*dpp = dp + 2;
	return (data);
}

static u_int32_t
asl_dump_dworddata(u_int8_t **dpp)
{
	u_int8_t	*dp;
	u_int32_t	data;

	dp = *dpp;
	data = dp[0] + (dp[1] << 8) + (dp[2] << 16) + (dp[3] << 24);
	*dpp = dp + 4;
	return (data);
}

static u_int8_t *
asl_dump_namestring(u_int8_t **dpp)
{
	u_int8_t	*dp;
	u_int8_t	*name;

	dp = *dpp;
	name = dp;
	if (dp[0] == '\\')
		dp++;
	else if (dp[0] == '^')
		while (dp[0] == '^')
			dp++;
	if (dp[0] == 0x00)	/* NullName */
		dp++;
	else if (dp[0] == 0x2e)	/* DualNamePrefix */
		dp += 1 + 4 + 4;/* NameSeg, NameSeg */
	else if (dp[0] == 0x2f) {	/* MultiNamePrefix */
		int             segcount = dp[1];
		dp += 1 + 1 + segcount * 4;	/* segcount * NameSeg */
	} else
		dp += 4;	/* NameSeg */

	*dpp = dp;
	return (name);
}

static void
print_namestring(u_int8_t *dp)
{

	if (dp[0] == '\\') {
		putchar(dp[0]);
		dp++;
	} else if (dp[0] == '^') {
		while (dp[0] == '^') {
			putchar(dp[0]);
			dp++;
		}
	}
	if (dp[0] == 0x00) {	/* NullName */
		/* printf("<null>"); */
		dp++;
	} else if (dp[0] == 0x2e) {	/* DualNamePrefix */
		print_nameseg(dp + 1);
		putchar('.');
		print_nameseg(dp + 5);
	} else if (dp[0] == 0x2f) {	/* MultiNamePrefix */
		int             segcount = dp[1];
		int             i;
		for (i = 0, dp += 2; i < segcount; i++, dp += 4) {
			if (i > 0)
				putchar('.');
			print_nameseg(dp);
		}
	} else			/* NameSeg */
		print_nameseg(dp);
}

static void
print_indent(int indent)
{
	int	i;

	for (i = 0; i < indent; i++)
		printf("    ");
}

#define ASL_ENTER_SCOPE(dp_orig, old_name) do {				\
	u_int8_t	*dp_copy;					\
	u_int8_t	*name;						\
	old_name = asl_env.curname;					\
	dp_copy = dp_orig;						\
	name = asl_dump_namestring(&dp_copy);				\
	asl_env.curname = aml_search_name(&asl_env, name);		\
} while(0)

#define ASL_LEAVE_SCOPE(old_name) do {					\
	asl_env.curname = old_name;					\
} while(0)

#define ASL_CREATE_LOCALNAMEOBJ(dp) do {				\
	if(scope_within_method){					\
		aml_create_name(&asl_env, dp);				\
	}								\
}while(0);

static void
asl_dump_defscope(u_int8_t **dpp, int indent)
{
	u_int8_t	*dp;
	u_int8_t	*start;
	u_int8_t	*end;
	u_int32_t	pkglength;
	struct	aml_name *oname;

	dp = *dpp;
	start = dp;
	pkglength = asl_dump_pkglength(&dp);

	printf("Scope(");
	ASL_ENTER_SCOPE(dp, oname);
	asl_dump_termobj(&dp, indent);
	printf(") {\n");
	end = start + pkglength;
	asl_dump_objectlist(&dp, end, indent + 1);
	print_indent(indent);
	printf("}");

	assert(dp == end);
	ASL_LEAVE_SCOPE(oname);
	*dpp = dp;
}

static void
asl_dump_defbuffer(u_int8_t **dpp, int indent)
{
	u_int8_t	*dp;
	u_int8_t	*start;
	u_int8_t	*end;
	u_int32_t	pkglength;

	dp = *dpp;
	start = dp;
	pkglength = asl_dump_pkglength(&dp);
	end = start + pkglength;
	printf("Buffer(");
	asl_dump_termobj(&dp, indent);
	printf(") {");
	while (dp < end) {
		printf("0x%x", *dp++);
		if (dp < end)
			printf(", ");
	}
	printf(" }");

	*dpp = dp;
}

static void
asl_dump_defpackage(u_int8_t **dpp, int indent)
{
	u_int8_t	*dp;
	u_int8_t	*start;
	u_int8_t	*end;
	u_int8_t	numelements;
	u_int32_t	pkglength;

	dp = *dpp;
	start = dp;
	pkglength = asl_dump_pkglength(&dp);
	numelements = asl_dump_bytedata(&dp);
	end = start + pkglength;
	printf("Package(0x%x) {\n", numelements);
	while (dp < end) {
		print_indent(indent + 1);
		asl_dump_termobj(&dp, indent + 1);
		printf(",\n");
	}

	print_indent(indent);
	printf("}");

	dp = end;

	*dpp = dp;
}

int	scope_within_method = 0;

static void
asl_dump_defmethod(u_int8_t **dpp, int indent)
{
	u_int8_t	*dp;
	u_int8_t	*start;
	u_int8_t	*end;
	u_int8_t	flags;
	u_int32_t	pkglength;
	struct	aml_name *oname;
	int		swi;

	dp = *dpp;
	start = dp;
	pkglength = asl_dump_pkglength(&dp);

	swi = scope_within_method;
	scope_within_method = 0;

	printf("Method(");
	ASL_ENTER_SCOPE(dp, oname);
	asl_dump_termobj(&dp, indent);
	flags = *dp++;
	if (flags) {
		printf(", %d", flags & 7);
		if (flags & 8) {
			printf(", Serialized");
		}
	}
	printf(") {\n");
	end = start + pkglength;
	scope_within_method = 1;
	asl_dump_objectlist(&dp, end, indent + 1);
	scope_within_method = swi;
	print_indent(indent);
	printf("}");

	assert(dp == end);
	ASL_LEAVE_SCOPE(oname);
	*dpp = dp;
}


static void
asl_dump_defopregion(u_int8_t **dpp, int indent)
{
	u_int8_t	*dp;
	const	char *regions[] = {
		"SystemMemory",
		"SystemIO",
		"PCI_Config",
		"EmbeddedControl",
		"SMBus",
	};

	dp = *dpp;
	printf("OperationRegion(");
	ASL_CREATE_LOCALNAMEOBJ(dp);
	asl_dump_termobj(&dp, indent);	/* Name */
	printf(", %s, ", regions[*dp++]);	/* Space */
	asl_dump_termobj(&dp, indent);	/* Offset */
	printf(", ");
	asl_dump_termobj(&dp, indent);	/* Length */
	printf(")");

	*dpp = dp;
}

static const char *accessnames[] = {
	"AnyAcc",
	"ByteAcc",
	"WordAcc",
	"DWordAcc",
	"BlockAcc",
	"SMBSendRecvAcc",
	"SMBQuickAcc"
};

static int
asl_dump_field(u_int8_t **dpp, u_int32_t offset)
{
	u_int8_t	*dp;
	u_int8_t	*name;
	u_int8_t	access, attribute;
	u_int32_t	width;

	dp = *dpp;
	switch (*dp) {
	case '\\':
	case '^':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case '.':
	case '/':
		ASL_CREATE_LOCALNAMEOBJ(dp);
		name = asl_dump_namestring(&dp);
		width = asl_dump_pkglength(&dp);
		offset += width;
		print_namestring(name);
		printf(",\t%d", width);
		break;
	case 0x00:
		dp++;
		width = asl_dump_pkglength(&dp);
		offset += width;
		if ((offset % 8) == 0) {
			printf("Offset(0x%x)", offset / 8);
		} else {
			printf(",\t%d", width);
		}
		break;
	case 0x01:
		access = dp[1];
		attribute = dp[2];
		dp += 3;
		printf("AccessAs(%s, %d)", accessnames[access], attribute);
		break;
	}

	*dpp = dp;
	return (offset);
}

static void
asl_dump_fieldlist(u_int8_t **dpp, u_int8_t *end, int indent)
{
	u_int8_t	*dp;
	u_int32_t	offset;

	dp = *dpp;
	offset = 0;
	while (dp < end) {
		print_indent(indent);
		offset = asl_dump_field(&dp, offset);
		if (dp < end)
			printf(",\n");
		else
			printf("\n");
	}

	*dpp = dp;
}

static void
asl_dump_deffield(u_int8_t **dpp, int indent)
{
	u_int8_t	*dp;
	u_int8_t	*start;
	u_int8_t	*end;
	u_int8_t	flags;
	u_int32_t	pkglength;
	static	const char *lockrules[] = {"NoLock", "Lock"};
	static	const char *updaterules[] = {"Preserve", "WriteAsOnes",
					     "WriteAsZeros", "*Error*"};

	dp = *dpp;
	start = dp;
	pkglength = asl_dump_pkglength(&dp);
	end = start + pkglength;

	printf("Field(");
	asl_dump_termobj(&dp, indent);	/* Name */
	flags = asl_dump_bytedata(&dp);
	printf(", %s, %s, %s) {\n",
	       accessnames[flags & 0xf],
	       lockrules[(flags >> 4) & 1],
	       updaterules[(flags >> 5) & 3]);
	asl_dump_fieldlist(&dp, end, indent + 1);
	print_indent(indent);
	printf("}");

	assert(dp == end);

	*dpp = dp;
}

static void
asl_dump_defindexfield(u_int8_t **dpp, int indent)
{
	u_int8_t	*dp;
	u_int8_t	*start;
	u_int8_t	*end;
	u_int8_t	flags;
	u_int32_t	pkglength;
	static	const char *lockrules[] = {"NoLock", "Lock"};
	static	const char *updaterules[] = {"Preserve", "WriteAsOnes",
					     "WriteAsZeros", "*Error*"};

	dp = *dpp;
	start = dp;
	pkglength = asl_dump_pkglength(&dp);
	end = start + pkglength;

	printf("IndexField(");
	asl_dump_termobj(&dp, indent);	/* Name1 */
	printf(", ");
	asl_dump_termobj(&dp, indent);	/* Name2 */
	flags = asl_dump_bytedata(&dp);
	printf(", %s, %s, %s) {\n",
	       accessnames[flags & 0xf],
	       lockrules[(flags >> 4) & 1],
	       updaterules[(flags >> 5) & 3]);
	asl_dump_fieldlist(&dp, end, indent + 1);
	print_indent(indent);
	printf("}");

	assert(dp == end);

	*dpp = dp;
}

static void
asl_dump_defbankfield(u_int8_t **dpp, int indent)
{
	u_int8_t	*dp;
	u_int8_t	*start;
	u_int8_t	*end;
	u_int8_t	flags;
	u_int32_t	pkglength;
	static	const char *lockrules[] = {"NoLock", "Lock"};
	static	const char *updaterules[] = {"Preserve", "WriteAsOnes",
					     "WriteAsZeros", "*Error*"};

	dp = *dpp;
	start = dp;
	pkglength = asl_dump_pkglength(&dp);
	end = start + pkglength;
	printf("BankField(");
	asl_dump_termobj(&dp, indent);	/* Name1 */
	printf(", ");
	asl_dump_termobj(&dp, indent);	/* Name2 */
	printf(", ");
	asl_dump_termobj(&dp, indent);	/* BankValue */
	flags = asl_dump_bytedata(&dp);
	printf(", %s, %s, %s) {\n",
	       accessnames[flags & 0xf],
	       lockrules[(flags >> 4) & 1],
	       updaterules[(flags >> 5) & 3]);
	asl_dump_fieldlist(&dp, end, indent + 1);
	print_indent(indent);
	printf("}");

	assert(dp == end);

	*dpp = dp;
}

static void
asl_dump_defdevice(u_int8_t **dpp, int indent)
{
	u_int8_t	*dp;
	u_int8_t	*start;
	u_int8_t	*end;
	u_int32_t	pkglength;
	struct	aml_name *oname;

	dp = *dpp;
	start = dp;
	pkglength = asl_dump_pkglength(&dp);
	end = start + pkglength;

	printf("Device(");
	ASL_ENTER_SCOPE(dp, oname);
	asl_dump_termobj(&dp, indent);
	printf(") {\n");
	asl_dump_objectlist(&dp, end, indent + 1);
	print_indent(indent);
	printf("}");

	assert(dp == end);

	ASL_LEAVE_SCOPE(oname);
	*dpp = dp;
}

static void
asl_dump_defprocessor(u_int8_t **dpp, int indent)
{
	u_int8_t       *dp;
	u_int8_t       *start;
	u_int8_t       *end;
	u_int8_t        procid;
	u_int8_t        pblklen;
	u_int32_t       pkglength;
	u_int32_t       pblkaddr;
	struct	aml_name *oname;

	dp = *dpp;
	start = dp;
	pkglength = asl_dump_pkglength(&dp);
	end = start + pkglength;

	printf("Processor(");
	ASL_ENTER_SCOPE(dp, oname);
	asl_dump_termobj(&dp, indent);
	procid = asl_dump_bytedata(&dp);
	pblkaddr = asl_dump_dworddata(&dp);
	pblklen = asl_dump_bytedata(&dp);
	printf(", %d, 0x%x, 0x%x) {\n", procid, pblkaddr, pblklen);
	asl_dump_objectlist(&dp, end, indent + 1);
	print_indent(indent);
	printf("}");

	assert(dp == end);

	ASL_LEAVE_SCOPE(oname);
	*dpp = dp;
}

static void
asl_dump_defpowerres(u_int8_t **dpp, int indent)
{
	u_int8_t	*dp;
	u_int8_t	*start;
	u_int8_t	*end;
	u_int8_t	systemlevel;
	u_int16_t	resourceorder;
	u_int32_t	pkglength;
	struct	aml_name *oname;

	dp = *dpp;
	start = dp;
	pkglength = asl_dump_pkglength(&dp);
	end = start + pkglength;

	printf("PowerResource(");
	ASL_ENTER_SCOPE(dp, oname);
	asl_dump_termobj(&dp, indent);
	systemlevel = asl_dump_bytedata(&dp);
	resourceorder = asl_dump_worddata(&dp);
	printf(", %d, %d) {\n", systemlevel, resourceorder);
	asl_dump_objectlist(&dp, end, indent + 1);
	print_indent(indent);
	printf("}");

	assert(dp == end);

	ASL_LEAVE_SCOPE(oname);
	*dpp = dp;
}

static void
asl_dump_defthermalzone(u_int8_t **dpp, int indent)
{
	u_int8_t	*dp;
	u_int8_t	*start;
	u_int8_t	*end;
	u_int32_t	pkglength;
	struct	aml_name *oname;

	dp = *dpp;
	start = dp;
	pkglength = asl_dump_pkglength(&dp);
	end = start + pkglength;

	printf("ThermalZone(");
	ASL_ENTER_SCOPE(dp, oname);
	asl_dump_termobj(&dp, indent);
	printf(") {\n");
	asl_dump_objectlist(&dp, end, indent + 1);
	print_indent(indent);
	printf("}");

	assert(dp == end);

	ASL_LEAVE_SCOPE(oname);
	*dpp = dp;
}

static void
asl_dump_defif(u_int8_t **dpp, int indent)
{
	u_int8_t	*dp;
	u_int8_t	*start;
	u_int8_t	*end;
	u_int32_t	pkglength;

	dp = *dpp;
	start = dp;
	pkglength = asl_dump_pkglength(&dp);
	end = start + pkglength;

	printf("If(");
	asl_dump_termobj(&dp, indent);
	printf(") {\n");
	asl_dump_objectlist(&dp, end, indent + 1);
	print_indent(indent);
	printf("}");

	assert(dp == end);

	*dpp = dp;
}

static void
asl_dump_defelse(u_int8_t **dpp, int indent)
{
	u_int8_t	*dp;
	u_int8_t	*start;
	u_int8_t	*end;
	u_int32_t       pkglength;

	dp = *dpp;
	start = dp;
	pkglength = asl_dump_pkglength(&dp);
	end = start + pkglength;

	printf("Else {\n");
	asl_dump_objectlist(&dp, end, indent + 1);
	print_indent(indent);
	printf("}");

	assert(dp == end);

	*dpp = dp;
}

static void
asl_dump_defwhile(u_int8_t **dpp, int indent)
{
	u_int8_t	*dp;
	u_int8_t	*start;
	u_int8_t	*end;
	u_int32_t	pkglength;

	dp = *dpp;
	start = dp;
	pkglength = asl_dump_pkglength(&dp);
	end = start + pkglength;

	printf("While(");
	asl_dump_termobj(&dp, indent);
	printf(") {\n");
	asl_dump_objectlist(&dp, end, indent + 1);
	print_indent(indent);
	printf("}");

	assert(dp == end);

	*dpp = dp;
}

static void
asl_dump_oparg(u_int8_t **dpp, int indent, const char *mnem, 
    const char *fmt)
{
	int idx;
	const char *pfx="";

	printf("%s(", mnem);
	for (idx=0; fmt[idx]; idx++) {
		if (fmt[idx] == 'N') {
			ASL_CREATE_LOCALNAMEOBJ(*dpp);
		}
		else if (fmt[idx] == 'o' && **dpp == 0x00) {
			/* Optional Argument */
			(*dpp)++;
			continue;
		}

		printf(pfx);
		if (fmt[idx] == 'b')
			printf("0x%x", asl_dump_bytedata(dpp));
		else if (fmt[idx] == 'w')
			printf("0x%x", asl_dump_worddata(dpp));
		else if (fmt[idx] == 'd')
			printf("0x%x", asl_dump_dworddata(dpp));
		else
			asl_dump_termobj(dpp, indent);
		pfx = ", ";
	}
	printf(")");
}
/*
 * Public interfaces
 */
void
asl_dump_termobj(u_int8_t **dpp, int indent)
{
	u_int8_t	*dp;
	u_int8_t	*name;
	u_int8_t	opcode;
	struct	aml_name *method;
	const	char *matchstr[] = {
		"MTR", "MEQ", "MLE", "MLT", "MGE", "MGT",
	};

#define OPTARG() do {						\
	if (*dp == 0x00) {					\
	    dp++;						\
	} else { 						\
	    printf(", ");					\
	    asl_dump_termobj(&dp, indent);			\
	}							\
} while (0)

	dp = *dpp;
	opcode = *dp++;
	switch (opcode) {
	case '\\':
	case '^':
	case 'A': case 'B': case 'C': case 'D': case 'E': case 'F': case 'G':
	case 'H': case 'I': case 'J': case 'K': case 'L': case 'M': case 'N':
	case 'O': case 'P': case 'Q': case 'R': case 'S': case 'T': case 'U':
	case 'V': case 'W': case 'X': case 'Y': case 'Z':
	case '_':
	case '.':
	case '/':
		dp--;
		print_namestring((name = asl_dump_namestring(&dp)));
		if (scope_within_method == 1) {
			method = aml_search_name(&asl_env, name);
			if (method != NULL && method->property != NULL &&
			    method->property->type == aml_t_method) {
				int	i, argnum;

				argnum = method->property->meth.argnum & 7;
				printf("(");
				for (i = 0; i < argnum; i++) {
					asl_dump_termobj(&dp, indent);
					if (i < (argnum-1)) {
						printf(", ");
					}
				}
				printf(")");
			}
		}
		break;
	case 0x0a:		/* BytePrefix */
		printf("0x%x", asl_dump_bytedata(&dp));
		break;
	case 0x0b:		/* WordPrefix */
		printf("0x%04x", asl_dump_worddata(&dp));
		break;
	case 0x0c:		/* DWordPrefix */
		printf("0x%08x", asl_dump_dworddata(&dp));
		break;
	case 0x0d:		/* StringPrefix */
		printf("\"%s\"", (const char *) dp);
		while (*dp)
			dp++;
		dp++;		/* NUL terminate */
		break;
	case 0x00:		/* ZeroOp */
		printf("Zero");
		break;
	case 0x01:		/* OneOp */
		printf("One");
		break;
	case 0xff:		/* OnesOp */
		printf("Ones");
		break;
	case 0x06:		/* AliasOp */
		asl_dump_oparg(&dp, indent, "Alias", "tN");
		break;
	case 0x08:		/* NameOp */
		asl_dump_oparg(&dp, indent, "Name", "Nt");
		break;
	case 0x10:		/* ScopeOp */
		asl_dump_defscope(&dp, indent);
		break;
	case 0x11:		/* BufferOp */
		asl_dump_defbuffer(&dp, indent);
		break;
	case 0x12:		/* PackageOp */
		asl_dump_defpackage(&dp, indent);
		break;
	case 0x14:		/* MethodOp */
		asl_dump_defmethod(&dp, indent);
		break;
	case 0x5b:		/* ExtOpPrefix */
		opcode = *dp++;
		switch (opcode) {
		case 0x01:	/* MutexOp */
			printf("Mutex(");
			ASL_CREATE_LOCALNAMEOBJ(dp);
			asl_dump_termobj(&dp, indent);
			printf(", %d)", *dp++);
			break;
		case 0x02:	/* EventOp */
			asl_dump_oparg(&dp, indent, "Event", "t");
			break;
		case 0x12:	/* CondRefOfOp */
			asl_dump_oparg(&dp, indent, "CondRefOf", "tt");
			break;
		case 0x13:	/* CreateFieldOp */
			asl_dump_oparg(&dp, indent, "CreateField", "tiiN");
			break;
		case 0x1F:      /* LoadTableOp */
			asl_dump_oparg(&dp, indent, "LoadTable", "tttttt");
			break;
		case 0x20:	/* LoadOp */
			asl_dump_oparg(&dp, indent, "Load", "tt");
			break;
		case 0x21:	/* StallOp */
			asl_dump_oparg(&dp, indent, "Stall", "i");
			break;
		case 0x22:	/* SleepOp */
			asl_dump_oparg(&dp, indent, "Sleep", "i");
			break;
		case 0x23:	/* AcquireOp */
			asl_dump_oparg(&dp, indent, "Acquire", "tw");
			break;
		case 0x24:	/* SignalOp */
			asl_dump_oparg(&dp, indent, "Signal", "t");
			break;
		case 0x25:	/* WaitOp */
			asl_dump_oparg(&dp, indent, "Wait", "ti");
			break;
		case 0x26:	/* ResetOp */
			asl_dump_oparg(&dp, indent, "Reset", "t");
			break;
		case 0x27:	/* ReleaseOp */
			asl_dump_oparg(&dp, indent, "Release", "t");
			break;
		case 0x28:	/* FromBCDOp */
			asl_dump_oparg(&dp, indent, "FromBCD", "io");
			break;
		case 0x29:	/* ToBCDOp */
			asl_dump_oparg(&dp, indent, "ToBCD", "io");
			break;
		case 0x2a:	/* UnloadOp */
			asl_dump_oparg(&dp, indent, "Unload", "t");
			break;
		case 0x30:
			printf("Revision");
			break;
		case 0x31:
			printf("Debug");
			break;
		case 0x32:	/* FatalOp */
			asl_dump_oparg(&dp, indent, "Fatal", "bdi");
			break;
		case 0x33:      /* TimerOp */
			printf("Timer");
			break;
		case 0x80:	/* OpRegionOp */
			asl_dump_defopregion(&dp, indent);
			break;
		case 0x81:	/* FieldOp */
			asl_dump_deffield(&dp, indent);
			break;
		case 0x82:	/* DeviceOp */
			asl_dump_defdevice(&dp, indent);
			break;
		case 0x83:	/* ProcessorOp */
			asl_dump_defprocessor(&dp, indent);
			break;
		case 0x84:	/* PowerResOp */
			asl_dump_defpowerres(&dp, indent);
			break;
		case 0x85:	/* ThermalZoneOp */
			asl_dump_defthermalzone(&dp, indent);
			break;
		case 0x86:	/* IndexFieldOp */
			asl_dump_defindexfield(&dp, indent);
			break;
		case 0x87:	/* BankFieldOp */
			asl_dump_defbankfield(&dp, indent);
			break;
		case 0x88:      /* DataRegionOp */
			asl_dump_oparg(&dp, indent, "DataRegion", "Nttt");
			break;
		default:
			errx(1, "strange opcode 0x5b, 0x%x", opcode);
		}
		break;
	case 0x68:
	case 0x69:
	case 0x6a:
	case 0x6b:
	case 0x6c:
	case 0x6d:
	case 0x6e:	/* ArgN */
		printf("Arg%d", opcode - 0x68);
		break;
	case 0x60:
	case 0x61:
	case 0x62:
	case 0x63:
	case 0x64:
	case 0x65:
	case 0x66:
	case 0x67:
		printf("Local%d", opcode - 0x60);
		break;
	case 0x70:		/* StoreOp */
		asl_dump_oparg(&dp, indent, "Store", "tt");
		break;
	case 0x71:		/* RefOfOp */
		asl_dump_oparg(&dp, indent, "RefOf", "t");
		break;
	case 0x72:		/* AddOp */
		asl_dump_oparg(&dp, indent, "Add", "iio");
		break;
	case 0x73:		/* ConcatenateOp */
		asl_dump_oparg(&dp, indent, "Concatenate", "ttt");
		break;
	case 0x74:		/* SubtractOp */
		asl_dump_oparg(&dp, indent, "Subtract", "iio");
		break;
	case 0x75:		/* IncrementOp */
		asl_dump_oparg(&dp, indent, "Increment", "t");
		break;
	case 0x76:		/* DecrementOp */
		asl_dump_oparg(&dp, indent, "Decrement", "t");
		break;
	case 0x77:		/* MultiplyOp */
		asl_dump_oparg(&dp, indent, "Multiply", "iio");
		break;
	case 0x78:		/* DivideOp */
		asl_dump_oparg(&dp, indent, "Divide", "iioo");
		break;
	case 0x79:		/* ShiftLeftOp */
		asl_dump_oparg(&dp, indent, "ShiftLeft", "iio");
		break;
	case 0x7a:		/* ShiftRightOp */
		asl_dump_oparg(&dp, indent, "ShiftRight", "iio");
		break;
	case 0x7b:		/* AndOp */
		asl_dump_oparg(&dp, indent, "And", "iio");
		break;
	case 0x7c:		/* NAndOp */
		asl_dump_oparg(&dp, indent, "NAnd", "iio");
		break;
	case 0x7d:		/* OrOp */
		asl_dump_oparg(&dp, indent, "Or", "iio");
		break;
	case 0x7e:		/* NOrOp */
		asl_dump_oparg(&dp, indent, "NOr", "iio");
		break;
	case 0x7f:		/* XOrOp */
		asl_dump_oparg(&dp, indent, "XOr", "iio");
		break;
	case 0x80:		/* NotOp */
		asl_dump_oparg(&dp, indent, "Not", "io");
		break;
	case 0x81:		/* FindSetLeftBitOp */
		asl_dump_oparg(&dp, indent, "FindSetLeftBit", "it");
		break;
	case 0x82:		/* FindSetRightBitOp */
		asl_dump_oparg(&dp, indent, "FindSetRightBit", "it");
		break;
	case 0x83:		/* DerefOp */
		asl_dump_oparg(&dp, indent, "DerefOf", "t");
		break;
	case 0x84:              /* ConcatResTemplateOp */
		asl_dump_oparg(&dp, indent, "ConcatResTemplate", "ttt");
		break;
	case 0x85:              /* ModOp */
		asl_dump_oparg(&dp, indent, "Mod", "iio");
		break;
	case 0x86:		/* NotifyOp */
		asl_dump_oparg(&dp, indent, "Notify", "tt");
		break;
	case 0x87:		/* SizeOfOp */
		asl_dump_oparg(&dp, indent, "SizeOf", "t");
		break;
	case 0x88:		/* IndexOp */
		asl_dump_oparg(&dp, indent, "Index", "tio");
		break;
	case 0x89:		/* MatchOp */
		printf("Match(");
		asl_dump_termobj(&dp, indent);
		printf(", %s, ", matchstr[*dp++]);
		asl_dump_termobj(&dp, indent);
		printf(", %s, ", matchstr[*dp++]);
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(")");
		break;
	case 0x8a:		/* CreateDWordFieldOp */
		asl_dump_oparg(&dp, indent, "CreateDWordField", "tiN");
		break;
	case 0x8b:		/* CreateWordFieldOp */
		asl_dump_oparg(&dp, indent, "CreateWordField", "tiN");
		break;
	case 0x8c:		/* CreateByteFieldOp */
		asl_dump_oparg(&dp, indent, "CreateByteField", "tiN");
		break;
	case 0x8d:		/* CreateBitFieldOp */
		asl_dump_oparg(&dp, indent, "CreateBitField", "tiN");
		break;
	case 0x8e:		/* ObjectTypeOp */
		asl_dump_oparg(&dp, indent, "ObjectType", "t");
		break;
	case 0x8f:		/* CreateQWordFieldOp */
		asl_dump_oparg(&dp, indent, "CreateQWordField", "tiN");
		break;
	case 0x90:
		asl_dump_oparg(&dp, indent, "LAnd", "ii");
		break;
	case 0x91:
		asl_dump_oparg(&dp, indent, "LOr", "ii");
		break;
	case 0x92:
		asl_dump_oparg(&dp, indent, "LNot", "i");
		break;
	case 0x93:
		asl_dump_oparg(&dp, indent, "LEqual", "tt");
		break;
	case 0x94:
		asl_dump_oparg(&dp, indent, "LGreater", "tt");
		break;
	case 0x95:
		asl_dump_oparg(&dp, indent, "LLess", "tt");
		break;
	case 0x96:		/* ToBufferOp */
		asl_dump_oparg(&dp, indent, "ToBuffer", "to");
		break;
	case 0x97:		/* ToDecStringOp */
		asl_dump_oparg(&dp, indent, "ToDecString", "to");
		break;
	case 0x98:		/* ToHexStringOp */
		asl_dump_oparg(&dp, indent, "ToHexString", "to");
		break;
	case 0x99:		/* ToIntegerOp */
		asl_dump_oparg(&dp, indent, "ToInteger", "to");
		break;
	case 0x9c:		/* ToStringOp */
		asl_dump_oparg(&dp, indent, "ToString", "tto");
		break;
	case 0x9d:               /* CopyObjectOp */
		asl_dump_oparg(&dp, indent, "CopyObject", "tt");
		break;
	case 0x9e:              /* MidOp */
		asl_dump_oparg(&dp, indent, "Mid", "tiio");
		break;
	case 0x9f:
		printf("Continue");
		break;
	case 0xa0:		/* IfOp */
		asl_dump_defif(&dp, indent);
		break;
	case 0xa1:		/* ElseOp */
		asl_dump_defelse(&dp, indent);
		break;
	case 0xa2:		/* WhileOp */
		asl_dump_defwhile(&dp, indent);
		break;
	case 0xa3:		/* NoopOp */
		printf("Noop");
		break;
	case 0xa5:		/* BreakOp */
		printf("Break");
		break;
	case 0xa4:		/* ReturnOp */
		asl_dump_oparg(&dp, indent, "Return", "t");
		break;
	case 0xcc:		/* BreakPointOp */
		printf("BreakPoint");
		break;
	default:
		errx(1, "strange opcode 0x%x", opcode);
	}

	*dpp = dp;
}

void
asl_dump_objectlist(u_int8_t **dpp, u_int8_t *end, int indent)
{
	u_int8_t	*dp;

	dp = *dpp;
	while (dp < end) {
		print_indent(indent);
		asl_dump_termobj(&dp, indent);
		printf("\n");
	}

	*dpp = dp;
}
@


1.8
log
@Fix a bunch of goo by creating a more generic fucntion to handle it.

code from jordan
@
text
@d1 1
a1 1
/*	$OpenBSD: asl_dump.c,v 1.7 2007/12/07 18:27:07 fgsch Exp $	*/
d28 1
a28 1
 *	$Id: asl_dump.c,v 1.7 2007/12/07 18:27:07 fgsch Exp $
@


1.7
log
@implement a few more opcodes from acpi 3.0 and fix output in some cases.
dell d620 now shows the tree correctly. marco@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: asl_dump.c,v 1.6 2007/12/02 22:23:04 jordan Exp $	*/
d28 1
a28 1
 *	$Id: asl_dump.c,v 1.6 2007/12/02 22:23:04 jordan Exp $
d760 31
d871 1
a871 6
		printf("Alias(");
		ASL_CREATE_LOCALNAMEOBJ(dp);
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(")");
d874 1
a874 6
		printf("Name(");
		ASL_CREATE_LOCALNAMEOBJ(dp);
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(")");
d898 1
a898 3
			printf("Event(");
			asl_dump_termobj(&dp, indent);
			printf(")");
d901 1
a901 5
			printf("CondRefOf(");
			asl_dump_termobj(&dp, indent);
			printf(", ");
			asl_dump_termobj(&dp, indent);
			printf(")");
d904 4
a907 10
			printf("CreateField(");
			asl_dump_termobj(&dp, indent);
			printf(", ");
			asl_dump_termobj(&dp, indent);
			printf(", ");
			asl_dump_termobj(&dp, indent);
			printf(", ");
			ASL_CREATE_LOCALNAMEOBJ(dp);
			asl_dump_termobj(&dp, indent);
			printf(")");
d910 1
a910 5
			printf("Load(");
			asl_dump_termobj(&dp, indent);
			printf(", ");
			asl_dump_termobj(&dp, indent);
			printf(")");
d913 1
a913 3
			printf("Stall(");
			asl_dump_termobj(&dp, indent);
			printf(")");
d916 1
a916 3
			printf("Sleep(");
			asl_dump_termobj(&dp, indent);
			printf(")");
d919 1
a919 3
			printf("Acquire(");
			asl_dump_termobj(&dp, indent);
			printf(", 0x%x)", asl_dump_worddata(&dp));
d922 1
a922 3
			printf("Signal(");
			asl_dump_termobj(&dp, indent);
			printf(")");
d925 1
a925 5
			printf("Wait(");
			asl_dump_termobj(&dp, indent);
			printf(", ");
			asl_dump_termobj(&dp, indent);
			printf(")");
d928 1
a928 3
			printf("Reset(");
			asl_dump_termobj(&dp, indent);
			printf(")");
d931 1
a931 3
			printf("Release(");
			asl_dump_termobj(&dp, indent);
			printf(")");
d934 1
a934 5
			printf("FromBCD(");
			asl_dump_termobj(&dp, indent);
			printf(", ");
			asl_dump_termobj(&dp, indent);
			printf(")");
d937 1
a937 4
			printf("ToBCD(");
			asl_dump_termobj(&dp, indent);
			OPTARG();
			printf(")");
d940 1
a940 3
			printf("Unload(");
			asl_dump_termobj(&dp, indent);
			printf(")");
d949 4
a952 5
			printf("Fatal(");
			printf("0x%x, ", asl_dump_bytedata(&dp));
			printf("0x%x, ", asl_dump_dworddata(&dp));
			asl_dump_termobj(&dp, indent);
			printf(")");
d978 3
d1005 1
a1005 5
		printf("Store(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(")");
d1008 1
a1008 3
		printf("RefOf(");
		asl_dump_termobj(&dp, indent);
		printf(")");
d1011 1
a1011 6
		printf("Add(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		OPTARG();
		printf(")");
d1014 1
a1014 7
		printf("Concatenate(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(")");
d1017 1
a1017 6
		printf("Subtract(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		OPTARG();
		printf(")");
d1020 1
a1020 3
		printf("Increment(");
		asl_dump_termobj(&dp, indent);
		printf(")");
d1023 1
a1023 3
		printf("Decrement(");
		asl_dump_termobj(&dp, indent);
		printf(")");
d1026 1
a1026 6
		printf("Multiply(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		OPTARG();
		printf(")");
d1029 1
a1029 7
		printf("Divide(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		OPTARG();
		OPTARG();
		printf(")");
d1032 1
a1032 6
		printf("ShiftLeft(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		OPTARG();
		printf(")");
d1035 1
a1035 6
		printf("ShiftRight(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		OPTARG();
		printf(")");
d1038 1
a1038 6
		printf("And(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		OPTARG();
		printf(")");
d1041 1
a1041 6
		printf("NAnd(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		OPTARG();
		printf(")");
d1044 1
a1044 6
		printf("Or(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		OPTARG();
		printf(")");
d1047 1
a1047 6
		printf("NOr(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		OPTARG();
		printf(")");
d1050 1
a1050 6
		printf("XOr(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		OPTARG();
		printf(")");
d1053 1
a1053 4
		printf("Not(");
		asl_dump_termobj(&dp, indent);
		OPTARG();
		printf(")");
d1056 1
a1056 5
		printf("FindSetLeftBit(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(")");
d1059 1
a1059 5
		printf("FindSetRightBit(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(")");
d1062 7
a1068 3
		printf("DerefOf(");
		asl_dump_termobj(&dp, indent);
		printf(")");
d1071 1
a1071 5
		printf("Notify(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(")");
d1074 1
a1074 3
		printf("SizeOf(");
		asl_dump_termobj(&dp, indent);
		printf(")");
d1077 1
a1077 6
		printf("Index(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		OPTARG();
		printf(")");
d1091 1
a1091 8
		printf("CreateDWordField(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		ASL_CREATE_LOCALNAMEOBJ(dp);
		asl_dump_termobj(&dp, indent);
		printf(")");
d1094 1
a1094 8
		printf("CreateWordField(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		ASL_CREATE_LOCALNAMEOBJ(dp);
		asl_dump_termobj(&dp, indent);
		printf(")");
d1097 1
a1097 8
		printf("CreateByteField(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		ASL_CREATE_LOCALNAMEOBJ(dp);
		asl_dump_termobj(&dp, indent);
		printf(")");
d1100 1
a1100 8
		printf("CreateBitField(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		ASL_CREATE_LOCALNAMEOBJ(dp);
		asl_dump_termobj(&dp, indent);
		printf(")");
d1103 1
a1103 3
		printf("ObjectType(");
		asl_dump_termobj(&dp, indent);
		printf(")");
d1106 1
a1106 8
		printf("CreateQWordField(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		ASL_CREATE_LOCALNAMEOBJ(dp);
		asl_dump_termobj(&dp, indent);
		printf(")");
d1109 1
a1109 5
		printf("LAnd(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(")");
d1112 1
a1112 5
		printf("LOr(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(")");
d1115 1
a1115 3
		printf("LNot(");
		asl_dump_termobj(&dp, indent);
		printf(")");
d1118 1
a1118 5
		printf("LEqual(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(")");
d1121 1
a1121 5
		printf("LGreater(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(")");
d1124 1
a1124 5
		printf("LLess(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		printf(")");
d1127 7
a1133 4
		printf("ToBuffer(");
		asl_dump_termobj(&dp, indent);
		OPTARG();
		printf(")");
d1136 1
a1136 4
		printf("ToInteger(");
		asl_dump_termobj(&dp, indent);
		OPTARG();
		printf(")");
d1139 10
a1148 6
		printf("ToString(");
		asl_dump_termobj(&dp, indent);
		printf(", ");
		asl_dump_termobj(&dp, indent);
		OPTARG();
		printf(")");
d1166 1
a1166 3
		printf("Return(");
		asl_dump_termobj(&dp, indent);
		printf(")");
@


1.6
log
@Fixes acpidump on DL145 systems; method defined within another method
ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asl_dump.c,v 1.5 2007/11/26 19:57:05 kettenis Exp $	*/
d28 1
a28 1
 *	$Id: asl_dump.c,v 1.5 2007/11/26 19:57:05 kettenis Exp $
a774 1
	printf(", ");						\
d778 1
d1291 20
@


1.5
log
@Decode CreateQWordFiled().

ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asl_dump.c,v 1.4 2007/09/22 19:42:19 otto Exp $	*/
d28 1
a28 1
 *	$Id: asl_dump.c,v 1.4 2007/09/22 19:42:19 otto Exp $
d303 1
d309 3
d326 1
a326 1
	scope_within_method = 0;
@


1.4
log
@avoid case ranges; ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asl_dump.c,v 1.3 2005/07/21 16:38:55 fgsch Exp $	*/
d28 1
a28 1
 *	$Id: asl_dump.c,v 1.3 2005/07/21 16:38:55 fgsch Exp $
d1236 10
@


1.3
log
@remove trailing newlines from err(3) calls; millert@@ and matthieu@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: asl_dump.c,v 1.2 2005/06/04 02:25:53 cloder Exp $	*/
d28 1
a28 1
 *	$Id: asl_dump.c,v 1.2 2005/06/04 02:25:53 cloder Exp $
d784 4
a787 1
	case 'A' ... 'Z':
d999 7
a1005 1
	case 0x68 ... 0x6e:	/* ArgN */
d1008 8
a1015 1
	case 0x60 ... 0x67:
@


1.2
log
@Clean up gcc-isms. OK tholo
@
text
@d1 1
a1 1
/*	$OpenBSD: asl_dump.c,v 1.1 2005/06/02 20:09:39 tholo Exp $	*/
d28 1
a28 1
 *	$Id: asl_dump.c,v 1.1 2005/06/02 20:09:39 tholo Exp $
d993 1
a993 1
			errx(1, "strange opcode 0x5b, 0x%x\n", opcode);
d1287 1
a1287 1
		errx(1, "strange opcode 0x%x\n", opcode);
@


1.1
log
@Start on a basic ACPI framework -- does not do much more than read out the
ACPI tables into kernel memory and attach ACPI and HPET timers currently.

In order to test this code, enabling the devices in GENERIC as well as
the ACPI_ENABLE option is needed.  This code does not do any thermal
control yet, so this should be done with care depending on the platform.

In the tree so more people can contribute to making this more fully
featured.

Ok niklas@@ grange@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d28 1
a28 1
 *	$Id: asl_dump.c,v 1.6 2000/08/09 14:47:52 iwasaki Exp $
d379 26
a404 1
	case 'A' ... 'Z':
@

