head	1.7;
access;
symbols
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.12
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.10
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.12.04.12.15.57;	author yasuoka;	state dead;
branches;
next	1.6;
commitid	W2Mb6Zjx9K3VsTiV;

1.6
date	2015.10.11.07.32.06;	author guenther;	state Exp;
branches;
next	1.5;
commitid	l7h58s8VRh2mApBT;

1.5
date	2015.01.19.01.48.59;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	a1BWBASyBgKKetQd;

1.4
date	2012.05.08.13.15.12;	author yasuoka;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.02.21.20.57;	author yasuoka;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.01.03.38.17;	author yasuoka;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.11.04.20.57;	author yasuoka;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Remove files which had been unused.
@
text
@/*	$OpenBSD: npppd_tun.c,v 1.6 2015/10/11 07:32:06 guenther Exp $ */

/*-
 * Copyright (c) 2009 Internet Initiative Japan Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
/**@@file
 * This file provides functions on {@@link ::_npppd_tun tunnel device}.
 */
#include <sys/types.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <sys/sockio.h>
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <net/if.h>
#include <stdio.h>
#include <syslog.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>
#include <string.h>
#include <errno.h>
#include <event.h>

#include "npppd_local.h"
#include "debugutil.h"
#include "debugmacro.h"

#include "npppd_tun.h"

static void         npppd_tundev_io_event_handler (int, short, void *);

#ifdef	NPPPD_TUN_DEBUG
#define	NPPPD_TUN_ASSERT(cond)	ASSERT(cond)
#else
#define	NPPPD_TUN_ASSERT(cond)
#endif


/**
 * Initialize {@@link ::_npppd_tun instance of tunnel device}.
 * @@param	minor	device minor number
 */
void
npppd_tundev_init(npppd *_this, int minor)
{
	NPPPD_TUN_ASSERT(_this != NULL);
	NPPPD_TUN_ASSERT(_this->tun_file <= 0);

	_this->tun_file = -1;
	_this->tun_minor = minor;
}

/**
 * Start {@@link ::_npppd_tun instance of tunnel device}.
 */
int
npppd_tundev_start(npppd *_this)
{
	int sock;
	char buf[PATH_MAX];
	struct ifaliasreq ifra;
	struct sockaddr_in *sin0;

	NPPPD_TUN_ASSERT(_this != NULL);

	snprintf(buf, sizeof(buf), "/dev/tun%d", _this->tun_minor);
	if ((_this->tun_file = open(buf, O_RDWR | O_NONBLOCK)) < 0) {
		log_printf(LOG_ERR, "open(%s) failed in %s(): %m",
		    buf, __func__);
		goto fail;
	}

	if ((sock = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
		log_printf(LOG_ERR, "socket() failed in %s(): %m", __func__);
		goto fail;
	}

	memset(&ifra, 0, sizeof(ifra));
	snprintf(ifra.ifra_name, sizeof(ifra.ifra_name), "tun%d",
	    _this->tun_minor);

	sin0 = (struct sockaddr_in *)&ifra.ifra_addr;
	sin0->sin_addr.s_addr = _this->tun_ip4_addr.s_addr;
	sin0->sin_family = AF_INET;
	sin0->sin_len = sizeof(struct sockaddr_in);

	sin0 = (struct sockaddr_in *)&ifra.ifra_mask;
	sin0->sin_addr.s_addr = 0xffffffffL;
	sin0->sin_family = AF_INET;
	sin0->sin_len = sizeof(struct sockaddr_in);

	sin0 = (struct sockaddr_in *)&ifra.ifra_broadaddr;
	sin0->sin_addr.s_addr = 0;
	sin0->sin_family = AF_INET;
	sin0->sin_len = sizeof(struct sockaddr_in);

	if (ioctl(sock, SIOCAIFADDR, &ifra) != 0 && errno != EEXIST) {
		log_printf(LOG_ERR, "Cannot assign tun device ip address: %m");
		goto fail;
	}
	close(sock);

	event_set(&_this->ev_tun, _this->tun_file, EV_READ | EV_PERSIST,
	    npppd_tundev_io_event_handler, _this);
	event_add(&_this->ev_tun, NULL);

	log_printf(LOG_INFO, "Opened /dev/tun%d", _this->tun_minor);

	return 0;
fail:
	if (_this->tun_file >= 0)
		close(_this->tun_file);
	_this->tun_file = -1;

	return -1;
}

/**
 * Stop process on tunnel device.
 */
void
npppd_tundev_stop(npppd *_this)
{
	if (_this->tun_file >= 0) {
		event_del(&_this->ev_tun);
		close(_this->tun_file);
	}
	_this->tun_file = -1;
	log_printf(LOG_NOTICE, "Closed /dev/tun%d", _this->tun_minor);
}

/**
 * Set IP address.
 */
int
npppd_tundev_set_ip_addr(npppd *_this)
{
	return 0;
}

static void
npppd_tundev_io_event_handler(int fd, short evtype, void *data)
{
	int sz;
	npppd *_this;
	uint8_t buffer[8192];

	NPPPD_TUN_ASSERT((evtype & EV_READ) != 0);

	_this = data;
	NPPPD_TUN_ASSERT(_this->tun_file >= 0);

	do {
		sz = read(_this->tun_file, buffer, sizeof(buffer));
		if (sz <= 0) {
			if (sz == 0)
				log_printf(LOG_ERR, "tun%d read failed: %m",
				    _this->tun_minor);
			else if (errno == EAGAIN)
				break;
			else
				log_printf(LOG_ERR, "tun%d file is closed",
				    _this->tun_minor);
			npppd_tundev_stop(_this);
			return;
		}
		npppd_network_input(_this, buffer, sz);
	} while (1 /* CONSTCOND */);

	return;
}

/**
 * Write to tunnel device.
 */
void
npppd_tundev_write(npppd *_this, uint8_t *pktp, int lpktp)
{
	int err;

	NPPPD_TUN_ASSERT(_this != NULL);
	NPPPD_TUN_ASSERT(_this->tun_file >= 0);

	err = write(_this->tun_file, pktp, lpktp);

	if (err != lpktp)
		log_printf(LOG_ERR, "tun%d write failed in %s(): %m",
		    _this->tun_minor, __func__);
}
@


1.6
log
@Simplify and lock down priv_open():
 * kill the 'mode' argument
 * fail if passed any flags other than O_ACCMODE OR O_NONBLOCK
 * paranoia: mask O_CREAT when calling open() with only two arguments
 * instead of using ioctl(FIONBIO) after the fact, pass O_NONBLOCK to
   priv_open()

"good start" deraadt@@
ok yasuoka@@
@
text
@d1 1
a1 1
/*	$OpenBSD: npppd_tun.c,v 1.5 2015/01/19 01:48:59 deraadt Exp $ */
@


1.5
log
@move to <limits.h> universe
ok yasuoka
@
text
@d1 1
a1 1
/*	$OpenBSD: npppd_tun.c,v 1.4 2012/05/08 13:15:12 yasuoka Exp $ */
d82 1
a82 1
	int x, sock;
d90 1
a90 1
	if ((_this->tun_file = open(buf, O_RDWR, 0600)) < 0) {
a125 6
	x = 1;
	if (ioctl(_this->tun_file, FIONBIO, &x) != 0) {
		log_printf(LOG_ERR, "ioctl(FIONBIO) failed in %s(): %m",
		    __func__);
		goto fail;
	}
@


1.4
log
@Fix comments and styles.  Delete unused variables and labels.
No binary changes.

ok mcbride henning
@
text
@d1 1
a1 1
/*	$OpenBSD: npppd_tun.c,v 1.3 2010/07/02 21:20:57 yasuoka Exp $ */
a32 1
#include <sys/param.h>
d83 1
a83 1
	char buf[MAXPATHLEN];
@


1.3
log
@add $OpenBSD$ and remove trailing space.  no functional change.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.2
log
@Translate Japanese comments or labels into English.  Translation was
done by IIJ people (MATSUI Yoshihiro, SAITOH Masanobu, Tomoyuki Sahara),
yuo@@ and myself.

This diff also includes
 - delete part of useless comments, correct spelling.
 - add man page of npppdctl.

There is no functional change.
@
text
@d1 2
d191 1
a191 1
			else 
d217 1
a217 1
		log_printf(LOG_ERR, "tun%d write failed in %s(): %m", 
@


1.1
log
@Initial import npppd(8).  npppd is a new PPP daemon that handles many
ppp sessions as a server.  It supports L2TP, PPTP and PPPoE as
tunneling.

ok mcbride@@ dlg@@ deraadt@@ reyk@@.
@
text
@d27 1
a27 1
 * {@@link ::_npppd_tun トンネルデバイス} に関する処理を提供します。
d62 2
a63 2
 * {@@link ::_npppd_tun トンネルデバイスインスタンス}を初期化します。
 * @@param	minor	デバイスマイナー番号
d76 1
a76 1
 * {@@link ::_npppd_tun トンネルデバイスインスタンス}を開始します。
d92 1
a92 1
		goto reigai;
d97 1
a97 1
		goto reigai;
a98 1
	// ifconfig tun1 10.0.0.1 netmask 255.255.255.25
d121 1
a121 1
		goto reigai;
d129 1
a129 1
		goto reigai;
d138 1
a138 1
reigai:
d147 1
a147 1
 * トンネルデバイスに関する処理を終了します。
d161 1
a161 1
 * IPアドレスをセットします。
d202 1
a202 1
 * トンネルデバイスに書き込みます。
@

