head	1.12;
access;
symbols
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.6
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2004.05.04.23.37.06;	author deraadt;	state dead;
branches;
next	1.11;

1.11
date	2003.08.19.22.19.07;	author itojun;	state Exp;
branches;
next	1.10;

1.10
date	2003.03.13.09.09.45;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.09.06.19.52.26;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.10.19.53.36;	author hin;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.16.44.24;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.23.15.03.16;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	98.12.20.21.16.50;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.11.28.04.07.24;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.02.17.09.11.15;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.08.22.00.34.13;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.27;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.27;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@bye bye bootpd.  You will not be missed.
@
text
@/*
 * getether.c : get the ethernet address of an interface
 *
 * All of this code is quite system-specific.  As you may well
 * guess, it took a good bit of detective work to figure out!
 *
 * If you figure out how to do this on another system,
 * please let me know.  <gwr@@mc.com>
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <unistd.h>
#include <string.h>
#include <ctype.h>
#include <syslog.h>

#include "report.h"
#define EALEN 6

#if defined(ultrix) || (defined(__osf__) && defined(__alpha))
/*
 * This is really easy on Ultrix!  Thanks to
 * Harald Lundberg <hl@@tekla.fi> for this code.
 *
 * The code here is not specific to the Alpha, but that was the
 * only symbol we could find to identify DEC's version of OSF.
 * (Perhaps we should just define DEC in the Makefile... -gwr)
 */

#include <sys/ioctl.h>
#include <net/if.h>				/* struct ifdevea */

getether(ifname, eap)
	char *ifname;
	u_char *eap;
{
	int rc = -1;
	int fd;
	struct ifdevea phys;

	bzero(&phys, sizeof(phys));
	strlcpy(phys.ifr_name, ifname, sizeof phys.ifr_name);
	if ((fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
		report(LOG_ERR, "getether: socket(INET,DGRAM) failed");
		return -1;
	}
	if (ioctl(fd, SIOCRPHYSADDR, &phys) < 0) {
		report(LOG_ERR, "getether: ioctl SIOCRPHYSADDR failed");
	} else {
		bcopy(&phys.current_pa[0], eap, EALEN);
		rc = 0;
	}
	close(fd);
	return rc;
}

#define	GETETHER
#endif /* ultrix|osf1 */


#ifdef	SUNOS

#include <sys/sockio.h>
#include <sys/time.h>			/* needed by net_if.h */
#include <net/nit_if.h>			/* for NIOCBIND */
#include <net/if.h>				/* for struct ifreq */

getether(ifname, eap)
	char *ifname;				/* interface name from ifconfig structure */
	char *eap;					/* Ether address (output) */
{
	int rc = -1;

	struct ifreq ifrnit;
	int nit;

	bzero((char *) &ifrnit, sizeof(ifrnit));
	strlcpy(&ifrnit.ifr_name[0], ifname, IFNAMSIZ);

	nit = open("/dev/nit", 0);
	if (nit < 0) {
		report(LOG_ERR, "getether: open /dev/nit: %s",
			   get_errmsg());
		return rc;
	}
	do {
		if (ioctl(nit, NIOCBIND, &ifrnit) < 0) {
			report(LOG_ERR, "getether: NIOCBIND on nit");
			break;
		}
		if (ioctl(nit, SIOCGIFADDR, &ifrnit) < 0) {
			report(LOG_ERR, "getether: SIOCGIFADDR on nit");
			break;
		}
		bcopy(&ifrnit.ifr_addr.sa_data[0], eap, EALEN);
		rc = 0;
	} while (0);
	close(nit);
	return rc;
}

#define	GETETHER
#endif /* SUNOS */


#if defined(__386BSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
/* Thanks to John Brezak <brezak@@ch.hp.com> for this code. */
#include <sys/ioctl.h>
#include <net/if.h>
#include <net/if_dl.h>
#include <net/if_types.h>
#include <ifaddrs.h>

int
getether(ifname, eap)
	char *ifname;				/* interface name from ifconfig structure */
	char *eap;					/* Ether address (output) */
{
	int rc = -1;
	struct ifaddrs *ifap, *ifa;

	/* Fetch the interface configuration */
	if (getifaddrs(&ifap) != 0) {
		report(LOG_ERR, "getether: getifaddrs %s: %s", ifname,
		    get_errmsg());
		return (-1);
	}

	for (ifa = ifap; ifa; ifa = ifa->ifa_next) {
		/* Look for interface */
		if (strcmp(ifname, ifa->ifa_name) == 0 &&
			ifa->ifa_addr->sa_family == AF_LINK &&
		((struct sockaddr_dl *)ifa->ifa_addr)->sdl_type == IFT_ETHER) {
			bcopy(LLADDR((struct sockaddr_dl *)ifa->ifa_addr), eap, EALEN);
			rc = 0;
			break;
		}
	}

	freeifaddrs(ifap);
	return (rc);
}

#define	GETETHER
#endif /* __NetBSD__ || __OpenBSD__ */


#ifdef	SVR4
/*
 * This is for "Streams TCP/IP" by Lachman Associates.
 * They sure made this cumbersome!  -gwr
 */

#include <sys/sockio.h>
#include <sys/dlpi.h>
#include <stropts.h>
#ifndef NULL
#define NULL 0
#endif

getether(ifname, eap)
	char *ifname;				/* interface name from ifconfig structure */
	char *eap;					/* Ether address (output) */
{
	int rc = -1;
	char devname[32];
	char tmpbuf[sizeof(union DL_primitives) + 16];
	struct strbuf cbuf;
	int fd, flags;
	union DL_primitives *dlp;
	char *enaddr;
	int unit = -1;				/* which unit to attach */

	snprintf(devname, sizeof(devname), "/dev/%s", ifname);
	fd = open(devname, 2);
	if (fd < 0) {
		/* Try without the trailing digit. */
		char *p = devname + 5;
		while (isalpha(*p))
			p++;
		if (isdigit(*p)) {
			unit = *p - '0';
			*p = '\0';
		}
		fd = open(devname, 2);
		if (fd < 0) {
			report(LOG_ERR, "getether: open %s: %s",
				   devname, get_errmsg());
			return rc;
		}
	}
#ifdef	DL_ATTACH_REQ
	/*
	 * If this is a "Style 2" DLPI, then we must "attach" first
	 * to tell the driver which unit (board, port) we want.
	 * For now, decide this based on the device name.
	 * (Should do "info_req" and check dl_provider_style ...)
	 */
	if (unit >= 0) {
		memset(tmpbuf, 0, sizeof(tmpbuf));
		dlp = (union DL_primitives *) tmpbuf;
		dlp->dl_primitive = DL_ATTACH_REQ;
		dlp->attach_req.dl_ppa = unit;
		cbuf.buf = tmpbuf;
		cbuf.len = DL_ATTACH_REQ_SIZE;
		if (putmsg(fd, &cbuf, NULL, 0) < 0) {
			report(LOG_ERR, "getether: attach: putmsg: %s", get_errmsg());
			goto out;
		}
		/* Recv the ack. */
		cbuf.buf = tmpbuf;
		cbuf.maxlen = sizeof(tmpbuf);
		flags = 0;
		if (getmsg(fd, &cbuf, NULL, &flags) < 0) {
			report(LOG_ERR, "getether: attach: getmsg: %s", get_errmsg());
			goto out;
		}
		/*
		 * Check the type, etc.
		 */
		if (dlp->dl_primitive == DL_ERROR_ACK) {
			report(LOG_ERR, "getether: attach: dlpi_errno=%d, unix_errno=%d",
				   dlp->error_ack.dl_errno,
				   dlp->error_ack.dl_unix_errno);
			goto out;
		}
		if (dlp->dl_primitive != DL_OK_ACK) {
			report(LOG_ERR, "getether: attach: not OK or ERROR");
			goto out;
		}
	} /* unit >= 0 */
#endif	/* DL_ATTACH_REQ */

	/*
	 * Get the Ethernet address the same way the ARP module
	 * does when it is pushed onto a new stream (bind).
	 * One should instead be able just do an dl_info_req
	 * but many drivers do not supply the hardware address
	 * in the response to dl_info_req (they MUST supply it
	 * for dl_bind_ack because the ARP module requires it).
	 */
	memset(tmpbuf, 0, sizeof(tmpbuf));
	dlp = (union DL_primitives *) tmpbuf;
	dlp->dl_primitive = DL_BIND_REQ;
	dlp->bind_req.dl_sap = 0x8FF;	/* XXX - Unused SAP */
	cbuf.buf = tmpbuf;
	cbuf.len = DL_BIND_REQ_SIZE;
	if (putmsg(fd, &cbuf, NULL, 0) < 0) {
		report(LOG_ERR, "getether: bind: putmsg: %s", get_errmsg());
		goto out;
	}
	/* Recv the ack. */
	cbuf.buf = tmpbuf;
	cbuf.maxlen = sizeof(tmpbuf);
	flags = 0;
	if (getmsg(fd, &cbuf, NULL, &flags) < 0) {
		report(LOG_ERR, "getether: bind: getmsg: %s", get_errmsg());
		goto out;
	}
	/*
	 * Check the type, etc.
	 */
	if (dlp->dl_primitive == DL_ERROR_ACK) {
		report(LOG_ERR, "getether: bind: dlpi_errno=%d, unix_errno=%d",
			   dlp->error_ack.dl_errno,
			   dlp->error_ack.dl_unix_errno);
		goto out;
	}
	if (dlp->dl_primitive != DL_BIND_ACK) {
		report(LOG_ERR, "getether: bind: not OK or ERROR");
		goto out;
	}
	if (dlp->bind_ack.dl_addr_offset == 0) {
		report(LOG_ERR, "getether: bind: ack has no address");
		goto out;
	}
	if (dlp->bind_ack.dl_addr_length < EALEN) {
		report(LOG_ERR, "getether: bind: ack address truncated");
		goto out;
	}
	/*
	 * Copy the Ethernet address out of the message.
	 */
	enaddr = tmpbuf + dlp->bind_ack.dl_addr_offset;
	memcpy(eap, enaddr, EALEN);
	rc = 0;

  out:
	close(fd);
	return rc;
}

#define	GETETHER
#endif /* SVR4 */


#ifdef	linux
/*
 * This is really easy on Linux!  This version (for linux)
 * written by Nigel Metheringham <nigelm@@ohm.york.ac.uk>
 *
 * The code is almost identical to the Ultrix code - however
 * the names are different to confuse the innocent :-)
 * Most of this code was stolen from the Ultrix bit above.
 */

#include <sys/ioctl.h>
#include <net/if.h>	       	/* struct ifreq */

/* In a properly configured system this should be either sys/socketio.h
   or sys/sockios.h, but on my distribution these don't line up correctly */
#include <linux/sockios.h>	/* Needed for IOCTL defs */

getether(ifname, eap)
	char *ifname, *eap;
{
	int rc = -1;
	int fd;
	struct ifreq phys;

	bzero(&phys, sizeof(phys));
	strlcpy(phys.ifr_name, ifname, sizeof phys.ifr_name);
	if ((fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
		report(LOG_ERR, "getether: socket(INET,DGRAM) failed");
		return -1;
	}
	if (ioctl(fd, SIOCGIFHWADDR, &phys) < 0) {
		report(LOG_ERR, "getether: ioctl SIOCGIFHWADDR failed");
	} else {
		bcopy(phys.ifr_hwaddr, eap, EALEN);
		rc = 0;
	}
	close(fd);
	return rc;
}

#define	GETETHER
#endif	/* linux */


/* If we don't know how on this system, just return an error. */
#ifndef	GETETHER
getether(ifname, eap)
	char *ifname, *eap;
{
	return -1;
}

#endif /* !GETETHER */

/*
 * Local Variables:
 * tab-width: 4
 * c-indent-level: 4
 * c-argdecl-indent: 4
 * c-continued-statement-offset: 4
 * c-continued-brace-offset: -4
 * c-label-offset: -4
 * c-brace-offset: 0
 * End:
 */
@


1.11
log
@rewrite SIOCGIFCONF into getifaddrs.  deraadt ok
@
text
@@


1.10
log
@lots of sprintf -> snprintf and strcpy -> strlcpy; checked by tedu
@
text
@d114 1
d121 2
a122 5
	int fd, rc = -1;
	int n;
	struct ifreq ibuf[16], ifr;
	struct ifconf ifc;
	struct ifreq *ifrp, *ifend;
d125 4
a128 4
	fd = socket(AF_INET, SOCK_DGRAM, 0);
	if (fd < 0) {
		report(LOG_ERR, "getether: socket %s: %s", ifname, get_errmsg());
		return (fd);
d130 2
a131 11
	ifc.ifc_len = sizeof(ibuf);
	ifc.ifc_buf = (caddr_t) ibuf;
	if (ioctl(fd, SIOCGIFCONF, (char *) &ifc) < 0 ||
		ifc.ifc_len < sizeof(struct ifreq)) {
		report(LOG_ERR, "getether: SIOCGIFCONF: %s", get_errmsg());
		goto out;
	}
	/* Search interface configuration list for link layer address. */
	ifrp = ibuf;
	ifend = (struct ifreq *) ((char *) ibuf + ifc.ifc_len);
	while (ifrp < ifend) {
d133 4
a136 4
		if (strcmp(ifname, ifrp->ifr_name) == 0 &&
			ifrp->ifr_addr.sa_family == AF_LINK &&
		((struct sockaddr_dl *) &ifrp->ifr_addr)->sdl_type == IFT_ETHER) {
			bcopy(LLADDR((struct sockaddr_dl *) &ifrp->ifr_addr), eap, EALEN);
a139 5
		/* Bump interface config pointer */
		n = ifrp->ifr_addr.sa_len + sizeof(ifrp->ifr_name);
		if (n < sizeof(*ifrp))
			n = sizeof(*ifrp);
		ifrp = (struct ifreq *) ((char *) ifrp + n);
d142 1
a142 2
  out:
	close(fd);
@


1.9
log
@socklen_t use; pvalchev ok
@
text
@d42 1
d44 1
a44 1
	strcpy(phys.ifr_name, ifname);
d339 1
d341 1
a341 1
	strcpy(phys.ifr_name, ifname);
@


1.8
log
@-Wall cleanup

ok deraadt@@
@
text
@d36 2
a37 1
	char *ifname, *eap;
@


1.7
log
@kill more registers.

millert@@ ok
@
text
@d14 2
d113 1
@


1.6
log
@Call get_errmsg() properly; from NetBSD.
@
text
@d116 1
a116 1
	register int n;
d119 1
a119 1
	register struct ifreq *ifrp, *ifend;
@


1.5
log
@o make sure C-style strings in packet are NUL-terminated and increase size of
  buf in report() for 256; W.H.J.Pinckaers@@CPEDU.RUG.NL
o kill sprintf in favor of snprintf everywhere (paranoia...)
@
text
@d131 1
a131 1
		report(LOG_ERR, "getether: SIOCGIFCONF: %s", get_errmsg);
@


1.4
log
@ o use in_port_t
 o be careful with string copies; use strlcpy/strlcat when sensible
 o ignore requests with bogus network types
@
text
@d188 1
a188 1
	sprintf(devname, "/dev/%s", ifname);
@


1.3
log
@__OpenBSD__
@
text
@d76 1
a76 1
	strncpy(&ifrnit.ifr_name[0], ifname, IFNAMSIZ);
@


1.2
log
@__OpenBSD__
@
text
@d159 1
a159 1
#endif /* __NetBSD__ */
@


1.1
log
@Initial revision
@
text
@d104 1
a104 1
#if defined(__386BSD__) || defined(__NetBSD__)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
