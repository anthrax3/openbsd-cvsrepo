head	1.12;
access;
symbols
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3;
locks; strict;
comment	@ * @;


1.12
date	2017.03.25.15.47.37;	author mlarkin;	state Exp;
branches;
next	1.11;
commitid	EGo7WkcHTulgDXQx;

1.11
date	2017.03.15.18.06.18;	author reyk;	state Exp;
branches;
next	1.10;
commitid	olrxKy4ehROyBXsm;

1.10
date	2017.03.02.07.33.37;	author reyk;	state Exp;
branches;
next	1.9;
commitid	0uvzhmQVR7Ehsjus;

1.9
date	2017.01.21.12.45.41;	author mlarkin;	state Exp;
branches;
next	1.8;
commitid	WI25upNYK3lPYkR3;

1.8
date	2017.01.19.10.16.22;	author reyk;	state Exp;
branches;
next	1.7;
commitid	ET5UHzBPhPGp3gGS;

1.7
date	2017.01.13.14.50.56;	author reyk;	state Exp;
branches;
next	1.6;
commitid	O6Az38HSBXh6vWTC;

1.6
date	2016.10.12.06.56.54;	author mlarkin;	state Exp;
branches;
next	1.5;
commitid	d9eAYZoqV2dTESpL;

1.5
date	2016.09.02.17.08.28;	author stefan;	state Exp;
branches;
next	1.4;
commitid	rVs1JMfl9No82fHm;

1.4
date	2016.07.09.09.06.22;	author stefan;	state Exp;
branches;
next	1.3;
commitid	yIWxq4qxCQhfbPDu;

1.3
date	2015.12.03.08.42.11;	author reyk;	state Exp;
branches;
next	1.2;
commitid	deOxsg54am7A6Za6;

1.2
date	2015.11.22.21.51.32;	author reyk;	state Exp;
branches;
next	1.1;
commitid	nvO8KnrtEKRaTvXw;

1.1
date	2015.11.22.20.20.32;	author mlarkin;	state Exp;
branches;
next	;
commitid	O5Ay1ZamHQn9lamK;


desc
@@


1.12
log
@Implement some missing functionality and clean up some code in vmd
pci emulation.

ok kettenis
@
text
@/*	$OpenBSD: virtio.h,v 1.11 2017/03/15 18:06:18 reyk Exp $	*/

/*
 * Copyright (c) 2015 Mike Larkin <mlarkin@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <dev/pv/virtioreg.h>

#define VIRTQUEUE_ALIGN(n)      (((n)+(VIRTIO_PAGE_SIZE-1))&    \
	~(VIRTIO_PAGE_SIZE-1))

/* Queue sizes must be power of two */
#define VIORND_QUEUE_SIZE	64
#define VIORND_QUEUE_MASK	(VIORND_QUEUE_SIZE - 1)

#define VIOBLK_QUEUE_SIZE	64
#define VIOBLK_QUEUE_MASK	(VIOBLK_QUEUE_SIZE - 1)

#define VIONET_QUEUE_SIZE	64
#define VIONET_QUEUE_MASK	(VIONET_QUEUE_SIZE - 1)

/* VMM Control Interface shutdown timeout (in seconds) */
#define VMMCI_TIMEOUT		3
#define VMMCI_SHUTDOWN_TIMEOUT	30

/* All the devices we support have either 1 or 2 queues */
#define VIRTIO_MAX_QUEUES	2

/*
 * This struct stores notifications from a virtio driver. There is
 * one such struct per virtio device.
 */
struct virtio_io_cfg {
	uint32_t device_feature;
	uint32_t guest_feature;
	uint32_t queue_address;
	uint16_t queue_size;
	uint16_t queue_select;
	uint16_t queue_notify;
	uint8_t device_status;
	uint8_t isr_status;
};

/*
 * A virtio device can have several virtqs. For example, vionet has one virtq
 * each for transmitting and receiving packets. This struct describes the state
 * of one virtq, such as their address in memory, size, offsets of rings, etc.
 * There is one virtio_vq_info per virtq.
 */
struct virtio_vq_info {
	/* Guest physical address of virtq */
	uint32_t qa;

	/* Queue size: number of queue entries in virtq */
	uint32_t qs;

	/*
	 * The offset of the 'available' ring within the virtq located at
	 * guest physical address qa above
	 */
	uint32_t vq_availoffset;

	/*
	 * The offset of the 'used' ring within the virtq located at guest
	 * physical address qa above
	 */
	uint32_t vq_usedoffset;

	/*
	 * The index into a slot of the 'available' ring that a virtio device
	 * can consume next
	 */
	uint16_t last_avail;

	/*
	 * The most recent index into the 'available' ring that a virtio
	 * driver notified to the host.
	 */
	uint16_t notified_avail;
};

struct viornd_dev {
	struct virtio_io_cfg cfg;

	struct virtio_vq_info vq[VIRTIO_MAX_QUEUES];
};

struct vioblk_dev {
	struct virtio_io_cfg cfg;

	struct virtio_vq_info vq[VIRTIO_MAX_QUEUES];

	int fd;
	uint64_t sz;
};

struct vionet_dev {
	pthread_mutex_t mutex;
	struct event event;

	struct virtio_io_cfg cfg;

	struct virtio_vq_info vq[VIRTIO_MAX_QUEUES];

	int fd, rx_added;
	int rx_pending;
	uint32_t vm_id;
	int irq;
	uint8_t mac[6];
	int lockedmac;
};

struct virtio_net_hdr {
	uint8_t flags;
	uint8_t gso_type;
	uint16_t hdr_len;
	uint16_t gso_size;
	uint16_t csum_start;
	uint16_t csum_offset;

	/*
	 * num_buffers is only used if VIRTIO_NET_F_MRG_RXBUF is negotiated.
	 * vmd(8) doesn't negotiate that, but the field is listed here
	 * for completeness sake.
	 */
/*	uint16_t num_buffers; */
};

enum vmmci_cmd {
	VMMCI_NONE = 0,
	VMMCI_SHUTDOWN,
	VMMCI_REBOOT,
};

struct vmmci_dev {
	struct virtio_io_cfg cfg;
	struct event timeout;
	struct timeval time;
	enum vmmci_cmd cmd;
	uint32_t vm_id;
	int irq;
};

void virtio_init(struct vmop_create_params *, int *, int *);
uint32_t vring_size(uint32_t);

int virtio_rnd_io(int, uint16_t, uint32_t *, uint8_t *, void *, uint8_t);
void viornd_update_qs(void);
void viornd_update_qa(void);
int viornd_notifyq(void);

int virtio_blk_io(int, uint16_t, uint32_t *, uint8_t *, void *, uint8_t);
void vioblk_update_qs(struct vioblk_dev *);
void vioblk_update_qa(struct vioblk_dev *);
int vioblk_notifyq(struct vioblk_dev *);

int virtio_net_io(int, uint16_t, uint32_t *, uint8_t *, void *, uint8_t);
void vionet_update_qs(struct vionet_dev *);
void vionet_update_qa(struct vionet_dev *);
int vionet_notifyq(struct vionet_dev *);
void vionet_notify_rx(struct vionet_dev *);
void vionet_process_rx(uint32_t);
int vionet_enq_rx(struct vionet_dev *, char *, ssize_t, int *);

int vmmci_io(int, uint16_t, uint32_t *, uint8_t *, void *, uint8_t);
int vmmci_ctl(unsigned int);
void vmmci_ack(unsigned int);
void vmmci_timeout(int, short, void *);

const char *vioblk_cmd_name(uint32_t);
@


1.11
log
@Improve vmmci(4) shutdown and reboot.

This change handles various cases to power off the VM, even if it is
unresponsive, stuck in ddb, or when the shutdown was initiated from
the VM guest side.  Usage of timeout and VM ACKs make sure that the VM
is really turned off at some point.

OK mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio.h,v 1.10 2017/03/02 07:33:37 reyk Exp $	*/
d159 1
a159 1
int virtio_rnd_io(int, uint16_t, uint32_t *, uint8_t *, void *);
d164 1
a164 1
int virtio_blk_io(int, uint16_t, uint32_t *, uint8_t *, void *);
d169 1
a169 1
int virtio_net_io(int, uint16_t, uint32_t *, uint8_t *, void *);
d177 1
a177 1
int vmmci_io(int, uint16_t, uint32_t *, uint8_t *, void *);
@


1.10
log
@Add "locked lladdr" option to prevent VMs from spoofing MAC addresses.

This is especially useful when multiple VMs share a switch, the
implementation is independent from the underlying switch or bridge.

no objections mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio.h,v 1.9 2017/01/21 12:45:41 mlarkin Exp $	*/
d34 3
a36 2
/* Version of the VMM Control Interface */
#define VMMCI_VERSION		1
d149 1
d179 2
@


1.9
log
@updated include paths for recently moved virtio stuff
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio.h,v 1.8 2017/01/19 10:16:22 reyk Exp $	*/
d121 1
d154 1
a154 1
void virtio_init(struct vm_create_params *, int *, int *);
@


1.8
log
@Export the host time to the guest, add it as a timedelta sensor in vmmci(4)

OK kettenis@@ mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio.h,v 1.7 2017/01/13 14:50:56 reyk Exp $	*/
d19 1
a19 1
#include <dev/pci/virtioreg.h>
@


1.7
log
@Add host side of vmmci(4) to vmd(8).

It currently uses the device to request graceful shutdown of a VM on
"vmctl stop myvm" but will be extended for reboot and a other edge cases.

OK mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio.h,v 1.6 2016/10/12 06:56:54 mlarkin Exp $	*/
d147 1
@


1.6
log
@
Allow 4 vio(4) interfaces in each VM. Also fix a bad interrupt assignment that
caused IRQ9 to be shared between the second disk device and the vio(4)s,
which caused poor network performance.

ok reyk, stefan
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio.h,v 1.5 2016/09/02 17:08:28 stefan Exp $	*/
d34 3
d139 12
d172 3
@


1.5
log
@Process incoming host->guest packets asynchronously to running VCPU

This registers a handler with libevent that is called on incoming packets
for the guest. If they cannot be handled immediately (because the virtq is
full), make sure they are handled on VCPU exits.

ok mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio.h,v 1.4 2016/07/09 09:06:22 stefan Exp $	*/
d155 1
a155 1
int vionet_process_rx(void);
@


1.4
log
@Prepare vionet to be handled asynchronously to the VCPU thread

This splits the handling of received data into a separate function
that can later be called in parallel to the VCPU thread instead of
handling received packets on VCPU exits only.

It also makes virtq accesses in the rx path safe to run in parallel
to the VCPU thread: the last index into the 'avail' ring the driver
has notified to the host is kept track of. It also makes sure that
the host only writes back to the 'avail' ring instead of modifying
the whole receive virtq.

While there, describe what virtio_vq_info and virtio_io_cfg are used
for, as suggested by mlarkin@@

ok mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio.h,v 1.3 2015/12/03 08:42:11 reyk Exp $	*/
d106 3
d115 2
@


1.3
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio.h,v 1.2 2015/11/22 21:51:32 reyk Exp $	*/
d37 4
d52 6
d59 1
d61 2
d64 5
d70 5
d76 5
d82 6
d111 1
@


1.2
log
@Add $ Ids
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d75 1
a75 1
	
@


1.1
log
@
vmd(8) - virtual machine daemon.

There is still a lot to be done, and fixed, in these userland components
but I have received enough "it works, commit it" emails that it's time
to finish those things in tree.

discussed with many, tested by many.
@
text
@d1 2
@

