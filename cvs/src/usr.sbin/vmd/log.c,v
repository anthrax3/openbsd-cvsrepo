head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.2
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2017.03.21.12.06.56;	author bluhm;	state Exp;
branches;
next	1.7;
commitid	6uuBMurt3Uh42fgX;

1.7
date	2017.01.09.14.49.22;	author reyk;	state Exp;
branches;
next	1.6;
commitid	eA8b246voAapPTkX;

1.6
date	2016.11.24.21.39.45;	author reyk;	state Exp;
branches;
next	1.5;
commitid	zu1p1hwPWvnPCRaw;

1.5
date	2016.11.22.21.54.01;	author reyk;	state Exp;
branches;
next	1.4;
commitid	mzR5S0wg70tqM5HS;

1.4
date	2016.10.31.02.57.27;	author guenther;	state Exp;
branches;
next	1.3;
commitid	5GXHFf1a6Ld3dZlq;

1.3
date	2016.10.12.11.47.34;	author reyk;	state Exp;
branches;
next	1.2;
commitid	pP3dqGWqWznLVwSB;

1.2
date	2015.12.07.12.10.02;	author reyk;	state Exp;
branches;
next	1.1;
commitid	5kBP5d9eOgcLx1n2;

1.1
date	2015.11.23.13.04.49;	author reyk;	state Exp;
branches;
next	;
commitid	8LSTqui1EesFdS0T;


desc
@@


1.8
log
@From a syslog perspective it does not make sense to log fatal and
warn with the same severity.  Switch log_warn() to LOG_ERR and keep
fatal() at LOG_CRIT.
OK reyk@@ florian@@
@
text
@/*	$OpenBSD: log.c,v 1.7 2017/01/09 14:49:22 reyk Exp $	*/

/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <syslog.h>
#include <errno.h>
#include <time.h>

static int	 debug;
static int	 verbose;
const char	*log_procname;

void	log_init(int, int);
void	log_procinit(const char *);
void	log_setverbose(int);
int	log_getverbose(void);
void	log_warn(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	log_warnx(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	log_info(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	log_debug(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	logit(int, const char *, ...)
	    __attribute__((__format__ (printf, 2, 3)));
void	vlog(int, const char *, va_list)
	    __attribute__((__format__ (printf, 2, 0)));
__dead void fatal(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
__dead void fatalx(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));

void
log_init(int n_debug, int facility)
{
	extern char	*__progname;

	debug = n_debug;
	verbose = n_debug;
	log_procinit(__progname);

	if (!debug)
		openlog(__progname, LOG_PID | LOG_NDELAY, facility);

	tzset();
}

void
log_procinit(const char *procname)
{
	if (procname != NULL)
		log_procname = procname;
}

void
log_setverbose(int v)
{
	verbose = v;
}

int
log_getverbose(void)
{
	return (verbose);
}

void
logit(int pri, const char *fmt, ...)
{
	va_list	ap;

	va_start(ap, fmt);
	vlog(pri, fmt, ap);
	va_end(ap);
}

void
vlog(int pri, const char *fmt, va_list ap)
{
	char	*nfmt;
	int	 saved_errno = errno;

	if (debug) {
		/* best effort in out of mem situations */
		if (asprintf(&nfmt, "%s\n", fmt) == -1) {
			vfprintf(stderr, fmt, ap);
			fprintf(stderr, "\n");
		} else {
			vfprintf(stderr, nfmt, ap);
			free(nfmt);
		}
		fflush(stderr);
	} else
		vsyslog(pri, fmt, ap);

	errno = saved_errno;
}

void
log_warn(const char *emsg, ...)
{
	char		*nfmt;
	va_list		 ap;
	int		 saved_errno = errno;

	/* best effort to even work in out of memory situations */
	if (emsg == NULL)
		logit(LOG_ERR, "%s", strerror(saved_errno));
	else {
		va_start(ap, emsg);

		if (asprintf(&nfmt, "%s: %s", emsg,
		    strerror(saved_errno)) == -1) {
			/* we tried it... */
			vlog(LOG_ERR, emsg, ap);
			logit(LOG_ERR, "%s", strerror(saved_errno));
		} else {
			vlog(LOG_ERR, nfmt, ap);
			free(nfmt);
		}
		va_end(ap);
	}

	errno = saved_errno;
}

void
log_warnx(const char *emsg, ...)
{
	va_list	 ap;

	va_start(ap, emsg);
	vlog(LOG_ERR, emsg, ap);
	va_end(ap);
}

void
log_info(const char *emsg, ...)
{
	va_list	 ap;

	va_start(ap, emsg);
	vlog(LOG_INFO, emsg, ap);
	va_end(ap);
}

void
log_debug(const char *emsg, ...)
{
	va_list	 ap;

	if (verbose > 1) {
		va_start(ap, emsg);
		vlog(LOG_DEBUG, emsg, ap);
		va_end(ap);
	}
}

static void
vfatalc(int code, const char *emsg, va_list ap)
{
	static char	s[BUFSIZ];
	const char	*sep;

	if (emsg != NULL) {
		(void)vsnprintf(s, sizeof(s), emsg, ap);
		sep = ": ";
	} else {
		s[0] = '\0';
		sep = "";
	}
	if (code)
		logit(LOG_CRIT, "%s: %s%s%s",
		    log_procname, s, sep, strerror(code));
	else
		logit(LOG_CRIT, "%s%s%s", log_procname, sep, s);
}

void
fatal(const char *emsg, ...)
{
	va_list	ap;

	va_start(ap, emsg);
	vfatalc(errno, emsg, ap);
	va_end(ap);
	exit(1);
}

void
fatalx(const char *emsg, ...)
{
	va_list	ap;

	va_start(ap, emsg);
	vfatalc(0, emsg, ap);
	va_end(ap);
	exit(1);
}
@


1.7
log
@Stop accessing verbose and debug variables from log.c directly.

This replaces log_verbose() and "extern int verbose" with the two functions
log_setverbose() and log_getverbose().

Pointed out by benno@@
OK krw@@ eric@@ gilles@@ (OK gilles@@ for the snmpd bits as well)
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.33 2017/01/08 20:31:03 reyk Exp $	*/
d127 1
a127 1
		logit(LOG_CRIT, "%s", strerror(saved_errno));
d134 2
a135 2
			vlog(LOG_CRIT, emsg, ap);
			logit(LOG_CRIT, "%s", strerror(saved_errno));
d137 1
a137 1
			vlog(LOG_CRIT, nfmt, ap);
d152 1
a152 1
	vlog(LOG_CRIT, emsg, ap);
@


1.6
log
@Restore the errno in vlog() as well to have the same "safe errno"
effect in log_debug(), log_warn*() and all the other logging
functions.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.5 2016/11/22 21:54:01 reyk Exp $	*/
d27 2
a28 2
int		 debug;
int		 verbose;
d33 2
a34 1
void	log_verbose(int);
d75 1
a75 1
log_verbose(int v)
d78 6
@


1.5
log
@Restore previous errno after log_warn*() to make sure that it never
alters it.

OK mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.4 2016/10/31 02:57:27 guenther Exp $	*/
d93 1
d107 2
a109 1

@


1.4
log
@Pass the errno value to vfatal(), renaming it to vfatalc() to match,
intead of using errno as an implicit argument

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.3 2016/10/12 11:47:34 reyk Exp $	*/
d133 2
@


1.3
log
@For correctness, always save errno when doing additional actions
before printing it.

OK rzalamena@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.2 2015/12/07 12:10:02 reyk Exp $	*/
d168 1
a168 1
vfatal(const char *emsg, va_list ap)
a171 1
	int		 saved_errno = errno;
d180 1
a180 1
	if (saved_errno)
d182 1
a182 1
		    log_procname, s, sep, strerror(saved_errno));
d193 1
a193 1
	vfatal(emsg, ap);
a202 1
	errno = 0;
d204 1
a204 1
	vfatal(emsg, ap);
@


1.2
log
@Skip the "fatal in" message prefix when aborting with fatal() - when
the daemon died with a message, it is obvious that a fatal condition
happened.  More important is a useful, but short, message that
provides enough information to fix the problem.

OK benno@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.1 2015/11/23 13:04:49 reyk Exp $	*/
d112 3
a114 2
	char	*nfmt;
	va_list	 ap;
d118 1
a118 1
		logit(LOG_CRIT, "%s", strerror(errno));
d122 2
a123 1
		if (asprintf(&nfmt, "%s: %s", emsg, strerror(errno)) == -1) {
d126 1
a126 1
			logit(LOG_CRIT, "%s", strerror(errno));
d172 1
d181 1
a181 1
	if (errno)
d183 1
a183 1
		    log_procname, s, sep, strerror(errno));
@


1.1
log
@Add support for logging to stderr or syslog, and to run vmd in
foreground with -d.

OK mlarkin@@ jung@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.30 2015/11/22 13:27:13 reyk Exp $	*/
d179 1
a179 1
		logit(LOG_CRIT, "fatal in %s: %s%s%s",
d182 1
a182 1
		logit(LOG_CRIT, "fatal in %s%s%s", log_procname, sep, s);
@

