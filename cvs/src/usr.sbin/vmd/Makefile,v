head	1.16;
access;
symbols
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.13.0.4
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7;
locks; strict;
comment	@# @;


1.16
date	2017.07.03.22.21.47;	author espie;	state Exp;
branches;
next	1.15;
commitid	SoYT2zMcub5xTPqC;

1.15
date	2017.05.08.09.08.40;	author reyk;	state Exp;
branches;
next	1.14;
commitid	oVx15xEUTrD3JWhh;

1.14
date	2017.04.19.15.38.32;	author reyk;	state Exp;
branches;
next	1.13;
commitid	Wp87uvjcKIIYK6nL;

1.13
date	2017.03.01.18.00.50;	author reyk;	state Exp;
branches;
next	1.12;
commitid	cyTuz5D4aJNa7GE5;

1.12
date	2016.11.26.20.03.42;	author reyk;	state Exp;
branches;
next	1.11;
commitid	GrCSblbcTEkTQcOY;

1.11
date	2016.11.24.07.58.55;	author reyk;	state Exp;
branches;
next	1.10;
commitid	vTTzvT7jwtD1X8ZA;

1.10
date	2016.10.26.05.26.36;	author mlarkin;	state Exp;
branches;
next	1.9;
commitid	1sM4SQUlhgJwAn6Q;

1.9
date	2016.10.04.17.17.30;	author reyk;	state Exp;
branches;
next	1.8;
commitid	yb7Y2lNmLG5i2hzO;

1.8
date	2016.09.01.15.38.03;	author mlarkin;	state Exp;
branches;
next	1.7;
commitid	aqbOOJ7im8rhxNLl;

1.7
date	2015.12.03.16.11.32;	author reyk;	state Exp;
branches;
next	1.6;
commitid	G1u4CGxMrb6r5d6R;

1.6
date	2015.12.02.22.19.11;	author reyk;	state Exp;
branches;
next	1.5;
commitid	7ra6VeOJoUb1NQ70;

1.5
date	2015.12.02.09.14.25;	author reyk;	state Exp;
branches;
next	1.4;
commitid	vOctzllSJTLtnazM;

1.4
date	2015.11.23.23.41.49;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	4F27F6px3IwfY7S9;

1.3
date	2015.11.23.13.04.49;	author reyk;	state Exp;
branches;
next	1.2;
commitid	8LSTqui1EesFdS0T;

1.2
date	2015.11.23.02.44.19;	author deraadt;	state Exp;
branches;
next	1.1;
commitid	HLzFdwvIfobeWJP3;

1.1
date	2015.11.22.20.20.32;	author mlarkin;	state Exp;
branches;
next	;
commitid	O5Ay1ZamHQn9lamK;


desc
@@


1.16
log
@no need to generate y.tab.h if nothing uses it, set YFLAGS to nothing
instead of CLEANFILES += y.tab.h

okay millert@@
@
text
@#	$OpenBSD: Makefile,v 1.15 2017/05/08 09:08:40 reyk Exp $

.if ${MACHINE} == "amd64" || ${MACHINE} == "i386"

PROG=		vmd
SRCS=		vmd.c control.c log.c priv.c proc.c config.c vmm.c
SRCS+=		vm.c loadfile_elf.c pci.c virtio.c i8259.c mc146818.c
SRCS+=		ns8250.c i8253.c vmboot.c ufs.c disklabel.c dhcp.c packet.c
SRCS+=		parse.y atomicio.c

CFLAGS+=	-Wall -I${.CURDIR}
CFLAGS+=	-Wstrict-prototypes -Wmissing-prototypes
CFLAGS+=	-Wmissing-declarations
CFLAGS+=	-Wshadow -Wpointer-arith -Wcast-qual
CFLAGS+=	-Wsign-compare

LDADD+=		-lutil -lpthread -levent
DPADD+=		${LIBUTIL} ${LIBEVENT}

YFLAGS=

.else

NOPROG= yes

.endif

MAN=		vmd.8 vm.conf.5

.include <bsd.prog.mk>
@


1.15
log
@Adds functions to read and write state of devices in vmd.

This is required for implementing vmctl send and vmctl receive.  vmctl
send / receive are two new options that will support snapshotting VMs
and migrating VMs from one host to another. The atomicio files are
copied from usr.bin/ssh.

Patch from Pratik Vyas; this project was undertaken at San Jose State
University along with his three teammates, Ashwin, Harshada and Siri
with mlarkin@@ as the advisor.

OK mlarkin@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2017/04/19 15:38:32 reyk Exp $
d20 1
a20 1
CLEANFILES+=	y.tab.h
@


1.14
log
@Add support for dynamic "NAT" interfaces (-L/local interface).

When a local interface is configured, vmd configures a /31 address on
the tap(4) interface of the host and provides another IP in the same
subnet via DHCP (BOOTP) to the VM.  vmd runs an internal BOOTP server
that replies with IP, gateway, and DNS addresses to the VM.  The
built-in server only ever responds to the VM on the inside and cannot
leak its DHCP responses to the outside.

Thanks to Uwe Werler, Josh Grosse, and some others for testing!

OK deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2017/03/01 18:00:50 reyk Exp $
d9 1
a9 1
SRCS+=		parse.y
@


1.13
log
@Split vmm.c into two files: vm.c for the VM child, vmm.c for the parent

As discussed with mlarkin@@, it makes it easier to maintain the file.

OK mlarkin@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2016/11/26 20:03:42 reyk Exp $
d8 1
a8 1
SRCS+=		ns8250.c i8253.c vmboot.c ufs.c disklabel.c
@


1.12
log
@Implement basic support for boot.conf(8) on the disk image.

Like the real boot loader, load and parse hd0a:/etc/boot.conf from the
first disk and fall back to /bsd.  Not all boot loader options are
supported, but it at least does set device, set image, and boot -acds
(eg. for booting single-user).

For example, it can now boot install60.fs that includes a boot.conf
with "set image /6.0/amd64/bsd.rd":
	vmctl start install -c -d install60.fs -d OpenBSD.img

This pseudo-bootloader is only needed without BIOS and could
potentially be replaced in the future.

OK mlarkin@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2016/11/24 07:58:55 reyk Exp $
d6 3
a8 3
SRCS=		vmm.c loadfile_elf.c pci.c virtio.c i8259.c mc146818.c
SRCS+=		vmd.c control.c log.c priv.c proc.c config.c ns8250.c i8253.c
SRCS+=		vmboot.c ufs.c disklabel.c
@


1.11
log
@Add support for booting the kernel from the disk image.

This make the kernel/-k argument optional and, if not specified, tries
to find the /bsd kernel in the primary hd0a partition of the first
disk image itself.  It doesn't support hd0a:/etc/boot.conf yet, and it
is no BIOS or full boot loader, but it makes booting and handling of
VMs a bit easier - booting an external kernel is still supported.

The UFS file system code ufs.c is directly from libsa which is also
used by the real boot loader.  The code compiles with a few signedness
warning which will be fixed separately.

OK mlarkin@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2016/10/26 05:26:36 mlarkin Exp $
d8 1
a8 1
SRCS+=		vmboot.c ufs.c
@


1.10
log
@
vmd(8)/vmctl(8) for i386. Some ugliness in #ifdef __i386__ areas will be
fixed in tree, but the changes required were pretty minimal.

Note that i386 hosts are still presently limited to running i386 guests.

ok deraadt, stefan, jca
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2016/10/04 17:17:30 reyk Exp $
d8 1
@


1.9
log
@Add a new "priv" process that is responsible for ioctls and restricted
operations that aren't allowed under pledge.  This is a companion to
the "vmd" process that runs as root but with pledge.

With the "priv" process, each new tap(4) interface now gets a
description to indicate the vm, eg. "vm1-if0-myvm".  For network
configuration will be done by vmd/priv later.

OK mlarkin@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2016/09/01 15:38:03 mlarkin Exp $
d3 1
a3 1
.if ${MACHINE} == "amd64"
@


1.8
log
@
forgot during previous commit, thanks stefan@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2015/12/03 16:11:32 reyk Exp $
d7 1
a7 1
SRCS+=		vmd.c control.c log.c proc.c config.c ns8250.c i8253.c
@


1.7
log
@Add support for an optional vm.conf(5) file in vmd.  This will replace
vmm.conf(5) in vmmctl.  For a short time, both vmd and vmmctl will
support a configuration file, but vmmctl will be changed to send
"load" requests to vmd instead of loading and parsing the file
directly.
@
text
@d1 1
a1 1
#	$OpenBSD$
d6 2
a7 2
SRCS=		vmm.c loadfile_elf.c pci.c virtio.c
SRCS+=		vmd.c control.c log.c proc.c config.c
@


1.6
log
@Split the fully privileged parent into two processes "parent" and
"vmm" with reduced privileges:
- the "parent" opens fds (disks, ifs, etc.) but runs as root but pledged as
  "stdio rpath wpath proc tty sendfd".
- the "vmm" process handles the creation and supervision of vm processes,
  and the primary communication with the vmm(4) subsystem.  It runs as _vmd
  in the chroot but does not use pledge, as the vmm ioctls are not allowed
  by any pledge model yet.
With this change, vmd starts to track the configuration state of VMs
in vmd and will allow other things later (like terminating a vm by
name, moving the configuration parser to vmd, ...).  More incremental
changes will follow.
@
text
@d1 1
d5 15
a19 10
PROG=	vmd
SRCS=	vmm.c loadfile_elf.c pci.c virtio.c
SRCS+=	vmd.c control.c log.c proc.c config.c
CFLAGS+= -Wall -I${.CURDIR}
CFLAGS+= -Wstrict-prototypes -Wmissing-prototypes
CFLAGS+= -Wmissing-declarations
CFLAGS+= -Wshadow -Wpointer-arith -Wcast-qual
CFLAGS+= -Wsign-compare
LDADD+=	-lutil -lpthread -levent
DPADD+= ${LIBUTIL} ${LIBEVENT}
d27 1
a27 1
MAN= vmd.8
@


1.5
log
@Start tweaking vmd's privsep and daemon model by splitting the main
process into multiple parts and adopting the "proc.c"-style from other
daemons.  This allows to further reduce the privileges, to give better
pledge(2), and to add some upcoming changes.

"please do" mlarkin@@, deraadt@@
@
text
@d6 1
a6 1
SRCS+=	vmd.c control.c log.c proc.c
@


1.4
log
@Do not need YFLAGS=
@
text
@d5 2
a6 1
SRCS=	vmd.c loadfile_elf.c pci.c virtio.c log.c
d12 2
a13 2
LDADD+=	-lutil -lpthread
DPADD+= ${LIBUTIL}
@


1.3
log
@Add support for logging to stderr or syslog, and to run vmd in
foreground with -d.

OK mlarkin@@ jung@@
@
text
@a10 1
YFLAGS=
@


1.2
log
@install manpages global, since two architecture (will) use them.
@
text
@d5 1
a5 1
SRCS=	vmd.c loadfile_elf.c pci.c virtio.c
@


1.1
log
@
vmd(8) - virtual machine daemon.

There is still a lot to be done, and fixed, in these userland components
but I have received enough "it works, commit it" emails that it's time
to finish those things in tree.

discussed with many, tested by many.
@
text
@a21 1
MANSUBDIR=${MACHINE}
@

