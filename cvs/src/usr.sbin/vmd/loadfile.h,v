head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2017.03.25.16.28.25;	author reyk;	state Exp;
branches;
next	1.7;
commitid	s82EA2LBuZtftmLN;

1.7
date	2016.11.26.20.03.42;	author reyk;	state Exp;
branches;
next	1.6;
commitid	GrCSblbcTEkTQcOY;

1.6
date	2016.11.24.07.58.55;	author reyk;	state Exp;
branches;
next	1.5;
commitid	vTTzvT7jwtD1X8ZA;

1.5
date	2016.09.01.16.04.47;	author stefan;	state Exp;
branches;
next	1.4;
commitid	xgCRvP7hLEqkM3Qf;

1.4
date	2016.04.05.09.33.05;	author mlarkin;	state Exp;
branches;
next	1.3;
commitid	klY9sBeThwZpzkLp;

1.3
date	2016.03.13.13.11.47;	author stefan;	state Exp;
branches;
next	1.2;
commitid	tNFHzbetplEWT4Tg;

1.2
date	2015.12.17.09.29.28;	author mlarkin;	state Exp;
branches;
next	1.1;
commitid	8J3NuBrhKPtN9MxY;

1.1
date	2015.11.22.20.20.32;	author mlarkin;	state Exp;
branches;
next	;
commitid	O5Ay1ZamHQn9lamK;


desc
@@


1.8
log
@Boot using BIOS from /etc/firmware/vmm-bios by default.

Instead of using the internal "vmboot", VMs will now be booted using
the external BIOS firmware in /etc/firmware/vmm-bios (which is subject
to a LGPLv3 license).  Direct booting of OpenBSD kernels or
non-default BIOS images is still supported for now using the -b/boot
option that is replacing the -k/kernel option.

As requested by Theo, vmd(8) fails if neither the default BIOS is
found nor a kernel has been specified in the VM configuration.  The
"vmm" BIOS has to be installed using fw_update(1), which will be done
automatically in most cases where the OpenBSD can fetch it after
install/upgrade.

OK mlarkin@@
@
text
@/*	$NetBSD: loadfile.h,v 1.1 1999/04/28 09:08:50 christos Exp $	 */
/*	$OpenBSD: loadfile.h,v 1.7 2016/11/26 20:03:42 reyk Exp $	 */

/*-
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Christos Zoulas.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Array indices in the u_long position array
 */
#define MARK_START	0
#define MARK_ENTRY	1
#define	MARK_NSYM	2
#define MARK_SYM	3
#define	MARK_END	4
#define	MARK_RANDOM	5
#define	MARK_ERANDOM	6
#define	MARK_MAX	7

/*
 * Bit flags for sections to load
 */
#define	LOAD_TEXT	0x0001
#define	LOAD_TEXTA	0x0002
#define	LOAD_DATA	0x0004
#define	LOAD_BSS	0x0008
#define	LOAD_SYM	0x0010
#define	LOAD_HDR	0x0020
#define	LOAD_RANDOM	0x0040
#define LOAD_ALL	0x007f

#define	COUNT_TEXT	0x0100
#define	COUNT_TEXTA	0x0200
#define	COUNT_DATA	0x0400
#define	COUNT_BSS	0x0800
#define	COUNT_SYM	0x1000
#define	COUNT_HDR	0x2000
#define	COUNT_RANDOM	0x4000
#define COUNT_ALL	0x7f00

#define LOWMEM_KB 636

#define BOOTARGS_PAGE 0x2000
#define STACK_PAGE 0xF000
#define GDT_PAGE 0x10000
#define PML4_PAGE 0x11000
#define PML3_PAGE 0x12000
#define PML2_PAGE 0x13000
#define NPTE_PG (PAGE_SIZE / sizeof(pt_entry_t))

int loadfile_elf(FILE *, struct vm_create_params *,
    struct vcpu_reg_state *, uint32_t, uint32_t);

size_t mread(FILE *, paddr_t, size_t);

#include <machine/loadfile_machdep.h>
@


1.7
log
@Implement basic support for boot.conf(8) on the disk image.

Like the real boot loader, load and parse hd0a:/etc/boot.conf from the
first disk and fall back to /bsd.  Not all boot loader options are
supported, but it at least does set device, set image, and boot -acds
(eg. for booting single-user).

For example, it can now boot install60.fs that includes a boot.conf
with "set image /6.0/amd64/bsd.rd":
	vmctl start install -c -d install60.fs -d OpenBSD.img

This pseudo-bootloader is only needed without BIOS and could
potentially be replaced in the future.

OK mlarkin@@
@
text
@d2 1
a2 1
/*	$OpenBSD: loadfile.h,v 1.6 2016/11/24 07:58:55 reyk Exp $	 */
d76 1
a76 1
int loadelf_main(FILE *, struct vm_create_params *,
d78 2
@


1.6
log
@Add support for booting the kernel from the disk image.

This make the kernel/-k argument optional and, if not specified, tries
to find the /bsd kernel in the primary hd0a partition of the first
disk image itself.  It doesn't support hd0a:/etc/boot.conf yet, and it
is no BIOS or full boot loader, but it makes booting and handling of
VMs a bit easier - booting an external kernel is still supported.

The UFS file system code ufs.c is directly from libsa which is also
used by the real boot loader.  The code compiles with a few signedness
warning which will be fixed separately.

OK mlarkin@@
@
text
@d2 1
a2 1
/*	$OpenBSD: loadfile.h,v 1.5 2016/09/01 16:04:47 stefan Exp $	 */
d77 1
a77 1
    struct vcpu_reg_state *);
@


1.5
log
@Make vcpu_reset_regs use new writeregs code

Makes reset code a little simpler. ok mlarkin@@
@
text
@d2 1
a2 1
/*	$OpenBSD: loadfile.h,v 1.4 2016/04/05 09:33:05 mlarkin Exp $	 */
d76 1
a76 1
int loadelf_main(int, struct vm_create_params *,
@


1.4
log
@
Support processors without unrestricted guest capability.

ok stefan
@
text
@d2 1
a2 1
/*	$OpenBSD: loadfile.h,v 1.3 2016/03/13 13:11:47 stefan Exp $	 */
d77 1
a77 1
    struct vcpu_init_state *);
@


1.3
log
@Introduce memory ranges to support VMs with >= 4G RAM

Kernel bits:
- When creating a VM, a list of memory ranges has to be specified,
  similar to the BIOS memory map. This is necessary for VMs with
  RAM sizes approaching 4G because we'll need PCI MMIO space in
  the higher parts of the 32 bit address space.

vmctl and vmd bits:
- Construct appropriate memory ranges to create a VM with a given
  RAM size
- Construct a corresponding BIOS memory map from the memory ranges
  and update the boot params page accordingly.
- Make sure that all variables that represent guest physical addresses
  match the address width of the target CPU instead of using uint32_t.
- Fix some integer promotion glitches that actually restricted VM
  RAM size to 2G.

This changes the VM create ioctl interface, so update your kernel,
vmd, and vmctl.

ok mlarkin@@
@
text
@d2 1
a2 1
/*	$OpenBSD: loadfile.h,v 1.2 2015/12/17 09:29:28 mlarkin Exp $	 */
d67 8
@


1.2
log
@
Move vcpu register state init to vmd. Allows vmd bootloader to make the
decision as to how the vcpu should be set up for initial start and
reset. Also removes some hardcoded register constants from vmm(4).

ok jsing@@, mpi@@
@
text
@d2 1
a2 1
/*	$OpenBSD: loadfile.h,v 1.1 2015/11/22 20:20:32 mlarkin Exp $	 */
d66 4
a69 1
int loadelf_main(int, int, int, struct vcpu_init_state *);
@


1.1
log
@
vmd(8) - virtual machine daemon.

There is still a lot to be done, and fixed, in these userland components
but I have received enough "it works, commit it" emails that it's time
to finish those things in tree.

discussed with many, tested by many.
@
text
@d2 1
a2 1
/*	$OpenBSD: loadfile.h,v 1.4 2015/05/19 20:39:12 miod Exp $	 */
d66 1
a66 1
int loadelf_main(int, int, int);
@

