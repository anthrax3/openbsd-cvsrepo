head	1.21;
access;
symbols
	OPENBSD_6_1:1.21.0.12
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.8
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.4
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.6
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.20.0.10
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.8
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.20.0.4
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.2
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.19.0.2
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.4
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.8.0.8
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.6.0.2
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.3.0.6
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.4
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.21
date	2015.01.21.21.50.33;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	3o2AkhiRPQXvG94X;

1.20
date	2012.09.18.10.11.53;	author henning;	state Exp;
branches;
next	1.19;

1.19
date	2012.07.07.16.24.32;	author henning;	state Exp;
branches;
next	1.18;

1.18
date	2012.04.30.13.53.01;	author haesbaert;	state Exp;
branches;
next	1.17;

1.17
date	2012.03.06.12.50.20;	author mikeb;	state Exp;
branches;
next	1.16;

1.16
date	2011.06.22.08.44.02;	author sthen;	state Exp;
branches;
next	1.15;

1.15
date	2011.04.28.00.17.28;	author mikeb;	state Exp;
branches;
next	1.14;

1.14
date	2011.03.25.14.51.31;	author claudio;	state Exp;
branches;
next	1.13;

1.13
date	2010.01.13.01.07.34;	author claudio;	state Exp;
branches;
next	1.12;

1.12
date	2010.01.12.03.20.51;	author mcbride;	state Exp;
branches;
next	1.11;

1.11
date	2009.11.22.23.30.05;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2009.11.21.13.59.31;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2009.09.01.13.46.14;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.13.07.25.26;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2008.02.26.18.52.53;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2007.08.01.09.31.41;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2006.12.01.07.31.21;	author camield;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.01.07.25.41;	author camield;	state Exp;
branches;
next	1.3;

1.3
date	2005.06.07.14.12.07;	author camield;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.07.04.37.32;	author camield;	state Exp;
branches;
next	1.1;

1.1
date	2005.05.26.04.38.35;	author camield;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Include <netinet/in.h> before <net/pfvar.h>.  In a future change when
ports is ready, <net/pfvar.h> will stop including a pile of balony.
@
text
@/*	$OpenBSD: filter.c,v 1.20 2012/09/18 10:11:53 henning Exp $ */

/*
 * Copyright (c) 2004, 2005 Camiel Dobbelaar, <cd@@sentia.nl>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/socket.h>

#include <netinet/in.h>
#include <netinet/tcp.h>
#include <arpa/inet.h>
#include <net/if.h>
#include <net/pfvar.h>

#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include "filter.h"

/* From netinet/in.h, but only _KERNEL_ gets them. */
#define satosin(sa)	((struct sockaddr_in *)(sa))
#define satosin6(sa)	((struct sockaddr_in6 *)(sa))

int add_addr(struct sockaddr *, struct pf_pool *);
int prepare_rule(u_int32_t, struct sockaddr *, struct sockaddr *,
    u_int16_t);

static struct pfioc_rule	pfr;
static struct pfioc_trans	pft;
static struct pfioc_trans_e	pfte;
static int dev, rule_log;
static char *qname, *tagname;

int
add_addr(struct sockaddr *addr, struct pf_pool *pfp)
{
	if (addr->sa_family == AF_INET) {
		memcpy(&pfp->addr.v.a.addr.v4,
		    &satosin(addr)->sin_addr.s_addr, 4);
		memset(&pfp->addr.v.a.mask.addr8, 255, 4);
	} else {
		memcpy(&pfp->addr.v.a.addr.v6,
		    &satosin6(addr)->sin6_addr.s6_addr, 16);
		memset(&pfp->addr.v.a.mask.addr8, 255, 16);
	}
	pfp->addr.type = PF_ADDR_ADDRMASK;
	return (0);
}

int
add_nat(u_int32_t id, struct sockaddr *src, int s_rd, struct sockaddr *dst,
    u_int16_t d_port, struct sockaddr *nat, u_int16_t nat_range_low,
    u_int16_t nat_range_high)
{
	if (!src || !dst || !d_port || !nat || !nat_range_low ||
	    !nat_range_high || (src->sa_family != nat->sa_family)) {
		errno = EINVAL;
		return (-1);
	}

	if (prepare_rule(id, src, dst, d_port) == -1)
		return (-1);

	if (add_addr(nat, &pfr.rule.nat) == -1)
		return (-1);

	pfr.rule.direction = PF_OUT;
	pfr.rule.onrdomain = s_rd;
	pfr.rule.rtableid = -1;
	pfr.rule.nat.proxy_port[0] = nat_range_low;
	pfr.rule.nat.proxy_port[1] = nat_range_high;
	if (ioctl(dev, DIOCADDRULE, &pfr) == -1)
		return (-1);

	return (0);
}

int
add_rdr(u_int32_t id, struct sockaddr *src, int s_rd, struct sockaddr *dst,
    u_int16_t d_port, struct sockaddr *rdr, u_int16_t rdr_port, int d_rd)
{
	if (!src || !dst || !d_port || !rdr || !rdr_port ||
	    (src->sa_family != rdr->sa_family)) {
		errno = EINVAL;
		return (-1);
	}

	if (prepare_rule(id, src, dst, d_port) == -1)
		return (-1);

	if (add_addr(rdr, &pfr.rule.rdr) == -1)
		return (-1);

	pfr.rule.direction = PF_IN;
	pfr.rule.onrdomain = s_rd;
	pfr.rule.rtableid = d_rd;
	pfr.rule.rdr.proxy_port[0] = rdr_port;
	if (ioctl(dev, DIOCADDRULE, &pfr) == -1)
		return (-1);

	return (0);
}

int
do_commit(void)
{
	if (ioctl(dev, DIOCXCOMMIT, &pft) == -1)
		return (-1);

	return (0);
}

int
do_rollback(void)
{
	if (ioctl(dev, DIOCXROLLBACK, &pft) == -1)
		return (-1);

	return (0);
}

void
init_filter(char *opt_qname, char *opt_tagname, int opt_verbose)
{
	struct pf_status status;

	qname = opt_qname;
	tagname = opt_tagname;

	if (opt_verbose == 1)
		rule_log = PF_LOG;
	else if (opt_verbose == 2)
		rule_log = PF_LOG_ALL;

	dev = open("/dev/pf", O_RDWR);
	if (dev == -1)
		err(1, "open /dev/pf");
	if (ioctl(dev, DIOCGETSTATUS, &status) == -1)
		err(1, "DIOCGETSTATUS");
	if (!status.running)
		errx(1, "pf is disabled");
}

int
prepare_commit(u_int32_t id)
{
	char an[PF_ANCHOR_NAME_SIZE];

	memset(&pft, 0, sizeof pft);
	pft.size = 1;
	pft.esize = sizeof pfte;
	pft.array = &pfte;

	snprintf(an, PF_ANCHOR_NAME_SIZE, "%s/%d.%d", FTP_PROXY_ANCHOR,
	    getpid(), id);
	memset(&pfte, 0, sizeof pfte);
	strlcpy(pfte.anchor, an, PF_ANCHOR_NAME_SIZE);
	pfte.type = PF_TRANS_RULESET;

	if (ioctl(dev, DIOCXBEGIN, &pft) == -1)
		return (-1);

	return (0);
}

int
prepare_rule(u_int32_t id, struct sockaddr *src,
    struct sockaddr *dst, u_int16_t d_port)
{
	char an[PF_ANCHOR_NAME_SIZE];

	if ((src->sa_family != AF_INET && src->sa_family != AF_INET6) ||
	    (src->sa_family != dst->sa_family)) {
		errno = EPROTONOSUPPORT;
		return (-1);
	}

	memset(&pfr, 0, sizeof pfr);
	snprintf(an, PF_ANCHOR_NAME_SIZE, "%s/%d.%d", FTP_PROXY_ANCHOR,
	    getpid(), id);
	strlcpy(pfr.anchor, an, PF_ANCHOR_NAME_SIZE);

	pfr.ticket = pfte.ticket;

	/* Generic for all rule types. */
	pfr.rule.af = src->sa_family;
	pfr.rule.proto = IPPROTO_TCP;
	pfr.rule.src.addr.type = PF_ADDR_ADDRMASK;
	pfr.rule.dst.addr.type = PF_ADDR_ADDRMASK;
	pfr.rule.nat.addr.type = PF_ADDR_NONE;
	pfr.rule.rdr.addr.type = PF_ADDR_NONE;

	if (src->sa_family == AF_INET) {
		memcpy(&pfr.rule.src.addr.v.a.addr.v4,
		    &satosin(src)->sin_addr.s_addr, 4);
		memset(&pfr.rule.src.addr.v.a.mask.addr8, 255, 4);
		memcpy(&pfr.rule.dst.addr.v.a.addr.v4,
		    &satosin(dst)->sin_addr.s_addr, 4);
		memset(&pfr.rule.dst.addr.v.a.mask.addr8, 255, 4);
	} else {
		memcpy(&pfr.rule.src.addr.v.a.addr.v6,
		    &satosin6(src)->sin6_addr.s6_addr, 16);
		memset(&pfr.rule.src.addr.v.a.mask.addr8, 255, 16);
		memcpy(&pfr.rule.dst.addr.v.a.addr.v6,
		    &satosin6(dst)->sin6_addr.s6_addr, 16);
		memset(&pfr.rule.dst.addr.v.a.mask.addr8, 255, 16);
	}
	pfr.rule.dst.port_op = PF_OP_EQ;
	pfr.rule.dst.port[0] = htons(d_port);

	/*
	 * pass [quick] [log] inet[6] proto tcp \
	 *     from $src to $dst port = $d_port flags S/SA keep state
	 *     (max 1) [queue qname] [tag tagname]
	 */
	if (tagname != NULL)
		pfr.rule.action = PF_MATCH;
	else
		pfr.rule.action = PF_PASS;
	pfr.rule.quick = 1;
	pfr.rule.log = rule_log;
	pfr.rule.keep_state = 1;
	pfr.rule.flags = TH_SYN;
	pfr.rule.flagset = (TH_SYN|TH_ACK);
	pfr.rule.max_states = 1;
	if (qname != NULL)
		strlcpy(pfr.rule.qname, qname, sizeof pfr.rule.qname);
	if (tagname != NULL) {
		pfr.rule.quick = 0;
		strlcpy(pfr.rule.tagname, tagname,
                               sizeof pfr.rule.tagname);
	}

	return (0);
}
@


1.20
log
@prio 0 is valid, therefore, I chose an "impossible" value for prio meaning
"not set" and used a PF_PRIO_NOTSET define for it. now that means that
everything that creates a struct pf_rule doesn't get away with bzero'ing it,
which turned out to be not so nice. so get rid of PF_PRIO_NOTSET, instead,
make a rule+state flag PFSTATE_SETPRIO which indicates wether the prio
should be set. ok benno claudio mikeb
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.19 2012/07/07 16:24:32 henning Exp $ */
a22 2
#include <net/if.h>
#include <net/pfvar.h>
d26 2
@


1.19
log
@rename prio in struct pf_rule and related structs to set_prio so it is
utterly clear this is not a filter criteria but a packet modification thing.
also preparation for upcoming changes, including one to unscrew this mess
(I should not have to touch half the tree for this - ifixitlater)
not user visible, ok gcc
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.17 2012/03/06 12:50:20 mikeb Exp $ */
a209 1
	pfr.rule.set_prio[0] = pfr.rule.set_prio[1] = PF_PRIO_NOTSET;
@


1.18
log
@Check for nat_range_high before creating the PF nat rule.

From Lawrence Teo.

ok camield, myself, mikeb.
@
text
@d210 1
a210 1
	pfr.rule.prio[0] = pfr.rule.prio[1] = PF_PRIO_NOTSET;
@


1.17
log
@catch up with "on rdomain" changes;  ok claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.16 2011/06/22 08:44:02 sthen Exp $ */
d74 1
a74 1
	    (src->sa_family != nat->sa_family)) {
@


1.16
log
@fix whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.15 2011/04/28 00:17:28 mikeb Exp $ */
d86 1
a86 1
	/* XXX limit the source routing domain */
d113 1
a113 1
	/* XXX limit the source routing domain */
d210 1
@


1.15
log
@switch ftp-proxy over to divert-to instead of rdr-to.  this avoids
an expensive state lookup (via natlook ioctl) and shrinks the code.
tested by me and sthen, ok reyk sthen
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.14 2011/03/25 14:51:31 claudio Exp $ */
d136 1
a136 1
	
d153 1
a153 1
	dev = open("/dev/pf", O_RDWR);	
d183 1
a183 1
	
d192 1
a192 1
	    	errno = EPROTONOSUPPORT;
@


1.14
log
@Use the rdomain information returned by DIOCNATLOOK to install the
nat-to and rdr-to rules with correct rtable rule attributes. This
allows to use ftp-proxy to proxy accross rdomains.
Tested and OK phessler@@, OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.13 2010/01/13 01:07:34 claudio Exp $ */
a44 4
int server_lookup4(struct sockaddr_in *, struct sockaddr_in *,
    struct sockaddr_in *, int *);
int server_lookup6(struct sockaddr_in6 *, struct sockaddr_in6 *,
    struct sockaddr_in6 *, int *);
a250 76

	return (0);
}

int
server_lookup(struct sockaddr *client, struct sockaddr *proxy,
    struct sockaddr *server, int *cdomain)
{
	if (client->sa_family == AF_INET)
		return (server_lookup4(satosin(client), satosin(proxy),
		    satosin(server), cdomain));
	
	if (client->sa_family == AF_INET6)
		return (server_lookup6(satosin6(client), satosin6(proxy),
		    satosin6(server), cdomain));

	errno = EPROTONOSUPPORT;
	return (-1);
}

int
server_lookup4(struct sockaddr_in *client, struct sockaddr_in *proxy,
    struct sockaddr_in *server, int *cdomain)
{
	struct pfioc_natlook pnl;

	memset(&pnl, 0, sizeof pnl);
	pnl.direction = PF_OUT;
	pnl.af = AF_INET;
	pnl.proto = IPPROTO_TCP;
	pnl.rdomain = getrtable();
	memcpy(&pnl.saddr.v4, &client->sin_addr.s_addr, sizeof pnl.saddr.v4);
	memcpy(&pnl.daddr.v4, &proxy->sin_addr.s_addr, sizeof pnl.daddr.v4);
	pnl.sport = client->sin_port;
	pnl.dport = proxy->sin_port;
	
	if (ioctl(dev, DIOCNATLOOK, &pnl) == -1)
		return (-1);

	memset(server, 0, sizeof(struct sockaddr_in));
	server->sin_len = sizeof(struct sockaddr_in);
	server->sin_family = AF_INET;
	memcpy(&server->sin_addr.s_addr, &pnl.rdaddr.v4,
	    sizeof server->sin_addr.s_addr);
	server->sin_port = pnl.rdport;
	*cdomain = pnl.rrdomain;

	return (0);
}

int
server_lookup6(struct sockaddr_in6 *client, struct sockaddr_in6 *proxy,
    struct sockaddr_in6 *server, int *cdomain)
{
	struct pfioc_natlook pnl;

	memset(&pnl, 0, sizeof pnl);
	pnl.direction = PF_OUT;
	pnl.af = AF_INET6;
	pnl.proto = IPPROTO_TCP;
	pnl.rdomain = getrtable();
	memcpy(&pnl.saddr.v6, &client->sin6_addr.s6_addr, sizeof pnl.saddr.v6);
	memcpy(&pnl.daddr.v6, &proxy->sin6_addr.s6_addr, sizeof pnl.daddr.v6);
	pnl.sport = client->sin6_port;
	pnl.dport = proxy->sin6_port;
	
	if (ioctl(dev, DIOCNATLOOK, &pnl) == -1)
		return (-1);

	memset(server, 0, sizeof(struct sockaddr_in6));
	server->sin6_len = sizeof(struct sockaddr_in6);
	server->sin6_family = AF_INET6;
	memcpy(&server->sin6_addr.s6_addr, &pnl.rdaddr.v6,
	    sizeof server->sin6_addr);
	server->sin6_port = pnl.rdport;
	*cdomain = pnl.rrdomain;
@


1.13
log
@pfr.rule.*.addr.type must be initialized to PF_ADDR_NONE for things that
are not used. bzero() of the rule structure is not enough.
Find with dlg@@, OK mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.12 2010/01/12 03:20:51 mcbride Exp $ */
d46 1
a46 1
    struct sockaddr_in *);
d48 1
a48 1
    struct sockaddr_in6 *);
d73 1
a73 1
add_nat(u_int32_t id, struct sockaddr *src, struct sockaddr *dst,
d90 2
d101 2
a102 2
add_rdr(u_int32_t id, struct sockaddr *src, struct sockaddr *dst,
    u_int16_t d_port, struct sockaddr *rdr, u_int16_t rdr_port)
d117 2
d261 1
a261 1
    struct sockaddr *server)
d265 1
a265 1
		    satosin(server)));
d269 1
a269 1
		    satosin6(server)));
d277 1
a277 1
    struct sockaddr_in *server)
d285 1
d300 2
a301 1
		
d307 1
a307 1
    struct sockaddr_in6 *server)
d315 1
d330 1
@


1.12
log
@First pass at removing the 'pf_pool' mechanism for translation and routing
actions. Allow interfaces to be specified in special table entries for
the routing actions. Lists of addresses can now only be done using tables,
which pfctl will generate automatically from the existing syntax.

Functionally, this deprecates the use of multiple tables or dynamic
interfaces in a single nat or rdr rule.

ok henning dlg claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.11 2009/11/22 23:30:05 deraadt Exp $ */
d208 3
@


1.11
log
@Move from the PF_RULESET_FILTER world order to PF_TRANS_RULESET
due to the standard henning+oga commit-and-run-for-beer problem.
ok claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.10 2009/11/21 13:59:31 claudio Exp $ */
d42 1
a42 1
int add_addr(struct sockaddr *, int);
a49 1
static struct pfioc_pooladdr	pfp;
d57 1
a57 1
add_addr(struct sockaddr *addr, int which)
d60 1
a60 1
		memcpy(&pfp.addr.addr.v.a.addr.v4,
d62 1
a62 1
		memset(&pfp.addr.addr.v.a.mask.addr8, 255, 4);
d64 1
a64 1
		memcpy(&pfp.addr.addr.v.a.addr.v6,
d66 1
a66 1
		memset(&pfp.addr.addr.v.a.mask.addr8, 255, 16);
d68 1
a68 3
	pfp.which = which;
	if (ioctl(dev, DIOCADDADDR, &pfp) == -1)
		return (-1);
d86 1
a86 1
	if (add_addr(nat, PF_NAT) == -1)
d111 1
a111 1
	if (add_addr(rdr, PF_RDR) == -1)
a195 1
	memset(&pfp, 0, sizeof pfp);
a198 1
	strlcpy(pfp.anchor, an, PF_ANCHOR_NAME_SIZE);
a201 3
	if (ioctl(dev, DIOCBEGINADDRS, &pfp) == -1)
		return (-1);
	pfr.pool_ticket = pfp.ticket;
@


1.10
log
@If tagging is used use match rules instead of pass rules. This is needed
so that later pass rules will not overwrite the nat-to/rdr-to settings.
Because of this there must be an expilicit "pass .. tagged proxytag .."
rule after the ftp-proxy anchor. OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.9 2009/09/01 13:46:14 claudio Exp $ */
d43 1
a43 1
int prepare_rule(u_int32_t, int, struct sockaddr *, struct sockaddr *,
d86 1
a86 1
	if (prepare_rule(id, PF_RULESET_FILTER, src, dst, d_port) == -1)
d111 1
a111 1
	if (prepare_rule(id, PF_RULESET_FILTER, src, dst, d_port) == -1)
d179 1
a179 1
	pfte.rs_num = PF_RULESET_FILTER;
d188 1
a188 1
prepare_rule(u_int32_t id, int rs_num, struct sockaddr *src,
@


1.9
log
@Bring ftp-proxy in sync with the massive pf change just commited by Henning.
This changes the way the rdr/nat rules are added to pf. Now only a single
anchor is needed (the other ones do no longer exist).
To convert your ruleset you need something like this at the start of your
ruleset:
# filter rules and anchors for ftp-proxy(8)
anchor "ftp-proxy/*"
pass in quick proto tcp to port ftp rdr-to 127.0.0.1 port 8021

This was tested by myself, sthen@@, dlg@@ and I think many more. OK by the same
people plus henning.
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.8 2008/06/13 07:25:26 claudio Exp $ */
d239 4
a242 1
	pfr.rule.action = PF_PASS;
@


1.8
log
@Better error messages. Include the function causing the problem and do not
include the program name in logmsg() plus exit_daemon() does not return so
make it a void function. OK mpf@@
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.7 2008/02/26 18:52:53 henning Exp $ */
d42 1
a42 2
enum { TRANS_FILTER = 0, TRANS_NAT, TRANS_RDR, TRANS_SIZE };

d53 1
a53 1
static struct pfioc_trans_e	pfte[TRANS_SIZE];
d58 1
a58 2
add_filter(u_int32_t id, u_int8_t dir, struct sockaddr *src,
    struct sockaddr *dst, u_int16_t d_port)
d60 8
a67 3
	if (!src || !dst || !d_port) {
		errno = EINVAL;
		return (-1);
d69 2
a70 6

	if (prepare_rule(id, PF_RULESET_FILTER, src, dst, d_port) == -1)
		return (-1);

	pfr.rule.direction = dir;
	if (ioctl(dev, DIOCADDRULE, &pfr) == -1)
a71 1

d86 1
a86 1
	if (prepare_rule(id, PF_RULESET_NAT, src, dst, d_port) == -1)
d89 1
a89 10
	if (nat->sa_family == AF_INET) {
		memcpy(&pfp.addr.addr.v.a.addr.v4,
		    &satosin(nat)->sin_addr.s_addr, 4);
		memset(&pfp.addr.addr.v.a.mask.addr8, 255, 4);
	} else {
		memcpy(&pfp.addr.addr.v.a.addr.v6,
		    &satosin6(nat)->sin6_addr.s6_addr, 16);
		memset(&pfp.addr.addr.v.a.mask.addr8, 255, 16);
	}
	if (ioctl(dev, DIOCADDADDR, &pfp) == -1)
d92 3
a94 2
	pfr.rule.rpool.proxy_port[0] = nat_range_low;
	pfr.rule.rpool.proxy_port[1] = nat_range_high;
d111 1
a111 1
	if (prepare_rule(id, PF_RULESET_RDR, src, dst, d_port) == -1)
d114 1
a114 10
	if (rdr->sa_family == AF_INET) {
		memcpy(&pfp.addr.addr.v.a.addr.v4,
		    &satosin(rdr)->sin_addr.s_addr, 4);
		memset(&pfp.addr.addr.v.a.mask.addr8, 255, 4);
	} else {
		memcpy(&pfp.addr.addr.v.a.addr.v6,
		    &satosin6(rdr)->sin6_addr.s6_addr, 16);
		memset(&pfp.addr.addr.v.a.mask.addr8, 255, 16);
	}
	if (ioctl(dev, DIOCADDADDR, &pfp) == -1)
d117 2
a118 1
	pfr.rule.rpool.proxy_port[0] = rdr_port;
a168 1
	int i;
d171 3
a173 3
	pft.size = TRANS_SIZE;
	pft.esize = sizeof pfte[0];
	pft.array = pfte;
d177 3
a179 18
	for (i = 0; i < TRANS_SIZE; i++) {
		memset(&pfte[i], 0, sizeof pfte[0]);
		strlcpy(pfte[i].anchor, an, PF_ANCHOR_NAME_SIZE);
		switch (i) {
		case TRANS_FILTER:
			pfte[i].rs_num = PF_RULESET_FILTER;
			break;
		case TRANS_NAT:
			pfte[i].rs_num = PF_RULESET_NAT;
			break;
		case TRANS_RDR:
			pfte[i].rs_num = PF_RULESET_RDR;
			break;
		default:
			errno = EINVAL;
			return (-1);
		}
	}
d206 1
a206 14
	switch (rs_num) {
	case PF_RULESET_FILTER:
		pfr.ticket = pfte[TRANS_FILTER].ticket;
		break;
	case PF_RULESET_NAT:
		pfr.ticket = pfte[TRANS_NAT].ticket;
		break;
	case PF_RULESET_RDR:
		pfr.ticket = pfte[TRANS_RDR].ticket;
		break;
	default:
		errno = EINVAL;
		return (-1);
	}
d234 18
a251 37
	switch (rs_num) {
	case PF_RULESET_FILTER:
		/*
		 * pass [quick] [log] inet[6] proto tcp \
		 *     from $src to $dst port = $d_port flags S/SA keep state
		 *     (max 1) [queue qname] [tag tagname]
		 */
		pfr.rule.action = PF_PASS;
		pfr.rule.quick = 1;
		pfr.rule.log = rule_log;
		pfr.rule.keep_state = 1;
		pfr.rule.flags = TH_SYN;
		pfr.rule.flagset = (TH_SYN|TH_ACK);
		pfr.rule.max_states = 1;
		if (qname != NULL)
			strlcpy(pfr.rule.qname, qname, sizeof pfr.rule.qname);
		if (tagname != NULL) {
			pfr.rule.quick = 0;
			strlcpy(pfr.rule.tagname, tagname,
                                sizeof pfr.rule.tagname);
		}
		break;
	case PF_RULESET_NAT:
		/*
		 * nat inet[6] proto tcp from $src to $dst port $d_port -> $nat
		 */
		pfr.rule.action = PF_NAT;
		break;
	case PF_RULESET_RDR:
		/*
		 * rdr inet[6] proto tcp from $src to $dst port $d_port -> $rdr
		 */
		pfr.rule.action = PF_RDR;
		break;
	default:
		errno = EINVAL;
		return (-1);
@


1.7
log
@Don't pass quick when tagging, so the tag can be used outside
the ftp-proxy anchor.  Exotic setups with route-to etc.
can be implemented this way.
from camield, ok reyk beck canacar and manpage polished by jmc
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.6 2007/08/01 09:31:41 henning Exp $ */
d176 1
a176 1
		err(1, "/dev/pf");
@


1.6
log
@allow ftp-proxy to add tag statements to teh rules it inserts
clever, nice and easy diff from bsd@@openbsd.rutgers.edu, ok pyr reyk
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.5 2006/12/01 07:31:21 camield Exp $ */
a279 2
	if (tagname != NULL)
		strlcpy(pfr.rule.tagname, tagname, sizeof pfr.rule.tagname);
d284 1
a284 1
		 * pass quick [log] inet[6] proto tcp \
d286 1
a286 1
		 *     (max 1) [queue qname]
d297 5
@


1.5
log
@forgot to update the comment as well
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.4 2006/12/01 07:25:41 camield Exp $ */
d56 1
a56 1
static char *qname;
d162 1
a162 1
init_filter(char *opt_qname, int opt_verbose)
d167 1
d280 2
@


1.4
log
@use flags S/SA for consistency with the rest of pf
@
text
@d1 1
a1 1
/*	$OpenBSD: filter.c,v 1.3 2005/06/07 14:12:07 camield Exp $ */
d284 1
a284 1
		 *     from $src to $dst port = $d_port flags S/SAFR keep state
@


1.3
log
@add OpenBSD cvs tags, prompted by xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d292 1
a292 1
		pfr.rule.flagset = (TH_SYN|TH_ACK|TH_FIN|TH_RST);
@


1.2
log
@Introduce verbose option to control the logging of the pf rules.

ok beck mpf
@
text
@d1 2
@


1.1
log
@Import new FTP proxy.  Handles IPv6 and all FTP modes.  It was
previously known as pftpx.

Not connected to the builds yet.

ok beck
@
text
@d53 1
a53 1
static int dev;
d160 1
a160 1
init_filter(char *opt_qname)
d166 5
d281 1
a281 1
		 * pass quick log inet[6] proto tcp \
d287 1
a287 1
		pfr.rule.log = 1;
@

