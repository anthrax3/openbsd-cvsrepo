head	1.21;
access;
symbols
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.6
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.2
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.19.0.30
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.22
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.26
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.24
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.20
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.18
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.16
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.14
	OPENBSD_5_0:1.19.0.12
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.10
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.8
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.4
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.6
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.2
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.18.0.8
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.6
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.4
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.2
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.16.0.10
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.8
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.6
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.4
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	SMP_SYNC_A:1.16
	SMP_SYNC_B:1.16
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	UBC_SYNC_A:1.14
	OPENBSD_3_3:1.13.0.6
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.13.0.4
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	UBC_SYNC_B:1.13
	UBC:1.12.0.6
	UBC_BASE:1.12
	OPENBSD_3_0:1.12.0.4
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_8:1.11.0.6
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.4
	OPENBSD_2_7_BASE:1.11
	SMP:1.11.0.2
	SMP_BASE:1.11
	kame_19991208:1.10
	OPENBSD_2_6:1.10.0.8
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.6
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.4
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.10.0.2
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2016.05.21.18.11.36;	author natano;	state Exp;
branches;
next	1.20;
commitid	h6HuALSffVqURa2m;

1.20
date	2015.10.23.10.45.31;	author krw;	state Exp;
branches;
next	1.19;
commitid	SncnQqnXMdpzMlro;

1.19
date	2009.01.05.01.14.40;	author krw;	state Exp;
branches;
next	1.18;

1.18
date	2006.12.16.12.44.05;	author krw;	state Exp;
branches;
next	1.17;

1.17
date	2006.12.15.03.04.24;	author krw;	state Exp;
branches;
next	1.16;

1.16
date	2004.05.14.04.05.05;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2004.05.12.21.04.15;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2003.04.18.22.12.25;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.14.01.27.09;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2001.02.20.01.50.11;	author assar;	state Exp;
branches
	1.12.6.1;
next	1.11;

1.11
date	2000.02.07.04.57.17;	author assar;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	98.02.08.22.41.44;	author tholo;	state Exp;
branches;
next	1.9;

1.9
date	98.01.11.20.39.11;	author provos;	state Exp;
branches;
next	1.8;

1.8
date	97.11.06.05.58.59;	author csapuntz;	state Exp;
branches;
next	1.7;

1.7
date	97.10.06.20.21.01;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.10.06.15.22.40;	author csapuntz;	state Exp;
branches;
next	1.5;

1.5
date	97.03.02.18.02.02;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.02.29.10.47.02;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.01.29.07.05.59;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.04.19.58;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.05;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.05;	author deraadt;	state Exp;
branches;
next	;

1.11.2.1
date	2001.05.14.22.33.00;	author niklas;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2002.03.28.15.02.01;	author niklas;	state Exp;
branches;
next	1.11.2.3;

1.11.2.3
date	2003.05.13.19.21.30;	author ho;	state Exp;
branches;
next	1.11.2.4;

1.11.2.4
date	2004.06.05.23.13.07;	author niklas;	state Exp;
branches;
next	;

1.12.6.1
date	2002.06.11.03.30.32;	author art;	state Exp;
branches;
next	1.12.6.2;

1.12.6.2
date	2003.05.19.22.27.06;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Remove the -x flag from mount_msdos and always assume the execute bit
for readable directories, while making it subject to the mask option
(-m in mount_msdos), so it is still possible to mount with
non-executable directories, but with semantics that are easier to
comprehend.

This makes directory listings with default mount options work again.

ok deraadt@@
@
text
@/*	$OpenBSD: msdosfsmount.h,v 1.20 2015/10/23 10:45:31 krw Exp $	*/
/*	$NetBSD: msdosfsmount.h,v 1.16 1997/10/17 11:24:24 ws Exp $	*/

/*-
 * Copyright (C) 1994, 1995, 1997 Wolfgang Solfrank.
 * Copyright (C) 1994, 1995, 1997 TooLs GmbH.
 * All rights reserved.
 * Original code by Paul Popelka (paulp@@uts.amdahl.com) (see below).
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Written by Paul Popelka (paulp@@uts.amdahl.com)
 *
 * You can do anything you want with this software, just don't say you wrote
 * it, and don't remove this notice.
 *
 * This software is provided "as is".
 *
 * The author supplies this software to be publicly redistributed on the
 * understanding that the author is not responsible for the correct
 * functioning of this software in any circumstances and is not liable for
 * any damages caused by this software.
 *
 * October 1992
 */

/*
 * Layout of the mount control block for a msdos file system.
 */
struct msdosfsmount {
	struct mount *pm_mountp;/* vfs mount struct for this fs */
	dev_t pm_dev;		/* block special device mounted */
	uid_t pm_uid;		/* uid to set as owner of the files */
	gid_t pm_gid;		/* gid to set as owner of the files */
	mode_t pm_mask;		/* mask to and with file protection bits */
	struct vnode *pm_devvp;	/* vnode for block device mntd */
	struct bpb50 pm_bpb;	/* BIOS parameter blk for this fs */
	uint32_t pm_BlkPerSec;	/* # of DEV_BSIZE blocks in MSDOSFS sector */
	uint32_t pm_FATsecs;	/* actual number of fat sectors */
	uint32_t pm_fatblk;	/* block # of first FAT */
	uint32_t pm_rootdirblk;	/* block # (cluster # for FAT32) of root directory number */
	uint32_t pm_rootdirsize;	/* size in blocks (not clusters) */
	uint32_t pm_firstcluster;	/* block number of first cluster */
	uint32_t pm_nmbrofclusters;	/* # of clusters in filesystem */
	uint32_t pm_maxcluster;	/* maximum cluster number */
	uint32_t pm_freeclustercount;	/* number of free clusters */
	uint32_t pm_cnshift;	/* shift file offset right this amount to get a cluster number */
	uint32_t pm_crbomask;	/* and a file offset with this mask to get cluster rel offset */
	uint32_t pm_bnshift;	/* shift file offset right this amount to get a block number */
	uint32_t pm_bpcluster;	/* bytes per cluster */
	uint32_t pm_fmod;		/* ~0 if fs is modified, this can rollover to 0	*/
	uint32_t pm_fatblocksize;	/* size of fat blocks in bytes */
	uint32_t pm_fatblocksec;	/* size of fat blocks in sectors */
	uint32_t pm_fatsize;	/* size of fat in bytes */
	uint32_t pm_fatmask;	/* mask to use for fat numbers */
	uint32_t pm_fsinfo;	/* fsinfo block number */
	u_int pm_fatmult;	/* these 2 values are used in fat */
	u_int pm_fatdiv;	/*	offset computation */
	u_int pm_curfat;	/* current fat for FAT32 (0 otherwise) */
	u_int *pm_inusemap;	/* ptr to bitmap of in-use clusters */
	u_int pm_flags;		/* see below */
	struct netexport pm_export;	/* export information */
};
/* Byte offset in FAT on filesystem pmp, cluster cn */
#define	FATOFS(pmp, cn)	((cn) * (pmp)->pm_fatmult / (pmp)->pm_fatdiv)

/*
 * Mount point flags:
 */
#if 0
    /* Defined in <sys/mount.h> */
#define	MSDOSFSMNT_SHORTNAME	0x01
#define	MSDOSFSMNT_LONGNAME	0x02
#define	MSDOSFSMNT_NOWIN95	0x04
#endif

/* All flags above: */
#define	MSDOSFSMNT_MNTOPT \
	(MSDOSFSMNT_SHORTNAME|MSDOSFSMNT_LONGNAME|MSDOSFSMNT_NOWIN95)
#define	MSDOSFSMNT_RONLY	0x80000000	/* mounted read-only	*/
#define	MSDOSFSMNT_WAITONFAT	0x40000000	/* mounted synchronous	*/
#define	MSDOSFS_FATMIRROR	0x20000000	/* FAT is mirrored */

#define	VFSTOMSDOSFS(mp)	((struct msdosfsmount *)mp->mnt_data)

/* Number of bits in one pm_inusemap item: */
#define	N_INUSEBITS	(8 * sizeof(u_int))

/*
 * Shorthand for fields in the bpb contained in the msdosfsmount structure.
 */
#define	pm_BytesPerSec	pm_bpb.bpbBytesPerSec
#define	pm_ResSectors	pm_bpb.bpbResSectors
#define	pm_FATs		pm_bpb.bpbFATs
#define	pm_RootDirEnts	pm_bpb.bpbRootDirEnts
#define	pm_Sectors	pm_bpb.bpbSectors
#define	pm_Media	pm_bpb.bpbMedia
#define	pm_SecPerTrack	pm_bpb.bpbSecPerTrack
#define	pm_Heads	pm_bpb.bpbHeads
#define	pm_HiddenSects	pm_bpb.bpbHiddenSecs
#define	pm_HugeSectors	pm_bpb.bpbHugeSectors

/*
 * Convert pointer to buffer -> pointer to direntry
 */
#define	bptoep(pmp, bp, dirofs) \
	((struct direntry *)(((bp)->b_data)	\
	 + ((dirofs) & (pmp)->pm_crbomask)))

/*
 * Convert block number to cluster number
 */
#define	de_bn2cn(pmp, bn) \
	((bn) >> ((pmp)->pm_cnshift - (pmp)->pm_bnshift))

/*
 * Convert cluster number to block number
 */
#define	de_cn2bn(pmp, cn) \
	((cn) << ((pmp)->pm_cnshift - (pmp)->pm_bnshift))

/*
 * Convert file offset to cluster number
 */
#define de_cluster(pmp, off) \
	((off) >> (pmp)->pm_cnshift)

/*
 * Clusters required to hold size bytes
 */
#define	de_clcount(pmp, size) \
	(((size) + (pmp)->pm_bpcluster - 1) >> (pmp)->pm_cnshift)

/*
 * Convert file offset to block number
 */
#define de_blk(pmp, off) \
	(de_cn2bn(pmp, de_cluster((pmp), (off))))

/*
 * Convert cluster number to file offset
 */
#define	de_cn2off(pmp, cn) \
	((cn) << (pmp)->pm_cnshift)

/*
 * Convert block number to file offset
 */
#define	de_bn2off(pmp, bn) \
	((bn) << (pmp)->pm_bnshift)
/*
 * Map a cluster number into a filesystem relative block number.
 */
#define	cntobn(pmp, cn) \
	(de_cn2bn((pmp), (cn)-CLUST_FIRST) + (pmp)->pm_firstcluster)

/*
 * Calculate block number for directory entry in root dir, offset dirofs
 */
#define	roottobn(pmp, dirofs) \
	(de_blk((pmp), (dirofs)) + (pmp)->pm_rootdirblk)

/*
 * Calculate block number for directory entry at cluster dirclu, offset
 * dirofs
 */
#define	detobn(pmp, dirclu, dirofs) \
	((dirclu) == MSDOSFSROOT \
	 ? roottobn((pmp), (dirofs)) \
	 : cntobn((pmp), (dirclu)))

/* Calculate size of fsinfo block */
#define fsi_size(pmp) \
	(1024 << ((pmp)->pm_BlkPerSec >> 2))

/*
 * Prototypes for MSDOSFS virtual filesystem operations
 */
int msdosfs_mount(struct mount *, const char *, void *, struct nameidata *, struct proc *);
int msdosfs_start(struct mount *, int, struct proc *);
int msdosfs_unmount(struct mount *, int, struct proc *);
int msdosfs_root(struct mount *, struct vnode **);
int msdosfs_quotactl(struct mount *, int, uid_t, caddr_t, struct proc *);
int msdosfs_statfs(struct mount *, struct statfs *, struct proc *);
int msdosfs_sync(struct mount *, int, struct ucred *, struct proc *);
int msdosfs_fhtovp(struct mount *, struct fid *, struct vnode **);
int msdosfs_vptofh(struct vnode *, struct fid *);
int msdosfs_init(struct vfsconf *);
@


1.20
log
@Nuke a bunch of leading/embedded/trailing whitespace so the code can be
read without generating spurious headaches.
@
text
@d1 1
a1 1
/*	$OpenBSD: msdosfsmount.h,v 1.19 2009/01/05 01:14:40 krw Exp $	*/
a98 1
#define MSDOSFSMNT_ALLOWDIRX	0x10
d103 1
a103 2
	(MSDOSFSMNT_SHORTNAME|MSDOSFSMNT_LONGNAME|MSDOSFSMNT_NOWIN95 \
	 |MSDOSFSMNT_ALLOWDIRX)
@


1.19
log
@The FAT32 fsinxtfree field is advisory in nature and we don't use
it. So leave it untouched. Similiar to but more ruthless than the
fixes FreeBSD did, since they do use the value.  Basically avoid
various off-by-one and off-by-many errors.

Fixes problems encountered by jsg@@ and deraadt@@ where filesystems
found on SDHC cards caused UVM faults.

Original fixes found by jsg@@. ok jsg@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: msdosfsmount.h,v 1.18 2006/12/16 12:44:05 krw Exp $	*/
d37 1
a37 1
 * 
d40 1
a40 1
 * 
d42 1
a42 1
 * 
d47 1
a47 1
 * 
@


1.18
log
@Adopt FreeBSD's code for non-DEV_BSIZE formatted MSDOSFS filesystems.

Enables devices (e.g. newer iPods, various other mp3 players) that use
2048 byte sectors.

Inspired by original diffs from weingart@@ and Alexey Vatchenk.

ok tom@@ pedro@@ deraadt@@ weingart@@ marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: msdosfsmount.h,v 1.17 2006/12/15 03:04:24 krw Exp $	*/
a80 1
	uint32_t pm_nxtfree;	/* next free cluster in fsinfo block */
@


1.17
log
@Nuke GEMDOSFS. Unused part of unused atari port. Simplifies
MSDOSFS code. Eliminates -G option to mount_msdos.

Nit detection by gwk@@, tom@@, jmc@@.

ok weingart@@ tom@@ thib@@ dlg@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: msdosfsmount.h,v 1.16 2004/05/14 04:05:05 tedu Exp $	*/
d62 1
d198 4
@


1.16
log
@use pool for namei pathbuf.  testing ok millert@@ tdeval@@
@
text
@d1 1
a1 1
/*	$OpenBSD: msdosfsmount.h,v 1.14 2003/04/18 22:12:25 tedu Exp $	*/
a98 1
#define	MSDOSFSMNT_GEMDOSFS	0x08
d105 1
a105 1
	 |MSDOSFSMNT_GEMDOSFS|MSDOSFSMNT_ALLOWDIRX)
@


1.15
log
@32 bit ints are uint32_t, not u_long.  works on 64bit now.  ok deraadt@@
@
text
@@


1.14
log
@support for making directories +x without affecting normal files

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: msdosfsmount.h,v 1.13 2002/03/14 01:27:09 millert Exp $	*/
d62 19
a80 19
	u_long pm_FATsecs;	/* actual number of fat sectors */
	u_long pm_fatblk;	/* block # of first FAT */
	u_long pm_rootdirblk;	/* block # (cluster # for FAT32) of root directory number */
	u_long pm_rootdirsize;	/* size in blocks (not clusters) */
	u_long pm_firstcluster;	/* block number of first cluster */
	u_long pm_nmbrofclusters;	/* # of clusters in filesystem */
	u_long pm_maxcluster;	/* maximum cluster number */
	u_long pm_freeclustercount;	/* number of free clusters */
	u_long pm_cnshift;	/* shift file offset right this amount to get a cluster number */
	u_long pm_crbomask;	/* and a file offset with this mask to get cluster rel offset */
	u_long pm_bnshift;	/* shift file offset right this amount to get a block number */
	u_long pm_bpcluster;	/* bytes per cluster */
	u_long pm_fmod;		/* ~0 if fs is modified, this can rollover to 0	*/
	u_long pm_fatblocksize;	/* size of fat blocks in bytes */
	u_long pm_fatblocksec;	/* size of fat blocks in sectors */
	u_long pm_fatsize;	/* size of fat in bytes */
	u_long pm_fatmask;	/* mask to use for fat numbers */
	u_long pm_fsinfo;	/* fsinfo block number */
	u_long pm_nxtfree;	/* next free cluster in fsinfo block */
@


1.13
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: msdosfsmount.h,v 1.12 2001/02/20 01:50:11 assar Exp $	*/
d96 5
a100 4
#define	MSDOSFSMNT_SHORTNAME	1
#define	MSDOSFSMNT_LONGNAME	2
#define	MSDOSFSMNT_NOWIN95	4
#define	MSDOSFSMNT_GEMDOSFS	8
d106 1
a106 1
	 |MSDOSFSMNT_GEMDOSFS)
@


1.12
log
@use void * consistently in vfs_mount and sys_mount.  ok @@art
@
text
@d1 1
a1 1
/*	$OpenBSD: msdosfsmount.h,v 1.11 2000/02/07 04:57:17 assar Exp $	*/
d201 10
a210 10
int msdosfs_mount __P((struct mount *, const char *, void *, struct nameidata *, struct proc *));
int msdosfs_start __P((struct mount *, int, struct proc *));
int msdosfs_unmount __P((struct mount *, int, struct proc *));
int msdosfs_root __P((struct mount *, struct vnode **));
int msdosfs_quotactl __P((struct mount *, int, uid_t, caddr_t, struct proc *));
int msdosfs_statfs __P((struct mount *, struct statfs *, struct proc *));
int msdosfs_sync __P((struct mount *, int, struct ucred *, struct proc *));
int msdosfs_fhtovp __P((struct mount *, struct fid *, struct vnode **));
int msdosfs_vptofh __P((struct vnode *, struct fid *));
int msdosfs_init __P((struct vfsconf *));
@


1.12.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: msdosfsmount.h,v 1.12 2001/02/20 01:50:11 assar Exp $	*/
d201 10
a210 10
int msdosfs_mount(struct mount *, const char *, void *, struct nameidata *, struct proc *);
int msdosfs_start(struct mount *, int, struct proc *);
int msdosfs_unmount(struct mount *, int, struct proc *);
int msdosfs_root(struct mount *, struct vnode **);
int msdosfs_quotactl(struct mount *, int, uid_t, caddr_t, struct proc *);
int msdosfs_statfs(struct mount *, struct statfs *, struct proc *);
int msdosfs_sync(struct mount *, int, struct ucred *, struct proc *);
int msdosfs_fhtovp(struct mount *, struct fid *, struct vnode **);
int msdosfs_vptofh(struct vnode *, struct fid *);
int msdosfs_init(struct vfsconf *);
@


1.12.6.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d96 4
a99 5
#define	MSDOSFSMNT_SHORTNAME	0x01
#define	MSDOSFSMNT_LONGNAME	0x02
#define	MSDOSFSMNT_NOWIN95	0x04
#define	MSDOSFSMNT_GEMDOSFS	0x08
#define MSDOSFSMNT_ALLOWDIRX	0x10
d105 1
a105 1
	 |MSDOSFSMNT_GEMDOSFS|MSDOSFSMNT_ALLOWDIRX)
@


1.11
log
@update to use new checkexp vfs operation
@
text
@d1 1
a1 1
/*	$OpenBSD: msdosfsmount.h,v 1.10 1998/02/08 22:41:44 tholo Exp $	*/
d201 1
a201 1
int msdosfs_mount __P((struct mount *, const char *, caddr_t, struct nameidata *, struct proc *));
@


1.11.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: msdosfsmount.h,v 1.12 2001/02/20 01:50:11 assar Exp $	*/
d201 1
a201 1
int msdosfs_mount __P((struct mount *, const char *, void *, struct nameidata *, struct proc *));
@


1.11.2.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d201 10
a210 10
int msdosfs_mount(struct mount *, const char *, void *, struct nameidata *, struct proc *);
int msdosfs_start(struct mount *, int, struct proc *);
int msdosfs_unmount(struct mount *, int, struct proc *);
int msdosfs_root(struct mount *, struct vnode **);
int msdosfs_quotactl(struct mount *, int, uid_t, caddr_t, struct proc *);
int msdosfs_statfs(struct mount *, struct statfs *, struct proc *);
int msdosfs_sync(struct mount *, int, struct ucred *, struct proc *);
int msdosfs_fhtovp(struct mount *, struct fid *, struct vnode **);
int msdosfs_vptofh(struct vnode *, struct fid *);
int msdosfs_init(struct vfsconf *);
@


1.11.2.3
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: msdosfsmount.h,v 1.11.2.2 2002/03/28 15:02:01 niklas Exp $	*/
d96 4
a99 5
#define	MSDOSFSMNT_SHORTNAME	0x01
#define	MSDOSFSMNT_LONGNAME	0x02
#define	MSDOSFSMNT_NOWIN95	0x04
#define	MSDOSFSMNT_GEMDOSFS	0x08
#define MSDOSFSMNT_ALLOWDIRX	0x10
d105 1
a105 1
	 |MSDOSFSMNT_GEMDOSFS|MSDOSFSMNT_ALLOWDIRX)
@


1.11.2.4
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d62 19
a80 19
	uint32_t pm_FATsecs;	/* actual number of fat sectors */
	uint32_t pm_fatblk;	/* block # of first FAT */
	uint32_t pm_rootdirblk;	/* block # (cluster # for FAT32) of root directory number */
	uint32_t pm_rootdirsize;	/* size in blocks (not clusters) */
	uint32_t pm_firstcluster;	/* block number of first cluster */
	uint32_t pm_nmbrofclusters;	/* # of clusters in filesystem */
	uint32_t pm_maxcluster;	/* maximum cluster number */
	uint32_t pm_freeclustercount;	/* number of free clusters */
	uint32_t pm_cnshift;	/* shift file offset right this amount to get a cluster number */
	uint32_t pm_crbomask;	/* and a file offset with this mask to get cluster rel offset */
	uint32_t pm_bnshift;	/* shift file offset right this amount to get a block number */
	uint32_t pm_bpcluster;	/* bytes per cluster */
	uint32_t pm_fmod;		/* ~0 if fs is modified, this can rollover to 0	*/
	uint32_t pm_fatblocksize;	/* size of fat blocks in bytes */
	uint32_t pm_fatblocksec;	/* size of fat blocks in sectors */
	uint32_t pm_fatsize;	/* size of fat in bytes */
	uint32_t pm_fatmask;	/* mask to use for fat numbers */
	uint32_t pm_fsinfo;	/* fsinfo block number */
	uint32_t pm_nxtfree;	/* next free cluster in fsinfo block */
@


1.10
log
@Updates to match type changes in syscall tables
@
text
@d1 1
a1 1
/*	$OpenBSD: msdosfsmount.h,v 1.9 1998/01/11 20:39:11 provos Exp $	*/
d208 1
a208 1
int msdosfs_fhtovp __P((struct mount *, struct fid *, struct mbuf *, struct vnode **, int *, struct ucred **));
@


1.9
log
@FAT32 support from NetBSD by Wolfgang Solfrank.
@
text
@d1 1
a1 1
/*	$OpenBSD: msdosfsmount.h,v 1.8 1997/11/06 05:58:59 csapuntz Exp $	*/
d201 1
a201 1
int msdosfs_mount __P((struct mount *, char *, caddr_t, struct nameidata *, struct proc *));
@


1.8
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 2
a2 2
/*	$OpenBSD: msdosfsmount.h,v 1.7 1997/10/06 20:21:01 deraadt Exp $	*/
/*	$NetBSD: msdosfsmount.h,v 1.15 1996/12/22 10:31:41 cgd Exp $	*/
d5 2
a6 2
 * Copyright (C) 1994, 1995 Wolfgang Solfrank.
 * Copyright (C) 1994, 1995 TooLs GmbH.
d62 1
d64 1
a64 1
	u_long pm_rootdirblk;	/* block # of root directory */
d78 6
a86 1
	u_int  pm_fatentrysize;	/* size of fat entry (12/16) */
d88 2
d108 1
a123 1
#define	pm_FATsecs	pm_bpb.bpbFATsecs
@


1.7
log
@back out vfs lite2 till after 2.2
@
text
@d1 1
a1 1
/*	$OpenBSD: msdosfsmount.h,v 1.5 1997/03/02 18:02:02 millert Exp $	*/
d202 1
a202 1
void msdosfs_init __P((void));
@


1.6
log
@VFS Lite2 Changes
@
text
@d202 1
a202 1
int msdosfs_init __P((struct vfsconf *));
@


1.5
log
@Sync msdosfs with NetBSD sans const-ness.  NetSBD log messages:
    Fix panic on mkdir.
    Thanks to Dave Huang for finding the bug.
    Fixes a bug with allowed/forbidden characters in non-W95 filenames.
    Don't extend directory when nothing is written to it.
@
text
@d1 1
a1 1
/*	$OpenBSD: msdosfsmount.h,v 1.4 1996/02/29 10:47:02 niklas Exp $	*/
d202 1
a202 1
void msdosfs_init __P((void));
@


1.4
log
@From NetBSD: merge with 960217
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: msdosfsmount.h,v 1.14 1996/02/09 19:13:56 christos Exp $	*/
@


1.3
log
@from netbsd;
Instead of using '#ifdef atari' to handle the differences of Gemdosfs and
Msdosfs, use a flag that can be set by mount_msdos. This is definitely
more flexible.
Fix error in previous change: don't use the local FS mount data before
it's actually allocated. Pass mount arguments to msdosfs_mountfs instead,
and use them (as in iso_mountfs for example).
@
text
@d1 2
a2 1
/*	$NetBSD: msdosfsmount.h,v 1.13 1996/01/19 14:28:31 leo Exp $	*/
d86 8
a93 4
/*#define	MSDOSFSMNT_SHORTNAME	1	/* Defined in <sys/mount.h> */
/*#define	MSDOSFSMNT_LONGNAME	2				*/
/*#define	MSDOSFSMNT_NOWIN95	4				*/
/*#define	MSDOSFSMNT_GEMDOSFS	8				*/
d202 1
a202 1
int msdosfs_init __P(());
@


1.2
log
@from netbsd (mostly by ws):
Win95 ignores case on lookup
Really don't generate long names when mounted with -s
Fix cookie handling
Don't forward credentials to bread, it makes nfs panic
(Of course, nfs shouldn't rely on the credentials not being referenced)
Don't give directory entry to deget, it could result in a deadlock
Use device blocks, not clusters for logical block numbers
Add support for Win'95 separate creation/modification/access timestamps
Re-introduce lowercase filenames for non-Win'95-filesystems
Fix thinko with block boundaries in directories
Don't overwrite dirclust, it's needed later on
Enable flock(2).
@
text
@d1 1
a1 1
/*	$NetBSD: msdosfsmount.h,v 1.12 1995/10/15 15:34:34 ws Exp $	*/
a78 1
#ifdef	atari
a79 1
#endif	/* atari */
d88 1
d91 2
a92 1
	(MSDOSFSMNT_SHORTNAME|MSDOSFSMNT_LONGNAME|MSDOSFSMNT_NOWIN95)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: msdosfsmount.h,v 1.11 1995/09/09 19:38:12 ws Exp $	*/
d4 2
a5 2
 * Copyright (C) 1994 Wolfgang Solfrank.
 * Copyright (C) 1994 TooLs GmbH.
a67 2
	u_long pm_bnshift;	/* shift file offset right this amount to get a block number */
	u_long pm_brbomask;	/* and a file offset with this mask to get block rel offset */
d70 1
d77 1
a77 2
	char pm_ronly;		/* read only if non-zero */
	char pm_waitonfat;	/* wait for writes of the fat to complt, when 0 use bdwrite, else use bwrite */
d84 12
a104 1
#define	pm_SectPerClust	pm_bpb.bpbSecPerClust
d117 14
a130 1
 * Map a cluster number into a filesystem relative block number.
d132 2
a133 2
#define	cntobn(pmp, cn) \
	((((cn)-CLUST_FIRST) * (pmp)->pm_SectPerClust) + (pmp)->pm_firstcluster)
d136 1
a136 1
 * Map a filesystem relative block number back into a cluster number.
d138 2
a139 2
#define	bntocn(pmp, bn) \
	((((bn) - pmp->pm_firstcluster) / (pmp)->pm_SectPerClust) + CLUST_FIRST)
d142 1
a142 1
 * Calculate block number for directory entry in root dir, offset dirofs
d144 2
a145 3
#define	roottobn(pmp, dirofs) \
	(((dirofs) / (pmp)->pm_bpcluster) * (pmp)->pm_SectPerClust \
	+ (pmp)->pm_rootdirblk)
d148 1
a148 2
 * Calculate block number for directory entry at cluster dirclu, offset
 * dirofs
d150 2
a151 4
#define	detobn(pmp, dirclu, dirofs) \
	((dirclu) == MSDOSFSROOT \
	 ? roottobn((pmp), (dirofs)) \
	 : cntobn((pmp), (dirclu)))
d154 1
a154 1
 * Convert pointer to buffer -> pointer to direntry
d156 2
a157 3
#define	bptoep(pmp, bp, dirofs) \
	((struct direntry *)(((bp)->b_data)	\
	 + ((dirofs) & (pmp)->pm_crbomask)))
d159 10
d171 1
a171 1
 * Convert filesize to block number
d173 2
a174 2
#define de_blk(pmp, off) \
	((off) >> (pmp)->pm_cnshift)
d177 2
a178 1
 * Clusters required to hold size bytes
d180 4
a183 2
#define	de_clcount(pmp, size) \
	(((size) + (pmp)->pm_bpcluster - 1) >> (pmp)->pm_cnshift)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
