head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.12
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.4
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.8
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.26
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.24
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.22
	OPENBSD_5_0:1.9.0.20
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.18
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.16
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.12
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.14
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.10
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.8
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.6
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.7.0.10
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.5.0.10
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.4.0.20
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.18
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.16
	OPENBSD_2_8:1.4.0.14
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.12
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.10
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.8
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.6
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.4
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.10.23.10.45.31;	author krw;	state Exp;
branches;
next	1.10;
commitid	SncnQqnXMdpzMlro;

1.10
date	2013.06.11.16.42.16;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2006.12.15.03.04.24;	author krw;	state Exp;
branches;
next	1.8;

1.8
date	2006.10.03.19.49.06;	author pedro;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.14.04.05.05;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.12.21.04.15;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.27.09;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.01.11.20.39.05;	author provos;	state Exp;
branches
	1.4.10.1
	1.4.20.1;
next	1.3;

1.3
date	96.02.29.10.46.47;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.01.29.07.05.57;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.04;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.04;	author deraadt;	state Exp;
branches;
next	;

1.4.10.1
date	2002.03.28.15.02.01;	author niklas;	state Exp;
branches;
next	1.4.10.2;

1.4.10.2
date	2004.06.05.23.13.07;	author niklas;	state Exp;
branches;
next	;

1.4.20.1
date	2002.06.11.03.30.32;	author art;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Nuke a bunch of leading/embedded/trailing whitespace so the code can be
read without generating spurious headaches.
@
text
@/*	$OpenBSD: fat.h,v 1.10 2013/06/11 16:42:16 deraadt Exp $	*/
/*	$NetBSD: fat.h,v 1.11 1997/10/17 11:23:49 ws Exp $	*/

/*-
 * Copyright (C) 1994, 1997 Wolfgang Solfrank.
 * Copyright (C) 1994, 1997 TooLs GmbH.
 * All rights reserved.
 * Original code by Paul Popelka (paulp@@uts.amdahl.com) (see below).
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Written by Paul Popelka (paulp@@uts.amdahl.com)
 *
 * You can do anything you want with this software, just don't say you wrote
 * it, and don't remove this notice.
 *
 * This software is provided "as is".
 *
 * The author supplies this software to be publicly redistributed on the
 * understanding that the author is not responsible for the correct
 * functioning of this software in any circumstances and is not liable for
 * any damages caused by this software.
 *
 * October 1992
 */

/*
 * Some useful cluster numbers.
 */
#define	MSDOSFSROOT	0		/* cluster 0 means the root dir */
#define	CLUST_FREE	0		/* cluster 0 also means a free cluster */
#define	MSDOSFSFREE	CLUST_FREE
#define	CLUST_FIRST	2		/* first legal cluster number */
#define	CLUST_RSRVD	0xfffffff6	/* reserved cluster range */
#define	CLUST_BAD	0xfffffff7	/* a cluster with a defect */
#define	CLUST_EOFS	0xfffffff8	/* start of eof cluster range */
#define	CLUST_EOFE	0xffffffff	/* end of eof cluster range */

#define	FAT12_MASK	0x00000fff	/* mask for 12 bit cluster numbers */
#define	FAT16_MASK	0x0000ffff	/* mask for 16 bit cluster numbers */
#define	FAT32_MASK	0x0fffffff	/* mask for FAT32 cluster numbers */

/*
 * MSDOSFS:
 * Return true if filesystem uses 12 bit fats. Microsoft Programmer's
 * Reference says if the maximum cluster number in a filesystem is greater
 * than 4078 ((CLUST_RSRVS - CLUST_FIRST) & FAT12_MASK) then we've got a
 * 16 bit fat filesystem. While mounting, the result of this test is stored
 * in pm_fatentrysize.
 */
#define	FAT12(pmp)	(pmp->pm_fatmask == FAT12_MASK)
#define	FAT16(pmp)	(pmp->pm_fatmask == FAT16_MASK)
#define	FAT32(pmp)	(pmp->pm_fatmask == FAT32_MASK)

#define	MSDOSFSEOF(pmp, cn)	((((cn) | ~(pmp)->pm_fatmask) & CLUST_EOFS) == CLUST_EOFS)

#ifdef _KERNEL
/*
 * These are the values for the function argument to the function
 * fatentry().
 */
#define	FAT_GET		0x0001	/* get a fat entry */
#define	FAT_SET		0x0002	/* set a fat entry */
#define	FAT_GET_AND_SET	(FAT_GET | FAT_SET)

/*
 * Flags to extendfile:
 */
#define	DE_CLEAR	1	/* Zero out the blocks allocated */

int pcbmap(struct denode *, uint32_t, daddr_t *, uint32_t *, int *);
int clusterfree(struct msdosfsmount *, uint32_t, uint32_t *);
int clusteralloc(struct msdosfsmount *, uint32_t, uint32_t, uint32_t, uint32_t *, uint32_t *);
int extendfile(struct denode *, uint32_t, struct buf **, uint32_t *, int);
int fatentry(int, struct msdosfsmount *, uint32_t, uint32_t *, uint32_t);
void fc_purge(struct denode *, u_int);
void fc_lookup(struct denode *, uint32_t, uint32_t *, uint32_t *);
int fillinusemap(struct msdosfsmount *);
int freeclusterchain(struct msdosfsmount *, uint32_t);
#endif	/* _KERNEL */
@


1.10
log
@final removal of daddr64_t.  daddr_t has been 64 bit for a long enough
test period; i think 3 years ago the last bugs fell out.
ok otto beck others
@
text
@d1 1
a1 1
/*	$OpenBSD: fat.h,v 1.9 2006/12/15 03:04:24 krw Exp $	*/
d37 1
a37 1
 * 
d40 1
a40 1
 * 
d42 1
a42 1
 * 
d47 1
a47 1
 * 
@


1.9
log
@Nuke GEMDOSFS. Unused part of unused atari port. Simplifies
MSDOSFS code. Eliminates -G option to mount_msdos.

Nit detection by gwk@@, tom@@, jmc@@.

ok weingart@@ tom@@ thib@@ dlg@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fat.h,v 1.8 2006/10/03 19:49:06 pedro Exp $	*/
d95 1
a95 1
int pcbmap(struct denode *, uint32_t, daddr64_t *, uint32_t *, int *);
@


1.8
log
@Introduce daddr64_t and use it for physical block numbers
Okay weingart@@, "I'm game with putting my name on it" dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fat.h,v 1.7 2004/05/14 04:05:05 tedu Exp $	*/
a73 5
 * GEMDOS-flavour (atari):
 * If the filesystem is on floppy we've got a 12 bit fat filesystem, otherwise
 * 16 bit. We check the d_type field in the disklabel struct while mounting
 * and store the result in the pm_fatentrysize. Note that this kind of
 * detection gets flakey when mounting a vnd-device.
@


1.7
log
@use pool for namei pathbuf.  testing ok millert@@ tdeval@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fat.h,v 1.5 2002/03/14 01:27:09 millert Exp $	*/
d100 1
a100 1
int pcbmap(struct denode *, uint32_t, daddr_t *, uint32_t *, int *);
@


1.6
log
@32 bit ints are uint32_t, not u_long.  works on 64bit now.  ok deraadt@@
@
text
@@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: fat.h,v 1.4 1998/01/11 20:39:05 provos Exp $	*/
d100 5
a104 5
int pcbmap(struct denode *, u_long, daddr_t *, u_long *, int *);
int clusterfree(struct msdosfsmount *, u_long, u_long *);
int clusteralloc(struct msdosfsmount *, u_long, u_long, u_long, u_long *, u_long *);
int extendfile(struct denode *, u_long, struct buf **, u_long *, int);
int fatentry(int, struct msdosfsmount *, u_long, u_long *, u_long);
d106 1
a106 1
void fc_lookup(struct denode *, u_long, u_long *, u_long *);
d108 1
a108 1
int freeclusterchain(struct msdosfsmount *, u_long);
@


1.4
log
@FAT32 support from NetBSD by Wolfgang Solfrank.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d100 9
a108 9
int pcbmap __P((struct denode *, u_long, daddr_t *, u_long *, int *));
int clusterfree __P((struct msdosfsmount *, u_long, u_long *));
int clusteralloc __P((struct msdosfsmount *, u_long, u_long, u_long, u_long *, u_long *));
int extendfile __P((struct denode *, u_long, struct buf **, u_long *, int));
int fatentry __P((int, struct msdosfsmount *, u_long, u_long *, u_long));
void fc_purge __P((struct denode *, u_int));
void fc_lookup __P((struct denode *, u_long, u_long *, u_long *));
int fillinusemap __P((struct msdosfsmount *));
int freeclusterchain __P((struct msdosfsmount *, u_long));
@


1.4.20.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fat.h,v 1.4 1998/01/11 20:39:05 provos Exp $	*/
d100 9
a108 9
int pcbmap(struct denode *, u_long, daddr_t *, u_long *, int *);
int clusterfree(struct msdosfsmount *, u_long, u_long *);
int clusteralloc(struct msdosfsmount *, u_long, u_long, u_long, u_long *, u_long *);
int extendfile(struct denode *, u_long, struct buf **, u_long *, int);
int fatentry(int, struct msdosfsmount *, u_long, u_long *, u_long);
void fc_purge(struct denode *, u_int);
void fc_lookup(struct denode *, u_long, u_long *, u_long *);
int fillinusemap(struct msdosfsmount *);
int freeclusterchain(struct msdosfsmount *, u_long);
@


1.4.10.1
log
@Merge in -current from roughly a week ago
@
text
@d100 9
a108 9
int pcbmap(struct denode *, u_long, daddr_t *, u_long *, int *);
int clusterfree(struct msdosfsmount *, u_long, u_long *);
int clusteralloc(struct msdosfsmount *, u_long, u_long, u_long, u_long *, u_long *);
int extendfile(struct denode *, u_long, struct buf **, u_long *, int);
int fatentry(int, struct msdosfsmount *, u_long, u_long *, u_long);
void fc_purge(struct denode *, u_int);
void fc_lookup(struct denode *, u_long, u_long *, u_long *);
int fillinusemap(struct msdosfsmount *);
int freeclusterchain(struct msdosfsmount *, u_long);
@


1.4.10.2
log
@Merge with the trunk
@
text
@d100 5
a104 5
int pcbmap(struct denode *, uint32_t, daddr_t *, uint32_t *, int *);
int clusterfree(struct msdosfsmount *, uint32_t, uint32_t *);
int clusteralloc(struct msdosfsmount *, uint32_t, uint32_t, uint32_t, uint32_t *, uint32_t *);
int extendfile(struct denode *, uint32_t, struct buf **, uint32_t *, int);
int fatentry(int, struct msdosfsmount *, uint32_t, uint32_t *, uint32_t);
d106 1
a106 1
void fc_lookup(struct denode *, uint32_t, uint32_t *, uint32_t *);
d108 1
a108 1
int freeclusterchain(struct msdosfsmount *, uint32_t);
@


1.3
log
@From NetBSD: merge with 960217
@
text
@d2 1
a2 1
/*	$NetBSD: fat.h,v 1.10 1996/02/11 22:48:14 ws Exp $	*/
d5 2
a6 2
 * Copyright (C) 1994 Wolfgang Solfrank.
 * Copyright (C) 1994 TooLs GmbH.
d54 2
a55 2
#define	MSDOSFSROOT	0	/* cluster 0 means the root dir */
#define	CLUST_FREE	0	/* cluster 0 also means a free cluster */
d57 5
a61 6
#define	CLUST_FIRST	2	/* first legal cluster number */
#define	CLUST_RSRVS	0xfff0	/* start of reserved cluster range */
#define	CLUST_RSRVE	0xfff6	/* end of reserved cluster range */
#define	CLUST_BAD	0xfff7	/* a cluster with a defect */
#define	CLUST_EOFS	0xfff8	/* start of eof cluster range */
#define	CLUST_EOFE	0xffff	/* end of eof cluster range */
d63 3
a65 2
#define	FAT12_MASK	0x0fff	/* mask for 12 bit cluster numbers */
#define	FAT16_MASK	0xffff	/* mask for 16 bit cluster numbers */
d80 3
a82 2
#define	FAT12(pmp)	(pmp->pm_fatentrysize == 12)
#define	FAT16(pmp)	(pmp->pm_fatentrysize == 16)
d84 1
a84 1
#define	MSDOSFSEOF(cn)	(((cn) & 0xfff8) == 0xfff8)
@


1.2
log
@from netbsd;
Instead of using '#ifdef atari' to handle the differences of Gemdosfs and
Msdosfs, use a flag that can be set by mount_msdos. This is definitely
more flexible.
Fix error in previous change: don't use the local FS mount data before
it's actually allocated. Pass mount arguments to msdosfs_mountfs instead,
and use them (as in iso_mountfs for example).
@
text
@d1 2
a2 1
/*	$NetBSD: fat.h,v 1.9 1996/01/19 14:28:05 leo Exp $	*/
d71 3
a73 2
 * than 4086 then we've got a 16 bit fat filesystem. While mounting, the
 * result of this test is stored in pm_fatentrysize.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: fat.h,v 1.8 1995/09/09 19:38:01 ws Exp $	*/
a65 1
#ifdef	atari
d67 10
a76 5
 * Return true if filesystem uses 12 bit fats. If the filesystem
 * is on floppy we've got a 12 bit fat filesystem, otherwise 16 bit.
 * We check the d_type field in the disklabel struct while mounting
 * and store the result in the pm_fatentrysize field in the
 * msdosfsmount struct.
a79 9
#else	/* !atari */
/*
 * Return true if filesystem uses 12 bit fats. Microsoft Programmer's
 * Reference says if the maximum cluster number in a filesystem is greater
 * than 4086 then we've got a 16 bit fat filesystem.
 */
#define	FAT12(pmp)	(pmp->pm_maxcluster <= 4086)
#define	FAT16(pmp)	(pmp->pm_maxcluster >  4086)
#endif	/* !atari */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
