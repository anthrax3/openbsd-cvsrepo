head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.6
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.38
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.30
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.34
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.32
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.28
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.26
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.24
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.22
	OPENBSD_5_0:1.5.0.20
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.18
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.16
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.12
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.14
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.10
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.8
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.6
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.4.0.26
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.24
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.22
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.20
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.18
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.16
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.14
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.12
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.10
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.8
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.6
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.14
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.12
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.10
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.8
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.10.10.00.34.50;	author bluhm;	state Exp;
branches;
next	1.6;
commitid	acCovoubhhVmbWtj;

1.6
date	2015.10.23.10.45.31;	author krw;	state Exp;
branches;
next	1.5;
commitid	SncnQqnXMdpzMlro;

1.5
date	2006.12.15.03.04.24;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.10.15.33.10;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	98.01.11.20.39.02;	author provos;	state Exp;
branches
	1.3.10.1;
next	1.2;

1.2
date	97.02.24.14.32.46;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.04;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.04;	author deraadt;	state Exp;
branches;
next	;

1.3.10.1
date	2001.05.14.22.32.59;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Rename BIOS parameter block field from bsPBP to bsBPB.  This typo
has been fixed in FreeBSD in 2002.  No binary change.
From Alexander von Gernler; OK krw@@
@
text
@/*	$OpenBSD: bootsect.h,v 1.6 2015/10/23 10:45:31 krw Exp $	*/
/*	$NetBSD: bootsect.h,v 1.8 1997/10/17 11:23:29 ws Exp $	*/

/*
 * Written by Paul Popelka (paulp@@uts.amdahl.com)
 *
 * You can do anything you want with this software, just don't say you wrote
 * it, and don't remove this notice.
 *
 * This software is provided "as is".
 *
 * The author supplies this software to be publicly redistributed on the
 * understanding that the author is not responsible for the correct
 * functioning of this software in any circumstances and is not liable for
 * any damages caused by this software.
 *
 * October 1992
 */

/*
 * Format of a boot sector.  This is the first sector on a DOS floppy disk
 * or the fist sector of a partition on a hard disk.  But, it is not the
 * first sector of a partitioned hard disk.
 */
struct bootsector33 {
	u_int8_t	bsJump[3];		/* jump inst E9xxxx or EBxx90 */
	int8_t		bsOemName[8];		/* OEM name and version */
	int8_t		bsBPB[19];		/* BIOS parameter block */
	int8_t		bsDriveNumber;		/* drive number (0x80) */
	int8_t		bsBootCode[479];	/* pad so struct is 512b */
	u_int8_t	bsBootSectSig0;
	u_int8_t	bsBootSectSig1;
#define	BOOTSIG0	0x55
#define	BOOTSIG1	0xaa
};

struct extboot {
	int8_t		exDriveNumber;		/* drive number (0x80) */
	int8_t		exReserved1;		/* reserved */
	int8_t		exBootSignature;	/* ext. boot signature (0x29) */
#define	EXBOOTSIG	0x29
	int8_t		exVolumeID[4];		/* volume ID number */
	int8_t		exVolumeLabel[11];	/* volume label */
	int8_t		exFileSysType[8];	/* fs type (FAT12 or FAT16) */
};

struct bootsector50 {
	u_int8_t	bsJump[3];		/* jump inst E9xxxx or EBxx90 */
	int8_t		bsOemName[8];		/* OEM name and version */
	int8_t		bsBPB[25];		/* BIOS parameter block */
	int8_t		bsExt[26];		/* Bootsector Extension */
	int8_t		bsBootCode[448];	/* pad so structure is 512b */
	u_int8_t	bsBootSectSig0;
	u_int8_t	bsBootSectSig1;
#define	BOOTSIG0	0x55
#define	BOOTSIG1	0xaa
};

struct bootsector710 {
	u_int8_t	bsJump[3];		/* jump inst E9xxxx or EBxx90 */
	int8_t		bsOEMName[8];		/* OEM name and version */
	int8_t		bsBPB[53];		/* BIOS parameter block */
	int8_t		bsExt[26];		/* Bootsector Extension */
	int8_t		bsBootCode[418];	/* pad so structure is 512b */
	u_int8_t	bsBootSectSig2;		/* 2 & 3 are only defined for FAT32? */
	u_int8_t	bsBootSectSig3;
	u_int8_t	bsBootSectSig0;
	u_int8_t	bsBootSectSig1;
#define	BOOTSIG0	0x55
#define	BOOTSIG1	0xaa
#define	BOOTSIG2	0
#define	BOOTSIG3	0
};

union bootsector {
	struct bootsector33 bs33;
	struct bootsector50 bs50;
	struct bootsector710 bs710;
};

#if 0
/*
 * Shorthand for fields in the bpb.
 */
#define	bsBytesPerSec	bsBPB.bpbBytesPerSec
#define	bsSectPerClust	bsBPB.bpbSectPerClust
#define	bsResSectors	bsBPB.bpbResSectors
#define	bsFATS		bsBPB.bpbFATS
#define	bsRootDirEnts	bsBPB.bpbRootDirEnts
#define	bsSectors	bsBPB.bpbSectors
#define	bsMedia		bsBPB.bpbMedia
#define	bsFATsecs	bsBPB.bpbFATsecs
#define	bsSectPerTrack	bsBPB.bpbSectPerTrack
#define	bsHeads		bsBPB.bpbHeads
#define	bsHiddenSecs	bsBPB.bpbHiddenSecs
#define	bsHugeSectors	bsBPB.bpbHugeSectors
#endif
@


1.6
log
@Nuke a bunch of leading/embedded/trailing whitespace so the code can be
read without generating spurious headaches.
@
text
@d1 1
a1 1
/*	$OpenBSD: bootsect.h,v 1.5 2006/12/15 03:04:24 krw Exp $	*/
d62 1
a62 1
	int8_t		bsPBP[53];		/* BIOS parameter block */
@


1.5
log
@Nuke GEMDOSFS. Unused part of unused atari port. Simplifies
MSDOSFS code. Eliminates -G option to mount_msdos.

Nit detection by gwk@@, tom@@, jmc@@.

ok weingart@@ tom@@ thib@@ dlg@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bootsect.h,v 1.4 2000/11/10 15:33:10 provos Exp $	*/
d6 1
a6 1
 * 
d9 1
a9 1
 * 
d11 1
a11 1
 * 
d16 1
a16 1
 * 
@


1.4
log
@seperate -> separate, okay aaron@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bootsect.h,v 1.3 1998/01/11 20:39:02 provos Exp $	*/
a73 16
#ifdef	atari
/*
 * The boot sector on a gemdos fs is a little bit different from the msdos fs
 * format. Currently there is no need to declare a separate structure, the
 * bootsector33 struct will do.
 */
#if 0
struct bootsec_atari {
	u_int8_t	bsBranch[2];		/* branch inst if auto-boot	*/
	int8_t		bsFiller[6];		/* anything or nothing		*/
	int8_t		bsSerial[3];		/* serial no. for mediachange	*/
	int8_t		bsBPB[19];		/* BIOS parameter block		*/
	int8_t		bsBootCode[482];	/* pad so struct is 512b	*/
};
#endif
#endif /* atari */
@


1.3
log
@FAT32 support from NetBSD by Wolfgang Solfrank.
@
text
@d1 1
a1 1
/*	$OpenBSD: bootsect.h,v 1.2 1997/02/24 14:32:46 niklas Exp $	*/
d77 1
a77 1
 * format. Currently there is no need to declare a seperate structure, the
@


1.3.10.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: bootsect.h,v 1.4 2000/11/10 15:33:10 provos Exp $	*/
d77 1
a77 1
 * format. Currently there is no need to declare a separate structure, the
@


1.2
log
@OpenBSD tags
@
text
@d1 2
a2 2
/*	$OpenBSD: bootsect.h,v 1.7 1995/07/24 06:36:23 leo Exp $	*/
/*	$NetBSD: bootsect.h,v 1.7 1995/07/24 06:36:23 leo Exp $	*/
d31 14
a44 2
	u_int16_t	bsBootSectSig;
#define	BOOTSIG	0xaa55
d51 1
a51 7
	int8_t		bsDriveNumber;		/* drive number (0x80) */
	int8_t		bsReserved1;		/* reserved */
	int8_t		bsBootSignature;	/* ext. boot signature (0x29) */
#define	EXBOOTSIG	0x29
	int8_t		bsVolumeID[4];		/* volume ID number */
	int8_t		bsVolumeLabel[11];	/* volume label */
	int8_t		bsFileSysType[8];	/* fs type (FAT12 or FAT16) */
d53 20
a72 2
	u_int16_t	bsBootSectSig;
#define	BOOTSIG	0xaa55
d94 1
d97 1
d113 1
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
