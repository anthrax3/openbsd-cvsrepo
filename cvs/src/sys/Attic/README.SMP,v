head	1.1;
access;
symbols
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	UBC_SYNC_A:1.1
	UBC_SYNC_B:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2001.11.13.23.10.10;	author niklas;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.11.13.23.10.10;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.03.29.23.33.46;	author niklas;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2003.03.28.01.49.00;	author niklas;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2003.04.04.21.31.33;	author niklas;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2003.04.15.03.47.22;	author niklas;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2003.04.19.19.14.10;	author niklas;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2003.05.13.19.00.16;	author ho;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	2003.05.24.10.59.08;	author ho;	state Exp;
branches;
next	1.1.2.9;

1.1.2.9
date	2003.06.07.10.30.33;	author ho;	state Exp;
branches;
next	1.1.2.10;

1.1.2.10
date	2004.02.03.12.55.42;	author niklas;	state Exp;
branches;
next	1.1.2.11;

1.1.2.11
date	2004.02.19.08.50.45;	author niklas;	state Exp;
branches;
next	1.1.2.12;

1.1.2.12
date	2004.02.19.10.57.00;	author niklas;	state Exp;
branches;
next	1.1.2.13;

1.1.2.13
date	2004.02.19.10.59.30;	author niklas;	state Exp;
branches;
next	1.1.2.14;

1.1.2.14
date	2004.06.05.23.13.25;	author niklas;	state Exp;
branches;
next	1.1.2.15;

1.1.2.15
date	2004.06.13.08.16.45;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file README.SMP was initially added on branch SMP.
@
text
@@


1.1.2.1
log
@Add a document describing how to main the SMP branch
@
text
@a0 35
The SMP branch is irregularily updated from the trunk.  To do this
you mainly need to carry out the following procedure.

* Determine the new synchronization tag to use.  There are two used
  alternately; SMP_SYNC_A and SMP_SYNC_B.  You can use several hueristics
  to find out which one was used last, and then use the other one.
  For example, CVSROOT/history* files gives you information about tag
  operations in lines matching '^T'.  Call the tag you will be using
  for $NEW_TAG and the other one $OLD_TAG.

* Tag the trunk with the new synchronization tag.

  $ cvs -d cvs.openbsd.org:/cvs rtag -F -rHEAD $NEW_TAG src/sys

* Have an SMP branch checkout available with -kk substitution done.
  For example check out a fresh one:

  $ cvs get -rSMP -kk src/sys

* Go into src/sys and merge from the trunk (make sure that the repository
  you use have the new tags from the tagging above, i.e. don't use a mirror
  that has not been updated since that step):

  $ cvs up -j$OLD_TAG -j$NEW_TAG -kk

* Find any conflicts, and resolve them, this command might help:

  $ cvs -q up -dP -rSMP -kk 2>&1 | grep '^C '

* Build and test a GENERIC.MP kernel, fix every regression you can find.

* Commit to the SMP branch in pieces to not lock too much of the sys tree
  in the repository, Nice chunks are perhaps 100-300 files.

  @


1.1.2.2
log
@Add notes about CVS bugs
@
text
@d35 1
a35 22
  [ There are some bugs in cvs related to brach merges:
    I) Readdition of files that have gone dead.  They need to have
       the timestamp in the Entries file changed to /dummy timestamp/
       in order to be accepted by commit.
    II) Under som circumstances cvs just bombs on a file leaving it
        updated and locked in the repository.  In that case something
        like this is needed:

	x=path/to/file/relative/to/sys
	ssh cvs.openbsd.org "rcs -u /cvs/src/sys/$x,v"
        rm $x
        cvs -qd cvs.openbsd.org:/cvs up -dP -rSMP -kk $x
        cvs -qd cvs.openbsd.org:/cvs up -dP -rSMP -kk $x

    Readdition of directories is not working at all, they need to be
    manually added. ]

* A nice check is to browse the output of:

  $ cvs -q rdiff -u -r$NEW_TAG -rSMP

  It should just by differences related to multiprocessor support.
@


1.1.2.3
log
@new commentary on CVS bugs
@
text
@a10 6
* Remove every trace of the old synchronization tag, note that cvs rtag -F
  won't cut it, as it does not remove files that have been removed since
  last time.

  $ cvs -d cvs.openbsd.org:/cvs rtag -d $OLD_TAG src/sys

d13 1
a13 1
  $ cvs -d cvs.openbsd.org:/cvs rtag -rHEAD $NEW_TAG src/sys
a19 13
* Create and add directories that have been added to the trunk since
  last synchronization.  Say you have a clean standard trunk checkout in $STD
  and your clean SMP checkout is in $SMP:

  $ cd $STD/src/sys
  $ find . -type d \! -name CVS \! -path "*/compile/*" |sort>/tmp/stddirs
  $ cd $SMP/src/sys
  $ find . -type d \! -name CVS \! -path "*/compile/*" |sort>/tmp/smpdirs
  $ comm -23 /tmp/{std,smp}dirs |while read d; do
  >   mkdir $d
  >   cvs add $d
  > done

d30 1
a30 2
* Build and test an i386 GENERIC.MP kernel as well as an alpha GENERIC,
  fix every regression you can find.
d32 2
a33 33
* Time to fixup some cvs bugs.  Files that has got added since last
  synchronization will make cvs choke and leave the RCS file locked
  on cvs.openbsd.org.  However it will succeed in update the file first,
  and after removing it locally, two updates are needed, the 1st to
  remove the local CVS/Entries entry, and the second to get it
  checked out.

  $ fixup() {
  >   cvs -qd cvs.openbsd.org:/cvs ci -m'dummy message' $1
  >   ssh cvs.openbsd.org 'rcs -u /cvs/src/sys/'$1',v'
  >   rm $1
  >   cvs -qd cvs.openbsd.org:/cvs up -dP -rSMP -kk $1
  >   cvs -qd cvs.openbsd.org:/cvs up -dP -rSMP -kk $1
  > }

  Now you can use the fixup function to fix all the files that are new.
  This command will make you a script you can source:

  $ find . -path "*/CVS/Entries" |xargs grep /0/ \
  >   |sed -e 's#CVS/Entries:/##' -e 's#/0/.*##' -e 's/^/fixup /' >fixups
  $ . ./fixups

  It will go slow and report stuff like:

  Checking in ./foo/bar;
  /cvs/src/sys/foo/bar,v  <--  bar
  cvs server: bar: No such file or directory
  cvs [server aborted]: error diffing bar
  RCS file: /cvs/src/sys/./foo/bar,v
  1.1 unlocked
  done
  cvs server: warning: new-born ./foo/bar has disappeared
  U ./foo/bar
d35 13
a47 2
  All other reports are abnormal and you should check them closer.
  Also this will make /tmp dirty on cvs, please login and clen your stuff.
d49 2
a50 2
* Commit to the SMP branch in pieces to not lock too much of the sys tree
  in the repository, Nice chunks are perhaps 100-300 files.
a56 9

PS
  Here is a note I once wrote, I do not know if the fixup function above
  covers files like this as well, if not, look here for a hint of how to
  deal:

  Readdition of files that have gone dead.  They need to have
  the timestamp in the Entries file changed to /dummy timestamp/
  in order to be accepted by commit.
@


1.1.2.4
log
@restructure, more details on cvs bugs
@
text
@d5 1
a5 1
  alternately; SMP_SYNC_A and SMP_SYNC_B.  You can use several heuristics
d53 3
a55 7
  synchronization will make cvs choke in two different ways.
  Readdition of files that have gone dead need to have
  the timestamp in the Entries file changed to /dummy timestamp/
  in order to be accepted by commit.  Other new files will be committed
  but than crash before clening things up.  They leave the RCS file locked
  on cvs.openbsd.org, and the changes won't be reflected locally.
  After removing it locally, two updates are needed, the 1st to
d94 3
a96 1
  $ cvs -qd cvs.openbsd.org:/cvs rdiff -u -r$NEW_TAG -rSMP src/sys
d98 8
a105 1
  It should just be differences related to multiprocessor support.
@


1.1.2.5
log
@speling
@
text
@d1 1
a1 1
The SMP branch is irregularly updated from the trunk.  To do this
@


1.1.2.6
log
@Use -kk in the diff between the last sync point and the branch
@
text
@d98 1
a98 1
  $ cvs -qd cvs.openbsd.org:/cvs rdiff -kk -u -r$NEW_TAG -rSMP src/sys
@


1.1.2.7
log
@During sync, one should run rtag -d on the 'old' new tag, not the old tag.
@
text
@d11 3
a13 3
* Remove every trace of the "old" new synchronization tag, note that cvs 
  rtag -F won't cut it, as it does not remove files that have been removed
  since last time.
d15 1
a15 1
  $ cvs -d cvs.openbsd.org:/cvs rtag -d $NEW_TAG src/sys
@


1.1.2.8
log
@Add $OpenBSD$.
@
text
@a0 2
$OpenBSD$

@


1.1.2.9
log
@No more 'dummy message'.
@
text
@d66 1
a66 1
  >   cvs -qd cvs.openbsd.org:/cvs ci -m'add file to SMP branch' $1
@


1.1.2.10
log
@speling fikses
@
text
@d1 1
a1 1
$OpenBSD: README.SMP,v 1.1.2.9 2003/06/07 10:30:33 ho Exp $
d59 1
a59 1
  but than crash before cleaning things up.  They leave the RCS file locked
d93 1
a93 1
  Also this will make /tmp dirty on cvs, please login and clean your stuff.
@


1.1.2.11
log
@Add a fixup when interleaved commits happen during the merge period
@
text
@d1 1
a1 1
$OpenBSD$
d63 1
a63 4
  checked out.  Last, if someone has managed to interleave a commit
  to any of these files while you have been working, it will be
  needed to revert it, since that commit will have come into this
  fixup process instead of the version at $NEW_TAG.
a70 1
  >   cvs -qd cvs.openbsd.org:/cvs up -dP -rSMP -kk -jSMP -j$NEW_TAG $1
@


1.1.2.12
log
@Remove all bug fixup instructions, and instead promote local cvs use!
@
text
@d59 1
a59 1
  but then crash before cleaning things up.  They leave the RCS file locked
@


1.1.2.13
log
@Oops! This time for real:
Remove all bug fixup instructions, and instead promote local cvs use!
@
text
@d4 1
a4 1
you mainly need to carry out the following procedure:
d54 44
a97 5
* Cvs contains nasty bugs in its client/server invocation.  Earlier this
  documentation has contained bug fixup instructions for the remote cvs
  use.  However this is error-prone and slow.  It's much better to do the
  last step locally *on* cvs.openbsd.org.  I.e. transfer your tree to commit
  to cvs.openbsd.org and commit from there!
@


1.1.2.14
log
@Update some notes
@
text
@a18 3
  If this operation is done local to cvs.openbsd.org, it will last about 2.5
  minutes.

a22 2
  This too takes 2.5 minutes local cvs time.

d51 2
a52 2
* Build and test an i386 GENERIC.MP & MP_LOCKDEBUG kernel as well as an
  alpha GENERIC, fix every regression you can find.
@


1.1.2.15
log
@8bit clean
@
text
@d37 1
a37 1
  $ cd $STD/src/sys
@


