head	1.60;
access;
symbols
	OPENBSD_6_2_BASE:1.60
	OPENBSD_6_1:1.58.0.6
	OPENBSD_6_1_BASE:1.58
	OPENBSD_6_0:1.58.0.2
	OPENBSD_6_0_BASE:1.58
	OPENBSD_5_9:1.57.0.2
	OPENBSD_5_9_BASE:1.57
	OPENBSD_5_8:1.52.0.4
	OPENBSD_5_8_BASE:1.52
	OPENBSD_5_7:1.50.0.6
	OPENBSD_5_7_BASE:1.50
	OPENBSD_5_6:1.50.0.10
	OPENBSD_5_6_BASE:1.50
	OPENBSD_5_5:1.50.0.8
	OPENBSD_5_5_BASE:1.50
	OPENBSD_5_4:1.50.0.4
	OPENBSD_5_4_BASE:1.50
	OPENBSD_5_3:1.50.0.2
	OPENBSD_5_3_BASE:1.50
	OPENBSD_5_2:1.49.0.16
	OPENBSD_5_2_BASE:1.49
	OPENBSD_5_1_BASE:1.49
	OPENBSD_5_1:1.49.0.14
	OPENBSD_5_0:1.49.0.12
	OPENBSD_5_0_BASE:1.49
	OPENBSD_4_9:1.49.0.10
	OPENBSD_4_9_BASE:1.49
	OPENBSD_4_8:1.49.0.8
	OPENBSD_4_8_BASE:1.49
	OPENBSD_4_7:1.49.0.4
	OPENBSD_4_7_BASE:1.49
	OPENBSD_4_6:1.49.0.6
	OPENBSD_4_6_BASE:1.49
	OPENBSD_4_5:1.49.0.2
	OPENBSD_4_5_BASE:1.49
	OPENBSD_4_4:1.37.0.2
	OPENBSD_4_4_BASE:1.37
	OPENBSD_4_3:1.34.0.2
	OPENBSD_4_3_BASE:1.34
	OPENBSD_4_2:1.33.0.2
	OPENBSD_4_2_BASE:1.33
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.60
date	2017.07.02.14.48.19;	author kevlo;	state Exp;
branches;
next	1.59;
commitid	wMPbYTPIB0SWK6wa;

1.59
date	2017.04.23.21.04.55;	author stsp;	state Exp;
branches;
next	1.58;
commitid	px2SE1STEEImSTVA;

1.58
date	2016.05.12.18.18.48;	author dcoppa;	state Exp;
branches;
next	1.57;
commitid	PeKQqm683PflkypF;

1.57
date	2016.01.25.12.51.14;	author stsp;	state Exp;
branches;
next	1.56;
commitid	8u4iO0LaqVITe4Yf;

1.56
date	2016.01.06.19.56.50;	author stsp;	state Exp;
branches;
next	1.55;
commitid	vqkvQcVZc1K7MmHQ;

1.55
date	2016.01.04.12.32.06;	author stsp;	state Exp;
branches;
next	1.54;
commitid	4X5pVUcDTAvM2jfa;

1.54
date	2015.11.15.01.05.25;	author stsp;	state Exp;
branches;
next	1.53;
commitid	8QkBLu4fXKUF5YHk;

1.53
date	2015.10.10.07.51.47;	author stsp;	state Exp;
branches;
next	1.52;
commitid	jifa8zhvKCiRjE0O;

1.52
date	2015.07.14.21.13.12;	author stsp;	state Exp;
branches;
next	1.51;
commitid	j3PQXz9zLLvMR3V5;

1.51
date	2015.04.08.21.35.57;	author sthen;	state Exp;
branches;
next	1.50;
commitid	SA5pbX59H9NjlPLJ;

1.50
date	2013.01.17.02.51.56;	author claudio;	state Exp;
branches;
next	1.49;

1.49
date	2009.01.28.18.55.18;	author damien;	state Exp;
branches;
next	1.48;

1.48
date	2009.01.26.19.09.41;	author damien;	state Exp;
branches;
next	1.47;

1.47
date	2008.09.27.15.00.08;	author damien;	state Exp;
branches;
next	1.46;

1.46
date	2008.09.01.19.55.21;	author damien;	state Exp;
branches;
next	1.45;

1.45
date	2008.08.27.10.58.01;	author damien;	state Exp;
branches;
next	1.44;

1.44
date	2008.08.12.19.40.13;	author damien;	state Exp;
branches;
next	1.43;

1.43
date	2008.08.12.19.21.04;	author damien;	state Exp;
branches;
next	1.42;

1.42
date	2008.08.12.18.48.35;	author damien;	state Exp;
branches;
next	1.41;

1.41
date	2008.08.12.18.30.02;	author damien;	state Exp;
branches;
next	1.40;

1.40
date	2008.08.12.18.22.41;	author damien;	state Exp;
branches;
next	1.39;

1.39
date	2008.08.12.16.51.39;	author damien;	state Exp;
branches;
next	1.38;

1.38
date	2008.08.12.16.24.24;	author damien;	state Exp;
branches;
next	1.37;

1.37
date	2008.07.27.14.15.42;	author damien;	state Exp;
branches;
next	1.36;

1.36
date	2008.07.21.19.27.26;	author damien;	state Exp;
branches;
next	1.35;

1.35
date	2008.04.16.18.32.15;	author damien;	state Exp;
branches;
next	1.34;

1.34
date	2007.08.29.19.57.17;	author damien;	state Exp;
branches;
next	1.33;

1.33
date	2007.08.01.12.23.26;	author damien;	state Exp;
branches;
next	1.32;

1.32
date	2007.07.28.10.55.29;	author damien;	state Exp;
branches;
next	1.31;

1.31
date	2007.07.24.16.44.01;	author damien;	state Exp;
branches;
next	1.30;

1.30
date	2007.07.05.20.59.25;	author damien;	state Exp;
branches;
next	1.29;

1.29
date	2007.07.05.20.11.04;	author damien;	state Exp;
branches;
next	1.28;

1.28
date	2007.07.04.20.32.43;	author damien;	state Exp;
branches;
next	1.27;

1.27
date	2007.07.03.15.22.15;	author claudio;	state Exp;
branches;
next	1.26;

1.26
date	2007.07.03.15.02.07;	author claudio;	state Exp;
branches;
next	1.25;

1.25
date	2007.07.02.21.18.17;	author damien;	state Exp;
branches;
next	1.24;

1.24
date	2007.07.02.20.42.30;	author damien;	state Exp;
branches;
next	1.23;

1.23
date	2007.07.02.19.36.47;	author damien;	state Exp;
branches;
next	1.22;

1.22
date	2007.07.02.18.16.35;	author damien;	state Exp;
branches;
next	1.21;

1.21
date	2007.07.02.16.33.20;	author damien;	state Exp;
branches;
next	1.20;

1.20
date	2007.06.21.21.21.54;	author damien;	state Exp;
branches;
next	1.19;

1.19
date	2007.06.21.19.45.45;	author damien;	state Exp;
branches;
next	1.18;

1.18
date	2007.06.21.18.18.48;	author damien;	state Exp;
branches;
next	1.17;

1.17
date	2007.06.17.09.05.44;	author damien;	state Exp;
branches;
next	1.16;

1.16
date	2007.06.17.09.02.28;	author damien;	state Exp;
branches;
next	1.15;

1.15
date	2007.06.11.19.41.18;	author damien;	state Exp;
branches;
next	1.14;

1.14
date	2007.06.11.19.35.24;	author damien;	state Exp;
branches;
next	1.13;

1.13
date	2007.06.07.20.20.15;	author damien;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.06.19.31.07;	author damien;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.22.16.19.57;	author fgsch;	state Exp;
branches;
next	1.10;

1.10
date	2005.09.08.13.24.52;	author reyk;	state Exp;
branches;
next	1.9;

1.9
date	2005.05.25.07.40.49;	author reyk;	state Exp;
branches;
next	1.8;

1.8
date	2005.02.17.18.28.05;	author reyk;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.30.23.32.55;	author reyk;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.28.23.07.32;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.25.20.40.19;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.23.12.27.25;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.23.11.54.08;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.20.22.21.13;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.22.22.53.51;	author millert;	state Exp;
branches;
next	;


desc
@@


1.60
log
@Add the definition of IEEE80211_DUR_DS_SHSLOT.

From IEEE Std. 802.11-2016, Table 18-5 "ERP characteristics", p. 2332:

aSlotTime characteristic:
 If dont11OperatingClassesRequired is false:
 Long  = 20 us
 Short = 9 us

ok stsp@@
@
text
@/*	$OpenBSD: ieee80211.h,v 1.59 2017/04/23 21:04:55 stsp Exp $	*/
/*	$NetBSD: ieee80211.h,v 1.6 2004/04/30 23:51:53 dyoung Exp $	*/

/*-
 * Copyright (c) 2001 Atsushi Onoe
 * Copyright (c) 2002, 2003 Sam Leffler, Errno Consulting
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef _NET80211_IEEE80211_H_
#define _NET80211_IEEE80211_H_

/*
 * 802.11 protocol definitions.
 */

#define IEEE80211_ADDR_LEN	6	/* size of 802.11 address */
/* is 802.11 address multicast/broadcast? */
#define IEEE80211_IS_MULTICAST(_a)	(*(_a) & 0x01)

/*
 * Generic definitions for IEEE 802.11 frames.
 */
struct ieee80211_frame {
	u_int8_t	i_fc[2];
	u_int8_t	i_dur[2];
	u_int8_t	i_addr1[IEEE80211_ADDR_LEN];
	u_int8_t	i_addr2[IEEE80211_ADDR_LEN];
	u_int8_t	i_addr3[IEEE80211_ADDR_LEN];
	u_int8_t	i_seq[2];
} __packed;

struct ieee80211_qosframe {
	u_int8_t	i_fc[2];
	u_int8_t	i_dur[2];
	u_int8_t	i_addr1[IEEE80211_ADDR_LEN];
	u_int8_t	i_addr2[IEEE80211_ADDR_LEN];
	u_int8_t	i_addr3[IEEE80211_ADDR_LEN];
	u_int8_t	i_seq[2];
	u_int8_t	i_qos[2];
} __packed;

struct ieee80211_htframe {		/* 11n */
	u_int8_t	i_fc[2];
	u_int8_t	i_dur[2];
	u_int8_t	i_addr1[IEEE80211_ADDR_LEN];
	u_int8_t	i_addr2[IEEE80211_ADDR_LEN];
	u_int8_t	i_addr3[IEEE80211_ADDR_LEN];
	u_int8_t	i_seq[2];
	u_int8_t	i_qos[2];
	u_int8_t	i_ht[4];
} __packed;

struct ieee80211_frame_addr4 {
	u_int8_t	i_fc[2];
	u_int8_t	i_dur[2];
	u_int8_t	i_addr1[IEEE80211_ADDR_LEN];
	u_int8_t	i_addr2[IEEE80211_ADDR_LEN];
	u_int8_t	i_addr3[IEEE80211_ADDR_LEN];
	u_int8_t	i_seq[2];
	u_int8_t	i_addr4[IEEE80211_ADDR_LEN];
} __packed;

struct ieee80211_qosframe_addr4 {
	u_int8_t	i_fc[2];
	u_int8_t	i_dur[2];
	u_int8_t	i_addr1[IEEE80211_ADDR_LEN];
	u_int8_t	i_addr2[IEEE80211_ADDR_LEN];
	u_int8_t	i_addr3[IEEE80211_ADDR_LEN];
	u_int8_t	i_seq[2];
	u_int8_t	i_addr4[IEEE80211_ADDR_LEN];
	u_int8_t	i_qos[2];
} __packed;

struct ieee80211_htframe_addr4 {	/* 11n */
	u_int8_t	i_fc[2];
	u_int8_t	i_dur[2];
	u_int8_t	i_addr1[IEEE80211_ADDR_LEN];
	u_int8_t	i_addr2[IEEE80211_ADDR_LEN];
	u_int8_t	i_addr3[IEEE80211_ADDR_LEN];
	u_int8_t	i_seq[2];
	u_int8_t	i_addr4[IEEE80211_ADDR_LEN];
	u_int8_t	i_qos[2];
	u_int8_t	i_ht[4];
} __packed;

#define	IEEE80211_FC0_VERSION_MASK		0x03
#define	IEEE80211_FC0_VERSION_SHIFT		0
#define	IEEE80211_FC0_VERSION_0			0x00
#define	IEEE80211_FC0_TYPE_MASK			0x0c
#define	IEEE80211_FC0_TYPE_SHIFT		2
#define	IEEE80211_FC0_TYPE_MGT			0x00
#define	IEEE80211_FC0_TYPE_CTL			0x04
#define	IEEE80211_FC0_TYPE_DATA			0x08

#define	IEEE80211_FC0_SUBTYPE_MASK		0xf0
#define	IEEE80211_FC0_SUBTYPE_SHIFT		4
/* for TYPE_MGT */
#define	IEEE80211_FC0_SUBTYPE_ASSOC_REQ		0x00
#define	IEEE80211_FC0_SUBTYPE_ASSOC_RESP	0x10
#define	IEEE80211_FC0_SUBTYPE_REASSOC_REQ	0x20
#define	IEEE80211_FC0_SUBTYPE_REASSOC_RESP	0x30
#define	IEEE80211_FC0_SUBTYPE_PROBE_REQ		0x40
#define	IEEE80211_FC0_SUBTYPE_PROBE_RESP	0x50
#define	IEEE80211_FC0_SUBTYPE_BEACON		0x80
#define	IEEE80211_FC0_SUBTYPE_ATIM		0x90
#define	IEEE80211_FC0_SUBTYPE_DISASSOC		0xa0
#define	IEEE80211_FC0_SUBTYPE_AUTH		0xb0
#define	IEEE80211_FC0_SUBTYPE_DEAUTH		0xc0
#define IEEE80211_FC0_SUBTYPE_ACTION		0xd0
#define IEEE80211_FC0_SUBTYPE_ACTION_NOACK	0xe0	/* 11n */
/* for TYPE_CTL */
#define IEEE80211_FC0_SUBTYPE_WRAPPER		0x70	/* 11n */
#define IEEE80211_FC0_SUBTYPE_BAR		0x80
#define IEEE80211_FC0_SUBTYPE_BA		0x90
#define	IEEE80211_FC0_SUBTYPE_PS_POLL		0xa0
#define	IEEE80211_FC0_SUBTYPE_RTS		0xb0
#define	IEEE80211_FC0_SUBTYPE_CTS		0xc0
#define	IEEE80211_FC0_SUBTYPE_ACK		0xd0
#define	IEEE80211_FC0_SUBTYPE_CF_END		0xe0
#define	IEEE80211_FC0_SUBTYPE_CF_END_ACK	0xf0
/* for TYPE_DATA (bit combination) */
#define	IEEE80211_FC0_SUBTYPE_DATA		0x00
#define	IEEE80211_FC0_SUBTYPE_CF_ACK		0x10
#define	IEEE80211_FC0_SUBTYPE_CF_POLL		0x20
#define	IEEE80211_FC0_SUBTYPE_CF_ACPL		0x30
#define	IEEE80211_FC0_SUBTYPE_NODATA		0x40
#define	IEEE80211_FC0_SUBTYPE_CFACK		0x50
#define	IEEE80211_FC0_SUBTYPE_CFPOLL		0x60
#define	IEEE80211_FC0_SUBTYPE_CF_ACK_CF_ACK	0x70
#define	IEEE80211_FC0_SUBTYPE_QOS		0x80

#define	IEEE80211_FC1_DIR_MASK			0x03
#define	IEEE80211_FC1_DIR_NODS			0x00	/* STA->STA */
#define	IEEE80211_FC1_DIR_TODS			0x01	/* STA->AP  */
#define	IEEE80211_FC1_DIR_FROMDS		0x02	/* AP ->STA */
#define	IEEE80211_FC1_DIR_DSTODS		0x03	/* AP ->AP  */

#define	IEEE80211_FC1_MORE_FRAG			0x04
#define	IEEE80211_FC1_RETRY			0x08
#define	IEEE80211_FC1_PWR_MGT			0x10
#define	IEEE80211_FC1_MORE_DATA			0x20
#define	IEEE80211_FC1_PROTECTED			0x40
#define	IEEE80211_FC1_WEP			0x40	/* pre-RSNA compat */
#define	IEEE80211_FC1_ORDER			0x80
#define IEEE80211_FC1_BITS					\
	"\20\03MORE_FRAG\04RETRY\05PWR_MGT\06MORE_DATA"		\
	"\07PROTECTED\08ORDER"

/*
 * Sequence Control field (see 802.11-2012 8.2.4.4).
 */
#define	IEEE80211_SEQ_FRAG_MASK			0x000f
#define	IEEE80211_SEQ_FRAG_SHIFT		0
#define	IEEE80211_SEQ_SEQ_MASK			0xfff0
#define	IEEE80211_SEQ_SEQ_SHIFT			4

#define	IEEE80211_NWID_LEN			32
#define IEEE80211_MMIE_LEN			18	/* 11w */

/*
 * QoS Control field (see 802.11-2012 8.2.4.5).
 */
#define IEEE80211_QOS_TXOP			0xff00
#define IEEE80211_QOS_AMSDU			0x0080	/* 11n */
#define IEEE80211_QOS_ACK_POLICY_NORMAL		0x0000
#define IEEE80211_QOS_ACK_POLICY_NOACK		0x0020
#define IEEE80211_QOS_ACK_POLICY_NOEXPLACK	0x0040
#define IEEE80211_QOS_ACK_POLICY_BA		0x0060
#define IEEE80211_QOS_ACK_POLICY_MASK		0x0060
#define IEEE80211_QOS_ACK_POLICY_SHIFT		5
#define IEEE80211_QOS_EOSP			0x0010
#define IEEE80211_QOS_TID			0x000f

/*
 * Control frames.
 */
struct ieee80211_frame_min {
	u_int8_t	i_fc[2];
	u_int8_t	i_dur[2];
	u_int8_t	i_addr1[IEEE80211_ADDR_LEN];
	u_int8_t	i_addr2[IEEE80211_ADDR_LEN];
	/* FCS */
} __packed;

struct ieee80211_frame_rts {
	u_int8_t	i_fc[2];
	u_int8_t	i_dur[2];
	u_int8_t	i_ra[IEEE80211_ADDR_LEN];
	u_int8_t	i_ta[IEEE80211_ADDR_LEN];
	/* FCS */
} __packed;

struct ieee80211_frame_cts {
	u_int8_t	i_fc[2];
	u_int8_t	i_dur[2];
	u_int8_t	i_ra[IEEE80211_ADDR_LEN];
	/* FCS */
} __packed;

struct ieee80211_frame_ack {
	u_int8_t	i_fc[2];
	u_int8_t	i_dur[2];
	u_int8_t	i_ra[IEEE80211_ADDR_LEN];
	/* FCS */
} __packed;

struct ieee80211_frame_pspoll {
	u_int8_t	i_fc[2];
	u_int8_t	i_aid[2];
	u_int8_t	i_bssid[IEEE80211_ADDR_LEN];
	u_int8_t	i_ta[IEEE80211_ADDR_LEN];
	/* FCS */
} __packed;

struct ieee80211_frame_cfend {		/* NB: also CF-End+CF-Ack */
	u_int8_t	i_fc[2];
	u_int8_t	i_dur[2];	/* should be zero */
	u_int8_t	i_ra[IEEE80211_ADDR_LEN];
	u_int8_t	i_bssid[IEEE80211_ADDR_LEN];
	/* FCS */
} __packed;

#ifdef _KERNEL
static __inline int
ieee80211_has_seq(const struct ieee80211_frame *wh)
{
	return (wh->i_fc[0] & IEEE80211_FC0_TYPE_MASK) !=
	    IEEE80211_FC0_TYPE_CTL;
}

static __inline int
ieee80211_has_addr4(const struct ieee80211_frame *wh)
{
	return (wh->i_fc[1] & IEEE80211_FC1_DIR_MASK) ==
	    IEEE80211_FC1_DIR_DSTODS;
}

static __inline int
ieee80211_has_qos(const struct ieee80211_frame *wh)
{
	return (wh->i_fc[0] &
	    (IEEE80211_FC0_TYPE_MASK | IEEE80211_FC0_SUBTYPE_QOS)) ==
	    (IEEE80211_FC0_TYPE_DATA | IEEE80211_FC0_SUBTYPE_QOS);
}

static __inline int
ieee80211_has_htc(const struct ieee80211_frame *wh)
{
	return (wh->i_fc[1] & IEEE80211_FC1_ORDER) &&
	    (ieee80211_has_qos(wh) ||
	     (wh->i_fc[0] & IEEE80211_FC0_TYPE_MASK) ==
	     IEEE80211_FC0_TYPE_MGT);
}

static __inline u_int16_t
ieee80211_get_qos(const struct ieee80211_frame *wh)
{
	const u_int8_t *frm;

	if (ieee80211_has_addr4(wh))
		frm = ((const struct ieee80211_qosframe_addr4 *)wh)->i_qos;
	else
		frm = ((const struct ieee80211_qosframe *)wh)->i_qos;

	return letoh16(*(const u_int16_t *)frm);
}
#endif	/* _KERNEL */

/*
 * Capability Information field (see 802.11-2012 8.4.1.4).
 */
#define	IEEE80211_CAPINFO_ESS			0x0001
#define	IEEE80211_CAPINFO_IBSS			0x0002
#define	IEEE80211_CAPINFO_CF_POLLABLE		0x0004
#define	IEEE80211_CAPINFO_CF_POLLREQ		0x0008
#define	IEEE80211_CAPINFO_PRIVACY		0x0010
#define	IEEE80211_CAPINFO_SHORT_PREAMBLE	0x0020
#define	IEEE80211_CAPINFO_PBCC			0x0040
#define	IEEE80211_CAPINFO_CHNL_AGILITY		0x0080
#define IEEE80211_CAPINFO_SPECTRUM_MGMT		0x0100
#define IEEE80211_CAPINFO_QOS			0x0200
#define	IEEE80211_CAPINFO_SHORT_SLOTTIME	0x0400
#define	IEEE80211_CAPINFO_APSD			0x0800
#define	IEEE80211_CAPINFO_RADIO_MEASUREMENT	0x1000
#define	IEEE80211_CAPINFO_DSSSOFDM		0x2000
#define IEEE80211_CAPINFO_DELAYED_B_ACK		0x4000
#define IEEE80211_CAPINFO_IMMEDIATE_B_ACK	0x8000
#define IEEE80211_CAPINFO_BITS					\
	"\10\01ESS\02IBSS\03CF_POLLABLE\04CF_POLLREQ"		\
	"\05PRIVACY\06SHORT_PREAMBLE\07PBCC\10CHNL_AGILITY"	\
	"\11SPECTRUM_MGMT\12QOS\13SHORT_SLOTTIME\14APSD"	\
	"\15RADIO_MEASUREMENT\16DSSSOFDM\17DELAYED_B_ACK\20IMMEDIATE_B_ACK"

/*
 * Information element IDs (see 802.11-2012 Table 8.4.2).
 */
enum {
	IEEE80211_ELEMID_SSID			= 0,
	IEEE80211_ELEMID_RATES			= 1,
	IEEE80211_ELEMID_FHPARMS		= 2,
	IEEE80211_ELEMID_DSPARMS		= 3,
	IEEE80211_ELEMID_CFPARMS		= 4,
	IEEE80211_ELEMID_TIM			= 5,
	IEEE80211_ELEMID_IBSSPARMS		= 6,
	IEEE80211_ELEMID_COUNTRY		= 7,
	IEEE80211_ELEMID_HOPPING_PARMS		= 8,
	IEEE80211_ELEMID_HOPPING_PATTERN	= 9,
	IEEE80211_ELEMID_REQUEST		= 10,
	IEEE80211_ELEMID_QBSS_LOAD		= 11,
	IEEE80211_ELEMID_EDCAPARMS		= 12,
	IEEE80211_ELEMID_TSPEC			= 13,
	IEEE80211_ELEMID_TCLASS			= 14,
	IEEE80211_ELEMID_SCHEDULE		= 15,
	IEEE80211_ELEMID_CHALLENGE		= 16,
	/* 17-31 reserved for challenge text extension */
	IEEE80211_ELEMID_POWER_CONSTRAINT	= 32,
	IEEE80211_ELEMID_POWER_CAP		= 33,
	IEEE80211_ELEMID_TPC_REQUEST		= 34,
	IEEE80211_ELEMID_TPC_REPORT		= 35,
	IEEE80211_ELEMID_SUPP_CHNLS		= 35,
	IEEE80211_ELEMID_CSA			= 37,	/* 11h */
	IEEE80211_ELEMID_MEASUREMENT_REQUEST	= 38,	/* DFS */
	IEEE80211_ELEMID_MEASUREMENT_REPORT	= 39,	/* DFS */
	IEEE80211_ELEMID_QUIET			= 40,
	IEEE80211_ELEMID_IBSS_DFS		= 41,
	IEEE80211_ELEMID_ERP			= 42,
	IEEE80211_ELEMID_TS_DELAY		= 43,
	IEEE80211_ELEMID_TCLAS			= 44,
	IEEE80211_ELEMID_HTCAPS			= 45,	/* 11n */
	IEEE80211_ELEMID_QOS_CAP		= 46,
	/* 47 reserved */
	IEEE80211_ELEMID_RSN			= 48,
	/* 49 reserved */
	IEEE80211_ELEMID_XRATES			= 50,
	IEEE80211_ELEMID_AP_CHNL_REPORT		= 51,
	IEEE80211_ELEMID_NBR_REPORT		= 52,
	IEEE80211_ELEMID_RCPI			= 53,
	IEEE80211_ELEMID_MDE			= 54,
	IEEE80211_ELEMID_FTE			= 55,
	IEEE80211_ELEMID_TIE			= 56,	/* 11r */
	IEEE80211_ELEMID_RDE			= 57,
	IEEE80211_ELEMID_DSE			= 58,
	IEEE80211_ELEMID_SUPP_OPCLASS		= 59,
	IEEE80211_ELEMID_XCSA			= 60,
	IEEE80211_ELEMID_HTOP			= 61,	/* 11n */
	IEEE80211_ELEMID_SECONDARY_CHANL_OFFSET	= 62,	/* 11n */
	IEEE80211_ELEMID_AVG_ACCESS_DELAY	= 63,
	IEEE80211_ELEMID_ANTENNA		= 64,
	IEEE80211_ELEMID_RSNI			= 65,
	IEEE80211_ELEMID_MEASUREMENT_PILOT_TX	= 66,
	IEEE80211_ELEMID_AVAIL_CAPACITY		= 67,
	IEEE80211_ELEMID_AC_ACCESS_DELAY	= 68,
	IEEE80211_ELEMID_TIME_ADVERT		= 69,
	IEEE80211_ELEMID_RM			= 70,
	IEEE80211_ELEMID_MULTI_BSSID		= 71,
	IEEE80211_ELEMID_20_40_CBW_COEX		= 72,	/* 11n */
	IEEE80211_ELEMID_20_40_CBW_INTOLERANT	= 73,	/* 11n */
	IEEE80211_ELEMID_SCAN_PARAM_OVERLAP	= 74,
	IEEE80211_ELEMID_RIC			= 75,
	IEEE80211_ELEMID_MMIE			= 76,	/* 11w */
	IEEE80211_ELEMID_EVENT_REQUEST		= 78,
	IEEE80211_ELEMID_EVENT_REPORT		= 79,
	IEEE80211_ELEMID_DIAG_REQUEST		= 80,
	IEEE80211_ELEMID_DIAG_REPORT		= 81,
	IEEE80211_ELEMID_LOCATION_PARMS		= 82,
	IEEE80211_ELEMID_NONTX_BSSID		= 83,
	IEEE80211_ELEMID_SSID_LIST		= 84,
	IEEE80211_ELEMID_MULTI_BSSID_IDX	= 85,
	IEEE80211_ELEMID_FMS_DESC		= 86,
	IEEE80211_ELEMID_FMS_REQUEST		= 87,
	IEEE80211_ELEMID_FMS_RESPONSE		= 88,
	IEEE80211_ELEMID_QOS_TRAFFIC_CAP	= 89,
	IEEE80211_ELEMID_MAX_IDLE_PERIOD	= 90,
	IEEE80211_ELEMID_TFS_REQUEST		= 91,
	IEEE80211_ELEMID_TFS_RESPONSE		= 92,
	IEEE80211_ELEMID_WNM_SLEEP		= 93,
	IEEE80211_ELEMID_TIM_BCAST_REQUEST	= 94,
	IEEE80211_ELEMID_TIM_BCAST_RESPONSE	= 95,
	IEEE80211_ELEMID_INTERFERENCE_REPORT	= 96,
	IEEE80211_ELEMID_CHNL_USAGE		= 97,
	IEEE80211_ELEMID_TIME_ZONE		= 98,
	IEEE80211_ELEMID_DMS_REQUEST		= 99,
	IEEE80211_ELEMID_DMS_RESPONSE		= 100,
	IEEE80211_ELEMID_LINK_ID		= 101,
	IEEE80211_ELEMID_WAKE_SCHED		= 102,
	/* 103 undefined */
	IEEE80211_ELEMID_CHNL_SWITCH_TIMING	= 104,
	IEEE80211_ELEMID_PTI_CTRL		= 105,
	IEEE80211_ELEMID_TPU_BUF_STATUS		= 106,
	IEEE80211_ELEMID_INTERWORKING		= 107,
	IEEE80211_ELEMID_ADVERT_PROTOCOL	= 108,
	IEEE80211_ELEMID_EXPEDITED_BW_REQUEST	= 109,
	IEEE80211_ELEMID_QOS_MAP_SET		= 110,
	IEEE80211_ELEMID_ROAMING_CONSORTIUM	= 111,
	IEEE80211_ELEMID_EMERGENCY_ALERT_ID	= 112,
	IEEE80211_ELEMID_MESHCONF		= 113,
	IEEE80211_ELEMID_MESHID			= 114,
	IEEE80211_ELEMID_MESHLINK		= 115,
	IEEE80211_ELEMID_MESHCNGST		= 116,
	IEEE80211_ELEMID_MESHPEER		= 117,
	IEEE80211_ELEMID_MESHCSA		= 118,
	IEEE80211_ELEMID_MESHAWAKEW		= 119,
	IEEE80211_ELEMID_MESHBEACONT		= 120,
	IEEE80211_ELEMID_MCCAOP_SETUP_REQUEST	= 121,
	IEEE80211_ELEMID_MCCAOP_SETUP_REPLY	= 122,
	IEEE80211_ELEMID_MCCAOP_ADVERT		= 123,
	IEEE80211_ELEMID_MCCAOP_TEARDOWN	= 124,
	IEEE80211_ELEMID_MESHGANN		= 125,
	IEEE80211_ELEMID_MESHRANN		= 126,
	IEEE80211_ELEMID_XCAPS			= 127,
	/* 128-129 reserved */
	IEEE80211_ELEMID_MESHPREQ		= 130,
	IEEE80211_ELEMID_MESHPREP		= 131,
	IEEE80211_ELEMID_MESHPERR		= 132,
	/* 133-136 reserved */
	IEEE80211_ELEMID_MESHPXU		= 137,
	IEEE80211_ELEMID_MESHPXUC		= 138,
	IEEE80211_ELEMID_AUTH_MESH_PEERING_XCHG	= 139,
	IEEE80211_ELEMID_MIC			= 140,
	IEEE80211_ELEMID_DEST_URI		= 141,
	IEEE80211_ELEMID_U_APSD_COEX		= 142,
	/* 143-174 reserved */
	IEEE80211_ELEMID_MCCAOP_ADVERT_OVIEW	= 174,
	/* 175-220 reserved */
	IEEE80211_ELEMID_VENDOR			= 221	/* vendor private */
	/* 222-255 reserved */
};

/*
 * Action field category values (see 802.11-2012 8.4.1.11 Table 8-38).
 */
enum {
	IEEE80211_CATEG_SPECTRUM		= 0,
	IEEE80211_CATEG_QOS			= 1,
	IEEE80211_CATEG_DLS			= 2,
	IEEE80211_CATEG_BA			= 3,
	IEEE80211_CATEG_PUB			= 4,
	IEEE80211_CATEG_RADIO_MSRMNT		= 5,
	IEEE80211_CATEG_FAST_BSS_TRANS		= 6,
	IEEE80211_CATEG_HT			= 7,	/* 11n */
	IEEE80211_CATEG_SA_QUERY		= 8,	/* 11w */
	IEEE80211_CATEG_PROT_DUAL_PUBLIC_ACTION	= 9,
	IEEE80211_CATEG_WNM			= 10,
	IEEE80211_CATEG_UNPROT_WNM		= 11,
	IEEE80211_CATEG_TDLS			= 12,
	IEEE80211_CATEG_MESH			= 13,
	IEEE80211_CATEG_MULTIHOP		= 14,
	IEEE80211_CATEG_SELF_PROT		= 15,
	/* 16-125 reserved */
	IEEE80211_CATEG_PROT_VENDOR		= 126,
	IEEE80211_CATEG_VENDOR			= 127
	/* 128-255 error */
};

/*
 * Block Ack Action field values (see 802.11-2012 8.5.5 Table 8-202).
 */
#define IEEE80211_ACTION_ADDBA_REQ	0
#define IEEE80211_ACTION_ADDBA_RESP	1
#define IEEE80211_ACTION_DELBA		2
/* 3-255 reserved */

/*
 * SA Query Action field values (see 802.11-2012 8.5.10 Table 8-227).
 */
#define IEEE80211_ACTION_SA_QUERY_REQ	0
#define IEEE80211_ACTION_SA_QUERY_RESP	1

/*
 * HT Action field values (see 802.11-2012 8.5.12 Table 8-229).
 */
#define IEEE80211_ACTION_NOTIFYCW		0
#define IEEE80211_ACTION_SM_PWRSAVE		1
#define IEEE80211_ACTION_PSMP			2
#define IEEE80211_ACTION_SET_PCO_PHASE		3
#define IEEE80211_ACTION_CSI			4
#define IEEE80211_ACTION_NONCOMPRESSED_BF	5
#define IEEE80211_ACTION_COMPRESSED_BF		6
#define IEEE80211_ACTION_ASEL_IDX_FEEDBACK	7
/* 8-255 reserved */

#define	IEEE80211_RATE_BASIC			0x80
#define	IEEE80211_RATE_VAL			0x7f
#define	IEEE80211_RATE_SIZE			8	/* 802.11 standard */
#define	IEEE80211_RATE_MAXSIZE			15	/* max rates we'll handle */

#define	IEEE80211_HT_NUM_MCS			77

/*
 * BlockAck/BlockAckReq Control field (see 802.11-2012 8.3.1.9 Figure 8-25).
 */
#define IEEE80211_BA_ACK_POLICY		0x0001
#define IEEE80211_BA_MULTI_TID		0x0002
#define IEEE80211_BA_COMPRESSED		0x0004
#define IEEE80211_BA_TID_INFO_MASK	0xf000
#define IEEE80211_BA_TID_INFO_SHIFT	12

/*
 * ADDBA Parameter Set field (see 802.11-2012 8.4.1.14 Figure 8-48).
 */
#define IEEE80211_ADDBA_AMSDU		0x0001 /* A-MSDU in A-MPDU supported */
#define IEEE80211_ADDBA_BA_POLICY	0x0002 /* 1=immediate BA 0=delayed BA */
#define IEEE80211_ADDBA_TID_MASK	0x003c
#define IEEE80211_ADDBA_TID_SHIFT	2
#define IEEE80211_ADDBA_BUFSZ_MASK	0xffc0
#define IEEE80211_ADDBA_BUFSZ_SHIFT	6

/*
 * DELBA Parameter Set field (see 802.11-2012 8.4.1.16 Figure 8-50).
 */
#define IEEE80211_DELBA_INITIATOR	0x0800
#define IEEE80211_DELBA_TID_INFO_MASK	0xf000
#define IEEE80211_DELBA_TID_INFO_SHIFT	12

/*
 * ERP information element parameters (see 802.11-2012 8.4.2.14 Figure 8-95).
 */
#define	IEEE80211_ERP_NON_ERP_PRESENT		0x01
#define	IEEE80211_ERP_USE_PROTECTION		0x02
#define	IEEE80211_ERP_BARKER_MODE		0x04

/*
 * RSN capabilities (see 802.11-2012 8.4.2.27.4).
 */
#define IEEE80211_RSNCAP_PREAUTH		0x0001
#define IEEE80211_RSNCAP_NOPAIRWISE		0x0002
#define IEEE80211_RSNCAP_PTKSA_RCNT_MASK	0x000c
#define IEEE80211_RSNCAP_PTKSA_RCNT_SHIFT	2
#define IEEE80211_RSNCAP_GTKSA_RCNT_MASK	0x0030
#define IEEE80211_RSNCAP_GTKSA_RCNT_SHIFT	4
#define IEEE80211_RSNCAP_RCNT1			0
#define IEEE80211_RSNCAP_RCNT2			1
#define IEEE80211_RSNCAP_RCNT4			2
#define IEEE80211_RSNCAP_RCNT16			3
#define IEEE80211_RSNCAP_MFPR			0x0040	/* 11w */
#define IEEE80211_RSNCAP_MFPC			0x0080	/* 11w */
#define IEEE80211_RSNCAP_PEERKEYENA		0x0200
#define IEEE80211_RSNCAP_SPPAMSDUC		0x0400	/* 11n */
#define IEEE80211_RSNCAP_SPPAMSDUR		0x0800	/* 11n */
#define IEEE80211_RSNCAP_PBAC			0x1000	/* 11n */
#define IEEE80211_RSNCAP_EXTENDED_KEYID		0x2000

/*
 * HT Capabilities Info (see 802.11-2012 8.4.2.58.2).
 */
#define IEEE80211_HTCAP_LDPC		0x00000001
#define IEEE80211_HTCAP_CBW20_40	0x00000002
#define IEEE80211_HTCAP_SMPS_MASK	0x0000000c
#define IEEE80211_HTCAP_SMPS_SHIFT	2
#define IEEE80211_HTCAP_SMPS_STA	0
#define IEEE80211_HTCAP_SMPS_DYN	1
#define IEEE80211_HTCAP_SMPS_DIS	3
#define IEEE80211_HTCAP_GF		0x00000010
#define IEEE80211_HTCAP_SGI20		0x00000020
#define IEEE80211_HTCAP_SGI40		0x00000040
#define IEEE80211_HTCAP_TXSTBC		0x00000080
#define IEEE80211_HTCAP_RXSTBC_MASK	0x00000300
#define IEEE80211_HTCAP_RXSTBC_SHIFT	8
#define IEEE80211_HTCAP_DELAYEDBA	0x00000400
#define IEEE80211_HTCAP_AMSDU7935	0x00000800
#define IEEE80211_HTCAP_DSSSCCK40	0x00001000
#define IEEE80211_HTCAP_PSMP		0x00002000
#define IEEE80211_HTCAP_40INTOLERANT	0x00004000
#define IEEE80211_HTCAP_LSIGTXOPPROT	0x00008000

/*
 * HT A-MPDU parameters (see 802.11-2012 8.4.2.58.3).
 */
#define IEEE80211_AMPDU_PARAM_LE	0x03
#define IEEE80211_AMPDU_PARAM_SS	0x1c
#define IEEE80211_AMPDU_PARAM_SS_NONE	(0 << 2)
#define IEEE80211_AMPDU_PARAM_SS_0_25	(1 << 2)
#define IEEE80211_AMPDU_PARAM_SS_0_5	(2 << 2)
#define IEEE80211_AMPDU_PARAM_SS_1	(3 << 2)
#define IEEE80211_AMPDU_PARAM_SS_2	(4 << 2)
#define IEEE80211_AMPDU_PARAM_SS_4	(5 << 2)
#define IEEE80211_AMPDU_PARAM_SS_8	(6 << 2)
#define IEEE80211_AMPDU_PARAM_SS_16	(7 << 2)
/* bits 5-7 reserved */

/*
 * HT Supported MCS Set (see 802.11-2012 8.4.2.58.4).
 * This field is 16 bytes in size. Bitmasks given below
 * operate on 8 or 16 bit integer subsets of this field
 * for use with ieee80211com and ieee80211_node.
 */
/* Bits 0-76: Supported Rx MCS bitmask */
/* Bits 77-79: Reserved */
/* Bits 80-89: Highest Rx rate in units of 1MB/s */
#define IEEE80211_MCS_RX_RATE_HIGH	0x03ff
/* Bits 90-95: Reserved */
/* Bits 96-100: Tx MCS set */
#define IEEE80211_TX_MCS_SET_DEFINED		0x01
#define IEEE80211_TX_RX_MCS_NOT_EQUAL		0x02
#define IEEE80211_TX_SPATIAL_STREAMS		0x0c
#define IEEE80211_TX_UNEQUAL_MODULATION		0x10
/* Bits 101-127: Reserved */

/*
 * HT Extended Capabilities (see 802.11-2012 8.4.2.58.5).
 */
#define IEEE80211_HTXCAP_PCO		0x0001
#define IEEE80211_HTXCAP_PCOTT_MASK	0x0006
#define IEEE80211_HTXCAP_PCOTT_SHIFT	1
#define IEEE80211_HTXCAP_PCOTT_400	1
#define IEEE80211_HTXCAP_PCOTT_1500	2
#define IEEE80211_HTXCAP_PCOTT_5000	3
/* Bits 3-7 are reserved. */
#define IEEE80211_HTXCAP_MFB_MASK	0x0300
#define IEEE80211_HTXCAP_MFB_SHIFT	8
#define IEEE80211_HTXCAP_MFB_NONE	0
#define IEEE80211_HTXCAP_MFB_UNSOL	2
#define IEEE80211_HTXCAP_MFB_BOTH	3
#define IEEE80211_HTXCAP_HTC		0x0400
#define IEEE80211_HTXCAP_RDRESP		0x0800
/* Bits 12-15 are reserved. */

/*
 * Transmit Beamforming (TxBF) Capabilities (see 802.11-2012 8.4.2.58.6).
 */
#define IEEE80211_TXBFCAP_IMPLICIT_RX			0x00000001
#define IEEE80211_TXBFCAP_RSSC				0x00000002
#define IEEE80211_TXBFCAP_TSSC				0x00000004
#define IEEE80211_TXBFCAP_RNDP				0x00000008
#define IEEE80211_TXBFCAP_TNDP				0x00000010
#define IEEE80211_TXBFCAP_IMPLICIT_TX			0x00000020
#define IEEE80211_TXBFCAP_CALIB_MASK			0x000000c0
#define IEEE80211_TXBFCAP_CALIB_SHIFT			6
#define IEEE80211_TXBFCAP_TX_CSI			0x00000100
#define IEEE80211_TXBFCAP_EXPLICIT_NSC			0x00000200
#define IEEE80211_TXBFCAP_EXPLICIT_CSC			0x00000400
#define IEEE80211_TXBFCAP_CSI_FB_DELAYED		0x00000800
#define IEEE80211_TXBFCAP_CSI_FB_IMMEDIATE		0x00001000
#define IEEE80211_TXBFCAP_EXPLICIT_NB_FB_DELAYED	0x00002000
#define IEEE80211_TXBFCAP_EXPLICIT_NB_FB_IMMEDIATE	0x00004000
#define IEEE80211_TXBFCAP_EXPLICIT_CB_FB_DELAYED	0x00008000
#define IEEE80211_TXBFCAP_EXPLICIT_CB_FB_IMMEDIATE	0x00010000
#define IEEE80211_TXBFCAP_MINIMAL_GROUPING_1_2		0x00020000
#define IEEE80211_TXBFCAP_MINIMAL_GROUPING_1_4		0x00040000
#define IEEE80211_TXBFCAP_CSI_NUM_ANT_MASK		0x00180000
#define IEEE80211_TXBFCAP_CSI_NUM_ANT_SHIFT		19
#define IEEE80211_TXBFCAP_NS_NUM_ANT_MASK		0x00600000
#define IEEE80211_TXBFCAP_NS_NUM_ANT_SHIFT		21
#define IEEE80211_TXBFCAP_CS_NUM_ANT_MASK		0x01800000
#define IEEE80211_TXBFCAP_CS_NUM_ANT_SHIFT		23
#define IEEE80211_TXBFCAP_CSI_NUM_ROWS_MASK		0x06000000
#define IEEE80211_TXBFCAP_CSI_NUM_ROWS_SHIFT		25
#define IEEE80211_TXBFCAP_CHANL_ESTIMATE_MASK		0x18000000
#define IEEE80211_TXBFCAP_CHANL_ESTIMATE_SHIFT		27

/*
 * Antenna Selection (ASEL) Capability (see 802.11-2012 8.4.2.58.7).
 */
#define IEEE80211_ASELCAP_ASEL		0x01
#define IEEE80211_ASELCAP_CSIFB_TX	0x02
#define IEEE80211_ASELCAP_ANT_IDX_FB_TX	0x04
#define IEEE80211_ASELCAP_CSIFB		0x08
#define IEEE80211_ASELCAP_ANT_IDX_FB	0x10
#define IEEE80211_ASELCAP_ASEL_RX	0x20
#define IEEE80211_ASELCAP_TX_SOUND_PPDU	0x20
/* Bit 7 is reserved. */

/*
 * HT Operation element (see 802.11-2012 8.4.2.59).
 */
/* Byte 0 contains primary channel number. */
/* Byte 1. */
#define IEEE80211_HTOP0_SCO_MASK	0x03
#define IEEE80211_HTOP0_SCO_SHIFT	0
#define IEEE80211_HTOP0_SCO_SCN		0
#define IEEE80211_HTOP0_SCO_SCA		1
#define IEEE80211_HTOP0_SCO_SCB		3
#define IEEE80211_HTOP0_CHW		0x04
#define IEEE80211_HTOP0_RIFS		0x08
/* bits 4-7 reserved */
/* Bytes 2-3. */
#define IEEE80211_HTOP1_PROT_MASK	0x0003
#define IEEE80211_HTOP1_PROT_SHIFT	0
#define IEEE80211_HTOP1_NONGF_STA	0x0004
/* Bit 3 is reserved. */
#define IEEE80211_HTOP1_OBSS_NONHT_STA	0x0010
/* Bits 5-15 are reserved. */
/* Bytes 4-5. */
/* Bits 0-5 are reserved. */
#define IEEE80211_HTOP2_DUALBEACON	0x0040
#define IEEE80211_HTOP2_DUALCTSPROT	0x0080
#define IEEE80211_HTOP2_STBCBEACON	0x0100
#define IEEE80211_HTOP2_LSIGTXOP	0x0200
#define IEEE80211_HTOP2_PCOACTIVE	0x0400
#define IEEE80211_HTOP2_PCOPHASE40	0x0800
/* Bits 12-15 are reserved. */

/*
 * EDCA Access Categories.
 */
enum ieee80211_edca_ac {
	EDCA_AC_BK  = 1,	/* Background */
	EDCA_AC_BE  = 0,	/* Best Effort */
	EDCA_AC_VI  = 2,	/* Video */
	EDCA_AC_VO  = 3		/* Voice */
};
#define EDCA_NUM_AC	4

/* number of TID values (traffic identifier) */
#define IEEE80211_NUM_TID	16

/* Atheros private advanced capabilities info */
#define	ATHEROS_CAP_TURBO_PRIME			0x01
#define	ATHEROS_CAP_COMPRESSION			0x02
#define	ATHEROS_CAP_FAST_FRAME			0x04
/* bits 3-6 reserved */
#define	ATHEROS_CAP_BOOST			0x80

/*-
 * Organizationally Unique Identifiers.
 * See http://standards.ieee.org/regauth/oui/oui.txt for a list.
 */
#define ATHEROS_OUI	((const u_int8_t[]){ 0x00, 0x03, 0x7f })
#define BROADCOM_OUI	((const u_int8_t[]){ 0x00, 0x90, 0x4c })
#define IEEE80211_OUI	((const u_int8_t[]){ 0x00, 0x0f, 0xac })
#define MICROSOFT_OUI	((const u_int8_t[]){ 0x00, 0x50, 0xf2 })

#define	IEEE80211_AUTH_ALGORITHM(auth) \
	((auth)[0] | ((auth)[1] << 8))
#define	IEEE80211_AUTH_TRANSACTION(auth) \
	((auth)[2] | ((auth)[3] << 8))
#define	IEEE80211_AUTH_STATUS(auth) \
	((auth)[4] | ((auth)[5] << 8))

/*
 * Authentication Algorithm Number field (see 7.3.1.1).
 */
#define IEEE80211_AUTH_ALG_OPEN			0x0000
#define IEEE80211_AUTH_ALG_SHARED		0x0001
#define IEEE80211_AUTH_ALG_LEAP			0x0080

/*
 * Authentication Transaction Sequence Number field (see 7.3.1.2).
 */
enum {
	IEEE80211_AUTH_OPEN_REQUEST		= 1,
	IEEE80211_AUTH_OPEN_RESPONSE		= 2
};
enum {
	IEEE80211_AUTH_SHARED_REQUEST		= 1,
	IEEE80211_AUTH_SHARED_CHALLENGE		= 2,
	IEEE80211_AUTH_SHARED_RESPONSE		= 3,
	IEEE80211_AUTH_SHARED_PASS		= 4
};

/*
 * Reason codes (see Table 22).
 */
enum {
	IEEE80211_REASON_UNSPECIFIED		= 1,
	IEEE80211_REASON_AUTH_EXPIRE		= 2,
	IEEE80211_REASON_AUTH_LEAVE		= 3,
	IEEE80211_REASON_ASSOC_EXPIRE		= 4,
	IEEE80211_REASON_ASSOC_TOOMANY		= 5,
	IEEE80211_REASON_NOT_AUTHED		= 6,
	IEEE80211_REASON_NOT_ASSOCED		= 7,
	IEEE80211_REASON_ASSOC_LEAVE		= 8,
	IEEE80211_REASON_ASSOC_NOT_AUTHED	= 9,

	/* XXX the following two reason codes are not correct */
	IEEE80211_REASON_RSN_REQUIRED		= 11,
	IEEE80211_REASON_RSN_INCONSISTENT	= 12,

	IEEE80211_REASON_IE_INVALID		= 13,
	IEEE80211_REASON_MIC_FAILURE		= 14,
	IEEE80211_REASON_4WAY_TIMEOUT		= 15,
	IEEE80211_REASON_GROUP_TIMEOUT		= 16,
	IEEE80211_REASON_RSN_DIFFERENT_IE	= 17,
	IEEE80211_REASON_BAD_GROUP_CIPHER	= 18,
	IEEE80211_REASON_BAD_PAIRWISE_CIPHER	= 19,
	IEEE80211_REASON_BAD_AKMP		= 20,
	IEEE80211_REASON_RSN_IE_VER_UNSUP	= 21,
	IEEE80211_REASON_RSN_IE_BAD_CAP		= 22,

	IEEE80211_REASON_CIPHER_REJ_POLICY	= 24,

	IEEE80211_REASON_SETUP_REQUIRED		= 38,
	IEEE80211_REASON_TIMEOUT		= 39
};

/*
 * Status codes (see Table 23).
 */
enum {
	IEEE80211_STATUS_SUCCESS		= 0,
	IEEE80211_STATUS_UNSPECIFIED		= 1,
	IEEE80211_STATUS_CAPINFO		= 10,
	IEEE80211_STATUS_NOT_ASSOCED		= 11,
	IEEE80211_STATUS_OTHER			= 12,
	IEEE80211_STATUS_ALG			= 13,
	IEEE80211_STATUS_SEQUENCE		= 14,
	IEEE80211_STATUS_CHALLENGE		= 15,
	IEEE80211_STATUS_TIMEOUT		= 16,
	IEEE80211_STATUS_TOOMANY		= 17,
	IEEE80211_STATUS_BASIC_RATE		= 18,
	IEEE80211_STATUS_SP_REQUIRED		= 19,
	IEEE80211_STATUS_PBCC_REQUIRED		= 20,
	IEEE80211_STATUS_CA_REQUIRED		= 21,
	IEEE80211_STATUS_TOO_MANY_STATIONS	= 22,
	IEEE80211_STATUS_RATES			= 23,
	IEEE80211_STATUS_SHORTSLOT_REQUIRED	= 25,
	IEEE80211_STATUS_DSSSOFDM_REQUIRED	= 26,

	IEEE80211_STATUS_TRY_AGAIN_LATER	= 30,
	IEEE80211_STATUS_MFP_POLICY		= 31,

	IEEE80211_STATUS_REFUSED		= 37,
	IEEE80211_STATUS_INVALID_PARAM		= 38,

	IEEE80211_STATUS_IE_INVALID		= 40,
	IEEE80211_STATUS_BAD_GROUP_CIPHER	= 41,
	IEEE80211_STATUS_BAD_PAIRWISE_CIPHER	= 42,
	IEEE80211_STATUS_BAD_AKMP		= 43,
	IEEE80211_STATUS_RSN_IE_VER_UNSUP	= 44,

	IEEE80211_STATUS_CIPHER_REJ_POLICY	= 46
};

#define	IEEE80211_WEP_KEYLEN			5	/* 40bit */
#define	IEEE80211_WEP_NKID			4	/* number of key ids */
#define IEEE80211_CHALLENGE_LEN			128

/* WEP header constants */
#define	IEEE80211_WEP_IVLEN			3	/* 24bit */
#define	IEEE80211_WEP_KIDLEN			1	/* 1 octet */
#define	IEEE80211_WEP_CRCLEN			4	/* CRC-32 */
#define	IEEE80211_CRC_LEN			4
#define	IEEE80211_WEP_TOTLEN		(IEEE80211_WEP_IVLEN + \
					 IEEE80211_WEP_KIDLEN + \
					 IEEE80211_WEP_CRCLEN)

/*
 * 802.11i defines an extended IV for use with non-WEP ciphers.
 * When the EXTIV bit is set in the key id byte an additional
 * 4 bytes immediately follow the IV for TKIP.  For CCMP the
 * EXTIV bit is likewise set but the 8 bytes represent the
 * CCMP header rather than IV+extended-IV.
 */
#define	IEEE80211_WEP_EXTIV		0x20
#define	IEEE80211_WEP_EXTIVLEN		4	/* extended IV length */
#define	IEEE80211_WEP_MICLEN		8	/* trailing MIC */

/*
 * Maximum acceptable MTU is:
 *	IEEE80211_MAX_LEN - WEP overhead - CRC -
 *		QoS overhead - RSN/WPA overhead
 * Min is arbitrarily chosen > IEEE80211_MIN_LEN.  The default
 * mtu is Ethernet-compatible; it's set by ether_ifattach.
 */
#define	IEEE80211_MTU_MAX			2290
#define	IEEE80211_MTU_MIN			32

#define	IEEE80211_MAX_LEN			(2300 + IEEE80211_CRC_LEN + \
    (IEEE80211_WEP_IVLEN + IEEE80211_WEP_KIDLEN + IEEE80211_WEP_CRCLEN))
#define	IEEE80211_ACK_LEN \
	(sizeof(struct ieee80211_frame_ack) + IEEE80211_CRC_LEN)
#define	IEEE80211_MIN_LEN \
	(sizeof(struct ieee80211_frame_min) + IEEE80211_CRC_LEN)

/*
 * The 802.11 spec says at most 2007 stations may be
 * associated at once.  For most AP's this is way more
 * than is feasible so we use a default of 1800. This
 * number may be overridden by the driver and/or by
 * user configuration.
 */
#define	IEEE80211_AID_MAX	2007
#define	IEEE80211_AID_DEF	1800
#define IEEE80211_AID(b)	((b) &~ 0xc000)

/*
 * RTS frame length parameters.  The default is specified in
 * the 802.11 spec.  The max may be wrong for jumbo frames.
 */
#define	IEEE80211_RTS_DEFAULT			512
#define	IEEE80211_RTS_MIN			1
#define	IEEE80211_RTS_MAX			IEEE80211_MAX_LEN

#define IEEE80211_PLCP_SERVICE		0x00
#define IEEE80211_PLCP_SERVICE_PBCC	0x08	/* PBCC encoded */
#define IEEE80211_PLCP_SERVICE_LENEXT	0x80	/* length extension bit */

/* One Time Unit (TU) is 1Kus = 1024 microseconds. */
#define IEEE80211_DUR_TU		1024

/* IEEE 802.11b durations for DSSS PHY in microseconds */
#define IEEE80211_DUR_DS_LONG_PREAMBLE	144
#define IEEE80211_DUR_DS_SHORT_PREAMBLE	72
#define	IEEE80211_DUR_DS_PREAMBLE_DIFFERENCE	\
    (IEEE80211_DUR_DS_LONG_PREAMBLE - IEEE80211_DUR_DS_SHORT_PREAMBLE)
#define IEEE80211_DUR_DS_FAST_PLCPHDR	24
#define IEEE80211_DUR_DS_SLOW_PLCPHDR	48
#define	IEEE80211_DUR_DS_PLCPHDR_DIFFERENCE	\
    (IEEE80211_DUR_DS_SLOW_PLCPHDR - IEEE80211_DUR_DS_FAST_PLCPHDR)
#define IEEE80211_DUR_DS_SLOW_ACK	112
#define IEEE80211_DUR_DS_FAST_ACK	56
#define IEEE80211_DUR_DS_SLOW_CTS	112
#define IEEE80211_DUR_DS_FAST_CTS	56
#define IEEE80211_DUR_DS_SLOT		20
#define IEEE80211_DUR_DS_SHSLOT		9
#define IEEE80211_DUR_DS_SIFS		10
#define IEEE80211_DUR_DS_PIFS	(IEEE80211_DUR_DS_SIFS + IEEE80211_DUR_DS_SLOT)
#define IEEE80211_DUR_DS_DIFS	(IEEE80211_DUR_DS_SIFS + \
				 2 * IEEE80211_DUR_DS_SLOT)
#define IEEE80211_DUR_DS_EIFS	(IEEE80211_DUR_DS_SIFS + \
				 IEEE80211_DUR_DS_SLOW_ACK + \
				 IEEE80211_DUR_DS_LONG_PREAMBLE + \
				 IEEE80211_DUR_DS_SLOW_PLCPHDR + \
				 IEEE80211_DUR_DIFS)

/*
 * The RSNA key descriptor used by IEEE 802.11 does not use the IEEE 802.1X
 * key descriptor.  Instead, it uses the key descriptor described in 8.5.2.
 */
#define EAPOL_KEY_NONCE_LEN	32
#define EAPOL_KEY_IV_LEN	16
#define EAPOL_KEY_MIC_LEN	16

struct ieee80211_eapol_key {
	u_int8_t	version;
#define EAPOL_VERSION	1

	u_int8_t	type;
/* IEEE Std 802.1X-2004, 7.5.4 (only type EAPOL-Key is used here) */
#define EAP_PACKET	0
#define EAPOL_START	1
#define EAPOL_LOGOFF	2
#define EAPOL_KEY	3
#define EAPOL_ASF_ALERT	4

	u_int8_t	len[2];
	u_int8_t	desc;
/* IEEE Std 802.1X-2004, 7.6.1 */
#define EAPOL_KEY_DESC_RC4		  1	/* deprecated */
#define EAPOL_KEY_DESC_IEEE80211	  2
#define EAPOL_KEY_DESC_WPA		254	/* non-standard WPA */

	u_int8_t	info[2];
#define EAPOL_KEY_VERSION_MASK	0x7
#define EAPOL_KEY_DESC_V1	1
#define EAPOL_KEY_DESC_V2	2
#define EAPOL_KEY_DESC_V3	3		/* 11r */
#define EAPOL_KEY_PAIRWISE	(1 <<  3)
#define EAPOL_KEY_INSTALL	(1 <<  6)	/* I */
#define EAPOL_KEY_KEYACK	(1 <<  7)	/* A */
#define EAPOL_KEY_KEYMIC	(1 <<  8)	/* M */
#define EAPOL_KEY_SECURE	(1 <<  9)	/* S */
#define EAPOL_KEY_ERROR		(1 << 10)
#define EAPOL_KEY_REQUEST	(1 << 11)
#define EAPOL_KEY_ENCRYPTED	(1 << 12)
#define EAPOL_KEY_SMK		(1 << 13)
/* WPA compatibility */
#define EAPOL_KEY_WPA_KID_MASK	0x3
#define EAPOL_KEY_WPA_KID_SHIFT	4
#define EAPOL_KEY_WPA_TX	EAPOL_KEY_INSTALL

	u_int8_t	keylen[2];
	u_int8_t	replaycnt[8];
	u_int8_t	nonce[EAPOL_KEY_NONCE_LEN];
	u_int8_t	iv[EAPOL_KEY_IV_LEN];
	u_int8_t	rsc[8];
	u_int8_t	reserved[8];
	u_int8_t	mic[EAPOL_KEY_MIC_LEN];
	u_int8_t	paylen[2];
} __packed;

/* Pairwise Transient Key (see 8.5.1.2) */
struct ieee80211_ptk {
	u_int8_t	kck[16];	/* Key Confirmation Key */
	u_int8_t	kek[16];	/* Key Encryption Key */
	u_int8_t	tk[32];		/* Temporal Key */
} __packed;

#define IEEE80211_PMKID_LEN	16
#define IEEE80211_SMKID_LEN	16

/*
 * Key Data Encapsulation (see Table 62).
 */
enum {
	IEEE80211_KDE_GTK	= 1,
	IEEE80211_KDE_MACADDR	= 3,
	IEEE80211_KDE_PMKID	= 4,
	IEEE80211_KDE_SMK	= 5,
	IEEE80211_KDE_NONCE	= 6,
	IEEE80211_KDE_LIFETIME	= 7,
	IEEE80211_KDE_ERROR	= 8,
	IEEE80211_KDE_IGTK	= 9	/* 11w */
};

/*
 * HT protection modes (see 802.11-2012 8.4.2.59)
 */
enum ieee80211_htprot {
	IEEE80211_HTPROT_NONE = 0,	/* only 20/40MHz HT STAs exist */
	IEEE80211_HTPROT_NONMEMBER,	/* non-HT STA overlaps our channel */ 
	IEEE80211_HTPROT_20MHZ,		/* 20MHz HT STA on a 40MHz channel */
	IEEE80211_HTPROT_NONHT_MIXED	/* non-HT STA associated to our BSS */
};

#endif /* _NET80211_IEEE80211_H_ */
@


1.59
log
@Handle unequal numbers of Tx and Rx streams in MiRA.
Problem reported by Colton Lewis on misc@@
ok tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.58 2016/05/12 18:18:48 dcoppa Exp $	*/
d925 1
@


1.58
log
@
Fix "comma at end of enumerator list" warnings

Sure stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.57 2016/01/25 12:51:14 stsp Exp $	*/
d615 2
a616 2
#define IEEE80211_TX_SPATIAL_STREAMS		0x18
#define IEEE80211_TX_UNEQUAL_MODULATION		0x20
@


1.57
log
@Add short comments explaining HT protection modes.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.56 2016/01/06 19:56:50 stsp Exp $	*/
d471 1
a471 1
	IEEE80211_CATEG_VENDOR			= 127,
d841 1
a841 1
	IEEE80211_STATUS_CIPHER_REJ_POLICY	= 46,
d1022 1
a1022 1
	IEEE80211_HTPROT_NONHT_MIXED,	/* non-HT STA associated to our BSS */
@


1.56
log
@Initialize the A-MPDU parameters field in HT capability elements.
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.55 2016/01/04 12:32:06 stsp Exp $	*/
d1019 4
a1022 4
	IEEE80211_HTPROT_NONE = 0,
	IEEE80211_HTPROT_NONMEMBER,
	IEEE80211_HTPROT_20MHZ,
	IEEE80211_HTPROT_NONHT_MIXED,
@


1.55
log
@ADDBA frames have a parameter set which we check against our own capabilities
but we were checking bits in these parameters with the wrong set of bitmasks.
Negotiating A-MPDUs with some APs failed because of this bug.
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.54 2015/11/15 01:05:25 stsp Exp $	*/
d591 8
@


1.54
log
@Declare 802.11n mode and channel flags. Tweak 11n related fields in struct
ieee80211com and move them inside #ifndef IEEE80211_NO_HT without breaking
the build in rsu(4) for RAMDISK_CD.
Also declare 11n protection modes and MCS count.
ok deraadt mpi kettenis guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.53 2015/10/10 07:51:47 stsp Exp $	*/
d517 10
@


1.53
log
@Add macros for A-MPDU and MCS data, both found in HT capabilities element.
typo fix + ok sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.52 2015/07/14 21:13:12 stsp Exp $	*/
d507 2
d581 1
d586 2
a587 1
 * operate on 8 or 16 bit integer subsets of this field.
d668 1
d995 10
@


1.52
log
@In ieee80211.h update references to standard sections to 802.11-2012.
Add missing element IDs (and remove some non-standard ones), action field
categories and values, some 11n related stuff, and other small things.
Use the same element ID symbolic names as FreeBSD where applicable as
suggested by millert.
ok mpi millert
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.51 2015/04/08 21:35:57 sthen Exp $	*/
d573 23
@


1.51
log
@add a #define for IEEE80211_ELEMID_CSA, 802.11h-2003 Channel Switch Announcement
ok stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.50 2013/01/17 02:51:56 claudio Exp $	*/
d170 1
a170 1
 * Sequence Control field (see 7.1.3.4).
d181 1
a181 1
 * QoS Control field (see 7.1.3.5).
d290 1
a290 1
 * Capability Information field (see 7.3.1.4).
d304 1
a304 1
/* bit 12 is reserved */
d312 1
a312 1
	"\16DSSSOFDM\17DELAYED_B_ACK\20IMMEDIATE_B_ACK"
d315 1
a315 1
 * Information elements (see Table 7-26).
d326 3
d331 3
d336 5
d342 4
d347 2
d351 1
d353 1
d355 5
d361 4
d366 14
d381 64
a444 2
	IEEE80211_ELEMID_TPC			= 150,
	IEEE80211_ELEMID_CCKM			= 156,
d446 1
d450 1
a450 1
 * Action field category values (see Table 7-24).
d453 20
a472 6
	IEEE80211_CATEG_SPECTRUM	= 0,
	IEEE80211_CATEG_QOS		= 1,
	IEEE80211_CATEG_DLS		= 2,
	IEEE80211_CATEG_BA		= 3,
	IEEE80211_CATEG_HT		= 7,	/* 11n */
	IEEE80211_CATEG_SA_QUERY	= 8	/* 11w */
d476 1
a476 1
 * Block Ack Action field values (see Table 7-54).
d481 1
d484 1
a484 1
 * SA Query Action field values (see Table 7-57l).
d490 1
a490 1
 * HT Action field values (see Table 7-57m).
d492 9
a500 1
#define IEEE80211_ACTION_NOTIFYCW	0
d508 1
a508 1
 * BlockAck/BlockAckReq Control field (see Figure 7-13).
d517 1
a517 1
 * DELBA Parameter Set field (see Figure 7-34).
d520 2
d524 1
a524 1
 * ERP information element (see 7.3.2.13).
d531 1
a531 1
 * RSN capabilities (see 7.3.2.25.3).
d549 1
d552 1
a552 1
 * HT Capabilities Info (see 7.3.2.57.2).
d575 1
a575 1
 * HT Extended Capabilities (see 7.3.2.57.5).
d594 1
a594 1
 * Transmit Beamforming (TxBF) Capabilities (see 7.3.2.57.6).
d596 29
a624 9
#define IEEE80211_TXBFCAP_IMPLICIT_RX	0x00000001
#define IEEE80211_TXBFCAP_RSSC		0x00000002
#define IEEE80211_TXBFCAP_TSSC		0x00000004
#define IEEE80211_TXBFCAP_RNDP		0x00000008
#define IEEE80211_TXBFCAP_TNDP		0x00000010
#define IEEE80211_TXBFCAP_IMPLICIT_TX	0x00000020
#define IEEE80211_TXBFCAP_CALIB_MASK	0x000000c0
#define IEEE80211_TXBFCAP_CALIB_SHIFT	6
#define IEEE80211_TXBFCAP_TX_CSI	0x00000100
d627 1
a627 1
 * Antenna Selection (ASEL) Capability (see 7.3.2.57.7).
d630 6
a635 1
#define IEEE80211_ASELCAP_CSIFB		0x02
d639 1
a639 1
 * HT Operation element (see 7.3.2.58).
d649 1
a649 3
#define IEEE80211_HTOP0_SPSMP		0x10
#define IEEE80211_HTOP0_SIG_MASK	0xe0
#define IEEE80211_HTOP0_SIG_SHIFT	5
d653 1
a653 1
#define IEEE80211_HTOP1_NONGTSTA	0x0004
d655 1
a655 1
#define IEEE80211_HTOP1_OBSS_NONHTSTA	0x0010
@


1.50
log
@Create a printb() suitable string for IEEE80211_FC1 field. Needed to show
more info in tcpdump. OK giovanni@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.49 2009/01/28 18:55:18 damien Exp $	*/
d330 1
@


1.49
log
@Block Ack agreements are unidirectional.
Maintain state for both originator and recipient roles separately.
Do not allocate receive reordering buffer in addba_request().
Test the "initiator" bit in incoming DELBA frames and set it appropriately
in outgoing DELBA frames.
Separate callbacks for Tx/Rx too.

no binary change since all this is #ifdef'ed out.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.48 2009/01/26 19:09:41 damien Exp $	*/
d165 3
@


1.48
log
@Add some initial HT bits (not enabled yet) based on 802.11n Draft 7.01:
- implement A-MPDU frames buffering and reordering
- implement A-MSDU decapsulation
- process/send ADDBA Request, ADDBA Response and DELBA action frames
- process Block Ack Request control frames (including MTBAR)
- implement PBAC support (Protected Block Ack)
- add some incomplete HT Capabilities and HT Operation IEs parsing

Add more Management Frame Protection bits based on 802.11w Draft 7.0:
- implement SA Query procedure (both AP and STA)
- cleanup BIP

Fix some bugs:
- fix check for WEP key length that otherwise caused a stack smash in
  ieee80211_wep_encrypt (pointed out by Xavier Santolaria on macppc)
- properly stop EAPOL timeout: fixes a panic that occured in HostAP mode
  when turning the interface down while a 4-way handshake is in progress
  (pointed out by Doughertys)

Did some code cleanup too.

The HT bits are currently not compiled in (IEEE80211_NO_HT is defined)
because they won't be ready until after the next release and I didn't
want to grow the kernel or to inadvertently introduce new bugs.
They are here such that other people can look at the code.
Notice that I had to add an extra parameter to ic_send_mgmt() for
action frames, that is why there are small changes in drivers defining
their own ic_send_mgmt() handler.

Sorry for the not very incremental diff but this has been sitting in
my tree for too long now.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.47 2008/09/27 15:00:08 damien Exp $	*/
d376 1
a376 1
 * BA/BAR Control field (see Figure 7-13).
d383 5
@


1.47
log
@Add some inline functions to test the presence of optional 802.11
header fields (Sequence Control, Address 4, QoS Control, +HTC) and
use them where appropriate.

Add ieee80211_get_qos() inline function to extract the QoS control
field of an 802.11 header instead of duplicating the same scary
code everywhere (the location of this field depends on the presence
of an Address 4 field).

Export ieee80211_up_to_ac() so that drivers can select the access
category to use based on the TID subfield of the QoS Control field.

Define more QoS-related bits for the RSN Capabilities field of RSN IE
(will be used later).
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.46 2008/09/01 19:55:21 damien Exp $	*/
d182 4
a185 4
#define IEEE80211_QOS_ACK_POLICY_NORMAL		0
#define IEEE80211_QOS_ACK_POLICY_NOACK		1
#define IEEE80211_QOS_ACK_POLICY_NOEXPLACK	2
#define IEEE80211_QOS_ACK_POLICY_BA		3
d328 1
d332 2
a334 1
	IEEE80211_ELEMID_ASSOC_CBT		= 77,	/* 11w */
d349 1
a349 1
	IEEE80211_CATEG_SALT		= 8	/* 11w */
d360 1
a360 1
 * SALT Action field values (see Table 7.57l).
d362 2
a363 2
#define IEEE80211_ACTION_SALT_REQ	0
#define IEEE80211_ACTION_SALT_RESP	1
d376 9
d409 94
d592 3
a594 2
	IEEE80211_REASON_BAD_GROUP_MGMT_CIPHER	= 25,	/* 11w */
	IEEE80211_REASON_MFP_POLICY		= 26	/* 11w */
d619 6
@


1.46
log
@add ic_tid_noack bitmap to indicate a per-TID ACK policy (1=no ack,
0=normal ack).  all bits are currently set to 0.
use this bitmap to set the ACK policy of the QoS control field of
outgoing QoS frames.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.45 2008/08/27 10:58:01 damien Exp $	*/
d240 46
d385 8
@


1.45
log
@move definitions of channels attributes away from ieee80211.h such
that ieee80211.h contains only definitions that are part of the
802.11 standard and not constants used internally by net80211.
because channels attributes are exported to userland through the
radiotap BPF interface, add the definitions to ieee80211_radiotap.h
too (which must be kept in sync with what is used in net80211).
also, do not export combinations of channel attributes to userland
so that noone get stupid ideas.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.44 2008/08/12 19:40:13 damien Exp $	*/
d182 6
a187 1
#define IEEE80211_QOS_ACKPOLICY			0x0060
@


1.44
log
@add a couple of new definitions (action frames, new subtypes for control
frames, new IEs etc...)
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.43 2008/08/12 19:21:04 damien Exp $	*/
a633 31

/*
 * Channel attributes (not 802.11 but exported by radiotap).
 */
#define IEEE80211_CHAN_TURBO	0x0010	/* Turbo channel */
#define IEEE80211_CHAN_CCK	0x0020	/* CCK channel */
#define IEEE80211_CHAN_OFDM	0x0040	/* OFDM channel */
#define IEEE80211_CHAN_2GHZ	0x0080	/* 2 GHz spectrum channel */
#define IEEE80211_CHAN_5GHZ	0x0100	/* 5 GHz spectrum channel */
#define IEEE80211_CHAN_PASSIVE	0x0200	/* Only passive scan allowed */
#define IEEE80211_CHAN_DYN	0x0400	/* Dynamic CCK-OFDM channel */
#define IEEE80211_CHAN_GFSK	0x0800	/* GFSK channel (FHSS PHY) */
#define IEEE80211_CHAN_XR	0x1000	/* Extended range OFDM channel */

/*
 * Useful combinations of channel characteristics.
 */
#define IEEE80211_CHAN_FHSS \
	(IEEE80211_CHAN_2GHZ | IEEE80211_CHAN_GFSK)
#define IEEE80211_CHAN_A \
	(IEEE80211_CHAN_5GHZ | IEEE80211_CHAN_OFDM)
#define IEEE80211_CHAN_B \
	(IEEE80211_CHAN_2GHZ | IEEE80211_CHAN_CCK)
#define IEEE80211_CHAN_PUREG \
	(IEEE80211_CHAN_2GHZ | IEEE80211_CHAN_OFDM)
#define IEEE80211_CHAN_G \
	(IEEE80211_CHAN_2GHZ | IEEE80211_CHAN_DYN)
#define IEEE80211_CHAN_T \
	(IEEE80211_CHAN_5GHZ | IEEE80211_CHAN_OFDM | IEEE80211_CHAN_TURBO)
#define IEEE80211_CHAN_TG \
	(IEEE80211_CHAN_2GHZ | IEEE80211_CHAN_OFDM | IEEE80211_CHAN_TURBO)
@


1.43
log
@add/process group integrity cipher suite in RSN IEs.
add support for MFP negotiation during association.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.42 2008/08/12 18:48:35 damien Exp $	*/
d132 3
d281 1
d287 29
a315 1
#define IEEE80211_CHALLENGE_LEN			128
d466 1
a558 2
#define EAPOL_VERSION	1

d565 2
@


1.42
log
@add support for EAPOL-Key v3 descriptors (similar to v2 except that the
MIC is computed using AES-128-CMAC instead of HMAC-SHA1).
add a SHA-256 based key derivation function (not used yet).
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.41 2008/08/12 18:30:02 damien Exp $	*/
d395 3
a397 1
	IEEE80211_REASON_CIPHER_REJ_POLICY	= 24
@


1.41
log
@add definitions for RSN capabilities field (RSN IE).
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.40 2008/08/12 18:22:41 damien Exp $	*/
d551 1
@


1.40
log
@process IGTK KDEs in EAPOL-Key frames and install integrity group keys
if MFP was negotiated with the peer (not possible yet).
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.39 2008/08/12 16:51:39 damien Exp $	*/
d296 11
@


1.39
log
@Welcome BIP: the Broadcast/Multicast Integrity Protocol defined
in Draft IEEE P802.11w.
It provides data integrity and replay protection for broadcast/
multicast robust management frames (not used yet) using AES-128
in CMAC mode.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.38 2008/08/12 16:24:24 damien Exp $	*/
d584 2
a585 1
	IEEE80211_KDE_ERROR	= 8
@


1.38
log
@fix values for QoS control field.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.37 2008/07/27 14:15:42 damien Exp $	*/
d172 1
d277 1
@


1.37
log
@remove unused structures and duplicated definitions.
remove clause 3 of license while I'm here (from FreeBSD).
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.36 2008/07/21 19:27:26 damien Exp $	*/
d176 5
a180 5
#define	IEEE80211_QOS_TXOP			0x00ff
/* bit 8 is reserved */
#define	IEEE80211_QOS_ACKPOLICY			0x0600
#define	IEEE80211_QOS_ESOP			0x0800
#define	IEEE80211_QOS_TID			0xf000
@


1.36
log
@add ieee80211_priv.h file: contains definitions private to net80211.
this must not be included by drivers.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.35 2008/04/16 18:32:15 damien Exp $	*/
a16 2
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
a27 2
 *
 * $FreeBSD: src/sys/net80211/ieee80211.h,v 1.5 2004/04/05 17:47:40 sam Exp $
d36 1
a36 1
#define	IEEE80211_ADDR_LEN	6		/* size of 802.11 address */
d38 1
a38 15
#define	IEEE80211_IS_MULTICAST(_a)	(*(_a) & 0x01)

/* IEEE 802.11 PLCP header */
struct ieee80211_plcp_hdr {
	u_int16_t	i_sfd;
	u_int8_t	i_signal;
	u_int8_t	i_service;
	u_int16_t	i_length;
	u_int16_t	i_crc;
} __packed;

#define IEEE80211_PLCP_SFD      0xF3A0
#define IEEE80211_PLCP_SERVICE  0x00
#define IEEE80211_PLCP_SERVICE_PBCC  0x08	/* PBCC encoded */
#define IEEE80211_PLCP_SERVICE_LENEXT  0x80	/* length extension bit */
d41 1
a41 1
 * generic definitions for IEEE 802.11 frames
d62 1
a62 2
/* 802.11n/D2.02 */
struct ieee80211_htframe {
d94 1
a94 2
/* 802.11n/D2.02 */
struct ieee80211_htframe_addr4 {
a105 14
/*
 * Management Notification Frame
 */
struct ieee80211_mnf {
	u_int8_t	mnf_category;
	u_int8_t	mnf_action;
	u_int8_t	mnf_dialog;
	u_int8_t	mnf_status;
} __packed;
#define	MNF_SETUP_REQ	0
#define	MNF_SETUP_RESP	1
#define	MNF_TEARDOWN	2


d130 1
a130 1
#define IEEE80211_FC0_SUBTYPE_ACTION_NOACK	0xe0	/* 802.11n/D2.00 */
d163 3
d173 3
d231 3
a255 31
/* 
 * Channel attributes
 */
#define	IEEE80211_CHAN_TURBO	0x0010	/* Turbo channel */
#define	IEEE80211_CHAN_CCK	0x0020	/* CCK channel */
#define	IEEE80211_CHAN_OFDM	0x0040	/* OFDM channel */
#define	IEEE80211_CHAN_2GHZ	0x0080	/* 2 GHz spectrum channel. */
#define	IEEE80211_CHAN_5GHZ	0x0100	/* 5 GHz spectrum channel */
#define	IEEE80211_CHAN_PASSIVE	0x0200	/* Only passive scan allowed */
#define	IEEE80211_CHAN_DYN	0x0400	/* Dynamic CCK-OFDM channel */
#define	IEEE80211_CHAN_GFSK	0x0800	/* GFSK channel (FHSS PHY) */
#define	IEEE80211_CHAN_XR	0x1000	/* Extended range OFDM channel */

/*
 * Useful combinations of channel characteristics.
 */
#define	IEEE80211_CHAN_FHSS \
	(IEEE80211_CHAN_2GHZ | IEEE80211_CHAN_GFSK)
#define	IEEE80211_CHAN_A \
	(IEEE80211_CHAN_5GHZ | IEEE80211_CHAN_OFDM)
#define	IEEE80211_CHAN_B \
	(IEEE80211_CHAN_2GHZ | IEEE80211_CHAN_CCK)
#define	IEEE80211_CHAN_PUREG \
	(IEEE80211_CHAN_2GHZ | IEEE80211_CHAN_OFDM)
#define	IEEE80211_CHAN_G \
	(IEEE80211_CHAN_2GHZ | IEEE80211_CHAN_DYN)
#define	IEEE80211_CHAN_T \
	(IEEE80211_CHAN_5GHZ | IEEE80211_CHAN_OFDM | IEEE80211_CHAN_TURBO)
#define	IEEE80211_CHAN_TG \
	(IEEE80211_CHAN_2GHZ | IEEE80211_CHAN_OFDM | IEEE80211_CHAN_TURBO)

d257 1
a257 1
 * Management information element payloads
a258 49
union ieee80211_information {
	char	ssid[IEEE80211_NWID_LEN+1];
	struct rates {
		u_int8_t	*p;
	} rates;
	struct fh {
		u_int16_t	dwell;
		u_int8_t	set;
		u_int8_t	pattern;
		u_int8_t	index;
	} fh;
	struct ds {
		u_int8_t	channel;
	} ds;
	struct cf {
		u_int8_t	count;
		u_int8_t	period;
		u_int8_t	maxdur[2];
		u_int8_t	dur[2];
	} cf;
	struct tim {
		u_int8_t	count;
		u_int8_t	period;
		u_int8_t	bitctl;
		/* u_int8_t	pvt[251]; The driver needs to use this. */
	} tim;
	struct ibss {
		u_int16_t	atim;
	} ibss;
	struct challenge {
		u_int8_t	*p;
		u_int8_t	len;
	} challenge;
	struct erp {
		u_int8_t	flags;
	} erp;
	struct country {
		u_int8_t	cc[3];		/* ISO CC+(I)ndoor/(O)utdoor */
		struct {
			u_int8_t schan;		/* starting channel */
			u_int8_t nchan;		/* number channels */
			u_int8_t maxtxpwr;
		} band[4];			/* up to 4 sub bands */
	} country;
	struct ath {
		u_int8_t	flags;
	} ath;
};

d288 3
a290 1
/* ERP information element flags */
d296 1
a296 1
 * 802.11e EDCA Access Categories.
d316 4
a319 2
/* Organizationally Unique Identifiers */
/* See http://standards.ieee.org/regauth/oui/oui.txt for a list */
d332 6
a337 3
#define	IEEE80211_AUTH_ALG_OPEN			0x0000
#define	IEEE80211_AUTH_ALG_SHARED		0x0001
#define	IEEE80211_AUTH_ALG_LEAP			0x0080
d339 3
a345 1

d476 4
a506 12
enum {
	IEEE80211_AUTH_NONE	= 0,
	IEEE80211_AUTH_OPEN	= 1,		/* open */
	IEEE80211_AUTH_SHARED	= 2,		/* shared-key */
	IEEE80211_AUTH_8021X	= 3,		/* 802.1x */
	IEEE80211_AUTH_AUTO	= 4,		/* auto-select/accept */
	IEEE80211_AUTH_WPA	= 5,		/* WPA w/ 802.1x */
	IEEE80211_AUTH_WPA_PSK	= 6,		/* WPA w/ preshared key */
	IEEE80211_AUTH_WPA2	= 7,		/* WPA2 w/ 802.1x */
	IEEE80211_AUTH_WPA2_PSK	= 8		/* WPA2 w/ preshared key */
};

d547 1
a547 1
/* WPA1 compatibility */
d584 31
@


1.35
log
@Kernel implementation of the 4-way handshake and group-key
handshake protocols (both supplicant and authenticator state
machines) as defined in the IEEE 802.11i standard.

Software implementation of the TKIP (Temporal Key Integrity
Protocol) and CCMP (CTR with CBC-MAC Protocol) protocols.

This diff doesn't implement any of the 802.1X authentication
protocols and thus only PSK authentication (using pre-shared
keys) is currently supported.

In concrete terms, this adds support for WPA-PSK and WPA2-PSK
protocols, both in station and hostap modes.

The following drivers are marked as WPA-capable and should
work:  bwi(4), malo(4), ral(4), iwn(4), wpi(4), ural(4),
rum(4), upgt(4), and zyd(4)

The following options have been added to ifconfig(8):
wpa, wpapsk, wpaprotos, wpaakms, wpaciphers, wpagroupcipher

wpa-psk(8) can be used to generate keys from passphrases.

tested by many@@
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.34 2007/08/29 19:57:17 damien Exp $	*/
d560 3
a562 10
#define	IEEE80211_AID_MAX		2007
#define	IEEE80211_AID_DEF		1800

#define	IEEE80211_AID(b)		((b) &~ 0xc000)
#define	IEEE80211_AID_SET(b, w) \
	((w)[IEEE80211_AID(b) / 32] |= (1 << (IEEE80211_AID(b) % 32)))
#define	IEEE80211_AID_CLR(b, w) \
	((w)[IEEE80211_AID(b) / 32] &= ~(1 << (IEEE80211_AID(b) % 32)))
#define	IEEE80211_AID_ISSET(b, w) \
	((w)[IEEE80211_AID(b) / 32] & (1 << (IEEE80211_AID(b) % 32)))
@


1.34
log
@typo in a macro (fortunately unused): 0c00 -> 0x00
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.33 2007/08/01 12:23:26 damien Exp $	*/
d469 3
a471 1

d478 1
a478 1
	IEEE80211_REASON_CIPHER_REJ		= 24
d502 9
a510 1
	IEEE80211_STATUS_DSSSOFDM_REQUIRED	= 26
d643 1
a643 1
#define EAPOL_KEY_DESC_WPA1		254	/* non-standard WPA1 */
@


1.33
log
@all WPA implementations i have tested use EAPOL-Key frames version 1,
so use that too and remove a check in ieee80211_recv_eapol().
WPA1 stores the group key id into bits 4-5 of the EAPOL-Key frame info
field and uses bit 6 to indicate if the key is Rx/Tx or Rx only.
remove a check in ieee80211_eapol_key_decrypt() because WPA1 encrypts
the payload of message 1 of the group-key handshake without setting the
encrypted bit in the info field.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.32 2007/07/28 10:55:29 damien Exp $	*/
d422 1
a422 1
#define BROADCOM_OUI	((const u_int8_t[]){ 0c00, 0x90, 0x4c })
@


1.32
log
@WPA1 uses its own (non-standard) EAPOL-Key descriptor type.
Remove a double definition.
Add definitions for Key Data Encapsulations.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.31 2007/07/24 16:44:01 damien Exp $	*/
d612 1
a612 1
#define EAPOL_VERSION	2
d648 4
@


1.31
log
@cleanup definition of struct ieee80211_eapol_key.
prepend 802.1X header.
use byte-arrays to prevent access to unaligned fields.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.30 2007/07/05 20:59:25 damien Exp $	*/
d631 3
a633 2
#define EAPOL_KEY_TYPE_RC4		1	/* deprecated */
#define EAPOL_KEY_TYPE_IEEE80211	2
a646 1
#define EAPOL_KEY_ENCRYPTED	(1 << 12)
d668 13
@


1.30
log
@some HT frames may have an additional HT Control field.
remove two comments that were misplaced while I'm here (addr4 is always
located after the i_seq field, not at the end of the header).
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.29 2007/07/05 20:11:04 damien Exp $	*/
d610 1
a610 1
 * key descriptor.  Instead, it uses the key descriptor described below.
d612 2
a617 1
/* from Std 802.11i-2004 section 8.5.2 */
d619 1
d621 10
a630 1
/* IEEE Std 802.1X-2004, section 7.6.1 */
d634 14
a647 13
	u_int16_t	info;
#define EAPOL_KEY_VERSION_MASK		0x7
#define EAPOL_KEY_VERSION_SHIFT		0
#define EAPOL_KEY_VERSION_MD5_RC4	1
#define EAPOL_KEY_VERSION_SHA1_AES	2
#define EAPOL_KEY_PAIRWISE		(1 <<  3)
#define EAPOL_KEY_INSTALL		(1 <<  6)	/* I */
#define EAPOL_KEY_KEYACK		(1 <<  7)	/* A */
#define EAPOL_KEY_KEYMIC		(1 <<  8)	/* M */
#define EAPOL_KEY_SECURE		(1 <<  9)	/* S */
#define EAPOL_KEY_ERROR			(1 << 10)
#define EAPOL_KEY_REQUEST		(1 << 11)
#define EAPOL_KEY_ENCRYPTED		(1 << 12)
d649 2
a650 2
	u_int16_t	keylen;
	u_int64_t	replay_cnt;
d653 1
a653 1
	u_int64_t	rsc;
d656 1
a656 2
	u_int16_t	len;
	u_int8_t	data[0];
@


1.29
log
@add the pseudo-random function (PRF) and various key derivation
functions defined in 802.11i.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.28 2007/07/04 20:32:43 damien Exp $	*/
a67 2
	/* possibly followed by addr4[IEEE80211_ADDR_LEN]; */
	/* see below */
d78 12
a89 2
	/* possibly followed by addr4[IEEE80211_ADDR_LEN]; */
	/* see below */
d102 10
d113 2
a114 1
struct ieee80211_qosframe_addr4 {
d123 1
@


1.28
log
@add subtype "Action" for management frames.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.27 2007/07/03 15:22:15 claudio Exp $	*/
d627 10
@


1.27
log
@Backout part of 1.20 because IEEE80211_AUTH_ALGORITHM() and friends are used
by hostapd and tcpdump. Now tcpdump and hostapd should build again.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.26 2007/07/03 15:02:07 claudio Exp $	*/
d143 2
a405 11
/*
 * AUTH management packets
 *
 *	octet algo[2]
 *	octet seq[2]
 *	octet status[2]
 *	octet chal.id
 *	octet chal.length
 *	octet chal.text[253]
 */

d443 1
d446 1
@


1.26
log
@Readd IEEE80211_REASON_RSN_REQUIRED and IEEE80211_REASON_RSN_INCONSISTENT
userland is using these defines -- unbreaks build. Found by jasper@@
discussed with reyk@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.25 2007/07/02 21:18:17 damien Exp $	*/
d403 18
@


1.25
log
@remove more unused stuff.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.24 2007/07/02 20:42:30 damien Exp $	*/
d434 2
@


1.24
log
@add new ieee80211_eapol_key structure (used by the various 802.11i
key handshakes).
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.23 2007/07/02 19:36:47 damien Exp $	*/
a236 19
/*
 * BEACON management packets
 *
 *	octet timestamp[8]
 *	octet beacon interval[2]
 *	octet capability information[2]
 *	information element
 *		octet elemid
 *		octet length
 *		octet information[length]
 */

typedef u_int8_t *ieee80211_mgt_beacon_t;

#define	IEEE80211_BEACON_INTERVAL(beacon) \
	((beacon)[8] | ((beacon)[9] << 8))
#define	IEEE80211_BEACON_CAPABILITY(beacon) \
	((beacon)[10] | ((beacon)[11] << 8))

a288 19

/*
 * 802.11i/WPA information element (maximally sized).
 */
struct ieee80211_ie_wpa {
	u_int8_t	wpa_id;		/* IEEE80211_ELEMID_VENDOR */
	u_int8_t	wpa_len;	/* length in bytes */
	u_int8_t	wpa_oui[3];	/* 0x00, 0x50, 0xf2 */
	u_int8_t	wpa_type;	/* OUI type */
	u_int16_t	wpa_version;	/* spec revision */
	u_int32_t	wpa_mcipher[1];	/* multicast/group key cipher */
	u_int16_t	wpa_uciphercnt;	/* # pairwise key ciphers */
	u_int32_t	wpa_uciphers[8];/* ciphers */
	u_int16_t	wpa_authselcnt;	/* authentication selector cnt*/
	u_int32_t	wpa_authsels[8];/* selectors */
	u_int16_t	wpa_caps;	/* 802.11i capabilities */
	u_int16_t	wpa_pmkidcnt;	/* 802.11i pmkid count */
	u_int16_t	wpa_pmkids[8];	/* 802.11i pmkids */
} __packed;
@


1.23
log
@fix REASON codes.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.22 2007/07/02 18:16:35 damien Exp $	*/
d612 40
@


1.22
log
@add IEEE80211_FC1_PROTECTED flag.
keep IEEE80211_FC1_WEP for compatibility with pre-RSNA networks.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.21 2007/07/02 16:33:20 damien Exp $	*/
a459 2
 *
 * Unlisted codes are reserved
a460 1

a471 2
	IEEE80211_REASON_RSN_REQUIRED		= 11,
	IEEE80211_REASON_RSN_INCONSISTENT	= 12,
d475 13
@


1.21
log
@remove a lot of unused #define
fix a CAPINFO name
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.20 2007/06/21 21:21:54 damien Exp $	*/
d171 2
a172 1
#define	IEEE80211_FC1_WEP			0x40
@


1.20
log
@cleanup CAPINFO values.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.19 2007/06/21 19:45:45 damien Exp $	*/
d270 1
a270 1
#define IEEE80211_CAPINFO_IMMEDIATE_ACK		0x8000
d275 1
a275 1
	"\16DSSSOFDM\17DELAYED_B_ACK\20IMMEDIATE_ACK"
a433 22
#define	WPA_CSE_NULL		0x00
#define	WPA_CSE_WEP40		0x01
#define	WPA_CSE_TKIP		0x02
#define	WPA_CSE_WRAP		0x03		/* WPA2/802.11i */
#define	WPA_CSE_CCMP		0x04
#define	WPA_CSE_WEP104		0x05

#define	WPA_ASE_NONE		0x00
#define	WPA_ASE_8021X_UNSPEC	0x01
#define	WPA_ASE_8021X_PSK	0x02

#define	RSN_CSE_NULL		0x00
#define	RSN_CSE_WEP40		0x01
#define	RSN_CSE_TKIP		0x02
#define	RSN_CSE_WRAP		0x03
#define	RSN_CSE_CCMP		0x04
#define	RSN_CSE_WEP104		0x05

#define	RSN_ASE_NONE		0x00
#define	RSN_ASE_8021X_UNSPEC	0x01
#define	RSN_ASE_8021X_PSK	0x02

a440 20
/*
 * AUTH management packets
 *
 *	octet algo[2]
 *	octet seq[2]
 *	octet status[2]
 *	octet chal.id
 *	octet chal.length
 *	octet chal.text[253]
 */

typedef u_int8_t *ieee80211_mgt_auth_t;

#define	IEEE80211_AUTH_ALGORITHM(auth) \
	((auth)[0] | ((auth)[1] << 8))
#define	IEEE80211_AUTH_TRANSACTION(auth) \
	((auth)[2] | ((auth)[3] << 8))
#define	IEEE80211_AUTH_STATUS(auth) \
	((auth)[4] | ((auth)[5] << 8))

d458 1
a458 1
 * Reason codes
@


1.19
log
@cleanup the list of Organizationally Unique Identifiers (OUI).
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.18 2007/06/21 18:18:48 damien Exp $	*/
d263 2
a264 1
/* bits 8-9 are reserved */
d266 1
a266 1
#define	IEEE80211_CAPINFO_RSN			0x0800
d269 2
a270 1
/* bits 14-15 are reserved */
d272 4
a275 3
	"\20\01ESS\02IBSS\03POLLABLE\04POLLREQ\05PRIVACY"	\
	"\06SHORT_PREAMBLE\07PBCC\10CHNL_AGILITY"		\
	"\13SHORT_SLOTTIME\14RSN\16DSSSOFDM"
@


1.18
log
@s/IEEE80211_ELEMID_EDCA_PARAMS/IEEE80211_ELEMID_EDCAPARMS/ for consistency.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.17 2007/06/17 09:05:44 damien Exp $	*/
a430 8
#define	ATH_OUI			0x7f0300		/* Atheros OUI */
#define	ATH_OUI_TYPE		0x01
#define	ATH_OUI_VERSION		0x01

#define	WPA_OUI			0xf25000
#define	WPA_OUI_TYPE		0x01
#define	WPA_OUI_VERSION		1		/* current supported version */

a441 3
#define	RSN_OUI			0xac0f00
#define	RSN_OUI_VERSION		1		/* current supported version */

d453 6
a458 3
#define	WME_OUI			0xf25000
#define	WME_OUI_TYPE		0x02
#define	WME_OUI_VERSION		1
@


1.17
log
@keep track of the Tx/Rx sequence numbers for each TID in the
ieee80211_node structure.
add a flag to indicate whether a STA is a QSTA or not.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.16 2007/06/17 09:02:28 damien Exp $	*/
d386 1
a386 1
	IEEE80211_ELEMID_EDCA_PARAMS		= 12,
@


1.16
log
@- remove two unused structures
- add three new information elements identifiers:
  IEEE80211_ELEMID_QBSS_LOAD  : QBSS Load
  IEEE80211_ELEMID_EDCA_PARAMS: EDCA Parameter Set
  IEEE80211_ELEMID_QOS_CAP    : QoS Capability
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.15 2007/06/11 19:41:18 damien Exp $	*/
d420 3
@


1.15
log
@remove unused structure.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.14 2007/06/11 19:35:24 damien Exp $	*/
a118 40
 /*
 * WME/802.11e information element.
 */
struct ieee80211_ie_wme {
	u_int8_t	wme_id;		/* IEEE80211_ELEMID_VENDOR */
	u_int8_t	wme_len;	/* length in bytes */
	u_int8_t	wme_oui[3];	/* 0x00, 0x50, 0xf2 */
	u_int8_t	wme_type;	/* OUI type */
	u_int8_t	wme_subtype;	/* OUI subtype */
	u_int8_t	wme_version;	/* spec revision */
	u_int8_t	wme_info;	/* AC info */
} __packed;

/*
 * WME/802.11e Tspec Element
 */
struct ieee80211_wme_tspec {
	u_int8_t	ts_id;
	u_int8_t	ts_len;
	u_int8_t	ts_oui[3];
	u_int8_t	ts_oui_type;
	u_int8_t	ts_oui_subtype;
	u_int8_t	ts_version;
	u_int8_t	ts_tsinfo[3];
	u_int8_t	ts_nom_msdu[2];
	u_int8_t	ts_max_msdu[2];
	u_int8_t	ts_min_svc[4];
	u_int8_t	ts_max_svc[4];
	u_int8_t	ts_inactv_intv[4];
	u_int8_t	ts_susp_intv[4];
	u_int8_t	ts_start_svc[4];
	u_int8_t	ts_min_rate[4];
	u_int8_t	ts_mean_rate[4];
	u_int8_t	ts_max_burst[4];
	u_int8_t	ts_min_phy[4];
	u_int8_t	ts_peak_rate[4];
	u_int8_t	ts_delay[4];
	u_int8_t	ts_surplus[2];
	u_int8_t	ts_medium_time[2];
} __packed;
d385 2
d390 1
@


1.14
log
@adds 802.11e EDCA tables for QAPs and non-AP QSTAs.
not used yet.

ok jsg@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.13 2007/06/07 20:20:15 damien Exp $	*/
a82 4

struct ieee80211_qoscntl {
	u_int8_t	i_qos[2];
};
@


1.13
log
@move ieee80211_compute_duration() and ieee80211_compute_duration1()
functions into the two drivers that use them (atw and rtw.)
this code is not generic enough to be used by other drivers and
there is no chance that it will ever be used in newer driver since
it supports 802.11b only.
plus, it hurts my eyes each time i look into ieee80211_output.c.

"fine with me as long as the logic doesn't change in the functions" jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.12 2007/06/06 19:31:07 damien Exp $	*/
d451 11
a504 6

/* WME stream classes */
#define	WME_AC_BE	0		/* best effort */
#define	WME_AC_BK	1		/* background */
#define	WME_AC_VI	2		/* video */
#define	WME_AC_VO	3		/* voice */
@


1.12
log
@The license permits us to redistribute this code under the BSD or the GPLv2.
Choose the BSD license so that future enhancements will be BSD-only.

ok jsg@@ reyk@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.11 2006/04/22 16:19:57 fgsch Exp $	*/
a643 11

/*
 * 802.11 frame duration definitions.
 */

struct ieee80211_duration {
	uint16_t	d_rts_dur;
	uint16_t	d_data_dur;
	uint16_t	d_plcp_len;
	uint8_t		d_residue;	/* unused octets in time slot */
};
@


1.11
log
@typo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.10 2005/09/08 13:24:52 reyk Exp $	*/
a18 4
 *
 * Alternatively, this software may be distributed under the terms of the
 * GNU General Public License ("GPL") version 2 as published by the Free
 * Software Foundation.
@


1.10
log
@mostly knf

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.9 2005/05/25 07:40:49 reyk Exp $	*/
d450 1
a450 1
/* EPR information element flags */
@


1.9
log
@add ifconfig -M option to replace wicontrol -L and -l for ap scanning
and node listing. wicontrol is not supported by net80211 drivers
anymore. further improvements will be done.

ok dlg@@, jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.8 2005/02/17 18:28:05 reyk Exp $	*/
d317 4
a320 1
#define IEEE80211_CAPINFO_BITS                  "\20\01ESS\02IBSS\03POLLABLE\04POLLREQ\05PRIVACY\06SHORT_PREAMBLE\07PBCC\10CHNL_AGILITY\13SHORT_SLOTTIME\14RSN\16DSSSOFDM"
d632 1
a632 1
 
@


1.8
log
@derived from NetBSD:

---
Make the node table into an LRU cache: least-recently used nodes
are at the end of the node queue.  Change the reference-counting
discipline: ni->ni_refcnt indicates how many times net80211 has
granted ni to the driver.  Every node in the table with ni_refcnt=0
is eligible to be garbage-collected.  The mere presence of a node
in the table does not any longer indicate its auth/assoc state;
nodes have a ni_state variable, now.

While I am here, patch ieee80211_find_node_for_beacon to do a "best
match" by bssid/ssid/channel, not a "perfect match."  This keeps
net80211 from caching duplicate nodes in the table.
---

ok deraadt@@ dlg@@, looks good jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.7 2004/12/30 23:32:55 reyk Exp $	*/
d319 12
d332 17
d444 2
@


1.7
log
@replace __attribute__((__packed__)) with __packed.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.6 2004/12/28 23:07:32 jsg Exp $	*/
d127 13
d296 1
a296 1
typedef uint8_t *ieee80211_mgt_beacon_t;
d325 2
d335 3
d341 1
a341 1
 * Management information elements
d343 1
a343 1
struct ieee80211_information {
a389 1
	struct ieee80211_ie_wpa	wpa;
d404 1
d447 24
d562 11
d584 2
d589 11
a599 2
#define	IEEE80211_MAX_AID			2007

d601 1
a601 1
	((w)[((b) & ~0xc000) / 32] |= (1 << (((b) & ~0xc000) % 32)))
d603 1
a603 1
	((w)[((b) & ~0xc000) / 32] &= ~(1 << (((b) & ~0xc000) % 32)))
d605 1
a605 1
	((w)[((b) & ~0xc000) / 32] & (1 << (((b) & ~0xc000) % 32)))
d655 8
a662 2
	IEEE80211_AUTH_OPEN	= 1,
	IEEE80211_AUTH_SHARED	= 2
@


1.6
log
@Sync with recent NetBSD ieee80211_compute_duration() changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.5 2004/12/25 20:40:19 deraadt Exp $	*/
d55 1
a55 1
} __attribute__((__packed__));
d74 1
a74 1
} __attribute__((__packed__));
d86 1
a86 1
} __attribute__((__packed__));
d100 1
a100 1
} __attribute__((__packed__));
d112 1
a112 1
} __attribute__((__packed__));
d122 1
a122 1
} __attribute__((__packed__));
d153 1
a153 1
} __attribute__((__packed__));
d231 1
a231 1
} __attribute__((__packed__));
d239 1
a239 1
} __attribute__((__packed__));
d246 1
a246 1
} __attribute__((__packed__));
d253 1
a253 1
} __attribute__((__packed__));
d261 1
a261 1
} __attribute__((__packed__));
d269 1
a269 1
} __attribute__((__packed__));
d320 1
a320 1
} __attribute__((__packed__));
@


1.5
log
@in real C, there is not , after the last enum entry; ok reyk
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.4 2004/12/23 12:27:25 jsg Exp $	*/
d559 1
a559 1
	uint8_t		d_plcp_svc;
@


1.4
log
@From dyoung@@NetBSD:

ieee80211.h r 1.9

#define the difference in microseconds between a fast and a slow
preamble and PLCP header.

ieee80211_output.c r 1.19

Fix a bug in ieee80211_compute_duration: the 802.11 Duration field
in an 802.11 unicast data packet is equal to the duration of the
SIFS and Acknowledgement.  That is, the amount of time reserved
*after* the packet has finished transmitting.

Change the arguments to ieee80211_compute_duration: pass the entire
packet length, not just the payload length.  Add a 'debug' argument
to ieee80211_compute_duration and its helper subroutine,
ieee80211_compute_duration1.

If debug != 0, ieee80211_compute_duration printfs its arguments
and several local variables.

In rtw(4), load the 802.11 Duration field with the result from
ieee80211_compute_duration.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.3 2004/12/23 11:54:08 jsg Exp $	*/
d390 1
a390 1
	IEEE80211_ELEMID_VENDOR			= 221,	/* vendor private */
d455 1
a455 1
	IEEE80211_AUTH_OPEN_RESPONSE		= 2,
d462 1
a462 1
	IEEE80211_AUTH_SHARED_PASS		= 4,
d504 1
a504 1
	IEEE80211_STATUS_DSSSOFDM_REQUIRED	= 26,
d592 1
a592 1
	IEEE80211_AUTH_SHARED	= 2,
@


1.3
log
@From dyoung@@NetBSD:

Define for more bits in the Service field of the 802.11 PLCP Header.

For use by the subroutine ieee80211_compute_duration, add struct
ieee80211_duration, and #define a number of microsecond constants
used for the transmit timing of 802.11 packets.

Add the subroutine ieee80211_compute_duration, which computes for
any packet the appropriate 802.11 Duration field, the PLCP Length
field, as well as the Duration and Length fields for an RTS frame.

atw(4), rtw(4), future drivers, and possibly ath(4) will share
ieee80211_compute_duration.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.2 2004/10/20 22:21:13 fgsch Exp $	*/
d568 2
d572 2
@


1.2
log
@CAPINFO_BITS from the current net/if_ieee80211.h header; fixes
CHNL_AGILITY printing too. deraadt ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: ieee80211.h,v 1.1 2004/06/22 22:53:51 millert Exp $	*/
d59 2
d508 3
a513 2
#define	IEEE80211_WEP_NKID			4	/* number of key ids */

d515 3
d550 34
@


1.1
log
@Import current NetBSD/FreeBSD 802.11 framework.
Based in part on a diff from Matthew Gream.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d302 3
@

