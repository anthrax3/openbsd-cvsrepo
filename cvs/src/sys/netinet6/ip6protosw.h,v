head	1.12;
access;
symbols
	OPENBSD_6_0:1.10.0.12
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.8
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.10
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.7.0.40
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.38
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.36
	OPENBSD_5_0:1.7.0.34
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.32
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.30
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.26
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.4.0.6
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.2
	SMP_BASE:1.2
	kame_19991208:1.1;
locks; strict;
comment	@ * @;


1.12
date	2017.01.29.19.58.47;	author bluhm;	state Exp;
branches;
next	1.11;
commitid	3e3CkrbYekyVOcxy;

1.11
date	2017.01.26.13.03.47;	author bluhm;	state Exp;
branches;
next	1.10;
commitid	wBlwxPiTlfo8m7xr;

1.10
date	2013.10.21.12.40.50;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2013.06.01.16.22.05;	author bluhm;	state Exp;
branches;
next	1.8;

1.8
date	2013.04.24.10.17.08;	author mpi;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.23.28.16;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.15.01.20.04;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.27.12;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.16.16.00.58;	author itojun;	state Exp;
branches
	1.4.6.1;
next	1.3;

1.3
date	2000.12.11.08.04.56;	author itojun;	state Exp;
branches;
next	1.2;

1.2
date	99.12.10.10.04.28;	author angelos;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	99.12.08.06.50.22;	author itojun;	state Exp;
branches;
next	;

1.2.2.1
date	2001.05.14.22.40.19;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2002.03.28.14.56.46;	author niklas;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2003.06.07.11.06.09;	author ho;	state Exp;
branches;
next	;

1.4.6.1
date	2002.06.11.03.31.37;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Change the IPv4 pr_input function to the way IPv6 is implemented,
to get rid of struct ip6protosw and some wrapper functions.  It is
more consistent to have less different structures.  The divert_input
functions cannot be called anyway, so remove them.
OK visa@@ mpi@@
@
text
@/*	$OpenBSD: ip6protosw.h,v 1.11 2017/01/26 13:03:47 bluhm Exp $	*/
/*	$KAME: ip6protosw.h,v 1.22 2001/02/08 18:02:08 itojun Exp $	*/

/*
 * Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

/*-
 * Copyright (c) 1982, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)protosw.h	8.1 (Berkeley) 6/2/93
 */

#ifndef _NETINET6_IP6PROTOSW_H_
#define _NETINET6_IP6PROTOSW_H_

/*
 * Protocol switch table for IPv6.
 * All other definitions should refer to sys/protosw.h
 */

struct mbuf;
struct sockaddr;
struct socket;
struct domain;
struct proc;
struct ip6_hdr;
struct icmp6_hdr;
struct in6_addr;

/*
 * argument type for the last arg of pr_ctlinput().
 * should be consulted only with AF_INET6 family.
 *
 * IPv6 ICMP IPv6 [exthdrs] finalhdr paylaod
 * ^    ^    ^              ^
 * |    |    ip6c_ip6       ip6c_off
 * |    ip6c_icmp6
 * ip6c_m
 *
 * ip6c_finaldst usually points to ip6c_ip6->ip6_dst.  if the original
 * (internal) packet carries a routing header, it may point the final
 * dstination address in the routing header.
 *
 * ip6c_src: ip6c_ip6->ip6_src + scope info + flowlabel in ip6c_ip6
 *	(beware of flowlabel, if you try to compare it against others)
 * ip6c_dst: ip6c_finaldst + scope info
 */
struct ip6ctlparam {
	struct mbuf *ip6c_m;		/* start of mbuf chain */
	struct icmp6_hdr *ip6c_icmp6;	/* icmp6 header of target packet */
	struct ip6_hdr *ip6c_ip6;	/* ip6 header of target packet */
	int ip6c_off;			/* offset of the target proto header */
	struct sockaddr_in6 *ip6c_src;	/* srcaddr w/ additional info */
	struct sockaddr_in6 *ip6c_dst;	/* (final) dstaddr w/ additional info */
	struct in6_addr *ip6c_finaldst;	/* final destination address */
	void *ip6c_cmdarg;		/* control command dependent data */
	u_int8_t ip6c_nxt;		/* final next header field */
};

#ifdef _KERNEL
extern u_char ip6_protox[];
extern struct protosw inet6sw[];
#endif

#endif /* !_NETINET6_IP6PROTOSW_H_ */
@


1.11
log
@Reduce the difference between struct protosw and ip6protosw.  The
IPv4 pr_ctlinput functions did return a void pointer that was always
NULL and never used.  Make all functions void like in the IPv6 case.
OK mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ip6protosw.h,v 1.10 2013/10/21 12:40:50 deraadt Exp $	*/
a111 30
struct ip6protosw {
	short	pr_type;		/* socket type used for */
	struct	domain *pr_domain;	/* domain protocol a member of */
	short	pr_protocol;		/* protocol number */
	short	pr_flags;		/* see below */

/* protocol-protocol hooks */
					/* input to protocol (from below) */
	int	(*pr_input)(struct mbuf **, int *, int);
					/* output to protocol (from above) */
	int	(*pr_output)(struct mbuf *, ...);
					/* control input (from below) */
	void	(*pr_ctlinput)(int, struct sockaddr *, u_int, void *);
					/* control output (from above) */
	int	(*pr_ctloutput)(int, struct socket *, int, int, struct mbuf **);

/* user-protocol hook */
					/* user request: see list below */
	int	(*pr_usrreq)(struct socket *, int, struct mbuf *,
		    struct mbuf *, struct mbuf *, struct proc *);

/* utility hooks */
	void	(*pr_init)(void);	/* initialization hook */
	void	(*pr_fasttimo)(void);	/* fast timeout (200ms) */
	void	(*pr_slowtimo)(void);	/* slow timeout (500ms) */
	void	(*pr_drain)(void);	/* flush any excess space possible */
					/* sysctl for protocol */
	int	(*pr_sysctl)(int *, u_int, void *, size_t *, void *, size_t);
};

d114 1
a114 1
extern struct ip6protosw inet6sw[];
@


1.10
log
@Remove comment regarding BSDI.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip6protosw.h,v 1.9 2013/06/01 16:22:05 bluhm Exp $	*/
d113 1
a113 1
	short 	pr_type;		/* socket type used for */
a134 1

@


1.9
log
@Pass the routing domain to IPv6 pr_ctlinput() like in IPv4.
OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ip6protosw.h,v 1.8 2013/04/24 10:17:08 mpi Exp $	*/
a32 2

/*	BSDI protosw.h,v 2.3 1996/10/11 16:02:40 pjd Exp	*/
@


1.8
log
@Instead of having various extern declarations for protocol variables,
declare them once in their corresponding header file.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip6protosw.h,v 1.7 2003/06/02 23:28:16 millert Exp $	*/
d126 1
a126 1
	void	(*pr_ctlinput)(int, struct sockaddr *, void *);
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip6protosw.h,v 1.6 2002/03/15 01:20:04 millert Exp $	*/
d144 5
@


1.6
log
@Cosmetic changes only, primarily making comments line up nicely after the
__P removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip6protosw.h,v 1.5 2002/03/14 01:27:12 millert Exp $	*/
d48 1
a48 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ip6protosw.h,v 1.4 2001/02/16 16:00:58 itojun Exp $	*/
d125 8
a132 4
	int	(*pr_input)		/* input to protocol (from below) */(struct mbuf **, int *, int);
	int	(*pr_output)		/* output to protocol (from above) */(struct mbuf *, ...);
	void	(*pr_ctlinput)		/* control input (from below) */(int, struct sockaddr *, void *);
	int	(*pr_ctloutput)		/* control output (from above) */(int, struct socket *, int, int, struct mbuf **);
d135 3
a137 2
	int	(*pr_usrreq)		/* user request: see list below */(struct socket *, int, struct mbuf *,
			     struct mbuf *, struct mbuf *, struct proc *);
d140 1
a140 1
	void	(*pr_init)		/* initialization hook */(void);
d142 5
a146 4
	void	(*pr_fasttimo)		/* fast timeout (200ms) */(void);
	void	(*pr_slowtimo)		/* slow timeout (500ms) */(void);
	void	(*pr_drain)		/* flush any excess space possible */(void);
	int	(*pr_sysctl)		/* sysctl for protocol */(int *, u_int, void *, size_t *, void *, size_t);
@


1.4
log
@pull in new pcb notification code from kame.  better handling of scope address.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip6protosw.h,v 1.3 2000/12/11 08:04:56 itojun Exp $	*/
d125 4
a128 8
	int	(*pr_input)		/* input to protocol (from below) */
			__P((struct mbuf **, int *, int));
	int	(*pr_output)		/* output to protocol (from above) */
			__P((struct mbuf *, ...));
	void	(*pr_ctlinput)		/* control input (from below) */
			__P((int, struct sockaddr *, void *));
	int	(*pr_ctloutput)		/* control output (from above) */
			__P((int, struct socket *, int, int, struct mbuf **));
d131 2
a132 3
	int	(*pr_usrreq)		/* user request: see list below */
			__P((struct socket *, int, struct mbuf *,
			     struct mbuf *, struct mbuf *, struct proc *));
d135 1
a135 2
	void	(*pr_init)		/* initialization hook */
			__P((void));
d137 4
a140 8
	void	(*pr_fasttimo)		/* fast timeout (200ms) */
			__P((void));
	void	(*pr_slowtimo)		/* slow timeout (500ms) */
			__P((void));
	void	(*pr_drain)		/* flush any excess space possible */
			__P((void));
	int	(*pr_sysctl)		/* sysctl for protocol */
			__P((int *, u_int, void *, size_t *, void *, size_t));
@


1.4.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ip6protosw.h,v 1.4 2001/02/16 16:00:58 itojun Exp $	*/
d125 8
a132 8
					/* input to protocol (from below) */
	int	(*pr_input)(struct mbuf **, int *, int);
					/* output to protocol (from above) */
	int	(*pr_output)(struct mbuf *, ...);
					/* control input (from below) */
	void	(*pr_ctlinput)(int, struct sockaddr *, void *);
					/* control output (from above) */
	int	(*pr_ctloutput)(int, struct socket *, int, int, struct mbuf **);
d135 3
a137 3
					/* user request: see list below */
	int	(*pr_usrreq)(struct socket *, int, struct mbuf *,
		    struct mbuf *, struct mbuf *, struct proc *);
d140 2
a141 1
	void	(*pr_init)(void);	/* initialization hook */
d143 8
a150 5
	void	(*pr_fasttimo)(void);	/* fast timeout (200ms) */
	void	(*pr_slowtimo)(void);	/* slow timeout (500ms) */
	void	(*pr_drain)(void);	/* flush any excess space possible */
					/* sysctl for protocol */
	int	(*pr_sysctl)(int *, u_int, void *, size_t *, void *, size_t);
@


1.3
log
@nuke #ifdef TCP6 (no longer supported).
validate ICMPv6 too big messages (pmtud) based on pcb.  we accept
certain amount of non-validated ones, as IPv6 mandates ICMPv6 (so even for
traffic from unconnected pcb, we need pmtud).
sync with kame
@
text
@d1 2
a2 2
/*	$OpenBSD: ip6protosw.h,v 1.2 1999/12/10 10:04:28 angelos Exp $	*/
/*	$KAME: ip6protosw.h,v 1.14 2000/10/18 18:15:53 itojun Exp $	*/
d101 4
d111 2
d114 2
@


1.2
log
@Remove remaining unnecessary ifdefs (itojun will hate me for this :-)
@
text
@d1 2
a2 1
/*	$OpenBSD: ip6protosw.h,v 1.1 1999/12/08 06:50:22 itojun Exp $	*/
d7 1
a7 1
 * 
d19 1
a19 1
 * 
d85 2
d91 10
d104 1
d107 1
@


1.2.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 2
/*	$OpenBSD: ip6protosw.h,v 1.4 2001/02/16 16:00:58 itojun Exp $	*/
/*	$KAME: ip6protosw.h,v 1.22 2001/02/08 18:02:08 itojun Exp $	*/
d6 1
a6 1
 *
d18 1
a18 1
 *
a83 2
struct icmp6_hdr;
struct in6_addr;
a87 14
 *
 * IPv6 ICMP IPv6 [exthdrs] finalhdr paylaod
 * ^    ^    ^              ^
 * |    |    ip6c_ip6       ip6c_off
 * |    ip6c_icmp6
 * ip6c_m
 *
 * ip6c_finaldst usually points to ip6c_ip6->ip6_dst.  if the original
 * (internal) packet carries a routing header, it may point the final
 * dstination address in the routing header.
 *
 * ip6c_src: ip6c_ip6->ip6_src + scope info + flowlabel in ip6c_ip6
 *	(beware of flowlabel, if you try to compare it against others)
 * ip6c_dst: ip6c_finaldst + scope info
a90 1
	struct icmp6_hdr *ip6c_icmp6;	/* icmp6 header of target packet */
a92 5
	struct sockaddr_in6 *ip6c_src;	/* srcaddr w/ additional info */
	struct sockaddr_in6 *ip6c_dst;	/* (final) dstaddr w/ additional info */
	struct in6_addr *ip6c_finaldst;	/* final destination address */
	void *ip6c_cmdarg;		/* control command dependent data */
	u_int8_t ip6c_nxt;		/* final next header field */
@


1.2.2.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d125 8
a132 8
					/* input to protocol (from below) */
	int	(*pr_input)(struct mbuf **, int *, int);
					/* output to protocol (from above) */
	int	(*pr_output)(struct mbuf *, ...);
					/* control input (from below) */
	void	(*pr_ctlinput)(int, struct sockaddr *, void *);
					/* control output (from above) */
	int	(*pr_ctloutput)(int, struct socket *, int, int, struct mbuf **);
d135 3
a137 3
					/* user request: see list below */
	int	(*pr_usrreq)(struct socket *, int, struct mbuf *,
		    struct mbuf *, struct mbuf *, struct proc *);
d140 2
a141 1
	void	(*pr_init)(void);	/* initialization hook */
d143 8
a150 5
	void	(*pr_fasttimo)(void);	/* fast timeout (200ms) */
	void	(*pr_slowtimo)(void);	/* slow timeout (500ms) */
	void	(*pr_drain)(void);	/* flush any excess space possible */
					/* sysctl for protocol */
	int	(*pr_sysctl)(int *, u_int, void *, size_t *, void *, size_t);
@


1.2.2.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ip6protosw.h,v 1.2.2.2 2002/03/28 14:56:46 niklas Exp $	*/
d48 5
a52 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1
log
@bring in KAME IPv6 code, dated 19991208.
replaces NRL IPv6 layer.  reuses NRL pcb layer.  no IPsec-on-v6 support.
see sys/netinet6/{TODO,IMPLEMENTATION} for more details.

GENERIC configuration should work fine as before.  GENERIC.v6 works fine
as well, but you'll need KAME userland tools to play with IPv6 (will be
bringed into soon).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a83 3
#ifdef __FreeBSD__
struct pr_usrreqs;
#endif
a95 1
#if (defined(__FreeBSD__) && __FreeBSD__ < 3) || defined(__OpenBSD__)
a96 3
#else
	int 	pr_type;		/* socket type used for */
#endif
a103 3
#ifdef __bsdi__
	int	(*pr_output)();		/* output to protocol (from above) */
#else
a105 1
#endif
a111 1
#if !(defined(__FreeBSD__) && __FreeBSD__ < 3) && !defined(__bsdi__)
a114 5
#else
	int	(*pr_usrreq)		/* user request: see list below */
			__P((struct socket *, int, struct mbuf *,
			     struct mbuf *, struct mbuf *));
#endif
a125 3
#ifdef __FreeBSD__
	struct  pr_usrreqs *pr_usrreqs;	/* supersedes pr_usrreq() */
#else
a127 1
#endif
@

