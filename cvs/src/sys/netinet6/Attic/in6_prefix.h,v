head	1.6;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.4.0.6
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.2
	SMP_BASE:1.2
	kame_19991208:1.1;
locks; strict;
comment	@ * @;


1.6
date	2002.06.08.21.22.02;	author itojun;	state dead;
branches;
next	1.5;

1.5
date	2002.03.14.01.27.12;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.16.16.00.57;	author itojun;	state Exp;
branches
	1.4.6.1;
next	1.3;

1.3
date	2001.02.08.14.51.22;	author itojun;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.04.18.13.36;	author itojun;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	99.12.08.06.50.21;	author itojun;	state Exp;
branches;
next	;

1.2.2.1
date	2001.05.14.22.40.18;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2002.03.28.14.56.46;	author niklas;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2003.03.28.00.41.29;	author niklas;	state dead;
branches;
next	;

1.4.6.1
date	2002.06.11.03.31.37;	author art;	state dead;
branches;
next	;


desc
@@


1.6
log
@sync with latest KAME in6_ifaddr/prefix/default router manipulation.
behavior changes:
- two iocts used by ndp(8) are now obsolete (backward compat provided).
  use sysctl path instead.
- lo0 does not get ::1 automatically.  it will get ::1 when lo0 comes up.
@
text
@/*	$OpenBSD: in6_prefix.h,v 1.5 2002/03/14 01:27:12 millert Exp $	*/
/*	$KAME: in6_prefix.h,v 1.10 2001/02/08 16:30:30 itojun Exp $	*/

/*
 * Copyright (C) 1995, 1996, 1997, 1998 and 1999 WIDE Project.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/timeout.h>

struct rr_prefix {
	struct ifprefix	rp_ifpr;
	LIST_ENTRY(rr_prefix) rp_entry;
	LIST_HEAD(rp_addrhead, rp_addr) rp_addrhead;
	struct sockaddr_in6 rp_prefix;	/* prefix */
	u_int32_t rp_vltime;	/* advertised valid lifetime */
	u_int32_t rp_pltime;	/* advertised preferred lifetime */
	time_t rp_expire;	/* expiration time of the prefix */
	time_t rp_preferred;	/* preferred time of the prefix */
	struct in6_prflags rp_flags;
	u_char	rp_origin; /* from where this prefix info is obtained */
	struct	rp_stateflags {
		/* if some prefix should be added to this prefix */
		u_char addmark : 1;
		u_char delmark : 1; /* if this prefix will be deleted */
	} rp_stateflags;
};

#define rp_type		rp_ifpr.ifpr_type
#define rp_ifp		rp_ifpr.ifpr_ifp
#define rp_plen		rp_ifpr.ifpr_plen

#define rp_raf		rp_flags.prf_ra
#define rp_raf_onlink		rp_flags.prf_ra.onlink
#define rp_raf_auto		rp_flags.prf_ra.autonomous

#define rp_statef_addmark	rp_stateflags.addmark
#define rp_statef_delmark	rp_stateflags.delmark

#define rp_rrf		rp_flags.prf_rr
#define rp_rrf_decrvalid	rp_flags.prf_rr.decrvalid
#define rp_rrf_decrprefd	rp_flags.prf_rr.decrprefd

struct rp_addr {
	LIST_ENTRY(rp_addr)	ra_entry;
	struct in6_addr		ra_ifid;
	struct in6_ifaddr	*ra_addr;
	struct ra_flags {
		u_char anycast : 1;
	} ra_flags;
};

#define ifpr2rp(ifpr)	((struct rr_prefix *)(ifpr))
#define rp2ifpr(rp)	((struct ifprefix *)(rp))

#define RP_IN6(rp)	(&(rp)->rp_prefix.sin6_addr)

#define RR_INFINITE_LIFETIME		0xffffffff


LIST_HEAD(rr_prhead, rr_prefix);

extern struct rr_prhead rr_prefix;

void in6_rr_timer(void *);
extern struct timeout in6_rr_timer_ch;
int delete_each_prefix(struct rr_prefix *rpp, u_char origin);
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: in6_prefix.h,v 1.4 2001/02/16 16:00:57 itojun Exp $	*/
@


1.4
log
@pull in new pcb notification code from kame.  better handling of scope address.
@
text
@d1 1
a1 1
/*	$OpenBSD: in6_prefix.h,v 1.3 2001/02/08 14:51:22 itojun Exp $	*/
d89 1
a89 1
void in6_rr_timer __P((void *));
d91 1
a91 1
int delete_each_prefix  __P((struct rr_prefix *rpp, u_char origin));
@


1.4.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: in6_prefix.h,v 1.4 2001/02/16 16:00:57 itojun Exp $	*/
@


1.3
log
@use timeout_xx() throughout sys/netinet6.  sync with kame.
@
text
@d1 2
a2 2
/*	$OpenBSD: in6_prefix.h,v 1.2 2000/02/04 18:13:36 itojun Exp $	*/
/*	$KAME: in6_prefix.h,v 1.9 2001/02/08 10:57:00 itojun Exp $	*/
@


1.2
log
@more coverage of in6_ifdetach()'s cleanup process.
bug fix in SIOCGIFADDR_IN6 (point to point case).
@
text
@d1 2
a2 1
/*	$OpenBSD: in6_prefix.h,v 1.1 1999/12/08 06:50:21 itojun Exp $	*/
d7 1
a7 1
 * 
d19 1
a19 1
 * 
d33 2
d90 1
@


1.2.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 2
/*	$OpenBSD: in6_prefix.h,v 1.4 2001/02/16 16:00:57 itojun Exp $	*/
/*	$KAME: in6_prefix.h,v 1.10 2001/02/08 16:30:30 itojun Exp $	*/
d6 1
a6 1
 *
d18 1
a18 1
 *
a31 2
#include <sys/timeout.h>

a86 1
extern struct timeout in6_rr_timer_ch;
@


1.2.2.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d89 1
a89 1
void in6_rr_timer(void *);
d91 1
a91 1
int delete_each_prefix(struct rr_prefix *rpp, u_char origin);
@


1.2.2.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: in6_prefix.h,v 1.2.2.2 2002/03/28 14:56:46 niklas Exp $	*/
@


1.1
log
@bring in KAME IPv6 code, dated 19991208.
replaces NRL IPv6 layer.  reuses NRL pcb layer.  no IPsec-on-v6 support.
see sys/netinet6/{TODO,IMPLEMENTATION} for more details.

GENERIC configuration should work fine as before.  GENERIC.v6 works fine
as well, but you'll need KAME userland tools to play with IPv6 (will be
bringed into soon).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d87 1
a87 2
int delete_each_prefix  __P((struct socket *so, struct rr_prefix *rpp,
			     u_char origin));
@

