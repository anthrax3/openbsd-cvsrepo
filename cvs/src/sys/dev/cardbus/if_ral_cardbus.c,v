head	1.22;
access;
symbols
	OPENBSD_6_2:1.22.0.10
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.22.0.8
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.4
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.21.0.10
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.8
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.6
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.19.0.12
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.10
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.8
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.6
	OPENBSD_5_0:1.19.0.4
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.2
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.18.0.2
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.4
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.10.0.2
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4;
locks; strict;
comment	@ * @;


1.22
date	2015.11.24.17.11.39;	author mpi;	state Exp;
branches;
next	1.21;
commitid	5gdEnqVoJuTuwdTu;

1.21
date	2013.12.06.21.03.02;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2013.11.14.12.28.48;	author dlg;	state Exp;
branches;
next	1.19;

1.19
date	2010.08.25.21.37.59;	author kettenis;	state Exp;
branches;
next	1.18;

1.18
date	2010.04.05.14.14.02;	author damien;	state Exp;
branches;
next	1.17;

1.17
date	2010.03.27.21.40.13;	author jsg;	state Exp;
branches;
next	1.16;

1.16
date	2010.03.27.20.04.03;	author jsg;	state Exp;
branches;
next	1.15;

1.15
date	2010.03.22.22.28.27;	author jsg;	state Exp;
branches;
next	1.14;

1.14
date	2009.05.12.17.43.16;	author damien;	state Exp;
branches;
next	1.13;

1.13
date	2009.03.29.21.53.52;	author sthen;	state Exp;
branches;
next	1.12;

1.12
date	2008.11.25.22.20.11;	author damien;	state Exp;
branches;
next	1.11;

1.11
date	2008.07.21.19.41.44;	author damien;	state Exp;
branches;
next	1.10;

1.10
date	2007.11.15.21.15.34;	author damien;	state Exp;
branches;
next	1.9;

1.9
date	2006.10.22.12.14.44;	author damien;	state Exp;
branches;
next	1.8;

1.8
date	2006.10.12.16.35.52;	author grange;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.21.11.27.03;	author fkr;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.09.20.03.31;	author damien;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.16.01.36.25;	author brad;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.22.10.40.46;	author damien;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.19.12.10.03;	author damien;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.18.19.57.26;	author damien;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.15.20.51.18;	author damien;	state Exp;
branches;
next	;


desc
@@


1.22
log
@You only need <net/if_dl.h> if you're using LLADDR() or a sockaddr_dl.
@
text
@/*	$OpenBSD: if_ral_cardbus.c,v 1.21 2013/12/06 21:03:02 deraadt Exp $  */

/*-
 * Copyright (c) 2005-2010 Damien Bergamini <damien.bergamini@@free.fr>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * CardBus front-end for the Ralink RT2560/RT2561/RT2860/RT3090 driver.
 */

#include "bpfilter.h"

#include <sys/param.h>
#include <sys/sockio.h>
#include <sys/mbuf.h>
#include <sys/kernel.h>
#include <sys/socket.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/timeout.h>
#include <sys/device.h>

#include <machine/bus.h>
#include <machine/intr.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <net80211/ieee80211_var.h>
#include <net80211/ieee80211_amrr.h>
#include <net80211/ieee80211_radiotap.h>

#include <dev/ic/rt2560var.h>
#include <dev/ic/rt2661var.h>
#include <dev/ic/rt2860var.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#include <dev/cardbus/cardbusvar.h>

static struct ral_opns {
	int	(*attach)(void *, int);
	int	(*detach)(void *);
	void	(*suspend)(void *);
	void	(*resume)(void *);
	int	(*intr)(void *);

}  ral_rt2560_opns = {
	rt2560_attach,
	rt2560_detach,
	rt2560_suspend,
	rt2560_wakeup,
	rt2560_intr

}, ral_rt2661_opns = {
	rt2661_attach,
	rt2661_detach,
	rt2661_suspend,
	rt2661_wakeup,
	rt2661_intr

}, ral_rt2860_opns = {
	rt2860_attach,
	rt2860_detach,
	rt2860_suspend,
	rt2860_wakeup,
	rt2860_intr
};

struct ral_cardbus_softc {
	union {
		struct rt2560_softc	sc_rt2560;
		struct rt2661_softc	sc_rt2661;
		struct rt2860_softc	sc_rt2860;
	} u;
#define sc_sc	u.sc_rt2560

	/* cardbus specific goo */
	struct ral_opns		*sc_opns;
	cardbus_devfunc_t	sc_ct;
	pcitag_t		sc_tag;
	void			*sc_ih;
	bus_size_t		sc_mapsize;
	pcireg_t		sc_bar_val;
	int			sc_intrline;
	pci_chipset_tag_t	sc_pc;
};

int	ral_cardbus_match(struct device *, void *, void *);
void	ral_cardbus_attach(struct device *, struct device *, void *);
int	ral_cardbus_detach(struct device *, int);
int	ral_cardbus_activate(struct device *, int);

struct cfattach ral_cardbus_ca = {
	sizeof (struct ral_cardbus_softc), ral_cardbus_match,
	ral_cardbus_attach, ral_cardbus_detach,
	ral_cardbus_activate
};

static const struct pci_matchid ral_cardbus_devices[] = {
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2560 },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2561 },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2561S },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2661 },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2860 },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2890 },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2760 },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2790 },
	{ PCI_VENDOR_AWT,    PCI_PRODUCT_AWT_RT2890 },
	{ PCI_VENDOR_EDIMAX, PCI_PRODUCT_EDIMAX_RT2860_1 },
	{ PCI_VENDOR_EDIMAX, PCI_PRODUCT_EDIMAX_RT2860_2 },
	{ PCI_VENDOR_EDIMAX, PCI_PRODUCT_EDIMAX_RT2860_3 },
	{ PCI_VENDOR_EDIMAX, PCI_PRODUCT_EDIMAX_RT2860_4 },
	{ PCI_VENDOR_EDIMAX, PCI_PRODUCT_EDIMAX_RT2860_5 },
	{ PCI_VENDOR_EDIMAX, PCI_PRODUCT_EDIMAX_RT2860_6 },
	{ PCI_VENDOR_EDIMAX, PCI_PRODUCT_EDIMAX_RT2860_7 },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT3062 },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT3090 },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT3091 },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT3092 },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT3562 },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT3592 },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT3593 }
};

int	ral_cardbus_enable(struct rt2560_softc *);
void	ral_cardbus_disable(struct rt2560_softc *);
void	ral_cardbus_setup(struct ral_cardbus_softc *);
void	ral_cardbus_wakeup(struct ral_cardbus_softc *);

int
ral_cardbus_match(struct device *parent, void *match, void *aux)
{
	return (cardbus_matchbyid((struct cardbus_attach_args *)aux,
	    ral_cardbus_devices, nitems(ral_cardbus_devices)));
}

void
ral_cardbus_attach(struct device *parent, struct device *self, void *aux)
{
	struct ral_cardbus_softc *csc = (struct ral_cardbus_softc *)self;
	struct rt2560_softc *sc = &csc->sc_sc;
	struct cardbus_attach_args *ca = aux;
	cardbus_devfunc_t ct = ca->ca_ct;
	bus_addr_t base;
	int error;

	if (PCI_VENDOR(ca->ca_id) == PCI_VENDOR_RALINK) {
		switch (PCI_PRODUCT(ca->ca_id)) {
		case PCI_PRODUCT_RALINK_RT2560:
			csc->sc_opns = &ral_rt2560_opns;
			break;
		case PCI_PRODUCT_RALINK_RT2561:
		case PCI_PRODUCT_RALINK_RT2561S:
		case PCI_PRODUCT_RALINK_RT2661:
			csc->sc_opns = &ral_rt2661_opns;
			break;
		default:
			csc->sc_opns = &ral_rt2860_opns;
			break;
		}
	} else {
		/* all other vendors are RT2860 only */
		csc->sc_opns = &ral_rt2860_opns;
	}
	sc->sc_dmat = ca->ca_dmat;
	csc->sc_ct = ct;
	csc->sc_tag = ca->ca_tag;
	csc->sc_intrline = ca->ca_intrline;
	csc->sc_pc = ca->ca_pc;

	/* power management hooks */
	sc->sc_enable = ral_cardbus_enable;
	sc->sc_disable = ral_cardbus_disable;

	/* map control/status registers */
	error = Cardbus_mapreg_map(ct, CARDBUS_BASE0_REG,
	    PCI_MAPREG_TYPE_MEM, 0, &sc->sc_st, &sc->sc_sh, &base,
	    &csc->sc_mapsize);
	if (error != 0) {
		printf(": can't map mem space\n");
		return;
	}

	csc->sc_bar_val = base | PCI_MAPREG_TYPE_MEM;

	/* set up the PCI configuration registers */
	ral_cardbus_setup(csc);

	printf(": irq %d", csc->sc_intrline);

	(*csc->sc_opns->attach)(sc, PCI_PRODUCT(ca->ca_id));

	Cardbus_function_disable(ct);
}

int
ral_cardbus_detach(struct device *self, int flags)
{
	struct ral_cardbus_softc *csc = (struct ral_cardbus_softc *)self;
	struct rt2560_softc *sc = &csc->sc_sc;
	cardbus_devfunc_t ct = csc->sc_ct;
	cardbus_chipset_tag_t cc = ct->ct_cc;
	cardbus_function_tag_t cf = ct->ct_cf;
	int error;

	error = (*csc->sc_opns->detach)(sc);
	if (error != 0)
		return error;

	/* unhook the interrupt handler */
	if (csc->sc_ih != NULL) {
		cardbus_intr_disestablish(cc, cf, csc->sc_ih);
		csc->sc_ih = NULL;
	}

	/* release bus space and close window */
	Cardbus_mapreg_unmap(ct, CARDBUS_BASE0_REG, sc->sc_st, sc->sc_sh,
	    csc->sc_mapsize);

	return 0;
}

int
ral_cardbus_activate(struct device *self, int act)
{
	struct ral_cardbus_softc *csc = (struct ral_cardbus_softc *)self;
	struct rt2560_softc *sc = &csc->sc_sc;

	switch (act) {
	case DVACT_SUSPEND:
		(*csc->sc_opns->suspend)(sc);
		break;
	case DVACT_WAKEUP:
		ral_cardbus_wakeup(csc);
		break;
	}

	return 0;
}

int
ral_cardbus_enable(struct rt2560_softc *sc)
{
	struct ral_cardbus_softc *csc = (struct ral_cardbus_softc *)sc;
	cardbus_devfunc_t ct = csc->sc_ct;
	cardbus_chipset_tag_t cc = ct->ct_cc;
	cardbus_function_tag_t cf = ct->ct_cf;

	/* power on the socket */
	Cardbus_function_enable(ct);

	/* setup the PCI configuration registers */
	ral_cardbus_setup(csc);

	/* map and establish the interrupt handler */
	csc->sc_ih = cardbus_intr_establish(cc, cf, csc->sc_intrline, IPL_NET,
	    csc->sc_opns->intr, sc, sc->sc_dev.dv_xname);
	if (csc->sc_ih == NULL) {
		printf("%s: could not establish interrupt at %d\n",
		    sc->sc_dev.dv_xname, csc->sc_intrline);
		Cardbus_function_disable(ct);
		return 1;
	}

	return 0;
}

void
ral_cardbus_disable(struct rt2560_softc *sc)
{
	struct ral_cardbus_softc *csc = (struct ral_cardbus_softc *)sc;
	cardbus_devfunc_t ct = csc->sc_ct;
	cardbus_chipset_tag_t cc = ct->ct_cc;
	cardbus_function_tag_t cf = ct->ct_cf;

	/* unhook the interrupt handler */
	cardbus_intr_disestablish(cc, cf, csc->sc_ih);
	csc->sc_ih = NULL;

	/* power down the socket */
	Cardbus_function_disable(ct);
}

void
ral_cardbus_setup(struct ral_cardbus_softc *csc)
{
	cardbus_devfunc_t ct = csc->sc_ct;
	cardbus_chipset_tag_t cc = ct->ct_cc;
	pci_chipset_tag_t pc = csc->sc_pc;
	cardbus_function_tag_t cf = ct->ct_cf;
	pcireg_t reg;

	/* program the BAR */
	pci_conf_write(pc, csc->sc_tag, CARDBUS_BASE0_REG,
	    csc->sc_bar_val);

	/* make sure the right access type is on the cardbus bridge */
	(*cf->cardbus_ctrl)(cc, CARDBUS_MEM_ENABLE);
	(*cf->cardbus_ctrl)(cc, CARDBUS_BM_ENABLE);

	/* enable the appropriate bits in the PCI CSR */
	reg = pci_conf_read(pc, csc->sc_tag,
	    PCI_COMMAND_STATUS_REG);
	reg |= PCI_COMMAND_MASTER_ENABLE | PCI_COMMAND_MEM_ENABLE;
	pci_conf_write(pc, csc->sc_tag, PCI_COMMAND_STATUS_REG,
	    reg);
}

void
ral_cardbus_wakeup(struct ral_cardbus_softc *csc)
{
	struct rt2560_softc *sc = &csc->sc_sc;
	int s;

	s = splnet();
	(*csc->sc_opns->resume)(sc);
	splx(s);
}
@


1.21
log
@Add a DVACT_WAKEUP op to the *_activate() API.  This is called after the
kernel resumes normal (non-cold, able to run processes, etc) operation.
Previously we were relying on specific DVACT_RESUME op's in drivers
creating callback/threads themselves, but that has become too common,
indicating the need for a built-in mechanism.
ok dlg kettenis, tested by a sufficient amount of people
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.20 2013/11/14 12:28:48 dlg Exp $  */
a38 1
#include <net/if_dl.h>
@


1.20
log
@replace workqs with tasks for handling resume

from kimberley manning
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.19 2010/08/25 21:37:59 kettenis Exp $  */
a33 1
#include <sys/task.h>
d70 1
a70 1
	rt2560_resume,
d77 1
a77 1
	rt2661_resume,
d84 1
a84 1
	rt2860_resume,
a104 1
	struct task		sc_resume_t;
d147 1
a147 1
void	ral_cardbus_resume(void *, void *);
a165 2
	task_set(&csc->sc_resume_t, ral_cardbus_resume, csc, NULL);

d252 2
a253 2
	case DVACT_RESUME:
		task_add(systq, &csc->sc_resume_t);
d329 1
a329 1
ral_cardbus_resume(void *arg1, void *arg2)
a330 1
	struct ral_cardbus_softc *csc = arg1;
@


1.19
log
@Make CardBus ral(4) suspend and resume properly on machines that keep the
CardBus bridge powered up during suspend.  Step zero on the long road
towards fully suspending CardBus on all machines.

ok deraadt@@, damien@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.18 2010/04/05 14:14:02 damien Exp $  */
d34 1
a34 1
#include <sys/workq.h>
d106 1
a106 1
	struct workq_task	sc_resume_wqt;
d168 2
d257 1
a257 2
		workq_queue_task(NULL, &csc->sc_resume_wqt, 0,
		    ral_cardbus_resume, csc, NULL);
@


1.18
log
@Initial bits for >=RT3090 support.
Probably not functionnal yet (but test reports are welcome).

Update microcode for RT2860 while I'm here (remember to run
make && make install under sys/dev/microcode/ral/).
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.17 2010/03/27 21:40:13 jsg Exp $  */
d34 1
d63 2
d70 2
d77 2
d84 2
d106 1
d112 1
d116 2
a117 1
	ral_cardbus_attach, ral_cardbus_detach
a147 1
void	ral_cardbus_power(struct rt2560_softc *, int);
d149 1
a194 1
	sc->sc_power = ral_cardbus_power;
d245 19
a306 11
ral_cardbus_power(struct rt2560_softc *sc, int why)
{
	struct ral_cardbus_softc *csc = (struct ral_cardbus_softc *)sc;

	if (why == PWR_RESUME) {
		/* kick the PCI configuration registers */
		ral_cardbus_setup(csc);
	}
}

void
d329 12
@


1.17
log
@Give cardbus the pci_chipset_tag_t from pccbb and push it out through
cardbus_attach_args so we can switch to using proper pci config
space functions instead of callback based wrappers.

ok oga@@ krw@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.16 2010/03/27 20:04:03 jsg Exp $  */
d4 1
a4 2
 * Copyright (c) 2005-2007
 *	Damien Bergamini <damien.bergamini@@free.fr>
d20 1
a20 1
 * CardBus front-end for the Ralink RT2560/RT2561/RT2661/RT2860 driver.
d124 8
a131 1
	{ PCI_VENDOR_EDIMAX, PCI_PRODUCT_EDIMAX_RT2860_7 }
d166 1
a166 4
		case PCI_PRODUCT_RALINK_RT2860:
		case PCI_PRODUCT_RALINK_RT2890:
		case PCI_PRODUCT_RALINK_RT2760:
		case PCI_PRODUCT_RALINK_RT2790:
@


1.16
log
@Bring back cardbus_chipset_tag_t which is in practice a
pointer to the pccbb softc, to distinguish it from a pci_chipset_tag_t
which can be passed to the normal pci functions.

Suggested by and ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.15 2010/03/22 22:28:27 jsg Exp $  */
d97 1
d175 1
d289 1
d294 1
a294 1
	cardbus_conf_write(cc, cf, csc->sc_tag, CARDBUS_BASE0_REG,
d302 1
a302 1
	reg = cardbus_conf_read(cc, cf, csc->sc_tag,
d305 1
a305 1
	cardbus_conf_write(cc, cf, csc->sc_tag, PCI_COMMAND_STATUS_REG,
@


1.15
log
@Remove some cardbus defines and types which are identical to
their pci counterparts, similar to recent changes in NetBSD.

ok oga@@ deraadt@@ jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.14 2009/05/12 17:43:16 damien Exp $  */
d207 1
a207 1
	pci_chipset_tag_t cc = ct->ct_cc;
d233 1
a233 1
	pci_chipset_tag_t cc = ct->ct_cc;
d260 1
a260 1
	pci_chipset_tag_t cc = ct->ct_cc;
d286 1
a286 1
	pci_chipset_tag_t cc = ct->ct_cc;
@


1.14
log
@fix EDIMAX attachment.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.13 2009/03/29 21:53:52 sthen Exp $  */
d92 1
a92 1
	cardbustag_t		sc_tag;
d108 1
a108 1
static const struct cardbus_matchid ral_cardbus_devices[] = {
d149 2
a150 2
	if (CARDBUS_VENDOR(ca->ca_id) == PCI_VENDOR_RALINK) {
		switch (CARDBUS_PRODUCT(ca->ca_id)) {
d182 1
a182 1
	    CARDBUS_MAPREG_TYPE_MEM, 0, &sc->sc_st, &sc->sc_sh, &base,
d189 1
a189 1
	csc->sc_bar_val = base | CARDBUS_MAPREG_TYPE_MEM;
d196 1
a196 1
	(*csc->sc_opns->attach)(sc, CARDBUS_PRODUCT(ca->ca_id));
d207 1
a207 1
	cardbus_chipset_tag_t cc = ct->ct_cc;
d233 1
a233 1
	cardbus_chipset_tag_t cc = ct->ct_cc;
d260 1
a260 1
	cardbus_chipset_tag_t cc = ct->ct_cc;
d286 1
a286 1
	cardbus_chipset_tag_t cc = ct->ct_cc;
d300 3
a302 3
	    CARDBUS_COMMAND_STATUS_REG);
	reg |= CARDBUS_COMMAND_MASTER_ENABLE | CARDBUS_COMMAND_MEM_ENABLE;
	cardbus_conf_write(cc, cf, csc->sc_tag, CARDBUS_COMMAND_STATUS_REG,
@


1.13
log
@make various strings ("can't map mem space" and similar) more consistent
between instances, saving space in the kernel. feedback from many (some
incorporated, some left for future work).

ok deraadt, kettenis, "why not" miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.12 2008/11/25 22:20:11 damien Exp $  */
d109 2
a110 2
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2560  },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2561  },
d112 13
a124 6
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2661  },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2860  },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2890  },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2760  },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2790  },
	{ PCI_VENDOR_AWT,    PCI_PRODUCT_AWT_RT2890     }
d149 19
a167 14
	switch (CARDBUS_PRODUCT(ca->ca_id)) {
	case PCI_PRODUCT_RALINK_RT2560:
		csc->sc_opns = &ral_rt2560_opns;
		break;
	case PCI_PRODUCT_RALINK_RT2561:
	case PCI_PRODUCT_RALINK_RT2561S:
	case PCI_PRODUCT_RALINK_RT2661:
		csc->sc_opns = &ral_rt2661_opns;
		break;
	case PCI_PRODUCT_RALINK_RT2860:
	case PCI_PRODUCT_RALINK_RT2890:
	case PCI_PRODUCT_RALINK_RT2760:
	case PCI_PRODUCT_RALINK_RT2790:
	case PCI_PRODUCT_AWT_RT2890:
a168 1
		break;
a169 1

@


1.12
log
@more sizeof->nitems
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.11 2008/07/21 19:41:44 damien Exp $  */
d175 1
a175 1
		printf(": could not map memory space\n");
@


1.11
log
@rename rt2860 pci ids to match with reality.
import some fixes for 1T2R adapters from the linux vendor driver.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.10 2007/11/15 21:15:34 damien Exp $  */
d129 1
a129 2
	    ral_cardbus_devices,
	    sizeof (ral_cardbus_devices) / sizeof (ral_cardbus_devices[0])));
@


1.10
log
@New driver for Ralink RT2860 chipset.
Attaches as 'ral' as it shares the PCI and CardBus frontends with
RT2560 and RT2661 though it is actually a separate driver.

Requires a firmware that can't be redistributed with the base system
due to license restrictions (exact same license as iwn(4) firmware).

The 802.11n capabilities not yet supported (except MIMO).
Great thanks to Sam Fourman Jr for donating hardware.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.9 2006/10/22 12:14:44 damien Exp $  */
d109 9
a117 7
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2560   },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2561   },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2561S  },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2661   },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2860_1 },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2860_2 },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2860_3 }
d152 5
a156 3
	case PCI_PRODUCT_RALINK_RT2860_1:
	case PCI_PRODUCT_RALINK_RT2860_2:
	case PCI_PRODUCT_RALINK_RT2860_3:
@


1.9
log
@replace rssadapt(9) with amrr for automatic rate control.
as a side-effect, this should fix all the "bogus xmit rate" panics
users have been complaining about for some time when operating in
HostAP mode.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.8 2006/10/12 16:35:52 grange Exp $  */
d4 1
a4 1
 * Copyright (c) 2005, 2006
d21 1
a21 1
 * CardBus front-end for the Ralink RT2560/RT2561/RT2561S/RT2661 driver.
d52 1
d74 5
d85 1
d109 7
a115 4
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2560  },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2561  },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2561S },
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2661  }
d141 15
a155 3
	csc->sc_opns =
	    (CARDBUS_PRODUCT(ca->ca_id) == PCI_PRODUCT_RALINK_RT2560) ?
	    &ral_rt2560_opns : &ral_rt2661_opns;
@


1.8
log
@Add a symbolic name parameter to cardbus_intr_establish().
Count cardbus devices interrupts in cbb(4) using evcount(9).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.7 2006/06/21 11:27:03 fkr Exp $  */
d47 1
a47 1
#include <net80211/ieee80211_rssadapt.h>
@


1.7
log
@removal of '#ifdef rbus ... #else ...' directives, we use rbus in all
cases anyways, so we might as well remove code (the !rbus case) thats been
dead throughout the last years and just use the rbus code without ifdefs.

brad, miod "I am all for this diff"
ok deraadt, mickey
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.6 2006/01/09 20:03:31 damien Exp $  */
d209 1
a209 1
	    csc->sc_opns->intr, sc);
@


1.6
log
@- add preliminary support for Ralink Technology RT2561, RT2561S and RT2661
  chipsets in ral(4).
- restructure the code a bit; split ic/ral.c into ic/rt2560.c and ic/rt2661.c
- import the 8051 microcode files required by these chipsets.
- more to come;  there is currently no automatic rate control and some
  features are untested (hostap and ibss modes for instance).  most of
  the pre-802.11n capabilities of the RT2661 chipset are not supported
  (like frame aggregation, piggy-back).  MIMO should work though the
  performance/range gain has not been measured.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.5 2005/05/16 01:36:25 brad Exp $  */
a152 5

#if rbus
#else
	(*cf->cardbus_mem_open)(cc, 0, base, base + csc->sc_mapsize);
#endif
@


1.5
log
@Use cardbus_matchbyid().

ok millert@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.4 2005/02/22 10:40:46 damien Exp $  */
d4 1
a4 1
 * Copyright (c) 2005
d21 1
a21 1
 * CardBus front-end for the Ralink RT2500 driver.
d50 2
a51 1
#include <dev/ic/ralvar.h>
d59 16
d76 5
a80 1
	struct ral_softc	sc_sc;
d83 1
d101 5
a105 2
const struct cardbus_matchid ral_cardbus_devices[] = {
	{ PCI_VENDOR_RALINK, PCI_PRODUCT_RALINK_RT2560 },
d108 3
a110 3
int	ral_cardbus_enable(struct ral_softc *);
void	ral_cardbus_disable(struct ral_softc *);
void	ral_cardbus_power(struct ral_softc *, int);
d118 1
a118 1
	    sizeof(ral_cardbus_devices)/sizeof(ral_cardbus_devices[0])));
d125 1
a125 1
	struct ral_softc *sc = &csc->sc_sc;
d131 4
d166 1
a166 1
	ral_attach(sc);
d175 1
a175 1
	struct ral_softc *sc = &csc->sc_sc;
d181 1
a181 1
	error = ral_detach(sc);
d199 1
a199 1
ral_cardbus_enable(struct ral_softc *sc)
d214 1
a214 1
	    ral_intr, sc);
d226 1
a226 1
ral_cardbus_disable(struct ral_softc *sc)
d242 1
a242 1
ral_cardbus_power(struct ral_softc *sc, int why)
@


1.4
log
@make ral compile on macppc.
pointed out by "barryg" (Barry Dexter A. Gonzaga).
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.3 2005/02/19 12:10:03 damien Exp $  */
d79 4
d91 3
a93 7
	struct cardbus_attach_args *ca = aux;

	if (CARDBUS_VENDOR(ca->ca_id) == PCI_VENDOR_RALINK &&
	    CARDBUS_PRODUCT(ca->ca_id) == PCI_PRODUCT_RALINK_RT2560)
		return 1;

	return 0;
@


1.3
log
@fix dmesg output.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.2 2005/02/18 19:57:26 damien Exp $  */
d34 1
@


1.2
log
@make sure bpfilter.h is included before including ralvar.h. fixes a panic
in if_ral_cardbus.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ral_cardbus.c,v 1.1 2005/02/15 20:51:18 damien Exp $  */
a109 2
	printf("\n");

d134 2
d186 2
a187 1
		printf(": could not establish interrupt\n");
a190 1
	printf(" irq %d\n", csc->sc_intrline);
@


1.1
log
@Driver for Ralink Technology RT2500 wireless adapters.
@
text
@d1 1
a1 1
/*	$OpenBSD$  */
d23 2
@

