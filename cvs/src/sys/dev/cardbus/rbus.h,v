head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.26
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.24
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.14
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.22
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.20
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.18
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.14
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.12
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.10
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.3
	UBC:1.1.0.12
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.10
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.8
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2010.09.22.02.28.37;	author jsg;	state Exp;
branches;
next	1.9;

1.9
date	2010.04.02.12.11.55;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2010.01.13.09.10.33;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.21.21.22.17;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.21.11.27.03;	author fkr;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.08.22.38.40;	author fkr;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.13.18.44.38;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.27.23.39.55;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.53;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.08.05.50.53;	author aaron;	state Exp;
branches
	1.1.8.1
	1.1.12.1;
next	;

1.1.8.1
date	2001.05.14.22.23.14;	author niklas;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2002.03.29.23.39.33;	author niklas;	state Exp;
branches;
next	1.1.8.3;

1.1.8.3
date	2003.03.28.00.38.10;	author niklas;	state Exp;
branches;
next	;

1.1.12.1
date	2002.06.11.03.42.16;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@remove unused offset argument to rbus functions
ok krw@@ kettenis@@
@
text
@/*	$OpenBSD: rbus.h,v 1.9 2010/04/02 12:11:55 jsg Exp $ */
/*	$NetBSD: rbus.h,v 1.3 1999/12/15 12:28:55 kleink Exp $	*/
/*
 * Copyright (c) 1999
 *     HAYAKAWA Koichi.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _DEV_CARDBUS_RBUS_H_
#define _DEV_CARDBUS_RBUS_H_

/*
 * This file defines the rbus (pseudo) class
 *
 * What is rbus?
 *
 *  Ths rbus is a recursive bus-space administrator.  This means a
 *  parent bus-space administrator, which usually belongs to a bus
 *  bridge, makes some child bus-space administrators and gives
 *  (restricted) bus-space to children.  There is a root bus-space
 *  administrator which maintains the whole bus-space.
 *
 * Why recursive?
 *
 *  The recursive bus-space administration has two reasons. For one
 *  this modelling matches the actual memory and io space management 
 *  of bridge devices quite well. Furthermore  is the rbus a
 *  distributed management system, as such it plays well with
 *  multi-thread kernel.
 *
 * Abstraction
 *
 *  rbus can model a bus-to-bus bridge in two ways: dedicated or shared
 *  Dedicated: the bridge has its own bus space.
 *  Shared: the bridge has bus space, but this bus space is
 *  shared with other bus bridges. 
 */


/* require sys/extent.h */
/* require machine/bus.h */

struct extent;


/*
 *     General rule
 *
 * 1) When a rbustag has its own space (whether shared or dedicated),
 *    allocate from rb_ext.
 */
struct rbustag {
	bus_space_tag_t rb_bt;
	struct extent *rb_ext;
	bus_addr_t rb_start;
	bus_addr_t rb_end;
	bus_addr_t rb_offset;
#if notyet
	int (*rb_space_alloc)(struct rbustag *, bus_addr_t, bus_addr_t,
	    bus_addr_t, bus_size_t, bus_addr_t, bus_addr_t,
	    int, bus_addr_t *, bus_space_handle_t *);
	int (*rbus_space_free)(struct rbustag *, bus_space_handle_t,
	    bus_size_t, bus_addr_t *);
#endif
	int rb_flags;
#define RBUS_SPACE_INVALID   0x00
#define RBUS_SPACE_SHARE     0x01
#define RBUS_SPACE_DEDICATE  0x02
#define RBUS_SPACE_MASK      0x03
	/* your own data below */
	void *rb_md;
};

typedef struct rbustag *rbus_tag_t;


/*
 * These functions sugarcoat rbus interface to make rbus being used
 * easier.  These functions should be member functions of rbus
 * `class'.
 */
int	rbus_space_alloc(rbus_tag_t, bus_addr_t, bus_size_t, bus_addr_t,
	    bus_addr_t, int, bus_addr_t *, bus_space_handle_t *);

int	rbus_space_alloc_subregion(rbus_tag_t, bus_addr_t, bus_addr_t,
	    bus_addr_t, bus_size_t, bus_addr_t, bus_addr_t, int,
	    bus_addr_t *, bus_space_handle_t *);

int	rbus_space_free(rbus_tag_t, bus_space_handle_t, bus_size_t,
	    bus_addr_t *);


/*
 * These functions create rbus instance.  These functions are
 * so-called-as a constructor of rbus.
 *
 */

rbus_tag_t	rbus_new_body(bus_space_tag_t, struct extent *,
		      bus_addr_t, bus_addr_t, int);

rbus_tag_t	rbus_new_root_delegate(bus_space_tag_t, bus_addr_t, bus_size_t);
rbus_tag_t	rbus_new_root_share(bus_space_tag_t, struct extent *,
		    bus_addr_t, bus_size_t);

/*
 * Machine-dependent definitions.
 */
#include <machine/rbus_machdep.h>

#endif /* !_DEV_CARDBUS_RBUS_H_ */
@


1.9
log
@Remove parent/slave mode of rbus as nothing uses it.
ok kettenis, sgi usage of rbus_new_body() pointed out by miod
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus.h,v 1.8 2010/01/13 09:10:33 jsg Exp $ */
d121 1
a121 1
		      bus_addr_t, bus_addr_t, bus_addr_t, int);
d123 1
a123 2
rbus_tag_t	rbus_new_root_delegate(bus_space_tag_t, bus_addr_t, bus_size_t,
		    bus_addr_t);
d125 1
a125 1
		    bus_addr_t, bus_size_t, bus_addr_t);
@


1.8
log
@As per NetBSD move HAYAKAWA Koichi's licenses to two clause.
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus.h,v 1.7 2009/07/21 21:22:17 miod Exp $ */
d54 1
a54 2
 *  rbus can model a bus-to-bus bridge in three ways: dedicated, shared
 *  and slave. 
a57 3
 *  Slave: the bus bridge does not have its own bus space and has to ask
 *  a parent bus bridge for bus space once a client is requesting bus space
 *  to the bridge.
d70 1
a70 4
 * 1) When a rbustag has no space for child (meaning: rb_extent is
 *    NULL), ask bus-space for parent through rb_parent.
 *
 * 2) When a rbustag has its own space (whether shared or dedicated),
a74 1
	struct rbustag *rb_parent;
a90 1
#define RBUS_SPACE_ASK_PARENT 0x04
a117 2
 * rbus_new is a constructor which make an rbus instance from a parent
 * rbus.
d120 1
a120 1
rbus_tag_t	rbus_new_body(bus_space_tag_t, rbus_tag_t, struct extent *,
a122 2
rbus_tag_t	rbus_new(rbus_tag_t, bus_addr_t, bus_size_t, bus_addr_t, int);

a126 7

/*
 * This function release bus-space used by the argument.  This
 * function is so-called-as a destructor.
 */
int	rbus_delete(rbus_tag_t);

@


1.7
log
@Make rbus_new_body() invocable from outside cardbus.c, to allow md code
to use it to allocate a ``every operation will fail'' rbus in case of
error.
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus.h,v 1.6 2006/06/21 11:27:03 fkr Exp $ */
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the author.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.6
log
@removal of '#ifdef rbus ... #else ...' directives, we use rbus in all
cases anyways, so we might as well remove code (the !rbus case) thats been
dead throughout the last years and just use the rbus code without ifdefs.

brad, miod "I am all for this diff"
ok deraadt, mickey
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus.h,v 1.5 2006/06/08 22:38:40 fkr Exp $ */
d135 4
@


1.5
log
@attempt at correcting the comments to somewhat more proper english
prodded by uwe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus.h,v 1.4 2005/09/13 18:44:38 fgsch Exp $ */
a71 2

#define rbus 1
@


1.4
log
@knf; no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus.h,v 1.3 2002/05/27 23:39:55 tdeval Exp $ */
d39 1
a39 1
 * This file defines rbus (pseudo) class
d46 2
a47 2
 *  (restricted) bus-space for children.  There are a root bus-space
 *  administrator which maintains whole bus-space.
d51 4
a54 4
 *  The recursive bus-space administration has two virtues.  The
 *  former is this modelling matches the actual memory and io space
 *  management of bridge devices well.  The latter is the rbus is
 *  distributed management system, so it matches well with
d59 8
a66 6
 *  The rbus models bus-to-bus bridge into three way: dedicate, share
 *  and slave.  Dedicate means that the bridge has dedicate bus space.
 *  Share means that the bridge has bus space, but this bus space is
 *  shared with other bus bridges.  Slave means the bus bridge which
 *  does not have it own bus space and ask a parent bus bridge for bus
 *  space when a client requests bus space to the bridge.
d81 1
a81 1
 * 1) When a rbustag has no space for child (it means rb_extent is
@


1.3
log
@typo
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus.h,v 1.2 2002/03/14 01:26:53 millert Exp $ */
d42 1
a42 1
 * 
a72 1

d86 6
a91 6
  bus_space_tag_t rb_bt;
  struct rbustag *rb_parent;
  struct extent *rb_ext;
  bus_addr_t rb_start;
  bus_addr_t rb_end;
  bus_addr_t rb_offset;
d93 5
a97 8
  int (*rb_space_alloc)(struct rbustag *,
			     bus_addr_t start, bus_addr_t end,
			     bus_addr_t addr, bus_size_t size,
			     bus_addr_t mask, bus_addr_t align,
			     int flags,
			     bus_addr_t *addrp, bus_space_handle_t *bshp);
  int (*rbus_space_free)(struct rbustag *, bus_space_handle_t,
			      bus_size_t size, bus_addr_t *addrp);
d99 1
a99 1
  int rb_flags;
d105 2
a106 2
  /* your own data below */
  void *rb_md;
a111 2


d117 6
a122 11
int rbus_space_alloc(rbus_tag_t,
			  bus_addr_t addr, bus_size_t size, bus_addr_t mask,
			  bus_addr_t align, int flags,
			  bus_addr_t *addrp, bus_space_handle_t *bshp);

int rbus_space_alloc_subregion(rbus_tag_t,
				    bus_addr_t start, bus_addr_t end,
				    bus_addr_t addr, bus_size_t size,
				    bus_addr_t mask, bus_addr_t align,
				    int flags,
				    bus_addr_t *addrp, bus_space_handle_t *bshp);
d124 2
a125 2
int rbus_space_free(rbus_tag_t, bus_space_handle_t, bus_size_t size,
			 bus_addr_t *addrp);
d135 1
a135 2
rbus_tag_t rbus_new(rbus_tag_t parent, bus_addr_t start, bus_size_t size,
			 bus_addr_t offset, int flags);
d137 4
a140 4
rbus_tag_t rbus_new_root_delegate(bus_space_tag_t, bus_addr_t, bus_size_t,
				       bus_addr_t offset);
rbus_tag_t rbus_new_root_share(bus_space_tag_t, struct extent *,
				    bus_addr_t, bus_size_t,bus_addr_t offset);
d146 1
a146 1
int rbus_delete(rbus_tag_t);
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus.h,v 1.1 2000/04/08 05:50:53 aaron Exp $ */
d45 1
a45 1
 *  bridge, makes some child bus-space administorators and gives
@


1.1
log
@Initial check-in for support of 32-bit CardBus PC Cards; from NetBSD. On many
machines, this code needs the new PCIBIOS* options enabled in the kernel config
file to work, but your mileage may vary. Included is a working 3c575 driver for
3Com 10/100 CardBus PC Card NICs (tested only with the 'C' revision). The 3c575
is the pccard version of the PCI EtherLink XL cards, and thus the xl driver has
been split into /sys/dev/ic.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d94 1
a94 1
  int (*rb_space_alloc) __P((struct rbustag *,
d99 3
a101 3
			     bus_addr_t *addrp, bus_space_handle_t *bshp));
  int (*rbus_space_free) __P((struct rbustag *, bus_space_handle_t,
			      bus_size_t size, bus_addr_t *addrp));
d123 1
a123 1
int rbus_space_alloc __P((rbus_tag_t,
d126 1
a126 1
			  bus_addr_t *addrp, bus_space_handle_t *bshp));
d128 1
a128 1
int rbus_space_alloc_subregion __P((rbus_tag_t,
d133 1
a133 1
				    bus_addr_t *addrp, bus_space_handle_t *bshp));
d135 2
a136 2
int rbus_space_free __P((rbus_tag_t, bus_space_handle_t, bus_size_t size,
			 bus_addr_t *addrp));
d146 2
a147 2
rbus_tag_t rbus_new __P((rbus_tag_t parent, bus_addr_t start, bus_size_t size,
			 bus_addr_t offset, int flags));
d149 4
a152 4
rbus_tag_t rbus_new_root_delegate __P((bus_space_tag_t, bus_addr_t, bus_size_t,
				       bus_addr_t offset));
rbus_tag_t rbus_new_root_share __P((bus_space_tag_t, struct extent *,
				    bus_addr_t, bus_size_t,bus_addr_t offset));
d158 1
a158 1
int rbus_delete __P((rbus_tag_t));
@


1.1.12.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus.h,v 1.1 2000/04/08 05:50:53 aaron Exp $ */
d45 1
a45 1
 *  bridge, makes some child bus-space administrators and gives
d94 1
a94 1
  int (*rb_space_alloc)(struct rbustag *,
d99 3
a101 3
			     bus_addr_t *addrp, bus_space_handle_t *bshp);
  int (*rbus_space_free)(struct rbustag *, bus_space_handle_t,
			      bus_size_t size, bus_addr_t *addrp);
d123 1
a123 1
int rbus_space_alloc(rbus_tag_t,
d126 1
a126 1
			  bus_addr_t *addrp, bus_space_handle_t *bshp);
d128 1
a128 1
int rbus_space_alloc_subregion(rbus_tag_t,
d133 1
a133 1
				    bus_addr_t *addrp, bus_space_handle_t *bshp);
d135 2
a136 2
int rbus_space_free(rbus_tag_t, bus_space_handle_t, bus_size_t size,
			 bus_addr_t *addrp);
d146 2
a147 2
rbus_tag_t rbus_new(rbus_tag_t parent, bus_addr_t start, bus_size_t size,
			 bus_addr_t offset, int flags);
d149 4
a152 4
rbus_tag_t rbus_new_root_delegate(bus_space_tag_t, bus_addr_t, bus_size_t,
				       bus_addr_t offset);
rbus_tag_t rbus_new_root_share(bus_space_tag_t, struct extent *,
				    bus_addr_t, bus_size_t,bus_addr_t offset);
d158 1
a158 1
int rbus_delete(rbus_tag_t);
@


1.1.8.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus.h,v 1.1 2000/04/08 05:50:53 aaron Exp $ */
@


1.1.8.2
log
@cardbus too got skipped by cvs for some reason
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus.h,v 1.1.8.1 2001/05/14 22:23:14 niklas Exp $ */
d94 1
a94 1
  int (*rb_space_alloc)(struct rbustag *,
d99 3
a101 3
			     bus_addr_t *addrp, bus_space_handle_t *bshp);
  int (*rbus_space_free)(struct rbustag *, bus_space_handle_t,
			      bus_size_t size, bus_addr_t *addrp);
d123 1
a123 1
int rbus_space_alloc(rbus_tag_t,
d126 1
a126 1
			  bus_addr_t *addrp, bus_space_handle_t *bshp);
d128 1
a128 1
int rbus_space_alloc_subregion(rbus_tag_t,
d133 1
a133 1
				    bus_addr_t *addrp, bus_space_handle_t *bshp);
d135 2
a136 2
int rbus_space_free(rbus_tag_t, bus_space_handle_t, bus_size_t size,
			 bus_addr_t *addrp);
d146 2
a147 2
rbus_tag_t rbus_new(rbus_tag_t parent, bus_addr_t start, bus_size_t size,
			 bus_addr_t offset, int flags);
d149 4
a152 4
rbus_tag_t rbus_new_root_delegate(bus_space_tag_t, bus_addr_t, bus_size_t,
				       bus_addr_t offset);
rbus_tag_t rbus_new_root_share(bus_space_tag_t, struct extent *,
				    bus_addr_t, bus_size_t,bus_addr_t offset);
d158 1
a158 1
int rbus_delete(rbus_tag_t);
@


1.1.8.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d45 1
a45 1
 *  bridge, makes some child bus-space administrators and gives
@


