head	1.22;
access;
symbols
	OPENBSD_6_2:1.22.0.10
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.22.0.8
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.4
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.21.0.4
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.20.0.4
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.4
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.17.0.6
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.16.0.2
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.15.0.10
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.8
	OPENBSD_5_0:1.15.0.6
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.4
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.4
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.11.0.4
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.10.0.2
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.8.0.2
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.22
date	2015.11.11.02.29.14;	author jsg;	state Exp;
branches;
next	1.21;
commitid	PNE0ElfVE4tdMS6F;

1.21
date	2015.03.14.03.38.47;	author jsg;	state Exp;
branches;
next	1.20;
commitid	p4LJxGKbi0BU2cG6;

1.20
date	2014.09.14.14.17.24;	author jsg;	state Exp;
branches;
next	1.19;
commitid	uzzBR7hz9ncd4O6G;

1.19
date	2014.05.17.12.54.57;	author stsp;	state Exp;
branches;
next	1.18;

1.18
date	2014.05.16.18.17.03;	author mpi;	state Exp;
branches;
next	1.17;

1.17
date	2013.04.15.09.23.00;	author mglocker;	state Exp;
branches;
next	1.16;

1.16
date	2012.10.08.21.47.50;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2010.03.27.21.40.13;	author jsg;	state Exp;
branches;
next	1.14;

1.14
date	2010.03.27.20.04.03;	author jsg;	state Exp;
branches;
next	1.13;

1.13
date	2010.03.22.22.28.27;	author jsg;	state Exp;
branches;
next	1.12;

1.12
date	2009.06.02.12.32.08;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.26.05.42.14;	author ray;	state Exp;
branches;
next	1.10;

1.10
date	2008.02.25.23.10.16;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2007.05.20.00.52.26;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2006.10.12.16.35.52;	author grange;	state Exp;
branches;
next	1.7;

1.7
date	2006.07.12.06.26.34;	author jolan;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.21.11.27.03;	author fkr;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.30.04.11.40;	author dlg;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.30.03.56.28;	author dlg;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.11.08.09.32;	author dlg;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.29.01.52.26;	author dlg;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.07.05.42.41;	author dlg;	state Exp;
branches;
next	;


desc
@@


1.22
log
@mark ehci_intr() as IPL_MPSAFE here as well
ok mpi@@
@
text
@/*	$OpenBSD: ehci_cardbus.c,v 1.21 2015/03/14 03:38:47 jsg Exp $ */
/*	$NetBSD: ehci_cardbus.c,v 1.6.6.3 2004/09/21 13:27:25 skrll Exp $	*/

/*
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net) at
 * Carlstedt Research & Technology.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/rwlock.h>
#include <sys/device.h>

#include <machine/bus.h>

#include <dev/cardbus/cardbusvar.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdivar.h>
#include <dev/usb/usb_mem.h>

#include <dev/usb/ehcireg.h>
#include <dev/usb/ehcivar.h>

int	ehci_cardbus_match(struct device *, void *, void *);
void	ehci_cardbus_attach(struct device *, struct device *, void *);
int	ehci_cardbus_detach(struct device *, int);

struct ehci_cardbus_softc {
	struct ehci_softc	sc;
	cardbus_chipset_tag_t	sc_cc;
	cardbus_function_tag_t	sc_cf;
	cardbus_devfunc_t	sc_ct;
	void 			*sc_ih;		/* interrupt vectoring */
};

struct cfattach ehci_cardbus_ca = {
	sizeof(struct ehci_cardbus_softc), ehci_cardbus_match,
	ehci_cardbus_attach, ehci_cardbus_detach, ehci_activate
};

#define CARDBUS_CBMEM PCI_CBMEM
#define cardbus_findvendor pci_findvendor

int
ehci_cardbus_match(struct device *parent, void *match, void *aux)
{
	struct cardbus_attach_args *ca = (struct cardbus_attach_args *)aux;

	if (PCI_CLASS(ca->ca_class) == PCI_CLASS_SERIALBUS &&
	    PCI_SUBCLASS(ca->ca_class) == PCI_SUBCLASS_SERIALBUS_USB &&
	    PCI_INTERFACE(ca->ca_class) == PCI_INTERFACE_EHCI)
		return (1);
 
	return (0);
}

void
ehci_cardbus_attach(struct device *parent, struct device *self, void *aux)
{
	struct ehci_cardbus_softc *sc = (struct ehci_cardbus_softc *)self;
	struct cardbus_attach_args *ca = aux;
	cardbus_devfunc_t ct = ca->ca_ct;
	cardbus_chipset_tag_t cc = ct->ct_cc;
	pci_chipset_tag_t pc = ca->ca_pc;
	cardbus_function_tag_t cf = ct->ct_cf;
	pcireg_t csr;
	usbd_status r;
	const char *vendor;
	const char *devname = sc->sc.sc_bus.bdev.dv_xname;

	/* Map I/O registers */
	if (Cardbus_mapreg_map(ct, CARDBUS_CBMEM, PCI_MAPREG_TYPE_MEM, 0,
			   &sc->sc.iot, &sc->sc.ioh, NULL, &sc->sc.sc_size)) {
		printf(": can't map mem space\n");
		return;
	}

	sc->sc_cc = cc;
	sc->sc_cf = cf;
	sc->sc_ct = ct;
	sc->sc.sc_bus.dmatag = ca->ca_dmat;

	(ct->ct_cf->cardbus_ctrl)(cc, CARDBUS_MEM_ENABLE);
	(ct->ct_cf->cardbus_ctrl)(cc, CARDBUS_BM_ENABLE);

	/* Enable the device. */
	csr = pci_conf_read(pc, ca->ca_tag,
				PCI_COMMAND_STATUS_REG);
	pci_conf_write(pc, ca->ca_tag, PCI_COMMAND_STATUS_REG,
		       csr | PCI_COMMAND_MASTER_ENABLE
			   | PCI_COMMAND_MEM_ENABLE);

	/* Disable interrupts, so we don't get any spurious ones. */
	sc->sc.sc_offs = EREAD1(&sc->sc, EHCI_CAPLENGTH);
	EOWRITE2(&sc->sc, EHCI_USBINTR, 0);

	sc->sc_ih = cardbus_intr_establish(cc, cf, ca->ca_intrline,
	    IPL_USB | IPL_MPSAFE, ehci_intr, sc, devname);
	if (sc->sc_ih == NULL) {
		printf(": unable to establish interrupt\n");
		return;
	}
	printf(": irq %d\n", ca->ca_intrline);

	/* Figure out vendor for root hub descriptor. */
	vendor = cardbus_findvendor(ca->ca_id);
	sc->sc.sc_id_vendor = PCI_VENDOR(ca->ca_id);
	if (vendor)
		strlcpy(sc->sc.sc_vendor, vendor, sizeof(sc->sc.sc_vendor));
	else
		snprintf(sc->sc.sc_vendor, sizeof(sc->sc.sc_vendor),
		    "vendor 0x%04x", PCI_VENDOR(ca->ca_id));
	
	r = ehci_init(&sc->sc);
	if (r != USBD_NORMAL_COMPLETION) {
		printf("%s: init failed, error=%d\n", devname, r);

		/* Avoid spurious interrupts. */
		cardbus_intr_disestablish(sc->sc_cc, sc->sc_cf, sc->sc_ih);
		sc->sc_ih = NULL;

		return;
	}

	/* Attach usb device. */
	config_found(self, &sc->sc.sc_bus, usbctlprint);
}

int
ehci_cardbus_detach(struct device *self, int flags)
{
	struct ehci_cardbus_softc *sc = (struct ehci_cardbus_softc *)self;
	struct cardbus_devfunc *ct = sc->sc_ct;
	int rv;

	rv = ehci_detach(self, flags);
	if (rv)
		return (rv);
	if (sc->sc_ih != NULL) {
		cardbus_intr_disestablish(sc->sc_cc, sc->sc_cf, sc->sc_ih);
		sc->sc_ih = NULL;
	}
	if (sc->sc.sc_size) {
		Cardbus_mapreg_unmap(ct, CARDBUS_CBMEM, sc->sc.iot,
		    sc->sc.ioh, sc->sc.sc_size);
		sc->sc.sc_size = 0;
	}
	return (0);
}
@


1.21
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.20 2014/09/14 14:17:24 jsg Exp $ */
d126 1
a126 1
					   IPL_USB, ehci_intr, sc, devname);
@


1.20
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.19 2014/05/17 12:54:57 stsp Exp $ */
a42 1
#include <dev/pci/pcidevs.h>
@


1.19
log
@Fix kernel build with EHCI_DEBUG by removing a non-compiling DPRINTF().
Since no DPRINTF() call remains also remove its definition (requested by mpi@@).
ok mpi, and also reported by Jean-Philippe Ouellet
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.18 2014/05/16 18:17:03 mpi Exp $ */
a38 1
#include <sys/proc.h>
@


1.18
log
@There is no need to remember which usb(4) device is the child of an USB
host controller because autoconf(9) already does it.
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.17 2013/04/15 09:23:00 mglocker Exp $ */
a53 8
#ifdef EHCI_DEBUG
#define DPRINTF(x)	if (ehcidebug) printf x
extern int ehcidebug;
#else
#define DPRINTF(x)
#endif


a124 1
	DPRINTF((": offs=%d", devname, sc->sc.sc_offs));
@


1.17
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.16 2012/10/08 21:47:50 deraadt Exp $ */
d165 1
a165 2
	sc->sc.sc_child = config_found((void *)sc, &sc->sc.sc_bus,
				       usbctlprint);
d175 1
a175 1
	rv = ehci_detach(&sc->sc, flags);
@


1.16
log
@Revamp the sequences for suspend/hibernate -> resume so that the code
paths are reflexive.  It is now possible to fail part-way through a
suspend sequence, and recover along the resume code path.
Split DVACT_SUSPEND by adding a new DVACT_POWERDOWN method is used
after hibernate (and suspend too) to finish the job.  Some drivers
must be converted at the same time to use this instead of shutdown hooks
(the others will follow at a later time)
ok kettenis mlarkin
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.15 2010/03/27 21:40:13 jsg Exp $ */
d67 1
a67 1
	ehci_softc_t		sc;
@


1.15
log
@Give cardbus the pci_chipset_tag_t from pccbb and push it out through
cardbus_attach_args so we can switch to using proper pci config
space functions instead of callback based wrappers.

ok oga@@ krw@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.14 2010/03/27 20:04:03 jsg Exp $ */
d76 1
a76 1
	    ehci_cardbus_attach, ehci_cardbus_detach, ehci_activate
a163 2
	sc->sc.sc_shutdownhook = shutdownhook_establish(ehci_shutdown, &sc->sc);

a189 1

@


1.14
log
@Bring back cardbus_chipset_tag_t which is in practice a
pointer to the pccbb softc, to distinguish it from a pci_chipset_tag_t
which can be passed to the normal pci functions.

Suggested by and ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.13 2010/03/22 22:28:27 jsg Exp $ */
d102 1
d125 1
a125 1
	csr = cardbus_conf_read(cc, cf, ca->ca_tag,
d127 1
a127 1
	cardbus_conf_write(cc, cf, ca->ca_tag, PCI_COMMAND_STATUS_REG,
@


1.13
log
@Remove some cardbus defines and types which are identical to
their pci counterparts, similar to recent changes in NetBSD.

ok oga@@ deraadt@@ jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.12 2009/06/02 12:32:08 deraadt Exp $ */
d68 1
a68 1
	pci_chipset_tag_t	sc_cc;
d101 1
a101 1
	pci_chipset_tag_t cc = ct->ct_cc;
@


1.12
log
@Fix some minor format string problems found in a maze of false positives
provided by Parfait
ok oga
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.11 2008/06/26 05:42:14 ray Exp $ */
d68 1
a68 1
	cardbus_chipset_tag_t	sc_cc;
a78 1
#define CARDBUS_INTERFACE_EHCI PCI_INTERFACE_EHCI
d87 3
a89 3
	if (CARDBUS_CLASS(ca->ca_class) == CARDBUS_CLASS_SERIALBUS &&
	    CARDBUS_SUBCLASS(ca->ca_class) == CARDBUS_SUBCLASS_SERIALBUS_USB &&
	    CARDBUS_INTERFACE(ca->ca_class) == CARDBUS_INTERFACE_EHCI)
d101 1
a101 1
	cardbus_chipset_tag_t cc = ct->ct_cc;
d103 1
a103 1
	cardbusreg_t csr;
d109 1
a109 1
	if (Cardbus_mapreg_map(ct, CARDBUS_CBMEM, CARDBUS_MAPREG_TYPE_MEM, 0,
d125 4
a128 4
				CARDBUS_COMMAND_STATUS_REG);
	cardbus_conf_write(cc, cf, ca->ca_tag, CARDBUS_COMMAND_STATUS_REG,
		       csr | CARDBUS_COMMAND_MASTER_ENABLE
			   | CARDBUS_COMMAND_MEM_ENABLE);
d145 1
a145 1
	sc->sc.sc_id_vendor = CARDBUS_VENDOR(ca->ca_id);
d150 1
a150 1
		    "vendor 0x%04x", CARDBUS_VENDOR(ca->ca_id));
@


1.11
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.10 2008/02/25 23:10:16 brad Exp $ */
d112 1
a112 1
		printf(": can't map mem space\n", devname);
@


1.10
log
@Following up with further dmesg display tweaking after the cardbusprint()
change.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.9 2007/05/20 00:52:26 jsg Exp $ */
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.9
log
@Convert ehci and ucom to rwlock.
Kill the usb specific lockmgr wrapper as nothing uses it now.

ok thib@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.8 2006/10/12 16:35:52 grange Exp $ */
a88 1
#define cardbus_devinfo pci_devinfo
a111 1
	char devinfo[256];
a115 3
	cardbus_devinfo(ca->ca_id, ca->ca_class, 0, devinfo, sizeof(devinfo));
	printf(" %s", devinfo);

d119 1
a119 1
		printf("%s: can't map mem space\n", devname);
@


1.8
log
@Add a symbolic name parameter to cardbus_intr_establish().
Count cardbus devices interrupts in cbb(4) using evcount(9).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.7 2006/07/12 06:26:34 jolan Exp $ */
d44 1
@


1.7
log
@make dmesg lines openbsd-style, ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.6 2006/06/21 11:27:03 fkr Exp $ */
d148 1
a148 1
					   IPL_USB, ehci_intr, sc);
@


1.6
log
@removal of '#ifdef rbus ... #else ...' directives, we use rbus in all
cases anyways, so we might as well remove code (the !rbus case) thats been
dead throughout the last years and just use the rbus code without ifdefs.

brad, miod "I am all for this diff"
ok deraadt, mickey
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.5 2005/12/30 04:11:40 dlg Exp $ */
d118 1
a118 2
	printf(": %s (rev. 0x%02x)\n", devinfo,
	       CARDBUS_REVISION(ca->ca_class));
d144 1
a144 1
	DPRINTF(("%s: offs=%d\n", devname, sc->sc.sc_offs));
d150 1
a150 1
		printf("%s: couldn't establish interrupt\n", devname);
d153 1
a153 1
	printf("%s: interrupting at %d\n", devname, ca->ca_intrline);
@


1.5
log
@remove the tailq used to locate ehci's companion controllers. i have
absolutely no idea how this compiled since the usb_cardbus struct (which is
what the list was made of) was defined in usb_cardbus.h. usb_cardbus.h was
removed from the tree over 8 months ago. gcc must be crap.
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.4 2005/12/30 03:56:28 dlg Exp $ */
a132 4
#if rbus
#else
XXX	(ct->ct_cf->cardbus_mem_open)(cc, 0, iob, iob + 0x40);
#endif
@


1.4
log
@while looking for device_ptr_t typedef cruft i noticed #if __NetBSD__. why
did i put that in? this cleans up the if __NetBSD__ goo
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.3 2005/04/11 08:09:32 dlg Exp $ */
a88 3

static TAILQ_HEAD(, usb_cardbus) ehci_cardbus_alldevs =
	TAILQ_HEAD_INITIALIZER(ehci_cardbus_alldevs);
@


1.3
log
@get rid of the lines on ehci attach that show the version and the companion
controllers. remove the insane amount of support code needed just for the
printing of the companion controllers while here.

zap it deraadt@@ sure pascoe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.2 2004/12/29 01:52:26 dlg Exp $ */
a40 5
#ifdef __NetBSD__
#include <sys/cdefs.h>
__KERNEL_RCSID(0, "$NetBSD: ehci_cardbus.c,v 1.6.6.3 2004/09/21 13:27:25 skrll Exp $");
#endif

a48 6
#ifdef __NetBSD__
#if defined pciinc
#include <dev/pci/pcidevs.h>
#endif
#endif /* __NetBSD__ */

a67 3
#ifdef __NetBSD__
int	ehci_cardbus_match(struct device *, struct cfdata *, void *);
#else
a68 1
#endif
a69 3
#ifdef __NetBSD__
int	ehci_cardbus_detach(device_ptr_t, int);
#else
a70 1
#endif
a79 4
#ifdef __NetBSD__
CFATTACH_DECL(ehci_cardbus, sizeof(struct ehci_cardbus_softc),
    ehci_cardbus_match, ehci_cardbus_attach, ehci_cardbus_detach, ehci_activate);
#else
a83 1
#endif
a93 3
#ifdef __NetBSD__
ehci_cardbus_match(struct device *parent, struct cfdata *match, void *aux)
#else
a94 1
#endif
a190 3
#ifdef __NetBSD__
ehci_cardbus_detach(device_ptr_t self, int flags)
#else
a191 1
#endif
@


1.2
log
@from freebsd: ehci.c 1.13, ehci_pci.c 1.13, ehcireg.h 1.5, ehcivar.h 1.3
log message:
Attempt to follow the correct procedure for synchronising with the
system BIOS to disable legacy device emulation as per the "EHCI
Extended Capability: Pre-OS to OS Handoff Synchronisation" section
of the EHCI spec. BIOSes that implement legacy emulation using SMIs
are supposed to disable the emulation when this procedure is performed.

tested on various archs by jsg@@ and me
ok pascoe@@, looks sane jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehci_cardbus.c,v 1.1 2004/12/07 05:42:41 dlg Exp $ */
a62 2
#include <dev/cardbus/usb_cardbus.h>

a145 1
	u_int ncomp;
a146 1
	struct usb_cardbus *up;
a199 16
	/*
	 * Find companion controllers.  According to the spec they always
	 * have lower function numbers so they should be enumerated already.
	 */
	ncomp = 0;
	TAILQ_FOREACH(up, &ehci_cardbus_alldevs, next) {
		if (up->bus == ca->ca_bus && up->device == ca->ca_device) {
			DPRINTF(("ehci_cardbus_attach: companion %s\n",
				 USBDEVNAME(up->usb->bdev)));
			sc->sc.sc_comps[ncomp++] = up->usb;
			if (ncomp >= EHCI_COMPANION_MAX)
				break;
		}
	}
	sc->sc.sc_ncomp = ncomp;

a243 15
void
usb_cardbus_add(struct usb_cardbus *up, struct cardbus_attach_args *ca, struct usbd_bus *bu)
{
	TAILQ_INSERT_TAIL(&ehci_cardbus_alldevs, up, next);
	up->bus = ca->ca_bus;
	up->device = ca->ca_device;
	up->function = ca->ca_function;
	up->usb = bu;
}

void
usb_cardbus_rem(struct usb_cardbus *up)
{
	TAILQ_REMOVE(&ehci_cardbus_alldevs, up, next);
}
@


1.1
log
@ohci and ehci at cardbus support from netbsd

this relies on a fix to kthreads that is not yet committed, so it wont
be enabled for now.

my boss said it was ok to commit this while im at work. ok deraadt@@ drahn@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d230 2
@

