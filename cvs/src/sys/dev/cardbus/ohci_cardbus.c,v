head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.8
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.10
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.6
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.4
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.20.0.4
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.4
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.18.0.6
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.2
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.17.0.10
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.8
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.6
	OPENBSD_5_0:1.17.0.4
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.2
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.4
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.11.0.4
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.10.0.2
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.8.0.2
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.21
date	2015.03.14.03.38.47;	author jsg;	state Exp;
branches;
next	1.20;
commitid	p4LJxGKbi0BU2cG6;

1.20
date	2014.09.14.14.17.24;	author jsg;	state Exp;
branches;
next	1.19;
commitid	uzzBR7hz9ncd4O6G;

1.19
date	2014.05.16.18.17.03;	author mpi;	state Exp;
branches;
next	1.18;

1.18
date	2013.04.15.09.23.00;	author mglocker;	state Exp;
branches;
next	1.17;

1.17
date	2010.09.07.16.21.41;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2010.08.30.21.30.14;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2010.03.27.21.40.13;	author jsg;	state Exp;
branches;
next	1.14;

1.14
date	2010.03.27.20.04.03;	author jsg;	state Exp;
branches;
next	1.13;

1.13
date	2010.03.22.22.28.27;	author jsg;	state Exp;
branches;
next	1.12;

1.12
date	2009.06.02.12.32.08;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.26.05.42.14;	author ray;	state Exp;
branches;
next	1.10;

1.10
date	2008.02.25.23.10.16;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2007.03.22.05.53.36;	author pascoe;	state Exp;
branches;
next	1.8;

1.8
date	2006.10.12.16.35.52;	author grange;	state Exp;
branches;
next	1.7;

1.7
date	2006.07.12.06.26.34;	author jolan;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.21.11.27.03;	author fkr;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.22.15.58.00;	author dlg;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.30.04.01.18;	author dlg;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.11.08.09.32;	author dlg;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.30.14.02.02;	author dlg;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.07.05.42.41;	author dlg;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: ohci_cardbus.c,v 1.20 2014/09/14 14:17:24 jsg Exp $ */
/*	$NetBSD: ohci_cardbus.c,v 1.19 2004/08/02 19:14:28 mycroft Exp $	*/

/*
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net) at
 * Carlstedt Research & Technology.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * USB Open Host Controller driver.
 *
 * OHCI spec: http://www.intel.com/design/usb/ohci11d.pdf
 * USB spec: http://www.teleport.com/cgi-bin/mailmerge.cgi/~usb/cgiform.tpl
 */


#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>

#include <machine/bus.h>

#include <dev/cardbus/cardbusvar.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdivar.h>
#include <dev/usb/usb_mem.h>

#include <dev/usb/ohcireg.h>
#include <dev/usb/ohcivar.h>

int	ohci_cardbus_match(struct device *, void *, void *);
void	ohci_cardbus_attach(struct device *, struct device *, void *);
int	ohci_cardbus_detach(struct device *, int);

struct ohci_cardbus_softc {
	struct ohci_softc	sc;
	cardbus_chipset_tag_t	sc_cc;
	cardbus_function_tag_t	sc_cf;
	cardbus_devfunc_t	sc_ct;
	void 			*sc_ih;		/* interrupt vectoring */
};

struct cfattach ohci_cardbus_ca = {
	sizeof(struct ohci_cardbus_softc), ohci_cardbus_match,
	    ohci_cardbus_attach, ohci_cardbus_detach, ohci_activate
};

#define CARDBUS_CBMEM PCI_CBMEM
#define cardbus_findvendor pci_findvendor

int
ohci_cardbus_match(struct device *parent, void *match, void *aux)
{
	struct cardbus_attach_args *ca = (struct cardbus_attach_args *)aux;

	if (PCI_CLASS(ca->ca_class) == PCI_CLASS_SERIALBUS &&
	    PCI_SUBCLASS(ca->ca_class) == PCI_SUBCLASS_SERIALBUS_USB &&
	    PCI_INTERFACE(ca->ca_class) == PCI_INTERFACE_OHCI)
		return (1);
 
	return (0);
}

void
ohci_cardbus_attach(struct device *parent, struct device *self, void *aux)
{
	struct ohci_cardbus_softc *sc = (struct ohci_cardbus_softc *)self;
	struct cardbus_attach_args *ca = aux;
	cardbus_devfunc_t ct = ca->ca_ct;
	cardbus_chipset_tag_t cc = ct->ct_cc;
	pci_chipset_tag_t pc = ca->ca_pc;
	cardbus_function_tag_t cf = ct->ct_cf;
	pcireg_t csr;
	usbd_status r;
	const char *vendor;
	const char *devname = sc->sc.sc_bus.bdev.dv_xname;

	/* Map I/O registers */
	if (Cardbus_mapreg_map(ct, CARDBUS_CBMEM, PCI_MAPREG_TYPE_MEM, 0,
			   &sc->sc.iot, &sc->sc.ioh, NULL, &sc->sc.sc_size)) {
		printf(": can't map mem space\n");
		return;
	}

	/* Disable interrupts, so we don't get any spurious ones. */
	bus_space_write_4(sc->sc.iot, sc->sc.ioh, OHCI_INTERRUPT_DISABLE,
			  OHCI_MIE);

	sc->sc_cc = cc;
	sc->sc_cf = cf;
	sc->sc_ct = ct;
	sc->sc.sc_bus.dmatag = ca->ca_dmat;

	(ct->ct_cf->cardbus_ctrl)(cc, CARDBUS_MEM_ENABLE);
	(ct->ct_cf->cardbus_ctrl)(cc, CARDBUS_BM_ENABLE);

	/* Enable the device. */
	csr = pci_conf_read(pc, ca->ca_tag,
				PCI_COMMAND_STATUS_REG);
	pci_conf_write(pc, ca->ca_tag, PCI_COMMAND_STATUS_REG,
		       csr | PCI_COMMAND_MASTER_ENABLE
			   | PCI_COMMAND_MEM_ENABLE);

	sc->sc_ih = cardbus_intr_establish(cc, cf, ca->ca_intrline,
					   IPL_USB, ohci_intr, sc, devname);
	if (sc->sc_ih == NULL) {
		printf(": couldn't establish interrupt\n");
		return;
	}
	printf(": irq %d", ca->ca_intrline);

	/* Figure out vendor for root hub descriptor. */
	vendor = cardbus_findvendor(ca->ca_id);
	sc->sc.sc_id_vendor = PCI_VENDOR(ca->ca_id);
	if (vendor)
		strlcpy(sc->sc.sc_vendor, vendor, sizeof(sc->sc.sc_vendor));
	else
		snprintf(sc->sc.sc_vendor, sizeof(sc->sc.sc_vendor),
		    "vendor 0x%04x", PCI_VENDOR(ca->ca_id));

	/* Display revision and perform legacy emulation handover. */
	if (ohci_checkrev(&sc->sc) != USBD_NORMAL_COMPLETION ||
	    ohci_handover(&sc->sc) != USBD_NORMAL_COMPLETION) {
		cardbus_intr_disestablish(sc->sc_cc, sc->sc_cf, sc->sc_ih);
		sc->sc_ih = 0;
		return;
	}

	r = ohci_init(&sc->sc);
	if (r != USBD_NORMAL_COMPLETION) {
		printf("%s: init failed, error=%d\n", devname, r);

		/* Avoid spurious interrupts. */
		cardbus_intr_disestablish(sc->sc_cc, sc->sc_cf, sc->sc_ih);
		sc->sc_ih = 0;

		return;
	}

	/* Attach usb device. */
	config_found(self, &sc->sc.sc_bus, usbctlprint);
}

int
ohci_cardbus_detach(struct device *self, int flags)
{
	struct ohci_cardbus_softc *sc = (struct ohci_cardbus_softc *)self;
	struct cardbus_devfunc *ct = sc->sc_ct;
	int rv;

	rv = ohci_detach(self, flags);
	if (rv)
		return (rv);

	if (sc->sc_ih != NULL) {
		cardbus_intr_disestablish(sc->sc_cc, sc->sc_cf, sc->sc_ih);
		sc->sc_ih = NULL;
	}
	if (sc->sc.sc_size) {
		Cardbus_mapreg_unmap(ct, CARDBUS_CBMEM, sc->sc.iot,
		    sc->sc.ioh, sc->sc.sc_size);
		sc->sc.sc_size = 0;
	}

	return (0);
}
@


1.20
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ohci_cardbus.c,v 1.19 2014/05/16 18:17:03 mpi Exp $ */
a49 1
#include <dev/pci/pcidevs.h>
@


1.19
log
@There is no need to remember which usb(4) device is the child of an USB
host controller because autoconf(9) already does it.
@
text
@d1 1
a1 1
/*	$OpenBSD: ohci_cardbus.c,v 1.18 2013/04/15 09:23:00 mglocker Exp $ */
a45 1
#include <sys/proc.h>
@


1.18
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ohci_cardbus.c,v 1.17 2010/09/07 16:21:41 deraadt Exp $ */
d171 1
a171 2
	sc->sc.sc_child = config_found((void *)sc, &sc->sc.sc_bus,
				       usbctlprint);
d181 1
a181 1
	rv = ohci_detach(&sc->sc, flags);
@


1.17
log
@remove the powerhook code.  All architectures now use the ca_activate tree
traversal code to suspend/resume
ok oga kettenis blambert
@
text
@d1 1
a1 1
/*	$OpenBSD: ohci_cardbus.c,v 1.16 2010/08/30 21:30:14 deraadt Exp $ */
d66 1
a66 1
	ohci_softc_t		sc;
@


1.16
log
@Change powerhooks into activate functions, and provide stub powerhook
functions
ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: ohci_cardbus.c,v 1.15 2010/03/27 21:40:13 jsg Exp $ */
a169 2
	sc->sc.sc_powerhook = powerhook_establish(ohci_powerhook, &sc->sc);

a184 3

	if (sc->sc.sc_powerhook != NULL)
		powerhook_disestablish(sc->sc.sc_powerhook);
@


1.15
log
@Give cardbus the pci_chipset_tag_t from pccbb and push it out through
cardbus_attach_args so we can switch to using proper pci config
space functions instead of callback based wrappers.

ok oga@@ krw@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ohci_cardbus.c,v 1.14 2010/03/27 20:04:03 jsg Exp $ */
d170 1
a170 1
	sc->sc.sc_powerhook = powerhook_establish(ohci_power, &sc->sc);
@


1.14
log
@Bring back cardbus_chipset_tag_t which is in practice a
pointer to the pccbb softc, to distinguish it from a pci_chipset_tag_t
which can be passed to the normal pci functions.

Suggested by and ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ohci_cardbus.c,v 1.13 2010/03/22 22:28:27 jsg Exp $ */
d101 1
d128 1
a128 1
	csr = cardbus_conf_read(cc, cf, ca->ca_tag,
d130 1
a130 1
	cardbus_conf_write(cc, cf, ca->ca_tag, PCI_COMMAND_STATUS_REG,
@


1.13
log
@Remove some cardbus defines and types which are identical to
their pci counterparts, similar to recent changes in NetBSD.

ok oga@@ deraadt@@ jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ohci_cardbus.c,v 1.12 2009/06/02 12:32:08 deraadt Exp $ */
d67 1
a67 1
	pci_chipset_tag_t	sc_cc;
d100 1
a100 1
	pci_chipset_tag_t cc = ct->ct_cc;
@


1.12
log
@Fix some minor format string problems found in a maze of false positives
provided by Parfait
ok oga
@
text
@d1 1
a1 1
/*	$OpenBSD: ohci_cardbus.c,v 1.11 2008/06/26 05:42:14 ray Exp $ */
d67 1
a67 1
	cardbus_chipset_tag_t	sc_cc;
a77 1
#define CARDBUS_INTERFACE_OHCI PCI_INTERFACE_OHCI
d86 3
a88 3
	if (CARDBUS_CLASS(ca->ca_class) == CARDBUS_CLASS_SERIALBUS &&
	    CARDBUS_SUBCLASS(ca->ca_class) == CARDBUS_SUBCLASS_SERIALBUS_USB &&
	    CARDBUS_INTERFACE(ca->ca_class) == CARDBUS_INTERFACE_OHCI)
d100 1
a100 1
	cardbus_chipset_tag_t cc = ct->ct_cc;
d102 1
a102 1
	cardbusreg_t csr;
d108 1
a108 1
	if (Cardbus_mapreg_map(ct, CARDBUS_CBMEM, CARDBUS_MAPREG_TYPE_MEM, 0,
d128 4
a131 4
				CARDBUS_COMMAND_STATUS_REG);
	cardbus_conf_write(cc, cf, ca->ca_tag, CARDBUS_COMMAND_STATUS_REG,
		       csr | CARDBUS_COMMAND_MASTER_ENABLE
			   | CARDBUS_COMMAND_MEM_ENABLE);
d143 1
a143 1
	sc->sc.sc_id_vendor = CARDBUS_VENDOR(ca->ca_id);
d148 1
a148 1
		    "vendor 0x%04x", CARDBUS_VENDOR(ca->ca_id));
@


1.11
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ohci_cardbus.c,v 1.10 2008/02/25 23:10:16 brad Exp $ */
d111 1
a111 1
		printf(": can't map mem space\n", devname);
d137 1
a137 1
		printf(": couldn't establish interrupt\n", devname);
@


1.10
log
@Following up with further dmesg display tweaking after the cardbusprint()
change.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ohci_cardbus.c,v 1.9 2007/03/22 05:53:36 pascoe Exp $ */
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.9
log
@Perform legacy emulation handover for USB1 companion controllers immediately
but defer the remainder of their initialisation until after the other devices
on their PCI bus have attached.  This ensures that any USB2 controller has also
completed its initialisation before we start to initialise the USB1 parts.

This minimises the chance that a nasty SMM implementation will trash the USB1
controller's config when it performs legacy emulation handover of the USB2 part.

This time without accidentally leaving the OHCI controller shutdown, and with
some cosmetic fixes.

ok dlg@@, OHCI tests mglocker@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ohci_cardbus.c,v 1.7 2006/07/12 06:26:34 jolan Exp $ */
a87 1
#define cardbus_devinfo pci_devinfo
a110 1
	char devinfo[256];
a114 3
	cardbus_devinfo(ca->ca_id, ca->ca_class, 0, devinfo, sizeof(devinfo));
	printf(" %s", devinfo);

d118 1
a118 1
		printf("%s: can't map mem space\n", devname);
d144 1
a144 1
		printf("%s: couldn't establish interrupt\n", devname);
@


1.8
log
@Add a symbolic name parameter to cardbus_intr_establish().
Count cardbus devices interrupts in cbb(4) using evcount(9).

ok deraadt@@
@
text
@d162 9
a170 1
	
@


1.7
log
@make dmesg lines openbsd-style, ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ohci_cardbus.c,v 1.6 2006/06/21 11:27:03 fkr Exp $ */
d147 1
a147 1
					   IPL_USB, ohci_intr, sc);
@


1.6
log
@removal of '#ifdef rbus ... #else ...' directives, we use rbus in all
cases anyways, so we might as well remove code (the !rbus case) thats been
dead throughout the last years and just use the rbus code without ifdefs.

brad, miod "I am all for this diff"
ok deraadt, mickey
@
text
@d1 1
a1 1
/*	$OpenBSD: ohci_cardbus.c,v 1.5 2006/05/22 15:58:00 dlg Exp $ */
d112 1
d116 3
@


1.5
log
@Don't call powerhook_disestablish if there is no powerhook to disestablish.
This is possible if ohci_init fails in attach. Similar to krw@@'s fix in
ohci.c 1.67 for PR #5128.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ohci_cardbus.c,v 1.4 2005/12/30 04:01:18 dlg Exp $ */
a131 4
#if rbus
#else
XXX	(ct->ct_cf->cardbus_mem_open)(cc, 0, iob, iob + 0x40);
#endif
@


1.4
log
@remove #if __NetBSD__ and device_ptr_t. its more readable and less
confusing now.
@
text
@d1 1
a1 1
/*	$OpenBSD: ohci_cardbus.c,v 1.3 2005/04/11 08:09:32 dlg Exp $ */
d191 3
a193 1
	powerhook_disestablish(sc->sc.sc_powerhook);
@


1.3
log
@get rid of the lines on ehci attach that show the version and the companion
controllers. remove the insane amount of support code needed just for the
printing of the companion controllers while here.

zap it deraadt@@ sure pascoe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ohci_cardbus.c,v 1.2 2005/03/30 14:02:02 dlg Exp $ */
a47 4
#include <sys/cdefs.h>
#ifdef __NetBSD__
__KERNEL_RCSID(0, "$NetBSD: ohci_cardbus.c,v 1.19 2004/08/02 19:14:28 mycroft Exp $");
#endif
a67 3
#ifdef __NetBSD__
int	ohci_cardbus_match(struct device *, struct cfdata *, void *);
#else
a68 1
#endif
a69 3
#ifdef __NetBSD__
int	ohci_cardbus_detach(device_ptr_t, int);
#else
a70 1
#endif
a79 4
#ifdef __NetBSD__
CFATTACH_DECL(ohci_cardbus, sizeof(struct ohci_cardbus_softc),
    ohci_cardbus_match, ohci_cardbus_attach, ohci_cardbus_detach, ohci_activate);
#else
a83 1
#endif
a90 3
#ifdef __NetBSD__
ohci_cardbus_match(struct device *parent, struct cfdata *match, void *aux)
#else
a91 1
#endif
a115 7
#if defined(__NetBSD__)
	char devinfo[256];
	cardbus_devinfo(ca->ca_id, ca->ca_class, 0, devinfo, sizeof(devinfo));
	printf(": %s (rev. 0x%02x)\n", devinfo,
	    CARDBUS_REVISION(ca->ca_class));
#endif

a181 3
#ifdef __NetBSD__
ohci_cardbus_detach(device_ptr_t self, int flags)
#else
a182 1
#endif
@


1.2
log
@make the powerhooks the responsibility of the bus ohci is attached to

ok uwe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ohci_cardbus.c,v 1.1 2004/12/07 05:42:41 dlg Exp $ */
a52 2
#include "ehci_cardbus.h"

a63 4
#if NEHCI_CARDBUS > 0
#include <dev/cardbus/usb_cardbus.h>
#endif

a85 3
#if NEHCI_CARDBUS > 0
	struct usb_cardbus	sc_cardbus;
#endif
a203 4
#if NEHCI_CARDBUS > 0
	usb_cardbus_add(&sc->sc_cardbus, ca, &sc->sc.sc_bus);
#endif

d234 1
a234 3
#if NEHCI_CARDBUS > 0
	usb_cardbus_rem(&sc->sc_cardbus);
#endif
@


1.1
log
@ohci and ehci at cardbus support from netbsd

this relies on a fix to kthreads that is not yet committed, so it wont
be enabled for now.

my boss said it was ok to commit this while im at work. ok deraadt@@ drahn@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d211 2
d236 2
@

