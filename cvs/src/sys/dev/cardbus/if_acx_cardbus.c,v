head	1.22;
access;
symbols
	OPENBSD_6_0:1.22.0.4
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.21.0.4
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.20.0.4
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.18
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.16
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.12
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.10
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.8
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.6
	OPENBSD_5_0:1.19.0.4
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.2
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.18.0.2
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.4
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.11.0.8
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.6
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.4
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.2
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9;
locks; strict;
comment	@ * @;


1.22
date	2015.11.24.17.11.39;	author mpi;	state Exp;
branches;
next	1.21;
commitid	5gdEnqVoJuTuwdTu;

1.21
date	2015.03.14.03.38.47;	author jsg;	state Exp;
branches;
next	1.20;
commitid	p4LJxGKbi0BU2cG6;

1.20
date	2014.12.22.02.28.51;	author tedu;	state Exp;
branches;
next	1.19;
commitid	yM2VFFhpDTeFQlve;

1.19
date	2010.09.06.19.20.21;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2010.03.27.21.40.13;	author jsg;	state Exp;
branches;
next	1.17;

1.17
date	2010.03.27.20.04.03;	author jsg;	state Exp;
branches;
next	1.16;

1.16
date	2010.03.22.22.28.27;	author jsg;	state Exp;
branches;
next	1.15;

1.15
date	2009.07.30.21.33.23;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.29.21.53.52;	author sthen;	state Exp;
branches;
next	1.13;

1.13
date	2009.03.11.23.51.15;	author stsp;	state Exp;
branches;
next	1.12;

1.12
date	2009.02.26.23.03.05;	author stsp;	state Exp;
branches;
next	1.11;

1.11
date	2006.11.10.20.20.04;	author damien;	state Exp;
branches;
next	1.10;

1.10
date	2006.10.12.16.35.52;	author grange;	state Exp;
branches;
next	1.9;

1.9
date	2006.08.19.23.17.12;	author mglocker;	state Exp;
branches;
next	1.8;

1.8
date	2006.08.09.09.40.08;	author mglocker;	state Exp;
branches;
next	1.7;

1.7
date	2006.08.08.16.07.10;	author mglocker;	state Exp;
branches;
next	1.6;

1.6
date	2006.08.08.05.18.53;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2006.08.03.22.48.36;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2006.08.03.20.24.51;	author mglocker;	state Exp;
branches;
next	1.3;

1.3
date	2006.08.03.10.47.42;	author mglocker;	state Exp;
branches;
next	1.2;

1.2
date	2006.08.03.10.12.37;	author mglocker;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.03.08.45.01;	author mglocker;	state Exp;
branches;
next	;


desc
@@


1.22
log
@You only need <net/if_dl.h> if you're using LLADDR() or a sockaddr_dl.
@
text
@/*	$OpenBSD: if_acx_cardbus.c,v 1.21 2015/03/14 03:38:47 jsg Exp $  */

/*
 * Copyright (c) 2006 Claudio Jeker <claudio@@openbsd.org>
 * Copyright (c) 2005, 2006
 *	Damien Bergamini <damien.bergamini@@free.fr>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * CardBus front-end for the Texas Instruments ACX driver
 */

#include "bpfilter.h"

#include <sys/param.h>
#include <sys/sockio.h>
#include <sys/mbuf.h>
#include <sys/kernel.h>
#include <sys/socket.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/timeout.h>
#include <sys/device.h>

#include <machine/bus.h>
#include <machine/intr.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <net80211/ieee80211_var.h>
#include <net80211/ieee80211_amrr.h>
#include <net80211/ieee80211_radiotap.h>

#include <dev/ic/acxvar.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#include <dev/cardbus/cardbusvar.h>

struct acx_cardbus_softc {
	struct acx_softc	sc_acx;

	/* cardbus specific goo */
	cardbus_devfunc_t	sc_ct;
	pcitag_t		sc_tag;
	void			*sc_ih;
	bus_size_t		sc_mapsize1;
	bus_size_t		sc_mapsize2;
	pcireg_t		sc_iobar_val; /* acx100 only */
	pcireg_t		sc_bar1_val;
	pcireg_t		sc_bar2_val;
	int			sc_intrline;

	/* hack for ACX100A */
	bus_space_tag_t		sc_io_bt;
	bus_space_handle_t	sc_io_bh;
	bus_size_t		sc_iomapsize;

	int			sc_acx_attached;
	pci_chipset_tag_t	sc_pc;
};

int	acx_cardbus_match(struct device *, void *, void *);
void	acx_cardbus_attach(struct device *, struct device *, void *);
int	acx_cardbus_detach(struct device *, int);

struct cfattach acx_cardbus_ca = {
	sizeof (struct acx_cardbus_softc), acx_cardbus_match,
	acx_cardbus_attach, acx_cardbus_detach
};

static const struct pci_matchid acx_cardbus_devices[] = {
	{ PCI_VENDOR_TI, PCI_PRODUCT_TI_ACX100A },
	{ PCI_VENDOR_TI, PCI_PRODUCT_TI_ACX100B },
	{ PCI_VENDOR_TI, PCI_PRODUCT_TI_ACX111 },
};

int	acx_cardbus_enable(struct acx_softc *);
void	acx_cardbus_disable(struct acx_softc *);
void	acx_cardbus_power(struct acx_softc *, int);
void	acx_cardbus_setup(struct acx_cardbus_softc *);

int
acx_cardbus_match(struct device *parent, void *match, void *aux)
{
	return (cardbus_matchbyid((struct cardbus_attach_args *)aux,
	    acx_cardbus_devices,
	    sizeof (acx_cardbus_devices) / sizeof (acx_cardbus_devices[0])));
}

void
acx_cardbus_attach(struct device *parent, struct device *self, void *aux)
{
	struct acx_cardbus_softc *csc = (struct acx_cardbus_softc *)self;
	struct acx_softc *sc = &csc->sc_acx;
	struct cardbus_attach_args *ca = aux;
	cardbus_devfunc_t ct = ca->ca_ct;
	bus_addr_t base;
	int error, b1 = CARDBUS_BASE0_REG, b2 = CARDBUS_BASE1_REG;

	sc->sc_dmat = ca->ca_dmat;
	csc->sc_ct = ct;
	csc->sc_tag = ca->ca_tag;
	csc->sc_intrline = ca->ca_intrline;
	csc->sc_pc = ca->ca_pc;

	/* power management hooks */
	sc->sc_enable = acx_cardbus_enable;
	sc->sc_disable = acx_cardbus_disable;
	sc->sc_power = acx_cardbus_power;

	if (PCI_PRODUCT(ca->ca_id) == PCI_PRODUCT_TI_ACX100A) {
		/* first map I/O space as seen in the dragonfly code */
		error = Cardbus_mapreg_map(ct, CARDBUS_BASE0_REG,
		    PCI_MAPREG_TYPE_IO, 0, &csc->sc_io_bt, &csc->sc_io_bh,
		    &base, &csc->sc_iomapsize);
		if (error != 0) {
			printf(": can't map i/o space\n");
			return;
		}
		csc->sc_iobar_val = base | PCI_MAPREG_TYPE_IO;
		b1 = CARDBUS_BASE1_REG;
		b2 = CARDBUS_BASE2_REG;
	}

	/* map control/status registers */
	error = Cardbus_mapreg_map(ct, b1, PCI_MAPREG_TYPE_MEM, 0,
	    &sc->sc_mem1_bt, &sc->sc_mem1_bh, &base, &csc->sc_mapsize1);
	if (error != 0) {
		printf(": can't map mem1 space\n");
		return;
	}

	csc->sc_bar1_val = base | PCI_MAPREG_TYPE_MEM;

	/* map the other memory region */
	error = Cardbus_mapreg_map(ct, b2, PCI_MAPREG_TYPE_MEM, 0,
	    &sc->sc_mem2_bt, &sc->sc_mem2_bh, &base, &csc->sc_mapsize2);
	if (error != 0) {
		printf(": can't map mem2 space\n");
		return;
	}

	csc->sc_bar2_val = base | PCI_MAPREG_TYPE_MEM;

	/* set up the PCI configuration registers */
	acx_cardbus_setup(csc);

	printf(": irq %d\n", csc->sc_intrline);

	if (PCI_PRODUCT(ca->ca_id) == PCI_PRODUCT_TI_ACX111)
		acx111_set_param(sc);
	else
		acx100_set_param(sc);

	error = acx_attach(sc);
	csc->sc_acx_attached = error == 0;

	Cardbus_function_disable(ct);
}

int
acx_cardbus_detach(struct device *self, int flags)
{
	struct acx_cardbus_softc *csc = (struct acx_cardbus_softc *)self;
	struct acx_softc *sc = &csc->sc_acx;
	cardbus_devfunc_t ct = csc->sc_ct;
	cardbus_chipset_tag_t cc = ct->ct_cc;
	cardbus_function_tag_t cf = ct->ct_cf;
	int error, b1 = CARDBUS_BASE0_REG, b2 = CARDBUS_BASE1_REG;

	if (csc->sc_acx_attached) {
		error = acx_detach(sc);
		if (error != 0)
			return (error);
	}

	/* unhook the interrupt handler */
	if (csc->sc_ih != NULL) {
		cardbus_intr_disestablish(cc, cf, csc->sc_ih);
		csc->sc_ih = NULL;
	}

	/* release bus space and close window */
	if (csc->sc_iomapsize) {
		b1 = CARDBUS_BASE1_REG;
		b2 = CARDBUS_BASE2_REG;
	}
	Cardbus_mapreg_unmap(ct, b1, sc->sc_mem1_bt,
	    sc->sc_mem1_bh, csc->sc_mapsize1);
	Cardbus_mapreg_unmap(ct, b2, sc->sc_mem2_bt,
	    sc->sc_mem2_bh, csc->sc_mapsize2);
	if (csc->sc_iomapsize)
		Cardbus_mapreg_unmap(ct, CARDBUS_BASE0_REG, csc->sc_io_bt,
		    csc->sc_io_bh, csc->sc_iomapsize);

	return (0);
}

int
acx_cardbus_enable(struct acx_softc *sc)
{
	struct acx_cardbus_softc *csc;
	int error;

	csc = (struct acx_cardbus_softc *)sc;
	cardbus_devfunc_t ct = csc->sc_ct;
	cardbus_chipset_tag_t cc = ct->ct_cc;
	cardbus_function_tag_t cf = ct->ct_cf;

	/* power on the socket */
	error = Cardbus_function_enable(ct);
	if (error)
		return error;

	/* setup the PCI configuration registers */
	acx_cardbus_setup(csc);

	/* map and establish the interrupt handler */
	csc->sc_ih = cardbus_intr_establish(cc, cf, csc->sc_intrline, IPL_NET,
	    acx_intr, sc, sc->sc_dev.dv_xname);
	if (csc->sc_ih == NULL) {
		printf("%s: could not establish interrupt at %d\n",
		    sc->sc_dev.dv_xname, csc->sc_intrline);
		Cardbus_function_disable(ct);
		return (1);
	}

	return (0);
}

void
acx_cardbus_disable(struct acx_softc *sc)
{
	struct acx_cardbus_softc *csc = (struct acx_cardbus_softc *)sc;
	cardbus_devfunc_t ct = csc->sc_ct;
	cardbus_chipset_tag_t cc = ct->ct_cc;
	cardbus_function_tag_t cf = ct->ct_cf;

	/* unhook the interrupt handler */
	cardbus_intr_disestablish(cc, cf, csc->sc_ih);
	csc->sc_ih = NULL;

	/* power down the socket */
	Cardbus_function_disable(ct);
}

void
acx_cardbus_power(struct acx_softc *sc, int why)
{
	struct acx_cardbus_softc *csc = (struct acx_cardbus_softc *)sc;

	if (why == DVACT_RESUME) {
		/* kick the PCI configuration registers */
		acx_cardbus_setup(csc);
	}
}

void
acx_cardbus_setup(struct acx_cardbus_softc *csc)
{
	cardbus_devfunc_t ct = csc->sc_ct;
	cardbus_chipset_tag_t cc = ct->ct_cc;
	pci_chipset_tag_t pc = csc->sc_pc;
	cardbus_function_tag_t cf = ct->ct_cf;
	pcireg_t reg;
	int b1 = CARDBUS_BASE0_REG, b2 = CARDBUS_BASE1_REG;

	if (csc->sc_iobar_val) {
		pci_conf_write(pc, csc->sc_tag, CARDBUS_BASE0_REG,
		    csc->sc_iobar_val);
		b1 = CARDBUS_BASE1_REG;
		b2 = CARDBUS_BASE2_REG;
		/* (*cf->cardbus_ctrl)(cc, CARDBUS_IO_ENABLE); */
	}

	/* program the BAR */
	pci_conf_write(pc, csc->sc_tag, b1, csc->sc_bar1_val);
	pci_conf_write(pc, csc->sc_tag, b2, csc->sc_bar2_val);

	/* make sure the right access type is on the cardbus bridge */
	(*cf->cardbus_ctrl)(cc, CARDBUS_MEM_ENABLE);
	(*cf->cardbus_ctrl)(cc, CARDBUS_BM_ENABLE);

	/* enable the appropriate bits in the PCI CSR */
	reg = pci_conf_read(pc, csc->sc_tag,
	    PCI_COMMAND_STATUS_REG);
	reg |= PCI_COMMAND_MASTER_ENABLE | PCI_COMMAND_MEM_ENABLE;
#if 0
	if (csc->sc_iobar_val)
		reg |= PCI_COMMAND_IO_ENABLE;
#endif
	pci_conf_write(pc, csc->sc_tag, PCI_COMMAND_STATUS_REG,
	    reg);
}
@


1.21
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.20 2014/12/22 02:28:51 tedu Exp $  */
a40 1
#include <net/if_dl.h>
@


1.20
log
@unifdef INET
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.19 2010/09/06 19:20:21 deraadt Exp $  */
a51 1
#include <dev/ic/acxreg.h>
@


1.19
log
@All PWR_{SUSPEND,RESUME} can now be replaced by DVACT_{SUSPEND,RESUME}
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.18 2010/03/27 21:40:13 jsg Exp $  */
a43 1
#ifdef INET
a45 1
#endif
@


1.18
log
@Give cardbus the pci_chipset_tag_t from pccbb and push it out through
cardbus_attach_args so we can switch to using proper pci config
space functions instead of callback based wrappers.

ok oga@@ krw@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.17 2010/03/27 20:04:03 jsg Exp $  */
d275 1
a275 1
	if (why == PWR_RESUME) {
@


1.17
log
@Bring back cardbus_chipset_tag_t which is in practice a
pointer to the pccbb softc, to distinguish it from a pci_chipset_tag_t
which can be passed to the normal pci functions.

Suggested by and ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.16 2010/03/22 22:28:27 jsg Exp $  */
d82 1
d127 1
d286 1
d292 1
a292 1
		cardbus_conf_write(cc, cf, csc->sc_tag, CARDBUS_BASE0_REG,
d300 2
a301 2
	cardbus_conf_write(cc, cf, csc->sc_tag, b1, csc->sc_bar1_val);
	cardbus_conf_write(cc, cf, csc->sc_tag, b2, csc->sc_bar2_val);
d308 1
a308 1
	reg = cardbus_conf_read(cc, cf, csc->sc_tag,
d315 1
a315 1
	cardbus_conf_write(cc, cf, csc->sc_tag, PCI_COMMAND_STATUS_REG,
@


1.16
log
@Remove some cardbus defines and types which are identical to
their pci counterparts, similar to recent changes in NetBSD.

ok oga@@ deraadt@@ jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.15 2009/07/30 21:33:23 miod Exp $  */
d188 1
a188 1
	pci_chipset_tag_t cc = ct->ct_cc;
d228 1
a228 1
	pci_chipset_tag_t cc = ct->ct_cc;
d257 1
a257 1
	pci_chipset_tag_t cc = ct->ct_cc;
d283 1
a283 1
	pci_chipset_tag_t cc = ct->ct_cc;
@


1.15
log
@Put the correct value in the I/O BAR for ACX100 cards.
ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.14 2009/03/29 21:53:52 sthen Exp $  */
d67 1
a67 1
	cardbustag_t		sc_tag;
d93 1
a93 1
static const struct cardbus_matchid acx_cardbus_devices[] = {
d132 1
a132 1
	if (CARDBUS_PRODUCT(ca->ca_id) == PCI_PRODUCT_TI_ACX100A) {
d135 1
a135 1
		    CARDBUS_MAPREG_TYPE_IO, 0, &csc->sc_io_bt, &csc->sc_io_bh,
d141 1
a141 1
		csc->sc_iobar_val = base | CARDBUS_MAPREG_TYPE_IO;
d147 1
a147 1
	error = Cardbus_mapreg_map(ct, b1, CARDBUS_MAPREG_TYPE_MEM, 0,
d154 1
a154 1
	csc->sc_bar1_val = base | CARDBUS_MAPREG_TYPE_MEM;
d157 1
a157 1
	error = Cardbus_mapreg_map(ct, b2, CARDBUS_MAPREG_TYPE_MEM, 0,
d164 1
a164 1
	csc->sc_bar2_val = base | CARDBUS_MAPREG_TYPE_MEM;
d171 1
a171 1
	if (CARDBUS_PRODUCT(ca->ca_id) == PCI_PRODUCT_TI_ACX111)
d188 1
a188 1
	cardbus_chipset_tag_t cc = ct->ct_cc;
d228 1
a228 1
	cardbus_chipset_tag_t cc = ct->ct_cc;
d257 1
a257 1
	cardbus_chipset_tag_t cc = ct->ct_cc;
d283 1
a283 1
	cardbus_chipset_tag_t cc = ct->ct_cc;
d306 2
a307 2
	    CARDBUS_COMMAND_STATUS_REG);
	reg |= CARDBUS_COMMAND_MASTER_ENABLE | CARDBUS_COMMAND_MEM_ENABLE;
d310 1
a310 1
		reg |= CARDBUS_COMMAND_IO_ENABLE;
d312 1
a312 1
	cardbus_conf_write(cc, cf, csc->sc_tag, CARDBUS_COMMAND_STATUS_REG,
@


1.14
log
@make various strings ("can't map mem space" and similar) more consistent
between instances, saving space in the kernel. feedback from many (some
incorporated, some left for future work).

ok deraadt, kettenis, "why not" miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.13 2009/03/11 23:51:15 stsp Exp $  */
d290 1
a290 1
		    csc->sc_bar1_val);
@


1.13
log
@Do more error checking in acx(4).
"If it works for you, commit it. The diff looks right." claudio@@
"Seems to work here with ACX111 CardBus" jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.12 2009/02/26 23:03:05 stsp Exp $  */
d138 1
a138 1
			printf(": could not map i/o space\n");
d150 1
a150 1
		printf(": could not map memory1 space\n");
d160 1
a160 1
		printf(": could not map memory2 space\n");
@


1.12
log
@Fix PR6089, "panic in acx_detach upon card eject".
Only call acx_detach() if acx_attach() was successful.
ok mglocker@@, "hurry up" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.11 2006/11/10 20:20:04 damien Exp $  */
d223 4
a226 1
	struct acx_cardbus_softc *csc = (struct acx_cardbus_softc *)sc;
d232 3
a234 1
	Cardbus_function_enable(ct);
@


1.11
log
@acx(4) doesn't use rssadapt(9).
pgt(4) doesn't use rssadapt(9) nor amrr.
=> remove useless #include.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.10 2006/10/12 16:35:52 grange Exp $  */
d80 2
d176 2
a177 1
	acx_attach(sc);
d192 5
a196 3
	error = acx_detach(sc);
	if (error != 0)
		return (error);
@


1.10
log
@Add a symbolic name parameter to cardbus_intr_establish().
Count cardbus devices interrupts in cbb(4) using evcount(9).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.9 2006/08/19 23:17:12 mglocker Exp $  */
a50 1
#include <net80211/ieee80211_rssadapt.h>
@


1.9
log
@Replace existing rate adaption code with the ieee80211_amrr framework.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.8 2006/08/09 09:40:08 mglocker Exp $  */
d232 1
a232 1
	    acx_intr, sc);
@


1.8
log
@On detach the bus space was not unmapped correctly which could lead to
a panic.  Fix it.

Diff received by Marc Winiger <mw@@msys.ch> - thanks!

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.7 2006/08/08 16:07:10 mglocker Exp $  */
d50 1
@


1.7
log
@Some KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.6 2006/08/08 05:18:53 jsg Exp $  */
d187 1
a187 1
	int error;
d200 5
a204 1
	Cardbus_mapreg_unmap(ct, CARDBUS_BASE0_REG, sc->sc_mem1_bt,
d206 1
a206 1
	Cardbus_mapreg_unmap(ct, CARDBUS_BASE1_REG, sc->sc_mem2_bt,
d208 1
a208 1
	if (csc->sc_io_bt)
@


1.6
log
@Mention which MAC we are using (ACX100 or ACX111) and fix
newline in cardbus attachment.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.5 2006/08/03 22:48:36 deraadt Exp $  */
a141 1
		
d191 1
a191 1
		return error;
d208 1
a208 1
	return 0;
d232 1
a232 1
		return 1;
d235 1
a235 1
	return 0;
d272 1
a272 1
	int	b1 = CARDBUS_BASE0_REG, b2 = CARDBUS_BASE1_REG;
@


1.5
log
@be more clear about failed mappings
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.4 2006/08/03 20:24:51 mglocker Exp $  */
d168 1
a168 2
	printf(": irq %d", csc->sc_intrline);

@


1.4
log
@Enable also pretty printing of radio & address for cardbus.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.3 2006/08/03 10:47:42 mglocker Exp $  */
d149 1
a149 1
		printf(": could not map memory space\n");
d159 1
a159 1
		printf(": could not map memory space\n");
@


1.3
log
@Add/Fix copyright notes.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.2 2006/08/03 10:12:37 mglocker Exp $  */
d168 1
a168 1
	printf(": irq %d\n", csc->sc_intrline);
@


1.2
log
@Change to OpenBSD cvs tag.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_acx_cardbus.c,v 1.1 2006/08/03 08:45:01 mglocker Exp $  */
d3 2
a4 1
/*-
@


1.1
log
@Inital import for the acx(4) driver.

ok deraadt@@ jsg@@
@
text
@d1 1
a1 3
/* $Id: if_acx_cardbus.c,v 1.5 2006/08/02 23:06:04 claudio Exp $ */

/*	$OpenBSD: if_ral_cardbus.c,v 1.6 2006/01/09 20:03:31 damien Exp $  */
@

