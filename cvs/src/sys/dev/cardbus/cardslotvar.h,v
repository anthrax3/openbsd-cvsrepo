head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.18
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.16
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.12
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.8
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.16
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.14
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.12
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.10
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.16
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.14
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.12
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.10
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.8
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.12
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.10
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.8
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.10.30.08.47.20;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2010.01.13.09.10.33;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.24.15.50.44;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.19.19.05.39;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.53;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.08.05.50.52;	author aaron;	state Exp;
branches
	1.1.8.1
	1.1.12.1;
next	;

1.1.8.1
date	2001.05.14.22.23.11;	author niklas;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2002.03.29.23.39.33;	author niklas;	state Exp;
branches;
next	;

1.1.12.1
date	2002.06.11.03.42.16;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Replace workqs with tasks.

ok dlg@@
@
text
@/*	$OpenBSD: cardslotvar.h,v 1.5 2010/01/13 09:10:33 jsg Exp $	*/
/*	$NetBSD: cardslotvar.h,v 1.5 2000/03/13 23:52:38 soren Exp $	*/

/*
 * Copyright (c) 1999
 *       HAYAKAWA Koichi.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _DEV_CARDBUS_CARDSLOTVAR_H_
#define _DEV_CARDBUS_CARDSLOTVAR_H_

/* require sys/device.h */
/* require sys/queue.h */

struct cardslot_event;

/*
 * The data structure cardslot_attach_args is the attach argument for
 * PCMCIA (including CardBus and 16-bit card) slot.
 */
struct cardslot_attach_args {
	char *caa_busname;

	int caa_slot;

	/* for cardbus... */
	struct cbslot_attach_args *caa_cb_attach;

	/* for 16-bit pcmcia */
	struct pcmciabus_attach_args *caa_16_attach;

	/* XXX: for 16-bit pcmcia.  dirty!
	 * This should be removed to achieve MI.
	 */
	struct pcic_handle *caa_ph;
};


/*
 * The data structure cardslot_attach_args is the attach argument for
 * PCMCIA (including CardBus and 16-bit card) slot.
 */
struct cardslot_softc {
	struct device sc_dev;

	int sc_slot;			/* slot number */
	int sc_status;			/* the status of slot */

	struct cardbus_softc *sc_cb_softc;
	struct pcmcia_softc *sc_16_softc;

	/* An event queue for the thread which processes slot state events. */
	SIMPLEQ_HEAD(, cardslot_event) sc_events;
	struct task sc_event_task;
};

#define CARDSLOT_STATUS_CARD_MASK     0x07
#define CARDSLOT_STATUS_CARD_NONE     0x00  /* NO card inserted */
#define CARDSLOT_STATUS_CARD_16	      0x01  /* 16-bit pcmcia card inserted */
#define CARDSLOT_STATUS_CARD_CB	      0x02  /* CardBus pcmcia card inserted */
#define CARDSLOT_STATUS_UNKNOWN	      0x07  /* Unknown card inserted */

#define CARDSLOT_CARDTYPE(x) ((x) & CARDSLOT_STATUS_CARD_MASK)
#define CARDSLOT_SET_CARDTYPE(x, type) \
	do {(x) &= ~CARDSLOT_STATUS_CARD_MASK;\
	    (x) |= (CARDSLOT_STATUS_CARD_MASK & (type));} while(0)

#define CARDSLOT_STATUS_WORK_MASK     0x08
#define CARDSLOT_STATUS_WORKING	      0x08  /* at least one function works */
#define CARDSLOT_STATUS_NOTWORK	      0x00  /* no functions are working */

#define CARDSLOT_WORK(x) ((x) & CARDSLOT_STATUS_WORK_MASK)
#define CARDSLOT_SET_WORK(x, type) \
	do {(x) &= ~CARDSLOT_STATUS_WORK_MASK;\
	    (x) |= (CARDSLOT_STATUS_WORK_MASK & (type));} while(0)


struct cardslot_event {
	SIMPLEQ_ENTRY(cardslot_event) ce_q;

	int ce_type;
};

typedef struct cardslot_softc *cardslot_t;

/* ce_type */
#define	CARDSLOT_EVENT_INSERTION_16	0
#define	CARDSLOT_EVENT_REMOVAL_16	1

#define	CARDSLOT_EVENT_INSERTION_CB	2
#define	CARDSLOT_EVENT_REMOVAL_CB	3

#define IS_CARDSLOT_INSERT_REMOVE_EV(x) (0 <= (x) && (x) <= 3)

void	cardslot_event_throw(cardslot_t, int);

#endif /* !_DEV_CARDBUS_CARDSLOTVAR_H_ */
@


1.5
log
@As per NetBSD move HAYAKAWA Koichi's licenses to two clause.
@
text
@d1 1
a1 1
/*	$OpenBSD: cardslotvar.h,v 1.4 2008/11/24 15:50:44 deraadt Exp $	*/
d76 1
@


1.4
log
@use workq instead of crafting our own kthread, since the tasks being done
are fairly small.  tested by a few, and kettenis says he will test it sooner
if it is commited...
@
text
@d1 1
a1 1
/*	$OpenBSD: cardslotvar.h,v 1.3 2005/09/19 19:05:39 fgsch Exp $	*/
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the author.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.3
log
@knf.
@
text
@d1 1
a1 1
/*	$OpenBSD: cardslotvar.h,v 1.2 2002/03/14 01:26:53 millert Exp $	*/
a78 3
	struct proc *sc_event_thread;
	int sc_th_enable;		/* true if the thread is enabled */

a79 1

@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: cardslotvar.h,v 1.1 2000/04/08 05:50:52 aaron Exp $ */
d49 1
a49 1
  char *caa_busname;
d51 1
a51 1
  int caa_slot;
d53 2
a54 2
  /* for cardbus... */
  struct cbslot_attach_args *caa_cb_attach;
d56 2
a57 2
  /* for 16-bit pcmcia */
  struct pcmciabus_attach_args *caa_16_attach;
d59 4
a62 2
  /* XXX: for 16-bit pcmcia.  dirty!  This should be removed to achieve MI. */
  struct pcic_handle *caa_ph;
d71 1
a71 1
  struct device sc_dev;
d73 2
a74 2
  int sc_slot;			/* slot number */
  int sc_status;		/* the status of slot */
d76 2
a77 2
  struct cardbus_softc *sc_cb_softc;
  struct pcmcia_softc *sc_16_softc;
d79 2
a80 2
  struct proc *sc_event_thread;
  int sc_th_enable;		/* true if the thread is enabled */
d82 1
a82 1
  /* An event queue for the thread which processes slot state events. */
d84 1
a84 1
  SIMPLEQ_HEAD(, cardslot_event) sc_events;
d109 1
a109 1
  SIMPLEQ_ENTRY(cardslot_event) ce_q;
d111 1
a111 1
  int ce_type;
d125 1
a125 1
void cardslot_event_throw(cardslot_t cs, int ev);
@


1.1
log
@Initial check-in for support of 32-bit CardBus PC Cards; from NetBSD. On many
machines, this code needs the new PCIBIOS* options enabled in the kernel config
file to work, but your mileage may vary. Included is a working 3c575 driver for
3Com 10/100 CardBus PC Card NICs (tested only with the 'C' revision). The 3c575
is the pccard version of the PCI EtherLink XL cards, and thus the xl driver has
been split into /sys/dev/ic.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d123 1
a123 1
void cardslot_event_throw __P((cardslot_t cs, int ev));
@


1.1.12.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cardslotvar.h,v 1.1 2000/04/08 05:50:52 aaron Exp $ */
d123 1
a123 1
void cardslot_event_throw(cardslot_t cs, int ev);
@


1.1.8.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: cardslotvar.h,v 1.1 2000/04/08 05:50:52 aaron Exp $ */
@


1.1.8.2
log
@cardbus too got skipped by cvs for some reason
@
text
@d1 1
a1 1
/*	$OpenBSD: cardslotvar.h,v 1.1.8.1 2001/05/14 22:23:11 niklas Exp $ */
d123 1
a123 1
void cardslot_event_throw(cardslot_t cs, int ev);
@


