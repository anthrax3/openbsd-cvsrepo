head	1.12;
access;
symbols
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.16
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.12
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.10
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.8
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.10.0.14
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.12
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.10
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.8
	OPENBSD_5_0:1.10.0.6
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.4
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.2
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.5.0.10
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.8
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.6
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5;
locks; strict;
comment	@ * @;


1.12
date	2013.12.06.21.03.02;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2013.11.14.12.21.13;	author dlg;	state Exp;
branches;
next	1.10;

1.10
date	2010.08.08.16.36.33;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2010.03.27.21.40.13;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2010.03.27.20.04.03;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2010.03.22.22.28.27;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2009.03.29.21.53.52;	author sthen;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.29.10.37.11;	author mglocker;	state Exp;
branches;
next	1.4;

1.4
date	2006.10.29.11.41.34;	author mglocker;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.25.13.57.21;	author mglocker;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.15.20.05.46;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.15.19.55.47;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Add a DVACT_WAKEUP op to the *_activate() API.  This is called after the
kernel resumes normal (non-cold, able to run processes, etc) operation.
Previously we were relying on specific DVACT_RESUME op's in drivers
creating callback/threads themselves, but that has become too common,
indicating the need for a built-in mechanism.
ok dlg kettenis, tested by a sufficient amount of people
@
text
@/*	$OpenBSD: if_malo_cardbus.c,v 1.11 2013/11/14 12:21:13 dlg Exp $ */

/*
 * Copyright (c) 2006 Claudio Jeker <claudio@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include "bpfilter.h"

#include <sys/param.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/systm.h>
#include <sys/timeout.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <net80211/ieee80211_var.h>
#include <net80211/ieee80211_radiotap.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#include <dev/cardbus/cardbusvar.h>

#include <dev/ic/malo.h>

struct malo_cardbus_softc {
	struct malo_softc	sc_malo;

	/* cardbus specific goo */
	cardbus_devfunc_t	sc_ct;
	pcitag_t		sc_tag;
	void			*sc_ih;

	bus_size_t		sc_mapsize1;
	bus_size_t		sc_mapsize2;
	pcireg_t		sc_bar1_val;
	pcireg_t		sc_bar2_val;
	int			sc_intrline;
	pci_chipset_tag_t	sc_pc;
};

int	malo_cardbus_match(struct device *parent, void *match, void *aux);
void	malo_cardbus_attach(struct device *parent, struct device *self,
	    void *aux);
int	malo_cardbus_detach(struct device *self, int flags);
void	malo_cardbus_setup(struct malo_cardbus_softc *csc);
int	malo_cardbus_enable(struct malo_softc *sc);
void	malo_cardbus_disable(struct malo_softc *sc);

struct cfattach malo_cardbus_ca = {
	sizeof (struct malo_cardbus_softc), malo_cardbus_match,
	malo_cardbus_attach, malo_cardbus_detach
};

static const struct pci_matchid malo_cardbus_devices[] = {
	{ PCI_VENDOR_MARVELL, PCI_PRODUCT_MARVELL_88W8310 },
	{ PCI_VENDOR_MARVELL, PCI_PRODUCT_MARVELL_88W8335_1 },
	{ PCI_VENDOR_MARVELL, PCI_PRODUCT_MARVELL_88W8335_2 }
};

int
malo_cardbus_match(struct device *parent, void *match, void *aux)
{
	return (cardbus_matchbyid(aux, malo_cardbus_devices,
	    sizeof (malo_cardbus_devices) / sizeof (malo_cardbus_devices[0])));
}

void
malo_cardbus_attach(struct device *parent, struct device *self, void *aux)
{
	struct malo_cardbus_softc *csc = (struct malo_cardbus_softc *)self;
	struct cardbus_attach_args *ca = aux;
	struct malo_softc *sc = &csc->sc_malo;
	cardbus_devfunc_t ct = ca->ca_ct;
	bus_addr_t base;
	int error;

	sc->sc_dmat = ca->ca_dmat;
	csc->sc_ct = ct;
	csc->sc_tag = ca->ca_tag;
	csc->sc_intrline = ca->ca_intrline;
	csc->sc_pc = ca->ca_pc;

	/* power management hooks */
	sc->sc_enable = malo_cardbus_enable;
	sc->sc_disable = malo_cardbus_disable;
#if 0
	sc->sc_power = malo_cardbus_power;
#endif

	/* map control/status registers */
	error = Cardbus_mapreg_map(ct, CARDBUS_BASE0_REG,
	    PCI_MAPREG_TYPE_MEM, 0, &sc->sc_mem1_bt,
	    &sc->sc_mem1_bh, &base, &csc->sc_mapsize1);
	if (error != 0) {
		printf(": can't map mem1 space\n");
		return;
	}
	csc->sc_bar1_val = base | PCI_MAPREG_TYPE_MEM;

	/* map control/status registers */
	error = Cardbus_mapreg_map(ct, CARDBUS_BASE1_REG,
	    PCI_MAPREG_TYPE_MEM, 0, &sc->sc_mem2_bt,
	    &sc->sc_mem2_bh, &base, &csc->sc_mapsize2);
	if (error != 0) {
		printf(": can't map mem2 space\n");
		Cardbus_mapreg_unmap(ct, CARDBUS_BASE0_REG, sc->sc_mem1_bt,
		    sc->sc_mem1_bh, csc->sc_mapsize1);
		return;
	}
	csc->sc_bar2_val = base | PCI_MAPREG_TYPE_MEM;

	/* set up the PCI configuration registers */
	malo_cardbus_setup(csc);

	printf(": irq %d", csc->sc_intrline);

	error = malo_attach(sc);
	if (error != 0)
		malo_cardbus_detach(&sc->sc_dev, 0);

	Cardbus_function_disable(ct);
}

int
malo_cardbus_detach(struct device *self, int flags)
{
	struct malo_cardbus_softc *csc = (struct malo_cardbus_softc *)self;
	struct malo_softc *sc = &csc->sc_malo;
	cardbus_devfunc_t ct = csc->sc_ct;
	cardbus_chipset_tag_t cc = ct->ct_cc;
	cardbus_function_tag_t cf = ct->ct_cf;
	int error;

	error = malo_detach(sc);
	if (error != 0)
		return (error);

	/* unhook the interrupt handler */
	if (csc->sc_ih != NULL) {
		cardbus_intr_disestablish(cc, cf, csc->sc_ih);
		csc->sc_ih = NULL;
	}

	/* release bus space and close window */
	Cardbus_mapreg_unmap(ct, CARDBUS_BASE0_REG, sc->sc_mem1_bt,
	    sc->sc_mem1_bh, csc->sc_mapsize1);
	Cardbus_mapreg_unmap(ct, CARDBUS_BASE1_REG, sc->sc_mem2_bt,
	    sc->sc_mem2_bh, csc->sc_mapsize2);

	return (0);
}

void
malo_cardbus_setup(struct malo_cardbus_softc *csc)
{
	cardbus_devfunc_t ct = csc->sc_ct;
	cardbus_chipset_tag_t cc = ct->ct_cc;
	pci_chipset_tag_t pc = csc->sc_pc;
	cardbus_function_tag_t cf = ct->ct_cf;
	pcireg_t reg;

	/* program the BAR */
	pci_conf_write(pc, csc->sc_tag, CARDBUS_BASE0_REG,
	    csc->sc_bar1_val);
	pci_conf_write(pc, csc->sc_tag, CARDBUS_BASE1_REG,
	    csc->sc_bar2_val);

	/* make sure the right access type is on the cardbus bridge */
	(*cf->cardbus_ctrl)(cc, CARDBUS_MEM_ENABLE);
	(*cf->cardbus_ctrl)(cc, CARDBUS_BM_ENABLE);

	/* enable the appropriate bits in the PCI CSR */
	reg = pci_conf_read(pc, csc->sc_tag,
	    PCI_COMMAND_STATUS_REG);
	reg |= PCI_COMMAND_MASTER_ENABLE | PCI_COMMAND_MEM_ENABLE;
	pci_conf_write(pc, csc->sc_tag, PCI_COMMAND_STATUS_REG,
	    reg);
}

int
malo_cardbus_enable(struct malo_softc *sc)
{
	struct malo_cardbus_softc *csc = (struct malo_cardbus_softc *)sc;
	cardbus_devfunc_t ct = csc->sc_ct;
	cardbus_chipset_tag_t cc = ct->ct_cc;
	cardbus_function_tag_t cf = ct->ct_cf;

	/* power on the socket */
	Cardbus_function_enable(ct);

	/* setup the PCI configuration registers */
	malo_cardbus_setup(csc);

	/* map and establish the interrupt handler */
	csc->sc_ih = cardbus_intr_establish(cc, cf, csc->sc_intrline, IPL_NET,
	    malo_intr, sc, sc->sc_dev.dv_xname);
	if (csc->sc_ih == NULL) {
		printf("%s: could not establish interrupt at %d\n",
		    sc->sc_dev.dv_xname, csc->sc_intrline);
		Cardbus_function_disable(ct);
		return (1);
	}

	return (0);
}

void
malo_cardbus_disable(struct malo_softc *sc)
{
	struct malo_cardbus_softc *csc = (struct malo_cardbus_softc *)sc;
	cardbus_devfunc_t ct = csc->sc_ct;
	cardbus_chipset_tag_t cc = ct->ct_cc;
	cardbus_function_tag_t cf = ct->ct_cf;

	/* unhook the interrupt handler */
	cardbus_intr_disestablish(cc, cf, csc->sc_ih);
	csc->sc_ih = NULL;

	/* power down the socket */
	Cardbus_function_disable(ct);
}
@


1.11
log
@replace workqs with tasks for handling resume

from kimberley manning
@
text
@d1 1
a1 1
/*	$OpenBSD: if_malo_cardbus.c,v 1.10 2010/08/08 16:36:33 deraadt Exp $ */
a21 1
#include <sys/task.h>
@


1.10
log
@activate function for suspend/restore; from mglocker
@
text
@d1 1
a1 1
/*	$OpenBSD: if_malo_cardbus.c,v 1.9 2010/03/27 21:40:13 jsg Exp $ */
d22 1
a22 1
#include <sys/workq.h>
@


1.9
log
@Give cardbus the pci_chipset_tag_t from pccbb and push it out through
cardbus_attach_args so we can switch to using proper pci config
space functions instead of callback based wrappers.

ok oga@@ krw@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_malo_cardbus.c,v 1.8 2010/03/27 20:04:03 jsg Exp $ */
d22 1
@


1.8
log
@Bring back cardbus_chipset_tag_t which is in practice a
pointer to the pccbb softc, to distinguish it from a pci_chipset_tag_t
which can be passed to the normal pci functions.

Suggested by and ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_malo_cardbus.c,v 1.7 2010/03/22 22:28:27 jsg Exp $ */
d57 1
d100 1
d177 1
d182 1
a182 1
	cardbus_conf_write(cc, cf, csc->sc_tag, CARDBUS_BASE0_REG,
d184 1
a184 1
	cardbus_conf_write(cc, cf, csc->sc_tag, CARDBUS_BASE1_REG,
d192 1
a192 1
	reg = cardbus_conf_read(cc, cf, csc->sc_tag,
d195 1
a195 1
	cardbus_conf_write(cc, cf, csc->sc_tag, PCI_COMMAND_STATUS_REG,
@


1.7
log
@Remove some cardbus defines and types which are identical to
their pci counterparts, similar to recent changes in NetBSD.

ok oga@@ deraadt@@ jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_malo_cardbus.c,v 1.6 2009/03/29 21:53:52 sthen Exp $ */
d147 1
a147 1
	pci_chipset_tag_t cc = ct->ct_cc;
d174 1
a174 1
	pci_chipset_tag_t cc = ct->ct_cc;
d201 1
a201 1
	pci_chipset_tag_t cc = ct->ct_cc;
d228 1
a228 1
	pci_chipset_tag_t cc = ct->ct_cc;
@


1.6
log
@make various strings ("can't map mem space" and similar) more consistent
between instances, saving space in the kernel. feedback from many (some
incorporated, some left for future work).

ok deraadt, kettenis, "why not" miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_malo_cardbus.c,v 1.5 2006/11/29 10:37:11 mglocker Exp $ */
d49 1
a49 1
	cardbustag_t		sc_tag;
d72 1
a72 1
static const struct cardbus_matchid malo_cardbus_devices[] = {
d109 1
a109 1
	    CARDBUS_MAPREG_TYPE_MEM, 0, &sc->sc_mem1_bt,
d115 1
a115 1
	csc->sc_bar1_val = base | CARDBUS_MAPREG_TYPE_MEM;
d119 1
a119 1
	    CARDBUS_MAPREG_TYPE_MEM, 0, &sc->sc_mem2_bt,
d127 1
a127 1
	csc->sc_bar2_val = base | CARDBUS_MAPREG_TYPE_MEM;
d147 1
a147 1
	cardbus_chipset_tag_t cc = ct->ct_cc;
d174 1
a174 1
	cardbus_chipset_tag_t cc = ct->ct_cc;
d190 3
a192 3
	    CARDBUS_COMMAND_STATUS_REG);
	reg |= CARDBUS_COMMAND_MASTER_ENABLE | CARDBUS_COMMAND_MEM_ENABLE;
	cardbus_conf_write(cc, cf, csc->sc_tag, CARDBUS_COMMAND_STATUS_REG,
d201 1
a201 1
	cardbus_chipset_tag_t cc = ct->ct_cc;
d228 1
a228 1
	cardbus_chipset_tag_t cc = ct->ct_cc;
@


1.5
log
@Add another ID to match for the 88W8310 chip.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_malo_cardbus.c,v 1.4 2006/10/29 11:41:34 mglocker Exp $ */
d112 1
a112 1
		printf(": could not map 1st memory space\n");
d122 1
a122 1
		printf(": could not map 2nd memory space\n");
@


1.4
log
@Add first TX path and active scan bits.  Don't expect to much yet.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_malo_cardbus.c,v 1.3 2006/10/25 13:57:21 mglocker Exp $ */
d73 1
@


1.3
log
@Ooops, forgot to add radio mtap includes.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_malo_cardbus.c,v 1.2 2006/10/15 20:05:46 claudio Exp $ */
d25 1
@


1.2
log
@Add $OpenBSD$ tag
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d19 2
d33 1
@


1.1
log
@First stubs for a new driver for the Marvell Libertas chips.
The card correctly loads the firmware and it is possible to send a few
simple commands to the card but that's it. No packet are sent or received.
Only the Netgear WG511v2 cardbus card is tested.
A cheese fondue and a bigger amount of white wine was needed to make the
interrupts work -- until last night the driver was uploading the firmware
to fast and the card garbled the image without moaning. It took us a full
day and hundreds of test kernels to figure that out.
Joint work with mglocker@@, fondue by mbalmer@@
OK mglocker@@, get it in deraadt@@
@
text
@d1 2
@

