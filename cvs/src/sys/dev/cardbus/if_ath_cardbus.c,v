head	1.19;
access;
symbols
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.4
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.16.0.18
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.16
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.12
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.10
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.8
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.6
	OPENBSD_5_0:1.16.0.4
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.12.0.6
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.8
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.4
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.10.0.6
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.4
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.19
date	2015.11.24.17.11.39;	author mpi;	state Exp;
branches;
next	1.18;
commitid	5gdEnqVoJuTuwdTu;

1.18
date	2014.12.22.02.28.51;	author tedu;	state Exp;
branches;
next	1.17;
commitid	yM2VFFhpDTeFQlve;

1.17
date	2014.12.19.22.44.58;	author guenther;	state Exp;
branches;
next	1.16;
commitid	LS2TNeCue5R9L67C;

1.16
date	2010.09.06.19.20.21;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2010.03.27.21.40.13;	author jsg;	state Exp;
branches;
next	1.14;

1.14
date	2010.03.27.20.04.03;	author jsg;	state Exp;
branches;
next	1.13;

1.13
date	2010.03.22.22.28.27;	author jsg;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.14.07.20.12;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.13.07.31.57;	author jsg;	state Exp;
branches;
next	1.10;

1.10
date	2006.10.12.16.35.52;	author grange;	state Exp;
branches;
next	1.9;

1.9
date	2006.06.21.11.27.03;	author fkr;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.29.20.39.37;	author fgsch;	state Exp;
branches;
next	1.7;

1.7
date	2005.09.22.10.17.04;	author reyk;	state Exp;
branches;
next	1.6;

1.6
date	2005.09.08.12.44.56;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2005.06.08.05.36.33;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.28.00.46.46;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.16.14.29.14;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.23.09.39.29;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2004.11.02.02.45.37;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.19
log
@You only need <net/if_dl.h> if you're using LLADDR() or a sockaddr_dl.
@
text
@/*      $OpenBSD: if_ath_cardbus.c,v 1.18 2014/12/22 02:28:51 tedu Exp $   */
/*	$NetBSD: if_ath_cardbus.c,v 1.4 2004/08/02 19:14:28 mycroft Exp $ */

/*
 * Copyright (c) 2003
 *	Ichiro FUKUHARA <ichiro@@ichiro.org>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Ichiro FUKUHARA.
 * 4. The name of the company nor the name of the author may be used to
 *    endorse or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ICHIRO FUKUHARA ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL ICHIRO FUKUHARA OR THE VOICES IN HIS HEAD BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * CardBus bus front-end for the AR5001 Wireless LAN 802.11a/b/g CardBus.
 */

#include <sys/param.h>
#include <sys/systm.h> 
#include <sys/mbuf.h>   
#include <sys/malloc.h>
#include <sys/kernel.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/errno.h>
#include <sys/device.h>
#include <sys/gpio.h>
#include <sys/endian.h>
 
#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h> 
#include <netinet/if_ether.h>

#include <net80211/ieee80211_var.h>
#include <net80211/ieee80211_rssadapt.h>

#include <machine/bus.h>
#include <machine/intr.h>

#include <dev/gpio/gpiovar.h>

#include <dev/pci/pcivar.h>
#include <dev/pci/pcireg.h>
#include <dev/pci/pcidevs.h>

#include <dev/cardbus/cardbusvar.h>

#include <dev/ic/athvar.h>

/*
 * PCI configuration space registers
 */
#define	ATH_PCI_MMBA		0x10	/* memory mapped base */

struct ath_cardbus_softc {
	struct ath_softc	sc_ath;

	/* CardBus-specific goo. */
	void	*sc_ih;			/* interrupt handle */
	cardbus_devfunc_t sc_ct;	/* our CardBus devfuncs */
	pcitag_t sc_tag;		/* our CardBus tag */

	pcireg_t sc_bar_val;		/* value of the BAR */

	int	sc_intrline;		/* interrupt line */
	pci_chipset_tag_t sc_pc;
};

int	ath_cardbus_match(struct device *, void *, void *);
void	ath_cardbus_attach(struct device *, struct device *, void *);
int	ath_cardbus_detach(struct device *, int);

struct cfattach ath_cardbus_ca = {
	sizeof(struct ath_cardbus_softc),
	ath_cardbus_match,
	ath_cardbus_attach,
	ath_cardbus_detach
};


void	ath_cardbus_setup(struct ath_cardbus_softc *);

int	ath_cardbus_enable(struct ath_softc *);
void	ath_cardbus_disable(struct ath_softc *);
void	ath_cardbus_power(struct ath_softc *, int);

int
ath_cardbus_match(struct device *parent, void *match, void *aux)
{
	struct cardbus_attach_args *ca = aux;
	const char* devname;

	devname = ath_hal_probe(PCI_VENDOR(ca->ca_id),
				PCI_PRODUCT(ca->ca_id));

	if (devname)
		return (1);

	return (0);
}

void
ath_cardbus_attach(struct device *parent, struct device *self, void *aux)
{
	struct ath_cardbus_softc *csc = (void *)self;
	struct ath_softc *sc = &csc->sc_ath;
	struct cardbus_attach_args *ca = aux;
	cardbus_devfunc_t ct = ca->ca_ct;
	bus_addr_t adr;

	sc->sc_dmat = ca->ca_dmat;
	csc->sc_ct = ct;
	csc->sc_tag = ca->ca_tag;
	csc->sc_pc = ca->ca_pc;

	/*
	 * Power management hooks.
	 */
	sc->sc_enable = ath_cardbus_enable;
	sc->sc_disable = ath_cardbus_disable;
	sc->sc_power = ath_cardbus_power;

	/*
	 * Map the device.
	 */
	if (Cardbus_mapreg_map(ct, ATH_PCI_MMBA, PCI_MAPREG_TYPE_MEM, 0,
	    &sc->sc_st, &sc->sc_sh, &adr, &sc->sc_ss) == 0) {
		csc->sc_bar_val = adr | PCI_MAPREG_TYPE_MEM;
	}

	else {
	        printf(": unable to map device registers\n");
		return;
	}

	/*
	 * Set up the PCI configuration registers.
	 */
	ath_cardbus_setup(csc);

	/* Remember which interrupt line. */
	csc->sc_intrline = ca->ca_intrline;

	printf(": irq %d\n", csc->sc_intrline);

	/*
	 * Finish off the attach.
	 */
	ath_attach(PCI_PRODUCT(ca->ca_id), sc);

	/*
	 * Power down the socket.
	 */
	Cardbus_function_disable(csc->sc_ct);
}

int
ath_cardbus_detach(struct device *self, int flags)
{
	struct ath_cardbus_softc *csc = (void *)self;
	struct ath_softc *sc = &csc->sc_ath;
	struct cardbus_devfunc *ct = csc->sc_ct;
	int rv;

#if defined(DIAGNOSTIC)
	if (ct == NULL)
		panic("%s: data structure lacks", sc->sc_dev.dv_xname);
#endif

	rv = ath_detach(sc, flags);
	if (rv)
		return (rv);

	/*
	 * Unhook the interrupt handler.
	 */
	if (csc->sc_ih != NULL) {
		cardbus_intr_disestablish(ct->ct_cc, ct->ct_cf, csc->sc_ih);
		csc->sc_ih = NULL;
	}

	/*
	 * Release bus space and close window.
	 */
	Cardbus_mapreg_unmap(ct, ATH_PCI_MMBA,
		    sc->sc_st, sc->sc_sh, sc->sc_ss);

	return (0);
}

int
ath_cardbus_enable(struct ath_softc *sc)
{
	struct ath_cardbus_softc *csc = (void *) sc;
	cardbus_devfunc_t ct = csc->sc_ct;
	cardbus_chipset_tag_t cc = ct->ct_cc;
	cardbus_function_tag_t cf = ct->ct_cf;

	/*
	 * Power on the socket.
	 */
	Cardbus_function_enable(ct);

	/*
	 * Set up the PCI configuration registers.
	 */
	ath_cardbus_setup(csc);

	/*
	 * Map and establish the interrupt.
	 */
	csc->sc_ih = cardbus_intr_establish(cc, cf, csc->sc_intrline, IPL_NET,
	    ath_intr, sc, sc->sc_dev.dv_xname);
	if (csc->sc_ih == NULL) {
		printf(": unable to establish irq %d\n",
		       csc->sc_intrline);
		Cardbus_function_disable(csc->sc_ct);
		return (1);
	}
	return (0);
}

void
ath_cardbus_disable(struct ath_softc *sc)
{
	struct ath_cardbus_softc *csc = (void *) sc;
	cardbus_devfunc_t ct = csc->sc_ct;
	cardbus_chipset_tag_t cc = ct->ct_cc;
	cardbus_function_tag_t cf = ct->ct_cf;

	/* Unhook the interrupt handler. */
	cardbus_intr_disestablish(cc, cf, csc->sc_ih);
	csc->sc_ih = NULL;

	/* Power down the socket. */
	Cardbus_function_disable(ct);
}

void
ath_cardbus_power(struct ath_softc *sc, int why)
{
	if (why == DVACT_RESUME)
		ath_enable(sc);
}

void
ath_cardbus_setup(struct ath_cardbus_softc *csc)
{
	cardbus_devfunc_t ct = csc->sc_ct;
	cardbus_chipset_tag_t cc = ct->ct_cc;
	pci_chipset_tag_t pc = csc->sc_pc;
	pcireg_t reg;

#ifdef notyet
	(void)cardbus_setpowerstate(sc->sc_dev.dv_xname, ct, csc->sc_tag,
	    PCI_PWR_D0);
#endif

	/* Program the BAR. */
	pci_conf_write(pc, csc->sc_tag, ATH_PCI_MMBA,
	    csc->sc_bar_val);

	/* Make sure the right access type is on the CardBus bridge. */
	(*ct->ct_cf->cardbus_ctrl)(cc, CARDBUS_MEM_ENABLE);
	(*ct->ct_cf->cardbus_ctrl)(cc, CARDBUS_BM_ENABLE);

	/* Enable the appropriate bits in the PCI CSR. */
	reg = pci_conf_read(pc, csc->sc_tag,
	    PCI_COMMAND_STATUS_REG);
	reg |= PCI_COMMAND_MASTER_ENABLE | PCI_COMMAND_MEM_ENABLE;
	pci_conf_write(pc, csc->sc_tag, PCI_COMMAND_STATUS_REG,
	    reg);

	/*
	 * Make sure the latency timer is set to some reasonable
	 * value.
	 */
	reg = pci_conf_read(pc, csc->sc_tag, PCI_BHLC_REG);
	if (PCI_LATTIMER(reg) < 0x20) {
		reg &= ~(PCI_LATTIMER_MASK << PCI_LATTIMER_SHIFT);
		reg |= (0x20 << PCI_LATTIMER_SHIFT);
		pci_conf_write(pc, csc->sc_tag, PCI_BHLC_REG, reg);
	}
}
@


1.18
log
@unifdef INET
@
text
@d1 1
a1 1
/*      $OpenBSD: if_ath_cardbus.c,v 1.17 2014/12/19 22:44:58 guenther Exp $   */
a53 1
#include <net/if_dl.h>
@


1.17
log
@Use <sys/endian.h> instead of <machine/endian.h>

ok dlg@@ mpi@@ bcook@@ millert@@ miod@@
@
text
@d1 1
a1 1
/*      $OpenBSD: if_ath_cardbus.c,v 1.16 2010/09/06 19:20:21 deraadt Exp $   */
a56 1
#ifdef INET
a58 1
#endif
@


1.16
log
@All PWR_{SUSPEND,RESUME} can now be replaced by DVACT_{SUSPEND,RESUME}
@
text
@d1 1
a1 1
/*      $OpenBSD: if_ath_cardbus.c,v 1.15 2010/03/27 21:40:13 jsg Exp $   */
d51 1
a51 2

#include <machine/endian.h>
@


1.15
log
@Give cardbus the pci_chipset_tag_t from pccbb and push it out through
cardbus_attach_args so we can switch to using proper pci config
space functions instead of callback based wrappers.

ok oga@@ krw@@ kettenis@@
@
text
@d1 1
a1 1
/*      $OpenBSD: if_ath_cardbus.c,v 1.14 2010/03/27 20:04:03 jsg Exp $   */
d271 1
a271 1
	if (why == PWR_RESUME)
@


1.14
log
@Bring back cardbus_chipset_tag_t which is in practice a
pointer to the pccbb softc, to distinguish it from a pci_chipset_tag_t
which can be passed to the normal pci functions.

Suggested by and ok kettenis@@
@
text
@d1 1
a1 1
/*      $OpenBSD: if_ath_cardbus.c,v 1.13 2010/03/22 22:28:27 jsg Exp $   */
d95 1
d143 1
d280 1
a280 1
	cardbus_function_tag_t cf = ct->ct_cf;
d289 1
a289 1
	cardbus_conf_write(cc, cf, csc->sc_tag, ATH_PCI_MMBA,
d297 1
a297 1
	reg = cardbus_conf_read(cc, cf, csc->sc_tag,
d300 1
a300 1
	cardbus_conf_write(cc, cf, csc->sc_tag, PCI_COMMAND_STATUS_REG,
d307 1
a307 1
	reg = cardbus_conf_read(cc, cf, csc->sc_tag, PCI_BHLC_REG);
d311 1
a311 1
		cardbus_conf_write(cc, cf, csc->sc_tag, PCI_BHLC_REG, reg);
@


1.13
log
@Remove some cardbus defines and types which are identical to
their pci counterparts, similar to recent changes in NetBSD.

ok oga@@ deraadt@@ jasper@@
@
text
@d1 1
a1 1
/*      $OpenBSD: if_ath_cardbus.c,v 1.12 2008/06/14 07:20:12 jsing Exp $   */
d223 1
a223 1
	pci_chipset_tag_t cc = ct->ct_cc;
d255 1
a255 1
	pci_chipset_tag_t cc = ct->ct_cc;
d277 1
a277 1
	pci_chipset_tag_t cc = ct->ct_cc;
@


1.12
log
@Use the bus_size_t in the ath_softc.

ok jsg@@
@
text
@d1 1
a1 1
/*      $OpenBSD: if_ath_cardbus.c,v 1.11 2008/06/13 07:31:57 jsg Exp $   */
d90 1
a90 1
	cardbustag_t sc_tag;		/* our CardBus tag */
d153 1
a153 1
	if (Cardbus_mapreg_map(ct, ATH_PCI_MMBA, CARDBUS_MAPREG_TYPE_MEM, 0,
d155 1
a155 1
		csc->sc_bar_val = adr | CARDBUS_MAPREG_TYPE_MEM;
d223 1
a223 1
	cardbus_chipset_tag_t cc = ct->ct_cc;
d255 1
a255 1
	cardbus_chipset_tag_t cc = ct->ct_cc;
d277 1
a277 1
	cardbus_chipset_tag_t cc = ct->ct_cc;
d296 3
a298 3
	    CARDBUS_COMMAND_STATUS_REG);
	reg |= CARDBUS_COMMAND_MASTER_ENABLE | CARDBUS_COMMAND_MEM_ENABLE;
	cardbus_conf_write(cc, cf, csc->sc_tag, CARDBUS_COMMAND_STATUS_REG,
d305 5
a309 5
	reg = cardbus_conf_read(cc, cf, csc->sc_tag, CARDBUS_BHLC_REG);
	if (CARDBUS_LATTIMER(reg) < 0x20) {
		reg &= ~(CARDBUS_LATTIMER_MASK << CARDBUS_LATTIMER_SHIFT);
		reg |= (0x20 << CARDBUS_LATTIMER_SHIFT);
		cardbus_conf_write(cc, cf, csc->sc_tag, CARDBUS_BHLC_REG, reg);
@


1.11
log
@If you have #if FOO > 0 parts of your softc be
sure to #include "foo.h" in all code that uses the softc,
otherwise some object files will have a different idea of how
big the softc struct is.

This will result in things like part of the softc, say the interrupt
handler being overridden by other data.  Putting printfs in the
main object file will look fine as it has the right idea as to
what the size is.  It is only after several hours debugging
that you start to figure out what the hell is going on.

jsing started trying to figure out the problem and got hints
from kettenis that it likely wasn't an interrupt problem,
after quite a bit of head scratching with joel I eventually spotted
the problem.

ok reyk@@ jsing@@
@
text
@d1 1
a1 1
/*      $OpenBSD: if_ath_cardbus.c,v 1.10 2006/10/12 16:35:52 grange Exp $   */
a90 1
	bus_size_t sc_mapsize;		/* the size of mapped bus space region */
d154 1
a154 1
	    &sc->sc_st, &sc->sc_sh, &adr, &csc->sc_mapsize) == 0) {
d213 1
a213 1
		    sc->sc_st, sc->sc_sh, csc->sc_mapsize);
@


1.10
log
@Add a symbolic name parameter to cardbus_intr_establish().
Count cardbus devices interrupts in cbb(4) using evcount(9).

ok deraadt@@
@
text
@d1 1
a1 1
/*      $OpenBSD: if_ath_cardbus.c,v 1.9 2006/06/21 11:27:03 fkr Exp $   */
a40 2
#include "bpfilter.h"

a64 4

#if NBPFILTER > 0 
#include <net/bpf.h>
#endif 
@


1.9
log
@removal of '#ifdef rbus ... #else ...' directives, we use rbus in all
cases anyways, so we might as well remove code (the !rbus case) thats been
dead throughout the last years and just use the rbus code without ifdefs.

brad, miod "I am all for this diff"
ok deraadt, mickey
@
text
@d1 1
a1 1
/*      $OpenBSD: if_ath_cardbus.c,v 1.8 2006/01/29 20:39:37 fgsch Exp $   */
d247 1
a247 1
	    ath_intr, sc);
@


1.8
log
@remove printf on ath_cardbus_power; reyk@@ ok.
@
text
@d1 1
a1 1
/*      $OpenBSD: if_ath_cardbus.c,v 1.7 2005/09/22 10:17:04 reyk Exp $   */
a161 4
#if rbus
#else
		(*ct->ct_cf->cardbus_mem_open)(cc, 0, adr, adr+csc->sc_mapsize);
#endif
@


1.7
log
@remove the very basic ath(4) rate control implementation and use
rssadapt(9) instead. this may need some further work but now it's in
the right place and shared with other drivers (like ral(4)).

yes jsg@@
@
text
@d1 1
a1 1
/*      $OpenBSD: if_ath_cardbus.c,v 1.6 2005/09/08 12:44:56 jsg Exp $   */
a279 3

	printf("%s: ath_cardbus_power\n", sc->sc_dev.dv_xname);

@


1.6
log
@Remove the last of the FreeBSD compatiblity goop.
ok reyk@@
@
text
@d1 1
a1 1
/*      $OpenBSD: if_ath_cardbus.c,v 1.5 2005/06/08 05:36:33 henning Exp $   */
d66 1
@


1.5
log
@useless netns includes; there was no NS stuff ever here
@
text
@d1 1
a1 1
/*      $OpenBSD: if_ath_cardbus.c,v 1.4 2005/05/28 00:46:46 robert Exp $   */
a64 1
#include <net80211/ieee80211_compat.h>
@


1.4
log
@make sure to enable socket on resume.
in order for the enable to work disable the socket on suspend.

ok jsg@@, mickey@@
@
text
@d1 1
a1 1
/*      $OpenBSD: if_ath_cardbus.c,v 1.3 2005/02/16 14:29:14 aaron Exp $   */
a70 5

#ifdef NS
#include <netns/ns.h>
#include <netns/ns_if.h>
#endif
@


1.3
log
@Fix scoping error when unhooking the interrupt handler.  reyk@@ ok
@
text
@d1 1
a1 1
/*      $OpenBSD: if_ath_cardbus.c,v 1.2 2004/11/23 09:39:29 reyk Exp $   */
a284 1
	struct ath_cardbus_softc *csc = (void *) sc;
d288 2
a289 11
	if (why == PWR_RESUME) {
		/*
		 * Give the PCI configuration registers a kick
		 * in the head.
		 */
#ifdef DIAGNOSTIC
		if (ATH_IS_ENABLED(sc) == 0)
			panic("ath_cardbus_power");
#endif
		ath_cardbus_setup(csc);
	}
@


1.2
log
@support the gpio found on ath(4) devices.
ok grange@@
@
text
@d1 1
a1 1
/*      $OpenBSD: if_ath_cardbus.c,v 1.1 2004/11/02 02:45:37 reyk Exp $   */
d220 1
a220 1
	if (csc->sc_ih != NULL)
d223 1
@


1.1
log
@imported Sam Leffler's ath driver for atheros multimode wireless nics
from NetBSD and FreeBSD.

ok deraadt@@
@
text
@d1 1
a1 1
/*      $OpenBSD$   */
d52 1
a71 1

d80 1
a80 4
#include <dev/mii/miivar.h>
#include <dev/mii/mii_bitbang.h>

#include <dev/ic/athvar.h>
d88 2
d213 1
a213 1
	rv = ath_detach(sc);
@

