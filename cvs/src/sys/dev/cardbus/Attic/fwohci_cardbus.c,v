head	1.7;
access;
symbols
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.4
	SMP:1.3.0.4
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	UBC:1.1.0.4
	UBC_SYNC_B:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2005.03.05.23.58.43;	author tdeval;	state dead;
branches;
next	1.6;

1.6
date	2004.10.07.21.16.59;	author brad;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.13.01.19.14;	author brad;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.27.11.22.52;	author ho;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.13.02.15.01;	author tdeval;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2002.12.13.02.13.39;	author tdeval;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.26.15.55.33;	author tdeval;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2002.10.29.00.33.23;	author art;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2003.05.19.22.01.43;	author tedu;	state Exp;
branches;
next	;

1.3.4.1
date	2003.05.13.19.34.57;	author ho;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2004.02.19.10.56.14;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Clean up the tree from incomplete, unreliable and unsupported IEEE1394 code.
Ok deraadt@@, miod@@
@
text
@/*	$OpenBSD: fwohci_cardbus.c,v 1.6 2004/10/07 21:16:59 brad Exp $	*/
/*	$NetBSD: fwohci_cardbus.c,v 1.5 2002/01/26 16:34:28 ichiro Exp $	*/

/*
 * Copyright (c) 2000, 2001 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Matt Thomas of 3am Software Foundry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/cdefs.h>
#ifdef	__KERNEL_RCSID
__KERNEL_RCSID(0, "$NetBSD: fwohci_cardbus.c,v 1.5 2002/01/26 16:34:28 ichiro Exp $");
#endif

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/errno.h>
#include <sys/malloc.h>
#include <sys/kernel.h>
#include <sys/proc.h>
#include <sys/device.h>

#include <machine/bus.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#include <dev/cardbus/cardbusvar.h>

#include <dev/ieee1394/ieee1394reg.h>
#include <dev/ieee1394/ieee1394var.h>
#include <dev/ieee1394/fwohcireg.h>
#include <dev/ieee1394/fwohcivar.h>

struct fwohci_cardbus_softc {
	struct fwohci_softc	 sc_sc;
	cardbus_chipset_tag_t	 sc_cc;
	cardbus_function_tag_t	 sc_cf;
	cardbus_devfunc_t	 sc_ct;
	void			*sc_ih;
};

#ifdef	__NetBSD__
int fwohci_cardbus_match(struct device *, struct cfdata *, void *);
#else
int fwohci_cardbus_match(struct device *, void *, void *);
#endif
void fwohci_cardbus_attach(struct device *, struct device *, void *);
int fwohci_cardbus_detach(struct device *, int);

struct cfattach fwohci_cardbus_ca = {
	sizeof(struct fwohci_cardbus_softc), fwohci_cardbus_match,
	fwohci_cardbus_attach, fwohci_cardbus_detach, fwohci_activate
};

#define	CARDBUS_INTERFACE_OHCI		PCI_INTERFACE_OHCI
#define	CARDBUS_OHCI_MAP_REGISTER	PCI_OHCI_MAP_REGISTER
#define	CARDBUS_OHCI_CONTROL_REGISTER	PCI_OHCI_CONTROL_REGISTER
#define	CARDBUS_GLOBAL_SWAP_BE		PCI_GLOBAL_SWAP_BE
#define	cardbus_devinfo			pci_devinfo

int
#ifdef	__NetBSD__
fwohci_cardbus_match(struct device *parent, struct cfdata *match, void *aux)
#else
fwohci_cardbus_match(struct device *parent, void *match, void *aux)
#endif
{
	struct cardbus_attach_args *ca = (struct cardbus_attach_args *)aux;

	if (CARDBUS_CLASS(ca->ca_class) == CARDBUS_CLASS_SERIALBUS &&
	    CARDBUS_SUBCLASS(ca->ca_class) ==
	    CARDBUS_SUBCLASS_SERIALBUS_FIREWIRE &&
	    CARDBUS_INTERFACE(ca->ca_class) == CARDBUS_INTERFACE_OHCI)
		return (1);

	return (0);
}

void
fwohci_cardbus_attach(struct device *parent, struct device *self, void *aux)
{
	struct cardbus_attach_args *ca = aux;
	struct fwohci_cardbus_softc *sc = (struct fwohci_cardbus_softc *)self;
	cardbus_devfunc_t ct = ca->ca_ct;
	cardbus_chipset_tag_t cc = ct->ct_cc;
	cardbus_function_tag_t cf = ct->ct_cf;
	cardbusreg_t csr;
	char devinfo[256];
	const char *devname = self->dv_xname;

	cardbus_devinfo(ca->ca_id, ca->ca_class, 0, devinfo, sizeof devinfo);
	printf(": %s (rev. 0x%02x)\n", devinfo,
	    CARDBUS_REVISION(ca->ca_class));

	/* Map I/O registers */
	if (Cardbus_mapreg_map(ct, CARDBUS_OHCI_MAP_REGISTER,
	    CARDBUS_MAPREG_TYPE_MEM, 0,
	    &sc->sc_sc.sc_memt, &sc->sc_sc.sc_memh,
	    NULL, &sc->sc_sc.sc_memsize)) {
		printf("%s: can't map OHCI register space\n", devname);
		return;
	}

	sc->sc_cc = cc;
	sc->sc_cf = cf;
	sc->sc_ct = ct;
	sc->sc_sc.sc_dmat = ca->ca_dmat;

#if	rbus
#else
XXX	(ct->ct_cf->cardbus_mem_open)(cc, 0, iob, iob + 0x40);
#endif
	(ct->ct_cf->cardbus_ctrl)(cc, CARDBUS_MEM_ENABLE);
	(ct->ct_cf->cardbus_ctrl)(cc, CARDBUS_BM_ENABLE);

	/* Disable interrupts, so we don't get any spurious ones. */
	OHCI_CSR_WRITE(&sc->sc_sc, OHCI_REG_IntMaskClear,
	    OHCI_Int_MasterEnable);

	/* Enable the device. */
	csr = cardbus_conf_read(cc, cf, ca->ca_tag, CARDBUS_COMMAND_STATUS_REG);
	cardbus_conf_write(cc, cf, ca->ca_tag, CARDBUS_COMMAND_STATUS_REG,
	    csr | CARDBUS_COMMAND_MASTER_ENABLE | CARDBUS_COMMAND_MEM_ENABLE);

#if	BYTE_ORDER == BIG_ENDIAN
	csr = cardbus_conf_read(cc, cf, ca->ca_tag,
	    CARDBUS_OHCI_CONTROL_REGISTER);
	cardbus_conf_write(cc, cf, ca->ca_tag, CARDBUS_OHCI_CONTROL_REGISTER,
	    csr | CARDBUS_GLOBAL_SWAP_BE);
#endif

	sc->sc_ih = cardbus_intr_establish(cc, cf, ca->ca_intrline,
	    IPL_BIO, fwohci_intr, sc);
	if (sc->sc_ih == NULL) {
		printf("%s: couldn't establish interrupt\n", devname);
		return;
	}
	printf("%s: interrupting at %d\n", devname, ca->ca_intrline);

	/* XXX NULL should be replaced by some call to Cardbus code. */
	if (fwohci_init(&sc->sc_sc, NULL) != 0) {
		cardbus_intr_disestablish(cc, cf, sc->sc_ih);
		bus_space_unmap(sc->sc_sc.sc_memt, sc->sc_sc.sc_memh,
		    sc->sc_sc.sc_memsize);
	}
}

int
fwohci_cardbus_detach(struct device *self, int flags)
{
	struct fwohci_cardbus_softc *sc = (struct fwohci_cardbus_softc *)self;
	struct ieee1394_softc *iea;
	cardbus_devfunc_t ct = sc->sc_ct;
	int rv = 0;

	LIST_FOREACH(iea, &sc->sc_sc.sc_nodelist, sc1394_node) {
#ifdef	FWOHCI_DEBUG
		printf("%s: detach %s\n", __func__, iea->sc1394_dev.dv_xname);
#endif	/* FWOHCI_DEBUG */
		rv |= config_detach(&iea->sc1394_dev, flags);
	}

	rv |= fwohci_detach(&sc->sc_sc, flags);

	if (rv)
		return (rv);

	if (sc->sc_ih != NULL) {
		cardbus_intr_disestablish(ct->ct_cc, ct->ct_cf, sc->sc_ih);
		sc->sc_ih = NULL;
	}
	if (sc->sc_sc.sc_memsize) {
		Cardbus_mapreg_unmap(ct, CARDBUS_OHCI_MAP_REGISTER,
		    sc->sc_sc.sc_memt, sc->sc_sc.sc_memh,
		    sc->sc_sc.sc_memsize);
		sc->sc_sc.sc_memsize = 0;
	}
	return (0);
}
@


1.6
log
@cardbusdevs -> pcidevs

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: fwohci_cardbus.c,v 1.5 2003/07/13 01:19:14 brad Exp $	*/
@


1.5
log
@make this compile on big endian systems.
--
From: NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: fwohci_cardbus.c,v 1.4 2003/04/27 11:22:52 ho Exp $	*/
a62 1
#include <dev/cardbus/cardbusdevs.h>
@


1.4
log
@strcpy/sprintf cleanup of sys/dev. miod@@, deraadt@@ says to commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: fwohci_cardbus.c,v 1.3 2002/12/13 02:15:01 tdeval Exp $	*/
d91 1
d93 2
a94 1
#define	CARDBUS_INTERFACE_OHCI		PCI_INTERFACE_OHCI
@


1.3
log
@Detach fwnodes first.
Solves panics when removing the adapter while leaving the devices connected.
@
text
@d1 1
a1 1
/*	$OpenBSD: fwohci_cardbus.c,v 1.2 2002/12/13 02:13:39 tdeval Exp $	*/
d125 1
a125 1
	cardbus_devinfo(ca->ca_id, ca->ca_class, 0, devinfo);
@


1.3.4.1
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: fwohci_cardbus.c,v 1.3 2002/12/13 02:15:01 tdeval Exp $	*/
d125 1
a125 1
	cardbus_devinfo(ca->ca_id, ca->ca_class, 0, devinfo, sizeof devinfo);
@


1.3.4.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d91 1
a92 3
#define	CARDBUS_OHCI_MAP_REGISTER	PCI_OHCI_MAP_REGISTER
#define	CARDBUS_OHCI_CONTROL_REGISTER	PCI_OHCI_CONTROL_REGISTER
#define	CARDBUS_GLOBAL_SWAP_BE		PCI_GLOBAL_SWAP_BE
@


1.2
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: fwohci_cardbus.c,v 1.1 2002/06/26 15:55:33 tdeval Exp $	*/
d186 1
d188 1
a188 1
	int rv;
d190 8
a197 1
	rv = fwohci_detach(&sc->sc_sc, flags);
@


1.1
log
@cardbus fwohci support.
from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 1
a4 1
/*-
d21 2
a22 2
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
d41 1
a41 1
#ifdef __KERNEL_RCSID
d58 1
a59 1
#include <dev/pci/pcireg.h>
d71 5
a75 5
	struct fwohci_softc	sc_sc;
	cardbus_chipset_tag_t	sc_cc;
	cardbus_function_tag_t	sc_cf;
	cardbus_devfunc_t	sc_ct;
	void		       *sc_ih;
d91 3
a93 3
#define CARDBUS_OHCI_MAP_REGISTER PCI_OHCI_MAP_REGISTER
#define CARDBUS_INTERFACE_OHCI PCI_INTERFACE_OHCI
#define cardbus_devinfo pci_devinfo
a95 2
fwohci_cardbus_match(parent, match, aux)
	struct device *parent;
d97 1
a97 2
	struct cfdata *match;
	void *aux;
d99 1
a99 1
	void *match, *aux;
d105 2
a106 2
	    CARDBUS_SUBCLASS(ca->ca_class) == 
	        CARDBUS_SUBCLASS_SERIALBUS_FIREWIRE &&
d108 3
a110 3
		return 1;
 
	return 0;
d114 1
a114 3
fwohci_cardbus_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d126 2
a127 2
	printf(": %s (rev. 0x%02x)\n", devinfo, 
	       CARDBUS_REVISION(ca->ca_class));
d131 3
a133 3
	      CARDBUS_MAPREG_TYPE_MEM, 0,
	      &sc->sc_sc.sc_memt, &sc->sc_sc.sc_memh,
	      NULL, &sc->sc_sc.sc_memsize)) {
d143 1
a143 1
#if rbus
d155 1
a155 2
	csr = cardbus_conf_read(cc, cf, ca->ca_tag,
	      CARDBUS_COMMAND_STATUS_REG);
d159 1
a159 1
#if BYTE_ORDER == BIG_ENDIAN
d161 1
a161 1
	      CARDBUS_OHCI_CONTROL_REGISTER);
d167 1
a167 1
					   IPL_BIO, fwohci_intr, sc);
d174 1
a174 1
	/* XXX NULL should be replaced by some call to Cardbus code */
d183 1
a183 3
fwohci_cardbus_detach(self, flags)
	struct device *self;
	int flags;
d193 1
d197 1
a197 1
	} 
d200 2
a201 2
			sc->sc_sc.sc_memt, sc->sc_sc.sc_memh,
			sc->sc_sc.sc_memsize);
@


1.1.4.1
log
@sync to -current
@
text
@@


1.1.4.2
log
@sync
@
text
@d4 1
a4 1
/*
d21 2
a22 2
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
d41 1
a41 1
#ifdef	__KERNEL_RCSID
d58 1
a59 1
#include <dev/pci/pcivar.h>
d71 5
a75 5
	struct fwohci_softc	 sc_sc;
	cardbus_chipset_tag_t	 sc_cc;
	cardbus_function_tag_t	 sc_cf;
	cardbus_devfunc_t	 sc_ct;
	void			*sc_ih;
d91 3
a93 3
#define	CARDBUS_OHCI_MAP_REGISTER	PCI_OHCI_MAP_REGISTER
#define	CARDBUS_INTERFACE_OHCI		PCI_INTERFACE_OHCI
#define	cardbus_devinfo			pci_devinfo
d96 2
d99 2
a100 1
fwohci_cardbus_match(struct device *parent, struct cfdata *match, void *aux)
d102 1
a102 1
fwohci_cardbus_match(struct device *parent, void *match, void *aux)
d108 2
a109 2
	    CARDBUS_SUBCLASS(ca->ca_class) ==
	    CARDBUS_SUBCLASS_SERIALBUS_FIREWIRE &&
d111 3
a113 3
		return (1);

	return (0);
d117 3
a119 1
fwohci_cardbus_attach(struct device *parent, struct device *self, void *aux)
d130 3
a132 3
	cardbus_devinfo(ca->ca_id, ca->ca_class, 0, devinfo, sizeof devinfo);
	printf(": %s (rev. 0x%02x)\n", devinfo,
	    CARDBUS_REVISION(ca->ca_class));
d136 3
a138 3
	    CARDBUS_MAPREG_TYPE_MEM, 0,
	    &sc->sc_sc.sc_memt, &sc->sc_sc.sc_memh,
	    NULL, &sc->sc_sc.sc_memsize)) {
d148 1
a148 1
#if	rbus
d160 2
a161 1
	csr = cardbus_conf_read(cc, cf, ca->ca_tag, CARDBUS_COMMAND_STATUS_REG);
d165 1
a165 1
#if	BYTE_ORDER == BIG_ENDIAN
d167 1
a167 1
	    CARDBUS_OHCI_CONTROL_REGISTER);
d173 1
a173 1
	    IPL_BIO, fwohci_intr, sc);
d180 1
a180 1
	/* XXX NULL should be replaced by some call to Cardbus code. */
d189 3
a191 1
fwohci_cardbus_detach(struct device *self, int flags)
a193 1
	struct ieee1394_softc *iea;
d195 1
a195 1
	int rv = 0;
d197 1
a197 8
	LIST_FOREACH(iea, &sc->sc_sc.sc_nodelist, sc1394_node) {
#ifdef	FWOHCI_DEBUG
		printf("%s: detach %s\n", __func__, iea->sc1394_dev.dv_xname);
#endif	/* FWOHCI_DEBUG */
		rv |= config_detach(&iea->sc1394_dev, flags);
	}

	rv |= fwohci_detach(&sc->sc_sc, flags);
a200 1

d204 1
a204 1
	}
d207 2
a208 2
		    sc->sc_sc.sc_memt, sc->sc_sc.sc_memh,
		    sc->sc_sc.sc_memsize);
@


