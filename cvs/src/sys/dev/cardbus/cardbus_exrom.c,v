head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.8
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.30
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.28
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.26
	OPENBSD_5_0:1.4.0.24
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.22
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.20
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.16
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.18
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.14
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.12
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.10
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.8
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.6
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.1.0.28
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.26
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.24
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.22
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.20
	OPENBSD_3_4_BASE:1.1
	UBC_SYNC_A:1.1
	OPENBSD_3_3:1.1.0.18
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.16
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.14
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.1
	UBC:1.1.0.12
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.10
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.8
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.08.28.00.03.53;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	NdgfPIGUgJxQPnT7;

1.6
date	2014.07.12.18.48.17;	author tedu;	state Exp;
branches;
next	1.5;
commitid	I19imNlAX05zJOED;

1.5
date	2013.06.20.09.52.09;	author mpi;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.13.18.44.38;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.22.52.50;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.18.52.49;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.08.05.50.52;	author aaron;	state Exp;
branches
	1.1.8.1;
next	;

1.1.8.1
date	2001.05.14.22.23.09;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.7
log
@fairly simple sizes for free(); ok tedu
@
text
@/*	$OpenBSD: cardbus_exrom.c,v 1.6 2014/07/12 18:48:17 tedu Exp $	*/
/*	$NetBSD: cardbus_exrom.c,v 1.4 2000/02/03 06:47:31 thorpej Exp $	*/

/*
 * Copyright (c) 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to
 * The NetBSD Foundation by Johan Danielsson.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/queue.h>
#include <sys/malloc.h>

#include <machine/bus.h>

#include <dev/cardbus/cardbus_exrom.h>

#if defined(CARDBUS_DEBUG)
#define	DPRINTF(a)	printf a
#else
#define	DPRINTF(a)
#endif

#define READ_INT16(T, H, O)  \
	(bus_space_read_1((T), (H), (O)) | \
	 (bus_space_read_1((T), (H), (O) + 1) << 8))

/*
 *  A PCI ROM is divided into a number of images. Each image has two
 *  data structures, a header located at the start of the image, and a
 *  `data structure' at some offset into it.
 *
 *  The header is a 26 byte structure:
 *
 *  Offset	Length	Description
 *  0x00	   1	signature byte 1 (0x55)
 *  0x01	   1	signature byte 2 (0xAA)
 *  0x02	  22	processor architecture data
 *  0x18	   2	pointer to the data structure
 *
 *  The data structure is a 24 byte structure:
 *
 *  Offset	Length	Description
 *  0x00	   4	signature (PCIR)
 *  0x04	   2	vendor id
 *  0x06	   2	device id
 *  0x08	   2	reserved
 *  0x0A	   2	data structure length
 *  0x0C	   1	data structure revision (0)
 *  0x0D	   3	class code
 *  0x10	   2	image length (in 512 byte blocks)
 *  0x12	   2	code revision level
 *  0x14	   1	code type
 *  0x15	   1	indicator (bit 7 indicates final image)
 *  0x16	   2	reserved
 *
 */

/*
 *  Scan through a PCI expansion ROM, and create subregions for each
 *  ROM image. This function assumes that the ROM is mapped at
 *  (tag,handle), and that the expansion ROM address decoder is
 *  enabled. The PCI specification requires that no other BAR should
 *  be accessed while the ROM is enabled, so interrupts should be
 *  disabled.
 *
 * XXX This routine is way too pessimistic and returns as soon as it encounters
 * a problem, although not being able to malloc or read a particular image
 * may not prevent further images from being read successfully.
 */
int
cardbus_read_exrom(bus_space_tag_t romt, bus_space_handle_t romh,
    struct cardbus_rom_image_head *head)
{
	size_t addr = 0; /* offset of current rom image */
	size_t dataptr;
	unsigned int rom_image = 0;
	size_t image_size;
	struct cardbus_rom_image *image;
	u_int16_t val;

	SIMPLEQ_INIT(head);
	do {
		val = READ_INT16(romt, romh, addr + CARDBUS_EXROM_SIGNATURE);
		if (val != 0xaa55) {
			DPRINTF(("%s: bad header signature in ROM image "
			    "%u: 0x%04x\n", __func__, rom_image, val));
			return (1);
		}
		dataptr = addr + READ_INT16(romt, romh,
		    addr + CARDBUS_EXROM_DATA_PTR);

		/* get the ROM image size, in blocks */
		image_size = READ_INT16(romt, romh,
		    dataptr + CARDBUS_EXROM_DATA_IMAGE_LENGTH);
		/* XXX
		 * Some ROMs seem to have this as zero, can we assume
		 * this means 1 block?
		 */
		if (image_size == 0)
			image_size = 1;
		image_size <<= 9;

		image = malloc(sizeof(*image), M_DEVBUF, M_NOWAIT);
		if (image == NULL) {
			DPRINTF(("%s: out of memory\n", __func__));
			return (1);
		}
		image->rom_image = rom_image;
		image->image_size = image_size;
		image->romt = romt;
		if (bus_space_subregion(romt, romh, addr,
		    image_size, &image->romh)) {
			DPRINTF(("%s: bus_space_subregion failed", __func__));
			free(image, M_DEVBUF, sizeof(*image));
			return (1);
		}
		SIMPLEQ_INSERT_TAIL(head, image, next);
		addr += image_size;
		rom_image++;
	} while ((bus_space_read_1(romt, romh,
	    dataptr + CARDBUS_EXROM_DATA_INDICATOR) & 0x80) == 0);

	return (0);
}
@


1.6
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: cardbus_exrom.c,v 1.5 2013/06/20 09:52:09 mpi Exp $	*/
d142 1
a142 1
			free(image, M_DEVBUF, 0);
@


1.5
log
@Drop 3rd and 4th clauses from the BSD licence, from the following NetBSD's
revision:
  sys/dev/acpi/asus_acpi.c		r1.4
  sys/dev/cardbus/cardbus_exrom.c	r1.11
  sys/dev/cardbus/cardbus_exrom.h	r1.6

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cardbus_exrom.c,v 1.4 2005/09/13 18:44:38 fgsch Exp $	*/
d142 1
a142 1
			free(image, M_DEVBUF);
@


1.4
log
@knf; no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: cardbus_exrom.c,v 1.3 2005/09/12 22:52:50 miod Exp $	*/
a21 3
 * 3. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.3
log
@Do not ouput anything unless option CARDBUS_DEBUG; ok fgs@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cardbus_exrom.c,v 1.2 2005/09/12 18:52:49 fgsch Exp $	*/
d111 1
a111 1
    
d116 2
a117 2
			DPRINTF(("%s: bad header signature in ROM image %u: 0x%04x\n",
			    __func__, rom_image, val));
d120 2
a121 2
		dataptr = addr +
		    READ_INT16(romt, romh, addr + CARDBUS_EXROM_DATA_PTR);
d124 1
a124 1
		image_size = READ_INT16(romt, romh, 
d130 1
a130 1
		if (image_size == 0) 
d153 1
a155 43

#if 0
struct cardbus_exrom_data_structure {
	char		signature[4];
	cardbusreg_t	id;		/* vendor & device id */
	u_int16_t	structure_length;
	u_int8_t	structure_revision;
	cardbusreg_t	class;		/* class code in upper 24 bits */
	u_int16_t	image_length;
	u_int16_t	data_revision;
	u_int8_t	code_type;
	u_int8_t	indicator;
};

int
pci_exrom_parse_data_structure(bus_space_tag_t tag,
    bus_space_handle_t handle, struct pci_exrom_data_structure *ds)
{
	unsigned char hdr[16];
	int length;

	bus_space_read_region_1(tag, handle, dataptr, hdr, sizeof(hdr));
	memcpy(header->signature, hdr + PCI_EXROM_DATA_SIGNATURE, 4);
#define LEINT16(B, O)	((B)[(O)] | ((B)[(O) + 1] << 8))
	header->id = LEINT16(hdr, PCI_EXROM_DATA_VENDOR_ID) |
	    (LEINT16(hdr, PCI_EXROM_DATA_DEVICE_ID) << 16);
	header->structure_length = LEINT16(hdr, PCI_EXROM_DATA_LENGTH);
	header->structure_rev = hdr[PCI_EXROM_DATA_REV];
	header->class = (hdr[PCI_EXROM_DATA_CLASS_CODE] << 8) |
	    (hdr[PCI_EXROM_DATA_CLASS_CODE + 1] << 16) |
	    (hdr[PCI_EXROM_DATA_CLASS_CODE + 2] << 24);
	header->image_length = LEINT16(hdr, PCI_EXROM_DATA_IMAGE_LENGTH) << 16;
	header->data_revision = LEINT16(hdr, PCI_EXROM_DATA_DATA_REV);
	header->code_type = hdr[PCI_EXROM_DATA_CODE_TYPE];
	header->indicator = hdr[PCI_EXROM_DATA_INDICATOR];

	length = min(length, header->image_length - 0x18 - offset);
	bus_space_read_region_1(tag, handle, dataptr + 0x18 + offset,
	    buf, length);

	return (length);
}
#endif
@


1.2
log
@knf plus use __func__; no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: cardbus_exrom.c,v 1.1 2000/04/08 05:50:52 aaron Exp $	*/
d48 6
d55 2
a56 1
(bus_space_read_1((T), (H), (O)) | (bus_space_read_1((T), (H), (O) + 1) << 8))
d58 2
a59 1
/*  A PCI ROM is divided into a number of images. Each image has two
d96 4
a100 1

d108 4
a111 1

a113 4
		size_t image_size;
		struct cardbus_rom_image *image;
		u_int16_t val;

d116 2
a117 2
			printf("%s: bad header signature in ROM image %u: "
			    "0x%04x\n", __func__, rom_image, val);
d120 5
a124 4
		dataptr = addr + READ_INT16(romt, romh,
		    addr + CARDBUS_EXROM_DATA_PTR);
		/* Get the ROM image size, in blocks */
		image_size = READ_INT16(romt, romh,
d126 5
a130 3
		if (image_size == 0)
			/* XXX some ROMs seem to have this as zero, can we
			   assume this means 1 block? */
d133 1
d136 1
a136 1
			printf("%s: out of memory\n", __func__);
d144 1
a144 1
			printf("%s: bus_space_subregion failed", __func__);
d159 1
a159 1
	cardbusreg_t	id;	/* vendor & device id */
d162 1
a162 1
	cardbusreg_t	class; /* class code in upper 24 bits */
d169 1
d174 2
d178 1
a178 1
#define LEINT16(B, O) ((B)[(O)] | ((B)[(O) + 1] << 8))
d190 1
d194 2
a195 1
	ret = length;
@


1.1
log
@Initial check-in for support of 32-bit CardBus PC Cards; from NetBSD. On many
machines, this code needs the new PCIBIOS* options enabled in the kernel config
file to work, but your mileage may vary. Included is a working 3c575 driver for
3Com 10/100 CardBus PC Card NICs (tested only with the 'C' revision). The 3c575
is the pccard version of the PCI EtherLink XL cards, and thus the xl driver has
been split into /sys/dev/ic.
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/* $NetBSD: cardbus_exrom.c,v 1.4 2000/02/03 06:47:31 thorpej Exp $ */
d8 1
a8 1
 * This code is derived from software contributed to 
d11 10
a20 10
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
d80 2
a81 2
   
/* 
d91 2
a92 4
cardbus_read_exrom(romt, romh, head)
     bus_space_tag_t romt;
     bus_space_handle_t romh;
     struct cardbus_rom_image_head *head;
d94 46
a139 47
    static const char func[] = "cardbus_read_exrom";

    size_t addr = 0; /* offset of current rom image */
    size_t dataptr;
    unsigned int rom_image = 0;
    
    SIMPLEQ_INIT(head);
    do {
	size_t image_size;
	struct cardbus_rom_image *image;
	u_int16_t val;

	val = READ_INT16(romt, romh, addr + CARDBUS_EXROM_SIGNATURE);
	if(val != 0xaa55) {
	    printf("%s: bad header signature in ROM image %u: 0x%04x\n", 
		   func, rom_image, val);
	    return 1;
	}
	dataptr = addr + READ_INT16(romt, romh, addr + CARDBUS_EXROM_DATA_PTR);
	/* get the ROM image size, in blocks */
	image_size = READ_INT16(romt, romh, 
		         dataptr + CARDBUS_EXROM_DATA_IMAGE_LENGTH);
	if(image_size == 0) 
	    /* XXX some ROMs seem to have this as zero, can we assume
               this means 1 block? */
	    image_size = 1;
	image_size <<= 9;
	image = malloc(sizeof(*image), M_DEVBUF, M_NOWAIT);
	if(image == NULL) {
	    printf("%s: out of memory\n", func);
	    return 1;
	}
	image->rom_image = rom_image;
	image->image_size = image_size;
	image->romt = romt;
	if(bus_space_subregion(romt, romh, addr, 
			       image_size, &image->romh)) {
	    printf("%s: bus_space_subregion failed", func);
	    free(image, M_DEVBUF);
	    return 1;
	}
	SIMPLEQ_INSERT_TAIL(head, image, next);
	addr += image_size;
	rom_image++;
    } while ((bus_space_read_1(romt, romh, 
                  dataptr + CARDBUS_EXROM_DATA_INDICATOR) & 0x80) == 0);
    return 0;
a141 1

d144 9
a152 9
    char	signature[4];
    cardbusreg_t	id; /* vendor & device id */
    u_int16_t	structure_length;
    u_int8_t	structure_revision;
    cardbusreg_t	class; /* class code in upper 24 bits */
    u_int16_t	image_length;
    u_int16_t	data_revision;
    u_int8_t	code_type;
    u_int8_t	indicator;
d156 1
a156 2
			       bus_space_handle_t handle,
			       struct pci_exrom_data_structure *ds)
d158 3
a160 3
    unsigned char hdr[16];
    bus_space_read_region_1(tag, handle, dataptr, hdr, sizeof(hdr));
    memcpy(header->signature, hdr + PCI_EXROM_DATA_SIGNATURE, 4);
d162 15
a176 15
    header->id = LEINT16(hdr, PCI_EXROM_DATA_VENDOR_ID) |
	(LEINT16(hdr, PCI_EXROM_DATA_DEVICE_ID) << 16);
    header->structure_length = LEINT16(hdr, PCI_EXROM_DATA_LENGTH);
    header->structure_rev = hdr[PCI_EXROM_DATA_REV];
    header->class = (hdr[PCI_EXROM_DATA_CLASS_CODE] << 8) |
	(hdr[PCI_EXROM_DATA_CLASS_CODE + 1] << 16) |
	(hdr[PCI_EXROM_DATA_CLASS_CODE + 2] << 24);
    header->image_length = LEINT16(hdr, PCI_EXROM_DATA_IMAGE_LENGTH) << 16;
    header->data_revision = LEINT16(hdr, PCI_EXROM_DATA_DATA_REV);
    header->code_type = hdr[PCI_EXROM_DATA_CODE_TYPE];
    header->indicator = hdr[PCI_EXROM_DATA_INDICATOR];
    length = min(length, header->image_length - 0x18 - offset);
    bus_space_read_region_1(tag, handle, dataptr + 0x18 + offset, 
			    buf, length);
    ret = length;
@


1.1.8.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: cardbus_exrom.c,v 1.1 2000/04/08 05:50:52 aaron Exp $ */
@

