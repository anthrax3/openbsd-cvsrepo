head	1.13;
access;
symbols
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.4
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.4
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.9.0.18
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.16
	OPENBSD_5_0:1.9.0.14
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.12
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.10
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.6
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.8
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.4
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.8.0.4
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.2
	SMP:1.2.0.8
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	UBC_SYNC_B:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	UBC:1.2.0.2;
locks; strict;
comment	@ * @;


1.13
date	2015.09.11.13.02.28;	author stsp;	state Exp;
branches;
next	1.12;
commitid	6vhYvh5CxZAHMnsN;

1.12
date	2014.12.22.02.28.52;	author tedu;	state Exp;
branches;
next	1.11;
commitid	yM2VFFhpDTeFQlve;

1.11
date	2013.09.24.20.11.03;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2012.12.05.23.20.21;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.26.05.42.18;	author ray;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.31.17.23.14;	author sobrado;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.02.20.00.56;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.15.21.43.23;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.25.03.50.56;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.07.15.37.07;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.24.21.54.38;	author henric;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.13.18.16.38;	author jason;	state Exp;
branches
	1.2.2.1
	1.2.8.1;
next	1.1;

1.1
date	2002.05.13.15.12.12;	author jason;	state Exp;
branches;
next	;

1.2.2.1
date	2002.06.11.03.42.29;	author art;	state Exp;
branches;
next	;

1.2.8.1
date	2004.02.19.10.56.32;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Make room for media types of the future. Extend the ifmedia word to 64 bits.
This changes numbers of the SIOCSIFMEDIA and SIOCGIFMEDIA ioctls and
grows struct ifmediareq.

Old ifconfig and dhclient binaries can still assign addresses, however
the 'media' subcommand stops working. Recompiling ifconfig and dhclient
with new headers before a reboot should not be necessary unless in very
special circumstances where non-default media settings must be used to
get link and console access is not available.

There may be some MD fallout but that will be cleared up later.

ok deraadt miod
with help and suggestions from several sharks attending l2k15
@
text
@/*	$OpenBSD: if_le_lebuffer.c,v 1.12 2014/12/22 02:28:52 tedu Exp $	*/
/*	$NetBSD: if_le_lebuffer.c,v 1.10 2002/03/11 16:00:56 pk Exp $	*/

/*-
 * Copyright (c) 1997, 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Charles M. Hannum; Jason R. Thorpe of the Numerical Aerospace
 * Simulation Facility, NASA Ames Research Center; Paul Kranenburg.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "bpfilter.h"

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/syslog.h>
#include <sys/socket.h>
#include <sys/device.h>
#include <sys/malloc.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <machine/bus.h>
#include <machine/intr.h>
#include <machine/autoconf.h>

#include <dev/sbus/sbusvar.h>
#include <dev/sbus/lebuffervar.h>

#include <dev/ic/lancereg.h>
#include <dev/ic/lancevar.h>
#include <dev/ic/am7990reg.h>
#include <dev/ic/am7990var.h>

/*
 * LANCE registers.
 */
#define LEREG1_RDP	0	/* Register Data port */
#define LEREG1_RAP	2	/* Register Address port */

struct	le_softc {
	struct	am7990_softc	sc_am7990;	/* glue to MI code */
	bus_space_tag_t		sc_bustag;
	bus_dma_tag_t		sc_dmatag;
	bus_space_handle_t	sc_reg;		/* LANCE registers */
};


int	lematch_lebuffer(struct device *, void *, void *);
void	leattach_lebuffer(struct device *, struct device *, void *);

/*
 * Media types supported.
 */
static uint64_t lemedia[] = {
	IFM_ETHER | IFM_10_T
};

struct cfattach le_lebuffer_ca = {
	sizeof(struct le_softc), lematch_lebuffer, leattach_lebuffer
};

extern struct cfdriver le_cd;

struct cfdriver lebuffer_cd = {
	NULL, "lebuffer", DV_DULL
};

void le_lebuffer_wrcsr(struct lance_softc *, uint16_t, uint16_t);
uint16_t le_lebuffer_rdcsr(struct lance_softc *, uint16_t);

void
le_lebuffer_wrcsr(struct lance_softc *sc, uint16_t port, uint16_t val)
{
	struct le_softc *lesc = (struct le_softc *)sc;

	bus_space_write_2(lesc->sc_bustag, lesc->sc_reg, LEREG1_RAP, port);
	bus_space_barrier(lesc->sc_bustag, lesc->sc_reg, LEREG1_RAP, 2,
	    BUS_SPACE_BARRIER_WRITE);
	bus_space_write_2(lesc->sc_bustag, lesc->sc_reg, LEREG1_RDP, val);
	bus_space_barrier(lesc->sc_bustag, lesc->sc_reg, LEREG1_RDP, 2,
	    BUS_SPACE_BARRIER_WRITE);

#if defined(SUN4M)
	/*
	 * We need to flush the SBus->MBus write buffers. This can most
	 * easily be accomplished by reading back the register that we
	 * just wrote (thanks to Chris Torek for this solution).
	 */
	if (CPU_ISSUN4M) {
		volatile uint16_t discard;
		discard = bus_space_read_2(lesc->sc_bustag, lesc->sc_reg,
		    LEREG1_RDP);
	}
#endif
}

uint16_t
le_lebuffer_rdcsr(struct lance_softc *sc, uint16_t port)
{
	struct le_softc *lesc = (struct le_softc *)sc;

	bus_space_write_2(lesc->sc_bustag, lesc->sc_reg, LEREG1_RAP, port);
	bus_space_barrier(lesc->sc_bustag, lesc->sc_reg, LEREG1_RAP, 2,
	    BUS_SPACE_BARRIER_WRITE);
	return (bus_space_read_2(lesc->sc_bustag, lesc->sc_reg, LEREG1_RDP));
}

int
lematch_lebuffer(struct device *parent, void *vcf, void *aux)
{
	struct sbus_attach_args *sa = aux;
	struct cfdata *cf = vcf;

	return (strcmp(cf->cf_driver->cd_name, sa->sa_name) == 0);
}


void
leattach_lebuffer(struct device *parent, struct device *self, void *aux)
{
	struct sbus_attach_args *sa = aux;
	struct le_softc *lesc = (struct le_softc *)self;
	struct lance_softc *sc = &lesc->sc_am7990.lsc;
	struct lebuf_softc *lebuf = (struct lebuf_softc *)parent;
	/* XXX the following declarations should be elsewhere */
	extern void myetheraddr(u_char *);

	lesc->sc_bustag = sa->sa_bustag;
	lesc->sc_dmatag = sa->sa_dmatag;

	if (sbus_bus_map(sa->sa_bustag,
	    sa->sa_slot, sa->sa_offset, sa->sa_size,
	    0, 0, &lesc->sc_reg)) {
		printf(": cannot map registers\n");
		return;
	}

	sc->sc_mem = lebuf->sc_buffer;
	sc->sc_memsize = lebuf->sc_bufsiz;
	sc->sc_addr = 0; /* Lance view is offset by buffer location */
	lebuf->attached = 1;

	/* That old black magic... */
	sc->sc_conf3 = getpropint(sa->sa_node, "busmaster-regval",
	    LE_C3_BSWP | LE_C3_ACON | LE_C3_BCON);

	myetheraddr(sc->sc_arpcom.ac_enaddr);

	sc->sc_supmedia = lemedia;
	sc->sc_nsupmedia = nitems(lemedia);
	sc->sc_defaultmedia = sc->sc_supmedia[sc->sc_nsupmedia - 1];

	sc->sc_copytodesc = lance_copytobuf_contig;
	sc->sc_copyfromdesc = lance_copyfrombuf_contig;
	sc->sc_copytobuf = lance_copytobuf_contig;
	sc->sc_copyfrombuf = lance_copyfrombuf_contig;
	sc->sc_zerobuf = lance_zerobuf_contig;

	sc->sc_rdcsr = le_lebuffer_rdcsr;
	sc->sc_wrcsr = le_lebuffer_wrcsr;

	am7990_config(&lesc->sc_am7990);

	/* Establish interrupt handler */
	if (sa->sa_nintr != 0)
		(void)bus_intr_establish(lesc->sc_bustag, sa->sa_pri,
		    IPL_NET, 0, am7990_intr, sc, self->dv_xname);
}
@


1.12
log
@unifdef INET
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_lebuffer.c,v 1.11 2013/09/24 20:11:03 miod Exp $	*/
d82 1
a82 1
static int lemedia[] = {
@


1.11
log
@Sync the MI LANCE code ( le(4) ) with NetBSD, except for the following:
- the am7990_get() - now lance_get() - is unchanged.
- the interrupt acknowledge logic is unchanged, and will disable interrupts,
  then acknowledge all interrupt conditions.

Add ILACC (79900) support (from NetBSD).

Both LANCE (am7990.c) and ILACC (am79900.c) code share as much common code
(lance.c) as possible. This affects all le(4) attachments, but the changes
are mostly mechanical, to split am7990-specific parts from lance-agnostic
parts.

Compile tested on all affected platforms. Tested on alpha, hp300, luna88k,
mvme88k, sparc, sparc64 and vax.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_lebuffer.c,v 1.10 2012/12/05 23:20:21 deraadt Exp $	*/
a46 1
#ifdef INET
a48 1
#endif
@


1.10
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_lebuffer.c,v 1.9 2008/06/26 05:42:18 ray Exp $	*/
d59 2
d81 7
d98 2
a99 2
void le_lebuffer_wrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
u_int16_t le_lebuffer_rdcsr(struct am7990_softc *, u_int16_t);
d102 1
a102 1
le_lebuffer_wrcsr(struct am7990_softc *sc, u_int16_t port, u_int16_t val)
d120 1
a120 1
		volatile u_int16_t discard;
d127 2
a128 2
u_int16_t
le_lebuffer_rdcsr(struct am7990_softc *sc, u_int16_t port)
d153 1
a153 1
	struct am7990_softc *sc = &lesc->sc_am7990;
d179 9
a187 5
	sc->sc_copytodesc = am7990_copytobuf_contig;
	sc->sc_copyfromdesc = am7990_copyfrombuf_contig;
	sc->sc_copytobuf = am7990_copytobuf_contig;
	sc->sc_copyfrombuf = am7990_copyfrombuf_contig;
	sc->sc_zerobuf = am7990_zerobuf_contig;
@


1.9
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_lebuffer.c,v 1.8 2007/05/31 17:23:14 sobrado Exp $	*/
a35 1
#include <sys/cdefs.h>
@


1.8
log
@use the right capitalization for `MBus' and `SBus'

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_lebuffer.c,v 1.7 2006/06/02 20:00:56 miod Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.7
log
@sbus_establish() and the associated linked list in the sbus softc is now only
used to store a per-device reset callback, for use in sbusreset(). Except
sbusreset() has never, ever, been used since Torek's sbus code went in.
Time to recycle those wasted bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_lebuffer.c,v 1.6 2006/05/15 21:43:23 miod Exp $	*/
d114 1
a114 1
	 * We need to flush the Sbus->Mbus write buffers. This can most
@


1.6
log
@Sprinkle bus_space_barrier()s after LANCE register writes, as already done
in if_le.c; ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_lebuffer.c,v 1.5 2003/07/25 03:50:56 jason Exp $	*/
a77 1
	struct	sbusdev		sc_sd;		/* sbus device */
a174 4

	/* Assume SBus is grandparent */
	lesc->sc_sd.sd_reset = (void *)am7990_reset;
	sbus_establish(&lesc->sc_sd, parent);
@


1.5
log
@remove extra arg to printf
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_lebuffer.c,v 1.4 2003/07/07 15:37:07 jason Exp $	*/
d107 2
d110 2
d133 2
@


1.4
log
@ansify and remove statics
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_lebuffer.c,v 1.3 2003/06/24 21:54:38 henric Exp $	*/
d158 1
a158 1
		printf(": cannot map registers\n", self->dv_xname);
@


1.3
log
@Add a "where" argument to the sparc64 interrupt code.  This lets us
associate a name with each interrupt handler.  This is not visible
outside the kernel (yet).

ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_lebuffer.c,v 1.2 2002/05/13 18:16:38 jason Exp $	*/
d98 2
a99 2
static void lewrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
static u_int16_t lerdcsr(struct am7990_softc *, u_int16_t);
d101 2
a102 4
static void
lewrcsr(sc, port, val)
	struct am7990_softc *sc;
	u_int16_t port, val;
d123 2
a124 4
static u_int16_t
lerdcsr(sc, port)
	struct am7990_softc *sc;
	u_int16_t port;
d133 1
a133 4
lematch_lebuffer(parent, vcf, aux)
	struct device *parent;
	void *vcf;
	void *aux;
d143 1
a143 3
leattach_lebuffer(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d183 2
a184 2
	sc->sc_rdcsr = lerdcsr;
	sc->sc_wrcsr = lewrcsr;
@


1.2
log
@un-pee and KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_lebuffer.c,v 1.1 2002/05/13 15:12:12 jason Exp $	*/
d200 1
a200 1
		    IPL_NET, 0, am7990_intr, sc);
@


1.2.8.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d98 2
a99 2
void le_lebuffer_wrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
u_int16_t le_lebuffer_rdcsr(struct am7990_softc *, u_int16_t);
d101 4
a104 2
void
le_lebuffer_wrcsr(struct am7990_softc *sc, u_int16_t port, u_int16_t val)
d125 4
a128 2
u_int16_t
le_lebuffer_rdcsr(struct am7990_softc *sc, u_int16_t port)
d137 4
a140 1
lematch_lebuffer(struct device *parent, void *vcf, void *aux)
d150 3
a152 1
leattach_lebuffer(struct device *parent, struct device *self, void *aux)
d167 1
a167 1
		printf(": cannot map registers\n");
d192 2
a193 2
	sc->sc_rdcsr = le_lebuffer_rdcsr;
	sc->sc_wrcsr = le_lebuffer_wrcsr;
d200 1
a200 1
		    IPL_NET, 0, am7990_intr, sc, self->dv_xname);
@


1.2.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1
log
@From netbsd:
driver for le at lebuffer type devices
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d85 2
a86 2
int	lematch_lebuffer __P((struct device *, void *, void *));
void	leattach_lebuffer __P((struct device *, struct device *, void *));
d94 3
a96 11
#if defined(_KERNEL_OPT)
#include "opt_ddb.h"
#endif

#ifdef DDB
#define	integrate
#define hide
#else
#define	integrate	static __inline
#define hide		static
#endif
d98 2
a99 2
static void lewrcsr __P((struct am7990_softc *, u_int16_t, u_int16_t));
static u_int16_t lerdcsr __P((struct am7990_softc *, u_int16_t));
d120 1
a120 1
					   LEREG1_RDP);
d159 1
a159 1
	extern void myetheraddr __P((u_char *));
d165 3
a167 5
			 sa->sa_slot,
			 sa->sa_offset,
			 sa->sa_size,
			 0, 0, &lesc->sc_reg)) {
		printf("%s @@ lebuffer: cannot map registers\n", self->dv_xname);
d178 1
a178 1
				  LE_C3_BSWP | LE_C3_ACON | LE_C3_BCON);
d200 1
a200 1
					 IPL_NET, 0, am7990_intr, sc);
a201 4

struct cfdriver lebuffer_cd = {
	NULL, "lebuffer", DV_DULL
};
@

