head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.10
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.8
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.4
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.6
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.14.0.22
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.20
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.18
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.16
	OPENBSD_5_0:1.14.0.14
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.12
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.10
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.6
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.8
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.4
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.2
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.13.0.4
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.2
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.7
	UBC:1.5.0.6
	UBC_BASE:1.5
	SMP:1.5.0.4
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5;
locks; strict;
comment	@ * @;


1.17
date	2015.09.11.13.02.28;	author stsp;	state Exp;
branches;
next	1.16;
commitid	6vhYvh5CxZAHMnsN;

1.16
date	2014.12.22.02.28.52;	author tedu;	state Exp;
branches;
next	1.15;
commitid	yM2VFFhpDTeFQlve;

1.15
date	2013.09.24.20.11.02;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.26.05.42.18;	author ray;	state Exp;
branches;
next	1.13;

1.13
date	2007.05.31.17.23.14;	author sobrado;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.02.20.00.56;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.02.19.58.34;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2004.09.30.07.28.13;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2003.07.07.15.37.07;	author jason;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.24.21.54.38;	author henric;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.13.19.45.51;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.27.02;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.31.15.12.05;	author jason;	state Exp;
branches
	1.5.4.1
	1.5.6.1;
next	1.4;

1.4
date	2001.08.20.19.48.33;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.20.19.34.10;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.19.17.18.19;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.19.17.09.24;	author jason;	state Exp;
branches;
next	;

1.5.4.1
date	2001.10.31.03.22.49;	author nate;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2002.03.28.15.09.09;	author niklas;	state Exp;
branches;
next	1.5.4.3;

1.5.4.3
date	2003.03.28.00.38.30;	author niklas;	state Exp;
branches;
next	1.5.4.4;

1.5.4.4
date	2004.02.19.10.56.32;	author niklas;	state Exp;
branches;
next	;

1.5.6.1
date	2002.06.11.03.42.29;	author art;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Make room for media types of the future. Extend the ifmedia word to 64 bits.
This changes numbers of the SIOCSIFMEDIA and SIOCGIFMEDIA ioctls and
grows struct ifmediareq.

Old ifconfig and dhclient binaries can still assign addresses, however
the 'media' subcommand stops working. Recompiling ifconfig and dhclient
with new headers before a reboot should not be necessary unless in very
special circumstances where non-default media settings must be used to
get link and console access is not available.

There may be some MD fallout but that will be cleared up later.

ok deraadt miod
with help and suggestions from several sharks attending l2k15
@
text
@/*	$OpenBSD: if_le.c,v 1.16 2014/12/22 02:28:52 tedu Exp $	*/
/*	$NetBSD: if_le.c,v 1.17 2001/05/30 11:46:35 mrg Exp $	*/

/*-
 * Copyright (c) 1997, 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Charles M. Hannum; Jason R. Thorpe of the Numerical Aerospace
 * Simulation Facility, NASA Ames Research Center; Paul Kranenburg.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "bpfilter.h"

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/syslog.h>
#include <sys/socket.h>
#include <sys/device.h>
#include <sys/malloc.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <machine/bus.h>
#include <machine/intr.h>
#include <machine/autoconf.h>

#include <dev/sbus/sbusvar.h>
#include <dev/sbus/lebuffervar.h>	/*XXX*/

#include <dev/ic/lancereg.h>
#include <dev/ic/lancevar.h>
#include <dev/ic/am7990reg.h>
#include <dev/ic/am7990var.h>

/*
 * LANCE registers.
 */
#define LEREG1_RDP	0	/* Register Data port */
#define LEREG1_RAP	2	/* Register Address port */

struct	le_softc {
	struct	am7990_softc	sc_am7990;	/* glue to MI code */
	bus_space_tag_t		sc_bustag;
	bus_dma_tag_t		sc_dmatag;
	bus_dmamap_t		sc_dmamap;
	bus_space_handle_t	sc_reg;
};

#define MEMSIZE 0x4000		/* LANCE memory size */

int	lematch_sbus(struct device *, void *, void *);
void	leattach_sbus(struct device *, struct device *, void *);

/*
 * Media types supported.
 */
static uint64_t lemedia[] = {
	IFM_ETHER | IFM_10_5
};

struct cfattach le_sbus_ca = {
	sizeof(struct le_softc), lematch_sbus, leattach_sbus
};

void le_sbus_wrcsr(struct lance_softc *, uint16_t, uint16_t);
uint16_t le_sbus_rdcsr(struct lance_softc *, uint16_t);

void
le_sbus_wrcsr(struct lance_softc *sc, uint16_t port, uint16_t val)
{
	struct le_softc *lesc = (struct le_softc *)sc;

	bus_space_write_2(lesc->sc_bustag, lesc->sc_reg, LEREG1_RAP, port);
	bus_space_barrier(lesc->sc_bustag, lesc->sc_reg, LEREG1_RAP, 2,
	    BUS_SPACE_BARRIER_WRITE);
	bus_space_write_2(lesc->sc_bustag, lesc->sc_reg, LEREG1_RDP, val);
	bus_space_barrier(lesc->sc_bustag, lesc->sc_reg, LEREG1_RDP, 2,
	    BUS_SPACE_BARRIER_WRITE);

#if defined(SUN4M)
	/*
	 * We need to flush the SBus->MBus write buffers. This can most
	 * easily be accomplished by reading back the register that we
	 * just wrote (thanks to Chris Torek for this solution).
	 */
	if (CPU_ISSUN4M) {
		volatile uint16_t discard;
		discard = bus_space_read_2(lesc->sc_bustag, lesc->sc_reg,
		    LEREG1_RDP);
	}
#endif
}

uint16_t
le_sbus_rdcsr(struct lance_softc *sc, uint16_t port)
{
	struct le_softc *lesc = (struct le_softc *)sc;

	bus_space_write_2(lesc->sc_bustag, lesc->sc_reg, LEREG1_RAP, port);
	bus_space_barrier(lesc->sc_bustag, lesc->sc_reg, LEREG1_RAP, 2,
	    BUS_SPACE_BARRIER_WRITE);
	return (bus_space_read_2(lesc->sc_bustag, lesc->sc_reg, LEREG1_RDP));
}


int
lematch_sbus(struct device *parent, void *vcf, void *aux)
{
	struct cfdata *cf = vcf;
	struct sbus_attach_args *sa = aux;

	return (strcmp(cf->cf_driver->cd_name, sa->sa_name) == 0);
}

void
leattach_sbus(struct device *parent, struct device *self, void *aux)
{
	struct sbus_attach_args *sa = aux;
	struct le_softc *lesc = (struct le_softc *)self;
	struct lance_softc *sc = &lesc->sc_am7990.lsc;
	bus_dma_tag_t dmatag;
	/* XXX the following declarations should be elsewhere */
	extern void myetheraddr(u_char *);
	extern struct cfdriver lebuffer_cd;

	lesc->sc_bustag = sa->sa_bustag;
	lesc->sc_dmatag = dmatag = sa->sa_dmatag;

	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[0].sbr_slot,
	    sa->sa_reg[0].sbr_offset, sa->sa_reg[0].sbr_size,
	    BUS_SPACE_MAP_LINEAR, 0, &lesc->sc_reg) != 0) {
		printf(": cannot map registers\n");
		return;
	}

	/*
	 * Look for an "unallocated" lebuffer and pair it with
	 * this `le' device on the assumption that we're on
	 * a pre-historic ROM that doesn't establish le<=>lebuffer
	 * parent-child relationships.
	 */
	if (lebuffer_cd.cd_ndevs != 0) {
		struct lebuf_softc *lebuf;
		int i;

		for (i = 0; i < lebuffer_cd.cd_ndevs; i++) {
			lebuf = (struct lebuf_softc *)lebuffer_cd.cd_devs[i];
			if (lebuf == NULL || lebuf->attached != 0)
				continue;

			sc->sc_mem = lebuf->sc_buffer;
			sc->sc_memsize = lebuf->sc_bufsiz;
			/* Lance view is offset by buffer location */
			sc->sc_addr = 0;
			lebuf->attached = 1;

			/* That old black magic... */
			sc->sc_conf3 = getpropint(sa->sa_node,
			    "busmaster-regval",
			    LE_C3_BSWP | LE_C3_ACON | LE_C3_BCON);
			break;
		}
	}

	if (sc->sc_mem == 0) {
		bus_dma_segment_t seg;
		int rseg, error;

		/* Get a DMA handle */
		if ((error = bus_dmamap_create(dmatag, MEMSIZE, 1, MEMSIZE, 0,
		     BUS_DMA_NOWAIT|BUS_DMA_24BIT, &lesc->sc_dmamap)) != 0) {
			printf(": DMA map create error %d\n", error);
			return;
		}

		/* Allocate DMA buffer */
		if ((error = bus_dmamem_alloc(dmatag, MEMSIZE, 0, 0,
		     &seg, 1, &rseg, BUS_DMA_NOWAIT|BUS_DMA_24BIT)) != 0){
			printf(": DMA buffer allocation error %d\n", error);
			return;
		}

		/* Map DMA buffer into kernel space */
		if ((error = bus_dmamem_map(dmatag, &seg, rseg, MEMSIZE,
		     (caddr_t *)&sc->sc_mem,
		     BUS_DMA_NOWAIT|BUS_DMA_COHERENT|BUS_DMA_24BIT)) != 0) {
			printf(": DMA buffer map error %d\n", error);
			bus_dmamem_free(lesc->sc_dmatag, &seg, rseg);
			return;
		}

		/* Load DMA buffer */
		if ((error = bus_dmamap_load(dmatag, lesc->sc_dmamap, sc->sc_mem,
		    MEMSIZE, NULL, BUS_DMA_NOWAIT|BUS_DMA_COHERENT|BUS_DMA_24BIT)) != 0) {
			printf(": DMA buffer map load error %d\n", error);
			bus_dmamem_free(dmatag, &seg, rseg);
			bus_dmamem_unmap(dmatag, sc->sc_mem, MEMSIZE);
			return;
		}

		sc->sc_addr = lesc->sc_dmamap->dm_segs[0].ds_addr & 0xffffff;
		sc->sc_memsize = MEMSIZE;
		sc->sc_conf3 = LE_C3_BSWP | LE_C3_ACON | LE_C3_BCON;
	}

	myetheraddr(sc->sc_arpcom.ac_enaddr);

	sc->sc_supmedia = lemedia;
	sc->sc_nsupmedia = nitems(lemedia);
	sc->sc_defaultmedia = sc->sc_supmedia[sc->sc_nsupmedia - 1];

	sc->sc_copytodesc = lance_copytobuf_contig;
	sc->sc_copyfromdesc = lance_copyfrombuf_contig;
	sc->sc_copytobuf = lance_copytobuf_contig;
	sc->sc_copyfrombuf = lance_copyfrombuf_contig;
	sc->sc_zerobuf = lance_zerobuf_contig;

	sc->sc_rdcsr = le_sbus_rdcsr;
	sc->sc_wrcsr = le_sbus_wrcsr;

	am7990_config(&lesc->sc_am7990);

	/* Establish interrupt handler */
	if (sa->sa_nintr != 0)
		(void)bus_intr_establish(lesc->sc_bustag, sa->sa_pri,
		    IPL_NET, 0, am7990_intr, sc, self->dv_xname);
}
@


1.16
log
@unifdef INET
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.15 2013/09/24 20:11:02 miod Exp $	*/
d84 1
a84 1
static int lemedia[] = {
@


1.15
log
@Sync the MI LANCE code ( le(4) ) with NetBSD, except for the following:
- the am7990_get() - now lance_get() - is unchanged.
- the interrupt acknowledge logic is unchanged, and will disable interrupts,
  then acknowledge all interrupt conditions.

Add ILACC (79900) support (from NetBSD).

Both LANCE (am7990.c) and ILACC (am79900.c) code share as much common code
(lance.c) as possible. This affects all le(4) attachments, but the changes
are mostly mechanical, to split am7990-specific parts from lance-agnostic
parts.

Compile tested on all affected platforms. Tested on alpha, hp300, luna88k,
mvme88k, sparc, sparc64 and vax.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.14 2008/06/26 05:42:18 ray Exp $	*/
a46 1
#ifdef INET
a48 1
#endif
@


1.14
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.13 2007/05/31 17:23:14 sobrado Exp $	*/
d59 2
d86 4
d94 2
a95 2
void le_sbus_wrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
u_int16_t le_sbus_rdcsr(struct am7990_softc *, u_int16_t);
d98 1
a98 1
le_sbus_wrcsr(struct am7990_softc *sc, u_int16_t port, u_int16_t val)
d116 1
a116 1
		volatile u_int16_t discard;
d123 2
a124 2
u_int16_t
le_sbus_rdcsr(struct am7990_softc *sc, u_int16_t port)
d149 1
a149 1
	struct am7990_softc *sc = &lesc->sc_am7990;
d237 9
a245 5
	sc->sc_copytodesc = am7990_copytobuf_contig;
	sc->sc_copyfromdesc = am7990_copyfrombuf_contig;
	sc->sc_copytobuf = am7990_copytobuf_contig;
	sc->sc_copyfrombuf = am7990_copyfrombuf_contig;
	sc->sc_zerobuf = am7990_zerobuf_contig;
@


1.13
log
@use the right capitalization for `MBus' and `SBus'

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.12 2006/06/02 20:00:56 miod Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.12
log
@sbus_establish() and the associated linked list in the sbus softc is now only
used to store a per-device reset callback, for use in sbusreset(). Except
sbusreset() has never, ever, been used since Torek's sbus code went in.
Time to recycle those wasted bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.11 2006/06/02 19:58:34 miod Exp $	*/
d112 1
a112 1
	 * We need to flush the Sbus->Mbus write buffers. This can most
@


1.11
log
@When trying to find leaf lebuffer devices, to work around broken old PROMs,
walk the lebuffer_cd device list, instead of the sbus children list.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.10 2004/09/30 07:28:13 miod Exp $	*/
a76 1
	struct	sbusdev		sc_sd;		/* sbus device */
a151 1
	struct sbusdev *sd;
a193 3

	lesc->sc_sd.sd_reset = (void *)am7990_reset;
	sbus_establish(&lesc->sc_sd, &sc->sc_dev);
@


1.10
log
@Do not pretend we have set up an ifmedia structure if we did not; fixes
PR #3407 and #3661.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.9 2003/07/07 15:37:07 jason Exp $	*/
d156 1
a156 1

d174 21
a194 19
	for (sd = ((struct sbus_softc *)parent)->sc_sbdev; sd != NULL;
	     sd = sd->sd_bchain) {
		struct lebuf_softc *lebuf = (struct lebuf_softc *)sd->sd_dev;

		if (strncmp("lebuffer", sd->sd_dev->dv_xname, 8) != 0)
			continue;

		if (lebuf->attached != 0)
			continue;

		sc->sc_mem = lebuf->sc_buffer;
		sc->sc_memsize = lebuf->sc_bufsiz;
		sc->sc_addr = 0; /* Lance view is offset by buffer location */
		lebuf->attached = 1;

		/* That old black magic... */
		sc->sc_conf3 = getpropint(sa->sa_node,
		    "busmaster-regval", LE_C3_BSWP | LE_C3_ACON | LE_C3_BCON);
		break;
@


1.9
log
@ansify and remove statics
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.8 2003/06/24 21:54:38 henric Exp $	*/
a239 2

	sc->sc_hasifmedia = 1;
@


1.8
log
@Add a "where" argument to the sparc64 interrupt code.  This lets us
associate a name with each interrupt handler.  This is not visible
outside the kernel (yet).

ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.7 2002/05/13 19:45:51 jason Exp $	*/
d96 2
a97 2
static void lewrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
static u_int16_t lerdcsr(struct am7990_softc *, u_int16_t);
d99 2
a100 4
static void
lewrcsr(sc, port, val)
	struct am7990_softc *sc;
	u_int16_t port, val;
d125 2
a126 4
static u_int16_t
lerdcsr(sc, port)
	struct am7990_softc *sc;
	u_int16_t port;
d138 1
a138 4
lematch_sbus(parent, vcf, aux)
	struct device *parent;
	void *vcf;
	void *aux;
d147 1
a147 3
leattach_sbus(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d249 2
a250 2
	sc->sc_rdcsr = lerdcsr;
	sc->sc_wrcsr = lewrcsr;
@


1.7
log
@- Request 24bit dvma allocation if we fail to find an lebuffer to attach to
- add bus_space_barrier's to the csr read/write functions
- KNF and other cleaning
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.6 2002/03/14 01:27:02 millert Exp $	*/
d266 1
a266 1
		    IPL_NET, 0, am7990_intr, sc);
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.5 2001/08/31 15:12:05 jason Exp $	*/
a95 10
extern struct cfdriver le_cd;

#ifdef DDB
#define	integrate
#define hide
#else
#define	integrate	static __inline
#define hide		static
#endif

d107 2
d110 2
d122 1
a122 1
					   LEREG1_RDP);
d135 2
d170 4
a173 7
	if (sbus_bus_map(sa->sa_bustag,
			 sa->sa_slot,
			 sa->sa_offset,
			 sa->sa_size,
			 BUS_SPACE_MAP_LINEAR,
			 0, &lesc->sc_reg) != 0) {
		printf("%s @@ sbus: cannot map registers\n", self->dv_xname);
a184 1

d200 1
a200 2
					  "busmaster-regval",
					  LE_C3_BSWP | LE_C3_ACON | LE_C3_BCON);
a210 4
#ifndef BUS_DMA_24BIT
/* XXX - This flag is not defined on all archs */
#define BUS_DMA_24BIT	0
#endif
d213 2
a214 4
						BUS_DMA_NOWAIT|BUS_DMA_24BIT,
						&lesc->sc_dmamap)) != 0) {
			printf("%s: DMA map create error %d\n",
				self->dv_xname, error);
d220 2
a221 4
					 &seg, 1, &rseg,
					 BUS_DMA_NOWAIT|BUS_DMA_24BIT)) != 0){
			printf("%s: DMA buffer allocation error %d\n",
				self->dv_xname, error);
d227 3
a229 4
				       (caddr_t *)&sc->sc_mem,
				       BUS_DMA_NOWAIT|BUS_DMA_COHERENT)) != 0) {
			printf("%s: DMA buffer map error %d\n",
				self->dv_xname, error);
d236 2
a237 3
		    MEMSIZE, NULL, BUS_DMA_NOWAIT|BUS_DMA_COHERENT)) != 0) {
			printf("%s: DMA buffer map load error %d\n",
				self->dv_xname, error);
d266 1
a266 1
					 IPL_NET, 0, am7990_intr, sc);
@


1.5
log
@implement autoconf mechanism using device_register(); from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.4 2001/08/20 19:48:33 jason Exp $	*/
d86 2
a87 2
int	lematch_sbus __P((struct device *, void *, void *));
void	leattach_sbus __P((struct device *, struct device *, void *));
d106 2
a107 2
static void lewrcsr __P((struct am7990_softc *, u_int16_t, u_int16_t));
static u_int16_t lerdcsr __P((struct am7990_softc *, u_int16_t));
d168 1
a168 1
	extern void myetheraddr __P((u_char *));
@


1.5.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.5 2001/08/31 15:12:05 jason Exp $	*/
d86 2
a87 2
int	lematch_sbus(struct device *, void *, void *);
void	leattach_sbus(struct device *, struct device *, void *);
d96 12
a107 2
static void lewrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
static u_int16_t lerdcsr(struct am7990_softc *, u_int16_t);
a116 2
	bus_space_barrier(lesc->sc_bustag, lesc->sc_reg, LEREG1_RAP, 2,
	    BUS_SPACE_BARRIER_WRITE);
a117 2
	bus_space_barrier(lesc->sc_bustag, lesc->sc_reg, LEREG1_RDP, 2,
	    BUS_SPACE_BARRIER_WRITE);
d128 1
a128 1
		    LEREG1_RDP);
a140 2
	bus_space_barrier(lesc->sc_bustag, lesc->sc_reg, LEREG1_RAP, 2,
	    BUS_SPACE_BARRIER_WRITE);
d168 1
a168 1
	extern void myetheraddr(u_char *);
d174 7
a180 4
	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[0].sbr_slot,
	    sa->sa_reg[0].sbr_offset, sa->sa_reg[0].sbr_size,
	    BUS_SPACE_MAP_LINEAR, 0, &lesc->sc_reg) != 0) {
		printf(": cannot map registers\n");
d192 1
d208 2
a209 1
		    "busmaster-regval", LE_C3_BSWP | LE_C3_ACON | LE_C3_BCON);
d220 4
d226 4
a229 2
		     BUS_DMA_NOWAIT|BUS_DMA_24BIT, &lesc->sc_dmamap)) != 0) {
			printf(": DMA map create error %d\n", error);
d235 4
a238 2
		     &seg, 1, &rseg, BUS_DMA_NOWAIT|BUS_DMA_24BIT)) != 0){
			printf(": DMA buffer allocation error %d\n", error);
d244 4
a247 3
		     (caddr_t *)&sc->sc_mem,
		     BUS_DMA_NOWAIT|BUS_DMA_COHERENT|BUS_DMA_24BIT)) != 0) {
			printf(": DMA buffer map error %d\n", error);
d254 3
a256 2
		    MEMSIZE, NULL, BUS_DMA_NOWAIT|BUS_DMA_COHERENT|BUS_DMA_24BIT)) != 0) {
			printf(": DMA buffer map load error %d\n", error);
d285 1
a285 1
		    IPL_NET, 0, am7990_intr, sc);
@


1.5.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.5.4.2
log
@Merge in -current from roughly a week ago
@
text
@d86 2
a87 2
int	lematch_sbus(struct device *, void *, void *);
void	leattach_sbus(struct device *, struct device *, void *);
d106 2
a107 2
static void lewrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
static u_int16_t lerdcsr(struct am7990_softc *, u_int16_t);
d168 1
a168 1
	extern void myetheraddr(u_char *);
@


1.5.4.3
log
@Sync the SMP branch with 3.3
@
text
@d96 10
a116 2
	bus_space_barrier(lesc->sc_bustag, lesc->sc_reg, LEREG1_RAP, 2,
	    BUS_SPACE_BARRIER_WRITE);
a117 2
	bus_space_barrier(lesc->sc_bustag, lesc->sc_reg, LEREG1_RDP, 2,
	    BUS_SPACE_BARRIER_WRITE);
d128 1
a128 1
		    LEREG1_RDP);
a140 2
	bus_space_barrier(lesc->sc_bustag, lesc->sc_reg, LEREG1_RAP, 2,
	    BUS_SPACE_BARRIER_WRITE);
d174 7
a180 4
	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[0].sbr_slot,
	    sa->sa_reg[0].sbr_offset, sa->sa_reg[0].sbr_size,
	    BUS_SPACE_MAP_LINEAR, 0, &lesc->sc_reg) != 0) {
		printf(": cannot map registers\n");
d192 1
d208 2
a209 1
		    "busmaster-regval", LE_C3_BSWP | LE_C3_ACON | LE_C3_BCON);
d220 4
d226 4
a229 2
		     BUS_DMA_NOWAIT|BUS_DMA_24BIT, &lesc->sc_dmamap)) != 0) {
			printf(": DMA map create error %d\n", error);
d235 4
a238 2
		     &seg, 1, &rseg, BUS_DMA_NOWAIT|BUS_DMA_24BIT)) != 0){
			printf(": DMA buffer allocation error %d\n", error);
d244 4
a247 3
		     (caddr_t *)&sc->sc_mem,
		     BUS_DMA_NOWAIT|BUS_DMA_COHERENT|BUS_DMA_24BIT)) != 0) {
			printf(": DMA buffer map error %d\n", error);
d254 3
a256 2
		    MEMSIZE, NULL, BUS_DMA_NOWAIT|BUS_DMA_COHERENT|BUS_DMA_24BIT)) != 0) {
			printf(": DMA buffer map load error %d\n", error);
d285 1
a285 1
		    IPL_NET, 0, am7990_intr, sc);
@


1.5.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d96 2
a97 2
void le_sbus_wrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
u_int16_t le_sbus_rdcsr(struct am7990_softc *, u_int16_t);
d99 4
a102 2
void
le_sbus_wrcsr(struct am7990_softc *sc, u_int16_t port, u_int16_t val)
d127 4
a130 2
u_int16_t
le_sbus_rdcsr(struct am7990_softc *sc, u_int16_t port)
d142 4
a145 1
lematch_sbus(struct device *parent, void *vcf, void *aux)
d154 3
a156 1
leattach_sbus(struct device *parent, struct device *self, void *aux)
d258 2
a259 2
	sc->sc_rdcsr = le_sbus_rdcsr;
	sc->sc_wrcsr = le_sbus_wrcsr;
d266 1
a266 1
		    IPL_NET, 0, am7990_intr, sc, self->dv_xname);
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a166 1
	struct bootpath *bp;
a182 6

	bp = sa->sa_bp;
	if (bp != NULL && strcmp(bp->name, le_cd.cd_name) == 0 &&
	    ((bp->val[0] == sa->sa_slot && bp->val[1] == sa->sa_offset) ||
	    (bp->val[0] == -1 && bp->val[1] == sc->sc_dev.dv_unit)))
		bp->dev = &sc->sc_dev;
@


1.3
log
@modifications to support OpenBSD/sparc style bootpath determination
@
text
@d1 1
@


1.2
log
@remove dependence on lancereg.h/lancevar.h
@
text
@d166 1
d183 6
@


1.1
log
@enough from netbsd to get le at ledma attached
@
text
@a64 2
#include <dev/ic/lancereg.h>
#include <dev/ic/lancevar.h>
@

