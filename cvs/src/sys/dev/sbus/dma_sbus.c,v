head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.4
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.16.0.38
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.34
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.24
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.32
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.30
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.28
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.26
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.22
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.20
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.18
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.16
	OPENBSD_5_0:1.16.0.14
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.12
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.10
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.6
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.8
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.4
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.2
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.15.0.2
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.13.0.6
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.12.0.6
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.4
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.5.0.6
	UBC_BASE:1.5
	SMP:1.5.0.4
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5;
locks; strict;
comment	@ * @;


1.17
date	2017.09.08.05.36.52;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	uRv5pa9QDlZaYgwD;

1.16
date	2008.06.26.05.42.18;	author ray;	state Exp;
branches;
next	1.15;

1.15
date	2007.09.11.13.39.34;	author gilles;	state Exp;
branches;
next	1.14;

1.14
date	2007.09.10.19.49.31;	author gilles;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.02.20.00.56;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2005.03.03.01.41.45;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2003.07.03.20.36.07;	author jason;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.24.21.54.38;	author henric;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.05.12.27.03;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.17.01.29.20;	author henric;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.03.16.07;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.27.02;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.31.15.12.05;	author jason;	state Exp;
branches
	1.5.4.1
	1.5.6.1;
next	1.4;

1.4
date	2001.08.21.05.45.43;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.20.19.48.33;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.20.19.34.10;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.19.17.09.24;	author jason;	state Exp;
branches;
next	;

1.5.4.1
date	2001.10.31.03.22.49;	author nate;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2002.03.28.15.09.09;	author niklas;	state Exp;
branches;
next	1.5.4.3;

1.5.4.3
date	2003.03.28.00.38.30;	author niklas;	state Exp;
branches;
next	1.5.4.4;

1.5.4.4
date	2003.06.07.11.02.32;	author ho;	state Exp;
branches;
next	1.5.4.5;

1.5.4.5
date	2004.02.19.10.56.32;	author niklas;	state Exp;
branches;
next	;

1.5.6.1
date	2002.06.11.03.42.29;	author art;	state Exp;
branches;
next	1.5.6.2;

1.5.6.2
date	2003.05.19.22.14.42;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.17
log
@If you use sys/param.h, you don't need sys/types.h
@
text
@/*	$OpenBSD: dma_sbus.c,v 1.16 2008/06/26 05:42:18 ray Exp $	*/
/*	$NetBSD: dma_sbus.c,v 1.5 2000/07/09 20:57:42 pk Exp $ */

/*-
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Paul Kranenburg.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1994 Peter Galbavy.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/errno.h>
#include <sys/device.h>
#include <sys/malloc.h>

#include <machine/bus.h>
#include <machine/intr.h>
#include <machine/autoconf.h>

#include <dev/sbus/sbusvar.h>

#include <dev/ic/lsi64854reg.h>
#include <dev/ic/lsi64854var.h>

#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>

#include <dev/ic/ncr53c9xreg.h>
#include <dev/ic/ncr53c9xvar.h>

struct dma_softc {
	struct lsi64854_softc	sc_lsi64854;	/* base device */
};

int	dmamatch_sbus(struct device *, void *, void *);
void	dmaattach_sbus(struct device *, struct device *, void *);

int	dmaprint_sbus(void *, const char *);

void	*dmabus_intr_establish(
		bus_space_tag_t,
		bus_space_tag_t,
		int,			/*bus interrupt priority*/
		int,			/*`device class' level*/
		int,			/*flags*/
		int (*)(void *),	/*handler*/
		void *,			/*handler arg*/
		const char *);		/*what*/

static	bus_space_tag_t dma_alloc_bustag(struct dma_softc *sc);

struct cfattach dma_sbus_ca = {
	sizeof(struct dma_softc), dmamatch_sbus, dmaattach_sbus
};

struct cfattach ledma_ca = {
	sizeof(struct dma_softc), dmamatch_sbus, dmaattach_sbus
};

struct cfdriver ledma_cd = {
	NULL, "ledma", DV_DULL
};

struct cfdriver dma_cd = {
	NULL, "dma", DV_DULL
};

int
dmaprint_sbus(void *aux, const char *busname)
{
	struct sbus_attach_args *sa = aux;
	bus_space_tag_t t = sa->sa_bustag;
	struct dma_softc *sc = t->cookie;

	sa->sa_bustag = sc->sc_lsi64854.sc_bustag;	/* XXX */
	sbus_print(aux, busname);	/* XXX */
	sa->sa_bustag = t;		/* XXX */
	return (UNCONF);
}

int
dmamatch_sbus(struct device *parent, void *vcf, void *aux)
{
	struct cfdata *cf = vcf;
	struct sbus_attach_args *sa = aux;

	return (strcmp(cf->cf_driver->cd_name, sa->sa_name) == 0 ||
		strcmp("espdma", sa->sa_name) == 0);
}

void
dmaattach_sbus(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct sbus_attach_args *sa = aux;
	struct dma_softc *dsc = (void *)self;
	struct lsi64854_softc *sc = &dsc->sc_lsi64854;
	bus_space_handle_t bh;
	bus_space_tag_t sbt;
	int sbusburst, burst;
	int node;

	node = sa->sa_node;

	sc->sc_bustag = sa->sa_bustag;
	sc->sc_dmatag = sa->sa_dmatag;

	/* Map registers */
	if (sa->sa_npromvaddrs != 0) {
		if (sbus_bus_map(sa->sa_bustag, 0, 
		    sa->sa_promvaddrs[0],
		    sa->sa_size,		/* ???? */
		    BUS_SPACE_MAP_PROMADDRESS,
		    0, &bh) != 0) {
			printf("%s: cannot map registers\n", self->dv_xname);
			return;
		}
	} else if (sbus_bus_map(sa->sa_bustag, sa->sa_slot,
	    sa->sa_offset,
	    sa->sa_size,
	    0, 0, &bh) != 0) {
		printf("%s: cannot map registers\n", self->dv_xname);
		return;
	}
	sc->sc_regs = bh;

	/*
	 * Get transfer burst size from PROM and plug it into the
	 * controller registers. This is needed on the Sun4m; do
	 * others need it too?
	 */
	sbusburst = ((struct sbus_softc *)parent)->sc_burst;
	if (sbusburst == 0)
		sbusburst = SBUS_BURST_32 - 1; /* 1->16 */

	burst = getpropint(node,"burst-sizes", -1);
	if (burst == -1)
		/* take SBus burst sizes */
		burst = sbusburst;

	/* Clamp at parent's burst sizes */
	burst &= sbusburst;
	sc->sc_burst = (burst & SBUS_BURST_32) ? 32 :
		       (burst & SBUS_BURST_16) ? 16 : 0;

	if (sc->sc_dev.dv_cfdata->cf_attach == &ledma_ca) {
		char *cabletype;
		u_int32_t csr;
		/*
		 * Check to see which cable type is currently active and
		 * set the appropriate bit in the ledma csr so that it
		 * gets used. If we didn't netboot, the PROM won't have
		 * the "cable-selection" property; default to TP and then
		 * the user can change it via a "media" option to ifconfig.
		 */
		cabletype = getpropstring(node, "cable-selection");
		csr = L64854_GCSR(sc);
		if (strcmp(cabletype, "tpe") == 0) {
			csr |= E_TP_AUI;
		} else if (strcmp(cabletype, "aui") == 0) {
			csr &= ~E_TP_AUI;
		} else {
			/* assume TP if nothing there */
			csr |= E_TP_AUI;
		}
		L64854_SCSR(sc, csr);
		delay(20000);	/* manual says we need a 20ms delay */
		sc->sc_channel = L64854_CHANNEL_ENET;
	} else {
		sc->sc_channel = L64854_CHANNEL_SCSI;
	}

	sbt = dma_alloc_bustag(dsc);
	if (lsi64854_attach(sc) != 0)
		return;

	/* Attach children */
	for (node = firstchild(sa->sa_node); node; node = nextsibling(node)) {
		struct sbus_attach_args sa;
		sbus_setup_attach_args((struct sbus_softc *)parent,
				       sbt, sc->sc_dmatag, node, &sa);
		(void) config_found(&sc->sc_dev, (void *)&sa, dmaprint_sbus);
		sbus_destroy_attach_args(&sa);
	}
}

void *
dmabus_intr_establish(
	bus_space_tag_t t,
	bus_space_tag_t t0,
	int pri,
	int level,
	int flags,
	int (*handler)(void *),
	void *arg,
	const char *what)
{
	struct lsi64854_softc *sc = t->cookie;

	/* XXX - for now only le; do esp later */
	if (sc->sc_channel == L64854_CHANNEL_ENET) {
		sc->sc_intrchain = handler;
		sc->sc_intrchainarg = arg;
		handler = lsi64854_enet_intr;
		arg = sc;
	}

	for (t = t->parent; t; t = t->parent) {
		if (t->sparc_intr_establish != NULL)
			return ((*t->sparc_intr_establish)
				(t, t0, pri, level, flags, handler, arg, what));

	}

	panic("dmabus_intr_establish: no handler found");

	return (NULL);
}

bus_space_tag_t
dma_alloc_bustag(struct dma_softc *sc)
{
	struct sparc_bus_space_tag *sbt;

	sbt = malloc(sizeof(*sbt), M_DEVBUF, M_NOWAIT | M_ZERO);
	if (sbt == NULL)
		return (NULL);

	sbt->cookie = sc;
	sbt->parent = sc->sc_lsi64854.sc_bustag;
	sbt->asi = sbt->parent->asi;
	sbt->sasi = sbt->parent->sasi;
	sbt->sparc_intr_establish = dmabus_intr_establish;
	return (sbt);
}
@


1.16
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_sbus.c,v 1.15 2007/09/11 13:39:34 gilles Exp $	*/
a56 1
#include <sys/types.h>
@


1.15
log
@KNF

prompted and "much better" by marco@@, ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_sbus.c,v 1.14 2007/09/10 19:49:31 gilles Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.14
log
@more MALLOC/FREE -> malloc/free and M_ZERO changes

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_sbus.c,v 1.13 2006/06/02 20:00:56 miod Exp $	*/
d282 1
a282 1
	sbt = malloc(sizeof(*sbt), M_DEVBUF, M_NOWAIT|M_ZERO);
@


1.13
log
@sbus_establish() and the associated linked list in the sbus softc is now only
used to store a per-device reset callback, for use in sbusreset(). Except
sbusreset() has never, ever, been used since Torek's sbus code went in.
Time to recycle those wasted bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_sbus.c,v 1.12 2005/03/03 01:41:45 miod Exp $	*/
d282 1
a282 1
	sbt = malloc(sizeof(*sbt), M_DEVBUF, M_NOWAIT);
a285 1
	bzero(sbt, sizeof *sbt);
@


1.12
log
@Do not let dma attach children if it could not initialize properly.
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_sbus.c,v 1.11 2003/07/03 20:36:07 jason Exp $	*/
a88 1
	struct sbusdev	sc_sd;			/* sbus device */
a229 1
	sbus_establish(&dsc->sc_sd, &sc->sc_dev);
@


1.11
log
@ansify
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_sbus.c,v 1.10 2003/06/24 21:54:38 henric Exp $	*/
d233 2
a234 1
	lsi64854_attach(sc);
@


1.10
log
@Add a "where" argument to the sparc64 interrupt code.  This lets us
associate a name with each interrupt handler.  This is not visible
outside the kernel (yet).

ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_sbus.c,v 1.9 2003/06/05 12:27:03 deraadt Exp $	*/
d126 1
a126 3
dmaprint_sbus(aux, busname)
	void *aux;
	const char *busname;
d139 1
a139 4
dmamatch_sbus(parent, vcf, aux)
	struct device *parent;
	void *vcf;
	void *aux;
d279 1
a279 2
dma_alloc_bustag(sc)
	struct dma_softc *sc;
@


1.9
log
@3/4 knockout for peter galbavy
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_sbus.c,v 1.8 2003/02/17 01:29:20 henric Exp $	*/
d104 2
a105 1
		void *);		/*handler arg*/
d258 2
a259 1
	void *arg)
d274 1
a274 1
				(t, t0, pri, level, flags, handler, arg));
d277 2
@


1.8
log
@
Add support for the Sun Enterprise 450
Reduce the size of a GENERIC kernel by ~190k
Remove the nasty pointer/bus_space_handle_t casts
Adds debug bus_space code including the ability to trace
    bus operations (it actually works now).

The following rules are now followed (and verfified by the debug
code):

1.  A "bus_space_handle_t" may only be used with the
    "bus_space_tag_t" that created it.
2.  Only "bus_space_map()" may create "bus_space_handle_t"s.
3.  A "bus_space_handle_t" may not be modified after it has
    been created (other than being destroyed by "bus_space_unmap()").


Thanks to help from mcbride, marc, jason, drahn, to anyone that might
have slipped my mind at the moment.

ok jason@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_sbus.c,v 1.7 2002/03/14 03:16:07 millert Exp $	*/
a50 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Peter Galbavy.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.7
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_sbus.c,v 1.6 2002/03/14 01:27:02 millert Exp $	*/
d104 1
d176 6
a181 7
	if (sa->sa_npromvaddrs != 0)
		sc->sc_regs = (bus_space_handle_t)sa->sa_promvaddrs[0];
	else {
		if (sbus_bus_map(sa->sa_bustag, sa->sa_slot,
				 sa->sa_offset,
				 sa->sa_size,
				 0, 0, &bh) != 0) {
d185 6
a190 1
		sc->sc_regs = bh;
d192 1
d255 8
a262 7
dmabus_intr_establish(t, pri, level, flags, handler, arg)
	bus_space_tag_t t;
	int pri;
	int level;
	int flags;
	int (*handler)(void *);
	void *arg;
d273 9
a281 2
	return (bus_intr_establish(sc->sc_bustag, pri, level, flags,
				   handler, arg));
d288 1
a288 1
	bus_space_tag_t sbt;
d290 1
a290 2
	sbt = (bus_space_tag_t)
		malloc(sizeof(struct sparc_bus_space_tag), M_DEVBUF, M_NOWAIT);
d297 2
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_sbus.c,v 1.5 2001/08/31 15:12:05 jason Exp $	*/
d102 1
a102 1
void	*dmabus_intr_establish __P((
d108 1
a108 1
		void *));		/*handler arg*/
@


1.5
log
@implement autoconf mechanism using device_register(); from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_sbus.c,v 1.4 2001/08/21 05:45:43 jason Exp $	*/
d97 2
a98 2
int	dmamatch_sbus	__P((struct device *, void *, void *));
void	dmaattach_sbus	__P((struct device *, struct device *, void *));
d100 1
a100 1
int	dmaprint_sbus	__P((void *, const char *));
d107 1
a107 1
		int (*) __P((void *)),	/*handler*/
d110 1
a110 1
static	bus_space_tag_t dma_alloc_bustag __P((struct dma_softc *sc));
d254 1
a254 1
	int (*handler) __P((void *));
@


1.5.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_sbus.c,v 1.5 2001/08/31 15:12:05 jason Exp $	*/
d97 2
a98 2
int	dmamatch_sbus(struct device *, void *, void *);
void	dmaattach_sbus(struct device *, struct device *, void *);
d100 1
a100 1
int	dmaprint_sbus(void *, const char *);
d102 1
a102 1
void	*dmabus_intr_establish(
d107 2
a108 2
		int (*)(void *),	/*handler*/
		void *);		/*handler arg*/
d110 1
a110 1
static	bus_space_tag_t dma_alloc_bustag(struct dma_softc *sc);
d254 1
a254 1
	int (*handler)(void *);
@


1.5.6.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a103 1
		bus_space_tag_t,
d175 7
a181 6
	if (sa->sa_npromvaddrs != 0) {
		if (sbus_bus_map(sa->sa_bustag, 0, 
		    sa->sa_promvaddrs[0],
		    sa->sa_size,		/* ???? */
		    BUS_SPACE_MAP_PROMADDRESS,
		    0, &bh) != 0) {
d185 1
a185 6
	} else if (sbus_bus_map(sa->sa_bustag, sa->sa_slot,
	    sa->sa_offset,
	    sa->sa_size,
	    0, 0, &bh) != 0) {
		printf("%s: cannot map registers\n", self->dv_xname);
		return;
a186 1
	sc->sc_regs = bh;
d249 7
a255 8
dmabus_intr_establish(
	bus_space_tag_t t,
	bus_space_tag_t t0,
	int pri,
	int level,
	int flags,
	int (*handler)(void *),
	void *arg)
d266 2
a267 9

	for (t = t->parent; t; t = t->parent) {
		if (t->sparc_intr_establish != NULL)
			return ((*t->sparc_intr_establish)
				(t, t0, pri, level, flags, handler, arg));

	}

	return (NULL);
d274 1
a274 1
	struct sparc_bus_space_tag *sbt;
d276 2
a277 1
	sbt = malloc(sizeof(*sbt), M_DEVBUF, M_NOWAIT);
a283 2
	sbt->asi = sbt->parent->asi;
	sbt->sasi = sbt->parent->sasi;
@


1.5.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.5.4.2
log
@Merge in -current from roughly a week ago
@
text
@d97 2
a98 2
int	dmamatch_sbus(struct device *, void *, void *);
void	dmaattach_sbus(struct device *, struct device *, void *);
d100 1
a100 1
int	dmaprint_sbus(void *, const char *);
d102 1
a102 1
void	*dmabus_intr_establish(
d107 2
a108 2
		int (*)(void *),	/*handler*/
		void *);		/*handler arg*/
d110 1
a110 1
static	bus_space_tag_t dma_alloc_bustag(struct dma_softc *sc);
d254 1
a254 1
	int (*handler)(void *);
@


1.5.4.3
log
@Sync the SMP branch with 3.3
@
text
@a103 1
		bus_space_tag_t,
d175 7
a181 6
	if (sa->sa_npromvaddrs != 0) {
		if (sbus_bus_map(sa->sa_bustag, 0, 
		    sa->sa_promvaddrs[0],
		    sa->sa_size,		/* ???? */
		    BUS_SPACE_MAP_PROMADDRESS,
		    0, &bh) != 0) {
d185 1
a185 6
	} else if (sbus_bus_map(sa->sa_bustag, sa->sa_slot,
	    sa->sa_offset,
	    sa->sa_size,
	    0, 0, &bh) != 0) {
		printf("%s: cannot map registers\n", self->dv_xname);
		return;
a186 1
	sc->sc_regs = bh;
d249 7
a255 8
dmabus_intr_establish(
	bus_space_tag_t t,
	bus_space_tag_t t0,
	int pri,
	int level,
	int flags,
	int (*handler)(void *),
	void *arg)
d266 2
a267 9

	for (t = t->parent; t; t = t->parent) {
		if (t->sparc_intr_establish != NULL)
			return ((*t->sparc_intr_establish)
				(t, t0, pri, level, flags, handler, arg));

	}

	return (NULL);
d274 1
a274 1
	struct sparc_bus_space_tag *sbt;
d276 2
a277 1
	sbt = malloc(sizeof(*sbt), M_DEVBUF, M_NOWAIT);
a283 2
	sbt->asi = sbt->parent->asi;
	sbt->sasi = sbt->parent->sasi;
@


1.5.4.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_sbus.c,v 1.5.4.3 2003/03/28 00:38:30 niklas Exp $	*/
d51 5
@


1.5.4.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d104 1
a104 2
		void *,			/*handler arg*/
		const char *);		/*what*/
d125 3
a127 1
dmaprint_sbus(void *aux, const char *busname)
d140 4
a143 1
dmamatch_sbus(struct device *parent, void *vcf, void *aux)
d257 1
a257 2
	void *arg,
	const char *what)
d272 1
a272 1
				(t, t0, pri, level, flags, handler, arg, what));
a275 2
	panic("dmabus_intr_establish: no handler found");

d280 2
a281 1
dma_alloc_bustag(struct dma_softc *sc)
@


1.4
log
@need cfdriver for dma
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_sbus.c,v 1.3 2001/08/20 19:48:33 jason Exp $	*/
a163 1
	struct bootpath *bp;
a237 9
	bp = sa->sa_bp;
	if (bp != NULL &&
	    (strcmp(bp->name, "espdma") == 0 ||
	     strcmp(bp->name, "ledma") == 0 ||
	     strcmp(bp->name, "dma") == 0))
		bp = bp + 1;
	else
		bp = NULL;

a242 1
		sa.sa_bp = bp;
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d122 4
@


1.2
log
@modifications to support OpenBSD/sparc style bootpath determination
@
text
@d1 1
@


1.1
log
@enough from netbsd to get le at ledma attached
@
text
@d159 1
d234 9
d248 1
@

