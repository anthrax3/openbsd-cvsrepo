head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.10
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.8
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.4
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.6
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.4
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.2
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.16
	OPENBSD_5_0:1.14.0.14
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.12
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.10
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.6
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.8
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.4
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.2
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.13.0.4
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.2
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.5.0.6
	UBC_BASE:1.5
	SMP:1.5.0.4
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5;
locks; strict;
comment	@ * @;


1.19
date	2015.09.11.13.02.28;	author stsp;	state Exp;
branches;
next	1.18;
commitid	6vhYvh5CxZAHMnsN;

1.18
date	2014.12.22.02.28.52;	author tedu;	state Exp;
branches;
next	1.17;
commitid	yM2VFFhpDTeFQlve;

1.17
date	2013.09.24.20.11.04;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2012.07.30.16.58.19;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2012.07.25.18.18.59;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.26.05.42.18;	author ray;	state Exp;
branches;
next	1.13;

1.13
date	2007.05.31.17.23.14;	author sobrado;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.02.20.00.56;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.15.21.43.23;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2003.07.07.15.37.07;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.24.21.54.38;	author henric;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.14.23.35.31;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.17.01.29.21;	author henric;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.27.02;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.31.15.12.05;	author jason;	state Exp;
branches
	1.5.4.1
	1.5.6.1;
next	1.4;

1.4
date	2001.08.20.19.48.33;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.20.19.34.10;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.19.17.18.19;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.19.17.09.24;	author jason;	state Exp;
branches;
next	;

1.5.4.1
date	2001.10.31.03.22.49;	author nate;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2002.03.28.15.09.09;	author niklas;	state Exp;
branches;
next	1.5.4.3;

1.5.4.3
date	2003.03.28.00.38.30;	author niklas;	state Exp;
branches;
next	1.5.4.4;

1.5.4.4
date	2003.05.16.00.29.42;	author niklas;	state Exp;
branches;
next	1.5.4.5;

1.5.4.5
date	2004.02.19.10.56.32;	author niklas;	state Exp;
branches;
next	;

1.5.6.1
date	2002.06.11.03.42.29;	author art;	state Exp;
branches;
next	1.5.6.2;

1.5.6.2
date	2003.05.19.22.14.42;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Make room for media types of the future. Extend the ifmedia word to 64 bits.
This changes numbers of the SIOCSIFMEDIA and SIOCGIFMEDIA ioctls and
grows struct ifmediareq.

Old ifconfig and dhclient binaries can still assign addresses, however
the 'media' subcommand stops working. Recompiling ifconfig and dhclient
with new headers before a reboot should not be necessary unless in very
special circumstances where non-default media settings must be used to
get link and console access is not available.

There may be some MD fallout but that will be cleared up later.

ok deraadt miod
with help and suggestions from several sharks attending l2k15
@
text
@/*	$OpenBSD: if_le_ledma.c,v 1.18 2014/12/22 02:28:52 tedu Exp $	*/
/*	$NetBSD: if_le_ledma.c,v 1.14 2001/05/30 11:46:35 mrg Exp $	*/

/*-
 * Copyright (c) 1997, 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Charles M. Hannum; Jason R. Thorpe of the Numerical Aerospace
 * Simulation Facility, NASA Ames Research Center; Paul Kranenburg.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "bpfilter.h"

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/syslog.h>
#include <sys/socket.h>
#include <sys/device.h>
#include <sys/malloc.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <machine/bus.h>
#include <machine/intr.h>
#include <machine/autoconf.h>

#include <dev/sbus/sbusvar.h>

#include <dev/ic/lsi64854reg.h>
#include <dev/ic/lsi64854var.h>

#include <dev/ic/lancereg.h>
#include <dev/ic/lancevar.h>
#include <dev/ic/am7990reg.h>
#include <dev/ic/am7990var.h>

/*
 * LANCE registers.
 */
#define LEREG1_RDP	0	/* Register Data port */
#define LEREG1_RAP	2	/* Register Address port */

struct	le_softc {
	struct	am7990_softc	sc_am7990;	/* glue to MI code */
	bus_space_tag_t		sc_bustag;
	bus_dmamap_t		sc_dmamap;
	bus_space_handle_t	sc_reg;		/* LANCE registers */
	struct	lsi64854_softc	*sc_dma;	/* pointer to my dma */
	u_int			sc_laddr;	/* LANCE DMA address */
};

#define MEMSIZE		(16*1024)	/* LANCE memory size */
#define LEDMA_BOUNDARY	(16*1024*1024)	/* must not cross 16MB boundary */

int	lematch_ledma(struct device *, void *, void *);
void	leattach_ledma(struct device *, struct device *, void *);

/*
 * Media types supported by the Sun4m.
 */
static uint64_t lemedia[] = {
	IFM_ETHER | IFM_10_T,
	IFM_ETHER | IFM_10_5,
	IFM_ETHER | IFM_AUTO
};

void	le_ledma_setutp(struct lance_softc *);
void	le_ledma_setaui(struct lance_softc *);

int	lemediachange(struct lance_softc *);
void	lemediastatus(struct lance_softc *, struct ifmediareq *);

struct cfattach le_ledma_ca = {
	sizeof(struct le_softc), lematch_ledma, leattach_ledma
};

void le_ledma_wrcsr(struct lance_softc *, uint16_t, uint16_t);
uint16_t le_ledma_rdcsr(struct lance_softc *, uint16_t);
void le_ledma_hwreset(struct lance_softc *);
void le_ledma_hwinit(struct lance_softc *);
void le_ledma_nocarrier(struct lance_softc *);

void
le_ledma_wrcsr(struct lance_softc *sc, uint16_t port, uint16_t val)
{
	struct le_softc *lesc = (struct le_softc *)sc;

	bus_space_write_2(lesc->sc_bustag, lesc->sc_reg, LEREG1_RAP, port);
	bus_space_barrier(lesc->sc_bustag, lesc->sc_reg, LEREG1_RAP, 2,
	    BUS_SPACE_BARRIER_WRITE);
	bus_space_write_2(lesc->sc_bustag, lesc->sc_reg, LEREG1_RDP, val);
	bus_space_barrier(lesc->sc_bustag, lesc->sc_reg, LEREG1_RDP, 2,
	    BUS_SPACE_BARRIER_WRITE);

#if defined(SUN4M)
	/*
	 * We need to flush the SBus->MBus write buffers. This can most
	 * easily be accomplished by reading back the register that we
	 * just wrote (thanks to Chris Torek for this solution).
	 */
	if (CPU_ISSUN4M) {
		volatile uint16_t discard;
		discard = bus_space_read_2(lesc->sc_bustag, lesc->sc_reg,
					   LEREG1_RDP);
	}
#endif
}

uint16_t
le_ledma_rdcsr(struct lance_softc *sc, uint16_t port)
{
	struct le_softc *lesc = (struct le_softc *)sc;

	bus_space_write_2(lesc->sc_bustag, lesc->sc_reg, LEREG1_RAP, port);
	bus_space_barrier(lesc->sc_bustag, lesc->sc_reg, LEREG1_RAP, 2,
	    BUS_SPACE_BARRIER_WRITE);
	return (bus_space_read_2(lesc->sc_bustag, lesc->sc_reg, LEREG1_RDP));
}

void
le_ledma_setutp(struct lance_softc *sc)
{
	struct lsi64854_softc *dma = ((struct le_softc *)sc)->sc_dma;
	u_int32_t csr;

	csr = L64854_GCSR(dma);
	csr |= E_TP_AUI;
	L64854_SCSR(dma, csr);
	delay(20000);	/* must not touch le for 20ms */
}

void
le_ledma_setaui(struct lance_softc *sc)
{
	struct lsi64854_softc *dma = ((struct le_softc *)sc)->sc_dma;
	u_int32_t csr;

	csr = L64854_GCSR(dma);
	csr &= ~E_TP_AUI;
	L64854_SCSR(dma, csr);
	delay(20000);	/* must not touch le for 20ms */
}

int
lemediachange(struct lance_softc *sc)
{
	struct ifmedia *ifm = &sc->sc_ifmedia;

	if (IFM_TYPE(ifm->ifm_media) != IFM_ETHER)
		return (EINVAL);

	/*
	 * Switch to the selected media.  If autoselect is
	 * set, we don't really have to do anything.  We'll
	 * switch to the other media when we detect loss of
	 * carrier.
	 */
	switch (IFM_SUBTYPE(ifm->ifm_media)) {
	case IFM_10_T:
		le_ledma_setutp(sc);
		break;

	case IFM_10_5:
		le_ledma_setaui(sc);
		break;

	case IFM_AUTO:
		break;

	default:
		return (EINVAL);
	}

	return (0);
}

void
lemediastatus(struct lance_softc *sc, struct ifmediareq *ifmr)
{
	struct lsi64854_softc *dma = ((struct le_softc *)sc)->sc_dma;

	/*
	 * Notify the world which media we're currently using.
	 */
	if (L64854_GCSR(dma) & E_TP_AUI)
		ifmr->ifm_active = IFM_ETHER|IFM_10_T;
	else
		ifmr->ifm_active = IFM_ETHER|IFM_10_5;
}

void
le_ledma_hwreset(struct lance_softc *sc)
{
	struct le_softc *lesc = (struct le_softc *)sc;
	struct lsi64854_softc *dma = lesc->sc_dma;
	u_int32_t csr;
	u_int aui_bit;

	/*
	 * Reset DMA channel.
	 */
	csr = L64854_GCSR(dma);
	aui_bit = csr & E_TP_AUI;
	DMA_RESET(dma);

	/* Write bits 24-31 of Lance address */
	bus_space_write_4(dma->sc_bustag, dma->sc_regs, L64854_REG_ENBAR,
			  lesc->sc_laddr & 0xff000000);

	DMA_ENINTR(dma);

	/*
	 * Disable E-cache invalidates on chip writes.
	 * Retain previous cable selection bit.
	 */
	csr = L64854_GCSR(dma);
	csr |= (E_DSBL_WR_INVAL | aui_bit);
	L64854_SCSR(dma, csr);
	delay(20000);	/* must not touch le for 20ms */
}

void
le_ledma_hwinit(struct lance_softc *sc)
{

	/*
	 * Make sure we're using the currently-enabled media type.
	 * XXX Actually, this is probably unnecessary, now.
	 */
	switch (IFM_SUBTYPE(sc->sc_ifmedia.ifm_cur->ifm_media)) {
	case IFM_10_T:
		le_ledma_setutp(sc);
		break;

	case IFM_10_5:
		le_ledma_setaui(sc);
		break;
	}
}

void
le_ledma_nocarrier(struct lance_softc *sc)
{
	struct le_softc *lesc = (struct le_softc *)sc;

	/*
	 * Check if the user has requested a certain cable type, and
	 * if so, honor that request.
	 */

	if (L64854_GCSR(lesc->sc_dma) & E_TP_AUI) {
		switch (IFM_SUBTYPE(sc->sc_ifmedia.ifm_media)) {
		case IFM_10_5:
		case IFM_AUTO:
			printf("%s: lost carrier on UTP port"
			    ", switching to AUI port\n", sc->sc_dev.dv_xname);
			le_ledma_setaui(sc);
		}
	} else {
		switch (IFM_SUBTYPE(sc->sc_ifmedia.ifm_media)) {
		case IFM_10_T:
		case IFM_AUTO:
			printf("%s: lost carrier on AUI port"
			    ", switching to UTP port\n", sc->sc_dev.dv_xname);
			le_ledma_setutp(sc);
		}
	}
}

int
lematch_ledma(struct device *parent, void *vcf, void *aux)
{
	struct cfdata *cf = vcf;
	struct sbus_attach_args *sa = aux;

	return (strcmp(cf->cf_driver->cd_name, sa->sa_name) == 0);
}


void
leattach_ledma(struct device *parent, struct device *self, void *aux)
{
	struct sbus_attach_args *sa = aux;
	struct le_softc *lesc = (struct le_softc *)self;
	struct lsi64854_softc *lsi = (struct lsi64854_softc *)parent;
	struct lance_softc *sc = &lesc->sc_am7990.lsc;
	bus_dma_tag_t dmatag = sa->sa_dmatag;
	bus_dma_segment_t seg;
	int rseg, error;
	/* XXX the following declarations should be elsewhere */
	extern void myetheraddr(u_char *);

	lesc->sc_bustag = sa->sa_bustag;

	/* Establish link to `ledma' device */
	lesc->sc_dma = lsi;
	lesc->sc_dma->sc_client = lesc;

	/* Map device registers */
	if (sbus_bus_map(sa->sa_bustag,
			   sa->sa_slot,
			   sa->sa_offset,
			   sa->sa_size,
			   BUS_SPACE_MAP_LINEAR,
			   0, &lesc->sc_reg) != 0) {
		printf("%s @@ ledma: cannot map registers\n", self->dv_xname);
		return;
	}

	/* Allocate buffer memory */
	sc->sc_memsize = MEMSIZE;

	/* Get a DMA handle */
	if ((error = bus_dmamap_create(dmatag, MEMSIZE, 1, MEMSIZE,
					LEDMA_BOUNDARY, BUS_DMA_NOWAIT,
					&lesc->sc_dmamap)) != 0) {
		printf("%s: DMA map create error %d\n", self->dv_xname, error);
		return;
	}

	/* Allocate DMA buffer */
	if ((error = bus_dmamem_alloc(dmatag, MEMSIZE, 0, LEDMA_BOUNDARY,
				 &seg, 1, &rseg, BUS_DMA_NOWAIT)) != 0) {
		printf("%s @@ ledma: DMA buffer alloc error %d\n",
			self->dv_xname, error);
		return;
	}

	/* Map DMA buffer into kernel space */
	if ((error = bus_dmamem_map(dmatag, &seg, rseg, MEMSIZE,
			       (caddr_t *)&sc->sc_mem,
			       BUS_DMA_NOWAIT|BUS_DMA_COHERENT)) != 0) {
		printf("%s @@ ledma: DMA buffer map error %d\n",
			self->dv_xname, error);
		bus_dmamem_free(dmatag, &seg, rseg);
		return;
	}

	/* Load DMA buffer */
	if ((error = bus_dmamap_load(dmatag, lesc->sc_dmamap, sc->sc_mem,
			MEMSIZE, NULL, BUS_DMA_NOWAIT|BUS_DMA_COHERENT)) != 0) {
		printf("%s: DMA buffer map load error %d\n",
			self->dv_xname, error);
		bus_dmamem_free(dmatag, &seg, rseg);
		bus_dmamem_unmap(dmatag, sc->sc_mem, MEMSIZE);
		return;
	}

	lesc->sc_laddr = lesc->sc_dmamap->dm_segs[0].ds_addr;
	sc->sc_addr = lesc->sc_laddr & 0xffffff;
	sc->sc_conf3 = LE_C3_BSWP | LE_C3_ACON | LE_C3_BCON;

	myetheraddr(sc->sc_arpcom.ac_enaddr);

	sc->sc_mediachange = lemediachange;
	sc->sc_mediastatus = lemediastatus;
	sc->sc_supmedia = lemedia;
	sc->sc_nsupmedia = nitems(lemedia);
	sc->sc_defaultmedia = sc->sc_supmedia[sc->sc_nsupmedia - 1];

	sc->sc_copytodesc = lance_copytobuf_contig;
	sc->sc_copyfromdesc = lance_copyfrombuf_contig;
	sc->sc_copytobuf = lance_copytobuf_contig;
	sc->sc_copyfrombuf = lance_copyfrombuf_contig;
	sc->sc_zerobuf = lance_zerobuf_contig;

	sc->sc_rdcsr = le_ledma_rdcsr;
	sc->sc_wrcsr = le_ledma_wrcsr;
	sc->sc_hwinit = le_ledma_hwinit;
	sc->sc_nocarrier = le_ledma_nocarrier;
	sc->sc_hwreset = le_ledma_hwreset;

	/* Establish interrupt handler */
	if (sa->sa_nintr != 0)
		(void)bus_intr_establish(sa->sa_bustag, sa->sa_pri, IPL_NET, 0,
					 am7990_intr, sc, self->dv_xname);

	am7990_config(&lesc->sc_am7990);

	/* now initialize DMA */
	le_ledma_hwreset(sc);
}
@


1.18
log
@unifdef INET
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_ledma.c,v 1.17 2013/09/24 20:11:04 miod Exp $	*/
d88 1
a88 1
static int lemedia[] = {
@


1.17
log
@Sync the MI LANCE code ( le(4) ) with NetBSD, except for the following:
- the am7990_get() - now lance_get() - is unchanged.
- the interrupt acknowledge logic is unchanged, and will disable interrupts,
  then acknowledge all interrupt conditions.

Add ILACC (79900) support (from NetBSD).

Both LANCE (am7990.c) and ILACC (am79900.c) code share as much common code
(lance.c) as possible. This affects all le(4) attachments, but the changes
are mostly mechanical, to split am7990-specific parts from lance-agnostic
parts.

Compile tested on all affected platforms. Tested on alpha, hp300, luna88k,
mvme88k, sparc, sparc64 and vax.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_ledma.c,v 1.16 2012/07/30 16:58:19 miod Exp $	*/
a46 1
#ifdef INET
a48 1
#endif
@


1.16
log
@Revert previous change, and don't set IFM_AVALID | IFM_ACTIVE in ifm_status
to appease dhcpd, as dhcpd has now been fixed to not require this.
repeated prodding and special ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_ledma.c,v 1.14 2008/06/26 05:42:18 ray Exp $	*/
d61 2
d90 5
d96 2
a97 2
void	le_ledma_setutp(struct am7990_softc *);
void	le_ledma_setaui(struct am7990_softc *);
d99 2
a100 2
int	lemediachange(struct ifnet *);
void	lemediastatus(struct ifnet *, struct ifmediareq *);
d106 5
a110 5
void le_ledma_wrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
u_int16_t le_ledma_rdcsr(struct am7990_softc *, u_int16_t);
void le_ledma_hwreset(struct am7990_softc *);
void le_ledma_hwinit(struct am7990_softc *);
void le_ledma_nocarrier(struct am7990_softc *);
d113 1
a113 1
le_ledma_wrcsr(struct am7990_softc *sc, u_int16_t port, u_int16_t val)
d131 1
a131 1
		volatile u_int16_t discard;
d138 2
a139 2
u_int16_t
le_ledma_rdcsr(struct am7990_softc *sc, u_int16_t port)
d150 1
a150 1
le_ledma_setutp(struct am7990_softc *sc)
d162 1
a162 1
le_ledma_setaui(struct am7990_softc *sc)
d174 1
a174 1
lemediachange(struct ifnet *ifp)
a175 1
	struct am7990_softc *sc = ifp->if_softc;
d207 1
a207 1
lemediastatus(struct ifnet *ifp, struct ifmediareq *ifmr)
a208 1
	struct am7990_softc *sc = ifp->if_softc;
d221 1
a221 1
le_ledma_hwreset(struct am7990_softc *sc)
d252 1
a252 1
le_ledma_hwinit(struct am7990_softc *sc)
d271 1
a271 1
le_ledma_nocarrier(struct am7990_softc *sc)
d315 1
a315 1
	struct am7990_softc *sc = &lesc->sc_am7990;
a381 7
	ifmedia_init(&sc->sc_ifmedia, 0, lemediachange, lemediastatus);
	ifmedia_add(&sc->sc_ifmedia, IFM_ETHER | IFM_10_T, 0, NULL);
	ifmedia_add(&sc->sc_ifmedia, IFM_ETHER | IFM_10_5, 0, NULL);
	ifmedia_add(&sc->sc_ifmedia, IFM_ETHER | IFM_AUTO, 0, NULL);
	ifmedia_set(&sc->sc_ifmedia, IFM_ETHER | IFM_AUTO);
	sc->sc_hasifmedia = 1;

d384 11
a394 5
	sc->sc_copytodesc = am7990_copytobuf_contig;
	sc->sc_copyfromdesc = am7990_copyfrombuf_contig;
	sc->sc_copytobuf = am7990_copytobuf_contig;
	sc->sc_copyfrombuf = am7990_copyfrombuf_contig;
	sc->sc_zerobuf = am7990_zerobuf_contig;
@


1.15
log
@When reporting media state, be sure to set IFM_AVALID and IFM_ACTIVE in
ifm_status, for dhclient's sake. Current dhclient interface_status()
considers interfaces able to report media information but not returning
IFM_AVALID as down. Note that these interfaces usually have mii(4) or
have specific code reporting correct values; sparc le(4) is an exception.
Found the hard way by sebastia@@; joint work with krw@@, ok deraadt@@
@
text
@a208 2
	ifmr->ifm_status = IFM_AVALID | IFM_ACTIVE;

@


1.14
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_ledma.c,v 1.13 2007/05/31 17:23:14 sobrado Exp $	*/
d209 2
@


1.13
log
@use the right capitalization for `MBus' and `SBus'

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_ledma.c,v 1.12 2006/06/02 20:00:56 miod Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.12
log
@sbus_establish() and the associated linked list in the sbus softc is now only
used to store a per-device reset callback, for use in sbusreset(). Except
sbusreset() has never, ever, been used since Torek's sbus code went in.
Time to recycle those wasted bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_ledma.c,v 1.11 2006/05/15 21:43:23 miod Exp $	*/
d126 1
a126 1
	 * We need to flush the Sbus->Mbus write buffers. This can most
@


1.11
log
@Sprinkle bus_space_barrier()s after LANCE register writes, as already done
in if_le.c; ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_ledma.c,v 1.10 2003/07/07 15:37:07 jason Exp $	*/
a78 1
	struct	sbusdev		sc_sd;		/* sbus device */
a382 5


	/* Assume SBus is grandparent */
	lesc->sc_sd.sd_reset = (void *)am7990_reset;
	sbus_establish(&lesc->sc_sd, parent);
@


1.10
log
@ansify and remove statics
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_ledma.c,v 1.9 2003/06/24 21:54:38 henric Exp $	*/
d119 2
d122 2
d145 2
@


1.9
log
@Add a "where" argument to the sparc64 interrupt code.  This lets us
associate a name with each interrupt handler.  This is not visible
outside the kernel (yet).

ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_ledma.c,v 1.8 2003/05/14 23:35:31 miod Exp $	*/
d97 2
a98 2
void	lesetutp(struct am7990_softc *);
void	lesetaui(struct am7990_softc *);
d107 5
a111 3
#if defined(_KERNEL_OPT)
#include "opt_ddb.h"
#endif
d113 2
a114 18
#ifdef DDB
#define	integrate
#define hide
#else
#define	integrate	static __inline
#define hide		static
#endif

static void lewrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
static u_int16_t lerdcsr(struct am7990_softc *, u_int16_t);
hide void lehwreset(struct am7990_softc *);
hide void lehwinit(struct am7990_softc *);
hide void lenocarrier(struct am7990_softc *);

static void
lewrcsr(sc, port, val)
	struct am7990_softc *sc;
	u_int16_t port, val;
d135 2
a136 4
static u_int16_t
lerdcsr(sc, port)
	struct am7990_softc *sc;
	u_int16_t port;
d145 1
a145 2
lesetutp(sc)
	struct am7990_softc *sc;
d157 1
a157 2
lesetaui(sc)
	struct am7990_softc *sc;
d169 1
a169 2
lemediachange(ifp)
	struct ifnet *ifp;
d185 1
a185 1
		lesetutp(sc);
d189 1
a189 1
		lesetaui(sc);
d203 1
a203 3
lemediastatus(ifp, ifmr)
	struct ifnet *ifp;
	struct ifmediareq *ifmr;
d217 2
a218 3
hide void
lehwreset(sc)
	struct am7990_softc *sc;
d248 2
a249 3
hide void
lehwinit(sc)
	struct am7990_softc *sc;
d258 1
a258 1
		lesetutp(sc);
d262 1
a262 1
		lesetaui(sc);
d267 2
a268 3
hide void
lenocarrier(sc)
	struct am7990_softc *sc;
d283 1
a283 1
			lesetaui(sc);
d291 1
a291 1
			lesetutp(sc);
d297 1
a297 4
lematch_ledma(parent, vcf, aux)
	struct device *parent;
	void *vcf;
	void *aux;
d307 1
a307 3
leattach_ledma(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d399 5
a403 5
	sc->sc_rdcsr = lerdcsr;
	sc->sc_wrcsr = lewrcsr;
	sc->sc_hwinit = lehwinit;
	sc->sc_nocarrier = lenocarrier;
	sc->sc_hwreset = lehwreset;
d413 1
a413 1
	lehwreset(sc);
@


1.8
log
@Silence the "lost carrier on FOO port" messages when the port has been set
in stone with "ifconfig le0 media foo". Inspired by previous am7990.c change.

ok todd@@ jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_ledma.c,v 1.7 2003/02/17 01:29:21 henric Exp $	*/
d437 1
a437 1
					 am7990_intr, sc);
@


1.7
log
@
Add support for the Sun Enterprise 450
Reduce the size of a GENERIC kernel by ~190k
Remove the nasty pointer/bus_space_handle_t casts
Adds debug bus_space code including the ability to trace
    bus operations (it actually works now).

The following rules are now followed (and verfified by the debug
code):

1.  A "bus_space_handle_t" may only be used with the
    "bus_space_tag_t" that created it.
2.  Only "bus_space_map()" may create "bus_space_handle_t"s.
3.  A "bus_space_handle_t" may not be modified after it has
    been created (other than being destroyed by "bus_space_unmap()").


Thanks to help from mcbride, marc, jason, drahn, to anyone that might
have slipped my mind at the moment.

ok jason@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_ledma.c,v 1.6 2002/03/14 01:27:02 millert Exp $	*/
a299 1
	printf("%s: lost carrier on ", sc->sc_dev.dv_xname);
a301 1
		printf("UTP port");
d305 2
a306 1
			printf(", switching to AUI port");
a309 1
		printf("AUI port");
d313 2
a314 1
			printf(", switching to UTP port");
a317 1
	printf("\n");
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_ledma.c,v 1.5 2001/08/31 15:12:05 jason Exp $	*/
d357 1
a357 1
	if (bus_space_map2(sa->sa_bustag,
@


1.5
log
@implement autoconf mechanism using device_register(); from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_ledma.c,v 1.4 2001/08/20 19:48:33 jason Exp $	*/
d90 2
a91 2
int	lematch_ledma __P((struct device *, void *, void *));
void	leattach_ledma __P((struct device *, struct device *, void *));
d97 2
a98 2
void	lesetutp __P((struct am7990_softc *));
void	lesetaui __P((struct am7990_softc *));
d100 2
a101 2
int	lemediachange __P((struct ifnet *));
void	lemediastatus __P((struct ifnet *, struct ifmediareq *));
d119 5
a123 5
static void lewrcsr __P((struct am7990_softc *, u_int16_t, u_int16_t));
static u_int16_t lerdcsr __P((struct am7990_softc *, u_int16_t));
hide void lehwreset __P((struct am7990_softc *));
hide void lehwinit __P((struct am7990_softc *));
hide void lenocarrier __P((struct am7990_softc *));
d348 1
a348 1
	extern void myetheraddr __P((u_char *));
@


1.5.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_ledma.c,v 1.5 2001/08/31 15:12:05 jason Exp $	*/
d90 2
a91 2
int	lematch_ledma(struct device *, void *, void *);
void	leattach_ledma(struct device *, struct device *, void *);
d97 2
a98 2
void	lesetutp(struct am7990_softc *);
void	lesetaui(struct am7990_softc *);
d100 2
a101 2
int	lemediachange(struct ifnet *);
void	lemediastatus(struct ifnet *, struct ifmediareq *);
d119 5
a123 5
static void lewrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
static u_int16_t lerdcsr(struct am7990_softc *, u_int16_t);
hide void lehwreset(struct am7990_softc *);
hide void lehwinit(struct am7990_softc *);
hide void lenocarrier(struct am7990_softc *);
d348 1
a348 1
	extern void myetheraddr(u_char *);
@


1.5.6.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d300 1
d303 1
d307 1
a307 2
			printf("%s: lost carrier on UTP port"
			    ", switching to AUI port\n", sc->sc_dev.dv_xname);
d311 1
d315 1
a315 2
			printf("%s: lost carrier on AUI port"
			    ", switching to UTP port\n", sc->sc_dev.dv_xname);
d319 1
d357 1
a357 1
	if (sbus_bus_map(sa->sa_bustag,
@


1.5.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.5.4.2
log
@Merge in -current from roughly a week ago
@
text
@d90 2
a91 2
int	lematch_ledma(struct device *, void *, void *);
void	leattach_ledma(struct device *, struct device *, void *);
d97 2
a98 2
void	lesetutp(struct am7990_softc *);
void	lesetaui(struct am7990_softc *);
d100 2
a101 2
int	lemediachange(struct ifnet *);
void	lemediastatus(struct ifnet *, struct ifmediareq *);
d119 5
a123 5
static void lewrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
static u_int16_t lerdcsr(struct am7990_softc *, u_int16_t);
hide void lehwreset(struct am7990_softc *);
hide void lehwinit(struct am7990_softc *);
hide void lenocarrier(struct am7990_softc *);
d348 1
a348 1
	extern void myetheraddr(u_char *);
@


1.5.4.3
log
@Sync the SMP branch with 3.3
@
text
@d357 1
a357 1
	if (sbus_bus_map(sa->sa_bustag,
@


1.5.4.4
log
@merge the trunk so we will get the genfs and locking fixes
@
text
@d300 1
d303 1
d307 1
a307 2
			printf("%s: lost carrier on UTP port"
			    ", switching to AUI port\n", sc->sc_dev.dv_xname);
d311 1
d315 1
a315 2
			printf("%s: lost carrier on AUI port"
			    ", switching to UTP port\n", sc->sc_dev.dv_xname);
d319 1
@


1.5.4.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d97 2
a98 2
void	le_ledma_setutp(struct am7990_softc *);
void	le_ledma_setaui(struct am7990_softc *);
d107 11
a117 5
void le_ledma_wrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
u_int16_t le_ledma_rdcsr(struct am7990_softc *, u_int16_t);
void le_ledma_hwreset(struct am7990_softc *);
void le_ledma_hwinit(struct am7990_softc *);
void le_ledma_nocarrier(struct am7990_softc *);
d119 10
a128 2
void
le_ledma_wrcsr(struct am7990_softc *sc, u_int16_t port, u_int16_t val)
d149 4
a152 2
u_int16_t
le_ledma_rdcsr(struct am7990_softc *sc, u_int16_t port)
d161 2
a162 1
le_ledma_setutp(struct am7990_softc *sc)
d174 2
a175 1
le_ledma_setaui(struct am7990_softc *sc)
d187 2
a188 1
lemediachange(struct ifnet *ifp)
d204 1
a204 1
		le_ledma_setutp(sc);
d208 1
a208 1
		le_ledma_setaui(sc);
d222 3
a224 1
lemediastatus(struct ifnet *ifp, struct ifmediareq *ifmr)
d238 3
a240 2
void
le_ledma_hwreset(struct am7990_softc *sc)
d270 3
a272 2
void
le_ledma_hwinit(struct am7990_softc *sc)
d281 1
a281 1
		le_ledma_setutp(sc);
d285 1
a285 1
		le_ledma_setaui(sc);
d290 3
a292 2
void
le_ledma_nocarrier(struct am7990_softc *sc)
d307 1
a307 1
			le_ledma_setaui(sc);
d315 1
a315 1
			le_ledma_setutp(sc);
d321 4
a324 1
lematch_ledma(struct device *parent, void *vcf, void *aux)
d334 3
a336 1
leattach_ledma(struct device *parent, struct device *self, void *aux)
d428 5
a432 5
	sc->sc_rdcsr = le_ledma_rdcsr;
	sc->sc_wrcsr = le_ledma_wrcsr;
	sc->sc_hwinit = le_ledma_hwinit;
	sc->sc_nocarrier = le_ledma_nocarrier;
	sc->sc_hwreset = le_ledma_hwreset;
d437 1
a437 1
					 am7990_intr, sc, self->dv_xname);
d442 1
a442 1
	le_ledma_hwreset(sc);
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a346 1
	struct bootpath *bp;
a444 6

	bp = sa->sa_bp;
	if (bp != NULL && strcmp(bp->name, le_cd.cd_name) == 0 &&
	    ((bp->val[0] == sa->sa_slot && bp->val[1] == sa->sa_offset) ||
	    (bp->val[0] == -1 && bp->val[1] == sc->sc_dev.dv_unit)))
		bp->dev = &sc->sc_dev;
@


1.3
log
@modifications to support OpenBSD/sparc style bootpath determination
@
text
@d1 1
@


1.2
log
@remove dependence on lancereg.h/lancevar.h
@
text
@d60 1
a105 6
#if 0
struct cfdriver le_cd = {
	NULL, "le", DV_DULL
};
#endif

d346 1
d445 6
@


1.1
log
@enough from netbsd to get le at ledma attached
@
text
@a65 2
#include <dev/ic/lancereg.h>
#include <dev/ic/lancevar.h>
@

