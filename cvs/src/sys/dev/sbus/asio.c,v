head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.58
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.54
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.44
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.52
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.50
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.48
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.46
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.42
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.40
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.38
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.36
	OPENBSD_5_0:1.10.0.34
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.32
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.30
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.26
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.28
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.24
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.22
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.20
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.18
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.16
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.14
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	UBC_SYNC_B:1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	UBC:1.5.0.4
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	SMP:1.4.0.2;
locks; strict;
comment	@ * @;


1.10
date	2003.06.27.01.50.52;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.27.00.27.18;	author jason;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.24.21.54.38;	author henric;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.18.32.41;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.17.01.29.20;	author henric;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.08.17.49.42;	author jason;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2002.03.14.15.42.44;	author jason;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2002.03.14.01.27.02;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.08.04.34.37;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.06.16.09.46;	author jason;	state Exp;
branches;
next	;

1.4.2.1
date	2003.03.28.00.38.29;	author niklas;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2003.06.07.11.02.32;	author ho;	state Exp;
branches;
next	1.4.2.3;

1.4.2.3
date	2004.02.19.10.56.32;	author niklas;	state Exp;
branches;
next	;

1.5.4.1
date	2002.06.11.03.42.29;	author art;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2003.05.19.22.14.42;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@ansi functions
@
text
@/*	$OpenBSD: asio.c,v 1.9 2003/06/27 00:27:18 jason Exp $	*/

/*
 * Copyright (c) 2002 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
 */

/*
 * Driver for Aurora 210SJ serial ports.
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/timeout.h>
#include <sys/tty.h>

#include <machine/bus.h>
#include <machine/autoconf.h>
#include <machine/openfirm.h>

#include <dev/sbus/sbusvar.h>
#include <dev/sbus/asioreg.h>
#include <dev/ic/comvar.h>

#include "asio.h"

#define BAUD_BASE       (1843200)

struct asio_port {
	u_int8_t		ap_inten;
	bus_space_handle_t	ap_bh;
	struct device		*ap_dev;
};

struct asio_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_bt;
	bus_space_handle_t	sc_csr_h;
	void			*sc_ih;
	struct asio_port	sc_ports[2];
	int			sc_nports;
};

struct asio_attach_args {
	char *aaa_name;
	int aaa_port;
	bus_space_tag_t aaa_iot;
	bus_space_handle_t aaa_ioh;
	u_int32_t aaa_pri;
	u_int8_t aaa_inten;
};

int	asio_match(struct device *, void *, void *);
void	asio_attach(struct device *, struct device *, void *);
int	asio_print(void *, const char *);
void	asio_intr_enable(struct device *, u_int8_t);

struct cfattach asio_ca = {
	sizeof(struct asio_softc), asio_match, asio_attach
};

struct cfdriver asio_cd = {
	NULL, "asio", DV_DULL
};

int
asio_match(struct device *parent, void *match, void *aux)
{
	struct sbus_attach_args *sa = aux;

	if (strcmp(sa->sa_name, "sio2") == 0)
		return (1);
	return (0);
}

void
asio_attach(struct device *parent, struct device *self, void *aux)
{
	struct asio_softc *sc = (void *)self;
	struct sbus_attach_args *sa = aux;
	struct asio_attach_args aaa;
	int i;
	char *model;

	sc->sc_bt = sa->sa_bustag;
	sc->sc_nports = 2;

	model = getpropstring(sa->sa_node, "model");
	if (model == NULL) {
		printf(": empty model, unsupported\n");
		return;
	}
	if (strcmp(model, "210sj") != 0) {
		printf(": unsupported model %s\n", model);
		return;
	}

	if (sa->sa_nreg < 3) {
		printf(": %d registers expected, got %d\n",
		    3, sa->sa_nreg);
		return;
	}

	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[0].sbr_slot,
	    sa->sa_reg[0].sbr_offset, sa->sa_reg[0].sbr_size,
	    0, 0, &sc->sc_csr_h)) {
		printf(": couldn't map csr\n");
		return;
	}

	for (i = 0; i < sc->sc_nports; i++) {
		if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[i + 1].sbr_slot,
		    sa->sa_reg[i + 1].sbr_offset, sa->sa_reg[i + 1].sbr_size,
		    0, 0, &sc->sc_ports[i].ap_bh)) {
			printf(": couldn't map uart%d\n", i);
			return;
		}
	}

	sc->sc_ports[0].ap_inten = ASIO_CSR_SJ_UART0_INTEN;
	sc->sc_ports[1].ap_inten = ASIO_CSR_UART1_INTEN;

	printf(": %s\n", model);

	for (i = 0; i < sc->sc_nports; i++) {
		aaa.aaa_name = "com";
		aaa.aaa_port = i;
		aaa.aaa_iot = sc->sc_bt;
		aaa.aaa_ioh = sc->sc_ports[i].ap_bh;
		aaa.aaa_inten = sc->sc_ports[i].ap_inten;
		aaa.aaa_pri = sa->sa_intr[0].sbi_pri;
		sc->sc_ports[i].ap_dev = config_found(self, &aaa, asio_print);
	}
}

int
asio_print(void *aux, const char *name)
{
	struct asio_attach_args *aaa = aux;

	if (name != NULL)
		printf("%s at %s", aaa->aaa_name, name);
	printf(" port %d", aaa->aaa_port);
	return (UNCONF);
}

#if NCOM_ASIO > 0
int	com_asio_match(struct device *, void *, void *);
void	com_asio_attach(struct device *, struct device *, void *);

struct cfattach com_asio_ca = {
	sizeof(struct com_softc), com_asio_match, com_asio_attach
};

void
asio_intr_enable(struct device *dv, u_int8_t en)
{
	struct asio_softc *sc = (struct asio_softc *)dv;
	u_int8_t csr;

	csr = bus_space_read_1(sc->sc_bt, sc->sc_csr_h, 0);
	csr &= ~(ASIO_CSR_SBUS_INT7 | ASIO_CSR_SBUS_INT6);
	csr |= ASIO_CSR_SBUS_INT5 | en;
	bus_space_write_1(sc->sc_bt, sc->sc_csr_h, 0, csr);
}

int
com_asio_match(struct device *parent, void *match, void *aux)
{
	return (1);
}

void
com_asio_attach(struct device *parent, struct device *self, void *aux)
{
	struct com_softc *sc = (struct com_softc *)self;
	struct asio_attach_args *aaa = aux;

	sc->sc_iot = aaa->aaa_iot;
	sc->sc_ioh = aaa->aaa_ioh;
	sc->sc_iobase = 0;   /* XXX WTF is iobase for? It used to be the lower 32 bits of ioh's vaddr... */
	sc->sc_hwflags = 0;
	sc->sc_swflags = 0;
	sc->sc_frequency = BAUD_BASE;

	sc->sc_ih = bus_intr_establish(aaa->aaa_iot, aaa->aaa_pri,
	    IPL_TTY, 0, comintr, sc, self->dv_xname);
	if (sc->sc_ih == NULL) {
		printf(": cannot allocate intr\n");
		return;
	}
	asio_intr_enable(parent, aaa->aaa_inten);

	com_attach_subr(sc);
}
#endif
@


1.9
log
@Don't need LINEAR mappings.
@
text
@d1 1
a1 1
/*	$OpenBSD: asio.c,v 1.8 2003/06/24 21:54:38 henric Exp $	*/
d97 1
a97 4
asio_match(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
d107 1
a107 3
asio_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d167 1
a167 3
asio_print(aux, name)
	void *aux;
	const char *name;
d186 1
a186 3
asio_intr_enable(dv, en)
	struct device *dv;
	u_int8_t en;
d198 1
a198 4
com_asio_match(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
d204 1
a204 3
com_asio_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
@


1.8
log
@Add a "where" argument to the sparc64 interrupt code.  This lets us
associate a name with each interrupt handler.  This is not visible
outside the kernel (yet).

ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asio.c,v 1.7 2003/06/02 18:32:41 jason Exp $	*/
d139 3
a141 5
	if (sbus_bus_map(sa->sa_bustag,
	    sa->sa_reg[0].sbr_slot,
	    sa->sa_reg[0].sbr_offset,
	    sa->sa_reg[0].sbr_size,
	    BUS_SPACE_MAP_LINEAR, 0, &sc->sc_csr_h)) {
d147 3
a149 5
		if (sbus_bus_map(sa->sa_bustag,
		    sa->sa_reg[i + 1].sbr_slot,
		    sa->sa_reg[i + 1].sbr_offset,
		    sa->sa_reg[i + 1].sbr_size,
		    BUS_SPACE_MAP_LINEAR, 0, &sc->sc_ports[i].ap_bh)) {
@


1.7
log
@Nuke my clause 3 and 4 (and a couple of files jointly (c) with Theo).
@
text
@d1 1
a1 1
/*	$OpenBSD: asio.c,v 1.6 2003/02/17 01:29:20 henric Exp $	*/
d235 1
a235 1
	    IPL_TTY, 0, comintr, sc);
@


1.6
log
@
Add support for the Sun Enterprise 450
Reduce the size of a GENERIC kernel by ~190k
Remove the nasty pointer/bus_space_handle_t casts
Adds debug bus_space code including the ability to trace
    bus operations (it actually works now).

The following rules are now followed (and verfified by the debug
code):

1.  A "bus_space_handle_t" may only be used with the
    "bus_space_tag_t" that created it.
2.  Only "bus_space_map()" may create "bus_space_handle_t"s.
3.  A "bus_space_handle_t" may not be modified after it has
    been created (other than being destroyed by "bus_space_unmap()").


Thanks to help from mcbride, marc, jason, drahn, to anyone that might
have slipped my mind at the moment.

ok jason@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: asio.c,v 1.5 2002/04/08 17:49:42 jason Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.5
log
@Credit DARPA/USAF appropriately.
@
text
@d1 1
a1 1
/*	$OpenBSD: asio.c,v 1.4 2002/03/14 15:42:44 jason Exp $	*/
d185 1
a185 1
	struct asio_attach_args *aaa;
d234 1
a234 1
	sc->sc_iobase = sc->sc_ioh;
@


1.5.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.5.4.2
log
@sync
@
text
@d185 1
a185 1
	struct asio_attach_args *aaa = aux;
d234 1
a234 1
	sc->sc_iobase = 0;   /* XXX WTF is iobase for? It used to be the lower 32 bits of ioh's vaddr... */
@


1.4
log
@Conditionalize com at asio correctly
@
text
@d1 1
a1 1
/*	$OpenBSD: asio.c,v 1.3 2002/03/14 01:27:02 millert Exp $	*/
d32 5
@


1.4.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a31 5
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
d180 1
a180 1
	struct asio_attach_args *aaa = aux;
d229 1
a229 1
	sc->sc_iobase = 0;   /* XXX WTF is iobase for? It used to be the lower 32 bits of ioh's vaddr... */
@


1.4.2.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: asio.c,v 1.4.2.1 2003/03/28 00:38:29 niklas Exp $	*/
d15 5
@


1.4.2.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d97 4
a100 1
asio_match(struct device *parent, void *match, void *aux)
d110 3
a112 1
asio_attach(struct device *parent, struct device *self, void *aux)
d139 5
a143 3
	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[0].sbr_slot,
	    sa->sa_reg[0].sbr_offset, sa->sa_reg[0].sbr_size,
	    0, 0, &sc->sc_csr_h)) {
d149 5
a153 3
		if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[i + 1].sbr_slot,
		    sa->sa_reg[i + 1].sbr_offset, sa->sa_reg[i + 1].sbr_size,
		    0, 0, &sc->sc_ports[i].ap_bh)) {
d176 3
a178 1
asio_print(void *aux, const char *name)
d197 3
a199 1
asio_intr_enable(struct device *dv, u_int8_t en)
d211 4
a214 1
com_asio_match(struct device *parent, void *match, void *aux)
d220 3
a222 1
com_asio_attach(struct device *parent, struct device *self, void *aux)
d235 1
a235 1
	    IPL_TTY, 0, comintr, sc, self->dv_xname);
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: asio.c,v 1.2 2002/03/08 04:34:37 jason Exp $	*/
d55 1
a55 1
#include "com.h"
a95 7
int	com_asio_match(struct device *, void *, void *);
void	com_asio_attach(struct device *, struct device *, void *);

struct cfattach com_asio_ca = {
	sizeof(struct com_softc), com_asio_match, com_asio_attach
};

d188 8
d244 1
@


1.2
log
@Clean up:
Allow the children to register their own interrupt handlers (and set the
appropriate interrupt enable bits in the csr)
Verify the asio revision
@
text
@d1 1
a1 1
/*	$OpenBSD: asio.c,v 1.1 2002/03/06 16:09:46 jason Exp $	*/
d83 4
a86 4
int	asio_match __P((struct device *, void *, void *));
void	asio_attach __P((struct device *, struct device *, void *));
int	asio_print __P((void *, const char *));
void	asio_intr_enable __P((struct device *, u_int8_t));
d96 2
a97 2
int	com_asio_match __P((struct device *, void *, void *));
void	com_asio_attach __P((struct device *, struct device *, void *));
@


1.1
log
@Driver for the Aurora 210SJ serial ports (It's not 100% correct yet, but
pretty close); thanks to Matt <matt@@vertrauen.org> for donating the board.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d55 2
d79 2
d86 1
a86 1
int	asio_intr __P((void *));
d124 2
a125 2
	int i, map;
	u_int8_t csr;
d128 11
d155 1
a155 1
	for (i = 0; i < 2; i++) {
a165 1
	/* XXX: revision specific*/
d169 1
a169 3
	printf("\n");

	sc->sc_nports = 2;
d176 2
a179 22

	/* XXX won't work if pio comes along later and zots this.. */
	csr = ASIO_CSR_SBUS_INT5;
	for (map = 0, i = 0; i < sc->sc_nports; i++) {
		if (sc->sc_ports[i].ap_dev != NULL) {
			map = 1;
			csr |= sc->sc_ports[i].ap_inten;
		}
	}
	csr |= 2;
	bus_space_write_1(sc->sc_bt, sc->sc_csr_h, ASIO_CSR, csr);

	if (map == 0)
		return;

	sc->sc_ih = bus_intr_establish(sa->sa_bustag, sa->sa_pri,
	    IPL_TTY, 0, asio_intr, sc);
	if (sc->sc_ih == NULL) {
		printf("%s: failed to map interrupt\n",
		    sc->sc_dev.dv_xname);
		return;
	}
d195 4
a198 3
int
asio_intr(vsc)
	void *vsc;
d200 2
a201 2
	struct asio_softc *sc = vsc;
	int i, r = 0;
d203 4
a206 3
	for (i = 0; i < sc->sc_nports; i++)
		r += comintr(sc->sc_ports[i].ap_dev);
	return (r);
d232 9
@

