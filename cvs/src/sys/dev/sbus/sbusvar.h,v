head	1.14;
access;
symbols
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.13.0.34
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.24
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.32
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.30
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.28
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.26
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.22
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.20
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.18
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.16
	OPENBSD_5_0:1.13.0.14
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.12
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.10
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.6
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.8
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.4
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.12.0.4
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.7.0.8
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.6
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.4
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.4.0.6
	UBC_BASE:1.4
	SMP:1.4.0.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	SPARC64:1.1.1.1
	NETBSD:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2016.09.04.18.20.34;	author tedu;	state Exp;
branches;
next	1.13;
commitid	5vdSYy8ueEhs20To;

1.13
date	2008.06.26.05.42.18;	author ray;	state Exp;
branches;
next	1.12;

1.12
date	2007.05.31.17.23.14;	author sobrado;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.21.18.29.22;	author jason;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.02.20.00.56;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.08.21.35.04;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.05.01.44.52;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.17.01.29.21;	author henric;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.14.21.34.59;	author todd;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.27.02;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.31.15.12.05;	author jason;	state Exp;
branches
	1.4.4.1
	1.4.6.1;
next	1.3;

1.3
date	2001.08.20.19.34.10;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.19.05.36.11;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.18.20.58.13;	author jason;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.08.18.20.58.13;	author jason;	state Exp;
branches;
next	;

1.4.4.1
date	2001.10.31.03.22.49;	author nate;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2002.03.28.15.09.09;	author niklas;	state Exp;
branches;
next	1.4.4.3;

1.4.4.3
date	2003.03.28.00.38.30;	author niklas;	state Exp;
branches;
next	;

1.4.6.1
date	2002.06.11.03.42.29;	author art;	state Exp;
branches;
next	1.4.6.2;

1.4.6.2
date	2002.10.29.00.33.31;	author art;	state Exp;
branches;
next	1.4.6.3;

1.4.6.3
date	2003.05.19.22.14.42;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.14
log
@remove some more sparc remnants. ok deraadt
@
text
@/*	$OpenBSD: sbusvar.h,v 1.13 2008/06/26 05:42:18 ray Exp $	*/
/*	$NetBSD: sbusvar.h,v 1.11 2000/11/01 06:18:45 eeh Exp $ */

/*-
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Paul Kranenburg.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _SBUS_VAR_H
#define _SBUS_VAR_H

struct sbus_softc;

/*
 * S-bus variables.
 */

/* Device register space description */
struct sbus_reg {
	u_int32_t	sbr_slot;
	u_int32_t	sbr_offset;
	u_int32_t	sbr_size;
};

/* Interrupt information */
struct sbus_intr {
	u_int32_t	sbi_pri;	/* priority (IPL) */
	u_int32_t	sbi_vec;	/* vector (always 0?) */
};

/* Address translation across busses */
struct sbus_range {
	u_int32_t	cspace;		/* Client space */
	u_int32_t	coffset;	/* Client offset */
	u_int32_t	pspace;		/* Parent space */
	u_int32_t	poffset;	/* Parent offset */
	u_int32_t	size;		/* Size in bytes of this range */
};

/*
 * SBus driver attach arguments.
 */
struct sbus_attach_args {
	int		sa_placeholder;	/* for obio attach args sharing */
	bus_space_tag_t	sa_bustag;
	bus_dma_tag_t	sa_dmatag;
	char		*sa_name;	/* PROM node name */
	int		sa_node;	/* PROM handle */
	struct sbus_reg	*sa_reg;	/* SBus register space for device */
	int		sa_nreg;	/* Number of SBus register spaces */
#define sa_slot		sa_reg[0].sbr_slot
#define sa_offset	sa_reg[0].sbr_offset
#define sa_size		sa_reg[0].sbr_size

	struct sbus_intr *sa_intr;	/* SBus interrupts for device */
	int		sa_nintr;	/* Number of interrupts */
#define sa_pri		sa_intr[0].sbi_pri

	u_int32_t	*sa_promvaddrs;/* PROM-supplied virtual addresses -- 32-bit */
	int		sa_npromvaddrs;	/* Number of PROM VAs */
#define sa_promvaddr	sa_promvaddrs[0]
	int		sa_frequency;	/* SBus clockrate */
};

int	sbus_print(void *, const char *);

int	sbus_setup_attach_args(
		struct sbus_softc *,
		bus_space_tag_t,
		bus_dma_tag_t,
		int,			/*node*/
		struct sbus_attach_args *);

void	sbus_destroy_attach_args(struct sbus_attach_args *);

#define sbus_bus_map(t, slot, offset, sz, flags, unused, hp) \
	bus_space_map(t, BUS_ADDR(slot, offset), sz, flags, hp)

#if notyet
/* variables per SBus */
struct sbus_softc {
	struct	device sc_dev;		/* base device */
	bus_space_tag_t	sc_bustag;
	bus_dma_tag_t	sc_dmatag;
	int	sc_clockfreq;		/* clock frequency (in Hz) */
	struct	sbus_range *sc_range;
	int	sc_nrange;
	int	sc_burst;		/* burst transfer sizes supported */
	/* machdep stuff follows here */
	int	*sc_intr2ipl;		/* Interrupt level translation */
	int	*sc_intr_compat;	/* `intr' property to sbus compat */
};
#endif


/*
 * PROM-reported DMA burst sizes for the SBus
 */
#define SBUS_BURST_1	0x1
#define SBUS_BURST_2	0x2
#define SBUS_BURST_4	0x4
#define SBUS_BURST_8	0x8
#define SBUS_BURST_16	0x10
#define SBUS_BURST_32	0x20
#define SBUS_BURST_64	0x40

#include <sparc64/dev/sbusvar.h>
#include <sparc64/dev/iommureg.h>

#endif /* _SBUS_VAR_H */
@


1.13
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.12 2007/05/31 17:23:14 sobrado Exp $	*/
a130 5
/* We use #defined(SUN4*) here while the ports are in flux */
#if defined(__sparc__) && !defined(__sparc64__)
#include <sparc/dev/sbusvar.h>
#define	INTLEV(x)	(x)
#elif defined(__sparc64__)
a132 1
#endif
@


1.12
log
@use the right capitalization for `MBus' and `SBus'

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.11 2006/06/21 18:29:22 jason Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.11
log
@use __sparc__ and __sparc64__ instead of SUN4|SUN4C|SUN4M vs SUN4U to figure
out which includes to use.
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.10 2006/06/02 20:00:56 miod Exp $	*/
d72 1
a72 1
 * Sbus driver attach arguments.
d80 2
a81 2
	struct sbus_reg	*sa_reg;	/* Sbus register space for device */
	int		sa_nreg;	/* Number of Sbus register spaces */
d86 1
a86 1
	struct sbus_intr *sa_intr;	/* Sbus interrupts for device */
d111 1
a111 1
/* variables per Sbus */
@


1.10
log
@sbus_establish() and the associated linked list in the sbus softc is now only
used to store a per-device reset callback, for use in sbusreset(). Except
sbusreset() has never, ever, been used since Torek's sbus code went in.
Time to recycle those wasted bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.9 2005/03/08 21:35:04 miod Exp $	*/
d139 1
a139 1
#if defined(SUN4) || defined(SUN4C) || defined(SUN4M)
d142 1
a142 1
#elif defined(SUN4U)
@


1.9
log
@When failing to register an interrupt, display the correct priority on sparc64.

ok cloder@@ martin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.8 2005/03/05 01:44:52 miod Exp $	*/
a47 6
struct sbusdev {
	struct	device *sd_dev;		/* backpointer to generic */
	struct	sbusdev *sd_bchain;	/* forward link in bus chain */
	void	(*sd_reset)(struct device *);
};

a97 2
void	sbus_establish(struct sbusdev *, struct device *);

a116 1
	struct	sbusdev *sc_sbdev;	/* list of all children */
@


1.8
log
@Preliminary xbox support: attaches, memory mapping and interrupts work, but
DMA transfers are not implemented yet, and are disabled (which causes drivers
to SBus cards on the xbox to fail to attach).

In practice, this allows frame buffers to work, maybe more devices; DMA
support will be worked on in the near future.
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.7 2003/02/17 01:29:21 henric Exp $	*/
d150 1
d153 1
@


1.7
log
@
Add support for the Sun Enterprise 450
Reduce the size of a GENERIC kernel by ~190k
Remove the nasty pointer/bus_space_handle_t casts
Adds debug bus_space code including the ability to trace
    bus operations (it actually works now).

The following rules are now followed (and verfified by the debug
code):

1.  A "bus_space_handle_t" may only be used with the
    "bus_space_tag_t" that created it.
2.  Only "bus_space_map()" may create "bus_space_handle_t"s.
3.  A "bus_space_handle_t" may not be modified after it has
    been created (other than being destroyed by "bus_space_unmap()").


Thanks to help from mcbride, marc, jason, drahn, to anyone that might
have slipped my mind at the moment.

ok jason@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.6 2002/06/14 21:34:59 todd Exp $	*/
a101 3
/* sbus_attach_internal() is also used from obio.c */
void	sbus_attach_common(struct sbus_softc *, char *, int, 
				const char * const *);
@


1.6
log
@spelling; from Brian Poole <raj@@cerias.purdue.edu>
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.5 2002/03/14 01:27:02 millert Exp $	*/
d118 2
a119 2
#define sbus_bus_map(t, bt, a, s, f, v, hp) \
	bus_space_map2(t, bt, a, s, f, v, hp)
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.4 2001/08/31 15:12:05 jason Exp $	*/
d68 1
a68 1
/* Address translation accross busses */
@


1.4
log
@implement autoconf mechanism using device_register(); from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.3 2001/08/20 19:34:10 jason Exp $	*/
d51 1
a51 1
	void	(*sd_reset) __P((struct device *));
d103 3
a105 3
void	sbus_attach_common __P((struct sbus_softc *, char *, int, 
				const char * const *));
int	sbus_print __P((void *, const char *));
d107 1
a107 1
void	sbus_establish __P((struct sbusdev *, struct device *));
d109 1
a109 1
int	sbus_setup_attach_args __P((
d114 1
a114 1
		struct sbus_attach_args *));
d116 1
a116 1
void	sbus_destroy_attach_args __P((struct sbus_attach_args *));
@


1.4.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.4 2001/08/31 15:12:05 jason Exp $	*/
d51 1
a51 1
	void	(*sd_reset)(struct device *);
d103 3
a105 3
void	sbus_attach_common(struct sbus_softc *, char *, int, 
				const char * const *);
int	sbus_print(void *, const char *);
d107 1
a107 1
void	sbus_establish(struct sbusdev *, struct device *);
d109 1
a109 1
int	sbus_setup_attach_args(
d114 1
a114 1
		struct sbus_attach_args *);
d116 1
a116 1
void	sbus_destroy_attach_args(struct sbus_attach_args *);
@


1.4.6.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.4.6.1 2002/06/11 03:42:29 art Exp $	*/
d68 1
a68 1
/* Address translation across busses */
@


1.4.6.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d118 2
a119 2
#define sbus_bus_map(t, slot, offset, sz, flags, unused, hp) \
	bus_space_map(t, BUS_ADDR(slot, offset), sz, flags, hp)
@


1.4.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.4.4.2
log
@Merge in -current from roughly a week ago
@
text
@d51 1
a51 1
	void	(*sd_reset)(struct device *);
d103 3
a105 3
void	sbus_attach_common(struct sbus_softc *, char *, int, 
				const char * const *);
int	sbus_print(void *, const char *);
d107 1
a107 1
void	sbus_establish(struct sbusdev *, struct device *);
d109 1
a109 1
int	sbus_setup_attach_args(
d114 1
a114 1
		struct sbus_attach_args *);
d116 1
a116 1
void	sbus_destroy_attach_args(struct sbus_attach_args *);
@


1.4.4.3
log
@Sync the SMP branch with 3.3
@
text
@d68 1
a68 1
/* Address translation across busses */
d118 2
a119 2
#define sbus_bus_map(t, slot, offset, sz, flags, unused, hp) \
	bus_space_map(t, BUS_ADDR(slot, offset), sz, flags, hp)
@


1.3
log
@modifications to support OpenBSD/sparc style bootpath determination
@
text
@d1 1
a1 1
/*	$OpenBSD: sbusvar.h,v 1.2 2001/08/19 05:36:11 jason Exp $	*/
a99 1
	struct bootpath	*sa_bp;		/* boot path */
@


1.2
log
@RCSid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d100 1
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@import sbus stuff from netbsd (not a lot of mods).
@
text
@@
