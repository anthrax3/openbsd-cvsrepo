head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.6
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.16
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.14
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.2.0.6
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.4
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2015.11.28.09.42.10;	author jmatthew;	state Exp;
branches;
next	1.9;
commitid	H1hUCw2u7OaGgYvP;

1.9
date	2015.11.24.17.11.40;	author mpi;	state Exp;
branches;
next	1.8;
commitid	5gdEnqVoJuTuwdTu;

1.8
date	2014.08.11.12.45.45;	author mpi;	state Exp;
branches;
next	1.7;
commitid	nYggAidK85QbUFh2;

1.7
date	2013.08.07.01.06.40;	author bluhm;	state Exp;
branches;
next	1.6;

1.6
date	2009.07.12.21.27.09;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.07.17.44.14;	author brad;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.26.05.42.18;	author ray;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.13.02.24.08;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.21.22.16.09;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.15.54.35;	author brad;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Rework gem_start to check that there's enough space in the ring before
dequeueing a packet, then drop the packet if it can't be sent, rather than
using two phase dequeue then commit.

Adjust sc_tx_cnt using atomic operations, take the kernel lock before
calling gem_start or gem_init from the interrupt handler, and use an
interrupt barrier when taking the interface down.

With all this done, we can mark the interrupt handler for pci (but not sbus)
attached gem(4) as mpsafe.

mpi@@ wrote this initially, I fixed bugs to keep sparc64 happy and kept it up
to date with ifq changes.

ok mpi@@ dlg@@
@
text
@/*	$OpenBSD: if_gem_sbus.c,v 1.9 2015/11/24 17:11:40 mpi Exp $	*/
/*	$NetBSD: if_gem_sbus.c,v 1.1 2006/11/24 13:23:32 martin Exp $	*/

/*-
 * Copyright (c) 2006 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Martin Husemann.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * SBus front-end for the GEM network driver
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/syslog.h>
#include <sys/device.h>
#include <sys/malloc.h>
#include <sys/socket.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>

#include <machine/bus.h>
#include <machine/intr.h>
#include <machine/autoconf.h>

#include <dev/sbus/sbusvar.h>

#include <dev/ic/gemreg.h>
#include <dev/ic/gemvar.h>

#include <dev/ofw/openfirm.h>

struct gem_sbus_softc {
	struct	gem_softc	gsc_gem;	/* GEM device */
};

int	gemmatch_sbus(struct device *, void *, void *);
void	gemattach_sbus(struct device *, struct device *, void *);

struct cfattach gem_sbus_ca = {
	sizeof(struct gem_sbus_softc), gemmatch_sbus, gemattach_sbus
};

int
gemmatch_sbus(struct device *parent, void *vcf, void *aux)
{
	struct sbus_attach_args *sa = aux;

	return (strcmp("network", sa->sa_name) == 0);
}

void
gemattach_sbus(struct device *parent, struct device *self, void *aux)
{
	struct sbus_attach_args *sa = aux;
	struct gem_sbus_softc *gsc = (void *)self;
	struct gem_softc *sc = &gsc->gsc_gem;
	/* XXX the following declaration should be elsewhere */
	extern void myetheraddr(u_char *);

	/* Pass on the bus tags */
	sc->sc_bustag = sa->sa_bustag;
	sc->sc_dmatag = sa->sa_dmatag;

	if (sa->sa_nintr < 1) {
		printf(": no interrupt\n");
		return;
	}

	if (sa->sa_nreg < 2) {
		printf(": only %d register sets\n", sa->sa_nreg);
		return;
	}

	sc->sc_variant = GEM_SUN_GEM;

	/*
	 * Map two register banks:
	 *
	 *	bank 0: status, config, reset
	 *	bank 1: various gem parts
	 *
	 */
	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[0].sbr_slot,
			 (bus_addr_t)sa->sa_reg[0].sbr_offset,
			 (bus_size_t)sa->sa_reg[0].sbr_size, 0, 0,
			 &sc->sc_h2) != 0) {
		printf(": can't map registers\n");
		return;
	}
	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[0].sbr_slot,
			 (bus_addr_t)sa->sa_reg[1].sbr_offset,
			 (bus_size_t)sa->sa_reg[1].sbr_size, 0, 0,
			 &sc->sc_h1) != 0) {
		printf(": can't map registers\n");
		return;
	}

	if (OF_getprop(sa->sa_node, "local-mac-address",
	    sc->sc_arpcom.ac_enaddr, ETHER_ADDR_LEN) <= 0)
		myetheraddr(sc->sc_arpcom.ac_enaddr);

	/*
	 * SBUS config
	 */
	(void) bus_space_read_4(sa->sa_bustag, sc->sc_h2, GEM_SBUS_RESET);
	delay(100);
	bus_space_write_4(sa->sa_bustag, sc->sc_h2, GEM_SBUS_CONFIG,
	    GEM_SBUS_CFG_BSIZE128|GEM_SBUS_CFG_PARITY|GEM_SBUS_CFG_BMODE64);

	/* Establish interrupt handler */
	sc->sc_ih = bus_intr_establish(sa->sa_bustag, sa->sa_pri, IPL_NET, 0,
	    gem_intr, sc, self->dv_xname);

	gem_config(sc);
}
@


1.9
log
@You only need <net/if_dl.h> if you're using LLADDR() or a sockaddr_dl.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_gem_sbus.c,v 1.8 2014/08/11 12:45:45 mpi Exp $	*/
d143 2
a144 2
	bus_intr_establish(sa->sa_bustag, sa->sa_pri, IPL_NET, 0, gem_intr,
	    sc, self->dv_xname);
@


1.8
log
@Fewer <netinet/in_systm.h>
@
text
@d1 1
a1 1
/*	$OpenBSD: if_gem_sbus.c,v 1.7 2013/08/07 01:06:40 bluhm Exp $	*/
a44 1
#include <net/if_dl.h>
@


1.7
log
@Most network drivers include netinet/in_var.h, but apparently they
don't have to.  Just remove these include lines.
Compiled on amd64 i386 sparc64; OK henning@@ mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_gem_sbus.c,v 1.6 2009/07/12 21:27:09 kettenis Exp $	*/
a47 1
#ifdef INET
a48 2
#include <netinet/in_systm.h>
#include <netinet/ip.h>
a49 1
#endif
@


1.6
log
@Don't attach when the PROM didn't give us an interrupt.  Fix printed messages
in error paths while I'm there.  Eliminate a fairly useless local variable
as well.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_gem_sbus.c,v 1.5 2008/11/07 17:44:14 brad Exp $	*/
a50 1
#include <netinet/in_var.h>
@


1.5
log
@Add more initialisation steps (read reset register; pause; set burst size
in config register).

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: if_gem_sbus.c,v 1.4 2008/06/26 05:42:18 ray Exp $	*/
d95 1
a95 1
	/* XXX the following declarations should be elsewhere */
d102 5
d108 1
a108 2
		printf("%s: only %d register sets\n",
			self->dv_xname, sa->sa_nreg);
d125 1
a125 1
		printf("%s: cannot map registers\n", self->dv_xname);
d132 1
a132 1
		printf("%s: cannot map registers\n", self->dv_xname);
d149 2
a150 3
	if (sa->sa_nintr != 0)
		(void)bus_intr_establish(sa->sa_bustag, sa->sa_pri, IPL_NET, 0,
					gem_intr, sc, self->dv_xname);
@


1.4
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_gem_sbus.c,v 1.3 2008/05/13 02:24:08 brad Exp $	*/
d108 2
d139 2
d142 1
a142 1
	    GEM_SBUS_CFG_PARITY|GEM_SBUS_CFG_BMODE64);
@


1.3
log
@Remove commented out NetBSD __KERNEL_RCSID macro usage.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_gem_sbus.c,v 1.2 2006/12/21 22:16:09 jason Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.2
log
@nuke sc_enaddr here too
@
text
@d1 1
a1 1
/*	$OpenBSD: if_gem_sbus.c,v 1.1 2006/11/25 15:54:35 brad Exp $	*/
a42 5

#if 0
#include <sys/cdefs.h>
__KERNEL_RCSID(0, "$NetBSD: if_gem_sbus.c,v 1.1 2006/11/24 13:23:32 martin Exp $");
#endif
@


1.1
log
@initial stab at an SBus front end for gem(4). currently untested.

From martin@@NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d143 2
a144 2
	    sc->sc_enaddr, ETHER_ADDR_LEN) <= 0)
		myetheraddr(sc->sc_enaddr);
@

