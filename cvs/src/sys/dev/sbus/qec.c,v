head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.4
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.13.0.38
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.34
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.24
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.32
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.30
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.28
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.26
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.22
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.20
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.18
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.16
	OPENBSD_5_0:1.13.0.14
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.12
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.10
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.6
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.8
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.4
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.12.0.2
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.2.0.6
	UBC_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.14
date	2017.09.08.05.36.52;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	uRv5pa9QDlZaYgwD;

1.13
date	2008.06.26.05.42.18;	author ray;	state Exp;
branches;
next	1.12;

1.12
date	2007.09.11.13.39.34;	author gilles;	state Exp;
branches;
next	1.11;

1.11
date	2007.09.10.19.49.31;	author gilles;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.02.20.00.56;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.05.04.31.58;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.27.01.36.53;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.24.21.54.38;	author henric;	state Exp;
branches;
next	1.6;

1.6
date	2003.03.27.17.39.05;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.17.01.29.21;	author henric;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.03.16.08;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.27.02;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.31.15.12.05;	author jason;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2001.08.20.22.09.27;	author jason;	state Exp;
branches;
next	;

1.2.4.1
date	2001.10.31.03.22.49;	author nate;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.28.15.09.09;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2003.03.28.00.38.30;	author niklas;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2003.05.13.19.35.11;	author ho;	state Exp;
branches;
next	1.2.4.5;

1.2.4.5
date	2004.02.19.10.56.32;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2002.06.11.03.42.29;	author art;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2003.05.19.22.14.42;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.14
log
@If you use sys/param.h, you don't need sys/types.h
@
text
@/*	$OpenBSD: qec.c,v 1.13 2008/06/26 05:42:18 ray Exp $	*/
/*	$NetBSD: qec.c,v 1.12 2000/12/04 20:12:55 fvdl Exp $ */

/*-
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Paul Kranenburg.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/errno.h>
#include <sys/device.h>
#include <sys/malloc.h>

#include <machine/bus.h>
#include <machine/intr.h>
#include <machine/autoconf.h>

#include <dev/sbus/sbusvar.h>
#include <dev/sbus/qecreg.h>
#include <dev/sbus/qecvar.h>

int	qecprint(void *, const char *);
int	qecmatch(struct device *, void *, void *);
void	qecattach(struct device *, struct device *, void *);
void	qec_init(struct qec_softc *);

int	qec_bus_map(
		bus_space_tag_t,
		bus_space_tag_t,
		bus_addr_t,		/*offset*/
		bus_size_t,		/*size*/
		int,			/*flags*/
		bus_space_handle_t *);
void *	qec_intr_establish(
		bus_space_tag_t,
		bus_space_tag_t,
		int,			/*bus interrupt priority*/
		int,			/*`device class' interrupt level*/
		int,			/*flags*/
		int (*)(void *),	/*handler*/
		void *,			/*arg*/
		const char *);		/*what*/

struct cfattach qec_ca = {
	sizeof(struct qec_softc), qecmatch, qecattach
};

struct cfdriver qec_cd = {
	NULL, "qec", DV_DULL
};

int
qecprint(aux, busname)
	void *aux;
	const char *busname;
{
	struct sbus_attach_args *sa = aux;
	bus_space_tag_t t = sa->sa_bustag;
	struct qec_softc *sc = t->cookie;

	sa->sa_bustag = sc->sc_bustag;	/* XXX */
	sbus_print(aux, busname);	/* XXX */
	sa->sa_bustag = t;		/* XXX */
	return (UNCONF);
}

int
qecmatch(parent, vcf, aux)
	struct device *parent;
	void *vcf;
	void *aux;
{
	struct cfdata *cf = vcf;
	struct sbus_attach_args *sa = aux;

	return (strcmp(cf->cf_driver->cd_name, sa->sa_name) == 0);
}

/*
 * Attach all the sub-devices we can find
 */
void
qecattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct sbus_attach_args *sa = aux;
	struct qec_softc *sc = (void *)self;
	int node;
	int sbusburst;
	struct sparc_bus_space_tag *sbt;
	bus_space_handle_t bh;
	int error;

	sc->sc_bustag = sa->sa_bustag;
	sc->sc_dmatag = sa->sa_dmatag;
	node = sa->sa_node;

	if (sa->sa_nreg < 2) {
		printf("%s: only %d register sets\n",
			self->dv_xname, sa->sa_nreg);
		return;
	}

	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[0].sbr_slot,
	    sa->sa_reg[0].sbr_offset, sa->sa_reg[0].sbr_size,
	    0, 0, &sc->sc_regs) != 0) {
		printf("%s: attach: cannot map registers\n", self->dv_xname);
		return;
	}

	/*
	 * This device's "register space 1" is just a buffer where the
	 * Lance ring-buffers can be stored. Note the buffer's location
	 * and size, so the child driver can pick them up.
	 */
	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[1].sbr_slot,
	    sa->sa_reg[1].sbr_offset, sa->sa_reg[1].sbr_size, 0, 0, &bh) != 0) {
		printf("%s: attach: cannot map registers\n", self->dv_xname);
		return;
	}
	sc->sc_buffer = (caddr_t)bus_space_vaddr(sc->sc_bustag, bh);
	sc->sc_bufsiz = (bus_size_t)sa->sa_reg[1].sbr_size;

	/* Get number of on-board channels */
	sc->sc_nchannels = getpropint(node, "#channels", -1);
	if (sc->sc_nchannels == -1) {
		printf(": no channels\n");
		return;
	}

	/*
	 * Get transfer burst size from PROM
	 */
	sbusburst = ((struct sbus_softc *)parent)->sc_burst;
	if (sbusburst == 0)
		sbusburst = SBUS_BURST_32 - 1; /* 1->16 */

	sc->sc_burst = getpropint(node, "burst-sizes", -1);
	if (sc->sc_burst == -1)
		/* take SBus burst sizes */
		sc->sc_burst = sbusburst;

	/* Clamp at parent's burst sizes */
	sc->sc_burst &= sbusburst;

	/*
	 * Collect address translations from the OBP.
	 */
	error = getprop(node, "ranges", sizeof(struct sbus_range),
			 &sc->sc_nrange, (void **)&sc->sc_range);
	switch (error) {
	case 0:
		break;
	case ENOENT:
	default:
		panic("%s: error getting ranges property", self->dv_xname);
	}

	/* Allocate a bus tag */
	sbt = malloc(sizeof(*sbt), M_DEVBUF, M_NOWAIT | M_ZERO);
	if (sbt == NULL) {
		printf("%s: attach: out of memory\n", self->dv_xname);
		return;
	}

	strlcpy(sbt->name, sc->sc_dev.dv_xname, sizeof(sbt->name));
	sbt->cookie = sc;
	sbt->parent = sc->sc_bustag;
	sbt->asi = sbt->parent->asi;
	sbt->sasi = sbt->parent->sasi;
	sbt->sparc_bus_map = qec_bus_map;
	sbt->sparc_intr_establish = qec_intr_establish;

	/*
	 * Save interrupt information for use in our qec_intr_establish()
	 * function below. Apparently, the intr level for the quad
	 * ethernet board (qe) is stored in the QEC node rather than
	 * separately in each of the QE nodes.
	 *
	 * XXX - qe.c should call bus_intr_establish() with `level = 0'..
	 * XXX - maybe we should have our own attach args for all that.
	 */
	sc->sc_intr = sa->sa_intr;

	printf(": %dK memory\n", sc->sc_bufsiz / 1024);

	qec_init(sc);

	/* search through children */
	for (node = firstchild(node); node; node = nextsibling(node)) {
		struct sbus_attach_args sa;

		sbus_setup_attach_args((struct sbus_softc *)parent,
				       sbt, sc->sc_dmatag, node, &sa);
		(void)config_found(&sc->sc_dev, (void *)&sa, qecprint);
		sbus_destroy_attach_args(&sa);
	}
}

int
qec_bus_map(t, t0, addr, size, flags, hp)
	bus_space_tag_t t;
	bus_space_tag_t t0;
	bus_addr_t addr;
	bus_size_t size;
	int	flags;
	bus_space_handle_t *hp;
{
	struct qec_softc *sc = t->cookie;
	int slot = BUS_ADDR_IOSPACE(addr);
	bus_addr_t offset = BUS_ADDR_PADDR(addr);
	int i;

	for (t = t->parent; t; t = t->parent) {
		if (t->sparc_bus_map != NULL)
			break;
	}

        if (t == NULL) {
                printf("\nqec_bus_map: invalid parent");
                return (EINVAL);
        }

        if (flags & BUS_SPACE_MAP_PROMADDRESS) {
                return ((*t->sparc_bus_map)
                    (t, t0, offset, size, flags, hp));
        }

	for (i = 0; i < sc->sc_nrange; i++) {
		bus_addr_t paddr;
		int iospace;

		if (sc->sc_range[i].cspace != slot)
			continue;

		/* We've found the connection to the parent bus */
		paddr = sc->sc_range[i].poffset + offset;
		iospace = sc->sc_range[i].pspace;
                return ((*t->sparc_bus_map)
                    (t, t0, BUS_ADDR(iospace, paddr), size, flags, hp));
	}

	return (EINVAL);
}

void *
qec_intr_establish(t, t0, pri, level, flags, handler, arg, what)
	bus_space_tag_t t;
	bus_space_tag_t t0;
	int pri;
	int level;
	int flags;
	int (*handler)(void *);
	void *arg;
	const char *what;
{
	struct qec_softc *sc = t->cookie;

	if (pri == 0) {
		/*
		 * qe.c calls bus_intr_establish() with `pri == 0'
		 * XXX - see also comment in qec_attach().
		 */
		if (sc->sc_intr == NULL) {
			printf("%s: warning: no interrupts\n",
				sc->sc_dev.dv_xname);
			return (NULL);
		}
		pri = sc->sc_intr->sbi_pri;
	}

	for (t = t->parent; t; t = t->parent) {
		if (t->sparc_intr_establish != NULL)
			return ((*t->sparc_intr_establish)
			    (t, t0, pri, level, flags, handler, arg, what));
	}

	panic("qec_intr_extablish): no handler found");

	return (NULL);
}

void
qec_init(sc)
	struct qec_softc *sc;
{
	bus_space_tag_t t = sc->sc_bustag;
	bus_space_handle_t qr = sc->sc_regs;
	u_int32_t v, burst = 0, psize;
	int i;

	/* First, reset the controller */
	bus_space_write_4(t, qr, QEC_QRI_CTRL, QEC_CTRL_RESET);
	for (i = 0; i < 1000; i++) {
		DELAY(100);
		v = bus_space_read_4(t, qr, QEC_QRI_CTRL);
		if ((v & QEC_CTRL_RESET) == 0)
			break;
	}

	/*
	 * Cut available buffer size into receive and transmit buffers.
	 * XXX - should probably be done in be & qe driver...
	 */
	v = sc->sc_msize = sc->sc_bufsiz / sc->sc_nchannels;
	bus_space_write_4(t, qr, QEC_QRI_MSIZE, v);

	v = sc->sc_rsize = sc->sc_bufsiz / (sc->sc_nchannels * 2);
	bus_space_write_4(t, qr, QEC_QRI_RSIZE, v);
	bus_space_write_4(t, qr, QEC_QRI_TSIZE, v);

	psize = sc->sc_nchannels == 1 ? QEC_PSIZE_2048 : 0;
	bus_space_write_4(t, qr, QEC_QRI_PSIZE, psize);

	if (sc->sc_burst & SBUS_BURST_64)
		burst = QEC_CTRL_B64;
	else if (sc->sc_burst & SBUS_BURST_32)
		burst = QEC_CTRL_B32;
	else
		burst = QEC_CTRL_B16;

	v = bus_space_read_4(t, qr, QEC_QRI_CTRL);
	v = (v & QEC_CTRL_MODEMASK) | burst;
	bus_space_write_4(t, qr, QEC_QRI_CTRL, v);
}

/*
 * Common routine to initialize the QEC packet ring buffer.
 * Called from be & qe drivers.
 */
void
qec_meminit(qr, pktbufsz)
	struct qec_ring *qr;
	unsigned int pktbufsz;
{
	bus_addr_t txbufdma, rxbufdma;
	bus_addr_t dma;
	caddr_t p;
	unsigned int ntbuf, nrbuf, i;

	p = qr->rb_membase;
	dma = qr->rb_dmabase;

	ntbuf = qr->rb_ntbuf;
	nrbuf = qr->rb_nrbuf;

	/*
	 * Allocate transmit descriptors
	 */
	qr->rb_txd = (struct qec_xd *)p;
	qr->rb_txddma = dma;
	p += QEC_XD_RING_MAXSIZE * sizeof(struct qec_xd);
	dma += QEC_XD_RING_MAXSIZE * sizeof(struct qec_xd);

	/*
	 * Allocate receive descriptors
	 */
	qr->rb_rxd = (struct qec_xd *)p;
	qr->rb_rxddma = dma;
	p += QEC_XD_RING_MAXSIZE * sizeof(struct qec_xd);
	dma += QEC_XD_RING_MAXSIZE * sizeof(struct qec_xd);


	/*
	 * Allocate transmit buffers
	 */
	qr->rb_txbuf = p;
	txbufdma = dma;
	p += ntbuf * pktbufsz;
	dma += ntbuf * pktbufsz;

	/*
	 * Allocate receive buffers
	 */
	qr->rb_rxbuf = p;
	rxbufdma = dma;
	p += nrbuf * pktbufsz;
	dma += nrbuf * pktbufsz;

	/*
	 * Initialize transmit buffer descriptors
	 */
	for (i = 0; i < QEC_XD_RING_MAXSIZE; i++) {
		qr->rb_txd[i].xd_addr = (u_int32_t)
			(txbufdma + (i % ntbuf) * pktbufsz);
		qr->rb_txd[i].xd_flags = 0;
	}

	/*
	 * Initialize receive buffer descriptors
	 */
	for (i = 0; i < QEC_XD_RING_MAXSIZE; i++) {
		qr->rb_rxd[i].xd_addr = (u_int32_t)
			(rxbufdma + (i % nrbuf) * pktbufsz);
		qr->rb_rxd[i].xd_flags = (i < nrbuf)
			? QEC_XD_OWN | (pktbufsz & QEC_XD_LENGTH)
			: 0;
	}

	qr->rb_tdhead = qr->rb_tdtail = 0;
	qr->rb_td_nbusy = 0;
	qr->rb_rdtail = 0;
}
@


1.13
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: qec.c,v 1.12 2007/09/11 13:39:34 gilles Exp $	*/
a32 1
#include <sys/types.h>
@


1.12
log
@KNF

prompted and "much better" by marco@@, ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: qec.c,v 1.11 2007/09/10 19:49:31 gilles Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.11
log
@more MALLOC/FREE -> malloc/free and M_ZERO changes

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: qec.c,v 1.10 2006/06/02 20:00:56 miod Exp $	*/
d195 1
a195 1
	sbt = malloc(sizeof(*sbt), M_DEVBUF, M_NOWAIT|M_ZERO);
@


1.10
log
@sbus_establish() and the associated linked list in the sbus softc is now only
used to store a per-device reset callback, for use in sbusreset(). Except
sbusreset() has never, ever, been used since Torek's sbus code went in.
Time to recycle those wasted bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: qec.c,v 1.9 2004/12/05 04:31:58 jsg Exp $	*/
d195 1
a195 1
	sbt = malloc(sizeof(*sbt), M_DEVBUF, M_NOWAIT);
a200 1
	bzero(sbt, sizeof *sbt);
@


1.9
log
@rather then -> rather than
@
text
@d1 1
a1 1
/*	$OpenBSD: qec.c,v 1.8 2003/06/27 01:36:53 jason Exp $	*/
a179 2

	sbus_establish(&sc->sc_sd, &sc->sc_dev);
@


1.8
log
@These don't need linear mappings either.
@
text
@d1 1
a1 1
/*	$OpenBSD: qec.c,v 1.7 2003/06/24 21:54:38 henric Exp $	*/
d215 1
a215 1
	 * ethernet board (qe) is stored in the QEC node rather then
@


1.7
log
@Add a "where" argument to the sparc64 interrupt code.  This lets us
associate a name with each interrupt handler.  This is not visible
outside the kernel (yet).

ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: qec.c,v 1.6 2003/03/27 17:39:05 jason Exp $	*/
d139 3
a141 5
	if (sbus_bus_map(sa->sa_bustag,
			 sa->sa_reg[0].sbr_slot,
			 sa->sa_reg[0].sbr_offset,
			 sa->sa_reg[0].sbr_size,
			 BUS_SPACE_MAP_LINEAR, 0, &sc->sc_regs) != 0) {
d151 2
a152 5
	if (sbus_bus_map(sa->sa_bustag,
			 sa->sa_reg[1].sbr_slot,
			 sa->sa_reg[1].sbr_offset,
			 sa->sa_reg[1].sbr_size,
			 BUS_SPACE_MAP_LINEAR, 0, &bh) != 0) {
@


1.6
log
@const and static cleaning
@
text
@d1 1
a1 1
/*	$OpenBSD: qec.c,v 1.5 2003/02/17 01:29:21 henric Exp $	*/
d75 2
a76 1
		void *);		/*arg*/
d290 1
a290 1
qec_intr_establish(t, t0, pri, level, flags, handler, arg)
d298 1
d315 5
a319 4
        if (t->parent == 0 || t->parent->sparc_bus_mmap == 0) {
                printf("\nebus_bus_mmap: invalid parent");
                return (NULL);
        }
d321 1
a321 1
        t = t->parent;
d323 1
a323 2
        return ((*t->sparc_intr_establish)(t, t0, pri, level, flags,
            handler, arg));
@


1.5
log
@
Add support for the Sun Enterprise 450
Reduce the size of a GENERIC kernel by ~190k
Remove the nasty pointer/bus_space_handle_t casts
Adds debug bus_space code including the ability to trace
    bus operations (it actually works now).

The following rules are now followed (and verfified by the debug
code):

1.  A "bus_space_handle_t" may only be used with the
    "bus_space_tag_t" that created it.
2.  Only "bus_space_map()" may create "bus_space_handle_t"s.
3.  A "bus_space_handle_t" may not be modified after it has
    been created (other than being destroyed by "bus_space_unmap()").


Thanks to help from mcbride, marc, jason, drahn, to anyone that might
have slipped my mind at the moment.

ok jason@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: qec.c,v 1.4 2002/03/14 03:16:08 millert Exp $	*/
d56 4
a59 4
static int	qecprint(void *, const char *);
static int	qecmatch(struct device *, void *, void *);
static void	qecattach(struct device *, struct device *, void *);
void		qec_init(struct qec_softc *);
d61 1
a61 1
static int qec_bus_map(
d68 1
a68 1
static void *qec_intr_establish(
@


1.4
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: qec.c,v 1.3 2002/03/14 01:27:02 millert Exp $	*/
d63 1
a63 1
		bus_type_t,		/*slot*/
a66 1
		vaddr_t,		/*preferred virtual address */
d70 1
d124 1
a124 1
	bus_space_tag_t sbt;
d160 1
a160 1
	sc->sc_buffer = (caddr_t)(u_long)bh;
d201 1
a201 2
	sbt = (bus_space_tag_t)
		malloc(sizeof(struct sparc_bus_space_tag), M_DEVBUF, M_NOWAIT);
d208 1
d211 2
d243 1
a243 1
qec_bus_map(t, btype, offset, size, flags, vaddr, hp)
d245 2
a246 2
	bus_type_t btype;
	bus_addr_t offset;
a248 1
	vaddr_t vaddr;
d252 2
a253 1
	int slot = btype;
d256 15
d273 1
a273 1
		bus_type_t iospace;
d281 2
a282 2
		return (bus_space_map2(sc->sc_bustag, iospace, paddr,
					size, flags, vaddr, hp));
d289 1
a289 1
qec_intr_establish(t, pri, level, flags, handler, arg)
d291 1
d313 9
a321 1
	return (bus_intr_establish(t->parent, pri, level, flags, handler, arg));
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: qec.c,v 1.2 2001/08/31 15:12:05 jason Exp $	*/
d69 1
a69 1
static void *qec_intr_establish __P((
d75 1
a75 1
		void *));		/*arg*/
@


1.2
log
@implement autoconf mechanism using device_register(); from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: qec.c,v 1.1 2001/08/20 22:09:27 jason Exp $	*/
d56 4
a59 4
static int	qecprint	__P((void *, const char *));
static int	qecmatch	__P((struct device *, void *, void *));
static void	qecattach	__P((struct device *, struct device *, void *));
void		qec_init	__P((struct qec_softc *));
d61 1
a61 1
static int qec_bus_map __P((
d68 1
a68 1
		bus_space_handle_t *));
d74 1
a74 1
		int (*) __P((void *)),	/*handler*/
d277 1
a277 1
	int (*handler) __P((void *));
@


1.2.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: qec.c,v 1.2 2001/08/31 15:12:05 jason Exp $	*/
d56 4
a59 4
static int	qecprint(void *, const char *);
static int	qecmatch(struct device *, void *, void *);
static void	qecattach(struct device *, struct device *, void *);
void		qec_init(struct qec_softc *);
d61 1
a61 1
static int qec_bus_map(
d68 2
a69 2
		bus_space_handle_t *);
static void *qec_intr_establish(
d74 2
a75 2
		int (*)(void *),	/*handler*/
		void *);		/*arg*/
d277 1
a277 1
	int (*handler)(void *);
@


1.2.6.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d56 4
a59 4
int	qecprint(void *, const char *);
int	qecmatch(struct device *, void *, void *);
void	qecattach(struct device *, struct device *, void *);
void	qec_init(struct qec_softc *);
d61 1
a61 2
int	qec_bus_map(
		bus_space_tag_t,
d63 1
d67 1
d69 1
a69 2
void *	qec_intr_establish(
		bus_space_tag_t,
d124 1
a124 1
	struct sparc_bus_space_tag *sbt;
d160 1
a160 1
	sc->sc_buffer = (caddr_t)bus_space_vaddr(sc->sc_bustag, bh);
d201 2
a202 1
	sbt = malloc(sizeof(*sbt), M_DEVBUF, M_NOWAIT);
a208 1
	strlcpy(sbt->name, sc->sc_dev.dv_xname, sizeof(sbt->name));
a210 2
	sbt->asi = sbt->parent->asi;
	sbt->sasi = sbt->parent->sasi;
d241 1
a241 1
qec_bus_map(t, t0, addr, size, flags, hp)
d243 2
a244 2
	bus_space_tag_t t0;
	bus_addr_t addr;
d247 1
d251 1
a251 2
	int slot = BUS_ADDR_IOSPACE(addr);
	bus_addr_t offset = BUS_ADDR_PADDR(addr);
a253 15
	for (t = t->parent; t; t = t->parent) {
		if (t->sparc_bus_map != NULL)
			break;
	}

        if (t == NULL) {
                printf("\nqec_bus_map: invalid parent");
                return (EINVAL);
        }

        if (flags & BUS_SPACE_MAP_PROMADDRESS) {
                return ((*t->sparc_bus_map)
                    (t, t0, offset, size, flags, hp));
        }

d256 1
a256 1
		int iospace;
d264 2
a265 2
                return ((*t->sparc_bus_map)
                    (t, t0, BUS_ADDR(iospace, paddr), size, flags, hp));
d272 1
a272 1
qec_intr_establish(t, t0, pri, level, flags, handler, arg)
a273 1
	bus_space_tag_t t0;
d295 1
a295 9
        if (t->parent == 0 || t->parent->sparc_bus_mmap == 0) {
                printf("\nebus_bus_mmap: invalid parent");
                return (NULL);
        }

        t = t->parent;

        return ((*t->sparc_intr_establish)(t, t0, pri, level, flags,
            handler, arg));
@


1.2.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2.4.2
log
@Merge in -current from roughly a week ago
@
text
@d56 4
a59 4
static int	qecprint(void *, const char *);
static int	qecmatch(struct device *, void *, void *);
static void	qecattach(struct device *, struct device *, void *);
void		qec_init(struct qec_softc *);
d61 1
a61 1
static int qec_bus_map(
d68 2
a69 2
		bus_space_handle_t *);
static void *qec_intr_establish(
d74 2
a75 2
		int (*)(void *),	/*handler*/
		void *);		/*arg*/
d277 1
a277 1
	int (*handler)(void *);
@


1.2.4.3
log
@Sync the SMP branch with 3.3
@
text
@d63 1
a63 1
		bus_space_tag_t,
d67 1
a70 1
		bus_space_tag_t,
d124 1
a124 1
	struct sparc_bus_space_tag *sbt;
d160 1
a160 1
	sc->sc_buffer = (caddr_t)bus_space_vaddr(sc->sc_bustag, bh);
d201 2
a202 1
	sbt = malloc(sizeof(*sbt), M_DEVBUF, M_NOWAIT);
a208 1
	strlcpy(sbt->name, sc->sc_dev.dv_xname, sizeof(sbt->name));
a210 2
	sbt->asi = sbt->parent->asi;
	sbt->sasi = sbt->parent->sasi;
d241 1
a241 1
qec_bus_map(t, t0, addr, size, flags, hp)
d243 2
a244 2
	bus_space_tag_t t0;
	bus_addr_t addr;
d247 1
d251 1
a251 2
	int slot = BUS_ADDR_IOSPACE(addr);
	bus_addr_t offset = BUS_ADDR_PADDR(addr);
a253 15
	for (t = t->parent; t; t = t->parent) {
		if (t->sparc_bus_map != NULL)
			break;
	}

        if (t == NULL) {
                printf("\nqec_bus_map: invalid parent");
                return (EINVAL);
        }

        if (flags & BUS_SPACE_MAP_PROMADDRESS) {
                return ((*t->sparc_bus_map)
                    (t, t0, offset, size, flags, hp));
        }

d256 1
a256 1
		int iospace;
d264 2
a265 2
                return ((*t->sparc_bus_map)
                    (t, t0, BUS_ADDR(iospace, paddr), size, flags, hp));
d272 1
a272 1
qec_intr_establish(t, t0, pri, level, flags, handler, arg)
a273 1
	bus_space_tag_t t0;
d295 1
a295 9
        if (t->parent == 0 || t->parent->sparc_bus_mmap == 0) {
                printf("\nebus_bus_mmap: invalid parent");
                return (NULL);
        }

        t = t->parent;

        return ((*t->sparc_intr_establish)(t, t0, pri, level, flags,
            handler, arg));
@


1.2.4.4
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: qec.c,v 1.2.4.3 2003/03/28 00:38:30 niklas Exp $	*/
d56 4
a59 4
int	qecprint(void *, const char *);
int	qecmatch(struct device *, void *, void *);
void	qecattach(struct device *, struct device *, void *);
void	qec_init(struct qec_softc *);
d61 1
a61 1
int	qec_bus_map(
d68 1
a68 1
void *	qec_intr_establish(
@


1.2.4.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d75 1
a75 2
		void *,			/*arg*/
		const char *);		/*what*/
d138 5
a142 3
	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[0].sbr_slot,
	    sa->sa_reg[0].sbr_offset, sa->sa_reg[0].sbr_size,
	    0, 0, &sc->sc_regs) != 0) {
d152 5
a156 2
	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[1].sbr_slot,
	    sa->sa_reg[1].sbr_offset, sa->sa_reg[1].sbr_size, 0, 0, &bh) != 0) {
d289 1
a289 1
qec_intr_establish(t, t0, pri, level, flags, handler, arg, what)
a296 1
	const char *what;
d313 4
a316 5
	for (t = t->parent; t; t = t->parent) {
		if (t->sparc_intr_establish != NULL)
			return ((*t->sparc_intr_establish)
			    (t, t0, pri, level, flags, handler, arg, what));
	}
d318 1
a318 1
	panic("qec_intr_extablish): no handler found");
d320 2
a321 1
	return (NULL);
@


1.1
log
@add qec+qe stuff from NetBSD (originally from OpenBSD... funny circle, eh?)
including:
- OpenBSD style boot determination
- local version of media handling
- other local modifications, too.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a125 1
	struct bootpath *bp;
a228 6
	bp = sa->sa_bp;
	if (bp != NULL && strcmp(bp->name, qec_cd.cd_name) == 0)
		bp = bp + 1;
	else
		bp = NULL;

a234 1
		sa.sa_bp = bp;
@

