head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.16
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.12
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.10
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.8
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.6
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.18.0.20
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.18
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.16
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.14
	OPENBSD_5_0:1.18.0.12
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.10
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.8
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.4
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.6
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.2
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.17.0.8
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.6
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.4
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.2
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.16.0.2
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.15.0.6
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.4
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.2
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.7
	SMP:1.7.0.2
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	UBC_SYNC_B:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	UBC:1.1.0.2;
locks; strict;
comment	@ * @;


1.19
date	2013.10.20.20.07.30;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2008.12.27.17.23.03;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2006.12.17.22.18.16;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2006.06.02.20.00.56;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2005.03.15.18.40.16;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2005.03.07.16.44.52;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2005.03.01.21.23.36;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2005.01.05.23.04.25;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2004.11.29.22.07.40;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.27.01.36.53;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.18.17.35.30;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.18.32.41;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.27.17.40.04;	author jason;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2003.02.12.19.41.20;	author henric;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.10.03.18.59;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.12.16.18.59;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.06.03.48.45;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.25.19.04.46;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.04.19.42.53;	author jason;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2002.06.11.03.42.29;	author art;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.10.29.00.33.31;	author art;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2003.05.19.22.14.42;	author tedu;	state Exp;
branches;
next	;

1.7.2.1
date	2003.04.19.19.17.50;	author niklas;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2003.05.13.19.35.10;	author ho;	state Exp;
branches;
next	1.7.2.3;

1.7.2.3
date	2003.06.07.11.02.32;	author ho;	state Exp;
branches;
next	1.7.2.4;

1.7.2.4
date	2004.02.19.10.56.32;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Use C99 named initializers for struct wsdisplay_accessops fields.
No functional change.
@
text
@/*	$OpenBSD: bwtwo.c,v 1.18 2008/12/27 17:23:03 miod Exp $	*/

/*
 * Copyright (c) 2002 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/errno.h>
#include <sys/device.h>
#include <sys/ioctl.h>
#include <sys/malloc.h>

#include <machine/bus.h>
#include <machine/intr.h>
#include <machine/autoconf.h>
#include <machine/openfirm.h>

#include <dev/sbus/sbusvar.h>
#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wsdisplayvar.h>
#include <dev/rasops/rasops.h>
#include <machine/fbvar.h>

#define	BWTWO_CTRL_OFFSET	0x400000
#define	BWTWO_CTRL_SIZE	(sizeof(u_int32_t) * 8)
#define	BWTWO_VID_OFFSET	0x800000
#define	BWTWO_VID_SIZE	(1024 * 1024)

#define	FBC_CTRL	0x10		/* control */
#define	FBC_STAT	0x11		/* status */
#define	FBC_START	0x12		/* cursor start */
#define	FBC_END		0x13		/* cursor end */
#define	FBC_VCTRL	0x14		/* 12 bytes of timing goo */

#define	FBC_CTRL_IENAB		0x80	/* interrupt enable */
#define	FBC_CTRL_VENAB		0x40	/* video enable */
#define	FBC_CTRL_TIME		0x20	/* timing enable */
#define	FBC_CTRL_CURS		0x10	/* cursor compare enable */
#define	FBC_CTRL_XTAL		0x0c	/* xtal select (0,1,2,test): */
#define	FBC_CTRL_XTAL_0		0x00	/*  0 */
#define	FBC_CTRL_XTAL_1		0x04	/*  0 */
#define	FBC_CTRL_XTAL_2		0x08	/*  0 */
#define	FBC_CTRL_XTAL_TEST	0x0c	/*  0 */
#define	FBC_CTRL_DIV		0x03	/* divisor (1,2,3,4): */
#define	FBC_CTRL_DIV_1		0x00	/*  / 1 */
#define	FBC_CTRL_DIV_2		0x01	/*  / 2 */
#define	FBC_CTRL_DIV_3		0x02	/*  / 3 */
#define	FBC_CTRL_DIV_4		0x03	/*  / 4 */

#define	FBC_STAT_INTR		0x80	/* interrupt pending */
#define	FBC_STAT_RES		0x70	/* monitor sense: */
#define	FBC_STAT_RES_1024	0x10	/*  1024x768 */
#define	FBC_STAT_RES_1280	0x40	/*  1280x1024 */
#define	FBC_STAT_RES_1152	0x30	/*  1152x900 */
#define	FBC_STAT_RES_1152A	0x40	/*  1152x900x76, A */
#define	FBC_STAT_RES_1600	0x50	/*  1600x1200 */
#define	FBC_STAT_RES_1152B	0x60	/*  1152x900x86, B */
#define	FBC_STAT_ID		0x0f	/* id mask: */
#define	FBC_STAT_ID_COLOR	0x01	/*  color */
#define	FBC_STAT_ID_MONO	0x02	/*  monochrome */
#define	FBC_STAT_ID_MONOECL	0x03	/*  monochrome, ecl */

#define	FBC_READ(sc, reg) \
    bus_space_read_1((sc)->sc_bustag, (sc)->sc_ctrl_regs, (reg))
#define	FBC_WRITE(sc, reg, val) \
    bus_space_write_1((sc)->sc_bustag, (sc)->sc_ctrl_regs, (reg), (val))

struct bwtwo_softc {
	struct sunfb sc_sunfb;
	bus_space_tag_t sc_bustag;
	bus_addr_t sc_paddr;
	bus_space_handle_t sc_ctrl_regs;
	bus_space_handle_t sc_vid_regs;
	int sc_nscreens;
};

int bwtwo_ioctl(void *, u_long, caddr_t, int, struct proc *);
paddr_t bwtwo_mmap(void *, off_t, int);
int bwtwo_is_console(int);
void bwtwo_burner(void *, u_int, u_int);

struct wsdisplay_accessops bwtwo_accessops = {
	.ioctl = bwtwo_ioctl,
	.mmap = bwtwo_mmap,
	.burn_screen = bwtwo_burner
};

int	bwtwomatch(struct device *, void *, void *);
void	bwtwoattach(struct device *, struct device *, void *);

struct cfattach bwtwo_ca = {
	sizeof (struct bwtwo_softc), bwtwomatch, bwtwoattach
};

struct cfdriver bwtwo_cd = {
	NULL, "bwtwo", DV_DULL
};

int
bwtwomatch(parent, vcf, aux)
	struct device *parent;
	void *vcf, *aux;
{
	struct cfdata *cf = vcf;
	struct sbus_attach_args *sa = aux;

	return (strcmp(cf->cf_driver->cd_name, sa->sa_name) == 0);
}

void    
bwtwoattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct bwtwo_softc *sc = (struct bwtwo_softc *)self;
	struct sbus_attach_args *sa = aux;
	int node, console;
	const char *nam;

	node = sa->sa_node;
	sc->sc_bustag = sa->sa_bustag;
	sc->sc_paddr = sbus_bus_addr(sa->sa_bustag, sa->sa_slot, sa->sa_offset);

	fb_setsize(&sc->sc_sunfb, 1, 1152, 900, node, 0);

	if (sa->sa_nreg != 1) {
		printf(": expected %d registers, got %d\n", 1, sa->sa_nreg);
		goto fail;
	}

	/*
	 * Map just CTRL and video RAM.
	 */
	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[0].sbr_slot,
	    sa->sa_reg[0].sbr_offset + BWTWO_CTRL_OFFSET,
	    BWTWO_CTRL_SIZE, 0, 0, &sc->sc_ctrl_regs) != 0) {
		printf(": cannot map ctrl registers\n");
		goto fail_ctrl;
	}

	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[0].sbr_slot,
	    sa->sa_reg[0].sbr_offset + BWTWO_VID_OFFSET,
	    sc->sc_sunfb.sf_fbsize, BUS_SPACE_MAP_LINEAR,
	    0, &sc->sc_vid_regs) != 0) {
		printf(": cannot map vid registers\n");
		goto fail_vid;
	}

	nam = getpropstring(node, "model");
	if (*nam == '\0')
		nam = sa->sa_name;
	printf(": %s", nam);

	console = bwtwo_is_console(node);

	bwtwo_burner(sc, 1, 0);

	printf(", %dx%d\n", sc->sc_sunfb.sf_width, sc->sc_sunfb.sf_height);

	sc->sc_sunfb.sf_ro.ri_bits = (void *)bus_space_vaddr(sc->sc_bustag,
	    sc->sc_vid_regs);
	sc->sc_sunfb.sf_ro.ri_hw = sc;
	fbwscons_init(&sc->sc_sunfb, 0, console);
	
	if (console)
		fbwscons_console_init(&sc->sc_sunfb, -1);

	fbwscons_attach(&sc->sc_sunfb, &bwtwo_accessops, console);

	return;

fail_vid:
	bus_space_unmap(sa->sa_bustag, sc->sc_ctrl_regs, BWTWO_CTRL_SIZE);
fail_ctrl:
fail:
;
}

int
bwtwo_ioctl(v, cmd, data, flags, p)
	void *v;
	u_long cmd;
	caddr_t data;
	int flags;
	struct proc *p;
{
	struct bwtwo_softc *sc = v;
	struct wsdisplay_fbinfo *wdf;

	switch (cmd) {
	case WSDISPLAYIO_GTYPE:
		*(u_int *)data = WSDISPLAY_TYPE_SUNBW;
		break;
	case WSDISPLAYIO_GINFO:
		wdf = (void *)data;
		wdf->height = sc->sc_sunfb.sf_height;
		wdf->width  = sc->sc_sunfb.sf_width;
		wdf->depth  = sc->sc_sunfb.sf_depth;
		wdf->cmsize = 0;
		break;
	case WSDISPLAYIO_LINEBYTES:
		*(u_int *)data = sc->sc_sunfb.sf_linebytes;
		break;

	case WSDISPLAYIO_GETCMAP:
	case WSDISPLAYIO_PUTCMAP:
		break;

	case WSDISPLAYIO_SVIDEO:
	case WSDISPLAYIO_GVIDEO:
		break;

	case WSDISPLAYIO_GCURPOS:
	case WSDISPLAYIO_SCURPOS:
	case WSDISPLAYIO_GCURMAX:
	case WSDISPLAYIO_GCURSOR:
	case WSDISPLAYIO_SCURSOR:
	default:
		return -1; /* not supported yet */
        }

	return (0);
}

paddr_t
bwtwo_mmap(v, offset, prot)
	void *v;
	off_t offset;
	int prot;
{
	struct bwtwo_softc *sc = v;

	if (offset & PGOFSET)
		return (-1);

	if (offset >= 0 && offset < sc->sc_sunfb.sf_fbsize)
		return (bus_space_mmap(sc->sc_bustag, sc->sc_paddr,
		    BWTWO_VID_OFFSET + offset, prot, BUS_SPACE_MAP_LINEAR));

	return (-1);
}

int
bwtwo_is_console(node)
	int node;
{
	extern int fbnode;

	return (fbnode == node);
}

void
bwtwo_burner(vsc, on, flags)
	void *vsc;
	u_int on, flags;
{
	struct bwtwo_softc *sc = vsc;
	int s;
	u_int8_t fbc;

	s = splhigh();
	fbc = FBC_READ(sc, FBC_CTRL);
	if (on)
		fbc |= FBC_CTRL_VENAB | FBC_CTRL_TIME;
	else {
		fbc &= ~FBC_CTRL_VENAB;
		if (flags & WSDISPLAY_BURN_VBLANK)
			fbc &= ~FBC_CTRL_TIME;
	}
	FBC_WRITE(sc, FBC_CTRL, fbc);
	splx(s);
}
@


1.18
log
@Sync the sparc64 fb* api with the recent changes done on sparc.
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.17 2006/12/17 22:18:16 miod Exp $	*/
d112 3
a114 9
	bwtwo_ioctl,
	bwtwo_mmap,
	NULL,	/* alloc_screen */
	NULL,	/* free_screen */
	NULL,	/* show_screen */
	NULL,	/* load_font */
	NULL,	/* scrollback */
	NULL,	/* getchar */
	bwtwo_burner,
@


1.17
log
@Remove unnecessary <dev/wscons/wscons_raster.h> inclusion.
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.16 2006/06/02 20:00:56 miod Exp $	*/
a106 5
int bwtwo_alloc_screen(void *, const struct wsscreen_descr *, void **,
    int *, int *, long *);
void bwtwo_free_screen(void *, void *);
int bwtwo_show_screen(void *, void *, int, void (*cb)(void *, int, int),
    void *);
d114 3
a116 3
	bwtwo_alloc_screen,
	bwtwo_free_screen,
	bwtwo_show_screen,
d198 1
a198 1
	fbwscons_init(&sc->sc_sunfb, console ? 0 : RI_CLEAR);
d200 1
a200 1
	if (console) {
a201 1
	}
a258 46

int
bwtwo_alloc_screen(v, type, cookiep, curxp, curyp, attrp)
	void *v;
	const struct wsscreen_descr *type;
	void **cookiep;
	int *curxp, *curyp;
	long *attrp;
{
	struct bwtwo_softc *sc = v;

	if (sc->sc_nscreens > 0)
		return (ENOMEM);

	*cookiep = &sc->sc_sunfb.sf_ro;
	*curyp = 0;
	*curxp = 0;
	sc->sc_sunfb.sf_ro.ri_ops.alloc_attr(&sc->sc_sunfb.sf_ro,
	    0, 0, 0, attrp);
	sc->sc_nscreens++;
	return (0);
}

void
bwtwo_free_screen(v, cookie)
	void *v;
	void *cookie;
{
	struct bwtwo_softc *sc = v;

	sc->sc_nscreens--;
}

int
bwtwo_show_screen(v, cookie, waitok, cb, cbarg)
	void *v;
	void *cookie;
	int waitok;
	void (*cb)(void *, int, int);
	void *cbarg;
{
	return (0);
}

#define	START		(128 * 1024 + 128 * 1024)
#define	NOOVERLAY	(0x04000000)
@


1.16
log
@sbus_establish() and the associated linked list in the sbus softc is now only
used to store a per-device reset callback, for use in sbusreset(). Except
sbusreset() has never, ever, been used since Torek's sbus code went in.
Time to recycle those wasted bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.15 2005/03/15 18:40:16 miod Exp $	*/
a49 1
#include <dev/wscons/wscons_raster.h>
@


1.15
log
@Take care of updating the PROMs view of the cursor position in the common fb
code, rather than doing this in only a subset of the fb drivers.
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.14 2005/03/07 16:44:52 miod Exp $	*/
a99 1
	struct sbusdev sc_sd;
a195 2

	sbus_establish(&sc->sc_sd, &sc->sc_sunfb.sf_dev);
@


1.14
log
@Do not bother passing the blanking routine to fbwscons_console_init(),
as fbwscons_attach() can find it on its own.
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.13 2005/03/01 21:23:36 miod Exp $	*/
a116 1
void bwtwo_updatecursor(struct rasops_info *);
a209 1
		sc->sc_sunfb.sf_ro.ri_updatecursor = bwtwo_updatecursor;
a362 12
}

void
bwtwo_updatecursor(ri)
	struct rasops_info *ri;
{
	struct bwtwo_softc *sc = ri->ri_hw;

	if (sc->sc_sunfb.sf_crowp != NULL)
		*sc->sc_sunfb.sf_crowp = ri->ri_crow;
	if (sc->sc_sunfb.sf_ccolp != NULL)
		*sc->sc_sunfb.sf_ccolp = ri->ri_ccol;
@


1.13
log
@Display hardware name and display resolution at attach time, as done on sparc.
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.12 2005/01/05 23:04:25 miod Exp $	*/
d212 1
a212 1
		fbwscons_console_init(&sc->sc_sunfb, -1, bwtwo_burner);
@


1.12
log
@Let wsdisplay drivers return zero for WSDISPLAYIO_[GS]VIDEO ioctls - most
of the work is done in the upper layer, but they get to see the ioctl,
so don't always return an error.
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.11 2004/11/29 22:07:40 miod Exp $	*/
d160 2
a161 1
	int console;
d163 1
d167 1
a167 1
	fb_setsize(&sc->sc_sunfb, 1, 1152, 900, sa->sa_node, 0);
d192 6
a197 1
	console = bwtwo_is_console(sa->sa_node);
d203 1
a203 1
	printf("\n");
@


1.11
log
@Move the struct wsscreen_descr from a per-driver global to a per-instance
field of the sunfb structure. This allows multiple instances of the same driver,
but with different resolutions (such as a couple of vigra or a TGX cgsix and
a TGX+ cgsix) to use distinct wsscreen_descr structures featuring different
resolution information.

Doing this allows more wsscreen_descr fiddling inside the sparc* fb api,
and results in some code shrinkage (about 4KB on sparc GENERIC).
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.10 2003/06/27 01:36:53 jason Exp $	*/
d251 2
@


1.10
log
@These don't need linear mappings either.
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.9 2003/06/18 17:35:30 miod Exp $	*/
a107 13
struct wsscreen_descr bwtwo_stdscreen = {
	"std",
};

const struct wsscreen_descr *bwtwo_scrlist[] = {
	&bwtwo_stdscreen,
	/* XXX other formats? */
};

struct wsscreen_list bwtwo_screenlist = {
	sizeof(bwtwo_scrlist) / sizeof(struct wsscreen_descr *), bwtwo_scrlist
};

a159 1
	struct wsemuldisplaydev_attach_args waa;
a202 5
	bwtwo_stdscreen.capabilities = sc->sc_sunfb.sf_ro.ri_caps;
	bwtwo_stdscreen.nrows = sc->sc_sunfb.sf_ro.ri_rows;
	bwtwo_stdscreen.ncols = sc->sc_sunfb.sf_ro.ri_cols;
	bwtwo_stdscreen.textops = &sc->sc_sunfb.sf_ro.ri_ops;

d205 1
a205 2
		fbwscons_console_init(&sc->sc_sunfb, &bwtwo_stdscreen, -1,
		    bwtwo_burner);
d208 1
a208 5
	waa.console = console;
	waa.scrdata = &bwtwo_screenlist;
	waa.accessops = &bwtwo_accessops;
	waa.accesscookie = sc;
	config_found(self, &waa, wsemuldisplaydevprint);
@


1.9
log
@Switch to fbxxx() API.
cgsix tested and ok jason@@, the rest tested by me.
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.8 2003/06/02 18:32:41 jason Exp $	*/
d191 1
a191 2
	    BWTWO_CTRL_SIZE, BUS_SPACE_MAP_LINEAR,
	    0, &sc->sc_ctrl_regs) != 0) {
@


1.8
log
@Nuke my clause 3 and 4 (and a couple of files jointly (c) with Theo).
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.7 2003/03/27 17:40:04 jason Exp $	*/
d52 1
a58 9
union bt_cmap {
	u_int8_t cm_map[256][3];	/* 256 r/b/g entries */
	u_int32_t cm_chip[256 * 3 / 4];	/* the way the chip is loaded */
};

#define	BT_ADDR		0x00		/* map address register */
#define	BT_CMAP		0x04		/* colormap data register */
#define	BT_CTRL		0x08		/* control register */
#define	BT_OMAP		0x0c		/* overlay (cursor) map register */
a64 11
#define	BT_WRITE(sc, reg, val) \
    bus_space_write_4((sc)->sc_bustag, (sc)->sc_ctrl_regs, (reg), (val))
#define	BT_READ(sc, reg) \
    bus_space_read_4((sc)->sc_bustag, (sc)->sc_ctrl_regs, (reg))
#define	BT_BARRIER(sc,reg,flags) \
    bus_space_barrier((sc)->sc_bustag, (sc)->sc_ctrl_regs, (reg), \
	sizeof(u_int32_t), (flags))

#define	BT_D4M3(x)	((((x) >> 2) << 1) + ((x) >> 2)) /* (x / 4) * 3 */
#define	BT_D4M4(x)	((x) & ~3)			 /* (x / 4) * 4 */

d99 1
a99 1
	struct device sc_dev;
a105 4
	int sc_width, sc_height, sc_depth, sc_linebytes;
	union bt_cmap sc_cmap;
	struct rasops_info sc_rasops;
	int *sc_crowp, *sc_ccolp;
a109 4
	0, 0,	/* will be filled in -- XXX shouldn't, it's global. */
	0,
	0, 0,
	WSSCREEN_UNDERLINE | WSSCREEN_REVERSE
a130 1
static int a2int(char *, int);
a174 1
	long defattr;
d179 1
a179 4
	sc->sc_depth = getpropint(sa->sa_node, "depth", 1);
	sc->sc_linebytes = getpropint(sa->sa_node, "linebytes", 1152);
	sc->sc_height = getpropint(sa->sa_node, "height", 900);
	sc->sc_width = getpropint(sa->sa_node, "width", 1152);
d199 1
a199 1
	    sc->sc_linebytes * sc->sc_height, BUS_SPACE_MAP_LINEAR,
d207 1
a207 1
	sbus_establish(&sc->sc_sd, &sc->sc_dev);
d211 3
a213 5
	sc->sc_rasops.ri_depth = sc->sc_depth;
	sc->sc_rasops.ri_stride = sc->sc_linebytes;
	sc->sc_rasops.ri_flg = RI_CENTER |
	    (console ? 0 : RI_CLEAR);
	sc->sc_rasops.ri_bits = (void *)bus_space_vaddr(sc->sc_bustag,
d215 2
a216 3
	sc->sc_rasops.ri_width = sc->sc_width;
	sc->sc_rasops.ri_height = sc->sc_height;
	sc->sc_rasops.ri_hw = sc;
d218 4
a221 10
	rasops_init(&sc->sc_rasops,
	    a2int(getpropstring(optionsnode, "screen-#rows"), 34),
	    a2int(getpropstring(optionsnode, "screen-#columns"), 80));

	bwtwo_stdscreen.nrows = sc->sc_rasops.ri_rows;
	bwtwo_stdscreen.ncols = sc->sc_rasops.ri_cols;
	bwtwo_stdscreen.textops = &sc->sc_rasops.ri_ops;
	sc->sc_rasops.ri_ops.alloc_attr(&sc->sc_rasops, 0, 0, 0, &defattr);

	printf("\n");
d224 3
a226 10
		if (romgetcursoraddr(&sc->sc_crowp, &sc->sc_ccolp))
			sc->sc_ccolp = sc->sc_crowp = NULL;
		if (sc->sc_ccolp != NULL)
			sc->sc_rasops.ri_ccol = *sc->sc_ccolp;
		if (sc->sc_crowp != NULL)
			sc->sc_rasops.ri_crow = *sc->sc_crowp;
		sc->sc_rasops.ri_updatecursor = bwtwo_updatecursor;

		wsdisplay_cnattach(&bwtwo_stdscreen, &sc->sc_rasops,
		    sc->sc_rasops.ri_ccol, sc->sc_rasops.ri_crow, defattr);
d261 3
a263 3
		wdf->height = sc->sc_height;
		wdf->width  = sc->sc_width;
		wdf->depth  = sc->sc_depth;
d267 1
a267 1
		*(u_int *)data = sc->sc_linebytes;
d301 1
a301 1
	*cookiep = &sc->sc_rasops;
d304 2
a305 1
	sc->sc_rasops.ri_ops.alloc_attr(&sc->sc_rasops, 0, 0, 0, attrp);
d345 1
a345 1
	if (offset >= 0 && offset < (sc->sc_linebytes * sc->sc_height))
a351 12
static int
a2int(char *cp, int deflt)
{
	int i = 0;

	if (*cp == '\0')
		return (deflt);
	while (*cp != '\0')
		i = i * 10 + *cp++ - '0';
	return (i);
}

d389 4
a392 4
	if (sc->sc_crowp != NULL)
		*sc->sc_crowp = ri->ri_crow;
	if (sc->sc_ccolp != NULL)
		*sc->sc_ccolp = ri->ri_ccol;
@


1.7
log
@map the vid mem based on linebytes and height
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.6 2003/02/12 19:41:20 henric Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.7.2.1
log
@A sweep to fix remaining files not in sync with the SMP_SYNC_B point.
@
text
@d213 5
d236 1
a236 1
	    BWTWO_VID_SIZE, BUS_SPACE_MAP_LINEAR,
a242 5

	sc->sc_depth = getpropint(sa->sa_node, "depth", 1);
	sc->sc_linebytes = getpropint(sa->sa_node, "linebytes", 1152);
	sc->sc_height = getpropint(sa->sa_node, "height", 900);
	sc->sc_width = getpropint(sa->sa_node, "width", 1152);
@


1.7.2.2
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.7.2.1 2003/04/19 19:17:50 niklas Exp $	*/
a212 5
	sc->sc_depth = getpropint(sa->sa_node, "depth", 1);
	sc->sc_linebytes = getpropint(sa->sa_node, "linebytes", 1152);
	sc->sc_height = getpropint(sa->sa_node, "height", 900);
	sc->sc_width = getpropint(sa->sa_node, "width", 1152);

d231 1
a231 1
	    sc->sc_linebytes * sc->sc_height, BUS_SPACE_MAP_LINEAR,
d238 5
@


1.7.2.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.7.2.2 2003/05/13 19:35:10 ho Exp $	*/
d15 5
@


1.7.2.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a51 1
#include <machine/fbvar.h>
d58 9
d73 11
d118 1
a118 1
	struct sunfb sc_sunfb;
d125 4
d133 4
d158 1
d203 1
d208 4
a211 1
	fb_setsize(&sc->sc_sunfb, 1, 1152, 900, sa->sa_node, 0);
d223 2
a224 1
	    BWTWO_CTRL_SIZE, 0, 0, &sc->sc_ctrl_regs) != 0) {
d231 1
a231 1
	    sc->sc_sunfb.sf_fbsize, BUS_SPACE_MAP_LINEAR,
d239 1
a239 1
	sbus_establish(&sc->sc_sd, &sc->sc_sunfb.sf_dev);
d243 5
a247 3
	printf("\n");

	sc->sc_sunfb.sf_ro.ri_bits = (void *)bus_space_vaddr(sc->sc_bustag,
d249 3
a251 2
	sc->sc_sunfb.sf_ro.ri_hw = sc;
	fbwscons_init(&sc->sc_sunfb, console ? 0 : RI_CLEAR);
d253 10
a262 4
	bwtwo_stdscreen.capabilities = sc->sc_sunfb.sf_ro.ri_caps;
	bwtwo_stdscreen.nrows = sc->sc_sunfb.sf_ro.ri_rows;
	bwtwo_stdscreen.ncols = sc->sc_sunfb.sf_ro.ri_cols;
	bwtwo_stdscreen.textops = &sc->sc_sunfb.sf_ro.ri_ops;
d265 10
a274 3
		sc->sc_sunfb.sf_ro.ri_updatecursor = bwtwo_updatecursor;
		fbwscons_console_init(&sc->sc_sunfb, &bwtwo_stdscreen, -1,
		    bwtwo_burner);
d309 3
a311 3
		wdf->height = sc->sc_sunfb.sf_height;
		wdf->width  = sc->sc_sunfb.sf_width;
		wdf->depth  = sc->sc_sunfb.sf_depth;
d315 1
a315 1
		*(u_int *)data = sc->sc_sunfb.sf_linebytes;
d349 1
a349 1
	*cookiep = &sc->sc_sunfb.sf_ro;
d352 1
a352 2
	sc->sc_sunfb.sf_ro.ri_ops.alloc_attr(&sc->sc_sunfb.sf_ro,
	    0, 0, 0, attrp);
d392 1
a392 1
	if (offset >= 0 && offset < sc->sc_sunfb.sf_fbsize)
d399 12
d448 4
a451 4
	if (sc->sc_sunfb.sf_crowp != NULL)
		*sc->sc_sunfb.sf_crowp = ri->ri_crow;
	if (sc->sc_sunfb.sf_ccolp != NULL)
		*sc->sc_sunfb.sf_ccolp = ri->ri_ccol;
@


1.6
log
@Labels must be followed by a statement.  (Pointed out by gcc3.)

ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.5 2002/09/10 03:18:59 jason Exp $	*/
d213 5
d236 1
a236 1
	    BWTWO_VID_SIZE, BUS_SPACE_MAP_LINEAR,
a242 5

	sc->sc_depth = getpropint(sa->sa_node, "depth", 1);
	sc->sc_linebytes = getpropint(sa->sa_node, "linebytes", 1152);
	sc->sc_height = getpropint(sa->sa_node, "height", 900);
	sc->sc_width = getpropint(sa->sa_node, "width", 1152);
@


1.5
log
@Register more wsscreen properties to take advantage of wsemul_sun changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.4 2002/08/12 16:18:59 jason Exp $	*/
d294 1
@


1.4
log
@Update rom cursor position if we're the console framebuffer
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.3 2002/08/06 03:48:45 jason Exp $	*/
d141 1
a141 1
	WSSCREEN_REVERSE
@


1.3
log
@Set RI_CLEAR if the card isn't the console framebuffer; based on discussion with miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.2 2002/07/25 19:04:46 miod Exp $	*/
d133 1
d162 1
d257 1
a257 1

d270 7
a276 8
		int *ccolp, *crowp;

		if (romgetcursoraddr(&crowp, &ccolp))
			ccolp = crowp = NULL;
		if (ccolp != NULL)
			sc->sc_rasops.ri_ccol = *ccolp;
		if (crowp != NULL)
			sc->sc_rasops.ri_crow = *crowp;
d444 12
@


1.2
log
@Adapt the framebuffer code to the WSDISPLAY_TYPE constant changes, and
add the necessary magic for wsemul_sun color handling.

Initially based on a patch from jason@@, then some tinkering by me.
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.1 2002/06/04 19:42:53 jason Exp $	*/
d248 2
a249 1
	sc->sc_rasops.ri_flg = RI_CENTER;
@


1.1
log
@driver for the sbus bwtwo cards (completely untested).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d307 1
a307 1
		*(u_int *)data = WSDISPLAY_TYPE_UNKNOWN;
d322 1
a322 1
		return (-1);
@


1.1.2.1
log
@Sync UBC branch to -current
@
text
@@


1.1.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bwtwo.c,v 1.1.2.1 2002/06/11 03:42:29 art Exp $	*/
a132 1
	int *sc_crowp, *sc_ccolp;
d140 1
a140 1
	WSSCREEN_UNDERLINE | WSSCREEN_REVERSE
a160 1
void bwtwo_updatecursor(struct rasops_info *);
d248 1
a248 2
	sc->sc_rasops.ri_flg = RI_CENTER |
	    (console ? 0 : RI_CLEAR);
d254 1
a254 1
	
d267 8
a274 7
		if (romgetcursoraddr(&sc->sc_crowp, &sc->sc_ccolp))
			sc->sc_ccolp = sc->sc_crowp = NULL;
		if (sc->sc_ccolp != NULL)
			sc->sc_rasops.ri_ccol = *sc->sc_ccolp;
		if (sc->sc_crowp != NULL)
			sc->sc_rasops.ri_crow = *sc->sc_crowp;
		sc->sc_rasops.ri_updatecursor = bwtwo_updatecursor;
d307 1
a307 1
		*(u_int *)data = WSDISPLAY_TYPE_SUNBW;
d322 1
a322 1
		break;
a441 12
}

void
bwtwo_updatecursor(ri)
	struct rasops_info *ri;
{
	struct bwtwo_softc *sc = ri->ri_hw;

	if (sc->sc_crowp != NULL)
		*sc->sc_crowp = ri->ri_crow;
	if (sc->sc_ccolp != NULL)
		*sc->sc_ccolp = ri->ri_ccol;
@


1.1.2.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a212 5
	sc->sc_depth = getpropint(sa->sa_node, "depth", 1);
	sc->sc_linebytes = getpropint(sa->sa_node, "linebytes", 1152);
	sc->sc_height = getpropint(sa->sa_node, "height", 900);
	sc->sc_width = getpropint(sa->sa_node, "width", 1152);

d231 1
a231 1
	    sc->sc_linebytes * sc->sc_height, BUS_SPACE_MAP_LINEAR,
d239 5
a293 1
;
@


