head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.14
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.16
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.12
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.10
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.8
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.6
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.14.0.20
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.18
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.16
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.14
	OPENBSD_5_0:1.14.0.12
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.10
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.8
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.4
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.6
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.2
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5;
locks; strict;
comment	@ * @;


1.15
date	2013.10.20.20.07.31;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2008.12.27.17.23.03;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2008.12.25.23.56.31;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2008.03.15.21.10.38;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2007.03.13.19.40.49;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2006.08.14.12.24.31;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2006.06.02.20.00.56;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.12.13.18.09;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.12.12.02.29;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.12.00.04.23;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.07.21.21.04;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.07.16.44.53;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.05.23.04.25;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.29.22.07.41;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.11.29.18.12.51;	author miod;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Use C99 named initializers for struct wsdisplay_accessops fields.
No functional change.
@
text
@/*	$OpenBSD: tvtwo.c,v 1.14 2008/12/27 17:23:03 miod Exp $	*/

/*
 * Copyright (c) 2003, 2006, 2008, Miodrag Vallat.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 * Driver for the Parallax XVideo and PowerVideo graphics boards.
 *
 * Some details about these board used to be available at:
 *   http://www.jlw.com/~woolsey/parallax/support/developers/xvideotech.html
 */

/*
 * The Parallax XVideo series frame buffers are 8/24-bit accelerated
 * frame buffers, with hardware MPEG capabilities using a CCube chipset.
 */

/*
 * Currently, this driver can only handle the 8-bit and 24-bit planes of the
 * frame buffer, in an unaccelerated mode.
 *
 * TODO:
 * - nvram handling
 * - use the accelerator
 * - interface to the c^3
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/buf.h>
#include <sys/device.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/conf.h>

#include <uvm/uvm_extern.h>

#include <machine/autoconf.h>
#include <machine/bus.h>
#include <machine/pmap.h>
#include <machine/cpu.h>
#include <machine/conf.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wsdisplayvar.h>
#include <dev/rasops/rasops.h>
#include <machine/fbvar.h>

#include <dev/sbus/sbusvar.h>

/*
 * The memory layout of the board is as follows:
 *
 *	PROM0		000000 - 00ffff
 *	overlay plane	010000 - 037fff
 *	registers	040000 - 0404d0
 *	CCube		050000 - 05ffff
 *	8-bit plane	080000 - 17ffff
 *	24-bit plane	200000 - 6fffff
 *	PROM1		7f0000 - 7fffff
 */

#define	PX_PROM0_OFFSET		0x000000
#define	PX_OVERLAY_OFFSET	0x010000
#define	PX_REG_OFFSET		0x040000
#define	PX_CCUBE_OFFSET		0x050000
#define	PX_PLANE8_OFFSET	0x080000
#define	PX_PLANE24_OFFSET	0x200000
#define	PX_PROM1_OFFSET		0x7f0000

#define	PX_MAP_SIZE		0x800000

/*
 * Partial registers layout
 */

#define	PX_REG_DISPKLUGE	0x00b8	/* write only */
#define	DISPKLUGE_DEFAULT	0xc41f
#define	DISPKLUGE_BLANK		(1 << 12)
#define	DISPKLUGE_SYNC		(1 << 13)

#define	PX_REG_BT463_RED	0x0480
#define	PX_REG_BT463_GREEN	0x0490
#define	PX_REG_BT463_BLUE	0x04a0
#define	PX_REG_BT463_ALL	0x04b0

#define	PX_REG_SIZE		0x04d0


/* per-display variables */
struct tvtwo_softc {
	struct	sunfb	sc_sunfb;	/* common base device */

	bus_space_tag_t	sc_bustag;
	bus_addr_t	sc_paddr;

	volatile u_int8_t *sc_m8;
	volatile u_int8_t *sc_m24;
	volatile u_int8_t *sc_regs;

	int	sc_nscreens;
};

int	tvtwo_ioctl(void *, u_long, caddr_t, int, struct proc *);
paddr_t	tvtwo_mmap(void *, off_t, int);
void	tvtwo_burner(void *, u_int, u_int);

struct wsdisplay_accessops tvtwo_accessops = {
	.ioctl = tvtwo_ioctl,
	.mmap = tvtwo_mmap,
	.burn_screen = tvtwo_burner
};

void	tvtwo_directcmap(struct tvtwo_softc *);
static __inline__
void	tvtwo_ramdac_wraddr(struct tvtwo_softc *, u_int32_t);
void	tvtwo_reset(struct tvtwo_softc *, u_int);
void	tvtwo_setcolor(void *, u_int, u_int8_t, u_int8_t, u_int8_t);

int	tvtwomatch(struct device *, void *, void *);
void	tvtwoattach(struct device *, struct device *, void *);

struct cfattach tvtwo_ca = {
	sizeof(struct tvtwo_softc), tvtwomatch, tvtwoattach
};

struct cfdriver tvtwo_cd = {
	NULL, "tvtwo", DV_DULL
};

/*
 * Default frame buffer resolution, depending upon the "freqcode"
 */
#define	NFREQCODE	5
const int defwidth[NFREQCODE] = { 1152, 1152, 1152, 1024, 640 };
const int defheight[NFREQCODE] = { 900, 900, 900, 768, 480 };

/*
 * Match an XVideo or PowerVideo card.
 */
int
tvtwomatch(struct device *parent, void *vcf, void *aux)
{
	struct sbus_attach_args *sa = aux;

	if (strcmp(sa->sa_name, "PGI,tvtwo") == 0 ||
	    strcmp(sa->sa_name, "PGI,tvthree") == 0)
		return (1);

	return (0);
}

/*
 * Attach a display.
 */
void
tvtwoattach(struct device *parent, struct device *self, void *args)
{
	struct tvtwo_softc *sc = (struct tvtwo_softc *)self;
	struct sbus_attach_args *sa = args;
	bus_space_tag_t bt;
	bus_space_handle_t bh;
	int node, width, height, freqcode;
	int isconsole;
	char *freqstring, *revision;

	bt = sa->sa_bustag;
	node = sa->sa_node;

	printf(": %s", getpropstring(node, "model"));
	revision = getpropstring(node, "revision");
	if (*revision != '\0')
		printf(", revision %s", revision);

	/* Older XVideo provide two sets of SBus registers:
	 *	R0		040000 - 040800
	 *	R1		080000 - 17d200
	 * While the more recent revisions provide only one register:
	 *	R0		000000 - 7fffff
	 *
	 * We'll simply ``rewrite'' R0 on older boards and handle them as
	 * recent boards.
	 */
	if (sa->sa_nreg > 1) {
		sa->sa_offset -= PX_REG_OFFSET;
		sa->sa_size = PX_MAP_SIZE;
	}

	isconsole = node == fbnode;

	/* Map registers. */
	sc->sc_bustag = bt;
	if (sbus_bus_map(bt, sa->sa_slot, sa->sa_offset + PX_REG_OFFSET,
	    PX_REG_SIZE, BUS_SPACE_MAP_LINEAR, 0, &bh) != 0) {
		printf("%s: couldn't map registers\n", self->dv_xname);
		return;
	}
	sc->sc_regs = bus_space_vaddr(bt, bh);

	/*
	 * Compute framebuffer size.
	 * Older boards do not have the ``freqcode'' property and are
	 * restricted to 1152x900.
	 */
	freqstring = getpropstring(node, "freqcode");
	if (*freqstring != '\0') {
		freqcode = (int)*freqstring;
		if (freqcode == 'g') {
			width = height = 1024;
		} else {
			if (freqcode < '1' || freqcode > '6')
				freqcode = 0;
			else
				freqcode -= '1';
			width = defwidth[freqcode];
			height = defheight[freqcode];

			/* in case our table is wrong or incomplete... */
			width = getpropint(node, "hres", width);
			height = getpropint(node, "vres", height);
		}
	} else {
		width = 1152;
		height = 900;
	}

	/*
	 * Since the depth property is missing, we could do
	 * fb_setsize(&sc->sc_sunfb, 8, width, height, node, 0);
	 * but for safety in case it would exist and be set to 32, do it
	 * manually...
	 */
	sc->sc_sunfb.sf_depth = 8;
	sc->sc_sunfb.sf_width = width;
	sc->sc_sunfb.sf_height = height;
	sc->sc_sunfb.sf_linebytes = width >= 1024 ? width : 1024;
	sc->sc_sunfb.sf_fbsize = sc->sc_sunfb.sf_linebytes * height;

	printf(", %dx%d\n", sc->sc_sunfb.sf_width, sc->sc_sunfb.sf_height);

	/* Map the frame buffer memory area we're interested in. */
	sc->sc_paddr = sbus_bus_addr(bt, sa->sa_slot, sa->sa_offset);
	if (sbus_bus_map(bt, sa->sa_slot, sa->sa_offset + PX_PLANE8_OFFSET,
	    round_page(sc->sc_sunfb.sf_fbsize), BUS_SPACE_MAP_LINEAR, 0,
	    &bh) != 0) {
		printf("%s: couldn't map 8-bit video plane\n", self->dv_xname);
		return;
	}
	sc->sc_m8 = bus_space_vaddr(bt, bh);
	if (sbus_bus_map(bt, sa->sa_slot, sa->sa_offset + PX_PLANE24_OFFSET,
	    round_page(4 * sc->sc_sunfb.sf_fbsize), BUS_SPACE_MAP_LINEAR, 0,
	    &bh) != 0) {
		printf("%s: couldn't map 32-bit video plane\n", self->dv_xname);
		return;
	}
	sc->sc_m24 = bus_space_vaddr(bt, bh);

	/* Enable video. */
	tvtwo_burner(sc, 1, 0);

	sc->sc_sunfb.sf_ro.ri_hw = sc;
	sc->sc_sunfb.sf_ro.ri_bits = (u_char *)sc->sc_m8;

	fbwscons_init(&sc->sc_sunfb, 0, isconsole);
	fbwscons_setcolormap(&sc->sc_sunfb, tvtwo_setcolor);

	if (isconsole)
		fbwscons_console_init(&sc->sc_sunfb, -1);

	fbwscons_attach(&sc->sc_sunfb, &tvtwo_accessops, isconsole);
}

int
tvtwo_ioctl(void *dev, u_long cmd, caddr_t data, int flags, struct proc *p)
{
	struct tvtwo_softc *sc = dev;
	struct wsdisplay_fbinfo *wdf;

	/*
	 * Note that, although the emulation (text) mode is running in a
	 * 8-bit plane, we advertize the frame buffer as 32-bit.
	 */
	switch (cmd) {
	case WSDISPLAYIO_GTYPE:
		*(u_int *)data = WSDISPLAY_TYPE_XVIDEO;
		break;
	case WSDISPLAYIO_GINFO:
		wdf = (struct wsdisplay_fbinfo *)data;
		wdf->height = sc->sc_sunfb.sf_height;
		wdf->width = sc->sc_sunfb.sf_width;
		wdf->depth = 32;
		wdf->cmsize = 0;
		break;
	case WSDISPLAYIO_GETSUPPORTEDDEPTH:
		*(u_int *)data = WSDISPLAYIO_DEPTH_24_32;
		break;
	case WSDISPLAYIO_LINEBYTES:
		*(u_int *)data = sc->sc_sunfb.sf_linebytes * 4;
		break;

	case WSDISPLAYIO_GETCMAP:
	case WSDISPLAYIO_PUTCMAP:
		break;

	case WSDISPLAYIO_SMODE:
		if (*(int *)data == WSDISPLAYIO_MODE_EMUL) {
			/* Back from X11 to text mode */
			tvtwo_reset(sc, 8);
		} else {
			/* Starting X11, initialize 32-bit mode */
			tvtwo_reset(sc, 32);
		}
		break;

	case WSDISPLAYIO_SVIDEO:
	case WSDISPLAYIO_GVIDEO:
		break;

	case WSDISPLAYIO_GCURPOS:
	case WSDISPLAYIO_SCURPOS:
	case WSDISPLAYIO_GCURMAX:
	case WSDISPLAYIO_GCURSOR:
	case WSDISPLAYIO_SCURSOR:
	default:
		return (-1);
	}

	return (0);
}

/*
 * Return the address that would map the given device at the given
 * offset, allowing for the given protection, or return -1 for error.
 */
paddr_t
tvtwo_mmap(void *v, off_t offset, int prot)
{
	struct tvtwo_softc *sc = v;

	if (offset & PGOFSET)
		return (-1);

	/* Allow mapping as a dumb framebuffer from offset 0 */
	if (offset >= 0 && offset < sc->sc_sunfb.sf_fbsize * 4) {
		return (bus_space_mmap(sc->sc_bustag, sc->sc_paddr,
		    PX_PLANE24_OFFSET + offset, prot, BUS_SPACE_MAP_LINEAR));
	}

	return (-1);
}

void
tvtwo_burner(void *v, u_int on, u_int flags)
{
	struct tvtwo_softc *sc = v;
	u_int32_t dispkluge;

	if (on)
		dispkluge = DISPKLUGE_DEFAULT & ~DISPKLUGE_BLANK;
	else {
		dispkluge = DISPKLUGE_DEFAULT | DISPKLUGE_BLANK;
		if (flags & WSDISPLAY_BURN_VBLANK)
			dispkluge |= DISPKLUGE_SYNC;
	}

	*(volatile u_int32_t *)(sc->sc_regs + PX_REG_DISPKLUGE) = dispkluge;
}

void
tvtwo_reset(struct tvtwo_softc *sc, u_int depth)
{
	if (depth == 32) {
		/* Initialize a direct color map. */
		tvtwo_directcmap(sc);
	} else {
		fbwscons_setcolormap(&sc->sc_sunfb, tvtwo_setcolor);
	}
}

/*
 * Simple Bt463 programming routines.
 */

static __inline__ void
tvtwo_ramdac_wraddr(struct tvtwo_softc *sc, u_int32_t addr)
{
	volatile u_int32_t *dac = (u_int32_t *)(sc->sc_regs + PX_REG_BT463_RED);

	dac[0] = (addr & 0xff);		/* lo addr */
	dac[1] = ((addr >> 8) & 0xff);	/* hi addr */
}

void
tvtwo_directcmap(struct tvtwo_softc *sc)
{
	volatile u_int32_t *dac = (u_int32_t *)(sc->sc_regs + PX_REG_BT463_RED);
	u_int32_t c;

	tvtwo_ramdac_wraddr(sc, 0);
	for (c = 0; c < 256; c++) {
		dac[3] = c;	/* R */
		dac[3] = c;	/* G */
		dac[3] = c;	/* B */
	}
}

void
tvtwo_setcolor(void *v, u_int index, u_int8_t r, u_int8_t g, u_int8_t b)
{
	struct tvtwo_softc *sc = v;
	volatile u_int32_t *dac = (u_int32_t *)(sc->sc_regs + PX_REG_BT463_RED);

	tvtwo_ramdac_wraddr(sc, index);
	dac[3] = r;
	dac[3] = g;
	dac[3] = b;
}
@


1.14
log
@Sync the sparc64 fb* api with the recent changes done on sparc.
@
text
@d1 1
a1 1
/*	$OpenBSD: tvtwo.c,v 1.13 2008/12/25 23:56:31 miod Exp $	*/
d133 3
a135 9
	tvtwo_ioctl,
	tvtwo_mmap,
	NULL,	/* alloc_screen */
	NULL,	/* free_screen */
	NULL,	/* show_screen */
	NULL,	/* load_font */
	NULL,	/* scrollback */
	NULL,	/* getchar */
	tvtwo_burner,
@


1.13
log
@Return proper display types to the WSDISPLAYIO_GTYPE ioctl, instead of
deprecated WSDISPLAY_TYPE_SUN24; X11 knows about them since several releases
already.
@
text
@d1 1
a1 1
/*	$OpenBSD: tvtwo.c,v 1.12 2008/03/15 21:10:38 miod Exp $	*/
a128 5
int	tvtwo_alloc_screen(void *, const struct wsscreen_descr *, void **,
	    int *, int *, long *);
void	tvtwo_free_screen(void *, void *);
int	tvtwo_show_screen(void *, void *, int, void (*cb)(void *, int, int),
	    void *);
d135 3
a137 3
	tvtwo_alloc_screen,
	tvtwo_free_screen,
	tvtwo_show_screen,
d294 1
a294 6
	/*
	 * If the framebuffer width is under 1024, we will switch from
	 * the PROM font to the more adequate 8x16 font here.
	 */
	fbwscons_init(&sc->sc_sunfb,
	    isconsole && (width >= 1024) ? RI_CLEARMARGINS : RI_CLEAR);
d297 2
a298 4
	if (isconsole) {
		fbwscons_console_init(&sc->sc_sunfb,
		    width >= 1024 ? -1 : 0);
	}
a379 33
}

int
tvtwo_alloc_screen(void *v, const struct wsscreen_descr *type,
    void **cookiep, int *curxp, int *curyp, long *attrp)
{
	struct tvtwo_softc *sc = v;

	if (sc->sc_nscreens > 0)
		return (ENOMEM);

	*cookiep = &sc->sc_sunfb.sf_ro;
	*curyp = 0;
	*curxp = 0;
	sc->sc_sunfb.sf_ro.ri_ops.alloc_attr(&sc->sc_sunfb.sf_ro,
	     0, 0, 0, attrp);
	sc->sc_nscreens++;
	return (0);
}

void
tvtwo_free_screen(void *v, void *cookie)
{
	struct tvtwo_softc *sc = v;

	sc->sc_nscreens--;
}

int
tvtwo_show_screen(void *v, void *cookie, int waitok,
    void (*cb)(void *, int, int), void *cbarg)
{
	return (0);
@


1.12
log
@Support the old-prom XVideo boards by rewriting the sbus range registers;
tested by Thorsten Glaser <tg@@mirbsd.de> on sparc; while there, pretty and
shrink dmesg output.
@
text
@d1 1
a1 1
/*	$OpenBSD: tvtwo.c,v 1.11 2007/03/13 19:40:49 miod Exp $	*/
d327 1
a327 1
		*(u_int *)data = WSDISPLAY_TYPE_SUN24;
@


1.11
log
@When about to run X11 in 32 bpp mode, advertize correctly that we are
really using 24 bpp pixels on 32 bit boundaries.
@
text
@d1 2
a2 1
/*	$OpenBSD: tvtwo.c,v 1.10 2006/08/14 12:24:31 miod Exp $	*/
d4 1
a4 1
 * Copyright (c) 2003, 2006, Miodrag Vallat.
d33 2
a34 2
 * Some details about these board are available at:
 * http://www.jlw.com/~woolsey/parallax/support/developers/xvideotech.html
a84 10
 *
 * Older XVideo provide two sets of SBus registers:
 *	R0		040000 - 040800
 *	R1		080000 - 17d200
 * While the more recent revisions provide only one register:
 *	R0		000000 - 7fffff
 *
 * We currently refuse to attach to the old version because mapping
 * things requires us to play with the sbus register ranges, and I
 * don't want to play this game without the hardware at hand -- miod
d95 2
d101 4
a104 4
#define	PX_REG_DISPKLUDGE	0x00b8	/* write only */
#define	DISPKLUDGE_DEFAULT	0xc41f
#define	DISPKLUDGE_BLANK	(1 << 12)
#define	DISPKLUDGE_SYNC		(1 << 13)
d200 1
a200 1
	char *freqstring;
d206 16
a221 9
	printf(", revision %s\n", getpropstring(node, "revision"));

	/* We do not handle older boards yet. */
	if (sa->sa_nreg != 1) {
		printf("%s: old-style boards with %d registers are not supported\n"
		    "%s: please report this to <sparc@@openbsd.org>\n",
		    self->dv_xname, sa->sa_nreg,
		    self->dv_xname);
		return;
d235 5
a239 1
	/* Compute framebuffer size. */
d241 16
a256 3
	freqcode = (int)*freqstring;
	if (freqcode == 'g') {
		width = height = 1024;
d258 2
a259 6
		if (freqcode < '1' || freqcode > '6')
			freqcode = 0;
		else
			freqcode -= '1';
		width = defwidth[freqcode];
		height = defheight[freqcode];
a261 3
	width = getpropint(node, "hres", width);
	height = getpropint(node, "vres", height);

d263 1
a263 1
	 * Since the depth property is usually missing, we could do
d274 2
a311 3
	printf("%s: %dx%d\n", self->dv_xname,
	    sc->sc_sunfb.sf_width, sc->sc_sunfb.sf_height);

d431 1
a431 1
	u_int32_t dispkludge;
d434 1
a434 1
		dispkludge = DISPKLUDGE_DEFAULT & ~DISPKLUDGE_BLANK;
d436 1
a436 1
		dispkludge = DISPKLUDGE_DEFAULT | DISPKLUDGE_BLANK;
d438 1
a438 1
			dispkludge |= DISPKLUDGE_SYNC;
d441 1
a441 2
	*(volatile u_int32_t *)(sc->sc_regs + PX_REG_DISPKLUDGE) =
	    dispkludge;
@


1.10
log
@Fix 640x480 mode operation (needs a font change, and stride is larger than
width in this mode).
@
text
@d1 1
a1 1
/*	$OpenBSD: tvtwo.c,v 1.9 2006/06/02 20:00:56 miod Exp $	*/
d326 3
@


1.9
log
@sbus_establish() and the associated linked list in the sbus softc is now only
used to store a per-device reset callback, for use in sbusreset(). Except
sbusreset() has never, ever, been used since Torek's sbus code went in.
Time to recycle those wasted bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: tvtwo.c,v 1.8 2006/02/12 13:18:09 miod Exp $	*/
d261 1
a261 1
	sc->sc_sunfb.sf_linebytes = width;
d286 8
a293 1
	fbwscons_init(&sc->sc_sunfb, isconsole ? RI_CLEARMARGINS : RI_CLEAR);
d296 2
a297 1
		fbwscons_console_init(&sc->sc_sunfb, -1);
@


1.8
log
@Disable sync when blanking if display.vblank is set to off.
@
text
@d1 1
a1 1
/*	$OpenBSD: tvtwo.c,v 1.7 2006/02/12 12:02:29 miod Exp $	*/
a123 1
	struct	sbusdev sc_sd;		/* sbus device */
a290 2

	sbus_establish(&sc->sc_sd, &sc->sc_sunfb.sf_dev);
@


1.7
log
@Run the tvtwo emulation mode in the 8 bit plane, and keep mapped mode 32 bit.
@
text
@d1 1
a1 1
/*	$OpenBSD: tvtwo.c,v 1.6 2006/02/12 00:04:23 miod Exp $	*/
d111 1
d414 1
a414 2
	volatile u_int32_t *dispkludge =
	    (u_int32_t *)(sc->sc_regs + PX_REG_DISPKLUDGE);
d417 9
a425 3
		*dispkludge = DISPKLUDGE_DEFAULT & ~DISPKLUDGE_BLANK;
	else
		*dispkludge = DISPKLUDGE_DEFAULT | DISPKLUDGE_BLANK;
@


1.6
log
@Don't cause the screen border to be black; but we have to clear the whole
screen until console uses a low-depth plane; and if I could remember who
to thank for the Xvideo board I got via Wim, things would be even better.
@
text
@d1 1
a1 1
/*	$OpenBSD: tvtwo.c,v 1.5 2005/03/07 21:21:04 miod Exp $	*/
d3 1
a3 1
 * Copyright (c) 2003, Miodrag Vallat.
d42 2
a43 2
 * Currently, this driver can only handle the 24-bit plane of the frame
 * buffer, in an unaccelerated mode.
a93 3
 *
 * At PROM initialization, the board will be in 24-bit mode,
 * so no specific initialization is necessary.
d97 1
a97 1
#define	PX_OVERAY_OFFSET	0x010000
d128 2
a143 4
static __inline__ void tvtwo_ramdac_wraddr(struct tvtwo_softc *sc,
    u_int32_t addr);
void	tvtwo_initcmap(struct tvtwo_softc *);

d156 6
d251 12
a262 1
	fb_setsize(&sc->sc_sunfb, 32, width, height, node, 0);
d266 7
d274 1
a274 1
	    round_page(sc->sc_sunfb.sf_fbsize), BUS_SPACE_MAP_LINEAR, 0,
d276 1
a276 1
		printf("%s: couldn't map video memory\n", self->dv_xname);
d279 1
a279 1
	sc->sc_sunfb.sf_ro.ri_bits = bus_space_vaddr(bt, bh);
d281 2
a282 8
	/* Initialize a direct color map. */
	tvtwo_initcmap(sc);

	/*
	 * Clear display. We can't pass RI_CLEAR to fbwscons_init
	 * below and have rasops do it for us as we want a white background.
	 */
	memset(sc->sc_sunfb.sf_ro.ri_bits, 0xff, sc->sc_sunfb.sf_fbsize);
d285 2
a286 1
	fbwscons_init(&sc->sc_sunfb, 0);
d289 1
a289 1
		fbwscons_console_init(&sc->sc_sunfb, 0);
d306 4
d318 1
a318 1
		wdf->depth = sc->sc_sunfb.sf_depth;
d322 1
a322 1
		*(u_int *)data = sc->sc_sunfb.sf_linebytes;
d329 10
d368 1
a368 1
	if (offset >= 0 && offset < sc->sc_sunfb.sf_fbsize) {
d409 24
d447 1
a447 1
tvtwo_initcmap(struct tvtwo_softc *sc)
d461 1
a461 1
tvtwo_burner(void *v, u_int on, u_int flags)
d464 1
a464 2
	volatile u_int32_t *dispkludge =
	    (u_int32_t *)(sc->sc_regs + PX_REG_DISPKLUDGE);
d466 4
a469 4
	if (on)
		*dispkludge = DISPKLUDGE_DEFAULT & ~DISPKLUDGE_BLANK;
	else
		*dispkludge = DISPKLUDGE_DEFAULT | DISPKLUDGE_BLANK;
@


1.5
log
@- Match PGI,tvthree (similar frame buffer capacities)
- Correctly handle invalid freqcode position 6.
@
text
@d1 1
a1 1
/*	$OpenBSD: tvtwo.c,v 1.4 2005/03/07 16:44:53 miod Exp $	*/
d265 6
d272 1
a272 4
	fbwscons_init(&sc->sc_sunfb, isconsole ? 0 : RI_CLEAR);

	printf("%s: %dx%d\n", self->dv_xname,
	    sc->sc_sunfb.sf_width, sc->sc_sunfb.sf_height);
d275 1
a275 1
		fbwscons_console_init(&sc->sc_sunfb, -1);
d279 3
@


1.4
log
@Do not bother passing the blanking routine to fbwscons_console_init(),
as fbwscons_attach() can find it on its own.
@
text
@d1 1
a1 1
/*	$OpenBSD: tvtwo.c,v 1.3 2005/01/05 23:04:25 miod Exp $	*/
a55 1
#include <sys/malloc.h>
a56 1
#include <sys/tty.h>
a68 1
#include <dev/wscons/wscons_raster.h>
d77 7
a83 7
 *	 PROM0		000000 - 00ffff
 *	 overlay plane	010000 - 037fff
 *	 registers	040000 - 0404d0
 *	 CCube		050000 - 05ffff
 *	 8-bit plane	080000 - 17ffff
 *	 24-bit plane	200000 - 6fffff
 *	 PROM1		7f0000 - 7fffff
d85 12
a96 4
 * All of this is mapped using only one register (except for older models
 * which are not currently supported).
 * At PROM initialization, the board will be in 24-bit mode, so no specific
 * initialization is necessary.
d115 4
a118 1
#define	PX_REG_BT463		0x0480
d136 8
a143 8
int tvtwo_ioctl(void *, u_long, caddr_t, int, struct proc *);
int tvtwo_alloc_screen(void *, const struct wsscreen_descr *, void **,
    int *, int *, long *);
void tvtwo_free_screen(void *, void *);
int tvtwo_show_screen(void *, void *, int, void (*cb)(void *, int, int),
    void *);
paddr_t tvtwo_mmap(void *, off_t, int);
void tvtwo_burner(void *, u_int, u_int);
d147 1
a147 1
void tvtwo_initcmap(struct tvtwo_softc *);
d161 2
a162 2
int tvtwomatch(struct device *, void *, void *);
void tvtwoattach(struct device *, struct device *, void *);
d175 3
a177 2
const int defwidth[] = { 1152, 1152, 1152, 1024, 640, 1024 };
const int defheight[] = { 900, 900, 900, 768, 480, 1024 };
d187 3
a189 2
	if (strcmp(sa->sa_name, "PGI,tvtwo") != 0)
		return (0);
d191 1
a191 1
	return (1);
d214 1
a214 1
	/* We do not know how to handle older boards. */
d216 4
a219 2
		printf("%s: old-style boards with %d registers are not supported\n",
		    self->dv_xname, sa->sa_nreg);
d237 14
a250 11
	if (freqcode == 'g')
		freqcode = '6';
	if (freqcode < '1' || freqcode > '6')
		freqcode = 0;
	else
		freqcode -= '1';

	width = getpropint(node, "hres", defwidth[freqcode]);
	height = getpropint(node, "vres", defheight[freqcode]);
	fb_setsize(&sc->sc_sunfb, 32, width, height,
	    node, 0);
d382 1
a382 1
	volatile u_int32_t *dac = (u_int32_t *)(sc->sc_regs + PX_REG_BT463);
d391 1
a391 1
	volatile u_int32_t *dac = (u_int32_t *)(sc->sc_regs + PX_REG_BT463);
@


1.3
log
@Let wsdisplay drivers return zero for WSDISPLAYIO_[GS]VIDEO ioctls - most
of the work is done in the upper layer, but they get to see the ioctl,
so don't always return an error.
@
text
@d1 1
a1 1
/*	$OpenBSD: tvtwo.c,v 1.2 2004/11/29 22:07:41 miod Exp $	*/
d257 1
a257 1
		fbwscons_console_init(&sc->sc_sunfb, -1, NULL);
@


1.2
log
@Move the struct wsscreen_descr from a per-driver global to a per-instance
field of the sunfb structure. This allows multiple instances of the same driver,
but with different resolutions (such as a couple of vigra or a TGX cgsix and
a TGX+ cgsix) to use distinct wsscreen_descr structures featuring different
resolution information.

Doing this allows more wsscreen_descr fiddling inside the sparc* fb api,
and results in some code shrinkage (about 4KB on sparc GENERIC).
@
text
@d1 1
a1 1
/*	$OpenBSD: tvtwo.c,v 1.1 2004/11/29 18:12:51 miod Exp $	*/
d292 2
@


1.1
log
@Port the remaining two sbus framebuffer drivers to sparc64; tvtwo untested
due to lack of hardware.
@
text
@d1 1
a1 1
/*	$OpenBSD: tvtwo.c,v 1.3 2003/06/28 17:05:33 miod Exp $	*/
a127 13
struct wsscreen_descr tvtwo_stdscreen = {
	"std",
};

const struct wsscreen_descr *tvtwo_scrlist[] = {
	&tvtwo_stdscreen,
};

struct wsscreen_list tvtwo_screenlist = {
	sizeof(tvtwo_scrlist) / sizeof(struct wsscreen_descr *),
	    tvtwo_scrlist
};

a191 1
	struct wsemuldisplaydev_attach_args waa;
a252 5
	tvtwo_stdscreen.capabilities = sc->sc_sunfb.sf_ro.ri_caps;
	tvtwo_stdscreen.nrows = sc->sc_sunfb.sf_ro.ri_rows;
	tvtwo_stdscreen.ncols = sc->sc_sunfb.sf_ro.ri_cols;
	tvtwo_stdscreen.textops = &sc->sc_sunfb.sf_ro.ri_ops;

d257 1
a257 2
		fbwscons_console_init(&sc->sc_sunfb,
		    &tvtwo_stdscreen, -1, NULL);
d262 1
a262 5
	waa.console = isconsole;
	waa.scrdata = &tvtwo_screenlist;
	waa.accessops = &tvtwo_accessops;
	waa.accesscookie = sc;
	config_found(self, &waa, wsemuldisplaydevprint);
@

