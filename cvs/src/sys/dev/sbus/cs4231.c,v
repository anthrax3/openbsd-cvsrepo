head	1.38;
access;
symbols
	OPENBSD_6_1:1.38.0.2
	OPENBSD_6_1_BASE:1.38
	OPENBSD_6_0:1.35.0.6
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.35.0.2
	OPENBSD_5_9_BASE:1.35
	OPENBSD_5_8:1.35.0.4
	OPENBSD_5_8_BASE:1.35
	OPENBSD_5_7:1.33.0.6
	OPENBSD_5_7_BASE:1.33
	OPENBSD_5_6:1.33.0.4
	OPENBSD_5_6_BASE:1.33
	OPENBSD_5_5:1.32.0.6
	OPENBSD_5_5_BASE:1.32
	OPENBSD_5_4:1.32.0.2
	OPENBSD_5_4_BASE:1.32
	OPENBSD_5_3:1.31.0.8
	OPENBSD_5_3_BASE:1.31
	OPENBSD_5_2:1.31.0.6
	OPENBSD_5_2_BASE:1.31
	OPENBSD_5_1_BASE:1.31
	OPENBSD_5_1:1.31.0.4
	OPENBSD_5_0:1.31.0.2
	OPENBSD_5_0_BASE:1.31
	OPENBSD_4_9:1.30.0.4
	OPENBSD_4_9_BASE:1.30
	OPENBSD_4_8:1.30.0.2
	OPENBSD_4_8_BASE:1.30
	OPENBSD_4_7:1.29.0.6
	OPENBSD_4_7_BASE:1.29
	OPENBSD_4_6:1.29.0.8
	OPENBSD_4_6_BASE:1.29
	OPENBSD_4_5:1.29.0.4
	OPENBSD_4_5_BASE:1.29
	OPENBSD_4_4:1.29.0.2
	OPENBSD_4_4_BASE:1.29
	OPENBSD_4_3:1.28.0.8
	OPENBSD_4_3_BASE:1.28
	OPENBSD_4_2:1.28.0.6
	OPENBSD_4_2_BASE:1.28
	OPENBSD_4_1:1.28.0.4
	OPENBSD_4_1_BASE:1.28
	OPENBSD_4_0:1.28.0.2
	OPENBSD_4_0_BASE:1.28
	OPENBSD_3_9:1.27.0.4
	OPENBSD_3_9_BASE:1.27
	OPENBSD_3_8:1.27.0.2
	OPENBSD_3_8_BASE:1.27
	OPENBSD_3_7:1.24.0.2
	OPENBSD_3_7_BASE:1.24
	OPENBSD_3_6:1.21.0.6
	OPENBSD_3_6_BASE:1.21
	SMP_SYNC_A:1.21
	SMP_SYNC_B:1.21
	OPENBSD_3_5:1.21.0.4
	OPENBSD_3_5_BASE:1.21
	OPENBSD_3_4:1.21.0.2
	OPENBSD_3_4_BASE:1.21
	UBC_SYNC_A:1.18
	OPENBSD_3_3:1.16.0.2
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.15
	UBC:1.7.0.6
	UBC_BASE:1.7
	SMP:1.7.0.4
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7;
locks; strict;
comment	@ * @;


1.38
date	2017.01.04.07.33.14;	author ratchov;	state Exp;
branches;
next	1.37;
commitid	Rt6DjLYSXyBztfK4;

1.37
date	2016.09.19.06.46.44;	author ratchov;	state Exp;
branches;
next	1.36;
commitid	qGgYgJTgEFuAoGj4;

1.36
date	2016.09.14.06.12.20;	author ratchov;	state Exp;
branches;
next	1.35;
commitid	pi1a9KN0itEngOc4;

1.35
date	2015.05.11.06.52.35;	author ratchov;	state Exp;
branches;
next	1.34;
commitid	d72M2ifvvYynw0IH;

1.34
date	2015.05.11.06.46.22;	author ratchov;	state Exp;
branches;
next	1.33;
commitid	RaOGL5SyOGOZylwx;

1.33
date	2014.07.12.18.48.52;	author tedu;	state Exp;
branches;
next	1.32;
commitid	OBNa5kfxQ2UXoiIw;

1.32
date	2013.05.15.08.29.24;	author ratchov;	state Exp;
branches;
next	1.31;

1.31
date	2011.04.05.19.54.35;	author jasper;	state Exp;
branches;
next	1.30;

1.30
date	2010.07.15.03.43.11;	author jakemsr;	state Exp;
branches;
next	1.29;

1.29
date	2008.04.21.00.32.43;	author jakemsr;	state Exp;
branches;
next	1.28;

1.28
date	2006.06.02.20.00.56;	author miod;	state Exp;
branches;
next	1.27;

1.27
date	2005.07.09.22.23.15;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2005.04.16.21.57.23;	author mickey;	state Exp;
branches;
next	1.25;

1.25
date	2005.04.15.13.05.14;	author mickey;	state Exp;
branches;
next	1.24;

1.24
date	2005.03.08.21.35.03;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2004.11.09.14.30.43;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2004.09.29.19.17.43;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2003.07.03.20.36.07;	author jason;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.24.21.54.38;	author henric;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.02.18.32.41;	author jason;	state Exp;
branches;
next	1.18;

1.18
date	2003.04.27.11.22.54;	author ho;	state Exp;
branches;
next	1.17;

1.17
date	2003.03.27.17.39.05;	author jason;	state Exp;
branches;
next	1.16;

1.16
date	2003.02.17.01.29.20;	author henric;	state Exp;
branches;
next	1.15;

1.15
date	2002.10.04.01.51.45;	author jason;	state Exp;
branches;
next	1.14;

1.14
date	2002.09.10.05.43.31;	author jason;	state Exp;
branches;
next	1.13;

1.13
date	2002.09.09.20.25.17;	author jason;	state Exp;
branches;
next	1.12;

1.12
date	2002.04.08.17.49.42;	author jason;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.03.16.07;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.01.27.02;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.21.02.41.00;	author nate;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.11.17.11.32;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.01.04.10.49;	author jason;	state Exp;
branches
	1.7.4.1
	1.7.6.1;
next	1.6;

1.6
date	2001.10.01.03.31.03;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.01.02.35.04;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.30.21.20.07;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.30.21.03.26;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.30.20.58.16;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.30.00.45.17;	author jason;	state Exp;
branches;
next	;

1.7.4.1
date	2001.10.31.03.22.49;	author nate;	state Exp;
branches;
next	1.7.4.2;

1.7.4.2
date	2002.03.06.02.11.47;	author niklas;	state Exp;
branches;
next	1.7.4.3;

1.7.4.3
date	2002.03.28.15.09.09;	author niklas;	state Exp;
branches;
next	1.7.4.4;

1.7.4.4
date	2003.03.28.00.38.30;	author niklas;	state Exp;
branches;
next	1.7.4.5;

1.7.4.5
date	2003.05.13.19.35.10;	author ho;	state Exp;
branches;
next	1.7.4.6;

1.7.4.6
date	2003.06.07.11.02.32;	author ho;	state Exp;
branches;
next	1.7.4.7;

1.7.4.7
date	2004.02.19.10.56.32;	author niklas;	state Exp;
branches;
next	;

1.7.6.1
date	2002.01.31.22.55.38;	author niklas;	state Exp;
branches;
next	1.7.6.2;

1.7.6.2
date	2002.06.11.03.42.29;	author art;	state Exp;
branches;
next	1.7.6.3;

1.7.6.3
date	2002.10.29.00.33.31;	author art;	state Exp;
branches;
next	1.7.6.4;

1.7.6.4
date	2003.05.19.22.14.42;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.38
log
@In the set_params() routine, remove the AUDIO_ENCODING_ULINEAR case
as upper layers calls it with AUDIO_ENCODING_ULINEAR_{LE,BE} only.
@
text
@/*	$OpenBSD: cs4231.c,v 1.37 2016/09/19 06:46:44 ratchov Exp $	*/

/*
 * Copyright (c) 1999 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
 */

/*
 * Driver for CS4231 based audio found in some sun4m systems (cs4231)
 * based on ideas from the S/Linux project and the NetBSD project.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/errno.h>
#include <sys/ioctl.h>
#include <sys/device.h>
#include <sys/proc.h>
#include <sys/malloc.h>

#include <machine/bus.h>
#include <machine/intr.h>
#include <machine/autoconf.h>

#include <sys/audioio.h>
#include <dev/audio_if.h>

#include <dev/ic/ad1848reg.h>
#include <dev/ic/cs4231reg.h>
#include <dev/ic/apcdmareg.h>
#include <dev/sbus/sbusvar.h>
#include <dev/sbus/cs4231var.h>

#define	CSAUDIO_DAC_LVL		0
#define	CSAUDIO_LINE_IN_LVL	1
#define	CSAUDIO_MIC_LVL		2
#define	CSAUDIO_CD_LVL		3
#define	CSAUDIO_MONITOR_LVL	4
#define	CSAUDIO_OUTPUT_LVL	5
#define	CSAUDIO_LINE_IN_MUTE	6
#define	CSAUDIO_DAC_MUTE	7
#define	CSAUDIO_CD_MUTE		8
#define	CSAUDIO_MIC_MUTE	9
#define	CSAUDIO_MONITOR_MUTE	10
#define	CSAUDIO_OUTPUT_MUTE	11
#define	CSAUDIO_REC_LVL		12
#define	CSAUDIO_RECORD_SOURCE	13
#define	CSAUDIO_OUTPUT		14
#define	CSAUDIO_INPUT_CLASS	15
#define	CSAUDIO_OUTPUT_CLASS	16
#define	CSAUDIO_RECORD_CLASS	17
#define	CSAUDIO_MONITOR_CLASS	18

#define	CSPORT_AUX2		0
#define	CSPORT_AUX1		1
#define	CSPORT_DAC		2
#define	CSPORT_LINEIN		3
#define	CSPORT_MONO		4
#define	CSPORT_MONITOR		5
#define	CSPORT_SPEAKER		6
#define	CSPORT_LINEOUT		7
#define	CSPORT_HEADPHONE	8
#define	CSPORT_MICROPHONE	9

#define MIC_IN_PORT	0
#define LINE_IN_PORT	1
#define AUX1_IN_PORT	2
#define DAC_IN_PORT	3

#ifdef AUDIO_DEBUG
#define	DPRINTF(x)	printf x
#else
#define	DPRINTF(x)
#endif

#define	CS_TIMEOUT	90000

#define	CS_PC_LINEMUTE	XCTL0_ENABLE
#define	CS_PC_HDPHMUTE	XCTL1_ENABLE
#define	CS_AFS_TI	0x40		/* timer interrupt */
#define	CS_AFS_CI	0x20		/* capture interrupt */
#define	CS_AFS_PI	0x10		/* playback interrupt */
#define	CS_AFS_CU	0x08		/* capture underrun */
#define	CS_AFS_CO	0x04		/* capture overrun */
#define	CS_AFS_PO	0x02		/* playback overrun */
#define	CS_AFS_PU	0x01		/* playback underrun */

#define CS_WRITE(sc,r,v)	\
    bus_space_write_1((sc)->sc_bustag, (sc)->sc_regs, (r) << 2, (v))
#define	CS_READ(sc,r)		\
    bus_space_read_1((sc)->sc_bustag, (sc)->sc_regs, (r) << 2)

#define	APC_WRITE(sc,r,v)	\
    bus_space_write_4(sc->sc_bustag, sc->sc_regs, r, v)
#define	APC_READ(sc,r)		\
    bus_space_read_4(sc->sc_bustag, sc->sc_regs, r)

int	cs4231_match(struct device *, void *, void *);
void	cs4231_attach(struct device *, struct device *, void *);
int	cs4231_intr(void *);

int	cs4231_set_speed(struct cs4231_softc *, u_long *);
void	cs4231_setup_output(struct cs4231_softc *sc);

void		cs4231_write(struct cs4231_softc *, u_int8_t, u_int8_t);
u_int8_t	cs4231_read(struct cs4231_softc *, u_int8_t);

/* Audio interface */
int	cs4231_open(void *, int);
void	cs4231_close(void *);
int	cs4231_set_params(void *, int, int, struct audio_params *,
    struct audio_params *);
int	cs4231_round_blocksize(void *, int);
int	cs4231_commit_settings(void *);
int	cs4231_halt_output(void *);
int	cs4231_halt_input(void *);
int	cs4231_set_port(void *, mixer_ctrl_t *);
int	cs4231_get_port(void *, mixer_ctrl_t *);
int	cs4231_query_devinfo(void *, mixer_devinfo_t *);
void *	cs4231_alloc(void *, int, size_t, int, int);
void	cs4231_free(void *, void *, int);
int	cs4231_get_props(void *);
int	cs4231_trigger_output(void *, void *, void *, int,
    void (*)(void *), void *, struct audio_params *);
int	cs4231_trigger_input(void *, void *, void *, int,
    void (*)(void *), void *, struct audio_params *);

struct audio_hw_if cs4231_sa_hw_if = {
	cs4231_open,
	cs4231_close,
	cs4231_set_params,
	cs4231_round_blocksize,
	cs4231_commit_settings,
	0,
	0,
	0,
	0,
	cs4231_halt_output,
	cs4231_halt_input,
	0,
	0,
	cs4231_set_port,
	cs4231_get_port,
	cs4231_query_devinfo,
	cs4231_alloc,
	cs4231_free,
	0,
	cs4231_get_props,
	cs4231_trigger_output,
	cs4231_trigger_input
};

struct cfattach audiocs_ca = {
	sizeof (struct cs4231_softc), cs4231_match, cs4231_attach
};

struct cfdriver audiocs_cd = {
	NULL, "audiocs", DV_DULL
};

int
cs4231_match(struct device *parent, void *vcf, void *aux)
{
	struct sbus_attach_args *sa = aux;

	return (strcmp("SUNW,CS4231", sa->sa_name) == 0);
}

void    
cs4231_attach(struct device *parent, struct device *self, void *aux)
{
	struct sbus_attach_args *sa = aux;
	struct cs4231_softc *sc = (struct cs4231_softc *)self;
	int node;
	u_int32_t sbusburst, burst;

	node = sa->sa_node;

	/* Pass on the bus tags */
	sc->sc_bustag = sa->sa_bustag;
	sc->sc_dmatag = sa->sa_dmatag;

	/* Make sure things are sane. */
	if (sa->sa_nintr != 1) {
		printf(": expected 1 interrupt, got %d\n", sa->sa_nintr);
		return;
	}
	if (sa->sa_nreg != 1) {
		printf(": expected 1 register set, got %d\n",
		    sa->sa_nreg);
		return;
	}

	if (bus_intr_establish(sa->sa_bustag, sa->sa_pri, IPL_AUDIO, 0,
	    cs4231_intr, sc, self->dv_xname) == NULL) {
		printf(": couldn't establish interrupt, pri %d\n",
		    INTLEV(sa->sa_pri));
		return;
	}

	if (sbus_bus_map(sa->sa_bustag,
	    sa->sa_reg[0].sbr_slot,
	    (bus_addr_t)sa->sa_reg[0].sbr_offset,
	    (bus_size_t)sa->sa_reg[0].sbr_size,
	    BUS_SPACE_MAP_LINEAR, 0, &sc->sc_regs) != 0) {
		printf(": couldn't map registers\n");
		return;
	}

	sbusburst = ((struct sbus_softc *)parent)->sc_burst;
	if (sbusburst == 0)
		sbusburst = SBUS_BURST_32 - 1;	/* 1->16 */
	burst = getpropint(node, "burst-sizes", -1);
	if (burst == -1)
		burst = sbusburst;
	sc->sc_burst = burst & sbusburst;

	printf("\n");

	audio_attach_mi(&cs4231_sa_hw_if, sc, &sc->sc_dev);

	/* Default to speaker, unmuted, reasonable volume */
	sc->sc_out_port = CSPORT_SPEAKER;
	sc->sc_in_port = CSPORT_MICROPHONE;
	sc->sc_mute[CSPORT_SPEAKER] = 1;
	sc->sc_mute[CSPORT_MONITOR] = 1;
	sc->sc_volume[CSPORT_SPEAKER].left = 192;
	sc->sc_volume[CSPORT_SPEAKER].right = 192;
}

/*
 * Write to one of the indexed registers of cs4231.
 */
void
cs4231_write(struct cs4231_softc *sc, u_int8_t r, u_int8_t v)
{
	CS_WRITE(sc, AD1848_IADDR, r);
	CS_WRITE(sc, AD1848_IDATA, v);
}

/*
 * Read from one of the indexed registers of cs4231.
 */
u_int8_t
cs4231_read(struct cs4231_softc *sc, u_int8_t r)
{
	CS_WRITE(sc, AD1848_IADDR, r);
	return (CS_READ(sc, AD1848_IDATA));
}

int
cs4231_set_speed(struct cs4231_softc *sc, u_long *argp)
{
	/*
	 * The available speeds are in the following table. Keep the speeds in
	 * the increasing order.
	 */
	typedef struct {
		int speed;
		u_char bits;
	} speed_struct;
	u_long arg = *argp;

	const static speed_struct speed_table[] = {
		{5510,	(0 << 1) | CLOCK_XTAL2},
		{5510,	(0 << 1) | CLOCK_XTAL2},
		{6620,	(7 << 1) | CLOCK_XTAL2},
		{8000,	(0 << 1) | CLOCK_XTAL1},
		{9600,	(7 << 1) | CLOCK_XTAL1},
		{11025,	(1 << 1) | CLOCK_XTAL2},
		{16000,	(1 << 1) | CLOCK_XTAL1},
		{18900,	(2 << 1) | CLOCK_XTAL2},
		{22050,	(3 << 1) | CLOCK_XTAL2},
		{27420,	(2 << 1) | CLOCK_XTAL1},
		{32000,	(3 << 1) | CLOCK_XTAL1},
		{33075,	(6 << 1) | CLOCK_XTAL2},
		{33075,	(4 << 1) | CLOCK_XTAL2},
		{44100,	(5 << 1) | CLOCK_XTAL2},
		{48000,	(6 << 1) | CLOCK_XTAL1},
	};

	int i, n, selected = -1;

	n = sizeof(speed_table) / sizeof(speed_struct);

	if (arg < speed_table[0].speed)
		selected = 0;
	if (arg > speed_table[n - 1].speed)
		selected = n - 1;

	for (i = 1; selected == -1 && i < n; i++) {
		if (speed_table[i].speed == arg)
			selected = i;
		else if (speed_table[i].speed > arg) {
			int diff1, diff2;

			diff1 = arg - speed_table[i - 1].speed;
			diff2 = speed_table[i].speed - arg;
			if (diff1 < diff2)
				selected = i - 1;
			else
				selected = i;
		}
	}

	if (selected == -1)
		selected = 3;

	sc->sc_speed_bits = speed_table[selected].bits;
	sc->sc_need_commit = 1;
	*argp = speed_table[selected].speed;

	return (0);
}

/*
 * Audio interface functions
 */
int
cs4231_open(void *vsc, int flags)
{
	struct cs4231_softc *sc = vsc;
	int tries;

	if (sc->sc_open)
		return (EBUSY);
	sc->sc_open = 1;

	sc->sc_capture.cs_intr = NULL;
	sc->sc_capture.cs_arg = NULL;
	sc->sc_capture.cs_locked = 0;

	sc->sc_playback.cs_intr = NULL;
	sc->sc_playback.cs_arg = NULL;
	sc->sc_playback.cs_locked = 0;

	APC_WRITE(sc, APC_CSR, APC_CSR_RESET);
	DELAY(10);
	APC_WRITE(sc, APC_CSR, 0);
	DELAY(10);
	APC_WRITE(sc, APC_CSR, APC_READ(sc, APC_CSR) | APC_CSR_CODEC_RESET);

	DELAY(20);

	APC_WRITE(sc, APC_CSR, APC_READ(sc, APC_CSR) & (~APC_CSR_CODEC_RESET));

	for (tries = CS_TIMEOUT;
	     tries && CS_READ(sc, AD1848_IADDR) == SP_IN_INIT; tries--)
		DELAY(10);
	if (tries == 0)
		printf("%s: timeout waiting for reset\n", sc->sc_dev.dv_xname);

	/* Turn on cs4231 mode */
	cs4231_write(sc, SP_MISC_INFO,
	    cs4231_read(sc, SP_MISC_INFO) | MODE2);

	cs4231_setup_output(sc);

	cs4231_write(sc, SP_PIN_CONTROL,
	    cs4231_read(sc, SP_PIN_CONTROL) | INTERRUPT_ENABLE);

	return (0);
}

void
cs4231_setup_output(struct cs4231_softc *sc)
{
	u_int8_t pc, mi, rm, lm;

	pc = cs4231_read(sc, SP_PIN_CONTROL) | CS_PC_HDPHMUTE | CS_PC_LINEMUTE;

	mi = cs4231_read(sc, CS_MONO_IO_CONTROL) | MONO_OUTPUT_MUTE;

	lm = cs4231_read(sc, SP_LEFT_OUTPUT_CONTROL);
	lm &= ~OUTPUT_ATTEN_BITS;
	lm |= ((~(sc->sc_volume[CSPORT_SPEAKER].left >> 2)) &
	    OUTPUT_ATTEN_BITS) | OUTPUT_MUTE;

	rm = cs4231_read(sc, SP_RIGHT_OUTPUT_CONTROL);
	rm &= ~OUTPUT_ATTEN_BITS;
	rm |= ((~(sc->sc_volume[CSPORT_SPEAKER].right >> 2)) &
	    OUTPUT_ATTEN_BITS) | OUTPUT_MUTE;

	if (sc->sc_mute[CSPORT_MONITOR]) {
		lm &= ~OUTPUT_MUTE;
		rm &= ~OUTPUT_MUTE;
	}

	switch (sc->sc_out_port) {
	case CSPORT_HEADPHONE:
		if (sc->sc_mute[CSPORT_SPEAKER])
			pc &= ~CS_PC_HDPHMUTE;
		break;
	case CSPORT_SPEAKER:
		if (sc->sc_mute[CSPORT_SPEAKER])
			mi &= ~MONO_OUTPUT_MUTE;
		break;
	case CSPORT_LINEOUT:
		if (sc->sc_mute[CSPORT_SPEAKER])
			pc &= ~CS_PC_LINEMUTE;
		break;
	}

	cs4231_write(sc, SP_LEFT_OUTPUT_CONTROL, lm);
	cs4231_write(sc, SP_RIGHT_OUTPUT_CONTROL, rm);
	cs4231_write(sc, SP_PIN_CONTROL, pc);
	cs4231_write(sc, CS_MONO_IO_CONTROL, mi);

	/* XXX doesn't really belong here... */
	switch (sc->sc_in_port) {
	case CSPORT_LINEIN:
		pc = LINE_INPUT;
		break;
	case CSPORT_AUX1:
		pc = AUX_INPUT;
		break;
	case CSPORT_DAC:
		pc = MIXED_DAC_INPUT;
		break;
	case CSPORT_MICROPHONE:
	default:
		pc = MIC_INPUT;
		break;
	}
	lm = cs4231_read(sc, SP_LEFT_INPUT_CONTROL);
	rm = cs4231_read(sc, SP_RIGHT_INPUT_CONTROL);
	lm &= ~(MIXED_DAC_INPUT | ATTEN_22_5);
	rm &= ~(MIXED_DAC_INPUT | ATTEN_22_5);
	lm |= pc | (sc->sc_adc.left >> 4);
	rm |= pc | (sc->sc_adc.right >> 4);
	cs4231_write(sc, SP_LEFT_INPUT_CONTROL, lm);
	cs4231_write(sc, SP_RIGHT_INPUT_CONTROL, rm);
}

void
cs4231_close(void *vsc)
{
	struct cs4231_softc *sc = vsc;

	cs4231_halt_input(sc);
	cs4231_halt_output(sc);
	cs4231_write(sc, SP_PIN_CONTROL,
	    cs4231_read(sc, SP_PIN_CONTROL) & (~INTERRUPT_ENABLE));
	sc->sc_open = 0;
}

int
cs4231_set_params(void *vsc, int setmode, int usemode,
    struct audio_params *p, struct audio_params *r)
{
	struct cs4231_softc *sc = (struct cs4231_softc *)vsc;
	int err, bits, enc = p->encoding;

	switch (enc) {
	case AUDIO_ENCODING_ULAW:
		if (p->precision != 8)
			return (EINVAL);
		bits = FMT_ULAW >> 5;
		break;
	case AUDIO_ENCODING_ALAW:
		if (p->precision != 8)
			return (EINVAL);
		bits = FMT_ALAW >> 5;
		break;
	case AUDIO_ENCODING_SLINEAR_LE:
		if (p->precision == 16)
			bits = FMT_TWOS_COMP >> 5;
		else
			return (EINVAL);
		break;
	case AUDIO_ENCODING_SLINEAR_BE:
		if (p->precision == 16)
			bits = FMT_TWOS_COMP_BE >> 5;
		else
			return (EINVAL);
		break;
	case AUDIO_ENCODING_ULINEAR_LE:
	case AUDIO_ENCODING_ULINEAR_BE:
		if (p->precision == 8)
			bits = FMT_PCM8 >> 5;
		else
			return (EINVAL);
		break;
	default:
		return (EINVAL);
	}

	if (p->channels != 1 && p->channels != 2)
		return (EINVAL);

	err = cs4231_set_speed(sc, &p->sample_rate);
	if (err)
		return (err);

	p->bps = AUDIO_BPS(p->precision);
	r->bps = AUDIO_BPS(r->precision);
	p->msb = r->msb = 1;

	sc->sc_format_bits = bits;
	sc->sc_channels = p->channels;
	sc->sc_precision = p->precision;
	sc->sc_need_commit = 1;
	return (0);
}

int
cs4231_round_blocksize(void *vsc, int blk)
{
	return ((blk + 3) & (-4));
}

int
cs4231_commit_settings(void *vsc)
{
	struct cs4231_softc *sc = (struct cs4231_softc *)vsc;
	int tries;
	u_int8_t r, fs;

	if (sc->sc_need_commit == 0)
		return (0);

	fs = sc->sc_speed_bits | (sc->sc_format_bits << 5);
	if (sc->sc_channels == 2)
		fs |= FMT_STEREO;

	/* XXX: this is called before DMA is setup, useful ? */
	mtx_enter(&audio_lock);

	r = cs4231_read(sc, SP_INTERFACE_CONFIG) | AUTO_CAL_ENABLE;
	CS_WRITE(sc, AD1848_IADDR, MODE_CHANGE_ENABLE);
	CS_WRITE(sc, AD1848_IADDR, MODE_CHANGE_ENABLE | SP_INTERFACE_CONFIG);
	CS_WRITE(sc, AD1848_IDATA, r);

	CS_WRITE(sc, AD1848_IADDR, MODE_CHANGE_ENABLE | SP_CLOCK_DATA_FORMAT);
	CS_WRITE(sc, AD1848_IDATA, fs);
	CS_READ(sc, AD1848_IDATA);
	CS_READ(sc, AD1848_IDATA);
	tries = CS_TIMEOUT;
	for (tries = CS_TIMEOUT;
	     tries && CS_READ(sc, AD1848_IADDR) == SP_IN_INIT; tries--)
		DELAY(10);
	if (tries == 0)
		printf("%s: timeout committing fspb\n", sc->sc_dev.dv_xname);

	CS_WRITE(sc, AD1848_IADDR, MODE_CHANGE_ENABLE | CS_REC_FORMAT);
	CS_WRITE(sc, AD1848_IDATA, fs);
	CS_READ(sc, AD1848_IDATA);
	CS_READ(sc, AD1848_IDATA);
	for (tries = CS_TIMEOUT;
	     tries && CS_READ(sc, AD1848_IADDR) == SP_IN_INIT; tries--)
		DELAY(10);
	if (tries == 0)
		printf("%s: timeout committing cdf\n", sc->sc_dev.dv_xname);

	CS_WRITE(sc, AD1848_IADDR, 0);
	for (tries = CS_TIMEOUT;
	     tries && CS_READ(sc, AD1848_IADDR) == SP_IN_INIT; tries--)
		DELAY(10);
	if (tries == 0)
		printf("%s: timeout waiting for !mce\n", sc->sc_dev.dv_xname);

	CS_WRITE(sc, AD1848_IADDR, SP_TEST_AND_INIT);
	for (tries = CS_TIMEOUT;
	     tries && CS_READ(sc, AD1848_IDATA) & AUTO_CAL_IN_PROG; tries--)
		DELAY(10);
	if (tries == 0)
		printf("%s: timeout waiting for autocalibration\n",
		    sc->sc_dev.dv_xname);

	mtx_leave(&audio_lock);

	sc->sc_need_commit = 0;
	return (0);
}

int
cs4231_halt_output(void *vsc)
{
	struct cs4231_softc *sc = (struct cs4231_softc *)vsc;

	/* XXX Kills some capture bits */
	mtx_enter(&audio_lock);
	APC_WRITE(sc, APC_CSR, APC_READ(sc, APC_CSR) &
	    ~(APC_CSR_EI | APC_CSR_GIE | APC_CSR_PIE |
	      APC_CSR_EIE | APC_CSR_PDMA_GO | APC_CSR_PMIE));
	cs4231_write(sc, SP_INTERFACE_CONFIG,
	    cs4231_read(sc, SP_INTERFACE_CONFIG) & (~PLAYBACK_ENABLE));
	sc->sc_playback.cs_locked = 0;
	mtx_leave(&audio_lock);
	return (0);
}

int
cs4231_halt_input(void *vsc)
{
	struct cs4231_softc *sc = (struct cs4231_softc *)vsc;

	/* XXX Kills some playback bits */
	mtx_enter(&audio_lock);
	APC_WRITE(sc, APC_CSR, APC_CSR_CAPTURE_PAUSE);
	cs4231_write(sc, SP_INTERFACE_CONFIG,
	    cs4231_read(sc, SP_INTERFACE_CONFIG) & (~CAPTURE_ENABLE));
	sc->sc_capture.cs_locked = 0;
	mtx_leave(&audio_lock);
	return (0);
}

int
cs4231_set_port(void *vsc, mixer_ctrl_t *cp)
{
	struct cs4231_softc *sc = (struct cs4231_softc *)vsc;
	int error = EINVAL;

	DPRINTF(("cs4231_set_port: port=%d type=%d\n", cp->dev, cp->type));

	switch (cp->dev) {
	case CSAUDIO_DAC_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1)
			cs4231_write(sc, SP_LEFT_AUX1_CONTROL,
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] &
			    LINE_INPUT_ATTEN_BITS);
		else if (cp->un.value.num_channels == 2) {
			cs4231_write(sc, SP_LEFT_AUX1_CONTROL,
			    cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT] &
			    LINE_INPUT_ATTEN_BITS);
			cs4231_write(sc, SP_RIGHT_AUX1_CONTROL,
			    cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT] &
			    LINE_INPUT_ATTEN_BITS);
		} else
			break;
		error = 0;
		break;
	case CSAUDIO_LINE_IN_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1)
			cs4231_write(sc, CS_LEFT_LINE_CONTROL,
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] &
			    AUX_INPUT_ATTEN_BITS);
		else if (cp->un.value.num_channels == 2) {
			cs4231_write(sc, CS_LEFT_LINE_CONTROL,
			    cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT] &
			    AUX_INPUT_ATTEN_BITS);
			cs4231_write(sc, CS_RIGHT_LINE_CONTROL,
			    cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT] &
			    AUX_INPUT_ATTEN_BITS);
		} else
			break;
		error = 0;
		break;
	case CSAUDIO_MIC_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
#if 0
			cs4231_write(sc, CS_MONO_IO_CONTROL,
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] &
			    MONO_INPUT_ATTEN_BITS);
#endif
		} else
			break;
		error = 0;
		break;
	case CSAUDIO_CD_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
			cs4231_write(sc, SP_LEFT_AUX2_CONTROL,
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] &
			    LINE_INPUT_ATTEN_BITS);
		} else if (cp->un.value.num_channels == 2) {
			cs4231_write(sc, SP_LEFT_AUX2_CONTROL,
			    cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT] &
			    LINE_INPUT_ATTEN_BITS);
			cs4231_write(sc, SP_RIGHT_AUX2_CONTROL,
			    cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT] &
			    LINE_INPUT_ATTEN_BITS);
		} else
			break;
		error = 0;
		break;
	case CSAUDIO_MONITOR_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1)
			cs4231_write(sc, SP_DIGITAL_MIX,
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] << 2);
		else
			break;
		error = 0;
		break;
	case CSAUDIO_OUTPUT_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
			sc->sc_volume[CSPORT_SPEAKER].left =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO];
			sc->sc_volume[CSPORT_SPEAKER].right =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO];
		}
		else if (cp->un.value.num_channels == 2) {
			sc->sc_volume[CSPORT_SPEAKER].left =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT];
			sc->sc_volume[CSPORT_SPEAKER].right =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT];
		}
		else
			break;

		cs4231_setup_output(sc);
		error = 0;
		break;
	case CSAUDIO_OUTPUT:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		if (cp->un.ord != CSPORT_LINEOUT &&
		    cp->un.ord != CSPORT_SPEAKER &&
		    cp->un.ord != CSPORT_HEADPHONE)
			return (EINVAL);
		sc->sc_out_port = cp->un.ord;
		cs4231_setup_output(sc);
		error = 0;
		break;
	case CSAUDIO_LINE_IN_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		sc->sc_mute[CSPORT_LINEIN] = cp->un.ord ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_DAC_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		sc->sc_mute[CSPORT_AUX1] = cp->un.ord ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_CD_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		sc->sc_mute[CSPORT_AUX2] = cp->un.ord ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_MIC_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		sc->sc_mute[CSPORT_MONO] = cp->un.ord ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_MONITOR_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		sc->sc_mute[CSPORT_MONITOR] = cp->un.ord ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_OUTPUT_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		sc->sc_mute[CSPORT_SPEAKER] = cp->un.ord ? 1 : 0;
		cs4231_setup_output(sc);
		error = 0;
		break;
	case CSAUDIO_REC_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
			sc->sc_adc.left =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO];
			sc->sc_adc.right =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO];
		} else if (cp->un.value.num_channels == 2) {
			sc->sc_adc.left =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT];
			sc->sc_adc.right =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT];
		} else
			break;
		cs4231_setup_output(sc);
		error = 0;
		break;
	case CSAUDIO_RECORD_SOURCE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		if (cp->un.ord == CSPORT_MICROPHONE ||
		    cp->un.ord == CSPORT_LINEIN ||
		    cp->un.ord == CSPORT_AUX1 ||
		    cp->un.ord == CSPORT_DAC) {
			sc->sc_in_port  = cp->un.ord;
			error = 0;
			cs4231_setup_output(sc);
		}
		break;
	}

	return (error);
}

int
cs4231_get_port(void *vsc, mixer_ctrl_t *cp)
{
	struct cs4231_softc *sc = (struct cs4231_softc *)vsc;
	int error = EINVAL;

	DPRINTF(("cs4231_get_port: port=%d type=%d\n", cp->dev, cp->type));

	switch (cp->dev) {
	case CSAUDIO_DAC_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1)
			cp->un.value.level[AUDIO_MIXER_LEVEL_MONO]=
			    cs4231_read(sc, SP_LEFT_AUX1_CONTROL) &
			    LINE_INPUT_ATTEN_BITS;
		else if (cp->un.value.num_channels == 2) {
			cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT] =
			    cs4231_read(sc, SP_LEFT_AUX1_CONTROL) &
			    LINE_INPUT_ATTEN_BITS;
			cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT] =
			    cs4231_read(sc, SP_RIGHT_AUX1_CONTROL) &
			    LINE_INPUT_ATTEN_BITS;
		} else
			break;
		error = 0;
		break;
	case CSAUDIO_LINE_IN_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1)
			cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] =
			    cs4231_read(sc, CS_LEFT_LINE_CONTROL) & AUX_INPUT_ATTEN_BITS;
		else if (cp->un.value.num_channels == 2) {
			cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT] =
			    cs4231_read(sc, CS_LEFT_LINE_CONTROL) & AUX_INPUT_ATTEN_BITS;
			cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT] =
			    cs4231_read(sc, CS_RIGHT_LINE_CONTROL) & AUX_INPUT_ATTEN_BITS;
		} else
			break;
		error = 0;
		break;
	case CSAUDIO_MIC_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
#if 0
			cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] =
			    cs4231_read(sc, CS_MONO_IO_CONTROL) &
			    MONO_INPUT_ATTEN_BITS;
#endif
		} else
			break;
		error = 0;
		break;
	case CSAUDIO_CD_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1)
			cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] =
			    cs4231_read(sc, SP_LEFT_AUX2_CONTROL) &
			    LINE_INPUT_ATTEN_BITS;
		else if (cp->un.value.num_channels == 2) {
			cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT] =
			    cs4231_read(sc, SP_LEFT_AUX2_CONTROL) &
			    LINE_INPUT_ATTEN_BITS;
			cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT] =
			    cs4231_read(sc, SP_RIGHT_AUX2_CONTROL) &
			    LINE_INPUT_ATTEN_BITS;
		}
		else
			break;
		error = 0;
		break;
	case CSAUDIO_MONITOR_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels != 1)
			break;
		cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] =
		    cs4231_read(sc, SP_DIGITAL_MIX) >> 2;
		error = 0;
		break;
	case CSAUDIO_OUTPUT_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1)
			cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] =
			    sc->sc_volume[CSPORT_SPEAKER].left;
		else if (cp->un.value.num_channels == 2) {
			cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT] =
			    sc->sc_volume[CSPORT_SPEAKER].left;
			cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT] =
			    sc->sc_volume[CSPORT_SPEAKER].right;
		}
		else
			break;
		error = 0;
		break;
	case CSAUDIO_LINE_IN_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_mute[CSPORT_LINEIN] ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_DAC_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_mute[CSPORT_AUX1] ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_CD_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_mute[CSPORT_AUX2] ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_MIC_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_mute[CSPORT_MONO] ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_MONITOR_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_mute[CSPORT_MONITOR] ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_OUTPUT_MUTE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_mute[CSPORT_SPEAKER] ? 1 : 0;
		error = 0;
		break;
	case CSAUDIO_REC_LVL:
		if (cp->type != AUDIO_MIXER_VALUE)
			break;
		if (cp->un.value.num_channels == 1) {
			cp->un.value.level[AUDIO_MIXER_LEVEL_MONO] =
			    sc->sc_adc.left;
		} else if (cp->un.value.num_channels == 2) {
			cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT] =
			    sc->sc_adc.left;
			cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT] =
			    sc->sc_adc.right;
		} else
			break;
		error = 0;
		break;
	case CSAUDIO_RECORD_SOURCE:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_in_port;
		error = 0;
		break;
	case CSAUDIO_OUTPUT:
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_out_port;
		error = 0;
		break;
	}
	return (error);
}

int
cs4231_query_devinfo(void *vsc, mixer_devinfo_t *dip)
{
	int err = 0;

	switch (dip->index) {
	case CSAUDIO_MIC_LVL:		/* mono/microphone mixer */
		dip->type = AUDIO_MIXER_VALUE;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = CSAUDIO_MIC_MUTE;
		strlcpy(dip->label.name, AudioNmicrophone,
		    sizeof dip->label.name);
		dip->un.v.num_channels = 1;
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
		break;
	case CSAUDIO_DAC_LVL:		/* dacout */
		dip->type = AUDIO_MIXER_VALUE;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = CSAUDIO_DAC_MUTE;
		strlcpy(dip->label.name, AudioNdac,
		    sizeof dip->label.name);
		dip->un.v.num_channels = 2;
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
		break;
	case CSAUDIO_LINE_IN_LVL:	/* line */
		dip->type = AUDIO_MIXER_VALUE;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = CSAUDIO_LINE_IN_MUTE;
		strlcpy(dip->label.name, AudioNline, sizeof dip->label.name);
		dip->un.v.num_channels = 2;
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
		break;
	case CSAUDIO_CD_LVL:		/* cd */
		dip->type = AUDIO_MIXER_VALUE;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = CSAUDIO_CD_MUTE;
		strlcpy(dip->label.name, AudioNcd, sizeof dip->label.name);
		dip->un.v.num_channels = 2;
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
		break;
	case CSAUDIO_MONITOR_LVL:	/* monitor level */
		dip->type = AUDIO_MIXER_VALUE;
		dip->mixer_class = CSAUDIO_MONITOR_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = CSAUDIO_MONITOR_MUTE;
		strlcpy(dip->label.name, AudioNmonitor,
		    sizeof dip->label.name);
		dip->un.v.num_channels = 1;
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
		break;
	case CSAUDIO_OUTPUT_LVL:
		dip->type = AUDIO_MIXER_VALUE;
		dip->mixer_class = CSAUDIO_OUTPUT_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = CSAUDIO_OUTPUT_MUTE;
		strlcpy(dip->label.name, AudioNoutput, sizeof dip->label.name);
		dip->un.v.num_channels = 2;
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
		break;
	case CSAUDIO_LINE_IN_MUTE:
		dip->type = AUDIO_MIXER_ENUM;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = CSAUDIO_LINE_IN_LVL;
		dip->next = AUDIO_MIXER_LAST;
		goto mute;
	case CSAUDIO_DAC_MUTE:
		dip->type = AUDIO_MIXER_ENUM;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = CSAUDIO_DAC_LVL;
		dip->next = AUDIO_MIXER_LAST;
		goto mute;
	case CSAUDIO_CD_MUTE:
		dip->type = AUDIO_MIXER_ENUM;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = CSAUDIO_CD_LVL;
		dip->next = AUDIO_MIXER_LAST;
		goto mute;
	case CSAUDIO_MIC_MUTE:
		dip->type = AUDIO_MIXER_ENUM;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = CSAUDIO_MIC_LVL;
		dip->next = AUDIO_MIXER_LAST;
		goto mute;
	case CSAUDIO_MONITOR_MUTE:
		dip->type = AUDIO_MIXER_ENUM;
		dip->mixer_class = CSAUDIO_OUTPUT_CLASS;
		dip->prev = CSAUDIO_MONITOR_LVL;
		dip->next = AUDIO_MIXER_LAST;
		goto mute;
	case CSAUDIO_OUTPUT_MUTE:
		dip->type = AUDIO_MIXER_ENUM;
		dip->mixer_class = CSAUDIO_OUTPUT_CLASS;
		dip->prev = CSAUDIO_OUTPUT_LVL;
		dip->next = AUDIO_MIXER_LAST;
		goto mute;

	mute:
		strlcpy(dip->label.name, AudioNmute, sizeof dip->label.name);
		dip->un.e.num_mem = 2;
		strlcpy(dip->un.e.member[0].label.name, AudioNon,
		    sizeof dip->un.e.member[0].label.name);
		dip->un.e.member[0].ord = 0;
		strlcpy(dip->un.e.member[1].label.name, AudioNoff,
		    sizeof dip->un.e.member[1].label.name);
		dip->un.e.member[1].ord = 1;
		break;
	case CSAUDIO_REC_LVL:		/* record level */
		dip->type = AUDIO_MIXER_VALUE;
		dip->mixer_class = CSAUDIO_RECORD_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = CSAUDIO_RECORD_SOURCE;
		strlcpy(dip->label.name, AudioNrecord, sizeof dip->label.name);
		dip->un.v.num_channels = 2;
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
		break;
	case CSAUDIO_RECORD_SOURCE:
		dip->type = AUDIO_MIXER_ENUM;
		dip->mixer_class = CSAUDIO_RECORD_CLASS;
		dip->prev = CSAUDIO_REC_LVL;
		dip->next = AUDIO_MIXER_LAST;
		strlcpy(dip->label.name, AudioNsource, sizeof dip->label.name);
		dip->un.e.num_mem = 4;
		strlcpy(dip->un.e.member[0].label.name, AudioNmicrophone,
		    sizeof dip->un.e.member[0].label.name);
		dip->un.e.member[0].ord = CSPORT_MICROPHONE;
		strlcpy(dip->un.e.member[1].label.name, AudioNline,
		    sizeof dip->un.e.member[1].label.name);
		dip->un.e.member[1].ord = CSPORT_LINEIN;
		strlcpy(dip->un.e.member[2].label.name, AudioNcd,
		    sizeof dip->un.e.member[2].label.name);
		dip->un.e.member[2].ord = CSPORT_AUX1;
		strlcpy(dip->un.e.member[3].label.name, AudioNdac,
		    sizeof dip->un.e.member[3].label.name);
		dip->un.e.member[3].ord = CSPORT_DAC;
		break;
	case CSAUDIO_OUTPUT:
		dip->type = AUDIO_MIXER_ENUM;
		dip->mixer_class = CSAUDIO_MONITOR_CLASS;
		dip->prev = dip->next = AUDIO_MIXER_LAST;
		strlcpy(dip->label.name, AudioNoutput, sizeof dip->label.name);
		dip->un.e.num_mem = 3;
		strlcpy(dip->un.e.member[0].label.name, AudioNspeaker,
		    sizeof dip->un.e.member[0].label.name);
		dip->un.e.member[0].ord = CSPORT_SPEAKER;
		strlcpy(dip->un.e.member[1].label.name, AudioNline,
		    sizeof dip->un.e.member[1].label.name);
		dip->un.e.member[1].ord = CSPORT_LINEOUT;
		strlcpy(dip->un.e.member[2].label.name, AudioNheadphone,
		    sizeof dip->un.e.member[2].label.name);
		dip->un.e.member[2].ord = CSPORT_HEADPHONE;
		break;
	case CSAUDIO_INPUT_CLASS:	/* input class descriptor */
		dip->type = AUDIO_MIXER_CLASS;
		dip->mixer_class = CSAUDIO_INPUT_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = AUDIO_MIXER_LAST;
		strlcpy(dip->label.name, AudioCinputs, sizeof dip->label.name);
		break;
	case CSAUDIO_OUTPUT_CLASS:	/* output class descriptor */
		dip->type = AUDIO_MIXER_CLASS;
		dip->mixer_class = CSAUDIO_OUTPUT_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = AUDIO_MIXER_LAST;
		strlcpy(dip->label.name, AudioCoutputs,
		    sizeof dip->label.name);
		break;
	case CSAUDIO_MONITOR_CLASS:	/* monitor class descriptor */
		dip->type = AUDIO_MIXER_CLASS;
		dip->mixer_class = CSAUDIO_MONITOR_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = AUDIO_MIXER_LAST;
		strlcpy(dip->label.name, AudioCmonitor,
		    sizeof dip->label.name);
		break;
	case CSAUDIO_RECORD_CLASS:	/* record class descriptor */
		dip->type = AUDIO_MIXER_CLASS;
		dip->mixer_class = CSAUDIO_RECORD_CLASS;
		dip->prev = AUDIO_MIXER_LAST;
		dip->next = AUDIO_MIXER_LAST;
		strlcpy(dip->label.name, AudioCrecord, sizeof dip->label.name);
		break;
	default:
		err = ENXIO;
	}

	return (err);
}

int
cs4231_get_props(void *vsc)
{
	return (AUDIO_PROP_FULLDUPLEX);
}

/*
 * Hardware interrupt handler
 */
int
cs4231_intr(void *vsc)
{
	struct cs4231_softc *sc = (struct cs4231_softc *)vsc;
	u_int32_t csr;
	u_int8_t reg, status;
	struct cs_dma *p;
	int r = 0;

	mtx_enter(&audio_lock);
	csr = APC_READ(sc, APC_CSR);
	APC_WRITE(sc, APC_CSR, csr);

	if ((csr & APC_CSR_EIE) && (csr & APC_CSR_EI)) {
		printf("%s: error interrupt\n", sc->sc_dev.dv_xname);
		r = 1;
	}

	if ((csr & APC_CSR_PIE) && (csr & APC_CSR_PI)) {
		/* playback interrupt */
		r = 1;
	}

	if ((csr & APC_CSR_GIE) && (csr & APC_CSR_GI)) {
		/* general interrupt */
		status = CS_READ(sc, AD1848_STATUS);
		if (status & (INTERRUPT_STATUS | SAMPLE_ERROR)) {
			reg = cs4231_read(sc, CS_IRQ_STATUS);
			if (reg & CS_AFS_PI) {
				cs4231_write(sc, SP_LOWER_BASE_COUNT, 0xff);
				cs4231_write(sc, SP_UPPER_BASE_COUNT, 0xff);
			}
			if (reg & CS_AFS_CI) {
				cs4231_write(sc, CS_LOWER_REC_CNT, 0xff);
				cs4231_write(sc, CS_UPPER_REC_CNT, 0xff);
			}
			CS_WRITE(sc, AD1848_STATUS, 0);
		}
		r = 1;
	}


	if (csr & (APC_CSR_PI|APC_CSR_PMI|APC_CSR_PIE|APC_CSR_PD))
		r = 1;

	if ((csr & APC_CSR_PMIE) && (csr & APC_CSR_PMI)) {
		struct cs_channel *chan = &sc->sc_playback;
		u_long nextaddr, togo;

		p = chan->cs_curdma;
		togo = chan->cs_segsz - chan->cs_cnt;
		if (togo == 0) {
			nextaddr = (u_int32_t)p->dmamap->dm_segs[0].ds_addr;
			chan->cs_cnt = togo = chan->cs_blksz;
		} else {
			nextaddr = APC_READ(sc, APC_PNVA) + chan->cs_blksz;
			if (togo > chan->cs_blksz)
				togo = chan->cs_blksz;
			chan->cs_cnt += togo;
		}

		APC_WRITE(sc, APC_PNVA, nextaddr);
		APC_WRITE(sc, APC_PNC, togo);

		if (chan->cs_intr != NULL)
			(*chan->cs_intr)(chan->cs_arg);
		r = 1;
	}

	if ((csr & APC_CSR_CIE) && (csr & APC_CSR_CI)) {
		if (csr & APC_CSR_CD) {
			struct cs_channel *chan = &sc->sc_capture;
			u_long nextaddr, togo;

			p = chan->cs_curdma;
			togo = chan->cs_segsz - chan->cs_cnt;
			if (togo == 0) {
				nextaddr =
				    (u_int32_t)p->dmamap->dm_segs[0].ds_addr;
				chan->cs_cnt = togo = chan->cs_blksz;
			} else {
				nextaddr = APC_READ(sc, APC_CNVA) +
				    chan->cs_blksz;
				if (togo > chan->cs_blksz)
					togo = chan->cs_blksz;
				chan->cs_cnt += togo;
			}

			APC_WRITE(sc, APC_CNVA, nextaddr);
			APC_WRITE(sc, APC_CNC, togo);

			if (chan->cs_intr != NULL)
				(*chan->cs_intr)(chan->cs_arg);
		}
		r = 1;
	}

	if ((csr & APC_CSR_CMIE) && (csr & APC_CSR_CMI)) {
		/* capture empty */
		r = 1;
	}

	mtx_leave(&audio_lock);
	return (r);
}

void *
cs4231_alloc(void *vsc, int direction, size_t size, int pool, int flags)
{
	struct cs4231_softc *sc = (struct cs4231_softc *)vsc;
	bus_dma_tag_t dmat = sc->sc_dmatag;
	struct cs_dma *p;

	p = (struct cs_dma *)malloc(sizeof(struct cs_dma), pool, flags);
	if (p == NULL)
		return (NULL);

	if (bus_dmamap_create(dmat, size, 1, size, 0,
	    BUS_DMA_NOWAIT, &p->dmamap) != 0)
		goto fail;

	p->size = size;

	if (bus_dmamem_alloc(dmat, size, 64*1024, 0, p->segs,
	    nitems(p->segs), &p->nsegs,
	    BUS_DMA_NOWAIT) != 0)
		goto fail1;

	if (bus_dmamem_map(dmat, p->segs, p->nsegs, p->size,
	    &p->addr, BUS_DMA_NOWAIT | BUS_DMA_COHERENT) != 0)
		goto fail2;

	if (bus_dmamap_load(dmat, p->dmamap, p->addr, size, NULL,
	    BUS_DMA_NOWAIT) != 0)
		goto fail3;

	p->next = sc->sc_dmas;
	sc->sc_dmas = p;
	return (p->addr);

fail3:
	bus_dmamem_unmap(dmat, p->addr, p->size);
fail2:
	bus_dmamem_free(dmat, p->segs, p->nsegs);
fail1:
	bus_dmamap_destroy(dmat, p->dmamap);
fail:
	free(p, pool, 0);
	return (NULL);
}

void
cs4231_free(void *vsc, void *ptr, int pool)
{
	struct cs4231_softc *sc = vsc;
	bus_dma_tag_t dmat = sc->sc_dmatag;
	struct cs_dma *p, **pp;

	for (pp = &sc->sc_dmas; (p = *pp) != NULL; pp = &(*pp)->next) {
		if (p->addr != ptr)
			continue;
		bus_dmamap_unload(dmat, p->dmamap);
		bus_dmamem_unmap(dmat, p->addr, p->size);
		bus_dmamem_free(dmat, p->segs, p->nsegs);
		bus_dmamap_destroy(dmat, p->dmamap);
		*pp = p->next;
		free(p, pool, 0);
		return;
	}
	printf("%s: attempt to free rogue pointer\n", sc->sc_dev.dv_xname);
}

int
cs4231_trigger_output(void *vsc, void *start, void *end, int blksize,
    void (*intr)(void *), void *arg, struct audio_params *param)
{
	struct cs4231_softc *sc = vsc;
	struct cs_channel *chan = &sc->sc_playback;
	struct cs_dma *p;
	u_int32_t csr;
	u_long n;

	if (chan->cs_locked != 0) {
		printf("%s: trigger_output: already running\n",
		    sc->sc_dev.dv_xname);
		return (EINVAL);
	}

	chan->cs_locked = 1;
	chan->cs_intr = intr;
	chan->cs_arg = arg;

	for (p = sc->sc_dmas; p->addr != start; p = p->next)
		/*EMPTY*/;
	if (p == NULL) {
		printf("%s: trigger_output: bad addr: %p\n",
		    sc->sc_dev.dv_xname, start);
		return (EINVAL);
	}

	n = (char *)end - (char *)start;

	/*
	 * Do only `blksize' at a time, so audio_pint() is kept
	 * synchronous with us...
	 */
	chan->cs_blksz = blksize;
	chan->cs_curdma = p;
	chan->cs_segsz = n;

	if (n > chan->cs_blksz)
		n = chan->cs_blksz;

	chan->cs_cnt = n;

	mtx_enter(&audio_lock);
	csr = APC_READ(sc, APC_CSR);

	APC_WRITE(sc, APC_PNVA, (u_long)p->dmamap->dm_segs[0].ds_addr);
	APC_WRITE(sc, APC_PNC, (u_long)n);

	if ((csr & APC_CSR_PDMA_GO) == 0 || (csr & APC_CSR_PPAUSE) != 0) {
		APC_WRITE(sc, APC_CSR,
		    APC_READ(sc, APC_CSR) & ~(APC_CSR_PIE | APC_CSR_PPAUSE));
		APC_WRITE(sc, APC_CSR, APC_READ(sc, APC_CSR) |
		    APC_CSR_EI | APC_CSR_GIE | APC_CSR_PIE | APC_CSR_EIE |
		    APC_CSR_PMIE | APC_CSR_PDMA_GO);
		cs4231_write(sc, SP_LOWER_BASE_COUNT, 0xff);
		cs4231_write(sc, SP_UPPER_BASE_COUNT, 0xff);
		cs4231_write(sc, SP_INTERFACE_CONFIG,
		    cs4231_read(sc, SP_INTERFACE_CONFIG) | PLAYBACK_ENABLE);
	}
	mtx_leave(&audio_lock);
	return (0);
}

int
cs4231_trigger_input(void *vsc, void *start, void *end, int blksize,
    void (*intr)(void *), void *arg, struct audio_params *param)
{
	struct cs4231_softc *sc = vsc;
	struct cs_channel *chan = &sc->sc_capture;
	struct cs_dma *p;
	u_int32_t csr;
	u_long n;

	if (chan->cs_locked != 0) {
		printf("%s: trigger_input: already running\n",
		    sc->sc_dev.dv_xname);
		return (EINVAL);
	}
	chan->cs_locked = 1;
	chan->cs_intr = intr;
	chan->cs_arg = arg;

	for (p = sc->sc_dmas; p->addr != start; p = p->next)
		/*EMPTY*/;
	if (p == NULL) {
		printf("%s: trigger_input: bad addr: %p\n",
		    sc->sc_dev.dv_xname, start);
		return (EINVAL);
	}

	n = (char *)end - (char *)start;

	/*
	 * Do only `blksize' at a time, so audio_cint() is kept
	 * synchronous with us...
	 */
	chan->cs_blksz = blksize;
	chan->cs_curdma = p;
	chan->cs_segsz = n;

	if (n > chan->cs_blksz)
		n = chan->cs_blksz;
	chan->cs_cnt = n;

	mtx_enter(&audio_lock);
	APC_WRITE(sc, APC_CNVA, p->dmamap->dm_segs[0].ds_addr);
	APC_WRITE(sc, APC_CNC, (u_long)n);

	csr = APC_READ(sc, APC_CSR);
	if ((csr & APC_CSR_CDMA_GO) == 0 || (csr & APC_CSR_CPAUSE) != 0) {
		csr &= APC_CSR_CPAUSE;
		csr |= APC_CSR_GIE | APC_CSR_CMIE | APC_CSR_CIE | APC_CSR_EI |
		    APC_CSR_CDMA_GO;
		APC_WRITE(sc, APC_CSR, csr);
		cs4231_write(sc, CS_LOWER_REC_CNT, 0xff);
		cs4231_write(sc, CS_UPPER_REC_CNT, 0xff);
		cs4231_write(sc, SP_INTERFACE_CONFIG,
		    cs4231_read(sc, SP_INTERFACE_CONFIG) | CAPTURE_ENABLE);
	}

	if (APC_READ(sc, APC_CSR) & APC_CSR_CD) {
		u_long nextaddr, togo;

		p = chan->cs_curdma;
		togo = chan->cs_segsz - chan->cs_cnt;
		if (togo == 0) {
			nextaddr = (u_int32_t)p->dmamap->dm_segs[0].ds_addr;
			chan->cs_cnt = togo = chan->cs_blksz;
		} else {
			nextaddr = APC_READ(sc, APC_CNVA) + chan->cs_blksz;
			if (togo > chan->cs_blksz)
				togo = chan->cs_blksz;
			chan->cs_cnt += togo;
		}

		APC_WRITE(sc, APC_CNVA, nextaddr);
		APC_WRITE(sc, APC_CNC, togo);
	}

	mtx_leave(&audio_lock);
	return (0);
}
@


1.37
log
@Remove unused getdev() audio driver functions.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.36 2016/09/14 06:12:20 ratchov Exp $	*/
a496 5
	case AUDIO_ENCODING_ULINEAR:
		if (p->precision != 8)
			return (EINVAL);
		bits = FMT_PCM8 >> 5;
		break;
a503 5
		if (p->precision == 8)
			bits = FMT_PCM8 >> 5;
		else
			return (EINVAL);
		break;
@


1.36
log
@Remove drain(), query_encoding(), mappage() and get_default_params()
methods from all audio drivers and from the audio_if structure as they
are never called.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.34 2015/05/11 06:46:22 ratchov Exp $	*/
a142 1
int	cs4231_getdev(void *, struct audio_device *);
a166 1
	cs4231_getdev,
a186 6
struct audio_device cs4231_device = {
	"SUNW,CS4231",
	"b",
	"onboard1",
};

a640 7
	return (0);
}

int
cs4231_getdev(void *vsc, struct audio_device *retp)
{
	*retp = cs4231_device;
@


1.35
log
@Remove support for ADPCM encoding which isn't used nowadays and
not available to programs anyway.
@
text
@a136 1
int	cs4231_query_encoding(void *, struct audio_encoding *);
a157 2
	0,
	cs4231_query_encoding,
a175 1
	0,
d178 1
a178 2
	cs4231_trigger_input,
	0
a478 63
}

int
cs4231_query_encoding(void *vsc, struct audio_encoding *fp)
{
	int err = 0;

	switch (fp->index) {
	case 0:
		strlcpy(fp->name, AudioEmulaw, sizeof fp->name);
		fp->encoding = AUDIO_ENCODING_ULAW;
		fp->precision = 8;
		fp->flags = 0;
		break;
	case 1:
		strlcpy(fp->name, AudioEalaw, sizeof fp->name);
		fp->encoding = AUDIO_ENCODING_ALAW;
		fp->precision = 8;
		fp->flags = 0;
		break;
	case 2:
		strlcpy(fp->name, AudioEslinear_le, sizeof fp->name);
		fp->encoding = AUDIO_ENCODING_SLINEAR_LE;
		fp->precision = 16;
		fp->flags = 0;
		break;
	case 3:
		strlcpy(fp->name, AudioEulinear, sizeof fp->name);
		fp->encoding = AUDIO_ENCODING_ULINEAR;
		fp->precision = 8;
		fp->flags = 0;
		break;
	case 4:
		strlcpy(fp->name, AudioEslinear_be, sizeof fp->name);
		fp->encoding = AUDIO_ENCODING_SLINEAR_BE;
		fp->precision = 16;
		fp->flags = 0;
		break;
	case 5:
		strlcpy(fp->name, AudioEslinear, sizeof fp->name);
		fp->encoding = AUDIO_ENCODING_SLINEAR;
		fp->precision = 8;
		fp->flags = AUDIO_ENCODINGFLAG_EMULATED;
		break;
	case 6:
		strlcpy(fp->name, AudioEulinear_le, sizeof fp->name);
		fp->encoding = AUDIO_ENCODING_ULINEAR_LE;
		fp->precision = 16;
		fp->flags = AUDIO_ENCODINGFLAG_EMULATED;
		break;
	case 7:
		strlcpy(fp->name, AudioEulinear_be, sizeof fp->name);
		fp->encoding = AUDIO_ENCODING_ULINEAR_BE;
		fp->precision = 16;
		fp->flags = AUDIO_ENCODINGFLAG_EMULATED;
		break;
	default:
		err = EINVAL;
	}
	fp->bps = AUDIO_BPS(fp->precision);
	fp->msb = 1;

	return (err);
@


1.34
log
@Remove all audio format conversion code from the kernel (btw holding
the kernel_lock), as we already do better conversions in
user-mode. Yet, no need for every single driver to fiddle with the
conversion code as they are done transparently by common MI code. With
help from armani and miod, support from mpi

ok armani@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.33 2014/07/12 18:48:52 tedu Exp $	*/
a539 6
	case 8:
		strlcpy(fp->name, AudioEadpcm, sizeof fp->name);
		fp->encoding = AUDIO_ENCODING_ADPCM;
		fp->precision = 8;
		fp->flags = 0;
		break;
a594 5
		break;
	case AUDIO_ENCODING_ADPCM:
		if (p->precision != 8)
			return (EINVAL);
		bits = FMT_ADPCM >> 5;
@


1.33
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.32 2013/05/15 08:29:24 ratchov Exp $	*/
a52 1
#include <dev/auconv.h>
a560 2
	void (*pswcode)(void *, u_char *, int cnt) = NULL;
	void (*rswcode)(void *, u_char *, int cnt) = NULL;
d574 1
a574 4
		if (p->precision == 8) {
			bits = FMT_PCM8 >> 5;
			pswcode = rswcode = change_sign8;
		} else if (p->precision == 16)
d585 1
a585 4
		if (p->precision == 8) {
			bits = FMT_PCM8 >> 5;
			pswcode = rswcode = change_sign8;
		} else if (p->precision == 16)
a589 6
	case AUDIO_ENCODING_SLINEAR:
		if (p->precision != 8)
			return (EINVAL);
		bits = FMT_PCM8 >> 5;
		pswcode = rswcode = change_sign8;
		break;
d593 1
a593 4
		else if (p->precision == 16) {
			bits = FMT_TWOS_COMP >> 5;
			pswcode = rswcode = change_sign16_le;
		} else
d599 1
a599 4
		else if (p->precision == 16) {
			bits = FMT_TWOS_COMP_BE >> 5;
			pswcode = rswcode = change_sign16_be;
		} else
a617 2
	p->sw_code = pswcode;
	r->sw_code = rswcode;
@


1.32
log
@Introduce a global interrupt-aware mutex protecting data
structures (including sound-card registers) from concurent
access by syscall and interrupt code-paths. Since critical
sections remain the same, calls to splraise/spllower can be
safely replaced by calls to mtx_enter/mtx_leave with two
exceptions: (1) mutexes are not reentrant (the inner splraise
is thus removed), and (2) we're not allowed to sleep with a
mutex (either msleep is used or the mutex is released before
sleeping).

ok and help from kettenis, a lot of work from armani
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.31 2011/04/05 19:54:35 jasper Exp $	*/
d1472 1
a1472 1
	free(p, pool);
d1491 1
a1491 1
		free(p, pool);
@


1.31
log
@- use nitems() no binary change on amd64

"reads OK" claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.30 2010/07/15 03:43:11 jakemsr Exp $	*/
d662 1
a662 1
	int s, tries;
d672 2
a673 1
	s = splaudio();
d716 1
a716 1
	splx(s);
d728 1
d735 1
d745 1
d750 1
d1334 1
d1427 1
d1540 1
d1557 1
d1602 1
d1637 1
@


1.30
log
@add two new members to structs audio_encoding and audio_prinfo.
for both structs, the new members are 'bps' and 'msb', which
describe the number of bytes per sample and data alignment in the
sample, respectively.  drivers must properly set these fields in
the 'query_encoding', 'set_parameters' and 'get_default_params'
hardware interface methods.

discussed with ratchov, deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.29 2008/04/21 00:32:43 jakemsr Exp $	*/
d1442 1
a1442 1
	    sizeof(p->segs)/sizeof(p->segs[0]), &p->nsegs,
@


1.29
log
@
allow low level audio drivers to specify a default sample format,
instead of 8-bit mono mulaw @@ 8kHz.

this is just the infrastructure; no drivers are specifying a default
yet.

ok ratchov@@, deanna@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.28 2006/06/02 20:00:56 miod Exp $	*/
d550 3
d641 3
@


1.28
log
@sbus_establish() and the associated linked list in the sbus softc is now only
used to store a per-device reset callback, for use in sbusreset(). Except
sbusreset() has never, ever, been used since Torek's sbus code went in.
Time to recycle those wasted bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.27 2005/07/09 22:23:15 miod Exp $	*/
d183 2
a184 1
	cs4231_trigger_input
@


1.27
log
@Do not #include "foo.h" and keep the whole file between #if NFOO >0 ... #endif,
config(8) will not bring us into play unless NFOO > 0 anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.26 2005/04/16 21:57:23 mickey Exp $	*/
a247 2

	sbus_establish(&sc->sc_sd, &sc->sc_dev);
@


1.26
log
@do not provide round_buffer if not needed unless explained why in comments
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.25 2005/04/15 13:05:14 mickey Exp $	*/
a38 3
#include "audio.h"
#if NAUDIO > 0

a1623 2

#endif /* NAUDIO > 0 */
@


1.25
log
@make sure aligment does not return zero block size
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.24 2005/03/08 21:35:03 miod Exp $	*/
a153 1
size_t	cs4231_round_buffersize(void *, int, size_t);
d182 1
a182 1
	cs4231_round_buffersize,
a1306 6
}

size_t
cs4231_round_buffersize(void *vsc, int direction, size_t size)
{
	return (size);
@


1.24
log
@When failing to register an interrupt, display the correct priority on sparc64.

ok cloder@@ martin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.23 2004/11/09 14:30:43 miod Exp $	*/
d654 1
a654 1
	return (blk & (-4));
@


1.23
log
@Always free memory on failure in c{e,s}4231_alloc(); from Patrick Lafiti.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.22 2004/09/29 19:17:43 miod Exp $	*/
d239 2
a240 1
		printf(": couldn't establish interrupt, pri %d\n", sa->sa_pri);
@


1.22
log
@Ratibibugle now useless evcnt structures.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.21 2003/07/03 20:36:07 jason Exp $	*/
d1437 1
a1437 1
		goto fail;
d1469 1
@


1.21
log
@ansify
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.20 2003/06/24 21:54:38 henric Exp $	*/
a262 2

	evcnt_attach(&sc->sc_dev, "intr", &sc->sc_intrcnt);
@


1.20
log
@Add a "where" argument to the sparc64 interrupt code.  This lets us
associate a name with each interrupt handler.  This is not visible
outside the kernel (yet).

ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.19 2003/06/02 18:32:41 jason Exp $	*/
d151 1
a151 1
int	cs4231_query_devinfo(void *addr, mixer_devinfo_t *);
d157 1
a157 1
    void (*intr)(void *), void *arg, struct audio_params *);
d159 1
a159 1
    void (*intr)(void *), void *arg, struct audio_params *);
d205 1
a205 3
cs4231_match(parent, vcf, aux)
	struct device *parent;
	void *vcf, *aux;
d213 1
a213 3
cs4231_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d281 1
a281 3
cs4231_write(sc, r, v)
	struct cs4231_softc *sc;
	u_int8_t r, v;
d291 1
a291 3
cs4231_read(sc, r)
	struct cs4231_softc *sc;
	u_int8_t r;
d298 1
a298 4
cs4231_set_speed(sc, argp)
	struct cs4231_softc *sc;
	u_long *argp;

d366 1
a366 3
cs4231_open(addr, flags)
	void *addr;
	int flags;
d368 1
a368 1
	struct cs4231_softc *sc = addr;
d412 1
a412 2
cs4231_setup_output(sc)
	struct cs4231_softc *sc;
d482 1
a482 2
cs4231_close(addr)
	void *addr;
d484 1
a484 1
	struct cs4231_softc *sc = addr;
d494 1
a494 3
cs4231_query_encoding(addr, fp)
	void *addr;
	struct audio_encoding *fp;
d560 2
a561 4
cs4231_set_params(addr, setmode, usemode, p, r)
	void *addr;
	int setmode, usemode;
	struct audio_params *p, *r;
d563 1
a563 1
	struct cs4231_softc *sc = (struct cs4231_softc *)addr;
d653 1
a653 3
cs4231_round_blocksize(addr, blk)
	void *addr;
	int blk;
d659 1
a659 2
cs4231_commit_settings(addr)
	void *addr;
d661 1
a661 1
	struct cs4231_softc *sc = (struct cs4231_softc *)addr;
d722 1
a722 2
cs4231_halt_output(addr)
	void *addr;
d724 1
a724 1
	struct cs4231_softc *sc = (struct cs4231_softc *)addr;
d737 1
a737 2
cs4231_halt_input(addr)
	void *addr;
d739 1
a739 1
	struct cs4231_softc *sc = (struct cs4231_softc *)addr;
d750 1
a750 3
cs4231_getdev(addr, retp)
	void *addr;
	struct audio_device *retp;
d757 1
a757 3
cs4231_set_port(addr, cp)
	void *addr;
	mixer_ctrl_t *cp;
d759 1
a759 1
	struct cs4231_softc *sc = (struct cs4231_softc *)addr;
d947 1
a947 3
cs4231_get_port(addr, cp)
	void *addr;
	mixer_ctrl_t *cp;
d949 1
a949 1
	struct cs4231_softc *sc = (struct cs4231_softc *)addr;
d1113 1
a1113 3
cs4231_query_devinfo(addr, dip)
	void *addr;
	mixer_devinfo_t *dip;
d1312 1
a1312 4
cs4231_round_buffersize(addr, direction, size)
	void *addr;
	int direction;
	size_t size;
d1318 1
a1318 2
cs4231_get_props(addr)
	void *addr;
d1327 1
a1327 2
cs4231_intr(v)
	void *v;
d1329 1
a1329 1
	struct cs4231_softc *sc = (struct cs4231_softc *)v;
d1431 1
a1431 6
cs4231_alloc(addr, direction, size, pool, flags)
	void *addr;
	int direction;
	size_t size;
	int pool;
	int flags;
d1433 1
a1433 1
	struct cs4231_softc *sc = (struct cs4231_softc *)addr;
d1475 1
a1475 4
cs4231_free(addr, ptr, pool)
	void *addr;
	void *ptr;
	int pool;
d1477 1
a1477 1
	struct cs4231_softc *sc = addr;
d1496 2
a1497 6
cs4231_trigger_output(addr, start, end, blksize, intr, arg, param)
	void *addr, *start, *end;
	int blksize;
	void (*intr)(void *);
	void *arg;
	struct audio_params *param;
d1499 1
a1499 1
	struct cs4231_softc *sc = addr;
d1558 2
a1559 6
cs4231_trigger_input(addr, start, end, blksize, intr, arg, param)
	void *addr, *start, *end;
	int blksize;
	void (*intr)(void *);
	void *arg;
	struct audio_params *param;
d1561 1
a1561 1
	struct cs4231_softc *sc = addr;
@


1.19
log
@Nuke my clause 3 and 4 (and a couple of files jointly (c) with Theo).
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.18 2003/04/27 11:22:54 ho Exp $	*/
d242 1
a242 1
	    cs4231_intr, sc) == NULL) {
@


1.18
log
@strcpy/sprintf cleanup of sys/dev. miod@@, deraadt@@ says to commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.17 2003/03/27 17:39:05 jason Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.17
log
@const and static cleaning
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.16 2003/02/17 01:29:20 henric Exp $	*/
d522 1
a522 1
		strcpy(fp->name, AudioEmulaw);
d528 1
a528 1
		strcpy(fp->name, AudioEalaw);
d534 1
a534 1
		strcpy(fp->name, AudioEslinear_le);
d540 1
a540 1
		strcpy(fp->name, AudioEulinear);
d546 1
a546 1
		strcpy(fp->name, AudioEslinear_be);
d552 1
a552 1
		strcpy(fp->name, AudioEslinear);
d558 1
a558 1
		strcpy(fp->name, AudioEulinear_le);
d564 1
a564 1
		strcpy(fp->name, AudioEulinear_be);
d570 1
a570 1
		strcpy(fp->name, AudioEadpcm);
d1160 2
a1161 1
		strcpy(dip->label.name, AudioNmicrophone);
d1163 2
a1164 1
		strcpy(dip->un.v.units.name, AudioNvolume);
d1171 2
a1172 1
		strcpy(dip->label.name, AudioNdac);
d1174 2
a1175 1
		strcpy(dip->un.v.units.name, AudioNvolume);
d1182 1
a1182 1
		strcpy(dip->label.name, AudioNline);
d1184 2
a1185 1
		strcpy(dip->un.v.units.name, AudioNvolume);
d1192 1
a1192 1
		strcpy(dip->label.name, AudioNcd);
d1194 2
a1195 1
		strcpy(dip->un.v.units.name, AudioNvolume);
d1202 2
a1203 1
		strcpy(dip->label.name, AudioNmonitor);
d1205 2
a1206 1
		strcpy(dip->un.v.units.name, AudioNvolume);
d1213 1
a1213 1
		strcpy(dip->label.name, AudioNoutput);
d1215 2
a1216 1
		strcpy(dip->un.v.units.name, AudioNvolume);
d1256 1
a1256 1
		strcpy(dip->label.name, AudioNmute);
d1258 2
a1259 1
		strcpy(dip->un.e.member[0].label.name, AudioNon);
d1261 2
a1262 1
		strcpy(dip->un.e.member[1].label.name, AudioNoff);
d1270 1
a1270 1
		strcpy(dip->label.name, AudioNrecord);
d1272 2
a1273 1
		strcpy(dip->un.v.units.name, AudioNvolume);
d1280 1
a1280 1
		strcpy(dip->label.name, AudioNsource);
d1282 2
a1283 1
		strcpy(dip->un.e.member[0].label.name, AudioNmicrophone);
d1285 2
a1286 1
		strcpy(dip->un.e.member[1].label.name, AudioNline);
d1288 2
a1289 1
		strcpy(dip->un.e.member[2].label.name, AudioNcd);
d1291 2
a1292 1
		strcpy(dip->un.e.member[3].label.name, AudioNdac);
d1299 1
a1299 1
		strcpy(dip->label.name, AudioNoutput);
d1301 2
a1302 1
		strcpy(dip->un.e.member[0].label.name, AudioNspeaker);
d1304 2
a1305 1
		strcpy(dip->un.e.member[1].label.name, AudioNline);
d1307 2
a1308 1
		strcpy(dip->un.e.member[2].label.name, AudioNheadphone);
d1316 1
a1316 1
		strcpy(dip->label.name, AudioCinputs);
d1323 2
a1324 1
		strcpy(dip->label.name, AudioCoutputs);
d1331 2
a1332 1
		strcpy(dip->label.name, AudioCmonitor);
d1339 1
a1339 1
		strcpy(dip->label.name, AudioCrecord);
@


1.16
log
@
Add support for the Sun Enterprise 450
Reduce the size of a GENERIC kernel by ~190k
Remove the nasty pointer/bus_space_handle_t casts
Adds debug bus_space code including the ability to trace
    bus operations (it actually works now).

The following rules are now followed (and verfified by the debug
code):

1.  A "bus_space_handle_t" may only be used with the
    "bus_space_tag_t" that created it.
2.  Only "bus_space_map()" may create "bus_space_handle_t"s.
3.  A "bus_space_handle_t" may not be modified after it has
    been created (other than being destroyed by "bus_space_unmap()").


Thanks to help from mcbride, marc, jason, drahn, to anyone that might
have slipped my mind at the moment.

ok jason@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.15 2002/10/04 01:51:45 jason Exp $	*/
d326 1
a326 1
	static speed_struct speed_table[] = {
@


1.15
log
@simplify format setup
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.14 2002/09/10 05:43:31 jason Exp $	*/
d253 1
a253 1
	    (bus_type_t)sa->sa_reg[0].sbr_slot,
d257 1
a257 1
		printf(": couldn't map registers\n", self->dv_xname);
d1551 1
a1551 1
		printf("%s: trigger_output: bad addr: %x\n",
d1616 1
a1616 1
		printf("%s: trigger_input: bad addr: %x\n",
@


1.14
log
@Set encodings correctly.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.13 2002/09/09 20:25:17 jason Exp $	*/
a230 2
	sc->sc_last_format = 0xffffffff;

a697 5

	if (sc->sc_last_format == fs) {
		sc->sc_need_commit = 0;
		return (0);
	}
@


1.13
log
@Add support for audio capture (finally) and fix a bunch of stupid bugs.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.12 2002/04/08 17:49:42 jason Exp $	*/
d606 6
a611 1
		if (p->precision != 16)
a612 1
		bits = FMT_TWOS_COMP >> 5;
d620 6
a625 1
		if (p->precision != 16)
a626 1
		bits = FMT_TWOS_COMP_BE >> 5;
a628 1
		/* emulate with ulinear8 conversion */
d635 6
a640 2
		/* emulate with slinear_le16 conversion */
		if (p->precision != 16)
a641 2
		bits = FMT_TWOS_COMP >> 5;
		pswcode = rswcode = change_sign16;
d644 6
a649 2
		/* emulate with slinear_be16 conversion */
		if (p->precision != 16)
a650 2
		bits = FMT_TWOS_COMP_BE >> 5;
		pswcode = rswcode = change_sign16;
@


1.12
log
@Credit DARPA/USAF appropriately.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.11 2002/03/14 03:16:07 millert Exp $	*/
d98 1
d115 7
a121 1
#define	CS_AFS_PI	0x10
d281 1
d370 1
a370 2
	if (selected == -1) {
		printf("%s: can't find speed\n", sc->sc_dev.dv_xname);
a371 1
	}
d394 8
a401 5
	sc->sc_locked = 0;
	sc->sc_rintr = 0;
	sc->sc_rarg = 0;
	sc->sc_pintr = 0;
	sc->sc_parg = 0;
d475 25
d590 3
a592 26
	int err, bits, enc;
	void (*pswcode)(void *, u_char *, int cnt);
	void (*rswcode)(void *, u_char *, int cnt);

	enc = p->encoding;
	pswcode = rswcode = 0;
	switch (enc) {
	case AUDIO_ENCODING_SLINEAR_LE:
		if (p->precision == 8) {
			enc = AUDIO_ENCODING_ULINEAR_LE;
			pswcode = rswcode = change_sign8;
		}
		break;
	case AUDIO_ENCODING_ULINEAR_LE:
		if (p->precision == 16) {
			enc = AUDIO_ENCODING_SLINEAR_LE;
			pswcode = rswcode = change_sign16;
		}
		break;
	case AUDIO_ENCODING_ULINEAR_BE:
		if (p->precision == 16) {
			enc = AUDIO_ENCODING_SLINEAR_BE;
			pswcode = rswcode = change_sign16;
		}
		break;
	}
d596 2
d601 2
d605 4
a608 2
	case AUDIO_ENCODING_ADPCM:
		bits = FMT_ADPCM >> 5;
d610 2
a611 4
	case AUDIO_ENCODING_SLINEAR_LE:
		if (p->precision == 16)
			bits = FMT_TWOS_COMP >> 5;
		else
d613 1
d616 7
a622 3
		if (p->precision == 16)
			bits = FMT_TWOS_COMP_BE >> 5;
		else
d624 2
d628 15
a642 3
		if (p->precision == 8)
			bits = FMT_PCM8 >> 5;
		else
d644 1
d750 1
d756 1
a756 1
	sc->sc_locked = 0;
d766 1
d770 1
a770 1
	sc->sc_locked = 0;
d893 2
d943 14
d961 8
d1117 1
a1117 1
			    AUDIO_MIN_GAIN;
d1120 1
a1120 1
			    AUDIO_MIN_GAIN;
d1122 1
a1122 1
			    AUDIO_MIN_GAIN;
d1128 3
a1130 2
		if (cp->type != AUDIO_MIXER_ENUM) break;
		cp->un.ord = MIC_IN_PORT;
d1134 2
a1135 1
		if (cp->type != AUDIO_MIXER_ENUM) break;
a1138 2
	default:
		printf("Invalid kind!\n");
d1265 9
a1273 9
		dip->un.e.num_mem = 3;
		strcpy(dip->un.e.member[0].label.name, AudioNcd);
		dip->un.e.member[0].ord = DAC_IN_PORT;
		strcpy(dip->un.e.member[1].label.name, AudioNmicrophone);
		dip->un.e.member[1].ord = MIC_IN_PORT;
		strcpy(dip->un.e.member[2].label.name, AudioNdac);
		dip->un.e.member[2].ord = AUX1_IN_PORT;
		strcpy(dip->un.e.member[3].label.name, AudioNline);
		dip->un.e.member[3].ord = LINE_IN_PORT;
d1374 4
d1388 1
d1391 2
a1392 2
		p = sc->sc_nowplaying;
		togo = sc->sc_playsegsz - sc->sc_playcnt;
d1395 1
a1395 1
			sc->sc_playcnt = togo = sc->sc_blksz;
d1397 4
a1400 4
			nextaddr = APC_READ(sc, APC_PNVA) + sc->sc_blksz;
			if (togo > sc->sc_blksz)
				togo = sc->sc_blksz;
			sc->sc_playcnt += togo;
d1406 2
a1407 2
		if (sc->sc_pintr != NULL)
			(*sc->sc_pintr)(sc->sc_parg);
d1411 24
a1434 5
#if 0
	if (csr & APC_CSR_CI) {
		if (sc->sc_rintr != NULL) {
			r = 1;
			(*sc->sc_rintr)(sc->sc_rarg);
d1436 6
a1442 1
#endif
d1529 1
d1532 1
a1532 1
	vaddr_t n;
d1534 1
a1534 1
	if (sc->sc_locked != 0) {
d1540 3
a1542 3
	sc->sc_locked = 1;
	sc->sc_pintr = intr;
	sc->sc_parg = arg;
d1558 3
a1560 3
	sc->sc_blksz = blksize;
	sc->sc_nowplaying = p;
	sc->sc_playsegsz = n;
d1562 2
a1563 2
	if (n > sc->sc_blksz)
		n = sc->sc_blksz;
d1565 1
a1565 1
	sc->sc_playcnt = n;
d1594 72
a1665 1
	return (ENXIO);
@


1.11
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.10 2002/03/14 01:27:02 millert Exp $	*/
d32 5
@


1.10
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.9 2002/01/21 02:41:00 nate Exp $	*/
d149 4
a152 4
int	cs4231_trigger_output __P((void *, void *, void *, int,
    void (*intr)(void *), void *arg, struct audio_params *));
int	cs4231_trigger_input __P((void *, void *, void *, int,
    void (*intr)(void *), void *arg, struct audio_params *));
@


1.9
log
@finish ericj's work.
make all audio drivers use the new allocm and round_buffersize decl's.
will ease porting, and generally cleans up a bit
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.8 2002/01/11 17:11:32 jason Exp $	*/
d121 3
a123 3
int	cs4231_match	__P((struct device *, void *, void *));
void	cs4231_attach	__P((struct device *, struct device *, void *));
int	cs4231_intr	__P((void *));
d125 2
a126 2
int	cs4231_set_speed	__P((struct cs4231_softc *, u_long *));
void	cs4231_setup_output	__P((struct cs4231_softc *sc));
d128 2
a129 2
void		cs4231_write	__P((struct cs4231_softc *, u_int8_t, u_int8_t));
u_int8_t	cs4231_read	__P((struct cs4231_softc *, u_int8_t));
d132 17
a148 17
int	cs4231_open		__P((void *, int));
void	cs4231_close		__P((void *));
int	cs4231_query_encoding	__P((void *, struct audio_encoding *));
int	cs4231_set_params	__P((void *, int, int, struct audio_params *,
    struct audio_params *));
int	cs4231_round_blocksize	__P((void *, int));
int	cs4231_commit_settings	__P((void *));
int	cs4231_halt_output	__P((void *));
int	cs4231_halt_input	__P((void *));
int	cs4231_getdev		__P((void *, struct audio_device *));
int	cs4231_set_port		__P((void *, mixer_ctrl_t *));
int	cs4231_get_port		__P((void *, mixer_ctrl_t *));
int	cs4231_query_devinfo	__P((void *addr, mixer_devinfo_t *));
void *	cs4231_alloc		__P((void *, int, size_t, int, int));
void	cs4231_free		__P((void *, void *, int));
size_t	cs4231_round_buffersize	__P((void *, int, size_t));
int	cs4231_get_props	__P((void *));
d150 1
a150 1
    void (*intr)__P((void *)), void *arg, struct audio_params *));
d152 1
a152 1
    void (*intr)__P((void *)), void *arg, struct audio_params *));
d552 2
a553 2
	void (*pswcode) __P((void *, u_char *, int cnt));
	void (*rswcode) __P((void *, u_char *, int cnt));
d1429 1
a1429 1
	void (*intr) __P((void *));
d1494 1
a1494 1
	void (*intr) __P((void *));
@


1.8
log
@Roughly same diff as sparc, better interrupt handling:
* check use IE bits to qualify I bits
* move cs4231 chip interrupts to APC GI handling
* enable/disable cs4231 IEN in pin control register
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.7 2001/10/01 04:10:49 jason Exp $	*/
d145 1
a145 1
void *	cs4231_alloc		__P((void *, u_long, int, int));
d147 1
a147 1
u_long	cs4231_round_buffersize	__P((void *, u_long));
d1257 2
a1258 2
u_long
cs4231_round_buffersize(addr, size)
d1260 2
a1261 1
	u_long size;
d1353 1
a1353 1
cs4231_alloc(addr, size, pool, flags)
d1355 2
a1356 1
	u_long size;
@


1.7
log
@simplification:
don't need to mute the monitor when changing modes (cs4231 mutes it
automatically when entering MODE_CHANGE_ENABLE is set).
Remember the last format/xtal/speed selection and avoid resetting it if
we're using the same one again.
Also, simplify the volume/mute setup.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.6 2001/10/01 03:31:03 jason Exp $	*/
d410 4
d471 2
d1286 22
a1307 6
	status = CS_READ(sc, AD1848_STATUS);
	if (status & (INTERRUPT_STATUS | SAMPLE_ERROR)) {
		reg = cs4231_read(sc, CS_IRQ_STATUS);
		if (reg & CS_AFS_PI) {
			cs4231_write(sc, SP_LOWER_BASE_COUNT, 0xff);
			cs4231_write(sc, SP_UPPER_BASE_COUNT, 0xff);
d1309 1
a1309 1
		CS_WRITE(sc, AD1848_STATUS, 0);
a1311 1
	APC_WRITE(sc, APC_CSR, csr);
d1316 1
a1316 1
	if (csr & APC_CSR_PM) {
d1339 1
d1346 1
@


1.7.6.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.9 2002/01/21 02:41:00 nate Exp $	*/
d145 1
a145 1
void *	cs4231_alloc		__P((void *, int, size_t, int, int));
d147 1
a147 1
size_t	cs4231_round_buffersize	__P((void *, int, size_t));
a409 4

	cs4231_write(sc, SP_PIN_CONTROL,
	    cs4231_read(sc, SP_PIN_CONTROL) | INTERRUPT_ENABLE);

a466 2
	cs4231_write(sc, SP_PIN_CONTROL,
	    cs4231_read(sc, SP_PIN_CONTROL) & (~INTERRUPT_ENABLE));
d1251 2
a1252 2
size_t
cs4231_round_buffersize(addr, direction, size)
d1254 1
a1254 2
	int direction;
	size_t size;
d1280 6
a1285 22
	APC_WRITE(sc, APC_CSR, csr);

	if ((csr & APC_CSR_EIE) && (csr & APC_CSR_EI)) {
		printf("%s: error interrupt\n", sc->sc_dev.dv_xname);
		r = 1;
	}

	if ((csr & APC_CSR_PIE) && (csr & APC_CSR_PI)) {
		/* playback interrupt */
		r = 1;
	}

	if ((csr & APC_CSR_GIE) && (csr & APC_CSR_GI)) {
		/* general interrupt */
		status = CS_READ(sc, AD1848_STATUS);
		if (status & (INTERRUPT_STATUS | SAMPLE_ERROR)) {
			reg = cs4231_read(sc, CS_IRQ_STATUS);
			if (reg & CS_AFS_PI) {
				cs4231_write(sc, SP_LOWER_BASE_COUNT, 0xff);
				cs4231_write(sc, SP_UPPER_BASE_COUNT, 0xff);
			}
			CS_WRITE(sc, AD1848_STATUS, 0);
d1287 1
a1287 1
		r = 1;
d1290 1
d1295 1
a1295 1
	if ((csr & APC_CSR_PMIE) && (csr & APC_CSR_PMI)) {
a1317 1
#if 0
a1323 1
#endif
d1329 1
a1329 1
cs4231_alloc(addr, direction, size, pool, flags)
d1331 1
a1331 2
	int direction;
	size_t size;
@


1.7.6.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.7.6.1 2002/01/31 22:55:38 niklas Exp $	*/
a31 5
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
d121 3
a123 3
int	cs4231_match(struct device *, void *, void *);
void	cs4231_attach(struct device *, struct device *, void *);
int	cs4231_intr(void *);
d125 2
a126 2
int	cs4231_set_speed(struct cs4231_softc *, u_long *);
void	cs4231_setup_output(struct cs4231_softc *sc);
d128 2
a129 2
void		cs4231_write(struct cs4231_softc *, u_int8_t, u_int8_t);
u_int8_t	cs4231_read(struct cs4231_softc *, u_int8_t);
d132 21
a152 21
int	cs4231_open(void *, int);
void	cs4231_close(void *);
int	cs4231_query_encoding(void *, struct audio_encoding *);
int	cs4231_set_params(void *, int, int, struct audio_params *,
    struct audio_params *);
int	cs4231_round_blocksize(void *, int);
int	cs4231_commit_settings(void *);
int	cs4231_halt_output(void *);
int	cs4231_halt_input(void *);
int	cs4231_getdev(void *, struct audio_device *);
int	cs4231_set_port(void *, mixer_ctrl_t *);
int	cs4231_get_port(void *, mixer_ctrl_t *);
int	cs4231_query_devinfo(void *addr, mixer_devinfo_t *);
void *	cs4231_alloc(void *, int, size_t, int, int);
void	cs4231_free(void *, void *, int);
size_t	cs4231_round_buffersize(void *, int, size_t);
int	cs4231_get_props(void *);
int	cs4231_trigger_output(void *, void *, void *, int,
    void (*intr)(void *), void *arg, struct audio_params *);
int	cs4231_trigger_input(void *, void *, void *, int,
    void (*intr)(void *), void *arg, struct audio_params *);
d552 2
a553 2
	void (*pswcode)(void *, u_char *, int cnt);
	void (*rswcode)(void *, u_char *, int cnt);
d1429 1
a1429 1
	void (*intr)(void *);
d1494 1
a1494 1
	void (*intr)(void *);
@


1.7.6.3
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.7.6.2 2002/06/11 03:42:29 art Exp $	*/
a97 1
#define	CSPORT_MICROPHONE	9
d114 1
a114 7
#define	CS_AFS_TI	0x40		/* timer interrupt */
#define	CS_AFS_CI	0x20		/* capture interrupt */
#define	CS_AFS_PI	0x10		/* playback interrupt */
#define	CS_AFS_CU	0x08		/* capture underrun */
#define	CS_AFS_CO	0x04		/* capture overrun */
#define	CS_AFS_PO	0x02		/* playback overrun */
#define	CS_AFS_PU	0x01		/* playback underrun */
d224 2
a273 1
	sc->sc_in_port = CSPORT_MICROPHONE;
d362 2
a363 1
	if (selected == -1)
d365 1
d388 5
a392 8

	sc->sc_capture.cs_intr = NULL;
	sc->sc_capture.cs_arg = NULL;
	sc->sc_capture.cs_locked = 0;

	sc->sc_playback.cs_intr = NULL;
	sc->sc_playback.cs_arg = NULL;
	sc->sc_playback.cs_locked = 0;
a465 25

	/* XXX doesn't really belong here... */
	switch (sc->sc_in_port) {
	case CSPORT_LINEIN:
		pc = LINE_INPUT;
		break;
	case CSPORT_AUX1:
		pc = AUX_INPUT;
		break;
	case CSPORT_DAC:
		pc = MIXED_DAC_INPUT;
		break;
	case CSPORT_MICROPHONE:
	default:
		pc = MIC_INPUT;
		break;
	}
	lm = cs4231_read(sc, SP_LEFT_INPUT_CONTROL);
	rm = cs4231_read(sc, SP_RIGHT_INPUT_CONTROL);
	lm &= ~(MIXED_DAC_INPUT | ATTEN_22_5);
	rm &= ~(MIXED_DAC_INPUT | ATTEN_22_5);
	lm |= pc | (sc->sc_adc.left >> 4);
	rm |= pc | (sc->sc_adc.right >> 4);
	cs4231_write(sc, SP_LEFT_INPUT_CONTROL, lm);
	cs4231_write(sc, SP_RIGHT_INPUT_CONTROL, rm);
d556 26
a581 3
	int err, bits, enc = p->encoding;
	void (*pswcode)(void *, u_char *, int cnt) = NULL;
	void (*rswcode)(void *, u_char *, int cnt) = NULL;
a584 2
		if (p->precision != 8)
			return (EINVAL);
a587 2
		if (p->precision != 8)
			return (EINVAL);
d590 3
d594 1
a594 4
		if (p->precision == 8) {
			bits = FMT_PCM8 >> 5;
			pswcode = rswcode = change_sign8;
		} else if (p->precision == 16)
a598 5
	case AUDIO_ENCODING_ULINEAR:
		if (p->precision != 8)
			return (EINVAL);
		bits = FMT_PCM8 >> 5;
		break;
d600 1
a600 4
		if (p->precision == 8) {
			bits = FMT_PCM8 >> 5;
			pswcode = rswcode = change_sign8;
		} else if (p->precision == 16)
a604 6
	case AUDIO_ENCODING_SLINEAR:
		if (p->precision != 8)
			return (EINVAL);
		bits = FMT_PCM8 >> 5;
		pswcode = rswcode = change_sign8;
		break;
d608 1
a608 17
		else if (p->precision == 16) {
			bits = FMT_TWOS_COMP >> 5;
			pswcode = rswcode = change_sign16_le;
		} else
			return (EINVAL);
		break;
	case AUDIO_ENCODING_ULINEAR_BE:
		if (p->precision == 8)
			bits = FMT_PCM8 >> 5;
		else if (p->precision == 16) {
			bits = FMT_TWOS_COMP_BE >> 5;
			pswcode = rswcode = change_sign16_be;
		} else
			return (EINVAL);
		break;
	case AUDIO_ENCODING_ADPCM:
		if (p->precision != 8)
a609 1
		bits = FMT_ADPCM >> 5;
d655 5
a714 1
	/* XXX Kills some capture bits */
d720 1
a720 1
	sc->sc_playback.cs_locked = 0;
a729 1
	/* XXX Kills some playback bits */
d733 1
a733 1
	sc->sc_capture.cs_locked = 0;
a855 2
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
a903 14
		if (cp->un.value.num_channels == 1) {
			sc->sc_adc.left =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO];
			sc->sc_adc.right =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO];
		} else if (cp->un.value.num_channels == 2) {
			sc->sc_adc.left =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT];
			sc->sc_adc.right =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT];
		} else
			break;
		cs4231_setup_output(sc);
		error = 0;
a907 8
		if (cp->un.ord == CSPORT_MICROPHONE ||
		    cp->un.ord == CSPORT_LINEIN ||
		    cp->un.ord == CSPORT_AUX1 ||
		    cp->un.ord == CSPORT_DAC) {
			sc->sc_in_port  = cp->un.ord;
			error = 0;
			cs4231_setup_output(sc);
		}
d1056 1
a1056 1
			    sc->sc_adc.left;
d1059 1
a1059 1
			    sc->sc_adc.left;
d1061 1
a1061 1
			    sc->sc_adc.right;
d1067 2
a1068 3
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_in_port;
d1072 1
a1072 2
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
d1076 2
d1204 9
a1212 9
		dip->un.e.num_mem = 4;
		strcpy(dip->un.e.member[0].label.name, AudioNmicrophone);
		dip->un.e.member[0].ord = CSPORT_MICROPHONE;
		strcpy(dip->un.e.member[1].label.name, AudioNline);
		dip->un.e.member[1].ord = CSPORT_LINEIN;
		strcpy(dip->un.e.member[2].label.name, AudioNcd);
		dip->un.e.member[2].ord = CSPORT_AUX1;
		strcpy(dip->un.e.member[3].label.name, AudioNdac);
		dip->un.e.member[3].ord = CSPORT_DAC;
a1312 4
			if (reg & CS_AFS_CI) {
				cs4231_write(sc, CS_LOWER_REC_CNT, 0xff);
				cs4231_write(sc, CS_UPPER_REC_CNT, 0xff);
			}
a1322 1
		struct cs_channel *chan = &sc->sc_playback;
d1325 2
a1326 2
		p = chan->cs_curdma;
		togo = chan->cs_segsz - chan->cs_cnt;
d1329 1
a1329 1
			chan->cs_cnt = togo = chan->cs_blksz;
d1331 4
a1334 4
			nextaddr = APC_READ(sc, APC_PNVA) + chan->cs_blksz;
			if (togo > chan->cs_blksz)
				togo = chan->cs_blksz;
			chan->cs_cnt += togo;
d1340 2
a1341 2
		if (chan->cs_intr != NULL)
			(*chan->cs_intr)(chan->cs_arg);
d1345 5
a1349 24
	if ((csr & APC_CSR_CIE) && (csr & APC_CSR_CI)) {
		if (csr & APC_CSR_CD) {
			struct cs_channel *chan = &sc->sc_capture;
			u_long nextaddr, togo;

			p = chan->cs_curdma;
			togo = chan->cs_segsz - chan->cs_cnt;
			if (togo == 0) {
				nextaddr =
				    (u_int32_t)p->dmamap->dm_segs[0].ds_addr;
				chan->cs_cnt = togo = chan->cs_blksz;
			} else {
				nextaddr = APC_READ(sc, APC_CNVA) +
				    chan->cs_blksz;
				if (togo > chan->cs_blksz)
					togo = chan->cs_blksz;
				chan->cs_cnt += togo;
			}

			APC_WRITE(sc, APC_CNVA, nextaddr);
			APC_WRITE(sc, APC_CNC, togo);

			if (chan->cs_intr != NULL)
				(*chan->cs_intr)(chan->cs_arg);
a1350 6
		r = 1;
	}

	if ((csr & APC_CSR_CMIE) && (csr & APC_CSR_CMI)) {
		/* capture empty */
		r = 1;
d1352 1
a1438 1
	struct cs_channel *chan = &sc->sc_playback;
d1441 1
a1441 1
	u_long n;
d1443 1
a1443 1
	if (chan->cs_locked != 0) {
d1449 3
a1451 3
	chan->cs_locked = 1;
	chan->cs_intr = intr;
	chan->cs_arg = arg;
d1467 3
a1469 3
	chan->cs_blksz = blksize;
	chan->cs_curdma = p;
	chan->cs_segsz = n;
d1471 2
a1472 2
	if (n > chan->cs_blksz)
		n = chan->cs_blksz;
d1474 1
a1474 1
	chan->cs_cnt = n;
d1503 1
a1503 72
	struct cs4231_softc *sc = addr;
	struct cs_channel *chan = &sc->sc_capture;
	struct cs_dma *p;
	u_int32_t csr;
	u_long n;

	if (chan->cs_locked != 0) {
		printf("%s: trigger_input: already running\n",
		    sc->sc_dev.dv_xname);
		return (EINVAL);
	}
	chan->cs_locked = 1;
	chan->cs_intr = intr;
	chan->cs_arg = arg;

	for (p = sc->sc_dmas; p->addr != start; p = p->next)
		/*EMPTY*/;
	if (p == NULL) {
		printf("%s: trigger_input: bad addr: %x\n",
		    sc->sc_dev.dv_xname, start);
		return (EINVAL);
	}

	n = (char *)end - (char *)start;

	/*
	 * Do only `blksize' at a time, so audio_cint() is kept
	 * synchronous with us...
	 */
	chan->cs_blksz = blksize;
	chan->cs_curdma = p;
	chan->cs_segsz = n;

	if (n > chan->cs_blksz)
		n = chan->cs_blksz;
	chan->cs_cnt = n;

	APC_WRITE(sc, APC_CNVA, p->dmamap->dm_segs[0].ds_addr);
	APC_WRITE(sc, APC_CNC, (u_long)n);

	csr = APC_READ(sc, APC_CSR);
	if ((csr & APC_CSR_CDMA_GO) == 0 || (csr & APC_CSR_CPAUSE) != 0) {
		csr &= APC_CSR_CPAUSE;
		csr |= APC_CSR_GIE | APC_CSR_CMIE | APC_CSR_CIE | APC_CSR_EI |
		    APC_CSR_CDMA_GO;
		APC_WRITE(sc, APC_CSR, csr);
		cs4231_write(sc, CS_LOWER_REC_CNT, 0xff);
		cs4231_write(sc, CS_UPPER_REC_CNT, 0xff);
		cs4231_write(sc, SP_INTERFACE_CONFIG,
		    cs4231_read(sc, SP_INTERFACE_CONFIG) | CAPTURE_ENABLE);
	}

	if (APC_READ(sc, APC_CSR) & APC_CSR_CD) {
		u_long nextaddr, togo;

		p = chan->cs_curdma;
		togo = chan->cs_segsz - chan->cs_cnt;
		if (togo == 0) {
			nextaddr = (u_int32_t)p->dmamap->dm_segs[0].ds_addr;
			chan->cs_cnt = togo = chan->cs_blksz;
		} else {
			nextaddr = APC_READ(sc, APC_CNVA) + chan->cs_blksz;
			if (togo > chan->cs_blksz)
				togo = chan->cs_blksz;
			chan->cs_cnt += togo;
		}

		APC_WRITE(sc, APC_CNVA, nextaddr);
		APC_WRITE(sc, APC_CNC, togo);
	}

	return (0);
@


1.7.6.4
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d253 1
a253 1
	    sa->sa_reg[0].sbr_slot,
d257 1
a257 1
		printf(": couldn't map registers\n");
d326 1
a326 1
	const static speed_struct speed_table[] = {
d522 1
a522 1
		strlcpy(fp->name, AudioEmulaw, sizeof fp->name);
d528 1
a528 1
		strlcpy(fp->name, AudioEalaw, sizeof fp->name);
d534 1
a534 1
		strlcpy(fp->name, AudioEslinear_le, sizeof fp->name);
d540 1
a540 1
		strlcpy(fp->name, AudioEulinear, sizeof fp->name);
d546 1
a546 1
		strlcpy(fp->name, AudioEslinear_be, sizeof fp->name);
d552 1
a552 1
		strlcpy(fp->name, AudioEslinear, sizeof fp->name);
d558 1
a558 1
		strlcpy(fp->name, AudioEulinear_le, sizeof fp->name);
d564 1
a564 1
		strlcpy(fp->name, AudioEulinear_be, sizeof fp->name);
d570 1
a570 1
		strlcpy(fp->name, AudioEadpcm, sizeof fp->name);
d1160 1
a1160 2
		strlcpy(dip->label.name, AudioNmicrophone,
		    sizeof dip->label.name);
d1162 1
a1162 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1169 1
a1169 2
		strlcpy(dip->label.name, AudioNdac,
		    sizeof dip->label.name);
d1171 1
a1171 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1178 1
a1178 1
		strlcpy(dip->label.name, AudioNline, sizeof dip->label.name);
d1180 1
a1180 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1187 1
a1187 1
		strlcpy(dip->label.name, AudioNcd, sizeof dip->label.name);
d1189 1
a1189 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1196 1
a1196 2
		strlcpy(dip->label.name, AudioNmonitor,
		    sizeof dip->label.name);
d1198 1
a1198 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1205 1
a1205 1
		strlcpy(dip->label.name, AudioNoutput, sizeof dip->label.name);
d1207 1
a1207 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1247 1
a1247 1
		strlcpy(dip->label.name, AudioNmute, sizeof dip->label.name);
d1249 1
a1249 2
		strlcpy(dip->un.e.member[0].label.name, AudioNon,
		    sizeof dip->un.e.member[0].label.name);
d1251 1
a1251 2
		strlcpy(dip->un.e.member[1].label.name, AudioNoff,
		    sizeof dip->un.e.member[1].label.name);
d1259 1
a1259 1
		strlcpy(dip->label.name, AudioNrecord, sizeof dip->label.name);
d1261 1
a1261 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1268 1
a1268 1
		strlcpy(dip->label.name, AudioNsource, sizeof dip->label.name);
d1270 1
a1270 2
		strlcpy(dip->un.e.member[0].label.name, AudioNmicrophone,
		    sizeof dip->un.e.member[0].label.name);
d1272 1
a1272 2
		strlcpy(dip->un.e.member[1].label.name, AudioNline,
		    sizeof dip->un.e.member[1].label.name);
d1274 1
a1274 2
		strlcpy(dip->un.e.member[2].label.name, AudioNcd,
		    sizeof dip->un.e.member[2].label.name);
d1276 1
a1276 2
		strlcpy(dip->un.e.member[3].label.name, AudioNdac,
		    sizeof dip->un.e.member[3].label.name);
d1283 1
a1283 1
		strlcpy(dip->label.name, AudioNoutput, sizeof dip->label.name);
d1285 1
a1285 2
		strlcpy(dip->un.e.member[0].label.name, AudioNspeaker,
		    sizeof dip->un.e.member[0].label.name);
d1287 1
a1287 2
		strlcpy(dip->un.e.member[1].label.name, AudioNline,
		    sizeof dip->un.e.member[1].label.name);
d1289 1
a1289 2
		strlcpy(dip->un.e.member[2].label.name, AudioNheadphone,
		    sizeof dip->un.e.member[2].label.name);
d1297 1
a1297 1
		strlcpy(dip->label.name, AudioCinputs, sizeof dip->label.name);
d1304 1
a1304 2
		strlcpy(dip->label.name, AudioCoutputs,
		    sizeof dip->label.name);
d1311 1
a1311 2
		strlcpy(dip->label.name, AudioCmonitor,
		    sizeof dip->label.name);
d1318 1
a1318 1
		strlcpy(dip->label.name, AudioCrecord, sizeof dip->label.name);
d1551 1
a1551 1
		printf("%s: trigger_output: bad addr: %p\n",
d1616 1
a1616 1
		printf("%s: trigger_input: bad addr: %p\n",
@


1.7.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.7.4.2
log
@Merge in trunk
@
text
@d145 1
a145 1
void *	cs4231_alloc		__P((void *, int, size_t, int, int));
d147 1
a147 1
size_t	cs4231_round_buffersize	__P((void *, int, size_t));
a409 4

	cs4231_write(sc, SP_PIN_CONTROL,
	    cs4231_read(sc, SP_PIN_CONTROL) | INTERRUPT_ENABLE);

a466 2
	cs4231_write(sc, SP_PIN_CONTROL,
	    cs4231_read(sc, SP_PIN_CONTROL) & (~INTERRUPT_ENABLE));
d1251 2
a1252 2
size_t
cs4231_round_buffersize(addr, direction, size)
d1254 1
a1254 2
	int direction;
	size_t size;
d1280 6
a1285 22
	APC_WRITE(sc, APC_CSR, csr);

	if ((csr & APC_CSR_EIE) && (csr & APC_CSR_EI)) {
		printf("%s: error interrupt\n", sc->sc_dev.dv_xname);
		r = 1;
	}

	if ((csr & APC_CSR_PIE) && (csr & APC_CSR_PI)) {
		/* playback interrupt */
		r = 1;
	}

	if ((csr & APC_CSR_GIE) && (csr & APC_CSR_GI)) {
		/* general interrupt */
		status = CS_READ(sc, AD1848_STATUS);
		if (status & (INTERRUPT_STATUS | SAMPLE_ERROR)) {
			reg = cs4231_read(sc, CS_IRQ_STATUS);
			if (reg & CS_AFS_PI) {
				cs4231_write(sc, SP_LOWER_BASE_COUNT, 0xff);
				cs4231_write(sc, SP_UPPER_BASE_COUNT, 0xff);
			}
			CS_WRITE(sc, AD1848_STATUS, 0);
d1287 1
a1287 1
		r = 1;
d1290 1
d1295 1
a1295 1
	if ((csr & APC_CSR_PMIE) && (csr & APC_CSR_PMI)) {
a1317 1
#if 0
a1323 1
#endif
d1329 1
a1329 1
cs4231_alloc(addr, direction, size, pool, flags)
d1331 1
a1331 2
	int direction;
	size_t size;
@


1.7.4.3
log
@Merge in -current from roughly a week ago
@
text
@d121 3
a123 3
int	cs4231_match(struct device *, void *, void *);
void	cs4231_attach(struct device *, struct device *, void *);
int	cs4231_intr(void *);
d125 2
a126 2
int	cs4231_set_speed(struct cs4231_softc *, u_long *);
void	cs4231_setup_output(struct cs4231_softc *sc);
d128 2
a129 2
void		cs4231_write(struct cs4231_softc *, u_int8_t, u_int8_t);
u_int8_t	cs4231_read(struct cs4231_softc *, u_int8_t);
d132 21
a152 21
int	cs4231_open(void *, int);
void	cs4231_close(void *);
int	cs4231_query_encoding(void *, struct audio_encoding *);
int	cs4231_set_params(void *, int, int, struct audio_params *,
    struct audio_params *);
int	cs4231_round_blocksize(void *, int);
int	cs4231_commit_settings(void *);
int	cs4231_halt_output(void *);
int	cs4231_halt_input(void *);
int	cs4231_getdev(void *, struct audio_device *);
int	cs4231_set_port(void *, mixer_ctrl_t *);
int	cs4231_get_port(void *, mixer_ctrl_t *);
int	cs4231_query_devinfo(void *addr, mixer_devinfo_t *);
void *	cs4231_alloc(void *, int, size_t, int, int);
void	cs4231_free(void *, void *, int);
size_t	cs4231_round_buffersize(void *, int, size_t);
int	cs4231_get_props(void *);
int	cs4231_trigger_output(void *, void *, void *, int,
    void (*intr)(void *), void *arg, struct audio_params *);
int	cs4231_trigger_input(void *, void *, void *, int,
    void (*intr)(void *), void *arg, struct audio_params *);
d552 2
a553 2
	void (*pswcode)(void *, u_char *, int cnt);
	void (*rswcode)(void *, u_char *, int cnt);
d1429 1
a1429 1
	void (*intr)(void *);
d1494 1
a1494 1
	void (*intr)(void *);
@


1.7.4.4
log
@Sync the SMP branch with 3.3
@
text
@a31 5
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
a92 1
#define	CSPORT_MICROPHONE	9
d109 1
a109 7
#define	CS_AFS_TI	0x40		/* timer interrupt */
#define	CS_AFS_CI	0x20		/* capture interrupt */
#define	CS_AFS_PI	0x10		/* playback interrupt */
#define	CS_AFS_CU	0x08		/* capture underrun */
#define	CS_AFS_CO	0x04		/* capture overrun */
#define	CS_AFS_PO	0x02		/* playback overrun */
#define	CS_AFS_PU	0x01		/* playback underrun */
d219 2
d243 1
a243 1
	    sa->sa_reg[0].sbr_slot,
d247 1
a247 1
		printf(": couldn't map registers\n");
a268 1
	sc->sc_in_port = CSPORT_MICROPHONE;
d357 2
a358 1
	if (selected == -1)
d360 1
d383 5
a387 8

	sc->sc_capture.cs_intr = NULL;
	sc->sc_capture.cs_arg = NULL;
	sc->sc_capture.cs_locked = 0;

	sc->sc_playback.cs_intr = NULL;
	sc->sc_playback.cs_arg = NULL;
	sc->sc_playback.cs_locked = 0;
a460 25

	/* XXX doesn't really belong here... */
	switch (sc->sc_in_port) {
	case CSPORT_LINEIN:
		pc = LINE_INPUT;
		break;
	case CSPORT_AUX1:
		pc = AUX_INPUT;
		break;
	case CSPORT_DAC:
		pc = MIXED_DAC_INPUT;
		break;
	case CSPORT_MICROPHONE:
	default:
		pc = MIC_INPUT;
		break;
	}
	lm = cs4231_read(sc, SP_LEFT_INPUT_CONTROL);
	rm = cs4231_read(sc, SP_RIGHT_INPUT_CONTROL);
	lm &= ~(MIXED_DAC_INPUT | ATTEN_22_5);
	rm &= ~(MIXED_DAC_INPUT | ATTEN_22_5);
	lm |= pc | (sc->sc_adc.left >> 4);
	rm |= pc | (sc->sc_adc.right >> 4);
	cs4231_write(sc, SP_LEFT_INPUT_CONTROL, lm);
	cs4231_write(sc, SP_RIGHT_INPUT_CONTROL, rm);
d551 26
a576 3
	int err, bits, enc = p->encoding;
	void (*pswcode)(void *, u_char *, int cnt) = NULL;
	void (*rswcode)(void *, u_char *, int cnt) = NULL;
a579 2
		if (p->precision != 8)
			return (EINVAL);
a582 2
		if (p->precision != 8)
			return (EINVAL);
d585 3
d589 1
a589 4
		if (p->precision == 8) {
			bits = FMT_PCM8 >> 5;
			pswcode = rswcode = change_sign8;
		} else if (p->precision == 16)
a593 5
	case AUDIO_ENCODING_ULINEAR:
		if (p->precision != 8)
			return (EINVAL);
		bits = FMT_PCM8 >> 5;
		break;
d595 1
a595 4
		if (p->precision == 8) {
			bits = FMT_PCM8 >> 5;
			pswcode = rswcode = change_sign8;
		} else if (p->precision == 16)
a599 6
	case AUDIO_ENCODING_SLINEAR:
		if (p->precision != 8)
			return (EINVAL);
		bits = FMT_PCM8 >> 5;
		pswcode = rswcode = change_sign8;
		break;
d603 1
a603 17
		else if (p->precision == 16) {
			bits = FMT_TWOS_COMP >> 5;
			pswcode = rswcode = change_sign16_le;
		} else
			return (EINVAL);
		break;
	case AUDIO_ENCODING_ULINEAR_BE:
		if (p->precision == 8)
			bits = FMT_PCM8 >> 5;
		else if (p->precision == 16) {
			bits = FMT_TWOS_COMP_BE >> 5;
			pswcode = rswcode = change_sign16_be;
		} else
			return (EINVAL);
		break;
	case AUDIO_ENCODING_ADPCM:
		if (p->precision != 8)
a604 1
		bits = FMT_ADPCM >> 5;
d650 5
a709 1
	/* XXX Kills some capture bits */
d715 1
a715 1
	sc->sc_playback.cs_locked = 0;
a724 1
	/* XXX Kills some playback bits */
d728 1
a728 1
	sc->sc_capture.cs_locked = 0;
a850 2
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
a898 14
		if (cp->un.value.num_channels == 1) {
			sc->sc_adc.left =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO];
			sc->sc_adc.right =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_MONO];
		} else if (cp->un.value.num_channels == 2) {
			sc->sc_adc.left =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_LEFT];
			sc->sc_adc.right =
			    cp->un.value.level[AUDIO_MIXER_LEVEL_RIGHT];
		} else
			break;
		cs4231_setup_output(sc);
		error = 0;
a902 8
		if (cp->un.ord == CSPORT_MICROPHONE ||
		    cp->un.ord == CSPORT_LINEIN ||
		    cp->un.ord == CSPORT_AUX1 ||
		    cp->un.ord == CSPORT_DAC) {
			sc->sc_in_port  = cp->un.ord;
			error = 0;
			cs4231_setup_output(sc);
		}
d1051 1
a1051 1
			    sc->sc_adc.left;
d1054 1
a1054 1
			    sc->sc_adc.left;
d1056 1
a1056 1
			    sc->sc_adc.right;
d1062 2
a1063 3
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
		cp->un.ord = sc->sc_in_port;
d1067 1
a1067 2
		if (cp->type != AUDIO_MIXER_ENUM)
			break;
d1071 2
d1199 9
a1207 9
		dip->un.e.num_mem = 4;
		strcpy(dip->un.e.member[0].label.name, AudioNmicrophone);
		dip->un.e.member[0].ord = CSPORT_MICROPHONE;
		strcpy(dip->un.e.member[1].label.name, AudioNline);
		dip->un.e.member[1].ord = CSPORT_LINEIN;
		strcpy(dip->un.e.member[2].label.name, AudioNcd);
		dip->un.e.member[2].ord = CSPORT_AUX1;
		strcpy(dip->un.e.member[3].label.name, AudioNdac);
		dip->un.e.member[3].ord = CSPORT_DAC;
a1307 4
			if (reg & CS_AFS_CI) {
				cs4231_write(sc, CS_LOWER_REC_CNT, 0xff);
				cs4231_write(sc, CS_UPPER_REC_CNT, 0xff);
			}
a1317 1
		struct cs_channel *chan = &sc->sc_playback;
d1320 2
a1321 2
		p = chan->cs_curdma;
		togo = chan->cs_segsz - chan->cs_cnt;
d1324 1
a1324 1
			chan->cs_cnt = togo = chan->cs_blksz;
d1326 4
a1329 4
			nextaddr = APC_READ(sc, APC_PNVA) + chan->cs_blksz;
			if (togo > chan->cs_blksz)
				togo = chan->cs_blksz;
			chan->cs_cnt += togo;
d1335 2
a1336 2
		if (chan->cs_intr != NULL)
			(*chan->cs_intr)(chan->cs_arg);
d1340 5
a1344 24
	if ((csr & APC_CSR_CIE) && (csr & APC_CSR_CI)) {
		if (csr & APC_CSR_CD) {
			struct cs_channel *chan = &sc->sc_capture;
			u_long nextaddr, togo;

			p = chan->cs_curdma;
			togo = chan->cs_segsz - chan->cs_cnt;
			if (togo == 0) {
				nextaddr =
				    (u_int32_t)p->dmamap->dm_segs[0].ds_addr;
				chan->cs_cnt = togo = chan->cs_blksz;
			} else {
				nextaddr = APC_READ(sc, APC_CNVA) +
				    chan->cs_blksz;
				if (togo > chan->cs_blksz)
					togo = chan->cs_blksz;
				chan->cs_cnt += togo;
			}

			APC_WRITE(sc, APC_CNVA, nextaddr);
			APC_WRITE(sc, APC_CNC, togo);

			if (chan->cs_intr != NULL)
				(*chan->cs_intr)(chan->cs_arg);
a1345 6
		r = 1;
	}

	if ((csr & APC_CSR_CMIE) && (csr & APC_CSR_CMI)) {
		/* capture empty */
		r = 1;
d1347 1
a1433 1
	struct cs_channel *chan = &sc->sc_playback;
d1436 1
a1436 1
	u_long n;
d1438 1
a1438 1
	if (chan->cs_locked != 0) {
d1444 3
a1446 3
	chan->cs_locked = 1;
	chan->cs_intr = intr;
	chan->cs_arg = arg;
d1451 1
a1451 1
		printf("%s: trigger_output: bad addr: %p\n",
d1462 3
a1464 3
	chan->cs_blksz = blksize;
	chan->cs_curdma = p;
	chan->cs_segsz = n;
d1466 2
a1467 2
	if (n > chan->cs_blksz)
		n = chan->cs_blksz;
d1469 1
a1469 1
	chan->cs_cnt = n;
d1498 1
a1498 72
	struct cs4231_softc *sc = addr;
	struct cs_channel *chan = &sc->sc_capture;
	struct cs_dma *p;
	u_int32_t csr;
	u_long n;

	if (chan->cs_locked != 0) {
		printf("%s: trigger_input: already running\n",
		    sc->sc_dev.dv_xname);
		return (EINVAL);
	}
	chan->cs_locked = 1;
	chan->cs_intr = intr;
	chan->cs_arg = arg;

	for (p = sc->sc_dmas; p->addr != start; p = p->next)
		/*EMPTY*/;
	if (p == NULL) {
		printf("%s: trigger_input: bad addr: %p\n",
		    sc->sc_dev.dv_xname, start);
		return (EINVAL);
	}

	n = (char *)end - (char *)start;

	/*
	 * Do only `blksize' at a time, so audio_cint() is kept
	 * synchronous with us...
	 */
	chan->cs_blksz = blksize;
	chan->cs_curdma = p;
	chan->cs_segsz = n;

	if (n > chan->cs_blksz)
		n = chan->cs_blksz;
	chan->cs_cnt = n;

	APC_WRITE(sc, APC_CNVA, p->dmamap->dm_segs[0].ds_addr);
	APC_WRITE(sc, APC_CNC, (u_long)n);

	csr = APC_READ(sc, APC_CSR);
	if ((csr & APC_CSR_CDMA_GO) == 0 || (csr & APC_CSR_CPAUSE) != 0) {
		csr &= APC_CSR_CPAUSE;
		csr |= APC_CSR_GIE | APC_CSR_CMIE | APC_CSR_CIE | APC_CSR_EI |
		    APC_CSR_CDMA_GO;
		APC_WRITE(sc, APC_CSR, csr);
		cs4231_write(sc, CS_LOWER_REC_CNT, 0xff);
		cs4231_write(sc, CS_UPPER_REC_CNT, 0xff);
		cs4231_write(sc, SP_INTERFACE_CONFIG,
		    cs4231_read(sc, SP_INTERFACE_CONFIG) | CAPTURE_ENABLE);
	}

	if (APC_READ(sc, APC_CSR) & APC_CSR_CD) {
		u_long nextaddr, togo;

		p = chan->cs_curdma;
		togo = chan->cs_segsz - chan->cs_cnt;
		if (togo == 0) {
			nextaddr = (u_int32_t)p->dmamap->dm_segs[0].ds_addr;
			chan->cs_cnt = togo = chan->cs_blksz;
		} else {
			nextaddr = APC_READ(sc, APC_CNVA) + chan->cs_blksz;
			if (togo > chan->cs_blksz)
				togo = chan->cs_blksz;
			chan->cs_cnt += togo;
		}

		APC_WRITE(sc, APC_CNVA, nextaddr);
		APC_WRITE(sc, APC_CNC, togo);
	}

	return (0);
@


1.7.4.5
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.7.4.4 2003/03/28 00:38:30 niklas Exp $	*/
d326 1
a326 1
	const static speed_struct speed_table[] = {
d522 1
a522 1
		strlcpy(fp->name, AudioEmulaw, sizeof fp->name);
d528 1
a528 1
		strlcpy(fp->name, AudioEalaw, sizeof fp->name);
d534 1
a534 1
		strlcpy(fp->name, AudioEslinear_le, sizeof fp->name);
d540 1
a540 1
		strlcpy(fp->name, AudioEulinear, sizeof fp->name);
d546 1
a546 1
		strlcpy(fp->name, AudioEslinear_be, sizeof fp->name);
d552 1
a552 1
		strlcpy(fp->name, AudioEslinear, sizeof fp->name);
d558 1
a558 1
		strlcpy(fp->name, AudioEulinear_le, sizeof fp->name);
d564 1
a564 1
		strlcpy(fp->name, AudioEulinear_be, sizeof fp->name);
d570 1
a570 1
		strlcpy(fp->name, AudioEadpcm, sizeof fp->name);
d1160 1
a1160 2
		strlcpy(dip->label.name, AudioNmicrophone,
		    sizeof dip->label.name);
d1162 1
a1162 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1169 1
a1169 2
		strlcpy(dip->label.name, AudioNdac,
		    sizeof dip->label.name);
d1171 1
a1171 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1178 1
a1178 1
		strlcpy(dip->label.name, AudioNline, sizeof dip->label.name);
d1180 1
a1180 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1187 1
a1187 1
		strlcpy(dip->label.name, AudioNcd, sizeof dip->label.name);
d1189 1
a1189 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1196 1
a1196 2
		strlcpy(dip->label.name, AudioNmonitor,
		    sizeof dip->label.name);
d1198 1
a1198 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1205 1
a1205 1
		strlcpy(dip->label.name, AudioNoutput, sizeof dip->label.name);
d1207 1
a1207 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1247 1
a1247 1
		strlcpy(dip->label.name, AudioNmute, sizeof dip->label.name);
d1249 1
a1249 2
		strlcpy(dip->un.e.member[0].label.name, AudioNon,
		    sizeof dip->un.e.member[0].label.name);
d1251 1
a1251 2
		strlcpy(dip->un.e.member[1].label.name, AudioNoff,
		    sizeof dip->un.e.member[1].label.name);
d1259 1
a1259 1
		strlcpy(dip->label.name, AudioNrecord, sizeof dip->label.name);
d1261 1
a1261 2
		strlcpy(dip->un.v.units.name, AudioNvolume,
		    sizeof dip->un.v.units.name);
d1268 1
a1268 1
		strlcpy(dip->label.name, AudioNsource, sizeof dip->label.name);
d1270 1
a1270 2
		strlcpy(dip->un.e.member[0].label.name, AudioNmicrophone,
		    sizeof dip->un.e.member[0].label.name);
d1272 1
a1272 2
		strlcpy(dip->un.e.member[1].label.name, AudioNline,
		    sizeof dip->un.e.member[1].label.name);
d1274 1
a1274 2
		strlcpy(dip->un.e.member[2].label.name, AudioNcd,
		    sizeof dip->un.e.member[2].label.name);
d1276 1
a1276 2
		strlcpy(dip->un.e.member[3].label.name, AudioNdac,
		    sizeof dip->un.e.member[3].label.name);
d1283 1
a1283 1
		strlcpy(dip->label.name, AudioNoutput, sizeof dip->label.name);
d1285 1
a1285 2
		strlcpy(dip->un.e.member[0].label.name, AudioNspeaker,
		    sizeof dip->un.e.member[0].label.name);
d1287 1
a1287 2
		strlcpy(dip->un.e.member[1].label.name, AudioNline,
		    sizeof dip->un.e.member[1].label.name);
d1289 1
a1289 2
		strlcpy(dip->un.e.member[2].label.name, AudioNheadphone,
		    sizeof dip->un.e.member[2].label.name);
d1297 1
a1297 1
		strlcpy(dip->label.name, AudioCinputs, sizeof dip->label.name);
d1304 1
a1304 2
		strlcpy(dip->label.name, AudioCoutputs,
		    sizeof dip->label.name);
d1311 1
a1311 2
		strlcpy(dip->label.name, AudioCmonitor,
		    sizeof dip->label.name);
d1318 1
a1318 1
		strlcpy(dip->label.name, AudioCrecord, sizeof dip->label.name);
@


1.7.4.6
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.7.4.5 2003/05/13 19:35:10 ho Exp $	*/
d15 5
@


1.7.4.7
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d151 1
a151 1
int	cs4231_query_devinfo(void *, mixer_devinfo_t *);
d157 1
a157 1
    void (*)(void *), void *, struct audio_params *);
d159 1
a159 1
    void (*)(void *), void *, struct audio_params *);
d205 3
a207 1
cs4231_match(struct device *parent, void *vcf, void *aux)
d215 3
a217 1
cs4231_attach(struct device *parent, struct device *self, void *aux)
d242 1
a242 1
	    cs4231_intr, sc, self->dv_xname) == NULL) {
d285 3
a287 1
cs4231_write(struct cs4231_softc *sc, u_int8_t r, u_int8_t v)
d297 3
a299 1
cs4231_read(struct cs4231_softc *sc, u_int8_t r)
d306 4
a309 1
cs4231_set_speed(struct cs4231_softc *sc, u_long *argp)
d377 3
a379 1
cs4231_open(void *vsc, int flags)
d381 1
a381 1
	struct cs4231_softc *sc = vsc;
d425 2
a426 1
cs4231_setup_output(struct cs4231_softc *sc)
d496 2
a497 1
cs4231_close(void *vsc)
d499 1
a499 1
	struct cs4231_softc *sc = vsc;
d509 3
a511 1
cs4231_query_encoding(void *vsc, struct audio_encoding *fp)
d577 4
a580 2
cs4231_set_params(void *vsc, int setmode, int usemode,
    struct audio_params *p, struct audio_params *r)
d582 1
a582 1
	struct cs4231_softc *sc = (struct cs4231_softc *)vsc;
d672 3
a674 1
cs4231_round_blocksize(void *vsc, int blk)
d680 2
a681 1
cs4231_commit_settings(void *vsc)
d683 1
a683 1
	struct cs4231_softc *sc = (struct cs4231_softc *)vsc;
d744 2
a745 1
cs4231_halt_output(void *vsc)
d747 1
a747 1
	struct cs4231_softc *sc = (struct cs4231_softc *)vsc;
d760 2
a761 1
cs4231_halt_input(void *vsc)
d763 1
a763 1
	struct cs4231_softc *sc = (struct cs4231_softc *)vsc;
d774 3
a776 1
cs4231_getdev(void *vsc, struct audio_device *retp)
d783 3
a785 1
cs4231_set_port(void *vsc, mixer_ctrl_t *cp)
d787 1
a787 1
	struct cs4231_softc *sc = (struct cs4231_softc *)vsc;
d975 3
a977 1
cs4231_get_port(void *vsc, mixer_ctrl_t *cp)
d979 1
a979 1
	struct cs4231_softc *sc = (struct cs4231_softc *)vsc;
d1143 3
a1145 1
cs4231_query_devinfo(void *vsc, mixer_devinfo_t *dip)
d1344 4
a1347 1
cs4231_round_buffersize(void *vsc, int direction, size_t size)
d1353 2
a1354 1
cs4231_get_props(void *vsc)
d1363 2
a1364 1
cs4231_intr(void *vsc)
d1366 1
a1366 1
	struct cs4231_softc *sc = (struct cs4231_softc *)vsc;
d1468 6
a1473 1
cs4231_alloc(void *vsc, int direction, size_t size, int pool, int flags)
d1475 1
a1475 1
	struct cs4231_softc *sc = (struct cs4231_softc *)vsc;
d1517 4
a1520 1
cs4231_free(void *vsc, void *ptr, int pool)
d1522 1
a1522 1
	struct cs4231_softc *sc = vsc;
d1541 6
a1546 2
cs4231_trigger_output(void *vsc, void *start, void *end, int blksize,
    void (*intr)(void *), void *arg, struct audio_params *param)
d1548 1
a1548 1
	struct cs4231_softc *sc = vsc;
d1607 6
a1612 2
cs4231_trigger_input(void *vsc, void *start, void *end, int blksize,
    void (*intr)(void *), void *arg, struct audio_params *param)
d1614 1
a1614 1
	struct cs4231_softc *sc = vsc;
@


1.6
log
@get rid of local copy of cs4231reg.h (and get defns from dev/ic/ad1848reg.h
and dev/ic/cs4231reg.h).  Move APC DMA goop into its own file in dev/ic.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.5 2001/10/01 02:35:04 jason Exp $	*/
a125 1
void	cs4231_mute_monitor	__P((struct cs4231_softc *, int));
d219 2
d270 1
a298 20
void
cs4231_mute_monitor(sc, mute)
	struct cs4231_softc *sc;
	int mute;
{
	u_int8_t lv, rv;

	lv = cs4231_read(sc, SP_LEFT_OUTPUT_CONTROL);
	rv = cs4231_read(sc, SP_RIGHT_OUTPUT_CONTROL);
	if (mute) {
		lv |= OUTPUT_MUTE;
		rv |= OUTPUT_MUTE;
	} else {
		lv &= ~OUTPUT_MUTE;
		rv &= ~OUTPUT_MUTE;
	}
	cs4231_write(sc, SP_LEFT_OUTPUT_CONTROL, lv);
	cs4231_write(sc, SP_RIGHT_OUTPUT_CONTROL, rv);
}

d417 15
a431 1
	u_int8_t r;
d433 4
a436 7
	r = cs4231_read(sc, SP_PIN_CONTROL);
	r |= CS_PC_HDPHMUTE | CS_PC_LINEMUTE;
	cs4231_write(sc, SP_PIN_CONTROL, r);

	r = cs4231_read(sc, CS_MONO_IO_CONTROL);
	r |= MONO_OUTPUT_MUTE;
	cs4231_write(sc, CS_MONO_IO_CONTROL, r);
d440 2
a441 5
		if (sc->sc_mute[CSPORT_SPEAKER]) {
			r = cs4231_read(sc, SP_PIN_CONTROL);
			r &= ~CS_PC_HDPHMUTE;
			cs4231_write(sc, SP_PIN_CONTROL, r);
		}
d444 2
a445 5
		if (sc->sc_mute[CSPORT_SPEAKER]) {
			r = cs4231_read(sc, CS_MONO_IO_CONTROL);
			r &= ~MONO_OUTPUT_MUTE;
			cs4231_write(sc, CS_MONO_IO_CONTROL, r);
		}
d448 2
a449 5
		if (sc->sc_mute[CSPORT_SPEAKER]) {
			r = cs4231_read(sc, SP_PIN_CONTROL);
			r &= ~CS_PC_LINEMUTE;
			cs4231_write(sc, SP_PIN_CONTROL, r);
		}
d453 4
a456 11
	r = cs4231_read(sc, SP_LEFT_OUTPUT_CONTROL);
	r &= ~OUTPUT_ATTEN_BITS;
	r |= (~(sc->sc_volume[CSPORT_SPEAKER].left >> 2)) &
	    OUTPUT_ATTEN_BITS;
	cs4231_write(sc, SP_LEFT_OUTPUT_CONTROL, r);

	r = cs4231_read(sc, SP_RIGHT_OUTPUT_CONTROL);
	r &= ~OUTPUT_ATTEN_BITS;
	r |= (~(sc->sc_volume[CSPORT_SPEAKER].right >> 2)) &
	    OUTPUT_ATTEN_BITS;
	cs4231_write(sc, SP_RIGHT_OUTPUT_CONTROL, r);
d635 1
a635 1
	u_int8_t r;
d640 9
a650 2
	cs4231_mute_monitor(sc, 1);

a655 4
	r = sc->sc_speed_bits | (sc->sc_format_bits << 5);
	if (sc->sc_channels == 2)
		r |= FMT_STEREO;

d657 1
a657 1
	CS_WRITE(sc, AD1848_IDATA, r);
d668 1
a668 1
	CS_WRITE(sc, AD1848_IDATA, r);
a690 2

	cs4231_mute_monitor(sc, 0);
@


1.5
log
@first step at getting rid of local cs4231reg copy: get register numbers
from sys/dev/ic/ad1848reg and sys/dev/ic/cs4231reg
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.4 2001/09/30 21:20:07 jason Exp $	*/
d60 1
a61 1
#include <dev/sbus/cs4231reg.h>
d105 6
d112 1
a112 1
    bus_space_write_1(sc->sc_bustag, sc->sc_regs, r, v)
d114 1
a114 1
    bus_space_read_1(sc->sc_bustag, sc->sc_regs, r)
a124 1
void	cs4231_wait		__P((struct cs4231_softc *));
d195 1
a195 1
	"onboard1",		/* XXX unknown for ultra */
d281 2
a282 2
	CS_WRITE(sc, CS4231_IAR, r);
	CS_WRITE(sc, CS4231_IDR, v);
d293 2
a294 2
	CS_WRITE(sc, CS4231_IAR, r);
	return (CS_READ(sc, CS4231_IDR));
d307 2
a308 2
		lv |= CS_LDACOUT_LDM;
		rv |= CS_RDACOUT_RDM;
d310 2
a311 2
		lv &= ~CS_LDACOUT_LDM;
		rv &= ~CS_RDACOUT_RDM;
d334 15
a348 15
		{5510,	(0 << 1) | CS_FSPB_C2SL_XTAL2},
		{5510,	(0 << 1) | CS_FSPB_C2SL_XTAL2},
		{6620,	(7 << 1) | CS_FSPB_C2SL_XTAL2},
		{8000,	(0 << 1) | CS_FSPB_C2SL_XTAL1},
		{9600,	(7 << 1) | CS_FSPB_C2SL_XTAL1},
		{11025,	(1 << 1) | CS_FSPB_C2SL_XTAL2},
		{16000,	(1 << 1) | CS_FSPB_C2SL_XTAL1},
		{18900,	(2 << 1) | CS_FSPB_C2SL_XTAL2},
		{22050,	(3 << 1) | CS_FSPB_C2SL_XTAL2},
		{27420,	(2 << 1) | CS_FSPB_C2SL_XTAL1},
		{32000,	(3 << 1) | CS_FSPB_C2SL_XTAL1},
		{33075,	(6 << 1) | CS_FSPB_C2SL_XTAL2},
		{33075,	(4 << 1) | CS_FSPB_C2SL_XTAL2},
		{44100,	(5 << 1) | CS_FSPB_C2SL_XTAL2},
		{48000,	(6 << 1) | CS_FSPB_C2SL_XTAL1},
a396 1
	u_int8_t reg;
d418 1
a418 1
	     tries && CS_READ(sc, CS4231_IAR) == CS_IAR_INIT; tries--)
d425 1
a425 19
	    cs4231_read(sc, SP_MISC_INFO) | CS_MODEID_MODE2);

	reg = cs4231_read(sc, CS_VERSION_ID);
	if ((reg & CS_VID_CHIP_MASK) == CS_VID_CHIP_CS4231) {
		switch (reg & CS_VID_VER_MASK) {
		case CS_VID_VER_CS4231A:
		case CS_VID_VER_CS4231:
		case CS_VID_VER_CS4232:
			break;
		default:
			printf("%s: unknown CS version: %d\n",
			    sc->sc_dev.dv_xname, reg & CS_VID_VER_MASK);
		}
	}
	else {
		printf("%s: unknown CS chip/version: %d/%d\n",
		    sc->sc_dev.dv_xname, reg & CS_VID_CHIP_MASK,
		    reg & CS_VID_VER_MASK);
	}
d442 1
a442 1
	r |= CS_MONO_MOM;
d456 1
a456 1
			r &= ~CS_MONO_MOM;
d470 1
a470 1
	r &= ~CS_LDACOUT_LDA_MASK;
d472 1
a472 1
	    CS_LDACOUT_LDA_MASK;
d476 1
a476 1
	r &= ~CS_RDACOUT_RDA_MASK;
d478 1
a478 1
	    CS_RDACOUT_RDA_MASK;
d597 1
a597 1
		bits = CS_CDF_FMT_ULAW >> 5;
d600 1
a600 1
		bits = CS_CDF_FMT_ALAW >> 5;
d603 1
a603 1
		bits = CS_CDF_FMT_ADPCM >> 5;
d607 1
a607 1
			bits = CS_CDF_FMT_LINEAR_LE >> 5;
d613 1
a613 1
			bits = CS_CDF_FMT_LINEAR_BE >> 5;
d619 1
a619 1
			bits = CS_CDF_FMT_ULINEAR >> 5;
d667 4
a670 4
	r = cs4231_read(sc, SP_INTERFACE_CONFIG) | CS_IC_ACAL;
	CS_WRITE(sc, CS4231_IAR, CS_IAR_MCE);
	CS_WRITE(sc, CS4231_IAR, CS_IAR_MCE | SP_INTERFACE_CONFIG);
	CS_WRITE(sc, CS4231_IDR, r);
d674 1
a674 1
		r |= CS_FSPB_SM_STEREO;
d676 4
a679 4
	CS_WRITE(sc, CS4231_IAR, CS_IAR_MCE | SP_CLOCK_DATA_FORMAT);
	CS_WRITE(sc, CS4231_IDR, r);
	CS_READ(sc, CS4231_IDR);
	CS_READ(sc, CS4231_IDR);
d682 1
a682 1
	     tries && CS_READ(sc, CS4231_IAR) == CS_IAR_INIT; tries--)
d687 4
a690 4
	CS_WRITE(sc, CS4231_IAR, CS_IAR_MCE | CS_REC_FORMAT);
	CS_WRITE(sc, CS4231_IDR, r);
	CS_READ(sc, CS4231_IDR);
	CS_READ(sc, CS4231_IDR);
d692 1
a692 1
	     tries && CS_READ(sc, CS4231_IAR) == CS_IAR_INIT; tries--)
d697 1
a697 1
	CS_WRITE(sc, CS4231_IAR, 0);
d699 1
a699 1
	     tries && CS_READ(sc, CS4231_IAR) == CS_IAR_INIT; tries--)
d704 1
a704 1
	CS_WRITE(sc, CS4231_IAR, SP_TEST_AND_INIT);
d706 1
a706 1
	     tries && CS_READ(sc, CS4231_IDR) & CS_ERRINIT_ACI; tries--)
d730 1
a730 1
	    cs4231_read(sc, SP_INTERFACE_CONFIG) & (~CS_IC_PEN));
d743 1
a743 1
	    cs4231_read(sc, SP_INTERFACE_CONFIG) & (~CS_IC_CEN));
d774 1
a774 1
			    CS_LACIN1_GAIN_MASK);
d778 1
a778 1
			    CS_LACIN1_GAIN_MASK);
d781 1
a781 1
			    CS_RACIN1_GAIN_MASK);
d792 1
a792 1
			    CS_LLI_GAIN_MASK);
d796 1
a796 1
			    CS_LLI_GAIN_MASK);
d799 1
a799 1
			    CS_RLI_GAIN_MASK);
d811 1
a811 1
			    CS_MONO_MIA_MASK);
d823 1
a823 1
			    CS_LACIN2_GAIN_MASK);
d827 1
a827 1
			    CS_LACIN2_GAIN_MASK);
d830 1
a830 1
			    CS_RACIN2_GAIN_MASK);
d942 1
a942 1
			    CS_LACIN1_GAIN_MASK;
d946 1
a946 1
			    CS_LACIN1_GAIN_MASK;
d949 1
a949 1
			    CS_RACIN1_GAIN_MASK;
d959 1
a959 1
			    cs4231_read(sc, CS_LEFT_LINE_CONTROL) & CS_LLI_GAIN_MASK;
d962 1
a962 1
			    cs4231_read(sc, CS_LEFT_LINE_CONTROL) & CS_LLI_GAIN_MASK;
d964 1
a964 1
			    cs4231_read(sc, CS_RIGHT_LINE_CONTROL) & CS_RLI_GAIN_MASK;
d976 1
a976 1
			    CS_MONO_MIA_MASK;
d988 1
a988 1
			    CS_LACIN2_GAIN_MASK;
d992 1
a992 1
			    CS_LACIN2_GAIN_MASK;
d995 1
a995 1
			    CS_RACIN2_GAIN_MASK;
d1302 2
a1303 2
	status = CS_READ(sc, CS4231_STS);
	if (status & (CS_STATUS_INT | CS_STATUS_SER)) {
d1309 1
a1309 1
		CS_WRITE(sc, CS4231_STS, 0);
d1482 1
a1482 1
		    cs4231_read(sc, SP_INTERFACE_CONFIG) | CS_IC_PEN);
@


1.4
log
@pretty
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.3 2001/09/30 21:03:26 jason Exp $	*/
d58 2
d299 2
a300 2
	lv = cs4231_read(sc, CS_IAR_LDACOUT);
	rv = cs4231_read(sc, CS_IAR_RDACOUT);
d308 2
a309 2
	cs4231_write(sc, CS_IAR_LDACOUT, lv);
	cs4231_write(sc, CS_IAR_RDACOUT, rv);
d420 2
a421 2
	cs4231_write(sc, CS_IAR_MODEID,
	    cs4231_read(sc, CS_IAR_MODEID) | CS_MODEID_MODE2);
d423 1
a423 1
	reg = cs4231_read(sc, CS_IAR_VID);
d451 1
a451 1
	r = cs4231_read(sc, CS_IAR_PC);
d453 1
a453 1
	cs4231_write(sc, CS_IAR_PC, r);
d455 1
a455 1
	r = cs4231_read(sc, CS_IAR_MONO);
d457 1
a457 1
	cs4231_write(sc, CS_IAR_MONO, r);
d462 1
a462 1
			r = cs4231_read(sc, CS_IAR_PC);
d464 1
a464 1
			cs4231_write(sc, CS_IAR_PC, r);
d469 1
a469 1
			r = cs4231_read(sc, CS_IAR_MONO);
d471 1
a471 1
			cs4231_write(sc, CS_IAR_MONO, r);
d476 1
a476 1
			r = cs4231_read(sc, CS_IAR_PC);
d478 1
a478 1
			cs4231_write(sc, CS_IAR_PC, r);
d483 1
a483 1
	r = cs4231_read(sc, CS_IAR_LDACOUT);
d487 1
a487 1
	cs4231_write(sc, CS_IAR_LDACOUT, r);
d489 1
a489 1
	r = cs4231_read(sc, CS_IAR_RDACOUT);
d493 1
a493 1
	cs4231_write(sc, CS_IAR_RDACOUT, r);
d681 1
a681 1
	r = cs4231_read(sc, CS_IAR_IC) | CS_IC_ACAL;
d683 1
a683 1
	CS_WRITE(sc, CS4231_IAR, CS_IAR_MCE | CS_IAR_IC);
d690 1
a690 1
	CS_WRITE(sc, CS4231_IAR, CS_IAR_MCE | CS_IAR_FSPB);
d701 1
a701 1
	CS_WRITE(sc, CS4231_IAR, CS_IAR_MCE | CS_IAR_CDF);
d718 1
a718 1
	CS_WRITE(sc, CS4231_IAR, CS_IAR_ERRINIT);
d743 2
a744 2
	cs4231_write(sc, CS_IAR_IC,
	    cs4231_read(sc, CS_IAR_IC) & (~CS_IC_PEN));
d756 2
a757 2
	cs4231_write(sc, CS_IAR_IC,
	    cs4231_read(sc, CS_IAR_IC) & (~CS_IC_CEN));
d786 1
a786 1
			cs4231_write(sc, CS_IAR_LACIN1,
d790 1
a790 1
			cs4231_write(sc, CS_IAR_LACIN1,
d793 1
a793 1
			cs4231_write(sc, CS_IAR_RACIN1,
d804 1
a804 1
			cs4231_write(sc, CS_IAR_LLI,
d808 1
a808 1
			cs4231_write(sc, CS_IAR_LLI,
d811 1
a811 1
			cs4231_write(sc, CS_IAR_RLI,
d823 1
a823 1
			cs4231_write(sc, CS_IAR_MONO,
d835 1
a835 1
			cs4231_write(sc, CS_IAR_LACIN2,
d839 1
a839 1
			cs4231_write(sc, CS_IAR_LACIN2,
d842 1
a842 1
			cs4231_write(sc, CS_IAR_RACIN2,
d853 1
a853 1
			cs4231_write(sc, CS_IAR_LOOP,
d955 1
a955 1
			    cs4231_read(sc, CS_IAR_LACIN1) &
d959 1
a959 1
			    cs4231_read(sc, CS_IAR_LACIN1) &
d962 1
a962 1
			    cs4231_read(sc, CS_IAR_RACIN1) &
d973 1
a973 1
			    cs4231_read(sc, CS_IAR_LLI) & CS_LLI_GAIN_MASK;
d976 1
a976 1
			    cs4231_read(sc, CS_IAR_LLI) & CS_LLI_GAIN_MASK;
d978 1
a978 1
			    cs4231_read(sc, CS_IAR_RLI) & CS_RLI_GAIN_MASK;
a987 1
			sc->sc_regs->iar = CS_IAR_MONO;
d989 1
a989 1
			    cs4231_read(sc, CS_IAR_MONO) &
d1001 1
a1001 1
			    cs4231_read(sc, CS_IAR_LACIN2) &
d1005 1
a1005 1
			    cs4231_read(sc, CS_IAR_LACIN2) &
d1008 1
a1008 1
			    cs4231_read(sc, CS_IAR_RACIN2) &
d1021 1
a1021 1
		    cs4231_read(sc, CS_IAR_LOOP) >> 2;
d1318 1
a1318 1
		reg = cs4231_read(sc, CS_IAR_AFS);
d1320 2
a1321 2
			cs4231_write(sc, CS_IAR_PBLB, 0xff);
			cs4231_write(sc, CS_IAR_PBUB, 0xff);
d1493 4
a1496 4
		cs4231_write(sc, CS_IAR_PBLB, 0xff);
		cs4231_write(sc, CS_IAR_PBUB, 0xff);
		cs4231_write(sc, CS_IAR_IC,
		    cs4231_read(sc, CS_IAR_IC) | CS_IC_PEN);
@


1.3
log
@oops, get rid of debugging printf
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.2 2001/09/30 20:58:16 jason Exp $	*/
d253 1
a253 1
	printf(": pri %d\n", sa->sa_pri);
@


1.2
log
@big clean up of commit operation (and register defns)
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.1 2001/09/30 00:45:17 jason Exp $	*/
a686 2

	printf("commit: %02x\n", r);
@


1.1
log
@driver for SUNW,CS4231 (doesn't quite sound right yet =), but is mostly there.
Mostly a port from sparc, but bits from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: cs4231.c,v 1.5 2000/09/18 16:57:34 brad Exp $	*/
d267 1
a267 1
 * Write to one of the indirect registers of cs4231.
d279 1
a279 1
 * Read from one of the indirect registers of cs4231.
a379 38
void
cs4231_wait(sc)
	struct cs4231_softc *sc;
{
	int tries;
	u_int8_t ir;

	DELAY(100);

	CS_WRITE(sc, CS4231_IAR, ~(CS_IAR_MCE));
	tries = CS_TIMEOUT;
	while (1) {
		ir = CS_READ(sc, CS4231_IAR);
		if (ir != CS_IAR_INIT)
			break;
		if (--tries == 0)
			break;
		DELAY(100);
	}
	if (!tries)
		printf("%s: waited too long to reset iar\n",
		    sc->sc_dev.dv_xname);

	CS_WRITE(sc, CS4231_IAR, CS_IAR_ERRINIT);
	tries = CS_TIMEOUT;
	while (1) {
		ir = CS_READ(sc, CS4231_IDR);
		if (ir != CS_ERRINIT_ACI)
			break;
		if (--tries == 0)
			break;
		DELAY(100);
	}
	if (!tries)
		printf("%s: waited too long to reset errinit\n",
		    sc->sc_dev.dv_xname);
}

d389 1
a409 1
	CS_WRITE(sc, CS4231_IAR, CS_READ(sc, CS4231_IAR) | CS_IAR_MCE);
d411 5
a415 1
	cs4231_wait(sc);
d417 3
a419 1
	cs4231_write(sc, CS_IAR_MCE | CS_IAR_MODEID, CS_MODEID_MODE2);
a438 10
	/* XXX TODO: setup some defaults */
	CS_WRITE(sc, CS4231_IAR, ~(CS_IAR_MCE));
	cs4231_wait(sc);

	reg = cs4231_read(sc, CS_IAR_MCE | CS_IAR_IC);
	reg &= ~(CS_IC_CAL_CONV);
	cs4231_write(sc, CS_IAR_MCE | CS_IAR_IC, reg);
	CS_WRITE(sc, CS4231_IAR, ~(CS_IAR_MCE));
	cs4231_wait(sc);

d670 1
a670 1
	u_int8_t fs;
d679 6
a684 1
	fs = sc->sc_speed_bits | (sc->sc_format_bits << 5);
d686 3
a688 1
		fs |= CS_FSPB_SM_STEREO;
d690 2
a691 1
	cs4231_write(sc, CS_IAR_MCE | CS_IAR_FSPB, fs);
d694 3
a696 6
	tries = 100000;
	while (1) {
		if (CS_READ(sc, CS4231_IAR) != CS_IAR_INIT)
			break;
		if (--tries == 0)
			break;
d698 1
a698 2
	}
	if (tries == 0) {
a699 3
		splx(s);
		return (0);
	}
d701 2
a702 1
	cs4231_write(sc, CS_IAR_MCE | CS_IAR_CDF, fs);
d705 2
a706 6
	tries = 100000;
	while (1) {
		if (CS_READ(sc, CS4231_IAR) != CS_IAR_INIT)
			break;
		if (--tries == 0)
			break;
d708 1
a708 2
	}
	if (tries == 0) {
a709 3
		splx(s);
		return (0);
	}
d711 14
a724 1
	cs4231_wait(sc);
@

