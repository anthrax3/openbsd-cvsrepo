head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.58
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.54
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.44
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.52
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.50
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.48
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.46
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.42
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.40
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.38
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.36
	OPENBSD_5_0:1.7.0.34
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.32
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.30
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.26
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	UBC_SYNC_B:1.2
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	UBC:1.2.0.4
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.7
date	2003.06.27.01.50.52;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.27.00.27.18;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.24.21.54.38;	author henric;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.18.32.41;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.17.01.29.20;	author henric;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.08.17.49.42;	author jason;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2002.03.14.19.18.29;	author jason;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.03.28.00.38.29;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.06.07.11.02.32;	author ho;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.02.19.10.56.32;	author niklas;	state Exp;
branches;
next	;

1.2.4.1
date	2002.06.11.03.42.29;	author art;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2003.05.19.22.14.42;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@ansi functions
@
text
@/*	$OpenBSD: apio.c,v 1.6 2003/06/27 00:27:18 jason Exp $	*/

/*
 * Copyright (c) 2002 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
 */

/*
 * Driver for Aurora 210SJ parallel ports.
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/timeout.h>
#include <sys/tty.h>

#include <machine/bus.h>
#include <machine/autoconf.h>
#include <machine/openfirm.h>

#include <dev/sbus/sbusvar.h>
#include <dev/sbus/asioreg.h>
#include <dev/ic/lptvar.h>
#include "apio.h"
#include "lpt.h"

struct apio_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_bt;
	bus_space_handle_t	sc_csr_h;
	bus_space_handle_t	sc_clk_h;
	bus_space_handle_t	sc_lpt_h;
	void			*sc_ih;
	struct device		*sc_port;
};

struct apio_attach_args {
	char *aaa_name;
	bus_space_tag_t aaa_iot;
	bus_space_handle_t aaa_ioh;
	bus_space_handle_t aaa_clkh;
	u_int32_t aaa_pri;
	u_int8_t aaa_inten;
};

int	apio_match(struct device *, void *, void *);
void	apio_attach(struct device *, struct device *, void *);
int	apio_print(void *, const char *);
void	apio_intr_enable(struct device *, u_int8_t);

struct cfattach apio_ca = {
	sizeof(struct apio_softc), apio_match, apio_attach
};

struct cfdriver apio_cd = {
	NULL, "apio", DV_DULL
};

int
apio_match(struct device *parent, void *match, void *aux)
{
	struct sbus_attach_args *sa = aux;

	if (strcmp(sa->sa_name, "pio1") == 0)
		return (1);
	return (0);
}

void
apio_attach(struct device *parent, struct device *self, void *aux)
{
	struct apio_softc *sc = (void *)self;
	struct sbus_attach_args *sa = aux;
	struct apio_attach_args aaa;
	char *model;

	sc->sc_bt = sa->sa_bustag;

	model = getpropstring(sa->sa_node, "model");
	if (model == NULL) {
		printf(": empty model, unsupported\n");
		return;
	}
	if (strcmp(model, "210sj") != 0) {
		printf(": unsupported model %s\n", model);
		return;
	}

	if (sa->sa_nreg < 3) {
		printf(": %d registers expected, got %d\n",
		    3, sa->sa_nreg);
		return;
	}

	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[0].sbr_slot,
	    sa->sa_reg[0].sbr_offset, sa->sa_reg[0].sbr_size,
	    0, 0, &sc->sc_csr_h)) {
		printf(": couldn't map csr\n");
		return;
	}

	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[1].sbr_slot,
	    sa->sa_reg[1].sbr_offset, sa->sa_reg[1].sbr_size,
	    0, 0, &sc->sc_clk_h)) {
		printf(": couldn't map clk\n");
		return;
	}

	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[2].sbr_slot,
	    sa->sa_reg[2].sbr_offset, sa->sa_reg[2].sbr_size,
	    0, 0, &sc->sc_lpt_h)) {
		printf(": couldn't map clk\n");
		return;
	}

	printf(": %s\n", model);

	aaa.aaa_name = "lpt";
	aaa.aaa_iot = sc->sc_bt;
	aaa.aaa_ioh = sc->sc_lpt_h;
	aaa.aaa_clkh = sc->sc_clk_h;
	aaa.aaa_inten = ASIO_CSR_SJ_PAR_INTEN;
	aaa.aaa_pri = sa->sa_intr[0].sbi_pri;
	sc->sc_port = config_found(self, &aaa, apio_print);
}

int
apio_print(void *aux, const char *name)
{
	struct apio_attach_args *aaa = aux;

	if (name != NULL)
		printf("%s at %s", aaa->aaa_name, name);
	return (UNCONF);
}

#if NLPT_APIO > 0
int	lpt_apio_match(struct device *, void *, void *);
void	lpt_apio_attach(struct device *, struct device *, void *);
int	lpt_apio_intr(void *);

struct lpt_apio_softc {
	struct lpt_softc sc_lpt;
	bus_space_handle_t sc_clk_h;
	void *sc_ih;
};

struct cfattach lpt_apio_ca = {
	sizeof(struct lpt_apio_softc), lpt_apio_match, lpt_apio_attach
};

void
apio_intr_enable(struct device *dv, u_int8_t en)
{
	struct apio_softc *sc = (struct apio_softc *)dv;
	u_int8_t csr;

	csr = bus_space_read_1(sc->sc_bt, sc->sc_csr_h, 0);
	csr &= ~(ASIO_CSR_SBUS_INT7 | ASIO_CSR_SBUS_INT6);
	csr |= ASIO_CSR_SBUS_INT5 | en;
	bus_space_write_1(sc->sc_bt, sc->sc_csr_h, 0, csr);
}

int
lpt_apio_match(struct device *parent, void *match, void *aux)
{
	return (1);
}

void
lpt_apio_attach(struct device *parent, struct device *self, void *aux)
{
	struct lpt_apio_softc *sc = (struct lpt_apio_softc *)self;
	struct apio_attach_args *aaa = aux;

	sc->sc_lpt.sc_state = 0;
	sc->sc_lpt.sc_iot = aaa->aaa_iot;
	sc->sc_lpt.sc_ioh = aaa->aaa_ioh;
	sc->sc_clk_h = aaa->aaa_clkh;
	sc->sc_ih = bus_intr_establish(aaa->aaa_iot, aaa->aaa_pri,
	    IPL_TTY, 0, lpt_apio_intr, sc, self->dv_xname);
	if (sc->sc_ih == NULL) {
		printf(": cannot allocate intr\n");
		return;
	}
	apio_intr_enable(parent, aaa->aaa_inten);

	lpt_attach_common(&sc->sc_lpt);
}

int
lpt_apio_intr(void *vsc)
{
	struct lpt_apio_softc *sc = vsc;
	int r;

	r = lptintr(&sc->sc_lpt);
	bus_space_read_1(sc->sc_lpt.sc_iot, sc->sc_clk_h, 0);
	return (r);
}
#endif
@


1.6
log
@Don't need LINEAR mappings.
@
text
@d1 1
a1 1
/*	$OpenBSD: apio.c,v 1.5 2003/06/24 21:54:38 henric Exp $	*/
d90 1
a90 4
apio_match(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
d100 1
a100 3
apio_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d158 1
a158 3
apio_print(aux, name)
	void *aux;
	const char *name;
d183 1
a183 3
apio_intr_enable(dv, en)
	struct device *dv;
	u_int8_t en;
d195 1
a195 4
lpt_apio_match(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
d201 1
a201 3
lpt_apio_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d222 1
a222 2
lpt_apio_intr(vsc)
	void *vsc;
@


1.5
log
@Add a "where" argument to the sparc64 interrupt code.  This lets us
associate a name with each interrupt handler.  This is not visible
outside the kernel (yet).

ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: apio.c,v 1.4 2003/06/02 18:32:41 jason Exp $	*/
d130 3
a132 5
	if (sbus_bus_map(sa->sa_bustag,
	    sa->sa_reg[0].sbr_slot,
	    sa->sa_reg[0].sbr_offset,
	    sa->sa_reg[0].sbr_size,
	    BUS_SPACE_MAP_LINEAR, 0, &sc->sc_csr_h)) {
d137 3
a139 5
	if (sbus_bus_map(sa->sa_bustag,
	    sa->sa_reg[1].sbr_slot,
	    sa->sa_reg[1].sbr_offset,
	    sa->sa_reg[1].sbr_size,
	    BUS_SPACE_MAP_LINEAR, 0, &sc->sc_clk_h)) {
d144 3
a146 5
	if (sbus_bus_map(sa->sa_bustag,
	    sa->sa_reg[2].sbr_slot,
	    sa->sa_reg[2].sbr_offset,
	    sa->sa_reg[2].sbr_size,
	    BUS_SPACE_MAP_LINEAR, 0, &sc->sc_lpt_h)) {
@


1.4
log
@Nuke my clause 3 and 4 (and a couple of files jointly (c) with Theo).
@
text
@d1 1
a1 1
/*	$OpenBSD: apio.c,v 1.3 2003/02/17 01:29:20 henric Exp $	*/
d231 1
a231 1
	    IPL_TTY, 0, lpt_apio_intr, sc);
@


1.3
log
@
Add support for the Sun Enterprise 450
Reduce the size of a GENERIC kernel by ~190k
Remove the nasty pointer/bus_space_handle_t casts
Adds debug bus_space code including the ability to trace
    bus operations (it actually works now).

The following rules are now followed (and verfified by the debug
code):

1.  A "bus_space_handle_t" may only be used with the
    "bus_space_tag_t" that created it.
2.  Only "bus_space_map()" may create "bus_space_handle_t"s.
3.  A "bus_space_handle_t" may not be modified after it has
    been created (other than being destroyed by "bus_space_unmap()").


Thanks to help from mcbride, marc, jason, drahn, to anyone that might
have slipped my mind at the moment.

ok jason@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: apio.c,v 1.2 2002/04/08 17:49:42 jason Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.2
log
@Credit DARPA/USAF appropriately.
@
text
@d1 1
a1 1
/*	$OpenBSD: apio.c,v 1.1 2002/03/14 19:18:29 jason Exp $	*/
d178 1
a178 1
	struct apio_attach_args *aaa;
@


1.2.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2.4.2
log
@sync
@
text
@d178 1
a178 1
	struct apio_attach_args *aaa = aux;
@


1.1
log
@Driver for the Aurora Technologies 210SJ parallel port
@
text
@d1 1
a1 1
/*	$OpenBSD: apio.c,v 1.3 2002/03/14 01:27:02 millert Exp $	*/
d32 5
@


1.1.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a31 5
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
d173 1
a173 1
	struct apio_attach_args *aaa = aux;
@


1.1.2.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: apio.c,v 1.1.2.1 2003/03/28 00:38:29 niklas Exp $	*/
d15 5
@


1.1.2.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d90 4
a93 1
apio_match(struct device *parent, void *match, void *aux)
d103 3
a105 1
apio_attach(struct device *parent, struct device *self, void *aux)
d130 5
a134 3
	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[0].sbr_slot,
	    sa->sa_reg[0].sbr_offset, sa->sa_reg[0].sbr_size,
	    0, 0, &sc->sc_csr_h)) {
d139 5
a143 3
	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[1].sbr_slot,
	    sa->sa_reg[1].sbr_offset, sa->sa_reg[1].sbr_size,
	    0, 0, &sc->sc_clk_h)) {
d148 5
a152 3
	if (sbus_bus_map(sa->sa_bustag, sa->sa_reg[2].sbr_slot,
	    sa->sa_reg[2].sbr_offset, sa->sa_reg[2].sbr_size,
	    0, 0, &sc->sc_lpt_h)) {
d169 3
a171 1
apio_print(void *aux, const char *name)
d196 3
a198 1
apio_intr_enable(struct device *dv, u_int8_t en)
d210 4
a213 1
lpt_apio_match(struct device *parent, void *match, void *aux)
d219 3
a221 1
lpt_apio_attach(struct device *parent, struct device *self, void *aux)
d231 1
a231 1
	    IPL_TTY, 0, lpt_apio_intr, sc, self->dv_xname);
d242 2
a243 1
lpt_apio_intr(void *vsc)
@


