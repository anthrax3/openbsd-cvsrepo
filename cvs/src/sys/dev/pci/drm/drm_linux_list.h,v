head	1.7;
access;
symbols
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.6.0.8
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.6
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.10
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.8
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.0.4
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2017.07.01.16.14.10;	author kettenis;	state Exp;
branches;
next	1.6;
commitid	KnwRPOZok9A30HI4;

1.6
date	2015.09.23.23.12.11;	author kettenis;	state Exp;
branches;
next	1.5;
commitid	lQlppvmETCN49oZe;

1.5
date	2013.08.12.04.11.52;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2013.03.18.12.36.51;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.24.01.19.19;	author oga;	state dead;
branches;
next	1.2;

1.2
date	2008.10.15.22.04.18;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update inteldrm(4) to code based on Linux 4.4.70.  This brings us support for
Skylake and Cherryview and better support for Broadwell and Valleyview.  Also
adds MST support.  Some tweaks to the TTM code and radeondrm(4) to keep it
working with the updated generic DRM code needed for inteldrm(4).

Tested by many.
@
text
@/*	$OpenBSD: drm_linux_list.h,v 1.6 2015/09/23 23:12:11 kettenis Exp $	*/
/* drm_linux_list.h -- linux list functions for the BSDs.
 * Created: Mon Apr 7 14:30:16 1999 by anholt@@FreeBSD.org
 */
/*-
 * Copyright 2003 Eric Anholt
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Eric Anholt <anholt@@FreeBSD.org>
 *
 */

#ifndef _DRM_LINUX_LIST_H_
#define _DRM_LINUX_LIST_H_

struct list_head {
	struct list_head *next, *prev;
};

#define list_entry(ptr, type, member) container_of(ptr, type, member)

static inline void
INIT_LIST_HEAD(struct list_head *head) {
	(head)->next = head;
	(head)->prev = head;
}

#define LIST_HEAD_INIT(name) { &(name), &(name) }

#define DRM_LIST_HEAD(name) \
	struct list_head name = LIST_HEAD_INIT(name)

static inline int
list_empty(const struct list_head *head) {
	return (head)->next == head;
}

static inline int
list_is_singular(const struct list_head *head) {
	return !list_empty(head) && ((head)->next == (head)->prev);
}

static inline void
list_add(struct list_head *new, struct list_head *head) {
        (head)->next->prev = new;
        (new)->next = (head)->next;
        (new)->prev = head;
        (head)->next = new;
}

static inline void
list_add_tail(struct list_head *entry, struct list_head *head) {
	(entry)->prev = (head)->prev;
	(entry)->next = head;
	(head)->prev->next = entry;
	(head)->prev = entry;
}

static inline void
list_del(struct list_head *entry) {
	(entry)->next->prev = (entry)->prev;
	(entry)->prev->next = (entry)->next;
}

static inline void list_replace(struct list_head *old,
				struct list_head *new)
{
	new->next = old->next;
	new->next->prev = new;
	new->prev = old->prev;
	new->prev->next = new;
}

static inline void list_replace_init(struct list_head *old,
				     struct list_head *new)
{
	list_replace(old, new);
	INIT_LIST_HEAD(old);
}

static inline void list_move(struct list_head *list, struct list_head *head)
{
	list_del(list);
	list_add(list, head);
}

static inline void list_move_tail(struct list_head *list,
    struct list_head *head)
{
	list_del(list);
	list_add_tail(list, head);
}

static inline void
list_del_init(struct list_head *entry) {
	(entry)->next->prev = (entry)->prev;
	(entry)->prev->next = (entry)->next;
	INIT_LIST_HEAD(entry);
}

#define list_next_entry(pos, member)				\
	list_entry(((pos)->member.next), typeof(*(pos)), member)

#define list_for_each(entry, head)				\
    for (entry = (head)->next; entry != head; entry = (entry)->next)

#define list_for_each_prev(entry, head) \
        for (entry = (head)->prev; entry != (head); \
                entry = entry->prev)

#define list_for_each_safe(entry, temp, head)			\
    for (entry = (head)->next, temp = (entry)->next;		\
	entry != head; 						\
	entry = temp, temp = entry->next)

#define list_for_each_entry_safe_from(pos, n, head, member) 		\
	for (n = list_entry(pos->member.next, __typeof(*pos), member);	\
	     &pos->member != (head);					\
	     pos = n, n = list_entry(n->member.next, __typeof(*n), member))

#define list_for_each_entry(pos, head, member)				\
    for (pos = list_entry((head)->next, __typeof(*pos), member);	\
	&pos->member != (head);					 	\
	pos = list_entry(pos->member.next, __typeof(*pos), member))

#define list_for_each_entry_continue(pos, head, member)				\
    for (pos = list_entry((pos)->member.next, __typeof(*pos), member);	\
	&pos->member != (head);					 	\
	pos = list_entry(pos->member.next, __typeof(*pos), member))

#define list_for_each_entry_continue_reverse(pos, head, member)         \
        for (pos = list_entry(pos->member.prev, __typeof(*pos), member);  \
             &pos->member != (head);    				\
             pos = list_entry(pos->member.prev, __typeof(*pos), member))

/**
 * list_for_each_entry_safe - iterate over list of given type safe against removal of list entry
 * @@pos:        the type * to use as a loop cursor.
 * @@n:          another type * to use as temporary storage
 * @@head:       the head for your list.
 * @@member:     the name of the list_struct within the struct.
 */
#define list_for_each_entry_safe(pos, n, head, member)			\
	for (pos = list_entry((head)->next, __typeof(*pos), member),	\
	    n = list_entry(pos->member.next, __typeof(*pos), member);	\
	    &pos->member != (head);					\
	    pos = n, n = list_entry(n->member.next, __typeof(*n), member))

#define list_first_entry(ptr, type, member) \
	list_entry((ptr)->next, type, member)

#define list_first_entry_or_null(ptr, type, member) \
	(list_empty(ptr) ? NULL : list_first_entry(ptr, type, member))

#define list_last_entry(ptr, type, member) \
	list_entry((ptr)->prev, type, member)

static inline void
__list_splice(const struct list_head *list, struct list_head *prev,
    struct list_head *next)
{
	struct list_head *first = list->next;
	struct list_head *last = list->prev;

	first->prev = prev;
	prev->next = first;

	last->next = next;
	next->prev = last;
}

static inline void
list_splice(const struct list_head *list, struct list_head *head)
{
	if (list_empty(list))
		return;

	__list_splice(list, head, head->next);
}

static inline void
list_splice_tail(const struct list_head *list, struct list_head *head)
{
	if (list_empty(list))
		return;

	__list_splice(list, head->prev, head);
}

void	list_sort(void *, struct list_head *,
	    int (*)(void *, struct list_head *, struct list_head *));

struct hlist_node {
	struct hlist_node *next, **prev;
};

struct hlist_head {
	struct hlist_node *first;
};

#define hlist_entry(ptr, type, member) \
	((ptr) ? container_of(ptr, type, member) : NULL)

static inline void
INIT_HLIST_HEAD(struct hlist_head *head) {
	head->first = NULL;
}

static inline int
hlist_empty(const struct hlist_head *head) {
	return head->first == NULL;
}

static inline void
hlist_add_head(struct hlist_node *new, struct hlist_head *head)
{
	if ((new->next = head->first) != NULL)
		head->first->prev = &new->next;
	head->first = new;
	new->prev = &head->first;
}

static inline void
hlist_del_init(struct hlist_node *node)
{
	if (node->next != NULL)
		node->next->prev = node->prev;
	*(node->prev) = node->next;
	node->next = NULL;
	node->prev = NULL;
}

#define hlist_for_each(pos, head) \
	for (pos = (head)->first; pos != NULL; pos = pos->next)

#define hlist_for_each_entry(pos, head, member)				\
	for (pos = hlist_entry((head)->first, __typeof(*pos), member);	\
	     pos != NULL;						\
	     pos = hlist_entry((pos)->member.next, __typeof(*pos), member))

#define hlist_for_each_entry_safe(pos, n, head, member)			\
	for (pos = hlist_entry((head)->first, __typeof(*pos), member);	\
	     pos != NULL && (n = pos->member.next, 1);			\
	     pos = hlist_entry(n, __typeof(*pos), member))

#endif /* _DRM_LINUX_LIST_H_ */
@


1.6
log
@Update inteldrm to the code from Linux 3.14.52 (which corresponds to
commit 48f8f36a6c8018c2b36ea207aaf68ef5326c5075 on the linux-3.14.y
branch of the linux-stable tree).  This brings preliminary support for
the GPU on Intel's Broadwell CPUs.  Don't expect these to work
perfectly yet.  There are some remaining issues with older hardware as
well, but no significant regressions have been uncovered.

This also updates some of drm core code.  The radeondrm code remains
based on Linux 3.8 with some minimal canges to adjust to changes in
the core drm APIs.

Joint effort with jsg@@, who did the initial update of the relevant drm
core bits.  Committing this early to make sure it gets more testing
and make it possible for others to help getting the remaining wrinkles
straightened out.
@
text
@d1 1
a1 1
/*	$OpenBSD: drm_linux_list.h,v 1.5 2013/08/12 04:11:52 jsg Exp $	*/
d40 1
a40 1
#define list_entry(ptr, type, member) container_of(ptr,type,member)
d94 7
d121 3
d146 5
d172 5
d210 2
a211 2
void drm_list_sort(void *priv, struct list_head *head, int (*cmp)(void *priv,
    struct list_head *a, struct list_head *b));
d214 1
a214 1
	LIST_ENTRY(hlist_node) link;
d217 3
a219 1
LIST_HEAD(hlist_head, hlist_node);
d221 2
a222 1
#define hlist_entry(ptr, type, member) container_of(ptr,type,member)
d224 41
a264 2
#define hlist_add_head(elm, head) LIST_INSERT_HEAD(head, elm, link)
#define hlist_for_each(var, head) LIST_FOREACH(var, head, link)
@


1.5
log
@Add a port of the TTM and Radeon DRM code from Linux 3.8.13.
Includes kernel modesetting, framebuffer console and support
for newer hardware.

Firmware needs to be present for acceleration and in some cases
modesetting to work.  It can be installed via fw_update
or manually via pkg_add.

With lots of help from kettenis@@ some macppc bits from mpi@@
and some ttm refcount/queue bits from FreeBSD.

Thanks to M:Tier and the OpenBSD Foundation for sponsoring this work.
@
text
@d1 1
a1 1
/*	$OpenBSD: drm_linux_list.h,v 1.4 2013/03/18 12:36:51 jsg Exp $	*/
a40 1
#define hlist_entry(ptr, type, member) container_of(ptr,type,member)
d58 5
d181 9
d192 11
@


1.4
log
@Significantly increase the wordlist for ddb hangman,
and update our device independent DRM code and the Intel DRM code
to be mostly in sync with Linux 3.8.3.  Among other things this
brings support for kernel modesetting and enables use of
the rings on gen6+ Intel hardware.

Based on some earlier work from matthieu@@ with some hints from FreeBSD
and with lots of help from kettenis@@ (including a beautiful accelerated
wscons framebuffer console!)

Thanks to M:Tier and the OpenBSD Foundation for sponsoring this work.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d121 5
@


1.3
log
@Remove the drm drivers that are not enabled (and have never been so).

For now they are unmaintained, and work on kernel modesetting has very
large inferface changes needing to be made. Also, when the radeon driver
has been converted over, we will no longer support X with the DRI1
protocol, only DRI2.

When the upheaval has finished, these drivers may be brought back after
work to switch them to DRI2 style memory management and kernel
modesetting has been done, but until then they are unsupported and
probably broken (i know at least two of them have been reported broken
before now). ragedrm will likely come back as a component of radeon
(their interfaces are still fairly similar). The other drivers require
rewriting.

I have been threatening to do this for over a year. Discussed with
deraadt@@ and matthieu@@ at various points since then.
@
text
@d1 1
d33 3
d40 2
a41 2
/* Cheat, assume the list_head is at the start of the struct */
#define list_entry(entry, type, member)	(type *)(entry)
d43 1
a43 1
static __inline__ void
d49 7
a55 2
static __inline__ int
list_empty(struct list_head *head) {
d59 9
a67 1
static __inline__ void
d75 1
a75 1
static __inline__ void
d81 29
d113 4
d122 54
@


1.2
log
@Fix list_for_each_safe compat marco. It currently skips the last entry.

From Robert Noland at FreeBSD.
@
text
@@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d69 2
a70 2
	temp != head; 						\
	entry = temp, temp = temp->next)
@

