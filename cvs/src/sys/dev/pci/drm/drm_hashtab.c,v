head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.10
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.8
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2015.09.23.23.12.11;	author kettenis;	state Exp;
branches;
next	1.2;
commitid	lQlppvmETCN49oZe;

1.2
date	2014.03.09.11.07.18;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2013.08.12.04.11.52;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update inteldrm to the code from Linux 3.14.52 (which corresponds to
commit 48f8f36a6c8018c2b36ea207aaf68ef5326c5075 on the linux-3.14.y
branch of the linux-stable tree).  This brings preliminary support for
the GPU on Intel's Broadwell CPUs.  Don't expect these to work
perfectly yet.  There are some remaining issues with older hardware as
well, but no significant regressions have been uncovered.

This also updates some of drm core code.  The radeondrm code remains
based on Linux 3.8 with some minimal canges to adjust to changes in
the core drm APIs.

Joint effort with jsg@@, who did the initial update of the relevant drm
core bits.  Committing this early to make sure it gets more testing
and make it possible for others to help getting the remaining wrinkles
straightened out.
@
text
@/*	$OpenBSD: drm_hashtab.c,v 1.2 2014/03/09 11:07:18 jsg Exp $	*/
/**************************************************************************
 *
 * Copyright 2006 Tungsten Graphics, Inc., Bismarck, ND. USA.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *
 **************************************************************************/
/*
 * Simple open hash tab implementation.
 *
 * Authors:
 * Thomas Hellstr√∂m <thomas-at-tungstengraphics-dot-com>
 */

#include <dev/pci/drm/drmP.h>
#include <dev/pci/drm/drm_hashtab.h>

struct hlist_node *
	 drm_ht_find_key(struct drm_open_hash *, unsigned long);
struct hlist_node *
	 drm_ht_find_key_rcu(struct drm_open_hash *, unsigned long);

int drm_ht_create(struct drm_open_hash *ht, unsigned int order)
{
	printf("%s stub\n", __func__);
	return -ENOSYS;
#ifdef notyet
	unsigned int size = 1 << order;

	ht->order = order;
	ht->table = NULL;
	if (size <= PAGE_SIZE / sizeof(*ht->table))
		ht->table = kcalloc(size, sizeof(*ht->table), GFP_KERNEL);
	else
		ht->table = vzalloc(size*sizeof(*ht->table));
	if (!ht->table) {
		DRM_ERROR("Out of memory for hash table\n");
		return -ENOMEM;
	}
	return 0;
#endif
}
EXPORT_SYMBOL(drm_ht_create);

void drm_ht_verbose_list(struct drm_open_hash *ht, unsigned long key)
{
	printf("%s stub\n", __func__);
#ifdef notyet
	struct drm_hash_item *entry;
	struct hlist_head *h_list;
	unsigned int hashed_key;
	int count = 0;

	hashed_key = hash_long(key, ht->order);
	DRM_DEBUG("Key is 0x%08lx, Hashed key is 0x%08x\n", key, hashed_key);
	h_list = &ht->table[hashed_key];
	hlist_for_each_entry(entry, h_list, head)
		DRM_DEBUG("count %d, key: 0x%08lx\n", count++, entry->key);
#endif
}

struct hlist_node *
drm_ht_find_key(struct drm_open_hash *ht,
					  unsigned long key)
{
	printf("%s stub\n", __func__);
	return NULL;
#ifdef notyet
	struct drm_hash_item *entry;
	struct hlist_head *h_list;
	unsigned int hashed_key;

	hashed_key = hash_long(key, ht->order);
	h_list = &ht->table[hashed_key];
	hlist_for_each_entry(entry, h_list, head) {
		if (entry->key == key)
			return &entry->head;
		if (entry->key > key)
			break;
	}
	return NULL;
#endif
}

struct hlist_node *
drm_ht_find_key_rcu(struct drm_open_hash *ht,
					      unsigned long key)
{
	printf("%s stub\n", __func__);
	return NULL;
#ifdef notyet
	struct drm_hash_item *entry;
	struct hlist_head *h_list;
	unsigned int hashed_key;

	hashed_key = hash_long(key, ht->order);
	h_list = &ht->table[hashed_key];
	hlist_for_each_entry_rcu(entry, h_list, head) {
		if (entry->key == key)
			return &entry->head;
		if (entry->key > key)
			break;
	}
	return NULL;
#endif
}

int drm_ht_insert_item(struct drm_open_hash *ht, struct drm_hash_item *item)
{
	printf("%s stub\n", __func__);
	return -ENOSYS;
#ifdef notyet
	struct drm_hash_item *entry;
	struct hlist_head *h_list;
	struct hlist_node *parent;
	unsigned int hashed_key;
	unsigned long key = item->key;

	hashed_key = hash_long(key, ht->order);
	h_list = &ht->table[hashed_key];
	parent = NULL;
	hlist_for_each_entry(entry, h_list, head) {
		if (entry->key == key)
			return -EINVAL;
		if (entry->key > key)
			break;
		parent = &entry->head;
	}
	if (parent) {
		hlist_add_after_rcu(parent, &item->head);
	} else {
		hlist_add_head_rcu(&item->head, h_list);
	}
	return 0;
#endif
}
EXPORT_SYMBOL(drm_ht_insert_item);

/*
 * Just insert an item and return any "bits" bit key that hasn't been
 * used before.
 */
int drm_ht_just_insert_please(struct drm_open_hash *ht, struct drm_hash_item *item,
			      unsigned long seed, int bits, int shift,
			      unsigned long add)
{
	printf("%s stub\n", __func__);
	return -ENOSYS;
#ifdef notyet
	int ret;
	unsigned long mask = (1 << bits) - 1;
	unsigned long first, unshifted_key;

	unshifted_key = hash_long(seed, bits);
	first = unshifted_key;
	do {
		item->key = (unshifted_key << shift) + add;
		ret = drm_ht_insert_item(ht, item);
		if (ret)
			unshifted_key = (unshifted_key + 1) & mask;
	} while(ret && (unshifted_key != first));

	if (ret) {
		DRM_ERROR("Available key bit space exhausted\n");
		return -EINVAL;
	}
	return 0;
#endif
}
EXPORT_SYMBOL(drm_ht_just_insert_please);

int drm_ht_find_item(struct drm_open_hash *ht, unsigned long key,
		     struct drm_hash_item **item)
{
	printf("%s stub\n", __func__);
	return -ENOSYS;
#ifdef notyet
	struct hlist_node *list;

	list = drm_ht_find_key_rcu(ht, key);
	if (!list)
		return -EINVAL;

	*item = hlist_entry(list, struct drm_hash_item, head);
	return 0;
#endif
}
EXPORT_SYMBOL(drm_ht_find_item);

int drm_ht_remove_key(struct drm_open_hash *ht, unsigned long key)
{
	printf("%s stub\n", __func__);
	return -ENOSYS;
#ifdef notyet
	struct hlist_node *list;

	list = drm_ht_find_key(ht, key);
	if (list) {
		hlist_del_init_rcu(list);
		return 0;
	}
	return -EINVAL;
#endif
}

int drm_ht_remove_item(struct drm_open_hash *ht, struct drm_hash_item *item)
{
	printf("%s stub\n", __func__);
	return -ENOSYS;
#ifdef notyet
	hlist_del_init_rcu(&item->head);
	return 0;
#endif
}
EXPORT_SYMBOL(drm_ht_remove_item);

void drm_ht_remove(struct drm_open_hash *ht)
{
	printf("%s stub\n", __func__);
#ifdef notyet
	if (ht->table) {
		if ((PAGE_SIZE / sizeof(*ht->table)) >> ht->order)
			kfree(ht->table);
		else
			vfree(ht->table);
		ht->table = NULL;
	}
#endif
}
EXPORT_SYMBOL(drm_ht_remove);
@


1.2
log
@use linux style memory allocations in shared drm code
@
text
@d1 1
a1 1
/*	$OpenBSD: drm_hashtab.c,v 1.1 2013/08/12 04:11:52 jsg Exp $	*/
a71 1
	struct hlist_node *list;
d78 1
a78 1
	hlist_for_each_entry(entry, list, h_list, head)
a91 1
	struct hlist_node *list;
d96 1
a96 1
	hlist_for_each_entry(entry, list, h_list, head) {
d98 1
a98 1
			return list;
a114 1
	struct hlist_node *list;
d119 1
a119 1
	hlist_for_each_entry_rcu(entry, list, h_list, head) {
d121 1
a121 1
			return list;
d136 1
a136 1
	struct hlist_node *list, *parent;
d143 1
a143 1
	hlist_for_each_entry(entry, list, h_list, head) {
d148 1
a148 1
		parent = list;
@


1.1
log
@Add a port of the TTM and Radeon DRM code from Linux 3.8.13.
Includes kernel modesetting, framebuffer console and support
for newer hardware.

Firmware needs to be present for acceleration and in some cases
modesetting to work.  It can be installed via fw_update
or manually via pkg_add.

With lots of help from kettenis@@ some macppc bits from mpi@@
and some ttm refcount/queue bits from FreeBSD.

Thanks to M:Tier and the OpenBSD Foundation for sponsoring this work.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d54 1
a54 1
		ht->table = drm_calloc(size, sizeof(*ht->table));
d247 1
a247 1
			free(ht->table, M_DRM);
@

