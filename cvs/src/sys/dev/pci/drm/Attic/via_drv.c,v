head	1.8;
access;
symbols
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2008.11.11.21.06.18;	author oga;	state dead;
branches;
next	1.7;

1.7
date	2008.10.07.22.35.30;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.07.21.59.33;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.26.19.33.20;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.11.09.33.01;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.06.19.19.02;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.16.01.02.31;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove the (unworking to the point it doens't even compile) viadrm driver.

Eventually a drm driver for via hardware may be written, but it will be
utterly different to this one.

No one objected, ok matthieu@@.
@
text
@/* via_drv.c -- VIA unichrome driver -*- linux-c -*-
 * Created: Fri Aug 12 2005 by anholt@@FreeBSD.org
 */
/*-
 * Copyright 2005 Eric Anholt
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * ERIC ANHOLT BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Eric Anholt <anholt@@FreeBSD.org>
 *
 */

#include "drmP.h"
#include "drm.h"
#include "via_drm.h"
#include "via_drv.h"
#include "drm_pciids.h"

/* drv_PCI_IDs comes from drm_pciids.h, generated from drm_pciids.txt. */
static drm_pci_id_list_t via_pciidlist[] = {
	viadrv_PCI_IDS
};

struct drm_ioctl_desc via_ioctls[] = {
	DRM_IOCTL_DEF(DRM_VIA_ALLOCMEM, via_mem_alloc, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_VIA_FREEMEM, via_mem_free, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_VIA_AGP_INIT, via_agp_init, DRM_AUTH|DRM_MASTER),
	DRM_IOCTL_DEF(DRM_VIA_FB_INIT, via_fb_init, DRM_AUTH|DRM_MASTER),
	DRM_IOCTL_DEF(DRM_VIA_MAP_INIT, via_map_init, DRM_AUTH|DRM_MASTER),
	DRM_IOCTL_DEF(DRM_VIA_DEC_FUTEX, via_decoder_futex, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_VIA_DMA_INIT, via_dma_init, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_VIA_CMDBUFFER, via_cmdbuffer, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_VIA_FLUSH, via_flush_ioctl, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_VIA_PCICMD, via_pci_cmdbuffer, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_VIA_CMDBUF_SIZE, via_cmdbuf_size, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_VIA_WAIT_IRQ, via_wait_irq, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_VIA_DMA_BLIT, via_dma_blit, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_VIA_BLIT_SYNC, via_dma_blit_sync, DRM_AUTH)
};

static const struct drm_driver_info via_driver = {
	.buf_priv_size		= 1,
	.load			= via_driver_load,
	.unload			= via_driver_unload,
	.context_ctor		= via_init_context,
	.context_dtor		= via_final_context,
	.get_vblank_counter	= via_get_vblank_counter,
	.enable_vblank		= via_enable_vblank,
	.disable_vblank		= via_disable_vblank,
	.irq_preinstall		= via_driver_irq_preinstall,
	.irq_postinstall	= via_driver_irq_postinstall,
	.irq_uninstall		= via_driver_irq_uninstall,
	.irq_handler		= via_driver_irq_handler,
	.dma_quiescent		= via_driver_dma_quiescent,

	.ioctls			= via_ioctls,
	.max_ioctl		= DRM_ARRAY_SIZE(via_ioctls),

	.name			= DRIVER_NAME,
	.desc			= DRIVER_DESC,
	.date			= DRIVER_DATE,
	.major			= DRIVER_MAJOR,
	.minor			= DRIVER_MINOR,
	.patchlevel		= DRIVER_PATCHLEVEL,

	.use_agp		= 1,
	.use_mtrr		= 1,
	.use_irq		= 1,
	.use_vbl_irq		= 1,
};

int	viadrm_probe(struct device *, void *, void *);
void	viadrm_attach(struct device *, struct device *, void *);

int
viadrm_probe(struct device *parent, void *match, void *aux)
{
	return drm_probe((struct pci_attach_args *)aux, via_pciidlist);
}

void
viadrm_attach(struct device *parent, struct device *self, void *opaque)
{
	struct pci_attach_args *pa = opaque;
	struct drm_device *dev = (struct drm_device *)self;

	dev->driver = &via_driver;
	drm_attach(parent, self, pa, via_pciidlist);
}

struct cfattach viadrm_ca = {
	sizeof(struct drm_device), viadrm_probe, viadrm_attach,
	drm_detach, drm_activate
};

struct cfdriver viadrm_cd = {
	0, "viadrm", DV_DULL
};
@


1.7
log
@Kill a bunch of #ifdef freebsd/netbsd code in *_drv.c. No binary change.
@
text
@@


1.6
log
@Move dev->driver over to being a pointer to a const struct, instead of stupidly
filling in a pre-allocated one on each attach.

Makes the code a bunch nicer, shrinks a kernel by about 1.5k on amd64,
helps with my sanity, and paves way for later changes.

Tested by a few for a couple of weeks now.
@
text
@a89 38
#ifdef __FreeBSD__
static int
via_probe(device_t dev)
{
	return drm_probe(dev, via_pciidlist);
}

static int
via_attach(device_t nbdev)
{
	struct drm_device *dev = device_get_softc(nbdev);

	bzero(dev, sizeof(struct drm_device));
	via_configure(dev);
	return drm_attach(nbdev, via_pciidlist);
}

static device_method_t via_methods[] = {
	/* Device interface */
	DEVMETHOD(device_probe,		via_probe),
	DEVMETHOD(device_attach,	via_attach),
	DEVMETHOD(device_detach,	drm_detach),

	{ 0, 0 }
};

static driver_t via_driver = {
	"drm",
	via_methods,
	sizeof(struct drm_device)
};

extern devclass_t drm_devclass;
DRIVER_MODULE(via, pci, via_driver, drm_devclass, 0, 0);
MODULE_DEPEND(via, drm, 1, 1, 1);

#elif defined(__NetBSD__) || defined(__OpenBSD__)

a93 1
#if defined(__OpenBSD__)
a94 3
#else
viadrm_probe(struct device *parent, struct cfdata *match, void *aux)
#endif
a108 1
#if defined(__OpenBSD__)
a116 10
#else
#ifdef _LKM
CFDRIVER_DECL(viadrm, DV_TTY, NULL);
#else
CFATTACH_DECL(viadrm, sizeof(struct drm_device), viadrm_probe, viadrm_attach,
	drm_detach, drm_activate);
#endif
#endif

#endif
@


1.5
log
@Kill the silly ``drm_device_t'' and ``drm_file_t'' typedefs. just use
``struct drm_device'' and ``struct drm_file'' respectively. Since i'm
changing a lot of prototypes anyway, remove all parameter names from
prototypes, in accordance with style(9) (and sanity).
@
text
@a36 2
void	via_configure(struct drm_device *);

d42 47
a88 32
void
via_configure(struct drm_device *dev)
{
	dev->driver.buf_priv_size	= 1;
	dev->driver.load		= via_driver_load;
	dev->driver.unload		= via_driver_unload;
	dev->driver.context_ctor	= via_init_context;
	dev->driver.context_dtor	= via_final_context;
	dev->driver.get_vblank_counter	= via_get_vblank_counter;
	dev->driver.enable_vblank	= via_enable_vblank;
	dev->driver.disable_vblank	= via_disable_vblank;
	dev->driver.irq_preinstall	= via_driver_irq_preinstall;
	dev->driver.irq_postinstall	= via_driver_irq_postinstall;
	dev->driver.irq_uninstall	= via_driver_irq_uninstall;
	dev->driver.irq_handler		= via_driver_irq_handler;
	dev->driver.dma_quiescent	= via_driver_dma_quiescent;

	dev->driver.ioctls		= via_ioctls;
	dev->driver.max_ioctl		= via_max_ioctl;

	dev->driver.name		= DRIVER_NAME;
	dev->driver.desc		= DRIVER_DESC;
	dev->driver.date		= DRIVER_DATE;
	dev->driver.major		= DRIVER_MAJOR;
	dev->driver.minor		= DRIVER_MINOR;
	dev->driver.patchlevel		= DRIVER_PATCHLEVEL;

	dev->driver.use_agp		= 1;
	dev->driver.use_mtrr		= 1;
	dev->driver.use_irq		= 1;
	dev->driver.use_vbl_irq		= 1;
}
d147 1
a147 1
	viadrm_configure(dev);
@


1.4
log
@Update to DRM git as of a few days ago. This mostly affects the
card-specific files with a few minor changes elsewhere.

The main change to the OpenBSD specific stuff is the change to the irq
api due to the vblank rework.

4 more large bugs known, I have a fix for one.

Tested by many.  prompted by deraadt@@.
@
text
@d37 1
a37 1
void	via_configure(drm_device_t *);
d45 1
a45 1
via_configure(drm_device_t *dev)
d87 1
a87 1
	drm_device_t *dev = device_get_softc(nbdev);
d89 1
a89 1
	bzero(dev, sizeof(drm_device_t));
d106 1
a106 1
	sizeof(drm_device_t)
d132 1
a132 1
	drm_device_t *dev = (drm_device_t *)self;
d140 1
a140 1
	sizeof(drm_device_t), viadrm_probe, viadrm_attach,
d151 1
a151 1
CFATTACH_DECL(viadrm, sizeof(drm_device_t), viadrm_probe, viadrm_attach,
@


1.3
log
@currently agp_i810 needs to map the same BAR as inteldrm, this obviously
fails.

In order to allow this, implement an API so that drm and agp can share
mappings for the BARs. Now it works as it should.

tested by many.
ok kettenis, miod said he'd look at it when it's in tree.
@
text
@d52 3
a54 1
	dev->driver.vblank_wait		= via_driver_vblank_wait;
@


1.2
log
@destatic the static functions, they only make debugging harder.
While i'm here:
remove a couple of debug printfs that shouldn't have gone in anyway.
trowel on some KNF (I really need to get around to sending some of this upstream).
remove some netbsd specific code that netbsd doesn't have anymore.

ok tedu.
@
text
@d133 1
a133 1
	drm_attach(self, pa, via_pciidlist);
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d37 2
d44 2
a45 1
static void via_configure(drm_device_t *dev)
d113 4
a116 1
static int
d126 1
a126 1
static void
@

