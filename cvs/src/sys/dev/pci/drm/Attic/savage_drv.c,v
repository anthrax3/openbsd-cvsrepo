head	1.22;
access;
symbols
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.21.0.4
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.18.0.2
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.22
date	2010.05.24.01.19.19;	author oga;	state dead;
branches;
next	1.21;

1.21
date	2009.04.06.23.52.22;	author oga;	state Exp;
branches;
next	1.20;

1.20
date	2009.04.03.14.30.57;	author oga;	state Exp;
branches;
next	1.19;

1.19
date	2009.04.03.14.16.23;	author oga;	state Exp;
branches;
next	1.18;

1.18
date	2008.12.08.19.06.34;	author kettenis;	state Exp;
branches;
next	1.17;

1.17
date	2008.11.24.04.21.31;	author oga;	state Exp;
branches;
next	1.16;

1.16
date	2008.11.24.03.49.19;	author oga;	state Exp;
branches;
next	1.15;

1.15
date	2008.11.24.03.16.27;	author oga;	state Exp;
branches;
next	1.14;

1.14
date	2008.11.23.22.56.02;	author oga;	state Exp;
branches;
next	1.13;

1.13
date	2008.11.22.22.43.53;	author oga;	state Exp;
branches;
next	1.12;

1.12
date	2008.11.22.21.26.48;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2008.11.22.20.49.36;	author oga;	state Exp;
branches;
next	1.10;

1.10
date	2008.11.22.04.45.21;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2008.11.22.04.30.41;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2008.11.17.00.30.41;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.17.00.26.02;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.07.22.35.30;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.07.21.59.32;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.26.19.33.20;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.06.19.19.02;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.16.01.02.31;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Remove the drm drivers that are not enabled (and have never been so).

For now they are unmaintained, and work on kernel modesetting has very
large inferface changes needing to be made. Also, when the radeon driver
has been converted over, we will no longer support X with the DRI1
protocol, only DRI2.

When the upheaval has finished, these drivers may be brought back after
work to switch them to DRI2 style memory management and kernel
modesetting has been done, but until then they are unsupported and
probably broken (i know at least two of them have been reported broken
before now). ragedrm will likely come back as a component of radeon
(their interfaces are still fairly similar). The other drivers require
rewriting.

I have been threatening to do this for over a year. Discussed with
deraadt@@ and matthieu@@ at various points since then.
@
text
@/* savage_drv.c -- Savage DRI driver
 */
/*-
 * Copyright 2005 Eric Anholt
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * ERIC ANHOLT BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Eric Anholt <anholt@@FreeBSD.org>
 */

#include "drmP.h"
#include "drm.h"
#include "savage_drm.h"
#include "savage_drv.h"

int	savagedrm_probe(struct device *, void *, void *);
void	savagedrm_attach(struct device *, struct device *, void *);
int	savagedrm_detach(struct device *, int);
int	savagedrm_ioctl(struct drm_device *, u_long, caddr_t, struct drm_file *);

const static struct drm_pcidev savagedrm_pciidlist[] = {
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SAVAGE3D, S3_SAVAGE3D},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SAVAGE3D_M, S3_SAVAGE3D},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SAVAGE4, S3_SAVAGE4},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SAVAGE4_2, S3_SAVAGE4},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SAVAGE_MXMV, S3_SAVAGE_MX},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SAVAGE_MX, S3_SAVAGE_MX},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SAVAGE_IXMV, S3_SAVAGE_MX},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SAVAGE_IX, S3_SAVAGE_MX},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SUPERSAVAGE_MX128, S3_SUPERSAVAGE},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SUPERSAVAGE_MX64, S3_SUPERSAVAGE},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SUPERSAVAGE_MX64C, S3_SUPERSAVAGE},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SUPERSAVAGE_IX128SDR, S3_SUPERSAVAGE},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SUPERSAVAGE_IX128DDR, S3_SUPERSAVAGE},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SUPERSAVAGE_IX64SDR, S3_SUPERSAVAGE},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SUPERSAVAGE_IX64DDR, S3_SUPERSAVAGE},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SUPERSAVAGE_IXCSDR, S3_SUPERSAVAGE},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SUPERSAVAGE_IXCDDR, S3_SUPERSAVAGE},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_PROSAVAGE_PM133, S3_PROSAVAGE},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_PROSAVAGE_KM133, S3_PROSAVAGE},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_TWISTER, S3_TWISTER},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_TWISTER_K, S3_TWISTER},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_PROSAVAGE_DDR, S3_PROSAVAGEDDR},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_PROSAVAGE_DDR_K, S3_PROSAVAGEDDR},
	{0, 0, 0}
};

static const struct drm_driver_info savagedrm_driver = {
	.buf_priv_size		= sizeof(struct savagedrm_buf_priv),
	.firstopen		= savage_driver_firstopen,
	.lastclose		= savage_driver_lastclose,
	.reclaim_buffers_locked = savage_reclaim_buffers,
	.dma_ioctl		= savage_bci_buffers,

	.name			= DRIVER_NAME,
	.desc			= DRIVER_DESC,
	.date			= DRIVER_DATE,
	.major			= DRIVER_MAJOR,
	.minor			= DRIVER_MINOR,
	.patchlevel		= DRIVER_PATCHLEVEL,

	.flags			= DRIVER_AGP | DRIVER_MTRR | DRIVER_PCI_DMA |
				    DRIVER_DMA,
};

int
savagedrm_probe(struct device *parent, void *match, void *aux)
{
	return drm_pciprobe((struct pci_attach_args *)aux, savagedrm_pciidlist);
}

void
savagedrm_attach(struct device *parent, struct device *self, void *aux)
{
	drm_savage_private_t	*dev_priv = (drm_savage_private_t *)self;
	struct pci_attach_args	*pa = aux;
	struct vga_pci_bar	*bar;
	const struct drm_pcidev	*id_entry;
	unsigned long		 mmio_base;
	int			 is_agp;

	id_entry = drm_find_description(PCI_VENDOR(pa->pa_id),
	    PCI_PRODUCT(pa->pa_id), savagedrm_pciidlist);
	dev_priv->chipset = (enum savage_family)id_entry->driver_private;

	if (S3_SAVAGE3D_SERIES(dev_priv->chipset)) {
		bar = vga_pci_bar_info((struct vga_pci_softc *)parent, 0);	
		if (bar == NULL) {
			printf(": can't find fb info\n");
			return;
		}
		dev_priv->fb_base = bar->base;
		dev_priv->fb_size = SAVAGE_FB_SIZE_S3;
		mmio_base = dev_priv->fb_base + dev_priv->fb_size;
		dev_priv->aperture_base = dev_priv->fb_base +
		    SAVAGE_APERTURE_OFFSET;
		/* this should always be true */
		if (bar->maxsize != 0x08000000) {
			printf(": strange pci resource len $08lx\n",
			    bar->maxsize);
			return;
		}
	} else if (dev_priv->chipset != S3_SUPERSAVAGE &&
		   dev_priv->chipset != S3_SAVAGE2000) {
		bar = vga_pci_bar_info((struct vga_pci_softc *)parent, 0);	
		if (bar == NULL) {
			printf(": can't find mmio info\n");
			return;
		}
		mmio_base = bar->base;

		bar = vga_pci_bar_info((struct vga_pci_softc *)parent, 1);	
		if (bar == NULL) {
			printf(": can't find fb info\n");
			return;
		}
		dev_priv->fb_base = bar->base;
		dev_priv->fb_size = SAVAGE_FB_SIZE_S4;
		dev_priv->aperture_base = dev_priv->fb_base +
		    SAVAGE_APERTURE_OFFSET;
		/* this should always be true */
		if (bar->maxsize != 0x08000000) {
			printf(": strange pci resource len $08lx\n",
			    bar->maxsize);
			return;
		}
	} else {
		bar = vga_pci_bar_info((struct vga_pci_softc *)parent, 0);	
		if (bar == NULL) {
			printf(": can't find mmio info\n");
			return;
		}
		mmio_base = bar->base;
		bar = vga_pci_bar_info((struct vga_pci_softc *)parent, 1);	
		if (bar == NULL) {
			printf(": can't find fb info\n");
			return;
		}
		dev_priv->fb_base = bar->base;
		dev_priv->fb_size = bar->maxsize;
		bar = vga_pci_bar_info((struct vga_pci_softc *)parent, 2);	
		if (bar == NULL) {
			printf(": can't find aperture info\n");
			return;
		}
		dev_priv->aperture_base = bar->base;
	}

	if (bus_space_map(pa->pa_memt, mmio_base, SAVAGE_MMIO_SIZE,
	    BUS_SPACE_MAP_LINEAR, &dev_priv->bsh) != 0) {
		printf(": can't map mmio space\n");
		return;
	}
	dev_priv->bst = pa->pa_memt;

	is_agp = pci_get_capability(pa->pa_pc, pa->pa_tag, PCI_CAP_AGP,
	    NULL, NULL);
	printf("\n");

	dev_priv->drmdev = drm_attach_pci(&savagedrm_driver, pa, is_agp, self);
}

int
savagedrm_detach(struct device *self, int flags)
{
	drm_savage_private_t	*dev_priv = (drm_savage_private_t *)self;

	if (dev_priv->drmdev != NULL) {
		config_detach(dev_priv->drmdev, flags);
		dev_priv->drmdev = NULL;
	}

	bus_space_unmap(dev_priv->bst, dev_priv->bsh, SAVAGE_MMIO_SIZE);

	return (0);
}

struct cfattach savagedrm_ca = {
	sizeof(drm_savage_private_t), savagedrm_probe, savagedrm_attach,
	savagedrm_detach
};

struct cfdriver savagedrm_cd = {
	0, "savagedrm", DV_DULL
};

int
savagedrm_ioctl(struct drm_device *dev, u_long cmd, caddr_t data,
    struct drm_file *file_priv)
{
	if (file_priv->authenticated == 1) {
		switch (cmd) {
		case DRM_IOCTL_SAVAGE_CMDBUF:
			return (savage_bci_cmdbuf(dev, data, file_priv));
		case DRM_IOCTL_SAVAGE_EVENT_EMIT:
			return (savage_bci_event_emit(dev, data, file_priv));
		case DRM_IOCTL_SAVAGE_EVENT_WAIT:
			return (savage_bci_event_wait(dev, data, file_priv));
		}
	}

	if (file_priv->master == 1) {
		switch (cmd) {
		case DRM_IOCTL_SAVAGE_INIT:
			return (savage_bci_init(dev, data, file_priv));
		}
	}
	return (EINVAL);
}
@


1.21
log
@Convert the savage freelist over to TAILQ.
@
text
@@


1.20
log
@detypedef drm_pci_id_list_t.
@
text
@d67 1
a67 1
	.buf_priv_size		= sizeof(drm_savage_buf_priv_t),
@


1.19
log
@Sprinkle some const correctness for the pciid lists. From mickey ages
ago.
@
text
@d39 1
a39 1
const static drm_pci_id_list_t savagedrm_pciidlist[] = {
d96 1
a96 1
	const drm_pci_id_list_t	*id_entry;
@


1.18
log
@Make the various drm drivers print the interrupt they're using.

ok oga@@
@
text
@d39 1
a39 1
static drm_pci_id_list_t savagedrm_pciidlist[] = {
d96 1
a96 1
	drm_pci_id_list_t	*id_entry;
@


1.17
log
@change drm_attach_mi to drm_attach_pci. we take the pci_attach_args, and
setup the drm_attach_args with the needed information.

require interface version 1.1 libdrm has been requesting it for ages),
which means that we can set the busid string at attach time. (generated in
drm_attach_pci), also pass in the interrupt line and bst.

Now we don't need dev->pa at all, so remove it, finally.
@
text
@d176 1
@


1.16
log
@make device works out if it's agp and tells the drm driver, not the
other way round. More dev->pa reduction
@
text
@d177 1
a177 2
	dev_priv->drmdev = drm_attach_mi(&savagedrm_driver, pa->pa_dmat,
	    pa, is_agp, self);
@


1.15
log
@oops. Use the correct struct member to map so that radeon doesn't panic
on X startup.

found by ckuethe@@
@
text
@d98 1
d174 5
a178 1
	dev_priv->drmdev = drm_attach_mi(&savagedrm_driver, pa->pa_dmat, pa, self);
@


1.14
log
@pass in the dmat when we attach the drm driver. reduces pci dependancy.
@
text
@d115 3
a117 2
		if (bar->size != 0x08000000) {
			printf(": strange pci resource len $08lx\n", bar->size);
d139 3
a141 2
		if (bar->size != 0x08000000) {
			printf(": strange pci resource len $08lx\n", bar->size);
d157 1
a157 1
		dev_priv->fb_size = bar->size;
@


1.13
log
@Make all drm drivers map their mmio register space on attach instead of
using the drm_maps interface (this was done for inteldrm a few days
ago).  All drivers now ignore the mmio_offset argument that the init
ioctl takes.

This clears up the code and makes sure that drm_ioremap_core() doesn't
need the vga_pci_map inteface anymore, so we don't have to pass in the
vga softc anymore. We also get to kill the drm_resource_{start,length}
linux-alike functions since we just calculate all the requisite offsets
at startup and cache those we need. This now means that technically the
only driver that needs the vga_pci_map api is inteldrm (due to sharing
with intagp issues), though this diff doesn't convert them over.
@
text
@d171 1
a171 1
	dev_priv->drmdev = drm_attach_mi(&savagedrm_driver, pa, self);
@


1.12
log
@Move the drm drivers over from:

vga1 at pci0
inteldrm0 at vga1

to

vga1 at pci0
inteldrm0 at vga1
drm0 at inteldrm0

i.e. a similar scheme to audio(4) where the interface attaches on top of
the wildly different drivers. This helps to clean up the code a lot
(more is coming) and help me start to move drm to being essentially bus
independent, which will help in the future.
@
text
@d95 1
d97 1
d103 69
a171 1
	dev_priv->drmdev = drm_attach_mi(&savagedrm_driver, pa, parent, self);
d183 2
@


1.11
log
@Remove the driver->load callback and just do all the initialization in
the attach function. First step towards splitting drm off as it's own
(bus independant) device, as it should be.
@
text
@d87 1
a87 1
	return drm_probe((struct pci_attach_args *)aux, savagedrm_pciidlist);
d93 1
a94 1
	struct drm_device	*dev = (struct drm_device *)self;
a95 7
	drm_savage_private_t	*dev_priv;

	dev_priv = drm_calloc(1, sizeof(*dev_priv), DRM_MEM_DRIVER);
	if (dev_priv == NULL)
		return;

	dev->dev_private = (void *)dev_priv;
d101 1
a101 2
	dev->driver = &savagedrm_driver;
	return drm_attach(parent, self, pa);
d107 1
a107 2
	struct drm_device	*dev = (struct drm_device *)self;
	drm_savage_private_t	*dev_priv = dev->dev_private;
d109 4
a112 2
	drm_free(dev_priv, sizeof(*dev_priv), DRM_MEM_DRIVER);
	dev->dev_private = NULL;
d114 1
a114 1
	return (drm_detach(self, flags));
d118 2
a119 2
	sizeof(struct drm_device), savagedrm_probe, savagedrm_attach,
	savagedrm_detach, drm_activate
@


1.10
log
@Remove the strings from the pcidevs arrays. they are no longer needed and are
just wasting space.
@
text
@d36 1
d39 1
a39 1
static drm_pci_id_list_t savage_pciidlist[] = {
d66 1
a66 1
static const struct drm_driver_info savage_driver = {
a67 1
	.load			= savage_driver_load,
a69 1
	.unload			= savage_driver_unload,
d87 1
a87 1
	return drm_probe((struct pci_attach_args *)aux, savage_pciidlist);
d93 14
a106 2
	struct pci_attach_args *pa = aux;
	struct drm_device *dev = (struct drm_device *)self;
d108 14
a121 2
	dev->driver = &savage_driver;
	return drm_attach(parent, self, pa, savage_pciidlist);
d126 1
a126 1
	drm_detach, drm_activate
@


1.9
log
@switch all of the drm drivers over to using the defines from pcidevs.

Furthermore, move the list of pcidevs from drm_pciids.h (in macros!), to
the array in the driver file. The strings are left in the array for now, but
will go in the next commit
@
text
@d39 24
a62 24
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SAVAGE3D, S3_SAVAGE3D, "Savage 3D"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SAVAGE3D_M, S3_SAVAGE3D, "Savage 3D/MV"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SAVAGE4, S3_SAVAGE4, "Savage4"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SAVAGE4_2, S3_SAVAGE4, "Savage4"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SAVAGE_MXMV, S3_SAVAGE_MX, "Savage/MX-MV"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SAVAGE_MX, S3_SAVAGE_MX, "Savage/MX"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SAVAGE_IXMV, S3_SAVAGE_MX, "Savage/IX-MV"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SAVAGE_IX, S3_SAVAGE_MX, "Savage/IX"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SUPERSAVAGE_MX128, S3_SUPERSAVAGE, "SuperSavage MX/128"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SUPERSAVAGE_MX64, S3_SUPERSAVAGE, "SuperSavage MX/64"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SUPERSAVAGE_MX64C, S3_SUPERSAVAGE, "SuperSavage MX/64C"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SUPERSAVAGE_IX128SDR, S3_SUPERSAVAGE, "SuperSavage IX/128 SDR"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SUPERSAVAGE_IX128DDR, S3_SUPERSAVAGE, "SuperSavage IX/128 DDR"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SUPERSAVAGE_IX64SDR, S3_SUPERSAVAGE, "SuperSavage IX/64 SDR"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SUPERSAVAGE_IX64DDR, S3_SUPERSAVAGE, "SuperSavage IX/64 DDR"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SUPERSAVAGE_IXCSDR, S3_SUPERSAVAGE, "SuperSavage IX/C SDR"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_SUPERSAVAGE_IXCDDR, S3_SUPERSAVAGE, "SuperSavage IX/C DDR"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_PROSAVAGE_PM133, S3_PROSAVAGE, "ProSavage PM133"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_PROSAVAGE_KM133, S3_PROSAVAGE, "ProSavage KM133"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_TWISTER, S3_TWISTER, "ProSavage Twister PN133"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_TWISTER_K, S3_TWISTER, "ProSavage Twister KN133"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_PROSAVAGE_DDR, S3_PROSAVAGEDDR, "ProSavage DDR"},
	{PCI_VENDOR_S3, PCI_PRODUCT_S3_PROSAVAGE_DDR_K, S3_PROSAVAGEDDR, "ProSavage DDR-K"},
	{0, 0, 0, NULL}
@


1.8
log
@Instead of using a width-1 bitfield for storing the driver capabilities
in the callback structure, just use a bunch of ORed together bits. This
has been annoying me for ages.
@
text
@a32 1
#include "drm_pciids.h"
a37 1
/* drv_PCI_IDs comes from drm_pciids.h, generated from drm_pciids.txt. */
d39 24
a62 1
	savage_PCI_IDS
@


1.7
log
@rework how we handle ioctls.

Before it was based on a static array with flags. Instead, let the
driver provide an ioctl callback, which deals with things appropriately.
Makes the code a bit easier to read, and also drops just over 5k on an
amd64 kernel build with all drm drivers enabled.

Tested by a few.
@
text
@d60 2
a61 4
	.use_agp		= 1,
	.use_mtrr		= 1,
	.use_pci_dma		= 1,
	.use_dma		= 1,
@


1.6
log
@Kill a bunch of #ifdef freebsd/netbsd code in *_drv.c. No binary change.
@
text
@d35 4
a43 9
struct drm_ioctl_desc savage_ioctls[] = {
	DRM_IOCTL_DEF(DRM_SAVAGE_BCI_INIT, savage_bci_init, DRM_AUTH|DRM_MASTER|DRM_ROOT_ONLY),
	DRM_IOCTL_DEF(DRM_SAVAGE_BCI_CMDBUF, savage_bci_cmdbuf, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_SAVAGE_BCI_EVENT_EMIT, savage_bci_event_emit, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_SAVAGE_BCI_EVENT_WAIT, savage_bci_event_wait, DRM_AUTH),
};

int savage_max_ioctl = DRM_ARRAY_SIZE(savage_ioctls);

a52 3
	.ioctls			= savage_ioctls,
	.max_ioctl		= DRM_ARRAY_SIZE(savage_ioctls),

a65 3
int	savagedrm_probe(struct device *, void *, void *);
void	savagedrm_attach(struct device *, struct device *, void *);

d90 24
@


1.5
log
@Move dev->driver over to being a pointer to a const struct, instead of stupidly
filling in a pre-allocated one on each attach.

Makes the code a bunch nicer, shrinks a kernel by about 1.5k on amd64,
helps with my sanity, and paves way for later changes.

Tested by a few for a couple of weeks now.
@
text
@a73 42
#ifdef __FreeBSD__
static int
savage_probe(device_t dev)
{
	return drm_probe(dev, savage_pciidlist);
}

static int
savage_attach(device_t nbdev)
{
	struct drm_device *dev = device_get_softc(nbdev);

	bzero(dev, sizeof(struct drm_device));
	savage_configure(dev);
	return drm_attach(nbdev, savage_pciidlist);
}

static device_method_t savage_methods[] = {
	/* Device interface */
	DEVMETHOD(device_probe,		savage_probe),
	DEVMETHOD(device_attach,	savage_attach),
	DEVMETHOD(device_detach,	drm_detach),

	{ 0, 0 }
};

static driver_t savage_driver = {
	"drm",
	savage_methods,
	sizeof(struct drm_device)
};

extern devclass_t drm_devclass;
#if __FreeBSD_version >= 700010
DRIVER_MODULE(savage, vgapci, savage_driver, drm_devclass, 0, 0);
#else
DRIVER_MODULE(savage, pci, savage_driver, drm_devclass, 0, 0);
#endif
MODULE_DEPEND(savage, drm, 1, 1, 1);

#elif defined(__NetBSD__) || defined(__OpenBSD__)

a77 1
#if defined(__OpenBSD__)
a78 3
#else
savagedrm_probe(struct device *parent, struct cfdata *match, void *aux)
#endif
a92 1
#if defined(__OpenBSD__)
a100 10
#else
#ifdef _LKM
CFDRIVER_DECL(savagedrm, DV_TTY, NULL);
#else
CFATTACH_DECL(savagedrm, sizeof(struct drm_device), savagedrm_probe,
    savagedrm_attach, drm_detach, drm_activate);
#endif
#endif

#endif
@


1.4
log
@Kill the silly ``drm_device_t'' and ``drm_file_t'' typedefs. just use
``struct drm_device'' and ``struct drm_file'' respectively. Since i'm
changing a lot of prototypes anyway, remove all parameter names from
prototypes, in accordance with style(9) (and sanity).
@
text
@a34 2
void	savage_configure(struct drm_device *);

d40 33
a72 26
void
savage_configure(struct drm_device *dev)
{
	dev->driver.buf_priv_size	= sizeof(drm_savage_buf_priv_t);
	dev->driver.load		= savage_driver_load;
	dev->driver.firstopen		= savage_driver_firstopen;
	dev->driver.lastclose		= savage_driver_lastclose;
	dev->driver.unload		= savage_driver_unload;
	dev->driver.reclaim_buffers_locked = savage_reclaim_buffers;
	dev->driver.dma_ioctl		= savage_bci_buffers;

	dev->driver.ioctls		= savage_ioctls;
	dev->driver.max_ioctl		= savage_max_ioctl;

	dev->driver.name		= DRIVER_NAME;
	dev->driver.desc		= DRIVER_DESC;
	dev->driver.date		= DRIVER_DATE;
	dev->driver.major		= DRIVER_MAJOR;
	dev->driver.minor		= DRIVER_MINOR;
	dev->driver.patchlevel		= DRIVER_PATCHLEVEL;

	dev->driver.use_agp		= 1;
	dev->driver.use_mtrr		= 1;
	dev->driver.use_pci_dma		= 1;
	dev->driver.use_dma		= 1;
}
d135 1
a135 1
	savage_configure(dev);
@


1.3
log
@currently agp_i810 needs to map the same BAR as inteldrm, this obviously
fails.

In order to allow this, implement an API so that drm and agp can share
mappings for the BARs. Now it works as it should.

tested by many.
ok kettenis, miod said he'd look at it when it's in tree.
@
text
@d35 1
a35 1
void	savage_configure(drm_device_t *);
d43 1
a43 1
savage_configure(drm_device_t *dev)
d79 1
a79 1
	drm_device_t *dev = device_get_softc(nbdev);
d81 1
a81 1
	bzero(dev, sizeof(drm_device_t));
d98 1
a98 1
	sizeof(drm_device_t)
d128 1
a128 1
	drm_device_t *dev = (drm_device_t *)self;
d136 1
a136 1
	sizeof(drm_device_t), savagedrm_probe, savagedrm_attach,
d147 2
a148 2
CFATTACH_DECL(savagedrm, sizeof(drm_device_t), savagedrm_probe, savagedrm_attach,
	drm_detach, drm_activate);
@


1.2
log
@destatic the static functions, they only make debugging harder.
While i'm here:
remove a couple of debug printfs that shouldn't have gone in anyway.
trowel on some KNF (I really need to get around to sending some of this upstream).
remove some netbsd specific code that netbsd doesn't have anymore.

ok tedu.
@
text
@d131 1
a131 1
	return drm_attach(self, pa, savage_pciidlist);
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d35 2
d42 2
a43 1
static void savage_configure(drm_device_t *dev)
d111 4
a114 1
static int
d124 1
a124 1
static void
@

