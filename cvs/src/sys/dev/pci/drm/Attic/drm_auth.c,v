head	1.14;
access;
symbols
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.14
date	2009.03.26.22.40.06;	author oga;	state dead;
branches;
next	1.13;

1.13
date	2009.03.26.07.25.06;	author oga;	state Exp;
branches;
next	1.12;

1.12
date	2008.09.18.15.10.57;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.05.23.07.23;	author oga;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.02.01.12.04;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2008.08.13.20.22.55;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2008.08.13.19.33.29;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2008.07.29.19.44.13;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.26.19.33.19;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.04.16.17.07.18;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.04.16.13.17.58;	author pyr;	state Exp;
branches;
next	1.3;

1.3
date	2008.04.12.14.10.21;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.16.01.02.31;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Rework how we deal with the list of per-open datastructures, and the
auth list.  now we only need the one tree. Makes things a little neater,
and smaller.
@
text
@/*-
 * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.
 * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Rickard E. (Rik) Faith <faith@@valinux.com>
 *    Gareth Hughes <gareth@@valinux.com>
 *
 */

/** @@file drm_auth.c
 * Implementation of the get/authmagic ioctls implementing the authentication
 * scheme between the master and clients.
 */

#include "drmP.h"

/**
 * Called by the client, this returns a unique magic number to be authorized
 * by the master.
 *
 * The master may use its own knowledge of the client (such as the X
 * connection that the magic is passed over) to determine if the magic number
 * should be authenticated.
 */
int
drm_getmagic(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	struct drm_auth		*auth = data;
	struct drm_magic_entry	*entry;

	/* Find unique magic */
	if (file_priv->magic) {
		auth->magic = file_priv->magic;
	} else {
		entry = drm_alloc(sizeof(*entry));
		if (entry == NULL)
			return (ENOMEM);
		DRM_LOCK();
		entry->magic = file_priv->magic = auth->magic = dev->magicid++;
		entry->priv = file_priv;
		SPLAY_INSERT(drm_magic_tree, &dev->magiclist, entry);

		DRM_UNLOCK();
		DRM_DEBUG("%d\n", auth->magic);
	}

	DRM_DEBUG("%u\n", auth->magic);

	return (0);
}

/**
 * Marks the client associated with the given magic number as authenticated.
 */
int
drm_authmagic(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	struct drm_auth		*auth = data;
	struct drm_magic_entry	*pt, key;

	DRM_DEBUG("%u\n", auth->magic);

	key.magic = auth->magic;
	DRM_LOCK();
	if ((pt = SPLAY_FIND(drm_magic_tree, &dev->magiclist, &key)) == NULL ||
	    pt->priv == NULL) {
		DRM_UNLOCK();
		return (EINVAL);
	}

	pt->priv->authenticated = 1;
	SPLAY_REMOVE(drm_magic_tree, &dev->magiclist, pt);
	DRM_UNLOCK();

	drm_free(pt);

	return (0);
}

int
drm_magic_cmp(struct drm_magic_entry *dme1, struct drm_magic_entry *dme2)
{
	return (dme1->magic - dme2->magic);
}

SPLAY_GENERATE(drm_magic_tree, drm_magic_entry, node, drm_magic_cmp);
@


1.13
log
@The drm_* allocation functions have been #defined to not use most of
their arguments for a while. Actually go through the code and remove the
extraneous arguments. Makes things easier to read.
@
text
@@


1.12
log
@Rework the drm locking to be at least halfway sane. The freebsd code
held a lock over all driver ioctls in order to be ``mpsafe''. Stop lying
to ourselves for a start. This code is not fully mpsafe, and should not
pretend to be so.  Put the locking around where it should, and rely on
biglock for the rest. This will need to be fixed, but avoids some of the
horrible that we have right now.

Tested by many over a long time and several iterations.
@
text
@d56 1
a56 1
		entry = drm_alloc(sizeof(*entry), DRM_MEM_MAGIC);
d96 1
a96 1
	drm_free(pt, sizeof(*pt), DRM_MEM_MAGIC);
@


1.11
log
@The helper functions in this file are only used in one place and
relatively small, so inline them. This shrinks the kernel by about 500
bytes and saves a tree lookup.
@
text
@d64 1
a65 1
		DRM_UNLOCK();
@


1.10
log
@detypedef some more. No functional change.
@
text
@a37 71
struct drm_file	*drm_find_file(struct drm_device *, drm_magic_t);
int		 drm_add_magic(struct drm_device *, struct drm_file *,
		     drm_magic_t);
int		 drm_remove_magic(struct drm_device *, drm_magic_t);

/**
 * Returns the file private associated with the given magic number.
 */
struct drm_file *
drm_find_file(struct drm_device *dev, drm_magic_t magic)
{
	struct drm_magic_entry	*pt;
	struct drm_magic_entry	 key;

	DRM_SPINLOCK_ASSERT(&dev->dev_lock);

	key.magic = magic;
	if ((pt = SPLAY_FIND(drm_magic_tree, &dev->magiclist, &key)) != NULL)
		return (pt->priv);
	return (NULL);
}

/**
 * Inserts the given magic number into the hash table of used magic number
 * lists.
 */
int
drm_add_magic(struct drm_device *dev, struct drm_file *priv, drm_magic_t magic)
{
	struct drm_magic_entry	*entry;

	DRM_DEBUG("%d\n", magic);

	DRM_SPINLOCK_ASSERT(&dev->dev_lock);

	DRM_UNLOCK();
	entry = drm_alloc(sizeof(*entry), DRM_MEM_MAGIC);
	DRM_LOCK();
	if (entry == NULL)
		return (ENOMEM);
	entry->magic = magic;
	entry->priv = priv;
	SPLAY_INSERT(drm_magic_tree, &dev->magiclist, entry);

	return (0);
}

/**
 * Removes the given magic number from the hash table of used magic number
 * lists.
 */
int
drm_remove_magic(struct drm_device *dev, drm_magic_t magic)
{
	struct drm_magic_entry	*pt;
	struct drm_magic_entry	 key;

	DRM_SPINLOCK_ASSERT(&dev->dev_lock);

	DRM_DEBUG("%d\n", magic);

	key.magic = magic;
	if ((pt = SPLAY_FIND(drm_magic_tree, &dev->magiclist, &key)) == NULL)
		return (EINVAL);
	SPLAY_REMOVE(drm_magic_tree, &dev->magiclist, pt);
	DRM_UNLOCK();
	drm_free(pt, sizeof(*pt), DRM_MEM_MAGIC);
	DRM_LOCK();
	return (0);
}

d49 2
a50 1
	struct drm_auth	*auth = data;
d56 3
d60 5
a64 2
		file_priv->magic = auth->magic = dev->magicid++;
		drm_add_magic(dev, file_priv, auth->magic);
d79 2
a80 2
	struct drm_auth	*auth = data;
	struct drm_file	*priv;
d84 1
d86 2
a87 7
	priv = drm_find_file(dev, auth->magic);
	if (priv != NULL) {
		priv->authenticated = 1;
		drm_remove_magic(dev, auth->magic);
		DRM_UNLOCK();
		return (0);
	} else {
d91 8
@


1.9
log
@idgen32 wasn't really right here. Change back to how it was, but
done a little nicer.

Advice from deraadt@@.
@
text
@d120 1
a120 1
	drm_auth_t	*auth = data;
d143 1
a143 1
	drm_auth_t	*auth = data;
@


1.8
log
@Generate the magic id using idgen32(). While i'm here fix the locking a
bit so we don't sleep with a spinlock.

ok djm@@.
@
text
@d127 1
a127 5
		do {
			auth->magic = idgen32(&dev->magicid);
		} while (drm_find_file(dev, auth->magic));

		file_priv->magic = auth->magic;
@


1.7
log
@Switch all instances of malloc/free in the DRM to drm_alloc, drm_free
and drm_calloc.

With the recent change to check overflow in drm_calloc, this means that
all allocations that require multiplication are now checked. Also use
drm_calloc() when zeroing is needed and drop the bzero/memset
afterwards.  Finally, make drm_free() check for NULL, so we don't need
to do so every time.

ok miod@@, deraadt@@
@
text
@d73 4
a76 1
	if ((entry = drm_alloc(sizeof(*entry), DRM_MEM_MAGIC)) == NULL)
d103 1
d105 1
d120 1
a120 2
	static drm_magic_t	 sequence = 0;
	drm_auth_t		*auth = data;
d128 1
a128 6
			int old = sequence;

			auth->magic = ++old;

			if (!atomic_cmpset_int(&sequence, old, auth->magic))
				continue;
@


1.6
log
@Kill the silly ``drm_device_t'' and ``drm_file_t'' typedefs. just use
``struct drm_device'' and ``struct drm_file'' respectively. Since i'm
changing a lot of prototypes anyway, remove all parameter names from
prototypes, in accordance with style(9) (and sanity).
@
text
@d73 1
a73 1
	if ((entry = malloc(sizeof(*entry), M_DRM, M_ZERO | M_NOWAIT)) == NULL)
d100 1
a100 1
	free(pt, M_DRM);
@


1.5
log
@Some formatting nits. No functional change.
@
text
@d38 4
a41 3
drm_file_t	*drm_find_file(drm_device_t *, drm_magic_t);
int		 drm_add_magic(drm_device_t *, drm_file_t *, drm_magic_t);
int		 drm_remove_magic(drm_device_t *, drm_magic_t);
d46 2
a47 2
drm_file_t *
drm_find_file(drm_device_t *dev, drm_magic_t magic)
d65 1
a65 1
drm_add_magic(drm_device_t *dev, drm_file_t *priv, drm_magic_t magic)
d87 1
a87 1
drm_remove_magic(drm_device_t *dev, drm_magic_t magic)
d113 1
a113 1
drm_getmagic(drm_device_t *dev, void *data, struct drm_file *file_priv)
d146 1
a146 1
drm_authmagic(drm_device_t *dev, void *data, struct drm_file *file_priv)
d149 1
a149 1
	drm_file_t	*priv;
@


1.4
log
@Replace handrolled hashes with a splay tree, while there plug a memleak
inherited from the original drm driver.

input and ok oga@@.
@
text
@d38 3
a40 3
drm_file_t *drm_find_file(drm_device_t *, drm_magic_t);
int	 drm_add_magic(drm_device_t *, drm_file_t *, drm_magic_t);
int	 drm_remove_magic(drm_device_t *, drm_magic_t);
d48 2
a49 2
	struct drm_magic_entry *pt;
	struct drm_magic_entry	key;
d66 1
a66 1
	struct drm_magic_entry *entry;
d72 2
a73 2
	entry = malloc(sizeof(*entry), M_DRM, M_ZERO | M_NOWAIT);
	if (!entry) return ENOMEM;
d75 1
a75 1
	entry->priv  = priv;
d78 1
a78 1
	return 0;
d88 2
a89 2
	struct drm_magic_entry *pt;
	struct drm_magic_entry  key;
d97 1
a97 1
		return EINVAL;
d114 2
a115 2
	static drm_magic_t sequence = 0;
	drm_auth_t *auth = data;
d117 1
a117 1
				/* Find unique magic */
d125 1
a125 1
			auth->magic = old+1;
d130 1
d138 1
a138 1
	return 0;
d147 2
a148 2
	drm_auth_t *auth = data;
	drm_file_t *priv;
d158 1
a158 1
		return 0;
d161 1
a161 1
		return EINVAL;
@


1.3
log
@Switch part of the magic hashtable over to using a TAILQ instead
of a hand-rolled list. Ideally this code needs more changes, but for
now that'll do.

Tested by many.
@
text
@a37 1
int	 drm_hash_magic(drm_magic_t);
a41 6
int
drm_hash_magic(drm_magic_t magic)
{
	return magic & (DRM_HASH_SIZE-1);
}

d49 1
a49 3
	int hash;

	hash = drm_hash_magic(magic);
d53 3
a55 6
	TAILQ_FOREACH(pt, &dev->magiclist[hash], link) {
		if (pt->magic == magic) {
			return (pt->priv);
		}
	}

a65 1
	int hash;
a71 1
	hash = drm_hash_magic(magic);
d76 1
a76 1
	TAILQ_INSERT_TAIL(&dev->magiclist[hash], entry, link);
a87 1
	struct drm_magic_entry *prev = NULL;
d89 1
a89 1
	int hash;
a93 10
	hash = drm_hash_magic(magic);

	for (pt = TAILQ_FIRST(&dev->magiclist[hash]);
	    pt != TAILQ_END(&dev->magiclist[hash]);
	    prev = pt, pt = TAILQ_NEXT(pt, link)) {
		if (pt->magic == magic) {
			TAILQ_REMOVE(&dev->magiclist[hash], pt, link);
			return 0;
		}
	}
d95 4
d100 1
a100 1
	return EINVAL;
d163 8
@


1.2
log
@destatic the static functions, they only make debugging harder.
While i'm here:
remove a couple of debug printfs that shouldn't have gone in anyway.
trowel on some KNF (I really need to get around to sending some of this upstream).
remove some netbsd specific code that netbsd doesn't have anymore.

ok tedu.
@
text
@d55 1
a55 1
	drm_magic_entry_t *pt;
d62 1
a62 1
	for (pt = dev->magiclist[hash].head; pt; pt = pt->next) {
d64 1
a64 1
			return pt->priv;
d68 1
a68 1
	return NULL;
d79 1
a79 1
	drm_magic_entry_t *entry;
d90 1
a90 9
	entry->next  = NULL;

	if (dev->magiclist[hash].tail) {
		dev->magiclist[hash].tail->next = entry;
		dev->magiclist[hash].tail = entry;
	} else {
		dev->magiclist[hash].head = entry;
		dev->magiclist[hash].tail = entry;
	}
d102 2
a103 2
	drm_magic_entry_t *prev = NULL;
	drm_magic_entry_t *pt;
d111 3
a113 1
	for (pt = dev->magiclist[hash].head; pt; prev = pt, pt = pt->next) {
d115 1
a115 9
			if (dev->magiclist[hash].head == pt) {
				dev->magiclist[hash].head = pt->next;
			}
			if (dev->magiclist[hash].tail == pt) {
				dev->magiclist[hash].tail = prev;
			}
			if (prev) {
				prev->next = pt->next;
			}
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d38 7
a44 1
static int drm_hash_magic(drm_magic_t magic)
d52 2
a53 1
static drm_file_t *drm_find_file(drm_device_t *dev, drm_magic_t magic)
d56 3
a58 1
	int hash = drm_hash_magic(magic);
d75 2
a76 1
static int drm_add_magic(drm_device_t *dev, drm_file_t *priv, drm_magic_t magic)
d78 1
a78 1
	int		  hash;
d94 1
a94 1
		dev->magiclist[hash].tail	= entry;
d96 2
a97 2
		dev->magiclist[hash].head	= entry;
		dev->magiclist[hash].tail	= entry;
d107 2
a108 1
static int drm_remove_magic(drm_device_t *dev, drm_magic_t magic)
d112 1
a112 1
	int		  hash;
d146 2
a147 1
int drm_getmagic(drm_device_t *dev, void *data, struct drm_file *file_priv)
d178 2
a179 1
int drm_authmagic(drm_device_t *dev, void *data, struct drm_file *file_priv)
@

