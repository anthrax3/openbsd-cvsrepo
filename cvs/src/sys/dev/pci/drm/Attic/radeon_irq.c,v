head	1.29;
access;
symbols
	OPENBSD_5_4:1.28.0.2
	OPENBSD_5_4_BASE:1.28
	OPENBSD_5_3:1.27.0.8
	OPENBSD_5_3_BASE:1.27
	OPENBSD_5_2:1.27.0.6
	OPENBSD_5_2_BASE:1.27
	OPENBSD_5_1_BASE:1.27
	OPENBSD_5_1:1.27.0.4
	OPENBSD_5_0:1.27.0.2
	OPENBSD_5_0_BASE:1.27
	OPENBSD_4_9:1.24.0.4
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.24.0.2
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.22.0.2
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.4
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.29
date	2013.08.12.04.11.52;	author jsg;	state dead;
branches;
next	1.28;

1.28
date	2013.03.18.12.36.51;	author jsg;	state Exp;
branches;
next	1.27;

1.27
date	2011.06.19.12.04.20;	author oga;	state Exp;
branches;
next	1.26;

1.26
date	2011.06.02.18.22.00;	author weerd;	state Exp;
branches;
next	1.25;

1.25
date	2011.05.30.21.50.46;	author oga;	state Exp;
branches;
next	1.24;

1.24
date	2010.04.15.19.17.48;	author marco;	state Exp;
branches;
next	1.23;

1.23
date	2010.03.27.00.09.51;	author oga;	state Exp;
branches;
next	1.22;

1.22
date	2009.04.05.04.15.37;	author oga;	state Exp;
branches;
next	1.21;

1.21
date	2009.04.03.14.01.40;	author oga;	state Exp;
branches;
next	1.20;

1.20
date	2009.04.03.13.56.23;	author oga;	state Exp;
branches;
next	1.19;

1.19
date	2009.04.03.13.51.45;	author oga;	state Exp;
branches;
next	1.18;

1.18
date	2009.04.03.13.47.04;	author oga;	state Exp;
branches;
next	1.17;

1.17
date	2009.04.03.12.25.04;	author oga;	state Exp;
branches;
next	1.16;

1.16
date	2009.04.03.11.31.36;	author oga;	state Exp;
branches;
next	1.15;

1.15
date	2009.03.27.17.44.12;	author oga;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.05.23.08.23;	author oga;	state Exp;
branches;
next	1.13;

1.13
date	2009.03.05.23.00.46;	author oga;	state Exp;
branches;
next	1.12;

1.12
date	2009.03.05.22.51.32;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2009.02.15.23.04.22;	author oga;	state Exp;
branches;
next	1.10;

1.10
date	2008.11.24.17.48.22;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2008.11.24.12.22.55;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2008.11.23.21.35.01;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.23.20.46.48;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.22.22.54.48;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.07.22.25.12;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.07.29.22.23.51;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.07.03.18.25.14;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.11.09.33.01;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Add a port of the TTM and Radeon DRM code from Linux 3.8.13.
Includes kernel modesetting, framebuffer console and support
for newer hardware.

Firmware needs to be present for acceleration and in some cases
modesetting to work.  It can be installed via fw_update
or manually via pkg_add.

With lots of help from kettenis@@ some macppc bits from mpi@@
and some ttm refcount/queue bits from FreeBSD.

Thanks to M:Tier and the OpenBSD Foundation for sponsoring this work.
@
text
@/* $OpenBSD: radeon_irq.c,v 1.28 2013/03/18 12:36:51 jsg Exp $ */
/* radeon_irq.c -- IRQ handling for radeon -*- linux-c -*- */
/*
 * Copyright (C) The Weather Channel, Inc.  2002.  All Rights Reserved.
 *
 * The Weather Channel (TM) funded Tungsten Graphics to develop the
 * initial release of the Radeon 8500 driver under the XFree86 license.
 * This notice must be preserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Keith Whitwell <keith@@tungstengraphics.com>
 *    Michel Dï¿½zer <michel@@daenzer.net>
 */

#include "drmP.h"
#include "drm.h"
#include "radeon_drm.h"
#include "radeon_drv.h"

int		radeondrm_intr(void *);
void		r500_vbl_irq_set_state(struct drm_device *, u_int32_t, int);
u_int32_t	radeon_acknowledge_irqs(drm_radeon_private_t *, u_int32_t *);
int		radeon_emit_irq(struct drm_device *);
int		radeon_wait_irq(struct drm_device *, int);

void
radeon_irq_set_state(struct drm_device *dev, u32 mask, int state)
{
	drm_radeon_private_t *dev_priv = dev->dev_private;

	if (state)
		dev_priv->irq_enable_reg |= mask;
	else
		dev_priv->irq_enable_reg &= ~mask;

	RADEON_WRITE(RADEON_GEN_INT_CNTL, dev_priv->irq_enable_reg);
}

void
r500_vbl_irq_set_state(struct drm_device *dev, u32 mask, int state)
{
	drm_radeon_private_t *dev_priv = dev->dev_private;

	if (state)
		dev_priv->r500_disp_irq_reg |= mask;
	else
		dev_priv->r500_disp_irq_reg &= ~mask;

	RADEON_WRITE(R500_DxMODE_INT_MASK, dev_priv->r500_disp_irq_reg);
}

int radeon_enable_vblank(struct drm_device *dev, int crtc)
{
	drm_radeon_private_t *dev_priv = dev->dev_private;

	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_RS600) {	
		switch (crtc) {
		case 0:
			r500_vbl_irq_set_state(dev, R500_D1MODE_INT_MASK, 1);
			break;
		case 1:
			r500_vbl_irq_set_state(dev, R500_D2MODE_INT_MASK, 1);
			break;
		default:
			DRM_ERROR("tried to enable vblank on non-existent crtc %d\n",
				  crtc);
			return EINVAL;
		}
	} else {
		switch (crtc) {
		case 0:
			radeon_irq_set_state(dev, RADEON_CRTC_VBLANK_MASK, 1);
			break;
		case 1:
			radeon_irq_set_state(dev, RADEON_CRTC2_VBLANK_MASK, 1);
			break;
		default:
			DRM_ERROR("tried to enable vblank on non-existent crtc %d\n",
				  crtc);
			return EINVAL;
		}
	}

	return 0;
}

void radeon_disable_vblank(struct drm_device *dev, int crtc)
{
	drm_radeon_private_t *dev_priv = dev->dev_private;

	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_RS600) {	
		switch (crtc) {
		case 0:
			r500_vbl_irq_set_state(dev, R500_D1MODE_INT_MASK, 0);
			break;
		case 1:
			r500_vbl_irq_set_state(dev, R500_D2MODE_INT_MASK, 0);
			break;
		default:
			DRM_ERROR("tried to enable vblank on non-existent crtc %d\n",
				  crtc);
			break;
		}
	} else {
		switch (crtc) {
		case 0:
			radeon_irq_set_state(dev, RADEON_CRTC_VBLANK_MASK, 0);
			break;
		case 1:
			radeon_irq_set_state(dev, RADEON_CRTC2_VBLANK_MASK, 0);
			break;
		default:
			DRM_ERROR("tried to enable vblank on non-existent crtc %d\n",
				  crtc);
			break;
		}
	}
}

u_int32_t
radeon_acknowledge_irqs(drm_radeon_private_t *dev_priv, u32 *r500_disp_int)
{
	u32 irqs = RADEON_READ(RADEON_GEN_INT_STATUS);
	u32 irq_mask = RADEON_SW_INT_TEST;

	*r500_disp_int = 0;
	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_RS600) {
		/* vbl interrupts in a different place */

		if (irqs & R500_DISPLAY_INT_STATUS) {
			/* if a display interrupt */
			u32 disp_irq;

			disp_irq = RADEON_READ(R500_DISP_INTERRUPT_STATUS);

			*r500_disp_int = disp_irq;
			if (disp_irq & R500_D1_VBLANK_INTERRUPT) {
				RADEON_WRITE(R500_D1MODE_VBLANK_STATUS, R500_VBLANK_ACK);
			}
			if (disp_irq & R500_D2_VBLANK_INTERRUPT) {
				RADEON_WRITE(R500_D2MODE_VBLANK_STATUS, R500_VBLANK_ACK);
			}
		}
		irq_mask |= R500_DISPLAY_INT_STATUS;
	} else
		irq_mask |= RADEON_CRTC_VBLANK_STAT | RADEON_CRTC2_VBLANK_STAT;

	irqs &=	irq_mask;

	if (irqs)
		RADEON_WRITE(RADEON_GEN_INT_STATUS, irqs);
	
	return (irqs);
}

/* Interrupts - Used for device synchronization and flushing in the
 * following circumstances:
 *
 * - Exclusive FB access with hw idle:
 *    - Wait for GUI Idle (?) interrupt, then do normal flush.
 *
 * - Frame throttling, NV_fence:
 *    - Drop marker irq's into command stream ahead of time.
 *    - Wait on irq's with lock *not held*
 *    - Check each for termination condition
 *
 * - Internally in cp_getbuffer, etc:
 *    - as above, but wait with lock held???
 *
 * NOTE: These functions are misleadingly named -- the irq's aren't
 * tied to dma at all, this is just a hangover from dri prehistory.
 */

int
radeondrm_intr(void *arg)
{
	struct drm_device	*dev = arg;
	drm_radeon_private_t	*dev_priv = dev->dev_private;
	u_int32_t		 stat, r500_disp_int;

	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_R600)
		return (0);

	stat = radeon_acknowledge_irqs(dev_priv, &r500_disp_int);
	if (!stat)
		return (0);

	stat &= dev_priv->irq_enable_reg;

	/* SW interrupt */
	if (stat & RADEON_SW_INT_TEST) {
		mtx_enter(&dev_priv->swi_lock);
		wakeup(dev_priv);
		mtx_leave(&dev_priv->swi_lock);
	}

	/* VBLANK interrupt */
	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_RS600) {
		if (r500_disp_int & R500_D1_VBLANK_INTERRUPT)
			drm_handle_vblank(dev, 0);
		if (r500_disp_int & R500_D2_VBLANK_INTERRUPT)
			drm_handle_vblank(dev, 1);
	} else {
		if (stat & RADEON_CRTC_VBLANK_STAT)
			drm_handle_vblank(dev, 0);
		if (stat & RADEON_CRTC2_VBLANK_STAT)
			drm_handle_vblank(dev, 1);
	}
	return (1);
}

int
radeon_emit_irq(struct drm_device * dev)
{
	drm_radeon_private_t *dev_priv = dev->dev_private;
	unsigned int ret;

	atomic_inc(&dev_priv->swi_emitted);
	ret = atomic_read(&dev_priv->swi_emitted);

	BEGIN_RING(4);
	OUT_RING_REG(RADEON_LAST_SWI_REG, ret);
	OUT_RING_REG(RADEON_GEN_INT_STATUS, RADEON_SW_INT_FIRE);
	ADVANCE_RING();
	COMMIT_RING();

	return (ret);
}

int
radeon_wait_irq(struct drm_device * dev, int swi_nr)
{
	drm_radeon_private_t	*dev_priv = dev->dev_private;
	int			 ret = 0;

	DRM_WAIT_ON(ret, dev_priv, &dev_priv->swi_lock, 3 * hz, "rdnwt",
	    RADEON_READ(RADEON_LAST_SWI_REG) >= swi_nr);

	return (ret);
}

u_int32_t
radeon_get_vblank_counter(struct drm_device *dev, int crtc)
{
	drm_radeon_private_t	*dev_priv = dev->dev_private;

	if (!dev_priv) {
		DRM_ERROR("called with no initialization\n");
		return (EINVAL);
	}

	if (crtc < 0 || crtc > 1) {
		DRM_ERROR("Invalid crtc %d\n", crtc);
		return (EINVAL);
	}

	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_RS600) {
		if (crtc == 0)
			return RADEON_READ(R500_D1CRTC_FRAME_COUNT);
		else
			return RADEON_READ(R500_D2CRTC_FRAME_COUNT);
	} else {
		if (crtc == 0)
			return RADEON_READ(RADEON_CRTC_CRNT_FRAME);
		else
			return RADEON_READ(RADEON_CRTC2_CRNT_FRAME);
	}
}

/* Needs the lock as it touches the ring.
 */
int
radeon_irq_emit(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	drm_radeon_private_t	*dev_priv = dev->dev_private;
	drm_radeon_irq_emit_t	*emit = data;
	int			 result;

	LOCK_TEST_WITH_RETURN(dev, file_priv);

	if (!dev_priv) {
		DRM_ERROR("called with no initialization\n");
		return (EINVAL);
	}

	result = radeon_emit_irq(dev);

	return (copyout(&result, emit->irq_seq, sizeof(int)));
}

/* Doesn't need the hardware lock.
 */
int
radeon_irq_wait(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	drm_radeon_private_t *dev_priv = dev->dev_private;
	drm_radeon_irq_wait_t *irqwait = data;

	if (!dev_priv) {
		DRM_ERROR("called with no initialization\n");
		return (EINVAL);
	}

	return (radeon_wait_irq(dev, irqwait->irq_seq));
}

/* drm_dma.h hooks
*/
int
radeon_driver_irq_install(struct drm_device * dev)
{
	drm_radeon_private_t	*dev_priv = dev->dev_private;
	u_int32_t		 dummy;

	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_R600)
		return (0);

	/* Disable *all* interrupts */
	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_RS600)
		RADEON_WRITE(R500_DxMODE_INT_MASK, 0);
	RADEON_WRITE(RADEON_GEN_INT_CNTL, 0);

	/* Clear bits if they're already high */
	radeon_acknowledge_irqs(dev_priv, &dummy);

	dev_priv->irqh = pci_intr_establish(dev_priv->pc, dev_priv->ih, IPL_TTY,
	    radeondrm_intr, dev, dev_priv->dev.dv_xname);
	if (dev_priv->irqh == NULL)
		return (ENOENT);

	atomic_set(&dev_priv->swi_emitted, 0);

	dev->max_vblank_count = 0x001fffff;

	radeon_irq_set_state(dev, RADEON_SW_INT_ENABLE, 1);

	return (0);
}

void
radeon_driver_irq_uninstall(struct drm_device * dev)
{
	drm_radeon_private_t	*dev_priv = dev->dev_private;
	if (!dev_priv)
		return;

	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_R600)
		return;

	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_RS600)
		RADEON_WRITE(R500_DxMODE_INT_MASK, 0);
	/* Disable *all* interrupts */
	RADEON_WRITE(RADEON_GEN_INT_CNTL, 0);

	pci_intr_disestablish(dev_priv->pc, dev_priv->irqh);
}
@


1.28
log
@Significantly increase the wordlist for ddb hangman,
and update our device independent DRM code and the Intel DRM code
to be mostly in sync with Linux 3.8.3.  Among other things this
brings support for kernel modesetting and enables use of
the rings on gen6+ Intel hardware.

Based on some earlier work from matthieu@@ with some hints from FreeBSD
and with lots of help from kettenis@@ (including a beautiful accelerated
wscons framebuffer console!)

Thanks to M:Tier and the OpenBSD Foundation for sponsoring this work.
@
text
@d1 1
a1 1
/* $OpenBSD: radeon_irq.c,v 1.27 2011/06/19 12:04:20 oga Exp $ */
@


1.27
log
@Don't assume no interrupts if the command processor is not running.

While this means we are on the way to vt switch a few things want
vblanks interrupts between disabling the cp and the vt switch
(modeset_ctl ioctls for example)

tested by jsg@@, found and ok kettenis@@.
@
text
@d1 1
a1 1
/* $OpenBSD: radeon_irq.c,v 1.26 2011/06/02 18:22:00 weerd Exp $ */
d352 1
a352 1
	dev->vblank->vb_max = 0x001fffff;
@


1.26
log
@Add $OpenBSD$ after oga said 'go ahead and fix that'

'go for it' oga@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a199 3
	if (dev_priv->cp_running == 0)
		return (0);
	/* XXX wtf? */
@


1.25
log
@Add RADEON_CS ioctl support for r600 and r700.

This is a faked up version of the gem command submission method for r600
required for OpenGL support on these chipsets.

Currently support is not perfect. since these chips have a rather funky
ringbuffer based interrupt method which this code does not yet support so
interrupt based polling methods must be turned off in mesa.

I've not found a good way which to do that per-driver, so until I work
that out I the following .drirc (or /etc/drirc) chunk (provided by
Brynet after I was too slack to provide it myself) will be needed:

<driconf>
        <device screen="0" driver="r600">
                <application name="all">
                        <option name="fthrottle_mode" value="0"/>
                        <option name="vblank_mode" value="0"/>
                </application>
        </device>
</driconf>


Tested by many on tech@@. While it provided more problems, this diff made
espie@@ stop nagging me when he finally found out it existed.
@
text
@d1 1
@


1.24
log
@Use IPL_TTY instead of IPB_BIO as suggested by oga.

Tested by me and mlarkin on amd64 and i386
ok oga
@
text
@d199 2
@


1.23
log
@DRM for R600 and R700 chipsets.

note, only the pcidevs for those chipsets that have been tested are
enabled for now. Please contact me if you have a r600 or r700 that does
not attach radeondrm. Only the 2D/Xv bits are here. I'm ambivalent about
the implementation of the RADEON_CS ioctl for OpenGL since that was
originally kernel-modesetting only. When we update mesa I shall think
about (and test) it.

Tested by quite a number. Zero bad reports. Nagged perpetually by
robert@@ (and probably others) for months now.
@
text
@d345 1
a345 1
	dev_priv->irqh = pci_intr_establish(dev_priv->pc, dev_priv->ih, IPL_BIO,
@


1.22
log
@Rework the vblank subsystem so that instead of having various bits in
the drm softc, we only have one pointer, with the rest in that struct. This is
so that vblank-less drivers (yes, they exist) don't need to waste space on
useless crud.

While i'm reworking most of this code anyway, accept that on openbsd all
of the #defined atomic functions are not atomic other than set and clear
bit. Also, realise that the vb_lock is held whenever we manipulate these
counts anyway.  With those two facts in mind just remove the
atomic_blah() and just use ++ and --.
@
text
@d74 1
a74 1
	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_RS690) {	
d109 1
a109 1
	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_RS690) {	
d145 1
a145 1
	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_RS690) {
d199 4
d217 1
a217 1
	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_RS690) {
d276 1
a276 1
	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_RS690) {
d307 1
a307 6
	if (DRM_COPY_TO_USER(emit->irq_seq, &result, sizeof(int))) {
		DRM_ERROR("copy_to_user\n");
		return (EFAULT);
	}

	return (0);
d334 3
d338 1
a338 1
	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_RS690)
d366 4
a369 1
	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_RS690)
@


1.21
log
@${XORGNAME}_driver_irq_handler() is a stupid name for an interrupt
handler anyway. replace it with ${OpenBSD_driver_name}_intr like most of
the rest of the tree. No functional change.
@
text
@d350 1
a350 1
	dev->max_vblank_count = 0x001fffff;
@


1.20
log
@More compat crud bites the dust: Remove the IRQ_NONE and IRQ_HANDLED
defines. 0 and 1 are fine for returning from irq handlers so why bother
with the indirection?
@
text
@d38 1
a38 1
int		radeon_driver_irq_handler(void *);
d193 1
a193 1
radeon_driver_irq_handler(void *arg)
d344 1
a344 1
	    radeon_driver_irq_handler, dev, dev_priv->dev.dv_xname);
@


1.19
log
@kill the stupid DRM_IRQ_ARGS macros and irqreturn_t typedef, switch to
the unmacroed/typedefed version.
@
text
@d201 1
a201 1
		return (IRQ_NONE);
d224 1
a224 1
	return (IRQ_HANDLED);
@


1.18
log
@Remove dev->irq_lock, the drm_irq_handler_wrap irq handler, and remove
the dev->driver irq_handler member since we now don't need to know.
Shaves a few bytes, and makes me happy.
@
text
@d38 1
a38 1
irqreturn_t	radeon_driver_irq_handler(DRM_IRQ_ARGS);
d192 2
a193 2
irqreturn_t
radeon_driver_irq_handler(DRM_IRQ_ARGS)
@


1.17
log
@Add a lock to protect races for the software interrupt on radeon chips
(vblank is already protected by that subsystem). Also, do all checks for
the correct software interrupt having fired inside DRM_WAIT_ON(), since
it won't sleep if it's already passed it doesn't gain us much (skips one
lock grab).  Finally, establish the interrupt with only the main radeon
irq handler, don't bother with drm_irq_wrap. bunch of knf while i'm in
here.
@
text
@d38 1
@


1.16
log
@Convert DRM_WAIT_ON to take additional parameters, the wmsg for msleep,
and the lock to manipulate.

first step of removing drm_irq_handler_wrap which just grabs the
irq_lock, and eventually irq_lock. drivers should manage their own.
@
text
@d38 4
a41 4
void	r500_vbl_irq_set_state(struct drm_device *, u32, int);
u_int32_t	radeon_acknowledge_irqs(drm_radeon_private_t *, u32 *);
int	radeon_emit_irq(struct drm_device *);
int	radeon_wait_irq(struct drm_device *, int);
d170 1
a170 1
	return irqs;
d191 2
a192 1
irqreturn_t radeon_driver_irq_handler(DRM_IRQ_ARGS)
d194 4
a197 9
	struct drm_device *dev = (struct drm_device *) arg;
	drm_radeon_private_t *dev_priv =
	    (drm_radeon_private_t *) dev->dev_private;
	u32 stat;
	u32 r500_disp_int;

	/* Only consider the bits we're interested in - others could be used
	 * outside the DRM
	 */
d200 1
a200 1
		return IRQ_NONE;
d205 2
a206 1
	if (stat & RADEON_SW_INT_TEST)
d208 2
d223 1
a223 1
	return IRQ_HANDLED;
d241 1
a241 1
	return ret;
d250 1
a250 4
	if (RADEON_READ(RADEON_LAST_SWI_REG) >= swi_nr)
		return 0;

	DRM_WAIT_ON(ret, dev_priv, &dev->irq_lock, 3 * hz, "rdnwt",
d256 2
a257 1
u32 radeon_get_vblank_counter(struct drm_device *dev, int crtc)
d259 1
a259 1
	drm_radeon_private_t *dev_priv = dev->dev_private;
d263 1
a263 1
		return EINVAL;
d268 1
a268 1
		return EINVAL;
d286 2
a287 1
int radeon_irq_emit(struct drm_device *dev, void *data, struct drm_file *file_priv)
d289 3
a291 3
	drm_radeon_private_t *dev_priv = dev->dev_private;
	drm_radeon_irq_emit_t *emit = data;
	int result;
d297 1
a297 1
		return EINVAL;
d304 1
a304 1
		return EFAULT;
d307 1
a307 1
	return 0;
d312 2
a313 1
int radeon_irq_wait(struct drm_device *dev, void *data, struct drm_file *file_priv)
d320 1
a320 1
		return EINVAL;
d323 1
a323 1
	return radeon_wait_irq(dev, irqwait->irq_seq);
d331 2
a332 3
	drm_radeon_private_t *dev_priv =
	    (drm_radeon_private_t *) dev->dev_private;
	u32 dummy;
d343 1
a343 1
	    drm_irq_handler_wrap, dev, dev_priv->dev.dv_xname);
d353 1
a353 1
	return 0;
d359 1
a359 2
	drm_radeon_private_t *dev_priv =
	    (drm_radeon_private_t *) dev->dev_private;
@


1.15
log
@Remove a bunch of compat macros, just expand them to the openbsd
equivalent.
@
text
@d248 2
a249 3
	drm_radeon_private_t *dev_priv =
	    (drm_radeon_private_t *) dev->dev_private;
	int ret = 0;
d254 2
a255 2
	DRM_WAIT_ON(ret, dev_priv, 3 * DRM_HZ,
		    RADEON_READ(RADEON_LAST_SWI_REG) >= swi_nr);
d257 1
a257 1
	return ret;
@


1.14
log
@De-macro the ring manipulation macros in favour of functions. Saves a
large pile of space.

Tested by several, thanks.
@
text
@d210 1
a210 1
		DRM_WAKEUP(dev_priv);
@


1.13
log
@Do a similar thing to inteldrm re removing the old vblank crtc
inferfaces.  Shrinks the code.
@
text
@a231 1
	RING_LOCALS;
@


1.12
log
@Remove the stats_boxes counters and associated code from radeondrm.

They're really not all that useful.
@
text
@a374 19


int radeon_vblank_crtc_get(struct drm_device *dev)
{
	drm_radeon_private_t *dev_priv = (drm_radeon_private_t *) dev->dev_private;

	return dev_priv->vblank_crtc;
}

int radeon_vblank_crtc_set(struct drm_device *dev, int64_t value)
{
	drm_radeon_private_t *dev_priv = (drm_radeon_private_t *) dev->dev_private;
	if (value & ~(DRM_RADEON_VBLANK_CRTC1 | DRM_RADEON_VBLANK_CRTC2)) {
		DRM_ERROR("called with invalid crtc 0x%x\n", (unsigned int)value);
		return EINVAL;
	}
	dev_priv->vblank_crtc = (unsigned int)value;
	return 0;
}
@


1.11
log
@dev_priv->irq_enabled is only set to zero and then ignored. kill it.
@
text
@a255 2
	dev_priv->stats.boxes |= RADEON_BOX_WAIT_IDLE;

@


1.10
log
@destatic radeondrm almost completely. I'm sick of ddb lying to me.
shaves a few bytes, but that's just gravy.
@
text
@a369 2
	dev_priv->irq_enabled = 0;

@


1.9
log
@Fixup wakeup pointers. interrupts work properly again.
@
text
@d38 7
a44 1
void radeon_irq_set_state(struct drm_device *dev, u32 mask, int state)
d56 2
a57 1
static void r500_vbl_irq_set_state(struct drm_device *dev, u32 mask, int state)
d137 2
a138 1
static __inline__ u32 radeon_acknowledge_irqs(drm_radeon_private_t * dev_priv, u32 *r500_disp_int)
d227 2
a228 1
static int radeon_emit_irq(struct drm_device * dev)
d246 2
a247 1
static int radeon_wait_irq(struct drm_device * dev, int swi_nr)
@


1.8
log
@Map device interrupts in the attach routine. and remove more need for
dev->pa by doing the pci_intr_establish/disestablish dance in the driver
function, not in drm. This removes the need for
interrupt_{pre,post}install callbacks, instead just provide a
interrupt_install() callback.
@
text
@d202 1
a202 1
		DRM_WAKEUP(&dev_priv);
@


1.7
log
@Move vblank data allocation to happening at attach, not at irq enable.
just put a vblank_pipes argument to the driver structure which tells us
how many to set up

this means that intel doesn't lose all vblank count on vtswitch (it
disables the interrupt there), i've heard of a few uvm_faults where this
happens as well as things just going wrong.

This was suggested by Keith Packard who provided a different diff for
drm.git.
@
text
@d323 2
a324 1
void radeon_driver_irq_preinstall(struct drm_device * dev)
a336 1
}
d338 4
a341 4
int radeon_driver_irq_postinstall(struct drm_device * dev)
{
	drm_radeon_private_t *dev_priv =
	    (drm_radeon_private_t *) dev->dev_private;
d352 2
a353 1
void radeon_driver_irq_uninstall(struct drm_device * dev)
d366 2
@


1.6
log
@using ``wait queues' for sleep is a linuxism. Kill them and just sleep
on the softc.
@
text
@a341 1
	int ret;
a343 4

	ret = drm_vblank_init(dev, 2);
	if (ret)
		return ret;
@


1.5
log
@Kill the linux-ready negative return codes in ``shared'' code. We handle
them wrong in several cases that i've noticed and Merging when needed is
still fairly simple, anyway. This shaves another 500 bytes from an amd64
kernel due to not having to flip the sign on some things. It also stops
my eyes bleeding.

Tested by a few along with the last diff that went in.
@
text
@d202 1
a202 1
		DRM_WAKEUP(&dev_priv->swi_queue);
d248 1
a248 1
	DRM_WAIT_ON(ret, dev_priv->swi_queue, 3 * DRM_HZ,
a344 1
	DRM_INIT_WAITQUEUE(&dev_priv->swi_queue);
@


1.4
log
@Update to DRM git.

Some stability fixes for radeon. The most part of this diff is related
to fixing up the VBLANK (vertical blank interrupt) handling. Now, if the
X driver supports the DRM_IOCTL_MODESET_CTL ioctl, (to be used when
changing the video modes), then allow the vblank to be disabled once
that ioctl has been called. Otherwise, keep the interrupt enabled at all
time, since disabling it otherwise will lead to problems.

Tested by a few. "no problem" on API/ABI deraadt@@.
@
text
@d260 1
a260 1
		return -EINVAL;
d265 1
a265 1
		return -EINVAL;
d293 1
a293 1
		return -EINVAL;
d300 1
a300 1
		return -EFAULT;
d315 1
a315 1
		return -EINVAL;
d386 1
a386 1
		return -EINVAL;
@


1.3
log
@Update the radeondrm driver to be level with drm git.

adds:

- support for RS400 chips
- some cleanup of a few things
- fixes a hard lockup for r3-500 cards.

Tested by a few
@
text
@a256 1
	u32 crtc_cnt_reg, crtc_status_reg;
d263 5
d269 4
a272 10
		if (crtc == 0) {
			crtc_cnt_reg = R500_D1CRTC_FRAME_COUNT;
			crtc_status_reg = R500_D1CRTC_STATUS;
		} else if (crtc == 1) {
			crtc_cnt_reg = R500_D2CRTC_FRAME_COUNT;
			crtc_status_reg = R500_D2CRTC_STATUS;
		} else
			return -EINVAL;
		return RADEON_READ(crtc_cnt_reg) + (RADEON_READ(crtc_status_reg) & 1);
			
d274 4
a277 10
		if (crtc == 0) {
			crtc_cnt_reg = RADEON_CRTC_CRNT_FRAME;
			crtc_status_reg = RADEON_CRTC_STATUS;
		} else if (crtc == 1) {
			crtc_cnt_reg = RADEON_CRTC2_CRNT_FRAME;
			crtc_status_reg = RADEON_CRTC2_STATUS;
		} else {
			return -EINVAL;
		}
		return RADEON_READ(crtc_cnt_reg) + (RADEON_READ(crtc_status_reg) & 1);
a376 16
	u32 flag;
	u32 value;

	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_RS690) {
		flag = RADEON_READ(R500_DxMODE_INT_MASK);
		value = 0;
		if (flag & R500_D1MODE_INT_MASK)
			value |= DRM_RADEON_VBLANK_CRTC1;

		if (flag & R500_D2MODE_INT_MASK)
			value |= DRM_RADEON_VBLANK_CRTC2;
	} else {
		flag = RADEON_READ(RADEON_GEN_INT_CNTL);
		value = 0;
		if (flag & RADEON_CRTC_VBLANK_MASK)
			value |= DRM_RADEON_VBLANK_CRTC1;
d378 1
a378 4
		if (flag & RADEON_CRTC2_VBLANK_MASK)
			value |= DRM_RADEON_VBLANK_CRTC2;
	}
	return value;
@


1.2
log
@Update to DRM git as of a few days ago. This mostly affects the
card-specific files with a few minor changes elsewhere.

The main change to the OpenBSD specific stuff is the change to the irq
api due to the vblank rework.

4 more large bugs known, I have a fix for one.

Tested by many.  prompted by deraadt@@.
@
text
@d38 1
a38 1
static void radeon_irq_set_state(struct drm_device *dev, u32 mask, int state)
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d38 1
a38 2
static __inline__ u32 radeon_acknowledge_irqs(drm_radeon_private_t * dev_priv,
					      u32 mask)
d40 119
a158 1
	u32 irqs = RADEON_READ(RADEON_GEN_INT_STATUS) & mask;
d161 1
d189 1
d194 1
a194 3
	stat = radeon_acknowledge_irqs(dev_priv, (RADEON_SW_INT_TEST_ACK |
						  RADEON_CRTC_VBLANK_STAT |
						  RADEON_CRTC2_VBLANK_STAT));
d201 1
a201 1
	if (stat & RADEON_SW_INT_TEST) {
a202 1
	}
d205 10
a214 18
	if (stat & (RADEON_CRTC_VBLANK_STAT|RADEON_CRTC2_VBLANK_STAT)) {
		int vblank_crtc = dev_priv->vblank_crtc;

		if ((vblank_crtc &
		     (DRM_RADEON_VBLANK_CRTC1 | DRM_RADEON_VBLANK_CRTC2)) ==
		    (DRM_RADEON_VBLANK_CRTC1 | DRM_RADEON_VBLANK_CRTC2)) {
			if (stat & RADEON_CRTC_VBLANK_STAT)
				atomic_inc(&dev->vbl_received);
			if (stat & RADEON_CRTC2_VBLANK_STAT)
				atomic_inc(&dev->vbl_received2);
		} else if (((stat & RADEON_CRTC_VBLANK_STAT) &&
			   (vblank_crtc & DRM_RADEON_VBLANK_CRTC1)) ||
			   ((stat & RADEON_CRTC2_VBLANK_STAT) &&
			    (vblank_crtc & DRM_RADEON_VBLANK_CRTC2)))
			atomic_inc(&dev->vbl_received);

		DRM_WAKEUP(&dev->vbl_queue);
		drm_vbl_send_signals(dev);
a215 1

d254 1
a254 3
static int radeon_driver_vblank_do_wait(struct drm_device * dev,
					unsigned int *sequence,
					int crtc)
d256 3
a258 6
	drm_radeon_private_t *dev_priv =
	    (drm_radeon_private_t *) dev->dev_private;
	unsigned int cur_vblank;
	int ret = 0;
	int ack = 0;
	atomic_t *counter;
d260 1
a260 1
		DRM_ERROR("%s called with no initialization\n", __FUNCTION__);
d264 23
a286 34
	if (crtc == DRM_RADEON_VBLANK_CRTC1) {
		counter = &dev->vbl_received;
		ack |= RADEON_CRTC_VBLANK_STAT;
	} else if (crtc == DRM_RADEON_VBLANK_CRTC2) {
		counter = &dev->vbl_received2;
		ack |= RADEON_CRTC2_VBLANK_STAT;
	} else
		return -EINVAL;

	radeon_acknowledge_irqs(dev_priv, ack);

	dev_priv->stats.boxes |= RADEON_BOX_WAIT_IDLE;

	/* Assume that the user has missed the current sequence number
	 * by about a day rather than she wants to wait for years
	 * using vertical blanks...
	 */
	DRM_WAIT_ON(ret, dev->vbl_queue, 3 * DRM_HZ,
		    (((cur_vblank = atomic_read(counter))
		      - *sequence) <= (1 << 23)));

	*sequence = cur_vblank;

	return ret;
}

int radeon_driver_vblank_wait(struct drm_device *dev, unsigned int *sequence)
{
	return radeon_driver_vblank_do_wait(dev, sequence, DRM_RADEON_VBLANK_CRTC1);
}

int radeon_driver_vblank_wait2(struct drm_device *dev, unsigned int *sequence)
{
	return radeon_driver_vblank_do_wait(dev, sequence, DRM_RADEON_VBLANK_CRTC2);
d300 1
a300 1
		DRM_ERROR("%s called with no initialization\n", __FUNCTION__);
d322 1
a322 1
		DRM_ERROR("%s called with no initialization\n", __FUNCTION__);
a328 15
static void radeon_enable_interrupt(struct drm_device *dev)
{
	drm_radeon_private_t *dev_priv = (drm_radeon_private_t *) dev->dev_private;

	dev_priv->irq_enable_reg = RADEON_SW_INT_ENABLE;
	if (dev_priv->vblank_crtc & DRM_RADEON_VBLANK_CRTC1)
		dev_priv->irq_enable_reg |= RADEON_CRTC_VBLANK_MASK;

	if (dev_priv->vblank_crtc & DRM_RADEON_VBLANK_CRTC2)
		dev_priv->irq_enable_reg |= RADEON_CRTC2_VBLANK_MASK;

	RADEON_WRITE(RADEON_GEN_INT_CNTL, dev_priv->irq_enable_reg);
	dev_priv->irq_enabled = 1;
}

d335 1
d338 2
d343 1
a343 3
	radeon_acknowledge_irqs(dev_priv, (RADEON_SW_INT_TEST_ACK |
					   RADEON_CRTC_VBLANK_STAT |
					   RADEON_CRTC2_VBLANK_STAT));
d346 1
a346 1
void radeon_driver_irq_postinstall(struct drm_device * dev)
d350 1
d355 9
a363 1
	radeon_enable_interrupt(dev);
d375 2
d388 13
a400 2
	flag = RADEON_READ(RADEON_GEN_INT_CNTL);
	value = 0;
d402 3
a404 5
	if (flag & RADEON_CRTC_VBLANK_MASK)
		value |= DRM_RADEON_VBLANK_CRTC1;

	if (flag & RADEON_CRTC2_VBLANK_MASK)
		value |= DRM_RADEON_VBLANK_CRTC2;
a415 1
	radeon_enable_interrupt(dev);
@

