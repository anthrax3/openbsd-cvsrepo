head	1.8;
access;
symbols
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2009.04.06.21.03.55;	author oga;	state dead;
branches;
next	1.7;

1.7
date	2009.03.26.07.25.06;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2009.02.05.01.06.42;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2009.02.05.00.34.38;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2009.02.05.00.25.51;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.10.07.22.25.12;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.11.09.33.01;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Actually remove the file this time...
@
text
@/* i915_mem.c -- Simple agp/fb memory manager for i915 -*- linux-c -*-
 */
/*
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include "drmP.h"
#include "drm.h"
#include "i915_drm.h"
#include "i915_drv.h"

struct drm_heap *intel_get_heap(drm_i915_private_t *, int);
void	intel_mark_block(struct drm_device *, struct drm_mem *, int);

/* This memory manager is integrated into the global/local lru
 * mechanisms used by the clients.  Specifically, it operates by
 * setting the 'in_use' fields of the global LRU to indicate whether
 * this region is privately allocated to a client.
 *
 * This does require the client to actually respect that field.
 *
 * Currently no effort is made to allocate 'private' memory in any
 * clever way - the LRU information isn't used to determine which
 * block to allocate, and the ring is drained prior to allocations --
 * in other words allocation is expensive.
 */
void
intel_mark_block(struct drm_device * dev, struct drm_mem *p, int in_use)
{
	drm_i915_private_t	*dev_priv = dev->dev_private;
	drm_i915_sarea_t 	*sarea_priv = dev_priv->sarea_priv;
	struct drm_tex_region 	*list;
	unsigned		 shift, nr, start, end, i;
	int			 age;

	shift = dev_priv->tex_lru_log_granularity;
	nr = I915_NR_TEX_REGIONS;

	start = p->start >> shift;
	end = (p->start + p->size - 1) >> shift;

	age = ++sarea_priv->texAge;
	list = sarea_priv->texList;

	/* Mark the regions with the new flag and update their age.  Move
	 * them to head of list to preserve LRU semantics.
	 */
	for (i = start; i <= end; i++) {
		list[i].in_use = in_use;
		list[i].age = age;

		/* remove_from_list(i)
		 */
		list[(unsigned)list[i].next].prev = list[i].prev;
		list[(unsigned)list[i].prev].next = list[i].next;

		/* insert_at_head(list, i)
		 */
		list[i].prev = nr;
		list[i].next = list[nr].next;
		list[(unsigned)list[nr].next].prev = i;
		list[nr].next = i;
	}
}

/* Free all blocks associated with the releasing file.
 */
void
i915_mem_release(struct drm_device * dev, struct drm_file *file_priv,
    struct drm_heap *heap)
{
	struct drm_mem	*p, *q;

	if (heap == NULL || TAILQ_EMPTY(heap))
		return;

	TAILQ_FOREACH(p, heap, link) {
		if (p->file_priv == file_priv) {
			intel_mark_block(dev, p, 0);
			p->file_priv = NULL;
		}
	}

	/* Coalesce the entries.  ugh... */
	for (p = TAILQ_FIRST(heap); p != TAILQ_END(heap); p = q) {
		while (p->file_priv == NULL &&
		    (q = TAILQ_NEXT(p, link)) != TAILQ_END(heap) &&
		    q->file_priv == NULL) {
			p->size += q->size;
			TAILQ_REMOVE(heap, q, link);
			drm_free(q);
		}
		q = TAILQ_NEXT(p, link);
	}
}

/* Shutdown.
 */
void
i915_mem_takedown(struct drm_heap *heap)
{
	struct drm_mem	*p;

	if (heap == NULL)
		return;

	while ((p = TAILQ_FIRST(heap)) != NULL) {
		TAILQ_REMOVE(heap, p, link);
		drm_free(p);
	}
}

struct drm_heap *
intel_get_heap(drm_i915_private_t * dev_priv, int region)
{
	switch (region) {
	case I915_MEM_REGION_AGP:
		return (&dev_priv->agp_heap);
	default:
		return (NULL);
	}
}

/* IOCTL HANDLERS */

int i915_mem_alloc(struct drm_device *dev, void *data,
		   struct drm_file *file_priv)
{
	drm_i915_private_t	*dev_priv = dev->dev_private;
	drm_i915_mem_alloc_t	*alloc = data;
	struct drm_heap		*heap;
	struct drm_mem		*block;

	if (dev_priv == NULL) {
		DRM_ERROR("called with no initialization\n");
		return (EINVAL);
	}

	heap = intel_get_heap(dev_priv, alloc->region);
	if (heap == NULL)
		return (EFAULT);

	/* Make things easier on ourselves: all allocations at least
	 * 4k aligned.
	 */
	if (alloc->alignment < 12)
		alloc->alignment = 12;

	block = drm_alloc_block(heap, alloc->size, alloc->alignment, file_priv);

	if (block == NULL)
		return (ENOMEM);

	intel_mark_block(dev, block, 1);

	if (DRM_COPY_TO_USER(alloc->region_offset, &block->start,
			     sizeof(int))) {
		DRM_ERROR("copy_to_user\n");
		return (EFAULT);
	}

	return (0);
}

int
i915_mem_free(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	drm_i915_private_t	*dev_priv = dev->dev_private;
	drm_i915_mem_free_t	*memfree = data;
	struct drm_heap		*heap;
	struct drm_mem		*block;

	if (dev_priv == NULL) {
		DRM_ERROR("called with no initialization\n");
		return (EINVAL);
	}

	heap = intel_get_heap(dev_priv, memfree->region);
	if (heap == NULL)
		return (EFAULT);

	block = drm_find_block(heap, memfree->region_offset);
	if (block == NULL)
		return (EFAULT);

	if (block->file_priv != file_priv)
		return (EPERM);

	intel_mark_block(dev, block, 0);
	drm_free_block(heap, block);

	return (0);
}

int
i915_mem_init_heap(struct drm_device *dev, void *data,
    struct drm_file *file_priv)
{
	drm_i915_private_t		*dev_priv = dev->dev_private;
	drm_i915_mem_init_heap_t	*initheap = data;
	struct drm_heap			*heap;

	if (dev_priv == NULL) {
		DRM_ERROR("called with no initialization\n");
		return (EINVAL);
	}

	/* Make sure it's valid and initialised */
	heap = intel_get_heap(dev_priv, initheap->region);
	if (heap == NULL || !TAILQ_EMPTY(heap))
		return (EFAULT);

	return (drm_init_heap(heap, initheap->start, initheap->size));
}

int
i915_mem_destroy_heap( struct drm_device *dev, void *data,
    struct drm_file *file_priv )
{
	drm_i915_private_t		*dev_priv = dev->dev_private;
	drm_i915_mem_destroy_heap_t	*destroyheap = data;
	struct drm_heap			*heap;

	if (dev_priv == NULL) {
		DRM_ERROR( "called with no initialization\n" );
		return (EINVAL);
	}

	heap = intel_get_heap( dev_priv, destroyheap->region );
	if (heap == NULL) {
		DRM_ERROR("intel_get_heap failed");
		return (EFAULT);
	}

	if (TAILQ_EMPTY(heap)) {
		DRM_ERROR("heap not initialized?");
		return (EFAULT);
	}

	i915_mem_takedown(heap);
	return (0);
}
@


1.7
log
@The drm_* allocation functions have been #defined to not use most of
their arguments for a while. Actually go through the code and remove the
extraneous arguments. Makes things easier to read.
@
text
@@


1.6
log
@Fix slight logic error in a previous commit.
@
text
@d113 1
a113 1
			drm_free(q, sizeof(*q), DRM_MEM_DRIVER);
d131 1
a131 1
		drm_free(p, sizeof(*p), DRM_MEM_BUFLISTS);
@


1.5
log
@KNF, no change to behaviour.
@
text
@a107 1
		q = p;
d115 1
@


1.4
log
@Merge the static block allocation code from {i915,radeon}_mem.c into
non-static code that's shared between both.  While i'm here convert them
to TAILQ.

Eventually, both of these will die, but until then I'd rather shave the
space in the kernel.

Tested on radeon and intel.
@
text
@d52 5
a56 8
	drm_i915_private_t *dev_priv = dev->dev_private;
	drm_i915_sarea_t *sarea_priv = dev_priv->sarea_priv;
	struct drm_tex_region *list;
	unsigned shift, nr;
	unsigned start;
	unsigned end;
	unsigned i;
	int age;
d90 3
a92 2
void i915_mem_release(struct drm_device * dev, struct drm_file *file_priv,
		      struct drm_heap *heap)
d94 1
a94 1
	struct drm_mem *p, *q;
d121 2
a122 1
void i915_mem_takedown(struct drm_heap *heap)
d124 1
a124 1
	struct drm_mem *p;
d140 1
a140 1
		return &dev_priv->agp_heap;
d142 1
a142 1
		return NULL;
d151 4
a154 4
	drm_i915_private_t *dev_priv = dev->dev_private;
	drm_i915_mem_alloc_t *alloc = data;
	struct drm_heap	*heap;
	struct drm_mem *block;
d156 1
a156 1
	if (!dev_priv) {
d158 1
a158 1
		return EINVAL;
d163 1
a163 1
		return EFAULT;
d174 1
a174 1
		return ENOMEM;
d181 1
a181 1
		return EFAULT;
d184 1
a184 1
	return 0;
d187 2
a188 2
int i915_mem_free(struct drm_device *dev, void *data,
		  struct drm_file *file_priv)
d190 4
a193 4
	drm_i915_private_t *dev_priv = dev->dev_private;
	drm_i915_mem_free_t *memfree = data;
	struct drm_heap	*heap;
	struct drm_mem *block;
d195 1
a195 1
	if (!dev_priv) {
d197 1
a197 1
		return EINVAL;
d202 1
a202 1
		return EFAULT;
d206 1
a206 1
		return EFAULT;
d209 1
a209 1
		return EPERM;
d213 2
a214 1
	return 0;
d217 3
a219 2
int i915_mem_init_heap(struct drm_device *dev, void *data,
		       struct drm_file *file_priv)
d221 3
a223 3
	drm_i915_private_t *dev_priv = dev->dev_private;
	drm_i915_mem_init_heap_t *initheap = data;
	struct drm_heap *heap;
d225 1
a225 1
	if (!dev_priv) {
d227 1
a227 1
		return EINVAL;
d233 1
a233 1
		return EFAULT;
d235 1
a235 1
	return drm_init_heap(heap, initheap->start, initheap->size);
d238 3
a240 2
int i915_mem_destroy_heap( struct drm_device *dev, void *data,
			   struct drm_file *file_priv )
d242 3
a244 3
	drm_i915_private_t *dev_priv = dev->dev_private;
	drm_i915_mem_destroy_heap_t *destroyheap = data;
	struct drm_heap *heap;
d246 1
a246 1
	if (!dev_priv) {
d248 1
a248 1
		return EINVAL;
d252 1
a252 1
	if (!heap) {
d254 1
a254 1
		return EFAULT;
d259 1
a259 1
		return EFAULT;
d263 1
a263 1
	return 0;
@


1.3
log
@Kill the linux-ready negative return codes in ``shared'' code. We handle
them wrong in several cases that i've noticed and Merging when needed is
still fairly simple, anyway. This shaves another 500 bytes from an amd64
kernel due to not having to flip the sign on some things. It also stops
my eyes bleeding.

Tested by a few along with the last diff that went in.
@
text
@d34 3
d49 2
a50 1
static void mark_block(struct drm_device * dev, struct mem_block *p, int in_use)
a90 122
/* Very simple allocator for agp memory, working on a static range
 * already mapped into each client's address space.
 */

static struct mem_block *split_block(struct mem_block *p, int start, int size,
				     struct drm_file *file_priv)
{
	/* Maybe cut off the start of an existing block */
	if (start > p->start) {
		struct mem_block *newblock =
		    drm_alloc(sizeof(*newblock), DRM_MEM_BUFLISTS);
		if (!newblock)
			goto out;
		newblock->start = start;
		newblock->size = p->size - (start - p->start);
		newblock->file_priv = NULL;
		newblock->next = p->next;
		newblock->prev = p;
		p->next->prev = newblock;
		p->next = newblock;
		p->size -= newblock->size;
		p = newblock;
	}

	/* Maybe cut off the end of an existing block */
	if (size < p->size) {
		struct mem_block *newblock =
		    drm_alloc(sizeof(*newblock), DRM_MEM_BUFLISTS);
		if (!newblock)
			goto out;
		newblock->start = start + size;
		newblock->size = p->size - size;
		newblock->file_priv = NULL;
		newblock->next = p->next;
		newblock->prev = p;
		p->next->prev = newblock;
		p->next = newblock;
		p->size = size;
	}

      out:
	/* Our block is in the middle */
	p->file_priv = file_priv;
	return p;
}

static struct mem_block *alloc_block(struct mem_block *heap, int size,
				     int align2, struct drm_file *file_priv)
{
	struct mem_block *p;
	int mask = (1 << align2) - 1;

	for (p = heap->next; p != heap; p = p->next) {
		int start = (p->start + mask) & ~mask;
		if (p->file_priv == NULL && start + size <= p->start + p->size)
			return split_block(p, start, size, file_priv);
	}

	return NULL;
}

static struct mem_block *find_block(struct mem_block *heap, int start)
{
	struct mem_block *p;

	for (p = heap->next; p != heap; p = p->next)
		if (p->start == start)
			return p;

	return NULL;
}

static void free_block(struct mem_block *p)
{
	p->file_priv = NULL;

	/* Assumes a single contiguous range.  Needs a special file_priv in
	 * 'heap' to stop it being subsumed.
	 */
	if (p->next->file_priv == NULL) {
		struct mem_block *q = p->next;
		p->size += q->size;
		p->next = q->next;
		p->next->prev = p;
		drm_free(q, sizeof(*q), DRM_MEM_BUFLISTS);
	}

	if (p->prev->file_priv == NULL) {
		struct mem_block *q = p->prev;
		q->size += p->size;
		q->next = p->next;
		q->next->prev = q;
		drm_free(p, sizeof(*q), DRM_MEM_BUFLISTS);
	}
}

/* Initialize.  How to check for an uninitialized heap?
 */
static int init_heap(struct mem_block **heap, int start, int size)
{
	struct mem_block *blocks = drm_alloc(sizeof(*blocks), DRM_MEM_BUFLISTS);

	if (!blocks)
		return ENOMEM;

	*heap = drm_alloc(sizeof(**heap), DRM_MEM_BUFLISTS);
	if (!*heap) {
		drm_free(blocks, sizeof(*blocks), DRM_MEM_BUFLISTS);
		return ENOMEM;
	}

	blocks->start = start;
	blocks->size = size;
	blocks->file_priv = NULL;
	blocks->next = blocks->prev = *heap;

	memset(*heap, 0, sizeof(**heap));
	(*heap)->file_priv = (struct drm_file *) - 1;
	(*heap)->next = (*heap)->prev = blocks;
	return 0;
}

d94 1
a94 1
		      struct mem_block *heap)
d96 1
a96 1
	struct mem_block *p;
d98 1
a98 1
	if (!heap || !heap->next)
d101 1
a101 1
	for (p = heap->next; p != heap; p = p->next) {
d103 1
a104 1
			mark_block(dev, p, 0);
d108 6
a113 6
	/* Assumes a single contiguous range.  Needs a special file_priv in
	 * 'heap' to stop it being subsumed.
	 */
	for (p = heap->next; p != heap; p = p->next) {
		while (p->file_priv == NULL && p->next->file_priv == NULL) {
			struct mem_block *q = p->next;
d115 2
a116 3
			p->next = q->next;
			p->next->prev = p;
			drm_free(q, sizeof(*q), DRM_MEM_BUFLISTS);
d123 1
a123 1
void i915_mem_takedown(struct mem_block **heap)
d125 1
a125 1
	struct mem_block *p;
d127 1
a127 1
	if (!*heap)
d130 3
a132 4
	for (p = (*heap)->next; p != *heap;) {
		struct mem_block *q = p;
		p = p->next;
		drm_free(q, sizeof(*q), DRM_MEM_BUFLISTS);
a133 3

	drm_free(*heap, sizeof(**heap), DRM_MEM_BUFLISTS);
	*heap = NULL;
d136 2
a137 1
static struct mem_block **get_heap(drm_i915_private_t * dev_priv, int region)
d154 2
a155 1
	struct mem_block *block, **heap;
d162 2
a163 2
	heap = get_heap(dev_priv, alloc->region);
	if (!heap || !*heap)
d172 1
a172 1
	block = alloc_block(*heap, alloc->size, alloc->alignment, file_priv);
d174 1
a174 1
	if (!block)
d177 1
a177 1
	mark_block(dev, block, 1);
d193 2
a194 1
	struct mem_block *block, **heap;
d201 2
a202 2
	heap = get_heap(dev_priv, memfree->region);
	if (!heap || !*heap)
d205 2
a206 2
	block = find_block(*heap, memfree->region_offset);
	if (!block)
d212 2
a213 2
	mark_block(dev, block, 0);
	free_block(block);
d222 1
a222 1
	struct mem_block **heap;
d229 3
a231 2
	heap = get_heap(dev_priv, initheap->region);
	if (!heap)
d234 1
a234 6
	if (*heap) {
		DRM_ERROR("heap already initialized?");
		return EFAULT;
	}

	return init_heap(heap, initheap->start, initheap->size);
d242 1
a242 1
	struct mem_block **heap;
d244 1
a244 1
	if ( !dev_priv ) {
d249 1
a249 1
	heap = get_heap( dev_priv, destroyheap->region );
d251 1
a251 1
		DRM_ERROR("get_heap failed");
d255 1
a255 1
	if (!*heap) {
d260 1
a260 1
	i915_mem_takedown( heap );
@


1.2
log
@Update to DRM git as of a few days ago. This mostly affects the
card-specific files with a few minor changes elsewhere.

The main change to the OpenBSD specific stuff is the change to the irq
api due to the vblank rework.

4 more large bugs known, I have a fix for one.

Tested by many.  prompted by deraadt@@.
@
text
@d190 1
a190 1
		return -ENOMEM;
d195 1
a195 1
		return -ENOMEM;
d280 1
a280 1
		return -EINVAL;
d285 1
a285 1
		return -EFAULT;
d296 1
a296 1
		return -ENOMEM;
d303 1
a303 1
		return -EFAULT;
d318 1
a318 1
		return -EINVAL;
d323 1
a323 1
		return -EFAULT;
d327 1
a327 1
		return -EFAULT;
d330 1
a330 1
		return -EPERM;
d346 1
a346 1
		return -EINVAL;
d351 1
a351 1
		return -EFAULT;
d355 1
a355 1
		return -EFAULT;
d370 1
a370 1
		return -EINVAL;
d376 1
a376 1
		return -EFAULT;
d381 1
a381 1
		return -EFAULT;
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d279 1
a279 1
		DRM_ERROR("%s called with no initialization\n", __FUNCTION__);
d317 1
a317 1
		DRM_ERROR("%s called with no initialization\n", __FUNCTION__);
d345 1
a345 1
		DRM_ERROR("%s called with no initialization\n", __FUNCTION__);
d369 1
a369 1
		DRM_ERROR( "%s called with no initialization\n", __FUNCTION__ );
@

