head	1.14;
access;
symbols
	OPENBSD_5_4:1.13.0.10
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.8
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.6
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.4
	OPENBSD_5_0:1.13.0.2
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.12.0.8
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.6
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.4
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.14
date	2013.08.12.04.11.52;	author jsg;	state dead;
branches;
next	1.13;

1.13
date	2011.06.02.18.22.00;	author weerd;	state Exp;
branches;
next	1.12;

1.12
date	2009.04.06.21.30.18;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2009.04.06.04.52.30;	author oga;	state Exp;
branches;
next	1.10;

1.10
date	2009.04.06.04.21.59;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2009.03.26.07.25.06;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2009.02.05.01.06.42;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2009.02.05.00.38.10;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2009.02.05.00.25.51;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.07.22.25.12;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.07.29.22.23.51;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.07.29.19.44.13;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.11.09.33.01;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Add a port of the TTM and Radeon DRM code from Linux 3.8.13.
Includes kernel modesetting, framebuffer console and support
for newer hardware.

Firmware needs to be present for acceleration and in some cases
modesetting to work.  It can be installed via fw_update
or manually via pkg_add.

With lots of help from kettenis@@ some macppc bits from mpi@@
and some ttm refcount/queue bits from FreeBSD.

Thanks to M:Tier and the OpenBSD Foundation for sponsoring this work.
@
text
@/* $OpenBSD: radeon_mem.c,v 1.13 2011/06/02 18:22:00 weerd Exp $ */
/*
 * Copyright (C) The Weather Channel, Inc.  2002.  All Rights Reserved.
 *
 * The Weather Channel (TM) funded Tungsten Graphics to develop the
 * initial release of the Radeon 8500 driver under the XFree86 license.
 * This notice must be preserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Keith Whitwell <keith@@tungstengraphics.com>
 */

#include "drmP.h"
#include "drm.h"
#include "radeon_drm.h"
#include "radeon_drv.h"

struct drm_heap *radeon_get_heap(drm_radeon_private_t *, int);

/* IOCTL HANDLERS */

struct drm_heap *
radeon_get_heap(drm_radeon_private_t * dev_priv, int region)
{
	switch (region) {
	case RADEON_MEM_REGION_GART:
		return (&dev_priv->gart_heap);
	case RADEON_MEM_REGION_FB:
		return (&dev_priv->fb_heap);
	default:
		return (NULL);
	}
}

int
radeon_mem_alloc(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	drm_radeon_private_t	*dev_priv = dev->dev_private;
	drm_radeon_mem_alloc_t	*alloc = data;
	struct drm_heap		*heap;
	struct drm_mem		*block; 

	if (dev_priv == NULL) {
		DRM_ERROR("called with no initialization\n");
		return (EINVAL);
	}

	if ((heap = radeon_get_heap(dev_priv, alloc->region)) == NULL)
		return (EFAULT);

	/*
	 * Make things easier on ourselves: all allocations at least
	 * 4k aligned.
	 */
	if (alloc->alignment < 12)
		alloc->alignment = 12;

	if ((block = drm_alloc_block(heap, alloc->size, alloc->alignment,
	    file_priv)) == NULL)
		return (ENOMEM);

	return (copyout(&block->start, alloc->region_offset, sizeof(int)));
}

int
radeon_mem_free(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	drm_radeon_private_t	*dev_priv = dev->dev_private;
	drm_radeon_mem_free_t	*memfree = data;
	struct drm_heap		*heap;

	if (dev_priv == NULL) {
		DRM_ERROR("called with no initialization\n");
		return (EINVAL);
	}

	heap = radeon_get_heap(dev_priv, memfree->region);
	if (heap == NULL)
		return (EFAULT);

	return (drm_mem_free(heap, memfree->region_offset, file_priv));
}

int
radeon_mem_init_heap(struct drm_device *dev, void *data,
    struct drm_file *file_priv)
{
	drm_radeon_private_t		*dev_priv = dev->dev_private;
	drm_radeon_mem_init_heap_t	*initheap = data;
	struct drm_heap			*heap;

	if (dev_priv == NULL) {
		DRM_ERROR("called with no initialization\n");
		return (EINVAL);
	}

	/* Make sure it's valid and initialised */
	if ((heap = radeon_get_heap(dev_priv, initheap->region)) == NULL)
                return (EFAULT);

	return (drm_init_heap(heap, initheap->start, initheap->size));
}
@


1.13
log
@Add $OpenBSD$ after oga said 'go ahead and fix that'

'go for it' oga@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.12
log
@factor a bit more functionality into common code instead of repeating it
in both drivers.
@
text
@d1 1
@


1.11
log
@extra or missing blank lines.
@
text
@d66 1
a66 2
	heap = radeon_get_heap(dev_priv, alloc->region);
	if (heap == NULL)
d76 2
a77 3
	block = drm_alloc_block(heap, alloc->size, alloc->alignment, file_priv);

	if (block == NULL)
d80 1
a80 4
	if (DRM_COPY_TO_USER(alloc->region_offset, &block->start, sizeof(int)))
		return (EFAULT);

	return 0;
a88 1
	struct drm_mem		*block;
d99 1
a99 9
	block = drm_find_block(heap, memfree->region_offset);
	if (block == NULL)
		return (EFAULT);

	if (block->file_priv != file_priv)
		return (EPERM);

	drm_free_block(heap, block);
	return (0);
d116 1
a116 2
	heap = radeon_get_heap(dev_priv, initheap->region);
	if (heap == NULL || !TAILQ_EMPTY(heap))
@


1.10
log
@merge radeon_mem_release() and radeon_mem_takedown() into the drm_heap
interface as drm_mem_release() and drm_mem_takedown() respectively.

While this interface's days are numbered, I'm about to make another
driver use it to remove even worse code.

Roll on memory management...
@
text
@a37 1

@


1.9
log
@The drm_* allocation functions have been #defined to not use most of
their arguments for a while. Actually go through the code and remove the
extraneous arguments. Makes things easier to read.
@
text
@a37 43
/* Free all blocks associated with the releasing file.
 */
void
radeon_mem_release(struct drm_file *file_priv, struct drm_heap *heap)
{
	struct drm_mem	*p, *q;

	if (heap == NULL || TAILQ_EMPTY(heap))
		return;

	TAILQ_FOREACH(p, heap, link) {
		if (p->file_priv == file_priv)
			p->file_priv = NULL;
	}

	/* Coalesce the entries.  ugh... */
	for (p = TAILQ_FIRST(heap); p != TAILQ_END(heap); p = q) {
		while (p->file_priv == NULL &&
		    (q = TAILQ_NEXT(p, link)) != TAILQ_END(heap) &&
		    q->file_priv == NULL) {
			p->size += q->size;
			TAILQ_REMOVE(heap, q, link);
			drm_free(q);
		}
		q = TAILQ_NEXT(p, link);
	}
}

/* Shutdown.
 */
void
radeon_mem_takedown(struct drm_heap *heap)
{
	struct drm_mem	*p;

	if (heap == NULL)
		return;

	while ((p = TAILQ_FIRST(heap)) != NULL) {
		TAILQ_REMOVE(heap, p, link);
		drm_free(p);
	}
}
@


1.8
log
@Fix slight logic error in a previous commit.
@
text
@d60 1
a60 1
			drm_free(q, sizeof(*q), DRM_MEM_DRIVER);
d78 1
a78 1
		drm_free(p, sizeof(*p), DRM_MEM_DRIVER);
@


1.7
log
@KNF, and remove a debug printf I missed.
@
text
@a54 1
		q = p;
d62 1
@


1.6
log
@Merge the static block allocation code from {i915,radeon}_mem.c into
non-static code that's shared between both.  While i'm here convert them
to TAILQ.

Eventually, both of these will die, but until then I'd rather shave the
space in the kernel.

Tested on radeon and intel.
@
text
@d43 1
a43 1
	struct drm_mem *p, *q;
d71 1
a71 1
	struct drm_mem *p;
d89 1
a89 1
		return &dev_priv->gart_heap;
d91 1
a91 1
		return &dev_priv->fb_heap;
d93 1
a93 1
		return NULL;
d102 2
a103 2
	struct drm_heap	*heap;
	struct drm_mem	*block; 
d105 1
a105 1
	if (!dev_priv) {
d107 1
a107 1
		return EINVAL;
d112 1
a112 1
		return EFAULT;
d114 2
a115 1
	/* Make things easier on ourselves: all allocations at least
d124 1
a124 1
		return ENOMEM;
d127 1
a127 1
		return EFAULT;
d135 4
a138 4
	drm_radeon_private_t *dev_priv = dev->dev_private;
	drm_radeon_mem_free_t *memfree = data;
	struct drm_heap	*heap;
	struct drm_mem *block;
d140 1
a140 1
	if (!dev_priv) {
d142 1
a142 1
		return EINVAL;
d147 1
a147 1
		return EFAULT;
d151 1
a151 1
		return EFAULT;
d154 1
a154 1
		return EPERM;
d157 1
a157 1
	return 0;
d164 3
a166 3
	drm_radeon_private_t *dev_priv = dev->dev_private;
	drm_radeon_mem_init_heap_t *initheap = data;
	struct drm_heap *heap;
d168 1
a168 1
	if (!dev_priv) {
d170 1
a170 1
		return EINVAL;
a172 3
	DRM_ERROR("region: %d start: %d size: %d\n", initheap->region,
	    initheap->start, initheap->size);

d176 1
a176 1
		return EFAULT;
d178 1
a178 1
	return drm_init_heap(heap, initheap->start, initheap->size);
@


1.5
log
@Kill the linux-ready negative return codes in ``shared'' code. We handle
them wrong in several cases that i've noticed and Merging when needed is
still fairly simple, anyway. This shaves another 500 bytes from an amd64
kernel due to not having to flip the sign on some things. It also stops
my eyes bleeding.

Tested by a few along with the last diff that went in.
@
text
@a0 1
/* radeon_mem.c -- Simple GART/fb memory manager for radeon -*- linux-c -*- */
d36 1
a36 120
/* Very simple allocator for GART memory, working on a static range
 * already mapped into each client's address space.
 */

static struct mem_block *split_block(struct mem_block *p, int start, int size,
				     struct drm_file *file_priv)
{
	/* Maybe cut off the start of an existing block */
	if (start > p->start) {
		struct mem_block *newblock =
		    drm_alloc(sizeof(*newblock), DRM_MEM_BUFS);
		if (!newblock)
			goto out;
		newblock->start = start;
		newblock->size = p->size - (start - p->start);
		newblock->file_priv = NULL;
		newblock->next = p->next;
		newblock->prev = p;
		p->next->prev = newblock;
		p->next = newblock;
		p->size -= newblock->size;
		p = newblock;
	}

	/* Maybe cut off the end of an existing block */
	if (size < p->size) {
		struct mem_block *newblock =
		    drm_alloc(sizeof(*newblock), DRM_MEM_BUFS);
		if (!newblock)
			goto out;
		newblock->start = start + size;
		newblock->size = p->size - size;
		newblock->file_priv = NULL;
		newblock->next = p->next;
		newblock->prev = p;
		p->next->prev = newblock;
		p->next = newblock;
		p->size = size;
	}

      out:
	/* Our block is in the middle */
	p->file_priv = file_priv;
	return p;
}

static struct mem_block *alloc_block(struct mem_block *heap, int size,
				     int align2, struct drm_file *file_priv)
{
	struct mem_block *p;
	int mask = (1 << align2) - 1;

	list_for_each(p, heap) {
		int start = (p->start + mask) & ~mask;
		if (p->file_priv == NULL && start + size <= p->start + p->size)
			return split_block(p, start, size, file_priv);
	}

	return NULL;
}

static struct mem_block *find_block(struct mem_block *heap, int start)
{
	struct mem_block *p;

	list_for_each(p, heap)
		if (p->start == start)
			return p;

	return NULL;
}

static void free_block(struct mem_block *p)
{
	p->file_priv = NULL;

	/* Assumes a single contiguous range.  Needs a special file_priv in
	 * 'heap' to stop it being subsumed.
	 */
	if (p->next->file_priv == NULL) {
		struct mem_block *q = p->next;
		p->size += q->size;
		p->next = q->next;
		p->next->prev = p;
		drm_free(q, sizeof(*q), DRM_MEM_BUFS);
	}

	if (p->prev->file_priv == NULL) {
		struct mem_block *q = p->prev;
		q->size += p->size;
		q->next = p->next;
		q->next->prev = q;
		drm_free(p, sizeof(*q), DRM_MEM_BUFS);
	}
}

/* Initialize.  How to check for an uninitialized heap?
 */
static int init_heap(struct mem_block **heap, int start, int size)
{
	struct mem_block *blocks = drm_alloc(sizeof(*blocks), DRM_MEM_BUFS);

	if (!blocks)
		return ENOMEM;

	*heap = drm_calloc(1, sizeof(**heap), DRM_MEM_BUFS);
	if (!*heap) {
		drm_free(blocks, sizeof(*blocks), DRM_MEM_BUFS);
		return ENOMEM;
	}

	blocks->start = start;
	blocks->size = size;
	blocks->file_priv = NULL;
	blocks->next = blocks->prev = *heap;

	(*heap)->file_priv = (struct drm_file *) - 1;
	(*heap)->next = (*heap)->prev = blocks;
	return 0;
}
d40 2
a41 1
void radeon_mem_release(struct drm_file *file_priv, struct mem_block *heap)
d43 1
a43 1
	struct mem_block *p;
d45 1
a45 1
	if (!heap || !heap->next)
d48 1
a48 1
	list_for_each(p, heap) {
d53 6
a58 6
	/* Assumes a single contiguous range.  Needs a special file_priv in
	 * 'heap' to stop it being subsumed.
	 */
	list_for_each(p, heap) {
		while (p->file_priv == NULL && p->next->file_priv == NULL) {
			struct mem_block *q = p->next;
d60 1
a60 2
			p->next = q->next;
			p->next->prev = p;
d68 2
a69 1
void radeon_mem_takedown(struct mem_block **heap)
d71 1
a71 1
	struct mem_block *p;
d73 1
a73 1
	if (!*heap)
d76 3
a78 4
	for (p = (*heap)->next; p != *heap;) {
		struct mem_block *q = p;
		p = p->next;
		drm_free(q, sizeof(*q), DRM_MEM_DRIVER);
a79 3

	drm_free(*heap, sizeof(**heap), DRM_MEM_DRIVER);
	*heap = NULL;
d84 2
a85 1
static struct mem_block **get_heap(drm_radeon_private_t * dev_priv, int region)
d97 2
a98 1
int radeon_mem_alloc(struct drm_device *dev, void *data, struct drm_file *file_priv)
d100 4
a103 3
	drm_radeon_private_t *dev_priv = dev->dev_private;
	drm_radeon_mem_alloc_t *alloc = data;
	struct mem_block *block, **heap;
d110 2
a111 2
	heap = get_heap(dev_priv, alloc->region);
	if (!heap || !*heap)
d120 1
a120 1
	block = alloc_block(*heap, alloc->size, alloc->alignment, file_priv);
d122 1
a122 1
	if (!block)
d125 1
a125 3
	if (DRM_COPY_TO_USER(alloc->region_offset, &block->start,
			     sizeof(int))) {
		DRM_ERROR("copy_to_user\n");
a126 1
	}
d131 2
a132 1
int radeon_mem_free(struct drm_device *dev, void *data, struct drm_file *file_priv)
d136 2
a137 1
	struct mem_block *block, **heap;
d144 2
a145 2
	heap = get_heap(dev_priv, memfree->region);
	if (!heap || !*heap)
d148 2
a149 2
	block = find_block(*heap, memfree->region_offset);
	if (!block)
d155 1
a155 1
	free_block(block);
d159 3
a161 1
int radeon_mem_init_heap(struct drm_device *dev, void *data, struct drm_file *file_priv)
d165 1
a165 1
	struct mem_block **heap;
d172 2
a173 3
	heap = get_heap(dev_priv, initheap->region);
	if (!heap)
		return EFAULT;
d175 3
a177 2
	if (*heap) {
		DRM_ERROR("heap already initialized?");
a178 1
	}
d180 1
a180 1
	return init_heap(heap, initheap->start, initheap->size);
@


1.4
log
@Update to DRM git.

Some stability fixes for radeon. The most part of this diff is related
to fixing up the VBLANK (vertical blank interrupt) handling. Now, if the
X driver supports the DRM_IOCTL_MODESET_CTL ioctl, (to be used when
changing the video modes), then allow the vblank to be disabled once
that ioctl has been called. Otherwise, keep the interrupt enabled at all
time, since disabling it otherwise will lead to problems.

Tested by a few. "no problem" on API/ABI deraadt@@.
@
text
@d140 1
a140 1
		return -ENOMEM;
d145 1
a145 1
		return -ENOMEM;
d227 1
a227 1
		return -EINVAL;
d232 1
a232 1
		return -EFAULT;
d243 1
a243 1
		return -ENOMEM;
d248 1
a248 1
		return -EFAULT;
d262 1
a262 1
		return -EINVAL;
d267 1
a267 1
		return -EFAULT;
d271 1
a271 1
		return -EFAULT;
d274 1
a274 1
		return -EPERM;
d288 1
a288 1
		return -EINVAL;
d293 1
a293 1
		return -EFAULT;
d297 1
a297 1
		return -EFAULT;
@


1.3
log
@Switch all instances of malloc/free in the DRM to drm_alloc, drm_free
and drm_calloc.

With the recent change to check overflow in drm_calloc, this means that
all allocations that require multiplication are now checked. Also use
drm_calloc() when zeroing is needed and drop the bzero/memset
afterwards.  Finally, make drm_free() check for NULL, so we don't need
to do so every time.

ok miod@@, deraadt@@
@
text
@d91 1
a91 1
		if (p->file_priv == 0 && start + size <= p->start + p->size)
d116 1
a116 1
	if (p->next->file_priv == 0) {
d124 1
a124 1
	if (p->prev->file_priv == 0) {
d176 1
a176 1
		while (p->file_priv == 0 && p->next->file_priv == 0) {
@


1.2
log
@Update to DRM git as of a few days ago. This mostly affects the
card-specific files with a few minor changes elsewhere.

The main change to the OpenBSD specific stuff is the change to the irq
api due to the vblank rework.

4 more large bugs known, I have a fix for one.

Tested by many.  prompted by deraadt@@.
@
text
@d142 1
a142 1
	*heap = drm_alloc(sizeof(**heap), DRM_MEM_BUFS);
a152 1
	memset(*heap, 0, sizeof(**heap));
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d227 1
a227 1
		DRM_ERROR("%s called with no initialization\n", __FUNCTION__);
d262 1
a262 1
		DRM_ERROR("%s called with no initialization\n", __FUNCTION__);
d288 1
a288 1
		DRM_ERROR("%s called with no initialization\n", __FUNCTION__);
@

