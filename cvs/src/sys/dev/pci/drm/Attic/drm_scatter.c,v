head	1.16;
access;
symbols
	OPENBSD_5_5:1.15.0.14
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.10
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.8
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.6
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.4
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.14.0.8
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.6
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.4
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.16
date	2014.03.09.07.42.29;	author jsg;	state dead;
branches;
next	1.15;

1.15
date	2011.06.02.18.22.00;	author weerd;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.26.07.25.06;	author oga;	state Exp;
branches;
next	1.13;

1.13
date	2009.02.15.20.03.19;	author oga;	state Exp;
branches;
next	1.12;

1.12
date	2008.11.23.22.56.02;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.02.01.12.04;	author oga;	state Exp;
branches;
next	1.10;

1.10
date	2008.08.16.01.53.05;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2008.08.13.20.45.42;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2008.07.29.19.44.13;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.30.22.36.22;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.26.19.33.19;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.26.16.42.48;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.12.19.14.53;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.06.19.24.56;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.16.01.02.31;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.16
log
@remove dri1 interfaces
discussed with kettenis some time last year
@
text
@/* $OpenBSD: drm_scatter.c,v 1.15 2011/06/02 18:22:00 weerd Exp $ */
/*-
 * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *   Gareth Hughes <gareth@@valinux.com>
 *   Eric Anholt <anholt@@FreeBSD.org>
 *
 */

/*
 * Allocation of memory for scatter-gather mappings by the graphics chip.
 *
 * The memory allocated here is then made into an aperture in the card
 * by drm_ati_pcigart_init().
 */
#include "drmP.h"

void
drm_sg_cleanup(struct drm_device *dev, struct drm_sg_mem *entry)
{
	if (entry == NULL)
		return;

	drm_dmamem_free(dev->dmat, entry->mem);
	drm_free(entry);
}

int
drm_sg_alloc(struct drm_device * dev, struct drm_scatter_gather *request)
{
	struct drm_sg_mem	*entry;
	bus_size_t		 size;
	unsigned long		 pages;

	if (dev->sg != NULL)
		return (EINVAL);

	entry = drm_calloc(1, sizeof(*entry));
        if (entry == NULL)
                return (ENOMEM);

	pages = round_page(request->size) / PAGE_SIZE;
	size = pages << PAGE_SHIFT;

	DRM_DEBUG("sg size=%ld pages=%ld\n", request->size, pages);

	if ((entry->mem = drm_dmamem_alloc(dev->dmat, size, PAGE_SIZE, pages,
	    PAGE_SIZE, 0, 0)) == NULL)
		return (ENOMEM);

	request->handle = entry->handle = (unsigned long)entry->mem->kva;
	DRM_DEBUG("sg alloc handle  = %08lx\n", entry->handle);

	DRM_LOCK();
	if (dev->sg) {
		DRM_UNLOCK();
		drm_sg_cleanup(dev, entry);
		return EINVAL;
	}
	dev->sg = entry;
	DRM_UNLOCK();

	return (0);
}

int
drm_sg_alloc_ioctl(struct drm_device *dev, void *data,
    struct drm_file *file_priv)
{
	struct drm_scatter_gather	*request = data;
	int				 ret;

	DRM_DEBUG("\n");

	ret = drm_sg_alloc(dev, request);
	return ret;
}

int
drm_sg_free(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	struct drm_scatter_gather	*request = data;
	struct drm_sg_mem		*entry;

	DRM_LOCK();
	entry = dev->sg;
	dev->sg = NULL;
	DRM_UNLOCK();

	if (entry == NULL || entry->handle != request->handle)
		return EINVAL;

	DRM_DEBUG("sg free virtual  = 0x%lx\n", entry->handle);

	drm_sg_cleanup(dev, entry);

	return 0;
}
@


1.15
log
@Add $OpenBSD$ after oga said 'go ahead and fix that'

'go for it' oga@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.14
log
@The drm_* allocation functions have been #defined to not use most of
their arguments for a while. Actually go through the code and remove the
extraneous arguments. Makes things easier to read.
@
text
@d1 1
@


1.13
log
@convert drm_scatter code over to using the new dmamem api.

removes the custom code in there, so shrinks the kernel by a few bytes.
Convert other code to deal with data structure changes.
@
text
@d45 1
a45 1
	drm_free(entry, sizeof(entry), DRM_MEM_SGLISTS);
d58 1
a58 1
	entry = drm_calloc(1, sizeof(*entry), DRM_MEM_SGLISTS);
@


1.12
log
@pass in the dmat when we attach the drm driver. reduces pci dependancy.
@
text
@a37 3
struct drm_sg_dmamem	*drm_sg_dmamem_alloc(bus_dma_tag_t, size_t);
void			 drm_sg_dmamem_free(struct drm_sg_dmamem *);

d39 1
a39 1
drm_sg_cleanup(drm_sg_mem_t *entry)
d41 5
a45 7
	if (entry != NULL) {
		if (entry->mem != NULL)
			drm_sg_dmamem_free(entry->mem);
		drm_free(entry->busaddr,
		    sizeof(*entry->busaddr) * entry->pages, DRM_MEM_SGLISTS);
		drm_free(entry, sizeof(entry), DRM_MEM_SGLISTS);
	}
d51 3
a53 3
	drm_sg_mem_t	*entry;
	unsigned long	 pages;
	int		 i;
d56 1
a56 1
		return EINVAL;
d60 1
a60 1
                return ENOMEM;
d63 2
d67 3
a69 18
	entry->pages = pages;

	entry->busaddr = drm_calloc(pages, sizeof(*entry->busaddr),
	    DRM_MEM_SGLISTS);
	if (entry->busaddr == NULL) {
		drm_sg_cleanup(entry);
		return ENOMEM;
	}

	if ((entry->mem = drm_sg_dmamem_alloc(dev->dmat, pages)) == NULL) {
		drm_sg_cleanup(entry);
		return ENOMEM;
	}

	entry->handle = (unsigned long)entry->mem->sg_kva;

	for (i = 0; i < pages; i++) 
		entry->busaddr[i] = entry->mem->sg_map->dm_segs[i].ds_addr;
d71 1
a73 3
	entry->virtual = (void *)entry->handle;
	request->handle = entry->handle;

d77 1
a77 1
		drm_sg_cleanup(entry);
d83 1
a83 1
	return 0;
d103 1
a103 1
	drm_sg_mem_t			*entry;
d115 1
a115 1
	drm_sg_cleanup(entry);
a117 70
}

/*
 * allocate `pages' pages of dma memory for use in
 * scatter/gather
 */
struct drm_sg_dmamem*
drm_sg_dmamem_alloc(bus_dma_tag_t dmat, size_t pages)
{
	struct drm_sg_dmamem	*dsd = NULL;
	bus_size_t	  	 size = pages << PAGE_SHIFT;
	int			 ret = 0;

	dsd = drm_calloc(1, sizeof(*dsd), DRM_MEM_SGLISTS);
	if (dsd == NULL)
		return (NULL);

	dsd->sg_segs = drm_calloc(pages, sizeof(*dsd->sg_segs),
	    DRM_MEM_SGLISTS);
	if (dsd->sg_segs == NULL)
		goto dsdfree;

	dsd->sg_tag = dmat;
	dsd->sg_size = size;

	if (bus_dmamap_create(dmat, size, pages, PAGE_SIZE, 0,
	    BUS_DMA_NOWAIT | BUS_DMA_ALLOCNOW, &dsd->sg_map) != 0)
		goto segsfree;

	if ((ret = bus_dmamem_alloc(dmat, size, PAGE_SIZE, 0,
	    dsd->sg_segs, pages, &dsd->sg_nsegs, BUS_DMA_NOWAIT)) != 0)
		goto destroy;

	if (bus_dmamem_map(dmat, dsd->sg_segs, dsd->sg_nsegs, size, 
	    &dsd->sg_kva, BUS_DMA_NOWAIT) != 0)
		goto free;

	if (bus_dmamap_load(dmat, dsd->sg_map, dsd->sg_kva, size,
	    NULL, BUS_DMA_NOWAIT) != 0)
		goto unmap;

	bzero(dsd->sg_kva, size);

	return (dsd);

unmap:
	bus_dmamem_unmap(dmat, dsd->sg_kva, size);
free:
	bus_dmamem_free(dmat, dsd->sg_segs, dsd->sg_nsegs);
destroy:
	bus_dmamap_destroy(dmat, dsd->sg_map);
segsfree:
	drm_free(dsd->sg_segs, sizeof(*dsd->sg_segs) * pages, DRM_MEM_SGLISTS);

dsdfree:
	drm_free(dsd, sizeof(*dsd), DRM_MEM_SGLISTS);

	return (NULL);
}

void
drm_sg_dmamem_free(struct drm_sg_dmamem *mem)
{
	bus_dmamap_unload(mem->sg_tag, mem->sg_map);
	bus_dmamem_unmap(mem->sg_tag, mem->sg_kva, mem->sg_size);
	bus_dmamem_free(mem->sg_tag, mem->sg_segs, mem->sg_nsegs);
	bus_dmamap_destroy(mem->sg_tag, mem->sg_map);
	drm_free(mem->sg_segs, sizeof(*mem->sg_segs) *
	    (mem->sg_size >> PAGE_SHIFT), DRM_MEM_SGLISTS);
	drm_free(mem, sizeof(*mem), DRM_MEM_SGLISTS);
@


1.11
log
@detypedef some more. No functional change.
@
text
@d38 1
a38 1
struct drm_sg_dmamem	*drm_sg_dmamem_alloc(struct drm_device *, size_t);
d79 1
a79 1
	if ((entry->mem = drm_sg_dmamem_alloc(dev, pages)) == NULL) {
d145 1
a145 1
drm_sg_dmamem_alloc(struct drm_device *dev, size_t pages)
d160 1
a160 1
	dsd->sg_tag = dev->pa.pa_dmat;
d163 1
a163 1
	if (bus_dmamap_create(dev->pa.pa_dmat, size, pages, PAGE_SIZE, 0,
d167 1
a167 1
	if ((ret = bus_dmamem_alloc(dev->pa.pa_dmat, size, PAGE_SIZE, 0,
d171 1
a171 1
	if (bus_dmamem_map(dev->pa.pa_dmat, dsd->sg_segs, dsd->sg_nsegs, size, 
d175 1
a175 1
	if (bus_dmamap_load(dev->pa.pa_dmat, dsd->sg_map, dsd->sg_kva, size,
d184 1
a184 1
	bus_dmamem_unmap(dev->pa.pa_dmat, dsd->sg_kva, size);
d186 1
a186 1
	bus_dmamem_free(dev->pa.pa_dmat, dsd->sg_segs, dsd->sg_nsegs);
d188 1
a188 1
	bus_dmamap_destroy(dev->pa.pa_dmat, dsd->sg_map);
@


1.10
log
@Apply a light paddling with the knf stick. No binary change.
@
text
@d54 1
a54 1
drm_sg_alloc(struct drm_device * dev, drm_scatter_gather_t * request)
d56 3
a58 3
	drm_sg_mem_t *entry;
	unsigned long pages;
	int i;
d110 2
a111 2
	drm_scatter_gather_t *request = data;
	int ret;
d122 2
a123 2
	drm_scatter_gather_t *request = data;
	drm_sg_mem_t *entry;
@


1.9
log
@Check for zero in drm_calloc() to prevent divide-by-zero. Also rearrange
the two calls to drm_calloc() that had nmemb and size the wrong way
around.
@
text
@d30 1
a30 1
/** @@file drm_scatter.c
d39 1
a39 1
void	drm_sg_dmamem_free(struct drm_sg_dmamem *);
d60 1
a60 1
	if ( dev->sg )
d64 1
a64 1
        if ( !entry )
d68 1
a68 1
	DRM_DEBUG( "sg size=%ld pages=%ld\n", request->size, pages );
d74 1
a74 1
	if ( !entry->busaddr ) {
d89 1
a89 1
	DRM_DEBUG( "sg alloc handle  = %08lx\n", entry->handle );
d113 1
a113 1
	DRM_DEBUG( "%s\n", __FUNCTION__ );
d130 1
a130 1
	if ( !entry || entry->handle != request->handle )
d133 1
a133 1
	DRM_DEBUG( "sg free virtual  = 0x%lx\n", entry->handle );
d168 1
a168 2
	    dsd->sg_segs, pages, &dsd->sg_nsegs, BUS_DMA_NOWAIT)) != 0) {
		printf("alloc failed, value= %d\n",ret);
a169 1
	}
@


1.8
log
@Switch all instances of malloc/free in the DRM to drm_alloc, drm_free
and drm_calloc.

With the recent change to check overflow in drm_calloc, this means that
all allocations that require multiplication are now checked. Also use
drm_calloc() when zeroing is needed and drop the bzero/memset
afterwards.  Finally, make drm_free() check for NULL, so we don't need
to do so every time.

ok miod@@, deraadt@@
@
text
@d155 1
a155 1
	dsd->sg_segs = drm_calloc(sizeof(*dsd->sg_segs), pages,
@


1.7
log
@Don't try to free a non-malloced address. Somehow this bit of code escaped
deletion when i killed the ifdefs around it.

Problem noticed by Jason Meltzer and ckuethe@@, thanks!
@
text
@d44 2
a45 2
	if (entry) {
		if (entry->mem)
d47 3
a49 3
		if (entry->busaddr)
			free(entry->busaddr, M_DRM);
		free(entry, M_DRM);
d63 3
a65 3
	entry = malloc(sizeof(*entry), M_DRM, M_WAITOK | M_ZERO);
	if ( !entry )
		return ENOMEM;
d72 2
a73 2
	entry->busaddr = malloc(pages * sizeof(*entry->busaddr), M_DRM,
	    M_WAITOK | M_ZERO);
d151 1
a151 1
	dsd = malloc(sizeof(*dsd), M_DRM, M_NOWAIT | M_ZERO);
d155 2
a156 2
	dsd->sg_segs = malloc(sizeof(*dsd->sg_segs) * pages, M_DRM,
	    M_NOWAIT | M_ZERO);
d192 1
a192 1
	free(dsd->sg_segs, M_DRM);
d195 1
a195 1
	free(dsd, M_DRM);
d207 3
a209 2
	free(mem->sg_segs, M_DRM);
	free(mem, M_DRM);
@


1.6
log
@Kill the silly ``drm_device_t'' and ``drm_file_t'' typedefs. just use
``struct drm_device'' and ``struct drm_file'' respectively. Since i'm
changing a lot of prototypes anyway, remove all parameter names from
prototypes, in accordance with style(9) (and sanity).
@
text
@a46 2
		if (entry->handle)
			free((void *)entry->handle, M_DRM);
@


1.5
log
@Kill the rest of the ifdef maze in drm_*.c

I was going to do this per file, but decided all it would achieve was
artificially increasing my commit count.

>Kill the ifdef maze. I've been considering doing this for months, it
>doesn't make getting changes to and  from upstream much easier, and just
>makes the code hard to read.
@
text
@d38 1
a38 1
struct drm_sg_dmamem	*drm_sg_dmamem_alloc(drm_device_t *, size_t);
d56 1
a56 1
drm_sg_alloc(drm_device_t * dev, drm_scatter_gather_t * request)
d109 2
a110 1
drm_sg_alloc_ioctl(drm_device_t *dev, void *data, struct drm_file *file_priv)
d122 1
a122 1
drm_sg_free(drm_device_t *dev, void *data, struct drm_file *file_priv)
d147 1
a147 1
drm_sg_dmamem_alloc(drm_device_t *dev, size_t pages)
@


1.4
log
@The mmap offsets for memory buffers currently are the kernel virtual
address.  This is just plain wrong. scatter/gather on amd64 didn't work
here, since char device mmap doesn't take negative offsets so higher
kvas fail.

Instead, prematurely import drm_memrange which is needed for the memory
managers (GEM or TTM), and is used to manage GART space. Then, horribly
abuse it to allocate mmap offsets, fixes up the issues.

"just commit it" art@@.
@
text
@a37 1
#define DEBUG_SCATTER 0
a44 1
#ifdef __OpenBSD__
a46 1
#else
a48 1
#endif
a80 1
#ifdef __OpenBSD__
a89 12
#else
	entry->handle = (long)malloc(pages << PAGE_SHIFT, M_DRM,
	    M_WAITOK | M_ZERO);
	if (entry->handle == NULL) {
		drm_sg_cleanup(entry);
		return ENOMEM;
	}

	for (i = 0; i < pages; i++) {
		entry->busaddr[i] = vtophys(entry->handle + i * PAGE_SIZE);
	}
#endif
@


1.3
log
@Kill vtophys in drm.

The code we inherited from FreeBSD used vtophys is a fair few places,
nuke that and replace with bus_dma. technically _DRM_SHM should be
managed with uao_create(), but until we move away from mmap and into an
ioctl to map, this will do.

This also paves the way for amd64 support (it lacks vtophys).

ok kettenis, miod looked at it a while back too.
@
text
@a168 2
	printf("size = %d\n", size);

@


1.2
log
@destatic the static functions, they only make debugging harder.
While i'm here:
remove a couple of debug printfs that shouldn't have gone in anyway.
trowel on some KNF (I really need to get around to sending some of this upstream).
remove some netbsd specific code that netbsd doesn't have anymore.

ok tedu.
@
text
@d39 2
d45 12
a56 3
	free((void *)entry->handle, M_DRM);
	free(entry->busaddr, M_DRM);
	free(entry, M_DRM);
d85 11
d98 1
a98 1
	if (entry->handle == 0) {
d106 1
d156 73
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d40 2
a41 1
void drm_sg_cleanup(drm_sg_mem_t *entry)
d48 2
a49 1
int drm_sg_alloc(drm_device_t * dev, drm_scatter_gather_t * request)
d102 2
a103 1
int drm_sg_alloc_ioctl(drm_device_t *dev, void *data, struct drm_file *file_priv)
d114 2
a115 1
int drm_sg_free(drm_device_t *dev, void *data, struct drm_file *file_priv)
@

