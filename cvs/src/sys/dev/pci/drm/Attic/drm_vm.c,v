head	1.14;
access;
symbols
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.14
date	2009.01.29.11.44.04;	author oga;	state dead;
branches;
next	1.13;

1.13
date	2008.11.23.22.56.02;	author oga;	state Exp;
branches;
next	1.12;

1.12
date	2008.09.29.22.48.24;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.02.01.12.04;	author oga;	state Exp;
branches;
next	1.10;

1.10
date	2008.08.28.00.19.27;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.26.19.33.19;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.26.18.17.22;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.26.16.08.49;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.12.19.14.53;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.11.09.33.01;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.03.17.21.22;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.06.19.24.56;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.16.01.02.31;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Move drmmmap to the main driver file.  It's stupid to have a file with
one (not particlarly large) function in it.
@
text
@/*-
 * Copyright 2003 Eric Anholt
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * ERIC ANHOLT BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @@file drm_vm.c
 * Support code for mmaping of DRM maps.
 */

#include "drmP.h"
#include "drm.h"

paddr_t
drmmmap(dev_t kdev, off_t offset, int prot)
{
	struct drm_device	*dev = drm_get_device_from_kdev(kdev);
	drm_local_map_t		*map;
	struct drm_file		*priv;
	enum drm_map_type	 type;

	DRM_LOCK();
	priv = drm_find_file_by_minor(dev, minor(kdev));
	DRM_UNLOCK();
	if (priv == NULL) {
		DRM_ERROR("can't find authenticator\n");
		return (-1);
	}

	if (!priv->authenticated)
		return (-1);

	if (dev->dma && offset >= 0 && offset < ptoa(dev->dma->page_count)) {
		drm_device_dma_t *dma = dev->dma;

		DRM_SPINLOCK(&dev->dma_lock);

		if (dma->pagelist != NULL) {
			paddr_t phys = dma->pagelist[offset >> PAGE_SHIFT];

			DRM_SPINUNLOCK(&dev->dma_lock);
			return (atop(phys));
		} else {
			DRM_SPINUNLOCK(&dev->dma_lock);
			return (-1);
		}
	}

	/*
	 * A sequential search of a linked list is
 	 * fine here because: 1) there will only be
	 * about 5-10 entries in the list and, 2) a
	 * DRI client only has to do this mapping
	 * once, so it doesn't have to be optimized
	 * for performance, even if the list was a
	 * bit longer.
	 */
	DRM_LOCK();
	TAILQ_FOREACH(map, &dev->maplist, link) {
		if (offset >= map->ext &&
		    offset < map->ext + map->size) {
			offset -= map->ext;
			break;
		}
	}

	if (map == NULL) {
		DRM_UNLOCK();
		DRM_DEBUG("can't find map\n");
		return (-1);
	}
	if (((map->flags & _DRM_RESTRICTED) && priv->master == 0)) {
		DRM_UNLOCK();
		DRM_DEBUG("restricted map\n");
		return (-1);
	}
	type = map->type;
	DRM_UNLOCK();

	switch (type) {
	case _DRM_FRAME_BUFFER:
	case _DRM_REGISTERS:
	case _DRM_AGP:
		return (atop(offset + map->offset));
		break;
	/* XXX unify all the bus_dmamem_mmap bits */
	case _DRM_SCATTER_GATHER:
		return (bus_dmamem_mmap(dev->dmat, dev->sg->mem->sg_segs,
		    dev->sg->mem->sg_nsegs, map->offset - dev->sg->handle +
		    offset, prot, BUS_DMA_NOWAIT));
	case _DRM_SHM:
	case _DRM_CONSISTENT:
		return (bus_dmamem_mmap(dev->dmat, &map->dmah->seg, 1,
		    offset, prot, BUS_DMA_NOWAIT));
	default:
		DRM_ERROR("bad map type %d\n", type);
		return (-1);	/* This should never happen. */
	}
	/* NOTREACHED */
}

@


1.13
log
@pass in the dmat when we attach the drm driver. reduces pci dependancy.
@
text
@@


1.12
log
@Fix mmap to always return the right value in the error path. While i'm
here rework it a little bit to remove a shadowed variable.
@
text
@d105 1
a105 1
		return (bus_dmamem_mmap(dev->pa.pa_dmat, dev->sg->mem->sg_segs,
d110 1
a110 1
		return (bus_dmamem_mmap(dev->pa.pa_dmat, &map->dmah->seg, 1,
@


1.11
log
@detypedef some more. No functional change.
@
text
@a37 1
	paddr_t			 phys;
d44 1
a44 1
		return (EINVAL);
d48 1
a48 1
		return (EACCES);
d56 1
a56 2
			unsigned long page = offset >> PAGE_SHIFT;
			unsigned long phys = dma->pagelist[page];
d101 1
a101 1
		phys = offset + map->offset;
d116 1
a116 2

	return (atop(phys));
@


1.10
log
@replace usage of drm_memrange with extent(9). No functional change, but
should shrink the kernel somewhat. For some strange reason I was unaware
of this api when I pulled in these changes.

tested by myself and Paul de Weerd, thanks!
@
text
@d34 5
a38 5
	struct drm_device *dev = drm_get_device_from_kdev(kdev);
	drm_local_map_t *map;
	struct drm_file *priv;
	drm_map_type_t type;
	paddr_t phys;
@


1.9
log
@Kill the silly ``drm_device_t'' and ``drm_file_t'' typedefs. just use
``struct drm_device'' and ``struct drm_file'' respectively. Since i'm
changing a lot of prototypes anyway, remove all parameter names from
prototypes, in accordance with style(9) (and sanity).
@
text
@d79 3
a81 3
		if (offset >= map->mm->start &&
		    offset < map->mm->start + map->size) {
			offset -= map->mm->start;
@


1.8
log
@Since we're not ifdefed anymore, change
drm_{open,close,poll,read,mmap,ioctl} into the form that cdev_decl()
likes, and nuke the #defines.
@
text
@d34 1
a34 1
	drm_device_t *dev = drm_get_device_from_kdev(kdev);
d36 1
a36 1
	drm_file_t *priv;
@


1.7
log
@Kill the ifdef maze. I've been considering doing this for months, it
doesn't make getting changes to and  from upstream much easier, and just
makes the code hard to read.
@
text
@d32 1
a32 1
drm_mmap(dev_t kdev, off_t offset, int prot)
@


1.6
log
@The mmap offsets for memory buffers currently are the kernel virtual
address.  This is just plain wrong. scatter/gather on amd64 didn't work
here, since char device mmap doesn't take negative offsets so higher
kvas fail.

Instead, prematurely import drm_memrange which is needed for the memory
managers (GEM or TTM), and is used to manage GART space. Then, horribly
abuse it to allocate mmap offsets, fixes up the issues.

"just commit it" art@@.
@
text
@a30 8
#if defined(__FreeBSD__) && __FreeBSD_version >= 500102
int
drm_mmap(struct cdev *kdev, vm_offset_t offset, vm_paddr_t *paddr,
    int prot)
#elif defined(__FreeBSD__)
int
drm_mmap(dev_t kdev, vm_offset_t offset, int prot)
#elif defined(__NetBSD__) || defined(__OpenBSD__)
a32 1
#endif
a37 3
#ifdef __FreeBSD__
	vm_paddr_t phys;
#else
a38 1
#endif
a40 1
#ifdef __OpenBSD__
a41 3
#else
	priv = drm_find_file_by_proc(dev, DRM_CURPROC);
#endif
d45 1
a45 1
		return EINVAL;
d49 1
a49 1
		return EACCES;
d61 1
a61 6
#if defined(__FreeBSD__) && __FreeBSD_version >= 500102
			*paddr = phys;
			return 0;
#else
			return atop(phys);
#endif
d64 1
a64 1
			return -1;
d89 1
a89 1
		return -1;
d91 1
a91 5
#ifdef __OpenBSD__
	if (((map->flags&_DRM_RESTRICTED) && priv->master == 0)) {
#else
	if (((map->flags&_DRM_RESTRICTED) && !DRM_SUSER(DRM_CURPROC))) {
#endif
d94 1
a94 1
		return -1;
a104 9
#ifdef __FreeBSD__
	case _DRM_CONSISTENT:
		phys = vtophys((char *)map->handle + (offset - map->offset));
		break;
	case _DRM_SCATTER_GATHER:
	case _DRM_SHM:
		phys = vtophys(offset);
		break;
#else
d107 1
a107 1
		return bus_dmamem_mmap(dev->pa.pa_dmat, dev->sg->mem->sg_segs,
d109 1
a109 1
		    offset, prot, BUS_DMA_NOWAIT);
d112 2
a113 3
		return bus_dmamem_mmap(dev->pa.pa_dmat, &map->dmah->seg, 1,
		    offset, prot, BUS_DMA_NOWAIT);
#endif
d116 1
a116 1
		return -1;	/* This should never happen. */
d119 1
a119 6
#if defined(__FreeBSD__) && __FreeBSD_version >= 500102
	*paddr = phys;
	return 0;
#else
	return atop(phys);
#endif
@


1.5
log
@Update to DRM git as of a few days ago. This mostly affects the
card-specific files with a few minor changes elsewhere.

The main change to the OpenBSD specific stuff is the change to the irq
api due to the vblank rework.

4 more large bugs known, I have a fix for one.

Tested by many.  prompted by deraadt@@.
@
text
@d101 3
a103 1
		if (offset >= map->offset && offset < map->offset + map->size)
d105 1
d129 1
a129 1
		phys = offset;
d143 2
a144 2
		    dev->sg->mem->sg_nsegs, offset - dev->sg->handle, prot,
		    BUS_DMA_NOWAIT);
d148 1
a148 1
		    offset - map->offset, prot, BUS_DMA_NOWAIT);
@


1.4
log
@Make *drm(4) use D_CLONE so that the per-open data actually works. Since
i'm modifying this code anyway, prepare for privsep by making it so that
"master" openers must be root, and remove some spurious suser() checks.
For example, every DRM_ROOT_ONLY ioctl is also DRM_MASTER. Without this
change, privsep wouldn't work since the fd is no longer root owned.

With this, X privsep should work as soon as the userland bits are done
(currently unwritten).

Looked over by kettenis@@, ok thib@@.
@
text
@d77 1
a79 1
			DRM_SPINUNLOCK(&dev->dma_lock);
a81 1
			DRM_SPINUNLOCK(&dev->dma_lock);
@


1.3
log
@Kill vtophys in drm.

The code we inherited from FreeBSD used vtophys is a fair few places,
nuke that and replace with bus_dma. technically _DRM_SHM should be
managed with uao_create(), but until we move away from mmap and into an
ioctl to map, this will do.

This also paves the way for amd64 support (it lacks vtophys).

ok kettenis, miod looked at it a while back too.
@
text
@d54 3
d58 1
d111 3
d115 1
@


1.2
log
@destatic the static functions, they only make debugging harder.
While i'm here:
remove a couple of debug printfs that shouldn't have gone in anyway.
trowel on some KNF (I really need to get around to sending some of this upstream).
remove some netbsd specific code that netbsd doesn't have anymore.

ok tedu.
@
text
@d121 1
a122 1
#ifdef __FreeBSD__
a123 3
#else
		phys = vtophys((paddr_t)map->handle + (offset - map->offset));
#endif
d129 11
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d32 2
a33 1
int drm_mmap(struct cdev *kdev, vm_offset_t offset, vm_paddr_t *paddr,
d36 2
a37 1
int drm_mmap(dev_t kdev, vm_offset_t offset, int prot)
d39 2
a40 1
paddr_t drm_mmap(dev_t kdev, off_t offset, int prot)
d87 9
a95 7
				/* A sequential search of a linked list is
				   fine here because: 1) there will only be
				   about 5-10 entries in the list and, 2) a
				   DRI client only has to do this mapping
				   once, so it doesn't have to be optimized
				   for performance, even if the list was a
				   bit longer. */
@

