head	1.14;
access;
symbols
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.14
date	2009.01.29.11.18.16;	author oga;	state dead;
branches;
next	1.13;

1.13
date	2008.09.18.15.10.57;	author oga;	state Exp;
branches;
next	1.12;

1.12
date	2008.09.02.01.12.04;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.01.19.18.30;	author chl;	state Exp;
branches;
next	1.10;

1.10
date	2008.08.16.01.53.05;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2008.08.13.21.56.50;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2008.08.13.20.45.42;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2008.07.29.19.44.13;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.26.19.33.19;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.26.16.42.47;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.04.12.14.23.13;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.04.12.14.14.02;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.16.01.02.31;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Rip out the drm_drawable support. There is no need for the xserver to
push cliprects into the kernel anymore so no op the ioctls. The only
consumer of this information died a couple of months ago.

When i've got removal of these calls from userland upstream i'm going to
remove them from the interface entirely.
@
text
@/*-
 * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.
 * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Rickard E. (Rik) Faith <faith@@valinux.com>
 *    Gareth Hughes <gareth@@valinux.com>
 *
 */

/** @@file drm_drawable.c
 * This file implements ioctls to store information along with DRM drawables,
 * such as the current set of cliprects for vblank-synced buffer swaps.
 */

#include "drmP.h"

struct bsd_drm_drawable_info;

int	drm_drawable_compare(struct bsd_drm_drawable_info *,
	    struct bsd_drm_drawable_info *);
void	drm_drawable_free(struct drm_device *dev,
	    struct bsd_drm_drawable_info *draw);
struct bsd_drm_drawable_info *
	drm_get_drawable(struct drm_device *, unsigned int);

RB_PROTOTYPE(drawable_tree, bsd_drm_drawable_info, tree,
    drm_drawable_compare);

struct bsd_drm_drawable_info {
	struct drm_drawable_info	info;
	unsigned int			handle;
	RB_ENTRY(bsd_drm_drawable_info)	tree;
};

int
drm_drawable_compare(struct bsd_drm_drawable_info *a,
    struct bsd_drm_drawable_info *b)
{
	return (a->handle - b->handle);
}

RB_GENERATE(drawable_tree, bsd_drm_drawable_info, tree,
    drm_drawable_compare);

struct bsd_drm_drawable_info *
drm_get_drawable(struct drm_device *dev, unsigned int handle)
{
	struct bsd_drm_drawable_info find;

	find.handle = handle;
	return (RB_FIND(drawable_tree, &dev->drw_head, &find));
}

struct drm_drawable_info *
drm_get_drawable_info(struct drm_device *dev, unsigned int handle)
{
	struct bsd_drm_drawable_info *result = NULL;

	if ((result = drm_get_drawable(dev, handle)))
		return (&result->info);

	return (NULL);
}

int
drm_adddraw(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	struct drm_draw			*draw = data;
	struct bsd_drm_drawable_info	*info;

	info = drm_calloc(1, sizeof(struct bsd_drm_drawable_info),
	    DRM_MEM_DRAWABLE);
	if (info == NULL)
		return (ENOMEM);

	DRM_SPINLOCK(&dev->drw_lock);
	draw->handle = info->handle = ++dev->drw_no;
	RB_INSERT(drawable_tree, &dev->drw_head, info);
	DRM_SPINUNLOCK(&dev->drw_lock);

	DRM_DEBUG("%d\n", draw->handle);

	return (0);
}

int
drm_rmdraw(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	struct drm_draw			*draw = (drm_draw_t *)data;
	struct bsd_drm_drawable_info	*info;

	DRM_SPINLOCK(&dev->drw_lock);
	info = drm_get_drawable(dev, draw->handle);
	if (info != NULL) {
		drm_drawable_free(dev, info);
		DRM_SPINUNLOCK(&dev->drw_lock);
		return (0);
	} else {
		DRM_SPINUNLOCK(&dev->drw_lock);
		return (EINVAL);
	}
}

int
drm_update_draw(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	struct drm_drawable_info *info;
	struct drm_update_draw *update = (struct drm_update_draw *)data;
	int ret = 0;

	DRM_SPINLOCK(&dev->drw_lock);
	info = drm_get_drawable_info(dev, update->handle);
	if (info == NULL) {
		ret = EINVAL;
		goto out;
	}

	switch (update->type) {
	case DRM_DRAWABLE_CLIPRECTS:
		if (update->num != info->num_rects) {
			struct drm_clip_rect  *free = info->rects;
			size_t no = info->num_rects;

			info->rects = NULL;
			info->num_rects = 0;
			DRM_SPINUNLOCK(&dev->drw_lock);
			drm_free(free, sizeof(*info->rects) * no,
			    DRM_MEM_DRAWABLE);
			DRM_SPINLOCK(&dev->drw_lock);
		}
		if (update->num == 0)
			goto out;

		if (info->rects == NULL) {
			struct drm_clip_rect *rects;

			DRM_SPINUNLOCK(&dev->drw_lock);
			rects = drm_calloc(update->num, sizeof(*info->rects),
			    DRM_MEM_DRAWABLE);
			DRM_SPINLOCK(&dev->drw_lock);
			if (rects == NULL) {
				ret = ENOMEM;
				goto out;
			}

			info->rects = rects;
			info->num_rects = update->num;
		}
		/* For some reason the pointer arg is unsigned long long. */
		ret = copyin((void *)(intptr_t)update->data, info->rects,
		    sizeof(*info->rects) * info->num_rects);
		break;
	default:
		ret =  EINVAL;
	}

out:
	DRM_SPINUNLOCK(&dev->drw_lock);
	return (ret);
}

void
drm_drawable_free(struct drm_device *dev, struct bsd_drm_drawable_info *draw)
{
	if (draw == NULL)
		return;
	RB_REMOVE(drawable_tree, &dev->drw_head, draw);
	DRM_SPINUNLOCK(&dev->drw_lock);
	drm_free(draw->info.rects, sizeof(*draw->info.rects) *
	    draw->info.num_rects, DRM_MEM_DRAWABLE);
	drm_free(draw, sizeof(*draw), DRM_MEM_DRAWABLE);
	DRM_SPINLOCK(&dev->drw_lock);
}

void
drm_drawable_free_all(struct drm_device *dev)
{
	struct bsd_drm_drawable_info *draw;

	DRM_SPINLOCK(&dev->drw_lock);
	while ((draw = RB_ROOT(&dev->drw_head)) != NULL)
		drm_drawable_free(dev, draw);
	DRM_SPINUNLOCK(&dev->drw_lock);
}
@


1.13
log
@Rework the drm locking to be at least halfway sane. The freebsd code
held a lock over all driver ioctls in order to be ``mpsafe''. Stop lying
to ourselves for a start. This code is not fully mpsafe, and should not
pretend to be so.  Put the locking around where it should, and rely on
biglock for the rest. This will need to be fixed, but avoids some of the
horrible that we have right now.

Tested by many over a long time and several iterations.
@
text
@@


1.12
log
@detypedef some more. No functional change.
@
text
@a96 1
	info->handle = ++dev->drw_no;
d98 1
a99 1
	draw->handle = info->handle;
d199 1
a199 1
	struct bsd_drm_drawable_info *draw, *nxt;
d202 1
a202 3
	for (draw = RB_MIN(drawable_tree, &dev->drw_head); draw != NULL;
	    draw = nxt) {
		nxt = RB_NEXT(drawable_tree, &dev->drw_head, draw);
a203 1
	}
@


1.11
log
@avoid loosing return value from copyin, and properly return it.

initial patch from me, reworked by oga@@.

found by LLVM/Clang Static Analyzer.

ok oga@@
@
text
@d89 2
a90 2
	drm_draw_t *draw = data;
	struct bsd_drm_drawable_info *info;
d111 2
a112 2
	drm_draw_t *draw = (drm_draw_t *)data;
	struct bsd_drm_drawable_info *info;
@


1.10
log
@Apply a light paddling with the knf stick. No binary change.
@
text
@d174 1
a174 1
		DRM_SPINUNLOCK(&dev->drw_lock);
@


1.9
log
@Make sure that we don't sleep with a lock held, some small cleanup while
i'm here.
@
text
@d51 3
a53 3
	struct drm_drawable_info info;
	unsigned int handle;
	RB_ENTRY(bsd_drm_drawable_info) tree;
d160 2
a161 2
			rects = drm_calloc(update->num, 
			    sizeof(*info->rects), DRM_MEM_DRAWABLE);
d191 2
a192 2
	drm_free(draw->info.rects,
	    sizeof(*draw->info.rects) * draw->info.num_rects, DRM_MEM_DRAWABLE);
a202 1

a206 1

a208 1

@


1.8
log
@Check for zero in drm_calloc() to prevent divide-by-zero. Also rearrange
the two calls to drm_calloc() that had nmemb and size the wrong way
around.
@
text
@d60 2
a61 6
	if (a->handle > b->handle)
		return 1;
	if (a->handle < b->handle)
		return -1;
	return 0;
};
d81 1
a81 1
		return &result->info;
d95 1
a95 1
		return ENOMEM;
d105 1
a105 1
	return 0;
d119 1
a119 1
		return 0;
d122 1
a122 1
		return EINVAL;
d131 1
a131 1
	int ret;
d133 1
d135 4
a138 2
	if (info == NULL)
		return EINVAL;
a141 1
		DRM_SPINLOCK(&dev->drw_lock);
d143 3
a145 4
			if (info->rects)
				drm_free(info->rects,
				    sizeof(*info->rects) * info->num_rects,
				    DRM_MEM_DRAWABLE);
a147 2
		}
		if (update->num == 0) {
d149 3
a151 1
			return 0;
d153 3
d157 4
a160 1
			info->rects = drm_calloc(update->num,
d162 4
a165 3
			if (info->rects == NULL) {
				DRM_SPINUNLOCK(&dev->drw_lock);
				return ENOMEM;
d167 2
a174 1
		return ret;
d176 1
a176 1
		return EINVAL;
d178 4
d190 1
d194 1
@


1.7
log
@Switch all instances of malloc/free in the DRM to drm_alloc, drm_free
and drm_calloc.

With the recent change to check overflow in drm_calloc, this means that
all allocations that require multiplication are now checked. Also use
drm_calloc() when zeroing is needed and drop the bzero/memset
afterwards.  Finally, make drm_free() check for NULL, so we don't need
to do so every time.

ok miod@@, deraadt@@
@
text
@d157 2
a158 2
			info->rects = drm_calloc(sizeof(*info->rects),
			    update->num, DRM_MEM_DRAWABLE);
@


1.6
log
@Kill the silly ``drm_device_t'' and ``drm_file_t'' typedefs. just use
``struct drm_device'' and ``struct drm_file'' respectively. Since i'm
changing a lot of prototypes anyway, remove all parameter names from
prototypes, in accordance with style(9) (and sanity).
@
text
@d157 1
a157 1
			info->rects = drm_alloc(sizeof(*info->rects) *
d178 6
a183 9
	if (draw) {
		RB_REMOVE(drawable_tree, &dev->drw_head, draw);
		if (draw->info.rects)
			drm_free(draw->info.rects,
			    sizeof(*draw->info.rects) * draw->info.num_rects,
			    DRM_MEM_DRAWABLE);
		drm_free(draw, sizeof(*draw),
		    DRM_MEM_DRAWABLE);
	}
@


1.5
log
@Kill the rest of the ifdef maze in drm_*.c

I was going to do this per file, but decided all it would achieve was
artificially increasing my commit count.

>Kill the ifdef maze. I've been considering doing this for months, it
>doesn't make getting changes to and  from upstream much easier, and just
>makes the code hard to read.
@
text
@d80 1
a80 1
drm_get_drawable_info(drm_device_t *dev, unsigned int handle)
d91 1
a91 1
drm_adddraw(drm_device_t *dev, void *data, struct drm_file *file_priv)
d113 1
a113 1
drm_rmdraw(drm_device_t *dev, void *data, struct drm_file *file_priv)
d131 1
a131 1
drm_update_draw(drm_device_t *dev, void *data, struct drm_file *file_priv)
@


1.4
log
@just use an incremented int to calculate drawable ids. This is simpler
and causes no pointer size issues on amd64.

Tested by many.
@
text
@a46 1
#ifdef __OpenBSD__
a48 1
#endif /* __OpenBSD__ */
a66 4
#ifdef __FreeBSD__
RB_GENERATE_STATIC(drawable_tree, bsd_drm_drawable_info, tree,
    drm_drawable_compare);
#else
a68 1
#endif
a100 3
#ifdef __FreeBSD__
	info->handle = alloc_unr(dev->drw_unrhdr);
#else
a101 1
#endif
a183 3
#ifdef __FreeBSD__
		free_unr(dev->drw_unrhdr, draw->info->handle);
#endif
@


1.3
log
@Make sure that the drawables are properly freed when removed, and upon
last close of the device nuke them all. Inspired by similar code in
the linux drm driver.

Tested by many.
@
text
@d45 1
a45 1
	drm_get_drawable(struct drm_device *, int);
d54 1
a54 1
	int handle;
d78 1
a78 1
drm_get_drawable(struct drm_device *dev, int handle)
d87 1
a87 1
drm_get_drawable_info(drm_device_t *dev, int handle)
d111 1
a111 1
	info->handle = (int)&info; /* pointers should be unique. */
@


1.2
log
@destatic the static functions, they only make debugging harder.
While i'm here:
remove a couple of debug printfs that shouldn't have gone in anyway.
trowel on some KNF (I really need to get around to sending some of this upstream).
remove some netbsd specific code that netbsd doesn't have anymore.

ok tedu.
@
text
@d38 2
d42 4
d77 9
d89 1
a89 4
	struct bsd_drm_drawable_info find, *result = NULL;

	find.handle = handle;
	result = RB_FIND(drawable_tree, &dev->drw_head, &find);
d91 1
a91 1
	if (result)
d94 1
a94 1
	return NULL;
d127 1
a127 1
	struct drm_drawable_info *info;
d130 1
a130 1
	info = drm_get_drawable_info(dev, draw->handle);
d132 1
a132 2
		RB_REMOVE(drawable_tree, &dev->drw_head,
		    (struct bsd_drm_drawable_info *)info);
a133 5
#ifdef __FreeBSD__
		free_unr(dev->drw_unrhdr, draw->handle);
#endif
		drm_free(info, sizeof(struct bsd_drm_drawable_info),
		    DRM_MEM_DRAWABLE);
d184 34
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d38 3
d52 1
a52 1
static int
d85 2
a86 1
int drm_adddraw(drm_device_t *dev, void *data, struct drm_file *file_priv)
d111 2
a112 1
int drm_rmdraw(drm_device_t *dev, void *data, struct drm_file *file_priv)
d135 2
a136 1
int drm_update_draw(drm_device_t *dev, void *data, struct drm_file *file_priv)
@

