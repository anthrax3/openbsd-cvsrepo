head	1.16;
access;
symbols
	OPENBSD_5_5:1.15.0.14
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.10
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.8
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.6
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.4
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.14.0.8
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.6
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.4
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.16
date	2014.03.09.07.42.29;	author jsg;	state dead;
branches;
next	1.15;

1.15
date	2011.06.02.18.22.00;	author weerd;	state Exp;
branches;
next	1.14;

1.14
date	2009.04.06.04.51.31;	author oga;	state Exp;
branches;
next	1.13;

1.13
date	2009.03.26.07.25.06;	author oga;	state Exp;
branches;
next	1.12;

1.12
date	2008.10.07.21.59.32;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.18.15.10.57;	author oga;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.10.02.09.56;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.02.01.12.04;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2008.08.17.14.37.31;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2008.08.16.01.53.05;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.08.13.19.30.12;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.29.19.44.13;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.26.19.33.19;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.26.16.42.47;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.16.01.02.31;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.16
log
@remove dri1 interfaces
discussed with kettenis some time last year
@
text
@/* $OpenBSD: drm_context.c,v 1.15 2011/06/02 18:22:00 weerd Exp $ */
/*-
 * Copyright 1999, 2000 Precision Insight, Inc., Cedar Park, Texas.
 * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Rickard E. (Rik) Faith <faith@@valinux.com>
 *    Gareth Hughes <gareth@@valinux.com>
 *
 */

/** @@file drm_context.c
 * Implementation of the context management ioctls.
 */

#include "drmP.h"

/* ================================================================
 * Context bitmap support
 */

void
drm_ctxbitmap_free(struct drm_device *dev, int ctx_handle)
{
	if (ctx_handle < 0 || ctx_handle >= DRM_MAX_CTXBITMAP || 
	    dev->ctx_bitmap == NULL) {
		DRM_ERROR("Attempt to free invalid context handle: %d\n",
		   ctx_handle);
		return;
	}

	DRM_LOCK();
	clear_bit(ctx_handle, dev->ctx_bitmap);
	DRM_UNLOCK();
	return;
}

int
drm_ctxbitmap_next(struct drm_device *dev)
{
	int	bit;

	if (dev->ctx_bitmap == NULL)
		return (-1);

	DRM_LOCK();
	bit = find_first_zero_bit(dev->ctx_bitmap, DRM_MAX_CTXBITMAP);
	if (bit >= DRM_MAX_CTXBITMAP) {
		DRM_UNLOCK();
		return (-1);
	}

	set_bit(bit, dev->ctx_bitmap);
	DRM_DEBUG("drm_ctxbitmap_next bit : %d\n", bit);
	DRM_UNLOCK();
	return (bit);
}

int
drm_ctxbitmap_init(struct drm_device *dev)
{
	atomic_t	*bitmap;
	int		 i, temp;

	
	if ((bitmap = drm_calloc(1, PAGE_SIZE)) == NULL)
		return (ENOMEM);
	DRM_LOCK();
	dev->ctx_bitmap = bitmap;
	DRM_UNLOCK();

	for (i = 0; i < DRM_RESERVED_CONTEXTS; i++) {
		temp = drm_ctxbitmap_next(dev);
	   	DRM_DEBUG("drm_ctxbitmap_init : %d\n", temp);
	}

	return (0);
}

void
drm_ctxbitmap_cleanup(struct drm_device *dev)
{
	atomic_t *bitmap;

	DRM_LOCK();
	bitmap = dev->ctx_bitmap;
	dev->ctx_bitmap = NULL;
	DRM_UNLOCK();
	drm_free(bitmap);
}

int
drm_resctx(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	struct drm_ctx_res	*res = data;
	struct drm_ctx		 ctx;
	int			 i;

	if (res->count >= DRM_RESERVED_CONTEXTS) {
		bzero(&ctx, sizeof(ctx));
		for (i = 0; i < DRM_RESERVED_CONTEXTS; i++) {
			ctx.handle = i;
			if (DRM_COPY_TO_USER(&res->contexts[i],
			    &ctx, sizeof(ctx)))
				return (EFAULT);
		}
	}
	res->count = DRM_RESERVED_CONTEXTS;

	return (0);
}

int
drm_addctx(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	struct drm_ctx	*ctx = data;

	ctx->handle = drm_ctxbitmap_next(dev);
	if (ctx->handle == DRM_KERNEL_CONTEXT) {
		/* Skip kernel's context and get a new one. */
		ctx->handle = drm_ctxbitmap_next(dev);
	}
	DRM_DEBUG("%d\n", ctx->handle);
	if (ctx->handle == -1) {
		DRM_DEBUG("Not enough free contexts.\n");
		/* Should this return -EBUSY instead? */
		return (ENOMEM);
	}

	return (0);
}

int
drm_getctx(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	struct drm_ctx	*ctx = data;

	/* This is 0, because we don't handle any context flags */
	ctx->flags = 0;

	return (0);
}

int
drm_rmctx(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	struct drm_ctx	*ctx = data;

	DRM_DEBUG("%d\n", ctx->handle);
	if (ctx->handle != DRM_KERNEL_CONTEXT)
		drm_ctxbitmap_free(dev, ctx->handle);

	return (0);
}
@


1.15
log
@Add $OpenBSD$ after oga said 'go ahead and fix that'

'go for it' oga@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.14
log
@Remove the context constructor and destructor driver hooks. sisdrm's old
code was the only that that needed them.
@
text
@d1 1
@


1.13
log
@The drm_* allocation functions have been #defined to not use most of
their arguments for a while. Actually go through the code and remove the
extraneous arguments. Makes things easier to read.
@
text
@d60 1
a60 1
	int bit;
d63 1
a63 1
		return -1;
d69 1
a69 1
		return -1;
d75 1
a75 1
	return bit;
d85 1
a85 2
	bitmap = drm_calloc(1, PAGE_SIZE);
	if (bitmap == NULL)
d96 1
a96 1
	return 0;
d124 1
a124 1
				return EFAULT;
d129 1
a129 1
	return 0;
d146 1
a146 1
		return ENOMEM;
d149 1
a149 4
	if (dev->driver->context_ctor && ctx->handle != DRM_KERNEL_CONTEXT)
		dev->driver->context_ctor(dev, ctx->handle);

	return 0;
d160 1
a160 1
	return 0;
d169 1
a169 4
	if (ctx->handle != DRM_KERNEL_CONTEXT) {
		if (dev->driver->context_dtor)
			dev->driver->context_dtor(dev, ctx->handle);

a170 1
	}
d172 1
a172 1
	return 0;
@


1.12
log
@Move dev->driver over to being a pointer to a const struct, instead of stupidly
filling in a pre-allocated one on each attach.

Makes the code a bunch nicer, shrinks a kernel by about 1.5k on amd64,
helps with my sanity, and paves way for later changes.

Tested by a few for a couple of weeks now.
@
text
@d85 1
a85 1
	bitmap = drm_calloc(1, PAGE_SIZE, DRM_MEM_CTXBITMAP);
d109 1
a109 1
	drm_free(bitmap, PAGE_SIZE, DRM_MEM_CTXBITMAP);
@


1.11
log
@Rework the drm locking to be at least halfway sane. The freebsd code
held a lock over all driver ioctls in order to be ``mpsafe''. Stop lying
to ourselves for a start. This code is not fully mpsafe, and should not
pretend to be so.  Put the locking around where it should, and rely on
biglock for the rest. This will need to be fixed, but avoids some of the
horrible that we have right now.

Tested by many over a long time and several iterations.
@
text
@d150 2
a151 2
	if (dev->driver.context_ctor && ctx->handle != DRM_KERNEL_CONTEXT)
		dev->driver.context_ctor(dev, ctx->handle);
d174 2
a175 2
		if (dev->driver.context_dtor)
			dev->driver.context_dtor(dev, ctx->handle);
@


1.10
log
@Kill the max_context member of the softc, it does nothing useful.
@
text
@d150 1
a150 2
	if (dev->driver.context_ctor && ctx->handle != DRM_KERNEL_CONTEXT) {
		DRM_LOCK();
a151 2
		DRM_UNLOCK();
	}
d174 1
a174 2
		if (dev->driver.context_dtor) {
			DRM_LOCK();
a175 2
			DRM_UNLOCK();
		}
@


1.9
log
@detypedef some more. No functional change.
@
text
@a73 2
	if ((bit+1) > dev->max_context)
		dev->max_context = (bit+1);
a89 1
	dev->max_context = -1;
@


1.8
log
@Make sure we can't sleep with a spinlock held
@
text
@d118 3
a120 3
	drm_ctx_res_t *res = data;
	drm_ctx_t ctx;
	int i;
d139 1
a139 1
	drm_ctx_t *ctx = data;
d165 1
a165 1
	drm_ctx_t *ctx = data;
d176 1
a176 1
	drm_ctx_t *ctx = data;
@


1.7
log
@Apply a light paddling with the knf stick. No binary change.
@
text
@d83 2
a84 2
	int i;
   	int temp;
d86 4
d91 1
a91 5
	dev->ctx_bitmap = drm_calloc(1, PAGE_SIZE, DRM_MEM_CTXBITMAP);
	if (dev->ctx_bitmap == NULL) {
		DRM_UNLOCK();
		return ENOMEM;
	}
d106 2
d109 2
a110 1
	drm_free(dev->ctx_bitmap, PAGE_SIZE, DRM_MEM_CTXBITMAP);
d112 1
@


1.6
log
@Kill a bunch of the drm context code that nothing uses anymore, the
xserver only actually uses a small part of it nowadays.

Kill a few other dead bits from the drmP.h while i'm here.
@
text
@d66 1
a66 1
	bit = find_first_zero_bit( dev->ctx_bitmap, DRM_MAX_CTXBITMAP );
d88 1
a88 1
	if ( dev->ctx_bitmap == NULL ) {
d95 1
a95 1
	for ( i = 0 ; i < DRM_RESERVED_CONTEXTS ; i++ ) {
d97 1
a97 1
	   	DRM_DEBUG( "drm_ctxbitmap_init : %d\n", temp );
d118 1
a118 1
	if ( res->count >= DRM_RESERVED_CONTEXTS ) {
d120 1
a120 1
		for ( i = 0 ; i < DRM_RESERVED_CONTEXTS ; i++ ) {
d122 2
a123 2
			if ( DRM_COPY_TO_USER( &res->contexts[i],
			    &ctx, sizeof(ctx) ) )
d138 1
a138 1
	if ( ctx->handle == DRM_KERNEL_CONTEXT ) {
d142 3
a144 3
	DRM_DEBUG( "%d\n", ctx->handle );
	if ( ctx->handle == -1 ) {
		DRM_DEBUG( "Not enough free contexts.\n" );
d174 2
a175 2
	DRM_DEBUG( "%d\n", ctx->handle );
	if ( ctx->handle != DRM_KERNEL_CONTEXT ) {
@


1.5
log
@Switch all instances of malloc/free in the DRM to drm_alloc, drm_free
and drm_calloc.

With the recent change to check overflow in drm_calloc, this means that
all allocations that require multiplication are now checked. Also use
drm_calloc() when zeroing is needed and drop the bzero/memset
afterwards.  Finally, make drm_free() check for NULL, so we don't need
to do so every time.

ok miod@@, deraadt@@
@
text
@a52 1
	dev->context_sareas[ctx_handle] = NULL;
d74 1
a74 2
	if ((bit+1) > dev->max_context) {
		int old_context = dev->max_context;
a75 25
		if (dev->context_sareas != NULL) {
			drm_local_map_t **ctx_sareas;

			 ctx_sareas = drm_realloc(dev->context_sareas,
			    old_context * sizeof(*dev->context_sareas),
			    dev->max_context * sizeof(*dev->context_sareas), M_DRM);
			if (ctx_sareas == NULL) {
				clear_bit(bit, dev->ctx_bitmap);
				DRM_UNLOCK();
				return -1;
			}
			dev->context_sareas = ctx_sareas;
			dev->context_sareas[bit] = NULL;
		} else {
			/* max_context == 1 at this point */
			dev->context_sareas = drm_calloc(dev->max_context, 
			    sizeof(*dev->context_sareas), DRM_MEM_CTXLIST);
			if (dev->context_sareas == NULL) {
				clear_bit(bit, dev->ctx_bitmap);
				DRM_UNLOCK();
				return -1;
			}
			dev->context_sareas[bit] = NULL;
		}
	}
a91 1
	dev->context_sareas = NULL;
a106 2
	drm_free(dev->context_sareas,
	    sizeof(dev->context_sareas) * dev->max_context, DRM_MEM_CTXLIST);
a110 89
/* ================================================================
 * Per Context SAREA Support
 */

int
drm_getsareactx(struct drm_device *dev, void *data,
    struct drm_file *file_priv)
{
	drm_ctx_priv_map_t *request = data;
	drm_local_map_t *map;

	DRM_LOCK();
	if (dev->max_context < 0 ||
	    request->ctx_id >= (unsigned) dev->max_context) {
		DRM_UNLOCK();
		return EINVAL;
	}

	map = dev->context_sareas[request->ctx_id];
	DRM_UNLOCK();

	request->handle = map->handle;

	return 0;
}

int
drm_setsareactx(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	drm_ctx_priv_map_t *request = data;
	drm_local_map_t *map = NULL;

	DRM_LOCK();
	TAILQ_FOREACH(map, &dev->maplist, link) {
		if (map->handle == request->handle) {
			if (dev->max_context < 0)
				goto bad;
			if (request->ctx_id >= (unsigned) dev->max_context)
				goto bad;
			dev->context_sareas[request->ctx_id] = map;
			DRM_UNLOCK();
			return 0;
		}
	}

bad:
	DRM_UNLOCK();
	return EINVAL;
}

/* ================================================================
 * The actual DRM context handling routines
 */

int
drm_context_switch(struct drm_device *dev, int old, int new)
{
        if ( test_and_set_bit( 0, &dev->context_flag ) ) {
                DRM_ERROR( "Reentering -- FIXME\n" );
                return EBUSY;
        }

        DRM_DEBUG( "Context switch from %d to %d\n", old, new );

        if ( new == dev->last_context ) {
                clear_bit( 0, &dev->context_flag );
                return 0;
        }

        return 0;
}

int
drm_context_switch_complete(struct drm_device *dev, int new)
{
        dev->last_context = new;  /* PRE/POST: This is the _only_ writer. */

        if ( !_DRM_LOCK_IS_HELD(dev->lock.hw_lock->lock) ) {
                DRM_ERROR( "Lock isn't held after context switch\n" );
        }

				/* If a context switch is ever initiated
                                   when the kernel holds the lock, release
                                   that lock here. */
        clear_bit( 0, &dev->context_flag );

        return 0;
}

a158 7
drm_modctx(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	/* This does nothing */
	return 0;
}

int
a164 20

	return 0;
}

int
drm_switchctx(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	drm_ctx_t *ctx = data;

	DRM_DEBUG( "%d\n", ctx->handle );
	return drm_context_switch(dev, dev->last_context, ctx->handle);
}

int
drm_newctx(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	drm_ctx_t *ctx = data;

	DRM_DEBUG( "%d\n", ctx->handle );
	drm_context_switch_complete(dev, ctx->handle);
@


1.4
log
@Kill the silly ``drm_device_t'' and ``drm_file_t'' typedefs. just use
``struct drm_device'' and ``struct drm_file'' respectively. Since i'm
changing a lot of prototypes anyway, remove all parameter names from
prototypes, in accordance with style(9) (and sanity).
@
text
@d93 2
a94 2
			dev->context_sareas = malloc(dev->max_context * 
			    sizeof(*dev->context_sareas), M_DRM, M_NOWAIT);
d114 1
a114 1
	dev->ctx_bitmap = malloc(PAGE_SIZE, M_DRM, M_NOWAIT | M_ZERO);
d135 3
a137 3
	if (dev->context_sareas != NULL)
		free(dev->context_sareas, M_DRM);
	free(dev->ctx_bitmap, M_DRM);
@


1.3
log
@Kill the rest of the ifdef maze in drm_*.c

I was going to do this per file, but decided all it would achieve was
artificially increasing my commit count.

>Kill the ifdef maze. I've been considering doing this for months, it
>doesn't make getting changes to and  from upstream much easier, and just
>makes the code hard to read.
@
text
@d42 1
a42 1
drm_ctxbitmap_free(drm_device_t *dev, int ctx_handle)
d59 1
a59 1
drm_ctxbitmap_next(drm_device_t *dev)
d108 1
a108 1
drm_ctxbitmap_init(drm_device_t *dev)
d132 1
a132 1
drm_ctxbitmap_cleanup(drm_device_t *dev)
d146 2
a147 1
drm_getsareactx( drm_device_t *dev, void *data, struct drm_file *file_priv )
d168 1
a168 1
drm_setsareactx(drm_device_t *dev, void *data, struct drm_file *file_priv)
d196 1
a196 1
drm_context_switch(drm_device_t *dev, int old, int new)
d214 1
a214 1
drm_context_switch_complete(drm_device_t *dev, int new)
d231 1
a231 1
drm_resctx(drm_device_t *dev, void *data, struct drm_file *file_priv)
d252 1
a252 1
drm_addctx(drm_device_t *dev, void *data, struct drm_file *file_priv)
d278 1
a278 1
drm_modctx(drm_device_t *dev, void *data, struct drm_file *file_priv)
d285 1
a285 1
drm_getctx(drm_device_t *dev, void *data, struct drm_file *file_priv)
d296 1
a296 1
drm_switchctx(drm_device_t *dev, void *data, struct drm_file *file_priv)
d305 1
a305 1
drm_newctx(drm_device_t *dev, void *data, struct drm_file *file_priv)
d316 1
a316 1
drm_rmctx(drm_device_t *dev, void *data, struct drm_file *file_priv)
@


1.2
log
@destatic the static functions, they only make debugging harder.
While i'm here:
remove a couple of debug printfs that shouldn't have gone in anyway.
trowel on some KNF (I really need to get around to sending some of this upstream).
remove some netbsd specific code that netbsd doesn't have anymore.

ok tedu.
@
text
@a75 1
#if defined(__OpenBSD__)
a76 1
#endif
a80 1
#if defined(__OpenBSD__)
a83 5
#else
			ctx_sareas = realloc(dev->context_sareas,
			    dev->max_context * sizeof(*dev->context_sareas),
			    M_DRM, M_NOWAIT);
#endif
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d41 2
a42 1
void drm_ctxbitmap_free(drm_device_t *dev, int ctx_handle)
d58 2
a59 1
int drm_ctxbitmap_next(drm_device_t *dev)
a83 5
	 		/* 
			 * ugly. this means that we reallocate for every time the context
		 	 * is increased past the point. since this is a malloc+memcpy this
			 * be fairly slow.
			 */
d115 2
a116 1
int drm_ctxbitmap_init(drm_device_t *dev)
d139 2
a140 1
void drm_ctxbitmap_cleanup(drm_device_t *dev)
d153 2
a154 1
int drm_getsareactx( drm_device_t *dev, void *data, struct drm_file *file_priv )
d174 2
a175 1
int drm_setsareactx(drm_device_t *dev, void *data, struct drm_file *file_priv)
d202 2
a203 1
int drm_context_switch(drm_device_t *dev, int old, int new)
d220 2
a221 1
int drm_context_switch_complete(drm_device_t *dev, int new)
d237 2
a238 1
int drm_resctx(drm_device_t *dev, void *data, struct drm_file *file_priv)
d249 1
a249 1
					   &ctx, sizeof(ctx) ) )
d258 2
a259 1
int drm_addctx(drm_device_t *dev, void *data, struct drm_file *file_priv)
d265 1
a265 1
				/* Skip kernel's context and get a new one. */
d271 1
a271 1
				/* Should this return -EBUSY instead? */
d284 2
a285 1
int drm_modctx(drm_device_t *dev, void *data, struct drm_file *file_priv)
d291 2
a292 1
int drm_getctx(drm_device_t *dev, void *data, struct drm_file *file_priv)
d302 2
a303 1
int drm_switchctx(drm_device_t *dev, void *data, struct drm_file *file_priv)
d311 2
a312 1
int drm_newctx(drm_device_t *dev, void *data, struct drm_file *file_priv)
d322 2
a323 1
int drm_rmctx(drm_device_t *dev, void *data, struct drm_file *file_priv)
@

