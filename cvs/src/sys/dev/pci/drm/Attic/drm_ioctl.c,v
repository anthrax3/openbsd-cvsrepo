head	1.13;
access;
symbols
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.13
date	2009.01.29.11.50.16;	author oga;	state dead;
branches;
next	1.12;

1.12
date	2009.01.29.11.38.44;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2008.11.24.04.21.31;	author oga;	state Exp;
branches;
next	1.10;

1.10
date	2008.11.24.03.27.02;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2008.10.07.21.59.32;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.14.48.53;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.01.32.08;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.02.01.12.04;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.08.16.01.53.05;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.07.29.19.44.13;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.26.19.33.19;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.16.01.02.31;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Similar to my last commit, it's stupid to have a file with two very
small functions in it. Move them to main driver file.
@
text
@/*-
 * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.
 * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Rickard E. (Rik) Faith <faith@@valinux.com>
 *    Gareth Hughes <gareth@@valinux.com>
 *
 */

/** @@file drm_ioctl.c
 * Varios minor DRM ioctls not applicable to other files, such as versioning
 * information and reporting DRM information to userland.
 */

#include "drmP.h"

/*
 * Beginning in revision 1.1 of the DRM interface, getunique will return
 * a unique in the form pci:oooo:bb:dd.f (o=domain, b=bus, d=device, f=function)
 * before setunique has been called.  The format for the bus-specific part of
 * the unique is not defined for any other bus.
 */
int
drm_getunique(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	struct drm_unique	 *u = data;

	if (u->unique_len >= dev->unique_len) {
		if (DRM_COPY_TO_USER(u->unique, dev->unique, dev->unique_len))
			return EFAULT;
	}
	u->unique_len = dev->unique_len;

	return 0;
}

#define DRM_IF_MAJOR	1
#define DRM_IF_MINOR	2

int
drm_setversion(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	struct drm_set_version	ver, *sv = data;
	int			if_version;

	/* Save the incoming data, and set the response before continuing
	 * any further.
	 */
	ver = *sv;
	sv->drm_di_major = DRM_IF_MAJOR;
	sv->drm_di_minor = DRM_IF_MINOR;
	sv->drm_dd_major = dev->driver->major;
	sv->drm_dd_minor = dev->driver->minor;

	/*
	 * We no longer support interface versions less than 1.1, so error
	 * out if the xserver is too old. 1.1 always ties the drm to a
	 * certain busid, this was done on attach
	 */
	if (ver.drm_di_major != -1) {
		if (ver.drm_di_major != DRM_IF_MAJOR || ver.drm_di_minor < 1 ||
		    ver.drm_di_minor > DRM_IF_MINOR) {
			return EINVAL;
		}
		if_version = DRM_IF_VERSION(ver.drm_di_major, ver.drm_dd_minor);
		dev->if_version = DRM_MAX(if_version, dev->if_version);
	}

	if (ver.drm_dd_major != -1) {
		if (ver.drm_dd_major != dev->driver->major ||
		    ver.drm_dd_minor < 0 ||
		    ver.drm_dd_minor > dev->driver->minor)
			return EINVAL;
	}

	return 0;
}
@


1.12
log
@drm_getmap and interface can die too.
@
text
@@


1.11
log
@change drm_attach_mi to drm_attach_pci. we take the pci_attach_args, and
setup the drm_attach_args with the needed information.

require interface version 1.1 libdrm has been requesting it for ages),
which means that we can set the busid string at attach time. (generated in
drm_attach_pci), also pass in the interrupt line and bst.

Now we don't need dev->pa at all, so remove it, finally.
@
text
@a57 36
int
drm_getmap(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	struct drm_map	*map = data;
	drm_local_map_t	*mapinlist;
	int		 idx, i = 0;

	idx = map->offset;

	DRM_LOCK();
	if (idx < 0) {
		DRM_UNLOCK();
		return EINVAL;
	}

	TAILQ_FOREACH(mapinlist, &dev->maplist, link) {
		if (i == idx) {
			map->offset = mapinlist->offset;
			map->size = mapinlist->size;
			map->type = mapinlist->type;
			map->flags = mapinlist->flags;
			map->handle = mapinlist->handle;
			map->mtrr = mapinlist->mtrr;
			break;
		}
		i++;
	}

	DRM_UNLOCK();

 	if (mapinlist == NULL)
		return EINVAL;

	return 0;
}

@


1.10
log
@instead of functions that just return an error, just inline them into
the ioctl handler.
@
text
@a37 2
int	drm_set_busid(struct drm_device *);

a57 88
/* Deprecated in DRM version 1.1, and will return EBUSY when setversion has
 * requested version 1.1 or greater.
 */
int
drm_setunique(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	struct drm_unique	*u = data;
	char			*busid;
	int			 domain, bus, slot, func, ret;
#if defined (__NetBSD__) 
	return EOPNOTSUPP;
#endif

	/* Check and copy in the submitted Bus ID */
	if (!u->unique_len || u->unique_len > 1024)
		return EINVAL;

	busid = drm_alloc(u->unique_len + 1, DRM_MEM_DRIVER);
	if (busid == NULL)
		return ENOMEM;

	if (DRM_COPY_FROM_USER(busid, u->unique, u->unique_len)) {
		drm_free(busid, u->unique_len + 1, DRM_MEM_DRIVER);
		return EFAULT;
	}
	busid[u->unique_len] = '\0';

	/* Return error if the busid submitted doesn't match the device's actual
	 * busid.
	 */
#ifdef __FreeBSD__
	ret = sscanf(busid, "PCI:%d:%d:%d", &bus, &slot, &func);
#endif /* Net and Openbsd don't have sscanf in the kernel this is deprecated anyway. */

	if (ret != 3) {
		drm_free(busid, u->unique_len + 1, DRM_MEM_DRIVER);
		return EINVAL;
	}
	domain = bus >> 8;
	bus &= 0xff;
	
	if ((domain != dev->pci_domain) || (bus != dev->pci_bus) ||
	    (slot != dev->pci_slot) || (func != dev->pci_func)) {
		drm_free(busid, u->unique_len + 1, DRM_MEM_DRIVER);
		return EINVAL;
	}

	/* Actually set the device's busid now. */
	DRM_LOCK();
	if (dev->unique_len || dev->unique) {
		DRM_UNLOCK();
		return EBUSY;
	}

	dev->unique_len = u->unique_len;
	dev->unique = busid;
	DRM_UNLOCK();

	return 0;
}


int
drm_set_busid(struct drm_device *dev)
{

	DRM_LOCK();

	if (dev->unique != NULL) {
		DRM_UNLOCK();
		return EBUSY;
	}

	dev->unique_len = 20;
	dev->unique = drm_alloc(dev->unique_len + 1, DRM_MEM_DRIVER);
	if (dev->unique == NULL) {
		DRM_UNLOCK();
		return ENOMEM;
	}

	snprintf(dev->unique, dev->unique_len, "pci:%04x:%02x:%02x.%1x",
	    dev->pci_domain, dev->pci_bus, dev->pci_slot, dev->pci_func);

	DRM_UNLOCK();

	return 0;
}

d112 5
d118 1
a118 1
		if (ver.drm_di_major != DRM_IF_MAJOR || ver.drm_di_minor < 0 ||
a123 6
		if (ver.drm_di_minor >= 1) {
			/*
			 * Version 1.1 includes tying of DRM to specific device
			 */
			drm_set_busid(dev);
		}
a129 1
		{
a130 1
		}
@


1.9
log
@Move dev->driver over to being a pointer to a const struct, instead of stupidly
filling in a pre-allocated one on each attach.

Makes the code a bunch nicer, shrinks a kernel by about 1.5k on amd64,
helps with my sanity, and paves way for later changes.

Tested by a few for a couple of weeks now.
@
text
@a183 12
int
drm_getclient(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	return (EINVAL);
}

int
drm_getstats(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	return (EINVAL);
}

a225 8
	return 0;
}


int
drm_noop(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	DRM_DEBUG("\n");
@


1.8
log
@Something else that nothing calls.
@
text
@d211 2
a212 2
	sv->drm_dd_major = dev->driver.major;
	sv->drm_dd_minor = dev->driver.minor;
d230 1
a230 1
		if (ver.drm_dd_major != dev->driver.major ||
d232 1
a232 1
		    ver.drm_dd_minor > dev->driver.minor)
@


1.7
log
@Kill the stats data structures and noop some other parts. Nothing in
userland asks for these stats, and we stopped recording anything
interesting a while back.
@
text
@d187 1
a187 22
	struct drm_client	*client = data;
	struct drm_file		*pt;
	int		 idx;
	int		 i = 0;

	idx = client->idx;
	DRM_LOCK();
	TAILQ_FOREACH(pt, &dev->files, link) {
		if (i==idx) {
			client->auth = pt->authenticated;
			client->pid = pt->pid;
			client->uid = pt->uid;
			client->magic = pt->magic;
			client->iocs = pt->ioctl_count;
			DRM_UNLOCK();
			return 0;
		}
		i++;
	}
	DRM_UNLOCK();

	return EINVAL;
@


1.6
log
@detypedef some more. No functional change.
@
text
@d214 1
a214 21
	struct drm_stats	*stats = data;
	int			 i;

	memset(stats, 0, sizeof(struct drm_stats));
	
	DRM_LOCK();

	for (i = 0; i < dev->counters; i++) {
		if (dev->types[i] == _DRM_STAT_LOCK)
			stats->data[i].value = (dev->lock.hw_lock
			    ? dev->lock.hw_lock->lock : 0);
		else 
			stats->data[i].value = atomic_read(&dev->counts[i]);
		stats->data[i].type  = dev->types[i];
	}
	
	stats->count = dev->counters;

	DRM_UNLOCK();

	return 0;
@


1.5
log
@Apply a light paddling with the knf stick. No binary change.
@
text
@d49 1
a49 1
	drm_unique_t	 *u = data;
d66 3
a68 3
	drm_unique_t *u = data;
	int domain, bus, slot, func, ret;
	char *busid;
d151 3
a153 4
	drm_map_t    *map = data;
	drm_local_map_t    *mapinlist;
	int          idx;
	int	     i = 0;
d187 2
a188 2
	drm_client_t	*client = data;
	struct drm_file	*pt;
d214 2
a215 2
	drm_stats_t *stats = data;
	int i;
d217 1
a217 1
	memset(stats, 0, sizeof(drm_stats_t));
d243 2
a244 3
	drm_set_version_t *sv = data;
	drm_set_version_t ver;
	int if_version;
@


1.4
log
@Switch all instances of malloc/free in the DRM to drm_alloc, drm_free
and drm_calloc.

With the recent change to check overflow in drm_calloc, this means that
all allocations that require multiplication are now checked. Also use
drm_calloc() when zeroing is needed and drop the bzero/memset
afterwards.  Finally, make drm_free() check for NULL, so we don't need
to do so every time.

ok miod@@, deraadt@@
@
text
@d101 2
a102 4
	if ((domain != dev->pci_domain) ||
	    (bus != dev->pci_bus) ||
	    (slot != dev->pci_slot) ||
	    (func != dev->pci_func)) {
d165 1
a165 1
		if (i==idx) {
d196 1
a196 2
		if (i==idx)
		{
d224 1
a224 2
			stats->data[i].value
			    = (dev->lock.hw_lock
d258 2
a259 2
		if (ver.drm_di_major != DRM_IF_MAJOR ||
		    ver.drm_di_minor < 0 || ver.drm_di_minor > DRM_IF_MINOR) {
d262 1
a262 2
		if_version = DRM_IF_VERSION(ver.drm_di_major,
		    ver.drm_dd_minor);
@


1.3
log
@Kill the silly ``drm_device_t'' and ``drm_file_t'' typedefs. just use
``struct drm_device'' and ``struct drm_file'' respectively. Since i'm
changing a lot of prototypes anyway, remove all parameter names from
prototypes, in accordance with style(9) (and sanity).
@
text
@d77 1
a77 1
	busid = malloc(u->unique_len + 1, M_DRM, M_WAITOK);
d82 1
a82 1
		free(busid, M_DRM);
d95 1
a95 1
		free(busid, M_DRM);
d105 1
a105 1
		free(busid, M_DRM);
d136 1
a136 1
	dev->unique = malloc(dev->unique_len + 1, M_DRM, M_NOWAIT);
@


1.2
log
@destatic the static functions, they only make debugging harder.
While i'm here:
remove a couple of debug printfs that shouldn't have gone in anyway.
trowel on some KNF (I really need to get around to sending some of this upstream).
remove some netbsd specific code that netbsd doesn't have anymore.

ok tedu.
@
text
@d38 1
a38 1
int	drm_set_busid(drm_device_t *);
d47 1
a47 1
drm_getunique(drm_device_t *dev, void *data, struct drm_file *file_priv)
d64 1
a64 1
drm_setunique(drm_device_t *dev, void *data, struct drm_file *file_priv)
d125 1
a125 1
drm_set_busid(drm_device_t *dev)
d151 1
a151 1
drm_getmap(drm_device_t *dev, void *data, struct drm_file *file_priv)
d188 1
a188 1
drm_getclient(drm_device_t *dev, void *data, struct drm_file *file_priv)
d190 4
a193 4
	drm_client_t *client = data;
	drm_file_t   *pt;
	int          idx;
	int          i = 0;
d216 1
a216 1
drm_getstats(drm_device_t *dev, void *data, struct drm_file *file_priv)
d246 1
a246 1
drm_setversion(drm_device_t *dev, void *data, struct drm_file *file_priv)
d291 1
a291 1
drm_noop(drm_device_t *dev, void *data, struct drm_file *file_priv)
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d38 2
d46 2
a47 1
int drm_getunique(drm_device_t *dev, void *data, struct drm_file *file_priv)
d63 2
a64 1
int drm_setunique(drm_device_t *dev, void *data, struct drm_file *file_priv)
d124 1
a124 1
static int
d150 2
a151 1
int drm_getmap(drm_device_t *dev, void *data, struct drm_file *file_priv)
d169 3
a171 3
			map->size   = mapinlist->size;
			map->type   = mapinlist->type;
			map->flags  = mapinlist->flags;
d173 1
a173 1
			map->mtrr   = mapinlist->mtrr;
d187 2
a188 1
int drm_getclient(drm_device_t *dev, void *data, struct drm_file *file_priv)
d200 3
a202 3
			client->auth  = pt->authenticated;
			client->pid   = pt->pid;
			client->uid   = pt->uid;
d204 1
a204 1
			client->iocs  = pt->ioctl_count;
d215 2
a216 1
int drm_getstats(drm_device_t *dev, void *data, struct drm_file *file_priv)
d218 2
a219 2
	drm_stats_t  *stats = data;
	int          i;
d228 2
a229 2
				= (dev->lock.hw_lock
				   ? dev->lock.hw_lock->lock : 0);
d245 2
a246 1
int drm_setversion(drm_device_t *dev, void *data, struct drm_file *file_priv)
d290 2
a291 1
int drm_noop(drm_device_t *dev, void *data, struct drm_file *file_priv)
@

