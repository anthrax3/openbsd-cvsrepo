head	1.65;
access;
symbols
	OPENBSD_5_4:1.64.0.2
	OPENBSD_5_4_BASE:1.64
	OPENBSD_5_3:1.62.0.2
	OPENBSD_5_3_BASE:1.62
	OPENBSD_5_2:1.58.0.2
	OPENBSD_5_2_BASE:1.58
	OPENBSD_5_1_BASE:1.57
	OPENBSD_5_1:1.57.0.2
	OPENBSD_5_0:1.55.0.2
	OPENBSD_5_0_BASE:1.55
	OPENBSD_4_9:1.51.0.2
	OPENBSD_4_9_BASE:1.51
	OPENBSD_4_8:1.49.0.2
	OPENBSD_4_8_BASE:1.49
	OPENBSD_4_7:1.34.0.2
	OPENBSD_4_7_BASE:1.34
	OPENBSD_4_6:1.34.0.4
	OPENBSD_4_6_BASE:1.34
	OPENBSD_4_5:1.26.0.2
	OPENBSD_4_5_BASE:1.26
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.65
date	2013.08.12.04.11.52;	author jsg;	state dead;
branches;
next	1.64;

1.64
date	2013.04.02.12.29.43;	author jsg;	state Exp;
branches;
next	1.63;

1.63
date	2013.03.18.12.36.51;	author jsg;	state Exp;
branches;
next	1.62;

1.62
date	2013.01.04.05.31.35;	author jsg;	state Exp;
branches;
next	1.61;

1.61
date	2013.01.02.05.52.12;	author jsg;	state Exp;
branches;
next	1.60;

1.60
date	2012.12.30.12.12.13;	author jsg;	state Exp;
branches;
next	1.59;

1.59
date	2012.08.04.16.28.01;	author ajacoutot;	state Exp;
branches;
next	1.58;

1.58
date	2012.07.20.07.27.36;	author jsg;	state Exp;
branches;
next	1.57;

1.57
date	2012.01.29.22.36.18;	author phessler;	state Exp;
branches;
next	1.56;

1.56
date	2011.08.22.23.12.09;	author haesbaert;	state Exp;
branches;
next	1.55;

1.55
date	2011.06.02.18.22.00;	author weerd;	state Exp;
branches;
next	1.54;

1.54
date	2011.05.30.21.50.46;	author oga;	state Exp;
branches;
next	1.53;

1.53
date	2011.05.02.10.22.13;	author oga;	state Exp;
branches;
next	1.52;

1.52
date	2011.04.24.03.12.05;	author deraadt;	state Exp;
branches;
next	1.51;

1.51
date	2010.09.29.13.32.22;	author oga;	state Exp;
branches;
next	1.50;

1.50
date	2010.09.08.17.19.15;	author deraadt;	state Exp;
branches;
next	1.49;

1.49
date	2010.08.08.20.54.17;	author oga;	state Exp;
branches;
next	1.48;

1.48
date	2010.07.30.13.31.47;	author jsg;	state Exp;
branches;
next	1.47;

1.47
date	2010.07.18.15.42.55;	author oga;	state Exp;
branches;
next	1.46;

1.46
date	2010.07.18.15.30.48;	author oga;	state Exp;
branches;
next	1.45;

1.45
date	2010.07.01.23.11.35;	author oga;	state Exp;
branches;
next	1.44;

1.44
date	2010.07.01.22.39.57;	author oga;	state Exp;
branches;
next	1.43;

1.43
date	2010.04.29.19.12.24;	author robert;	state Exp;
branches;
next	1.42;

1.42
date	2010.04.15.19.17.48;	author marco;	state Exp;
branches;
next	1.41;

1.41
date	2010.04.12.14.30.24;	author oga;	state Exp;
branches;
next	1.40;

1.40
date	2010.04.10.13.49.10;	author oga;	state Exp;
branches;
next	1.39;

1.39
date	2010.04.01.23.24.54;	author robert;	state Exp;
branches;
next	1.38;

1.38
date	2010.03.31.12.16.45;	author oga;	state Exp;
branches;
next	1.37;

1.37
date	2010.03.30.14.45.24;	author oga;	state Exp;
branches;
next	1.36;

1.36
date	2010.03.29.18.07.32;	author oga;	state Exp;
branches;
next	1.35;

1.35
date	2010.03.27.00.09.51;	author oga;	state Exp;
branches;
next	1.34;

1.34
date	2009.05.11.00.06.39;	author oga;	state Exp;
branches;
next	1.33;

1.33
date	2009.04.03.14.30.57;	author oga;	state Exp;
branches;
next	1.32;

1.32
date	2009.04.03.14.16.23;	author oga;	state Exp;
branches;
next	1.31;

1.31
date	2009.04.03.13.47.04;	author oga;	state Exp;
branches;
next	1.30;

1.30
date	2009.04.03.12.25.04;	author oga;	state Exp;
branches;
next	1.29;

1.29
date	2009.03.31.20.05.06;	author oga;	state Exp;
branches;
next	1.28;

1.28
date	2009.03.05.23.08.23;	author oga;	state Exp;
branches;
next	1.27;

1.27
date	2009.03.05.22.57.19;	author oga;	state Exp;
branches;
next	1.26;

1.26
date	2009.02.18.23.41.09;	author oga;	state Exp;
branches;
next	1.25;

1.25
date	2009.02.15.22.53.45;	author oga;	state Exp;
branches;
next	1.24;

1.24
date	2009.02.05.00.25.51;	author oga;	state Exp;
branches;
next	1.23;

1.23
date	2008.12.08.19.06.34;	author kettenis;	state Exp;
branches;
next	1.22;

1.22
date	2008.11.24.23.00.33;	author oga;	state Exp;
branches;
next	1.21;

1.21
date	2008.11.24.07.06.27;	author oga;	state Exp;
branches;
next	1.20;

1.20
date	2008.11.24.04.21.31;	author oga;	state Exp;
branches;
next	1.19;

1.19
date	2008.11.24.03.49.19;	author oga;	state Exp;
branches;
next	1.18;

1.18
date	2008.11.24.03.16.27;	author oga;	state Exp;
branches;
next	1.17;

1.17
date	2008.11.23.22.56.02;	author oga;	state Exp;
branches;
next	1.16;

1.16
date	2008.11.23.21.35.01;	author oga;	state Exp;
branches;
next	1.15;

1.15
date	2008.11.23.20.46.48;	author oga;	state Exp;
branches;
next	1.14;

1.14
date	2008.11.22.22.43.53;	author oga;	state Exp;
branches;
next	1.13;

1.13
date	2008.11.22.21.26.48;	author oga;	state Exp;
branches;
next	1.12;

1.12
date	2008.11.22.20.49.36;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2008.11.22.04.45.21;	author oga;	state Exp;
branches;
next	1.10;

1.10
date	2008.11.22.04.30.41;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2008.11.17.00.30.41;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2008.11.17.00.26.02;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2008.10.07.22.35.30;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.07.21.59.32;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.26.19.33.20;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.11.09.33.01;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.06.19.19.02;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.16.01.02.31;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.65
log
@Add a port of the TTM and Radeon DRM code from Linux 3.8.13.
Includes kernel modesetting, framebuffer console and support
for newer hardware.

Firmware needs to be present for acceleration and in some cases
modesetting to work.  It can be installed via fw_update
or manually via pkg_add.

With lots of help from kettenis@@ some macppc bits from mpi@@
and some ttm refcount/queue bits from FreeBSD.

Thanks to M:Tier and the OpenBSD Foundation for sponsoring this work.
@
text
@/* $OpenBSD: radeon_drv.c,v 1.64 2013/04/02 12:29:43 jsg Exp $ */
/* radeon_drv.c -- ATI Radeon driver -*- linux-c -*-
 * Created: Wed Feb 14 17:10:04 2001 by gareth@@valinux.com
 */
/*-
 * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Gareth Hughes <gareth@@valinux.com>
 *
 */

#include "drmP.h"
#include "drm.h"
#include "radeon_drm.h"
#include "radeon_drv.h"

int	radeondrm_probe(struct device *, void *, void *);
void	radeondrm_attach(struct device *, struct device *, void *);
int	radeondrm_detach(struct device *, int);
int	radeondrm_activate(struct device *, int);
int	radeondrm_ioctl(struct drm_device *, u_long, caddr_t, struct drm_file *);

int radeon_no_wb;

const static struct drm_pcidev radeondrm_pciidlist[] = {
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_M241P,
	    CHIP_RV380|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X300M24,
	    CHIP_RV380|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_M24GL,
	    CHIP_RV380|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X600_RV380,
	    CHIP_RV380|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V3200,
	    CHIP_RV380|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_IGP320,
	    CHIP_RS100|RADEON_IS_IGP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_IGP340,
	    CHIP_RS200|RADEON_IS_IGP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_9500PRO, CHIP_R300},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_AE9700PRO, CHIP_R300},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_AF9600TX, CHIP_R300},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_AGZ1, CHIP_R300},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_AH_9800SE, CHIP_R350},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_AI_9800, CHIP_R350},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_AJ_9800, CHIP_R350},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_AKX2, CHIP_R350},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_9600PRO, CHIP_RV350},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_9600LE, CHIP_RV350},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_9600XT, CHIP_RV350},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_9550, CHIP_RV350},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_ATT2, CHIP_RV350},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_9650, CHIP_RV350},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_AVT2, CHIP_RV350},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_IGP_RS250,
	    CHIP_RS200|RADEON_IS_IGP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_R200_BB, CHIP_R200},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_R200_BC, CHIP_R200},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_IGP320M,
	    CHIP_RS100|RADEON_IS_IGP|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_M6,
	    CHIP_RS200|RADEON_IS_IGP|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_MIGP_RS250,
	    CHIP_RS200|RADEON_IS_IGP|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV250, CHIP_RV250},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_IG9000, CHIP_RV250},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_JHX800,
	    CHIP_R420|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800PRO,
	    CHIP_R420|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800SE,
	    CHIP_R420|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800XT,
	    CHIP_R420|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800,
	    CHIP_R420|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_X3256,
	    CHIP_R420|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_M18,
	    CHIP_R420|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_JOX800SE,
	    CHIP_R420|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800XTPE,
	    CHIP_R420|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_AIW_X800VE,
	    CHIP_R420|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X850XT,
	    CHIP_R420|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X850SE,
	    CHIP_R420|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X850PRO,
	    CHIP_R420|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X850XTPE,
	    CHIP_R420|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_M7LW,
	    CHIP_RV200|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_M7,
	    CHIP_RV200|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_M6LY,
	    CHIP_RV100|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_M6LZ,
	    CHIP_RV100|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_M9LD,
	    CHIP_RV250|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_M9Lf,
	    CHIP_RV250},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_M9Lg,
	    CHIP_RV250|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_R300, CHIP_R300},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON9500_PRO, CHIP_R300},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON9600TX, CHIP_R300},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_X1, CHIP_R300},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_R350, CHIP_R350},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON9800, CHIP_R350},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_9800XT, CHIP_R350},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_X2, CHIP_R350},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV350,
	    CHIP_RV350|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV350NQ,
	    CHIP_RV350|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV350NR,
	    CHIP_RV350|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV350NS,
	    CHIP_RV350|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV350_WS,
	    CHIP_RV350|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_9550,
	    CHIP_RV350|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_AIW,
	    CHIP_R100|RADEON_SINGLE_CRTC},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_QE,
	    CHIP_R100|RADEON_SINGLE_CRTC},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_QF,
	    CHIP_R100|RADEON_SINGLE_CRTC},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_QG,
	    CHIP_R100|RADEON_SINGLE_CRTC},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_QH, CHIP_R200},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_R200_QL, CHIP_R200},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_R200_QM, CHIP_R200},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV200_QW, CHIP_RV200},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV200_QX, CHIP_RV200},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_QY, CHIP_RV100},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_QZ, CHIP_RV100},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_ES1000_1, CHIP_RV100},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_M300_M22,
	    CHIP_RV380|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X600_M24C,
	    CHIP_RV380|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_M44,
	    CHIP_RV380|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800_RV423,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800PRORV423,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800XT_RV423,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800SE_RV423,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800XTPRV430,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800XL_RV430,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800SE_RV430,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800_RV430,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V7100_RV423,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5100_RV423,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_UR_RV423,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_UT_RV423,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5000_M26,
	    CHIP_RV410|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5000_M26b,
	    CHIP_RV410|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X700XL_M26,
	    CHIP_RV410|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X700_M26_1,
	    CHIP_RV410|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X700_M26_2,
	    CHIP_RV410|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X550XTX,
	    CHIP_RV410|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_IGP9100_IGP,
	    CHIP_RS300|RADEON_IS_IGP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_IGP9100,
	    CHIP_RS300|RADEON_IS_IGP|RADEON_IS_MOBILITY},
#if 0
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RS480,
	    CHIP_RS480|RADEON_IS_IGP|RADEON_IS_IGPGART},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RS480_B,
	    CHIP_RS480|RADEON_IS_IGP|RADEON_IS_MOBILITY|RADEON_IS_IGPGART},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RS482,
	    CHIP_RS480|RADEON_IS_IGP|RADEON_IS_MOBILITY|RADEON_IS_IGPGART},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RS482_B,
	    CHIP_RS480|RADEON_IS_IGP|RADEON_IS_MOBILITY|RADEON_IS_IGPGART},
#endif
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RV280_PRO, CHIP_RV280},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RV280, CHIP_RV280},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RV280_B, CHIP_RV280},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RV280_SE_S, CHIP_RV280},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREMV_2200, CHIP_RV280},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_ES1000, CHIP_RV100},
#if 0
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RS400,
	    CHIP_RS400|RADEON_IS_IGP|RADEON_IS_IGPGART},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RS400_B,
	    CHIP_RS400|RADEON_IS_IGP|RADEON_IS_MOBILITY|RADEON_IS_IGPGART},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RC410,
	    CHIP_RS400|RADEON_IS_IGP|RADEON_IS_IGPGART},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RC410_B,
	    CHIP_RS400|RADEON_IS_IGP|RADEON_IS_MOBILITY|RADEON_IS_IGPGART},
#endif
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X300,
	    CHIP_RV380|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X600_RV370,
	    CHIP_RV380|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X550,
	    CHIP_RV380|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_RV370,
	    CHIP_RV380|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREMV_2200_5B65,
	    CHIP_RV380|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RV280_M,
	    CHIP_RV280|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_M9PLUS,
	    CHIP_RV280|RADEON_IS_MOBILITY},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800XT_M28,
	    CHIP_R423|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5100_M28,
	    CHIP_R423|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X800_M28,
	    CHIP_R423|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X850_R480,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X850XTPER480,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X850SE_R480,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800_GTO,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_R480,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X850XT_R480,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800XT_R423,
	    CHIP_R423|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5000_R410,
	    CHIP_RV410|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X700XT_R410,
	    CHIP_RV410|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X700PRO_R410,
	    CHIP_RV410|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X700SE_R410,
	    CHIP_RV410|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X700_PCIE,
	    CHIP_RV410|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X700SE_PCIE,
	    CHIP_RV410|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1800A,
	    CHIP_R520|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1800XT,
	    CHIP_R520|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1800,
	    CHIP_R520|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_M_V7200,
	    CHIP_R520|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_M_V7200,
	    CHIP_R520|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5300,
	    CHIP_R520|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_M_V7100,
	    CHIP_R520|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1800B,
	    CHIP_R520|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1800C,
	    CHIP_R520|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1800D,
	    CHIP_R520|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1800E,
	    CHIP_R520|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1800F,
	    CHIP_R520|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V7300,
	    CHIP_R520|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V7350,
	    CHIP_R520|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1600,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV505_1,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300_X1550,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1550,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_M54_GL,
	    CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1400,
	    CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1550_X1300,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1550_64,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300_M52,
	    CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1300_4A,
	    CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1300_4B,
	    CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1300_4C,
	    CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300_4D,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300_4E,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV505_2,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV505_3,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V3300,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V3350,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300_5E,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1550_64_2,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300X1550,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1600_81,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300PRO,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1450,
	    CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X2300,
	    CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X2300_2,
	    CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1350,
	    CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1350_2,
	    CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1450,
	    CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300_8F,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1550_2,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1350_3,
	    CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREMV_2250,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1550_64_3,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1600_C0,
	    CHIP_RV530|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1650,
	    CHIP_RV530|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1600_PRO,
	    CHIP_RV530|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1600_C3,
	    CHIP_RV530|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5200,
	    CHIP_RV530|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1600_M,
	    CHIP_RV530|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1650_PRO,
	    CHIP_RV530|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1650_PRO2,
	    CHIP_RV530|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1600_CD,
	    CHIP_RV530|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300_XT,
	    CHIP_RV530|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V3400,
	    CHIP_RV530|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV530_M56,
	    CHIP_RV530|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1700,
	    CHIP_RV530|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1700XT,
	    CHIP_RV530|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5200_1,
	    CHIP_RV530|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1700,
	    CHIP_RV530|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X2300HD,
	    CHIP_RV515|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X2300HD,
	    CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X2300HD_1,
	    CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1950_40,
	    CHIP_R580|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_43,
	    CHIP_R580|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1950_44,
	    CHIP_R580|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_45,
	    CHIP_R580|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_46,
	    CHIP_R580|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_47,
	    CHIP_R580|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_48,
	    CHIP_R580|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_49,
	    CHIP_R580|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_4A,
	    CHIP_R580|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_4B,
	    CHIP_R580|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_4C,
	    CHIP_R580|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_4D,
	    CHIP_R580|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_STREAM_PROCESSOR,
	    CHIP_R580|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_4F,
	    CHIP_R580|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1950_PRO,
	    CHIP_RV570|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV560,
	    CHIP_RV560|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV560_1,
	    CHIP_RV560|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1900,
	    CHIP_R580|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV560_2,
	    CHIP_RV560|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1950GT,
	    CHIP_RV570|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV570,
	    CHIP_RV570|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV570_2,
	    CHIP_RV570|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V7400,
	    CHIP_RV570|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV560_3,
	    CHIP_RV560|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RX1650_XT,
	    CHIP_RV560|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1650_1,
	    CHIP_RV560|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV560_4,
	    CHIP_RV560|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_9000IGP,
	    CHIP_RS300|RADEON_IS_IGP|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RS350IGP,
	    CHIP_RS300|RADEON_IS_IGP|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
#if 0
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1250_1,
	    CHIP_RS690|RADEON_IS_IGP|RADEON_NEW_MEMMAP|RADEON_IS_IGPGART},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1250_2,
	    CHIP_RS690|RADEON_IS_IGP|RADEON_NEW_MEMMAP|RADEON_IS_IGPGART},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1250IGP,
	    CHIP_RS690|RADEON_IS_IGP|RADEON_NEW_MEMMAP|RADEON_IS_IGPGART},
#endif
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V4000,
	    CHIP_RV610|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREMV_2260,
	    CHIP_RV610|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_E2400,
	    CHIP_RV610|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD2350,
	    CHIP_RV610|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD2400_PRO,
	    CHIP_RV610|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD2400PROAGP,
	    CHIP_RV610|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD2400_XT,
	    CHIP_RV610|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD2400_M72,
	    CHIP_RV610|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD2400_XT_M,
	    CHIP_RV610|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD2400PROPCI,
	    CHIP_RV610|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREMV_2450,
	    CHIP_RV620|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREMV_2260_1,
	    CHIP_RV620|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREMV_2260_2,
	    CHIP_RV620|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREPRO_V3700,
	    CHIP_RV620|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3400_M82,
	    CHIP_RV620|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3430,
	    CHIP_RV620|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3430_M,
	    CHIP_RV620|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3450,
	    CHIP_RV620|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3450_AGP,
	    CHIP_RV620|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3450_PCI,
	    CHIP_RV620|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3470,
	    CHIP_RV620|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5600,
	    CHIP_RV630|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V3600,
	    CHIP_RV630|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD2600_PRO,
	    CHIP_RV630|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD2600_XT,
	    CHIP_RV630|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD2600_M76,
	    CHIP_RV630|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD2600_XT_M,
	    CHIP_RV630|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD2600XTAGP,
	    CHIP_RV630|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD2600PROAGP,
	    CHIP_RV630|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5700_M,
	    CHIP_RV635|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5725_M,
	    CHIP_RV635|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3600,
	    CHIP_RV635|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3650_AGP,
	    CHIP_RV635|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3650_M,
	    CHIP_RV635|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3650,
	    CHIP_RV635|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3670_M,
	    CHIP_RV635|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V7700,
	    CHIP_RV670|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIRESTREAM_9170,
	    CHIP_RV670|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3690,
	    CHIP_RV670|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3850,
	    CHIP_RV670|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3850_AGP,
	    CHIP_RV670|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3850_M,
	    CHIP_RV670|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3850_X2_M,
	    CHIP_RV670|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3870,
	    CHIP_RV670|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3870_X2,
	    CHIP_RV670|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3870_M,
	    CHIP_RV670|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3870_X2_M,
	    CHIP_RV670|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3000,
	    CHIP_RS780|RADEON_NEW_MEMMAP|RADEON_IS_IGP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3200_1,
	    CHIP_RS780|RADEON_NEW_MEMMAP|RADEON_IS_IGP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3200_2,
	    CHIP_RS780|RADEON_NEW_MEMMAP|RADEON_IS_IGP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD3300,
	    CHIP_RS780|RADEON_NEW_MEMMAP|RADEON_IS_IGP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREPRO_RG220,
	    CHIP_RV710|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4350,
	    CHIP_RV710|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4300_M,
	    CHIP_RV710|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4330_M,
	    CHIP_RV710|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4500_M,
	    CHIP_RV710|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4500_M_2,
	    CHIP_RV710|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4550,
	    CHIP_RV710|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_E4600,
	    CHIP_RV730|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREPRO_V3750,
	    CHIP_RV730|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREPRO_V5700,
	    CHIP_RV730|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREPRO_V7750,
	    CHIP_RV730|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4600,
	    CHIP_RV730|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4650,
	    CHIP_RV730|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4650_M,
	    CHIP_RV730|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4670,
	    CHIP_RV730|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4670_M,
	    CHIP_RV730|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4670_M_2,
	    CHIP_RV730|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREPRO_M5750,
	    CHIP_RV740|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4700,
	    CHIP_RV740|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4770,
	    CHIP_RV740|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4830_M,
	    CHIP_RV740|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4850_M_2,
	    CHIP_RV740|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREPRO_M7740,
	    CHIP_RV740|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREPRO_M7750,
	    CHIP_RV770|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREPRO_RV770,
	    CHIP_RV770|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREPRO_V7760,
	    CHIP_RV770|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREPRO_V8700,
	    CHIP_RV770|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREPRO_V8750,
	    CHIP_RV770|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIRESTREAM_9250,
	    CHIP_RV770|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIRESTREAM_9270,
	    CHIP_RV770|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4800,
	    CHIP_RV770|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4800_2,
	    CHIP_RV770|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4850,
	    CHIP_RV770|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4850_M,
	    CHIP_RV770|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4850_X2_M,
	    CHIP_RV770|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4850_X2,
	    CHIP_RV770|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4870,
	    CHIP_RV770|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4870_X2,
	    CHIP_RV770|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4870_M,
	    CHIP_RV770|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4870_M98,
	    CHIP_RV770|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4890,
	    CHIP_RV770|RADEON_NEW_MEMMAP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4100,
	    CHIP_RS880|RADEON_NEW_MEMMAP|RADEON_IS_IGP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4200,
	    CHIP_RS880|RADEON_NEW_MEMMAP|RADEON_IS_IGP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4250,
	    CHIP_RS880|RADEON_NEW_MEMMAP|RADEON_IS_IGP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4100_M,
	    CHIP_RS880|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP|RADEON_IS_IGP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4200_M,
	    CHIP_RS880|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP|RADEON_IS_IGP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD4290,
	    CHIP_RS880|RADEON_NEW_MEMMAP|RADEON_IS_IGP},
        {0, 0, 0}
};

static struct drm_driver_info radeondrm_driver = {
	.buf_priv_size		= sizeof(drm_radeon_buf_priv_t),
	.file_priv_size		= sizeof(struct drm_radeon_file),
	.firstopen		= radeon_driver_firstopen,
	.open			= radeon_driver_open,
	.ioctl			= radeondrm_ioctl,
	.close			= radeon_driver_close,
	.lastclose		= radeon_driver_lastclose,
	.vblank_pipes		= 2,
	.get_vblank_counter	= radeon_get_vblank_counter,
	.enable_vblank		= radeon_enable_vblank,
	.disable_vblank		= radeon_disable_vblank,
	.irq_install		= radeon_driver_irq_install,
	.irq_uninstall		= radeon_driver_irq_uninstall,
	.dma_ioctl		= radeon_cp_buffers,

	.name			= DRIVER_NAME,
	.desc			= DRIVER_DESC,
	.date			= DRIVER_DATE,
	.major			= DRIVER_MAJOR,
	.minor			= DRIVER_MINOR,
	.patchlevel		= DRIVER_PATCHLEVEL,

	.flags			= DRIVER_AGP | DRIVER_MTRR | DRIVER_SG |
				    DRIVER_DMA | DRIVER_IRQ,
};

int
radeondrm_probe(struct device *parent, void *match, void *aux)
{
	return drm_pciprobe((struct pci_attach_args *)aux, radeondrm_pciidlist);
}

void
radeondrm_attach(struct device *parent, struct device *self, void *aux)
{
	drm_radeon_private_t	*dev_priv = (drm_radeon_private_t *)self;
	struct pci_attach_args	*pa = aux;
	struct vga_pci_bar	*bar;
	const struct drm_pcidev	*id_entry;
	int			 is_agp;

	id_entry = drm_find_description(PCI_VENDOR(pa->pa_id),
	    PCI_PRODUCT(pa->pa_id), radeondrm_pciidlist);
	dev_priv->flags = id_entry->driver_private;
	dev_priv->pc = pa->pa_pc;
	dev_priv->bst = pa->pa_memt;

	bar = vga_pci_bar_info((struct vga_pci_softc *)parent, 0);
	if (bar == NULL) {
		printf(": can't get frambuffer info\n");
		return;
	}
	dev_priv->fb_aper_offset = bar->base;
	dev_priv->fb_aper_size = bar->maxsize;

	bar = vga_pci_bar_info((struct vga_pci_softc *)parent, 2);
	if (bar == NULL) {
		printf(": can't get BAR info\n");
		return;
	}

	dev_priv->regs = vga_pci_bar_map((struct vga_pci_softc *)parent, 
	    bar->addr, 0, 0);
	if (dev_priv->regs == NULL) {
		printf(": can't map mmio space\n");
		return;
	}

	if (pci_intr_map(pa, &dev_priv->ih) != 0) {
		printf(": couldn't map interrupt\n");
		return;
	}
	printf(": %s\n", pci_intr_string(pa->pa_pc, dev_priv->ih));
	mtx_init(&dev_priv->swi_lock, IPL_TTY);

	switch (dev_priv->flags & RADEON_FAMILY_MASK) {
	case CHIP_R100:
	case CHIP_RV200:
	case CHIP_R200:
	case CHIP_R300:
	case CHIP_R350:
	case CHIP_R420:
	case CHIP_R423:
	case CHIP_RV410:
	case CHIP_RV515:
	case CHIP_R520:
	case CHIP_RV570:
	case CHIP_R580:
		dev_priv->flags |= RADEON_HAS_HIERZ;
		break;
	default:
		/* all other chips have no hierarchical z buffer */
		break;
	}

	dev_priv->chip_family = dev_priv->flags & RADEON_FAMILY_MASK;
	if (pci_get_capability(pa->pa_pc, pa->pa_tag, PCI_CAP_AGP, NULL, NULL))
		dev_priv->flags |= RADEON_IS_AGP;
	else if (pci_get_capability(pa->pa_pc, pa->pa_tag,
	    PCI_CAP_PCIEXPRESS, NULL, NULL))
		dev_priv->flags |= RADEON_IS_PCIE;
	else
		dev_priv->flags |= RADEON_IS_PCI;

	DRM_DEBUG("%s card detected\n",
		  ((dev_priv->flags & RADEON_IS_AGP) ? "AGP" :
		  (((dev_priv->flags & RADEON_IS_PCIE) ? "PCIE" : "PCI"))));

	is_agp = pci_get_capability(pa->pa_pc, pa->pa_tag, PCI_CAP_AGP,
	    NULL, NULL);

	TAILQ_INIT(&dev_priv->gart_heap);
	TAILQ_INIT(&dev_priv->fb_heap);

	dev_priv->drmdev = drm_attach_pci(&radeondrm_driver, pa, is_agp, self);

	if (drm_vblank_init((struct drm_device *)dev_priv->drmdev, 2))
		printf(": drm_vblank_init failed\n");
}

int
radeondrm_detach(struct device *self, int flags)
{
	drm_radeon_private_t *dev_priv = (drm_radeon_private_t *)self;

	DRM_DEBUG("\n");

	if (dev_priv->drmdev != NULL) {
		config_detach(dev_priv->drmdev, flags);
		dev_priv->drmdev = NULL;
	}

	if (dev_priv->regs != NULL)
		vga_pci_bar_unmap(dev_priv->regs);

	return (0);
}

int
radeondrm_activate(struct device *arg, int act)
{
	struct drm_radeon_private *dev_priv = (struct drm_radeon_private *)arg;
	struct drm_device	*dev = (struct drm_device *)dev_priv->drmdev;

	switch (act) {
	case DVACT_SUSPEND:
		/* Interrupts still not supported on r600 */
		if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_R600 ||
		    dev->irq_enabled == 0)
			break;
		if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_RS690)
			RADEON_WRITE(R500_DxMODE_INT_MASK, 0);
		RADEON_WRITE(RADEON_GEN_INT_CNTL, 0);
		break;
	case DVACT_RESUME:
		/* Interrupts still not supported on r600 */
		if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_R600 ||
		    dev->irq_enabled == 0)
			break;
		if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_RS690)
			RADEON_WRITE(R500_DxMODE_INT_MASK,
			    dev_priv->r500_disp_irq_reg);
		RADEON_WRITE(RADEON_GEN_INT_CNTL, dev_priv->irq_enable_reg);
		break;
	}

	return (0);
}

struct cfattach radeondrm_ca = {
        sizeof (drm_radeon_private_t), radeondrm_probe, radeondrm_attach, 
	radeondrm_detach, radeondrm_activate
}; 

struct cfdriver radeondrm_cd = {
	NULL, "radeondrm", DV_DULL
}; 

int
radeondrm_ioctl(struct drm_device *dev, u_long cmd, caddr_t data,
    struct drm_file *file_priv)
{
	if (file_priv->authenticated == 1) {
		switch (cmd) {
		case DRM_IOCTL_RADEON_CP_IDLE:
			return (radeon_cp_idle(dev, data, file_priv));
		case DRM_IOCTL_RADEON_CP_RESUME:
			return (radeon_cp_resume(dev));
		case DRM_IOCTL_RADEON_SWAP:
			return (radeon_cp_swap(dev, data, file_priv));
		case DRM_IOCTL_RADEON_CLEAR:
			return (radeon_cp_clear(dev, data, file_priv));
		case DRM_IOCTL_RADEON_TEXTURE:
			return (radeon_cp_texture(dev, data, file_priv));
		case DRM_IOCTL_RADEON_STIPPLE:
			return (radeon_cp_stipple(dev, data, file_priv));
		case DRM_IOCTL_RADEON_CMDBUF:
			return (radeon_cp_cmdbuf(dev, data, file_priv));
		case DRM_IOCTL_RADEON_GETPARAM:
			return (radeon_cp_getparam(dev, data, file_priv));
		case DRM_IOCTL_RADEON_FLIP:
			return (radeon_cp_flip(dev, data, file_priv));
		case DRM_IOCTL_RADEON_ALLOC:
			return (radeon_mem_alloc(dev, data, file_priv));
		case DRM_IOCTL_RADEON_FREE:
			return (radeon_mem_free(dev, data, file_priv));
		case DRM_IOCTL_RADEON_IRQ_EMIT:
			return (radeon_irq_emit(dev, data, file_priv));
		case DRM_IOCTL_RADEON_IRQ_WAIT:
			return (radeon_irq_wait(dev, data, file_priv));
		case DRM_IOCTL_RADEON_SETPARAM:
			return (radeon_cp_setparam(dev, data, file_priv));
		case DRM_IOCTL_RADEON_SURF_ALLOC:
			return (radeon_surface_alloc(dev, data, file_priv));
		case DRM_IOCTL_RADEON_SURF_FREE:
			return (radeon_surface_free(dev, data, file_priv));
		case DRM_IOCTL_RADEON_CS:
			return (radeon_cs_ioctl(dev, data, file_priv));
		}
	}

	if (file_priv->master == 1) {
		switch (cmd) {
		case DRM_IOCTL_RADEON_CP_INIT:
			return (radeon_cp_init(dev, data, file_priv));
		case DRM_IOCTL_RADEON_CP_START:
			return (radeon_cp_start(dev, data, file_priv));
		case DRM_IOCTL_RADEON_CP_STOP:
			return (radeon_cp_stop(dev, data, file_priv));
		case DRM_IOCTL_RADEON_CP_RESET:
			return (radeon_cp_reset(dev, data, file_priv));
		case DRM_IOCTL_RADEON_INDIRECT:
			return (radeon_cp_indirect(dev, data, file_priv));
		case DRM_IOCTL_RADEON_INIT_HEAP:
			return (radeon_mem_init_heap(dev, data, file_priv));
		}
	}
	return (EINVAL);
}

u_int32_t
radeondrm_read_rptr(struct drm_radeon_private *dev_priv, u_int32_t off)
{
	u_int32_t val;

	if (dev_priv->flags & RADEON_IS_AGP) {
		val = bus_space_read_4(dev_priv->ring_rptr->bst,
		    dev_priv->ring_rptr->bsh, off);
	} else {
		val = *(((volatile u_int32_t *)dev_priv->ring_rptr->handle) +
		    (off / sizeof(u_int32_t)));
		val = letoh32(val);
	}
	return (val);
}

void
radeondrm_write_rptr(struct drm_radeon_private *dev_priv, u_int32_t off,
    u_int32_t val)
{
	if (dev_priv->flags & RADEON_IS_AGP) {
		bus_space_write_4(dev_priv->ring_rptr->bst,
		    dev_priv->ring_rptr->bsh, off, val);
	} else
		*(((volatile u_int32_t *)dev_priv->ring_rptr->handle +
		    (off / sizeof(u_int32_t)))) = htole32(val);
}

u_int32_t
radeondrm_get_ring_head(struct drm_radeon_private *dev_priv)
{
	if (dev_priv->writeback_works) {
		return (radeondrm_read_rptr(dev_priv, 0));
	} else {
		if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_R600)
			return (RADEON_READ(R600_CP_RB_RPTR));
		else
			return (RADEON_READ(RADEON_CP_RB_RPTR));
	}
}

void
radeondrm_set_ring_head(struct drm_radeon_private *dev_priv, u_int32_t val)
{
	radeondrm_write_rptr(dev_priv, 0, val);
}

u_int32_t
radeondrm_get_scratch(struct drm_radeon_private *dev_priv, u_int32_t off)
{
	if (dev_priv->writeback_works)
		if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_R600)
			return radeondrm_read_rptr(dev_priv,
			    R600_SCRATCHOFF(off));
		else
			return radeondrm_read_rptr(dev_priv,
			    RADEON_SCRATCHOFF(off));
	else
		if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_R600)
			return RADEON_READ(R600_SCRATCH_REG0 + 4 * off);
		else
			return RADEON_READ(RADEON_SCRATCH_REG0 + 4 * off);
}

void
radeondrm_begin_ring(struct drm_radeon_private *dev_priv, int ncmd)
{
	int align_nr;
	RADEON_VPRINTF("%d\n", ncmd);

	align_nr = RADEON_RING_ALIGN - ((dev_priv->ring.tail + ncmd) &
		(RADEON_RING_ALIGN - 1));
	align_nr += ncmd;

	if (dev_priv->ring.space <= align_nr) {
		radeondrm_commit_ring(dev_priv);
		radeon_wait_ring(dev_priv, ncmd);
	}
	dev_priv->ring.space -= ncmd;
	dev_priv->ring.wspace = ncmd;
	dev_priv->ring.woffset = dev_priv->ring.tail;
}

void
radeondrm_advance_ring(struct drm_radeon_private *dev_priv)
{
	RADEON_VPRINTF("wr=0x%06x, tail = 0x%06x\n", dev_priv->ring.woffset,
	    dev_priv->ring.tail);
	if (((dev_priv->ring.tail + dev_priv->ring.wspace) &
	    dev_priv->ring.tail_mask) != dev_priv->ring.woffset) {
		DRM_ERROR("mismatch: nr %x, write %x\n", ((dev_priv->ring.tail +
		    dev_priv->ring.wspace) & dev_priv->ring.tail_mask),
		    dev_priv->ring.woffset);
	} else
		dev_priv->ring.tail = dev_priv->ring.woffset;
}

void
radeondrm_commit_ring(struct drm_radeon_private *dev_priv)
{
	int		 i, tail_aligned, num_p2;
	u_int32_t	*ring;

	/* check if the ring is padded out to 16-dword alignment */

	tail_aligned = dev_priv->ring.tail & (RADEON_RING_ALIGN - 1);
	if (tail_aligned) {
		num_p2 = RADEON_RING_ALIGN - tail_aligned;

		ring = dev_priv->ring.start;
		/* pad with some CP_PACKET2 */
		for (i = 0; i < num_p2; i++)
			ring[dev_priv->ring.tail + i] = CP_PACKET2();

		dev_priv->ring.tail += i;
		dev_priv->ring.space -= num_p2;
		
	}
	dev_priv->ring.tail &= dev_priv->ring.tail_mask;
	/* XXX 128byte aligned stuff */
	/* flush write combining buffer and writes to ring */
	DRM_MEMORYBARRIER();
	radeondrm_get_ring_head(dev_priv);
	if ((dev_priv->flags & RADEON_FAMILY_MASK) >= CHIP_R600) {
		RADEON_WRITE(R600_CP_RB_WPTR, dev_priv->ring.tail);
		/* read from PCI bus to ensure correct posting */
		RADEON_READ(R600_CP_RB_RPTR);
	} else {
		RADEON_WRITE(RADEON_CP_RB_WPTR, dev_priv->ring.tail);
		/* read from PCI bus to ensure correct posting */
		RADEON_READ(RADEON_CP_RB_RPTR);
	}
}

void
radeondrm_out_ring(struct drm_radeon_private *dev_priv, u_int32_t x)
{
	RADEON_VPRINTF("0x%08x at 0x%x\n", x, dev_priv->ring.woffset);
	dev_priv->ring.start[dev_priv->ring.woffset++] = x;
	dev_priv->ring.woffset &= dev_priv->ring.tail_mask;
}

void
radeondrm_out_ring_table(struct drm_radeon_private *dev_priv, u_int32_t *table,
    int size)
{
	if (dev_priv->ring.woffset + size > dev_priv->ring.tail_mask) {
		int i = dev_priv->ring.tail_mask + 1 - dev_priv->ring.woffset;

		size -= i;
		while (i--)
			dev_priv->ring.start[dev_priv->ring.woffset++] =
			    *table++;
		dev_priv->ring.woffset = 0;
	}
	while (size--)
		dev_priv->ring.start[dev_priv->ring.woffset++] = *table++;
	dev_priv->ring.woffset &= dev_priv->ring.tail_mask;
}
@


1.64
log
@Remove Evergreen ids people have incorrectly added to radeondrm.
There is currently no support for Evergreen/R800. ok mpi@@
@
text
@d1 1
a1 1
/* $OpenBSD: radeon_drv.c,v 1.63 2013/03/18 12:36:51 jsg Exp $ */
@


1.63
log
@Significantly increase the wordlist for ddb hangman,
and update our device independent DRM code and the Intel DRM code
to be mostly in sync with Linux 3.8.3.  Among other things this
brings support for kernel modesetting and enables use of
the rings on gen6+ Intel hardware.

Based on some earlier work from matthieu@@ with some hints from FreeBSD
and with lots of help from kettenis@@ (including a beautiful accelerated
wscons framebuffer console!)

Thanks to M:Tier and the OpenBSD Foundation for sponsoring this work.
@
text
@d1 1
a1 1
/* $OpenBSD: radeon_drv.c,v 1.62 2013/01/04 05:31:35 jsg Exp $ */
a669 2
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD6320,
	    CHIP_RV770|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP|RADEON_IS_IGP},
a681 2
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_HD5450,
	    CHIP_RS880|RADEON_NEW_MEMMAP},
@


1.62
log
@fix a logical or that was inteded to be binary in the last revision
spotted by clang, blindly accepted by gcc...
@
text
@d1 1
a1 1
/* $OpenBSD: radeon_drv.c,v 1.61 2013/01/02 05:52:12 jsg Exp $ */
d689 1
a689 1
static const struct drm_driver_info radeondrm_driver = {
d805 3
@


1.61
log
@Add the remaining Radeon rv610/rv620/rv630/rv635/rv670,
rv710/rv730/rv740/rv770 and rs880 devices linux matches I could find
marketing names for.

ok brynet@@
@
text
@d1 1
a1 1
/* $OpenBSD: radeon_drv.c,v 1.60 2012/12/30 12:12:13 jsg Exp $ */
d683 1
a683 1
	    CHIP_RS880||RADEON_NEW_MEMMAP|RADEON_IS_IGP},
@


1.60
log
@add Radeon HD4550
from/tested by James Ballantine
@
text
@d1 1
a1 1
/* $OpenBSD: radeon_drv.c,v 1.59 2012/08/04 16:28:01 ajacoutot Exp $ */
d486 12
d500 14
d516 4
d522 4
d528 4
d538 14
d558 6
d566 14
d588 2
d592 4
d598 2
d602 10
d614 2
d618 34
d654 6
d662 4
d672 2
d678 2
d682 2
@


1.59
log
@PCI_PRODUCT_ATI_RADEON_X1250 -> PCI_PRODUCT_ATI_RADEON_X1250_{1,2}

prodded by matthieu@@
@
text
@d1 1
a1 1
/* $OpenBSD: radeon_drv.c,v 1.58 2012/07/20 07:27:36 jsg Exp $ */
d520 2
@


1.58
log
@match on Mobility Radeon HD2600
from Denis Lapshin, ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: radeon_drv.c,v 1.57 2012/01/29 22:36:18 phessler Exp $ */
d479 3
a481 1
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1250,
@


1.57
log
@According to the X.org driver, the Evergreen series of chips are the
same as R7xx.  So, set the 'Radeon HD 6320' card to RV770.

OK matthieu@@
@
text
@d1 1
a1 1
/* $OpenBSD: radeon_drv.c,v 1.56 2011/08/22 23:12:09 haesbaert Exp $ */
d496 2
@


1.56
log
@Add support for Radeon 4250.
This, together with an updated xorg driver makes my drm/XVideo work.
Originally from Nigel Taylor.

ok oga@@ mcbride@@
@
text
@d1 1
a1 1
/* $OpenBSD: radeon_drv.c,v 1.55 2011/06/02 18:22:00 weerd Exp $ */
d528 2
@


1.55
log
@Add $OpenBSD$ after oga said 'go ahead and fix that'

'go for it' oga@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d529 2
@


1.54
log
@Add RADEON_CS ioctl support for r600 and r700.

This is a faked up version of the gem command submission method for r600
required for OpenGL support on these chipsets.

Currently support is not perfect. since these chips have a rather funky
ringbuffer based interrupt method which this code does not yet support so
interrupt based polling methods must be turned off in mesa.

I've not found a good way which to do that per-driver, so until I work
that out I the following .drirc (or /etc/drirc) chunk (provided by
Brynet after I was too slack to provide it myself) will be needed:

<driconf>
        <device screen="0" driver="r600">
                <application name="all">
                        <option name="fthrottle_mode" value="0"/>
                        <option name="vblank_mode" value="0"/>
                </application>
        </device>
</driconf>


Tested by many on tech@@. While it provided more problems, this diff made
espie@@ stop nagging me when he finally found out it existed.
@
text
@d1 1
@


1.53
log
@Radeon HD3000; from Pedro la Peu.
@
text
@d750 2
d805 1
a805 1
	if (dev_priv->writeback_works)
d807 6
a812 2
	else
		return (RADEON_READ(RADEON_CP_RB_RPTR));
@


1.52
log
@match Radeon HD5450 on the kernel side; Mark Peoples
@
text
@d503 2
@


1.51
log
@Radeon HD4200 Mobility; from brynet. Some flags tweaks from me.
@
text
@d529 2
@


1.50
log
@better to break out of the cases
@
text
@d527 2
@


1.49
log
@suspend/resume handler for radeondrm

All the software state is in the xserver, so all we can do is save
restore the interrupt enable bits (which are expected to persist).

tested by sthen. ok deraadt@@.
@
text
@d677 1
a677 1
			return (0);
d686 1
a686 1
			return (0);
@


1.48
log
@The device table entry for HD3470 was incorrectly using a logical or
instead of a binary or.  Found via lint.
ok oga@@
@
text
@d40 1
d666 31
d699 1
a699 1
	radeondrm_detach
@


1.47
log
@Radeon HD4670, from Henry Precheur; thanks!
@
text
@d489 1
a489 1
	    CHIP_RV620||RADEON_NEW_MEMMAP},
@


1.46
log
@Radeon HD4200 (needs a newer radeon X driver than in tree though),
tested by stsp@@.
@
text
@d514 2
@


1.45
log
@Mobility hd4870 works, add it.

From jcr
@
text
@d522 2
@


1.44
log
@Another radeon hd3200.

from brad
@
text
@d518 2
@


1.43
log
@add radeon hd2600 xt
@
text
@d504 2
@


1.42
log
@Use IPL_TTY instead of IPB_BIO as suggested by oga.

Tested by me and mlarkin on amd64 and i386
ok oga
@
text
@d492 2
a517 1

@


1.41
log
@Radeon HD3200 works; from kili@@.
@
text
@d594 1
a594 1
	mtx_init(&dev_priv->swi_lock, IPL_BIO);
@


1.40
log
@Add radeon 4850; from Sviatoslav Chagaev  (slava at zb dot lv), ta.
@
text
@d500 2
@


1.39
log
@Add PCI_PRODUCT_ATI_RADEON_HD4500_M to the list
@
text
@d508 2
@


1.38
log
@Radeon HD2400 XT works. Tested by Dennis den Brok; thanks!
@
text
@d504 2
@


1.37
log
@Support Radeon Mobility HD3670; James Thackray. Thanks!
@
text
@d482 2
@


1.36
log
@Add Radeon HD360 Mobility.

Info from Mitja.
@
text
@d494 2
@


1.35
log
@DRM for R600 and R700 chipsets.

note, only the pcidevs for those chipsets that have been tested are
enabled for now. Please contact me if you have a r600 or r700 that does
not attach radeondrm. Only the 2D/Xv bits are here. I'm ambivalent about
the implementation of the RADEON_CS ioctl for OpenGL since that was
originally kernel-modesetting only. When we update mesa I shall think
about (and test) it.

Tested by quite a number. Zero bad reports. Nagged perpetually by
robert@@ (and probably others) for months now.
@
text
@d490 2
@


1.34
log
@Rework the pcigart stuff somewhat.

firstly: move the pcigart initialisation in radeon_cp.c into its own
function to avoid the horrible nesting and make it more readable.

secondly: make the pcigart code more intelligent depending on whether
the gart table is in pci memory, or system memory. In the former case we
use the bus_space functions and thus don't need BUS_SPACE_LINEAR, while
i'm here, stop using the drm wrapper functions for mapping (which
require a drm_local_map structure, which will die eventually) and just
use bus_space_map itself.

tested on pcie (in framebuffer memory) here on my x800. tested on an
i386 agp card forced to pci mode by sthen.  Doesn't make IGP chips
worse, doesn't make them better either (tested on a rs690).

basic idea from a commit "upstream" a while ago. All the code from yours
truly.
@
text
@d482 23
d760 6
a765 1
		return (radeondrm_read_rptr(dev_priv, RADEON_SCRATCHOFF(off)));
d767 4
a770 1
		return (RADEON_READ( RADEON_SCRATCH_REG0 + 4*(off) ));
d776 1
d778 6
a783 1
	if (dev_priv->ring.space <= ncmd) {
d809 20
d832 9
a840 3
	RADEON_WRITE(RADEON_CP_RB_WPTR, dev_priv->ring.tail);
	/* read from PCI bus to ensure correct posting */
	RADEON_READ(RADEON_CP_RB_RPTR);
@


1.33
log
@detypedef drm_pci_id_list_t.
@
text
@d531 1
@


1.32
log
@Sprinkle some const correctness for the pciid lists. From mickey ages
ago.
@
text
@d44 1
a44 1
const static drm_pci_id_list_t radeondrm_pciidlist[] = {
d524 1
a524 1
	const drm_pci_id_list_t	*id_entry;
@


1.31
log
@Remove dev->irq_lock, the drm_irq_handler_wrap irq handler, and remove
the dev->driver irq_handler member since we now don't need to know.
Shaves a few bytes, and makes me happy.
@
text
@d44 1
a44 1
static drm_pci_id_list_t radeondrm_pciidlist[] = {
d524 1
a524 1
	drm_pci_id_list_t	*id_entry;
@


1.30
log
@Add a lock to protect races for the software interrupt on radeon chips
(vblank is already protected by that subsystem). Also, do all checks for
the correct software interrupt having fired inside DRM_WAIT_ON(), since
it won't sleep if it's already passed it doesn't gain us much (skips one
lock grab).  Finally, establish the interrupt with only the main radeon
irq handler, don't bother with drm_irq_wrap. bunch of knf while i'm in
here.
@
text
@a498 1
	.irq_handler		= radeon_driver_irq_handler,
@


1.29
log
@remove the drm_read and drm_write functions. instead just do the
conditional on whether we treat the data like memspace or system memory
into the one driver that needs this.

Something similar was done upstream a while back.
@
text
@d559 1
@


1.28
log
@De-macro the ring manipulation macros in favour of functions. Saves a
large pile of space.

Tested by several, thanks.
@
text
@d689 52
d773 1
a773 1
	GET_RING_HEAD(dev_priv);
@


1.27
log
@Kill a bunch of (long long long) dead ioctls.

Shaves some bytes.
@
text
@d688 64
@


1.26
log
@Disable all IGPGART chipsets in radeondrm for release.

The RS480 is just fucking evil, the RS690 works ONCE but doesn't on
reboot, and i've never heard about a RS400 being tested, so disable that
too for safety.

This is so that only working chipsets make release, if I just removed
your working chipset, please let me know.

deraadt@@ requested that I do this now, not later.
@
text
@a638 4
		case DRM_IOCTL_RADEON_RESET:
			return (radeon_engine_reset(dev, data, file_priv));
		case DRM_IOCTL_RADEON_FULLSCREEN:
			return (0); /* oh so deprecated */
a642 4
		case DRM_IOCTL_RADEON_VERTEX:
			return (radeon_cp_vertex(dev, data, file_priv));
		case DRM_IOCTL_RADEON_INDICES:
			return (radeon_cp_indices(dev, data, file_priv));
a646 2
		case DRM_IOCTL_RADEON_VERTEX2:
			return (radeon_cp_vertex2(dev, data, file_priv));
@


1.25
log
@radeon_do_cp_resume was only called in one place (and that function just
did that one function call), so instead inline it in place.
@
text
@d210 1
d219 1
d226 1
d235 1
d476 1
d481 1
@


1.24
log
@Merge the static block allocation code from {i915,radeon}_mem.c into
non-static code that's shared between both.  While i'm here convert them
to TAILQ.

Eventually, both of these will die, but until then I'd rather shave the
space in the kernel.

Tested on radeon and intel.
@
text
@d632 1
a632 1
			return (radeon_cp_resume(dev, data, file_priv));
@


1.23
log
@Make the various drm drivers print the interrupt they're using.

ok oga@@
@
text
@d590 3
@


1.22
log
@Work around the stupidity of radeondrm by double checking that things are
running before we play with things.

Lots more cleanup needed, but now you can shut X without it crashing.
@
text
@d552 1
@


1.21
log
@do the same for struct drm_file (file_priv) as previously done for
dma_bufs; allow the driver to provide the size and not have the private
data pointer.  only radeon only needs this so far, but intel with GEM
also needs it.

Postclose was only used for freeing said private data, so this allows me
to remove the postclose callback and rename preclose to close.
@
text
@d632 1
a632 1
			return (radeon_fullscreen(dev, data, file_priv));
@


1.20
log
@change drm_attach_mi to drm_attach_pci. we take the pci_attach_args, and
setup the drm_attach_args with the needed information.

require interface version 1.1 libdrm has been requesting it for ages),
which means that we can set the busid string at attach time. (generated in
drm_attach_pci), also pass in the interrupt line and bst.

Now we don't need dev->pa at all, so remove it, finally.
@
text
@d481 1
d485 1
a485 2
	.preclose		= radeon_driver_preclose,
	.postclose		= radeon_driver_postclose,
@


1.19
log
@make device works out if it's agp and tells the drm driver, not the
other way round. More dev->pa reduction
@
text
@d589 1
a589 2
	dev_priv->drmdev = drm_attach_mi(&radeondrm_driver, pa->pa_dmat,
	    pa, is_agp, self);
@


1.18
log
@oops. Use the correct struct member to map so that radeon doesn't panic
on X startup.

found by ckuethe@@
@
text
@d520 1
d586 5
a590 1
	dev_priv->drmdev = drm_attach_mi(&radeondrm_driver, pa->pa_dmat, pa, self);
@


1.17
log
@pass in the dmat when we attach the drm driver. reduces pci dependancy.
@
text
@d532 1
a532 1
	dev_priv->fb_aper_size = bar->size;
d541 1
a541 1
	    bar->addr, bar->size, 0);
@


1.16
log
@Map device interrupts in the attach routine. and remove more need for
dev->pa by doing the pci_intr_establish/disestablish dance in the driver
function, not in drm. This removes the need for
interrupt_{pre,post}install callbacks, instead just provide a
interrupt_install() callback.
@
text
@d585 1
a585 1
	dev_priv->drmdev = drm_attach_mi(&radeondrm_driver, pa, self);
@


1.15
log
@Move vblank data allocation to happening at attach, not at irq enable.
just put a vblank_pipes argument to the driver structure which tells us
how many to set up

this means that intel doesn't lose all vblank count on vtswitch (it
disables the interrupt there), i've heard of a few uvm_faults where this
happens as well as things just going wrong.

This was suggested by Keith Packard who provided a different diff for
drm.git.
@
text
@d491 1
a491 2
	.irq_preinstall		= radeon_driver_irq_preinstall,
	.irq_postinstall	= radeon_driver_irq_postinstall,
d524 1
d544 5
@


1.14
log
@Make all drm drivers map their mmio register space on attach instead of
using the drm_maps interface (this was done for inteldrm a few days
ago).  All drivers now ignore the mmio_offset argument that the init
ioctl takes.

This clears up the code and makes sure that drm_ioremap_core() doesn't
need the vga_pci_map inteface anymore, so we don't have to pass in the
vga softc anymore. We also get to kill the drm_resource_{start,length}
linux-alike functions since we just calculate all the requisite offsets
at startup and cache those we need. This now means that technically the
only driver that needs the vga_pci_map api is inteldrm (due to sharing
with intagp issues), though this diff doesn't convert them over.
@
text
@d487 1
@


1.13
log
@Move the drm drivers over from:

vga1 at pci0
inteldrm0 at vga1

to

vga1 at pci0
inteldrm0 at vga1
drm0 at inteldrm0

i.e. a similar scheme to audio(4) where the interface attaches on top of
the wildly different drivers. This helps to clean up the code a lot
(more is coming) and help me start to move drm to being essentially bus
independent, which will help in the future.
@
text
@d518 1
d525 21
d579 1
a579 1
	dev_priv->drmdev = drm_attach_mi(&radeondrm_driver, pa, parent, self);
d593 3
@


1.12
log
@Remove the driver->load callback and just do all the initialization in
the attach function. First step towards splitting drm off as it's own
(bus independant) device, as it should be.
@
text
@d510 1
a510 1
	return drm_probe((struct pci_attach_args *)aux, radeondrm_pciidlist);
d516 1
a517 2
	struct drm_device	*dev = (struct drm_device *)self;
	drm_radeon_private_t	*dev_priv;
a519 6
	dev_priv = drm_calloc(1, sizeof(drm_radeon_private_t), DRM_MEM_DRIVER);
	if (dev_priv == NULL)
		return;

	dev->dev_private = (void *)dev_priv;

d557 1
a557 2
	dev->driver = &radeondrm_driver;
	return drm_attach(parent, self, pa);
d563 1
a563 2
	struct drm_device *dev = (struct drm_device *)self;
	drm_radeon_private_t *dev_priv = dev->dev_private;
a565 1
	drm_free(dev_priv, sizeof(*dev_priv), DRM_MEM_DRIVER);
d567 6
a572 2
	dev->dev_private = NULL;
	return (drm_detach(self, flags));
d576 2
a577 2
        sizeof (struct drm_device), radeondrm_probe, radeondrm_attach, 
	radeondrm_detach, drm_activate
@


1.11
log
@Remove the strings from the pcidevs arrays. they are no longer needed and are
just wasting space.
@
text
@d39 1
d44 1
a44 1
static drm_pci_id_list_t radeon_pciidlist[] = {
d479 1
a479 1
static const struct drm_driver_info radeon_driver = {
a480 2
	.load			= radeon_driver_load,
	.unload			= radeon_driver_unload,
d510 1
a510 1
	return drm_probe((struct pci_attach_args *)aux, radeon_pciidlist);
d516 55
a570 1
	struct pci_attach_args *pa = aux;
d572 4
d577 2
a578 2
	dev->driver = &radeon_driver;
	return drm_attach(parent, self, pa, radeon_pciidlist);
d583 1
a583 1
	drm_detach, drm_activate
@


1.10
log
@switch all of the drm drivers over to using the defines from pcidevs.

Furthermore, move the list of pcidevs from drm_pciids.h (in macros!), to
the array in the driver file. The strings are left in the array for now, but
will go in the next commit
@
text
@d44 432
a475 237
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_M241P, CHIP_RV380|RADEON_IS_MOBILITY, "ATI Radeon Mobility X600 M24"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X300M24, CHIP_RV380|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Radeon Mobility X300 M24"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_M24GL, CHIP_RV380|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI FireGL M24 GL"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X600_RV380, CHIP_RV380|RADEON_NEW_MEMMAP, "ATI Radeon RV380 X600"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V3200, CHIP_RV380|RADEON_NEW_MEMMAP, "ATI FireGL V3200 RV380"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_IGP320, CHIP_RS100|RADEON_IS_IGP, "ATI Radeon RS100 IGP 320"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_IGP340, CHIP_RS200|RADEON_IS_IGP, "ATI Radeon RS200 IGP 340"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_9500PRO, CHIP_R300, "ATI Radeon AD 9500"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_AE9700PRO, CHIP_R300, "ATI Radeon AE 9700 Pro"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_AF9600TX, CHIP_R300, "ATI Radeon AF R300 9600TX"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_AGZ1, CHIP_R300, "ATI FireGL AG Z1"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_AH_9800SE, CHIP_R350, "ATI Radeon AH 9800 SE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_AI_9800, CHIP_R350, "ATI Radeon AI 9800"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_AJ_9800, CHIP_R350, "ATI Radeon AJ 9800"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_AKX2, CHIP_R350, "ATI FireGL AK X2"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_9600PRO, CHIP_RV350, "ATI Radeon AP 9600"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_9600LE, CHIP_RV350, "ATI Radeon AQ 9600 SE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_9600XT, CHIP_RV350, "ATI Radeon AR 9600 XT"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_9550, CHIP_RV350, "ATI Radeon AS 9550"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_ATT2, CHIP_RV350, "ATI FireGL AT T2"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_9650, CHIP_RV350, "ATI Radeon 9650"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_AVT2, CHIP_RV350, "ATI FireGL AV RV360 T2"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_IGP_RS250, CHIP_RS200|RADEON_IS_IGP, "ATI Radeon RS250 IGP"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_R200_BB, CHIP_R200, "ATI Radeon BB R200 AIW 8500DV"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_R200_BC, CHIP_R200, "ATI Radeon BC R200"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_IGP320M, CHIP_RS100|RADEON_IS_IGP|RADEON_IS_MOBILITY, "ATI Radeon RS100 Mobility U1"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_M6, CHIP_RS200|RADEON_IS_IGP|RADEON_IS_MOBILITY, "ATI Radeon RS200 Mobility IGP 340M"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_MIGP_RS250, CHIP_RS200|RADEON_IS_IGP|RADEON_IS_MOBILITY, "ATI Radeon RS250 Mobility IGP"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV250, CHIP_RV250, "ATI Radeon If RV250 9000"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_IG9000, CHIP_RV250, "ATI Radeon Ig RV250 9000"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_JHX800, CHIP_R420|RADEON_NEW_MEMMAP, "ATI Radeon JH R420 X800"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800PRO, CHIP_R420|RADEON_NEW_MEMMAP, "ATI Radeon JI R420 X800 Pro"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800SE, CHIP_R420|RADEON_NEW_MEMMAP, "ATI Radeon JJ R420 X800 SE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800XT, CHIP_R420|RADEON_NEW_MEMMAP, "ATI Radeon JK R420 X800 XT"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800, CHIP_R420|RADEON_NEW_MEMMAP, "ATI Radeon JL R420 X800"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_X3256, CHIP_R420|RADEON_NEW_MEMMAP, "ATI FireGL JM X3-256"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_M18, CHIP_R420|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Radeon JN R420 Mobility M18"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_JOX800SE, CHIP_R420|RADEON_NEW_MEMMAP, "ATI Radeon JO R420 X800 SE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800XTPE, CHIP_R420|RADEON_NEW_MEMMAP, "ATI Radeon JP R420 X800 XT PE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_AIW_X800VE, CHIP_R420|RADEON_NEW_MEMMAP, "ATI Radeon JT R420 AIW X800 VE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X850XT, CHIP_R420|RADEON_NEW_MEMMAP, "ATI Radeon R481 X850 XT"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X850SE, CHIP_R420|RADEON_NEW_MEMMAP, "ATI Radeon R481 X850 SE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X850PRO, CHIP_R420|RADEON_NEW_MEMMAP, "ATI Radeon R481 X850 Pro"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X850XTPE, CHIP_R420|RADEON_NEW_MEMMAP, "ATI Radeon R481 X850 XT PE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_M7LW, CHIP_RV200|RADEON_IS_MOBILITY, "ATI Radeon LW RV200 Mobility 7500 M7"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_M7, CHIP_RV200|RADEON_IS_MOBILITY, "ATI Radeon LX RV200 Mobility FireGL 7800 M7"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_M6LY, CHIP_RV100|RADEON_IS_MOBILITY, "ATI Radeon LY RV100 Mobility M6"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_M6LZ, CHIP_RV100|RADEON_IS_MOBILITY, "ATI Radeon LZ RV100 Mobility M6"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_M9LD, CHIP_RV250|RADEON_IS_MOBILITY, "ATI Radeon Ld RV250 Mobility 9000 M9"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_M9Lf, CHIP_RV250, "ATI Radeon Lf RV250 Mobility 9000 M9 / FireMV 2400 PCI"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_M9Lg, CHIP_RV250|RADEON_IS_MOBILITY, "ATI Radeon Lg RV250 Mobility 9000 M9"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_R300, CHIP_R300, "ATI Radeon ND R300 9700 Pro"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON9500_PRO, CHIP_R300, "ATI Radeon NE R300 9500 Pro / 9700"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON9600TX, CHIP_R300, "ATI Radeon NF R300 9600TX"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_X1, CHIP_R300, "ATI Radeon NG R300 FireGL X1"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_R350, CHIP_R350, "ATI Radeon NH R350 9800 Pro"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON9800, CHIP_R350, "ATI Radeon NI R350 9800"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_9800XT, CHIP_R350, "ATI Radeon NJ R360 9800 XT"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_X2, CHIP_R350, "ATI FireGL NK X2"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV350, CHIP_RV350|RADEON_IS_MOBILITY, "ATI Radeon RV350 Mobility 9600 M10 NP"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV350NQ, CHIP_RV350|RADEON_IS_MOBILITY, "ATI Radeon RV350 Mobility 9600 M10 NQ"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV350NR, CHIP_RV350|RADEON_IS_MOBILITY, "ATI Radeon RV350 Mobility 9600 M11 NR"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV350NS, CHIP_RV350|RADEON_IS_MOBILITY, "ATI Radeon RV350 Mobility 9600 M10 NS"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV350_WS, CHIP_RV350|RADEON_IS_MOBILITY, "ATI FireGL T2/T2e"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_9550, CHIP_RV350|RADEON_IS_MOBILITY, "ATI Radeon Mobility 9550"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_AIW, CHIP_R100|RADEON_SINGLE_CRTC, "ATI Radeon QD R100"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_QE, CHIP_R100|RADEON_SINGLE_CRTC, "ATI Radeon QE R100"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_QF, CHIP_R100|RADEON_SINGLE_CRTC, "ATI Radeon QF R100"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_QG, CHIP_R100|RADEON_SINGLE_CRTC, "ATI Radeon QG R100"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_QH, CHIP_R200, "ATI Radeon QH R200 8500"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_R200_QL, CHIP_R200, "ATI Radeon QL R200 8500 LE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_R200_QM, CHIP_R200, "ATI Radeon QM R200 9100"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV200_QW, CHIP_RV200, "ATI Radeon QW RV200 7500"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV200_QX, CHIP_RV200, "ATI Radeon QX RV200 7500"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_QY, CHIP_RV100, "ATI Radeon QY RV100 7000/VE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_QZ, CHIP_RV100, "ATI Radeon QZ RV100 7000/VE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_ES1000_1, CHIP_RV100, "ATI ES1000 RN50"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_M300_M22, CHIP_RV380|RADEON_IS_MOBILITY, "ATI Radeon Mobility X300 M22"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X600_M24C, CHIP_RV380|RADEON_IS_MOBILITY, "ATI Radeon Mobility X600 SE M24C"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_M44, CHIP_RV380|RADEON_IS_MOBILITY, "ATI FireGL M22 GL 5464"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800_RV423, CHIP_R423|RADEON_NEW_MEMMAP, "ATI Radeon R423 X800"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800PRORV423, CHIP_R423|RADEON_NEW_MEMMAP, "ATI Radeon R423 X800 Pro"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800XT_RV423, CHIP_R423|RADEON_NEW_MEMMAP, "ATI Radeon R423 X800 XT PE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800SE_RV423, CHIP_R423|RADEON_NEW_MEMMAP, "ATI Radeon R423 X800 SE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800XTPRV430, CHIP_R423|RADEON_NEW_MEMMAP, "ATI Radeon R430 X800 XTP"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800XL_RV430, CHIP_R423|RADEON_NEW_MEMMAP, "ATI Radeon R430 X800 XL"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800SE_RV430, CHIP_R423|RADEON_NEW_MEMMAP, "ATI Radeon R430 X800 SE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800_RV430, CHIP_R423|RADEON_NEW_MEMMAP, "ATI Radeon R430 X800"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V7100_RV423, CHIP_R423|RADEON_NEW_MEMMAP, "ATI FireGL V7100 R423"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5100_RV423, CHIP_R423|RADEON_NEW_MEMMAP, "ATI FireGL V5100 R423 UQ"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_UR_RV423, CHIP_R423|RADEON_NEW_MEMMAP, "ATI FireGL unknown R423 UR"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_UT_RV423, CHIP_R423|RADEON_NEW_MEMMAP, "ATI FireGL unknown R423 UT"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5000_M26, CHIP_RV410|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility FireGL V5000 M26"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5000_M26b, CHIP_RV410|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility FireGL V5000 M26"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X700XL_M26, CHIP_RV410|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Radeon Mobility X700 XL M26"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X700_M26_1, CHIP_RV410|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Radeon Mobility X700 M26"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X700_M26_2, CHIP_RV410|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Radeon Mobility X700 M26"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X550XTX, CHIP_RV410|RADEON_NEW_MEMMAP, "ATI Radeon X550XTX"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_IGP9100_IGP, CHIP_RS300|RADEON_IS_IGP, "ATI Radeon RS300 9100 IGP"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_IGP9100, CHIP_RS300|RADEON_IS_IGP|RADEON_IS_MOBILITY, "ATI Radeon RS300 Mobility IGP"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RS480, CHIP_RS480|RADEON_IS_IGP|RADEON_IS_IGPGART, "ATI RS480 XPRESS 200G"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RS480_B, CHIP_RS480|RADEON_IS_IGP|RADEON_IS_MOBILITY|RADEON_IS_IGPGART, "ATI Radeon XPRESS 200M 5955"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RS482, CHIP_RS480|RADEON_IS_IGP|RADEON_IS_MOBILITY|RADEON_IS_IGPGART, "ATI Radeon RS482 XPRESS 200"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RS482_B, CHIP_RS480|RADEON_IS_IGP|RADEON_IS_MOBILITY|RADEON_IS_IGPGART, "ATI Radeon RS485 XPRESS 1100 IGP"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RV280_PRO, CHIP_RV280, "ATI Radeon RV280 9250"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RV280, CHIP_RV280, "ATI Radeon RV280 9200"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RV280_B, CHIP_RV280, "ATI Radeon RV280 9200"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RV280_SE_S, CHIP_RV280, "ATI Radeon RV280 9200 SE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREMV_2200, CHIP_RV280, "ATI FireMV 2200 PCI"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_ES1000, CHIP_RV100, "ATI ES1000 RN50"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RS400, CHIP_RS400|RADEON_IS_IGP|RADEON_IS_IGPGART, "ATI Radeon XPRESS 200 5A41 (PCIE)"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RS400_B, CHIP_RS400|RADEON_IS_IGP|RADEON_IS_MOBILITY|RADEON_IS_IGPGART, "ATI Radeon XPRESS 200M 5A42 (PCIE)"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RC410, CHIP_RS400|RADEON_IS_IGP|RADEON_IS_IGPGART, "ATI Radeon RC410 XPRESS 200"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RC410_B, CHIP_RS400|RADEON_IS_IGP|RADEON_IS_MOBILITY|RADEON_IS_IGPGART, "ATI Radeon RC410 XPRESS 200M"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X300, CHIP_RV380|RADEON_NEW_MEMMAP, "ATI Radeon RV370 X300 SE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X600_RV370, CHIP_RV380|RADEON_NEW_MEMMAP, "ATI Radeon RV370 X600 Pro"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X550, CHIP_RV380|RADEON_NEW_MEMMAP, "ATI Radeon RV370 X550"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_RV370, CHIP_RV380|RADEON_NEW_MEMMAP, "ATI FireGL V3100 (RV370) 5B64"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREMV_2200_5B65, CHIP_RV380|RADEON_NEW_MEMMAP, "ATI FireMV 2200 PCIE (RV370) 5B65"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RV280_M, CHIP_RV280|RADEON_IS_MOBILITY, "ATI Radeon RV280 Mobility"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_M9PLUS, CHIP_RV280|RADEON_IS_MOBILITY, "ATI Radeon RV280 Mobility"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800XT_M28, CHIP_R423|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X800 XT M28"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5100_M28, CHIP_R423|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility FireGL V5100 M28"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X800_M28, CHIP_R423|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X800 M28"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X850_R480, CHIP_R423|RADEON_NEW_MEMMAP, "ATI Radeon R480 X850"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X850XTPER480, CHIP_R423|RADEON_NEW_MEMMAP, "ATI Radeon R480 X850 XT PE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X850SE_R480, CHIP_R423|RADEON_NEW_MEMMAP, "ATI Radeon R480 X850 SE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800_GTO, CHIP_R423|RADEON_NEW_MEMMAP, "ATI Radeon R480 X850 Pro"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_R480, CHIP_R423|RADEON_NEW_MEMMAP, "ATI unknown Radeon / FireGL R480"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X850XT_R480, CHIP_R423|RADEON_NEW_MEMMAP, "ATI Radeon R480 X850 XT"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X800XT_R423, CHIP_R423|RADEON_NEW_MEMMAP, "ATI Radeon R423 X800 XT"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5000_R410, CHIP_RV410|RADEON_NEW_MEMMAP, "ATI FireGL V5000 RV410"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X700XT_R410, CHIP_RV410|RADEON_NEW_MEMMAP, "ATI Radeon RV410 X700 XT"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X700PRO_R410, CHIP_RV410|RADEON_NEW_MEMMAP, "ATI Radeon RV410 X700 Pro"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X700SE_R410, CHIP_RV410|RADEON_NEW_MEMMAP, "ATI Radeon RV410 X700 SE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X700_PCIE, CHIP_RV410|RADEON_NEW_MEMMAP, "ATI Radeon RV410 X700"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X700SE_PCIE, CHIP_RV410|RADEON_NEW_MEMMAP, "ATI Radeon RV410 X700 SE"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1800A, CHIP_R520|RADEON_NEW_MEMMAP, "ATI Radeon X1800"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1800XT, CHIP_R520|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X1800 XT"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1800, CHIP_R520|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X1800"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_M_V7200, CHIP_R520|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility FireGL V7200"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_M_V7200, CHIP_R520|RADEON_NEW_MEMMAP, "ATI FireGL V7200"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5300, CHIP_R520|RADEON_NEW_MEMMAP, "ATI FireGL V5300"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_M_V7100, CHIP_R520|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility FireGL V7100"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1800B, CHIP_R520|RADEON_NEW_MEMMAP, "ATI Radeon X1800"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1800C, CHIP_R520|RADEON_NEW_MEMMAP, "ATI Radeon X1800"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1800D, CHIP_R520|RADEON_NEW_MEMMAP, "ATI Radeon X1800"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1800E, CHIP_R520|RADEON_NEW_MEMMAP, "ATI Radeon X1800"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1800F, CHIP_R520|RADEON_NEW_MEMMAP, "ATI Radeon X1800"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V7300, CHIP_R520|RADEON_NEW_MEMMAP, "ATI FireGL V7300"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V7350, CHIP_R520|RADEON_NEW_MEMMAP, "ATI FireGL V7350"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1600, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI Radeon X1600"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV505_1, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI RV505"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300_X1550, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI Radeon X1300/X1550"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1550, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI Radeon X1550"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_M54_GL, CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI M54-GL"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1400, CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X1400"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1550_X1300, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI Radeon X1300/X1550"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1550_64, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI Radeon X1550 64-bit"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300_M52, CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X1300"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1300_4A, CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X1300"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1300_4B, CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X1300"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1300_4C, CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X1300"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300_4D, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI Radeon X1300"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300_4E, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI Radeon X1300"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV505_2, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI RV505"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV505_3, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI RV505"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V3300, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI FireGL V3300"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V3350, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI FireGL V3350"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300_5E, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI Radeon X1300"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1550_64_2, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI Radeon X1550 64-bit"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300X1550, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI Radeon X1300/X1550"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1600_81, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI Radeon X1600"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300PRO, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI Radeon X1300/X1550"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1450, CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X1450"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI Radeon X1300/X1550"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X2300, CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X2300"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X2300_2, CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X2300"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1350, CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X1350"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1350_2, CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X1350"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1450, CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X1450"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300_8F, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI Radeon X1300"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1550_2, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI Radeon X1550"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1350_3, CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X1350"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREMV_2250, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI FireMV 2250"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1550_64_3, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI Radeon X1550 64-bit"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1600_C0, CHIP_RV530|RADEON_NEW_MEMMAP, "ATI Radeon X1600"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1650, CHIP_RV530|RADEON_NEW_MEMMAP, "ATI Radeon X1650"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1600_PRO, CHIP_RV530|RADEON_NEW_MEMMAP, "ATI Radeon X1600"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1600_C3, CHIP_RV530|RADEON_NEW_MEMMAP, "ATI Radeon X1600"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5200, CHIP_RV530|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility FireGL V5200"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1600_M, CHIP_RV530|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X1600"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1650_PRO, CHIP_RV530|RADEON_NEW_MEMMAP, "ATI Radeon X1650"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1650_PRO2, CHIP_RV530|RADEON_NEW_MEMMAP, "ATI Radeon X1650"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1600_CD, CHIP_RV530|RADEON_NEW_MEMMAP, "ATI Radeon X1600"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1300_XT, CHIP_RV530|RADEON_NEW_MEMMAP, "ATI Radeon X1300 XT/X1600 Pro"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V3400, CHIP_RV530|RADEON_NEW_MEMMAP, "ATI FireGL V3400"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV530_M56, CHIP_RV530|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility FireGL V5250"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1700, CHIP_RV530|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X1700"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1700XT, CHIP_RV530|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X1700 XT"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V5200_1, CHIP_RV530|RADEON_NEW_MEMMAP, "ATI FireGL V5200"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1700, CHIP_RV530|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X1700"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X2300HD, CHIP_RV515|RADEON_NEW_MEMMAP, "ATI  Radeon X2300HD"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X2300HD, CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon HD 2300"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X2300HD_1, CHIP_RV515|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon HD 2300"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1950_40, CHIP_R580|RADEON_NEW_MEMMAP, "ATI Radeon X1950"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_43, CHIP_R580|RADEON_NEW_MEMMAP, "ATI Radeon X1900"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1950_44, CHIP_R580|RADEON_NEW_MEMMAP, "ATI Radeon X1950"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_45, CHIP_R580|RADEON_NEW_MEMMAP, "ATI Radeon X1900"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_46, CHIP_R580|RADEON_NEW_MEMMAP, "ATI Radeon X1900"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_47, CHIP_R580|RADEON_NEW_MEMMAP, "ATI Radeon X1900"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_48, CHIP_R580|RADEON_NEW_MEMMAP, "ATI Radeon X1900"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_49, CHIP_R580|RADEON_NEW_MEMMAP, "ATI Radeon X1900"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_4A, CHIP_R580|RADEON_NEW_MEMMAP, "ATI Radeon X1900"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_4B, CHIP_R580|RADEON_NEW_MEMMAP, "ATI Radeon X1900"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_4C, CHIP_R580|RADEON_NEW_MEMMAP, "ATI Radeon X1900"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_4D, CHIP_R580|RADEON_NEW_MEMMAP, "ATI Radeon X1900"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_STREAM_PROCESSOR, CHIP_R580|RADEON_NEW_MEMMAP, "ATI AMD Stream Processor"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1900_4F, CHIP_R580|RADEON_NEW_MEMMAP, "ATI Radeon X1900"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1950_PRO, CHIP_RV570|RADEON_NEW_MEMMAP, "ATI Radeon X1950"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV560, CHIP_RV560|RADEON_NEW_MEMMAP, "ATI RV560"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV560_1, CHIP_RV560|RADEON_NEW_MEMMAP, "ATI RV560"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_X1900, CHIP_R580|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Mobility Radeon X1900"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV560_2, CHIP_RV560|RADEON_NEW_MEMMAP, "ATI RV560"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1950GT, CHIP_RV570|RADEON_NEW_MEMMAP, "ATI Radeon X1950 GT"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV570, CHIP_RV570|RADEON_NEW_MEMMAP, "ATI RV570"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV570_2, CHIP_RV570|RADEON_NEW_MEMMAP, "ATI RV570"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_FIREGL_V7400, CHIP_RV570|RADEON_NEW_MEMMAP, "ATI ATI FireGL V7400"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV560_3, CHIP_RV560|RADEON_NEW_MEMMAP, "ATI RV560"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RX1650_XT, CHIP_RV560|RADEON_NEW_MEMMAP, "ATI Radeon X1650"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1650_1, CHIP_RV560|RADEON_NEW_MEMMAP, "ATI Radeon X1650"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RV560_4, CHIP_RV560|RADEON_NEW_MEMMAP, "ATI RV560"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_9000IGP, CHIP_RS300|RADEON_IS_IGP|RADEON_NEW_MEMMAP, "ATI Radeon RS350 9000/9100 IGP"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_RS350IGP, CHIP_RS300|RADEON_IS_IGP|RADEON_IS_MOBILITY|RADEON_NEW_MEMMAP, "ATI Radeon RS350 Mobility IGP"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1250, CHIP_RS690|RADEON_IS_IGP|RADEON_NEW_MEMMAP|RADEON_IS_IGPGART, "ATI Radeon RS690 X1250 IGP"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RADEON_X1250IGP, CHIP_RS690|RADEON_IS_IGP|RADEON_NEW_MEMMAP|RADEON_IS_IGPGART, "ATI Radeon RS690 X1270 IGP"},
        {0, 0, 0, NULL}
@


1.9
log
@Instead of using a width-1 bitfield for storing the driver capabilities
in the callback structure, just use a bunch of ORed together bits. This
has been annoying me for ages.
@
text
@a35 1
#include "drm_pciids.h"
a42 1
/* drv_PCI_IDs comes from drm_pciids.h, generated from drm_pciids.txt. */
d44 237
a280 1
	radeon_PCI_IDS
@


1.8
log
@rework how we handle ioctls.

Before it was based on a static array with flags. Instead, let the
driver provide an ioctl callback, which deals with things appropriately.
Makes the code a bit easier to read, and also drops just over 5k on an
amd64 kernel build with all drm drivers enabled.

Tested by a few.
@
text
@d75 2
a76 7
	.use_agp		= 1,
	.use_mtrr		= 1,
	.use_pci_dma		= 1,
	.use_sg			= 1,
	.use_dma		= 1,
	.use_irq		= 1,
	.use_vbl_irq		= 1,
@


1.7
log
@Kill a bunch of #ifdef freebsd/netbsd code in *_drv.c. No binary change.
@
text
@d38 4
a48 30
struct drm_ioctl_desc radeon_ioctls[] = {
	DRM_IOCTL_DEF(DRM_RADEON_CP_INIT, radeon_cp_init, DRM_AUTH|DRM_MASTER|DRM_ROOT_ONLY),
	DRM_IOCTL_DEF(DRM_RADEON_CP_START, radeon_cp_start, DRM_AUTH|DRM_MASTER|DRM_ROOT_ONLY),
	DRM_IOCTL_DEF(DRM_RADEON_CP_STOP, radeon_cp_stop, DRM_AUTH|DRM_MASTER|DRM_ROOT_ONLY),
	DRM_IOCTL_DEF(DRM_RADEON_CP_RESET, radeon_cp_reset, DRM_AUTH|DRM_MASTER|DRM_ROOT_ONLY),
	DRM_IOCTL_DEF(DRM_RADEON_CP_IDLE, radeon_cp_idle, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_CP_RESUME, radeon_cp_resume, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_RESET, radeon_engine_reset, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_FULLSCREEN, radeon_fullscreen, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_SWAP, radeon_cp_swap, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_CLEAR, radeon_cp_clear, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_VERTEX, radeon_cp_vertex, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_INDICES, radeon_cp_indices, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_TEXTURE, radeon_cp_texture, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_STIPPLE, radeon_cp_stipple, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_INDIRECT, radeon_cp_indirect, DRM_AUTH|DRM_MASTER|DRM_ROOT_ONLY),
	DRM_IOCTL_DEF(DRM_RADEON_VERTEX2, radeon_cp_vertex2, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_CMDBUF, radeon_cp_cmdbuf, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_GETPARAM, radeon_cp_getparam, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_FLIP, radeon_cp_flip, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_ALLOC, radeon_mem_alloc, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_FREE, radeon_mem_free, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_INIT_HEAP, radeon_mem_init_heap, DRM_AUTH|DRM_MASTER|DRM_ROOT_ONLY),
	DRM_IOCTL_DEF(DRM_RADEON_IRQ_EMIT, radeon_irq_emit, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_IRQ_WAIT, radeon_irq_wait, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_SETPARAM, radeon_cp_setparam, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_SURF_ALLOC, radeon_surface_alloc, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_RADEON_SURF_FREE, radeon_surface_free, DRM_AUTH)
};

d55 1
a67 3
	.ioctls			= radeon_ioctls,
	.max_ioctl		= DRM_ARRAY_SIZE(radeon_ioctls),

a83 3
int	radeondrm_probe(struct device *, void *, void *);
void	radeondrm_attach(struct device *, struct device *, void *);

d108 70
@


1.6
log
@Move dev->driver over to being a pointer to a const struct, instead of stupidly
filling in a pre-allocated one on each attach.

Makes the code a bunch nicer, shrinks a kernel by about 1.5k on amd64,
helps with my sanity, and paves way for later changes.

Tested by a few for a couple of weeks now.
@
text
@a111 42
#ifdef __FreeBSD__
static int
radeon_probe(device_t dev)
{
	return drm_probe(dev, radeon_pciidlist);
}

static int
radeon_attach(device_t nbdev)
{
	struct drm_device *dev = device_get_softc(nbdev);

	bzero(dev, sizeof(struct drm_device));
	radeon_configure(dev);
	return drm_attach(nbdev, radeon_pciidlist);
}

static device_method_t radeon_methods[] = {
	/* Device interface */
	DEVMETHOD(device_probe,		radeon_probe),
	DEVMETHOD(device_attach,	radeon_attach),
	DEVMETHOD(device_detach,	drm_detach),

	{ 0, 0 }
};

static driver_t radeon_driver = {
	"drm",
	radeon_methods,
	sizeof(struct drm_device)
};

extern devclass_t drm_devclass;
#if __FreeBSD_version >= 700010
DRIVER_MODULE(radeon, vgapci, radeon_driver, drm_devclass, 0, 0);
#else
DRIVER_MODULE(radeon, pci, radeon_driver, drm_devclass, 0, 0);
#endif
MODULE_DEPEND(radeon, drm, 1, 1, 1);

#elif defined(__NetBSD__) || defined(__OpenBSD__)

a115 1
#if defined(__OpenBSD__)
a116 3
#else
radeondrm_probe(struct device *parent, struct cfdata *match, void *aux)
#endif
a130 1
#if defined(__OpenBSD__)
a138 10
#else
#ifdef _LKM
CFDRIVER_DECL(radeondrm, DV_TTY, NULL);
#else
CFATTACH_DECL(radeondrm, sizeof(struct drm_device), radeondrm_probe,
    radeondrm_attach, drm_detach, drm_activate);
#endif
#endif

#endif
@


1.5
log
@Kill the silly ``drm_device_t'' and ``drm_file_t'' typedefs. just use
``struct drm_device'' and ``struct drm_file'' respectively. Since i'm
changing a lot of prototypes anyway, remove all parameter names from
prototypes, in accordance with style(9) (and sanity).
@
text
@a37 2
void	radeon_configure(struct drm_device *);

d45 66
a110 38
void
radeon_configure(struct drm_device *dev)
{
	dev->driver.buf_priv_size	= sizeof(drm_radeon_buf_priv_t);
	dev->driver.load		= radeon_driver_load;
	dev->driver.unload		= radeon_driver_unload;
	dev->driver.firstopen		= radeon_driver_firstopen;
	dev->driver.open		= radeon_driver_open;
	dev->driver.preclose		= radeon_driver_preclose;
	dev->driver.postclose		= radeon_driver_postclose;
	dev->driver.lastclose		= radeon_driver_lastclose;
	dev->driver.get_vblank_counter	= radeon_get_vblank_counter;
	dev->driver.enable_vblank	= radeon_enable_vblank;
	dev->driver.disable_vblank	= radeon_disable_vblank;
	dev->driver.irq_preinstall	= radeon_driver_irq_preinstall;
	dev->driver.irq_postinstall	= radeon_driver_irq_postinstall;
	dev->driver.irq_uninstall	= radeon_driver_irq_uninstall;
	dev->driver.irq_handler		= radeon_driver_irq_handler;
	dev->driver.dma_ioctl		= radeon_cp_buffers;

	dev->driver.ioctls		= radeon_ioctls;
	dev->driver.max_ioctl		= radeon_max_ioctl;

	dev->driver.name		= DRIVER_NAME;
	dev->driver.desc		= DRIVER_DESC;
	dev->driver.date		= DRIVER_DATE;
	dev->driver.major		= DRIVER_MAJOR;
	dev->driver.minor		= DRIVER_MINOR;
	dev->driver.patchlevel		= DRIVER_PATCHLEVEL;

	dev->driver.use_agp		= 1;
	dev->driver.use_mtrr		= 1;
	dev->driver.use_pci_dma		= 1;
	dev->driver.use_sg		= 1;
	dev->driver.use_dma		= 1;
	dev->driver.use_irq		= 1;
	dev->driver.use_vbl_irq		= 1;
}
d173 1
a173 1
	radeon_configure(dev);
@


1.4
log
@Update to DRM git as of a few days ago. This mostly affects the
card-specific files with a few minor changes elsewhere.

The main change to the OpenBSD specific stuff is the change to the irq
api due to the vblank rework.

4 more large bugs known, I have a fix for one.

Tested by many.  prompted by deraadt@@.
@
text
@d38 1
a38 1
void	radeon_configure(drm_device_t *);
d48 1
a48 1
radeon_configure(drm_device_t *dev)
d96 1
a96 1
	drm_device_t *dev = device_get_softc(nbdev);
d98 1
a98 1
	bzero(dev, sizeof(drm_device_t));
d115 1
a115 1
	sizeof(drm_device_t)
d145 1
a145 1
	drm_device_t *dev = (drm_device_t *)self;
d153 1
a153 1
        sizeof (drm_device_t), radeondrm_probe, radeondrm_attach, 
d164 2
a165 2
CFATTACH_DECL(radeondrm, sizeof(drm_device_t), radeondrm_probe, radeondrm_attach,
	drm_detach, drm_activate);
@


1.3
log
@currently agp_i810 needs to map the same BAR as inteldrm, this obviously
fails.

In order to allow this, implement an API so that drm and agp can share
mappings for the BARs. Now it works as it should.

tested by many.
ok kettenis, miod said he'd look at it when it's in tree.
@
text
@d58 3
a60 1
	dev->driver.vblank_wait		= radeon_driver_vblank_wait;
@


1.2
log
@destatic the static functions, they only make debugging harder.
While i'm here:
remove a couple of debug printfs that shouldn't have gone in anyway.
trowel on some KNF (I really need to get around to sending some of this upstream).
remove some netbsd specific code that netbsd doesn't have anymore.

ok tedu.
@
text
@d146 1
a146 1
	return drm_attach(self, pa, radeon_pciidlist);
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d38 2
d47 2
a48 1
static void radeon_configure(drm_device_t *dev)
d126 4
a129 1
static int
d139 1
a139 1
static void
@

