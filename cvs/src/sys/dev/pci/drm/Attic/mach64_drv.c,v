head	1.27;
access;
symbols
	OPENBSD_4_7:1.26.0.2
	OPENBSD_4_7_BASE:1.26
	OPENBSD_4_6:1.26.0.4
	OPENBSD_4_6_BASE:1.26
	OPENBSD_4_5:1.23.0.2
	OPENBSD_4_5_BASE:1.23
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.27
date	2010.05.24.01.19.19;	author oga;	state dead;
branches;
next	1.26;

1.26
date	2009.04.03.14.30.57;	author oga;	state Exp;
branches;
next	1.25;

1.25
date	2009.04.03.14.16.23;	author oga;	state Exp;
branches;
next	1.24;

1.24
date	2009.04.03.13.47.03;	author oga;	state Exp;
branches;
next	1.23;

1.23
date	2008.12.08.19.06.34;	author kettenis;	state Exp;
branches;
next	1.22;

1.22
date	2008.11.24.16.56.25;	author oga;	state Exp;
branches;
next	1.21;

1.21
date	2008.11.24.05.51.23;	author oga;	state Exp;
branches;
next	1.20;

1.20
date	2008.11.24.04.21.31;	author oga;	state Exp;
branches;
next	1.19;

1.19
date	2008.11.24.03.49.19;	author oga;	state Exp;
branches;
next	1.18;

1.18
date	2008.11.24.03.16.27;	author oga;	state Exp;
branches;
next	1.17;

1.17
date	2008.11.23.22.56.02;	author oga;	state Exp;
branches;
next	1.16;

1.16
date	2008.11.23.21.35.01;	author oga;	state Exp;
branches;
next	1.15;

1.15
date	2008.11.23.20.46.47;	author oga;	state Exp;
branches;
next	1.14;

1.14
date	2008.11.22.22.43.53;	author oga;	state Exp;
branches;
next	1.13;

1.13
date	2008.11.22.21.26.48;	author oga;	state Exp;
branches;
next	1.12;

1.12
date	2008.11.22.20.49.36;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2008.11.22.04.45.21;	author oga;	state Exp;
branches;
next	1.10;

1.10
date	2008.11.22.04.30.40;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2008.11.17.00.30.41;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2008.11.17.00.26.02;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2008.10.07.22.35.30;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.07.21.59.32;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.26.19.33.19;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.11.09.33.01;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.06.19.19.02;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.16.01.02.31;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Remove the drm drivers that are not enabled (and have never been so).

For now they are unmaintained, and work on kernel modesetting has very
large inferface changes needing to be made. Also, when the radeon driver
has been converted over, we will no longer support X with the DRI1
protocol, only DRI2.

When the upheaval has finished, these drivers may be brought back after
work to switch them to DRI2 style memory management and kernel
modesetting has been done, but until then they are unsupported and
probably broken (i know at least two of them have been reported broken
before now). ragedrm will likely come back as a component of radeon
(their interfaces are still fairly similar). The other drivers require
rewriting.

I have been threatening to do this for over a year. Discussed with
deraadt@@ and matthieu@@ at various points since then.
@
text
@/* mach64_drv.c -- ATI Rage 128 driver -*- linux-c -*-
 * Created: Mon Dec 13 09:47:27 1999 by faith@@precisioninsight.com
 */
/*-
 * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.
 * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Rickard E. (Rik) Faith <faith@@valinux.com>
 *    Gareth Hughes <gareth@@valinux.com>
 */


#include <sys/types.h>

#include "drmP.h"
#include "drm.h"
#include "mach64_drm.h"
#include "mach64_drv.h"

int	machdrm_probe(struct device *, void *, void *);
void	machdrm_attach(struct device *, struct device *, void *);
int	machdrm_detach(struct device *, int);
int	machdrm_ioctl(struct drm_device *, u_long, caddr_t, struct drm_file *);

const static struct drm_pcidev mach64_pciidlist[] = {
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_GI},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_GP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_GQ},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RAGEPRO},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_GD},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_LI},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_LP},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_LQ},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_LB},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_LD},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_GL},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_GO},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RAGEXL},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_GS},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_GM},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_GN},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RAGE_PM},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64LS},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_1},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_LN},
	{0, 0, 0}
};

static const struct drm_driver_info machdrm_driver = {
	.buf_priv_size		= 1, /* No dev_priv */
	.ioctl			= machdrm_ioctl,
	.lastclose		= mach64_driver_lastclose,
	.vblank_pipes		= 1,
	.get_vblank_counter	= mach64_get_vblank_counter,
	.enable_vblank		= mach64_enable_vblank,
	.disable_vblank		= mach64_disable_vblank,
	.irq_install		= mach64_driver_irq_install,
	.irq_uninstall		= mach64_driver_irq_uninstall,
	.dma_ioctl		= mach64_dma_buffers,

	.name			= DRIVER_NAME,
	.desc			= DRIVER_DESC,
	.date			= DRIVER_DATE,
	.major			= DRIVER_MAJOR,
	.minor			= DRIVER_MINOR,
	.patchlevel		= DRIVER_PATCHLEVEL,

	.flags			= DRIVER_AGP | DRIVER_MTRR | DRIVER_PCI_DMA |
				    DRIVER_DMA | DRIVER_SG | DRIVER_IRQ,
};
int
machdrm_probe(struct device *parent, void *match, void *aux)
{
	return drm_pciprobe((struct pci_attach_args *)aux, mach64_pciidlist);
}

void
machdrm_attach(struct device *parent, struct device *self, void *aux)
{
	drm_mach64_private_t	*dev_priv = (drm_mach64_private_t *)self;
	struct pci_attach_args	*pa = aux;
	struct vga_pci_bar	*bar;
	int			 is_agp;

	dev_priv->pc = pa->pa_pc;

	bar = vga_pci_bar_info((struct vga_pci_softc *)parent, 2);
	if (bar == NULL) {
		printf(": can't get BAR info\n");
		return;
	}

	dev_priv->regs = vga_pci_bar_map((struct vga_pci_softc *)parent, 
	    bar->addr, 0, 0);
	if (dev_priv->regs == NULL) {
		printf(": can't map mmio space\n");
		return;
	}

	if (pci_intr_map(pa, &dev_priv->ih) != 0) {
		printf(": couldn't map interrupt\n");
		return;
	}
	printf(": %s\n", pci_intr_string(pa->pa_pc, dev_priv->ih));

	is_agp = pci_get_capability(pa->pa_pc, pa->pa_tag, PCI_CAP_AGP,
	    NULL, NULL);

	dev_priv->drmdev = drm_attach_pci(&machdrm_driver, pa, is_agp, self);
}

int
machdrm_detach(struct device *self, int flags)
{
	drm_mach64_private_t *dev_priv = (drm_mach64_private_t *)self;

	if (dev_priv->drmdev != NULL) {
		config_detach(dev_priv->drmdev, flags);
		dev_priv->drmdev = NULL;
	}

	if (dev_priv->regs != NULL)
		vga_pci_bar_unmap(dev_priv->regs);

	return (0);
}

struct cfattach machdrm_ca = {
	sizeof(drm_mach64_private_t), machdrm_probe, machdrm_attach,
	machdrm_detach
};

struct cfdriver machdrm_cd = {
	0, "machdrm", DV_DULL
};

int
machdrm_ioctl(struct drm_device *dev, u_long cmd, caddr_t data,
    struct drm_file *file_priv)
{
	if (file_priv->authenticated == 1) {
		switch (cmd) {
		case DRM_IOCTL_MACH64_CLEAR:
			return (mach64_dma_clear(dev, data, file_priv));
		case DRM_IOCTL_MACH64_SWAP:
			return (mach64_dma_swap(dev, data, file_priv));
		case DRM_IOCTL_MACH64_IDLE:
			return (mach64_dma_idle(dev, data, file_priv));
		case DRM_IOCTL_MACH64_RESET:
			return (mach64_engine_reset(dev, data, file_priv));
		case DRM_IOCTL_MACH64_VERTEX:
			return (mach64_dma_vertex(dev, data, file_priv));
		case DRM_IOCTL_MACH64_BLIT:
			return (mach64_dma_blit(dev, data, file_priv));
		case DRM_IOCTL_MACH64_FLUSH:
			return (mach64_dma_flush(dev, data, file_priv));
		case DRM_IOCTL_MACH64_GETPARAM:
			return (mach64_get_param(dev, data, file_priv));
		}
	}

	if (file_priv->master == 1) {
		switch (cmd) {
		case DRM_IOCTL_MACH64_INIT:
			return (mach64_dma_init(dev, data, file_priv));
		}
	}
	return (EINVAL);
}
@


1.26
log
@detypedef drm_pci_id_list_t.
@
text
@@


1.25
log
@Sprinkle some const correctness for the pciid lists. From mickey ages
ago.
@
text
@d46 1
a46 1
const static drm_pci_id_list_t mach64_pciidlist[] = {
@


1.24
log
@Remove dev->irq_lock, the drm_irq_handler_wrap irq handler, and remove
the dev->driver irq_handler member since we now don't need to know.
Shaves a few bytes, and makes me happy.
@
text
@d46 1
a46 1
static drm_pci_id_list_t mach64_pciidlist[] = {
@


1.23
log
@Make the various drm drivers print the interrupt they're using.

ok oga@@
@
text
@a79 1
	.irq_handler		= mach64_driver_irq_handler,
@


1.22
log
@back out the buf_priv change. it made some incorrect assumptions and
broke radeondrm. Fixing it is ugly, so another change will have to be made
later.


I /hate/ the drm_buf api, it will die as soon as it can.
@
text
@d126 1
@


1.21
log
@Instead of having a ``private data'' pointer in the dma buffers, just
ask the driver how large they need the structure we allocate to be, and
use inheritance like we do for struct device. Simplifies things a little
bit and saves us a pointer.
@
text
@d71 1
@


1.20
log
@change drm_attach_mi to drm_attach_pci. we take the pci_attach_args, and
setup the drm_attach_args with the needed information.

require interface version 1.1 libdrm has been requesting it for ages),
which means that we can set the busid string at attach time. (generated in
drm_attach_pci), also pass in the interrupt line and bst.

Now we don't need dev->pa at all, so remove it, finally.
@
text
@a70 1
	.buf_priv_size		= 1, /* No dev_priv */
@


1.19
log
@make device works out if it's agp and tells the drm driver, not the
other way round. More dev->pa reduction
@
text
@d130 1
a130 2
	dev_priv->drmdev = drm_attach_mi(&machdrm_driver, pa->pa_dmat,
	    pa, is_agp, self);
@


1.18
log
@oops. Use the correct struct member to map so that radeon doesn't panic
on X startup.

found by ckuethe@@
@
text
@d105 1
d127 5
a131 1
	dev_priv->drmdev = drm_attach_mi(&machdrm_driver, pa->pa_dmat, pa, self);
@


1.17
log
@pass in the dmat when we attach the drm driver. reduces pci dependancy.
@
text
@d115 1
a115 1
	    bar->addr, bar->size, 0);
@


1.16
log
@Map device interrupts in the attach routine. and remove more need for
dev->pa by doing the pci_intr_establish/disestablish dance in the driver
function, not in drm. This removes the need for
interrupt_{pre,post}install callbacks, instead just provide a
interrupt_install() callback.
@
text
@d126 1
a126 1
	dev_priv->drmdev = drm_attach_mi(&machdrm_driver, pa, self);
@


1.15
log
@Move vblank data allocation to happening at attach, not at irq enable.
just put a vblank_pipes argument to the driver structure which tells us
how many to set up

this means that intel doesn't lose all vblank count on vtswitch (it
disables the interrupt there), i've heard of a few uvm_faults where this
happens as well as things just going wrong.

This was suggested by Keith Packard who provided a different diff for
drm.git.
@
text
@d78 1
a78 1
	.irq_preinstall		= mach64_driver_irq_preinstall,
d106 2
d118 5
@


1.14
log
@Make all drm drivers map their mmio register space on attach instead of
using the drm_maps interface (this was done for inteldrm a few days
ago).  All drivers now ignore the mmio_offset argument that the init
ioctl takes.

This clears up the code and makes sure that drm_ioremap_core() doesn't
need the vga_pci_map inteface anymore, so we don't have to pass in the
vga softc anymore. We also get to kill the drm_resource_{start,length}
linux-alike functions since we just calculate all the requisite offsets
at startup and cache those we need. This now means that technically the
only driver that needs the vga_pci_map api is inteldrm (due to sharing
with intagp issues), though this diff doesn't convert them over.
@
text
@d74 1
a78 1
	.irq_postinstall	= mach64_driver_irq_postinstall,
a92 1

@


1.13
log
@Move the drm drivers over from:

vga1 at pci0
inteldrm0 at vga1

to

vga1 at pci0
inteldrm0 at vga1
drm0 at inteldrm0

i.e. a similar scheme to audio(4) where the interface attaches on top of
the wildly different drivers. This helps to clean up the code a lot
(more is coming) and help me start to move drm to being essentially bus
independent, which will help in the future.
@
text
@d105 1
d107 14
a120 1
	dev_priv->drmdev = drm_attach_mi(&machdrm_driver, pa, parent, self);
d132 3
@


1.12
log
@Remove the driver->load callback and just do all the initialization in
the attach function. First step towards splitting drm off as it's own
(bus independant) device, as it should be.
@
text
@d70 1
a70 1
static const struct drm_driver_info mach64_driver = {
d97 1
a97 1
	return drm_probe((struct pci_attach_args *)aux, mach64_pciidlist);
d103 2
a104 8
	struct pci_attach_args *pa = aux;
	struct drm_device *dev = (struct drm_device *)self;
	drm_mach64_private_t *dev_priv;

	dev_priv = drm_calloc(1, sizeof(*dev_priv), DRM_MEM_DRIVER);
	if (dev_priv == NULL)
		return;
	dev->dev_private = (void *)dev_priv;
d106 1
a106 3
	dev->driver = &mach64_driver;

	return drm_attach(parent, self, pa);
d112 1
a112 2
	struct drm_device *dev = (struct drm_device *)self;
	drm_mach64_private_t *dev_priv = dev->dev_private;
d114 4
a117 2
	drm_free(dev_priv, sizeof(*dev_priv), DRM_MEM_DRIVER);
	dev->dev_private = NULL;
d119 1
a119 1
	return (drm_detach(self, flags));
d123 2
a124 2
	sizeof(struct drm_device), machdrm_probe, machdrm_attach,
	machdrm_detach, drm_activate
@


1.11
log
@Remove the strings from the pcidevs arrays. they are no longer needed and are
just wasting space.
@
text
@d41 3
a43 2
int	mach64drm_probe(struct device *, void *, void *);
void	mach64drm_attach(struct device *, struct device *, void *);
d95 1
a95 1
mach64drm_probe(struct device *parent, void *match, void *aux)
d101 1
a101 1
mach64drm_attach(struct device *parent, struct device *self, void *aux)
d105 6
d114 13
a126 1
	return drm_attach(parent, self, pa, mach64_pciidlist);
d130 2
a131 2
	sizeof(struct drm_device), mach64drm_probe, mach64drm_attach,
	drm_detach, drm_activate
@


1.10
log
@switch all of the drm drivers over to using the defines from pcidevs.

Furthermore, move the list of pcidevs from drm_pciids.h (in macros!), to
the array in the driver file. The strings are left in the array for now, but
will go in the next commit
@
text
@d46 21
a66 21
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_GI, 0, "3D Rage Pro"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_GP, 0, "3D Rage Pro 215GP"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_GQ, 0, "3D Rage Pro 215GQ"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RAGEPRO, 0, "3D Rage Pro AGP 1X/2X"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_GD, 0, "3D Rage Pro AGP 1X"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_LI, 0, "3D Rage LT Pro"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_LP, 0, "3D Rage LT Pro"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_LQ, 0, "3D Rage LT Pro"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_LB, 0, "3D Rage LT Pro AGP-133"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_LD, 0, "3D Rage LT Pro AGP-66"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_GL, 0, "Rage XC"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_GO, 0, "Rage XL"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RAGEXL, 0, "Rage XL"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_GS, 0, "Rage XC"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_GM, 0, "Rage XL AGP 2X"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_GN, 0, "Rage XC AGP"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_RAGE_PM, 0, "Rage Mobility P/M"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64LS, 0, "Rage Mobility L"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MOBILITY_1, 0, "Rage Mobility P/M AGP 2X"},
	{PCI_VENDOR_ATI, PCI_PRODUCT_ATI_MACH64_LN, 0, "Rage Mobility L AGP 2X"},
	{0, 0, 0, NULL}
@


1.9
log
@Instead of using a width-1 bitfield for storing the driver capabilities
in the callback structure, just use a bunch of ORed together bits. This
has been annoying me for ages.
@
text
@a39 1
#include "drm_pciids.h"
a44 1
/* drv_PCI_IDs comes from drm_pciids.h, generated from drm_pciids.txt. */
d46 21
a66 1
	mach64_PCI_IDS
@


1.8
log
@rework how we handle ioctls.

Before it was based on a static array with flags. Instead, let the
driver provide an ioctl callback, which deals with things appropriately.
Makes the code a bit easier to read, and also drops just over 5k on an
amd64 kernel build with all drm drivers enabled.

Tested by a few.
@
text
@d71 2
a72 6
	.use_agp		= 1,
	.use_mtrr		= 1,
	.use_pci_dma		= 1,
	.use_dma		= 1,
	.use_irq		= 1,
	.use_vbl_irq		= 1,
@


1.7
log
@Kill a bunch of #ifdef freebsd/netbsd code in *_drv.c. No binary change.
@
text
@d42 4
a50 18
/* Interface history:
 *
 * 1.0 - Initial mach64 DRM
 *
 */
struct drm_ioctl_desc mach64_ioctls[] = {
	DRM_IOCTL_DEF(DRM_MACH64_INIT, mach64_dma_init,
	    DRM_AUTH|DRM_MASTER|DRM_ROOT_ONLY),
	DRM_IOCTL_DEF(DRM_MACH64_CLEAR, mach64_dma_clear, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_MACH64_SWAP, mach64_dma_swap, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_MACH64_IDLE, mach64_dma_idle, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_MACH64_RESET, mach64_engine_reset, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_MACH64_VERTEX, mach64_dma_vertex, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_MACH64_BLIT, mach64_dma_blit, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_MACH64_FLUSH, mach64_dma_flush, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_MACH64_GETPARAM, mach64_get_param, DRM_AUTH),
};

d53 1
a63 3
	.ioctls			= mach64_ioctls,
	.max_ioctl		= DRM_ARRAY_SIZE(mach64_ioctls),

a78 3
int	mach64drm_probe(struct device *, void *, void *);
void	mach64drm_attach(struct device *, struct device *, void *);

d104 34
@


1.6
log
@Move dev->driver over to being a pointer to a const struct, instead of stupidly
filling in a pre-allocated one on each attach.

Makes the code a bunch nicer, shrinks a kernel by about 1.5k on amd64,
helps with my sanity, and paves way for later changes.

Tested by a few for a couple of weeks now.
@
text
@a94 42
#ifdef __FreeBSD__
static int
mach64_probe(device_t dev)
{
	return drm_probe(dev, mach64_pciidlist);
}

static int
mach64_attach(device_t nbdev)
{
	struct drm_device *dev = device_get_softc(nbdev);

	bzero(dev, sizeof(struct drm_device));
	mach64_configure(dev);
	return drm_attach(nbdev, mach64_pciidlist);
}

static device_method_t mach64_methods[] = {
	/* Device interface */
	DEVMETHOD(device_probe,		mach64_probe),
	DEVMETHOD(device_attach,	mach64_attach),
	DEVMETHOD(device_detach,	drm_detach),

	{ 0, 0 }
};

static driver_t mach64_driver = {
	"drm",
	mach64_methods,
	sizeof(struct drm_device)
};

extern devclass_t drm_devclass;
#if __FreeBSD_version >= 700010
DRIVER_MODULE(mach64, vgapci, mach64_driver, drm_devclass, 0, 0);
#else
DRIVER_MODULE(mach64, pci, mach64_driver, drm_devclass, 0, 0);
#endif
MODULE_DEPEND(mach64, drm, 1, 1, 1);

#elif defined(__NetBSD__) || defined(__OpenBSD__)

a98 1
#if defined(__OpenBSD__)
a99 3
#else
mach64drm_probe(struct device *parent, struct cfdata *match, void *aux)
#endif
a114 1
#if defined(__OpenBSD__)
a122 10
#else
#ifdef _LKM
CFDRIVER_DECL(mach64drm, DV_TTY, NULL);
#else
CFATTACH_DECL(mach64drm, sizeof(struct drm_device), mach64drm_probe,
    mach64drm_attach, drm_detach, drm_activate);
#endif
#endif

#endif
@


1.5
log
@Kill the silly ``drm_device_t'' and ``drm_file_t'' typedefs. just use
``struct drm_device'' and ``struct drm_file'' respectively. Since i'm
changing a lot of prototypes anyway, remove all parameter names from
prototypes, in accordance with style(9) (and sanity).
@
text
@a41 2
void	mach64_configure(struct drm_device *);

d47 47
a93 31
void
mach64_configure(struct drm_device *dev)
{
	dev->driver.buf_priv_size	= 1; /* No dev_priv */
	dev->driver.lastclose		= mach64_driver_lastclose;
	dev->driver.get_vblank_counter	= mach64_get_vblank_counter;
	dev->driver.enable_vblank	= mach64_enable_vblank;
	dev->driver.disable_vblank	= mach64_disable_vblank;
	dev->driver.irq_preinstall	= mach64_driver_irq_preinstall;
	dev->driver.irq_postinstall	= mach64_driver_irq_postinstall;
	dev->driver.irq_uninstall	= mach64_driver_irq_uninstall;
	dev->driver.irq_handler		= mach64_driver_irq_handler;
	dev->driver.dma_ioctl		= mach64_dma_buffers;

	dev->driver.ioctls		= mach64_ioctls;
	dev->driver.max_ioctl		= mach64_max_ioctl;

	dev->driver.name		= DRIVER_NAME;
	dev->driver.desc		= DRIVER_DESC;
	dev->driver.date		= DRIVER_DATE;
	dev->driver.major		= DRIVER_MAJOR;
	dev->driver.minor		= DRIVER_MINOR;
	dev->driver.patchlevel		= DRIVER_PATCHLEVEL;

	dev->driver.use_agp		= 1;
	dev->driver.use_mtrr		= 1;
	dev->driver.use_pci_dma		= 1;
	dev->driver.use_dma		= 1;
	dev->driver.use_irq		= 1;
	dev->driver.use_vbl_irq		= 1;
}
d156 2
a157 1
	mach64_configure(dev);
@


1.4
log
@Update to DRM git as of a few days ago. This mostly affects the
card-specific files with a few minor changes elsewhere.

The main change to the OpenBSD specific stuff is the change to the irq
api due to the vblank rework.

4 more large bugs known, I have a fix for one.

Tested by many.  prompted by deraadt@@.
@
text
@d42 1
a42 1
void	mach64_configure(drm_device_t *);
d50 1
a50 1
mach64_configure(drm_device_t *dev)
d91 1
a91 1
	drm_device_t *dev = device_get_softc(nbdev);
d93 1
a93 1
	bzero(dev, sizeof(drm_device_t));
d110 1
a110 1
	sizeof(drm_device_t)
d140 1
a140 1
	drm_device_t *dev = (drm_device_t *)self;
d148 1
a148 1
	sizeof(drm_device_t), mach64drm_probe, mach64drm_attach,
d159 2
a160 2
CFATTACH_DECL(mach64drm, sizeof(drm_device_t), mach64drm_probe, mach64drm_attach,
	drm_detach, drm_activate);
@


1.3
log
@currently agp_i810 needs to map the same BAR as inteldrm, this obviously
fails.

In order to allow this, implement an API so that drm and agp can share
mappings for the BARs. Now it works as it should.

tested by many.
ok kettenis, miod said he'd look at it when it's in tree.
@
text
@d54 3
a56 1
	dev->driver.vblank_wait		= mach64_driver_vblank_wait;
@


1.2
log
@destatic the static functions, they only make debugging harder.
While i'm here:
remove a couple of debug printfs that shouldn't have gone in anyway.
trowel on some KNF (I really need to get around to sending some of this upstream).
remove some netbsd specific code that netbsd doesn't have anymore.

ok tedu.
@
text
@d141 1
a141 1
	return drm_attach(self, pa, mach64_pciidlist);
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d42 2
d49 2
a50 1
static void mach64_configure(drm_device_t *dev)
d120 5
a124 1
static int
d134 1
a134 1
static void
@

