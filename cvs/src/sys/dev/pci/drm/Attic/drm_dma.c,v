head	1.19;
access;
symbols
	OPENBSD_4_5:1.16.0.2
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.19
date	2009.03.27.19.00.45;	author oga;	state dead;
branches;
next	1.18;

1.18
date	2009.03.27.17.44.12;	author oga;	state Exp;
branches;
next	1.17;

1.17
date	2009.03.26.07.25.06;	author oga;	state Exp;
branches;
next	1.16;

1.16
date	2009.02.15.19.56.04;	author oga;	state Exp;
branches;
next	1.15;

1.15
date	2008.11.24.16.56.25;	author oga;	state Exp;
branches;
next	1.14;

1.14
date	2008.11.24.05.51.23;	author oga;	state Exp;
branches;
next	1.13;

1.13
date	2008.11.23.22.56.02;	author oga;	state Exp;
branches;
next	1.12;

1.12
date	2008.11.22.14.42.36;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2008.10.07.22.25.12;	author oga;	state Exp;
branches;
next	1.10;

1.10
date	2008.10.07.21.59.32;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.18.15.10.57;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.02.54.52;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.05.23.51.03;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.08.16.01.53.05;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.30.01.30.45;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.07.29.19.44.13;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.26.19.33.19;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.16.01.02.31;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Rework the dma buffer api a bit to make it smaller and to have less
duplicated code. Also, switch the dma_lock to a rwlock (it never should
have been a spinlock) and move it and some other accounting data into
the dma structure, not the main softc.

Finally, the funcitons in drm_dma are tiny, move them in with the rest
of the dma_bufs api in drm_bufs and remove the file.
@
text
@/*-
 * Copyright 1999, 2000 Precision Insight, Inc., Cedar Park, Texas.
 * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Rickard E. (Rik) Faith <faith@@valinux.com>
 *    Gareth Hughes <gareth@@valinux.com>
 *
 */

/** @@file drm_dma.c
 * Support code for DMA buffer management.
 *
 * The implementation used to be significantly more complicated, but the
 * complexity has been moved into the drivers as different buffer management
 * schemes evolved.
 */

#include "drmP.h"

int
drm_dma_setup(struct drm_device *dev)
{

	dev->dma = drm_calloc(1, sizeof(*dev->dma));
	if (dev->dma == NULL)
		return ENOMEM;

	dev->buf_use = 0;

	DRM_SPININIT(&dev->dma_lock, "drmdma");

	return 0;
}

void
drm_cleanup_buf(struct drm_device *dev, drm_buf_entry_t *entry)
{
	int i;

	if (entry->seg_count) {
		for (i = 0; i < entry->seg_count; i++)
			drm_dmamem_free(dev->dmat, entry->seglist[i]);
		drm_free(entry->seglist);

		entry->seg_count = 0;
	}

   	if (entry->buf_count) {
	   	for (i = 0; i < entry->buf_count; i++) {
			drm_free(entry->buflist[i].dev_private);
		}
		drm_free(entry->buflist);

		entry->buf_count = 0;
	}
}

void
drm_dma_takedown(struct drm_device *dev)
{
	drm_device_dma_t *dma = dev->dma;
	int i;

	if (dma == NULL)
		return;

	/* Clear dma buffers */
	for (i = 0; i <= DRM_MAX_ORDER; i++)
		drm_cleanup_buf(dev, &dma->bufs[i]);

	drm_free(dma->buflist);
	drm_free(dma->pagelist);
	drm_free(dev->dma);
	dev->dma = NULL;
}


void
drm_free_buffer(struct drm_device *dev, drm_buf_t *buf)
{
	if (buf == NULL)
		return;

	buf->pending = 0;
	buf->file_priv= NULL;
	buf->used = 0;
}

void
drm_reclaim_buffers(struct drm_device *dev, struct drm_file *file_priv)
{
	drm_device_dma_t *dma = dev->dma;
	int i;

	if (dma == NULL)
		return;
	for (i = 0; i < dma->buf_count; i++) {
		if (dma->buflist[i]->file_priv == file_priv)
				drm_free_buffer(dev, dma->buflist[i]);
	}
}

/* Call into the driver-specific DMA handler */
int
drm_dma(struct drm_device *dev, void *data, struct drm_file *file_priv)
{

	if (dev->driver->dma_ioctl != NULL) {
		return (dev->driver->dma_ioctl(dev, data, file_priv));
	} else {
		DRM_DEBUG("DMA ioctl on driver with no dma handler\n");
		return EINVAL;
	}
}
@


1.18
log
@Remove a bunch of compat macros, just expand them to the openbsd
equivalent.
@
text
@@


1.17
log
@The drm_* allocation functions have been #defined to not use most of
their arguments for a while. Actually go through the code and remove the
extraneous arguments. Makes things easier to read.
@
text
@a95 1
	DRM_SPINUNINIT(&dev->dma_lock);
@


1.16
log
@convert drm_addbufs_pci over to new dmamem api.
@
text
@d45 1
a45 1
	dev->dma = drm_calloc(1, sizeof(*dev->dma), DRM_MEM_DRIVER);
d64 1
a64 2
		drm_free(entry->seglist, entry->seg_count *
		    sizeof(*entry->seglist), DRM_MEM_BUFS);
d71 1
a71 2
			drm_free(entry->buflist[i].dev_private,
			    dev->driver->buf_priv_size, DRM_MEM_BUFS);
d73 1
a73 2
		drm_free(entry->buflist, entry->buf_count *
		    sizeof(*entry->buflist), DRM_MEM_BUFS);
d92 3
a94 5
	drm_free(dma->buflist, dma->buf_count * sizeof(*dma->buflist),
	    DRM_MEM_BUFS);
	drm_free(dma->pagelist, dma->page_count * sizeof(*dma->pagelist),
	    DRM_MEM_BUFS);
	drm_free(dev->dma, sizeof(*dev->dma), DRM_MEM_DMA);
@


1.15
log
@back out the buf_priv change. it made some incorrect assumptions and
broke radeondrm. Fixing it is ugly, so another change will have to be made
later.


I /hate/ the drm_buf api, it will die as soon as it can.
@
text
@d63 1
a63 1
			drm_pci_free(dev->dmat, entry->seglist[i]);
@


1.14
log
@Instead of having a ``private data'' pointer in the dma buffers, just
ask the driver how large they need the structure we allocate to be, and
use inheritance like we do for struct device. Simplifies things a little
bit and saves us a pointer.
@
text
@d71 4
d76 1
a76 1
		    dev->driver->buf_priv_size, DRM_MEM_BUFS);
@


1.13
log
@pass in the dmat when we attach the drm driver. reduces pci dependancy.
@
text
@a70 4
	   	for (i = 0; i < entry->buf_count; i++) {
			drm_free(entry->buflist[i].dev_private,
			    dev->driver->buf_priv_size, DRM_MEM_BUFS);
		}
d72 1
a72 1
		    sizeof(*entry->buflist), DRM_MEM_BUFS);
@


1.12
log
@reduce the dependancy of drm_pci_alloc upon the drm device softc. Just
pass in the dma tag
@
text
@d63 1
a63 1
			drm_pci_free(dev->pa.pa_dmat, entry->seglist[i]);
@


1.11
log
@Kill the linux-ready negative return codes in ``shared'' code. We handle
them wrong in several cases that i've noticed and Merging when needed is
still fairly simple, anyway. This shaves another 500 bytes from an amd64
kernel due to not having to flip the sign on some things. It also stops
my eyes bleeding.

Tested by a few along with the last diff that went in.
@
text
@d63 1
a63 1
			drm_pci_free(dev, entry->seglist[i]);
@


1.10
log
@Move dev->driver over to being a pointer to a const struct, instead of stupidly
filling in a pre-allocated one on each attach.

Makes the code a bunch nicer, shrinks a kernel by about 1.5k on amd64,
helps with my sanity, and paves way for later changes.

Tested by a few for a couple of weeks now.
@
text
@d135 2
a136 3
	if (dev->driver->dma_ioctl) {
		/* shared code returns -errno */
		return -dev->driver->dma_ioctl(dev, data, file_priv);
@


1.9
log
@Rework the drm locking to be at least halfway sane. The freebsd code
held a lock over all driver ioctls in order to be ``mpsafe''. Stop lying
to ourselves for a start. This code is not fully mpsafe, and should not
pretend to be so.  Put the locking around where it should, and rely on
biglock for the rest. This will need to be fixed, but avoids some of the
horrible that we have right now.

Tested by many over a long time and several iterations.
@
text
@d73 1
a73 1
			    dev->driver.buf_priv_size, DRM_MEM_BUFS);
d135 1
a135 1
	if (dev->driver.dma_ioctl) {
d137 1
a137 1
		return -dev->driver.dma_ioctl(dev, data, file_priv);
@


1.8
log
@Kill some more unused struct fields and the cases for them.
@
text
@d49 2
@


1.7
log
@The code for cleaning up errored buffers and for cleaning up at the end
is the same. Factor them into one function. Saves another 450 bytes on
amd64.
@
text
@d71 1
a71 1
			    entry->buflist[i].dev_priv_size, DRM_MEM_BUFS);
d123 1
a123 3
		if (dma->buflist[i]->file_priv == file_priv) {
			switch (dma->buflist[i]->list) {
			case DRM_LIST_NONE:
a124 9
				break;
			case DRM_LIST_WAIT:
				dma->buflist[i]->list = DRM_LIST_RECLAIM;
				break;
			default:
				/* Buffer already on hardware. */
				break;
			}
		}
@


1.6
log
@Apply a light paddling with the knf stick. No binary change.
@
text
@d55 26
d84 1
a84 1
	int i, j;
d90 2
a91 28
	for (i = 0; i <= DRM_MAX_ORDER; i++) {
		if (dma->bufs[i].seg_count) {
			DRM_DEBUG("order %d: buf_count = %d,"
			    " seg_count = %d\n", i, dma->bufs[i].buf_count,
			    dma->bufs[i].seg_count);
			for (j = 0; j < dma->bufs[i].seg_count; j++) {
				drm_pci_free(dev, dma->bufs[i].seglist[j]);
			}
			if (dma->bufs[i].seglist)
				drm_free(dma->bufs[i].seglist,
				    dma->bufs[i].seg_count *
				    sizeof(*dma->bufs[i].seglist),
				    DRM_MEM_BUFS);
		}

	   	if (dma->bufs[i].buf_count) {
		   	for (j = 0; j < dma->bufs[i].buf_count; j++) {
				drm_free(dma->bufs[i].buflist[j].dev_private,
				    dma->bufs[i].buflist[j].dev_priv_size,
				    DRM_MEM_BUFS);
			}
			if (dma->bufs[i].buflist)
		   		drm_free(dma->bufs[i].buflist,
				    dma->bufs[i].buf_count *
				    sizeof(*dma->bufs[i].buflist),
				    DRM_MEM_BUFS);
		}
	}
@


1.5
log
@fix up a few free -> drm_free() cases that were missed before.
@
text
@d67 1
a67 3
			    " seg_count = %d\n",
			    i,
			    dma->bufs[i].buf_count,
d106 2
a107 1
	if (!buf) return;
d120 2
a121 1
	if (!dma) return;
@


1.4
log
@Switch all instances of malloc/free in the DRM to drm_alloc, drm_free
and drm_calloc.

With the recent change to check overflow in drm_calloc, this means that
all allocations that require multiplication are now checked. Also use
drm_calloc() when zeroing is needed and drop the bzero/memset
afterwards.  Finally, make drm_free() check for NULL, so we don't need
to do so every time.

ok miod@@, deraadt@@
@
text
@d75 4
a78 1
				free(dma->bufs[i].seglist, M_DRM);
d83 3
a85 2
				free(dma->bufs[i].buflist[j].dev_private,
				    M_DRM);
d88 4
a91 1
		   		free(dma->bufs[i].buflist, M_DRM);
d95 5
a99 6
	if (dma->buflist)
		free(dma->buflist, M_DRM);
	if (dma->pagelist)
		free(dma->pagelist, M_DRM);
	if (dev->dma)
		drm_free(dev->dma, sizeof(*dev->dma), DRM_MEM_DMA);
@


1.3
log
@Kill the silly ``drm_device_t'' and ``drm_file_t'' typedefs. just use
``struct drm_device'' and ``struct drm_file'' respectively. Since i'm
changing a lot of prototypes anyway, remove all parameter names from
prototypes, in accordance with style(9) (and sanity).
@
text
@d45 1
a45 1
	dev->dma = malloc(sizeof(*dev->dma), M_DRM, M_NOWAIT | M_ZERO);
d93 1
a93 1
		free(dev->dma, M_DRM);
@


1.2
log
@destatic the static functions, they only make debugging harder.
While i'm here:
remove a couple of debug printfs that shouldn't have gone in anyway.
trowel on some KNF (I really need to get around to sending some of this upstream).
remove some netbsd specific code that netbsd doesn't have anymore.

ok tedu.
@
text
@d42 1
a42 1
drm_dma_setup(drm_device_t *dev)
d55 1
a55 1
drm_dma_takedown(drm_device_t *dev)
d100 1
a100 1
drm_free_buffer(drm_device_t *dev, drm_buf_t *buf)
d110 1
a110 1
drm_reclaim_buffers(drm_device_t *dev, struct drm_file *file_priv)
d135 1
a135 1
drm_dma(drm_device_t *dev, void *data, struct drm_file *file_priv)
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d41 2
a42 1
int drm_dma_setup(drm_device_t *dev)
d54 2
a55 1
void drm_dma_takedown(drm_device_t *dev)
d57 2
a58 2
	drm_device_dma_t  *dma = dev->dma;
	int		  i, j;
d63 1
a63 1
				/* Clear dma buffers */
d67 4
a70 4
				  " seg_count = %d\n",
				  i,
				  dma->bufs[i].buf_count,
				  dma->bufs[i].seg_count);
d99 2
a100 1
void drm_free_buffer(drm_device_t *dev, drm_buf_t *buf)
d104 1
a104 1
	buf->pending  = 0;
d106 1
a106 1
	buf->used     = 0;
d109 2
a110 1
void drm_reclaim_buffers(drm_device_t *dev, struct drm_file *file_priv)
d113 1
a113 1
	int		 i;
d134 2
a135 1
int drm_dma(drm_device_t *dev, void *data, struct drm_file *file_priv)
@

