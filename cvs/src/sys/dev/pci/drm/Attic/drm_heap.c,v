head	1.6;
access;
symbols
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.8
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.08.14.02.49.19;	author jsg;	state dead;
branches;
next	1.5;

1.5
date	2011.06.02.18.22.00;	author weerd;	state Exp;
branches;
next	1.4;

1.4
date	2009.04.06.21.30.18;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2009.04.06.04.21.59;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2009.03.26.07.25.06;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2009.02.05.00.25.51;	author oga;	state Exp;
branches;
next	;


desc
@@


1.6
log
@drm_heap.c is no longer needed
@
text
@/* $OpenBSD: drm_heap.c,v 1.5 2011/06/02 18:22:00 weerd Exp $ */
/*
 * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
 * Copyright (C) The Weather Channel, Inc.  2002.  All Rights Reserved.
 *
 * The Weather Channel (TM) funded Tungsten Graphics to develop the
 * initial release of the Radeon 8500 driver under the XFree86 license.
 * This notice must be preserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Keith Whitwell <keith@@tungstengraphics.com>
 */

#include "drmP.h"
#include "drm.h"

struct drm_mem *drm_split_block(struct drm_heap *, struct drm_mem *, int,
		    int, struct drm_file *);
struct drm_mem *drm_find_block(struct drm_heap *, int);
void		drm_free_block(struct drm_heap *, struct drm_mem *);
/*
 * Very simple allocator for GART memory, working on a static range
 * already mapped into each client's address space.
 */
struct drm_mem *
drm_split_block(struct drm_heap *heap, struct drm_mem *p, int start,
    int size, struct drm_file *file_priv)
{
	/* Maybe cut off the start of an existing block */
	if (start > p->start) {
		struct drm_mem *newblock = drm_alloc(sizeof(*newblock));
		if (newblock == NULL)
			goto out;
		newblock->start = start;
		newblock->size = p->size - (start - p->start);
		newblock->file_priv = NULL;
		TAILQ_INSERT_AFTER(heap, p, newblock, link);
		p->size -= newblock->size;
		p = newblock;
	}

	/* Maybe cut off the end of an existing block */
	if (size < p->size) {
		struct drm_mem *newblock = drm_alloc(sizeof(*newblock));
		if (newblock == NULL)
			goto out;
		newblock->start = start + size;
		newblock->size = p->size - size;
		newblock->file_priv = NULL;
		TAILQ_INSERT_AFTER(heap, p, newblock, link);
		p->size = size;
	}

      out:
	/* Our block is in the middle */
	p->file_priv = file_priv;
	return p;
}

struct drm_mem *
drm_alloc_block(struct drm_heap *heap, int size, int align2,
    struct drm_file *file_priv)
{
	struct drm_mem *p;
	int mask = (1 << align2) - 1;

	TAILQ_FOREACH(p, heap, link) {
		int start = (p->start + mask) & ~mask;
		if (p->file_priv == NULL && start + size <= p->start + p->size)
			return (drm_split_block(heap, p, start,
			    size, file_priv));
	}

	return NULL;
}

struct drm_mem *
drm_find_block(struct drm_heap *heap, int start)
{
	struct drm_mem *p;

	TAILQ_FOREACH(p, heap, link)
		if (p->start == start)
			return p;

	return NULL;
}

void
drm_free_block(struct drm_heap *heap, struct drm_mem *p)
{
	struct drm_mem	*q;

	p->file_priv = NULL;

	if ((q = TAILQ_NEXT(p, link)) != TAILQ_END(heap) &&
	    q->file_priv == NULL) {
		p->size += q->size;
		TAILQ_REMOVE(heap, q, link);
		drm_free(q);
	}

	if ((q = TAILQ_PREV(p, drm_heap, link)) != TAILQ_END(heap) &&
	    q->file_priv == NULL) {
		q->size += p->size;
		TAILQ_REMOVE(heap, p, link);
		drm_free(p);
	}
}

/*
 * Initialize.
 */
int
drm_init_heap(struct drm_heap *heap, int start, int size)
{
	struct drm_mem *blocks;

	if (!TAILQ_EMPTY(heap))
		return (EBUSY);

	if ((blocks  = drm_alloc(sizeof(*blocks))) == NULL)
		return (ENOMEM);

	blocks->start = start;
	blocks->size = size;
	blocks->file_priv = NULL;
	TAILQ_INSERT_HEAD(heap, blocks, link);

	return (0);
}

/*
 * Free block at offset ``offset'' owned by file_priv.
 */
int
drm_mem_free(struct drm_heap *heap, int offset, struct drm_file *file_priv)
{
	struct drm_mem	*p;

	if ((p = drm_find_block(heap, offset)) == NULL)
		return (EFAULT);
	if (p->file_priv != file_priv)
		return (EPERM);

	drm_free_block(heap, p);
	return (0);
}

/*
 * Free all blocks associated with the releasing file.
 */
void
drm_mem_release(struct drm_heap *heap, struct drm_file *file_priv)
{
	struct drm_mem	*p, *q;

	if (heap == NULL || TAILQ_EMPTY(heap))
		return;

	TAILQ_FOREACH(p, heap, link) {
		if (p->file_priv == file_priv)
			p->file_priv = NULL;
	}

	/* Coalesce the entries.  ugh... */
	for (p = TAILQ_FIRST(heap); p != TAILQ_END(heap); p = q) {
		while (p->file_priv == NULL &&
		    (q = TAILQ_NEXT(p, link)) != TAILQ_END(heap) &&
		    q->file_priv == NULL) {
			p->size += q->size;
			TAILQ_REMOVE(heap, q, link);
			drm_free(q);
		}
		q = TAILQ_NEXT(p, link);
	}
}

/*
 * Shutdown the heap.
 */
void
drm_mem_takedown(struct drm_heap *heap)
{
	struct drm_mem	*p;

	if (heap == NULL)
		return;

	while ((p = TAILQ_FIRST(heap)) != NULL) {
		TAILQ_REMOVE(heap, p, link);
		drm_free(p);
	}
}
@


1.5
log
@Add $OpenBSD$ after oga said 'go ahead and fix that'

'go for it' oga@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.4
log
@factor a bit more functionality into common code instead of repeating it
in both drivers.
@
text
@d1 1
@


1.3
log
@merge radeon_mem_release() and radeon_mem_takedown() into the drm_heap
interface as drm_mem_release() and drm_mem_takedown() respectively.

While this interface's days are numbered, I'm about to make another
driver use it to remove even worse code.

Roll on memory management...
@
text
@d37 2
d148 17
@


1.2
log
@The drm_* allocation functions have been #defined to not use most of
their arguments for a while. Actually go through the code and remove the
extraneous arguments. Makes things easier to read.
@
text
@d127 2
a128 1
/* Initialize.
d147 46
@


1.1
log
@Merge the static block allocation code from {i915,radeon}_mem.c into
non-static code that's shared between both.  While i'm here convert them
to TAILQ.

Eventually, both of these will die, but until then I'd rather shave the
space in the kernel.

Tested on radeon and intel.
@
text
@d47 1
a47 2
		struct drm_mem *newblock =
		    drm_alloc(sizeof(*newblock), DRM_MEM_BUFS);
d60 1
a60 2
		struct drm_mem *newblock =
		    drm_alloc(sizeof(*newblock), DRM_MEM_BUFS);
d116 1
a116 1
		drm_free(q, sizeof(*q), DRM_MEM_BUFS);
d123 1
a123 1
		drm_free(p, sizeof(*p), DRM_MEM_BUFS);
d137 1
a137 1
	if ((blocks  = drm_alloc(sizeof(*blocks), DRM_MEM_BUFS)) == NULL)
@

