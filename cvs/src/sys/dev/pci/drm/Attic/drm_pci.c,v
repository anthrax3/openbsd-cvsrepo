head	1.9;
access;
symbols
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2009.02.15.20.10.24;	author oga;	state dead;
branches;
next	1.8;

1.8
date	2009.02.08.22.21.39;	author chl;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.22.14.42.36;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.08.16.01.53.05;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.29.19.44.13;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.26.19.33.19;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.26.16.42.48;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2008.02.05.19.34.01;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove drm_pci_alloc and associated definitions.
@
text
@/*-
 * Copyright 2003 Eric Anholt.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include "drmP.h"

/*
 * Allocate a physically contiguous DMA-accessible consistent 
 * memory block.
 */
drm_dma_handle_t *
drm_pci_alloc(bus_dma_tag_t dmat, size_t size, size_t align,
    dma_addr_t maxaddr)
{
	drm_dma_handle_t *dmah;
	int ret, nsegs;

	/* Need power-of-two alignment, so fail the allocation if it isn't. */
	if ((align & (align - 1)) != 0) {
		DRM_ERROR("drm_pci_alloc with non-power-of-two alignment %d\n",
		    (int)align);
		return NULL;
	}

	dmah = drm_alloc(sizeof(*dmah), DRM_MEM_DMA);
	if (dmah == NULL)
		return NULL;

	if (bus_dmamap_create(dmat, size, 1, size, 0,
	    BUS_DMA_NOWAIT | BUS_DMA_ALLOCNOW, &dmah->dmamap) != 0)
		goto dmahfree;
		
	if ((ret = bus_dmamem_alloc(dmat, size, align, 0,
	    &dmah->seg, 1, &nsegs, BUS_DMA_NOWAIT)) != 0) {
		DRM_ERROR("bus_dmamem_alloc(%zd, %zd) returned %d\n",
		    size, align, ret);
		goto destroy;
	}
	if (nsegs != 1) {
		DRM_ERROR("bus_dmamem_alloc(%zd) returned %d segments\n",
		    size, nsegs);
		goto free;
	}

	if ((ret = bus_dmamem_map(dmat, &dmah->seg, 1, size,
	    (caddr_t*)&dmah->addr, BUS_DMA_NOWAIT)) != 0) {
		DRM_ERROR("bus_dmamem_map() failed %d\n", ret);
		goto free;
	}

	if (bus_dmamap_load(dmat, dmah->dmamap, dmah->addr, size,
	    NULL, BUS_DMA_NOWAIT) != 0)
		goto unmap;

	dmah->busaddr = dmah->dmamap->dm_segs[0].ds_addr;
	dmah->vaddr = dmah->addr;
	dmah->size = size;

	return dmah;

unmap:
	bus_dmamem_unmap(dmat, dmah->addr, size);
free:
	bus_dmamem_free(dmat, &dmah->seg, 1);
destroy:
	bus_dmamap_destroy(dmat, dmah->dmamap);
dmahfree:
	drm_free(dmah, sizeof(*dmah), DRM_MEM_DMA);

	return (NULL);

}

/*
 * Free a DMA-accessible consistent memory block.
 */
void
drm_pci_free(bus_dma_tag_t dmat, drm_dma_handle_t *dmah)
{
	if (dmah == NULL)
		return;

	bus_dmamap_unload(dmat, dmah->dmamap);
	bus_dmamem_unmap(dmat, dmah->vaddr, dmah->size);
	bus_dmamem_free(dmat, &dmah->seg, 1);
	bus_dmamap_destroy(dmat, dmah->dmamap);

	drm_free(dmah, sizeof(*dmah), DRM_MEM_DMA);
}
@


1.8
log
@Fix uninitialized arguments.

Found by LLVM/Clang Static Analyzer.

ok oga@@
@
text
@@


1.7
log
@reduce the dependancy of drm_pci_alloc upon the drm device softc. Just
pass in the dma tag
@
text
@d52 2
a53 2
	if (bus_dmamem_alloc(dmat, size, align, 0,
	    &dmah->seg, 1, &nsegs, BUS_DMA_NOWAIT) != 0) {
d64 2
a65 2
	if (bus_dmamem_map(dmat, &dmah->seg, 1, size,
	    (caddr_t*)&dmah->addr, BUS_DMA_NOWAIT) != 0) {
@


1.6
log
@Apply a light paddling with the knf stick. No binary change.
@
text
@d31 1
a31 1
drm_pci_alloc(struct drm_device *dev, size_t size, size_t align,
d48 1
a48 1
	if (bus_dmamap_create(dev->pa.pa_dmat, size, 1, size, 0,
d52 1
a52 1
	if (bus_dmamem_alloc(dev->pa.pa_dmat, size, align, 0,
d64 1
a64 1
	if (bus_dmamem_map(dev->pa.pa_dmat, &dmah->seg, 1, size,
d70 1
a70 1
	if (bus_dmamap_load(dev->pa.pa_dmat, dmah->dmamap, dmah->addr, size,
d81 1
a81 1
	bus_dmamem_unmap(dev->pa.pa_dmat, dmah->addr, size);
d83 1
a83 1
	bus_dmamem_free(dev->pa.pa_dmat, &dmah->seg, 1);
d85 1
a85 1
	bus_dmamap_destroy(dev->pa.pa_dmat, dmah->dmamap);
d97 1
a97 1
drm_pci_free(struct drm_device *dev, drm_dma_handle_t *dmah)
d102 4
a105 4
	bus_dmamap_unload(dev->pa.pa_dmat, dmah->dmamap);
	bus_dmamem_unmap(dev->pa.pa_dmat, dmah->vaddr, dmah->size);
	bus_dmamem_free(dev->pa.pa_dmat, &dmah->seg, 1);
	bus_dmamap_destroy(dev->pa.pa_dmat, dmah->dmamap);
@


1.5
log
@Switch all instances of malloc/free in the DRM to drm_alloc, drm_free
and drm_calloc.

With the recent change to check overflow in drm_calloc, this means that
all allocations that require multiplication are now checked. Also use
drm_calloc() when zeroing is needed and drop the bzero/memset
afterwards.  Finally, make drm_free() check for NULL, so we don't need
to do so every time.

ok miod@@, deraadt@@
@
text
@a23 7
/**
 * \file drm_pci.h
 * \brief PCI consistent, DMA-accessible memory allocation.
 *
 * \author Eric Anholt <anholt@@FreeBSD.org>
 */

d26 2
a27 6
/**********************************************************************/
/** \name PCI memory */
/*@@{*/

/**
 * \brief Allocate a physically contiguous DMA-accessible consistent 
d58 1
a58 1
	if(nsegs != 1) {
d93 2
a94 2
/**
 * \brief Free a DMA-accessible consistent memory block.
a108 2

/*@@}*/
@


1.4
log
@Kill the silly ``drm_device_t'' and ``drm_file_t'' typedefs. just use
``struct drm_device'' and ``struct drm_file'' respectively. Since i'm
changing a lot of prototypes anyway, remove all parameter names from
prototypes, in accordance with style(9) (and sanity).
@
text
@d55 1
a55 1
	dmah = malloc(sizeof(drm_dma_handle_t), M_DRM, M_ZERO | M_NOWAIT);
d98 1
a98 1
	free(dmah, M_DRM);
d118 1
a118 1
	free(dmah, M_DRM);
@


1.3
log
@Kill the rest of the ifdef maze in drm_*.c

I was going to do this per file, but decided all it would achieve was
artificially increasing my commit count.

>Kill the ifdef maze. I've been considering doing this for months, it
>doesn't make getting changes to and  from upstream much easier, and just
>makes the code hard to read.
@
text
@d42 2
a43 1
drm_pci_alloc(drm_device_t *dev, size_t size, size_t align, dma_addr_t maxaddr)
d108 1
a108 1
drm_pci_free(drm_device_t *dev, drm_dma_handle_t *dmah)
@


1.2
log
@drm_pci_alloc allocates memory using bus_dma, but then doesn't use dmamaps.
This is unportable to some architectures, fix it. While i'm here, kill
he defines for netbsd aprint_ and just use the DRM_* macros.

ok miod@@
@
text
@a36 14
#if defined(__FreeBSD__)
static void
drm_pci_busdma_callback(void *arg, bus_dma_segment_t *segs, int nsegs, int error)
{
	drm_dma_handle_t *dmah = arg;

	if (error != 0)
		return;

	KASSERT(nsegs == 1, ("drm_pci_busdma_callback: bad dma segment count"));
	dmah->busaddr = segs[0].ds_addr;
}
#endif

d45 1
a45 4
	int ret;
#if defined(__NetBSD__) || defined(__OpenBSD__)
	int nsegs;
#endif
a57 31
#ifdef __FreeBSD__
	ret = bus_dma_tag_create(NULL, align, 0, /* tag, align, boundary */
	    maxaddr, BUS_SPACE_MAXADDR, /* lowaddr, highaddr */
	    NULL, NULL, /* filtfunc, filtfuncargs */
	    size, 1, size, /* maxsize, nsegs, maxsegsize */
	    BUS_DMA_ALLOCNOW, NULL, NULL, /* flags, lockfunc, lockfuncargs */
	    &dmah->tag);
	if (ret != 0) {
		free(dmah, M_DRM);
		return NULL;
	}

	ret = bus_dmamem_alloc(dmah->tag, &dmah->vaddr, BUS_DMA_NOWAIT,
	    &dmah->map);
	if (ret != 0) {
		bus_dma_tag_destroy(dmah->tag);
		free(dmah, M_DRM);
		return NULL;
	}

	ret = bus_dmamap_load(dmah->tag, dmah->map, dmah->vaddr, size,
	    drm_pci_busdma_callback, dmah, 0);
	if (ret != 0) {
		bus_dmamem_free(dmah->tag, dmah->vaddr, dmah->map);
		bus_dma_tag_destroy(dmah->tag);
		free(dmah, M_DRM);
		return NULL;
	}

	return dmah;
#elif defined(__NetBSD__) || defined(__OpenBSD__)
a99 1
#endif
a111 4
#if defined(__FreeBSD__)
	bus_dmamem_free(dmah->tag, dmah->vaddr, dmah->map);
	bus_dma_tag_destroy(dmah->tag);
#elif defined(__NetBSD__) || defined(__OpenBSD__)
a115 1
#endif
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d103 2
d106 9
a114 7
	ret = bus_dmamem_alloc(dev->pa.pa_dmat, size, align, 0,
	    &dmah->seg, 1, &nsegs, BUS_DMA_NOWAIT);
	if (ret != 0) {
		aprint_error("%s: bus_dmamem_alloc(%zd, %zd) returned %d\n",
		    __func__, size, align, ret);
		free(dmah, M_DRM);
		return NULL;
d117 3
a119 5
		aprint_error("%s: bus_dmamem_alloc(%zd) returned %d segments\n",
		    __func__, size, nsegs);
		bus_dmamem_free(dev->pa.pa_dmat, &dmah->seg, nsegs);
		free(dmah, M_DRM);
		return NULL;
d122 4
a125 8
	ret = bus_dmamem_map(dev->pa.pa_dmat, &dmah->seg, 1, size, (caddr_t*)&dmah->addr,
	    BUS_DMA_NOWAIT);
	if (ret != 0) {
		bus_dmamem_free(dev->pa.pa_dmat, &dmah->seg, 1);
		aprint_error("%s: bus_dmamem_map() failed %d\n", __func__,
		    ret);
		free(dmah, M_DRM);
		return NULL;
d128 5
a132 1
	dmah->busaddr = dmah->seg.ds_addr;
d135 13
a149 1
	return dmah;
d165 1
d168 1
@

