head	1.12;
access;
symbols
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.12
date	2008.11.17.00.40.04;	author oga;	state dead;
branches;
next	1.11;

1.11
date	2008.09.18.15.10.57;	author oga;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.07.00.44.06;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2008.08.16.01.53.05;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2008.08.13.20.38.26;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2008.07.29.19.44.13;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.26.19.33.19;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.26.18.17.22;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.26.16.42.48;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.03.17.21.22;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.16.01.02.31;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.12
log
@drm advertises a read and poll method. this was there to prevent errrors
on rather old xservers. Said old xservers haven't been around in quite a
long time so just remove them.

Since the only function left in drm_fops.c is a small helper function,
just move it to drm_drv.c and nuke the redundant file.

no one objected when I said I was going to do this.
@
text
@/*-
 * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.
 * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Rickard E. (Rik) Faith <faith@@valinux.com>
 *    Daryll Strauss <daryll@@valinux.com>
 *    Gareth Hughes <gareth@@valinux.com>
 *
 */

/** @@file drm_fops.c
 * Support code for dealing with the file privates associated with each
 * open of the DRM device.
 */

#include "drmP.h"

struct drm_file *
drm_find_file_by_minor(struct drm_device *dev, int minor)
{
	struct drm_file *priv;

	DRM_SPINLOCK_ASSERT(&dev->dev_lock);

	TAILQ_FOREACH(priv, &dev->files, link)
		if (priv->minor == minor)
			return (priv);
	return (NULL);
}

/* The drm_read and drm_poll are stubs to prevent spurious errors
 * on older X Servers (4.3.0 and earlier) */

int
drmread(dev_t kdev, struct uio *uio, int ioflag)
{
	return 0;
}

int
drmpoll(dev_t kdev, int events, struct proc *p)
{
	return 0;
}
@


1.11
log
@Rework the drm locking to be at least halfway sane. The freebsd code
held a lock over all driver ioctls in order to be ``mpsafe''. Stop lying
to ourselves for a start. This code is not fully mpsafe, and should not
pretend to be so.  Put the locking around where it should, and rely on
biglock for the rest. This will need to be fixed, but avoids some of the
horrible that we have right now.

Tested by many over a long time and several iterations.
@
text
@@


1.10
log
@Kill some unneeded defines and struct members.
@
text
@a51 51
/* drm_open_helper is called whenever a process opens /dev/drm. */
int
drm_open_helper(dev_t kdev, int flags, int fmt, struct proc *p,
    struct drm_device *dev)
{
	struct drm_file   *priv;
	int m, retcode;

	m = minor(kdev);
	if (flags & O_EXCL)
		return (EBUSY); /* No exclusive opens */

	DRM_DEBUG("minor = %d\n", DRM_CURRENTPID, m);

	priv = drm_calloc(1, sizeof(*priv), DRM_MEM_FILES);
	if (priv == NULL)
		return (ENOMEM);

	priv->kdev = kdev;
	priv->flags = flags;
	priv->minor = m;

	/* for compatibility root is always authenticated */
	priv->authenticated = DRM_SUSER(p);

	DRM_LOCK();
	if (dev->driver.open) {
		/* shared code returns -errno */
		retcode = -dev->driver.open(dev, priv);
		if (retcode != 0) {
			DRM_UNLOCK();
			drm_free(priv, sizeof(*priv), DRM_MEM_FILES);
			return (retcode);
		}
	}

	/* first opener automatically becomes master if root */
	if (TAILQ_EMPTY(&dev->files) && !DRM_SUSER(p)) {
		DRM_UNLOCK();
		drm_free(priv, sizeof(*priv), DRM_MEM_FILES);
		return (EPERM);
	}

	priv->master = TAILQ_EMPTY(&dev->files);

	TAILQ_INSERT_TAIL(&dev->files, priv, link);
	DRM_UNLOCK();
	return (0);
}


@


1.9
log
@Apply a light paddling with the knf stick. No binary change.
@
text
@d54 1
a54 1
drm_open_helper(DRM_CDEV kdev, int flags, int fmt, DRM_STRUCTPROC *p,
d64 1
a64 1
	DRM_DEBUG("pid = %d, minor = %d\n", DRM_CURRENTPID, m);
a69 2
	priv->uid = DRM_UID(p);
	priv->pid = DRM_PID(p);
d107 1
a107 1
drmread(DRM_CDEV kdev, struct uio *uio, int ioflag)
d113 1
a113 1
drmpoll(DRM_CDEV kdev, int events, DRM_STRUCTPROC *p)
@


1.8
log
@Kill file_priv->refs, it is always 1. Also  move two things from the
softc into file_priv since otherwise the wrong value could rarely be
used.
@
text
@d67 1
a67 1
	if (priv == NULL) {
d69 1
a69 1
	}
@


1.7
log
@Switch all instances of malloc/free in the DRM to drm_alloc, drm_free
and drm_calloc.

With the recent change to check overflow in drm_calloc, this means that
all allocations that require multiplication are now checked. Also use
drm_calloc() when zeroing is needed and drop the bzero/memset
afterwards.  Finally, make drm_free() check for NULL, so we don't need
to do so every time.

ok miod@@, deraadt@@
@
text
@d62 1
a62 2
		return EBUSY; /* No exclusive opens */
	dev->flags = flags;
d66 13
d80 4
a83 6
	priv = drm_find_file_by_minor(dev, m);
	if (priv) {
		priv->refs++;
	} else {
		priv = drm_calloc(1, sizeof(*priv), DRM_MEM_FILES);
		if (priv == NULL) {
d85 2
a86 1
			return ENOMEM;
d88 1
a88 2
		priv->uid = DRM_UID(p);
		priv->pid = DRM_PID(p);
d90 6
a95 5
		priv->refs = 1;
		priv->minor = m;

		/* for compatibility root is always authenticated */
		priv->authenticated = DRM_SUSER(p);
d97 1
a97 9
		if (dev->driver.open) {
			/* shared code returns -errno */
			retcode = -dev->driver.open(dev, priv);
			if (retcode != 0) {
				drm_free(priv, sizeof(*priv), DRM_MEM_FILES);
				DRM_UNLOCK();
				return retcode;
			}
		}
d99 1
a99 11
		/* first opener automatically becomes master if root */
		if (TAILQ_EMPTY(&dev->files) && !DRM_SUSER(p)) {
			drm_free(priv, sizeof(*priv), DRM_MEM_FILES);
			DRM_UNLOCK();
			return (EPERM);
		}

		priv->master = TAILQ_EMPTY(&dev->files);

		TAILQ_INSERT_TAIL(&dev->files, priv, link);
	}
d101 1
a101 1
	return 0;
@


1.6
log
@Kill the silly ``drm_device_t'' and ``drm_file_t'' typedefs. just use
``struct drm_device'' and ``struct drm_file'' respectively. Since i'm
changing a lot of prototypes anyway, remove all parameter names from
prototypes, in accordance with style(9) (and sanity).
@
text
@d72 1
a72 1
		priv = malloc(sizeof(*priv), M_DRM, M_NOWAIT | M_ZERO);
a81 1
		priv->ioctl_count = 0;
d90 1
a90 1
				free(priv, M_DRM);
d98 1
a98 1
			free(priv, M_DRM);
@


1.5
log
@Since we're not ifdefed anymore, change
drm_{open,close,poll,read,mmap,ioctl} into the form that cdev_decl()
likes, and nuke the #defines.
@
text
@d39 1
a39 1
drm_file_t *
d42 1
a42 1
	drm_file_t *priv;
d55 1
a55 1
    drm_device_t *dev)
d57 1
a57 1
	drm_file_t   *priv;
@


1.4
log
@Kill the rest of the ifdef maze in drm_*.c

I was going to do this per file, but decided all it would achieve was
artificially increasing my commit count.

>Kill the ifdef maze. I've been considering doing this for months, it
>doesn't make getting changes to and  from upstream much easier, and just
>makes the code hard to read.
@
text
@d117 1
a117 1
drm_read(DRM_CDEV kdev, struct uio *uio, int ioflag)
d123 1
a123 1
drm_poll(DRM_CDEV kdev, int events, DRM_STRUCTPROC *p)
@


1.3
log
@Make *drm(4) use D_CLONE so that the per-open data actually works. Since
i'm modifying this code anyway, prepare for privsep by making it so that
"master" openers must be root, and remove some spurious suser() checks.
For example, every DRM_ROOT_ONLY ioctl is also DRM_MASTER. Without this
change, privsep wouldn't work since the fd is no longer root owned.

With this, X privsep should work as soon as the userland bits are done
(currently unwritten).

Looked over by kettenis@@, ok thib@@.
@
text
@a38 2
#ifdef __OpenBSD__

a51 19
#else

drm_file_t *
drm_find_file_by_proc(drm_device_t *dev, DRM_STRUCTPROC *p)
{
	uid_t uid = DRM_UID(p);
	pid_t pid = DRM_PID(p);

	drm_file_t *priv;

	DRM_SPINLOCK_ASSERT(&dev->dev_lock);

	TAILQ_FOREACH(priv, &dev->files, link)
		if (priv->pid == pid && priv->uid == uid)
			return priv;
	return NULL;
}
#endif

a67 1
#ifdef __OpenBSD__
a68 3
#else
	priv = drm_find_file_by_proc(dev, p);
#endif
a97 1
#ifdef __OpenBSD__
a102 1
#endif
a108 3
#ifdef __FreeBSD__
	kdev->si_drv1 = dev;
#endif
@


1.2
log
@destatic the static functions, they only make debugging harder.
While i'm here:
remove a couple of debug printfs that shouldn't have gone in anyway.
trowel on some KNF (I really need to get around to sending some of this upstream).
remove some netbsd specific code that netbsd doesn't have anymore.

ok tedu.
@
text
@d39 17
d71 1
d89 3
d93 1
d122 9
a130 1
		/* first opener automatically becomes master */
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d39 2
a40 1
drm_file_t *drm_find_file_by_proc(drm_device_t *dev, DRM_STRUCTPROC *p)
d56 3
a58 2
int drm_open_helper(DRM_CDEV kdev, int flags, int fmt, DRM_STRUCTPROC *p,
 		    drm_device_t *dev)
a59 1
	int	     m = minor(kdev);
d61 1
a61 1
	int retcode;
d63 1
d80 2
a81 2
		priv->uid		= DRM_UID(p);
		priv->pid		= DRM_PID(p);
d83 3
a85 3
		priv->refs		= 1;
		priv->minor		= m;
		priv->ioctl_count 	= 0;
d88 1
a88 1
		priv->authenticated	= DRM_SUSER(p);
d116 2
a117 1
int drm_read(DRM_CDEV kdev, struct uio *uio, int ioflag)
d122 2
a123 1
int drm_poll(DRM_CDEV kdev, int events, DRM_STRUCTPROC *p)
@

