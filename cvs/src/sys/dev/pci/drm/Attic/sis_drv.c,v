head	1.26;
access;
symbols
	OPENBSD_4_7:1.25.0.2
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.4
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.19.0.2
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.26
date	2010.05.24.01.19.19;	author oga;	state dead;
branches;
next	1.25;

1.25
date	2009.04.06.21.30.18;	author oga;	state Exp;
branches;
next	1.24;

1.24
date	2009.04.06.05.21.24;	author oga;	state Exp;
branches;
next	1.23;

1.23
date	2009.04.06.04.52.30;	author oga;	state Exp;
branches;
next	1.22;

1.22
date	2009.04.06.04.45.19;	author oga;	state Exp;
branches;
next	1.21;

1.21
date	2009.04.03.14.30.57;	author oga;	state Exp;
branches;
next	1.20;

1.20
date	2009.04.03.14.16.23;	author oga;	state Exp;
branches;
next	1.19;

1.19
date	2008.12.08.19.06.34;	author kettenis;	state Exp;
branches;
next	1.18;

1.18
date	2008.11.24.16.56.25;	author oga;	state Exp;
branches;
next	1.17;

1.17
date	2008.11.24.05.51.23;	author oga;	state Exp;
branches;
next	1.16;

1.16
date	2008.11.24.04.21.31;	author oga;	state Exp;
branches;
next	1.15;

1.15
date	2008.11.24.03.49.19;	author oga;	state Exp;
branches;
next	1.14;

1.14
date	2008.11.23.22.56.02;	author oga;	state Exp;
branches;
next	1.13;

1.13
date	2008.11.22.22.43.53;	author oga;	state Exp;
branches;
next	1.12;

1.12
date	2008.11.22.21.26.48;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2008.11.22.20.49.36;	author oga;	state Exp;
branches;
next	1.10;

1.10
date	2008.11.22.04.45.21;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2008.11.22.04.30.41;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2008.11.17.00.30.41;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.17.00.26.02;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.07.22.35.30;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.07.21.59.32;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.26.19.33.20;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.06.19.19.02;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.16.01.02.31;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Remove the drm drivers that are not enabled (and have never been so).

For now they are unmaintained, and work on kernel modesetting has very
large inferface changes needing to be made. Also, when the radeon driver
has been converted over, we will no longer support X with the DRI1
protocol, only DRI2.

When the upheaval has finished, these drivers may be brought back after
work to switch them to DRI2 style memory management and kernel
modesetting has been done, but until then they are unsupported and
probably broken (i know at least two of them have been reported broken
before now). ragedrm will likely come back as a component of radeon
(their interfaces are still fairly similar). The other drivers require
rewriting.

I have been threatening to do this for over a year. Discussed with
deraadt@@ and matthieu@@ at various points since then.
@
text
@/* sis.c -- sis driver -*- linux-c -*-
 */
/*-
 * Copyright 2000 Silicon Integrated Systems Corp, Inc., HsinChu, Taiwan.
 * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.
 * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Sung-Ching Lin <sclin@@sis.com.tw>
 */

#include "drmP.h"
#include "sis_drm.h"

#define DRIVER_AUTHOR		"SIS, Tungsten Graphics"
#define DRIVER_NAME		"sis"
#define DRIVER_DESC		"SIS 300/630/540 and XGI V3XE/V5/V8"
#define DRIVER_DATE		"20070626"
#define DRIVER_MAJOR		1
#define DRIVER_MINOR		3
#define DRIVER_PATCHLEVEL	0

struct drm_sis_private {
	struct device	 dev;
	struct device	*drmdev;

	struct drm_heap	 agp_heap;
	struct drm_heap	 fb_heap;
} drm_sis_private_t;

enum sis_family {
	SIS_OTHER = 0,
	SIS_CHIP_315 = 1,
};

int	sisdrm_probe(struct device *, void *, void *);
void	sisdrm_attach(struct device *, struct device *, void *);
int	sisdrm_detach(struct device *, int);
void	sisdrm_lastclose(struct drm_device *);
void	sisdrm_close(struct drm_device *, struct drm_file *);
int	sisdrm_ioctl(struct drm_device *, u_long, caddr_t, struct drm_file *);

int	sis_alloc(struct drm_heap *, drm_sis_mem_t *, struct drm_file *);
int	sis_free(struct drm_heap *, drm_sis_mem_t *, struct drm_file *);
int	sis_fb_init(struct drm_device *, void *, struct drm_file *);
int	sis_agp_init(struct drm_device *, void *, struct drm_file *);

const static struct drm_pcidev sis_pciidlist[] = {
	{PCI_VENDOR_SIS, PCI_PRODUCT_SIS_300},
	{PCI_VENDOR_SIS, PCI_PRODUCT_SIS_5300},
	{PCI_VENDOR_SIS, PCI_PRODUCT_SIS_6300},
	{PCI_VENDOR_SIS, PCI_PRODUCT_SIS_6330},
	{PCI_VENDOR_SIS, PCI_PRODUCT_SIS_7300},
	{PCI_VENDOR_XGI, 0x0042, SIS_CHIP_315},
	{PCI_VENDOR_XGI, PCI_PRODUCT_XGI_VOLARI_V3XT},
	{0, 0, 0}
};

static const struct drm_driver_info sis_driver = {
	.close			= sisdrm_close,
	.lastclose		= sisdrm_lastclose,
	.ioctl			= sisdrm_ioctl,

	.name			= DRIVER_NAME,
	.desc			= DRIVER_DESC,
	.date			= DRIVER_DATE,
	.major			= DRIVER_MAJOR,
	.minor			= DRIVER_MINOR,
	.patchlevel		= DRIVER_PATCHLEVEL,

	.flags			= DRIVER_AGP | DRIVER_MTRR,
};

int
sisdrm_probe(struct device *parent, void *match, void *aux)
{
	return (drm_pciprobe((struct pci_attach_args *)aux, sis_pciidlist));
}

void
sisdrm_attach(struct device *parent, struct device *self, void *aux)
{
	struct drm_sis_private	*dev_priv = (struct drm_sis_private *)self;
	struct pci_attach_args	*pa = aux;
	int			 is_agp;

	is_agp = pci_get_capability(pa->pa_pc, pa->pa_tag, PCI_CAP_AGP,
	    NULL, NULL);
	printf("\n");

	TAILQ_INIT(&dev_priv->agp_heap);
	TAILQ_INIT(&dev_priv->fb_heap);

	dev_priv->drmdev = drm_attach_pci(&sis_driver, pa, is_agp, self);
}

int
sisdrm_detach(struct device *self, int flags)
{
	struct drm_sis_private *dev_priv = (struct drm_sis_private *)self;

	if (dev_priv->drmdev != NULL) {
		config_detach(dev_priv->drmdev, flags);
		dev_priv->drmdev = NULL;
	}

	return (0);
}

struct cfattach sisdrm_ca = {
	sizeof(struct drm_sis_private), sisdrm_probe, sisdrm_attach,
	sisdrm_detach
};

struct cfdriver sisdrm_cd = {
	0, "sisdrm", DV_DULL
};

void
sisdrm_close(struct drm_device *dev, struct drm_file *file_priv)
{
	struct drm_sis_private	*dev_priv = dev->dev_private;

	drm_mem_release(&dev_priv->agp_heap, file_priv);
	drm_mem_release(&dev_priv->fb_heap, file_priv);
}

void
sisdrm_lastclose(struct drm_device *dev)
{
	struct drm_sis_private	*dev_priv = dev->dev_private;

	drm_mem_takedown(&dev_priv->agp_heap);
	drm_mem_takedown(&dev_priv->fb_heap);
}

int
sisdrm_ioctl(struct drm_device *dev, u_long cmd, caddr_t data,
    struct drm_file *file_priv)
{
	struct drm_sis_private *dev_priv = dev->dev_private;

	if (dev_priv == NULL)
		return (EINVAL);

	if (file_priv->authenticated == 1) {
		switch (cmd) {
		case DRM_IOCTL_SIS_FB_ALLOC:
			return (sis_alloc(&dev_priv->fb_heap,
			    (drm_sis_mem_t *)data, file_priv));
		case DRM_IOCTL_SIS_FB_FREE:
			return (sis_free(&dev_priv->fb_heap,
			    (drm_sis_mem_t *)data, file_priv));
		case DRM_IOCTL_SIS_AGP_ALLOC:
			return (sis_alloc(&dev_priv->agp_heap,
			    (drm_sis_mem_t *)data, file_priv));
		case DRM_IOCTL_SIS_AGP_FREE:
			return (sis_free(&dev_priv->agp_heap,
			    (drm_sis_mem_t *)data, file_priv));
		}
	}

	if (file_priv->master == 1) {
		switch (cmd) {
		case DRM_IOCTL_SIS_AGP_INIT:
			return (sis_agp_init(dev, data, file_priv));
		case DRM_IOCTL_SIS_FB_INIT:
			return (sis_fb_init(dev, data, file_priv));
		}
	}
	return (EINVAL);
}

/* fb management via fb device */
/* Called by the X Server to initialize the FB heap.  Allocations will fail
 * unless this is called.  Offset is the beginning of the heap from the
 * framebuffer offset (MaxXFBMem in XFree86).
 *
 * Memory layout according to Thomas Winischofer:
 * |------------------|DDDDDDDDDDDDDDDDDDDDDDDDDDDDD|HHHH|CCCCCCCCCCC|
 *
 *    X driver/sisfb                                  HW-   Command-
 *  framebuffer memory           DRI heap           Cursor   queue
 */
int
sis_fb_init(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	struct drm_sis_private	*dev_priv = dev->dev_private;
	drm_sis_fb_t		*fb = data;

	DRM_DEBUG("offset = %u, size = %u", fb->offset, fb->size);

	return (drm_init_heap(&dev_priv->fb_heap, fb->offset, fb->size));
}

int
sis_agp_init(struct drm_device *dev, void *data, struct drm_file *file_priv)
{
	struct drm_sis_private	*dev_priv = dev->dev_private;
	drm_sis_agp_t		*agp = data;

	DRM_DEBUG("offset = %u, size = %u", agp->offset, agp->size);

	return (drm_init_heap(&dev_priv->agp_heap, agp->offset, agp->size));
}

int
sis_alloc(struct drm_heap *heap, drm_sis_mem_t *mem,
    struct drm_file *file_priv)
{
	struct drm_mem		*block;

	/* Original code had no aligment restrictions. Should we page align? */
	if ((block = drm_alloc_block(heap, mem->size, 0, file_priv)) == NULL)
		return (ENOMEM);

	mem->offset = block->start;
	mem->free = block->start;
	DRM_DEBUG("alloc agp, size = %d, offset = %d\n", mem->size,
	    mem->offset);

	return (0);
}

int
sis_free(struct drm_heap *heap, drm_sis_mem_t *mem, struct drm_file *file_priv)
{
	DRM_DEBUG("free fb, free = 0x%lx\n", mem->free);

	return (drm_mem_free(heap, mem->free, file_priv));
}
@


1.25
log
@factor a bit more functionality into common code instead of repeating it
in both drivers.
@
text
@@


1.24
log
@Don't forget to TAILQ_INIT() the heap...
@
text
@a247 2
	struct drm_mem		*block; 

d250 1
a250 7
	if ((block = drm_find_block(heap, mem->free)) == NULL)
		return (EFAULT);
	if (block->file_priv != file_priv)
		return (EPERM);

	drm_free_block(heap, block);
	return (0);
@


1.23
log
@extra or missing blank lines.
@
text
@d111 3
@


1.22
log
@sisdrm is disabled. That does not mean that the code doesn't offend me.

This driver is a very thin wrapper for doling out memory to userland,
everything else is handled by the userland drivers, therefore I really
want to rewrite this driver before even thinking about enabling it,
userland mapping graphics registers makes it hard for me to sleep at
night.

Anyway, remove a huge pile of scary code by switching the memory
allocation ioctls to user the drm_heap.c code instead of the very
complicated mess that it uses right now, probably saves some space, too.

Turns out linux made some similar (but far from identical) changes ages ago,
They did more, that may come later.
@
text
@d153 1
@


1.21
log
@detypedef drm_pci_id_list_t.
@
text
@d4 1
d28 2
d34 21
a54 1
#include "sis_drv.h"
d59 2
d63 5
d80 2
a81 1
	.buf_priv_size		= 1, /* No dev_priv */
a82 2
	.context_ctor		= sis_init_context,
	.context_dtor		= sis_final_context,
d97 1
a97 1
	return drm_pciprobe((struct pci_attach_args *)aux, sis_pciidlist);
d103 1
a103 1
	drm_sis_private_t	*dev_priv = (drm_sis_private_t *)self;
d117 1
a117 1
	drm_sis_private_t *dev_priv = (drm_sis_private_t *)self;
d128 1
a128 1
	sizeof(drm_sis_private_t), sisdrm_probe, sisdrm_attach,
d136 17
d157 5
d165 2
a166 1
			return (sis_fb_alloc(dev, data, file_priv));
d168 2
a169 1
			return (sis_fb_free(dev, data, file_priv));
d171 2
a172 1
			return (sis_ioctl_agp_alloc(dev, data, file_priv));
d174 2
a175 1
			return (sis_ioctl_agp_free(dev, data, file_priv));
d182 1
a182 1
			return (sis_ioctl_agp_init(dev, data, file_priv));
d188 67
@


1.20
log
@Sprinkle some const correctness for the pciid lists. From mickey ages
ago.
@
text
@d38 1
a38 1
const static drm_pci_id_list_t sis_pciidlist[] = {
@


1.19
log
@Make the various drm drivers print the interrupt they're using.

ok oga@@
@
text
@d38 1
a38 1
static drm_pci_id_list_t sis_pciidlist[] = {
@


1.18
log
@back out the buf_priv change. it made some incorrect assumptions and
broke radeondrm. Fixing it is ugly, so another change will have to be made
later.


I /hate/ the drm_buf api, it will die as soon as it can.
@
text
@d80 1
@


1.17
log
@Instead of having a ``private data'' pointer in the dma buffers, just
ask the driver how large they need the structure we allocate to be, and
use inheritance like we do for struct device. Simplifies things a little
bit and saves us a pointer.
@
text
@d50 1
@


1.16
log
@change drm_attach_mi to drm_attach_pci. we take the pci_attach_args, and
setup the drm_attach_args with the needed information.

require interface version 1.1 libdrm has been requesting it for ages),
which means that we can set the busid string at attach time. (generated in
drm_attach_pci), also pass in the interrupt line and bst.

Now we don't need dev->pa at all, so remove it, finally.
@
text
@a49 1
	.buf_priv_size		= 1, /* No dev_priv */
@


1.15
log
@make device works out if it's agp and tells the drm driver, not the
other way round. More dev->pa reduction
@
text
@d81 1
a81 2
	dev_priv->drmdev = drm_attach_mi(&sis_driver, pa->pa_dmat,
	    pa, is_agp, self);
@


1.14
log
@pass in the dmat when we attach the drm driver. reduces pci dependancy.
@
text
@d76 1
d78 5
a82 1
	dev_priv->drmdev = drm_attach_mi(&sis_driver, pa->pa_dmat, pa, self);
@


1.13
log
@Make all drm drivers map their mmio register space on attach instead of
using the drm_maps interface (this was done for inteldrm a few days
ago).  All drivers now ignore the mmio_offset argument that the init
ioctl takes.

This clears up the code and makes sure that drm_ioremap_core() doesn't
need the vga_pci_map inteface anymore, so we don't have to pass in the
vga softc anymore. We also get to kill the drm_resource_{start,length}
linux-alike functions since we just calculate all the requisite offsets
at startup and cache those we need. This now means that technically the
only driver that needs the vga_pci_map api is inteldrm (due to sharing
with intagp issues), though this diff doesn't convert them over.
@
text
@d77 1
a77 1
	dev_priv->drmdev = drm_attach_mi(&sis_driver, pa, self);
@


1.12
log
@Move the drm drivers over from:

vga1 at pci0
inteldrm0 at vga1

to

vga1 at pci0
inteldrm0 at vga1
drm0 at inteldrm0

i.e. a similar scheme to audio(4) where the interface attaches on top of
the wildly different drivers. This helps to clean up the code a lot
(more is coming) and help me start to move drm to being essentially bus
independent, which will help in the future.
@
text
@d77 1
a77 1
	dev_priv->drmdev = drm_attach_mi(&sis_driver, pa, parent, self);
@


1.11
log
@Remove the driver->load callback and just do all the initialization in
the attach function. First step towards splitting drm off as it's own
(bus independant) device, as it should be.
@
text
@d68 1
a68 1
	return drm_probe((struct pci_attach_args *)aux, sis_pciidlist);
d74 2
a75 3
	struct pci_attach_args *pa = aux;
	struct drm_device *dev = (struct drm_device *)self;
	drm_sis_private_t *dev_priv = dev->dev_private;
d77 1
a77 5
	dev_priv = drm_calloc(1, sizeof(*dev_priv), DRM_MEM_DRIVER);
	dev->dev_private = dev_priv;

	dev->driver = &sis_driver;
	return drm_attach(parent, self, pa);
d83 1
a83 2
	struct drm_device *dev = (struct drm_device *)self;
	drm_sis_private_t *dev_priv = dev->dev_private;
d85 4
a88 2
	drm_free(dev_priv, sizeof(*dev_priv), DRM_MEM_DRIVER);
	dev->dev_private = NULL;
d90 1
a90 1
	return (drm_detach(self, flags));
d94 2
a95 2
	sizeof(struct drm_device), sisdrm_probe, sisdrm_attach,
	sisdrm_detach, drm_activate
@


1.10
log
@Remove the strings from the pcidevs arrays. they are no longer needed and are
just wasting space.
@
text
@d35 1
d44 1
a45 3
#if 0 /* do these actually EXIST? */
	{PCI_VENDOR_XGI, 0x0042, SIS_CHIP_315},
#endif
d76 4
d82 13
a94 1
	return drm_attach(parent, self, pa, sis_pciidlist);
d99 1
a99 1
	drm_detach, drm_activate
@


1.9
log
@switch all of the drm drivers over to using the defines from pcidevs.

Furthermore, move the list of pcidevs from drm_pciids.h (in macros!), to
the array in the driver file. The strings are left in the array for now, but
will go in the next commit
@
text
@d38 10
a47 8
	{PCI_VENDOR_SIS, PCI_PRODUCT_SIS_300, 0, "SiS 300/305"},
	{PCI_VENDOR_SIS, PCI_PRODUCT_SIS_5300, 0, "SiS 540"},
	{PCI_VENDOR_SIS, PCI_PRODUCT_SIS_6300, 0, "SiS 630"},
	{PCI_VENDOR_SIS, PCI_PRODUCT_SIS_6330, SIS_CHIP_315, "SiS 661"},
	{PCI_VENDOR_SIS, PCI_PRODUCT_SIS_7300, 0, "SiS 730"},
	{PCI_VENDOR_XGI, 0x0042, SIS_CHIP_315, "Volari Unknown"},
	{PCI_VENDOR_XGI, PCI_PRODUCT_XGI_VOLARI_V3XT, SIS_CHIP_315, "Volari V3XT/V5/V8"},
	{0, 0, 0, NULL}
@


1.8
log
@Instead of using a width-1 bitfield for storing the driver capabilities
in the callback structure, just use a bunch of ORed together bits. This
has been annoying me for ages.
@
text
@a31 1
#include "drm_pciids.h"
a36 1
/* drv_PCI_IDs comes from drm_pciids.h, generated from drm_pciids.txt. */
d38 8
a45 1
	sis_PCI_IDS
@


1.7
log
@rework how we handle ioctls.

Before it was based on a static array with flags. Instead, let the
driver provide an ioctl callback, which deals with things appropriately.
Makes the code a bit easier to read, and also drops just over 5k on an
amd64 kernel build with all drm drivers enabled.

Tested by a few.
@
text
@d56 1
a56 2
	.use_agp		= 1,
	.use_mtrr		= 1,
@


1.6
log
@Kill a bunch of #ifdef freebsd/netbsd code in *_drv.c. No binary change.
@
text
@d34 4
a42 11
drm_ioctl_desc_t sis_ioctls[] = {
	DRM_IOCTL_DEF(DRM_SIS_FB_ALLOC, sis_fb_alloc, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_SIS_FB_FREE, sis_fb_free, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_SIS_AGP_INIT, sis_ioctl_agp_init, DRM_AUTH|DRM_MASTER|DRM_ROOT_ONLY),
	DRM_IOCTL_DEF(DRM_SIS_AGP_ALLOC, sis_ioctl_agp_alloc, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_SIS_AGP_FREE, sis_ioctl_agp_free, DRM_AUTH),
	DRM_IOCTL_DEF(DRM_SIS_FB_INIT, sis_fb_init, DRM_AUTH|DRM_MASTER|DRM_ROOT_ONLY)
};

int sis_max_ioctl = DRM_ARRAY_SIZE(sis_ioctls);

d45 1
a48 3
	.ioctls			= sis_ioctls,
	.max_ioctl		= DRM_ARRAY_SIZE(sis_ioctls),

a59 3
int	sisdrm_probe(struct device *, void *, void *);
void	sisdrm_attach(struct device *, struct device *, void *);

d84 28
@


1.5
log
@Move dev->driver over to being a pointer to a const struct, instead of stupidly
filling in a pre-allocated one on each attach.

Makes the code a bunch nicer, shrinks a kernel by about 1.5k on amd64,
helps with my sanity, and paves way for later changes.

Tested by a few for a couple of weeks now.
@
text
@a68 42
#ifdef __FreeBSD__
static int
sis_probe(device_t dev)
{
	return drm_probe(dev, sis_pciidlist);
}

static int
sis_attach(device_t nbdev)
{
	struct drm_device *dev = device_get_softc(nbdev);

	bzero(dev, sizeof(struct drm_device));
	sis_configure(dev);
	return drm_attach(nbdev, sis_pciidlist);
}

static device_method_t sis_methods[] = {
	/* Device interface */
	DEVMETHOD(device_probe,		sis_probe),
	DEVMETHOD(device_attach,	sis_attach),
	DEVMETHOD(device_detach,	drm_detach),

	{ 0, 0 }
};

static driver_t sis_driver = {
	"drm",
	sis_methods,
	sizeof(struct drm_device)
};

extern devclass_t drm_devclass;
#if __FreeBSD_version >= 700010
DRIVER_MODULE(sisdrm, vgapci, sis_driver, drm_devclass, 0, 0);
#else
DRIVER_MODULE(sisdrm, pci, sis_driver, drm_devclass, 0, 0);
#endif
MODULE_DEPEND(sisdrm, drm, 1, 1, 1);

#elif defined(__NetBSD__) || defined(__OpenBSD__)

a72 1
#if defined(__OpenBSD__)
a73 3
#else
sisdrm_probe(struct device *parent, struct cfdata *match, void *aux)
#endif
a87 1
#if defined(__OpenBSD__)
a95 10
#else
#ifdef _LKM
CFDRIVER_DECL(sisdrm, DV_TTY, NULL);
#else
CFATTACH_DECL(sisdrm, sizeof(struct drm_device), sisdrm_probe, sisdrm_attach, 
	drm_detach, drm_activate);
#endif
#endif

#endif
@


1.4
log
@Kill the silly ``drm_device_t'' and ``drm_file_t'' typedefs. just use
``struct drm_device'' and ``struct drm_file'' respectively. Since i'm
changing a lot of prototypes anyway, remove all parameter names from
prototypes, in accordance with style(9) (and sanity).
@
text
@a33 2
void	sis_configure(struct drm_device *);

d39 25
a63 16
void
sis_configure(struct drm_device *dev)
{
	dev->driver.buf_priv_size	= 1; /* No dev_priv */
	dev->driver.context_ctor	= sis_init_context;
	dev->driver.context_dtor	= sis_final_context;

	dev->driver.ioctls		= sis_ioctls;
	dev->driver.max_ioctl		= sis_max_ioctl;

	dev->driver.name		= DRIVER_NAME;
	dev->driver.desc		= DRIVER_DESC;
	dev->driver.date		= DRIVER_DATE;
	dev->driver.major		= DRIVER_MAJOR;
	dev->driver.minor		= DRIVER_MINOR;
	dev->driver.patchlevel		= DRIVER_PATCHLEVEL;
d65 3
a67 3
	dev->driver.use_agp		= 1;
	dev->driver.use_mtrr		= 1;
}
d130 1
a130 1
	sis_configure(dev);
@


1.3
log
@currently agp_i810 needs to map the same BAR as inteldrm, this obviously
fails.

In order to allow this, implement an API so that drm and agp can share
mappings for the BARs. Now it works as it should.

tested by many.
ok kettenis, miod said he'd look at it when it's in tree.
@
text
@d34 1
a34 1
void	sis_configure(drm_device_t *);
d42 1
a42 1
sis_configure(drm_device_t *dev)
d72 1
a72 1
	drm_device_t *dev = device_get_softc(nbdev);
d74 1
a74 1
	bzero(dev, sizeof(drm_device_t));
d91 1
a91 1
	sizeof(drm_device_t)
d121 1
a121 1
	drm_device_t *dev = (drm_device_t *)self;
d129 1
a129 1
	sizeof(drm_device_t), sisdrm_probe, sisdrm_attach,
d140 1
a140 1
CFATTACH_DECL(sisdrm, sizeof(drm_device_t), sisdrm_probe, sisdrm_attach, 
@


1.2
log
@destatic the static functions, they only make debugging harder.
While i'm here:
remove a couple of debug printfs that shouldn't have gone in anyway.
trowel on some KNF (I really need to get around to sending some of this upstream).
remove some netbsd specific code that netbsd doesn't have anymore.

ok tedu.
@
text
@d124 1
a124 1
	return drm_attach(self, pa, sis_pciidlist);
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d34 2
d41 2
a42 1
static void sis_configure(drm_device_t *dev)
d104 4
a107 1
static int
d117 1
a117 1
static void
@

