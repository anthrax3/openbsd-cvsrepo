head	1.17;
access;
symbols
	OPENBSD_5_4:1.16.0.10
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.8
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.6
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.4
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.4
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.17
date	2013.08.13.23.45.05;	author jsg;	state dead;
branches;
next	1.16;

1.16
date	2011.06.02.18.22.00;	author weerd;	state Exp;
branches;
next	1.15;

1.15
date	2009.11.23.18.52.16;	author oga;	state Exp;
branches;
next	1.14;

1.14
date	2009.05.11.00.06.39;	author oga;	state Exp;
branches;
next	1.13;

1.13
date	2009.04.19.20.59.10;	author oga;	state Exp;
branches;
next	1.12;

1.12
date	2009.02.15.20.38.17;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2009.02.15.20.18.59;	author oga;	state Exp;
branches;
next	1.10;

1.10
date	2009.02.15.20.14.38;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2009.02.15.20.03.19;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2009.02.15.20.00.11;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.24.23.00.33;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.23.22.56.02;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.22.14.42.36;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.10.02.11.32;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.26.19.33.19;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.11.09.33.01;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.17
log
@ati_pcigart.c is no longer needed
ok kettenis@@
@
text
@/* $OpenBSD: ati_pcigart.c,v 1.16 2011/06/02 18:22:00 weerd Exp $ */
/*-
 * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *   Gareth Hughes <gareth@@valinux.com>
 *
 */

/** @@file ati_pcigart.c
 * Implementation of ATI's PCIGART, which provides an aperture in card virtual
 * address space with addresses remapped to system memory.
 */

#include "drmP.h"

#define	ATI_PCIGART_PAGE_SIZE		4096	/* PCI GART page size */
#define	ATI_PCIGART_PAGE_MASK		(~(ATI_PCIGART_PAGE_SIZE-1))

#define	ATI_PCIE_WRITE			0x4
#define	ATI_PCIE_READ			0x8

void	pcigart_add_entry(struct drm_ati_pcigart_info *, bus_size_t,
	    bus_addr_t);

void
pcigart_add_entry(struct drm_ati_pcigart_info *gart_info, bus_size_t offset,
    bus_addr_t entry_addr)
{
	u_int32_t	page_base = (u_int32_t)entry_addr &
	    		    ATI_PCIGART_PAGE_MASK;

	switch(gart_info->gart_reg_if) {
	case DRM_ATI_GART_IGP:
		page_base |= (upper_32_bits(entry_addr) & 0xff) << 4;
		page_base |= 0xc;
		break;
	case DRM_ATI_GART_PCIE:
		page_base >>= 8;
		page_base |= (upper_32_bits(entry_addr) & 0xff) << 24;
		page_base |= ATI_PCIE_READ | ATI_PCIE_WRITE;
		break;
	default:
	case DRM_ATI_GART_PCI:
		break;
	}
	if (gart_info->gart_table_location == DRM_ATI_GART_MAIN)
		gart_info->tbl.dma.addr[offset] = htole32(page_base);
	else
		bus_space_write_4(gart_info->tbl.fb.bst, gart_info->tbl.fb.bsh,
		    offset * sizeof(u_int32_t), page_base);
}

int
drm_ati_pcigart_cleanup(struct drm_device *dev,
    struct drm_ati_pcigart_info *gart_info)
{
	/* we need to support large memory configurations */
	if (dev->sg == NULL) {
		DRM_ERROR("no scatter/gather memory!\n");
		return (EINVAL);
	}

	if (gart_info->bus_addr) {
		gart_info->bus_addr = 0;
		if (gart_info->gart_table_location == DRM_ATI_GART_MAIN &&
		    gart_info->tbl.dma.mem != NULL) {
			drm_dmamem_free(dev->dmat, gart_info->tbl.dma.mem);
			gart_info->tbl.dma.mem = NULL;
		}
	}

	return (0);
}

int
drm_ati_pcigart_init(struct drm_device *dev,
    struct drm_ati_pcigart_info *gart_info)
{

	bus_addr_t	 entry_addr;
	bus_size_t	 gart_idx;
	u_long		 pages, max_ati_pages, max_real_pages;
	int		 i, j, ret;

	/* we need to support large memory configurations */
	if (dev->sg == NULL) {
		DRM_ERROR("no scatter/gather memory!\n");
		ret = EINVAL;
		goto error;
	}

	if (gart_info->gart_table_location == DRM_ATI_GART_MAIN) {
		int flags = 0;

		DRM_DEBUG("PCI: no table in VRAM: using normal RAM\n");

		if (gart_info->gart_reg_if == DRM_ATI_GART_IGP)
			flags |= BUS_DMA_NOCACHE;

		gart_info->tbl.dma.mem = drm_dmamem_alloc(dev->dmat,
		    gart_info->table_size, PAGE_SIZE, 1,
		    gart_info->table_size, flags, 0);
		if (gart_info->tbl.dma.mem == NULL) {
			DRM_ERROR("cannot allocate PCI GART page!\n");
			ret = ENOMEM;
			goto error;
		}

		gart_info->tbl.dma.addr =
		    (u_int32_t *)gart_info->tbl.dma.mem->kva;
		gart_info->bus_addr =
		    gart_info->tbl.dma.mem->map->dm_segs[0].ds_addr;
	} else {
		bus_space_set_region_1(gart_info->tbl.fb.bst,
		    gart_info->tbl.fb.bsh, 0, 0, gart_info->table_size);
	}

	max_ati_pages = (gart_info->table_size / sizeof(u_int32_t));
	max_real_pages = max_ati_pages / (PAGE_SIZE / ATI_PCIGART_PAGE_SIZE);
	pages = (dev->sg->mem->map->dm_nsegs <= max_real_pages) ?
	    dev->sg->mem->map->dm_nsegs : max_real_pages;

	KASSERT(PAGE_SIZE >= ATI_PCIGART_PAGE_SIZE);

	for (gart_idx = 0, i = 0; i < pages; i++) {
		entry_addr = dev->sg->mem->map->dm_segs[i].ds_addr;
		for (j = 0; j < (PAGE_SIZE / ATI_PCIGART_PAGE_SIZE);
		    j++, entry_addr += ATI_PCIGART_PAGE_SIZE)
			pcigart_add_entry(gart_info, gart_idx++, entry_addr);
	}

	DRM_MEMORYBARRIER();

	return (0);

error:
	gart_info->bus_addr = 0;
	return (ret);
}
@


1.16
log
@Add $OpenBSD$ after oga said 'go ahead and fix that'

'go for it' oga@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.15
log
@remove a debug printf that won't compile anymore.
@
text
@d1 1
@


1.14
log
@Rework the pcigart stuff somewhat.

firstly: move the pcigart initialisation in radeon_cp.c into its own
function to avoid the horrible nesting and make it more readable.

secondly: make the pcigart code more intelligent depending on whether
the gart table is in pci memory, or system memory. In the former case we
use the bus_space functions and thus don't need BUS_SPACE_LINEAR, while
i'm here, stop using the drm wrapper functions for mapping (which
require a drm_local_map structure, which will die eventually) and just
use bus_space_map itself.

tested on pcie (in framebuffer memory) here on my x800. tested on an
i386 agp card forced to pci mode by sthen.  Doesn't make IGP chips
worse, doesn't make them better either (tested on a rs690).

basic idea from a commit "upstream" a while ago. All the code from yours
truly.
@
text
@a133 2
		DRM_DEBUG("PCI: Gart Table: VRAM %08X mapped at %08lX\n",
			  (unsigned int)bus_address, (unsigned long)address);
@


1.13
log
@calculate size correctly if PAGE_SIZE != ATI_PCIGART_PAGE_SIZE.

from upstream a while back.
@
text
@d36 2
a37 2
#define ATI_PCIGART_PAGE_SIZE		4096	/* PCI GART page size */
#define ATI_PCIGART_PAGE_MASK		(~(ATI_PCIGART_PAGE_SIZE-1))
d39 2
a40 2
#define ATI_PCIE_WRITE 0x4
#define ATI_PCIE_READ 0x8
d42 1
a42 1
void	pcigart_add_entry(struct drm_ati_pcigart_info *, u_int32_t *,
d46 1
a46 1
pcigart_add_entry(struct drm_ati_pcigart_info *gart_info, u_int32_t *pci_gart,
d66 5
a70 1
	*pci_gart = htole32(page_base);
a84 1
		gart_info->addr = 0;
d86 3
a88 3
		    gart_info->mem != NULL) {
			drm_dmamem_free(dev->dmat, gart_info->mem);
			gart_info->mem = NULL;
a99 1
	u_int32_t	*pci_gart;
d101 1
d120 1
a120 1
		gart_info->mem = drm_dmamem_alloc(dev->dmat,
d123 1
a123 1
		if (gart_info->mem == NULL) {
d129 4
a132 2
		gart_info->addr = gart_info->mem->kva;
		gart_info->bus_addr = gart_info->mem->map->dm_segs[0].ds_addr;
d136 2
a139 2
	pci_gart = (u_int32_t *)gart_info->addr;

a144 2
	memset(pci_gart, 0, max_ati_pages * sizeof(u_int32_t));

d147 1
a147 1
	for (i = 0; i < pages; i++) {
d151 1
a151 1
			pcigart_add_entry(gart_info, pci_gart++, entry_addr);
a158 1
	gart_info->addr = NULL;
@


1.12
log
@on IGPGART chipsets, map the pcigart table uncached. This fixes some bugs for
freebsd and linux, and i'm assured by an amd employee that it is needed.


With this diff the RS690 at phesslers@@'s work work the first time you boot it,
you can even restart X to your heart's content. However, after a reboot it goes
back to not working. I've not managed to rule out buggered hardware yet, so
anyone with a RS690 chipset would make my very grateful by checking if the same
thing happens there.

RS480 also needs this, but seems to still be broken.
@
text
@d99 1
a99 1
	u_long		 pages, max_pages;
d133 1
a133 1
	pci_gart = (u_int32_t *) gart_info->addr;
d135 4
a138 3
	max_pages = (gart_info->table_size / sizeof(u_int32_t));
	pages = (dev->sg->mem->map->dm_nsegs <= max_pages) ?
	    dev->sg->mem->map->dm_nsegs : max_pages;
d140 1
a140 1
	memset(pci_gart, 0, max_pages * sizeof(u32));
d155 1
a155 1
    error:
@


1.11
log
@Make the pcigart functions return 0 on success and an errno on failure,
instead of 1 on success and zero on failure. I hated that twisty logic.
@
text
@d110 2
d114 3
d119 1
a119 1
		    gart_info->table_size, 0, 0);
@


1.10
log
@Split out the switch statement that writes the pcigart table entry into
a separate function. Makes this code a lot easier to read.
@
text
@d76 1
a76 1
		return 0;
d89 1
a89 1
	return 1;
d100 1
a100 1
	int		 i, j, ret = 0;
d105 1
d117 1
d147 1
a147 1
	return (1);
@


1.9
log
@convert drm_scatter code over to using the new dmamem api.

removes the custom code in there, so shrinks the kernel by a few bytes.
Convert other code to deal with data structure changes.
@
text
@d42 27
d97 1
a97 1
	u_int32_t	*pci_gart, page_base;
d138 3
a140 21
		for (j = 0; j < (PAGE_SIZE / ATI_PCIGART_PAGE_SIZE); j++) {
			page_base = (u_int32_t)entry_addr &
			    ATI_PCIGART_PAGE_MASK;
			switch(gart_info->gart_reg_if) {
			case DRM_ATI_GART_IGP:
				page_base |= (upper_32_bits(entry_addr) & 0xff) << 4;
				page_base |= 0xc;
				break;
			case DRM_ATI_GART_PCIE:
				page_base >>= 8;
				page_base |= (upper_32_bits(entry_addr) & 0xff) << 24;
				page_base |= ATI_PCIE_READ | ATI_PCIE_WRITE;
				break;
			default:
			case DRM_ATI_GART_PCI:
				break;
			}
			*pci_gart = htole32(page_base);
			pci_gart++;
			entry_addr += ATI_PCIGART_PAGE_SIZE;
		}
@


1.8
log
@convert the pcigart case where the gart table is in system memory over
to use the new api.

More cleanup to this file coming soon.
@
text
@d102 2
a103 1
	pages = (dev->sg->pages <= max_pages) ? dev->sg->pages : max_pages;
d110 1
a110 1
		entry_addr = dev->sg->busaddr[i];
@


1.7
log
@Work around the stupidity of radeondrm by double checking that things are
running before we play with things.

Lots more cleanup needed, but now you can shut X without it crashing.
@
text
@a41 25
int	drm_ati_alloc_pcigart_table(struct drm_device *,
	    struct drm_ati_pcigart_info *);
void	drm_ati_free_pcigart_table(struct drm_device *,
	    struct drm_ati_pcigart_info *);

int
drm_ati_alloc_pcigart_table(struct drm_device *dev,
    struct drm_ati_pcigart_info *gart_info)
{
	dev->sg->dmah = drm_pci_alloc(dev->dmat, gart_info->table_size,
	    PAGE_SIZE, gart_info->table_mask);
	if (dev->sg->dmah == NULL)
		return ENOMEM;

	return 0;
}

void
drm_ati_free_pcigart_table(struct drm_device *dev,
    struct drm_ati_pcigart_info *gart_info)
{
	drm_pci_free(dev->dmat, dev->sg->dmah);
	dev->sg->dmah = NULL;
}

d54 1
d56 4
a59 2
		    dev->sg->dmah != NULL)
			drm_ati_free_pcigart_table(dev, gart_info);
d70 4
a73 7
	void *address = NULL;
	unsigned long pages;
	u32 *pci_gart, page_base;
	dma_addr_t bus_address = 0;
	int i, j, ret = 0;
	int max_pages;
	dma_addr_t entry_addr;
d78 1
a78 1
		goto done;
d84 4
a87 2
		ret = drm_ati_alloc_pcigart_table(dev, gart_info);
		if (ret) {
d89 1
a89 1
			goto done;
d92 2
a93 2
		address = (void *)dev->sg->dmah->vaddr;
		bus_address = dev->sg->dmah->busaddr;
a94 2
		address = gart_info->addr;
		bus_address = gart_info->bus_addr;
d99 1
a99 1
	pci_gart = (u32 *) address;
d101 2
a102 3
	max_pages = (gart_info->table_size / sizeof(u32));
	pages = (dev->sg->pages <= max_pages)
	    ? dev->sg->pages : max_pages;
a105 3
#ifdef __FreeBSD__
	KASSERT(PAGE_SIZE >= ATI_PCIGART_PAGE_SIZE, ("page size too small"));
#else
a106 1
#endif
d111 2
a112 1
			page_base = (u32) entry_addr & ATI_PCIGART_PAGE_MASK;
d127 1
a127 1
			*pci_gart = cpu_to_le32(page_base);
d135 1
a135 1
	ret = 1;
d137 4
a140 4
    done:
	gart_info->addr = address;
	gart_info->bus_addr = bus_address;
	return ret;
@


1.6
log
@pass in the dmat when we attach the drm driver. reduces pci dependancy.
@
text
@d78 4
a81 5
		if (gart_info->gart_table_location == DRM_ATI_GART_MAIN) {
			gart_info->bus_addr = 0;
			if (dev->sg->dmah)
				drm_ati_free_pcigart_table(dev, gart_info);
		}
@


1.5
log
@reduce the dependancy of drm_pci_alloc upon the drm device softc. Just
pass in the dma tag
@
text
@d51 1
a51 1
	dev->sg->dmah = drm_pci_alloc(dev->pa.pa_dmat, gart_info->table_size,
d63 1
a63 1
	drm_pci_free(dev->pa.pa_dmat, dev->sg->dmah);
@


1.4
log
@40-bit GART support for PCIE devices. From drm git a while ago.

Tested by a few, no regressions for normal use.
@
text
@d51 2
a52 2
	dev->sg->dmah = drm_pci_alloc(dev, gart_info->table_size, PAGE_SIZE,
	    gart_info->table_mask);
d63 1
a63 1
	drm_pci_free(dev, dev->sg->dmah);
@


1.3
log
@Kill the silly ``drm_device_t'' and ``drm_file_t'' typedefs. just use
``struct drm_device'' and ``struct drm_file'' respectively. Since i'm
changing a lot of prototypes anyway, remove all parameter names from
prototypes, in accordance with style(9) (and sanity).
@
text
@d37 1
d39 51
a89 1
int drm_ati_pcigart_init(struct drm_device *dev,
d92 2
d95 5
a99 2
	u32 *pci_gart = NULL, page_base;
	int i, j;
d101 1
d103 2
a104 2
		DRM_ERROR( "no scatter/gather memory!\n" );
		return 0;
d108 6
a113 6
		/* GART table in system memory */
		dev->sg->dmah = drm_pci_alloc(dev, gart_info->table_size, 0,
		    0xfffffffful);
		if (dev->sg->dmah == NULL) {
			DRM_ERROR("cannot allocate PCI GART table!\n");
			return 0;
d115 3
a117 4
	
		gart_info->addr = (void *)dev->sg->dmah->vaddr;
		gart_info->bus_addr = dev->sg->dmah->busaddr;
		pci_gart = (u32 *)dev->sg->dmah->vaddr;
d119 4
a122 2
		/* GART table in framebuffer memory */
		pci_gart = gart_info->addr;
a123 2
	
	pages = DRM_MIN(dev->sg->pages, gart_info->table_size / sizeof(u32));
d125 7
a131 1
	bzero(pci_gart, gart_info->table_size);
d133 1
a133 1
#if defined(__FreeBSD__)
d139 2
a140 3
	for ( i = 0 ; i < pages ; i++ ) {
		page_base = (u32) dev->sg->busaddr[i];

d142 1
d145 2
a146 1
				*pci_gart = cpu_to_le32(page_base | 0xc);
d149 3
a151 1
				*pci_gart = cpu_to_le32((page_base >> 8) | 0xc);
d154 1
a154 1
				*pci_gart = cpu_to_le32(page_base);
d157 1
d159 1
a159 1
			page_base += ATI_PCIGART_PAGE_SIZE;
d165 1
a165 10
	return 1;
}

int drm_ati_pcigart_cleanup(struct drm_device *dev,
    struct drm_ati_pcigart_info *gart_info)
{
	if (dev->sg == NULL) {
		DRM_ERROR( "no scatter/gather memory!\n" );
		return 0;
	}
d167 4
a170 3
	drm_pci_free(dev, dev->sg->dmah);

	return 1;
@


1.2
log
@Update to DRM git as of a few days ago. This mostly affects the
card-specific files with a few minor changes elsewhere.

The main change to the OpenBSD specific stuff is the change to the irq
api due to the vblank rework.

4 more large bugs known, I have a fix for one.

Tested by many.  prompted by deraadt@@.
@
text
@d38 2
a39 1
int drm_ati_pcigart_init(drm_device_t *dev, struct drm_ati_pcigart_info *gart_info)
d102 2
a103 1
int drm_ati_pcigart_cleanup(drm_device_t *dev, struct drm_ati_pcigart_info *gart_info)
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d38 1
a38 1
int drm_ati_pcigart_init(drm_device_t *dev, drm_ati_pcigart_info *gart_info)
d72 1
a72 1
#elif defined(__NetBSD__) || defined(__OpenBSD__)
d101 1
a101 1
int drm_ati_pcigart_cleanup(drm_device_t *dev, drm_ati_pcigart_info *gart_info)
@

