head	1.12;
access;
symbols
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.8
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3;
locks; strict;
comment	@ * @;


1.12
date	2017.09.30.07.36.56;	author robert;	state Exp;
branches;
next	1.11;
commitid	XkWOvf4INOmfke72;

1.11
date	2017.07.03.13.26.04;	author naddy;	state Exp;
branches;
next	1.10;
commitid	VU7bkKdpynV5EHxy;

1.10
date	2017.07.01.16.14.10;	author kettenis;	state Exp;
branches;
next	1.9;
commitid	KnwRPOZok9A30HI4;

1.9
date	2016.09.24.17.03.37;	author kettenis;	state Exp;
branches;
next	1.8;
commitid	av1R54ppH63Uvla0;

1.8
date	2016.04.16.17.39.44;	author kettenis;	state Exp;
branches;
next	1.7;
commitid	hAjDFJTQK9P8j923;

1.7
date	2015.09.26.22.00.00;	author kettenis;	state Exp;
branches;
next	1.6;
commitid	Mvg1eWGKMP5bOyT1;

1.6
date	2015.09.23.23.12.12;	author kettenis;	state Exp;
branches;
next	1.5;
commitid	lQlppvmETCN49oZe;

1.5
date	2015.04.03.13.10.59;	author jsg;	state Exp;
branches;
next	1.4;
commitid	PZIJ62HYZVx8fbpI;

1.4
date	2015.02.12.04.56.03;	author kettenis;	state Exp;
branches;
next	1.3;
commitid	adfbJ0ccUTdhFGhI;

1.3
date	2013.03.31.11.43.23;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2013.03.30.12.36.50;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2013.03.18.12.36.52;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Add preliminary kabylake support to inteldrm(4) by backporting the relevant
commits from linux-4.8.x.
The changes are quiet minimal due to the fact that kabylake and skylake share
most of the code because they are both gen9 graphics.
This was tested by many and was also in snapshots for a while.

ok kettenis@@
@
text
@/*	$OpenBSD: intel_i2c.c,v 1.11 2017/07/03 13:26:04 naddy Exp $	*/
/*
 * Copyright (c) 2012, 2013 Mark Kettenis <kettenis@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
/*
 * Copyright (c) 2006 Dave Airlie <airlied@@linux.ie>
 * Copyright Â© 2006-2008,2010 Intel Corporation
 *   Jesse Barnes <jesse.barnes@@intel.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *	Eric Anholt <eric@@anholt.net>
 *	Chris Wilson <chris@@chris-wilson.co.uk>
 */

#include <dev/pci/drm/drmP.h>
#include <dev/pci/drm/drm.h>
#include "intel_drv.h"
#include "i915_drv.h"
#include "i915_reg.h"

#include <dev/i2c/i2cvar.h>
#include <dev/i2c/i2c_bitbang.h>

int	intel_gmbus_acquire_bus(void *, int);
void	intel_gmbus_release_bus(void *, int);
int	intel_gmbus_exec(void *, i2c_op_t, i2c_addr_t, const void *, size_t,
	    void *buf, size_t, int);

void	intel_gpio_bb_set_bits(void *, uint32_t);
void	intel_gpio_bb_set_dir(void *, uint32_t);
uint32_t intel_gpio_bb_read_bits(void *);

int	intel_gpio_send_start(void *, int);
int	intel_gpio_send_stop(void *, int);
int	intel_gpio_initiate_xfer(void *, i2c_addr_t, int);
int	intel_gpio_read_byte(void *, u_int8_t *, int);
int	intel_gpio_write_byte(void *, u_int8_t, int);

enum disp_clk {
	CDCLK,
	CZCLK
};

struct gmbus_pin {
	const char *name;
	int reg;
};

/* Map gmbus pin pairs to names and registers. */
static const struct gmbus_pin gmbus_pins[] = {
	[GMBUS_PIN_SSC] = { "ssc", GPIOB },
	[GMBUS_PIN_VGADDC] = { "vga", GPIOA },
	[GMBUS_PIN_PANEL] = { "panel", GPIOC },
	[GMBUS_PIN_DPC] = { "dpc", GPIOD },
	[GMBUS_PIN_DPB] = { "dpb", GPIOE },
	[GMBUS_PIN_DPD] = { "dpd", GPIOF },
};

static const struct gmbus_pin gmbus_pins_bdw[] = {
	[GMBUS_PIN_VGADDC] = { "vga", GPIOA },
	[GMBUS_PIN_DPC] = { "dpc", GPIOD },
	[GMBUS_PIN_DPB] = { "dpb", GPIOE },
	[GMBUS_PIN_DPD] = { "dpd", GPIOF },
};

static const struct gmbus_pin gmbus_pins_skl[] = {
	[GMBUS_PIN_DPC] = { "dpc", GPIOD },
	[GMBUS_PIN_DPB] = { "dpb", GPIOE },
	[GMBUS_PIN_DPD] = { "dpd", GPIOF },
};

static const struct gmbus_pin gmbus_pins_bxt[] = {
	[GMBUS_PIN_1_BXT] = { "dpb", PCH_GPIOB },
	[GMBUS_PIN_2_BXT] = { "dpc", PCH_GPIOC },
	[GMBUS_PIN_3_BXT] = { "misc", PCH_GPIOD },
};

/* pin is expected to be valid */
static const struct gmbus_pin *get_gmbus_pin(struct drm_i915_private *dev_priv,
					     unsigned int pin)
{
	if (IS_BROXTON(dev_priv))
		return &gmbus_pins_bxt[pin];
	else if (IS_SKYLAKE(dev_priv) || IS_KABYLAKE(dev_priv))
		return &gmbus_pins_skl[pin];
	else if (IS_BROADWELL(dev_priv))
		return &gmbus_pins_bdw[pin];
	else
		return &gmbus_pins[pin];
}

bool intel_gmbus_is_valid_pin(struct drm_i915_private *dev_priv,
			      unsigned int pin)
{
	unsigned int size;

	if (IS_BROXTON(dev_priv))
		size = ARRAY_SIZE(gmbus_pins_bxt);
	else if (IS_SKYLAKE(dev_priv) || IS_KABYLAKE(dev_priv))
		size = ARRAY_SIZE(gmbus_pins_skl);
	else if (IS_BROADWELL(dev_priv))
		size = ARRAY_SIZE(gmbus_pins_bdw);
	else
		size = ARRAY_SIZE(gmbus_pins);

	return pin < size && get_gmbus_pin(dev_priv, pin)->reg;
}

/* Intel GPIO access functions */

#define I2C_RISEFALL_TIME 10

static inline struct intel_gmbus *
to_intel_gmbus(struct i2c_adapter *i2c)
{
	return container_of(i2c, struct intel_gmbus, adapter);
}

void
intel_i2c_reset(struct drm_device *dev)
{
	struct drm_i915_private *dev_priv = dev->dev_private;

	I915_WRITE(GMBUS0, 0);
	I915_WRITE(GMBUS4, 0);
}

int
intel_gmbus_acquire_bus(void *cookie, int flags)
{
	struct intel_gmbus *bus = cookie;
	struct inteldrm_softc *dev_priv = bus->dev_priv;

	intel_display_power_get(dev_priv, POWER_DOMAIN_GMBUS);

	I915_WRITE(GMBUS0, bus->reg0);

	return (0);
}

void
intel_gmbus_release_bus(void *cookie, int flags)
{
	struct intel_gmbus *bus = cookie;
	struct inteldrm_softc *dev_priv = bus->dev_priv;

	I915_WRITE(GMBUS0, 0);

	intel_display_power_put(dev_priv, POWER_DOMAIN_GMBUS);
}

int
intel_gmbus_exec(void *cookie, i2c_op_t op, i2c_addr_t addr,
    const void *cmdbuf, size_t cmdlen, void *buf, size_t len, int flags)
{
	struct intel_gmbus *bus = cookie;
	struct inteldrm_softc *dev_priv = bus->dev_priv;
	uint32_t reg, st, val;
	uint8_t *b;
	int i, retries;
	uint16_t rem = len;
	int bus_err = 0;

	if (cmdlen > 1)
		return (EOPNOTSUPP);

	if (I2C_OP_WRITE_P(op)) {
		val = 0;	

		b = buf;
		for (i = 0; i < 4 && rem > 0; i++, rem--) {
			val |= *b++ << (8 * i);
		}

		I915_WRITE(GMBUS3, val);
	}

	reg = 0;
	if (len > 0)
		reg |= GMBUS_CYCLE_WAIT;
	if (I2C_OP_STOP_P(op))
		reg |= GMBUS_CYCLE_STOP;
	if (I2C_OP_READ_P(op))
		reg |= GMBUS_SLAVE_READ;
	else
		reg |= GMBUS_SLAVE_WRITE;
	if (cmdlen > 0) {
		reg |= GMBUS_CYCLE_INDEX;
		b = (void *)cmdbuf;
		reg |= (b[0] << GMBUS_SLAVE_INDEX_SHIFT);
	}
	reg |= (addr << GMBUS_SLAVE_ADDR_SHIFT);
	reg |= (len << GMBUS_BYTE_COUNT_SHIFT);
	I915_WRITE(GMBUS1, reg | GMBUS_SW_RDY);

	if (I2C_OP_READ_P(op)) {
		b = buf;
		while (len > 0) {
			for (retries = 50; retries > 0; retries--) {
				st = I915_READ(GMBUS2);
				if (st & (GMBUS_SATOER | GMBUS_HW_RDY))
					break;
				DELAY(1000);
			}
			if (st & GMBUS_SATOER) {
				bus_err = 1;
				goto out;
			}
			if ((st & GMBUS_HW_RDY) == 0)
				return (ETIMEDOUT);

			val = I915_READ(GMBUS3);
			for (i = 0; i < 4 && len > 0; i++, len--) {
				*b++ = val & 0xff;
				val >>= 8;
			}
		}
	}

	if (I2C_OP_WRITE_P(op)) {
		while (rem > 0) {
			for (retries = 50; retries > 0; retries--) {
				st = I915_READ(GMBUS2);
				if (st & (GMBUS_SATOER | GMBUS_HW_RDY))
					break;
				DELAY(1000);
			}
			if (st & GMBUS_SATOER) {
				bus_err = 1;
				goto out;
			}
			if ((st & GMBUS_HW_RDY) == 0)
				return (ETIMEDOUT);

			val = 0;
			for (i = 0; i < 4 && rem > 0; i++, rem--) {
				val |= *b++ << (8 * i);
			}
			I915_WRITE(GMBUS3, val);
		}
	}

out:
	if (I2C_OP_STOP_P(op)) {
		for (retries = 10; retries > 0; retries--) {
			st = I915_READ(GMBUS2);
			if (st & GMBUS_SATOER)
				bus_err = 1;
			if ((st & GMBUS_ACTIVE) == 0)
				break;
			DELAY(1000);
		}
		if (st & GMBUS_ACTIVE)
			return (ETIMEDOUT);
	} else {
		for (retries = 10; retries > 0; retries--) {
			st = I915_READ(GMBUS2);
			if (st & GMBUS_SATOER)
				bus_err = 1;
			if (st & GMBUS_HW_WAIT_PHASE)
				break;
			DELAY(1000);
		}
		if ((st & GMBUS_HW_WAIT_PHASE) == 0)
			return (ETIMEDOUT);
	}

	/* after the bus is idle clear the bus error */
	if (bus_err) {
		I915_WRITE(GMBUS1, GMBUS_SW_CLR_INT);
		I915_WRITE(GMBUS1, 0);
		I915_WRITE(GMBUS0, 0);
		return (ENXIO);
	}

	return (0);
}

struct i2c_bitbang_ops intel_gpio_bbops = {
	intel_gpio_bb_set_bits,
	intel_gpio_bb_set_dir,
	intel_gpio_bb_read_bits,
	{ GPIO_DATA_VAL_IN, GPIO_CLOCK_VAL_IN,
	  GPIO_DATA_DIR_OUT, GPIO_DATA_DIR_IN }
};

void
intel_gpio_bb_set_bits(void *cookie, uint32_t bits)
{
	struct intel_gmbus *bus = cookie;
	struct inteldrm_softc *dev_priv = bus->dev_priv;
	uint32_t reg;

	reg = I915_READ_NOTRACE(bus->gpio_reg);
	reg &= (GPIO_DATA_PULLUP_DISABLE | GPIO_CLOCK_PULLUP_DISABLE);
	if (bits & GPIO_DATA_VAL_IN)
		reg |= GPIO_DATA_VAL_OUT;
	if (bits & GPIO_CLOCK_VAL_IN)
		reg |= GPIO_CLOCK_VAL_OUT;
	reg |= (GPIO_DATA_VAL_MASK | GPIO_CLOCK_VAL_MASK);
	I915_WRITE_NOTRACE(bus->gpio_reg, reg);
}

void
intel_gpio_bb_set_dir(void *cookie, uint32_t bits)
{
	struct intel_gmbus *bus = cookie;
	struct inteldrm_softc *dev_priv = bus->dev_priv;
	uint32_t reg;

	reg = I915_READ_NOTRACE(bus->gpio_reg);
	reg &= (GPIO_DATA_PULLUP_DISABLE | GPIO_CLOCK_PULLUP_DISABLE);
	if (bits & GPIO_DATA_DIR_OUT)
		reg |= GPIO_DATA_DIR_OUT;
	reg |= (GPIO_DATA_DIR_MASK | GPIO_CLOCK_DIR_OUT | GPIO_CLOCK_DIR_MASK);
	I915_WRITE_NOTRACE(bus->gpio_reg, reg);
}

uint32_t
intel_gpio_bb_read_bits(void *cookie)
{
	struct intel_gmbus *bus = cookie;
	struct inteldrm_softc *dev_priv = bus->dev_priv;

	return I915_READ_NOTRACE(bus->gpio_reg);
}

int
intel_gpio_send_start(void *cookie, int flags)
{
	return (i2c_bitbang_send_start(cookie, flags, &intel_gpio_bbops));
}

int
intel_gpio_send_stop(void *cookie, int flags)
{
	return (i2c_bitbang_send_stop(cookie, flags, &intel_gpio_bbops));
}

int
intel_gpio_initiate_xfer(void *cookie, i2c_addr_t addr, int flags)
{
	return (i2c_bitbang_initiate_xfer(cookie, addr, flags, &intel_gpio_bbops));
}

int
intel_gpio_read_byte(void *cookie, u_int8_t *bytep, int flags)
{
	return (i2c_bitbang_read_byte(cookie, bytep, flags, &intel_gpio_bbops));
}

int
intel_gpio_write_byte(void *cookie, u_int8_t byte, int flags)
{
	return (i2c_bitbang_write_byte(cookie, byte, flags, &intel_gpio_bbops));
}

int
intel_setup_gmbus(struct drm_device *dev)
{
	struct drm_i915_private *dev_priv = dev->dev_private;
	struct intel_gmbus *bus;
	unsigned int pin;

	if (HAS_PCH_NOP(dev))
		return 0;
	else if (HAS_PCH_SPLIT(dev))
		dev_priv->gpio_mmio_base = PCH_GPIOA - GPIOA;
	else if (IS_VALLEYVIEW(dev))
		dev_priv->gpio_mmio_base = VLV_DISPLAY_BASE;
	else
		dev_priv->gpio_mmio_base = 0;

	for (pin = 0; pin < ARRAY_SIZE(dev_priv->gmbus); pin++) {
		if (!intel_gmbus_is_valid_pin(dev_priv, pin))
			continue;

		bus = &dev_priv->gmbus[pin];

		bus->dev_priv = dev_priv;

		/* By default use a conservative clock rate */
		bus->reg0 = pin | GMBUS_RATE_100KHZ;

		bus->adapter.ic.ic_cookie = bus;
		bus->adapter.ic.ic_acquire_bus = intel_gmbus_acquire_bus;
		bus->adapter.ic.ic_release_bus = intel_gmbus_release_bus;
		bus->adapter.ic.ic_exec = intel_gmbus_exec;

		bus->gpio_reg = dev_priv->gpio_mmio_base +
			get_gmbus_pin(dev_priv, pin)->reg;

		bus->adapter.ic.ic_send_start = intel_gpio_send_start;
		bus->adapter.ic.ic_send_stop = intel_gpio_send_stop;
		bus->adapter.ic.ic_initiate_xfer = intel_gpio_initiate_xfer;
		bus->adapter.ic.ic_read_byte = intel_gpio_read_byte;
		bus->adapter.ic.ic_write_byte = intel_gpio_write_byte;
	}

	intel_i2c_reset(dev_priv->dev);

	return (0);
}

struct i2c_adapter *intel_gmbus_get_adapter(struct drm_i915_private *dev_priv,
					    unsigned int pin)
{
	if (WARN_ON(!intel_gmbus_is_valid_pin(dev_priv, pin)))
		return NULL;

	return &dev_priv->gmbus[pin].adapter;
}

void
intel_teardown_gmbus(struct drm_device *dev)
{
}

void
intel_gmbus_force_bit(struct i2c_adapter *adapter, bool force_bit)
{
	struct intel_gmbus *bus = to_intel_gmbus(adapter);

	if (force_bit)
		bus->force_bit++;
	else
		bus->force_bit--;

	KASSERT(bus->force_bit >= 0);

	if (bus->force_bit)
		bus->adapter.ic.ic_exec = NULL;
	else
		bus->adapter.ic.ic_exec = intel_gmbus_exec;
}
@


1.11
log
@merge error, revealed by clang; ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_i2c.c,v 1.10 2017/07/01 16:14:10 kettenis Exp $	*/
d115 1
a115 1
	else if (IS_SKYLAKE(dev_priv))
d130 1
a130 1
	else if (IS_SKYLAKE(dev_priv))
@


1.10
log
@Update inteldrm(4) to code based on Linux 4.4.70.  This brings us support for
Skylake and Cherryview and better support for Broadwell and Valleyview.  Also
adds MST support.  Some tweaks to the TTM code and radeondrm(4) to keep it
working with the updated generic DRM code needed for inteldrm(4).

Tested by many.
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_i2c.c,v 1.8 2016/04/16 17:39:44 kettenis Exp $	*/
d460 1
a460 1
	KASSERT(force_bit >= 0);
@


1.9
log
@Assert that bus->force_bit >= 0 instead of force_bit.  Found by clang.
@
text
@d75 14
a88 1
int	gmbus_ports[] = { GPIOB, GPIOA, GPIOC, GPIOD, GPIOE, GPIOF };
d90 6
a95 5
static inline struct intel_gmbus *
to_intel_gmbus(struct i2c_controller *i2c)
{
	return container_of(i2c, struct intel_gmbus, controller);
}
d97 5
a101 5
static int get_disp_clk_div(struct drm_i915_private *dev_priv,
			    enum disp_clk clk)
{
	u32 reg_val;
	int clk_ratio;
d103 5
a107 1
	reg_val = I915_READ(CZCLK_CDCLK_FREQ_RATIO);
d109 10
a118 3
	if (clk == CDCLK)
		clk_ratio =
			((reg_val & CDCLK_FREQ_MASK) >> CDCLK_FREQ_SHIFT) + 1;
d120 1
a120 3
		clk_ratio = (reg_val & CZCLK_FREQ_MASK) + 1;

	return clk_ratio;
d123 2
a124 1
static void gmbus_set_freq(struct drm_i915_private *dev_priv)
d126 1
a126 1
	int vco, gmbus_freq = 0, cdclk_div;
d128 8
a135 1
	BUG_ON(!IS_VALLEYVIEW(dev_priv->dev));
d137 2
a138 1
	vco = valleyview_get_vco(dev_priv);
d140 1
a140 2
	/* Get the CDCLK divide ratio */
	cdclk_div = get_disp_clk_div(dev_priv, CDCLK);
d142 1
a142 7
	/*
	 * Program the gmbus_freq based on the cdclk frequency.
	 * BSpec erroneously claims we should aim for 4MHz, but
	 * in fact 1MHz is the correct frequency.
	 */
	if (cdclk_div)
		gmbus_freq = (vco << 1) / cdclk_div;
d144 4
a147 4
	if (WARN_ON(gmbus_freq == 0))
		return;

	I915_WRITE(GMBUSFREQ_VLV, gmbus_freq);
d155 2
a156 9
	/*
	 * In BIOS-less system, program the correct gmbus frequency
	 * before reading edid.
	 */
	if (IS_VALLEYVIEW(dev))
		gmbus_set_freq(dev_priv);

	I915_WRITE(dev_priv->gpio_mmio_base + GMBUS0, 0);
	I915_WRITE(dev_priv->gpio_mmio_base + GMBUS4, 0);
d165 1
a165 1
	intel_aux_display_runtime_get(dev_priv);
d167 1
a167 1
	I915_WRITE(dev_priv->gpio_mmio_base + GMBUS0, bus->reg0);
d178 1
a178 1
	I915_WRITE(dev_priv->gpio_mmio_base + GMBUS0, 0);
d180 1
a180 1
	intel_aux_display_runtime_put(dev_priv);
a189 1
	int reg_offset = dev_priv->gpio_mmio_base;
d206 1
a206 1
		I915_WRITE(GMBUS3 + reg_offset, val);
d225 1
a225 1
	I915_WRITE(GMBUS1 + reg_offset, reg | GMBUS_SW_RDY);
d231 1
a231 1
				st = I915_READ(GMBUS2 + reg_offset);
d243 1
a243 1
			val = I915_READ(GMBUS3 + reg_offset);
d254 1
a254 1
				st = I915_READ(GMBUS2 + reg_offset);
d270 1
a270 1
			I915_WRITE(GMBUS3 + reg_offset, val);
d277 1
a277 1
			st = I915_READ(GMBUS2 + reg_offset);
d288 1
a288 1
			st = I915_READ(GMBUS2 + reg_offset);
d301 3
a303 3
		I915_WRITE(GMBUS1 + reg_offset, GMBUS_SW_CLR_INT);
		I915_WRITE(GMBUS1 + reg_offset, 0);
		I915_WRITE(GMBUS0 + reg_offset, 0);
d393 2
a394 1
	int i;
d405 5
a409 2
	for (i = 0; i < GMBUS_NUM_PORTS; i++) {
		struct intel_gmbus *bus = &dev_priv->gmbus[i];
d413 16
a428 17
		bus->speed = GMBUS_RATE_100KHZ;
		bus->port = i + 1;
		bus->force_bit = 0;
		bus->reg0 = bus->port | bus->speed;

		bus->controller.ic_cookie = bus;
		bus->controller.ic_acquire_bus = intel_gmbus_acquire_bus;
		bus->controller.ic_release_bus = intel_gmbus_release_bus;
		bus->controller.ic_exec = intel_gmbus_exec;

		bus->gpio_reg = dev_priv->gpio_mmio_base + gmbus_ports[i];

		bus->controller.ic_send_start = intel_gpio_send_start;
		bus->controller.ic_send_stop = intel_gpio_send_stop;
		bus->controller.ic_initiate_xfer = intel_gpio_initiate_xfer;
		bus->controller.ic_read_byte = intel_gpio_read_byte;
		bus->controller.ic_write_byte = intel_gpio_write_byte;
d436 2
a437 2
void
intel_teardown_gmbus(struct drm_device *dev)
d439 4
d445 2
a446 2
struct i2c_controller *
intel_gmbus_get_adapter(drm_i915_private_t *dev_priv, unsigned port)
a447 3
	/* -1 to map pin pair to gmbus index */
	return (intel_gmbus_is_port_valid(port)) ?
	    &dev_priv->gmbus[port - 1].controller : NULL;
d451 1
a451 1
intel_gmbus_force_bit(struct i2c_controller *controller, bool force_bit)
d453 1
a453 1
	struct intel_gmbus *bus = to_intel_gmbus(controller);
d460 1
a460 1
	KASSERT(bus->force_bit >= 0);
d462 4
a465 7
	if (bus->force_bit) {
		bus->controller.ic_exec = NULL;
		bus->reg0 = 0;
	} else {
		bus->controller.ic_exec = intel_gmbus_exec;
		bus->reg0 = bus->port | bus->speed;
	}
@


1.8
log
@Make the gmbus code work on valleyview.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_i2c.c,v 1.7 2015/09/26 22:00:00 kettenis Exp $	*/
d439 1
a439 1
	KASSERT(force_bit >= 0);
@


1.7
log
@Try a little bit harder to clean up if attaching inteldrm(4) fails.
The crucial bit is that we now clear dev->dev_priv, which prevents the X
server from opening /dev/drmN and crashing the kernel because the driver
isn't fully initialized.

While there, try a little bit harder to print error messages the proper way.
Things will still look ugly though if the failure is somewhere in the Linux
code.
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_i2c.c,v 1.6 2015/09/23 23:12:12 kettenis Exp $	*/
d147 2
d161 2
d378 3
a380 1
	if (HAS_PCH_SPLIT(dev))
d382 2
d410 2
@


1.6
log
@Update inteldrm to the code from Linux 3.14.52 (which corresponds to
commit 48f8f36a6c8018c2b36ea207aaf68ef5326c5075 on the linux-3.14.y
branch of the linux-stable tree).  This brings preliminary support for
the GPU on Intel's Broadwell CPUs.  Don't expect these to work
perfectly yet.  There are some remaining issues with older hardware as
well, but no significant regressions have been uncovered.

This also updates some of drm core code.  The radeondrm code remains
based on Linux 3.8 with some minimal canges to adjust to changes in
the core drm APIs.

Joint effort with jsg@@, who did the initial update of the relevant drm
core bits.  Committing this early to make sure it gets more testing
and make it possible for others to help getting the remaining wrinkles
straightened out.
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_i2c.c,v 1.5 2015/04/03 13:10:59 jsg Exp $	*/
d404 5
@


1.5
log
@resync i915_drv.h to make it diffable to linux
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_i2c.c,v 1.4 2015/02/12 04:56:03 kettenis Exp $	*/
d17 28
d48 1
d70 5
d81 58
@


1.4
log
@Rename the struct device member of inteldrm_softc to sc_dev and rename the
pointer to the drm subdevice to dev such that we can match the linux code
better.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_i2c.c,v 1.3 2013/03/31 11:43:23 kettenis Exp $	*/
d277 1
a277 1
intel_setup_gmbus(struct inteldrm_softc *dev_priv)
d279 1
a279 1
	struct drm_device *dev = dev_priv->dev;
@


1.3
log
@Add bit banging support.
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_i2c.c,v 1.2 2013/03/30 12:36:50 kettenis Exp $	*/
d279 1
a279 1
	struct drm_device *dev = (struct drm_device *)dev_priv->drmdev;
@


1.2
log
@Fix intel gmbus i2c code.  Not all transactions were handled correctly, and
on top of that, various iic_exec(9) calls were incorrect.  Doesn't seem to
handle SDVO yet though.
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_i2c.c,v 1.1 2013/03/18 12:36:52 jsg Exp $	*/
d3 1
a3 1
 * Copyright (c) 2012 Mark Kettenis <kettenis@@openbsd.org>
d24 1
d26 3
a28 3
int	gmbus_i2c_acquire_bus(void *, int);
void	gmbus_i2c_release_bus(void *, int);
int	gmbus_i2c_exec(void *, i2c_op_t, i2c_addr_t, const void *, size_t,
d30 18
a47 1
void	i915_i2c_probe(struct inteldrm_softc *);
d50 1
a50 1
gmbus_i2c_acquire_bus(void *cookie, int flags)
d52 2
a53 2
	struct gmbus_port *gp = cookie;
	struct inteldrm_softc *dev_priv = gp->dev_priv;
d55 1
a55 2
	I915_WRITE(dev_priv->gpio_mmio_base + GMBUS0,
	    GMBUS_RATE_100KHZ | gp->port);
d61 1
a61 1
gmbus_i2c_release_bus(void *cookie, int flags)
d63 2
a64 2
	struct gmbus_port *gp = cookie;
	struct inteldrm_softc *dev_priv = gp->dev_priv;
d70 1
a70 1
gmbus_i2c_exec(void *cookie, i2c_op_t op, i2c_addr_t addr,
d73 2
a74 2
	struct gmbus_port *gp = cookie;
	struct inteldrm_softc *dev_priv = gp->dev_priv;
d197 25
d223 1
a223 1
i915_i2c_probe(struct inteldrm_softc *dev_priv)
d225 32
a256 6
	struct drm_device *dev = (struct drm_device *)dev_priv->drmdev;
	struct gmbus_port gp;
	struct i2c_controller ic;
	uint8_t buf[128];
	uint8_t cmd;
	int err, i;
d258 5
a262 4
	if (HAS_PCH_SPLIT(dev))
		dev_priv->gpio_mmio_base = PCH_GPIOA - GPIOA;
	else
		dev_priv->gpio_mmio_base = 0;
d264 5
a268 2
	gp.dev_priv = dev_priv;
	gp.port = GMBUS_PORT_PANEL;
d270 4
a273 15
	ic.ic_cookie = &gp;
	ic.ic_acquire_bus = gmbus_i2c_acquire_bus;
	ic.ic_release_bus = gmbus_i2c_release_bus;
	ic.ic_exec = gmbus_i2c_exec;

	bzero(buf, sizeof(buf));
	iic_acquire_bus(&ic, 0);
	cmd = 0;
	err = iic_exec(&ic, I2C_OP_READ_WITH_STOP, 0x50, &cmd, 1, buf, 128, 0);
	if (err)
		printf("err %d\n", err);
	iic_release_bus(&ic, 0);
	for (i = 0; i < sizeof(buf); i++)
		printf(" 0x%02x", buf[i]);
	printf("\n");
d290 1
a290 2
		bus->gp.dev_priv = dev_priv;
		bus->gp.port = i + 1;
d292 17
a308 4
		bus->controller.ic_cookie = &bus->gp;
		bus->controller.ic_acquire_bus = gmbus_i2c_acquire_bus;
		bus->controller.ic_release_bus = gmbus_i2c_release_bus;
		bus->controller.ic_exec = gmbus_i2c_exec;
d320 21
@


1.1
log
@Significantly increase the wordlist for ddb hangman,
and update our device independent DRM code and the Intel DRM code
to be mostly in sync with Linux 3.8.3.  Among other things this
brings support for kernel modesetting and enables use of
the rings on gen6+ Intel hardware.

Based on some earlier work from matthieu@@ with some hints from FreeBSD
and with lots of help from kettenis@@ (including a beautiful accelerated
wscons framebuffer console!)

Thanks to M:Tier and the OpenBSD Foundation for sponsoring this work.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d84 1
a84 1
	if (I2C_OP_READ_P(op)) {
d86 4
a89 2
		if (cmdlen > 0)
			reg |= GMBUS_CYCLE_INDEX;
d91 1
a91 2
		if (cmdlen > 0)
			reg |= (b[0] << GMBUS_SLAVE_INDEX_SHIFT);
a92 2
	if (I2C_OP_WRITE_P(op))
		reg |= GMBUS_SLAVE_WRITE;
d123 13
d145 22
a166 5
	for (retries = 10; retries > 0; retries--) {
		st = I915_READ(GMBUS2 + reg_offset);
		if ((st & GMBUS_ACTIVE) == 0)
			break;
		DELAY(1000);
a167 2
	if (st & GMBUS_ACTIVE)
		return (ETIMEDOUT);
@

