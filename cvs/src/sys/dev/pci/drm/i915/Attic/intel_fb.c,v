head	1.13;
access;
symbols
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.4
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5;
locks; strict;
comment	@ * @;


1.13
date	2016.04.24.17.39.10;	author kettenis;	state dead;
branches;
next	1.12;
commitid	iSLI305HNxTwZk6X;

1.12
date	2015.02.10.03.39.41;	author jsg;	state Exp;
branches;
next	1.11;
commitid	C5l5rZ5v9mpRR1eS;

1.11
date	2015.02.10.01.39.32;	author jsg;	state Exp;
branches;
next	1.10;
commitid	a8Vt7gSt34kmziIS;

1.10
date	2014.01.30.15.10.48;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2014.01.24.04.05.06;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2014.01.21.08.57.22;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2013.11.19.19.14.09;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2013.08.13.10.23.51;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2013.07.05.07.20.27;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2013.04.17.20.15.14;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2013.04.14.19.04.37;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2013.03.19.03.58.10;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2013.03.18.12.36.52;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove unused file.
@
text
@/*	$OpenBSD: intel_fb.c,v 1.12 2015/02/10 03:39:41 jsg Exp $	*/
/*
 * Copyright Â© 2007 David Airlie
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *     David Airlie
 */

#include <dev/pci/drm/drmP.h>
#include <dev/pci/drm/drm.h>
#include <dev/pci/drm/drm_crtc.h>
#include <dev/pci/drm/drm_fb_helper.h>
#include <dev/pci/drm/i915_drm.h>
#include "i915_drv.h"
#include "intel_drv.h"

static int intelfb_create(struct intel_fbdev *ifbdev,
    struct drm_fb_helper_surface_size *sizes)
{
	struct drm_device *dev = ifbdev->helper.dev;
	struct drm_i915_private *dev_priv = dev->dev_private;
#if 0
	struct fb_info *info;
#endif
	struct drm_framebuffer *fb;
	struct drm_mode_fb_cmd2 mode_cmd = {};
	struct drm_i915_gem_object *obj;
	int size, ret;

	/* we don't do packed 24bpp */
	if (sizes->surface_bpp == 24)
		sizes->surface_bpp = 32;

	mode_cmd.width = sizes->surface_width;
	mode_cmd.height = sizes->surface_height;

	mode_cmd.pitches[0] = roundup2(mode_cmd.width * ((sizes->surface_bpp + 7) /
							 8), 64);
	mode_cmd.pixel_format = drm_mode_legacy_fb_format(sizes->surface_bpp,
							  sizes->surface_depth);

	size = mode_cmd.pitches[0] * mode_cmd.height;
	size = roundup2(size, PAGE_SIZE);
	obj = i915_gem_alloc_object(dev, size);
	if (!obj) {
		DRM_ERROR("failed to allocate framebuffer\n");
		ret = -ENOMEM;
		goto out;
	}

	mutex_lock(&dev->struct_mutex);

	/* Flush everything out, we'll be doing GTT only from now on */
	ret = intel_pin_and_fence_fb_obj(dev, obj, false);
	if (ret) {
		DRM_ERROR("failed to pin fb: %d\n", ret);
		goto out_unref;
	}

#if 0
	info = framebuffer_alloc(0, device);
	if (!info) {
		ret = -ENOMEM;
		goto out_unpin;
	}

	info->par = ifbdev;
#endif

	ret = intel_framebuffer_init(dev, &ifbdev->ifb, &mode_cmd, obj);
	if (ret)
		goto out_unpin;

	fb = &ifbdev->ifb.base;

	ifbdev->helper.fb = fb;
#if 0
	ifbdev->helper.fbdev = info;

	strlcpy(info->fix.id, "inteldrmfb", sizeof(info->fix.id));

	info->flags = FBINFO_DEFAULT | FBINFO_CAN_FORCE_OUTPUT;
	info->fbops = &intelfb_ops;

	ret = fb_alloc_cmap(&info->cmap, 256, 0);
	if (ret) {
		ret = -ENOMEM;
		goto out_unpin;
	}
	/* setup aperture base/size for vesafb takeover */
	info->apertures = alloc_apertures(1);
	if (!info->apertures) {
		ret = -ENOMEM;
		goto out_unpin;
	}
	info->apertures->ranges[0].base = dev->mode_config.fb_base;
	info->apertures->ranges[0].size =
		dev_priv->mm.gtt->gtt_mappable_entries << PAGE_SHIFT;

	info->fix.smem_start = dev->mode_config.fb_base + obj->gtt_offset;
	info->fix.smem_len = size;

	info->screen_base = ioremap_wc(dev->agp->base + obj->gtt_offset, size);
	if (!info->screen_base) {
		ret = -ENOSPC;
		goto out_unpin;
	}
	info->screen_size = size;

//	memset(info->screen_base, 0, size);

	drm_fb_helper_fill_fix(info, fb->pitches[0], fb->depth);
	drm_fb_helper_fill_var(info, &ifbdev->helper, sizes->fb_width, sizes->fb_height);

	/* Use default scratch pixmap (info->pixmap.flags = FB_PIXMAP_SYSTEM) */
#else
{
	struct rasops_info *ri = &dev_priv->ro;
	bus_space_handle_t bsh;
	int err;

	err = agp_map_subregion(dev_priv->agph, obj->gtt_offset, size, &bsh);
	if (err) {
		ret = -err;
		goto out_unpin;
	}

	ri->ri_bits = bus_space_vaddr(dev->bst, bsh);
	ri->ri_depth = fb->bits_per_pixel;
	ri->ri_stride = fb->pitches[0];
	ri->ri_width = sizes->fb_width;
	ri->ri_height = sizes->fb_height;

	switch (fb->pixel_format) {
	case DRM_FORMAT_XRGB8888:
		ri->ri_rnum = 8;
		ri->ri_rpos = 16;
		ri->ri_gnum = 8;
		ri->ri_gpos = 8;
		ri->ri_bnum = 8;
		ri->ri_bpos = 0;
		break;
	case DRM_FORMAT_RGB565:
		ri->ri_rnum = 5;
		ri->ri_rpos = 11;
		ri->ri_gnum = 6;
		ri->ri_gpos = 5;
		ri->ri_bnum = 5;
		ri->ri_bpos = 0;
		break;
	}
}
#endif

	DRM_DEBUG_KMS("allocated %dx%d fb: 0x%08x, bo %p\n",
		      fb->width, fb->height,
		      obj->gtt_offset, obj);

	mutex_unlock(&dev->struct_mutex);
#if 1
	DRM_DEBUG_KMS("skipping call to vga_switcheroo_client_fb_set\n");
#else
	vga_switcheroo_client_fb_set(dev->pdev, info);
#endif
	return 0;

out_unpin:
	i915_gem_object_unpin(obj);
out_unref:
	drm_gem_object_unreference(&obj->base);
	mutex_unlock(&dev->struct_mutex);
out:
	return ret;
}

static int intel_fb_find_or_create_single(struct drm_fb_helper *helper,
					  struct drm_fb_helper_surface_size *sizes)
{
	struct intel_fbdev *ifbdev = (struct intel_fbdev *)helper;
	int new_fb = 0;
	int ret;

	if (!helper->fb) {
		ret = intelfb_create(ifbdev, sizes);
		if (ret)
			return ret;
		new_fb = 1;
	}
	return new_fb;
}

static struct drm_fb_helper_funcs intel_fb_helper_funcs = {
	.gamma_set = intel_crtc_fb_gamma_set,
	.gamma_get = intel_crtc_fb_gamma_get,
	.fb_probe = intel_fb_find_or_create_single,
};

static void intel_fbdev_destroy(struct drm_device *dev,
				struct intel_fbdev *ifbdev)
{
#if 0
	struct fb_info *info;
#endif
	struct intel_framebuffer *ifb = &ifbdev->ifb;

#if 0
	if (ifbdev->helper.fbdev) {
		info = ifbdev->helper.fbdev;
		unregister_framebuffer(info);
		iounmap(info->screen_base);
		if (info->cmap.len)
			fb_dealloc_cmap(&info->cmap);
		framebuffer_release(info);
	}
#endif

	drm_fb_helper_fini(&ifbdev->helper);

	drm_framebuffer_cleanup(&ifb->base);
	if (ifb->obj) {
		drm_gem_object_unreference_unlocked(&ifb->obj->base);
		ifb->obj = NULL;
	}
}

int intel_fbdev_init(struct drm_device *dev)
{
	struct intel_fbdev *ifbdev;
	drm_i915_private_t *dev_priv = dev->dev_private;
	int ret;

	ifbdev = kzalloc(sizeof(struct intel_fbdev), GFP_KERNEL);
	if (!ifbdev)
		return -ENOMEM;

	dev_priv->fbdev = ifbdev;
	ifbdev->helper.funcs = &intel_fb_helper_funcs;

	ret = drm_fb_helper_init(dev, &ifbdev->helper,
				 INTEL_INFO(dev)->num_pipes,
				 INTELFB_CONN_LIMIT);
	if (ret) {
		kfree(ifbdev);
		return ret;
	}

	drm_fb_helper_single_add_all_connectors(&ifbdev->helper);
	drm_fb_helper_initial_config(&ifbdev->helper, 32);
	return 0;
}

void intel_fbdev_fini(struct drm_device *dev)
{
	drm_i915_private_t *dev_priv = dev->dev_private;
	if (!dev_priv->fbdev)
		return;

	intel_fbdev_destroy(dev, dev_priv->fbdev);
	kfree(dev_priv->fbdev);
	dev_priv->fbdev = NULL;
}

void intel_fb_output_poll_changed(struct drm_device *dev)
{
	drm_i915_private_t *dev_priv = dev->dev_private;
	drm_fb_helper_hotplug_event(&dev_priv->fbdev->helper);
}

void intel_fb_restore_mode(struct drm_device *dev)
{
	int ret;
	drm_i915_private_t *dev_priv = dev->dev_private;
	struct drm_mode_config *config = &dev->mode_config;
	struct drm_plane *plane;

	mutex_lock(&dev->mode_config.mutex);

	ret = drm_fb_helper_restore_fbdev_mode(&dev_priv->fbdev->helper);
	if (ret)
		DRM_DEBUG("failed to restore crtc mode\n");

	/* Be sure to shut off any planes that may be active */
	list_for_each_entry(plane, &config->plane_list, head)
		plane->funcs->disable_plane(plane);

	mutex_unlock(&dev->mode_config.mutex);
}
@


1.12
log
@use linux function names when locking mode config
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_fb.c,v 1.11 2015/02/10 01:39:32 jsg Exp $	*/
@


1.11
log
@Remove DRM_LOCK macros, rename dev_lock to struct_mutex and directly
call linux style lock functions where these macros were used.
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_fb.c,v 1.10 2014/01/30 15:10:48 kettenis Exp $	*/
d295 1
a295 1
	rw_enter_write(&dev->mode_config.rwl);
d305 1
a305 1
	rw_exit_write(&dev->mode_config.rwl);
@


1.10
log
@Get rid of the simple locks; they're lies.  Also get rid of the holding
logic for uvm objects; it's not necessary anymore as far as I can tell, at
least as long as we run all this code under the kernel lock.
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_fb.c,v 1.9 2014/01/24 04:05:06 jsg Exp $	*/
d70 1
a70 1
	DRM_LOCK();
d178 1
a178 1
	DRM_UNLOCK();
d190 1
a190 1
	DRM_UNLOCK();
@


1.9
log
@drm/i915: Move num_pipes to intel info

From Ben Widawsky
7ed1faada973243b6e11fa209ada91c9cc1dab53 in ubuntu 3.8
7eb552aeae058a88eece91b902dd51fde45b1f41 in mainline linux
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_fb.c,v 1.8 2014/01/21 08:57:22 kettenis Exp $	*/
d240 1
a240 1
		drm_gem_object_unreference(&ifb->obj->base);
@


1.8
log
@Use Linux compat functions to do kernel memory allocations in the bits of code
that are shared with Linux.  Use OpenBSD functions in the few sports where we
have our own implementation of bits.

discussed with jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_fb.c,v 1.7 2013/11/19 19:14:09 kettenis Exp $	*/
d259 1
a259 1
				 dev_priv->num_pipe,
@


1.7
log
@Move the GTT management into the inteldrm driver.  It is really obvious now
that this is necessary as on some hardware we need guard pages between
regions that have different cache attributes.  Even if this appears to cause
regressions on some hardware, this change is a necessary (but not sufficient)
step to fix the cache coherency problems on the affected hardware.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_fb.c,v 1.6 2013/08/13 10:23:51 jsg Exp $	*/
d251 3
a253 2
	ifbdev = malloc(sizeof(struct intel_fbdev), M_DRM,
	    M_WAITOK | M_ZERO);
d262 1
a262 1
		free(ifbdev, M_DRM);
d278 1
a278 1
	free(dev_priv->fbdev, M_DRM);
@


1.6
log
@add static back to functions that originally had it
reduces the diff to linux and makes ddb hangman a little easier
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_fb.c,v 1.5 2013/07/05 07:20:27 jsg Exp $	*/
d62 1
a62 1
	size = roundup2(size, PAGE_SIZE) * 2;
a68 1
	obj->dma_flags |= BUS_DMA_GTT_WRAPAROUND;
@


1.5
log
@make use of the drm_i915_private macro to reduce the diff to linux
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_fb.c,v 1.4 2013/04/17 20:15:14 kettenis Exp $	*/
d36 1
a36 8
int	 intelfb_create(struct intel_fbdev *,
	     struct drm_fb_helper_surface_size *);
int	 intel_fb_find_or_create_single(struct drm_fb_helper *,
	     struct drm_fb_helper_surface_size *);
void	 intel_fbdev_destroy(struct drm_device *, struct intel_fbdev *);

int
intelfb_create(struct intel_fbdev *ifbdev,
d196 2
a197 3
int
intel_fb_find_or_create_single(struct drm_fb_helper *helper,
    struct drm_fb_helper_surface_size *sizes)
d218 2
a219 2
void
intel_fbdev_destroy(struct drm_device *dev, struct intel_fbdev *ifbdev)
d246 1
a246 2
int
intel_fbdev_init(struct drm_device *dev)
d271 1
a271 2
void
intel_fbdev_fini(struct drm_device *dev)
d282 1
a282 2
void
intel_fb_output_poll_changed(struct drm_device *dev)
d288 1
a288 2
void
intel_fb_restore_mode(struct drm_device *dev)
@


1.4
log
@Add support for 16bpp mode to code that interfaces with the rasops(9) code.
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_fb.c,v 1.3 2013/04/14 19:04:37 kettenis Exp $	*/
d47 1
a47 1
	drm_i915_private_t *dev_priv = dev->dev_private;
d258 1
a258 1
	struct inteldrm_softc *dev_priv = dev->dev_private;
d283 1
a283 1
	struct inteldrm_softc *dev_priv = dev->dev_private;
d295 1
a295 1
	struct inteldrm_softc *dev_priv = dev->dev_private;
d303 1
a303 1
	struct inteldrm_softc *dev_priv = dev->dev_private;
@


1.3
log
@Take a different approach towards framebuffer accelartion.  Instead of using
the blitter, scroll by double-mapping the framebuffer and reprogramming the
registers that determine the first visible pixel, much in the same way as the
vga text console uses the 6845.  This makes scrolling very fast, and since we
no longer need to issue commands to any of the rings, we can enable this when
X is running and safely scroll when printing panic messages or if we've
entered ddb.

Testes by many.
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_fb.c,v 1.2 2013/03/19 03:58:10 jsg Exp $	*/
d168 8
@


1.2
log
@make a few printfs debug only to reduce dmesg spam
@
text
@d1 1
a1 1
/*	$OpenBSD: intel_fb.c,v 1.1 2013/03/18 12:36:52 jsg Exp $	*/
d69 1
a69 1
	size = roundup2(size, PAGE_SIZE);
d76 1
@


1.1
log
@Significantly increase the wordlist for ddb hangman,
and update our device independent DRM code and the Intel DRM code
to be mostly in sync with Linux 3.8.3.  Among other things this
brings support for kernel modesetting and enables use of
the rings on gen6+ Intel hardware.

Based on some earlier work from matthieu@@ with some hints from FreeBSD
and with lots of help from kettenis@@ (including a beautiful accelerated
wscons framebuffer console!)

Thanks to M:Tier and the OpenBSD Foundation for sponsoring this work.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d179 1
a179 1
	printf("skipping call to vga_switcheroo_client_fb_set\n");
@

