head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.4
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.8
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.6
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4;
locks; strict;
comment	@ * @;


1.10
date	2015.09.27.11.09.26;	author jsg;	state Exp;
branches;
next	1.9;
commitid	OkoKp05dU7tP7DK3;

1.9
date	2015.04.06.12.25.10;	author jsg;	state Exp;
branches;
next	1.8;
commitid	CN1fAwudhSb2ckyl;

1.8
date	2015.02.11.07.01.37;	author jsg;	state Exp;
branches;
next	1.7;
commitid	dLgISW35NAmGN8Xl;

1.7
date	2015.02.10.10.50.49;	author jsg;	state Exp;
branches;
next	1.6;
commitid	aHLMSW1RfE1rmMw9;

1.6
date	2015.02.09.03.15.41;	author dlg;	state Exp;
branches;
next	1.5;
commitid	jVd0KngVszV2FEfg;

1.5
date	2015.01.27.03.17.36;	author dlg;	state Exp;
branches;
next	1.4;
commitid	MyKPm9Q3dQu92BiX;

1.4
date	2014.02.09.10.57.26;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2013.12.08.07.54.06;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.29.06.30.57;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2013.08.12.04.11.53;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Switch remaining users of the FreeBSD refcount apis back to the original
linux kref/kobject use.

ok kettenis@@
@
text
@/*	$OpenBSD: ttm_memory.c,v 1.9 2015/04/06 12:25:10 jsg Exp $	*/
/**************************************************************************
 *
 * Copyright (c) 2006-2009 VMware, Inc., Palo Alto, CA., USA
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#define pr_fmt(fmt) "[TTM] " fmt

#include <dev/pci/drm/drmP.h>
#include <dev/pci/drm/ttm/ttm_memory.h>
#include <dev/pci/drm/ttm/ttm_module.h>
#include <dev/pci/drm/ttm/ttm_page_alloc.h>

#define TTM_MEMORY_ALLOC_RETRIES 4

struct ttm_mem_zone {
	struct kobject kobj;
	struct ttm_mem_global *glob;
	const char *name;
	uint64_t zone_mem;
	uint64_t emer_mem;
	uint64_t max_mem;
	uint64_t swap_limit;
	uint64_t used_mem;
};

#ifdef notyet
static struct attribute ttm_mem_sys = {
	.name = "zone_memory",
	.mode = S_IRUGO
};
static struct attribute ttm_mem_emer = {
	.name = "emergency_memory",
	.mode = S_IRUGO | S_IWUSR
};
static struct attribute ttm_mem_max = {
	.name = "available_memory",
	.mode = S_IRUGO | S_IWUSR
};
static struct attribute ttm_mem_swap = {
	.name = "swap_limit",
	.mode = S_IRUGO | S_IWUSR
};
static struct attribute ttm_mem_used = {
	.name = "used_memory",
	.mode = S_IRUGO
};
#endif

static void ttm_mem_zone_kobj_release(struct kobject *kobj)
{
	struct ttm_mem_zone *zone =
		container_of(kobj, struct ttm_mem_zone, kobj);

	pr_info("Zone %7s: Used memory at exit: %llu kiB\n",
		zone->name, (unsigned long long)zone->used_mem >> 10);
	kfree(zone);
}

#ifdef notyet
static ssize_t ttm_mem_zone_show(struct kobject *kobj,
				 struct attribute *attr,
				 char *buffer)
{
	struct ttm_mem_zone *zone =
		container_of(kobj, struct ttm_mem_zone, kobj);
	uint64_t val = 0;

	spin_lock(&zone->glob->lock);
	if (attr == &ttm_mem_sys)
		val = zone->zone_mem;
	else if (attr == &ttm_mem_emer)
		val = zone->emer_mem;
	else if (attr == &ttm_mem_max)
		val = zone->max_mem;
	else if (attr == &ttm_mem_swap)
		val = zone->swap_limit;
	else if (attr == &ttm_mem_used)
		val = zone->used_mem;
	spin_unlock(&zone->glob->lock);

	return snprintf(buffer, PAGE_SIZE, "%llu\n",
			(unsigned long long) val >> 10);
}

static void ttm_check_swapping(struct ttm_mem_global *glob);

static ssize_t ttm_mem_zone_store(struct kobject *kobj,
				  struct attribute *attr,
				  const char *buffer,
				  size_t size)
{
	struct ttm_mem_zone *zone =
		container_of(kobj, struct ttm_mem_zone, kobj);
	int chars;
	unsigned long val;
	uint64_t val64;

	chars = sscanf(buffer, "%lu", &val);
	if (chars == 0)
		return size;

	val64 = val;
	val64 <<= 10;

	spin_lock(&zone->glob->lock);
	if (val64 > zone->zone_mem)
		val64 = zone->zone_mem;
	if (attr == &ttm_mem_emer) {
		zone->emer_mem = val64;
		if (zone->max_mem > val64)
			zone->max_mem = val64;
	} else if (attr == &ttm_mem_max) {
		zone->max_mem = val64;
		if (zone->emer_mem < val64)
			zone->emer_mem = val64;
	} else if (attr == &ttm_mem_swap)
		zone->swap_limit = val64;
	spin_unlock(&zone->glob->lock);

	ttm_check_swapping(zone->glob);

	return size;
}
#endif

#ifdef notyet
static struct attribute *ttm_mem_zone_attrs[] = {
	&ttm_mem_sys,
	&ttm_mem_emer,
	&ttm_mem_max,
	&ttm_mem_swap,
	&ttm_mem_used,
	NULL
};

static const struct sysfs_ops ttm_mem_zone_ops = {
	.show = &ttm_mem_zone_show,
	.store = &ttm_mem_zone_store
};
#endif

static struct kobj_type ttm_mem_zone_kobj_type = {
	.release = &ttm_mem_zone_kobj_release,
#ifdef __linux__
	.sysfs_ops = &ttm_mem_zone_ops,
	.default_attrs = ttm_mem_zone_attrs,
#endif
};

static void ttm_mem_global_kobj_release(struct kobject *kobj)
{
	struct ttm_mem_global *glob =
		container_of(kobj, struct ttm_mem_global, kobj);

	kfree(glob);
}

static struct kobj_type ttm_mem_glob_kobj_type = {
	.release = &ttm_mem_global_kobj_release,
};

static bool ttm_zones_above_swap_target(struct ttm_mem_global *glob,
					bool from_wq, uint64_t extra)
{
	unsigned int i;
	struct ttm_mem_zone *zone;
	uint64_t target;

	for (i = 0; i < glob->num_zones; ++i) {
		zone = glob->zones[i];

		if (from_wq)
			target = zone->swap_limit;
		else if (DRM_SUSER(curproc))
			target = zone->emer_mem;
		else
			target = zone->max_mem;

		target = (extra > target) ? 0ULL : target;

		if (zone->used_mem > target)
			return true;
	}
	return false;
}

/**
 * At this point we only support a single shrink callback.
 * Extend this if needed, perhaps using a linked list of callbacks.
 * Note that this function is reentrant:
 * many threads may try to swap out at any given time.
 */

static void ttm_shrink(struct ttm_mem_global *glob, bool from_wq,
		       uint64_t extra)
{
	int ret;
	struct ttm_mem_shrink *shrink;

	spin_lock(&glob->lock);
	if (glob->shrink == NULL)
		goto out;

	while (ttm_zones_above_swap_target(glob, from_wq, extra)) {
		shrink = glob->shrink;
		spin_unlock(&glob->lock);
		ret = shrink->do_shrink(shrink);
		spin_lock(&glob->lock);
		if (unlikely(ret != 0))
			goto out;
	}
out:
	glob->task_queued = false;
	spin_unlock(&glob->lock);
}

static void ttm_shrink_work(void *arg1)
{
	struct ttm_mem_global *glob = arg1;

	ttm_shrink(glob, true, 0ULL);
}

static int ttm_mem_init_kernel_zone(struct ttm_mem_global *glob,
    uint64_t mem)
{
	struct ttm_mem_zone *zone = kzalloc(sizeof(*zone), GFP_KERNEL);
	int ret;

	if (unlikely(!zone))
		return -ENOMEM;

	zone->name = "kernel";
	zone->zone_mem = mem;
	zone->max_mem = mem >> 1;
	zone->emer_mem = (mem >> 1) + (mem >> 2);
	zone->swap_limit = zone->max_mem - (mem >> 3);
	zone->used_mem = 0;
	zone->glob = glob;
	glob->zone_kernel = zone;
	ret = kobject_init_and_add(
		&zone->kobj, &ttm_mem_zone_kobj_type, &glob->kobj, zone->name);
	if (unlikely(ret != 0)) {
		kobject_put(&zone->kobj);
		return ret;
	}
	glob->zones[glob->num_zones++] = zone;
	return 0;
}

#ifdef CONFIG_HIGHMEM
static int ttm_mem_init_highmem_zone(struct ttm_mem_global *glob,
    uint64_t mem)
{
	struct ttm_mem_zone *zone;
	int ret;

	if (si->totalhigh == 0)
		return 0;

	zone = kzalloc(sizeof(*zone), GFP_KERNEL);
	if (unlikely(!zone))
		return -ENOMEM;

	zone->name = "highmem";
	zone->zone_mem = mem;
	zone->max_mem = mem >> 1;
	zone->emer_mem = (mem >> 1) + (mem >> 2);
	zone->swap_limit = zone->max_mem - (mem >> 3);
	zone->used_mem = 0;
	zone->glob = glob;
	glob->zone_highmem = zone;
	ret = kobject_init_and_add(
		&zone->kobj, &ttm_mem_zone_kobj_type, &glob->kobj, zone->name);
	if (unlikely(ret != 0)) {
		kobject_put(&zone->kobj);
		return ret;
	}
	glob->zones[glob->num_zones++] = zone;
	return 0;
}
#else
static int ttm_mem_init_dma32_zone(struct ttm_mem_global *glob,
    uint64_t mem)
{
	struct ttm_mem_zone *zone = kzalloc(sizeof(*zone), GFP_KERNEL);
	int ret;

	if (unlikely(!zone))
		return -ENOMEM;

	/**
	 * No special dma32 zone needed.
	 */

	if (mem <= ((uint64_t) 1ULL << 32)) {
		kfree(zone);
		return 0;
	}

	/*
	 * Limit max dma32 memory to 4GB for now
	 * until we can figure out how big this
	 * zone really is.
	 */

	mem = ((uint64_t) 1ULL << 32);
	zone->name = "dma32";
	zone->zone_mem = mem;
	zone->max_mem = mem >> 1;
	zone->emer_mem = (mem >> 1) + (mem >> 2);
	zone->swap_limit = zone->max_mem - (mem >> 3);
	zone->used_mem = 0;
	zone->glob = glob;
	glob->zone_dma32 = zone;
	ret = kobject_init_and_add(
		&zone->kobj, &ttm_mem_zone_kobj_type, &glob->kobj, zone->name);
	if (unlikely(ret != 0)) {
		kobject_put(&zone->kobj);
		return ret;
	}
	glob->zones[glob->num_zones++] = zone;
	return 0;
}
#endif

int ttm_mem_global_init(struct ttm_mem_global *glob)
{
	uint64_t mem;
	int ret;
#ifdef DRMDEBUG
	int i;
	struct ttm_mem_zone *zone;
#endif

	mtx_init(&glob->lock, IPL_TTY);
	glob->swap_queue = taskq_create("ttm_swap", 1, IPL_TTY, 0);
	glob->task_queued = false;
	task_set(&glob->task, ttm_shrink_work, glob);

	ret = kobject_init_and_add(
		&glob->kobj, &ttm_mem_glob_kobj_type, ttm_get_kobj(), "memory_accounting");
	if (unlikely(ret != 0)) {
		kobject_put(&glob->kobj);
		return ret;
	}

	mem = ptoa(physmem);

	ret = ttm_mem_init_kernel_zone(glob, mem);
	if (unlikely(ret != 0))
		goto out_no_zone;
#ifdef CONFIG_HIGHMEM
	ret = ttm_mem_init_highmem_zone(glob, mem);
	if (unlikely(ret != 0))
		goto out_no_zone;
#else
	ret = ttm_mem_init_dma32_zone(glob, mem);
	if (unlikely(ret != 0))
		goto out_no_zone;
#endif
#ifdef DRMDEBUG
	for (i = 0; i < glob->num_zones; ++i) {
		zone = glob->zones[i];
		pr_info("Zone %7s: Available graphics memory: %llu kiB\n",
			zone->name, (unsigned long long)zone->max_mem >> 10);
	}
#endif
	ttm_page_alloc_init(glob, glob->zone_kernel->max_mem/(2*PAGE_SIZE));
	ttm_dma_page_alloc_init(glob, glob->zone_kernel->max_mem/(2*PAGE_SIZE));
	return 0;
out_no_zone:
	ttm_mem_global_release(glob);
	return ret;
}
EXPORT_SYMBOL(ttm_mem_global_init);

void ttm_mem_global_release(struct ttm_mem_global *glob)
{
	unsigned int i;
	struct ttm_mem_zone *zone;

	/* let the page allocator first stop the shrink work. */
	ttm_page_alloc_fini();
	ttm_dma_page_alloc_fini();

	taskq_destroy(glob->swap_queue);
	glob->swap_queue = NULL;
	for (i = 0; i < glob->num_zones; ++i) {
		zone = glob->zones[i];
		kobject_del(&zone->kobj);
		kobject_put(&zone->kobj);
	}
	kobject_del(&glob->kobj);
	kobject_put(&glob->kobj);
}
EXPORT_SYMBOL(ttm_mem_global_release);

static void ttm_check_swapping(struct ttm_mem_global *glob)
{
	bool needs_swapping = false;
	unsigned int i;
	struct ttm_mem_zone *zone;

	spin_lock(&glob->lock);
	for (i = 0; i < glob->num_zones; ++i) {
		zone = glob->zones[i];
		if (zone->used_mem > zone->swap_limit) {
			needs_swapping = true;
			break;
		}
	}

	if (glob->task_queued)
		needs_swapping = false;
	else
		glob->task_queued = true;
	spin_unlock(&glob->lock);

	if (unlikely(needs_swapping))
		task_add(glob->swap_queue, &glob->task);
}

static void ttm_mem_global_free_zone(struct ttm_mem_global *glob,
				     struct ttm_mem_zone *single_zone,
				     uint64_t amount)
{
	unsigned int i;
	struct ttm_mem_zone *zone;

	spin_lock(&glob->lock);
	for (i = 0; i < glob->num_zones; ++i) {
		zone = glob->zones[i];
		if (single_zone && zone != single_zone)
			continue;
		zone->used_mem -= amount;
	}
	spin_unlock(&glob->lock);
}

void ttm_mem_global_free(struct ttm_mem_global *glob,
			 uint64_t amount)
{
	return ttm_mem_global_free_zone(glob, NULL, amount);
}
EXPORT_SYMBOL(ttm_mem_global_free);

static int ttm_mem_global_reserve(struct ttm_mem_global *glob,
				  struct ttm_mem_zone *single_zone,
				  uint64_t amount, bool reserve)
{
	uint64_t limit;
	int ret = -ENOMEM;
	unsigned int i;
	struct ttm_mem_zone *zone;

	spin_lock(&glob->lock);
	for (i = 0; i < glob->num_zones; ++i) {
		zone = glob->zones[i];
		if (single_zone && zone != single_zone)
			continue;

		limit = (DRM_SUSER(curproc)) ?
			zone->emer_mem : zone->max_mem;

		if (zone->used_mem > limit)
			goto out_unlock;
	}

	if (reserve) {
		for (i = 0; i < glob->num_zones; ++i) {
			zone = glob->zones[i];
			if (single_zone && zone != single_zone)
				continue;
			zone->used_mem += amount;
		}
	}

	ret = 0;
out_unlock:
	spin_unlock(&glob->lock);
	ttm_check_swapping(glob);

	return ret;
}


static int ttm_mem_global_alloc_zone(struct ttm_mem_global *glob,
				     struct ttm_mem_zone *single_zone,
				     uint64_t memory,
				     bool no_wait, bool interruptible)
{
	int count = TTM_MEMORY_ALLOC_RETRIES;

	while (unlikely(ttm_mem_global_reserve(glob,
					       single_zone,
					       memory, true)
			!= 0)) {
		if (no_wait)
			return -ENOMEM;
		if (unlikely(count-- == 0))
			return -ENOMEM;
		ttm_shrink(glob, false, memory + (memory >> 2) + 16);
	}

	return 0;
}

int ttm_mem_global_alloc(struct ttm_mem_global *glob, uint64_t memory,
			 bool no_wait, bool interruptible)
{
	/**
	 * Normal allocations of kernel memory are registered in
	 * all zones.
	 */

	return ttm_mem_global_alloc_zone(glob, NULL, memory, no_wait,
					 interruptible);
}
EXPORT_SYMBOL(ttm_mem_global_alloc);

int ttm_mem_global_alloc_page(struct ttm_mem_global *glob,
			      struct vm_page *page,
			      bool no_wait, bool interruptible)
{

	struct ttm_mem_zone *zone = NULL;

	/**
	 * Page allocations may be registed in a single zone
	 * only if highmem or !dma32.
	 */

#ifdef CONFIG_HIGHMEM
	if (PageHighMem(page) && glob->zone_highmem != NULL)
		zone = glob->zone_highmem;
#else
	if (glob->zone_dma32 && page_to_pfn(page) > 0x00100000UL)
		zone = glob->zone_kernel;
#endif
	return ttm_mem_global_alloc_zone(glob, zone, PAGE_SIZE, no_wait,
					 interruptible);
}

void ttm_mem_global_free_page(struct ttm_mem_global *glob, struct vm_page *page)
{
	struct ttm_mem_zone *zone = NULL;

#ifdef CONFIG_HIGHMEM
	if (PageHighMem(page) && glob->zone_highmem != NULL)
		zone = glob->zone_highmem;
#else
	if (glob->zone_dma32 && page_to_pfn(page) > 0x00100000UL)
		zone = glob->zone_kernel;
#endif
	ttm_mem_global_free_zone(glob, zone, PAGE_SIZE);
}


size_t ttm_round_pot(size_t size)
{
	if ((size & (size - 1)) == 0)
		return size;
	else if (size > PAGE_SIZE)
		return PAGE_ALIGN(size);
	else {
		size_t tmp_size = 4;

		while (tmp_size < size)
			tmp_size <<= 1;

		return tmp_size;
	}
	return 0;
}
EXPORT_SYMBOL(ttm_round_pot);
@


1.9
log
@move some inline linux compat into the dedicated files
@
text
@d1 1
a1 1
/*	$OpenBSD: ttm_memory.c,v 1.8 2015/02/11 07:01:37 jsg Exp $	*/
a31 1
#include <dev/pci/drm/refcount.h>
d39 1
a39 1
	u_int kobj_ref;
d72 1
a72 1
static void ttm_mem_zone_kobj_release(struct ttm_mem_zone *zone)
d74 2
d163 1
d167 1
d170 1
a171 1
#endif
d173 1
a173 1
static void ttm_mem_global_kobj_release(struct ttm_mem_global *glob)
d175 2
a180 1
#ifdef notyet
a183 1
#endif
d251 1
d264 6
a269 1
	refcount_init(&zone->kobj_ref, 1);
d279 1
d296 6
a301 1
	refcount_init(&zone->kobj_ref, 1);
d310 1
d339 6
a344 1
	refcount_init(&zone->kobj_ref, 1);
d364 6
a369 1
	refcount_init(&glob->kobj_ref, 1);
d414 2
a415 2
		if (refcount_release(&zone->kobj_ref))
			ttm_mem_zone_kobj_release(zone);
d417 2
a418 2
	if (refcount_release(&glob->kobj_ref))
		ttm_mem_global_kobj_release(glob);
@


1.8
log
@Switch most printf style functions calls back to linux function names
and move DRM_INFO/pr_info/dev_info messages under DRMDEBUG.
@
text
@d1 1
a1 1
/*	$OpenBSD: ttm_memory.c,v 1.7 2015/02/10 10:50:49 jsg Exp $	*/
a517 2

#define page_to_pfn(pp) (VM_PAGE_TO_PHYS(pp) / PAGE_SIZE)
@


1.7
log
@switch most mtx_* calls back to linux spinlocks
@
text
@d1 1
a1 1
/*	$OpenBSD: ttm_memory.c,v 1.6 2015/02/09 03:15:41 dlg Exp $	*/
d76 1
a76 1
	DRM_INFO("Zone %7s: Used memory at exit: %llu kiB\n",
d362 1
a362 1
		DRM_INFO("Zone %7s: Available graphics memory: %llu kiB\n",
@


1.6
log
@we want to defer work traditionally (in openbsd) handled in an
interrupt context to a taskq running in a thread. however, there
is a concern that if we do that then we allow accidental use of
sleeping APIs in this work, which will make it harder to move the
work back to interrupts in the future.

guenther and kettenis came up with the idea of marking a proc with
CANTSLEEP which the sleep paths can check and panic on.

this builds on that so you create taskqs that run with CANTSLEEP
set except when they need to sleep for more tasks to run.

the taskq_create api is changed to take a flags argument so users
can specify CANTSLEEP. MPSAFE is also passed via this flags field
now.  this means archs that defined IPL_MPSAFE to 0 can now create
mpsafe taskqs too.

lots of discussion at s2k15
ok guenther@@ miod@@ mpi@@ tedu@@ pelikan@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ttm_memory.c,v 1.5 2015/01/27 03:17:36 dlg Exp $	*/
d90 1
a90 1
	mtx_enter(&zone->glob->lock);
d101 1
a101 1
	mtx_leave(&zone->glob->lock);
d127 1
a127 1
	mtx_enter(&zone->glob->lock);
d140 1
a140 1
	mtx_leave(&zone->glob->lock);
d220 1
a220 1
	mtx_enter(&glob->lock);
d226 1
a226 1
		mtx_leave(&glob->lock);
d228 1
a228 1
		mtx_enter(&glob->lock);
d234 1
a234 1
	mtx_leave(&glob->lock);
d402 1
a402 1
	mtx_enter(&glob->lock);
d415 1
a415 1
	mtx_leave(&glob->lock);
d428 1
a428 1
	mtx_enter(&glob->lock);
d435 1
a435 1
	mtx_leave(&glob->lock);
d454 1
a454 1
	mtx_enter(&glob->lock);
d478 1
a478 1
	mtx_leave(&glob->lock);
@


1.5
log
@remove the second void * argument on tasks.

when workqs were introduced, we provided a second argument so you
could pass a thing and some context to work on it in. there were
very few things that took advantage of the second argument, so when
i introduced pools i suggested removing it. since tasks were meant
to replace workqs, it was requested that we keep the second argument
to make porting from workqs to tasks easier.

now that workqs are gone, i had a look at the use of the second
argument again and found only one good use of it (vdsp(4) on sparc64
if you're interested) and a tiny handful of questionable uses. the
vast majority of tasks only used a single argument. i have since
modified all tasks that used two args to only use one, so now we
can remove the second argument.

so this is a mechanical change. all tasks only passed NULL as their
second argument, so we can just remove it.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ttm_memory.c,v 1.4 2014/02/09 10:57:26 jsg Exp $	*/
d339 1
a339 1
	glob->swap_queue = taskq_create("ttm_swap", 1, IPL_TTY);
@


1.4
log
@use linux style memory allocations in ttm
@
text
@d1 1
a1 1
/*	$OpenBSD: ttm_memory.c,v 1.3 2013/12/08 07:54:06 jsg Exp $	*/
d237 1
a237 1
static void ttm_shrink_work(void *arg1, void *arg2)
d341 1
a341 1
	task_set(&glob->task, ttm_shrink_work, glob, NULL);
@


1.3
log
@add static back to the ttm functions
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ttm_memory.c,v 1.2 2013/10/29 06:30:57 jsg Exp $	*/
d78 1
a78 1
	free(zone, M_DRM);
d173 1
a173 1
	free(glob, M_DRM);
d247 1
a247 1
	struct ttm_mem_zone *zone = malloc(sizeof(*zone), M_DRM, M_WAITOK | M_ZERO);
d274 1
a274 1
	zone = malloc(sizeof(*zone), M_DRM, M_WAITOK | M_ZERO);
d294 1
a294 1
	struct ttm_mem_zone *zone = malloc(sizeof(*zone), M_DRM, M_WAITOK | M_ZERO);
d304 1
a304 1
		free(zone, M_DRM);
@


1.2
log
@Move most of the uses of workqs in drm to the new task/taskq api.
Prevents unintended multiple additions to workqs that was causing
hangs on radeon, and lets us remove tasks more closely matching
the behaviour of the original linux code.

ok kettenis@@
cause of the ttm/radeon hangs debugged by claudio@@ and kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ttm_memory.c,v 1.1 2013/08/12 04:11:53 jsg Exp $	*/
a49 16
void	 ttm_mem_zone_kobj_release(struct ttm_mem_zone *);
void	 ttm_mem_global_kobj_release(struct ttm_mem_global *);
bool	 ttm_zones_above_swap_target(struct ttm_mem_global *,
	     bool, uint64_t);
void	 ttm_shrink(struct ttm_mem_global *, bool, uint64_t);
int	 ttm_mem_init_kernel_zone(struct ttm_mem_global *, uint64_t);
int	 ttm_mem_init_dma32_zone(struct ttm_mem_global *, uint64_t);
void	 ttm_check_swapping(struct ttm_mem_global *);
void	 ttm_mem_global_free_zone(struct ttm_mem_global *,
	     struct ttm_mem_zone *, uint64_t);
int	 ttm_mem_global_reserve(struct ttm_mem_global *,
	     struct ttm_mem_zone *, uint64_t, bool);
int	 ttm_mem_global_alloc_zone(struct ttm_mem_global *,
	     struct ttm_mem_zone *, uint64_t, bool, bool);
void	 ttm_shrink_work(void *, void *);

d73 1
a73 2
void
ttm_mem_zone_kobj_release(struct ttm_mem_zone *zone)
d82 1
a82 2
ssize_t
ttm_mem_zone_show(struct kobject *kobj,
a105 1
#endif
d107 3
a109 3
#ifdef notyet
ssize_t
ttm_mem_zone_store(struct kobject *kobj,
d170 1
a170 2
void
ttm_mem_global_kobj_release(struct ttm_mem_global *glob)
d182 1
a182 2
bool
ttm_zones_above_swap_target(struct ttm_mem_global *glob,
d214 1
a214 2
void
ttm_shrink(struct ttm_mem_global *glob, bool from_wq,
d237 1
a237 2
void
ttm_shrink_work(void *arg1, void *arg2)
d244 1
a244 2
int
ttm_mem_init_kernel_zone(struct ttm_mem_global *glob,
d266 1
a266 2
int
ttm_mem_init_highmem_zone(struct ttm_mem_global *glob,
d291 1
a291 2
int
ttm_mem_init_dma32_zone(struct ttm_mem_global *glob,
d329 1
a329 2
int
ttm_mem_global_init(struct ttm_mem_global *glob)
d375 1
a375 2
void
ttm_mem_global_release(struct ttm_mem_global *glob)
d396 1
a396 2
void
ttm_check_swapping(struct ttm_mem_global *glob)
d421 1
a421 2
void
ttm_mem_global_free_zone(struct ttm_mem_global *glob,
d438 1
a438 2
void
ttm_mem_global_free(struct ttm_mem_global *glob,
d445 1
a445 2
int
ttm_mem_global_reserve(struct ttm_mem_global *glob,
d485 1
a485 2
int
ttm_mem_global_alloc_zone(struct ttm_mem_global *glob,
d506 1
a506 2
int
ttm_mem_global_alloc(struct ttm_mem_global *glob, uint64_t memory,
d521 1
a521 2
int
ttm_mem_global_alloc_page(struct ttm_mem_global *glob,
d544 1
a544 2
void
ttm_mem_global_free_page(struct ttm_mem_global *glob, struct vm_page *page)
d558 2
a559 2
size_t
ttm_round_pot(size_t size)
@


1.1
log
@Add a port of the TTM and Radeon DRM code from Linux 3.8.13.
Includes kernel modesetting, framebuffer console and support
for newer hardware.

Firmware needs to be present for acceleration and in some cases
modesetting to work.  It can be installed via fw_update
or manually via pkg_add.

With lots of help from kettenis@@ some macppc bits from mpi@@
and some ttm refcount/queue bits from FreeBSD.

Thanks to M:Tier and the OpenBSD Foundation for sponsoring this work.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d365 2
a366 4
	mtx_init(&glob->lock, IPL_NONE);
#ifdef notyet
	glob->swap_queue = create_singlethread_workqueue("ttm_swap");
#endif
d368 1
d412 1
a412 3
#ifdef notyet
	flush_workqueue(glob->swap_queue);
	destroy_workqueue(glob->swap_queue);
a413 1
#endif
d447 1
a447 2
		workq_queue_task(NULL, &glob->task, 0, ttm_shrink_work, glob,
		    NULL);
@

