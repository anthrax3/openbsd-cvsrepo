head	1.35;
access;
symbols
	OPENBSD_6_1:1.35.0.6
	OPENBSD_6_1_BASE:1.35
	OPENBSD_6_0:1.35.0.4
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.34.0.2
	OPENBSD_5_9_BASE:1.34
	OPENBSD_5_8:1.32.0.4
	OPENBSD_5_8_BASE:1.32
	OPENBSD_5_7:1.31.0.6
	OPENBSD_5_7_BASE:1.31
	OPENBSD_5_6:1.31.0.4
	OPENBSD_5_6_BASE:1.31
	OPENBSD_5_5:1.30.0.4
	OPENBSD_5_5_BASE:1.30
	OPENBSD_5_4:1.25.0.2
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.23.0.4
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.2
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.2
	OPENBSD_5_0:1.21.0.2
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.20.0.4
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.2
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.4
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@# @;


1.35
date	2016.04.05.08.22.50;	author kettenis;	state Exp;
branches;
next	1.34;
commitid	4zEfxNVjitzOF81p;

1.34
date	2015.10.29.07.47.03;	author kettenis;	state Exp;
branches;
next	1.33;
commitid	QDyL8dFxcUx9R2yh;

1.33
date	2015.09.23.23.12.11;	author kettenis;	state Exp;
branches;
next	1.32;
commitid	lQlppvmETCN49oZe;

1.32
date	2015.04.05.11.53.53;	author kettenis;	state Exp;
branches;
next	1.31;
commitid	3YXcRggXXMDC9Cpg;

1.31
date	2014.03.09.07.42.29;	author jsg;	state Exp;
branches;
next	1.30;

1.30
date	2014.02.23.09.36.52;	author kettenis;	state Exp;
branches;
next	1.29;

1.29
date	2013.08.14.02.49.19;	author jsg;	state Exp;
branches;
next	1.28;

1.28
date	2013.08.13.23.45.05;	author jsg;	state Exp;
branches;
next	1.27;

1.27
date	2013.08.12.04.11.52;	author jsg;	state Exp;
branches;
next	1.26;

1.26
date	2013.08.07.00.04.27;	author jsg;	state Exp;
branches;
next	1.25;

1.25
date	2013.03.31.13.30.25;	author kettenis;	state Exp;
branches;
next	1.24;

1.24
date	2013.03.18.12.36.51;	author jsg;	state Exp;
branches;
next	1.23;

1.23
date	2012.05.19.18.02.53;	author kettenis;	state Exp;
branches;
next	1.22;

1.22
date	2011.09.22.12.24.19;	author matthieu;	state Exp;
branches;
next	1.21;

1.21
date	2011.05.30.21.50.46;	author oga;	state Exp;
branches;
next	1.20;

1.20
date	2010.05.25.17.15.49;	author oga;	state Exp;
branches;
next	1.19;

1.19
date	2010.05.24.01.19.19;	author oga;	state Exp;
branches;
next	1.18;

1.18
date	2010.03.27.00.09.50;	author oga;	state Exp;
branches;
next	1.17;

1.17
date	2009.04.06.20.56.25;	author oga;	state Exp;
branches;
next	1.16;

1.16
date	2009.04.06.04.58.09;	author oga;	state Exp;
branches;
next	1.15;

1.15
date	2009.04.06.04.45.19;	author oga;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.27.19.00.45;	author oga;	state Exp;
branches;
next	1.13;

1.13
date	2009.03.26.22.40.06;	author oga;	state Exp;
branches;
next	1.12;

1.12
date	2009.02.15.20.10.24;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2009.02.05.00.25.51;	author oga;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.29.11.50.16;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.29.11.44.05;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.29.11.18.16;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.22.21.26.48;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.17.00.40.04;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.11.21.06.18;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.08.28.00.19.27;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.26.17.01.03;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.12.19.14.53;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.56.04;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.35
log
@Split out the generic GEM code (like Linux did) and switch it over to
the vma offset manager.  This brings us a little bit more isolation between
applications as GEM buffers are now tied to a specific /dev/drmX clone.

ok jsg@@
@
text
@# $NetBSD: files.drm,v 1.2 2007/03/28 11:29:37 jmcneill Exp $
# $OpenBSD: files.drm,v 1.34 2015/10/29 07:47:03 kettenis Exp $

# direct rendering modules
define drmbase {[console = -1]}
device drm: drmbase
attach drm at drmbase
file   dev/pci/drm/drm_agpsupport.c	drm & agp
file   dev/pci/drm/drm_drv.c		drm	needs-flag
file   dev/pci/drm/drm_global.c		drm
file   dev/pci/drm/drm_hashtab.c	drm
file   dev/pci/drm/drm_irq.c		drm
file   dev/pci/drm/drm_memory.c		drm
file   dev/pci/drm/drm_mm.c		drm
file   dev/pci/drm/drm_crtc.c		drm
file   dev/pci/drm/drm_modes.c		drm
file   dev/pci/drm/drm_crtc_helper.c	drm
file   dev/pci/drm/drm_edid.c		drm
file   dev/pci/drm/drm_dp_helper.c	drm
file   dev/pci/drm/drm_fb_helper.c	drm
file   dev/pci/drm/drm_rect.c		drm
file   dev/pci/drm/drm_gem.c		drm
file   dev/pci/drm/drm_vma_manager.c	drm
file   dev/pci/drm/drm_linux.c		drm
file   dev/pci/drm/linux_hdmi.c		drm

define	ttm
file	dev/pci/drm/ttm/ttm_agp_backend.c	ttm & agp
file	dev/pci/drm/ttm/ttm_bo.c		ttm
file	dev/pci/drm/ttm/ttm_bo_manager.c	ttm
file	dev/pci/drm/ttm/ttm_bo_util.c		ttm
file	dev/pci/drm/ttm/ttm_bo_vm.c		ttm
file	dev/pci/drm/ttm/ttm_execbuf_util.c	ttm
file	dev/pci/drm/ttm/ttm_lock.c		ttm
file	dev/pci/drm/ttm/ttm_memory.c		ttm
file	dev/pci/drm/ttm/ttm_object.c		ttm
file	dev/pci/drm/ttm/ttm_page_alloc.c	ttm
file	dev/pci/drm/ttm/ttm_tt.c		ttm

device	inteldrm: agpint, drmbase, wsemuldisplaydev, rasops32, i2cbus, i2c_bitbang
attach	inteldrm at pci
file	dev/pci/drm/i915/i915_dma.c		inteldrm
file	dev/pci/drm/i915/i915_drv.c		inteldrm
file	dev/pci/drm/i915/i915_gem.c		inteldrm
file	dev/pci/drm/i915/i915_gem_context.c	inteldrm
file	dev/pci/drm/i915/i915_gem_evict.c	inteldrm
file	dev/pci/drm/i915/i915_gem_execbuffer.c	inteldrm
file	dev/pci/drm/i915/i915_gem_gtt.c		inteldrm
file	dev/pci/drm/i915/i915_gem_stolen.c	inteldrm
file	dev/pci/drm/i915/i915_gem_tiling.c	inteldrm
file	dev/pci/drm/i915/i915_gpu_error.c	inteldrm
file	dev/pci/drm/i915/i915_irq.c		inteldrm
file	dev/pci/drm/i915/i915_suspend.c		inteldrm
file	dev/pci/drm/i915/intel_bios.c		inteldrm
file	dev/pci/drm/i915/intel_crt.c		inteldrm
file	dev/pci/drm/i915/intel_ddi.c		inteldrm
file	dev/pci/drm/i915/intel_display.c	inteldrm
file	dev/pci/drm/i915/intel_dp.c		inteldrm
file	dev/pci/drm/i915/intel_dvo.c		inteldrm
file	dev/pci/drm/i915/intel_fbdev.c		inteldrm
file	dev/pci/drm/i915/intel_hdmi.c		inteldrm
file	dev/pci/drm/i915/intel_i2c.c		inteldrm
file	dev/pci/drm/i915/intel_lvds.c		inteldrm
file	dev/pci/drm/i915/intel_modes.c		inteldrm
file	dev/pci/drm/i915/intel_opregion.c	inteldrm
file	dev/pci/drm/i915/intel_overlay.c	inteldrm
file	dev/pci/drm/i915/intel_panel.c		inteldrm
file	dev/pci/drm/i915/intel_pm.c		inteldrm
file	dev/pci/drm/i915/intel_ringbuffer.c	inteldrm
file	dev/pci/drm/i915/intel_sdvo.c		inteldrm
file	dev/pci/drm/i915/intel_sideband.c	inteldrm
file	dev/pci/drm/i915/intel_sprite.c		inteldrm
file	dev/pci/drm/i915/intel_tv.c		inteldrm
file	dev/pci/drm/i915/intel_uncore.c		inteldrm
file	dev/pci/drm/i915/dvo_ch7017.c		inteldrm
file	dev/pci/drm/i915/dvo_ch7xxx.c		inteldrm
file	dev/pci/drm/i915/dvo_ivch.c		inteldrm
file	dev/pci/drm/i915/dvo_ns2501.c		inteldrm
file	dev/pci/drm/i915/dvo_sil164.c		inteldrm
file	dev/pci/drm/i915/dvo_tfp410.c		inteldrm

device	radeondrm: drmbase, ttm, wsemuldisplaydev, rasops8, rasops32, i2cbus, i2c_bitbang
attach	radeondrm at pci
file	dev/pci/drm/radeon/atom.c			radeondrm
file	dev/pci/drm/radeon/atombios_crtc.c		radeondrm
file	dev/pci/drm/radeon/atombios_dp.c		radeondrm
file	dev/pci/drm/radeon/atombios_encoders.c		radeondrm
file	dev/pci/drm/radeon/atombios_i2c.c		radeondrm
file	dev/pci/drm/radeon/cayman_blit_shaders.c	radeondrm
file	dev/pci/drm/radeon/evergreen.c			radeondrm
file	dev/pci/drm/radeon/evergreen_blit_kms.c		radeondrm
file	dev/pci/drm/radeon/evergreen_blit_shaders.c	radeondrm
file	dev/pci/drm/radeon/evergreen_cs.c		radeondrm
file	dev/pci/drm/radeon/evergreen_hdmi.c		radeondrm
file	dev/pci/drm/radeon/ni.c				radeondrm
file	dev/pci/drm/radeon/r100.c			radeondrm
file	dev/pci/drm/radeon/r200.c			radeondrm
file	dev/pci/drm/radeon/r300.c			radeondrm
file	dev/pci/drm/radeon/r420.c			radeondrm
file	dev/pci/drm/radeon/r520.c			radeondrm
file	dev/pci/drm/radeon/r600.c			radeondrm
file	dev/pci/drm/radeon/r600_audio.c			radeondrm
file	dev/pci/drm/radeon/r600_blit_kms.c		radeondrm
file	dev/pci/drm/radeon/r600_blit_shaders.c		radeondrm
file	dev/pci/drm/radeon/r600_cs.c			radeondrm
file	dev/pci/drm/radeon/r600_hdmi.c			radeondrm
#file	dev/pci/drm/radeon/radeon_acpi.c		radeondrm
file	dev/pci/drm/radeon/radeon_agp.c			radeondrm
file	dev/pci/drm/radeon/radeon_asic.c		radeondrm
file	dev/pci/drm/radeon/radeon_atombios.c		radeondrm
file	dev/pci/drm/radeon/radeon_benchmark.c		radeondrm
file	dev/pci/drm/radeon/radeon_bios.c		radeondrm
file	dev/pci/drm/radeon/radeon_clocks.c		radeondrm
file	dev/pci/drm/radeon/radeon_combios.c		radeondrm
file	dev/pci/drm/radeon/radeon_connectors.c		radeondrm
file	dev/pci/drm/radeon/radeon_cs.c			radeondrm
file	dev/pci/drm/radeon/radeon_cursor.c		radeondrm
file	dev/pci/drm/radeon/radeon_device.c		radeondrm
file	dev/pci/drm/radeon/radeon_display.c		radeondrm
file	dev/pci/drm/radeon/radeon_encoders.c		radeondrm
file	dev/pci/drm/radeon/radeon_fb.c			radeondrm
file	dev/pci/drm/radeon/radeon_fence.c		radeondrm
file	dev/pci/drm/radeon/radeon_gart.c		radeondrm
file	dev/pci/drm/radeon/radeon_gem.c			radeondrm
file	dev/pci/drm/radeon/radeon_i2c.c			radeondrm
file	dev/pci/drm/radeon/radeon_irq_kms.c		radeondrm
file	dev/pci/drm/radeon/radeon_kms.c			radeondrm
file	dev/pci/drm/radeon/radeon_legacy_crtc.c		radeondrm
file	dev/pci/drm/radeon/radeon_legacy_encoders.c	radeondrm
file	dev/pci/drm/radeon/radeon_legacy_tv.c		radeondrm
file	dev/pci/drm/radeon/radeon_object.c		radeondrm
file	dev/pci/drm/radeon/radeon_pm.c			radeondrm
#file	dev/pci/drm/radeon/radeon_prime.c		radeondrm
file	dev/pci/drm/radeon/radeon_ring.c		radeondrm
file	dev/pci/drm/radeon/radeon_sa.c			radeondrm
file	dev/pci/drm/radeon/radeon_semaphore.c		radeondrm
file	dev/pci/drm/radeon/radeon_test.c		radeondrm
#file	dev/pci/drm/radeon/radeon_trace_points.c	radeondrm
file	dev/pci/drm/radeon/radeon_ttm.c			radeondrm
file	dev/pci/drm/radeon/rs400.c			radeondrm
file	dev/pci/drm/radeon/rs600.c			radeondrm
file	dev/pci/drm/radeon/rs690.c			radeondrm
file	dev/pci/drm/radeon/rv515.c			radeondrm
file	dev/pci/drm/radeon/rv770.c			radeondrm
file	dev/pci/drm/radeon/si.c				radeondrm
file	dev/pci/drm/radeon/si_blit_shaders.c		radeondrm
@


1.34
log
@Make inteldrm(4) attach to pci(4) instead of vga(4) just like radeondrm(4).
This is needed for machines where Intel graphics isn't the primary graphics
device and on systems with UEFI firmware that put the device in non-VGA mode.

ok jsg@@
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.33 2015/09/23 23:12:11 kettenis Exp $
d22 2
@


1.33
log
@Update inteldrm to the code from Linux 3.14.52 (which corresponds to
commit 48f8f36a6c8018c2b36ea207aaf68ef5326c5075 on the linux-3.14.y
branch of the linux-stable tree).  This brings preliminary support for
the GPU on Intel's Broadwell CPUs.  Don't expect these to work
perfectly yet.  There are some remaining issues with older hardware as
well, but no significant regressions have been uncovered.

This also updates some of drm core code.  The radeondrm code remains
based on Linux 3.8 with some minimal canges to adjust to changes in
the core drm APIs.

Joint effort with jsg@@, who did the initial update of the relevant drm
core bits.  Committing this early to make sure it gets more testing
and make it possible for others to help getting the remaining wrinkles
straightened out.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.32 2015/04/05 11:53:53 kettenis Exp $
d38 2
a39 2
device	inteldrm: drmbase, wsemuldisplaydev, rasops32, i2cbus, i2c_bitbang
attach	inteldrm at drmdev
@


1.32
log
@Another round of reducing diffs with Linux.  This one moves the various
copy_to_user and copy_from_user functions into drm_linux.h and uses them
instead of copyin/copyout and DRM_COPY_*.  Also move the timespec functions,
and put i915_gem_object_is_purgable() where it belongs.

Uncovered a bug where the arguments to copyout() were in the wrong order.

ok jsg@@
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.31 2014/03/09 07:42:29 jsg Exp $
d21 1
d23 1
d47 1
d49 1
d58 1
a58 1
file	dev/pci/drm/i915/intel_fb.c		inteldrm
d69 1
d72 1
@


1.31
log
@remove dri1 interfaces
discussed with kettenis some time last year
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.30 2014/02/23 09:36:52 kettenis Exp $
d21 1
@


1.30
log
@Give drm(4) a console locator just like wsdisplay(4) such that we can make
sure /dev/drm0 always matches the primary display.

ok mpi@@
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.29 2013/08/14 02:49:19 jsg Exp $
a8 2
file   dev/pci/drm/drm_bufs.c		drm
file   dev/pci/drm/drm_context.c	drm
a12 1
file   dev/pci/drm/drm_lock.c		drm
a14 1
file   dev/pci/drm/drm_scatter.c	drm
@


1.29
log
@drm_heap.c is no longer needed
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.28 2013/08/13 23:45:05 jsg Exp $
d5 1
a5 1
define drmbase {}
@


1.28
log
@ati_pcigart.c is no longer needed
ok kettenis@@
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.27 2013/08/12 04:11:52 jsg Exp $
a78 1
file	dev/pci/drm/drm_heap.c          		radeondrm
@


1.27
log
@Add a port of the TTM and Radeon DRM code from Linux 3.8.13.
Includes kernel modesetting, framebuffer console and support
for newer hardware.

Firmware needs to be present for acceleration and in some cases
modesetting to work.  It can be installed via fw_update
or manually via pkg_add.

With lots of help from kettenis@@ some macppc bits from mpi@@
and some ttm refcount/queue bits from FreeBSD.

Thanks to M:Tier and the OpenBSD Foundation for sponsoring this work.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.26 2013/08/07 00:04:27 jsg Exp $
a78 1
file	dev/pci/drm/ati_pcigart.c			radeondrm
@


1.26
log
@add support for hardware contexts on recent intel hardware
based on the code in linux 3.8.13
ok kettenis@@
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.25 2013/03/31 13:30:25 kettenis Exp $
d8 1
a8 1
file   dev/pci/drm/drm_agpsupport.c	drm
d12 2
d26 13
d77 67
a143 13
device	radeondrm: drmbase
attach	radeondrm at drmdev
file	dev/pci/drm/ati_pcigart.c	radeondrm
file	dev/pci/drm/r300_cmdbuf.c	radeondrm
file	dev/pci/drm/r600_blit.c		radeondrm
file	dev/pci/drm/r600_blit_shaders.c	radeondrm
file	dev/pci/drm/radeon_cp.c		radeondrm
file	dev/pci/drm/radeon_cs.c         radeondrm
file	dev/pci/drm/radeon_drv.c	radeondrm
file	dev/pci/drm/radeon_irq.c	radeondrm
file	dev/pci/drm/radeon_mem.c	radeondrm
file	dev/pci/drm/radeon_state.c	radeondrm
file	dev/pci/drm/drm_heap.c          radeondrm
@


1.25
log
@Unbreak the build on amd64 by making sure that inteldrm pulls in the generic
i2c bit-banging code.  Requires us to move around the i2c_bitbang define.
Also move the onewire_bitbang define to be close to i2c_bitbang since they
are similar.

ok jsing@@
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.24 2013/03/18 12:36:51 jsg Exp $
d29 1
@


1.24
log
@Significantly increase the wordlist for ddb hangman,
and update our device independent DRM code and the Intel DRM code
to be mostly in sync with Linux 3.8.3.  Among other things this
brings support for kernel modesetting and enables use of
the rings on gen6+ Intel hardware.

Based on some earlier work from matthieu@@ with some hints from FreeBSD
and with lots of help from kettenis@@ (including a beautiful accelerated
wscons framebuffer console!)

Thanks to M:Tier and the OpenBSD Foundation for sponsoring this work.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.23 2012/05/19 18:02:53 kettenis Exp $
d24 1
a24 1
device	inteldrm: drmbase, wsemuldisplaydev, rasops32
@


1.23
log
@Split out the suspend/resume code into its own file to make it possible to
diff it against the Linux kernel sources.  Fix a few bugs revealed by doing
such a diff.  Tested by myself and a few others on 915, 945, 965 and
6-series.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.22 2011/09/22 12:24:19 matthieu Exp $
d15 1
d17 6
d24 1
a24 1
device	inteldrm: drmbase
d26 34
a59 3
file	dev/pci/drm/i915_drv.c		inteldrm
file	dev/pci/drm/i915_irq.c		inteldrm
file	dev/pci/drm/i915_suspend.c	inteldrm
@


1.22
log
@Fix white space and tabs here. ok miod@@, oga@@
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.21 2011/05/30 21:50:46 oga Exp $
d21 1
@


1.21
log
@Add RADEON_CS ioctl support for r600 and r700.

This is a faked up version of the gem command submission method for r600
required for OpenGL support on these chipsets.

Currently support is not perfect. since these chips have a rather funky
ringbuffer based interrupt method which this code does not yet support so
interrupt based polling methods must be turned off in mesa.

I've not found a good way which to do that per-driver, so until I work
that out I the following .drirc (or /etc/drirc) chunk (provided by
Brynet after I was too slack to provide it myself) will be needed:

<driconf>
        <device screen="0" driver="r600">
                <application name="all">
                        <option name="fthrottle_mode" value="0"/>
                        <option name="vblank_mode" value="0"/>
                </application>
        </device>
</driconf>


Tested by many on tech@@. While it provided more problems, this diff made
espie@@ stop nagging me when he finally found out it existed.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.20 2010/05/25 17:15:49 oga Exp $
d8 8
a15 8
file   dev/pci/drm/drm_agpsupport.c    drm
file   dev/pci/drm/drm_bufs.c          drm
file   dev/pci/drm/drm_context.c       drm
file   dev/pci/drm/drm_drv.c           drm	needs-flag
file   dev/pci/drm/drm_irq.c           drm
file   dev/pci/drm/drm_lock.c          drm
file   dev/pci/drm/drm_memory.c        drm
file   dev/pci/drm/drm_scatter.c       drm
d18 1
a18 1
attach	inteldrm at drmdev 
@


1.20
log
@Remove the DRI1 code paths from inteldrm as promised two weeks ago.

We no longer support these paths, only memory managed mode is now allowed.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.19 2010/05/24 01:19:19 oga Exp $
d29 1
@


1.19
log
@Remove the drm drivers that are not enabled (and have never been so).

For now they are unmaintained, and work on kernel modesetting has very
large inferface changes needing to be made. Also, when the radeon driver
has been converted over, we will no longer support X with the DRI1
protocol, only DRI2.

When the upheaval has finished, these drivers may be brought back after
work to switch them to DRI2 style memory management and kernel
modesetting has been done, but until then they are unsupported and
probably broken (i know at least two of them have been reported broken
before now). ragedrm will likely come back as a component of radeon
(their interfaces are still fairly similar). The other drivers require
rewriting.

I have been threatening to do this for over a year. Discussed with
deraadt@@ and matthieu@@ at various points since then.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.18 2010/03/27 00:09:50 oga Exp $
a19 1
file	dev/pci/drm/i915_dma.c		inteldrm
@


1.18
log
@DRM for R600 and R700 chipsets.

note, only the pcidevs for those chipsets that have been tested are
enabled for now. Please contact me if you have a r600 or r700 that does
not attach radeondrm. Only the 2D/Xv bits are here. I'm ambivalent about
the implementation of the RADEON_CS ioctl for OpenGL since that was
originally kernel-modesetting only. When we update mesa I shall think
about (and test) it.

Tested by quite a number. Zero bad reports. Nagged perpetually by
robert@@ (and probably others) for months now.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.17 2009/04/06 20:56:25 oga Exp $
a11 1
file   dev/pci/drm/drm_heap.c          radeondrm | sisdrm
a22 23
device	machdrm: drmbase
attach	machdrm at drmdev
file	dev/pci/drm/mach64_dma.c	machdrm
file	dev/pci/drm/mach64_drv.c	machdrm
file	dev/pci/drm/mach64_irq.c	machdrm
file	dev/pci/drm/mach64_state.c	machdrm

device	mgadrm: drmbase
attach	mgadrm at drmdev
file	dev/pci/drm/mga_dma.c		mgadrm
file	dev/pci/drm/mga_drv.c		mgadrm
file	dev/pci/drm/mga_irq.c		mgadrm
file	dev/pci/drm/mga_state.c		mgadrm
file	dev/pci/drm/mga_warp.c		mgadrm

device	ragedrm: drmbase
attach	ragedrm at drmdev
file	dev/pci/drm/ati_pcigart.c	ragedrm | radeondrm
file	dev/pci/drm/r128_cce.c		ragedrm
file	dev/pci/drm/r128_drv.c		ragedrm
file	dev/pci/drm/r128_irq.c		ragedrm
file	dev/pci/drm/r128_state.c	ragedrm

d25 1
d34 1
a34 14

device	savagedrm: drmbase
attach	savagedrm at drmdev
file	dev/pci/drm/savage_bci.c	savagedrm
file	dev/pci/drm/savage_drv.c	savagedrm
file	dev/pci/drm/savage_state.c	savagedrm

device	sisdrm: drmbase
attach	sisdrm at drmdev
file	dev/pci/drm/sis_drv.c		sisdrm

device	tdfxdrm: drmbase
attach	tdfxdrm at drmdev
file	dev/pci/drm/tdfx_drv.c		tdfxdrm
@


1.17
log
@Turns out that the intel version of the heap interface isn't used
anywhere. And hasn't been for a long time.

The ddx sets up the heap (so just always pass that call and do nothing),
but nothing that touches inteldrm actually uses the other ioctls. So
just kill them and have one lese thing to worry about. Still got sis and
radeon using the common code though.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.16 2009/04/06 04:58:09 oga Exp $
d50 2
@


1.16
log
@sisdrm depends on the heap interface too, now.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.15 2009/04/06 04:45:19 oga Exp $
d12 1
a12 1
file   dev/pci/drm/drm_heap.c          inteldrm | radeondrm | sisdrm
a22 1
file	dev/pci/drm/i915_mem.c		inteldrm
@


1.15
log
@sisdrm is disabled. That does not mean that the code doesn't offend me.

This driver is a very thin wrapper for doling out memory to userland,
everything else is handled by the userland drivers, therefore I really
want to rewrite this driver before even thinking about enabling it,
userland mapping graphics registers makes it hard for me to sleep at
night.

Anyway, remove a huge pile of scary code by switching the memory
allocation ioctls to user the drm_heap.c code instead of the very
complicated mess that it uses right now, probably saves some space, too.

Turns out linux made some similar (but far from identical) changes ages ago,
They did more, that may come later.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.14 2009/03/27 19:00:45 oga Exp $
d12 1
a12 1
file   dev/pci/drm/drm_heap.c          inteldrm | radeondrm
@


1.14
log
@Rework the dma buffer api a bit to make it smaller and to have less
duplicated code. Also, switch the dma_lock to a rwlock (it never should
have been a spinlock) and move it and some other accounting data into
the dma structure, not the main softc.

Finally, the funcitons in drm_dma are tiny, move them in with the rest
of the dma_bufs api in drm_bufs and remove the file.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.13 2009/03/26 22:40:06 oga Exp $
a65 2
file	dev/pci/drm/sis_ds.c		sisdrm
file	dev/pci/drm/sis_mm.c		sisdrm
@


1.13
log
@Rework how we deal with the list of per-open datastructures, and the
auth list.  now we only need the one tree. Makes things a little neater,
and smaller.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.12 2009/02/15 20:10:24 oga Exp $
a10 1
file   dev/pci/drm/drm_dma.c           drm
@


1.12
log
@Remove drm_pci_alloc and associated definitions.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.11 2009/02/05 00:25:51 oga Exp $
a8 1
file   dev/pci/drm/drm_auth.c          drm
@


1.11
log
@Merge the static block allocation code from {i915,radeon}_mem.c into
non-static code that's shared between both.  While i'm here convert them
to TAILQ.

Eventually, both of these will die, but until then I'd rather shave the
space in the kernel.

Tested on radeon and intel.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.10 2009/01/29 11:50:16 oga Exp $
a17 1
file   dev/pci/drm/drm_pci.c           drm
@


1.10
log
@Similar to my last commit, it's stupid to have a file with two very
small functions in it. Move them to main driver file.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.9 2009/01/29 11:44:05 oga Exp $
d14 1
@


1.9
log
@Move drmmmap to the main driver file.  It's stupid to have a file with
one (not particlarly large) function in it.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.8 2009/01/29 11:18:16 oga Exp $
a13 1
file   dev/pci/drm/drm_ioctl.c         drm
@


1.8
log
@Rip out the drm_drawable support. There is no need for the xserver to
push cliprects into the kernel anymore so no op the ioctls. The only
consumer of this information died a couple of months ago.

When i've got removal of these calls from userland upstream i'm going to
remove them from the interface entirely.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.7 2008/11/22 21:26:48 oga Exp $
a19 1
file   dev/pci/drm/drm_vm.c            drm
@


1.7
log
@Move the drm drivers over from:

vga1 at pci0
inteldrm0 at vga1

to

vga1 at pci0
inteldrm0 at vga1
drm0 at inteldrm0

i.e. a similar scheme to audio(4) where the interface attaches on top of
the wildly different drivers. This helps to clean up the code a lot
(more is coming) and help me start to move drm to being essentially bus
independent, which will help in the future.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.6 2008/11/17 00:40:04 oga Exp $
a12 1
file   dev/pci/drm/drm_drawable.c      drm
@


1.6
log
@drm advertises a read and poll method. this was there to prevent errrors
on rather old xservers. Said old xservers haven't been around in quite a
long time so just remove them.

Since the only function left in drm_fops.c is a small helper function,
just move it to drm_drv.c and nuke the redundant file.

no one objected when I said I was going to do this.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.5 2008/11/11 21:06:18 oga Exp $
d5 17
a21 15
define drmbase
file   dev/pci/drm/drm_agpsupport.c    drmbase
file   dev/pci/drm/drm_auth.c          drmbase
file   dev/pci/drm/drm_bufs.c          drmbase
file   dev/pci/drm/drm_context.c       drmbase
file   dev/pci/drm/drm_dma.c           drmbase
file   dev/pci/drm/drm_drawable.c      drmbase
file   dev/pci/drm/drm_drv.c           drmbase needs-flag
file   dev/pci/drm/drm_ioctl.c         drmbase
file   dev/pci/drm/drm_irq.c           drmbase
file   dev/pci/drm/drm_lock.c          drmbase
file   dev/pci/drm/drm_memory.c        drmbase
file   dev/pci/drm/drm_pci.c           drmbase
file   dev/pci/drm/drm_scatter.c       drmbase
file   dev/pci/drm/drm_vm.c            drmbase
d24 1
a24 1
attach	inteldrm at drm
d31 1
a31 1
attach	machdrm at drm
d38 1
a38 1
attach	mgadrm at drm
d46 1
a46 1
attach	ragedrm at drm
d54 1
a54 1
attach	radeondrm at drm
d63 1
a63 1
attach	savagedrm at drm
d69 1
a69 1
attach	sisdrm at drm
d75 1
a75 1
attach	tdfxdrm at drm
@


1.5
log
@Remove the (unworking to the point it doens't even compile) viadrm driver.

Eventually a drm driver for via hardware may be written, but it will be
utterly different to this one.

No one objected, ok matthieu@@.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.4 2008/08/28 00:19:27 oga Exp $
a12 1
file   dev/pci/drm/drm_fops.c          drmbase
@


1.4
log
@replace usage of drm_memrange with extent(9). No functional change, but
should shrink the kernel somewhat. For some strange reason I was unaware
of this api when I pulled in these changes.

tested by myself and Paul de Weerd, thanks!
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.3 2008/06/26 17:01:03 oga Exp $
a75 11

device	viadrm: drmbase
attach	viadrm at drm
file	dev/pci/drm/via_drv.c		viadrm
file	dev/pci/drm/via_dma.c		viadrm
file	dev/pci/drm/via_ds.c		viadrm
file	dev/pci/drm/via_irq.c		viadrm
file	dev/pci/drm/via_map.c		viadrm
file	dev/pci/drm/via_mm.c		viadrm
file	dev/pci/drm/via_verifier.c	viadrm
file	dev/pci/drm/via_video.c		viadrm
@


1.3
log
@Kill drm_sysctl.c and all references to it.

All the code was ifdefed out anyway and it wasn't really useful.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.2 2008/06/12 19:14:53 oga Exp $
a17 1
file   dev/pci/drm/drm_memrange.c      drmbase
@


1.2
log
@The mmap offsets for memory buffers currently are the kernel virtual
address.  This is just plain wrong. scatter/gather on amd64 didn't work
here, since char device mmap doesn't take negative offsets so higher
kvas fail.

Instead, prematurely import drm_memrange which is needed for the memory
managers (GEM or TTM), and is used to manage GART space. Then, horribly
abuse it to allocate mmap offsets, fixes up the issues.

"just commit it" art@@.
@
text
@d2 1
a2 1
# $OpenBSD: files.drm,v 1.1 2007/11/28 23:56:04 deraadt Exp $
a20 1
file   dev/pci/drm/drm_sysctl.c        drmbase
@


1.1
log
@oga just showed the worst case of "commit and run for beer" i've ever
seen.  unbreak the tree by adding a missing file (hope it is the only one)
@
text
@d2 1
a2 1
# $OpenBSD$
d18 1
@

