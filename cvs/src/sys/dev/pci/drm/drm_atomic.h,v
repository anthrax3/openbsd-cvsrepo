head	1.15;
access;
symbols
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.11.0.8
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.8
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2017.01.24.02.28.17;	author visa;	state Exp;
branches;
next	1.14;
commitid	Co0ej12l7nGroAdw;

1.14
date	2016.04.05.08.17.34;	author kettenis;	state Exp;
branches;
next	1.13;
commitid	0xei6AGR4QN3d0vo;

1.13
date	2015.09.23.23.12.11;	author kettenis;	state Exp;
branches;
next	1.12;
commitid	lQlppvmETCN49oZe;

1.12
date	2015.04.18.14.47.34;	author jsg;	state Exp;
branches;
next	1.11;
commitid	c1fUeeFWMNg4COgR;

1.11
date	2013.10.01.20.06.57;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2013.09.25.10.13.30;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2013.09.24.21.18.57;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2013.08.12.04.11.52;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.18.12.36.51;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2011.06.02.18.22.00;	author weerd;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.23.15.29.18;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.29.13.07.06;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.29.13.05.20;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.27.19.45.29;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Use header <sys/atomic.h> rather than <machine/atomic.h> in MI code.

OK mpi@@ deraadt@@
@
text
@/* $OpenBSD: drm_atomic.h,v 1.14 2016/04/05 08:17:34 kettenis Exp $ */
/**
 * \file drm_atomic.h
 * Atomic operations used in the DRM which may or may not be provided by the OS.
 * 
 * \author Eric Anholt <anholt@@FreeBSD.org>
 */

/*-
 * Copyright 2004 Eric Anholt
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#include <sys/atomic.h>

typedef uint32_t atomic_t;

#define atomic_set(p, v)	(*(p) = (v))
#define atomic_read(p)		(*(p))
#define atomic_inc(p)		__sync_fetch_and_add(p, 1)
#define atomic_dec(p)		__sync_fetch_and_sub(p, 1)
#define atomic_add(n, p)	__sync_fetch_and_add(p, n)
#define atomic_sub(n, p)	__sync_fetch_and_sub(p, n)
#define atomic_add_return(n, p) __sync_add_and_fetch(p, n)
#define atomic_sub_return(n, p) __sync_sub_and_fetch(p, n)
#define atomic_inc_return(v)	atomic_add_return(1, (v))
#define atomic_dec_return(v)	atomic_sub_return(1, (v))
#define atomic_dec_and_test(v)	(atomic_dec_return(v) == 0)
#define atomic_inc_and_test(v)	(atomic_inc_return(v) == 0)

static __inline int
atomic_xchg(volatile int *v, int n)
{
	__sync_synchronize();
	return __sync_lock_test_and_set(v, n);
}

static __inline int
atomic_add_unless(volatile int *v, int n, int u)
{
	int o = *v;

	do {
		o = *v;
		if (o == u)
			return 0;
	} while (__sync_val_compare_and_swap(v, o, o +n) != o);

	return 1;
}

#ifdef __LP64__
typedef uint64_t atomic64_t;

#define atomic64_set(p, v)	(*(p) = (v))
#define atomic64_read(p)	(*(p))

static __inline int64_t
atomic64_xchg(volatile int64_t *v, int64_t n)
{
	__sync_synchronize();
	return __sync_lock_test_and_set(v, n);
}

#else

typedef struct {
	volatile uint64_t val;
	struct mutex lock;
} atomic64_t;

static __inline void
atomic64_set(atomic64_t *v, int64_t i)
{
	mtx_init(&v->lock, IPL_HIGH);
	v->val = i;
}

static __inline int64_t
atomic64_read(atomic64_t *v)
{
	int64_t val;

	mtx_enter(&v->lock);
	val = v->val;
	mtx_leave(&v->lock);

	return val;
}

static __inline int64_t
atomic64_xchg(atomic64_t *v, int64_t n)
{
	int64_t val;

	mtx_enter(&v->lock);
	val = v->val;
	v->val = n;
	mtx_leave(&v->lock);

	return val;
}
#endif

static inline int
atomic_inc_not_zero(atomic_t *p)
{
	if (*p == 0)
		return (0);

	*(p) += 1;
	return (*p);
}

/* FIXME */
#define atomic_set_int(p, bits)		atomic_setbits_int(p,bits)
#define atomic_set_mask(bits, p)	atomic_setbits_int(p,bits)
#define atomic_clear_int(p, bits)	atomic_clearbits_int(p,bits)
#define atomic_clear_mask(bits, p)	atomic_clearbits_int(p,bits)
#define atomic_fetchadd_int(p, n) __sync_fetch_and_add(p, n)
#define atomic_fetchsub_int(p, n) __sync_fetch_and_sub(p, n)

#if defined(__i386__) || defined(__amd64__)
static __inline int
atomic_cmpset_int(volatile u_int *dst, u_int exp, u_int src)
{
	int res = exp;

	__asm __volatile (
	"	lock ;			"
	"	cmpxchgl %1,%2 ;	"
	"       setz	%%al ;		"
	"	movzbl	%%al,%0 ;	"
	"1:				"
	"# atomic_cmpset_int"
	: "+a" (res)			/* 0 (result) */
	: "r" (src),			/* 1 */
	  "m" (*(dst))			/* 2 */
	: "memory");				 

	return (res);
}
#else /* __i386__ */
static __inline int
atomic_cmpset_int(__volatile__ u_int *dst, u_int old, u_int new)
{
	int s = splhigh();
	if (*dst==old) {
		*dst = new;
		splx(s);
		return 1;
	}
	splx(s);
	return 0;
}
#endif /* !__i386__ */

static __inline atomic_t
test_and_set_bit(u_int b, volatile void *p)
{
	int s = splhigh();
	unsigned int m = 1<<b;
	unsigned int r = *(volatile int *)p & m;
	*(volatile int *)p |= m;
	splx(s);
	return r;
}

static __inline void
clear_bit(u_int b, volatile void *p)
{
	atomic_clear_int(((volatile u_int *)p) + (b >> 5), 1 << (b & 0x1f));
}

static __inline void
set_bit(u_int b, volatile void *p)
{
	atomic_set_int(((volatile u_int *)p) + (b >> 5), 1 << (b & 0x1f));
}

static __inline int
test_bit(u_int b, volatile void *p)
{
	return !!(((volatile u_int *)p)[b >> 5] & (1 << (b & 0x1f)));
}

static __inline int
find_first_zero_bit(volatile void *p, int max)
{
	int b;
	volatile u_int *ptr = (volatile u_int *)p;

	for (b = 0; b < max; b += 32) {
		if (ptr[b >> 5] != ~0) {
			for (;;) {
				if ((ptr[b >> 5] & (1 << (b & 0x1f))) == 0)
					return b;
				b++;
			}
		}
	}
	return max;
}
@


1.14
log
@Add atomic_add_unless(), another strange linux interface.

ok jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: drm_atomic.h,v 1.13 2015/09/23 23:12:11 kettenis Exp $ */
d33 1
a33 1
#include <machine/atomic.h>
@


1.13
log
@Update inteldrm to the code from Linux 3.14.52 (which corresponds to
commit 48f8f36a6c8018c2b36ea207aaf68ef5326c5075 on the linux-3.14.y
branch of the linux-stable tree).  This brings preliminary support for
the GPU on Intel's Broadwell CPUs.  Don't expect these to work
perfectly yet.  There are some remaining issues with older hardware as
well, but no significant regressions have been uncovered.

This also updates some of drm core code.  The radeondrm code remains
based on Linux 3.8 with some minimal canges to adjust to changes in
the core drm APIs.

Joint effort with jsg@@, who did the initial update of the relevant drm
core bits.  Committing this early to make sure it gets more testing
and make it possible for others to help getting the remaining wrinkles
straightened out.
@
text
@d1 1
a1 1
/* $OpenBSD: drm_atomic.h,v 1.12 2015/04/18 14:47:34 jsg Exp $ */
d55 14
@


1.12
log
@another round of reducing the diff to linux
@
text
@d1 1
a1 1
/* $OpenBSD: drm_atomic.h,v 1.11 2013/10/01 20:06:57 kettenis Exp $ */
d122 1
@


1.11
log
@Emulate 64-bit atomic operations on 32-bit architectures by using a mutex.

ok mpi@@, jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: drm_atomic.h,v 1.10 2013/09/25 10:13:30 kettenis Exp $ */
d123 1
@


1.10
log
@Unbreak the tree; no 64-bit atomic operations on 32-bit architectures for now.

found out the hard way by chris@@ and mpi@@
@
text
@d1 1
a1 1
/* $OpenBSD: drm_atomic.h,v 1.9 2013/09/24 21:18:57 kettenis Exp $ */
d35 1
a35 1
/* Many of these implementations are rather fake, but good enough. */
a36 4
typedef u_int32_t atomic_t;
typedef u_int64_t atomic64_t;

/* FIXME */
d50 10
d63 2
a64 2
static __inline int
atomic_xchg(volatile int *v, int n)
d70 14
d85 13
a97 1
atomic64_xchg(volatile int64_t *v, int64_t n)
d99 1
a99 2
#if defined(__i386__) || defined(__powerpc__)
	int64_t o;
d101 4
a104 2
	o = *v;
	*v = n;
d106 2
a107 4
	return (o);
#else
	__sync_synchronize();
	return __sync_lock_test_and_set(v, n);
a108 1
}
@


1.9
log
@Make (almost all) atomic operations really atomic.
Potentially fixes a race/panic reported by claudio@@

ok jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: drm_atomic.h,v 1.8 2013/08/12 04:11:52 jsg Exp $ */
d67 8
d77 1
@


1.8
log
@Add a port of the TTM and Radeon DRM code from Linux 3.8.13.
Includes kernel modesetting, framebuffer console and support
for newer hardware.

Firmware needs to be present for acceleration and in some cases
modesetting to work.  It can be installed via fw_update
or manually via pkg_add.

With lots of help from kettenis@@ some macppc bits from mpi@@
and some ttm refcount/queue bits from FreeBSD.

Thanks to M:Tier and the OpenBSD Foundation for sponsoring this work.
@
text
@d1 1
a1 1
/* $OpenBSD: drm_atomic.h,v 1.7 2013/03/18 12:36:51 jsg Exp $ */
d45 8
a52 3
#define atomic_add(n, p)	(*(p) += (n))
#define atomic_fetchadd_int(p, n) __sync_fetch_and_add(p, n)
#define atomic_fetchsub_int(p, n) __sync_fetch_and_sub(p, n)
d58 1
a58 1
atomic_xchg(volatile int *p, int new)
d60 2
a61 6
	int old;

	old = *p;
	*p = new;

	return (old);
d65 1
a65 12
atomic64_xchg(volatile int64_t *p, int64_t new)
{
	int64_t old;

	old = *p;
	*p = new;

	return (old);
}

static inline int
atomic_add_return(int n, atomic_t *p)
d67 2
a68 2
	*(p) += (n);
	return  (*p);
a80 14
#define	atomic_inc_return(v)	atomic_add_return(1, (v))
#define	atomic_dec_return(v)	atomic_sub_return(1, (v))
#define	atomic_dec_and_test(v)	(atomic_dec_return(v) == 0)
#define	atomic_inc_and_test(v)	(atomic_inc_return(v) == 0)

#define atomic_sub(n, p)	(*(p) -= (n))

static __inline int
atomic_sub_return(int i, atomic_t *p)
{
	atomic_sub(i, p);
	return (*p);
}

a81 2
#define atomic_add_int(p, v)      *(p) += v
#define atomic_subtract_int(p, v) *(p) -= v
d84 2
@


1.7
log
@Significantly increase the wordlist for ddb hangman,
and update our device independent DRM code and the Intel DRM code
to be mostly in sync with Linux 3.8.3.  Among other things this
brings support for kernel modesetting and enables use of
the rings on gen6+ Intel hardware.

Based on some earlier work from matthieu@@ with some hints from FreeBSD
and with lots of help from kettenis@@ (including a beautiful accelerated
wscons framebuffer console!)

Thanks to M:Tier and the OpenBSD Foundation for sponsoring this work.
@
text
@d1 1
a1 1
/* $OpenBSD: drm_atomic.h,v 1.6 2011/06/02 18:22:00 weerd Exp $ */
a32 1
#ifdef __OpenBSD__
a33 1
#endif
d38 1
a39 8
#ifdef __FreeBSD__
#define atomic_set(p, v)	(*(p) = (v))
#define atomic_read(p)		(*(p))
#define atomic_inc(p)		atomic_add_int(p, 1)
#define atomic_dec(p)		atomic_subtract_int(p, 1)
#define atomic_add(n, p)	atomic_add_int(p, n)
#define atomic_sub(n, p)	atomic_subtract_int(p, n)
#else /* __FreeBSD__ */
d43 2
a44 2
#define atomic_inc(p)		(*(p) += 1)
#define atomic_dec(p)		(*(p) -= 1)
d46 27
d91 5
d97 8
a107 1
#ifdef __OpenBSD__
a109 5
#else
#define atomic_set_int(p, bits)   *(p) |= (bits)
#define atomic_clear_int(p, bits) *(p) &= ~(bits)
#endif
#endif /* !__FreeBSD__ */
a110 1
#if !defined(__FreeBSD_version) || (__FreeBSD_version < 500000)
a111 1
/* The extra atomic functions from 5.0 haven't been merged to 4.x */
a144 1
#endif /* !__FreeBSD_version || __FreeBSD_version < 500000 */
@


1.6
log
@Add $OpenBSD$ after oga said 'go ahead and fix that'

'go for it' oga@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d55 18
@


1.5
log
@fix another signed/unsigned slipt. no functional change. I hate this
header.

Found by Clang static analyser.
@
text
@d1 1
@


1.4
log
@Test bit is used like a boolean, so it must actually be a boolean.

This was causing swizzling on bit 17 swizzling intel IGDs when not
needed. Thanks to Brandon Mercer for testing.
@
text
@d138 1
a138 1
	volatile int *ptr = (volatile u_int *)p;
@


1.3
log
@Fix the drm_atomic macros to use unsigned int like they should.

pointed out by Clang static analyser.
@
text
@d131 1
a131 1
	return ((volatile u_int *)p)[b >> 5] & (1 << (b & 0x1f));
@


1.2
log
@Since the vtophys stuff was nuked, drm now works on amd64 too. Add the
relavent config goo.

DRM_NO_MTRR is still needed on amd64 since the mtrr apis differ between
it and i386.

ok kettenis@@.
@
text
@d91 1
a91 1
atomic_cmpset_int(__volatile__ int *dst, int old, int new)
d106 1
a106 1
test_and_set_bit(int b, volatile void *p)
d117 1
a117 1
clear_bit(int b, volatile void *p)
d119 1
a119 1
	atomic_clear_int(((volatile int *)p) + (b >> 5), 1 << (b & 0x1f));
d123 1
a123 1
set_bit(int b, volatile void *p)
d125 1
a125 1
	atomic_set_int(((volatile int *)p) + (b >> 5), 1 << (b & 0x1f));
d129 1
a129 1
test_bit(int b, volatile void *p)
d131 1
a131 1
	return ((volatile int *)p)[b >> 5] & (1 << (b & 0x1f));
d138 1
a138 1
	volatile int *ptr = (volatile int *)p;
@


1.1
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d68 1
a68 1
#if defined(__i386__)
@

