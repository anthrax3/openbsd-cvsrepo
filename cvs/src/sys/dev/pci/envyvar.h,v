head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.6
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.16.0.20
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.18
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.16
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.12
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.10
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.8
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.6
	OPENBSD_5_0:1.16.0.4
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.12.0.4
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4;
locks; strict;
comment	@ * @;


1.19
date	2015.08.30.08.52.26;	author ratchov;	state Exp;
branches;
next	1.18;
commitid	ZppKSHZA1jgaqGj5;

1.18
date	2015.08.28.15.50.18;	author ratchov;	state Exp;
branches;
next	1.17;
commitid	dXG2uH0XRa39yv2d;

1.17
date	2015.07.29.21.10.50;	author ratchov;	state Exp;
branches;
next	1.16;
commitid	TOIqvQTfhhpEIp7d;

1.16
date	2010.10.04.09.32.43;	author ratchov;	state Exp;
branches;
next	1.15;

1.15
date	2010.03.07.18.55.45;	author ratchov;	state Exp;
branches;
next	1.14;

1.14
date	2010.02.25.21.19.37;	author ratchov;	state Exp;
branches;
next	1.13;

1.13
date	2010.02.20.16.45.28;	author ratchov;	state Exp;
branches;
next	1.12;

1.12
date	2009.05.08.16.53.45;	author ratchov;	state Exp;
branches;
next	1.11;

1.11
date	2009.05.08.15.31.16;	author ratchov;	state Exp;
branches;
next	1.10;

1.10
date	2009.05.08.14.56.03;	author ratchov;	state Exp;
branches;
next	1.9;

1.9
date	2009.05.04.04.49.50;	author ratchov;	state Exp;
branches;
next	1.8;

1.8
date	2009.05.03.20.55.44;	author ratchov;	state Exp;
branches;
next	1.7;

1.7
date	2009.04.25.12.15.10;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2009.04.25.12.10.19;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2008.03.22.11.23.11;	author ratchov;	state Exp;
branches;
next	1.4;

1.4
date	2008.02.21.01.41.04;	author ratchov;	state Exp;
branches;
next	1.3;

1.3
date	2008.02.21.01.37.55;	author ratchov;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.28.18.25.21;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.28.13.42.31;	author ratchov;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Add the number of midi ports to the card description, and use it to
prevent cards with no midi connectors from attaching midi(4) devices.
@
text
@/*	$OpenBSD: envyvar.h,v 1.18 2015/08/28 15:50:18 ratchov Exp $	*/
/*
 * Copyright (c) 2007 Alexandre Ratchov <alex@@caoua.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef SYS_DEV_PCI_ENVYVAR_H
#define SYS_DEV_PCI_ENVYVAR_H

#include <sys/types.h>
#include <sys/device.h>
#include <sys/time.h>
#include <dev/audio_if.h>
#include <dev/midi_if.h>

struct envy_softc;

struct envy_buf {
	bus_dma_segment_t	seg;
	bus_dmamap_t		map;
	caddr_t			addr;
	size_t			size;
	unsigned int		swpos;
	unsigned int		bufsz;
	unsigned int		blksz;
};

struct envy_codec {
	char *name;
	int (*ndev)(struct envy_softc *);
	void (*devinfo)(struct envy_softc *, struct mixer_devinfo *, int);
	void (*get)(struct envy_softc *, struct mixer_ctrl *, int);
	int (*set)(struct envy_softc *, struct mixer_ctrl *, int);
};

struct envy_card {
	int subid;
	char *name;
	int nich;
	struct envy_codec *adc;
	int noch;
	struct envy_codec *dac;
	int nmidi;
	void (*init)(struct envy_softc *);
	void (*codec_write)(struct envy_softc *, int, int, int);
	unsigned char *eeprom;
};

struct envy_softc {
	struct device		dev;
	struct device	       *audio;
	int			isht;		/* is a Envy24HT ? */
	int			isac97;		/* is a Envy24HT AC97 ? */
	struct envy_buf		ibuf, obuf;
	pcitag_t		pci_tag;
	pci_chipset_tag_t	pci_pc;
	pci_intr_handle_t      *pci_ih;
	bus_dma_tag_t		pci_dmat;
	bus_space_tag_t		ccs_iot;
	bus_space_handle_t	ccs_ioh;
	bus_size_t		ccs_iosz;
	bus_space_tag_t		mt_iot;
	bus_space_handle_t	mt_ioh;
	bus_size_t		mt_iosz;
	int			iactive;	/* trigger_input called */
	int			oactive;	/* trigger_output called */
	int			ibusy;		/* input DMA started */
	int			obusy;		/* output DMA started */
#ifdef ENVY_DEBUG
	unsigned 		spurious;
	struct timespec		start_ts;
#define ENVY_NINTR		16
	unsigned 		nintr;
	struct envy_intr {
		int ipos, opos, st, mask, ctl, iactive, oactive;
		struct timespec ts;
	} intrs[ENVY_NINTR];
#endif
	struct envy_card       *card;
	unsigned char 		shadow[4][16];
#define ENVY_EEPROM_MAXSZ 32
	unsigned char		eeprom[ENVY_EEPROM_MAXSZ];
	struct ac97_codec_if   *codec_if;
	struct ac97_host_if	host_if;
	enum ac97_host_flags	codec_flags;
	void (*iintr)(void *);
	void *iarg;
	void (*ointr)(void *);
	void *oarg;
#if NMIDI > 0
	void (*midi_in)(void *, int);
	void (*midi_out)(void *);
	void *midi_arg;
	struct device *midi;
	int midi_isopen;
#endif
};

#define ENVY_MIX_CLASSIN	0
#define ENVY_MIX_CLASSOUT	1
#define ENVY_MIX_CLASSMON	2

#define ENVY_MIX_NCLASS		3
#define ENVY_MIX_NOUTSRC	10
#define ENVY_MIX_NMONITOR	20

#define ENVY_MIX_OUTSRC_LINEIN	0
#define ENVY_MIX_OUTSRC_SPDIN	8
#define ENVY_MIX_OUTSRC_DMA	10
#define ENVY_MIX_OUTSRC_MON	11

#endif /* !defined(SYS_DEV_PCI_ENVYVAR_H) */
@


1.18
log
@Disable interrupts while the midi uart is not in use. Avoids generating
unused interrupts when a chatty peripheral is connected but is not
used.
@
text
@d1 1
a1 1
/*	$OpenBSD: envyvar.h,v 1.17 2015/07/29 21:10:50 ratchov Exp $	*/
d54 1
@


1.17
log
@Use DMA pointer determine the number of times the audio(4) layer has
to advance in time. This is needed to properly recover, when
interrupts are blocked for too long. Fixes permanent distortion on MP
systems.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: envyvar.h,v 1.16 2010/10/04 09:32:43 ratchov Exp $	*/
d105 1
@


1.16
log
@add support for midi(4) ports to envy(4)
@
text
@d1 1
a1 1
/*	$OpenBSD: envyvar.h,v 1.15 2010/03/07 18:55:45 ratchov Exp $	*/
d34 3
@


1.15
log
@Don't stop DMA in envy_halt_intput() and/or envy_halt_output().
Instead wait for the next interrupt and stop DMA in the interrupt
handler. This prevents the chip from entering a unstable state
in which DMA doesn't start cleanly.
@
text
@d1 1
a1 1
/*	$OpenBSD: envyvar.h,v 1.14 2010/02/25 21:19:37 ratchov Exp $	*/
d25 1
d97 6
@


1.14
log
@Remove trailing spaces,
from Alexandr Shadchin <alexandr.shadchin at gmail.com>, thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD: envyvar.h,v 1.13 2010/02/20 16:45:28 ratchov Exp $	*/
d23 1
d71 14
@


1.13
log
@Add necessary bits to support AC97 codecs in envy and add support
for the VIA Tremor 5.1 card.

From Alexandr Shadchin <alexandr.shadchin at gmail.com>, thanks!

help from oga@@
@
text
@d1 1
a1 1
/*	$OpenBSD: envyvar.h,v 1.12 2009/05/08 16:53:45 ratchov Exp $	*/
d65 1
a65 1
	bus_space_handle_t      ccs_ioh;
d68 1
a68 1
	bus_space_handle_t      mt_ioh;
@


1.12
log
@add support for the ak4358 DAC used in ESI Julia cards. There are
two mono line0 and line1 knobs rather than a single stereo knob
because that's how the routing control (not exposed for ht chips yet)
works.
@
text
@d1 1
a1 1
/*	$OpenBSD: envyvar.h,v 1.11 2009/05/08 15:31:16 ratchov Exp $	*/
d58 1
d74 3
@


1.11
log
@rename few functions and macros, fix style
@
text
@d1 1
a1 1
/*	$OpenBSD: envyvar.h,v 1.10 2009/05/08 14:56:03 ratchov Exp $	*/
a53 4
struct envy_ak {
	unsigned char reg[16];
};

d70 1
a70 1
	struct envy_ak		ak[4];
@


1.10
log
@use the number of channels rather than the number of stereo dacs/adcs,
because there will support for non-stereo dacs/adcs soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: envyvar.h,v 1.9 2009/05/04 04:49:50 ratchov Exp $	*/
d50 1
a50 1
	void (*ak_write)(struct envy_softc *, int, int, int);
@


1.9
log
@put codec-specific mixer bits in their own routines and
reference the code in global envy_card structures. Allows the same
mixer code to be shared across differents cards. Will ease adding
codec-specific knobs when adding support for new cards.
@
text
@d1 1
a1 1
/*	$OpenBSD: envyvar.h,v 1.8 2009/05/03 20:55:44 ratchov Exp $	*/
d36 1
a36 1
	int ndev;
d45 1
a45 1
	int nadc;
d47 1
a47 1
	int ndac;
@


1.8
log
@reorganize mixer bits to allow, supporting codec-dependent mixer
controls later. Also stop using ``next'' and ``prev'' pointers,
since they make impossible exposing ``source'' knobs for streams
that do not have ``gain'' knobs. This implies renaming ``xxx.source''
knobs to ``xxx_source''. Besides that, no behaviour change.
@
text
@d1 1
a1 1
/*	$OpenBSD: envyvar.h,v 1.7 2009/04/25 12:15:10 ratchov Exp $	*/
d34 8
d45 4
a48 1
	int nadc, ndac;
a89 3
#define ENVY_MIX_NILVL		2
#define ENVY_MIX_NOLVL		2
#define ENVY_MIX_NOMUTE		1
@


1.7
log
@add basic support for Envy24HT chips and for ``ESI Juli@@''
cards using it. No mixer yet.

ok jakemsr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: envyvar.h,v 1.5 2008/03/22 11:23:11 ratchov Exp $	*/
d75 7
a81 6
#define ENVY_MIX_OUTSRC		3
#define ENVY_MIX_MONITOR	13
#define ENVY_MIX_ILVL(nak)	33
#define ENVY_MIX_OLVL(nak)	(ENVY_MIX_ILVL(nak) + 2 * (nak))
#define ENVY_MIX_OMUTE(nak)	(ENVY_MIX_OLVL(nak) + 2 * (nak))
#define ENVY_MIX_INVAL(nak)	(ENVY_MIX_OMUTE(nak) + (nak))
@


1.6
log
@start splitting the driver in two parts: one specific to the
generic Envy24 chip common to all cards and another part specific
to the cards. This will ease adding support for other card models.

ok jakemsr@@
@
text
@d50 1
@


1.5
log
@remove unused fields from envy_softc structure, no functional change
@
text
@d1 1
a1 1
/*	$OpenBSD: envyvar.h,v 1.4 2008/02/21 01:41:04 ratchov Exp $	*/
d25 2
d34 9
a42 3
/*
 * ak4524 codecs
 */
d44 1
a44 1
	unsigned char reg[8];	/* shadow for ak4524 registers */
d61 1
d63 2
@


1.4
log
@since now we have volume knobs, use next/prev pointers to attach
outputs.lineN.source to them. Rename various labels to use "standard" names,
ie AudioNxxx macros.

ok jakemsr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: envyvar.h,v 1.3 2008/02/21 01:37:55 ratchov Exp $	*/
a38 14
/*
 * the envy24 have multiple components with their respective mixers
 * depending on the configuration of the sound card, so we use
 * "submixers" for them
 */
struct envy_submix {
	int ndevs;
	void (*devinfo)(struct mixer_devinfo *, int);
	int  (*set)(struct mixer_devinfo *, int);
	int  (*get)(struct mixer_devinfo *, int);
};

#define ENVY_SUBMIX_NMAX	0x10

a53 2
	struct envy_submix	submix[ENVY_SUBMIX_NMAX];
	int			nsubmix;
@


1.3
log
@implement AK4524 input and output volume knobs and output mute switches.
There are 8 gain knobs but only 4 mute switches because each codec has two
channels but only one mute switch.

ok jakemsr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: envyvar.h,v 1.2 2007/10/28 18:25:21 fgsch Exp $	*/
d78 4
a81 5
#define ENVY_MIX_CLASSMIX	2
#define ENVY_MIX_CLASSMON	3
#define ENVY_MIX_OUTSRC		4
#define ENVY_MIX_MONITOR	14
#define ENVY_MIX_ILVL(nak)	34
@


1.2
log
@id tags.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d82 4
a85 1
#define ENVY_MIX_INVAL		34
@


1.1
log
@add new envy(4) driver for ICE1712 (aka VIA Envy24) audio devices. The
device uses 32bit samples, up to 96kHz sample rate, 12 input channels and 10
output channels. Currently AK4524 codecs are supported, so M-Audio Delta
cards should work. Playback and capture work, but the mixer is still
incomplete.

ok jakemsr@@
@
text
@d1 1
@

