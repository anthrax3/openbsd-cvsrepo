head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.2
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.17.0.10
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.8
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.16.0.18
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.16
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.14
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.10
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.8
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.6
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.4
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.15.0.12
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.10
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.6
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.8
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.4
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.2
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.14.0.4
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.2
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.13.0.8
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.6
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.4
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.2
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.12.0.10
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.8
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.6
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.4
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.12
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.10.0.4
	UBC_BASE:1.10
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	SMP:1.3.0.2
	SMP_BASE:1.3
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.18
date	2017.09.08.05.36.52;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	uRv5pa9QDlZaYgwD;

1.17
date	2015.03.14.03.38.48;	author jsg;	state Exp;
branches;
next	1.16;
commitid	p4LJxGKbi0BU2cG6;

1.16
date	2011.04.03.15.36.02;	author jasper;	state Exp;
branches;
next	1.15;

1.15
date	2008.06.26.05.42.17;	author ray;	state Exp;
branches;
next	1.14;

1.14
date	2007.04.10.17.47.55;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2005.08.09.04.10.10;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	2002.11.19.18.40.16;	author jason;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.01.26.58;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.25.10.13.29;	author art;	state Exp;
branches
	1.10.4.1;
next	1.9;

1.9
date	2001.07.11.17.31.24;	author krw;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.12.15.40.29;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.11.04.05.17;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.28.23.49.31;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.29.21.14.51;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.19.16.35.48;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.07.01.07.24;	author krw;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2000.02.05.22.20.37;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	98.11.17.06.11.05;	author downsj;	state Exp;
branches;
next	;

1.3.2.1
date	2000.02.20.11.57.01;	author niklas;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2001.05.14.22.25.32;	author niklas;	state Exp;
branches;
next	1.3.2.3;

1.3.2.3
date	2001.07.04.10.41.50;	author niklas;	state Exp;
branches;
next	1.3.2.4;

1.3.2.4
date	2001.10.31.03.22.45;	author nate;	state Exp;
branches;
next	1.3.2.5;

1.3.2.5
date	2002.03.28.15.35.57;	author niklas;	state Exp;
branches;
next	1.3.2.6;

1.3.2.6
date	2003.03.28.00.38.20;	author niklas;	state Exp;
branches;
next	;

1.10.4.1
date	2002.06.11.03.42.24;	author art;	state Exp;
branches;
next	1.10.4.2;

1.10.4.2
date	2003.05.19.22.17.59;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.18
log
@If you use sys/param.h, you don't need sys/types.h
@
text
@/*	$OpenBSD: adw_pci.c,v 1.17 2015/03/14 03:38:48 jsg Exp $ */
/* $NetBSD: adw_pci.c,v 1.7 2000/05/26 15:13:46 dante Exp $	 */

/*
 * Copyright (c) 1998, 1999, 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * Author: Baldassare Dante Profeta <dante@@mclink.it>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Device probe and attach routines for the following
 * Advanced Systems Inc. SCSI controllers:
 *
 *      ABP-940UW	- Bus-Master PCI Ultra-Wide (253 CDB)
 *	ABP-940UW (68)	- Bus-Master PCI Ultra-Wide (253 CDB)
 *	ABP-940UWD	- Bus-Master PCI Ultra-Wide (253 CDB)
 *	ABP-970UW	- Bus-Master PCI Ultra-Wide (253 CDB)
 *	ASB-3940UW	- Bus-Master PCI Ultra-Wide (253 CDB)
 *	ASB-3940U2W-00	- Bus-Master PCI Ultra2-Wide (253 CDB)
 *	ASB-3940U3W-00	- Bus-Master PCI Ultra3-Wide (253 CDB)
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/kernel.h>
#include <sys/queue.h>
#include <sys/device.h>
#include <sys/timeout.h>

#include <machine/bus.h>

#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#include <dev/ic/adwlib.h>
#include <dev/microcode/adw/adwmcode.h>
#include <dev/ic/adw.h>

/******************************************************************************/

#define PCI_BASEADR_IO        0x10

/******************************************************************************/

int adw_pci_match(struct device *, void *, void *);
void adw_pci_attach(struct device *, struct device *, void *);

struct cfattach adw_pci_ca =
{
	sizeof(ADW_SOFTC), adw_pci_match, adw_pci_attach
};

const struct pci_matchid adw_pci_devices[] = {
	{ PCI_VENDOR_ADVSYS, PCI_PRODUCT_ADVSYS_WIDE },
	{ PCI_VENDOR_ADVSYS, PCI_PRODUCT_ADVSYS_U2W },
	{ PCI_VENDOR_ADVSYS, PCI_PRODUCT_ADVSYS_U3W },
};

/******************************************************************************/
/*
 * Check the slots looking for a board we recognise
 * If we find one, note its address (slot) and call
 * the actual probe routine to check it out.
 */
int
adw_pci_match(parent, match, aux)
	struct device  *parent;
	void           *match;
	void           *aux;
{
	return (pci_matchbyid((struct pci_attach_args *)aux, adw_pci_devices,
	    nitems(adw_pci_devices)));
}


void
adw_pci_attach(parent, self, aux)
	struct device  *parent, *self;
	void           *aux;
{
	struct pci_attach_args *pa = aux;
	ADW_SOFTC      *sc = (void *) self;
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	pci_intr_handle_t ih;
	pci_chipset_tag_t pc = pa->pa_pc;
	pcireg_t	command;
	const char     *intrstr;

	/*
	 * Set chip type
	 */
	switch (PCI_PRODUCT(pa->pa_id)) {
	case PCI_PRODUCT_ADVSYS_WIDE:
		sc->chip_type = ADW_CHIP_ASC3550;
		break;

	case PCI_PRODUCT_ADVSYS_U2W:
		sc->chip_type = ADW_CHIP_ASC38C0800;
		break;

	case PCI_PRODUCT_ADVSYS_U3W:
		sc->chip_type = ADW_CHIP_ASC38C1600;
		break;

	default:
		printf("\n%s: unknown model: %d\n", sc->sc_dev.dv_xname,
		       PCI_PRODUCT(pa->pa_id));
		return;
	}

	command = pci_conf_read(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);
	if ( (command & PCI_COMMAND_PARITY_ENABLE) == 0)
		sc->cfg.control_flag |= CONTROL_FLAG_IGNORE_PERR;

	/*
	 * Map Device Registers for I/O
	 */
	if (pci_mapreg_map(pa, PCI_BASEADR_IO, PCI_MAPREG_TYPE_IO, 0,
			   &iot, &ioh, NULL, NULL, 0)) {
		printf("\n%s: unable to map device registers\n",
		       sc->sc_dev.dv_xname);
		return;
	}
	sc->sc_iot = iot;
	sc->sc_ioh = ioh;
	sc->sc_dmat = pa->pa_dmat;

	/*
	 * Initialize the board
	 */
	if (adw_init(sc)) {
		printf("%s: adw_init failed", sc->sc_dev.dv_xname);
		return;
	}

	/*
	 * Map Interrupt line
	 */
	if (pci_intr_map(pa, &ih)) {
		printf("\n%s: couldn't map interrupt\n", sc->sc_dev.dv_xname);
		return;
	}
	intrstr = pci_intr_string(pc, ih);

	/*
	 * Establish Interrupt handler
	 */
	sc->sc_ih = pci_intr_establish(pc, ih, IPL_BIO, adw_intr, sc,
				       sc->sc_dev.dv_xname);
	if (sc->sc_ih == NULL) {
		printf("\n%s: couldn't establish interrupt", sc->sc_dev.dv_xname);
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
		return;
	}
	printf(": %s\n", intrstr);

	/*
	 * Attach all the sub-devices we can find
	 */
	adw_attach(sc);
}
/******************************************************************************/
@


1.17
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adw_pci.c,v 1.16 2011/04/03 15:36:02 jasper Exp $ */
a43 1
#include <sys/types.h>
@


1.16
log
@use nitems(); no binary change for drivers that are compiled on amd64.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adw_pci.c,v 1.15 2008/06/26 05:42:17 ray Exp $ */
a53 1
#include <machine/intr.h>
@


1.15
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adw_pci.c,v 1.14 2007/04/10 17:47:55 miod Exp $ */
d100 1
a100 1
	    sizeof(adw_pci_devices)/sizeof(adw_pci_devices[0])));
@


1.14
log
@``it's'' -> ``its'' when the grammar gods require this change.
@
text
@d1 1
a1 1
/*	$OpenBSD: adw_pci.c,v 1.13 2005/08/09 04:10:10 mickey Exp $ */
a17 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.13
log
@do not set PCI_COMMAND_MASTER_ENABLE explicitly as it's already set in pcisubmatch(); kettenis@@ testing; brad@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: adw_pci.c,v 1.12 2002/11/19 18:40:16 jason Exp $ */
d97 1
a97 1
 * If we find one, note it's address (slot) and call
@


1.12
log
@Add a simplistic table driven lookup routine and use it where appropriate.
@
text
@d1 1
a1 1
/*	$OpenBSD: adw_pci.c,v 1.11 2002/03/14 01:26:58 millert Exp $ */
d122 1
a122 1
	u_int32_t       command;
d147 3
a149 7
	/*
	 * Make sure IO/MEM/MASTER are enabled
	 */
	command = pci_conf_read(pa->pa_pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);
	command |= PCI_COMMAND_IO_ENABLE | PCI_COMMAND_MEM_ENABLE |
			PCI_COMMAND_MASTER_ENABLE;
	pci_conf_write(pa->pa_pc, pa->pa_tag, PCI_COMMAND_STATUS_REG, command);
a150 3
	if ( (command & PCI_COMMAND_PARITY_ENABLE) == 0) {
		sc->cfg.control_flag |= CONTROL_FLAG_IGNORE_PERR;
	}
@


1.11
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: adw_pci.c,v 1.10 2001/08/25 10:13:29 art Exp $ */
d88 6
d106 2
a107 11
	struct pci_attach_args *pa = aux;

	if (PCI_VENDOR(pa->pa_id) == PCI_VENDOR_ADVSYS)
		switch (PCI_PRODUCT(pa->pa_id)) {
		case PCI_PRODUCT_ADVSYS_WIDE:
		case PCI_PRODUCT_ADVSYS_U2W:
		case PCI_PRODUCT_ADVSYS_U3W:
			return (1);
		}

	return 0;
@


1.10
log
@Change pci_intr_map to take pci_attach_args as an argument.
All callers actually took all arguments to pci_intr_map from pci_attach_args
structs, so this simplifies code.
This also allows more complicated interrupt assignment schemes like the one
on sparc64.

This makes sparc64 pci interrupts work.

Inspired by the same change in NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: adw_pci.c,v 1.9 2001/07/11 17:31:24 krw Exp $ */
d80 2
a81 2
int adw_pci_match __P((struct device *, void *, void *));
void adw_pci_attach __P((struct device *, struct device *, void *));
@


1.10.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: adw_pci.c,v 1.10 2001/08/25 10:13:29 art Exp $ */
d80 2
a81 2
int adw_pci_match(struct device *, void *, void *);
void adw_pci_attach(struct device *, struct device *, void *);
@


1.10.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a87 6
const struct pci_matchid adw_pci_devices[] = {
	{ PCI_VENDOR_ADVSYS, PCI_PRODUCT_ADVSYS_WIDE },
	{ PCI_VENDOR_ADVSYS, PCI_PRODUCT_ADVSYS_U2W },
	{ PCI_VENDOR_ADVSYS, PCI_PRODUCT_ADVSYS_U3W },
};

d100 11
a110 2
	return (pci_matchbyid((struct pci_attach_args *)aux, adw_pci_devices,
	    sizeof(adw_pci_devices)/sizeof(adw_pci_devices[0])));
@


1.9
log
@Eliminate use of static functions in line with normal OpenBSD
preferences. Having more debugging info available during
fixup of this driver to work on powerpc can't hurt either!

Change adwminphys() to adw_minphys() to make consistant with all
other function names in adw.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: adw_pci.c,v 1.8 2001/06/12 15:40:29 niklas Exp $ */
d185 1
a185 2
	if (pci_intr_map(pc, pa->pa_intrtag, pa->pa_intrpin,
			 pa->pa_intrline, &ih)) {
@


1.8
log
@Make pci_mapreg_map take an extra argument where we can
put a size limitation of the PCI region to map.  That makes the PERC 3/Di
raid controller usable, as it publishes too much PCI memory for us to map
in the kernel virtual memory.  As we only access the first 256 byte it is
of no use to map 128MB of kvm.
@
text
@d1 1
a1 1
/*	$OpenBSD: adw_pci.c,v 1.7 2001/04/11 04:05:17 krw Exp $ */
d80 2
a81 2
static int adw_pci_match __P((struct device *, void *, void *));
static void adw_pci_attach __P((struct device *, struct device *, void *));
d94 1
a94 1
static int
d114 1
a114 1
static void
@


1.7
log
@Update the adw driver to use the latest version of firmware (3.3f).

Move the microcode files to dev/microcode/adw/*.
@
text
@d1 1
a1 1
/*	$OpenBSD: adw_pci.c,v 1.6 2000/06/28 23:49:31 krw Exp $ */
d165 1
a165 1
			   &iot, &ioh, NULL, NULL)) {
@


1.6
log
@sync with NetBSD v1.7
@
text
@d1 1
a1 1
/*	$OpenBSD: adw_pci.c,v 1.5 2000/04/29 21:14:51 krw Exp $ */
d71 1
a71 1
#include <dev/ic/adwmcode.h>
@


1.5
log
@add $ tag
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/* $NetBSD: adw_pci.c,v 1.4 2000/02/04 13:16:22 dante Exp $	*/
d42 7
a48 6
 *     ABP-940UW       - Bus-Master PCI Ultra-Wide  (240 CDB)
 *     ABP-940UW (68)  - Bus-Master PCI Ultra-Wide  (240 CDB)
 *     ABP-940UWD      - Bus-Master PCI Ultra-Wide  (240 CDB)
 *     ABP-970UW       - Bus-Master PCI Ultra-Wide  (240 CDB)
 *     ASB-3940UW      - Bus-Master PCI Ultra-Wide  (240 CDB)
 *     ASB-3940U2W-00  - Bus-Master PCI Ultra2-Wide (240 CDB)
d58 1
d71 1
d80 2
a81 2
int adw_pci_match __P((struct device *, void *, void *));
void adw_pci_attach __P((struct device *, struct device *, void *));
d94 1
a94 1
int
d97 2
a98 1
	void           *match, *aux;
a104 1
			return (1);
d106 1
d114 1
a114 1
void
d133 1
a133 1
		sc->chip_type = ADV_CHIP_ASC3550;
d137 5
a141 1
		sc->chip_type = ADV_CHIP_ASC38C0800;
d154 3
a156 14
	if ((command & (PCI_COMMAND_IO_ENABLE | PCI_COMMAND_MEM_ENABLE |
			PCI_COMMAND_MASTER_ENABLE)) !=
	    (PCI_COMMAND_IO_ENABLE | PCI_COMMAND_MEM_ENABLE |
	     PCI_COMMAND_MASTER_ENABLE)) {
		pci_conf_write(pa->pa_pc, pa->pa_tag, PCI_COMMAND_STATUS_REG,
		 command | (PCI_COMMAND_IO_ENABLE | PCI_COMMAND_MEM_ENABLE |
			    PCI_COMMAND_MASTER_ENABLE));
	}

	/*
	 * Latency timer settings.
	 */
	{
		u_int32_t       bhlcr;
d158 1
a158 16
		bhlcr = pci_conf_read(pa->pa_pc, pa->pa_tag, PCI_BHLC_REG);

		if( ((PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_ADVSYS_WIDE) ||
		     (PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_ADVSYS_U2W)) &&
		     (PCI_LATTIMER(bhlcr) < 0x20)) {
			bhlcr &= 0xFFFF00FFUL;
			bhlcr |= 0x00002000UL;
			pci_conf_write(pa->pa_pc, pa->pa_tag,
				       PCI_BHLC_REG, bhlcr);
		}
	}


	if (((PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_ADVSYS_WIDE) ||
	     (PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_ADVSYS_U2W)) &&
	     (command & PCI_COMMAND_PARITY_ENABLE) == 0) {
d177 4
a180 2
	if (adw_init(sc))
		panic("adw_pci_attach: adw_init failed");
@


1.4
log
@From NetBSD:
 o Use newer pci attach method
 o Set chip_type corectly
Fixes panic with the 3?940UW boards
@
text
@d1 1
@


1.3
log
@sync with netbsd. ok @@deraadt
@
text
@d1 1
a1 1
/* $NetBSD: adw_pci.c,v 1.3 2000/02/03 20:28:26 dante Exp $	 */
d72 1
a72 1
#define PCI_CBIO        0x10
d116 1
a117 2
	bus_addr_t adwbase;
	bus_size_t adwsize;
d122 31
a152 1
	int retval;
d181 2
a182 4
	retval = pci_io_find(pc, pa->pa_tag, PCI_CBIO, &adwbase, &adwsize);
	if (retval == 0)
		retval = bus_space_map(pa->pa_iot, adwbase, adwsize, 0, &ioh);
	if (retval) {
d187 1
a187 1
	sc->sc_iot = pa->pa_iot;
d202 1
a202 1
		printf("%s: couldn't map interrupt\n", sc->sc_dev.dv_xname);
d213 1
a213 1
		printf("%s: couldn't establish interrupt", sc->sc_dev.dv_xname);
@


1.3.2.1
log
@Merge in recent code from the trunk
@
text
@d1 1
a1 1
/* $NetBSD: adw_pci.c,v 1.4 2000/02/04 13:16:22 dante Exp $	*/
d72 1
a72 1
#define PCI_BASEADR_IO        0x10
a115 1
	bus_space_tag_t iot;
d117 2
d123 1
a123 31

	/*
	 * Set chip type
	 */
	switch (PCI_PRODUCT(pa->pa_id)) {
	case PCI_PRODUCT_ADVSYS_WIDE:
		sc->chip_type = ADV_CHIP_ASC3550;
		break;

	case PCI_PRODUCT_ADVSYS_U2W:
		sc->chip_type = ADV_CHIP_ASC38C0800;
		break;

	default:
		printf("\n%s: unknown model: %d\n", sc->sc_dev.dv_xname,
		       PCI_PRODUCT(pa->pa_id));
		return;
	}

	/*
	 * Make sure IO/MEM/MASTER are enabled
	 */
	command = pci_conf_read(pa->pa_pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);
	if ((command & (PCI_COMMAND_IO_ENABLE | PCI_COMMAND_MEM_ENABLE |
			PCI_COMMAND_MASTER_ENABLE)) !=
	    (PCI_COMMAND_IO_ENABLE | PCI_COMMAND_MEM_ENABLE |
	     PCI_COMMAND_MASTER_ENABLE)) {
		pci_conf_write(pa->pa_pc, pa->pa_tag, PCI_COMMAND_STATUS_REG,
		 command | (PCI_COMMAND_IO_ENABLE | PCI_COMMAND_MEM_ENABLE |
			    PCI_COMMAND_MASTER_ENABLE));
	}
d152 4
a155 2
	if (pci_mapreg_map(pa, PCI_BASEADR_IO, PCI_MAPREG_TYPE_IO, 0,
			   &iot, &ioh, NULL, NULL)) {
d160 1
a160 1
	sc->sc_iot = iot;
d175 1
a175 1
		printf("\n%s: couldn't map interrupt\n", sc->sc_dev.dv_xname);
d186 1
a186 1
		printf("\n%s: couldn't establish interrupt", sc->sc_dev.dv_xname);
@


1.3.2.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 2
/*	$OpenBSD: adw_pci.c,v 1.7 2001/04/11 04:05:17 krw Exp $ */
/* $NetBSD: adw_pci.c,v 1.7 2000/05/26 15:13:46 dante Exp $	 */
d41 6
a46 7
 *      ABP-940UW	- Bus-Master PCI Ultra-Wide (253 CDB)
 *	ABP-940UW (68)	- Bus-Master PCI Ultra-Wide (253 CDB)
 *	ABP-940UWD	- Bus-Master PCI Ultra-Wide (253 CDB)
 *	ABP-970UW	- Bus-Master PCI Ultra-Wide (253 CDB)
 *	ASB-3940UW	- Bus-Master PCI Ultra-Wide (253 CDB)
 *	ASB-3940U2W-00	- Bus-Master PCI Ultra2-Wide (253 CDB)
 *	ASB-3940U3W-00	- Bus-Master PCI Ultra3-Wide (253 CDB)
a55 1
#include <sys/timeout.h>
a67 1
#include <dev/microcode/adw/adwmcode.h>
d76 2
a77 2
static int adw_pci_match __P((struct device *, void *, void *));
static void adw_pci_attach __P((struct device *, struct device *, void *));
d90 1
a90 1
static int
d93 1
a93 2
	void           *match;
	void           *aux;
d100 1
a101 1
		case PCI_PRODUCT_ADVSYS_U3W:
d109 1
a109 1
static void
d128 1
a128 1
		sc->chip_type = ADW_CHIP_ASC3550;
d132 1
a132 5
		sc->chip_type = ADW_CHIP_ASC38C0800;
		break;

	case PCI_PRODUCT_ADVSYS_U3W:
		sc->chip_type = ADW_CHIP_ASC38C1600;
d145 14
a158 3
	command |= PCI_COMMAND_IO_ENABLE | PCI_COMMAND_MEM_ENABLE |
			PCI_COMMAND_MASTER_ENABLE;
	pci_conf_write(pa->pa_pc, pa->pa_tag, PCI_COMMAND_STATUS_REG, command);
d160 16
a175 1
	if ( (command & PCI_COMMAND_PARITY_ENABLE) == 0) {
d194 2
a195 4
	if (adw_init(sc)) {
		printf("%s: adw_init failed", sc->sc_dev.dv_xname);
		return;
	}
@


1.3.2.3
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: adw_pci.c,v 1.3.2.2 2001/05/14 22:25:32 niklas Exp $ */
d165 1
a165 1
			   &iot, &ioh, NULL, NULL, 0)) {
@


1.3.2.4
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: adw_pci.c,v 1.3.2.3 2001/07/04 10:41:50 niklas Exp $ */
d80 2
a81 2
int adw_pci_match __P((struct device *, void *, void *));
void adw_pci_attach __P((struct device *, struct device *, void *));
d94 1
a94 1
int
d114 1
a114 1
void
d185 2
a186 1
	if (pci_intr_map(pa, &ih)) {
@


1.3.2.5
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d80 2
a81 2
int adw_pci_match(struct device *, void *, void *);
void adw_pci_attach(struct device *, struct device *, void *);
@


1.3.2.6
log
@Sync the SMP branch with 3.3
@
text
@a87 6
const struct pci_matchid adw_pci_devices[] = {
	{ PCI_VENDOR_ADVSYS, PCI_PRODUCT_ADVSYS_WIDE },
	{ PCI_VENDOR_ADVSYS, PCI_PRODUCT_ADVSYS_U2W },
	{ PCI_VENDOR_ADVSYS, PCI_PRODUCT_ADVSYS_U3W },
};

d100 11
a110 2
	return (pci_matchbyid((struct pci_attach_args *)aux, adw_pci_devices,
	    sizeof(adw_pci_devices)/sizeof(adw_pci_devices[0])));
@


1.2
log
@support new u2w cards; dante@@mclink.it, merged by kwesterback@@home.com
@
text
@d41 6
a46 2
 *   Single Channel Products:
 *      ABP940UW - Bus-Master PCI Ultra-Wide (240 CDB)
@


1.1
log
@Add adw device driver, from NetBSD.
@
text
@d1 1
a1 2
/*	$OpenBSD$	*/
/* $NetBSD: adw_pci.c,v 1.2 1998/09/26 19:53:34 dante Exp $	 */
d4 2
a5 1
 * Copyright (c) 1998 The NetBSD Foundation, Inc. All rights reserved.
d89 1
a89 1
	void *match, *aux;
d97 2
a120 3

	sc->sc_flags = 0x0;

d129 3
a131 2
		if ((PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_ADVSYS_WIDE) &&
		    (PCI_LATTIMER(bhlcr) < 0x20)) {
d140 3
a142 2
	if ((PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_ADVSYS_WIDE) &&
	    (command & PCI_COMMAND_PARITY_ENABLE) == 0) {
@

