head	1.13;
access;
symbols
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.13
date	2016.04.26.00.21.27;	author jsg;	state Exp;
branches;
next	1.12;
commitid	iTnUzzyR2Cqq9bxT;

1.12
date	2015.04.28.07.55.13;	author stsp;	state Exp;
branches;
next	1.11;
commitid	H0LxewdXpqKyRDz1;

1.11
date	2015.03.28.18.07.56;	author jcs;	state Exp;
branches;
next	1.10;
commitid	5fvZBfCipIjjSYjV;

1.10
date	2015.03.14.16.42.30;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	BO1BWDB40YycXRFn;

1.9
date	2015.03.14.03.38.49;	author jsg;	state Exp;
branches;
next	1.8;
commitid	p4LJxGKbi0BU2cG6;

1.8
date	2015.02.23.20.40.47;	author phessler;	state Exp;
branches;
next	1.7;
commitid	LvrbN5ALZrybUaga;

1.7
date	2014.08.19.17.55.03;	author phessler;	state Exp;
branches;
next	1.6;
commitid	y8OmGd6PGoOul537;

1.6
date	2014.05.18.10.52.17;	author stsp;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.18.09.34.05;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2013.11.06.13.51.02;	author stsp;	state Exp;
branches;
next	1.3;

1.3
date	2013.01.05.15.42.44;	author stsp;	state Exp;
branches;
next	1.2;

1.2
date	2013.01.04.23.19.40;	author stsp;	state Exp;
branches;
next	1.1;

1.1
date	2012.11.29.23.36.34;	author stsp;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Match on RTS522A.  Found in 2016 thinkpads.
Tested by Bryan Vyhmeister on x260.
@
text
@/*	$OpenBSD: rtsx_pci.c,v 1.12 2015/04/28 07:55:13 stsp Exp $	*/

/*
 * Copyright (c) 2006 Uwe Stuehler <uwe@@openbsd.org>
 * Copyright (c) 2012 Stefan Sperling <stsp@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/systm.h>

#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>
#include <dev/ic/rtsxreg.h>
#include <dev/ic/rtsxvar.h>
#include <dev/sdmmc/sdmmcvar.h>

#define RTSX_PCI_BAR 	0x10

struct rtsx_pci_softc {
	struct rtsx_softc sc;
	void *sc_ih;
};

int	rtsx_pci_match(struct device *, void *, void *);
void	rtsx_pci_attach(struct device *, struct device *, void *);

struct cfattach rtsx_pci_ca = {
	sizeof(struct rtsx_pci_softc), rtsx_pci_match, rtsx_pci_attach,
	NULL, rtsx_activate
};

int
rtsx_pci_match(struct device *parent, void *match, void *aux)
{
	struct pci_attach_args *pa = aux;

	/* 
	 * Explicitly match the UNDEFINED device class only. Some RTS5209
	 * devices advertise a SYSTEM/SDHC class in addition to the UNDEFINED
	 * device class. Let sdhc(4) handle the SYSTEM/SDHC ones.
	 */
	if (PCI_VENDOR(pa->pa_id) != PCI_VENDOR_REALTEK ||
	    PCI_CLASS(pa->pa_class) != PCI_CLASS_UNDEFINED)
		return 0;

	if (PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_REALTEK_RTS5209 ||
	    PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_REALTEK_RTS5227 ||
	    PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_REALTEK_RTS5229 ||
	    PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_REALTEK_RTS522A ||
	    PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_REALTEK_RTS5249 ||
	    PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_REALTEK_RTL8402 ||
	    PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_REALTEK_RTL8411 ||
	    PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_REALTEK_RTL8411B)
		return 1;

	return 0;
}

void
rtsx_pci_attach(struct device *parent, struct device *self, void *aux)
{
	struct rtsx_pci_softc *sc = (struct rtsx_pci_softc *)self;
	struct pci_attach_args *pa = aux;
	pci_intr_handle_t ih;
	char const *intrstr;
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	bus_size_t size;
	int flags;

	if ((pci_conf_read(pa->pa_pc, pa->pa_tag, RTSX_CFG_PCI)
	    & RTSX_CFG_ASIC) != 0) {
		printf("%s: no asic\n", sc->sc.sc_dev.dv_xname);
		return;
	}

	if (pci_intr_map_msi(pa, &ih) && pci_intr_map(pa, &ih)) {
		printf(": can't map interrupt\n");
		return;
	}

	intrstr = pci_intr_string(pa->pa_pc, ih);
	sc->sc_ih = pci_intr_establish(pa->pa_pc, ih, IPL_SDMMC,
	    rtsx_intr, sc, sc->sc.sc_dev.dv_xname);
	if (sc->sc_ih == NULL) {
		printf(": can't establish interrupt\n");
		return;
	}
	printf(": %s\n", intrstr);

	if (pci_mem_find(pa->pa_pc, pa->pa_tag, RTSX_PCI_BAR,
	    NULL, NULL, NULL) != 0) {
		printf("%s: can't find registers\n", sc->sc.sc_dev.dv_xname);
	    	return;
	}

	if (pci_mapreg_map(pa, RTSX_PCI_BAR, PCI_MAPREG_TYPE_MEM, 0,
	    &iot, &ioh, NULL, &size, 0)) {
		printf("%s: can't map registers\n", sc->sc.sc_dev.dv_xname);
		return;
	}

	pci_set_powerstate(pa->pa_pc, pa->pa_tag, PCI_PMCSR_STATE_D0);

	switch (PCI_PRODUCT(pa->pa_id)) {
		case PCI_PRODUCT_REALTEK_RTS5209:
			flags = RTSX_F_5209;
			break;
		case PCI_PRODUCT_REALTEK_RTS5229:
		case PCI_PRODUCT_REALTEK_RTS5249:
			flags = RTSX_F_5229;
			break;
		default:
			flags = 0;
			break;
	}

	if (rtsx_attach(&sc->sc, iot, ioh, size, pa->pa_dmat, flags) != 0)
		printf("%s: can't initialize chip\n", sc->sc.sc_dev.dv_xname);
}
@


1.12
log
@In rtsx(4), condense the list of support chips in a comment, remove the unused
F_5227 flag, sort PCI IDs, and fix a typo in a comment. No functional change.
from brad
@
text
@d1 1
a1 1
/*	$OpenBSD: rtsx_pci.c,v 1.11 2015/03/28 18:07:56 jcs Exp $	*/
d62 1
@


1.11
log
@match on the RTS5249 found on the dell xps 13, treat it as a 5229

ok stsp
@
text
@d1 1
a1 1
/*	$OpenBSD: rtsx_pci.c,v 1.10 2015/03/14 16:42:30 deraadt Exp $	*/
d51 1
a51 1
	 * Explicitly match the UNDEFINED device class only. Some RTS5902
d63 1
d65 1
a65 2
	    PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_REALTEK_RTL8411B ||
	    PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_REALTEK_RTL8402)
a119 3
			break;
		case PCI_PRODUCT_REALTEK_RTS5227:
			flags = RTSX_F_5227;
@


1.10
log
@RTL8411 works also, according to tiix@@openmailbox
@
text
@d1 1
a1 1
/*	$OpenBSD: rtsx_pci.c,v 1.9 2015/03/14 03:38:49 jsg Exp $	*/
d62 1
d125 1
@


1.9
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtsx_pci.c,v 1.8 2015/02/23 20:40:47 phessler Exp $	*/
d62 1
@


1.8
log
@Add support for the RTL8411B chip

Verified working by Peter Hansteen

OK deraadt@@, millert@@, stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtsx_pci.c,v 1.7 2014/08/19 17:55:03 phessler Exp $	*/
a22 1
#include <sys/malloc.h>
@


1.7
log
@Enable rts5227, as found in my new Thinkpad x240.

Shuffle the code around slightly, so we special case the 5209 chipset
instead of semi-randomly.

Tested on rts5227 by me, and rts5209 by stsp@@

OK stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtsx_pci.c,v 1.6 2014/05/18 10:52:17 stsp Exp $	*/
d63 1
@


1.6
log
@Make rtsx(4) attach to RTL8402 devices. Reported as working by Eric Huiban.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtsx_pci.c,v 1.5 2014/04/18 09:34:05 claudio Exp $	*/
d115 14
a128 4
	if (PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_REALTEK_RTS5209)
		flags = RTSX_F_5209;
	else
		flags = RTSX_F_5229;
@


1.5
log
@Also match RTS5227 in rtsx(4). Works for me on the THinkPad X240.
This will give us basic support there are a few extra bits in the linux
driver we ignore for now. Something to look at in the future.
OK stsp@@ mlarkin@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtsx_pci.c,v 1.4 2013/11/06 13:51:02 stsp Exp $	*/
d62 2
a63 1
	    PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_REALTEK_RTS5229)
@


1.4
log
@Add support for the RTS5229 card reader to rtsx(4).
From Pedro Martelletto.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtsx_pci.c,v 1.3 2013/01/05 15:42:44 stsp Exp $	*/
d61 1
@


1.3
log
@Enable MSI for rtsx(4). Tested on i386 and amd64.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtsx_pci.c,v 1.2 2013/01/04 23:19:40 stsp Exp $	*/
d56 6
a61 3
	if (PCI_VENDOR(pa->pa_id) == PCI_VENDOR_REALTEK &&
	    PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_REALTEK_RTS5209 &&
	    PCI_CLASS(pa->pa_class) == PCI_CLASS_UNDEFINED)
d77 1
d113 6
a118 1
	if (rtsx_attach(&sc->sc, iot, ioh, size, pa->pa_dmat) != 0)
@


1.2
log
@Attach rtsx(4) only to devices using the 'undefined' PCI class, and do
not ever attach sdhc(4) to devices matching the rtsx(4) vendor/product ID.
Fixes an issue reported by Dave Anderson where on his hardware both drivers
attached to apparently the same device which then failed to work reliably.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: rtsx_pci.c,v 1.1 2012/11/29 23:36:34 stsp Exp $	*/
d81 1
a81 1
	if (pci_intr_map(pa, &ih)) {
@


1.1
log
@Add rtsx(4), a new driver for the Realtek RTS5209 card reader.
This card reader does not comply to the standard SDHC interface
supported by sdhc(4) and hence requires a custom driver.

With help from uwe and mikeb. Useful hints were also provided by the
author of the corresponding Linux driver (wwang at realsil com cn),
thanks a lot!  Tested by myself and weerd on i386 and amd64.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d51 5
d57 2
a58 1
	    PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_REALTEK_RTS5209)
@

