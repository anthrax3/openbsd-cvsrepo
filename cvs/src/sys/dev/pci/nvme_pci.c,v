head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.2
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2016.11.10.11.56.41;	author mpi;	state Exp;
branches;
next	1.4;
commitid	l93eKZ20rXYW0X7A;

1.4
date	2016.10.25.06.20.41;	author dlg;	state Exp;
branches;
next	1.3;
commitid	61P1f8kxIbXrwi3t;

1.3
date	2016.04.14.11.18.32;	author dlg;	state Exp;
branches;
next	1.2;
commitid	xizj9bAz5c6r27Bv;

1.2
date	2014.04.15.10.28.07;	author dlg;	state Exp;
branches;
next	1.1;

1.1
date	2014.04.12.05.06.58;	author dlg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Match Apple NVMe controller by product ID, yes apple is different.

Reported and tested by gonzalo@@ on a Macbookair7,1.
@
text
@/*	$OpenBSD: nvme_pci.c,v 1.4 2016/10/25 06:20:41 dlg Exp $ */

/*
 * Copyright (c) 2014 David Gwynne <dlg@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/buf.h>
#include <sys/kernel.h>
#include <sys/malloc.h>
#include <sys/device.h>
#include <sys/timeout.h>
#include <sys/queue.h>
#include <sys/mutex.h>
#include <sys/pool.h>

#include <machine/bus.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>

#include <dev/ic/nvmereg.h>
#include <dev/ic/nvmevar.h>

#define NVME_PCI_BAR		0x10
#define NVME_PCI_INTERFACE	0x02

struct nvme_pci_softc {
	struct nvme_softc	psc_nvme;
	pci_chipset_tag_t	psc_pc;
};

int	nvme_pci_match(struct device *, void *, void *);
void	nvme_pci_attach(struct device *, struct device *, void *);
int	nvme_pci_detach(struct device *, int);
int	nvme_pci_activate(struct device *, int);

struct cfattach nvme_pci_ca = {
	sizeof(struct nvme_pci_softc),
	nvme_pci_match,
	nvme_pci_attach,
	nvme_pci_detach,
	nvme_pci_activate
};

int
nvme_pci_match(struct device *parent, void *match, void *aux)
{
	struct pci_attach_args *pa = aux;

	if (PCI_CLASS(pa->pa_class) == PCI_CLASS_MASS_STORAGE &&
	    PCI_SUBCLASS(pa->pa_class) == PCI_SUBCLASS_MASS_STORAGE_NVM &&
	    PCI_INTERFACE(pa->pa_class) == NVME_PCI_INTERFACE)
		return (1);

	if (PCI_VENDOR(pa->pa_id) == PCI_VENDOR_APPLE &&
	    PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_APPLE_NVME)
	    	return (1);

	return (0);
}

void
nvme_pci_attach(struct device *parent, struct device *self, void *aux)
{
	struct nvme_pci_softc *psc = (struct nvme_pci_softc *)self;
	struct nvme_softc *sc = &psc->psc_nvme;
	struct pci_attach_args *pa = aux;
	pcireg_t maptype;
	pci_intr_handle_t ih;
	int msi = 1;

	psc->psc_pc = pa->pa_pc;
	sc->sc_dmat = pa->pa_dmat;

	maptype = pci_mapreg_type(pa->pa_pc, pa->pa_tag, NVME_PCI_BAR);
	if (pci_mapreg_map(pa, NVME_PCI_BAR, maptype, 0,
	    &sc->sc_iot, &sc->sc_ioh, NULL, &sc->sc_ios, 0) != 0) {
		printf(": unable to map registers\n");
		return;
	}

	if (pci_intr_map_msi(pa, &ih) != 0) {
		if (pci_intr_map(pa, &ih) != 0) {
			printf(": unable to map interrupt\n");
			goto unmap;
		}
		msi = 0;
	}

	sc->sc_ih = pci_intr_establish(pa->pa_pc, ih, IPL_BIO,
	    msi ? nvme_intr : nvme_intr_intx, sc, DEVNAME(sc));
	if (sc->sc_ih == NULL) {
		printf(": unable to establish interrupt\n");
		goto unmap;
	}

	printf(": %s", pci_intr_string(pa->pa_pc, ih));
	if (nvme_attach(sc) != 0) {
		/* error printed by nvme_attach() */
		goto disestablish;
	}

	return;

disestablish:
	pci_intr_disestablish(pa->pa_pc, sc->sc_ih);
	sc->sc_ih = NULL;

unmap:
	bus_space_unmap(sc->sc_iot, sc->sc_ioh, sc->sc_ios);
	sc->sc_ios = 0;
}

int
nvme_pci_detach(struct device *self, int flags)
{
	return (0);
}

int
nvme_pci_activate(struct device *self, int act)
{
	struct nvme_pci_softc *psc = (struct nvme_pci_softc *)self;

	return (nvme_activate(&psc->psc_nvme, act));
}
@


1.4
log
@mask and unmask the interrupt source in an intx specific intr handler.

it seems devices using levelled intx interrupts need to explicitely ack
interrupts by masking and unmasking the source around the completion
ring handling. without this completions can be lost, which in turn
causes long (permanent?) stalls in the block layer under heavy write
load.

ive experienced this problem with an intel nvme part that only has
intx and msix support. because we dont support msix yet we only
use intx on it. it appeared to lock up before this fix.

this has been tested on both that intel board and a samsung with msi.
this fix was based on work found in code by nonaka
@
text
@d1 1
a1 1
/*	$OpenBSD: nvme_pci.c,v 1.3 2016/04/14 11:18:32 dlg Exp $ */
d72 4
@


1.3
log
@provide a shutdown hook that follows the procedure in the docs
@
text
@d1 1
a1 1
/*	$OpenBSD: nvme_pci.c,v 1.2 2014/04/15 10:28:07 dlg Exp $ */
d84 1
d96 6
a101 3
	if (pci_intr_map_msi(pa, &ih) != 0 && pci_intr_map(pa, &ih) != 0) {
		printf(": unable to map interrupt\n");
		goto unmap;
d105 1
a105 1
	    nvme_intr, sc, DEVNAME(sc));
@


1.2
log
@i wanted to work on this in the tree so i could commit lots of small
steps, but unfortunately the next step after "talk to the chips
registers" was "get command queues working" which ended up being a
huge amount of plumbing.

anyway, this lets me successfully run an identify controller command
against the chip and should be cut up the right way to be usable
for io command submissions. will need to think about how to avoid
overflowing rings though.
@
text
@d1 1
a1 1
/*	$OpenBSD: nvme_pci.c,v 1.1 2014/04/12 05:06:58 dlg Exp $ */
d133 3
a135 1
	return (0);
@


1.1
log
@start working on a driver for non volatile memory express controllers.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d36 4
@

