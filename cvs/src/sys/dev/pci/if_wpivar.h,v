head	1.27;
access;
symbols
	OPENBSD_6_1:1.26.0.4
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.25.0.14
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.25.0.10
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.8
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.25.0.6
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.4
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.23.0.12
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.23.0.10
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.8
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.6
	OPENBSD_5_0:1.23.0.4
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.23.0.2
	OPENBSD_4_9_BASE:1.23
	OPENBSD_4_8:1.22.0.2
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.20.0.2
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.19.0.4
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.18.0.2
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.15.0.4
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.2
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9;
locks; strict;
comment	@ * @;


1.27
date	2017.04.08.02.57.25;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	6s3MfY9d6ZKdL2Uz;

1.26
date	2016.09.05.08.18.40;	author tedu;	state Exp;
branches;
next	1.25;
commitid	Wg4G3vdtTfPyfHAy;

1.25
date	2013.11.28.20.07.32;	author kettenis;	state Exp;
branches;
next	1.24;

1.24
date	2013.11.14.12.34.30;	author dlg;	state Exp;
branches;
next	1.23;

1.23
date	2010.09.07.16.21.45;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2010.07.22.14.42.43;	author kettenis;	state Exp;
branches;
next	1.21;

1.21
date	2010.07.22.10.22.37;	author kettenis;	state Exp;
branches;
next	1.20;

1.20
date	2009.11.17.20.35.53;	author damien;	state Exp;
branches;
next	1.19;

1.19
date	2009.05.12.19.10.57;	author damien;	state Exp;
branches;
next	1.18;

1.18
date	2008.12.03.17.17.08;	author damien;	state Exp;
branches;
next	1.17;

1.17
date	2008.11.09.10.00.17;	author damien;	state Exp;
branches;
next	1.16;

1.16
date	2008.11.08.11.02.09;	author damien;	state Exp;
branches;
next	1.15;

1.15
date	2007.11.19.19.34.25;	author damien;	state Exp;
branches;
next	1.14;

1.14
date	2007.09.11.18.52.32;	author damien;	state Exp;
branches;
next	1.13;

1.13
date	2007.08.22.19.50.25;	author damien;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.16.14.15.37;	author damien;	state Exp;
branches;
next	1.11;

1.11
date	2007.06.05.19.49.40;	author damien;	state Exp;
branches;
next	1.10;

1.10
date	2006.10.23.18.16.56;	author damien;	state Exp;
branches;
next	1.9;

1.9
date	2006.08.28.19.47.43;	author damien;	state Exp;
branches;
next	1.8;

1.8
date	2006.08.01.12.43.56;	author damien;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.17.19.07.19;	author damien;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.25.09.26.58;	author damien;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.20.15.46.55;	author damien;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.20.15.31.30;	author damien;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.20.11.47.29;	author damien;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.17.19.50.35;	author damien;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.14.19.00.48;	author damien;	state Exp;
branches;
next	;


desc
@@


1.27
log
@A pile of sizes to free(9).  In test for a few days in snapshots.
Errors will result in nice clean panic messages so we know what's wrong.
Reviewed by dhill visa natano jsg.
@
text
@/*	$OpenBSD: if_wpivar.h,v 1.26 2016/09/05 08:18:40 tedu Exp $	*/

/*-
 * Copyright (c) 2006-2008
 *	Damien Bergamini <damien.bergamini@@free.fr>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

struct wpi_rx_radiotap_header {
	struct ieee80211_radiotap_header wr_ihdr;
	uint64_t	wr_tsft;
	uint8_t		wr_flags;
	uint8_t		wr_rate;
	uint16_t	wr_chan_freq;
	uint16_t	wr_chan_flags;
	int8_t		wr_dbm_antsignal;
	int8_t		wr_dbm_antnoise;
	uint8_t		wr_antenna;
} __packed;

#define WPI_RX_RADIOTAP_PRESENT						\
	((1 << IEEE80211_RADIOTAP_TSFT) |				\
	 (1 << IEEE80211_RADIOTAP_FLAGS) |				\
	 (1 << IEEE80211_RADIOTAP_RATE) |				\
	 (1 << IEEE80211_RADIOTAP_CHANNEL) |				\
	 (1 << IEEE80211_RADIOTAP_DBM_ANTSIGNAL) |			\
	 (1 << IEEE80211_RADIOTAP_DBM_ANTNOISE) |			\
	 (1 << IEEE80211_RADIOTAP_ANTENNA))

struct wpi_tx_radiotap_header {
	struct ieee80211_radiotap_header wt_ihdr;
	uint8_t		wt_flags;
	uint8_t		wt_rate;
	uint16_t	wt_chan_freq;
	uint16_t	wt_chan_flags;
	uint8_t		wt_hwqueue;
} __packed;

#define WPI_TX_RADIOTAP_PRESENT						\
	((1 << IEEE80211_RADIOTAP_FLAGS) |				\
	 (1 << IEEE80211_RADIOTAP_RATE) |				\
	 (1 << IEEE80211_RADIOTAP_CHANNEL) |				\
	 (1 << IEEE80211_RADIOTAP_HWQUEUE))

struct wpi_dma_info {
	bus_dma_tag_t		tag;
	bus_dmamap_t		map;
	bus_dma_segment_t	seg;
	bus_addr_t		paddr;
	caddr_t			vaddr;
	bus_size_t		size;
};

struct wpi_tx_data {
	bus_dmamap_t		map;
	bus_addr_t		cmd_paddr;
	struct mbuf		*m;
	struct ieee80211_node	*ni;
};

struct wpi_tx_ring {
	struct wpi_dma_info	desc_dma;
	struct wpi_dma_info	cmd_dma;
	struct wpi_tx_desc	*desc;
	struct wpi_tx_cmd	*cmd;
	struct wpi_tx_data	data[WPI_TX_RING_COUNT];
	int			qid;
	int			queued;
	int			cur;
};

struct wpi_softc;

struct wpi_rx_data {
	struct mbuf	*m;
	bus_dmamap_t	map;
};

struct wpi_rx_ring {
	struct wpi_dma_info	desc_dma;
	uint32_t		*desc;
	struct wpi_rx_data	data[WPI_RX_RING_COUNT];
	int			cur;
};

struct wpi_node {
	struct	ieee80211_node		ni;	/* must be the first */
	struct	ieee80211_amrr_node	amn;
	uint8_t				id;
	uint8_t				ridx[IEEE80211_RATE_MAXSIZE];
};

struct wpi_power_sample {
	uint8_t	index;
	int8_t	power;
};

struct wpi_power_group {
#define WPI_SAMPLES_COUNT	5
	struct	wpi_power_sample samples[WPI_SAMPLES_COUNT];
	uint8_t	chan;
	int8_t	maxpwr;
	int16_t	temp;
};

struct wpi_fw_part {
	const uint8_t	*text;
	uint32_t	textsz;
	const uint8_t	*data;
	uint32_t	datasz;
};

struct wpi_fw_info {
	u_char			*data;
	size_t			datalen;
	struct wpi_fw_part	init;
	struct wpi_fw_part	main;
	struct wpi_fw_part	boot;
};

struct wpi_softc {
	struct device		sc_dev;

	struct ieee80211com	sc_ic;
	int			(*sc_newstate)(struct ieee80211com *,
				    enum ieee80211_state, int);

	struct ieee80211_amrr	amrr;
	uint8_t			fixed_ridx;

	bus_dma_tag_t		sc_dmat;

	struct rwlock		sc_rwlock;
	u_int			sc_flags;
#define WPI_FLAG_HAS_5GHZ	(1 << 0)

	/* Shared area. */
	struct wpi_dma_info	shared_dma;
	struct wpi_shared	*shared;

	/* Firmware DMA transfer. */
	struct wpi_dma_info	fw_dma;

	/* TX/RX rings. */
	struct wpi_tx_ring	txq[WPI_NTXQUEUES];
	struct wpi_rx_ring	rxq;

	bus_space_tag_t		sc_st;
	bus_space_handle_t	sc_sh;
	void 			*sc_ih;
	pci_chipset_tag_t	sc_pct;
	pcitag_t		sc_pcitag;
	bus_size_t		sc_sz;
	int			sc_cap_off;	/* PCIe Capabilities. */

	struct timeout		calib_to;
	int			calib_cnt;

	struct task		init_task;

	struct wpi_fw_info	fw;
	uint32_t		errptr;

	struct wpi_rxon		rxon;
	int			temp;
	uint32_t		qfullmsk;

	uint8_t			cap;
	uint16_t		rev;
	uint8_t			type;
	struct wpi_power_group	groups[WPI_POWER_GROUPS_COUNT];
	int8_t			maxpwr[IEEE80211_CHAN_MAX];

	int			sc_tx_timer;

#if NBPFILTER > 0
	caddr_t			sc_drvbpf;

	union {
		struct wpi_rx_radiotap_header th;
		uint8_t	pad[IEEE80211_RADIOTAP_HDRLEN];
	} sc_rxtapu;
#define sc_rxtap	sc_rxtapu.th
	int			sc_rxtap_len;

	union {
		struct wpi_tx_radiotap_header th;
		uint8_t	pad[IEEE80211_RADIOTAP_HDRLEN];
	} sc_txtapu;
#define sc_txtap	sc_txtapu.th
	int			sc_txtap_len;
#endif
};
@


1.26
log
@convert busy flag and tsleep to rwlock as in iwm
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.25 2013/11/28 20:07:32 kettenis Exp $	*/
d126 1
@


1.25
log
@Seems we simply have tolibe with fatal firmware errors.  Even Linux, with its
driver written by Intel engineers occasionally gets them.  So when we get one,
simply reset the chip, reload the firware and bring the interface up again.

ok chris@@, phessler@@, mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.24 2013/11/14 12:34:30 dlg Exp $	*/
d143 1
a145 1
#define WPI_FLAG_BUSY		(1 << 1)
@


1.24
log
@replace workqs with tasks for handling resume

from kimberley manning
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.23 2010/09/07 16:21:45 deraadt Exp $	*/
d169 2
a184 1
	struct task		sc_resume_t;
@


1.23
log
@remove the powerhook code.  All architectures now use the ca_activate tree
traversal code to suspend/resume
ok oga kettenis blambert
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.22 2010/07/22 14:42:43 kettenis Exp $	*/
d183 1
a183 1
	struct workq_task	sc_resume_wqt;
@


1.22
log
@Add suspend/resume logic.  As discussed with phessler@@, incorporating
suggestions by damien@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.21 2010/07/22 10:22:37 kettenis Exp $	*/
a182 1
	void			*powerhook;
@


1.21
log
@Prevent a process from entering wpi_ioctl while another process is
tsleep'ing (for example waiting for the firmware to become alive)
in iwn_init.

ok damien@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.20 2009/11/17 20:35:53 damien Exp $	*/
d184 1
@


1.20
log
@nuke the temperature sensor.
it is totally useless since (contrary to the one in iwn(4)) it
is not in any known unit (can't be converted to degK or degC).
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.19 2009/05/12 19:10:57 damien Exp $	*/
d145 1
@


1.19
log
@switch wpi(4) and iwn(4) over to MCLGETI.
notice that i'm not using the per-ifp mbuf accounting/mitigation yet.
for iwn(4), this means we wont' be able to support full 8KB AMSDU on
machines without an IOMMU since >4KB clusters are not guaranteed to
be physcontig.  fortunately, we can program the hardware to do 4KB
AMSDUs only.
simplify {pwi,iwn}_dma_contig_alloc while i'm here: use BUS_DMA_ZERO
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.18 2008/12/03 17:17:08 damien Exp $	*/
a164 2
	struct ksensordev	sensordev;
	struct ksensor		sensor;
@


1.18
log
@allow users to select a fixed rate.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.17 2008/11/09 10:00:17 damien Exp $	*/
a82 2
#define WPI_RBUF_COUNT	(WPI_RX_RING_COUNT + 32)

a84 7
struct wpi_rbuf {
	struct wpi_softc	*sc;
	caddr_t			vaddr;
	bus_addr_t		paddr;
	SLIST_ENTRY(wpi_rbuf)	next;
};

d87 1
a91 1
	struct wpi_dma_info	buf_dma;
a93 2
	struct wpi_rbuf		rbuf[WPI_RBUF_COUNT];
	SLIST_HEAD(, wpi_rbuf)	freelist;
@


1.17
log
@rework the rate coding code to get rid of the ugly {wpi,iwn}_plcp_signal()
function.  will be required for future MCS support in iwn.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.16 2008/11/08 11:02:09 damien Exp $	*/
d148 1
d150 1
@


1.16
log
@major wpi(4) overhaul.
wpi(4) and iwn(4) used to be in sync but with the latest iwn(4)
changes, this was no longer the case.  that commit repair this.
it brings HW CCMP encryption/decryption among other things.

requires an update of the wpi-firmware package.
please report any regression you might see.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.15 2007/11/19 19:34:25 damien Exp $	*/
d112 1
@


1.15
log
@all TX rings have the same fixed size (256 entries) and this is not
configurable so simplify rings allocation a bit.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.14 2007/09/11 18:52:32 damien Exp $	*/
d4 1
a4 1
 * Copyright (c) 2006, 2007
d67 1
d111 1
d127 14
d151 4
a154 1
	/* shared area */
d158 1
a158 1
	/* firmware DMA transfer */
d161 1
a161 1
	/* rings */
d171 1
d178 4
a181 1
	struct wpi_config	config;
d183 1
@


1.14
log
@- add callbacks for setting EDCA parameters and pairwise crypto keys.
- tweaks to make it look more like iwn(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.13 2007/08/22 19:50:25 damien Exp $	*/
d76 1
a76 1
	struct wpi_tx_data	*data;
a77 1
	int			count;
@


1.13
log
@when running out of rx buffers, allocate a new mbuf and copy the rx
buffer into it using m_copym2() instead of just dropping the received
frame.  otherwise, it may happen that all rx buffers are queued by
tcp_input() waiting for a frame that will never arrive because we are
dropping it.  when it happens, rx stop working and it is hard to
recover from this.
the problem is not visible when using WEP because WEP decryption is
currently done by software and that rx buffers are copied into mbufs
by the software decryption code.
while i'm here, increase the number of rx buffers allocated by wpi(4)
from 80 to 96 to limit the number of copies.

problem and solution found by bluhm@@ - thanks.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.12 2007/06/16 14:15:37 damien Exp $	*/
d144 1
a144 2
	struct wpi_tx_ring	txq[4];
	struct wpi_tx_ring	cmdq;
@


1.12
log
@do not allocate ring descriptors for the service queue.
this queue is used to load the firmware and the descriptors are written
differently (in wpi_load_segment()).
so the DMA descriptors were actually unused.

saves 16KB of memory.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.11 2007/06/05 19:49:40 damien Exp $	*/
d83 1
a83 1
#define WPI_RBUF_COUNT	(WPI_RX_RING_COUNT + 16)
@


1.11
log
@Major wpi(4) update:

1/ Update the driver to use the new firmware images from Intel (2.14.3.)
2/ Read the list of supported channels from the EEPROM instead of having
   it hard-coded in the driver.
3/ Limit output power to what is specified in EEPROM.
4/ Decrease output power for highest OFDM rates to reduce distortion.
5/ Automatically adjust output power to temperature changes for increased
   throughput and range.
6/ Attach the adapter's onboard thermal sensor to the sensor framework.
7/ Replace 'magic' fields in structures with their correct definitions.

NOTE1: you must upgrade your wpi-firmware package to rev 2.14.3 or the
driver will stop working.

NOTE2: if you are using a channel not allowed by the regulatory domain
of your adapter, you will no longer be able to associate.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.10 2006/10/23 18:16:56 damien Exp $	*/
a145 1
	struct wpi_tx_ring	svcq;
@


1.10
log
@make sure wpi_iter_func() is called at splnet.
simplify wpi_dma_contig_alloc().
various cosmetic tweaks while i'm here.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.9 2006/08/28 19:47:43 damien Exp $	*/
d4 1
a4 1
 * Copyright (c) 2006
d113 13
a133 3
	uint32_t		flags;
#define WPI_FLAG_FW_INITED	(1 << 0)

d140 4
d156 4
a159 1
	struct timeout		amrr_ch;
d162 7
a168 2
	uint16_t		pwr1[14];
	uint16_t		pwr2[14];
@


1.9
log
@Completely rework the allocation/management of Rx buffers.
The firmware expects 3KB Rx buffers so we can't just map mbuf clusters
which are only 2KB.  Also it seems that Rx buffers must be aligned on
a 1KB boundary which is not necessary the case with mbuf clusters.
We want to make damn sure the firmware will not DMA anything outside the
mapped Rx buffers.  The size of the Rx buffers is probably configurable
but Intel will refuse to answer to any question regarding the
programmation of the chipset, and a dump of the device registers led to
nowhere.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.8 2006/08/01 12:43:56 damien Exp $	*/
d57 1
@


1.8
log
@- improve scan code to support scanning of 802.11a channels
- fix protection mode
- fix association to APs hiding their SSID
+ various cosmetic tweaks while i'm here
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.7 2006/06/17 19:07:19 damien Exp $	*/
d82 11
a93 1
	bus_dmamap_t	map;
d99 1
d102 2
@


1.7
log
@Move AMRR rate control algorithm out of wpi(4) and ural(4), into net80211.

ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.6 2006/05/25 09:26:58 damien Exp $	*/
d142 1
a142 1
		uint8_t	pad[64];
d149 1
a149 1
		uint8_t	pad[64];
@


1.6
log
@automatic rate control (AMRR) + cosmetic and small fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.5 2006/05/20 15:46:55 damien Exp $	*/
d94 3
a96 7
struct wpi_amrr {
	struct	ieee80211_node ni;	/* must be the first */
	int	txcnt;
	int	retrycnt;
	int	success;
	int	success_threshold;
	int	recovery;
d105 1
@


1.5
log
@more radiotap.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.4 2006/05/20 15:31:30 damien Exp $	*/
d94 9
d130 2
@


1.4
log
@more rx radiotap stats
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.3 2006/05/20 11:47:29 damien Exp $	*/
d44 1
d47 1
d52 3
a54 1
	 (1 << IEEE80211_RADIOTAP_CHANNEL))
@


1.3
log
@- fix short slot time and short preamble settings
- fix basic rates setting
- fix check for WEP encryption (authreq frames might require encryption
  in shared mode)
- cleanup a few things while i'm here
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wpivar.h,v 1.2 2006/05/17 19:50:35 damien Exp $	*/
d22 1
d24 1
d27 3
a29 1
	uint8_t		wr_antsignal;
d33 3
a35 1
	((1 << IEEE80211_RADIOTAP_FLAGS) |				\
d37 3
a39 1
	 (1 << IEEE80211_RADIOTAP_DB_ANTSIGNAL))
@


1.2
log
@mega-commit of unrelated changes:

- factor out contiguous DMA allocations (the same code was duplicated
  in several places and was sometimes incorrect)
- s/EIO/ETIMEDOUT where it makes sense
- s/memset/bzero/g
- don't always bzero the ring descriptors
- scan channels 1-14 instead of 1-13
- remove the auhmode stuff since mgt frames are sent by net80211
- remove the SCANALL flag since the f/w notifies us when it switches
  to another channel
- don't re-enable interrupts on f/w panics
- KASSERT that commands fit in a descriptor
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d111 2
a112 2
	uint16_t		calib1[14];
	uint16_t		calib2[14];
@


1.1
log
@Initial import of wpi(4), a blob-free driver for Intel PRO/Wireless 3945ABG
802.11 adapters as found in Centrino Duo laptops.
More to come but works well enough for me to commit this over a wpi(4).

go for it deraadt@@
@
text
@d44 8
d59 2
a60 4
	bus_dmamap_t		map;
	bus_dma_segment_t	seg;
	bus_dmamap_t		cmd_map;
	bus_dma_segment_t	cmd_seg;
d76 1
a76 2
	bus_dmamap_t		map;
	bus_dma_segment_t	seg;
d95 1
a95 2
	bus_dmamap_t		shmap;
	bus_dma_segment_t	shseg;
a113 1
	int			authmode;
@

