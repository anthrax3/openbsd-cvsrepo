head	1.13;
access;
symbols
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.6
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.18
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.16
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.14
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.12
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.8
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.6
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.4
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.2
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.10.0.18
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.16
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.12
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.14
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.10
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.8
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.6
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.4
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.1
	SMP:1.1.0.8
	OPENBSD_3_3:1.1.0.6
	OPENBSD_3_3_BASE:1.1
	UBC:1.1.0.4
	UBC_SYNC_B:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.02.18.14.24.39;	author bluhm;	state Exp;
branches;
next	1.12;
commitid	byf6gliq76JeDmXn;

1.12
date	2011.10.05.02.52.10;	author jsg;	state Exp;
branches;
next	1.11;

1.11
date	2011.07.26.14.57.57;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2006.11.06.03.52.37;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2006.07.07.02.56.18;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2006.07.05.01.15.30;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2006.07.03.20.55.55;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.05.19.55.10;	author brad;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.15.14.43.37;	author brad;	state Exp;
branches;
next	1.4;

1.4
date	2005.07.02.06.15.44;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.18.04.15.01;	author henric;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.13.19.21.21;	author henric;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.24.18.56.02;	author nate;	state Exp;
branches
	1.1.4.1
	1.1.8.1;
next	;

1.1.4.1
date	2002.10.29.00.33.28;	author art;	state Exp;
branches;
next	;

1.1.8.1
date	2004.02.19.10.56.27;	author niklas;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2004.06.05.23.12.50;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Add support for the Intel i219 network chip to the em(4) driver.
from Christian Ehrhardt; input jsg@@; OK deraadt@@ sthen@@ mpi@@ jsg@@
tested by sthen@@ jca@@ benno@@ bluhm@@
@
text
@/**************************************************************************

Copyright (c) 2001-2006, Intel Corporation
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

 3. Neither the name of the Intel Corporation nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

***************************************************************************/

/* $OpenBSD: if_em_osdep.h,v 1.12 2011/10/05 02:52:10 jsg Exp $ */
/* $FreeBSD: if_em_osdep.h,v 1.11 2003/05/02 21:17:08 pdeuskar Exp $ */

#ifndef _EM_OPENBSD_OS_H_
#define _EM_OPENBSD_OS_H_

#define usec_delay(x)		DELAY(x)
#define msec_delay(x)		DELAY(1000*(x))
/* TODO: Should we be paranoid about delaying in interrupt context? */
#define msec_delay_irq(x)	DELAY(1000*(x))

#define MSGOUT(S, A, B)		printf(S "\n", A, B)
#define DEBUGFUNC(F)		DEBUGOUT(F);
#ifdef DBG
	#define DEBUGOUT(S)			printf(S "\n")
	#define DEBUGOUT1(S,A)			printf(S "\n",A)
	#define DEBUGOUT2(S,A,B)		printf(S "\n",A,B)
	#define DEBUGOUT3(S,A,B,C)		printf(S "\n",A,B,C)
	#define DEBUGOUT7(S,A,B,C,D,E,F,G)	printf(S "\n",A,B,C,D,E,F,G)
#else
	#define DEBUGOUT(S)
	#define DEBUGOUT1(S,A)
	#define DEBUGOUT2(S,A,B)
	#define DEBUGOUT3(S,A,B,C)
	#define DEBUGOUT7(S,A,B,C,D,E,F,G)
#endif

#define CMD_MEM_WRT_INVALIDATE		0x0010  /* BIT_4 */

struct em_osdep
{
	bus_space_tag_t		mem_bus_space_tag;
	bus_space_handle_t	mem_bus_space_handle;
	bus_space_tag_t		io_bus_space_tag;
	bus_space_handle_t	io_bus_space_handle;
	bus_space_tag_t		flash_bus_space_tag;
	bus_space_handle_t	flash_bus_space_handle;
	struct device		*dev;

	struct pci_attach_args	em_pa;

	bus_size_t		em_memsize;
	bus_addr_t		em_membase;
	bus_size_t		em_iosize;
	bus_addr_t		em_iobase;
	bus_size_t		em_flashsize;
	bus_addr_t		em_flashbase;
	size_t			em_flashoffset;
};

#define E1000_WRITE_FLUSH(hw)	E1000_READ_REG(hw, STATUS)

/* Read from an absolute offset in the adapter's memory space */
#define E1000_READ_OFFSET(hw, offset) \
	bus_space_read_4(((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			 ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			  offset)

/* Write to an absolute offset in the adapter's memory space */
#define E1000_WRITE_OFFSET(hw, offset, value) \
	bus_space_write_4(((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			  ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			   offset, value)

/* Convert a register name to its offset in the adapter's memory space */
#define E1000_REG_OFFSET(hw, reg) \
	((hw)->mac_type >= em_82543 ? E1000_##reg : E1000_82542_##reg)

/* Register READ/WRITE macros */

#define E1000_READ_REG(hw, reg) \
	bus_space_read_4(((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			 ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			  ((hw)->mac_type >= em_82543 ? E1000_##reg : E1000_82542_##reg))

#define E1000_WRITE_REG(hw, reg, value) \
	bus_space_write_4(((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			  ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			   ((hw)->mac_type >= em_82543 ? E1000_##reg : E1000_82542_##reg), \
			   value)

#define EM_READ_REG(hw, reg) \
	bus_space_read_4(((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			 ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			  reg)

#define EM_WRITE_REG(hw, reg, value) \
	bus_space_write_4(((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			  ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			   reg, value)


#define E1000_READ_REG_ARRAY(hw, reg, index) \
	bus_space_read_4(((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			 ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			  ((hw)->mac_type >= em_82543 ? E1000_##reg : E1000_82542_##reg) \
			  + ((index) << 2))

#define E1000_WRITE_REG_ARRAY(hw, reg, index, value) \
	bus_space_write_4(((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			  ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			   ((hw)->mac_type >= em_82543 ? E1000_##reg : E1000_82542_##reg) \
			   + ((index) << 2), value)

#define E1000_READ_REG_ARRAY_DWORD E1000_READ_REG_ARRAY
#define E1000_WRITE_REG_ARRAY_DWORD E1000_WRITE_REG_ARRAY

#define E1000_WRITE_REG_ARRAY_BYTE(hw, reg, index, value) \
	bus_space_write_1(((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			  ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			   ((hw)->mac_type >= em_82543 ? E1000_##reg : E1000_82542_##reg \
			   + index), value)

#define E1000_WRITE_REG_ARRAY_WORD(hw, reg, index, value) \
	bus_space_write_2(((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			  ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			   ((hw)->mac_type >= em_82543 ? E1000_##reg : E1000_82542_##reg \
			   + (index << 1)), value)

#define E1000_READ_ICH_FLASH_REG(hw, reg) \
	bus_space_read_4(((struct em_osdep *)(hw)->back)->flash_bus_space_tag, \
			 ((struct em_osdep *)(hw)->back)->flash_bus_space_handle, \
			 ((struct em_osdep *)(hw)->back)->em_flashoffset + reg)

#define E1000_READ_ICH_FLASH_REG16(hw, reg) \
	bus_space_read_2(((struct em_osdep *)(hw)->back)->flash_bus_space_tag, \
			 ((struct em_osdep *)(hw)->back)->flash_bus_space_handle, \
			 ((struct em_osdep *)(hw)->back)->em_flashoffset + reg)

#define E1000_READ_ICH_FLASH_REG32(hw, reg) \
	bus_space_read_4(((struct em_osdep *)(hw)->back)->flash_bus_space_tag, \
			 ((struct em_osdep *)(hw)->back)->flash_bus_space_handle, \
			 ((struct em_osdep *)(hw)->back)->em_flashoffset + reg)


#define E1000_WRITE_ICH_FLASH_REG8(hw, reg, value) \
	bus_space_write_1(((struct em_osdep *)(hw)->back)->flash_bus_space_tag, \
			  ((struct em_osdep *)(hw)->back)->flash_bus_space_handle, \
			  ((struct em_osdep *)(hw)->back)->em_flashoffset + reg, \
			  value)

#define E1000_WRITE_ICH_FLASH_REG16(hw, reg, value) \
	bus_space_write_2(((struct em_osdep *)(hw)->back)->flash_bus_space_tag, \
			  ((struct em_osdep *)(hw)->back)->flash_bus_space_handle, \
			  ((struct em_osdep *)(hw)->back)->em_flashoffset + reg, \
			  value)

#define E1000_WRITE_ICH_FLASH_REG32(hw, reg, value) \
	bus_space_write_4(((struct em_osdep *)(hw)->back)->flash_bus_space_tag, \
			  ((struct em_osdep *)(hw)->back)->flash_bus_space_handle, \
			  ((struct em_osdep *)(hw)->back)->em_flashoffset + reg, \
			  value)

#define em_io_read(hw, port) \
	bus_space_read_4(((struct em_osdep *)(hw)->back)->io_bus_space_tag, \
			 ((struct em_osdep *)(hw)->back)->io_bus_space_handle, (port))

#define em_io_write(hw, port, value) \
	bus_space_write_4(((struct em_osdep *)(hw)->back)->io_bus_space_tag, \
			  ((struct em_osdep *)(hw)->back)->io_bus_space_handle, \
			   (port), (value))

#ifdef DEBUG
#define EM_KASSERT(exp,msg)	do { if (!(exp)) panic msg; } while (0)
#else
#define EM_KASSERT(exp,msg)
#endif

#endif  /* _EM_OPENBSD_OS_H_ */
@


1.12
log
@Add the remaining parts of support for 82580 based devices such as
the Intel I340-T4 and HP NC365T and simplify some of the multi port
handling while here.

Thanks to fredrik danerklint for donating a card, Linden Varley
for setting up a test system and everyone who made sure this
didn't break their existing em setups.
@
text
@d34 1
a34 1
/* $OpenBSD: if_em_osdep.h,v 1.11 2011/07/26 14:57:57 deraadt Exp $ */
d81 1
d155 2
a156 1
			 ((struct em_osdep *)(hw)->back)->flash_bus_space_handle, reg)
d160 2
a161 1
			 ((struct em_osdep *)(hw)->back)->flash_bus_space_handle, reg)
d163 8
a170 2
#define E1000_WRITE_ICH_FLASH_REG(hw, reg, value) \
	bus_space_write_4(((struct em_osdep *)(hw)->back)->flash_bus_space_tag, \
d172 2
a173 1
			   reg, value)
d178 8
a185 1
			   reg, value)
@


1.11
log
@do not describe where DELAY comes from; pointed out by austin; ok jsg
@
text
@d34 1
a34 1
/* $OpenBSD: if_em_osdep.h,v 1.10 2006/11/06 03:52:37 brad Exp $ */
d113 11
@


1.10
log
@Sync up to Intel's latest FreeBSD em driver (6.2.9). Adds support
for a few newer Intel PCIe boards, some code removal and cleaning
and a few bug fixes.

From: Jack Vogel@@Intel

Tested by mk@@ wilfried@@ brad@@ dlg@@, Marc Winiger, Gabriel Kihlman,
Jason Dixon, Johan Mson Lindman, and a few other end users.

Tested with 82543, 82544, 82540, 82545, 82541, 82547, 82546 and 82573.
@
text
@d34 1
a34 1
/* $OpenBSD: if_em_osdep.h,v 1.9 2006/07/07 02:56:18 brad Exp $ */
a39 1
/* The happy-fun DELAY macro is defined in /usr/src/sys/i386/include/clock.h */
@


1.9
log
@Sync up to Intel's latest FreeBSD em driver (6.0.5). Adds support
for new chipset revisions embedded in the ESB2 and ICH8 core logic
chipsets.

The previous attempt at commiting this included an unrelated change
to how the I/O base address was being set and this was the cause of
the breakage.

From: Intel's web-site
@
text
@d34 1
a34 1
/* $OpenBSD: if_em_osdep.h,v 1.8 2006/07/05 01:15:30 brad Exp $ */
d48 1
a48 1
#if DBG
d142 1
a142 1
#define E1000_READ_ICH8_REG(hw, reg) \
d146 1
a146 1
#define E1000_READ_ICH8_REG16(hw, reg) \
d150 1
a150 1
#define E1000_WRITE_ICH8_REG(hw, reg, value) \
d155 1
a155 1
#define E1000_WRITE_ICH8_REG16(hw, reg, value) \
@


1.8
log
@revert back to the older driver as this causes some breakage.
@
text
@d3 1
a3 1
Copyright (c) 2001-2003, Intel Corporation
d34 1
a34 1
/* $OpenBSD: if_em_osdep.h,v 1.6 2006/03/05 19:55:10 brad Exp $ */
d68 4
a77 3

	bus_space_handle_t	em_iobhandle;
	bus_space_tag_t		em_iobtag;
d80 2
d88 3
a90 3
	bus_space_read_4( ((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			    ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			    offset)
d94 3
a96 3
	bus_space_write_4( ((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			    ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			    offset, value)
d102 2
d105 3
a107 1
	E1000_READ_OFFSET(hw, E1000_REG_OFFSET(hw, reg))
d110 4
a113 1
	E1000_WRITE_OFFSET(hw, E1000_REG_OFFSET(hw, reg), value)
d116 4
a119 1
	E1000_READ_OFFSET(hw, E1000_REG_OFFSET(hw, reg) + ((index) << 2))
d121 5
a125 1
#define E1000_READ_REG_ARRAY_DWORD	E1000_READ_REG_ARRAY
d127 2
a128 2
#define E1000_WRITE_REG_ARRAY(hw, reg, index, value) \
	E1000_WRITE_OFFSET(hw, E1000_REG_OFFSET(hw, reg) + ((index) << 2), value)
d131 4
a134 4
	bus_space_write_1( ((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			    ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			    E1000_REG_OFFSET(hw, reg) + (index), \
			    value)
d137 22
a158 7
	bus_space_write_2( ((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			    ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			    E1000_REG_OFFSET(hw, reg) + (index), \
			    value)

#define E1000_WRITE_REG_ARRAY_DWORD(hw, reg, index, value) \
	E1000_WRITE_OFFSET(hw, E1000_REG_OFFSET(hw, reg) + ((index) << 2), value)
d161 2
a162 2
	bus_space_read_4(((struct em_osdep *)(hw)->back)->em_iobtag, \
			    ((struct em_osdep *)(hw)->back)->em_iobhandle, (port))
d165 3
a167 3
	bus_space_write_4(((struct em_osdep *)(hw)->back)->em_iobtag, \
			    ((struct em_osdep *)(hw)->back)->em_iobhandle, \
			    (port), (value))
@


1.7
log
@Sync up to Intel's latest FreeBSD em driver (6.0.5). Adds support
for new chipset revisions embedded in the ESB2 and ICH8 core logic
chipsets.

From: Intel's web-site
@
text
@d3 1
a3 1
Copyright (c) 2001-2006, Intel Corporation
a67 4
	bus_space_tag_t		io_bus_space_tag;
	bus_space_handle_t	io_bus_space_handle;
	bus_space_tag_t		flash_bus_space_tag;
	bus_space_handle_t	flash_bus_space_handle;
d74 3
a78 2
	bus_size_t		em_flashsize;
	bus_addr_t		em_flashbase;
d85 3
a87 3
	bus_space_read_4(((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			 ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			  offset)
d91 3
a93 3
	bus_space_write_4(((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			  ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			   offset, value)
a98 2
/* Register READ/WRITE macros */

d100 1
a100 3
	bus_space_read_4(((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			 ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			  ((hw)->mac_type >= em_82543 ? E1000_##reg : E1000_82542_##reg))
d103 1
a103 4
	bus_space_write_4(((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			  ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			   ((hw)->mac_type >= em_82543 ? E1000_##reg : E1000_82542_##reg), \
			   value)
d106 3
a108 4
	bus_space_read_4(((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			 ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			  ((hw)->mac_type >= em_82543 ? E1000_##reg : E1000_82542_##reg) \
			  + ((index) << 2))
d111 1
a111 7
	bus_space_write_4(((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			  ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			   ((hw)->mac_type >= em_82543 ? E1000_##reg : E1000_82542_##reg) \
			   + ((index) << 2), value)

#define E1000_READ_REG_ARRAY_DWORD E1000_READ_REG_ARRAY
#define E1000_WRITE_REG_ARRAY_DWORD E1000_WRITE_REG_ARRAY
d114 4
a117 4
	bus_space_write_1(((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			  ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			   ((hw)->mac_type >= em_82543 ? E1000_##reg : E1000_82542_##reg \
			   + index), value)
d120 7
a126 22
	bus_space_write_2(((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			  ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			   ((hw)->mac_type >= em_82543 ? E1000_##reg : E1000_82542_##reg \
			   + (index << 1)), value)

#define E1000_READ_ICH8_REG(hw, reg) \
	bus_space_read_4(((struct em_osdep *)(hw)->back)->flash_bus_space_tag, \
			 ((struct em_osdep *)(hw)->back)->flash_bus_space_handle, reg)

#define E1000_READ_ICH8_REG16(hw, reg) \
	bus_space_read_2(((struct em_osdep *)(hw)->back)->flash_bus_space_tag, \
			 ((struct em_osdep *)(hw)->back)->flash_bus_space_handle, reg)

#define E1000_WRITE_ICH8_REG(hw, reg, value) \
	bus_space_write_4(((struct em_osdep *)(hw)->back)->flash_bus_space_tag, \
			  ((struct em_osdep *)(hw)->back)->flash_bus_space_handle, \
			   reg, value)

#define E1000_WRITE_ICH8_REG16(hw, reg, value) \
	bus_space_write_2(((struct em_osdep *)(hw)->back)->flash_bus_space_tag, \
			  ((struct em_osdep *)(hw)->back)->flash_bus_space_handle, \
			   reg, value)
d129 2
a130 2
	bus_space_read_4(((struct em_osdep *)(hw)->back)->io_bus_space_tag, \
			 ((struct em_osdep *)(hw)->back)->io_bus_space_handle, (port))
d133 3
a135 3
	bus_space_write_4(((struct em_osdep *)(hw)->back)->io_bus_space_tag, \
			  ((struct em_osdep *)(hw)->back)->io_bus_space_handle, \
			   (port), (value))
@


1.6
log
@Sprinkle some tabs and a little cleaning.
@
text
@d3 1
a3 1
Copyright (c) 2001-2003, Intel Corporation
d34 1
a34 1
/* $OpenBSD: if_em_osdep.h,v 1.5 2005/10/15 14:43:37 brad Exp $ */
d68 4
a77 3

	bus_space_handle_t	em_iobhandle;
	bus_space_tag_t		em_iobtag;
d80 2
d88 3
a90 3
	bus_space_read_4( ((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			    ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			    offset)
d94 3
a96 3
	bus_space_write_4( ((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			    ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			    offset, value)
d102 2
d105 3
a107 1
	E1000_READ_OFFSET(hw, E1000_REG_OFFSET(hw, reg))
d110 4
a113 1
	E1000_WRITE_OFFSET(hw, E1000_REG_OFFSET(hw, reg), value)
d116 4
a119 1
	E1000_READ_OFFSET(hw, E1000_REG_OFFSET(hw, reg) + ((index) << 2))
d121 5
a125 1
#define E1000_READ_REG_ARRAY_DWORD	E1000_READ_REG_ARRAY
d127 2
a128 2
#define E1000_WRITE_REG_ARRAY(hw, reg, index, value) \
	E1000_WRITE_OFFSET(hw, E1000_REG_OFFSET(hw, reg) + ((index) << 2), value)
d131 4
a134 4
	bus_space_write_1( ((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			    ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			    E1000_REG_OFFSET(hw, reg) + (index), \
			    value)
d137 22
a158 7
	bus_space_write_2( ((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
			    ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
			    E1000_REG_OFFSET(hw, reg) + (index), \
			    value)

#define E1000_WRITE_REG_ARRAY_DWORD(hw, reg, index, value) \
	E1000_WRITE_OFFSET(hw, E1000_REG_OFFSET(hw, reg) + ((index) << 2), value)
d161 2
a162 2
	bus_space_read_4(((struct em_osdep *)(hw)->back)->em_iobtag, \
			    ((struct em_osdep *)(hw)->back)->em_iobhandle, (port))
d165 3
a167 3
	bus_space_write_4(((struct em_osdep *)(hw)->back)->em_iobtag, \
			    ((struct em_osdep *)(hw)->back)->em_iobhandle, \
			    (port), (value))
@


1.5
log
@- put spl's right in the code and remove the macros
- remove splassert()'s
- remove empty bus_dma_tag_destroy macro from code and header
@
text
@d34 1
a34 1
/* $OpenBSD: if_em_osdep.h,v 1.4 2005/07/02 06:15:44 deraadt Exp $ */
a39 2
#define ASSERT(x) if(!(x)) panic("EM: x")

d41 2
a42 2
#define usec_delay(x) DELAY(x)
#define msec_delay(x) DELAY(1000*(x))
d44 1
a44 1
#define msec_delay_irq(x) DELAY(1000*(x))
d46 2
a47 2
#define MSGOUT(S, A, B)     printf(S "\n", A, B)
#define DEBUGFUNC(F)        DEBUGOUT(F);
d49 5
a53 5
	#define DEBUGOUT(S)         printf(S "\n")
	#define DEBUGOUT1(S,A)      printf(S "\n",A)
	#define DEBUGOUT2(S,A,B)    printf(S "\n",A,B)
	#define DEBUGOUT3(S,A,B,C)  printf(S "\n",A,B,C)
	#define DEBUGOUT7(S,A,B,C,D,E,F,G)  printf(S "\n",A,B,C,D,E,F,G)
d62 1
a62 4
#define FALSE               0
#define TRUE                1
#define CMD_MEM_WRT_INVALIDATE          0x0010  /* BIT_4 */
#define PCI_COMMAND_REGISTER            PCI_COMMAND_STATUS_REG 
d66 13
a78 13
	bus_space_tag_t    mem_bus_space_tag;
	bus_space_handle_t mem_bus_space_handle;
	struct device     *dev;

	struct pci_attach_args em_pa;

        bus_size_t              em_memsize;
        bus_addr_t              em_membase;

        bus_space_handle_t      em_iobhandle;
        bus_space_tag_t         em_iobtag;
        bus_size_t              em_iosize;
        bus_addr_t              em_iobase;
d81 1
a81 1
#define E1000_WRITE_FLUSH(hw) E1000_READ_REG(hw, STATUS)
d85 3
a87 3
    bus_space_read_4( ((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
                      ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
                      offset)
d91 3
a93 4
    bus_space_write_4( ((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
                       ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
                       offset, \
                       value)
d97 1
a97 1
    ((hw)->mac_type >= em_82543 ? E1000_##reg : E1000_82542_##reg)
d100 1
a100 1
    E1000_READ_OFFSET(hw, E1000_REG_OFFSET(hw, reg))
d103 1
a103 1
    E1000_WRITE_OFFSET(hw, E1000_REG_OFFSET(hw, reg), value)
d106 1
a106 1
    E1000_READ_OFFSET(hw, E1000_REG_OFFSET(hw, reg) + ((index) << 2))
d108 1
a108 1
#define E1000_READ_REG_ARRAY_DWORD E1000_READ_REG_ARRAY
d111 1
a111 1
    E1000_WRITE_OFFSET(hw, E1000_REG_OFFSET(hw, reg) + ((index) << 2), value)
d114 4
a117 4
    bus_space_write_1( ((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
                       ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
                       E1000_REG_OFFSET(hw, reg) + (index), \
                       value)
d120 4
a123 4
    bus_space_write_2( ((struct em_osdep *)(hw)->back)->mem_bus_space_tag, \
                       ((struct em_osdep *)(hw)->back)->mem_bus_space_handle, \
                       E1000_REG_OFFSET(hw, reg) + (index), \
                       value)
d126 1
a126 1
    E1000_WRITE_OFFSET(hw, E1000_REG_OFFSET(hw, reg) + ((index) << 2), value)
d128 8
a135 8
#define em_io_read(hw, port)						\
        bus_space_read_4(((struct em_osdep *)(hw)->back)->em_iobtag,	\
                ((struct em_osdep *)(hw)->back)->em_iobhandle, (port))

#define em_io_write(hw, port, value)					\
        bus_space_write_4(((struct em_osdep *)(hw)->back)->em_iobtag,	\
                        ((struct em_osdep *)(hw)->back)->em_iobhandle,	\
			(port), (value))
d138 1
a138 1
#define EM_KASSERT(exp,msg)        do { if (!(exp)) panic msg; } while (0)
@


1.4
log
@sync
@
text
@d34 1
a34 1
/* $OpenBSD: if_em_osdep.h,v 1.3 2004/04/18 04:15:01 henric Exp $ */
a147 2
#define bus_dma_tag_destroy(tag)
#define mtx_assert(a, b)        splassert(IPL_NET)
a149 1

@


1.3
log
@Sync with FreeBSD's "em".
@
text
@d34 2
a35 2
/*$FreeBSD: if_em_osdep.h,v 1.11 2003/05/02 21:17:08 pdeuskar Exp $*/
/* $OpenBSD: if_em_osdep.h,v 1.2 2003/06/13 19:21:21 henric Exp $ */
d45 2
d86 1
a86 1
#define E1000_WRITE_FLUSH(a) E1000_READ_REG(a, STATUS)
d88 45
a132 25
#define E1000_READ_REG(a, reg) 						\
   bus_space_read_4( ((struct em_osdep *)(a)->back)->mem_bus_space_tag,	\
	((struct em_osdep *)(a)->back)->mem_bus_space_handle,		\
	((a)->mac_type >= em_82543) ? E1000_##reg : E1000_82542_##reg)

#define E1000_WRITE_REG(a, reg, value)					\
   bus_space_write_4( ((struct em_osdep *)(a)->back)->mem_bus_space_tag, \
	((struct em_osdep *)(a)->back)->mem_bus_space_handle,		\
	((a)->mac_type >= em_82543) ? E1000_##reg : E1000_82542_##reg,	\
	value)

#define E1000_READ_REG_ARRAY(a, reg, offset)				\
   bus_space_read_4( ((struct em_osdep *)(a)->back)->mem_bus_space_tag,	\
		     ((struct em_osdep *)(a)->back)->mem_bus_space_handle, \
		     ((a)->mac_type >= em_82543) ?			\
				(E1000_##reg	   + ((offset) << 2)) :	\
				(E1000_82542_##reg + ((offset) << 2)) ) 

#define E1000_WRITE_REG_ARRAY(a, reg, offset, value)			\
    bus_space_write_4( ((struct em_osdep *)(a)->back)->mem_bus_space_tag, \
	((struct em_osdep *)(a)->back)->mem_bus_space_handle,		\
	((a)->mac_type >= em_82543) ?					\
		(E1000_##reg	   + ((offset) << 2)) :			\
		(E1000_82542_##reg + ((offset) << 2)),			\
	value)
@


1.2
log
@Sync with FreeBSD's "em".

ok deraadt@@
@
text
@d35 1
a35 1
/* $OpenBSD: $ */
d111 17
@


1.1
log
@Driver for Intel PRO/1000 gigabit ethernet adapters.
This driver should work with all current models of gigabit ethernet adapters.

Driver written by Intel
Ported from FreeBSD by Henric Jungheim <henric@@attbi.com>
bus_dma and endian support by me.
@
text
@d3 1
a3 1
Copyright (c) 2001-2002 Intel Corporation
d6 9
a14 11
Redistribution and use in source and binary forms of the Software, with or
without modification, are permitted provided that the following conditions
are met:

 1. Redistributions of source code of the Software may retain the above
    copyright notice, this list of conditions and the following disclaimer.

 2. Redistributions in binary form of the Software may reproduce the above
    copyright notice, this list of conditions and the following disclaimer
    in the documentation and/or other materials provided with the
    distribution.
d17 2
a18 2
    contributors shall be used to endorse or promote products derived from
    this Software without specific prior written permission.
d23 8
a30 8
ARE DISCLAIMED. IN NO EVENT SHALL THE INTEL OR ITS CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
d34 2
a35 1
/*$FreeBSD$*/
d37 2
a38 2
#ifndef _OPENBSD_OS_H_
#define _OPENBSD_OS_H_
a66 9
struct em_dmamap
{
        bus_size_t              emm_size;
        caddr_t                 emm_ptr, emm_kva;
        bus_dma_segment_t       emm_seg;
        bus_dmamap_t            emm_dmamap;
        int                     emm_rseg;
};

d69 2
a72 3
	struct em_dmamap   em_rx;
	struct em_dmamap   em_tx;

a74 2
	bus_space_handle_t      em_bhandle;
        bus_space_tag_t         em_btag;
d82 1
d84 1
a84 1
};
d86 25
a110 31
#define E1000_READ_REG(hw, reg) \
   bus_space_read_4( \
		((struct em_osdep *)(hw)->back)->em_btag, \
		((struct em_osdep *)(hw)->back)->em_bhandle, \
		((hw)->mac_type >= em_82543) ? \
			E1000_##reg : E1000_82542_##reg)

#define E1000_WRITE_REG(hw, reg, value) \
   bus_space_write_4( \
		((struct em_osdep *)(hw)->back)->em_btag, \
		((struct em_osdep *)(hw)->back)->em_bhandle, \
		((hw)->mac_type >= em_82543) ? \
                     	E1000_##reg : E1000_82542_##reg, \
		value)

#define E1000_READ_REG_ARRAY(sc, reg, offset) \
   bus_space_read_4( \
		((struct em_osdep *)(hw)->back)->em_btag, \
		((struct em_osdep *)(hw)->back)->em_bhandle, \
		((hw)->mac_type >= em_82543) ? \
			(E1000_##reg       + ((offset) << 2)) : \
			(E1000_82542_##reg + ((offset) << 2)) )

#define E1000_WRITE_REG_ARRAY(sc, reg, offset, value) \
      bus_space_write_4( \
		((struct em_osdep *)(hw)->back)->em_btag, \
		((struct em_osdep *)(hw)->back)->em_bhandle, \
		((hw)->mac_type >= em_82543) ? \
			(E1000_##reg       + ((offset) << 2)) : \
			(E1000_82542_##reg + ((offset) << 2)), \
		value)
d112 1
a112 1
#endif  /* _OPENBSD_OS_H_ */
@


1.1.8.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d3 1
a3 1
Copyright (c) 2001-2003, Intel Corporation
d6 11
a16 9
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
d19 2
a20 2
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.
d25 8
a32 8
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
d36 1
a36 2
/*$FreeBSD: if_em_osdep.h,v 1.11 2003/05/02 21:17:08 pdeuskar Exp $*/
/* $OpenBSD$ */
d38 2
a39 2
#ifndef _EM_OPENBSD_OS_H_
#define _EM_OPENBSD_OS_H_
d68 9
a78 2
	bus_space_tag_t    mem_bus_space_tag;
	bus_space_handle_t mem_bus_space_handle;
d81 3
d86 2
d95 1
d98 31
a128 27
#define E1000_WRITE_FLUSH(a) E1000_READ_REG(a, STATUS)

#define E1000_READ_REG(a, reg) 						\
   bus_space_read_4( ((struct em_osdep *)(a)->back)->mem_bus_space_tag,	\
	((struct em_osdep *)(a)->back)->mem_bus_space_handle,		\
	((a)->mac_type >= em_82543) ? E1000_##reg : E1000_82542_##reg)

#define E1000_WRITE_REG(a, reg, value)					\
   bus_space_write_4( ((struct em_osdep *)(a)->back)->mem_bus_space_tag, \
	((struct em_osdep *)(a)->back)->mem_bus_space_handle,		\
	((a)->mac_type >= em_82543) ? E1000_##reg : E1000_82542_##reg,	\
	value)

#define E1000_READ_REG_ARRAY(a, reg, offset)				\
   bus_space_read_4( ((struct em_osdep *)(a)->back)->mem_bus_space_tag,	\
		     ((struct em_osdep *)(a)->back)->mem_bus_space_handle, \
		     ((a)->mac_type >= em_82543) ?			\
				(E1000_##reg	   + ((offset) << 2)) :	\
				(E1000_82542_##reg + ((offset) << 2)) ) 

#define E1000_WRITE_REG_ARRAY(a, reg, offset, value)			\
    bus_space_write_4( ((struct em_osdep *)(a)->back)->mem_bus_space_tag, \
	((struct em_osdep *)(a)->back)->mem_bus_space_handle,		\
	((a)->mac_type >= em_82543) ?					\
		(E1000_##reg	   + ((offset) << 2)) :			\
		(E1000_82542_##reg + ((offset) << 2)),			\
	value)
d130 1
a130 1
#endif  /* _EM_OPENBSD_OS_H_ */
@


1.1.8.2
log
@Merge with the trunk
@
text
@a111 17
#define em_io_read(hw, port)						\
        bus_space_read_4(((struct em_osdep *)(hw)->back)->em_iobtag,	\
                ((struct em_osdep *)(hw)->back)->em_iobhandle, (port))

#define em_io_write(hw, port, value)					\
        bus_space_write_4(((struct em_osdep *)(hw)->back)->em_iobtag,	\
                        ((struct em_osdep *)(hw)->back)->em_iobhandle,	\
			(port), (value))

#ifdef DEBUG
#define EM_KASSERT(exp,msg)        do { if (!(exp)) panic msg; } while (0)
#else
#define EM_KASSERT(exp,msg)
#endif
#define bus_dma_tag_destroy(tag)
#define mtx_assert(a, b)        splassert(IPL_NET)

@


1.1.4.1
log
@sync to -current
@
text
@@

