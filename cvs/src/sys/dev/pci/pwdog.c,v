head	1.10;
access;
symbols
	OPENBSD_6_1:1.9.0.12
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.10
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.4
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.10
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.8
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.10
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	OPENBSD_5_0:1.7.0.6
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.6.0.12
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.14
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.10
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.8
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.6
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.4
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6;
locks; strict;
comment	@ * @;


1.10
date	2017.09.08.05.36.52;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	uRv5pa9QDlZaYgwD;

1.9
date	2014.12.10.12.27.57;	author mikeb;	state Exp;
branches;
next	1.8;
commitid	v6PAeA18rydwc5Vx;

1.8
date	2012.10.17.22.32.01;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.08.00.23.53;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2006.12.17.15.56.23;	author mbalmer;	state Exp;
branches;
next	1.5;

1.5
date	2006.12.11.08.25.54;	author mbalmer;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.11.08.15.56;	author mbalmer;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.25.20.04.47;	author mbalmer;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.25.18.06.01;	author mbalmer;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.17.18.31;	author mbalmer;	state Exp;
branches;
next	;


desc
@@


1.10
log
@If you use sys/param.h, you don't need sys/types.h
@
text
@/*	$OpenBSD: pwdog.c,v 1.9 2014/12/10 12:27:57 mikeb Exp $ */

/*
 * Copyright (c) 2006 Marc Balmer <mbalmer@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/systm.h>

#include <machine/bus.h>

#include <dev/pci/pcivar.h>
#include <dev/pci/pcireg.h>
#include <dev/pci/pcidevs.h>

struct pwdog_softc {
	struct device		pwdog_dev;
	bus_space_tag_t		iot;
	bus_space_handle_t	ioh;
};

/* registers */
#define PWDOG_ACTIVATE	0
#define PWDOG_DISABLE	1

int pwdog_probe(struct device *, void *, void *);
void pwdog_attach(struct device *, struct device *, void *);
int pwdog_activate(struct device *, int);
int pwdog_set_timeout(void *, int);

struct cfattach pwdog_ca = {
	sizeof(struct pwdog_softc), pwdog_probe, pwdog_attach,
	NULL, pwdog_activate
};

struct cfdriver pwdog_cd = {
	NULL, "pwdog", DV_DULL
};

const struct pci_matchid pwdog_devices[] = {
	{ PCI_VENDOR_QUANCOM, PCI_PRODUCT_QUANCOM_PWDOG1 }
};

int
pwdog_probe(struct device *parent, void *match, void *aux)
{
	return pci_matchbyid((struct pci_attach_args *)aux, pwdog_devices,
	    sizeof(pwdog_devices) / sizeof(pwdog_devices[0]));
}

void
pwdog_attach(struct device *parent, struct device *self, void *aux)
{
	struct pwdog_softc *pwdog = (struct pwdog_softc *)self;
	struct pci_attach_args *const pa = (struct pci_attach_args *)aux;
	pcireg_t memtype;
	bus_size_t iosize;

	memtype = pci_mapreg_type(pa->pa_pc, pa->pa_tag, PCI_MAPREG_START);
	if (pci_mapreg_map(pa, PCI_MAPREG_START, memtype, 0, &pwdog->iot,
	    &pwdog->ioh, NULL, &iosize, 0)) {
		printf("\n%s: PCI %s region not found\n",
		    pwdog->pwdog_dev.dv_xname,
		    memtype == PCI_MAPREG_TYPE_IO ? "I/O" : "memory");
		return;
	}
	printf("\n");
	bus_space_write_1(pwdog->iot, pwdog->ioh, PWDOG_DISABLE, 0);
	wdog_register(pwdog_set_timeout, pwdog);
}

int
pwdog_activate(struct device *self, int act)
{
	switch (act) {
	case DVACT_POWERDOWN:
		wdog_shutdown(self);
		break;
	}

	return (0);
}

int
pwdog_set_timeout(void *self, int seconds)
{
	struct pwdog_softc *pwdog = (struct pwdog_softc *)self;
	int s;

	s = splclock();
	if (seconds)
		bus_space_write_1(pwdog->iot, pwdog->ioh, PWDOG_ACTIVATE, 0);
	else
		bus_space_write_1(pwdog->iot, pwdog->ioh, PWDOG_DISABLE, 0);
	splx(s);
	return seconds;
}
@


1.9
log
@Convert watchdog(4) devices to use autoconf(9) framework.

ok deraadt, tests on glxpcib and ok mpi
@
text
@d1 1
a1 1
/*	$OpenBSD: pwdog.c,v 1.8 2012/10/17 22:32:01 deraadt Exp $ */
a18 1
#include <sys/types.h>
@


1.8
log
@Swap arguments to wdog_register() since it is nicer, and prepare
wdog_shutdown() for external usage.
@
text
@d1 1
a1 1
/*	$OpenBSD: pwdog.c,v 1.7 2010/04/08 00:23:53 tedu Exp $ */
d43 1
d47 2
a48 1
	sizeof(struct pwdog_softc), pwdog_probe, pwdog_attach
d85 12
@


1.7
log
@these files don't need to include proc.h anymore.  ok oga for agp
@
text
@d1 1
a1 1
/*	$OpenBSD: pwdog.c,v 1.6 2006/12/17 15:56:23 mbalmer Exp $ */
d82 1
a82 1
	wdog_register(pwdog, pwdog_set_timeout);
@


1.6
log
@add a little spacing here, to please mglocker
@
text
@d1 1
a1 1
/*	$OpenBSD: pwdog.c,v 1.5 2006/12/11 08:25:54 mbalmer Exp $ */
a22 1
#include <sys/proc.h>
@


1.5
log
@Only disarm the watchdog if we really want to, not before each re-trigger.
@
text
@d1 1
a1 1
/*	$OpenBSD: pwdog.c,v 1.4 2006/12/11 08:15:56 mbalmer Exp $ */
d62 1
a62 1
	    sizeof(pwdog_devices)/sizeof(pwdog_devices[0]));
@


1.4
log
@Shorten the code, but no functional changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: pwdog.c,v 1.3 2006/11/25 20:04:47 mbalmer Exp $ */
a43 1
void pwdog_init_timer(struct pwdog_softc *);
a85 1
/* ARGSUSED */
a92 1
	bus_space_write_1(pwdog->iot, pwdog->ioh, PWDOG_DISABLE, 0);
d95 2
@


1.3
log
@Convert pwdog(4) over to using pci_matchbyid().
From brad, thanks.
@
text
@d1 1
a1 1
/*	$OpenBSD: pwdog.c,v 1.2 2006/11/25 18:06:01 mbalmer Exp $ */
a45 1
void pwdog_disable_timer(struct pwdog_softc *);
d62 2
a63 2
	return (pci_matchbyid((struct pci_attach_args *)aux, pwdog_devices,
	    sizeof(pwdog_devices)/sizeof(pwdog_devices[0])));
d83 1
a83 1
	pwdog_disable_timer(pwdog);
d95 3
a97 6
	pwdog_disable_timer(pwdog);
	if (!seconds) {
		splx(s);
		return 0;
	}
	bus_space_write_1(pwdog->iot, pwdog->ioh, PWDOG_ACTIVATE, 0);
a99 6
}

void
pwdog_disable_timer(struct pwdog_softc *pwdog)
{
	bus_space_write_1(pwdog->iot, pwdog->ioh, PWDOG_DISABLE, 0);
@


1.2
log
@The PWDOG1 card can be jumpered to work I/O or memory mapped.  Detect
the correct type and use it.
Use a macro for the first BAR and remove an unneeded header file.
help & ok uwe & jsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: pwdog.c,v 1.1 2006/11/25 17:18:31 mbalmer Exp $ */
d56 4
d63 2
a64 6
	struct pci_attach_args *const pa = (struct pci_attach_args *)aux;

	if (PCI_VENDOR(pa->pa_id) != PCI_VENDOR_QUANCOM ||
	    PCI_PRODUCT(pa->pa_id) != PCI_PRODUCT_QUANCOM_PWDOG1)
		return 0;
	return 1;
@


1.1
log
@Add support for the Quancom PWDOG1 watchdog timer card.
See http://www.quancom.com/ for detailed information on the card.
ok deraadt, help and ok uwe
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a22 1
#include <sys/malloc.h>
d72 1
d75 2
a76 1
	if (pci_mapreg_map(pa, 0x10, PCI_MAPREG_TYPE_IO, 0, &pwdog->iot,
d78 3
a80 2
		printf("\n%s: PCI I/O region not found\n",
		    pwdog->pwdog_dev.dv_xname);
d83 1
@

