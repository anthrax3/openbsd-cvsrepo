head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.66
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.64
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.62
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.50
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.58
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.56
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.54
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.52
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.48
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.46
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.44
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.42
	OPENBSD_5_0:1.5.0.40
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.38
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.36
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.32
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.34
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.30
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.28
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.26
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.24
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.22
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.20
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.18
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.16
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.14
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.12
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.10
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.4.0.8
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	SMP:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2002.04.01.11.26.32;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.18.04.37.21;	author nate;	state Exp;
branches
	1.4.4.1
	1.4.8.1;
next	1.3;

1.3
date	2000.10.14.18.04.07;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.04.16.00.56;	author ericj;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.03.19.30.23;	author mickey;	state Exp;
branches;
next	;

1.4.4.1
date	2001.05.14.22.25.57;	author niklas;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2003.03.28.00.38.25;	author niklas;	state Exp;
branches;
next	;

1.4.8.1
date	2002.06.11.03.42.27;	author art;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Add support for PowerStorm 4D20 TGA boqrds with IBM 561 ramdac (aka
32bit TGA) From NetBSD, ok deraadt@@.
@
text
@/* $OpenBSD: tga_conf.c,v 1.4 2001/03/18 04:37:21 nate Exp $ */
/* $NetBSD: tga_conf.c,v 1.5 2001/11/13 07:48:49 lukem Exp $ */

/*
 * Copyright (c) 1995, 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <sys/param.h>
#include <sys/device.h>

#include <dev/pci/pcivar.h>
#include <dev/pci/tgareg.h>
#include <dev/pci/tgavar.h>

#include <dev/ic/bt485var.h>
#include <dev/ic/bt463var.h>
#include <dev/ic/ibm561var.h>

#undef KB
#define KB		* 1024
#undef MB
#define	MB		* 1024 * 1024

static const struct tga_conf tga_configs[TGA_TYPE_UNKNOWN] = {
	/* TGA_TYPE_T8_01 */
	{
		"T8-01",
		bt485_funcs,
		8,
		4 MB,
		2 KB,
		1,	{  2 MB,     0 },	{ 1 MB,    0 },
		0,	{     0,     0 },	{    0,    0 },
	},
	/* TGA_TYPE_T8_02 */
	{
		"T8-02",
		bt485_funcs,
		8,
		4 MB,
		4 KB,
		1,	{  2 MB,     0 },	{ 2 MB,    0 },
		0,	{     0,     0 },	{    0,    0 },
	},
	/* TGA_TYPE_T8_22 */
	{
		"T8-22",
		bt485_funcs,
		8,
		8 MB,
		4 KB,
		1,	{  4 MB,     0 },	{ 2 MB,    0 },
		1,	{  6 MB,     0 },	{ 2 MB,    0 },
	},
	/* TGA_TYPE_T8_44 */
	{
		"T8-44",
		bt485_funcs,
		8,
		16 MB,
		4 KB,
		2,	{  8 MB, 12 MB },	{ 2 MB, 2 MB },
		2,	{ 10 MB, 14 MB },	{ 2 MB, 2 MB },
	},
	/* TGA_TYPE_T32_04 */
	{
		"T32-04",
		bt463_funcs,
		32,
		16 MB,
		8 KB,
		1,	{  8 MB,     0 },	{ 4 MB,    0 },
		0,	{     0,     0 },	{    0,    0 },
	},
	/* TGA_TYPE_T32_08 */
	{
		"T32-08",
		bt463_funcs,
		32,
		16 MB,
		16 KB,
		1,	{  8 MB,    0 },	{ 8 MB,    0 },
		0,	{     0,    0 },	{    0,    0 },
	},
	/* TGA_TYPE_T32_88 */
	{
		"T32-88",
		bt463_funcs,
		32,
		32 MB,
		16 KB,
		1,	{ 16 MB,    0 },	{ 8 MB,    0 },
		1,	{ 24 MB,    0 },	{ 8 MB,    0 },
	},
 	/* TGA_TYPE_POWERSTORM_4D20 */
 	/* XXX: These numbers may be incorrect */
 	{
 		"PS4d20",
 		ibm561_funcs,
 		32,
 		32 MB,
 		16 KB,
 		1,	{ 16 MB,    0 },	{ 8 MB,    0 },
 		1,	{ 24 MB,    0 },	{ 8 MB,    0 },
	},
};

#undef KB
#undef MB

int
tga_identify(dc)
	struct tga_devconfig *dc;
{
	int type;
	int gder;
 	int grev;
	int deep, addrmask, wide;
 	int tga2;

	gder = TGARREG(dc, TGA_REG_GDER);
 	grev = TGARREG(dc, TGA_REG_GREV);

	deep = (gder & 0x1) != 0; /* XXX */
	addrmask = (gder >> 2) & 0x7; /* XXX */
	wide = (gder & 0x200) == 0; /* XXX */
 	tga2 = (grev & 0x20) != 0;


	type = TGA_TYPE_UNKNOWN;

	if (!deep) {
		/* 8bpp frame buffer */

		if (addrmask == 0x0) {
			/* 4MB core map; T8-01 or T8-02 */

			if (!wide)
				type = TGA_TYPE_T8_01;
			else
				type = TGA_TYPE_T8_02;
		} else if (addrmask == 0x1) {
			/* 8MB core map; T8-22 */

			if (wide)			/* sanity */
				type = TGA_TYPE_T8_22;
		} else if (addrmask == 0x3) {
			/* 16MB core map; T8-44 */

			if (wide)			/* sanity */
				type = TGA_TYPE_T8_44;
		}
	} else {
		/* 32bpp frame buffer */
 		if (addrmask == 0x00 && tga2 && wide) {
 			/* My PowerStorm 4d20 shows up this way? */
 			type = TGA_TYPE_POWERSTORM_4D20;
 		}

		if (addrmask == 0x3) {
			/* 16MB core map; T32-04 or T32-08 */

			if (!wide)
				type = TGA_TYPE_T32_04;
			else
				type = TGA_TYPE_T32_08;
		} else if (addrmask == 0x7) {
			/* 32MB core map; T32-88 */

 			if (wide && !tga2)			/* sanity */
				type = TGA_TYPE_T32_88;
		}
	}

	return (type);
}

const struct tga_conf *
tga_getconf(type)
	int type;
{

	if (type >= 0 && type < TGA_TYPE_UNKNOWN)
		return &tga_configs[type];

	return (NULL);
}
@


1.4
log
@New TGA driver for alpha.  Takes advantage of rasops code.
This now gives a working console on alpha when using TGA.
Code from NetBSD.
@
text
@d1 2
a2 2
/* $OpenBSD: tga_conf.c,v 1.3 2000/10/14 18:04:07 aaron Exp $ */
/* $NetBSD: tga_conf.c,v 1.3 2000/03/12 05:32:29 nathanw Exp $ */
d40 1
d118 11
d140 1
d142 1
d145 1
d150 1
d178 4
d193 1
a193 1
			if (wide)			/* sanity */
a210 1

@


1.4.8.1
log
@Sync UBC branch to -current
@
text
@d1 2
a2 2
/* $OpenBSD$ */
/* $NetBSD: tga_conf.c,v 1.5 2001/11/13 07:48:49 lukem Exp $ */
a39 1
#include <dev/ic/ibm561var.h>
a116 11
 	/* TGA_TYPE_POWERSTORM_4D20 */
 	/* XXX: These numbers may be incorrect */
 	{
 		"PS4d20",
 		ibm561_funcs,
 		32,
 		32 MB,
 		16 KB,
 		1,	{ 16 MB,    0 },	{ 8 MB,    0 },
 		1,	{ 24 MB,    0 },	{ 8 MB,    0 },
	},
a127 1
 	int grev;
a128 1
 	int tga2;
a130 1
 	grev = TGARREG(dc, TGA_REG_GREV);
a134 1
 	tga2 = (grev & 0x20) != 0;
a161 4
 		if (addrmask == 0x00 && tga2 && wide) {
 			/* My PowerStorm 4d20 shows up this way? */
 			type = TGA_TYPE_POWERSTORM_4D20;
 		}
d173 1
a173 1
 			if (wide && !tga2)			/* sanity */
d191 1
@


1.4.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/* $OpenBSD: tga_conf.c,v 1.4 2001/03/18 04:37:21 nate Exp $ */
@


1.4.4.2
log
@Sync the SMP branch with 3.3
@
text
@d1 2
a2 2
/* $OpenBSD$ */
/* $NetBSD: tga_conf.c,v 1.5 2001/11/13 07:48:49 lukem Exp $ */
a39 1
#include <dev/ic/ibm561var.h>
a116 11
 	/* TGA_TYPE_POWERSTORM_4D20 */
 	/* XXX: These numbers may be incorrect */
 	{
 		"PS4d20",
 		ibm561_funcs,
 		32,
 		32 MB,
 		16 KB,
 		1,	{ 16 MB,    0 },	{ 8 MB,    0 },
 		1,	{ 24 MB,    0 },	{ 8 MB,    0 },
	},
a127 1
 	int grev;
a128 1
 	int tga2;
a130 1
 	grev = TGARREG(dc, TGA_REG_GREV);
a134 1
 	tga2 = (grev & 0x20) != 0;
a161 4
 		if (addrmask == 0x00 && tga2 && wide) {
 			/* My PowerStorm 4d20 shows up this way? */
 			type = TGA_TYPE_POWERSTORM_4D20;
 		}
d173 1
a173 1
 			if (wide && !tga2)			/* sanity */
d191 1
@


1.3
log
@Add $OpenBSD$ tags.
@
text
@d1 2
a2 2
/* $OpenBSD$ */
/* $NetBSD: tga_conf.c,v 1.4 2000/04/02 18:59:32 nathanw Exp $ */
d42 1
a42 1
#define KB              * 1024
d44 1
a44 1
#define MB                * 1024 * 1024
d47 70
a116 70
        /* TGA_TYPE_T8_01 */
        {
                "T8-01",
                bt485_funcs,
                8,
                4 MB,
                2 KB,
                1,        {  2 MB,     0 },        { 1 MB,    0 },
                0,        {     0,     0 },        {    0,    0 },
        },
        /* TGA_TYPE_T8_02 */
        {
                "T8-02",
                bt485_funcs,
                8,
                4 MB,
                4 KB,
                1,        {  2 MB,     0 },        { 2 MB,    0 },
                0,        {     0,     0 },        {    0,    0 },
        },
        /* TGA_TYPE_T8_22 */
        {
                "T8-22",
                bt485_funcs,
                8,
                8 MB,
                4 KB,
                1,        {  4 MB,     0 },        { 2 MB,    0 },
                1,        {  6 MB,     0 },        { 2 MB,    0 },
        },
        /* TGA_TYPE_T8_44 */
        {
                "T8-44",
                bt485_funcs,
                8,
                16 MB,
                4 KB,
                2,        {  8 MB, 12 MB },        { 2 MB, 2 MB },
                2,        { 10 MB, 14 MB },        { 2 MB, 2 MB },
        },
        /* TGA_TYPE_T32_04 */
        {
                "T32-04",
                bt463_funcs,
                32,
                16 MB,
                8 KB,
                1,        {  8 MB,     0 },        { 4 MB,    0 },
                0,        {     0,     0 },        {    0,    0 },
        },
        /* TGA_TYPE_T32_08 */
        {
                "T32-08",
                bt463_funcs,
                32,
                16 MB,
                16 KB,
                1,        {  8 MB,    0 },        { 8 MB,    0 },
                0,        {     0,    0 },        {    0,    0 },
        },
        /* TGA_TYPE_T32_88 */
        {
                "T32-88",
                bt463_funcs,
                32,
                32 MB,
                16 KB,
                1,        { 16 MB,    0 },        { 8 MB,    0 },
                1,        { 24 MB,    0 },        { 8 MB,    0 },
        },
d123 2
a124 2
tga_identify(regs)
	tga_reg_t *regs;
d126 51
a176 2
        int type;
        int deep, addrmask, wide;
d178 1
a178 46
	deep = (regs[TGA_REG_GDER] & 0x1) != 0;                /* XXX */
	addrmask = ((regs[TGA_REG_GDER] >> 2) & 0x7);        /* XXX */
	wide = (regs[TGA_REG_GDER] & 0x200) == 0;        /* XXX */

        type = TGA_TYPE_UNKNOWN;

        if (!deep) {
                /* 8bpp frame buffer */

                if (addrmask == 0x0) {
                        /* 4MB core map; T8-01 or T8-02 */

                        if (!wide)
                                type = TGA_TYPE_T8_01;
                        else
                                type = TGA_TYPE_T8_02;
                } else if (addrmask == 0x1) {
                        /* 8MB core map; T8-22 */

                        if (wide)                        /* sanity */
                                type = TGA_TYPE_T8_22;
                } else if (addrmask == 0x3) {
                        /* 16MB core map; T8-44 */

                        if (wide)                        /* sanity */
                                type = TGA_TYPE_T8_44;
                }
        } else {
                /* 32bpp frame buffer */

                if (addrmask == 0x3) {
                        /* 16MB core map; T32-04 or T32-08 */

                        if (!wide)
                                type = TGA_TYPE_T32_04;
                        else
                                type = TGA_TYPE_T32_08;
                } else if (addrmask == 0x7) {
                        /* 32MB core map; T32-88 */

                        if (wide)                        /* sanity */
                                type = TGA_TYPE_T32_88;
                }
        }

        return (type);
d183 1
a183 1
        int type;
d186 2
a187 2
        if (type >= 0 && type < TGA_TYPE_UNKNOWN)
                return &tga_configs[type];
d189 1
a189 1
        return (NULL);
d191 1
@


1.2
log
@
add support for tga2; from NetBSD
@
text
@d1 1
@


1.1
log
@closer approximation to an alpha using new wscons.
tga moved to dev/pci.
by request from alpha people.
@
text
@d1 1
a1 1
/* $NetBSD: tga_conf.c,v 1.1 1998/04/15 20:16:32 drochner Exp $ */
d37 3
d41 1
a41 1
#define KB		* 1024
d43 1
a43 1
#define	MB		* 1024 * 1024
d46 70
a115 70
	/* TGA_TYPE_T8_01 */
	{
		"T8-01",
		&tga_ramdac_bt485,
		8,
		4 MB,
		2 KB,
		1,	{  2 MB,     0 },	{ 1 MB,    0 },
		0,	{     0,     0 },	{    0,    0 },
	},
	/* TGA_TYPE_T8_02 */
	{
		"T8-02",
		&tga_ramdac_bt485,
		8,
		4 MB,
		4 KB,
		1,	{  2 MB,     0 },	{ 2 MB,    0 },
		0,	{     0,     0 },	{    0,    0 },
	},
	/* TGA_TYPE_T8_22 */
	{
		"T8-22",
		&tga_ramdac_bt485,
		8,
		8 MB,
		4 KB,
		1,	{  4 MB,     0 },	{ 2 MB,    0 },
		1,	{  6 MB,     0 },	{ 2 MB,    0 },
	},
	/* TGA_TYPE_T8_44 */
	{
		"T8-44",
		&tga_ramdac_bt485,
		8,
		16 MB,
		4 KB,
		2,	{  8 MB, 12 MB },	{ 2 MB, 2 MB },
		2,	{ 10 MB, 14 MB },	{ 2 MB, 2 MB },
	},
	/* TGA_TYPE_T32_04 */
	{
		"T32-04",
		&tga_ramdac_bt463,
		32,
		16 MB,
		8 KB,
		1,	{  8 MB,     0 },	{ 4 MB,    0 },
		0,	{     0,     0 },	{    0,    0 },
	},
	/* TGA_TYPE_T32_08 */
	{
		"T32-08",
		&tga_ramdac_bt463,
		32,
		16 MB,
		16 KB,
		1,	{  8 MB,    0 },	{ 8 MB,    0 },
		0,	{     0,    0 },	{    0,    0 },
	},
	/* TGA_TYPE_T32_88 */
	{
		"T32-88",
		&tga_ramdac_bt463,
		32,
		32 MB,
		16 KB,
		1,	{ 16 MB,    0 },	{ 8 MB,    0 },
		1,	{ 24 MB,    0 },	{ 8 MB,    0 },
	},
d125 2
a126 2
	int type;
	int deep, addrmask, wide;
d128 44
a171 44
	deep = (regs[TGA_REG_GDER] & 0x1) != 0;		/* XXX */
	addrmask = ((regs[TGA_REG_GDER] >> 2) & 0x7);	/* XXX */
	wide = (regs[TGA_REG_GDER] & 0x200) == 0;	/* XXX */

	type = TGA_TYPE_UNKNOWN;

	if (!deep) {
		/* 8bpp frame buffer */

		if (addrmask == 0x0) {
			/* 4MB core map; T8-01 or T8-02 */

			if (!wide)
				type = TGA_TYPE_T8_01;
			else
				type = TGA_TYPE_T8_02;
		} else if (addrmask == 0x1) {
			/* 8MB core map; T8-22 */

			if (wide)			/* sanity */
				type = TGA_TYPE_T8_22;
		} else if (addrmask == 0x3) {
			/* 16MB core map; T8-44 */

			if (wide)			/* sanity */
				type = TGA_TYPE_T8_44;
		}
	} else {
		/* 32bpp frame buffer */

		if (addrmask == 0x3) {
			/* 16MB core map; T32-04 or T32-08 */

			if (!wide)
				type = TGA_TYPE_T32_04;
			else
				type = TGA_TYPE_T32_08;
		} else if (addrmask == 0x7) {
			/* 32MB core map; T32-88 */

			if (wide)			/* sanity */
				type = TGA_TYPE_T32_88;
		}
	}
d173 1
a173 1
	return (type);
d178 1
a178 1
	int type;
d181 2
a182 2
	if (type >= 0 && type < TGA_TYPE_UNKNOWN)
		return &tga_configs[type];
d184 1
a184 1
	return (NULL);
a185 1

@

