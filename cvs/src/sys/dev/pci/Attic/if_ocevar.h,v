head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	2012.11.09.20.31.43;	author mikeb;	state dead;
branches;
next	1.11;

1.11
date	2012.11.09.18.58.17;	author mikeb;	state Exp;
branches;
next	1.10;

1.10
date	2012.11.09.18.53.04;	author mikeb;	state Exp;
branches;
next	1.9;

1.9
date	2012.11.09.18.40.13;	author mikeb;	state Exp;
branches;
next	1.8;

1.8
date	2012.11.08.19.48.37;	author mikeb;	state Exp;
branches;
next	1.7;

1.7
date	2012.11.08.18.56.54;	author mikeb;	state Exp;
branches;
next	1.6;

1.6
date	2012.11.05.20.05.39;	author mikeb;	state Exp;
branches;
next	1.5;

1.5
date	2012.11.03.00.23.25;	author mikeb;	state Exp;
branches;
next	1.4;

1.4
date	2012.11.02.23.34.57;	author mikeb;	state Exp;
branches;
next	1.3;

1.3
date	2012.10.31.20.15.43;	author mikeb;	state Exp;
branches;
next	1.2;

1.2
date	2012.10.30.17.38.23;	author mikeb;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.29.18.36.42;	author mikeb;	state Exp;
branches;
next	;


desc
@@


1.12
log
@merge if_ocevar.h and if_oce.c; do some minor cleanup while here
@
text
@/* 	$OpenBSD: if_ocevar.h,v 1.11 2012/11/09 18:58:17 mikeb Exp $	*/

/*-
 * Copyright (C) 2012 Emulex
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Emulex Corporation nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Contact Information:
 * freebsd-drivers@@emulex.com
 *
 * Emulex
 * 3333 Susan Street
 * Costa Mesa, CA 92626
 */

/* This should be powers of 2. Like 2,4,8 & 16 */
#define OCE_MAX_RSS		4 /* TODO: 8 */
#define OCE_LEGACY_MODE_RSS	4 /* For BE3 Legacy mode */

#define OCE_MAX_RQ		OCE_MAX_RSS + 1 /* one default queue */
#define OCE_MAX_WQ		8

#define OCE_MAX_EQ		32
#define OCE_MAX_CQ		OCE_MAX_RQ + OCE_MAX_WQ + 1 /* one MCC queue */
#define OCE_MAX_CQ_EQ		8 /* Max CQ that can attached to an EQ */

#define OCE_DEFAULT_EQD		80
#define OCE_RQ_BUF_SIZE		2048
#define OCE_LSO_MAX_SIZE	(64 * 1024)

#define OCE_MIN_MTU		256
#define OCE_MAX_MTU		9000

#define OCE_MAX_TX_ELEMENTS	29
#define OCE_MAX_TX_DESC		1024
#define OCE_MAX_TX_SIZE		65535
#define OCE_MAX_RX_SIZE		4096
#define OCE_MAX_RQ_POSTS	255
#define OCE_MAX_RSP_HANDLED	64

#define OCE_RSS_IPV4		0x1
#define OCE_RSS_TCP_IPV4	0x2
#define OCE_RSS_IPV6		0x4
#define OCE_RSS_TCP_IPV6	0x8

#define BSWAP_8(x)		((x) & 0xff)
#define BSWAP_16(x)		((BSWAP_8(x) << 8) | BSWAP_8((x) >> 8))
#define BSWAP_32(x)		((BSWAP_16(x) << 16) | BSWAP_16((x) >> 16))
#define BSWAP_64(x)		((BSWAP_32(x) << 32) | BSWAP_32((x) >> 32))

#define for_all_wq_queues(sc, wq, i) 	\
		for (i = 0, wq = sc->wq[0]; i < sc->nwqs; i++, wq = sc->wq[i])
#define for_all_rq_queues(sc, rq, i) 	\
		for (i = 0, rq = sc->rq[0]; i < sc->nrqs; i++, rq = sc->rq[i])
#define for_all_eq_queues(sc, eq, i) 	\
		for (i = 0, eq = sc->eq[0]; i < sc->neqs; i++, eq = sc->eq[i])
#define for_all_cq_queues(sc, cq, i) 	\
		for (i = 0, cq = sc->cq[0]; i < sc->ncqs; i++, cq = sc->cq[i])

#define OCE_MEM_KVA(_m)		((void *)((_m)->vaddr))

#define OCE_RING_FOREACH(_r, _v, _c)	\
	for ((_v) = oce_ring_first(_r); _c; (_v) = oce_ring_next(_r))

struct oce_pkt {
	struct mbuf *		mbuf;
	bus_dmamap_t		map;
	int			nsegs;
	SIMPLEQ_ENTRY(oce_pkt)	entry;
};
SIMPLEQ_HEAD(oce_pkt_list, oce_pkt);

struct oce_dma_mem {
	bus_dma_tag_t		tag;
	bus_dmamap_t		map;
	bus_dma_segment_t	segs;
	int			nsegs;
	bus_size_t		size;
	caddr_t			vaddr;
	bus_addr_t		paddr;
};

struct oce_ring {
	int			index;
	int			nitems;
	int			nused;
	int			isize;
	struct oce_dma_mem	dma;
};

#define TRUE			1
#define FALSE			0

#define MBX_TIMEOUT_SEC		5

/* size of the packet descriptor array in a transmit queue */
#define OCE_TX_RING_SIZE	512
#define OCE_RX_RING_SIZE	1024

struct oce_softc;

enum cq_len {
	CQ_LEN_256  = 256,
	CQ_LEN_512  = 512,
	CQ_LEN_1024 = 1024
};

enum eq_len {
	EQ_LEN_256  = 256,
	EQ_LEN_512  = 512,
	EQ_LEN_1024 = 1024,
	EQ_LEN_2048 = 2048,
	EQ_LEN_4096 = 4096
};

enum eqe_size {
	EQE_SIZE_4  = 4,
	EQE_SIZE_16 = 16
};

enum qtype {
	QTYPE_EQ,
	QTYPE_MQ,
	QTYPE_WQ,
	QTYPE_RQ,
	QTYPE_CQ,
	QTYPE_RSS
};

struct oce_eq {
	struct oce_softc *	sc;
	struct oce_ring *	ring;
	enum qtype		type;
	int			id;

	struct oce_cq *		cq[OCE_MAX_CQ_EQ];
	int			cq_valid;

	int			nitems;
	int			isize;
	int			delay;
};

struct oce_cq {
	struct oce_softc *	sc;
	struct oce_ring *	ring;
	enum qtype		type;
	int			id;

	struct oce_eq *		eq;

	void			(*cq_intr)(void *);
	void *			cb_arg;

	int			nitems;
	int			nodelay;
	int			eventable;
	int			ncoalesce;
};

struct oce_mq {
	struct oce_softc *	sc;
	struct oce_ring *	ring;
	enum qtype		type;
	int			id;

	struct oce_cq *		cq;

	int			nitems;
};

struct oce_wq {
	struct oce_softc *	sc;
	struct oce_ring *	ring;
	enum qtype		type;
	int			id;

	struct oce_cq *		cq;

	struct oce_pkt_list	pkt_list;
	struct oce_pkt_list	pkt_free;

	int			nitems;
};

struct oce_rq {
	struct oce_softc *	sc;
	struct oce_ring *	ring;
	enum qtype		type;
	int			id;

	struct oce_cq *		cq;

	struct oce_pkt_list	pkt_list;
	struct oce_pkt_list	pkt_free;

	uint32_t		pending;

	uint32_t		rss_cpuid;

#ifdef OCE_LRO
	struct lro_ctrl		lro;
	int			lro_pkts_queued;
#endif

	int			nitems;
	int			fragsize;
	int			mtu;
	int			rss;
};

#define OCE_F_BE2		0x00000001
#define OCE_F_BE3		0x00000002
#define OCE_F_BE3_NATIVE	0x00000004
#define OCE_F_XE201		0x00000008
#define OCE_F_RESET_RQD		0x00000100
#define OCE_F_MBOX_ENDIAN_RQD	0x00000200

struct oce_softc {
	struct device		dev;

	uint32_t		flags;

	bus_dma_tag_t		dmat;

	bus_space_tag_t		cfg_iot;
	bus_space_handle_t	cfg_ioh;
	bus_size_t		cfg_size;

	bus_space_tag_t		csr_iot;
	bus_space_handle_t	csr_ioh;
	bus_size_t		csr_size;

	bus_space_tag_t		db_iot;
	bus_space_handle_t	db_ioh;
	bus_size_t		db_size;

	struct arpcom		arpcom;
	struct ifmedia		media;
	ushort			link_up;
	ushort			link_speed;
	uint			flow_flags;

	struct oce_dma_mem	bsmbx;

	uint32_t		port_id;
	uint32_t		function_mode;

	struct oce_wq *		wq[OCE_MAX_WQ];	/* TX work queues */
	struct oce_rq *		rq[OCE_MAX_RQ];	/* RX work queues */
	struct oce_cq *		cq[OCE_MAX_CQ];	/* Completion queues */
	struct oce_eq *		eq[OCE_MAX_EQ];	/* Event queues */
	struct oce_mq *		mq;		/* Mailbox queue */

	ushort			neqs;
	ushort			ncqs;
	ushort			nrqs;
	ushort			nwqs;
	ushort			intr_count;
	ushort			tx_ring_size;
	ushort			rx_ring_size;
	ushort			rx_frag_size;
	ushort			rss_enable;

	uint32_t		if_id;		/* interface ID */
	uint32_t		pmac_id;	/* PMAC id */
	char			macaddr[ETHER_ADDR_LEN];

	uint32_t		pvid;

	uint64_t		rx_errors;
	uint64_t		tx_errors;

	struct timeout		timer;
	struct timeout		rxrefill;
};

#define IS_BE(sc)		ISSET((sc)->flags, OCE_F_BE2 | OCE_F_BE3)
#define IS_XE201(sc)		ISSET((sc)->flags, OCE_F_XE201)

#define oce_dma_sync(d, f) \
	bus_dmamap_sync((d)->tag, (d)->map, 0, (d)->map->dm_mapsize, f)

#define DW_SWAP(x, l)

#define ADDR_HI(x)		((uint32_t)((uint64_t)(x) >> 32))
#define ADDR_LO(x)		((uint32_t)((uint64_t)(x) & 0xffffffff))

#define IFCAP_HWCSUM \
	(IFCAP_CSUM_IPv4 | IFCAP_CSUM_TCPv4 | IFCAP_CSUM_UDPv4)
#define IF_LRO_ENABLED(ifp)	ISSET((ifp)->if_capabilities, IFCAP_LRO)
#define IF_LSO_ENABLED(ifp)	ISSET((ifp)->if_capabilities, IFCAP_TSO4)
#define IF_CSUM_ENABLED(ifp)	ISSET((ifp)->if_capabilities, IFCAP_HWCSUM)

static inline int
ilog2(unsigned int v)
{
	int r = 0;

	while (v >>= 1)
		r++;
	return (r);
}
@


1.11
log
@cleanup oce_encap
@
text
@d1 1
a1 1
/* 	$OpenBSD: if_ocevar.h,v 1.10 2012/11/09 18:53:04 mikeb Exp $	*/
@


1.10
log
@improve flow control code
@
text
@d1 1
a1 1
/* 	$OpenBSD: if_ocevar.h,v 1.9 2012/11/09 18:40:13 mikeb Exp $	*/
a83 2

#define RING_NUM_FREE(_r)	((_r)->nitems - (_r)->nused)
@


1.9
log
@To be able to receive ethernet packets with VLAN tags oce_set_promisc
should not disable VLAN promiscuous mode set up by oce_config_vlan.
Move VLAN and Flow Control configuration to oce_init so that it would
be rerun every time we plumb the interface.
@
text
@d1 1
a1 1
/* 	$OpenBSD: if_ocevar.h,v 1.8 2012/11/08 19:48:37 mikeb Exp $	*/
a70 5
/* flow control definitions */
#define OCE_FC_NONE		0x00000000
#define OCE_FC_TX		0x00000001
#define OCE_FC_RX		0x00000002

d269 1
a294 2

	uint32_t		flow_control;
@


1.8
log
@make link state update code more comprehensible by using some ideas from myx(4)
@
text
@d1 1
a1 1
/* 	$OpenBSD: if_ocevar.h,v 1.7 2012/11/08 18:56:54 mikeb Exp $	*/
a40 3
/* OCE device driver module component revision informaiton */
#define COMPONENT_REVISION	"4.2.127.0"

a75 14
/* Interface capabilities to give device when creating interface */
#define OCE_CAPAB_FLAGS 	(MBX_RX_IFACE_FLAGS_BROADCAST     | \
				 MBX_RX_IFACE_FLAGS_UNTAGGED      | \
				 MBX_RX_IFACE_FLAGS_PROMISC       | \
				 MBX_RX_IFACE_FLAGS_MCAST_PROMISC)
				/* MBX_RX_IFACE_FLAGS_RSS | \ */
				/* MBX_RX_IFACE_FLAGS_PASS_L3L4_ERR) */

/* Interface capabilities to enable by default (others set dynamically) */
#define OCE_CAPAB_ENABLE	(MBX_RX_IFACE_FLAGS_BROADCAST | \
				 MBX_RX_IFACE_FLAGS_UNTAGGED)
				/* MBX_RX_IFACE_FLAGS_RSS        | \ */
				/* MBX_RX_IFACE_FLAGS_PASS_L3L4_ERR) */

a296 1
	uint32_t		nifs;		/* number of adapter interfaces, 0 or 1 */
a297 1

a298 2

	uint32_t		if_cap_flags;
@


1.7
log
@hardware supports mtu values from 256 up to 9000;
figured out the hard way, linux driver agrees
@
text
@d1 1
a1 1
/* 	$OpenBSD: if_ocevar.h,v 1.6 2012/11/05 20:05:39 mikeb Exp $	*/
a260 11
struct link_status {
	uint8_t			physical_port;
	uint8_t			mac_duplex;
	uint8_t			mac_speed;
	uint8_t			mac_fault;
	uint8_t			mgmt_mac_duplex;
	uint8_t			mgmt_mac_speed;
	uint16_t		qos_link_speed;
	uint32_t		logical_link_status;
} __packed;

d289 2
a290 5
	int			link_active;
	uint8_t			link_status;
	uint8_t			link_speed;
	uint8_t			duplex;
	uint32_t		qos_link_speed;
@


1.6
log
@Steal SIMPLEQ-based packet descriptor managing code from myx(4)
to simplify a whole bunch of things. And despite this being the
main purpose of the commit I'm also sneaking in loads of minor
and unrelated cleanup since separating it out would be just too
much work. Enjoy!
@
text
@d1 1
a1 1
/* 	$OpenBSD: if_ocevar.h,v 1.5 2012/11/03 00:23:25 mikeb Exp $	*/
d58 3
a60 4
#define OCE_MAX_JUMBO_FRAME_SIZE 16360
#define OCE_MAX_MTU		(OCE_MAX_JUMBO_FRAME_SIZE -	\
				 ETHER_VLAN_ENCAP_LEN -		\
				 ETHER_HDR_LEN - ETHER_CRC_LEN)
@


1.5
log
@s/OCE_DMAPTR/OCE_MEM_KVA/ and don't require a type
@
text
@d1 1
a1 1
/* 	$OpenBSD: if_ocevar.h,v 1.3 2012/10/31 20:15:43 mikeb Exp $	*/
a107 14
enum {
	PHY_TYPE_CX4_10GB = 0,
	PHY_TYPE_XFP_10GB,
	PHY_TYPE_SFP_1GB,
	PHY_TYPE_SFP_PLUS_10GB,
	PHY_TYPE_KR_10GB,
	PHY_TYPE_KX4_10GB,
	PHY_TYPE_BASET_10GB,
	PHY_TYPE_BASET_1GB,
	PHY_TYPE_BASEX_1GB,
	PHY_TYPE_SGMII,
	PHY_TYPE_DISABLED = 255
};

d115 1
a115 1
struct oce_packet_desc {
d119 1
d121 1
a148 2
#define OCE_WQ_PACKET_ARRAY_SIZE (OCE_TX_RING_SIZE/2)
#define OCE_RQ_PACKET_ARRAY_SIZE (OCE_RX_RING_SIZE)
a179 6
struct eq_config {
	enum eq_len		q_len;
	enum eqe_size		item_size;
	int			eqd;
};

d189 3
a191 10
	struct eq_config	cfg;
};

struct cq_config {
	enum cq_len		q_len;
	int			item_size;
	int			nodelay;
	int			dma_coalescing;
	int			ncoalesce;
	int			eventable;
a201 2
	struct cq_config 	cfg;

a203 1
};
d205 4
a208 3
struct mq_config {
	int			eqd;
	int			q_len;
d219 1
a219 9
	struct mq_config	cfg;
};

struct wq_config {
	int			wq_type;
	int			buf_size;
	int			q_len;
	int			eqd;		/* interrupt delay */
	int			nbufs;
a227 2
	bus_dma_tag_t		tag;

a228 1
	struct oce_packet_desc	pckts[OCE_WQ_PACKET_ARRAY_SIZE];
d230 2
a231 2
	uint32_t		packets_in;
	uint32_t		packets_out;
d233 1
a233 11
	struct wq_config	cfg;
};

struct rq_config {
	int			q_len;
	int			frag_size;
	int			mtu;
	int			if_id;
	int			is_rss_queue;
	int			eqd;
	int			nbufs;
d242 1
a242 1
	bus_dma_tag_t		tag;
d244 2
a245 2
	struct oce_cq *		cq;
	struct oce_packet_desc	pckts[OCE_RQ_PACKET_ARRAY_SIZE];
a246 2
	uint32_t		packets_in;
	uint32_t		packets_out;
d256 4
a259 1
	struct rq_config	cfg;
d285 1
a285 1
	struct pci_attach_args	pa;
d325 1
a325 1
	ushort			rq_frag_size;
a337 1
	int			be3_native;
@


1.4
log
@Introduce better and simpler producer/consumer queue iterator
implementation that is usable for both producer (rq, wq, mq)
and consumer (eq, cq) rings.
@
text
@d124 1
a124 1
#define OCE_DMAPTR(_o, _t) 	((_t *)(_o)->vaddr)
d126 1
a126 1
#define OCE_RING_FOREACH(_r, _v, _c)		\
d197 1
a197 4
	int			q_vector_num;
	int			min_eqd;
	int			max_eqd;
	int			cur_eqd;
a359 3
	uint32_t		function_caps;
	uint32_t		max_tx_rings;
	uint32_t		max_rx_rings;
@


1.3
log
@minor style cleanup
@
text
@d1 1
a1 1
/* 	$OpenBSD: if_ocevar.h,v 1.2 2012/10/30 17:38:23 mikeb Exp $	*/
d122 1
a122 11
/* Ring related */
#define	GET_Q_NEXT(_START, _STEP, _END)	\
	((((_START) + (_STEP)) < (_END)) ? ((_START) + (_STEP))	\
	: (((_START) + (_STEP)) - (_END)))

#define	RING_NUM_FREE(_r)	\
	(uint32_t)((_r)->num_items - (_r)->num_used)
#define	RING_GET(_r, _n)	\
	(_r)->cidx = GET_Q_NEXT((_r)->cidx, _n, (_r)->num_items)
#define	RING_PUT(_r, _n)	\
	(_r)->pidx = GET_Q_NEXT((_r)->pidx, _n, (_r)->num_items)
d126 2
a127 5
#define	RING_GET_CONSUMER_ITEM_VA(_r, _t)	\
	(OCE_DMAPTR(&(_r)->dma, _t) + (_r)->cidx)
#define	RING_GET_PRODUCER_ITEM_VA(_r, _t)	\
	(OCE_DMAPTR(&(_r)->dma, _t) + (_r)->pidx)

a132 1
	uint32_t		wqe_idx;
d146 4
a149 5
	uint16_t		cidx;	/* Get ptr */
	uint16_t		pidx;	/* Put Ptr */
	size_t			item_size;
	size_t			num_items;
	uint32_t		num_used;
@


1.2
log
@introduce specialized register read and write functions
oce_{read,write}_{cfg,csr,db} for different pci bars
@
text
@d1 1
a1 1
/* 	$OpenBSD: if_ocevar.h,v 1.1 2012/10/29 18:36:42 mikeb Exp $	*/
d42 1
a42 10
#define COMPONENT_REVISION		"4.2.127.0"

#define IS_BE(sc)	((sc->flags & OCE_FLAGS_BE2) | \
			 (sc->flags & OCE_FLAGS_BE3) ? 1 : 0)
#define IS_XE201(sc)	((sc->flags & OCE_FLAGS_XE201) ? 1 : 0)

/* proportion Service Level Interface queues */
#define OCE_MAX_UNITS			2
#define OCE_MAX_PPORT			OCE_MAX_UNITS
#define OCE_MAX_VPORT			OCE_MAX_UNITS
d45 2
a46 5
#define OCE_MAX_RSS			4 /* TODO: 8 */
#define OCE_LEGACY_MODE_RSS		4 /* For BE3 Legacy mode */

#define OCE_MIN_RQ			1
#define OCE_MIN_WQ			1
d48 2
a49 2
#define OCE_MAX_RQ			OCE_MAX_RSS + 1 /* one default queue */
#define OCE_MAX_WQ			8
d51 23
a73 24
#define OCE_MAX_EQ			32
#define OCE_MAX_CQ			OCE_MAX_RQ + OCE_MAX_WQ + 1 /* one MCC queue */
#define OCE_MAX_CQ_EQ			8 /* Max CQ that can attached to an EQ */

#define OCE_DEFAULT_WQ_EQD		80
#define OCE_MAX_PACKET_Q		16
#define OCE_RQ_BUF_SIZE			2048
#define OCE_LSO_MAX_SIZE		(64 * 1024)
#define LONG_TIMEOUT			30
#define OCE_MAX_JUMBO_FRAME_SIZE	16360
#define OCE_MAX_MTU			(OCE_MAX_JUMBO_FRAME_SIZE - \
					 ETHER_VLAN_ENCAP_LEN -     \
					 ETHER_HDR_LEN - ETHER_CRC_LEN)

#define OCE_MAX_TX_ELEMENTS		29
#define OCE_MAX_TX_DESC			1024
#define OCE_MAX_TX_SIZE			65535
#define OCE_MAX_RX_SIZE			4096
#define OCE_MAX_RQ_POSTS		255

#define RSS_ENABLE_IPV4			0x1
#define RSS_ENABLE_TCP_IPV4		0x2
#define RSS_ENABLE_IPV6			0x4
#define RSS_ENABLE_TCP_IPV6		0x8
d76 3
a78 4
#define OCE_FC_NONE			0x00000000
#define OCE_FC_TX			0x00000001
#define OCE_FC_RX			0x00000002
#define OCE_DEFAULT_FLOW_CONTROL	(OCE_FC_TX | OCE_FC_RX)
d81 6
a86 7
#define  OCE_CAPAB_FLAGS 		(MBX_RX_IFACE_FLAGS_BROADCAST     | \
					 MBX_RX_IFACE_FLAGS_UNTAGGED      | \
					 MBX_RX_IFACE_FLAGS_PROMISC       | \
					 MBX_RX_IFACE_FLAGS_MCAST_PROMISC | \
					 MBX_RX_IFACE_FLAGS_RSS)
					/* MBX_RX_IFACE_FLAGS_RSS | \ */
					/* MBX_RX_IFACE_FLAGS_PASS_L3L4_ERR) */
d89 4
a92 8
#define  OCE_CAPAB_ENABLE		(MBX_RX_IFACE_FLAGS_BROADCAST | \
					 MBX_RX_IFACE_FLAGS_UNTAGGED)
					/* MBX_RX_IFACE_FLAGS_RSS        | \ */
					/* MBX_RX_IFACE_FLAGS_PASS_L3L4_ERR) */

#define ETH_ADDR_LEN			6
#define MAX_VLANFILTER_SIZE		64
#define MAX_VLANS			4096
a107 21
/* Flash specific */
#define IOCTL_COOKIE			"SERVERENGINES CORP"
#define MAX_FLASH_COMP			32

#define IMG_ISCSI			160
#define IMG_REDBOOT			224
#define IMG_BIOS			34
#define IMG_PXEBIOS			32
#define IMG_FCOEBIOS			33
#define IMG_ISCSI_BAK			176
#define IMG_FCOE			162
#define IMG_FCOE_BAK			178
#define IMG_NCSI			16
#define IMG_PHY				192
#define FLASHROM_OPER_FLASH		1
#define FLASHROM_OPER_SAVE		2
#define FLASHROM_OPER_REPORT		4
#define FLASHROM_OPER_FLASH_PHY		9
#define FLASHROM_OPER_SAVE_PHY		10
#define TN_8022				13

d134 1
a134 1
#define OCE_DMAPTR(_o, _t) 		((_t *)(_o)->vaddr)
d168 2
a169 2
#define TRUE					1
#define FALSE					0
d171 1
a171 5
#define	DEFAULT_MQ_MBOX_TIMEOUT			(5 * 1000 * 1000)
#define	MBX_READY_TIMEOUT			(1 * 1000 * 1000)
#define	DEFAULT_DRAIN_TIME			200
#define	MBX_TIMEOUT_SEC				5
#define	STAT_TIMEOUT				2000000
d174 4
a177 4
#define OCE_TX_RING_SIZE			512
#define OCE_RX_RING_SIZE			1024
#define OCE_WQ_PACKET_ARRAY_SIZE		(OCE_TX_RING_SIZE/2)
#define OCE_RQ_PACKET_ARRAY_SIZE		(OCE_RX_RING_SIZE)
d285 1
a285 1
	struct oce_cq		*cq;
d340 6
a345 12
#define OCE_FLAGS_PCIX			0x00000001
#define OCE_FLAGS_PCIE			0x00000002
#define OCE_FLAGS_MSI_CAPABLE		0x00000004
#define OCE_FLAGS_MSIX_CAPABLE		0x00000008
#define OCE_FLAGS_USING_MSI		0x00000010
#define OCE_FLAGS_USING_MSIX		0x00000020
#define OCE_FLAGS_RESET_RQD		0x00000040
#define OCE_FLAGS_VIRTUAL_PORT		0x00000080
#define OCE_FLAGS_MBOX_ENDIAN_RQD	0x00000100
#define OCE_FLAGS_BE3			0x00000200
#define OCE_FLAGS_XE201			0x00000400
#define OCE_FLAGS_BE2			0x00000800
d382 5
a386 5
	struct oce_wq		*wq[OCE_MAX_WQ];	/* TX work queues */
	struct oce_rq		*rq[OCE_MAX_RQ];	/* RX work queues */
	struct oce_cq		*cq[OCE_MAX_CQ];	/* Completion queues */
	struct oce_eq		*eq[OCE_MAX_EQ];	/* Event queues */
	struct oce_mq		*mq;			/* Mailbox queue */
d402 1
a402 1
	char			macaddr[ETH_ADDR_LEN];
d418 3
a423 8
/* Capabilities */
#define OCE_MAX_RSP_HANDLED		64

#define OCE_MAC_LOOPBACK		0x0
#define OCE_PHY_LOOPBACK		0x1
#define OCE_ONE_PORT_EXT_LOOPBACK	0x2
#define OCE_NO_LOOPBACK			0xff

d431 3
a433 3
#define IF_LRO_ENABLED(ifp)  (((ifp)->if_capabilities & IFCAP_LRO) ? 1:0)
#define IF_LSO_ENABLED(ifp)  (((ifp)->if_capabilities & IFCAP_TSO4) ? 1:0)
#define IF_CSUM_ENABLED(ifp) (((ifp)->if_capabilities & IFCAP_HWCSUM) ? 1:0)
@


1.1
log
@merge oce.c into if_oce.c and rename oce{reg,var}.h to if_oce{reg,var}.h
@
text
@d1 1
a1 1
/* 	$OpenBSD: ocevar.h,v 1.23 2012/10/29 18:17:39 mikeb Exp $	*/
a466 104

/**************************************************
 * BUS memory read/write macros
 * BE3: accesses three BAR spaces (CFG, CSR, DB)
 * Lancer: accesses one BAR space (CFG)
 **************************************************/
#if 1
#define OCE_READ_REG32(sc, space, o) \
	((IS_BE(sc)) ? (bus_space_read_4((sc)->space##_iot, \
				      (sc)->space##_ioh,o)) \
		  : (bus_space_read_4((sc)->cfg_iot, (sc)->cfg_ioh,o)))
#define OCE_READ_REG16(sc, space, o) \
	((IS_BE(sc)) ? (bus_space_read_2((sc)->space##_iot, \
				      (sc)->space##_ioh,o)) \
		  : (bus_space_read_2((sc)->cfg_iot, (sc)->cfg_ioh,o)))
#define OCE_READ_REG8(sc, space, o) \
	((IS_BE(sc)) ? (bus_space_read_1((sc)->space##_iot, \
				      (sc)->space##_ioh,o)) \
		  : (bus_space_read_1((sc)->cfg_iot, (sc)->cfg_ioh,o)))

#define OCE_WRITE_REG32(sc, space, o, v) \
	((IS_BE(sc)) ? (bus_space_write_4((sc)->space##_iot, \
				       (sc)->space##_ioh,o,v)) \
		  : (bus_space_write_4((sc)->cfg_iot, (sc)->cfg_ioh,o,v)))
#define OCE_WRITE_REG16(sc, space, o, v) \
	((IS_BE(sc)) ? (bus_space_write_2((sc)->space##_iot, \
				       (sc)->space##_ioh,o,v)) \
		  : (bus_space_write_2((sc)->cfg_iot, (sc)->cfg_ioh,o,v)))
#define OCE_WRITE_REG8(sc, space, o, v) \
	((IS_BE(sc)) ? (bus_space_write_1((sc)->space##_iot, \
				       (sc)->space##_ioh,o,v)) \
		  : (bus_space_write_1((sc)->cfg_iot, (sc)->cfg_ioh,o,v)))
#else
static __inline u_int32_t
oce_bus_read_4(bus_space_tag_t tag, bus_space_handle_t handle, bus_size_t reg)
{
	bus_space_barrier(tag, handle, reg, 4, BUS_SPACE_BARRIER_READ);
	return (bus_space_read_4(tag, handle, reg));
}

static __inline u_int16_t
oce_bus_read_2(bus_space_tag_t tag, bus_space_handle_t handle, bus_size_t reg)
{
	bus_space_barrier(tag, handle, reg, 2, BUS_SPACE_BARRIER_READ);
	return (bus_space_read_2(tag, handle, reg));
}

static __inline u_int8_t
oce_bus_read_1(bus_space_tag_t tag, bus_space_handle_t handle, bus_size_t reg)
{
	bus_space_barrier(tag, handle, reg, 1, BUS_SPACE_BARRIER_READ);
	return (bus_space_read_1(tag, handle, reg));
}

static __inline void
oce_bus_write_4(bus_space_tag_t tag, bus_space_handle_t handle, bus_size_t reg,
    u_int32_t val)
{
	bus_space_write_4(tag, handle, reg, val);
	bus_space_barrier(tag, handle, reg, 4, BUS_SPACE_BARRIER_WRITE);
}

static __inline void
oce_bus_write_2(bus_space_tag_t tag, bus_space_handle_t handle, bus_size_t reg,
    u_int16_t val)
{
	bus_space_write_2(tag, handle, reg, val);
	bus_space_barrier(tag, handle, reg, 2, BUS_SPACE_BARRIER_WRITE);
}

static __inline void
oce_bus_write_1(bus_space_tag_t tag, bus_space_handle_t handle, bus_size_t reg,
    u_int8_t val)
{
	bus_space_write_1(tag, handle, reg, val);
	bus_space_barrier(tag, handle, reg, 1, BUS_SPACE_BARRIER_WRITE);
}

#define OCE_READ_REG32(sc, space, o) \
	((IS_BE(sc)) ? (oce_bus_read_4((sc)->space##_iot, \
				      (sc)->space##_ioh,o)) \
		  : (oce_bus_read_4((sc)->cfg_iot, (sc)->cfg_ioh,o)))
#define OCE_READ_REG16(sc, space, o) \
	((IS_BE(sc)) ? (oce_bus_read_2((sc)->space##_iot, \
				      (sc)->space##_ioh,o)) \
		  : (oce_bus_read_2((sc)->cfg_iot, (sc)->cfg_ioh,o)))
#define OCE_READ_REG8(sc, space, o) \
	((IS_BE(sc)) ? (oce_bus_read_1((sc)->space##_iot, \
				      (sc)->space##_ioh,o)) \
		  : (oce_bus_read_1((sc)->cfg_iot, (sc)->cfg_ioh,o)))

#define OCE_WRITE_REG32(sc, space, o, v) \
	((IS_BE(sc)) ? (oce_bus_write_4((sc)->space##_iot, \
				       (sc)->space##_ioh,o,v)) \
		  : (oce_bus_write_4((sc)->cfg_iot, (sc)->cfg_ioh,o,v)))
#define OCE_WRITE_REG16(sc, space, o, v) \
	((IS_BE(sc)) ? (oce_bus_write_2((sc)->space##_iot, \
				       (sc)->space##_ioh,o,v)) \
		  : (oce_bus_write_2((sc)->cfg_iot, (sc)->cfg_ioh,o,v)))
#define OCE_WRITE_REG8(sc, space, o, v) \
	((IS_BE(sc)) ? (oce_bus_write_1((sc)->space##_iot, \
				       (sc)->space##_ioh,o,v)) \
		  : (oce_bus_write_1((sc)->cfg_iot, (sc)->cfg_ioh,o,v)))
#endif
@

