head	1.16;
access;
symbols
	OPENBSD_5_6:1.15.0.48
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.46
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.42
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.40
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.38
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.36
	OPENBSD_5_0:1.15.0.34
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.32
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.30
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.26
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.28
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.24
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.22
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.20
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.18
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.16
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.14
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.12
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.10
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.8
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.6
	OPENBSD_3_6_BASE:1.15
	SMP_SYNC_A:1.15
	SMP_SYNC_B:1.15
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	UBC_SYNC_A:1.14
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.14
	UBC:1.11.0.4
	UBC_BASE:1.11
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	SMP:1.10.0.2;
locks; strict;
comment	@ * @;


1.16
date	2014.08.15.14.12.07;	author mikeb;	state dead;
branches;
next	1.15;
commitid	2AkQEO8mhDh240iv;

1.15
date	2003.06.02.19.08.58;	author jason;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.09.19.13.09;	author jason;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.08.19.09.25;	author jason;	state Exp;
branches;
next	1.12;

1.12
date	2002.04.08.17.49.42;	author jason;	state Exp;
branches;
next	1.11;

1.11
date	2001.07.04.05.58.29;	author jason;	state Exp;
branches
	1.11.4.1;
next	1.10;

1.10
date	2001.06.27.05.11.16;	author jason;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2001.06.26.21.50.25;	author jason;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.26.18.12.20;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.26.16.34.48;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.26.06.33.52;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.26.05.45.27;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.26.05.16.45;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.26.03.41.01;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.25.23.31.58;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.25.23.04.46;	author jason;	state Exp;
branches;
next	;

1.10.2.1
date	2001.10.31.03.22.46;	author nate;	state Exp;
branches;
next	1.10.2.2;

1.10.2.2
date	2003.03.28.00.38.23;	author niklas;	state Exp;
branches;
next	1.10.2.3;

1.10.2.3
date	2003.06.07.11.02.30;	author ho;	state Exp;
branches;
next	;

1.11.4.1
date	2002.06.11.03.42.26;	author art;	state Exp;
branches;
next	;


desc
@@


1.16
log
@With deprecation of crypto(4) interface lofn(4) and nofn(4) become
obsolete.  No objections from the usual suspects.
@
text
@/*	$OpenBSD: lofnreg.h,v 1.15 2003/06/02 19:08:58 jason Exp $	*/

/*
 * Copyright (c) 2001-2002 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
 */

#define	LOFN_BAR0		0x0010		/* base address register */

#define	LOFN_WIN_0		0x0000		/* 0 - rev byte, norm word */
#define	LOFN_WIN_1		0x2000		/* 1 - rev byte, rev word */
#define	LOFN_WIN_2		0x4000		/* 2 - norm byte, norm word */
#define	LOFN_WIN_3		0x6000		/* 3 - norm byte, rev word */

/* Bignum registers */
#define	LOFN_REL_DATA		0x0000		/* Data registers */
#define	LOFN_REL_DATA_END	0x07ff
/* Length registers */
#define	LOFN_REL_LEN		0x1000		/* Length tags */
#define	LOFN_REL_LEN_REGS	0x103f
/* RNG FIFO space */
#define	LOFN_REL_RNG		0x1080		/* RNG FIFO start */
#define	LOFN_REL_RNG_END	0x10bf		/* RNG FIFO end */
/* Instruction space */
#define	LOFN_REL_INSTR		0x1100		/* Instructions */
#define	LOFN_REL_INSTR_END	0x117f
/* Control and status registers, relative to window number */
#define	LOFN_REL_CR		0x1fd4		/* Command */
#define	LOFN_REL_SR		0x1fd8		/* Status */
#define	LOFN_REL_IER		0x1fdc		/* Interrupt enable */
#define	LOFN_REL_RNC		0x1fe0		/* RNG config */
#define	LOFN_REL_CFG1		0x1fe4		/* Config1 */
#define	LOFN_REL_CFG2		0x1fe8		/* Config2 */
#define	LOFN_REL_CHIPID		0x1fec		/* Chip ID */

/* Data register access */
#define	LOFN_REG_MASK		0x0f80		/* Register number mask */
#define	LOFN_REG_SHIFT		7
#define	LOFN_WORD_MASK		0x007c		/* Word index mask */
#define	LOFN_WORD_SHIFT		2

/* Command address register (LOFN_REL_CR) */
#define	LOFN_CR_ADDR_MASK	0x0000003f	/* Instruction addr offset */

/* Status register (LOFN_REL_SR) */
#define	LOFN_SR_CARRY		0x00000008	/* Carry from operation */
#define	LOFN_SR_RNG_UF		0x00001000	/* RNG underflow */
#define	LOFN_SR_RNG_RDY		0x00004000	/* RNG ready */
#define	LOFN_SR_DONE		0x00008000	/* Operation done */

/* Interrupt enable register (LOFN_REL_IER) */
#define	LOFN_IER_RDY		0x00004000	/* RNG ready */
#define	LOFN_IER_DONE		0x00008000	/* Operation done */

/* Random number configuration (LOFN_REL_RNC) */
#define	LOFN_RNC_OUTSCALE	0x00000080	/* Output prescalar */
#define	LOFN_RNC_1STSCALE	0x00000f00	/* First prescalar */

/* Config register 1 (LOFN_REL_CFG1) */
#define	LOFN_CFG1_RESET		0x00000001	/* Reset */
#define	LOFN_CFG1_MULTI		0x00000038	/* PLL multiple */
#define	LOFN_CFG1_MULTI_BYP	0x00000000	/*  PLL bypass */
#define	LOFN_CFG1_MULTI_1X	0x00000008	/*  1x CLK */
#define	LOFN_CFG1_MULTI_15X	0x00000010	/*  1.5x CLK */
#define	LOFN_CFG1_MULTI_2X	0x00000018	/*  2x CLK */
#define	LOFN_CFG1_MULTI_25X	0x00000020	/*  2.5x CLK */
#define	LOFN_CFG1_MULTI_3X	0x00000028	/*  3x CLK */
#define	LOFN_CFG1_MULTI_4X	0x00000030	/*  4x CLK */
#define	LOFN_CFG1_CLOCK		0x00000040	/* Clock select */

/* Config register 2 (LOFN_REL_CFG2) */
#define	LOFN_CFG2_RNGENA	0x00000001	/* RNG enable */
#define	LOFN_CFG2_PRCENA	0x00000002	/* Processor enable */

/* Chip identification (LOFN_REL_CHIPID) */
#define	LOFN_CHIPID_MASK	0x0000ffff	/* Chip ID */

#define	LOFN_REGADDR(win,r,idx) 			\
    ((win) |						\
     (((r) << LOFN_REG_SHIFT) & LOFN_REG_MASK) |	\
     (((idx) << LOFN_WORD_SHIFT) & LOFN_WORD_MASK))

#define	LOFN_LENADDR(win,r)				\
    ((win) | (((r) << 2) + LOFN_REL_LEN))

#define	LOFN_LENMASK		0x000007ff	/* mask for length space */

#define	OP_DONE			0x80000000	/* final instruction */
#define	OP_CODE_MASK		0x7c000000	/* opcode mask */
#define	OP_CODE_MODEXP		0x00000000	/*  modular exponentiation */
#define	OP_CODE_MODMUL		0x04000000	/*  modular multiplication */
#define	OP_CODE_MODRED		0x08000000	/*  modular reduction */
#define	OP_CODE_MODADD		0x0c000000	/*  modular addition */
#define	OP_CODE_MODSUB		0x10000000	/*  modular subtraction */
#define	OP_CODE_ADD		0x14000000	/*  addition */
#define	OP_CODE_SUB		0x18000000	/*  subtraction */
#define	OP_CODE_ADDC		0x1c000000	/*  addition with carry */
#define	OP_CODE_SUBC		0x20000000	/*  subtraction with carry */
#define	OP_CODE_MULT		0x24000000	/*  2048bit multiplication */
#define	OP_CODE_SR		0x28000000	/*  shift right */
#define	OP_CODE_SL		0x2c000000	/*  shift left */
#define	OP_CODE_INC		0x30000000	/*  increment */
#define	OP_CODE_DEC		0x34000000	/*  decrement */
#define	OP_CODE_TAG		0x38000000	/*  set length tag */
#define	OP_CODE_NOP		0x7c000000	/*  nop */

#define	OP_RD_SHIFT		21
#define	OP_RA_SHIFT		16
#define	OP_RB_SHIFT		11
#define	OP_RM_SHIFT		6
#define	OP_R_MASK		0x1f
#define	OP_LEN_MASK		0xffff

#define	LOFN_INSTR(done,op,rd,ra,rb,rm) 		\
    ((done) | (op) |					\
     (((rd) & OP_R_MASK) << OP_RD_SHIFT) |		\
     (((ra) & OP_R_MASK) << OP_RA_SHIFT) |		\
     (((rb) & OP_R_MASK) << OP_RB_SHIFT) |		\
     (((rm) & OP_R_MASK) << OP_RM_SHIFT))

#define	LOFN_INSTR2(done,op,rd,ra,len)			\
    ((done) | (op) |					\
     (((rd) & OP_R_MASK) << OP_RD_SHIFT) |		\
     (((ra) & OP_R_MASK) << OP_RA_SHIFT) |		\
     ((len) & OP_LEN_MASK))

/* registers are 1024 bits wide, but must be addressed by word. */
union lofn_reg {
	u_int8_t b[128];
	u_int32_t w[32];
};

@


1.15
log
@nuke clase 3 & 4
@
text
@d1 1
a1 1
/*	$OpenBSD: lofnreg.h,v 1.14 2002/05/09 19:13:09 jason Exp $	*/
@


1.14
log
@Rework to process requests from a queue/interrupt handler instead of busy
waiting.
@
text
@d1 1
a1 1
/*	$OpenBSD: lofnreg.h,v 1.13 2002/05/08 19:09:25 jason Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.13
log
@register as having support for MODEXP operations and add associated
goop as appropriate.  Several problems still remain:
- alot of incorrect results (probably something stupid)
- the driver busy waits instead of being interrupt driven (pending question
to hifn about how interrupt ack is supposed to work).
@
text
@d1 1
a1 1
/*	$OpenBSD: lofnreg.h,v 1.12 2002/04/08 17:49:42 jason Exp $	*/
d4 1
a4 1
 * Copyright (c) 2001 Jason L. Wright (jason@@thought.net)
@


1.12
log
@Credit DARPA/USAF appropriately.
@
text
@d1 1
a1 1
/*	$OpenBSD: lofnreg.h,v 1.11 2001/07/04 05:58:29 jason Exp $	*/
d157 7
@


1.11
log
@clarify/neaten
@
text
@d1 1
a1 1
/*	$OpenBSD: lofnreg.h,v 1.10 2001/06/27 05:11:16 jason Exp $	*/
d32 5
@


1.11.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lofnreg.h,v 1.11 2001/07/04 05:58:29 jason Exp $	*/
d4 1
a4 1
 * Copyright (c) 2001-2002 Jason L. Wright (jason@@thought.net)
a31 5
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
a151 7

/* registers are 1024 bits wide, but must be addressed by word. */
union lofn_reg {
	u_int8_t b[128];
	u_int32_t w[32];
};

@


1.10
log
@alternative instruction format handling
@
text
@d1 1
a1 1
/*	$OpenBSD: lofnreg.h,v 1.9 2001/06/26 21:50:25 jason Exp $	*/
d34 1
a34 1
#define	LOFN_BAR0	0x10
d36 4
a39 9
#define	LOFN_WIN_0	0x0000
#define	LOFN_WIN_1	0x2000
#define	LOFN_WIN_2	0x4000
#define	LOFN_WIN_3	0x6000

#define	LOFN_REG_MASK		0x0f80		/* Register number mask */
#define	LOFN_REG_SHIFT		7
#define	LOFN_WORD_MASK		0x007c		/* Word index mask */
#define	LOFN_WORD_SHIFT		2
d62 7
d71 1
d77 1
d81 1
d85 1
d97 1
d101 1
d129 2
a130 1
#define	OP_CODE_DEC		0x34000000	/*  set length tag */
@


1.10.2.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: lofnreg.h,v 1.10 2001/06/27 05:11:16 jason Exp $	*/
d34 1
a34 1
#define	LOFN_BAR0		0x0010		/* base address register */
d36 9
a44 4
#define	LOFN_WIN_0		0x0000		/* 0 - rev byte, norm word */
#define	LOFN_WIN_1		0x2000		/* 1 - rev byte, rev word */
#define	LOFN_WIN_2		0x4000		/* 2 - norm byte, norm word */
#define	LOFN_WIN_3		0x6000		/* 3 - norm byte, rev word */
a66 7
/* Data register access */
#define	LOFN_REG_MASK		0x0f80		/* Register number mask */
#define	LOFN_REG_SHIFT		7
#define	LOFN_WORD_MASK		0x007c		/* Word index mask */
#define	LOFN_WORD_SHIFT		2

/* Command address register (LOFN_REL_CR) */
a68 1
/* Status register (LOFN_REL_SR) */
a73 1
/* Interrupt enable register (LOFN_REL_IER) */
a76 1
/* Random number configuration (LOFN_REL_RNC) */
a79 1
/* Config register 1 (LOFN_REL_CFG1) */
a90 1
/* Config register 2 (LOFN_REL_CFG2) */
a93 1
/* Chip identification (LOFN_REL_CHIPID) */
d121 1
a121 2
#define	OP_CODE_DEC		0x34000000	/*  decrement */
#define	OP_CODE_TAG		0x38000000	/*  set length tag */
@


1.10.2.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 1
a4 1
 * Copyright (c) 2001-2002 Jason L. Wright (jason@@thought.net)
a31 5
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
a151 7

/* registers are 1024 bits wide, but must be addressed by word. */
union lofn_reg {
	u_int8_t b[128];
	u_int32_t w[32];
};

@


1.10.2.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lofnreg.h,v 1.10.2.2 2003/03/28 00:38:23 niklas Exp $	*/
d15 5
@


1.9
log
@define opcodes and a macro for generating the instructions
also, be sure to mask off the reserved bits in the length space... 6500 seems to use them for something
@
text
@d1 1
a1 1
/*	$OpenBSD: lofnreg.h,v 1.8 2001/06/26 18:12:20 jason Exp $	*/
d129 1
d137 6
@


1.8
log
@Hey, what did ya expect... more reg defs?
@
text
@d1 1
a1 1
/*	$OpenBSD: lofnreg.h,v 1.7 2001/06/26 16:34:48 jason Exp $	*/
d103 33
@


1.7
log
@There should be a way of automating register defines from databooks *sigh*
@
text
@d1 1
a1 1
/*	$OpenBSD: lofnreg.h,v 1.6 2001/06/26 06:33:52 jason Exp $	*/
d95 8
@


1.6
log
@jack up the rng clock prescalar a bit
define the rng address space
@
text
@d1 1
a1 1
/*	$OpenBSD: lofnreg.h,v 1.5 2001/06/26 05:45:27 jason Exp $	*/
d41 12
d55 3
@


1.5
log
@clock multiplier bits
@
text
@d1 1
a1 1
/*	$OpenBSD: lofnreg.h,v 1.4 2001/06/26 05:16:45 jason Exp $	*/
d41 2
@


1.4
log
@add support for hardware rng using default scalar (can generate up to a
3Mbit/s stream, but we're not using that... yet).
@
text
@d1 1
a1 1
/*	$OpenBSD: lofnreg.h,v 1.3 2001/06/26 03:41:01 jason Exp $	*/
d65 7
@


1.3
log
@finish register defs
@
text
@d1 1
a1 1
/*	$OpenBSD: lofnreg.h,v 1.2 2001/06/25 23:31:58 jason Exp $	*/
a70 1

@


1.2
log
@some reg defs
@
text
@d1 1
a1 1
/*	$OpenBSD: lofnreg.h,v 1.1 2001/06/25 23:04:46 jason Exp $	*/
d59 13
@


1.1
log
@New dma engine skeleton
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d35 24
@

