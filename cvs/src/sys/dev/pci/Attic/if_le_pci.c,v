head	1.26;
access;
symbols
	OPENBSD_3_9:1.25.0.2
	OPENBSD_3_9_BASE:1.25
	OPENBSD_3_8:1.22.0.2
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.21.0.8
	OPENBSD_3_7_BASE:1.21
	OPENBSD_3_6:1.21.0.6
	OPENBSD_3_6_BASE:1.21
	SMP_SYNC_A:1.21
	SMP_SYNC_B:1.21
	OPENBSD_3_5:1.21.0.4
	OPENBSD_3_5_BASE:1.21
	OPENBSD_3_4:1.21.0.2
	OPENBSD_3_4_BASE:1.21
	UBC_SYNC_A:1.19
	OPENBSD_3_3:1.19.0.6
	OPENBSD_3_3_BASE:1.19
	OPENBSD_3_2:1.19.0.4
	OPENBSD_3_2_BASE:1.19
	OPENBSD_3_1:1.19.0.2
	OPENBSD_3_1_BASE:1.19
	UBC_SYNC_B:1.19
	UBC:1.18.0.2
	UBC_BASE:1.18
	OPENBSD_3_0:1.17.0.2
	OPENBSD_3_0_BASE:1.17
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_9:1.14.0.2
	OPENBSD_2_8:1.12.0.8
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.6
	OPENBSD_2_7_BASE:1.12
	SMP:1.12.0.4
	SMP_BASE:1.12
	kame_19991208:1.12
	OPENBSD_2_6:1.12.0.2
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.10.0.4
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.2
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.9.0.2
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.26
date	2006.03.12.17.29.48;	author martin;	state dead;
branches;
next	1.25;

1.25
date	2005.12.17.07.31.27;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2005.11.23.11.30.14;	author mickey;	state Exp;
branches;
next	1.23;

1.23
date	2005.09.11.18.17.08;	author mickey;	state Exp;
branches;
next	1.22;

1.22
date	2005.08.09.04.10.12;	author mickey;	state Exp;
branches;
next	1.21;

1.21
date	2003.08.11.04.52.40;	author mickey;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.02.23.28.03;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2002.03.14.01.26.58;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2001.11.06.19.53.19;	author miod;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2001.09.11.20.05.25;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2001.08.25.10.13.29;	author art;	state Exp;
branches;
next	1.15;

1.15
date	2001.08.12.20.33.50;	author mickey;	state Exp;
branches;
next	1.14;

1.14
date	2001.02.26.06.46.04;	author tholo;	state Exp;
branches;
next	1.13;

1.13
date	2001.01.31.23.05.17;	author tholo;	state Exp;
branches;
next	1.12;

1.12
date	99.08.10.08.10.35;	author deraadt;	state Exp;
branches
	1.12.4.1
	1.12.8.1;
next	1.11;

1.11
date	99.08.10.07.24.33;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	98.09.16.22.41.21;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	98.01.07.11.03.30;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	98.01.05.13.35.20;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.11.07.08.07.28;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	97.08.08.08.24.51;	author downsj;	state Exp;
branches;
next	1.5;

1.5
date	96.11.28.23.28.06;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.11.12.20.30.54;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.06.10.07.34.44;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.26.00.27.43;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.05.10.12.41.26;	author deraadt;	state Exp;
branches;
next	;

1.12.4.1
date	2001.05.14.22.25.45;	author niklas;	state Exp;
branches;
next	1.12.4.2;

1.12.4.2
date	2001.10.31.03.22.45;	author nate;	state Exp;
branches;
next	1.12.4.3;

1.12.4.3
date	2001.11.13.21.10.02;	author niklas;	state Exp;
branches;
next	1.12.4.4;

1.12.4.4
date	2002.03.28.15.35.57;	author niklas;	state Exp;
branches;
next	1.12.4.5;

1.12.4.5
date	2003.06.07.11.02.29;	author ho;	state Exp;
branches;
next	1.12.4.6;

1.12.4.6
date	2004.02.19.10.56.27;	author niklas;	state Exp;
branches;
next	;

1.12.8.1
date	2001.02.01.02.01.09;	author jason;	state Exp;
branches;
next	;

1.18.2.1
date	2002.06.11.03.42.25;	author art;	state Exp;
branches;
next	;


desc
@@


1.26
log
@with pcn(4) now in place remove or replace the references to PCI le(4)
and complement pcn* at pci? where useful as request by brad@@

ok brad@@
@
text
@/*	$OpenBSD: if_le_pci.c,v 1.25 2005/12/17 07:31:27 miod Exp $	*/
/*	$NetBSD: if_le_pci.c,v 1.13 1996/10/25 21:33:32 cgd Exp $	*/

/*-
 * Copyright (c) 1995 Charles M. Hannum.  All rights reserved.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell and Rick Macklem.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)if_le.c	8.2 (Berkeley) 11/16/93
 */

#include "bpfilter.h"

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/syslog.h>
#include <sys/socket.h>
#include <sys/device.h>

#include <uvm/uvm_extern.h>

#include <net/if.h>
#include <net/if_media.h>

#ifdef INET
#include <netinet/in.h>
#include <netinet/if_ether.h>
#endif

#include <machine/cpu.h>
#include <machine/bus.h>
#include <machine/intr.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#include <dev/ic/am7990reg.h>
#include <dev/ic/am7990var.h>

#include <dev/pci/if_levar.h>

#ifdef __alpha__			/* XXX */
/* XXX XXX NEED REAL DMA MAPPING SUPPORT XXX XXX */ 
#undef vtophys
#define	vtophys(va)	alpha_XXX_dmamap((vaddr_t)(va))
#endif

int le_pci_match(struct device *, void *, void *);
void le_pci_attach(struct device *, struct device *, void *);

struct cfattach le_pci_ca = {
	sizeof(struct le_softc), le_pci_match, le_pci_attach
};

hide void le_pci_wrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
hide u_int16_t le_pci_rdcsr(struct am7990_softc *, u_int16_t);

/*
 * PCI constants.
 * XXX These should be in a common file!
 */
#define PCI_CBIO	0x10		/* Configuration Base IO Address */

hide void
le_pci_wrcsr(sc, port, val)
	struct am7990_softc *sc;
	u_int16_t port, val;
{
	struct le_softc *lesc = (struct le_softc *)sc;
	bus_space_tag_t iot = lesc->sc_iot;
	bus_space_handle_t ioh = lesc->sc_ioh;

	bus_space_write_2(iot, ioh, lesc->sc_rap, port);
	bus_space_write_2(iot, ioh, lesc->sc_rdp, val);
}

hide u_int16_t
le_pci_rdcsr(sc, port)
	struct am7990_softc *sc;
	u_int16_t port;
{
	struct le_softc *lesc = (struct le_softc *)sc;
	bus_space_tag_t iot = lesc->sc_iot;
	bus_space_handle_t ioh = lesc->sc_ioh;
	u_int16_t val;

	bus_space_write_2(iot, ioh, lesc->sc_rap, port);
	val = bus_space_read_2(iot, ioh, lesc->sc_rdp);
	return (val);
}

int
le_pci_match(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct pci_attach_args *pa = aux;

	if (PCI_VENDOR(pa->pa_id) != PCI_VENDOR_AMD)
		return (0);

	switch (PCI_PRODUCT(pa->pa_id)) {
	case PCI_PRODUCT_AMD_PCNET_PCI:
	case PCI_PRODUCT_AMD_PCHOME_PCI:
		return (1);
	}

	return (0);
}

void
le_pci_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct le_softc *lesc = (void *)self;
	struct am7990_softc *sc = &lesc->sc_am7990;
	struct pci_attach_args *pa = aux;
	pci_intr_handle_t ih;
	bus_size_t iosize;
	bus_space_handle_t ioh;
	bus_space_tag_t iot;
	pci_chipset_tag_t pc = pa->pa_pc;
	int i, rseg;
	const char *intrstr;
	bus_dma_segment_t seg;
	bus_dmamap_t dmamap;
	caddr_t kva;

	switch (PCI_PRODUCT(pa->pa_id)) {
	case PCI_PRODUCT_AMD_PCNET_PCI:
		lesc->sc_rap = PCNET_PCI_RAP;
		lesc->sc_rdp = PCNET_PCI_RDP;
		break;
	}

	if (pci_mapreg_map(pa, PCI_CBIO, PCI_MAPREG_TYPE_IO, 0,
	    &iot, &ioh, NULL, &iosize, 0)) {
		printf(": can't map I/O base\n");
		return;
	}

	/*
	 * Extract the physical MAC address from the ROM.
	 */
	for (i = 0; i < sizeof(sc->sc_arpcom.ac_enaddr); i++)
		sc->sc_arpcom.ac_enaddr[i] = bus_space_read_1(iot, ioh, i);

	if (bus_dmamem_alloc(pa->pa_dmat, PCNET_MEMSIZE, PAGE_SIZE,
	    0, &seg, 1, &rseg, BUS_DMA_NOWAIT)) {
		printf(": couldn't allocate memory for card\n");
		bus_space_unmap(iot, ioh, iosize);
		return;
	}
	if (bus_dmamem_map(pa->pa_dmat, &seg, rseg, PCNET_MEMSIZE,
	    &kva, BUS_DMA_NOWAIT)) {
		printf(": couldn't map memory for card\n");
		bus_dmamem_free(pa->pa_dmat, &seg, rseg);
		bus_space_unmap(iot, ioh, iosize);
		return;
	}
	if (bus_dmamap_create(pa->pa_dmat, PCNET_MEMSIZE, 1, PCNET_MEMSIZE,
	    0, BUS_DMA_NOWAIT, &dmamap)) {
		printf(": couldn't create dma map\n");
		bus_dmamem_unmap(pa->pa_dmat, kva, PCNET_MEMSIZE);
		bus_dmamem_free(pa->pa_dmat, &seg, rseg);
		bus_space_unmap(iot, ioh, iosize);
		return;
	}
	if (bus_dmamap_load(pa->pa_dmat, dmamap, kva, PCNET_MEMSIZE,
	    NULL, BUS_DMA_NOWAIT)) {
		printf(": couldn't load dma map\n");
		bus_dmamap_destroy(pa->pa_dmat, dmamap);
		bus_dmamem_unmap(pa->pa_dmat, kva, PCNET_MEMSIZE);
		bus_dmamem_free(pa->pa_dmat, &seg, rseg);
		bus_space_unmap(iot, ioh, iosize);
		return;
	}
	sc->sc_mem = kva;
	bzero(sc->sc_mem, PCNET_MEMSIZE);

	/* Map and establish the interrupt. */
	if (pci_intr_map(pa, &ih)) {
		printf(": couldn't map interrupt\n");
		bus_dmamap_destroy(pa->pa_dmat, dmamap);
		bus_dmamem_unmap(pa->pa_dmat, kva, PCNET_MEMSIZE);
		bus_dmamem_free(pa->pa_dmat, &seg, rseg);
		bus_space_unmap(iot, ioh, iosize);
		return;
	}
	intrstr = pci_intr_string(pc, ih);
	lesc->sc_ih = pci_intr_establish(pc, ih, IPL_NET, am7990_intr, sc,
	    sc->sc_dev.dv_xname);
	if (lesc->sc_ih == NULL) {
		printf(": couldn't establish interrupt");
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
		bus_dmamap_destroy(pa->pa_dmat, dmamap);
		bus_dmamem_unmap(pa->pa_dmat, kva, PCNET_MEMSIZE);
		bus_dmamem_free(pa->pa_dmat, &seg, rseg);
		bus_space_unmap(iot, ioh, iosize);
		return;
	}
	printf(": %s\n", intrstr);

	lesc->sc_iot = iot;
	lesc->sc_ioh = ioh;

	sc->sc_conf3 = 0;
	sc->sc_addr = vtophys((vaddr_t)sc->sc_mem);	/* XXX XXX XXX */
	sc->sc_memsize = PCNET_MEMSIZE;

	sc->sc_copytodesc = am7990_copytobuf_contig;
	sc->sc_copyfromdesc = am7990_copyfrombuf_contig;
	sc->sc_copytobuf = am7990_copytobuf_contig;
	sc->sc_copyfrombuf = am7990_copyfrombuf_contig;
	sc->sc_zerobuf = am7990_zerobuf_contig;

	sc->sc_rdcsr = le_pci_rdcsr;
	sc->sc_wrcsr = le_pci_wrcsr;
	sc->sc_hwreset = NULL;
	sc->sc_hwinit = NULL;

	printf("%s", sc->sc_dev.dv_xname);
	am7990_config(sc);
}
@


1.25
log
@Get rid of deprecated vm_{offset,size}_t types for good, use {p,v}{addr,size}_t
instead; looked at millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.24 2005/11/23 11:30:14 mickey Exp $	*/
@


1.24
log
@assume vtophys(vaddr_t) just what all the other archs expect; no functional change
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.23 2005/09/11 18:17:08 mickey Exp $	*/
d74 1
a74 1
#define	vtophys(va)	alpha_XXX_dmamap((vm_offset_t)(va))
@


1.23
log
@do not inline pci_mapreg_map() anymore as it is olrite now; brad@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.22 2005/08/09 04:10:12 mickey Exp $	*/
d240 1
a240 1
	sc->sc_addr = vtophys(sc->sc_mem);	/* XXX XXX XXX */
@


1.22
log
@do not set PCI_COMMAND_MASTER_ENABLE explicitly as it's already set in pcisubmatch(); kettenis@@ testing; brad@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.21 2003/08/11 04:52:40 mickey Exp $	*/
a148 1
	bus_addr_t iobase;
d151 1
a151 1
	bus_space_tag_t iot = pa->pa_iot;
d166 3
a168 6
	if (pci_io_find(pc, pa->pa_tag, PCI_CBIO, &iobase, &iosize)) {
		printf(": can't find I/O base\n");
		return;
	}
	if (bus_space_map(iot, iobase, iosize, 0, &ioh)) {
		printf(": can't map I/O space\n");
d181 1
d188 1
d196 1
d205 1
d214 4
d228 4
@


1.21
log
@make sure to not attach the card if the int cannot be established and repair the dmesg outputs
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.20 2003/06/02 23:28:03 millert Exp $	*/
a153 1
	pcireg_t csr;
a247 6

	/* Enable the card. */
	csr = pci_conf_read(pc, pa->pa_tag,
	    PCI_COMMAND_STATUS_REG);
	pci_conf_write(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG,
	    csr | PCI_COMMAND_MASTER_ENABLE);
@


1.20
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.19 2002/03/14 01:26:58 millert Exp $	*/
d212 16
a227 1
	printf("\n");
a254 18

	/* Map and establish the interrupt. */
	if (pci_intr_map(pa, &ih)) {
		printf("%s: couldn't map interrupt\n", sc->sc_dev.dv_xname);
		return;
	}
	intrstr = pci_intr_string(pc, ih);
	lesc->sc_ih = pci_intr_establish(pc, ih, IPL_NET, am7990_intr, sc,
	    sc->sc_dev.dv_xname);
	if (lesc->sc_ih == NULL) {
		printf("%s: couldn't establish interrupt",
		    sc->sc_dev.dv_xname);
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
		return;
	}
	printf("%s: interrupting at %s\n", sc->sc_dev.dv_xname, intrstr);
@


1.19
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.18 2001/11/06 19:53:19 miod Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.18
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.17 2001/09/11 20:05:25 miod Exp $	*/
d81 2
a82 2
int le_pci_match __P((struct device *, void *, void *));
void le_pci_attach __P((struct device *, struct device *, void *));
d88 2
a89 2
hide void le_pci_wrcsr __P((struct am7990_softc *, u_int16_t, u_int16_t));
hide u_int16_t le_pci_rdcsr __P((struct am7990_softc *, u_int16_t));
@


1.18.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.18 2001/11/06 19:53:19 miod Exp $	*/
d81 2
a82 2
int le_pci_match(struct device *, void *, void *);
void le_pci_attach(struct device *, struct device *, void *);
d88 2
a89 2
hide void le_pci_wrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
hide u_int16_t le_pci_rdcsr(struct am7990_softc *, u_int16_t);
@


1.17
log
@Don't include <vm/vm_kern.h> if you don't need foo_map.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.16 2001/08/25 10:13:29 art Exp $	*/
d52 1
a52 1
#include <vm/vm.h>
a60 2

#include <vm/vm.h>
@


1.16
log
@Change pci_intr_map to take pci_attach_args as an argument.
All callers actually took all arguments to pci_intr_map from pci_attach_args
structs, so this simplifies code.
This also allows more complicated interrupt assignment schemes like the one
on sparc64.

This makes sparc64 pci interrupts work.

Inspired by the same change in NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.15 2001/08/12 20:33:50 mickey Exp $	*/
a52 1
#include <vm/vm_kern.h>
@


1.15
log
@absolutely no need to include vm_parm.h after vm.h
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.14 2001/02/26 06:46:04 tholo Exp $	*/
d249 1
a249 2
	if (pci_intr_map(pc, pa->pa_intrtag, pa->pa_intrpin,
	    pa->pa_intrline, &ih)) {
@


1.14
log
@Replace literal with defined constant
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.13 2001/01/31 23:05:17 tholo Exp $	*/
a53 1
#include <vm/vm_param.h>
@


1.13
log
@Allocate shared memory via the bus_dmamem/bus_dmamap interface; makes le
interface work under VMware as an additional bonus.  ok theo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.12 1999/08/10 08:10:35 deraadt Exp $	*/
d202 1
a202 1
	if (bus_dmamap_create(pa->pa_dmat, PCNET_MEMSIZE, 1, 36384,
@


1.12
log
@oops
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.11 1999/08/10 07:24:33 deraadt Exp $	*/
d163 1
a163 1
	int i;
d165 3
d191 2
a192 2
	sc->sc_mem = malloc(16384, M_DEVBUF, M_NOWAIT);
	if (sc->sc_mem == 0) {
d196 23
d227 1
a227 1
	sc->sc_memsize = 16384;
@


1.12.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.14 2001/02/26 06:46:04 tholo Exp $	*/
d163 1
a163 1
	int i, rseg;
a164 3
	bus_dma_segment_t seg;
	bus_dmamap_t dmamap;
	caddr_t kva;
d188 2
a189 2
	if (bus_dmamem_alloc(pa->pa_dmat, PCNET_MEMSIZE, PAGE_SIZE,
	    0, &seg, 1, &rseg, BUS_DMA_NOWAIT)) {
a192 23
	if (bus_dmamem_map(pa->pa_dmat, &seg, rseg, PCNET_MEMSIZE,
	    &kva, BUS_DMA_NOWAIT)) {
		printf(": couldn't map memory for card\n");
		bus_dmamem_free(pa->pa_dmat, &seg, rseg);
		return;
	}
	if (bus_dmamap_create(pa->pa_dmat, PCNET_MEMSIZE, 1, PCNET_MEMSIZE,
	    0, BUS_DMA_NOWAIT, &dmamap)) {
		printf(": couldn't create dma map\n");
		bus_dmamem_unmap(pa->pa_dmat, kva, PCNET_MEMSIZE);
		bus_dmamem_free(pa->pa_dmat, &seg, rseg);
		return;
	}
	if (bus_dmamap_load(pa->pa_dmat, dmamap, kva, PCNET_MEMSIZE,
	    NULL, BUS_DMA_NOWAIT)) {
		printf(": couldn't load dma map\n");
		bus_dmamap_destroy(pa->pa_dmat, dmamap);
		bus_dmamem_unmap(pa->pa_dmat, kva, PCNET_MEMSIZE);
		bus_dmamem_free(pa->pa_dmat, &seg, rseg);
		return;
	}
	sc->sc_mem = kva;
	bzero(sc->sc_mem, PCNET_MEMSIZE);
d201 1
a201 1
	sc->sc_memsize = PCNET_MEMSIZE;
@


1.12.4.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.12.4.1 2001/05/14 22:25:45 niklas Exp $	*/
d53 2
d250 2
a251 1
	if (pci_intr_map(pa, &ih)) {
@


1.12.4.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 1
a52 1
#include <uvm/uvm_extern.h>
d61 2
@


1.12.4.4
log
@Merge in -current from roughly a week ago
@
text
@d81 2
a82 2
int le_pci_match(struct device *, void *, void *);
void le_pci_attach(struct device *, struct device *, void *);
d88 2
a89 2
hide void le_pci_wrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
hide u_int16_t le_pci_rdcsr(struct am7990_softc *, u_int16_t);
@


1.12.4.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.12.4.4 2002/03/28 15:35:57 niklas Exp $	*/
d20 5
a24 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.12.4.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d212 1
a212 16
	/* Map and establish the interrupt. */
	if (pci_intr_map(pa, &ih)) {
		printf(": couldn't map interrupt\n");
		return;
	}
	intrstr = pci_intr_string(pc, ih);
	lesc->sc_ih = pci_intr_establish(pc, ih, IPL_NET, am7990_intr, sc,
	    sc->sc_dev.dv_xname);
	if (lesc->sc_ih == NULL) {
		printf(": couldn't establish interrupt");
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
		return;
	}
	printf(": %s\n", intrstr);
d240 18
@


1.12.8.1
log
@Pull in patch from current:
Fix (tholo):
Allocate shared memory via the bus_dmamem/bus_dmamap interface; makes le
interface work under VMware as an additional bonus.  ok theo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.12 1999/08/10 08:10:35 deraadt Exp $	*/
d163 1
a163 1
	int i, rseg;
a164 3
	bus_dma_segment_t seg;
	bus_dmamap_t dmamap;
	caddr_t kva;
d188 2
a189 2
	if (bus_dmamem_alloc(pa->pa_dmat, PCNET_MEMSIZE, PAGE_SIZE,
	    0, &seg, 1, &rseg, BUS_DMA_NOWAIT)) {
a192 23
	if (bus_dmamem_map(pa->pa_dmat, &seg, rseg, PCNET_MEMSIZE,
	    &kva, BUS_DMA_NOWAIT)) {
		printf(": couldn't map memory for card\n");
		bus_dmamem_free(pa->pa_dmat, &seg, rseg);
		return;
	}
	if (bus_dmamap_create(pa->pa_dmat, PCNET_MEMSIZE, 1, 36384,
	    0, BUS_DMA_NOWAIT, &dmamap)) {
		printf(": couldn't create dma map\n");
		bus_dmamem_unmap(pa->pa_dmat, kva, PCNET_MEMSIZE);
		bus_dmamem_free(pa->pa_dmat, &seg, rseg);
		return;
	}
	if (bus_dmamap_load(pa->pa_dmat, dmamap, kva, PCNET_MEMSIZE,
	    NULL, BUS_DMA_NOWAIT)) {
		printf(": couldn't load dma map\n");
		bus_dmamap_destroy(pa->pa_dmat, dmamap);
		bus_dmamem_unmap(pa->pa_dmat, kva, PCNET_MEMSIZE);
		bus_dmamem_free(pa->pa_dmat, &seg, rseg);
		return;
	}
	sc->sc_mem = kva;
	bzero(sc->sc_mem, PCNET_MEMSIZE);
d201 1
a201 1
	sc->sc_memsize = PCNET_MEMSIZE;
@


1.11
log
@PChome-PCI LANCE; robert@@cyrus.watson.org
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.10 1998/09/16 22:41:21 jason Exp $	*/
d141 1
a141 1
	case PCI_DEVICE_ID_PCHOME_PCI:
@


1.10
log
@o if_media'fied am7990
o if_media'fied sun4m le.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.9 1998/01/07 11:03:30 deraadt Exp $	*/
d141 1
@


1.9
log
@now this is really pretty
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.8 1998/01/05 13:35:20 deraadt Exp $	*/
d57 1
@


1.8
log
@new style pci attach printing
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.7 1997/11/07 08:07:28 niklas Exp $	*/
a170 2
	printf("\n");

d172 1
a172 1
		printf("%s: can't find I/O base\n", sc->sc_dev.dv_xname);
d176 1
a176 1
		printf("%s: can't map I/O space\n", sc->sc_dev.dv_xname);
d188 1
a188 2
		printf("%s: couldn't allocate memory for card\n",
		    sc->sc_dev.dv_xname);
d191 2
@


1.7
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le_pci.c,v 1.13 1996/10/25 21:33:32 cgd Exp $	*/
d162 1
a162 1
	const char *model, *intrstr;
a165 1
		model = "PCnet-PCI Ethernet";
a168 3

	default:
		model = "unknown model!";
d171 1
a171 1
	printf(": %s\n", model);
@


1.6
log
@Initialize hwreset.
@
text
@d1 1
@


1.5
log
@Adaption to new bus.h from NetBSD.  Various driver has been updated to
NetBSD 961107 state.  Other has not, partly because sometimes the bus.h
changes was coupled with other changes.
@
text
@d213 1
@


1.4
log
@s/bus.h/bus.old.h/ to make the transit to the bus_space bus.h an easy road
possibly taken in small steps
@
text
@d1 1
a1 1
/*	$NetBSD: if_le_pci.c,v 1.6.4.1 1996/06/03 20:32:13 cgd Exp $	*/
d65 1
a65 1
#include <machine/bus.old.h>
d79 2
a80 1
#define	vtophys(va)	__alpha_bus_XXX_dmamap(lesc->sc_bc, (void *)(va))
d105 2
a106 2
	bus_chipset_tag_t bc = lesc->sc_bc;
	bus_io_handle_t ioh = lesc->sc_ioh;
d108 2
a109 2
	bus_io_write_2(bc, ioh, lesc->sc_rap, port);
	bus_io_write_2(bc, ioh, lesc->sc_rdp, val);
d118 2
a119 2
	bus_chipset_tag_t bc = lesc->sc_bc;
	bus_io_handle_t ioh = lesc->sc_ioh;
d122 2
a123 2
	bus_io_write_2(bc, ioh, lesc->sc_rap, port);
	val = bus_io_read_2(bc, ioh, lesc->sc_rdp);
d154 4
a157 4
	bus_io_addr_t iobase;
	bus_io_size_t iosize;
	bus_io_handle_t ioh;
	bus_chipset_tag_t bc = pa->pa_bc;
d180 1
a180 1
	if (bus_io_map(bc, iobase, iosize, &ioh)) {
d189 1
a189 1
		sc->sc_arpcom.ac_enaddr[i] = bus_io_read_1(bc, ioh, i);
d198 1
a198 1
	lesc->sc_bc = bc;
@


1.3
log
@sync to 0607
@
text
@d65 1
a65 1
#include <machine/bus.h>
@


1.2
log
@sync 0521
@
text
@d1 1
a1 1
/*	$NetBSD: if_le_pci.c,v 1.6 1996/05/14 22:23:38 thorpej Exp $	*/
d79 1
a79 1
#define vtophys(va)     (vtophys(va) | 0x40000000) 
@


1.1
log
@if_name/if_unit -> if_xname/if_softc
@
text
@d1 1
a1 1
/*	$NetBSD: if_le_pci.c,v 1.1 1996/05/07 02:03:02 thorpej Exp $	*/
d51 4
d65 2
a66 1
#include <machine/pio.h>
d77 5
d92 6
d103 3
d107 2
a108 2
	outw(((struct le_softc *)sc)->sc_rap, port);
	outw(((struct le_softc *)sc)->sc_rdp, val);
d116 3
d121 2
a122 2
	outw(((struct le_softc *)sc)->sc_rap, port);
	val = inw(((struct le_softc *)sc)->sc_rdp);
d152 5
a157 1
	pci_intr_handle_t ih;
d159 1
a159 1
	int iobase, i;
d165 2
a166 2
		lesc->sc_rap = iobase + PCNET_PCI_RAP;
		lesc->sc_rdp = iobase + PCNET_PCI_RDP;
d173 1
a173 1
	printf(": %s\n", sc->sc_dev.dv_xname, model);
d175 6
a180 1
	if (pci_map_io(pa->pa_tag, 0x10, &iobase))
d182 1
d188 1
a188 1
		sc->sc_arpcom.ac_enaddr[i] = inb(iobase + i);
d197 3
d201 1
a201 1
	sc->sc_addr = kvtop(sc->sc_mem);	/* XXX XXX XXX */
d218 1
a218 1
	csr = pci_conf_read(pa->pa_bc, pa->pa_tag,
d220 1
a220 1
	pci_conf_write(pa->pa_bc, pa->pa_tag, PCI_COMMAND_STATUS_REG,
@
