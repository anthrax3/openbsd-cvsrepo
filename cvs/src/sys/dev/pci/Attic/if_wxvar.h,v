head	1.14;
access;
symbols
	SMP_SYNC_A:1.14
	SMP_SYNC_B:1.14
	UBC_SYNC_A:1.14
	OPENBSD_3_1:1.13.0.4
	OPENBSD_3_1_BASE:1.13
	UBC_SYNC_B:1.14
	UBC:1.13.0.2
	UBC_BASE:1.13
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.2
	SMP_BASE:1.1;
locks; strict;
comment	@ * @;


1.14
date	2002.04.15.06.23.07;	author deraadt;	state dead;
branches;
next	1.13;

1.13
date	2001.11.06.19.53.19;	author miod;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	2001.10.24.18.25.55;	author mjacob;	state Exp;
branches;
next	1.11;

1.11
date	2001.10.06.22.42.54;	author mjacob;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.19.20.50.58;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.11.20.05.25;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.12.20.33.50;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.12.20.03.49;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2001.04.13.00.27.57;	author mjacob;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.03.06.25.21;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.09.02.23.12;	author mjacob;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.06.01.02.15;	author mjacob;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.06.06.19.08;	author mjacob;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.11.14.51.50;	author jason;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.05.14.22.25.49;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.10.31.03.22.46;	author nate;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2001.11.13.21.10.02;	author niklas;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2003.03.28.00.38.23;	author niklas;	state dead;
branches;
next	;

1.13.2.1
date	2002.06.11.03.42.26;	author art;	state dead;
branches;
next	;


desc
@@


1.14
log
@wx is totally gone now
@
text
@/*                  
 * Principal Author: Matthew Jacob
 * Copyright (c) 1999, 2001 by Traakan Software
 * All rights reserved.
 *              
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:             
 * 1. Redistributions of source code must retain the above copyright
 *    notice unmodified, this list of conditions, and the following
 *    disclaimer.  
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * Additional Copyright (c) 2001 by Parag Patel
 * under same licence for MII PHY code.
 */

/*
 * Softc definitions for the Intel Gigabit Ethernet driver.
 *
 * Guidance and inspiration from David Greenman's
 * if_fxp driver gratefully acknowledged here.
 */

/*
 * Platform specific defines and inline functions go here.
 * Look further below for more generic structures.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/protosw.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/errno.h>
#include <sys/malloc.h>
#include <sys/kernel.h>
#include <sys/proc.h>
#include <sys/device.h>
#include <sys/timeout.h>

#include <net/if.h>
#include <net/if_dl.h>
#include <net/if_types.h>
#include <net/if_media.h>

#ifdef INET
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/in_var.h>
#include <netinet/ip.h>
#include <netinet/if_ether.h>
#endif
#ifdef NS
#include <netns/ns.h>
#include <netns/ns_if.h>
#endif

#include "bpfilter.h"
#if NBPFILTER > 0
#include <net/bpf.h>
#include <net/bpfdesc.h>
#endif

#include <uvm/uvm_extern.h>

#include <machine/bus.h>
#include <machine/intr.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>
#include <dev/pci/if_wxreg.h>
#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>

struct wxmdvar {
	struct device 		dev;		/* generic device structures */
	void *			ih;		/* interrupt handler cookie */
	struct arpcom		arpcom;		/* ethernet common part */
	pci_chipset_tag_t	pci_pc;
	pcitag_t		pci_tag;
	u_int32_t		cmdw;
	struct timeout		tmo;	/* handle for timeouts */
	bus_space_tag_t		st;		/* bus space tag */
	bus_space_handle_t	sh;		/* bus space handle */
	struct ifmedia 		ifm;
	int			locked;
	struct mii_data		mii_data;
	int			spl;
};
#define	wx_dev		w.dev
#define	wx_enaddr	w.arpcom.ac_enaddr
#define	wx_cmdw		w.cmdw
#define	wx_media	w.ifm
#define	wx_tmo		w.tmo

#define	wx_if		w.arpcom.ac_if
#define	wx_name		w.dev.dv_xname

#define	IOCTL_CMD_TYPE			u_long
#define	WXMALLOC(len)			malloc(len, M_DEVBUF, M_NOWAIT)
#define	WXFREE(ptr)			free(ptr, M_DEVBUF)
#define	SOFTC_IFP(ifp)			ifp->if_softc
#define	WX_BPFTAP_ARG(ifp)		(ifp)->if_bpf
#define	TIMEOUT(sc, func, arg, time)	VTIMEOUT(sc, func, arg, time)
#define	VTIMEOUT(sc, func, arg, time)	{timeout_set(&(sc)->wx_tmo, func, arg); timeout_add(&(sc)->wx_tmo, time);}
#define	UNTIMEOUT(f, arg, sc)		timeout_del(&(sc)->wx_tmo)
#define	INLINE				inline
#define	WX_LOCK(wx)	if (wx->w.locked++ == 0) wx->w.spl = splimp()
#define	WX_UNLOCK(wx)	if (wx->w.locked) {				\
				if (--wx->w.locked == 0)		\
					splx(wx->w.spl);		\
			}
#define	WX_ILOCK(_sc)
#define	WX_IUNLK(_sc)
#define	WX_SOFTC_FROM_MII_ARG(x)	(wx_softc_t *) x
#define	WX_MII_FROM_SOFTC(x)		(&x->w.mii_data)

#define	vm_offset_t		vaddr_t
#define	READ_CSR	_read_csr
#define	WRITE_CSR	_write_csr

typedef	unsigned long intptr_t;


/*
 * Transmit soft descriptor, used to manage packets as they come in.
 */
typedef struct rxpkt {
	struct mbuf *dptr;	/* pointer to receive frame */
	u_int32_t dma_addr;	/* dma address */
} rxpkt_t;

	
/*
 * Transmit soft descriptor, used to manage packets as they are transmitted.
 */
typedef struct txpkt {
	struct txpkt *next;	/* next in a chain */
	struct mbuf *dptr;	/* pointer to mbuf being sent */
	u_int32_t sidx;		/* start index */
	u_int32_t eidx;		/* end index */
} txpkt_t;


typedef struct wx_softc {
	/*
	 * OS dependent storage... must be first...
	 */
	struct wxmdvar w;

	/*
	 * misc goodies
	 */
	u_int32_t		:	22,
		wx_needreinit	:	1,
		wx_mii		:	1,	/* non-zero if we have a PHY */
		wx_no_flow 	:	1,
		wx_ilos		:	1,
		wx_no_ilos	:	1,
		wx_verbose	:	1,
		wx_debug	:	1,
		ane_failed	:	1,
		linkup		:	1,
		all_mcasts	:	1;
	u_int32_t wx_idnrev;		/* chip revision && PCI ID */
	u_int16_t wx_cfg1;
	u_int16_t wx_unused;
	u_int32_t wx_ienable;		/* current ienable to use */
	u_int32_t wx_dcr;		/* dcr used */
	u_int32_t wx_icr;		/* last icr */

	/*
	 * Statistics, soft && hard
	 */
	u_int32_t	wx_intr;
	u_int32_t	wx_linkintr;
	u_int32_t	wx_rxintr;
	u_int32_t	wx_txqe;
	u_int32_t	wx_xmitgc;
	u_int32_t	wx_xmitpullup;
	u_int32_t	wx_xmitcluster;
	u_int32_t	wx_xmitputback;
	u_int32_t	wx_xmitwanted;
	u_int32_t	wx_xmitblocked;
	u_int32_t	wx_xmitrunt;
	u_int32_t	wx_rxnobuf;
	u_int32_t	wx_oddpkt;

	/*
	 * Soft copies of multicast addresses. We're only
	 * using (right now) the rest of the receive address
	 * registers- not the hashed multicast table.
	 */
	u_int8_t	wx_mcaddr[WX_RAL_TAB_SIZE-1][6];
	u_int8_t	wx_nmca;		/* # active multicast addrs */


	/*
 	 * Receive Management
	 * We have software and shared memory rings in a buddy store format.
	 */
	wxrd_t	*rdescriptors;		/* receive descriptor ring */
	rxpkt_t *rbase;			/* base of soft rdesc list */
	u_int16_t rnxt;			/* next descriptor to check */
	u_int16_t _pad;
	struct mbuf *rpending;		/* pending partial packet */

	/*
 	 * Transmit Management
	 * We have software and shared memory rings in a buddy store format.
	 */
	txpkt_t *tbase;			/* base of soft soft management */
	txpkt_t *tbsyf, *tbsyl;		/* linked busy list */
	wxtd_t	*tdescriptors;		/* transmit descriptor ring */
	u_int16_t tnxtfree;		/* next free index (circular) */
	u_int16_t tactive;		/* # active */
} wx_softc_t;

/*
 * We offset the the receive frame header by two bytes so that the actual
 * payload is 32 bit aligned. On platforms that require strict structure
 * alignment, this means that the ethernet frame header may have to be shifted
 * to align it at interrupt time, but because it's such a small amount
 * (fourteen bytes) and processors have gotten pretty fast, that's okay.
 * It may even turn out on some platforms that this doesn't have to happen.
 */
#define	WX_RX_OFFSET_VALUE	2

/*
 * Tunable Parameters.
 *
 * Descriptor lengths must be in multiples of 8.
 */
#define	WX_MAX_TDESC	256	/* number of transmit descriptors */
#define	T_NXT_IDX(x)	((x + 1) & (WX_MAX_TDESC - 1))
#define	T_PREV_IDX(x)	((x - 1) & (WX_MAX_TDESC - 1))
#define	WX_MAX_RDESC	256	/* number of receive descriptors */
#ifdef	PADDED_CELL
#define	RXINCR		2
#else
#define	RXINCR		1
#endif
#define	R_NXT_IDX(x)	((x + RXINCR) & (WX_MAX_RDESC - 1))
#define	R_PREV_IDX(x)	((x - RXINCR) & (WX_MAX_RDESC - 1))

/*
 * Link Up timeout, in milliseconds.
 */

#define	WX_LINK_UP_TIMEOUT	500
@


1.13
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@@


1.13.2.1
log
@Sync UBC branch to -current
@
text
@@


1.12
log
@More cleanups from FreeBSD version- principally getting rid of bogus
pullup for small mbufs (which was unnecessary); setting txint delay;
@
text
@a79 1
#include <vm/vm.h>
@


1.11
log
@Completely strip away all non-OpenBSD code to clean things up. Fix the
setting of cacheline to something that the chip wants. Apply several
bug fixes from Sitara networks with respect to transmit descriptor
wraparound. Don't do tx descriptor garbage collection in the interrupt
service routine. Increase the number of rx descriptors to 256.
@
text
@d172 2
a173 1
	u_int32_t		:	23,
d185 1
a185 1
	u_int16_t wx_txint_delay;
d196 1
a202 1
	u_int32_t	wx_xmitblocked1;
d205 1
@


1.10
log
@merge vm/vm_kern.h into uvm/uvm_extern.h; art@@ ok
@
text
@a43 201
#if defined(__NetBSD__)
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/protosw.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/errno.h>
#include <sys/malloc.h>
#include <sys/kernel.h>
#include <sys/proc.h>
#include <sys/device.h>
#include <net/if.h>
#if defined(SIOCSIFMEDIA)
#include <net/if_media.h>
#endif
#include <net/if_types.h>
#include <net/if_dl.h>
#include <net/route.h>
#include <net/netisr.h>

#include "bpfilter.h"
#if NBPFILTER > 0
#include <net/bpf.h>
#include <net/bpfdesc.h>
#endif

#ifdef INET
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/in_var.h>
#include <netinet/ip.h>
#endif
#ifdef NS
#include <netns/ns.h>
#include <netns/ns_if.h>
#endif
#include <vm/vm.h>
#include <vm/vm_param.h>
#include <net/if_ether.h>
#if defined(INET)
#include <netinet/if_inarp.h>
#endif
#include <machine/bus.h>
#include <machine/intr.h>
#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>
#include <dev/pci/if_wxreg.h>
#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>

struct wxmdvar {
	struct device 		dev;		/* generic device structures */
	void *			ih;		/* interrupt handler cookie */
	struct ethercom		ethercom;	/* ethernet common part */
	pci_chipset_tag_t	pci_pc;
	pcitag_t		pci_tag;
	u_int8_t		enaddr[6];	/* our mac address */
	u_int32_t		cmdw;
	bus_space_tag_t		st;		/* bus space tag */
	bus_space_handle_t	sh;		/* bus space handle */
	struct ifmedia 		ifm;
	struct mii_data		mii_data;
	int			spl;
};
#define	wx_dev		w.dev
#define	wx_enaddr	w.enaddr
#define	wx_cmdw		w.cmdw
#define	wx_media	w.ifm

#define	wx_if		w.ethercom.ec_if
#define	wx_name		w.dev.dv_xname

#define	IOCTL_CMD_TYPE			u_long
#define	WXMALLOC(len)			malloc(len, M_DEVBUF, M_NOWAIT)
#define	WXFREE(ptr)			free(ptr, M_DEVBUF)
#define	SOFTC_IFP(ifp)			ifp->if_softc
#define	WX_BPFTAP_ARG(ifp)		(ifp)->if_bpf
#define	TIMEOUT(sc, func, arg, time)	timeout(func, arg, time)
#define	VTIMEOUT(sc, func, arg, time)	timeout(func, arg, time)
#define	UNTIMEOUT(f, arg, sc)		untimeout(f, arg)
#define	INLINE				inline
#define	WX_LOCK(_sc)			_sc->w.spl = splimp()
#define	WX_UNLOCK(_sc)			splx(_sc->w.spl)
#define	WX_ILOCK(_sc)
#define	WX_IUNLK(_sc)
#define	WX_SOFTC_FROM_MII_ARG(x)	(wx_softc_t *) x

#define	vm_offset_t		vaddr_t
#ifndef	IFM_1000_SX
#define	IFM_1000_SX		IFM_1000_FX
#endif
#define	READ_CSR	_read_csr
#define	WRITE_CSR	_write_csr

typedef	unsigned long intptr_t;

#elif	defined(__FreeBSD__)
/*
 * Enable for FreeBSD 5.0 SMP code
 */
/* #define	SMPNG		1 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/protosw.h>
#include <sys/socket.h>
#include <sys/malloc.h>
#include <sys/kernel.h>
#include <net/if.h>
#include <net/if_dl.h>
#include <net/if_media.h>
#ifdef NS
#include <netns/ns.h>
#include <netns/ns_if.h>
#endif
#include <net/bpf.h>
#include <sys/sockio.h>
#include <sys/bus.h>
#include <machine/bus.h>
#include <sys/rman.h>
#include <machine/resource.h>
#include <net/ethernet.h>
#include <net/if_arp.h>
#include <vm/vm.h>
#include <machine/clock.h>
#include <pci/pcivar.h>
#include <pci/pcireg.h>
#include <pci/if_wxreg.h>
#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>

#define	NBPFILTER	1

#include "miibus_if.h"

#include "opt_bdg.h"
#ifdef BRIDGE
#include <net/if_types.h>
#include <net/bridge.h>
#endif

struct wxmdvar {
	struct device *		dev;	/* backpointer to device */
	struct arpcom 		arpcom;	/* per-interface network data */
	struct resource *	mem;	/* resource descriptor for registers */
	struct resource *	irq;	/* resource descriptor for interrupt */
	void *			ih;	/* interrupt handler cookie */
	u_int16_t		cmdw;
	struct callout_handle	sch;	/* handle for timeouts */
	char 			name[8];
	bus_space_tag_t		st;	/* bus space tag */
	bus_space_handle_t	sh;	/* bus space handle */
	struct ifmedia 		ifm;
	device_t		miibus;
#ifdef	SMPNG
	struct mtx		wxmtx;
#else
	int			spl;
#endif
};
#define	wx_dev		w.dev
#define	wx_enaddr	w.arpcom.ac_enaddr
#define	wx_cmdw		w.cmdw
#define	wx_media	w.ifm

#define	wx_if		w.arpcom.ac_if
#define	wx_name		w.name
#define	wx_mtx		w.wxmtx

#define	IOCTL_CMD_TYPE			u_long
#define	WXMALLOC(len)			malloc(len, M_DEVBUF, M_NOWAIT)
#define	WXFREE(ptr)			free(ptr, M_DEVBUF)
#define	SOFTC_IFP(ifp)			ifp->if_softc
#define	WX_BPFTAP_ARG(ifp)		ifp
#define	VTIMEOUT(sc, func, arg, time)	(void) timeout(func, arg, time)
#define	TIMEOUT(sc, func, arg, time)	(sc)->w.sch = timeout(func, arg, time)
#define	UNTIMEOUT(f, arg, sc)		untimeout(f, arg, (sc)->w.sch)
#define	INLINE				__inline
#ifdef	SMPNG
#define WX_LOCK(_sc)			mtx_lock(&(_sc)->wx_mtx)
#define WX_UNLOCK(_sc)			mtx_unlock(&(_sc)->wx_mtx)
#define	WX_ILOCK(_sc)			mtx_lock(&(_sc)->wx_mtx)
#define	WX_IUNLK(_sc)			mtx_unlock(&(_sc)->wx_mtx)
#else
#define	WX_LOCK(_sc)			_sc->w.spl = splimp()
#define	WX_UNLOCK(_sc)			splx(_sc->w.spl)
#define	WX_ILOCK(_sc)
#define	WX_IUNLK(_sc)
#endif
#define	WX_SOFTC_FROM_MII_ARG(x)	device_get_softc(x)


#define	READ_CSR(sc, reg)						\
	bus_space_read_4((sc)->w.st, (sc)->w.sh, (reg))
#define	WRITE_CSR(sc, reg, val)						\
	bus_space_write_4((sc)->w.st, (sc)->w.sh, (reg), (val))

#elif defined(__OpenBSD__)
d134 1
a140 1
#endif
d172 2
a173 1
	u_int32_t		:	24,
a188 2
	mii_data_t	*wx_mii;	/* non-NULL if we have a PHY */

d253 1
a253 1
#define	WX_MAX_RDESC	64	/* number of receive descriptors */
@


1.9
log
@Don't include <vm/vm_kern.h> if you don't need foo_map.
@
text
@d282 2
a283 1
#include <vm/vm_kern.h>
d286 1
@


1.8
log
@absolutely no need to include vm_parm.h after vm.h
@
text
@a82 1
#include <vm/vm_kern.h>
@


1.7
log
@remove redundant vm includes
@
text
@a282 1
#include <vm/vm_param.h>
@


1.6
log
@Pull in (correct) support for LIVENGOOD fibre cards (some register locations
changed between Wiseman && Livengood. Pull in support for the LIVENGOOD with
a PHY (82543_CU) that supports 10/100/1000- this is the Intel PRO1000T. This
depends on the Marvell phy support in mii.

Do a bunch of ansification. Attempt to *still* keep the OpenBSD printf
stuff sane, but this area needs some more cleanup. It'd probably be best
to fork the OpenBSD code away from NetBSD.
@
text
@a171 1
#include <vm/pmap.h>
@


1.5
log
@new timeouts; this makes whole pci new timeouts user
@
text
@a0 2
/*	$OpenBSD: if_wxvar.h,v 1.4 2001/01/09 02:23:12 mjacob Exp $	*/

d2 2
a3 1
 * Copyright (c) 1999, Traakan Software
d28 2
d94 2
d108 1
a108 1
	struct wx_softc *	next;
a114 1
#define	wx_next		w.next
d132 1
d141 2
d177 6
d202 1
a202 1
	struct wx_softc *	next;
a212 1
#define	wx_next		w.next
d228 4
a231 4
#define WX_LOCK(_sc)			mtx_enter(&(_sc)->wx_mtx, MTX_DEF)
#define WX_UNLOCK(_sc)			mtx_exit(&(_sc)->wx_mtx, MTX_DEF)
#define	WX_ILOCK(_sc)			mtx_enter(&(_sc)->wx_mtx, MTX_DEF)
#define	WX_IUNLK(_sc)			mtx_exit(&(_sc)->wx_mtx, MTX_DEF)
d238 1
d292 2
a305 1
	struct wx_softc *	next;
d307 1
a313 1
#define	wx_next		w.next
d335 1
d341 1
d374 1
a374 1
	u_int32_t		:	25,
d378 1
d389 2
@


1.4
log
@This seems to correct the problem listed in kernel/1607 (returning from
syscall with non-zero priority). This doesn't seem to fix connecting
to a switch problems (which *used* to work... sigh...)...
@
text
@d1 2
a2 1
/*	$OpenBSD: if_wxvar.h,v 1.3 2000/12/06 01:02:15 mjacob Exp $	*/
d247 1
d289 1
d302 1
d312 3
a314 3
#define	TIMEOUT(sc, func, arg, time)	timeout(func, arg, time)
#define	VTIMEOUT(sc, func, arg, time)	timeout(func, arg, time)
#define	UNTIMEOUT(f, arg, sc)		untimeout(f, arg)
@


1.3
log
@Merge together FreeBSD && OpenBSD versions, benefitting OpenBSD with
getting LIVENGOOD (newer chipset) support. There will be a bit more
coming down the pipe with this in a couple of weeks when I get the
board that does 10/100/1000 all through CAT-5 cable....
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wxvar.h,v 1.2 2000/07/06 06:19:08 mjacob Exp $	*/
d291 1
d312 5
a316 2
#define	WX_LOCK(_sc)			_sc->w.spl = splimp()
#define	WX_UNLOCK(_sc)			splx(_sc->w.spl)
@


1.2
log
@Port latest in from FreeBSD- finally have some of the link issues sorted
out so we should now be able to work with switches.
@
text
@d1 1
a1 2
/*	$OpenBSD: if_wxvar.h,v 1.1 2000/02/11 14:51:50 jason Exp $	*/

a27 1
 * $FreeBSD: src/sys/pci/if_wxvar.h,v 1.4 2000/01/23 03:18:14 mjacob Exp $
d105 1
d125 4
d138 5
d191 5
d205 1
d216 12
d291 1
d311 4
d352 1
a352 1
	u_int32_t		:	17,
d359 2
a360 3
		all_mcasts	:	1,
		revision	:	8;	/* chip revision */

@


1.1
log
@Intel 82452 (Pro/1000) driver from mjacob@@feral.com
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d321 1
a321 1
	u_int32_t		:	18,
d326 1
d409 6
@


1.1.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
d4 1
a4 2
 * Principal Author: Matthew Jacob
 * Copyright (c) 1999, 2001 by Traakan Software
d29 1
a29 2
 * Additional Copyright (c) 2001 by Parag Patel
 * under same licence for MII PHY code.
a93 2
#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>
d106 1
a106 2
	struct mii_data		mii_data;
	int			spl;
d112 1
a125 5
#define	WX_LOCK(_sc)			_sc->w.spl = splimp()
#define	WX_UNLOCK(_sc)			splx(_sc->w.spl)
#define	WX_ILOCK(_sc)
#define	WX_IUNLK(_sc)
#define	WX_SOFTC_FROM_MII_ARG(x)	(wx_softc_t *) x
a133 2
typedef	unsigned long intptr_t;

a134 5
/*
 * Enable for FreeBSD 5.0 SMP code
 */
/* #define	SMPNG		1 */

a162 6
#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>

#define	NBPFILTER	1

#include "miibus_if.h"
d182 1
a182 6
	device_t		miibus;
#ifdef	SMPNG
	struct mtx		wxmtx;
#else
	int			spl;
#endif
d188 1
a191 1
#define	wx_mtx		w.wxmtx
a201 13
#ifdef	SMPNG
#define WX_LOCK(_sc)			mtx_lock(&(_sc)->wx_mtx)
#define WX_UNLOCK(_sc)			mtx_unlock(&(_sc)->wx_mtx)
#define	WX_ILOCK(_sc)			mtx_lock(&(_sc)->wx_mtx)
#define	WX_IUNLK(_sc)			mtx_unlock(&(_sc)->wx_mtx)
#else
#define	WX_LOCK(_sc)			_sc->w.spl = splimp()
#define	WX_UNLOCK(_sc)			splx(_sc->w.spl)
#define	WX_ILOCK(_sc)
#define	WX_IUNLK(_sc)
#endif
#define	WX_SOFTC_FROM_MII_ARG(x)	device_get_softc(x)

a219 1
#include <sys/timeout.h>
a252 2
#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>
a260 1
	struct timeout		tmo;	/* handle for timeouts */
d264 1
a264 3
	int			locked;
	struct mii_data		mii_data;
	int			spl;
d270 1
a270 1
#define	wx_tmo		w.tmo
d280 3
a282 3
#define	TIMEOUT(sc, func, arg, time)	VTIMEOUT(sc, func, arg, time)
#define	VTIMEOUT(sc, func, arg, time)	{timeout_set(&(sc)->wx_tmo, func, arg); timeout_add(&(sc)->wx_tmo, time);}
#define	UNTIMEOUT(f, arg, sc)		timeout_del(&(sc)->wx_tmo)
a283 8
#define	WX_LOCK(wx)	if (wx->w.locked++ == 0) wx->w.spl = splimp()
#define	WX_UNLOCK(wx)	if (wx->w.locked) {				\
				if (--wx->w.locked == 0)		\
					splx(wx->w.spl);		\
			}
#define	WX_ILOCK(_sc)
#define	WX_IUNLK(_sc)
#define	WX_SOFTC_FROM_MII_ARG(x)	(wx_softc_t *) x
a288 1
typedef	unsigned long intptr_t;
d321 1
a321 1
	u_int32_t		:	24,
a324 1
		wx_verbose	:	1,
a325 1
		ane_failed	:	1,
d327 3
a329 2
		all_mcasts	:	1;
	u_int32_t wx_idnrev;		/* chip revision && PCI ID */
a335 2
	mii_data_t	*wx_mii;	/* non-NULL if we have a PHY */

a407 6

/*
 * Link Up timeout, in milliseconds.
 */

#define	WX_LINK_UP_TIMEOUT	500
@


1.1.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d44 203
d284 2
a285 2
#include <uvm/uvm_extern.h>

a287 1

a335 1
#define	WX_MII_FROM_SOFTC(x)		(&x->w.mii_data)
d342 1
d374 1
a374 3
	u_int32_t		:	22,
		wx_needreinit	:	1,
		wx_mii		:	1,	/* non-zero if we have a PHY */
d385 1
a385 1
	u_int16_t wx_unused;
d390 2
a397 1
	u_int32_t	wx_txqe;
d404 1
a406 1
	u_int32_t	wx_oddpkt;
d456 1
a456 1
#define	WX_MAX_RDESC	256	/* number of receive descriptors */
@


1.1.2.3
log
@Merge in -current
@
text
@d80 1
@


1.1.2.4
log
@Sync the SMP branch with 3.3
@
text
@@


