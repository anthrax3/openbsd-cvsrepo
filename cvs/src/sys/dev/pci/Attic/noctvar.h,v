head	1.8;
access;
symbols
	OPENBSD_5_4:1.7.0.42
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.40
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.38
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.36
	OPENBSD_5_0:1.7.0.34
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.32
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.30
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.26
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.6
	SMP:1.6.0.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	UBC_SYNC_B:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	UBC:1.1.0.2;
locks; strict;
comment	@ * @;


1.8
date	2013.10.20.08.43.44;	author mlarkin;	state dead;
branches;
next	1.7;

1.7
date	2003.06.02.19.08.58;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.21.05.09.17;	author jason;	state Exp;
branches
	1.6.6.1;
next	1.5;

1.5
date	2002.07.16.03.59.17;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.28.18.31.29;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.21.17.45.29;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.21.03.26.40;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.02.18.15.03;	author jason;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2002.06.11.03.42.26;	author art;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.10.29.00.33.29;	author art;	state Exp;
branches;
next	;

1.6.6.1
date	2003.06.07.11.02.30;	author ho;	state Exp;
branches;
next	;


desc
@@


1.8
log
@

tedu noct(4). dmesglog shows no users of this device and the driver has
a bug that nobody (even the original author) knows how to fix.

"kill with fire" deraadt@@
@
text
@/*	$OpenBSD: noctvar.h,v 1.7 2003/06/02 19:08:58 jason Exp $	*/

/*
 * Copyright (c) 2002 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
 */

#define	NOCT_RNG_QLEN		15
#define	NOCT_RNG_ENTRIES	(1 << NOCT_RNG_QLEN)
#define	NOCT_RNG_BUFSIZE	(NOCT_RNG_ENTRIES * sizeof(u_int64_t))

#define	NOCT_PKH_QLEN		15
#define	NOCT_PKH_ENTRIES	(1 << NOCT_PKH_QLEN)
#define	NOCT_PKH_BUFSIZE	(NOCT_PKH_ENTRIES * sizeof(union noct_pkh_cmd))

#define	NOCT_EA_QLEN		15
#define	NOCT_EA_ENTRIES		(1 << NOCT_EA_QLEN)
#define	NOCT_EA_BUFSIZE		(NOCT_EA_ENTRIES * sizeof(struct noct_ea_cmd))

#define	NOCT_BN_CACHE_SIZE	((256) * (128 / 8))

struct noct_workq {
	SIMPLEQ_ENTRY(noct_workq)	q_next;
	struct cryptop			*q_crp;
	bus_dmamap_t			q_dmamap;
	bus_dma_segment_t		q_dmaseg;
	caddr_t				q_buf;
	u_int8_t			q_macbuf[20];
};

struct noct_softc;

struct noct_bnc_sw {
	u_long bn_off;			/* cache offset */
	u_long bn_siz;			/* cache size */
	void (*bn_callback)(struct noct_softc *, u_int32_t, int);
	struct cryptkop *bn_krp;
};

struct noct_softc {
	struct device sc_dv;
	bus_space_tag_t sc_st;
	bus_space_handle_t sc_sh;
	bus_dma_tag_t sc_dmat;
	void *sc_ih;
	bus_size_t sc_rar_last, sc_waw_last;
	u_int sc_ramsize;
	int32_t sc_cid;			/* cryptodev id */

	u_int64_t *sc_rngbuf;
	bus_dmamap_t sc_rngmap;
	struct timeout sc_rngto;
	int sc_rngtick;

	bus_dmamap_t sc_pkhmap;		/* pkh buffer map */
	bus_dmamap_t sc_bnmap;		/* bignumber cache map */
	union noct_pkh_cmd *sc_pkhcmd;	/* pkh command buffers */
	u_int8_t *sc_bncache;		/* bignumber cache buffer */
	u_int32_t sc_pkhwp;		/* pkh write pointer */
	u_int32_t sc_pkhrp;		/* pkh read pointer */
	struct extent *sc_pkh_bn;	/* pkh big number cache usage */
	struct noct_bnc_sw	sc_pkh_bnsw[NOCT_PKH_ENTRIES];

	bus_dmamap_t sc_eamap;		/* ea buffer map */
	u_int32_t sc_eawp;		/* ea write pointer */
	u_int32_t sc_earp;		/* ea read pointer */
	struct noct_ea_cmd *sc_eacmd;	/* ea command buffers */

	SIMPLEQ_HEAD(,noct_workq)	sc_inq;
	SIMPLEQ_HEAD(,noct_workq)	sc_chipq;
	SIMPLEQ_HEAD(,noct_workq)	sc_outq;
};

#define	NOCT_READ_4(sc,r)	noct_read_4((sc), (r))
#define	NOCT_WRITE_4(sc,r,v)	noct_write_4((sc), (r), (v))
#define	NOCT_READ_8(sc,r)	noct_read_8((sc), (r))
#define	NOCT_WRITE_8(sc,r,v)	noct_write_8((sc), (r), (v))

#define	NOCT_CARD(sid)		(((sid) & 0xf0000000) >> 28)
#define	NOCT_SESSION(sid)	( (sid) & 0x0fffffff)
#define	NOCT_SID(crd, sesn)	(((crd) << 28) | ((sesn) & 0x0fffffff))

#define	NOCT_WAKEUP(sc)	wakeup(&(sc)->sc_eawp)
#define	NOCT_SLEEP(sc)	tsleep(&(sc)->sc_eawp, PWAIT, "noctea", 0)

@


1.7
log
@nuke clase 3 & 4
@
text
@d1 1
a1 1
/*	$OpenBSD: noctvar.h,v 1.6 2002/07/21 05:09:17 jason Exp $	*/
@


1.6
log
@- Deal with the fact that nsp2k's bridge can't deal with burst read/write
by detecting conditions that could generate one from a sequential access
on the parent bridge and generating a harmless nop (scratch registers
are just plain nice to have)
- also, commit work in progress for dealing with modexp properly, one
parameter still left to compute, tho.
@
text
@d1 1
a1 1
/*	$OpenBSD: noctvar.h,v 1.5 2002/07/16 03:59:17 jason Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.6.6.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: noctvar.h,v 1.6 2002/07/21 05:09:17 jason Exp $	*/
d15 5
@


1.5
log
@- Add a kthread for handling EA requests so that we have a context where we
can call bus_dmamem_{map/unmap} safely, this is because this chip has
(you'll love this...) NO support for scatter-gather
- implement enough of the crypto(9) api to support the simple/stateless
operations: SHA1 and MD5 simple hash
- remove debugging EA queue handling
@
text
@d1 1
a1 1
/*	$OpenBSD: noctvar.h,v 1.4 2002/06/28 18:31:29 jason Exp $	*/
d77 1
d105 4
a108 7
#define	NOCT_READ_4(sc,r) \
    bus_space_read_4((sc)->sc_st, (sc)->sc_sh, (r))
#define	NOCT_WRITE_4(sc,r,v) \
    bus_space_write_4((sc)->sc_st, (sc)->sc_sh, (r), (v))

#define	NOCT_READ_8(sc,r) noct_read_8(sc, r)
#define	NOCT_WRITE_8(sc,r,v) noct_write_8(sc, r, v)
@


1.4
log
@Implement MODEXP as MODMUL for debugging purposes until I understand the
args for MODEXP.
@
text
@d1 1
a1 1
/*	$OpenBSD: noctvar.h,v 1.3 2002/06/21 17:45:29 jason Exp $	*/
d53 9
a94 2
	struct timeout sc_eato;		/* debug */
	int sc_eatick;			/* debug */
d96 1
d98 4
d111 8
@


1.3
log
@skeleton queue handling for the enc/auth piece of the chip (fed with nops via
timeout for now).
@
text
@d1 1
a1 1
/*	$OpenBSD: noctvar.h,v 1.2 2002/06/21 03:26:40 jason Exp $	*/
d39 23
d69 1
d77 1
d79 1
a79 3
	struct timeout sc_pkhto;	/* debug */
	int sc_pkhtick;			/* debug */
	int sc_pkhbusy;			/* debug */
d81 3
a98 12

#define	NOCT_RNG_QLEN		15
#define	NOCT_RNG_ENTRIES	(1 << NOCT_RNG_QLEN)
#define	NOCT_RNG_BUFSIZE	(NOCT_RNG_ENTRIES * sizeof(u_int64_t))

#define	NOCT_PKH_QLEN		15
#define	NOCT_PKH_ENTRIES	(1 << NOCT_PKH_QLEN)
#define	NOCT_PKH_BUFSIZE	(NOCT_PKH_ENTRIES * sizeof(union noct_pkh_cmd))

#define	NOCT_EA_QLEN		15
#define	NOCT_EA_ENTRIES		(1 << NOCT_EA_QLEN)
#define	NOCT_EA_BUFSIZE		(NOCT_EA_ENTRIES * sizeof(struct noct_ea_cmd))
@


1.2
log
@skeleton for queue handling on the pk side of the chip.  For now it just
enqueues nops and handles them.
@
text
@d1 1
a1 1
/*	$OpenBSD: noctvar.h,v 1.1 2002/06/02 18:15:03 jason Exp $	*/
d46 1
a47 1
	union noct_pkh_cmd *sc_pkhcmd;
a48 1
	bus_dmamap_t sc_pkhmap;
d51 6
a56 3
	struct timeout sc_pkhto;
	int sc_pkhtick;
	int sc_pkhbusy;
d58 6
d81 4
@


1.1
log
@Skeleton driver for the NetOctave NSP2000 (only supports RNG at the moment)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
d49 1
d52 4
d69 4
@


1.1.2.1
log
@Sync UBC branch to -current
@
text
@@


1.1.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: noctvar.h,v 1.1.2.1 2002/06/11 03:42:26 art Exp $	*/
a38 32
#define	NOCT_RNG_QLEN		15
#define	NOCT_RNG_ENTRIES	(1 << NOCT_RNG_QLEN)
#define	NOCT_RNG_BUFSIZE	(NOCT_RNG_ENTRIES * sizeof(u_int64_t))

#define	NOCT_PKH_QLEN		15
#define	NOCT_PKH_ENTRIES	(1 << NOCT_PKH_QLEN)
#define	NOCT_PKH_BUFSIZE	(NOCT_PKH_ENTRIES * sizeof(union noct_pkh_cmd))

#define	NOCT_EA_QLEN		15
#define	NOCT_EA_ENTRIES		(1 << NOCT_EA_QLEN)
#define	NOCT_EA_BUFSIZE		(NOCT_EA_ENTRIES * sizeof(struct noct_ea_cmd))

#define	NOCT_BN_CACHE_SIZE	((256) * (128 / 8))

struct noct_workq {
	SIMPLEQ_ENTRY(noct_workq)	q_next;
	struct cryptop			*q_crp;
	bus_dmamap_t			q_dmamap;
	bus_dma_segment_t		q_dmaseg;
	caddr_t				q_buf;
	u_int8_t			q_macbuf[20];
};

struct noct_softc;

struct noct_bnc_sw {
	u_long bn_off;			/* cache offset */
	u_long bn_siz;			/* cache size */
	void (*bn_callback)(struct noct_softc *, u_int32_t, int);
	struct cryptkop *bn_krp;
};

a44 1
	bus_size_t sc_rar_last, sc_waw_last;
a45 2
	int32_t sc_cid;			/* cryptodev id */

a49 18

	bus_dmamap_t sc_pkhmap;		/* pkh buffer map */
	bus_dmamap_t sc_bnmap;		/* bignumber cache map */
	union noct_pkh_cmd *sc_pkhcmd;	/* pkh command buffers */
	u_int8_t *sc_bncache;		/* bignumber cache buffer */
	u_int32_t sc_pkhwp;		/* pkh write pointer */
	u_int32_t sc_pkhrp;		/* pkh read pointer */
	struct extent *sc_pkh_bn;	/* pkh big number cache usage */
	struct noct_bnc_sw	sc_pkh_bnsw[NOCT_PKH_ENTRIES];

	bus_dmamap_t sc_eamap;		/* ea buffer map */
	u_int32_t sc_eawp;		/* ea write pointer */
	u_int32_t sc_earp;		/* ea read pointer */
	struct noct_ea_cmd *sc_eacmd;	/* ea command buffers */

	SIMPLEQ_HEAD(,noct_workq)	sc_inq;
	SIMPLEQ_HEAD(,noct_workq)	sc_chipq;
	SIMPLEQ_HEAD(,noct_workq)	sc_outq;
d52 4
a55 4
#define	NOCT_READ_4(sc,r)	noct_read_4((sc), (r))
#define	NOCT_WRITE_4(sc,r,v)	noct_write_4((sc), (r), (v))
#define	NOCT_READ_8(sc,r)	noct_read_8((sc), (r))
#define	NOCT_WRITE_8(sc,r,v)	noct_write_8((sc), (r), (v))
d57 2
a58 6
#define	NOCT_CARD(sid)		(((sid) & 0xf0000000) >> 28)
#define	NOCT_SESSION(sid)	( (sid) & 0x0fffffff)
#define	NOCT_SID(crd, sesn)	(((crd) << 28) | ((sesn) & 0x0fffffff))

#define	NOCT_WAKEUP(sc)	wakeup(&(sc)->sc_eawp)
#define	NOCT_SLEEP(sc)	tsleep(&(sc)->sc_eawp, PWAIT, "noctea", 0)
d60 3
@


