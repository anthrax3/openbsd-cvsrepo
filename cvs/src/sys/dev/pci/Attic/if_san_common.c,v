head	1.22;
access;
symbols
	OPENBSD_5_7:1.21.0.4
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.14.0.2
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.13.0.16
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.14
	OPENBSD_5_0:1.13.0.12
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.10
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.8
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.4
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.6
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.12.0.4
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.2
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.11.0.8
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.6
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.4
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4;
locks; strict;
comment	@ * @;


1.22
date	2015.04.09.18.58.22;	author deraadt;	state dead;
branches;
next	1.21;
commitid	cDamcqFPw3HffP51;

1.21
date	2014.12.05.15.50.04;	author mpi;	state Exp;
branches;
next	1.20;
commitid	t9FBKDfc4VDxpEy2;

1.20
date	2014.09.14.14.17.25;	author jsg;	state Exp;
branches;
next	1.19;
commitid	uzzBR7hz9ncd4O6G;

1.19
date	2014.09.08.06.24.13;	author jsg;	state Exp;
branches;
next	1.18;
commitid	ZqXwxwmeo3l29NOg;

1.18
date	2014.07.22.13.12.11;	author mpi;	state Exp;
branches;
next	1.17;
commitid	TGHgrLxu6sxZoiFt;

1.17
date	2014.07.12.18.48.52;	author tedu;	state Exp;
branches;
next	1.16;
commitid	OBNa5kfxQ2UXoiIw;

1.16
date	2013.08.07.01.06.37;	author bluhm;	state Exp;
branches;
next	1.15;

1.15
date	2013.04.10.01.35.55;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2012.09.19.22.37.23;	author jsg;	state Exp;
branches;
next	1.13;

1.13
date	2009.02.08.20.07.44;	author chl;	state Exp;
branches;
next	1.12;

1.12
date	2007.10.01.15.34.48;	author krw;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.08.20.23.42;	author canacar;	state Exp;
branches;
next	1.10;

1.10
date	2005.09.14.05.08.05;	author canacar;	state Exp;
branches;
next	1.9;

1.9
date	2005.09.01.23.35.42;	author canacar;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.05.20.11.10;	author canacar;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.01.21.42.35;	author canacar;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.01.18.37.06;	author mcbride;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.07.08.44.38;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.16.15.11.45;	author alex;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.26.22.19.38;	author mcbride;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.26.20.17.23;	author mcbride;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.26.06.42.33;	author alex;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Send lmc(4) and san(4) to the HDLC framed bit bucket in the sky.
@
text
@/*	$OpenBSD: if_san_common.c,v 1.21 2014/12/05 15:50:04 mpi Exp $	*/

/*-
 * Copyright (c) 2001-2004 Sangoma Technologies (SAN)
 * All rights reserved.  www.sangoma.com
 *
 * This code is written by Alex Feldman <al.feldman@@sangoma.com> for SAN.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following disclaimer
 *    in the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name of Sangoma Technologies nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY SANGOMA TECHNOLOGIES AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */


# include <sys/types.h>
# include <sys/param.h>
# include <sys/systm.h>
# include <sys/syslog.h>
# include <sys/ioccom.h>
# include <sys/conf.h>
# include <sys/malloc.h>
# include <sys/errno.h>
# include <sys/exec.h>
# include <sys/mbuf.h>
# include <sys/socket.h>
# include <sys/kernel.h>
# include <sys/time.h>
# include <sys/timeout.h>

# include <net/bpf.h>
# include <net/if_dl.h>
# include <net/if_types.h>
# include <net/if.h>
# include <net/if_var.h>
# include <net/if_media.h>
# include <net/ppp_defs.h>
# include <net/if_ppp.h>
# include <net/if_sppp.h>
# include <netinet/in.h>
# include <netinet/udp.h>
# include <netinet/ip.h>

# include <dev/pci/if_san_common.h>
# include <dev/pci/if_san_obsd.h>

#ifdef	_DEBUG_
#define	STATIC
#else
#define	STATIC		static
#endif

/* WAN link driver entry points */
#if 0
static int	shutdown(sdla_t *card);
#endif

/* Miscellaneous functions */
static int wan_ioctl(struct ifnet*, u_long, struct ifreq *);
static int sdla_isr(void *);

static void release_hw(sdla_t *card);

static int wan_ioctl_dump(sdla_t *, void *);
static int wan_ioctl_hwprobe(struct ifnet *, void *);

/*
 * Global Data
 * Note: All data must be explicitly initialized!!!
 */

/* private data */
extern char	*san_drvname;
LIST_HEAD(, sdla) wan_cardlist = LIST_HEAD_INITIALIZER(wan_cardlist);

#if 0
static san_detach(void)
{
	wanpipe_common_t	*common;
	sdla_t			*card, *tmp_card;
	int			err = 0;

	card = LIST_FIRST(&wan_cardlist);
	while (card) {
		if (card->disable_comm)
			card->disable_comm(card);

		while ((common = LIST_FIRST(&card->dev_head))) {
			LIST_REMOVE(common, next);
			if (card->del_if) {
				struct ifnet *ifp =
				    (struct ifnet*)&common->ifp;
				log(LOG_INFO, "%s: Deleting interface...\n",
						ifp->if_xname);
				card->del_if(card, ifp);
			}
		}
		log(LOG_INFO, "%s: Shutdown device\n", card->devname);
		shutdown(card);
		tmp_card = card;
		card = LIST_NEXT(card, next);
		LIST_REMOVE(tmp_card, next);
		free(tmp_card, M_DEVBUF, 0);
	}

	log(LOG_INFO, "\n");
	log(LOG_INFO, "%s: WANPIPE Generic Modules Unloaded.\n",
						san_drvname);

	err = sdladrv_exit();
	return err;
}
#endif


int
san_dev_attach(void *hw, u_int8_t *devname, int namelen)
{
	sdla_t			*card;
	wanpipe_common_t	*common = NULL;
	int			err = 0;

	card = malloc(sizeof(*card), M_DEVBUF, M_NOWAIT | M_ZERO);
	if (!card) {
		log(LOG_INFO, "%s: Failed allocate new card!\n",
				san_drvname);
		return (EINVAL);
	}
	card->magic = WANPIPE_MAGIC;
	wanpipe_generic_name(card, card->devname, sizeof(card->devname));
	strlcpy(devname, card->devname, namelen);
	card->hw = hw;
	LIST_INIT(&card->dev_head);

	sdla_getcfg(card->hw, SDLA_CARDTYPE, &card->type);
	if (sdla_is_te1(card->hw))
		sdla_te_defcfg(&card->fe_te.te_cfg);

	err = sdla_setup(card->hw);
	if (err) {
		log(LOG_INFO, "%s: Hardware setup Failed %d\n",
			card->devname,err);
		return (EINVAL);
	}
	err = sdla_intr_establish(card->hw, sdla_isr, (void*)card);
	if (err) {
		log(LOG_INFO, "%s: Failed set interrupt handler!\n",
					card->devname);
		sdla_down(card->hw);
		return (EINVAL);
	}

	switch (card->type) {
	case SDLA_AFT:
#if defined(DEBUG_INIT)
		log(LOG_INFO, "%s: Starting AFT Hardware Init.\n",
				card->devname);
#endif
		common = wan_xilinx_init(card);
		break;
	}
	if (common == NULL) {
		release_hw(card);
		card->configured = 0;
		return (EINVAL);
	}
	LIST_INSERT_HEAD(&card->dev_head, common, next);

	/* Reserve I/O region and schedule background task */
	card->critical	= 0;
	card->state	= WAN_DISCONNECTED;
	card->ioctl	= wan_ioctl;
	return (0);
}


/*
 * Shut down WAN link driver.
 * o shut down adapter hardware
 * o release system resources.
 *
 */
#if 0
static int
shutdown (sdla_t *card)
{
	int err=0;

	if (card->state == WAN_UNCONFIGURED) {
		return 0;
	}
	card->state = WAN_UNCONFIGURED;

	bit_set((u_int8_t*)&card->critical, PERI_CRIT);

	/* In case of piggibacking, make sure that
         * we never try to shutdown both devices at the same
         * time, because they depend on one another */

	card->state = WAN_UNCONFIGURED;

	/* Release Resources */
	release_hw(card);

        /* only free the allocated I/O range if not an S514 adapter */
	if (!card->configured) {
		card->hw = NULL;
		if (card->same_cpu) {
			card->same_cpu->hw = NULL;
			card->same_cpu->same_cpu = NULL;
			card->same_cpu=NULL;
		}
	}

	bit_clear((u_int8_t*)&card->critical, PERI_CRIT);

	return err;
}
#endif

static void
release_hw(sdla_t *card)
{
	log(LOG_INFO, "%s: Master shutting down\n",card->devname);
	sdla_down(card->hw);
	sdla_intr_disestablish(card->hw);
	card->configured = 0;
	return;
}


/*
 * Driver IOCTL Handlers
 */

static int
wan_ioctl(struct ifnet *ifp, u_long cmd, struct ifreq *ifr)
{
	wanpipe_common_t	*common = WAN_IFP_TO_COMMON(ifp);
	int			err;

	SAN_ASSERT(common == NULL);
	SAN_ASSERT(common->card == NULL);

	if ((err = suser(curproc, 0)) != 0)
		return err;

	switch (cmd) {
	case SIOC_WANPIPE_HWPROBE:
		err = wan_ioctl_hwprobe(ifp, ifr->ifr_data);
		break;

	case SIOC_WANPIPE_DUMP:
		err = wan_ioctl_dump(common->card, ifr->ifr_data);
		break;

	default:
		err = ENOTTY;
		break;
	}
	return err;
}

static int
wan_ioctl_hwprobe(struct ifnet *ifp, void *u_def)
{
	sdla_t			*card = NULL;
	wanpipe_common_t	*common = WAN_IFP_TO_COMMON(ifp);
	wanlite_def_t	 	def;
	unsigned char		*str;
	int			err;

	SAN_ASSERT(common == NULL);
	SAN_ASSERT(common->card == NULL);
	card = common->card;
	bzero(&def, sizeof(wanlite_def_t));
	/* Get protocol type */
	def.proto = common->protocol;

	/* Get hardware configuration */
	err = sdla_get_hwprobe(card->hw, (void**)&str);
	if (err)
		return EINVAL;

	strlcpy(def.hwprobe, str, sizeof(def.hwprobe));
	/* Get interface configuration */
	if (IS_TE1(&card->fe_te.te_cfg)) {
		if (IS_T1(&card->fe_te.te_cfg))
			def.iface = IF_IFACE_T1;
		else
			def.iface = IF_IFACE_E1;

		bcopy(&card->fe_te.te_cfg, &def.te_cfg, sizeof(sdla_te_cfg_t));
	}

	err = copyout(&def, u_def, sizeof(def));
	if (err) {
		log(LOG_INFO, "%s: Failed to copy to user space (%d)\n",
		    card->devname, __LINE__);
		return ENOMEM;
	}
	return 0;
}

static int
wan_ioctl_dump(sdla_t *card, void *u_dump)
{
	sdla_dump_t	dump;
	void*		data;
	u_int32_t	memory;
	int		err = 0;

	err = copyin(u_dump, &dump, sizeof(sdla_dump_t));
	if (err)
		return err;

	sdla_getcfg(card->hw, SDLA_MEMORY, &memory);
	if (dump.magic != WANPIPE_MAGIC)
		return EINVAL;

	if ((dump.offset + dump.length) > memory)
		return EINVAL;

	data = malloc(dump.length, M_DEVBUF, M_NOWAIT);
	if (data == NULL)
		return ENOMEM;

	sdla_peek(card->hw, dump.offset, data, dump.length);
	err = copyout(data, dump.ptr, dump.length);
	if (err) {
		log(LOG_INFO, "%s: Failed to copy to user space (%d)\n",
				card->devname, __LINE__);
	}
	free(data, M_DEVBUF, 0);
	return err;
}


/*
 * SDLA Interrupt Service Routine.
 * o call protocol-specific interrupt service routine, if any.
 */
int
sdla_isr(void *pcard)
{
	sdla_t *card = (sdla_t*)pcard;

	if (card == NULL || card->magic != WANPIPE_MAGIC)
		return 0;

	switch (card->type) {
	case SDLA_AFT:
		if (card->isr)
			card->isr(card);
		break;
	}
	return (1);
}

struct mbuf* 
wan_mbuf_alloc(int len)
{
	struct mbuf	*m;

	/* XXX handle len > MCLBYTES */
	if (len <= 0 || len > MCLBYTES)
		return (NULL);

	MGETHDR(m, M_DONTWAIT, MT_DATA);

	if (m == NULL || len <= MHLEN)
		return (m);

	m->m_pkthdr.len = len;
	m->m_len = len;
	MCLGET(m, M_DONTWAIT);

	if ((m->m_flags & M_EXT) == 0) {
		m_freem(m);
		return (NULL);
	}

	return (m);
}

int 
wan_mbuf_to_buffer(struct mbuf **m_org)
{
	struct mbuf	*m, *m0, *tmp;
	char		*buffer;
	size_t	 	 len;

	if (m_org == NULL || *m_org == NULL)
		return (EINVAL);

	m0 = *m_org;
#if 0
	/* no need to copy if it is a single, properly aligned mbuf */
	if (m0->m_next == NULL && (mtod(m0, u_int32_t)  & 0x03) == 0)
		return (0);
#endif
	MGET(m, M_DONTWAIT, MT_DATA);

	if (m == NULL)
		return (ENOMEM);

	MCLGET(m, M_DONTWAIT);

	if ((m->m_flags & M_EXT) == 0) {
		m_freem(m);
		return (ENOMEM);
	}

	m->m_len = 0;

	/* XXX handle larger packets? */
	len = MCLBYTES ;
	buffer = mtod(m, caddr_t);

	len -= 16;
	buffer += 16;

	/* make sure the buffer is aligned to a 4-byte boundary */
	if (ADDR_MASK(buffer, 0x03)) {
		unsigned int inc = 4 - ADDR_MASK(buffer, 0x03);
		buffer += inc;
		len -= inc;
	}

	m->m_data = buffer;

	for (tmp = m0; tmp; tmp = tmp->m_next) {
		if (tmp->m_len > len) {
			m_freem(m);
			return (EINVAL);
		}
		bcopy(mtod(tmp, caddr_t), buffer, tmp->m_len);
		buffer += tmp->m_len;
		m->m_len += tmp->m_len;
		len -= tmp->m_len;
	}

	m_freem(m0);
	*m_org = m;

	return (0);
}
@


1.21
log
@Explicitly include <net/if_var.h> instead of pulling it in <net/if.h>.

ok mikeb@@, krw@@, bluhm@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.20 2014/09/14 14:17:25 jsg Exp $	*/
@


1.20
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.19 2014/09/08 06:24:13 jsg Exp $	*/
d55 1
a55 1
# include <net/netisr.h>
@


1.19
log
@remove uneeded route.h includes
ok miod@@ mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.18 2014/07/22 13:12:11 mpi Exp $	*/
a45 1
# include <sys/proc.h>
@


1.18
log
@Fewer <netinet/in_systm.h>
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.17 2014/07/12 18:48:52 tedu Exp $	*/
a56 1
# include <net/route.h>
@


1.17
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.16 2013/08/07 01:06:37 bluhm Exp $	*/
a61 1
# include <netinet/in_systm.h>
@


1.16
log
@Most network drivers include netinet/in_var.h, but apparently they
don't have to.  Just remove these include lines.
Compiled on amd64 i386 sparc64; OK henning@@ mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.15 2013/04/10 01:35:55 guenther Exp $	*/
d126 1
a126 1
		free(tmp_card, M_DEVBUF);
d357 1
a357 1
	free(data, M_DEVBUF);
@


1.15
log
@Fix various glitches in queue macro usage.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.14 2012/09/19 22:37:23 jsg Exp $	*/
a63 1
# include <netinet/in_var.h>
@


1.14
log
@ioctl requests are u_long not int, spotted via clang
ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.13 2009/02/08 20:07:44 chl Exp $	*/
d98 1
a98 1
LIST_HEAD(, sdla) wan_cardlist = LIST_HEAD_INITIALIZER(&wan_cardlist);
@


1.13
log
@fix uninitialized argument, and remove newly created unused variable.

Found by LLVM/Clang Static Analyzer.

ok krw@@ canacar@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.12 2007/10/01 15:34:48 krw Exp $	*/
d83 1
a83 1
static int wan_ioctl(struct ifnet*, int, struct ifreq *);
d261 1
a261 1
wan_ioctl(struct ifnet *ifp, int cmd, struct ifreq *ifr)
@


1.12
log
@More easy bzero() -> M_ZERO. Use 'p = malloc(sizeof(*p) ...' where
obvious.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.11 2005/11/08 20:23:42 canacar Exp $	*/
a262 1
	sdla_t			*card;
d278 1
a278 1
		err = wan_ioctl_dump(card, ifr->ifr_data);
@


1.11
log
@Use bus_dma(9) in san(4).  Now works on amd64.  Still works on i386
as tested extensively by Greg Mortensen, many thanks.  ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.10 2005/09/14 05:08:05 canacar Exp $	*/
d147 1
a147 1
	card=malloc(sizeof(sdla_t), M_DEVBUF, M_NOWAIT);
a152 1
	bzero(card, sizeof(sdla_t));
@


1.10
log
@decrease RX copy treshold to MHLEN to prevent
unnecessary copying if already allocating a cluster.
fix a comment and remove a bogus check while there.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.9 2005/09/01 23:35:42 canacar Exp $	*/
d400 2
a401 2
	m->m_pkthdr.len = 0;
	m->m_len = 0;
d450 2
a451 2
	if (mtod(m, u_int32_t) & 0x03) {
		unsigned int inc = 4 - (mtod(m, u_int32_t) & 0x03);
@


1.9
log
@Make sure the packets are aligned for dma while copying,
cleanup extra alignment code, and check lengths properly while copying.
tested by Greg Mortensen thevision at pobox com
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.8 2005/04/05 20:11:10 canacar Exp $	*/
d397 1
a397 1
	if (m == NULL || len < MHLEN)
d449 1
a449 1
	/* make sure the buffer is aligned to an 8-byte boundary */
@


1.8
log
@prevent non-root users to invoke wanpipe ioctls.
noticed by uwe@@, looks ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.7 2005/04/01 21:42:35 canacar Exp $	*/
a385 1
// XXX check usage, why is len not used ???
d391 12
a402 15
	if (len)
		MGETHDR(m, M_DONTWAIT, MT_DATA);
	else
		MGET(m, M_DONTWAIT, MT_DATA);

	if (m != NULL) {
		if (m->m_flags & M_PKTHDR)
			m->m_pkthdr.len = 0;

		m->m_len = 0;
		MCLGET(m, M_DONTWAIT);
		if ((m->m_flags & M_EXT) == 0) {
			m_freem(m);
			return NULL;
		}
d404 3
a406 1
		m->m_data += 16;
d408 1
a411 1
// XXX check len while copy?
d415 14
a428 1
	struct mbuf	*m = *m_org, *new = NULL;
d431 26
a456 1
		return EINVAL;
d458 4
a461 9
	new = wan_mbuf_alloc(0);
	if (new){
		struct mbuf	*tmp = m;
		char	*buffer = new->m_data;

		for( ; tmp; tmp = tmp->m_next) {
			bcopy(mtod(tmp, caddr_t), buffer, tmp->m_len);
			buffer += tmp->m_len;
			new->m_len += tmp->m_len;
d463 4
a466 3
		m_freem(m);
		*m_org = new;
		return 0;
d468 5
a472 1
	return EINVAL;
a473 1

@


1.7
log
@Improve san(4) driver:

* Some KNF, fix return values (from -Exxx to Exxx)
* Some string handling paranoia.
* Use ifconfig media options to switch between ppp and cHDLC modes,
  based on patch from claudio@@
* tcpdump works, patch from claudio@@
* ppp mode now works.

Lots of testing & feedback by Greg Mortensen,
Additional testing Sean Knox
ok alex@@, go go go deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.6 2005/03/01 18:37:06 mcbride Exp $	*/
d46 1
d270 4
@


1.6
log
@- make large packets work without hanging the interface
- make tcpdump attach correctly

by Alex Feldman prodded via Greg Mortensen <thevision@@pobox.com>

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.5 2004/12/07 08:44:38 jsg Exp $	*/
d107 2
a108 2
	while (card){
		if (card->disable_comm){
d110 2
a111 2
		}
		while ((common = LIST_FIRST(&card->dev_head))){
d113 3
a115 2
			if (card->del_if){
				struct ifnet	*ifp = (struct ifnet*)&common->ifp;
d140 1
a140 1
san_dev_attach(void *hw, u_int8_t *devname)
d150 1
a150 1
		return (-EINVAL);
d152 1
a152 1
	memset(card, 0, sizeof(sdla_t));
d154 2
a155 2
	wanpipe_generic_name(card, card->devname);
	bcopy(card->devname, devname, strlen(card->devname));
d160 1
a160 1
	if (sdla_is_te1(card->hw)) {
a161 1
	}
d167 1
a167 1
		return (-EINVAL);
d174 1
a174 1
		return (-EINVAL);
d189 1
a189 1
		return (-EINVAL);
d208 2
a209 1
static int shutdown (sdla_t *card)
d265 1
a265 1
	int			err = 0;
d279 1
a279 1
		err = 1;
d297 1
a297 1
	memset(&def, 0, sizeof(wanlite_def_t));
d303 4
a306 5
	if (err) {
		return -EINVAL;
	}
	str[strlen(str)] = '\0';
	memcpy(def.hwprobe, str, strlen(str));
d309 1
a309 1
		if (IS_T1(&card->fe_te.te_cfg)) {
d311 1
a311 1
		}else{
d313 2
a314 2
		}
		memcpy(&def.te_cfg, &card->fe_te.te_cfg, sizeof(sdla_te_cfg_t));
d321 1
a321 1
		return -ENOMEM;
d335 2
a336 3
	if (err) {
		return -EFAULT;
	}
d339 2
a340 3
	if (dump.magic != WANPIPE_MAGIC) {
		return -EINVAL;
	}
d342 2
a343 3
	if ((dump.offset + dump.length) > memory) {
		return -EINVAL;
	}
d346 2
a347 3
	if (data == NULL) {
		return -ENOMEM;
	}
a353 1
		err = -EFAULT;
d369 2
a370 1
	if (card == NULL || card->magic != WANPIPE_MAGIC) return 0;
d374 1
a374 1
		if (card->isr) {
a375 1
		}
d381 1
d387 1
a387 1
	if (len) {
d389 1
a389 1
	} else {
d391 1
a391 1
	}
d393 1
a393 1
		if (m->m_flags & M_PKTHDR) {
d395 1
a395 1
		}
d402 1
a403 1
		return (m);
d405 1
a405 1
	return NULL;
d408 1
d414 3
a416 3
	if (m == NULL){
		return -EINVAL;
	}
d431 1
a431 1
	return -EINVAL;
@


1.5
log
@Remove uneeded bpfdesc.h include.
ok mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.4 2004/07/16 15:11:45 alex Exp $	*/
d266 2
a267 11
	if (common == NULL) {
		log(LOG_INFO, "%s: Invalid softc pointer (%s:%d)!\n",
		    ifp->if_xname, __FUNCTION__, __LINE__);
		return (-EINVAL);
	}
	card = common->card;
	if (card == NULL) {
		log(LOG_INFO, "%s: Card private structure corrupted (%s:%d)!\n",
		    ifp->if_xname, __FUNCTION__, __LINE__);
		return (-EINVAL);
	}
d287 5
a291 4
	sdla_t		*card = NULL;
	wanlite_def_t	 def;
	unsigned char	*str;
	int		 err;
d293 3
a295 1
	card = ((wanpipe_common_t*)ifp->if_softc)->card;
d297 5
a301 1
	sdla_get_hwprobe(card->hw, (void**)&str);
d386 2
a387 2
struct mbuf *
wan_mbuf_alloc(void)
d391 5
a395 1
	MGETHDR(m, M_DONTWAIT, MT_DATA);
d397 4
d404 1
a404 1
			m = NULL;
d406 2
d409 1
a409 1
	return (m);
d411 26
@


1.4
log
@Aft source update.
mcbride ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.3 2004/06/26 22:19:38 mcbride Exp $	*/
a51 1
# include <net/bpfdesc.h>
@


1.3
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: if_san_common.c,v 1.2 2004/06/26 20:17:23 mcbride Exp $	*/
a35 1
# include </usr/include/bitstring.h>
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a71 2
/****** Defines & Macros ****************************************************/

a77 2
/****** Function Prototypes *************************************************/

d84 2
a85 2
static int wan_ioctl(struct ifnet* ifp, int cmd, struct ifreq* ifr);
static int sdla_isr (void* dev_id);
d87 1
a87 1
static void release_hw  (sdla_t *card);
d89 2
a90 2
static int wan_ioctl_dump(sdla_t* card, void* u_dump);
static int wan_ioctl_hwprobe(struct ifnet* ifp, void* u_def);
d92 2
a93 1
/****** Global Data **********************************************************
d140 2
a141 1
int san_dev_attach (void *hw, u_int8_t *devname)
d148 1
a148 1
	if (!card){
d151 1
a151 1
		return -EINVAL;
d161 1
a161 1
	if (sdla_is_te1(card->hw)){
d166 1
a166 1
	if (err){
d169 1
a169 1
		return -EINVAL;
d172 1
a172 1
	if (err){
d176 1
a176 1
		return -EINVAL;
d179 1
a179 1
	switch (card->type){
d188 1
a188 1
	if (common == NULL){
d191 1
a191 1
		return -EINVAL;
d199 1
a199 1
	return 0;
d203 2
a204 2
/*============================================================================
 * Shut down WAN link driver. 
d214 1
a214 1
	if (card->state == WAN_UNCONFIGURED){
d221 1
a221 1
	/* In case of piggibacking, make sure that 
d231 1
a231 1
	if (!card->configured){
d233 1
a233 1
		if (card->same_cpu){
d246 2
a247 1
static void release_hw (sdla_t *card)
d257 3
a259 1
/****** Driver IOCTL Handlers ***********************************************/
d262 1
a262 1
wan_ioctl(struct ifnet* ifp, int cmd, struct ifreq* ifr)
d268 1
a268 1
	if (common == NULL){
d270 2
a271 2
				ifp->if_xname, __FUNCTION__, __LINE__);
		return -EINVAL;
d274 1
a274 1
	if (card == NULL){
d276 2
a277 2
				ifp->if_xname, __FUNCTION__, __LINE__);
		return -EINVAL;
d279 1
a279 1
	switch (cmd){
d295 2
a296 2

static int wan_ioctl_hwprobe(struct ifnet* ifp, void* u_def)
d298 4
a301 4
	sdla_t*		card = NULL;
	wanlite_def_t	def;
	unsigned char*	str;
	int		err;
d306 1
a306 1
	if (err){
d312 2
a313 2
	if (IS_TE1(&card->fe_te.te_cfg)){
		if (IS_T1(&card->fe_te.te_cfg)){
d322 1
a322 1
	if (err){
d324 1
a324 1
				card->devname, __LINE__);
d330 2
a331 1
static int wan_ioctl_dump(sdla_t* card, void* u_dump)
d339 1
a339 1
	if (err){
d344 1
a344 1
	if (dump.magic != WANPIPE_MAGIC){
d348 1
a348 1
	if ((dump.offset + dump.length) > memory){
d353 1
a353 1
	if (data == NULL){
d359 1
a359 1
	if (err){
a367 1
/******* Miscellaneous ******************************************************/
d369 1
a369 1
/*============================================================================
d373 2
a374 1
int sdla_isr (void* pcard)
d376 1
a376 1
	sdla_t	*card = (sdla_t*)pcard;
d380 1
a380 1
	switch (card->type){
d382 1
a382 1
		if (card->isr){
d387 1
a387 1
	return 1;
d390 2
a391 1
struct mbuf* wan_mbuf_alloc(void)
d396 1
a396 1
	if (m != NULL){
d398 1
a398 1
		if ((m->m_flags & M_EXT) == 0){
d403 1
a403 1
	return m;
a404 2

/****** End *********************************************************/
@


1.1
log
@Sangoma Network Device driver for AFT series card (initiali version).
ok mcbride@@
@
text
@d1 2
@

