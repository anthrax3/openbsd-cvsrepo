head	1.31;
access;
symbols
	OPENBSD_5_6:1.30.0.4
	OPENBSD_5_6_BASE:1.30
	OPENBSD_5_5:1.29.0.16
	OPENBSD_5_5_BASE:1.29
	OPENBSD_5_4:1.29.0.12
	OPENBSD_5_4_BASE:1.29
	OPENBSD_5_3:1.29.0.10
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.29.0.8
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.6
	OPENBSD_5_0:1.29.0.4
	OPENBSD_5_0_BASE:1.29
	OPENBSD_4_9:1.29.0.2
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.28.0.2
	OPENBSD_4_8_BASE:1.28
	OPENBSD_4_7:1.27.0.14
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.27.0.16
	OPENBSD_4_6_BASE:1.27
	OPENBSD_4_5:1.27.0.12
	OPENBSD_4_5_BASE:1.27
	OPENBSD_4_4:1.27.0.10
	OPENBSD_4_4_BASE:1.27
	OPENBSD_4_3:1.27.0.8
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.27.0.6
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.27.0.4
	OPENBSD_4_1_BASE:1.27
	OPENBSD_4_0:1.27.0.2
	OPENBSD_4_0_BASE:1.27
	OPENBSD_3_9:1.26.0.8
	OPENBSD_3_9_BASE:1.26
	OPENBSD_3_8:1.26.0.6
	OPENBSD_3_8_BASE:1.26
	OPENBSD_3_7:1.26.0.4
	OPENBSD_3_7_BASE:1.26
	OPENBSD_3_6:1.26.0.2
	OPENBSD_3_6_BASE:1.26
	SMP_SYNC_A:1.26
	SMP_SYNC_B:1.26
	OPENBSD_3_5:1.25.0.2
	OPENBSD_3_5_BASE:1.25
	OPENBSD_3_4:1.23.0.2
	OPENBSD_3_4_BASE:1.23
	UBC_SYNC_A:1.22
	OPENBSD_3_3:1.22.0.2
	OPENBSD_3_3_BASE:1.22
	OPENBSD_3_2:1.21.0.2
	OPENBSD_3_2_BASE:1.21
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	UBC_SYNC_B:1.21
	UBC:1.11.0.2
	UBC_BASE:1.11
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	SMP:1.7.0.2;
locks; strict;
comment	@ * @;


1.31
date	2014.08.15.14.12.07;	author mikeb;	state dead;
branches;
next	1.30;
commitid	2AkQEO8mhDh240iv;

1.30
date	2014.07.12.18.48.52;	author tedu;	state Exp;
branches;
next	1.29;
commitid	OBNa5kfxQ2UXoiIw;

1.29
date	2011.01.12.17.01.26;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2010.04.08.00.23.53;	author tedu;	state Exp;
branches;
next	1.27;

1.27
date	2006.06.29.21.34.51;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2004.05.04.16.59.31;	author grange;	state Exp;
branches;
next	1.25;

1.25
date	2004.02.03.17.17.33;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2004.01.09.21.32.24;	author brad;	state Exp;
branches;
next	1.23;

1.23
date	2003.06.02.19.08.58;	author jason;	state Exp;
branches;
next	1.22;

1.22
date	2002.11.21.19.34.25;	author jason;	state Exp;
branches;
next	1.21;

1.21
date	2002.09.24.18.33.26;	author jason;	state Exp;
branches;
next	1.20;

1.20
date	2002.09.18.04.32.59;	author jason;	state Exp;
branches;
next	1.19;

1.19
date	2002.05.10.15.45.18;	author jason;	state Exp;
branches;
next	1.18;

1.18
date	2002.05.10.15.25.39;	author jason;	state Exp;
branches;
next	1.17;

1.17
date	2002.05.09.21.43.17;	author jason;	state Exp;
branches;
next	1.16;

1.16
date	2002.05.09.21.13.04;	author jason;	state Exp;
branches;
next	1.15;

1.15
date	2002.05.09.19.13.09;	author jason;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.08.19.09.25;	author jason;	state Exp;
branches;
next	1.13;

1.13
date	2002.04.08.17.49.42;	author jason;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.14.01.26.59;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.06.19.53.19;	author miod;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2001.08.25.10.13.29;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.12.20.03.49;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.08.18.05.43;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.26.23.34.18;	author jason;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2001.06.26.23.21.18;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.26.06.33.51;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.26.05.52.53;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.26.05.16.45;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.26.03.54.31;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.25.23.04.45;	author jason;	state Exp;
branches;
next	;

1.7.2.1
date	2001.10.31.03.22.46;	author nate;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2001.11.13.21.10.02;	author niklas;	state Exp;
branches;
next	1.7.2.3;

1.7.2.3
date	2002.03.28.15.35.58;	author niklas;	state Exp;
branches;
next	1.7.2.4;

1.7.2.4
date	2003.03.28.00.38.23;	author niklas;	state Exp;
branches;
next	1.7.2.5;

1.7.2.5
date	2003.06.07.11.02.30;	author ho;	state Exp;
branches;
next	1.7.2.6;

1.7.2.6
date	2004.02.19.10.56.27;	author niklas;	state Exp;
branches;
next	1.7.2.7;

1.7.2.7
date	2004.06.05.23.12.52;	author niklas;	state Exp;
branches;
next	;

1.11.2.1
date	2002.06.11.03.42.26;	author art;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2002.10.29.00.33.29;	author art;	state Exp;
branches;
next	1.11.2.3;

1.11.2.3
date	2003.05.19.22.18.01;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.31
log
@With deprecation of crypto(4) interface lofn(4) and nofn(4) become
obsolete.  No objections from the usual suspects.
@
text
@/*	$OpenBSD: lofn.c,v 1.30 2014/07/12 18:48:52 tedu Exp $	*/

/*
 * Copyright (c) 2001-2002 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
 */

/*
 * Driver for the Hifn 6500 assymmetric encryption processor.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/errno.h>
#include <sys/malloc.h>
#include <sys/kernel.h>
#include <sys/mbuf.h>
#include <sys/device.h>

#include <crypto/cryptodev.h>
#include <dev/rndvar.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#include <dev/pci/lofnreg.h>
#include <dev/pci/lofnvar.h>

/*
 * Prototypes and count for the pci_device structure
 */
int lofn_probe(struct device *, void *, void *);
void lofn_attach(struct device *, struct device *, void *);

struct cfattach lofn_ca = {
	sizeof(struct lofn_softc), lofn_probe, lofn_attach,
};

struct cfdriver lofn_cd = {
	0, "lofn", DV_DULL
};

int lofn_intr(void *);
int lofn_norm_sigbits(const u_int8_t *, u_int);
void lofn_dump_reg(struct lofn_softc *, int);
void lofn_zero_reg(struct lofn_softc *, int);
void lofn_read_reg(struct lofn_softc *, int, union lofn_reg *);
void lofn_write_reg(struct lofn_softc *, int, union lofn_reg *);
int lofn_kprocess(struct cryptkop *);
struct lofn_softc *lofn_kfind(struct cryptkop *);
int lofn_modexp_start(struct lofn_softc *, struct lofn_q *);
void lofn_modexp_finish(struct lofn_softc *, struct lofn_q *);

void lofn_feed(struct lofn_softc *);

int
lofn_probe(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
{
	struct pci_attach_args *pa = (struct pci_attach_args *) aux;

	if (PCI_VENDOR(pa->pa_id) == PCI_VENDOR_HIFN &&
	    PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_HIFN_6500)
		return (1);
	return (0);
}

void 
lofn_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct lofn_softc *sc = (struct lofn_softc *)self;
	struct pci_attach_args *pa = aux;
	pci_chipset_tag_t pc = pa->pa_pc;
	pci_intr_handle_t ih;
	const char *intrstr = NULL;
	bus_size_t iosize;
	int algs[CRK_ALGORITHM_MAX + 1];

	if (pci_mapreg_map(pa, LOFN_BAR0, PCI_MAPREG_TYPE_MEM, 0,
	    &sc->sc_st, &sc->sc_sh, NULL, &iosize, 0)) {
		printf(": can't map mem space\n");
		return;
	}

	sc->sc_dmat = pa->pa_dmat;

	if (pci_intr_map(pa, &ih)) {
		printf(": couldn't map interrupt\n");
		goto fail;
	}
	intrstr = pci_intr_string(pc, ih);
	sc->sc_ih = pci_intr_establish(pc, ih, IPL_NET, lofn_intr, sc,
	    self->dv_xname);
	if (sc->sc_ih == NULL) {
		printf(": couldn't establish interrupt");
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
		goto fail;
	}

	WRITE_REG_0(sc, LOFN_REL_RNC, LOFN_RNG_SCALAR);

	/* Enable RNG */
	WRITE_REG_0(sc, LOFN_REL_CFG2,
	    READ_REG_0(sc, LOFN_REL_CFG2) | LOFN_CFG2_RNGENA);
	sc->sc_ier |= LOFN_IER_RDY;
	WRITE_REG(sc, LOFN_REL_IER, sc->sc_ier);

	/* Enable ALU */
	WRITE_REG_0(sc, LOFN_REL_CFG2,
	    READ_REG_0(sc, LOFN_REL_CFG2) | LOFN_CFG2_PRCENA);

	SIMPLEQ_INIT(&sc->sc_queue);

	sc->sc_cid = crypto_get_driverid(0);
	if (sc->sc_cid < 0) {
		printf(": failed to register cid\n");
		return;
	}

	bzero(algs, sizeof(algs));
	algs[CRK_MOD_EXP] = CRYPTO_ALG_FLAG_SUPPORTED;

	crypto_kregister(sc->sc_cid, algs, lofn_kprocess);

	printf(": PK, %s\n", intrstr);

	return;

fail:
	bus_space_unmap(sc->sc_st, sc->sc_sh, iosize);
}

int 
lofn_intr(vsc)
	void *vsc;
{
	struct lofn_softc *sc = vsc;
	struct lofn_q *q;
	u_int32_t sr;
	int r = 0, i;

	sr = READ_REG_0(sc, LOFN_REL_SR);

	if (sc->sc_ier & LOFN_IER_RDY) {
		if (sr & LOFN_SR_RNG_UF) {
			r = 1;
			printf("%s: rng underflow (disabling)\n",
			    sc->sc_dv.dv_xname);
			WRITE_REG_0(sc, LOFN_REL_CFG2,
			    READ_REG_0(sc, LOFN_REL_CFG2) &
			    (~LOFN_CFG2_RNGENA));
			sc->sc_ier &= ~LOFN_IER_RDY;
			WRITE_REG_0(sc, LOFN_REL_IER, sc->sc_ier);
		} else if (sr & LOFN_SR_RNG_RDY) {
			r = 1;

			bus_space_read_region_4(sc->sc_st, sc->sc_sh,
			    LOFN_REL_RNG, sc->sc_rngbuf, LOFN_RNGBUF_SIZE);
			for (i = 0; i < LOFN_RNGBUF_SIZE; i++)
				add_true_randomness(sc->sc_rngbuf[i]);
		}
	}

	if (sc->sc_ier & LOFN_IER_DONE) {
		r = 1;
		if (sr & LOFN_SR_DONE && sc->sc_current != NULL) {
			q = sc->sc_current;
			sc->sc_current = NULL;
			q->q_finish(sc, q);
			free(q, M_DEVBUF, 0);
			lofn_feed(sc);
		}
	}

	return (r);
}

void
lofn_read_reg(sc, ridx, rp)
	struct lofn_softc *sc;
	int ridx;
	union lofn_reg *rp;
{
#if BYTE_ORDER == BIG_ENDIAN
	bus_space_read_region_4(sc->sc_st, sc->sc_sh,
	    LOFN_REGADDR(LOFN_WIN_0, ridx, 0), rp->w, 1024/32);
#else
	bus_space_read_region_4(sc->sc_st, sc->sc_sh,
	    LOFN_REGADDR(LOFN_WIN_2, ridx, 0), rp->w, 1024/32);
#endif
}

void
lofn_write_reg(sc, ridx, rp)
	struct lofn_softc *sc;
	int ridx;
	union lofn_reg *rp;
{
#if BYTE_ORDER == BIG_ENDIAN
	bus_space_write_region_4(sc->sc_st, sc->sc_sh,
	    LOFN_REGADDR(LOFN_WIN_0, ridx, 0), rp->w, 1024/32);
#else
	bus_space_write_region_4(sc->sc_st, sc->sc_sh,
	    LOFN_REGADDR(LOFN_WIN_2, ridx, 0), rp->w, 1024/32);
#endif
}

void
lofn_zero_reg(sc, ridx)
	struct lofn_softc *sc;
	int ridx;
{
	lofn_write_reg(sc, ridx, &sc->sc_zero);
}

void
lofn_dump_reg(sc, ridx)
	struct lofn_softc *sc;
	int ridx;
{
	int i;

	printf("reg %d bits %4u ", ridx,
	    READ_REG(sc, LOFN_LENADDR(LOFN_WIN_2, ridx)) & LOFN_LENMASK);

	for (i = 0; i < 1024/32; i++) {
		printf("%08X", READ_REG(sc, LOFN_REGADDR(LOFN_WIN_3, ridx, i)));
	}
	printf("\n");
}

struct lofn_softc *
lofn_kfind(krp)
	struct cryptkop *krp;
{
	struct lofn_softc *sc;
	int i;

	for (i = 0; i < lofn_cd.cd_ndevs; i++) {
		sc = lofn_cd.cd_devs[i];
		if (sc == NULL)
			continue;
		if (sc->sc_cid == krp->krp_hid)
			return (sc);
	}
	return (NULL);
}

int
lofn_kprocess(krp)
	struct cryptkop *krp;
{
	struct lofn_softc *sc;
	struct lofn_q *q;
	int s;

	if (krp == NULL || krp->krp_callback == NULL)
		return (EINVAL);
	if ((sc = lofn_kfind(krp)) == NULL) {
		krp->krp_status = EINVAL;
		crypto_kdone(krp);
		return (0);
	}

	q = (struct lofn_q *)malloc(sizeof(*q), M_DEVBUF, M_NOWAIT);
	if (q == NULL) {
		krp->krp_status = ENOMEM;
		crypto_kdone(krp);
		return (0);
	}

	switch (krp->krp_op) {
	case CRK_MOD_EXP:
		q->q_start = lofn_modexp_start;
		q->q_finish = lofn_modexp_finish;
		q->q_krp = krp;
		s = splnet();
		SIMPLEQ_INSERT_TAIL(&sc->sc_queue, q, q_next);
		lofn_feed(sc);
		splx(s);
		return (0);
	default:
		printf("%s: kprocess: invalid op 0x%x\n",
		    sc->sc_dv.dv_xname, krp->krp_op);
		krp->krp_status = EOPNOTSUPP;
		crypto_kdone(krp);
		free(q, M_DEVBUF, 0);
		return (0);
	}
}

int
lofn_modexp_start(sc, q)
	struct lofn_softc *sc;
	struct lofn_q *q;
{
	struct cryptkop *krp = q->q_krp;
	int ip = 0, err = 0;
	int mshift, eshift, nshift;
	int mbits, ebits, nbits;

	if (krp->krp_param[LOFN_MODEXP_PAR_M].crp_nbits > 1024) {
		err = ERANGE;
		goto errout;
	}

	/* Zero out registers. */
	lofn_zero_reg(sc, 0);
	lofn_zero_reg(sc, 1);
	lofn_zero_reg(sc, 2);
	lofn_zero_reg(sc, 3);

	/* Write out N... */
	nbits = lofn_norm_sigbits(krp->krp_param[LOFN_MODEXP_PAR_N].crp_p,
	    krp->krp_param[LOFN_MODEXP_PAR_N].crp_nbits);
	if (nbits > 1024) {
		err = E2BIG;
		goto errout;
	}
	if (nbits < 5) {
		err = ERANGE;
		goto errout;
	}
	bzero(&sc->sc_tmp, sizeof(sc->sc_tmp));
	bcopy(krp->krp_param[LOFN_MODEXP_PAR_N].crp_p, &sc->sc_tmp,
	    (nbits + 7) / 8);
	lofn_write_reg(sc, 2, &sc->sc_tmp);

	nshift = 1024 - nbits;
	WRITE_REG(sc, LOFN_LENADDR(LOFN_WIN_2, 2), 1024);
	if (nshift != 0) {
		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_SL, 2, 2, nshift));
		ip += 4;

		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_TAG, 2, 2, nbits));
		ip += 4;
	}

	/* Write out M... */
	mbits = lofn_norm_sigbits(krp->krp_param[LOFN_MODEXP_PAR_M].crp_p,
	    krp->krp_param[LOFN_MODEXP_PAR_M].crp_nbits);
	if (mbits > 1024 || mbits > nbits) {
		err = E2BIG;
		goto errout;
	}
	bzero(&sc->sc_tmp, sizeof(sc->sc_tmp));
	bcopy(krp->krp_param[LOFN_MODEXP_PAR_M].crp_p, &sc->sc_tmp,
	    (mbits + 7) / 8);
	lofn_write_reg(sc, 0, &sc->sc_tmp);

	mshift = 1024 - nbits;
	WRITE_REG(sc, LOFN_LENADDR(LOFN_WIN_2, 0), 1024);
	if (mshift != 0) {
		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_SL, 0, 0, mshift));
		ip += 4;

		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_TAG, 0, 0, nbits));
		ip += 4;
	}

	/* Write out E... */
	ebits = lofn_norm_sigbits(krp->krp_param[LOFN_MODEXP_PAR_E].crp_p,
	    krp->krp_param[LOFN_MODEXP_PAR_E].crp_nbits);
	if (ebits > 1024 || ebits > nbits) {
		err = E2BIG;
		goto errout;
	}
	if (ebits < 1) {
		err = ERANGE;
		goto errout;
	}
	bzero(&sc->sc_tmp, sizeof(sc->sc_tmp));
	bcopy(krp->krp_param[LOFN_MODEXP_PAR_E].crp_p, &sc->sc_tmp,
	    (ebits + 7) / 8);
	lofn_write_reg(sc, 1, &sc->sc_tmp);

	eshift = 1024 - nbits;
	WRITE_REG(sc, LOFN_LENADDR(LOFN_WIN_2, 1), 1024);
	if (eshift != 0) {
		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_SL, 1, 1, eshift));
		ip += 4;

		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_TAG, 1, 1, nbits));
		ip += 4;
	}

	if (nshift == 0) {
		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR(OP_DONE, OP_CODE_MODEXP, 3, 0, 1, 2));
		ip += 4;
	} else {
		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR(0, OP_CODE_MODEXP, 3, 0, 1, 2));
		ip += 4;

		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_SR, 3, 3, nshift));
		ip += 4;

		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(OP_DONE, OP_CODE_TAG, 3, 3, nbits));
		ip += 4;
	}

	/* Start microprogram */
	WRITE_REG(sc, LOFN_REL_CR, 0);

	return (0);

errout:
	explicit_bzero(&sc->sc_tmp, sizeof(sc->sc_tmp));
	lofn_zero_reg(sc, 0);
	lofn_zero_reg(sc, 1);
	lofn_zero_reg(sc, 2);
	lofn_zero_reg(sc, 3);
	krp->krp_status = err;
	crypto_kdone(krp);
	return (1);
}

void
lofn_modexp_finish(sc, q)
	struct lofn_softc *sc;
	struct lofn_q *q;
{
	struct cryptkop *krp = q->q_krp;
	int reglen, crplen;

	lofn_read_reg(sc, 3, &sc->sc_tmp);

	reglen = ((READ_REG(sc, LOFN_LENADDR(LOFN_WIN_2, 3)) & LOFN_LENMASK) +
	    7) / 8;
	crplen = (krp->krp_param[krp->krp_iparams].crp_nbits + 7) / 8;

	if (crplen <= reglen)
		bcopy(sc->sc_tmp.b, krp->krp_param[krp->krp_iparams].crp_p,
		    reglen);
	else {
		bcopy(sc->sc_tmp.b, krp->krp_param[krp->krp_iparams].crp_p,
		    reglen);
		bzero(krp->krp_param[krp->krp_iparams].crp_p + reglen,
		    crplen - reglen);
	}
	explicit_bzero(&sc->sc_tmp, sizeof(sc->sc_tmp));
	lofn_zero_reg(sc, 0);
	lofn_zero_reg(sc, 1);
	lofn_zero_reg(sc, 2);
	lofn_zero_reg(sc, 3);
	crypto_kdone(krp);
}

/*
 * Return the number of significant bits of a big number.
 */
int
lofn_norm_sigbits(const u_int8_t *p, u_int pbits)
{
	u_int plen = (pbits + 7) / 8;
	int i, sig = plen * 8;
	u_int8_t c;

	for (i = plen - 1; i >= 0; i--) {
		c = p[i];
		if (c != 0) {
			while ((c & 0x80) == 0) {
				sig--;
				c <<= 1;
			}
			break;
		}
		sig -= 8;
	}
	return (sig);
}

void
lofn_feed(sc)
	struct lofn_softc *sc;
{
	struct lofn_q *q;

	/* Queue is empty and nothing being processed, turn off interrupt */
	if (SIMPLEQ_EMPTY(&sc->sc_queue) &&
	    sc->sc_current == NULL) {
		sc->sc_ier &= ~LOFN_IER_DONE;
		WRITE_REG(sc, LOFN_REL_IER, sc->sc_ier);
		return;
	}

	/* Operation already pending, wait. */
	if (sc->sc_current != NULL)
		return;

	while (!SIMPLEQ_EMPTY(&sc->sc_queue)) {
		q = SIMPLEQ_FIRST(&sc->sc_queue);
		if (q->q_start(sc, q) == 0) {
			sc->sc_current = q;
			SIMPLEQ_REMOVE_HEAD(&sc->sc_queue, q_next);
			sc->sc_ier |= LOFN_IER_DONE;
			WRITE_REG(sc, LOFN_REL_IER, sc->sc_ier);
			break;
		} else {
			SIMPLEQ_REMOVE_HEAD(&sc->sc_queue, q_next);
			free(q, M_DEVBUF, 0);
		}
	}
}
@


1.30
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.29 2011/01/12 17:01:26 deraadt Exp $	*/
@


1.29
log
@explicit_bzero() of key material in drivers few people use
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.28 2010/04/08 00:23:53 tedu Exp $	*/
d203 1
a203 1
			free(q, M_DEVBUF);
d320 1
a320 1
		free(q, M_DEVBUF);
d543 1
a543 1
			free(q, M_DEVBUF);
@


1.28
log
@these files don't need to include proc.h anymore.  ok oga for agp
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.27 2006/06/29 21:34:51 deraadt Exp $	*/
d450 1
a450 1
	bzero(&sc->sc_tmp, sizeof(sc->sc_tmp));
d483 1
a483 1
	bzero(&sc->sc_tmp, sizeof(sc->sc_tmp));
@


1.27
log
@do not check for master/io/mem enables; ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.26 2004/05/04 16:59:31 grange Exp $	*/
a39 1
#include <sys/proc.h>
@


1.26
log
@Remove useless ``elm'' argument from the SIMPLEQ_REMOVE_HEAD macro.
This matches our SLIST behaviour and NetBSD's SIMPLEQ as well.

ok millert krw deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.25 2004/02/03 17:17:33 deraadt Exp $	*/
a108 1
	u_int32_t cmd;
a109 10

	cmd = pci_conf_read(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);
	cmd |= PCI_COMMAND_MEM_ENABLE;
	pci_conf_write(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG, cmd);
	cmd = pci_conf_read(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);

	if (!(cmd & PCI_COMMAND_MEM_ENABLE)) {
		printf(": failed to enable memory mapping\n");
		return;
	}
@


1.25
log
@advertise features of our crypto chips better; ok tdeval
jason is being a slacker
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.24 2004/01/09 21:32:24 brad Exp $	*/
d549 1
a549 1
			SIMPLEQ_REMOVE_HEAD(&sc->sc_queue, q, q_next);
d554 1
a554 1
			SIMPLEQ_REMOVE_HEAD(&sc->sc_queue, q, q_next);
@


1.24
log
@remove uvm_extern.h

tested on alpha, i386, powerpc, sparc64, m68k.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.23 2003/06/02 19:08:58 jason Exp $	*/
d170 1
a170 1
	printf(": %s\n", intrstr);
@


1.23
log
@nuke clase 3 & 4
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.22 2002/11/21 19:34:25 jason Exp $	*/
a45 2

#include <uvm/uvm_extern.h>
@


1.22
log
@From Angelos:
- simplistic load balancing across multiple cards
- simplified registration process
- a few style nits.
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.21 2002/09/24 18:33:26 jason Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.21
log
@Don't use constants for the output parameter, use the iparam count as a pointer to the first result location.
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.20 2002/09/18 04:32:59 jason Exp $	*/
d117 1
d172 4
a175 1
	crypto_kregister(sc->sc_cid, CRK_MOD_EXP, 0, lofn_kprocess);
@


1.20
log
@Write the operand registers with the correct endian (fortunately it just means
writing to a different window to swizzle the bytes)
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.19 2002/05/10 15:45:18 jason Exp $	*/
d487 1
a487 1
	crplen = (krp->krp_param[LOFN_MODEXP_PAR_C].crp_nbits + 7) / 8;
d490 1
a490 1
		bcopy(sc->sc_tmp.b, krp->krp_param[LOFN_MODEXP_PAR_C].crp_p,
d493 1
a493 1
		bcopy(sc->sc_tmp.b, krp->krp_param[LOFN_MODEXP_PAR_C].crp_p,
d495 1
a495 1
		bzero(krp->krp_param[LOFN_MODEXP_PAR_C].crp_p + reglen,
@


1.19
log
@Normalize base and exponent to the same length as the modulus and fail
if either base length or exponent length is greater than modulus.
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.18 2002/05/10 15:25:39 jason Exp $	*/
d232 4
d238 1
d247 4
d253 1
@


1.18
log
@- Add a set length insn for the result (length gets zotted by the shift right)
- Use length to determine how much to copy out, and bzero the rest
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.17 2002/05/09 21:43:17 jason Exp $	*/
d336 1
a336 1
	int ip = 0, bits, err = 0;
d338 1
d351 28
d380 1
a380 1
	bits = lofn_norm_sigbits(krp->krp_param[LOFN_MODEXP_PAR_M].crp_p,
d382 1
a382 1
	if (bits > 1024) {
d388 1
a388 1
	    (bits + 7) / 8);
d391 1
a391 1
	mshift = 1024 - bits;
d399 1
a399 1
		    LOFN_INSTR2(0, OP_CODE_TAG, 0, 0, bits));
d404 1
a404 1
	bits = lofn_norm_sigbits(krp->krp_param[LOFN_MODEXP_PAR_E].crp_p,
d406 1
a406 1
	if (bits > 1024) {
d410 1
a410 1
	if (bits < 1) {
d416 1
a416 1
	    (bits + 7) / 8);
d419 1
a419 1
	eshift = 1024 - bits;
d427 1
a427 29
		    LOFN_INSTR2(0, OP_CODE_TAG, 1, 1, bits));
		ip += 4;
	}

	/* Write out N... */
	bits = lofn_norm_sigbits(krp->krp_param[LOFN_MODEXP_PAR_N].crp_p,
	    krp->krp_param[LOFN_MODEXP_PAR_N].crp_nbits);
	if (bits > 1024) {
		err = E2BIG;
		goto errout;
	}
	if (bits < 5) {
		err = ERANGE;
		goto errout;
	}
	bzero(&sc->sc_tmp, sizeof(sc->sc_tmp));
	bcopy(krp->krp_param[LOFN_MODEXP_PAR_N].crp_p, &sc->sc_tmp,
	    (bits + 7) / 8);
	lofn_write_reg(sc, 2, &sc->sc_tmp);

	nshift = 1024 - bits;
	WRITE_REG(sc, LOFN_LENADDR(LOFN_WIN_2, 2), 1024);
	if (nshift != 0) {
		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_SL, 2, 2, nshift));
		ip += 4;

		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_TAG, 2, 2, bits));
d445 1
a445 1
		    LOFN_INSTR2(OP_DONE, OP_CODE_TAG, 3, 3, bits));
@


1.17
log
@Set length tag of the correct registers
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.16 2002/05/09 21:13:04 jason Exp $	*/
d440 5
a444 1
		    LOFN_INSTR2(OP_DONE, OP_CODE_SR, 3, 3, nshift));
d470 1
d473 14
a486 2
	bcopy(sc->sc_tmp.b, krp->krp_param[LOFN_MODEXP_PAR_C].crp_p,
	    (krp->krp_param[LOFN_MODEXP_PAR_C].crp_nbits + 7) / 8);
@


1.16
log
@Set correct bit in IER
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.15 2002/05/09 19:13:09 jason Exp $	*/
d398 1
a398 1
		    LOFN_INSTR2(0, OP_CODE_TAG, 0, 0, bits));
d426 1
a426 1
		    LOFN_INSTR2(0, OP_CODE_TAG, 0, 0, bits));
@


1.15
log
@Rework to process requests from a queue/interrupt handler instead of busy
waiting.
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.14 2002/05/08 19:09:25 jason Exp $	*/
d156 1
a156 1
	sc->sc_ier |= LOFN_REL_IER;
@


1.14
log
@register as having support for MODEXP operations and add associated
goop as appropriate.  Several problems still remain:
- alot of incorrect results (probably something stupid)
- the driver busy waits instead of being interrupt driven (pending question
to hifn about how interrupt ack is supposed to work).
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.13 2002/04/08 17:49:42 jason Exp $	*/
d4 1
a4 1
 * Copyright (c) 2001 Jason L. Wright (jason@@thought.net)
d86 4
a89 1
int lofn_kprocess_modexp(struct lofn_softc *, struct cryptkop *);
a153 2
	WRITE_REG_0(sc, LOFN_REL_IER,
	    READ_REG_0(sc, LOFN_REL_IER) | LOFN_IER_RDY);
d156 2
d163 2
d173 1
a173 1
	printf(": %s\n", intrstr, sc->sc_sh);
d186 1
d192 21
a212 1
	if (sr & LOFN_SR_RNG_UF) {
d214 7
a220 12
		printf("%s: rng underflow (disabling)\n", sc->sc_dv.dv_xname);
		WRITE_REG_0(sc, LOFN_REL_CFG2,
		    READ_REG_0(sc, LOFN_REL_CFG2) & (~LOFN_CFG2_RNGENA));
		WRITE_REG_0(sc, LOFN_REL_IER,
		    READ_REG_0(sc, LOFN_REL_IER) & (~LOFN_IER_RDY));
	} else if (sr & LOFN_SR_RNG_RDY) {
		r = 1;

		bus_space_read_region_4(sc->sc_st, sc->sc_sh, LOFN_REL_RNG,
		    sc->sc_rngbuf, LOFN_RNGBUF_SIZE);
		for (i = 0; i < LOFN_RNGBUF_SIZE; i++)
			add_true_randomness(sc->sc_rngbuf[i]);
d292 2
d297 12
a308 2
	if ((sc = lofn_kfind(krp)) == NULL)
		return (EINVAL);
d312 8
a319 1
		return (lofn_kprocess_modexp(sc, krp));
d325 1
a329 3
/*
 * Start computation of cr[C] = (cr[M] ^ cr[E]) mod cr[N]
 */
d331 1
a331 1
lofn_kprocess_modexp(sc, krp)
d333 1
a333 1
	struct cryptkop *krp;
d335 1
a343 6
	/* Poll until done... */
	while (1) {
		if (READ_REG(sc, LOFN_REL_SR) & LOFN_SR_DONE)
			break;
	}

d444 1
d447 19
a465 4
	while (1) {
		if (READ_REG(sc, LOFN_REL_SR) & LOFN_SR_DONE)
			break;
	}
a469 4
	crypto_kdone(krp);
	return (0);

errout:
a474 1
	krp->krp_status = err;
a475 1
	return (0);
d500 33
@


1.13
log
@Credit DARPA/USAF appropriately.
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.12 2002/03/14 01:26:59 millert Exp $	*/
d79 8
a86 5

void lofn_putnum(struct lofn_softc *, u_int32_t, u_int32_t,
    u_int32_t *, u_int32_t);
int lofn_getnum(struct lofn_softc *, u_int32_t, u_int32_t,
    u_int32_t *num, u_int32_t *numlen);
d156 12
d206 21
a226 1
lofn_putnum(sc, win, reg, num, numlen)
d228 41
a268 1
	u_int32_t reg, win, *num, numlen;
d270 1
a270 1
	u_int32_t i, len;
d272 15
a286 4
	len = ((numlen >> 5) + 3) >> 2;
	for (i = 0; i < len; i++)
		WRITE_REG(sc, LOFN_REGADDR(win, reg, i), num[i]);
	WRITE_REG(sc, LOFN_LENADDR(win, reg), numlen);
d289 3
d293 1
a293 1
lofn_getnum(sc, win, reg, num, numlen)
d295 1
a295 1
	u_int32_t win, reg, *num, *numlen;
d297 113
a409 1
	u_int32_t len, i;
d411 11
a421 7
	len = READ_REG(sc, LOFN_LENADDR(win, reg)) & LOFN_LENMASK;
	if (len > (*numlen))
		return (-1);
	(*numlen) = len;
	len = ((len >> 5) + 3) >> 2;
	for (i = 0; i < len; i++)
		num[i] = READ_REG(sc, LOFN_REGADDR(win, reg, i));
d423 34
@


1.12
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.11 2001/11/06 19:53:19 miod Exp $	*/
d32 5
@


1.11
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.10 2001/08/25 10:13:29 art Exp $	*/
d62 2
a63 2
int lofn_probe		__P((struct device *, void *, void *));
void lofn_attach	__P((struct device *, struct device *, void *));
d73 1
a73 1
int lofn_intr	__P((void *));
d75 4
a78 4
void lofn_putnum __P((struct lofn_softc *, u_int32_t, u_int32_t,
    u_int32_t *, u_int32_t));
int lofn_getnum __P((struct lofn_softc *, u_int32_t, u_int32_t,
    u_int32_t *num, u_int32_t *numlen));
@


1.11.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.11 2001/11/06 19:53:19 miod Exp $	*/
d4 1
a4 1
 * Copyright (c) 2001-2002 Jason L. Wright (jason@@thought.net)
a31 5
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
d62 2
a63 2
int lofn_probe(struct device *, void *, void *);
void lofn_attach(struct device *, struct device *, void *);
d73 1
a73 10
int lofn_intr(void *);
int lofn_norm_sigbits(const u_int8_t *, u_int);
void lofn_dump_reg(struct lofn_softc *, int);
void lofn_zero_reg(struct lofn_softc *, int);
void lofn_read_reg(struct lofn_softc *, int, union lofn_reg *);
void lofn_write_reg(struct lofn_softc *, int, union lofn_reg *);
int lofn_kprocess(struct cryptkop *);
struct lofn_softc *lofn_kfind(struct cryptkop *);
int lofn_modexp_start(struct lofn_softc *, struct lofn_q *);
void lofn_modexp_finish(struct lofn_softc *, struct lofn_q *);
d75 4
a78 1
void lofn_feed(struct lofn_softc *);
d143 2
a146 16
	sc->sc_ier |= LOFN_IER_RDY;
	WRITE_REG(sc, LOFN_REL_IER, sc->sc_ier);

	/* Enable ALU */
	WRITE_REG_0(sc, LOFN_REL_CFG2,
	    READ_REG_0(sc, LOFN_REL_CFG2) | LOFN_CFG2_PRCENA);

	SIMPLEQ_INIT(&sc->sc_queue);

	sc->sc_cid = crypto_get_driverid(0);
	if (sc->sc_cid < 0) {
		printf(": failed to register cid\n");
		return;
	}

	crypto_kregister(sc->sc_cid, CRK_MOD_EXP, 0, lofn_kprocess);
d148 1
a148 1
	printf(": %s\n", intrstr);
a160 1
	struct lofn_q *q;
d166 9
a174 19
	if (sc->sc_ier & LOFN_IER_RDY) {
		if (sr & LOFN_SR_RNG_UF) {
			r = 1;
			printf("%s: rng underflow (disabling)\n",
			    sc->sc_dv.dv_xname);
			WRITE_REG_0(sc, LOFN_REL_CFG2,
			    READ_REG_0(sc, LOFN_REL_CFG2) &
			    (~LOFN_CFG2_RNGENA));
			sc->sc_ier &= ~LOFN_IER_RDY;
			WRITE_REG_0(sc, LOFN_REL_IER, sc->sc_ier);
		} else if (sr & LOFN_SR_RNG_RDY) {
			r = 1;

			bus_space_read_region_4(sc->sc_st, sc->sc_sh,
			    LOFN_REL_RNG, sc->sc_rngbuf, LOFN_RNGBUF_SIZE);
			for (i = 0; i < LOFN_RNGBUF_SIZE; i++)
				add_true_randomness(sc->sc_rngbuf[i]);
		}
	}
d176 4
a179 9
	if (sc->sc_ier & LOFN_IER_DONE) {
		r = 1;
		if (sr & LOFN_SR_DONE && sc->sc_current != NULL) {
			q = sc->sc_current;
			sc->sc_current = NULL;
			q->q_finish(sc, q);
			free(q, M_DEVBUF);
			lofn_feed(sc);
		}
d186 1
a186 21
lofn_read_reg(sc, ridx, rp)
	struct lofn_softc *sc;
	int ridx;
	union lofn_reg *rp;
{
	bus_space_read_region_4(sc->sc_st, sc->sc_sh,
	    LOFN_REGADDR(LOFN_WIN_2, ridx, 0), rp->w, 1024/32);
}

void
lofn_write_reg(sc, ridx, rp)
	struct lofn_softc *sc;
	int ridx;
	union lofn_reg *rp;
{
	bus_space_write_region_4(sc->sc_st, sc->sc_sh,
	    LOFN_REGADDR(LOFN_WIN_2, ridx, 0), rp->w, 1024/32);
}

void
lofn_zero_reg(sc, ridx)
d188 1
a188 1
	int ridx;
d190 1
a190 58
	lofn_write_reg(sc, ridx, &sc->sc_zero);
}

void
lofn_dump_reg(sc, ridx)
	struct lofn_softc *sc;
	int ridx;
{
	int i;

	printf("reg %d bits %4u ", ridx,
	    READ_REG(sc, LOFN_LENADDR(LOFN_WIN_2, ridx)) & LOFN_LENMASK);

	for (i = 0; i < 1024/32; i++) {
		printf("%08X", READ_REG(sc, LOFN_REGADDR(LOFN_WIN_3, ridx, i)));
	}
	printf("\n");
}

struct lofn_softc *
lofn_kfind(krp)
	struct cryptkop *krp;
{
	struct lofn_softc *sc;
	int i;

	for (i = 0; i < lofn_cd.cd_ndevs; i++) {
		sc = lofn_cd.cd_devs[i];
		if (sc == NULL)
			continue;
		if (sc->sc_cid == krp->krp_hid)
			return (sc);
	}
	return (NULL);
}

int
lofn_kprocess(krp)
	struct cryptkop *krp;
{
	struct lofn_softc *sc;
	struct lofn_q *q;
	int s;

	if (krp == NULL || krp->krp_callback == NULL)
		return (EINVAL);
	if ((sc = lofn_kfind(krp)) == NULL) {
		krp->krp_status = EINVAL;
		crypto_kdone(krp);
		return (0);
	}

	q = (struct lofn_q *)malloc(sizeof(*q), M_DEVBUF, M_NOWAIT);
	if (q == NULL) {
		krp->krp_status = ENOMEM;
		crypto_kdone(krp);
		return (0);
	}
d192 4
a195 18
	switch (krp->krp_op) {
	case CRK_MOD_EXP:
		q->q_start = lofn_modexp_start;
		q->q_finish = lofn_modexp_finish;
		q->q_krp = krp;
		s = splnet();
		SIMPLEQ_INSERT_TAIL(&sc->sc_queue, q, q_next);
		lofn_feed(sc);
		splx(s);
		return (0);
	default:
		printf("%s: kprocess: invalid op 0x%x\n",
		    sc->sc_dv.dv_xname, krp->krp_op);
		krp->krp_status = EOPNOTSUPP;
		crypto_kdone(krp);
		free(q, M_DEVBUF);
		return (0);
	}
d199 1
a199 1
lofn_modexp_start(sc, q)
d201 1
a201 1
	struct lofn_q *q;
d203 1
a203 116
	struct cryptkop *krp = q->q_krp;
	int ip = 0, err = 0;
	int mshift, eshift, nshift;
	int mbits, ebits, nbits;

	if (krp->krp_param[LOFN_MODEXP_PAR_M].crp_nbits > 1024) {
		err = ERANGE;
		goto errout;
	}

	/* Zero out registers. */
	lofn_zero_reg(sc, 0);
	lofn_zero_reg(sc, 1);
	lofn_zero_reg(sc, 2);
	lofn_zero_reg(sc, 3);

	/* Write out N... */
	nbits = lofn_norm_sigbits(krp->krp_param[LOFN_MODEXP_PAR_N].crp_p,
	    krp->krp_param[LOFN_MODEXP_PAR_N].crp_nbits);
	if (nbits > 1024) {
		err = E2BIG;
		goto errout;
	}
	if (nbits < 5) {
		err = ERANGE;
		goto errout;
	}
	bzero(&sc->sc_tmp, sizeof(sc->sc_tmp));
	bcopy(krp->krp_param[LOFN_MODEXP_PAR_N].crp_p, &sc->sc_tmp,
	    (nbits + 7) / 8);
	lofn_write_reg(sc, 2, &sc->sc_tmp);

	nshift = 1024 - nbits;
	WRITE_REG(sc, LOFN_LENADDR(LOFN_WIN_2, 2), 1024);
	if (nshift != 0) {
		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_SL, 2, 2, nshift));
		ip += 4;

		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_TAG, 2, 2, nbits));
		ip += 4;
	}

	/* Write out M... */
	mbits = lofn_norm_sigbits(krp->krp_param[LOFN_MODEXP_PAR_M].crp_p,
	    krp->krp_param[LOFN_MODEXP_PAR_M].crp_nbits);
	if (mbits > 1024 || mbits > nbits) {
		err = E2BIG;
		goto errout;
	}
	bzero(&sc->sc_tmp, sizeof(sc->sc_tmp));
	bcopy(krp->krp_param[LOFN_MODEXP_PAR_M].crp_p, &sc->sc_tmp,
	    (mbits + 7) / 8);
	lofn_write_reg(sc, 0, &sc->sc_tmp);

	mshift = 1024 - nbits;
	WRITE_REG(sc, LOFN_LENADDR(LOFN_WIN_2, 0), 1024);
	if (mshift != 0) {
		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_SL, 0, 0, mshift));
		ip += 4;

		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_TAG, 0, 0, nbits));
		ip += 4;
	}

	/* Write out E... */
	ebits = lofn_norm_sigbits(krp->krp_param[LOFN_MODEXP_PAR_E].crp_p,
	    krp->krp_param[LOFN_MODEXP_PAR_E].crp_nbits);
	if (ebits > 1024 || ebits > nbits) {
		err = E2BIG;
		goto errout;
	}
	if (ebits < 1) {
		err = ERANGE;
		goto errout;
	}
	bzero(&sc->sc_tmp, sizeof(sc->sc_tmp));
	bcopy(krp->krp_param[LOFN_MODEXP_PAR_E].crp_p, &sc->sc_tmp,
	    (ebits + 7) / 8);
	lofn_write_reg(sc, 1, &sc->sc_tmp);

	eshift = 1024 - nbits;
	WRITE_REG(sc, LOFN_LENADDR(LOFN_WIN_2, 1), 1024);
	if (eshift != 0) {
		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_SL, 1, 1, eshift));
		ip += 4;

		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_TAG, 1, 1, nbits));
		ip += 4;
	}

	if (nshift == 0) {
		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR(OP_DONE, OP_CODE_MODEXP, 3, 0, 1, 2));
		ip += 4;
	} else {
		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR(0, OP_CODE_MODEXP, 3, 0, 1, 2));
		ip += 4;

		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_SR, 3, 3, nshift));
		ip += 4;

		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(OP_DONE, OP_CODE_TAG, 3, 3, nbits));
		ip += 4;
	}

	/* Start microprogram */
	WRITE_REG(sc, LOFN_REL_CR, 0);
d205 7
a212 98

errout:
	bzero(&sc->sc_tmp, sizeof(sc->sc_tmp));
	lofn_zero_reg(sc, 0);
	lofn_zero_reg(sc, 1);
	lofn_zero_reg(sc, 2);
	lofn_zero_reg(sc, 3);
	krp->krp_status = err;
	crypto_kdone(krp);
	return (1);
}

void
lofn_modexp_finish(sc, q)
	struct lofn_softc *sc;
	struct lofn_q *q;
{
	struct cryptkop *krp = q->q_krp;
	int reglen, crplen;

	lofn_read_reg(sc, 3, &sc->sc_tmp);

	reglen = ((READ_REG(sc, LOFN_LENADDR(LOFN_WIN_2, 3)) & LOFN_LENMASK) +
	    7) / 8;
	crplen = (krp->krp_param[LOFN_MODEXP_PAR_C].crp_nbits + 7) / 8;

	if (crplen <= reglen)
		bcopy(sc->sc_tmp.b, krp->krp_param[LOFN_MODEXP_PAR_C].crp_p,
		    reglen);
	else {
		bcopy(sc->sc_tmp.b, krp->krp_param[LOFN_MODEXP_PAR_C].crp_p,
		    reglen);
		bzero(krp->krp_param[LOFN_MODEXP_PAR_C].crp_p + reglen,
		    crplen - reglen);
	}
	bzero(&sc->sc_tmp, sizeof(sc->sc_tmp));
	lofn_zero_reg(sc, 0);
	lofn_zero_reg(sc, 1);
	lofn_zero_reg(sc, 2);
	lofn_zero_reg(sc, 3);
	crypto_kdone(krp);
}

/*
 * Return the number of significant bits of a big number.
 */
int
lofn_norm_sigbits(const u_int8_t *p, u_int pbits)
{
	u_int plen = (pbits + 7) / 8;
	int i, sig = plen * 8;
	u_int8_t c;

	for (i = plen - 1; i >= 0; i--) {
		c = p[i];
		if (c != 0) {
			while ((c & 0x80) == 0) {
				sig--;
				c <<= 1;
			}
			break;
		}
		sig -= 8;
	}
	return (sig);
}

void
lofn_feed(sc)
	struct lofn_softc *sc;
{
	struct lofn_q *q;

	/* Queue is empty and nothing being processed, turn off interrupt */
	if (SIMPLEQ_EMPTY(&sc->sc_queue) &&
	    sc->sc_current == NULL) {
		sc->sc_ier &= ~LOFN_IER_DONE;
		WRITE_REG(sc, LOFN_REL_IER, sc->sc_ier);
		return;
	}

	/* Operation already pending, wait. */
	if (sc->sc_current != NULL)
		return;

	while (!SIMPLEQ_EMPTY(&sc->sc_queue)) {
		q = SIMPLEQ_FIRST(&sc->sc_queue);
		if (q->q_start(sc, q) == 0) {
			sc->sc_current = q;
			SIMPLEQ_REMOVE_HEAD(&sc->sc_queue, q, q_next);
			sc->sc_ier |= LOFN_IER_DONE;
			WRITE_REG(sc, LOFN_REL_IER, sc->sc_ier);
			break;
		} else {
			SIMPLEQ_REMOVE_HEAD(&sc->sc_queue, q, q_next);
			free(q, M_DEVBUF);
		}
	}
@


1.11.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.11.2.1 2002/06/11 03:42:26 art Exp $	*/
a231 4
#if BYTE_ORDER == BIG_ENDIAN
	bus_space_read_region_4(sc->sc_st, sc->sc_sh,
	    LOFN_REGADDR(LOFN_WIN_0, ridx, 0), rp->w, 1024/32);
#else
a233 1
#endif
a241 4
#if BYTE_ORDER == BIG_ENDIAN
	bus_space_write_region_4(sc->sc_st, sc->sc_sh,
	    LOFN_REGADDR(LOFN_WIN_0, ridx, 0), rp->w, 1024/32);
#else
a243 1
#endif
d477 1
a477 1
	crplen = (krp->krp_param[krp->krp_iparams].crp_nbits + 7) / 8;
d480 1
a480 1
		bcopy(sc->sc_tmp.b, krp->krp_param[krp->krp_iparams].crp_p,
d483 1
a483 1
		bcopy(sc->sc_tmp.b, krp->krp_param[krp->krp_iparams].crp_p,
d485 1
a485 1
		bzero(krp->krp_param[krp->krp_iparams].crp_p + reglen,
@


1.11.2.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a116 1
	int algs[CRK_ALGORITHM_MAX + 1];
d171 1
a171 4
	bzero(algs, sizeof(algs));
	algs[CRK_MOD_EXP] = CRYPTO_ALG_FLAG_SUPPORTED;

	crypto_kregister(sc->sc_cid, algs, lofn_kprocess);
@


1.10
log
@Change pci_intr_map to take pci_attach_args as an argument.
All callers actually took all arguments to pci_intr_map from pci_attach_args
structs, so this simplifies code.
This also allows more complicated interrupt assignment schemes like the one
on sparc64.

This makes sparc64 pci interrupts work.

Inspired by the same change in NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.9 2001/08/12 20:03:49 mickey Exp $	*/
d47 1
a47 1
#include <vm/vm.h>
@


1.9
log
@remove redundant vm includes
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.8 2001/07/08 18:05:43 brad Exp $	*/
d125 1
a125 2
	if (pci_intr_map(pc, pa->pa_intrtag, pa->pa_intrpin,
	    pa->pa_intrline, &ih)) {
@


1.8
log
@Hifn has changed its company name, make the name consistent throughout
the tree. Hi/fn, Hi/Fn and HiFn -> Hifn.
--
Ok'd by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.7 2001/06/26 23:34:18 jason Exp $	*/
d45 2
a47 4
#include <vm/vm_extern.h>
#include <vm/pmap.h>
#include <machine/pmap.h>
#include <sys/device.h>
@


1.7
log
@routines for getting/putting data register numbers
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.6 2001/06/26 23:21:18 jason Exp $	*/
d35 1
a35 1
 * Driver for the Hi/Fn 6500 assymmetric encryption processor.
@


1.7.2.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.7 2001/06/26 23:34:18 jason Exp $	*/
d35 1
a35 1
 * Driver for the Hifn 6500 assymmetric encryption processor.
d45 4
a50 2
#include <vm/vm.h>

d127 2
a128 1
	if (pci_intr_map(pa, &ih)) {
@


1.7.2.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
a47 1
#include <uvm/uvm_extern.h>
@


1.7.2.3
log
@Merge in -current from roughly a week ago
@
text
@d62 2
a63 2
int lofn_probe(struct device *, void *, void *);
void lofn_attach(struct device *, struct device *, void *);
d73 1
a73 1
int lofn_intr(void *);
d75 4
a78 4
void lofn_putnum(struct lofn_softc *, u_int32_t, u_int32_t,
    u_int32_t *, u_int32_t);
int lofn_getnum(struct lofn_softc *, u_int32_t, u_int32_t,
    u_int32_t *num, u_int32_t *numlen);
@


1.7.2.4
log
@Sync the SMP branch with 3.3
@
text
@d4 1
a4 1
 * Copyright (c) 2001-2002 Jason L. Wright (jason@@thought.net)
a31 5
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
a73 9
int lofn_norm_sigbits(const u_int8_t *, u_int);
void lofn_dump_reg(struct lofn_softc *, int);
void lofn_zero_reg(struct lofn_softc *, int);
void lofn_read_reg(struct lofn_softc *, int, union lofn_reg *);
void lofn_write_reg(struct lofn_softc *, int, union lofn_reg *);
int lofn_kprocess(struct cryptkop *);
struct lofn_softc *lofn_kfind(struct cryptkop *);
int lofn_modexp_start(struct lofn_softc *, struct lofn_q *);
void lofn_modexp_finish(struct lofn_softc *, struct lofn_q *);
d75 4
a78 1
void lofn_feed(struct lofn_softc *);
a105 1
	int algs[CRK_ALGORITHM_MAX + 1];
d143 2
a146 17
	sc->sc_ier |= LOFN_IER_RDY;
	WRITE_REG(sc, LOFN_REL_IER, sc->sc_ier);

	/* Enable ALU */
	WRITE_REG_0(sc, LOFN_REL_CFG2,
	    READ_REG_0(sc, LOFN_REL_CFG2) | LOFN_CFG2_PRCENA);

	SIMPLEQ_INIT(&sc->sc_queue);

	sc->sc_cid = crypto_get_driverid(0);
	if (sc->sc_cid < 0) {
		printf(": failed to register cid\n");
		return;
	}

	bzero(algs, sizeof(algs));
	algs[CRK_MOD_EXP] = CRYPTO_ALG_FLAG_SUPPORTED;
d148 1
a148 3
	crypto_kregister(sc->sc_cid, algs, lofn_kprocess);

	printf(": %s\n", intrstr);
a160 1
	struct lofn_q *q;
d166 9
a174 19
	if (sc->sc_ier & LOFN_IER_RDY) {
		if (sr & LOFN_SR_RNG_UF) {
			r = 1;
			printf("%s: rng underflow (disabling)\n",
			    sc->sc_dv.dv_xname);
			WRITE_REG_0(sc, LOFN_REL_CFG2,
			    READ_REG_0(sc, LOFN_REL_CFG2) &
			    (~LOFN_CFG2_RNGENA));
			sc->sc_ier &= ~LOFN_IER_RDY;
			WRITE_REG_0(sc, LOFN_REL_IER, sc->sc_ier);
		} else if (sr & LOFN_SR_RNG_RDY) {
			r = 1;

			bus_space_read_region_4(sc->sc_st, sc->sc_sh,
			    LOFN_REL_RNG, sc->sc_rngbuf, LOFN_RNGBUF_SIZE);
			for (i = 0; i < LOFN_RNGBUF_SIZE; i++)
				add_true_randomness(sc->sc_rngbuf[i]);
		}
	}
d176 4
a179 9
	if (sc->sc_ier & LOFN_IER_DONE) {
		r = 1;
		if (sr & LOFN_SR_DONE && sc->sc_current != NULL) {
			q = sc->sc_current;
			sc->sc_current = NULL;
			q->q_finish(sc, q);
			free(q, M_DEVBUF);
			lofn_feed(sc);
		}
d186 1
a186 39
lofn_read_reg(sc, ridx, rp)
	struct lofn_softc *sc;
	int ridx;
	union lofn_reg *rp;
{
#if BYTE_ORDER == BIG_ENDIAN
	bus_space_read_region_4(sc->sc_st, sc->sc_sh,
	    LOFN_REGADDR(LOFN_WIN_0, ridx, 0), rp->w, 1024/32);
#else
	bus_space_read_region_4(sc->sc_st, sc->sc_sh,
	    LOFN_REGADDR(LOFN_WIN_2, ridx, 0), rp->w, 1024/32);
#endif
}

void
lofn_write_reg(sc, ridx, rp)
	struct lofn_softc *sc;
	int ridx;
	union lofn_reg *rp;
{
#if BYTE_ORDER == BIG_ENDIAN
	bus_space_write_region_4(sc->sc_st, sc->sc_sh,
	    LOFN_REGADDR(LOFN_WIN_0, ridx, 0), rp->w, 1024/32);
#else
	bus_space_write_region_4(sc->sc_st, sc->sc_sh,
	    LOFN_REGADDR(LOFN_WIN_2, ridx, 0), rp->w, 1024/32);
#endif
}

void
lofn_zero_reg(sc, ridx)
	struct lofn_softc *sc;
	int ridx;
{
	lofn_write_reg(sc, ridx, &sc->sc_zero);
}

void
lofn_dump_reg(sc, ridx)
d188 1
a188 1
	int ridx;
d190 1
a190 1
	int i;
d192 4
a195 24
	printf("reg %d bits %4u ", ridx,
	    READ_REG(sc, LOFN_LENADDR(LOFN_WIN_2, ridx)) & LOFN_LENMASK);

	for (i = 0; i < 1024/32; i++) {
		printf("%08X", READ_REG(sc, LOFN_REGADDR(LOFN_WIN_3, ridx, i)));
	}
	printf("\n");
}

struct lofn_softc *
lofn_kfind(krp)
	struct cryptkop *krp;
{
	struct lofn_softc *sc;
	int i;

	for (i = 0; i < lofn_cd.cd_ndevs; i++) {
		sc = lofn_cd.cd_devs[i];
		if (sc == NULL)
			continue;
		if (sc->sc_cid == krp->krp_hid)
			return (sc);
	}
	return (NULL);
d199 1
a199 3
lofn_kprocess(krp)
	struct cryptkop *krp;
{
d201 1
a201 42
	struct lofn_q *q;
	int s;

	if (krp == NULL || krp->krp_callback == NULL)
		return (EINVAL);
	if ((sc = lofn_kfind(krp)) == NULL) {
		krp->krp_status = EINVAL;
		crypto_kdone(krp);
		return (0);
	}

	q = (struct lofn_q *)malloc(sizeof(*q), M_DEVBUF, M_NOWAIT);
	if (q == NULL) {
		krp->krp_status = ENOMEM;
		crypto_kdone(krp);
		return (0);
	}

	switch (krp->krp_op) {
	case CRK_MOD_EXP:
		q->q_start = lofn_modexp_start;
		q->q_finish = lofn_modexp_finish;
		q->q_krp = krp;
		s = splnet();
		SIMPLEQ_INSERT_TAIL(&sc->sc_queue, q, q_next);
		lofn_feed(sc);
		splx(s);
		return (0);
	default:
		printf("%s: kprocess: invalid op 0x%x\n",
		    sc->sc_dv.dv_xname, krp->krp_op);
		krp->krp_status = EOPNOTSUPP;
		crypto_kdone(krp);
		free(q, M_DEVBUF);
		return (0);
	}
}

int
lofn_modexp_start(sc, q)
	struct lofn_softc *sc;
	struct lofn_q *q;
d203 1
a203 116
	struct cryptkop *krp = q->q_krp;
	int ip = 0, err = 0;
	int mshift, eshift, nshift;
	int mbits, ebits, nbits;

	if (krp->krp_param[LOFN_MODEXP_PAR_M].crp_nbits > 1024) {
		err = ERANGE;
		goto errout;
	}

	/* Zero out registers. */
	lofn_zero_reg(sc, 0);
	lofn_zero_reg(sc, 1);
	lofn_zero_reg(sc, 2);
	lofn_zero_reg(sc, 3);

	/* Write out N... */
	nbits = lofn_norm_sigbits(krp->krp_param[LOFN_MODEXP_PAR_N].crp_p,
	    krp->krp_param[LOFN_MODEXP_PAR_N].crp_nbits);
	if (nbits > 1024) {
		err = E2BIG;
		goto errout;
	}
	if (nbits < 5) {
		err = ERANGE;
		goto errout;
	}
	bzero(&sc->sc_tmp, sizeof(sc->sc_tmp));
	bcopy(krp->krp_param[LOFN_MODEXP_PAR_N].crp_p, &sc->sc_tmp,
	    (nbits + 7) / 8);
	lofn_write_reg(sc, 2, &sc->sc_tmp);

	nshift = 1024 - nbits;
	WRITE_REG(sc, LOFN_LENADDR(LOFN_WIN_2, 2), 1024);
	if (nshift != 0) {
		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_SL, 2, 2, nshift));
		ip += 4;

		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_TAG, 2, 2, nbits));
		ip += 4;
	}

	/* Write out M... */
	mbits = lofn_norm_sigbits(krp->krp_param[LOFN_MODEXP_PAR_M].crp_p,
	    krp->krp_param[LOFN_MODEXP_PAR_M].crp_nbits);
	if (mbits > 1024 || mbits > nbits) {
		err = E2BIG;
		goto errout;
	}
	bzero(&sc->sc_tmp, sizeof(sc->sc_tmp));
	bcopy(krp->krp_param[LOFN_MODEXP_PAR_M].crp_p, &sc->sc_tmp,
	    (mbits + 7) / 8);
	lofn_write_reg(sc, 0, &sc->sc_tmp);

	mshift = 1024 - nbits;
	WRITE_REG(sc, LOFN_LENADDR(LOFN_WIN_2, 0), 1024);
	if (mshift != 0) {
		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_SL, 0, 0, mshift));
		ip += 4;

		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_TAG, 0, 0, nbits));
		ip += 4;
	}

	/* Write out E... */
	ebits = lofn_norm_sigbits(krp->krp_param[LOFN_MODEXP_PAR_E].crp_p,
	    krp->krp_param[LOFN_MODEXP_PAR_E].crp_nbits);
	if (ebits > 1024 || ebits > nbits) {
		err = E2BIG;
		goto errout;
	}
	if (ebits < 1) {
		err = ERANGE;
		goto errout;
	}
	bzero(&sc->sc_tmp, sizeof(sc->sc_tmp));
	bcopy(krp->krp_param[LOFN_MODEXP_PAR_E].crp_p, &sc->sc_tmp,
	    (ebits + 7) / 8);
	lofn_write_reg(sc, 1, &sc->sc_tmp);

	eshift = 1024 - nbits;
	WRITE_REG(sc, LOFN_LENADDR(LOFN_WIN_2, 1), 1024);
	if (eshift != 0) {
		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_SL, 1, 1, eshift));
		ip += 4;

		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_TAG, 1, 1, nbits));
		ip += 4;
	}

	if (nshift == 0) {
		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR(OP_DONE, OP_CODE_MODEXP, 3, 0, 1, 2));
		ip += 4;
	} else {
		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR(0, OP_CODE_MODEXP, 3, 0, 1, 2));
		ip += 4;

		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(0, OP_CODE_SR, 3, 3, nshift));
		ip += 4;

		WRITE_REG(sc, LOFN_REL_INSTR + ip,
		    LOFN_INSTR2(OP_DONE, OP_CODE_TAG, 3, 3, nbits));
		ip += 4;
	}

	/* Start microprogram */
	WRITE_REG(sc, LOFN_REL_CR, 0);
d205 7
a212 98

errout:
	bzero(&sc->sc_tmp, sizeof(sc->sc_tmp));
	lofn_zero_reg(sc, 0);
	lofn_zero_reg(sc, 1);
	lofn_zero_reg(sc, 2);
	lofn_zero_reg(sc, 3);
	krp->krp_status = err;
	crypto_kdone(krp);
	return (1);
}

void
lofn_modexp_finish(sc, q)
	struct lofn_softc *sc;
	struct lofn_q *q;
{
	struct cryptkop *krp = q->q_krp;
	int reglen, crplen;

	lofn_read_reg(sc, 3, &sc->sc_tmp);

	reglen = ((READ_REG(sc, LOFN_LENADDR(LOFN_WIN_2, 3)) & LOFN_LENMASK) +
	    7) / 8;
	crplen = (krp->krp_param[krp->krp_iparams].crp_nbits + 7) / 8;

	if (crplen <= reglen)
		bcopy(sc->sc_tmp.b, krp->krp_param[krp->krp_iparams].crp_p,
		    reglen);
	else {
		bcopy(sc->sc_tmp.b, krp->krp_param[krp->krp_iparams].crp_p,
		    reglen);
		bzero(krp->krp_param[krp->krp_iparams].crp_p + reglen,
		    crplen - reglen);
	}
	bzero(&sc->sc_tmp, sizeof(sc->sc_tmp));
	lofn_zero_reg(sc, 0);
	lofn_zero_reg(sc, 1);
	lofn_zero_reg(sc, 2);
	lofn_zero_reg(sc, 3);
	crypto_kdone(krp);
}

/*
 * Return the number of significant bits of a big number.
 */
int
lofn_norm_sigbits(const u_int8_t *p, u_int pbits)
{
	u_int plen = (pbits + 7) / 8;
	int i, sig = plen * 8;
	u_int8_t c;

	for (i = plen - 1; i >= 0; i--) {
		c = p[i];
		if (c != 0) {
			while ((c & 0x80) == 0) {
				sig--;
				c <<= 1;
			}
			break;
		}
		sig -= 8;
	}
	return (sig);
}

void
lofn_feed(sc)
	struct lofn_softc *sc;
{
	struct lofn_q *q;

	/* Queue is empty and nothing being processed, turn off interrupt */
	if (SIMPLEQ_EMPTY(&sc->sc_queue) &&
	    sc->sc_current == NULL) {
		sc->sc_ier &= ~LOFN_IER_DONE;
		WRITE_REG(sc, LOFN_REL_IER, sc->sc_ier);
		return;
	}

	/* Operation already pending, wait. */
	if (sc->sc_current != NULL)
		return;

	while (!SIMPLEQ_EMPTY(&sc->sc_queue)) {
		q = SIMPLEQ_FIRST(&sc->sc_queue);
		if (q->q_start(sc, q) == 0) {
			sc->sc_current = q;
			SIMPLEQ_REMOVE_HEAD(&sc->sc_queue, q, q_next);
			sc->sc_ier |= LOFN_IER_DONE;
			WRITE_REG(sc, LOFN_REL_IER, sc->sc_ier);
			break;
		} else {
			SIMPLEQ_REMOVE_HEAD(&sc->sc_queue, q, q_next);
			free(q, M_DEVBUF);
		}
	}
@


1.7.2.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.7.2.4 2003/03/28 00:38:23 niklas Exp $	*/
d15 5
@


1.7.2.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 2
@


1.7.2.7
log
@Merge with the trunk
@
text
@d170 1
a170 1
	printf(": PK, %s\n", intrstr);
d549 1
a549 1
			SIMPLEQ_REMOVE_HEAD(&sc->sc_queue, q_next);
d554 1
a554 1
			SIMPLEQ_REMOVE_HEAD(&sc->sc_queue, q_next);
@


1.6
log
@no need to print the BAR... test program uses dev/pci =)
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.5 2001/06/26 06:33:51 jason Exp $	*/
d77 5
d186 30
@


1.5
log
@jack up the rng clock prescalar a bit
define the rng address space
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.4 2001/06/26 05:52:53 jason Exp $	*/
d146 1
a146 1
	printf(": %s [XXX bar 0x%08x]\n", intrstr, sc->sc_sh);
@


1.4
log
@cleaning and adding a bit of debugging code... next step: bignums from userland =)
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.2 2001/06/26 03:54:31 jason Exp $	*/
d138 2
d174 1
a174 1
		bus_space_read_region_4(sc->sc_st, sc->sc_sh, 0x1080,
@


1.3
log
@add support for hardware rng using default scalar (can generate up to a
3Mbit/s stream, but we're not using that... yet).
@
text
@d116 1
a116 1
		printf(": can't map mem space %d\n", 0);
d125 1
a125 1
		goto fail_io;
d135 1
a135 1
		goto fail_io;
d144 1
a144 1
	printf(": %s\n", intrstr);
d148 1
a148 2
	pci_intr_disestablish(pc, sc->sc_ih);
fail_io:
@


1.2
log
@this is not a bus master
@
text
@d1 1
a1 1
/*	$OpenBSD: lofn.c,v 1.1 2001/06/25 23:04:45 jason Exp $	*/
d138 7
a144 1
	printf("\n");
d154 2
a155 2
lofn_intr(arg)
	void *arg;
d157 23
a179 1
	return (0);
@


1.1
log
@New dma engine skeleton
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d105 1
a105 1
	cmd |= PCI_COMMAND_MEM_ENABLE | PCI_COMMAND_MASTER_ENABLE;
a113 5
	if (!(cmd & PCI_COMMAND_MASTER_ENABLE)) {
		printf(": failed to enable bus mastering\n");
		return;
	}

d137 2
@

