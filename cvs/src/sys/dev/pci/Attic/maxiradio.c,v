head	1.5;
access;
symbols
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.5
	UBC:1.2.0.2
	UBC_BASE:1.2
	SMP:1.1.0.4
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2002.06.03.16.13.21;	author mickey;	state dead;
branches;
next	1.4;

1.4
date	2002.01.07.18.32.19;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.02.22.25.25;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2001.12.05.10.27.06;	author mickey;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2001.10.04.20.25.28;	author gluk;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2001.10.31.03.22.46;	author nate;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2002.03.06.02.11.46;	author niklas;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2003.03.28.00.38.23;	author niklas;	state dead;
branches;
next	;

1.2.2.1
date	2002.01.31.22.55.35;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2002.06.11.03.42.26;	author art;	state dead;
branches;
next	;


desc
@@


1.5
log
@Guillemot/maxiradio was a rebadged gemtek/pr103.
the mr(4) was not really tested and therefore is now replaced
w/ a tested gtp(4), renamed pci ids too.
from jumbo@@
@
text
@/* $OpenBSD: maxiradio.c,v 1.4 2002/01/07 18:32:19 mickey Exp $ */
/* $RuOBSD: maxiradio.c,v 1.5 2001/10/18 16:51:36 pva Exp $ */

/*
 * Copyright (c) 2001 Maxim Tsyplakov <tm@@oganer.net>
 *		      Vladimir Popov <jumbo@@narod.ru>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* Guillemot Maxi Radio FM2000 PCI Radio Card Device Driver */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/errno.h>
#include <sys/ioctl.h>
#include <sys/proc.h>
#include <sys/radioio.h>

#include <machine/bus.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#include <dev/ic/tea5757.h>
#include <dev/radio_if.h>

int	mr_match(struct device *, void *, void *);
void	mr_attach(struct device *, struct device *, void *);

int     mr_get_info(void *, struct radio_info *);
int     mr_set_info(void *, struct radio_info *);
int     mr_search(void *, int);

/* config base I/O address ? */
#define PCI_CBIO 0x6400

#define MAXIRADIO_CAPS	RADIO_CAPS_DETECT_SIGNAL |			\
			RADIO_CAPS_SET_MONO |				\
			RADIO_CAPS_HW_SEARCH |				\
			RADIO_CAPS_HW_AFC |				\
			RADIO_CAPS_LOCK_SENSITIVITY
#if 0
			RADIO_CAPS_DETECT_STEREO |
#endif /* 0 */

#define MAXIRADIO_MUTE		0x00
#define MAXIRADIO_UNMUTE	0x10

#define MAXIRADIO_SIGNAL	0x08

#define MR_WREN_ON		(1 << 2)
#define MR_WREN_OFF		(0 << 2)

#define MR_DATA_ON		(1 << 1)
#define MR_DATA_OFF		(0 << 1)

#define MR_CLCK_ON		(1 << 0)
#define MR_CLCK_OFF		(0 << 0)

#define MR_READ_CLOCK_LOW	(MR_WREN_OFF | MR_DATA_ON | MR_CLCK_OFF)
#define MR_READ_CLOCK_HIGH	(MR_WREN_OFF | MR_DATA_ON | MR_CLCK_ON)

/* define our interface to the high-level radio driver */

struct radio_hw_if mr_hw_if = {
	NULL, /* open */
	NULL, /* close */
	mr_get_info,
	mr_set_info,
	mr_search
};

struct mr_softc {
	struct device	sc_dev;

	int	mute;
	u_int8_t	vol;
	u_int32_t	freq;
	u_int32_t	stereo;
	u_int32_t	lock;

	struct tea5757_t	tea;
};

struct cfattach mr_ca = {
	sizeof(struct mr_softc), mr_match, mr_attach
};

struct cfdriver mr_cd = {
	NULL, "mr", DV_DULL
};

void	mr_set_mute(struct mr_softc *);
void	mr_write_bit(bus_space_tag_t, bus_space_handle_t, bus_size_t, int);
void	mr_init(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
void	mr_rset(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
int	mr_state(bus_space_tag_t, bus_space_handle_t);
u_int32_t	mr_hardware_read(bus_space_tag_t, bus_space_handle_t,
		bus_size_t);

int
mr_match(struct device *parent, void *match, void *aux)
{
	struct pci_attach_args *pa = aux;
	if (PCI_VENDOR(pa->pa_id) == PCI_VENDOR_GUILLEMOT &&
	    PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_GUILLEMOT_MAXIRADIO)
		return (1);
	return (0);
}

void
mr_attach(struct device *parent, struct device *self, void *aux)
{
	struct mr_softc *sc = (struct mr_softc *) self;
	struct pci_attach_args *pa = aux;
	struct cfdata *cf = sc->sc_dev.dv_cfdata;
	pci_chipset_tag_t pc = pa->pa_pc;
	pcireg_t csr;

	if (pci_mapreg_map(pa, PCI_CBIO, PCI_MAPREG_TYPE_IO, 0,
	    &sc->tea.iot, &sc->tea.ioh, NULL, NULL, 0)) {
		printf(": can't map i/o space\n");
		return;
	}

	/* Enable the card */
	csr = pci_conf_read(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);
	pci_conf_write(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG,
	    csr | PCI_COMMAND_MASTER_ENABLE);

	sc->freq = MIN_FM_FREQ;
	sc->vol = 0;
	sc->mute = 0;
	sc->stereo = TEA5757_STEREO;
	sc->lock = TEA5757_S030;
	sc->tea.offset = 0;
	sc->tea.flags = cf->cf_flags;
	sc->tea.init = mr_init;
	sc->tea.rset = mr_rset;
	sc->tea.write_bit = mr_write_bit;
	sc->tea.read = mr_hardware_read;

	printf(": Guillemot MaxiRadio FM2000 PCI\n");

	radio_attach_mi(&mr_hw_if, sc, &sc->sc_dev);
}

int
mr_get_info(void *v, struct radio_info *ri)
{
	struct mr_softc *sc = v;

	ri->mute = sc->mute;
	ri->volume = sc->vol ? 255 : 0;
	ri->stereo = sc->stereo == TEA5757_STEREO ? 1 : 0;
	ri->caps = MAXIRADIO_CAPS;
	ri->rfreq = 0;
	ri->lock = tea5757_decode_lock(sc->lock);

	ri->freq = sc->freq = tea5757_decode_freq(mr_hardware_read(sc->tea.iot,
	    sc->tea.ioh, sc->tea.offset), sc->tea.flags & TEA5757_TEA5759);

	ri->info = mr_state(sc->tea.iot, sc->tea.ioh);

	return (0);
}

int
mr_set_info(void *v, struct radio_info *ri)
{
	struct mr_softc *sc = v;

	sc->mute = ri->mute ? 1 : 0;
	sc->vol = ri->volume ? 255 : 0;
	sc->stereo = ri->stereo ? TEA5757_STEREO: TEA5757_MONO;
	sc->lock = tea5757_encode_lock(ri->lock);
	ri->freq = sc->freq = tea5757_set_freq(&sc->tea,
	    sc->lock, sc->stereo, ri->freq);
	mr_set_mute(sc);

	return (0);
}

int
mr_search(void *v, int f)
{
	struct mr_softc *sc = v;

	tea5757_search(&sc->tea, sc->lock, sc->stereo, f);
	mr_set_mute(sc);

	return (0);
}

void
mr_set_mute(struct mr_softc *sc)
{
	int mute;

	mute = (sc->mute || !sc->vol) ? MAXIRADIO_MUTE : MAXIRADIO_UNMUTE;
	bus_space_write_1(sc->tea.iot, sc->tea.ioh, 0, mute);
}

void
mr_write_bit(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off,
		int bit)
{
	u_int8_t data;

	data = bit ? MR_DATA_ON : MR_DATA_OFF;
	bus_space_write_1(iot, ioh, off, MR_WREN_ON | MR_CLCK_OFF | data);
	DELAY(5);
	bus_space_write_1(iot, ioh, off, MR_WREN_ON | MR_CLCK_ON  | data);
	DELAY(5);
	bus_space_write_1(iot, ioh, off, MR_WREN_ON | MR_CLCK_OFF | data);
	DELAY(5);
}

void
mr_init(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off, u_int32_t d)
{
	bus_space_write_1(iot, ioh, off, MR_WREN_ON | MR_DATA_ON | MR_CLCK_OFF);
}

void
mr_rset(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off, u_int32_t d)
{
	bus_space_write_1(iot, ioh, off, MAXIRADIO_UNMUTE);
}

/* COMPLETELY UNTESTED */
u_int32_t
mr_hardware_read(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off)
{
	u_int32_t reg = 0ul;
	int i;

	bus_space_write_1(iot, ioh, off, MR_READ_CLOCK_LOW);
	DELAY(5);

	i = 24;
	while (i--) {
		bus_space_write_1(iot, ioh, off, MR_READ_CLOCK_HIGH);
		DELAY(5);
		bus_space_write_1(iot, ioh, off, MR_READ_CLOCK_LOW);
		DELAY(5);
		reg |= bus_space_read_1(iot, ioh, off) & MR_DATA_ON ? 1 : 0;
		reg <<= 1;
	}

	reg >>= 1;

	return (reg & (TEA5757_DATA | TEA5757_FREQ));
}

int
mr_state(bus_space_tag_t iot, bus_space_handle_t ioh)
{
	/* XXX: where is a stereo bit ? */
	return bus_space_read_1(iot, ioh, 0) & MAXIRADIO_SIGNAL ?
		(0 << 1) : (1 << 1);
}
@


1.4
log
@use flags instead of options to choose the tea5757 vs tea5759.
from Vladimir Popov <jumbo@@narod.ru>
@
text
@d1 1
a1 1
/* $OpenBSD: maxiradio.c,v 1.2 2001/12/05 10:27:06 mickey Exp $ */
@


1.3
log
@use pci_mapreg_map() instead of pci_io_find+bus_space_map
@
text
@d138 1
d159 1
d165 2
d183 1
a183 1
				sc->tea.ioh, sc->tea.offset));
d200 1
a200 1
			sc->lock, sc->stereo, ri->freq);
@


1.2
log
@update for radio drivers from tm@@oganer.net und jumbo@@narod.ru
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d6 1
a6 1
 * 		      Vladimir Popov <jumbo@@narod.ru>
d57 1
a57 1
#define PCI_CBIO 0x6400	
a138 2
	bus_addr_t iobase;
	bus_size_t iosize;
a139 5
	
	if (pci_io_find(pc, pa->pa_tag, PCI_CBIO, &iobase, &iosize)) {
		printf (": can't find i/o base\n");
		return;
	}
d141 2
a142 2
	if (bus_space_map(sc->tea.iot = pa->pa_iot, iobase, iosize,
			  0, &sc->tea.ioh)) {
d151 1
a151 1
	
d162 1
a162 1
	
@


1.2.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/* $OpenBSD: maxiradio.c,v 1.4 2002/01/07 18:32:19 mickey Exp $ */
d6 1
a6 1
 *		      Vladimir Popov <jumbo@@narod.ru>
d57 1
a57 1
#define PCI_CBIO 0x6400
a137 1
	struct cfdata *cf = sc->sc_dev.dv_cfdata;
d139 2
d142 5
d148 2
a149 2
	if (pci_mapreg_map(pa, PCI_CBIO, PCI_MAPREG_TYPE_IO, 0,
	    &sc->tea.iot, &sc->tea.ioh, NULL, NULL, 0)) {
d158 1
a158 1

a164 1
	sc->tea.flags = cf->cf_flags;
d169 1
a169 3

	printf(": Guillemot MaxiRadio FM2000 PCI\n");

d186 1
a186 1
	    sc->tea.ioh, sc->tea.offset), sc->tea.flags & TEA5757_TEA5759);
d203 1
a203 1
	    sc->lock, sc->stereo, ri->freq);
@


1.2.2.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: maxiradio.c,v 1.2.2.1 2002/01/31 22:55:35 niklas Exp $ */
@


1.1
log
@Driver skeleton for Guillemot Maxi Radio FM2000 PCI Radio Card.
If I understand right developers have no such card.

Work by Maxim Tsyplakov <tm@@oganer.net>, Vladimir Popov <jumbo@@narod.ru>
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/* $RuOBSD: maxiradio.c,v 1.3 2001/10/02 10:45:53 pva Exp $ */
d6 1
d38 1
d46 1
d51 4
a54 3
int	mr_open(dev_t, int, int, struct proc *);
int	mr_close(dev_t, int, int, struct proc *);
int	mr_ioctl(dev_t, u_long, caddr_t, int, struct proc *);
d59 26
d88 5
a92 3
	mr_open,
	mr_close,
	mr_ioctl
d97 8
a104 2
	bus_space_tag_t sc_iot;
	bus_space_handle_t sc_ioh;
d115 8
d148 2
a149 2
	if (bus_space_map(sc->sc_iot = pa->pa_iot, iobase, iosize,
			  0, &sc->sc_ioh)) {
d152 2
a153 2
	}	
	
d159 11
d174 1
a174 1
mr_open(dev_t dev, int flags, int fmt, struct proc *p)
d176 15
a190 2
	struct mr_softc *sc;
	return !(sc = mr_cd.cd_devs[0]) ? ENXIO : 0;
d194 52
a245 1
mr_close(dev_t dev, int flags, int fmt, struct proc *p)
d247 1
a247 1
	return 0;
d250 5
a254 3
/*
 * Handle the ioctl for the device
 */
d256 3
a258 2
int
mr_ioctl(dev_t dev, u_long cmd, caddr_t data, int flags, struct proc *p)
d260 5
a264 1
	int	error;
d266 8
a273 4
	error = 0;
	switch (cmd) {
	default:
		error = EINVAL;	/* invalid agument */
d275 12
a286 1
	return error;
@


1.1.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.1.4.2
log
@Merge in trunk
@
text
@d1 2
a2 2
/* $OpenBSD$ */
/* $RuOBSD: maxiradio.c,v 1.5 2001/10/18 16:51:36 pva Exp $ */
a5 1
 *		      Vladimir Popov <jumbo@@narod.ru>
a36 1
#include <sys/radioio.h>
a43 1
#include <dev/ic/tea5757.h>
d48 3
a50 4

int     mr_get_info(void *, struct radio_info *);
int     mr_set_info(void *, struct radio_info *);
int     mr_search(void *, int);
d53 1
a53 27
#define PCI_CBIO 0x6400

#define MAXIRADIO_CAPS	RADIO_CAPS_DETECT_SIGNAL |			\
			RADIO_CAPS_SET_MONO |				\
			RADIO_CAPS_HW_SEARCH |				\
			RADIO_CAPS_HW_AFC |				\
			RADIO_CAPS_LOCK_SENSITIVITY
#if 0
			RADIO_CAPS_DETECT_STEREO |
#endif /* 0 */

#define MAXIRADIO_MUTE		0x00
#define MAXIRADIO_UNMUTE	0x10

#define MAXIRADIO_SIGNAL	0x08

#define MR_WREN_ON		(1 << 2)
#define MR_WREN_OFF		(0 << 2)

#define MR_DATA_ON		(1 << 1)
#define MR_DATA_OFF		(0 << 1)

#define MR_CLCK_ON		(1 << 0)
#define MR_CLCK_OFF		(0 << 0)

#define MR_READ_CLOCK_LOW	(MR_WREN_OFF | MR_DATA_ON | MR_CLCK_OFF)
#define MR_READ_CLOCK_HIGH	(MR_WREN_OFF | MR_DATA_ON | MR_CLCK_ON)
d58 3
a60 5
	NULL, /* open */
	NULL, /* close */
	mr_get_info,
	mr_set_info,
	mr_search
d65 2
a66 8

	int	mute;
	u_int8_t	vol;
	u_int32_t	freq;
	u_int32_t	stereo;
	u_int32_t	lock;

	struct tea5757_t	tea;
a76 8
void	mr_set_mute(struct mr_softc *);
void	mr_write_bit(bus_space_tag_t, bus_space_handle_t, bus_size_t, int);
void	mr_init(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
void	mr_rset(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
int	mr_state(bus_space_tag_t, bus_space_handle_t);
u_int32_t	mr_hardware_read(bus_space_tag_t, bus_space_handle_t,
		bus_size_t);

a91 1
	struct cfdata *cf = sc->sc_dev.dv_cfdata;
d93 2
d96 5
d102 2
a103 2
	if (pci_mapreg_map(pa, PCI_CBIO, PCI_MAPREG_TYPE_IO, 0,
	    &sc->tea.iot, &sc->tea.ioh, NULL, NULL, 0)) {
d106 2
a107 2
	}

d112 1
a112 15

	sc->freq = MIN_FM_FREQ;
	sc->vol = 0;
	sc->mute = 0;
	sc->stereo = TEA5757_STEREO;
	sc->lock = TEA5757_S030;
	sc->tea.offset = 0;
	sc->tea.flags = cf->cf_flags;
	sc->tea.init = mr_init;
	sc->tea.rset = mr_rset;
	sc->tea.write_bit = mr_write_bit;
	sc->tea.read = mr_hardware_read;

	printf(": Guillemot MaxiRadio FM2000 PCI\n");

d117 1
a117 1
mr_get_info(void *v, struct radio_info *ri)
d119 2
a120 15
	struct mr_softc *sc = v;

	ri->mute = sc->mute;
	ri->volume = sc->vol ? 255 : 0;
	ri->stereo = sc->stereo == TEA5757_STEREO ? 1 : 0;
	ri->caps = MAXIRADIO_CAPS;
	ri->rfreq = 0;
	ri->lock = tea5757_decode_lock(sc->lock);

	ri->freq = sc->freq = tea5757_decode_freq(mr_hardware_read(sc->tea.iot,
	    sc->tea.ioh, sc->tea.offset), sc->tea.flags & TEA5757_TEA5759);

	ri->info = mr_state(sc->tea.iot, sc->tea.ioh);

	return (0);
d124 1
a124 1
mr_set_info(void *v, struct radio_info *ri)
d126 2
a127 1
	struct mr_softc *sc = v;
d129 3
a131 10
	sc->mute = ri->mute ? 1 : 0;
	sc->vol = ri->volume ? 255 : 0;
	sc->stereo = ri->stereo ? TEA5757_STEREO: TEA5757_MONO;
	sc->lock = tea5757_encode_lock(ri->lock);
	ri->freq = sc->freq = tea5757_set_freq(&sc->tea,
	    sc->lock, sc->stereo, ri->freq);
	mr_set_mute(sc);

	return (0);
}
d134 1
a134 49
mr_search(void *v, int f)
{
	struct mr_softc *sc = v;

	tea5757_search(&sc->tea, sc->lock, sc->stereo, f);
	mr_set_mute(sc);

	return (0);
}

void
mr_set_mute(struct mr_softc *sc)
{
	int mute;

	mute = (sc->mute || !sc->vol) ? MAXIRADIO_MUTE : MAXIRADIO_UNMUTE;
	bus_space_write_1(sc->tea.iot, sc->tea.ioh, 0, mute);
}

void
mr_write_bit(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off,
		int bit)
{
	u_int8_t data;

	data = bit ? MR_DATA_ON : MR_DATA_OFF;
	bus_space_write_1(iot, ioh, off, MR_WREN_ON | MR_CLCK_OFF | data);
	DELAY(5);
	bus_space_write_1(iot, ioh, off, MR_WREN_ON | MR_CLCK_ON  | data);
	DELAY(5);
	bus_space_write_1(iot, ioh, off, MR_WREN_ON | MR_CLCK_OFF | data);
	DELAY(5);
}

void
mr_init(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off, u_int32_t d)
{
	bus_space_write_1(iot, ioh, off, MR_WREN_ON | MR_DATA_ON | MR_CLCK_OFF);
}

void
mr_rset(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off, u_int32_t d)
{
	bus_space_write_1(iot, ioh, off, MAXIRADIO_UNMUTE);
}

/* COMPLETELY UNTESTED */
u_int32_t
mr_hardware_read(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off)
d136 1
a136 2
	u_int32_t reg = 0ul;
	int i;
d138 4
a141 11
	bus_space_write_1(iot, ioh, off, MR_READ_CLOCK_LOW);
	DELAY(5);

	i = 24;
	while (i--) {
		bus_space_write_1(iot, ioh, off, MR_READ_CLOCK_HIGH);
		DELAY(5);
		bus_space_write_1(iot, ioh, off, MR_READ_CLOCK_LOW);
		DELAY(5);
		reg |= bus_space_read_1(iot, ioh, off) & MR_DATA_ON ? 1 : 0;
		reg <<= 1;
d143 1
a143 12

	reg >>= 1;

	return (reg & (TEA5757_DATA | TEA5757_FREQ));
}

int
mr_state(bus_space_tag_t iot, bus_space_handle_t ioh)
{
	/* XXX: where is a stereo bit ? */
	return bus_space_read_1(iot, ioh, 0) & MAXIRADIO_SIGNAL ?
		(0 << 1) : (1 << 1);
@


1.1.4.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/* $OpenBSD: maxiradio.c,v 1.1.4.2 2002/03/06 02:11:46 niklas Exp $ */
@


