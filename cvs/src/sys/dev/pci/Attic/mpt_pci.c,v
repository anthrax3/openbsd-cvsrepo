head	1.14;
access;
symbols
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	SMP:1.3.0.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.14
date	2006.06.29.22.14.41;	author dlg;	state dead;
branches;
next	1.13;

1.13
date	2006.05.31.03.38.32;	author dlg;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.04.19.05.00;	author marco;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.01.22.10.06;	author dlg;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.01.05.47.14;	author dlg;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.05.08.17.08;	author dlg;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.09.04.10.13;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.29.06.57.12;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2004.08.23.21.00.42;	author marco;	state Exp;
branches;
next	1.5;

1.5
date	2004.06.22.19.00.53;	author marco;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.18.57.18;	author marco;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.07.00.40.04;	author marco;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2004.03.06.03.59.29;	author krw;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.06.03.03.07;	author krw;	state Exp;
branches;
next	;

1.3.2.1
date	2004.06.05.23.12.52;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.14
log
@remove mpt. it has since been replaced with mpi, which is a smaller and
cleaner driver that supports more hardware.
@
text
@/*	$OpenBSD: mpt_pci.c,v 1.13 2006/05/31 03:38:32 dlg Exp $	*/
/*	$NetBSD: mpt_pci.c,v 1.2 2003/07/14 15:47:26 lukem Exp $	*/

/*
 * Copyright (c) 2004 Milos Urbanek
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Copyright (c) 2003 Wasabi Systems, Inc.
 * All rights reserved.
 *
 * Written by Jason R. Thorpe for Wasabi Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed for the NetBSD Project by
 *	Wasabi Systems, Inc.
 * 4. The name of Wasabi Systems, Inc. may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY WASABI SYSTEMS, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL WASABI SYSTEMS, INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <dev/ic/mpt.h>			/* pulls in all headers */

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#define MPT_PCI_MMBA	(PCI_MAPREG_START+0x04)
#define PCI_MAPREG_ROM	0x30

void	mpt_pci_attach(struct device *, struct device *, void *);
int	mpt_pci_match(struct device *, void *, void *);
const struct mpt_pci_product *mpt_pci_lookup(const struct pci_attach_args *);

struct mpt_pci_softc {
	struct mpt_softc	sc_mpt;

	pci_chipset_tag_t	sc_pc;
	pcitag_t		sc_tag;

	void			*sc_ih;

	/* Saved volatile PCI configuration registers. */
	pcireg_t		sc_pci_csr;
	pcireg_t		sc_pci_bhlc;
	pcireg_t		sc_pci_io_bar;
	pcireg_t		sc_pci_mem0_bar[2];
	pcireg_t		sc_pci_mem1_bar[2];
	pcireg_t		sc_pci_rom_bar;
	pcireg_t		sc_pci_int;
	pcireg_t		sc_pci_pmcsr;
};

void	mpt_pci_link_peer(struct mpt_softc *);
void	mpt_pci_read_config_regs(struct mpt_softc *);
void	mpt_pci_set_config_regs(struct mpt_softc *);

struct cfattach mpt_pci_ca = {
	sizeof (struct mpt_pci_softc), mpt_pci_match, mpt_pci_attach,
};

#define PREAD(s, r)	pci_conf_read((s)->sc_pc, (s)->sc_tag, (r))
#define PWRITE(s, r, v)	pci_conf_write((s)->sc_pc, (s)->sc_tag, (r), (v))

#define MPP_F_FC	0x01	/* Fibre Channel adapter */
#define MPP_F_DUAL	0x02	/* Dual port adapter */

static const struct mpt_pci_product {
	pci_vendor_id_t		mpp_vendor;
	pci_product_id_t	mpp_product;
	int			mpp_flags;
} mpt_pci_products[] = {
	{ PCI_VENDOR_SYMBIOS,	PCI_PRODUCT_SYMBIOS_1030,
	  MPP_F_DUAL },
	{ PCI_VENDOR_SYMBIOS,	PCI_PRODUCT_SYMBIOS_FC909,
	  MPP_F_FC },
	{ PCI_VENDOR_SYMBIOS,	PCI_PRODUCT_SYMBIOS_FC909A,
	  MPP_F_FC },
	{ PCI_VENDOR_SYMBIOS,	PCI_PRODUCT_SYMBIOS_FC929,
	  MPP_F_FC | MPP_F_DUAL },
	{ PCI_VENDOR_SYMBIOS,	PCI_PRODUCT_SYMBIOS_FC929_1,
	  MPP_F_FC | MPP_F_DUAL },
	{ PCI_VENDOR_SYMBIOS,	PCI_PRODUCT_SYMBIOS_FC919,
	  MPP_F_FC },
	{ PCI_VENDOR_SYMBIOS,	PCI_PRODUCT_SYMBIOS_FC919_1,
	  MPP_F_FC },
	{ 0,			0,
	  0 }
};

const struct mpt_pci_product *
mpt_pci_lookup(const struct pci_attach_args *pa)
{
	const struct mpt_pci_product	*mpp;

	for (mpp = mpt_pci_products; mpp->mpp_vendor != 0; mpp++) {
		if (PCI_VENDOR(pa->pa_id) == mpp->mpp_vendor &&
		    PCI_PRODUCT(pa->pa_id) == mpp->mpp_product)
			return (mpp);
	}
	return (NULL);
}

/* probe for mpt controller */
int
mpt_pci_match(struct device *parent, void *match, void *aux)
{
	struct pci_attach_args		*pa = aux;

	if (mpt_pci_lookup(pa) != NULL)
		return (2);

	return (0);
}

void
mpt_pci_attach(struct device *parent, struct device *self, void *aux)
{
	struct mpt_pci_softc		*psc = (void *)self;
	struct mpt_softc		*mpt = &psc->sc_mpt;
	struct pci_attach_args		*pa = aux;
	const struct mpt_pci_product	*mpp;
	pci_intr_handle_t		ih;
	const char			*intrstr;
	pcireg_t			memtype;

	mpp = mpt_pci_lookup(pa);
	if (mpp == NULL) {
		printf(": mpt_pci_lookup failed\n");
		return;
	}

	psc->sc_pc = pa->pa_pc;
	psc->sc_tag = pa->pa_tag;

	mpt->sc_dmat = pa->pa_dmat;
	mpt->sc_set_config_regs = mpt_pci_set_config_regs;

	/* Map the device. */
	memtype = pci_mapreg_type(pa->pa_pc, pa->pa_tag, MPT_PCI_MMBA);
	if (memtype != (PCI_MAPREG_TYPE_MEM | PCI_MAPREG_MEM_TYPE_32BIT) &&
	    memtype != (PCI_MAPREG_TYPE_MEM | PCI_MAPREG_MEM_TYPE_64BIT)) {
		printf(": incorrect memory map type\n");
		return;
	}

	if (pci_mapreg_map(pa, MPT_PCI_MMBA, memtype, 0, &mpt->sc_st,
	    &mpt->sc_sh, NULL, NULL, 0) != 0) {
		printf(": unable to map device registers\n");
		return;
	}

	/* Ensure that the ROM is disabled.  */
	PWRITE(psc, PCI_MAPREG_ROM, PREAD(psc, PCI_MAPREG_ROM & ~1));

	/* Map and establish our interrupt. */
	if (pci_intr_map(pa, &ih) != 0) {
		printf(": unable to map interrupt\n");
		return;
	}
	intrstr = pci_intr_string(pa->pa_pc, ih);
	psc->sc_ih = pci_intr_establish(pa->pa_pc, ih, IPL_BIO, mpt_intr, mpt,
	    mpt->mpt_dev.dv_xname);
	if (psc->sc_ih == NULL) {
		printf(": unable to establish interrupt%s%s\n",
		    intrstr != NULL ? " at " : "",
		    intrstr != NULL ? intrstr : "");
		return;
	}

	/* Disable interrupts on the part. */
	mpt_disable_ints(mpt);

	/* Allocate DMA memory. */
	if (mpt_dma_mem_alloc(mpt) != 0) {
		printf(": unable to allocate DMA memory\n");
		return;
	}

	printf(": %s\n", intrstr ? intrstr : "?");

	/*
	 * Save the PCI config register values.
	 *
	 * Hard resets are known to screw up the BAR for diagnostic
	 * memory accesses (Mem1).
	 *
	 * Using Mem1 is known to make the chip stop responding to
	 * configuration cycles, so we need to save it now.
	 */
	mpt_pci_read_config_regs(mpt);

	/*
	 * If we're a dual-port adapter, try to find our peer.  We
	 * need to fix its PCI config registers too.
	 */
	if (mpp->mpp_flags & MPP_F_DUAL)
		mpt_pci_link_peer(mpt);

	/* Initialize the hardware. */
	if (mpt_init(mpt, MPT_DB_INIT_HOST) != 0) {
		/* Error message already printed. */
		return;
	}

	/* Complete attachment of hardware, include subdevices. */
	mpt_attach(mpt);
}

/*
 * Find and remember our peer PCI function on a dual-port device.
 */
void
mpt_pci_link_peer(struct mpt_softc *mpt)
{
	extern struct cfdriver		mpt_cd;

	struct mpt_pci_softc		*peer_psc, *psc = (void *)mpt;
	struct device			*dev;
	int				unit, b, d, f, peer_b, peer_d, peer_f;

	pci_decompose_tag(psc->sc_pc, psc->sc_tag, &b, &d, &f);

	for (unit = 0; unit < mpt_cd.cd_ndevs; unit++) {
		if (unit == mpt->mpt_dev.dv_unit)
			continue;
		dev = device_lookup(&mpt_cd, unit);
		if (dev == NULL)
			continue;
		if (dev->dv_cfdata == NULL)
			continue;
		if (dev->dv_cfdata->cf_attach != &mpt_pci_ca)
			continue;
		peer_psc = (void *)dev;
		if (peer_psc->sc_pc != psc->sc_pc)
			continue;
		pci_decompose_tag(peer_psc->sc_pc, peer_psc->sc_tag,
		    &peer_b, &peer_d, &peer_f);
		if (peer_b == b && peer_d == d) {
			DNPRINTF(10, "%s: linking with peer: %s",
			    DEVNAME(mpt),
			    peer_psc->sc_mpt.mpt_dev.dv_xname);
			mpt->mpt2 = (struct mpt_softc *)peer_psc;
			peer_psc->sc_mpt.mpt2 = mpt;
			return;
		}
	}
}

/*
 * Save the volatile PCI configuration registers.
 */
void
mpt_pci_read_config_regs(struct mpt_softc *mpt)
{
	struct mpt_pci_softc		*psc = (void *)mpt;

	psc->sc_pci_csr = PREAD(psc, PCI_COMMAND_STATUS_REG);
	psc->sc_pci_bhlc = PREAD(psc, PCI_BHLC_REG);
	psc->sc_pci_io_bar = PREAD(psc, PCI_MAPREG_START);
	psc->sc_pci_mem0_bar[0] = PREAD(psc, PCI_MAPREG_START+0x04);
	psc->sc_pci_mem0_bar[1] = PREAD(psc, PCI_MAPREG_START+0x08);
	psc->sc_pci_mem1_bar[0] = PREAD(psc, PCI_MAPREG_START+0x0c);
	psc->sc_pci_mem1_bar[1] = PREAD(psc, PCI_MAPREG_START+0x10);
	psc->sc_pci_rom_bar = PREAD(psc, PCI_MAPREG_ROM);
	psc->sc_pci_int = PREAD(psc, PCI_INTERRUPT_REG);
	psc->sc_pci_pmcsr = PREAD(psc, 0x44);
}

/*
 * Restore the volatile PCI configuration registers.
 */
void
mpt_pci_set_config_regs(struct mpt_softc *mpt)
{
	struct mpt_pci_softc		*psc = (void *)mpt;

	PWRITE(psc, PCI_COMMAND_STATUS_REG, psc->sc_pci_csr);
	PWRITE(psc, PCI_BHLC_REG, psc->sc_pci_bhlc);
	PWRITE(psc, PCI_MAPREG_START, psc->sc_pci_io_bar);
	PWRITE(psc, PCI_MAPREG_START+0x04, psc->sc_pci_mem0_bar[0]);
	PWRITE(psc, PCI_MAPREG_START+0x08, psc->sc_pci_mem0_bar[1]);
	PWRITE(psc, PCI_MAPREG_START+0x0c, psc->sc_pci_mem1_bar[0]);
	PWRITE(psc, PCI_MAPREG_START+0x10, psc->sc_pci_mem1_bar[1]);
	PWRITE(psc, PCI_MAPREG_ROM, psc->sc_pci_rom_bar);
	PWRITE(psc, PCI_INTERRUPT_REG, psc->sc_pci_int);
	PWRITE(psc, 0x44, psc->sc_pci_pmcsr);
}
@


1.13
log
@allow mpi to attach to the scsi controllers again. however, mpt will attach
to them by default, so disable mpt to get mpi to attach.

requested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_pci.c,v 1.12 2006/02/04 19:05:00 marco Exp $	*/
@


1.12
log
@Redo debugging mechanism to something less loud and more useful.

Shaves 22k of the kernel.

ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_pci.c,v 1.11 2005/12/01 22:10:06 dlg Exp $	*/
d154 1
a154 1
		return (1);
@


1.11
log
@i hate mpt_softc_t, so replace use of it with struct mpt_softc. add some
macros to deal with pci_conf reads and writes, which makes the code smaller
and easier (for me) to read. make attach a bit less convoluted.

ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_pci.c,v 1.10 2005/12/01 05:47:14 dlg Exp $	*/
d283 3
a285 3
			if (mpt->verbose)
				mpt_prt(mpt, "linking with peer: %s",
				    peer_psc->sc_mpt.mpt_dev.dv_xname);
@


1.10
log
@move some things around so i have less trouble reading this, fix a spelling
mistake and add some knf.

ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_pci.c,v 1.9 2005/11/05 08:17:08 dlg Exp $	*/
d71 2
a72 2
#define	MPT_PCI_MMBA		(PCI_MAPREG_START+0x04)
#define PCI_MAPREG_ROM		0x30
d79 1
a79 1
	mpt_softc_t		sc_mpt;
d97 3
a99 3
void	mpt_pci_link_peer(mpt_softc_t *);
void	mpt_pci_read_config_regs(mpt_softc_t *);
void	mpt_pci_set_config_regs(mpt_softc_t *);
d105 5
a109 2
#define	MPP_F_FC		0x01	/* Fibre Channel adapter */
#define	MPP_F_DUAL		0x02	/* Dual port adapter */
d131 1
a131 1
	  0 },
d137 1
a137 1
	const struct mpt_pci_product *mpp;
d151 1
a151 1
	struct pci_attach_args *pa = aux;
d162 7
a168 10
	struct mpt_pci_softc *psc = (void *) self;
	mpt_softc_t *mpt = &psc->sc_mpt;
	struct pci_attach_args *pa = aux;
	const struct mpt_pci_product *mpp;
	pci_intr_handle_t ih;
	const char *intrstr;
	pcireg_t reg, memtype;
	bus_space_tag_t memt;
	bus_space_handle_t memh;
	int memh_valid;
d182 1
a182 3
	/*
	 * Map the device.
	 */
d184 4
a187 9
	switch (memtype) {
	case PCI_MAPREG_TYPE_MEM | PCI_MAPREG_MEM_TYPE_32BIT:
	case PCI_MAPREG_TYPE_MEM | PCI_MAPREG_MEM_TYPE_64BIT:
		memh_valid = (pci_mapreg_map(pa, MPT_PCI_MMBA,
		    memtype, 0, &memt, &memh, NULL, NULL, 0) == 0);
		break;

	default:
		memh_valid = 0;
d190 2
a191 4
	if (memh_valid) {
		mpt->sc_st = memt;
		mpt->sc_sh = memh;
	} else {
d196 2
a197 6
	/*
	 * Ensure that the ROM is disabled.
	 */
	reg = pci_conf_read(pa->pa_pc, pa->pa_tag, PCI_MAPREG_ROM);
	reg &= ~1;
	pci_conf_write(pa->pa_pc, pa->pa_tag, PCI_MAPREG_ROM, reg);
d199 1
a199 3
	/*
	 * Map and establish our interrupt.
	 */
d208 3
a210 4
		printf(": unable to establish interrupt");
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
a212 1
	printf(": %s\n", intrstr ? intrstr : "?");
d223 2
d238 1
a238 1
	 * need to fix his PCI config registers, too.
d257 1
a257 1
mpt_pci_link_peer(mpt_softc_t *mpt)
d259 1
a259 1
	extern struct cfdriver mpt_cd;
d261 3
a263 3
	struct mpt_pci_softc *peer_psc, *psc = (void *) mpt;
	struct device *dev;
	int unit, b, d, f, peer_b, peer_d, peer_f;
d277 1
a277 1
		peer_psc = (void *) dev;
d286 1
a286 1
			mpt->mpt2 = (mpt_softc_t *) peer_psc;
d297 1
a297 1
mpt_pci_read_config_regs(mpt_softc_t *mpt)
d299 1
a299 1
	struct mpt_pci_softc *psc = (void *) mpt;
d301 10
a310 19
	psc->sc_pci_csr = pci_conf_read(psc->sc_pc, psc->sc_tag,
	    PCI_COMMAND_STATUS_REG);
	psc->sc_pci_bhlc = pci_conf_read(psc->sc_pc, psc->sc_tag,
	    PCI_BHLC_REG);
	psc->sc_pci_io_bar = pci_conf_read(psc->sc_pc, psc->sc_tag,
	    PCI_MAPREG_START);
	psc->sc_pci_mem0_bar[0] = pci_conf_read(psc->sc_pc, psc->sc_tag,
	    PCI_MAPREG_START+0x04);
	psc->sc_pci_mem0_bar[1] = pci_conf_read(psc->sc_pc, psc->sc_tag,
	    PCI_MAPREG_START+0x08);
	psc->sc_pci_mem1_bar[0] = pci_conf_read(psc->sc_pc, psc->sc_tag,
	    PCI_MAPREG_START+0x0c);
	psc->sc_pci_mem1_bar[1] = pci_conf_read(psc->sc_pc, psc->sc_tag,
	    PCI_MAPREG_START+0x10);
	psc->sc_pci_rom_bar = pci_conf_read(psc->sc_pc, psc->sc_tag,
	    PCI_MAPREG_ROM);
	psc->sc_pci_int = pci_conf_read(psc->sc_pc, psc->sc_tag,
	    PCI_INTERRUPT_REG);
	psc->sc_pci_pmcsr = pci_conf_read(psc->sc_pc, psc->sc_tag, 0x44);
d317 1
a317 1
mpt_pci_set_config_regs(mpt_softc_t *mpt)
d319 1
a319 1
	struct mpt_pci_softc *psc = (void *) mpt;
d321 10
a330 19
	pci_conf_write(psc->sc_pc, psc->sc_tag, PCI_COMMAND_STATUS_REG,
	    psc->sc_pci_csr);
	pci_conf_write(psc->sc_pc, psc->sc_tag, PCI_BHLC_REG,
	    psc->sc_pci_bhlc);
	pci_conf_write(psc->sc_pc, psc->sc_tag, PCI_MAPREG_START,
	    psc->sc_pci_io_bar);
	pci_conf_write(psc->sc_pc, psc->sc_tag, PCI_MAPREG_START+0x04,
	    psc->sc_pci_mem0_bar[0]);
	pci_conf_write(psc->sc_pc, psc->sc_tag, PCI_MAPREG_START+0x08,
	    psc->sc_pci_mem0_bar[1]);
	pci_conf_write(psc->sc_pc, psc->sc_tag, PCI_MAPREG_START+0x0c,
	    psc->sc_pci_mem1_bar[0]);
	pci_conf_write(psc->sc_pc, psc->sc_tag, PCI_MAPREG_START+0x10,
	    psc->sc_pci_mem1_bar[1]);
	pci_conf_write(psc->sc_pc, psc->sc_tag, PCI_MAPREG_ROM,
	    psc->sc_pci_rom_bar);
	pci_conf_write(psc->sc_pc, psc->sc_tag, PCI_INTERRUPT_REG,
	    psc->sc_pci_int);
	pci_conf_write(psc->sc_pc, psc->sc_tag, 0x44, psc->sc_pci_pmcsr);
@


1.9
log
@speeling fix
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_pci.c,v 1.8 2005/08/09 04:10:13 mickey Exp $	*/
a64 9
/*
 * mpt_pci.c:
 *
 * OpenBSD PCI-specific routines for LSI Fusion adapters.
 */

#include <sys/cdefs.h>
/* __KERNEL_RCSID(0, "$NetBSD: mpt_pci.c,v 1.2 2003/07/14 15:47:26 lukem Exp $"); */

d72 1
a72 1
#define PCI_MAPREG_ROM	0x30
d74 2
a75 2
void mpt_pci_attach(struct device *, struct device *, void *);
int mpt_pci_match(struct device *, void *, void *);
d79 1
a79 1
	mpt_softc_t sc_mpt;
d81 2
a82 2
	pci_chipset_tag_t sc_pc;
	pcitag_t sc_tag;
d84 1
a84 1
	void *sc_ih;
d87 8
a94 8
	pcireg_t sc_pci_csr;
	pcireg_t sc_pci_bhlc;
	pcireg_t sc_pci_io_bar;
	pcireg_t sc_pci_mem0_bar[2];
	pcireg_t sc_pci_mem1_bar[2];
	pcireg_t sc_pci_rom_bar;
	pcireg_t sc_pci_int;
	pcireg_t sc_pci_pmcsr;
d101 6
a106 2
#define	MPP_F_FC	0x01	/* Fibre Channel adapter */
#define	MPP_F_DUAL	0x02	/* Dual port adapter */
d206 1
a206 1
	 * Ensure that the ROM is diabled.
d255 1
a255 1
	if (mpp->mpp_flags & MPP_F_DUAL) {
d257 1
a257 1
	}
a266 9

#if defined(__NetBSD__)
CFATTACH_DECL(mpt_pci, sizeof(struct mpt_pci_softc),
    mpt_pci_match, mpt_pci_attach, NULL, NULL);
#else
struct cfattach mpt_pci_ca = {
	sizeof (struct mpt_pci_softc), mpt_pci_match, mpt_pci_attach,
};
#endif
@


1.8
log
@do not set PCI_COMMAND_MASTER_ENABLE explicitly as it's already set in pcisubmatch(); kettenis@@ testing; brad@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_pci.c,v 1.7 2004/12/29 06:57:12 deraadt Exp $	*/
d251 1
a251 1
	 * Using Mem1 is know to make the chip stop responding to
@


1.7
log
@indentation repair; marco ok
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_pci.c,v 1.6 2004/08/23 21:00:42 marco Exp $	*/
a208 10

	/*
	 * Make sure the PCI command register is properly configured.
	 */
	reg = pci_conf_read(pa->pa_pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);
	reg |= PCI_COMMAND_MASTER_ENABLE;
	/* XXX PCI_COMMAND_INVALIDATE_ENABLE */
	/* XXX PCI_COMMAND_PARITY_ENABLE */
	/* XXX PCI_COMMAND_SERR_ENABLE */
	pci_conf_write(pa->pa_pc, pa->pa_tag, PCI_COMMAND_STATUS_REG, reg);
@


1.6
log
@Fix license.  ok krw@@, deraadt@@ tedu@@ & Milos Urbanek <urbanek at zoom-int.cz>
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_pci.c,v 1.5 2004/06/22 19:00:53 marco Exp $	*/
d65 1
a65 1
/* 
d69 1
a69 1
 */     
@


1.5
log
@Spacing.  ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_pci.c,v 1.4 2004/06/22 18:57:18 marco Exp $	*/
d17 11
a27 6
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
@


1.4
log
@Remove all static functions.  ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_pci.c,v 1.3 2004/04/07 00:40:04 marco Exp $	*/
a75 1

a126 1

@


1.3
log
@Clean up printf's per deraadt@@.  Kill panic in mpt_pci_attach per mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_pci.c,v 1.2 2004/03/06 03:59:29 krw Exp $	*/
d79 4
d102 3
a104 3
static void	mpt_pci_link_peer(mpt_softc_t *);
static void	mpt_pci_read_config_regs(mpt_softc_t *);
static void	mpt_pci_set_config_regs(mpt_softc_t *);
d133 1
a133 1
static const struct mpt_pci_product *
d147 1
a147 1
static int
d158 1
a158 1
static void
d292 1
a292 1
static void
d332 1
a332 1
static void
d361 1
a361 1
static void
@


1.3.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2
log
@Remove excessive boot time verbiage.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_pci.c,v 1.1 2004/03/06 03:03:07 krw Exp $	*/
d170 2
a171 2
		printf("\n");
		panic("mpt_pci_attach");
d199 1
a199 2
		printf("%s: unable to map device registers\n",
		    mpt->mpt_dev.dv_xname);
d224 1
a224 2
		printf("%s: unable to map interrupt\n",
		    mpt->mpt_dev.dv_xname);
d244 1
a244 2
		printf("%s: unable to allocate DMA memory\n",
		    mpt->mpt_dev.dv_xname);
@


1.1
log
@Initial version of driver for LSI MPT devices, like the U320 1030.
Basically works but much still to fix/implement.

From NetBSD via Milos Urbanek and Marco Peereboom.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a108 1
	const char		*mpp_name;
d111 1
a111 2
	  MPP_F_DUAL,
	  "LSI Logic 53c1030 Ultra320 SCSI" },
d113 1
a113 2
	  MPP_F_FC,
	  "LSI Logic FC909 FC Adapter" },
d115 1
a115 2
	  MPP_F_FC,
	  "LSI Logic FC909A FC Adapter" },
d117 1
a117 2
	  MPP_F_FC | MPP_F_DUAL,
	  "LSI Logic FC929 FC Adapter" },
d119 1
a119 2
	  MPP_F_FC | MPP_F_DUAL,
	  "LSI Logic FC929 FC Adapter" },
d121 1
a121 2
	  MPP_F_FC,
	  "LSI Logic FC919 FC Adapter" },
d123 1
a123 2
	  MPP_F_FC,
	  "LSI Logic FC919 FC Adapter" },
d126 1
a126 2
	  0,
	  NULL },
d134 1
a134 1
	for (mpp = mpt_pci_products; mpp->mpp_name != NULL; mpp++) {
a173 7
	if (mpp->mpp_flags & MPP_F_FC) {
		mpt->is_fc = 1;
		printf(": Fibre Channel controller\n");
	} else
		printf(": SCSI controller\n");
	printf(": %s\n", mpp->mpp_name);

d233 1
a233 2
		printf("%s: unable to establish interrupt",
		    mpt->mpt_dev.dv_xname);
d239 1
a239 2
	printf("%s: interrupting at %s\n", mpt->mpt_dev.dv_xname,
	    intrstr);
@

