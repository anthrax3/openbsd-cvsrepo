head	1.12;
access;
symbols
	OPENBSD_5_6:1.11.0.8
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.22
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.20
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.16
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.18
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.14
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.12
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.10
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.8
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8;
locks; strict;
comment	@ * @;


1.12
date	2014.09.27.08.28.12;	author deraadt;	state dead;
branches;
next	1.11;
commitid	4YanDnd9LvhXtfhB;

1.11
date	2013.07.04.16.52.22;	author sf;	state Exp;
branches;
next	1.10;

1.10
date	2011.04.03.15.36.03;	author jasper;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.25.11.02.54;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.27.13.32.01;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.27.12.53.17;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.14.22.28.47;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2005.08.14.22.06.06;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2005.08.14.21.50.49;	author claudio;	state Exp;
branches;
next	1.3;

1.3
date	2005.08.14.11.43.46;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.13.23.52.49;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.13.22.49.48;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.12
log
@retire Accoom Networks Artery T1/E1 drive; ok claudio
@
text
@/*	$OpenBSD: musycc_obsd.c,v 1.11 2013/07/04 16:52:22 sf Exp $ */

/*
 * Copyright (c) 2004,2005  Internet Business Solutions AG, Zurich, Switzerland
 * Written by: Claudio Jeker <jeker@@accoom.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/types.h>

#include <sys/device.h>
#include <sys/malloc.h>
#include <sys/systm.h>
#include <sys/socket.h>

#include <machine/cpu.h>
#include <machine/bus.h>
#include <machine/intr.h>

#include <net/if.h>
#include <net/if_media.h>
#include <net/if_sppp.h>

#include <dev/pci/musyccvar.h>
#include <dev/pci/musyccreg.h>

#include <dev/pci/pcivar.h>
#include <dev/pci/pcireg.h>
#include <dev/pci/pcidevs.h>

int	musycc_match(struct device *, void *, void *);
void	musycc_softc_attach(struct device *, struct device *, void *);
void	musycc_ebus_attach(struct device *, struct musycc_softc *,
	    struct pci_attach_args *);
int	musycc_ebus_print(void *, const char *);

struct cfattach musycc_ca = {
	sizeof(struct musycc_softc), musycc_match, musycc_softc_attach
};

struct cfdriver musycc_cd = {
	NULL, "musycc", DV_DULL
};

SLIST_HEAD(, musycc_softc) msc_list = SLIST_HEAD_INITIALIZER(msc_list);

const struct pci_matchid musycc_pci_devices[] = {
	{ PCI_VENDOR_CONEXANT, PCI_PRODUCT_CONEXANT_MUSYCC8478 },
	{ PCI_VENDOR_CONEXANT, PCI_PRODUCT_CONEXANT_MUSYCC8474 },
	{ PCI_VENDOR_CONEXANT, PCI_PRODUCT_CONEXANT_MUSYCC8472 },
	{ PCI_VENDOR_CONEXANT, PCI_PRODUCT_CONEXANT_MUSYCC8471 }
};

int
musycc_match(struct device *parent, void *match, void *aux)
{
	return (pci_matchbyid((struct pci_attach_args *)aux, musycc_pci_devices,
	    nitems(musycc_pci_devices)));
}

void
musycc_softc_attach(struct device *parent, struct device *self, void *aux)
{
	struct musycc_softc	*sc = (struct musycc_softc *)self;
	struct pci_attach_args	*pa = aux;
	pci_chipset_tag_t	 pc = pa->pa_pc;
	pci_intr_handle_t	 ih;
	const char		*intrstr = NULL;

	if (pci_mapreg_map(pa, MUSYCC_PCI_BAR,
	    PCI_MAPREG_TYPE_MEM | PCI_MAPREG_MEM_TYPE_32BIT, 0,
	    &sc->mc_st, &sc->mc_sh, NULL, &sc->mc_iosize, 0)) {
		printf(": can't map mem space\n");
		return;
	}
	sc->mc_dmat = pa->pa_dmat;

	switch (PCI_PRODUCT(pa->pa_id)) {
	case PCI_PRODUCT_CONEXANT_MUSYCC8478:
		sc->mc_ngroups = 8;
		sc->mc_nports = 8;
		break;
	case PCI_PRODUCT_CONEXANT_MUSYCC8474:
		sc->mc_ngroups = 4;
		sc->mc_nports = 4;
		break;
	case PCI_PRODUCT_CONEXANT_MUSYCC8472:
		sc->mc_ngroups = 2;
		sc->mc_nports = 2;
		break;
	case PCI_PRODUCT_CONEXANT_MUSYCC8471:
		sc->mc_ngroups = 1;
		sc->mc_nports = 1;
		break;
	}

	if (pa->pa_function == 1)
		return (musycc_ebus_attach(parent, sc, pa));

	sc->bus = parent->dv_unit;
	sc->device = pa->pa_device;
	SLIST_INSERT_HEAD(&msc_list, sc, list);

	/*
	 * Allocate our interrupt.
	 */
	if (pci_intr_map(pa, &ih)) {
		printf(": couldn't map interrupt\n");
		bus_space_unmap(sc->mc_st, sc->mc_sh, sc->mc_iosize);
		return;
	}

	intrstr = pci_intr_string(pc, ih);
	sc->mc_ih = pci_intr_establish(pc, ih, IPL_NET, musycc_intr, sc,
	    self->dv_xname);
	if (sc->mc_ih == NULL) {
		printf(": couldn't establish interrupt");
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
		bus_space_unmap(sc->mc_st, sc->mc_sh, sc->mc_iosize);
		return;
	}

	printf(": %s\n", intrstr);

	/* soft reset device */
	bus_space_write_4(sc->mc_st, sc->mc_sh, MUSYCC_SERREQ(0),
	    MUSYCC_SREQ_SET(1));
	bus_space_barrier(sc->mc_st, sc->mc_sh, MUSYCC_SERREQ(0),
	    sizeof(u_int32_t), BUS_SPACE_BARRIER_WRITE);

	/*
	 * preload global configuration: set EBUS to sane defaults
	 * so that the ROM access will work.
	 * intel mode, elapse = 3, blapse = 3, alapse = 3, disable INTB
	 */
	sc->mc_global_conf = MUSYCC_CONF_MPUSEL | MUSYCC_CONF_ECKEN |
	    MUSYCC_CONF_ELAPSE_SET(3) | MUSYCC_CONF_ALAPSE_SET(3) |
	    MUSYCC_CONF_BLAPSE_SET(3) | MUSYCC_CONF_INTB;

	/* Dual Address Cycle Base Pointer */
	bus_space_write_4(sc->mc_st, sc->mc_sh, MUSYCC_DACB_PTR, 0);
	/* Global Configuration Descriptor */
	bus_space_write_4(sc->mc_st, sc->mc_sh, MUSYCC_GLOBALCONF,
	    sc->mc_global_conf);

	return;
}

void
musycc_ebus_attach(struct device *parent, struct musycc_softc *esc,
    struct pci_attach_args *pa)
{
	struct ebus_dev			 rom;
	struct musycc_attach_args	 ma;
	struct musycc_softc		*sc;
	pci_chipset_tag_t		 pc = pa->pa_pc;
#if 0
	pci_intr_handle_t		 ih;
	const char			*intrstr = NULL;
#endif
	struct musycc_rom		 baseconf;
	struct musycc_rom_framer	 framerconf;
	bus_size_t			 offset;
	int				 i;

	/* find HDLC controller softc ... */
	SLIST_FOREACH(sc, &msc_list, list)
		if (sc->bus == parent->dv_unit && sc->device == pa->pa_device)
			break;
	if (sc == NULL) {
		printf(": corresponding hdlc controller not found\n");
		return;
	}

	/* ... and link them together */
	esc->mc_other = sc;
	sc->mc_other = esc;

#if 0
	/*
	 * Allocate our interrupt.
	 */
	if (pci_intr_map(pa, &ih)) {
		printf(": couldn't map interrupt\n");
		goto failed;
	}

	intrstr = pci_intr_string(pc, ih);
	esc->mc_ih = pci_intr_establish(pc, ih, IPL_NET, ebus_intr, esc,
	    esc->mc_dev.dv_xname);
	if (esc->mc_ih == NULL) {
		printf(": couldn't establish interrupt");
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
		goto failed;
	}

	/* XXX this printf should actually move to the end of the function */
	printf(": %s\n", intrstr);
#endif

	if (ebus_attach_device(&rom, sc, 0, 0x400) != 0) {
		printf(": failed to map rom @@ %05x\n", 0);
		goto failed;
	}

	offset = 0;
	ebus_read_buf(&rom, offset, &baseconf, sizeof(baseconf));
	offset += sizeof(baseconf);

	if (baseconf.magic != MUSYCC_ROM_MAGIC) {
		printf(": bad rom\n");
		goto failed;
	}

	/* Do generic parts of attach. */
	if (musycc_attach_common(sc, baseconf.portmap, baseconf.portmode))
		goto failed;

	/* map and reset leds */
	/* (15 * 0x4000) << 2 */
	esc->mc_ledbase = ntohl(baseconf.ledbase) << 2;
	esc->mc_ledmask = baseconf.ledmask;
	esc->mc_ledstate = 0;
	bus_space_write_1(esc->mc_st, esc->mc_sh, esc->mc_ledbase, 0);

	printf("\n");

	for (i = 0; i < baseconf.numframer; i++) {
		if (offset >= 0x400) {
			printf("%s: bad rom\n", sc->mc_dev.dv_xname);
			goto failed;
		}
		ebus_read_buf(&rom, offset, &framerconf, sizeof(framerconf));
		offset += sizeof(framerconf);

		strlcpy(ma.ma_product, baseconf.product, sizeof(ma.ma_product));
		ma.ma_base = ntohl(framerconf.base);
		ma.ma_size = ntohl(framerconf.size);
		ma.ma_type = ntohl(framerconf.type);
		ma.ma_gnum = framerconf.gnum;
		ma.ma_port = framerconf.port;
		ma.ma_flags = framerconf.flags;
		ma.ma_slot = framerconf.slot;

		(void)config_found(&sc->mc_dev, &ma, musycc_ebus_print);
	}

	return;
failed:
	/* Failed! */
	pci_intr_disestablish(pc, sc->mc_ih);
	if (esc->mc_ih != NULL)
		pci_intr_disestablish(pc, esc->mc_ih);
	bus_space_unmap(sc->mc_st, sc->mc_sh, sc->mc_iosize);
	bus_space_unmap(esc->mc_st, esc->mc_sh, esc->mc_iosize);
	return;
}

int
musycc_ebus_print(void *aux, const char *pnp)
{
	struct musycc_attach_args *ma = aux;

	if (pnp)
		printf("framer at %s port %d slot %c",
		    pnp, ma->ma_port, ma->ma_slot);
	else
		printf(" port %d slot %c", ma->ma_port, ma->ma_slot);
	return (UNCONF);
}

@


1.11
log
@Format string fix: %x instead of %p for int

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: musycc_obsd.c,v 1.10 2011/04/03 15:36:03 jasper Exp $ */
@


1.10
log
@use nitems(); no binary change for drivers that are compiled on amd64.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: musycc_obsd.c,v 1.9 2006/01/25 11:02:54 claudio Exp $ */
d218 1
a218 1
		printf(": failed to map rom @@ %05p\n", 0);
@


1.9
log
@Reset and initialize part of the device early. Makes reading the ROM more
reliable because correct bus timings were set later.
@
text
@d1 1
a1 1
/*	$OpenBSD: musycc_obsd.c,v 1.8 2005/08/27 13:32:01 claudio Exp $ */
d70 1
a70 1
	    sizeof(musycc_pci_devices)/sizeof(musycc_pci_devices[0])));
@


1.8
log
@Fix some issues to make the dual port version work this should also fix the
singleport T1 (B8Z2/ESF) mode.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: musycc_obsd.c,v 1.7 2005/08/27 12:53:17 claudio Exp $ */
d138 22
@


1.7
log
@iosize is no longer used, use correct esc->mc_iosize instead. This fixes a
panic on attach failure. The MUSYCC_MAXFRM_MASK was incorrectly defined and
use correct device name in an error message.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: musycc_obsd.c,v 1.6 2005/08/14 22:28:47 claudio Exp $ */
d215 1
a215 1
	esc->mc_ledbase = ntohl(baseconf.ledbase);
d217 2
a218 1
	ebus_set_led(esc, 0);
d236 1
@


1.6
log
@KNF mostly spaces and make the dmesg line a bit shorter.
@
text
@d1 1
a1 1
/*	$OpenBSD: musycc_obsd.c,v 1.5 2005/08/14 22:06:06 claudio Exp $ */
d155 1
a155 1
	bus_size_t			 iosize, offset;
d223 1
a223 1
			printf("%s: bad rom\n", esc->mc_dev.dv_xname);
d247 1
a247 1
	bus_space_unmap(esc->mc_st, esc->mc_sh, iosize);
@


1.5
log
@No longer used prototype.
@
text
@d1 1
a1 1
/*	$OpenBSD: musycc_obsd.c,v 1.4 2005/08/14 21:50:49 claudio Exp $ */
d81 1
a81 1
	
d182 1
a182 1
	    self->dv_xname);
d195 1
a195 1
	if (ebus_attach_device(&rom, sc, 0, 0x400) != 0) {	
d219 1
a219 1
	printf(": card rev %d \n", ntohs(baseconf.rev));
d223 1
a223 1
			printf(": bad rom\n");
@


1.4
log
@Kill the musyccbus/ebus device and use musycc for both functions of the
chip. Using two different devices for one card was a stupid idea.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: musycc_obsd.c,v 1.3 2005/08/14 11:43:46 deraadt Exp $ */
a43 1
int	musyccbus_match(struct device *, void *, void *);
@


1.3
log
@minimal diff to let if_art compile; claudio ok
@
text
@d1 1
a1 1
/*	$OpenBSD: musycc_obsd.c,v 1.2 2005/08/13 23:52:49 claudio Exp $ */
d46 3
a48 2
void	musyccbus_softc_attach(struct device *, struct device *, void *);
int	musyccbus_print(void *, const char *);
a53 4
struct cfattach musyccbus_ca = {
	sizeof(struct ebus_softc), musyccbus_match, musyccbus_softc_attach
};

a57 4
struct cfdriver musyccbus_cd = {
	NULL, "ebus", DV_DULL
};

d70 2
a71 21
	int			 rv;
	struct pci_attach_args  *pa = aux;
	
	rv = pci_matchbyid((struct pci_attach_args *)aux, musycc_pci_devices,
	    sizeof(musycc_pci_devices)/sizeof(musycc_pci_devices[0]));
	if (rv != 0 && pa->pa_function == 0)
		return (rv);
	return (0);
}

int
musyccbus_match(struct device *parent, void *match, void *aux)
{
	int			 rv;
	struct pci_attach_args  *pa = aux;
	
	rv = pci_matchbyid((struct pci_attach_args *)aux, musycc_pci_devices,
	    sizeof(musycc_pci_devices)/sizeof(musycc_pci_devices[0]));
	if (rv != 0 && pa->pa_function == 1)
		return (rv);
	return (0);
d110 3
d143 2
a144 1
musyccbus_softc_attach(struct device *parent, struct device *self, void *aux)
a147 1
	struct ebus_softc		*esc = (struct ebus_softc *)self;
a148 1
	struct pci_attach_args		*pa = aux;
d169 2
a170 12
	esc->ec_hdlc = sc;
	sc->mc_ebus = esc;

	if (pci_mapreg_map(pa, MUSYCC_PCI_BAR,
	    PCI_MAPREG_TYPE_MEM | PCI_MAPREG_MEM_TYPE_32BIT, 0,
	    &esc->ec_st, &esc->ec_sh, NULL, &iosize, 0)) {
		printf(": can't map mem space\n");
		pci_intr_disestablish(pc, sc->mc_ih);
		bus_space_unmap(sc->mc_st, sc->mc_sh, sc->mc_iosize);
		return;
	}
	esc->ec_dmat = pa->pa_dmat;
d182 1
a182 1
	esc->ec_ih = pci_intr_establish(pc, ih, IPL_NET, ebus_intr, esc,
d184 1
a184 1
	if (esc->ec_ih == NULL) {
d196 1
a196 1
	if (ebus_attach_device(&rom, esc->ec_hdlc, 0, 0x400) != 0) {	
d216 2
a217 2
	esc->ec_ledbase = ntohl(baseconf.ledbase);
	esc->ec_ledmask = baseconf.ledmask;
d238 1
a238 1
		(void)config_found(&sc->mc_dev, &ma, ebus_print);
d245 2
a246 2
	if (esc->ec_ih != NULL)
		pci_intr_disestablish(pc, esc->ec_ih);
d248 1
a248 1
	bus_space_unmap(esc->ec_st, esc->ec_sh, iosize);
d253 1
a253 1
musyccbus_print(void *aux, const char *pnp)
@


1.2
log
@Kill Id tags, OpenBSD ones are enough.
@
text
@d1 1
a1 1
/*	$OpenBSD: musycc_obsd.c,v 1.1 2005/08/13 22:49:48 claudio Exp $ */
d44 1
a44 1
int	ebus_match(struct device *, void *, void *);
d46 2
a47 2
void	ebus_softc_attach(struct device *, struct device *, void *);
int	ebus_print(void *, const char *);
d53 2
a54 2
struct cfattach ebus_ca = {
	sizeof(struct ebus_softc), ebus_match, ebus_softc_attach
d61 1
a61 1
struct cfdriver ebus_cd = {
d88 1
a88 1
ebus_match(struct device *parent, void *match, void *aux)
d166 1
a166 1
ebus_softc_attach(struct device *parent, struct device *self, void *aux)
d287 1
a287 1
ebus_print(void *aux, const char *pnp)
@


1.1
log
@Driver for the Accoom Networks Artery T1/E1 PCI cards.
deraadt@@ "yeah, put it in."
@
text
@d1 1
a1 2
/*	$OpenBSD$ */
/*	$Id: musycc_obsd.c,v 1.29 2005/08/13 22:58:33 cjeker Exp $ */
@

