head	1.22;
access;
symbols
	OPENBSD_5_6:1.20.0.8
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.6
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.20.0.2
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.18.0.12
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.10
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.8
	OPENBSD_5_0:1.18.0.6
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.4
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.2
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.4
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.16.0.2
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.15.0.2
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.14.0.2
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.13.0.8
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.6
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.4
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7;
locks; strict;
comment	@ * @;


1.22
date	2014.09.27.08.28.12;	author deraadt;	state dead;
branches;
next	1.21;
commitid	4YanDnd9LvhXtfhB;

1.21
date	2014.09.14.14.17.25;	author jsg;	state Exp;
branches;
next	1.20;
commitid	uzzBR7hz9ncd4O6G;

1.20
date	2013.06.20.12.03.40;	author mpi;	state Exp;
branches;
next	1.19;

1.19
date	2013.06.20.09.38.24;	author mpi;	state Exp;
branches;
next	1.18;

1.18
date	2010.06.29.07.12.31;	author matthew;	state Exp;
branches;
next	1.17;

1.17
date	2009.03.29.21.53.52;	author sthen;	state Exp;
branches;
next	1.16;

1.16
date	2008.09.10.14.01.22;	author blambert;	state Exp;
branches;
next	1.15;

1.15
date	2008.05.13.01.37.26;	author brad;	state Exp;
branches;
next	1.14;

1.14
date	2007.09.17.17.34.22;	author brad;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.26.16.51.00;	author claudio;	state Exp;
branches;
next	1.12;

1.12
date	2006.01.25.14.45.28;	author claudio;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.20.15.27.48;	author claudio;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.19.15.49.53;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.26.09.26.56;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2005.09.22.12.45.07;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.27.13.32.01;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.27.13.18.02;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2005.08.14.22.28.47;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2005.08.14.21.50.49;	author claudio;	state Exp;
branches;
next	1.3;

1.3
date	2005.08.13.23.52.49;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.13.22.58.05;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.13.22.49.48;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.22
log
@retire Accoom Networks Artery T1/E1 drive; ok claudio
@
text
@/*	$OpenBSD: if_art.c,v 1.21 2014/09/14 14:17:25 jsg Exp $ */

/*
 * Copyright (c) 2004,2005  Internet Business Solutions AG, Zurich, Switzerland
 * Written by: Claudio Jeker <jeker@@accoom.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/types.h>

#include <sys/device.h>
#include <sys/socket.h>
#include <sys/sockio.h>
#include <sys/syslog.h>
#include <sys/systm.h>

#include <machine/bus.h>

#include <net/if.h>
#include <net/if_media.h>
#include <net/if_sppp.h>

#include <dev/pci/musyccvar.h>
#include <dev/pci/if_art.h>

#define ART_E1_MASK 0xffffffff
#define ART_T1_MASK 0x01fffffe

int	art_match(struct device *, void *, void *);
void	art_softc_attach(struct device *, struct device *, void *);

int	art_ioctl(struct ifnet *, u_long, caddr_t);
int	art_ifm_change(struct ifnet *);
void	art_ifm_status(struct ifnet *, struct ifmediareq *);
int	art_ifm_options(struct ifnet *, struct channel_softc *, u_int);
void	art_onesec(void *);
void	art_linkstate(void *);
u_int32_t art_mask_tsmap(u_int, u_int32_t);

struct cfattach art_ca = {
	sizeof(struct art_softc), art_match, art_softc_attach
};

struct cfdriver art_cd = {
	NULL, "art", DV_IFNET
};

int
art_match(struct device *parent, void *match, void *aux)
{
	struct musycc_attach_args	*ma = aux;

	if (ma->ma_type == MUSYCC_FRAMER_BT8370)
		return (1);
	return (0);
}

/*
 * used for the one second timer
 */
extern int hz;

void
art_softc_attach(struct device *parent, struct device *self, void *aux)
{
	struct art_softc		*sc = (struct art_softc *)self;
	struct musycc_softc		*psc = (struct musycc_softc *)parent;
	struct musycc_attach_args	*ma = aux;

	printf(" \"%s\"", ma->ma_product);

	if (ebus_attach_device(&sc->art_ebus, psc, ma->ma_base,
	    ma->ma_size) != 0) {
		printf(": can't map framer\n");
		return;
	}

	/* set basic values */
	sc->art_port = ma->ma_port;
	sc->art_slot = ma->ma_slot;
	sc->art_gnum = ma->ma_gnum;
	sc->art_type = ma->ma_flags & 0x03;

	sc->art_channel = musycc_channel_create(self->dv_xname, 1);
	if (sc->art_channel == NULL) {
		printf(": could not alloc channel descriptor\n");
		return;
	}

	if (musycc_channel_attach(psc, sc->art_channel, self, sc->art_gnum) ==
	    -1) {
		printf(": unable to attach to hdlc controller\n");
		return;
	}

	ifmedia_init(&sc->art_ifm, 0, art_ifm_change, art_ifm_status);
	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_T1, 0, 0), 0, NULL);
	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_T1_AMI, 0, 0), 0, NULL);
	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_E1, 0, 0), 0, NULL);
	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_E1_G704, 0, 0), 0, NULL);
	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_E1_G704_CRC4, 0, 0), 0, NULL);

	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_T1, IFM_TDM_MASTER, 0), 0, NULL);
	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_T1_AMI, IFM_TDM_MASTER, 0), 0, NULL);
	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_E1, IFM_TDM_MASTER, 0), 0, NULL);
	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_E1_G704, IFM_TDM_MASTER, 0), 0, NULL);
	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_E1_G704_CRC4, IFM_TDM_MASTER, 0),
	    0, NULL);

	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_T1, IFM_TDM_PPP, 0), 0, NULL);
	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_E1, IFM_TDM_PPP, 0), 0, NULL);
	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_T1_AMI, IFM_TDM_PPP, 0), 0, NULL);
	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_E1_G704, IFM_TDM_PPP, 0), 0, NULL);
	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_E1_G704_CRC4, IFM_TDM_PPP, 0), 0,
	    NULL);

	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_T1, IFM_TDM_PPP | IFM_TDM_MASTER, 0),
	    0, NULL);
	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_E1, IFM_TDM_PPP | IFM_TDM_MASTER, 0),
	    0, NULL);
	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_T1_AMI, IFM_TDM_PPP | IFM_TDM_MASTER,
	    0), 0, NULL);
	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_E1_G704, IFM_TDM_PPP |
	    IFM_TDM_MASTER, 0), 0, NULL);
	ifmedia_add(&sc->art_ifm,
	    IFM_MAKEWORD(IFM_TDM, IFM_TDM_E1_G704_CRC4, IFM_TDM_PPP |
	    IFM_TDM_MASTER, 0), 0, NULL);

	printf("\n");

	if (bt8370_reset(sc) != 0)
		return;

	/* Initialize timeout for statistics update. */
	timeout_set(&sc->art_onesec, art_onesec, sc);

	ifmedia_set(&sc->art_ifm, IFM_TDM|IFM_TDM_E1_G704_CRC4);
	sc->art_media = sc->art_ifm.ifm_media;

	bt8370_set_frame_mode(sc, sc->art_type, IFM_TDM_E1_G704_CRC4, 0);
	musycc_attach_sppp(sc->art_channel, art_ioctl);

	/* Set linkstate hook to track link state changes done by sppp. */
	sc->art_linkstatehook = hook_establish(
	    sc->art_channel->cc_ifp->if_linkstatehooks, 0, art_linkstate, sc);

	/* Schedule the timeout one second from now. */
	timeout_add_sec(&sc->art_onesec, 1);
}

/* interface ioctl */
int
art_ioctl(struct ifnet *ifp, u_long command, caddr_t data)
{
	struct ifreq		*ifr = (struct ifreq*) data;
	struct channel_softc	*cc = ifp->if_softc;
	struct art_softc	*ac = (struct art_softc *)cc->cc_parent;
	u_int32_t		 tsmap;
	int			 s, rv = 0;

	s = splnet();
	switch (command) {
	case SIOCSIFADDR:
		if ((rv = musycc_init_channel(cc, ac->art_slot)))
			break;
		rv = sppp_ioctl(ifp, command, data);
		break;
	case SIOCSIFTIMESLOT:
		if ((rv = suser(curproc, 0)) != 0)
			break;
		rv = copyin(ifr->ifr_data, &tsmap, sizeof(tsmap));
		if (rv)
			break;
		if (art_mask_tsmap(IFM_SUBTYPE(ac->art_media), tsmap) !=
		    tsmap) {
			rv = EINVAL;
			break;
		}
		if (ac->art_type == ART_SBI_SINGLE &&
		    (IFM_SUBTYPE(ac->art_media) == IFM_TDM_T1 ||
		    IFM_SUBTYPE(ac->art_media) == IFM_TDM_T1_AMI))
			/*
			 * need to adjust timeslot mask for T1 on single port
			 * cards. There timeslot 0-23 are usable not 1-24
			 */
			tsmap >>= 1;

		cc->cc_tslots = tsmap;
		rv = musycc_init_channel(cc, ac->art_slot);
		break;
	case SIOCGIFTIMESLOT:
		tsmap = cc->cc_tslots;
		if (ac->art_type == ART_SBI_SINGLE &&
		    (IFM_SUBTYPE(ac->art_media) == IFM_TDM_T1 ||
		    IFM_SUBTYPE(ac->art_media) == IFM_TDM_T1_AMI))
			tsmap <<= 1;
		rv = copyout(&tsmap, ifr->ifr_data, sizeof(tsmap));
		break;
	case SIOCSIFFLAGS:
		/*
		 * If interface is marked up and not running, then start it.
		 * If it is marked down and running, stop it.
		 */
		if (ifr->ifr_flags & IFF_UP && cc->cc_state != CHAN_RUNNING) {
			if ((rv = musycc_init_channel(cc, ac->art_slot)))
				break;
		} else if ((ifr->ifr_flags & IFF_UP) == 0 &&
		    cc->cc_state == CHAN_RUNNING)
			musycc_stop_channel(cc);
		rv = sppp_ioctl(ifp, command, data);
		break;
	case SIOCSIFMEDIA:
	case SIOCGIFMEDIA:
		if (ac != NULL)
			rv = ifmedia_ioctl(ifp, ifr, &ac->art_ifm, command);
		else
			rv = EINVAL;
		break;
	default:
		rv = sppp_ioctl(ifp, command, data);
		break;
	}
	splx(s);
	return (rv);
}

int
art_ifm_change(struct ifnet *ifp)
{
	struct channel_softc	*cc = ifp->if_softc;
	struct art_softc	*ac = (struct art_softc *)cc->cc_parent;
	struct ifmedia		*ifm = &ac->art_ifm;
	u_int64_t		baudrate;
	int			rv, s;

	ACCOOM_PRINTF(2, ("%s: art_ifm_change %08x\n", ifp->if_xname,
	    ifm->ifm_media));

	if (IFM_TYPE(ifm->ifm_media) != IFM_TDM)
		return (EINVAL);

	/* OPTIONS (controller mode hdlc, ppp, eoe) */
	if ((rv = art_ifm_options(ifp, cc, IFM_OPTIONS(ifm->ifm_media))) != 0)
		return (rv);

	/* SUBTYPE (framing mode T1/E1) + MODE (clocking master/slave) */
	if (IFM_SUBTYPE(ifm->ifm_media) != IFM_SUBTYPE(ac->art_media) ||
	    IFM_MODE(ifm->ifm_media) != IFM_MODE(ac->art_media)) {
		ACCOOM_PRINTF(0, ("%s: art_ifm_change type %d mode %x\n",
		    ifp->if_xname, IFM_SUBTYPE(ifm->ifm_media),
		    IFM_MODE(ifm->ifm_media)));

		bt8370_set_frame_mode(ac, ac->art_type,
		    IFM_SUBTYPE(ifm->ifm_media), IFM_MODE(ifm->ifm_media));

		if (IFM_SUBTYPE(ifm->ifm_media) != IFM_SUBTYPE(ac->art_media)) {
			/* adjust timeslot map on media change */
			cc->cc_tslots = art_mask_tsmap(
			    IFM_SUBTYPE(ifm->ifm_media), cc->cc_tslots);

			if (ac->art_type == ART_SBI_SINGLE &&
			    (IFM_SUBTYPE(ifm->ifm_media) == IFM_TDM_T1 ||
			     IFM_SUBTYPE(ifm->ifm_media) == IFM_TDM_T1_AMI) &&
			    (IFM_SUBTYPE(ac->art_media) != IFM_TDM_T1 &&
			     IFM_SUBTYPE(ac->art_media) != IFM_TDM_T1_AMI))
				/*
				 * need to adjust timeslot mask for T1 on
				 * single port cards. There timeslot 0-23 are
				 * usable not 1-24
				 */
				cc->cc_tslots >>= 1;
			else if (ac->art_type == ART_SBI_SINGLE &&
			    (IFM_SUBTYPE(ifm->ifm_media) != IFM_TDM_T1 &&
			     IFM_SUBTYPE(ifm->ifm_media) != IFM_TDM_T1_AMI) &&
			    (IFM_SUBTYPE(ac->art_media) == IFM_TDM_T1 ||
			     IFM_SUBTYPE(ac->art_media) == IFM_TDM_T1_AMI))
				/* undo the last adjustment */
				cc->cc_tslots <<= 1;
		}

		/* re-init the card */
		if ((rv = musycc_init_channel(cc, ac->art_slot)))
			return (rv);
	}

	baudrate = ifmedia_baudrate(ac->art_media);
	if (baudrate != ifp->if_baudrate) {
		ifp->if_baudrate = baudrate;
		s = splsoftnet();
		if_link_state_change(ifp);
		splx(s);
	}

	ac->art_media = ifm->ifm_media;

	return (0);
}

void
art_ifm_status(struct ifnet *ifp, struct ifmediareq *ifmreq)
{
	struct art_softc	*ac;

	ac = (struct art_softc *)
	    ((struct channel_softc *)ifp->if_softc)->cc_parent;
	ifmreq->ifm_status = IFM_AVALID;
	if (LINK_STATE_IS_UP(ifp->if_link_state))
		ifmreq->ifm_status |= IFM_ACTIVE;
	ifmreq->ifm_active = ac->art_media;

	return;
}

int
art_ifm_options(struct ifnet *ifp, struct channel_softc *cc, u_int options)
{
	struct art_softc	*ac = (struct art_softc *)cc->cc_parent;
	u_int			 flags = cc->cc_ppp.pp_flags;
	int			 rv;

	if (options == IFM_TDM_PPP) {
		flags &= ~PP_CISCO;
		flags |= PP_KEEPALIVE;
	} else if (options == 0) {
		flags |= PP_CISCO;
		flags |= PP_KEEPALIVE;
	} else {
		ACCOOM_PRINTF(0, ("%s: Unsupported ifmedia options\n",
		    ifp->if_xname));
		return (EINVAL);
	}
	if (flags != cc->cc_ppp.pp_flags) {
		musycc_stop_channel(cc);
		cc->cc_ppp.pp_flags = flags;
		if ((rv = musycc_init_channel(cc, ac->art_slot)))
			return (rv);
		return (sppp_ioctl(ifp, SIOCSIFFLAGS, NULL));
	}
	return (0);
}

void
art_onesec(void *arg)
{
	struct art_softc	*ac = arg;
	struct ifnet		*ifp = ac->art_channel->cc_ifp;
	struct sppp		*ppp = &ac->art_channel->cc_ppp;
	int			 s, rv, link_state;

	rv = bt8370_link_status(ac);
	switch (rv) {
	case 1:
		link_state = LINK_STATE_UP;
		/* set green led */
		ebus_set_led(ac->art_channel, 1, MUSYCC_LED_GREEN);
		break;
	case 0:
		link_state = LINK_STATE_DOWN;
		/* set green led and red led as well */
		ebus_set_led(ac->art_channel, 1,
		    MUSYCC_LED_GREEN | MUSYCC_LED_RED);
		break;
	default:
		link_state = LINK_STATE_DOWN;
		/* turn green led off */
		ebus_set_led(ac->art_channel, 0, MUSYCC_LED_GREEN);
		break;
	}

	if (link_state != ifp->if_link_state) {
		s = splsoftnet();
		if (LINK_STATE_IS_UP(link_state))
			ppp->pp_up(ppp);
		else
			ppp->pp_down(ppp);
		splx(s);
	}

	/*
	 * run musycc onesec job
	 */
	musycc_tick(ac->art_channel);

	/*
	 * Schedule another timeout one second from now.
	 */
	timeout_add_sec(&ac->art_onesec, 1);
}

void
art_linkstate(void *arg)
{
	struct art_softc	*ac = arg;
	struct ifnet		*ifp = ac->art_channel->cc_ifp;

	if (LINK_STATE_IS_UP(ifp->if_link_state))
		/* turn red led off */
		ebus_set_led(ac->art_channel, 0, MUSYCC_LED_RED);
	else
		/* turn red led on */
		ebus_set_led(ac->art_channel, 1, MUSYCC_LED_RED);
}

u_int32_t
art_mask_tsmap(u_int mode, u_int32_t tsmap)
{
	switch (mode) {
	case IFM_TDM_E1:
	case IFM_TDM_E1_G704:
	case IFM_TDM_E1_G704_CRC4:
		return (tsmap & ART_E1_MASK);
	case IFM_TDM_T1_AMI:
	case IFM_TDM_T1:
		return (tsmap & ART_T1_MASK);
	default:
		return (tsmap);
	}
}
@


1.21
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_art.c,v 1.20 2013/06/20 12:03:40 mpi Exp $ */
@


1.20
log
@Revert previous and unbreak asr, the new include should be protected.

Reported by naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_art.c,v 1.19 2013/06/20 09:38:24 mpi Exp $ */
a23 1
#include <sys/proc.h>
@


1.19
log
@Allocate the various hook head descriptors as part of the ifnet
structure rather than doing various M_WAITOK allocations during
the *attach() functions, we always rely on them anyway.

ok mikeb@@, uebayasi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_art.c,v 1.18 2010/06/29 07:12:31 matthew Exp $ */
d177 1
a177 1
	    &sc->art_channel->cc_ifp->if_linkstatehooks, 0, art_linkstate, sc);
@


1.18
log
@Interface drivers should use DV_IFNET, not DV_DULL.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_art.c,v 1.17 2009/03/29 21:53:52 sthen Exp $ */
d177 1
a177 1
	    sc->art_channel->cc_ifp->if_linkstatehooks, 0, art_linkstate, sc);
@


1.17
log
@make various strings ("can't map mem space" and similar) more consistent
between instances, saving space in the kernel. feedback from many (some
incorporated, some left for future work).

ok deraadt, kettenis, "why not" miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_art.c,v 1.16 2008/09/10 14:01:22 blambert Exp $ */
d58 1
a58 1
	NULL, "art", DV_DULL
@


1.16
log
@Convert timeout_add() calls using multiples of hz to timeout_add_sec()

Really just the low-hanging fruit of (hopefully) forthcoming timeout
conversions.

ok art@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_art.c,v 1.15 2008/05/13 01:37:26 brad Exp $ */
d87 1
a87 1
		printf(": could not map framer\n");
@


1.15
log
@Use the LINK_STATE_IS_UP macro when checking for the link being UP.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_art.c,v 1.14 2007/09/17 17:34:22 brad Exp $ */
d180 1
a180 1
	timeout_add(&sc->art_onesec, hz);
d419 1
a419 1
	timeout_add(&ac->art_onesec, hz);
@


1.14
log
@- Use a 64-bit int for the baudrate within the ifmedia_baudrate struct and
return a 64-bit int for ifmedia_baudrate().
- Fix consumers of ifmedia_baudrate() to deal with the change.

ok claudio@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_art.c,v 1.13 2006/01/26 16:51:00 claudio Exp $ */
d339 1
a339 1
	if (ifp->if_link_state == LINK_STATE_UP)
d404 1
a404 1
		if (link_state == LINK_STATE_UP)
d428 1
a428 1
	if (ifp->if_link_state == LINK_STATE_UP)
@


1.13
log
@Make T1 work on the dual port version. Time slot map is different than on
the single port T1 version. Most notably T1 uses now timeslots 1-24 and not
0-23 no matter what type of card.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_art.c,v 1.12 2006/01/25 14:45:28 claudio Exp $ */
d265 2
a266 1
	int			 rv, s, baudrate;
d322 1
a322 1
		if_link_state_change(ifp), baudrate;
@


1.12
log
@Time-slot mask are u_int32_t so art_mask_tsmap() should return u_int32_t too.
While there fix a typo in a comment.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_art.c,v 1.11 2005/12/20 15:27:48 claudio Exp $ */
d40 1
a40 1
#define ART_T1_MASK 0x00ffffff
d211 9
d224 6
a229 1
		rv = copyout(&cc->cc_tslots, ifr->ifr_data, sizeof(tsmap));
d278 1
a278 2
	if (IFM_SUBTYPE(ifm->ifm_media) !=
	    IFM_SUBTYPE(ac->art_media) ||
d283 1
a285 1
	}
d287 24
a310 4
	if (IFM_SUBTYPE(ifm->ifm_media) != IFM_SUBTYPE(ac->art_media)) {
		/* adjust timeslot map on media change */
		cc->cc_tslots = art_mask_tsmap(IFM_SUBTYPE(ifm->ifm_media),
		    cc->cc_tslots);
@


1.11
log
@Superfluous stuff.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_art.c,v 1.10 2005/12/19 15:49:53 claudio Exp $ */
d51 1
a51 1
u_int	art_mask_tsmap(u_int, u_int32_t);
d357 1
a357 1
		/* set green led and red let as well */
d402 1
a402 1
u_int
@


1.10
log
@Check or chop the timeslot map if the map or mode is changed. There is no way
you can do 32 timeslots on a T1.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_art.c,v 1.9 2005/10/26 09:26:56 claudio Exp $ */
a29 1
#include <machine/cpu.h>
a30 1
#include <machine/intr.h>
a231 2
		ac = (struct art_softc *)
		    ((struct channel_softc *)ifp->if_softc)->cc_parent;
@


1.9
log
@Adapt art(4) to the new link state handling done by sppp(4).
Now blinkenlights realy work like a charm -- OK cHDLC reports always
linkstate active but that is a problem inside sppp(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: if_art.c,v 1.8 2005/09/22 12:45:07 claudio Exp $ */
d41 3
d53 1
d208 5
d276 3
d280 6
d406 15
@


1.8
log
@Notify sppp about link state changes. This makes PPP encoding work.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d49 1
d164 1
a164 3
	/*
	 * Initialize timeout for statistics update.
	 */
d173 5
a177 3
	/*
	 * Schedule the timeout one second from now.
	 */
d246 1
a246 1
	int			 rv;
d269 9
d290 3
a292 1
	ifmreq->ifm_status = ac->art_status;
d332 1
a332 1
	int			 s, rv, link_state, baudrate, announce = 0;
a333 1
	ac->art_status = IFM_AVALID;
d338 2
a339 3
		/* set led green but ask sppp if red is needed */
		ebus_set_led(ac->art_channel, MUSYCC_LED_GREEN);
		ac->art_status |= IFM_ACTIVE;
d343 2
a344 2
		/* set led green & red */
		ebus_set_led(ac->art_channel,
d349 2
a350 2
		/* set led red */
		ebus_set_led(ac->art_channel, MUSYCC_LED_RED);
a354 1
		ifp->if_link_state = link_state;
a360 14
		announce = 1;
	}

	baudrate = ifmedia_baudrate(ac->art_media);

	if (baudrate != ifp->if_baudrate) {
		ifp->if_baudrate = baudrate;
		announce = 1;
	}

	if (announce) {
		s = splnet();
		if_link_state_change(ifp);
		splx(s);
d372 14
@


1.7
log
@Fix some issues to make the dual port version work this should also fix the
singleport T1 (B8Z2/ESF) mode.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_art.c,v 1.6 2005/08/27 13:18:02 claudio Exp $ */
d180 1
a180 1
/* interface ioctl */ 
d282 1
d319 1
d346 6
d372 1
a372 1
	
@


1.6
log
@Timeout service request in the uncommon case that the port is blocked
(there needs to be correct clocking on the port or all service request
will be ignored). Without the timeout the interface will just hang till
reboot.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_art.c,v 1.5 2005/08/14 22:28:47 claudio Exp $ */
d92 1
d171 1
a171 1
	bt8370_set_frame_mode(sc, IFM_TDM_E1_G704_CRC4, 0);
d264 3
a266 2
		bt8370_set_frame_mode(ac, IFM_SUBTYPE(ifm->ifm_media),
		    IFM_MODE(ifm->ifm_media));
d326 1
a326 1
		ebus_set_led(ac->art_channel->cc_group->mg_hdlc->mc_other, 1);
d332 2
a333 1
		ebus_set_led(ac->art_channel->cc_group->mg_hdlc->mc_other, 3);
d338 1
a338 1
		ebus_set_led(ac->art_channel->cc_group->mg_hdlc->mc_other, 2);
@


1.5
log
@KNF mostly spaces and make the dmesg line a bit shorter.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_art.c,v 1.4 2005/08/14 21:50:49 claudio Exp $ */
d357 5
@


1.4
log
@Kill the musyccbus/ebus device and use musycc for both functions of the
chip. Using two different devices for one card was a stupid idea.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_art.c,v 1.3 2005/08/13 23:52:49 claudio Exp $ */
d79 1
a79 1
	
d81 1
a81 1
	
d98 1
a98 1
		
d219 1
a219 1
	       	rv = sppp_ioctl(ifp, command, data);
d231 1
a231 1
	       	rv = sppp_ioctl(ifp, command, data);
@


1.3
log
@Kill Id tags, OpenBSD ones are enough.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_art.c,v 1.2 2005/08/13 22:58:05 claudio Exp $ */
d324 1
a324 1
		ebus_set_led(ac->art_channel->cc_group->mg_hdlc->mc_ebus, 1);
d330 1
a330 1
		ebus_set_led(ac->art_channel->cc_group->mg_hdlc->mc_ebus, 3);
d335 1
a335 1
		ebus_set_led(ac->art_channel->cc_group->mg_hdlc->mc_ebus, 2);
@


1.2
log
@Remove some superfluous output in dmesg line.
Idea deraadt@@
@
text
@d1 1
a1 2
/*	$OpenBSD: if_art.c,v 1.1 2005/08/13 22:49:48 claudio Exp $ */
/*	$Id: if_art.c,v 1.1 2005/08/13 22:49:48 claudio Exp $ */
@


1.1
log
@Driver for the Accoom Networks Artery T1/E1 PCI cards.
deraadt@@ "yeah, put it in."
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$Id: if_art.c,v 1.12 2005/08/12 17:34:10 cjeker Exp $ */
d158 1
a158 1
	printf(": E1/T1 framer\n");
@

