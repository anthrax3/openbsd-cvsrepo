head	1.10;
access;
symbols
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.12
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.10
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.8
	OPENBSD_5_0:1.8.0.6
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.4
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.6.0.6
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.8
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.4
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.5.0.12
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.10
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.8
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.6
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.14
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.12
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.10
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	SMP:1.2.0.2;
locks; strict;
comment	@ * @;


1.10
date	2013.11.04.14.07.14;	author deraadt;	state dead;
branches;
next	1.9;

1.9
date	2013.05.30.16.15.02;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2010.07.13.13.07.35;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.08.00.23.53;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.26.05.42.17;	author ray;	state Exp;
branches;
next	1.5;

1.5
date	2005.08.09.04.10.12;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.31.05.25.10;	author nate;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.25.10.13.29;	author art;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2001.06.26.06.05.55;	author niklas;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2001.06.25.23.12.52;	author niklas;	state Exp;
branches;
next	;

1.2.2.1
date	2001.10.31.03.22.46;	author nate;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2003.03.28.00.38.23;	author niklas;	state Exp;
branches;
next	;

1.3.4.1
date	2002.06.11.03.42.26;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@remove iop(4) driver.  it is entirely unmaintained and supports something
which basically doesn't exist at all.
reminded about it by brad
@
text
@/*	$OpenBSD: iop_pci.c,v 1.9 2013/05/30 16:15:02 deraadt Exp $	*/
/*	$NetBSD: iop_pci.c,v 1.4 2001/03/20 13:21:00 ad Exp $	*/

/*-
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Andrew Doran.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * PCI front-end for `iop' driver.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/queue.h>

#include <machine/endian.h>
#include <machine/bus.h>

#include <dev/pci/pcidevs.h>
#include <dev/pci/pcivar.h>

#include <dev/i2o/i2o.h>
#include <dev/i2o/iopreg.h>
#include <dev/i2o/iopio.h>
#include <dev/i2o/iopvar.h>

#define	PCI_INTERFACE_I2O_POLLED	0x00
#define	PCI_INTERFACE_I2O_INTRDRIVEN	0x01

void	iop_pci_attach(struct device *, struct device *, void *);
int	iop_pci_match(struct device *, void *, void *);
int	iop_activate(struct device *, int);

struct cfattach iop_pci_ca = {
	sizeof(struct iop_softc), iop_pci_match, iop_pci_attach,
	NULL, iop_activate
};

int
iop_pci_match(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
{
	struct pci_attach_args *pa;

	pa = aux;

	/* 
	 * Look for an "intelligent I/O processor" that adheres to the I2O
	 * specification.  Ignore the device if it doesn't support interrupt
	 * driven operation.
	 */
	if (PCI_CLASS(pa->pa_class) == PCI_CLASS_I2O &&
	    PCI_SUBCLASS(pa->pa_class) == PCI_SUBCLASS_I2O_STANDARD &&
	    PCI_INTERFACE(pa->pa_class) == PCI_INTERFACE_I2O_INTRDRIVEN)
		return (1);

	return (0);
}

void
iop_pci_attach(struct device *parent, struct device *self, void *aux)
{
	struct pci_attach_args *pa;
	struct iop_softc *sc;
	pci_chipset_tag_t pc;
	pci_intr_handle_t ih;
	const char *intrstr;
	pcireg_t reg;
	int i;

	sc = (struct iop_softc *)self;
	pa = (struct pci_attach_args *)aux;
	pc = pa->pa_pc;

	/*
	 * The kernel always uses the first memory mapping to communicate
	 * with the IOP.
	 */
	for (i = PCI_MAPREG_START; i < PCI_MAPREG_END; i += 4) {
		reg = pci_conf_read(pc, pa->pa_tag, i);
		if (PCI_MAPREG_TYPE(reg) == PCI_MAPREG_TYPE_MEM)
			break;
	}
	if (i == PCI_MAPREG_END) {
		printf(": can't find mapping\n");
		return;
	}

	/* Map the register window. */
	if (pci_mapreg_map(pa, i, PCI_MAPREG_TYPE_MEM, 0, &sc->sc_iot,
	    &sc->sc_ioh, NULL, NULL, 0x40000)) {
		printf(": can't map register window\n");
		return;
	}

	sc->sc_dmat = pa->pa_dmat;
	sc->sc_bus_memt = pa->pa_memt;
	sc->sc_bus_iot = pa->pa_iot;

	/* Map and establish the interrupt.  XXX IPL_BIO. */
	if (pci_intr_map(pa, &ih)) {
		printf(": can't map interrupt\n");
		return;
	}
	intrstr = pci_intr_string(pc, ih);
	sc->sc_ih = pci_intr_establish(pc, ih, IPL_BIO, iop_intr, sc,
	    sc->sc_dv.dv_xname);
	if (sc->sc_ih == NULL) {
		printf(": can't establish interrupt");
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
		return;
	}

	/* Attach to the bus-independent code. */
	iop_init(sc, intrstr);
}

int
iop_activate(struct device *self, int act)
{
	int ret = 0;

	switch (act) {
	case DVACT_QUIESCE:
		ret = config_activate_children(self, act);
		break;
	case DVACT_SUSPEND:
		ret = config_activate_children(self, act);
		break;
	case DVACT_POWERDOWN:
		ret = config_activate_children(self, act);
		iop_shutdown(self);
		break;
	case DVACT_RESUME:
		ret = config_activate_children(self, act);
		break;
	}

	return (ret);
}
@


1.9
log
@Enforce ca_activate tree-walks over the entire heirarchy for all events,
cleaning up some shutdown-hook related code on the way.
(A few drivers related to sparc are still skipped at kettenis' request)
ok kettenis mlarkin, tested by many others too
@
text
@d1 1
a1 1
/*	$OpenBSD: iop_pci.c,v 1.8 2010/07/13 13:07:35 kettenis Exp $	*/
@


1.8
log
@Fix dmesg printing.

ok krw@@, claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iop_pci.c,v 1.7 2010/04/08 00:23:53 tedu Exp $	*/
d59 1
d62 2
a63 1
	sizeof(struct iop_softc), iop_pci_match, iop_pci_attach
d147 24
@


1.7
log
@these files don't need to include proc.h anymore.  ok oga for agp
@
text
@d1 1
a1 1
/*	$OpenBSD: iop_pci.c,v 1.6 2008/06/26 05:42:17 ray Exp $	*/
a100 1
	printf(": ");
d112 1
a112 1
		printf("can't find mapping\n");
d119 1
a119 1
		printf("%s: can't map register window\n", sc->sc_dv.dv_xname);
d129 1
a129 1
		printf("can't map interrupt\n");
d136 1
a136 1
		printf("can't establish interrupt");
@


1.6
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iop_pci.c,v 1.5 2005/08/09 04:10:12 mickey Exp $	*/
a41 1
#include <sys/proc.h>
@


1.5
log
@do not set PCI_COMMAND_MASTER_ENABLE explicitly as it's already set in pcisubmatch(); kettenis@@ testing; brad@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: iop_pci.c,v 1.4 2002/03/31 05:25:10 nate Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.4
log
@Limit pci register map size to 256k
ok deraadt, art, mickey
@
text
@d1 1
a1 1
/*	$OpenBSD: iop_pci.c,v 1.3 2001/08/25 10:13:29 art Exp $	*/
a134 5

	/* Enable the device. */
	reg = pci_conf_read(pa->pa_pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);
	pci_conf_write(pa->pa_pc, pa->pa_tag, PCI_COMMAND_STATUS_REG,
		       reg | PCI_COMMAND_MASTER_ENABLE);
@


1.3
log
@Change pci_intr_map to take pci_attach_args as an argument.
All callers actually took all arguments to pci_intr_map from pci_attach_args
structs, so this simplifies code.
This also allows more complicated interrupt assignment schemes like the one
on sparc64.

This makes sparc64 pci interrupts work.

Inspired by the same change in NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: iop_pci.c,v 1.2 2001/06/26 06:05:55 niklas Exp $	*/
d127 1
a127 1
	    &sc->sc_ioh, NULL, NULL, 0)) {
@


1.3.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: iop_pci.c,v 1.3 2001/08/25 10:13:29 art Exp $	*/
d127 1
a127 1
	    &sc->sc_ioh, NULL, NULL, 0x40000)) {
@


1.2
log
@remove statics
@
text
@d1 1
a1 1
/*	$OpenBSD: iop_pci.c,v 1.1 2001/06/25 23:12:52 niklas Exp $	*/
d142 1
a142 2
	if (pci_intr_map(pa->pa_pc, pa->pa_intrtag, pa->pa_intrpin,
	    pa->pa_intrline, &ih)) {
@


1.2.2.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: iop_pci.c,v 1.2 2001/06/26 06:05:55 niklas Exp $	*/
d142 2
a143 1
	if (pci_intr_map(pa, &ih)) {
@


1.2.2.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d127 1
a127 1
	    &sc->sc_ioh, NULL, NULL, 0x40000)) {
@


1.1
log
@Forgot the PCI bus attachment, from NetBSD, hacked by mickey
@
text
@d1 1
a1 1
/*	$OpenBSD: iop_pci.c,v 1.4 2001/03/20 13:21:00 ad Exp $	*/
d65 2
a66 2
static void	iop_pci_attach(struct device *, struct device *, void *);
static int	iop_pci_match(struct device *, void *, void *);
d72 1
a72 1
static int
d95 1
a95 1
static void
@

