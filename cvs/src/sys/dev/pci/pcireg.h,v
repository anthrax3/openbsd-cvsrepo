head	1.55;
access;
symbols
	OPENBSD_6_2_BASE:1.55
	OPENBSD_6_1:1.53.0.4
	OPENBSD_6_1_BASE:1.53
	OPENBSD_6_0:1.50.0.4
	OPENBSD_6_0_BASE:1.50
	OPENBSD_5_9:1.48.0.2
	OPENBSD_5_9_BASE:1.48
	OPENBSD_5_8:1.48.0.4
	OPENBSD_5_8_BASE:1.48
	OPENBSD_5_7:1.47.0.6
	OPENBSD_5_7_BASE:1.47
	OPENBSD_5_6:1.47.0.4
	OPENBSD_5_6_BASE:1.47
	OPENBSD_5_5:1.45.0.4
	OPENBSD_5_5_BASE:1.45
	OPENBSD_5_4:1.44.0.2
	OPENBSD_5_4_BASE:1.44
	OPENBSD_5_3:1.43.0.4
	OPENBSD_5_3_BASE:1.43
	OPENBSD_5_2:1.43.0.2
	OPENBSD_5_2_BASE:1.43
	OPENBSD_5_1_BASE:1.42
	OPENBSD_5_1:1.42.0.4
	OPENBSD_5_0:1.42.0.2
	OPENBSD_5_0_BASE:1.42
	OPENBSD_4_9:1.39.0.2
	OPENBSD_4_9_BASE:1.39
	OPENBSD_4_8:1.36.0.6
	OPENBSD_4_8_BASE:1.36
	OPENBSD_4_7:1.36.0.2
	OPENBSD_4_7_BASE:1.36
	OPENBSD_4_6:1.36.0.4
	OPENBSD_4_6_BASE:1.36
	OPENBSD_4_5:1.35.0.2
	OPENBSD_4_5_BASE:1.35
	OPENBSD_4_4:1.34.0.4
	OPENBSD_4_4_BASE:1.34
	OPENBSD_4_3:1.34.0.2
	OPENBSD_4_3_BASE:1.34
	OPENBSD_4_2:1.32.0.6
	OPENBSD_4_2_BASE:1.32
	OPENBSD_4_1:1.32.0.4
	OPENBSD_4_1_BASE:1.32
	OPENBSD_4_0:1.32.0.2
	OPENBSD_4_0_BASE:1.32
	OPENBSD_3_9:1.28.0.2
	OPENBSD_3_9_BASE:1.28
	OPENBSD_3_8:1.27.0.4
	OPENBSD_3_8_BASE:1.27
	OPENBSD_3_7:1.27.0.2
	OPENBSD_3_7_BASE:1.27
	OPENBSD_3_6:1.26.0.4
	OPENBSD_3_6_BASE:1.26
	SMP_SYNC_A:1.26
	SMP_SYNC_B:1.26
	OPENBSD_3_5:1.26.0.2
	OPENBSD_3_5_BASE:1.26
	OPENBSD_3_4:1.23.0.2
	OPENBSD_3_4_BASE:1.23
	UBC_SYNC_A:1.22
	OPENBSD_3_3:1.20.0.2
	OPENBSD_3_3_BASE:1.20
	OPENBSD_3_2:1.19.0.2
	OPENBSD_3_2_BASE:1.19
	OPENBSD_3_1:1.18.0.2
	OPENBSD_3_1_BASE:1.18
	UBC_SYNC_B:1.19
	UBC:1.17.0.4
	UBC_BASE:1.17
	OPENBSD_3_0:1.17.0.2
	OPENBSD_3_0_BASE:1.17
	OPENBSD_2_9_BASE:1.16
	OPENBSD_2_9:1.16.0.2
	OPENBSD_2_8:1.14.0.2
	OPENBSD_2_8_BASE:1.14
	OPENBSD_2_7:1.12.0.4
	OPENBSD_2_7_BASE:1.12
	SMP:1.12.0.2
	SMP_BASE:1.12
	kame_19991208:1.12
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.10.0.2
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.55
date	2017.08.09.21.42.44;	author mlarkin;	state Exp;
branches;
next	1.54;
commitid	ymLXTEfjltdL3fNu;

1.54
date	2017.06.12.03.00.26;	author kevlo;	state Exp;
branches;
next	1.53;
commitid	HNzvhmk7EPmlGDME;

1.53
date	2017.03.25.07.33.46;	author mlarkin;	state Exp;
branches;
next	1.52;
commitid	uiM2dGM4qcsBpBwN;

1.52
date	2017.03.22.07.21.39;	author jsg;	state Exp;
branches;
next	1.51;
commitid	8YRrqg9ezwqcRglv;

1.51
date	2017.03.16.22.05.44;	author deraadt;	state Exp;
branches;
next	1.50;
commitid	2tVi7fpPLbHkccrD;

1.50
date	2016.06.02.21.01.51;	author kettenis;	state Exp;
branches;
next	1.49;
commitid	N0dJSlBj0uxR7upW;

1.49
date	2016.05.04.14.30.00;	author kettenis;	state Exp;
branches;
next	1.48;
commitid	n9OfCKyY3NAvSMg8;

1.48
date	2015.06.02.15.26.19;	author mpi;	state Exp;
branches;
next	1.47;
commitid	vDzcnQSW2uaghdZt;

1.47
date	2014.04.27.14.55.09;	author stsp;	state Exp;
branches;
next	1.46;

1.46
date	2014.04.09.06.36.33;	author dlg;	state Exp;
branches;
next	1.45;

1.45
date	2013.08.26.09.50.47;	author jsg;	state Exp;
branches;
next	1.44;

1.44
date	2013.06.03.22.01.57;	author mikeb;	state Exp;
branches;
next	1.43;

1.43
date	2012.05.13.13.47.52;	author kettenis;	state Exp;
branches;
next	1.42;

1.42
date	2011.06.19.12.02.23;	author kettenis;	state Exp;
branches;
next	1.41;

1.41
date	2011.05.30.19.09.46;	author kettenis;	state Exp;
branches;
next	1.40;

1.40
date	2011.05.14.09.57.56;	author kettenis;	state Exp;
branches;
next	1.39;

1.39
date	2010.12.05.15.15.14;	author kettenis;	state Exp;
branches;
next	1.38;

1.38
date	2010.12.04.17.06.29;	author miod;	state Exp;
branches;
next	1.37;

1.37
date	2010.12.01.18.47.51;	author damien;	state Exp;
branches;
next	1.36;

1.36
date	2009.05.28.15.41.48;	author damien;	state Exp;
branches;
next	1.35;

1.35
date	2008.11.25.18.49.49;	author damien;	state Exp;
branches;
next	1.34;

1.34
date	2007.11.26.13.20.28;	author jsg;	state Exp;
branches;
next	1.33;

1.33
date	2007.11.25.01.36.48;	author kettenis;	state Exp;
branches;
next	1.32;

1.32
date	2006.07.31.11.06.33;	author mickey;	state Exp;
branches;
next	1.31;

1.31
date	2006.06.01.11.17.31;	author brad;	state Exp;
branches;
next	1.30;

1.30
date	2006.05.28.17.21.14;	author uwe;	state Exp;
branches;
next	1.29;

1.29
date	2006.05.11.23.29.12;	author brad;	state Exp;
branches;
next	1.28;

1.28
date	2005.12.31.04.11.40;	author dlg;	state Exp;
branches;
next	1.27;

1.27
date	2004.11.16.00.31.02;	author brad;	state Exp;
branches;
next	1.26;

1.26
date	2003.12.06.14.40.33;	author grange;	state Exp;
branches;
next	1.25;

1.25
date	2003.11.16.20.30.06;	author avsm;	state Exp;
branches;
next	1.24;

1.24
date	2003.10.06.16.04.45;	author fgsch;	state Exp;
branches;
next	1.23;

1.23
date	2003.08.27.20.59.15;	author mickey;	state Exp;
branches;
next	1.22;

1.22
date	2003.04.02.21.40.35;	author grange;	state Exp;
branches;
next	1.21;

1.21
date	2003.04.01.05.03.52;	author grange;	state Exp;
branches;
next	1.20;

1.20
date	2003.02.08.18.24.53;	author jason;	state Exp;
branches;
next	1.19;

1.19
date	2002.07.13.18.20.26;	author mickey;	state Exp;
branches;
next	1.18;

1.18
date	2002.04.06.04.29.43;	author jason;	state Exp;
branches;
next	1.17;

1.17
date	2001.05.08.19.47.43;	author mickey;	state Exp;
branches
	1.17.4.1;
next	1.16;

1.16
date	2001.02.09.21.13.29;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	2000.11.08.14.17.17;	author art;	state Exp;
branches;
next	1.14;

1.14
date	2000.09.20.17.39.05;	author niklas;	state Exp;
branches;
next	1.13;

1.13
date	2000.08.02.02.25.14;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	99.10.26.17.43.58;	author downsj;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	99.07.18.03.20.18;	author csapuntz;	state Exp;
branches;
next	1.10;

1.10
date	99.01.30.23.24.22;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	98.07.12.04.22.09;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	98.04.25.00.17.44;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.02.03.19.47.13;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	98.02.03.19.42.05;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.11.28.23.28.13;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.10.31.03.29.11;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.22.25.49;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.18.23.48.07;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.40;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.40;	author deraadt;	state Exp;
branches;
next	;

1.12.2.1
date	2001.05.14.22.25.56;	author niklas;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2001.07.04.10.42.59;	author niklas;	state Exp;
branches;
next	1.12.2.3;

1.12.2.3
date	2003.03.28.00.38.24;	author niklas;	state Exp;
branches;
next	1.12.2.4;

1.12.2.4
date	2003.05.13.19.35.09;	author ho;	state Exp;
branches;
next	1.12.2.5;

1.12.2.5
date	2004.02.19.10.56.29;	author niklas;	state Exp;
branches;
next	;

1.17.4.1
date	2002.06.11.03.42.27;	author art;	state Exp;
branches;
next	1.17.4.2;

1.17.4.2
date	2002.10.29.00.33.29;	author art;	state Exp;
branches;
next	1.17.4.3;

1.17.4.3
date	2003.05.19.22.19.08;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.55
log
@vmd: allow guest PCI interrupt line reassignment.

I also added a couple config space register names to pcireg.h to try and
reduce the use of magic numbers in vmd/pci.c

ok pd@@
@
text
@/*	$OpenBSD: pcireg.h,v 1.54 2017/06/12 03:00:26 kevlo Exp $	*/
/*	$NetBSD: pcireg.h,v 1.26 2000/05/10 16:58:42 thorpej Exp $	*/

/*
 * Copyright (c) 1995, 1996 Christopher G. Demetriou.  All rights reserved.
 * Copyright (c) 1994, 1996 Charles Hannum.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Charles Hannum.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _DEV_PCI_PCIREG_H_
#define	_DEV_PCI_PCIREG_H_

/*
 * Standardized PCI configuration information
 *
 * XXX This is not complete.
 */

#define	PCI_CONFIG_SPACE_SIZE		0x100
#define	PCIE_CONFIG_SPACE_SIZE		0x1000

/*
 * Device identification register; contains a vendor ID and a device ID.
 */
#define	PCI_ID_REG			0x00

typedef u_int16_t pci_vendor_id_t;
typedef u_int16_t pci_product_id_t;

#define	PCI_VENDOR_SHIFT			0
#define	PCI_VENDOR_MASK				0xffff
#define	PCI_VENDOR(id) \
	    (((id) >> PCI_VENDOR_SHIFT) & PCI_VENDOR_MASK)

#define	PCI_PRODUCT_SHIFT			16
#define	PCI_PRODUCT_MASK			0xffff
#define	PCI_PRODUCT(id) \
	    (((id) >> PCI_PRODUCT_SHIFT) & PCI_PRODUCT_MASK)

#define PCI_ID_CODE(vid,pid) \
	((((vid) & PCI_VENDOR_MASK) << PCI_VENDOR_SHIFT) | \
	 (((pid) & PCI_PRODUCT_MASK) << PCI_PRODUCT_SHIFT))

/*
 * Command and status register.
 */
#define	PCI_COMMAND_STATUS_REG			0x04

#define	PCI_COMMAND_IO_ENABLE			0x00000001
#define	PCI_COMMAND_MEM_ENABLE			0x00000002
#define	PCI_COMMAND_MASTER_ENABLE		0x00000004
#define	PCI_COMMAND_SPECIAL_ENABLE		0x00000008
#define	PCI_COMMAND_INVALIDATE_ENABLE		0x00000010
#define	PCI_COMMAND_PALETTE_ENABLE		0x00000020
#define	PCI_COMMAND_PARITY_ENABLE		0x00000040
#define	PCI_COMMAND_STEPPING_ENABLE		0x00000080
#define	PCI_COMMAND_SERR_ENABLE			0x00000100
#define	PCI_COMMAND_BACKTOBACK_ENABLE		0x00000200
#define PCI_COMMAND_INTERRUPT_DISABLE		0x00000400

#define	PCI_STATUS_CAPLIST_SUPPORT		0x00100000
#define	PCI_STATUS_66MHZ_SUPPORT		0x00200000
#define	PCI_STATUS_UDF_SUPPORT			0x00400000
#define	PCI_STATUS_BACKTOBACK_SUPPORT		0x00800000
#define	PCI_STATUS_PARITY_ERROR			0x01000000
#define	PCI_STATUS_DEVSEL_FAST			0x00000000
#define	PCI_STATUS_DEVSEL_MEDIUM		0x02000000
#define	PCI_STATUS_DEVSEL_SLOW			0x04000000
#define	PCI_STATUS_DEVSEL_MASK			0x06000000
#define	PCI_STATUS_TARGET_TARGET_ABORT		0x08000000
#define	PCI_STATUS_MASTER_TARGET_ABORT		0x10000000
#define	PCI_STATUS_MASTER_ABORT			0x20000000
#define	PCI_STATUS_SPECIAL_ERROR		0x40000000
#define	PCI_STATUS_PARITY_DETECT		0x80000000

#define	PCI_COMMAND_STATUS_BITS \
    ("\020\01IO\02MEM\03MASTER\04SPECIAL\05INVALIDATE\06PALETTE\07PARITY"\
     "\010STEPPING\011SERR\012BACKTOBACK\025CAPLIST\026CLK66\027UDF"\
     "\030BACK2BACK_STAT\031PARITY_STAT\032DEVSEL_MEDIUM\033DEVSEL_SLOW"\
     "\034TARGET_TARGET_ABORT\035MASTER_TARGET_ABORT\036MASTER_ABORT"\
     "\037SPECIAL_ERROR\040PARITY_DETECT")
/*
 * PCI Class and Revision Register; defines type and revision of device.
 */
#define	PCI_CLASS_REG			0x08

typedef u_int8_t pci_class_t;
typedef u_int8_t pci_subclass_t;
typedef u_int8_t pci_interface_t;
typedef u_int8_t pci_revision_t;

#define	PCI_CLASS_SHIFT				24
#define	PCI_CLASS_MASK				0xff
#define	PCI_CLASS(cr) \
	    (((cr) >> PCI_CLASS_SHIFT) & PCI_CLASS_MASK)

#define	PCI_SUBCLASS_SHIFT			16
#define	PCI_SUBCLASS_MASK			0xff
#define	PCI_SUBCLASS(cr) \
	    (((cr) >> PCI_SUBCLASS_SHIFT) & PCI_SUBCLASS_MASK)

#define	PCI_INTERFACE_SHIFT			8
#define	PCI_INTERFACE_MASK			0xff
#define	PCI_INTERFACE(cr) \
	    (((cr) >> PCI_INTERFACE_SHIFT) & PCI_INTERFACE_MASK)

#define	PCI_REVISION_SHIFT			0
#define	PCI_REVISION_MASK			0xff
#define	PCI_REVISION(cr) \
	    (((cr) >> PCI_REVISION_SHIFT) & PCI_REVISION_MASK)

/* base classes */
#define	PCI_CLASS_PREHISTORIC			0x00
#define	PCI_CLASS_MASS_STORAGE			0x01
#define	PCI_CLASS_NETWORK			0x02
#define	PCI_CLASS_DISPLAY			0x03
#define	PCI_CLASS_MULTIMEDIA			0x04
#define	PCI_CLASS_MEMORY			0x05
#define	PCI_CLASS_BRIDGE			0x06
#define	PCI_CLASS_COMMUNICATIONS		0x07
#define	PCI_CLASS_SYSTEM			0x08
#define	PCI_CLASS_INPUT				0x09
#define	PCI_CLASS_DOCK				0x0a
#define	PCI_CLASS_PROCESSOR			0x0b
#define	PCI_CLASS_SERIALBUS			0x0c
#define	PCI_CLASS_WIRELESS			0x0d
#define	PCI_CLASS_I2O				0x0e
#define	PCI_CLASS_SATCOM			0x0f
#define	PCI_CLASS_CRYPTO			0x10
#define	PCI_CLASS_DASP				0x11
#define	PCI_CLASS_ACCELERATOR			0x12
#define	PCI_CLASS_INSTRUMENTATION		0x13
#define	PCI_CLASS_UNDEFINED			0xff

/* 0x00 prehistoric subclasses */
#define	PCI_SUBCLASS_PREHISTORIC_MISC		0x00
#define	PCI_SUBCLASS_PREHISTORIC_VGA		0x01

/* 0x01 mass storage subclasses */
#define	PCI_SUBCLASS_MASS_STORAGE_SCSI		0x00
#define	PCI_SUBCLASS_MASS_STORAGE_IDE		0x01
#define	PCI_SUBCLASS_MASS_STORAGE_FLOPPY	0x02
#define	PCI_SUBCLASS_MASS_STORAGE_IPI		0x03
#define	PCI_SUBCLASS_MASS_STORAGE_RAID		0x04
#define	PCI_SUBCLASS_MASS_STORAGE_ATA		0x05
#define	PCI_SUBCLASS_MASS_STORAGE_SATA		0x06
#define	PCI_SUBCLASS_MASS_STORAGE_SAS		0x07
#define	PCI_SUBCLASS_MASS_STORAGE_NVM		0x08
#define	PCI_SUBCLASS_MASS_STORAGE_UFS		0x09
#define	PCI_SUBCLASS_MASS_STORAGE_MISC		0x80

/* 0x02 network subclasses */
#define	PCI_SUBCLASS_NETWORK_ETHERNET		0x00
#define	PCI_SUBCLASS_NETWORK_TOKENRING		0x01
#define	PCI_SUBCLASS_NETWORK_FDDI		0x02
#define	PCI_SUBCLASS_NETWORK_ATM		0x03
#define	PCI_SUBCLASS_NETWORK_ISDN		0x04
#define	PCI_SUBCLASS_NETWORK_WORLDFIP		0x05
#define	PCI_SUBCLASS_NETWORK_PCIMGMULTICOMP	0x06
#define	PCI_SUBCLASS_NETWORK_INFINIBAND		0x07
#define	PCI_SUBCLASS_NETWORK_MISC		0x80

/* 0x03 display subclasses */
#define	PCI_SUBCLASS_DISPLAY_VGA		0x00
#define	PCI_SUBCLASS_DISPLAY_XGA		0x01
#define	PCI_SUBCLASS_DISPLAY_3D			0x02
#define	PCI_SUBCLASS_DISPLAY_MISC		0x80

/* 0x04 multimedia subclasses */
#define	PCI_SUBCLASS_MULTIMEDIA_VIDEO		0x00
#define	PCI_SUBCLASS_MULTIMEDIA_AUDIO		0x01
#define	PCI_SUBCLASS_MULTIMEDIA_TELEPHONY	0x02
#define	PCI_SUBCLASS_MULTIMEDIA_HDAUDIO		0x03
#define	PCI_SUBCLASS_MULTIMEDIA_MISC		0x80

/* 0x05 memory subclasses */
#define	PCI_SUBCLASS_MEMORY_RAM			0x00
#define	PCI_SUBCLASS_MEMORY_FLASH		0x01
#define	PCI_SUBCLASS_MEMORY_MISC		0x80

/* 0x06 bridge subclasses */
#define	PCI_SUBCLASS_BRIDGE_HOST		0x00
#define	PCI_SUBCLASS_BRIDGE_ISA			0x01
#define	PCI_SUBCLASS_BRIDGE_EISA		0x02
#define	PCI_SUBCLASS_BRIDGE_MC			0x03
#define	PCI_SUBCLASS_BRIDGE_PCI			0x04
#define	PCI_SUBCLASS_BRIDGE_PCMCIA		0x05
#define	PCI_SUBCLASS_BRIDGE_NUBUS		0x06
#define	PCI_SUBCLASS_BRIDGE_CARDBUS		0x07
#define	PCI_SUBCLASS_BRIDGE_RACEWAY		0x08
#define	PCI_SUBCLASS_BRIDGE_STPCI		0x09
#define	PCI_SUBCLASS_BRIDGE_INFINIBAND		0x0a
#define	PCI_SUBCLASS_BRIDGE_AS			0x0b
#define	PCI_SUBCLASS_BRIDGE_MISC		0x80

/* 0x07 communications subclasses */
#define	PCI_SUBCLASS_COMMUNICATIONS_SERIAL	0x00
#define	PCI_SUBCLASS_COMMUNICATIONS_PARALLEL	0x01
#define	PCI_SUBCLASS_COMMUNICATIONS_MPSERIAL	0x02
#define	PCI_SUBCLASS_COMMUNICATIONS_MODEM	0x03
#define	PCI_SUBCLASS_COMMUNICATIONS_GPIB	0x04
#define	PCI_SUBCLASS_COMMUNICATIONS_SMARTCARD	0x05
#define	PCI_SUBCLASS_COMMUNICATIONS_MISC	0x80

/* 0x08 system subclasses */
#define	PCI_SUBCLASS_SYSTEM_PIC			0x00
#define	PCI_SUBCLASS_SYSTEM_DMA			0x01
#define	PCI_SUBCLASS_SYSTEM_TIMER		0x02
#define	PCI_SUBCLASS_SYSTEM_RTC			0x03
#define	PCI_SUBCLASS_SYSTEM_PCIHOTPLUG		0x04
#define	PCI_SUBCLASS_SYSTEM_SDHC		0x05
#define	PCI_SUBCLASS_SYSTEM_IOMMU		0x06
#define	PCI_SUBCLASS_SYSTEM_ROOTCOMPEVENT	0x07
#define	PCI_SUBCLASS_SYSTEM_MISC		0x80

/* 0x09 input subclasses */
#define	PCI_SUBCLASS_INPUT_KEYBOARD		0x00
#define	PCI_SUBCLASS_INPUT_DIGITIZER		0x01
#define	PCI_SUBCLASS_INPUT_MOUSE		0x02
#define	PCI_SUBCLASS_INPUT_SCANNER		0x03
#define	PCI_SUBCLASS_INPUT_GAMEPORT		0x04
#define	PCI_SUBCLASS_INPUT_MISC			0x80

/* 0x0a dock subclasses */
#define	PCI_SUBCLASS_DOCK_GENERIC		0x00
#define	PCI_SUBCLASS_DOCK_MISC			0x80

/* 0x0b processor subclasses */
#define	PCI_SUBCLASS_PROCESSOR_386		0x00
#define	PCI_SUBCLASS_PROCESSOR_486		0x01
#define	PCI_SUBCLASS_PROCESSOR_PENTIUM		0x02
#define	PCI_SUBCLASS_PROCESSOR_ALPHA		0x10
#define	PCI_SUBCLASS_PROCESSOR_POWERPC		0x20
#define	PCI_SUBCLASS_PROCESSOR_MIPS		0x30
#define	PCI_SUBCLASS_PROCESSOR_COPROC		0x40

/* 0x0c serial bus subclasses */
#define	PCI_SUBCLASS_SERIALBUS_FIREWIRE		0x00
#define	PCI_SUBCLASS_SERIALBUS_ACCESS		0x01
#define	PCI_SUBCLASS_SERIALBUS_SSA		0x02
#define	PCI_SUBCLASS_SERIALBUS_USB		0x03
#define	PCI_SUBCLASS_SERIALBUS_FIBER		0x04
#define	PCI_SUBCLASS_SERIALBUS_SMBUS		0x05
#define	PCI_SUBCLASS_SERIALBUS_INFINIBAND	0x06
#define	PCI_SUBCLASS_SERIALBUS_IPMI		0x07
#define	PCI_SUBCLASS_SERIALBUS_SERCOS		0x08
#define	PCI_SUBCLASS_SERIALBUS_CANBUS		0x09

/* 0x0d wireless subclasses */
#define	PCI_SUBCLASS_WIRELESS_IRDA		0x00
#define	PCI_SUBCLASS_WIRELESS_CONSUMERIR	0x01
#define	PCI_SUBCLASS_WIRELESS_RF		0x10
#define	PCI_SUBCLASS_WIRELESS_BLUETOOTH		0x11
#define	PCI_SUBCLASS_WIRELESS_BROADBAND		0x12
#define	PCI_SUBCLASS_WIRELESS_802_11A		0x20
#define	PCI_SUBCLASS_WIRELESS_802_11B		0x21
#define	PCI_SUBCLASS_WIRELESS_MISC		0x80

/* 0x0e I2O (Intelligent I/O) subclasses */
#define	PCI_SUBCLASS_I2O_STANDARD		0x00

/* 0x0f satellite communication subclasses */
/*	PCI_SUBCLASS_SATCOM_???			0x00    / * XXX ??? */
#define	PCI_SUBCLASS_SATCOM_TV			0x01
#define	PCI_SUBCLASS_SATCOM_AUDIO		0x02
#define	PCI_SUBCLASS_SATCOM_VOICE		0x03
#define	PCI_SUBCLASS_SATCOM_DATA		0x04

/* 0x10 encryption/decryption subclasses */
#define	PCI_SUBCLASS_CRYPTO_NETCOMP		0x00
#define	PCI_SUBCLASS_CRYPTO_ENTERTAINMENT	0x10
#define	PCI_SUBCLASS_CRYPTO_MISC		0x80

/* 0x11 data acquisition and signal processing subclasses */
#define	PCI_SUBCLASS_DASP_DPIO			0x00
#define	PCI_SUBCLASS_DASP_TIMEFREQ		0x01
#define	PCI_SUBCLASS_DASP_SYNC			0x10
#define	PCI_SUBCLASS_DASP_MGMT			0x20
#define	PCI_SUBCLASS_DASP_MISC			0x80

/*
 * PCI BIST/Header Type/Latency Timer/Cache Line Size Register.
 */
#define	PCI_BHLC_REG			0x0c

#define	PCI_BIST_SHIFT				24
#define	PCI_BIST_MASK				0xff
#define	PCI_BIST(bhlcr) \
	    (((bhlcr) >> PCI_BIST_SHIFT) & PCI_BIST_MASK)

#define	PCI_HDRTYPE_SHIFT			16
#define	PCI_HDRTYPE_MASK			0xff
#define	PCI_HDRTYPE(bhlcr) \
	    (((bhlcr) >> PCI_HDRTYPE_SHIFT) & PCI_HDRTYPE_MASK)

#define PCI_HDRTYPE_TYPE(bhlcr) \
	    (PCI_HDRTYPE(bhlcr) & 0x7f)
#define	PCI_HDRTYPE_MULTIFN(bhlcr) \
	    ((PCI_HDRTYPE(bhlcr) & 0x80) != 0)

#define	PCI_LATTIMER_SHIFT			8
#define	PCI_LATTIMER_MASK			0xff
#define	PCI_LATTIMER(bhlcr) \
	    (((bhlcr) >> PCI_LATTIMER_SHIFT) & PCI_LATTIMER_MASK)

#define	PCI_CACHELINE_SHIFT			0
#define	PCI_CACHELINE_MASK			0xff
#define	PCI_CACHELINE(bhlcr) \
	    (((bhlcr) >> PCI_CACHELINE_SHIFT) & PCI_CACHELINE_MASK)

/* config registers for header type 0 devices */

#define PCI_MAPS	0x10
#define PCI_CARDBUSCIS	0x28
#define PCI_SUBVEND_0	0x2c
#define PCI_SUBDEV_0	0x2e
#define PCI_EXROMADDR_0	0x30
#define PCI_INTLINE	0x3c
#define PCI_INTPIN	0x3d
#define PCI_MINGNT	0x3e
#define PCI_MAXLAT	0x3f

/* config registers for header type 1 devices */

#define PCI_SECSTAT_1	0 /**/

#define PCI_PRIBUS_1	0x18
#define PCI_SECBUS_1	0x19
#define PCI_SUBBUS_1	0x1a
#define PCI_SECLAT_1	0x1b

#define PCI_IOBASEL_1	0x1c
#define PCI_IOLIMITL_1	0x1d
#define PCI_IOBASEH_1	0 /**/
#define PCI_IOLIMITH_1	0 /**/

#define PCI_MEMBASE_1	0x20
#define PCI_MEMLIMIT_1	0x22

#define PCI_PMBASEL_1	0x24
#define PCI_PMLIMITL_1	0x26
#define PCI_PMBASEH_1	0 /**/
#define PCI_PMLIMITH_1	0 /**/

#define PCI_BRIDGECTL_1 0 /**/

#define PCI_SUBVEND_1	0x34
#define PCI_SUBDEV_1	0x36
#define PCI_EXROMADDR_1	0x38

/* config registers for header type 2 devices */

#define PCI_SECSTAT_2	0x16

#define PCI_PRIBUS_2	0x18
#define PCI_SECBUS_2	0x19
#define PCI_SUBBUS_2	0x1a
#define PCI_SECLAT_2	0x1b

#define PCI_MEMBASE0_2	0x1c
#define PCI_MEMLIMIT0_2 0x20
#define PCI_MEMBASE1_2	0x24
#define PCI_MEMLIMIT1_2 0x28
#define PCI_IOBASE0_2	0x2c
#define PCI_IOLIMIT0_2	0x30
#define PCI_IOBASE1_2	0x34
#define PCI_IOLIMIT1_2	0x38

#define PCI_BRIDGECTL_2 0x3e

#define PCI_SUBVEND_2	0x40
#define PCI_SUBDEV_2	0x42

#define PCI_PCCARDIF_2	0x44

/*
 * Mapping registers
 */
#define	PCI_MAPREG_START		0x10
#define	PCI_MAPREG_END			0x28
#define	PCI_MAPREG_PPB_END		0x18
#define	PCI_MAPREG_PCB_END		0x14

#define	PCI_MAPREG_TYPE(mr)						\
	    ((mr) & PCI_MAPREG_TYPE_MASK)
#define	PCI_MAPREG_TYPE_MASK			0x00000001

#define	PCI_MAPREG_TYPE_MEM			0x00000000
#define	PCI_MAPREG_TYPE_IO			0x00000001

#define	PCI_MAPREG_MEM_TYPE(mr)						\
	    ((mr) & PCI_MAPREG_MEM_TYPE_MASK)
#define	PCI_MAPREG_MEM_TYPE_MASK		0x00000006

#define	PCI_MAPREG_MEM_TYPE_32BIT		0x00000000
#define	PCI_MAPREG_MEM_TYPE_32BIT_1M		0x00000002
#define	PCI_MAPREG_MEM_TYPE_64BIT		0x00000004

#define _PCI_MAPREG_TYPEBITS(reg) \
	(PCI_MAPREG_TYPE(reg) == PCI_MAPREG_TYPE_IO ? \
	reg & PCI_MAPREG_TYPE_MASK : \
	reg & (PCI_MAPREG_TYPE_MASK|PCI_MAPREG_MEM_TYPE_MASK))

#define	PCI_MAPREG_MEM_PREFETCHABLE(mr)					\
	    (((mr) & PCI_MAPREG_MEM_PREFETCHABLE_MASK) != 0)
#define	PCI_MAPREG_MEM_PREFETCHABLE_MASK	0x00000008

#define	PCI_MAPREG_MEM_ADDR(mr)						\
	    ((mr) & PCI_MAPREG_MEM_ADDR_MASK)
#define	PCI_MAPREG_MEM_SIZE(mr)						\
	    (PCI_MAPREG_MEM_ADDR(mr) & -PCI_MAPREG_MEM_ADDR(mr))
#define	PCI_MAPREG_MEM_ADDR_MASK		0xfffffff0

#define	PCI_MAPREG_MEM64_ADDR(mr)					\
	    ((mr) & PCI_MAPREG_MEM64_ADDR_MASK)
#define	PCI_MAPREG_MEM64_SIZE(mr)					\
	    (PCI_MAPREG_MEM64_ADDR(mr) & -PCI_MAPREG_MEM64_ADDR(mr))
#define	PCI_MAPREG_MEM64_ADDR_MASK		0xfffffffffffffff0ULL

#define	PCI_MAPREG_IO_ADDR(mr)						\
	    ((mr) & PCI_MAPREG_IO_ADDR_MASK)
#define	PCI_MAPREG_IO_SIZE(mr)						\
	    (PCI_MAPREG_IO_ADDR(mr) & -PCI_MAPREG_IO_ADDR(mr))
#define	PCI_MAPREG_IO_ADDR_MASK			0xfffffffe

/*
 * Cardbus CIS pointer (PCI rev. 2.1)
 */
#define PCI_CARDBUS_CIS_REG 0x28

/*
 * Subsystem identification register; contains a vendor ID and a device ID.
 * Types/macros for PCI_ID_REG apply.
 * (PCI rev. 2.1)
 */
#define PCI_SUBSYS_ID_REG 0x2c

/*
 * Expansion ROM Base Address register
 * (PCI rev. 2.0)
 */
#define PCI_ROM_REG 0x30

#define PCI_ROM_ENABLE			0x00000001
#define PCI_ROM_ADDR_MASK		0xfffff800
#define PCI_ROM_ADDR(mr)						\
	    ((mr) & PCI_ROM_ADDR_MASK)
#define PCI_ROM_SIZE(mr)						\
	    (PCI_ROM_ADDR(mr) & -PCI_ROM_ADDR(mr))

/*
 * capabilities link list (PCI rev. 2.2)
 */
#define PCI_CAPLISTPTR_REG		0x34	/* header type 0 */
#define PCI_CARDBUS_CAPLISTPTR_REG	0x14	/* header type 2 */
#define PCI_CAPLIST_PTR(cpr) ((cpr) & 0xff)
#define PCI_CAPLIST_NEXT(cr) (((cr) >> 8) & 0xff)
#define PCI_CAPLIST_CAP(cr) ((cr) & 0xff)

#define PCI_CAP_RESERVED	0x00
#define PCI_CAP_PWRMGMT		0x01
#define PCI_CAP_AGP		0x02
#define PCI_CAP_VPD		0x03
#define PCI_CAP_SLOTID		0x04
#define PCI_CAP_MSI		0x05
#define PCI_CAP_CPCI_HOTSWAP	0x06
#define PCI_CAP_PCIX		0x07
#define PCI_CAP_HT		0x08
#define PCI_CAP_VENDSPEC	0x09
#define PCI_CAP_DEBUGPORT	0x0a
#define PCI_CAP_CPCI_RSRCCTL	0x0b
#define PCI_CAP_HOTPLUG		0x0c
#define PCI_CAP_AGP8		0x0e
#define PCI_CAP_SECURE		0x0f
#define PCI_CAP_PCIEXPRESS     	0x10
#define PCI_CAP_MSIX		0x11
#define PCI_CAP_SATA		0x12

/*
 * Vital Product Data; access via capability pointer (PCI rev 2.2).
 */
#define	PCI_VPD_ADDRESS_MASK	0x7fff
#define	PCI_VPD_ADDRESS_SHIFT	16
#define	PCI_VPD_ADDRESS(ofs)	\
	(((ofs) & PCI_VPD_ADDRESS_MASK) << PCI_VPD_ADDRESS_SHIFT)
#define	PCI_VPD_DATAREG(ofs)	((ofs) + 4)
#define	PCI_VPD_OPFLAG		0x80000000

/*
 * Message Signaled Interrups; access via capability pointer.
 */
#define PCI_MSI_MC		0x00
#define PCI_MSI_MC_C64		0x00800000
#define PCI_MSI_MC_MME		0x00700000
#define PCI_MSI_MC_MMC		0x000e0000
#define PCI_MSI_MC_MSIE		0x00010000
#define PCI_MSI_MA		0x04
#define PCI_MSI_MAU32		0x08
#define PCI_MSI_MD32		0x08
#define PCI_MSI_MD64		0x0c

/*
 * Power Management Control Status Register; access via capability pointer.
 */
#define PCI_PMCSR		0x04
#define PCI_PMCSR_STATE_MASK	0x0003
#define PCI_PMCSR_STATE_D0	0x0000
#define PCI_PMCSR_STATE_D1	0x0001
#define PCI_PMCSR_STATE_D2	0x0002
#define PCI_PMCSR_STATE_D3	0x0003
#define PCI_PMCSR_PME_STATUS	0x8000
#define PCI_PMCSR_PME_EN	0x0100

/*
 * HyperTransport; access via capability pointer.
 */
#define PCI_HT_CAP(cr) ((((cr) >> 27) < 0x08) ? \
    (((cr) >> 27) & 0x1c) : (((cr) >> 27) & 0x1f))

#define PCI_HT_CAP_SLAVE	0x00
#define PCI_HT_CAP_HOST		0x04
#define PCI_HT_CAP_INTR		0x10
#define PCI_HT_CAP_MSI		0x15

#define PCI_HT_MSI_ENABLED	0x00010000
#define PCI_HT_MSI_FIXED	0x00020000

#define PCI_HT_MSI_FIXED_ADDR	0xfee00000UL

#define PCI_HT_MSI_ADDR		0x04
#define PCI_HT_MSI_ADDR_HI32	0x08

#define PCI_HT_INTR_DATA	0x04

/*
 * PCI Express; access via capability pointer.
 */
#define PCI_PCIE_XCAP		0x00
#define PCI_PCIE_XCAP_SI	0x01000000
#define PCI_PCIE_XCAP_VER(x)	(((x) >> 16) & 0x0f)
#define PCI_PCIE_DCAP		0x04
#define PCI_PCIE_DCSR		0x08
#define PCI_PCIE_DCSR_ERO	0x00000010
#define PCI_PCIE_DCSR_ENS	0x00000800
#define PCI_PCIE_DCSR_MPS	0x00007000
#define PCI_PCIE_DCSR_CEE	0x00010000
#define PCI_PCIE_DCSR_NFE	0x00020000
#define PCI_PCIE_DCSR_FEE	0x00040000
#define PCI_PCIE_DCSR_URE	0x00080000
#define PCI_PCIE_LCAP		0x0c
#define PCI_PCIE_LCSR		0x10
#define PCI_PCIE_LCSR_ASPM_L0S	0x00000001
#define PCI_PCIE_LCSR_ASPM_L1	0x00000002
#define PCI_PCIE_LCSR_ES	0x00000080
#define PCI_PCIE_LCSR_ECPM	0x00000100
#define PCI_PCIE_SLCAP		0x14
#define PCI_PCIE_SLCAP_ABP	0x00000001
#define PCI_PCIE_SLCAP_PCP	0x00000002
#define PCI_PCIE_SLCAP_MSP	0x00000004
#define PCI_PCIE_SLCAP_AIP	0x00000008
#define PCI_PCIE_SLCAP_PIP	0x00000010
#define PCI_PCIE_SLCAP_HPS	0x00000020
#define PCI_PCIE_SLCAP_HPC	0x00000040
#define PCI_PCIE_SLCSR		0x18
#define PCI_PCIE_SLCSR_ABE	0x00000001
#define PCI_PCIE_SLCSR_PFE	0x00000002
#define PCI_PCIE_SLCSR_MSE	0x00000004
#define PCI_PCIE_SLCSR_PDE	0x00000008
#define PCI_PCIE_SLCSR_CCE	0x00000010
#define PCI_PCIE_SLCSR_HPE	0x00000020
#define PCI_PCIE_SLCSR_ABP	0x00010000
#define PCI_PCIE_SLCSR_PFD	0x00020000
#define PCI_PCIE_SLCSR_MSC	0x00040000
#define PCI_PCIE_SLCSR_PDC	0x00080000
#define PCI_PCIE_SLCSR_CC	0x00100000
#define PCI_PCIE_SLCSR_MS	0x00200000
#define PCI_PCIE_SLCSR_PDS	0x00400000
#define PCI_PCIE_SLCSR_LACS	0x01000000
#define PCI_PCIE_RCSR		0x1c
#define PCI_PCIE_LCAP2		0x2c

/*
 * PCI Express; enhanced capabilities
 */
#define PCI_PCIE_ECAP		0x100
#define	PCI_PCIE_ECAP_ID(x)	(((x) & 0x0000ffff))
#define PCI_PCIE_ECAP_VER(x)	(((x) >> 16) & 0x0f)
#define	PCI_PCIE_ECAP_NEXT(x)	(((x) >> 20) & 0xffc)
#define PCI_PCIE_ECAP_LAST	0x0

/*
 * Extended Message Signaled Interrups; access via capability pointer.
 */
#define PCI_MSIX_MC_MSIXE	0x80000000
#define PCI_MSIX_MC_TBLSZ_MASK	0x07ff0000
#define PCI_MSIX_MC_TBLSZ_SHIFT	16
#define PCI_MSIX_MC_TBLSZ(reg)	\
	(((reg) & PCI_MSIX_MC_TBLSZ_MASK) >> PCI_MSIX_MC_TBLSZ_SHIFT)
#define PCI_MSIX_TABLE		0x04
#define  PCI_MSIX_TABLE_BIR	0x00000007
#define  PCI_MSIX_TABLE_OFF	~(PCI_MSIX_TABLE_BIR)

#define PCI_MSIX_MA(i)		((i) * 16 + 0)
#define PCI_MSIX_MAU32(i)	((i) * 16 + 0)
#define PCI_MSIX_MD(i)		((i) * 16 + 8)
#define PCI_MSIX_VC(i)		((i) * 16 + 12)
#define  PCI_MSIX_VC_MASK	0x00000001

/*
 * Interrupt Configuration Register; contains interrupt pin and line.
 */
#define	PCI_INTERRUPT_REG		0x3c

typedef u_int8_t pci_intr_pin_t;
typedef u_int8_t pci_intr_line_t;

#define	PCI_INTERRUPT_PIN_SHIFT			8
#define	PCI_INTERRUPT_PIN_MASK			0xff
#define	PCI_INTERRUPT_PIN(icr) \
	    (((icr) >> PCI_INTERRUPT_PIN_SHIFT) & PCI_INTERRUPT_PIN_MASK)

#define	PCI_INTERRUPT_LINE_SHIFT		0
#define	PCI_INTERRUPT_LINE_MASK			0xff
#define	PCI_INTERRUPT_LINE(icr) \
	    (((icr) >> PCI_INTERRUPT_LINE_SHIFT) & PCI_INTERRUPT_LINE_MASK)

#define	PCI_MIN_GNT_SHIFT			16
#define	PCI_MIN_GNT_MASK			0xff
#define	PCI_MIN_GNT(icr) \
	    (((icr) >> PCI_MIN_GNT_SHIFT) & PCI_MIN_GNT_MASK)

#define	PCI_MAX_LAT_SHIFT			24
#define	PCI_MAX_LAT_MASK			0xff
#define	PCI_MAX_LAT(icr) \
	    (((icr) >> PCI_MAX_LAT_SHIFT) & PCI_MAX_LAT_MASK)

#define	PCI_INTERRUPT_PIN_NONE			0x00
#define	PCI_INTERRUPT_PIN_A			0x01
#define	PCI_INTERRUPT_PIN_B			0x02
#define	PCI_INTERRUPT_PIN_C			0x03
#define	PCI_INTERRUPT_PIN_D			0x04
#define	PCI_INTERRUPT_PIN_MAX			0x04

/*
 * Vital Product Data resource tags.
 */
struct pci_vpd_smallres {
	uint8_t		vpdres_byte0;		/* length of data + tag */
	/* Actual data. */
} __packed;

struct pci_vpd_largeres {
	uint8_t		vpdres_byte0;
	uint8_t		vpdres_len_lsb;		/* length of data only */
	uint8_t		vpdres_len_msb;
	/* Actual data. */
} __packed;

#define	PCI_VPDRES_ISLARGE(x)			((x) & 0x80)

#define	PCI_VPDRES_SMALL_LENGTH(x)		((x) & 0x7)
#define	PCI_VPDRES_SMALL_NAME(x)		(((x) >> 3) & 0xf)

#define	PCI_VPDRES_LARGE_NAME(x)		((x) & 0x7f)

#define	PCI_VPDRES_TYPE_COMPATIBLE_DEVICE_ID	0x3	/* small */
#define	PCI_VPDRES_TYPE_VENDOR_DEFINED		0xe	/* small */
#define	PCI_VPDRES_TYPE_END_TAG			0xf	/* small */

#define	PCI_VPDRES_TYPE_IDENTIFIER_STRING	0x02	/* large */
#define	PCI_VPDRES_TYPE_VPD			0x10	/* large */

struct pci_vpd {
	uint8_t		vpd_key0;
	uint8_t		vpd_key1;
	uint8_t		vpd_len;		/* length of data only */
	/* Actual data. */
} __packed;

/*
 * Recommended VPD fields:
 *
 *	PN		Part number of assembly
 *	FN		FRU part number
 *	EC		EC level of assembly
 *	MN		Manufacture ID
 *	SN		Serial Number
 *
 * Conditionally recommended VPD fields:
 *
 *	LI		Load ID
 *	RL		ROM Level
 *	RM		Alterable ROM Level
 *	NA		Network Address
 *	DD		Device Driver Level
 *	DG		Diagnostic Level
 *	LL		Loadable Microcode Level
 *	VI		Vendor ID/Device ID
 *	FU		Function Number
 *	SI		Subsystem Vendor ID/Subsystem ID
 *
 * Additional VPD fields:
 *
 *	Z0-ZZ		User/Product Specific
 */

#endif /* _DEV_PCI_PCIREG_H_ */
@


1.54
log
@From FreeBSD (r227593, r307982):
More and more RealTek controllers started to implement EEE feature.
Vendor driver seems to load a kind of firmware for EEE with
additional PHY fixups.  It is known that the EEE feature may need
ASPM support.  Unfortunately there is no documentation for EEE of
the controller so enabling ASPM may cause more problems.

The Realtek vendor drivers for FreeBSD and Linux also disable ASPM and
clock request.  While here, add a define for the ECPM (Enable Clock Power
Management) bit.

Tested by stsp@@ and myself.
ok stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.53 2017/03/25 07:33:46 mlarkin Exp $	*/
d341 1
d373 1
@


1.53
log
@More PCI extended capabilities handling in pcidump.

From  Simon Mages

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.52 2017/03/22 07:21:39 jsg Exp $	*/
d577 1
@


1.52
log
@Add some more PCI classes and subclasses.  Checked against EDK2 as
"PCI Code and ID Assignment Specification" is only available for those
willing to pay thousands of dollars for PDFs.

Prompted by a dmesg from an AMD Zen system which uses class 0x13
(Non-Essential Instrumentation) and System subclass 0x06 (IOMMU).  There
is currently no public documentation for AMD family 17h to reference to
see if this is sane.

ok kettenis@@ on an earlier version
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.51 2017/03/16 22:05:44 deraadt Exp $	*/
d609 1
a609 1
#define	PCI_PCIE_ECAP_NEXT(x)	((x) >> 20)
@


1.51
log
@Print PCIe Extended Capabilities, from Simon Mages
ok kettenis mlarkin
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.50 2016/06/02 21:01:51 kettenis Exp $	*/
d155 2
d173 1
d184 1
d217 1
d236 2
@


1.50
log
@Fix two issues in the MSI-X code.  First, actually read the MSI-X capability
register.  Second, correctly decode the table sizefromits contents.

First issue pointed out by David Hill (with the help of clang).  Second
issue spotted after seeing a diff from Christiano Hasbaert.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.49 2016/05/04 14:30:00 kettenis Exp $	*/
d595 9
@


1.49
log
@Initial support for MSI-X.  Only supported on amd64 for now.  I have diffs to
actually use this in em(4) and xhci(4), but I'm not committing those yet
because we almost certainly need to save and restore the MSI-X registers
during suspend/resume.  However, this allows mpi@@ to play with multiple-vector
support in networking hardware.

Requested by mpi@@
ok mlarkin@@, mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.48 2015/06/02 15:26:19 mpi Exp $	*/
d600 4
a603 1
#define PCI_MSIX_MC_TBLSZ	0x000007ff
@


1.48
log
@Add missing define for hpb(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.47 2014/04/27 14:55:09 stsp Exp $	*/
d595 15
@


1.47
log
@Add PME_STATUS and PME_EN bitmasks for the PCI PMCSR register.
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.46 2014/04/09 06:36:33 dlg Exp $	*/
d537 1
a537 1
#define PCI_HT_CAP_INTERRUPT	0x10
d547 2
@


1.46
log
@apparently NVM is a type of mass storage now
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.45 2013/08/26 09:50:47 jsg Exp $	*/
d521 7
a527 5
#define PCI_PMCSR_STATE_MASK	0x03
#define PCI_PMCSR_STATE_D0	0x00
#define PCI_PMCSR_STATE_D1	0x01
#define PCI_PMCSR_STATE_D2	0x02
#define PCI_PMCSR_STATE_D3	0x03
@


1.45
log
@add a define for the link capabilities register for
version 2 of the PCIe capability.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.44 2013/06/03 22:01:57 mikeb Exp $	*/
d170 1
@


1.44
log
@Define some more DCSR/DCTL bits;  ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.43 2012/05/13 13:47:52 kettenis Exp $	*/
d550 1
d589 1
@


1.43
log
@Add define for capability 0x12 (SATA).
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.42 2011/06/19 12:02:23 kettenis Exp $	*/
d552 7
a558 1
#define PCI_PCIE_DCSR_ENA_NO_SNOOP	0x00000800
@


1.42
log
@Fix typo in the "fixed" HyperTransport MSI Mapping Capability address.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.41 2011/05/30 19:09:46 kettenis Exp $	*/
d491 1
@


1.41
log
@Enable MSI for HyperTransport devices that have MSI remapping enabled.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.40 2011/05/14 09:57:56 kettenis Exp $	*/
d539 1
a539 1
#define PCI_HT_MSI_FIXED_ADDR	0xffe00000UL
@


1.40
log
@Add register definitions for PCI MSI capaility.

ok oga@@, miod@@, marco@@, dlg@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.39 2010/12/05 15:15:14 kettenis Exp $	*/
d482 1
a482 1
#define PCI_CAP_LDT		0x08
d524 19
@


1.39
log
@PCIe based sparc64 machines have always supported access to the extended PCIe
configuration space.  So on pyro(4) and vpci(4) return the size appropriate
for the extended PCIe configuration space.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.38 2010/12/04 17:06:29 miod Exp $	*/
d501 13
@


1.38
log
@Introduce a new pci routine, pci_conf_size(), which returns the size of a
given pcitag_t configuration address space. Currently, all pci controllers
will return the usual 0x100 bytes of PCI configuration space, but this will
eventually change on PCIe-capable controlers.
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.37 2010/12/01 18:47:51 damien Exp $	*/
d44 1
@


1.37
log
@Add definition for "Extended Synch" bit in PCIe Link Control register.
From PCI Express(R) Base Specification Rev 2.0.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.36 2009/05/28 15:41:48 damien Exp $	*/
d42 2
@


1.36
log
@Add "Interrupt Disable" bit definition for the PCI Configuration Space
Command register.  From PCI Express Base Specification Rev 2.0.
Use same naming as NetBSD.
Needed for wpi(4) and iwn(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.35 2008/11/25 18:49:49 damien Exp $	*/
d521 1
@


1.35
log
@move some generic PCIe register flags used in wpi(4) and iwn(4)
into common pcireg.h

ok deraadt@@, kettenis@@, dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.34 2007/11/26 13:20:28 jsg Exp $	*/
d80 1
@


1.34
log
@Add PCI VPD read/write functions from NetBSD required for some things
dlg is playing with.

'put it in' dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.33 2007/11/25 01:36:48 kettenis Exp $	*/
d515 1
d518 2
@


1.33
log
@First step towards PCI Express/ExpressCard hotplug.  Unplug should work on
detachable drivers.

"put it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.32 2006/07/31 11:06:33 mickey Exp $	*/
d487 10
@


1.32
log
@puc@@cardbus (only added (commented out) to whom has puc@@pci enabled)
tested on puc@@pci by fkr and meself on the cardbus.
still needs a bit more work but generally works.
deraadt@@ ok and some input from miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.31 2006/06/01 11:17:31 brad Exp $	*/
d497 34
@


1.31
log
@add 2 subclasses, subclass storage SAS and subclass system SD Host Controller.

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.30 2006/05/28 17:21:14 uwe Exp $	*/
d408 5
@


1.30
log
@Support for standard SD host controllers like the Ricoh 5C822, a small
generic bus layer, and SCSI emulation for SD/MMC memory cards.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.29 2006/05/11 23:29:12 brad Exp $	*/
d165 1
@


1.29
log
@add PCI multimedia subclass type of HD audio.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.28 2005/12/31 04:11:40 dlg Exp $	*/
d224 1
@


1.28
log
@add macros for the expansion ROM base address register

ok brad@@ grange@@ fgsch@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.27 2004/11/16 00:31:02 brad Exp $	*/
d187 1
@


1.27
log
@add PCI_ID_CODE

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.26 2003/12/06 14:40:33 grange Exp $	*/
d439 13
@


1.26
log
@Mark u_int64_t constants with ULL to make gcc3 happy.
ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.25 2003/11/16 20:30:06 avsm Exp $	*/
d60 4
@


1.25
log
@convert __attribute__((__packed__)) to __packed so that parsers unaware
of gcc extensions have more of a chance.
ok mcbride@@, no objections from millert@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.24 2003/10/06 16:04:45 fgsch Exp $	*/
d416 1
a416 1
#define	PCI_MAPREG_MEM64_ADDR_MASK		0xfffffffffffffff0
@


1.24
log
@power management status reg. definition; from netbsd.
ok deraadt@@ henning@@ krw@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.22 2003/04/02 21:40:35 grange Exp $	*/
d514 1
a514 1
} __attribute__((__packed__));
d521 1
a521 1
} __attribute__((__packed__));
d542 1
a542 1
} __attribute__((__packed__));
@


1.23
log
@this bit is defined as prefetchable and not cachable and thus rename and use appropriately
@
text
@d466 1
@


1.22
log
@PCI_CAP_MBI should really be PCI_CAP_MSI
ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.21 2003/04/01 05:03:52 grange Exp $	*/
d402 3
a404 3
#define	PCI_MAPREG_MEM_CACHEABLE(mr)					\
	    (((mr) & PCI_MAPREG_MEM_CACHEABLE_MASK) != 0)
#define	PCI_MAPREG_MEM_CACHEABLE_MASK		0x00000008
@


1.21
log
@Add a couple of new pci subclasses and caps from NetBSD
ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.20 2003/02/08 18:24:53 jason Exp $	*/
d450 1
a450 1
#define PCI_CAP_MBI		0x05
@


1.20
log
@definitions and structures for vital product data (VPD); from netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.19 2002/07/13 18:20:26 mickey Exp $	*/
d160 1
d209 2
d258 4
d282 2
d439 2
a440 1
#define PCI_CAPLISTPTR_REG		0x34
d458 4
@


1.19
log
@define PCI_COMMAND_STATUS_BITS for printfs, according to the enlisted defines
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.18 2002/04/06 04:29:43 jason Exp $	*/
d492 63
@


1.18
log
@s/REESSERVED/RESERVED/
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.17 2001/05/08 19:47:43 mickey Exp $	*/
d92 6
@


1.17
log
@more class/subclass/caps ids; from netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.16 2001/02/09 21:13:29 aaron Exp $	*/
d429 1
a429 1
#define PCI_CAP_REESSERVED	0x00
@


1.17.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.17 2001/05/08 19:47:43 mickey Exp $	*/
d429 1
a429 1
#define PCI_CAP_RESERVED	0x00
@


1.17.4.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.17.4.1 2002/06/11 03:42:27 art Exp $	*/
a91 6
#define	PCI_COMMAND_STATUS_BITS \
    ("\020\01IO\02MEM\03MASTER\04SPECIAL\05INVALIDATE\06PALETTE\07PARITY"\
     "\010STEPPING\011SERR\012BACKTOBACK\025CAPLIST\026CLK66\027UDF"\
     "\030BACK2BACK_STAT\031PARITY_STAT\032DEVSEL_MEDIUM\033DEVSEL_SLOW"\
     "\034TARGET_TARGET_ABORT\035MASTER_TARGET_ABORT\036MASTER_ABORT"\
     "\037SPECIAL_ERROR\040PARITY_DETECT")
@


1.17.4.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a159 1
#define	PCI_SUBCLASS_MASS_STORAGE_SATA		0x06
a207 2
#define	PCI_SUBCLASS_COMMUNICATIONS_GPIB	0x04
#define	PCI_SUBCLASS_COMMUNICATIONS_SMARTCARD	0x05
a254 4
#define	PCI_SUBCLASS_WIRELESS_BLUETOOTH		0x11
#define	PCI_SUBCLASS_WIRELESS_BROADBAND		0x12
#define	PCI_SUBCLASS_WIRELESS_802_11A		0x20
#define	PCI_SUBCLASS_WIRELESS_802_11B		0x21
a274 2
#define	PCI_SUBCLASS_DASP_SYNC			0x10
#define	PCI_SUBCLASS_DASP_MGMT			0x20
d430 1
a430 2
#define PCI_CAPLISTPTR_REG		0x34	/* header type 0 */
#define PCI_CARDBUS_CAPLISTPTR_REG	0x14	/* header type 2 */
d440 1
a440 1
#define PCI_CAP_MSI		0x05
a447 4
#define PCI_CAP_AGP8		0x0e
#define PCI_CAP_SECURE		0x0f
#define PCI_CAP_PCIEXPRESS     	0x10
#define PCI_CAP_MSIX		0x11
a491 63

/*
 * Vital Product Data resource tags.
 */
struct pci_vpd_smallres {
	uint8_t		vpdres_byte0;		/* length of data + tag */
	/* Actual data. */
} __attribute__((__packed__));

struct pci_vpd_largeres {
	uint8_t		vpdres_byte0;
	uint8_t		vpdres_len_lsb;		/* length of data only */
	uint8_t		vpdres_len_msb;
	/* Actual data. */
} __attribute__((__packed__));

#define	PCI_VPDRES_ISLARGE(x)			((x) & 0x80)

#define	PCI_VPDRES_SMALL_LENGTH(x)		((x) & 0x7)
#define	PCI_VPDRES_SMALL_NAME(x)		(((x) >> 3) & 0xf)

#define	PCI_VPDRES_LARGE_NAME(x)		((x) & 0x7f)

#define	PCI_VPDRES_TYPE_COMPATIBLE_DEVICE_ID	0x3	/* small */
#define	PCI_VPDRES_TYPE_VENDOR_DEFINED		0xe	/* small */
#define	PCI_VPDRES_TYPE_END_TAG			0xf	/* small */

#define	PCI_VPDRES_TYPE_IDENTIFIER_STRING	0x02	/* large */
#define	PCI_VPDRES_TYPE_VPD			0x10	/* large */

struct pci_vpd {
	uint8_t		vpd_key0;
	uint8_t		vpd_key1;
	uint8_t		vpd_len;		/* length of data only */
	/* Actual data. */
} __attribute__((__packed__));

/*
 * Recommended VPD fields:
 *
 *	PN		Part number of assembly
 *	FN		FRU part number
 *	EC		EC level of assembly
 *	MN		Manufacture ID
 *	SN		Serial Number
 *
 * Conditionally recommended VPD fields:
 *
 *	LI		Load ID
 *	RL		ROM Level
 *	RM		Alterable ROM Level
 *	NA		Network Address
 *	DD		Device Driver Level
 *	DG		Diagnostic Level
 *	LL		Loadable Microcode Level
 *	VI		Vendor ID/Device ID
 *	FU		Function Number
 *	SI		Subsystem Vendor ID/Subsystem ID
 *
 * Additional VPD fields:
 *
 *	Z0-ZZ		User/Product Specific
 */
@


1.16
log
@Add PCI Power Management Control Register definitions; from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.15 2000/11/08 14:17:17 art Exp $	*/
d136 5
d153 1
d161 3
d169 1
d175 1
d192 3
d200 2
d209 1
d216 2
d230 1
d239 31
d428 14
a441 6
#define PCI_CAP_PWRMGMT	1
#define PCI_CAP_AGP	2
#define PCI_CAP_VPD	3
#define PCI_CAP_SLOTID	4
#define PCI_CAP_MBI	5
#define PCI_CAP_HOTSWAP	6
@


1.15
log
@Defines for min_gnt and max_lat fields in the bhlc reg.
Not used yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.14 2000/09/20 17:39:05 niklas Exp $	*/
d383 9
@


1.14
log
@support 64bit BARs from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.13 2000/08/02 02:25:14 mickey Exp $	*/
d401 10
@


1.13
log
@import a few useful consts from netbsd; mainly for pcibios thing slip
@
text
@d1 2
a2 2
/*	$OpenBSD: pcireg.h,v 1.12 1999/10/26 17:43:58 downsj Exp $	*/
/*	$NetBSD: pcireg.h,v 1.11 1996/08/10 15:42:33 mycroft Exp $	*/
d345 6
@


1.12
log
@Missed earlier: add PCI_HDRTYPE_TYPE macro, from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.11 1999/07/18 03:20:18 csapuntz Exp $	*/
d318 2
d401 1
@


1.12.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/*	$OpenBSD: pcireg.h,v 1.16 2001/02/09 21:13:29 aaron Exp $	*/
/*	$NetBSD: pcireg.h,v 1.26 2000/05/10 16:58:42 thorpej Exp $	*/
a317 2
#define	PCI_MAPREG_PPB_END		0x18
#define	PCI_MAPREG_PCB_END		0x14
a343 6
#define	PCI_MAPREG_MEM64_ADDR(mr)					\
	    ((mr) & PCI_MAPREG_MEM64_ADDR_MASK)
#define	PCI_MAPREG_MEM64_SIZE(mr)					\
	    (PCI_MAPREG_MEM64_ADDR(mr) & -PCI_MAPREG_MEM64_ADDR(mr))
#define	PCI_MAPREG_MEM64_ADDR_MASK		0xfffffffffffffff0

a376 9
 * Power Management Control Status Register; access via capability pointer.
 */
#define PCI_PMCSR_STATE_MASK	0x03
#define PCI_PMCSR_STATE_D0	0x00
#define PCI_PMCSR_STATE_D1	0x01
#define PCI_PMCSR_STATE_D2	0x02
#define PCI_PMCSR_STATE_D3	0x03

/*
a393 10
#define	PCI_MIN_GNT_SHIFT			16
#define	PCI_MIN_GNT_MASK			0xff
#define	PCI_MIN_GNT(icr) \
	    (((icr) >> PCI_MIN_GNT_SHIFT) & PCI_MIN_GNT_MASK)

#define	PCI_MAX_LAT_SHIFT			24
#define	PCI_MAX_LAT_MASK			0xff
#define	PCI_MAX_LAT(icr) \
	    (((icr) >> PCI_MAX_LAT_SHIFT) & PCI_MAX_LAT_MASK)

a398 1
#define	PCI_INTERRUPT_PIN_MAX			0x04
@


1.12.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.12.2.1 2001/05/14 22:25:56 niklas Exp $	*/
a135 5
#define	PCI_CLASS_WIRELESS			0x0d
#define	PCI_CLASS_I2O				0x0e
#define	PCI_CLASS_SATCOM			0x0f
#define	PCI_CLASS_CRYPTO			0x10
#define	PCI_CLASS_DASP				0x11
a147 1
#define	PCI_SUBCLASS_MASS_STORAGE_ATA		0x05
a154 3
#define	PCI_SUBCLASS_NETWORK_ISDN		0x04
#define	PCI_SUBCLASS_NETWORK_WORLDFIP		0x05
#define	PCI_SUBCLASS_NETWORK_PCIMGMULTICOMP	0x06
a159 1
#define	PCI_SUBCLASS_DISPLAY_3D			0x02
a164 1
#define	PCI_SUBCLASS_MULTIMEDIA_TELEPHONY	0x02
a180 3
#define	PCI_SUBCLASS_BRIDGE_RACEWAY		0x08
#define	PCI_SUBCLASS_BRIDGE_STPCI		0x09
#define	PCI_SUBCLASS_BRIDGE_INFINIBAND		0x0a
a185 2
#define	PCI_SUBCLASS_COMMUNICATIONS_MPSERIAL	0x02
#define	PCI_SUBCLASS_COMMUNICATIONS_MODEM	0x03
a192 1
#define	PCI_SUBCLASS_SYSTEM_PCIHOTPLUG		0x04
a198 2
#define	PCI_SUBCLASS_INPUT_SCANNER		0x03
#define	PCI_SUBCLASS_INPUT_GAMEPORT		0x04
a210 1
#define	PCI_SUBCLASS_PROCESSOR_MIPS		0x30
a218 31
#define	PCI_SUBCLASS_SERIALBUS_SMBUS		0x05
#define	PCI_SUBCLASS_SERIALBUS_INFINIBAND	0x06
#define	PCI_SUBCLASS_SERIALBUS_IPMI		0x07
#define	PCI_SUBCLASS_SERIALBUS_SERCOS		0x08
#define	PCI_SUBCLASS_SERIALBUS_CANBUS		0x09

/* 0x0d wireless subclasses */
#define	PCI_SUBCLASS_WIRELESS_IRDA		0x00
#define	PCI_SUBCLASS_WIRELESS_CONSUMERIR	0x01
#define	PCI_SUBCLASS_WIRELESS_RF		0x10
#define	PCI_SUBCLASS_WIRELESS_MISC		0x80

/* 0x0e I2O (Intelligent I/O) subclasses */
#define	PCI_SUBCLASS_I2O_STANDARD		0x00

/* 0x0f satellite communication subclasses */
/*	PCI_SUBCLASS_SATCOM_???			0x00    / * XXX ??? */
#define	PCI_SUBCLASS_SATCOM_TV			0x01
#define	PCI_SUBCLASS_SATCOM_AUDIO		0x02
#define	PCI_SUBCLASS_SATCOM_VOICE		0x03
#define	PCI_SUBCLASS_SATCOM_DATA		0x04

/* 0x10 encryption/decryption subclasses */
#define	PCI_SUBCLASS_CRYPTO_NETCOMP		0x00
#define	PCI_SUBCLASS_CRYPTO_ENTERTAINMENT	0x10
#define	PCI_SUBCLASS_CRYPTO_MISC		0x80

/* 0x11 data acquisition and signal processing subclasses */
#define	PCI_SUBCLASS_DASP_DPIO			0x00
#define	PCI_SUBCLASS_DASP_TIMEFREQ		0x01
#define	PCI_SUBCLASS_DASP_MISC			0x80
d377 6
a382 14

#define PCI_CAP_REESSERVED	0x00
#define PCI_CAP_PWRMGMT		0x01
#define PCI_CAP_AGP		0x02
#define PCI_CAP_VPD		0x03
#define PCI_CAP_SLOTID		0x04
#define PCI_CAP_MBI		0x05
#define PCI_CAP_CPCI_HOTSWAP	0x06
#define PCI_CAP_PCIX		0x07
#define PCI_CAP_LDT		0x08
#define PCI_CAP_VENDSPEC	0x09
#define PCI_CAP_DEBUGPORT	0x0a
#define PCI_CAP_CPCI_RSRCCTL	0x0b
#define PCI_CAP_HOTPLUG		0x0c
@


1.12.2.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a91 6
#define	PCI_COMMAND_STATUS_BITS \
    ("\020\01IO\02MEM\03MASTER\04SPECIAL\05INVALIDATE\06PALETTE\07PARITY"\
     "\010STEPPING\011SERR\012BACKTOBACK\025CAPLIST\026CLK66\027UDF"\
     "\030BACK2BACK_STAT\031PARITY_STAT\032DEVSEL_MEDIUM\033DEVSEL_SLOW"\
     "\034TARGET_TARGET_ABORT\035MASTER_TARGET_ABORT\036MASTER_ABORT"\
     "\037SPECIAL_ERROR\040PARITY_DETECT")
d429 1
a429 1
#define PCI_CAP_RESERVED	0x00
a485 63

/*
 * Vital Product Data resource tags.
 */
struct pci_vpd_smallres {
	uint8_t		vpdres_byte0;		/* length of data + tag */
	/* Actual data. */
} __attribute__((__packed__));

struct pci_vpd_largeres {
	uint8_t		vpdres_byte0;
	uint8_t		vpdres_len_lsb;		/* length of data only */
	uint8_t		vpdres_len_msb;
	/* Actual data. */
} __attribute__((__packed__));

#define	PCI_VPDRES_ISLARGE(x)			((x) & 0x80)

#define	PCI_VPDRES_SMALL_LENGTH(x)		((x) & 0x7)
#define	PCI_VPDRES_SMALL_NAME(x)		(((x) >> 3) & 0xf)

#define	PCI_VPDRES_LARGE_NAME(x)		((x) & 0x7f)

#define	PCI_VPDRES_TYPE_COMPATIBLE_DEVICE_ID	0x3	/* small */
#define	PCI_VPDRES_TYPE_VENDOR_DEFINED		0xe	/* small */
#define	PCI_VPDRES_TYPE_END_TAG			0xf	/* small */

#define	PCI_VPDRES_TYPE_IDENTIFIER_STRING	0x02	/* large */
#define	PCI_VPDRES_TYPE_VPD			0x10	/* large */

struct pci_vpd {
	uint8_t		vpd_key0;
	uint8_t		vpd_key1;
	uint8_t		vpd_len;		/* length of data only */
	/* Actual data. */
} __attribute__((__packed__));

/*
 * Recommended VPD fields:
 *
 *	PN		Part number of assembly
 *	FN		FRU part number
 *	EC		EC level of assembly
 *	MN		Manufacture ID
 *	SN		Serial Number
 *
 * Conditionally recommended VPD fields:
 *
 *	LI		Load ID
 *	RL		ROM Level
 *	RM		Alterable ROM Level
 *	NA		Network Address
 *	DD		Device Driver Level
 *	DG		Diagnostic Level
 *	LL		Loadable Microcode Level
 *	VI		Vendor ID/Device ID
 *	FU		Function Number
 *	SI		Subsystem Vendor ID/Subsystem ID
 *
 * Additional VPD fields:
 *
 *	Z0-ZZ		User/Product Specific
 */
@


1.12.2.4
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.12.2.3 2003/03/28 00:38:24 niklas Exp $	*/
a159 1
#define	PCI_SUBCLASS_MASS_STORAGE_SATA		0x06
a207 2
#define	PCI_SUBCLASS_COMMUNICATIONS_GPIB	0x04
#define	PCI_SUBCLASS_COMMUNICATIONS_SMARTCARD	0x05
a254 4
#define	PCI_SUBCLASS_WIRELESS_BLUETOOTH		0x11
#define	PCI_SUBCLASS_WIRELESS_BROADBAND		0x12
#define	PCI_SUBCLASS_WIRELESS_802_11A		0x20
#define	PCI_SUBCLASS_WIRELESS_802_11B		0x21
a274 2
#define	PCI_SUBCLASS_DASP_SYNC			0x10
#define	PCI_SUBCLASS_DASP_MGMT			0x20
d430 1
a430 2
#define PCI_CAPLISTPTR_REG		0x34	/* header type 0 */
#define PCI_CARDBUS_CAPLISTPTR_REG	0x14	/* header type 2 */
d440 1
a440 1
#define PCI_CAP_MSI		0x05
a447 4
#define PCI_CAP_AGP8		0x0e
#define PCI_CAP_SECURE		0x0f
#define PCI_CAP_PCIEXPRESS     	0x10
#define PCI_CAP_MSIX		0x11
@


1.12.2.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d402 3
a404 3
#define	PCI_MAPREG_MEM_PREFETCHABLE(mr)					\
	    (((mr) & PCI_MAPREG_MEM_PREFETCHABLE_MASK) != 0)
#define	PCI_MAPREG_MEM_PREFETCHABLE_MASK	0x00000008
d416 1
a416 1
#define	PCI_MAPREG_MEM64_ADDR_MASK		0xfffffffffffffff0ULL
a465 1
#define PCI_PMCSR		0x04
d513 1
a513 1
} __packed;
d520 1
a520 1
} __packed;
d541 1
a541 1
} __packed;
@


1.11
log
@

Added pci_mapreg* interface from NetBSD.
Added PCI 2.2 stuff from NetBSD
Modified if_de to use mapreg interface
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.10 1999/01/30 23:24:22 niklas Exp $	*/
d235 2
@


1.10
log
@A slew of manifest constants for pci configuration registers gotten from freebsd
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.9 1998/07/12 04:22:09 deraadt Exp $	*/
d77 1
d347 26
@


1.9
log
@fix bhlcr shift values; fgsch@@olimpo.com.br
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.8 1998/04/25 00:17:44 deraadt Exp $	*/
d246 63
@


1.8
log
@UDF and 66MHz support; zubin@@clouseau.arl.wustl.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.7 1998/02/03 19:47:13 deraadt Exp $	*/
d229 1
a229 1
#define	PCI_HDRTYPE_SHIFT			24
d237 1
a237 1
#define	PCI_LATTIMER_SHIFT			24
d242 1
a242 1
#define	PCI_CACHELINE_SHIFT			24
@


1.7
log
@more pci subclasses and such; netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.6 1998/02/03 19:42:05 deraadt Exp $	*/
d77 3
a79 1
#define	PCI_STATUS_BACKTOBACK_OKAY		0x00800000
@


1.6
log
@more bridge types
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.5 1996/11/28 23:28:13 niklas Exp $	*/
d127 6
d144 1
d179 37
@


1.5
log
@Adaption to new bus.h from NetBSD.  Various driver has been updated to
NetBSD 961107 state.  Other has not, partly because sometimes the bus.h
changes was coupled with other changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.4 1996/10/31 03:29:11 millert Exp $	*/
d169 2
@


1.4
log
@Add ATM defines.  From Jim Rees <rees@@umich.edu>
@
text
@d1 2
a2 2
/*	$OpenBSD: pcireg.h,v 1.3 1996/04/21 22:25:49 deraadt Exp $	*/
/*	$NetBSD: pcireg.h,v 1.7 1996/03/27 04:08:27 cgd Exp $	*/
d6 1
a6 1
 * Copyright (c) 1994 Charles Hannum.  All rights reserved.
d226 2
d232 2
@


1.3
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: pcireg.h,v 1.2 1996/04/18 23:48:07 niklas Exp $	*/
d144 1
@


1.2
log
@NetBSD 960317 merge
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: pcireg.h,v 1.5 1996/03/04 19:30:51 cgd Exp $	*/
d34 3
d171 28
d254 2
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: pcireg.h,v 1.4 1995/07/27 00:29:02 mycroft Exp $	*/
d5 1
a5 1
 * Copyright (c) 1995 Christopher G. Demetriou.  All rights reserved.
a168 1
 * XXX ADJUST
d170 2
a171 2
#define	PCI_MAP_REG_START		0x10
#define	PCI_MAP_REG_END			0x28
d173 26
a198 12
#define	PCI_MAP_MEMORY				0x00000000

#define	PCI_MAP_MEMORY_TYPE_32BIT		0x00000000
#define	PCI_MAP_MEMORY_TYPE_32BIT_1M		0x00000002
#define	PCI_MAP_MEMORY_TYPE_64BIT		0x00000004
#define	PCI_MAP_MEMORY_TYPE_MASK		0x00000006
#define	PCI_MAP_MEMORY_CACHABLE			0x00000008
#define	PCI_MAP_MEMORY_ADDRESS_MASK		0xfffffff0

#define	PCI_MAP_IO				0x00000001

#define	PCI_MAP_IO_ADDRESS_MASK			0xfffffffe
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
