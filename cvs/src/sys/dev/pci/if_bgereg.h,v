head	1.130;
access;
symbols
	OPENBSD_6_2:1.130.0.10
	OPENBSD_6_2_BASE:1.130
	OPENBSD_6_1:1.130.0.8
	OPENBSD_6_1_BASE:1.130
	OPENBSD_6_0:1.130.0.6
	OPENBSD_6_0_BASE:1.130
	OPENBSD_5_9:1.130.0.2
	OPENBSD_5_9_BASE:1.130
	OPENBSD_5_8:1.126.0.6
	OPENBSD_5_8_BASE:1.126
	OPENBSD_5_7:1.126.0.4
	OPENBSD_5_7_BASE:1.126
	OPENBSD_5_6:1.124.0.4
	OPENBSD_5_6_BASE:1.124
	OPENBSD_5_5:1.123.0.4
	OPENBSD_5_5_BASE:1.123
	OPENBSD_5_4:1.117.0.2
	OPENBSD_5_4_BASE:1.117
	OPENBSD_5_3:1.113.0.2
	OPENBSD_5_3_BASE:1.113
	OPENBSD_5_2:1.104.0.8
	OPENBSD_5_2_BASE:1.104
	OPENBSD_5_1_BASE:1.104
	OPENBSD_5_1:1.104.0.6
	OPENBSD_5_0:1.104.0.4
	OPENBSD_5_0_BASE:1.104
	OPENBSD_4_9:1.104.0.2
	OPENBSD_4_9_BASE:1.104
	OPENBSD_4_8:1.101.0.2
	OPENBSD_4_8_BASE:1.101
	OPENBSD_4_7:1.100.0.2
	OPENBSD_4_7_BASE:1.100
	OPENBSD_4_6:1.97.0.4
	OPENBSD_4_6_BASE:1.97
	OPENBSD_4_5:1.90.0.2
	OPENBSD_4_5_BASE:1.90
	OPENBSD_4_4:1.85.0.2
	OPENBSD_4_4_BASE:1.85
	OPENBSD_4_3:1.81.0.2
	OPENBSD_4_3_BASE:1.81
	OPENBSD_4_2:1.72.0.4
	OPENBSD_4_2_BASE:1.72
	OPENBSD_4_1:1.72.0.2
	OPENBSD_4_1_BASE:1.72
	OPENBSD_4_0:1.57.0.2
	OPENBSD_4_0_BASE:1.57
	OPENBSD_3_9:1.42.0.2
	OPENBSD_3_9_BASE:1.42
	OPENBSD_3_8:1.27.0.2
	OPENBSD_3_8_BASE:1.27
	OPENBSD_3_7:1.20.0.2
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.2.0.6
	UBC_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.130
date	2015.11.29.20.19.35;	author kettenis;	state Exp;
branches;
next	1.129;
commitid	4zVL5LtA6Fa4yP4J;

1.129
date	2015.11.10.20.20.34;	author miod;	state Exp;
branches;
next	1.128;
commitid	ALDFpXNvnOITEkSA;

1.128
date	2015.10.19.05.31.25;	author jmatthew;	state Exp;
branches;
next	1.127;
commitid	xd7z4vq95x3HWhpC;

1.127
date	2015.09.11.13.02.28;	author stsp;	state Exp;
branches;
next	1.126;
commitid	6vhYvh5CxZAHMnsN;

1.126
date	2014.09.02.10.14.55;	author brad;	state Exp;
branches;
next	1.125;
commitid	cBxS2Zdkcm4wMwIx;

1.125
date	2014.08.24.05.01.42;	author brad;	state Exp;
branches;
next	1.124;
commitid	g3EN1wlWPI6g9jQk;

1.124
date	2014.07.08.05.35.18;	author dlg;	state Exp;
branches;
next	1.123;
commitid	0QJleeeWqZmC5anF;

1.123
date	2014.02.05.05.59.42;	author brad;	state Exp;
branches;
next	1.122;

1.122
date	2014.02.01.01.51.27;	author brad;	state Exp;
branches;
next	1.121;

1.121
date	2014.01.28.14.08.29;	author sthen;	state Exp;
branches;
next	1.120;

1.120
date	2014.01.28.00.39.22;	author brad;	state Exp;
branches;
next	1.119;

1.119
date	2014.01.07.06.25.33;	author brad;	state Exp;
branches;
next	1.118;

1.118
date	2013.12.30.18.47.45;	author brad;	state Exp;
branches;
next	1.117;

1.117
date	2013.06.28.11.59.42;	author mikeb;	state Exp;
branches;
next	1.116;

1.116
date	2013.06.13.11.23.54;	author mikeb;	state Exp;
branches;
next	1.115;

1.115
date	2013.05.31.14.27.21;	author mikeb;	state Exp;
branches;
next	1.114;

1.114
date	2013.05.29.17.04.46;	author mikeb;	state Exp;
branches;
next	1.113;

1.113
date	2013.02.22.01.26.55;	author dlg;	state Exp;
branches;
next	1.112;

1.112
date	2013.02.09.23.39.38;	author brad;	state Exp;
branches;
next	1.111;

1.111
date	2013.01.30.11.15.06;	author dlg;	state Exp;
branches;
next	1.110;

1.110
date	2013.01.29.00.41.02;	author dlg;	state Exp;
branches;
next	1.109;

1.109
date	2013.01.16.20.56.26;	author miod;	state Exp;
branches;
next	1.108;

1.108
date	2013.01.15.23.06.11;	author claudio;	state Exp;
branches;
next	1.107;

1.107
date	2013.01.15.05.04.17;	author claudio;	state Exp;
branches;
next	1.106;

1.106
date	2013.01.10.01.17.00;	author dlg;	state Exp;
branches;
next	1.105;

1.105
date	2013.01.10.00.47.39;	author dlg;	state Exp;
branches;
next	1.104;

1.104
date	2011.02.15.19.49.47;	author robert;	state Exp;
branches;
next	1.103;

1.103
date	2010.09.20.07.40.38;	author deraadt;	state Exp;
branches;
next	1.102;

1.102
date	2010.09.07.16.21.44;	author deraadt;	state Exp;
branches;
next	1.101;

1.101
date	2010.07.09.00.04.42;	author sthen;	state Exp;
branches;
next	1.100;

1.100
date	2010.01.09.06.19.01;	author naddy;	state Exp;
branches;
next	1.99;

1.99
date	2009.10.11.10.36.31;	author sthen;	state Exp;
branches;
next	1.98;

1.98
date	2009.07.21.13.09.41;	author naddy;	state Exp;
branches;
next	1.97;

1.97
date	2009.06.19.21.31.54;	author naddy;	state Exp;
branches;
next	1.96;

1.96
date	2009.06.19.14.31.51;	author naddy;	state Exp;
branches;
next	1.95;

1.95
date	2009.06.04.00.59.21;	author naddy;	state Exp;
branches;
next	1.94;

1.94
date	2009.06.03.05.19.21;	author naddy;	state Exp;
branches;
next	1.93;

1.93
date	2009.06.02.03.58.17;	author naddy;	state Exp;
branches;
next	1.92;

1.92
date	2009.05.21.23.04.20;	author sthen;	state Exp;
branches;
next	1.91;

1.91
date	2009.04.23.19.15.07;	author kettenis;	state Exp;
branches;
next	1.90;

1.90
date	2008.12.23.00.12.22;	author dlg;	state Exp;
branches;
next	1.89;

1.89
date	2008.12.03.23.51.52;	author dlg;	state Exp;
branches;
next	1.88;

1.88
date	2008.11.08.07.37.07;	author deraadt;	state Exp;
branches;
next	1.87;

1.87
date	2008.11.08.07.10.13;	author brad;	state Exp;
branches;
next	1.86;

1.86
date	2008.11.07.22.53.31;	author brad;	state Exp;
branches;
next	1.85;

1.85
date	2008.07.17.19.59.44;	author brad;	state Exp;
branches;
next	1.84;

1.84
date	2008.07.16.03.56.25;	author brad;	state Exp;
branches;
next	1.83;

1.83
date	2008.04.20.01.32.43;	author brad;	state Exp;
branches;
next	1.82;

1.82
date	2008.04.03.22.50.24;	author brad;	state Exp;
branches;
next	1.81;

1.81
date	2008.03.02.11.24.50;	author brad;	state Exp;
branches;
next	1.80;

1.80
date	2008.02.20.12.17.25;	author brad;	state Exp;
branches;
next	1.79;

1.79
date	2008.02.20.10.26.53;	author sthen;	state Exp;
branches;
next	1.78;

1.78
date	2008.02.18.09.40.11;	author brad;	state Exp;
branches;
next	1.77;

1.77
date	2008.02.02.04.03.33;	author brad;	state Exp;
branches;
next	1.76;

1.76
date	2008.01.31.03.43.00;	author brad;	state Exp;
branches;
next	1.75;

1.75
date	2007.11.17.13.55.27;	author brad;	state Exp;
branches;
next	1.74;

1.74
date	2007.10.13.16.29.52;	author kettenis;	state Exp;
branches;
next	1.73;

1.73
date	2007.10.11.19.44.39;	author kettenis;	state Exp;
branches;
next	1.72;

1.72
date	2007.02.10.01.23.19;	author krw;	state Exp;
branches;
next	1.71;

1.71
date	2007.01.30.02.35.16;	author krw;	state Exp;
branches;
next	1.70;

1.70
date	2007.01.10.23.04.53;	author kettenis;	state Exp;
branches;
next	1.69;

1.69
date	2006.12.22.17.37.50;	author krw;	state Exp;
branches;
next	1.68;

1.68
date	2006.10.22.21.45.36;	author brad;	state Exp;
branches;
next	1.67;

1.67
date	2006.10.19.10.55.56;	author tom;	state Exp;
branches;
next	1.66;

1.66
date	2006.10.17.22.28.07;	author brad;	state Exp;
branches;
next	1.65;

1.65
date	2006.10.15.06.49.19;	author brad;	state Exp;
branches;
next	1.64;

1.64
date	2006.10.07.23.08.50;	author brad;	state Exp;
branches;
next	1.63;

1.63
date	2006.10.07.20.28.48;	author brad;	state Exp;
branches;
next	1.62;

1.62
date	2006.10.01.17.29.48;	author brad;	state Exp;
branches;
next	1.61;

1.61
date	2006.10.01.00.34.07;	author brad;	state Exp;
branches;
next	1.60;

1.60
date	2006.09.17.23.31.07;	author brad;	state Exp;
branches;
next	1.59;

1.59
date	2006.09.17.22.19.38;	author brad;	state Exp;
branches;
next	1.58;

1.58
date	2006.09.17.17.20.42;	author brad;	state Exp;
branches;
next	1.57;

1.57
date	2006.08.29.17.44.16;	author kettenis;	state Exp;
branches;
next	1.56;

1.56
date	2006.08.28.03.06.47;	author brad;	state Exp;
branches;
next	1.55;

1.55
date	2006.08.28.01.12.17;	author brad;	state Exp;
branches;
next	1.54;

1.54
date	2006.08.28.00.52.16;	author brad;	state Exp;
branches;
next	1.53;

1.53
date	2006.08.27.21.06.16;	author brad;	state Exp;
branches;
next	1.52;

1.52
date	2006.08.16.02.37.00;	author brad;	state Exp;
branches;
next	1.51;

1.51
date	2006.07.18.01.24.46;	author brad;	state Exp;
branches;
next	1.50;

1.50
date	2006.07.01.06.26.51;	author brad;	state Exp;
branches;
next	1.49;

1.49
date	2006.06.22.04.15.47;	author brad;	state Exp;
branches;
next	1.48;

1.48
date	2006.06.19.05.05.53;	author brad;	state Exp;
branches;
next	1.47;

1.47
date	2006.05.28.00.20.21;	author brad;	state Exp;
branches;
next	1.46;

1.46
date	2006.04.21.03.22.18;	author brad;	state Exp;
branches;
next	1.45;

1.45
date	2006.04.13.23.35.19;	author brad;	state Exp;
branches;
next	1.44;

1.44
date	2006.04.05.01.47.38;	author brad;	state Exp;
branches;
next	1.43;

1.43
date	2006.03.10.21.39.01;	author brad;	state Exp;
branches;
next	1.42;

1.42
date	2006.02.21.01.45.48;	author brad;	state Exp;
branches;
next	1.41;

1.41
date	2006.02.11.09.01.30;	author brad;	state Exp;
branches;
next	1.40;

1.40
date	2006.02.01.01.09.15;	author brad;	state Exp;
branches;
next	1.39;

1.39
date	2006.01.25.21.01.24;	author brad;	state Exp;
branches;
next	1.38;

1.38
date	2006.01.21.16.35.39;	author brad;	state Exp;
branches;
next	1.37;

1.37
date	2005.12.28.20.27.38;	author brad;	state Exp;
branches;
next	1.36;

1.36
date	2005.12.12.05.25.08;	author brad;	state Exp;
branches;
next	1.35;

1.35
date	2005.12.11.01.37.21;	author brad;	state Exp;
branches;
next	1.34;

1.34
date	2005.12.08.01.00.47;	author brad;	state Exp;
branches;
next	1.33;

1.33
date	2005.11.27.00.26.36;	author brad;	state Exp;
branches;
next	1.32;

1.32
date	2005.11.24.12.25.07;	author fgsch;	state Exp;
branches;
next	1.31;

1.31
date	2005.11.19.23.04.48;	author brad;	state Exp;
branches;
next	1.30;

1.30
date	2005.10.09.23.41.55;	author brad;	state Exp;
branches;
next	1.29;

1.29
date	2005.10.09.20.07.32;	author brad;	state Exp;
branches;
next	1.28;

1.28
date	2005.09.04.20.28.29;	author brad;	state Exp;
branches;
next	1.27;

1.27
date	2005.08.30.03.18.30;	author brad;	state Exp;
branches;
next	1.26;

1.26
date	2005.08.27.14.12.36;	author brad;	state Exp;
branches;
next	1.25;

1.25
date	2005.07.02.00.34.29;	author brad;	state Exp;
branches;
next	1.24;

1.24
date	2005.06.29.03.36.06;	author brad;	state Exp;
branches;
next	1.23;

1.23
date	2005.06.17.15.15.43;	author brad;	state Exp;
branches;
next	1.22;

1.22
date	2005.06.07.20.39.07;	author brad;	state Exp;
branches;
next	1.21;

1.21
date	2005.04.05.01.12.52;	author brad;	state Exp;
branches;
next	1.20;

1.20
date	2005.03.07.13.31.40;	author krw;	state Exp;
branches;
next	1.19;

1.19
date	2005.03.04.00.55.44;	author krw;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.26.22.48.31;	author brad;	state Exp;
branches;
next	1.17;

1.17
date	2004.12.17.03.13.59;	author brad;	state Exp;
branches;
next	1.16;

1.16
date	2004.12.16.14.30.32;	author brad;	state Exp;
branches;
next	1.15;

1.15
date	2004.12.12.19.11.26;	author brad;	state Exp;
branches;
next	1.14;

1.14
date	2004.12.12.05.03.05;	author brad;	state Exp;
branches;
next	1.13;

1.13
date	2004.11.11.18.35.41;	author brad;	state Exp;
branches;
next	1.12;

1.12
date	2004.10.31.06.59.25;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2004.09.28.04.37.32;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	2004.08.05.19.57.17;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2004.05.19.11.36.59;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.19.21.57.36;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.13.16.18.56;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.03.21.24.28;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.26.04.38.40;	author nate;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.08.21.46.23;	author nate;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.06.23.13.58;	author nate;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.09.21.16.20;	author nate;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2001.10.05.18.57.28;	author nate;	state Exp;
branches;
next	;

1.2.4.1
date	2001.10.31.03.22.45;	author nate;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.28.15.35.57;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2003.03.28.00.38.21;	author niklas;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2004.02.19.10.56.26;	author niklas;	state Exp;
branches;
next	1.2.4.5;

1.2.4.5
date	2004.06.05.23.12.49;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2002.06.11.03.42.25;	author art;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2003.05.19.22.18.00;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.130
log
@Make it possible to detach bge(4).

ok deraadt@@
@
text
@/*	$OpenBSD: if_bgereg.h,v 1.129 2015/11/10 20:20:34 miod Exp $	*/

/*
 * Copyright (c) 2001 Wind River Systems
 * Copyright (c) 1997, 1998, 1999, 2001
 *	Bill Paul <wpaul@@windriver.com>.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Bill Paul.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY Bill Paul AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL Bill Paul OR THE VOICES IN HIS HEAD
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $FreeBSD: if_bgereg.h,v 1.11 2002/11/14 23:54:50 sam Exp $
 */

/*
 * BCM570x memory map. The internal memory layout varies somewhat
 * depending on whether or not we have external SSRAM attached.
 * The BCM5700 can have up to 16MB of external memory. The BCM5701
 * is apparently not designed to use external SSRAM. The mappings
 * up to the first 4 send rings are the same for both internal and
 * external memory configurations. Note that mini RX ring space is
 * only available with external SSRAM configurations, which means
 * the mini RX ring is not supported on the BCM5701.
 *
 * The NIC's memory can be accessed by the host in one of 3 ways:
 *
 * 1) Indirect register access. The REG_BASEADDR and REG_DATA
 *    registers in PCI config space can be used to read any 32-bit
 *    address within the NIC's memory.
 *
 * 2) Memory window access. The MEMWIN_BASEADDR register in PCI config
 *    space can be used in conjunction with the memory window in the
 *    device register space at offset 0x8000 to read any 32K chunk
 *    of NIC memory.
 *
 * 3) Flat mode. If the 'flat mode' bit in the PCI state register is
 *    set, the device I/O mapping consumes 32MB of host address space,
 *    allowing all of the registers and internal NIC memory to be
 *    accessed directly. NIC memory addresses are offset by 0x01000000.
 *    Flat mode consumes so much host address space that it is not
 *    recommended.
 */
#define	BGE_PAGE_ZERO			0x00000000
#define	BGE_PAGE_ZERO_END		0x000000FF
#define	BGE_SEND_RING_RCB		0x00000100
#define	BGE_SEND_RING_RCB_END		0x000001FF
#define	BGE_RX_RETURN_RING_RCB		0x00000200
#define	BGE_RX_RETURN_RING_RCB_END	0x000002FF
#define	BGE_STATS_BLOCK			0x00000300
#define	BGE_STATS_BLOCK_END		0x00000AFF
#define	BGE_STATUS_BLOCK		0x00000B00
#define	BGE_STATUS_BLOCK_END		0x00000B4F
#define	BGE_SOFTWARE_GENCOMM		0x00000B50
#define	BGE_SOFTWARE_GENCOMM_SIG	0x00000B54
#define	BGE_SOFTWARE_GENCOMM_NICCFG	0x00000B58
#define	BGE_SOFTWARE_GENCOMM_VER	0x00000B5C
#define	   BGE_VER_SHIFT			16
#define	BGE_SOFTWARE_GENCOMM_FW		0x00000B78
#define	   BGE_FW_PAUSE				0x00000002
#define	BGE_SOFTWARE_GENCOMM_NICCFG2	0x00000D38
#define	BGE_SOFTWARE_GENCOMM_NICCFG3	0x00000D3C
#define	BGE_SOFTWARE_GENCOMM_NICCFG4	0x00000D60
#define	   BGE_NICCFG4_GMII_MODE		0x00000002
#define	   BGE_NICCFG4_RGMII_STD_IBND_DISABLE	0x00000004
#define	   BGE_NICCFG4_RGMII_EXT_IBND_RX_EN	0x00000008
#define	   BGE_NICCFG4_RGMII_EXT_IBND_TX_EN	0x00000010
#define	BGE_SOFTWARE_GENCOMM_END	0x00000FFF
#define	BGE_UNMAPPED			0x00001000
#define	BGE_UNMAPPED_END		0x00001FFF
#define	BGE_DMA_DESCRIPTORS		0x00002000
#define	BGE_DMA_DESCRIPTORS_END		0x00003FFF
#define	BGE_SEND_RING_5717		0x00004000
#define	BGE_SEND_RING_1_TO_4		0x00004000
#define	BGE_SEND_RING_1_TO_4_END	0x00005FFF

/* Mappings for internal memory configuration */
#define	BGE_STD_RX_RINGS		0x00006000
#define	BGE_STD_RX_RINGS_END		0x00006FFF
#define	BGE_JUMBO_RX_RINGS		0x00007000
#define	BGE_JUMBO_RX_RINGS_END		0x00007FFF
#define	BGE_BUFFPOOL_1			0x00008000
#define	BGE_BUFFPOOL_1_END		0x0000FFFF
#define	BGE_BUFFPOOL_2			0x00010000 /* or expansion ROM */
#define	BGE_BUFFPOOL_2_END		0x00017FFF
#define	BGE_BUFFPOOL_3			0x00018000 /* or expansion ROM */
#define	BGE_BUFFPOOL_3_END		0x0001FFFF
#define	BGE_STD_RX_RINGS_5717		0x00040000
#define	BGE_JUMBO_RX_RINGS_5717		0x00044400

/* Mappings for external SSRAM configurations */
#define	BGE_SEND_RING_5_TO_6		0x00006000
#define	BGE_SEND_RING_5_TO_6_END	0x00006FFF
#define	BGE_SEND_RING_7_TO_8		0x00007000
#define	BGE_SEND_RING_7_TO_8_END	0x00007FFF
#define	BGE_SEND_RING_9_TO_16		0x00008000
#define	BGE_SEND_RING_9_TO_16_END	0x0000BFFF
#define	BGE_EXT_STD_RX_RINGS		0x0000C000
#define	BGE_EXT_STD_RX_RINGS_END	0x0000CFFF
#define	BGE_EXT_JUMBO_RX_RINGS		0x0000D000
#define	BGE_EXT_JUMBO_RX_RINGS_END	0x0000DFFF
#define	BGE_MINI_RX_RINGS		0x0000E000
#define	BGE_MINI_RX_RINGS_END		0x0000FFFF
#define	BGE_AVAIL_REGION1		0x00010000 /* or expansion ROM */
#define	BGE_AVAIL_REGION1_END		0x00017FFF
#define	BGE_AVAIL_REGION2		0x00018000 /* or expansion ROM */
#define	BGE_AVAIL_REGION2_END		0x0001FFFF
#define	BGE_EXT_SSRAM			0x00020000
#define	BGE_EXT_SSRAM_END		0x000FFFFF


/*
 * BCM570x register offsets. These are memory mapped registers
 * which can be accessed with the CSR_READ_4()/CSR_WRITE_4() macros.
 * Each register must be accessed using 32 bit operations.
 *
 * All registers are accessed through a 32K shared memory block.
 * The first group of registers are actually copies of the PCI
 * configuration space registers.
 */

/*
 * PCI registers defined in the PCI 2.2 spec.
 */
#define	BGE_PCI_VID			0x00
#define	BGE_PCI_DID			0x02
#define	BGE_PCI_CMD			0x04
#define	BGE_PCI_STS			0x06
#define	BGE_PCI_REV			0x08
#define	BGE_PCI_CLASS			0x09
#define	BGE_PCI_CACHESZ			0x0C
#define	BGE_PCI_LATTIMER		0x0D
#define	BGE_PCI_HDRTYPE			0x0E
#define	BGE_PCI_BIST			0x0F
#define	BGE_PCI_BAR0			0x10
#define	BGE_PCI_BAR1			0x14
#define	BGE_PCI_BAR2			0x18
#define	BGE_PCI_SUBSYS			0x2C
#define	BGE_PCI_SUBVID			0x2E
#define	BGE_PCI_ROMBASE			0x30
#define	BGE_PCI_CAPPTR			0x34
#define	BGE_PCI_INTLINE			0x3C
#define	BGE_PCI_INTPIN			0x3D
#define	BGE_PCI_MINGNT			0x3E
#define	BGE_PCI_MAXLAT			0x3F
#define	BGE_PCI_PCIXCAP			0x40
#define	BGE_PCI_NEXTPTR_PM		0x41
#define	BGE_PCI_PCIX_CMD		0x42
#define	BGE_PCI_PCIX_STS		0x44
#define	BGE_PCI_PWRMGMT_CAPID		0x48
#define	BGE_PCI_NEXTPTR_VPD		0x49
#define	BGE_PCI_PWRMGMT_CAPS		0x4A
#define	BGE_PCI_PWRMGMT_CMD		0x4C
#define	BGE_PCI_PWRMGMT_STS		0x4D
#define	BGE_PCI_PWRMGMT_DATA		0x4F
#define	BGE_PCI_VPD_CAPID		0x50
#define	BGE_PCI_NEXTPTR_MSI		0x51
#define	BGE_PCI_VPD_ADDR		0x52
#define	BGE_PCI_VPD_DATA		0x54
#define	BGE_PCI_MSI_CAPID		0x58
#define	BGE_PCI_NEXTPTR_NONE		0x59
#define	BGE_PCI_MSI_CTL			0x5A
#define	BGE_PCI_MSI_ADDR_HI		0x5C
#define	BGE_PCI_MSI_ADDR_LO		0x60
#define	BGE_PCI_MSI_DATA		0x64

/* PCI MSI. ??? */
#define	BGE_PCIE_CAPID_REG		0xD0
#define	BGE_PCIE_CAPID			0x10

/*
 * PCI registers specific to the BCM570x family.
 */
#define	BGE_PCI_MISC_CTL		0x68
#define	BGE_PCI_DMA_RW_CTL		0x6C
#define	BGE_PCI_PCISTATE		0x70
#define	BGE_PCI_CLKCTL			0x74
#define	BGE_PCI_REG_BASEADDR		0x78
#define	BGE_PCI_MEMWIN_BASEADDR		0x7C
#define	BGE_PCI_REG_DATA		0x80
#define	BGE_PCI_MEMWIN_DATA		0x84
#define	BGE_PCI_MODECTL			0x88
#define	BGE_PCI_MISC_CFG		0x8C
#define	BGE_PCI_MISC_LOCALCTL		0x90
#define	BGE_PCI_UNDI_RX_STD_PRODIDX_HI	0x98
#define	BGE_PCI_UNDI_RX_STD_PRODIDX_LO	0x9C
#define	BGE_PCI_UNDI_RX_RTN_CONSIDX_HI	0xA0
#define	BGE_PCI_UNDI_RX_RTN_CONSIDX_LO	0xA4
#define	BGE_PCI_UNDI_TX_BD_PRODIDX_HI	0xA8
#define	BGE_PCI_UNDI_TX_BD_PRODIDX_LO	0xAC
#define	BGE_PCI_ISR_MBX_HI		0xB0
#define	BGE_PCI_ISR_MBX_LO		0xB4
#define	BGE_PCI_PRODID_ASICREV		0xBC
#define	BGE_PCI_GEN2_PRODID_ASICREV	0xF4
#define	BGE_PCI_GEN15_PRODID_ASICREV	0xFC

/* PCI Misc. Host control register */
#define	BGE_PCIMISCCTL_CLEAR_INTA	0x00000001
#define	BGE_PCIMISCCTL_MASK_PCI_INTR	0x00000002
#define	BGE_PCIMISCCTL_ENDIAN_BYTESWAP	0x00000004
#define	BGE_PCIMISCCTL_ENDIAN_WORDSWAP	0x00000008
#define	BGE_PCIMISCCTL_PCISTATE_RW	0x00000010
#define	BGE_PCIMISCCTL_CLOCKCTL_RW	0x00000020
#define	BGE_PCIMISCCTL_REG_WORDSWAP	0x00000040
#define	BGE_PCIMISCCTL_INDIRECT_ACCESS	0x00000080
#define	BGE_PCIMISCCTL_TAGGED_STATUS	0x00000200
#define	BGE_PCIMISCCTL_ASICREV		0xFFFF0000
#define	BGE_PCIMISCCTL_ASICREV_SHIFT	16

#if BYTE_ORDER == LITTLE_ENDIAN
#define	BGE_DMA_SWAP_OPTIONS \
	BGE_MODECTL_WORDSWAP_NONFRAME| \
	BGE_MODECTL_BYTESWAP_DATA|BGE_MODECTL_WORDSWAP_DATA
#else
#define	BGE_DMA_SWAP_OPTIONS \
	BGE_MODECTL_WORDSWAP_NONFRAME|BGE_MODECTL_BYTESWAP_NONFRAME| \
	BGE_MODECTL_BYTESWAP_DATA|BGE_MODECTL_WORDSWAP_DATA
#endif

#define	BGE_INIT \
	(BGE_PCIMISCCTL_ENDIAN_WORDSWAP|BGE_PCIMISCCTL_CLEAR_INTA| \
	 BGE_PCIMISCCTL_MASK_PCI_INTR|BGE_PCIMISCCTL_INDIRECT_ACCESS)

#define	BGE_CHIPID_BCM5700_A0		0x7000
#define	BGE_CHIPID_BCM5700_A1		0x7001
#define	BGE_CHIPID_BCM5700_B0		0x7100
#define	BGE_CHIPID_BCM5700_B1		0x7101
#define	BGE_CHIPID_BCM5700_B2		0x7102
#define	BGE_CHIPID_BCM5700_B3		0x7103
#define	BGE_CHIPID_BCM5700_ALTIMA	0x7104
#define	BGE_CHIPID_BCM5700_C0		0x7200
#define	BGE_CHIPID_BCM5701_A0		0x0000	/* grrrr */
#define	BGE_CHIPID_BCM5701_B0		0x0100
#define	BGE_CHIPID_BCM5701_B2		0x0102
#define	BGE_CHIPID_BCM5701_B5		0x0105
#define	BGE_CHIPID_BCM5703_A0		0x1000
#define	BGE_CHIPID_BCM5703_A1		0x1001
#define	BGE_CHIPID_BCM5703_A2		0x1002
#define	BGE_CHIPID_BCM5703_A3		0x1003
#define	BGE_CHIPID_BCM5703_B0		0x1100
#define	BGE_CHIPID_BCM5704_A0		0x2000
#define	BGE_CHIPID_BCM5704_A1		0x2001
#define	BGE_CHIPID_BCM5704_A2		0x2002
#define	BGE_CHIPID_BCM5704_A3		0x2003
#define	BGE_CHIPID_BCM5704_B0		0x2100
#define	BGE_CHIPID_BCM5705_A0		0x3000
#define	BGE_CHIPID_BCM5705_A1		0x3001
#define	BGE_CHIPID_BCM5705_A2		0x3002
#define	BGE_CHIPID_BCM5705_A3		0x3003
#define	BGE_CHIPID_BCM5750_A0		0x4000
#define	BGE_CHIPID_BCM5750_A1		0x4001
#define	BGE_CHIPID_BCM5750_A3		0x4003
#define	BGE_CHIPID_BCM5750_B0		0x4010
#define	BGE_CHIPID_BCM5750_B1		0x4101
#define	BGE_CHIPID_BCM5750_C0		0x4200
#define	BGE_CHIPID_BCM5750_C1		0x4201
#define	BGE_CHIPID_BCM5750_C2		0x4202
#define	BGE_CHIPID_BCM5714_A0		0x5000
#define	BGE_CHIPID_BCM5752_A0		0x6000
#define	BGE_CHIPID_BCM5752_A1		0x6001
#define	BGE_CHIPID_BCM5752_A2		0x6002
#define	BGE_CHIPID_BCM5714_B0		0x8000
#define	BGE_CHIPID_BCM5714_B3		0x8003
#define	BGE_CHIPID_BCM5715_A0		0x9000
#define	BGE_CHIPID_BCM5715_A1		0x9001
#define	BGE_CHIPID_BCM5715_A3		0x9003
#define	BGE_CHIPID_BCM5755_A0		0xa000
#define	BGE_CHIPID_BCM5755_A1		0xa001
#define	BGE_CHIPID_BCM5755_A2		0xa002
#define	BGE_CHIPID_BCM5755_C0		0xa200
#define	BGE_CHIPID_BCM5787_A0		0xb000
#define	BGE_CHIPID_BCM5787_A1		0xb001
#define	BGE_CHIPID_BCM5787_A2		0xb002
#define	BGE_CHIPID_BCM5761_A0		0x5761000
#define	BGE_CHIPID_BCM5761_A1		0x5761100
#define	BGE_CHIPID_BCM5784_A0		0x5784000
#define	BGE_CHIPID_BCM5784_A1		0x5784100
#define	BGE_CHIPID_BCM5906_A0		0xc000
#define	BGE_CHIPID_BCM5906_A1		0xc001
#define	BGE_CHIPID_BCM5906_A2		0xc002
#define	BGE_CHIPID_BCM57780_A0		0x57780000
#define	BGE_CHIPID_BCM57780_A1		0x57780001
#define	BGE_CHIPID_BCM5717_A0		0x05717000
#define	BGE_CHIPID_BCM5717_B0		0x05717100
#define	BGE_CHIPID_BCM5719_A0		0x05719000
#define	BGE_CHIPID_BCM5720_A0		0x05720000
#define	BGE_CHIPID_BCM5762_A0		0x05762000
#define	BGE_CHIPID_BCM57765_A0		0x57785000
#define	BGE_CHIPID_BCM57765_B0		0x57785100

/* shorthand one */
#define	BGE_ASICREV(x)			((x) >> 12)
#define	BGE_ASICREV_BCM5700		0x07
#define	BGE_ASICREV_BCM5701		0x00
#define	BGE_ASICREV_BCM5703		0x01
#define	BGE_ASICREV_BCM5704		0x02
#define	BGE_ASICREV_BCM5705		0x03
#define	BGE_ASICREV_BCM5750		0x04
#define	BGE_ASICREV_BCM5714_A0		0x05	/* 5714, 5715 */
#define	BGE_ASICREV_BCM5752		0x06
#define	BGE_ASICREV_BCM5780		0x08
#define	BGE_ASICREV_BCM5714		0x09	/* 5714, 5715 */
#define	BGE_ASICREV_BCM5755		0x0a
#define	BGE_ASICREV_BCM5787		0x0b
#define	BGE_ASICREV_BCM5906		0x0c
#define	BGE_ASICREV_USE_PRODID_REG	0x0f
#define	BGE_ASICREV_BCM5717		0x5717
#define	BGE_ASICREV_BCM5719		0x5719
#define	BGE_ASICREV_BCM5720		0x5720
#define	BGE_ASICREV_BCM5761		0x5761
#define	BGE_ASICREV_BCM5762		0x5762
#define	BGE_ASICREV_BCM5784		0x5784
#define	BGE_ASICREV_BCM5785		0x5785
#define	BGE_ASICREV_BCM57765		0x57785
#define	BGE_ASICREV_BCM57766		0x57766
#define	BGE_ASICREV_BCM57780		0x57780

/* chip revisions */
#define	BGE_CHIPREV(x)			((x) >> 8)
#define	BGE_CHIPREV_5700_AX		0x70
#define	BGE_CHIPREV_5700_BX		0x71
#define	BGE_CHIPREV_5700_CX		0x72
#define	BGE_CHIPREV_5701_AX		0x00
#define	BGE_CHIPREV_5703_AX		0x10
#define	BGE_CHIPREV_5704_AX		0x20
#define	BGE_CHIPREV_5704_BX		0x21
#define	BGE_CHIPREV_5750_AX		0x40
#define	BGE_CHIPREV_5750_BX		0x41
#define	BGE_CHIPREV_5717_AX		0x57170
#define	BGE_CHIPREV_5717_BX		0x57171
#define	BGE_CHIPREV_5761_AX		0x57611
#define	BGE_CHIPREV_57765_AX		0x577850
#define	BGE_CHIPREV_5784_AX		0x57841

/* PCI DMA Read/Write Control register */
#define	BGE_PCIDMARWCTL_MINDMA		0x000000FF
#define	BGE_PCIDMARWCTL_DIS_CACHE_ALIGNMENT	0x00000001
#define	BGE_PCIDMARWCTL_RDADRR_BNDRY	0x00000700
#define	BGE_PCIDMARWCTL_WRADDR_BNDRY	0x00003800
#define	BGE_PCIDMARWCTL_ONEDMA_ATONCE	0x0000C000
#define	BGE_PCIDMARWCTL_ONEDMA_ATONCE_GLOBAL	0x00004000
#define	BGE_PCIDMARWCTL_ONEDMA_ATONCE_LOCAL	0x00008000
#define	BGE_PCIDMARWCTL_RD_WAT		0x00070000
#define	BGE_PCIDMARWCTL_WR_WAT		0x00380000
#define	BGE_PCIDMARWCTL_USE_MRM		0x00400000
#define	BGE_PCIDMARWCTL_ASRT_ALL_BE	0x00800000
#define	BGE_PCIDMARWCTL_DFLT_PCI_RD_CMD	0x0F000000
#define	BGE_PCIDMARWCTL_DFLT_PCI_WR_CMD	0xF0000000

#define	BGE_PCIDMARWCTL_RD_WAT_SHIFT(x)	((x) << 16)
#define	BGE_PCIDMARWCTL_WR_WAT_SHIFT(x)	((x) << 19)
#define	BGE_PCIDMARWCTL_RD_CMD_SHIFT(x)	((x) << 24)
#define	BGE_PCIDMARWCTL_WR_CMD_SHIFT(x)	((x) << 28)

#define	BGE_PCIDMARWCTL_TAGGED_STATUS_WA	0x00000080
#define	BGE_PCIDMARWCTL_CRDRDR_RDMA_MRRS_MSK	0x00000380

#define	BGE_PCI_READ_BNDRY_DISABLE	0x00000000
#define	BGE_PCI_READ_BNDRY_16BYTES	0x00000100
#define	BGE_PCI_READ_BNDRY_32BYTES	0x00000200
#define	BGE_PCI_READ_BNDRY_64BYTES	0x00000300
#define	BGE_PCI_READ_BNDRY_128BYTES	0x00000400
#define	BGE_PCI_READ_BNDRY_256BYTES	0x00000500
#define	BGE_PCI_READ_BNDRY_512BYTES	0x00000600
#define	BGE_PCI_READ_BNDRY_1024BYTES	0x00000700

#define	BGE_PCI_WRITE_BNDRY_DISABLE	0x00000000
#define	BGE_PCI_WRITE_BNDRY_16BYTES	0x00000800
#define	BGE_PCI_WRITE_BNDRY_32BYTES	0x00001000
#define	BGE_PCI_WRITE_BNDRY_64BYTES	0x00001800
#define	BGE_PCI_WRITE_BNDRY_128BYTES	0x00002000
#define	BGE_PCI_WRITE_BNDRY_256BYTES	0x00002800
#define	BGE_PCI_WRITE_BNDRY_512BYTES	0x00003000
#define	BGE_PCI_WRITE_BNDRY_1024BYTES	0x00003800

/*
 * PCI state register -- note, this register is read only
 * unless the PCISTATE_WR bit of the PCI Misc. Host Control
 * register is set.
 */
#define	BGE_PCISTATE_FORCE_RESET	0x00000001
#define	BGE_PCISTATE_INTR_NOT_ACTIVE	0x00000002
#define	BGE_PCISTATE_PCI_BUSMODE	0x00000004 /* 1 = PCI, 0 = PCI-X */
#define	BGE_PCISTATE_PCI_BUSSPEED	0x00000008 /* 1 = 66/133, 0 = 33/66 */
#define	BGE_PCISTATE_32BIT_BUS		0x00000010 /* 1 = 32bit, 0 = 64bit */
#define	BGE_PCISTATE_ROM_ENABLE		0x00000020
#define	BGE_PCISTATE_ROM_RETRY_ENABLE	0x00000040
#define	BGE_PCISTATE_FLATVIEW_MODE	0x00000100
#define	BGE_PCISTATE_PCI_TGT_RETRY_MAX	0x00000E00
#define	BGE_PCISTATE_RETRY_SAME_DMA	0x00002000
#define	BGE_PCISTATE_ALLOW_APE_CTLSPC_WR	0x00010000
#define	BGE_PCISTATE_ALLOW_APE_SHMEM_WR	0x00020000
#define	BGE_PCISTATE_ALLOW_APE_PSPACE_WR	0x00040000

/*
 * The following bits in PCI state register are reserved.
 * If we check that the register values reverts on reset,
 * do not check these bits. On some 5704C (rev A3) and some
 * Altima chips, these bits do not revert until much later
 * in the bge driver's bge_reset() chip-reset state machine.
 */
#define	BGE_PCISTATE_RESERVED	((1 << 12) + (1 <<7))

/*
 * PCI Clock Control register -- note, this register is read only
 * unless the CLOCKCTL_RW bit of the PCI Misc. Host Control
 * register is set.
 */
#define	BGE_PCICLOCKCTL_DETECTED_SPEED	0x0000000F
#define	BGE_PCICLOCKCTL_M66EN		0x00000080
#define	BGE_PCICLOCKCTL_LOWPWR_CLKMODE	0x00000200
#define	BGE_PCICLOCKCTL_RXCPU_CLK_DIS	0x00000400
#define	BGE_PCICLOCKCTL_TXCPU_CLK_DIS	0x00000800
#define	BGE_PCICLOCKCTL_ALTCLK		0x00001000
#define	BGE_PCICLOCKCTL_ALTCLK_SRC	0x00002000
#define	BGE_PCICLOCKCTL_PCIPLL_DISABLE	0x00004000
#define	BGE_PCICLOCKCTL_SYSPLL_DISABLE	0x00008000
#define	BGE_PCICLOCKCTL_BIST_ENABLE	0x00010000

/*
 * High priority mailbox registers
 * Each mailbox is 64-bits wide, though we only use the
 * lower 32 bits. To write a 64-bit value, write the upper 32 bits
 * first. The NIC will load the mailbox after the lower 32 bit word
 * has been updated.
 */
#define	BGE_MBX_IRQ0_HI			0x0200
#define	BGE_MBX_IRQ0_LO			0x0204
#define	BGE_MBX_IRQ1_HI			0x0208
#define	BGE_MBX_IRQ1_LO			0x020C
#define	BGE_MBX_IRQ2_HI			0x0210
#define	BGE_MBX_IRQ2_LO			0x0214
#define	BGE_MBX_IRQ3_HI			0x0218
#define	BGE_MBX_IRQ3_LO			0x021C
#define	BGE_MBX_GEN0_HI			0x0220
#define	BGE_MBX_GEN0_LO			0x0224
#define	BGE_MBX_GEN1_HI			0x0228
#define	BGE_MBX_GEN1_LO			0x022C
#define	BGE_MBX_GEN2_HI			0x0230
#define	BGE_MBX_GEN2_LO			0x0234
#define	BGE_MBX_GEN3_HI			0x0228
#define	BGE_MBX_GEN3_LO			0x022C
#define	BGE_MBX_GEN4_HI			0x0240
#define	BGE_MBX_GEN4_LO			0x0244
#define	BGE_MBX_GEN5_HI			0x0248
#define	BGE_MBX_GEN5_LO			0x024C
#define	BGE_MBX_GEN6_HI			0x0250
#define	BGE_MBX_GEN6_LO			0x0254
#define	BGE_MBX_GEN7_HI			0x0258
#define	BGE_MBX_GEN7_LO			0x025C
#define	BGE_MBX_RELOAD_STATS_HI		0x0260
#define	BGE_MBX_RELOAD_STATS_LO		0x0264
#define	BGE_MBX_RX_STD_PROD_HI		0x0268
#define	BGE_MBX_RX_STD_PROD_LO		0x026C
#define	BGE_MBX_RX_JUMBO_PROD_HI	0x0270
#define	BGE_MBX_RX_JUMBO_PROD_LO	0x0274
#define	BGE_MBX_RX_MINI_PROD_HI		0x0278
#define	BGE_MBX_RX_MINI_PROD_LO		0x027C
#define	BGE_MBX_RX_CONS0_HI		0x0280
#define	BGE_MBX_RX_CONS0_LO		0x0284
#define	BGE_MBX_RX_CONS1_HI		0x0288
#define	BGE_MBX_RX_CONS1_LO		0x028C
#define	BGE_MBX_RX_CONS2_HI		0x0290
#define	BGE_MBX_RX_CONS2_LO		0x0294
#define	BGE_MBX_RX_CONS3_HI		0x0298
#define	BGE_MBX_RX_CONS3_LO		0x029C
#define	BGE_MBX_RX_CONS4_HI		0x02A0
#define	BGE_MBX_RX_CONS4_LO		0x02A4
#define	BGE_MBX_RX_CONS5_HI		0x02A8
#define	BGE_MBX_RX_CONS5_LO		0x02AC
#define	BGE_MBX_RX_CONS6_HI		0x02B0
#define	BGE_MBX_RX_CONS6_LO		0x02B4
#define	BGE_MBX_RX_CONS7_HI		0x02B8
#define	BGE_MBX_RX_CONS7_LO		0x02BC
#define	BGE_MBX_RX_CONS8_HI		0x02C0
#define	BGE_MBX_RX_CONS8_LO		0x02C4
#define	BGE_MBX_RX_CONS9_HI		0x02C8
#define	BGE_MBX_RX_CONS9_LO		0x02CC
#define	BGE_MBX_RX_CONS10_HI		0x02D0
#define	BGE_MBX_RX_CONS10_LO		0x02D4
#define	BGE_MBX_RX_CONS11_HI		0x02D8
#define	BGE_MBX_RX_CONS11_LO		0x02DC
#define	BGE_MBX_RX_CONS12_HI		0x02E0
#define	BGE_MBX_RX_CONS12_LO		0x02E4
#define	BGE_MBX_RX_CONS13_HI		0x02E8
#define	BGE_MBX_RX_CONS13_LO		0x02EC
#define	BGE_MBX_RX_CONS14_HI		0x02F0
#define	BGE_MBX_RX_CONS14_LO		0x02F4
#define	BGE_MBX_RX_CONS15_HI		0x02F8
#define	BGE_MBX_RX_CONS15_LO		0x02FC
#define	BGE_MBX_TX_HOST_PROD0_HI	0x0300
#define	BGE_MBX_TX_HOST_PROD0_LO	0x0304
#define	BGE_MBX_TX_HOST_PROD1_HI	0x0308
#define	BGE_MBX_TX_HOST_PROD1_LO	0x030C
#define	BGE_MBX_TX_HOST_PROD2_HI	0x0310
#define	BGE_MBX_TX_HOST_PROD2_LO	0x0314
#define	BGE_MBX_TX_HOST_PROD3_HI	0x0318
#define	BGE_MBX_TX_HOST_PROD3_LO	0x031C
#define	BGE_MBX_TX_HOST_PROD4_HI	0x0320
#define	BGE_MBX_TX_HOST_PROD4_LO	0x0324
#define	BGE_MBX_TX_HOST_PROD5_HI	0x0328
#define	BGE_MBX_TX_HOST_PROD5_LO	0x032C
#define	BGE_MBX_TX_HOST_PROD6_HI	0x0330
#define	BGE_MBX_TX_HOST_PROD6_LO	0x0334
#define	BGE_MBX_TX_HOST_PROD7_HI	0x0338
#define	BGE_MBX_TX_HOST_PROD7_LO	0x033C
#define	BGE_MBX_TX_HOST_PROD8_HI	0x0340
#define	BGE_MBX_TX_HOST_PROD8_LO	0x0344
#define	BGE_MBX_TX_HOST_PROD9_HI	0x0348
#define	BGE_MBX_TX_HOST_PROD9_LO	0x034C
#define	BGE_MBX_TX_HOST_PROD10_HI	0x0350
#define	BGE_MBX_TX_HOST_PROD10_LO	0x0354
#define	BGE_MBX_TX_HOST_PROD11_HI	0x0358
#define	BGE_MBX_TX_HOST_PROD11_LO	0x035C
#define	BGE_MBX_TX_HOST_PROD12_HI	0x0360
#define	BGE_MBX_TX_HOST_PROD12_LO	0x0364
#define	BGE_MBX_TX_HOST_PROD13_HI	0x0368
#define	BGE_MBX_TX_HOST_PROD13_LO	0x036C
#define	BGE_MBX_TX_HOST_PROD14_HI	0x0370
#define	BGE_MBX_TX_HOST_PROD14_LO	0x0374
#define	BGE_MBX_TX_HOST_PROD15_HI	0x0378
#define	BGE_MBX_TX_HOST_PROD15_LO	0x037C
#define	BGE_MBX_TX_NIC_PROD0_HI		0x0380
#define	BGE_MBX_TX_NIC_PROD0_LO		0x0384
#define	BGE_MBX_TX_NIC_PROD1_HI		0x0388
#define	BGE_MBX_TX_NIC_PROD1_LO		0x038C
#define	BGE_MBX_TX_NIC_PROD2_HI		0x0390
#define	BGE_MBX_TX_NIC_PROD2_LO		0x0394
#define	BGE_MBX_TX_NIC_PROD3_HI		0x0398
#define	BGE_MBX_TX_NIC_PROD3_LO		0x039C
#define	BGE_MBX_TX_NIC_PROD4_HI		0x03A0
#define	BGE_MBX_TX_NIC_PROD4_LO		0x03A4
#define	BGE_MBX_TX_NIC_PROD5_HI		0x03A8
#define	BGE_MBX_TX_NIC_PROD5_LO		0x03AC
#define	BGE_MBX_TX_NIC_PROD6_HI		0x03B0
#define	BGE_MBX_TX_NIC_PROD6_LO		0x03B4
#define	BGE_MBX_TX_NIC_PROD7_HI		0x03B8
#define	BGE_MBX_TX_NIC_PROD7_LO		0x03BC
#define	BGE_MBX_TX_NIC_PROD8_HI		0x03C0
#define	BGE_MBX_TX_NIC_PROD8_LO		0x03C4
#define	BGE_MBX_TX_NIC_PROD9_HI		0x03C8
#define	BGE_MBX_TX_NIC_PROD9_LO		0x03CC
#define	BGE_MBX_TX_NIC_PROD10_HI	0x03D0
#define	BGE_MBX_TX_NIC_PROD10_LO	0x03D4
#define	BGE_MBX_TX_NIC_PROD11_HI	0x03D8
#define	BGE_MBX_TX_NIC_PROD11_LO	0x03DC
#define	BGE_MBX_TX_NIC_PROD12_HI	0x03E0
#define	BGE_MBX_TX_NIC_PROD12_LO	0x03E4
#define	BGE_MBX_TX_NIC_PROD13_HI	0x03E8
#define	BGE_MBX_TX_NIC_PROD13_LO	0x03EC
#define	BGE_MBX_TX_NIC_PROD14_HI	0x03F0
#define	BGE_MBX_TX_NIC_PROD14_LO	0x03F4
#define	BGE_MBX_TX_NIC_PROD15_HI	0x03F8
#define	BGE_MBX_TX_NIC_PROD15_LO	0x03FC

#define	BGE_TX_RINGS_MAX		4
#define	BGE_TX_RINGS_EXTSSRAM_MAX	16
#define	BGE_RX_RINGS_MAX		16

/* Ethernet MAC control registers */
#define	BGE_MAC_MODE			0x0400
#define	BGE_MAC_STS			0x0404
#define	BGE_MAC_EVT_ENB			0x0408
#define	BGE_MAC_LED_CTL			0x040C
#define	BGE_MAC_ADDR1_LO		0x0410
#define	BGE_MAC_ADDR1_HI		0x0414
#define	BGE_MAC_ADDR2_LO		0x0418
#define	BGE_MAC_ADDR2_HI		0x041C
#define	BGE_MAC_ADDR3_LO		0x0420
#define	BGE_MAC_ADDR3_HI		0x0424
#define	BGE_MAC_ADDR4_LO		0x0428
#define	BGE_MAC_ADDR4_HI		0x042C
#define	BGE_WOL_PATPTR			0x0430
#define	BGE_WOL_PATCFG			0x0434
#define	BGE_TX_RANDOM_BACKOFF		0x0438
#define	BGE_RX_MTU			0x043C
#define	BGE_GBIT_PCS_TEST		0x0440
#define	BGE_TX_TBI_AUTONEG		0x0444
#define	BGE_RX_TBI_AUTONEG		0x0448
#define	BGE_MI_COMM			0x044C
#define	BGE_MI_STS			0x0450
#define	BGE_MI_MODE			0x0454
#define	BGE_AUTOPOLL_STS		0x0458
#define	BGE_TX_MODE			0x045C
#define	BGE_TX_STS			0x0460
#define	BGE_TX_LENGTHS			0x0464
#define	BGE_RX_MODE			0x0468
#define	BGE_RX_STS			0x046C
#define	BGE_MAR0			0x0470
#define	BGE_MAR1			0x0474
#define	BGE_MAR2			0x0478
#define	BGE_MAR3			0x047C
#define	BGE_RX_BD_RULES_CTL0		0x0480
#define	BGE_RX_BD_RULES_MASKVAL0	0x0484
#define	BGE_RX_BD_RULES_CTL1		0x0488
#define	BGE_RX_BD_RULES_MASKVAL1	0x048C
#define	BGE_RX_BD_RULES_CTL2		0x0490
#define	BGE_RX_BD_RULES_MASKVAL2	0x0494
#define	BGE_RX_BD_RULES_CTL3		0x0498
#define	BGE_RX_BD_RULES_MASKVAL3	0x049C
#define	BGE_RX_BD_RULES_CTL4		0x04A0
#define	BGE_RX_BD_RULES_MASKVAL4	0x04A4
#define	BGE_RX_BD_RULES_CTL5		0x04A8
#define	BGE_RX_BD_RULES_MASKVAL5	0x04AC
#define	BGE_RX_BD_RULES_CTL6		0x04B0
#define	BGE_RX_BD_RULES_MASKVAL6	0x04B4
#define	BGE_RX_BD_RULES_CTL7		0x04B8
#define	BGE_RX_BD_RULES_MASKVAL7	0x04BC
#define	BGE_RX_BD_RULES_CTL8		0x04C0
#define	BGE_RX_BD_RULES_MASKVAL8	0x04C4
#define	BGE_RX_BD_RULES_CTL9		0x04C8
#define	BGE_RX_BD_RULES_MASKVAL9	0x04CC
#define	BGE_RX_BD_RULES_CTL10		0x04D0
#define	BGE_RX_BD_RULES_MASKVAL10	0x04D4
#define	BGE_RX_BD_RULES_CTL11		0x04D8
#define	BGE_RX_BD_RULES_MASKVAL11	0x04DC
#define	BGE_RX_BD_RULES_CTL12		0x04E0
#define	BGE_RX_BD_RULES_MASKVAL12	0x04E4
#define	BGE_RX_BD_RULES_CTL13		0x04E8
#define	BGE_RX_BD_RULES_MASKVAL13	0x04EC
#define	BGE_RX_BD_RULES_CTL14		0x04F0
#define	BGE_RX_BD_RULES_MASKVAL14	0x04F4
#define	BGE_RX_BD_RULES_CTL15		0x04F8
#define	BGE_RX_BD_RULES_MASKVAL15	0x04FC
#define	BGE_RX_RULES_CFG		0x0500
#define	BGE_MAX_RX_FRAME_LOWAT		0x0504
#define	BGE_SERDES_CFG			0x0590
#define	BGE_SERDES_STS			0x0594
#define	BGE_PHYCFG1			0x05A0
#define	BGE_PHYCFG2			0x05A4
#define	BGE_EXT_RGMII_MODE		0x05A8
#define	BGE_SGDIG_CFG			0x05B0
#define	BGE_SGDIG_STS			0x05B4
#define	BGE_MAC_STATS			0x0800

/* Ethernet MAC Mode register */
#define	BGE_MACMODE_RESET		0x00000001
#define	BGE_MACMODE_HALF_DUPLEX		0x00000002
#define	BGE_MACMODE_PORTMODE		0x0000000C
#define	BGE_MACMODE_LOOPBACK		0x00000010
#define	BGE_MACMODE_RX_TAGGEDPKT	0x00000080
#define	BGE_MACMODE_TX_BURST_ENB	0x00000100
#define	BGE_MACMODE_MAX_DEFER		0x00000200
#define	BGE_MACMODE_LINK_POLARITY	0x00000400
#define	BGE_MACMODE_RX_STATS_ENB	0x00000800
#define	BGE_MACMODE_RX_STATS_CLEAR	0x00001000
#define	BGE_MACMODE_RX_STATS_FLUSH	0x00002000
#define	BGE_MACMODE_TX_STATS_ENB	0x00004000
#define	BGE_MACMODE_TX_STATS_CLEAR	0x00008000
#define	BGE_MACMODE_TX_STATS_FLUSH	0x00010000
#define	BGE_MACMODE_TBI_SEND_CFGS	0x00020000
#define	BGE_MACMODE_MAGIC_PKT_ENB	0x00040000
#define	BGE_MACMODE_ACPI_PWRON_ENB	0x00080000
#define	BGE_MACMODE_MIP_ENB		0x00100000
#define	BGE_MACMODE_TXDMA_ENB		0x00200000
#define	BGE_MACMODE_RXDMA_ENB		0x00400000
#define	BGE_MACMODE_FRMHDR_DMA_ENB	0x00800000
#define	BGE_MACMODE_APE_RX_EN		0x08000000
#define	BGE_MACMODE_APE_TX_EN		0x10000000

#define	BGE_PORTMODE_NONE		0x00000000
#define	BGE_PORTMODE_MII		0x00000004
#define	BGE_PORTMODE_GMII		0x00000008
#define	BGE_PORTMODE_TBI		0x0000000C

/* MAC Status register */
#define	BGE_MACSTAT_TBI_PCS_SYNCHED	0x00000001
#define	BGE_MACSTAT_TBI_SIGNAL_DETECT	0x00000002
#define	BGE_MACSTAT_RX_CFG		0x00000004
#define	BGE_MACSTAT_CFG_CHANGED		0x00000008
#define	BGE_MACSTAT_SYNC_CHANGED	0x00000010
#define	BGE_MACSTAT_PORT_DECODE_ERROR	0x00000400
#define	BGE_MACSTAT_LINK_CHANGED	0x00001000
#define	BGE_MACSTAT_MI_COMPLETE		0x00400000
#define	BGE_MACSTAT_MI_INTERRUPT	0x00800000
#define	BGE_MACSTAT_AUTOPOLL_ERROR	0x01000000
#define	BGE_MACSTAT_ODI_ERROR		0x02000000
#define	BGE_MACSTAT_RXSTAT_OFLOW	0x04000000
#define	BGE_MACSTAT_TXSTAT_OFLOW	0x08000000

/* MAC Event Enable Register */
#define	BGE_EVTENB_PORT_DECODE_ERROR	0x00000400
#define	BGE_EVTENB_LINK_CHANGED		0x00001000
#define	BGE_EVTENB_MI_COMPLETE		0x00400000
#define	BGE_EVTENB_MI_INTERRUPT		0x00800000
#define	BGE_EVTENB_AUTOPOLL_ERROR	0x01000000
#define	BGE_EVTENB_ODI_ERROR		0x02000000
#define	BGE_EVTENB_RXSTAT_OFLOW		0x04000000
#define	BGE_EVTENB_TXSTAT_OFLOW		0x08000000

/* LED Control Register */
#define	BGE_LEDCTL_LINKLED_OVERRIDE	0x00000001
#define	BGE_LEDCTL_1000MBPS_LED		0x00000002
#define	BGE_LEDCTL_100MBPS_LED		0x00000004
#define	BGE_LEDCTL_10MBPS_LED		0x00000008
#define	BGE_LEDCTL_TRAFLED_OVERRIDE	0x00000010
#define	BGE_LEDCTL_TRAFLED_BLINK	0x00000020
#define	BGE_LEDCTL_TRAFLED_BLINK_2	0x00000040
#define	BGE_LEDCTL_1000MBPS_STS		0x00000080
#define	BGE_LEDCTL_100MBPS_STS		0x00000100
#define	BGE_LEDCTL_10MBPS_STS		0x00000200
#define	BGE_LEDCTL_TRADLED_STS		0x00000400
#define	BGE_LEDCTL_BLINKPERIOD		0x7FF80000
#define	BGE_LEDCTL_BLINKPERIOD_OVERRIDE	0x80000000

/* TX backoff seed register */
#define	BGE_TX_BACKOFF_SEED_MASK	0x3FF

/* Autopoll status register */
#define	BGE_AUTOPOLLSTS_ERROR		0x00000001

/* Transmit MAC mode register */
#define	BGE_TXMODE_RESET		0x00000001
#define	BGE_TXMODE_ENABLE		0x00000002
#define	BGE_TXMODE_FLOWCTL_ENABLE	0x00000010
#define	BGE_TXMODE_BIGBACKOFF_ENABLE	0x00000020
#define	BGE_TXMODE_LONGPAUSE_ENABLE	0x00000040
#define	BGE_TXMODE_MBUF_LOCKUP_FIX	0x00000100
#define	BGE_TXMODE_JMB_FRM_LEN		0x00400000
#define	BGE_TXMODE_CNT_DN_MODE		0x00800000

/* Transmit MAC status register */
#define	BGE_TXSTAT_RX_XOFFED		0x00000001
#define	BGE_TXSTAT_SENT_XOFF		0x00000002
#define	BGE_TXSTAT_SENT_XON		0x00000004
#define	BGE_TXSTAT_LINK_UP		0x00000008
#define	BGE_TXSTAT_ODI_UFLOW		0x00000010
#define	BGE_TXSTAT_ODI_OFLOW		0x00000020

/* Transmit MAC lengths register */
#define	BGE_TXLEN_SLOTTIME		0x000000FF
#define	BGE_TXLEN_IPG			0x00000F00
#define	BGE_TXLEN_CRS			0x00003000
#define	BGE_TXLEN_JMB_FRM_LEN_MSK	0x00FF0000
#define	BGE_TXLEN_CNT_DN_VAL_MSK	0xFF000000

/* Receive MAC mode register */
#define	BGE_RXMODE_RESET		0x00000001
#define	BGE_RXMODE_ENABLE		0x00000002
#define	BGE_RXMODE_FLOWCTL_ENABLE	0x00000004
#define	BGE_RXMODE_RX_GIANTS		0x00000020
#define	BGE_RXMODE_RX_RUNTS		0x00000040
#define	BGE_RXMODE_8022_LENCHECK	0x00000080
#define	BGE_RXMODE_RX_PROMISC		0x00000100
#define	BGE_RXMODE_RX_NO_CRC_CHECK	0x00000200
#define	BGE_RXMODE_RX_KEEP_VLAN_DIAG	0x00000400
#define	BGE_RXMODE_IPV6_ENABLE          0x01000000
#define	BGE_RXMODE_IPV4_FRAG_FIX	0x02000000

/* Receive MAC status register */
#define	BGE_RXSTAT_REMOTE_XOFFED	0x00000001
#define	BGE_RXSTAT_RCVD_XOFF		0x00000002
#define	BGE_RXSTAT_RCVD_XON		0x00000004

/* Receive Rules Control register */
#define	BGE_RXRULECTL_OFFSET		0x000000FF
#define	BGE_RXRULECTL_CLASS		0x00001F00
#define	BGE_RXRULECTL_HDRTYPE		0x0000E000
#define	BGE_RXRULECTL_COMPARE_OP	0x00030000
#define	BGE_RXRULECTL_MAP		0x01000000
#define	BGE_RXRULECTL_DISCARD		0x02000000
#define	BGE_RXRULECTL_MASK		0x04000000
#define	BGE_RXRULECTL_ACTIVATE_PROC3	0x08000000
#define	BGE_RXRULECTL_ACTIVATE_PROC2	0x10000000
#define	BGE_RXRULECTL_ACTIVATE_PROC1	0x20000000
#define	BGE_RXRULECTL_ANDWITHNEXT	0x40000000

/* Receive Rules Mask register */
#define	BGE_RXRULEMASK_VALUE		0x0000FFFF
#define	BGE_RXRULEMASK_MASKVAL		0xFFFF0000

/* SERDES configuration register */
#define	BGE_SERDESCFG_RXR		0x00000007 /* phase interpolator */
#define	BGE_SERDESCFG_RXG		0x00000018 /* rx gain setting */
#define	BGE_SERDESCFG_RXEDGESEL		0x00000040 /* rising/falling egde */
#define	BGE_SERDESCFG_TX_BIAS		0x00000380 /* TXDAC bias setting */
#define	BGE_SERDESCFG_IBMAX		0x00000400 /* bias current +25% */
#define	BGE_SERDESCFG_IBMIN		0x00000800 /* bias current -25% */
#define	BGE_SERDESCFG_TXMODE		0x00001000
#define	BGE_SERDESCFG_TXEDGESEL		0x00002000 /* rising/falling edge */
#define	BGE_SERDESCFG_MODE		0x00004000 /* TXCP/TXCN disabled */
#define	BGE_SERDESCFG_PLLTEST		0x00008000 /* PLL test mode */
#define	BGE_SERDESCFG_CDET		0x00010000 /* comma detect enable */
#define	BGE_SERDESCFG_TBILOOP		0x00020000 /* local loopback */
#define	BGE_SERDESCFG_REMLOOP		0x00040000 /* remote loopback */
#define	BGE_SERDESCFG_INVPHASE		0x00080000 /* Reverse 125MHz clock */
#define	BGE_SERDESCFG_12REGCTL		0x00300000 /* 1.2v regulator ctl */
#define	BGE_SERDESCFG_REGCTL		0x00C00000 /* regulator ctl (2.5v) */

/* SERDES status register */
#define	BGE_SERDESSTS_RXSTAT		0x0000000F /* receive status bits */
#define	BGE_SERDESSTS_CDET		0x00000010 /* comma code detected */

/* PHYCFG1 config */
#define	BGE_PHYCFG1_RGMII_INT		0x00000001
#define	BGE_PHYCFG1_RGMII_EXT_RX_DEC	0x02000000
#define	BGE_PHYCFG1_RGMII_SND_STAT_EN	0x04000000
#define	BGE_PHYCFG1_TXC_DRV		0x20000000

/* PHYCFG2 config */
#define	BGE_PHYCFG2_INBAND_ENABLE	0x00000001
#define	BGE_PHYCFG2_EMODE_MASK_MASK	0x000001c0
#define	BGE_PHYCFG2_EMODE_MASK_AC131	0x000000c0
#define	BGE_PHYCFG2_EMODE_MASK_50610	0x00000100
#define	BGE_PHYCFG2_EMODE_MASK_RT8211	0x00000000
#define	BGE_PHYCFG2_EMODE_MASK_RT8201	0x000001c0
#define	BGE_PHYCFG2_EMODE_COMP_MASK	0x00000e00
#define	BGE_PHYCFG2_EMODE_COMP_AC131	0x00000600
#define	BGE_PHYCFG2_EMODE_COMP_50610	0x00000400
#define	BGE_PHYCFG2_EMODE_COMP_RT8211	0x00000800
#define	BGE_PHYCFG2_EMODE_COMP_RT8201	0x00000000
#define	BGE_PHYCFG2_FMODE_MASK_MASK	0x00007000
#define	BGE_PHYCFG2_FMODE_MASK_AC131	0x00006000
#define	BGE_PHYCFG2_FMODE_MASK_50610	0x00004000
#define	BGE_PHYCFG2_FMODE_MASK_RT8211	0x00000000
#define	BGE_PHYCFG2_FMODE_MASK_RT8201	0x00007000
#define	BGE_PHYCFG2_FMODE_COMP_MASK	0x00038000
#define	BGE_PHYCFG2_FMODE_COMP_AC131	0x00030000
#define	BGE_PHYCFG2_FMODE_COMP_50610	0x00008000
#define	BGE_PHYCFG2_FMODE_COMP_RT8211	0x00038000
#define	BGE_PHYCFG2_FMODE_COMP_RT8201	0x00000000
#define	BGE_PHYCFG2_GMODE_MASK_MASK	0x001c0000
#define	BGE_PHYCFG2_GMODE_MASK_AC131	0x001c0000
#define	BGE_PHYCFG2_GMODE_MASK_50610	0x00100000
#define	BGE_PHYCFG2_GMODE_MASK_RT8211	0x00000000
#define	BGE_PHYCFG2_GMODE_MASK_RT8201	0x001c0000
#define	BGE_PHYCFG2_GMODE_COMP_MASK	0x00e00000
#define	BGE_PHYCFG2_GMODE_COMP_AC131	0x00e00000
#define	BGE_PHYCFG2_GMODE_COMP_50610	0x00000000
#define	BGE_PHYCFG2_GMODE_COMP_RT8211	0x00200000
#define	BGE_PHYCFG2_GMODE_COMP_RT8201	0x00000000
#define	BGE_PHYCFG2_ACT_MASK_MASK	0x03000000
#define	BGE_PHYCFG2_ACT_MASK_AC131	0x03000000
#define	BGE_PHYCFG2_ACT_MASK_50610	0x01000000
#define	BGE_PHYCFG2_ACT_MASK_RT8211	0x03000000
#define	BGE_PHYCFG2_ACT_MASK_RT8201	0x01000000
#define	BGE_PHYCFG2_ACT_COMP_MASK	0x0c000000
#define	BGE_PHYCFG2_ACT_COMP_AC131	0x00000000
#define	BGE_PHYCFG2_ACT_COMP_50610	0x00000000
#define	BGE_PHYCFG2_ACT_COMP_RT8211	0x00000000
#define	BGE_PHYCFG2_ACT_COMP_RT8201	0x08000000
#define	BGE_PHYCFG2_QUAL_MASK_MASK	0x30000000
#define	BGE_PHYCFG2_QUAL_MASK_AC131	0x30000000
#define	BGE_PHYCFG2_QUAL_MASK_50610	0x30000000
#define	BGE_PHYCFG2_QUAL_MASK_RT8211	0x30000000
#define	BGE_PHYCFG2_QUAL_MASK_RT8201	0x30000000
#define	BGE_PHYCFG2_QUAL_COMP_MASK	0xc0000000
#define	BGE_PHYCFG2_QUAL_COMP_AC131	0x00000000
#define	BGE_PHYCFG2_QUAL_COMP_50610	0x00000000
#define	BGE_PHYCFG2_QUAL_COMP_RT8211	0x00000000
#define	BGE_PHYCFG2_QUAL_COMP_RT8201	0x00000000
#define	BGE_PHYCFG2_50610_LED_MODES \
        (BGE_PHYCFG2_EMODE_MASK_50610 | \
         BGE_PHYCFG2_EMODE_COMP_50610 | \
         BGE_PHYCFG2_FMODE_MASK_50610 | \
         BGE_PHYCFG2_FMODE_COMP_50610 | \
         BGE_PHYCFG2_GMODE_MASK_50610 | \
         BGE_PHYCFG2_GMODE_COMP_50610 | \
         BGE_PHYCFG2_ACT_MASK_50610 | \
         BGE_PHYCFG2_ACT_COMP_50610 | \
         BGE_PHYCFG2_QUAL_MASK_50610 | \
         BGE_PHYCFG2_QUAL_COMP_50610)
#define	BGE_PHYCFG2_AC131_LED_MODES \
        (BGE_PHYCFG2_EMODE_MASK_AC131 | \
         BGE_PHYCFG2_EMODE_COMP_AC131 | \
         BGE_PHYCFG2_FMODE_MASK_AC131 | \
         BGE_PHYCFG2_FMODE_COMP_AC131 | \
         BGE_PHYCFG2_GMODE_MASK_AC131 | \
         BGE_PHYCFG2_GMODE_COMP_AC131 | \
         BGE_PHYCFG2_ACT_MASK_AC131 | \
         BGE_PHYCFG2_ACT_COMP_AC131 | \
         BGE_PHYCFG2_QUAL_MASK_AC131 | \
         BGE_PHYCFG2_QUAL_COMP_AC131)
#define	BGE_PHYCFG2_RTL8211C_LED_MODES \
        (BGE_PHYCFG2_EMODE_MASK_RT8211 | \
         BGE_PHYCFG2_EMODE_COMP_RT8211 | \
         BGE_PHYCFG2_FMODE_MASK_RT8211 | \
         BGE_PHYCFG2_FMODE_COMP_RT8211 | \
         BGE_PHYCFG2_GMODE_MASK_RT8211 | \
         BGE_PHYCFG2_GMODE_COMP_RT8211 | \
         BGE_PHYCFG2_ACT_MASK_RT8211 | \
         BGE_PHYCFG2_ACT_COMP_RT8211 | \
         BGE_PHYCFG2_QUAL_MASK_RT8211 | \
         BGE_PHYCFG2_QUAL_COMP_RT8211)
#define	BGE_PHYCFG2_RTL8201E_LED_MODES \
        (BGE_PHYCFG2_EMODE_MASK_RT8201 | \
         BGE_PHYCFG2_EMODE_COMP_RT8201 | \
         BGE_PHYCFG2_FMODE_MASK_RT8201 | \
         BGE_PHYCFG2_FMODE_COMP_RT8201 | \
         BGE_PHYCFG2_GMODE_MASK_RT8201 | \
         BGE_PHYCFG2_GMODE_COMP_RT8201 | \
         BGE_PHYCFG2_ACT_MASK_RT8201 | \
         BGE_PHYCFG2_ACT_COMP_RT8201 | \
         BGE_PHYCFG2_QUAL_MASK_RT8201 | \
         BGE_PHYCFG2_QUAL_COMP_RT8201)

/* EXT_RGMII_MODE config */
#define	BGE_RGMII_MODE_TX_ENABLE	0x00000001
#define	BGE_RGMII_MODE_TX_LOWPWR	0x00000002
#define	BGE_RGMII_MODE_TX_RESET		0x00000004
#define	BGE_RGMII_MODE_RX_INT_B		0x00000100
#define	BGE_RGMII_MODE_RX_QUALITY	0x00000200
#define	BGE_RGMII_MODE_RX_ACTIVITY	0x00000400
#define	BGE_RGMII_MODE_RX_ENG_DET	0x00000800

/* SGDIG config (not documented) */
#define	BGE_SGDIGCFG_PAUSE_CAP		0x00000800
#define	BGE_SGDIGCFG_ASYM_PAUSE		0x00001000
#define	BGE_SGDIGCFG_SEND		0x40000000
#define	BGE_SGDIGCFG_AUTO		0x80000000

/* SGDIG status (not documented) */
#define	BGE_SGDIGSTS_DONE		0x00000002
#define	BGE_SGDIGSTS_IS_SERDES		0x00000100
#define	BGE_SGDIGSTS_PAUSE_CAP		0x00080000
#define	BGE_SGDIGSTS_ASYM_PAUSE		0x00100000

/* MI communication register */
#define	BGE_MICOMM_DATA			0x0000FFFF
#define	BGE_MICOMM_REG			0x001F0000
#define	BGE_MICOMM_PHY			0x03E00000
#define	BGE_MICOMM_CMD			0x0C000000
#define	BGE_MICOMM_READFAIL		0x10000000
#define	BGE_MICOMM_BUSY			0x20000000

#define	BGE_MIREG(x)	((x & 0x1F) << 16)
#define	BGE_MIPHY(x)	((x & 0x1F) << 21)
#define	BGE_MICMD_WRITE			0x04000000
#define	BGE_MICMD_READ			0x08000000

/* MI status register */
#define	BGE_MISTS_LINK			0x00000001
#define	BGE_MISTS_10MBPS		0x00000002

#define	BGE_MIMODE_SHORTPREAMBLE	0x00000002
#define	BGE_MIMODE_AUTOPOLL		0x00000010
#define	BGE_MIMODE_CLKCNT		0x001F0000
#define	BGE_MIMODE_500KHZ_CONST		0x00008000
#define	BGE_MIMODE_BASE			0x000C0000
#define	BGE_MIMODE_PHYADDR(x)		((x & 0x1F) << 5)

/*
 * Send data initiator control registers.
 */
#define	BGE_SDI_MODE			0x0C00
#define	BGE_SDI_STATUS			0x0C04
#define	BGE_SDI_STATS_CTL		0x0C08
#define	BGE_SDI_STATS_ENABLE_MASK	0x0C0C
#define	BGE_SDI_STATS_INCREMENT_MASK	0x0C10
#define	BGE_ISO_PKT_TX			0x0C20
#define	BGE_LOCSTATS_COS0		0x0C80
#define	BGE_LOCSTATS_COS1		0x0C84
#define	BGE_LOCSTATS_COS2		0x0C88
#define	BGE_LOCSTATS_COS3		0x0C8C
#define	BGE_LOCSTATS_COS4		0x0C90
#define	BGE_LOCSTATS_COS5		0x0C84
#define	BGE_LOCSTATS_COS6		0x0C98
#define	BGE_LOCSTATS_COS7		0x0C9C
#define	BGE_LOCSTATS_COS8		0x0CA0
#define	BGE_LOCSTATS_COS9		0x0CA4
#define	BGE_LOCSTATS_COS10		0x0CA8
#define	BGE_LOCSTATS_COS11		0x0CAC
#define	BGE_LOCSTATS_COS12		0x0CB0
#define	BGE_LOCSTATS_COS13		0x0CB4
#define	BGE_LOCSTATS_COS14		0x0CB8
#define	BGE_LOCSTATS_COS15		0x0CBC
#define	BGE_LOCSTATS_DMA_RQ_FULL	0x0CC0
#define	BGE_LOCSTATS_DMA_HIPRIO_RQ_FULL	0x0CC4
#define	BGE_LOCSTATS_SDC_QUEUE_FULL	0x0CC8
#define	BGE_LOCSTATS_NIC_SENDPROD_SET	0x0CCC
#define	BGE_LOCSTATS_STATS_UPDATED	0x0CD0
#define	BGE_LOCSTATS_IRQS		0x0CD4
#define	BGE_LOCSTATS_AVOIDED_IRQS	0x0CD8
#define	BGE_LOCSTATS_TX_THRESH_HIT	0x0CDC

/* Send Data Initiator mode register */
#define	BGE_SDIMODE_RESET		0x00000001
#define	BGE_SDIMODE_ENABLE		0x00000002
#define	BGE_SDIMODE_STATS_OFLOW_ATTN	0x00000004

/* Send Data Initiator stats register */
#define	BGE_SDISTAT_STATS_OFLOW_ATTN	0x00000004

/* Send Data Initiator stats control register */
#define	BGE_SDISTATSCTL_ENABLE		0x00000001
#define	BGE_SDISTATSCTL_FASTER		0x00000002
#define	BGE_SDISTATSCTL_CLEAR		0x00000004
#define	BGE_SDISTATSCTL_FORCEFLUSH	0x00000008
#define	BGE_SDISTATSCTL_FORCEZERO	0x00000010

/*
 * Send Data Completion Control registers
 */
#define	BGE_SDC_MODE			0x1000
#define	BGE_SDC_STATUS			0x1004

/* Send Data completion mode register */
#define	BGE_SDCMODE_RESET		0x00000001
#define	BGE_SDCMODE_ENABLE		0x00000002
#define	BGE_SDCMODE_ATTN		0x00000004
#define	BGE_SDCMODE_CDELAY		0x00000010

/* Send Data completion status register */
#define	BGE_SDCSTAT_ATTN		0x00000004

/*
 * Send BD Ring Selector Control registers
 */
#define	BGE_SRS_MODE			0x1400
#define	BGE_SRS_STATUS			0x1404
#define	BGE_SRS_HWDIAG			0x1408
#define	BGE_SRS_LOC_NIC_CONS0		0x1440
#define	BGE_SRS_LOC_NIC_CONS1		0x1444
#define	BGE_SRS_LOC_NIC_CONS2		0x1448
#define	BGE_SRS_LOC_NIC_CONS3		0x144C
#define	BGE_SRS_LOC_NIC_CONS4		0x1450
#define	BGE_SRS_LOC_NIC_CONS5		0x1454
#define	BGE_SRS_LOC_NIC_CONS6		0x1458
#define	BGE_SRS_LOC_NIC_CONS7		0x145C
#define	BGE_SRS_LOC_NIC_CONS8		0x1460
#define	BGE_SRS_LOC_NIC_CONS9		0x1464
#define	BGE_SRS_LOC_NIC_CONS10		0x1468
#define	BGE_SRS_LOC_NIC_CONS11		0x146C
#define	BGE_SRS_LOC_NIC_CONS12		0x1470
#define	BGE_SRS_LOC_NIC_CONS13		0x1474
#define	BGE_SRS_LOC_NIC_CONS14		0x1478
#define	BGE_SRS_LOC_NIC_CONS15		0x147C

/* Send BD Ring Selector Mode register */
#define	BGE_SRSMODE_RESET		0x00000001
#define	BGE_SRSMODE_ENABLE		0x00000002
#define	BGE_SRSMODE_ATTN		0x00000004

/* Send BD Ring Selector Status register */
#define	BGE_SRSSTAT_ERROR		0x00000004

/* Send BD Ring Selector HW Diagnostics register */
#define	BGE_SRSHWDIAG_STATE		0x0000000F
#define	BGE_SRSHWDIAG_CURRINGNUM	0x000000F0
#define	BGE_SRSHWDIAG_STAGEDRINGNUM	0x00000F00
#define	BGE_SRSHWDIAG_RINGNUM_IN_MBX	0x0000F000

/*
 * Send BD Initiator Selector Control registers
 */
#define	BGE_SBDI_MODE			0x1800
#define	BGE_SBDI_STATUS			0x1804
#define	BGE_SBDI_LOC_NIC_PROD0		0x1808
#define	BGE_SBDI_LOC_NIC_PROD1		0x180C
#define	BGE_SBDI_LOC_NIC_PROD2		0x1810
#define	BGE_SBDI_LOC_NIC_PROD3		0x1814
#define	BGE_SBDI_LOC_NIC_PROD4		0x1818
#define	BGE_SBDI_LOC_NIC_PROD5		0x181C
#define	BGE_SBDI_LOC_NIC_PROD6		0x1820
#define	BGE_SBDI_LOC_NIC_PROD7		0x1824
#define	BGE_SBDI_LOC_NIC_PROD8		0x1828
#define	BGE_SBDI_LOC_NIC_PROD9		0x182C
#define	BGE_SBDI_LOC_NIC_PROD10		0x1830
#define	BGE_SBDI_LOC_NIC_PROD11		0x1834
#define	BGE_SBDI_LOC_NIC_PROD12		0x1838
#define	BGE_SBDI_LOC_NIC_PROD13		0x183C
#define	BGE_SBDI_LOC_NIC_PROD14		0x1840
#define	BGE_SBDI_LOC_NIC_PROD15		0x1844

/* Send BD Initiator Mode register */
#define	BGE_SBDIMODE_RESET		0x00000001
#define	BGE_SBDIMODE_ENABLE		0x00000002
#define	BGE_SBDIMODE_ATTN		0x00000004

/* Send BD Initiator Status register */
#define	BGE_SBDISTAT_ERROR		0x00000004

/*
 * Send BD Completion Control registers
 */
#define	BGE_SBDC_MODE			0x1C00
#define	BGE_SBDC_STATUS			0x1C04

/* Send BD Completion Control Mode register */
#define	BGE_SBDCMODE_RESET		0x00000001
#define	BGE_SBDCMODE_ENABLE		0x00000002
#define	BGE_SBDCMODE_ATTN		0x00000004

/* Send BD Completion Control Status register */
#define	BGE_SBDCSTAT_ATTN		0x00000004

/*
 * Receive List Placement Control registers
 */
#define	BGE_RXLP_MODE			0x2000
#define	BGE_RXLP_STATUS			0x2004
#define	BGE_RXLP_SEL_LIST_LOCK		0x2008
#define	BGE_RXLP_SEL_NON_EMPTY_BITS	0x200C
#define	BGE_RXLP_CFG			0x2010
#define	BGE_RXLP_STATS_CTL		0x2014
#define	BGE_RXLP_STATS_ENABLE_MASK	0x2018
#define	BGE_RXLP_STATS_INCREMENT_MASK	0x201C
#define	BGE_RXLP_HEAD0			0x2100
#define	BGE_RXLP_TAIL0			0x2104
#define	BGE_RXLP_COUNT0			0x2108
#define	BGE_RXLP_HEAD1			0x2110
#define	BGE_RXLP_TAIL1			0x2114
#define	BGE_RXLP_COUNT1			0x2118
#define	BGE_RXLP_HEAD2			0x2120
#define	BGE_RXLP_TAIL2			0x2124
#define	BGE_RXLP_COUNT2			0x2128
#define	BGE_RXLP_HEAD3			0x2130
#define	BGE_RXLP_TAIL3			0x2134
#define	BGE_RXLP_COUNT3			0x2138
#define	BGE_RXLP_HEAD4			0x2140
#define	BGE_RXLP_TAIL4			0x2144
#define	BGE_RXLP_COUNT4			0x2148
#define	BGE_RXLP_HEAD5			0x2150
#define	BGE_RXLP_TAIL5			0x2154
#define	BGE_RXLP_COUNT5			0x2158
#define	BGE_RXLP_HEAD6			0x2160
#define	BGE_RXLP_TAIL6			0x2164
#define	BGE_RXLP_COUNT6			0x2168
#define	BGE_RXLP_HEAD7			0x2170
#define	BGE_RXLP_TAIL7			0x2174
#define	BGE_RXLP_COUNT7			0x2178
#define	BGE_RXLP_HEAD8			0x2180
#define	BGE_RXLP_TAIL8			0x2184
#define	BGE_RXLP_COUNT8			0x2188
#define	BGE_RXLP_HEAD9			0x2190
#define	BGE_RXLP_TAIL9			0x2194
#define	BGE_RXLP_COUNT9			0x2198
#define	BGE_RXLP_HEAD10			0x21A0
#define	BGE_RXLP_TAIL10			0x21A4
#define	BGE_RXLP_COUNT10		0x21A8
#define	BGE_RXLP_HEAD11			0x21B0
#define	BGE_RXLP_TAIL11			0x21B4
#define	BGE_RXLP_COUNT11		0x21B8
#define	BGE_RXLP_HEAD12			0x21C0
#define	BGE_RXLP_TAIL12			0x21C4
#define	BGE_RXLP_COUNT12		0x21C8
#define	BGE_RXLP_HEAD13			0x21D0
#define	BGE_RXLP_TAIL13			0x21D4
#define	BGE_RXLP_COUNT13		0x21D8
#define	BGE_RXLP_HEAD14			0x21E0
#define	BGE_RXLP_TAIL14			0x21E4
#define	BGE_RXLP_COUNT14		0x21E8
#define	BGE_RXLP_HEAD15			0x21F0
#define	BGE_RXLP_TAIL15			0x21F4
#define	BGE_RXLP_COUNT15		0x21F8
#define	BGE_RXLP_LOCSTAT_COS0		0x2200
#define	BGE_RXLP_LOCSTAT_COS1		0x2204
#define	BGE_RXLP_LOCSTAT_COS2		0x2208
#define	BGE_RXLP_LOCSTAT_COS3		0x220C
#define	BGE_RXLP_LOCSTAT_COS4		0x2210
#define	BGE_RXLP_LOCSTAT_COS5		0x2214
#define	BGE_RXLP_LOCSTAT_COS6		0x2218
#define	BGE_RXLP_LOCSTAT_COS7		0x221C
#define	BGE_RXLP_LOCSTAT_COS8		0x2220
#define	BGE_RXLP_LOCSTAT_COS9		0x2224
#define	BGE_RXLP_LOCSTAT_COS10		0x2228
#define	BGE_RXLP_LOCSTAT_COS11		0x222C
#define	BGE_RXLP_LOCSTAT_COS12		0x2230
#define	BGE_RXLP_LOCSTAT_COS13		0x2234
#define	BGE_RXLP_LOCSTAT_COS14		0x2238
#define	BGE_RXLP_LOCSTAT_COS15		0x223C
#define	BGE_RXLP_LOCSTAT_FILTDROP	0x2240
#define	BGE_RXLP_LOCSTAT_DMA_WRQ_FULL	0x2244
#define	BGE_RXLP_LOCSTAT_DMA_HPWRQ_FULL	0x2248
#define	BGE_RXLP_LOCSTAT_OUT_OF_BDS	0x224C
#define	BGE_RXLP_LOCSTAT_IFIN_DROPS	0x2250
#define	BGE_RXLP_LOCSTAT_IFIN_ERRORS	0x2254
#define	BGE_RXLP_LOCSTAT_RXTHRESH_HIT	0x2258


/* Receive List Placement mode register */
#define	BGE_RXLPMODE_RESET		0x00000001
#define	BGE_RXLPMODE_ENABLE		0x00000002
#define	BGE_RXLPMODE_CLASS0_ATTN	0x00000004
#define	BGE_RXLPMODE_MAPOUTRANGE_ATTN	0x00000008
#define	BGE_RXLPMODE_STATSOFLOW_ATTN	0x00000010

/* Receive List Placement Status register */
#define	BGE_RXLPSTAT_CLASS0_ATTN	0x00000004
#define	BGE_RXLPSTAT_MAPOUTRANGE_ATTN	0x00000008
#define	BGE_RXLPSTAT_STATSOFLOW_ATTN	0x00000010

/*
 * Receive Data and Receive BD Initiator Control Registers
 */
#define	BGE_RDBDI_MODE			0x2400
#define	BGE_RDBDI_STATUS		0x2404
#define	BGE_RX_JUMBO_RCB_HADDR_HI	0x2440
#define	BGE_RX_JUMBO_RCB_HADDR_LO	0x2444
#define	BGE_RX_JUMBO_RCB_MAXLEN_FLAGS	0x2448
#define	BGE_RX_JUMBO_RCB_NICADDR	0x244C
#define	BGE_RX_STD_RCB_HADDR_HI		0x2450
#define	BGE_RX_STD_RCB_HADDR_LO		0x2454
#define	BGE_RX_STD_RCB_MAXLEN_FLAGS	0x2458
#define	BGE_RX_STD_RCB_NICADDR		0x245C
#define	BGE_RX_MINI_RCB_HADDR_HI	0x2460
#define	BGE_RX_MINI_RCB_HADDR_LO	0x2464
#define	BGE_RX_MINI_RCB_MAXLEN_FLAGS	0x2468
#define	BGE_RX_MINI_RCB_NICADDR		0x246C
#define	BGE_RDBDI_JUMBO_RX_CONS		0x2470
#define	BGE_RDBDI_STD_RX_CONS		0x2474
#define	BGE_RDBDI_MINI_RX_CONS		0x2478
#define	BGE_RDBDI_RETURN_PROD0		0x2480
#define	BGE_RDBDI_RETURN_PROD1		0x2484
#define	BGE_RDBDI_RETURN_PROD2		0x2488
#define	BGE_RDBDI_RETURN_PROD3		0x248C
#define	BGE_RDBDI_RETURN_PROD4		0x2490
#define	BGE_RDBDI_RETURN_PROD5		0x2494
#define	BGE_RDBDI_RETURN_PROD6		0x2498
#define	BGE_RDBDI_RETURN_PROD7		0x249C
#define	BGE_RDBDI_RETURN_PROD8		0x24A0
#define	BGE_RDBDI_RETURN_PROD9		0x24A4
#define	BGE_RDBDI_RETURN_PROD10		0x24A8
#define	BGE_RDBDI_RETURN_PROD11		0x24AC
#define	BGE_RDBDI_RETURN_PROD12		0x24B0
#define	BGE_RDBDI_RETURN_PROD13		0x24B4
#define	BGE_RDBDI_RETURN_PROD14		0x24B8
#define	BGE_RDBDI_RETURN_PROD15		0x24BC
#define	BGE_RDBDI_HWDIAG		0x24C0


/* Receive Data and Receive BD Initiator Mode register */
#define	BGE_RDBDIMODE_RESET		0x00000001
#define	BGE_RDBDIMODE_ENABLE		0x00000002
#define	BGE_RDBDIMODE_JUMBO_ATTN	0x00000004
#define	BGE_RDBDIMODE_GIANT_ATTN	0x00000008
#define	BGE_RDBDIMODE_BADRINGSZ_ATTN	0x00000010

/* Receive Data and Receive BD Initiator Status register */
#define	BGE_RDBDISTAT_JUMBO_ATTN	0x00000004
#define	BGE_RDBDISTAT_GIANT_ATTN	0x00000008
#define	BGE_RDBDISTAT_BADRINGSZ_ATTN	0x00000010


/*
 * Receive Data Completion Control registers
 */
#define	BGE_RDC_MODE			0x2800

/* Receive Data Completion Mode register */
#define	BGE_RDCMODE_RESET		0x00000001
#define	BGE_RDCMODE_ENABLE		0x00000002
#define	BGE_RDCMODE_ATTN		0x00000004

/*
 * Receive BD Initiator Control registers
 */
#define	BGE_RBDI_MODE			0x2C00
#define	BGE_RBDI_STATUS			0x2C04
#define	BGE_RBDI_NIC_JUMBO_BD_PROD	0x2C08
#define	BGE_RBDI_NIC_STD_BD_PROD	0x2C0C
#define	BGE_RBDI_NIC_MINI_BD_PROD	0x2C10
#define	BGE_RBDI_MINI_REPL_THRESH	0x2C14
#define	BGE_RBDI_STD_REPL_THRESH	0x2C18
#define	BGE_RBDI_JUMBO_REPL_THRESH	0x2C1C

#define	BGE_STD_REPL_LWM		0x2D00
#define	BGE_JUMBO_REPL_LWM		0x2D04

/* Receive BD Initiator Mode register */
#define	BGE_RBDIMODE_RESET		0x00000001
#define	BGE_RBDIMODE_ENABLE		0x00000002
#define	BGE_RBDIMODE_ATTN		0x00000004

/* Receive BD Initiator Status register */
#define	BGE_RBDISTAT_ATTN		0x00000004

/*
 * Receive BD Completion Control registers
 */
#define	BGE_RBDC_MODE			0x3000
#define	BGE_RBDC_STATUS			0x3004
#define	BGE_RBDC_JUMBO_BD_PROD		0x3008
#define	BGE_RBDC_STD_BD_PROD		0x300C
#define	BGE_RBDC_MINI_BD_PROD		0x3010

/* Receive BD completion mode register */
#define	BGE_RBDCMODE_RESET		0x00000001
#define	BGE_RBDCMODE_ENABLE		0x00000002
#define	BGE_RBDCMODE_ATTN		0x00000004

/* Receive BD completion status register */
#define	BGE_RBDCSTAT_ERROR		0x00000004

/*
 * Receive List Selector Control registers
 */
#define	BGE_RXLS_MODE			0x3400
#define	BGE_RXLS_STATUS			0x3404

/* Receive List Selector Mode register */
#define	BGE_RXLSMODE_RESET		0x00000001
#define	BGE_RXLSMODE_ENABLE		0x00000002
#define	BGE_RXLSMODE_ATTN		0x00000004

/* Receive List Selector Status register */
#define	BGE_RXLSSTAT_ERROR		0x00000004

#define	BGE_CPMU_CTRL			0x3600
#define	BGE_CPMU_LSPD_10MB_CLK		0x3604
#define	BGE_CPMU_LSPD_1000MB_CLK	0x360C
#define	BGE_CPMU_LNK_AWARE_PWRMD	0x3610
#define	BGE_CPMU_HST_ACC		0x361C
#define	BGE_CPMU_CLCK_ORIDE		0x3624
#define	BGE_CPMU_CLCK_STAT		0x3630
#define	BGE_CPMU_MUTEX_REQ		0x365C
#define	BGE_CPMU_MUTEX_GNT		0x3660
#define	BGE_CPMU_PHY_STRAP		0x3664
#define	BGE_CPMU_PADRNG_CTL		0x3668

/* Central Power Management Unit (CPMU) register */
#define	BGE_CPMU_CTRL_LINK_IDLE_MODE	0x00000200
#define	BGE_CPMU_CTRL_LINK_AWARE_MODE	0x00000400
#define	BGE_CPMU_CTRL_LINK_SPEED_MODE	0x00004000
#define	BGE_CPMU_CTRL_GPHY_10MB_RXONLY	0x00010000

/* Link Speed 10MB/No Link Power Mode Clock Policy register */
#define	BGE_CPMU_LSPD_10MB_MACCLK_MASK	0x001F0000
#define	BGE_CPMU_LSPD_10MB_MACCLK_6_25	0x00130000

/* Link Speed 1000MB Power Mode Clock Policy register */
#define	BGE_CPMU_LSPD_1000MB_MACCLK_62_5	0x00000000
#define	BGE_CPMU_LSPD_1000MB_MACCLK_12_5	0x00110000
#define	BGE_CPMU_LSPD_1000MB_MACCLK_MASK	0x001F0000

/* Link Aware Power Mode Clock Policy register */
#define	BGE_CPMU_LNK_AWARE_MACCLK_MASK	0x001F0000
#define	BGE_CPMU_LNK_AWARE_MACCLK_6_25	0x00130000

#define	BGE_CPMU_HST_ACC_MACCLK_MASK	0x001F0000
#define	BGE_CPMU_HST_ACC_MACCLK_6_25	0x00130000

/* Clock Speed Override Policy register */
#define	CPMU_CLCK_ORIDE_MAC_ORIDE_EN	0x80000000

/* CPMU Clock Status register */
#define	BGE_CPMU_CLCK_STAT_MAC_CLCK_MASK	0x001F0000
#define	BGE_CPMU_CLCK_STAT_MAC_CLCK_62_5	0x00000000
#define	BGE_CPMU_CLCK_STAT_MAC_CLCK_12_5	0x00110000
#define	BGE_CPMU_CLCK_STAT_MAC_CLCK_6_25	0x00130000

/* CPMU Mutex Request register */
#define	BGE_CPMU_MUTEX_REQ_DRIVER	0x00001000
#define	BGE_CPMU_MUTEX_GNT_DRIVER	0x00001000

/* CPMU GPHY Strap register */
#define	BGE_CPMU_PHY_STRAP_IS_SERDES	0x00000020

/* CPMU Padring Control register */
#define	BGE_CPMU_PADRNG_CTL_RDIV2	0x00040000

/*
 * Mbuf Cluster Free registers (has nothing to do with BSD mbufs)
 */
#define	BGE_MBCF_MODE			0x3800
#define	BGE_MBCF_STATUS			0x3804

/* Mbuf Cluster Free mode register */
#define	BGE_MBCFMODE_RESET		0x00000001
#define	BGE_MBCFMODE_ENABLE		0x00000002
#define	BGE_MBCFMODE_ATTN		0x00000004

/* Mbuf Cluster Free status register */
#define	BGE_MBCFSTAT_ERROR		0x00000004

/*
 * Host Coalescing Control registers
 */
#define	BGE_HCC_MODE			0x3C00
#define	BGE_HCC_STATUS			0x3C04
#define	BGE_HCC_RX_COAL_TICKS		0x3C08
#define	BGE_HCC_TX_COAL_TICKS		0x3C0C
#define	BGE_HCC_RX_MAX_COAL_BDS		0x3C10
#define	BGE_HCC_TX_MAX_COAL_BDS		0x3C14
#define	BGE_HCC_RX_COAL_TICKS_INT	0x3C18 /* ticks during interrupt */
#define	BGE_HCC_TX_COAL_TICKS_INT	0x3C1C /* ticks during interrupt */
#define	BGE_HCC_RX_MAX_COAL_BDS_INT	0x3C20 /* BDs during interrupt */
#define	BGE_HCC_TX_MAX_COAL_BDS_INT	0x3C24 /* BDs during interrupt */
#define	BGE_HCC_STATS_TICKS		0x3C28
#define	BGE_HCC_STATS_ADDR_HI		0x3C30
#define	BGE_HCC_STATS_ADDR_LO		0x3C34
#define	BGE_HCC_STATUSBLK_ADDR_HI	0x3C38
#define	BGE_HCC_STATUSBLK_ADDR_LO	0x3C3C
#define	BGE_HCC_STATS_BASEADDR		0x3C40 /* address in NIC memory */
#define	BGE_HCC_STATUSBLK_BASEADDR	0x3C44 /* address in NIC memory */
#define	BGE_FLOW_ATTN			0x3C48
#define	BGE_HCC_JUMBO_BD_CONS		0x3C50
#define	BGE_HCC_STD_BD_CONS		0x3C54
#define	BGE_HCC_MINI_BD_CONS		0x3C58
#define	BGE_HCC_RX_RETURN_PROD0		0x3C80
#define	BGE_HCC_RX_RETURN_PROD1		0x3C84
#define	BGE_HCC_RX_RETURN_PROD2		0x3C88
#define	BGE_HCC_RX_RETURN_PROD3		0x3C8C
#define	BGE_HCC_RX_RETURN_PROD4		0x3C90
#define	BGE_HCC_RX_RETURN_PROD5		0x3C94
#define	BGE_HCC_RX_RETURN_PROD6		0x3C98
#define	BGE_HCC_RX_RETURN_PROD7		0x3C9C
#define	BGE_HCC_RX_RETURN_PROD8		0x3CA0
#define	BGE_HCC_RX_RETURN_PROD9		0x3CA4
#define	BGE_HCC_RX_RETURN_PROD10	0x3CA8
#define	BGE_HCC_RX_RETURN_PROD11	0x3CAC
#define	BGE_HCC_RX_RETURN_PROD12	0x3CB0
#define	BGE_HCC_RX_RETURN_PROD13	0x3CB4
#define	BGE_HCC_RX_RETURN_PROD14	0x3CB8
#define	BGE_HCC_RX_RETURN_PROD15	0x3CBC
#define	BGE_HCC_TX_BD_CONS0		0x3CC0
#define	BGE_HCC_TX_BD_CONS1		0x3CC4
#define	BGE_HCC_TX_BD_CONS2		0x3CC8
#define	BGE_HCC_TX_BD_CONS3		0x3CCC
#define	BGE_HCC_TX_BD_CONS4		0x3CD0
#define	BGE_HCC_TX_BD_CONS5		0x3CD4
#define	BGE_HCC_TX_BD_CONS6		0x3CD8
#define	BGE_HCC_TX_BD_CONS7		0x3CDC
#define	BGE_HCC_TX_BD_CONS8		0x3CE0
#define	BGE_HCC_TX_BD_CONS9		0x3CE4
#define	BGE_HCC_TX_BD_CONS10		0x3CE8
#define	BGE_HCC_TX_BD_CONS11		0x3CEC
#define	BGE_HCC_TX_BD_CONS12		0x3CF0
#define	BGE_HCC_TX_BD_CONS13		0x3CF4
#define	BGE_HCC_TX_BD_CONS14		0x3CF8
#define	BGE_HCC_TX_BD_CONS15		0x3CFC


/* Host coalescing mode register */
#define	BGE_HCCMODE_RESET		0x00000001
#define	BGE_HCCMODE_ENABLE		0x00000002
#define	BGE_HCCMODE_ATTN		0x00000004
#define	BGE_HCCMODE_COAL_NOW		0x00000008
#define	BGE_HCCMODE_MSI_BITS		0x00000070
#define	BGE_HCCMODE_STATBLK_SIZE	0x00000180

#define	BGE_STATBLKSZ_FULL		0x00000000
#define	BGE_STATBLKSZ_64BYTE		0x00000080
#define	BGE_STATBLKSZ_32BYTE		0x00000100

/* Host coalescing status register */
#define	BGE_HCCSTAT_ERROR		0x00000004

/* Flow attention register */
#define	BGE_FLOWATTN_MB_LOWAT		0x00000040
#define	BGE_FLOWATTN_MEMARB		0x00000080
#define	BGE_FLOWATTN_HOSTCOAL		0x00008000
#define	BGE_FLOWATTN_DMADONE_DISCARD	0x00010000
#define	BGE_FLOWATTN_RCB_INVAL		0x00020000
#define	BGE_FLOWATTN_RXDATA_CORRUPT	0x00040000
#define	BGE_FLOWATTN_RDBDI		0x00080000
#define	BGE_FLOWATTN_RXLS		0x00100000
#define	BGE_FLOWATTN_RXLP		0x00200000
#define	BGE_FLOWATTN_RBDC		0x00400000
#define	BGE_FLOWATTN_RBDI		0x00800000
#define	BGE_FLOWATTN_SDC		0x08000000
#define	BGE_FLOWATTN_SDI		0x10000000
#define	BGE_FLOWATTN_SRS		0x20000000
#define	BGE_FLOWATTN_SBDC		0x40000000
#define	BGE_FLOWATTN_SBDI		0x80000000

/*
 * Memory arbiter registers
 */
#define	BGE_MARB_MODE			0x4000
#define	BGE_MARB_STATUS			0x4004
#define	BGE_MARB_TRAPADDR_HI		0x4008
#define	BGE_MARB_TRAPADDR_LO		0x400C

/* Memory arbiter mode register */
#define	BGE_MARBMODE_RESET		0x00000001
#define	BGE_MARBMODE_ENABLE		0x00000002
#define	BGE_MARBMODE_TX_ADDR_TRAP	0x00000004
#define	BGE_MARBMODE_RX_ADDR_TRAP	0x00000008
#define	BGE_MARBMODE_DMAW1_TRAP		0x00000010
#define	BGE_MARBMODE_DMAR1_TRAP		0x00000020
#define	BGE_MARBMODE_RXRISC_TRAP	0x00000040
#define	BGE_MARBMODE_TXRISC_TRAP	0x00000080
#define	BGE_MARBMODE_PCI_TRAP		0x00000100
#define	BGE_MARBMODE_DMAR2_TRAP		0x00000200
#define	BGE_MARBMODE_RXQ_TRAP		0x00000400
#define	BGE_MARBMODE_RXDI1_TRAP		0x00000800
#define	BGE_MARBMODE_RXDI2_TRAP		0x00001000
#define	BGE_MARBMODE_DC_GRPMEM_TRAP	0x00002000
#define	BGE_MARBMODE_HCOAL_TRAP		0x00004000
#define	BGE_MARBMODE_MBUF_TRAP		0x00008000
#define	BGE_MARBMODE_TXDI_TRAP		0x00010000
#define	BGE_MARBMODE_SDC_DMAC_TRAP	0x00020000
#define	BGE_MARBMODE_TXBD_TRAP		0x00040000
#define	BGE_MARBMODE_BUFFMAN_TRAP	0x00080000
#define	BGE_MARBMODE_DMAW2_TRAP		0x00100000
#define	BGE_MARBMODE_XTSSRAM_ROFLO_TRAP	0x00200000
#define	BGE_MARBMODE_XTSSRAM_RUFLO_TRAP 0x00400000
#define	BGE_MARBMODE_XTSSRAM_WOFLO_TRAP	0x00800000
#define	BGE_MARBMODE_XTSSRAM_WUFLO_TRAP	0x01000000
#define	BGE_MARBMODE_XTSSRAM_PERR_TRAP	0x02000000

/* Memory arbiter status register */
#define	BGE_MARBSTAT_TX_ADDR_TRAP	0x00000004
#define	BGE_MARBSTAT_RX_ADDR_TRAP	0x00000008
#define	BGE_MARBSTAT_DMAW1_TRAP		0x00000010
#define	BGE_MARBSTAT_DMAR1_TRAP		0x00000020
#define	BGE_MARBSTAT_RXRISC_TRAP	0x00000040
#define	BGE_MARBSTAT_TXRISC_TRAP	0x00000080
#define	BGE_MARBSTAT_PCI_TRAP		0x00000100
#define	BGE_MARBSTAT_DMAR2_TRAP		0x00000200
#define	BGE_MARBSTAT_RXQ_TRAP		0x00000400
#define	BGE_MARBSTAT_RXDI1_TRAP		0x00000800
#define	BGE_MARBSTAT_RXDI2_TRAP		0x00001000
#define	BGE_MARBSTAT_DC_GRPMEM_TRAP	0x00002000
#define	BGE_MARBSTAT_HCOAL_TRAP		0x00004000
#define	BGE_MARBSTAT_MBUF_TRAP		0x00008000
#define	BGE_MARBSTAT_TXDI_TRAP		0x00010000
#define	BGE_MARBSTAT_SDC_DMAC_TRAP	0x00020000
#define	BGE_MARBSTAT_TXBD_TRAP		0x00040000
#define	BGE_MARBSTAT_BUFFMAN_TRAP	0x00080000
#define	BGE_MARBSTAT_DMAW2_TRAP		0x00100000
#define	BGE_MARBSTAT_XTSSRAM_ROFLO_TRAP	0x00200000
#define	BGE_MARBSTAT_XTSSRAM_RUFLO_TRAP 0x00400000
#define	BGE_MARBSTAT_XTSSRAM_WOFLO_TRAP	0x00800000
#define	BGE_MARBSTAT_XTSSRAM_WUFLO_TRAP	0x01000000
#define	BGE_MARBSTAT_XTSSRAM_PERR_TRAP	0x02000000

/*
 * Buffer manager control registers
 */
#define	BGE_BMAN_MODE			0x4400
#define	BGE_BMAN_STATUS			0x4404
#define	BGE_BMAN_MBUFPOOL_BASEADDR	0x4408
#define	BGE_BMAN_MBUFPOOL_LEN		0x440C
#define	BGE_BMAN_MBUFPOOL_READDMA_LOWAT	0x4410
#define	BGE_BMAN_MBUFPOOL_MACRX_LOWAT	0x4414
#define	BGE_BMAN_MBUFPOOL_HIWAT		0x4418
#define	BGE_BMAN_RXCPU_MBALLOC_REQ	0x441C
#define	BGE_BMAN_RXCPU_MBALLOC_RESP	0x4420
#define	BGE_BMAN_TXCPU_MBALLOC_REQ	0x4424
#define	BGE_BMAN_TXCPU_MBALLOC_RESP	0x4428
#define	BGE_BMAN_DMA_DESCPOOL_BASEADDR	0x442C
#define	BGE_BMAN_DMA_DESCPOOL_LEN	0x4430
#define	BGE_BMAN_DMA_DESCPOOL_LOWAT	0x4434
#define	BGE_BMAN_DMA_DESCPOOL_HIWAT	0x4438
#define	BGE_BMAN_RXCPU_DMAALLOC_REQ	0x443C
#define	BGE_BMAN_RXCPU_DMAALLOC_RESP	0x4440
#define	BGE_BMAN_TXCPU_DMAALLOC_REQ	0x4444
#define	BGE_BMAN_TXCPU_DMALLLOC_RESP	0x4448
#define	BGE_BMAN_HWDIAG_1		0x444C
#define	BGE_BMAN_HWDIAG_2		0x4450
#define	BGE_BMAN_HWDIAG_3		0x4454

/* Buffer manager mode register */
#define	BGE_BMANMODE_RESET		0x00000001
#define	BGE_BMANMODE_ENABLE		0x00000002
#define	BGE_BMANMODE_ATTN		0x00000004
#define	BGE_BMANMODE_TESTMODE		0x00000008
#define	BGE_BMANMODE_LOMBUF_ATTN	0x00000010
#define	BGE_BMANMODE_NO_TX_UNDERRUN	0x80000000

/* Buffer manager status register */
#define	BGE_BMANSTAT_ERRO		0x00000004
#define	BGE_BMANSTAT_LOWMBUF_ERROR	0x00000010


/*
 * Read DMA Control registers
 */
#define	BGE_RDMA_MODE			0x4800
#define	BGE_RDMA_STATUS			0x4804
#define	BGE_RDMA_RSRVCTRL_REG2		0x4890
#define	BGE_RDMA_LSO_CRPTEN_CTRL_REG2	0x48A0
#define	BGE_RDMA_RSRVCTRL		0x4900
#define	BGE_RDMA_LSO_CRPTEN_CTRL	0x4910

/* Read DMA mode register */
#define	BGE_RDMAMODE_RESET		0x00000001
#define	BGE_RDMAMODE_ENABLE		0x00000002
#define	BGE_RDMAMODE_PCI_TGT_ABRT_ATTN	0x00000004
#define	BGE_RDMAMODE_PCI_MSTR_ABRT_ATTN	0x00000008
#define	BGE_RDMAMODE_PCI_PERR_ATTN	0x00000010
#define	BGE_RDMAMODE_PCI_ADDROFLOW_ATTN	0x00000020
#define	BGE_RDMAMODE_PCI_FIFOOFLOW_ATTN	0x00000040
#define	BGE_RDMAMODE_PCI_FIFOUFLOW_ATTN	0x00000080
#define	BGE_RDMAMODE_PCI_FIFOOREAD_ATTN	0x00000100
#define	BGE_RDMAMODE_LOCWRITE_TOOBIG	0x00000200
#define	BGE_RDMAMODE_ALL_ATTNS		0x000003FC
#define	BGE_RDMAMODE_BD_SBD_CRPT_ATTN	0x00000800
#define	BGE_RDMAMODE_MBUF_RBD_CRPT_ATTN	0x00001000
#define	BGE_RDMAMODE_MBUF_SBD_CRPT_ATTN	0x00002000
#define	BGE_RDMAMODE_FIFO_SIZE_128	0x00020000
#define	BGE_RDMAMODE_FIFO_LONG_BURST	0x00030000
#define	BGE_RDMAMODE_MULT_DMA_RD_DIS	0x01000000
#define	BGE_RDMAMODE_TSO4_ENABLE	0x08000000
#define	BGE_RDMAMODE_TSO6_ENABLE	0x10000000
#define	BGE_RDMAMODE_H2BNC_VLAN_DET	0x20000000

/* Read DMA status register */
#define	BGE_RDMASTAT_PCI_TGT_ABRT_ATTN	0x00000004
#define	BGE_RDMASTAT_PCI_MSTR_ABRT_ATTN	0x00000008
#define	BGE_RDMASTAT_PCI_PERR_ATTN	0x00000010
#define	BGE_RDMASTAT_PCI_ADDROFLOW_ATTN	0x00000020
#define	BGE_RDMASTAT_PCI_FIFOOFLOW_ATTN	0x00000040
#define	BGE_RDMASTAT_PCI_FIFOUFLOW_ATTN	0x00000080
#define	BGE_RDMASTAT_PCI_FIFOOREAD_ATTN	0x00000100
#define	BGE_RDMASTAT_LOCWRITE_TOOBIG	0x00000200

/* Read DMA Reserved Control register */
#define	BGE_RDMA_RSRVCTRL_FIFO_OFLW_FIX	0x00000004
#define	BGE_RDMA_RSRVCTRL_FIFO_LWM_1_5K	0x00000C00
#define	BGE_RDMA_RSRVCTRL_FIFO_HWM_1_5K	0x000C0000
#define	BGE_RDMA_RSRVCTRL_TXMRGN_320B	0x28000000
#define	BGE_RDMA_RSRVCTRL_FIFO_LWM_MASK	0x00000FF0
#define	BGE_RDMA_RSRVCTRL_FIFO_HWM_MASK	0x000FF000
#define	BGE_RDMA_RSRVCTRL_TXMRGN_MASK	0xFFE00000

#define	BGE_RDMA_LSO_CRPTEN_CTRL_BLEN_BD_512	0x00020000
#define	BGE_RDMA_LSO_CRPTEN_CTRL_BLEN_BD_4K	0x00030000
#define	BGE_RDMA_LSO_CRPTEN_CTRL_BLEN_LSO_4K	0x000C0000
#define	BGE_RDMA_TX_LENGTH_WA_5719		0x02000000
#define	BGE_RDMA_TX_LENGTH_WA_5720		0x00200000

/* BD Read DMA Mode register */
#define	BGE_RDMA_BD_MODE		0x4A00
/* BD Read DMA Mode status register */
#define	BGE_RDMA_BD_STATUS		0x4A04

#define	BGE_RDMA_BD_MODE_RESET		0x00000001
#define	BGE_RDMA_BD_MODE_ENABLE		0x00000002

/* Non-LSO Read DMA Mode register */
#define	BGE_RDMA_NON_LSO_MODE		0x4B00
/* Non-LSO Read DMA Mode status register */
#define	BGE_RDMA_NON_LSO_STATUS		0x4B04

#define	BGE_RDMA_NON_LSO_MODE_RESET	0x00000001
#define	BGE_RDMA_NON_LSO_MODE_ENABLE	0x00000002

#define	BGE_RDMA_LENGTH			0x4BE0
#define	BGE_NUM_RDMA_CHANNELS		4

/*
 * Write DMA control registers
 */
#define	BGE_WDMA_MODE			0x4C00
#define	BGE_WDMA_STATUS			0x4C04

/* Write DMA mode register */
#define	BGE_WDMAMODE_RESET		0x00000001
#define	BGE_WDMAMODE_ENABLE		0x00000002
#define	BGE_WDMAMODE_PCI_TGT_ABRT_ATTN	0x00000004
#define	BGE_WDMAMODE_PCI_MSTR_ABRT_ATTN	0x00000008
#define	BGE_WDMAMODE_PCI_PERR_ATTN	0x00000010
#define	BGE_WDMAMODE_PCI_ADDROFLOW_ATTN	0x00000020
#define	BGE_WDMAMODE_PCI_FIFOOFLOW_ATTN	0x00000040
#define	BGE_WDMAMODE_PCI_FIFOUFLOW_ATTN	0x00000080
#define	BGE_WDMAMODE_PCI_FIFOOREAD_ATTN	0x00000100
#define	BGE_WDMAMODE_LOCREAD_TOOBIG	0x00000200
#define	BGE_WDMAMODE_ALL_ATTNS		0x000003FC
#define	BGE_WDMAMODE_RX_ACCEL		0x00000400
#define	BGE_WDMAMODE_STATUS_TAG_FIX	0x20000000
#define	BGE_WDMAMODE_BURST_ALL_DATA	0xC0000000

/* Write DMA status register */
#define	BGE_WDMASTAT_PCI_TGT_ABRT_ATTN	0x00000004
#define	BGE_WDMASTAT_PCI_MSTR_ABRT_ATTN	0x00000008
#define	BGE_WDMASTAT_PCI_PERR_ATTN	0x00000010
#define	BGE_WDMASTAT_PCI_ADDROFLOW_ATTN	0x00000020
#define	BGE_WDMASTAT_PCI_FIFOOFLOW_ATTN	0x00000040
#define	BGE_WDMASTAT_PCI_FIFOUFLOW_ATTN	0x00000080
#define	BGE_WDMASTAT_PCI_FIFOOREAD_ATTN	0x00000100
#define	BGE_WDMASTAT_LOCREAD_TOOBIG	0x00000200


/*
 * RX CPU registers
 */
#define	BGE_RXCPU_MODE			0x5000
#define	BGE_RXCPU_STATUS		0x5004
#define	BGE_RXCPU_PC			0x501C

/* RX CPU mode register */
#define	BGE_RXCPUMODE_RESET		0x00000001
#define	BGE_RXCPUMODE_SINGLESTEP	0x00000002
#define	BGE_RXCPUMODE_P0_DATAHLT_ENB	0x00000004
#define	BGE_RXCPUMODE_P0_INSTRHLT_ENB	0x00000008
#define	BGE_RXCPUMODE_WR_POSTBUF_ENB	0x00000010
#define	BGE_RXCPUMODE_DATACACHE_ENB	0x00000020
#define	BGE_RXCPUMODE_ROMFAIL		0x00000040
#define	BGE_RXCPUMODE_WATCHDOG_ENB	0x00000080
#define	BGE_RXCPUMODE_INSTRCACHE_PRF	0x00000100
#define	BGE_RXCPUMODE_INSTRCACHE_FLUSH	0x00000200
#define	BGE_RXCPUMODE_HALTCPU		0x00000400
#define	BGE_RXCPUMODE_INVDATAHLT_ENB	0x00000800
#define	BGE_RXCPUMODE_MADDRTRAPHLT_ENB	0x00001000
#define	BGE_RXCPUMODE_RADDRTRAPHLT_ENB	0x00002000

/* RX CPU status register */
#define	BGE_RXCPUSTAT_HW_BREAKPOINT	0x00000001
#define	BGE_RXCPUSTAT_HLTINSTR_EXECUTED	0x00000002
#define	BGE_RXCPUSTAT_INVALID_INSTR	0x00000004
#define	BGE_RXCPUSTAT_P0_DATAREF	0x00000008
#define	BGE_RXCPUSTAT_P0_INSTRREF	0x00000010
#define	BGE_RXCPUSTAT_INVALID_DATAACC	0x00000020
#define	BGE_RXCPUSTAT_INVALID_INSTRFTCH	0x00000040
#define	BGE_RXCPUSTAT_BAD_MEMALIGN	0x00000080
#define	BGE_RXCPUSTAT_MADDR_TRAP	0x00000100
#define	BGE_RXCPUSTAT_REGADDR_TRAP	0x00000200
#define	BGE_RXCPUSTAT_DATAACC_STALL	0x00001000
#define	BGE_RXCPUSTAT_INSTRFETCH_STALL	0x00002000
#define	BGE_RXCPUSTAT_MA_WR_FIFOOFLOW	0x08000000
#define	BGE_RXCPUSTAT_MA_RD_FIFOOFLOW	0x10000000
#define	BGE_RXCPUSTAT_MA_DATAMASK_OFLOW	0x20000000
#define	BGE_RXCPUSTAT_MA_REQ_FIFOOFLOW	0x40000000
#define	BGE_RXCPUSTAT_BLOCKING_READ	0x80000000


/*
 * V? CPU registers
 */
#define	BGE_VCPU_STATUS			0x5100
#define	BGE_VCPU_EXT_CTRL		0x6890

#define	BGE_VCPU_STATUS_INIT_DONE	0x04000000
#define	BGE_VCPU_STATUS_DRV_RESET 	0x08000000

#define	BGE_VCPU_EXT_CTRL_HALT_CPU	0x00400000
#define	BGE_VCPU_EXT_CTRL_DISABLE_WOL	0x20000000

/*
 * TX CPU registers
 */
#define	BGE_TXCPU_MODE			0x5400
#define	BGE_TXCPU_STATUS		0x5404
#define	BGE_TXCPU_PC			0x541C

/* TX CPU mode register */
#define	BGE_TXCPUMODE_RESET		0x00000001
#define	BGE_TXCPUMODE_SINGLESTEP	0x00000002
#define	BGE_TXCPUMODE_P0_DATAHLT_ENB	0x00000004
#define	BGE_TXCPUMODE_P0_INSTRHLT_ENB	0x00000008
#define	BGE_TXCPUMODE_WR_POSTBUF_ENB	0x00000010
#define	BGE_TXCPUMODE_DATACACHE_ENB	0x00000020
#define	BGE_TXCPUMODE_ROMFAIL		0x00000040
#define	BGE_TXCPUMODE_WATCHDOG_ENB	0x00000080
#define	BGE_TXCPUMODE_INSTRCACHE_PRF	0x00000100
#define	BGE_TXCPUMODE_INSTRCACHE_FLUSH	0x00000200
#define	BGE_TXCPUMODE_HALTCPU		0x00000400
#define	BGE_TXCPUMODE_INVDATAHLT_ENB	0x00000800
#define	BGE_TXCPUMODE_MADDRTRAPHLT_ENB	0x00001000

/* TX CPU status register */
#define	BGE_TXCPUSTAT_HW_BREAKPOINT	0x00000001
#define	BGE_TXCPUSTAT_HLTINSTR_EXECUTED	0x00000002
#define	BGE_TXCPUSTAT_INVALID_INSTR	0x00000004
#define	BGE_TXCPUSTAT_P0_DATAREF	0x00000008
#define	BGE_TXCPUSTAT_P0_INSTRREF	0x00000010
#define	BGE_TXCPUSTAT_INVALID_DATAACC	0x00000020
#define	BGE_TXCPUSTAT_INVALID_INSTRFTCH	0x00000040
#define	BGE_TXCPUSTAT_BAD_MEMALIGN	0x00000080
#define	BGE_TXCPUSTAT_MADDR_TRAP	0x00000100
#define	BGE_TXCPUSTAT_REGADDR_TRAP	0x00000200
#define	BGE_TXCPUSTAT_DATAACC_STALL	0x00001000
#define	BGE_TXCPUSTAT_INSTRFETCH_STALL	0x00002000
#define	BGE_TXCPUSTAT_MA_WR_FIFOOFLOW	0x08000000
#define	BGE_TXCPUSTAT_MA_RD_FIFOOFLOW	0x10000000
#define	BGE_TXCPUSTAT_MA_DATAMASK_OFLOW	0x20000000
#define	BGE_TXCPUSTAT_MA_REQ_FIFOOFLOW	0x40000000
#define	BGE_TXCPUSTAT_BLOCKING_READ	0x80000000


/*
 * Low priority mailbox registers
 */
#define	BGE_LPMBX_IRQ0_HI		0x5800
#define	BGE_LPMBX_IRQ0_LO		0x5804
#define	BGE_LPMBX_IRQ1_HI		0x5808
#define	BGE_LPMBX_IRQ1_LO		0x580C
#define	BGE_LPMBX_IRQ2_HI		0x5810
#define	BGE_LPMBX_IRQ2_LO		0x5814
#define	BGE_LPMBX_IRQ3_HI		0x5818
#define	BGE_LPMBX_IRQ3_LO		0x581C
#define	BGE_LPMBX_GEN0_HI		0x5820
#define	BGE_LPMBX_GEN0_LO		0x5824
#define	BGE_LPMBX_GEN1_HI		0x5828
#define	BGE_LPMBX_GEN1_LO		0x582C
#define	BGE_LPMBX_GEN2_HI		0x5830
#define	BGE_LPMBX_GEN2_LO		0x5834
#define	BGE_LPMBX_GEN3_HI		0x5828
#define	BGE_LPMBX_GEN3_LO		0x582C
#define	BGE_LPMBX_GEN4_HI		0x5840
#define	BGE_LPMBX_GEN4_LO		0x5844
#define	BGE_LPMBX_GEN5_HI		0x5848
#define	BGE_LPMBX_GEN5_LO		0x584C
#define	BGE_LPMBX_GEN6_HI		0x5850
#define	BGE_LPMBX_GEN6_LO		0x5854
#define	BGE_LPMBX_GEN7_HI		0x5858
#define	BGE_LPMBX_GEN7_LO		0x585C
#define	BGE_LPMBX_RELOAD_STATS_HI	0x5860
#define	BGE_LPMBX_RELOAD_STATS_LO	0x5864
#define	BGE_LPMBX_RX_STD_PROD_HI	0x5868
#define	BGE_LPMBX_RX_STD_PROD_LO	0x586C
#define	BGE_LPMBX_RX_JUMBO_PROD_HI	0x5870
#define	BGE_LPMBX_RX_JUMBO_PROD_LO	0x5874
#define	BGE_LPMBX_RX_MINI_PROD_HI	0x5878
#define	BGE_LPMBX_RX_MINI_PROD_LO	0x587C
#define	BGE_LPMBX_RX_CONS0_HI		0x5880
#define	BGE_LPMBX_RX_CONS0_LO		0x5884
#define	BGE_LPMBX_RX_CONS1_HI		0x5888
#define	BGE_LPMBX_RX_CONS1_LO		0x588C
#define	BGE_LPMBX_RX_CONS2_HI		0x5890
#define	BGE_LPMBX_RX_CONS2_LO		0x5894
#define	BGE_LPMBX_RX_CONS3_HI		0x5898
#define	BGE_LPMBX_RX_CONS3_LO		0x589C
#define	BGE_LPMBX_RX_CONS4_HI		0x58A0
#define	BGE_LPMBX_RX_CONS4_LO		0x58A4
#define	BGE_LPMBX_RX_CONS5_HI		0x58A8
#define	BGE_LPMBX_RX_CONS5_LO		0x58AC
#define	BGE_LPMBX_RX_CONS6_HI		0x58B0
#define	BGE_LPMBX_RX_CONS6_LO		0x58B4
#define	BGE_LPMBX_RX_CONS7_HI		0x58B8
#define	BGE_LPMBX_RX_CONS7_LO		0x58BC
#define	BGE_LPMBX_RX_CONS8_HI		0x58C0
#define	BGE_LPMBX_RX_CONS8_LO		0x58C4
#define	BGE_LPMBX_RX_CONS9_HI		0x58C8
#define	BGE_LPMBX_RX_CONS9_LO		0x58CC
#define	BGE_LPMBX_RX_CONS10_HI		0x58D0
#define	BGE_LPMBX_RX_CONS10_LO		0x58D4
#define	BGE_LPMBX_RX_CONS11_HI		0x58D8
#define	BGE_LPMBX_RX_CONS11_LO		0x58DC
#define	BGE_LPMBX_RX_CONS12_HI		0x58E0
#define	BGE_LPMBX_RX_CONS12_LO		0x58E4
#define	BGE_LPMBX_RX_CONS13_HI		0x58E8
#define	BGE_LPMBX_RX_CONS13_LO		0x58EC
#define	BGE_LPMBX_RX_CONS14_HI		0x58F0
#define	BGE_LPMBX_RX_CONS14_LO		0x58F4
#define	BGE_LPMBX_RX_CONS15_HI		0x58F8
#define	BGE_LPMBX_RX_CONS15_LO		0x58FC
#define	BGE_LPMBX_TX_HOST_PROD0_HI	0x5900
#define	BGE_LPMBX_TX_HOST_PROD0_LO	0x5904
#define	BGE_LPMBX_TX_HOST_PROD1_HI	0x5908
#define	BGE_LPMBX_TX_HOST_PROD1_LO	0x590C
#define	BGE_LPMBX_TX_HOST_PROD2_HI	0x5910
#define	BGE_LPMBX_TX_HOST_PROD2_LO	0x5914
#define	BGE_LPMBX_TX_HOST_PROD3_HI	0x5918
#define	BGE_LPMBX_TX_HOST_PROD3_LO	0x591C
#define	BGE_LPMBX_TX_HOST_PROD4_HI	0x5920
#define	BGE_LPMBX_TX_HOST_PROD4_LO	0x5924
#define	BGE_LPMBX_TX_HOST_PROD5_HI	0x5928
#define	BGE_LPMBX_TX_HOST_PROD5_LO	0x592C
#define	BGE_LPMBX_TX_HOST_PROD6_HI	0x5930
#define	BGE_LPMBX_TX_HOST_PROD6_LO	0x5934
#define	BGE_LPMBX_TX_HOST_PROD7_HI	0x5938
#define	BGE_LPMBX_TX_HOST_PROD7_LO	0x593C
#define	BGE_LPMBX_TX_HOST_PROD8_HI	0x5940
#define	BGE_LPMBX_TX_HOST_PROD8_LO	0x5944
#define	BGE_LPMBX_TX_HOST_PROD9_HI	0x5948
#define	BGE_LPMBX_TX_HOST_PROD9_LO	0x594C
#define	BGE_LPMBX_TX_HOST_PROD10_HI	0x5950
#define	BGE_LPMBX_TX_HOST_PROD10_LO	0x5954
#define	BGE_LPMBX_TX_HOST_PROD11_HI	0x5958
#define	BGE_LPMBX_TX_HOST_PROD11_LO	0x595C
#define	BGE_LPMBX_TX_HOST_PROD12_HI	0x5960
#define	BGE_LPMBX_TX_HOST_PROD12_LO	0x5964
#define	BGE_LPMBX_TX_HOST_PROD13_HI	0x5968
#define	BGE_LPMBX_TX_HOST_PROD13_LO	0x596C
#define	BGE_LPMBX_TX_HOST_PROD14_HI	0x5970
#define	BGE_LPMBX_TX_HOST_PROD14_LO	0x5974
#define	BGE_LPMBX_TX_HOST_PROD15_HI	0x5978
#define	BGE_LPMBX_TX_HOST_PROD15_LO	0x597C
#define	BGE_LPMBX_TX_NIC_PROD0_HI	0x5980
#define	BGE_LPMBX_TX_NIC_PROD0_LO	0x5984
#define	BGE_LPMBX_TX_NIC_PROD1_HI	0x5988
#define	BGE_LPMBX_TX_NIC_PROD1_LO	0x598C
#define	BGE_LPMBX_TX_NIC_PROD2_HI	0x5990
#define	BGE_LPMBX_TX_NIC_PROD2_LO	0x5994
#define	BGE_LPMBX_TX_NIC_PROD3_HI	0x5998
#define	BGE_LPMBX_TX_NIC_PROD3_LO	0x599C
#define	BGE_LPMBX_TX_NIC_PROD4_HI	0x59A0
#define	BGE_LPMBX_TX_NIC_PROD4_LO	0x59A4
#define	BGE_LPMBX_TX_NIC_PROD5_HI	0x59A8
#define	BGE_LPMBX_TX_NIC_PROD5_LO	0x59AC
#define	BGE_LPMBX_TX_NIC_PROD6_HI	0x59B0
#define	BGE_LPMBX_TX_NIC_PROD6_LO	0x59B4
#define	BGE_LPMBX_TX_NIC_PROD7_HI	0x59B8
#define	BGE_LPMBX_TX_NIC_PROD7_LO	0x59BC
#define	BGE_LPMBX_TX_NIC_PROD8_HI	0x59C0
#define	BGE_LPMBX_TX_NIC_PROD8_LO	0x59C4
#define	BGE_LPMBX_TX_NIC_PROD9_HI	0x59C8
#define	BGE_LPMBX_TX_NIC_PROD9_LO	0x59CC
#define	BGE_LPMBX_TX_NIC_PROD10_HI	0x59D0
#define	BGE_LPMBX_TX_NIC_PROD10_LO	0x59D4
#define	BGE_LPMBX_TX_NIC_PROD11_HI	0x59D8
#define	BGE_LPMBX_TX_NIC_PROD11_LO	0x59DC
#define	BGE_LPMBX_TX_NIC_PROD12_HI	0x59E0
#define	BGE_LPMBX_TX_NIC_PROD12_LO	0x59E4
#define	BGE_LPMBX_TX_NIC_PROD13_HI	0x59E8
#define	BGE_LPMBX_TX_NIC_PROD13_LO	0x59EC
#define	BGE_LPMBX_TX_NIC_PROD14_HI	0x59F0
#define	BGE_LPMBX_TX_NIC_PROD14_LO	0x59F4
#define	BGE_LPMBX_TX_NIC_PROD15_HI	0x59F8
#define	BGE_LPMBX_TX_NIC_PROD15_LO	0x59FC

/*
 * Flow throw Queue reset register
 */
#define	BGE_FTQ_RESET			0x5C00

#define	BGE_FTQRESET_DMAREAD		0x00000002
#define	BGE_FTQRESET_DMAHIPRIO_RD	0x00000004
#define	BGE_FTQRESET_DMADONE		0x00000010
#define	BGE_FTQRESET_SBDC		0x00000020
#define	BGE_FTQRESET_SDI		0x00000040
#define	BGE_FTQRESET_WDMA		0x00000080
#define	BGE_FTQRESET_DMAHIPRIO_WR	0x00000100
#define	BGE_FTQRESET_TYPE1_SOFTWARE	0x00000200
#define	BGE_FTQRESET_SDC		0x00000400
#define	BGE_FTQRESET_HCC		0x00000800
#define	BGE_FTQRESET_TXFIFO		0x00001000
#define	BGE_FTQRESET_MBC		0x00002000
#define	BGE_FTQRESET_RBDC		0x00004000
#define	BGE_FTQRESET_RXLP		0x00008000
#define	BGE_FTQRESET_RDBDI		0x00010000
#define	BGE_FTQRESET_RDC		0x00020000
#define	BGE_FTQRESET_TYPE2_SOFTWARE	0x00040000

/*
 * Message Signaled Interrupt registers
 */
#define	BGE_MSI_MODE			0x6000
#define	BGE_MSI_STATUS			0x6004
#define	BGE_MSI_FIFOACCESS		0x6008

/* MSI mode register */
#define	BGE_MSIMODE_RESET		0x00000001
#define	BGE_MSIMODE_ENABLE		0x00000002
#define	BGE_MSIMODE_PCI_TGT_ABRT_ATTN	0x00000004
#define	BGE_MSIMODE_PCI_MSTR_ABRT_ATTN	0x00000008
#define	BGE_MSIMODE_PCI_PERR_ATTN	0x00000010
#define	BGE_MSIMODE_ONE_SHOT_DISABLE	0x00000020
#define	BGE_MSIMODE_MULTIVEC_ENABLE	0x00000080

/* MSI status register */
#define	BGE_MSISTAT_PCI_TGT_ABRT_ATTN	0x00000004
#define	BGE_MSISTAT_PCI_MSTR_ABRT_ATTN	0x00000008
#define	BGE_MSISTAT_PCI_PERR_ATTN	0x00000010
#define	BGE_MSISTAT_MSI_FIFOUFLOW_ATTN	0x00000020
#define	BGE_MSISTAT_MSI_FIFOOFLOW_ATTN	0x00000040


/*
 * DMA Completion registers
 */
#define	BGE_DMAC_MODE			0x6400

/* DMA Completion mode register */
#define	BGE_DMACMODE_RESET		0x00000001
#define	BGE_DMACMODE_ENABLE		0x00000002


/*
 * General control registers.
 */
#define	BGE_MODE_CTL			0x6800
#define	BGE_MISC_CFG			0x6804
#define	BGE_MISC_LOCAL_CTL		0x6808
#define	BGE_RX_CPU_EVENT		0x6810
#define	BGE_TX_CPU_EVENT		0x6820
#define	BGE_EE_ADDR			0x6838
#define	BGE_EE_DATA			0x683C
#define	BGE_EE_CTL			0x6840
#define	BGE_MDI_CTL			0x6844
#define	BGE_EE_DELAY			0x6848
#define	BGE_FASTBOOT_PC			0x6894

#define	BGE_RX_CPU_DRV_EVENT		0x00004000

/*
 * NVRAM Control registers
 */

#define	BGE_NVRAM_CMD			0x7000
#define	BGE_NVRAM_STAT			0x7004
#define	BGE_NVRAM_WRDATA		0x7008
#define	BGE_NVRAM_ADDR			0x700c
#define	BGE_NVRAM_RDDATA		0x7010
#define	BGE_NVRAM_CFG1			0x7014
#define	BGE_NVRAM_CFG2			0x7018
#define	BGE_NVRAM_CFG3			0x701c
#define	BGE_NVRAM_SWARB			0x7020
#define	BGE_NVRAM_ACCESS		0x7024
#define	BGE_NVRAM_WRITE1		0x7028


#define	BGE_NVRAMCMD_RESET		0x00000001
#define	BGE_NVRAMCMD_DONE		0x00000008
#define	BGE_NVRAMCMD_START		0x00000010
#define	BGE_NVRAMCMD_WR			0x00000020 /* 1 = wr, 0 = rd */
#define	BGE_NVRAMCMD_ERASE		0x00000040
#define	BGE_NVRAMCMD_FIRST		0x00000080
#define	BGE_NVRAMCMD_LAST		0x00000100

#define	BGE_NVRAM_READCMD \
	(BGE_NVRAMCMD_FIRST|BGE_NVRAMCMD_LAST| \
	BGE_NVRAMCMD_START|BGE_NVRAMCMD_DONE)
#define	BGE_NVRAM_WRITECMD \
	(BGE_NVRAMCMD_FIRST|BGE_NVRAMCMD_LAST| \
	BGE_NVRAMCMD_START|BGE_NVRAMCMD_DONE|BGE_NVRAMCMD_WR)

#define	BGE_NVRAMSWARB_SET0		0x00000001
#define	BGE_NVRAMSWARB_SET1		0x00000002
#define	BGE_NVRAMSWARB_SET2		0x00000003
#define	BGE_NVRAMSWARB_SET3		0x00000004
#define	BGE_NVRAMSWARB_CLR0		0x00000010
#define	BGE_NVRAMSWARB_CLR1		0x00000020
#define	BGE_NVRAMSWARB_CLR2		0x00000040
#define	BGE_NVRAMSWARB_CLR3		0x00000080
#define	BGE_NVRAMSWARB_GNT0		0x00000100
#define	BGE_NVRAMSWARB_GNT1		0x00000200
#define	BGE_NVRAMSWARB_GNT2		0x00000400
#define	BGE_NVRAMSWARB_GNT3		0x00000800
#define	BGE_NVRAMSWARB_REQ0		0x00001000
#define	BGE_NVRAMSWARB_REQ1		0x00002000
#define	BGE_NVRAMSWARB_REQ2		0x00004000
#define	BGE_NVRAMSWARB_REQ3		0x00008000

#define	BGE_NVRAMACC_ENABLE		0x00000001
#define	BGE_NVRAMACC_WRENABLE		0x00000002

/*
 * TLP Control Register
 * Applicable to BCM5721 and BCM5751 only
 */
#define	BGE_TLP_CONTROL_REG		0x7c00
#define	BGE_TLP_DATA_FIFO_PROTECT	0x02000000

/*
 * PHY Test Control Register
 * Applicable to BCM5721 and BCM5751 only
 */
#define	BGE_PHY_TEST_CTRL_REG		0x7e2c
#define	BGE_PHY_PCIE_SCRAM_MODE		0x0020
#define	BGE_PHY_PCIE_LTASS_MODE		0x0040

/* Mode control register */
#define	BGE_MODECTL_INT_SNDCOAL_ONLY	0x00000001
#define	BGE_MODECTL_BYTESWAP_NONFRAME	0x00000002
#define	BGE_MODECTL_WORDSWAP_NONFRAME	0x00000004
#define	BGE_MODECTL_BYTESWAP_DATA	0x00000010
#define	BGE_MODECTL_WORDSWAP_DATA	0x00000020
#define	BGE_MODECTL_BYTESWAP_B2HRX_DATA	0x00000040
#define	BGE_MODECTL_WORDSWAP_B2HRX_DATA	0x00000080
#define	BGE_MODECTL_NO_FRAME_CRACKING	0x00000200
#define	BGE_MODECTL_NO_RX_CRC		0x00000400
#define	BGE_MODECTL_RX_BADFRAMES	0x00000800
#define	BGE_MODECTL_NO_TX_INTR		0x00002000
#define	BGE_MODECTL_NO_RX_INTR		0x00004000
#define	BGE_MODECTL_FORCE_PCI32		0x00008000
#define	BGE_MODECTL_B2HRX_ENABLE	0x00008000
#define	BGE_MODECTL_STACKUP		0x00010000
#define	BGE_MODECTL_HOST_SEND_BDS	0x00020000
#define	BGE_MODECTL_HTX2B_ENABLE	0x00040000
#define	BGE_MODECTL_TX_NO_PHDR_CSUM	0x00100000
#define	BGE_MODECTL_RX_NO_PHDR_CSUM	0x00800000
#define	BGE_MODECTL_TX_ATTN_INTR	0x01000000
#define	BGE_MODECTL_RX_ATTN_INTR	0x02000000
#define	BGE_MODECTL_MAC_ATTN_INTR	0x04000000
#define	BGE_MODECTL_DMA_ATTN_INTR	0x08000000
#define	BGE_MODECTL_FLOWCTL_ATTN_INTR	0x10000000
#define	BGE_MODECTL_4X_SENDRING_SZ	0x20000000
#define	BGE_MODECTL_FW_PROCESS_MCASTS	0x40000000

/* Misc. config register */
#define	BGE_MISCCFG_RESET_CORE_CLOCKS	0x00000001
#define	BGE_MISCCFG_TIMER_PRESCALER	0x000000FE
#define	BGE_MISCCFG_BOARD_ID_MASK	0x0001E000
#define	BGE_MISCCFG_BOARD_ID_5704	0x00000000
#define	BGE_MISCCFG_BOARD_ID_5704CIOBE	0x00004000
#define	BGE_MISCCFG_BOARD_ID_5788	0x00010000
#define	BGE_MISCCFG_BOARD_ID_5788M	0x00018000
#define	BGE_MISCCFG_EPHY_IDDQ		0x00200000
#define	BGE_MISCCFG_KEEP_GPHY_POWER	0x04000000

#define	BGE_32BITTIME_66MHZ		(0x41 << 1)

/* Misc. Local Control */
#define	BGE_MLC_INTR_STATE		0x00000001
#define	BGE_MLC_INTR_CLR		0x00000002
#define	BGE_MLC_INTR_SET		0x00000004
#define	BGE_MLC_INTR_ONATTN		0x00000008
#define	BGE_MLC_MISCIO_IN0		0x00000100
#define	BGE_MLC_MISCIO_IN1		0x00000200
#define	BGE_MLC_MISCIO_IN2		0x00000400
#define	BGE_MLC_MISCIO_OUTEN0		0x00000800
#define	BGE_MLC_MISCIO_OUTEN1		0x00001000
#define	BGE_MLC_MISCIO_OUTEN2		0x00002000
#define	BGE_MLC_MISCIO_OUT0		0x00004000
#define	BGE_MLC_MISCIO_OUT1		0x00008000
#define	BGE_MLC_MISCIO_OUT2		0x00010000
#define	BGE_MLC_EXTRAM_ENB		0x00020000
#define	BGE_MLC_SRAM_SIZE		0x001C0000
#define	BGE_MLC_BANK_SEL		0x00200000 /* 0 = 2 banks, 1 == 1 */
#define	BGE_MLC_SSRAM_TYPE		0x00400000 /* 1 = ZBT, 0 = standard */
#define	BGE_MLC_SSRAM_CYC_DESEL		0x00800000
#define	BGE_MLC_AUTO_EEPROM		0x01000000

#define	BGE_SSRAMSIZE_256KB		0x00000000
#define	BGE_SSRAMSIZE_512KB		0x00040000
#define	BGE_SSRAMSIZE_1MB		0x00080000
#define	BGE_SSRAMSIZE_2MB		0x000C0000
#define	BGE_SSRAMSIZE_4MB		0x00100000
#define	BGE_SSRAMSIZE_8MB		0x00140000
#define	BGE_SSRAMSIZE_16M		0x00180000

/* EEPROM address register */
#define	BGE_EEADDR_ADDRESS		0x0000FFFC
#define	BGE_EEADDR_HALFCLK		0x01FF0000
#define	BGE_EEADDR_START		0x02000000
#define	BGE_EEADDR_DEVID		0x1C000000
#define	BGE_EEADDR_RESET		0x20000000
#define	BGE_EEADDR_DONE			0x40000000
#define	BGE_EEADDR_RW			0x80000000 /* 1 = rd, 0 = wr */

#define	BGE_EEDEVID(x)			((x & 7) << 26)
#define	BGE_EEHALFCLK(x)		((x & 0x1FF) << 16)
#define	BGE_HALFCLK_384SCL		0x60
#define	BGE_EE_READCMD \
	(BGE_EEHALFCLK(BGE_HALFCLK_384SCL)|BGE_EEDEVID(0)|	\
	BGE_EEADDR_START|BGE_EEADDR_RW|BGE_EEADDR_DONE)
#define	BGE_EE_WRCMD \
	(BGE_EEHALFCLK(BGE_HALFCLK_384SCL)|BGE_EEDEVID(0)|	\
	BGE_EEADDR_START|BGE_EEADDR_DONE)

/* EEPROM Control register */
#define	BGE_EECTL_CLKOUT_TRISTATE	0x00000001
#define	BGE_EECTL_CLKOUT		0x00000002
#define	BGE_EECTL_CLKIN			0x00000004
#define	BGE_EECTL_DATAOUT_TRISTATE	0x00000008
#define	BGE_EECTL_DATAOUT		0x00000010
#define	BGE_EECTL_DATAIN		0x00000020

/* MDI (MII/GMII) access register */
#define	BGE_MDI_DATA			0x00000001
#define	BGE_MDI_DIR			0x00000002
#define	BGE_MDI_SEL			0x00000004
#define	BGE_MDI_CLK			0x00000008

#define	BGE_MEMWIN_START		0x00008000
#define	BGE_MEMWIN_END			0x0000FFFF

/* BAR1 (APE) Register Definitions */

#define	BGE_APE_GPIO_MSG		0x0008
#define	BGE_APE_EVENT			0x000C
#define	BGE_APE_LOCK_REQ		0x002C
#define	BGE_APE_LOCK_GRANT		0x004C

#define	BGE_APE_GPIO_MSG_SHIFT		4

#define	BGE_APE_EVENT_1			0x00000001

#define	BGE_APE_LOCK_REQ_DRIVER0	0x00001000

#define	BGE_APE_LOCK_GRANT_DRIVER0	0x00001000

/* APE Shared Memory block (writable by APE only) */
#define	BGE_APE_SEG_SIG			0x4000
#define	BGE_APE_FW_STATUS		0x400C
#define	BGE_APE_FW_FEATURES		0x4010
#define	BGE_APE_FW_BEHAVIOR		0x4014
#define	BGE_APE_FW_VERSION		0x4018
#define	BGE_APE_FW_HEARTBEAT_INTERVAL	0x4024
#define	BGE_APE_FW_HEARTBEAT		0x4028
#define	BGE_APE_FW_ERROR_FLAGS		0x4074

#define	BGE_APE_SEG_SIG_MAGIC		0x41504521

#define	BGE_APE_FW_STATUS_READY		0x00000100

#define	BGE_APE_FW_FEATURE_DASH		0x00000001
#define	BGE_APE_FW_FEATURE_NCSI		0x00000002

#define	BGE_APE_FW_VERSION_MAJMSK	0xFF000000
#define	BGE_APE_FW_VERSION_MAJSFT	24
#define	BGE_APE_FW_VERSION_MINMSK	0x00FF0000
#define	BGE_APE_FW_VERSION_MINSFT	16
#define	BGE_APE_FW_VERSION_REVMSK	0x0000FF00
#define	BGE_APE_FW_VERSION_REVSFT	8
#define	BGE_APE_FW_VERSION_BLDMSK	0x000000FF

/* Host Shared Memory block (writable by host only) */
#define	BGE_APE_HOST_SEG_SIG		0x4200
#define	BGE_APE_HOST_SEG_LEN		0x4204
#define	BGE_APE_HOST_INIT_COUNT		0x4208
#define	BGE_APE_HOST_DRIVER_ID		0x420C
#define	BGE_APE_HOST_BEHAVIOR		0x4210
#define	BGE_APE_HOST_HEARTBEAT_INT_MS	0x4214
#define	BGE_APE_HOST_HEARTBEAT_COUNT	0x4218
#define	BGE_APE_HOST_DRVR_STATE		0x421C
#define	BGE_APE_HOST_WOL_SPEED		0x4224

#define	BGE_APE_HOST_SEG_SIG_MAGIC	0x484F5354

#define	BGE_APE_HOST_SEG_LEN_MAGIC	0x00000020

#define	BGE_APE_HOST_DRIVER_ID_FBSD	0xF6000000
#define	BGE_APE_HOST_DRIVER_ID_MAGIC(maj, min)				\
	(BGE_APE_HOST_DRIVER_ID_FBSD |					\
	((maj) & 0xffd) << 16 | ((min) & 0xff) << 8)

#define	BGE_APE_HOST_BEHAV_NO_PHYLOCK	0x00000001

#define	BGE_APE_HOST_HEARTBEAT_INT_DISABLE	0
#define	BGE_APE_HOST_HEARTBEAT_INT_5SEC 5000

#define	BGE_APE_HOST_DRVR_STATE_START	0x00000001
#define	BGE_APE_HOST_DRVR_STATE_UNLOAD	0x00000002
#define	BGE_APE_HOST_DRVR_STATE_WOL	0x00000003
#define	BGE_APE_HOST_DRVR_STATE_SUSPEND	0x00000004

#define	BGE_APE_HOST_WOL_SPEED_AUTO	0x00008000

#define	BGE_APE_EVENT_STATUS		0x4300

#define	BGE_APE_EVENT_STATUS_DRIVER_EVNT	0x00000010
#define	BGE_APE_EVENT_STATUS_STATE_CHNGE	0x00000500
#define	BGE_APE_EVENT_STATUS_STATE_START	0x00010000
#define	BGE_APE_EVENT_STATUS_STATE_UNLOAD	0x00020000
#define	BGE_APE_EVENT_STATUS_STATE_WOL		0x00030000
#define	BGE_APE_EVENT_STATUS_STATE_SUSPEND	0x00040000
#define	BGE_APE_EVENT_STATUS_EVENT_PENDING	0x80000000

#define	BGE_APE_DEBUG_LOG		0x4E00
#define	BGE_APE_DEBUG_LOG_LEN		0x0100

#define	BGE_APE_PER_LOCK_REQ		0x8400
#define	BGE_APE_PER_LOCK_GRANT		0x8420

#define	BGE_APE_LOCK_PER_REQ_DRIVER0	0x00001000
#define	BGE_APE_LOCK_PER_REQ_DRIVER1	0x00000002
#define	BGE_APE_LOCK_PER_REQ_DRIVER2	0x00000004
#define	BGE_APE_LOCK_PER_REQ_DRIVER3	0x00000008

#define	BGE_APE_PER_LOCK_GRANT_DRIVER0	0x00001000
#define	BGE_APE_PER_LOCK_GRANT_DRIVER1	0x00000002
#define	BGE_APE_PER_LOCK_GRANT_DRIVER2	0x00000004
#define	BGE_APE_PER_LOCK_GRANT_DRIVER3	0x00000008

/* APE Mutex Resources */
#define	BGE_APE_LOCK_PHY0		0
#define	BGE_APE_LOCK_GRC		1
#define	BGE_APE_LOCK_PHY1		2
#define	BGE_APE_LOCK_PHY2		3
#define	BGE_APE_LOCK_MEM		4
#define	BGE_APE_LOCK_PHY3		5
#define	BGE_APE_LOCK_GPIO		7

#define	BGE_MEMWIN_READ(pc, tag, x, val)				\
	do {								\
		pci_conf_write(pc, tag, BGE_PCI_MEMWIN_BASEADDR,	\
		    (0xFFFF8000 & x));					\
		val = CSR_READ_4(sc, BGE_MEMWIN_START + (x & 0x7FFF));	\
	} while(0)

#define	BGE_MEMWIN_WRITE(pc, tag, x, val)				\
	do {								\
		pci_conf_write(pc, tag, BGE_PCI_MEMWIN_BASEADDR,	\
		    (0xFFFF8000 & x));					\
		CSR_WRITE_4(sc, BGE_MEMWIN_START + (x & 0x7FFF), val);	\
	} while(0)

/*
 * This magic number is written to the firmware mailbox at 0xb50
 * before a software reset is issued.  After the internal firmware
 * has completed its initialization it will write the opposite of 
 * this value, ~BGE_MAGIC_NUMBER, to the same location, allowing the
 * driver to synchronize with the firmware.
 */
#define	BGE_MAGIC_NUMBER		0x4B657654

typedef struct {
	u_int32_t		bge_addr_hi;
	u_int32_t		bge_addr_lo;
} bge_hostaddr;
#define	BGE_HOSTADDR(x,y)						\
	do {								\
		(x).bge_addr_lo = ((u_int64_t) (y) & 0xffffffff);	\
		if (sizeof(bus_addr_t) == 8)				\
			(x).bge_addr_hi = ((u_int64_t) (y) >> 32);	\
		else							\
			(x).bge_addr_hi = 0;				\
	} while(0)

/* Ring control block structure */
struct bge_rcb {
	bge_hostaddr		bge_hostaddr;
	u_int32_t		bge_maxlen_flags;
	u_int32_t		bge_nicaddr;
};

#define	RCB_WRITE_4(sc, rcb, offset, val) \
	bus_space_write_4(sc->bge_btag, sc->bge_bhandle, \
			  rcb + offsetof(struct bge_rcb, offset), val)

#define	RCB_WRITE_2(sc, rcb, offset, val) \
	bus_space_write_2(sc->bge_btag, sc->bge_bhandle, \
			  rcb + offsetof(struct bge_rcb, offset), val)

#define	BGE_RCB_MAXLEN_FLAGS(maxlen, flags)	((maxlen) << 16 | (flags))

#define	BGE_RCB_FLAG_USE_EXT_RX_BD	0x0001
#define	BGE_RCB_FLAG_RING_DISABLED	0x0002

struct bge_tx_bd {
	bge_hostaddr		bge_addr;
#if BYTE_ORDER == LITTLE_ENDIAN
	u_int16_t		bge_flags;
	u_int16_t		bge_len;
	u_int16_t		bge_vlan_tag;
	u_int16_t		bge_rsvd;
#else
	u_int16_t		bge_len;
	u_int16_t		bge_flags;
	u_int16_t		bge_rsvd;
	u_int16_t		bge_vlan_tag;
#endif
};

#define	BGE_TXBDFLAG_TCP_UDP_CSUM	0x0001
#define	BGE_TXBDFLAG_IP_CSUM		0x0002
#define	BGE_TXBDFLAG_END		0x0004
#define	BGE_TXBDFLAG_IP_FRAG		0x0008
#define	BGE_TXBDFLAG_JUMBO_FRAME	0x0008	/* 5717 */
#define	BGE_TXBDFLAG_IP_FRAG_END	0x0010
#define	BGE_TXBDFLAG_HDRLEN_BIT2	0x0010	/* 5717 */
#define	BGE_TXBDFLAG_SNAP		0x0020	/* 5717 */
#define	BGE_TXBDFLAG_VLAN_TAG		0x0040
#define	BGE_TXBDFLAG_COAL_NOW		0x0080
#define	BGE_TXBDFLAG_CPU_PRE_DMA	0x0100
#define	BGE_TXBDFLAG_CPU_POST_DMA	0x0200
#define	BGE_TXBDFLAG_HDRLEN_BIT3	0x0400	/* 5717 */
#define	BGE_TXBDFLAG_HDRLEN_BIT4	0x0800	/* 5717 */
#define	BGE_TXBDFLAG_INSERT_SRC_ADDR	0x1000
#define	BGE_TXBDFLAG_HDRLEN_BIT5	0x1000	/* 5717 */
#define	BGE_TXBDFLAG_HDRLEN_BIT6	0x2000	/* 5717 */
#define	BGE_TXBDFLAG_HDRLEN_BIT7	0x4000	/* 5717 */
#define	BGE_TXBDFLAG_CHOOSE_SRC_ADDR	0x6000
#define	BGE_TXBDFLAG_NO_CRC		0x8000

#define	BGE_TXBDFLAG_MSS_SIZE_MASK	0x3FFF	/* 5717 */
/* Bits [1:0] of the MSS header length. */
#define	BGE_TXBDFLAG_MSS_HDRLEN_MASK	0xC000	/* 5717 */

#define	BGE_NIC_TXRING_ADDR(ringno, size)	\
	BGE_SEND_RING_1_TO_4 +			\
	((ringno * sizeof(struct bge_tx_bd) * size) / 4)

struct bge_rx_bd {
	bge_hostaddr		bge_addr;
#if BYTE_ORDER == LITTLE_ENDIAN
	u_int16_t		bge_len;
	u_int16_t		bge_idx;
	u_int16_t		bge_flags;
	u_int16_t		bge_type;
	u_int16_t		bge_tcp_udp_csum;
	u_int16_t		bge_ip_csum;
	u_int16_t		bge_vlan_tag;
	u_int16_t		bge_error_flag;
#else
	u_int16_t		bge_idx;
	u_int16_t		bge_len;
	u_int16_t		bge_type;
	u_int16_t		bge_flags;
	u_int16_t		bge_ip_csum;
	u_int16_t		bge_tcp_udp_csum;
	u_int16_t		bge_error_flag;
	u_int16_t		bge_vlan_tag;
#endif
	u_int32_t		bge_rsvd;
	u_int32_t		bge_opaque;
};

struct bge_ext_rx_bd {
	bge_hostaddr		bge_addr1;
	bge_hostaddr		bge_addr2;
	bge_hostaddr		bge_addr3;
#if BYTE_ORDER == LITTLE_ENDIAN
	u_int16_t		bge_len2;
	u_int16_t		bge_len1;
	u_int16_t		bge_rsvd;
	u_int16_t		bge_len3;
#else
	u_int16_t		bge_len1;
	u_int16_t		bge_len2;
	u_int16_t		bge_len3;
	u_int16_t		bge_rsvd;
#endif
	struct bge_rx_bd	bge_bd;
};

#define	BGE_RXBDFLAG_END		0x0004
#define	BGE_RXBDFLAG_JUMBO_RING		0x0020
#define	BGE_RXBDFLAG_VLAN_TAG		0x0040
#define	BGE_RXBDFLAG_ERROR		0x0400
#define	BGE_RXBDFLAG_MINI_RING		0x0800
#define	BGE_RXBDFLAG_IP_CSUM		0x1000
#define	BGE_RXBDFLAG_TCP_UDP_CSUM	0x2000
#define	BGE_RXBDFLAG_TCP_UDP_IS_TCP	0x4000
#define	BGE_RXBDFLAG_IPV6		0x8000

#define	BGE_RXERRFLAG_BAD_CRC		0x0001
#define	BGE_RXERRFLAG_COLL_DETECT	0x0002
#define	BGE_RXERRFLAG_LINK_LOST		0x0004
#define	BGE_RXERRFLAG_PHY_DECODE_ERR	0x0008
#define	BGE_RXERRFLAG_MAC_ABORT		0x0010
#define	BGE_RXERRFLAG_RUNT		0x0020
#define	BGE_RXERRFLAG_TRUNC_NO_RSRCS	0x0040
#define	BGE_RXERRFLAG_GIANT		0x0080
#define	BGE_RXERRFLAG_IP_CSUM_NOK	0x1000	/* 5717 */

struct bge_sts_idx {
#if BYTE_ORDER == LITTLE_ENDIAN
	u_int16_t		bge_rx_prod_idx;
	u_int16_t		bge_tx_cons_idx;
#else
	u_int16_t		bge_tx_cons_idx;
	u_int16_t		bge_rx_prod_idx;
#endif
};

struct bge_status_block {
	u_int32_t		bge_status;
	u_int32_t		bge_status_tag;
#if BYTE_ORDER == LITTLE_ENDIAN
	u_int16_t		bge_rx_jumbo_cons_idx;
	u_int16_t		bge_rx_std_cons_idx;
	u_int16_t		bge_rx_mini_cons_idx;
	u_int16_t		bge_rsvd1;
#else
	u_int16_t		bge_rx_std_cons_idx;
	u_int16_t		bge_rx_jumbo_cons_idx;
	u_int16_t		bge_rsvd1;
	u_int16_t		bge_rx_mini_cons_idx;
#endif
	struct bge_sts_idx	bge_idx[16];
};

#define	BGE_TX_CONSIDX(x, i) x->bge_idx[i].bge_tx_considx
#define	BGE_RX_PRODIDX(x, i) x->bge_idx[i].bge_rx_prodidx

#define	BGE_STATFLAG_UPDATED		0x00000001
#define	BGE_STATFLAG_LINKSTATE_CHANGED	0x00000002
#define	BGE_STATFLAG_ERROR		0x00000004

/*
 * SysKonnect Subsystem IDs
 */
#define	SK_SUBSYSID_9D41		0x4441

/*
 * Dell PCI vendor ID
 */
#define	DELL_VENDORID			0x1028

/*
 * Offset of MAC address inside EEPROM.
 */
#define	BGE_EE_MAC_OFFSET		0x7C
#define	BGE_EE_MAC_OFFSET_5906		0x10
#define	BGE_EE_HWCFG_OFFSET		0xC8

#define	BGE_HWCFG_VOLTAGE		0x00000003
#define	BGE_HWCFG_PHYLED_MODE		0x0000000C
#define	BGE_HWCFG_MEDIA			0x00000030
#define	BGE_HWCFG_ASF			0x00000080

#define	BGE_VOLTAGE_1POINT3		0x00000000
#define	BGE_VOLTAGE_1POINT8		0x00000001

#define	BGE_PHYLEDMODE_UNSPEC		0x00000000
#define	BGE_PHYLEDMODE_TRIPLELED	0x00000004
#define	BGE_PHYLEDMODE_SINGLELED	0x00000008

#define	BGE_MEDIA_UNSPEC		0x00000000
#define	BGE_MEDIA_COPPER		0x00000010
#define	BGE_MEDIA_FIBER			0x00000020

#define	BGE_TICKS_PER_SEC		1000000

/*
 * Ring size constants.
 */
#define	BGE_EVENT_RING_CNT	256
#define	BGE_CMD_RING_CNT	64
#define	BGE_STD_RX_RING_CNT	512
#define	BGE_JUMBO_RX_RING_CNT	256
#define	BGE_MINI_RX_RING_CNT	1024
#define	BGE_RETURN_RING_CNT	1024

/* 5705 has smaller return ring size */
#define	BGE_RETURN_RING_CNT_5705	512

/*
 * Possible TX ring sizes.
 */
#define	BGE_TX_RING_CNT_128	128
#define	BGE_TX_RING_BASE_128	0x3800

#define	BGE_TX_RING_CNT_256	256
#define	BGE_TX_RING_BASE_256	0x3000

#define	BGE_TX_RING_CNT_512	512
#define	BGE_TX_RING_BASE_512	0x2000

#define	BGE_TX_RING_CNT		BGE_TX_RING_CNT_512
#define	BGE_TX_RING_BASE	BGE_TX_RING_BASE_512

/*
 * Tigon III statistics counters.
 */
/* Statistics maintained MAC Receive block. */
struct bge_rx_mac_stats {
	bge_hostaddr		ifHCInOctets;
	bge_hostaddr		Reserved1;
	bge_hostaddr		etherStatsFragments;
	bge_hostaddr		ifHCInUcastPkts;
	bge_hostaddr		ifHCInMulticastPkts;
	bge_hostaddr		ifHCInBroadcastPkts;
	bge_hostaddr		dot3StatsFCSErrors;
	bge_hostaddr		dot3StatsAlignmentErrors;
	bge_hostaddr		xonPauseFramesReceived;
	bge_hostaddr		xoffPauseFramesReceived;
	bge_hostaddr		macControlFramesReceived;
	bge_hostaddr		xoffStateEntered;
	bge_hostaddr		dot3StatsFramesTooLong;
	bge_hostaddr		etherStatsJabbers;
	bge_hostaddr		etherStatsUndersizePkts;
	bge_hostaddr		inRangeLengthError;
	bge_hostaddr		outRangeLengthError;
	bge_hostaddr		etherStatsPkts64Octets;
	bge_hostaddr		etherStatsPkts65Octetsto127Octets;
	bge_hostaddr		etherStatsPkts128Octetsto255Octets;
	bge_hostaddr		etherStatsPkts256Octetsto511Octets;
	bge_hostaddr		etherStatsPkts512Octetsto1023Octets;
	bge_hostaddr		etherStatsPkts1024Octetsto1522Octets;
	bge_hostaddr		etherStatsPkts1523Octetsto2047Octets;
	bge_hostaddr		etherStatsPkts2048Octetsto4095Octets;
	bge_hostaddr		etherStatsPkts4096Octetsto8191Octets;
	bge_hostaddr		etherStatsPkts8192Octetsto9022Octets;
};

/* Statistics maintained MAC Transmit block. */
struct bge_tx_mac_stats {
	bge_hostaddr		ifHCOutOctets;
	bge_hostaddr		Reserved2;
	bge_hostaddr		etherStatsCollisions;
	bge_hostaddr		outXonSent;
	bge_hostaddr		outXoffSent;
	bge_hostaddr		flowControlDone;
	bge_hostaddr		dot3StatsInternalMacTransmitErrors;
	bge_hostaddr		dot3StatsSingleCollisionFrames;
	bge_hostaddr		dot3StatsMultipleCollisionFrames;
	bge_hostaddr		dot3StatsDeferredTransmissions;
	bge_hostaddr		Reserved3;
	bge_hostaddr		dot3StatsExcessiveCollisions;
	bge_hostaddr		dot3StatsLateCollisions;
	bge_hostaddr		dot3Collided2Times;
	bge_hostaddr		dot3Collided3Times;
	bge_hostaddr		dot3Collided4Times;
	bge_hostaddr		dot3Collided5Times;
	bge_hostaddr		dot3Collided6Times;
	bge_hostaddr		dot3Collided7Times;
	bge_hostaddr		dot3Collided8Times;
	bge_hostaddr		dot3Collided9Times;
	bge_hostaddr		dot3Collided10Times;
	bge_hostaddr		dot3Collided11Times;
	bge_hostaddr		dot3Collided12Times;
	bge_hostaddr		dot3Collided13Times;
	bge_hostaddr		dot3Collided14Times;
	bge_hostaddr		dot3Collided15Times;
	bge_hostaddr		ifHCOutUcastPkts;
	bge_hostaddr		ifHCOutMulticastPkts;
	bge_hostaddr		ifHCOutBroadcastPkts;
	bge_hostaddr		dot3StatsCarrierSenseErrors;
	bge_hostaddr		ifOutDiscards;
	bge_hostaddr		ifOutErrors;
};

/* Stats counters access through registers */
struct bge_mac_stats_regs {
	u_int32_t		ifHCOutOctets;
	u_int32_t		Reserved0;
	u_int32_t		etherStatsCollisions;
	u_int32_t		outXonSent;
	u_int32_t		outXoffSent;
	u_int32_t		Reserved1;
	u_int32_t		dot3StatsInternalMacTransmitErrors;
	u_int32_t		dot3StatsSingleCollisionFrames;
	u_int32_t		dot3StatsMultipleCollisionFrames;
	u_int32_t		dot3StatsDeferredTransmissions;
	u_int32_t		Reserved2;
	u_int32_t		dot3StatsExcessiveCollisions;
	u_int32_t		dot3StatsLateCollisions;
	u_int32_t		Reserved3[14];
	u_int32_t		ifHCOutUcastPkts;
	u_int32_t		ifHCOutMulticastPkts;
	u_int32_t		ifHCOutBroadcastPkts;
	u_int32_t		Reserved4[2];
	u_int32_t		ifHCInOctets;
	u_int32_t		Reserved5;
	u_int32_t		etherStatsFragments;
	u_int32_t		ifHCInUcastPkts;
	u_int32_t		ifHCInMulticastPkts;
	u_int32_t		ifHCInBroadcastPkts;
	u_int32_t		dot3StatsFCSErrors;
	u_int32_t		dot3StatsAlignmentErrors;
	u_int32_t		xonPauseFramesReceived;
	u_int32_t		xoffPauseFramesReceived;
	u_int32_t		macControlFramesReceived;
	u_int32_t		xoffStateEntered;
	u_int32_t		dot3StatsFramesTooLong;
	u_int32_t		etherStatsJabbers;
	u_int32_t		etherStatsUndersizePkts;
};

struct bge_stats {
	u_int8_t		Reserved0[256];

	/* Statistics maintained by Receive MAC. */
	struct bge_rx_mac_stats rxstats;

	bge_hostaddr		Unused1[37];

	/* Statistics maintained by Transmit MAC. */
	struct bge_tx_mac_stats txstats;
 
	bge_hostaddr		Unused2[31];

	/* Statistics maintained by Receive List Placement. */
	bge_hostaddr		COSIfHCInPkts[16];
	bge_hostaddr		COSFramesDroppedDueToFilters;
	bge_hostaddr		nicDmaWriteQueueFull;
	bge_hostaddr		nicDmaWriteHighPriQueueFull;
	bge_hostaddr		nicNoMoreRxBDs;
	bge_hostaddr		ifInDiscards;
	bge_hostaddr		ifInErrors;
	bge_hostaddr		nicRecvThresholdHit;

	bge_hostaddr		Unused3[9];

	/* Statistics maintained by Send Data Initiator. */
	bge_hostaddr		COSIfHCOutPkts[16];
	bge_hostaddr		nicDmaReadQueueFull;
	bge_hostaddr		nicDmaReadHighPriQueueFull;
	bge_hostaddr		nicSendDataCompQueueFull;

	/* Statistics maintained by Host Coalescing. */
	bge_hostaddr		nicRingSetSendProdIndex;
	bge_hostaddr		nicRingStatusUpdate;
	bge_hostaddr		nicInterrupts;
	bge_hostaddr		nicAvoidedInterrupts;
	bge_hostaddr		nicSendThresholdHit;

	u_int8_t		Reserved4[320];
};

/*
 * Tigon general information block. This resides in host memory
 * and contains the status counters, ring control blocks and
 * producer pointers.
 */

struct bge_gib {
	struct bge_stats	bge_stats;
	struct bge_rcb		bge_tx_rcb[16];
	struct bge_rcb		bge_std_rx_rcb;
	struct bge_rcb		bge_jumbo_rx_rcb;
	struct bge_rcb		bge_mini_rx_rcb;
	struct bge_rcb		bge_return_rcb;
};

/*
 * NOTE!  On the Alpha, we have an alignment constraint.
 * The first thing in the packet is a 14-byte Ethernet header.
 * This means that the packet is misaligned.  To compensate,
 * we actually offset the data 2 bytes into the cluster.  This
 * aligns the packet after the Ethernet header to a 32-bit
 * boundary.
 */

#define	BGE_JUMBO_FRAMELEN	9022
#define	BGE_JUMBO_MTU		(BGE_JUMBO_FRAMELEN - ETHER_HDR_LEN - ETHER_CRC_LEN - ETHER_VLAN_ENCAP_LEN)
#define	BGE_PAGE_SIZE		PAGE_SIZE

/*
 * Other utility macros.
 */
#define	BGE_INC(x, y)	(x) = (x + 1) % y

/*
 * Vital product data and structures.
 */
#define	BGE_VPD_FLAG		0x8000
 
#define	VPD_RES_ID	0x82	/* ID string */
#define	VPD_RES_READ	0x90	/* start of read only area */
#define	VPD_RES_WRITE	0x81	/* start of read/write area */
#define	VPD_RES_END	0x78	/* end tag */

/*
 * Register access macros. The Tigon always uses memory mapped register
 * accesses and all registers must be accessed with 32 bit operations.
 */

#define	CSR_WRITE_4(sc, reg, val)	\
	bus_space_write_4(sc->bge_btag, sc->bge_bhandle, reg, val)

#define	CSR_READ_4(sc, reg)		\
	bus_space_read_4(sc->bge_btag, sc->bge_bhandle, reg)

#define	BGE_SETBIT(sc, reg, x)	\
	CSR_WRITE_4(sc, reg, (CSR_READ_4(sc, reg) | (x)))
#define	BGE_CLRBIT(sc, reg, x)	\
	CSR_WRITE_4(sc, reg, (CSR_READ_4(sc, reg) & ~(x)))

/* BAR2 APE register access macros. */
#define	APE_WRITE_4(sc, reg, val)	\
	bus_space_write_4(sc->bge_apetag, sc->bge_apehandle, reg, val)

#define	APE_READ_4(sc, reg)		\
	bus_space_read_4(sc->bge_apetag, sc->bge_apehandle, reg)

#define	APE_SETBIT(sc, reg, x)	\
	APE_WRITE_4(sc, reg, (APE_READ_4(sc, reg) | (x)))
#define	APE_CLRBIT(sc, reg, x)	\
	APE_WRITE_4(sc, reg, (APE_READ_4(sc, reg) & ~(x)))

#define	PCI_SETBIT(pc, tag, reg, x)	\
	pci_conf_write(pc, tag, reg, (pci_conf_read(pc, tag, reg) | (x)))
#define	PCI_CLRBIT(pc, tag, reg, x)	\
	pci_conf_write(pc, tag, reg, (pci_conf_read(pc, tag, reg) & ~(x)))

/*
 * Memory management stuff. Note: the SSLOTS, MSLOTS and JSLOTS
 * values are tuneable. They control the actual amount of buffers
 * allocated for the standard, mini and jumbo receive rings.
 */

#define	BGE_SSLOTS	256
#define	BGE_MSLOTS	256
#define	BGE_JSLOTS	384

#define	BGE_JRAWLEN (BGE_JUMBO_FRAMELEN + ETHER_ALIGN)
#define	BGE_JLEN (BGE_JRAWLEN + (sizeof(u_int64_t) - \
	(BGE_JRAWLEN % sizeof(u_int64_t))))

/*
 * Ring structures. Most of these reside in host memory and we tell
 * the NIC where they are via the ring control blocks. The exceptions
 * are the tx and command rings, which live in NIC memory and which
 * we access via the shared memory window.
 */
struct bge_ring_data {
	struct bge_rx_bd	bge_rx_std_ring[BGE_STD_RX_RING_CNT];
	struct bge_ext_rx_bd	bge_rx_jumbo_ring[BGE_JUMBO_RX_RING_CNT];
	struct bge_rx_bd	bge_rx_return_ring[BGE_RETURN_RING_CNT];
	struct bge_tx_bd	bge_tx_ring[BGE_TX_RING_CNT];
	struct bge_status_block	bge_status_block;
	struct bge_tx_desc	*bge_tx_ring_nic;/* pointer to shared mem */
	struct bge_cmd_desc	*bge_cmd_ring;	/* pointer to shared mem */
	struct bge_gib		bge_info;
};

#define	BGE_RING_DMA_ADDR(sc, offset) \
	((sc)->bge_ring_map->dm_segs[0].ds_addr + \
	offsetof(struct bge_ring_data, offset))

/*
 * Number of DMA segments in a TxCB. Note that this is carefully
 * chosen to make the total struct size an even power of two. It's
 * critical that no TxCB be split across a page boundary since
 * no attempt is made to allocate physically contiguous memory.
 * 
 */
#ifdef __LP64__
#define	BGE_NTXSEG      30
#else
#define	BGE_NTXSEG      31
#endif

#define	BGE_STATUS_BLK_SZ	sizeof (struct bge_status_block)

#define	BGE_STATS_SZ		sizeof (struct bge_stats)

/*
 * Mbuf pointers. We need these to keep track of the virtual addresses
 * of our mbuf chains since we can only convert from physical to virtual,
 * not the other way around.
 */
struct bge_chain_data {
	struct mbuf		*bge_tx_chain[BGE_TX_RING_CNT];
	struct mbuf		*bge_rx_std_chain[BGE_STD_RX_RING_CNT];
	struct mbuf		*bge_rx_jumbo_chain[BGE_JUMBO_RX_RING_CNT];
	struct mbuf		*bge_rx_mini_chain[BGE_MINI_RX_RING_CNT];
	bus_dmamap_t		bge_tx_map[BGE_TX_RING_CNT];
	bus_dmamap_t		bge_rx_std_map[BGE_STD_RX_RING_CNT];
	bus_dmamap_t		bge_rx_jumbo_map[BGE_JUMBO_RX_RING_CNT];
};

struct bge_type {
	u_int16_t		bge_vid;
	u_int16_t		bge_did;
	char			*bge_name;
};

#define	BGE_TIMEOUT		100000
#define	BGE_TXCONS_UNSET		0xFFFF	/* impossible value */

#define	ASF_ENABLE		1
#define	ASF_NEW_HANDSHAKE	2
#define	ASF_STACKUP		4

struct bge_softc {
	struct device		bge_dev;
	struct arpcom		arpcom;		/* interface info */
	bus_space_handle_t	bge_bhandle;
	bus_space_tag_t		bge_btag;
	bus_size_t		bge_bsize;
	bus_space_handle_t	bge_apehandle;
	bus_space_tag_t		bge_apetag;
	bus_size_t		bge_apesize;
	void			*bge_intrhand;
	struct pci_attach_args	bge_pa;
	struct mii_data		bge_mii;
	struct ifmedia		bge_ifmedia;	/* media info */
	u_int32_t		bge_expcap;
	u_int32_t		bge_msicap;
	u_int32_t		bge_mps;
	u_int32_t		bge_expmrq;
	u_int32_t		bge_lasttag;
	u_int32_t		bge_flags;
#define	BGE_TXRING_VALID	0x00000001
#define	BGE_RXRING_VALID	0x00000002
#define	BGE_JUMBO_RXRING_VALID	0x00000004
#define	BGE_RX_ALIGNBUG		0x00000008
#define	BGE_PCIX		0x00000010
#define	BGE_PCIE		0x00000020
#define	BGE_ASF_MODE		0x00000040
#define	BGE_NO_EEPROM		0x00000080
#define	BGE_JUMBO_CAPABLE	0x00000100
#define	BGE_FIBER_TBI		0x00000200
#define	BGE_FIBER_MII		0x00000400
#define	BGE_IS_5788		0x00000800
#define	BGE_5705_PLUS		0x00001000
#define	BGE_575X_PLUS		0x00002000
#define	BGE_5755_PLUS		0x00004000
#define	BGE_5714_FAMILY		0x00008000
#define	BGE_5700_FAMILY		0x00010000
#define	BGE_5717_PLUS		0x00020000
#define	BGE_57765_PLUS		0x00040000
#define	BGE_APE			0x00080000
#define	BGE_CPMU_PRESENT	0x00100000
#define	BGE_TAGGED_STATUS	0x00200000
#define	BGE_MSI			0x00400000
#define	BGE_RDMA_BUG		0x00800000
#define	BGE_JUMBO_RING		0x01000000
#define	BGE_JUMBO_STD		0x02000000
#define	BGE_JUMBO_FRAME		0x04000000

	u_int32_t		bge_phy_flags;
#define	BGE_PHY_NO_3LED		0x00000001
#define	BGE_PHY_10_100_ONLY	0x00000002
#define	BGE_PHY_CRC_BUG		0x00000004
#define	BGE_PHY_ADC_BUG		0x00000008
#define	BGE_PHY_5704_A0_BUG	0x00008010
#define	BGE_PHY_JITTER_BUG	0x00000020
#define	BGE_PHY_BER_BUG		0x00000040
#define	BGE_PHY_ADJUST_TRIM	0x00000080
#define	BGE_PHY_NO_WIRESPEED	0x00000100

	bus_dma_tag_t		bge_dmatag;
	u_int32_t		bge_mfw_flags;  /* Management F/W flags */
#define	BGE_MFW_ON_RXCPU	0x00000001
#define	BGE_MFW_ON_APE		0x00000002
#define	BGE_MFW_TYPE_NCSI	0x00000004
#define	BGE_MFW_TYPE_DASH	0x00000008
	int			bge_phy_ape_lock;
	int			bge_phy_addr;
	u_int32_t		bge_chipid;
	struct bge_ring_data	*bge_rdata;	/* rings */
	struct bge_chain_data	bge_cdata;	/* mbufs */
	bus_dmamap_t		bge_ring_map;
	bus_dma_segment_t	bge_ring_seg;
	int			bge_ring_nseg;
	u_int16_t		bge_tx_saved_considx;
	u_int16_t		bge_rx_saved_considx;
	u_int16_t		bge_ev_saved_considx;
	u_int16_t		bge_return_ring_cnt;
	u_int32_t		bge_tx_prodidx;
	struct if_rxring	bge_std_ring;
	u_int16_t		bge_std;	/* current std ring head */
	int			bge_rx_std_len;
	struct if_rxring	bge_jumbo_ring;
	u_int16_t		bge_jumbo;	/* current jumo ring head */
	u_int32_t		bge_stat_ticks;
	u_int32_t		bge_rx_coal_ticks;
	u_int32_t		bge_tx_coal_ticks;
	u_int32_t		bge_rx_max_coal_bds;
	u_int32_t		bge_tx_max_coal_bds;
	u_int32_t		bge_tx_buf_ratio;
	u_int32_t		bge_sts;
#define	BGE_STS_LINK		0x00000001	/* MAC link status */
#define	BGE_STS_LINK_EVT	0x00000002	/* pending link event */
#define	BGE_STS_AUTOPOLL	0x00000004	/* PHY auto-polling  */
#define	BGE_STS_BIT(sc, x)	((sc)->bge_sts & (x))
#define	BGE_STS_SETBIT(sc, x)	((sc)->bge_sts |= (x))
#define	BGE_STS_CLRBIT(sc, x)	((sc)->bge_sts &= ~(x))
	uint64_t		bge_flowflags;
	int			bge_txcnt;
	struct timeout		bge_timeout;
	struct timeout		bge_rxtimeout;
	struct timeout		bge_rxtimeout_jumbo;
	u_int32_t		bge_rx_discards;
	u_int32_t		bge_tx_discards;
	u_int32_t		bge_rx_inerrors;
	u_int32_t		bge_rx_overruns;
	u_int32_t		bge_tx_collisions;
	bus_dmamap_t		bge_txdma[BGE_TX_RING_CNT];
};
@


1.129
log
@The window accessible with BGE_MEMWIN_{READ,WRITE} only spans 32KB, so
program it as such and not as a 64KB window; fortunately none of the current
users of these macros would cross a 32KB boundary.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.128 2015/10/19 05:31:25 jmatthew Exp $	*/
d2842 1
d2845 1
d2907 2
@


1.128
log
@Move bge rxeof and txeof outside the kernel lock.
To make rxeof safe, use a separate ring refill timeout for each ring.
We activate the refill timeout for a ring when it's too empty to receive
packets, which ensures we won't attempt to refill it from interrupt context.

To make txeof safe, remove the list of dma maps and just allocate maps based on
the ring slots occupied by the packet, and use atomic operations to adjust
bge_txcnt.  Rework some parts of the txeof and start loops so that we only
adjust bge_txcnt after exiting the loop, and only take actions such as setting
or clearing OACTIVE based on the final value.

tested on 5703, 5714, 5721 by me, 5753 by semarie@@, 5761 by naddy@@, and
also in snapshots for a while
ok mpi@@, dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.127 2015/09/11 13:02:28 stsp Exp $	*/
d50 1
a50 1
 * 1) Indirect register access. The MEMWIN_BASEADDR and MEMWIN_DATA
d2275 2
a2276 2
		    (0xFFFF0000 & x));					\
		val = CSR_READ_4(sc, BGE_MEMWIN_START + (x & 0xFFFF));	\
d2282 2
a2283 2
		    (0xFFFF0000 & x));					\
		CSR_WRITE_4(sc, BGE_MEMWIN_START + (x & 0xFFFF), val);	\
@


1.127
log
@Make room for media types of the future. Extend the ifmedia word to 64 bits.
This changes numbers of the SIOCSIFMEDIA and SIOCGIFMEDIA ioctls and
grows struct ifmediareq.

Old ifconfig and dhclient binaries can still assign addresses, however
the 'media' subcommand stops working. Recompiling ifconfig and dhclient
with new headers before a reboot should not be necessary unless in very
special circumstances where non-default media settings must be used to
get link and console access is not available.

There may be some MD fallout but that will be cleared up later.

ok deraadt miod
with help and suggestions from several sharks attending l2k15
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.126 2014/09/02 10:14:55 brad Exp $	*/
a2832 5
struct txdmamap_pool_entry {
	bus_dmamap_t dmamap;
	SLIST_ENTRY(txdmamap_pool_entry) link;
};

d2932 1
d2938 1
a2938 2
	SLIST_HEAD(, txdmamap_pool_entry) txdma_list;
	struct txdmamap_pool_entry *txdma[BGE_TX_RING_CNT];
@


1.126
log
@Add Jumbo support for BCM5714 / BCM5780 and BCM5717 / BCM5719 / BCM5720 / BCM57765 / BCM57766
chipsets.

ok mikeb@@ "i think it should go in" dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.125 2014/08/24 05:01:42 brad Exp $	*/
d2933 1
a2933 1
	int			bge_flowflags;
@


1.125
log
@Add some TX BD flags for BCM5717 family chips.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.124 2014/07/08 05:35:18 dlg Exp $	*/
d2883 3
d2917 1
@


1.124
log
@cut things that relied on mclgeti for rx ring accounting/restriction over
to using if_rxr.

cut the reporting systat did over to the rxr ioctl.

tested as much as i can on alpha, amd64, and sparc64.
mpi@@ has run it on macppc.
ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.123 2014/02/05 05:59:42 brad Exp $	*/
d2347 1
a2347 1
#define	BGE_TXBDFLAG_JMB_PKT		0x0008
d2349 2
d2355 2
d2358 3
d2363 4
@


1.123
log
@- Recognize BCM5762 A0 chipset.

- Have the BGE_RXLP_LOCSTAT_IFIN_DROPS workaround cover for the BCM5762 ASIC.
From Linux

ok naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.122 2014/02/01 01:51:27 brad Exp $	*/
d2901 1
d2903 1
a2903 1
	int			bge_std_cnt;
a2904 1
	int			bge_jumbo_cnt;
@


1.122
log
@Split bge(4)'s feature flags into bge_flags and bge_phy_flags.

ok naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.121 2014/01/28 14:08:29 sthen Exp $	*/
d309 1
@


1.121
log
@unbreak 32-bit kernel builds by forcing ULL for the new macros; ok naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.120 2014/01/28 00:39:22 brad Exp $	*/
d2846 36
a2881 34
	u_int64_t		bge_flags;
#define	BGE_TXRING_VALID	0x0000000000000001ULL
#define	BGE_RXRING_VALID	0x0000000000000002ULL
#define	BGE_JUMBO_RXRING_VALID	0x0000000000000004ULL
#define	BGE_RX_ALIGNBUG		0x0000000000000008ULL
#define	BGE_NO_3LED		0x0000000000000010ULL
#define	BGE_PCIX		0x0000000000000020ULL
#define	BGE_PCIE		0x0000000000000040ULL
#define	BGE_ASF_MODE		0x0000000000000080ULL
#define	BGE_NO_EEPROM		0x0000000000000100ULL
#define	BGE_JUMBO_CAPABLE	0x0000000000000200ULL
#define	BGE_10_100_ONLY		0x0000000000000400ULL
#define	BGE_PHY_FIBER_TBI	0x0000000000000800ULL
#define	BGE_PHY_FIBER_MII	0x0000000000001000ULL
#define	BGE_PHY_CRC_BUG		0x0000000000002000ULL
#define	BGE_PHY_ADC_BUG		0x0000000000004000ULL
#define	BGE_PHY_5704_A0_BUG	0x0000000000008000ULL
#define	BGE_PHY_JITTER_BUG	0x0000000000010000ULL
#define	BGE_PHY_BER_BUG		0x0000000000020000ULL
#define	BGE_PHY_ADJUST_TRIM	0x0000000000040000ULL
#define	BGE_NO_ETH_WIRE_SPEED	0x0000000000080000ULL
#define	BGE_IS_5788		0x0000000000100000ULL
#define	BGE_5705_PLUS		0x0000000000200000ULL
#define	BGE_575X_PLUS		0x0000000000400000ULL
#define	BGE_5755_PLUS		0x0000000000800000ULL
#define	BGE_5714_FAMILY		0x0000000001000000ULL
#define	BGE_5700_FAMILY		0x0000000002000000ULL
#define	BGE_5717_PLUS		0x0000000004000000ULL
#define	BGE_57765_PLUS		0x0000000008000000ULL
#define	BGE_APE			0x0000000010000000ULL
#define	BGE_CPMU_PRESENT	0x0000000020000000ULL
#define	BGE_TAGGED_STATUS	0x0000000040000000ULL
#define	BGE_MSI			0x0000000080000000ULL
#define	BGE_RDMA_BUG		0x0000000100000000ULL
@


1.120
log
@- Bring in some fixes/workarounds for BCM5719 / BCM5720 / BCM57765 and BCM57766
  chipsets
- Add support for the new BCM5762 ASIC (BCM5725 / BCM5727 / BCM57767)
- Add all of the newer PCI ids

Tested with BCM5719 / BCM5720 and BCM57765 / BCM57766 and a bunch of older
chipsets.

ok naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.119 2014/01/07 06:25:33 brad Exp $	*/
d2847 33
a2879 33
#define	BGE_TXRING_VALID	0x0000000000000001
#define	BGE_RXRING_VALID	0x0000000000000002
#define	BGE_JUMBO_RXRING_VALID	0x0000000000000004
#define	BGE_RX_ALIGNBUG		0x0000000000000008
#define	BGE_NO_3LED		0x0000000000000010
#define	BGE_PCIX		0x0000000000000020
#define	BGE_PCIE		0x0000000000000040
#define	BGE_ASF_MODE		0x0000000000000080
#define	BGE_NO_EEPROM		0x0000000000000100
#define	BGE_JUMBO_CAPABLE	0x0000000000000200
#define	BGE_10_100_ONLY		0x0000000000000400
#define	BGE_PHY_FIBER_TBI	0x0000000000000800
#define	BGE_PHY_FIBER_MII	0x0000000000001000
#define	BGE_PHY_CRC_BUG		0x0000000000002000
#define	BGE_PHY_ADC_BUG		0x0000000000004000
#define	BGE_PHY_5704_A0_BUG	0x0000000000008000
#define	BGE_PHY_JITTER_BUG	0x0000000000010000
#define	BGE_PHY_BER_BUG		0x0000000000020000
#define	BGE_PHY_ADJUST_TRIM	0x0000000000040000
#define	BGE_NO_ETH_WIRE_SPEED	0x0000000000080000
#define	BGE_IS_5788		0x0000000000100000
#define	BGE_5705_PLUS		0x0000000000200000
#define	BGE_575X_PLUS		0x0000000000400000
#define	BGE_5755_PLUS		0x0000000000800000
#define	BGE_5714_FAMILY		0x0000000001000000
#define	BGE_5700_FAMILY		0x0000000002000000
#define	BGE_5717_PLUS		0x0000000004000000
#define	BGE_57765_PLUS		0x0000000008000000
#define	BGE_APE			0x0000000010000000
#define	BGE_CPMU_PRESENT	0x0000000020000000
#define	BGE_TAGGED_STATUS	0x0000000040000000
#define	BGE_MSI			0x0000000080000000
#define	BGE_RDMA_BUG		0x0000000100000000
@


1.119
log
@Increase the size of the bge_flags field to allow for more flags.

ok mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.118 2013/12/30 18:47:45 brad Exp $	*/
d332 1
d353 1
d769 1
d1330 1
d1370 3
d1584 2
d1633 21
@


1.118
log
@Expand the MSI support to cover most of the remaining bge(4) chipsets with the
exception being the BCM5714 family for now.

Tested on a variety of newer chipsets.

ok sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.117 2013/06/28 11:59:42 mikeb Exp $	*/
d2816 34
a2849 33
	u_int32_t		bge_flags;
#define	BGE_TXRING_VALID	0x00000001
#define	BGE_RXRING_VALID	0x00000002
#define	BGE_JUMBO_RXRING_VALID	0x00000004
#define	BGE_RX_ALIGNBUG		0x00000008
#define	BGE_NO_3LED		0x00000010
#define	BGE_PCIX		0x00000020
#define	BGE_PCIE		0x00000040
#define	BGE_ASF_MODE		0x00000080
#define	BGE_NO_EEPROM		0x00000100
#define	BGE_JUMBO_CAPABLE	0x00000200
#define	BGE_10_100_ONLY		0x00000400
#define	BGE_PHY_FIBER_TBI	0x00000800
#define	BGE_PHY_FIBER_MII	0x00001000
#define	BGE_PHY_CRC_BUG		0x00002000
#define	BGE_PHY_ADC_BUG		0x00004000
#define	BGE_PHY_5704_A0_BUG	0x00008000
#define	BGE_PHY_JITTER_BUG	0x00010000
#define	BGE_PHY_BER_BUG		0x00020000
#define	BGE_PHY_ADJUST_TRIM	0x00040000
#define	BGE_NO_ETH_WIRE_SPEED	0x00080000
#define	BGE_IS_5788		0x00100000
#define	BGE_5705_PLUS		0x00200000
#define	BGE_575X_PLUS		0x00400000
#define	BGE_5755_PLUS		0x00800000
#define	BGE_5714_FAMILY		0x01000000
#define	BGE_5700_FAMILY		0x02000000
#define	BGE_5717_PLUS		0x04000000
#define	BGE_57765_PLUS		0x08000000
#define	BGE_APE			0x10000000
#define	BGE_CPMU_PRESENT	0x20000000
#define	BGE_TAGGED_STATUS	0x40000000
#define	BGE_MSI			0x80000000
@


1.117
log
@Turns out that BGE_STATFLAG_UPDATED bit in the status block doesn't get
properly updated by the newer hardware (seen in the TX completion case).
This leads to very poor transmit performance in the beginning of a TCP
connection.   Linux and FreeBSD don't rely on BGE_STATFLAG_UPDATED bit
since they enable MSI and tagged status for 5717+.  Doing the same does
indeed fix an issue.

Change was tested by David Imhoff on 5719, 5720 and 5721/5750, Hrvoje
Popovski on 5704 B0, sthen@@ on 5723/5784, benno@@ on 5704 A3, and
me on 5719, 5720 adn 5714/5715.  No objections from kettenis@@ and dlg@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.116 2013/06/13 11:23:54 mikeb Exp $	*/
d1924 1
d2812 1
d2848 1
@


1.116
log
@Random TX Backoff Register mask must be 0x3FF;  ok beck, dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.115 2013/05/31 14:27:21 mikeb Exp $	*/
d228 1
d1923 1
a1923 2
#define	BGE_MSIMODE_MSI_FIFOUFLOW_ATTN	0x00000020
#define	BGE_MSIMODE_MSI_FIFOOFLOW_ATTN	0x00000040
d2404 1
a2404 1
	u_int32_t		bge_rsvd0;
d2813 1
d2845 1
@


1.115
log
@New logic to accommodate the E5/C600 and 5719/5720 changes in PCI-E
maximum payload size handling from FreeBSD.  Fixes RX path on 5719
found in newer machines such as HP DL3[68]0 G8 and Dell R320.

Tested by dlg@@ on 5714, 5719 (Sun V445) and 5720, 5721 (Dell R420);
David Imhoff on 5719, 5720, 5721 (various Dell servers);
Rob Sessnik on 5719 (HP DL360p G8); mikeb@@ on 5719 (HP DL380p G8).

ok dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.114 2013/05/29 17:04:46 mikeb Exp $	*/
d725 1
a725 1
#define	BGE_TX_BACKOFF_SEED_MASK	0x3F
@


1.114
log
@PHY auto-polling mode should not be used for anything newer than BCM5705.
Figured out by David Imhoff, checked against FreeBSD, Linux and official
documentation.  Fixes up link negotiation on BCM5719.

Original diff by David, tweaked by me; tested on BCM5702X and BCM5761 by
naddy@@; BCM5714, BCM5719, BCM5720 and BCM5721 by dlg@@, BCM5721 and
BCM5719 by David and BCM5719 by me.  ok dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.113 2013/02/22 01:26:55 dlg Exp $	*/
a218 9
/* XXX:
 * Used in PCI-Express code for 575x chips.
 * Should be replaced with checking for a PCI config-space
 * capability for PCI-Express, and PCI-Express standard 
 * offsets into that capability block.
 */
#define	BGE_PCI_CONF_DEV_CTRL		0xD8
#define	BGE_PCI_CONF_DEV_STUS		0xDA

d2810 3
@


1.113
log
@bring back 5718/5719/5720 support again. deraadt pointed out that
the problems i had on the xserve g5 are mostly likely specific to
that machine and im inclined to agree. we're going to see a lot
more machines with the new chips than people with xserve g5s.

this also includes fixes for ip checksum handling compared to the
code i put in before.

tested by various people again.
sthen@@ and claudio@@ have agreed to babysit this. they can back it
out if im not around.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.112 2013/02/09 23:39:38 brad Exp $	*/
d966 1
@


1.112
log
@- Use a switch statement for setting the chipset flags
- Add some macros for working with the various newer generations of chipsets
- Make use of the 5717 macro in a few places
- Add some bits for identifying and supporting some of the newer chipsets

ok sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.111 2013/01/30 11:15:06 dlg Exp $	*/
d159 1
d413 2
a414 2
#define	BGE_PCISTATE_WANT_EXPROM	0x00000020
#define	BGE_PCISTATE_EXPROM_RETRY	0x00000040
d416 1
d418 3
a420 1
#define	BGE_PCISTATE_PCI_TGT_RETRY_MAX	0x00000E00
d685 2
d774 1
a774 1
#define	BGE_RXMODE_RX_IPV6_CSUM_ENABLE	0x01000000
d2141 106
d2388 1
d2398 1
d2705 12
d2770 4
d2812 2
d2851 6
@


1.111
log
@backout 5718/5719/5720 support. the diff breaks the 5704C on my xserve g5
and i cant fix it without breaking a 5721 in another box.

sthen@@ agrees it is sad.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.109 2013/01/16 20:56:26 miod Exp $	*/
a287 4
#define	BGE_CHIPID_BCM5761_A0		0x5761000
#define	BGE_CHIPID_BCM5761_A1		0x5761100
#define	BGE_CHIPID_BCM5784_A0		0x5784000
#define	BGE_CHIPID_BCM5784_A1		0x5784100
d303 4
d335 3
d341 2
a343 4
#define	BGE_ASICREV_BCM5717		0x5717
#define	BGE_ASICREV_BCM5719		0x5719
#define	BGE_ASICREV_BCM5720		0x5720
#define	BGE_ASICREV_BCM57765		0x57785
d356 2
d2709 1
a2709 1
#define	BGE_5750_PLUS		0x00400000
d2713 4
@


1.110
log
@big pullup of bge to support the 5718 family of chips including the
5719 and 5720 chips that have popped up in a lot of new machines.

this diff is largely a merge of the freebsd code. thanks to srebrenko
sehic for providing me hardware to do the work on. also, a huge
thanks to claudio for trawling through the diff to fix merge issues,
understand the changes, and actually make it work.

tested by sthen@@ naddy@@ jmatthew@@ claudio@@ jj@@ and me

tested chips include:

bge0 at pci2 dev 3 function 0 "Broadcom BCM5704C" rev 0x10, BCM5704 B0 (0x2100): apic 2 int 8, address 00:30:48:59:52:44
brgphy0 at bge0 phy 1: BCM5704 10/100/1000baseT PHY, rev. 0

bge0 at pci3 dev 0 function 0 "Broadcom BCM5723" rev 0x10, BCM5784 A1 (0x5784100): apic 2 int 18, address e4:11:5b:12:bd:d6
brgphy0 at bge0 phy 1: BCM5784 10/100/1000baseT PHY, rev. 4

bge0 at pci3 dev 4 function 0 "Broadcom BCM5714" rev 0xa3, BCM5715 A3 (0x9003): ivec 0x795, address 00:14:4f:a9:34:90
brgphy0 at bge0 phy 1: BCM5714 10/100/1000baseT/SX PHY, rev. 0

bge0 at pci2 dev 0 function 0 "Broadcom BCM5761" rev 0x10, BCM5761 A1 (0x5761100): apic 2 int 18, address 00:10:18:4b:23:b4
brgphy0 at bge0 phy 1: BCM5761 10/100/1000baseT PHY, rev. 0

bge0 at pci0 dev 5 function 0 "Broadcom BCM5702X" rev 0x02, BCM5702/5703 A2 (0x1002): eb164 irq 2, address 00:10:18:00:98:e9
brgphy0 at bge0 phy 1: BCM5703 10/100/1000baseT PHY, rev. 2

bge0 at pci2 dev 2 function 0 "Broadcom BCM5703" rev 0x00, BCM5702/5703 A2 (0x1002): ivec 0x7dc, address 00:14:4f:16:a0:23

and of course:
bge1 at pci5 dev 0 function 0 "Broadcom BCM5720" rev 0x00, BCM5720 A0 (0x5720000), APE firmware NCSI 1.0.85.0: apic 0 int 16, address d4:ae:52:a7:05:38
brgphy1 at bge1 phy 1: BCM5720C 10/100/1000baseT PHY, rev. 0
bge2 at pci5 dev 0 function 1 "Broadcom BCM5720" rev 0x00, BCM5720 A0 (0x5720000), APE firmware NCSI 1.0.85.0: apic 0 int 17, address d4:ae:52:a7:05:39
brgphy2 at bge2 phy 2: BCM5720C 10/100/1000baseT PHY, rev. 0

either sthen@@ or i will be around to handle any issues after this commit.
@
text
@a158 1
#define	BGE_PCI_BAR2			0x18
d409 2
a410 2
#define	BGE_PCISTATE_ROM_ENABLE		0x00000020
#define	BGE_PCISTATE_ROM_RETRY_ENABLE	0x00000040
d412 1
a413 4
#define	BGE_PCISTATE_RETRY_SAME_DMA	0x00002000
#define	BGE_PCISTATE_ALLOW_APE_CTLSPC_WR	0x00010000
#define	BGE_PCISTATE_ALLOW_APE_SHMEM_WR	0x00020000
#define	BGE_PCISTATE_ALLOW_APE_PSPACE_WR	0x00040000
a677 2
#define	BGE_MACMODE_APE_RX_EN		0x08000000
#define	BGE_MACMODE_APE_TX_EN		0x10000000
d765 1
a765 1
#define	BGE_RXMODE_IPV6_ENABLE          0x01000000
a2131 106
/* BAR1 (APE) Register Definitions */

#define	BGE_APE_GPIO_MSG		0x0008
#define	BGE_APE_EVENT			0x000C
#define	BGE_APE_LOCK_REQ		0x002C
#define	BGE_APE_LOCK_GRANT		0x004C

#define	BGE_APE_GPIO_MSG_SHIFT		4

#define	BGE_APE_EVENT_1			0x00000001

#define	BGE_APE_LOCK_REQ_DRIVER0	0x00001000

#define	BGE_APE_LOCK_GRANT_DRIVER0	0x00001000

/* APE Shared Memory block (writable by APE only) */
#define	BGE_APE_SEG_SIG			0x4000
#define	BGE_APE_FW_STATUS		0x400C
#define	BGE_APE_FW_FEATURES		0x4010
#define	BGE_APE_FW_BEHAVIOR		0x4014
#define	BGE_APE_FW_VERSION		0x4018
#define	BGE_APE_FW_HEARTBEAT_INTERVAL	0x4024
#define	BGE_APE_FW_HEARTBEAT		0x4028
#define	BGE_APE_FW_ERROR_FLAGS		0x4074

#define	BGE_APE_SEG_SIG_MAGIC		0x41504521

#define	BGE_APE_FW_STATUS_READY		0x00000100

#define	BGE_APE_FW_FEATURE_DASH		0x00000001
#define	BGE_APE_FW_FEATURE_NCSI		0x00000002

#define	BGE_APE_FW_VERSION_MAJMSK	0xFF000000
#define	BGE_APE_FW_VERSION_MAJSFT	24
#define	BGE_APE_FW_VERSION_MINMSK	0x00FF0000
#define	BGE_APE_FW_VERSION_MINSFT	16
#define	BGE_APE_FW_VERSION_REVMSK	0x0000FF00
#define	BGE_APE_FW_VERSION_REVSFT	8
#define	BGE_APE_FW_VERSION_BLDMSK	0x000000FF

/* Host Shared Memory block (writable by host only) */
#define	BGE_APE_HOST_SEG_SIG		0x4200
#define	BGE_APE_HOST_SEG_LEN		0x4204
#define	BGE_APE_HOST_INIT_COUNT		0x4208
#define	BGE_APE_HOST_DRIVER_ID		0x420C
#define	BGE_APE_HOST_BEHAVIOR		0x4210
#define	BGE_APE_HOST_HEARTBEAT_INT_MS	0x4214
#define	BGE_APE_HOST_HEARTBEAT_COUNT	0x4218
#define	BGE_APE_HOST_DRVR_STATE		0x421C
#define	BGE_APE_HOST_WOL_SPEED		0x4224

#define	BGE_APE_HOST_SEG_SIG_MAGIC	0x484F5354

#define	BGE_APE_HOST_SEG_LEN_MAGIC	0x00000020

#define	BGE_APE_HOST_DRIVER_ID_FBSD	0xF6000000
#define	BGE_APE_HOST_DRIVER_ID_MAGIC(maj, min)				\
	(BGE_APE_HOST_DRIVER_ID_FBSD |					\
	((maj) & 0xffd) << 16 | ((min) & 0xff) << 8)

#define	BGE_APE_HOST_BEHAV_NO_PHYLOCK	0x00000001

#define	BGE_APE_HOST_HEARTBEAT_INT_DISABLE	0
#define	BGE_APE_HOST_HEARTBEAT_INT_5SEC 5000

#define	BGE_APE_HOST_DRVR_STATE_START	0x00000001
#define	BGE_APE_HOST_DRVR_STATE_UNLOAD	0x00000002
#define	BGE_APE_HOST_DRVR_STATE_WOL	0x00000003
#define	BGE_APE_HOST_DRVR_STATE_SUSPEND	0x00000004

#define	BGE_APE_HOST_WOL_SPEED_AUTO	0x00008000

#define	BGE_APE_EVENT_STATUS		0x4300

#define	BGE_APE_EVENT_STATUS_DRIVER_EVNT	0x00000010
#define	BGE_APE_EVENT_STATUS_STATE_CHNGE	0x00000500
#define	BGE_APE_EVENT_STATUS_STATE_START	0x00010000
#define	BGE_APE_EVENT_STATUS_STATE_UNLOAD	0x00020000
#define	BGE_APE_EVENT_STATUS_STATE_WOL		0x00030000
#define	BGE_APE_EVENT_STATUS_STATE_SUSPEND	0x00040000
#define	BGE_APE_EVENT_STATUS_EVENT_PENDING	0x80000000

#define	BGE_APE_DEBUG_LOG		0x4E00
#define	BGE_APE_DEBUG_LOG_LEN		0x0100

#define	BGE_APE_PER_LOCK_REQ		0x8400
#define	BGE_APE_PER_LOCK_GRANT		0x8420

#define	BGE_APE_LOCK_PER_REQ_DRIVER0	0x00001000
#define	BGE_APE_LOCK_PER_REQ_DRIVER1	0x00000002
#define	BGE_APE_LOCK_PER_REQ_DRIVER2	0x00000004
#define	BGE_APE_LOCK_PER_REQ_DRIVER3	0x00000008

#define	BGE_APE_PER_LOCK_GRANT_DRIVER0	0x00001000
#define	BGE_APE_PER_LOCK_GRANT_DRIVER1	0x00000002
#define	BGE_APE_PER_LOCK_GRANT_DRIVER2	0x00000004
#define	BGE_APE_PER_LOCK_GRANT_DRIVER3	0x00000008

/* APE Mutex Resources */
#define	BGE_APE_LOCK_PHY0		0
#define	BGE_APE_LOCK_GRC		1
#define	BGE_APE_LOCK_PHY1		2
#define	BGE_APE_LOCK_PHY2		3
#define	BGE_APE_LOCK_MEM		4
#define	BGE_APE_LOCK_PHY3		5
#define	BGE_APE_LOCK_GPIO		7
a2272 1
#define	BGE_RXBDFLAG_IPV6		0x8000
a2281 1
#define	BGE_RXERRFLAG_IP_CSUM_NOK	0x1000	/* 5717 */
a2587 12
/* BAR2 APE register access macros. */
#define	APE_WRITE_4(sc, reg, val)	\
	bus_space_write_4(sc->bge_apetag, sc->bge_apehandle, reg, val)

#define	APE_READ_4(sc, reg)		\
	bus_space_read_4(sc->bge_apetag, sc->bge_apehandle, reg)

#define	APE_SETBIT(sc, reg, x)	\
	APE_WRITE_4(sc, reg, (APE_READ_4(sc, reg) | (x)))
#define	APE_CLRBIT(sc, reg, x)	\
	APE_WRITE_4(sc, reg, (APE_READ_4(sc, reg) & ~(x)))

a2640 4
#define	BGE_STATUS_BLK_SZ	sizeof (struct bge_status_block)

#define	BGE_STATS_SZ		sizeof (struct bge_stats)

a2678 2
	bus_space_handle_t	bge_apehandle;
	bus_space_tag_t		bge_apetag;
a2709 4
#define	BGE_5717_PLUS		0x04000000
#define	BGE_CPMU_PRESENT	0x08000000
#define	BGE_APE			0x10000000
#define	BGE_575X_PLUS		0x20000000
a2711 6
	u_int32_t		bge_mfw_flags;  /* Management F/W flags */
#define	BGE_MFW_ON_RXCPU	0x00000001
#define	BGE_MFW_ON_APE		0x00000002
#define	BGE_MFW_TYPE_NCSI	0x00000004
#define	BGE_MFW_TYPE_DASH	0x00000008
	int			bge_phy_ape_lock;
@


1.109
log
@Fight global eye bleeding by fixing evil typos.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.108 2013/01/15 23:06:11 claudio Exp $	*/
d159 1
d410 2
a411 2
#define	BGE_PCISTATE_WANT_EXPROM	0x00000020
#define	BGE_PCISTATE_EXPROM_RETRY	0x00000040
d413 1
d415 3
a417 1
#define	BGE_PCISTATE_PCI_TGT_RETRY_MAX	0x00000E00
d682 2
d771 1
a771 1
#define	BGE_RXMODE_RX_IPV6_CSUM_ENABLE	0x01000000
d2138 106
d2385 1
d2395 1
d2702 12
d2767 4
d2809 2
d2842 4
d2848 6
@


1.108
log
@More syncing with FreeBSD bge version. No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.107 2013/01/15 05:04:17 claudio Exp $	*/
d2549 1
a2549 1
 * alignes the packet after the Ethernet header at a 32-bit
@


1.107
log
@put a tab after #define to make the diff between Fx and Ox smaller.
No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.106 2013/01/10 01:17:00 dlg Exp $	*/
d716 1
a716 1
#define	BGE_LEDCTL_TREFLED_BLINK_2	0x00000040
d954 1
a955 1
#define	BGE_MIMODE_CLKCNT		0x001F0000
d1643 1
a1643 1
#define	BGE_WDMAMODE_BURST_ALL_DATA	0xc0000000
a1710 1

d1948 2
a1949 1
#define	BGE_CPU_EVENT			0x6810
d1955 1
d1957 1
a1957 1
#define	BGE_FASTBOOT_PC			0x6894
d2057 3
a2061 1
#define	BGE_MISCCFG_BOARD_ID_MASK	0x0001e000
@


1.106
log
@dont hardcode the phy address at 1. the 5718 family of chips can have
phys as 1, 2, 8, or 9 depending on which pci function its on and whether
its serdes.

this tells every other bge that the phy is still at 1, so they still work.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.105 2013/01/10 00:47:39 dlg Exp $	*/
d66 32
a97 32
#define BGE_PAGE_ZERO			0x00000000
#define BGE_PAGE_ZERO_END		0x000000FF
#define BGE_SEND_RING_RCB		0x00000100
#define BGE_SEND_RING_RCB_END		0x000001FF
#define BGE_RX_RETURN_RING_RCB		0x00000200
#define BGE_RX_RETURN_RING_RCB_END	0x000002FF
#define BGE_STATS_BLOCK			0x00000300
#define BGE_STATS_BLOCK_END		0x00000AFF
#define BGE_STATUS_BLOCK		0x00000B00
#define BGE_STATUS_BLOCK_END		0x00000B4F
#define BGE_SOFTWARE_GENCOMM		0x00000B50
#define BGE_SOFTWARE_GENCOMM_SIG	0x00000B54
#define BGE_SOFTWARE_GENCOMM_NICCFG	0x00000B58
#define BGE_SOFTWARE_GENCOMM_VER	0x00000B5C
#define    BGE_VER_SHIFT			16
#define BGE_SOFTWARE_GENCOMM_FW		0x00000B78
#define    BGE_FW_PAUSE				0x00000002
#define BGE_SOFTWARE_GENCOMM_NICCFG2	0x00000D38
#define BGE_SOFTWARE_GENCOMM_NICCFG3	0x00000D3C
#define BGE_SOFTWARE_GENCOMM_NICCFG4	0x00000D60
#define    BGE_NICCFG4_GMII_MODE		0x00000002
#define    BGE_NICCFG4_RGMII_STD_IBND_DISABLE	0x00000004
#define    BGE_NICCFG4_RGMII_EXT_IBND_RX_EN	0x00000008
#define    BGE_NICCFG4_RGMII_EXT_IBND_TX_EN	0x00000010
#define BGE_SOFTWARE_GENCOMM_END	0x00000FFF
#define BGE_UNMAPPED			0x00001000
#define BGE_UNMAPPED_END		0x00001FFF
#define BGE_DMA_DESCRIPTORS		0x00002000
#define BGE_DMA_DESCRIPTORS_END		0x00003FFF
#define BGE_SEND_RING_5717		0x00004000
#define BGE_SEND_RING_1_TO_4		0x00004000
#define BGE_SEND_RING_1_TO_4_END	0x00005FFF
d100 12
a111 12
#define BGE_STD_RX_RINGS		0x00006000
#define BGE_STD_RX_RINGS_END		0x00006FFF
#define BGE_JUMBO_RX_RINGS		0x00007000
#define BGE_JUMBO_RX_RINGS_END		0x00007FFF
#define BGE_BUFFPOOL_1			0x00008000
#define BGE_BUFFPOOL_1_END		0x0000FFFF
#define BGE_BUFFPOOL_2			0x00010000 /* or expansion ROM */
#define BGE_BUFFPOOL_2_END		0x00017FFF
#define BGE_BUFFPOOL_3			0x00018000 /* or expansion ROM */
#define BGE_BUFFPOOL_3_END		0x0001FFFF
#define BGE_STD_RX_RINGS_5717		0x00040000
#define BGE_JUMBO_RX_RINGS_5717		0x00044400
d114 18
a131 18
#define BGE_SEND_RING_5_TO_6		0x00006000
#define BGE_SEND_RING_5_TO_6_END	0x00006FFF
#define BGE_SEND_RING_7_TO_8		0x00007000
#define BGE_SEND_RING_7_TO_8_END	0x00007FFF
#define BGE_SEND_RING_9_TO_16		0x00008000
#define BGE_SEND_RING_9_TO_16_END	0x0000BFFF
#define BGE_EXT_STD_RX_RINGS		0x0000C000
#define BGE_EXT_STD_RX_RINGS_END	0x0000CFFF
#define BGE_EXT_JUMBO_RX_RINGS		0x0000D000
#define BGE_EXT_JUMBO_RX_RINGS_END	0x0000DFFF
#define BGE_MINI_RX_RINGS		0x0000E000
#define BGE_MINI_RX_RINGS_END		0x0000FFFF
#define BGE_AVAIL_REGION1		0x00010000 /* or expansion ROM */
#define BGE_AVAIL_REGION1_END		0x00017FFF
#define BGE_AVAIL_REGION2		0x00018000 /* or expansion ROM */
#define BGE_AVAIL_REGION2_END		0x0001FFFF
#define BGE_EXT_SSRAM			0x00020000
#define BGE_EXT_SSRAM_END		0x000FFFFF
d147 40
a186 40
#define BGE_PCI_VID			0x00
#define BGE_PCI_DID			0x02
#define BGE_PCI_CMD			0x04
#define BGE_PCI_STS			0x06
#define BGE_PCI_REV			0x08
#define BGE_PCI_CLASS			0x09
#define BGE_PCI_CACHESZ			0x0C
#define BGE_PCI_LATTIMER		0x0D
#define BGE_PCI_HDRTYPE			0x0E
#define BGE_PCI_BIST			0x0F
#define BGE_PCI_BAR0			0x10
#define BGE_PCI_BAR1			0x14
#define BGE_PCI_SUBSYS			0x2C
#define BGE_PCI_SUBVID			0x2E
#define BGE_PCI_ROMBASE			0x30
#define BGE_PCI_CAPPTR			0x34
#define BGE_PCI_INTLINE			0x3C
#define BGE_PCI_INTPIN			0x3D
#define BGE_PCI_MINGNT			0x3E
#define BGE_PCI_MAXLAT			0x3F
#define BGE_PCI_PCIXCAP			0x40
#define BGE_PCI_NEXTPTR_PM		0x41
#define BGE_PCI_PCIX_CMD		0x42
#define BGE_PCI_PCIX_STS		0x44
#define BGE_PCI_PWRMGMT_CAPID		0x48
#define BGE_PCI_NEXTPTR_VPD		0x49
#define BGE_PCI_PWRMGMT_CAPS		0x4A
#define BGE_PCI_PWRMGMT_CMD		0x4C
#define BGE_PCI_PWRMGMT_STS		0x4D
#define BGE_PCI_PWRMGMT_DATA		0x4F
#define BGE_PCI_VPD_CAPID		0x50
#define BGE_PCI_NEXTPTR_MSI		0x51
#define BGE_PCI_VPD_ADDR		0x52
#define BGE_PCI_VPD_DATA		0x54
#define BGE_PCI_MSI_CAPID		0x58
#define BGE_PCI_NEXTPTR_NONE		0x59
#define BGE_PCI_MSI_CTL			0x5A
#define BGE_PCI_MSI_ADDR_HI		0x5C
#define BGE_PCI_MSI_ADDR_LO		0x60
#define BGE_PCI_MSI_DATA		0x64
d189 2
a190 2
#define BGE_PCIE_CAPID_REG		0xD0
#define BGE_PCIE_CAPID			0x10
d195 22
a216 22
#define BGE_PCI_MISC_CTL		0x68
#define BGE_PCI_DMA_RW_CTL		0x6C
#define BGE_PCI_PCISTATE		0x70
#define BGE_PCI_CLKCTL			0x74
#define BGE_PCI_REG_BASEADDR		0x78
#define BGE_PCI_MEMWIN_BASEADDR		0x7C
#define BGE_PCI_REG_DATA		0x80
#define BGE_PCI_MEMWIN_DATA		0x84
#define BGE_PCI_MODECTL			0x88
#define BGE_PCI_MISC_CFG		0x8C
#define BGE_PCI_MISC_LOCALCTL		0x90
#define BGE_PCI_UNDI_RX_STD_PRODIDX_HI	0x98
#define BGE_PCI_UNDI_RX_STD_PRODIDX_LO	0x9C
#define BGE_PCI_UNDI_RX_RTN_CONSIDX_HI	0xA0
#define BGE_PCI_UNDI_RX_RTN_CONSIDX_LO	0xA4
#define BGE_PCI_UNDI_TX_BD_PRODIDX_HI	0xA8
#define BGE_PCI_UNDI_TX_BD_PRODIDX_LO	0xAC
#define BGE_PCI_ISR_MBX_HI		0xB0
#define BGE_PCI_ISR_MBX_LO		0xB4
#define BGE_PCI_PRODID_ASICREV		0xBC
#define BGE_PCI_GEN2_PRODID_ASICREV	0xF4
#define BGE_PCI_GEN15_PRODID_ASICREV	0xFC
d224 2
a225 2
#define BGE_PCI_CONF_DEV_CTRL		0xD8
#define BGE_PCI_CONF_DEV_STUS		0xDA
d228 10
a237 10
#define BGE_PCIMISCCTL_CLEAR_INTA	0x00000001
#define BGE_PCIMISCCTL_MASK_PCI_INTR	0x00000002
#define BGE_PCIMISCCTL_ENDIAN_BYTESWAP	0x00000004
#define BGE_PCIMISCCTL_ENDIAN_WORDSWAP	0x00000008
#define BGE_PCIMISCCTL_PCISTATE_RW	0x00000010
#define BGE_PCIMISCCTL_CLOCKCTL_RW	0x00000020
#define BGE_PCIMISCCTL_REG_WORDSWAP	0x00000040
#define BGE_PCIMISCCTL_INDIRECT_ACCESS	0x00000080
#define BGE_PCIMISCCTL_ASICREV		0xFFFF0000
#define BGE_PCIMISCCTL_ASICREV_SHIFT	16
d240 1
a240 1
#define BGE_DMA_SWAP_OPTIONS \
d244 1
a244 1
#define BGE_DMA_SWAP_OPTIONS \
d249 1
a249 1
#define BGE_INIT \
d253 65
a317 65
#define BGE_CHIPID_BCM5700_A0		0x7000
#define BGE_CHIPID_BCM5700_A1		0x7001
#define BGE_CHIPID_BCM5700_B0		0x7100
#define BGE_CHIPID_BCM5700_B1		0x7101
#define BGE_CHIPID_BCM5700_B2		0x7102
#define BGE_CHIPID_BCM5700_B3		0x7103
#define BGE_CHIPID_BCM5700_ALTIMA	0x7104
#define BGE_CHIPID_BCM5700_C0		0x7200
#define BGE_CHIPID_BCM5701_A0		0x0000	/* grrrr */
#define BGE_CHIPID_BCM5701_B0		0x0100
#define BGE_CHIPID_BCM5701_B2		0x0102
#define BGE_CHIPID_BCM5701_B5		0x0105
#define BGE_CHIPID_BCM5703_A0		0x1000
#define BGE_CHIPID_BCM5703_A1		0x1001
#define BGE_CHIPID_BCM5703_A2		0x1002
#define BGE_CHIPID_BCM5703_A3		0x1003
#define BGE_CHIPID_BCM5703_B0		0x1100
#define BGE_CHIPID_BCM5704_A0		0x2000
#define BGE_CHIPID_BCM5704_A1		0x2001
#define BGE_CHIPID_BCM5704_A2		0x2002
#define BGE_CHIPID_BCM5704_A3		0x2003
#define BGE_CHIPID_BCM5704_B0		0x2100
#define BGE_CHIPID_BCM5705_A0		0x3000
#define BGE_CHIPID_BCM5705_A1		0x3001
#define BGE_CHIPID_BCM5705_A2		0x3002
#define BGE_CHIPID_BCM5705_A3		0x3003
#define BGE_CHIPID_BCM5750_A0		0x4000
#define BGE_CHIPID_BCM5750_A1		0x4001
#define BGE_CHIPID_BCM5750_A3		0x4003
#define BGE_CHIPID_BCM5750_B0		0x4010
#define BGE_CHIPID_BCM5750_B1		0x4101
#define BGE_CHIPID_BCM5750_C0		0x4200
#define BGE_CHIPID_BCM5750_C1		0x4201
#define BGE_CHIPID_BCM5750_C2		0x4202
#define BGE_CHIPID_BCM5714_A0		0x5000
#define BGE_CHIPID_BCM5761_A0		0x5761000
#define BGE_CHIPID_BCM5761_A1		0x5761100
#define BGE_CHIPID_BCM5784_A0		0x5784000
#define BGE_CHIPID_BCM5784_A1		0x5784100
#define BGE_CHIPID_BCM5752_A0		0x6000
#define BGE_CHIPID_BCM5752_A1		0x6001
#define BGE_CHIPID_BCM5752_A2		0x6002
#define BGE_CHIPID_BCM5714_B0		0x8000
#define BGE_CHIPID_BCM5714_B3		0x8003
#define BGE_CHIPID_BCM5715_A0		0x9000
#define BGE_CHIPID_BCM5715_A1		0x9001
#define BGE_CHIPID_BCM5715_A3		0x9003
#define BGE_CHIPID_BCM5755_A0		0xa000
#define BGE_CHIPID_BCM5755_A1		0xa001
#define BGE_CHIPID_BCM5755_A2		0xa002
#define BGE_CHIPID_BCM5755_C0		0xa200
#define BGE_CHIPID_BCM5787_A0		0xb000
#define BGE_CHIPID_BCM5787_A1		0xb001
#define BGE_CHIPID_BCM5787_A2		0xb002
#define BGE_CHIPID_BCM5906_A0		0xc000
#define BGE_CHIPID_BCM5906_A1		0xc001
#define BGE_CHIPID_BCM5906_A2		0xc002
#define BGE_CHIPID_BCM57780_A0		0x57780000
#define BGE_CHIPID_BCM57780_A1		0x57780001
#define BGE_CHIPID_BCM5717_A0		0x05717000
#define BGE_CHIPID_BCM5717_B0		0x05717100
#define BGE_CHIPID_BCM5719_A0		0x05719000
#define BGE_CHIPID_BCM5720_A0		0x05720000
#define BGE_CHIPID_BCM57765_A0		0x57785000
#define BGE_CHIPID_BCM57765_B0		0x57785100
d320 23
a342 23
#define BGE_ASICREV(x)			((x) >> 12)
#define BGE_ASICREV_BCM5700		0x07
#define BGE_ASICREV_BCM5701		0x00
#define BGE_ASICREV_BCM5703		0x01
#define BGE_ASICREV_BCM5704		0x02
#define BGE_ASICREV_BCM5705		0x03
#define BGE_ASICREV_BCM5750		0x04
#define BGE_ASICREV_BCM5714_A0		0x05	/* 5714, 5715 */
#define BGE_ASICREV_BCM5752		0x06
#define BGE_ASICREV_BCM5780		0x08
#define BGE_ASICREV_BCM5714		0x09	/* 5714, 5715 */
#define BGE_ASICREV_BCM5755		0x0a
#define BGE_ASICREV_BCM5787		0x0b
#define BGE_ASICREV_BCM5906		0x0c
#define BGE_ASICREV_USE_PRODID_REG	0x0f
#define BGE_ASICREV_BCM5761		0x5761
#define BGE_ASICREV_BCM5784		0x5784
#define BGE_ASICREV_BCM5785		0x5785
#define BGE_ASICREV_BCM57780		0x57780
#define BGE_ASICREV_BCM5717		0x5717
#define BGE_ASICREV_BCM5719		0x5719
#define BGE_ASICREV_BCM5720		0x5720
#define BGE_ASICREV_BCM57765		0x57785
d345 12
a356 12
#define BGE_CHIPREV(x)			((x) >> 8)
#define BGE_CHIPREV_5700_AX		0x70
#define BGE_CHIPREV_5700_BX		0x71
#define BGE_CHIPREV_5700_CX		0x72
#define BGE_CHIPREV_5701_AX		0x00
#define BGE_CHIPREV_5703_AX		0x10
#define BGE_CHIPREV_5704_AX		0x20
#define BGE_CHIPREV_5704_BX		0x21
#define BGE_CHIPREV_5750_AX		0x40
#define BGE_CHIPREV_5750_BX		0x41
#define BGE_CHIPREV_5761_AX		0x57611
#define BGE_CHIPREV_5784_AX		0x57841
d359 39
a397 39
#define BGE_PCIDMARWCTL_MINDMA		0x000000FF
#define BGE_PCIDMARWCTL_DIS_CACHE_ALIGNMENT	0x00000001
#define BGE_PCIDMARWCTL_RDADRR_BNDRY	0x00000700
#define BGE_PCIDMARWCTL_WRADDR_BNDRY	0x00003800
#define BGE_PCIDMARWCTL_ONEDMA_ATONCE	0x0000C000
#define BGE_PCIDMARWCTL_ONEDMA_ATONCE_GLOBAL	0x00004000
#define BGE_PCIDMARWCTL_ONEDMA_ATONCE_LOCAL	0x00008000
#define BGE_PCIDMARWCTL_RD_WAT		0x00070000
#define BGE_PCIDMARWCTL_WR_WAT		0x00380000
#define BGE_PCIDMARWCTL_USE_MRM		0x00400000
#define BGE_PCIDMARWCTL_ASRT_ALL_BE	0x00800000
#define BGE_PCIDMARWCTL_DFLT_PCI_RD_CMD	0x0F000000
#define BGE_PCIDMARWCTL_DFLT_PCI_WR_CMD	0xF0000000

#define BGE_PCIDMARWCTL_RD_WAT_SHIFT(x)	((x) << 16)
#define BGE_PCIDMARWCTL_WR_WAT_SHIFT(x)	((x) << 19)
#define BGE_PCIDMARWCTL_RD_CMD_SHIFT(x)	((x) << 24)
#define BGE_PCIDMARWCTL_WR_CMD_SHIFT(x)	((x) << 28)

#define BGE_PCIDMARWCTL_TAGGED_STATUS_WA	0x00000080
#define BGE_PCIDMARWCTL_CRDRDR_RDMA_MRRS_MSK	0x00000380

#define BGE_PCI_READ_BNDRY_DISABLE	0x00000000
#define BGE_PCI_READ_BNDRY_16BYTES	0x00000100
#define BGE_PCI_READ_BNDRY_32BYTES	0x00000200
#define BGE_PCI_READ_BNDRY_64BYTES	0x00000300
#define BGE_PCI_READ_BNDRY_128BYTES	0x00000400
#define BGE_PCI_READ_BNDRY_256BYTES	0x00000500
#define BGE_PCI_READ_BNDRY_512BYTES	0x00000600
#define BGE_PCI_READ_BNDRY_1024BYTES	0x00000700

#define BGE_PCI_WRITE_BNDRY_DISABLE	0x00000000
#define BGE_PCI_WRITE_BNDRY_16BYTES	0x00000800
#define BGE_PCI_WRITE_BNDRY_32BYTES	0x00001000
#define BGE_PCI_WRITE_BNDRY_64BYTES	0x00001800
#define BGE_PCI_WRITE_BNDRY_128BYTES	0x00002000
#define BGE_PCI_WRITE_BNDRY_256BYTES	0x00002800
#define BGE_PCI_WRITE_BNDRY_512BYTES	0x00003000
#define BGE_PCI_WRITE_BNDRY_1024BYTES	0x00003800
d404 10
a413 10
#define BGE_PCISTATE_FORCE_RESET	0x00000001
#define BGE_PCISTATE_INTR_NOT_ACTIVE	0x00000002
#define BGE_PCISTATE_PCI_BUSMODE	0x00000004 /* 1 = PCI, 0 = PCI-X */
#define BGE_PCISTATE_PCI_BUSSPEED	0x00000008 /* 1 = 66/133, 0 = 33/66 */
#define BGE_PCISTATE_32BIT_BUS		0x00000010 /* 1 = 32bit, 0 = 64bit */
#define BGE_PCISTATE_WANT_EXPROM	0x00000020
#define BGE_PCISTATE_EXPROM_RETRY	0x00000040
#define BGE_PCISTATE_FLATVIEW_MODE	0x00000100
#define BGE_PCISTATE_RETRY_SAME_DMA	0x00002000
#define BGE_PCISTATE_PCI_TGT_RETRY_MAX	0x00000E00
d422 1
a422 1
#define BGE_PCISTATE_RESERVED	((1 << 12) + (1 <<7))
d429 10
a438 10
#define BGE_PCICLOCKCTL_DETECTED_SPEED	0x0000000F
#define BGE_PCICLOCKCTL_M66EN		0x00000080
#define BGE_PCICLOCKCTL_LOWPWR_CLKMODE	0x00000200
#define BGE_PCICLOCKCTL_RXCPU_CLK_DIS	0x00000400
#define BGE_PCICLOCKCTL_TXCPU_CLK_DIS	0x00000800
#define BGE_PCICLOCKCTL_ALTCLK		0x00001000
#define BGE_PCICLOCKCTL_ALTCLK_SRC	0x00002000
#define BGE_PCICLOCKCTL_PCIPLL_DISABLE	0x00004000
#define BGE_PCICLOCKCTL_SYSPLL_DISABLE	0x00008000
#define BGE_PCICLOCKCTL_BIST_ENABLE	0x00010000
d447 132
a578 132
#define BGE_MBX_IRQ0_HI			0x0200
#define BGE_MBX_IRQ0_LO			0x0204
#define BGE_MBX_IRQ1_HI			0x0208
#define BGE_MBX_IRQ1_LO			0x020C
#define BGE_MBX_IRQ2_HI			0x0210
#define BGE_MBX_IRQ2_LO			0x0214
#define BGE_MBX_IRQ3_HI			0x0218
#define BGE_MBX_IRQ3_LO			0x021C
#define BGE_MBX_GEN0_HI			0x0220
#define BGE_MBX_GEN0_LO			0x0224
#define BGE_MBX_GEN1_HI			0x0228
#define BGE_MBX_GEN1_LO			0x022C
#define BGE_MBX_GEN2_HI			0x0230
#define BGE_MBX_GEN2_LO			0x0234
#define BGE_MBX_GEN3_HI			0x0228
#define BGE_MBX_GEN3_LO			0x022C
#define BGE_MBX_GEN4_HI			0x0240
#define BGE_MBX_GEN4_LO			0x0244
#define BGE_MBX_GEN5_HI			0x0248
#define BGE_MBX_GEN5_LO			0x024C
#define BGE_MBX_GEN6_HI			0x0250
#define BGE_MBX_GEN6_LO			0x0254
#define BGE_MBX_GEN7_HI			0x0258
#define BGE_MBX_GEN7_LO			0x025C
#define BGE_MBX_RELOAD_STATS_HI		0x0260
#define BGE_MBX_RELOAD_STATS_LO		0x0264
#define BGE_MBX_RX_STD_PROD_HI		0x0268
#define BGE_MBX_RX_STD_PROD_LO		0x026C
#define BGE_MBX_RX_JUMBO_PROD_HI	0x0270
#define BGE_MBX_RX_JUMBO_PROD_LO	0x0274
#define BGE_MBX_RX_MINI_PROD_HI		0x0278
#define BGE_MBX_RX_MINI_PROD_LO		0x027C
#define BGE_MBX_RX_CONS0_HI		0x0280
#define BGE_MBX_RX_CONS0_LO		0x0284
#define BGE_MBX_RX_CONS1_HI		0x0288
#define BGE_MBX_RX_CONS1_LO		0x028C
#define BGE_MBX_RX_CONS2_HI		0x0290
#define BGE_MBX_RX_CONS2_LO		0x0294
#define BGE_MBX_RX_CONS3_HI		0x0298
#define BGE_MBX_RX_CONS3_LO		0x029C
#define BGE_MBX_RX_CONS4_HI		0x02A0
#define BGE_MBX_RX_CONS4_LO		0x02A4
#define BGE_MBX_RX_CONS5_HI		0x02A8
#define BGE_MBX_RX_CONS5_LO		0x02AC
#define BGE_MBX_RX_CONS6_HI		0x02B0
#define BGE_MBX_RX_CONS6_LO		0x02B4
#define BGE_MBX_RX_CONS7_HI		0x02B8
#define BGE_MBX_RX_CONS7_LO		0x02BC
#define BGE_MBX_RX_CONS8_HI		0x02C0
#define BGE_MBX_RX_CONS8_LO		0x02C4
#define BGE_MBX_RX_CONS9_HI		0x02C8
#define BGE_MBX_RX_CONS9_LO		0x02CC
#define BGE_MBX_RX_CONS10_HI		0x02D0
#define BGE_MBX_RX_CONS10_LO		0x02D4
#define BGE_MBX_RX_CONS11_HI		0x02D8
#define BGE_MBX_RX_CONS11_LO		0x02DC
#define BGE_MBX_RX_CONS12_HI		0x02E0
#define BGE_MBX_RX_CONS12_LO		0x02E4
#define BGE_MBX_RX_CONS13_HI		0x02E8
#define BGE_MBX_RX_CONS13_LO		0x02EC
#define BGE_MBX_RX_CONS14_HI		0x02F0
#define BGE_MBX_RX_CONS14_LO		0x02F4
#define BGE_MBX_RX_CONS15_HI		0x02F8
#define BGE_MBX_RX_CONS15_LO		0x02FC
#define BGE_MBX_TX_HOST_PROD0_HI	0x0300
#define BGE_MBX_TX_HOST_PROD0_LO	0x0304
#define BGE_MBX_TX_HOST_PROD1_HI	0x0308
#define BGE_MBX_TX_HOST_PROD1_LO	0x030C
#define BGE_MBX_TX_HOST_PROD2_HI	0x0310
#define BGE_MBX_TX_HOST_PROD2_LO	0x0314
#define BGE_MBX_TX_HOST_PROD3_HI	0x0318
#define BGE_MBX_TX_HOST_PROD3_LO	0x031C
#define BGE_MBX_TX_HOST_PROD4_HI	0x0320
#define BGE_MBX_TX_HOST_PROD4_LO	0x0324
#define BGE_MBX_TX_HOST_PROD5_HI	0x0328
#define BGE_MBX_TX_HOST_PROD5_LO	0x032C
#define BGE_MBX_TX_HOST_PROD6_HI	0x0330
#define BGE_MBX_TX_HOST_PROD6_LO	0x0334
#define BGE_MBX_TX_HOST_PROD7_HI	0x0338
#define BGE_MBX_TX_HOST_PROD7_LO	0x033C
#define BGE_MBX_TX_HOST_PROD8_HI	0x0340
#define BGE_MBX_TX_HOST_PROD8_LO	0x0344
#define BGE_MBX_TX_HOST_PROD9_HI	0x0348
#define BGE_MBX_TX_HOST_PROD9_LO	0x034C
#define BGE_MBX_TX_HOST_PROD10_HI	0x0350
#define BGE_MBX_TX_HOST_PROD10_LO	0x0354
#define BGE_MBX_TX_HOST_PROD11_HI	0x0358
#define BGE_MBX_TX_HOST_PROD11_LO	0x035C
#define BGE_MBX_TX_HOST_PROD12_HI	0x0360
#define BGE_MBX_TX_HOST_PROD12_LO	0x0364
#define BGE_MBX_TX_HOST_PROD13_HI	0x0368
#define BGE_MBX_TX_HOST_PROD13_LO	0x036C
#define BGE_MBX_TX_HOST_PROD14_HI	0x0370
#define BGE_MBX_TX_HOST_PROD14_LO	0x0374
#define BGE_MBX_TX_HOST_PROD15_HI	0x0378
#define BGE_MBX_TX_HOST_PROD15_LO	0x037C
#define BGE_MBX_TX_NIC_PROD0_HI		0x0380
#define BGE_MBX_TX_NIC_PROD0_LO		0x0384
#define BGE_MBX_TX_NIC_PROD1_HI		0x0388
#define BGE_MBX_TX_NIC_PROD1_LO		0x038C
#define BGE_MBX_TX_NIC_PROD2_HI		0x0390
#define BGE_MBX_TX_NIC_PROD2_LO		0x0394
#define BGE_MBX_TX_NIC_PROD3_HI		0x0398
#define BGE_MBX_TX_NIC_PROD3_LO		0x039C
#define BGE_MBX_TX_NIC_PROD4_HI		0x03A0
#define BGE_MBX_TX_NIC_PROD4_LO		0x03A4
#define BGE_MBX_TX_NIC_PROD5_HI		0x03A8
#define BGE_MBX_TX_NIC_PROD5_LO		0x03AC
#define BGE_MBX_TX_NIC_PROD6_HI		0x03B0
#define BGE_MBX_TX_NIC_PROD6_LO		0x03B4
#define BGE_MBX_TX_NIC_PROD7_HI		0x03B8
#define BGE_MBX_TX_NIC_PROD7_LO		0x03BC
#define BGE_MBX_TX_NIC_PROD8_HI		0x03C0
#define BGE_MBX_TX_NIC_PROD8_LO		0x03C4
#define BGE_MBX_TX_NIC_PROD9_HI		0x03C8
#define BGE_MBX_TX_NIC_PROD9_LO		0x03CC
#define BGE_MBX_TX_NIC_PROD10_HI	0x03D0
#define BGE_MBX_TX_NIC_PROD10_LO	0x03D4
#define BGE_MBX_TX_NIC_PROD11_HI	0x03D8
#define BGE_MBX_TX_NIC_PROD11_LO	0x03DC
#define BGE_MBX_TX_NIC_PROD12_HI	0x03E0
#define BGE_MBX_TX_NIC_PROD12_LO	0x03E4
#define BGE_MBX_TX_NIC_PROD13_HI	0x03E8
#define BGE_MBX_TX_NIC_PROD13_LO	0x03EC
#define BGE_MBX_TX_NIC_PROD14_HI	0x03F0
#define BGE_MBX_TX_NIC_PROD14_LO	0x03F4
#define BGE_MBX_TX_NIC_PROD15_HI	0x03F8
#define BGE_MBX_TX_NIC_PROD15_LO	0x03FC

#define BGE_TX_RINGS_MAX		4
#define BGE_TX_RINGS_EXTSSRAM_MAX	16
#define BGE_RX_RINGS_MAX		16
d581 74
a654 74
#define BGE_MAC_MODE			0x0400
#define BGE_MAC_STS			0x0404
#define BGE_MAC_EVT_ENB			0x0408
#define BGE_MAC_LED_CTL			0x040C
#define BGE_MAC_ADDR1_LO		0x0410
#define BGE_MAC_ADDR1_HI		0x0414
#define BGE_MAC_ADDR2_LO		0x0418
#define BGE_MAC_ADDR2_HI		0x041C
#define BGE_MAC_ADDR3_LO		0x0420
#define BGE_MAC_ADDR3_HI		0x0424
#define BGE_MAC_ADDR4_LO		0x0428
#define BGE_MAC_ADDR4_HI		0x042C
#define BGE_WOL_PATPTR			0x0430
#define BGE_WOL_PATCFG			0x0434
#define BGE_TX_RANDOM_BACKOFF		0x0438
#define BGE_RX_MTU			0x043C
#define BGE_GBIT_PCS_TEST		0x0440
#define BGE_TX_TBI_AUTONEG		0x0444
#define BGE_RX_TBI_AUTONEG		0x0448
#define BGE_MI_COMM			0x044C
#define BGE_MI_STS			0x0450
#define BGE_MI_MODE			0x0454
#define BGE_AUTOPOLL_STS		0x0458
#define BGE_TX_MODE			0x045C
#define BGE_TX_STS			0x0460
#define BGE_TX_LENGTHS			0x0464
#define BGE_RX_MODE			0x0468
#define BGE_RX_STS			0x046C
#define BGE_MAR0			0x0470
#define BGE_MAR1			0x0474
#define BGE_MAR2			0x0478
#define BGE_MAR3			0x047C
#define BGE_RX_BD_RULES_CTL0		0x0480
#define BGE_RX_BD_RULES_MASKVAL0	0x0484
#define BGE_RX_BD_RULES_CTL1		0x0488
#define BGE_RX_BD_RULES_MASKVAL1	0x048C
#define BGE_RX_BD_RULES_CTL2		0x0490
#define BGE_RX_BD_RULES_MASKVAL2	0x0494
#define BGE_RX_BD_RULES_CTL3		0x0498
#define BGE_RX_BD_RULES_MASKVAL3	0x049C
#define BGE_RX_BD_RULES_CTL4		0x04A0
#define BGE_RX_BD_RULES_MASKVAL4	0x04A4
#define BGE_RX_BD_RULES_CTL5		0x04A8
#define BGE_RX_BD_RULES_MASKVAL5	0x04AC
#define BGE_RX_BD_RULES_CTL6		0x04B0
#define BGE_RX_BD_RULES_MASKVAL6	0x04B4
#define BGE_RX_BD_RULES_CTL7		0x04B8
#define BGE_RX_BD_RULES_MASKVAL7	0x04BC
#define BGE_RX_BD_RULES_CTL8		0x04C0
#define BGE_RX_BD_RULES_MASKVAL8	0x04C4
#define BGE_RX_BD_RULES_CTL9		0x04C8
#define BGE_RX_BD_RULES_MASKVAL9	0x04CC
#define BGE_RX_BD_RULES_CTL10		0x04D0
#define BGE_RX_BD_RULES_MASKVAL10	0x04D4
#define BGE_RX_BD_RULES_CTL11		0x04D8
#define BGE_RX_BD_RULES_MASKVAL11	0x04DC
#define BGE_RX_BD_RULES_CTL12		0x04E0
#define BGE_RX_BD_RULES_MASKVAL12	0x04E4
#define BGE_RX_BD_RULES_CTL13		0x04E8
#define BGE_RX_BD_RULES_MASKVAL13	0x04EC
#define BGE_RX_BD_RULES_CTL14		0x04F0
#define BGE_RX_BD_RULES_MASKVAL14	0x04F4
#define BGE_RX_BD_RULES_CTL15		0x04F8
#define BGE_RX_BD_RULES_MASKVAL15	0x04FC
#define BGE_RX_RULES_CFG		0x0500
#define BGE_MAX_RX_FRAME_LOWAT		0x0504
#define BGE_SERDES_CFG			0x0590
#define BGE_SERDES_STS			0x0594
#define BGE_PHYCFG1			0x05A0
#define BGE_PHYCFG2			0x05A4
#define BGE_EXT_RGMII_MODE		0x05A8
#define BGE_SGDIG_CFG			0x05B0
#define BGE_SGDIG_STS			0x05B4
#define BGE_MAC_STATS			0x0800
d657 26
a682 26
#define BGE_MACMODE_RESET		0x00000001
#define BGE_MACMODE_HALF_DUPLEX		0x00000002
#define BGE_MACMODE_PORTMODE		0x0000000C
#define BGE_MACMODE_LOOPBACK		0x00000010
#define BGE_MACMODE_RX_TAGGEDPKT	0x00000080
#define BGE_MACMODE_TX_BURST_ENB	0x00000100
#define BGE_MACMODE_MAX_DEFER		0x00000200
#define BGE_MACMODE_LINK_POLARITY	0x00000400
#define BGE_MACMODE_RX_STATS_ENB	0x00000800
#define BGE_MACMODE_RX_STATS_CLEAR	0x00001000
#define BGE_MACMODE_RX_STATS_FLUSH	0x00002000
#define BGE_MACMODE_TX_STATS_ENB	0x00004000
#define BGE_MACMODE_TX_STATS_CLEAR	0x00008000
#define BGE_MACMODE_TX_STATS_FLUSH	0x00010000
#define BGE_MACMODE_TBI_SEND_CFGS	0x00020000
#define BGE_MACMODE_MAGIC_PKT_ENB	0x00040000
#define BGE_MACMODE_ACPI_PWRON_ENB	0x00080000
#define BGE_MACMODE_MIP_ENB		0x00100000
#define BGE_MACMODE_TXDMA_ENB		0x00200000
#define BGE_MACMODE_RXDMA_ENB		0x00400000
#define BGE_MACMODE_FRMHDR_DMA_ENB	0x00800000

#define BGE_PORTMODE_NONE		0x00000000
#define BGE_PORTMODE_MII		0x00000004
#define BGE_PORTMODE_GMII		0x00000008
#define BGE_PORTMODE_TBI		0x0000000C
d685 13
a697 13
#define BGE_MACSTAT_TBI_PCS_SYNCHED	0x00000001
#define BGE_MACSTAT_TBI_SIGNAL_DETECT	0x00000002
#define BGE_MACSTAT_RX_CFG		0x00000004
#define BGE_MACSTAT_CFG_CHANGED		0x00000008
#define BGE_MACSTAT_SYNC_CHANGED	0x00000010
#define BGE_MACSTAT_PORT_DECODE_ERROR	0x00000400
#define BGE_MACSTAT_LINK_CHANGED	0x00001000
#define BGE_MACSTAT_MI_COMPLETE		0x00400000
#define BGE_MACSTAT_MI_INTERRUPT	0x00800000
#define BGE_MACSTAT_AUTOPOLL_ERROR	0x01000000
#define BGE_MACSTAT_ODI_ERROR		0x02000000
#define BGE_MACSTAT_RXSTAT_OFLOW	0x04000000
#define BGE_MACSTAT_TXSTAT_OFLOW	0x08000000
d700 8
a707 8
#define BGE_EVTENB_PORT_DECODE_ERROR	0x00000400
#define BGE_EVTENB_LINK_CHANGED		0x00001000
#define BGE_EVTENB_MI_COMPLETE		0x00400000
#define BGE_EVTENB_MI_INTERRUPT		0x00800000
#define BGE_EVTENB_AUTOPOLL_ERROR	0x01000000
#define BGE_EVTENB_ODI_ERROR		0x02000000
#define BGE_EVTENB_RXSTAT_OFLOW		0x04000000
#define BGE_EVTENB_TXSTAT_OFLOW		0x08000000
d710 13
a722 13
#define BGE_LEDCTL_LINKLED_OVERRIDE	0x00000001
#define BGE_LEDCTL_1000MBPS_LED		0x00000002
#define BGE_LEDCTL_100MBPS_LED		0x00000004
#define BGE_LEDCTL_10MBPS_LED		0x00000008
#define BGE_LEDCTL_TRAFLED_OVERRIDE	0x00000010
#define BGE_LEDCTL_TRAFLED_BLINK	0x00000020
#define BGE_LEDCTL_TREFLED_BLINK_2	0x00000040
#define BGE_LEDCTL_1000MBPS_STS		0x00000080
#define BGE_LEDCTL_100MBPS_STS		0x00000100
#define BGE_LEDCTL_10MBPS_STS		0x00000200
#define BGE_LEDCTL_TRADLED_STS		0x00000400
#define BGE_LEDCTL_BLINKPERIOD		0x7FF80000
#define BGE_LEDCTL_BLINKPERIOD_OVERRIDE	0x80000000
d725 1
a725 1
#define BGE_TX_BACKOFF_SEED_MASK	0x3F
d728 1
a728 1
#define BGE_AUTOPOLLSTS_ERROR		0x00000001
d731 8
a738 8
#define BGE_TXMODE_RESET		0x00000001
#define BGE_TXMODE_ENABLE		0x00000002
#define BGE_TXMODE_FLOWCTL_ENABLE	0x00000010
#define BGE_TXMODE_BIGBACKOFF_ENABLE	0x00000020
#define BGE_TXMODE_LONGPAUSE_ENABLE	0x00000040
#define BGE_TXMODE_MBUF_LOCKUP_FIX	0x00000100
#define BGE_TXMODE_JMB_FRM_LEN		0x00400000
#define BGE_TXMODE_CNT_DN_MODE		0x00800000
d741 6
a746 6
#define BGE_TXSTAT_RX_XOFFED		0x00000001
#define BGE_TXSTAT_SENT_XOFF		0x00000002
#define BGE_TXSTAT_SENT_XON		0x00000004
#define BGE_TXSTAT_LINK_UP		0x00000008
#define BGE_TXSTAT_ODI_UFLOW		0x00000010
#define BGE_TXSTAT_ODI_OFLOW		0x00000020
d749 5
a753 5
#define BGE_TXLEN_SLOTTIME		0x000000FF
#define BGE_TXLEN_IPG			0x00000F00
#define BGE_TXLEN_CRS			0x00003000
#define BGE_TXLEN_JMB_FRM_LEN_MSK	0x00FF0000
#define BGE_TXLEN_CNT_DN_VAL_MSK	0xFF000000
d756 10
a765 10
#define BGE_RXMODE_RESET		0x00000001
#define BGE_RXMODE_ENABLE		0x00000002
#define BGE_RXMODE_FLOWCTL_ENABLE	0x00000004
#define BGE_RXMODE_RX_GIANTS		0x00000020
#define BGE_RXMODE_RX_RUNTS		0x00000040
#define BGE_RXMODE_8022_LENCHECK	0x00000080
#define BGE_RXMODE_RX_PROMISC		0x00000100
#define BGE_RXMODE_RX_NO_CRC_CHECK	0x00000200
#define BGE_RXMODE_RX_KEEP_VLAN_DIAG	0x00000400
#define BGE_RXMODE_RX_IPV6_CSUM_ENABLE	0x01000000
d768 3
a770 3
#define BGE_RXSTAT_REMOTE_XOFFED	0x00000001
#define BGE_RXSTAT_RCVD_XOFF		0x00000002
#define BGE_RXSTAT_RCVD_XON		0x00000004
d773 11
a783 11
#define BGE_RXRULECTL_OFFSET		0x000000FF
#define BGE_RXRULECTL_CLASS		0x00001F00
#define BGE_RXRULECTL_HDRTYPE		0x0000E000
#define BGE_RXRULECTL_COMPARE_OP	0x00030000
#define BGE_RXRULECTL_MAP		0x01000000
#define BGE_RXRULECTL_DISCARD		0x02000000
#define BGE_RXRULECTL_MASK		0x04000000
#define BGE_RXRULECTL_ACTIVATE_PROC3	0x08000000
#define BGE_RXRULECTL_ACTIVATE_PROC2	0x10000000
#define BGE_RXRULECTL_ACTIVATE_PROC1	0x20000000
#define BGE_RXRULECTL_ANDWITHNEXT	0x40000000
d786 2
a787 2
#define BGE_RXRULEMASK_VALUE		0x0000FFFF
#define BGE_RXRULEMASK_MASKVAL		0xFFFF0000
d790 16
a805 16
#define BGE_SERDESCFG_RXR		0x00000007 /* phase interpolator */
#define BGE_SERDESCFG_RXG		0x00000018 /* rx gain setting */
#define BGE_SERDESCFG_RXEDGESEL		0x00000040 /* rising/falling egde */
#define BGE_SERDESCFG_TX_BIAS		0x00000380 /* TXDAC bias setting */
#define BGE_SERDESCFG_IBMAX		0x00000400 /* bias current +25% */
#define BGE_SERDESCFG_IBMIN		0x00000800 /* bias current -25% */
#define BGE_SERDESCFG_TXMODE		0x00001000
#define BGE_SERDESCFG_TXEDGESEL		0x00002000 /* rising/falling edge */
#define BGE_SERDESCFG_MODE		0x00004000 /* TXCP/TXCN disabled */
#define BGE_SERDESCFG_PLLTEST		0x00008000 /* PLL test mode */
#define BGE_SERDESCFG_CDET		0x00010000 /* comma detect enable */
#define BGE_SERDESCFG_TBILOOP		0x00020000 /* local loopback */
#define BGE_SERDESCFG_REMLOOP		0x00040000 /* remote loopback */
#define BGE_SERDESCFG_INVPHASE		0x00080000 /* Reverse 125MHz clock */
#define BGE_SERDESCFG_12REGCTL		0x00300000 /* 1.2v regulator ctl */
#define BGE_SERDESCFG_REGCTL		0x00C00000 /* regulator ctl (2.5v) */
d808 2
a809 2
#define BGE_SERDESSTS_RXSTAT		0x0000000F /* receive status bits */
#define BGE_SERDESSTS_CDET		0x00000010 /* comma code detected */
d812 4
a815 4
#define BGE_PHYCFG1_RGMII_INT		0x00000001
#define BGE_PHYCFG1_RGMII_EXT_RX_DEC	0x02000000
#define BGE_PHYCFG1_RGMII_SND_STAT_EN	0x04000000
#define BGE_PHYCFG1_TXC_DRV		0x20000000
d818 52
a869 52
#define BGE_PHYCFG2_INBAND_ENABLE	0x00000001
#define BGE_PHYCFG2_EMODE_MASK_MASK	0x000001c0
#define BGE_PHYCFG2_EMODE_MASK_AC131	0x000000c0
#define BGE_PHYCFG2_EMODE_MASK_50610	0x00000100
#define BGE_PHYCFG2_EMODE_MASK_RT8211	0x00000000
#define BGE_PHYCFG2_EMODE_MASK_RT8201	0x000001c0
#define BGE_PHYCFG2_EMODE_COMP_MASK	0x00000e00
#define BGE_PHYCFG2_EMODE_COMP_AC131	0x00000600
#define BGE_PHYCFG2_EMODE_COMP_50610	0x00000400
#define BGE_PHYCFG2_EMODE_COMP_RT8211	0x00000800
#define BGE_PHYCFG2_EMODE_COMP_RT8201	0x00000000
#define BGE_PHYCFG2_FMODE_MASK_MASK	0x00007000
#define BGE_PHYCFG2_FMODE_MASK_AC131	0x00006000
#define BGE_PHYCFG2_FMODE_MASK_50610	0x00004000
#define BGE_PHYCFG2_FMODE_MASK_RT8211	0x00000000
#define BGE_PHYCFG2_FMODE_MASK_RT8201	0x00007000
#define BGE_PHYCFG2_FMODE_COMP_MASK	0x00038000
#define BGE_PHYCFG2_FMODE_COMP_AC131	0x00030000
#define BGE_PHYCFG2_FMODE_COMP_50610	0x00008000
#define BGE_PHYCFG2_FMODE_COMP_RT8211	0x00038000
#define BGE_PHYCFG2_FMODE_COMP_RT8201	0x00000000
#define BGE_PHYCFG2_GMODE_MASK_MASK	0x001c0000
#define BGE_PHYCFG2_GMODE_MASK_AC131	0x001c0000
#define BGE_PHYCFG2_GMODE_MASK_50610	0x00100000
#define BGE_PHYCFG2_GMODE_MASK_RT8211	0x00000000
#define BGE_PHYCFG2_GMODE_MASK_RT8201	0x001c0000
#define BGE_PHYCFG2_GMODE_COMP_MASK	0x00e00000
#define BGE_PHYCFG2_GMODE_COMP_AC131	0x00e00000
#define BGE_PHYCFG2_GMODE_COMP_50610	0x00000000
#define BGE_PHYCFG2_GMODE_COMP_RT8211	0x00200000
#define BGE_PHYCFG2_GMODE_COMP_RT8201	0x00000000
#define BGE_PHYCFG2_ACT_MASK_MASK	0x03000000
#define BGE_PHYCFG2_ACT_MASK_AC131	0x03000000
#define BGE_PHYCFG2_ACT_MASK_50610	0x01000000
#define BGE_PHYCFG2_ACT_MASK_RT8211	0x03000000
#define BGE_PHYCFG2_ACT_MASK_RT8201	0x01000000
#define BGE_PHYCFG2_ACT_COMP_MASK	0x0c000000
#define BGE_PHYCFG2_ACT_COMP_AC131	0x00000000
#define BGE_PHYCFG2_ACT_COMP_50610	0x00000000
#define BGE_PHYCFG2_ACT_COMP_RT8211	0x00000000
#define BGE_PHYCFG2_ACT_COMP_RT8201	0x08000000
#define BGE_PHYCFG2_QUAL_MASK_MASK	0x30000000
#define BGE_PHYCFG2_QUAL_MASK_AC131	0x30000000
#define BGE_PHYCFG2_QUAL_MASK_50610	0x30000000
#define BGE_PHYCFG2_QUAL_MASK_RT8211	0x30000000
#define BGE_PHYCFG2_QUAL_MASK_RT8201	0x30000000
#define BGE_PHYCFG2_QUAL_COMP_MASK	0xc0000000
#define BGE_PHYCFG2_QUAL_COMP_AC131	0x00000000
#define BGE_PHYCFG2_QUAL_COMP_50610	0x00000000
#define BGE_PHYCFG2_QUAL_COMP_RT8211	0x00000000
#define BGE_PHYCFG2_QUAL_COMP_RT8201	0x00000000
#define BGE_PHYCFG2_50610_LED_MODES \
d880 1
a880 1
#define BGE_PHYCFG2_AC131_LED_MODES \
d891 1
a891 1
#define BGE_PHYCFG2_RTL8211C_LED_MODES \
d902 1
a902 1
#define BGE_PHYCFG2_RTL8201E_LED_MODES \
d915 7
a921 7
#define BGE_RGMII_MODE_TX_ENABLE	0x00000001
#define BGE_RGMII_MODE_TX_LOWPWR	0x00000002
#define BGE_RGMII_MODE_TX_RESET		0x00000004
#define BGE_RGMII_MODE_RX_INT_B		0x00000100
#define BGE_RGMII_MODE_RX_QUALITY	0x00000200
#define BGE_RGMII_MODE_RX_ACTIVITY	0x00000400
#define BGE_RGMII_MODE_RX_ENG_DET	0x00000800
d924 4
a927 4
#define BGE_SGDIGCFG_PAUSE_CAP		0x00000800
#define BGE_SGDIGCFG_ASYM_PAUSE		0x00001000
#define BGE_SGDIGCFG_SEND		0x40000000
#define BGE_SGDIGCFG_AUTO		0x80000000
d930 4
a933 4
#define BGE_SGDIGSTS_DONE		0x00000002
#define BGE_SGDIGSTS_IS_SERDES		0x00000100
#define BGE_SGDIGSTS_PAUSE_CAP		0x00080000
#define BGE_SGDIGSTS_ASYM_PAUSE		0x00100000
d936 11
a946 11
#define BGE_MICOMM_DATA			0x0000FFFF
#define BGE_MICOMM_REG			0x001F0000
#define BGE_MICOMM_PHY			0x03E00000
#define BGE_MICOMM_CMD			0x0C000000
#define BGE_MICOMM_READFAIL		0x10000000
#define BGE_MICOMM_BUSY			0x20000000

#define BGE_MIREG(x)	((x & 0x1F) << 16)
#define BGE_MIPHY(x)	((x & 0x1F) << 21)
#define BGE_MICMD_WRITE			0x04000000
#define BGE_MICMD_READ			0x08000000
d949 2
a950 2
#define BGE_MISTS_LINK			0x00000001
#define BGE_MISTS_10MBPS		0x00000002
d952 5
a956 5
#define BGE_MIMODE_SHORTPREAMBLE	0x00000002
#define BGE_MIMODE_AUTOPOLL		0x00000010
#define BGE_MIMODE_500KHZ_CONST		0x00008000
#define BGE_MIMODE_CLKCNT		0x001F0000
#define BGE_MIMODE_BASE			0x000C0000
d961 30
a990 30
#define BGE_SDI_MODE			0x0C00
#define BGE_SDI_STATUS			0x0C04
#define BGE_SDI_STATS_CTL		0x0C08
#define BGE_SDI_STATS_ENABLE_MASK	0x0C0C
#define BGE_SDI_STATS_INCREMENT_MASK	0x0C10
#define BGE_ISO_PKT_TX			0x0C20
#define BGE_LOCSTATS_COS0		0x0C80
#define BGE_LOCSTATS_COS1		0x0C84
#define BGE_LOCSTATS_COS2		0x0C88
#define BGE_LOCSTATS_COS3		0x0C8C
#define BGE_LOCSTATS_COS4		0x0C90
#define BGE_LOCSTATS_COS5		0x0C84
#define BGE_LOCSTATS_COS6		0x0C98
#define BGE_LOCSTATS_COS7		0x0C9C
#define BGE_LOCSTATS_COS8		0x0CA0
#define BGE_LOCSTATS_COS9		0x0CA4
#define BGE_LOCSTATS_COS10		0x0CA8
#define BGE_LOCSTATS_COS11		0x0CAC
#define BGE_LOCSTATS_COS12		0x0CB0
#define BGE_LOCSTATS_COS13		0x0CB4
#define BGE_LOCSTATS_COS14		0x0CB8
#define BGE_LOCSTATS_COS15		0x0CBC
#define BGE_LOCSTATS_DMA_RQ_FULL	0x0CC0
#define BGE_LOCSTATS_DMA_HIPRIO_RQ_FULL	0x0CC4
#define BGE_LOCSTATS_SDC_QUEUE_FULL	0x0CC8
#define BGE_LOCSTATS_NIC_SENDPROD_SET	0x0CCC
#define BGE_LOCSTATS_STATS_UPDATED	0x0CD0
#define BGE_LOCSTATS_IRQS		0x0CD4
#define BGE_LOCSTATS_AVOIDED_IRQS	0x0CD8
#define BGE_LOCSTATS_TX_THRESH_HIT	0x0CDC
d993 3
a995 3
#define BGE_SDIMODE_RESET		0x00000001
#define BGE_SDIMODE_ENABLE		0x00000002
#define BGE_SDIMODE_STATS_OFLOW_ATTN	0x00000004
d998 1
a998 1
#define BGE_SDISTAT_STATS_OFLOW_ATTN	0x00000004
d1001 5
a1005 5
#define BGE_SDISTATSCTL_ENABLE		0x00000001
#define BGE_SDISTATSCTL_FASTER		0x00000002
#define BGE_SDISTATSCTL_CLEAR		0x00000004
#define BGE_SDISTATSCTL_FORCEFLUSH	0x00000008
#define BGE_SDISTATSCTL_FORCEZERO	0x00000010
d1010 2
a1011 2
#define BGE_SDC_MODE			0x1000
#define BGE_SDC_STATUS			0x1004
d1014 4
a1017 4
#define BGE_SDCMODE_RESET		0x00000001
#define BGE_SDCMODE_ENABLE		0x00000002
#define BGE_SDCMODE_ATTN		0x00000004
#define BGE_SDCMODE_CDELAY		0x00000010
d1020 1
a1020 1
#define BGE_SDCSTAT_ATTN		0x00000004
d1025 19
a1043 19
#define BGE_SRS_MODE			0x1400
#define BGE_SRS_STATUS			0x1404
#define BGE_SRS_HWDIAG			0x1408
#define BGE_SRS_LOC_NIC_CONS0		0x1440
#define BGE_SRS_LOC_NIC_CONS1		0x1444
#define BGE_SRS_LOC_NIC_CONS2		0x1448
#define BGE_SRS_LOC_NIC_CONS3		0x144C
#define BGE_SRS_LOC_NIC_CONS4		0x1450
#define BGE_SRS_LOC_NIC_CONS5		0x1454
#define BGE_SRS_LOC_NIC_CONS6		0x1458
#define BGE_SRS_LOC_NIC_CONS7		0x145C
#define BGE_SRS_LOC_NIC_CONS8		0x1460
#define BGE_SRS_LOC_NIC_CONS9		0x1464
#define BGE_SRS_LOC_NIC_CONS10		0x1468
#define BGE_SRS_LOC_NIC_CONS11		0x146C
#define BGE_SRS_LOC_NIC_CONS12		0x1470
#define BGE_SRS_LOC_NIC_CONS13		0x1474
#define BGE_SRS_LOC_NIC_CONS14		0x1478
#define BGE_SRS_LOC_NIC_CONS15		0x147C
d1046 3
a1048 3
#define BGE_SRSMODE_RESET		0x00000001
#define BGE_SRSMODE_ENABLE		0x00000002
#define BGE_SRSMODE_ATTN		0x00000004
d1051 1
a1051 1
#define BGE_SRSSTAT_ERROR		0x00000004
d1054 4
a1057 4
#define BGE_SRSHWDIAG_STATE		0x0000000F
#define BGE_SRSHWDIAG_CURRINGNUM	0x000000F0
#define BGE_SRSHWDIAG_STAGEDRINGNUM	0x00000F00
#define BGE_SRSHWDIAG_RINGNUM_IN_MBX	0x0000F000
d1062 18
a1079 18
#define BGE_SBDI_MODE			0x1800
#define BGE_SBDI_STATUS			0x1804
#define BGE_SBDI_LOC_NIC_PROD0		0x1808
#define BGE_SBDI_LOC_NIC_PROD1		0x180C
#define BGE_SBDI_LOC_NIC_PROD2		0x1810
#define BGE_SBDI_LOC_NIC_PROD3		0x1814
#define BGE_SBDI_LOC_NIC_PROD4		0x1818
#define BGE_SBDI_LOC_NIC_PROD5		0x181C
#define BGE_SBDI_LOC_NIC_PROD6		0x1820
#define BGE_SBDI_LOC_NIC_PROD7		0x1824
#define BGE_SBDI_LOC_NIC_PROD8		0x1828
#define BGE_SBDI_LOC_NIC_PROD9		0x182C
#define BGE_SBDI_LOC_NIC_PROD10		0x1830
#define BGE_SBDI_LOC_NIC_PROD11		0x1834
#define BGE_SBDI_LOC_NIC_PROD12		0x1838
#define BGE_SBDI_LOC_NIC_PROD13		0x183C
#define BGE_SBDI_LOC_NIC_PROD14		0x1840
#define BGE_SBDI_LOC_NIC_PROD15		0x1844
d1082 3
a1084 3
#define BGE_SBDIMODE_RESET		0x00000001
#define BGE_SBDIMODE_ENABLE		0x00000002
#define BGE_SBDIMODE_ATTN		0x00000004
d1087 1
a1087 1
#define BGE_SBDISTAT_ERROR		0x00000004
d1092 2
a1093 2
#define BGE_SBDC_MODE			0x1C00
#define BGE_SBDC_STATUS			0x1C04
d1096 3
a1098 3
#define BGE_SBDCMODE_RESET		0x00000001
#define BGE_SBDCMODE_ENABLE		0x00000002
#define BGE_SBDCMODE_ATTN		0x00000004
d1101 1
a1101 1
#define BGE_SBDCSTAT_ATTN		0x00000004
d1106 79
a1184 79
#define BGE_RXLP_MODE			0x2000
#define BGE_RXLP_STATUS			0x2004
#define BGE_RXLP_SEL_LIST_LOCK		0x2008
#define BGE_RXLP_SEL_NON_EMPTY_BITS	0x200C
#define BGE_RXLP_CFG			0x2010
#define BGE_RXLP_STATS_CTL		0x2014
#define BGE_RXLP_STATS_ENABLE_MASK	0x2018
#define BGE_RXLP_STATS_INCREMENT_MASK	0x201C
#define BGE_RXLP_HEAD0			0x2100
#define BGE_RXLP_TAIL0			0x2104
#define BGE_RXLP_COUNT0			0x2108
#define BGE_RXLP_HEAD1			0x2110
#define BGE_RXLP_TAIL1			0x2114
#define BGE_RXLP_COUNT1			0x2118
#define BGE_RXLP_HEAD2			0x2120
#define BGE_RXLP_TAIL2			0x2124
#define BGE_RXLP_COUNT2			0x2128
#define BGE_RXLP_HEAD3			0x2130
#define BGE_RXLP_TAIL3			0x2134
#define BGE_RXLP_COUNT3			0x2138
#define BGE_RXLP_HEAD4			0x2140
#define BGE_RXLP_TAIL4			0x2144
#define BGE_RXLP_COUNT4			0x2148
#define BGE_RXLP_HEAD5			0x2150
#define BGE_RXLP_TAIL5			0x2154
#define BGE_RXLP_COUNT5			0x2158
#define BGE_RXLP_HEAD6			0x2160
#define BGE_RXLP_TAIL6			0x2164
#define BGE_RXLP_COUNT6			0x2168
#define BGE_RXLP_HEAD7			0x2170
#define BGE_RXLP_TAIL7			0x2174
#define BGE_RXLP_COUNT7			0x2178
#define BGE_RXLP_HEAD8			0x2180
#define BGE_RXLP_TAIL8			0x2184
#define BGE_RXLP_COUNT8			0x2188
#define BGE_RXLP_HEAD9			0x2190
#define BGE_RXLP_TAIL9			0x2194
#define BGE_RXLP_COUNT9			0x2198
#define BGE_RXLP_HEAD10			0x21A0
#define BGE_RXLP_TAIL10			0x21A4
#define BGE_RXLP_COUNT10		0x21A8
#define BGE_RXLP_HEAD11			0x21B0
#define BGE_RXLP_TAIL11			0x21B4
#define BGE_RXLP_COUNT11		0x21B8
#define BGE_RXLP_HEAD12			0x21C0
#define BGE_RXLP_TAIL12			0x21C4
#define BGE_RXLP_COUNT12		0x21C8
#define BGE_RXLP_HEAD13			0x21D0
#define BGE_RXLP_TAIL13			0x21D4
#define BGE_RXLP_COUNT13		0x21D8
#define BGE_RXLP_HEAD14			0x21E0
#define BGE_RXLP_TAIL14			0x21E4
#define BGE_RXLP_COUNT14		0x21E8
#define BGE_RXLP_HEAD15			0x21F0
#define BGE_RXLP_TAIL15			0x21F4
#define BGE_RXLP_COUNT15		0x21F8
#define BGE_RXLP_LOCSTAT_COS0		0x2200
#define BGE_RXLP_LOCSTAT_COS1		0x2204
#define BGE_RXLP_LOCSTAT_COS2		0x2208
#define BGE_RXLP_LOCSTAT_COS3		0x220C
#define BGE_RXLP_LOCSTAT_COS4		0x2210
#define BGE_RXLP_LOCSTAT_COS5		0x2214
#define BGE_RXLP_LOCSTAT_COS6		0x2218
#define BGE_RXLP_LOCSTAT_COS7		0x221C
#define BGE_RXLP_LOCSTAT_COS8		0x2220
#define BGE_RXLP_LOCSTAT_COS9		0x2224
#define BGE_RXLP_LOCSTAT_COS10		0x2228
#define BGE_RXLP_LOCSTAT_COS11		0x222C
#define BGE_RXLP_LOCSTAT_COS12		0x2230
#define BGE_RXLP_LOCSTAT_COS13		0x2234
#define BGE_RXLP_LOCSTAT_COS14		0x2238
#define BGE_RXLP_LOCSTAT_COS15		0x223C
#define BGE_RXLP_LOCSTAT_FILTDROP	0x2240
#define BGE_RXLP_LOCSTAT_DMA_WRQ_FULL	0x2244
#define BGE_RXLP_LOCSTAT_DMA_HPWRQ_FULL	0x2248
#define BGE_RXLP_LOCSTAT_OUT_OF_BDS	0x224C
#define BGE_RXLP_LOCSTAT_IFIN_DROPS	0x2250
#define BGE_RXLP_LOCSTAT_IFIN_ERRORS	0x2254
#define BGE_RXLP_LOCSTAT_RXTHRESH_HIT	0x2258
d1188 5
a1192 5
#define BGE_RXLPMODE_RESET		0x00000001
#define BGE_RXLPMODE_ENABLE		0x00000002
#define BGE_RXLPMODE_CLASS0_ATTN	0x00000004
#define BGE_RXLPMODE_MAPOUTRANGE_ATTN	0x00000008
#define BGE_RXLPMODE_STATSOFLOW_ATTN	0x00000010
d1195 3
a1197 3
#define BGE_RXLPSTAT_CLASS0_ATTN	0x00000004
#define BGE_RXLPSTAT_MAPOUTRANGE_ATTN	0x00000008
#define BGE_RXLPSTAT_STATSOFLOW_ATTN	0x00000010
d1202 34
a1235 34
#define BGE_RDBDI_MODE			0x2400
#define BGE_RDBDI_STATUS		0x2404
#define BGE_RX_JUMBO_RCB_HADDR_HI	0x2440
#define BGE_RX_JUMBO_RCB_HADDR_LO	0x2444
#define BGE_RX_JUMBO_RCB_MAXLEN_FLAGS	0x2448
#define BGE_RX_JUMBO_RCB_NICADDR	0x244C
#define BGE_RX_STD_RCB_HADDR_HI		0x2450
#define BGE_RX_STD_RCB_HADDR_LO		0x2454
#define BGE_RX_STD_RCB_MAXLEN_FLAGS	0x2458
#define BGE_RX_STD_RCB_NICADDR		0x245C
#define BGE_RX_MINI_RCB_HADDR_HI	0x2460
#define BGE_RX_MINI_RCB_HADDR_LO	0x2464
#define BGE_RX_MINI_RCB_MAXLEN_FLAGS	0x2468
#define BGE_RX_MINI_RCB_NICADDR		0x246C
#define BGE_RDBDI_JUMBO_RX_CONS		0x2470
#define BGE_RDBDI_STD_RX_CONS		0x2474
#define BGE_RDBDI_MINI_RX_CONS		0x2478
#define BGE_RDBDI_RETURN_PROD0		0x2480
#define BGE_RDBDI_RETURN_PROD1		0x2484
#define BGE_RDBDI_RETURN_PROD2		0x2488
#define BGE_RDBDI_RETURN_PROD3		0x248C
#define BGE_RDBDI_RETURN_PROD4		0x2490
#define BGE_RDBDI_RETURN_PROD5		0x2494
#define BGE_RDBDI_RETURN_PROD6		0x2498
#define BGE_RDBDI_RETURN_PROD7		0x249C
#define BGE_RDBDI_RETURN_PROD8		0x24A0
#define BGE_RDBDI_RETURN_PROD9		0x24A4
#define BGE_RDBDI_RETURN_PROD10		0x24A8
#define BGE_RDBDI_RETURN_PROD11		0x24AC
#define BGE_RDBDI_RETURN_PROD12		0x24B0
#define BGE_RDBDI_RETURN_PROD13		0x24B4
#define BGE_RDBDI_RETURN_PROD14		0x24B8
#define BGE_RDBDI_RETURN_PROD15		0x24BC
#define BGE_RDBDI_HWDIAG		0x24C0
d1239 5
a1243 5
#define BGE_RDBDIMODE_RESET		0x00000001
#define BGE_RDBDIMODE_ENABLE		0x00000002
#define BGE_RDBDIMODE_JUMBO_ATTN	0x00000004
#define BGE_RDBDIMODE_GIANT_ATTN	0x00000008
#define BGE_RDBDIMODE_BADRINGSZ_ATTN	0x00000010
d1246 3
a1248 3
#define BGE_RDBDISTAT_JUMBO_ATTN	0x00000004
#define BGE_RDBDISTAT_GIANT_ATTN	0x00000008
#define BGE_RDBDISTAT_BADRINGSZ_ATTN	0x00000010
d1254 1
a1254 1
#define BGE_RDC_MODE			0x2800
d1257 3
a1259 3
#define BGE_RDCMODE_RESET		0x00000001
#define BGE_RDCMODE_ENABLE		0x00000002
#define BGE_RDCMODE_ATTN		0x00000004
d1264 8
a1271 8
#define BGE_RBDI_MODE			0x2C00
#define BGE_RBDI_STATUS			0x2C04
#define BGE_RBDI_NIC_JUMBO_BD_PROD	0x2C08
#define BGE_RBDI_NIC_STD_BD_PROD	0x2C0C
#define BGE_RBDI_NIC_MINI_BD_PROD	0x2C10
#define BGE_RBDI_MINI_REPL_THRESH	0x2C14
#define BGE_RBDI_STD_REPL_THRESH	0x2C18
#define BGE_RBDI_JUMBO_REPL_THRESH	0x2C1C
d1273 2
a1274 2
#define BGE_STD_REPL_LWM		0x2D00
#define BGE_JUMBO_REPL_LWM		0x2D04
d1277 3
a1279 3
#define BGE_RBDIMODE_RESET		0x00000001
#define BGE_RBDIMODE_ENABLE		0x00000002
#define BGE_RBDIMODE_ATTN		0x00000004
d1282 1
a1282 1
#define BGE_RBDISTAT_ATTN		0x00000004
d1287 5
a1291 5
#define BGE_RBDC_MODE			0x3000
#define BGE_RBDC_STATUS			0x3004
#define BGE_RBDC_JUMBO_BD_PROD		0x3008
#define BGE_RBDC_STD_BD_PROD		0x300C
#define BGE_RBDC_MINI_BD_PROD		0x3010
d1294 3
a1296 3
#define BGE_RBDCMODE_RESET		0x00000001
#define BGE_RBDCMODE_ENABLE		0x00000002
#define BGE_RBDCMODE_ATTN		0x00000004
d1299 1
a1299 1
#define BGE_RBDCSTAT_ERROR		0x00000004
d1304 2
a1305 2
#define BGE_RXLS_MODE			0x3400
#define BGE_RXLS_STATUS			0x3404
d1308 3
a1310 3
#define BGE_RXLSMODE_RESET		0x00000001
#define BGE_RXLSMODE_ENABLE		0x00000002
#define BGE_RXLSMODE_ATTN		0x00000004
d1313 1
a1313 1
#define BGE_RXLSSTAT_ERROR		0x00000004
d1315 10
a1324 10
#define BGE_CPMU_CTRL			0x3600
#define BGE_CPMU_LSPD_10MB_CLK		0x3604
#define BGE_CPMU_LSPD_1000MB_CLK	0x360C
#define BGE_CPMU_LNK_AWARE_PWRMD	0x3610
#define BGE_CPMU_HST_ACC		0x361C
#define BGE_CPMU_CLCK_ORIDE		0x3624
#define BGE_CPMU_CLCK_STAT		0x3630
#define BGE_CPMU_MUTEX_REQ		0x365C
#define BGE_CPMU_MUTEX_GNT		0x3660
#define BGE_CPMU_PHY_STRAP		0x3664
d1327 4
a1330 4
#define BGE_CPMU_CTRL_LINK_IDLE_MODE	0x00000200
#define BGE_CPMU_CTRL_LINK_AWARE_MODE	0x00000400
#define BGE_CPMU_CTRL_LINK_SPEED_MODE	0x00004000
#define BGE_CPMU_CTRL_GPHY_10MB_RXONLY	0x00010000
d1333 2
a1334 2
#define BGE_CPMU_LSPD_10MB_MACCLK_MASK	0x001F0000
#define BGE_CPMU_LSPD_10MB_MACCLK_6_25	0x00130000
d1337 3
a1339 3
#define BGE_CPMU_LSPD_1000MB_MACCLK_62_5	0x00000000
#define BGE_CPMU_LSPD_1000MB_MACCLK_12_5	0x00110000
#define BGE_CPMU_LSPD_1000MB_MACCLK_MASK	0x001F0000
d1342 2
a1343 2
#define BGE_CPMU_LNK_AWARE_MACCLK_MASK	0x001F0000
#define BGE_CPMU_LNK_AWARE_MACCLK_6_25	0x00130000
d1345 2
a1346 2
#define BGE_CPMU_HST_ACC_MACCLK_MASK	0x001F0000
#define BGE_CPMU_HST_ACC_MACCLK_6_25	0x00130000
d1349 1
a1349 1
#define CPMU_CLCK_ORIDE_MAC_ORIDE_EN	0x80000000
d1352 4
a1355 4
#define BGE_CPMU_CLCK_STAT_MAC_CLCK_MASK	0x001F0000
#define BGE_CPMU_CLCK_STAT_MAC_CLCK_62_5	0x00000000
#define BGE_CPMU_CLCK_STAT_MAC_CLCK_12_5	0x00110000
#define BGE_CPMU_CLCK_STAT_MAC_CLCK_6_25	0x00130000
d1358 2
a1359 2
#define BGE_CPMU_MUTEX_REQ_DRIVER	0x00001000
#define BGE_CPMU_MUTEX_GNT_DRIVER	0x00001000
d1362 1
a1362 1
#define BGE_CPMU_PHY_STRAP_IS_SERDES	0x00000020
d1367 2
a1368 2
#define BGE_MBCF_MODE			0x3800
#define BGE_MBCF_STATUS			0x3804
d1371 3
a1373 3
#define BGE_MBCFMODE_RESET		0x00000001
#define BGE_MBCFMODE_ENABLE		0x00000002
#define BGE_MBCFMODE_ATTN		0x00000004
d1376 1
a1376 1
#define BGE_MBCFSTAT_ERROR		0x00000004
d1381 53
a1433 53
#define BGE_HCC_MODE			0x3C00
#define BGE_HCC_STATUS			0x3C04
#define BGE_HCC_RX_COAL_TICKS		0x3C08
#define BGE_HCC_TX_COAL_TICKS		0x3C0C
#define BGE_HCC_RX_MAX_COAL_BDS		0x3C10
#define BGE_HCC_TX_MAX_COAL_BDS		0x3C14
#define BGE_HCC_RX_COAL_TICKS_INT	0x3C18 /* ticks during interrupt */
#define BGE_HCC_TX_COAL_TICKS_INT	0x3C1C /* ticks during interrupt */
#define BGE_HCC_RX_MAX_COAL_BDS_INT	0x3C20 /* BDs during interrupt */
#define BGE_HCC_TX_MAX_COAL_BDS_INT	0x3C24 /* BDs during interrupt */
#define BGE_HCC_STATS_TICKS		0x3C28
#define BGE_HCC_STATS_ADDR_HI		0x3C30
#define BGE_HCC_STATS_ADDR_LO		0x3C34
#define BGE_HCC_STATUSBLK_ADDR_HI	0x3C38
#define BGE_HCC_STATUSBLK_ADDR_LO	0x3C3C
#define BGE_HCC_STATS_BASEADDR		0x3C40 /* address in NIC memory */
#define BGE_HCC_STATUSBLK_BASEADDR	0x3C44 /* address in NIC memory */
#define BGE_FLOW_ATTN			0x3C48
#define BGE_HCC_JUMBO_BD_CONS		0x3C50
#define BGE_HCC_STD_BD_CONS		0x3C54
#define BGE_HCC_MINI_BD_CONS		0x3C58
#define BGE_HCC_RX_RETURN_PROD0		0x3C80
#define BGE_HCC_RX_RETURN_PROD1		0x3C84
#define BGE_HCC_RX_RETURN_PROD2		0x3C88
#define BGE_HCC_RX_RETURN_PROD3		0x3C8C
#define BGE_HCC_RX_RETURN_PROD4		0x3C90
#define BGE_HCC_RX_RETURN_PROD5		0x3C94
#define BGE_HCC_RX_RETURN_PROD6		0x3C98
#define BGE_HCC_RX_RETURN_PROD7		0x3C9C
#define BGE_HCC_RX_RETURN_PROD8		0x3CA0
#define BGE_HCC_RX_RETURN_PROD9		0x3CA4
#define BGE_HCC_RX_RETURN_PROD10	0x3CA8
#define BGE_HCC_RX_RETURN_PROD11	0x3CAC
#define BGE_HCC_RX_RETURN_PROD12	0x3CB0
#define BGE_HCC_RX_RETURN_PROD13	0x3CB4
#define BGE_HCC_RX_RETURN_PROD14	0x3CB8
#define BGE_HCC_RX_RETURN_PROD15	0x3CBC
#define BGE_HCC_TX_BD_CONS0		0x3CC0
#define BGE_HCC_TX_BD_CONS1		0x3CC4
#define BGE_HCC_TX_BD_CONS2		0x3CC8
#define BGE_HCC_TX_BD_CONS3		0x3CCC
#define BGE_HCC_TX_BD_CONS4		0x3CD0
#define BGE_HCC_TX_BD_CONS5		0x3CD4
#define BGE_HCC_TX_BD_CONS6		0x3CD8
#define BGE_HCC_TX_BD_CONS7		0x3CDC
#define BGE_HCC_TX_BD_CONS8		0x3CE0
#define BGE_HCC_TX_BD_CONS9		0x3CE4
#define BGE_HCC_TX_BD_CONS10		0x3CE8
#define BGE_HCC_TX_BD_CONS11		0x3CEC
#define BGE_HCC_TX_BD_CONS12		0x3CF0
#define BGE_HCC_TX_BD_CONS13		0x3CF4
#define BGE_HCC_TX_BD_CONS14		0x3CF8
#define BGE_HCC_TX_BD_CONS15		0x3CFC
d1437 10
a1446 10
#define BGE_HCCMODE_RESET		0x00000001
#define BGE_HCCMODE_ENABLE		0x00000002
#define BGE_HCCMODE_ATTN		0x00000004
#define BGE_HCCMODE_COAL_NOW		0x00000008
#define BGE_HCCMODE_MSI_BITS		0x00000070
#define BGE_HCCMODE_STATBLK_SIZE	0x00000180

#define BGE_STATBLKSZ_FULL		0x00000000
#define BGE_STATBLKSZ_64BYTE		0x00000080
#define BGE_STATBLKSZ_32BYTE		0x00000100
d1449 1
a1449 1
#define BGE_HCCSTAT_ERROR		0x00000004
d1452 16
a1467 16
#define BGE_FLOWATTN_MB_LOWAT		0x00000040
#define BGE_FLOWATTN_MEMARB		0x00000080
#define BGE_FLOWATTN_HOSTCOAL		0x00008000
#define BGE_FLOWATTN_DMADONE_DISCARD	0x00010000
#define BGE_FLOWATTN_RCB_INVAL		0x00020000
#define BGE_FLOWATTN_RXDATA_CORRUPT	0x00040000
#define BGE_FLOWATTN_RDBDI		0x00080000
#define BGE_FLOWATTN_RXLS		0x00100000
#define BGE_FLOWATTN_RXLP		0x00200000
#define BGE_FLOWATTN_RBDC		0x00400000
#define BGE_FLOWATTN_RBDI		0x00800000
#define BGE_FLOWATTN_SDC		0x08000000
#define BGE_FLOWATTN_SDI		0x10000000
#define BGE_FLOWATTN_SRS		0x20000000
#define BGE_FLOWATTN_SBDC		0x40000000
#define BGE_FLOWATTN_SBDI		0x80000000
d1472 4
a1475 4
#define BGE_MARB_MODE			0x4000
#define BGE_MARB_STATUS			0x4004
#define BGE_MARB_TRAPADDR_HI		0x4008
#define BGE_MARB_TRAPADDR_LO		0x400C
d1478 26
a1503 26
#define BGE_MARBMODE_RESET		0x00000001
#define BGE_MARBMODE_ENABLE		0x00000002
#define BGE_MARBMODE_TX_ADDR_TRAP	0x00000004
#define BGE_MARBMODE_RX_ADDR_TRAP	0x00000008
#define BGE_MARBMODE_DMAW1_TRAP		0x00000010
#define BGE_MARBMODE_DMAR1_TRAP		0x00000020
#define BGE_MARBMODE_RXRISC_TRAP	0x00000040
#define BGE_MARBMODE_TXRISC_TRAP	0x00000080
#define BGE_MARBMODE_PCI_TRAP		0x00000100
#define BGE_MARBMODE_DMAR2_TRAP		0x00000200
#define BGE_MARBMODE_RXQ_TRAP		0x00000400
#define BGE_MARBMODE_RXDI1_TRAP		0x00000800
#define BGE_MARBMODE_RXDI2_TRAP		0x00001000
#define BGE_MARBMODE_DC_GRPMEM_TRAP	0x00002000
#define BGE_MARBMODE_HCOAL_TRAP		0x00004000
#define BGE_MARBMODE_MBUF_TRAP		0x00008000
#define BGE_MARBMODE_TXDI_TRAP		0x00010000
#define BGE_MARBMODE_SDC_DMAC_TRAP	0x00020000
#define BGE_MARBMODE_TXBD_TRAP		0x00040000
#define BGE_MARBMODE_BUFFMAN_TRAP	0x00080000
#define BGE_MARBMODE_DMAW2_TRAP		0x00100000
#define BGE_MARBMODE_XTSSRAM_ROFLO_TRAP	0x00200000
#define BGE_MARBMODE_XTSSRAM_RUFLO_TRAP 0x00400000
#define BGE_MARBMODE_XTSSRAM_WOFLO_TRAP	0x00800000
#define BGE_MARBMODE_XTSSRAM_WUFLO_TRAP	0x01000000
#define BGE_MARBMODE_XTSSRAM_PERR_TRAP	0x02000000
d1506 24
a1529 24
#define BGE_MARBSTAT_TX_ADDR_TRAP	0x00000004
#define BGE_MARBSTAT_RX_ADDR_TRAP	0x00000008
#define BGE_MARBSTAT_DMAW1_TRAP		0x00000010
#define BGE_MARBSTAT_DMAR1_TRAP		0x00000020
#define BGE_MARBSTAT_RXRISC_TRAP	0x00000040
#define BGE_MARBSTAT_TXRISC_TRAP	0x00000080
#define BGE_MARBSTAT_PCI_TRAP		0x00000100
#define BGE_MARBSTAT_DMAR2_TRAP		0x00000200
#define BGE_MARBSTAT_RXQ_TRAP		0x00000400
#define BGE_MARBSTAT_RXDI1_TRAP		0x00000800
#define BGE_MARBSTAT_RXDI2_TRAP		0x00001000
#define BGE_MARBSTAT_DC_GRPMEM_TRAP	0x00002000
#define BGE_MARBSTAT_HCOAL_TRAP		0x00004000
#define BGE_MARBSTAT_MBUF_TRAP		0x00008000
#define BGE_MARBSTAT_TXDI_TRAP		0x00010000
#define BGE_MARBSTAT_SDC_DMAC_TRAP	0x00020000
#define BGE_MARBSTAT_TXBD_TRAP		0x00040000
#define BGE_MARBSTAT_BUFFMAN_TRAP	0x00080000
#define BGE_MARBSTAT_DMAW2_TRAP		0x00100000
#define BGE_MARBSTAT_XTSSRAM_ROFLO_TRAP	0x00200000
#define BGE_MARBSTAT_XTSSRAM_RUFLO_TRAP 0x00400000
#define BGE_MARBSTAT_XTSSRAM_WOFLO_TRAP	0x00800000
#define BGE_MARBSTAT_XTSSRAM_WUFLO_TRAP	0x01000000
#define BGE_MARBSTAT_XTSSRAM_PERR_TRAP	0x02000000
d1534 22
a1555 22
#define BGE_BMAN_MODE			0x4400
#define BGE_BMAN_STATUS			0x4404
#define BGE_BMAN_MBUFPOOL_BASEADDR	0x4408
#define BGE_BMAN_MBUFPOOL_LEN		0x440C
#define BGE_BMAN_MBUFPOOL_READDMA_LOWAT	0x4410
#define BGE_BMAN_MBUFPOOL_MACRX_LOWAT	0x4414
#define BGE_BMAN_MBUFPOOL_HIWAT		0x4418
#define BGE_BMAN_RXCPU_MBALLOC_REQ	0x441C
#define BGE_BMAN_RXCPU_MBALLOC_RESP	0x4420
#define BGE_BMAN_TXCPU_MBALLOC_REQ	0x4424
#define BGE_BMAN_TXCPU_MBALLOC_RESP	0x4428
#define BGE_BMAN_DMA_DESCPOOL_BASEADDR	0x442C
#define BGE_BMAN_DMA_DESCPOOL_LEN	0x4430
#define BGE_BMAN_DMA_DESCPOOL_LOWAT	0x4434
#define BGE_BMAN_DMA_DESCPOOL_HIWAT	0x4438
#define BGE_BMAN_RXCPU_DMAALLOC_REQ	0x443C
#define BGE_BMAN_RXCPU_DMAALLOC_RESP	0x4440
#define BGE_BMAN_TXCPU_DMAALLOC_REQ	0x4444
#define BGE_BMAN_TXCPU_DMALLLOC_RESP	0x4448
#define BGE_BMAN_HWDIAG_1		0x444C
#define BGE_BMAN_HWDIAG_2		0x4450
#define BGE_BMAN_HWDIAG_3		0x4454
d1558 6
a1563 6
#define BGE_BMANMODE_RESET		0x00000001
#define BGE_BMANMODE_ENABLE		0x00000002
#define BGE_BMANMODE_ATTN		0x00000004
#define BGE_BMANMODE_TESTMODE		0x00000008
#define BGE_BMANMODE_LOMBUF_ATTN	0x00000010
#define BGE_BMANMODE_NO_TX_UNDERRUN	0x80000000
d1566 2
a1567 2
#define BGE_BMANSTAT_ERRO		0x00000004
#define BGE_BMANSTAT_LOWMBUF_ERROR	0x00000010
d1573 4
a1576 4
#define BGE_RDMA_MODE			0x4800
#define BGE_RDMA_STATUS			0x4804
#define BGE_RDMA_RSRVCTRL		0x4900
#define BGE_RDMA_LSO_CRPTEN_CTRL	0x4910
d1579 20
a1598 20
#define BGE_RDMAMODE_RESET		0x00000001
#define BGE_RDMAMODE_ENABLE		0x00000002
#define BGE_RDMAMODE_PCI_TGT_ABRT_ATTN	0x00000004
#define BGE_RDMAMODE_PCI_MSTR_ABRT_ATTN	0x00000008
#define BGE_RDMAMODE_PCI_PERR_ATTN	0x00000010
#define BGE_RDMAMODE_PCI_ADDROFLOW_ATTN	0x00000020
#define BGE_RDMAMODE_PCI_FIFOOFLOW_ATTN	0x00000040
#define BGE_RDMAMODE_PCI_FIFOUFLOW_ATTN	0x00000080
#define BGE_RDMAMODE_PCI_FIFOOREAD_ATTN	0x00000100
#define BGE_RDMAMODE_LOCWRITE_TOOBIG	0x00000200
#define BGE_RDMAMODE_ALL_ATTNS		0x000003FC
#define BGE_RDMAMODE_BD_SBD_CRPT_ATTN	0x00000800
#define BGE_RDMAMODE_MBUF_RBD_CRPT_ATTN	0x00001000
#define BGE_RDMAMODE_MBUF_SBD_CRPT_ATTN	0x00002000
#define BGE_RDMAMODE_FIFO_SIZE_128	0x00020000
#define BGE_RDMAMODE_FIFO_LONG_BURST	0x00030000
#define BGE_RDMAMODE_MULT_DMA_RD_DIS	0x01000000
#define BGE_RDMAMODE_TSO4_ENABLE	0x08000000
#define BGE_RDMAMODE_TSO6_ENABLE	0x10000000
#define BGE_RDMAMODE_H2BNC_VLAN_DET	0x20000000
d1601 8
a1608 8
#define BGE_RDMASTAT_PCI_TGT_ABRT_ATTN	0x00000004
#define BGE_RDMASTAT_PCI_MSTR_ABRT_ATTN	0x00000008
#define BGE_RDMASTAT_PCI_PERR_ATTN	0x00000010
#define BGE_RDMASTAT_PCI_ADDROFLOW_ATTN	0x00000020
#define BGE_RDMASTAT_PCI_FIFOOFLOW_ATTN	0x00000040
#define BGE_RDMASTAT_PCI_FIFOUFLOW_ATTN	0x00000080
#define BGE_RDMASTAT_PCI_FIFOOREAD_ATTN	0x00000100
#define BGE_RDMASTAT_LOCWRITE_TOOBIG	0x00000200
d1611 11
a1621 11
#define BGE_RDMA_RSRVCTRL_FIFO_OFLW_FIX	0x00000004
#define BGE_RDMA_RSRVCTRL_FIFO_LWM_1_5K	0x00000C00
#define BGE_RDMA_RSRVCTRL_FIFO_HWM_1_5K	0x000C0000
#define BGE_RDMA_RSRVCTRL_TXMRGN_320B	0x28000000
#define BGE_RDMA_RSRVCTRL_FIFO_LWM_MASK	0x00000FF0
#define BGE_RDMA_RSRVCTRL_FIFO_HWM_MASK	0x000FF000
#define BGE_RDMA_RSRVCTRL_TXMRGN_MASK	0xFFE00000

#define BGE_RDMA_LSO_CRPTEN_CTRL_BLEN_BD_512	0x00020000
#define BGE_RDMA_LSO_CRPTEN_CTRL_BLEN_BD_4K	0x00030000
#define BGE_RDMA_LSO_CRPTEN_CTRL_BLEN_LSO_4K	0x000C0000
d1626 2
a1627 2
#define BGE_WDMA_MODE			0x4C00
#define BGE_WDMA_STATUS			0x4C04
d1630 14
a1643 14
#define BGE_WDMAMODE_RESET		0x00000001
#define BGE_WDMAMODE_ENABLE		0x00000002
#define BGE_WDMAMODE_PCI_TGT_ABRT_ATTN	0x00000004
#define BGE_WDMAMODE_PCI_MSTR_ABRT_ATTN	0x00000008
#define BGE_WDMAMODE_PCI_PERR_ATTN	0x00000010
#define BGE_WDMAMODE_PCI_ADDROFLOW_ATTN	0x00000020
#define BGE_WDMAMODE_PCI_FIFOOFLOW_ATTN	0x00000040
#define BGE_WDMAMODE_PCI_FIFOUFLOW_ATTN	0x00000080
#define BGE_WDMAMODE_PCI_FIFOOREAD_ATTN	0x00000100
#define BGE_WDMAMODE_LOCREAD_TOOBIG	0x00000200
#define BGE_WDMAMODE_ALL_ATTNS		0x000003FC
#define BGE_WDMAMODE_RX_ACCEL		0x00000400
#define BGE_WDMAMODE_STATUS_TAG_FIX	0x20000000
#define BGE_WDMAMODE_BURST_ALL_DATA	0xc0000000
d1646 8
a1653 8
#define BGE_WDMASTAT_PCI_TGT_ABRT_ATTN	0x00000004
#define BGE_WDMASTAT_PCI_MSTR_ABRT_ATTN	0x00000008
#define BGE_WDMASTAT_PCI_PERR_ATTN	0x00000010
#define BGE_WDMASTAT_PCI_ADDROFLOW_ATTN	0x00000020
#define BGE_WDMASTAT_PCI_FIFOOFLOW_ATTN	0x00000040
#define BGE_WDMASTAT_PCI_FIFOUFLOW_ATTN	0x00000080
#define BGE_WDMASTAT_PCI_FIFOOREAD_ATTN	0x00000100
#define BGE_WDMASTAT_LOCREAD_TOOBIG	0x00000200
d1659 3
a1661 3
#define BGE_RXCPU_MODE			0x5000
#define BGE_RXCPU_STATUS		0x5004
#define BGE_RXCPU_PC			0x501C
d1664 14
a1677 14
#define BGE_RXCPUMODE_RESET		0x00000001
#define BGE_RXCPUMODE_SINGLESTEP	0x00000002
#define BGE_RXCPUMODE_P0_DATAHLT_ENB	0x00000004
#define BGE_RXCPUMODE_P0_INSTRHLT_ENB	0x00000008
#define BGE_RXCPUMODE_WR_POSTBUF_ENB	0x00000010
#define BGE_RXCPUMODE_DATACACHE_ENB	0x00000020
#define BGE_RXCPUMODE_ROMFAIL		0x00000040
#define BGE_RXCPUMODE_WATCHDOG_ENB	0x00000080
#define BGE_RXCPUMODE_INSTRCACHE_PRF	0x00000100
#define BGE_RXCPUMODE_INSTRCACHE_FLUSH	0x00000200
#define BGE_RXCPUMODE_HALTCPU		0x00000400
#define BGE_RXCPUMODE_INVDATAHLT_ENB	0x00000800
#define BGE_RXCPUMODE_MADDRTRAPHLT_ENB	0x00001000
#define BGE_RXCPUMODE_RADDRTRAPHLT_ENB	0x00002000
d1680 17
a1696 17
#define BGE_RXCPUSTAT_HW_BREAKPOINT	0x00000001
#define BGE_RXCPUSTAT_HLTINSTR_EXECUTED	0x00000002
#define BGE_RXCPUSTAT_INVALID_INSTR	0x00000004
#define BGE_RXCPUSTAT_P0_DATAREF	0x00000008
#define BGE_RXCPUSTAT_P0_INSTRREF	0x00000010
#define BGE_RXCPUSTAT_INVALID_DATAACC	0x00000020
#define BGE_RXCPUSTAT_INVALID_INSTRFTCH	0x00000040
#define BGE_RXCPUSTAT_BAD_MEMALIGN	0x00000080
#define BGE_RXCPUSTAT_MADDR_TRAP	0x00000100
#define BGE_RXCPUSTAT_REGADDR_TRAP	0x00000200
#define BGE_RXCPUSTAT_DATAACC_STALL	0x00001000
#define BGE_RXCPUSTAT_INSTRFETCH_STALL	0x00002000
#define BGE_RXCPUSTAT_MA_WR_FIFOOFLOW	0x08000000
#define BGE_RXCPUSTAT_MA_RD_FIFOOFLOW	0x10000000
#define BGE_RXCPUSTAT_MA_DATAMASK_OFLOW	0x20000000
#define BGE_RXCPUSTAT_MA_REQ_FIFOOFLOW	0x40000000
#define BGE_RXCPUSTAT_BLOCKING_READ	0x80000000
d1702 2
a1703 2
#define BGE_VCPU_STATUS			0x5100
#define BGE_VCPU_EXT_CTRL		0x6890
d1705 2
a1706 2
#define BGE_VCPU_STATUS_INIT_DONE	0x04000000
#define BGE_VCPU_STATUS_DRV_RESET 	0x08000000
d1708 2
a1709 2
#define BGE_VCPU_EXT_CTRL_HALT_CPU	0x00400000
#define BGE_VCPU_EXT_CTRL_DISABLE_WOL	0x20000000
d1715 3
a1717 3
#define BGE_TXCPU_MODE			0x5400
#define BGE_TXCPU_STATUS		0x5404
#define BGE_TXCPU_PC			0x541C
d1720 13
a1732 13
#define BGE_TXCPUMODE_RESET		0x00000001
#define BGE_TXCPUMODE_SINGLESTEP	0x00000002
#define BGE_TXCPUMODE_P0_DATAHLT_ENB	0x00000004
#define BGE_TXCPUMODE_P0_INSTRHLT_ENB	0x00000008
#define BGE_TXCPUMODE_WR_POSTBUF_ENB	0x00000010
#define BGE_TXCPUMODE_DATACACHE_ENB	0x00000020
#define BGE_TXCPUMODE_ROMFAIL		0x00000040
#define BGE_TXCPUMODE_WATCHDOG_ENB	0x00000080
#define BGE_TXCPUMODE_INSTRCACHE_PRF	0x00000100
#define BGE_TXCPUMODE_INSTRCACHE_FLUSH	0x00000200
#define BGE_TXCPUMODE_HALTCPU		0x00000400
#define BGE_TXCPUMODE_INVDATAHLT_ENB	0x00000800
#define BGE_TXCPUMODE_MADDRTRAPHLT_ENB	0x00001000
d1735 17
a1751 17
#define BGE_TXCPUSTAT_HW_BREAKPOINT	0x00000001
#define BGE_TXCPUSTAT_HLTINSTR_EXECUTED	0x00000002
#define BGE_TXCPUSTAT_INVALID_INSTR	0x00000004
#define BGE_TXCPUSTAT_P0_DATAREF	0x00000008
#define BGE_TXCPUSTAT_P0_INSTRREF	0x00000010
#define BGE_TXCPUSTAT_INVALID_DATAACC	0x00000020
#define BGE_TXCPUSTAT_INVALID_INSTRFTCH	0x00000040
#define BGE_TXCPUSTAT_BAD_MEMALIGN	0x00000080
#define BGE_TXCPUSTAT_MADDR_TRAP	0x00000100
#define BGE_TXCPUSTAT_REGADDR_TRAP	0x00000200
#define BGE_TXCPUSTAT_DATAACC_STALL	0x00001000
#define BGE_TXCPUSTAT_INSTRFETCH_STALL	0x00002000
#define BGE_TXCPUSTAT_MA_WR_FIFOOFLOW	0x08000000
#define BGE_TXCPUSTAT_MA_RD_FIFOOFLOW	0x10000000
#define BGE_TXCPUSTAT_MA_DATAMASK_OFLOW	0x20000000
#define BGE_TXCPUSTAT_MA_REQ_FIFOOFLOW	0x40000000
#define BGE_TXCPUSTAT_BLOCKING_READ	0x80000000
d1757 128
a1884 128
#define BGE_LPMBX_IRQ0_HI		0x5800
#define BGE_LPMBX_IRQ0_LO		0x5804
#define BGE_LPMBX_IRQ1_HI		0x5808
#define BGE_LPMBX_IRQ1_LO		0x580C
#define BGE_LPMBX_IRQ2_HI		0x5810
#define BGE_LPMBX_IRQ2_LO		0x5814
#define BGE_LPMBX_IRQ3_HI		0x5818
#define BGE_LPMBX_IRQ3_LO		0x581C
#define BGE_LPMBX_GEN0_HI		0x5820
#define BGE_LPMBX_GEN0_LO		0x5824
#define BGE_LPMBX_GEN1_HI		0x5828
#define BGE_LPMBX_GEN1_LO		0x582C
#define BGE_LPMBX_GEN2_HI		0x5830
#define BGE_LPMBX_GEN2_LO		0x5834
#define BGE_LPMBX_GEN3_HI		0x5828
#define BGE_LPMBX_GEN3_LO		0x582C
#define BGE_LPMBX_GEN4_HI		0x5840
#define BGE_LPMBX_GEN4_LO		0x5844
#define BGE_LPMBX_GEN5_HI		0x5848
#define BGE_LPMBX_GEN5_LO		0x584C
#define BGE_LPMBX_GEN6_HI		0x5850
#define BGE_LPMBX_GEN6_LO		0x5854
#define BGE_LPMBX_GEN7_HI		0x5858
#define BGE_LPMBX_GEN7_LO		0x585C
#define BGE_LPMBX_RELOAD_STATS_HI	0x5860
#define BGE_LPMBX_RELOAD_STATS_LO	0x5864
#define BGE_LPMBX_RX_STD_PROD_HI	0x5868
#define BGE_LPMBX_RX_STD_PROD_LO	0x586C
#define BGE_LPMBX_RX_JUMBO_PROD_HI	0x5870
#define BGE_LPMBX_RX_JUMBO_PROD_LO	0x5874
#define BGE_LPMBX_RX_MINI_PROD_HI	0x5878
#define BGE_LPMBX_RX_MINI_PROD_LO	0x587C
#define BGE_LPMBX_RX_CONS0_HI		0x5880
#define BGE_LPMBX_RX_CONS0_LO		0x5884
#define BGE_LPMBX_RX_CONS1_HI		0x5888
#define BGE_LPMBX_RX_CONS1_LO		0x588C
#define BGE_LPMBX_RX_CONS2_HI		0x5890
#define BGE_LPMBX_RX_CONS2_LO		0x5894
#define BGE_LPMBX_RX_CONS3_HI		0x5898
#define BGE_LPMBX_RX_CONS3_LO		0x589C
#define BGE_LPMBX_RX_CONS4_HI		0x58A0
#define BGE_LPMBX_RX_CONS4_LO		0x58A4
#define BGE_LPMBX_RX_CONS5_HI		0x58A8
#define BGE_LPMBX_RX_CONS5_LO		0x58AC
#define BGE_LPMBX_RX_CONS6_HI		0x58B0
#define BGE_LPMBX_RX_CONS6_LO		0x58B4
#define BGE_LPMBX_RX_CONS7_HI		0x58B8
#define BGE_LPMBX_RX_CONS7_LO		0x58BC
#define BGE_LPMBX_RX_CONS8_HI		0x58C0
#define BGE_LPMBX_RX_CONS8_LO		0x58C4
#define BGE_LPMBX_RX_CONS9_HI		0x58C8
#define BGE_LPMBX_RX_CONS9_LO		0x58CC
#define BGE_LPMBX_RX_CONS10_HI		0x58D0
#define BGE_LPMBX_RX_CONS10_LO		0x58D4
#define BGE_LPMBX_RX_CONS11_HI		0x58D8
#define BGE_LPMBX_RX_CONS11_LO		0x58DC
#define BGE_LPMBX_RX_CONS12_HI		0x58E0
#define BGE_LPMBX_RX_CONS12_LO		0x58E4
#define BGE_LPMBX_RX_CONS13_HI		0x58E8
#define BGE_LPMBX_RX_CONS13_LO		0x58EC
#define BGE_LPMBX_RX_CONS14_HI		0x58F0
#define BGE_LPMBX_RX_CONS14_LO		0x58F4
#define BGE_LPMBX_RX_CONS15_HI		0x58F8
#define BGE_LPMBX_RX_CONS15_LO		0x58FC
#define BGE_LPMBX_TX_HOST_PROD0_HI	0x5900
#define BGE_LPMBX_TX_HOST_PROD0_LO	0x5904
#define BGE_LPMBX_TX_HOST_PROD1_HI	0x5908
#define BGE_LPMBX_TX_HOST_PROD1_LO	0x590C
#define BGE_LPMBX_TX_HOST_PROD2_HI	0x5910
#define BGE_LPMBX_TX_HOST_PROD2_LO	0x5914
#define BGE_LPMBX_TX_HOST_PROD3_HI	0x5918
#define BGE_LPMBX_TX_HOST_PROD3_LO	0x591C
#define BGE_LPMBX_TX_HOST_PROD4_HI	0x5920
#define BGE_LPMBX_TX_HOST_PROD4_LO	0x5924
#define BGE_LPMBX_TX_HOST_PROD5_HI	0x5928
#define BGE_LPMBX_TX_HOST_PROD5_LO	0x592C
#define BGE_LPMBX_TX_HOST_PROD6_HI	0x5930
#define BGE_LPMBX_TX_HOST_PROD6_LO	0x5934
#define BGE_LPMBX_TX_HOST_PROD7_HI	0x5938
#define BGE_LPMBX_TX_HOST_PROD7_LO	0x593C
#define BGE_LPMBX_TX_HOST_PROD8_HI	0x5940
#define BGE_LPMBX_TX_HOST_PROD8_LO	0x5944
#define BGE_LPMBX_TX_HOST_PROD9_HI	0x5948
#define BGE_LPMBX_TX_HOST_PROD9_LO	0x594C
#define BGE_LPMBX_TX_HOST_PROD10_HI	0x5950
#define BGE_LPMBX_TX_HOST_PROD10_LO	0x5954
#define BGE_LPMBX_TX_HOST_PROD11_HI	0x5958
#define BGE_LPMBX_TX_HOST_PROD11_LO	0x595C
#define BGE_LPMBX_TX_HOST_PROD12_HI	0x5960
#define BGE_LPMBX_TX_HOST_PROD12_LO	0x5964
#define BGE_LPMBX_TX_HOST_PROD13_HI	0x5968
#define BGE_LPMBX_TX_HOST_PROD13_LO	0x596C
#define BGE_LPMBX_TX_HOST_PROD14_HI	0x5970
#define BGE_LPMBX_TX_HOST_PROD14_LO	0x5974
#define BGE_LPMBX_TX_HOST_PROD15_HI	0x5978
#define BGE_LPMBX_TX_HOST_PROD15_LO	0x597C
#define BGE_LPMBX_TX_NIC_PROD0_HI	0x5980
#define BGE_LPMBX_TX_NIC_PROD0_LO	0x5984
#define BGE_LPMBX_TX_NIC_PROD1_HI	0x5988
#define BGE_LPMBX_TX_NIC_PROD1_LO	0x598C
#define BGE_LPMBX_TX_NIC_PROD2_HI	0x5990
#define BGE_LPMBX_TX_NIC_PROD2_LO	0x5994
#define BGE_LPMBX_TX_NIC_PROD3_HI	0x5998
#define BGE_LPMBX_TX_NIC_PROD3_LO	0x599C
#define BGE_LPMBX_TX_NIC_PROD4_HI	0x59A0
#define BGE_LPMBX_TX_NIC_PROD4_LO	0x59A4
#define BGE_LPMBX_TX_NIC_PROD5_HI	0x59A8
#define BGE_LPMBX_TX_NIC_PROD5_LO	0x59AC
#define BGE_LPMBX_TX_NIC_PROD6_HI	0x59B0
#define BGE_LPMBX_TX_NIC_PROD6_LO	0x59B4
#define BGE_LPMBX_TX_NIC_PROD7_HI	0x59B8
#define BGE_LPMBX_TX_NIC_PROD7_LO	0x59BC
#define BGE_LPMBX_TX_NIC_PROD8_HI	0x59C0
#define BGE_LPMBX_TX_NIC_PROD8_LO	0x59C4
#define BGE_LPMBX_TX_NIC_PROD9_HI	0x59C8
#define BGE_LPMBX_TX_NIC_PROD9_LO	0x59CC
#define BGE_LPMBX_TX_NIC_PROD10_HI	0x59D0
#define BGE_LPMBX_TX_NIC_PROD10_LO	0x59D4
#define BGE_LPMBX_TX_NIC_PROD11_HI	0x59D8
#define BGE_LPMBX_TX_NIC_PROD11_LO	0x59DC
#define BGE_LPMBX_TX_NIC_PROD12_HI	0x59E0
#define BGE_LPMBX_TX_NIC_PROD12_LO	0x59E4
#define BGE_LPMBX_TX_NIC_PROD13_HI	0x59E8
#define BGE_LPMBX_TX_NIC_PROD13_LO	0x59EC
#define BGE_LPMBX_TX_NIC_PROD14_HI	0x59F0
#define BGE_LPMBX_TX_NIC_PROD14_LO	0x59F4
#define BGE_LPMBX_TX_NIC_PROD15_HI	0x59F8
#define BGE_LPMBX_TX_NIC_PROD15_LO	0x59FC
d1889 1
a1889 1
#define BGE_FTQ_RESET			0x5C00
d1891 17
a1907 17
#define BGE_FTQRESET_DMAREAD		0x00000002
#define BGE_FTQRESET_DMAHIPRIO_RD	0x00000004
#define BGE_FTQRESET_DMADONE		0x00000010
#define BGE_FTQRESET_SBDC		0x00000020
#define BGE_FTQRESET_SDI		0x00000040
#define BGE_FTQRESET_WDMA		0x00000080
#define BGE_FTQRESET_DMAHIPRIO_WR	0x00000100
#define BGE_FTQRESET_TYPE1_SOFTWARE	0x00000200
#define BGE_FTQRESET_SDC		0x00000400
#define BGE_FTQRESET_HCC		0x00000800
#define BGE_FTQRESET_TXFIFO		0x00001000
#define BGE_FTQRESET_MBC		0x00002000
#define BGE_FTQRESET_RBDC		0x00004000
#define BGE_FTQRESET_RXLP		0x00008000
#define BGE_FTQRESET_RDBDI		0x00010000
#define BGE_FTQRESET_RDC		0x00020000
#define BGE_FTQRESET_TYPE2_SOFTWARE	0x00040000
d1912 3
a1914 3
#define BGE_MSI_MODE			0x6000
#define BGE_MSI_STATUS			0x6004
#define BGE_MSI_FIFOACCESS		0x6008
d1917 7
a1923 7
#define BGE_MSIMODE_RESET		0x00000001
#define BGE_MSIMODE_ENABLE		0x00000002
#define BGE_MSIMODE_PCI_TGT_ABRT_ATTN	0x00000004
#define BGE_MSIMODE_PCI_MSTR_ABRT_ATTN	0x00000008
#define BGE_MSIMODE_PCI_PERR_ATTN	0x00000010
#define BGE_MSIMODE_MSI_FIFOUFLOW_ATTN	0x00000020
#define BGE_MSIMODE_MSI_FIFOOFLOW_ATTN	0x00000040
d1926 5
a1930 5
#define BGE_MSISTAT_PCI_TGT_ABRT_ATTN	0x00000004
#define BGE_MSISTAT_PCI_MSTR_ABRT_ATTN	0x00000008
#define BGE_MSISTAT_PCI_PERR_ATTN	0x00000010
#define BGE_MSISTAT_MSI_FIFOUFLOW_ATTN	0x00000020
#define BGE_MSISTAT_MSI_FIFOOFLOW_ATTN	0x00000040
d1936 1
a1936 1
#define BGE_DMAC_MODE			0x6400
d1939 2
a1940 2
#define BGE_DMACMODE_RESET		0x00000001
#define BGE_DMACMODE_ENABLE		0x00000002
d1946 9
a1954 9
#define BGE_MODE_CTL			0x6800
#define BGE_MISC_CFG			0x6804
#define BGE_MISC_LOCAL_CTL		0x6808
#define BGE_CPU_EVENT			0x6810
#define BGE_EE_ADDR			0x6838
#define BGE_EE_DATA			0x683C
#define BGE_EE_CTL			0x6840
#define BGE_MDI_CTL			0x6844
#define BGE_EE_DELAY			0x6848
d1956 1
a1956 1
#define BGE_FASTBOOT_PC			0x6894
d1962 20
a1981 20
#define BGE_NVRAM_CMD			0x7000
#define BGE_NVRAM_STAT			0x7004
#define BGE_NVRAM_WRDATA		0x7008
#define BGE_NVRAM_ADDR			0x700c
#define BGE_NVRAM_RDDATA		0x7010
#define BGE_NVRAM_CFG1			0x7014
#define BGE_NVRAM_CFG2			0x7018
#define BGE_NVRAM_CFG3			0x701c
#define BGE_NVRAM_SWARB			0x7020
#define BGE_NVRAM_ACCESS		0x7024
#define BGE_NVRAM_WRITE1		0x7028


#define BGE_NVRAMCMD_RESET		0x00000001
#define BGE_NVRAMCMD_DONE		0x00000008
#define BGE_NVRAMCMD_START		0x00000010
#define BGE_NVRAMCMD_WR			0x00000020 /* 1 = wr, 0 = rd */
#define BGE_NVRAMCMD_ERASE		0x00000040
#define BGE_NVRAMCMD_FIRST		0x00000080
#define BGE_NVRAMCMD_LAST		0x00000100
d1983 1
a1983 1
#define BGE_NVRAM_READCMD \
d1986 1
a1986 1
#define BGE_NVRAM_WRITECMD \
d1990 16
a2005 16
#define BGE_NVRAMSWARB_SET0		0x00000001
#define BGE_NVRAMSWARB_SET1		0x00000002
#define BGE_NVRAMSWARB_SET2		0x00000003
#define BGE_NVRAMSWARB_SET3		0x00000004
#define BGE_NVRAMSWARB_CLR0		0x00000010
#define BGE_NVRAMSWARB_CLR1		0x00000020
#define BGE_NVRAMSWARB_CLR2		0x00000040
#define BGE_NVRAMSWARB_CLR3		0x00000080
#define BGE_NVRAMSWARB_GNT0		0x00000100
#define BGE_NVRAMSWARB_GNT1		0x00000200
#define BGE_NVRAMSWARB_GNT2		0x00000400
#define BGE_NVRAMSWARB_GNT3		0x00000800
#define BGE_NVRAMSWARB_REQ0		0x00001000
#define BGE_NVRAMSWARB_REQ1		0x00002000
#define BGE_NVRAMSWARB_REQ2		0x00004000
#define BGE_NVRAMSWARB_REQ3		0x00008000
d2007 2
a2008 2
#define BGE_NVRAMACC_ENABLE		0x00000001
#define BGE_NVRAMACC_WRENABLE		0x00000002
d2014 2
a2015 2
#define BGE_TLP_CONTROL_REG		0x7c00
#define BGE_TLP_DATA_FIFO_PROTECT	0x02000000
d2021 3
a2023 3
#define BGE_PHY_TEST_CTRL_REG		0x7e2c
#define BGE_PHY_PCIE_SCRAM_MODE		0x0020
#define BGE_PHY_PCIE_LTASS_MODE		0x0040
d2026 26
a2051 26
#define BGE_MODECTL_INT_SNDCOAL_ONLY	0x00000001
#define BGE_MODECTL_BYTESWAP_NONFRAME	0x00000002
#define BGE_MODECTL_WORDSWAP_NONFRAME	0x00000004
#define BGE_MODECTL_BYTESWAP_DATA	0x00000010
#define BGE_MODECTL_WORDSWAP_DATA	0x00000020
#define BGE_MODECTL_BYTESWAP_B2HRX_DATA	0x00000040
#define BGE_MODECTL_WORDSWAP_B2HRX_DATA	0x00000080
#define BGE_MODECTL_NO_FRAME_CRACKING	0x00000200
#define BGE_MODECTL_NO_RX_CRC		0x00000400
#define BGE_MODECTL_RX_BADFRAMES	0x00000800
#define BGE_MODECTL_NO_TX_INTR		0x00002000
#define BGE_MODECTL_NO_RX_INTR		0x00004000
#define BGE_MODECTL_FORCE_PCI32		0x00008000
#define BGE_MODECTL_B2HRX_ENABLE	0x00008000
#define BGE_MODECTL_STACKUP		0x00010000
#define BGE_MODECTL_HOST_SEND_BDS	0x00020000
#define BGE_MODECTL_HTX2B_ENABLE	0x00040000
#define BGE_MODECTL_TX_NO_PHDR_CSUM	0x00100000
#define BGE_MODECTL_RX_NO_PHDR_CSUM	0x00800000
#define BGE_MODECTL_TX_ATTN_INTR	0x01000000
#define BGE_MODECTL_RX_ATTN_INTR	0x02000000
#define BGE_MODECTL_MAC_ATTN_INTR	0x04000000
#define BGE_MODECTL_DMA_ATTN_INTR	0x08000000
#define BGE_MODECTL_FLOWCTL_ATTN_INTR	0x10000000
#define BGE_MODECTL_4X_SENDRING_SZ	0x20000000
#define BGE_MODECTL_FW_PROCESS_MCASTS	0x40000000
d2054 7
a2060 7
#define BGE_MISCCFG_RESET_CORE_CLOCKS	0x00000001
#define BGE_MISCCFG_TIMER_PRESCALER	0x000000FE
#define BGE_MISCCFG_BOARD_ID_5788	0x00010000
#define BGE_MISCCFG_BOARD_ID_5788M	0x00018000
#define BGE_MISCCFG_BOARD_ID_MASK	0x0001e000
#define BGE_MISCCFG_EPHY_IDDQ		0x00200000
#define BGE_MISCCFG_KEEP_GPHY_POWER	0x04000000
d2062 1
a2062 1
#define BGE_32BITTIME_66MHZ		(0x41 << 1)
d2065 27
a2091 27
#define BGE_MLC_INTR_STATE		0x00000001
#define BGE_MLC_INTR_CLR		0x00000002
#define BGE_MLC_INTR_SET		0x00000004
#define BGE_MLC_INTR_ONATTN		0x00000008
#define BGE_MLC_MISCIO_IN0		0x00000100
#define BGE_MLC_MISCIO_IN1		0x00000200
#define BGE_MLC_MISCIO_IN2		0x00000400
#define BGE_MLC_MISCIO_OUTEN0		0x00000800
#define BGE_MLC_MISCIO_OUTEN1		0x00001000
#define BGE_MLC_MISCIO_OUTEN2		0x00002000
#define BGE_MLC_MISCIO_OUT0		0x00004000
#define BGE_MLC_MISCIO_OUT1		0x00008000
#define BGE_MLC_MISCIO_OUT2		0x00010000
#define BGE_MLC_EXTRAM_ENB		0x00020000
#define BGE_MLC_SRAM_SIZE		0x001C0000
#define BGE_MLC_BANK_SEL		0x00200000 /* 0 = 2 banks, 1 == 1 */
#define BGE_MLC_SSRAM_TYPE		0x00400000 /* 1 = ZBT, 0 = standard */
#define BGE_MLC_SSRAM_CYC_DESEL		0x00800000
#define BGE_MLC_AUTO_EEPROM		0x01000000

#define BGE_SSRAMSIZE_256KB		0x00000000
#define BGE_SSRAMSIZE_512KB		0x00040000
#define BGE_SSRAMSIZE_1MB		0x00080000
#define BGE_SSRAMSIZE_2MB		0x000C0000
#define BGE_SSRAMSIZE_4MB		0x00100000
#define BGE_SSRAMSIZE_8MB		0x00140000
#define BGE_SSRAMSIZE_16M		0x00180000
d2094 12
a2105 12
#define BGE_EEADDR_ADDRESS		0x0000FFFC
#define BGE_EEADDR_HALFCLK		0x01FF0000
#define BGE_EEADDR_START		0x02000000
#define BGE_EEADDR_DEVID		0x1C000000
#define BGE_EEADDR_RESET		0x20000000
#define BGE_EEADDR_DONE			0x40000000
#define BGE_EEADDR_RW			0x80000000 /* 1 = rd, 0 = wr */

#define BGE_EEDEVID(x)			((x & 7) << 26)
#define BGE_EEHALFCLK(x)		((x & 0x1FF) << 16)
#define BGE_HALFCLK_384SCL		0x60
#define BGE_EE_READCMD \
d2108 1
a2108 1
#define BGE_EE_WRCMD \
d2113 6
a2118 6
#define BGE_EECTL_CLKOUT_TRISTATE	0x00000001
#define BGE_EECTL_CLKOUT		0x00000002
#define BGE_EECTL_CLKIN			0x00000004
#define BGE_EECTL_DATAOUT_TRISTATE	0x00000008
#define BGE_EECTL_DATAOUT		0x00000010
#define BGE_EECTL_DATAIN		0x00000020
d2121 4
a2124 4
#define BGE_MDI_DATA			0x00000001
#define BGE_MDI_DIR			0x00000002
#define BGE_MDI_SEL			0x00000004
#define BGE_MDI_CLK			0x00000008
d2126 2
a2127 2
#define BGE_MEMWIN_START		0x00008000
#define BGE_MEMWIN_END			0x0000FFFF
d2130 1
a2130 1
#define BGE_MEMWIN_READ(pc, tag, x, val)				\
d2137 1
a2137 1
#define BGE_MEMWIN_WRITE(pc, tag, x, val)				\
d2151 1
a2151 1
#define BGE_MAGIC_NUMBER		0x4B657654
d2157 1
a2157 1
#define BGE_HOSTADDR(x,y)						\
d2173 1
a2173 1
#define RCB_WRITE_4(sc, rcb, offset, val) \
d2177 1
a2177 1
#define RCB_WRITE_2(sc, rcb, offset, val) \
d2181 1
a2181 1
#define BGE_RCB_MAXLEN_FLAGS(maxlen, flags)	((maxlen) << 16 | (flags))
d2183 2
a2184 2
#define BGE_RCB_FLAG_USE_EXT_RX_BD	0x0001
#define BGE_RCB_FLAG_RING_DISABLED	0x0002
d2201 13
a2213 13
#define BGE_TXBDFLAG_TCP_UDP_CSUM	0x0001
#define BGE_TXBDFLAG_IP_CSUM		0x0002
#define BGE_TXBDFLAG_END		0x0004
#define BGE_TXBDFLAG_IP_FRAG		0x0008
#define BGE_TXBDFLAG_JMB_PKT		0x0008
#define BGE_TXBDFLAG_IP_FRAG_END	0x0010
#define BGE_TXBDFLAG_VLAN_TAG		0x0040
#define BGE_TXBDFLAG_COAL_NOW		0x0080
#define BGE_TXBDFLAG_CPU_PRE_DMA	0x0100
#define BGE_TXBDFLAG_CPU_POST_DMA	0x0200
#define BGE_TXBDFLAG_INSERT_SRC_ADDR	0x1000
#define BGE_TXBDFLAG_CHOOSE_SRC_ADDR	0x6000
#define BGE_TXBDFLAG_NO_CRC		0x8000
d2215 1
a2215 1
#define BGE_NIC_TXRING_ADDR(ringno, size)	\
d2262 17
a2278 17
#define BGE_RXBDFLAG_END		0x0004
#define BGE_RXBDFLAG_JUMBO_RING		0x0020
#define BGE_RXBDFLAG_VLAN_TAG		0x0040
#define BGE_RXBDFLAG_ERROR		0x0400
#define BGE_RXBDFLAG_MINI_RING		0x0800
#define BGE_RXBDFLAG_IP_CSUM		0x1000
#define BGE_RXBDFLAG_TCP_UDP_CSUM	0x2000
#define BGE_RXBDFLAG_TCP_UDP_IS_TCP	0x4000

#define BGE_RXERRFLAG_BAD_CRC		0x0001
#define BGE_RXERRFLAG_COLL_DETECT	0x0002
#define BGE_RXERRFLAG_LINK_LOST		0x0004
#define BGE_RXERRFLAG_PHY_DECODE_ERR	0x0008
#define BGE_RXERRFLAG_MAC_ABORT		0x0010
#define BGE_RXERRFLAG_RUNT		0x0020
#define BGE_RXERRFLAG_TRUNC_NO_RSRCS	0x0040
#define BGE_RXERRFLAG_GIANT		0x0080
d2307 2
a2308 2
#define BGE_TX_CONSIDX(x, i) x->bge_idx[i].bge_tx_considx
#define BGE_RX_PRODIDX(x, i) x->bge_idx[i].bge_rx_prodidx
d2310 3
a2312 3
#define BGE_STATFLAG_UPDATED		0x00000001
#define BGE_STATFLAG_LINKSTATE_CHANGED	0x00000002
#define BGE_STATFLAG_ERROR		0x00000004
d2317 1
a2317 1
#define SK_SUBSYSID_9D41		0x4441
d2322 1
a2322 1
#define DELL_VENDORID			0x1028
d2327 19
a2345 19
#define BGE_EE_MAC_OFFSET		0x7C
#define BGE_EE_MAC_OFFSET_5906		0x10
#define BGE_EE_HWCFG_OFFSET		0xC8

#define BGE_HWCFG_VOLTAGE		0x00000003
#define BGE_HWCFG_PHYLED_MODE		0x0000000C
#define BGE_HWCFG_MEDIA			0x00000030
#define BGE_HWCFG_ASF			0x00000080

#define BGE_VOLTAGE_1POINT3		0x00000000
#define BGE_VOLTAGE_1POINT8		0x00000001

#define BGE_PHYLEDMODE_UNSPEC		0x00000000
#define BGE_PHYLEDMODE_TRIPLELED	0x00000004
#define BGE_PHYLEDMODE_SINGLELED	0x00000008

#define BGE_MEDIA_UNSPEC		0x00000000
#define BGE_MEDIA_COPPER		0x00000010
#define BGE_MEDIA_FIBER			0x00000020
d2347 1
a2347 1
#define BGE_TICKS_PER_SEC		1000000
d2352 6
a2357 6
#define BGE_EVENT_RING_CNT	256
#define BGE_CMD_RING_CNT	64
#define BGE_STD_RX_RING_CNT	512
#define BGE_JUMBO_RX_RING_CNT	256
#define BGE_MINI_RX_RING_CNT	1024
#define BGE_RETURN_RING_CNT	1024
d2360 1
a2360 1
#define BGE_RETURN_RING_CNT_5705	512
d2365 2
a2366 2
#define BGE_TX_RING_CNT_128	128
#define BGE_TX_RING_BASE_128	0x3800
d2368 2
a2369 2
#define BGE_TX_RING_CNT_256	256
#define BGE_TX_RING_BASE_256	0x3000
d2371 2
a2372 2
#define BGE_TX_RING_CNT_512	512
#define BGE_TX_RING_BASE_512	0x2000
d2374 2
a2375 2
#define BGE_TX_RING_CNT		BGE_TX_RING_CNT_512
#define BGE_TX_RING_BASE	BGE_TX_RING_BASE_512
d2550 3
a2552 3
#define BGE_JUMBO_FRAMELEN	9022
#define BGE_JUMBO_MTU		(BGE_JUMBO_FRAMELEN - ETHER_HDR_LEN - ETHER_CRC_LEN - ETHER_VLAN_ENCAP_LEN)
#define BGE_PAGE_SIZE		PAGE_SIZE
d2557 1
a2557 1
#define BGE_INC(x, y)	(x) = (x + 1) % y
d2562 1
a2562 1
#define BGE_VPD_FLAG		0x8000
d2564 4
a2567 4
#define VPD_RES_ID	0x82	/* ID string */
#define VPD_RES_READ	0x90	/* start of read only area */
#define VPD_RES_WRITE	0x81	/* start of read/write area */
#define VPD_RES_END	0x78	/* end tag */
d2574 1
a2574 1
#define CSR_WRITE_4(sc, reg, val)	\
d2577 1
a2577 1
#define CSR_READ_4(sc, reg)		\
d2580 1
a2580 1
#define BGE_SETBIT(sc, reg, x)	\
d2582 1
a2582 1
#define BGE_CLRBIT(sc, reg, x)	\
d2585 1
a2585 1
#define PCI_SETBIT(pc, tag, reg, x)	\
d2587 1
a2587 1
#define PCI_CLRBIT(pc, tag, reg, x)	\
d2596 3
a2598 3
#define BGE_SSLOTS	256
#define BGE_MSLOTS	256
#define BGE_JSLOTS	384
d2600 2
a2601 2
#define BGE_JRAWLEN (BGE_JUMBO_FRAMELEN + ETHER_ALIGN)
#define BGE_JLEN (BGE_JRAWLEN + (sizeof(u_int64_t) - \
d2621 1
a2621 1
#define BGE_RING_DMA_ADDR(sc, offset) \
d2633 1
a2633 1
#define BGE_NTXSEG      30
d2635 1
a2635 1
#define BGE_NTXSEG      31
d2659 2
a2660 2
#define BGE_TIMEOUT		100000
#define BGE_TXCONS_UNSET		0xFFFF	/* impossible value */
d2667 3
a2669 3
#define ASF_ENABLE		1
#define ASF_NEW_HANDSHAKE	2
#define ASF_STACKUP		4
d2681 26
a2706 26
#define BGE_TXRING_VALID	0x00000001
#define BGE_RXRING_VALID	0x00000002
#define BGE_JUMBO_RXRING_VALID	0x00000004
#define BGE_RX_ALIGNBUG		0x00000008
#define BGE_NO_3LED		0x00000010
#define BGE_PCIX		0x00000020
#define BGE_PCIE		0x00000040
#define BGE_ASF_MODE		0x00000080
#define BGE_NO_EEPROM		0x00000100
#define BGE_JUMBO_CAPABLE	0x00000200
#define BGE_10_100_ONLY		0x00000400
#define BGE_PHY_FIBER_TBI	0x00000800
#define BGE_PHY_FIBER_MII	0x00001000
#define BGE_PHY_CRC_BUG		0x00002000
#define BGE_PHY_ADC_BUG		0x00004000
#define BGE_PHY_5704_A0_BUG	0x00008000
#define BGE_PHY_JITTER_BUG	0x00010000
#define BGE_PHY_BER_BUG		0x00020000
#define BGE_PHY_ADJUST_TRIM	0x00040000
#define BGE_NO_ETH_WIRE_SPEED	0x00080000
#define BGE_IS_5788		0x00100000
#define BGE_5705_PLUS		0x00200000
#define BGE_5750_PLUS		0x00400000
#define BGE_5755_PLUS		0x00800000
#define BGE_5714_FAMILY		0x01000000
#define BGE_5700_FAMILY		0x02000000
d2730 6
a2735 6
#define BGE_STS_LINK		0x00000001	/* MAC link status */
#define BGE_STS_LINK_EVT	0x00000002	/* pending link event */
#define BGE_STS_AUTOPOLL	0x00000004	/* PHY auto-polling  */
#define BGE_STS_BIT(sc, x)	((sc)->bge_sts & (x))
#define BGE_STS_SETBIT(sc, x)	((sc)->bge_sts |= (x))
#define BGE_STS_CLRBIT(sc, x)	((sc)->bge_sts &= ~(x))
@


1.105
log
@macros describing necessary bits on newer chips.

just extra cruft, it doesnt change anything that already exists so it cant
(and empirically doesnt) change existing chip support.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.104 2011/02/15 19:49:47 robert Exp $	*/
d2709 1
@


1.104
log
@Add workaround for BCM5906 A0/1/2 controller silicon bug. When
auto-negotiation results in half-duplex operation, excess collision
on the ethernet link may cause internal chip delays that may result
in subsequent valid frames being dropped due to insufficient
receive buffer resources. The workaround is to choose de-pipeline
method as a flow control decision for SDI. De-pipeline method
allows only 1 data in TxMbuf at a time such that a request to RDMA
from SDI is made only when TxMbuf is empty.
From FreeBSD; ok miod@@; ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.103 2010/09/20 07:40:38 deraadt Exp $	*/
d95 1
d110 2
d312 6
d340 2
d360 1
d378 3
d736 3
d752 2
d930 2
a933 1
#define BGE_SGDIGSTS_DONE		0x00000002
d1315 49
d1563 1
d1575 2
d1596 3
d1610 13
d2031 2
d2039 1
d2042 1
@


1.103
log
@Stop doing shutdown hooks in network drivers where possible.  We already
take all interfaces down, via their xxstop routines.  Claudio and I have
verified that none of the shutdown hooks do much extra beyond what xxstop
was already doing; it is largely a pile of junk.
ok claudio, some early comments by sthen; also read by matthew, jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.102 2010/09/07 16:21:44 deraadt Exp $	*/
d304 1
d945 1
@


1.102
log
@remove the powerhook code.  All architectures now use the ca_activate tree
traversal code to suspend/resume
ok oga kettenis blambert
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.101 2010/07/09 00:04:42 sthen Exp $	*/
a2643 1
	void			*sc_shutdownhook;
@


1.101
log
@- Setup proper mbuf pool watermarks for BCM5717 / BCM57765 chipsets.
- Disable initiation of multiple DMA reads for BCM5717 chipset
  to workaround errata.
- Performance tweak for BCM5785 chipset.
- Correct the return ring count used for BCM5717 / BCM57765 chipsets.
- Fix fiber media detection for BCM5717 chipsets as they use a MII-based
  fiber PHY.

From Brad, based on info gleaned from the Linux tg3 driver.
Should only affect the new chipsets, but tested for regressions
anyway (on BCM5701, BCM5703, BCM5704C, BCM5705M Alt, BCM5722, BCM5751,
BCM5751M, BCM5780) by Brad, weerd@@, myself and Denis Doroshenko.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.100 2010/01/09 06:19:01 naddy Exp $	*/
a2643 1
	void			*sc_powerhook;
@


1.100
log
@Add support for the Broadcom BCM57765 ASIC and newer Broadcom
BCM577xx chipsets.  From Brad.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.99 2009/10/11 10:36:31 sthen Exp $	*/
d1520 1
d1552 1
@


1.99
log
@Add support for the Broadcom BCM5717 ASIC and the BCM5717 / BCM5718 chipsets.
Based on info gleaned from the Linux tg3 driver. From Brad, ok naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.98 2009/07/21 13:09:41 naddy Exp $	*/
d213 1
d330 1
@


1.98
log
@Add a family flag for the original 5700 series chipsets. Idea from FreeBSD.
But also use the flag where it makes sense.  From Brad; ok sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.97 2009/06/19 21:31:54 naddy Exp $	*/
d212 1
d328 1
d1248 3
d2106 1
@


1.97
log
@Allow bge(4) to recognize the revisions of the 57780 ASICs.  From Brad.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.96 2009/06/19 14:31:51 naddy Exp $	*/
d2601 1
@


1.96
log
@Some more defines for bge(4). Mainly bits for accessing
info from the firmware. Some of it will be required for
further work on both older and newer chipsets.

Gleaned from the Linux tg3 driver.  From Brad.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.95 2009/06/04 00:59:21 naddy Exp $	*/
d304 2
@


1.95
log
@replace the cumbersome macros that check for chip revisions with quirk flags
set at attach; from Brad
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.94 2009/06/03 05:19:21 naddy Exp $	*/
d79 2
d82 8
a89 1
#define    BGE_FW_PAUSE			0x00000002
d390 1
d627 3
d784 112
d2045 1
a2045 1
#define BGE_MAGIC_NUMBER                0x4B657654
@


1.94
log
@register bit definitions instead of magic numbers;
gleaned from the Linux tg3 driver; from Brad
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.93 2009/06/02 03:58:17 naddy Exp $	*/
d2458 1
a2458 1
#define BGE_JUMBO_CAP		0x00000200
d2470 4
@


1.93
log
@minor tidying; from Brad; ok sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.92 2009/05/21 23:04:20 sthen Exp $	*/
d725 1
d1416 1
@


1.92
log
@add support for BCM576x, 577xx, and some new 572x/578x devices.
from Brad; testing by phessler, naddy, myself and others on a range
of older and newer devices. ok dlg@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.91 2009/04/23 19:15:07 kettenis Exp $	*/
a2496 1
	int			bge_if_flags;
@


1.91
log
@Start using extended buffer descriptors on the jumbo ring and use MCLGETI to
allocate mbufs for it.  Another jumbo allocator bites the dust!

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.90 2008/12/23 00:12:22 dlg Exp $	*/
d202 1
d223 1
d239 56
a294 52
#define BGE_CHIPID_BCM5700_A0		0x70000000
#define BGE_CHIPID_BCM5700_A1		0x70010000
#define BGE_CHIPID_BCM5700_B0		0x71000000
#define BGE_CHIPID_BCM5700_B1		0x71010000
#define BGE_CHIPID_BCM5700_B2		0x71020000
#define BGE_CHIPID_BCM5700_B3		0x71030000
#define BGE_CHIPID_BCM5700_ALTIMA	0x71040000
#define BGE_CHIPID_BCM5700_C0		0x72000000
#define BGE_CHIPID_BCM5701_A0		0x00000000	/* grrrr */
#define BGE_CHIPID_BCM5701_B0		0x01000000
#define BGE_CHIPID_BCM5701_B2		0x01020000
#define BGE_CHIPID_BCM5701_B5		0x01050000
#define BGE_CHIPID_BCM5703_A0		0x10000000
#define BGE_CHIPID_BCM5703_A1		0x10010000
#define BGE_CHIPID_BCM5703_A2		0x10020000
#define BGE_CHIPID_BCM5703_A3		0x10030000
#define BGE_CHIPID_BCM5703_B0		0x11000000
#define BGE_CHIPID_BCM5704_A0		0x20000000
#define BGE_CHIPID_BCM5704_A1		0x20010000
#define BGE_CHIPID_BCM5704_A2		0x20020000
#define BGE_CHIPID_BCM5704_A3		0x20030000
#define BGE_CHIPID_BCM5704_B0		0x21000000
#define BGE_CHIPID_BCM5705_A0		0x30000000
#define BGE_CHIPID_BCM5705_A1		0x30010000
#define BGE_CHIPID_BCM5705_A2		0x30020000
#define BGE_CHIPID_BCM5705_A3		0x30030000
#define BGE_CHIPID_BCM5750_A0		0x40000000
#define BGE_CHIPID_BCM5750_A1		0x40010000
#define BGE_CHIPID_BCM5750_A3		0x40030000
#define BGE_CHIPID_BCM5750_B0		0x40100000
#define BGE_CHIPID_BCM5750_B1		0x41010000
#define BGE_CHIPID_BCM5750_C0		0x42000000
#define BGE_CHIPID_BCM5750_C1		0x42010000
#define BGE_CHIPID_BCM5750_C2		0x42020000
#define BGE_CHIPID_BCM5714_A0		0x50000000
#define BGE_CHIPID_BCM5752_A0		0x60000000
#define BGE_CHIPID_BCM5752_A1		0x60010000
#define BGE_CHIPID_BCM5752_A2		0x60020000
#define BGE_CHIPID_BCM5714_B0		0x80000000
#define BGE_CHIPID_BCM5714_B3		0x80030000
#define BGE_CHIPID_BCM5715_A0		0x90000000
#define BGE_CHIPID_BCM5715_A1		0x90010000
#define BGE_CHIPID_BCM5715_A3		0x90030000
#define BGE_CHIPID_BCM5755_A0		0xa0000000
#define BGE_CHIPID_BCM5755_A1		0xa0010000
#define BGE_CHIPID_BCM5755_A2		0xa0020000
#define BGE_CHIPID_BCM5755_C0		0xa2000000
#define BGE_CHIPID_BCM5787_A0		0xb0000000
#define BGE_CHIPID_BCM5787_A1		0xb0010000
#define BGE_CHIPID_BCM5787_A2		0xb0020000
#define BGE_CHIPID_BCM5906_A1		0xc0010000
#define BGE_CHIPID_BCM5906_A2		0xc0020000
d297 1
a297 1
#define BGE_ASICREV(x)			((x) >> 28)
d311 5
d318 1
a318 1
#define BGE_CHIPREV(x)			((x) >> 24)
d328 2
d800 1
d802 1
a802 1

d862 1
d1380 3
@


1.90
log
@if we cant put enough packets on the rx ring then schedule a timeout to
try again later.

tested by many
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.86 2008/11/07 22:53:31 brad Exp $	*/
d1992 18
a2350 3
#define BGE_JPAGESZ PAGE_SIZE
#define BGE_RESID (BGE_JPAGESZ - (BGE_JLEN * BGE_JSLOTS) % BGE_JPAGESZ)
#define BGE_JMEM ((BGE_JLEN * BGE_JSLOTS) + BGE_RESID)
d2360 1
a2360 1
	struct bge_rx_bd	bge_rx_jumbo_ring[BGE_JUMBO_RX_RING_CNT];
d2398 1
a2398 4
	bus_dmamap_t		bge_rx_jumbo_map;
	/* Stick the jumbo mem management stuff here too. */
	caddr_t			bge_jslots[BGE_JSLOTS];
	void			*bge_jumbo_buf;
a2400 4
#define BGE_JUMBO_DMA_ADDR(sc, m) \
	((sc)->bge_cdata.bge_rx_jumbo_map->dm_segs[0].ds_addr + \
	 (mtod((m), char *) - (char *)(sc)->bge_cdata.bge_jumbo_buf))

a2409 5
struct bge_jpool_entry {
	int                             slot;
	SLIST_ENTRY(bge_jpool_entry)	jpool_entries;
};

d2464 1
a2464 2
	SLIST_HEAD(__bge_jfreehead, bge_jpool_entry)	bge_jfree_listhead;
	SLIST_HEAD(__bge_jinusehead, bge_jpool_entry)	bge_jinuse_listhead;
@


1.89
log
@switch bge over to using MCLGETI when allocating mbufs for the rx ring.

tested by many including henning@@ sthen@@ naddy@@ krw@@ robert@@ jmc@@ jsg@@
weerd@@ and ingo schwarze on a variety of machines include i386, amd64,
alpha, and sparc64.
@
text
@d2480 1
@


1.88
log
@brad, noone said you could go making changes like that (doubling the
amount of memory and interrupt time each bge uses) without discussing
it with other people.  lots of people are complaining about the lack
of communication in your process, and you are going to have to change
that.
@
text
@d2459 1
@


1.87
log
@Clean up some of the comments.
@
text
@d2321 3
a2323 1
 * Jumbo buffer stuff.
d2325 3
d2329 1
@


1.86
log
@When initializing the MAC put the PHY into ready state for BCM5906
chipsets.

From the Linux tg3 driver via FreeBSD.

Tested by Jordi Creix <jbcreix dot mail at gmail dot com>
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.85 2008/07/17 19:59:44 brad Exp $	*/
d2321 1
a2321 3
 * Memory management stuff. Note: the SSLOTS, MSLOTS and JSLOTS
 * values are tuneable. They control the actual amount of buffers
 * allocated for the standard, mini and jumbo receive rings.
a2322 3

#define BGE_SSLOTS	256
#define BGE_MSLOTS	256
a2323 1

@


1.85
log
@Add a flag and allow the driver to identify the BCM5788 chipsets. They're
slightly different from the other chipsets using the BCM5705 ASIC.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.84 2008/07/16 03:56:25 brad Exp $	*/
d1808 1
@


1.84
log
@Enable the read DMA engine's PCI read request burst length long burst
mode (4KB) for PCIe chips. This resolves the poor TX performance for
the PCIe chips. The result being a bit under double the TX performance
on a Gig connection (roughly 495 Mb/s -> 940 Mb/s).

Tested by reyk@@, sthen@@, brad@@ and a few end users.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.83 2008/04/20 01:32:43 brad Exp $	*/
d1805 3
a1808 1
#define BGE_MISCCFG_BOARD_ID_MASK	0x0001e000
d2445 1
@


1.83
log
@Add a workaround for a CRC bug errata with BCM5701 A0 and B0 chipset
revisions.

From Linux via FreeBSD.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.82 2008/04/03 22:50:24 brad Exp $	*/
d1365 2
a1366 4

/* Alternate encodings for PCI-Express, from Broadcom-supplied Linux driver */
#define BGE_RDMA_MODE_FIFO_LONG_BURST	((1 << 17) || (1 << 16))
#define BGE_RDMA_MODE_FIFO_SIZE_128	(1 << 17)
d1396 1
@


1.82
log
@Clean up the DMA read/write control register setup code and add some
comments.

Tested by a number of users with a variety of chipsets.

From FreeBSD

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.81 2008/03/02 11:24:50 brad Exp $	*/
d2437 7
a2443 6
#define BGE_PHY_ADC_BUG		0x00002000
#define BGE_PHY_5704_A0_BUG	0x00004000
#define BGE_PHY_JITTER_BUG	0x00008000
#define BGE_PHY_BER_BUG		0x00010000
#define BGE_PHY_ADJUST_TRIM	0x00020000
#define BGE_NO_ETH_WIRE_SPEED	0x00040000
@


1.81
log
@Correct the comment describing the BGE_PCISTATE_PCI_BUSSPEED bit.
It had the sense of the bit reversed.

From jdp@@FreeBSD

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.80 2008/02/20 12:17:25 brad Exp $	*/
d322 3
a324 1
#define BGE_PCIDMARWCTL_ONEDMA_ATONCE	0x00004000
a325 1
#define BGE_PCIDMARWCTL_RD_WAT_SHIFT	16
a326 1
#define BGE_PCIDMARWCTL_WR_WAT_SHIFT	19
a329 1
#define BGE_PCIDMARWCTL_DFLT_PCI_RD_CMD_SHIFT	24
a330 1
#define BGE_PCIDMARWCTL_DFLT_PCI_WR_CMD_SHIFT	28
d332 4
a335 3
/* PCI DMA Read/Write Control register, alternate usage for PCI-Express */
#define BGE_PCIDMA_RWCTL_PCIE_WRITE_WATRMARK_128	0x00180000 
#define BGE_PCIDMA_RWCTL_PCIE_WRITE_WATRMARK_256	0x00380000
d1367 2
a1368 2
#define BGE_RDMA_MODE_FIFO_LONG_BURST	((1<<17) || (1 << 16))
#define BGE_RDMA_MODE_FIFO_SIZE_128     (1 << 17)
a2073 3

#define BGE_PCI_READ_CMD		0x06000000
#define BGE_PCI_WRITE_CMD		0x70000000
@


1.80
log
@When collecting the hardware statistics add the interfaces input errors
counter and out of receive buffer descriptors counter to the network stacks
input errors counter.

Based on a diff from mickey@@ though updated for -current and added support
for BCM5705 or newer chipsets from brad@@.

Tested it with BCM5704 on i386/amd64, BCM5700 on sparc64, BCM5701/BCM5751M
on i386 and BCM5721/BCM5780 on amd64.

ok krw@@ sthen@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.79 2008/02/20 10:26:53 sthen Exp $	*/
d364 1
a364 1
#define BGE_PCISTATE_PCI_BUSSPEED	0x00000008 /* 1 = 33/66, 0 = 66/133 */
@


1.79
log
@when bge has link, use autopolling for link status, not direct mii polls.
fixes input errors on BCM5701/5702X/5704 and may avoid firmware hangs on
some cards if asf/ipmi support is added.

original diff from Oleg Bulyzhin in a freebsd-net post and ported by
mickey; included stats counter changes which don't apply to -current
so they are split out and not included here. "The rest of the diff
looks ok" brad.

tested on 5701/5702X/5703X/5704C/5721 by mpf naddy okan beck sthen

ok beck (before splitting out stats changes), krw, henning.
closes kernel/5699
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.78 2008/02/18 09:40:11 brad Exp $	*/
d2483 2
@


1.78
log
@Add initial bits for fiber support with the BCM5714/BCM5715/BCM5780 chipsets.

Tested by brad@@, chl@@, sthen@@, Johan Mson Lindman and Ian Lindsay <iml04@@hampshire.edu>

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.77 2008/02/02 04:03:33 brad Exp $	*/
d2468 7
a2477 2
	int			bge_link;	/* link state */
	int			bge_link_evt;	/* pending link event */
@


1.77
log
@- Simplify statistics updates and remove redundant register reads.
- Add discarded RX packets to input errors for the BCM5705 or newer
  chipsets. Unfortunately output errors cannot be added because the
  equivalent to the ifOutDiscards register does not exist.
- Replace misleading and wrong BGE_RX_STATS/BGE_TX_STATS with
  BGE_MAC_STATS. They were reversed but just happened to work.

From FreeBSD

Tested by chl@@, landy@@, sthen@@, krw@@, okan@@ and brad@@

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.76 2008/01/31 03:43:00 brad Exp $	*/
d2440 7
a2446 6
#define BGE_PHY_ADC_BUG		0x00001000
#define BGE_PHY_5704_A0_BUG	0x00002000
#define BGE_PHY_JITTER_BUG	0x00004000
#define BGE_PHY_BER_BUG		0x00008000
#define BGE_PHY_ADJUST_TRIM	0x00010000
#define BGE_NO_ETH_WIRE_SPEED	0x00020000
@


1.76
log
@recognize the BCM5755 C0 ASIC revision.

tested by Rodolfo Gouveia and marco@@

ok kettenis@@ marco@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.75 2007/11/17 13:55:27 brad Exp $	*/
d607 1
a607 2
#define BGE_RX_STATS			0x0800
#define BGE_TX_STATS			0x0880
d2475 3
a2477 3
	u_long			bge_rx_discards;
	u_long			bge_tx_discards;
	u_long			bge_tx_collisions;
@


1.75
log
@Rename fiber TBI flag from BGE_TBI to BGE_PHY_FIBER_TBI. No functional change.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.74 2007/10/13 16:29:52 kettenis Exp $	*/
d283 1
@


1.74
log
@Add support for BCM5906.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.73 2007/10/11 19:44:39 kettenis Exp $	*/
d2431 9
a2439 9
#define BGE_TBI			0x00000008
#define BGE_RX_ALIGNBUG		0x00000010
#define BGE_NO_3LED		0x00000020
#define BGE_PCIX		0x00000040
#define BGE_PCIE		0x00000080
#define BGE_ASF_MODE		0x00000100
#define BGE_NO_EEPROM		0x00000200
#define BGE_JUMBO_CAP		0x00000400
#define BGE_10_100_ONLY		0x00000800
@


1.73
log
@Make BGE_JUMBO_FRAMELEN big enough to include vlan tag.  Fixes problems with
receiving jumbo frames on bge(4).

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.72 2007/02/10 01:23:19 krw Exp $	*/
d287 1
d1455 13
d1714 52
d2057 1
@


1.72
log
@Add more chipset revision ids.

From scottl via FreeBSD and brad@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.71 2007/01/30 02:35:16 krw Exp $	*/
d2215 2
a2216 2
#define BGE_JUMBO_FRAMELEN	9018
#define BGE_JUMBO_MTU		(BGE_JUMBO_FRAMELEN - ETHER_HDR_LEN - ETHER_CRC_LEN)
@


1.71
log
@Rough in more support for 5787/5755 chips so far known to not work or
unreported in the wild. In this case add a PHY workaround for an eventual
mobile version of the chipset. No change to existing functionality.

From Michael Chan (mchan@@broadcom), via Linux tg3 and brad.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.70 2007/01/10 23:04:53 kettenis Exp $	*/
d280 5
@


1.70
log
@Flow control support for bge(4)/brgphy(4).  From brad@@ based on code from
NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.69 2006/12/22 17:37:50 krw Exp $	*/
d2372 2
a2373 1
#define BGE_NO_ETH_WIRE_SPEED	0x00010000
@


1.69
log
@Remove never used code for a BCM5700 feature (BGE_EXTRAM) that didn't
survive past 1st gen silicon.

From brad. Tested by wilfried@@ and Johan Mason Lindman.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.68 2006/10/22 21:45:36 brad Exp $	*/
d2394 1
@


1.68
log
@recognize the BCM5715 A3 chipset.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.67 2006/10/19 10:55:56 tom Exp $	*/
d2359 14
a2372 15
#define BGE_EXTRAM		0x00000008	/* Has external SSRAM. */
#define BGE_TBI			0x00000010
#define BGE_RX_ALIGNBUG		0x00000020
#define BGE_NO_3LED		0x00000040
#define BGE_PCIX		0x00000080
#define BGE_PCIE		0x00000100
#define BGE_ASF_MODE		0x00000200
#define BGE_NO_EEPROM		0x00000400
#define BGE_JUMBO_CAP		0x00000800
#define BGE_10_100_ONLY		0x00001000
#define BGE_PHY_ADC_BUG		0x00002000
#define BGE_PHY_5704_A0_BUG	0x00004000
#define BGE_PHY_JITTER_BUG	0x00008000
#define BGE_PHY_BER_BUG		0x00010000
#define BGE_NO_ETH_WIRE_SPEED	0x00020000
@


1.67
log
@s/Mhz/MHz/ in comments and printf() strings

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.66 2006/10/17 22:28:07 brad Exp $	*/
d279 1
@


1.66
log
@disable the firmware fastboot feature on 5752/5755 and 5787 ASICs,
eliminates firmware timeouts.

Tested by pedro la peu <pedro at am-gen dot org> with a 5752 ASIC and
Benjamin Black <ben at layer8 dot net> with a 5787 ASIC.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.65 2006/10/15 06:49:19 brad Exp $	*/
d743 1
a743 1
#define BGE_SERDESCFG_INVPHASE		0x00080000 /* Reverse 125Mhz clock */
@


1.65
log
@recognize the BCM5787 A2 chipset.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.64 2006/10/07 23:08:50 brad Exp $	*/
d1690 2
@


1.64
log
@add a no Ethernet@@Wirespeed flag.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.63 2006/10/07 20:28:48 brad Exp $	*/
d279 1
@


1.63
log
@add and set PHY workaround flags depending on the ASIC revision
or chip id.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.62 2006/10/01 17:29:48 brad Exp $	*/
d2369 1
@


1.62
log
@pack several boolean fields into the existing bge_flags field.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.61 2006/10/01 00:34:07 brad Exp $	*/
d2365 4
@


1.61
log
@add the PCI ids for the BCM5722, BCM5756, BCM5906 and BCM5906M chipsets.
the BCM5906/BCM5906M ids are not enabled for now; these chips are quite
a bit different from the others and are currently unsupported.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.60 2006/09/17 23:31:07 brad Exp $	*/
a2337 7
/*
 * Flags for bge_flags.
 */
#define BGE_TXRING_VALID	0x0001
#define BGE_RXRING_VALID	0x0002
#define BGE_JUMBO_RXRING_VALID	0x0004

d2351 15
a2365 5
	u_int8_t		bge_extram;	/* has external SSRAM */
	u_int8_t		bge_eeprom;
	u_int8_t		bge_tbi;
	u_int8_t		bge_jumbo_cap;
	u_int8_t		bge_rx_alignment_bug;
a2367 5
	u_int8_t		bge_no_3_led;
	u_int8_t		bge_asf_mode;
	u_int8_t		bge_pcie;
	u_int8_t		bge_pcix;
	u_int8_t		bge_10_100_only;
a2386 1
	int			bge_flags;
@


1.60
log
@add a flag to indicate which boards are only capable of 10/100 modes of
operation.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.59 2006/09/17 22:19:38 brad Exp $	*/
d279 1
d295 1
@


1.59
log
@Readd the Dell PHY LED setup workaround and the Jumbo capability flag.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.58 2006/09/17 17:20:42 brad Exp $	*/
d1731 1
d2367 1
@


1.58
log
@- correct the firmware synchronization in bge_reset(), this
  eliminates firmware timeouts for the BCM5752 as the hw
  firmware was coming up too fast for the driver.
- remove the redundant firmware check in bge_chipinit().

Tested by pedro la peu <pedro at am-gen dot org> on an IBM ThinksPpad Z61m
with a BCM5752, as well as the 5700/5703/5704 and 5750.

The initial diff for bge_reset() and other information from
David Christensen <davidch at broadcom dot com>.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.57 2006/08/29 17:44:16 kettenis Exp $	*/
a1967 1
#define SK_SUBSYSID_9D21		0x4421
d1971 5
d2358 1
@


1.57
log
@Add support for onboard bge(4)'s on Sun UltraSPARC hardware that apparently
come without an attached SEEPROM.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.56 2006/08/28 03:06:47 brad Exp $	*/
d1730 1
a1730 1
#define BGE_MISCCFG_GPHY_POWER_RESET	0x04000000
d1815 5
a1819 4
 * This magic number is used to prevent PXE restart when we
 * issue a software reset. We write this magic number to the
 * firmware mailbox at 0xB50 in order to prevent the PXE boot
 * code from running.
@


1.56
log
@revert flags usage commits. too close to release. will go in post release instead.

requested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.52 2006/08/16 02:37:00 brad Exp $	*/
d2351 1
@


1.55
log
@add a BGE_JUMBO flag.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.54 2006/08/28 00:52:16 brad Exp $	*/
d1967 1
a1970 5
 * Dell PCI vendor ID
 */
#define DELL_VENDORID			0x1028

/*
d2330 7
d2350 3
a2352 13
	u_int32_t		bge_flags;
#define BGE_TXRING_VALID	0x00000001
#define BGE_RXRING_VALID	0x00000002
#define BGE_JUMBO_RXRING_VALID	0x00000004
#define BGE_EXTRAM		0x00000008	/* Has external SSRAM. */
#define BGE_TBI			0x00000010
#define BGE_RX_ALIGNBUG		0x00000020
#define BGE_NO3LED		0x00000040
#define BGE_PCIX		0x00000080
#define BGE_PCIE		0x00000100
#define BGE_ASF_MODE		0x00000200
#define BGE_JUMBO		0x00000400

d2355 4
d2378 1
a2378 1
	int			bge_ring_flags;
@


1.54
log
@Dell PCI vendor subid.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.53 2006/08/27 21:06:16 brad Exp $	*/
d2358 1
@


1.53
log
@pack several boolean fields into the existing bge_flags field.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.52 2006/08/16 02:37:00 brad Exp $	*/
a1966 1
#define SK_SUBSYSID_9D21		0x4421
d1968 5
@


1.52
log
@remove the sparc64 workarounds for the jumbo frame receive ring sizes now
that the iommu code has been fixed.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.51 2006/07/18 01:24:46 brad Exp $	*/
a2329 7
/*
 * Flags for bge_flags.
 */
#define BGE_TXRING_VALID	0x0001
#define BGE_RXRING_VALID	0x0002
#define BGE_JUMBO_RXRING_VALID	0x0004

d2343 12
a2354 3
	u_int8_t		bge_extram;	/* has external SSRAM */
	u_int8_t		bge_tbi;
	u_int8_t		bge_rx_alignment_bug;
a2356 4
	u_int8_t		bge_no_3_led;
	u_int8_t		bge_asf_mode;
	u_int8_t		bge_pcie;
	u_int8_t		bge_pcix;
d2376 1
a2376 1
	int			bge_flags;
@


1.51
log
@increase the number of Jumbo slots a little bit for sparc64.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.50 2006/07/01 06:26:51 brad Exp $	*/
a2245 3
#ifdef __sparc64__
#define BGE_JSLOTS	57
#else
a2246 1
#endif
@


1.50
log
@recognize the 5750 C2.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.49 2006/06/22 04:15:47 brad Exp $	*/
a2200 1
#define BGE_MIN_FRAMELEN		60
d2247 1
a2247 1
#define BGE_JSLOTS	54
@


1.49
log
@recognize the BCM5703 B0.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.48 2006/06/19 05:05:53 brad Exp $	*/
d270 1
@


1.48
log
@some new ASIC revisions.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.47 2006/05/28 00:20:21 brad Exp $	*/
d253 1
@


1.47
log
@- remove ETHER_MAX_LEN_JUMBO and ETHERMTU_JUMBO.
- use if_hardmtu for MTU ioctl handlers.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.46 2006/04/21 03:22:18 brad Exp $	*/
d290 2
@


1.46
log
@recognize the BCM5752 A2
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.45 2006/04/13 23:35:19 brad Exp $	*/
d2194 2
d2249 1
a2249 1
#define BGE_JRAWLEN (ETHER_MAX_LEN_JUMBO + ETHER_ALIGN)
@


1.45
log
@typo
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.44 2006/04/05 01:47:38 brad Exp $	*/
d272 1
@


1.44
log
@add a power hook for bge(4).

From Thordur I. Bjornsson <thib at mi dot is>
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.43 2006/03/10 21:39:01 brad Exp $	*/
d1205 1
a1205 1
#define BGE_HCCMODE_MSI_BITS		0x0x000070
@


1.43
log
@in bge_intr() also check the PCI State register to see if there
are really any interrupts to service.

Based on the Linux tg3 driver though the Broadcom bcm5700 driver
does the same thing.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.42 2006/02/21 01:45:48 brad Exp $	*/
d2381 2
@


1.42
log
@- Overhaul link state detection code.
- Make use of if_link_state_change() so CARP will now see link state
changes for fibre cards.

revs 1.102, 1.104, 1.113, 1.120, and 1.124.

From FreeBSD

Tested with 5700/5701/5703/5704/5750 and a 5752.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.41 2006/02/11 09:01:30 brad Exp $	*/
d346 1
a346 1
#define BGE_PCISTATE_INTR_STATE		0x00000002
@


1.41
log
@recognize another 5714 family chipset.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.40 2006/02/01 01:09:15 brad Exp $	*/
d2378 2
a2379 1
	int			bge_link;
@


1.40
log
@some more constants.

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.39 2006/01/25 21:01:24 brad Exp $	*/
d272 2
a273 1
#define BGE_CHIPID_BCM5714		0x80000000
@


1.39
log
@- Count packets discarded by RX/TX MAC (cause of FIFO overflow, etc)
  as input/output interface errors.
- Keep values of rx/tx discards & tx collisions inside struct bge_softc.
  So we can keep statistic across ifconfig down/up runs (cause bringing
  bge up will reset chip).

From oleg FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.38 2006/01/21 16:35:39 brad Exp $	*/
d203 9
d317 4
d1351 4
d1681 15
@


1.38
log
@some cleaning after removing code for reading the VPD.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.37 2005/12/28 20:27:38 brad Exp $	*/
d2347 3
@


1.37
log
@eliminate the last few quirk flags.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.36 2005/12/12 05:25:08 brad Exp $	*/
a2172 12
/* VPD structures */
struct vpd_res {
	u_int8_t		vr_id;
	u_int8_t		vr_len;
	u_int8_t		vr_pad;
};
 
struct vpd_key {
	char			vk_key[2];
	u_int8_t		vk_len;
};
 
a2177 1

a2346 2
	char			*bge_vpd_prodname;
	char			*bge_vpd_readonly;
@


1.36
log
@If a PCI-X card is detected then set bge_pcix.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.35 2005/12/11 01:37:21 brad Exp $	*/
a2332 1
	u_int32_t		bge_quirks;
@


1.35
log
@recognize BCM5750 C1 on Ted's Fujitsu Lifebook S7000
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.34 2005/12/08 01:00:47 brad Exp $	*/
d1692 1
d2337 1
@


1.34
log
@add BCM5903M PCI id and recognize BCM5714 and BCM5715 ASICs.

From Broadcom's Linux driver
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.33 2005/11/27 00:26:36 brad Exp $	*/
d259 1
@


1.33
log
@add initial support for  ASF.
this should allow IPMI BMC pass-through to work once the OS is running.

From Doug Ambrisko on the FreeBSD net list. Based on the Linux tg3 driver.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.32 2005/11/24 12:25:07 fgsch Exp $	*/
d263 2
d274 1
a274 1
#define BGE_ASICREV_BCM5714		0x05	/* 5714, 5715 */
d277 1
@


1.32
log
@don't redefine BGE_PCIMISCCTL_ENDIAN_WORDSWAP and lower the delay while
waiting for the firmware. tested and ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.31 2005/11/19 23:04:48 brad Exp $	*/
d79 2
d1654 1
d1936 1
d2310 4
d2330 1
@


1.31
log
@Correct a performance bug from Bill Paul's original FreeBSD bge(4) driver:

Each call to the FreeBSD bge_start() routine the transmit producer
pointer index from the chip mailbox register BGE_MBX_TX_HOST_PROD0_LO.
The local copy of that value is then updated by bge_encap() as
bge_encap() encapsulates packets in the Tx ring. If bge_encap()
succeds in encpuslating one or more packets, bge_start() tells the
chip to start sending the newly-encinitiates writes the new value back
to the chip mailbox register.

However, comparison of the Linux drivers (Broadcom-supplied and
open-source tg3.c) and to the OpenSolaris driver confirms that
register BGE_MBX_TX_HOST_PROD0_LO is write-only to software.
Thus, we can just keep a copy in the softc, and eliminate the
(expensive) PCI register write on each call to bge_start().

From jonathan NetBSD

tested by krw@@, sturm@@ and I on a few different bge NICs.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.30 2005/10/09 23:41:55 brad Exp $	*/
a211 1
#define BGE_HIF_SWAP_OPTIONS	(BGE_PCIMISCCTL_ENDIAN_WORDSWAP)
d223 1
a223 1
	(BGE_HIF_SWAP_OPTIONS|BGE_PCIMISCCTL_CLEAR_INTA| \
@


1.30
log
@BGE_RSLOTS is only used in one spot, BGE_TX_RING_CNT
should be used instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.29 2005/10/09 20:07:32 brad Exp $	*/
d2331 1
@


1.29
log
@special case sparc64 for now and lower the Jumbo slots
down from 384 to 54.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.28 2005/09/04 20:28:29 brad Exp $	*/
a2216 1
#define BGE_RSLOTS	256
@


1.28
log
@add a comment
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.27 2005/08/30 03:18:30 brad Exp $	*/
d2212 3
d2216 1
@


1.27
log
@- add BCM5780 PCI ids
- recognize BCM5704 B0
- recognize BCM5780 which is supposedly part of the BCM5714 family
according to the Linux driver but there is a BCM5714 core too. huh?

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.26 2005/08/27 14:12:36 brad Exp $	*/
d271 1
a271 1
#define BGE_ASICREV_BCM5714		0x05
@


1.26
log
@recognize 5752 A1 ASIC rev.

Noticed by niklas@@ on some newer hardware

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.25 2005/07/02 00:34:29 brad Exp $	*/
d247 1
d261 1
d273 1
d284 2
@


1.25
log
@add support for PCI-E 5752 core and recognize a few additional
5750 revisions.

Info from the Broadcom Linux driver
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.24 2005/06/29 03:36:06 brad Exp $	*/
d259 1
@


1.24
log
@- sync bus_dma ops and add bus_dmamap_sync()'s

and

rev 1.25

*  bcm5700 chips rev Bx wedge up if given DMA descriptors of
   eight bytes or less. Once hit, only reovery is a watchdog timeout/reset.
   If the offending packet is retransmitted, the chip will wedge again...
   Check for teeny fragments in a Tx request, and either fold the
   teeny chunk residue into an adjacent mbuf, or m_dup the entire buffer.

From NetBSD

Tested on alpha/amd64/macppc by krw@@ and ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bgereg.h,v 1.23 2005/06/17 15:15:43 brad Exp $	*/
a226 2
#define BGE_CHIPID_TIGON_I		0x40000000
#define BGE_CHIPID_TIGON_II		0x60000000
d230 3
a232 2
#define BGE_CHIPID_BCM5700_B1		0x71020000
#define BGE_CHIPID_BCM5700_B2		0x71030000
d242 1
a242 1
#define BGE_CHIPID_BCM5703_A3		0x11000000
d253 2
d256 1
d258 1
d269 1
d277 3
a2277 2
#define BGE_HWREV_TIGON		0x01
#define BGE_HWREV_TIGON_II	0x02
@


1.23
log
@- fix description for BCM5750 A0, A1 -> A0
- recognize BCM5750 B1
@
text
@d1 2
a2 1
/* $OpenBSD: if_bgereg.h,v 1.22 2005/06/07 20:39:07 brad Exp $ */
d2200 1
d2278 6
a2283 1
	LIST_ENTRY(bge_jpool_entry)	jpool_entries;
d2286 7
d2319 2
a2320 2
	LIST_HEAD(__bge_jfreehead, bge_jpool_entry)	bge_jfree_listhead;
	LIST_HEAD(__bge_jinusehead, bge_jpool_entry)	bge_jinuse_listhead;
d2328 1
d2334 2
@


1.22
log
@put the whole thing in this time.

add support for the BCM5714.
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.21 2005/04/05 01:12:52 brad Exp $ */
d253 1
@


1.21
log
@fix parenthesis for BGE_RCB_MAXLEN_FLAGS

ok krw@@
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.20 2005/03/07 13:31:40 krw Exp $ */
d253 1
d263 1
@


1.20
log
@Enable basic big-endian operation. i.e. now works on some big-endian
machines (macppc) but not others (sparc64). No-op for little-endian
architectures.

Diff from NetBSD with tweaks by drahn@@.

ok brad@@
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.19 2005/03/04 00:55:44 krw Exp $ */
d1788 1
a1788 1
#define BGE_RCB_MAXLEN_FLAGS(maxlen, flags)	((maxlen << 16) | (flags))
@


1.19
log
@Put the dmamap for a transmission at the correct array index. Fixes a
crash on sparc64. From FreeBSD.
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.18 2004/12/26 22:48:31 brad Exp $ */
d211 14
a224 8
#define BGE_BIGENDIAN_INIT						\
	(BGE_PCIMISCCTL_ENDIAN_BYTESWAP|				\
	BGE_PCIMISCCTL_ENDIAN_WORDSWAP|BGE_PCIMISCCTL_CLEAR_INTA|	\
	BGE_PCIMISCCTL_INDIRECT_ACCESS|BGE_PCIMISCCTL_MASK_PCI_INTR)

#define BGE_LITTLEENDIAN_INIT						\
	(BGE_PCIMISCCTL_CLEAR_INTA|BGE_PCIMISCCTL_MASK_PCI_INTR|	\
	BGE_PCIMISCCTL_ENDIAN_WORDSWAP|BGE_PCIMISCCTL_INDIRECT_ACCESS)
d1767 4
a1770 1
		(x).bge_addr_hi = ((u_int64_t) (y) >> 32);		\
d1795 1
d1800 6
d1827 1
d1836 10
d1869 1
d1872 4
d1881 1
d1886 6
@


1.18
log
@boundry -> boundary
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.17 2004/12/17 03:13:59 brad Exp $ */
a2234 5
};

struct bge_bcom_hack {
	int			reg;
	int			val;
@


1.17
log
@rev 1.62

Possibloe fix for some bge chip revisions taking a long time to reset
(e.g., polling for a half-second or more at splnet(), blocking most
interrupts, durin an ifconfig down/ifconfig up).

Appears to help for a 5704C rev A3, which is the only chip I've
ever seen that had even a mild version of the reported problem.

rev 1.61

Check for BGE_PCI_PCISTATE register failing to revert on reset.
if it occurs, print a message indicating why the reset took so long.

From NetBSD
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.16 2004/12/16 14:30:32 brad Exp $ */
d2189 1
a2189 1
 * critical that no TxCB be split across a page boundry since
@


1.16
log
@rev 1.71

* Set buffer management high water marks for MTU > 1514.

* Set BGE_MAX_RX_FRAME_LOWAT (from Linux driver).

rev 1.25

* Update onchip buffer tunables to recommended values from Linux drivers.

* Increase Tx interrupt-coalescing thresholds, to reduce Tx-done interrupts.

From NetBSD

ok krw@@
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.15 2004/12/12 19:11:26 brad Exp $ */
d312 9
@


1.15
log
@use quirk flags where appropriate.

Based on NetBSD driver

ok krw@@
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.14 2004/12/12 05:03:05 brad Exp $ */
d535 1
@


1.14
log
@add quirk lookup table, isn't used for anything at the moment
except printing the ASIC model and rev in dmesg. will be used
instead of checking ASIC revs all over the place.

From NetBSD
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.13 2004/11/11 18:35:41 brad Exp $ */
a2245 2
	u_int8_t		bge_asicrev;
	u_int8_t		bge_chiprev;
@


1.13
log
@rev 1.71

Add some special case code to fix a problem with the BCM5704 in TBI (fiber)
mode. The 5704 apparently has some s00p3r s33kr1t registers for setting
the advertisement of pause frame ability (i.e flow control) when in
autoneg mode. If we don't set these registers correctly, we may not
be able to negotiate a proper link with some switches. (Symptom is that
the NIC reports the link as up (PCS synched) but no traffic can be
exchanged.)

rev 1.73

Commit patch to supress spurious link change events. Apparently, with
copper NICs, a link change event is posted whenever MII autopolling is
toggled off and on, which happens whenever someone calls
bge_miibus_readreg() or bge_miibus_writereg() to access the PHY
registers. This means anytime someone called the SIOCGIFMEDIA ioctl
on a bge interface, the link would reset. Even a simple "ifconfig bge0"
would do it, though other apps like dhclient or the PPPoE daemon could
trigger it as well. An obvious symptom of this problem is lots of
"bgeX: gigabit link up" messages appearing on the console for no
apparent reason.

Through experimentation, I determined that when a real link change
event occurs, the BGE_MIMODE_AUTOPOLL in the BGE_MI_MODE register
is always set, so now if we have a copper NIC and an link change
event occurs and the BGE_MIMODE_AUTOPOLL bit is clear, we ignore
the event.

Note that this does not apply to the original BCM5700 chip since we
use a different method for sensing link changes with that chip (the
status block method was broken), nor to fiber optic NICs since they
don't use the GMII PHY access registers.

From FreeBSD

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.12 2004/10/31 06:59:25 brad Exp $ */
d222 2
d236 1
d2248 1
@


1.12
log
@rev 1.68

Add support for BCM5705K

rev 1.74

Add support for the BCM5750/5751.  Unfortunately the documentation
I have from Broadcom does not give much information on these devices,
so the Broadcom Linux driver was used for clues to what these chips
support.  It turns out they are similar to the 5705 with the 5751
being the PCI-Express version and needing special work-arounds and
settings.

From FreeBSD
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.11 2004/09/28 04:37:32 brad Exp $ */
d532 4
d665 33
@


1.11
log
@Use ETHER_MAX_DIX_LEN/ETHER_MIN_LEN
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.10 2004/08/05 19:57:17 brad Exp $ */
d173 4
d242 2
d252 1
d2209 1
@


1.10
log
@remove some separate per driver constants and use
ETHER_MAX_LEN_JUMBO/ETHERMTU_JUMBO where appropriate.

ok mcbride@@ henning@@ mickey@@
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.9 2004/05/19 11:36:59 brad Exp $ */
a2038 1
#define BGE_MAX_FRAMELEN	1536
@


1.9
log
@remove duplication, use ETHER_ALIGN from if_ether.h
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.8 2004/03/19 21:57:36 miod Exp $ */
a2038 1
#define BGE_FRAMELEN		1518
a2039 2
#define BGE_JUMBO_FRAMELEN	9018
#define BGE_JUMBO_MTU		(BGE_JUMBO_FRAMELEN-ETHER_HDR_LEN-ETHER_CRC_LEN)
d2102 1
a2102 1
#define BGE_JRAWLEN (BGE_JUMBO_FRAMELEN + ETHER_ALIGN)
@


1.8
log
@Use __LP64__ to check for 64-bit systems.
Why people can't resolve to use this is beyond me.

There are other cases of this misconstruct, but they probably won't be
addressed for the release.

"why are you looking in there! that's gigabit!" then later ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.7 2003/10/13 16:18:56 krw Exp $ */
a2037 2

#define ETHER_ALIGN 2
@


1.7
log
@Bring bge and brgphy more up to date with changes from FreeBSD and NetBSD.

Some bug fixes, support for new hardware like the 5704 and 5705.

Testing by deraadt@@, danh@@, and drahn@@ amoung others.

ok deraadt@@.
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.6 2003/09/03 21:24:28 jason Exp $ */
d2142 1
a2142 1
#ifdef __alpha__ /* XXX - should be conditional on pointer size */
@


1.6
log
@match a bunch more bge devices.  May not work completely, but they're no
more broken than before; ok deraadt.
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.5 2002/11/26 04:38:40 nate Exp $ */
d76 2
d216 22
a237 21
#define BGE_ASICREV_TIGON_I		0x40000000
#define BGE_ASICREV_TIGON_II		0x60000000
#define BGE_ASICREV_BCM5700_B0		0x71000000
#define BGE_ASICREV_BCM5700_B1		0x71020000
#define BGE_ASICREV_BCM5700_B2		0x71030000
#define BGE_ASICREV_BCM5700_ALTIMA	0x71040000
#define BGE_ASICREV_BCM5700_C0		0x72000000
#define BGE_ASICREV_BCM5701_A0		0x00000000	/* grrrr */
#define BGE_ASICREV_BCM5701_B0		0x01000000
#define BGE_ASICREV_BCM5701_B2		0x01020000
#define BGE_ASICREV_BCM5701_B5		0x01050000
#define BGE_ASICREV_BCM5703_A0		0x10000000
#define BGE_ASICREV_BCM5703_A1		0x10010000
#define BGE_ASICREV_BCM5703_A2		0x10020000
#define BGE_ASICREV_BCM5704_A0		0x20000000
#define BGE_ASICREV_BCM5704_A1		0x20010000
#define BGE_ASICREV_BCM5704_A2		0x20020000
#define BGE_ASICREV_BCM5704_A3		0x20030000
#define BGE_ASICREV_BCM5705_A0		0x30000000
#define BGE_ASICREV_BCM5705_A1		0x30010000
#define BGE_ASICREV_BCM5705_A2		0x30020000
d240 13
a252 1
#define BGE_ASICREV_BCM5700		0x71000000
d260 1
d262 1
d266 1
d268 1
d1055 1
a1055 1
#define BGE_HCC_TX_MAX_COAL_BDS_INT	0x3C34 /* BDs during interrupt */
d1701 5
a1705 1
#define BGE_HOSTADDR(x)	x.bge_addr_lo
d1710 1
a1710 2
	u_int16_t		bge_flags;
	u_int16_t		bge_max_len;
d1722 1
a1722 6
struct bge_rcb_opaque {
	u_int32_t		bge_reg0;
	u_int32_t		bge_reg1;
	u_int32_t		bge_reg2;
	u_int32_t		bge_reg3;
};
d1848 3
d1869 2
a1870 4
struct bge_stats {
	u_int8_t		Reserved0[256];

	/* Statistics maintained by Receive MAC. */
d1898 1
d1900 2
a1901 3
	bge_hostaddr		Unused1[37];

	/* Statistics maintained by Transmit MAC. */
d1935 41
d1977 8
d2178 1
a2178 1
#define BGE_TIMEOUT		1000
d2204 4
a2207 1
	u_int32_t		bge_asicrev;
d2214 1
@


1.5
log
@Numerous bug fixes from freebsd and a few from me.
- Add support for the BCM5702X and BCM5703X chips
- Take care of an alignment bug in the PCI-X implementation of a couple revs
  of the chip
- Disable memory write invalidate.  (Supposedly doesn't always work)
- Add missing splx(s)
- Fix some typos
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.4 2002/04/08 21:46:23 nate Exp $ */
d228 7
@


1.4
log
@Make fiber cards work (3com 3c996-SX)
Make the BCM5701 chips work.  (3com 3c996B-T)
From FreeBSD
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.3 2002/03/06 23:13:58 nate Exp $ */
d34 1
a34 1
 * $FreeBSD: if_bgereg.h,v 1.4 2002/04/04 06:01:31 wpaul Exp $
d206 1
a206 1
	(BGE_BGE_PCIMISCCTL_ENDIAN_BYTESWAP|				\
d208 1
a208 1
	BGE_PCIMISCCTL_INDIRECT_ACCESS|PCIMISCCTL_MASK_PCI_INTR)
d225 3
a292 5

#ifndef PCIM_CMD_MWIEN
#define PCIM_CMD_MWIEN			0x0010
#endif

a1781 26

/*
 * Broadcom Vendor ID
 * (Note: the BCM570x still defaults to the Alteon PCI vendor ID
 * even though they're now manufactured by Broadcom)
 */
#define BCOM_VENDORID			0x14E4
#define BCOM_DEVICEID_BCM5700		0x1644
#define BCOM_DEVICEID_BCM5701		0x1645

/*
 * Alteon AceNIC PCI vendor/device ID.
 */
#define ALT_VENDORID			0x12AE
#define ALT_DEVICEID_ACENIC		0x0001
#define ALT_DEVICEID_ACENIC_COPPER	0x0002
#define ALT_DEVICEID_BCM5700		0x0003
#define ALT_DEVICEID_BCM5701		0x0004

/*
 * 3Com 3c985 PCI vendor/device ID.
 */
#define TC_VENDORID			0x10B7
#define TC_DEVICEID_3C985		0x0001
#define TC_DEVICEID_3C996		0x0003

d1783 1
a1783 1
 * SysKonnect PCI vendor ID
a1784 2
#define SK_VENDORID			0x1148
#define SK_DEVICEID_ALTIMA		0x4400
a1788 6
 * Altima PCI vendor/device ID.
 */
#define ALTIMA_VENDORID			0x173b
#define ALTIMA_DEVICE_AC1000		0x03e8

/*
d2014 1
a2014 1
	CSR_WRITE_4(sc, reg, (CSR_READ_4(sc, reg) | x))
d2016 1
a2016 1
	CSR_WRITE_4(sc, reg, (CSR_READ_4(sc, reg) & ~x))
d2019 1
a2019 1
	pci_conf_write(pc, tag, reg, (pci_conf_read(pc, tag, reg) | x))
d2021 1
a2021 1
	pci_conf_write(pc, tag, reg, (pci_conf_read(pc, tag, reg) & ~x))
d2128 1
@


1.3
log
@vtophys is no longer used
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.2 2001/10/09 21:16:20 nate Exp $ */
d34 1
a34 1
 * $FreeBSD$
d221 7
d1819 6
d1830 15
d2165 1
@


1.2
log
@Make bge use busdma
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.1 2001/10/05 18:57:28 nate Exp $ */
a2159 5

#ifdef __alpha__
#undef vtophys
#define vtophys(va)		alpha_XXX_dmamap((vm_offset_t)va)
#endif
@


1.2.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: if_bgereg.h,v 1.2 2001/10/09 21:16:20 nate Exp $ */
d34 1
a34 1
 * $FreeBSD: if_bgereg.h,v 1.4 2002/04/04 06:01:31 wpaul Exp $
a220 7
#define BGE_ASICREV_BCM5701_A0		0x00000000	/* grrrr */
#define BGE_ASICREV_BCM5701_B0		0x01000000
#define BGE_ASICREV_BCM5701_B2		0x01020000
#define BGE_ASICREV_BCM5701_B5		0x01050000

/* shorthand one */
#define BGE_ASICREV_BCM5700		0x71000000
a1811 6
 * Altima PCI vendor/device ID.
 */
#define ALTIMA_VENDORID			0x173b
#define ALTIMA_DEVICE_AC1000		0x03e8

/*
a1816 15
#define BGE_HWCFG_VOLTAGE		0x00000003
#define BGE_HWCFG_PHYLED_MODE		0x0000000C
#define BGE_HWCFG_MEDIA			0x00000030

#define BGE_VOLTAGE_1POINT3		0x00000000
#define BGE_VOLTAGE_1POINT8		0x00000001

#define BGE_PHYLEDMODE_UNSPEC		0x00000000
#define BGE_PHYLEDMODE_TRIPLELED	0x00000004
#define BGE_PHYLEDMODE_SINGLELED	0x00000008

#define BGE_MEDIA_UNSPEC		0x00000000
#define BGE_MEDIA_COPPER		0x00000010
#define BGE_MEDIA_FIBER			0x00000020

a2136 1
	u_int32_t		bge_asicrev;
d2160 5
@


1.2.6.2
log
@sync
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d34 1
a34 1
 * $FreeBSD: if_bgereg.h,v 1.11 2002/11/14 23:54:50 sam Exp $
d206 1
a206 1
	(BGE_PCIMISCCTL_ENDIAN_BYTESWAP|				\
d208 1
a208 1
	BGE_PCIMISCCTL_INDIRECT_ACCESS|BGE_PCIMISCCTL_MASK_PCI_INTR)
a224 3
#define BGE_ASICREV_BCM5703_A0		0x10000000
#define BGE_ASICREV_BCM5703_A1		0x10010000
#define BGE_ASICREV_BCM5703_A2		0x10020000
d290 5
d1784 26
d1811 1
a1811 1
 * SysKonnect Subsystem IDs
d1813 2
d1819 6
d2050 1
a2050 1
	CSR_WRITE_4(sc, reg, (CSR_READ_4(sc, reg) | (x)))
d2052 1
a2052 1
	CSR_WRITE_4(sc, reg, (CSR_READ_4(sc, reg) & ~(x)))
d2055 1
a2055 1
	pci_conf_write(pc, tag, reg, (pci_conf_read(pc, tag, reg) | (x)))
d2057 1
a2057 1
	pci_conf_write(pc, tag, reg, (pci_conf_read(pc, tag, reg) & ~(x)))
a2163 1
	u_int8_t		bge_rx_alignment_bug;
@


1.2.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.2.4.2
log
@Merge in -current from roughly a week ago
@
text
@d2160 5
@


1.2.4.3
log
@Sync the SMP branch with 3.3
@
text
@d34 1
a34 1
 * $FreeBSD: if_bgereg.h,v 1.11 2002/11/14 23:54:50 sam Exp $
d206 1
a206 1
	(BGE_PCIMISCCTL_ENDIAN_BYTESWAP|				\
d208 1
a208 1
	BGE_PCIMISCCTL_INDIRECT_ACCESS|BGE_PCIMISCCTL_MASK_PCI_INTR)
a220 10
#define BGE_ASICREV_BCM5701_A0		0x00000000	/* grrrr */
#define BGE_ASICREV_BCM5701_B0		0x01000000
#define BGE_ASICREV_BCM5701_B2		0x01020000
#define BGE_ASICREV_BCM5701_B5		0x01050000
#define BGE_ASICREV_BCM5703_A0		0x10000000
#define BGE_ASICREV_BCM5703_A1		0x10010000
#define BGE_ASICREV_BCM5703_A2		0x10020000

/* shorthand one */
#define BGE_ASICREV_BCM5700		0x71000000
d283 5
d1777 10
d1788 1
a1788 1
 * SysKonnect Subsystem IDs
d1790 18
a1816 15
#define BGE_HWCFG_VOLTAGE		0x00000003
#define BGE_HWCFG_PHYLED_MODE		0x0000000C
#define BGE_HWCFG_MEDIA			0x00000030

#define BGE_VOLTAGE_1POINT3		0x00000000
#define BGE_VOLTAGE_1POINT8		0x00000001

#define BGE_PHYLEDMODE_UNSPEC		0x00000000
#define BGE_PHYLEDMODE_TRIPLELED	0x00000004
#define BGE_PHYLEDMODE_SINGLELED	0x00000008

#define BGE_MEDIA_UNSPEC		0x00000000
#define BGE_MEDIA_COPPER		0x00000010
#define BGE_MEDIA_FIBER			0x00000020

d2022 1
a2022 1
	CSR_WRITE_4(sc, reg, (CSR_READ_4(sc, reg) | (x)))
d2024 1
a2024 1
	CSR_WRITE_4(sc, reg, (CSR_READ_4(sc, reg) & ~(x)))
d2027 1
a2027 1
	pci_conf_write(pc, tag, reg, (pci_conf_read(pc, tag, reg) | (x)))
d2029 1
a2029 1
	pci_conf_write(pc, tag, reg, (pci_conf_read(pc, tag, reg) & ~(x)))
a2135 1
	u_int8_t		bge_rx_alignment_bug;
a2136 1
	u_int32_t		bge_asicrev;
@


1.2.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a75 2
#define BGE_SOFTWARE_GENCOMM_SIG	0x00000B54
#define BGE_SOFTWARE_GENCOMM_NICCFG	0x00000B58
d214 14
a227 22
#define BGE_CHIPID_TIGON_I		0x40000000
#define BGE_CHIPID_TIGON_II		0x60000000
#define BGE_CHIPID_BCM5700_B0		0x71000000
#define BGE_CHIPID_BCM5700_B1		0x71020000
#define BGE_CHIPID_BCM5700_B2		0x71030000
#define BGE_CHIPID_BCM5700_ALTIMA	0x71040000
#define BGE_CHIPID_BCM5700_C0		0x72000000
#define BGE_CHIPID_BCM5701_A0		0x00000000	/* grrrr */
#define BGE_CHIPID_BCM5701_B0		0x01000000
#define BGE_CHIPID_BCM5701_B2		0x01020000
#define BGE_CHIPID_BCM5701_B5		0x01050000
#define BGE_CHIPID_BCM5703_A0		0x10000000
#define BGE_CHIPID_BCM5703_A1		0x10010000
#define BGE_CHIPID_BCM5703_A2		0x10020000
#define BGE_CHIPID_BCM5704_A0		0x20000000
#define BGE_CHIPID_BCM5704_A1		0x20010000
#define BGE_CHIPID_BCM5704_A2		0x20020000
#define BGE_CHIPID_BCM5704_A3		0x20030000
#define BGE_CHIPID_BCM5705_A0		0x30000000
#define BGE_CHIPID_BCM5705_A1		0x30010000
#define BGE_CHIPID_BCM5705_A2		0x30020000
#define BGE_CHIPID_BCM5705_A3		0x30030000
d230 1
a230 13
#define BGE_ASICREV(x)			((x) >> 28)
#define BGE_ASICREV_BCM5700		0x07
#define BGE_ASICREV_BCM5701		0x00
#define BGE_ASICREV_BCM5703		0x01
#define BGE_ASICREV_BCM5704		0x02
#define BGE_ASICREV_BCM5705		0x03

/* chip revisions */
#define BGE_CHIPREV(x)			((x) >> 24)
#define BGE_CHIPREV_5700_AX		0x70
#define BGE_CHIPREV_5700_BX		0x71
#define BGE_CHIPREV_5700_CX		0x72
#define BGE_CHIPREV_5701_AX		0x00
a237 1
#define BGE_PCIDMARWCTL_RD_WAT_SHIFT	16
a238 1
#define BGE_PCIDMARWCTL_WR_WAT_SHIFT	19
a241 1
#define BGE_PCIDMARWCTL_DFLT_PCI_RD_CMD_SHIFT	24
a242 1
#define BGE_PCIDMARWCTL_DFLT_PCI_WR_CMD_SHIFT	28
d1029 1
a1029 1
#define BGE_HCC_TX_MAX_COAL_BDS_INT	0x3C24 /* BDs during interrupt */
d1675 1
a1675 5
#define BGE_HOSTADDR(x,y)						\
	do {								\
		(x).bge_addr_lo = ((u_int64_t) (y) & 0xffffffff);	\
		(x).bge_addr_hi = ((u_int64_t) (y) >> 32);		\
	} while(0)
d1680 2
a1681 1
	u_int32_t		bge_maxlen_flags;
d1693 6
a1698 1
#define BGE_RCB_MAXLEN_FLAGS(maxlen, flags)	((maxlen << 16) | (flags))
a1823 3
/* 5705 has smaller return ring size */
#define BGE_RETURN_RING_CNT_5705	512

d1842 4
a1845 2
/* Statistics maintained MAC Receive block. */
struct bge_rx_mac_stats {
a1872 1
};
d1874 3
a1876 2
/* Statistics maintained MAC Transmit block. */
struct bge_tx_mac_stats {
a1909 41
};

/* Stats counters access through registers */
struct bge_mac_stats_regs {
	u_int32_t		ifHCOutOctets;
	u_int32_t		Reserved0;
	u_int32_t		etherStatsCollisions;
	u_int32_t		outXonSent;
	u_int32_t		outXoffSent;
	u_int32_t		Reserved1;
	u_int32_t		dot3StatsInternalMacTransmitErrors;
	u_int32_t		dot3StatsSingleCollisionFrames;
	u_int32_t		dot3StatsMultipleCollisionFrames;
	u_int32_t		dot3StatsDeferredTransmissions;
	u_int32_t		Reserved2;
	u_int32_t		dot3StatsExcessiveCollisions;
	u_int32_t		dot3StatsLateCollisions;
	u_int32_t		Reserved3[14];
	u_int32_t		ifHCOutUcastPkts;
	u_int32_t		ifHCOutMulticastPkts;
	u_int32_t		ifHCOutBroadcastPkts;
	u_int32_t		Reserved4[2];
	u_int32_t		ifHCInOctets;
	u_int32_t		Reserved5;
	u_int32_t		etherStatsFragments;
	u_int32_t		ifHCInUcastPkts;
	u_int32_t		ifHCInMulticastPkts;
	u_int32_t		ifHCInBroadcastPkts;
	u_int32_t		dot3StatsFCSErrors;
	u_int32_t		dot3StatsAlignmentErrors;
	u_int32_t		xonPauseFramesReceived;
	u_int32_t		xoffPauseFramesReceived;
	u_int32_t		macControlFramesReceived;
	u_int32_t		xoffStateEntered;
	u_int32_t		dot3StatsFramesTooLong;
	u_int32_t		etherStatsJabbers;
	u_int32_t		etherStatsUndersizePkts;
};

struct bge_stats {
	u_int8_t		Reserved0[256];
a1910 8
	/* Statistics maintained by Receive MAC. */
	struct bge_rx_mac_stats rxstats;

	bge_hostaddr		Unused1[37];

	/* Statistics maintained by Transmit MAC. */
	struct bge_tx_mac_stats txstats;
 
d2104 1
a2104 1
#define BGE_TIMEOUT		100000
d2130 1
a2130 4
	u_int32_t		bge_chipid;
	u_int8_t		bge_asicrev;
	u_int8_t		bge_chiprev;
	u_int8_t		bge_no_3_led;
a2136 1
	u_int16_t		bge_return_ring_cnt;
@


1.2.4.5
log
@Merge with the trunk
@
text
@d2039 2
d2142 1
a2142 1
#ifdef __LP64__
@


1.1
log
@Add a driver for the Broadcom BCM570x chips. (a.k.a. Tigon3).
This driver supports the following cards:
    3Com 3c996-T (10/100/1000baseTX)
    Dell PowerEdge 2550 integrated BCM5700 NIC (10/100/1000baseTX)
    SysKonnect SK-9D21 (10/100/1000baseTX)
    SysKonnect SK-9D41 (1000baseSX)

From FreeBSD
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d2065 17
d2092 3
d2100 4
d2139 1
@

