head	1.35;
access;
symbols
	OPENBSD_6_1:1.35.0.4
	OPENBSD_6_1_BASE:1.35
	OPENBSD_6_0:1.35.0.6
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.35.0.2
	OPENBSD_5_9_BASE:1.35
	OPENBSD_5_8:1.34.0.6
	OPENBSD_5_8_BASE:1.34
	OPENBSD_5_7:1.34.0.4
	OPENBSD_5_7_BASE:1.34
	OPENBSD_5_6:1.33.0.4
	OPENBSD_5_6_BASE:1.33
	OPENBSD_5_5:1.32.0.8
	OPENBSD_5_5_BASE:1.32
	OPENBSD_5_4:1.32.0.4
	OPENBSD_5_4_BASE:1.32
	OPENBSD_5_3:1.32.0.2
	OPENBSD_5_3_BASE:1.32
	OPENBSD_5_2:1.31.0.12
	OPENBSD_5_2_BASE:1.31
	OPENBSD_5_1_BASE:1.31
	OPENBSD_5_1:1.31.0.10
	OPENBSD_5_0:1.31.0.8
	OPENBSD_5_0_BASE:1.31
	OPENBSD_4_9:1.31.0.6
	OPENBSD_4_9_BASE:1.31
	OPENBSD_4_8:1.31.0.4
	OPENBSD_4_8_BASE:1.31
	OPENBSD_4_7:1.31.0.2
	OPENBSD_4_7_BASE:1.31
	OPENBSD_4_6:1.30.0.4
	OPENBSD_4_6_BASE:1.30
	OPENBSD_4_5:1.28.0.2
	OPENBSD_4_5_BASE:1.28
	OPENBSD_4_4:1.27.0.6
	OPENBSD_4_4_BASE:1.27
	OPENBSD_4_3:1.27.0.4
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.27.0.2
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.26.0.4
	OPENBSD_4_1_BASE:1.26
	OPENBSD_4_0:1.26.0.2
	OPENBSD_4_0_BASE:1.26
	OPENBSD_3_9:1.24.0.2
	OPENBSD_3_9_BASE:1.24
	OPENBSD_3_8:1.21.0.2
	OPENBSD_3_8_BASE:1.21
	OPENBSD_3_7:1.19.0.2
	OPENBSD_3_7_BASE:1.19
	OPENBSD_3_6:1.18.0.2
	OPENBSD_3_6_BASE:1.18
	SMP_SYNC_A:1.17
	SMP_SYNC_B:1.17
	OPENBSD_3_5:1.15.0.2
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.10
	UBC:1.7.0.4
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.2
	SMP_BASE:1.1
	kame_19991208:1.1;
locks; strict;
comment	@ * @;


1.35
date	2016.01.08.11.23.30;	author mpi;	state Exp;
branches;
next	1.34;
commitid	AVcDPpPujUhJtHVl;

1.34
date	2015.02.11.21.36.02;	author brad;	state Exp;
branches;
next	1.33;
commitid	IWQwoXPPKg2rjfrU;

1.33
date	2014.07.08.05.35.18;	author dlg;	state Exp;
branches;
next	1.32;
commitid	0QJleeeWqZmC5anF;

1.32
date	2012.10.18.21.44.21;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2009.07.22.21.32.50;	author miod;	state Exp;
branches;
next	1.30;

1.30
date	2009.06.04.18.12.56;	author sthen;	state Exp;
branches;
next	1.29;

1.29
date	2009.04.14.19.06.49;	author claudio;	state Exp;
branches;
next	1.28;

1.28
date	2009.02.24.21.10.14;	author claudio;	state Exp;
branches;
next	1.27;

1.27
date	2007.05.28.17.51.26;	author ckuethe;	state Exp;
branches;
next	1.26;

1.26
date	2006.07.10.03.06.28;	author brad;	state Exp;
branches;
next	1.25;

1.25
date	2006.03.25.03.21.56;	author brad;	state Exp;
branches;
next	1.24;

1.24
date	2005.10.20.21.47.56;	author brad;	state Exp;
branches;
next	1.23;

1.23
date	2005.10.18.01.01.27;	author brad;	state Exp;
branches;
next	1.22;

1.22
date	2005.10.14.22.59.38;	author brad;	state Exp;
branches;
next	1.21;

1.21
date	2005.05.22.05.40.52;	author brad;	state Exp;
branches;
next	1.20;

1.20
date	2005.04.05.00.13.57;	author brad;	state Exp;
branches;
next	1.19;

1.19
date	2004.09.28.04.37.33;	author brad;	state Exp;
branches;
next	1.18;

1.18
date	2004.07.04.22.57.20;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2004.05.19.11.37.00;	author brad;	state Exp;
branches;
next	1.16;

1.16
date	2004.04.26.05.16.41;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2004.01.01.11.44.49;	author markus;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.11.07.41.19;	author chris;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.09.02.09.08;	author krw;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.30.02.52.09;	author avsm;	state Exp;
branches;
next	1.11;

1.11
date	2002.11.20.15.19.33;	author fgsch;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.02.16.44.25;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.25.20.28.06;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.08.04.43.24;	author chris;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.23.22.41.25;	author aaron;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2001.03.14.15.17.31;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.12.05.51.18;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.06.15.48.28;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.25.17.39.25;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.06.19.12.12;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	99.12.04.20.27.37;	author aaron;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.05.14.22.25.46;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.10.31.03.22.46;	author nate;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2002.03.06.02.11.45;	author niklas;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2003.03.28.00.38.22;	author niklas;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2004.02.19.10.56.27;	author niklas;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2004.06.05.23.12.51;	author niklas;	state Exp;
branches;
next	;

1.7.4.1
date	2002.06.11.03.42.25;	author art;	state Exp;
branches;
next	1.7.4.2;

1.7.4.2
date	2002.10.29.00.33.28;	author art;	state Exp;
branches;
next	1.7.4.3;

1.7.4.3
date	2003.05.19.22.18.00;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.35
log
@Work around buggy zero-length packets produced by the DP83816A.

From Nathanael Rensen, ok dlg@@
@
text
@/*	$OpenBSD: if_sisreg.h,v 1.34 2015/02/11 21:36:02 brad Exp $ */
/*
 * Copyright (c) 1997, 1998, 1999
 *	Bill Paul <wpaul@@ee.columbia.edu>.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Bill Paul.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY Bill Paul AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL Bill Paul OR THE VOICES IN HIS HEAD
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $FreeBSD: src/sys/pci/if_sisreg.h,v 1.3 2000/08/22 23:26:51 wpaul Exp $
 */

/*
 * Register definitions for the SiS 900 and SiS 7016 chipsets. The
 * 7016 is actually an older chip and some of its registers differ
 * from the 900, however the core operational registers are the same:
 * the differences lie in the OnNow/Wake on LAN stuff which we don't
 * use anyway. The 7016 needs an external MII compliant PHY while the
 * SiS 900 has one built in. All registers are 32-bits wide.
 */

/* Registers common to SiS 900 and SiS 7016 */
#define SIS_CSR			0x00
#define SIS_CFG			0x04
#define SIS_EECTL		0x08
#define SIS_PCICTL		0x0C
#define SIS_ISR			0x10
#define SIS_IMR			0x14
#define SIS_IER			0x18
#define SIS_PHYCTL		0x1C
#define SIS_TX_LISTPTR		0x20
#define SIS_TX_CFG		0x24
#define SIS_RX_LISTPTR		0x30
#define SIS_RX_CFG		0x34
#define SIS_FLOWCTL		0x38
#define SIS_RXFILT_CTL		0x48
#define SIS_RXFILT_DATA		0x4C
#define SIS_PWRMAN_CTL		0xB0
#define SIS_PWERMAN_WKUP_EVENT	0xB4
#define SIS_WKUP_FRAME_CRC	0xBC
#define SIS_WKUP_FRAME_MASK0	0xC0
#define SIS_WKUP_FRAME_MASKXX	0xEC

/* SiS 7016 specific registers */
#define SIS_SILICON_REV		0x5C
#define SIS_MIB_CTL0		0x60
#define SIS_MIB_CTL1		0x64
#define SIS_MIB_CTL2		0x68
#define SIS_MIB_CTL3		0x6C
#define SIS_MIB			0x80
#define SIS_LINKSTS		0xA0
#define SIS_TIMEUNIT		0xA4
#define SIS_GPIO		0xB8

/* NS DP83815/6 registers */
#define NS_IHR			0x1C
#define NS_CLKRUN		0x3C
#define NS_SRR			0x58
#define NS_BMCR			0x80
#define NS_BMSR			0x84
#define NS_PHYIDR1		0x88
#define NS_PHYIDR2		0x8C
#define NS_ANAR			0x90
#define NS_ANLPAR		0x94
#define NS_ANER			0x98
#define NS_ANNPTR		0x9C

#define NS_PHY_CR		0xE4
#define NS_PHY_10BTSCR		0xE8
#define NS_PHY_PAGE		0xCC
#define NS_PHY_EXTCFG		0xF0
#define NS_PHY_DSPCFG		0xF4
#define NS_PHY_SDCFG		0xF8
#define NS_PHY_TDATA		0xFC

#define NS_CLKRUN_PMESTS	0x00008000
#define NS_CLKRUN_PMEENB	0x00000100
#define NS_CLNRUN_CLKRUN_ENB	0x00000001

/* NS silicon revisions */
#define NS_SRR_15C		0x302
#define NS_SRR_15D		0x403
#define NS_SRR_16A		0x505

#define SIS_CSR_TX_ENABLE	0x00000001
#define SIS_CSR_TX_DISABLE	0x00000002
#define SIS_CSR_RX_ENABLE	0x00000004
#define SIS_CSR_RX_DISABLE	0x00000008
#define SIS_CSR_TX_RESET	0x00000010
#define SIS_CSR_RX_RESET	0x00000020
#define SIS_CSR_SOFTINTR	0x00000080
#define SIS_CSR_RESET		0x00000100
#define SIS_CSR_RELOAD		0x00000400

#define SIS_CFG_BIGENDIAN	0x00000001
#define SIS_CFG_PERR_DETECT	0x00000008
#define SIS_CFG_DEFER_DISABLE	0x00000010
#define SIS_CFG_OUTOFWIN_TIMER	0x00000020
#define SIS_CFG_SINGLE_BACKOFF	0x00000040
#define SIS_CFG_PCIREQ_ALG	0x00000080
#define SIS_CFG_FAIR_BACKOFF	0x00000200 /* 635 & 900B Specific */
#define SIS_CFG_RND_CNT		0x00000400 /* 635 & 900B Specific */
#define SIS_CFG_EDB_MASTER_EN	0x00002000

#define SIS_EECTL_DIN		0x00000001
#define SIS_EECTL_DOUT		0x00000002
#define SIS_EECTL_CLK		0x00000004
#define SIS_EECTL_CSEL		0x00000008

#define SIS96x_EECTL_GNT	0x00000100
#define SIS96x_EECTL_DONE	0x00000200
#define SIS96x_EECTL_REQ	0x00000400

#define	SIS_MII_CLK		0x00000040
#define	SIS_MII_DIR		0x00000020
#define	SIS_MII_DATA		0x00000010

#define SIS_EECMD_WRITE		0x140
#define SIS_EECMD_READ		0x180
#define SIS_EECMD_ERASE		0x1c0

#define SIS_EE_NODEADDR		0x8
#define NS_EE_NODEADDR		0x6

#define SIS_PCICTL_SRAMADDR	0x0000001F
#define SIS_PCICTL_RAMTSTENB	0x00000020
#define SIS_PCICTL_TXTSTENB	0x00000040
#define SIS_PCICTL_RXTSTENB	0x00000080
#define SIS_PCICTL_BMTSTENB	0x00000200
#define SIS_PCICTL_RAMADDR	0x001F0000
#define SIS_PCICTL_ROMTIME	0x0F000000
#define SIS_PCICTL_DISCTEST	0x40000000

#define SIS_ISR_RX_OK		0x00000001
#define SIS_ISR_RX_DESC_OK	0x00000002
#define SIS_ISR_RX_ERR		0x00000004
#define SIS_ISR_RX_EARLY	0x00000008
#define SIS_ISR_RX_IDLE		0x00000010
#define SIS_ISR_RX_OFLOW	0x00000020
#define SIS_ISR_TX_OK		0x00000040
#define SIS_ISR_TX_DESC_OK	0x00000080
#define SIS_ISR_TX_ERR		0x00000100
#define SIS_ISR_TX_IDLE		0x00000200
#define SIS_ISR_TX_UFLOW	0x00000400
#define SIS_ISR_SOFTINTR	0x00000800
#define SIS_ISR_HIBITS		0x00008000
#define SIS_ISR_RX_FIFO_OFLOW	0x00010000
#define SIS_ISR_TGT_ABRT	0x00100000
#define SIS_ISR_BM_ABRT		0x00200000
#define SIS_ISR_SYSERR		0x00400000
#define SIS_ISR_PARITY_ERR	0x00800000
#define SIS_ISR_RX_RESET_DONE	0x01000000
#define SIS_ISR_TX_RESET_DONE	0x02000000
#define SIS_ISR_TX_PAUSE_START	0x04000000
#define SIS_ISR_TX_PAUSE_DONE	0x08000000
#define SIS_ISR_WAKE_EVENT	0x10000000

#define SIS_IMR_RX_OK		0x00000001
#define SIS_IMR_RX_DESC_OK	0x00000002
#define SIS_IMR_RX_ERR		0x00000004
#define SIS_IMR_RX_EARLY	0x00000008
#define SIS_IMR_RX_IDLE		0x00000010
#define SIS_IMR_RX_OFLOW	0x00000020
#define SIS_IMR_TX_OK		0x00000040
#define SIS_IMR_TX_DESC_OK	0x00000080
#define SIS_IMR_TX_ERR		0x00000100
#define SIS_IMR_TX_IDLE		0x00000200
#define SIS_IMR_TX_UFLOW	0x00000400
#define SIS_IMR_SOFTINTR	0x00000800
#define SIS_IMR_HIBITS		0x00008000
#define SIS_IMR_RX_FIFO_OFLOW	0x00010000
#define SIS_IMR_TGT_ABRT	0x00100000
#define SIS_IMR_BM_ABRT		0x00200000
#define SIS_IMR_SYSERR		0x00400000
#define SIS_IMR_PARITY_ERR	0x00800000
#define SIS_IMR_RX_RESET_DONE	0x01000000
#define SIS_IMR_TX_RESET_DONE	0x02000000
#define SIS_IMR_TX_PAUSE_START	0x04000000
#define SIS_IMR_TX_PAUSE_DONE	0x08000000
#define SIS_IMR_WAKE_EVENT	0x10000000

#define SIS_INTRS	\
	(SIS_IMR_RX_OFLOW|SIS_IMR_TX_UFLOW|SIS_IMR_TX_OK|\
	 SIS_IMR_TX_IDLE|SIS_IMR_RX_OK|SIS_IMR_RX_ERR|\
	 SIS_IMR_RX_IDLE|\
	 SIS_IMR_SYSERR)

/* Interrupt Holdoff Register */
#define NS_IHR_HOLDCTL 0x00000100

/*
 * Interrupt holdoff value for NS DP8316. We can have the chip
 * delay interrupt delivery for a certain period. Units are in
 * 100us - this sets the delay to 1ms holdoff.
 */
#define NS_IHR_DELAY 10

#define NS_IHR_VALUE (NS_IHR_HOLDCTL|NS_IHR_DELAY)

#define SIS_IER_INTRENB		0x00000001

#define SIS_PHYCTL_ACCESS	0x00000010
#define SIS_PHYCTL_OP		0x00000020
#define SIS_PHYCTL_REGADDR	0x000007C0
#define SIS_PHYCTL_PHYADDR	0x0000F800
#define SIS_PHYCTL_PHYDATA	0xFFFF0000

#define SIS_PHYOP_READ		0x00000020
#define SIS_PHYOP_WRITE		0x00000000

#define SIS_TXCFG_DRAIN_THRESH	0x0000003F /* 32-byte units */
#define SIS_TXCFG_FILL_THRESH	0x00003F00 /* 32-byte units */
#define SIS_TXCFG_MPII03D	0x00040000 /* "Must be 1" */
#define SIS_TXCFG_DMABURST	0x00700000
#define SIS_TXCFG_AUTOPAD	0x10000000
#define SIS_TXCFG_LOOPBK	0x20000000
#define SIS_TXCFG_IGN_HBEAT	0x40000000
#define SIS_TXCFG_IGN_CARR	0x80000000

#define SIS_TXCFG_DRAIN(x)	(((x) >> 5) & SIS_TXCFG_DRAIN_THRESH)
#define SIS_TXCFG_FILL(x)	((((x) >> 5) << 8) & SIS_TXCFG_FILL_THRESH)

#define SIS_TXDMA_512BYTES	0x00000000
#define SIS_TXDMA_4BYTES	0x00100000
#define SIS_TXDMA_8BYTES	0x00200000
#define SIS_TXDMA_16BYTES	0x00300000
#define SIS_TXDMA_32BYTES	0x00400000
#define SIS_TXDMA_64BYTES	0x00500000
#define SIS_TXDMA_128BYTES	0x00600000
#define SIS_TXDMA_256BYTES	0x00700000

#define SIS_TXCFG_100	\
	(SIS_TXDMA_64BYTES|SIS_TXCFG_AUTOPAD|\
	 SIS_TXCFG_FILL(ETHER_MIN_LEN)|SIS_TXCFG_DRAIN(ETHER_MAX_DIX_LEN))

#define SIS_TXCFG_10	\
	(SIS_TXDMA_32BYTES|SIS_TXCFG_AUTOPAD|\
	 SIS_TXCFG_FILL(ETHER_MIN_LEN)|SIS_TXCFG_DRAIN(ETHER_MAX_DIX_LEN))

#define SIS_RXCFG_DRAIN_THRESH	0x0000003E /* 8-byte units */
#define SIS_RXCFG_DMABURST	0x00700000
#define SIS_RXCFG_RX_JABBER	0x08000000
#define SIS_RXCFG_RX_TXPKTS	0x10000000
#define SIS_RXCFG_RX_RUNTS	0x40000000
#define SIS_RXCFG_RX_GIANTS	0x80000000

#define SIS_RXCFG_DRAIN(x)	((((x) >> 3) << 1) & SIS_RXCFG_DRAIN_THRESH)

#define SIS_RXDMA_512BYTES	0x00000000
#define SIS_RXDMA_4BYTES	0x00100000
#define SIS_RXDMA_8BYTES	0x00200000
#define SIS_RXDMA_16BYTES	0x00300000
#define SIS_RXDMA_32BYTES	0x00400000
#define SIS_RXDMA_64BYTES	0x00500000
#define SIS_RXDMA_128BYTES	0x00600000
#define SIS_RXDMA_256BYTES	0x00700000

#define SIS_RXCFG256 \
	(SIS_RXCFG_DRAIN(64)|SIS_RXDMA_256BYTES)
#define SIS_RXCFG64 \
	(SIS_RXCFG_DRAIN(64)|SIS_RXDMA_64BYTES)

#define SIS_RXFILTCTL_ADDR	0x000F0000
#define NS_RXFILTCTL_MCHASH	0x00200000
#define NS_RXFILTCTL_ARP	0x00400000
#define NS_RXFILTCTL_PERFECT	0x08000000
#define SIS_RXFILTCTL_ALLPHYS	0x10000000
#define SIS_RXFILTCTL_ALLMULTI	0x20000000
#define SIS_RXFILTCTL_BROAD	0x40000000
#define SIS_RXFILTCTL_ENABLE	0x80000000

#define SIS_FILTADDR_PAR0	0x00000000
#define SIS_FILTADDR_PAR1	0x00010000
#define SIS_FILTADDR_PAR2	0x00020000
#define SIS_FILTADDR_MAR0	0x00040000
#define SIS_FILTADDR_MAR1	0x00050000
#define SIS_FILTADDR_MAR2	0x00060000
#define SIS_FILTADDR_MAR3	0x00070000
#define SIS_FILTADDR_MAR4	0x00080000
#define SIS_FILTADDR_MAR5	0x00090000
#define SIS_FILTADDR_MAR6	0x000A0000
#define SIS_FILTADDR_MAR7	0x000B0000

#define NS_FILTADDR_PAR0	0x00000000
#define NS_FILTADDR_PAR1	0x00000002
#define NS_FILTADDR_PAR2	0x00000004

#define NS_FILTADDR_FMEM_LO	0x00000200
#define NS_FILTADDR_FMEM_HI	0x000003FE

/*
 * DMA descriptor structures. The first part of the descriptor
 * is the hardware descriptor format, which is just three longwords.
 * After this, we include some additional structure members for
 * use by the driver. Note that for this structure will be a different
 * size on the alpha, but that's okay as long as it's a multiple of 4
 * bytes in size.
 */
struct sis_desc {
	/* SiS hardware descriptor section */
	u_int32_t		sis_next;
	u_int32_t		sis_cmdsts;
#define sis_rxstat		sis_cmdsts
#define sis_txstat		sis_cmdsts
#define sis_ctl			sis_cmdsts
	u_int32_t		sis_ptr;
	/* Driver software section */
	struct mbuf		*sis_mbuf;
	struct sis_desc		*sis_nextdesc;
	bus_dmamap_t		map;
};

#define SIS_CMDSTS_BUFLEN	0x00000FFF
#define SIS_CMDSTS_PKT_OK	0x08000000
#define SIS_CMDSTS_CRC		0x10000000
#define SIS_CMDSTS_INTR		0x20000000
#define SIS_CMDSTS_MORE		0x40000000
#define SIS_CMDSTS_OWN		0x80000000

#define SIS_LASTDESC(x)		(!(letoh32((x)->sis_ctl) & SIS_CMDSTS_MORE)))
#define SIS_OWNDESC(x)		(letoh32((x)->sis_ctl) & SIS_CMDSTS_OWN)
#define SIS_INC(x, y)		(x) = ((x) == ((y)-1)) ? 0 : (x)+1
#define SIS_RXBYTES(x)		(letoh32((x)->sis_ctl) & SIS_CMDSTS_BUFLEN)

#define SIS_RXSTAT_COLL		0x00010000
#define SIS_RXSTAT_LOOPBK	0x00020000
#define SIS_RXSTAT_ALIGNERR	0x00040000
#define SIS_RXSTAT_CRCERR	0x00080000
#define SIS_RXSTAT_SYMBOLERR	0x00100000
#define SIS_RXSTAT_RUNT		0x00200000
#define SIS_RXSTAT_GIANT	0x00400000
#define SIS_RXSTAT_DSTCLASS	0x01800000
#define SIS_RXSTAT_OVERRUN	0x02000000
#define SIS_RXSTAT_RX_ABORT	0x04000000

#define SIS_RXSTAT_ERROR(x)						\
	((x) & (SIS_RXSTAT_RX_ABORT | SIS_RXSTAT_OVERRUN |		\
	SIS_RXSTAT_GIANT | SIS_RXSTAT_SYMBOLERR | SIS_RXSTAT_RUNT |	\
	SIS_RXSTAT_CRCERR | SIS_RXSTAT_ALIGNERR))

#define SIS_DSTCLASS_REJECT	0x00000000
#define SIS_DSTCLASS_UNICAST	0x00800000
#define SIS_DSTCLASS_MULTICAST	0x01000000
#define SIS_DSTCLASS_BROADCAST	0x02000000

#define SIS_TXSTAT_COLLCNT	0x000F0000
#define SIS_TXSTAT_EXCESSCOLLS	0x00100000
#define SIS_TXSTAT_OUTOFWINCOLL	0x00200000
#define SIS_TXSTAT_EXCESS_DEFER	0x00400000
#define SIS_TXSTAT_DEFERED	0x00800000
#define SIS_TXSTAT_CARR_LOST	0x01000000
#define SIS_TXSTAT_UNDERRUN	0x02000000
#define SIS_TXSTAT_TX_ABORT	0x04000000

#define SIS_MAXTXSEGS		16
#define SIS_RX_LIST_CNT		64
#define SIS_TX_LIST_CNT		128

struct sis_list_data {
	struct sis_desc		sis_rx_list[SIS_RX_LIST_CNT];
	struct sis_desc		sis_tx_list[SIS_TX_LIST_CNT];
};

struct sis_ring_data {
	struct if_rxring	sis_rx_ring;
	int			sis_rx_prod;
	int			sis_rx_cons;
	int			sis_tx_prod;
	int			sis_tx_cons;
	int			sis_tx_cnt;
};


/*
 * SiS PCI vendor ID.
 */
#define SIS_VENDORID		0x1039

/*
 * SiS PCI device IDs
 */
#define SIS_DEVICEID_900	0x0900
#define SIS_DEVICEID_7016	0x7016


/*
 * SiS 900 PCI revision codes.
 */
#define SIS_REV_900B		0x0003
#define SIS_REV_630A		0x0080
#define SIS_REV_630E		0x0081
#define SIS_REV_630S		0x0082
#define SIS_REV_630EA1		0x0083
#define SIS_REV_630ET		0x0084
#define SIS_REV_635		0x0090
#define SIS_REV_96x		0x0091

struct sis_type {
	u_int16_t		sis_vid;
	u_int16_t		sis_did;
	char			*sis_name;
};

struct sis_mii_frame {
	u_int8_t		mii_stdelim;
	u_int8_t		mii_opcode;
	u_int8_t		mii_phyaddr;
	u_int8_t		mii_regaddr;
	u_int8_t		mii_turnaround;
	u_int16_t		mii_data;
};

/*
 * MII constants
 */
#define	SIS_MII_STARTDELIM	0x01
#define	SIS_MII_READOP		0x02
#define	SIS_MII_WRITEOP		0x01
#define	SIS_MII_TURNAROUND	0x02

#define SIS_TYPE_900	1
#define SIS_TYPE_7016	2
#define SIS_TYPE_83815	3

struct sis_softc {
	struct device		sc_dev;		/* generic device structure */
	void			*sc_ih;		/* interrupt handler cookie */
	struct arpcom		arpcom;		/* interface info */
	mii_data_t		sc_mii;
	bus_space_handle_t	sis_bhandle;
	bus_space_tag_t		sis_btag;
	u_int8_t		sis_type;
	u_int8_t		sis_rev;
	u_int8_t		sis_link;
	u_int			sis_srr;
	struct sis_list_data	*sis_ldata;
	struct sis_ring_data	sis_cdata;
	struct timeout		sis_timeout;
	bus_dma_tag_t		sc_dmat;
	bus_dmamap_t		sc_listmap;
	bus_dma_segment_t	sc_listseg[1];
	int			sc_listnseg;
	caddr_t			sc_listkva;
	bus_dmamap_t		sc_tx_sparemap;
	int			sis_stopped;
};

/*
 * register space access macros
 */
#define CSR_WRITE_4(sc, reg, val)	\
	bus_space_write_4(sc->sis_btag, sc->sis_bhandle, reg, val)

#define CSR_READ_4(sc, reg)		\
	bus_space_read_4(sc->sis_btag, sc->sis_bhandle, reg)

#define SIS_TIMEOUT		1000
#define SIS_MIN_FRAMELEN	60

/*
 * PCI low memory base and low I/O base register, and
 * other PCI registers.
 */

#define SIS_PCI_VENDOR_ID	0x00
#define SIS_PCI_DEVICE_ID	0x02
#define SIS_PCI_COMMAND		0x04
#define SIS_PCI_STATUS		0x06
#define SIS_PCI_REVID		0x08
#define SIS_PCI_CLASSCODE	0x09
#define SIS_PCI_CACHELEN	0x0C
#define SIS_PCI_LATENCY_TIMER	0x0D
#define SIS_PCI_HEADER_TYPE	0x0E
#define SIS_PCI_LOIO		0x10
#define SIS_PCI_LOMEM		0x14
#define SIS_PCI_BIOSROM		0x30
#define SIS_PCI_INTLINE		0x3C
#define SIS_PCI_INTPIN		0x3D
#define SIS_PCI_MINGNT		0x3E
#define SIS_PCI_MINLAT		0x0F
#define SIS_PCI_RESETOPT	0x48
#define SIS_PCI_EEPROM_DATA	0x4C

/* power management registers */
#define SIS_PCI_CAPID		0x50 /* 8 bits */
#define SIS_PCI_NEXTPTR		0x51 /* 8 bits */
#define SIS_PCI_PWRMGMTCAP	0x52 /* 16 bits */
#define SIS_PCI_PWRMGMTCTRL	0x54 /* 16 bits */

#define SIS_PME_EN		0x0010
#define SIS_PME_STATUS		0x8000
@


1.34
log
@- Make use of m_defrag().
- Lower the max # of TX DMA segments from close to the whole ring down
  to a more sensible value. From FreeBSD
- Move the TX ring full check out of and above the for loop.
- Use dm_nsegs to provide the total # of DMA segments instead of the
  value from the for loop.

ok mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.33 2014/07/08 05:35:18 dlg Exp $ */
d346 1
a346 2
#define SIS_RXBYTES(x)	\
	((letoh32((x)->sis_ctl) & SIS_CMDSTS_BUFLEN) - ETHER_CRC_LEN)
@


1.33
log
@cut things that relied on mclgeti for rx ring accounting/restriction over
to using if_rxr.

cut the reporting systat did over to the rxr ioctl.

tested as much as i can on alpha, amd64, and sparc64.
mpi@@ has run it on macppc.
ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.32 2012/10/18 21:44:21 deraadt Exp $ */
d379 1
@


1.32
log
@Convert a number of old private copies of code which predates
pci_set_powerstate() to using it instead.  Many of these chunks of code had
bugs in them, especially missing delay() calls.  Some of them were doing
things our PCI subsystem is now responsible for handling.  If you have
any of the affected devices, please keep an eye out for regressions.
ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.31 2009/07/22 21:32:50 miod Exp $ */
d388 1
a390 1
	int			sis_rx_cnt;
@


1.31
log
@Add big-endian platform support to sis(4). Tested to not break anything on
sokeris by mk@@, and to work on sparc64 by brad@@ and on sgi by yours truly.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.30 2009/06/04 18:12:56 sthen Exp $ */
a512 5
#define SIS_PSTATE_MASK		0x0003
#define SIS_PSTATE_D0		0x0000
#define SIS_PSTATE_D1		0x0001
#define SIS_PSTATE_D2		0x0002
#define SIS_PSTATE_D3		0x0003
@


1.30
log
@- Rewrite ioctl handling code and receive filter handling to clean
  up the code a bit.
- Remove unused sc_if_flags field.

from Brad.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.29 2009/04/14 19:06:49 claudio Exp $ */
d343 2
a344 2
#define SIS_LASTDESC(x)		(!((x)->sis_ctl & SIS_CMDSTS_MORE)))
#define SIS_OWNDESC(x)		((x)->sis_ctl & SIS_CMDSTS_OWN)
d346 2
a347 1
#define SIS_RXBYTES(x)		(((x)->sis_ctl & SIS_CMDSTS_BUFLEN) - ETHER_CRC_LEN)
@


1.29
log
@Convert sis(4) to MCLGETI() and make soekris suck much less. With this the
little green slug does not block userland even when hammered with twice as
much traffic it can handle. Almost the same code I came up during h2k8 but
now with two other bugs fixed that where exposed by MCLGETI().
Tested and OK dlg@@ sthen@@ and a lot of pushing by Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.28 2009/02/24 21:10:14 claudio Exp $ */
a467 1
	int			sc_if_flags;
@


1.28
log
@The original SiS chips seem to have an bug that marks VLAN tagged packets
with an rx error (SIS_RXSTAT_GIANT) eventhough everything is fine.
Change code to clear this error on RX if the size of the packet is smaller
then 1532 bytes.
From FreeBSD via Brad. Tested on the more common National chips by me.
Ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.27 2007/05/28 17:51:26 ckuethe Exp $ */
d378 1
a378 2
#define SIS_RX_LIST_CNT_MIN	4
#define SIS_RX_LIST_CNT_MAX	64
d382 1
a382 1
	struct sis_desc		sis_rx_list[SIS_RX_LIST_CNT_MAX];
d387 3
a389 1
	struct sis_desc		*sis_rx_pdsc;
a465 1
	bus_dmamap_t		sc_rx_sparemap;
a467 1
	int			sc_rxbufs;
@


1.27
log
@Enable interrupt holdoff on DP83816 chips. This significantly improves
performance of devices such as the soekris under load.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.26 2006/07/10 03:06:28 brad Exp $ */
d358 5
@


1.26
log
@add code for the interrupt holdoff support. bump NS_IHR_DELAY above 0 to
enable the support.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.25 2006/03/25 03:21:56 brad Exp $ */
d217 1
a217 1
 * 100us, and the default is 100us holdoff.
d219 1
a219 1
#define NS_IHR_DELAY 0
@


1.25
log
@set/clear the all frames bit in the receive filter when
enabling/disabling promisc mode instead of calling sis_init().
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.24 2005/10/20 21:47:56 brad Exp $ */
d210 12
@


1.24
log
@Instead of keeping track of the index into the receive ring use the already
implemented "sis_nextdesc" pointer to keep a pointer instead.

From phk FreeBSD

Tested by a few developers
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.23 2005/10/18 01:01:27 brad Exp $ */
d452 1
@


1.23
log
@Put rev 1.56 back in and make sure to include the header so
it actually compiles this time.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.22 2005/10/14 22:59:38 brad Exp $ */
d371 1
a371 1
	int			sis_rx_prod;
@


1.22
log
@no functional change here, just moving the stripping of the
FCS into the SIS_RXBYTES() macro. As done in the FreeBSD sis driver.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.21 2005/05/22 05:40:52 brad Exp $ */
d333 1
a333 1
#define SIS_INC(x, y)		{ if (++(x) == y) x=0 ; }
@


1.21
log
@- Enable parity error detection on 900B and 635(A).

- SIS_CFG_EDB_MASTER_EN indicates the EDB bus is used instead of
  the PCI bus. When this bit is set, the Max DMA Burst Size
  for TX/RX DMA should be no larger than 64 bytes.

- Do not call mii_pollstat() from within device tick routines; the status
  information is updated by mii_tick().

From FreeBSD

Testing by uwe@@, mpf@@ and me.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.20 2005/04/05 00:13:57 brad Exp $ */
d334 1
a334 1
#define SIS_RXBYTES(x)		((x)->sis_ctl & SIS_CMDSTS_BUFLEN)
@


1.20
log
@- Fix for an issue with excessive collisions in half duplex mode.
- Nail the short cable problem the exact way National says it should be.
- Make sure to clear any pending interrupts when we stop the interface.
- Do not tell the hardware to send when there were no packets enqueued.
- Close a theoretical race:  By the time the watchdog comes around
the interface may have been stopped, so we should not restart it.

From FreeBSD

Tested by ho@@ on a few Soekris boxes and martin@@ on a 900
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.19 2004/09/28 04:37:33 brad Exp $ */
d124 3
d269 1
a269 1
#define SIS_RXCFG \
d271 2
d393 2
@


1.19
log
@Use ETHER_MAX_DIX_LEN/ETHER_MIN_LEN
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.18 2004/07/04 22:57:20 deraadt Exp $ */
d221 1
@


1.18
log
@sis rev 0x91 seeprom support to get eaddr; from fgsch
we supplied 10 soekris boxes to 10 openbsd developers, and these all
have some variety or other of sis ethernet.  not ONE of them commented
about this diff when it was mailed out.  how very sad.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.17 2004/05/19 11:37:00 brad Exp $ */
d241 1
a241 1
	 SIS_TXCFG_FILL(64)|SIS_TXCFG_DRAIN(1536))
d245 1
a245 1
	 SIS_TXCFG_FILL(64)|SIS_TXCFG_DRAIN(1536))
a455 1
#define SIS_RXLEN		1536
@


1.17
log
@remove duplication, use ETHER_ALIGN from if_ether.h
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.16 2004/04/26 05:16:41 deraadt Exp $ */
d130 4
d392 1
@


1.16
log
@start with minimum recieve rings.  when we ifconfig up, allocate more.
this reduces mbuf clusters sitting around unused.  from mcbride, fixed
by me, tested by frantzen
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.16 2004/04/26 05:14:47 deraadt Exp $ */
a450 1
#define ETHER_ALIGN		2
@


1.15
log
@avoid redundant calls to sis_stop() for shared irqs; from freebsd; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.14 2003/12/11 07:41:19 chris Exp $ */
d351 2
a352 1
#define SIS_RX_LIST_CNT		64
d356 1
a356 1
	struct sis_desc		sis_rx_list[SIS_RX_LIST_CNT];
d438 1
@


1.14
log
@Check DP83815/6 silicon revision register and apply current fixes documented
in National Semiconductor's datasheets and linux driver, depending on the
revision.  This fixes the short cable issues more reliably than the
fix from rev 1.31 (no long cable issue created), and also fixes lockups
on some chips under load.  From Poul-Henning Kamp / FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.13 2003/07/09 02:09:08 krw Exp $ */
d436 1
@


1.13
log
@Fix problems with ICS1893 PHY and some sis chipsets.

Partial re-sync with FreeBSD, from Jeorg Sonnenberger.

Tested by Jeorg, Henning@@, Paul de Weerd, Otto@@, and myself.

ok henning@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.12 2003/06/30 02:52:09 avsm Exp $ */
d78 2
a79 1
/* NS DP83815 registers */
d81 1
d103 5
d425 1
@


1.12
log
@remove the use of sis_unit
jason@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.11 2002/11/20 15:19:33 fgsch Exp $ */
d123 4
d386 17
@


1.11
log
@Read mac address correctly on rev 0x90; tested by Alexander, patch
provided from FreeBSD via Gabriel Gonzalez.
jason@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.9 2002/03/25 20:28:06 mickey Exp $ */
a393 1
	u_int8_t		sis_unit;
@


1.10
log
@bus_dma'ify, works on an SiS900 and a Netgear FA411. Thanks to wilfried@@ for
testing.
@
text
@d374 2
a375 1
#define	SIS_REV_630ET		0x0084
d396 1
@


1.9
log
@support 630ETi; from wyllie@@dilex.net
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.8 2002/02/08 04:43:24 chris Exp $ */
d300 1
a396 1
	caddr_t			sis_ldata_ptr;
d399 7
a458 5

#ifdef __alpha__
#undef vtophys
#define vtophys(va)		alpha_XXX_dmamap((vm_offset_t)va)
#endif
@


1.8
log
@Partial sync with FreeBSD, mostly bugfixes from Luigi Rizzo (ok jason@@)

-Remove m_devget on non-STRICT_ALIGNMENT architectures, supposedly a 50-70%
 performance increase for peak packet forwarding on the Soekris 486/133 on fbsd

-Fix a bug in the driver -- under load, the receive unit could become
 idle and the driver would not detect the event, requiring userland
 to cycle the interface to bring it up again.

 The fix consists in adding SIS_IMR_RX_IDLE to the interrupt mask and
 add a command in sis_intr() to restart the receiver when this happens.

-While at it, make the test of status bits more efficient

-Slightly simplify the code to initialize the ring buffers

-Add VLAN support (Accept Long Packets)
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.7 2001/09/23 22:41:25 aaron Exp $ */
d373 1
@


1.7
log
@Read the MAC address correctly from 630EA1-based sis(4) devices. Should fix
problems people have been reporting of this nature with the SiS network
devices found on some motherboards; fixes pr#2085. Patch by peter@@, jason@@ ok
Also, some space vs tab fixes while we're here.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.6 2001/03/14 15:17:31 aaron Exp $ */
d190 1
d311 1
a311 1
#define SIS_INC(x, y)		(x) = (x + 1) % y
@


1.7.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.7 2001/09/23 22:41:25 aaron Exp $ */
a189 1
	 SIS_IMR_RX_IDLE|\
d310 1
a310 1
#define SIS_INC(x, y)		{ if (++(x) == y) x=0 ; }
a371 1
#define	SIS_REV_630ET		0x0084
@


1.7.4.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.7.4.1 2002/06/11 03:42:25 art Exp $ */
a299 1
	bus_dmamap_t		map;
d396 1
a398 7
	bus_dma_tag_t		sc_dmat;
	bus_dmamap_t		sc_listmap;
	bus_dma_segment_t	sc_listseg[1];
	int			sc_listnseg;
	caddr_t			sc_listkva;
	bus_dmamap_t		sc_rx_sparemap;
	bus_dmamap_t		sc_tx_sparemap;
d452 5
@


1.7.4.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d374 1
a374 2
#define SIS_REV_630ET		0x0084
#define SIS_REV_635		0x0090
a394 1
	u_int8_t		sis_rev;
@


1.6
log
@Disable PME mode in sis_reset() to fix a problem with the DP83815 chip on
some motherboards; from FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.5 2001/03/12 05:51:18 aaron Exp $ */
d109 1
@


1.5
log
@Add support for reading the MAC address from the APC CMOS RAM in the
integrated Ethernet controller on the SiS630E-based chipsets; from FreeBSD,
this patch mostly by jason@@. With these changes, my SiS900 card still works
fine, but the new functionality is actually untested.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.4 2000/12/06 15:48:28 mickey Exp $ */
d79 1
d96 4
@


1.4
log
@new timeouts, proper spl()s; aaron@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.3 2000/08/25 17:39:25 aaron Exp $ */
d358 8
@


1.3
log
@Sync with FreeBSD. Summary of changes:

- Modify to poll link state and positively set MAC's duplex as needed.
- Program some DP83815 registers that are recommended for optimum performance.
- Select the TX DMA burst size correctly for 10 and 100Mbps modes, especially
  improving the performance of the DP83815 at 10Mbps.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.2 2000/07/06 19:12:12 aaron Exp $ */
d382 1
@


1.2
log
@Add support for the National Semiconductor DP83815 Fast Ethernet chip.
This chip is currently being used on the NetGear FA312-TX adapter, which is
presumably a replacement for the PNIC-based FA310-TX. From FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.1 1999/12/04 20:27:37 aaron Exp $ */
d33 1
a33 1
 * $FreeBSD: src/sys/pci/if_sisreg.h,v 1.2 2000/07/06 06:02:04 wpaul Exp $
d88 8
d217 1
a217 1
#define SIS_TXCFG	\
d219 5
a223 1
	 SIS_TXCFG_FILL(64)|SIS_TXCFG_DRAIN(1500))
d378 1
@


1.1
log
@Driver for SiS 900/7016 Ethernet; from FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d33 1
a33 1
 * $FreeBSD: src/sys/pci/if_sisreg.h,v 1.1 1999/09/05 21:00:59 wpaul Exp $
d78 10
d114 1
d235 3
d255 7
d355 1
@


1.1.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.6 2001/03/14 15:17:31 aaron Exp $ */
d33 1
a33 1
 * $FreeBSD: src/sys/pci/if_sisreg.h,v 1.3 2000/08/22 23:26:51 wpaul Exp $
a77 23
/* NS DP83815 registers */
#define NS_CLKRUN		0x3C
#define NS_BMCR			0x80
#define NS_BMSR			0x84
#define NS_PHYIDR1		0x88
#define NS_PHYIDR2		0x8C
#define NS_ANAR			0x90
#define NS_ANLPAR		0x94
#define NS_ANER			0x98
#define NS_ANNPTR		0x9C

#define NS_PHY_CR		0xE4
#define NS_PHY_10BTSCR		0xE8
#define NS_PHY_PAGE		0xCC
#define NS_PHY_EXTCFG		0xF0
#define NS_PHY_DSPCFG		0xF4
#define NS_PHY_SDCFG		0xF8
#define NS_PHY_TDATA		0xFC

#define NS_CLKRUN_PMESTS	0x00008000
#define NS_CLKRUN_PMEENB	0x00000100
#define NS_CLNRUN_CLKRUN_ENB	0x00000001

a103 1
#define NS_EE_NODEADDR		0x6
d198 1
a198 1
#define SIS_TXCFG_100	\
d200 1
a200 5
	 SIS_TXCFG_FILL(64)|SIS_TXCFG_DRAIN(1536))

#define SIS_TXCFG_10	\
	(SIS_TXDMA_32BYTES|SIS_TXCFG_AUTOPAD|\
	 SIS_TXCFG_FILL(64)|SIS_TXCFG_DRAIN(1536))
a223 3
#define NS_RXFILTCTL_MCHASH	0x00200000
#define NS_RXFILTCTL_ARP	0x00400000
#define NS_RXFILTCTL_PERFECT	0x08000000
a240 7
#define NS_FILTADDR_PAR0	0x00000000
#define NS_FILTADDR_PAR1	0x00000002
#define NS_FILTADDR_PAR2	0x00000004

#define NS_FILTADDR_FMEM_LO	0x00000200
#define NS_FILTADDR_FMEM_HI	0x000003FE

a325 8

/*
 * SiS 900 PCI revision codes.
 */
#define SIS_REV_630E		0x0081
#define SIS_REV_630S		0x0082
#define SIS_REV_630EA1		0x0083

a333 1
#define SIS_TYPE_83815	3
a343 1
	u_int8_t		sis_link;
a346 1
	struct timeout		sis_timeout;
@


1.1.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: if_sisreg.h,v 1.1.2.1 2001/05/14 22:25:46 niklas Exp $ */
a108 1
#define SIS_CSR_RELOAD		0x00000400
@


1.1.2.3
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a189 1
	 SIS_IMR_RX_IDLE|\
d310 1
a310 1
#define SIS_INC(x, y)		{ if (++(x) == y) x=0 ; }
@


1.1.2.4
log
@Sync the SMP branch with 3.3
@
text
@a299 1
	bus_dmamap_t		map;
a372 2
#define SIS_REV_630ET		0x0084
#define SIS_REV_635		0x0090
a392 1
	u_int8_t		sis_rev;
d395 1
a397 7
	bus_dma_tag_t		sc_dmat;
	bus_dmamap_t		sc_listmap;
	bus_dma_segment_t	sc_listseg[1];
	int			sc_listnseg;
	caddr_t			sc_listkva;
	bus_dmamap_t		sc_rx_sparemap;
	bus_dmamap_t		sc_tx_sparemap;
d451 5
@


1.1.2.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d78 1
a78 2
/* NS DP83815/6 registers */
#define NS_IHR			0x1C
a79 1
#define NS_SRR			0x58
a100 5
/* NS silicon revisions */
#define NS_SRR_15C		0x302
#define NS_SRR_15D		0x403
#define NS_SRR_16A		0x505

a122 4
#define	SIS_MII_CLK		0x00000040
#define	SIS_MII_DIR		0x00000020
#define	SIS_MII_DATA		0x00000010

a382 17
struct sis_mii_frame {
	u_int8_t		mii_stdelim;
	u_int8_t		mii_opcode;
	u_int8_t		mii_phyaddr;
	u_int8_t		mii_regaddr;
	u_int8_t		mii_turnaround;
	u_int16_t		mii_data;
};

/*
 * MII constants
 */
#define	SIS_MII_STARTDELIM	0x01
#define	SIS_MII_READOP		0x02
#define	SIS_MII_WRITEOP		0x01
#define	SIS_MII_TURNAROUND	0x02

d394 1
a397 1
	u_int			sis_srr;
a407 1
	int			sis_stopped;
@


1.1.2.6
log
@Merge with the trunk
@
text
@d351 1
a351 2
#define SIS_RX_LIST_CNT_MIN	4
#define SIS_RX_LIST_CNT_MAX	64
d355 1
a355 1
	struct sis_desc		sis_rx_list[SIS_RX_LIST_CNT_MAX];
a436 1
	int			sc_rxbufs;
d449 1
@


