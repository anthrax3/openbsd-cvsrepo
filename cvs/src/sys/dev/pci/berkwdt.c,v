head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.8
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.10
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.10
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.8
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.10
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.8
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.4
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5;
locks; strict;
comment	@ * @;


1.8
date	2014.12.10.12.27.57;	author mikeb;	state Exp;
branches;
next	1.7;
commitid	v6PAeA18rydwc5Vx;

1.7
date	2012.10.17.22.32.01;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.08.00.23.53;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2009.04.25.07.11.55;	author mk;	state Exp;
branches;
next	1.4;

1.4
date	2009.04.24.19.30.11;	author mk;	state Exp;
branches;
next	1.3;

1.3
date	2009.04.24.18.59.30;	author mk;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.24.18.01.10;	author mk;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.24.17.52.55;	author mk;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Convert watchdog(4) devices to use autoconf(9) framework.

ok deraadt, tests on glxpcib and ok mpi
@
text
@/*	$OpenBSD: berkwdt.c,v 1.7 2012/10/17 22:32:01 deraadt Exp $ */

/*
 * Copyright (c) 2009 Wim Van Sebroeck <wim@@iguana.be>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Berkshire PCI-PC Watchdog Card Driver
 * http://www.pcwatchdog.com/
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/systm.h>

#include <machine/bus.h>

#include <dev/pci/pcivar.h>
#include <dev/pci/pcireg.h>
#include <dev/pci/pcidevs.h>

struct berkwdt_softc {
	struct device	sc_dev;

	/* device access through bus space */
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;

	/* the timeout period */
	int		sc_period;
};

int berkwdt_match(struct device *, void *, void *);
void berkwdt_attach(struct device *, struct device *, void *);
int berkwdt_activate(struct device *, int);

void berkwdt_start(struct berkwdt_softc *sc);
void berkwdt_stop(struct berkwdt_softc *sc);
void berkwdt_reload(struct berkwdt_softc *sc);
int berkwdt_send_command(struct berkwdt_softc *sc, u_int8_t cmd, int *val);

int berkwdt_set_timeout(void *, int);

struct cfattach berkwdt_ca = {
	sizeof(struct berkwdt_softc), berkwdt_match, berkwdt_attach,
	NULL, berkwdt_activate
};

struct cfdriver berkwdt_cd = {
	NULL, "berkwdt", DV_DULL
};

const struct pci_matchid berkwdt_devices[] = {
	{ PCI_VENDOR_PIJNENBURG, PCI_PRODUCT_PIJNENBURG_PCWD_PCI }
};

/* PCWD-PCI I/O Port definitions */
#define PCWD_PCI_RELOAD		0x00	/* Re-trigger */
#define PCWD_PCI_CS1		0x01	/* Control Status 1 */
#define PCWD_PCI_CS2		0x02	/* Control Status 2 */
#define PCWD_PCI_WDT_DIS	0x03	/* Watchdog Disable */
#define PCWD_PCI_LSB		0x04	/* Command / Response */
#define PCWD_PCI_MSB		0x05	/* Command/Response LSB */
#define PCWD_PCI_CMD		0x06	/* Command/Response MSB */

/* Port 1 : Control Status #1 */
#define WD_PCI_WTRP		0x01	/* Watchdog Trip status */
#define WD_PCI_TTRP		0x04	/* Temperature Trip status */
#define WD_PCI_R2DS		0x40	/* Relay 2 Disable Temp-trip reset */

/* Port 2 : Control Status #2 */
#define WD_PCI_WDIS		0x10	/* Watchdog Disable */
#define WD_PCI_WRSP		0x40	/* Watchdog wrote response */

/*
 * According to documentation max. time to process a command for the pci
 * watchdog card is 100 ms, so we give it 150 ms to do its job.
 */
#define PCI_CMD_TIMEOUT		150

/* Watchdog's internal commands */
#define CMD_WRITE_WD_TIMEOUT	0x19

int
berkwdt_send_command(struct berkwdt_softc *sc, u_int8_t cmd, int *val)
{
	u_int8_t msb;
	u_int8_t lsb;
	u_int8_t got_response;
	int count;

	msb = *val / 256;
	lsb = *val % 256;

	/* Send command with data (data first!) */
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, PCWD_PCI_LSB, lsb);
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, PCWD_PCI_MSB, msb);
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, PCWD_PCI_CMD, cmd);

	got_response = bus_space_read_1(sc->sc_iot, sc->sc_ioh, PCWD_PCI_CS2);
	got_response &= WD_PCI_WRSP;
	for (count = 0; count < PCI_CMD_TIMEOUT && !got_response; count++) {
		delay(1000);
		got_response = bus_space_read_1(sc->sc_iot, sc->sc_ioh, PCWD_PCI_CS2);
		got_response &= WD_PCI_WRSP;
	}

	if (got_response) {
		/* read back response */
		lsb = bus_space_read_1(sc->sc_iot, sc->sc_ioh, PCWD_PCI_LSB);
		msb = bus_space_read_1(sc->sc_iot, sc->sc_ioh, PCWD_PCI_MSB);
		*val = (msb << 8) + lsb;

		/* clear WRSP bit */
		bus_space_read_1(sc->sc_iot, sc->sc_ioh, PCWD_PCI_CMD);
		return 1;
	}

	return 0;
}

void
berkwdt_start(struct berkwdt_softc *sc)
{
	u_int8_t reg;

	bus_space_write_1(sc->sc_iot, sc->sc_ioh, PCWD_PCI_WDT_DIS, 0x00);
	delay(1000);

	reg = bus_space_read_1(sc->sc_iot, sc->sc_ioh, PCWD_PCI_CS2);
	if (reg & WD_PCI_WDIS) {
		printf("%s: unable to enable\n", sc->sc_dev.dv_xname);
	}
}

void
berkwdt_stop(struct berkwdt_softc *sc)
{
	u_int8_t reg;

	bus_space_write_1(sc->sc_iot, sc->sc_ioh, PCWD_PCI_WDT_DIS, 0xa5);
	delay(1000);
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, PCWD_PCI_WDT_DIS, 0xa5);
	delay(1000);

	reg = bus_space_read_1(sc->sc_iot, sc->sc_ioh, PCWD_PCI_CS2);
	if (!(reg & WD_PCI_WDIS)) {
		printf("%s: unable to disable\n", sc->sc_dev.dv_xname);
	}
}

void
berkwdt_reload(struct berkwdt_softc *sc)
{
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, PCWD_PCI_RELOAD, 0x42);
}

int
berkwdt_match(struct device *parent, void *match, void *aux)
{
	return (pci_matchbyid((struct pci_attach_args *)aux, berkwdt_devices,
	    sizeof(berkwdt_devices) / sizeof(berkwdt_devices[0])));
}

void
berkwdt_attach(struct device *parent, struct device *self, void *aux)
{
	struct berkwdt_softc *sc = (struct berkwdt_softc *)self;
	struct pci_attach_args *const pa = (struct pci_attach_args *)aux;
	bus_size_t iosize;
	u_int8_t reg;

	/* retrieve the I/O region (BAR 0) */
	if (pci_mapreg_map(pa, 0x10, PCI_MAPREG_TYPE_IO, 0,
	    &sc->sc_iot, &sc->sc_ioh, NULL, &iosize, 0) != 0) {
		printf(": couldn't find PCI I/O region\n");
		return;
	}

	/* Check for reboot by the card */
	reg = bus_space_read_1(sc->sc_iot, sc->sc_ioh, PCWD_PCI_CS1);
	if (reg & WD_PCI_WTRP) {
		printf(", warning: watchdog triggered");

		if (reg & WD_PCI_TTRP)
			printf(", overheat detected");

		/* clear trip status & LED and keep mode of relay 2 */
		reg &= WD_PCI_R2DS;
		reg |= WD_PCI_WTRP;
		bus_space_write_1(sc->sc_iot, sc->sc_ioh, PCWD_PCI_CS1, reg);
	}

	printf("\n");

	/* ensure that the watchdog is disabled */
	berkwdt_stop(sc);
	sc->sc_period = 0;

	/* register with the watchdog framework */
	wdog_register(berkwdt_set_timeout, sc);
}

int
berkwdt_activate(struct device *self, int act)
{
	switch (act) {
	case DVACT_POWERDOWN:
		wdog_shutdown(self);
		break;
	}

	return (0);
}

int
berkwdt_set_timeout(void *self, int timeout)
{
	struct berkwdt_softc *sc = self;
	int new_timeout = timeout;

	if (timeout == 0) {
		/* Disable watchdog */
		berkwdt_stop(sc);
	} else {
		if (sc->sc_period != timeout) {
			/* Set new timeout */
			berkwdt_send_command(sc, CMD_WRITE_WD_TIMEOUT,
			    &new_timeout);
		}
		if (sc->sc_period == 0) {
			/* Enable watchdog */
			berkwdt_start(sc);
			berkwdt_reload(sc);
		} else {
			/* Reset timer */
			berkwdt_reload(sc);
		}
	}
	sc->sc_period = timeout;

	return (timeout);
}

@


1.7
log
@Swap arguments to wdog_register() since it is nicer, and prepare
wdog_shutdown() for external usage.
@
text
@d1 1
a1 1
/*	$OpenBSD: berkwdt.c,v 1.6 2010/04/08 00:23:53 tedu Exp $ */
d49 1
d59 2
a60 1
	sizeof(struct berkwdt_softc), berkwdt_match, berkwdt_attach
d216 12
@


1.6
log
@these files don't need to include proc.h anymore.  ok oga for agp
@
text
@d1 1
a1 1
/*	$OpenBSD: berkwdt.c,v 1.5 2009/04/25 07:11:55 mk Exp $ */
d213 1
a213 1
	wdog_register(sc, berkwdt_set_timeout);
@


1.5
log
@KNF and prettify some dmesg strings.
@
text
@d1 1
a1 1
/*	$OpenBSD: berkwdt.c,v 1.4 2009/04/24 19:30:11 mk Exp $ */
a27 1
#include <sys/proc.h>
@


1.4
log
@No more static functions, comment cleanup, and general pedantry.
@
text
@d1 1
a1 1
/*	$OpenBSD: berkwdt.c,v 1.3 2009/04/24 18:59:30 mk Exp $ */
d100 2
a101 2
	u_int8_t msb = *val / 256;
	u_int8_t lsb = *val % 256;
d105 3
d115 1
a115 1
	for (count = 0; (count < PCI_CMD_TIMEOUT) && (!got_response); count++) {
d140 1
a140 2
	bus_space_write_1(sc->sc_iot, sc->sc_ioh,
	    PCWD_PCI_WDT_DIS, 0x00);
d145 1
a145 2
		printf("%s: Card did not acknowledge enable attempt\n",
		    sc->sc_dev.dv_xname);
d161 1
a161 2
		printf("%s: Card did not acknowledge disable attempt\n",
		    sc->sc_dev.dv_xname);
d196 1
a196 1
		printf(": Previous reset was caused by the Watchdog card");
d199 1
a199 1
			printf("- Card sensed a CPU Overheat");
d209 1
a209 3
	/*
	 * ensure that the watchdog is disabled
	 */
d213 1
a213 3
	/*
	 * register with the watchdog framework
	 */
@


1.3
log
@Make the names in the softc look more like our other drivers.
@
text
@d1 1
a1 1
/*	$OpenBSD: berkwdt.c,v 1.2 2009/04/24 18:01:10 mk Exp $ */
a37 1
	/* wdt_dev must be the first item in the struct */
d44 1
a44 1
	/* the watchdog's heartbeat */
a49 1
int berkwdt_set_timeout(void *, int);
d54 3
d97 1
a97 1
static int
@


1.2
log
@Damn.  Forgot to add protos when destaticing functions.
@
text
@d1 1
a1 1
/*	$OpenBSD: berkwdt.c,v 1.1 2009/04/24 17:52:55 mk Exp $ */
d39 5
a43 1
	struct device		berkwdt_dev;
d46 1
a46 5
	int			heartbeat;

	/* device access through bus space */
	bus_space_tag_t		iot;
	bus_space_handle_t	ioh;
d105 3
a107 3
	bus_space_write_1(sc->iot, sc->ioh, PCWD_PCI_LSB, lsb);
	bus_space_write_1(sc->iot, sc->ioh, PCWD_PCI_MSB, msb);
	bus_space_write_1(sc->iot, sc->ioh, PCWD_PCI_CMD, cmd);
d109 1
a109 1
	got_response = bus_space_read_1(sc->iot, sc->ioh, PCWD_PCI_CS2);
d113 1
a113 1
		got_response = bus_space_read_1(sc->iot, sc->ioh, PCWD_PCI_CS2);
d119 2
a120 2
		lsb = bus_space_read_1(sc->iot, sc->ioh, PCWD_PCI_LSB);
		msb = bus_space_read_1(sc->iot, sc->ioh, PCWD_PCI_MSB);
d124 1
a124 1
		bus_space_read_1(sc->iot, sc->ioh, PCWD_PCI_CMD);
d136 1
a136 1
	bus_space_write_1(sc->iot, sc->ioh,
d140 1
a140 1
	reg = bus_space_read_1(sc->iot, sc->ioh, PCWD_PCI_CS2);
d143 1
a143 1
		    sc->berkwdt_dev.dv_xname);
d152 1
a152 1
	bus_space_write_1(sc->iot, sc->ioh, PCWD_PCI_WDT_DIS, 0xa5);
d154 1
a154 1
	bus_space_write_1(sc->iot, sc->ioh, PCWD_PCI_WDT_DIS, 0xa5);
d157 1
a157 1
	reg = bus_space_read_1(sc->iot, sc->ioh, PCWD_PCI_CS2);
d160 1
a160 1
		    sc->berkwdt_dev.dv_xname);
d167 1
a167 1
	bus_space_write_1(sc->iot, sc->ioh, PCWD_PCI_RELOAD, 0x42);
d187 1
a187 1
	    &sc->iot, &sc->ioh, NULL, &iosize, 0) != 0) {
d193 1
a193 1
	reg = bus_space_read_1(sc->iot, sc->ioh, PCWD_PCI_CS1);
d203 1
a203 1
		bus_space_write_1(sc->iot, sc->ioh, PCWD_PCI_CS1, reg);
d212 1
a212 1
	sc->heartbeat = 0;
d230 1
a230 1
		if (sc->heartbeat != timeout) {
d235 1
a235 1
		if (sc->heartbeat == 0) {
d244 1
a244 1
	sc->heartbeat = timeout;
@


1.1
log
@Add berkwdt(4), a driver for Berkshire Products PCI PC Watchdog written
by Wim Van Sebroeck.  Commented out in GENERIC but Heriberto Molina is
getting devices for developers so we can maintain this more easily.
Many thanks to both!

Man page will follow later.

``don't hold back for man page'' deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d52 4
@

