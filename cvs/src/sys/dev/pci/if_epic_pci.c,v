head	1.16;
access;
symbols
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.8
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.6
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.4
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.4
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.12
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.10
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.6
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.8
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.4
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.16
date	2015.11.24.17.11.39;	author mpi;	state Exp;
branches;
next	1.15;
commitid	5gdEnqVoJuTuwdTu;

1.15
date	2015.11.24.13.33.17;	author mpi;	state Exp;
branches;
next	1.14;
commitid	5DvsamK0GblTp8ww;

1.14
date	2014.12.22.02.28.52;	author tedu;	state Exp;
branches;
next	1.13;
commitid	yM2VFFhpDTeFQlve;

1.13
date	2014.07.22.13.12.11;	author mpi;	state Exp;
branches;
next	1.12;
commitid	TGHgrLxu6sxZoiFt;

1.12
date	2013.08.07.01.06.35;	author bluhm;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.18.21.44.21;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2011.04.03.15.36.02;	author jasper;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.26.05.42.17;	author ray;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.13.02.24.08;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2007.10.22.23.00.45;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2007.10.22.03.16.35;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.20.20.31.12;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.15.23.17.23;	author krw;	state Exp;
branches;
next	1.3;

1.3
date	2005.07.02.21.51.05;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.10.02.37.46;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2005.05.10.01.16.32;	author brad;	state Exp;
branches;
next	;


desc
@@


1.16
log
@You only need <net/if_dl.h> if you're using LLADDR() or a sockaddr_dl.
@
text
@/*	$OpenBSD: if_epic_pci.c,v 1.15 2015/11/24 13:33:17 mpi Exp $	*/
/*	$NetBSD: if_epic_pci.c,v 1.28 2005/02/27 00:27:32 perry Exp $	*/

/*-
 * Copyright (c) 1998, 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * PCI bus front-end for the Standard Microsystems Corp. 83C170
 * Ethernet PCI Integrated Controller (EPIC/100) driver.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/malloc.h>
#include <sys/kernel.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/errno.h>
#include <sys/device.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <machine/bus.h>
#include <machine/intr.h>

#include <dev/mii/miivar.h>

#include <dev/ic/smc83c170reg.h>
#include <dev/ic/smc83c170var.h>

#include <dev/pci/pcivar.h>
#include <dev/pci/pcireg.h>
#include <dev/pci/pcidevs.h>

/*
 * PCI configuration space registers used by the EPIC.
 */
#define	EPIC_PCI_IOBA		0x10	/* i/o mapped base */
#define	EPIC_PCI_MMBA		0x14	/* memory mapped base */

struct epic_pci_softc {
	struct epic_softc sc_epic;	/* real EPIC softc */

	/* PCI-specific goo. */
	void	*sc_ih;			/* interrupt handle */
};

int	epic_pci_match(struct device *, void *, void *);
void	epic_pci_attach(struct device *, struct device *, void *);

struct cfattach epic_pci_ca = {
	sizeof(struct epic_pci_softc), epic_pci_match, epic_pci_attach
};

const struct pci_matchid epic_pci_devices[] = {
	{ PCI_VENDOR_SMC, PCI_PRODUCT_SMC_83C170 },
	{ PCI_VENDOR_SMC, PCI_PRODUCT_SMC_83C175 },
};

static const struct epic_pci_subsys_info {
	pcireg_t subsysid;
	int flags;
} epic_pci_subsys_info[] = {
	{ PCI_ID_CODE(PCI_VENDOR_SMC, 0xa015), /* SMC9432BTX */
	  EPIC_HAS_BNC },
	{ PCI_ID_CODE(PCI_VENDOR_SMC, 0xa024), /* SMC9432BTX1 */
	  EPIC_HAS_BNC },
	{ PCI_ID_CODE(PCI_VENDOR_SMC, 0xa016), /* SMC9432FTX */
	  EPIC_HAS_MII_FIBER | EPIC_DUPLEXLED_ON_694 },
	{ 0xffffffff,
	  0 }
};

static const struct epic_pci_subsys_info *
epic_pci_subsys_lookup(const struct pci_attach_args *pa)
{
	pci_chipset_tag_t pc = pa->pa_pc;
	pcireg_t reg;
	const struct epic_pci_subsys_info *esp;

	reg = pci_conf_read(pc, pa->pa_tag, PCI_SUBSYS_ID_REG);

	for (esp = epic_pci_subsys_info; esp->subsysid != 0xffffffff; esp++)
		if (esp->subsysid == reg)
			return (esp);

	return (NULL);
}

int
epic_pci_match(struct device *parent, void *match, void *aux)
{
	return (pci_matchbyid((struct pci_attach_args *)aux, epic_pci_devices,
	    nitems(epic_pci_devices)));
}

void
epic_pci_attach(struct device *parent, struct device *self, void *aux)
{
	struct epic_pci_softc *psc = (struct epic_pci_softc *)self;
	struct epic_softc *sc = &psc->sc_epic;
	struct pci_attach_args *pa = aux;
	pci_chipset_tag_t pc = pa->pa_pc;
	pci_intr_handle_t ih;
	const char *intrstr = NULL;
	const struct epic_pci_subsys_info *esp;
	bus_space_tag_t iot, memt;
	bus_space_handle_t ioh, memh;
	int ioh_valid, memh_valid;

	pci_set_powerstate(pc, pa->pa_tag, PCI_PMCSR_STATE_D0);

	/*
	 * Map the device.
	 */
	ioh_valid = (pci_mapreg_map(pa, EPIC_PCI_IOBA,
	    PCI_MAPREG_TYPE_IO, 0,
	    &iot, &ioh, NULL, NULL, 0) == 0);
	memh_valid = (pci_mapreg_map(pa, EPIC_PCI_MMBA,
	    PCI_MAPREG_TYPE_MEM|PCI_MAPREG_MEM_TYPE_32BIT, 0,
	    &memt, &memh, NULL, NULL, 0) == 0);

	if (memh_valid) {
		sc->sc_st = memt;
		sc->sc_sh = memh;
	} else if (ioh_valid) {
		sc->sc_st = iot;
		sc->sc_sh = ioh;
	} else {
		printf(": unable to map device registers\n");
		return;
	}

	sc->sc_dmat = pa->pa_dmat;

	/*
	 * Map and establish our interrupt.
	 */
	if (pci_intr_map(pa, &ih)) {
		printf(": unable to map interrupt\n");
		return;
	}
	intrstr = pci_intr_string(pc, ih);
	psc->sc_ih = pci_intr_establish(pc, ih, IPL_NET, epic_intr, sc,
	    self->dv_xname);
	if (psc->sc_ih == NULL) {
		printf(": unable to establish interrupt");
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
		return;
	}

	esp = epic_pci_subsys_lookup(pa);
	if (esp)
		sc->sc_hwflags = esp->flags;

	/*
	 * Finish off the attach.
	 */
	epic_attach(sc, intrstr);
}
@


1.15
log
@The only network driver needing <net/if_types.h> is upl(4) for IFT_OTHER.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_epic_pci.c,v 1.14 2014/12/22 02:28:52 tedu Exp $	*/
d50 1
a50 1
#include <net/if_dl.h>
a53 2

#include <net/if_media.h>
@


1.14
log
@unifdef INET
@
text
@d1 1
a1 1
/*	$OpenBSD: if_epic_pci.c,v 1.13 2014/07/22 13:12:11 mpi Exp $	*/
a50 1
#include <net/if_types.h>
@


1.13
log
@Fewer <netinet/in_systm.h>
@
text
@d1 1
a1 1
/*	$OpenBSD: if_epic_pci.c,v 1.12 2013/08/07 01:06:35 bluhm Exp $	*/
a52 1
#ifdef INET
a54 1
#endif
@


1.12
log
@Most network drivers include netinet/in_var.h, but apparently they
don't have to.  Just remove these include lines.
Compiled on amd64 i386 sparc64; OK henning@@ mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_epic_pci.c,v 1.11 2012/10/18 21:44:21 deraadt Exp $	*/
a54 2
#include <netinet/in_systm.h>
#include <netinet/ip.h>
@


1.11
log
@Convert a number of old private copies of code which predates
pci_set_powerstate() to using it instead.  Many of these chunks of code had
bugs in them, especially missing delay() calls.  Some of them were doing
things our PCI subsystem is now responsible for handling.  If you have
any of the affected devices, please keep an eye out for regressions.
ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: if_epic_pci.c,v 1.10 2011/04/03 15:36:02 jasper Exp $	*/
a55 1
#include <netinet/in_var.h>
@


1.10
log
@use nitems(); no binary change for drivers that are compiled on amd64.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_epic_pci.c,v 1.9 2008/06/26 05:42:17 ray Exp $	*/
d149 1
a149 1
	int state, ioh_valid, memh_valid;
d151 1
a151 10
	state = pci_set_powerstate(pc, pa->pa_tag, PCI_PMCSR_STATE_D0);
	if (state == PCI_PMCSR_STATE_D3) {
		/*
		 * IO and MEM are disabled. We can't enable
		 * the card because the BARs might be invalid.
		 */
		printf(": unable to wake up from power state D3, "
		    "reboot required.\n");
		return;
	}
@


1.9
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_epic_pci.c,v 1.8 2008/05/13 02:24:08 brad Exp $	*/
d134 1
a134 1
	    sizeof(epic_pci_devices)/sizeof(epic_pci_devices[0])));
@


1.8
log
@Remove commented out NetBSD __KERNEL_RCSID macro usage.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_epic_pci.c,v 1.7 2007/10/22 23:00:45 fgsch Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.7
log
@only output on situations where power state is D3. unify the message in
such cases. ok brad@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_epic_pci.c,v 1.6 2007/10/22 03:16:35 fgsch Exp $	*/
a44 5

#if 0
#include <sys/cdefs.h>
__KERNEL_RCSID(0, "$NetBSD: if_epic_pci.c,v 1.28 2005/02/27 00:27:32 perry Exp $");
#endif
@


1.6
log
@Use pci_set_powerstate(), shrinking the code and unifying the different
versions. ok by many.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_epic_pci.c,v 1.5 2006/04/20 20:31:12 miod Exp $	*/
d164 8
a171 12
	if (state != PCI_PMCSR_STATE_D0) {
		if (state == PCI_PMCSR_STATE_D3) {
			/*
			 * IO and MEM are disabled. We can't enable
			 * the card because the BARs might be invalid.
			 */
			printf(": unable to wake up from power state D3, "
			    "reboot required.\n");
			return;
		} else {
			printf(": waking up from power state D%d\n", state);
		}
@


1.5
log
@Fix various printf() issues: too many arguments, not enough arguments, argument
order reversed, wrong modifiers. ok deraadt@@ marco@@ mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_epic_pci.c,v 1.4 2005/12/15 23:17:23 krw Exp $	*/
d161 1
a161 2
	pcireg_t reg;
	int pmreg, ioh_valid, memh_valid;
d163 3
a165 12
	if (pci_get_capability(pc, pa->pa_tag, PCI_CAP_PWRMGMT, &pmreg, 0)) {
		reg = pci_conf_read(pc, pa->pa_tag, pmreg + PCI_PMCSR);
		switch (reg & PCI_PMCSR_STATE_MASK) {
		case PCI_PMCSR_STATE_D1:
		case PCI_PMCSR_STATE_D2:
			printf(": waking up from power state D%d\n",
			    reg & PCI_PMCSR_STATE_MASK);
			pci_conf_write(pc, pa->pa_tag, pmreg + PCI_PMCSR,
			    (reg & ~PCI_PMCSR_STATE_MASK) |
			    PCI_PMCSR_STATE_D0);
			break;
		case PCI_PMCSR_STATE_D3:
d170 1
a170 2
			printf(
			    ": unable to wake up from power state D3, "
a171 3
			pci_conf_write(pc, pa->pa_tag, pmreg + PCI_PMCSR,
			    (reg & ~PCI_PMCSR_STATE_MASK) |
			    PCI_PMCSR_STATE_D0);
d173 2
@


1.4
log
@Fix error printf()s.

ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_epic_pci.c,v 1.3 2005/07/02 21:51:05 brad Exp $	*/
d170 1
a170 1
			    sc->sc_dev.dv_xname, reg & PCI_PMCSR_STATE_MASK);
d182 1
a182 1
			    "reboot required.\n", sc->sc_dev.dv_xname);
d207 1
a207 2
		printf(": unable to map device registers\n",
		    sc->sc_dev.dv_xname);
d217 1
a217 2
		printf(": unable to map interrupt\n",
		    sc->sc_dev.dv_xname);
@


1.3
log
@de-static and we don't need to enable bus mastering here
@
text
@d1 1
a1 1
/*	$OpenBSD: if_epic_pci.c,v 1.2 2005/05/10 02:37:46 brad Exp $	*/
d226 1
a226 2
		printf("%s: unable to establish interrupt",
		    sc->sc_dev.dv_xname);
@


1.2
log
@use pci_matchbyid().
@
text
@d1 1
a1 1
/*	$OpenBSD: if_epic_pci.c,v 1.1 2005/05/10 01:16:32 brad Exp $	*/
d100 2
a101 2
static int	epic_pci_match(struct device *, void *, void *);
static void	epic_pci_attach(struct device *, struct device *, void *);
d142 1
a142 1
static int
d149 1
a149 1
static void
a212 5

	/* Make sure bus mastering is enabled. */
	pci_conf_write(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG,
	    pci_conf_read(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG) |
	    PCI_COMMAND_MASTER_ENABLE);
@


1.1
log
@Add epic(4) driver which supersedes tx(4).

This buys us..
- bus_dma
- big endian support
- multicast
- support for another EPIC chipset

From NetBSD

ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d107 3
a109 7
static const struct epic_pci_product {
	u_int32_t	epp_prodid;	/* PCI product ID */
	const char	*epp_name;	/* device name */
} epic_pci_products[] = {
	{ PCI_PRODUCT_SMC_83C170,	"SMC 83c170 Fast Ethernet" },
	{ PCI_PRODUCT_SMC_83C175,	"SMC 83c175 Fast Ethernet" },
	{ 0,				NULL },
a111 15
static const struct epic_pci_product *
epic_pci_lookup(const struct pci_attach_args *pa)
{
	const struct epic_pci_product *epp;

	if (PCI_VENDOR(pa->pa_id) != PCI_VENDOR_SMC)
		return (NULL);

	for (epp = epic_pci_products; epp->epp_name != NULL; epp++)
		if (PCI_PRODUCT(pa->pa_id) == epp->epp_prodid)
			return (epp);

	return (NULL);
}

d145 2
a146 6
	struct pci_attach_args *pa = aux;

	if (epic_pci_lookup(pa) != NULL)
		return (1);

	return (0);
a157 1
	const struct epic_pci_product *epp;
a162 6

	epp = epic_pci_lookup(pa);
	if (epp == NULL) {
		printf("\n");
		panic(": epic_pci_attach: impossible");
	}
@

