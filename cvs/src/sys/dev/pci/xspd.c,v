head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.4
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.5.0.8
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.6
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5;
locks; strict;
comment	@ * @;


1.6
date	2017.07.18.11.42.51;	author mikeb;	state Exp;
branches;
next	1.5;
commitid	Y9ZhEbqAcRnqIZnE;

1.5
date	2016.01.29.19.04.30;	author mikeb;	state Exp;
branches;
next	1.4;
commitid	JnL9q61QcwW3tbUG;

1.4
date	2016.01.15.14.27.08;	author mikeb;	state Exp;
branches;
next	1.3;
commitid	dQDkEWTtzV0PvUhk;

1.3
date	2015.12.21.18.17.36;	author mikeb;	state Exp;
branches;
next	1.2;
commitid	iEb7l4w8l1M3rzzp;

1.2
date	2015.12.12.21.09.20;	author reyk;	state Exp;
branches;
next	1.1;
commitid	EPR4s4J0Ifyi9FuA;

1.1
date	2015.12.08.22.04.07;	author mikeb;	state Exp;
branches;
next	;
commitid	IKzwjcMUy7tCOjQB;


desc
@@


1.6
log
@Fixup the printf string, spacing
@
text
@/*	$OpenBSD: xspd.c,v 1.5 2016/01/29 19:04:30 mikeb Exp $	*/

/*
 * Copyright (c) 2015 Mike Belopuhov
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include "xen.h"

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/atomic.h>
#include <sys/device.h>
#include <sys/task.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#include <machine/i82093var.h>

#include <dev/pv/xenreg.h>
#include <dev/pv/xenvar.h>

struct xspd_softc {
	struct device		sc_dev;
	void *			sc_ih;
};

int 	xspd_match(struct device *, void *, void *);
void	xspd_attach(struct device *, struct device *, void *);
int	xspd_intr(void *);

struct cfdriver xspd_cd = {
	NULL, "xspd", DV_DULL
};

struct cfattach xspd_ca = {
	sizeof(struct xspd_softc), xspd_match, xspd_attach, NULL, NULL
};

const struct pci_matchid xspd_devices[] = {
	{ PCI_VENDOR_XENSOURCE, PCI_PRODUCT_XENSOURCE_PLATFORMDEV }
};

int
xspd_match(struct device *parent, void *match, void *aux)
{
	return (pci_matchbyid(aux, xspd_devices, nitems(xspd_devices)));
}

#if NXEN > 0
void
xspd_attach(struct device *parent, struct device *self, void *aux)
{
	struct pci_attach_args *pa = (struct pci_attach_args *)aux;
	struct xspd_softc *sc = (struct xspd_softc *)self;
	const char *intrstr = NULL;
	pci_intr_handle_t ih;
	struct xen_hvm_param xhp;
	extern struct xen_softc *xen_sc;

	if (xen_sc == NULL || (xen_sc->sc_flags & XSF_CBVEC)) {
		printf("\n");
		return;
	}

	if (pci_intr_map(pa, &ih) != 0) {
		printf(": couldn't map interrupt\n");
		return;
	}

	intrstr = pci_intr_string(pa->pa_pc, ih);
	sc->sc_ih = pci_intr_establish(pa->pa_pc, ih, IPL_NET | IPL_MPSAFE,
	    xspd_intr, sc, sc->sc_dev.dv_xname);
	if (sc->sc_ih == NULL) {
		printf(": couldn't establish interrupt");
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
		return;
	}
	printf(": %s\n", intrstr);

	xhp.domid = DOMID_SELF;
	xhp.index = HVM_PARAM_CALLBACK_IRQ;

	if (ih.line & APIC_INT_VIA_APIC)
		xhp.value = HVM_CALLBACK_PCI_INTX(pa->pa_device,
		    pa->pa_intrpin - 1);
	else
		xhp.value = HVM_CALLBACK_GSI(pci_intr_line(pa->pa_pc, ih));

	if (xen_hypercall(xen_sc, XC_HVM, 2, HVMOP_set_param, &xhp)) {
		printf("%s: failed to register callback PCI vector\n",
		    sc->sc_dev.dv_xname);
		pci_intr_disestablish(pa->pa_pc, sc->sc_ih);
		return;
	}

	xen_sc->sc_flags |= XSF_CBVEC;
}

int
xspd_intr(void *arg)
{
	xen_intr();

	return (1);
}
#else
void
xspd_attach(struct device *parent, struct device *self, void *aux)
{
	printf("\n");
}
#endif	/* NXEN > 0 */
@


1.5
log
@Add support for XS_WATCH: XenStore notification facility

After configuring a watch for the node, XenStore will asynchronously
notify the system when the value of the specified node changes with
an event message.
@
text
@d1 1
a1 1
/*	$OpenBSD: xspd.c,v 1.4 2016/01/15 14:27:08 mikeb Exp $	*/
d88 1
a88 1
		printf(": couldn't establish interrupt\n");
a128 1

@


1.4
log
@Detach emulated network devices if Netfront driver is enabled

Xen doesn't provide a way for a guest to decide which model of
the interface is selected in the VM configuration and therefore
there's no simple way for Netfront and emulated devices to co-
exist on the same system.  Emulated em(4) or re(4) drivers will
take over if xnf(4) driver is disabled or not compiled in.

Idea and OK reyk
@
text
@d1 1
a1 1
/*	$OpenBSD: xspd.c,v 1.3 2015/12/21 18:17:36 mikeb Exp $	*/
d25 1
@


1.3
log
@Cleanup hypercall subsystem type defines
@
text
@d1 1
a1 1
/*	$OpenBSD: xspd.c,v 1.2 2015/12/12 21:09:20 reyk Exp $	*/
d73 1
a73 1
	if (xen_sc == NULL || xen_sc->sc_cbvec != 0) {
d111 1
a111 1
	xen_sc->sc_cbvec = 1;
@


1.2
log
@Add OpenBSD Id.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d104 1
a104 1
	if (xen_hypercall(xen_sc, hvm_op, 2, HVMOP_set_param, &xhp)) {
@


1.1
log
@Driver for the XenSource Platform Device

This is a simple driver for the virtual PCI device with only one
purpose: to allocate the interrupt vector and communicate that
to the Hypervisor in case the IDT callback method was not available.

With input from and OK deraadt, mlarkin, reyk, mpi
@
text
@d1 2
@

