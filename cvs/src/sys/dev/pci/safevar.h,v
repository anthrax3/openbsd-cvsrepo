head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.8
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.10
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.4
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.18
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.16
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.12
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.10
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.8
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.6.0.10
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.6
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.8
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.4
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.5.0.22
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.20
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.18
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.16
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	SMP:1.5.0.4
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5;
locks; strict;
comment	@ * @;


1.9
date	2014.08.15.15.43.27;	author mikeb;	state Exp;
branches;
next	1.8;
commitid	LeQoXlNl7Wd4ia6V;

1.8
date	2010.12.15.23.34.23;	author mikeb;	state Exp;
branches;
next	1.7;

1.7
date	2010.08.27.15.02.12;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2008.07.21.04.12.21;	author kevlo;	state Exp;
branches
	1.6.6.1
	1.6.10.1;
next	1.5;

1.5
date	2003.08.20.16.28.35;	author jason;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2003.08.14.15.26.03;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.12.23.08.46;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.12.20.40.19;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.12.18.48.13;	author jason;	state Exp;
branches;
next	;

1.5.4.1
date	2004.02.19.10.56.30;	author niklas;	state Exp;
branches;
next	;

1.6.6.1
date	2010.12.20.14.08.40;	author jasper;	state Exp;
branches;
next	;

1.6.10.1
date	2010.12.17.16.25.14;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove support for public key operations
@
text
@/*	$OpenBSD: safevar.h,v 1.8 2010/12/15 23:34:23 mikeb Exp $	*/

/*-
 * Copyright (c) 2003 Sam Leffler, Errno Consulting
 * Copyright (c) 2003 Global Technology Associates, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: /repoman/r/ncvs/src/sys/dev/safe/safevar.h,v 1.1 2003/07/21 21:46:07 sam Exp $
 */
#ifndef _SAFE_SAFEVAR_H_
#define	_SAFE_SAFEVAR_H_

/* public key parameter locations */
#define	SAFE_CRK_PARAM_BASE	0
#define	SAFE_CRK_PARAM_EXP	1
#define	SAFE_CRK_PARAM_MOD	2

/* Maximum queue length */
#ifndef SAFE_MAX_NQUEUE
#define SAFE_MAX_NQUEUE	60
#endif

#define	SAFE_MAX_PART		64	/* Maximum scatter/gather depth */
#define	SAFE_DMA_BOUNDARY	0	/* No boundary for source DMA ops */
#define	SAFE_MAX_DSIZE		MCLBYTES /* Fixed scatter particle size */
#define	SAFE_MAX_SSIZE		0x0ffff	/* Maximum gather particle size */
#define	SAFE_MAX_DMA		0xfffff	/* Maximum PE operand size (20 bits) */
/* total src+dst particle descriptors */
#define	SAFE_TOTAL_DPART	(SAFE_MAX_NQUEUE * SAFE_MAX_PART)
#define	SAFE_TOTAL_SPART	(SAFE_MAX_NQUEUE * SAFE_MAX_PART)

#define	SAFE_RNG_MAXBUFSIZ	128	/* 32-bit words */

#define	SAFE_CARD(sid)		(((sid) & 0xf0000000) >> 28)
#define	SAFE_SESSION(sid)	( (sid) & 0x0fffffff)
#define	SAFE_SID(crd, sesn)	(((crd) << 28) | ((sesn) & 0x0fffffff))

#ifdef _KERNEL
/*
 * State associated with the allocation of each chunk
 * of memory setup for DMA.
 */
struct safe_dma_alloc {
	u_int32_t		dma_paddr;	/* physical address */
	caddr_t			dma_vaddr;	/* virtual address */
	bus_dmamap_t		dma_map;	/* associated map */
	bus_dma_segment_t	dma_seg;
	bus_size_t		dma_size;	/* mapped memory size (bytes) */
	int			dma_nseg;	/* number of segments */
};

/*
 * Cryptographic operand state.  One of these exists for each
 * source and destination operand passed in from the crypto
 * subsystem.  When possible source and destination operands
 * refer to the same memory.  More often they are distinct.
 * We track the virtual address of each operand as well as
 * where each is mapped for DMA.
 */
struct safe_operand {
	union {
		struct mbuf *m;
		struct uio *io;
	} u;
	bus_dmamap_t		map;
};

/*
 * Packet engine ring entry and cryptographic operation state.
 * The packet engine requires a ring of descriptors that contain
 * pointers to various cryptographic state.  However the ring
 * configuration register allows you to specify an arbitrary size
 * for ring entries.  We use this feature to collect most of the
 * state for each cryptographic request into one spot.  Other than
 * ring entries only the ``particle descriptors'' (scatter/gather
 * lists) and the actual operand data are kept separate.  The
 * particle descriptors must also be organized in rings.  The
 * operand data can be located aribtrarily (modulo alignment constraints).
 *
 * Note that the descriptor ring is mapped onto the PCI bus so
 * the hardware can DMA data.  This means the entire ring must be
 * contiguous.
 */
struct safe_ringentry {
	struct safe_desc	re_desc;	/* command descriptor */
	struct safe_sarec	re_sa;		/* SA record */
	struct safe_sastate	re_sastate;	/* SA state record */
	struct cryptop		*re_crp;	/* crypto operation */

	struct safe_operand	re_src;		/* source operand */
	struct safe_operand	re_dst;		/* destination operand */

	int			re_sesn;	/* crypto session ID */
	int			re_flags;
#define	SAFE_QFLAGS_COPYOUTICV	0x1		/* copy back on completion */
};

#define	re_src_m	re_src.u.m
#define	re_src_io	re_src.u.io
#define	re_src_map	re_src.map
#define	re_src_nsegs	re_src.map->dm_nsegs
#define	re_src_segs	re_src.map->dm_segs
#define	re_src_mapsize	re_src.map->dm_mapsize

#define	re_dst_m	re_dst.u.m
#define	re_dst_io	re_dst.u.io
#define	re_dst_map	re_dst.map
#define	re_dst_nsegs	re_dst.map->dm_nsegs
#define	re_dst_segs	re_dst.map->dm_segs
#define	re_dst_mapsize	re_dst.map->dm_mapsize

struct rndstate_test;

struct safe_session {
	u_int32_t	ses_used;
	u_int32_t	ses_klen;		/* key length in bits */
	u_int32_t	ses_key[8];		/* DES/3DES/AES key */
	u_int32_t	ses_hminner[5];		/* hmac inner state */
	u_int32_t	ses_hmouter[5];		/* hmac outer state */
};

struct safe_softc {
	struct device		sc_dev;		/* device backpointer */
	void			*sc_ih;		/* interrupt handler cookie */
	bus_space_handle_t	sc_sh;		/* memory handle */
	bus_space_tag_t		sc_st;		/* memory tag */
	struct resource		*sc_sr;		/* memory resource */
	bus_dma_tag_t		sc_dmat;
	u_int			sc_chiprev;	/* major/minor chip revision */
	int			sc_needwakeup;	/* notify crypto layer */
	int32_t			sc_cid;		/* crypto tag */
	struct safe_dma_alloc	sc_ringalloc;	/* PE ring allocation state */
	struct safe_ringentry	*sc_ring;	/* PE ring */
	struct safe_ringentry	*sc_ringtop;	/* PE ring top */
	struct safe_ringentry	*sc_front;	/* next free entry */
	struct safe_ringentry	*sc_back;	/* next pending entry */
	int			sc_nqchip;	/* # passed to chip */
	struct safe_pdesc	*sc_spring;	/* src particle ring */
	struct safe_pdesc	*sc_springtop;	/* src particle ring top */
	struct safe_pdesc	*sc_spfree;	/* next free src particle */
	struct safe_dma_alloc	sc_spalloc;	/* src particle ring state */
	struct safe_pdesc	*sc_dpring;	/* dest particle ring */
	struct safe_pdesc	*sc_dpringtop;	/* dest particle ring top */
	struct safe_pdesc	*sc_dpfree;	/* next free dest particle */
	struct safe_dma_alloc	sc_dpalloc;	/* dst particle ring state */
	int			sc_nsessions;	/* # of sessions */
	struct safe_session	*sc_sessions;	/* sessions */

	struct timeout		sc_rngto;	/* rng timeout */
};
#endif /* _KERNEL */

struct safe_stats {
	u_int64_t st_ibytes;
	u_int64_t st_obytes;
	u_int32_t st_ipackets;
	u_int32_t st_opackets;
	u_int32_t st_invalid;		/* invalid argument */
	u_int32_t st_badsession;	/* invalid session id */
	u_int32_t st_badflags;		/* flags indicate !(mbuf | uio) */
	u_int32_t st_nodesc;		/* op submitted w/o descriptors */
	u_int32_t st_badalg;		/* unsupported algorithm */
	u_int32_t st_ringfull;		/* PE descriptor ring full */
	u_int32_t st_peoperr;		/* PE marked error */
	u_int32_t st_dmaerr;		/* PE DMA error */
	u_int32_t st_bypasstoobig;	/* bypass > 96 bytes */
	u_int32_t st_skipmismatch;	/* enc part begins before auth part */
	u_int32_t st_lenmismatch;	/* enc length different auth length */
	u_int32_t st_coffmisaligned;	/* crypto offset not 32-bit aligned */
	u_int32_t st_cofftoobig;	/* crypto offset > 255 words */
	u_int32_t st_iovmisaligned;	/* iov op not aligned */
	u_int32_t st_iovnotuniform;	/* iov op not suitable */
	u_int32_t st_unaligned;		/* unaligned src caused copy */
	u_int32_t st_notuniform;	/* non-uniform src caused copy */
	u_int32_t st_nomap;		/* bus_dmamap_create failed */
	u_int32_t st_noload;		/* bus_dmamap_load_* failed */
	u_int32_t st_nombuf;		/* MGET* failed */
	u_int32_t st_nomcl;		/* MCLGET* failed */
	u_int32_t st_maxqchip;		/* max mcr1 ops out for processing */
	u_int32_t st_rng;		/* RNG requests */
	u_int32_t st_rngalarm;		/* RNG alarm requests */
	u_int32_t st_noicvcopy;		/* ICV data copies suppressed */
};
#endif /* _SAFE_SAFEVAR_H_ */
@


1.8
log
@Bring CBC oracle attack countermeasure from r1.32 of cryptosoft.c to
the hardware crypto accelerator land.  This fixes aes-ni, via xcrypt,
glxsb(4), hifn(4), safe(4) and ubsec(4) drivers.

Original commit message by angelos:

Don't keep the last blocksize-bytes of ciphertext for use as the next
plaintext's IV, in CBC mode. Use arc4random() to acquire fresh IVs per
message.

with and ok deraadt, ok markus, djm
@
text
@d1 1
a1 1
/*	$OpenBSD: safevar.h,v 1.7 2010/08/27 15:02:12 deraadt Exp $	*/
a142 5
struct safe_pkq {
	SIMPLEQ_ENTRY(safe_pkq)	pkq_next;
	struct cryptkop *pkq_krp;
};

a170 4
	struct timeout		sc_pkto;	/* pk timeout */
	SIMPLEQ_HEAD(, safe_pkq)	sc_pkq;
	struct safe_pkq		*sc_pkq_cur;
	u_int32_t		sc_pk_reslen, sc_pk_resoff;
@


1.7
log
@no need for a sc_suspended variable
@
text
@d1 1
a1 1
/*	$OpenBSD: safevar.h,v 1.6 2008/07/21 04:12:21 kevlo Exp $	*/
d116 1
a116 2
#define	SAFE_QFLAGS_COPYOUTIV	0x1		/* copy back on completion */
#define	SAFE_QFLAGS_COPYOUTICV	0x2		/* copy back on completion */
a140 1
	u_int32_t	ses_iv[4];		/* DES/3DES/AES iv */
@


1.6
log
@cleanup - we don't have resource structure
ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: safevar.h,v 1.5 2003/08/20 16:28:35 jason Exp $	*/
a157 1
	int			sc_suspended;
@


1.6.6.1
log
@Backport from -current, original commit by mikeb@@:
------
Bring CBC oracle attack countermeasure from r1.32 of cryptosoft.c to
the hardware crypto accelerator land.  This fixes aes-ni, via xcrypt,
glxsb(4), hifn(4), safe(4) and ubsec(4) drivers.
------
@
text
@d1 1
a1 1
/*	$OpenBSD: safevar.h,v 1.6 2008/07/21 04:12:21 kevlo Exp $	*/
d116 2
a117 1
#define	SAFE_QFLAGS_COPYOUTICV	0x1		/* copy back on completion */
d142 1
@


1.6.10.1
log
@Backport from -current, original commit by mikeb@@:
------
Bring CBC oracle attack countermeasure from r1.32 of cryptosoft.c to
the hardware crypto accelerator land.  This fixes aes-ni, via xcrypt,
glxsb(4), hifn(4), safe(4) and ubsec(4) drivers.
------

ok deraadt@@ mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: safevar.h,v 1.6 2008/07/21 04:12:21 kevlo Exp $	*/
d116 2
a117 1
#define	SAFE_QFLAGS_COPYOUTICV	0x1		/* copy back on completion */
d142 1
@


1.5
log
@most of the infrastructure to support public key operation.  This is just
a snapshot of work in progress (doesn't work correctly yet).
@
text
@d1 1
a1 1
/*	$OpenBSD: safevar.h,v 1.4 2003/08/14 15:26:03 jason Exp $	*/
a151 1
	struct resource		*sc_irq;
@


1.5.4.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.4
log
@- remove some uneeded junk (mainly leftovers from ubsec cut/paste)
- fix interrupt printing
- make shared structure entries volatile to ensure ordering
- swap the key, iv, and mackey arguments appropriately
- treat particle descriptor as two 32 elements (necessary for swabbing)
- set the endian control byte correctly and flip off swabbing on the packet data
(now works on macppc)
@
text
@d1 1
a1 1
/*	$OpenBSD: safevar.h,v 1.3 2003/08/12 23:08:46 jason Exp $	*/
d34 5
d145 5
d180 4
@


1.3
log
@- Don't need the bus_dma callback cruft as we have everything necessary in the
map structure.
- pull in some of sam's debugging stuff so that #define SAFE_DEBUG will compile
- set the dst <- src when uio && nicealign && uniform
@
text
@d1 1
a1 1
/*	$OpenBSD: safevar.h,v 1.2 2003/08/12 20:40:19 jason Exp $	*/
a52 4

#define SAFE_DEF_RTY		0xff	/* PCI Retry Timeout */
#define SAFE_DEF_TOUT		0xff	/* PCI TRDY Timeout */
#define SAFE_DEF_CACHELINE	0x01	/* Cache Line setting */
@


1.2
log
@cleaning: remove sc_flags and FBSDID junk
also: let safe_uniform() check all of the elements
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a85 2
	int			nsegs;
	bus_dma_segment_t	segs[SAFE_MAX_PART];
d122 2
a123 2
#define	re_src_nsegs	re_src.nsegs
#define	re_src_segs	re_src.segs
d129 2
a130 2
#define	re_dst_nsegs	re_dst.nsegs
#define	re_dst_segs	re_dst.segs
@


1.1
log
@safenet 1141 driver from freebsd (sam at errno):
this is a completely hacked up version, complaints should be to me not sam =)
@
text
@a154 3
	int			sc_flags;	/* device specific flags */
#define	SAFE_FLAGS_KEY		0x01		/* has key accelerator */
#define	SAFE_FLAGS_RNG		0x02		/* hardware rng */
@

