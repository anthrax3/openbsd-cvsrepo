head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.8.0.10
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.14
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.3.0.14
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.12
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.8
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2016.10.31.01.38.57;	author dlg;	state Exp;
branches;
next	1.8;
commitid	mBgvFlsJVH8d545O;

1.8
date	2015.02.18.23.58.34;	author dlg;	state Exp;
branches;
next	1.7;
commitid	jIeDMQvlCKI0NUcK;

1.7
date	2015.02.18.10.08.19;	author dlg;	state Exp;
branches;
next	1.6;
commitid	7K4omJWLtiMpLOIB;

1.6
date	2014.03.24.01.18.28;	author dlg;	state Exp;
branches;
next	1.5;

1.5
date	2011.06.21.10.23.35;	author dlg;	state Exp;
branches;
next	1.4;

1.4
date	2011.06.20.05.19.20;	author dlg;	state Exp;
branches;
next	1.3;

1.3
date	2008.01.17.18.56.05;	author thib;	state Exp;
branches;
next	1.2;

1.2
date	2007.06.01.18.07.08;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.31.18.23.42;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.9
log
@turns out these chips can handle buffers up to 9400 bytes in length.

raise the mtu to 9380 bytes so we can take advantage of the extra space.

i need to revisit the macro names at some point.
@
text
@/*	$OpenBSD: if_myxreg.h,v 1.8 2015/02/18 23:58:34 dlg Exp $	*/

/*
 * Copyright (c) 2007 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Register definitions for the Myricom Myri-10G Lanai-Z8E Ethernet chipsets.
 */

#ifndef _MYX_REG_H
#define _MYX_REG_H

/*
 * Common definitions
 */

#define MYXBAR0			PCI_MAPREG_START

#define MYX_NRXDESC		256
#define MYX_NTXDESC_MIN		2
#define MYX_IRQCOALDELAY	60
#define MYX_IRQDEASSERTWAIT	1

#define MYXALIGN_CMD		64
#define MYXALIGN_DATA		PAGE_SIZE
#define MYX_BOUNDARY		4096
#define MYX_MTU			9400

#define MYX_ADDRHIGH(_v)	(((u_int64_t)_v >> 32) & 0xffffffff)
#define MYX_ADDRLOW(_v)		((u_int64_t)_v & 0xffffffff)

/*
 * PCI memory/register layout
 */

#define MYX_SRAM		0x00000000	/* SRAM offset */
#define MYX_SRAM_SIZE		0x001dff00	/* SRAM size */
#define  MYX_HEADER_POS		0x0000003c	/* Header position offset */
#define  MYX_HEADER_POS_SIZE	0x00000004	/* Header position size */
#define  MYX_FW			0x00100000	/* Firmware offset */
#define   MYX_FW_BOOT		0x00100008	/* Firmware boot offset */
#define  MYX_STRING_SPECS	0x001dfe00	/* STRING_SPECS offset */
#define  MYX_STRING_SPECS_SIZE	0x00000100	/* STRING_SPECS size */
#define MYX_BOOT		0x00fc0000	/* Boot handoff */
#define MYX_RDMA		0x00fc01c0	/* Dummy RDMA */
#define MYX_CMD			0x00f80000	/* Command offset */

/*
 * Firmware definitions
 */

#define MYXFW_ALIGNED		"myx-eth_z8e"
#define MYXFW_UNALIGNED		"myx-ethp_z8e"
#define MYXFW_TYPE_ETH		0x45544820
#define MYXFW_VER		"1.4."		/* stored as a string... */

#define MYXFW_MIN_LEN		(MYX_HEADER_POS + MYX_HEADER_POS_SIZE)

struct myx_gen_hdr {
	u_int32_t	fw_hdrlength;
	u_int32_t	fw_type;
	u_int8_t	fw_version[128];
	u_int32_t	fw_mcp_globals;
	u_int32_t	fw_sram_size;
	u_int32_t	fw_specs;
	u_int32_t	fw_specs_len;
} __packed;

/*
 * Commands, descriptors, and DMA structures
 */

struct myx_cmd {
	u_int32_t	mc_cmd;
	u_int32_t	mc_data0;
	u_int32_t	mc_data1;
	u_int32_t	mc_data2;
	u_int32_t	mc_addr_high;
	u_int32_t	mc_addr_low;
	u_int8_t	mc_pad[40];		/* pad up to 64 bytes */
} __packed;

struct myx_response {
	u_int32_t	mr_data;
	u_int32_t	mr_result;
} __packed;

struct myx_bootcmd {
	u_int32_t	bc_addr_high;
	u_int32_t	bc_addr_low;
	u_int32_t	bc_result;
	u_int32_t	bc_offset;
	u_int32_t	bc_length;
	u_int32_t	bc_copyto;
	u_int32_t	bc_jumpto;
	u_int8_t	bc_pad[36];		/* pad up to 64 bytes */
} __packed;

struct myx_rdmacmd {
	u_int32_t	rc_addr_high;
	u_int32_t	rc_addr_low;
	u_int32_t	rc_result;
	u_int32_t	rc_rdma_high;
	u_int32_t	rc_rdma_low;
	u_int32_t	rc_enable;
#define  MYXRDMA_ON	1
#define  MYXRDMA_OFF	0
	u_int8_t	rc_pad[40];		/* pad up to 64 bytes */
} __packed;

struct myx_status {
	u_int32_t	ms_reserved;
	u_int32_t	ms_dropped_pause;
	u_int32_t	ms_dropped_unicast;
	u_int32_t	ms_dropped_crc32err;
	u_int32_t	ms_dropped_phyerr;
	u_int32_t	ms_dropped_mcast;
	u_int32_t	ms_txdonecnt;
	u_int32_t	ms_linkstate;
#define  MYXSTS_LINKDOWN	0
#define  MYXSTS_LINKUP		1
#define  MYXSTS_LINKUNKNOWN	2
	u_int32_t	ms_dropped_linkoverflow;
	u_int32_t	ms_dropped_linkerror;
	u_int32_t	ms_dropped_runt;
	u_int32_t	ms_dropped_overrun;
	u_int32_t	ms_dropped_smallbufunderrun;
	u_int32_t	ms_dropped_bigbufunderrun;
	u_int32_t	ms_rdmatags_available;
#define  MYXSTS_RDMAON	1
#define  MYXSTS_RDMAOFF	0
	u_int8_t	ms_txstopped;
	u_int8_t	ms_linkdown;
	u_int8_t	ms_statusupdated;
	u_int8_t	ms_isvalid;
} __packed __aligned(4);

struct myx_intrq_desc {
	u_int16_t	iq_csum;
	u_int16_t	iq_length;
} __packed __aligned(4);

struct myx_rx_desc {
	u_int64_t	rx_addr;
} __packed __aligned(8);

struct myx_tx_desc {
	u_int64_t	tx_addr;
	u_int16_t	tx_hdr_offset;
	u_int16_t	tx_length;
	u_int8_t	tx_pad;
	u_int8_t	tx_nsegs;
	u_int8_t	tx_cksum_offset;
	u_int8_t	tx_flags;
#define  MYXTXD_FLAGS_SMALL	(1<<0)
#define  MYXTXD_FLAGS_FIRST	(1<<1)
#define  MYXTXD_FLAGS_ALIGN_ODD	(1<<2)
#define  MYXTXD_FLAGS_CKSUM	(1<<3)
#define  MYXTXD_FLAGS_NO_TSO	(1<<4)

#define  MYXTXD_FLAGS_TSO_HDR	(1<<0)
#define  MYXTXD_FLAGS_TSO_LAST	(1<<3)
#define  MYXTXD_FLAGS_TSO_CHOP	(1<<4)
#define  MYXTXD_FLAGS_TSO_PLD	(1<<5)
} __packed __aligned(8);

enum {
	MYXCMD_NONE			= 0,
	MYXCMD_RESET			= 1,
	MYXCMD_GET_VERSION		= 2,
	MYXCMD_SET_INTRQDMA		= 3,
	MYXCMD_SET_BIGBUFSZ		= 4,
	MYXCMD_SET_SMALLBUFSZ		= 5,
	MYXCMD_GET_TXRINGOFF		= 6,
	MYXCMD_GET_RXSMALLRINGOFF	= 7,
	MYXCMD_GET_RXBIGRINGOFF		= 8,
	MYXCMD_GET_INTRACKOFF		= 9,
	MYXCMD_GET_INTRDEASSERTOFF	= 10,
	MYXCMD_GET_TXRINGSZ		= 11,
	MYXCMD_GET_RXRINGSZ		= 12,
	MYXCMD_SET_INTRQSZ		= 13,
	MYXCMD_SET_IFUP			= 14,
	MYXCMD_SET_IFDOWN		= 15,
	MYXCMD_SET_MTU			= 16,
	MYXCMD_GET_INTRCOALDELAYOFF	= 17,
	MYXCMD_SET_STATSINTVL		= 18,
	MYXCMD_SET_STATSDMA_OLD		= 19,
	MYXCMD_SET_PROMISC		= 20,
	MYXCMD_UNSET_PROMISC		= 21,
	MYXCMD_SET_LLADDR		= 22,
	MYXCMD_SET_FC			= 23,
	MYXCMD_UNSET_FC			= 24,
#define  MYXCMD_FC_DEFAULT		MYXCMD_SET_FC	/* set flow control */
	MYXCMD_DMA_TEST			= 25,
	MYXCMD_SET_ALLMULTI		= 26,
	MYXCMD_UNSET_ALLMULTI		= 27,
	MYXCMD_SET_MCASTGROUP		= 28,
	MYXCMD_UNSET_MCASTGROUP		= 29,
	MYXCMD_UNSET_MCAST		= 30,
	MYXCMD_SET_STATSDMA		= 31,
	MYXCMD_UNALIGNED_DMA_TEST	= 32,
	MYXCMD_GET_UNALIGNED_STATUS	= 33,
	MYXCMD_MAX			= 34
};

enum {
	MYXCMD_OK			= 0,
	MYXCMD_UNKNOWN			= 1,
	MYXCMD_ERR_RANGE		= 2,
	MYXCMD_ERR_BUSY			= 3,
	MYXCMD_ERR_EMPTY		= 4,
	MYXCMD_ERR_CLOSED		= 5,
	MYXCMD_ERR_HASH			= 6,
	MYXCMD_ERR_BADPORT		= 7,
	MYXCMD_ERR_RES			= 8,
	MYXCMD_ERR_MULTICAST		= 9,
	MYXCMD_ERR_UNALIGNED		= 10
};

#endif /* _MYX_REG_H */
@


1.8
log
@myri employees and their drivers for linux and solaris have repeatedly
told me that if you're going to rx into buffers greater than 4k in
size, they have to be aligned to a 4k boundary.

the mru of this chip is 9k, but ive been using the 12k mcl pool to
provide the alignment. however, if we move to putting 8 items on a
pool page there'll be enough slack space in the mcl12k pool pages
to allow item colouring, which in turn will break the chip requirement
above. in practice the chips i have seem to work fine with unaligned
buffers, but i dont want to risk breaking early revision chips.

this moves myx to using a private pool for allocating clusters for
the big rx ring. the item size is 9k, but we specify a 4k alignment
so every item we get out of it will be correct for the chip.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_myxreg.h,v 1.7 2015/02/18 10:08:19 dlg Exp $	*/
d40 1
@


1.7
log
@we're not using these macros
@
text
@d1 1
a1 1
/*	$OpenBSD: if_myxreg.h,v 1.6 2014/03/24 01:18:28 dlg Exp $	*/
d39 1
@


1.6
log
@annotate some packed structures with the alignment the hardware
requires and the driver provides. without this gcc assumes the
alignment of these structures is 1, which leads to some horrible
asm.

this is particularly interesting when reading stuff from the
myx_status struct (like the txdone count) which needs to be atomic.
doing byte reads and shifting them into a word in registers isnt
atomic. its also probably a bit slow. specifying the alignment fixes
this.

deraadt@@ warned me about this maybe 8 years ago.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_myxreg.h,v 1.5 2011/06/21 10:23:35 dlg Exp $	*/
a35 2
#define MYX_MAX_MTU_SMALL	(ETHERMTU + ETHER_HDR_LEN + 4)
#define MYX_MAX_MTU_BIG		PAGE_SIZE
@


1.5
log
@i prefer 16k ints/sec to 32k ints/sec.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_myxreg.h,v 1.4 2011/06/20 05:19:20 dlg Exp $	*/
d149 1
a149 1
} __packed;
d154 1
a154 1
} __packed;
d158 1
a158 1
} __packed;
d178 1
a178 1
} __packed;
@


1.4
log
@i got myx working!
@
text
@d1 1
a1 1
/*	$OpenBSD: if_myxreg.h,v 1.2 2007/06/01 18:07:08 reyk Exp $	*/
d34 1
a34 1
#define MYX_IRQCOALDELAY	30
@


1.3
log
@casts so this compiles on i386.
ok reyk
@
text
@d55 2
a56 2
#define  MYX_EEPROM		0x001dfe00	/* EEPROM offset */
#define  MYX_EEPROM_SIZE	0x00000100	/* EEPROM size */
d72 1
a72 1
struct myx_firmware_hdr {
d76 1
a81 1

d135 1
a135 2
#define  MYXSTS_LINKMYRINET	2
#define  MYXSTS_LINKUNKNOWN	3
d146 1
a146 1
	u_int8_t	ms_linkdowncnt;
d151 3
a153 3
struct myx_rxdesc {
	u_int16_t	rx_csum;
	u_int16_t	rx_length;
d156 2
a157 3
struct myx_rxbufdesc {
	u_int32_t	rb_addr_high;
	u_int32_t	rb_addr_low;
d160 2
a161 3
struct myx_txdesc {
	u_int32_t	tx_addr_high;
	u_int32_t	tx_addr_low;
@


1.2
log
@initialize the rings
@
text
@d1 1
a1 1
/*	$OpenBSD: if_myxreg.h,v 1.1 2007/05/31 18:23:42 reyk Exp $	*/
d42 2
a43 2
#define MYX_ADDRHIGH(_v)	((_v >> 32) & 0xffffffff)
#define MYX_ADDRLOW(_v)		(_v & 0xffffffff)
@


1.1
log
@initial bits of a new driver for the Myricom Myri-10G Lanai-Z8E 10Gb
Ethernet chipset. not working yet.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d33 1
d36 2
a37 1
#define MYX_FLOW_CONTROL	1
d42 2
a43 2
#define MYX_ADDRHIGH(_v)	htobe32((_v >> 32) & 0xffffffff)
#define MYX_ADDRLOW(_v)		htobe32(_v & 0xffffffff)
d153 28
a180 2
	u_int16_t	rd_csum;
	u_int16_t	rd_length;
d190 3
a192 3
	MYXCMD_GET_TXOFF		= 6,
	MYXCMD_GET_SMALLRXOFF		= 7,
	MYXCMD_GET_BIGRXOFF		= 8,
d209 1
d218 2
a219 1
	MYXCMD_GET_UNALIGNED_STATUS	= 33
@

