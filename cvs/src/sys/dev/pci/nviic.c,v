head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.12
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.10
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.8
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.16.0.14
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.12
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.10
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.6
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.4
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.2
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.8
	OPENBSD_5_0:1.15.0.6
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.4
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.4
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.13.0.4
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.12.0.2
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5;
locks; strict;
comment	@ * @;


1.17
date	2015.03.14.03.38.48;	author jsg;	state Exp;
branches;
next	1.16;
commitid	p4LJxGKbi0BU2cG6;

1.16
date	2012.03.15.14.21.50;	author sthen;	state Exp;
branches;
next	1.15;

1.15
date	2010.04.08.00.23.53;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2009.06.18.08.19.03;	author jsg;	state Exp;
branches;
next	1.13;

1.13
date	2008.05.22.05.27.01;	author brad;	state Exp;
branches;
next	1.12;

1.12
date	2007.09.13.16.49.03;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.03.09.36.26;	author dlg;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.03.01.38.15;	author dlg;	state Exp;
branches;
next	1.9;

1.9
date	2006.12.11.18.16.37;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2006.11.06.04.00.15;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2006.07.23.02.12.12;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.29.17.59.47;	author brad;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.30.00.18.06;	author dlg;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.11.14.41.08;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.11.08.19.04;	author dlg;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.09.00.43.23;	author dlg;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.04.00.40.08;	author dlg;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: nviic.c,v 1.16 2012/03/15 14:21:50 sthen Exp $ */

/*
 * Copyright (c) 2005 David Gwynne <dlg@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/rwlock.h>

#include <machine/bus.h>

#include <dev/pci/pcidevs.h>
#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>

#include <dev/i2c/i2cvar.h>

/* PCI Configuration space registers */
#define NVI_PCI_SMBASE1		0x20
#define NVI_PCI_SMBASE2		0x24

#define NVI_OLD_PCI_SMBASE1	0x50
#define NVI_OLD_PCI_SMBASE2	0x54

#define NVI_SMBASE(x)		((x) & 0xfffc)
#define NVI_SMBASE_SIZE		8

/* SMBus 2.0 registers */   
#define NVI_SMB_PRTCL		0x00	/* protocol, PEC */
#define NVI_SMB_STS		0x01	/* status */
#define NVI_SMB_ADDR		0x02	/* address */
#define NVI_SMB_CMD		0x03	/* command */
#define NVI_SMB_DATA(o)		(0x04 + (o))	/* 32 data registers */
#define NVI_SMB_BCNT		0x24	/* number of data bytes */
#define NVI_SMB_ALRM_A		0x25	/* alarm address */
#define NVI_SMB_ALRM_D		0x26	/* 2 bytes alarm data */

#define NVI_SMB_STS_DONE	0x80
#define NVI_SMB_STS_ALRM	0x40
#define NVI_SMB_STS_RES		0x20
#define NVI_SMB_STS_STATUS	0x1f

#define NVI_SMB_PRTCL_WRITE	0x00
#define NVI_SMB_PRTCL_READ	0x01
#define NVI_SMB_PRTCL_QUICK	0x02
#define NVI_SMB_PRTCL_BYTE	0x04
#define NVI_SMB_PRTCL_BYTE_DATA	0x06
#define NVI_SMB_PRTCL_WORD_DATA	0x08
#define NVI_SMB_PRTCL_BLOCK_DATA 0x0a
#define NVI_SMB_PRTCL_PROC_CALL	0x0c
#define NVI_SMB_PRTCL_BLOCK_PROC_CALL 0x0d
#define NVI_SMB_PRTCL_PEC	0x80

#ifdef NVIIC_DEBUG
#define DPRINTF(x...)		do { if (nviic_debug) printf(x); } while (0)
int nviic_debug = 1;
#else
#define DPRINTF(x...)		/* x */
#endif

/* there are two iic busses on this pci device */
#define NVIIC_NBUS		2

int		nviic_match(struct device *, void *, void *);
void		nviic_attach(struct device *, struct device *, void *);

struct nviic_softc;

struct nviic_controller {
	struct nviic_softc	*nc_sc;
	bus_space_handle_t	nc_ioh;
	struct rwlock		nc_lock;
	struct i2c_controller	nc_i2c;
};

struct nviic_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_iot;
	struct nviic_controller	sc_nc[NVIIC_NBUS];
};

struct cfattach nviic_ca = {
	sizeof(struct nviic_softc), nviic_match, nviic_attach
};

struct cfdriver nviic_cd = {
	NULL, "nviic", DV_DULL
};

int		nviic_i2c_acquire_bus(void *, int);
void		nviic_i2c_release_bus(void *, int);
int		nviic_i2c_exec(void *, i2c_op_t, i2c_addr_t, const void *,
		    size_t, void *, size_t, int);

u_int8_t	nviic_read(struct nviic_controller *, bus_size_t);
void		nviic_write(struct nviic_controller *, bus_size_t, u_int8_t);

#define DEVNAME(s)		((sc)->sc_dev.dv_xname)

const struct pci_matchid nviic_ids[] = {
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_NFORCE2_SMB },
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_NFORCE2_400_SMB },
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_NFORCE3_SMB },
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_NFORCE3_250_SMB },
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_NFORCE4_SMB },
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_MCP51_SMB },
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_MCP55_SMB },
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_MCP61_SMB },
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_MCP65_SMB },
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_MCP67_SMB },
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_MCP73_SMB },
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_MCP77_SMB },
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_MCP79_SMB },
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_MCP89_SMB }
};

int
nviic_match(struct device *parent, void *match, void *aux)
{
	return (pci_matchbyid(aux, nviic_ids,
	    sizeof(nviic_ids) / sizeof(nviic_ids[0])));
}

void
nviic_attach(struct device *parent, struct device *self, void *aux)
{
	struct nviic_softc		*sc = (struct nviic_softc *)self;
	struct pci_attach_args		*pa = aux;
	struct nviic_controller		*nc;
	struct i2cbus_attach_args	iba;
	int				baseregs[NVIIC_NBUS];
	pcireg_t			reg;
	int				i;

	sc->sc_iot = pa->pa_iot;

	printf("\n");

	/* Older chipsets used non-standard BARs */
	switch (PCI_PRODUCT(pa->pa_id)) {
	case PCI_PRODUCT_NVIDIA_NFORCE2_SMB:
	case PCI_PRODUCT_NVIDIA_NFORCE2_400_SMB:
	case PCI_PRODUCT_NVIDIA_NFORCE3_SMB:
	case PCI_PRODUCT_NVIDIA_NFORCE3_250_SMB:
	case PCI_PRODUCT_NVIDIA_NFORCE4_SMB:
		baseregs[0] = NVI_OLD_PCI_SMBASE1;
		baseregs[1] = NVI_OLD_PCI_SMBASE2;
		break;
	default:
		baseregs[0] = NVI_PCI_SMBASE1;
		baseregs[1] = NVI_PCI_SMBASE2;
	}

	for (i = 0; i < NVIIC_NBUS; i++) {
		nc = &sc->sc_nc[i];

		reg = pci_conf_read(pa->pa_pc, pa->pa_tag, baseregs[i]);
		if (NVI_SMBASE(reg) == 0 ||
		    bus_space_map(sc->sc_iot, NVI_SMBASE(reg), NVI_SMBASE_SIZE,
		    0, &nc->nc_ioh)) {
			printf("%s: unable to map space for bus %d\n",
			    DEVNAME(sc), i);
			continue;
		}

		nc->nc_sc = sc;
		rw_init(&nc->nc_lock, "nviic");
		nc->nc_i2c.ic_cookie = nc;
		nc->nc_i2c.ic_acquire_bus = nviic_i2c_acquire_bus;
		nc->nc_i2c.ic_release_bus = nviic_i2c_release_bus;
		nc->nc_i2c.ic_exec = nviic_i2c_exec;

		bzero(&iba, sizeof(iba));
		iba.iba_name = "iic";
		iba.iba_tag = &nc->nc_i2c;
		config_found(self, &iba, iicbus_print);
	}
}

int
nviic_i2c_acquire_bus(void *arg, int flags)
{
	struct nviic_controller		*nc = arg;

	if (cold || (flags & I2C_F_POLL))
		return (0);

	return (rw_enter(&nc->nc_lock, RW_WRITE | RW_INTR));
}

void
nviic_i2c_release_bus(void *arg, int flags)
{
	struct nviic_controller		*nc = arg;

	if (cold || (flags & I2C_F_POLL))
		return;

	rw_exit(&nc->nc_lock);
}

int
nviic_i2c_exec(void *arg, i2c_op_t op, i2c_addr_t addr,
    const void *cmdbuf, size_t cmdlen, void *buf, size_t len, int flags)
{
	struct nviic_controller		*nc = arg;
#ifdef NVIIC_DEBUG
	struct nviic_softc		*sc = nc->nc_sc;
#endif
	u_int8_t			protocol;
	u_int8_t			*b;
	u_int8_t			sts;
	int				i;

	DPRINTF("%s: exec op: %d addr: 0x%x cmdlen: %d len: %d flags 0x%x\n",
	    DEVNAME(sc), op, addr, cmdlen, len, flags);

	if (cold)
		flags |= I2C_F_POLL;

	if (I2C_OP_STOP_P(op) == 0 || cmdlen > 1 || len > 2)
		return (1);

	/* set slave address */
	nviic_write(nc, NVI_SMB_ADDR, addr << 1);

	/* set command byte */
	if (cmdlen > 0) {
		b = (u_int8_t *)cmdbuf;
		nviic_write(nc, NVI_SMB_CMD, b[0]);
	}

	b = (u_int8_t *)buf;

	/* write data */
	if (I2C_OP_WRITE_P(op)) {
		for (i = 0; i < len; i++)
			nviic_write(nc, NVI_SMB_DATA(i), b[i]);
	}

	switch (len) {
	case 0:
		protocol = NVI_SMB_PRTCL_BYTE;
		break;
	case 1:
		protocol = NVI_SMB_PRTCL_BYTE_DATA;
		break;
	case 2:
		protocol = NVI_SMB_PRTCL_WORD_DATA;
		break;
	}

	/* set direction */
	if (I2C_OP_READ_P(op))
		protocol |= NVI_SMB_PRTCL_READ;

	/* start transaction */
	nviic_write(nc, NVI_SMB_PRTCL, protocol);

	for (i = 1000; i > 0; i--) {
		delay(100);
		if (nviic_read(nc, NVI_SMB_PRTCL) == 0)
			break;
	}
	if (i == 0) {
		DPRINTF("%s: timeout\n", DEVNAME(sc));
		return (1);
	}

	sts = nviic_read(nc, NVI_SMB_STS);
	if (sts & NVI_SMB_STS_STATUS)
		return (1);

	/* read data */
	if (I2C_OP_READ_P(op)) {
		for (i = 0; i < len; i++)
			b[i] = nviic_read(nc, NVI_SMB_DATA(i));
	}

	return (0);
}

u_int8_t
nviic_read(struct nviic_controller *nc, bus_size_t r)
{
	struct nviic_softc		*sc = nc->nc_sc;

	bus_space_barrier(sc->sc_iot, nc->nc_ioh, r, 1,
	    BUS_SPACE_BARRIER_READ);
	return (bus_space_read_1(sc->sc_iot, nc->nc_ioh, r));
}

void
nviic_write(struct nviic_controller *nc, bus_size_t r, u_int8_t v)
{
	struct nviic_softc		*sc = nc->nc_sc;

	bus_space_write_1(sc->sc_iot, nc->nc_ioh, r, v);
	bus_space_barrier(sc->sc_iot, nc->nc_ioh, r, 1,
	    BUS_SPACE_BARRIER_WRITE);
}
@


1.16
log
@Let nviic(4) match the NVIDIA MCP89 chipset, from Brad.
@
text
@d1 1
a1 1
/*	$OpenBSD: nviic.c,v 1.15 2010/04/08 00:23:53 tedu Exp $ */
a21 1
#include <sys/kernel.h>
@


1.15
log
@these files don't need to include proc.h anymore.  ok oga for agp
@
text
@d1 1
a1 1
/*	$OpenBSD: nviic.c,v 1.14 2009/06/18 08:19:03 jsg Exp $ */
d128 2
a129 1
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_MCP79_SMB }
@


1.14
log
@Remove support for cancelled NVIDIA MCP7B and add initial support for
MCP89.

From Brad based on information from Peer Chen @@ NVIDIA via Linux.
@
text
@d1 1
a1 1
/*	$OpenBSD: nviic.c,v 1.13 2008/05/22 05:27:01 brad Exp $ */
a23 1
#include <sys/proc.h>
@


1.13
log
@Add the MCP77, 79 and 7B SMBus controller ids.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nviic.c,v 1.12 2007/09/13 16:49:03 brad Exp $ */
d129 1
a129 2
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_MCP79_SMB },
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_MCP7B_SMB }
@


1.12
log
@Add the NVIDIA MCP73 SMBus controller.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nviic.c,v 1.11 2007/05/03 09:36:26 dlg Exp $ */
d127 4
a130 1
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_MCP73_SMB }
@


1.11
log
@convert lockmgr style locks to rwlocks.

input from art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nviic.c,v 1.10 2007/05/03 01:38:15 dlg Exp $ */
d126 2
a127 1
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_MCP67_SMB }
@


1.10
log
@convert lockmgr to rwlocks
@
text
@d1 1
a1 1
/*	$OpenBSD: nviic.c,v 1.9 2006/12/11 18:16:37 deraadt Exp $ */
d200 1
a200 3
	rw_enter_write(&nc->nc_lock);

	return (0);
d211 1
a211 1
	rw_exit_write(&nc->nc_lock);
@


1.9
log
@do not bus_space_map devices which are at address 0; ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: nviic.c,v 1.8 2006/11/06 04:00:15 brad Exp $ */
d23 1
a23 1
#include <sys/lock.h>
d88 1
a88 1
	struct lock		nc_lock;
d179 1
a179 1
		lockinit(&nc->nc_lock, PRIBIO | PCATCH, "iiclk", 0, 0);
d200 3
a202 1
	return (lockmgr(&nc->nc_lock, LK_EXCLUSIVE, NULL));
d213 1
a213 1
	lockmgr(&nc->nc_lock, LK_RELEASE, NULL);
@


1.8
log
@add the NVIDIA MCP67 SMBus controller.
@
text
@d1 1
a1 1
/*	$OpenBSD: nviic.c,v 1.7 2006/07/23 02:12:12 brad Exp $ */
d170 2
a171 1
		if (bus_space_map(sc->sc_iot, NVI_SMBASE(reg), NVI_SMBASE_SIZE,
@


1.7
log
@add NVidia MCP61/65 ids.
@
text
@d1 1
a1 1
/*	$OpenBSD: nviic.c,v 1.6 2006/06/29 17:59:47 brad Exp $ */
d125 2
a126 1
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_MCP65_SMB }
@


1.6
log
@add support for NVIDIA MCP51 and MCP55 SMbus controllers.

Info about the new BAR locations on the Linux lm-sensors list
via jsg@@

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nviic.c,v 1.5 2006/01/30 00:18:06 dlg Exp $ */
d123 3
a125 1
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_MCP55_SMB }
@


1.5
log
@reduce the timeout waiting for command completions from 5 seconds to .1
seconds. i think if the bus is wired up wrong the command never completes,
which in turn generates a 3 minute delay during boot while we try to scan
for i2c devices.

problem reported by Johan Mson Lindman who is also happy with the fix.
@
text
@d1 1
a1 1
/*	$OpenBSD: nviic.c,v 1.4 2006/01/11 14:41:08 jsg Exp $ */
d35 5
a39 2
#define NVI_PCI_SMBASE1		0x50
#define NVI_PCI_SMBASE2		0x54
d121 3
a123 1
	{ PCI_VENDOR_NVIDIA, PCI_PRODUCT_NVIDIA_NFORCE4_SMB }
d148 15
a162 2
	baseregs[0] = NVI_PCI_SMBASE1;
	baseregs[1] = NVI_PCI_SMBASE2;
@


1.4
log
@Fix compilation without NVIIC_DEBUG defined, ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nviic.c,v 1.3 2006/01/11 08:19:04 dlg Exp $ */
d250 2
a251 2
	for (i = 10000; i > 0; i--) {
		delay(500);
@


1.3
log
@make the timeout printf a debug message
@
text
@d1 1
a1 1
/*	$OpenBSD: nviic.c,v 1.2 2006/01/09 00:43:23 dlg Exp $ */
d197 1
d199 1
@


1.2
log
@fix a panic in the locking stuff that was caused by a pasto. found by
Johan M:son Lindman.
@
text
@d1 1
a1 1
/*	$OpenBSD: nviic.c,v 1.1 2006/01/04 00:40:08 dlg Exp $ */
d254 1
a254 1
		printf("%s: timeout\n", DEVNAME(sc));
@


1.1
log
@driver for the nvidia nforce2/3/4 smbus controller.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d189 1
a189 1
	lockmgr(&nc->nc_lock, LK_EXCLUSIVE, NULL);
@

