head	1.12;
access;
symbols
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.12
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.8
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.6
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.8
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.4
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.9.0.8
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.6
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.4
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.7.0.4
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.1.0.2
	OPENBSD_4_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2017.01.08.18.08.14;	author visa;	state Exp;
branches;
next	1.11;
commitid	riH4VCDRaaOQfCKK;

1.11
date	2014.07.08.05.35.18;	author dlg;	state Exp;
branches;
next	1.10;
commitid	0QJleeeWqZmC5anF;

1.10
date	2013.02.01.06.51.32;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2010.09.20.07.40.38;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2009.03.23.21.58.54;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.26.05.42.17;	author ray;	state Exp;
branches;
next	1.6;

1.6
date	2007.11.25.00.27.44;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.12.18.19.54;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2007.02.11.22.16.21;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.28.16.34.42;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.17.19.34.34;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.16.21.06.23;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Use a macro for the Tx timeout value.

OK deraadt@@ kettenis@@
@
text
@/*	$OpenBSD: if_mskvar.h,v 1.11 2014/07/08 05:35:18 dlg Exp $	*/
/*	$NetBSD: if_skvar.h,v 1.6 2005/05/30 04:35:22 christos Exp $	*/

/*-
 * Copyright (c) 2003 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*	$OpenBSD: if_mskvar.h,v 1.11 2014/07/08 05:35:18 dlg Exp $	*/

/*
 * Copyright (c) 1997, 1998, 1999, 2000
 *	Bill Paul <wpaul@@ctr.columbia.edu>.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Bill Paul.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY Bill Paul AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL Bill Paul OR THE VOICES IN HIS HEAD
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $FreeBSD: /c/ncvs/src/sys/pci/if_skreg.h,v 1.9 2000/04/22 02:16:37 wpaul Exp $
 */

/*
 * Copyright (c) 2003 Nathan L. Binkert <binkertn@@umich.edu>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _DEV_PCI_IF_MSKVAR_H_
#define _DEV_PCI_IF_MSKVAR_H_

struct sk_chain {
	void			*sk_le;
	struct mbuf		*sk_mbuf;
	struct sk_chain		*sk_next;
};

/*
 * Number of DMA segments in a TxCB. Note that this is carefully
 * chosen to make the total struct size an even power of two. It's
 * critical that no TxCB be split across a page boundary since
 * no attempt is made to allocate physically contiguous memory.
 *
 */
#define SK_NTXSEG      30

#define SK_NRXSEG      4

struct sk_txmap_entry {
	bus_dmamap_t			dmamap;
	SIMPLEQ_ENTRY(sk_txmap_entry)	link;
};

struct msk_chain_data {
	struct if_rxring	sk_rx_ring;
	struct sk_chain		sk_tx_chain[MSK_TX_RING_CNT];
	struct sk_chain		sk_rx_chain[MSK_RX_RING_CNT];
	struct sk_txmap_entry	*sk_tx_map[MSK_TX_RING_CNT];
	bus_dmamap_t		sk_rx_map[MSK_RX_RING_CNT];
	int			sk_tx_prod;
	int			sk_tx_cons;
	int			sk_tx_cnt;
	int			sk_rx_prod;
	int			sk_rx_cons;
};

struct msk_ring_data {
	struct msk_tx_desc	sk_tx_ring[MSK_TX_RING_CNT];
	struct msk_rx_desc	sk_rx_ring[MSK_RX_RING_CNT];
};

#define MSK_TX_RING_ADDR(sc, i) \
    ((sc)->sk_ring_map->dm_segs[0].ds_addr + \
     offsetof(struct msk_ring_data, sk_tx_ring[(i)]))

#define MSK_RX_RING_ADDR(sc, i) \
    ((sc)->sk_ring_map->dm_segs[0].ds_addr + \
     offsetof(struct msk_ring_data, sk_rx_ring[(i)]))

#define MSK_CDOFF(x)	offsetof(struct msk_ring_data, x)
#define MSK_CDTXOFF(x)	MSK_CDOFF(sk_tx_ring[(x)])
#define MSK_CDRXOFF(x)	MSK_CDOFF(sk_rx_ring[(x)])
#define MSK_CDSTOFF(x)	((x) * sizeof(struct msk_status_desc))

#define MSK_CDTXSYNC(sc, x, n, ops)					\
do {									\
	int __x, __n;							\
									\
	__x = (x);							\
	__n = (n);							\
									\
	/* If it will wrap around, sync to the end of the ring. */	\
	if ((__x + __n) > MSK_TX_RING_CNT) {				\
		bus_dmamap_sync((sc)->sk_softc->sc_dmatag,		\
		    (sc)->sk_ring_map, MSK_CDTXOFF(__x),		\
		    sizeof(struct msk_tx_desc) * (MSK_TX_RING_CNT - __x), \
		    (ops));						\
		__n -= (MSK_TX_RING_CNT - __x);				\
		__x = 0;						\
	}								\
									\
	/* Now sync whatever is left. */				\
	bus_dmamap_sync((sc)->sk_softc->sc_dmatag, (sc)->sk_ring_map,	\
	    MSK_CDTXOFF((__x)), sizeof(struct msk_tx_desc) * __n, (ops)); \
} while (/*CONSTCOND*/0)

#define MSK_CDRXSYNC(sc, x, ops)					\
do {									\
	bus_dmamap_sync((sc)->sk_softc->sc_dmatag, (sc)->sk_ring_map,	\
	    MSK_CDRXOFF((x)), sizeof(struct msk_rx_desc), (ops));	\
} while (/*CONSTCOND*/0)

#define MSK_CDSTSYNC(sc, x, ops)					\
do {									\
	bus_dmamap_sync((sc)->sc_dmatag, (sc)->sk_status_map,		\
	    MSK_CDSTOFF((x)), sizeof(struct msk_status_desc), (ops));	\
} while (/*CONSTCOND*/0)

#define SK_INC(x, y)	(x) = (x + 1) % y

/* Forward decl. */
struct sk_if_softc;

/* Softc for the Yukon-II controller. */
struct sk_softc {
	struct device		sk_dev;		/* generic device */
	bus_space_handle_t	sk_bhandle;	/* bus space handle */
	bus_space_tag_t		sk_btag;	/* bus space tag */
	bus_size_t		sk_bsize;	/* bus space size */
	void			*sk_intrhand;	/* irq handler handle */
	pci_chipset_tag_t	sk_pc;
	u_int8_t		sk_fibertype;
	u_int8_t		sk_type;
	u_int8_t		sk_rev;
	u_int8_t		sk_macs;	/* # of MACs */
	char			*sk_name;
	u_int32_t		sk_ramsize;	/* amount of RAM on NIC */
	u_int32_t		sk_intrmask;
	bus_dma_tag_t		sc_dmatag;
	struct sk_if_softc	*sk_if[2];
	struct msk_status_desc	*sk_status_ring;
	bus_dmamap_t		sk_status_map;
	bus_dma_segment_t	sk_status_seg;
	int			sk_status_nseg;
	int			sk_status_idx;
};

/* Softc for each logical interface */
struct sk_if_softc {
	struct device		sk_dev;		/* generic device */
	struct arpcom		arpcom;		/* interface info */
	struct mii_data		sk_mii;
	u_int8_t		sk_port;	/* port # on controller */
	u_int8_t		sk_xmac_rev;	/* XMAC chip rev (B2 or C1) */
	u_int32_t		sk_rx_ramstart;
	u_int32_t		sk_rx_ramend;
	u_int32_t		sk_tx_ramstart;
	u_int32_t		sk_tx_ramend;
	int			sk_pktlen;
	int			sk_link;
	struct timeout		sk_tick_ch;
	struct msk_chain_data	sk_cdata;
	struct msk_ring_data	*sk_rdata;
	bus_dmamap_t		sk_ring_map;
	bus_dma_segment_t	sk_ring_seg;
	int			sk_ring_nseg;
	int			sk_status_idx;
	struct sk_softc		*sk_softc;	/* parent controller */
	int			sk_tx_bmu;	/* TX BMU register */
	SIMPLEQ_HEAD(__sk_txmaphead, sk_txmap_entry)	sk_txmap_head;
};

struct skc_attach_args {
	u_int16_t	skc_port;
	u_int8_t	skc_type;
	u_int8_t	skc_rev;
};

#define MSK_TX_TIMEOUT	5

#endif /* _DEV_PCI_IF_MSKVAR_H_ */
@


1.11
log
@cut things that relied on mclgeti for rx ring accounting/restriction over
to using if_rxr.

cut the reporting systat did over to the rxr ioctl.

tested as much as i can on alpha, amd64, and sparc64.
mpi@@ has run it on macppc.
ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mskvar.h,v 1.10 2013/02/01 06:51:32 brad Exp $	*/
d29 1
a29 1
/*	$OpenBSD: if_mskvar.h,v 1.10 2013/02/01 06:51:32 brad Exp $	*/
d230 2
@


1.10
log
@Rewrite the receive filter handling code and cleanup the ioctl bits.

ok jsg@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mskvar.h,v 1.9 2010/09/20 07:40:38 deraadt Exp $	*/
d29 1
a29 1
/*	$OpenBSD: if_mskvar.h,v 1.9 2010/09/20 07:40:38 deraadt Exp $	*/
d99 2
d107 1
a116 1
	int			sk_rx_cnt;
@


1.9
log
@Stop doing shutdown hooks in network drivers where possible.  We already
take all interfaces down, via their xxstop routines.  Claudio and I have
verified that none of the shutdown hooks do much extra beyond what xxstop
was already doing; it is largely a pile of junk.
ok claudio, some early comments by sthen; also read by matthew, jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mskvar.h,v 1.8 2009/03/23 21:58:54 kettenis Exp $	*/
d29 1
a29 1
/*	$OpenBSD: if_mskvar.h,v 1.8 2009/03/23 21:58:54 kettenis Exp $	*/
a219 1
	int			sk_if_flags;
@


1.8
log
@Switch msk(4) over to using MCLGETI when allocating mbufs for the RX ring.
This gets rid of one of the evil jumbo allocators!
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mskvar.h,v 1.7 2008/06/26 05:42:17 ray Exp $	*/
d29 1
a29 1
/*	$OpenBSD: if_mskvar.h,v 1.7 2008/06/26 05:42:17 ray Exp $	*/
a221 1
	void			*sk_sdhook;
@


1.7
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mskvar.h,v 1.6 2007/11/25 00:27:44 kettenis Exp $	*/
d29 1
a29 1
/*	$OpenBSD: if_mskvar.h,v 1.6 2007/11/25 00:27:44 kettenis Exp $	*/
a83 5
struct sk_jpool_entry {
	int                             slot;
	LIST_ENTRY(sk_jpool_entry)	jpool_entries;
};

a108 1
	bus_dmamap_t		sk_rx_jumbo_map;
a114 3
	/* Stick the jumbo mem management stuff here too. */
	caddr_t			sk_jslots[MSK_JSLOTS];
	void			*sk_jumbo_buf;
d209 1
a209 1
	int			sk_cnt;
a220 2
	LIST_HEAD(__sk_jfreehead, sk_jpool_entry)	sk_jfree_listhead;
	LIST_HEAD(__sk_jinusehead, sk_jpool_entry)	sk_jinuse_listhead;
@


1.6
log
@Make msk(4) detachable.

"can't be wrong" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mskvar.h,v 1.5 2007/05/12 18:19:54 kettenis Exp $	*/
a15 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
d29 1
a29 1
/*	$OpenBSD: if_mskvar.h,v 1.5 2007/05/12 18:19:54 kettenis Exp $	*/
@


1.5
log
@Take alignment restrictions into account when setting up RAM buffer addresses.
This makes Yukon-2 FE chips work reliably.
Pointed out by giovanni at gmail dot com.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mskvar.h,v 1.4 2007/02/11 22:16:21 kettenis Exp $	*/
d36 1
a36 1
/*	$OpenBSD: if_mskvar.h,v 1.4 2007/02/11 22:16:21 kettenis Exp $	*/
d195 1
d197 1
d209 2
d231 2
d240 1
@


1.4
log
@Add support for fiber on 88E8021/22.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mskvar.h,v 1.3 2006/12/28 16:34:42 kettenis Exp $	*/
d36 1
a36 1
/*	$OpenBSD: if_mskvar.h,v 1.3 2006/12/28 16:34:42 kettenis Exp $	*/
a200 1
	u_int32_t		sk_rboff;	/* RAMbuffer offset */
@


1.3
log
@Remove useless code dealing with media type.  Simplify PHY reset code.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mskvar.h,v 1.2 2006/11/17 19:34:34 kettenis Exp $	*/
d36 1
a36 1
/*	$OpenBSD: if_mskvar.h,v 1.2 2006/11/17 19:34:34 kettenis Exp $	*/
d196 1
@


1.2
log
@Remove code that deals with sk(4) specific phy's that breaks certain msk(4)
variants.

tested by jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mskvar.h,v 1.1 2006/08/16 21:06:23 kettenis Exp $	*/
d36 1
a36 1
/*	$OpenBSD: if_mskvar.h,v 1.1 2006/08/16 21:06:23 kettenis Exp $	*/
a195 2
	u_int8_t		sk_coppertype;
	u_int8_t		sk_pmd;		/* physical media type */
@


1.1
log
@Enter msk(4), an initial stab at a driver for the Marvell Yukon-2 Gigabit
ethernet controllers.  It works well enough to commit over.  There's a lot
code duplication from sk(4) though that needs to be reduced.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_skvar.h,v 1.2 2005/12/22 20:54:47 brad Exp $	*/
d36 1
a36 1
/*	$OpenBSD: if_skvar.h,v 1.2 2005/12/22 20:54:47 brad Exp $	*/
a222 2
	u_int8_t		sk_phytype;
	int			sk_phyaddr;
@

