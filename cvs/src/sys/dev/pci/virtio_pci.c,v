head	1.18;
access;
symbols
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.15.0.4
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4;
locks; strict;
comment	@ * @;


1.18
date	2017.05.31.08.57.48;	author sf;	state Exp;
branches;
next	1.17;
commitid	UInHhZR8QqAVlIbk;

1.17
date	2017.01.21.11.29.52;	author reyk;	state Exp;
branches;
next	1.16;
commitid	m38CW0tHaVHeWGZV;

1.16
date	2017.01.13.14.37.32;	author reyk;	state Exp;
branches;
next	1.15;
commitid	vUNP41E5WEDEFVb3;

1.15
date	2016.07.19.02.51.09;	author sf;	state Exp;
branches;
next	1.14;
commitid	DdfSYRa54VInkcAd;

1.14
date	2016.07.16.12.07.21;	author sf;	state Exp;
branches;
next	1.13;
commitid	xwG1NnCreRZPT02N;

1.13
date	2016.07.14.12.42.00;	author sf;	state Exp;
branches;
next	1.12;
commitid	dRWcvkhmYqa5q2C1;

1.12
date	2015.11.15.16.00.15;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	ljEQUtNashCSwiHT;

1.11
date	2015.07.18.16.35.33;	author sf;	state Exp;
branches;
next	1.10;
commitid	G2Lp1dpkuh0qn5GQ;

1.10
date	2015.07.18.00.37.16;	author sf;	state Exp;
branches;
next	1.9;
commitid	xmaD6XfoQvFJfC6k;

1.9
date	2015.03.14.03.38.49;	author jsg;	state Exp;
branches;
next	1.8;
commitid	p4LJxGKbi0BU2cG6;

1.8
date	2014.12.15.20.15.48;	author brad;	state Exp;
branches;
next	1.7;
commitid	ShNr2O3ttyLMvy6q;

1.7
date	2013.09.22.09.58.46;	author sf;	state Exp;
branches;
next	1.6;

1.6
date	2013.03.10.21.58.02;	author sf;	state Exp;
branches;
next	1.5;

1.5
date	2013.03.10.21.56.11;	author sf;	state Exp;
branches;
next	1.4;

1.4
date	2012.12.05.23.20.21;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2012.10.12.21.12.19;	author reyk;	state Exp;
branches;
next	1.2;

1.2
date	2012.09.20.06.06.21;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2012.09.19.19.24.33;	author sf;	state Exp;
branches;
next	;


desc
@@


1.18
log
@virtio_pci: Support IPL_MPSAFE interrupt handlers
@
text
@/*	$OpenBSD: virtio_pci.c,v 1.17 2017/01/21 11:29:52 reyk Exp $	*/
/*	$NetBSD: virtio.c,v 1.3 2011/11/02 23:05:52 njoly Exp $	*/

/*
 * Copyright (c) 2012 Stefan Fritsch.
 * Copyright (c) 2010 Minoura Makoto.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/mutex.h>

#include <dev/pci/pcidevs.h>
#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>

#include <dev/pv/virtioreg.h>
#include <dev/pv/virtiovar.h>

/*
 * XXX: Before being used on big endian arches, the access to config registers
 * XXX: needs to be reviewed/fixed. The non-device specific registers are
 * XXX: PCI-endian while the device specific registers are native endian.
 */

#define MAX_MSIX_VECS	8
#define virtio_set_status(sc, s) virtio_pci_set_status(sc, s)
#define virtio_device_reset(sc) virtio_set_status((sc), 0)

struct virtio_pci_softc;

int		virtio_pci_match(struct device *, void *, void *);
void		virtio_pci_attach(struct device *, struct device *, void *);
int		virtio_pci_detach(struct device *, int);

void		virtio_pci_kick(struct virtio_softc *, uint16_t);
uint8_t		virtio_pci_read_device_config_1(struct virtio_softc *, int);
uint16_t	virtio_pci_read_device_config_2(struct virtio_softc *, int);
uint32_t	virtio_pci_read_device_config_4(struct virtio_softc *, int);
uint64_t	virtio_pci_read_device_config_8(struct virtio_softc *, int);
void		virtio_pci_write_device_config_1(struct virtio_softc *, int, uint8_t);
void		virtio_pci_write_device_config_2(struct virtio_softc *, int, uint16_t);
void		virtio_pci_write_device_config_4(struct virtio_softc *, int, uint32_t);
void		virtio_pci_write_device_config_8(struct virtio_softc *, int, uint64_t);
uint16_t	virtio_pci_read_queue_size(struct virtio_softc *, uint16_t);
void		virtio_pci_setup_queue(struct virtio_softc *, uint16_t, uint32_t);
void		virtio_pci_set_status(struct virtio_softc *, int);
uint32_t	virtio_pci_negotiate_features(struct virtio_softc *, uint32_t,
					      const struct virtio_feature_name *);
int		virtio_pci_msix_establish(struct virtio_pci_softc *, struct pci_attach_args *, int, int (*)(void *), void *);
int		virtio_pci_setup_msix(struct virtio_pci_softc *, struct pci_attach_args *, int);
void		virtio_pci_free_irqs(struct virtio_pci_softc *);
int		virtio_pci_poll_intr(void *);
int		virtio_pci_legacy_intr(void *);
int		virtio_pci_legacy_intr_mpsafe(void *);
int		virtio_pci_config_intr(void *);
int		virtio_pci_queue_intr(void *);
int		virtio_pci_shared_queue_intr(void *);

enum irq_type {
	IRQ_NO_MSIX,
	IRQ_MSIX_SHARED, /* vec 0: config irq, vec 1 shared by all vqs */
	IRQ_MSIX_PER_VQ, /* vec 0: config irq, vec n: irq of vq[n-1] */
};

struct virtio_pci_softc {
	struct virtio_softc	sc_sc;
	pci_chipset_tag_t	sc_pc;

	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
	bus_size_t		sc_iosize;

	void			*sc_ih[MAX_MSIX_VECS];

	int			sc_config_offset;
	enum irq_type		sc_irq_type;
};

struct cfattach virtio_pci_ca = {
	sizeof(struct virtio_pci_softc),
	virtio_pci_match,
	virtio_pci_attach,
	virtio_pci_detach,
	NULL
};

struct virtio_ops virtio_pci_ops = {
	virtio_pci_kick,
	virtio_pci_read_device_config_1,
	virtio_pci_read_device_config_2,
	virtio_pci_read_device_config_4,
	virtio_pci_read_device_config_8,
	virtio_pci_write_device_config_1,
	virtio_pci_write_device_config_2,
	virtio_pci_write_device_config_4,
	virtio_pci_write_device_config_8,
	virtio_pci_read_queue_size,
	virtio_pci_setup_queue,
	virtio_pci_set_status,
	virtio_pci_negotiate_features,
	virtio_pci_poll_intr,
};

uint16_t
virtio_pci_read_queue_size(struct virtio_softc *vsc, uint16_t idx)
{
	struct virtio_pci_softc *sc = (struct virtio_pci_softc *)vsc;
	bus_space_write_2(sc->sc_iot, sc->sc_ioh, VIRTIO_CONFIG_QUEUE_SELECT,
	    idx);
	return bus_space_read_2(sc->sc_iot, sc->sc_ioh,
	    VIRTIO_CONFIG_QUEUE_SIZE);
}

void
virtio_pci_setup_queue(struct virtio_softc *vsc, uint16_t idx, uint32_t addr)
{
	struct virtio_pci_softc *sc = (struct virtio_pci_softc *)vsc;
	bus_space_write_2(sc->sc_iot, sc->sc_ioh, VIRTIO_CONFIG_QUEUE_SELECT,
	    idx);
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, VIRTIO_CONFIG_QUEUE_ADDRESS,
	    addr);

	/*
	 * This path is only executed if this function is called after
	 * the child's attach function has finished. In other cases,
	 * it's done in virtio_pci_setup_msix().
	 */
	if (sc->sc_irq_type != IRQ_NO_MSIX) {
		int vec = 1;
		if (sc->sc_irq_type == IRQ_MSIX_PER_VQ)
		       vec += idx;
		bus_space_write_2(sc->sc_iot, sc->sc_ioh,
		    VIRTIO_MSI_QUEUE_VECTOR, vec);
	}
}

void
virtio_pci_set_status(struct virtio_softc *vsc, int status)
{
	struct virtio_pci_softc *sc = (struct virtio_pci_softc *)vsc;
	int old = 0;

	if (status != 0)
		old = bus_space_read_1(sc->sc_iot, sc->sc_ioh,
				       VIRTIO_CONFIG_DEVICE_STATUS);
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, VIRTIO_CONFIG_DEVICE_STATUS,
			  status|old);
}

int
virtio_pci_match(struct device *parent, void *match, void *aux)
{
	struct pci_attach_args *pa;

	pa = (struct pci_attach_args *)aux;
	if (PCI_VENDOR(pa->pa_id) == PCI_VENDOR_QUMRANET &&
	    PCI_PRODUCT(pa->pa_id) >= 0x1000 &&
	    PCI_PRODUCT(pa->pa_id) <= 0x103f &&
	    PCI_REVISION(pa->pa_class) == 0)
		return 1;
	if (PCI_VENDOR(pa->pa_id) == PCI_VENDOR_OPENBSD &&
	    PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_OPENBSD_CONTROL)
		return 1;
	return 0;
}

void
virtio_pci_attach(struct device *parent, struct device *self, void *aux)
{
	struct virtio_pci_softc *sc = (struct virtio_pci_softc *)self;
	struct virtio_softc *vsc = &sc->sc_sc;
	struct pci_attach_args *pa = (struct pci_attach_args *)aux;
	pci_chipset_tag_t pc = pa->pa_pc;
	pcitag_t tag = pa->pa_tag;
	int revision;
	pcireg_t id;
	char const *intrstr;
	pci_intr_handle_t ih;

	revision = PCI_REVISION(pa->pa_class);
	if (revision != 0) {
		printf("unknown revision 0x%02x; giving up\n", revision);
		return;
	}

	/* subsystem ID shows what I am */
	id = PCI_PRODUCT(pci_conf_read(pc, tag, PCI_SUBSYS_ID_REG));

	printf("\n");

	vsc->sc_ops = &virtio_pci_ops;
	sc->sc_pc = pc;
	vsc->sc_dmat = pa->pa_dmat;
	sc->sc_config_offset = VIRTIO_CONFIG_DEVICE_CONFIG_NOMSI;
	sc->sc_irq_type = IRQ_NO_MSIX;

	/*
	 * For virtio, ignore normal MSI black/white-listing depending on the
	 * PCI bridge but enable it unconditionally.
	 */
	pa->pa_flags |= PCI_FLAGS_MSI_ENABLED;

	if (pci_mapreg_map(pa, PCI_MAPREG_START, PCI_MAPREG_TYPE_IO, 0,
	    &sc->sc_iot, &sc->sc_ioh, NULL, &sc->sc_iosize, 0)) {
		printf("%s: can't map i/o space\n", vsc->sc_dev.dv_xname);
		return;
	}

	virtio_device_reset(vsc);
	virtio_pci_set_status(vsc, VIRTIO_CONFIG_DEVICE_STATUS_ACK);
	virtio_pci_set_status(vsc, VIRTIO_CONFIG_DEVICE_STATUS_DRIVER);

	/* XXX: use softc as aux... */
	vsc->sc_childdevid = id;
	vsc->sc_child = NULL;
	config_found(self, sc, NULL);
	if (vsc->sc_child == NULL) {
		printf("%s: no matching child driver; not configured\n",
		    vsc->sc_dev.dv_xname);
		goto fail_1;
	}
	if (vsc->sc_child == VIRTIO_CHILD_ERROR) {
		printf("%s: virtio configuration failed\n",
		    vsc->sc_dev.dv_xname);
		goto fail_1;
	}

	if (virtio_pci_setup_msix(sc, pa, 0) == 0) {
		sc->sc_irq_type = IRQ_MSIX_PER_VQ;
		intrstr = "msix per-VQ";
	} else if (virtio_pci_setup_msix(sc, pa, 1) == 0) {
		sc->sc_irq_type = IRQ_MSIX_SHARED;
		intrstr = "msix shared";
	} else {
		int (*ih_func)(void *) = virtio_pci_legacy_intr;
		if (pci_intr_map_msi(pa, &ih) != 0 && pci_intr_map(pa, &ih) != 0) {
			printf("%s: couldn't map interrupt\n", vsc->sc_dev.dv_xname);
			goto fail_2;
		}
		intrstr = pci_intr_string(pc, ih);
		/*
		 * We always set the IPL_MPSAFE flag in order to do the relatively
		 * expensive ISR read without lock, and then grab the kernel lock in
		 * the interrupt handler.
		 */
		if (vsc->sc_ipl & IPL_MPSAFE)
			ih_func = virtio_pci_legacy_intr_mpsafe;
		sc->sc_ih[0] = pci_intr_establish(pc, ih, vsc->sc_ipl | IPL_MPSAFE,
		    ih_func, sc, vsc->sc_dev.dv_xname);
		if (sc->sc_ih[0] == NULL) {
			printf("%s: couldn't establish interrupt", vsc->sc_dev.dv_xname);
			if (intrstr != NULL)
				printf(" at %s", intrstr);
			printf("\n");
			goto fail_2;
		}
	}
	printf("%s: %s\n", vsc->sc_dev.dv_xname, intrstr);

	virtio_set_status(vsc, VIRTIO_CONFIG_DEVICE_STATUS_DRIVER_OK);
	return;

fail_2:
	config_detach(vsc->sc_child, 0);
fail_1:
	/* no pci_mapreg_unmap() or pci_intr_unmap() */
	virtio_set_status(vsc, VIRTIO_CONFIG_DEVICE_STATUS_FAILED);
}

int
virtio_pci_detach(struct device *self, int flags)
{
	struct virtio_pci_softc *sc = (struct virtio_pci_softc *)self;
	struct virtio_softc *vsc = &sc->sc_sc;
	int r;

	if (vsc->sc_child != 0 && vsc->sc_child != VIRTIO_CHILD_ERROR) {
		r = config_detach(vsc->sc_child, flags);
		if (r)
			return r;
	}
	KASSERT(vsc->sc_child == 0 || vsc->sc_child == VIRTIO_CHILD_ERROR);
	KASSERT(vsc->sc_vqs == 0);
	virtio_pci_free_irqs(sc);
	if (sc->sc_iosize)
		bus_space_unmap(sc->sc_iot, sc->sc_ioh, sc->sc_iosize);
	sc->sc_iosize = 0;

	return 0;
}

/*
 * Feature negotiation.
 * Prints available / negotiated features if guest_feature_names != NULL and
 * VIRTIO_DEBUG is 1
 */
uint32_t
virtio_pci_negotiate_features(struct virtio_softc *vsc, uint32_t guest_features,
    const struct virtio_feature_name *guest_feature_names)
{
	struct virtio_pci_softc *sc = (struct virtio_pci_softc *)vsc;
	uint32_t host, neg;

	/*
	 * indirect descriptors can be switched off by setting bit 1 in the
	 * driver flags, see config(8)
	 */
	if (!(vsc->sc_dev.dv_cfdata->cf_flags & 1) &&
	    !(vsc->sc_child->dv_cfdata->cf_flags & 1)) {
		guest_features |= VIRTIO_F_RING_INDIRECT_DESC;
	} else {
		printf("RingIndirectDesc disabled by UKC\n");
	}
	host = bus_space_read_4(sc->sc_iot, sc->sc_ioh,
				VIRTIO_CONFIG_DEVICE_FEATURES);
	neg = host & guest_features;
#if VIRTIO_DEBUG
	if (guest_feature_names)
		virtio_log_features(host, neg, guest_feature_names);
#endif
	bus_space_write_4(sc->sc_iot, sc->sc_ioh,
			  VIRTIO_CONFIG_GUEST_FEATURES, neg);
	vsc->sc_features = neg;
	if (neg & VIRTIO_F_RING_INDIRECT_DESC)
		vsc->sc_indirect = 1;
	else
		vsc->sc_indirect = 0;

	return neg;
}

/*
 * Device configuration registers.
 */
uint8_t
virtio_pci_read_device_config_1(struct virtio_softc *vsc, int index)
{
	struct virtio_pci_softc *sc = (struct virtio_pci_softc *)vsc;
	return bus_space_read_1(sc->sc_iot, sc->sc_ioh,
	    sc->sc_config_offset + index);
}

uint16_t
virtio_pci_read_device_config_2(struct virtio_softc *vsc, int index)
{
	struct virtio_pci_softc *sc = (struct virtio_pci_softc *)vsc;
	return bus_space_read_2(sc->sc_iot, sc->sc_ioh,
	    sc->sc_config_offset + index);
}

uint32_t
virtio_pci_read_device_config_4(struct virtio_softc *vsc, int index)
{
	struct virtio_pci_softc *sc = (struct virtio_pci_softc *)vsc;
	return bus_space_read_4(sc->sc_iot, sc->sc_ioh,
	    sc->sc_config_offset + index);
}

uint64_t
virtio_pci_read_device_config_8(struct virtio_softc *vsc, int index)
{
	struct virtio_pci_softc *sc = (struct virtio_pci_softc *)vsc;
	uint64_t r;

	r = bus_space_read_4(sc->sc_iot, sc->sc_ioh,
	    sc->sc_config_offset + index + sizeof(uint32_t));
	r <<= 32;
	r += bus_space_read_4(sc->sc_iot, sc->sc_ioh,
	    sc->sc_config_offset + index);
	return r;
}

void
virtio_pci_write_device_config_1(struct virtio_softc *vsc, int index,
    uint8_t value)
{
	struct virtio_pci_softc *sc = (struct virtio_pci_softc *)vsc;
	bus_space_write_1(sc->sc_iot, sc->sc_ioh,
	    sc->sc_config_offset + index, value);
}

void
virtio_pci_write_device_config_2(struct virtio_softc *vsc, int index,
    uint16_t value)
{
	struct virtio_pci_softc *sc = (struct virtio_pci_softc *)vsc;
	bus_space_write_2(sc->sc_iot, sc->sc_ioh,
	    sc->sc_config_offset + index, value);
}

void
virtio_pci_write_device_config_4(struct virtio_softc *vsc,
			     int index, uint32_t value)
{
	struct virtio_pci_softc *sc = (struct virtio_pci_softc *)vsc;
	bus_space_write_4(sc->sc_iot, sc->sc_ioh,
	    sc->sc_config_offset + index, value);
}

void
virtio_pci_write_device_config_8(struct virtio_softc *vsc,
			     int index, uint64_t value)
{
	struct virtio_pci_softc *sc = (struct virtio_pci_softc *)vsc;
	bus_space_write_4(sc->sc_iot, sc->sc_ioh,
	    sc->sc_config_offset + index, value & 0xffffffff);
	bus_space_write_4(sc->sc_iot, sc->sc_ioh,
	    sc->sc_config_offset + index + sizeof(uint32_t), value >> 32);
}

int
virtio_pci_msix_establish(struct virtio_pci_softc *sc,
    struct pci_attach_args *pa, int idx, int (*handler)(void *), void *ih_arg)
{
	struct virtio_softc *vsc = &sc->sc_sc;
	pci_intr_handle_t ih;

	if (pci_intr_map_msix(pa, idx, &ih) != 0) {
#if VIRTIO_DEBUG
		printf("%s[%d]: pci_intr_map_msix failed\n",
		    vsc->sc_dev.dv_xname, idx);
#endif
		return 1;
	}
	sc->sc_ih[idx] = pci_intr_establish(sc->sc_pc, ih, vsc->sc_ipl,
	    handler, ih_arg, vsc->sc_dev.dv_xname);
	if (sc->sc_ih[idx] == NULL) {
		printf("%s[%d]: couldn't establish msix interrupt\n",
		    vsc->sc_dev.dv_xname, idx);
		return 1;
	}
	return 0;
}

void
virtio_pci_free_irqs(struct virtio_pci_softc *sc)
{
	struct virtio_softc *vsc = &sc->sc_sc;
	int i;

	if (sc->sc_config_offset == VIRTIO_CONFIG_DEVICE_CONFIG_MSI) {
		for (i = 0; i < vsc->sc_nvqs; i++) {
			bus_space_write_2(sc->sc_iot, sc->sc_ioh,
			    VIRTIO_CONFIG_QUEUE_SELECT, i);
			bus_space_write_2(sc->sc_iot, sc->sc_ioh,
			    VIRTIO_MSI_QUEUE_VECTOR, VIRTIO_MSI_NO_VECTOR);
		}
	}

	for (i = 0; i < MAX_MSIX_VECS; i++) {
		if (sc->sc_ih[i]) {
			pci_intr_disestablish(sc->sc_pc, sc->sc_ih[i]);
			sc->sc_ih[i] = NULL;
		}
	}

	sc->sc_config_offset = VIRTIO_CONFIG_DEVICE_CONFIG_NOMSI;
}

int
virtio_pci_setup_msix(struct virtio_pci_softc *sc, struct pci_attach_args *pa,
    int shared)
{
	struct virtio_softc *vsc = &sc->sc_sc;
	int i;

	if (virtio_pci_msix_establish(sc, pa, 0, virtio_pci_config_intr, vsc))
		return 1;
	sc->sc_config_offset = VIRTIO_CONFIG_DEVICE_CONFIG_MSI;
	bus_space_write_2(sc->sc_iot, sc->sc_ioh, VIRTIO_MSI_CONFIG_VECTOR, 0);

	if (shared) {
		if (virtio_pci_msix_establish(sc, pa, 1,
		    virtio_pci_shared_queue_intr, vsc)) {
			goto fail;
		}

		for (i = 0; i < vsc->sc_nvqs; i++) {
			bus_space_write_2(sc->sc_iot, sc->sc_ioh,
			    VIRTIO_CONFIG_QUEUE_SELECT, i);
			bus_space_write_2(sc->sc_iot, sc->sc_ioh,
			    VIRTIO_MSI_QUEUE_VECTOR, 1);
		}
	} else {
		for (i = 0; i <= vsc->sc_nvqs; i++) {
			if (virtio_pci_msix_establish(sc, pa, i + 1,
			    virtio_pci_queue_intr, &vsc->sc_vqs[i])) {
				goto fail;
			}
			bus_space_write_2(sc->sc_iot, sc->sc_ioh,
			    VIRTIO_CONFIG_QUEUE_SELECT, i);
			bus_space_write_2(sc->sc_iot, sc->sc_ioh,
			    VIRTIO_MSI_QUEUE_VECTOR, i + 1);
		}
	}

	return 0;
fail:
	virtio_pci_free_irqs(sc);
	return 1;
}

/*
 * Interrupt handler.
 */

/*
 * Only used without MSI-X
 */
int
virtio_pci_legacy_intr(void *arg)
{
	struct virtio_pci_softc *sc = arg;
	struct virtio_softc *vsc = &sc->sc_sc;
	int isr, r = 0;

	/* check and ack the interrupt */
	isr = bus_space_read_1(sc->sc_iot, sc->sc_ioh,
	    VIRTIO_CONFIG_ISR_STATUS);
	if (isr == 0)
		return 0;
	KERNEL_LOCK();
	if ((isr & VIRTIO_CONFIG_ISR_CONFIG_CHANGE) &&
	    (vsc->sc_config_change != NULL)) {
		r = (vsc->sc_config_change)(vsc);
	}
	r |= virtio_check_vqs(vsc);
	KERNEL_UNLOCK();

	return r;
}

int
virtio_pci_legacy_intr_mpsafe(void *arg)
{
	struct virtio_pci_softc *sc = arg;
	struct virtio_softc *vsc = &sc->sc_sc;
	int isr, r = 0;

	/* check and ack the interrupt */
	isr = bus_space_read_1(sc->sc_iot, sc->sc_ioh,
	    VIRTIO_CONFIG_ISR_STATUS);
	if (isr == 0)
		return 0;
	if ((isr & VIRTIO_CONFIG_ISR_CONFIG_CHANGE) &&
	    (vsc->sc_config_change != NULL)) {
		r = (vsc->sc_config_change)(vsc);
	}
	r |= virtio_check_vqs(vsc);
	return r;
}

/*
 * Only used with MSI-X
 */
int
virtio_pci_config_intr(void *arg)
{
	struct virtio_softc *vsc = arg;

	if (vsc->sc_config_change != NULL)
		return vsc->sc_config_change(vsc);
	return 0;
}

/*
 * Only used with MSI-X
 */
int
virtio_pci_queue_intr(void *arg)
{
	struct virtqueue *vq = arg;

	if (vq->vq_done)
		return (vq->vq_done)(vq);
	return 0;
}

int
virtio_pci_shared_queue_intr(void *arg)
{
	struct virtio_softc *vsc = arg;

	return virtio_check_vqs(vsc);
}

/*
 * Interrupt handler to be used when polling.
 * We cannot use isr here because it is not defined in MSI-X mode.
 */
int
virtio_pci_poll_intr(void *arg)
{
	struct virtio_pci_softc *sc = arg;
	struct virtio_softc *vsc = &sc->sc_sc;
	int r = 0;

	if (vsc->sc_config_change != NULL)
		r = (vsc->sc_config_change)(vsc);

	r |= virtio_check_vqs(vsc);

	return r;
}

void
virtio_pci_kick(struct virtio_softc *vsc, uint16_t idx)
{
	struct virtio_pci_softc *sc = (struct virtio_pci_softc *)vsc;
	bus_space_write_2(sc->sc_iot, sc->sc_ioh, VIRTIO_CONFIG_QUEUE_NOTIFY,
	    idx);
}
@


1.17
log
@Switch include of virtio header from dev/pci/to dev/pv/
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio_pci.c,v 1.16 2017/01/13 14:37:32 reyk Exp $	*/
d77 1
d258 1
a267 1
		 * For now, we don't support IPL_MPSAFE vq_done functions.
d269 2
a270 1
		KASSERT((vsc->sc_ipl & IPL_MPSAFE) == 0);
d272 1
a272 1
		    virtio_pci_legacy_intr, sc, vsc->sc_dev.dv_xname);
d556 20
a627 1

@


1.16
log
@Add vmmci(4) (VMM control interface), a simple guest-side driver for vmm(4) VMs

While we don't have ACPI in vmm(4), we need a simple way to shutdown
and reboot VMs gracefully but the device also allows to add more
direct communications between host and guest later.

OK mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio_pci.c,v 1.15 2016/07/19 02:51:09 sf Exp $	*/
d39 2
a40 2
#include <dev/pci/virtioreg.h>
#include <dev/pci/virtiovar.h>
@


1.15
log
@virtio_pci: Always allow MSI/MSI-X

For virtio devices, ignore the black/white-listing depending on the PCI
bridge.  This enables MSI-X with qemu's old "82441FX" pci-bridge.

Suggested by kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio_pci.c,v 1.14 2016/07/16 12:07:21 sf Exp $	*/
d182 3
@


1.14
log
@Support MSI-X in virtio

This increases performance for interrupt heavy loads.

While suspend/resume support for MSI-X is missing, this is also missing for
virtio. So no new issue there.

Currently, qemu's old "82441FX" pci-bridge is still blacklisted for MSI. But
MSI-X is used if qemu is started with "-M q35".
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio_pci.c,v 1.13 2016/07/14 12:42:00 sf Exp $	*/
d215 6
@


1.13
log
@virtio: Move interrupt handler into transport specific code

For MSI-X (and also possibly for other transports), the interrupt
handler must do different things.  Move it out of virtio.c and into
virtio_pci.

ARM part tested by patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio_pci.c,v 1.12 2015/11/15 16:00:15 deraadt Exp $	*/
d48 1
d52 2
d72 14
a85 1
int		virtio_pci_intr(void *);
d95 1
a95 1
	void                    *sc_ih;
d98 1
d123 1
a123 1
	virtio_pci_intr,
d144 13
a207 4
#ifdef notyet
	if (pci_get_capability(pc, tag, PCI_CAP_MSIX, NULL, NULL))
		printf(", msix capable");
#endif
d214 1
d241 28
a268 20
	if (pci_intr_map_msi(pa, &ih) != 0 && pci_intr_map(pa, &ih) != 0) {
		printf("%s: couldn't map interrupt\n", vsc->sc_dev.dv_xname);
		goto fail_2;
	}
	intrstr = pci_intr_string(pc, ih);
	/*
	 * We always set the IPL_MPSAFE flag in order to do the relatively
	 * expensive ISR read without lock, and then grab the kernel lock in
	 * the interrupt handler.
	 * For now, we don't support IPL_MPSAFE vq_done functions.
	 */
	KASSERT((vsc->sc_ipl & IPL_MPSAFE) == 0);
	sc->sc_ih = pci_intr_establish(pc, ih, vsc->sc_ipl | IPL_MPSAFE,
	    virtio_pci_intr, sc, vsc->sc_dev.dv_xname);
	if (sc->sc_ih == NULL) {
		printf("%s: couldn't establish interrupt", vsc->sc_dev.dv_xname);
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
		goto fail_2;
d296 1
a296 2
	pci_intr_disestablish(sc->sc_pc, sc->sc_ih);
	sc->sc_ih = 0;
d423 92
d518 4
d523 1
a523 1
virtio_pci_intr(void *arg)
d544 54
@


1.12
log
@virtio2 at pci0 dev 3 function 0 "Qumranet Virtio Network" rev 0x00: Virtio Network Device
becomes simply
virtio2 at pci0 dev 3 function 0 "Qumranet Virtio Network" rev 0x00
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio_pci.c,v 1.11 2015/07/18 16:35:33 sf Exp $	*/
d406 1
a406 1
	    (vsc->sc_config_change != NULL))
d408 2
a409 2
	if (vsc->sc_intrhand != NULL)
		r |= (vsc->sc_intrhand)(vsc);
@


1.11
log
@virtio_pci: Do the ISR read without kernel lock

The ISR read is relatively expensive because it causes a vmexit. Grab the
kernel lock only after it is done.
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio_pci.c,v 1.10 2015/07/18 00:37:16 sf Exp $	*/
a176 1
	printf(": Virtio %s Device", virtio_device_string(id));
@


1.10
log
@KNF fixes

No object file changes besides line numbers in KASSERTs
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio_pci.c,v 1.9 2015/03/14 03:38:49 jsg Exp $	*/
d220 9
a228 2
	sc->sc_ih = pci_intr_establish(pc, ih, vsc->sc_ipl, virtio_pci_intr,
	    sc, vsc->sc_dev.dv_xname);
d405 1
d411 1
@


1.9
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio_pci.c,v 1.8 2014/12/15 20:15:48 brad Exp $	*/
d191 1
a191 1
			   &sc->sc_iot, &sc->sc_ioh, NULL, &sc->sc_iosize, 0)) {
d205 2
a206 1
		printf("%s: no matching child driver; not configured\n", vsc->sc_dev.dv_xname);
d210 2
a211 1
		printf("%s: virtio configuration failed\n", vsc->sc_dev.dv_xname);
d220 2
a221 1
	sc->sc_ih = pci_intr_establish(pc, ih, vsc->sc_ipl, virtio_pci_intr, sc, vsc->sc_dev.dv_xname);
d271 1
a271 1
			  const struct virtio_feature_name *guest_feature_names)
d312 1
a312 1
				sc->sc_config_offset + index);
d320 1
a320 1
				sc->sc_config_offset + index);
d328 1
a328 1
				sc->sc_config_offset + index);
d338 1
a338 1
			     sc->sc_config_offset + index + sizeof(uint32_t));
d341 1
a341 1
			      sc->sc_config_offset + index);
d346 2
a347 2
virtio_pci_write_device_config_1(struct virtio_softc *vsc,
			     int index, uint8_t value)
d351 1
a351 1
			  sc->sc_config_offset + index, value);
d355 2
a356 2
virtio_pci_write_device_config_2(struct virtio_softc *vsc,
			     int index, uint16_t value)
d360 1
a360 1
			  sc->sc_config_offset + index, value);
d369 1
a369 1
			  sc->sc_config_offset + index, value);
d378 1
a378 2
			  sc->sc_config_offset + index,
			  value & 0xffffffff);
d380 1
a380 2
			  sc->sc_config_offset + index + sizeof(uint32_t),
			  value >> 32);
d395 1
a395 1
			       VIRTIO_CONFIG_ISR_STATUS);
@


1.8
log
@Consistency with the pci_intr_map bits.

ok sf@@
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio_pci.c,v 1.7 2013/09/22 09:58:46 sf Exp $	*/
a31 1
#include <sys/kernel.h>
@


1.7
log
@Support MSI for virtio. This is useful for bhyve.
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio_pci.c,v 1.6 2013/03/10 21:58:02 sf Exp $	*/
d214 1
a214 1
	if (pci_intr_map_msi(pa, &ih) != 0 && pci_intr_map(pa, &ih)) {
@


1.6
log
@Rename write_queue_address -> setup_queue

For transports supporting several interrupts, this function needs to
setup per-queue interrupts in addition of setting the queue address.

No logic change.

OK jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio_pci.c,v 1.5 2013/03/10 21:56:11 sf Exp $	*/
d214 1
a214 1
	if (pci_intr_map(pa, &ih)) {
@


1.5
log
@Move sc_ih to virtio_pci_softc, it is not used outside of virtio_pci
and is really a transport-specific thing.

OK jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio_pci.c,v 1.4 2012/12/05 23:20:21 deraadt Exp $	*/
d66 1
a66 1
void		virtio_pci_write_queue_address(struct virtio_softc *, uint16_t, uint32_t);
d104 1
a104 1
	virtio_pci_write_queue_address,
d121 1
a121 1
virtio_pci_write_queue_address(struct virtio_softc *vsc, uint16_t idx, uint32_t addr)
@


1.4
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: virtio_pci.c,v 1.3 2012/10/12 21:12:19 reyk Exp $	*/
d79 3
d219 2
a220 2
	vsc->sc_ih = pci_intr_establish(pc, ih, vsc->sc_ipl, virtio_pci_intr, sc, vsc->sc_dev.dv_xname);
	if (vsc->sc_ih == NULL) {
d253 2
a254 2
	pci_intr_disestablish(sc->sc_pc, vsc->sc_ih);
	vsc->sc_ih = 0;
@


1.3
log
@Add $OpenBSD$ CVS Ids.

ok sf@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a28 2

#include <sys/cdefs.h>
@


1.2
log
@make the lines printed during attach more consistent with other drivers

ok mikeb@@ sf@@
@
text
@d1 1
@


1.1
log
@Add new drivers for virtio network (vio) and block devices (vioblk, the disks
attach as scsi disks).  These are paravirtualized devices offered by some
hypervisors like kvm and virtualbox.

The virtio transport driver has the pci specific parts separated out. This
will make it easier to add support for mmio (e.g. for ARM) later.

OK mikeb
OK jasper
"commit what you have" deraadt
@
text
@d191 1
a191 1
		printf("can't map i/o space\n");
d204 1
a204 1
		printf("no matching child driver; not configured\n");
d208 1
a208 1
		printf("virtio configuration failed\n");
d213 1
a213 1
		printf("couldn't map interrupt\n");
d219 1
a219 1
		printf("couldn't establish interrupt");
d225 1
a225 1
	printf("%s: interrupting at %s\n", vsc->sc_dev.dv_xname, intrstr);
@

