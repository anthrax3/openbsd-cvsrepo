head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.8
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.6
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.8.0.8
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.6.0.12
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.10
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.8
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.6
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.10
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.8
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.6
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.4
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.10
date	2015.11.24.17.11.39;	author mpi;	state Exp;
branches;
next	1.9;
commitid	5gdEnqVoJuTuwdTu;

1.9
date	2015.03.14.03.38.48;	author jsg;	state Exp;
branches;
next	1.8;
commitid	p4LJxGKbi0BU2cG6;

1.8
date	2013.12.06.21.03.04;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2013.11.14.12.21.13;	author dlg;	state Exp;
branches;
next	1.6;

1.6
date	2010.08.28.23.19.29;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2010.08.08.16.36.33;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2009.03.29.21.53.52;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.29.07.17.53;	author mglocker;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.29.10.37.11;	author mglocker;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.19.14.20.55;	author mglocker;	state Exp;
branches;
next	;


desc
@@


1.10
log
@You only need <net/if_dl.h> if you're using LLADDR() or a sockaddr_dl.
@
text
@/*	$OpenBSD: if_malo_pci.c,v 1.9 2015/03/14 03:38:48 jsg Exp $ */

/*
 * Copyright (c) 2006 Marcus Glocker <mglocker@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * PCI front-end for the Marvell Libertas
 */

#include "bpfilter.h"

#include <sys/param.h>
#include <sys/sockio.h>
#include <sys/mbuf.h>
#include <sys/kernel.h>
#include <sys/socket.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/timeout.h>
#include <sys/device.h>

#include <machine/bus.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <net80211/ieee80211_var.h>
#include <net80211/ieee80211_radiotap.h>

#include <dev/ic/malo.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

/* Base Address Register */
#define MALO_PCI_BAR1	0x10
#define MALO_PCI_BAR2	0x14

int	malo_pci_match(struct device *, void *, void *);
void	malo_pci_attach(struct device *, struct device *, void *);
int	malo_pci_detach(struct device *, int);
int	malo_pci_activate(struct device *, int);
void	malo_pci_wakeup(struct malo_softc *);

struct malo_pci_softc {
	struct malo_softc	sc_malo;

	pci_chipset_tag_t        sc_pc;
	void 			*sc_ih;

	bus_size_t		 sc_mapsize1;
	bus_size_t		 sc_mapsize2;
};

struct cfattach malo_pci_ca = {
	sizeof(struct malo_pci_softc), malo_pci_match, malo_pci_attach,
	malo_pci_detach, malo_pci_activate
};

const struct pci_matchid malo_pci_devices[] = {
	{ PCI_VENDOR_MARVELL, PCI_PRODUCT_MARVELL_88W8310 },
	{ PCI_VENDOR_MARVELL, PCI_PRODUCT_MARVELL_88W8335_1 },
	{ PCI_VENDOR_MARVELL, PCI_PRODUCT_MARVELL_88W8335_2 }
};

int
malo_pci_match(struct device *parent, void *match, void *aux)
{
	return (pci_matchbyid((struct pci_attach_args *)aux, malo_pci_devices,
	    sizeof(malo_pci_devices) / sizeof(malo_pci_devices[0])));
}

void
malo_pci_attach(struct device *parent, struct device *self, void *aux)
{
	struct malo_pci_softc *psc = (struct malo_pci_softc *)self;
	struct pci_attach_args *pa = aux;
	struct malo_softc *sc = &psc->sc_malo;
	const char *intrstr = NULL;
	pci_intr_handle_t ih;
	int error;

	sc->sc_dmat = pa->pa_dmat;
	psc->sc_pc = pa->pa_pc;

	/* map control / status registers */
	error = pci_mapreg_map(pa, MALO_PCI_BAR1,
	    PCI_MAPREG_TYPE_MEM | PCI_MAPREG_MEM_TYPE_32BIT, 0,
	    &sc->sc_mem1_bt, &sc->sc_mem1_bh, NULL, &psc->sc_mapsize1, 0);
	if (error != 0) {
		printf(": can't map 1st mem space\n");
		return;
	}

	/* map control / status registers */
	error = pci_mapreg_map(pa, MALO_PCI_BAR2,
	    PCI_MAPREG_TYPE_MEM | PCI_MAPREG_MEM_TYPE_32BIT, 0,
	    &sc->sc_mem2_bt, &sc->sc_mem2_bh, NULL, &psc->sc_mapsize2, 0);
	if (error != 0) {
		printf(": can't map 2nd mem space\n");
		return;
	}

	/* map interrupt */
	if (pci_intr_map(pa, &ih) != 0) {
		printf(": can't map interrupt\n");
		return;
	}

	/* establish interrupt */
	intrstr = pci_intr_string(psc->sc_pc, ih);
	psc->sc_ih = pci_intr_establish(psc->sc_pc, ih, IPL_NET, malo_intr, sc,
	    sc->sc_dev.dv_xname);
	if (psc->sc_ih == NULL) {
		printf(": could not establish interrupt");
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
		return;
	}
	printf(": %s", intrstr);

	malo_attach(sc);
}

int
malo_pci_detach(struct device *self, int flags)
{
	struct malo_pci_softc *psc = (struct malo_pci_softc *)self;
	struct malo_softc *sc = &psc->sc_malo;

	malo_detach(sc);
	pci_intr_disestablish(psc->sc_pc, psc->sc_ih);

	return (0);
}

int
malo_pci_activate(struct device *self, int act)
{
	struct malo_pci_softc *psc = (struct malo_pci_softc *)self;
	struct malo_softc *sc = &psc->sc_malo;
	struct ifnet *ifp = &sc->sc_ic.ic_if;

	switch (act) {
	case DVACT_SUSPEND:
		if (ifp->if_flags & IFF_RUNNING)
			malo_stop(sc);
		break;
	case DVACT_WAKEUP:
		malo_pci_wakeup(sc);
		break;
	}
	return (0);
}

void
malo_pci_wakeup(struct malo_softc *sc)
{
	struct ifnet *ifp = &sc->sc_ic.ic_if;

	if (ifp->if_flags & IFF_UP)
		malo_init(ifp);
}
@


1.9
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_malo_pci.c,v 1.8 2013/12/06 21:03:04 deraadt Exp $ */
a37 1
#include <net/if_dl.h>
@


1.8
log
@Add a DVACT_WAKEUP op to the *_activate() API.  This is called after the
kernel resumes normal (non-cold, able to run processes, etc) operation.
Previously we were relying on specific DVACT_RESUME op's in drivers
creating callback/threads themselves, but that has become too common,
indicating the need for a built-in mechanism.
ok dlg kettenis, tested by a sufficient amount of people
@
text
@d1 1
a1 1
/*	$OpenBSD: if_malo_pci.c,v 1.7 2013/11/14 12:21:13 dlg Exp $ */
a35 1
#include <machine/intr.h>
@


1.7
log
@replace workqs with tasks for handling resume

from kimberley manning
@
text
@d1 1
a1 1
/*	$OpenBSD: if_malo_pci.c,v 1.6 2010/08/28 23:19:29 deraadt Exp $ */
a26 1
#include <sys/task.h>
d62 1
a62 1
void	malo_pci_resume(void *, void *);
a104 2
	task_set(&sc->sc_resume_t, malo_pci_resume, sc, NULL);

d169 2
a170 2
	case DVACT_RESUME:
		task_add(systq, &sc->sc_resume_t);
d177 1
a177 1
malo_pci_resume(void *arg1, void *arg2)
a178 1
	struct malo_softc *sc = arg1;
@


1.6
log
@typo
@
text
@d1 1
a1 1
/*	$OpenBSD: if_malo_pci.c,v 1.5 2010/08/08 16:36:33 deraadt Exp $ */
d27 1
a27 1
#include <sys/workq.h>
d106 2
d173 1
a173 2
		workq_queue_task(NULL, &sc->sc_resume_wqt, 0,
		    malo_pci_resume, sc, NULL);
@


1.5
log
@activate function for suspend/restore; from mglocker
@
text
@d1 1
a1 1
/*	$OpenBSD: if_malo_pci.c,v 1.4 2009/03/29 21:53:52 sthen Exp $ */
d174 1
a174 2
}

@


1.4
log
@make various strings ("can't map mem space" and similar) more consistent
between instances, saving space in the kernel. feedback from many (some
incorporated, some left for future work).

ok deraadt, kettenis, "why not" miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_malo_pci.c,v 1.3 2006/12/29 07:17:53 mglocker Exp $ */
d27 1
d62 2
d77 1
a77 1
	malo_pci_detach
d156 31
@


1.3
log
@Don't wrap MAC address to newline.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_malo_pci.c,v 1.2 2006/11/29 10:37:11 mglocker Exp $ */
d108 1
a108 1
		printf(": could not map 1st memory space\n");
d117 1
a117 1
		printf(": could not map 2nd memory space\n");
d123 1
a123 1
		printf(": could not map interrupt\n");
@


1.2
log
@Add another ID to match for the 88W8310 chip.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_malo_pci.c,v 1.1 2006/11/19 14:20:55 mglocker Exp $ */
d138 1
a138 1
	printf(": %s\n", intrstr);
@


1.1
log
@Add PCI hookup for malo(4).

Tested by Stephane Chausson <stephane.chausson@@laposte.net> with a
Netgear WG311v3.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d78 1
@

