head	1.11;
access;
symbols
	OPENBSD_6_0:1.11.0.24
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.12
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.20
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.18
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.16
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.14
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.10
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.8
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.6
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.4
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.10.0.8
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.6
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.9.0.4
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.8.0.4
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.6.0.10
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.8
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	SMP:1.1.0.4
	UBC:1.1.0.2
	UBC_SYNC_B:1.2;
locks; strict;
comment	@ * @;


1.11
date	2011.04.03.15.36.02;	author jasper;	state Exp;
branches;
next	1.10;

1.10
date	2009.03.29.21.53.52;	author sthen;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.26.05.42.17;	author ray;	state Exp;
branches;
next	1.8;

1.8
date	2007.04.10.17.47.55;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.09.04.10.10;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.28.15.26.23;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.28.15.14.08;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.19.23.57.29;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.19.18.40.17;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.58;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.24.22.38.03;	author mickey;	state Exp;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2002.01.31.22.55.34;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.06.11.03.42.24;	author art;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2003.05.19.22.18.00;	author tedu;	state Exp;
branches;
next	;

1.1.4.1
date	2002.03.28.15.35.57;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2003.03.28.00.38.20;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.11
log
@use nitems(); no binary change for drivers that are compiled on amd64.

ok claudio@@
@
text
@/*	$OpenBSD: bha_pci.c,v 1.10 2009/03/29 21:53:52 sthen Exp $	*/
/*	$NetBSD: bha_pci.c,v 1.16 1998/08/15 10:10:53 mycroft Exp $	*/

/*-
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Charles M. Hannum.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/bus.h>
#include <machine/intr.h>

#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>

#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#include <dev/ic/bhareg.h>
#include <dev/ic/bhavar.h>

#define	PCI_CBIO	0x10

int	bha_pci_match(struct device *, void *, void *);
void	bha_pci_attach(struct device *, struct device *, void *);

struct cfattach bha_pci_ca = {
	sizeof(struct bha_softc), bha_pci_match, bha_pci_attach
};

const struct pci_matchid bha_pci_devices[] = {
	{ PCI_VENDOR_BUSLOGIC, PCI_PRODUCT_BUSLOGIC_MULTIMASTER_NC },
	{ PCI_VENDOR_BUSLOGIC, PCI_PRODUCT_BUSLOGIC_MULTIMASTER },
};

/*
 * Check the slots looking for a board we recognise
 * If we find one, note its address (slot) and call
 * the actual probe routine to check it out.
 */
int
bha_pci_match(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct pci_attach_args *pa = aux;
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	bus_size_t iosize;
	int rv;

	if (pci_matchbyid(pa, bha_pci_devices, nitems(bha_pci_devices)) == 0)
		return (0);

	if (pci_mapreg_map(pa, PCI_CBIO, PCI_MAPREG_TYPE_IO, 0, &iot, &ioh,
	    NULL, &iosize, 0))
		return (0);

	rv = bha_find(iot, ioh, NULL);
	bus_space_unmap(iot, ioh, iosize);

	return (rv);
}

/*
 * Attach all the sub-devices we can find
 */
void
bha_pci_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct pci_attach_args *pa = aux;
	struct bha_softc *sc = (void *)self;
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	bus_size_t iosize;
	struct bha_probe_data bpd;
	pci_chipset_tag_t pc = pa->pa_pc;
	pci_intr_handle_t ih;
	const char *model, *intrstr;

	if (PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_BUSLOGIC_MULTIMASTER_NC)
		model = "BusLogic 9xxC SCSI";
	else if (PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_BUSLOGIC_MULTIMASTER)
		model = "BusLogic 9xxC SCSI";
	else
		model = "unknown model!";

	if (pci_mapreg_map(pa, PCI_CBIO, PCI_MAPREG_TYPE_IO, 0, &iot, &ioh,
	    NULL, &iosize, 0)) {
		printf(": can't map i/o space\n");
		return;
	}

	sc->sc_iot = iot;
	sc->sc_ioh = ioh;
	sc->sc_dmat = pa->pa_dmat;
	if (!bha_find(iot, ioh, &bpd)) {
		printf(": bha_find failed\n");
		bus_space_unmap(iot, ioh, iosize);
		return;
	}

	sc->sc_dmaflags = 0;

	if (pci_intr_map(pa, &ih)) {
		printf(": can't map interrupt\n");
		bus_space_unmap(iot, ioh, iosize);
		return;
	}
	intrstr = pci_intr_string(pc, ih);
	sc->sc_ih = pci_intr_establish(pc, ih, IPL_BIO, bha_intr, sc,
	    sc->sc_dev.dv_xname);
	if (sc->sc_ih == NULL) {
		printf(": can't establish interrupt");
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
		bus_space_unmap(iot, ioh, iosize);
		return;
	}
	printf(": %s, %s\n", intrstr, model);

	bha_attach(sc, &bpd);

	bha_disable_isacompat(sc);
}
@


1.10
log
@make various strings ("can't map mem space" and similar) more consistent
between instances, saving space in the kernel. feedback from many (some
incorporated, some left for future work).

ok deraadt, kettenis, "why not" miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: bha_pci.c,v 1.9 2008/06/26 05:42:17 ray Exp $	*/
d80 1
a80 2
	if (pci_matchbyid(pa, bha_pci_devices,
	    sizeof(bha_pci_devices)/sizeof(bha_pci_devices[0])) == 0)
@


1.9
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bha_pci.c,v 1.8 2007/04/10 17:47:55 miod Exp $	*/
d121 1
a121 1
		printf(": unable to map I/O space\n");
d137 1
a137 1
		printf(": couldn't map interrupt\n");
d145 1
a145 1
		printf(": couldn't establish interrupt");
@


1.8
log
@``it's'' -> ``its'' when the grammar gods require this change.
@
text
@d1 1
a1 1
/*	$OpenBSD: bha_pci.c,v 1.7 2005/08/09 04:10:10 mickey Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.7
log
@do not set PCI_COMMAND_MASTER_ENABLE explicitly as it's already set in pcisubmatch(); kettenis@@ testing; brad@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: bha_pci.c,v 1.6 2003/02/28 15:26:23 mickey Exp $	*/
d73 1
a73 1
 * If we find one, note it's address (slot) and call
@


1.6
log
@remove non-typo changes. sorry folks
@
text
@d1 1
a1 1
/*	$OpenBSD: bha_pci.c,v 1.4 2002/11/19 23:57:29 jason Exp $	*/
a116 1
	pcireg_t csr;
a141 4

	csr = pci_conf_read(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);
	pci_conf_write(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG,
	    csr | PCI_COMMAND_MASTER_ENABLE | PCI_COMMAND_IO_ENABLE);
@


1.5
log
@typo; from weissmanndude
@
text
@a81 2
	pci_chipset_tag_t pc = pa->pa_pc;
	pcireg_t csr;
a94 4
	csr = pci_conf_read(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);
	pci_conf_write(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG,
	    csr | PCI_COMMAND_MASTER_ENABLE | PCI_COMMAND_IO_ENABLE);

a132 4
	csr = pci_conf_read(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);
	pci_conf_write(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG,
	    csr | PCI_COMMAND_MASTER_ENABLE | PCI_COMMAND_IO_ENABLE);

d143 4
@


1.4
log
@Since we have a cast'd pci_attach_args already, use it instead of another cast.
@
text
@d1 1
a1 1
/*	$OpenBSD: bha_pci.c,v 1.3 2002/11/19 18:40:17 jason Exp $	*/
d82 2
d97 4
d139 4
a152 4

	csr = pci_conf_read(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);
	pci_conf_write(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG,
	    csr | PCI_COMMAND_MASTER_ENABLE | PCI_COMMAND_IO_ENABLE);
@


1.3
log
@Add a simplistic table driven lookup routine and use it where appropriate.
@
text
@d1 1
a1 1
/*	$OpenBSD: bha_pci.c,v 1.2 2002/03/14 01:26:58 millert Exp $	*/
d87 1
a87 1
	if (pci_matchbyid((struct pci_attach_args *)aux, bha_pci_devices,
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: bha_pci.c,v 1.1 2002/01/24 22:38:03 mickey Exp $	*/
d66 5
d87 2
a88 5
	if (PCI_VENDOR(pa->pa_id) != PCI_VENDOR_BUSLOGIC)
		return (0);

	if (PCI_PRODUCT(pa->pa_id) != PCI_PRODUCT_BUSLOGIC_MULTIMASTER_NC &&
	    PCI_PRODUCT(pa->pa_id) != PCI_PRODUCT_BUSLOGIC_MULTIMASTER)
@


1.1
log
@bussified and bus-split bustec scsi ha driver.
original port done by chris@@ in '98 and pounded into
-current by me, plus support for wide mode.
tested on pci in both modes by me, on eisa (w/
half success, thus not enabled yet) by jason@@.
niklas@@, jason@@, millert@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d59 2
a60 2
int	bha_pci_match __P((struct device *, void *, void *));
void	bha_pci_attach __P((struct device *, struct device *, void *));
@


1.1.4.1
log
@Merge in -current from roughly a week ago
@
text
@d59 2
a60 2
int	bha_pci_match(struct device *, void *, void *);
void	bha_pci_attach(struct device *, struct device *, void *);
@


1.1.4.2
log
@Sync the SMP branch with 3.3
@
text
@a65 5
const struct pci_matchid bha_pci_devices[] = {
	{ PCI_VENDOR_BUSLOGIC, PCI_PRODUCT_BUSLOGIC_MULTIMASTER_NC },
	{ PCI_VENDOR_BUSLOGIC, PCI_PRODUCT_BUSLOGIC_MULTIMASTER },
};

d82 5
a86 2
	if (pci_matchbyid(pa, bha_pci_devices,
	    sizeof(bha_pci_devices)/sizeof(bha_pci_devices[0])) == 0)
@


1.1.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: bha_pci.c,v 1.1 2002/01/24 22:38:03 mickey Exp $	*/
@


1.1.2.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bha_pci.c,v 1.1.2.1 2002/01/31 22:55:34 niklas Exp $	*/
d59 2
a60 2
int	bha_pci_match(struct device *, void *, void *);
void	bha_pci_attach(struct device *, struct device *, void *);
@


1.1.2.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a65 5
const struct pci_matchid bha_pci_devices[] = {
	{ PCI_VENDOR_BUSLOGIC, PCI_PRODUCT_BUSLOGIC_MULTIMASTER_NC },
	{ PCI_VENDOR_BUSLOGIC, PCI_PRODUCT_BUSLOGIC_MULTIMASTER },
};

d82 5
a86 2
	if (pci_matchbyid(pa, bha_pci_devices,
	    sizeof(bha_pci_devices)/sizeof(bha_pci_devices[0])) == 0)
@


