head	1.19;
access;
symbols
	OPENBSD_6_0:1.18.0.6
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.4
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.11.0.12
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.10
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.8
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5;
locks; strict;
comment	@ * @;


1.19
date	2017.01.12.16.32.28;	author stsp;	state Exp;
branches;
next	1.18;
commitid	1Zd7y0b8dZf1uELZ;

1.18
date	2015.11.24.17.11.39;	author mpi;	state Exp;
branches;
next	1.17;
commitid	5gdEnqVoJuTuwdTu;

1.17
date	2014.11.11.16.26.28;	author stsp;	state Exp;
branches;
next	1.16;
commitid	L1xf1upltWmop9PH;

1.16
date	2014.07.08.08.55.33;	author stsp;	state Exp;
branches;
next	1.15;
commitid	uUaNsnSDmtvWmbfm;

1.15
date	2014.07.08.08.54.00;	author stsp;	state Exp;
branches;
next	1.14;
commitid	bCjp1PqsJZoAnCgD;

1.14
date	2013.12.06.21.03.03;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2013.11.23.07.09.36;	author dlg;	state Exp;
branches;
next	1.12;

1.12
date	2013.11.14.12.37.36;	author dlg;	state Exp;
branches;
next	1.11;

1.11
date	2011.01.08.10.02.32;	author damien;	state Exp;
branches;
next	1.10;

1.10
date	2010.12.31.14.52.46;	author damien;	state Exp;
branches;
next	1.9;

1.9
date	2010.12.31.14.06.05;	author damien;	state Exp;
branches;
next	1.8;

1.8
date	2010.08.04.19.49.49;	author damien;	state Exp;
branches;
next	1.7;

1.7
date	2010.07.21.14.01.58;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2010.05.16.15.06.22;	author damien;	state Exp;
branches;
next	1.5;

1.5
date	2010.02.02.17.16.47;	author damien;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.22.16.11.26;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2009.12.22.11.24.19;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2009.11.21.15.16.36;	author damien;	state Exp;
branches;
next	1.1;

1.1
date	2009.11.14.16.55.11;	author damien;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Finish initial 11n support for athn(4).

The heavy lifting was done by damien@@ years ago. I didn't even have
to figure out what the hardware expects, the code was already there.

This driver now supports MCS 0-15 in client and hostap mode.
No Tx aggregation and no 40 MHz channels yet.

tested by vgross@@, bmercer@@, tb@@, jmc@@, Vadim Vygonets, Peter Kay
ok bmercer@@ tb@@ phessler@@
@
text
@/*	$OpenBSD: if_athn_pci.c,v 1.18 2015/11/24 17:11:39 mpi Exp $	*/

/*-
 * Copyright (c) 2009 Damien Bergamini <damien.bergamini@@free.fr>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * PCI front-end for Atheros 802.11a/g/n chipsets.
 */

#include "bpfilter.h"

#include <sys/param.h>
#include <sys/sockio.h>
#include <sys/mbuf.h>
#include <sys/kernel.h>
#include <sys/socket.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/timeout.h>
#include <sys/device.h>

#include <machine/bus.h>
#include <machine/intr.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <net80211/ieee80211_var.h>
#include <net80211/ieee80211_amrr.h>
#include <net80211/ieee80211_mira.h>
#include <net80211/ieee80211_radiotap.h>

#include <dev/ic/athnreg.h>
#include <dev/ic/athnvar.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#define PCI_SUBSYSID_ATHEROS_COEX2WIRE		0x309b
#define PCI_SUBSYSID_ATHEROS_COEX3WIRE_SA	0x30aa
#define PCI_SUBSYSID_ATHEROS_COEX3WIRE_DA	0x30ab

struct athn_pci_softc {
	struct athn_softc	sc_sc;

	/* PCI specific goo. */
	pci_chipset_tag_t	sc_pc;
	pcitag_t		sc_tag;
	void			*sc_ih;
	bus_space_tag_t		sc_st;
	bus_space_handle_t	sc_sh;
	bus_size_t		sc_mapsize;
	int			sc_cap_off;
};

int		athn_pci_match(struct device *, void *, void *);
void		athn_pci_attach(struct device *, struct device *, void *);
int		athn_pci_detach(struct device *, int);
int		athn_pci_activate(struct device *, int);
void		athn_pci_wakeup(struct athn_pci_softc *);
uint32_t	athn_pci_read(struct athn_softc *, uint32_t);
void		athn_pci_write(struct athn_softc *, uint32_t, uint32_t);
void		athn_pci_write_barrier(struct athn_softc *);
void		athn_pci_disable_aspm(struct athn_softc *);

struct cfattach athn_pci_ca = {
	sizeof (struct athn_pci_softc),
	athn_pci_match,
	athn_pci_attach,
	athn_pci_detach,
	athn_pci_activate
};

static const struct pci_matchid athn_pci_devices[] = {
	{ PCI_VENDOR_ATHEROS, PCI_PRODUCT_ATHEROS_AR5416 },
	{ PCI_VENDOR_ATHEROS, PCI_PRODUCT_ATHEROS_AR5418 },
	{ PCI_VENDOR_ATHEROS, PCI_PRODUCT_ATHEROS_AR9160 },
	{ PCI_VENDOR_ATHEROS, PCI_PRODUCT_ATHEROS_AR9280 },
	{ PCI_VENDOR_ATHEROS, PCI_PRODUCT_ATHEROS_AR9281 },
	{ PCI_VENDOR_ATHEROS, PCI_PRODUCT_ATHEROS_AR9285 },
	{ PCI_VENDOR_ATHEROS, PCI_PRODUCT_ATHEROS_AR2427 },
	{ PCI_VENDOR_ATHEROS, PCI_PRODUCT_ATHEROS_AR9227 },
	{ PCI_VENDOR_ATHEROS, PCI_PRODUCT_ATHEROS_AR9287 }
};

int
athn_pci_match(struct device *parent, void *match, void *aux)
{
	return (pci_matchbyid(aux, athn_pci_devices,
	    nitems(athn_pci_devices)));
}

void
athn_pci_attach(struct device *parent, struct device *self, void *aux)
{
	struct athn_pci_softc *psc = (struct athn_pci_softc *)self;
	struct athn_softc *sc = &psc->sc_sc;
	struct pci_attach_args *pa = aux;
	const char *intrstr;
	pci_intr_handle_t ih;
	pcireg_t memtype, reg;
	pci_product_id_t subsysid;
	int error;

	sc->sc_dmat = pa->pa_dmat;
	psc->sc_pc = pa->pa_pc;
	psc->sc_tag = pa->pa_tag;

	sc->ops.read = athn_pci_read;
	sc->ops.write = athn_pci_write;
	sc->ops.write_barrier = athn_pci_write_barrier;

	/*
	 * Get the offset of the PCI Express Capability Structure in PCI
	 * Configuration Space (Linux hardcodes it as 0x60.)
	 */
	error = pci_get_capability(pa->pa_pc, pa->pa_tag, PCI_CAP_PCIEXPRESS,
	    &psc->sc_cap_off, NULL);
	if (error != 0) {	/* Found. */
		sc->sc_disable_aspm = athn_pci_disable_aspm;
		sc->flags |= ATHN_FLAG_PCIE;
	}
	/*
	 * Noone knows why this shit is necessary but there are claims that
	 * not doing this may cause very frequent PCI FATAL interrupts from
	 * the card: http://bugzilla.kernel.org/show_bug.cgi?id=13483
	 */
	reg = pci_conf_read(pa->pa_pc, pa->pa_tag, 0x40);
	if (reg & 0xff00)
		pci_conf_write(pa->pa_pc, pa->pa_tag, 0x40, reg & ~0xff00);

	/* Change latency timer; default value yields poor results. */
	reg = pci_conf_read(pa->pa_pc, pa->pa_tag, PCI_BHLC_REG);
	reg &= ~(PCI_LATTIMER_MASK << PCI_LATTIMER_SHIFT);
	reg |= 168 << PCI_LATTIMER_SHIFT;
	pci_conf_write(pa->pa_pc, pa->pa_tag, PCI_BHLC_REG, reg);

	/* Determine if bluetooth is also supported (combo chip.) */
	reg = pci_conf_read(pa->pa_pc, pa->pa_tag, PCI_SUBSYS_ID_REG);
	subsysid = PCI_PRODUCT(reg);
	if (subsysid == PCI_SUBSYSID_ATHEROS_COEX3WIRE_SA ||
	    subsysid == PCI_SUBSYSID_ATHEROS_COEX3WIRE_DA)
		sc->flags |= ATHN_FLAG_BTCOEX3WIRE;
	else if (subsysid == PCI_SUBSYSID_ATHEROS_COEX2WIRE)
		sc->flags |= ATHN_FLAG_BTCOEX2WIRE;

	/* Map control/status registers. */
	memtype = pci_mapreg_type(pa->pa_pc, pa->pa_tag, PCI_MAPREG_START);
	error = pci_mapreg_map(pa, PCI_MAPREG_START, memtype, 0, &psc->sc_st,
	    &psc->sc_sh, NULL, &psc->sc_mapsize, 0);
	if (error != 0) {
		printf(": can't map mem space\n");
		return;
	}

	if (pci_intr_map(pa, &ih) != 0) {
		printf(": can't map interrupt\n");
		return;
	}
	intrstr = pci_intr_string(psc->sc_pc, ih);
	psc->sc_ih = pci_intr_establish(psc->sc_pc, ih, IPL_NET,
	    athn_intr, sc, sc->sc_dev.dv_xname);
	if (psc->sc_ih == NULL) {
		printf(": can't establish interrupt");
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
		return;
	}
	printf(": %s\n", intrstr);

	athn_attach(sc);
}

int
athn_pci_detach(struct device *self, int flags)
{
	struct athn_pci_softc *psc = (struct athn_pci_softc *)self;
	struct athn_softc *sc = &psc->sc_sc;

	if (psc->sc_ih != NULL) {
		athn_detach(sc);
		pci_intr_disestablish(psc->sc_pc, psc->sc_ih);
	}
	if (psc->sc_mapsize > 0)
		bus_space_unmap(psc->sc_st, psc->sc_sh, psc->sc_mapsize);

	return (0);
}

int
athn_pci_activate(struct device *self, int act)
{
	struct athn_pci_softc *psc = (struct athn_pci_softc *)self;
	struct athn_softc *sc = &psc->sc_sc;

	switch (act) {
	case DVACT_SUSPEND:
		athn_suspend(sc);
		break;
	case DVACT_WAKEUP:
		athn_pci_wakeup(psc);
		break;
	}

	return (0);
}

void
athn_pci_wakeup(struct athn_pci_softc *psc)
{
	struct athn_softc *sc = &psc->sc_sc;
	pcireg_t reg;
	int s;

	reg = pci_conf_read(psc->sc_pc, psc->sc_tag, 0x40);
	if (reg & 0xff00)
		pci_conf_write(psc->sc_pc, psc->sc_tag, 0x40, reg & ~0xff00);

	s = splnet();
	athn_wakeup(sc);
	splx(s);
}

uint32_t
athn_pci_read(struct athn_softc *sc, uint32_t addr)
{
	struct athn_pci_softc *psc = (struct athn_pci_softc *)sc;

	return (bus_space_read_4(psc->sc_st, psc->sc_sh, addr));
}

void
athn_pci_write(struct athn_softc *sc, uint32_t addr, uint32_t val)
{
	struct athn_pci_softc *psc = (struct athn_pci_softc *)sc;

	bus_space_write_4(psc->sc_st, psc->sc_sh, addr, val);
}

void
athn_pci_write_barrier(struct athn_softc *sc)
{
	struct athn_pci_softc *psc = (struct athn_pci_softc *)sc;

	bus_space_barrier(psc->sc_st, psc->sc_sh, 0, psc->sc_mapsize,
	    BUS_SPACE_BARRIER_WRITE);
}

void
athn_pci_disable_aspm(struct athn_softc *sc)
{
	struct athn_pci_softc *psc = (struct athn_pci_softc *)sc;
	pcireg_t reg;

	/* Disable PCIe Active State Power Management (ASPM). */
	reg = pci_conf_read(psc->sc_pc, psc->sc_tag,
	    psc->sc_cap_off + PCI_PCIE_LCSR);
	reg &= ~(PCI_PCIE_LCSR_ASPM_L0S | PCI_PCIE_LCSR_ASPM_L1);
	pci_conf_write(psc->sc_pc, psc->sc_tag,
	    psc->sc_cap_off + PCI_PCIE_LCSR, reg);
}
@


1.18
log
@You only need <net/if_dl.h> if you're using LLADDR() or a sockaddr_dl.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_athn_pci.c,v 1.17 2014/11/11 16:26:28 stsp Exp $	*/
d46 1
@


1.17
log
@Stop athn(4) from attaching to AR9300 devices for now. There are unresolved
bugs that panic the kernel and it's unclear if any such device works at all.
Anyone in possession of a working AR9300 device that stops working with this
commit please talk to me. I've only seen evidence of this code not working.
ok kirby@@ mpi@@ phessler@@ dcoppa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_athn_pci.c,v 1.16 2014/07/08 08:55:33 stsp Exp $	*/
a38 1
#include <net/if_dl.h>
@


1.16
log
@undo accidentally committed changes
@
text
@d1 1
a1 1
/*	$OpenBSD: if_athn_pci.c,v 1.14 2013/12/06 21:03:03 deraadt Exp $	*/
d100 1
a100 2
	{ PCI_VENDOR_ATHEROS, PCI_PRODUCT_ATHEROS_AR9287 },
	{ PCI_VENDOR_ATHEROS, PCI_PRODUCT_ATHEROS_AR9300 }
@


1.15
log
@Remove left-over call to removed function m_clsetwms().
ok mpi
@
text
@a96 1
	{ PCI_VENDOR_ATHEROS, PCI_PRODUCT_ATHEROS_AR9281_2 },
@


1.14
log
@Add a DVACT_WAKEUP op to the *_activate() API.  This is called after the
kernel resumes normal (non-cold, able to run processes, etc) operation.
Previously we were relying on specific DVACT_RESUME op's in drivers
creating callback/threads themselves, but that has become too common,
indicating the need for a built-in mechanism.
ok dlg kettenis, tested by a sufficient amount of people
@
text
@d1 1
a1 1
/*	$OpenBSD: if_athn_pci.c,v 1.13 2013/11/23 07:09:36 dlg Exp $	*/
d97 1
@


1.13
log
@task_add(NULL, blah) is a fault, fix by using task_add(systq, blah).

reported by josh grosse on misc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_athn_pci.c,v 1.12 2013/11/14 12:37:36 dlg Exp $	*/
a33 1
#include <sys/task.h>
a70 1
	struct task		sc_resume_t;
d77 1
a77 1
void		athn_pci_resume(void *, void *);
a130 2
	task_set(&psc->sc_resume_t, athn_pci_resume, psc, NULL);

d219 2
a220 2
	case DVACT_RESUME:
		task_add(systq, &psc->sc_resume_t);
d228 1
a228 1
athn_pci_resume(void *arg1, void *arg2)
a229 1
	struct athn_pci_softc *psc = arg1;
d239 1
a239 1
	athn_resume(sc);
@


1.12
log
@replace workqs with tasks for handling resume

from kimberley manning
@
text
@d1 1
a1 1
/*	$OpenBSD: if_athn_pci.c,v 1.11 2011/01/08 10:02:32 damien Exp $	*/
d224 1
a224 1
		task_add(NULL, &psc->sc_resume_t);
@


1.11
log
@clear pci configuration register 0x41 on resume, like during attach.
only clear it if it is != 0 while i'm at it.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_athn_pci.c,v 1.10 2010/12/31 14:52:46 damien Exp $	*/
d34 1
a34 1
#include <sys/workq.h>
d72 1
a72 1
	struct workq_task	sc_resume_wqt;
d133 2
d224 1
a224 2
		workq_queue_task(NULL, &psc->sc_resume_wqt, 0,
		    athn_pci_resume, psc, NULL);
@


1.10
log
@move the printing of the MAC address to the same line than the MAC rev.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_athn_pci.c,v 1.9 2010/12/31 14:06:05 damien Exp $	*/
d149 2
a150 2
	reg &= ~0xff00;
	pci_conf_write(pa->pa_pc, pa->pa_tag, 0x40, reg);
d235 1
d237 4
@


1.9
log
@Make the athn(4) back-end more bus agnostic by moving read and write
operations to callbacks in the PCI and CardBus front-ends.
This will allow support of other buses like USB.
Assume the following memory model:
- writes are ordered but may be buffered and require explicit flush
- a read always flushes all buffered writes
@
text
@d1 1
a1 1
/*	$OpenBSD: if_athn_pci.c,v 1.8 2010/08/04 19:49:49 damien Exp $	*/
d190 1
a190 1
	printf(": %s", intrstr);
@


1.8
log
@use a workq for resume.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_athn_pci.c,v 1.7 2010/07/21 14:01:58 kettenis Exp $	*/
d68 2
d75 9
a83 6
int	athn_pci_match(struct device *, void *, void *);
void	athn_pci_attach(struct device *, struct device *, void *);
int	athn_pci_detach(struct device *, int);
int	athn_pci_activate(struct device *, int);
void	athn_pci_resume(void *, void *);
void	athn_pci_disable_aspm(struct athn_softc *);
d129 4
d169 2
a170 2
	error = pci_mapreg_map(pa, PCI_MAPREG_START, memtype, 0, &sc->sc_st,
	    &sc->sc_sh, NULL, &psc->sc_mapsize, 0);
d206 1
a206 1
		bus_space_unmap(sc->sc_st, sc->sc_sh, psc->sc_mapsize);
d240 25
@


1.7
log
@Add suspend/unsuspend logic.

ok damien@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_athn_pci.c,v 1.6 2010/05/16 15:06:22 damien Exp $	*/
d34 1
d70 1
d77 1
d205 2
a206 1
	struct athn_softc *sc = (struct athn_softc *)self;
d213 2
a214 1
		athn_resume(sc);
d219 12
@


1.6
log
@add AR9300 PCI Id
@
text
@d1 1
a1 1
/*	$OpenBSD: if_athn_pci.c,v 1.5 2010/02/02 17:16:47 damien Exp $	*/
d74 1
d81 2
a82 1
	athn_pci_detach
d195 17
@


1.5
log
@Attach athn(4) to the AR2427 which is a castrated (no 11n) AR928X.
The Asus Eee PC 1005P has such a device.
This makes things even more confusing since athn now also supports
some non-802.11n devices!
Please let me know if you have such a device.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_athn_pci.c,v 1.4 2009/12/22 16:11:26 sthen Exp $	*/
d92 2
a93 1
	{ PCI_VENDOR_ATHEROS, PCI_PRODUCT_ATHEROS_AR9287 }
@


1.4
log
@Revert last commit, I should have checked with damien@@ first.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_athn_pci.c,v 1.2 2009/11/21 15:16:36 damien Exp $	*/
d90 1
@


1.3
log
@Sort pci ids, from Brad.
@
text
@a86 1
	{ PCI_VENDOR_ATHEROS, PCI_PRODUCT_ATHEROS_AR9227 },
d90 1
@


1.2
log
@attach to the AR9227 too
@
text
@d1 1
a1 1
/*	$OpenBSD: if_athn_pci.c,v 1.1 2009/11/14 16:55:11 damien Exp $	*/
d87 1
a90 1
	{ PCI_VENDOR_ATHEROS, PCI_PRODUCT_ATHEROS_AR9227 },
@


1.1
log
@athn(4), a driver for Atheros 802.11a/g/n devices.
written from scratch based on the vendor driver for Linux (ath9k).
AR9285 and AR9287 parts are 100% untested.
only basic functionnalities are enabled for now.

committed over an AR9281.

"commit" deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d90 1
@

