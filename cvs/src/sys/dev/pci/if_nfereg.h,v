head	1.22;
access;
symbols
	OPENBSD_6_2:1.22.0.36
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.22.0.40
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.38
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.26
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.22.0.34
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.32
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.22.0.30
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.28
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.24
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.22
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.20
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.18
	OPENBSD_5_0:1.22.0.16
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.14
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.12
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.8
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.10
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.6
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.22.0.4
	OPENBSD_4_4_BASE:1.22
	OPENBSD_4_3:1.22.0.2
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.21.0.4
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.21.0.2
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.19.0.2
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.16.0.2
	OPENBSD_3_9_BASE:1.16;
locks; strict;
comment	@ * @;


1.22
date	2007.12.05.08.30.33;	author jsg;	state Exp;
branches;
next	1.21;

1.21
date	2007.01.08.18.39.27;	author damien;	state Exp;
branches;
next	1.20;

1.20
date	2006.11.15.02.24.37;	author brad;	state Exp;
branches;
next	1.19;

1.19
date	2006.05.28.00.20.21;	author brad;	state Exp;
branches;
next	1.18;

1.18
date	2006.05.01.15.59.31;	author brad;	state Exp;
branches;
next	1.17;

1.17
date	2006.04.26.02.07.30;	author jsg;	state Exp;
branches;
next	1.16;

1.16
date	2006.02.22.19.23.44;	author damien;	state Exp;
branches;
next	1.15;

1.15
date	2006.02.20.20.19.47;	author damien;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.19.13.57.02;	author damien;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.16.17.35.51;	author damien;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.15.20.08.59;	author damien;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.15.19.36.46;	author damien;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.12.10.28.07;	author damien;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.11.11.51.30;	author damien;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.11.09.15.57;	author damien;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.04.22.11.41;	author damien;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.04.21.48.34;	author damien;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.04.09.46.48;	author damien;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.22.21.35.08;	author damien;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.18.20.44.51;	author damien;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.17.09.03.14;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.14.21.54.57;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Make sure newer adapters are not in powerdown mode.
From Oleg Safiullin <form@@pdp-11.org.ru> similiar to changes
in Linux/FreeBSD driver.
@
text
@/*	$OpenBSD: if_nfereg.h,v 1.21 2007/01/08 18:39:27 damien Exp $	*/

/*-
 * Copyright (c) 2005 Jonathan Gray <jsg@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define NFE_PCI_BA		0x10

#define NFE_RX_RING_COUNT	128
#define NFE_TX_RING_COUNT	256

#define NFE_JUMBO_FRAMELEN	9018
#define NFE_JUMBO_MTU		(NFE_JUMBO_FRAMELEN - ETHER_HDR_LEN - ETHER_CRC_LEN)

#define NFE_JBYTES		(NFE_JUMBO_FRAMELEN + ETHER_ALIGN)
#define NFE_JPOOL_COUNT		(NFE_RX_RING_COUNT + 64)
#define NFE_JPOOL_SIZE		(NFE_JPOOL_COUNT * NFE_JBYTES)

#define NFE_MAX_SCATTER		(NFE_TX_RING_COUNT - 2)

#define NFE_IRQ_STATUS		0x000
#define NFE_IRQ_MASK		0x004
#define NFE_SETUP_R6		0x008
#define NFE_IMTIMER		0x00c
#define NFE_MAC_RESET		0x03c
#define NFE_MISC1		0x080
#define NFE_TX_CTL		0x084
#define NFE_TX_STATUS		0x088
#define NFE_RXFILTER		0x08c
#define NFE_RXBUFSZ		0x090
#define NFE_RX_CTL		0x094
#define NFE_RX_STATUS		0x098
#define NFE_RNDSEED		0x09c
#define NFE_SETUP_R1		0x0a0
#define NFE_SETUP_R2		0x0a4
#define NFE_MACADDR_HI		0x0a8
#define NFE_MACADDR_LO		0x0ac
#define NFE_MULTIADDR_HI	0x0b0
#define NFE_MULTIADDR_LO	0x0b4
#define NFE_MULTIMASK_HI	0x0b8
#define NFE_MULTIMASK_LO	0x0bc
#define NFE_PHY_IFACE		0x0c0
#define NFE_TX_RING_ADDR_LO	0x100
#define NFE_RX_RING_ADDR_LO	0x104
#define NFE_RING_SIZE		0x108
#define NFE_TX_UNK		0x10c
#define NFE_LINKSPEED		0x110
#define NFE_SETUP_R5		0x130
#define NFE_SETUP_R3		0x13C
#define NFE_SETUP_R7		0x140
#define NFE_RXTX_CTL		0x144
#define NFE_TX_RING_ADDR_HI	0x148
#define NFE_RX_RING_ADDR_HI	0x14c
#define NFE_PHY_STATUS		0x180
#define NFE_SETUP_R4		0x184
#define NFE_STATUS		0x188
#define NFE_PHY_SPEED		0x18c
#define NFE_PHY_CTL		0x190
#define NFE_PHY_DATA		0x194
#define NFE_WOL_CTL		0x200
#define NFE_PATTERN_CRC		0x204
#define NFE_PATTERN_MASK	0x208
#define NFE_PWR_CAP		0x268
#define NFE_PWR_STATE		0x26c
#define NFE_VTAG_CTL		0x300
#define NFE_PWR2_CTL		0x600

#define NFE_PHY_ERROR		0x00001
#define NFE_PHY_WRITE		0x00400
#define NFE_PHY_BUSY		0x08000
#define NFE_PHYADD_SHIFT	5

#define NFE_MAC_RESET_MAGIC	0x00f3

#define NFE_STATUS_MAGIC	0x140000

#define NFE_R1_MAGIC		0x16070f
#define NFE_R2_MAGIC		0x16
#define NFE_R4_MAGIC		0x08
#define NFE_R6_MAGIC		0x03
#define NFE_WOL_ENABLE		0x1111
#define NFE_RX_START		0x01
#define NFE_TX_START		0x01

#define NFE_IRQ_RXERR		0x0001
#define NFE_IRQ_RX		0x0002
#define NFE_IRQ_RX_NOBUF	0x0004
#define NFE_IRQ_TXERR		0x0008
#define NFE_IRQ_TX_DONE		0x0010
#define NFE_IRQ_TIMER		0x0020
#define NFE_IRQ_LINK		0x0040
#define NFE_IRQ_TXERR2		0x0080
#define NFE_IRQ_TX1		0x0100

#define NFE_IRQ_WANTED							\
	(NFE_IRQ_RXERR | NFE_IRQ_RX_NOBUF | NFE_IRQ_RX |		\
	 NFE_IRQ_TXERR | NFE_IRQ_TXERR2 | NFE_IRQ_TX_DONE |		\
	 NFE_IRQ_LINK)

#define NFE_RXTX_KICKTX		0x0001
#define NFE_RXTX_BIT1		0x0002
#define NFE_RXTX_BIT2		0x0004
#define NFE_RXTX_RESET		0x0010
#define NFE_RXTX_VTAG_STRIP	0x0040
#define NFE_RXTX_VTAG_INSERT	0x0080
#define NFE_RXTX_RXCSUM		0x0400
#define NFE_RXTX_V2MAGIC	0x2100
#define NFE_RXTX_V3MAGIC	0x2200
#define NFE_RXFILTER_MAGIC	0x007f0008
#define NFE_U2M			(1 << 5)
#define NFE_PROMISC		(1 << 7)

/* default interrupt moderation timer of 128us */
#define NFE_IM_DEFAULT	((128 * 100) / 1024)

#define NFE_VTAG_ENABLE		(1 << 13)

#define NFE_PWR_VALID		(1 << 8)
#define NFE_PWR_WAKEUP		(1 << 15)
#define NFE_PWR2_WAKEUP_MASK	0x0f11

#define NFE_MEDIA_SET		0x10000
#define	NFE_MEDIA_1000T		0x00032
#define NFE_MEDIA_100TX		0x00064
#define NFE_MEDIA_10T		0x003e8

#define NFE_PHY_100TX		(1 << 0)
#define NFE_PHY_1000T		(1 << 1)
#define NFE_PHY_HDX		(1 << 8)

#define NFE_MISC1_MAGIC		0x003b0f3c
#define NFE_MISC1_HDX		(1 << 1)

#define NFE_SEED_MASK		0x0003ff00
#define NFE_SEED_10T		0x00007f00
#define NFE_SEED_100TX		0x00002d00
#define NFE_SEED_1000T		0x00007400

/* Rx/Tx descriptor */
struct nfe_desc32 {
	uint32_t	physaddr;
	uint16_t	length;
	uint16_t	flags;
#define NFE_RX_FIXME_V1		0x6004
#define NFE_RX_VALID_V1		(1 << 0)
#define NFE_TX_ERROR_V1		0x7808
#define NFE_TX_LASTFRAG_V1	(1 << 0)
} __packed;

#define NFE_V1_TXERR	"\020"	\
	"\14TXERROR\13UNDERFLOW\12LATECOLLISION\11LOSTCARRIER\10DEFERRED" \
	"\08FORCEDINT\03RETRY\00LASTPACKET"

/* V2 Rx/Tx descriptor */
struct nfe_desc64 {
	uint32_t	physaddr[2];
	uint32_t	vtag;
#define NFE_RX_VTAG		(1 << 16)
#define NFE_TX_VTAG		(1 << 18)
	uint16_t	length;
	uint16_t	flags;
#define NFE_RX_FIXME_V2		0x4300
#define NFE_RX_VALID_V2		(1 << 13)
#define NFE_TX_ERROR_V2		0x5c04
#define NFE_TX_LASTFRAG_V2	(1 << 13)
} __packed;

#define NFE_V2_TXERR	"\020"	\
	"\14FORCEDINT\13LASTPACKET\12UNDERFLOW\10LOSTCARRIER\09DEFERRED\02RETRY"

/* flags common to V1/V2 descriptors */
#define NFE_RX_UDP_CSUMOK	(1 << 10)
#define NFE_RX_TCP_CSUMOK	(1 << 11)
#define NFE_RX_IP_CSUMOK	(1 << 12)
#define NFE_RX_ERROR		(1 << 14)
#define NFE_RX_READY		(1 << 15)
#define NFE_TX_TCP_UDP_CSUM	(1 << 10)
#define NFE_TX_IP_CSUM		(1 << 11)
#define NFE_TX_VALID		(1 << 15)

#define NFE_READ(sc, reg) \
	bus_space_read_4((sc)->sc_memt, (sc)->sc_memh, (reg))

#define NFE_WRITE(sc, reg, val) \
	bus_space_write_4((sc)->sc_memt, (sc)->sc_memh, (reg), (val))
@


1.21
log
@Add support for HW TCP/IP checksum offload for adapters that support it.

Tested by many (IP/UDP/TCP):

Jason McIntyre <jmc@@>
Chris Kuethe <chris.kuethe AT gmail.com>
Alf Schlichting <a.schlichting AT lemarit.com>
Rodolfo Gouveia <rgouveia AT cosmico.net>
Peter Stromberg <wilfried@@>

Has been in snaps for weeks too with noone complaining so far.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.20 2006/11/15 02:24:37 brad Exp $	*/
d37 1
d78 1
d85 2
d132 1
@


1.20
log
@Correct the WOL magic value and rename NFE_WOL_MAGIC to NFE_WOL_ENABLE.

WOL magic value from Peer Chen@@NVIDIA via FreeBSD.

ok jsg@@ damien@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.19 2006/05/28 00:20:21 brad Exp $	*/
d179 3
a181 1
#define NFE_RX_CSUMOK		0x1c00
d184 1
a184 1
#define NFE_TX_TCP_CSUM		(1 << 10)
@


1.19
log
@- remove ETHER_MAX_LEN_JUMBO and ETHERMTU_JUMBO.
- use if_hardmtu for MTU ioctl handlers.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.18 2006/05/01 15:59:31 brad Exp $	*/
d89 1
a89 1
#define NFE_WOL_MAGIC		0x7770
@


1.18
log
@increase the Tx ring count from 64 to 256.

ok jsg@@ damien@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.17 2006/04/26 02:07:30 jsg Exp $	*/
d24 4
a27 1
#define NFE_JBYTES		(ETHER_MAX_LEN_JUMBO + ETHER_ALIGN)
@


1.17
log
@Use %b in error flag printfs to describe meaning of error bits.
requested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.16 2006/02/22 19:23:44 damien Exp $	*/
d22 1
a22 1
#define NFE_TX_RING_COUNT	64
@


1.16
log
@re-enable interrupt mitigation and mask out NFE_IRQ_TIMER that was causing
interrupts flood.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.15 2006/02/20 20:19:47 damien Exp $	*/
d154 4
d171 3
@


1.15
log
@- remove mbuf linearization code. it is broken in this context and it is very
  unlikely that we will see mbuf chains with 62 fragments anytime soon
  (anyway, it would not crash, it would just freeze TX).
- fix max scatter value so we don't end up filling the ring with one mbuf
  chain.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.14 2006/02/19 13:57:02 damien Exp $	*/
a97 1
#define NFE_IRQ_WANTED		0x00ff
d99 5
@


1.14
log
@- fix h/w VLAN tagging and enable it for adapters that support it (VLAN tag
  stripping job is left to the network stack).
- enable interrupt mitigation by default.
- add some magic to the initialization sequence in the hope that it will fix
  TX issues seen on some adapters.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.13 2006/02/16 17:35:51 damien Exp $	*/
d28 1
a28 1
#define NFE_MAX_SCATTER		NFE_TX_RING_COUNT
@


1.13
log
@- stop enabling/disabling interrupts in nfe_intr().
- store RX/TX settings in nfe_softc so we don't recompute them all the time.
- fix h/w VLAN tagging flags.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.12 2006/02/15 20:08:59 damien Exp $	*/
d73 1
d80 2
d85 1
d116 2
@


1.12
log
@add support for 64bit rings base addresses.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.11 2006/02/15 19:36:46 damien Exp $	*/
d103 1
a103 1
#define NFE_RXTX_RXCHECK	0x0400
d148 2
a152 1
#define NFE_RX_VTAG		(1 << 0)
a154 1
#define NFE_TX_VTAG		(1 << 2)
@


1.11
log
@- enable jumbo frames for adapters that support it.
- extend TX DMA mappings size from MCLBYTES to NFE_JBYTES.
- add initial (disabled) bits for interrupts mitigation.
- add initial (disabled) bits for h/w VLAN tagging.
- did some consistency tweaks while i'm here.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.10 2006/02/12 10:28:07 damien Exp $	*/
d51 2
a52 2
#define NFE_TX_RING_ADDR	0x100
#define NFE_RX_RING_ADDR	0x104
d60 2
@


1.10
log
@initial jumbo frames support (disabled for now).
#define'ing NFE_NO_JUMBO can save a few hundred KB of wired memory.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.9 2006/02/11 11:51:30 damien Exp $	*/
d33 1
a33 1
#define NFE_TIMER_INT		0x00c
d99 2
a103 1

d108 3
d145 1
a145 1
	uint32_t	reserved;
d149 1
d152 1
@


1.9
log
@- call nfe_ifmedia_upd() early in nfe_init() to reset the PHY.
- set RX buffer size register properly
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.8 2006/02/11 09:15:57 damien Exp $	*/
d23 4
@


1.8
log
@force a wakeup of the MAC in nfe_init().
this makes my MCP51 board working.

committed over a nfe.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.7 2006/02/04 22:11:41 damien Exp $	*/
d34 1
a34 1
#define NFE_OFFLD_CFG		0x090
@


1.7
log
@reorganize descriptors flags declarations; it was very confusing.
no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.6 2006/02/04 21:48:34 damien Exp $	*/
d102 3
@


1.6
log
@- start MII timer in nfe_init() and move timer initialization in nfe_attach()
- set RX filter before enabling RX in nfe_init()
- call mii_down() in nfe_stop()
- fix setting of full/half-duplex mode
- call mii_phy_reset() for each PHY attached and call mii_mediachg() in
  nfe_ifmedia_upd()
- some cleaning while i'm here
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.5 2006/02/04 09:46:48 damien Exp $	*/
a124 5
#define NFE_RX_VALID_V1		(1 <<  0)
#define NFE_RX_VALID_V2		(1 << 13)
#define NFE_RX_ERROR		(1 << 14)
#define NFE_RX_READY		(1 << 15)
#define NFE_RX_CSUMOK		0x1c00
d126 3
a128 1
#define NFE_RX_FIXME_V2		0x4300
d137 10
a146 1
#define NFE_TX_LASTFRAG_V1	(1 <<  0)
a148 1
#define NFE_TX_LASTFRAG_V2	(1 << 13)
a149 3
#define NFE_TX_ERROR_V1		0x7808
#define NFE_TX_ERROR_V2		0x5c04
} __packed;
@


1.5
log
@- add support for multicast filters.
- fix setting of if_capabilities flags for chips supporting checksum offload.
- fix dmesg output in case we can't establish the intr handler.
- fix a call to bus_dmamap_unload() in nfe_encap().
@
text
@d1 3
a3 2
/*	$OpenBSD: if_nfereg.h,v 1.4 2006/01/22 21:35:08 damien Exp $	*/
/*
d37 1
a37 1
#define NFE_RDM_SEED		0x09c
d46 1
a46 1
#define NFE_PHY_INT		0x0c0
d108 11
a118 6
#define NFE_PHY_100TX		0x01
#define NFE_PHY_1000T		0x02

#define NFE_RDM_SEED_FORCE1	0x7f00
#define NFE_RDM_SEED_FORCE2	0x2d00
#define NFE_RDM_SEED_FORCE3	0x7400
@


1.4
log
@fixes miibus_{read,write}reg routines.
this resolves the ghost ukphy problem.
did some cleanup while i'm here.

tested by and ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.3 2006/01/18 20:44:51 damien Exp $	*/
d32 1
a32 1
#define NFE_MULTI_FLAGS		0x08c
d41 4
a44 4
#define NFE_MULT_ADDR1		0x0b0
#define NFE_MULT_ADDR2		0x0b4
#define NFE_MULT_MASK1		0x0b8
#define NFE_MULT_MASK2		0x0bc
d98 3
a100 3
#define NFE_MC_ALWAYS		0x7F0008
#define NFE_MC_PROMISC		0x000080
#define NFE_MC_MYADDR		0x000020
@


1.3
log
@initial Tx/Rx bits.  not working yet.

joint work with jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.2 2005/12/17 09:03:14 jsg Exp $	*/
a19 1
#define NFE_PHYADD_SHIFT	5
d55 1
a55 1
#define NFE_MEDIA_STATUS	0x180
d67 1
d70 1
a137 1
#define NFE_TX_ERROR		(1 << 14)
d139 2
@


1.2
log
@Split length and flags up into seperate variables in
descriptors and make use of MCLBYTES for length setting.
Sugested by damien@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_nfereg.h,v 1.1 2005/12/14 21:54:57 jsg Exp $	*/
a19 2
#define NFE_MAX_SCATTER		1

d24 2
d76 1
d86 1
a86 1
#define NFE_IRQ_WANTED		0x00df
d89 2
a112 7

#define NFE_READ(sc, reg) \
	bus_space_read_4((sc)->sc_iot, (sc)->sc_ioh, (reg))

#define NFE_WRITE(sc, reg, val) \
	bus_space_write_4((sc)->sc_iot, (sc)->sc_ioh, (reg), (val))

d114 1
a114 1
struct nfe_desc {
d118 7
a126 2
#define NFE_RX_READY	0x8000

d128 1
a128 1
struct nfe_desc_v3 {
d133 6
d140 6
@


1.1
log
@Initial bits for an nvidia nforce Ethernet driver.
bus_dma usage modelled after ral.  Does not yet see rx interrupts
when testing with ck804.

Nvidia won't give out documentation for this, various "free" operating
systems include a closed source driver, and the Linux people who reverse
engineered it to create a specification won't give it out.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d120 2
a121 1
	uint32_t	flags;
d124 1
a124 1
#define NFE_RX_READY	0x80000000
d130 2
a131 1
	uint32_t	flags;
@

