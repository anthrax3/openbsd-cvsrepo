head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.2
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.13.0.8
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.12.0.4
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.4
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.2.0.8
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.19
date	2016.11.18.12.36.41;	author mikeb;	state Exp;
branches;
next	1.18;
commitid	WMTQiNg7cjT51T8J;

1.18
date	2016.11.17.21.18.23;	author mikeb;	state Exp;
branches;
next	1.17;
commitid	yEavyUGQqAxMKWpW;

1.17
date	2016.11.17.21.13.27;	author mikeb;	state Exp;
branches;
next	1.16;
commitid	lQXVVVQAiHCCiHq4;

1.16
date	2016.11.17.21.08.27;	author mikeb;	state Exp;
branches;
next	1.15;
commitid	nldMJuxfqfXVZAUt;

1.15
date	2016.11.17.19.26.57;	author mikeb;	state Exp;
branches;
next	1.14;
commitid	s7sWiFVcUtMtUOpv;

1.14
date	2016.11.17.12.21.27;	author mikeb;	state Exp;
branches;
next	1.13;
commitid	rl7UKnhqgZzc9auT;

1.13
date	2015.04.30.13.24.36;	author sthen;	state Exp;
branches;
next	1.12;
commitid	9CN7Tt44JhZ4CTB3;

1.12
date	2014.08.25.14.26.25;	author mikeb;	state Exp;
branches;
next	1.11;
commitid	8deZACRIBvIf8lft;

1.11
date	2013.08.05.19.58.06;	author mikeb;	state Exp;
branches;
next	1.10;

1.10
date	2012.12.17.18.44.27;	author mikeb;	state Exp;
branches;
next	1.9;

1.9
date	2012.12.05.14.41.28;	author mikeb;	state Exp;
branches;
next	1.8;

1.8
date	2012.08.06.21.07.52;	author mikeb;	state Exp;
branches;
next	1.7;

1.7
date	2012.07.29.13.49.03;	author mikeb;	state Exp;
branches;
next	1.6;

1.6
date	2011.06.10.12.46.35;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.21.00.29.29;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2010.02.19.19.06.31;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.19.18.55.12;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.08.20.33.51;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.08.20.01.02;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Remaining PHY bits; call SFP module detection code for X550 as well
@
text
@/*	$OpenBSD: ixgbe_phy.c,v 1.18 2016/11/17 21:18:23 mikeb Exp $	*/

/******************************************************************************

  Copyright (c) 2001-2015, Intel Corporation
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

   1. Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

   3. Neither the name of the Intel Corporation nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.

******************************************************************************/
/*$FreeBSD: head/sys/dev/ixgbe/ixgbe_phy.c 303032 2016-07-19 17:31:48Z sbruno $*/

#include <dev/pci/ixgbe.h>

void ixgbe_i2c_start(struct ixgbe_hw *hw);
void ixgbe_i2c_stop(struct ixgbe_hw *hw);
int32_t ixgbe_clock_in_i2c_byte(struct ixgbe_hw *hw, uint8_t *data);
int32_t ixgbe_clock_out_i2c_byte(struct ixgbe_hw *hw, uint8_t data);
int32_t ixgbe_get_i2c_ack(struct ixgbe_hw *hw);
int32_t ixgbe_clock_in_i2c_bit(struct ixgbe_hw *hw, bool *data);
int32_t ixgbe_clock_out_i2c_bit(struct ixgbe_hw *hw, bool data);
void ixgbe_raise_i2c_clk(struct ixgbe_hw *hw, uint32_t *i2cctl);
void ixgbe_lower_i2c_clk(struct ixgbe_hw *hw, uint32_t *i2cctl);
int32_t ixgbe_set_i2c_data(struct ixgbe_hw *hw, uint32_t *i2cctl, bool data);
bool ixgbe_get_i2c_data(struct ixgbe_hw *hw, uint32_t *i2cctl);
void ixgbe_i2c_bus_clear(struct ixgbe_hw *hw);

/**
 * ixgbe_out_i2c_byte_ack - Send I2C byte with ack
 * @@hw: pointer to the hardware structure
 * @@byte: byte to send
 *
 * Returns an error code on error.
 */
static int32_t ixgbe_out_i2c_byte_ack(struct ixgbe_hw *hw, uint8_t byte)
{
	int32_t status;

	status = ixgbe_clock_out_i2c_byte(hw, byte);
	if (status)
		return status;
	return ixgbe_get_i2c_ack(hw);
}

/**
 * ixgbe_in_i2c_byte_ack - Receive an I2C byte and send ack
 * @@hw: pointer to the hardware structure
 * @@byte: pointer to a uint8_t to receive the byte
 *
 * Returns an error code on error.
 */
static int32_t ixgbe_in_i2c_byte_ack(struct ixgbe_hw *hw, uint8_t *byte)
{
	int32_t status;

	status = ixgbe_clock_in_i2c_byte(hw, byte);
	if (status)
		return status;
	/* ACK */
	return ixgbe_clock_out_i2c_bit(hw, FALSE);
}

/**
 * ixgbe_ones_comp_byte_add - Perform one's complement addition
 * @@add1 - addend 1
 * @@add2 - addend 2
 *
 * Returns one's complement 8-bit sum.
 */
static uint8_t ixgbe_ones_comp_byte_add(uint8_t add1, uint8_t add2)
{
	uint16_t sum = add1 + add2;

	sum = (sum & 0xFF) + (sum >> 8);
	return sum & 0xFF;
}

/**
 * ixgbe_read_i2c_combined_generic_int - Perform I2C read combined operation
 * @@hw: pointer to the hardware structure
 * @@addr: I2C bus address to read from
 * @@reg: I2C device register to read from
 * @@val: pointer to location to receive read value
 * @@lock: TRUE if to take and release semaphore
 *
 * Returns an error code on error.
 */
int32_t ixgbe_read_i2c_combined_generic_int(struct ixgbe_hw *hw, uint8_t addr,
					    uint16_t reg, uint16_t *val,
					    bool lock)
{
	uint32_t swfw_mask = hw->phy.phy_semaphore_mask;
	int max_retry = 10;
	int retry = 0;
	uint8_t csum_byte;
	uint8_t high_bits;
	uint8_t low_bits;
	uint8_t reg_high;
	uint8_t csum;

	if (hw->mac.type >= ixgbe_mac_X550)
		max_retry = 3;
	reg_high = ((reg >> 7) & 0xFE) | 1;	/* Indicate read combined */
	csum = ixgbe_ones_comp_byte_add(reg_high, reg & 0xFF);
	csum = ~csum;
	do {
		if (lock && hw->mac.ops.acquire_swfw_sync(hw, swfw_mask))
			return IXGBE_ERR_SWFW_SYNC;
		ixgbe_i2c_start(hw);
		/* Device Address and write indication */
		if (ixgbe_out_i2c_byte_ack(hw, addr))
			goto fail;
		/* Write bits 14:8 */
		if (ixgbe_out_i2c_byte_ack(hw, reg_high))
			goto fail;
		/* Write bits 7:0 */
		if (ixgbe_out_i2c_byte_ack(hw, reg & 0xFF))
			goto fail;
		/* Write csum */
		if (ixgbe_out_i2c_byte_ack(hw, csum))
			goto fail;
		/* Re-start condition */
		ixgbe_i2c_start(hw);
		/* Device Address and read indication */
		if (ixgbe_out_i2c_byte_ack(hw, addr | 1))
			goto fail;
		/* Get upper bits */
		if (ixgbe_in_i2c_byte_ack(hw, &high_bits))
			goto fail;
		/* Get low bits */
		if (ixgbe_in_i2c_byte_ack(hw, &low_bits))
			goto fail;
		/* Get csum */
		if (ixgbe_clock_in_i2c_byte(hw, &csum_byte))
			goto fail;
		/* NACK */
		if (ixgbe_clock_out_i2c_bit(hw, FALSE))
			goto fail;
		ixgbe_i2c_stop(hw);
		if (lock)
			hw->mac.ops.release_swfw_sync(hw, swfw_mask);
		*val = (high_bits << 8) | low_bits;
		return 0;

fail:
		ixgbe_i2c_bus_clear(hw);
		if (lock)
			hw->mac.ops.release_swfw_sync(hw, swfw_mask);
		retry++;
		if (retry < max_retry)
			DEBUGOUT("I2C byte read combined error - Retrying.\n");
		else
			DEBUGOUT("I2C byte read combined error.\n");
	} while (retry < max_retry);

	return IXGBE_ERR_I2C;
}

/**
 * ixgbe_read_i2c_combined_generic - Perform I2C read combined operation
 * @@hw: pointer to the hardware structure
 * @@addr: I2C bus address to read from
 * @@reg: I2C device register to read from
 * @@val: pointer to location to receive read value
 *
 * Returns an error code on error.
 **/
int32_t ixgbe_read_i2c_combined_generic(struct ixgbe_hw *hw, uint8_t addr,
					uint16_t reg, uint16_t *val)
{
	return ixgbe_read_i2c_combined_generic_int(hw, addr, reg, val, TRUE);
}

/**
 * ixgbe_read_i2c_combined_generic_unlocked - Do I2C read combined operation
 * @@hw: pointer to the hardware structure
 * @@addr: I2C bus address to read from
 * @@reg: I2C device register to read from
 * @@val: pointer to location to receive read value
 *
 * Returns an error code on error.
 **/
int32_t ixgbe_read_i2c_combined_generic_unlocked(struct ixgbe_hw *hw, uint8_t addr,
						 uint16_t reg, uint16_t *val)
{
	return ixgbe_read_i2c_combined_generic_int(hw, addr, reg, val, FALSE);
}

/**
 * ixgbe_write_i2c_combined_generic_int - Perform I2C write combined operation
 * @@hw: pointer to the hardware structure
 * @@addr: I2C bus address to write to
 * @@reg: I2C device register to write to
 * @@val: value to write
 * @@lock: TRUE if to take and release semaphore
 *
 * Returns an error code on error.
 */
int32_t ixgbe_write_i2c_combined_generic_int(struct ixgbe_hw *hw, uint8_t addr,
					     uint16_t reg, uint16_t val, bool lock)
{
	uint32_t swfw_mask = hw->phy.phy_semaphore_mask;
	int max_retry = 1;
	int retry = 0;
	uint8_t reg_high;
	uint8_t csum;

	reg_high = (reg >> 7) & 0xFE;	/* Indicate write combined */
	csum = ixgbe_ones_comp_byte_add(reg_high, reg & 0xFF);
	csum = ixgbe_ones_comp_byte_add(csum, val >> 8);
	csum = ixgbe_ones_comp_byte_add(csum, val & 0xFF);
	csum = ~csum;
	do {
		if (lock && hw->mac.ops.acquire_swfw_sync(hw, swfw_mask))
			return IXGBE_ERR_SWFW_SYNC;
		ixgbe_i2c_start(hw);
		/* Device Address and write indication */
		if (ixgbe_out_i2c_byte_ack(hw, addr))
			goto fail;
		/* Write bits 14:8 */
		if (ixgbe_out_i2c_byte_ack(hw, reg_high))
			goto fail;
		/* Write bits 7:0 */
		if (ixgbe_out_i2c_byte_ack(hw, reg & 0xFF))
			goto fail;
		/* Write data 15:8 */
		if (ixgbe_out_i2c_byte_ack(hw, val >> 8))
			goto fail;
		/* Write data 7:0 */
		if (ixgbe_out_i2c_byte_ack(hw, val & 0xFF))
			goto fail;
		/* Write csum */
		if (ixgbe_out_i2c_byte_ack(hw, csum))
			goto fail;
		ixgbe_i2c_stop(hw);
		if (lock)
			hw->mac.ops.release_swfw_sync(hw, swfw_mask);
		return 0;

fail:
		ixgbe_i2c_bus_clear(hw);
		if (lock)
			hw->mac.ops.release_swfw_sync(hw, swfw_mask);
		retry++;
		if (retry < max_retry)
			DEBUGOUT("I2C byte write combined error - Retrying.\n");
		else
			DEBUGOUT("I2C byte write combined error.\n");
	} while (retry < max_retry);

	return IXGBE_ERR_I2C;
}

/**
 * ixgbe_write_i2c_combined_generic - Perform I2C write combined operation
 * @@hw: pointer to the hardware structure
 * @@addr: I2C bus address to write to
 * @@reg: I2C device register to write to
 * @@val: value to write
 *
 * Returns an error code on error.
 **/
int32_t ixgbe_write_i2c_combined_generic(struct ixgbe_hw *hw,
					 uint8_t addr, uint16_t reg, uint16_t val)
{
	return ixgbe_write_i2c_combined_generic_int(hw, addr, reg, val, TRUE);
}

/**
 * ixgbe_write_i2c_combined_generic_unlocked - Do I2C write combined operation
 * @@hw: pointer to the hardware structure
 * @@addr: I2C bus address to write to
 * @@reg: I2C device register to write to
 * @@val: value to write
 *
 * Returns an error code on error.
 **/
int32_t
ixgbe_write_i2c_combined_generic_unlocked(struct ixgbe_hw *hw,
					  uint8_t addr, uint16_t reg, uint16_t val)
{
	return ixgbe_write_i2c_combined_generic_int(hw, addr, reg, val, FALSE);
}

/**
 *  ixgbe_init_phy_ops_generic - Inits PHY function ptrs
 *  @@hw: pointer to the hardware structure
 *
 *  Initialize the function pointers.
 **/
int32_t ixgbe_init_phy_ops_generic(struct ixgbe_hw *hw)
{
	struct ixgbe_phy_info *phy = &hw->phy;

	DEBUGFUNC("ixgbe_init_phy_ops_generic");

	/* PHY */
	phy->ops.identify = ixgbe_identify_phy_generic;
	phy->ops.reset = ixgbe_reset_phy_generic;
	phy->ops.read_reg = ixgbe_read_phy_reg_generic;
	phy->ops.write_reg = ixgbe_write_phy_reg_generic;
	phy->ops.read_reg_mdi = ixgbe_read_phy_reg_mdi;
	phy->ops.write_reg_mdi = ixgbe_write_phy_reg_mdi;
	phy->ops.setup_link = ixgbe_setup_phy_link_generic;
	phy->ops.setup_link_speed = ixgbe_setup_phy_link_speed_generic;
	phy->ops.check_link = NULL;
	phy->ops.get_firmware_version = ixgbe_get_phy_firmware_version_generic;
	phy->ops.read_i2c_byte = ixgbe_read_i2c_byte_generic;
	phy->ops.write_i2c_byte = ixgbe_write_i2c_byte_generic;
	phy->ops.read_i2c_eeprom = ixgbe_read_i2c_eeprom_generic;
	phy->ops.write_i2c_eeprom = ixgbe_write_i2c_eeprom_generic;
	phy->ops.i2c_bus_clear = ixgbe_i2c_bus_clear;
	phy->ops.identify_sfp = ixgbe_identify_module_generic;
	phy->sfp_type = ixgbe_sfp_type_unknown;
	phy->ops.read_i2c_combined = ixgbe_read_i2c_combined_generic;
	phy->ops.write_i2c_combined = ixgbe_write_i2c_combined_generic;
	phy->ops.read_i2c_combined_unlocked =
				ixgbe_read_i2c_combined_generic_unlocked;
	phy->ops.write_i2c_combined_unlocked =
				ixgbe_write_i2c_combined_generic_unlocked;
	phy->ops.read_i2c_byte_unlocked = ixgbe_read_i2c_byte_generic_unlocked;
	phy->ops.write_i2c_byte_unlocked =
				ixgbe_write_i2c_byte_generic_unlocked;
	phy->ops.check_overtemp = ixgbe_tn_check_overtemp;
	return IXGBE_SUCCESS;
}

/**
 *  ixgbe_identify_phy_generic - Get physical layer module
 *  @@hw: pointer to hardware structure
 *
 *  Determines the physical layer module found on the current adapter.
 **/
int32_t ixgbe_identify_phy_generic(struct ixgbe_hw *hw)
{
	int32_t status = IXGBE_ERR_PHY_ADDR_INVALID;
	uint32_t phy_addr;
	uint16_t ext_ability = 0;

	DEBUGFUNC("ixgbe_identify_phy_generic");

	if (!hw->phy.phy_semaphore_mask) {
		if (hw->bus.lan_id)
			hw->phy.phy_semaphore_mask = IXGBE_GSSR_PHY1_SM;
		else
			hw->phy.phy_semaphore_mask = IXGBE_GSSR_PHY0_SM;
	}

	if (hw->phy.type == ixgbe_phy_unknown) {
		for (phy_addr = 0; phy_addr < IXGBE_MAX_PHY_ADDR; phy_addr++) {
			if (ixgbe_validate_phy_addr(hw, phy_addr)) {
				hw->phy.addr = phy_addr;
				ixgbe_get_phy_id(hw);
				hw->phy.type =
					ixgbe_get_phy_type_from_id(hw->phy.id);

				if (hw->phy.type == ixgbe_phy_unknown) {
					hw->phy.ops.read_reg(hw,
						  IXGBE_MDIO_PHY_EXT_ABILITY,
						  IXGBE_MDIO_PMA_PMD_DEV_TYPE,
						  &ext_ability);
					if (ext_ability &
					    (IXGBE_MDIO_PHY_10GBASET_ABILITY |
					     IXGBE_MDIO_PHY_1000BASET_ABILITY))
						hw->phy.type =
							 ixgbe_phy_cu_unknown;
					else
						hw->phy.type =
							 ixgbe_phy_generic;
				}

				status = IXGBE_SUCCESS;
				break;
			}
		}

		/* Certain media types do not have a phy so an address will not
		 * be found and the code will take this path.  Caller has to
		 * decide if it is an error or not.
		 */
		if (status != IXGBE_SUCCESS) {
			hw->phy.addr = 0;
		}
	} else {
		status = IXGBE_SUCCESS;
	}

	return status;
}

/**
 * ixgbe_check_reset_blocked - check status of MNG FW veto bit
 * @@hw: pointer to the hardware structure
 *
 * This function checks the MMNGC.MNG_VETO bit to see if there are
 * any constraints on link from manageability.  For MAC's that don't
 * have this bit just return faluse since the link can not be blocked
 * via this method.
 **/
int32_t ixgbe_check_reset_blocked(struct ixgbe_hw *hw)
{
	uint32_t mmngc;

	DEBUGFUNC("ixgbe_check_reset_blocked");

	/* If we don't have this bit, it can't be blocking */
	if (hw->mac.type == ixgbe_mac_82598EB)
		return FALSE;

	mmngc = IXGBE_READ_REG(hw, IXGBE_MMNGC);
	if (mmngc & IXGBE_MMNGC_MNG_VETO) {
		ERROR_REPORT1(IXGBE_ERROR_SOFTWARE,
			      "MNG_VETO bit detected.\n");
		return TRUE;
	}

	return FALSE;
}

/**
 *  ixgbe_validate_phy_addr - Determines phy address is valid
 *  @@hw: pointer to hardware structure
 *
 **/
bool ixgbe_validate_phy_addr(struct ixgbe_hw *hw, uint32_t phy_addr)
{
	uint16_t phy_id = 0;
	bool valid = FALSE;

	DEBUGFUNC("ixgbe_validate_phy_addr");

	hw->phy.addr = phy_addr;
	hw->phy.ops.read_reg(hw, IXGBE_MDIO_PHY_ID_HIGH,
			     IXGBE_MDIO_PMA_PMD_DEV_TYPE, &phy_id);

	if (phy_id != 0xFFFF && phy_id != 0x0)
		valid = TRUE;

	return valid;
}

/**
 *  ixgbe_get_phy_id - Get the phy type
 *  @@hw: pointer to hardware structure
 *
 **/
int32_t ixgbe_get_phy_id(struct ixgbe_hw *hw)
{
	uint32_t status;
	uint16_t phy_id_high = 0;
	uint16_t phy_id_low = 0;

	DEBUGFUNC("ixgbe_get_phy_id");

	status = hw->phy.ops.read_reg(hw, IXGBE_MDIO_PHY_ID_HIGH,
				      IXGBE_MDIO_PMA_PMD_DEV_TYPE,
				      &phy_id_high);

	if (status == IXGBE_SUCCESS) {
		hw->phy.id = (uint32_t)(phy_id_high << 16);
		status = hw->phy.ops.read_reg(hw, IXGBE_MDIO_PHY_ID_LOW,
					      IXGBE_MDIO_PMA_PMD_DEV_TYPE,
					      &phy_id_low);
		hw->phy.id |= (uint32_t)(phy_id_low & IXGBE_PHY_REVISION_MASK);
		hw->phy.revision =
		    (uint32_t)(phy_id_low & ~IXGBE_PHY_REVISION_MASK);
	}
	return status;
}

/**
 *  ixgbe_get_phy_type_from_id - Get the phy type
 *  @@hw: pointer to hardware structure
 *
 **/
enum ixgbe_phy_type ixgbe_get_phy_type_from_id(uint32_t phy_id)
{
	enum ixgbe_phy_type phy_type;

	DEBUGFUNC("ixgbe_get_phy_type_from_id");

	switch (phy_id) {
	case TN1010_PHY_ID:
		phy_type = ixgbe_phy_tn;
		break;
	case X550_PHY_ID1:
	case X550_PHY_ID2:
	case X550_PHY_ID3:
	case X540_PHY_ID:
		phy_type = ixgbe_phy_aq;
		break;
	case QT2022_PHY_ID:
		phy_type = ixgbe_phy_qt;
		break;
	case ATH_PHY_ID:
		phy_type = ixgbe_phy_nl;
		break;
	case X557_PHY_ID:
		phy_type = ixgbe_phy_x550em_ext_t;
		break;
	default:
		phy_type = ixgbe_phy_unknown;
		break;
	}

	DEBUGOUT1("phy type found is %d\n", phy_type);
	return phy_type;
}

/**
 *  ixgbe_reset_phy_generic - Performs a PHY reset
 *  @@hw: pointer to hardware structure
 **/
int32_t ixgbe_reset_phy_generic(struct ixgbe_hw *hw)
{
	uint32_t i;
	uint16_t ctrl = 0;
	int32_t status = IXGBE_SUCCESS;

	DEBUGFUNC("ixgbe_reset_phy_generic");

	if (hw->phy.type == ixgbe_phy_unknown)
		status = ixgbe_identify_phy_generic(hw);

	if (status != IXGBE_SUCCESS || hw->phy.type == ixgbe_phy_none)
		goto out;

	/* Don't reset PHY if it's shut down due to overtemp. */
	if (!hw->phy.reset_if_overtemp &&
	    (IXGBE_ERR_OVERTEMP == hw->phy.ops.check_overtemp(hw)))
		goto out;

	/* Blocked by MNG FW so bail */
	if (ixgbe_check_reset_blocked(hw))
		goto out;

	/*
	 * Perform soft PHY reset to the PHY_XS.
	 * This will cause a soft reset to the PHY
	 */
	hw->phy.ops.write_reg(hw, IXGBE_MDIO_PHY_XS_CONTROL,
			      IXGBE_MDIO_PHY_XS_DEV_TYPE,
			      IXGBE_MDIO_PHY_XS_RESET);

	/*
	 * Poll for reset bit to self-clear indicating reset is complete.
	 * Some PHYs could take up to 3 seconds to complete and need about
	 * 1.7 usec delay after the reset is complete.
	 */
	for (i = 0; i < 30; i++) {
		msec_delay(100);
		hw->phy.ops.read_reg(hw, IXGBE_MDIO_PHY_XS_CONTROL,
				     IXGBE_MDIO_PHY_XS_DEV_TYPE, &ctrl);
		if (!(ctrl & IXGBE_MDIO_PHY_XS_RESET)) {
			usec_delay(2);
			break;
		}
	}

	if (ctrl & IXGBE_MDIO_PHY_XS_RESET) {
		status = IXGBE_ERR_RESET_FAILED;
		ERROR_REPORT1(IXGBE_ERROR_POLLING,
			     "PHY reset polling failed to complete.\n");
	}

out:
	return status;
}

/**
 *  ixgbe_read_phy_mdi - Reads a value from a specified PHY register without
 *  the SWFW lock
 *  @@hw: pointer to hardware structure
 *  @@reg_addr: 32 bit address of PHY register to read
 *  @@phy_data: Pointer to read data from PHY register
 **/
int32_t ixgbe_read_phy_reg_mdi(struct ixgbe_hw *hw, uint32_t reg_addr,
			       uint32_t device_type, uint16_t *phy_data)
{
	uint32_t i, data, command;

	/* Setup and write the address cycle command */
	command = ((reg_addr << IXGBE_MSCA_NP_ADDR_SHIFT)  |
		   (device_type << IXGBE_MSCA_DEV_TYPE_SHIFT) |
		   (hw->phy.addr << IXGBE_MSCA_PHY_ADDR_SHIFT) |
		   (IXGBE_MSCA_ADDR_CYCLE | IXGBE_MSCA_MDI_COMMAND));

	IXGBE_WRITE_REG(hw, IXGBE_MSCA, command);

	/*
	 * Check every 10 usec to see if the address cycle completed.
	 * The MDI Command bit will clear when the operation is
	 * complete
	 */
	for (i = 0; i < IXGBE_MDIO_COMMAND_TIMEOUT; i++) {
		usec_delay(10);

		command = IXGBE_READ_REG(hw, IXGBE_MSCA);
		if ((command & IXGBE_MSCA_MDI_COMMAND) == 0)
				break;
	}


	if ((command & IXGBE_MSCA_MDI_COMMAND) != 0) {
		ERROR_REPORT1(IXGBE_ERROR_POLLING, "PHY address command did not complete.\n");
		return IXGBE_ERR_PHY;
	}

	/*
	 * Address cycle complete, setup and write the read
	 * command
	 */
	command = ((reg_addr << IXGBE_MSCA_NP_ADDR_SHIFT)  |
		   (device_type << IXGBE_MSCA_DEV_TYPE_SHIFT) |
		   (hw->phy.addr << IXGBE_MSCA_PHY_ADDR_SHIFT) |
		   (IXGBE_MSCA_READ | IXGBE_MSCA_MDI_COMMAND));

	IXGBE_WRITE_REG(hw, IXGBE_MSCA, command);

	/*
	 * Check every 10 usec to see if the address cycle
	 * completed. The MDI Command bit will clear when the
	 * operation is complete
	 */
	for (i = 0; i < IXGBE_MDIO_COMMAND_TIMEOUT; i++) {
		usec_delay(10);

		command = IXGBE_READ_REG(hw, IXGBE_MSCA);
		if ((command & IXGBE_MSCA_MDI_COMMAND) == 0)
			break;
	}

	if ((command & IXGBE_MSCA_MDI_COMMAND) != 0) {
		ERROR_REPORT1(IXGBE_ERROR_POLLING, "PHY read command didn't complete\n");
		return IXGBE_ERR_PHY;
	}

	/*
	 * Read operation is complete.  Get the data
	 * from MSRWD
	 */
	data = IXGBE_READ_REG(hw, IXGBE_MSRWD);
	data >>= IXGBE_MSRWD_READ_DATA_SHIFT;
	*phy_data = (uint16_t)(data);

	return IXGBE_SUCCESS;
}

/**
 *  ixgbe_read_phy_reg_generic - Reads a value from a specified PHY register
 *  using the SWFW lock - this function is needed in most cases
 *  @@hw: pointer to hardware structure
 *  @@reg_addr: 32 bit address of PHY register to read
 *  @@phy_data: Pointer to read data from PHY register
 **/
int32_t ixgbe_read_phy_reg_generic(struct ixgbe_hw *hw, uint32_t reg_addr,
				   uint32_t device_type, uint16_t *phy_data)
{
	int32_t status;
	uint32_t gssr = hw->phy.phy_semaphore_mask;

	DEBUGFUNC("ixgbe_read_phy_reg_generic");

	if (hw->mac.ops.acquire_swfw_sync(hw, gssr) == IXGBE_SUCCESS) {
		status = ixgbe_read_phy_reg_mdi(hw, reg_addr, device_type,
						phy_data);
		hw->mac.ops.release_swfw_sync(hw, gssr);
	} else {
		status = IXGBE_ERR_SWFW_SYNC;
	}

	return status;
}

/**
 *  ixgbe_write_phy_reg_mdi - Writes a value to specified PHY register
 *  without SWFW lock
 *  @@hw: pointer to hardware structure
 *  @@reg_addr: 32 bit PHY register to write
 *  @@device_type: 5 bit device type
 *  @@phy_data: Data to write to the PHY register
 **/
int32_t ixgbe_write_phy_reg_mdi(struct ixgbe_hw *hw, uint32_t reg_addr,
				uint32_t device_type, uint16_t phy_data)
{
	uint32_t i, command;

	/* Put the data in the MDI single read and write data register*/
	IXGBE_WRITE_REG(hw, IXGBE_MSRWD, (uint32_t)phy_data);

	/* Setup and write the address cycle command */
	command = ((reg_addr << IXGBE_MSCA_NP_ADDR_SHIFT)  |
		   (device_type << IXGBE_MSCA_DEV_TYPE_SHIFT) |
		   (hw->phy.addr << IXGBE_MSCA_PHY_ADDR_SHIFT) |
		   (IXGBE_MSCA_ADDR_CYCLE | IXGBE_MSCA_MDI_COMMAND));

	IXGBE_WRITE_REG(hw, IXGBE_MSCA, command);

	/*
	 * Check every 10 usec to see if the address cycle completed.
	 * The MDI Command bit will clear when the operation is
	 * complete
	 */
	for (i = 0; i < IXGBE_MDIO_COMMAND_TIMEOUT; i++) {
		usec_delay(10);

		command = IXGBE_READ_REG(hw, IXGBE_MSCA);
		if ((command & IXGBE_MSCA_MDI_COMMAND) == 0)
			break;
	}

	if ((command & IXGBE_MSCA_MDI_COMMAND) != 0) {
		ERROR_REPORT1(IXGBE_ERROR_POLLING, "PHY address cmd didn't complete\n");
		return IXGBE_ERR_PHY;
	}

	/*
	 * Address cycle complete, setup and write the write
	 * command
	 */
	command = ((reg_addr << IXGBE_MSCA_NP_ADDR_SHIFT)  |
		   (device_type << IXGBE_MSCA_DEV_TYPE_SHIFT) |
		   (hw->phy.addr << IXGBE_MSCA_PHY_ADDR_SHIFT) |
		   (IXGBE_MSCA_WRITE | IXGBE_MSCA_MDI_COMMAND));

	IXGBE_WRITE_REG(hw, IXGBE_MSCA, command);

	/*
	 * Check every 10 usec to see if the address cycle
	 * completed. The MDI Command bit will clear when the
	 * operation is complete
	 */
	for (i = 0; i < IXGBE_MDIO_COMMAND_TIMEOUT; i++) {
		usec_delay(10);

		command = IXGBE_READ_REG(hw, IXGBE_MSCA);
		if ((command & IXGBE_MSCA_MDI_COMMAND) == 0)
			break;
	}

	if ((command & IXGBE_MSCA_MDI_COMMAND) != 0) {
		ERROR_REPORT1(IXGBE_ERROR_POLLING, "PHY write cmd didn't complete\n");
		return IXGBE_ERR_PHY;
	}

	return IXGBE_SUCCESS;
}

/**
 *  ixgbe_write_phy_reg_generic - Writes a value to specified PHY register
 *  using SWFW lock- this function is needed in most cases
 *  @@hw: pointer to hardware structure
 *  @@reg_addr: 32 bit PHY register to write
 *  @@device_type: 5 bit device type
 *  @@phy_data: Data to write to the PHY register
 **/
int32_t ixgbe_write_phy_reg_generic(struct ixgbe_hw *hw, uint32_t reg_addr,
				    uint32_t device_type, uint16_t phy_data)
{
	int32_t status;
	uint32_t gssr = hw->phy.phy_semaphore_mask;

	DEBUGFUNC("ixgbe_write_phy_reg_generic");

	if (hw->mac.ops.acquire_swfw_sync(hw, gssr) == IXGBE_SUCCESS) {
		status = ixgbe_write_phy_reg_mdi(hw, reg_addr, device_type,
						 phy_data);
		hw->mac.ops.release_swfw_sync(hw, gssr);
	} else {
		status = IXGBE_ERR_SWFW_SYNC;
	}

	return status;
}

/**
 *  ixgbe_setup_phy_link_generic - Set and restart auto-neg
 *  @@hw: pointer to hardware structure
 *
 *  Restart auto-negotiation and PHY and waits for completion.
 **/
int32_t ixgbe_setup_phy_link_generic(struct ixgbe_hw *hw)
{
	int32_t status = IXGBE_SUCCESS;
	uint16_t autoneg_reg = IXGBE_MII_AUTONEG_REG;
	bool autoneg = FALSE;
	ixgbe_link_speed speed;

	DEBUGFUNC("ixgbe_setup_phy_link_generic");

	ixgbe_get_copper_link_capabilities_generic(hw, &speed, &autoneg);

	if (speed & IXGBE_LINK_SPEED_10GB_FULL) {
		/* Set or unset auto-negotiation 10G advertisement */
		hw->phy.ops.read_reg(hw, IXGBE_MII_10GBASE_T_AUTONEG_CTRL_REG,
				     IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
				     &autoneg_reg);

		autoneg_reg &= ~IXGBE_MII_10GBASE_T_ADVERTISE;
		if (hw->phy.autoneg_advertised & IXGBE_LINK_SPEED_10GB_FULL)
			autoneg_reg |= IXGBE_MII_10GBASE_T_ADVERTISE;

		hw->phy.ops.write_reg(hw, IXGBE_MII_10GBASE_T_AUTONEG_CTRL_REG,
				      IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
				      autoneg_reg);
	}

	if (hw->mac.type == ixgbe_mac_X550) {
		if (speed & IXGBE_LINK_SPEED_5GB_FULL) {
			/* Set or unset auto-negotiation 5G advertisement */
			hw->phy.ops.read_reg(hw,
				IXGBE_MII_AUTONEG_VENDOR_PROVISION_1_REG,
				IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
				&autoneg_reg);

			autoneg_reg &= ~IXGBE_MII_5GBASE_T_ADVERTISE;
			if (hw->phy.autoneg_advertised &
			     IXGBE_LINK_SPEED_5GB_FULL)
				autoneg_reg |= IXGBE_MII_5GBASE_T_ADVERTISE;

			hw->phy.ops.write_reg(hw,
				IXGBE_MII_AUTONEG_VENDOR_PROVISION_1_REG,
				IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
				autoneg_reg);
		}

		if (speed & IXGBE_LINK_SPEED_2_5GB_FULL) {
			/* Set or unset auto-negotiation 2.5G advertisement */
			hw->phy.ops.read_reg(hw,
				IXGBE_MII_AUTONEG_VENDOR_PROVISION_1_REG,
				IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
				&autoneg_reg);

			autoneg_reg &= ~IXGBE_MII_2_5GBASE_T_ADVERTISE;
			if (hw->phy.autoneg_advertised &
			    IXGBE_LINK_SPEED_2_5GB_FULL)
				autoneg_reg |= IXGBE_MII_2_5GBASE_T_ADVERTISE;

			hw->phy.ops.write_reg(hw,
				IXGBE_MII_AUTONEG_VENDOR_PROVISION_1_REG,
				IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
				autoneg_reg);
		}
	}

	if (speed & IXGBE_LINK_SPEED_1GB_FULL) {
		/* Set or unset auto-negotiation 1G advertisement */
		hw->phy.ops.read_reg(hw,
				     IXGBE_MII_AUTONEG_VENDOR_PROVISION_1_REG,
				     IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
				     &autoneg_reg);

		autoneg_reg &= ~IXGBE_MII_1GBASE_T_ADVERTISE;
		if (hw->phy.autoneg_advertised & IXGBE_LINK_SPEED_1GB_FULL)
			autoneg_reg |= IXGBE_MII_1GBASE_T_ADVERTISE;

		hw->phy.ops.write_reg(hw,
				      IXGBE_MII_AUTONEG_VENDOR_PROVISION_1_REG,
				      IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
				      autoneg_reg);
	}

	if (speed & IXGBE_LINK_SPEED_100_FULL) {
		/* Set or unset auto-negotiation 100M advertisement */
		hw->phy.ops.read_reg(hw, IXGBE_MII_AUTONEG_ADVERTISE_REG,
				     IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
				     &autoneg_reg);

		autoneg_reg &= ~(IXGBE_MII_100BASE_T_ADVERTISE |
				 IXGBE_MII_100BASE_T_ADVERTISE_HALF);
		if (hw->phy.autoneg_advertised & IXGBE_LINK_SPEED_100_FULL)
			autoneg_reg |= IXGBE_MII_100BASE_T_ADVERTISE;

		hw->phy.ops.write_reg(hw, IXGBE_MII_AUTONEG_ADVERTISE_REG,
				      IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
				      autoneg_reg);
	}

	/* Blocked by MNG FW so don't reset PHY */
	if (ixgbe_check_reset_blocked(hw))
		return status;

	/* Restart PHY auto-negotiation. */
	hw->phy.ops.read_reg(hw, IXGBE_MDIO_AUTO_NEG_CONTROL,
			     IXGBE_MDIO_AUTO_NEG_DEV_TYPE, &autoneg_reg);

	autoneg_reg |= IXGBE_MII_RESTART;

	hw->phy.ops.write_reg(hw, IXGBE_MDIO_AUTO_NEG_CONTROL,
			      IXGBE_MDIO_AUTO_NEG_DEV_TYPE, autoneg_reg);

	return status;
}

/**
 *  ixgbe_setup_phy_link_speed_generic - Sets the auto advertised capabilities
 *  @@hw: pointer to hardware structure
 *  @@speed: new link speed
 **/
int32_t ixgbe_setup_phy_link_speed_generic(struct ixgbe_hw *hw,
					   ixgbe_link_speed speed,
					   bool autoneg_wait_to_complete)
{
	DEBUGFUNC("ixgbe_setup_phy_link_speed_generic");

	/*
	 * Clear autoneg_advertised and set new values based on input link
	 * speed.
	 */
	hw->phy.autoneg_advertised = 0;

	if (speed & IXGBE_LINK_SPEED_10GB_FULL)
		hw->phy.autoneg_advertised |= IXGBE_LINK_SPEED_10GB_FULL;

	if (speed & IXGBE_LINK_SPEED_5GB_FULL)
		hw->phy.autoneg_advertised |= IXGBE_LINK_SPEED_5GB_FULL;

	if (speed & IXGBE_LINK_SPEED_2_5GB_FULL)
		hw->phy.autoneg_advertised |= IXGBE_LINK_SPEED_2_5GB_FULL;

	if (speed & IXGBE_LINK_SPEED_1GB_FULL)
		hw->phy.autoneg_advertised |= IXGBE_LINK_SPEED_1GB_FULL;

	if (speed & IXGBE_LINK_SPEED_100_FULL)
		hw->phy.autoneg_advertised |= IXGBE_LINK_SPEED_100_FULL;

	/* Setup link based on the new speed settings */
	hw->phy.ops.setup_link(hw);

	return IXGBE_SUCCESS;
}

/**
 * ixgbe_get_copper_speeds_supported - Get copper link speeds from phy
 * @@hw: pointer to hardware structure
 *
 * Determines the supported link capabilities by reading the PHY auto
 * negotiation register.
 **/
int32_t ixgbe_get_copper_speeds_supported(struct ixgbe_hw *hw)
{
	int32_t status;
	uint16_t speed_ability;

	status = hw->phy.ops.read_reg(hw, IXGBE_MDIO_PHY_SPEED_ABILITY,
				      IXGBE_MDIO_PMA_PMD_DEV_TYPE,
				      &speed_ability);
	if (status)
		return status;

	if (speed_ability & IXGBE_MDIO_PHY_SPEED_10G)
		hw->phy.speeds_supported |= IXGBE_LINK_SPEED_10GB_FULL;
	if (speed_ability & IXGBE_MDIO_PHY_SPEED_1G)
		hw->phy.speeds_supported |= IXGBE_LINK_SPEED_1GB_FULL;
	if (speed_ability & IXGBE_MDIO_PHY_SPEED_100M)
		hw->phy.speeds_supported |= IXGBE_LINK_SPEED_100_FULL;

	switch (hw->mac.type) {
	case ixgbe_mac_X550:
		hw->phy.speeds_supported |= IXGBE_LINK_SPEED_2_5GB_FULL;
		hw->phy.speeds_supported |= IXGBE_LINK_SPEED_5GB_FULL;
		break;
	case ixgbe_mac_X550EM_x:
		hw->phy.speeds_supported &= ~IXGBE_LINK_SPEED_100_FULL;
		break;
	default:
		break;
	}

	return status;
}

/**
 *  ixgbe_get_copper_link_capabilities_generic - Determines link capabilities
 *  @@hw: pointer to hardware structure
 *  @@speed: pointer to link speed
 *  @@autoneg: boolean auto-negotiation value
 **/
int32_t ixgbe_get_copper_link_capabilities_generic(struct ixgbe_hw *hw,
						   ixgbe_link_speed *speed,
						   bool *autoneg)
{
	int32_t status = IXGBE_SUCCESS;

	DEBUGFUNC("ixgbe_get_copper_link_capabilities_generic");

	*autoneg = TRUE;
	if (!hw->phy.speeds_supported)
		status = ixgbe_get_copper_speeds_supported(hw);

	*speed = hw->phy.speeds_supported;
	return status;
}

/**
 *  ixgbe_check_phy_link_tnx - Determine link and speed status
 *  @@hw: pointer to hardware structure
 *
 *  Reads the VS1 register to determine if link is up and the current speed for
 *  the PHY.
 **/
int32_t ixgbe_check_phy_link_tnx(struct ixgbe_hw *hw, ixgbe_link_speed *speed,
				 bool *link_up)
{
	int32_t status = IXGBE_SUCCESS;
	uint32_t time_out;
	uint32_t max_time_out = 10;
	uint16_t phy_link = 0;
	uint16_t phy_speed = 0;
	uint16_t phy_data = 0;

	DEBUGFUNC("ixgbe_check_phy_link_tnx");

	/* Initialize speed and link to default case */
	*link_up = FALSE;
	*speed = IXGBE_LINK_SPEED_10GB_FULL;

	/*
	 * Check current speed and link status of the PHY register.
	 * This is a vendor specific register and may have to
	 * be changed for other copper PHYs.
	 */
	for (time_out = 0; time_out < max_time_out; time_out++) {
		usec_delay(10);
		status = hw->phy.ops.read_reg(hw,
					IXGBE_MDIO_VENDOR_SPECIFIC_1_STATUS,
					IXGBE_MDIO_VENDOR_SPECIFIC_1_DEV_TYPE,
					&phy_data);
		phy_link = phy_data & IXGBE_MDIO_VENDOR_SPECIFIC_1_LINK_STATUS;
		phy_speed = phy_data &
				 IXGBE_MDIO_VENDOR_SPECIFIC_1_SPEED_STATUS;
		if (phy_link == IXGBE_MDIO_VENDOR_SPECIFIC_1_LINK_STATUS) {
			*link_up = TRUE;
			if (phy_speed ==
			    IXGBE_MDIO_VENDOR_SPECIFIC_1_SPEED_STATUS)
				*speed = IXGBE_LINK_SPEED_1GB_FULL;
			break;
		}
	}

	return status;
}

/**
 *	ixgbe_setup_phy_link_tnx - Set and restart auto-neg
 *	@@hw: pointer to hardware structure
 *
 *	Restart auto-negotiation and PHY and waits for completion.
 **/
int32_t ixgbe_setup_phy_link_tnx(struct ixgbe_hw *hw)
{
	int32_t status = IXGBE_SUCCESS;
	uint16_t autoneg_reg = IXGBE_MII_AUTONEG_REG;
	bool autoneg = FALSE;
	ixgbe_link_speed speed;

	DEBUGFUNC("ixgbe_setup_phy_link_tnx");

	ixgbe_get_copper_link_capabilities_generic(hw, &speed, &autoneg);

	if (speed & IXGBE_LINK_SPEED_10GB_FULL) {
		/* Set or unset auto-negotiation 10G advertisement */
		hw->phy.ops.read_reg(hw, IXGBE_MII_10GBASE_T_AUTONEG_CTRL_REG,
				     IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
				     &autoneg_reg);

		autoneg_reg &= ~IXGBE_MII_10GBASE_T_ADVERTISE;
		if (hw->phy.autoneg_advertised & IXGBE_LINK_SPEED_10GB_FULL)
			autoneg_reg |= IXGBE_MII_10GBASE_T_ADVERTISE;

		hw->phy.ops.write_reg(hw, IXGBE_MII_10GBASE_T_AUTONEG_CTRL_REG,
				      IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
				      autoneg_reg);
	}

	if (speed & IXGBE_LINK_SPEED_1GB_FULL) {
		/* Set or unset auto-negotiation 1G advertisement */
		hw->phy.ops.read_reg(hw, IXGBE_MII_AUTONEG_XNP_TX_REG,
				     IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
				     &autoneg_reg);

		autoneg_reg &= ~IXGBE_MII_1GBASE_T_ADVERTISE_XNP_TX;
		if (hw->phy.autoneg_advertised & IXGBE_LINK_SPEED_1GB_FULL)
			autoneg_reg |= IXGBE_MII_1GBASE_T_ADVERTISE_XNP_TX;

		hw->phy.ops.write_reg(hw, IXGBE_MII_AUTONEG_XNP_TX_REG,
				      IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
				      autoneg_reg);
	}

	if (speed & IXGBE_LINK_SPEED_100_FULL) {
		/* Set or unset auto-negotiation 100M advertisement */
		hw->phy.ops.read_reg(hw, IXGBE_MII_AUTONEG_ADVERTISE_REG,
				     IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
				     &autoneg_reg);

		autoneg_reg &= ~IXGBE_MII_100BASE_T_ADVERTISE;
		if (hw->phy.autoneg_advertised & IXGBE_LINK_SPEED_100_FULL)
			autoneg_reg |= IXGBE_MII_100BASE_T_ADVERTISE;

		hw->phy.ops.write_reg(hw, IXGBE_MII_AUTONEG_ADVERTISE_REG,
				      IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
				      autoneg_reg);
	}

	/* Blocked by MNG FW so don't reset PHY */
	if (ixgbe_check_reset_blocked(hw))
		return status;

	/* Restart PHY auto-negotiation. */
	hw->phy.ops.read_reg(hw, IXGBE_MDIO_AUTO_NEG_CONTROL,
			     IXGBE_MDIO_AUTO_NEG_DEV_TYPE, &autoneg_reg);

	autoneg_reg |= IXGBE_MII_RESTART;

	hw->phy.ops.write_reg(hw, IXGBE_MDIO_AUTO_NEG_CONTROL,
			      IXGBE_MDIO_AUTO_NEG_DEV_TYPE, autoneg_reg);

	return status;
}

/**
 *  ixgbe_get_phy_firmware_version_tnx - Gets the PHY Firmware Version
 *  @@hw: pointer to hardware structure
 *  @@firmware_version: pointer to the PHY Firmware Version
 **/
int32_t ixgbe_get_phy_firmware_version_tnx(struct ixgbe_hw *hw,
					   uint16_t *firmware_version)
{
	int32_t status;

	DEBUGFUNC("ixgbe_get_phy_firmware_version_tnx");

	status = hw->phy.ops.read_reg(hw, TNX_FW_REV,
				      IXGBE_MDIO_VENDOR_SPECIFIC_1_DEV_TYPE,
				      firmware_version);

	return status;
}

/**
 *  ixgbe_get_phy_firmware_version_generic - Gets the PHY Firmware Version
 *  @@hw: pointer to hardware structure
 *  @@firmware_version: pointer to the PHY Firmware Version
 **/
int32_t ixgbe_get_phy_firmware_version_generic(struct ixgbe_hw *hw,
					       uint16_t *firmware_version)
{
	int32_t status;

	DEBUGFUNC("ixgbe_get_phy_firmware_version_generic");

	status = hw->phy.ops.read_reg(hw, AQ_FW_REV,
				      IXGBE_MDIO_VENDOR_SPECIFIC_1_DEV_TYPE,
				      firmware_version);

	return status;
}

/**
 *  ixgbe_reset_phy_nl - Performs a PHY reset
 *  @@hw: pointer to hardware structure
 **/
int32_t ixgbe_reset_phy_nl(struct ixgbe_hw *hw)
{
	uint16_t phy_offset, control, eword, edata, block_crc;
	bool end_data = FALSE;
	uint16_t list_offset, data_offset;
	uint16_t phy_data = 0;
	int32_t ret_val = IXGBE_SUCCESS;
	uint32_t i;

	DEBUGFUNC("ixgbe_reset_phy_nl");

	/* Blocked by MNG FW so bail */
	if (ixgbe_check_reset_blocked(hw))
		goto out;

	hw->phy.ops.read_reg(hw, IXGBE_MDIO_PHY_XS_CONTROL,
			     IXGBE_MDIO_PHY_XS_DEV_TYPE, &phy_data);

	/* reset the PHY and poll for completion */
	hw->phy.ops.write_reg(hw, IXGBE_MDIO_PHY_XS_CONTROL,
			      IXGBE_MDIO_PHY_XS_DEV_TYPE,
			      (phy_data | IXGBE_MDIO_PHY_XS_RESET));

	for (i = 0; i < 100; i++) {
		hw->phy.ops.read_reg(hw, IXGBE_MDIO_PHY_XS_CONTROL,
				     IXGBE_MDIO_PHY_XS_DEV_TYPE, &phy_data);
		if ((phy_data & IXGBE_MDIO_PHY_XS_RESET) == 0)
			break;
		msec_delay(10);
	}

	if ((phy_data & IXGBE_MDIO_PHY_XS_RESET) != 0) {
		DEBUGOUT("PHY reset did not complete.\n");
		ret_val = IXGBE_ERR_PHY;
		goto out;
	}

	/* Get init offsets */
	ret_val = ixgbe_get_sfp_init_sequence_offsets(hw, &list_offset,
						      &data_offset);
	if (ret_val != IXGBE_SUCCESS)
		goto out;

	ret_val = hw->eeprom.ops.read(hw, data_offset, &block_crc);
	data_offset++;
	while (!end_data) {
		/*
		 * Read control word from PHY init contents offset
		 */
		ret_val = hw->eeprom.ops.read(hw, data_offset, &eword);
		if (ret_val)
			goto err_eeprom;
		control = (eword & IXGBE_CONTROL_MASK_NL) >>
			   IXGBE_CONTROL_SHIFT_NL;
		edata = eword & IXGBE_DATA_MASK_NL;
		switch (control) {
		case IXGBE_DELAY_NL:
			data_offset++;
			DEBUGOUT1("DELAY: %d MS\n", edata);
			msec_delay(edata);
			break;
		case IXGBE_DATA_NL:
			DEBUGOUT("DATA:\n");
			data_offset++;
			ret_val = hw->eeprom.ops.read(hw, data_offset,
						      &phy_offset);
			if (ret_val)
				goto err_eeprom;
			data_offset++;
			for (i = 0; i < edata; i++) {
				ret_val = hw->eeprom.ops.read(hw, data_offset,
							      &eword);
				if (ret_val)
					goto err_eeprom;
				hw->phy.ops.write_reg(hw, phy_offset,
						      IXGBE_TWINAX_DEV, eword);
				DEBUGOUT2("Wrote %4.4x to %4.4x\n", eword,
					  phy_offset);
				data_offset++;
				phy_offset++;
			}
			break;
		case IXGBE_CONTROL_NL:
			data_offset++;
			DEBUGOUT("CONTROL:\n");
			if (edata == IXGBE_CONTROL_EOL_NL) {
				DEBUGOUT("EOL\n");
				end_data = TRUE;
			} else if (edata == IXGBE_CONTROL_SOL_NL) {
				DEBUGOUT("SOL\n");
			} else {
				DEBUGOUT("Bad control value\n");
				ret_val = IXGBE_ERR_PHY;
				goto out;
			}
			break;
		default:
			DEBUGOUT("Bad control type\n");
			ret_val = IXGBE_ERR_PHY;
			goto out;
		}
	}

out:
	return ret_val;

err_eeprom:
	ERROR_REPORT2(IXGBE_ERROR_INVALID_STATE,
		      "eeprom read at offset %d failed", data_offset);
	return IXGBE_ERR_PHY;
}

bool
ixgbe_is_sfp(struct ixgbe_hw *hw)
{
	switch (hw->phy.type) {
	case ixgbe_phy_sfp_avago:
	case ixgbe_phy_sfp_ftl:
	case ixgbe_phy_sfp_intel:
	case ixgbe_phy_sfp_unknown:
	case ixgbe_phy_sfp_passive_tyco:
	case ixgbe_phy_sfp_passive_unknown:
	case ixgbe_phy_qsfp_passive_unknown:
	case ixgbe_phy_qsfp_active_unknown:
	case ixgbe_phy_qsfp_intel:
	case ixgbe_phy_qsfp_unknown:
		return TRUE;
	default:
		return FALSE;
	}
}

/**
 *  ixgbe_identify_module_generic - Identifies module type
 *  @@hw: pointer to hardware structure
 *
 *  Determines HW type and calls appropriate function.
 **/
int32_t ixgbe_identify_module_generic(struct ixgbe_hw *hw)
{
	int32_t status = IXGBE_ERR_SFP_NOT_PRESENT;

	DEBUGFUNC("ixgbe_identify_module_generic");

	switch (hw->mac.ops.get_media_type(hw)) {
	case ixgbe_media_type_fiber:
		status = ixgbe_identify_sfp_module_generic(hw);
		break;

	case ixgbe_media_type_fiber_qsfp:
		status = ixgbe_identify_qsfp_module_generic(hw);
		break;

	default:
		hw->phy.sfp_type = ixgbe_sfp_type_not_present;
		status = IXGBE_ERR_SFP_NOT_PRESENT;
		break;
	}

	return status;
}

/**
 *  ixgbe_identify_sfp_module_generic - Identifies SFP modules
 *  @@hw: pointer to hardware structure
 *
 *  Searches for and identifies the SFP module and assigns appropriate PHY type.
 **/
int32_t ixgbe_identify_sfp_module_generic(struct ixgbe_hw *hw)
{
	int32_t status = IXGBE_ERR_PHY_ADDR_INVALID;
	uint32_t vendor_oui = 0;
	enum ixgbe_sfp_type stored_sfp_type = hw->phy.sfp_type;
	uint8_t identifier = 0;
	uint8_t comp_codes_1g = 0;
	uint8_t comp_codes_10g = 0;
	uint8_t oui_bytes[3] = {0, 0, 0};
	uint8_t cable_tech = 0;
	uint8_t cable_spec = 0;

	DEBUGFUNC("ixgbe_identify_sfp_module_generic");

	if (hw->mac.ops.get_media_type(hw) != ixgbe_media_type_fiber) {
		hw->phy.sfp_type = ixgbe_sfp_type_not_present;
		status = IXGBE_ERR_SFP_NOT_PRESENT;
		goto out;
	}

	/* LAN ID is needed for I2C access */
	hw->mac.ops.set_lan_id(hw);

	status = hw->phy.ops.read_i2c_eeprom(hw,
					     IXGBE_SFF_IDENTIFIER,
					     &identifier);

	if (status != IXGBE_SUCCESS)
		goto err_read_i2c_eeprom;

	if (identifier != IXGBE_SFF_IDENTIFIER_SFP) {
		hw->phy.type = ixgbe_phy_sfp_unsupported;
		status = IXGBE_ERR_SFP_NOT_SUPPORTED;
	} else {
		status = hw->phy.ops.read_i2c_eeprom(hw,
						     IXGBE_SFF_1GBE_COMP_CODES,
						     &comp_codes_1g);

		if (status != IXGBE_SUCCESS)
			goto err_read_i2c_eeprom;

		status = hw->phy.ops.read_i2c_eeprom(hw,
						     IXGBE_SFF_10GBE_COMP_CODES,
						     &comp_codes_10g);

		if (status != IXGBE_SUCCESS)
			goto err_read_i2c_eeprom;
		status = hw->phy.ops.read_i2c_eeprom(hw,
						     IXGBE_SFF_CABLE_TECHNOLOGY,
						     &cable_tech);

		if (status != IXGBE_SUCCESS)
			goto err_read_i2c_eeprom;

		 /* ID Module
		  * =========
		  * 0   SFP_DA_CU
		  * 1   SFP_SR
		  * 2   SFP_LR
		  * 3   SFP_DA_CORE0 - 82599-specific
		  * 4   SFP_DA_CORE1 - 82599-specific
		  * 5   SFP_SR/LR_CORE0 - 82599-specific
		  * 6   SFP_SR/LR_CORE1 - 82599-specific
		  * 7   SFP_act_lmt_DA_CORE0 - 82599-specific
		  * 8   SFP_act_lmt_DA_CORE1 - 82599-specific
		  * 9   SFP_1g_cu_CORE0 - 82599-specific
		  * 10  SFP_1g_cu_CORE1 - 82599-specific
		  * 11  SFP_1g_sx_CORE0 - 82599-specific
		  * 12  SFP_1g_sx_CORE1 - 82599-specific
		  */
		if (hw->mac.type == ixgbe_mac_82598EB) {
			if (cable_tech & IXGBE_SFF_DA_PASSIVE_CABLE)
				hw->phy.sfp_type = ixgbe_sfp_type_da_cu;
			else if (comp_codes_10g & IXGBE_SFF_10GBASESR_CAPABLE)
				hw->phy.sfp_type = ixgbe_sfp_type_sr;
			else if (comp_codes_10g & IXGBE_SFF_10GBASELR_CAPABLE)
				hw->phy.sfp_type = ixgbe_sfp_type_lr;
			else if (comp_codes_10g & IXGBE_SFF_DA_BAD_HP_CABLE)
				hw->phy.sfp_type = ixgbe_sfp_type_da_cu;
			else
				hw->phy.sfp_type = ixgbe_sfp_type_unknown;
		} else {
			if (cable_tech & IXGBE_SFF_DA_PASSIVE_CABLE) {
				if (hw->bus.lan_id == 0)
					hw->phy.sfp_type =
						     ixgbe_sfp_type_da_cu_core0;
				else
					hw->phy.sfp_type =
						     ixgbe_sfp_type_da_cu_core1;
			} else if (cable_tech & IXGBE_SFF_DA_ACTIVE_CABLE) {
				hw->phy.ops.read_i2c_eeprom(
						hw, IXGBE_SFF_CABLE_SPEC_COMP,
						&cable_spec);
				if (cable_spec &
				    IXGBE_SFF_DA_SPEC_ACTIVE_LIMITING) {
					if (hw->bus.lan_id == 0)
						hw->phy.sfp_type =
						ixgbe_sfp_type_da_act_lmt_core0;
					else
						hw->phy.sfp_type =
						ixgbe_sfp_type_da_act_lmt_core1;
				} else {
					hw->phy.sfp_type =
							ixgbe_sfp_type_unknown;
				}
			} else if (comp_codes_10g &
				   (IXGBE_SFF_10GBASESR_CAPABLE |
				    IXGBE_SFF_10GBASELR_CAPABLE)) {
				if (hw->bus.lan_id == 0)
					hw->phy.sfp_type =
						      ixgbe_sfp_type_srlr_core0;
				else
					hw->phy.sfp_type =
						      ixgbe_sfp_type_srlr_core1;
			} else if (comp_codes_1g & IXGBE_SFF_1GBASET_CAPABLE) {
				if (hw->bus.lan_id == 0)
					hw->phy.sfp_type =
						ixgbe_sfp_type_1g_cu_core0;
				else
					hw->phy.sfp_type =
						ixgbe_sfp_type_1g_cu_core1;
			} else if (comp_codes_1g & IXGBE_SFF_1GBASESX_CAPABLE) {
				if (hw->bus.lan_id == 0)
					hw->phy.sfp_type =
						ixgbe_sfp_type_1g_sx_core0;
				else
					hw->phy.sfp_type =
						ixgbe_sfp_type_1g_sx_core1;
			} else if (comp_codes_1g & IXGBE_SFF_1GBASELX_CAPABLE) {
				if (hw->bus.lan_id == 0)
					hw->phy.sfp_type =
						ixgbe_sfp_type_1g_lx_core0;
				else
					hw->phy.sfp_type =
						ixgbe_sfp_type_1g_lx_core1;
			} else {
				hw->phy.sfp_type = ixgbe_sfp_type_unknown;
			}
		}

		if (hw->phy.sfp_type != stored_sfp_type)
			hw->phy.sfp_setup_needed = TRUE;

		/* Determine if the SFP+ PHY is dual speed or not. */
		hw->phy.multispeed_fiber = FALSE;
		if (((comp_codes_1g & IXGBE_SFF_1GBASESX_CAPABLE) &&
		   (comp_codes_10g & IXGBE_SFF_10GBASESR_CAPABLE)) ||
		   ((comp_codes_1g & IXGBE_SFF_1GBASELX_CAPABLE) &&
		   (comp_codes_10g & IXGBE_SFF_10GBASELR_CAPABLE)))
			hw->phy.multispeed_fiber = TRUE;

		/* Determine PHY vendor */
		if (hw->phy.type != ixgbe_phy_nl) {
			hw->phy.id = identifier;
			status = hw->phy.ops.read_i2c_eeprom(hw,
						    IXGBE_SFF_VENDOR_OUI_BYTE0,
						    &oui_bytes[0]);

			if (status != IXGBE_SUCCESS)
				goto err_read_i2c_eeprom;

			status = hw->phy.ops.read_i2c_eeprom(hw,
						    IXGBE_SFF_VENDOR_OUI_BYTE1,
						    &oui_bytes[1]);

			if (status != IXGBE_SUCCESS)
				goto err_read_i2c_eeprom;

			status = hw->phy.ops.read_i2c_eeprom(hw,
						    IXGBE_SFF_VENDOR_OUI_BYTE2,
						    &oui_bytes[2]);

			if (status != IXGBE_SUCCESS)
				goto err_read_i2c_eeprom;

			vendor_oui =
			  ((oui_bytes[0] << IXGBE_SFF_VENDOR_OUI_BYTE0_SHIFT) |
			   (oui_bytes[1] << IXGBE_SFF_VENDOR_OUI_BYTE1_SHIFT) |
			   (oui_bytes[2] << IXGBE_SFF_VENDOR_OUI_BYTE2_SHIFT));

			switch (vendor_oui) {
			case IXGBE_SFF_VENDOR_OUI_TYCO:
				if (cable_tech & IXGBE_SFF_DA_PASSIVE_CABLE)
					hw->phy.type =
						    ixgbe_phy_sfp_passive_tyco;
				break;
			case IXGBE_SFF_VENDOR_OUI_FTL:
				if (cable_tech & IXGBE_SFF_DA_ACTIVE_CABLE)
					hw->phy.type = ixgbe_phy_sfp_ftl_active;
				else
					hw->phy.type = ixgbe_phy_sfp_ftl;
				break;
			case IXGBE_SFF_VENDOR_OUI_AVAGO:
				hw->phy.type = ixgbe_phy_sfp_avago;
				break;
			case IXGBE_SFF_VENDOR_OUI_INTEL:
				hw->phy.type = ixgbe_phy_sfp_intel;
				break;
			default:
				hw->phy.type = ixgbe_phy_sfp_unknown;
				break;
			}
		}

		/* Allow any DA cable vendor */
		if (cable_tech & (IXGBE_SFF_DA_PASSIVE_CABLE |
			IXGBE_SFF_DA_ACTIVE_CABLE)) {
			if (cable_tech & IXGBE_SFF_DA_PASSIVE_CABLE)
				hw->phy.type = ixgbe_phy_sfp_passive_unknown;
			else if (cable_tech & IXGBE_SFF_DA_ACTIVE_CABLE)
				hw->phy.type = ixgbe_phy_sfp_active_unknown;
			status = IXGBE_SUCCESS;
			goto out;
		}

		/* Verify supported 1G SFP modules */
		if (comp_codes_10g == 0 &&
		    !(hw->phy.sfp_type == ixgbe_sfp_type_1g_cu_core1 ||
		      hw->phy.sfp_type == ixgbe_sfp_type_1g_cu_core0 ||
		      hw->phy.sfp_type == ixgbe_sfp_type_1g_lx_core0 ||
		      hw->phy.sfp_type == ixgbe_sfp_type_1g_lx_core1 ||
		      hw->phy.sfp_type == ixgbe_sfp_type_1g_sx_core0 ||
		      hw->phy.sfp_type == ixgbe_sfp_type_1g_sx_core1)) {
			hw->phy.type = ixgbe_phy_sfp_unsupported;
			status = IXGBE_ERR_SFP_NOT_SUPPORTED;
			goto out;
		}

		/*
		 * We do not limit the definition of "supported SPF modules"
		 * to the vendor/make whitelist.
		 */
		status = IXGBE_SUCCESS;
	}

out:
	return status;

err_read_i2c_eeprom:
	hw->phy.sfp_type = ixgbe_sfp_type_not_present;
	if (hw->phy.type != ixgbe_phy_nl) {
		hw->phy.id = 0;
		hw->phy.type = ixgbe_phy_unknown;
	}
	return IXGBE_ERR_SFP_NOT_PRESENT;
}

/**
 *  ixgbe_get_supported_phy_sfp_layer_generic - Returns physical layer type
 *  @@hw: pointer to hardware structure
 *
 *  Determines physical layer capabilities of the current SFP.
 */
int32_t ixgbe_get_supported_phy_sfp_layer_generic(struct ixgbe_hw *hw)
{
	uint32_t physical_layer = IXGBE_PHYSICAL_LAYER_UNKNOWN;
	uint8_t comp_codes_10g = 0;
	uint8_t comp_codes_1g = 0;

	DEBUGFUNC("ixgbe_get_supported_phy_sfp_layer_generic");

	hw->phy.ops.identify_sfp(hw);
	if (hw->phy.sfp_type == ixgbe_sfp_type_not_present)
		return physical_layer;

	switch (hw->phy.type) {
	case ixgbe_phy_sfp_passive_tyco:
	case ixgbe_phy_sfp_passive_unknown:
	case ixgbe_phy_qsfp_passive_unknown:
		physical_layer = IXGBE_PHYSICAL_LAYER_SFP_PLUS_CU;
		break;
	case ixgbe_phy_sfp_ftl_active:
	case ixgbe_phy_sfp_active_unknown:
	case ixgbe_phy_qsfp_active_unknown:
		physical_layer = IXGBE_PHYSICAL_LAYER_SFP_ACTIVE_DA;
		break;
	case ixgbe_phy_sfp_avago:
	case ixgbe_phy_sfp_ftl:
	case ixgbe_phy_sfp_intel:
	case ixgbe_phy_sfp_unknown:
		hw->phy.ops.read_i2c_eeprom(hw,
		      IXGBE_SFF_1GBE_COMP_CODES, &comp_codes_1g);
		hw->phy.ops.read_i2c_eeprom(hw,
		      IXGBE_SFF_10GBE_COMP_CODES, &comp_codes_10g);
		if (comp_codes_10g & IXGBE_SFF_10GBASESR_CAPABLE)
			physical_layer = IXGBE_PHYSICAL_LAYER_10GBASE_SR;
		else if (comp_codes_10g & IXGBE_SFF_10GBASELR_CAPABLE)
			physical_layer = IXGBE_PHYSICAL_LAYER_10GBASE_LR;
		else if (comp_codes_10g &
		    (IXGBE_SFF_DA_PASSIVE_CABLE | IXGBE_SFF_DA_BAD_HP_CABLE))
			physical_layer = IXGBE_PHYSICAL_LAYER_SFP_PLUS_CU;
		else if (comp_codes_10g & IXGBE_SFF_DA_ACTIVE_CABLE)
			physical_layer = IXGBE_PHYSICAL_LAYER_SFP_ACTIVE_DA;
		else if (comp_codes_1g & IXGBE_SFF_1GBASET_CAPABLE)
			physical_layer = IXGBE_PHYSICAL_LAYER_1000BASE_T;
		else if (comp_codes_1g & IXGBE_SFF_1GBASESX_CAPABLE)
			physical_layer = IXGBE_PHYSICAL_LAYER_1000BASE_SX;
		else if (comp_codes_1g & IXGBE_SFF_1GBASELX_CAPABLE)
			physical_layer = IXGBE_PHYSICAL_LAYER_1000BASE_LX;
		break;
	case ixgbe_phy_qsfp_intel:
	case ixgbe_phy_qsfp_unknown:
		hw->phy.ops.read_i2c_eeprom(hw,
		      IXGBE_SFF_QSFP_10GBE_COMP, &comp_codes_10g);
		if (comp_codes_10g & IXGBE_SFF_10GBASESR_CAPABLE)
			physical_layer = IXGBE_PHYSICAL_LAYER_10GBASE_SR;
		else if (comp_codes_10g & IXGBE_SFF_10GBASELR_CAPABLE)
			physical_layer = IXGBE_PHYSICAL_LAYER_10GBASE_LR;
		break;
	default:
		break;
	}

	return physical_layer;
}

/**
 *  ixgbe_identify_qsfp_module_generic - Identifies QSFP modules
 *  @@hw: pointer to hardware structure
 *
 *  Searches for and identifies the QSFP module and assigns appropriate PHY type
 **/
int32_t ixgbe_identify_qsfp_module_generic(struct ixgbe_hw *hw)
{
	int32_t status = IXGBE_ERR_PHY_ADDR_INVALID;
	uint32_t vendor_oui = 0;
	enum ixgbe_sfp_type stored_sfp_type = hw->phy.sfp_type;
	uint8_t identifier = 0;
	uint8_t comp_codes_1g = 0;
	uint8_t comp_codes_10g = 0;
	uint8_t oui_bytes[3] = {0, 0, 0};
	uint8_t connector = 0;
	uint8_t cable_length = 0;
	uint8_t device_tech = 0;
	bool active_cable = FALSE;

	DEBUGFUNC("ixgbe_identify_qsfp_module_generic");

	if (hw->mac.ops.get_media_type(hw) != ixgbe_media_type_fiber_qsfp) {
		hw->phy.sfp_type = ixgbe_sfp_type_not_present;
		status = IXGBE_ERR_SFP_NOT_PRESENT;
		goto out;
	}

	/* LAN ID is needed for I2C access */
	hw->mac.ops.set_lan_id(hw);

	status = hw->phy.ops.read_i2c_eeprom(hw, IXGBE_SFF_IDENTIFIER,
					     &identifier);

	if (status != IXGBE_SUCCESS)
		goto err_read_i2c_eeprom;

	if (identifier != IXGBE_SFF_IDENTIFIER_QSFP_PLUS) {
		hw->phy.type = ixgbe_phy_sfp_unsupported;
		status = IXGBE_ERR_SFP_NOT_SUPPORTED;
		goto out;
	}

	hw->phy.id = identifier;

	status = hw->phy.ops.read_i2c_eeprom(hw, IXGBE_SFF_QSFP_10GBE_COMP,
					     &comp_codes_10g);

	if (status != IXGBE_SUCCESS)
		goto err_read_i2c_eeprom;

	status = hw->phy.ops.read_i2c_eeprom(hw, IXGBE_SFF_QSFP_1GBE_COMP,
					     &comp_codes_1g);

	if (status != IXGBE_SUCCESS)
		goto err_read_i2c_eeprom;

	if (comp_codes_10g & IXGBE_SFF_QSFP_DA_PASSIVE_CABLE) {
		hw->phy.type = ixgbe_phy_qsfp_passive_unknown;
		if (hw->bus.lan_id == 0)
			hw->phy.sfp_type = ixgbe_sfp_type_da_cu_core0;
		else
			hw->phy.sfp_type = ixgbe_sfp_type_da_cu_core1;
	} else if (comp_codes_10g & (IXGBE_SFF_10GBASESR_CAPABLE |
				     IXGBE_SFF_10GBASELR_CAPABLE)) {
		if (hw->bus.lan_id == 0)
			hw->phy.sfp_type = ixgbe_sfp_type_srlr_core0;
		else
			hw->phy.sfp_type = ixgbe_sfp_type_srlr_core1;
	} else {
		if (comp_codes_10g & IXGBE_SFF_QSFP_DA_ACTIVE_CABLE)
			active_cable = TRUE;

		if (!active_cable) {
			/* check for active DA cables that pre-date
			 * SFF-8436 v3.6 */
			hw->phy.ops.read_i2c_eeprom(hw,
					IXGBE_SFF_QSFP_CONNECTOR,
					&connector);

			hw->phy.ops.read_i2c_eeprom(hw,
					IXGBE_SFF_QSFP_CABLE_LENGTH,
					&cable_length);

			hw->phy.ops.read_i2c_eeprom(hw,
					IXGBE_SFF_QSFP_DEVICE_TECH,
					&device_tech);

			if ((connector ==
				     IXGBE_SFF_QSFP_CONNECTOR_NOT_SEPARABLE) &&
			    (cable_length > 0) &&
			    ((device_tech >> 4) ==
				     IXGBE_SFF_QSFP_TRANSMITER_850NM_VCSEL))
				active_cable = TRUE;
		}

		if (active_cable) {
			hw->phy.type = ixgbe_phy_qsfp_active_unknown;
			if (hw->bus.lan_id == 0)
				hw->phy.sfp_type =
						ixgbe_sfp_type_da_act_lmt_core0;
			else
				hw->phy.sfp_type =
						ixgbe_sfp_type_da_act_lmt_core1;
		} else {
			/* unsupported module type */
			hw->phy.type = ixgbe_phy_sfp_unsupported;
			status = IXGBE_ERR_SFP_NOT_SUPPORTED;
			goto out;
		}
	}

	if (hw->phy.sfp_type != stored_sfp_type)
		hw->phy.sfp_setup_needed = TRUE;

	/* Determine if the QSFP+ PHY is dual speed or not. */
	hw->phy.multispeed_fiber = FALSE;
	if (((comp_codes_1g & IXGBE_SFF_1GBASESX_CAPABLE) &&
	   (comp_codes_10g & IXGBE_SFF_10GBASESR_CAPABLE)) ||
	   ((comp_codes_1g & IXGBE_SFF_1GBASELX_CAPABLE) &&
	   (comp_codes_10g & IXGBE_SFF_10GBASELR_CAPABLE)))
		hw->phy.multispeed_fiber = TRUE;

	/* Determine PHY vendor for optical modules */
	if (comp_codes_10g & (IXGBE_SFF_10GBASESR_CAPABLE |
			      IXGBE_SFF_10GBASELR_CAPABLE))  {
		status = hw->phy.ops.read_i2c_eeprom(hw,
					    IXGBE_SFF_QSFP_VENDOR_OUI_BYTE0,
					    &oui_bytes[0]);

		if (status != IXGBE_SUCCESS)
			goto err_read_i2c_eeprom;

		status = hw->phy.ops.read_i2c_eeprom(hw,
					    IXGBE_SFF_QSFP_VENDOR_OUI_BYTE1,
					    &oui_bytes[1]);

		if (status != IXGBE_SUCCESS)
			goto err_read_i2c_eeprom;

		status = hw->phy.ops.read_i2c_eeprom(hw,
					    IXGBE_SFF_QSFP_VENDOR_OUI_BYTE2,
					    &oui_bytes[2]);

		if (status != IXGBE_SUCCESS)
			goto err_read_i2c_eeprom;

		vendor_oui =
		  ((oui_bytes[0] << IXGBE_SFF_VENDOR_OUI_BYTE0_SHIFT) |
		   (oui_bytes[1] << IXGBE_SFF_VENDOR_OUI_BYTE1_SHIFT) |
		   (oui_bytes[2] << IXGBE_SFF_VENDOR_OUI_BYTE2_SHIFT));

		if (vendor_oui == IXGBE_SFF_VENDOR_OUI_INTEL)
			hw->phy.type = ixgbe_phy_qsfp_intel;
		else
			hw->phy.type = ixgbe_phy_qsfp_unknown;

		/*
		 * We do not limit the definition of "supported SPF modules"
		 * to the vendor/make whitelist.
		 */
		status = IXGBE_SUCCESS;
	}

out:
	return status;

err_read_i2c_eeprom:
	hw->phy.sfp_type = ixgbe_sfp_type_not_present;
	hw->phy.id = 0;
	hw->phy.type = ixgbe_phy_unknown;

	return IXGBE_ERR_SFP_NOT_PRESENT;
}


/**
 *  ixgbe_get_sfp_init_sequence_offsets - Provides offset of PHY init sequence
 *  @@hw: pointer to hardware structure
 *  @@list_offset: offset to the SFP ID list
 *  @@data_offset: offset to the SFP data block
 *
 *  Checks the MAC's EEPROM to see if it supports a given SFP+ module type, if
 *  so it returns the offsets to the phy init sequence block.
 **/
int32_t ixgbe_get_sfp_init_sequence_offsets(struct ixgbe_hw *hw,
					    uint16_t *list_offset,
					    uint16_t *data_offset)
{
	uint16_t sfp_id;
	uint16_t sfp_type = hw->phy.sfp_type;

	DEBUGFUNC("ixgbe_get_sfp_init_sequence_offsets");

	if (hw->phy.sfp_type == ixgbe_sfp_type_unknown)
		return IXGBE_ERR_SFP_NOT_SUPPORTED;

	if (hw->phy.sfp_type == ixgbe_sfp_type_not_present)
		return IXGBE_ERR_SFP_NOT_PRESENT;

	if ((hw->device_id == IXGBE_DEV_ID_82598_SR_DUAL_PORT_EM) &&
	    (hw->phy.sfp_type == ixgbe_sfp_type_da_cu))
		return IXGBE_ERR_SFP_NOT_SUPPORTED;

	/*
	 * Limiting active cables and 1G Phys must be initialized as
	 * SR modules
	 */
	if (sfp_type == ixgbe_sfp_type_da_act_lmt_core0 ||
	    sfp_type == ixgbe_sfp_type_1g_lx_core0 ||
	    sfp_type == ixgbe_sfp_type_1g_cu_core0 ||
	    sfp_type == ixgbe_sfp_type_1g_sx_core0)
		sfp_type = ixgbe_sfp_type_srlr_core0;
	else if (sfp_type == ixgbe_sfp_type_da_act_lmt_core1 ||
		 sfp_type == ixgbe_sfp_type_1g_lx_core1 ||
		 sfp_type == ixgbe_sfp_type_1g_cu_core1 ||
		 sfp_type == ixgbe_sfp_type_1g_sx_core1)
		sfp_type = ixgbe_sfp_type_srlr_core1;

	/* Read offset to PHY init contents */
	if (hw->eeprom.ops.read(hw, IXGBE_PHY_INIT_OFFSET_NL, list_offset)) {
		ERROR_REPORT2(IXGBE_ERROR_INVALID_STATE,
			      "eeprom read at offset %d failed",
			      IXGBE_PHY_INIT_OFFSET_NL);
		return IXGBE_ERR_SFP_NO_INIT_SEQ_PRESENT;
	}

	if ((!*list_offset) || (*list_offset == 0xFFFF))
		return IXGBE_ERR_SFP_NO_INIT_SEQ_PRESENT;

	/* Shift offset to first ID word */
	(*list_offset)++;

	/*
	 * Find the matching SFP ID in the EEPROM
	 * and program the init sequence
	 */
	if (hw->eeprom.ops.read(hw, *list_offset, &sfp_id))
		goto err_phy;

	while (sfp_id != IXGBE_PHY_INIT_END_NL) {
		if (sfp_id == sfp_type) {
			(*list_offset)++;
			if (hw->eeprom.ops.read(hw, *list_offset, data_offset))
				goto err_phy;
			if ((!*data_offset) || (*data_offset == 0xFFFF)) {
				DEBUGOUT("SFP+ module not supported\n");
				return IXGBE_ERR_SFP_NOT_SUPPORTED;
			} else {
				break;
			}
		} else {
			(*list_offset) += 2;
			if (hw->eeprom.ops.read(hw, *list_offset, &sfp_id))
				goto err_phy;
		}
	}

	/*
	 * the 82598EB SFP+ card offically supports only direct attached cables
	 * but works fine with optical SFP+ modules as well. Even though the
	 * EEPROM has no matching ID for them. So just accept the module.
	 */
	if (sfp_id == IXGBE_PHY_INIT_END_NL &&
	    hw->mac.type == ixgbe_mac_82598EB) {
		/* refetch offset for the first phy entry */
		hw->eeprom.ops.read(hw, IXGBE_PHY_INIT_OFFSET_NL, list_offset);
		(*list_offset) += 2;
		hw->eeprom.ops.read(hw, *list_offset, data_offset);
	} else if (sfp_id == IXGBE_PHY_INIT_END_NL) {
		DEBUGOUT("No matching SFP+ module found\n");
		return IXGBE_ERR_SFP_NOT_SUPPORTED;
	}

	return IXGBE_SUCCESS;

err_phy:
	ERROR_REPORT2(IXGBE_ERROR_INVALID_STATE,
		      "eeprom read at offset %d failed", *list_offset);
	return IXGBE_ERR_PHY;
}

/**
 *  ixgbe_read_i2c_eeprom_generic - Reads 8 bit EEPROM word over I2C interface
 *  @@hw: pointer to hardware structure
 *  @@byte_offset: EEPROM byte offset to read
 *  @@eeprom_data: value read
 *
 *  Performs byte read operation to SFP module's EEPROM over I2C interface.
 **/
int32_t ixgbe_read_i2c_eeprom_generic(struct ixgbe_hw *hw, uint8_t byte_offset,
				      uint8_t *eeprom_data)
{
	DEBUGFUNC("ixgbe_read_i2c_eeprom_generic");

	return hw->phy.ops.read_i2c_byte(hw, byte_offset,
					 IXGBE_I2C_EEPROM_DEV_ADDR,
					 eeprom_data);
}

/**
 *  ixgbe_write_i2c_eeprom_generic - Writes 8 bit EEPROM word over I2C interface
 *  @@hw: pointer to hardware structure
 *  @@byte_offset: EEPROM byte offset to write
 *  @@eeprom_data: value to write
 *
 *  Performs byte write operation to SFP module's EEPROM over I2C interface.
 **/
int32_t ixgbe_write_i2c_eeprom_generic(struct ixgbe_hw *hw, uint8_t byte_offset,
				       uint8_t eeprom_data)
{
	DEBUGFUNC("ixgbe_write_i2c_eeprom_generic");

	return hw->phy.ops.write_i2c_byte(hw, byte_offset,
					  IXGBE_I2C_EEPROM_DEV_ADDR,
					  eeprom_data);
}

/**
 * ixgbe_is_sfp_probe - Returns TRUE if SFP is being detected
 * @@hw: pointer to hardware structure
 * @@offset: eeprom offset to be read
 * @@addr: I2C address to be read
 */
bool ixgbe_is_sfp_probe(struct ixgbe_hw *hw, uint8_t offset, uint8_t addr)
{
	if (addr == IXGBE_I2C_EEPROM_DEV_ADDR &&
	    offset == IXGBE_SFF_IDENTIFIER &&
	    hw->phy.sfp_type == ixgbe_sfp_type_not_present)
		return TRUE;
	return FALSE;
}

/**
 *  ixgbe_read_i2c_byte_generic_int - Reads 8 bit word over I2C
 *  @@hw: pointer to hardware structure
 *  @@byte_offset: byte offset to read
 *  @@data: value read
 *
 *  Performs byte read operation to SFP module's EEPROM over I2C interface at
 *  a specified device address.
 **/
int32_t ixgbe_read_i2c_byte_generic_int(struct ixgbe_hw *hw, uint8_t byte_offset,
					uint8_t dev_addr, uint8_t *data, bool lock)
{
	int32_t status;
	uint32_t max_retry = 10;
	uint32_t retry = 0;
	uint32_t swfw_mask = hw->phy.phy_semaphore_mask;
	bool nack = 1;
	*data = 0;

	DEBUGFUNC("ixgbe_read_i2c_byte_generic_int");

	if (hw->mac.type >= ixgbe_mac_X550)
		max_retry = 3;
	if (ixgbe_is_sfp_probe(hw, byte_offset, dev_addr))
		max_retry = IXGBE_SFP_DETECT_RETRIES;

	do {
		if (lock && hw->mac.ops.acquire_swfw_sync(hw, swfw_mask))
			return IXGBE_ERR_SWFW_SYNC;

		ixgbe_i2c_start(hw);

		/* Device Address and write indication */
		status = ixgbe_clock_out_i2c_byte(hw, dev_addr);
		if (status != IXGBE_SUCCESS)
			goto fail;

		status = ixgbe_get_i2c_ack(hw);
		if (status != IXGBE_SUCCESS)
			goto fail;

		status = ixgbe_clock_out_i2c_byte(hw, byte_offset);
		if (status != IXGBE_SUCCESS)
			goto fail;

		status = ixgbe_get_i2c_ack(hw);
		if (status != IXGBE_SUCCESS)
			goto fail;

		ixgbe_i2c_start(hw);

		/* Device Address and read indication */
		status = ixgbe_clock_out_i2c_byte(hw, (dev_addr | 0x1));
		if (status != IXGBE_SUCCESS)
			goto fail;

		status = ixgbe_get_i2c_ack(hw);
		if (status != IXGBE_SUCCESS)
			goto fail;

		status = ixgbe_clock_in_i2c_byte(hw, data);
		if (status != IXGBE_SUCCESS)
			goto fail;

		status = ixgbe_clock_out_i2c_bit(hw, nack);
		if (status != IXGBE_SUCCESS)
			goto fail;

		ixgbe_i2c_stop(hw);
		if (lock)
			hw->mac.ops.release_swfw_sync(hw, swfw_mask);
		return IXGBE_SUCCESS;

fail:
		ixgbe_i2c_bus_clear(hw);
		if (lock) {
			hw->mac.ops.release_swfw_sync(hw, swfw_mask);
			msec_delay(100);
		}
		retry++;
		if (retry < max_retry)
			DEBUGOUT("I2C byte read error - Retrying.\n");
		else
			DEBUGOUT("I2C byte read error.\n");

	} while (retry < max_retry);

	return status;
}

/**
 *  ixgbe_read_i2c_byte_generic - Reads 8 bit word over I2C
 *  @@hw: pointer to hardware structure
 *  @@byte_offset: byte offset to read
 *  @@data: value read
 *
 *  Performs byte read operation to SFP module's EEPROM over I2C interface at
 *  a specified device address.
 **/
int32_t ixgbe_read_i2c_byte_generic(struct ixgbe_hw *hw, uint8_t byte_offset,
				    uint8_t dev_addr, uint8_t *data)
{
	return ixgbe_read_i2c_byte_generic_int(hw, byte_offset, dev_addr,
					       data, TRUE);
}

/**
 *  ixgbe_read_i2c_byte_generic_unlocked - Reads 8 bit word over I2C
 *  @@hw: pointer to hardware structure
 *  @@byte_offset: byte offset to read
 *  @@data: value read
 *
 *  Performs byte read operation to SFP module's EEPROM over I2C interface at
 *  a specified device address.
 **/
int32_t ixgbe_read_i2c_byte_generic_unlocked(struct ixgbe_hw *hw, uint8_t byte_offset,
					     uint8_t dev_addr, uint8_t *data)
{
	return ixgbe_read_i2c_byte_generic_int(hw, byte_offset, dev_addr,
					       data, FALSE);
}

/**
 *  ixgbe_write_i2c_byte_generic_int - Writes 8 bit word over I2C
 *  @@hw: pointer to hardware structure
 *  @@byte_offset: byte offset to write
 *  @@data: value to write
 *  @@lock: TRUE if to take and release semaphore
 *
 *  Performs byte write operation to SFP module's EEPROM over I2C interface at
 *  a specified device address.
 **/
int32_t ixgbe_write_i2c_byte_generic_int(struct ixgbe_hw *hw, uint8_t byte_offset,
					 uint8_t dev_addr, uint8_t data, bool lock)
{
	int32_t status;
	uint32_t max_retry = 1;
	uint32_t retry = 0;
	uint32_t swfw_mask = hw->phy.phy_semaphore_mask;

	DEBUGFUNC("ixgbe_write_i2c_byte_generic_int");

	if (lock && hw->mac.ops.acquire_swfw_sync(hw, swfw_mask) !=
	    IXGBE_SUCCESS)
		return IXGBE_ERR_SWFW_SYNC;

	do {
		ixgbe_i2c_start(hw);

		status = ixgbe_clock_out_i2c_byte(hw, dev_addr);
		if (status != IXGBE_SUCCESS)
			goto fail;

		status = ixgbe_get_i2c_ack(hw);
		if (status != IXGBE_SUCCESS)
			goto fail;

		status = ixgbe_clock_out_i2c_byte(hw, byte_offset);
		if (status != IXGBE_SUCCESS)
			goto fail;

		status = ixgbe_get_i2c_ack(hw);
		if (status != IXGBE_SUCCESS)
			goto fail;

		status = ixgbe_clock_out_i2c_byte(hw, data);
		if (status != IXGBE_SUCCESS)
			goto fail;

		status = ixgbe_get_i2c_ack(hw);
		if (status != IXGBE_SUCCESS)
			goto fail;

		ixgbe_i2c_stop(hw);
		if (lock)
			hw->mac.ops.release_swfw_sync(hw, swfw_mask);
		return IXGBE_SUCCESS;

fail:
		ixgbe_i2c_bus_clear(hw);
		retry++;
		if (retry < max_retry)
			DEBUGOUT("I2C byte write error - Retrying.\n");
		else
			DEBUGOUT("I2C byte write error.\n");
	} while (retry < max_retry);

	if (lock)
		hw->mac.ops.release_swfw_sync(hw, swfw_mask);

	return status;
}

/**
 *  ixgbe_write_i2c_byte_generic - Writes 8 bit word over I2C
 *  @@hw: pointer to hardware structure
 *  @@byte_offset: byte offset to write
 *  @@data: value to write
 *
 *  Performs byte write operation to SFP module's EEPROM over I2C interface at
 *  a specified device address.
 **/
int32_t ixgbe_write_i2c_byte_generic(struct ixgbe_hw *hw, uint8_t byte_offset,
				     uint8_t dev_addr, uint8_t data)
{
	return ixgbe_write_i2c_byte_generic_int(hw, byte_offset, dev_addr,
						data, TRUE);
}

/**
 *  ixgbe_write_i2c_byte_generic_unlocked - Writes 8 bit word over I2C
 *  @@hw: pointer to hardware structure
 *  @@byte_offset: byte offset to write
 *  @@data: value to write
 *
 *  Performs byte write operation to SFP module's EEPROM over I2C interface at
 *  a specified device address.
 **/
int32_t ixgbe_write_i2c_byte_generic_unlocked(struct ixgbe_hw *hw, uint8_t byte_offset,
					      uint8_t dev_addr, uint8_t data)
{
	return ixgbe_write_i2c_byte_generic_int(hw, byte_offset, dev_addr,
						data, FALSE);
}

/**
 *  ixgbe_i2c_start - Sets I2C start condition
 *  @@hw: pointer to hardware structure
 *
 *  Sets I2C start condition (High -> Low on SDA while SCL is High)
 *  Set bit-bang mode on X550 hardware.
 **/
void ixgbe_i2c_start(struct ixgbe_hw *hw)
{
	uint32_t i2cctl;

	DEBUGFUNC("ixgbe_i2c_start");

	if (hw->mac.type == ixgbe_mac_X550 ||
	    hw->mac.type == ixgbe_mac_X550EM_x) {
		i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL_X550);
		i2cctl |= IXGBE_I2C_BB_EN_X550;
	} else
		i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL);

	/* Start condition must begin with data and clock high */
	ixgbe_set_i2c_data(hw, &i2cctl, 1);
	ixgbe_raise_i2c_clk(hw, &i2cctl);

	/* Setup time for start condition (4.7us) */
	usec_delay(IXGBE_I2C_T_SU_STA);

	ixgbe_set_i2c_data(hw, &i2cctl, 0);

	/* Hold time for start condition (4us) */
	usec_delay(IXGBE_I2C_T_HD_STA);

	ixgbe_lower_i2c_clk(hw, &i2cctl);

	/* Minimum low period of clock is 4.7 us */
	usec_delay(IXGBE_I2C_T_LOW);

}

/**
 *  ixgbe_i2c_stop - Sets I2C stop condition
 *  @@hw: pointer to hardware structure
 *
 *  Sets I2C stop condition (Low -> High on SDA while SCL is High)
 *  Disables bit-bang mode and negates data output enable on X550
 *  hardware.
 **/
void ixgbe_i2c_stop(struct ixgbe_hw *hw)
{
	uint32_t i2cctl;

	DEBUGFUNC("ixgbe_i2c_stop");

	if (hw->mac.type == ixgbe_mac_X550 ||
	    hw->mac.type == ixgbe_mac_X550EM_x)
		i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL_X550);
	else
		i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL);

	/* Stop condition must begin with data low and clock high */
	ixgbe_set_i2c_data(hw, &i2cctl, 0);
	ixgbe_raise_i2c_clk(hw, &i2cctl);

	/* Setup time for stop condition (4us) */
	usec_delay(IXGBE_I2C_T_SU_STO);

	ixgbe_set_i2c_data(hw, &i2cctl, 1);

	/* bus free time between stop and start (4.7us)*/
	usec_delay(IXGBE_I2C_T_BUF);

	if (hw->mac.type == ixgbe_mac_X550 ||
	    hw->mac.type == ixgbe_mac_X550EM_x) {
		i2cctl &= ~IXGBE_I2C_BB_EN_X550;
		i2cctl |= IXGBE_I2C_DATA_OE_N_EN_X550 |
		    IXGBE_I2C_CLK_OE_N_EN_X550;
		IXGBE_WRITE_REG(hw, IXGBE_I2CCTL_X550, i2cctl);
		IXGBE_WRITE_FLUSH(hw);
	}
}

/**
 *  ixgbe_clock_in_i2c_byte - Clocks in one byte via I2C
 *  @@hw: pointer to hardware structure
 *  @@data: data byte to clock in
 *
 *  Clocks in one byte data via I2C data/clock
 **/
int32_t ixgbe_clock_in_i2c_byte(struct ixgbe_hw *hw, uint8_t *data)
{
	int32_t i;
	bool bit = 0;

	DEBUGFUNC("ixgbe_clock_in_i2c_byte");

	*data = 0;
	for (i = 7; i >= 0; i--) {
		ixgbe_clock_in_i2c_bit(hw, &bit);
		*data |= bit << i;
	}

	return IXGBE_SUCCESS;
}

/**
 *  ixgbe_clock_out_i2c_byte - Clocks out one byte via I2C
 *  @@hw: pointer to hardware structure
 *  @@data: data byte clocked out
 *
 *  Clocks out one byte data via I2C data/clock
 **/
int32_t ixgbe_clock_out_i2c_byte(struct ixgbe_hw *hw, uint8_t data)
{
	int32_t status = IXGBE_SUCCESS;
	int32_t i;
	uint32_t i2cctl;
	bool bit;

	DEBUGFUNC("ixgbe_clock_out_i2c_byte");

	for (i = 7; i >= 0; i--) {
		bit = (data >> i) & 0x1;
		status = ixgbe_clock_out_i2c_bit(hw, bit);

		if (status != IXGBE_SUCCESS)
			break;
	}

	/* Release SDA line (set high) */
	if (hw->mac.type == ixgbe_mac_X550 ||
	    hw->mac.type == ixgbe_mac_X550EM_x) {
		i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL_X550);
		i2cctl |= IXGBE_I2C_DATA_OUT_X550 | IXGBE_I2C_DATA_OE_N_EN_X550;
		IXGBE_WRITE_REG(hw, IXGBE_I2CCTL_X550, i2cctl);
	} else {
		i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL);
		i2cctl |= IXGBE_I2C_DATA_OUT;
		IXGBE_WRITE_REG(hw, IXGBE_I2CCTL, i2cctl);
	}
	IXGBE_WRITE_FLUSH(hw);

	return status;
}

/**
 *  ixgbe_get_i2c_ack - Polls for I2C ACK
 *  @@hw: pointer to hardware structure
 *
 *  Clocks in/out one bit via I2C data/clock
 **/
int32_t ixgbe_get_i2c_ack(struct ixgbe_hw *hw)
{
	int32_t status = IXGBE_SUCCESS;
	uint32_t i = 0;
	uint32_t i2cctl, i2cctl_reg;
	uint32_t timeout = 10;
	bool ack = 1;

	DEBUGFUNC("ixgbe_get_i2c_ack");

	if (hw->mac.type == ixgbe_mac_X550 ||
	    hw->mac.type == ixgbe_mac_X550EM_x) {
		i2cctl_reg = IXGBE_I2CCTL_X550;
		i2cctl = IXGBE_READ_REG(hw, i2cctl_reg);
		i2cctl |= IXGBE_I2C_DATA_OUT_X550 | IXGBE_I2C_DATA_OE_N_EN_X550;
		IXGBE_WRITE_REG(hw, i2cctl_reg, i2cctl);
		IXGBE_WRITE_FLUSH(hw);
	} else {
		i2cctl_reg = IXGBE_I2CCTL;
		i2cctl = IXGBE_READ_REG(hw, i2cctl_reg);
	}
	ixgbe_raise_i2c_clk(hw, &i2cctl);

	/* Minimum high period of clock is 4us */
	usec_delay(IXGBE_I2C_T_HIGH);

	/* Poll for ACK.  Note that ACK in I2C spec is
	 * transition from 1 to 0 */
	for (i = 0; i < timeout; i++) {
		i2cctl = IXGBE_READ_REG(hw, i2cctl_reg);
		ack = ixgbe_get_i2c_data(hw, &i2cctl);

		usec_delay(1);
		if (!ack)
			break;
	}

	if (ack) {
		DEBUGOUT("I2C ack was not received.\n");
		status = IXGBE_ERR_I2C;
	}

	ixgbe_lower_i2c_clk(hw, &i2cctl);

	/* Minimum low period of clock is 4.7 us */
	usec_delay(IXGBE_I2C_T_LOW);

	return status;
}

/**
 *  ixgbe_clock_in_i2c_bit - Clocks in one bit via I2C data/clock
 *  @@hw: pointer to hardware structure
 *  @@data: read data value
 *
 *  Clocks in one bit via I2C data/clock
 **/
int32_t ixgbe_clock_in_i2c_bit(struct ixgbe_hw *hw, bool *data)
{
	uint32_t i2cctl, i2cctl_reg;

	DEBUGFUNC("ixgbe_clock_in_i2c_bit");

	if (hw->mac.type == ixgbe_mac_X550 ||
	    hw->mac.type == ixgbe_mac_X550EM_x) {
		i2cctl_reg = IXGBE_I2CCTL_X550;
		i2cctl = IXGBE_READ_REG(hw, i2cctl_reg);
		i2cctl |= IXGBE_I2C_DATA_OUT_X550 | IXGBE_I2C_DATA_OE_N_EN_X550;
		IXGBE_WRITE_REG(hw, i2cctl_reg, i2cctl);
		IXGBE_WRITE_FLUSH(hw);
	} else {
		i2cctl_reg = IXGBE_I2CCTL;
		i2cctl = IXGBE_READ_REG(hw, i2cctl_reg);
	}

	ixgbe_raise_i2c_clk(hw, &i2cctl);

	/* Minimum high period of clock is 4us */
	usec_delay(IXGBE_I2C_T_HIGH);

	i2cctl = IXGBE_READ_REG(hw, i2cctl_reg);
	*data = ixgbe_get_i2c_data(hw, &i2cctl);

	ixgbe_lower_i2c_clk(hw, &i2cctl);

	/* Minimum low period of clock is 4.7 us */
	usec_delay(IXGBE_I2C_T_LOW);

	return IXGBE_SUCCESS;
}

/**
 *  ixgbe_clock_out_i2c_bit - Clocks in/out one bit via I2C data/clock
 *  @@hw: pointer to hardware structure
 *  @@data: data value to write
 *
 *  Clocks out one bit via I2C data/clock
 **/
int32_t ixgbe_clock_out_i2c_bit(struct ixgbe_hw *hw, bool data)
{
	int32_t status;
	uint32_t i2cctl;

	DEBUGFUNC("ixgbe_clock_out_i2c_bit");

	if (hw->mac.type == ixgbe_mac_X550 ||
	    hw->mac.type == ixgbe_mac_X550EM_x)
		i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL_X550);
	else
		i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL);

	status = ixgbe_set_i2c_data(hw, &i2cctl, data);
	if (status == IXGBE_SUCCESS) {
		ixgbe_raise_i2c_clk(hw, &i2cctl);

		/* Minimum high period of clock is 4us */
		usec_delay(IXGBE_I2C_T_HIGH);

		ixgbe_lower_i2c_clk(hw, &i2cctl);

		/* Minimum low period of clock is 4.7 us.
		 * This also takes care of the data hold time.
		 */
		usec_delay(IXGBE_I2C_T_LOW);
	} else {
		status = IXGBE_ERR_I2C;
		ERROR_REPORT2(IXGBE_ERROR_INVALID_STATE,
			     "I2C data was not set to %X\n", data);
	}

	return status;
}

/**
 *  ixgbe_raise_i2c_clk - Raises the I2C SCL clock
 *  @@hw: pointer to hardware structure
 *  @@i2cctl: Current value of I2CCTL register
 *
 *  Raises the I2C clock line '0'->'1'
 *  Negates the I2C clock output enable on X550 hardware.
 **/
void ixgbe_raise_i2c_clk(struct ixgbe_hw *hw, uint32_t *i2cctl)
{
	uint32_t i2cctl_clk_in, i2cctl_reg;
	uint32_t i = 0;
	uint32_t timeout = IXGBE_I2C_CLOCK_STRETCHING_TIMEOUT;

	if (hw->mac.type == ixgbe_mac_X550 ||
	    hw->mac.type == ixgbe_mac_X550EM_x) {
		i2cctl_reg = IXGBE_I2CCTL_X550;
		*i2cctl |= IXGBE_I2C_CLK_OE_N_EN_X550;
		IXGBE_WRITE_REG(hw, i2cctl_reg, *i2cctl);
		*i2cctl |= IXGBE_I2C_CLK_OUT_X550;
		i2cctl_clk_in = IXGBE_I2C_CLK_IN_X550;
	} else {
		i2cctl_reg = IXGBE_I2CCTL;
		*i2cctl |= IXGBE_I2C_CLK_OUT;
		i2cctl_clk_in = IXGBE_I2C_CLK_IN;
	}

	for (i = 0; i < timeout; i++) {
		IXGBE_WRITE_REG(hw, i2cctl_reg, *i2cctl);
		IXGBE_WRITE_FLUSH(hw);
		/* SCL rise time (1000ns) */
		usec_delay(IXGBE_I2C_T_RISE);

		if (IXGBE_READ_REG(hw, i2cctl_reg) & i2cctl_clk_in)
			break;
	}
}

/**
 *  ixgbe_lower_i2c_clk - Lowers the I2C SCL clock
 *  @@hw: pointer to hardware structure
 *  @@i2cctl: Current value of I2CCTL register
 *
 *  Lowers the I2C clock line '1'->'0'
 *  Asserts the I2C clock output enable on X550 hardware.
 **/
void ixgbe_lower_i2c_clk(struct ixgbe_hw *hw, uint32_t *i2cctl)
{
	DEBUGFUNC("ixgbe_lower_i2c_clk");

	if (hw->mac.type == ixgbe_mac_X550 ||
	    hw->mac.type == ixgbe_mac_X550EM_x) {
		*i2cctl &= ~(IXGBE_I2C_CLK_OUT_X550 |
		    IXGBE_I2C_CLK_OE_N_EN_X550);
		IXGBE_WRITE_REG(hw, IXGBE_I2CCTL_X550, *i2cctl);
	} else {
		*i2cctl &= ~IXGBE_I2C_CLK_OUT;
		IXGBE_WRITE_REG(hw, IXGBE_I2CCTL, *i2cctl);
	}
	IXGBE_WRITE_FLUSH(hw);

	/* SCL fall time (300ns) */
	usec_delay(IXGBE_I2C_T_FALL);
}

/**
 *  ixgbe_set_i2c_data - Sets the I2C data bit
 *  @@hw: pointer to hardware structure
 *  @@i2cctl: Current value of I2CCTL register
 *  @@data: I2C data value (0 or 1) to set
 *
 *  Sets the I2C data bit
 *  Asserts the I2C data output enable on X550 hardware.
 **/
int32_t ixgbe_set_i2c_data(struct ixgbe_hw *hw, uint32_t *i2cctl, bool data)
{
	uint32_t i2cctl_reg;
	int32_t status = IXGBE_SUCCESS;

	DEBUGFUNC("ixgbe_set_i2c_data");

	if (hw->mac.type == ixgbe_mac_X550 ||
	    hw->mac.type == ixgbe_mac_X550EM_x) {
		i2cctl_reg = IXGBE_I2CCTL_X550;
		if (data)
			*i2cctl |= IXGBE_I2C_DATA_OUT_X550;
		else
			*i2cctl &= ~IXGBE_I2C_DATA_OUT_X550;
		*i2cctl &= ~IXGBE_I2C_DATA_OE_N_EN_X550;
	} else {
		i2cctl_reg = IXGBE_I2CCTL;
		if (data)
			*i2cctl |= IXGBE_I2C_DATA_OUT;
		else
			*i2cctl &= ~IXGBE_I2C_DATA_OUT;
	}

	IXGBE_WRITE_REG(hw, i2cctl_reg, *i2cctl);
	IXGBE_WRITE_FLUSH(hw);

	/* Data rise/fall (1000ns/300ns) and set-up time (250ns) */
	usec_delay(IXGBE_I2C_T_RISE + IXGBE_I2C_T_FALL + IXGBE_I2C_T_SU_DATA);

	if (!data)	/* Can't verify data in this case */
		return IXGBE_SUCCESS;
	if (hw->mac.type == ixgbe_mac_X550 ||
	    hw->mac.type == ixgbe_mac_X550EM_x) {
		*i2cctl |= IXGBE_I2C_DATA_OE_N_EN_X550;
		IXGBE_WRITE_REG(hw, i2cctl_reg, *i2cctl);
		IXGBE_WRITE_FLUSH(hw);
	}

	/* Verify data was set correctly */
	*i2cctl = IXGBE_READ_REG(hw, i2cctl_reg);
	if (data != ixgbe_get_i2c_data(hw, i2cctl)) {
		status = IXGBE_ERR_I2C;
		ERROR_REPORT2(IXGBE_ERROR_INVALID_STATE,
			     "Error - I2C data was not set to %X.\n",
			     data);
	}

	return status;
}

/**
 *  ixgbe_get_i2c_data - Reads the I2C SDA data bit
 *  @@hw: pointer to hardware structure
 *  @@i2cctl: Current value of I2CCTL register
 *
 *  Returns the I2C data bit value
 *  Negates the I2C data output enable on X550 hardware.
 **/
bool ixgbe_get_i2c_data(struct ixgbe_hw *hw, uint32_t *i2cctl)
{
	uint32_t i2cctl_data_in;
	bool data;

	DEBUGFUNC("ixgbe_get_i2c_data");

	if (hw->mac.type == ixgbe_mac_X550 ||
	    hw->mac.type == ixgbe_mac_X550EM_x) {
		i2cctl_data_in = IXGBE_I2C_DATA_IN_X550;
		*i2cctl |= IXGBE_I2C_DATA_OE_N_EN_X550;
		IXGBE_WRITE_REG(hw, IXGBE_I2CCTL_X550, *i2cctl);
		IXGBE_WRITE_FLUSH(hw);
		usec_delay(IXGBE_I2C_T_FALL);
	} else
		i2cctl_data_in = IXGBE_I2C_DATA_IN;

	if (*i2cctl & i2cctl_data_in)
		data = 1;
	else
		data = 0;

	return data;
}

/**
 *  ixgbe_i2c_bus_clear - Clears the I2C bus
 *  @@hw: pointer to hardware structure
 *
 *  Clears the I2C bus by sending nine clock pulses.
 *  Used when data line is stuck low.
 **/
void ixgbe_i2c_bus_clear(struct ixgbe_hw *hw)
{
	uint32_t i2cctl;
	uint32_t i;

	DEBUGFUNC("ixgbe_i2c_bus_clear");

	ixgbe_i2c_start(hw);

	if (hw->mac.type == ixgbe_mac_X550 ||
	    hw->mac.type == ixgbe_mac_X550EM_x)
		i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL_X550);
	else
		i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL);

	ixgbe_set_i2c_data(hw, &i2cctl, 1);

	for (i = 0; i < 9; i++) {
		ixgbe_raise_i2c_clk(hw, &i2cctl);

		/* Min high period of clock is 4us */
		usec_delay(IXGBE_I2C_T_HIGH);

		ixgbe_lower_i2c_clk(hw, &i2cctl);

		/* Min low period of clock is 4.7us*/
		usec_delay(IXGBE_I2C_T_LOW);
	}

	ixgbe_i2c_start(hw);

	/* Put the i2c bus back to default state */
	ixgbe_i2c_stop(hw);
}

/**
 *  ixgbe_tn_check_overtemp - Checks if an overtemp occurred.
 *  @@hw: pointer to hardware structure
 *
 *  Checks if the LASI temp alarm status was triggered due to overtemp
 **/
int32_t ixgbe_tn_check_overtemp(struct ixgbe_hw *hw)
{
	int32_t status = IXGBE_SUCCESS;
	uint16_t phy_data = 0;

	DEBUGFUNC("ixgbe_tn_check_overtemp");

	if (hw->device_id != IXGBE_DEV_ID_82599_T3_LOM)
		goto out;

	/* Check that the LASI temp alarm status was triggered */
	hw->phy.ops.read_reg(hw, IXGBE_TN_LASI_STATUS_REG,
			     IXGBE_MDIO_PMA_PMD_DEV_TYPE, &phy_data);

	if (!(phy_data & IXGBE_TN_LASI_STATUS_TEMP_ALARM))
		goto out;

	status = IXGBE_ERR_OVERTEMP;
	ERROR_REPORT1(IXGBE_ERROR_CAUTION, "Device over temperature");
out:
	return status;
}

/**
 * ixgbe_set_copper_phy_power - Control power for copper phy
 * @@hw: pointer to hardware structure
 * @@on: TRUE for on, FALSE for off
 */
int32_t ixgbe_set_copper_phy_power(struct ixgbe_hw *hw, bool on)
{
	uint32_t status;
	uint16_t reg;

	if (!on && ixgbe_mng_present(hw))
		return 0;

	status = hw->phy.ops.read_reg(hw, IXGBE_MDIO_VENDOR_SPECIFIC_1_CONTROL,
				      IXGBE_MDIO_VENDOR_SPECIFIC_1_DEV_TYPE,
				      &reg);
	if (status)
		return status;

	if (on) {
		reg &= ~IXGBE_MDIO_PHY_SET_LOW_POWER_MODE;
	} else {
		if (ixgbe_check_reset_blocked(hw))
			return 0;
		reg |= IXGBE_MDIO_PHY_SET_LOW_POWER_MODE;
	}

	status = hw->phy.ops.write_reg(hw, IXGBE_MDIO_VENDOR_SPECIFIC_1_CONTROL,
				       IXGBE_MDIO_VENDOR_SPECIFIC_1_DEV_TYPE,
				       reg);
	return status;
}
@


1.18
log
@A firmware block check missed in previous commits
@
text
@d1 1
a1 1
/*	$OpenBSD: ixgbe_phy.c,v 1.17 2016/11/17 21:13:27 mikeb Exp $	*/
d1007 1
a1007 2
	int32_t status = IXGBE_ERR_LINK_SETUP;
	uint16_t speed_ability;
a1010 1
	*speed = 0;
d1012 2
d1015 1
a1015 13
	status = hw->phy.ops.read_reg(hw, IXGBE_MDIO_PHY_SPEED_ABILITY,
				      IXGBE_MDIO_PMA_PMD_DEV_TYPE,
				      &speed_ability);

	if (status == IXGBE_SUCCESS) {
		if (speed_ability & IXGBE_MDIO_PHY_SPEED_10G)
			*speed |= IXGBE_LINK_SPEED_10GB_FULL;
		if (speed_ability & IXGBE_MDIO_PHY_SPEED_1G)
			*speed |= IXGBE_LINK_SPEED_1GB_FULL;
		if (speed_ability & IXGBE_MDIO_PHY_SPEED_100M)
			*speed |= IXGBE_LINK_SPEED_100_FULL;
	}

d1437 1
a1437 1
		} else if (hw->mac.type == ixgbe_mac_82599EB) {
@


1.17
log
@Support for I2C combined messages as required by X550
@
text
@d1 1
a1 1
/*	$OpenBSD: ixgbe_phy.c,v 1.16 2016/11/17 21:08:27 mikeb Exp $	*/
d1210 4
@


1.16
log
@Autoconfiguration and firmware semaphore refactoring
@
text
@d1 1
a1 1
/*	$OpenBSD: ixgbe_phy.c,v 1.15 2016/11/17 19:26:57 mikeb Exp $	*/
d53 257
d339 9
@


1.15
log
@Bring in new PHY bits, some of the 82599 specific stuff becomes shared
@
text
@d1 1
a1 1
/*	$OpenBSD: ixgbe_phy.c,v 1.14 2016/11/17 12:21:27 mikeb Exp $	*/
d35 1
a35 1
/* FreeBSD: src/sys/dev/ixgbe/ixgbe_phy.c 251964 Jun 18 21:28:19 2013 UTC */
d44 2
a45 2
int32_t ixgbe_clock_in_i2c_bit(struct ixgbe_hw *hw, int *data);
int32_t ixgbe_clock_out_i2c_bit(struct ixgbe_hw *hw, int data);
d48 2
a49 2
int32_t ixgbe_set_i2c_data(struct ixgbe_hw *hw, uint32_t *i2cctl, int data);
int ixgbe_get_i2c_data(uint32_t *i2cctl);
d100 7
d134 5
a138 1
		/* clear value if nothing found */
a140 2
			ERROR_REPORT1(IXGBE_ERROR_SOFTWARE,
				     "Could not identify valid PHY address");
d418 1
a418 1
	uint16_t gssr;
a421 5
	if (IXGBE_READ_REG(hw, IXGBE_STATUS) & IXGBE_STATUS_LAN_ID_1)
		gssr = IXGBE_GSSR_PHY1_SM;
	else
		gssr = IXGBE_GSSR_PHY0_SM;

d519 1
a519 1
	uint16_t gssr;
a522 5
	if (IXGBE_READ_REG(hw, IXGBE_STATUS) & IXGBE_STATUS_LAN_ID_1)
		gssr = IXGBE_GSSR_PHY1_SM;
	else
		gssr = IXGBE_GSSR_PHY0_SM;

a542 2
	uint32_t time_out;
	uint32_t max_time_out = 10;
d637 5
a641 1
	/* Restart PHY autonegotiation and wait for completion */
a649 19
	/* Wait for autonegotiation to finish */
	for (time_out = 0; time_out < max_time_out; time_out++) {
		usec_delay(10);
		/* Restart PHY autonegotiation and wait for completion */
		status = hw->phy.ops.read_reg(hw, IXGBE_MDIO_AUTO_NEG_STATUS,
					      IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
					      &autoneg_reg);

		autoneg_reg &= IXGBE_MII_AUTONEG_COMPLETE;
		if (autoneg_reg == IXGBE_MII_AUTONEG_COMPLETE)
			break;
	}

	if (time_out == max_time_out) {
		status = IXGBE_ERR_LINK_SETUP;
		ERROR_REPORT1(IXGBE_ERROR_POLLING,
			     "PHY autonegotiation time out");
	}

a735 2
 *
 *  Determines the link capabilities by reading the AUTOC register.
a822 2
	uint32_t time_out;
	uint32_t max_time_out = 10;
d876 5
a880 1
	/* Restart PHY autonegotiation and wait for completion */
a888 18
	/* Wait for autonegotiation to finish */
	for (time_out = 0; time_out < max_time_out; time_out++) {
		usec_delay(10);
		/* Restart PHY autonegotiation and wait for completion */
		status = hw->phy.ops.read_reg(hw, IXGBE_MDIO_AUTO_NEG_STATUS,
					      IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
					      &autoneg_reg);

		autoneg_reg &= IXGBE_MII_AUTONEG_COMPLETE;
		if (autoneg_reg == IXGBE_MII_AUTONEG_COMPLETE)
			break;
	}

	if (time_out == max_time_out) {
		status = IXGBE_ERR_LINK_SETUP;
		DEBUGOUT("ixgbe_setup_phy_link_tnx: time out");
	}

d1118 3
a1127 3
	/* LAN ID is needed for sfp_type determination */
	hw->mac.ops.set_lan_id(hw);

d1748 1
a1748 1
 *  ixgbe_read_i2c_byte_generic - Reads 8 bit word over I2C
d1756 2
a1757 2
int32_t ixgbe_read_i2c_byte_generic(struct ixgbe_hw *hw, uint8_t byte_offset,
				    uint8_t dev_addr, uint8_t *data)
d1759 1
a1759 1
	int32_t status = IXGBE_SUCCESS;
d1762 2
a1763 2
	uint16_t swfw_mask = 0;
	int nack = 1;
d1766 1
a1766 1
	DEBUGFUNC("ixgbe_read_i2c_byte_generic");
d1768 4
a1771 4
	if (IXGBE_READ_REG(hw, IXGBE_STATUS) & IXGBE_STATUS_LAN_ID_1)
		swfw_mask = IXGBE_GSSR_PHY1_SM;
	else
		swfw_mask = IXGBE_GSSR_PHY0_SM;
d1774 2
a1775 5
		if (hw->mac.ops.acquire_swfw_sync(hw, swfw_mask)
		    != IXGBE_SUCCESS) {
			status = IXGBE_ERR_SWFW_SYNC;
			goto read_byte_out;
		}
d1816 3
a1818 1
		break;
d1822 4
a1825 2
		hw->mac.ops.release_swfw_sync(hw, swfw_mask);
		msec_delay(100);
d1834 18
a1851 1
	hw->mac.ops.release_swfw_sync(hw, swfw_mask);
d1853 14
a1866 2
read_byte_out:
	return status;
d1870 1
a1870 1
 *  ixgbe_write_i2c_byte_generic - Writes 8 bit word over I2C
d1874 1
d1879 2
a1880 2
int32_t ixgbe_write_i2c_byte_generic(struct ixgbe_hw *hw, uint8_t byte_offset,
				     uint8_t dev_addr, uint8_t data)
d1882 1
a1882 1
	int32_t status = IXGBE_SUCCESS;
d1885 1
a1885 1
	uint16_t swfw_mask = 0;
d1887 1
a1887 1
	DEBUGFUNC("ixgbe_write_i2c_byte_generic");
d1889 3
a1891 9
	if (IXGBE_READ_REG(hw, IXGBE_STATUS) & IXGBE_STATUS_LAN_ID_1)
		swfw_mask = IXGBE_GSSR_PHY1_SM;
	else
		swfw_mask = IXGBE_GSSR_PHY0_SM;

	if (hw->mac.ops.acquire_swfw_sync(hw, swfw_mask) != IXGBE_SUCCESS) {
		status = IXGBE_ERR_SWFW_SYNC;
		goto write_byte_out;
	}
d1921 3
a1923 1
		break;
d1934 2
a1935 1
	hw->mac.ops.release_swfw_sync(hw, swfw_mask);
a1936 1
write_byte_out:
d1941 32
d1977 1
d1981 1
a1981 1
	uint32_t i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL);
d1985 7
d2016 2
d2021 1
a2021 1
	uint32_t i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL);
d2025 6
d2042 9
d2063 1
a2063 1
	int bit = 0;
d2067 1
d2088 1
a2088 1
	int bit = 0;
d2101 10
a2110 3
	i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL);
	i2cctl |= IXGBE_I2C_DATA_OUT;
	IXGBE_WRITE_REG(hw, IXGBE_I2CCTL, i2cctl);
d2126 1
a2126 1
	uint32_t i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL);
d2128 1
a2128 1
	int ack = 1;
d2132 11
d2151 2
a2152 2
		i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL);
		ack = ixgbe_get_i2c_data(&i2cctl);
d2155 1
a2155 1
		if (ack == 0)
d2159 2
a2160 3
	if (ack == 1) {
		ERROR_REPORT1(IXGBE_ERROR_POLLING,
			     "I2C ack was not received.\n");
d2179 1
a2179 1
int32_t ixgbe_clock_in_i2c_bit(struct ixgbe_hw *hw, int *data)
d2181 1
a2181 1
	uint32_t i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL);
d2185 12
d2202 2
a2203 2
	i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL);
	*data = ixgbe_get_i2c_data(&i2cctl);
d2220 1
a2220 1
int32_t ixgbe_clock_out_i2c_bit(struct ixgbe_hw *hw, int data)
d2223 1
a2223 1
	uint32_t i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL);
d2227 6
d2254 1
d2261 1
d2265 3
a2267 1
	int i;
d2269 12
a2280 1
	*i2cctl |= IXGBE_I2C_CLK_OUT;
d2282 2
a2283 2
	for (i = 0; i < IXGBE_I2C_CLOCK_STRETCHING_TIMEOUT; i++) {
		IXGBE_WRITE_REG(hw, IXGBE_I2CCTL, *i2cctl);
d2288 1
a2288 1
		if (IXGBE_READ_REG(hw, IXGBE_I2CCTL) & IXGBE_I2C_CLK_IN)
d2299 1
a2302 1

d2305 9
a2313 3
	*i2cctl &= ~IXGBE_I2C_CLK_OUT;

	IXGBE_WRITE_REG(hw, IXGBE_I2CCTL, *i2cctl);
d2327 1
d2329 1
a2329 1
int32_t ixgbe_set_i2c_data(struct ixgbe_hw *hw, uint32_t *i2cctl, int data)
d2331 1
d2336 15
a2350 4
	if (data)
		*i2cctl |= IXGBE_I2C_DATA_OUT;
	else
		*i2cctl &= ~IXGBE_I2C_DATA_OUT;
d2352 1
a2352 1
	IXGBE_WRITE_REG(hw, IXGBE_I2CCTL, *i2cctl);
d2358 9
d2368 2
a2369 2
	*i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL);
	if (data != ixgbe_get_i2c_data(i2cctl)) {
d2385 1
d2387 1
a2387 1
int ixgbe_get_i2c_data(uint32_t *i2cctl)
d2389 2
a2390 1
	int data;
d2394 11
a2404 1
	if (*i2cctl & IXGBE_I2C_DATA_IN)
d2421 1
a2421 1
	uint32_t i2cctl = IXGBE_READ_REG(hw, IXGBE_I2CCTL);
d2427 6
@


1.14
log
@Style and typo fixes; no binary change
@
text
@d1 1
a1 1
/*	$OpenBSD: ixgbe_phy.c,v 1.13 2015/04/30 13:24:36 sthen Exp $	*/
d5 1
a5 1
  Copyright (c) 2001-2013, Intel Corporation
d141 29
d214 2
a215 1
		hw->phy.revision = (uint32_t)(phy_id_low & ~IXGBE_PHY_REVISION_MASK);
d235 3
d247 3
d282 4
d569 38
d691 6
d710 40
d936 1
a936 1
	int32_t status = IXGBE_SUCCESS;
d955 1
a955 1
	int32_t status = IXGBE_SUCCESS;
d1078 20
d1115 3
d1333 1
a1333 8
				if (cable_tech & IXGBE_SFF_DA_PASSIVE_CABLE)
					hw->phy.type =
						 ixgbe_phy_sfp_passive_unknown;
				else if (cable_tech & IXGBE_SFF_DA_ACTIVE_CABLE)
					hw->phy.type =
						ixgbe_phy_sfp_active_unknown;
				else
					hw->phy.type = ixgbe_phy_sfp_unknown;
d1340 5
a1344 1
		    IXGBE_SFF_DA_ACTIVE_CABLE)) {
d1382 245
d1769 15
d2335 33
@


1.13
log
@Allow use of 1Gb 1000baseLX SFPs in 82599 ix(4) SFP+ port. Adapted from
Linux commit 345be204dcbb. ok jsg@@ mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ixgbe_phy.c,v 1.12 2014/08/25 14:26:25 mikeb Exp $	*/
d65 8
a72 8
	phy->ops.identify = &ixgbe_identify_phy_generic;
	phy->ops.reset = &ixgbe_reset_phy_generic;
	phy->ops.read_reg = &ixgbe_read_phy_reg_generic;
	phy->ops.write_reg = &ixgbe_write_phy_reg_generic;
	phy->ops.read_reg_mdi = &ixgbe_read_phy_reg_mdi;
	phy->ops.write_reg_mdi = &ixgbe_write_phy_reg_mdi;
	phy->ops.setup_link = &ixgbe_setup_phy_link_generic;
	phy->ops.setup_link_speed = &ixgbe_setup_phy_link_speed_generic;
d75 6
a80 6
	phy->ops.read_i2c_byte = &ixgbe_read_i2c_byte_generic;
	phy->ops.write_i2c_byte = &ixgbe_write_i2c_byte_generic;
	phy->ops.read_i2c_eeprom = &ixgbe_read_i2c_eeprom_generic;
	phy->ops.write_i2c_eeprom = &ixgbe_write_i2c_eeprom_generic;
	phy->ops.i2c_bus_clear = &ixgbe_i2c_bus_clear;
	phy->ops.identify_sfp = &ixgbe_identify_module_generic;
d82 1
a82 1
	phy->ops.check_overtemp = &ixgbe_tn_check_overtemp;
d496 1
a496 1
 *  ixgbe_setup_phy_link_generic - Set and restart autoneg
d499 1
a499 1
 *  Restart autonegotiation and PHY and waits for completion.
d711 1
a711 1
 *	ixgbe_setup_phy_link_tnx - Set and restart autoneg
d714 1
a714 1
 *	Restart autonegotiation and PHY and waits for completion.
@


1.12
log
@We have never limited the definition of "supported SPF modules"
to the vendor/make whitelist maintained by Intel so there's no
reason to start doing it now.

When syncing the driver to the FreeBSD codebase I have decided
to take this chunk as is but it appears that it breaks cheap
chinese SFP+ fiber optics modules that we all love.  And while
there's still a lot of places where we check for the vendor
OUI, most of these checks are not necessary.

Issue reported and fix tested by Tony Sarendal.  Thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD: ixgbe_phy.c,v 1.11 2013/08/05 19:58:06 mikeb Exp $	*/
d1115 7
d1209 2
d1270 1
d1275 1
@


1.11
log
@First stab at updating this monster to the Intel/FreeBSD current version.
This syncs PHY and chip dependent parts as well as brings support for the
flow control and additional (untested) bits for 1G fiber versions.

Tested by Hrvoje Popovski <hrvoje at srce ! hr> on 82599/SFP+DA, florian@@
and benno@@ on 82599/SFP+SR and on 82598/CX4-BP, 82599/SFP+DA and X540/RJ45
by me.
@
text
@d1 1
a1 1
/*	$OpenBSD: ixgbe_phy.c,v 1.10 2012/12/17 18:44:27 mikeb Exp $	*/
a997 1
	uint16_t enforce_sfp = 0;
d1209 5
a1213 24
		/* Anything else 82598-based is supported */
		if (hw->mac.type == ixgbe_mac_82598EB) {
			status = IXGBE_SUCCESS;
			goto out;
		}

		if (hw->mac.type != ixgbe_mac_82598EB)
			ixgbe_get_device_caps_generic(hw, &enforce_sfp);
		if (!(enforce_sfp & IXGBE_DEVICE_CAPS_ALLOW_ANY_SFP) &&
		    !(hw->phy.sfp_type == ixgbe_sfp_type_1g_cu_core0 ||
		      hw->phy.sfp_type == ixgbe_sfp_type_1g_cu_core1 ||
		      hw->phy.sfp_type == ixgbe_sfp_type_1g_sx_core0 ||
		      hw->phy.sfp_type == ixgbe_sfp_type_1g_sx_core1)) {
			/* Make sure we're a supported PHY type */
			if (hw->phy.type == ixgbe_phy_sfp_intel) {
				status = IXGBE_SUCCESS;
			} else {
				DEBUGOUT("SFP+ module not supported\n");
				hw->phy.type = ixgbe_phy_sfp_unsupported;
				status = IXGBE_ERR_SFP_NOT_SUPPORTED;
			}
		} else {
			status = IXGBE_SUCCESS;
		}
@


1.10
log
@sync up ixgbe_raise_i2c_clk with freebsd which basically allows
for larger timeouts and should be more reliable; tested on 82598,
82599 and x540.
@
text
@d1 1
a1 1
/*	$OpenBSD: ixgbe_phy.c,v 1.9 2012/12/05 14:41:28 mikeb Exp $	*/
d5 1
a5 1
  Copyright (c) 2001-2009, Intel Corporation
d35 1
a35 1
/*$FreeBSD: src/sys/dev/ixgbe/ixgbe_phy.c,v 1.9 2009/12/07 21:30:54 jfv Exp $*/
d46 1
a46 1
int32_t ixgbe_raise_i2c_clk(struct ixgbe_hw *hw, uint32_t *i2cctl);
d62 2
d69 2
d80 1
a80 1
	phy->ops.identify_sfp = &ixgbe_identify_sfp_module_generic;
d98 2
d128 1
a128 1
		if (status != IXGBE_SUCCESS)
d130 3
d145 1
a145 1
int ixgbe_validate_phy_addr(struct ixgbe_hw *hw, uint32_t phy_addr)
d148 3
a150 1
	int valid = FALSE;
d173 2
d199 2
d229 1
a229 1
	int32_t i;
d233 2
d271 2
a272 1
		DEBUGOUT("PHY reset polling failed to complete.\n");
d280 2
a281 1
 *  ixgbe_read_phy_reg_generic - Reads a value from a specified PHY register
d286 1
a286 1
int32_t ixgbe_read_phy_reg_generic(struct ixgbe_hw *hw, uint32_t reg_addr,
d289 22
a310 5
	uint32_t command;
	uint32_t i;
	uint32_t data;
	int32_t status = IXGBE_SUCCESS;
	uint16_t gssr;
a311 4
	if (IXGBE_READ_REG(hw, IXGBE_STATUS) & IXGBE_STATUS_LAN_ID_1)
		gssr = IXGBE_GSSR_PHY1_SM;
	else
		gssr = IXGBE_GSSR_PHY0_SM;
d313 4
a316 2
	if (hw->mac.ops.acquire_swfw_sync(hw, gssr) != IXGBE_SUCCESS)
		status = IXGBE_ERR_SWFW_SYNC;
d318 8
a325 6
	if (status == IXGBE_SUCCESS) {
		/* Setup and write the address cycle command */
		command = ((reg_addr << IXGBE_MSCA_NP_ADDR_SHIFT)  |
			   (device_type << IXGBE_MSCA_DEV_TYPE_SHIFT) |
			   (hw->phy.addr << IXGBE_MSCA_PHY_ADDR_SHIFT) |
			   (IXGBE_MSCA_ADDR_CYCLE | IXGBE_MSCA_MDI_COMMAND));
d327 1
a327 1
		IXGBE_WRITE_REG(hw, IXGBE_MSCA, command);
d329 7
a335 7
		/*
		 * Check every 10 usec to see if the address cycle completed.
		 * The MDI Command bit will clear when the operation is
		 * complete
		 */
		for (i = 0; i < IXGBE_MDIO_COMMAND_TIMEOUT; i++) {
			usec_delay(10);
d337 4
a340 1
			command = IXGBE_READ_REG(hw, IXGBE_MSCA);
d342 4
a345 3
			if ((command & IXGBE_MSCA_MDI_COMMAND) == 0)
				break;
		}
d347 7
a353 4
		if ((command & IXGBE_MSCA_MDI_COMMAND) != 0) {
			DEBUGOUT("PHY address command did not complete.\n");
			status = IXGBE_ERR_PHY;
		}
d355 2
a356 19
		if (status == IXGBE_SUCCESS) {
			/*
			 * Address cycle complete, setup and write the read
			 * command
			 */
			command = ((reg_addr << IXGBE_MSCA_NP_ADDR_SHIFT)  |
				   (device_type << IXGBE_MSCA_DEV_TYPE_SHIFT) |
				   (hw->phy.addr << IXGBE_MSCA_PHY_ADDR_SHIFT) |
				   (IXGBE_MSCA_READ | IXGBE_MSCA_MDI_COMMAND));

			IXGBE_WRITE_REG(hw, IXGBE_MSCA, command);

			/*
			 * Check every 10 usec to see if the address cycle
			 * completed. The MDI Command bit will clear when the
			 * operation is complete
			 */
			for (i = 0; i < IXGBE_MDIO_COMMAND_TIMEOUT; i++) {
				usec_delay(10);
d358 12
a369 1
				command = IXGBE_READ_REG(hw, IXGBE_MSCA);
d371 1
a371 3
				if ((command & IXGBE_MSCA_MDI_COMMAND) == 0)
					break;
			}
d373 4
a376 13
			if ((command & IXGBE_MSCA_MDI_COMMAND) != 0) {
				DEBUGOUT("PHY read command didn't complete\n");
				status = IXGBE_ERR_PHY;
			} else {
				/*
				 * Read operation is complete.  Get the data
				 * from MSRWD
				 */
				data = IXGBE_READ_REG(hw, IXGBE_MSRWD);
				data >>= IXGBE_MSRWD_READ_DATA_SHIFT;
				*phy_data = (uint16_t)(data);
			}
		}
d378 3
d382 2
d390 2
a391 1
 *  ixgbe_write_phy_reg_generic - Writes a value to specified PHY register
d397 1
a397 1
int32_t ixgbe_write_phy_reg_generic(struct ixgbe_hw *hw, uint32_t reg_addr,
d400 10
a409 4
	uint32_t command;
	uint32_t i;
	int32_t status = IXGBE_SUCCESS;
	uint16_t gssr;
d411 1
a411 4
	if (IXGBE_READ_REG(hw, IXGBE_STATUS) & IXGBE_STATUS_LAN_ID_1)
		gssr = IXGBE_GSSR_PHY1_SM;
	else
		gssr = IXGBE_GSSR_PHY0_SM;
d413 7
a419 2
	if (hw->mac.ops.acquire_swfw_sync(hw, gssr) != IXGBE_SUCCESS)
		status = IXGBE_ERR_SWFW_SYNC;
d421 4
a424 3
	if (status == IXGBE_SUCCESS) {
		/* Put the data in the MDI single read and write data register*/
		IXGBE_WRITE_REG(hw, IXGBE_MSRWD, (uint32_t)phy_data);
d426 4
a429 5
		/* Setup and write the address cycle command */
		command = ((reg_addr << IXGBE_MSCA_NP_ADDR_SHIFT)  |
			   (device_type << IXGBE_MSCA_DEV_TYPE_SHIFT) |
			   (hw->phy.addr << IXGBE_MSCA_PHY_ADDR_SHIFT) |
			   (IXGBE_MSCA_ADDR_CYCLE | IXGBE_MSCA_MDI_COMMAND));
d431 8
a438 1
		IXGBE_WRITE_REG(hw, IXGBE_MSCA, command);
d440 1
a440 7
		/*
		 * Check every 10 usec to see if the address cycle completed.
		 * The MDI Command bit will clear when the operation is
		 * complete
		 */
		for (i = 0; i < IXGBE_MDIO_COMMAND_TIMEOUT; i++) {
			usec_delay(10);
d442 7
a448 1
			command = IXGBE_READ_REG(hw, IXGBE_MSCA);
d450 4
a453 3
			if ((command & IXGBE_MSCA_MDI_COMMAND) == 0)
				break;
		}
d455 4
a458 4
		if ((command & IXGBE_MSCA_MDI_COMMAND) != 0) {
			DEBUGOUT("PHY address cmd didn't complete\n");
			status = IXGBE_ERR_PHY;
		}
d460 2
a461 19
		if (status == IXGBE_SUCCESS) {
			/*
			 * Address cycle complete, setup and write the write
			 * command
			 */
			command = ((reg_addr << IXGBE_MSCA_NP_ADDR_SHIFT)  |
				   (device_type << IXGBE_MSCA_DEV_TYPE_SHIFT) |
				   (hw->phy.addr << IXGBE_MSCA_PHY_ADDR_SHIFT) |
				   (IXGBE_MSCA_WRITE | IXGBE_MSCA_MDI_COMMAND));

			IXGBE_WRITE_REG(hw, IXGBE_MSCA, command);

			/*
			 * Check every 10 usec to see if the address cycle
			 * completed. The MDI Command bit will clear when the
			 * operation is complete
			 */
			for (i = 0; i < IXGBE_MDIO_COMMAND_TIMEOUT; i++) {
				usec_delay(10);
d463 13
a475 1
				command = IXGBE_READ_REG(hw, IXGBE_MSCA);
d477 1
a477 3
				if ((command & IXGBE_MSCA_MDI_COMMAND) == 0)
					break;
			}
d479 4
a482 5
			if ((command & IXGBE_MSCA_MDI_COMMAND) != 0) {
				DEBUGOUT("PHY address cmd didn't complete\n");
				status = IXGBE_ERR_PHY;
			}
		}
d484 3
d488 2
d507 1
a507 1
	int autoneg = 0;
d510 1
d580 1
a580 1
		if (autoneg_reg == IXGBE_MII_AUTONEG_COMPLETE) {
a581 1
		}
d586 2
a587 1
		DEBUGOUT("ixgbe_setup_phy_link_generic: time out");
a596 1
 *  @@autoneg: TRUE if autonegotiation enabled
d599 2
a600 3
				       ixgbe_link_speed speed,
				       int autoneg,
				       int autoneg_wait_to_complete)
d602 1
a602 2
	UNREFERENCED_PARAMETER(autoneg);
	UNREFERENCED_PARAMETER(autoneg_wait_to_complete);
d634 2
a635 2
					     ixgbe_link_speed *speed,
					     int *autoneg)
d640 2
d669 1
a669 1
			     int *link_up)
d678 2
d695 1
a695 2
		phy_link = phy_data &
			   IXGBE_MDIO_VENDOR_SPECIFIC_1_LINK_STATUS;
d697 1
a697 1
			    IXGBE_MDIO_VENDOR_SPECIFIC_1_SPEED_STATUS;
d722 1
a722 1
	int autoneg = FALSE;
d725 2
d792 1
a792 1
		if (autoneg_reg == IXGBE_MII_AUTONEG_COMPLETE) {
a793 1
		}
d810 1
a810 1
				       uint16_t *firmware_version)
d814 2
d829 1
a829 1
				       uint16_t *firmware_version)
d833 2
d849 1
a849 1
	int end_data = FALSE;
d855 2
d892 2
d904 6
a909 1
			DEBUGOUT("DATA:  \n");
a910 2
			hw->eeprom.ops.read(hw, data_offset++,
					    &phy_offset);
d912 4
a915 1
				hw->eeprom.ops.read(hw, data_offset, &eword);
d926 1
a926 1
			DEBUGOUT("CONTROL: \n");
d947 32
d1000 2
a1004 1
		DEBUGOUT("SFP+ not present");
d1008 2
a1009 1
	status = hw->phy.ops.read_i2c_eeprom(hw, IXGBE_SFF_IDENTIFIER,
d1012 1
a1012 3
	if (status == IXGBE_ERR_SWFW_SYNC ||
	    status == IXGBE_ERR_I2C ||
	    status == IXGBE_ERR_SFP_NOT_PRESENT)
d1026 1
a1026 3
		if (status == IXGBE_ERR_SWFW_SYNC ||
		    status == IXGBE_ERR_I2C ||
		    status == IXGBE_ERR_SFP_NOT_PRESENT)
d1033 1
a1033 3
		if (status == IXGBE_ERR_SWFW_SYNC ||
		    status == IXGBE_ERR_I2C ||
		    status == IXGBE_ERR_SFP_NOT_PRESENT)
d1039 1
a1039 3
		if (status == IXGBE_ERR_SWFW_SYNC ||
		    status == IXGBE_ERR_I2C ||
		    status == IXGBE_ERR_SFP_NOT_PRESENT)
d1055 2
d1109 7
d1139 1
a1139 3
			if (status == IXGBE_ERR_SWFW_SYNC ||
			    status == IXGBE_ERR_I2C ||
			    status == IXGBE_ERR_SFP_NOT_PRESENT)
d1146 1
a1146 3
			if (status == IXGBE_ERR_SWFW_SYNC ||
			    status == IXGBE_ERR_I2C ||
			    status == IXGBE_ERR_SFP_NOT_PRESENT)
d1153 1
a1153 3
			if (status == IXGBE_ERR_SWFW_SYNC ||
			    status == IXGBE_ERR_I2C ||
			    status == IXGBE_ERR_SFP_NOT_PRESENT)
d1202 3
a1204 1
		      hw->phy.sfp_type == ixgbe_sfp_type_1g_cu_core0)) {
d1216 2
a1217 3
		/* unimplemented even in the intel driver */
		/* ixgbe_get_device_caps(hw, &enforce_sfp); */
		enforce_sfp = IXGBE_DEVICE_CAPS_ALLOW_ANY_SFP;
d1219 4
a1222 2
		    !((hw->phy.sfp_type == ixgbe_sfp_type_1g_cu_core0) ||
		      (hw->phy.sfp_type == ixgbe_sfp_type_1g_cu_core1))) {
a1231 1
			DEBUGOUT("SFP+ module type ignored\n");
d1258 2
a1259 2
					uint16_t *list_offset,
					uint16_t *data_offset)
d1264 2
d1281 2
a1282 1
	    sfp_type == ixgbe_sfp_type_1g_cu_core0)
d1285 2
a1286 1
		 sfp_type == ixgbe_sfp_type_1g_cu_core1)
d1290 6
a1295 1
	hw->eeprom.ops.read(hw, IXGBE_PHY_INIT_OFFSET_NL, list_offset);
d1307 2
a1308 1
	hw->eeprom.ops.read(hw, *list_offset, &sfp_id);
d1313 2
a1314 1
			hw->eeprom.ops.read(hw, *list_offset, data_offset);
d1324 1
a1324 1
				return IXGBE_ERR_PHY;
d1343 1
d1345 5
d1361 1
a1361 1
				  uint8_t *eeprom_data)
d1363 2
d1379 1
a1379 1
				   uint8_t eeprom_data)
d1381 2
d1398 1
a1398 1
				uint8_t dev_addr, uint8_t *data)
d1405 3
d1463 1
a1465 1
		ixgbe_i2c_bus_clear(hw);
d1490 1
a1490 1
				 uint8_t dev_addr, uint8_t data)
d1497 2
d1564 2
d1595 2
a1618 1
	int32_t status = IXGBE_SUCCESS;
d1622 2
d1625 1
a1625 1
		status = ixgbe_clock_in_i2c_bit(hw, &bit);
a1626 3

		if (status != IXGBE_SUCCESS)
			break;
d1629 1
a1629 1
	return status;
d1646 2
d1673 1
a1673 1
	int32_t status;
d1679 1
a1679 1
	status = ixgbe_raise_i2c_clk(hw, &i2cctl);
d1681 1
a1681 2
	if (status != IXGBE_SUCCESS)
		goto out;
d1698 2
a1699 1
		DEBUGOUT("I2C ack was not received.\n");
a1707 1
out:
a1719 1
	int32_t status;
d1722 3
a1724 1
	status = ixgbe_raise_i2c_clk(hw, &i2cctl);
d1737 1
a1737 1
	return status;
d1752 2
d1756 1
a1756 1
		status = ixgbe_raise_i2c_clk(hw, &i2cctl);
d1769 2
a1770 1
		DEBUGOUT1("I2C data was not set to %X\n", data);
d1782 1
a1782 1
int32_t ixgbe_raise_i2c_clk(struct ixgbe_hw *hw, uint32_t *i2cctl)
d1795 1
a1795 1
			return (IXGBE_SUCCESS);
a1796 1
	return (IXGBE_ERR_I2C);
d1809 2
d1832 2
d1849 3
a1851 1
		DEBUGOUT1("Error - I2C data was not set to %X.\n", data);
d1868 2
d1890 2
d1915 1
a1915 1
 *  ixgbe_tn_check_overtemp - Checks if an overtemp occured.
d1925 2
d1938 1
@


1.9
log
@minor cleanup, whitespaces, mostly synced with freebsd
@
text
@d1 1
a1 1
/*	$OpenBSD: ixgbe_phy.c,v 1.8 2012/08/06 21:07:52 mikeb Exp $	*/
d1659 1
a1659 1
	int32_t status = IXGBE_SUCCESS;
d1663 5
a1667 1
	IXGBE_WRITE_REG(hw, IXGBE_I2CCTL, *i2cctl);
d1669 4
a1672 4
	/* SCL rise time (1000ns) */
	usec_delay(IXGBE_I2C_T_RISE);

	return status;
@


1.8
log
@Add support for 10Gb ethernet cards based on the Intel X540 chipset.
The code was obtained from FreeBSD and tested on the hardware kindly
donated by Tony Sarendal <tony () polarcap ! org>.  Thanks a lot!

ok jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: ixgbe_phy.c,v 1.7 2012/07/29 13:49:03 mikeb Exp $	*/
d1282 1
a1282 1
 *  a specified deivce address.
d1538 1
d1684 1
d1708 1
@


1.7
log
@whitespace cleanup, no binary change
@
text
@d1 1
a1 1
/*	$OpenBSD: ixgbe_phy.c,v 1.6 2011/06/10 12:46:35 claudio Exp $	*/
d190 1
a190 1
	case AQ1002_PHY_ID:
d281 1
a281 1
	if (ixgbe_acquire_swfw_sync(hw, gssr) != IXGBE_SUCCESS)
d352 1
a352 1
		ixgbe_release_swfw_sync(hw, gssr);
d378 1
a378 1
	if (ixgbe_acquire_swfw_sync(hw, gssr) != IXGBE_SUCCESS)
d444 1
a444 1
		ixgbe_release_swfw_sync(hw, gssr);
d506 2
a507 1
		autoneg_reg &= ~IXGBE_MII_100BASE_T_ADVERTISE;
d1299 2
a1300 1
		if (ixgbe_acquire_swfw_sync(hw, swfw_mask) != IXGBE_SUCCESS) {
d1347 1
a1347 1
		ixgbe_release_swfw_sync(hw, swfw_mask);
d1358 1
a1358 1
	ixgbe_release_swfw_sync(hw, swfw_mask);
d1386 1
a1386 1
	if (ixgbe_acquire_swfw_sync(hw, swfw_mask) != IXGBE_SUCCESS) {
d1430 1
a1430 1
	ixgbe_release_swfw_sync(hw, swfw_mask);
@


1.6
log
@Monster update of ix(4). This brings ix(4) close to what is currently
in FreeBSD. This seems to fix a lot of problems on 82599 based cards
including the VLAN problems and the corrupted receives.
Putting this in now to work on it in tree since a few additional things
need to be merged. Tested by myself, deraadt@@ and jsg@@ on both 98er and
99er cards.
OK jsg@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ixgbe_phy.c,v 1.5 2010/09/21 00:29:29 claudio Exp $	*/
d5 1
a5 1
  Copyright (c) 2001-2009, Intel Corporation 
d7 2
a8 2
  
  Redistribution and use in source and binary forms, with or without 
d10 2
a11 2
  
   1. Redistributions of source code must retain the above copyright notice, 
d13 3
a15 3
  
   2. Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in the 
d17 3
a19 3
  
   3. Neither the name of the Intel Corporation nor the names of its 
      contributors may be used to endorse or promote products derived from 
d21 1
a21 1
  
d23 8
a30 8
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
d100 1
a100 1
				        ixgbe_get_phy_type_from_id(hw->phy.id);
d105 2
a106 2
					          IXGBE_MDIO_PMA_PMD_DEV_TYPE,
					          &ext_ability);
d111 1
a111 1
						         ixgbe_phy_cu_unknown;
d114 1
a114 1
						         ixgbe_phy_generic;
d143 1
a143 1
	                     IXGBE_MDIO_PMA_PMD_DEV_TYPE, &phy_id);
d163 2
a164 2
	                              IXGBE_MDIO_PMA_PMD_DEV_TYPE,
	                              &phy_id_high);
d169 2
a170 2
		                              IXGBE_MDIO_PMA_PMD_DEV_TYPE,
		                              &phy_id_low);
d234 2
a235 2
	                      IXGBE_MDIO_PHY_XS_DEV_TYPE,
	                      IXGBE_MDIO_PHY_XS_RESET);
d245 1
a245 1
		                     IXGBE_MDIO_PHY_XS_DEV_TYPE, &ctrl);
d268 1
a268 1
                               uint32_t device_type, uint16_t *phy_data)
d287 3
a289 3
		           (device_type << IXGBE_MSCA_DEV_TYPE_SHIFT) |
		           (hw->phy.addr << IXGBE_MSCA_PHY_ADDR_SHIFT) |
		           (IXGBE_MSCA_ADDR_CYCLE | IXGBE_MSCA_MDI_COMMAND));
d318 3
a320 3
			           (device_type << IXGBE_MSCA_DEV_TYPE_SHIFT) |
			           (hw->phy.addr << IXGBE_MSCA_PHY_ADDR_SHIFT) |
			           (IXGBE_MSCA_READ | IXGBE_MSCA_MDI_COMMAND));
d366 1
a366 1
                                uint32_t device_type, uint16_t phy_data)
d387 3
a389 3
		           (device_type << IXGBE_MSCA_DEV_TYPE_SHIFT) |
		           (hw->phy.addr << IXGBE_MSCA_PHY_ADDR_SHIFT) |
		           (IXGBE_MSCA_ADDR_CYCLE | IXGBE_MSCA_MDI_COMMAND));
d418 3
a420 3
			           (device_type << IXGBE_MSCA_DEV_TYPE_SHIFT) |
			           (hw->phy.addr << IXGBE_MSCA_PHY_ADDR_SHIFT) |
			           (IXGBE_MSCA_WRITE | IXGBE_MSCA_MDI_COMMAND));
d471 2
a472 2
		                     IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
	                             &autoneg_reg);
d479 2
a480 2
		                      IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
		                      autoneg_reg);
d486 3
a488 3
		                     IXGBE_MII_AUTONEG_VENDOR_PROVISION_1_REG,
		                     IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
		                     &autoneg_reg);
d495 3
a497 3
		                      IXGBE_MII_AUTONEG_VENDOR_PROVISION_1_REG,
		                      IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
		                      autoneg_reg);
d503 2
a504 2
		                     IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
		                     &autoneg_reg);
d511 2
a512 2
		                      IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
		                      autoneg_reg);
d517 1
a517 1
	                     IXGBE_MDIO_AUTO_NEG_DEV_TYPE, &autoneg_reg);
d522 1
a522 1
	                      IXGBE_MDIO_AUTO_NEG_DEV_TYPE, autoneg_reg);
d529 2
a530 2
		                              IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
		                              &autoneg_reg);
d553 3
a555 3
                                       ixgbe_link_speed speed,
                                       int autoneg,
                                       int autoneg_wait_to_complete)
d590 2
a591 2
                                             ixgbe_link_speed *speed,
                                             int *autoneg)
d600 2
a601 2
	                              IXGBE_MDIO_PMA_PMD_DEV_TYPE,
	                              &speed_ability);
d623 1
a623 1
                             int *link_up)
d644 3
a646 3
		                        IXGBE_MDIO_VENDOR_SPECIFIC_1_STATUS,
		                        IXGBE_MDIO_VENDOR_SPECIFIC_1_DEV_TYPE,
		                        &phy_data);
d648 1
a648 1
		           IXGBE_MDIO_VENDOR_SPECIFIC_1_LINK_STATUS;
d650 1
a650 1
		            IXGBE_MDIO_VENDOR_SPECIFIC_1_SPEED_STATUS;
d683 2
a684 2
		                     IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
		                     &autoneg_reg);
d691 2
a692 2
		                      IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
		                      autoneg_reg);
d698 2
a699 2
		                     IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
		                     &autoneg_reg);
d706 2
a707 2
		                      IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
		                      autoneg_reg);
d713 2
a714 2
		                     IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
		                     &autoneg_reg);
d721 2
a722 2
		                      IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
		                      autoneg_reg);
d727 1
a727 1
	                     IXGBE_MDIO_AUTO_NEG_DEV_TYPE, &autoneg_reg);
d732 1
a732 1
	                      IXGBE_MDIO_AUTO_NEG_DEV_TYPE, autoneg_reg);
d739 2
a740 2
		                              IXGBE_MDIO_AUTO_NEG_DEV_TYPE,
		                              &autoneg_reg);
d762 1
a762 1
                                       uint16_t *firmware_version)
d767 2
a768 2
	                              IXGBE_MDIO_VENDOR_SPECIFIC_1_DEV_TYPE,
	                              firmware_version);
d779 1
a779 1
                                       uint16_t *firmware_version)
d784 2
a785 2
	                              IXGBE_MDIO_VENDOR_SPECIFIC_1_DEV_TYPE,
	                              firmware_version);
d796 1
a796 1
	uint16_t phy_offset, control, eword, edata, block_crc; 
d804 1
a804 1
	                     IXGBE_MDIO_PHY_XS_DEV_TYPE, &phy_data);
d808 2
a809 2
	                      IXGBE_MDIO_PHY_XS_DEV_TYPE,
	                      (phy_data | IXGBE_MDIO_PHY_XS_RESET));
d813 1
a813 1
		                     IXGBE_MDIO_PHY_XS_DEV_TYPE, &phy_data);
d827 1
a827 1
	                                              &data_offset);
d839 1
a839 1
		           IXGBE_CONTROL_SHIFT_NL;
d851 1
a851 1
			                    &phy_offset);
d855 1
a855 1
				                      IXGBE_TWINAX_DEV, eword);
d857 1
a857 1
				          phy_offset);
d914 1
a914 1
	                                     &identifier);
d929 2
a930 2
		                                     IXGBE_SFF_1GBE_COMP_CODES,
	                                             &comp_codes_1g);
d938 2
a939 2
		                                     IXGBE_SFF_10GBE_COMP_CODES,
		                                     &comp_codes_10g);
d946 2
a947 2
		                                     IXGBE_SFF_CABLE_TECHNOLOGY,
		                                     &cable_tech);
d983 1
a983 1
					             ixgbe_sfp_type_da_cu_core0;
d986 1
a986 1
					             ixgbe_sfp_type_da_cu_core1;
d1001 1
a1001 1
					                ixgbe_sfp_type_unknown;
d1008 1
a1008 1
					              ixgbe_sfp_type_srlr_core0;
d1011 1
a1011 1
					              ixgbe_sfp_type_srlr_core1;
d1039 2
a1040 2
			                            IXGBE_SFF_VENDOR_OUI_BYTE0,
			                            &oui_bytes[0]);
d1048 2
a1049 2
			                            IXGBE_SFF_VENDOR_OUI_BYTE1,
			                            &oui_bytes[1]);
d1057 2
a1058 2
			                            IXGBE_SFF_VENDOR_OUI_BYTE2,
			                            &oui_bytes[2]);
d1074 1
a1074 1
					            ixgbe_phy_sfp_passive_tyco;
d1091 1
a1091 1
					         ixgbe_phy_sfp_passive_unknown;
d1165 2
a1166 2
                                        uint16_t *list_offset,
                                        uint16_t *data_offset)
d1251 1
a1251 1
                                  uint8_t *eeprom_data)
d1254 2
a1255 2
	                                 IXGBE_I2C_EEPROM_DEV_ADDR,
	                                 eeprom_data);
d1267 1
a1267 1
                                   uint8_t eeprom_data)
d1270 2
a1271 2
	                                  IXGBE_I2C_EEPROM_DEV_ADDR,
	                                  eeprom_data);
d1284 1
a1284 1
                                uint8_t dev_addr, uint8_t *data)
d1372 1
a1372 1
                                 uint8_t dev_addr, uint8_t data)
@


1.5
log
@When attaching a unknown SFP+ module on the 82598 controller recompute the
list_offset and data_offset. Makes my ix(4) happy again.
OK jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ixgbe_phy.c,v 1.4 2010/02/19 19:06:31 jsg Exp $	*/
d78 1
a78 1

d108 2
a109 3
					    IXGBE_MDIO_PHY_10GBASET_ABILITY ||
					    ext_ability &
					    IXGBE_MDIO_PHY_1000BASET_ABILITY)
d121 1
d224 5
d237 7
a243 3
	/* Poll for reset bit to self-clear indicating reset is complete */
	for (i = 0; i < 500; i++) {
		msec_delay(1);
d246 2
a247 1
		if (!(ctrl & IXGBE_MDIO_PHY_XS_RESET))
d249 1
d303 1
a303 1
			if ((command & IXGBE_MSCA_MDI_COMMAND) == 0) {
a304 1
			}
d451 2
a452 2
 *	ixgbe_setup_phy_link_generic - Set and restart autoneg
 *	@@hw: pointer to hardware structure
d454 1
a454 1
 *	Restart autonegotiation and PHY and waits for completion.
d533 1
a533 1
		if (autoneg_reg == IXGBE_MII_AUTONEG_COMPLETE)
d535 1
d538 1
a538 1
	if (time_out == max_time_out)
d540 2
d743 1
a743 1
		if (autoneg_reg == IXGBE_MII_AUTONEG_COMPLETE)
d745 1
a755 1

a772 1

d903 1
d916 4
a919 9
	if (status == IXGBE_ERR_SFP_NOT_PRESENT || status == IXGBE_ERR_I2C) {
		status = IXGBE_ERR_SFP_NOT_PRESENT;
		hw->phy.sfp_type = ixgbe_sfp_type_not_present;
		if (hw->phy.type != ixgbe_phy_nl) {
			hw->phy.id = 0;
			hw->phy.type = ixgbe_phy_unknown;
		}
		goto out;
	}
d928 25
a952 9
		hw->phy.ops.read_i2c_eeprom(hw, IXGBE_SFF_1GBE_COMP_CODES,
		                           &comp_codes_1g);
		hw->phy.ops.read_i2c_eeprom(hw, IXGBE_SFF_10GBE_COMP_CODES,
		                           &comp_codes_10g);
		hw->phy.ops.read_i2c_eeprom(hw, IXGBE_SFF_CABLE_TECHNOLOGY,
		                            &cable_tech);

		DEBUGOUT3("SFP+ capa codes 1G %x 10G %x cable %x\n",
		          comp_codes_1g, comp_codes_10g, cable_tech);
d963 4
d980 1
a980 1
			if (cable_tech & IXGBE_SFF_DA_PASSIVE_CABLE)
d987 19
a1005 1
			else if (comp_codes_10g & IXGBE_SFF_10GBASESR_CAPABLE)
d1012 1
a1012 1
			else if (comp_codes_10g & IXGBE_SFF_10GBASELR_CAPABLE)
d1015 1
a1015 1
					              ixgbe_sfp_type_srlr_core0;
d1018 2
a1019 2
					              ixgbe_sfp_type_srlr_core1;
			else
d1021 1
d1038 1
a1038 1
			hw->phy.ops.read_i2c_eeprom(hw,
d1041 7
a1047 1
			hw->phy.ops.read_i2c_eeprom(hw,
d1050 7
a1056 1
			hw->phy.ops.read_i2c_eeprom(hw,
d1060 5
d1066 3
a1068 3
			   ((oui_bytes[0] << IXGBE_SFF_VENDOR_OUI_BYTE0_SHIFT) |
			    (oui_bytes[1] << IXGBE_SFF_VENDOR_OUI_BYTE1_SHIFT) |
			    (oui_bytes[2] << IXGBE_SFF_VENDOR_OUI_BYTE2_SHIFT));
d1073 2
a1074 1
					hw->phy.type = ixgbe_phy_tw_tyco;
d1077 4
a1080 1
				hw->phy.type = ixgbe_phy_sfp_ftl;
d1090 5
a1094 1
					hw->phy.type = ixgbe_phy_tw_unknown;
d1101 3
a1103 2
		/* All passive DA cables are supported */
		if (cable_tech & IXGBE_SFF_DA_PASSIVE_CABLE) {
d1108 4
a1111 2
		/* 1G SFP modules are not supported */
		if (comp_codes_10g == 0) {
d1126 3
a1128 1
		if (!(enforce_sfp & IXGBE_DEVICE_CAPS_ALLOW_ANY_SFP)) {
d1145 8
d1169 1
d1181 11
d1208 1
a1208 1
		if (sfp_id == hw->phy.sfp_type) {
d1235 2
a1236 1
	} else if (sfp_id == IXGBE_PHY_INIT_END_NL)
d1238 1
a1238 1

a1296 1

d1501 1
a1501 1
		*data |= bit<<i;
d1769 26
@


1.4
log
@Work with pre-standard revision A ProCurve Direct Attach Cables.
Also let the 82598EB SFP+ card work with optical SFP+ modules by ignoring
the EEPROM even though the card officially supports only copper (DA) cables.

From and ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ixgbe_phy.c,v 1.3 2010/02/19 18:55:12 jsg Exp $	*/
d896 1
d898 1
a898 1
    }
d1133 6
a1138 2
	    hw->mac.type >= ixgbe_mac_82599EB) {
		DEBUGOUT("No matching SFP+ module found\n");
a1139 1
	}
@


1.3
log
@Partial sync to the latest version of ixgbe in FreeBSD leaving things
like if_ix.c mostly untouched for now.  This brings in support for
newer 82598 parts and adds several things that will be needed for 82599.

Initially from claudio with some additions by me.

Tested by claudio, dlg (earlier version) and myself on different cards
and media types.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ixgbe_phy.c,v 1.2 2008/06/08 20:33:51 reyk Exp $	*/
d926 3
d946 2
d1060 1
d1126 7
a1132 1
	if (sfp_id == IXGBE_PHY_INIT_END_NL) {
@


1.2
log
@replace strange Linux-style u8/u16/u32/u64/s32 integer types with the
standard C99 uint*_t/int*_t types (i don't get why these drivers
always use their own types when there is a well-defined standard).
@
text
@d1 1
a1 1
/*	$OpenBSD: ixgbe_phy.c,v 1.1 2008/06/08 20:01:02 reyk Exp $	*/
d5 1
a5 1
  Copyright (c) 2001-2008, Intel Corporation 
d35 1
a35 1
/*$FreeBSD: src/sys/dev/ixgbe/ixgbe_phy.c,v 1.4 2008/05/16 18:46:30 jfv Exp $*/
d39 13
d70 8
a77 1
	phy->ops.get_firmware_version = NULL;
d92 1
d101 17
d122 2
a173 1

d190 3
d214 10
d228 20
a247 3
	return hw->phy.ops.write_reg(hw, IXGBE_MDIO_PHY_XS_CONTROL,
	                             IXGBE_MDIO_PHY_XS_DEV_TYPE,
	                             IXGBE_MDIO_PHY_XS_RESET);
d441 2
a442 2
 *  ixgbe_setup_phy_link_generic - Set and restart autoneg
 *  @@hw: pointer to hardware structure
d444 1
a444 1
 *  Restart autonegotiation and PHY and waits for completion.
d448 1
a448 1
	int32_t status = IXGBE_NOT_IMPLEMENTED;
d452 5
d458 14
a471 8
	/*
	 * Set advertisement settings in PHY based on autoneg_advertised
	 * settings. If autoneg_advertised = 0, then advertise default values
	 * tnx devices cannot be "forced" to a autoneg 10G and fail.  But can
	 * for a 1G.
	 */
	hw->phy.ops.read_reg(hw, IXGBE_MII_SPEED_SELECTION_REG,
	                     IXGBE_MDIO_AUTO_NEG_DEV_TYPE, &autoneg_reg);
d473 16
a488 4
	if (hw->phy.autoneg_advertised == IXGBE_LINK_SPEED_1GB_FULL)
		autoneg_reg &= 0xEFFF; /* 0 in bit 12 is 1G operation */
	else
		autoneg_reg |= 0x1000; /* 1 in bit 12 is 10G/1G operation */
d490 14
a503 2
	hw->phy.ops.write_reg(hw, IXGBE_MII_SPEED_SELECTION_REG,
	                      IXGBE_MDIO_AUTO_NEG_DEV_TYPE, autoneg_reg);
d523 1
a523 2
		if (autoneg_reg == IXGBE_MII_AUTONEG_COMPLETE) {
			status = IXGBE_SUCCESS;
a524 1
		}
d553 1
a553 1
	if (speed & IXGBE_LINK_SPEED_10GB_FULL) {
d555 2
a556 2
	}
	if (speed & IXGBE_LINK_SPEED_1GB_FULL) {
d558 3
a560 1
	}
d569 34
d651 93
d760 18
d784 1
a784 1
	uint16_t phy_offset, control, eword, edata, list_crc, block_crc, id, sfp_id;
d802 1
a802 1
		if ((phy_data & IXGBE_MDIO_PHY_XS_RESET) == 0 )
d813 85
a897 2
	/* read offset to PHY init contents */
	hw->eeprom.ops.read(hw, IXGBE_PHY_INIT_OFFSET_NL, &list_offset);
d899 10
a908 2
	if ((!list_offset) || (list_offset == 0xFFFF)) {
		ret_val = IXGBE_ERR_PHY;
d912 61
a972 2
	/* Acquire the CRC */
	hw->eeprom.ops.read(hw, list_offset, &list_crc);
d974 67
a1040 2
	/* Shift offset to first ID word */
	list_offset++;
d1042 15
a1056 11
	/* determine the sfp sequence based on device ID */
	switch (hw->device_id) {
	case IXGBE_DEV_ID_82598_DA_DUAL_PORT:
		sfp_id = 0;
		break;
	case IXGBE_DEV_ID_82598_SR_DUAL_PORT_EM:
		sfp_id = 1;
		break;
	default:
		ret_val = IXGBE_ERR_PHY;
		goto out;
d1059 38
d1098 1
a1098 1
	 * Find the matching sfp ID in the EEPROM
d1101 1
a1101 1
	hw->eeprom.ops.read(hw, list_offset, &id);
d1103 8
a1110 5
	while (!((id == IXGBE_CONTROL_EOL_NL) || (end_data == TRUE))) {
		if (id == sfp_id) {
			list_offset++;
			hw->eeprom.ops.read(hw, list_offset, &data_offset);
			if ((!data_offset) || (data_offset == 0xFFFF))
a1111 57
			ret_val = hw->eeprom.ops.read(hw, data_offset,
			                              &block_crc);
			data_offset++;
			while (!end_data) {
				/*
				 * Read control word from PHY init contents
				 * offset
				 */
				ret_val = hw->eeprom.ops.read(hw, data_offset,
				                              &eword);
				control = (eword & IXGBE_CONTROL_MASK_NL) >>
				          IXGBE_CONTROL_SHIFT_NL;
				edata = eword & IXGBE_DATA_MASK_NL;
				switch (control) {
				case IXGBE_DELAY_NL:
					data_offset++;
					DEBUGOUT1("DELAY: %d MS\n", edata);
					msec_delay(edata);
					break;
				case IXGBE_DATA_NL:
					DEBUGOUT("DATA:  \n");
					data_offset++;
					hw->eeprom.ops.read(hw, data_offset++,
					                    &phy_offset);
					for (i = 0; i < edata; i++) {
						hw->eeprom.ops.read(hw,
						                   data_offset,
						                   &eword);
						hw->phy.ops.write_reg(hw,
						              phy_offset,
						              IXGBE_TWINAX_DEV,
						              eword);
						DEBUGOUT2("Wrote %4.4x to %4.4x\n",
						          eword, phy_offset);
						data_offset++;
						phy_offset++;
					}
					break;
				case IXGBE_CONTROL_NL:
					data_offset++;
					DEBUGOUT("CONTROL: \n");
					if (edata == IXGBE_CONTROL_EOL_NL) {
						DEBUGOUT("EOL\n");
						end_data = TRUE;
					} else if (edata == IXGBE_CONTROL_SOL_NL) {
						DEBUGOUT("SOL\n");
					} else {
						DEBUGOUT("Bad control value\n");
						ret_val = IXGBE_ERR_PHY;
						goto out;
					}
					break;
				default:
					DEBUGOUT("Bad control type\n");
					ret_val = IXGBE_ERR_PHY;
					goto out;
				}
d1114 74
a1187 4
			list_offset += 2;
			ret_val = hw->eeprom.ops.read(hw, list_offset, &id);
			if (ret_val)
				goto out;
d1189 269
d1460 10
d1471 185
a1655 1
	return ret_val;
@


1.1
log
@Import ix, a driver for the Intel 82598 PCI-Express 10 Gig Ethernet Adapter,
based on Intel's ixgbe driver.

Done on borrowed hardware since Intel was too poor to give us a card.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
s32 ixgbe_init_phy_ops_generic(struct ixgbe_hw *hw)
d68 1
a68 1
s32 ixgbe_identify_phy_generic(struct ixgbe_hw *hw)
d70 2
a71 2
	s32 status = IXGBE_ERR_PHY_ADDR_INVALID;
	u32 phy_addr;
d96 1
a96 1
bool ixgbe_validate_phy_addr(struct ixgbe_hw *hw, u32 phy_addr)
d98 2
a99 2
	u16 phy_id = 0;
	bool valid = FALSE;
d116 1
a116 1
s32 ixgbe_get_phy_id(struct ixgbe_hw *hw)
d118 3
a120 3
	u32 status;
	u16 phy_id_high = 0;
	u16 phy_id_low = 0;
d127 1
a127 1
		hw->phy.id = (u32)(phy_id_high << 16);
d131 2
a132 2
		hw->phy.id |= (u32)(phy_id_low & IXGBE_PHY_REVISION_MASK);
		hw->phy.revision = (u32)(phy_id_low & ~IXGBE_PHY_REVISION_MASK);
d143 1
a143 1
enum ixgbe_phy_type ixgbe_get_phy_type_from_id(u32 phy_id)
d170 1
a170 1
s32 ixgbe_reset_phy_generic(struct ixgbe_hw *hw)
d187 2
a188 2
s32 ixgbe_read_phy_reg_generic(struct ixgbe_hw *hw, u32 reg_addr,
                               u32 device_type, u16 *phy_data)
d190 5
a194 5
	u32 command;
	u32 i;
	u32 data;
	s32 status = IXGBE_SUCCESS;
	u16 gssr;
d269 1
a269 1
				*phy_data = (u16)(data);
d286 2
a287 2
s32 ixgbe_write_phy_reg_generic(struct ixgbe_hw *hw, u32 reg_addr,
                                u32 device_type, u16 phy_data)
d289 4
a292 4
	u32 command;
	u32 i;
	s32 status = IXGBE_SUCCESS;
	u16 gssr;
d304 1
a304 1
		IXGBE_WRITE_REG(hw, IXGBE_MSRWD, (u32)phy_data);
d377 1
a377 1
s32 ixgbe_setup_phy_link_generic(struct ixgbe_hw *hw)
d379 4
a382 4
	s32 status = IXGBE_NOT_IMPLEMENTED;
	u32 time_out;
	u32 max_time_out = 10;
	u16 autoneg_reg = IXGBE_MII_AUTONEG_REG;
d437 1
a437 1
s32 ixgbe_setup_phy_link_speed_generic(struct ixgbe_hw *hw,
d439 2
a440 2
                                       bool autoneg,
                                       bool autoneg_wait_to_complete)
d471 2
a472 2
s32 ixgbe_check_phy_link_tnx(struct ixgbe_hw *hw, ixgbe_link_speed *speed,
                             bool *link_up)
d474 6
a479 6
	s32 status = IXGBE_SUCCESS;
	u32 time_out;
	u32 max_time_out = 10;
	u16 phy_link = 0;
	u16 phy_speed = 0;
	u16 phy_data = 0;
d517 2
a518 2
s32 ixgbe_get_phy_firmware_version_tnx(struct ixgbe_hw *hw,
                                       u16 *firmware_version)
d520 1
a520 1
	s32 status = IXGBE_SUCCESS;
d533 1
a533 1
s32 ixgbe_reset_phy_nl(struct ixgbe_hw *hw)
d535 6
a540 6
	u16 phy_offset, control, eword, edata, list_crc, block_crc, id, sfp_id;
	bool end_data = FALSE;
	u16 list_offset, data_offset;
	u16 phy_data = 0;
	s32 ret_val = IXGBE_SUCCESS;
	u32 i;
@

