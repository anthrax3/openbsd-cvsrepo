head	1.8;
access;
symbols
	OPENBSD_6_0:1.8.0.8
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.7.0.22
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.20
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.18
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.14
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.12
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.10
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	OPENBSD_5_0:1.7.0.6
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.6.0.6
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.8
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.4
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.5.0.16
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.14
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.12
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.10
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.18
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.16
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.14
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.12
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.10
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.8
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	SMP:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.03.14.03.38.48;	author jsg;	state Exp;
branches;
next	1.7;
commitid	p4LJxGKbi0BU2cG6;

1.7
date	2010.04.24.08.32.15;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.26.05.42.17;	author ray;	state Exp;
branches;
next	1.5;

1.5
date	2004.06.13.21.49.25;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.26.16.21.46;	author art;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2001.02.26.15.44.46;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.16.15.37.53;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.09.17.10.58;	author chris;	state Exp;
branches;
next	;

1.4.4.1
date	2001.05.14.22.25.39;	author niklas;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2003.05.15.04.08.02;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: cy82c693.c,v 1.7 2010/04/24 08:32:15 kettenis Exp $	*/
/* $NetBSD: cy82c693.c,v 1.1 2000/06/06 03:07:39 thorpej Exp $ */

/*-
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Common routines to read/write control registers on the Cypress 82c693
 * hyperCache(tm) Stand-Alone PCI Peripheral Controller with USB.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/systm.h>

#include <machine/bus.h>

#include <dev/pci/pcivar.h>

#include <dev/pci/cy82c693reg.h>
#include <dev/pci/cy82c693var.h>

static struct cy82c693_handle cyhc_handle;
static int cyhc_initialized;

const struct cy82c693_handle *
cy82c693_init(bus_space_tag_t iot)
{
	bus_space_handle_t ioh;
	int error;

	if (cyhc_initialized) {
		if (iot != cyhc_handle.cyhc_iot)
			panic("cy82c693_init");
		return (&cyhc_handle);
	}

	if ((error = bus_space_map(iot, CYHC_CONFIG_ADDR, 2, 0, &ioh)) != 0) {
		printf("cy82c693_init: bus_space_map failed (%d)", error);
		return (NULL);
	}

	cyhc_handle.cyhc_iot = iot;
	cyhc_handle.cyhc_ioh = ioh;

	cyhc_initialized = 1;

	return (&cyhc_handle);
}

u_int8_t
cy82c693_read(const struct cy82c693_handle *cyhc, int reg)
{
	u_int8_t rv;

	if (cyhc_initialized == 0)
		panic("cy82c693_read");

	bus_space_write_1(cyhc->cyhc_iot, cyhc->cyhc_ioh, 0, reg);
	rv = bus_space_read_1(cyhc->cyhc_iot, cyhc->cyhc_ioh, 1);

	return (rv);
}

void
cy82c693_write(const struct cy82c693_handle *cyhc, int reg, u_int8_t val)
{
	if (cyhc_initialized == 0)
		panic("cy82c693_write");

	bus_space_write_1(cyhc->cyhc_iot, cyhc->cyhc_ioh, 0, reg);
	bus_space_write_1(cyhc->cyhc_iot, cyhc->cyhc_ioh, 1, val);
}
@


1.7
log
@This code is only called during autoconf, and never ever from an
interrupt handler.  So the locking and spl manipulation can simply go
away.

ok deraadt@@, oga@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cy82c693.c,v 1.6 2008/06/26 05:42:17 ray Exp $	*/
a43 1
#include <dev/pci/pcireg.h>
@


1.6
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cy82c693.c,v 1.5 2004/06/13 21:49:25 niklas Exp $	*/
a37 2
#include <sys/cdefs.h>			/* RCS ID & Copyright macro defns */

a40 1
#include <sys/lock.h>
a52 14
struct simplelock cyhc_slock;

#define	CYHC_LOCK(s)							\
do {									\
	s = splhigh();							\
	simple_lock(&cyhc_slock);					\
} while (0)

#define	CYHC_UNLOCK(s)							\
do {									\
	simple_unlock(&cyhc_slock);					\
	splx(s);							\
} while (0)

a56 1
	int s;
a58 4
	simple_lock_init(&cyhc_slock);

	CYHC_LOCK(s);

a59 1
		CYHC_UNLOCK(s);
a65 1
		CYHC_UNLOCK(s);
a74 2
	CYHC_UNLOCK(s);

a80 1
	int s;
d83 1
a83 4
	CYHC_LOCK(s);

	if (cyhc_initialized == 0) {
		CYHC_UNLOCK(s);
a84 1
	}
a88 2
	CYHC_UNLOCK(s);

d95 1
a95 6
	int s;

	CYHC_LOCK(s);

	if (cyhc_initialized == 0) {
		CYHC_UNLOCK(s);
a96 1
	}
a99 2

	CYHC_UNLOCK(s);
@


1.5
log
@debranch SMP, have fun
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.4
log
@Sigh. unstatic the simplelock to make this compile without LOCKDEBUG.
@
text
@d1 1
a1 1
/*	$OpenBSD: cy82c693.c,v 1.3 2001/02/26 15:44:46 art Exp $	*/
d63 1
a63 1
struct simplelock cyhc_slock = SLOCK_INITIALIZER;
d83 2
@


1.4.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: cy82c693.c,v 1.4 2001/02/26 16:21:46 art Exp $	*/
@


1.4.4.2
log
@Biglock!  Most of the logic
comes from NetBSD.
Also a lot of fixes, enough to get a dual cpu machine actually run MP for a
very short while (we are just talking about seconds) before starving out one
of the cpus.  More coming very soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: cy82c693.c,v 1.4.4.1 2001/05/14 22:25:39 niklas Exp $	*/
d63 1
a63 1
struct simplelock cyhc_slock;
a82 2

	simple_lock_init(&cyhc_slock);
@


1.3
log
@Initialize the simple lock properly.
@
text
@d1 1
a1 1
/*	$OpenBSD: cy82c693.c,v 1.2 2001/01/16 15:37:53 art Exp $	*/
d63 1
a63 1
static struct simplelock cyhc_slock = SLOCK_INITIALIZER;
@


1.2
log
@Print more diagnostics on bus_space_map failure.
@
text
@d1 1
a1 1
/*	$OpenBSD: cy82c693.c,v 1.1 2000/06/09 17:10:58 chris Exp $	*/
d63 1
a63 3
#if 0 /* SMP */
static struct simplelock cyhc_slock = SIMPLELOCK_INITIALIZER;
#endif
@


1.1
log
@Add common routines for read/writing Cypress 82c693 control registers from
NetBSD
This will be used in pciide shortly, and also can be used in code which controls
other functions of this chip (pci-isa and usb)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d84 1
d95 1
a95 1
	if (bus_space_map(iot, CYHC_CONFIG_ADDR, 2, 0, &ioh) != 0) {
d97 1
@

