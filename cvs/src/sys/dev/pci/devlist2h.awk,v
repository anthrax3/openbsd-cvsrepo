head	1.8;
access;
symbols
	OPENBSD_6_0:1.8.0.42
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.30
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.38
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.36
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.34
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.32
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.28
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.26
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.24
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.22
	OPENBSD_5_0:1.8.0.20
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.18
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.16
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.12
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.14
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.10
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.8
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.6
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.4
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.2
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.6.0.26
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.24
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.22
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.20
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.18
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.16
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.14
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.12
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.10
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.8
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.6.0.6
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.4.0.12
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.10
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.8
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.8
date	2007.02.21.13.17.28;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2007.02.21.13.08.22;	author dlg;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.27.01.19.11;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.26.22.27.37;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	98.07.21.20.35.18;	author mickey;	state Exp;
branches
	1.4.8.1;
next	1.3;

1.3
date	97.11.07.08.07.26;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.04.28.04.30.52;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.39;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.39;	author deraadt;	state Exp;
branches;
next	;

1.4.8.1
date	2001.05.14.22.25.39;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.8
log
@put structs after copyright notice; ok dlg
@
text
@#! /usr/bin/awk -f
#	$OpenBSD: devlist2h.awk,v 1.7 2007/02/21 13:08:22 dlg Exp $
#	$NetBSD: devlist2h.awk,v 1.2 1996/01/22 21:08:09 cgd Exp $
#
# Copyright (c) 1995, 1996 Christopher G. Demetriou
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#      This product includes software developed by Christopher G. Demetriou.
# 4. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
BEGIN {
	nproducts = nvendor_dup = nvendors = 0
	dfile="pcidevs_data.h"
	hfile="pcidevs.h"
}
NR == 1 {
	VERSION = $0
	gsub("\\$", "", VERSION)

	printf("/*\n") > dfile
	printf(" * THIS FILE AUTOMATICALLY GENERATED.  DO NOT EDIT.\n") \
	    > dfile
	printf(" *\n") > dfile
	printf(" * generated from:\n") > dfile
	printf(" *\t%s\n", VERSION) > dfile
	printf(" */\n\n") > dfile

	printf("/*\n") > hfile
	printf(" * THIS FILE AUTOMATICALLY GENERATED.  DO NOT EDIT.\n") \
	    > hfile
	printf(" *\n") > hfile
	printf(" * generated from:\n") > hfile
	printf(" *\t%s\n", VERSION) > hfile
	printf(" */\n") > hfile

	next
}
$1 == "vendor" {
	nvendors++

	if ($2 in vendorindex) {
		printf("duplicate vendor name %s\n", $2);
		nvendor_dup++;
	}

	vendorindex[$2] = nvendors;		# record index for this name, for later.
	vendors[nvendors, 1] = $2;		# name
	vendors[nvendors, 2] = $3;		# id
	printf("#define\tPCI_VENDOR_%s\t%s\t", vendors[nvendors, 1],
	    vendors[nvendors, 2]) > hfile

	i = 3; f = 4;

	# comments
	ocomment = oparen = 0
	if (f <= NF) {
		printf("\t/* ") > hfile
		ocomment = 1;
	}
	while (f <= NF) {
		if ($f == "#") {
			printf("(") > hfile
			oparen = 1
			f++
			continue
		}
		if (oparen) {
			printf("%s", $f) > hfile
			if (f < NF)
				printf(" ") > hfile
			f++
			continue
		}
		vendors[nvendors, i] = $f
		printf("%s", vendors[nvendors, i]) > hfile
		if (f < NF)
			printf(" ") > hfile
		i++; f++;
	}
	if (oparen)
		printf(")") > hfile
	if (ocomment)
		printf(" */") > hfile
	printf("\n") > hfile

	next
}
$1 == "product" {
	nproducts++

	products[nproducts, 1] = $2;		# vendor name
	products[nproducts, 2] = $3;		# product id
	products[nproducts, 3] = $4;		# id
	printf("#define\tPCI_PRODUCT_%s_%s\t%s\t", products[nproducts, 1],
	    products[nproducts, 2], products[nproducts, 3]) > hfile

	i=4; f = 5;

	# comments
	ocomment = oparen = 0
	if (f <= NF) {
		printf("\t/* ") > hfile
		ocomment = 1;
	}
	while (f <= NF) {
		if ($f == "#") {
			printf("(") > hfile
			oparen = 1
			f++
			continue
		}
		if (oparen) {
			printf("%s", $f) > hfile
			if (f < NF)
				printf(" ") > hfile
			f++
			continue
		}
		products[nproducts, i] = $f
		printf("%s", products[nproducts, i]) > hfile
		if (f < NF)
			printf(" ") > hfile
		i++; f++;
	}
	if (oparen)
		printf(")") > hfile
	if (ocomment)
		printf(" */") > hfile
	printf("\n") > hfile

	next
}
{
	if ($0 == "")
		blanklines++
	print $0 > hfile
	if (blanklines < 2)
		print $0 > dfile
}
END {
	# print out the match tables

	printf("\n") > dfile

	if (nvendor_dup > 0)
		exit(1);

	printf("/* Descriptions of known vendors and devices. */\n") > dfile
	printf("struct pci_known_vendor {\n") > dfile
	printf("\tpci_vendor_id_t vendor;\n") > dfile
	printf("\tconst char *vendorname;\n") > dfile
	printf("};\n\n") > dfile

	printf("struct pci_known_product {\n") > dfile
	printf("\tpci_vendor_id_t vendor;\n") > dfile
	printf("\tpci_product_id_t product;\n") > dfile
	printf("\tconst char *productname;\n") > dfile
	printf("};\n\n") > dfile


	printf("static const struct pci_known_product pci_known_products[] = {\n") \
	    > dfile
	for (i = 1; i <= nproducts; i++) {
		printf("\t{\n") > dfile
		printf("\t    PCI_VENDOR_%s, PCI_PRODUCT_%s_%s,\n",
		    products[i, 1], products[i, 1], products[i, 2]) \
		    > dfile

		printf("\t    \"") > dfile
		j = 4;
		needspace = 0;
		while (products[i, j] != "") {
			if (needspace)
				printf(" ") > dfile
			printf("%s", products[i, j]) > dfile
			needspace = 1
			j++
		}
		printf("\",\n") > dfile
		printf("\t},\n") > dfile
	}
	printf("\t{ 0, 0, NULL, }\n") > dfile
	printf("};\n\n") > dfile

	printf("static const struct pci_known_vendor pci_known_vendors[] = {\n") \
	    > dfile
	for (i = 1; i <= nvendors; i++) {
		printf("\t{\n") > dfile
		printf("\t    PCI_VENDOR_%s,\n", vendors[i, 1]) \
		    > dfile
		printf("\t    \"") > dfile
		j = 3;
		needspace = 0;
		while (vendors[i, j] != "") {
			if (needspace)
				printf(" ") > dfile
			printf("%s", vendors[i, j]) > dfile
			needspace = 1
			j++
		}
		printf("\",\n") > dfile
		printf("\t},\n") > dfile
	}
	printf("\t{ 0, NULL, }\n") > dfile
	printf("};\n") > dfile
}
@


1.7
log
@put the structs defining the content of pcidevs_data.h into that header
file, rather than in pci_subr.c before theyre used. this allows the header
to be used elsewhere without needing to copy a chunk out of pci_subr.c.

ok miod@@ deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: devlist2h.awk,v 1.5 2001/01/26 22:27:37 mickey Exp $
a49 12
	printf("/* Descriptions of known vendors and devices. */\n") > dfile
	printf("struct pci_known_vendor {\n") > dfile
	printf("\tpci_vendor_id_t vendor;\n") > dfile
	printf("\tconst char *vendorname;\n") > dfile
	printf("};\n\n") > dfile

	printf("struct pci_known_product {\n") > dfile
	printf("\tpci_vendor_id_t vendor;\n") > dfile
	printf("\tpci_product_id_t product;\n") > dfile
	printf("\tconst char *productname;\n") > dfile
	printf("};\n\n") > dfile

d169 13
@


1.6
log
@split vendor & product lists into 2 tables, saving 12K
@
text
@d48 13
a60 1
	printf(" */\n") > dfile
@


1.5
log
@constify pci_knowndevs
@
text
@d2 1
a2 1
#	$OpenBSD: devlist2h.awk,v 1.4 1998/07/21 20:35:18 mickey Exp $
d170 2
a171 1
	printf("static const struct pci_knowndev pci_knowndevs[] = {\n") > dfile
a176 16
		printf("\t    ") > dfile
		printf("0") > dfile
		printf(",\n") > dfile

		vendi = vendorindex[products[i, 1]];
		printf("\t    \"") > dfile
		j = 3;
		needspace = 0;
		while (vendors[vendi, j] != "") {
			if (needspace)
				printf(" ") > dfile
			printf("%s", vendors[vendi, j]) > dfile
			needspace = 1
			j++
		}
		printf("\",\n") > dfile
d191 5
d198 1
a198 3
		printf("\t    PCI_VENDOR_%s, 0,\n", vendors[i, 1]) \
		    > dfile
		printf("\t    PCI_KNOWNDEV_NOPROD,\n") \
a210 1
		printf("\t    NULL,\n") > dfile
d213 1
a213 1
	printf("\t{ 0, 0, 0, NULL, NULL, }\n") > dfile
@


1.4
log
@check for vendor name dups
@
text
@d2 1
a2 1
#	$OpenBSD: devlist2h.awk,v 1.3 1997/11/07 08:07:26 niklas Exp $
d170 1
a170 1
	printf("struct pci_knowndev pci_knowndevs[] = {\n") > dfile
@


1.4.8.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d2 1
a2 1
#	$OpenBSD: devlist2h.awk,v 1.6 2001/01/27 01:19:11 deraadt Exp $
d170 1
a170 2
	printf("static const struct pci_known_product pci_known_products[] = {\n") \
	    > dfile
d176 16
a205 5
	printf("\t{ 0, 0, NULL, }\n") > dfile
	printf("};\n\n") > dfile

	printf("static const struct pci_known_vendor pci_known_vendors[] = {\n") \
	    > dfile
d208 3
a210 1
		printf("\t    PCI_VENDOR_%s,\n", vendors[i, 1]) \
d223 1
d226 1
a226 1
	printf("\t{ 0, NULL, }\n") > dfile
@


1.3
log
@$OpenBSD$
@
text
@d2 1
a2 1
#	$OpenBSD: devlist2h.awk,v 1.2 1996/01/22 21:08:09 cgd Exp $
d34 1
a34 1
	nproducts = nvendors = 0
d63 5
d166 3
@


1.2
log
@Integrate new version of devlist2h.awk from NetBSD 1/22/96; regenerate
PCI device lists to compiles with PCI_VERBOSE works again
@
text
@d2 1
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
#	$NetBSD: devlist2h.awk,v 1.1 1995/06/18 01:07:06 cgd Exp $
d4 1
a4 1
# Copyright (c) 1995 Christopher G. Demetriou
d57 1
a57 1
	continue
d102 1
a102 1
	continue
a114 6
	# remember if the device is unsupported
	if ($f == "UNSUPP") {
		products[nproducts, 1, unsupported] = 1;
		f++
	}

d147 1
a147 1
	continue
d168 1
a168 4
		if (products[i, 1, unsupp])
			printf("PCI_KNOWNDEV_UNSUPP") > dfile
		else
			printf("0") > dfile
d201 1
a201 1
		printf("\t    PCI_KNOWNDEV_UNSUPP | PCI_KNOWNDEV_NOPROD,\n") \
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
