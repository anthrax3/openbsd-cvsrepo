head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.12
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.10
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.4
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.40
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.38
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.34
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.32
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.30
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.28
	OPENBSD_5_0:1.10.0.26
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.24
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.22
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.18
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.20
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.16
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.14
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.12
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.10
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	SMP:1.9.0.2
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5;
locks; strict;
comment	@ * @;


1.11
date	2014.12.22.02.28.52;	author tedu;	state Exp;
branches;
next	1.10;
commitid	yM2VFFhpDTeFQlve;

1.10
date	2005.08.09.04.10.12;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.29.10.05.07;	author miod;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2003.09.29.04.10.29;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.29.03.08.17;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.25.22.06.00;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.19.12.25.52;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.19.11.57.07;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.19.04.52.26;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.19.04.45.04;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.19.03.36.21;	author mickey;	state Exp;
branches;
next	;

1.9.2.1
date	2004.02.19.10.56.27;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.11
log
@unifdef INET
@
text
@/*	$OpenBSD: if_mtd_pci.c,v 1.10 2005/08/09 04:10:12 mickey Exp $	*/

/*
 * Copyright (c) 2003 Oleg Safiullin <form@@pdp11.org.ru>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice unmodified, this list of conditions, and the following
 *    disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/systm.h>
#include <sys/socket.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <machine/bus.h>

#include <dev/mii/miivar.h>

#include <dev/pci/pcidevs.h>
#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>

#include <dev/ic/mtd8xxreg.h>
#include <dev/ic/mtd8xxvar.h>

static int mtd_pci_match(struct device *, void *, void *);
static void mtd_pci_attach(struct device *, struct device *, void *);


struct cfattach mtd_pci_ca = {
	sizeof(struct mtd_softc), mtd_pci_match, mtd_pci_attach
};

const static struct pci_matchid mtd_pci_devices[] = {
	{ PCI_VENDOR_MYSON, PCI_PRODUCT_MYSON_MTD800 },
	{ PCI_VENDOR_MYSON, PCI_PRODUCT_MYSON_MTD803 },
	{ PCI_VENDOR_MYSON, PCI_PRODUCT_MYSON_MTD891 },
};


static int
mtd_pci_match(struct device *parent, void *match, void *aux)
{
	return (pci_matchbyid((struct pci_attach_args *)aux, mtd_pci_devices,
	    sizeof(mtd_pci_devices) / sizeof(mtd_pci_devices[0])));
}


static void
mtd_pci_attach(struct device *parent, struct device *self, void *aux)
{
	struct mtd_softc *sc = (void *)self;
	struct pci_attach_args *pa = aux;
	pci_intr_handle_t ih;
	const char *intrstr = NULL;
	u_int32_t command;
	bus_size_t iosize;

	sc->sc_devid = PCI_PRODUCT(pa->pa_id);
	command = pci_conf_read(pa->pa_pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);
	if (sc->sc_devid == PCI_PRODUCT_MYSON_MTD800 &&
	    pci_conf_read(pa->pa_pc, pa->pa_tag, MTD_PCI_LOIO) & 0x300) {
		pa->pa_flags &= ~PCI_FLAGS_IO_ENABLED;
		command &= ~PCI_COMMAND_IO_ENABLE;
	}
	pci_conf_write(pa->pa_pc, pa->pa_tag, PCI_COMMAND_STATUS_REG, command);

	command = pci_conf_read(pa->pa_pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);
	if (command & PCI_COMMAND_MEM_ENABLE) {
		if (pci_mapreg_map(pa, MTD_PCI_LOMEM, PCI_MAPREG_TYPE_MEM, 0,
		    &sc->sc_bust, &sc->sc_bush, NULL, &iosize, 0)) {
			printf(": can't map mem space\n");
			return;
		}
	} else {
		if (pci_mapreg_map(pa, MTD_PCI_LOIO, PCI_MAPREG_TYPE_IO, 0,
		    &sc->sc_bust, &sc->sc_bush, NULL, &iosize, 0)) {
			printf(": can't map io space\n");
			return;
		}
	}

	/*
	 * Allocate our interrupt.
	 */
	if (pci_intr_map(pa, &ih)) {
		printf(": couldn't map interrupt\n");
		bus_space_unmap(sc->sc_bust, sc->sc_bush, iosize);
		return;
	}

	intrstr = pci_intr_string(pa->pa_pc, ih);
	if (pci_intr_establish(pa->pa_pc, ih, IPL_NET, mtd_intr, sc,
	    self->dv_xname) == NULL) {
		printf(": couldn't establish interrupt");
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
		bus_space_unmap(sc->sc_bust, sc->sc_bush, iosize);
		return;
	}
	printf(": %s", intrstr);

	sc->sc_dmat = pa->pa_dmat;
	mtd_attach(sc);
}
@


1.10
log
@do not set PCI_COMMAND_MASTER_ENABLE explicitly as it's already set in pcisubmatch(); kettenis@@ testing; brad@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mtd_pci.c,v 1.9 2003/09/29 10:05:07 miod Exp $	*/
a38 1
#ifdef INET
a40 1
#endif
@


1.9
log
@Make this compile.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mtd_pci.c,v 1.8 2003/09/29 04:10:29 mickey Exp $	*/
a89 1
	command |= PCI_COMMAND_MASTER_ENABLE;
@


1.9.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.8
log
@autodetect io/mem mappings; from form@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mtd_pci.c,v 1.7 2003/09/29 03:08:17 mickey Exp $	*/
d89 1
a89 1
	command = pci_conf_read(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);
d96 1
a96 1
	pci_conf_write(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG, command);
d98 1
a98 1
	command = pci_conf_read(pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);
@


1.7
log
@gotta remember the product id and disable io mapping for old 800 chips; from form@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mtd_pci.c,v 1.6 2003/09/25 22:06:00 mickey Exp $	*/
d85 1
d89 2
d92 1
a92 1
	    pci_conf_read(pa->pa_pc, pa->pa_tag, MTD_PCI_LOIO) & 0x300)
d94 3
d98 13
a110 11
#ifndef MTD_USE_IO
	if (pci_mapreg_map(pa, MTD_PCI_LOMEM, PCI_MAPREG_TYPE_MEM, 0,
	    &sc->sc_bust, &sc->sc_bush, NULL, &iosize, 0)) {
		printf(": can't map mem space\n");
		return;
	}
#else	/* MTD_USE_IO */
	if (pci_mapreg_map(pa, MTD_PCI_LOIO, PCI_MAPREG_TYPE_IO, 0,
	    &sc->sc_bust, &sc->sc_bush, NULL, &iosize, 0)) {
		printf(": can't map io space\n");
		return;
a111 1
#endif	/* MTD_USE_IO */
@


1.6
log
@update fom form@@ including support for 891 chips and more
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mtd_pci.c,v 1.5 2003/08/19 12:25:52 mickey Exp $	*/
d86 5
@


1.5
log
@cleanup; from form@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mtd_pci.c,v 1.4 2003/08/19 11:57:07 mickey Exp $	*/
d4 1
a4 1
 * Copyright (c) 2003 Oleg Safiullin
d52 2
a53 2
#include <dev/ic/mtd803reg.h>
#include <dev/ic/mtd803var.h>
d58 1
d64 1
d66 1
d69 1
d77 1
d89 1
a89 1
	    &sc->bus_tag, &sc->bus_handle, NULL, &iosize, 0)) {
d95 1
a95 1
	    &sc->bus_tag, &sc->bus_handle, NULL, &iosize, 0)) {
d106 1
a106 1
		bus_space_unmap(sc->bus_tag, sc->bus_handle, iosize);
d111 1
a111 1
	if (pci_intr_establish(pa->pa_pc, ih, IPL_NET, mtd_irq_h, sc,
d117 1
a117 1
		bus_space_unmap(sc->bus_tag, sc->bus_handle, iosize);
d122 2
a123 2
	sc->dma_tag = pa->pa_dmat;
	mtd_config(sc);
@


1.4
log
@cleanup; from form@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mtd_pci.c,v 1.3 2003/08/19 04:52:26 mickey Exp $	*/
a80 2

	command = pci_conf_read(pa->pa_pc, pa->pa_tag, PCI_COMMAND_STATUS_REG);
@


1.3
log
@prefer memory mappings (to io)
@
text
@d1 1
a1 1
/*	$OpenBSD: if_mtd_pci.c,v 1.2 2003/08/19 04:45:04 mickey Exp $	*/
a80 1
	u_int32_t command;
d90 1
a90 1
#else	/* !MTD_USE_MEMIO */
d96 1
a96 1
#endif	/* MTD_USE_MEMIO */
@


1.2
log
@use pci_mapreg_map() to map the regs and some cleanups; form@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d85 1
a85 1
#ifdef MTD_USE_MEMIO
@


1.1
log
@myson mtd803 ether and enable mtdphy no; form netbsd via form@@
@
text
@d1 2
d35 1
d38 1
d43 1
d45 1
d47 1
d51 1
a79 1
	bus_addr_t iobase;
d86 2
a87 10
	if (!(command & PCI_COMMAND_MEM_ENABLE)) {
		printf(": failed to enable memory mapping\n");
		return;
	}
	if (pci_mem_find(pa->pa_pc, pa->pa_tag, MTD_PCI_LOMEM, &iobase,
	    &iosize, NULL)) {
		printf(": can't find mem space\n");
		return;
	}
	if (bus_space_map(pa->pa_memt, iobase, iosize, 0, &sc->bus_handle)) {
a90 1
	sc->bus_tag = pa->pa_memt;
d92 3
a94 12
	if (!(command & PCI_COMMAND_IO_ENABLE)) {
		printf(": failed to enable i/o ports\n");
		return;
	}

	if (pci_io_find(pa->pa_pc, pa->pa_tag, MTD_PCI_LOIO, &iobase,
	    &iosize)) {
		printf(": can't find i/o space\n");
		return;
	}
	if (bus_space_map(pa->pa_iot, iobase, iosize, 0, &sc->bus_handle)) {
		printf(": can't map i/o space\n");
a96 1
	sc->bus_tag = pa->pa_iot;
d104 1
d115 1
@

