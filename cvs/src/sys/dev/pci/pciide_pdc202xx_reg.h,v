head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.26
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.28
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.16
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.24
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.22
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.20
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.18
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.14
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.12
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.10
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.8
	OPENBSD_5_0:1.15.0.6
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.4
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.14.0.14
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.16
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.12
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.10
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.8
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.6
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.4
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.2
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.5.0.4
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.2
	SMP_BASE:1.2
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2010.07.23.07.47.13;	author jsg;	state Exp;
branches;
next	1.14;

1.14
date	2006.06.24.07.51.30;	author jsg;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.10.21.45.41;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2005.06.15.04.45.49;	author fgsch;	state Exp;
branches;
next	1.11;

1.11
date	2004.09.24.07.38.38;	author grange;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.28.21.01.43;	author grange;	state Exp;
branches;
next	1.9;

1.9
date	2003.07.23.22.07.15;	author grange;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.21.20.10.34;	author grange;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.16.16.15.46;	author grange;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.01.16.57.54;	author gluk;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.03.22.03.44;	author chris;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2001.04.04.07.02.54;	author csapuntz;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.16.09.16.06;	author chris;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.10.22.54.46;	author chris;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	99.10.04.22.54.18;	author deraadt;	state Exp;
branches;
next	;

1.2.2.1
date	2001.05.14.22.25.55;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2001.10.31.03.22.47;	author nate;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2003.03.28.00.38.24;	author niklas;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	2004.02.19.10.56.29;	author niklas;	state Exp;
branches;
next	;

1.5.4.1
date	2002.06.11.03.42.27;	author art;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2003.05.19.22.19.08;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Manuel Bouyer rescinded clauses 3 and 4 of his license text.
@
text
@/*	$OpenBSD: pciide_pdc202xx_reg.h,v 1.14 2006/06/24 07:51:30 jsg Exp $	*/
/*	$NetBSD: pciide_pdc202xx_reg.h,v 1.5 2001/07/05 08:38:27 toshii Exp $ */

/*
 * Copyright (c) 1999 Manuel Bouyer.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#ifndef _DEV_PCI_PCIIDE_PDC202XX_REG_H_
#define _DEV_PCI_PCIIDE_PDC202XX_REG_H_

/*
 * Registers definitions for PROMISE PDC20246/PDC20262 PCI IDE controller.
 * Unfortunably the HW docs are not publically available. I've been able
 * to get a partial one for the PDC20246, and a better one for the PDC20262
 * from Promise.
 */

#define PDC2xx_STATE		0x50
#define PDC2xx_STATE_IDERAID		0x0001
#define PDC2xx_STATE_NATIVE		0x0080
/* controller initial state values(PDC20246 only) */
#define PDC246_STATE_SHIPID		0x8000
#define PDC246_STATE_IOCHRDY		0x0400
#define PDC246_STATE_LBA(channel)	(0x0100 << (channel))
#define PDC246_STATE_ISAIRQ		0x0008
#define PDC246_STATE_EN(channel)	(0x0002 << (channel))
/* controller initial state values(PDC20262 only) */
#define PDC262_STATE_EN(chan)		(0x1000 << (chan))
#define PDC262_STATE_80P(chan)		(0x0400 << (chan))

/* per-drive timings */
#define PDC2xx_TIM(channel, drive) (0x60 + 4 * (drive) + 8 * (channel))
#define PDC2xx_TIM_SET_PA(r, x)	(((r) & 0xfffffff0) | ((x) & 0xf))
#define PDC2xx_TIM_SET_PB(r, x)	(((r) & 0xffffe0ff) | (((x) & 0x1f) << 8))
#define PDC2xx_TIM_SET_MB(r, x)	(((r) & 0xffff1fff) | (((x) & 0x7) << 13))
#define PDC2xx_TIM_SET_MC(r, x)	(((r) & 0xfff0ffff) | (((x) & 0xf) << 16))
#define PDC2xx_TIM_PRE		0x00000010
#define PDC2xx_TIM_IORDY	0x00000020
#define PDC2xx_TIM_ERRDY	0x00000040
#define PDC2xx_TIM_SYNC		0x00000080
#define PDC2xx_TIM_DMAW		0x00100000
#define PDC2xx_TIM_DMAR		0x00200000
#define PDC2xx_TIM_IORDYp	0x00400000
#define PDC2xx_TIM_DMARQp	0x00800000

/* The following are extensions of the DMA registers */

/* Ultra-DMA mode 3/4 control (PDC20262 only, 1 byte) */
#define PDC262_U66	0x11
#define PDC262_U66_EN(chan) (0x2 << ((chan) *2))
/* primary mode (1 byte) */
#define PDC2xx_PM	0x1a
/* secondary mode (1 byte) */
#define PDC2xx_SM	0x1b
/* System control register (4 bytes) */
#define PDC2xx_SCR	0x1c
#define PDC2xx_SCR_SET_GEN(r,x) (((r) & 0xffffff00) | ((x) & 0xff))
#define PDC2xx_SCR_EMPTY(channel) (0x00000100 << (4 * channel))
#define PDC2xx_SCR_FULL(channel) (0x00000200 << (4 * channel))
#define PDC2xx_SCR_INT(channel) (0x00000400 << (4 * channel))
#define PDC2xx_SCR_ERR(channel) (0x00000800 << (4 * channel))
#define PDC2xx_SCR_SET_I2C(r,x) (((r) & 0xfff0ffff) | (((x) & 0xf) << 16))
#define PDC2xx_SCR_SET_POLL(r,x) (((r) & 0xff0fffff) | (((x) & 0xf) << 20))
#define PDC2xx_SCR_DMA		0x01000000
#define PDC2xx_SCR_IORDY	0x02000000
#define PDC2xx_SCR_G2FD		0x04000000
#define PDC2xx_SCR_FLOAT	0x08000000
#define PDC2xx_SCR_RSET		0x10000000
#define PDC2xx_SCR_TST		0x20000000
/* Values for "General Purpose Register" (PDC20262 only) */
#define PDC262_SCR_GEN_LAT	0x20

/* ATAPI port ((PDC20262 only) (4 bytes) */
#define PDC262_ATAPI(chan) (0x20 + (4 * (chan)))
#define PDC262_ATAPI_WC_MASK	0x00000fff
#define PDC262_ATAPI_DMA_READ	0x00001000
#define PDC262_ATAPI_DMA_WRITE	0x00002000
#define PDC262_ATAPI_UDMA	0x00004000
#define PDC262_ATAPI_LBA48_READ  0x05000000
#define PDC262_ATAPI_LBA48_WRITE 0x06000000

/*
 * The timings provided here cmoes from the PDC20262 docs. I hope they are
 * rigth for the PDC20246 too ...
 */

static int8_t pdc2xx_pa[] = {0x9, 0x5, 0x3, 0x2, 0x1};
static int8_t pdc2xx_pb[] = {0x13, 0xc, 0x8, 0x6, 0x4};
static int8_t pdc2xx_dma_mb[] = {0x3, 0x3, 0x3};
static int8_t pdc2xx_dma_mc[] = {0x5, 0x4, 0x3};
static int8_t pdc2xx_udma_mb[] = {0x3, 0x2, 0x1, 0x2, 0x1, 0x1};
static int8_t pdc2xx_udma_mc[] = {0x3, 0x2, 0x1, 0x2, 0x1, 0x1};

/*
 * Registers definitions for Promise PDC20268 and above chips
 */
#define PDC268_INDEX(chan)	(0x01 + IDEDMA_SCH_OFFSET * (chan))
#define PDC268_DATA(chan)	(0x03 + IDEDMA_SCH_OFFSET * (chan))
#define PDC268_CABLE		0x04
#define PDC268_INTR		0x20

/*
 * PDC203xx register definitions.
 */
#define PDC203xx_NCHANNELS	4
#define PDC203xx_BAR_IDEREGS	0x1c

/*
 * PDC205xx register definitions.
 */
#define PDC40718_NCHANNELS	4
#define PDC20575_NCHANNELS	3

#define	PDC205_REGADDR(base,ch)	((base)+((ch)<<8))
#define	PDC205_SSTATUS(ch)	PDC205_REGADDR(0x400,ch)
#define	PDC205_SERROR(ch)	PDC205_REGADDR(0x404,ch)
#define	PDC205_SCONTROL(ch)	PDC205_REGADDR(0x408,ch)
#define	PDC205_MULTIPLIER(ch)	PDC205_REGADDR(0x4e8,ch)

#define	SCONTROL_WRITE(ps,channel,scontrol)	\
	bus_space_write_4((ps)->ba5_st, (ps)->ba5_sh,	\
	PDC205_SCONTROL(channel), scontrol)

#define	SSTATUS_READ(sc,channel)	\
	bus_space_read_4((ps)->ba5_st, (ps)->ba5_sh,	\
	PDC205_SSTATUS(channel))


/* Private data */
struct pciide_pdcsata {
	bus_space_tag_t			ba5_st;
	bus_space_handle_t		ba5_sh;

	struct {
		bus_space_tag_t		cmd_iot;
		bus_space_handle_t	cmd_iohs[WDC_NREG+WDC_NSHADOWREG];

		bus_space_tag_t		ctl_iot;
		bus_space_handle_t	ctl_ioh;

		bus_space_handle_t	dma_iohs[IDEDMA_NREGS];
	} regs[PDC203xx_NCHANNELS];
};

u_int8_t pdc203xx_read_reg(struct channel_softc *, enum wdc_regs);
void     pdc203xx_write_reg(struct channel_softc *, enum wdc_regs, u_int8_t);

struct channel_softc_vtbl wdc_pdc203xx_vtbl = {
	pdc203xx_read_reg,
	pdc203xx_write_reg,
	wdc_default_lba48_write_reg,
	wdc_default_read_raw_multi_2,
	wdc_default_write_raw_multi_2,
	wdc_default_read_raw_multi_4,
	wdc_default_write_raw_multi_4
};

#endif	/* !_DEV_PCI_PCIIDE_PDC202XX_REG_H_ */
@


1.14
log
@Support for Promise PDC205xx based SATA controllers; adapted
from NetBSD, with additions of some more devices from
Aaron Linville and Henrik Flodell.
ok grange@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pciide_pdc202xx_reg.h,v 1.13 2006/02/10 21:45:41 kettenis Exp $	*/
a14 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Manuel Bouyer.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
@


1.13
log
@Fix LBA48 access for ServerWorks SATA.
ok grange@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pciide_pdc202xx_reg.h,v 1.12 2005/06/15 04:45:49 fgsch Exp $	*/
d134 21
@


1.12
log
@promise pdc203xx support; from bouyer@@netbsd.org via grange@@ with a few
tweaks by me. grange@@ ok who cannot commit atm.
@
text
@d1 1
a1 1
/*	$OpenBSD: pciide_pdc202xx_reg.h,v 1.11 2004/09/24 07:38:38 grange Exp $	*/
d157 1
@


1.11
log
@Multiple inclusion protection.
@
text
@d1 1
a1 1
/*	$OpenBSD: pciide_pdc202xx_reg.h,v 1.10 2003/09/28 21:01:43 grange Exp $	*/
d128 34
@


1.10
log
@kill trailing spaces, no functional changes
@
text
@d1 1
a1 1
/*	$OpenBSD: pciide_pdc202xx_reg.h,v 1.9 2003/07/23 22:07:15 grange Exp $	*/
d35 3
d128 2
@


1.9
log
@Old Promise ATA controllers need some additional operations
during DMA transfers to work correctly with LBA48 drives.
Based on diff from Takeshi Nakayama <tn@@catvmics.ne.jp> for NetBSD
with some corrections from FreeBSD ATA driver.
@
text
@d1 1
a1 1
/*	$OpenBSD: pciide_pdc202xx_reg.h,v 1.8 2003/02/21 20:10:34 grange Exp $	*/
d25 1
a25 1
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,     
d90 1
a90 1
#define PDC2xx_SCR_G2FD		0x04000000		
@


1.8
log
@Fix Manuel Bouyer's copyright, from NetBSD
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pciide_pdc202xx_reg.h,v 1.7 2003/01/16 16:15:46 grange Exp $	*/
d103 2
@


1.7
log
@- add two inline functions for accessing chip configuration space
  through the index and data registers
- proper registers and bits names
- more debug in cable detection
- back the code for checking interrupt asserting in case of shared IRQ,
  it seems to solve the problem with repeatable ``bugus intr'' messages
  in PDC20376 (one more step to get it working); based on tests by
  j@@pureftpd.org

Some input and ok from costa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pciide_pdc202xx_reg.h,v 1.6 2002/04/01 16:57:54 gluk Exp $	*/
d17 1
a17 2
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
@


1.6
log
@- add support for PDC20268R (not tested) and PDC20269
- fix interrupt handling when IRQ is shared
- cable detection
- sync with NetBSD

Work by Alexander Yurchenko <grange@@rt.mipt.ru>
@
text
@d1 1
a1 1
/*	$OpenBSD: pciide_pdc202xx_reg.h,v 1.5 2001/08/03 22:03:44 chris Exp $	*/
d118 1
a118 1
 * Two registers for PDC20268
d120 4
a123 2
#define PDC268_REG0	0x1
#define PDC268_REG1	0x3
@


1.5
log
@from NetBSD:
Add support for Acard ATP850/860, Highpoint HPT370A, and ALi UDMA4/5 controllers
Workaround some OPTi chipset bugs (opti_chip_map still disabled by default)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d116 6
@


1.5.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pciide_pdc202xx_reg.h,v 1.5 2001/08/03 22:03:44 chris Exp $	*/
a115 6

/*
 * Two registers for PDC20268
 */
#define PDC268_REG0	0x1
#define PDC268_REG1	0x3
@


1.5.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d17 2
a18 1
 *	This product includes software developed by Manuel Bouyer.
d118 1
a118 1
 * Registers definitions for Promise PDC20268 and above chips
d120 2
a121 4
#define PDC268_INDEX(chan)	(0x01 + IDEDMA_SCH_OFFSET * (chan))
#define PDC268_DATA(chan)	(0x03 + IDEDMA_SCH_OFFSET * (chan))
#define PDC268_CABLE		0x04
#define PDC268_INTR		0x20
@


1.4
log
@

Minor cleanup to minimize diffs with NetBSD
@
text
@d1 2
a2 2
/*	$OpenBSD: pciide_pdc202xx_reg.h,v 1.3 2001/03/16 09:16:06 chris Exp $	*/
/*	$NetBSD: pciide_pdc202xx_reg.h,v 1.4 2001/03/12 09:51:21 bouyer Exp $ */
d71 1
a71 1
/* The following are extentions of the DMA registers */
@


1.3
log
@Pull in NetBSD Promise Ultra/100 support

(Now we actually program Ultra/100 modes instead of Ultra/66 modes on the
Ultra/100 controller)

This also fixes interrupt handling on the PDC20265/7 controller.  I suspect
this new interrupt routine for the PDC20255/7 controller should also be used
on the PDC20262.
@
text
@d1 2
a2 2
/*	$OpenBSD: pciide_pdc202xx_reg.h,v 1.2 2000/01/10 22:54:46 chris Exp $	*/
/*	$NetBSD: pciide_pdc202xx_reg.h,v 1.1 1999/08/29 17:20:10 bouyer Exp $ */
d23 10
a32 11
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
@


1.2
log
@Sync w/NetBSD regarding Promise PDC20262 support (the Promise Ultra/66
controller actually works now!) and Manuel Bouyer's copyright.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d76 1
a76 1
#define PDC262_U66_EN(chan) (0x1 << ((chan) *2))
d113 4
a116 4
static int8_t pdc2xx_dma_mb[] = {0x7, 0x3, 0x3};
static int8_t pdc2xx_dma_mc[] = {0xf, 0x4, 0x3};
static int8_t pdc2xx_udma_mb[] = {0x3, 0x2, 0x1, 0x2, 0x1};
static int8_t pdc2xx_udma_mc[] = {0x3, 0x2, 0x1, 0x2, 0x1};
@


1.2.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/*	$OpenBSD: pciide_pdc202xx_reg.h,v 1.4 2001/04/04 07:02:54 csapuntz Exp $	*/
/*	$NetBSD: pciide_pdc202xx_reg.h,v 1.4 2001/03/12 09:51:21 bouyer Exp $ */
d23 11
a33 10
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,     
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d76 1
a76 1
#define PDC262_U66_EN(chan) (0x2 << ((chan) *2))
d113 4
a116 4
static int8_t pdc2xx_dma_mb[] = {0x3, 0x3, 0x3};
static int8_t pdc2xx_dma_mc[] = {0x5, 0x4, 0x3};
static int8_t pdc2xx_udma_mb[] = {0x3, 0x2, 0x1, 0x2, 0x1, 0x1};
static int8_t pdc2xx_udma_mc[] = {0x3, 0x2, 0x1, 0x2, 0x1, 0x1};
@


1.2.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 2
a2 2
/*	$OpenBSD: pciide_pdc202xx_reg.h,v 1.2.2.1 2001/05/14 22:25:55 niklas Exp $	*/
/*	$NetBSD: pciide_pdc202xx_reg.h,v 1.5 2001/07/05 08:38:27 toshii Exp $ */
d71 1
a71 1
/* The following are extensions of the DMA registers */
@


1.2.2.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d17 2
a18 1
 *	This product includes software developed by Manuel Bouyer.
a115 8

/*
 * Registers definitions for Promise PDC20268 and above chips
 */
#define PDC268_INDEX(chan)	(0x01 + IDEDMA_SCH_OFFSET * (chan))
#define PDC268_DATA(chan)	(0x03 + IDEDMA_SCH_OFFSET * (chan))
#define PDC268_CABLE		0x04
#define PDC268_INTR		0x20
@


1.2.2.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d25 1
a25 1
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
d90 1
a90 1
#define PDC2xx_SCR_G2FD		0x04000000
a102 2
#define PDC262_ATAPI_LBA48_READ  0x05000000
#define PDC262_ATAPI_LBA48_WRITE 0x06000000
@


1.1
log
@promise support; chris@@ took it from netbsd
@
text
@d1 1
d38 4
a41 4
 * Registers definitions for PROMISE PDC20246 PCI IDE controller.
 * Unfortunably the HW docs available don't provide much informations
 * Most of the values set in registers comes from the FreeBSD and linux
 * drivers, and from experiments with the BIOS of a Promise Ultra/33 board.
a43 1
/* controller initial state */
d45 1
a45 3
#define PDC2xx_STATE_SHIPID		0x8000
#define PDC2xx_STATE_IOCHRDY		0x0400
#define PDC2xx_STATE_LBA(channel)	(0x0100 << (channel))
d47 9
a55 3
#define PDC2xx_STATE_ISAIRQ		0x0008
#define PDC2xx_STATE_EN(channel)	(0x0002 << (channel))
#define PDC2xx_STATE_IDERAID		0x0001
d74 3
d83 1
a83 1
#define PDC2xx_SCR_SET_GEN(r,x) (((r) & 0xfffffff0) | ((x) & 0xf))
d96 9
d107 2
a108 4
 * The timings provided here results from things gathered from the FreeBSD
 * driver and experimentations with the BIOS of a promise board.
 * Unfortunably I didn't have enouth HW to test all the modes.
 * They may be suboptimal.
d111 2
a112 2
static int8_t pdc2xx_pa[] = {0x4, 0x4, 0x4, 0x7, 0x3};
static int8_t pdc2xx_pb[] = {0x13, 0x13, 0x13, 0xf, 0x7};
d116 1
a116 1
static int8_t pdc2xx_udma_mc[] = {0x1, 0x1, 0x1, 0x1, 0x1};
@

