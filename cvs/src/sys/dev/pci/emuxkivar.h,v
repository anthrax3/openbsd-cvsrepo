head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.10.0.34
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.22
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.30
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.28
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.26
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.24
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.20
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.18
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.16
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.14
	OPENBSD_5_0:1.10.0.12
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.10
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.8
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.4
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.10
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.8
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.6
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.4
	UBC:1.3.0.2
	UBC_BASE:1.3
	SMP:1.2.0.2;
locks; strict;
comment	@ * @;


1.11
date	2016.09.19.06.46.44;	author ratchov;	state Exp;
branches;
next	1.10;
commitid	qGgYgJTgEFuAoGj4;

1.10
date	2008.12.09.12.30.12;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2008.10.29.22.39.44;	author jakemsr;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.26.05.42.17;	author ray;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.30.22.17.47;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.26.08.01.42;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.18.14.32.13;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.03.21.13.20;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.26.18.16.02;	author mickey;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2001.10.24.15.09.28;	author brad;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2001.10.24.03.21.06;	author mickey;	state Exp;
branches;
next	;

1.2.2.1
date	2001.10.31.03.22.45;	author nate;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2001.12.05.00.43.29;	author niklas;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2003.03.28.00.38.21;	author niklas;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	2003.05.13.19.35.05;	author ho;	state Exp;
branches;
next	;

1.3.2.1
date	2002.06.11.03.42.24;	author art;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2003.05.19.22.18.00;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove unused getdev() audio driver functions.
@
text
@/*	$OpenBSD: emuxkivar.h,v 1.10 2008/12/09 12:30:12 brad Exp $	*/
/*	$NetBSD: emuxkivar.h,v 1.1 2001/10/17 18:39:41 jdolecek Exp $	*/

/*-
 * Copyright (c) 2001 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Yannick Montulet.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _DEV_PCI_EMU10K1VAR_H_
#define _DEV_PCI_EMU10K1VAR_H_

#define	EMU_PCI_CBIO		0x10
#define	EMU_SUBSYS_APS		0x40011102

/*
 * dma memory management
 */

struct dmamem {
	bus_dma_tag_t   dmat;
	bus_size_t      size;
	bus_size_t      align;
	bus_size_t      bound;
	bus_dma_segment_t *segs;
	int             nsegs;
	int             rsegs;
	caddr_t         kaddr;
	bus_dmamap_t    map;
};

#define	KERNADDR(ptr)		((void *)((ptr)->kaddr))
#define	DMASEGADDR(ptr, segno)	((ptr)->segs[segno].ds_addr)
#define	DMAADDR(ptr)		DMASEGADDR(ptr, 0)
#define DMASIZE(ptr)		((ptr)->size)

/*
 * Emu10k1 hardware limits
 */

#define	EMU_PTESIZE		4096
#define	EMU_MAXPTE ((EMU_CHAN_PSST_LOOPSTARTADDR_MASK + 1) /	\
			EMU_PTESIZE)
#define EMU_NUMCHAN		64
#define EMU_NUMRECSRCS	3

#define	EMU_DMA_ALIGN	4096
#define	EMU_DMAMEM_NSEG	1

/*
 * Emu10k1 memory management
 */

struct emuxki_mem {
	LIST_ENTRY(emuxki_mem) next;
	struct dmamem  *dmamem;
	u_int16_t       ptbidx;
#define	EMU_RMEM		0xFFFF		/* recording memory */
};

/*
 * Emu10k1 play channel params
 */

struct emuxki_chanparms_fxsend {
	struct {
		u_int8_t        level, dest;
	} a, b, c, d, e, f, g, h;
};

struct emuxki_chanparms_pitch {
	u_int16_t       initial;/* 4 bits of octave, 12 bits of fractional
				 * octave */
	u_int16_t       current;/* 0x4000 == unity pitch shift */
	u_int16_t       target;	/* 0x4000 == unity pitch shift */
	u_int8_t        envelope_amount;	/* Signed 2's complement, +/-
						 * one octave peak extremes */
};

struct emuxki_chanparms_envelope {
	u_int16_t       current_state;	/* 0x8000-n == 666*n usec delay */
	u_int8_t        hold_time;	/* 127-n == n*(volume ? 88.2 :
					 * 42)msec */
	u_int8_t        attack_time;	/* 0 = infinite, 1 = (volume ? 11 :
					 * 10.9) msec, 0x7f = 5.5msec */
	u_int8_t        sustain_level;	/* 127 = full, 0 = off, 0.75dB
					 * increments */
	u_int8_t        decay_time;	/* 0 = 43.7msec, 1 = 21.8msec, 0x7f =
					 * 22msec */
};

struct emuxki_chanparms_volume {
	u_int16_t current, target;
	struct emuxki_chanparms_envelope envelope;
};

struct emuxki_chanparms_filter {
	u_int16_t       initial_cutoff_frequency;
	/*
	 * 6 most  significant bits are semitones, 2 least significant bits
	 * are fractions
	 */
	u_int16_t       current_cutoff_frequency;
	u_int16_t       target_cutoff_frequency;
	u_int8_t        lowpass_resonance_height;
	u_int8_t        interpolation_ROM;	/* 1 = full band, 7 = low
						 * pass */
	u_int8_t        envelope_amount;	/* Signed 2's complement, +/-
						 * six octaves peak extremes */
	u_int8_t        LFO_modulation_depth;	/* Signed 2's complement, +/-
						 * three octave extremes */
};

struct emuxki_chanparms_loop {
	u_int32_t       start;	/* index in the PTB (in samples) */
	u_int32_t       end;	/* index in the PTB (in samples) */
};

struct emuxki_chanparms_modulation {
	struct emuxki_chanparms_envelope envelope;
	u_int16_t       LFO_state;	/* 0x8000-n = 666*n usec delay */
};

struct emuxki_chanparms_vibrato_LFO {
	u_int16_t       state;		/* 0x8000-n == 666*n usec delay */
	u_int8_t        modulation_depth;	/* Signed 2's complement, +/-
						 * one octave extremes */
	u_int8_t        vibrato_depth;	/* Signed 2's complement, +/- one
					 * octave extremes */
	u_int8_t        frequency;	/* 0.039Hz steps, maximum of 9.85 Hz */
};

struct emuxki_channel {
	u_int8_t        num;	/* voice number */
	struct emuxki_voice *voice;
	struct emuxki_chanparms_fxsend fxsend;
	struct emuxki_chanparms_pitch pitch;
	u_int16_t       initial_attenuation;	/* 0.375dB steps */
	struct emuxki_chanparms_volume volume;
	struct emuxki_chanparms_filter filter;
	struct emuxki_chanparms_loop loop;
	struct emuxki_chanparms_modulation modulation;
	struct emuxki_chanparms_vibrato_LFO vibrato_LFO;
	u_int8_t        tremolo_depth;
};

/*
 * Voices, streams
 */

typedef enum {
	EMU_RECSRC_MIC = 0,
	EMU_RECSRC_ADC,
	EMU_RECSRC_FX,
	EMU_RECSRC_NOTSET
} emuxki_recsrc_t;

struct emuxki_voice {
	struct emuxki_softc *sc;	/* our softc */

	u_int8_t        use;
#define	EMU_VOICE_USE_PLAY		(1 << 0)
	u_int8_t        state;
#define EMU_VOICE_STATE_STARTED	(1 << 0)
	u_int8_t        stereo;
#define	EMU_VOICE_STEREO_NOTSET	0xFF
	u_int8_t        b16;
	u_int32_t       sample_rate;
	union {
		struct emuxki_channel *chan[2];
		emuxki_recsrc_t source;
	} dataloc;
	struct emuxki_mem *buffer;
	u_int16_t       blksize;/* in samples */
	u_int16_t       trigblk;/* blk on which to trigger inth */
	u_int16_t       blkmod;	/* Modulo value to wrap trigblk */
	u_int16_t       timerate;
	void            (*inth) (void *);
	void           *inthparam;
	                LIST_ENTRY(emuxki_voice) next;
};

#if 0 /* Not yet */
/*
 * I intend this to be able to manage things like AC-3
 */
struct emuxki_stream {
	struct emu10k1			*emu;
	u_int8_t			nmono;
	u_int8_t			nstereo;
	struct emuxki_voice		*mono;
	struct emuxki_voice		*stereo;
	LIST_ENTRY(emuxki_stream)	next;
};
#endif /* Not yet */

struct emuxki_softc {
	struct device   sc_dev;

	/* Autoconfig parameters */
	bus_space_tag_t 	sc_iot;
	bus_space_handle_t	sc_ioh;
	bus_addr_t		sc_iob;
	bus_size_t		sc_ios;
	pci_chipset_tag_t	sc_pc;		/* PCI tag */
	bus_dma_tag_t		sc_dmat;
	void			*sc_ih;		/* interrupt handler */

	/* EMU10k1 device structures */
	LIST_HEAD(, emuxki_mem) mem;

	struct dmamem		*ptb;
	struct dmamem		*silentpage;

	struct emuxki_channel	*channel[EMU_NUMCHAN];
	struct emuxki_voice	*recsrc[EMU_NUMRECSRCS];

	LIST_HEAD(, emuxki_voice) voices;
	/* LIST_HEAD(, emuxki_stream)	streams; */

	u_int8_t		timerstate;
#define	EMU_TIMER_STATE_ENABLED	1

	struct ac97_host_if	hostif;
	struct ac97_codec_if	*codecif;
	struct device		*sc_audev;

	struct emuxki_voice	*pvoice, *rvoice, *lvoice;

	int			sc_flags;
#define EMUXKI_SBLIVE		0x0001
#define EMUXKI_AUDIGY		0x0002
#define EMUXKI_AUDIGY2		0x0004
#define EMUXKI_SBLIVE51		0x0008
#define EMUXKI_APS		0x0010
#define EMUXKI_CA0108		0x0020
#define EMUXKI_CA0151		0x0040
};

#endif				/* !_DEV_PCI_EMU10K1VAR_H_ */
@


1.10
log
@Replace the sc_type/sc_details enum's in the softc struct with a sc_flags
flags field and use the flags as appropriate.

ok jakemsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: emuxkivar.h,v 1.9 2008/10/29 22:39:44 jakemsr Exp $	*/
a221 1
	struct audio_device sc_audv;
@


1.9
log
@
add a flag to know is this is Audigy 2 Value
@
text
@d1 1
a1 1
/*	$OpenBSD: emuxkivar.h,v 1.8 2008/06/26 05:42:17 ray Exp $	*/
a222 7
	enum {
		EMUXKI_SBLIVE = 0x00, EMUXKI_AUDIGY = 0x01, EMUXKI_AUDIGY2 = 0x02,
		EMUXKI_LIVE_5_1 = 0x04, EMUXKI_APS = 0x08
	} sc_type;
	enum {
		EMUXKI_CA0108_CHIP = 0x01, EMUXKI_CA0151_CHIP = 0x02
	} sc_details;
d253 9
@


1.8
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: emuxkivar.h,v 1.7 2005/11/30 22:17:47 brad Exp $	*/
d227 3
@


1.7
log
@- add initial SB Audigy support
- add big-endian support
- fix a few typos

From NetBSD

- use pci_matchbyid()

Known working SB Live's tested by numerous users with no reported regressions;
though no one has stepped up to test out the Audigy support yet.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: emuxkivar.h,v 1.6 2003/04/26 08:01:42 jmc Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.6
log
@managment -> management;

ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: emuxkivar.h,v 1.5 2003/02/18 14:32:13 jmc Exp $	*/
d98 1
a98 1
	} a, b, c, d;
d231 2
a232 1
		EMUXKI_SBLIVE, EMUXKI_APS, EMUXKI_AUDIGY
@


1.5
log
@intial -> initial

ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: emuxkivar.h,v 1.4 2002/06/03 21:13:20 mickey Exp $	*/
d47 1
a47 1
 * dma memory managment
d81 1
a81 1
 * Emu10k1 memory managment
@


1.4
log
@probe for flavours, aps and audigy still need more work though
@
text
@d1 1
a1 1
/*	$OpenBSD: emuxkivar.h,v 1.3 2001/11/26 18:16:02 mickey Exp $	*/
d102 1
a102 1
	u_int16_t       intial;	/* 4 bits of octave, 12 bits of fractional
@


1.3
log
@cache the last deallocated voice and reuse on the next open.
this is to preserve the dac settings in between the openings,
by the mp3 playing software, in particular.
ho@@ help and testing.
@
text
@d1 1
a1 1
/*	$OpenBSD: emuxkivar.h,v 1.2 2001/10/24 15:09:28 brad Exp $	*/
d44 1
d229 4
@


1.3.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: emuxkivar.h,v 1.3 2001/11/26 18:16:02 mickey Exp $	*/
a43 1
#define	EMU_SUBSYS_APS		0x40011102
a227 4
	struct audio_device sc_audv;
	enum {
		EMUXKI_SBLIVE, EMUXKI_APS, EMUXKI_AUDIGY
	} sc_type;
@


1.3.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
a47 1
 * dma memory management
d81 1
a81 1
 * Emu10k1 memory management
d102 1
a102 1
	u_int16_t       initial;/* 4 bits of octave, 12 bits of fractional
@


1.2
log
@add missing RCS ids
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d257 1
a257 1
	struct emuxki_voice	*pvoice, *rvoice;
@


1.2.2.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.2.2.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: emuxkivar.h,v 1.2.2.1 2001/10/31 03:22:45 nate Exp $	*/
d257 1
a257 1
	struct emuxki_voice	*pvoice, *rvoice, *lvoice;
@


1.2.2.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a43 1
#define	EMU_SUBSYS_APS		0x40011102
d101 1
a101 1
	u_int16_t       initial;/* 4 bits of octave, 12 bits of fractional
a227 4
	struct audio_device sc_audv;
	enum {
		EMUXKI_SBLIVE, EMUXKI_APS, EMUXKI_AUDIGY
	} sc_type;
@


1.2.2.4
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: emuxkivar.h,v 1.2.2.3 2003/03/28 00:38:21 niklas Exp $	*/
d47 1
a47 1
 * dma memory management
d81 1
a81 1
 * Emu10k1 memory management
@


1.1
log
@creative labs sb live! and (perhaps) pci512 driver.
from Yannick Montulet, via netbsd, w/ some minor fixens from meself.
@
text
@d1 1
@

