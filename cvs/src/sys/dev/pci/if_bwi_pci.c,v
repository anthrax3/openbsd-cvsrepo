head	1.16;
access;
symbols
	OPENBSD_6_1:1.16.0.8
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.6
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.15.0.4
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.14.0.8
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.12.0.14
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.12
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.10
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.8
	OPENBSD_5_0:1.12.0.6
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.4
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6;
locks; strict;
comment	@ * @;


1.16
date	2015.11.24.17.11.39;	author mpi;	state Exp;
branches;
next	1.15;
commitid	5gdEnqVoJuTuwdTu;

1.15
date	2015.03.14.03.38.48;	author jsg;	state Exp;
branches;
next	1.14;
commitid	p4LJxGKbi0BU2cG6;

1.14
date	2013.12.06.21.03.04;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2013.11.14.12.10.05;	author dlg;	state Exp;
branches;
next	1.12;

1.12
date	2010.08.08.12.02.25;	author mglocker;	state Exp;
branches;
next	1.11;

1.11
date	2010.08.06.05.26.24;	author mglocker;	state Exp;
branches;
next	1.10;

1.10
date	2009.03.29.21.53.52;	author sthen;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.11.20.55.34;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2008.08.28.15.19.03;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.23.08.49.27;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2008.02.14.22.10.02;	author brad;	state Exp;
branches;
next	1.5;

1.5
date	2007.09.27.22.10.25;	author mglocker;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.15.07.20.51;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.13.12.31.47;	author mglocker;	state Exp;
branches;
next	1.2;

1.2
date	2007.09.13.08.28.37;	author mglocker;	state Exp;
branches;
next	1.1;

1.1
date	2007.09.12.12.59.55;	author mglocker;	state Exp;
branches;
next	;


desc
@@


1.16
log
@You only need <net/if_dl.h> if you're using LLADDR() or a sockaddr_dl.
@
text
@/*	$OpenBSD: if_bwi_pci.c,v 1.15 2015/03/14 03:38:48 jsg Exp $ */

/*
 * Copyright (c) 2007 Marcus Glocker <mglocker@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * PCI front-end for the Broadcom AirForce
 */

#include "bpfilter.h"

#include <sys/param.h>
#include <sys/sockio.h>
#include <sys/mbuf.h>
#include <sys/kernel.h>
#include <sys/socket.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/timeout.h>
#include <sys/device.h>

#include <machine/bus.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <net80211/ieee80211_var.h>
#include <net80211/ieee80211_amrr.h>
#include <net80211/ieee80211_radiotap.h>

#include <dev/ic/bwivar.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

/* Base Address Register */
#define BWI_PCI_BAR0	0x10

int		bwi_pci_match(struct device *, void *, void *);
void		bwi_pci_attach(struct device *, struct device *, void *);
int		bwi_pci_detach(struct device *, int);
void		bwi_pci_conf_write(void *, uint32_t, uint32_t);
uint32_t	bwi_pci_conf_read(void *, uint32_t);
int		bwi_pci_activate(struct device *, int);
void		bwi_pci_wakeup(struct bwi_softc *);

struct bwi_pci_softc {
	struct bwi_softc	 psc_bwi;

	pci_chipset_tag_t        psc_pc;
	pcitag_t		 psc_pcitag;
	void 			*psc_ih;

	bus_size_t		 psc_mapsize;
};

struct cfattach bwi_pci_ca = {
	sizeof(struct bwi_pci_softc), bwi_pci_match, bwi_pci_attach,
	bwi_pci_detach, bwi_pci_activate
};

const struct pci_matchid bwi_pci_devices[] = {
	{ PCI_VENDOR_BROADCOM, PCI_PRODUCT_BROADCOM_BCM4303 },
	{ PCI_VENDOR_BROADCOM, PCI_PRODUCT_BROADCOM_BCM4306 },
	{ PCI_VENDOR_BROADCOM, PCI_PRODUCT_BROADCOM_BCM4306_2 },
	{ PCI_VENDOR_BROADCOM, PCI_PRODUCT_BROADCOM_BCM4307 },
	{ PCI_VENDOR_BROADCOM, PCI_PRODUCT_BROADCOM_BCM4309 },
	{ PCI_VENDOR_BROADCOM, PCI_PRODUCT_BROADCOM_BCM4311 },
	{ PCI_VENDOR_BROADCOM, PCI_PRODUCT_BROADCOM_BCM4312 },
	{ PCI_VENDOR_BROADCOM, PCI_PRODUCT_BROADCOM_BCM4318 },
	{ PCI_VENDOR_BROADCOM, PCI_PRODUCT_BROADCOM_BCM4319 },
	{ PCI_VENDOR_BROADCOM, PCI_PRODUCT_BROADCOM_BCM43XG }
};

int
bwi_pci_match(struct device *parent, void *match, void *aux)
{
	struct pci_attach_args *pa = aux;

	/*
	 * The second revision of the BCM4311/BCM4312
	 * chips require v4 firmware.
	 */
	if (PCI_VENDOR(pa->pa_id) == PCI_VENDOR_BROADCOM &&
            (PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_BROADCOM_BCM4311 ||
	     PCI_PRODUCT(pa->pa_id) == PCI_PRODUCT_BROADCOM_BCM4312) &&
	     PCI_REVISION(pa->pa_class) == 0x02)
		return (0);

	return (pci_matchbyid((struct pci_attach_args *)aux, bwi_pci_devices,
	    sizeof(bwi_pci_devices) / sizeof(bwi_pci_devices[0])));
}

void
bwi_pci_attach(struct device *parent, struct device *self, void *aux)
{
	struct bwi_pci_softc *psc = (struct bwi_pci_softc *)self;
	struct pci_attach_args *pa = aux;
	struct bwi_softc *sc = &psc->psc_bwi;
	const char *intrstr = NULL;
	pci_intr_handle_t ih;
	pcireg_t memtype, reg;

	sc->sc_dmat = pa->pa_dmat;
	psc->psc_pc = pa->pa_pc;
	psc->psc_pcitag = pa->pa_tag;

	/* map control / status registers */
	memtype = pci_mapreg_type(pa->pa_pc, pa->pa_tag, BWI_PCI_BAR0); 
	if (pci_mapreg_map(pa, BWI_PCI_BAR0, memtype, 0, &sc->sc_mem_bt,
	    &sc->sc_mem_bh, NULL, &psc->psc_mapsize, 0)) {
		printf(": can't map mem space\n");
		return;
	}

	/* map interrupt */
	if (pci_intr_map(pa, &ih) != 0) {
		printf(": can't map interrupt\n");
		return;
	}

	/* establish interrupt */
	intrstr = pci_intr_string(psc->psc_pc, ih);
	psc->psc_ih = pci_intr_establish(psc->psc_pc, ih, IPL_NET, bwi_intr, sc,
	    sc->sc_dev.dv_xname);
	if (psc->psc_ih == NULL) {
		printf(": can't establish interrupt");
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
		return;
	}
	printf(": %s", intrstr);

	/* we need to access PCI config space from the driver */
	sc->sc_conf_write = bwi_pci_conf_write;
	sc->sc_conf_read = bwi_pci_conf_read;

	reg = pci_conf_read(pa->pa_pc, pa->pa_tag, PCI_SUBSYS_ID_REG);

	sc->sc_pci_revid = PCI_REVISION(pa->pa_class);
	sc->sc_pci_did = PCI_PRODUCT(pa->pa_id);
	sc->sc_pci_subvid = PCI_VENDOR(reg);
	sc->sc_pci_subdid = PCI_PRODUCT(reg);

	bwi_attach(sc);
}

int
bwi_pci_detach(struct device *self, int flags)
{
	struct bwi_pci_softc *psc = (struct bwi_pci_softc *)self;
	struct bwi_softc *sc = &psc->psc_bwi;

	bwi_detach(sc);
	pci_intr_disestablish(psc->psc_pc, psc->psc_ih);

	return (0);
}

int
bwi_pci_activate(struct device *self, int act)
{
	struct bwi_pci_softc *psc = (struct bwi_pci_softc *)self;
	struct bwi_softc *sc = &psc->psc_bwi;
	struct ifnet *ifp = &sc->sc_ic.ic_if;

	switch (act) {
	case DVACT_SUSPEND:
		if (ifp->if_flags & IFF_RUNNING)
			bwi_stop(sc, 1);
		break;
	case DVACT_WAKEUP:
		bwi_pci_wakeup(sc);
		break;
	}

	return (0);
}

void
bwi_pci_wakeup(struct bwi_softc *sc)
{
	struct ifnet *ifp = &sc->sc_ic.ic_if;

	if (ifp->if_flags & IFF_UP)
		bwi_init(ifp);
}

void
bwi_pci_conf_write(void *self, uint32_t reg, uint32_t val)
{
	struct bwi_pci_softc *psc = (struct bwi_pci_softc *)self;

	pci_conf_write(psc->psc_pc, psc->psc_pcitag, reg, val);
}

uint32_t
bwi_pci_conf_read(void *self, uint32_t reg)
{
	struct bwi_pci_softc *psc = (struct bwi_pci_softc *)self;

	return (pci_conf_read(psc->psc_pc, psc->psc_pcitag, reg));
}
@


1.15
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bwi_pci.c,v 1.14 2013/12/06 21:03:04 deraadt Exp $ */
a37 1
#include <net/if_dl.h>
@


1.14
log
@Add a DVACT_WAKEUP op to the *_activate() API.  This is called after the
kernel resumes normal (non-cold, able to run processes, etc) operation.
Previously we were relying on specific DVACT_RESUME op's in drivers
creating callback/threads themselves, but that has become too common,
indicating the need for a built-in mechanism.
ok dlg kettenis, tested by a sufficient amount of people
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bwi_pci.c,v 1.13 2013/11/14 12:10:05 dlg Exp $ */
a35 1
#include <machine/intr.h>
@


1.13
log
@replace workqs with tasks for handling resume

from kimberley manning
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bwi_pci.c,v 1.12 2010/08/08 12:02:25 mglocker Exp $ */
a26 1
#include <sys/task.h>
d64 1
a64 1
void		bwi_pci_resume(void *, void *);
a126 2
	task_set(&sc->sc_resume_t, bwi_pci_resume, sc, NULL);

d192 2
a193 2
	case DVACT_RESUME:
		task_add(systq, &sc->sc_resume_t);
d201 1
a201 1
bwi_pci_resume(void *arg1, void *arg2)
a202 1
	struct bwi_softc *sc = arg1;
@


1.12
log
@Be consistent in function naming.  No functional changes.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bwi_pci.c,v 1.11 2010/08/06 05:26:24 mglocker Exp $ */
d27 1
a27 1
#include <sys/workq.h>
d128 2
d196 1
a196 2
		workq_queue_task(NULL, &sc->sc_resume_wqt, 0,
		    bwi_pci_resume, sc, NULL);
@


1.11
log
@ACPI suspend/resume for bwi(4).  Initial diff from todd@@, finished and
tested by me on X40 with a BCM4306.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bwi_pci.c,v 1.10 2009/03/29 21:53:52 sthen Exp $ */
d65 1
a65 1
void		bwi_resume(void *, void *);
d195 1
a195 1
		    bwi_resume, sc, NULL);
d203 1
a203 1
bwi_resume(void *arg1, void *arg2)
@


1.10
log
@make various strings ("can't map mem space" and similar) more consistent
between instances, saving space in the kernel. feedback from many (some
incorporated, some left for future work).

ok deraadt, kettenis, "why not" miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bwi_pci.c,v 1.9 2008/09/11 20:55:34 brad Exp $ */
d27 1
d64 2
d79 1
a79 1
	bwi_pci_detach
d179 31
@


1.9
log
@Remove the BCM4322 id. This is a 802.11n chipset and also requires v4 firmware.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bwi_pci.c,v 1.8 2008/08/28 15:19:03 brad Exp $ */
d129 1
a129 1
		printf(": could not map memory space\n");
d135 1
a135 1
		printf(": could not map interrupt\n");
d144 1
a144 1
		printf(": could not establish interrupt");
@


1.8
log
@Do not try to attach to rev 2 BCM4311/BCM4312 chipsets as they
require v4 firmware and the driver currently uses v3 firmware.

ok mglocker@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bwi_pci.c,v 1.7 2008/05/23 08:49:27 brad Exp $ */
a88 1
	{ PCI_VENDOR_BROADCOM, PCI_PRODUCT_BROADCOM_BCM4322 },
@


1.7
log
@Simplify the combination use of pci_mapreg_type()/pci_mapreg_map() as
suggested by dlg@@ awhile ago.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bwi_pci.c,v 1.6 2008/02/14 22:10:02 brad Exp $ */
d96 12
@


1.6
log
@deal with a 64-bit BAR such as with PCIe chipsets.

Tested by Bayu Krisnawan <krisna at versalite dot com> with the
BCM4312 chipset.

ok mglocker@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bwi_pci.c,v 1.5 2007/09/27 22:10:25 mglocker Exp $ */
d116 2
a117 8
	switch (memtype) {
	case PCI_MAPREG_TYPE_MEM | PCI_MAPREG_MEM_TYPE_32BIT:
	case PCI_MAPREG_TYPE_MEM | PCI_MAPREG_MEM_TYPE_64BIT:
		if (pci_mapreg_map(pa, BWI_PCI_BAR0,
		    memtype, 0, &sc->sc_mem_bt, &sc->sc_mem_bh,
		    NULL, &psc->psc_mapsize, 0) == 0)
			break;
	default:
@


1.5
log
@Add automatic rate control (AMRR).
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bwi_pci.c,v 1.4 2007/09/15 07:20:51 jsg Exp $ */
d108 1
a108 2
	pcireg_t reg;
	int error;
d115 9
a123 4
	error = pci_mapreg_map(pa, BWI_PCI_BAR0,
	    PCI_MAPREG_TYPE_MEM | PCI_MAPREG_MEM_TYPE_32BIT, 0,
	    &sc->sc_mem_bt, &sc->sc_mem_bh, NULL, &psc->psc_mapsize, 0);
	if (error != 0) {
@


1.4
log
@Properly fill in some of the pci information the driver uses internally.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bwi_pci.c,v 1.3 2007/09/13 12:31:47 mglocker Exp $ */
d46 1
@


1.3
log
@Forgot to set psc->psc_pcitag.  Replace all PCI/Cardbus config space
functions with our new one.  Attachment seems to work now mainly.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bwi_pci.c,v 1.2 2007/09/13 08:28:37 mglocker Exp $ */
d107 1
d145 7
@


1.2
log
@Enable access to PCI and Cardbus config space from the driver.  Lets us
power on the device.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_bwi_pci.c,v 1.1 2007/09/12 12:59:55 mglocker Exp $ */
d111 1
@


1.1
log
@PCI and Cardbus hookup for the Broadcom AirForce devices.

OK jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d57 5
a61 3
int	bwi_pci_match(struct device *, void *, void *);
void	bwi_pci_attach(struct device *, struct device *, void *);
int	bwi_pci_detach(struct device *, int);
d64 1
a64 1
	struct bwi_softc	 sc_bwi;
d66 3
a68 2
	pci_chipset_tag_t        sc_pc;
	void 			*sc_ih;
d70 1
a70 1
	bus_size_t		 sc_mapsize;
d104 1
a104 1
	struct bwi_softc *sc = &psc->sc_bwi;
d110 1
a110 1
	psc->sc_pc = pa->pa_pc;
d115 1
a115 1
	    &sc->sc_mem_bt, &sc->sc_mem_bh, NULL, &psc->sc_mapsize, 0);
d128 2
a129 2
	intrstr = pci_intr_string(psc->sc_pc, ih);
	psc->sc_ih = pci_intr_establish(psc->sc_pc, ih, IPL_NET, bwi_intr, sc,
d131 1
a131 1
	if (psc->sc_ih == NULL) {
d140 4
d151 1
a151 1
	struct bwi_softc *sc = &psc->sc_bwi;
d154 1
a154 1
	pci_intr_disestablish(psc->sc_pc, psc->sc_ih);
d157 16
@

