head	1.19;
access;
symbols
	OPENBSD_5_4:1.18.0.14
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.12
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.10
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.8
	OPENBSD_5_0:1.18.0.6
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.4
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.2
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.4
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.14.0.2
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.12.0.2
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.8.0.4
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.7.0.12
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.10
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.8
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.6
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.4
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.4.0.6
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	SMP:1.4.0.2;
locks; strict;
comment	@ * @;


1.19
date	2013.11.04.14.07.15;	author deraadt;	state dead;
branches;
next	1.18;

1.18
date	2010.06.28.18.31.01;	author krw;	state Exp;
branches;
next	1.17;

1.17
date	2010.05.20.00.55.17;	author krw;	state Exp;
branches;
next	1.16;

1.16
date	2010.03.23.01.57.19;	author krw;	state Exp;
branches;
next	1.15;

1.15
date	2009.04.02.18.44.49;	author oga;	state Exp;
branches;
next	1.14;

1.14
date	2009.02.16.21.19.06;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.26.05.42.15;	author ray;	state Exp;
branches;
next	1.12;

1.12
date	2007.10.18.05.53.02;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2007.10.04.19.32.03;	author gilles;	state Exp;
branches;
next	1.10;

1.10
date	2007.09.16.01.04.18;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2006.11.28.23.59.45;	author dlg;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.19.02.18.00;	author pedro;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.13.03.56.47;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.12.01.09.44;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.53;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.27.06.11.09;	author mickey;	state Exp;
branches
	1.4.2.1
	1.4.6.1;
next	1.3;

1.3
date	2001.06.27.02.15.41;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.27.02.06.37;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.26.02.50.13;	author niklas;	state Exp;
branches;
next	;

1.4.2.1
date	2002.03.28.11.50.59;	author niklas;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2003.03.28.00.38.11;	author niklas;	state Exp;
branches;
next	;

1.4.6.1
date	2002.06.11.03.42.16;	author art;	state Exp;
branches;
next	1.4.6.2;

1.4.6.2
date	2002.10.29.00.33.23;	author art;	state Exp;
branches;
next	1.4.6.3;

1.4.6.3
date	2003.05.19.22.01.43;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.19
log
@remove iop(4) driver.  it is entirely unmaintained and supports something
which basically doesn't exist at all.
reminded about it by brad
@
text
@/*	$OpenBSD: iopsp.c,v 1.18 2010/06/28 18:31:01 krw Exp $	*/
/*	$NetBSD$	*/

/*-
 * Copyright (c) 2000, 2001 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Andrew Doran.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Raw SCSI device support for I2O.  IOPs present SCSI devices individually;
 * we group them by controlling port.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/queue.h>
#include <sys/proc.h>
#include <sys/buf.h>
#include <sys/endian.h>
#include <sys/malloc.h>
#include <sys/scsiio.h>
#include <sys/rwlock.h>

#include <machine/bus.h>

#include <scsi/scsi_all.h>
#include <scsi/scsi_disk.h>
#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>
#include <scsi/scsi_message.h>

#include <dev/i2o/i2o.h>
#include <dev/i2o/iopio.h>
#include <dev/i2o/iopvar.h>
#include <dev/i2o/iopspvar.h>

struct cfdriver iopsp_cd = {
	NULL, "iopsp", DV_DULL
};

int	iopsp_match(struct device *, void *, void *);
void	iopsp_attach(struct device *, struct device *, void *);

struct cfattach iopsp_ca = {
	sizeof(struct iopsp_softc), iopsp_match, iopsp_attach
};

void	iopsp_scsi_cmd(struct scsi_xfer *);
void	iopspminphys(struct buf *bp, struct scsi_link *sl);

struct scsi_adapter iopsp_switch = {
	iopsp_scsi_cmd, iopspminphys, 0, 0,
};

void	iopsp_adjqparam(struct device *, int);
void	iopsp_intr(struct device *, struct iop_msg *, void *);
int	iopsp_rescan(struct iopsp_softc *);
int	iopsp_reconfig(struct device *);

/*
 * Match a supported device.
 */
int
iopsp_match(struct device *parent, void *match, void *aux)
{
	struct iop_attach_args *ia = aux;
	struct {
		struct	i2o_param_op_results pr;
		struct	i2o_param_read_results prr;
		struct	i2o_param_hba_ctlr_info ci;
	} __packed param;
	int rv;

	if (ia->ia_class != I2O_CLASS_BUS_ADAPTER_PORT)
		return (0);

	if ((rv = iop_param_op((struct iop_softc *)parent, ia->ia_tid, NULL, 0,
	    I2O_PARAM_HBA_CTLR_INFO, &param, sizeof(param)))) {
#ifdef I2ODEBUG
		printf("iopsp_match: iop_param_op failed, status = %d\n", rv);
#endif
		return (0);
	}

#ifdef I2ODEBUG
	printf("iopsp_match: bustype = %d\n", param.ci.bustype);
#endif

	return (param.ci.bustype == I2O_HBA_BUS_SCSI ||
	    param.ci.bustype == I2O_HBA_BUS_FCA);
}

/*
 * Attach a supported device.
 */
void
iopsp_attach(struct device *parent, struct device *self, void *aux)
{
	struct iop_softc *iop = (struct iop_softc *)parent;
	struct iopsp_softc *sc = (struct iopsp_softc *)self;
	struct iop_attach_args *ia = (struct iop_attach_args *)aux;
	struct scsibus_attach_args saa;
	struct {
		struct	i2o_param_op_results pr;
		struct	i2o_param_read_results prr;
		union {
			struct	i2o_param_hba_ctlr_info ci;
			struct	i2o_param_hba_scsi_ctlr_info sci;
			struct	i2o_param_hba_scsi_port_info spi;
		} p;
	} __packed param;
	int fcal, rv;
#ifdef I2OVERBOSE
	int size;
#endif

	/* Register us as an initiator. */
	sc->sc_ii.ii_dv = self;
	sc->sc_ii.ii_intr = iopsp_intr;
	sc->sc_ii.ii_flags = 0;
	sc->sc_ii.ii_tid = ia->ia_tid;
	sc->sc_ii.ii_reconfig = iopsp_reconfig;
	sc->sc_ii.ii_adjqparam = iopsp_adjqparam;
	iop_initiator_register(iop, &sc->sc_ii);

	rv = iop_param_op(iop, ia->ia_tid, NULL, 0, I2O_PARAM_HBA_CTLR_INFO,
	    &param, sizeof(param));
	if (rv != 0) {
		printf("%s: unable to get parameters (0x%04x; %d)\n",
	    	    sc->sc_dv.dv_xname, I2O_PARAM_HBA_CTLR_INFO, rv);
		goto bad;
	}

	fcal = (param.p.ci.bustype == I2O_HBA_BUS_FCA);		/* XXX */

	/* 
	 * Say what the device is.  If we can find out what the controling
	 * device is, say what that is too.
	 */
	printf(": SCSI port");
	iop_print_ident(iop, ia->ia_tid);
	printf("\n");

	rv = iop_param_op(iop, ia->ia_tid, NULL, 0,
	    I2O_PARAM_HBA_SCSI_CTLR_INFO, &param, sizeof(param));
	if (rv != 0) {
		printf("%s: unable to get parameters (0x%04x; %d)\n",
		    sc->sc_dv.dv_xname, I2O_PARAM_HBA_SCSI_CTLR_INFO, rv);
		goto bad;
	}

#ifdef I2OVERBOSE
	printf("%s: %d-bit, max sync rate %dMHz, initiator ID %d\n",
	    sc->sc_dv.dv_xname, param.p.sci.maxdatawidth,
	    (u_int32_t)letoh64(param.p.sci.maxsyncrate) / 1000,
	    letoh32(param.p.sci.initiatorid));
#endif

	sc->sc_link.adapter_softc = sc;
	sc->sc_link.adapter = &iopsp_switch;
	sc->sc_link.adapter_target = letoh32(param.p.sci.initiatorid);
	sc->sc_link.openings = 1;
	sc->sc_link.adapter_buswidth = fcal?
	    IOPSP_MAX_FCAL_TARGET : param.p.sci.maxdatawidth;
	sc->sc_link.luns = IOPSP_MAX_LUN;

#ifdef I2OVERBOSE
	/*
	 * Allocate the target map.  Currently used for informational
	 * purposes only.
	 */
	size = sc->sc_link.adapter_buswidth * sizeof(struct iopsp_target);
	sc->sc_targetmap = malloc(size, M_DEVBUF, M_NOWAIT | M_ZERO);
#endif

 	/* Build the two maps, and attach to scsi. */
	if (iopsp_reconfig(self) != 0) {
		printf("%s: configure failed\n", sc->sc_dv.dv_xname);
		goto bad;
	}

	bzero(&saa, sizeof(saa));
	saa.saa_sc_link = &sc->sc_link;

	config_found(&sc->sc_dv, &saa, scsiprint);
	return;

 bad:
	iop_initiator_unregister(iop, &sc->sc_ii);
}

/*
 * Scan the LCT to determine which devices we control, and enter them into
 * the maps.
 */
int
iopsp_reconfig(struct device *dv)
{
	struct iopsp_softc *sc = (struct iopsp_softc *)dv;
	struct iop_softc *iop = (struct iop_softc *)sc->sc_dv.dv_parent;
	struct i2o_lct_entry *le;
	struct {
		struct	i2o_param_op_results pr;
		struct	i2o_param_read_results prr;
		struct	i2o_param_scsi_device_info sdi;
	} __packed param;
	u_int tid, nent, i, targ, lun, size, s, rv, bptid;
	u_short *tidmap;
#ifdef I2OVERBOSE
	struct iopsp_target *it;
	int syncrate;	
#endif

	/* Anything to do? */
	if (iop->sc_chgind == sc->sc_chgind)
		return (0);

	/*
	 * Allocate memory for the target/LUN -> TID map.  Use zero to
	 * denote absent targets (zero is the TID of the I2O executive,
	 * and we never address that here).
	 */
	size = sc->sc_link.adapter_buswidth * IOPSP_MAX_LUN * sizeof(u_short);
	if (!(tidmap = malloc(size, M_DEVBUF, M_NOWAIT | M_ZERO)))
		return (ENOMEM);

#ifdef I2OVERBOSE
	for (i = 0; i < sc->sc_link.adapter_buswidth; i++)
		sc->sc_targetmap[i].it_flags &= ~IT_PRESENT;
#endif

	/*
	 * A quick hack to handle Intel's stacked bus port arrangement.
	 */
	bptid = sc->sc_ii.ii_tid;
	nent = iop->sc_nlctent;
	for (le = iop->sc_lct->entry; nent != 0; nent--, le++)
		if ((letoh16(le->classid) & 4095) ==
		    I2O_CLASS_BUS_ADAPTER_PORT &&
		    (letoh32(le->usertid) & 4095) == bptid) {
			bptid = letoh16(le->localtid) & 4095;
			break;
		}

	nent = iop->sc_nlctent;
	for (i = 0, le = iop->sc_lct->entry; i < nent; i++, le++) {
		if ((letoh16(le->classid) & I2O_CLASS_MASK) !=
		    I2O_CLASS_SCSI_PERIPHERAL ||
		    ((letoh32(le->usertid) >> 12) & 4095) != bptid)
			continue;
		tid = letoh16(le->localtid) & I2O_LCT_ENTRY_TID_MASK;

		rv = iop_param_op(iop, tid, NULL, 0, I2O_PARAM_SCSI_DEVICE_INFO,
		    &param, sizeof(param));
		if (rv != 0) {
			printf("%s: unable to get parameters (0x%04x; %d)\n",
			    sc->sc_dv.dv_xname, I2O_PARAM_SCSI_DEVICE_INFO,
			    rv);
			continue;
		}
		targ = letoh32(param.sdi.identifier);
		lun = param.sdi.luninfo[1];
#if defined(DIAGNOSTIC) || defined(I2ODEBUG)
		if (targ >= sc->sc_link.adapter_buswidth ||
		    lun >= sc->sc_link.adapter_buswidth) {
			printf("%s: target %d,%d (tid %d): bad target/LUN\n",
			    sc->sc_dv.dv_xname, targ, lun, tid);
			continue;
		}
#endif

#ifdef I2OVERBOSE
		/*
		 * If we've already described this target, and nothing has
		 * changed, then don't describe it again.
		 */
		it = &sc->sc_targetmap[targ];
		it->it_flags |= IT_PRESENT;
		syncrate = (int)((letoh64(param.sdi.negsyncrate) + 500) / 1000);
		if (it->it_width == param.sdi.negdatawidth &&
		    it->it_offset == param.sdi.negoffset &&
		    it->it_syncrate == syncrate)
			continue;

		it->it_width = param.sdi.negdatawidth;
		it->it_offset = param.sdi.negoffset;
		it->it_syncrate = syncrate;

		printf("%s: target %d (tid %d): %d-bit, ", sc->sc_dv.dv_xname,
		    targ, tid, it->it_width);
		if (it->it_syncrate == 0)
			printf("asynchronous\n");
		else
			printf("synchronous at %dMHz, offset 0x%x\n",
			    it->it_syncrate, it->it_offset);
#endif

		/* Ignore the device if it's in use by somebody else. */
		if ((letoh32(le->usertid) & 4095) != I2O_TID_NONE) {
#ifdef I2OVERBOSE
			if (sc->sc_tidmap == NULL ||
			    IOPSP_TIDMAP(sc->sc_tidmap, targ, lun) !=
			    IOPSP_TID_INUSE)
				printf("%s: target %d,%d (tid %d): in use by"
				    " tid %d\n", sc->sc_dv.dv_xname,
				    targ, lun, tid,
				    letoh32(le->usertid) & 4095);
#endif
			IOPSP_TIDMAP(tidmap, targ, lun) = IOPSP_TID_INUSE;
		} else
			IOPSP_TIDMAP(tidmap, targ, lun) = (u_short)tid;
	}

#ifdef I2OVERBOSE
	for (i = 0; i < sc->sc_link.adapter_buswidth; i++)
		if ((sc->sc_targetmap[i].it_flags & IT_PRESENT) == 0)
			sc->sc_targetmap[i].it_width = 0;
#endif

	/* Swap in the new map and return. */
	s = splbio();
	if (sc->sc_tidmap != NULL)
		free(sc->sc_tidmap, M_DEVBUF);
	sc->sc_tidmap = tidmap;
	splx(s);
	sc->sc_chgind = iop->sc_chgind;
	return (0);
}

/*
 * Re-scan the bus; to be called from a higher level (e.g. scsi).
 */
int
iopsp_rescan(struct iopsp_softc *sc)
{
	struct iop_softc *iop;
	struct iop_msg *im;
	struct i2o_hba_bus_scan mf;
	int rv;

	iop = (struct iop_softc *)sc->sc_dv.dv_parent;

	rw_enter_write(&iop->sc_conflock);

	im = iop_msg_alloc(iop, &sc->sc_ii, IM_WAIT);

	mf.msgflags = I2O_MSGFLAGS(i2o_hba_bus_scan);
	mf.msgfunc = I2O_MSGFUNC(sc->sc_ii.ii_tid, I2O_HBA_BUS_SCAN);
	mf.msgictx = sc->sc_ii.ii_ictx;
	mf.msgtctx = im->im_tctx;

	rv = iop_msg_post(iop, im, &mf, 5*60*1000);
	iop_msg_free(iop, im);
	if (rv != 0)
		printf("%s: bus rescan failed (error %d)\n",
		    sc->sc_dv.dv_xname, rv);

	if ((rv = iop_lct_get(iop)) == 0)
		rv = iopsp_reconfig(&sc->sc_dv);

	rw_exit_write(&iop->sc_conflock);
	return (rv);
}

void
iopspminphys(struct buf *bp, struct scsi_link *sl)
{
	if (bp->b_bcount > IOP_MAX_XFER)
		bp->b_bcount = IOP_MAX_XFER;
	minphys(bp);
}

/*
 * Start a SCSI command.
 */
void
iopsp_scsi_cmd(xs)
	struct scsi_xfer *xs;
{
	struct scsi_link *link = xs->sc_link;
	struct iopsp_softc *sc = (struct iopsp_softc *)link->adapter_softc;
	struct iop_softc *iop = (struct iop_softc *)sc->sc_dv.dv_parent;
	struct iop_msg *im;
	struct i2o_scsi_scb_exec *mf;
	int error, tid, s;
	u_int32_t mb[IOP_MAX_MSG_SIZE / sizeof(u_int32_t)];

	tid = IOPSP_TIDMAP(sc->sc_tidmap, link->target, link->lun);
	if (tid == IOPSP_TID_ABSENT || tid == IOPSP_TID_INUSE) {
		xs->error = XS_SELTIMEOUT;
		scsi_done(xs);
		return;
	}

	SC_DEBUG(xs->sc_link, SDEV_DB2, ("iopsp_scsi_cmd: run_xfer\n"));

	/* Need to reset the target? */
	if ((xs->flags & XS_RESET) != 0) {
		if (iop_simple_cmd(iop, tid, I2O_SCSI_DEVICE_RESET,
		    sc->sc_ii.ii_ictx, 1, 30*1000) != 0) {
#ifdef I2ODEBUG
			printf("%s: reset failed\n",
			    sc->sc_dv.dv_xname);
#endif
			xs->error = XS_DRIVER_STUFFUP;
		} else
			xs->error = XS_NOERROR;

		scsi_done(xs);
		return;
	}

#if defined(I2ODEBUG) || defined(SCSIDEBUG)
	if (xs->cmdlen > sizeof(mf->cdb))
		panic("%s: CDB too large", sc->sc_dv.dv_xname);
#endif

	im = iop_msg_alloc(iop, &sc->sc_ii, IM_POLL_INTR |
	    IM_NOSTATUS | ((xs->flags & SCSI_POLL) != 0 ? IM_POLL : 0));
	im->im_dvcontext = xs;

	mf = (struct i2o_scsi_scb_exec *)mb;
	mf->msgflags = I2O_MSGFLAGS(i2o_scsi_scb_exec);
	mf->msgfunc = I2O_MSGFUNC(tid, I2O_SCSI_SCB_EXEC);
	mf->msgictx = sc->sc_ii.ii_ictx;
	mf->msgtctx = im->im_tctx;
	mf->flags = xs->cmdlen | I2O_SCB_FLAG_ENABLE_DISCONNECT |
	    I2O_SCB_FLAG_SENSE_DATA_IN_MESSAGE;
	mf->datalen = xs->datalen;
	memcpy(mf->cdb, xs->cmd, xs->cmdlen);

#if 0
	switch (xs->xs_tag_type) {
	case MSG_ORDERED_Q_TAG:
		mf->flags |= I2O_SCB_FLAG_ORDERED_QUEUE_TAG;
		break;
	case MSG_SIMPLE_Q_TAG:
		mf->flags |= I2O_SCB_FLAG_SIMPLE_QUEUE_TAG;
		break;
	case MSG_HEAD_OF_Q_TAG:
		mf->flags |= I2O_SCB_FLAG_HEAD_QUEUE_TAG;
		break;
	default:
		break;
	}
#endif

	if (xs->datalen != 0) {
		error = iop_msg_map_bio(iop, im, mb, xs->data,
		    xs->datalen, (xs->flags & SCSI_DATA_OUT) == 0);
		if (error) {
			xs->error = XS_DRIVER_STUFFUP;
			iop_msg_free(iop, im);
			scsi_done(xs);
			return;
		}
		if ((xs->flags & SCSI_DATA_IN) == 0)
			mf->flags |= I2O_SCB_FLAG_XFER_TO_DEVICE;
		else
			mf->flags |= I2O_SCB_FLAG_XFER_FROM_DEVICE;
	}

	s = splbio();
	sc->sc_curqd++;
	splx(s);

	if (iop_msg_post(iop, im, mb, xs->timeout)) {
		s = splbio();
		sc->sc_curqd--;
		splx(s);
		if (xs->datalen != 0)
			iop_msg_unmap(iop, im);
		iop_msg_free(iop, im);
		xs->error = XS_DRIVER_STUFFUP;
		scsi_done(xs);
	}
}

#ifdef notyet
/*
 * Abort the specified I2O_SCSI_SCB_EXEC message and its associated SCB.
 */
int
iopsp_scsi_abort(struct iopsp_softc *sc, int atid, struct iop_msg *aim)
{
	struct iop_msg *im;
	struct i2o_scsi_scb_abort mf;
	struct iop_softc *iop;
	int rv, s;

	iop = (struct iop_softc *)sc->sc_dv.dv_parent;
	im = iop_msg_alloc(iop, &sc->sc_ii, IM_POLL);

	mf.msgflags = I2O_MSGFLAGS(i2o_scsi_scb_abort);
	mf.msgfunc = I2O_MSGFUNC(atid, I2O_SCSI_SCB_ABORT);
	mf.msgictx = sc->sc_ii.ii_ictx;
	mf.msgtctx = im->im_tctx;
	mf.tctxabort = aim->im_tctx;

	s = splbio();
	rv = iop_msg_post(iop, im, &mf, 30000);
	splx(s);
	iop_msg_free(iop, im);
	return (rv);
}
#endif

/*
 * We have a message which has been processed and replied to by the IOP -
 * deal with it.
 */
void
iopsp_intr(struct device *dv, struct iop_msg *im, void *reply)
{
	struct scsi_xfer *xs;
	struct iopsp_softc *sc;
	struct i2o_scsi_reply *rb;
 	struct iop_softc *iop;
	u_int sl;

	sc = (struct iopsp_softc *)dv;
	xs = (struct scsi_xfer *)im->im_dvcontext;
	iop = (struct iop_softc *)dv->dv_parent;
	rb = reply;

	SC_DEBUG(xs->sc_link, SDEV_DB2, ("iopsp_intr\n"));

	if ((rb->msgflags & I2O_MSGFLAGS_FAIL) != 0) {
		xs->error = XS_DRIVER_STUFFUP;
		xs->resid = xs->datalen;
	} else {
		if (rb->hbastatus != I2O_SCSI_DSC_SUCCESS) {
			switch (rb->hbastatus) {
			case I2O_SCSI_DSC_ADAPTER_BUSY:
			case I2O_SCSI_DSC_SCSI_BUS_RESET:
			case I2O_SCSI_DSC_BUS_BUSY:
				xs->error = XS_BUSY;
				break;
			case I2O_SCSI_DSC_SELECTION_TIMEOUT:
				xs->error = XS_SELTIMEOUT;
				break;
			case I2O_SCSI_DSC_COMMAND_TIMEOUT:
			case I2O_SCSI_DSC_DEVICE_NOT_PRESENT:
			case I2O_SCSI_DSC_LUN_INVALID:
			case I2O_SCSI_DSC_SCSI_TID_INVALID:
				xs->error = XS_TIMEOUT;
				break;
			default:
				xs->error = XS_DRIVER_STUFFUP;
				break;
			}
			printf("%s: HBA status 0x%02x\n", sc->sc_dv.dv_xname,
			   rb->hbastatus);
		} else if (rb->scsistatus != SCSI_OK) {
			switch (rb->scsistatus) {
			case SCSI_CHECK:
				xs->error = XS_SENSE;
				sl = letoh32(rb->senselen);
				if (sl > sizeof(xs->sense))
					sl = sizeof(xs->sense);
				bcopy(rb->sense, &xs->sense, sl);
				break;
			case SCSI_QUEUE_FULL:
			case SCSI_BUSY:
				xs->error = XS_BUSY;
				break;
			default:
				xs->error = XS_DRIVER_STUFFUP;
				break;
			}
		} else
			xs->error = XS_NOERROR;

		xs->resid = xs->datalen - letoh32(rb->datalen);
		xs->status = rb->scsistatus;
	}

	/* Free the message wrapper and pass the news to scsi. */
	if (xs->datalen != 0)
		iop_msg_unmap(iop, im);
	iop_msg_free(iop, im);

	if (--sc->sc_curqd == sc->sc_link.openings)
		wakeup(&sc->sc_curqd);

	scsi_done(xs);
}

/*
 * The number of openings available to us has changed, so inform scsi.
 */
void
iopsp_adjqparam(struct device *dv, int mpi)
{
	struct iopsp_softc *sc = (struct iopsp_softc *)dv;
	int s;

	s = splbio();
	sc->sc_link.openings = mpi;
	if (mpi < sc->sc_curqd)
		tsleep(&sc->sc_curqd, PWAIT, "iopspdrn", 0);
	splx(s);
}
@


1.18
log
@Remove all adapter-specific 'struct scsi_device's. They are never used. First
step in elminating 'struct scsi_device' entirely.

Spotted and initial diff from matthew@@.

ok matthew@@ dlg@@ deraadt@@ marco@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.17 2010/05/20 00:55:17 krw Exp $	*/
@


1.17
log
@New scsi code seems to be stable. Pluck previously identified
low-hanging splbio/splx pairs that are no longer needed and see if
this reveals any hidden scsi flaws.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.16 2010/03/23 01:57:19 krw Exp $	*/
a80 4
struct scsi_device iopsp_dev = {
	NULL, NULL, NULL, NULL
};

a187 1
	sc->sc_link.device = &iopsp_dev;
@


1.16
log
@Change the scsi_cmd function member of scsi_adapter from int to
void. Use XS_NO_CCB error in the scsi command (xs) to report the
NO_CCB condition. Eliminates all SUCCESSFULLY_QUEUED and COMPLETE
confusion and untangles the midlayer from the adapter a bit more.

Eyes and some fixes by miod@@

There may be some compile issues on little used (i.e. I don't have
any) drivers but the change is mechanical and thus easy to remedy.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.15 2009/04/02 18:44:49 oga Exp $	*/
a421 1
		s = splbio();
a422 1
		splx(s);
a439 1
		s = splbio();
a440 1
		splx(s);
a484 1
			s = splbio();
a485 1
			splx(s);
a505 1
		s = splbio();
a506 1
		splx(s);
@


1.15
log
@Convert lockmgr to rwlock. Fixing a (harmless) lock leak on attach
failure while i'm at it.

Been in snaps for a while. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.14 2009/02/16 21:19:06 miod Exp $	*/
d74 1
a74 1
int	iopsp_scsi_cmd(struct scsi_xfer *);
d407 1
a407 1
int
d425 1
a425 1
		return (COMPLETE);
d445 1
a445 1
		return (COMPLETE);
d492 1
a492 1
			return (COMPLETE);
a514 1
		return (COMPLETE);
a515 2

	return (xs->flags & SCSI_POLL? COMPLETE : SUCCESSFULLY_QUEUED);
@


1.14
log
@Extend the scsi_adapter minphys() callback to take a struct scsi_link *
as additional argument. This will allow intermediate layers between
scsi devices such as sd and scsi host adapters to take appropriate
action if necessary.
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.13 2008/06/26 05:42:15 ray Exp $	*/
d48 1
a48 1
#include <sys/lock.h>
d374 1
a374 7
	rv = lockmgr(&iop->sc_conflock, LK_EXCLUSIVE, NULL);
	if (rv != 0) {
#ifdef I2ODEBUG
		printf("iopsp_rescan: unable to acquire lock\n");
#endif
		return (rv);
	}
d392 1
a392 1
	lockmgr(&iop->sc_conflock, LK_RELEASE, NULL);
@


1.13
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.12 2007/10/18 05:53:02 deraadt Exp $	*/
d75 1
a75 1
void	iopspminphys(struct buf *bp);
d403 1
a403 2
iopspminphys(bp)
	struct buf *bp;
@


1.12
log
@scsi_done() must be splbio() protected... who did this work for??; ok dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.11 2007/10/04 19:32:03 gilles Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.11
log
@attribute packed -> __packed

okayd by miod a while ago, ok by pyr
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.10 2007/09/16 01:04:18 krw Exp $	*/
d436 1
d438 1
d456 1
d458 1
d503 1
d505 1
d526 1
d528 1
@


1.10
log
@Obvious M_ZERO changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.9 2006/11/28 23:59:45 dlg Exp $	*/
d108 1
a108 1
	} __attribute__ ((__packed__)) param;
d148 1
a148 1
	} __attribute__ ((__packed__)) param;
d244 1
a244 1
	} __attribute__ ((__packed__)) param;
@


1.9
log
@give scsi controllers a real attach args to fill in when attaching scsibus.

ok miod@@ marco@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.8 2005/11/19 02:18:00 pedro Exp $	*/
d211 1
a211 2
	sc->sc_targetmap = malloc(size, M_DEVBUF, M_NOWAIT);
	bzero(sc->sc_targetmap, size);
d262 1
a262 1
	if (!(tidmap = malloc(size, M_DEVBUF, M_NOWAIT)))
a263 1
	bzero(tidmap, size);
@


1.8
log
@Remove unnecessary lockmgr() archaism that was costing too much in terms
of panics and bugfixes. Access curproc directly, do not expect a process
pointer as an argument. Should fix many "process context required" bugs.
Incentive and okay millert@@, okay marc@@. Various testing, thanks.
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.7 2003/01/13 03:56:47 mickey Exp $	*/
d139 1
d221 4
a224 1
	config_found(&sc->sc_dv, &sc->sc_link, scsiprint);
@


1.7
log
@make it compile w/ SCSIDEBUG defined, found by brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.6 2002/10/12 01:09:44 krw Exp $	*/
d379 1
a379 1
	rv = lockmgr(&iop->sc_conflock, LK_EXCLUSIVE, NULL, curproc);
d403 1
a403 1
	lockmgr(&iop->sc_conflock, LK_RELEASE, NULL, curproc);
@


1.6
log
@Remove more '\n's from panic() statements. Both trailing and leading.

Diff generated by Chris Kuethe.
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.5 2002/03/14 01:26:53 millert Exp $	*/
d438 1
a438 1
	SC_DEBUG(periph, SDEV_DB2, ("iopsp_scsi_cmd: run_xfer\n"));
d572 1
a572 1
	SC_DEBUG(xs->xs_periph, SDEV_DB2, ("iopsp_intr\n"));
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.4 2001/06/27 06:11:09 mickey Exp $	*/
d458 1
a458 1
		panic("%s: CDB too large\n", sc->sc_dv.dv_xname);
@


1.4
log
@use proper size for swapping
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.3 2001/06/27 02:15:41 niklas Exp $	*/
d81 2
a82 2
int	iopsp_scsi_cmd __P((struct scsi_xfer *));
void	iopspminphys __P((struct buf *bp));
@


1.4.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.4 2001/06/27 06:11:09 mickey Exp $	*/
d81 2
a82 2
int	iopsp_scsi_cmd(struct scsi_xfer *);
void	iopspminphys(struct buf *bp);
@


1.4.6.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.4.6.1 2002/06/11 03:42:16 art Exp $	*/
d458 1
a458 1
		panic("%s: CDB too large", sc->sc_dv.dv_xname);
@


1.4.6.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d438 1
a438 1
	SC_DEBUG(xs->sc_link, SDEV_DB2, ("iopsp_scsi_cmd: run_xfer\n"));
d572 1
a572 1
	SC_DEBUG(xs->sc_link, SDEV_DB2, ("iopsp_intr\n"));
@


1.4.2.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d81 2
a82 2
int	iopsp_scsi_cmd(struct scsi_xfer *);
void	iopspminphys(struct buf *bp);
@


1.4.2.2
log
@Sync the SMP branch with 3.3
@
text
@d438 1
a438 1
	SC_DEBUG(xs->sc_link, SDEV_DB2, ("iopsp_scsi_cmd: run_xfer\n"));
d458 1
a458 1
		panic("%s: CDB too large", sc->sc_dv.dv_xname);
d572 1
a572 1
	SC_DEBUG(xs->sc_link, SDEV_DB2, ("iopsp_intr\n"));
@


1.3
log
@remove unused var decl
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.2 2001/06/27 02:06:37 mickey Exp $	*/
d276 2
a277 2
		    (letoh16(le->usertid) & 4095) == bptid) {
			bptid = letoh32(le->localtid) & 4095;
d283 3
a285 1
		if ((letoh16(le->classid) & 4095) != I2O_CLASS_SCSI_PERIPHERAL)
d287 1
a287 3
		if (((letoh32(le->usertid) >> 12) & 4095) != bptid)
			continue;
		tid = letoh32(le->localtid) & 4095;
@


1.2
log
@modify for our scsi framework
@
text
@d1 1
a1 1
/*	$OpenBSD: iopsp.c,v 1.1 2001/06/26 02:50:13 niklas Exp $	*/
d428 1
a428 1
	int error, flags, tid, s;
@


1.1
log
@Start at raw SCSI support over i2o, from NetBSD, hacked by me, not ready
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d70 5
a74 1
void	iopsp_adjqparam(struct device *, int);
a75 8
void	iopsp_intr(struct device *, struct iop_msg *, void *);
int	iopsp_ioctl(struct scsipi_channel *, u_long, caddr_t, int,
	    struct proc *);
int	iopsp_match(struct device *, void *, void *);
int	iopsp_rescan(struct iopsp_softc *);
int	iopsp_reconfig(struct device *);
void	iopsp_scsi_request(struct scsi_channel *, scsi_adapter_req_t,
	    void *);
d81 16
d103 1
a103 1
	struct iop_attach_args *ia;
d109 1
a109 2

	ia = aux;
d114 5
a118 2
	if (iop_param_op((struct iop_softc *)parent, ia->ia_tid, NULL, 0,
	    I2O_PARAM_HBA_CTLR_INFO, &param, sizeof(param)) != 0)
d120 5
d136 3
a138 3
	struct iop_attach_args *ia;
	struct iopsp_softc *sc;
	struct iop_softc *iop;
a152 4
	ia = (struct iop_attach_args *)aux;
	sc = (struct iopsp_softc *)self;
	iop = (struct iop_softc *)parent;

d191 2
a192 2
	    (u_int32_t)le64toh(param.p.sci.maxsyncrate) / 1000,
	    le32toh(param.p.sci.initiatorid));
d195 6
a200 13
	sc->sc_adapter.adapt_dev = &sc->sc_dv;
	sc->sc_adapter.adapt_nchannels = 1;
	sc->sc_adapter.adapt_openings = 1;
	sc->sc_adapter.adapt_max_periph = 1;
	sc->sc_adapter.adapt_ioctl = iopsp_ioctl;
	sc->sc_adapter.adapt_minphys = minphys;
	sc->sc_adapter.adapt_request = iopsp_scsi_request;

	memset(&sc->sc_channel, 0, sizeof(sc->sc_channel));
	sc->sc_channel.chan_adapter = &sc->sc_adapter;
	sc->sc_channel.chan_bustype = &scsi_bustype;
	sc->sc_channel.chan_channel = 0;
	sc->sc_channel.chan_ntargets = fcal ?
d202 1
a202 3
	sc->sc_channel.chan_nluns = IOPSP_MAX_LUN;
	sc->sc_channel.chan_id = le32toh(param.p.sci.initiatorid);
	sc->sc_channel.chan_flags = SCSI_CHAN_NOSETTLE;
d209 1
a209 1
	size = sc->sc_channel.chan_ntargets * sizeof(struct iopsp_target);
d211 1
a211 1
	memset(sc->sc_targetmap, 0, size);
d219 2
a220 1
	config_found(self, &sc->sc_channel, scsiprint);
d234 2
a235 2
	struct iopsp_softc *sc;
	struct iop_softc *iop;
a236 1
	struct scsi_channel *sc_chan;
a248 4
	sc = (struct iopsp_softc *)dv;
	iop = (struct iop_softc *)sc->sc_dv.dv_parent;
	sc_chan = &sc->sc_channel;

d258 2
a259 2
	size = sc_chan->chan_ntargets * (IOPSP_MAX_LUN) * sizeof(u_short);
	if ((tidmap = malloc(size, M_DEVBUF, M_WAITOK)) == NULL)
d261 1
a261 1
	memset(tidmap, 0, size);
d264 1
a264 1
	for (i = 0; i < sc_chan->chan_ntargets; i++)
d274 1
a274 1
		if ((le16toh(le->classid) & 4095) ==
d276 2
a277 2
		    (le32toh(le->usertid) & 4095) == bptid) {
			bptid = le32toh(le->localtid) & 4095;
d283 1
a283 1
		if ((le16toh(le->classid) & 4095) != I2O_CLASS_SCSI_PERIPHERAL)
d285 1
a285 1
		if (((le32toh(le->usertid) >> 12) & 4095) != bptid)
d287 1
a287 1
		tid = le32toh(le->localtid) & 4095;
d297 1
a297 1
		targ = le32toh(param.sdi.identifier);
d300 2
a301 2
		if (targ >= sc_chan->chan_ntargets ||
		    lun >= sc_chan->chan_nluns) {
d315 1
a315 1
		syncrate = ((int)le64toh(param.sdi.negsyncrate) + 500) / 1000;
d335 1
a335 1
		if ((le32toh(le->usertid) & 4095) != I2O_TID_NONE) {
d343 1
a343 1
				    le32toh(le->usertid) & 4095);
d351 1
a351 1
	for (i = 0; i < sc_chan->chan_ntargets; i++)
d379 1
a379 1
	rv = lockmgr(&iop->sc_conflock, LK_EXCLUSIVE, NULL);
d403 1
a403 1
	lockmgr(&iop->sc_conflock, LK_RELEASE, NULL);
d407 9
d419 3
a421 3
void
iopsp_scsi_request(struct scsi_channel *chan, scsi_adapter_req_t req,
		     void *arg)
d423 3
a425 3
	struct scsi_xfer *xs;
	struct scsi_periph *periph;
	struct iopsp_softc *sc;
a426 1
	struct iop_softc *iop;
d431 6
a436 2
	sc = (void *)chan->chan_adapter->adapt_dev;
	iop = (struct iop_softc *)sc->sc_dv.dv_parent;
d438 1
a438 15
	switch (req) {
	case ADAPTER_REQ_RUN_XFER:
		xs = arg;
		periph = xs->xs_periph;
		flags = xs->xs_control;

		tid = IOPSP_TIDMAP(sc->sc_tidmap, periph->periph_target,
		    periph->periph_lun);
		if (tid == IOPSP_TID_ABSENT || tid == IOPSP_TID_INUSE) {
			xs->error = XS_SELTIMEOUT;
			scsi_done(xs);
			return;
		}

		SC_DEBUG(periph, SDEV_DB2, ("iopsp_scsi_request run_xfer\n"));
d440 4
a443 4
		/* Need to reset the target? */
		if ((flags & XS_CTL_RESET) != 0) {
			if (iop_simple_cmd(iop, tid, I2O_SCSI_DEVICE_RESET,
			    sc->sc_ii.ii_ictx, 1, 30*1000) != 0) {
d445 2
a446 2
				printf("%s: reset failed\n",
				    sc->sc_dv.dv_xname);
d448 7
a454 7
				xs->error = XS_DRIVER_STUFFUP;
			} else
				xs->error = XS_NOERROR;
				
			scsi_done(xs);
			return;
		}
d457 2
a458 2
		if (xs->cmdlen > sizeof(mf->cdb))
			panic("%s: CDB too large\n", sc->sc_dv.dv_xname);
d461 29
a489 27
		im = iop_msg_alloc(iop, &sc->sc_ii, IM_POLL_INTR |
		    IM_NOSTATUS | ((flags & XS_CTL_POLL) != 0 ? IM_POLL : 0));
		im->im_dvcontext = xs;

		mf = (struct i2o_scsi_scb_exec *)mb;
		mf->msgflags = I2O_MSGFLAGS(i2o_scsi_scb_exec);
		mf->msgfunc = I2O_MSGFUNC(tid, I2O_SCSI_SCB_EXEC);
		mf->msgictx = sc->sc_ii.ii_ictx;
		mf->msgtctx = im->im_tctx;
		mf->flags = xs->cmdlen | I2O_SCB_FLAG_ENABLE_DISCONNECT |
		    I2O_SCB_FLAG_SENSE_DATA_IN_MESSAGE;
		mf->datalen = xs->datalen;
		memcpy(mf->cdb, xs->cmd, xs->cmdlen);

		switch (xs->xs_tag_type) {
		case MSG_ORDERED_Q_TAG:
			mf->flags |= I2O_SCB_FLAG_ORDERED_QUEUE_TAG;
			break;
		case MSG_SIMPLE_Q_TAG:
			mf->flags |= I2O_SCB_FLAG_SIMPLE_QUEUE_TAG;
			break;
		case MSG_HEAD_OF_Q_TAG:
			mf->flags |= I2O_SCB_FLAG_HEAD_QUEUE_TAG;
			break;
		default:
			break;
		}
d491 5
a495 25
		if (xs->datalen != 0) {
			error = iop_msg_map_bio(iop, im, mb, xs->data,
			    xs->datalen, (flags & XS_CTL_DATA_OUT) == 0);
			if (error) {
				xs->error = XS_DRIVER_STUFFUP;
				iop_msg_free(iop, im);
				scsi_done(xs);
				return;
			}
			if ((flags & XS_CTL_DATA_IN) == 0)
				mf->flags |= I2O_SCB_FLAG_XFER_TO_DEVICE;
			else
				mf->flags |= I2O_SCB_FLAG_XFER_FROM_DEVICE;
		}

		s = splbio();
		sc->sc_curqd++;
		splx(s);

		if (iop_msg_post(iop, im, mb, xs->timeout)) {
			s = splbio();
			sc->sc_curqd--;
			splx(s);
			if (xs->datalen != 0)
				iop_msg_unmap(iop, im);
a496 1
			xs->error = XS_DRIVER_STUFFUP;
d498 1
d500 5
a504 1
		break;
d506 3
a508 5
	case ADAPTER_REQ_GROW_RESOURCES:
		/*
		 * Not supported.
		 */
		break;
d510 10
a519 6
	case ADAPTER_REQ_SET_XFER_MODE:
		/*
		 * The DDM takes care of this, and we can't modify its
		 * behaviour.
		 */
		break;
d521 2
d604 4
a607 4
				sl = le32toh(rb->senselen);
				if (sl > sizeof(xs->sense.scsi_sense))
					sl = sizeof(xs->sense.scsi_sense);
				memcpy(&xs->sense.scsi_sense, rb->sense, sl);
d620 1
a620 1
		xs->resid = xs->datalen - le32toh(rb->datalen);
d629 1
a629 1
	if (--sc->sc_curqd == sc->sc_adapter.adapt_openings)
a635 31
 * ioctl hook; used here only to initiate low-level rescans.
 */
int
iopsp_ioctl(struct scsi_channel *chan, u_long cmd, caddr_t data, int flag,
	    struct proc *p)
{
	int rv;

	switch (cmd) {
	case SCBUSIOLLSCAN:
		/*
		 * If it's boot time, the bus will have been scanned and the
		 * maps built.  Locking would stop re-configuration, but we
		 * want to fake success.
		 */
		if (p != &proc0)
			rv = iopsp_rescan(
			   (struct iopsp_softc *)chan->chan_adapter->adapt_dev);
		else
			rv = 0;
		break;

	default:
		rv = ENOTTY;
		break;
	}

	return (rv);
}

/*
d641 1
a641 1
	struct iopsp_softc *sc;
a643 2
	sc = (struct iopsp_softc *)dv;

d645 1
a645 1
	sc->sc_adapter.adapt_openings = mpi;
@

