head	1.10;
access;
symbols
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.9.0.10
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.6
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.7.0.10
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.8
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.26
	OPENBSD_5_0:1.5.0.24
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.22
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.20
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.16
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.18
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.14
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.12
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.10
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.8
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.6
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.18
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.16
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.8
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.8
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.6
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2017.07.19.22.23.54;	author kettenis;	state Exp;
branches;
next	1.9;
commitid	22YJEQXh38RA2H6B;

1.9
date	2015.05.16.09.56.10;	author ratchov;	state Exp;
branches;
next	1.8;
commitid	CPWEvqjSjLxYqATk;

1.8
date	2015.05.12.18.39.30;	author ratchov;	state Exp;
branches;
next	1.7;
commitid	4wldPiWWqlXNRB7d;

1.7
date	2013.03.15.09.10.52;	author ratchov;	state Exp;
branches;
next	1.6;

1.6
date	2012.03.30.08.18.19;	author ratchov;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.21.18.16.38;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.01.04.08.45;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.27.19.44.48;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.26.22.43.22;	author art;	state Exp;
branches;
next	1.1;

1.1
date	99.01.02.00.02.38;	author niklas;	state Exp;
branches
	1.1.6.1;
next	;

1.1.6.1
date	2001.05.14.22.23.02;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove SIGIO support.  The audio(4) driver doesn't implement it either and
the preferred method to access MIDI hardware is through sndiod(8) which
doesn't use it.

Fixes a potential issue with a stale struct proc pointer found by Ilja van
Sprundel.

ok deraadt@@, ratchov@@
@
text
@/*	$OpenBSD: midivar.h,v 1.9 2015/05/16 09:56:10 ratchov Exp $	*/

/*
 * Copyright (c) 2003, 2004 Alexandre Ratchov
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _SYS_DEV_MIDIVAR_H_
#define _SYS_DEV_MIDIVAR_H_

#include <dev/midi_if.h>
#include <sys/device.h>
#include <sys/selinfo.h>
#include <sys/proc.h>
#include <sys/timeout.h>

#define MIDI_MAXWRITE	32	/* max bytes to give to the uart at once */
#define MIDI_RATE	3125	/* midi uart baud rate in bytes/second */

/*
 * simple ring buffer
 */
#define MIDIBUF_SIZE		(1 << 10)
#define MIDIBUF_MASK		(MIDIBUF_SIZE - 1)
struct midi_buffer {
	unsigned char data[MIDIBUF_SIZE]; 
	unsigned      start, used;
};
#define MIDIBUF_START(buf)	((buf)->start)
#define MIDIBUF_END(buf)	(((buf)->start + (buf)->used) & MIDIBUF_MASK)
#define MIDIBUF_USED(buf)	((buf)->used)
#define MIDIBUF_AVAIL(buf)	(MIDIBUF_SIZE - (buf)->used)
#define MIDIBUF_ISFULL(buf)	((buf)->used >= MIDIBUF_SIZE)
#define MIDIBUF_ISEMPTY(buf)	((buf)->used == 0)
#define MIDIBUF_WRITE(buf, byte) 				\
	do {							\
		(buf)->data[MIDIBUF_END(buf)] = (byte);		\
		(buf)->used++;					\
	} while(0)
#define MIDIBUF_READ(buf, byte)					\
	do {							\
		(byte) = (buf)->data[(buf)->start++];		\
		(buf)->start &= MIDIBUF_MASK;			\
		(buf)->used--;					\
	} while(0)
#define MIDIBUF_REMOVE(buf, count)				\
	do {							\
		(buf)->start += (count);			\
		(buf)->start &= MIDIBUF_MASK;			\
		(buf)->used  -= (count);			\
	} while(0)
#define MIDIBUF_INIT(buf) 					\
	do {							\
		(buf)->start = (buf)->used = 0;			\
	} while(0)
	

struct midi_softc {
	struct device	    dev;
	struct midi_hw_if  *hw_if;
	void		   *hw_hdl;
	int		    isbusy;		/* concerns only the output */
	int		    flags;		/* open flags */
	int		    props;		/* midi hw proprieties */
	int		    rchan;
	int		    wchan;
	struct selinfo	    rsel;
	struct selinfo	    wsel;
	struct timeout	    timeo;
	struct midi_buffer  inbuf;
	struct midi_buffer  outbuf;
};

#endif /* _SYS_DEV_MIDIVAR_H_ */
@


1.9
log
@Use device_lookup() instead of digging into midi_cd.cd_devs[] and
maintaining a "dying" flag which is already present in the device
structure. As a side-effect, this adds the missing refcounting
that mididetach() was missing. With from mpi@@ and dlg@@

ok mpi
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a79 1
	struct proc 	   *async;
@


1.8
log
@remove the sc->isopen flag, as sc->flags already hold the
same information.
@
text
@a29 2
#define MIDI_UNIT(a)	((a) & 0xff)
#define MIDI_DEV2SC(a)	(midi_cd.cd_devs[MIDI_UNIT(a)])
a73 1
	int		    isdying;
@


1.7
log
@Delete the sequencer(4) driver, since its not used any longer. Diff
mostly from armani.
ok miod, mpi, jsg and help from sthen
@
text
@d1 1
a1 1
/*	$OpenBSD: midivar.h,v 1.6 2012/03/30 08:18:19 ratchov Exp $	*/
a74 1
	int	 	    isopen;
@


1.6
log
@If the MIDI UART is not ready for output, don't spin at IPL_CLOCK;
just return and make the midi(4) driver retry later. UART buffers
are large enough for this, except eap(4) which uses interrupts for
output.
help from and ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: midivar.h,v 1.5 2005/11/21 18:16:38 millert Exp $	*/
a32 6
#include "sequencer.h"

#if NSEQUENCER > 0
struct midi_dev;		/* defined in sequencervar.h */
#endif

a87 7
#if NSEQUENCER > 0
        int		    seqopen;
        struct midi_dev    *seq_md; 		/* structure that links us with the seq. */
	int		    evindex;
	unsigned char	    evstatus;
	unsigned char	    evdata[2];
#endif /* NSEQUENCER > 0 */
@


1.5
log
@Move contents of sys/select.h to sys/selinfo.h in preparation for a
userland-visible sys/select.h.  Consistent with what Net and Free do.
OK deraadt@@, tested with full ports build by naddy@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: midivar.h,v 1.4 2004/10/01 04:08:45 jsg Exp $	*/
a87 1
	unsigned	    wait;		/* see midi_out_do */
@


1.4
log
@add some missing $, ok djm@@ 'That looks fine to me' millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d24 1
a24 1
#include <sys/select.h>
@


1.3
log
@better midi stuff from alex@@caoua.org
@
text
@d1 2
@


1.2
log
@Convert to new timeouts.
@
text
@a0 3
/*	$OpenBSD: midivar.h,v 1.1 1999/01/02 00:02:38 niklas Exp $	*/
/*	$NetBSD: midivar.h,v 1.6 1998/11/25 22:17:07 augustss Exp $	*/

d2 1
a2 5
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (augustss@@netbsd.org).
d4 3
a6 15
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
d8 7
a14 11
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
d20 10
a29 1
#define MIDI_BUFSIZE 1024
a31 1
#include <sys/timeout.h>
d33 9
d43 2
a44 6
	u_char	*inp;
	u_char	*outp;
	u_char	*end;
	int	used;
	int	usedhigh;
	u_char	start[MIDI_BUFSIZE];
d46 28
a73 3

#define MIDI_MAX_WRITE 32	/* max bytes written with busy wait */
#define MIDI_WAIT 10000		/* microseconds to wait after busy wait */
d76 17
a92 26
	struct	device dev;
	void	*hw_hdl;	/* Hardware driver handle */
	struct	midi_hw_if *hw_if; /* Hardware interface */
	struct	device *sc_dev;	/* Hardware device struct */
	int	isopen;		/* Open indicator */
	int	flags;		/* Open flags */
	struct	midi_buffer outbuf;
	struct	midi_buffer inbuf;
	int	props;
	int	rchan, wchan;
	int	pbus;
	struct	selinfo wsel;	/* write selector */
	struct	selinfo rsel;	/* read selector */
	struct	proc *async;	/* process who wants audio SIGIO */
	struct	timeout timeo;	/* timeout handle */

	/* MIDI input state machine */
	int	in_state;
#define MIDI_IN_START 0
#define MIDI_IN_DATA 1
#define MIDI_IN_SYSEX 2
	u_char	in_msg[3];
	u_char	in_status;
	u_int	in_left;
	u_int	in_pos;

d94 6
a99 4
	/* Synthesizer emulation stuff */
	int	seqopen;
	struct	midi_dev *seq_md; /* structure that links us with the seq. */
#endif
a100 2

#define MIDIUNIT(d) ((d) & 0xff)
@


1.1
log
@Midi & sequencer support from NetBSD, mostly by Lennart Augustsson
@
text
@d1 1
a1 1
/*	$OpenBSD: midivar.h,v 1.6 1998/11/25 22:17:07 augustss Exp $	*/
d46 1
d75 1
@


1.1.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: midivar.h,v 1.2 2000/06/26 22:43:22 art Exp $	*/
a45 1
#include <sys/timeout.h>
a73 1
	struct	timeout timeo;	/* timeout handle */
@


