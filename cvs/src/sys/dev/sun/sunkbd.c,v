head	1.27;
access;
symbols
	OPENBSD_6_2_BASE:1.27
	OPENBSD_6_1:1.27.0.6
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.27.0.2
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.26.0.10
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.26.0.18
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.16
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.26.0.14
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.26.0.12
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.26.0.8
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.26.0.6
	OPENBSD_5_3_BASE:1.26
	OPENBSD_5_2:1.26.0.4
	OPENBSD_5_2_BASE:1.26
	OPENBSD_5_1_BASE:1.26
	OPENBSD_5_1:1.26.0.2
	OPENBSD_5_0:1.25.0.12
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.10
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.25.0.8
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.4
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.6
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.25.0.2
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.21.0.12
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.10
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.8
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.21.0.6
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.21.0.4
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.21.0.2
	OPENBSD_3_9_BASE:1.21
	OPENBSD_3_8:1.20.0.2
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.19.0.2
	OPENBSD_3_7_BASE:1.19
	OPENBSD_3_6:1.18.0.6
	OPENBSD_3_6_BASE:1.18
	SMP_SYNC_A:1.18
	SMP_SYNC_B:1.18
	OPENBSD_3_5:1.18.0.4
	OPENBSD_3_5_BASE:1.18
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	UBC_SYNC_A:1.17
	OPENBSD_3_3:1.16.0.2
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	SMP:1.3.0.2
	UBC:1.1.0.2
	UBC_SYNC_B:1.9;
locks; strict;
comment	@ * @;


1.27
date	2016.03.19.11.41.56;	author mpi;	state Exp;
branches;
next	1.26;
commitid	YKz4aSf7zOPIkVrc;

1.26
date	2011.11.09.14.22.37;	author shadchin;	state Exp;
branches;
next	1.25;

1.25
date	2009.01.12.21.11.58;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2009.01.12.17.45.37;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2009.01.11.18.59.54;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2009.01.11.15.53.58;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2005.11.11.16.44.51;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2005.05.14.15.25.20;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2005.02.28.20.32.34;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.02.18.59.38;	author jason;	state Exp;
branches;
next	1.17;

1.17
date	2003.05.17.02.31.56;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2003.03.17.23.26.29;	author matthieu;	state Exp;
branches;
next	1.15;

1.15
date	2003.01.28.21.17.07;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2003.01.22.19.02.31;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.01.17.51.36;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2002.11.29.01.00.51;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2002.11.23.23.49.13;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2002.11.23.19.15.22;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2002.09.08.23.22.00;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.29.22.18.40;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.26.20.42.38;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.05.21.23.40;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.29.20.43.43;	author maja;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.08.17.49.42;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.25.20.23.33;	author maja;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2002.02.25.19.51.51;	author maja;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.25.03.24.53;	author jason;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2002.01.31.22.55.39;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.06.11.03.42.29;	author art;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2002.10.29.00.33.31;	author art;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2003.05.19.22.23.38;	author tedu;	state Exp;
branches;
next	;

1.3.2.1
date	2003.03.28.00.38.30;	author niklas;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2003.06.07.11.02.32;	author ho;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Reduces the noise around the global ``ticks''  variable by renaming all
local ones to ``nticks''.

(missed in previous)

ok stefan@@, deraadt@@
@
text
@/*	$OpenBSD: sunkbd.c,v 1.26 2011/11/09 14:22:37 shadchin Exp $	*/

/*
 * Copyright (c) 2002 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/timeout.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wskbdvar.h>
#ifdef WSDISPLAY_COMPAT_RAWKBD
#include <dev/wscons/wskbdraw.h>
#endif

#include <dev/sun/sunkbdreg.h>
#include <dev/sun/sunkbdvar.h>

#ifdef __sparc64__
#define	NTCTRL 0
#else
#include "tctrl.h"
#endif

#if NTCTRL > 0
#include <sparc/dev/tctrlvar.h>		/* XXX for tadpole_bell() */
#endif

void	sunkbd_bell(struct sunkbd_softc *, u_int, u_int, u_int);
void	sunkbd_decode5(u_int8_t, u_int *, int *);
int	sunkbd_enable(void *, int);
int	sunkbd_getleds(struct sunkbd_softc *);
int	sunkbd_ioctl(void *, u_long, caddr_t, int, struct proc *);
void	sunkbd_setleds(void *, int);

struct wskbd_accessops sunkbd_accessops = {
	sunkbd_enable,
	sunkbd_setleds,
	sunkbd_ioctl
};

void
sunkbd_attach(struct sunkbd_softc *sc, struct wskbddev_attach_args *waa)
{
	if (ISTYPE5(sc->sc_layout))
		sc->sc_decode = sunkbd_decode5;
	else
		sc->sc_decode = sunkbd_decode;

	sc->sc_wskbddev = config_found((struct device *)sc, waa,
	    wskbddevprint);
}

void
sunkbd_bell(struct sunkbd_softc *sc, u_int period, u_int pitch, u_int volume)
{
	int nticks, s;
	u_int8_t c = SKBD_CMD_BELLON;

#if NTCTRL > 0
	if (tadpole_bell(period / 10, pitch, volume) != 0)
		return;
#endif

	s = spltty();
	if (sc->sc_bellactive) {
		if (sc->sc_belltimeout == 0)
			timeout_del(&sc->sc_bellto);
	}
	if (pitch == 0 || period == 0) {
		sunkbd_bellstop(sc);
		splx(s);
		return;
	}
	if (sc->sc_bellactive == 0) {
		nticks = (period * hz) / 1000;
		if (nticks <= 0)
			nticks = 1;

		sc->sc_bellactive = 1;
		sc->sc_belltimeout = 1;
		(*sc->sc_sendcmd)(sc, &c, 1);
		timeout_add(&sc->sc_bellto, nticks);
	}
	splx(s);
}

void
sunkbd_bellstop(void *v)
{
	struct sunkbd_softc *sc = v;
	int s;
	u_int8_t c;

	s = spltty();
	sc->sc_belltimeout = 0;
	c = SKBD_CMD_BELLOFF;
	(*sc->sc_sendcmd)(v, &c, 1);
	sc->sc_bellactive = 0;
	splx(s);
}

void
sunkbd_decode(u_int8_t c, u_int *type, int *value)
{
	switch (c) {
	case SKBD_RSP_IDLE:
		*type = WSCONS_EVENT_ALL_KEYS_UP;
		*value = 0;
		break;
	default:
		*type = (c & 0x80) ?
		    WSCONS_EVENT_KEY_UP : WSCONS_EVENT_KEY_DOWN;
		*value = c & 0x7f;
		break;
	}
}

void
sunkbd_decode5(u_int8_t c, u_int *type, int *value)
{
	sunkbd_decode(c, type, value);
	/*
	 * Scancode 0x2d is KS_KP_Equal on type 4, and KS_AudioMute on
	 * type 5. Rather than provide two distinct maps, we remap the
	 * scancode here.
	 */
	if (*value == 0x2d)
		*value = 0x7f;
}

int
sunkbd_enable(void *v, int on)
{
	return (0);
}

int
sunkbd_getleds(struct sunkbd_softc *sc)
{
	return (sc->sc_leds);
}

void
sunkbd_input(struct sunkbd_softc *sc, u_int8_t *buf, u_int buflen)
{
	u_int type;
	int value;
	int s;

	if (sc->sc_wskbddev == NULL)
		return;	/* why bother */

#ifdef WSDISPLAY_COMPAT_RAWKBD
	if (sc->sc_rawkbd) {
		u_char rbuf[SUNKBD_MAX_INPUT_SIZE * 2];
		int c, rlen = 0;

		while (buflen-- != 0) {
			(*sc->sc_decode)(*buf++, &type, &value);
			c = sunkbd_rawmap[value];
			if (c == RAWKEY_Null)
				continue;
			/* fake extended scancode if necessary */
			if (c & 0x80)
				rbuf[rlen++] = 0xe0;
			rbuf[rlen] = c & 0x7f;
			if (type == WSCONS_EVENT_KEY_UP)
				rbuf[rlen] |= 0x80;
			rlen++;
		}

		s = spltty();
		wskbd_rawinput(sc->sc_wskbddev, rbuf, rlen);
		splx(s);
	} else
#endif
	{
		s = spltty();
		while (buflen-- != 0) {
			(*sc->sc_decode)(*buf++, &type, &value);
			wskbd_input(sc->sc_wskbddev, type, value);
		}
		splx(s);
	}
}

int
sunkbd_ioctl(void *v, u_long cmd, caddr_t data, int flag, struct proc *p)
{
	struct sunkbd_softc *sc = v;
	int *d_int = (int *)data;
	struct wskbd_bell_data *d_bell = (struct wskbd_bell_data *)data;

	switch (cmd) {
	case WSKBDIO_GTYPE:
		if (ISTYPE5(sc->sc_layout)) {
			*d_int = WSKBD_TYPE_SUN5;
		} else {
			*d_int = WSKBD_TYPE_SUN;
		}
		return (0);
	case WSKBDIO_SETLEDS:
		sunkbd_setleds(sc, *d_int);
		return (0);
	case WSKBDIO_GETLEDS:
		*d_int = sunkbd_getleds(sc);
		return (0);
	case WSKBDIO_COMPLEXBELL:
		sunkbd_bell(sc, d_bell->period, d_bell->pitch, d_bell->volume);
		return (0);
#ifdef WSDISPLAY_COMPAT_RAWKBD
	case WSKBDIO_SETMODE:
		sc->sc_rawkbd = *(int *)data == WSKBD_RAW;
		return (0);
#endif
	}

	return (-1);
}

void
sunkbd_raw(struct sunkbd_softc *sc, u_int8_t c)
{
	int claimed = 0;

	if (sc->sc_kbdstate == SKBD_STATE_LAYOUT) {
		sc->sc_kbdstate = SKBD_STATE_GETKEY;
		sc->sc_layout = c;
		return;
	}

	switch (c) {
	case SKBD_RSP_RESET:
		sc->sc_kbdstate = SKBD_STATE_RESET;
		claimed = 1;
		break;
	case SKBD_RSP_LAYOUT:
		sc->sc_kbdstate = SKBD_STATE_LAYOUT;
		claimed = 1;
		break;
	case SKBD_RSP_IDLE:
		sc->sc_kbdstate = SKBD_STATE_GETKEY;
		claimed = 1;
	}

	if (claimed)
		return;

	switch (sc->sc_kbdstate) {
	case SKBD_STATE_RESET:
		sc->sc_kbdstate = SKBD_STATE_GETKEY;
		if (c < KB_SUN2 || c > KB_SUN4)
			printf("%s: reset: invalid keyboard type 0x%02x\n",
			    sc->sc_dev.dv_xname, c);
		else
			sc->sc_id = c;
		break;
	case SKBD_STATE_GETKEY:
		break;
	}
}

int
sunkbd_setclick(struct sunkbd_softc *sc, int click)
{
	u_int8_t c;

	/* Type 2 keyboards do not support keyclick */
	if (sc->sc_id == KB_SUN2)
		return (ENXIO);

	c = click ? SKBD_CMD_CLICKON : SKBD_CMD_CLICKOFF;
	(*sc->sc_sendcmd)(sc, &c, 1);
	return (0);
}

void
sunkbd_setleds(void *v, int wled)
{
	struct sunkbd_softc *sc = v;
	u_int8_t sled = 0;
	u_int8_t cmd[2];

	sc->sc_leds = wled;

	if (wled & WSKBD_LED_CAPS)
		sled |= SKBD_LED_CAPSLOCK;
	if (wled & WSKBD_LED_NUM)
		sled |= SKBD_LED_NUMLOCK;
	if (wled & WSKBD_LED_SCROLL)
		sled |= SKBD_LED_SCROLLLOCK;
	if (wled & WSKBD_LED_COMPOSE)
		sled |= SKBD_LED_COMPOSE;

	cmd[0] = SKBD_CMD_SETLED;
	cmd[1] = sled;
	(*sc->sc_sendcmd)(sc, cmd, sizeof(cmd));
}
@


1.26
log
@Auto-repeat keys in WSKBD_RAW mode is not needed.
WSKBD_RAW mode used in X, but X independently implements auto-repeat keys.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.25 2009/01/12 21:11:58 miod Exp $	*/
d87 1
a87 1
	int ticks, s;
d106 3
a108 3
		ticks = (period * hz) / 1000;
		if (ticks <= 0)
			ticks = 1;
d113 1
a113 1
		timeout_add(&sc->sc_bellto, ticks);
@


1.25
log
@Oops, sunkbd_decode() still needs to be public for *cngetc() to work;
spotted the hard way by kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.24 2009/01/12 17:45:37 miod Exp $	*/
a63 1
void	sunkbd_rawrepeat(void *);
a74 4
#ifdef WSDISPLAY_COMPAT_RAWKBD
	timeout_set(&sc->sc_rawrepeat_tmo, sunkbd_rawrepeat, sc);
#endif

d187 1
a187 3
		int c, rlen, npress;

		timeout_del(&sc->sc_rawrepeat_tmo);
a188 1
		npress = rlen = 0;
a199 6
			else {
				/* remember down keys for autorepeat */
				if (c & 0x80)
					sc->sc_rep[npress++] = 0xe0;
				sc->sc_rep[npress++] = c & 0x7f;
			}
a205 3
		sc->sc_nrep = npress;
		if (npress != 0)
			timeout_add_msec(&sc->sc_rawrepeat_tmo, REP_DELAY1);
a244 1
		timeout_del(&sc->sc_rawrepeat_tmo);
a292 14

#ifdef WSDISPLAY_COMPAT_RAWKBD
void
sunkbd_rawrepeat(void *v)
{
	struct sunkbd_softc *sc = v;
	int s;

	s = spltty();
	wskbd_rawinput(sc->sc_wskbddev, sc->sc_rep, sc->sc_nrep);
	splx(s);
	timeout_add_msec(&sc->sc_rawrepeat_tmo, REP_DELAYN);
}
#endif
@


1.24
log
@Remap the audio mute key on type 5, as it collides with the keypad equal
key on type 4.
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.23 2009/01/11 18:59:54 miod Exp $	*/
a59 1
void	sunkbd_decode(u_int8_t, u_int *, int *);
@


1.23
log
@WSDISPLAY_COMPAT_RAWKBD support for sun serial keyboards (zskbd, comkbd).
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.22 2009/01/11 15:53:58 miod Exp $	*/
d60 2
d81 5
d155 13
d199 1
a199 1
			sunkbd_decode(*buf++, &type, &value);
d229 1
a229 1
			sunkbd_decode(*buf++, &type, &value);
@


1.22
log
@Factor a bit more sunkbd common parts; paves the way for upcoming
WSDISPLAY_COMPAT_RAWKBD support.
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.21 2005/11/11 16:44:51 miod Exp $	*/
d42 3
d75 4
d165 32
d198 15
a212 3
	while (buflen-- != 0) {
		sunkbd_decode(*buf++, &type, &value);
		wskbd_input(sc->sc_wskbddev, type, value);
d240 6
d292 14
@


1.21
log
@Enable or disable keyclick on attach, based upon the PROM keyboard-click?
property.
Tested with type 3 and type 4 keyboards.
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.20 2005/05/14 15:25:20 miod Exp $	*/
d60 1
d70 7
d151 12
@


1.20
log
@Factorize most of the high-level logic for Sun serial keyboards in
sys/dev/sun/sunkbd.c, and move the layout tables to sys/dev/sun/sunkbdmap.c.

No functional changes, small sparc64 kernel shrinkage.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d214 14
@


1.19
log
@Fix confusion between KS_paragraph and KS_section; inspired from a PS/2
keyboard sv map error spotted by Jan Johansson.
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.18 2003/06/02 18:59:38 jason Exp $	*/
a3 1
 * Copyright (c) 2002, 2003 Miodrag Vallat.
d38 1
a41 2
#include <dev/wscons/wsksymdef.h>
#include <dev/wscons/wsksymvar.h>
d46 5
a50 1
#define	KC(n)	KS_KEYCODE(n)
d52 3
a54 680
/* 000/021/022 US English type 4/5 keyboard */
const keysym_t sunkbd_keydesc_us[] = {
    KC(0x01), KS_Cmd,
    KC(0x02), KS_Cmd_BrightnessDown,
    KC(0x03),				KS_Again,
    KC(0x04), KS_Cmd_BrightnessUp,
    KC(0x05),				KS_f1,
    KC(0x06),				KS_f2,
    KC(0x07),				KS_f10,
    KC(0x08),				KS_f3,
    KC(0x09),				KS_f11,
    KC(0x0a),				KS_f4,
    KC(0x0b),				KS_f12,
    KC(0x0c),				KS_f5,
    KC(0x0d),				KS_Alt_R,
    KC(0x0e),				KS_f6,
    KC(0x10),				KS_f7,
    KC(0x11),				KS_f8,
    KC(0x12),				KS_f9,
    KC(0x13),				KS_Alt_L,
    KC(0x14),				KS_Up,
    KC(0x15),				KS_Pause,
    KC(0x16),				KS_Print_Screen,
    KC(0x17),				KS_Hold_Screen,
    KC(0x18),				KS_Left,
    KC(0x19),				KS_Props,
    KC(0x1a),				KS_Undo,
    KC(0x1b),				KS_Down,
    KC(0x1c),				KS_Right,
    KC(0x1d),				KS_Escape,
    KC(0x1e),				KS_1,		KS_exclam,
    KC(0x1f),				KS_2,		KS_at,
    KC(0x20),				KS_3,		KS_numbersign,
    KC(0x21),				KS_4,		KS_dollar,
    KC(0x22),				KS_5,		KS_percent,
    KC(0x23),				KS_6,		KS_asciicircum,
    KC(0x24),				KS_7,		KS_ampersand,
    KC(0x25),				KS_8,		KS_asterisk,
    KC(0x26),				KS_9,		KS_parenleft,
    KC(0x27),				KS_0,		KS_parenright,
    KC(0x28),				KS_minus,	KS_underscore,
    KC(0x29),				KS_equal,	KS_plus,
    KC(0x2a),				KS_grave,	KS_asciitilde,
    KC(0x2b),				KS_Delete,
    KC(0x2c),				KS_Insert,
    KC(0x2d),				KS_KP_Equal,
    KC(0x2e),				KS_KP_Divide,
    KC(0x2f),				KS_KP_Multiply,
    KC(0x31),				KS_Front,
    KC(0x32),				KS_KP_Delete,	KS_KP_Decimal,
    KC(0x33),				KS_Copy,
    KC(0x34),				KS_Home,
    KC(0x35),				KS_Tab,
    KC(0x36),				KS_q,
    KC(0x37),				KS_w,
    KC(0x38),				KS_e,
    KC(0x39),				KS_r,
    KC(0x3a),				KS_t,
    KC(0x3b),				KS_y,
    KC(0x3c),				KS_u,
    KC(0x3d),				KS_i,
    KC(0x3e),				KS_o,
    KC(0x3f),				KS_p,
    KC(0x40),				KS_bracketleft,	KS_braceleft,
    KC(0x41),				KS_bracketright,KS_braceright,
    KC(0x42),				KS_Delete,
    KC(0x43),				KS_Multi_key,
    KC(0x44),				KS_KP_Home,	KS_KP_7,
    KC(0x45),				KS_KP_Up,	KS_KP_8,
    KC(0x46),				KS_KP_Prior,	KS_KP_9,
    KC(0x47),				KS_KP_Subtract,
    KC(0x48),				KS_Open,
    KC(0x49),				KS_Paste,
    KC(0x4a),				KS_End,
    KC(0x4c),				KS_Control_L,
    KC(0x4d), KS_Cmd_Debugger,		KS_a,
    KC(0x4e),				KS_s,
    KC(0x4f),				KS_d,
    KC(0x50),				KS_f,
    KC(0x51),				KS_g,
    KC(0x52),				KS_h,
    KC(0x53),				KS_j,
    KC(0x54),				KS_k,
    KC(0x55),				KS_l,
    KC(0x56),				KS_semicolon,	KS_colon,
    KC(0x57),				KS_apostrophe,	KS_quotedbl,
    KC(0x58),				KS_backslash,	KS_bar,
    KC(0x59),				KS_Return,
    KC(0x5a),				KS_KP_Enter,
    KC(0x5b),				KS_KP_Left,	KS_KP_4,
    KC(0x5c),				KS_KP_Begin,	KS_KP_5,
    KC(0x5d),				KS_KP_Right,	KS_KP_6,
    KC(0x5e),				KS_KP_Insert,	KS_KP_0,
    KC(0x5f),				KS_Find,
    KC(0x60),				KS_Prior,
    KC(0x61),				KS_Cut,
    KC(0x62),				KS_Num_Lock,
    KC(0x63),				KS_Shift_L,
    KC(0x64),				KS_z,
    KC(0x65),				KS_x,
    KC(0x66),				KS_c,
    KC(0x67),				KS_v,
    KC(0x68),				KS_b,
    KC(0x69),				KS_n,
    KC(0x6a),				KS_m,
    KC(0x6b),				KS_comma,	KS_less,
    KC(0x6c),				KS_period,	KS_greater,
    KC(0x6d),				KS_slash,	KS_question,
    KC(0x6e),				KS_Shift_R,
    KC(0x6f),				KS_Linefeed,
    KC(0x70),				KS_KP_End,	KS_KP_1,
    KC(0x71),				KS_KP_Down,	KS_KP_2,
    KC(0x72),				KS_KP_Next,	KS_KP_3,
    KC(0x76),				KS_Help,
    KC(0x77),				KS_Caps_Lock,
    KC(0x78),				KS_Meta_L,
    KC(0x79),				KS_space,
    KC(0x7a),				KS_Meta_R,
    KC(0x7b),				KS_Next,
    KC(0x7d),				KS_KP_Add,
};

/* 002 French/Belgian type 4 keyboard */
const keysym_t sunkbd_keydesc_befr[] = {
    KC(0x0d),		KS_Caps_Lock,
    KC(0x0f),		KS_bracketright,KS_braceright,	KS_guillemotright,
    KC(0x1e),		KS_ampersand,	KS_1,
    KC(0x1f),		KS_eacute,	KS_2,		KS_twosuperior,
    KC(0x20),		KS_quotedbl,	KS_3,		KS_threesuperior,
    KC(0x21),		KS_apostrophe,	KS_4,
    KC(0x22),		KS_parenleft,	KS_5,
    KC(0x23),		KS_section,	KS_6,
    KC(0x24),		KS_egrave,	KS_7,
    KC(0x25),		KS_exclam,	KS_8,		KS_sterling,
    KC(0x26),		KS_ccedilla,	KS_9,		KS_backslash,
    KC(0x27),		KS_agrave,	KS_0,
    KC(0x28),		KS_parenright,	KS_degree,	KS_asciitilde,
    KC(0x29),		KS_minus,	KS_underscore,	KS_numbersign,
    KC(0x2a),		KS_asterisk,	KS_bar,		KS_currency,
    KC(0x36),		KS_a,
    KC(0x37),		KS_z,
    KC(0x40),		KS_dead_circumflex,KS_dead_diaeresis,
    KC(0x41),		KS_grave,	KS_dollar,	KS_at,
    KC(0x4d), KS_Cmd_Debugger,	KS_q,
    KC(0x56),		KS_m,		KS_M,		KS_mu,
    KC(0x57),		KS_ugrave,	KS_percent,
    KC(0x58),		KS_bracketleft,	KS_braceleft,	KS_guillemotleft,
    KC(0x64),		KS_w,
    KC(0x6a),		KS_comma,	KS_question,
    KC(0x6b),		KS_semicolon,	KS_period,
    KC(0x6c),		KS_colon,	KS_slash,
    KC(0x6d),		KS_equal,	KS_plus,
    KC(0x77),		KS_Mode_switch,
    KC(0x7c),		KS_less,	KS_greater,
};

/* 023 French type 5 keyboard */
const keysym_t sunkbd5_keydesc_fr[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1e),		KS_ampersand,	KS_1,
    KC(0x1f),		KS_eacute,	KS_2,		KS_asciitilde,
    KC(0x20),		KS_quotedbl,	KS_3,		KS_numbersign,
    KC(0x21),		KS_apostrophe,	KS_4,		KS_braceleft,
    KC(0x22),		KS_parenleft,	KS_5,		KS_bracketleft,
    KC(0x23),		KS_minus,	KS_6,		KS_bar,
    KC(0x24),		KS_egrave,	KS_7,		KS_grave,
    KC(0x25),		KS_underscore,	KS_8,		KS_backslash,
    KC(0x26),		KS_ccedilla,	KS_9,		KS_asciicircum,
    KC(0x27),		KS_agrave,	KS_0,		KS_at,
    KC(0x28),		KS_parenright,	KS_degree,	KS_bracketright,
    KC(0x29),		KS_equal,	KS_plus,	KS_braceright,
    KC(0x2a),		KS_twosuperior,
    KC(0x36),		KS_a,
    KC(0x37),		KS_z,
    KC(0x40),		KS_dead_circumflex,KS_dead_diaeresis,
    KC(0x41),		KS_dollar,	KS_sterling,	KS_currency,
    KC(0x4d), KS_Cmd_Debugger,	KS_q,
    KC(0x56),		KS_m,
    KC(0x57),		KS_ugrave,	KS_percent,
    KC(0x58),		KS_asterisk,	KS_mu,
    KC(0x64),		KS_w,
    KC(0x6a),		KS_comma,	KS_question,
    KC(0x6b),		KS_semicolon,	KS_period,
    KC(0x6c),		KS_colon,	KS_slash,
    KC(0x6d),		KS_exclam,	KS_section,
    KC(0x7c),		KS_less,	KS_greater,
};

/* 004 Danish type 4 keyboard */
const keysym_t sunkbd_keydesc_dk[] = {
    KC(0x0d),		KS_Multi_key,
    KC(0x0f),		KS_asciitilde,	KS_asciicircum, 
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_currency,	KS_dollar,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_plus,	KS_question,
    KC(0x29),		KS_dead_acute,	KS_dead_grave,	KS_bar,
    KC(0x2a),		KS_apostrophe,	KS_asterisk,	KS_grave,
    KC(0x40),		KS_aring,
    KC(0x41),		KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(0x43),		KS_Mode_switch,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_ae,
    KC(0x57),		KS_oslash,
    KC(0x58),		KS_onehalf,	KS_section,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7c),		KS_less,	KS_greater,	KS_backslash,
};

/* 024 Danish type 5 keyboard */
const keysym_t sunkbd5_keydesc_dk[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_currency,	KS_dollar,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,	KS_asciicircum,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_plus,	KS_question,
    KC(0x29),		KS_dead_acute,	KS_dead_grave,	KS_bar,
    KC(0x2a),		KS_onehalf,	KS_asterisk,	KS_grave,
    KC(0x40),		KS_aring,
    KC(0x41),		KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(0x56),		KS_ae,
    KC(0x57),		KS_oslash,
    KC(0x58),		KS_backslash,	KS_asterisk,	KS_grave,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7c),		KS_less,	KS_greater,	KS_backslash,
};

/* 005 German type 4 keyboard */
const keysym_t sunkbd_keydesc_de[] = {
    KC(0x0d),		KS_Alt_L,
    KC(0x0f),		KS_bracketright,KS_braceright,	KS_guillemotright,
    KC(0x13),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(0x20),		KS_3,		KS_section,	KS_threesuperior,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,	KS_degree,
    KC(0x25),		KS_8,		KS_parenleft,	KS_grave,
    KC(0x26),		KS_9,		KS_parenright,	KS_apostrophe,
    KC(0x27),		KS_0,		KS_equal,	KS_bar,
    KC(0x28),		KS_ssharp,	KS_question,	KS_backslash,
    KC(0x29),		KS_dead_acute,	KS_dead_grave,
    KC(0x2a),		KS_numbersign,	KS_asciicircum,	KS_at,
    KC(0x3b),		KS_z,
    KC(0x40),		KS_udiaeresis,
    KC(0x41),		KS_plus,	KS_multiply,	KS_asciitilde,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_odiaeresis,
    KC(0x57),		KS_adiaeresis,
    KC(0x58),		KS_bracketleft,	KS_braceleft,	KS_guillemotleft,
    KC(0x64),		KS_y,
    KC(0x6a),		KS_m,		KS_M,		KS_mu,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7c),		KS_less,	KS_greater,
};

/* 025 German type 5 keyboard */
const keysym_t sunkbd5_keydesc_de[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(0x20),		KS_3,		KS_section,	KS_threesuperior,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_ssharp,	KS_question,	KS_backslash,
    KC(0x29),		KS_dead_acute,	KS_dead_grave,
    KC(0x2a),		KS_asciicircum,	KS_degree,
    KC(0x36),		KS_q,		KS_Q,		KS_at,
    KC(0x3b),		KS_z,
    KC(0x40),		KS_udiaeresis,
    KC(0x41),		KS_plus,	KS_multiply,	KS_asciitilde,
    KC(0x56),		KS_odiaeresis,
    KC(0x57),		KS_adiaeresis,
    KC(0x58),		KS_numbersign,	KS_apostrophe,	KS_grave,
    KC(0x64),		KS_y,
    KC(0x6a),		KS_m,		KS_M,		KS_mu,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7c),		KS_less,	KS_greater,	KS_bar,
};

/* 006 Italian type 4 keyboard */
const keysym_t sunkbd_keydesc_it[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x0f),		KS_bracketright,KS_braceright,	KS_guillemotright,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(0x20),		KS_3,		KS_sterling,	KS_threesuperior,
    KC(0x23),		KS_6,		KS_ampersand,	KS_notsign,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_backslash,
    KC(0x27),		KS_0,		KS_equal,	KS_bar,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_igrave,	KS_asciicircum,
    KC(0x2a),		KS_ugrave,	KS_section,
    KC(0x40),		KS_egrave,	KS_eacute,
    KC(0x41),		KS_plus,	KS_asterisk,	KS_asciitilde,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_ograve,	KS_ccedilla,	KS_at,
    KC(0x57),		KS_agrave,	KS_degree,	KS_numbersign,
    KC(0x58),		KS_bracketleft,	KS_braceleft,	KS_guillemotleft,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7c),		KS_less,	KS_greater,
};

/* 026 Italian type 5 keyboard */
const keysym_t sunkbd5_keydesc_it[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,
    KC(0x20),		KS_3,		KS_sterling,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,	KS_braceleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_braceright,
    KC(0x27),		KS_0,		KS_equal,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_igrave,	KS_asciicircum,
    KC(0x2a),		KS_backslash,	KS_bar,
    KC(0x40),		KS_egrave,	KS_eacute,	KS_bracketleft,
    KC(0x41),		KS_plus,	KS_asterisk,	KS_bracketright,
    KC(0x56),		KS_ograve,	KS_ccedilla,	KS_at,
    KC(0x57),		KS_agrave,	KS_degree,	KS_numbersign,
    KC(0x58),		KS_ugrave,	KS_section,	KS_asciitilde,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7c),		KS_less,	KS_greater,
};

/* 007 Dutch type 4 keyboard */
const keysym_t sunkbd_keydesc_nl[] = {
    KC(0x0d),		KS_Caps_Lock,
    KC(0x0f),		KS_backslash,	KS_bar,
    KC(0x1e),		KS_1,		KS_exclam,	KS_onesuperior,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(0x20),		KS_3,		KS_numbersign,	KS_threesuperior,
    KC(0x21),		KS_4,		KS_dollar,	KS_onequarter,
    KC(0x22),		KS_5,		KS_percent,	KS_onehalf,
    KC(0x23),		KS_6,		KS_ampersand,	KS_threequarters,
    KC(0x24),		KS_7,		KS_underscore,	KS_sterling,
    KC(0x25),		KS_8,		KS_parenleft,	KS_braceleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_braceright,
    KC(0x27),		KS_0,		KS_apostrophe,	KS_grave,
    KC(0x28),		KS_slash,	KS_question,
    KC(0x29),		KS_degree,	KS_dead_tilde,	KS_dead_abovering,
    KC(0x2a),		KS_less,	KS_greater,
    KC(0x40),		KS_dead_diaeresis,KS_dead_circumflex,
    KC(0x41),		KS_asterisk,	KS_brokenbar,	KS_asciitilde,
    KC(0x4e),		KS_s,		KS_S,		KS_ssharp,
    KC(0x56),		KS_plus,	KS_plusminus,
    KC(0x57),		KS_dead_acute,	KS_dead_grave,
    KC(0x58),		KS_at,		KS_section,	KS_notsign,
    KC(0x64),		KS_z,		KS_Z,		KS_guillemotleft,
    KC(0x65),		KS_x,		KS_X,		KS_guillemotright,
    KC(0x66),		KS_c,		KS_C,		KS_cent,
    KC(0x6a),		KS_m,		KS_M,		KS_mu,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_equal,
    KC(0x77),		KS_Mode_switch,
    KC(0x7d),		KS_bracketright,KS_bracketleft,
};

/* 027 Dutch type 5 keyboard */
const keysym_t sunkbd5_keydesc_nl[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1e),		KS_1,		KS_exclam,	KS_onesuperior,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(0x20),		KS_3,		KS_numbersign,	KS_threesuperior,
    KC(0x21),		KS_4,		KS_dollar,	KS_onequarter,
    KC(0x22),		KS_5,		KS_percent,	KS_onehalf,
    KC(0x23),		KS_6,		KS_ampersand,	KS_threequarters,
    KC(0x24),		KS_7,		KS_underscore,	KS_sterling,
    KC(0x25),		KS_8,		KS_parenleft,	KS_braceleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_braceright,
    KC(0x27),		KS_0,		KS_apostrophe,	KS_grave,
    KC(0x28),		KS_slash,	KS_question,	KS_backslash,
    KC(0x29),		KS_degree,	KS_dead_tilde,	KS_dead_abovering,
    KC(0x2a),		KS_at,		KS_section,	KS_notsign,
    KC(0x40),		KS_dead_diaeresis,KS_dead_circumflex,
    KC(0x41),		KS_asterisk,	KS_bar,		KS_asciitilde,
    KC(0x4e),		KS_s,		KS_S,		KS_ssharp,
    KC(0x56),		KS_plus,	KS_plusminus,
    KC(0x57),		KS_dead_acute,	KS_dead_grave,
    KC(0x58),		KS_less,	KS_greater,	KS_asciicircum,
    KC(0x64),		KS_z,		KS_Z,		KS_guillemotleft,
    KC(0x65),		KS_x,		KS_X,		KS_guillemotright,
    KC(0x66),		KS_c,		KS_C,		KS_cent,
    KC(0x6a),		KS_m,		KS_M,		KS_mu,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,	KS_hyphen,
    KC(0x6d),		KS_minus,	KS_equal,
    KC(0x7d),		KS_bracketright,KS_bracketleft,	KS_brokenbar,
};

/* 008 Norwegian type 4 keyboard */
const keysym_t sunkbd_keydesc_no[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x0f),		KS_asciitilde,	KS_asciicircum,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_currency,	KS_dollar,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_plus,	KS_question,
    KC(0x29),		KS_backslash,	KS_dead_grave,	KS_dead_acute,
    KC(0x2a),		KS_apostrophe,	KS_asterisk,	KS_grave,
    KC(0x40),		KS_aring,
    KC(0x41),		KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_oslash,
    KC(0x57),		KS_ae,
    KC(0x58),		KS_bar,		KS_section,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7d),		KS_less,	KS_greater,
};

/* 028 Norwegian type 5 keyboard */
const keysym_t sunkbd5_keydesc_no[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_currency,	KS_dollar,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,	KS_asciicircum,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_plus,	KS_question,
    KC(0x29),		KS_backslash,	KS_dead_grave,	KS_dead_acute,
    KC(0x2a),		KS_bar,		KS_section,
    KC(0x40),		KS_aring,
    KC(0x41),		KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(0x56),		KS_oslash,
    KC(0x57),		KS_ae,
    KC(0x58),		KS_apostrophe,	KS_asterisk,	KS_grave,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7d),		KS_less,	KS_greater,
};

/* 009 Portuguese type 4 keyboard */
const keysym_t sunkbd_keydesc_pt[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x0f),		KS_bracketright,KS_braceright,	KS_guillemotright,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_dollar,	KS_section,
    KC(0x23),		KS_6,		KS_ampersand,	KS_notsign,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_backslash,
    KC(0x27),		KS_0,		KS_equal,	KS_bar,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_exclamdown,	KS_questiondown,
    KC(0x2a),		KS_dead_tilde,	KS_dead_circumflex,KS_asciicircum,
    KC(0x40),		KS_dead_diaeresis,KS_asterisk,	KS_plus,
    KC(0x41),		KS_dead_acute,	KS_dead_grave,	KS_asciitilde,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_ccedilla,
    KC(0x57),		KS_masculine,	KS_ordfeminine,
    KC(0x58),		KS_bracketleft,	KS_braceleft,	KS_guillemotleft,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7d),		KS_less,	KS_greater,
};

/* 029 Portuguese type 4 keyboard */
const keysym_t sunkbd5_keydesc_pt[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_dollar,	KS_section,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,	KS_asciicircum,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_guillemotleft,KS_guillemotright,
    KC(0x2a),		KS_backslash,	KS_bar,
    KC(0x40),		KS_plus,	KS_asterisk,	KS_dead_diaeresis,
    KC(0x41),		KS_dead_acute,	KS_dead_grave,
    KC(0x56),		KS_ccedilla,
    KC(0x57),		KS_masculine,	KS_ordfeminine,
    KC(0x58),		KS_dead_tilde,	KS_dead_circumflex,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7d),		KS_less,	KS_greater,
};

/* 00a Spanish type 4 keyboard */
const keysym_t sunkbd_keydesc_es[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x0f),		KS_bracketright,KS_braceright,	KS_guillemotright,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_hyphen,	KS_numbersign,
    KC(0x22),		KS_5,		KS_percent,	KS_degree,
    KC(0x23),		KS_6,		KS_ampersand,	KS_notsign,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_backslash,
    KC(0x27),		KS_0,		KS_equal,	KS_bar,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_exclamdown,	KS_questiondown,
    KC(0x2a),		KS_ccedilla,
    KC(0x3e),		KS_o,		KS_O,		KS_masculine,
    KC(0x40),		KS_dead_grave,	KS_dead_circumflex,KS_asciicircum,
    KC(0x41),		KS_plus,	KS_asterisk,	KS_asciitilde,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x4d),		KS_a,		KS_A,		KS_ordfeminine,
    KC(0x56),		KS_ntilde,
    KC(0x57),		KS_dead_acute,	KS_dead_diaeresis,
    KC(0x58),		KS_bracketleft,	KS_braceleft,	KS_guillemotleft,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7d),		KS_less,	KS_greater,
};

/* 02a Spanish type 5 keyboard */
const keysym_t sunkbd5_keydesc_es[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1e),		KS_1,		KS_exclam,	KS_bar,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_hyphen,	KS_numbersign,
    KC(0x21),		KS_4,		KS_dollar,	KS_asciicircum,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,	KS_notsign,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,
    KC(0x27),		KS_0,		KS_equal,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_exclamdown,	KS_questiondown,
    KC(0x2a),		KS_masculine,	KS_ordfeminine,	KS_backslash,
    KC(0x40),		KS_dead_grave,	KS_dead_circumflex,KS_bracketleft,
    KC(0x41),		KS_plus,	KS_asterisk,	KS_bracketright,
    KC(0x56),		KS_ntilde,
    KC(0x57),		KS_dead_acute,	KS_dead_diaeresis,KS_braceleft,
    KC(0x58),		KS_ccedilla,	KS_Ccedilla,	KS_braceright,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7d),		KS_less,	KS_greater,
};

/* 00b Swedish/Finnish type 4 keyboard */
const keysym_t sunkbd_keydesc_sv[] = {
    KC(0x0d),		KS_Multi_key,
    KC(0x0f),		KS_asciitilde,	KS_asciicircum, 
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_currency,	KS_dollar,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_plus,	KS_question,	KS_backslash,
    KC(0x29),		KS_dead_acute,	KS_dead_grave,
    KC(0x2a),		KS_apostrophe,	KS_asterisk,	KS_grave,
    KC(0x40),		KS_aring,
    KC(0x41),		KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(0x43),		KS_Mode_switch,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_odiaeresis,
    KC(0x57),		KS_adiaeresis,
    KC(0x58),		KS_section,	KS_onehalf,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7c),		KS_less,	KS_greater,	KS_bar,
};

const keysym_t sunkbd_keydesc_sv_nodead[] = {
    KC(0x29),		KS_apostrophe,	KS_grave,
    KC(0x41),		KS_diaeresis,	KS_asciicircum,	KS_asciitilde,
};

/* 02b Swedish type 5 keyboard */
const keysym_t sunkbd5_keydesc_sv[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x0f),		KS_asciitilde,	KS_asciicircum, 
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_currency,	KS_dollar,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_plus,	KS_question,	KS_backslash,
    KC(0x29),		KS_dead_acute,	KS_dead_grave,
    KC(0x2a),		KS_section,	KS_onehalf,
    KC(0x40),		KS_aring,
    KC(0x41),		KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(0x43),		KS_Multi_key,
    KC(0x4c),		KS_Control_L,
    KC(0x56),		KS_odiaeresis,
    KC(0x57),		KS_adiaeresis,
    KC(0x58),		KS_apostrophe,	KS_asterisk,	KS_grave,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Caps_Lock,
    KC(0x7c),		KS_less,	KS_greater,	KS_bar,
};

/* 00c Swiss-French type 4 keyboard */
const keysym_t sunkbd_keydesc_sf[] = {
    KC(0x0d),		KS_Multi_key,
    KC(0x0f),		KS_greater,	KS_braceright,
    KC(0x1e),		KS_1,		KS_plus,	KS_exclam,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_asterisk,	KS_numbersign,
    KC(0x21),		KS_4,		KS_ccedilla,	KS_cent,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,	KS_section,
    KC(0x24),		KS_7,		KS_slash,	KS_bar,
    KC(0x25),		KS_8,		KS_parenleft,	KS_degree,
    KC(0x26),		KS_9,		KS_parenright,	KS_backslash,
    KC(0x27),		KS_0,		KS_equal,	KS_asciicircum,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_dead_circumflex,KS_dead_grave,
    KC(0x2a),		KS_dollar,	KS_dead_tilde,	KS_sterling,
    KC(0x3b),		KS_z,
    KC(0x40),		KS_egrave,	KS_udiaeresis,
    KC(0x41),		KS_dead_diaeresis,KS_dead_acute,
    KC(0x43),		KS_Mode_switch,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_eacute,	KS_odiaeresis,
    KC(0x57),		KS_agrave,	KS_adiaeresis,
    KC(0x58),		KS_less,	KS_braceleft,
    KC(0x64),		KS_y,
    KC(0x6a),		KS_m,		KS_M,		KS_mu,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7c),		KS_bracketright,KS_bracketleft,	KS_backslash,
};
d56 21
a76 294
/* 02c Swiss-French type 5 keyboard */
const keysym_t sunkbd5_keydesc_sf[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1e),		KS_1,		KS_plus,	KS_bar,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_asterisk,	KS_numbersign,
    KC(0x21),		KS_4,		KS_ccedilla,	KS_asciicircum,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,
    KC(0x27),		KS_0,		KS_equal,	KS_grave,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_dead_acute,
    KC(0x29),		KS_dead_circumflex,KS_dead_grave,KS_dead_tilde,
    KC(0x2a),		KS_dollar,	KS_degree,
    KC(0x3b),		KS_z,
    KC(0x40),		KS_egrave,	KS_udiaeresis,	KS_bracketleft,
    KC(0x41),		KS_dead_diaeresis,KS_exclam,	KS_bracketright,
    KC(0x56),		KS_eacute,	KS_odiaeresis,
    KC(0x57),		KS_agrave,	KS_adiaeresis,	KS_braceleft,
    KC(0x58),		KS_dollar,	KS_sterling,	KS_braceright,
    KC(0x64),		KS_y,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7c),		KS_less,	KS_greater,	KS_backslash,
};

/* 00d Swiss-German type 4 keyboard */
const keysym_t sunkbd_keydesc_sg[] = {
    KC(0x0d),		KS_Multi_key,
    KC(0x0f),		KS_greater,	KS_braceright,
    KC(0x1e),		KS_1,		KS_plus,	KS_exclam,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_asterisk,	KS_numbersign,
    KC(0x21),		KS_4,		KS_ccedilla,	KS_cent,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,	KS_section,
    KC(0x24),		KS_7,		KS_slash,	KS_bar,
    KC(0x25),		KS_8,		KS_parenleft,	KS_degree,
    KC(0x26),		KS_9,		KS_parenright,	KS_backslash,
    KC(0x27),		KS_0,		KS_equal,	KS_asciicircum,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_dead_circumflex,KS_dead_grave,
    KC(0x2a),		KS_dollar,	KS_dead_tilde,	KS_sterling,
    KC(0x3b),		KS_z,
    KC(0x40),		KS_udiaeresis,	KS_egrave,
    KC(0x41),		KS_dead_diaeresis,KS_dead_acute,
    KC(0x43),		KS_Mode_switch,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_odiaeresis,	KS_eacute,
    KC(0x57),		KS_adiaeresis,	KS_agrave,
    KC(0x58),		KS_less,	KS_braceleft,
    KC(0x64),		KS_y,
    KC(0x6a),		KS_m,		KS_M,		KS_mu,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7c),		KS_bracketright,KS_bracketleft,	KS_backslash,
};

/* 02d Swiss-German type 5 keyboard */
const keysym_t sunkbd5_keydesc_sg[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1e),		KS_1,		KS_plus,	KS_bar,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_asterisk,	KS_numbersign,
    KC(0x21),		KS_4,		KS_ccedilla,	KS_asciicircum,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,
    KC(0x27),		KS_0,		KS_equal,	KS_grave,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_dead_acute,
    KC(0x29),		KS_dead_circumflex,KS_dead_grave,KS_dead_tilde,
    KC(0x2a),		KS_dollar,	KS_degree,
    KC(0x3b),		KS_z,
    KC(0x40),		KS_udiaeresis,	KS_egrave,	KS_bracketleft,
    KC(0x41),		KS_dead_diaeresis,KS_exclam,	KS_bracketright,
    KC(0x56),		KS_odiaeresis,	KS_eacute,
    KC(0x57),		KS_adiaeresis,	KS_agrave,	KS_braceleft,
    KC(0x58),		KS_dollar,	KS_sterling,	KS_braceright,
    KC(0x64),		KS_y,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7c),		KS_less,	KS_greater,	KS_backslash,
};

/* 00e UK English type 4 keyboard */
const keysym_t sunkbd_keydesc_uk[] = {
    KC(0x1e),		KS_1,		KS_exclam,	KS_bar,
    KC(0x21),		KS_3,		KS_sterling,	KS_numbersign,
    KC(0x28),		KS_minus,	KS_underscore,	KS_notsign,
    KC(0x43),		KS_Mode_switch,
};

/* 02e UK English type 5 keyboard */
const keysym_t sunkbd5_keydesc_uk[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,
    KC(0x20),		KS_3,		KS_sterling,
    KC(0x2a),		KS_grave,	KS_notsign,	KS_brokenbar,
    KC(0x57),		KS_apostrophe,	KS_at,
    KC(0x58),		KS_numbersign,	KS_asciitilde,
    KC(0x7c),		KS_backslash,	KS_bar,
};

/* 031 Japan type 5 keyboard */
const keysym_t sunkbd5_keydesc_jp[] = {
    KC(0x1f),		KS_2,		KS_quotedbl,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_apostrophe,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,
    KC(0x27),		KS_0,
    KC(0x28),		KS_minus,	KS_equal,
    KC(0x29),		KS_asciicircum,	KS_asciitilde,
    KC(0x2a),		KS_yen,		KS_bar,
    KC(0x40),		KS_at,		KS_grave,
    KC(0x41),		KS_bracketleft,	KS_braceleft,
    KC(0x56),		KS_semicolon,	KS_plus,
    KC(0x57),		KS_colon,	KS_asterisk,
    KC(0x58),		KS_bracketright,KS_braceright,
    KC(0x7c),		KS_backslash,	KS_underscore,
};

#define KBD_MAP(name, base, map) \
    { name, base, sizeof(map)/sizeof(keysym_t), map }

/* Supported type 4 keyboard layouts */
const struct wscons_keydesc sunkbd_keydesctab[] = {
	KBD_MAP(KB_US,			0,	sunkbd_keydesc_us),
	KBD_MAP(KB_BE,			KB_US,	sunkbd_keydesc_befr),
	KBD_MAP(KB_DE,			KB_US,	sunkbd_keydesc_de),
	KBD_MAP(KB_DK,			KB_US,	sunkbd_keydesc_dk),
	KBD_MAP(KB_ES,			KB_US,	sunkbd_keydesc_es),
	KBD_MAP(KB_FR,			KB_US,	sunkbd_keydesc_befr),
	KBD_MAP(KB_IT,			KB_US,	sunkbd_keydesc_it),
	KBD_MAP(KB_NL,			KB_US,	sunkbd_keydesc_nl),
	KBD_MAP(KB_NO,			KB_US,	sunkbd_keydesc_no),
	KBD_MAP(KB_PT,			KB_US,	sunkbd_keydesc_pt),
	KBD_MAP(KB_SF,			KB_US,	sunkbd_keydesc_sf),
	KBD_MAP(KB_SG,			KB_US,	sunkbd_keydesc_sg),
	KBD_MAP(KB_SV,			KB_US,	sunkbd_keydesc_sv),
	KBD_MAP(KB_SV | KB_NODEAD,	KB_SV,	sunkbd_keydesc_sv_nodead),
	KBD_MAP(KB_UK,			KB_US,	sunkbd_keydesc_uk),
	{0, 0, 0, 0},
};

/* Supported type 5 keyboard layouts */
const struct wscons_keydesc sunkbd5_keydesctab[] = {
	KBD_MAP(KB_US,			0,	sunkbd_keydesc_us),
	KBD_MAP(KB_DE,			KB_US,	sunkbd5_keydesc_de),
	KBD_MAP(KB_DK,			KB_US,	sunkbd5_keydesc_dk),
	KBD_MAP(KB_ES,			KB_US,	sunkbd5_keydesc_es),
	KBD_MAP(KB_FR,			KB_US,	sunkbd5_keydesc_fr),
	KBD_MAP(KB_IT,			KB_US,	sunkbd5_keydesc_it),
	KBD_MAP(KB_JP,			KB_US,	sunkbd5_keydesc_jp),
	KBD_MAP(KB_NL,			KB_US,	sunkbd5_keydesc_nl),
	KBD_MAP(KB_NO,			KB_US,	sunkbd5_keydesc_no),
	KBD_MAP(KB_PT,			KB_US,	sunkbd5_keydesc_pt),
	KBD_MAP(KB_SF,			KB_US,	sunkbd5_keydesc_sf),
	KBD_MAP(KB_SG,			KB_US,	sunkbd5_keydesc_sg),
	KBD_MAP(KB_SV,			KB_US,	sunkbd5_keydesc_sv),
	KBD_MAP(KB_SV | KB_NODEAD,	KB_SV,	sunkbd_keydesc_sv_nodead),
	KBD_MAP(KB_UK,			KB_US,	sunkbd5_keydesc_uk),
	{0, 0, 0, 0},
};

/*
 * Keyboard layout to ID table
 * References:
 *	Sun Type 5 Keyboard Supplement Installation Guide, May 1992
 *	http://docs.sun.com/db/doc/806-6642/6jfipqu57?a=view
 *	http://jp.sunsolve.sun.com/handbook_pub/Systems/SSVygr/INPUT_Compact1_Keyboard.html
 */
const int sunkbd_layouts[MAXSUNLAYOUT] = {
	/* Type 4 layouts */
	KB_US,	/* 000 USA */
	KB_US,	/* 001 same as 000 */
	KB_BE,	/* 002 Belgium/French */
	-1,	/* 003 Canada */
	KB_DK,	/* 004 Denmark */
	KB_DE,	/* 005 Germany */
	KB_IT,	/* 006 Italy */
	KB_NL,	/* 007 The Netherlands */
	KB_NO,	/* 008 Norway */
	KB_PT,	/* 009 Portugal */
	KB_ES,	/* 00a Latin America/Spanish */
	KB_SV,	/* 00b Sweden */
	KB_SF,	/* 00c Switzerland/French */
	KB_SG,	/* 00d Switzerland/German */
	KB_UK,	/* 00e Great Britain */
	-1,	/* 00f unaffected */
	-1,	/* 010 Korea */
	-1,	/* 011 Taiwan */
	-1,	/* 012 unaffected */
	-1,	/* 013 unaffected */
	-1,	/* 014 VT220 */
	-1,	/* 015 VT220 Switzerland/French */
	-1,	/* 016 VT220 Switzerland/German */
	-1,	/* 017 VT220 Switzerland/Italian */
	-1,	/* 018 unaffected */
	-1,	/* 019 Belgium */
	-1,	/* 01a unaffected */
	-1,	/* 01b unaffected */
	-1,	/* 01c unaffected */
	-1,	/* 01d unaffected */
	-1,	/* 01e unaffected */
	-1,	/* 01f unaffected */
	-1,	/* 020 Japan */

	/* Type 5 layouts */
	KB_US,	/* 021 USA */
	KB_US,	/* 022 UNIX */
	KB_FR,	/* 023 France */
	KB_DK,	/* 024 Denmark */
	KB_DE,	/* 025 Germany */
	KB_IT,	/* 026 Italy */
	KB_NL,	/* 027 The Netherlands */
	KB_NO,	/* 028 Norway */
	KB_PT,	/* 029 Portugal */
	KB_ES,	/* 02a Spain */
	KB_SV,	/* 02b Sweden */
	KB_SF,	/* 02c Switzerland/French */
	KB_SG,	/* 02d Switzerland/German */
	KB_UK,	/* 02e Great Britain */
	-1,	/* 02f Korea */
	-1,	/* 030 Taiwan */
	KB_JP,	/* 031 Japan */
	-1,	/* 032 Canada/French */
	-1,	/* 033 Hungary */
	-1,	/* 034 Poland */
	-1,	/* 035 Czech */
	-1,	/* 036 Russia */
	-1,	/* 037 Latvia */
	-1,	/* 038 Turkey-Q5 */
	-1,	/* 039 Greece */
	-1,	/* 03a Arabic */
	-1,	/* 03b Lithuania */
	-1,	/* 03c Belgium */
	-1,	/* 03d unaffected */
	-1,	/* 03e Turkey-F5 */
	-1,	/* 03f Canada/French */

	/* Not affected range */
	-1,	/* 040 */
	-1,	/* 041 */
	-1,	/* 042 */
	-1,	/* 043 */
	-1,	/* 044 */
	-1,	/* 045 */
	-1,	/* 046 */
	-1,	/* 047 */
	-1,	/* 048 */
	-1,	/* 049 */
	-1,	/* 04a */
	-1,	/* 04b */
	-1,	/* 04c */
	-1,	/* 04d */
	-1,	/* 04e */
	-1,	/* 04f */

	/* ``Compact-1'' layouts */
	KB_US,	/* 050 USA */
	KB_US,	/* 051 UNIX */
	KB_FR,	/* 052 France */
	KB_DK,	/* 053 Denmark */
	KB_DE,	/* 054 Germany */
	KB_IT,	/* 055 Italy */
	KB_NL,	/* 056 The Netherlands */
	KB_NO,	/* 057 Norway */
	KB_PT,	/* 058 Portugal */
	KB_ES,	/* 059 Spain */
	KB_SV,	/* 05a Sweden */
	KB_SF,	/* 05b Switzerland/French */
	KB_SG,	/* 05c Switzerland/German */
	KB_UK,	/* 05d Great Britain */
	-1,	/* 05e Korea */
	-1,	/* 05f Taiwan */
	KB_JP,	/* 060 Japan */
	-1,	/* 061 Canada/French */
};

struct wskbd_mapdata sunkbd_keymapdata = {
	sunkbd_keydesctab,
#ifdef SUNKBD_LAYOUT
	SUNKBD_LAYOUT,
#else
	KB_US,
a77 1
};
d79 159
a237 8
struct wskbd_mapdata sunkbd5_keymapdata = {
	sunkbd5_keydesctab,
#ifdef SUNKBD5_LAYOUT
	SUNKBD5_LAYOUT,
#else
	KB_US,
#endif
};
@


1.18
log
@remove clause 3 & 4 jointly held by miod and me.
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.17 2003/05/17 02:31:56 miod Exp $	*/
d181 1
a181 1
    KC(0x23),		KS_paragraph,	KS_6,
d234 1
a234 1
    KC(0x6d),		KS_exclam,	KS_paragraph,
d259 1
a259 1
    KC(0x58),		KS_onehalf,	KS_paragraph,
d299 1
a299 1
    KC(0x20),		KS_3,		KS_paragraph,	KS_threesuperior,
d328 1
a328 1
    KC(0x20),		KS_3,		KS_paragraph,	KS_threesuperior,
d365 1
a365 1
    KC(0x2a),		KS_ugrave,	KS_paragraph,
d396 1
a396 1
    KC(0x58),		KS_ugrave,	KS_paragraph,	KS_asciitilde,
d425 1
a425 1
    KC(0x58),		KS_at,		KS_paragraph,	KS_notsign,
d452 1
a452 1
    KC(0x2a),		KS_at,		KS_paragraph,	KS_notsign,
d489 1
a489 1
    KC(0x58),		KS_bar,		KS_paragraph,
d511 1
a511 1
    KC(0x2a),		KS_bar,		KS_paragraph,
d529 1
a529 1
    KC(0x21),		KS_4,		KS_dollar,	KS_paragraph,
d556 1
a556 1
    KC(0x21),		KS_4,		KS_dollar,	KS_paragraph,
d655 1
a655 1
    KC(0x58),		KS_paragraph,	KS_onehalf,
d682 1
a682 1
    KC(0x2a),		KS_paragraph,	KS_onehalf,
d706 1
a706 1
    KC(0x23),		KS_6,		KS_ampersand,	KS_paragraph,
d769 1
a769 1
    KC(0x23),		KS_6,		KS_ampersand,	KS_paragraph,
@


1.17
log
@Gremlin slipped in in the encoding table, affected mostly Compact-2 keyboards.
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.16 2003/03/17 23:26:29 matthieu Exp $	*/
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.16
log
@Fix UK keyboard layout (2 & 3 shifted from one position).
Reported by scott at porticia dot com.
Ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.15 2003/01/28 21:17:07 miod Exp $	*/
d978 1
a978 1
	-1	/* 03a Arabic */
@


1.15
log
@Japanese type 5 layout; from a picture of the actual layout on sunsolve,
checked against prom behaviour with a jumpered type 5.
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.14 2003/01/22 19:02:31 miod Exp $	*/
d839 2
a840 2
    KC(0x20),		KS_2,		KS_quotedbl,
    KC(0x21),		KS_3,		KS_sterling,
@


1.14
log
@Recognize the Voyager ``Compact-1'' keyboard layouts.
Currently, they are mapped to the corresponding type 5 layouts, but some
tweaks might be necessary in the future.
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.13 2003/01/01 17:51:36 miod Exp $	*/
d847 19
d897 1
d969 1
a969 1
	-1,	/* 031 Japan */
d1020 1
a1020 1
	-1,	/* 060 Japan */
@


1.13
log
@Invalid key in french type 5 keyboard layout; reported by Olivier Cherrier,
thanks.
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.12 2002/11/29 01:00:51 miod Exp $	*/
d4 1
d891 4
a894 2
 * References: Sun Type 5 Keyboard Supplement Installation Guide, May 1992
 *        and  http://docs.sun.com/db/doc/806-6642/6jfipqu57?a=view
d964 38
@


1.12
log
@Upon detection of an international Sun keyboard with a recognized layout,
attach it with the appropriate keymap table, rather than the default KB_US
table.

If this is not the expected behaviour, users can still revert to US layout
via "kbd us" or "wsconsctl -w keyboard.encoding=us".

As the installation media uses the prom console, which will honor the
international keyboard layout, this will definitely help users with
international keyboards and fancy characters in their passwords...

Note that there is still some Sun keyboard tables missing at the moment.
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.11 2002/11/23 23:49:13 miod Exp $	*/
d220 1
a220 1
    KC(0x25),		KS_exclam,	KS_8,		KS_backslash,
@


1.11
log
@Add the remaining layouts (due to popular demand): spanish, italian, dutch,
norwegian, portuguese, swiss-french, swiss-german, uk english.
Not thoroughly tested, problems (if any) should be minor.

Also fix glitch in caret handling in the previous commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.9 2002/09/08 23:22:00 miod Exp $	*/
d886 75
@


1.10
log
@wskbd layouts for Sun Danish, French and German keyboards.
More to come as time permits...
@
text
@d190 1
a190 1
    KC(0x28),		KS_parenright,	KS_asciicircum,	KS_asciitilde,
d221 1
a221 1
    KC(0x26),		KS_ccedilla,	KS_9,		KS_dead_circumflex,
d223 1
a223 1
    KC(0x28),		KS_parenright,	KS_asciicircum,	KS_bracketright,
d245 1
a245 1
    KC(0x0f),		KS_asciitilde,	KS_dead_circumflex, 
d273 1
d278 1
a278 1
    KC(0x23),		KS_6,		KS_ampersand,	KS_dead_circumflex,
d305 1
a305 1
    KC(0x24),		KS_7,		KS_slash,	KS_asciicircum,
d311 1
a311 1
    KC(0x2a),		KS_numbersign,	KS_dead_circumflex,KS_at,
d328 1
a328 1
/* 025 German type 4 keyboard */
d330 1
d340 1
a340 1
    KC(0x2a),		KS_dead_circumflex,KS_asciicircum,
d356 283
a638 1
/* 00c Swedish/Finnish type 4 keyboard */
d701 145
d855 1
d857 6
d865 1
d874 1
d876 6
d884 1
@


1.9
log
@Correctly handle keypad '.'/Delete key on sun keyboards.
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.8 2002/08/29 22:18:40 miod Exp $	*/
d53 2
d176 179
d388 1
a389 1

d420 1
d423 4
d432 1
d435 3
@


1.8
log
@Define new wscons symbols for the L function keys found on Sun keyboards,
and let the sun layout tables produce them.
ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.7 2002/08/26 20:42:38 mickey Exp $	*/
d101 1
a101 1
    KC(0x32),				KS_KP_Delete,
@


1.7
log
@map backspace to delete, not backspace key symbol which are defined the same at the moment; jason ok@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.6 2002/08/05 21:23:40 jason Exp $	*/
d56 1
d77 2
d100 1
d102 1
d123 2
d147 1
@


1.6
log
@move HoldScreen to R3 where it belongs (not L3)
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.5 2002/05/29 20:43:43 maja Exp $	*/
d92 1
a92 1
    KC(0x2b),				KS_BackSpace,
@


1.5
log
@Add a new wskbd type for Sun type 5 keyboards (WSKBD_TYPE_SUN5).
This is needed since eg Swedish type 4 and 5 keyboard has keycodes
with different keycodes. eg AltGr and Compose are switched in type 5
compared with type 4.

This change will need a new Xserver to allow sun type 5 keyboards.
-moj  ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.4 2002/04/08 17:49:42 jason Exp $	*/
d74 1
a75 1
    KC(0x19),				KS_Hold_Screen,
@


1.4
log
@Credit DARPA/USAF appropriately.
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.3 2002/02/25 20:23:33 maja Exp $	*/
d199 29
d238 7
d249 9
@


1.3
log
@Opps. One missing _nodead. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.2 2002/02/25 19:51:51 maja Exp $	*/
d32 5
d38 1
@


1.3.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a3 1
 * Copyright (c) 2002, 2003 Miodrag Vallat.
a31 5
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
a32 1

a46 2

/* 000/021/022 US English type 4/5 keyboard */
a49 1
    KC(0x03),				KS_Again,
a67 1
    KC(0x17),				KS_Hold_Screen,
d69 1
a69 2
    KC(0x19),				KS_Props,
    KC(0x1a),				KS_Undo,
d86 1
a86 1
    KC(0x2b),				KS_Delete,
d91 1
a91 3
    KC(0x31),				KS_Front,
    KC(0x32),				KS_KP_Delete,	KS_KP_Decimal,
    KC(0x33),				KS_Copy,
a111 2
    KC(0x48),				KS_Open,
    KC(0x49),				KS_Paste,
a133 1
    KC(0x61),				KS_Cut,
a159 463
/* 002 French/Belgian type 4 keyboard */
const keysym_t sunkbd_keydesc_befr[] = {
    KC(0x0d),		KS_Caps_Lock,
    KC(0x0f),		KS_bracketright,KS_braceright,	KS_guillemotright,
    KC(0x1e),		KS_ampersand,	KS_1,
    KC(0x1f),		KS_eacute,	KS_2,		KS_twosuperior,
    KC(0x20),		KS_quotedbl,	KS_3,		KS_threesuperior,
    KC(0x21),		KS_apostrophe,	KS_4,
    KC(0x22),		KS_parenleft,	KS_5,
    KC(0x23),		KS_paragraph,	KS_6,
    KC(0x24),		KS_egrave,	KS_7,
    KC(0x25),		KS_exclam,	KS_8,		KS_sterling,
    KC(0x26),		KS_ccedilla,	KS_9,		KS_backslash,
    KC(0x27),		KS_agrave,	KS_0,
    KC(0x28),		KS_parenright,	KS_degree,	KS_asciitilde,
    KC(0x29),		KS_minus,	KS_underscore,	KS_numbersign,
    KC(0x2a),		KS_asterisk,	KS_bar,		KS_currency,
    KC(0x36),		KS_a,
    KC(0x37),		KS_z,
    KC(0x40),		KS_dead_circumflex,KS_dead_diaeresis,
    KC(0x41),		KS_grave,	KS_dollar,	KS_at,
    KC(0x4d), KS_Cmd_Debugger,	KS_q,
    KC(0x56),		KS_m,		KS_M,		KS_mu,
    KC(0x57),		KS_ugrave,	KS_percent,
    KC(0x58),		KS_bracketleft,	KS_braceleft,	KS_guillemotleft,
    KC(0x64),		KS_w,
    KC(0x6a),		KS_comma,	KS_question,
    KC(0x6b),		KS_semicolon,	KS_period,
    KC(0x6c),		KS_colon,	KS_slash,
    KC(0x6d),		KS_equal,	KS_plus,
    KC(0x77),		KS_Mode_switch,
    KC(0x7c),		KS_less,	KS_greater,
};

/* 023 French type 5 keyboard */
const keysym_t sunkbd5_keydesc_fr[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1e),		KS_ampersand,	KS_1,
    KC(0x1f),		KS_eacute,	KS_2,		KS_asciitilde,
    KC(0x20),		KS_quotedbl,	KS_3,		KS_numbersign,
    KC(0x21),		KS_apostrophe,	KS_4,		KS_braceleft,
    KC(0x22),		KS_parenleft,	KS_5,		KS_bracketleft,
    KC(0x23),		KS_minus,	KS_6,		KS_bar,
    KC(0x24),		KS_egrave,	KS_7,		KS_grave,
    KC(0x25),		KS_underscore,	KS_8,		KS_backslash,
    KC(0x26),		KS_ccedilla,	KS_9,		KS_asciicircum,
    KC(0x27),		KS_agrave,	KS_0,		KS_at,
    KC(0x28),		KS_parenright,	KS_degree,	KS_bracketright,
    KC(0x29),		KS_equal,	KS_plus,	KS_braceright,
    KC(0x2a),		KS_twosuperior,
    KC(0x36),		KS_a,
    KC(0x37),		KS_z,
    KC(0x40),		KS_dead_circumflex,KS_dead_diaeresis,
    KC(0x41),		KS_dollar,	KS_sterling,	KS_currency,
    KC(0x4d), KS_Cmd_Debugger,	KS_q,
    KC(0x56),		KS_m,
    KC(0x57),		KS_ugrave,	KS_percent,
    KC(0x58),		KS_asterisk,	KS_mu,
    KC(0x64),		KS_w,
    KC(0x6a),		KS_comma,	KS_question,
    KC(0x6b),		KS_semicolon,	KS_period,
    KC(0x6c),		KS_colon,	KS_slash,
    KC(0x6d),		KS_exclam,	KS_paragraph,
    KC(0x7c),		KS_less,	KS_greater,
};

/* 004 Danish type 4 keyboard */
const keysym_t sunkbd_keydesc_dk[] = {
    KC(0x0d),		KS_Multi_key,
    KC(0x0f),		KS_asciitilde,	KS_asciicircum, 
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_currency,	KS_dollar,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_plus,	KS_question,
    KC(0x29),		KS_dead_acute,	KS_dead_grave,	KS_bar,
    KC(0x2a),		KS_apostrophe,	KS_asterisk,	KS_grave,
    KC(0x40),		KS_aring,
    KC(0x41),		KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(0x43),		KS_Mode_switch,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_ae,
    KC(0x57),		KS_oslash,
    KC(0x58),		KS_onehalf,	KS_paragraph,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7c),		KS_less,	KS_greater,	KS_backslash,
};

/* 024 Danish type 5 keyboard */
const keysym_t sunkbd5_keydesc_dk[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_currency,	KS_dollar,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,	KS_asciicircum,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_plus,	KS_question,
    KC(0x29),		KS_dead_acute,	KS_dead_grave,	KS_bar,
    KC(0x2a),		KS_onehalf,	KS_asterisk,	KS_grave,
    KC(0x40),		KS_aring,
    KC(0x41),		KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(0x56),		KS_ae,
    KC(0x57),		KS_oslash,
    KC(0x58),		KS_backslash,	KS_asterisk,	KS_grave,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7c),		KS_less,	KS_greater,	KS_backslash,
};

/* 005 German type 4 keyboard */
const keysym_t sunkbd_keydesc_de[] = {
    KC(0x0d),		KS_Alt_L,
    KC(0x0f),		KS_bracketright,KS_braceright,	KS_guillemotright,
    KC(0x13),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(0x20),		KS_3,		KS_paragraph,	KS_threesuperior,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,	KS_degree,
    KC(0x25),		KS_8,		KS_parenleft,	KS_grave,
    KC(0x26),		KS_9,		KS_parenright,	KS_apostrophe,
    KC(0x27),		KS_0,		KS_equal,	KS_bar,
    KC(0x28),		KS_ssharp,	KS_question,	KS_backslash,
    KC(0x29),		KS_dead_acute,	KS_dead_grave,
    KC(0x2a),		KS_numbersign,	KS_asciicircum,	KS_at,
    KC(0x3b),		KS_z,
    KC(0x40),		KS_udiaeresis,
    KC(0x41),		KS_plus,	KS_multiply,	KS_asciitilde,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_odiaeresis,
    KC(0x57),		KS_adiaeresis,
    KC(0x58),		KS_bracketleft,	KS_braceleft,	KS_guillemotleft,
    KC(0x64),		KS_y,
    KC(0x6a),		KS_m,		KS_M,		KS_mu,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7c),		KS_less,	KS_greater,
};

/* 025 German type 5 keyboard */
const keysym_t sunkbd5_keydesc_de[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(0x20),		KS_3,		KS_paragraph,	KS_threesuperior,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_ssharp,	KS_question,	KS_backslash,
    KC(0x29),		KS_dead_acute,	KS_dead_grave,
    KC(0x2a),		KS_asciicircum,	KS_degree,
    KC(0x36),		KS_q,		KS_Q,		KS_at,
    KC(0x3b),		KS_z,
    KC(0x40),		KS_udiaeresis,
    KC(0x41),		KS_plus,	KS_multiply,	KS_asciitilde,
    KC(0x56),		KS_odiaeresis,
    KC(0x57),		KS_adiaeresis,
    KC(0x58),		KS_numbersign,	KS_apostrophe,	KS_grave,
    KC(0x64),		KS_y,
    KC(0x6a),		KS_m,		KS_M,		KS_mu,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7c),		KS_less,	KS_greater,	KS_bar,
};

/* 006 Italian type 4 keyboard */
const keysym_t sunkbd_keydesc_it[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x0f),		KS_bracketright,KS_braceright,	KS_guillemotright,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(0x20),		KS_3,		KS_sterling,	KS_threesuperior,
    KC(0x23),		KS_6,		KS_ampersand,	KS_notsign,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_backslash,
    KC(0x27),		KS_0,		KS_equal,	KS_bar,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_igrave,	KS_asciicircum,
    KC(0x2a),		KS_ugrave,	KS_paragraph,
    KC(0x40),		KS_egrave,	KS_eacute,
    KC(0x41),		KS_plus,	KS_asterisk,	KS_asciitilde,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_ograve,	KS_ccedilla,	KS_at,
    KC(0x57),		KS_agrave,	KS_degree,	KS_numbersign,
    KC(0x58),		KS_bracketleft,	KS_braceleft,	KS_guillemotleft,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7c),		KS_less,	KS_greater,
};

/* 026 Italian type 5 keyboard */
const keysym_t sunkbd5_keydesc_it[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,
    KC(0x20),		KS_3,		KS_sterling,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,	KS_braceleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_braceright,
    KC(0x27),		KS_0,		KS_equal,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_igrave,	KS_asciicircum,
    KC(0x2a),		KS_backslash,	KS_bar,
    KC(0x40),		KS_egrave,	KS_eacute,	KS_bracketleft,
    KC(0x41),		KS_plus,	KS_asterisk,	KS_bracketright,
    KC(0x56),		KS_ograve,	KS_ccedilla,	KS_at,
    KC(0x57),		KS_agrave,	KS_degree,	KS_numbersign,
    KC(0x58),		KS_ugrave,	KS_paragraph,	KS_asciitilde,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7c),		KS_less,	KS_greater,
};

/* 007 Dutch type 4 keyboard */
const keysym_t sunkbd_keydesc_nl[] = {
    KC(0x0d),		KS_Caps_Lock,
    KC(0x0f),		KS_backslash,	KS_bar,
    KC(0x1e),		KS_1,		KS_exclam,	KS_onesuperior,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(0x20),		KS_3,		KS_numbersign,	KS_threesuperior,
    KC(0x21),		KS_4,		KS_dollar,	KS_onequarter,
    KC(0x22),		KS_5,		KS_percent,	KS_onehalf,
    KC(0x23),		KS_6,		KS_ampersand,	KS_threequarters,
    KC(0x24),		KS_7,		KS_underscore,	KS_sterling,
    KC(0x25),		KS_8,		KS_parenleft,	KS_braceleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_braceright,
    KC(0x27),		KS_0,		KS_apostrophe,	KS_grave,
    KC(0x28),		KS_slash,	KS_question,
    KC(0x29),		KS_degree,	KS_dead_tilde,	KS_dead_abovering,
    KC(0x2a),		KS_less,	KS_greater,
    KC(0x40),		KS_dead_diaeresis,KS_dead_circumflex,
    KC(0x41),		KS_asterisk,	KS_brokenbar,	KS_asciitilde,
    KC(0x4e),		KS_s,		KS_S,		KS_ssharp,
    KC(0x56),		KS_plus,	KS_plusminus,
    KC(0x57),		KS_dead_acute,	KS_dead_grave,
    KC(0x58),		KS_at,		KS_paragraph,	KS_notsign,
    KC(0x64),		KS_z,		KS_Z,		KS_guillemotleft,
    KC(0x65),		KS_x,		KS_X,		KS_guillemotright,
    KC(0x66),		KS_c,		KS_C,		KS_cent,
    KC(0x6a),		KS_m,		KS_M,		KS_mu,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_equal,
    KC(0x77),		KS_Mode_switch,
    KC(0x7d),		KS_bracketright,KS_bracketleft,
};

/* 027 Dutch type 5 keyboard */
const keysym_t sunkbd5_keydesc_nl[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1e),		KS_1,		KS_exclam,	KS_onesuperior,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(0x20),		KS_3,		KS_numbersign,	KS_threesuperior,
    KC(0x21),		KS_4,		KS_dollar,	KS_onequarter,
    KC(0x22),		KS_5,		KS_percent,	KS_onehalf,
    KC(0x23),		KS_6,		KS_ampersand,	KS_threequarters,
    KC(0x24),		KS_7,		KS_underscore,	KS_sterling,
    KC(0x25),		KS_8,		KS_parenleft,	KS_braceleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_braceright,
    KC(0x27),		KS_0,		KS_apostrophe,	KS_grave,
    KC(0x28),		KS_slash,	KS_question,	KS_backslash,
    KC(0x29),		KS_degree,	KS_dead_tilde,	KS_dead_abovering,
    KC(0x2a),		KS_at,		KS_paragraph,	KS_notsign,
    KC(0x40),		KS_dead_diaeresis,KS_dead_circumflex,
    KC(0x41),		KS_asterisk,	KS_bar,		KS_asciitilde,
    KC(0x4e),		KS_s,		KS_S,		KS_ssharp,
    KC(0x56),		KS_plus,	KS_plusminus,
    KC(0x57),		KS_dead_acute,	KS_dead_grave,
    KC(0x58),		KS_less,	KS_greater,	KS_asciicircum,
    KC(0x64),		KS_z,		KS_Z,		KS_guillemotleft,
    KC(0x65),		KS_x,		KS_X,		KS_guillemotright,
    KC(0x66),		KS_c,		KS_C,		KS_cent,
    KC(0x6a),		KS_m,		KS_M,		KS_mu,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,	KS_hyphen,
    KC(0x6d),		KS_minus,	KS_equal,
    KC(0x7d),		KS_bracketright,KS_bracketleft,	KS_brokenbar,
};

/* 008 Norwegian type 4 keyboard */
const keysym_t sunkbd_keydesc_no[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x0f),		KS_asciitilde,	KS_asciicircum,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_currency,	KS_dollar,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_plus,	KS_question,
    KC(0x29),		KS_backslash,	KS_dead_grave,	KS_dead_acute,
    KC(0x2a),		KS_apostrophe,	KS_asterisk,	KS_grave,
    KC(0x40),		KS_aring,
    KC(0x41),		KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_oslash,
    KC(0x57),		KS_ae,
    KC(0x58),		KS_bar,		KS_paragraph,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7d),		KS_less,	KS_greater,
};

/* 028 Norwegian type 5 keyboard */
const keysym_t sunkbd5_keydesc_no[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_currency,	KS_dollar,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,	KS_asciicircum,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_plus,	KS_question,
    KC(0x29),		KS_backslash,	KS_dead_grave,	KS_dead_acute,
    KC(0x2a),		KS_bar,		KS_paragraph,
    KC(0x40),		KS_aring,
    KC(0x41),		KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(0x56),		KS_oslash,
    KC(0x57),		KS_ae,
    KC(0x58),		KS_apostrophe,	KS_asterisk,	KS_grave,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7d),		KS_less,	KS_greater,
};

/* 009 Portuguese type 4 keyboard */
const keysym_t sunkbd_keydesc_pt[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x0f),		KS_bracketright,KS_braceright,	KS_guillemotright,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_dollar,	KS_paragraph,
    KC(0x23),		KS_6,		KS_ampersand,	KS_notsign,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_backslash,
    KC(0x27),		KS_0,		KS_equal,	KS_bar,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_exclamdown,	KS_questiondown,
    KC(0x2a),		KS_dead_tilde,	KS_dead_circumflex,KS_asciicircum,
    KC(0x40),		KS_dead_diaeresis,KS_asterisk,	KS_plus,
    KC(0x41),		KS_dead_acute,	KS_dead_grave,	KS_asciitilde,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_ccedilla,
    KC(0x57),		KS_masculine,	KS_ordfeminine,
    KC(0x58),		KS_bracketleft,	KS_braceleft,	KS_guillemotleft,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7d),		KS_less,	KS_greater,
};

/* 029 Portuguese type 4 keyboard */
const keysym_t sunkbd5_keydesc_pt[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_dollar,	KS_paragraph,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,	KS_asciicircum,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_guillemotleft,KS_guillemotright,
    KC(0x2a),		KS_backslash,	KS_bar,
    KC(0x40),		KS_plus,	KS_asterisk,	KS_dead_diaeresis,
    KC(0x41),		KS_dead_acute,	KS_dead_grave,
    KC(0x56),		KS_ccedilla,
    KC(0x57),		KS_masculine,	KS_ordfeminine,
    KC(0x58),		KS_dead_tilde,	KS_dead_circumflex,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7d),		KS_less,	KS_greater,
};

/* 00a Spanish type 4 keyboard */
const keysym_t sunkbd_keydesc_es[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x0f),		KS_bracketright,KS_braceright,	KS_guillemotright,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_hyphen,	KS_numbersign,
    KC(0x22),		KS_5,		KS_percent,	KS_degree,
    KC(0x23),		KS_6,		KS_ampersand,	KS_notsign,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_backslash,
    KC(0x27),		KS_0,		KS_equal,	KS_bar,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_exclamdown,	KS_questiondown,
    KC(0x2a),		KS_ccedilla,
    KC(0x3e),		KS_o,		KS_O,		KS_masculine,
    KC(0x40),		KS_dead_grave,	KS_dead_circumflex,KS_asciicircum,
    KC(0x41),		KS_plus,	KS_asterisk,	KS_asciitilde,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x4d),		KS_a,		KS_A,		KS_ordfeminine,
    KC(0x56),		KS_ntilde,
    KC(0x57),		KS_dead_acute,	KS_dead_diaeresis,
    KC(0x58),		KS_bracketleft,	KS_braceleft,	KS_guillemotleft,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7d),		KS_less,	KS_greater,
};

/* 02a Spanish type 5 keyboard */
const keysym_t sunkbd5_keydesc_es[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1e),		KS_1,		KS_exclam,	KS_bar,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_hyphen,	KS_numbersign,
    KC(0x21),		KS_4,		KS_dollar,	KS_asciicircum,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,	KS_notsign,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,
    KC(0x27),		KS_0,		KS_equal,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_exclamdown,	KS_questiondown,
    KC(0x2a),		KS_masculine,	KS_ordfeminine,	KS_backslash,
    KC(0x40),		KS_dead_grave,	KS_dead_circumflex,KS_bracketleft,
    KC(0x41),		KS_plus,	KS_asterisk,	KS_bracketright,
    KC(0x56),		KS_ntilde,
    KC(0x57),		KS_dead_acute,	KS_dead_diaeresis,KS_braceleft,
    KC(0x58),		KS_ccedilla,	KS_Ccedilla,	KS_braceright,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7d),		KS_less,	KS_greater,
};

/* 00b Swedish/Finnish type 4 keyboard */
a192 193
/* 02b Swedish type 5 keyboard */
const keysym_t sunkbd5_keydesc_sv[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x0f),		KS_asciitilde,	KS_asciicircum, 
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_currency,	KS_dollar,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_plus,	KS_question,	KS_backslash,
    KC(0x29),		KS_dead_acute,	KS_dead_grave,
    KC(0x2a),		KS_paragraph,	KS_onehalf,
    KC(0x40),		KS_aring,
    KC(0x41),		KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(0x43),		KS_Multi_key,
    KC(0x4c),		KS_Control_L,
    KC(0x56),		KS_odiaeresis,
    KC(0x57),		KS_adiaeresis,
    KC(0x58),		KS_apostrophe,	KS_asterisk,	KS_grave,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Caps_Lock,
    KC(0x7c),		KS_less,	KS_greater,	KS_bar,
};

/* 00c Swiss-French type 4 keyboard */
const keysym_t sunkbd_keydesc_sf[] = {
    KC(0x0d),		KS_Multi_key,
    KC(0x0f),		KS_greater,	KS_braceright,
    KC(0x1e),		KS_1,		KS_plus,	KS_exclam,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_asterisk,	KS_numbersign,
    KC(0x21),		KS_4,		KS_ccedilla,	KS_cent,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,	KS_paragraph,
    KC(0x24),		KS_7,		KS_slash,	KS_bar,
    KC(0x25),		KS_8,		KS_parenleft,	KS_degree,
    KC(0x26),		KS_9,		KS_parenright,	KS_backslash,
    KC(0x27),		KS_0,		KS_equal,	KS_asciicircum,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_dead_circumflex,KS_dead_grave,
    KC(0x2a),		KS_dollar,	KS_dead_tilde,	KS_sterling,
    KC(0x3b),		KS_z,
    KC(0x40),		KS_egrave,	KS_udiaeresis,
    KC(0x41),		KS_dead_diaeresis,KS_dead_acute,
    KC(0x43),		KS_Mode_switch,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_eacute,	KS_odiaeresis,
    KC(0x57),		KS_agrave,	KS_adiaeresis,
    KC(0x58),		KS_less,	KS_braceleft,
    KC(0x64),		KS_y,
    KC(0x6a),		KS_m,		KS_M,		KS_mu,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7c),		KS_bracketright,KS_bracketleft,	KS_backslash,
};

/* 02c Swiss-French type 5 keyboard */
const keysym_t sunkbd5_keydesc_sf[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1e),		KS_1,		KS_plus,	KS_bar,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_asterisk,	KS_numbersign,
    KC(0x21),		KS_4,		KS_ccedilla,	KS_asciicircum,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,
    KC(0x27),		KS_0,		KS_equal,	KS_grave,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_dead_acute,
    KC(0x29),		KS_dead_circumflex,KS_dead_grave,KS_dead_tilde,
    KC(0x2a),		KS_dollar,	KS_degree,
    KC(0x3b),		KS_z,
    KC(0x40),		KS_egrave,	KS_udiaeresis,	KS_bracketleft,
    KC(0x41),		KS_dead_diaeresis,KS_exclam,	KS_bracketright,
    KC(0x56),		KS_eacute,	KS_odiaeresis,
    KC(0x57),		KS_agrave,	KS_adiaeresis,	KS_braceleft,
    KC(0x58),		KS_dollar,	KS_sterling,	KS_braceright,
    KC(0x64),		KS_y,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7c),		KS_less,	KS_greater,	KS_backslash,
};

/* 00d Swiss-German type 4 keyboard */
const keysym_t sunkbd_keydesc_sg[] = {
    KC(0x0d),		KS_Multi_key,
    KC(0x0f),		KS_greater,	KS_braceright,
    KC(0x1e),		KS_1,		KS_plus,	KS_exclam,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_asterisk,	KS_numbersign,
    KC(0x21),		KS_4,		KS_ccedilla,	KS_cent,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,	KS_paragraph,
    KC(0x24),		KS_7,		KS_slash,	KS_bar,
    KC(0x25),		KS_8,		KS_parenleft,	KS_degree,
    KC(0x26),		KS_9,		KS_parenright,	KS_backslash,
    KC(0x27),		KS_0,		KS_equal,	KS_asciicircum,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_dead_circumflex,KS_dead_grave,
    KC(0x2a),		KS_dollar,	KS_dead_tilde,	KS_sterling,
    KC(0x3b),		KS_z,
    KC(0x40),		KS_udiaeresis,	KS_egrave,
    KC(0x41),		KS_dead_diaeresis,KS_dead_acute,
    KC(0x43),		KS_Mode_switch,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_odiaeresis,	KS_eacute,
    KC(0x57),		KS_adiaeresis,	KS_agrave,
    KC(0x58),		KS_less,	KS_braceleft,
    KC(0x64),		KS_y,
    KC(0x6a),		KS_m,		KS_M,		KS_mu,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7c),		KS_bracketright,KS_bracketleft,	KS_backslash,
};

/* 02d Swiss-German type 5 keyboard */
const keysym_t sunkbd5_keydesc_sg[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1e),		KS_1,		KS_plus,	KS_bar,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_asterisk,	KS_numbersign,
    KC(0x21),		KS_4,		KS_ccedilla,	KS_asciicircum,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,
    KC(0x27),		KS_0,		KS_equal,	KS_grave,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_dead_acute,
    KC(0x29),		KS_dead_circumflex,KS_dead_grave,KS_dead_tilde,
    KC(0x2a),		KS_dollar,	KS_degree,
    KC(0x3b),		KS_z,
    KC(0x40),		KS_udiaeresis,	KS_egrave,	KS_bracketleft,
    KC(0x41),		KS_dead_diaeresis,KS_exclam,	KS_bracketright,
    KC(0x56),		KS_odiaeresis,	KS_eacute,
    KC(0x57),		KS_adiaeresis,	KS_agrave,	KS_braceleft,
    KC(0x58),		KS_dollar,	KS_sterling,	KS_braceright,
    KC(0x64),		KS_y,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7c),		KS_less,	KS_greater,	KS_backslash,
};

/* 00e UK English type 4 keyboard */
const keysym_t sunkbd_keydesc_uk[] = {
    KC(0x1e),		KS_1,		KS_exclam,	KS_bar,
    KC(0x21),		KS_3,		KS_sterling,	KS_numbersign,
    KC(0x28),		KS_minus,	KS_underscore,	KS_notsign,
    KC(0x43),		KS_Mode_switch,
};

/* 02e UK English type 5 keyboard */
const keysym_t sunkbd5_keydesc_uk[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,
    KC(0x20),		KS_3,		KS_sterling,
    KC(0x2a),		KS_grave,	KS_notsign,	KS_brokenbar,
    KC(0x57),		KS_apostrophe,	KS_at,
    KC(0x58),		KS_numbersign,	KS_asciitilde,
    KC(0x7c),		KS_backslash,	KS_bar,
};

/* 031 Japan type 5 keyboard */
const keysym_t sunkbd5_keydesc_jp[] = {
    KC(0x1f),		KS_2,		KS_quotedbl,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_apostrophe,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,
    KC(0x27),		KS_0,
    KC(0x28),		KS_minus,	KS_equal,
    KC(0x29),		KS_asciicircum,	KS_asciitilde,
    KC(0x2a),		KS_yen,		KS_bar,
    KC(0x40),		KS_at,		KS_grave,
    KC(0x41),		KS_bracketleft,	KS_braceleft,
    KC(0x56),		KS_semicolon,	KS_plus,
    KC(0x57),		KS_colon,	KS_asterisk,
    KC(0x58),		KS_bracketright,KS_braceright,
    KC(0x7c),		KS_backslash,	KS_underscore,
};

a195 1
/* Supported type 4 keyboard layouts */
a197 11
	KBD_MAP(KB_BE,			KB_US,	sunkbd_keydesc_befr),
	KBD_MAP(KB_DE,			KB_US,	sunkbd_keydesc_de),
	KBD_MAP(KB_DK,			KB_US,	sunkbd_keydesc_dk),
	KBD_MAP(KB_ES,			KB_US,	sunkbd_keydesc_es),
	KBD_MAP(KB_FR,			KB_US,	sunkbd_keydesc_befr),
	KBD_MAP(KB_IT,			KB_US,	sunkbd_keydesc_it),
	KBD_MAP(KB_NL,			KB_US,	sunkbd_keydesc_nl),
	KBD_MAP(KB_NO,			KB_US,	sunkbd_keydesc_no),
	KBD_MAP(KB_PT,			KB_US,	sunkbd_keydesc_pt),
	KBD_MAP(KB_SF,			KB_US,	sunkbd_keydesc_sf),
	KBD_MAP(KB_SG,			KB_US,	sunkbd_keydesc_sg),
a199 1
	KBD_MAP(KB_UK,			KB_US,	sunkbd_keydesc_uk),
a202 135
/* Supported type 5 keyboard layouts */
const struct wscons_keydesc sunkbd5_keydesctab[] = {
	KBD_MAP(KB_US,			0,	sunkbd_keydesc_us),
	KBD_MAP(KB_DE,			KB_US,	sunkbd5_keydesc_de),
	KBD_MAP(KB_DK,			KB_US,	sunkbd5_keydesc_dk),
	KBD_MAP(KB_ES,			KB_US,	sunkbd5_keydesc_es),
	KBD_MAP(KB_FR,			KB_US,	sunkbd5_keydesc_fr),
	KBD_MAP(KB_IT,			KB_US,	sunkbd5_keydesc_it),
	KBD_MAP(KB_JP,			KB_US,	sunkbd5_keydesc_jp),
	KBD_MAP(KB_NL,			KB_US,	sunkbd5_keydesc_nl),
	KBD_MAP(KB_NO,			KB_US,	sunkbd5_keydesc_no),
	KBD_MAP(KB_PT,			KB_US,	sunkbd5_keydesc_pt),
	KBD_MAP(KB_SF,			KB_US,	sunkbd5_keydesc_sf),
	KBD_MAP(KB_SG,			KB_US,	sunkbd5_keydesc_sg),
	KBD_MAP(KB_SV,			KB_US,	sunkbd5_keydesc_sv),
	KBD_MAP(KB_SV | KB_NODEAD,	KB_SV,	sunkbd_keydesc_sv_nodead),
	KBD_MAP(KB_UK,			KB_US,	sunkbd5_keydesc_uk),
	{0, 0, 0, 0},
};

/*
 * Keyboard layout to ID table
 * References:
 *	Sun Type 5 Keyboard Supplement Installation Guide, May 1992
 *	http://docs.sun.com/db/doc/806-6642/6jfipqu57?a=view
 *	http://jp.sunsolve.sun.com/handbook_pub/Systems/SSVygr/INPUT_Compact1_Keyboard.html
 */
const int sunkbd_layouts[MAXSUNLAYOUT] = {
	/* Type 4 layouts */
	KB_US,	/* 000 USA */
	KB_US,	/* 001 same as 000 */
	KB_BE,	/* 002 Belgium/French */
	-1,	/* 003 Canada */
	KB_DK,	/* 004 Denmark */
	KB_DE,	/* 005 Germany */
	KB_IT,	/* 006 Italy */
	KB_NL,	/* 007 The Netherlands */
	KB_NO,	/* 008 Norway */
	KB_PT,	/* 009 Portugal */
	KB_ES,	/* 00a Latin America/Spanish */
	KB_SV,	/* 00b Sweden */
	KB_SF,	/* 00c Switzerland/French */
	KB_SG,	/* 00d Switzerland/German */
	KB_UK,	/* 00e Great Britain */
	-1,	/* 00f unaffected */
	-1,	/* 010 Korea */
	-1,	/* 011 Taiwan */
	-1,	/* 012 unaffected */
	-1,	/* 013 unaffected */
	-1,	/* 014 VT220 */
	-1,	/* 015 VT220 Switzerland/French */
	-1,	/* 016 VT220 Switzerland/German */
	-1,	/* 017 VT220 Switzerland/Italian */
	-1,	/* 018 unaffected */
	-1,	/* 019 Belgium */
	-1,	/* 01a unaffected */
	-1,	/* 01b unaffected */
	-1,	/* 01c unaffected */
	-1,	/* 01d unaffected */
	-1,	/* 01e unaffected */
	-1,	/* 01f unaffected */
	-1,	/* 020 Japan */

	/* Type 5 layouts */
	KB_US,	/* 021 USA */
	KB_US,	/* 022 UNIX */
	KB_FR,	/* 023 France */
	KB_DK,	/* 024 Denmark */
	KB_DE,	/* 025 Germany */
	KB_IT,	/* 026 Italy */
	KB_NL,	/* 027 The Netherlands */
	KB_NO,	/* 028 Norway */
	KB_PT,	/* 029 Portugal */
	KB_ES,	/* 02a Spain */
	KB_SV,	/* 02b Sweden */
	KB_SF,	/* 02c Switzerland/French */
	KB_SG,	/* 02d Switzerland/German */
	KB_UK,	/* 02e Great Britain */
	-1,	/* 02f Korea */
	-1,	/* 030 Taiwan */
	KB_JP,	/* 031 Japan */
	-1,	/* 032 Canada/French */
	-1,	/* 033 Hungary */
	-1,	/* 034 Poland */
	-1,	/* 035 Czech */
	-1,	/* 036 Russia */
	-1,	/* 037 Latvia */
	-1,	/* 038 Turkey-Q5 */
	-1,	/* 039 Greece */
	-1	/* 03a Arabic */
	-1,	/* 03b Lithuania */
	-1,	/* 03c Belgium */
	-1,	/* 03d unaffected */
	-1,	/* 03e Turkey-F5 */
	-1,	/* 03f Canada/French */

	/* Not affected range */
	-1,	/* 040 */
	-1,	/* 041 */
	-1,	/* 042 */
	-1,	/* 043 */
	-1,	/* 044 */
	-1,	/* 045 */
	-1,	/* 046 */
	-1,	/* 047 */
	-1,	/* 048 */
	-1,	/* 049 */
	-1,	/* 04a */
	-1,	/* 04b */
	-1,	/* 04c */
	-1,	/* 04d */
	-1,	/* 04e */
	-1,	/* 04f */

	/* ``Compact-1'' layouts */
	KB_US,	/* 050 USA */
	KB_US,	/* 051 UNIX */
	KB_FR,	/* 052 France */
	KB_DK,	/* 053 Denmark */
	KB_DE,	/* 054 Germany */
	KB_IT,	/* 055 Italy */
	KB_NL,	/* 056 The Netherlands */
	KB_NO,	/* 057 Norway */
	KB_PT,	/* 058 Portugal */
	KB_ES,	/* 059 Spain */
	KB_SV,	/* 05a Sweden */
	KB_SF,	/* 05b Switzerland/French */
	KB_SG,	/* 05c Switzerland/German */
	KB_UK,	/* 05d Great Britain */
	-1,	/* 05e Korea */
	-1,	/* 05f Taiwan */
	KB_JP,	/* 060 Japan */
	-1,	/* 061 Canada/French */
};

a206 9
#else
	KB_US,
#endif
};

struct wskbd_mapdata sunkbd5_keymapdata = {
	sunkbd5_keydesctab,
#ifdef SUNKBD5_LAYOUT
	SUNKBD5_LAYOUT,
@


1.3.2.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.3.2.1 2003/03/28 00:38:30 niklas Exp $	*/
d16 5
d978 1
a978 1
	-1,	/* 03a Arabic */
@


1.2
log
@US isn't all :-) Here is a swedish map. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.1 2002/01/25 03:24:53 jason Exp $	*/
d199 1
a199 1
	KBD_MAP(KB_SV | KB_NODEAD,	KB_SV,	sunkbd_keydesc_sv),
@


1.1
log
@move the scancode -> wskbd event map into a seperate file... more still
to move, though.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d160 33
d197 3
a199 1
	KBD_MAP(KB_US, 0, sunkbd_keydesc_us),
d204 6
a209 1
	sunkbd_keydesctab, KB_US
@


1.1.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.1 2002/01/25 03:24:53 jason Exp $	*/
@


1.1.2.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.1.2.1 2002/01/31 22:55:39 niklas Exp $	*/
a31 5
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 *
a32 1

a159 62
const keysym_t sunkbd_keydesc_sv[] = {
    KC(0x0d),		KS_Multi_key,
    KC(0x0f),		KS_asciitilde,	KS_asciicircum, 
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_currency,	KS_dollar,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_plus,	KS_question,	KS_backslash,
    KC(0x29),		KS_dead_acute,	KS_dead_grave,
    KC(0x2a),		KS_apostrophe,	KS_asterisk,	KS_grave,
    KC(0x40),		KS_aring,
    KC(0x41),		KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(0x43),		KS_Mode_switch,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_odiaeresis,
    KC(0x57),		KS_adiaeresis,
    KC(0x58),		KS_paragraph,	KS_onehalf,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7c),		KS_less,	KS_greater,	KS_bar,
};

const keysym_t sunkbd_keydesc_sv_nodead[] = {
    KC(0x29),		KS_apostrophe,	KS_grave,
    KC(0x41),		KS_diaeresis,	KS_asciicircum,	KS_asciitilde,
};

const keysym_t sunkbd5_keydesc_sv[] = {

    KC(0x0d),		KS_Mode_switch,
    KC(0x0f),		KS_asciitilde,	KS_asciicircum, 
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_currency,	KS_dollar,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_plus,	KS_question,	KS_backslash,
    KC(0x29),		KS_dead_acute,	KS_dead_grave,
    KC(0x2a),		KS_paragraph,	KS_onehalf,
    KC(0x40),		KS_aring,
    KC(0x41),		KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(0x43),		KS_Multi_key,
    KC(0x4c),		KS_Control_L,
    KC(0x56),		KS_odiaeresis,
    KC(0x57),		KS_adiaeresis,
    KC(0x58),		KS_apostrophe,	KS_asterisk,	KS_grave,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Caps_Lock,
    KC(0x7c),		KS_less,	KS_greater,	KS_bar,
};

d164 1
a164 10
	KBD_MAP(KB_US,			0,	sunkbd_keydesc_us),
	KBD_MAP(KB_SV,			KB_US,	sunkbd_keydesc_sv),
	KBD_MAP(KB_SV | KB_NODEAD,	KB_SV,	sunkbd_keydesc_sv_nodead),
	{0, 0, 0, 0},
};

const struct wscons_keydesc sunkbd5_keydesctab[] = {
	KBD_MAP(KB_US,			0,	sunkbd_keydesc_us),
	KBD_MAP(KB_SV,			KB_US,	sunkbd5_keydesc_sv),
	KBD_MAP(KB_SV | KB_NODEAD,	KB_SV,	sunkbd_keydesc_sv_nodead),
d169 1
a169 15
	sunkbd_keydesctab,
#ifdef SUNKBD_LAYOUT
	SUNKBD_LAYOUT,
#else
	KB_US,
#endif
};

struct wskbd_mapdata sunkbd5_keymapdata = {
	sunkbd5_keydesctab,
#ifdef SUNKBD5_LAYOUT
	SUNKBD5_LAYOUT,
#else
	KB_US,
#endif
@


1.1.2.3
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sunkbd.c,v 1.1.2.2 2002/06/11 03:42:29 art Exp $	*/
a55 1
    KC(0x03),				KS_Again,
a73 1
    KC(0x17),				KS_Hold_Screen,
d75 1
a75 2
    KC(0x19),				KS_Props,
    KC(0x1a),				KS_Undo,
d92 1
a92 1
    KC(0x2b),				KS_Delete,
d97 1
a97 3
    KC(0x31),				KS_Front,
    KC(0x32),				KS_KP_Delete,	KS_KP_Decimal,
    KC(0x33),				KS_Copy,
a117 2
    KC(0x48),				KS_Open,
    KC(0x49),				KS_Paste,
a139 1
    KC(0x61),				KS_Cut,
@


1.1.2.4
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a3 1
 * Copyright (c) 2002, 2003 Miodrag Vallat.
a52 2

/* 000/021/022 US English type 4/5 keyboard */
a173 463
/* 002 French/Belgian type 4 keyboard */
const keysym_t sunkbd_keydesc_befr[] = {
    KC(0x0d),		KS_Caps_Lock,
    KC(0x0f),		KS_bracketright,KS_braceright,	KS_guillemotright,
    KC(0x1e),		KS_ampersand,	KS_1,
    KC(0x1f),		KS_eacute,	KS_2,		KS_twosuperior,
    KC(0x20),		KS_quotedbl,	KS_3,		KS_threesuperior,
    KC(0x21),		KS_apostrophe,	KS_4,
    KC(0x22),		KS_parenleft,	KS_5,
    KC(0x23),		KS_paragraph,	KS_6,
    KC(0x24),		KS_egrave,	KS_7,
    KC(0x25),		KS_exclam,	KS_8,		KS_sterling,
    KC(0x26),		KS_ccedilla,	KS_9,		KS_backslash,
    KC(0x27),		KS_agrave,	KS_0,
    KC(0x28),		KS_parenright,	KS_degree,	KS_asciitilde,
    KC(0x29),		KS_minus,	KS_underscore,	KS_numbersign,
    KC(0x2a),		KS_asterisk,	KS_bar,		KS_currency,
    KC(0x36),		KS_a,
    KC(0x37),		KS_z,
    KC(0x40),		KS_dead_circumflex,KS_dead_diaeresis,
    KC(0x41),		KS_grave,	KS_dollar,	KS_at,
    KC(0x4d), KS_Cmd_Debugger,	KS_q,
    KC(0x56),		KS_m,		KS_M,		KS_mu,
    KC(0x57),		KS_ugrave,	KS_percent,
    KC(0x58),		KS_bracketleft,	KS_braceleft,	KS_guillemotleft,
    KC(0x64),		KS_w,
    KC(0x6a),		KS_comma,	KS_question,
    KC(0x6b),		KS_semicolon,	KS_period,
    KC(0x6c),		KS_colon,	KS_slash,
    KC(0x6d),		KS_equal,	KS_plus,
    KC(0x77),		KS_Mode_switch,
    KC(0x7c),		KS_less,	KS_greater,
};

/* 023 French type 5 keyboard */
const keysym_t sunkbd5_keydesc_fr[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1e),		KS_ampersand,	KS_1,
    KC(0x1f),		KS_eacute,	KS_2,		KS_asciitilde,
    KC(0x20),		KS_quotedbl,	KS_3,		KS_numbersign,
    KC(0x21),		KS_apostrophe,	KS_4,		KS_braceleft,
    KC(0x22),		KS_parenleft,	KS_5,		KS_bracketleft,
    KC(0x23),		KS_minus,	KS_6,		KS_bar,
    KC(0x24),		KS_egrave,	KS_7,		KS_grave,
    KC(0x25),		KS_underscore,	KS_8,		KS_backslash,
    KC(0x26),		KS_ccedilla,	KS_9,		KS_asciicircum,
    KC(0x27),		KS_agrave,	KS_0,		KS_at,
    KC(0x28),		KS_parenright,	KS_degree,	KS_bracketright,
    KC(0x29),		KS_equal,	KS_plus,	KS_braceright,
    KC(0x2a),		KS_twosuperior,
    KC(0x36),		KS_a,
    KC(0x37),		KS_z,
    KC(0x40),		KS_dead_circumflex,KS_dead_diaeresis,
    KC(0x41),		KS_dollar,	KS_sterling,	KS_currency,
    KC(0x4d), KS_Cmd_Debugger,	KS_q,
    KC(0x56),		KS_m,
    KC(0x57),		KS_ugrave,	KS_percent,
    KC(0x58),		KS_asterisk,	KS_mu,
    KC(0x64),		KS_w,
    KC(0x6a),		KS_comma,	KS_question,
    KC(0x6b),		KS_semicolon,	KS_period,
    KC(0x6c),		KS_colon,	KS_slash,
    KC(0x6d),		KS_exclam,	KS_paragraph,
    KC(0x7c),		KS_less,	KS_greater,
};

/* 004 Danish type 4 keyboard */
const keysym_t sunkbd_keydesc_dk[] = {
    KC(0x0d),		KS_Multi_key,
    KC(0x0f),		KS_asciitilde,	KS_asciicircum, 
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_currency,	KS_dollar,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_plus,	KS_question,
    KC(0x29),		KS_dead_acute,	KS_dead_grave,	KS_bar,
    KC(0x2a),		KS_apostrophe,	KS_asterisk,	KS_grave,
    KC(0x40),		KS_aring,
    KC(0x41),		KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(0x43),		KS_Mode_switch,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_ae,
    KC(0x57),		KS_oslash,
    KC(0x58),		KS_onehalf,	KS_paragraph,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7c),		KS_less,	KS_greater,	KS_backslash,
};

/* 024 Danish type 5 keyboard */
const keysym_t sunkbd5_keydesc_dk[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_currency,	KS_dollar,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,	KS_asciicircum,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_plus,	KS_question,
    KC(0x29),		KS_dead_acute,	KS_dead_grave,	KS_bar,
    KC(0x2a),		KS_onehalf,	KS_asterisk,	KS_grave,
    KC(0x40),		KS_aring,
    KC(0x41),		KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(0x56),		KS_ae,
    KC(0x57),		KS_oslash,
    KC(0x58),		KS_backslash,	KS_asterisk,	KS_grave,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7c),		KS_less,	KS_greater,	KS_backslash,
};

/* 005 German type 4 keyboard */
const keysym_t sunkbd_keydesc_de[] = {
    KC(0x0d),		KS_Alt_L,
    KC(0x0f),		KS_bracketright,KS_braceright,	KS_guillemotright,
    KC(0x13),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(0x20),		KS_3,		KS_paragraph,	KS_threesuperior,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,	KS_degree,
    KC(0x25),		KS_8,		KS_parenleft,	KS_grave,
    KC(0x26),		KS_9,		KS_parenright,	KS_apostrophe,
    KC(0x27),		KS_0,		KS_equal,	KS_bar,
    KC(0x28),		KS_ssharp,	KS_question,	KS_backslash,
    KC(0x29),		KS_dead_acute,	KS_dead_grave,
    KC(0x2a),		KS_numbersign,	KS_asciicircum,	KS_at,
    KC(0x3b),		KS_z,
    KC(0x40),		KS_udiaeresis,
    KC(0x41),		KS_plus,	KS_multiply,	KS_asciitilde,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_odiaeresis,
    KC(0x57),		KS_adiaeresis,
    KC(0x58),		KS_bracketleft,	KS_braceleft,	KS_guillemotleft,
    KC(0x64),		KS_y,
    KC(0x6a),		KS_m,		KS_M,		KS_mu,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7c),		KS_less,	KS_greater,
};

/* 025 German type 5 keyboard */
const keysym_t sunkbd5_keydesc_de[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(0x20),		KS_3,		KS_paragraph,	KS_threesuperior,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_ssharp,	KS_question,	KS_backslash,
    KC(0x29),		KS_dead_acute,	KS_dead_grave,
    KC(0x2a),		KS_asciicircum,	KS_degree,
    KC(0x36),		KS_q,		KS_Q,		KS_at,
    KC(0x3b),		KS_z,
    KC(0x40),		KS_udiaeresis,
    KC(0x41),		KS_plus,	KS_multiply,	KS_asciitilde,
    KC(0x56),		KS_odiaeresis,
    KC(0x57),		KS_adiaeresis,
    KC(0x58),		KS_numbersign,	KS_apostrophe,	KS_grave,
    KC(0x64),		KS_y,
    KC(0x6a),		KS_m,		KS_M,		KS_mu,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7c),		KS_less,	KS_greater,	KS_bar,
};

/* 006 Italian type 4 keyboard */
const keysym_t sunkbd_keydesc_it[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x0f),		KS_bracketright,KS_braceright,	KS_guillemotright,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(0x20),		KS_3,		KS_sterling,	KS_threesuperior,
    KC(0x23),		KS_6,		KS_ampersand,	KS_notsign,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_backslash,
    KC(0x27),		KS_0,		KS_equal,	KS_bar,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_igrave,	KS_asciicircum,
    KC(0x2a),		KS_ugrave,	KS_paragraph,
    KC(0x40),		KS_egrave,	KS_eacute,
    KC(0x41),		KS_plus,	KS_asterisk,	KS_asciitilde,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_ograve,	KS_ccedilla,	KS_at,
    KC(0x57),		KS_agrave,	KS_degree,	KS_numbersign,
    KC(0x58),		KS_bracketleft,	KS_braceleft,	KS_guillemotleft,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7c),		KS_less,	KS_greater,
};

/* 026 Italian type 5 keyboard */
const keysym_t sunkbd5_keydesc_it[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,
    KC(0x20),		KS_3,		KS_sterling,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,	KS_braceleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_braceright,
    KC(0x27),		KS_0,		KS_equal,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_igrave,	KS_asciicircum,
    KC(0x2a),		KS_backslash,	KS_bar,
    KC(0x40),		KS_egrave,	KS_eacute,	KS_bracketleft,
    KC(0x41),		KS_plus,	KS_asterisk,	KS_bracketright,
    KC(0x56),		KS_ograve,	KS_ccedilla,	KS_at,
    KC(0x57),		KS_agrave,	KS_degree,	KS_numbersign,
    KC(0x58),		KS_ugrave,	KS_paragraph,	KS_asciitilde,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7c),		KS_less,	KS_greater,
};

/* 007 Dutch type 4 keyboard */
const keysym_t sunkbd_keydesc_nl[] = {
    KC(0x0d),		KS_Caps_Lock,
    KC(0x0f),		KS_backslash,	KS_bar,
    KC(0x1e),		KS_1,		KS_exclam,	KS_onesuperior,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(0x20),		KS_3,		KS_numbersign,	KS_threesuperior,
    KC(0x21),		KS_4,		KS_dollar,	KS_onequarter,
    KC(0x22),		KS_5,		KS_percent,	KS_onehalf,
    KC(0x23),		KS_6,		KS_ampersand,	KS_threequarters,
    KC(0x24),		KS_7,		KS_underscore,	KS_sterling,
    KC(0x25),		KS_8,		KS_parenleft,	KS_braceleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_braceright,
    KC(0x27),		KS_0,		KS_apostrophe,	KS_grave,
    KC(0x28),		KS_slash,	KS_question,
    KC(0x29),		KS_degree,	KS_dead_tilde,	KS_dead_abovering,
    KC(0x2a),		KS_less,	KS_greater,
    KC(0x40),		KS_dead_diaeresis,KS_dead_circumflex,
    KC(0x41),		KS_asterisk,	KS_brokenbar,	KS_asciitilde,
    KC(0x4e),		KS_s,		KS_S,		KS_ssharp,
    KC(0x56),		KS_plus,	KS_plusminus,
    KC(0x57),		KS_dead_acute,	KS_dead_grave,
    KC(0x58),		KS_at,		KS_paragraph,	KS_notsign,
    KC(0x64),		KS_z,		KS_Z,		KS_guillemotleft,
    KC(0x65),		KS_x,		KS_X,		KS_guillemotright,
    KC(0x66),		KS_c,		KS_C,		KS_cent,
    KC(0x6a),		KS_m,		KS_M,		KS_mu,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_equal,
    KC(0x77),		KS_Mode_switch,
    KC(0x7d),		KS_bracketright,KS_bracketleft,
};

/* 027 Dutch type 5 keyboard */
const keysym_t sunkbd5_keydesc_nl[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1e),		KS_1,		KS_exclam,	KS_onesuperior,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(0x20),		KS_3,		KS_numbersign,	KS_threesuperior,
    KC(0x21),		KS_4,		KS_dollar,	KS_onequarter,
    KC(0x22),		KS_5,		KS_percent,	KS_onehalf,
    KC(0x23),		KS_6,		KS_ampersand,	KS_threequarters,
    KC(0x24),		KS_7,		KS_underscore,	KS_sterling,
    KC(0x25),		KS_8,		KS_parenleft,	KS_braceleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_braceright,
    KC(0x27),		KS_0,		KS_apostrophe,	KS_grave,
    KC(0x28),		KS_slash,	KS_question,	KS_backslash,
    KC(0x29),		KS_degree,	KS_dead_tilde,	KS_dead_abovering,
    KC(0x2a),		KS_at,		KS_paragraph,	KS_notsign,
    KC(0x40),		KS_dead_diaeresis,KS_dead_circumflex,
    KC(0x41),		KS_asterisk,	KS_bar,		KS_asciitilde,
    KC(0x4e),		KS_s,		KS_S,		KS_ssharp,
    KC(0x56),		KS_plus,	KS_plusminus,
    KC(0x57),		KS_dead_acute,	KS_dead_grave,
    KC(0x58),		KS_less,	KS_greater,	KS_asciicircum,
    KC(0x64),		KS_z,		KS_Z,		KS_guillemotleft,
    KC(0x65),		KS_x,		KS_X,		KS_guillemotright,
    KC(0x66),		KS_c,		KS_C,		KS_cent,
    KC(0x6a),		KS_m,		KS_M,		KS_mu,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,	KS_hyphen,
    KC(0x6d),		KS_minus,	KS_equal,
    KC(0x7d),		KS_bracketright,KS_bracketleft,	KS_brokenbar,
};

/* 008 Norwegian type 4 keyboard */
const keysym_t sunkbd_keydesc_no[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x0f),		KS_asciitilde,	KS_asciicircum,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_currency,	KS_dollar,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_plus,	KS_question,
    KC(0x29),		KS_backslash,	KS_dead_grave,	KS_dead_acute,
    KC(0x2a),		KS_apostrophe,	KS_asterisk,	KS_grave,
    KC(0x40),		KS_aring,
    KC(0x41),		KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_oslash,
    KC(0x57),		KS_ae,
    KC(0x58),		KS_bar,		KS_paragraph,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7d),		KS_less,	KS_greater,
};

/* 028 Norwegian type 5 keyboard */
const keysym_t sunkbd5_keydesc_no[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_currency,	KS_dollar,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,	KS_asciicircum,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_plus,	KS_question,
    KC(0x29),		KS_backslash,	KS_dead_grave,	KS_dead_acute,
    KC(0x2a),		KS_bar,		KS_paragraph,
    KC(0x40),		KS_aring,
    KC(0x41),		KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(0x56),		KS_oslash,
    KC(0x57),		KS_ae,
    KC(0x58),		KS_apostrophe,	KS_asterisk,	KS_grave,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7d),		KS_less,	KS_greater,
};

/* 009 Portuguese type 4 keyboard */
const keysym_t sunkbd_keydesc_pt[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x0f),		KS_bracketright,KS_braceright,	KS_guillemotright,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_dollar,	KS_paragraph,
    KC(0x23),		KS_6,		KS_ampersand,	KS_notsign,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_backslash,
    KC(0x27),		KS_0,		KS_equal,	KS_bar,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_exclamdown,	KS_questiondown,
    KC(0x2a),		KS_dead_tilde,	KS_dead_circumflex,KS_asciicircum,
    KC(0x40),		KS_dead_diaeresis,KS_asterisk,	KS_plus,
    KC(0x41),		KS_dead_acute,	KS_dead_grave,	KS_asciitilde,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_ccedilla,
    KC(0x57),		KS_masculine,	KS_ordfeminine,
    KC(0x58),		KS_bracketleft,	KS_braceleft,	KS_guillemotleft,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7d),		KS_less,	KS_greater,
};

/* 029 Portuguese type 4 keyboard */
const keysym_t sunkbd5_keydesc_pt[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_numbersign,	KS_sterling,
    KC(0x21),		KS_4,		KS_dollar,	KS_paragraph,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,	KS_asciicircum,
    KC(0x24),		KS_7,		KS_slash,	KS_braceleft,
    KC(0x25),		KS_8,		KS_parenleft,	KS_bracketleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_bracketright,
    KC(0x27),		KS_0,		KS_equal,	KS_braceright,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_guillemotleft,KS_guillemotright,
    KC(0x2a),		KS_backslash,	KS_bar,
    KC(0x40),		KS_plus,	KS_asterisk,	KS_dead_diaeresis,
    KC(0x41),		KS_dead_acute,	KS_dead_grave,
    KC(0x56),		KS_ccedilla,
    KC(0x57),		KS_masculine,	KS_ordfeminine,
    KC(0x58),		KS_dead_tilde,	KS_dead_circumflex,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7d),		KS_less,	KS_greater,
};

/* 00a Spanish type 4 keyboard */
const keysym_t sunkbd_keydesc_es[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x0f),		KS_bracketright,KS_braceright,	KS_guillemotright,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_hyphen,	KS_numbersign,
    KC(0x22),		KS_5,		KS_percent,	KS_degree,
    KC(0x23),		KS_6,		KS_ampersand,	KS_notsign,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,	KS_backslash,
    KC(0x27),		KS_0,		KS_equal,	KS_bar,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_exclamdown,	KS_questiondown,
    KC(0x2a),		KS_ccedilla,
    KC(0x3e),		KS_o,		KS_O,		KS_masculine,
    KC(0x40),		KS_dead_grave,	KS_dead_circumflex,KS_asciicircum,
    KC(0x41),		KS_plus,	KS_asterisk,	KS_asciitilde,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x4d),		KS_a,		KS_A,		KS_ordfeminine,
    KC(0x56),		KS_ntilde,
    KC(0x57),		KS_dead_acute,	KS_dead_diaeresis,
    KC(0x58),		KS_bracketleft,	KS_braceleft,	KS_guillemotleft,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7d),		KS_less,	KS_greater,
};

/* 02a Spanish type 5 keyboard */
const keysym_t sunkbd5_keydesc_es[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1e),		KS_1,		KS_exclam,	KS_bar,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_hyphen,	KS_numbersign,
    KC(0x21),		KS_4,		KS_dollar,	KS_asciicircum,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,	KS_notsign,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,
    KC(0x27),		KS_0,		KS_equal,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_exclamdown,	KS_questiondown,
    KC(0x2a),		KS_masculine,	KS_ordfeminine,	KS_backslash,
    KC(0x40),		KS_dead_grave,	KS_dead_circumflex,KS_bracketleft,
    KC(0x41),		KS_plus,	KS_asterisk,	KS_bracketright,
    KC(0x56),		KS_ntilde,
    KC(0x57),		KS_dead_acute,	KS_dead_diaeresis,KS_braceleft,
    KC(0x58),		KS_ccedilla,	KS_Ccedilla,	KS_braceright,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7d),		KS_less,	KS_greater,
};

/* 00b Swedish/Finnish type 4 keyboard */
a206 1
/* 02b Swedish type 5 keyboard */
d208 1
a235 164
/* 00c Swiss-French type 4 keyboard */
const keysym_t sunkbd_keydesc_sf[] = {
    KC(0x0d),		KS_Multi_key,
    KC(0x0f),		KS_greater,	KS_braceright,
    KC(0x1e),		KS_1,		KS_plus,	KS_exclam,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_asterisk,	KS_numbersign,
    KC(0x21),		KS_4,		KS_ccedilla,	KS_cent,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,	KS_paragraph,
    KC(0x24),		KS_7,		KS_slash,	KS_bar,
    KC(0x25),		KS_8,		KS_parenleft,	KS_degree,
    KC(0x26),		KS_9,		KS_parenright,	KS_backslash,
    KC(0x27),		KS_0,		KS_equal,	KS_asciicircum,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_dead_circumflex,KS_dead_grave,
    KC(0x2a),		KS_dollar,	KS_dead_tilde,	KS_sterling,
    KC(0x3b),		KS_z,
    KC(0x40),		KS_egrave,	KS_udiaeresis,
    KC(0x41),		KS_dead_diaeresis,KS_dead_acute,
    KC(0x43),		KS_Mode_switch,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_eacute,	KS_odiaeresis,
    KC(0x57),		KS_agrave,	KS_adiaeresis,
    KC(0x58),		KS_less,	KS_braceleft,
    KC(0x64),		KS_y,
    KC(0x6a),		KS_m,		KS_M,		KS_mu,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7c),		KS_bracketright,KS_bracketleft,	KS_backslash,
};

/* 02c Swiss-French type 5 keyboard */
const keysym_t sunkbd5_keydesc_sf[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1e),		KS_1,		KS_plus,	KS_bar,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_asterisk,	KS_numbersign,
    KC(0x21),		KS_4,		KS_ccedilla,	KS_asciicircum,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,
    KC(0x27),		KS_0,		KS_equal,	KS_grave,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_dead_acute,
    KC(0x29),		KS_dead_circumflex,KS_dead_grave,KS_dead_tilde,
    KC(0x2a),		KS_dollar,	KS_degree,
    KC(0x3b),		KS_z,
    KC(0x40),		KS_egrave,	KS_udiaeresis,	KS_bracketleft,
    KC(0x41),		KS_dead_diaeresis,KS_exclam,	KS_bracketright,
    KC(0x56),		KS_eacute,	KS_odiaeresis,
    KC(0x57),		KS_agrave,	KS_adiaeresis,	KS_braceleft,
    KC(0x58),		KS_dollar,	KS_sterling,	KS_braceright,
    KC(0x64),		KS_y,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7c),		KS_less,	KS_greater,	KS_backslash,
};

/* 00d Swiss-German type 4 keyboard */
const keysym_t sunkbd_keydesc_sg[] = {
    KC(0x0d),		KS_Multi_key,
    KC(0x0f),		KS_greater,	KS_braceright,
    KC(0x1e),		KS_1,		KS_plus,	KS_exclam,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_asterisk,	KS_numbersign,
    KC(0x21),		KS_4,		KS_ccedilla,	KS_cent,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,	KS_paragraph,
    KC(0x24),		KS_7,		KS_slash,	KS_bar,
    KC(0x25),		KS_8,		KS_parenleft,	KS_degree,
    KC(0x26),		KS_9,		KS_parenright,	KS_backslash,
    KC(0x27),		KS_0,		KS_equal,	KS_asciicircum,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_grave,
    KC(0x29),		KS_dead_circumflex,KS_dead_grave,
    KC(0x2a),		KS_dollar,	KS_dead_tilde,	KS_sterling,
    KC(0x3b),		KS_z,
    KC(0x40),		KS_udiaeresis,	KS_egrave,
    KC(0x41),		KS_dead_diaeresis,KS_dead_acute,
    KC(0x43),		KS_Mode_switch,
    KC(0x4c),		KS_Caps_Lock,
    KC(0x56),		KS_odiaeresis,	KS_eacute,
    KC(0x57),		KS_adiaeresis,	KS_agrave,
    KC(0x58),		KS_less,	KS_braceleft,
    KC(0x64),		KS_y,
    KC(0x6a),		KS_m,		KS_M,		KS_mu,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x77),		KS_Control_L,
    KC(0x7c),		KS_bracketright,KS_bracketleft,	KS_backslash,
};

/* 02d Swiss-German type 5 keyboard */
const keysym_t sunkbd5_keydesc_sg[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1e),		KS_1,		KS_plus,	KS_bar,
    KC(0x1f),		KS_2,		KS_quotedbl,	KS_at,
    KC(0x20),		KS_3,		KS_asterisk,	KS_numbersign,
    KC(0x21),		KS_4,		KS_ccedilla,	KS_asciicircum,
    KC(0x22),		KS_5,		KS_percent,	KS_asciitilde,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_slash,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,
    KC(0x27),		KS_0,		KS_equal,	KS_grave,
    KC(0x28),		KS_apostrophe,	KS_question,	KS_dead_acute,
    KC(0x29),		KS_dead_circumflex,KS_dead_grave,KS_dead_tilde,
    KC(0x2a),		KS_dollar,	KS_degree,
    KC(0x3b),		KS_z,
    KC(0x40),		KS_udiaeresis,	KS_egrave,	KS_bracketleft,
    KC(0x41),		KS_dead_diaeresis,KS_exclam,	KS_bracketright,
    KC(0x56),		KS_odiaeresis,	KS_eacute,
    KC(0x57),		KS_adiaeresis,	KS_agrave,	KS_braceleft,
    KC(0x58),		KS_dollar,	KS_sterling,	KS_braceright,
    KC(0x64),		KS_y,
    KC(0x6b),		KS_comma,	KS_semicolon,
    KC(0x6c),		KS_period,	KS_colon,
    KC(0x6d),		KS_minus,	KS_underscore,
    KC(0x7c),		KS_less,	KS_greater,	KS_backslash,
};

/* 00e UK English type 4 keyboard */
const keysym_t sunkbd_keydesc_uk[] = {
    KC(0x1e),		KS_1,		KS_exclam,	KS_bar,
    KC(0x21),		KS_3,		KS_sterling,	KS_numbersign,
    KC(0x28),		KS_minus,	KS_underscore,	KS_notsign,
    KC(0x43),		KS_Mode_switch,
};

/* 02e UK English type 5 keyboard */
const keysym_t sunkbd5_keydesc_uk[] = {
    KC(0x0d),		KS_Mode_switch,
    KC(0x1f),		KS_2,		KS_quotedbl,
    KC(0x20),		KS_3,		KS_sterling,
    KC(0x2a),		KS_grave,	KS_notsign,	KS_brokenbar,
    KC(0x57),		KS_apostrophe,	KS_at,
    KC(0x58),		KS_numbersign,	KS_asciitilde,
    KC(0x7c),		KS_backslash,	KS_bar,
};

/* 031 Japan type 5 keyboard */
const keysym_t sunkbd5_keydesc_jp[] = {
    KC(0x1f),		KS_2,		KS_quotedbl,
    KC(0x23),		KS_6,		KS_ampersand,
    KC(0x24),		KS_7,		KS_apostrophe,
    KC(0x25),		KS_8,		KS_parenleft,
    KC(0x26),		KS_9,		KS_parenright,
    KC(0x27),		KS_0,
    KC(0x28),		KS_minus,	KS_equal,
    KC(0x29),		KS_asciicircum,	KS_asciitilde,
    KC(0x2a),		KS_yen,		KS_bar,
    KC(0x40),		KS_at,		KS_grave,
    KC(0x41),		KS_bracketleft,	KS_braceleft,
    KC(0x56),		KS_semicolon,	KS_plus,
    KC(0x57),		KS_colon,	KS_asterisk,
    KC(0x58),		KS_bracketright,KS_braceright,
    KC(0x7c),		KS_backslash,	KS_underscore,
};

a238 1
/* Supported type 4 keyboard layouts */
a240 11
	KBD_MAP(KB_BE,			KB_US,	sunkbd_keydesc_befr),
	KBD_MAP(KB_DE,			KB_US,	sunkbd_keydesc_de),
	KBD_MAP(KB_DK,			KB_US,	sunkbd_keydesc_dk),
	KBD_MAP(KB_ES,			KB_US,	sunkbd_keydesc_es),
	KBD_MAP(KB_FR,			KB_US,	sunkbd_keydesc_befr),
	KBD_MAP(KB_IT,			KB_US,	sunkbd_keydesc_it),
	KBD_MAP(KB_NL,			KB_US,	sunkbd_keydesc_nl),
	KBD_MAP(KB_NO,			KB_US,	sunkbd_keydesc_no),
	KBD_MAP(KB_PT,			KB_US,	sunkbd_keydesc_pt),
	KBD_MAP(KB_SF,			KB_US,	sunkbd_keydesc_sf),
	KBD_MAP(KB_SG,			KB_US,	sunkbd_keydesc_sg),
a242 1
	KBD_MAP(KB_UK,			KB_US,	sunkbd_keydesc_uk),
a245 1
/* Supported type 5 keyboard layouts */
a247 11
	KBD_MAP(KB_DE,			KB_US,	sunkbd5_keydesc_de),
	KBD_MAP(KB_DK,			KB_US,	sunkbd5_keydesc_dk),
	KBD_MAP(KB_ES,			KB_US,	sunkbd5_keydesc_es),
	KBD_MAP(KB_FR,			KB_US,	sunkbd5_keydesc_fr),
	KBD_MAP(KB_IT,			KB_US,	sunkbd5_keydesc_it),
	KBD_MAP(KB_JP,			KB_US,	sunkbd5_keydesc_jp),
	KBD_MAP(KB_NL,			KB_US,	sunkbd5_keydesc_nl),
	KBD_MAP(KB_NO,			KB_US,	sunkbd5_keydesc_no),
	KBD_MAP(KB_PT,			KB_US,	sunkbd5_keydesc_pt),
	KBD_MAP(KB_SF,			KB_US,	sunkbd5_keydesc_sf),
	KBD_MAP(KB_SG,			KB_US,	sunkbd5_keydesc_sg),
a249 1
	KBD_MAP(KB_UK,			KB_US,	sunkbd5_keydesc_uk),
a250 115
};

/*
 * Keyboard layout to ID table
 * References:
 *	Sun Type 5 Keyboard Supplement Installation Guide, May 1992
 *	http://docs.sun.com/db/doc/806-6642/6jfipqu57?a=view
 *	http://jp.sunsolve.sun.com/handbook_pub/Systems/SSVygr/INPUT_Compact1_Keyboard.html
 */
const int sunkbd_layouts[MAXSUNLAYOUT] = {
	/* Type 4 layouts */
	KB_US,	/* 000 USA */
	KB_US,	/* 001 same as 000 */
	KB_BE,	/* 002 Belgium/French */
	-1,	/* 003 Canada */
	KB_DK,	/* 004 Denmark */
	KB_DE,	/* 005 Germany */
	KB_IT,	/* 006 Italy */
	KB_NL,	/* 007 The Netherlands */
	KB_NO,	/* 008 Norway */
	KB_PT,	/* 009 Portugal */
	KB_ES,	/* 00a Latin America/Spanish */
	KB_SV,	/* 00b Sweden */
	KB_SF,	/* 00c Switzerland/French */
	KB_SG,	/* 00d Switzerland/German */
	KB_UK,	/* 00e Great Britain */
	-1,	/* 00f unaffected */
	-1,	/* 010 Korea */
	-1,	/* 011 Taiwan */
	-1,	/* 012 unaffected */
	-1,	/* 013 unaffected */
	-1,	/* 014 VT220 */
	-1,	/* 015 VT220 Switzerland/French */
	-1,	/* 016 VT220 Switzerland/German */
	-1,	/* 017 VT220 Switzerland/Italian */
	-1,	/* 018 unaffected */
	-1,	/* 019 Belgium */
	-1,	/* 01a unaffected */
	-1,	/* 01b unaffected */
	-1,	/* 01c unaffected */
	-1,	/* 01d unaffected */
	-1,	/* 01e unaffected */
	-1,	/* 01f unaffected */
	-1,	/* 020 Japan */

	/* Type 5 layouts */
	KB_US,	/* 021 USA */
	KB_US,	/* 022 UNIX */
	KB_FR,	/* 023 France */
	KB_DK,	/* 024 Denmark */
	KB_DE,	/* 025 Germany */
	KB_IT,	/* 026 Italy */
	KB_NL,	/* 027 The Netherlands */
	KB_NO,	/* 028 Norway */
	KB_PT,	/* 029 Portugal */
	KB_ES,	/* 02a Spain */
	KB_SV,	/* 02b Sweden */
	KB_SF,	/* 02c Switzerland/French */
	KB_SG,	/* 02d Switzerland/German */
	KB_UK,	/* 02e Great Britain */
	-1,	/* 02f Korea */
	-1,	/* 030 Taiwan */
	KB_JP,	/* 031 Japan */
	-1,	/* 032 Canada/French */
	-1,	/* 033 Hungary */
	-1,	/* 034 Poland */
	-1,	/* 035 Czech */
	-1,	/* 036 Russia */
	-1,	/* 037 Latvia */
	-1,	/* 038 Turkey-Q5 */
	-1,	/* 039 Greece */
	-1,	/* 03a Arabic */
	-1,	/* 03b Lithuania */
	-1,	/* 03c Belgium */
	-1,	/* 03d unaffected */
	-1,	/* 03e Turkey-F5 */
	-1,	/* 03f Canada/French */

	/* Not affected range */
	-1,	/* 040 */
	-1,	/* 041 */
	-1,	/* 042 */
	-1,	/* 043 */
	-1,	/* 044 */
	-1,	/* 045 */
	-1,	/* 046 */
	-1,	/* 047 */
	-1,	/* 048 */
	-1,	/* 049 */
	-1,	/* 04a */
	-1,	/* 04b */
	-1,	/* 04c */
	-1,	/* 04d */
	-1,	/* 04e */
	-1,	/* 04f */

	/* ``Compact-1'' layouts */
	KB_US,	/* 050 USA */
	KB_US,	/* 051 UNIX */
	KB_FR,	/* 052 France */
	KB_DK,	/* 053 Denmark */
	KB_DE,	/* 054 Germany */
	KB_IT,	/* 055 Italy */
	KB_NL,	/* 056 The Netherlands */
	KB_NO,	/* 057 Norway */
	KB_PT,	/* 058 Portugal */
	KB_ES,	/* 059 Spain */
	KB_SV,	/* 05a Sweden */
	KB_SF,	/* 05b Switzerland/French */
	KB_SG,	/* 05c Switzerland/German */
	KB_UK,	/* 05d Great Britain */
	-1,	/* 05e Korea */
	-1,	/* 05f Taiwan */
	KB_JP,	/* 060 Japan */
	-1,	/* 061 Canada/French */
@


