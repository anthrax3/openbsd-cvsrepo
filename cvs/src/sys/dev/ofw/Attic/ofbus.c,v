head	1.15;
access;
symbols
	OPENBSD_4_1:1.14.0.10
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.8
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.6
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.4
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.2
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.12.0.8
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.12
	OPENBSD_3_3:1.12.0.6
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.4
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.12
	UBC:1.11.0.4
	UBC_BASE:1.11
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.4
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	SMP:1.7.0.2
	SMP_BASE:1.7
	kame_19991208:1.6
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.4
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.2
	OPENBSD_2_1_BASE:1.1.1.1
	powerpc_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2007.06.01.23.14.07;	author deraadt;	state dead;
branches;
next	1.14;

1.14
date	2004.11.29.12.50.05;	author jsg;	state Exp;
branches;
next	1.13;

1.13
date	2003.10.31.04.08.10;	author drahn;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.14.01.26.58;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.24.14.36.31;	author drahn;	state Exp;
branches
	1.11.4.1;
next	1.10;

1.10
date	2001.08.21.07.13.46;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2000.10.16.00.18.01;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.31.06.06.28;	author rahnds;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.15.17.17.45;	author rahnds;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	99.10.28.04.25.25;	author rahnds;	state Exp;
branches;
next	1.5;

1.5
date	98.09.20.23.03.03;	author rahnds;	state Exp;
branches;
next	1.4;

1.4
date	98.09.09.04.25.52;	author rahnds;	state Exp;
branches;
next	1.3;

1.3
date	98.08.22.18.00.34;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	97.11.07.08.07.20;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.12.23.00.32.57;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.23.00.32.57;	author rahnds;	state Exp;
branches;
next	;

1.7.2.1
date	2001.05.14.22.25.30;	author niklas;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2001.10.31.03.22.44;	author nate;	state Exp;
branches;
next	1.7.2.3;

1.7.2.3
date	2002.03.28.15.38.28;	author niklas;	state Exp;
branches;
next	1.7.2.4;

1.7.2.4
date	2004.02.19.10.56.25;	author niklas;	state Exp;
branches;
next	;

1.11.4.1
date	2002.06.11.03.42.24;	author art;	state Exp;
branches;
next	;


desc
@@


1.15
log
@remove ofw devices which we don't use; that way of mixing devices is crazy
(means i also don not have to fix the daddr_t problems)
ok miod
@
text
@/*	$OpenBSD: ofbus.c,v 1.14 2004/11/29 12:50:05 jsg Exp $	*/
/*	$NetBSD: ofbus.c,v 1.3 1996/10/13 01:38:11 christos Exp $	*/

/*
 * Copyright (C) 1995, 1996 Wolfgang Solfrank.
 * Copyright (C) 1995, 1996 TooLs GmbH.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/systm.h>

#include <machine/autoconf.h>
#include <dev/ofw/openfirm.h>

/* a bit of a hack to prevent conflicts between ofdisk and sd/wd */
#include "sd.h"

extern void systype(char *);

int ofrprobe(struct device *, void *, void *);
void ofrattach(struct device *, struct device *, void *);
int ofbprobe(struct device *, void *, void *);
void ofbattach(struct device *, struct device *, void *);
static int ofbprint(void *, const char *);

struct cfattach ofbus_ca = {
	sizeof(struct device), ofbprobe, ofbattach
};

struct cfdriver ofbus_cd = {
	NULL, "ofbus", DV_DULL
};

struct cfattach ofroot_ca = {
	sizeof(struct device), ofrprobe, ofrattach
};
 
struct cfdriver ofroot_cd = {
	NULL, "ofroot", DV_DULL
};

static int
ofbprint(void *aux, const char *name)
{
	struct ofprobe *ofp = aux;
	char child[64];
	int l;
	
	if ((l = OF_getprop(ofp->phandle, "name", child, sizeof child - 1)) < 0)
		panic("device without name?");
	if (l >= sizeof child)
		l = sizeof child - 1;
	child[l] = 0;
	
	if (name) {
		/* Dont print anything here, be quiet
		printf("%s at %s", child, name);
		return UNCONF;
		*/
		return QUIET;
	} else {
		printf(" (%s)", child);
	return QUIET;
	}
}

int
ofrprobe(struct device *parent, void *cf, void *aux)
{
	struct confargs *ca = aux;
	
	if (strcmp(ca->ca_name, ofroot_cd.cd_name) != 0)
		return (0);

	return 1; 
}
void
ofrattach(struct device *parent, struct device *dev, void *aux)
{
	int child;
	char name[64];
	struct ofprobe *ofp = aux;
	struct ofprobe probe;
	int node;
#ifdef HAVE_SYSTYPE
	char ofname[64];
	int l;
#endif
	
        if (!(node = OF_peer(0)))
                panic("No PROM root");
        probe.phandle = node;
	ofp = &probe;

	ofbprint(ofp, 0);
	printf("\n");

#ifdef HAVE_SYSTYPE
	if ((l = OF_getprop(ofp->phandle, "model", ofname, sizeof ofname - 1)) < 0)
	{
		/* no system name? */
	} else {
		if (l >= sizeof ofname)
			l = sizeof ofname - 1;
		ofname[l] = 0;
		systype(ofname);
	}
#endif
	ofw_intr_establish();
		

	for (child = OF_child(ofp->phandle); child; child = OF_peer(child)) {
		/*
		 * This is a hack to skip all the entries in the tree
		 * that aren't devices (packages, openfirmware etc.).
		 */
		if (OF_getprop(child, "device_type", name, sizeof name) < 0)
			continue;
		probe.phandle = child;
		probe.unit = 0;
		config_found(dev, &probe, ofbprint);
	}
}
int
ofbprobe(struct device *parent, void *cf, void *aux)
{
	struct ofprobe *ofp = aux;
	
	if (!OF_child(ofp->phandle))
		return 0;
	return 1;
}

void
ofbattach(struct device *parent, struct device *dev, void *aux)
{
	int child;
	char name[20];
	struct ofprobe *ofp = aux;
	struct ofprobe probe;
	int units;
	
	if (!parent)
		ofbprint(aux, 0);
		
	printf("\n");

	/*
	 * This is a hack to make the probe work on the scsi (and ide) bus.
	 * YES, I THINK IT IS A BUG IN THE OPENFIRMWARE TO NOT PROBE ALL
	 * DEVICES ON THESE BUSSES.
	 */
	units = 1;
	if (OF_getprop(ofp->phandle, "name", name, sizeof name) > 0) {
		if (!strcmp(name, "scsi")) {
#if NSD > 0
			units = 0; /* if sd driver in kernel, dont use ofw */
#else
			units = 7; /* What about wide or hostid != 7?	XXX */
#endif
		} else if (!strcmp(name, "ide")) {
#if NSD > 0
			units = 0; /* if sd? driver in kernel, dont use ofw */
#else 
			units = 2;
#endif

		}
	}
	for (child = OF_child(ofp->phandle); child; child = OF_peer(child)) {
		/*
		 * This is a hack to skip all the entries in the tree
		 * that aren't devices (packages, openfirmware etc.).
		 */
		if (OF_getprop(child, "device_type", name, sizeof name) < 0)
			continue;
		probe.phandle = child;
		for (probe.unit = 0; probe.unit < units; probe.unit++)
			config_found(dev, &probe, ofbprint);
	}
}

/*
 * Name matching routine for OpenFirmware
 */
int
ofnmmatch(char *cp1, char *cp2)
{
	int i;
	
	for (i = 0; *cp2; i++)
		if (*cp1++ != *cp2++)
			return 0;
	return i;
}
@


1.14
log
@knf/ansi. No binary change.
ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ofbus.c,v 1.13 2003/10/31 04:08:10 drahn Exp $	*/
@


1.13
log
@cleanup some OF bits, macppc specific bits in ofbus.c and with broken
firmware OF_exit() can return.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofbus.c,v 1.12.10.1 2003/10/10 17:04:17 drahn Exp $	*/
d71 1
a71 3
ofbprint(aux, name)
	void *aux;
	const char *name;
d96 1
a96 3
ofrprobe(parent, cf, aux)
	struct device *parent;
	void *cf, *aux;
d106 1
a106 3
ofrattach(parent, dev, aux)
	struct device *parent, *dev;
	void *aux;
d153 1
a153 3
ofbprobe(parent, cf, aux)
	struct device *parent;
	void *cf, *aux;
d163 1
a163 3
ofbattach(parent, dev, aux)
	struct device *parent, *dev;
	void *aux;
d215 1
a215 2
ofnmmatch(cp1, cp2)
	char *cp1, *cp2;
@


1.12
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ofbus.c,v 1.11 2001/08/24 14:36:31 drahn Exp $	*/
a169 3
#ifdef __powerpc__
void uni_n_config(int);
#endif /* __powerpc__ */
a205 4
#ifdef __powerpc__
		} else if (!strcmp(name, "uni-n")) {
			uni_n_config(ofp->phandle);
#endif /* __powerpc__ */
@


1.11
log
@Compile cleanup, systype is not currently used, so ifdef it.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofbus.c,v 1.10 2001/08/21 07:13:46 matthieu Exp $	*/
d48 5
a52 5
int ofrprobe __P((struct device *, void *, void *));
void ofrattach __P((struct device *, struct device *, void *));
int ofbprobe __P((struct device *, void *, void *));
void ofbattach __P((struct device *, struct device *, void *));
static int ofbprint __P((void *, const char *));
@


1.11.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ofbus.c,v 1.11 2001/08/24 14:36:31 drahn Exp $	*/
d48 5
a52 5
int ofrprobe(struct device *, void *, void *);
void ofrattach(struct device *, struct device *, void *);
int ofbprobe(struct device *, void *, void *);
void ofbattach(struct device *, struct device *, void *);
static int ofbprint(void *, const char *);
@


1.10
log
@Remove gcc warnings. Ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ofbus.c,v 1.9 2000/10/16 00:18:01 drahn Exp $	*/
d36 1
d119 1
d122 1
d132 1
d142 1
@


1.9
log
@configuration changes to enable the uni-north memory controller to enable
the ethernet pci bus. Allows the gm ethernet controller to configure.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofbus.c,v 1.9 2000/10/16 00:15:22 drahn Exp $	*/
d37 1
d45 2
a100 1
	int node;
a116 1
	int units;
@


1.8
log
@Quiet down the boot for powerpc, do not print openfirmware devices not
configured, still prints all of the buses...
@
text
@d1 1
a1 1
/*	$OpenBSD: ofbus.c,v 1.7 2000/01/15 17:17:45 rahnds Exp $	*/
d112 1
a112 1
	char name[5];
d164 3
d173 1
a173 1
	char name[5];
d202 5
@


1.7
log
@use model instead of name, more constistant with determining machine type.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofbus.c,v 1.6 1999/10/28 04:25:25 rahnds Exp $	*/
d81 2
a82 1
	if (name)
d84 4
a87 1
	else
d89 2
a90 1
	return UNCONF;
@


1.7.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: ofbus.c,v 1.9 2000/10/16 00:18:01 drahn Exp $	*/
d81 1
a81 2
	if (name) {
		/* Dont print anything here, be quiet
d83 1
a83 4
		return UNCONF;
		*/
		return QUIET;
	} else {
d85 1
a85 2
	return QUIET;
	}
d107 1
a107 1
	char name[64];
a158 3
#ifdef __powerpc__
void uni_n_config(int);
#endif /* __powerpc__ */
d165 1
a165 1
	char name[20];
a193 5

#ifdef __powerpc__
		} else if (!strcmp(name, "uni-n")) {
			uni_n_config(ofp->phandle);
#endif /* __powerpc__ */
@


1.7.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: ofbus.c,v 1.7.2.1 2001/05/14 22:25:30 niklas Exp $	*/
a35 1
#include <sys/systm.h>
a36 1
#include <sys/systm.h>
a43 2
extern void systype(char *);

d98 1
d115 1
a116 1
#ifdef HAVE_SYSTYPE
a118 1
#endif
a127 1
#ifdef HAVE_SYSTYPE
a136 1
#endif
@


1.7.2.3
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d48 5
a52 5
int ofrprobe(struct device *, void *, void *);
void ofrattach(struct device *, struct device *, void *);
int ofbprobe(struct device *, void *, void *);
void ofbattach(struct device *, struct device *, void *);
static int ofbprint(void *, const char *);
@


1.7.2.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d170 3
d209 4
@


1.6
log
@Sync up with some piece of reality, start supporting powerpc again.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofbus.c,v 1.5 1998/09/20 23:03:03 rahnds Exp $	*/
d123 1
a123 1
	if ((l = OF_getprop(ofp->phandle, "name", ofname, sizeof ofname - 1)) < 0)
@


1.5
log
@Change openfirmware to not try to configure a device on sd or wd
disks if those drivers are in the kernel. This allows the use
of ofdisk0 for floppy support. (until fd.c is supported).
@
text
@d1 1
a1 1
/*	$OpenBSD: ofbus.c,v 1.4 1998/09/09 04:25:52 rahnds Exp $	*/
a42 1
#include "wd.h"
d189 3
a191 3
#if NWD > 0
			units = 0; /* if wd driver in kernel, dont use ofw */
else 
@


1.4
log
@fall back to openfirmware interrupt processing, might be overridden
later by a real interrupt controller.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofbus.c,v 1.3 1998/08/22 18:00:34 rahnds Exp $	*/
d41 4
d183 4
a186 1
		if (!strcmp(name, "scsi"))
d188 5
a192 1
		else if (!strcmp(name, "ide"))
d194 2
@


1.3
log
@Allow ofroot to be child of mainbus or root.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofbus.c,v 1.2 1997/11/07 08:07:20 niklas Exp $	*/
d129 1
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: ofbus.c,v 1.3 1996/10/13 01:38:11 christos Exp $	*/
d38 1
d41 2
d56 1
a56 1
	sizeof(struct device), ofbprobe, ofbattach
d85 58
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@Import of Openfirmware device drivers for PowerPC port.
From NetBSD, with modification to get current time in kernel.
@
text
@@
