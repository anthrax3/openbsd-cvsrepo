head	1.15;
access;
symbols
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.4.0.18
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.16
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.14
	OPENBSD_2_8:1.4.0.12
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.10
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.8
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.2
	OPENBSD_2_1_BASE:1.1.1.1
	powerpc_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2007.06.01.23.14.07;	author deraadt;	state dead;
branches;
next	1.14;

1.14
date	2007.06.01.00.07.48;	author krw;	state Exp;
branches;
next	1.13;

1.13
date	2007.05.28.15.44.04;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2007.04.30.01.28.02;	author krw;	state Exp;
branches;
next	1.11;

1.11
date	2007.04.29.18.59.37;	author krw;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.15.20.20.41;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2004.11.29.12.50.05;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.15.02.45.47;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.06.18.54.20;	author ho;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.24.13.31.11;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.58;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.10.03.21.19.01;	author millert;	state Exp;
branches
	1.4.8.1
	1.4.18.1;
next	1.3;

1.3
date	97.11.07.08.07.22;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	97.08.08.21.47.04;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.12.23.00.32.56;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.23.00.32.56;	author rahnds;	state Exp;
branches;
next	;

1.4.8.1
date	2002.03.28.15.38.28;	author niklas;	state Exp;
branches;
next	1.4.8.2;

1.4.8.2
date	2003.03.28.00.38.20;	author niklas;	state Exp;
branches;
next	1.4.8.3;

1.4.8.3
date	2003.05.13.19.35.04;	author ho;	state Exp;
branches;
next	1.4.8.4;

1.4.8.4
date	2004.06.05.23.12.48;	author niklas;	state Exp;
branches;
next	;

1.4.18.1
date	2002.06.11.03.42.24;	author art;	state Exp;
branches;
next	1.4.18.2;

1.4.18.2
date	2003.05.19.22.20.35;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.15
log
@remove ofw devices which we don't use; that way of mixing devices is crazy
(means i also don not have to fix the daddr_t problems)
ok miod
@
text
@/*	$OpenBSD: ofdisk.c,v 1.14 2007/06/01 00:07:48 krw Exp $	*/
/*	$NetBSD: ofdisk.c,v 1.3 1996/10/13 01:38:13 christos Exp $	*/

/*
 * Copyright (C) 1995, 1996 Wolfgang Solfrank.
 * Copyright (C) 1995, 1996 TooLs GmbH.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/buf.h>
#include <sys/device.h>
#include <sys/disklabel.h>
#include <sys/disk.h>
#include <sys/fcntl.h>
#include <sys/ioctl.h>
#include <sys/stat.h>
#include <sys/systm.h>

#include <dev/ofw/openfirm.h>

struct ofd_softc {
	struct device sc_dev;
	int sc_phandle;
	int sc_unit;
	struct disk sc_dk;
	int sc_ihandle;
	u_long max_transfer;
	char sc_name[16];
};

static int ofdprobe(struct device *, void *, void *);
static void ofdattach(struct device *, struct device *, void *);

struct cfattach ofdisk_ca = {
	sizeof(struct ofd_softc), ofdprobe, ofdattach
};

struct cfdriver ofdisk_cd = {
	NULL, "ofdisk", DV_DISK
};

void ofdstrategy(struct buf *);

struct dkdriver ofdkdriver = { ofdstrategy };

static int
ofdprobe(struct device *parent, void *match, void *aux)
{
	struct ofprobe *ofp = aux;
	char type[8];
	int l;
	
	if ((l = OF_getprop(ofp->phandle, "device_type", type, sizeof type - 1)) < 0)
		return 0;
	if (l >= sizeof type)
		return 0;
	type[l] = 0;
	return !strcmp(type, "block");
}

static void
ofdattach(struct device *parent, struct device *self, void *aux)
{
	struct ofd_softc *of = (void *)self;
	struct ofprobe *ofp = aux;
	int l;
	
	of->sc_phandle = ofp->phandle;
	of->sc_unit = ofp->unit;
	of->sc_ihandle = 0;
	of->sc_dk.dk_driver = &ofdkdriver;
	of->sc_dk.dk_name = of->sc_name;
	strlcpy(of->sc_name, of->sc_dev.dv_xname, sizeof of->sc_name);
	disk_attach(&of->sc_dk);
	printf("\n");
}

int
ofdopen(dev_t dev, int flags, int fmt, struct proc *p)
{
	int unit = DISKUNIT(dev);
	struct ofd_softc *of;
	char path[256];
	struct disklabel *lp;
	int l;
	
	if (unit >= ofdisk_cd.cd_ndevs)
		return ENXIO;
	if (!(of = ofdisk_cd.cd_devs[unit]))
		return ENXIO;

	if (!of->sc_ihandle) {

		if ((l = OF_package_to_path(of->sc_phandle, path, sizeof path - 3)) < 0)
			return ENXIO;
		if (l >= sizeof path - 3)
			return ENXIO;
		path[l] = 0;

		/*
		 * This is for the benefit of SCSI/IDE disks that don't
		 * have all their childs in the device tree.
		 * YES, I DO THINK THIS IS A BUG IN OPENFIRMWARE!!!
		 * And yes, this is a very gross hack!					XXX
		 * See also ofscsi.c
		 */
		if (!strcmp(path + l - 4, "disk")) {
			path[l++] = '@@';
			path[l++] = '0' + of->sc_unit;
			path[l] = 0;
		}

		strlcat(path, ":0", sizeof path);

		if (!(of->sc_ihandle = OF_open(path)))
			return ENXIO;

		/*
		 * Try to get characteristics of the disk.
		 */
		of->max_transfer = OF_call_method_1("max-transfer", of->sc_ihandle, 0);
		if (of->max_transfer > MAXPHYS)
			of->max_transfer = MAXPHYS;
		
		lp = of->sc_dk.dk_label;
		bzero(lp, sizeof *lp);
		
		lp->d_secsize = OF_call_method_1("block-size", of->sc_ihandle, 0);
		if (lp->d_secsize == (u_int32_t)-1 || lp->d_secsize > MAXBSIZE)
			lp->d_secsize = DEV_BSIZE;
		
		lp->d_secperunit = OF_call_method_1("#blocks", of->sc_ihandle, 0);
		if (lp->d_secperunit == (u_int32_t)-1)
			lp->d_secperunit = 0x7fffffff;
		
		lp->d_secpercyl = 1;
		lp->d_nsectors = 1;
		lp->d_ntracks = 1;
		lp->d_ncylinders = lp->d_secperunit;
			
		readdisklabel(DISKLABELDEV(dev), ofdstrategy, lp,
		    of->sc_dk.dk_cpulabel, 0);
	}

	switch (fmt) {
	case S_IFCHR:
		of->sc_dk.dk_copenmask |= 1 << DISKPART(dev);
		break;
	case S_IFBLK:
		of->sc_dk.dk_bopenmask |= 1 << DISKPART(dev);
		break;
	}
	of->sc_dk.dk_openmask = of->sc_dk.dk_copenmask | of->sc_dk.dk_bopenmask;
	
	return 0;
}

int
ofdclose(dev_t dev, int flags, int fmt, struct proc *p)
{
	struct ofd_softc *of = ofdisk_cd.cd_devs[DISKUNIT(dev)];

	switch (fmt) {
	case S_IFCHR:
		of->sc_dk.dk_copenmask &= ~(1 << DISKPART(dev));
		break;
	case S_IFBLK:
		of->sc_dk.dk_bopenmask &= ~(1 << DISKPART(dev));
		break;
	}
	of->sc_dk.dk_openmask = of->sc_dk.dk_copenmask | of->sc_dk.dk_bopenmask;
	
#ifdef	FIREPOWERBUGS
	/*
	 * This is a hack to get the firmware to flush its buffers.
	 */
	OF_seek(of->sc_ihandle, 0);
#endif
	if (!of->sc_dk.dk_openmask) {
		OF_close(of->sc_ihandle);
		of->sc_ihandle = 0;
	}

	return 0;
}

void
ofdstrategy(struct buf *bp)
{
	struct ofd_softc *of = ofdisk_cd.cd_devs[DISKUNIT(bp->b_dev)];
	struct partition *p;
	u_quad_t off;
	int read;
	int (*OF_io)(int, void *, int);
	daddr_t blkno = bp->b_blkno;
	int s;
	
	bp->b_resid = 0;
	if (bp->b_bcount == 0)
		goto done;
	
	OF_io = bp->b_flags & B_READ ? OF_read : OF_write;

	if (DISKPART(bp->b_dev) != RAW_PART) {
		if (bounds_check_with_label(bp, of->sc_dk.dk_label,
		    of->sc_dk.dk_cpulabel, 0) <= 0) {
			bp->b_resid = bp->b_bcount;
			goto done;
		}
		p = &of->sc_dk.dk_label->d_partitions[DISKPART(bp->b_dev)];
		blkno = bp->b_blkno + p->p_offset;
	}
	
	disk_busy(&of->sc_dk);

	off = (u_quad_t)blkno * DEV_BSIZE;
	read = -1;
	do {
		if (OF_seek(of->sc_ihandle, off) < 0)
			break;
		read = OF_io(of->sc_ihandle, bp->b_data, bp->b_bcount);
	} while (read == -2);
	if (read < 0) {
		bp->b_error = EIO;
		bp->b_flags |= B_ERROR;
		bp->b_resid = bp->b_bcount;
	} else
		bp->b_resid = bp->b_bcount - read;

	disk_unbusy(&of->sc_dk, bp->b_bcount - bp->b_resid,
	    (bp->b_flags & B_READ));

done:
	s = splbio();
	biodone(bp);
	splx(s);
}

static void
ofminphys(struct buf *bp)
{
	struct ofd_softc *of = ofdisk_cd.cd_devs[DISKUNIT(bp->b_dev)];
	
	if (bp->b_bcount > of->max_transfer)
		bp->b_bcount = of->max_transfer;
}

int
ofdread(dev_t dev, struct uio *uio)
{
	return physio(ofdstrategy, NULL, dev, B_READ, ofminphys, uio);
}

int
ofdwrite(dev_t dev, struct uio *uio)
{
	return physio(ofdstrategy, NULL, dev, B_WRITE, ofminphys, uio);
}

int
ofdioctl(dev_t dev, u_long cmd, caddr_t data, int flag, struct proc *p)
{
	struct ofd_softc *of = ofdisk_cd.cd_devs[DISKUNIT(dev)];
	int error;
	
	switch (cmd) {
	case DIOCGDINFO:
		*(struct disklabel *)data = *of->sc_dk.dk_label;
		return 0;
		
	case DIOCGPART:
		((struct partinfo *)data)->disklab = of->sc_dk.dk_label;
		((struct partinfo *)data)->part =
			&of->sc_dk.dk_label->d_partitions[DISKPART(dev)];
		return 0;
		
	case DIOCWDINFO:
	case DIOCSDINFO:
		if ((flag & FWRITE) == 0)
			return EBADF;
		
		error = setdisklabel(of->sc_dk.dk_label,
				     (struct disklabel *)data, /*of->sc_dk.dk_openmask */0,
				     of->sc_dk.dk_cpulabel);
		if (error == 0 && cmd == DIOCWDINFO)
			error = writedisklabel(DISKLABELDEV(dev), ofdstrategy,
			    of->sc_dk.dk_label, of->sc_dk.dk_cpulabel);

		return error;
	default:
		return ENOTTY;
	}
}

int
ofddump(dev_t dev, daddr_t blkno, caddr_t va, size_t size)
{
	return EINVAL;
}

int
ofdsize(dev_t dev)
{
	struct ofd_softc *of;
	int part;
	int size;
	
	if (ofdopen(dev, 0, S_IFBLK) != 0)
		return -1;
	of = ofdisk_cd.cd_devs[DISKUNIT(dev)];
	part = DISKPART(dev);
	if (of->sc_dk.dk_label->d_partitions[part].p_fstype != FS_SWAP)
		size = -1;
	else
		size = of->sc_dk.dk_label->d_partitions[part].p_size;
	if (ofdclose(dev, 0, S_IFBLK) != 0)
		return -1;
	return size;
}
@


1.14
log
@Don't initialize d_partitions[RAW_DISK] just before calling
readdisklabel(), since all readdisklabel()'s do that already.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ofdisk.c,v 1.13 2007/05/28 15:44:04 miod Exp $	*/
@


1.13
log
@Art left a trailing quote as an easter egg in this file five years ago. Can
I have a cookie?
@
text
@d1 1
a1 1
/*	$OpenBSD: ofdisk.c,v 1.12 2007/04/30 01:28:02 krw Exp $	*/
a166 3
		lp->d_partitions[RAW_PART].p_offset = 0;
		lp->d_partitions[RAW_PART].p_size = lp->d_secperunit;
		
@


1.12
log
@Replace another expansion of DISKLABELDEV with the define itself.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofdisk.c,v 1.11 2007/04/29 18:59:37 krw Exp $	*/
d264 1
a264 1
	biodone(bp);'
@


1.11
log
@Replace expansions of DISKLABELDEV() with DISKLABELDEV(). Shorter, and
more consistant. No change to code.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ofdisk.c,v 1.10 2006/03/15 20:20:41 miod Exp $	*/
d170 2
a171 2
		readdisklabel(MAKEDISKDEV(major(dev), unit, RAW_PART),
		    ofdstrategy, lp, of->sc_dk.dk_cpulabel, 0);
@


1.10
log
@Nuke dk_establish(), no longer used.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofdisk.c,v 1.9 2004/11/29 12:50:05 jsg Exp $	*/
d315 2
a316 5
			error = writedisklabel(MAKEDISKDEV(major(dev),
							   DISKUNIT(dev), RAW_PART),
					       ofdstrategy,
					       of->sc_dk.dk_label,
					       of->sc_dk.dk_cpulabel);
@


1.9
log
@knf/ansi. No binary change.
ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ofdisk.c,v 1.8 2004/02/15 02:45:47 tedu Exp $	*/
a100 1
	dk_establish(&of->sc_dk, self);				/* XXX */
@


1.8
log
@new arg to disk_unbusy, to record separate read/write statistics.
looked at by various, testing henning@@ mcbride@@ dan weeks
mostly from netbsd via Pedro Martelletto <pbastos@@rdc.puc-rio.br>
@
text
@d1 1
a1 1
/*	$OpenBSD: ofdisk.c,v 1.7 2003/04/06 18:54:20 ho Exp $	*/
d73 1
a73 3
ofdprobe(parent, match, aux)
	struct device *parent;
	void *match, *aux;
d88 1
a88 3
ofdattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d106 1
a106 5
ofdopen(dev, flags, fmt, p)
	dev_t dev;
	int flags;
	int fmt;
	struct proc *p;
d189 1
a189 5
ofdclose(dev, flags, fmt, p)
	dev_t dev;
	int flags;
	int fmt;
	struct proc *p;
d218 1
a218 2
ofdstrategy(bp)
	struct buf *bp;
d270 1
a270 2
ofminphys(bp)
	struct buf *bp;
d279 1
a279 3
ofdread(dev, uio)
	dev_t dev;
	struct uio *uio;
d285 1
a285 3
ofdwrite(dev, uio)
	dev_t dev;
	struct uio *uio;
d291 1
a291 6
ofdioctl(dev, cmd, data, flag, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flag;
	struct proc *p;
d329 1
a329 5
ofddump(dev, blkno, va, size)
	dev_t dev;
	daddr_t blkno;
	caddr_t va;
	size_t size;
d335 1
a335 2
ofdsize(dev)
	dev_t dev;
@


1.7
log
@strcat/strcpy/sprintf cleanup. krw@@, anil@@ ok. art@@ tested sparc64.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofdisk.c,v 1.6 2002/05/24 13:31:11 art Exp $	*/
d273 2
a274 1
	disk_unbusy(&of->sc_dk, bp->b_bcount - bp->b_resid);
@


1.6
log
@More splbio around biodone protection.
In these drivers I'm probably using more paranoia than necessary.
If you really need to squeeze out the last drop of performance from the
fd driver, call me.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofdisk.c,v 1.5 2002/03/14 01:26:58 millert Exp $	*/
d103 1
a103 1
	strcpy(of->sc_name, of->sc_dev.dv_xname);
d148 1
a148 1
		strcat(path, ":0");
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ofdisk.c,v 1.4 1998/10/03 21:19:01 millert Exp $	*/
d239 1
d276 3
a278 1
	biodone(bp);
@


1.4
log
@Add a "spoofonly" argument to readdisklabel() which will be used to
implement an ioctl to get a spoofed label even for disks that have
a label on them.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofdisk.c,v 1.3 1997/11/07 08:07:22 niklas Exp $	*/
d57 2
a58 2
static int ofdprobe __P((struct device *, void *, void *));
static void ofdattach __P((struct device *, struct device *, void *));
d68 1
a68 1
void ofdstrategy __P((struct buf *));
@


1.4.18.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ofdisk.c,v 1.4 1998/10/03 21:19:01 millert Exp $	*/
d57 2
a58 2
static int ofdprobe(struct device *, void *, void *);
static void ofdattach(struct device *, struct device *, void *);
d68 1
a68 1
void ofdstrategy(struct buf *);
a238 1
	int s;
d275 1
a275 3
	s = splbio();
	biodone(bp);'
	splx(s);
@


1.4.18.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d103 1
a103 1
	strlcpy(of->sc_name, of->sc_dev.dv_xname, sizeof of->sc_name);
d148 1
a148 1
		strlcat(path, ":0", sizeof path);
@


1.4.8.1
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 2
a58 2
static int ofdprobe(struct device *, void *, void *);
static void ofdattach(struct device *, struct device *, void *);
d68 1
a68 1
void ofdstrategy(struct buf *);
@


1.4.8.2
log
@Sync the SMP branch with 3.3
@
text
@a238 1
	int s;
d275 1
a275 3
	s = splbio();
	biodone(bp);'
	splx(s);
@


1.4.8.3
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofdisk.c,v 1.4.8.2 2003/03/28 00:38:20 niklas Exp $	*/
d103 1
a103 1
	strlcpy(of->sc_name, of->sc_dev.dv_xname, sizeof of->sc_name);
d148 1
a148 1
		strlcat(path, ":0", sizeof path);
@


1.4.8.4
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d273 1
a273 2
	disk_unbusy(&of->sc_dk, bp->b_bcount - bp->b_resid,
	    (bp->b_flags & B_READ));
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: ofdisk.c,v 1.3 1996/10/13 01:38:13 christos Exp $	*/
d179 2
a180 2
		readdisklabel(MAKEDISKDEV(major(dev), unit, RAW_PART), ofdstrategy,
			      lp, of->sc_dk.dk_cpulabel);
@


1.2
log
@Change the bounds_check_with_label API to also take a cpu_disklabel
reference for making transferral of meta-information possible from
readdisklabel to bounds_check_with_label.  The first (and maybe only)
thing that will use this is the multi-disklabel-format code on the
alpha where the labelsector is passed via cpu_disklabel so the label
write-protection can work correctly no matter what label was found.

Also use a new macro DKBAD to get at the dkbad field of the cpu_disklabel
implementations that contain it.  This too is for multi-disklabel
architectures where the "bad" field can be inside a union.  Use this
macro as a means for a driver to check if an architecture supports
dkbad constructs.

Remove proto of bounds_check_with_label from all MD disklabel.h as it
is in sys/disklabel.h.

I have not been able to test the changes everywhere, if I break anything
I apologize, and promise to fix it as soon as I become aware of it.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d246 2
a247 1
		if (bounds_check_with_label(bp, of->sc_dk.dk_label, 0) <= 0) {
@


1.1.1.1
log
@Import of Openfirmware device drivers for PowerPC port.
From NetBSD, with modification to get current time in kernel.
@
text
@@
