head	1.14;
access;
symbols
	OPENBSD_4_1:1.13.0.10
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.8
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.6
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.4
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.2
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.12.0.4
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.8.0.4
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.2
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.2.0.8
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.4
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.2
	OPENBSD_2_1_BASE:1.1.1.1
	powerpc_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2007.06.01.23.14.07;	author deraadt;	state dead;
branches;
next	1.13;

1.13
date	2004.11.29.12.50.05;	author jsg;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.03.14.08.53;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.15.20.32.17;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2003.04.27.11.22.53;	author ho;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.58;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.24.14.26.46;	author drahn;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	2001.08.24.14.23.41;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.21.01.55.50;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.08.21.49.15;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.19.13.54.17;	author art;	state Exp;
branches;
next	1.3;

1.3
date	99.10.28.04.25.25;	author rahnds;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	97.11.07.08.07.21;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.12.23.00.32.57;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.23.00.32.57;	author rahnds;	state Exp;
branches;
next	;

1.3.2.1
date	2001.05.14.22.25.30;	author niklas;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2001.10.31.03.22.44;	author nate;	state Exp;
branches;
next	1.3.2.3;

1.3.2.3
date	2002.03.28.15.38.28;	author niklas;	state Exp;
branches;
next	1.3.2.4;

1.3.2.4
date	2003.05.13.19.35.04;	author ho;	state Exp;
branches;
next	1.3.2.5;

1.3.2.5
date	2004.02.19.10.56.25;	author niklas;	state Exp;
branches;
next	;

1.8.4.1
date	2002.06.11.03.42.24;	author art;	state Exp;
branches;
next	1.8.4.2;

1.8.4.2
date	2003.05.19.22.20.35;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.14
log
@remove ofw devices which we don't use; that way of mixing devices is crazy
(means i also don not have to fix the daddr_t problems)
ok miod
@
text
@/*	$OpenBSD: ofcons.c,v 1.13 2004/11/29 12:50:05 jsg Exp $	*/
/*	$NetBSD: ofcons.c,v 1.3 1996/10/13 01:38:11 christos Exp $	*/

/*
 * Copyright (C) 1995, 1996 Wolfgang Solfrank.
 * Copyright (C) 1995, 1996 TooLs GmbH.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/conf.h>
#include <sys/device.h>
#include <sys/proc.h>
#include <sys/systm.h>
#include <sys/tty.h>

#include <dev/cons.h>

#include <dev/ofw/openfirm.h>

#include <sys/stdarg.h>

struct ofc_softc {
	struct device of_dev;
	struct tty *of_tty;
	int of_flags;
	struct timeout of_tmo;
};
/* flags: */
#define	OFPOLL		1

#define	OFBURSTLEN	128	/* max number of bytes to write in one chunk */

static int stdin  = 0;
static int stdout = 0;

static int ofcmatch(struct device *, void *, void *);
static void ofcattach(struct device *, struct device *, void *);

struct cfattach ofcons_ca = {
	sizeof(struct ofc_softc), ofcmatch, ofcattach
};

struct cfdriver ofcons_cd = {
	NULL, "ofcons", DV_TTY
};

static int ofcprobe(void);

static int
ofcmatch(struct device *parent, void *match, void *aux)
{
	struct ofprobe *ofp = aux;
	
	if (!ofcprobe())
		return 0;
	return OF_instance_to_package(stdin) == ofp->phandle
		|| OF_instance_to_package(stdout) == ofp->phandle;
}

static void ofcstart(struct tty *);
static int ofcparam(struct tty *, struct termios *);
static void ofcpoll(void *);

static void
ofcattach(struct device *parent, struct device *self, void *aux)
{
	struct ofc_softc *sc = (void *)self;

	timeout_set(&sc->of_tmo, ofcpoll, sc);
	printf("\n");
}

void ofcstart(struct tty *);
int ofcparam(struct tty *, struct termios *);
void ofcpoll(void *);
int ofcopen(dev_t, int, int, struct proc *);
int ofcclose(dev_t, int, int, struct proc *);
int ofcread(dev_t, struct uio *, int);
int ofcwrite(dev_t, struct uio *, int);
int ofcioctl(dev_t, u_long, caddr_t, int, struct proc *);
struct tty * ofctty(dev_t);
void ofcstop(struct tty *, int);
void ofcstart(struct tty *);
int ofcparam(struct tty *, struct termios *);
void ofcpoll(void *);
void ofccnprobe(struct consdev *);
void ofccninit(struct consdev *);
int ofccngetc(dev_t);
void ofccnputc(dev_t, int);
void ofccnpollc(dev_t, int);
void ofprintf(char *, ...);

int
ofcopen(dev_t dev, int flag, int mode, struct proc *p)
{
	struct ofc_softc *sc;
	int unit = minor(dev);
	struct tty *tp;
	
	if (unit >= ofcons_cd.cd_ndevs)
		return ENXIO;
	sc = ofcons_cd.cd_devs[unit];
	if (!sc)
		return ENXIO;
	if (!(tp = sc->of_tty))
		sc->of_tty = tp = ttymalloc();
	tp->t_oproc = ofcstart;
	tp->t_param = ofcparam;
	tp->t_dev = dev;
	if (!(tp->t_state & TS_ISOPEN)) {
		tp->t_state |= TS_WOPEN;
		ttychars(tp);
		tp->t_iflag = TTYDEF_IFLAG;
		tp->t_oflag = TTYDEF_OFLAG;
		tp->t_cflag = TTYDEF_CFLAG;
		tp->t_lflag = TTYDEF_LFLAG;
		tp->t_ispeed = tp->t_ospeed = TTYDEF_SPEED;
		ofcparam(tp, &tp->t_termios);
		ttsetwater(tp);
	} else if ((tp->t_state&TS_XCLUDE) && suser(p, 0))
		return EBUSY;
	tp->t_state |= TS_CARR_ON;
	
	if (!(sc->of_flags & OFPOLL)) {
		sc->of_flags |= OFPOLL;
		timeout_add(&sc->of_tmo, 1);
	}

	return (*linesw[tp->t_line].l_open)(dev, tp);
}

int
ofcclose(dev_t dev, int flag, int mode, struct proc *p)
{
	struct ofc_softc *sc = ofcons_cd.cd_devs[minor(dev)];
	struct tty *tp = sc->of_tty;

	timeout_del(&sc->of_tmo);
	sc->of_flags &= ~OFPOLL;
	(*linesw[tp->t_line].l_close)(tp, flag);
	ttyclose(tp);
	return 0;
}

int
ofcread(dev_t dev, struct uio *uio, int flag)
{
	struct ofc_softc *sc = ofcons_cd.cd_devs[minor(dev)];
	struct tty *tp = sc->of_tty;
	
	return (*linesw[tp->t_line].l_read)(tp, uio, flag);
}

int
ofcwrite(dev_t dev, struct uio *uio, int flag)
{
	struct ofc_softc *sc = ofcons_cd.cd_devs[minor(dev)];
	struct tty *tp = sc->of_tty;
	
	return (*linesw[tp->t_line].l_write)(tp, uio, flag);
}

int
ofcioctl(dev_t dev, u_long cmd, caddr_t data, int flag, struct proc *p)
{
	struct ofc_softc *sc = ofcons_cd.cd_devs[minor(dev)];
	struct tty *tp = sc->of_tty;
	int error;
	
	if ((error = (*linesw[tp->t_line].l_ioctl)(tp, cmd, data, flag, p)) >= 0)
		return error;
	if ((error = ttioctl(tp, cmd, data, flag, p)) >= 0)
		return error;
	return ENOTTY;
}

struct tty *
ofctty(dev_t dev)
{
	struct ofc_softc *sc = ofcons_cd.cd_devs[minor(dev)];

	return sc->of_tty;
}

void
ofcstop(struct tty *tp, int flag)
{
}

void
ofcstart(struct tty *tp)
{
	struct clist *cl;
	int s, len;
	u_char buf[OFBURSTLEN];
	
	s = spltty();
	if (tp->t_state & (TS_TIMEOUT | TS_BUSY | TS_TTSTOP)) {
		splx(s);
		return;
	}
	tp->t_state |= TS_BUSY;
	splx(s);
	cl = &tp->t_outq;
	len = q_to_b(cl, buf, OFBURSTLEN);
	OF_write(stdout, buf, len);
	s = spltty();
	tp->t_state &= ~TS_BUSY;
	if (cl->c_cc) {
		tp->t_state |= TS_TIMEOUT;
		timeout_add(&tp->t_rstrt_to, 1);
	}
	if (cl->c_cc <= tp->t_lowat) {
		if (tp->t_state & TS_ASLEEP) {
			tp->t_state &= ~TS_ASLEEP;
			wakeup(cl);
		}
		selwakeup(&tp->t_wsel);
	}
	splx(s);
}

int
ofcparam(struct tty *tp, struct termios *t)
{
	tp->t_ispeed = t->c_ispeed;
	tp->t_ospeed = t->c_ospeed;
	tp->t_cflag = t->c_cflag;
	return 0;
}

void
ofcpoll(void *aux)
{
	struct ofc_softc *sc = aux;
	struct tty *tp = sc->of_tty;
	char ch;
	
	while (OF_read(stdin, &ch, 1) > 0) {
		if (tp && (tp->t_state & TS_ISOPEN))
			(*linesw[tp->t_line].l_rint)(ch, tp);
	}
	timeout_add(&sc->of_tmo, 1);
}

static int
ofcprobe(void)
{
	int chosen;

	if (stdin)
		return 1;
	if ((chosen = OF_finddevice("/chosen")) == -1)
		return 0;
	if (OF_getprop(chosen, "stdin", &stdin, sizeof stdin) != sizeof stdin
	    || OF_getprop(chosen, "stdout", &stdout, sizeof stdout) != sizeof stdout)
		return 0;
	return 1;
}

void
ofccnprobe(struct consdev *cd)
{
	int maj;

	if (!ofcprobe())
		return;

	for (maj = 0; maj < nchrdev; maj++)
		if (cdevsw[maj].d_open == ofcopen)
			break;
	cd->cn_dev = makedev(maj, 0);
	cd->cn_pri = CN_INTERNAL;
}

void
ofccninit(struct consdev *cd)
{
}

int
ofccngetc(dev_t dev)
{
	unsigned char ch;
	int l;
	
	while ((l = OF_read(stdin, &ch, 1)) != 1)
		if (l != -2)
			return -1;
	return ch;
}

void
ofccnputc(dev_t dev, int c)
{
	char ch = c;
	
/*#ifdef DEBUG */
#if 1
	if (stdout == 0) {
		ofcprobe();
	}
#endif
	OF_write(stdout, &ch, 1);
}

void
ofccnpollc(dev_t dev, int on)
{
	struct ofc_softc *sc = ofcons_cd.cd_devs[minor(dev)];
	
	if (!sc)
		return;
	if (on) {
		if (sc->of_flags & OFPOLL)
			timeout_del(&sc->of_tmo);
		sc->of_flags &= ~OFPOLL;
	} else {
		if (!(sc->of_flags & OFPOLL)) {
			sc->of_flags |= OFPOLL;
			timeout_add(&sc->of_tmo, 1);
		}
	}
}
static char buf[1024];

void
ofprintf(char *fmt, ...)
{
	char *c;
	va_list ap;

	va_start(ap, fmt);

	vsnprintf(buf, sizeof buf, fmt, ap);

	c = buf;
	while (*c != '\0') {
		ofccnputc(0, *c);
		if (*c == '\n')
			ofccnputc(0, '\r');
		c++;
	}

	va_end(ap);
}
@


1.13
log
@knf/ansi. No binary change.
ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ofcons.c,v 1.12 2004/01/03 14:08:53 espie Exp $	*/
@


1.12
log
@put an mi wrapper around stdarg.h/varargs.h. gcc3 moved stdarg/varargs macros
to built-ins, so eventually we will have one version of these files.
Special adjustments for the kernel to cope: machine/stdarg.h -> sys/stdarg.h
and machine/ansi.h needs to have a _BSD_VA_LIST_ for syslog* prototypes.
okay millert@@, drahn@@, miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofcons.c,v 1.11 2003/08/15 20:32:17 tedu Exp $	*/
d76 1
a76 3
ofcmatch(parent, match, aux)
	struct device *parent;
	void *match, *aux;
d91 1
a91 3
ofcattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d102 16
a117 16
int ofcopen(dev_t dev, int flag, int mode, struct proc *p);
int ofcclose(dev_t dev, int flag, int mode, struct proc *p);
int ofcread(dev_t dev, struct uio *uio, int flag);
int ofcwrite(dev_t dev, struct uio *uio, int flag);
int ofcioctl(dev_t dev, u_long cmd, caddr_t data, int flag, struct proc *p);
struct tty * ofctty(dev_t dev);
void ofcstop(struct tty *tp, int flag);
void ofcstart(struct tty *tp);
int ofcparam(struct tty *tp, struct termios *t);
void ofcpoll(void *aux);
void ofccnprobe(struct consdev *cd);
void ofccninit(struct consdev *cd);
int ofccngetc(dev_t dev);
void ofccnputc(dev_t dev, int c);
void ofccnpollc(dev_t dev, int on);
void ofprintf(char *fmt, ...);
d120 1
a120 4
ofcopen(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
d159 1
a159 4
ofcclose(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
d172 1
a172 4
ofcread(dev, uio, flag)
	dev_t dev;
	struct uio *uio;
	int flag;
d181 1
a181 4
ofcwrite(dev, uio, flag)
	dev_t dev;
	struct uio *uio;
	int flag;
d190 1
a190 6
ofcioctl(dev, cmd, data, flag, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flag;
	struct proc *p;
d204 1
a204 2
ofctty(dev)
	dev_t dev;
d212 1
a212 3
ofcstop(tp, flag)
	struct tty *tp;
	int flag;
d217 1
a217 2
ofcstart(tp)
	struct tty *tp;
d250 1
a250 3
ofcparam(tp, t)
	struct tty *tp;
	struct termios *t;
d259 1
a259 2
ofcpoll(aux)
	void *aux;
d273 1
a273 1
ofcprobe()
d288 1
a288 2
ofccnprobe(cd)
	struct consdev *cd;
d303 1
a303 2
ofccninit(cd)
	struct consdev *cd;
d308 1
a308 2
ofccngetc(dev)
	dev_t dev;
d320 1
a320 3
ofccnputc(dev, c)
	dev_t dev;
	int c;
d334 1
a334 3
ofccnpollc(dev, on)
	dev_t dev;
	int on;
@


1.11
log
@change arguments to suser.  suser now takes the process, and a flags
argument.  old cred only calls user suser_ucred.  this will allow future
work to more flexibly implement the idea of a root process.  looks like
something i saw in freebsd, but a little different.
use of suser_ucred vs suser in file system code should be looked at again,
for the moment semantics remain unchanged.
review and input from art@@  testing and further review miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ofcons.c,v 1.10 2003/04/27 11:22:53 ho Exp $	*/
d46 1
a46 1
#include <machine/stdarg.h>
@


1.10
log
@strcpy/sprintf cleanup of sys/dev. miod@@, deraadt@@ says to commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofcons.c,v 1.9 2002/03/14 01:26:58 millert Exp $	*/
d153 1
a153 1
	} else if ((tp->t_state&TS_XCLUDE) && suser(p->p_ucred, &p->p_acflag))
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ofcons.c,v 1.8 2001/08/24 14:26:46 drahn Exp $	*/
d396 1
a396 1
	vsprintf(buf, fmt, ap);
@


1.8
log
@make ofprint useable, do carriage return on newline,
increment pointer to printed buf, instead of printing same character.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofcons.c,v 1.7 2001/08/24 14:23:41 drahn Exp $	*/
d62 2
a63 2
static int ofcmatch __P((struct device *, void *, void *));
static void ofcattach __P((struct device *, struct device *, void *));
d73 1
a73 1
static int ofcprobe __P((void));
d88 3
a90 3
static void ofcstart __P((struct tty *));
static int ofcparam __P((struct tty *, struct termios *));
static void ofcpoll __P((void *));
d103 3
a105 3
void ofcstart __P((struct tty *));
int ofcparam __P((struct tty *, struct termios *));
void ofcpoll __P((void *));
@


1.8.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ofcons.c,v 1.8 2001/08/24 14:26:46 drahn Exp $	*/
d62 2
a63 2
static int ofcmatch(struct device *, void *, void *);
static void ofcattach(struct device *, struct device *, void *);
d73 1
a73 1
static int ofcprobe(void);
d88 3
a90 3
static void ofcstart(struct tty *);
static int ofcparam(struct tty *, struct termios *);
static void ofcpoll(void *);
d103 3
a105 3
void ofcstart(struct tty *);
int ofcparam(struct tty *, struct termios *);
void ofcpoll(void *);
@


1.8.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d396 1
a396 1
	vsnprintf(buf, sizeof buf, fmt, ap);
@


1.7
log
@Fix the typos in the timeout replacement.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofcons.c,v 1.7 2001/08/24 14:15:50 drahn Exp $	*/
d401 3
@


1.6
log
@Prototype correctly so this builds with -Wstrict-prototypes.
DEstatic some of the code,
add a ofprint() function for printf like debugging early on in boot (before console).
Not currently used, except in special debugging kernels.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofcons.c,v 1.5 2001/08/08 21:49:15 miod Exp $	*/
d97 1
a97 1
	struct ofc_softc *sc = (void *)self:
d297 1
a297 1
	timeout_add(&of->of_tmo, 1);
d377 1
a377 1
			timeout_del(&of->of_tmo);
d382 1
a382 1
			timeout_add(&of->of_tmo, 1);
@


1.5
log
@New timeouts, drahn@@ sez go ahead.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofcons.c,v 1.4 2000/07/19 13:54:17 art Exp $	*/
d46 2
d103 20
d240 1
a240 1
static void
d274 1
a274 1
static int
d285 1
a285 1
static void
d385 19
@


1.4
log
@Use t_rstrt_to for ttrstrt timeout.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofcons.c,v 1.3 1999/10/28 04:25:25 rahnds Exp $	*/
d50 1
d86 4
d95 3
a100 4
static void ofcstart __P((struct tty *));
static int ofcparam __P((struct tty *, struct termios *));
static void ofcpoll __P((void *));

d137 1
a137 1
		timeout(ofcpoll, sc, 1);
d152 1
a152 1
	untimeout(ofcpoll, sc);
d275 1
a275 1
	timeout(ofcpoll, sc, 1);
d355 1
a355 1
			untimeout(ofcpoll, sc);
d360 1
a360 1
			timeout(ofcpoll, sc, 1);
@


1.3
log
@Sync up with some piece of reality, start supporting powerpc again.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofcons.c,v 1.2 1997/11/07 08:07:21 niklas Exp $	*/
d236 1
a236 1
		timeout(ttrstrt, (void *)tp, 1);
@


1.3.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: ofcons.c,v 1.4 2000/07/19 13:54:17 art Exp $	*/
d236 1
a236 1
		timeout_add(&tp->t_rstrt_to, 1);
@


1.3.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: ofcons.c,v 1.3.2.1 2001/05/14 22:25:30 niklas Exp $	*/
a45 2
#include <machine/stdarg.h>

a49 1
	struct timeout of_tmo;
a84 4
static void ofcstart __P((struct tty *));
static int ofcparam __P((struct tty *, struct termios *));
static void ofcpoll __P((void *));

a89 3
	struct ofc_softc *sc = (void *)self;

	timeout_set(&sc->of_tmo, ofcpoll, sc);
d93 3
a95 19
void ofcstart __P((struct tty *));
int ofcparam __P((struct tty *, struct termios *));
void ofcpoll __P((void *));
int ofcopen(dev_t dev, int flag, int mode, struct proc *p);
int ofcclose(dev_t dev, int flag, int mode, struct proc *p);
int ofcread(dev_t dev, struct uio *uio, int flag);
int ofcwrite(dev_t dev, struct uio *uio, int flag);
int ofcioctl(dev_t dev, u_long cmd, caddr_t data, int flag, struct proc *p);
struct tty * ofctty(dev_t dev);
void ofcstop(struct tty *tp, int flag);
void ofcstart(struct tty *tp);
int ofcparam(struct tty *tp, struct termios *t);
void ofcpoll(void *aux);
void ofccnprobe(struct consdev *cd);
void ofccninit(struct consdev *cd);
int ofccngetc(dev_t dev);
void ofccnputc(dev_t dev, int c);
void ofccnpollc(dev_t dev, int on);
void ofprintf(char *fmt, ...);
d133 1
a133 1
		timeout_add(&sc->of_tmo, 1);
d148 1
a148 1
	timeout_del(&sc->of_tmo);
d214 1
a214 1
void
d248 1
a248 1
int
d259 1
a259 1
void
d271 1
a271 1
	timeout_add(&sc->of_tmo, 1);
d351 1
a351 1
			timeout_del(&sc->of_tmo);
d356 1
a356 1
			timeout_add(&sc->of_tmo, 1);
a358 22
}
static char buf[1024];

void
ofprintf(char *fmt, ...)
{
	char *c;
	va_list ap;

	va_start(ap, fmt);

	vsprintf(buf, fmt, ap);

	c = buf;
	while (*c != '\0') {
		ofccnputc(0, *c);
		if (*c == '\n')
			ofccnputc(0, '\r');
		c++;
	}

	va_end(ap);
@


1.3.2.3
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d62 2
a63 2
static int ofcmatch(struct device *, void *, void *);
static void ofcattach(struct device *, struct device *, void *);
d73 1
a73 1
static int ofcprobe(void);
d88 3
a90 3
static void ofcstart(struct tty *);
static int ofcparam(struct tty *, struct termios *);
static void ofcpoll(void *);
d103 3
a105 3
void ofcstart(struct tty *);
int ofcparam(struct tty *, struct termios *);
void ofcpoll(void *);
@


1.3.2.4
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofcons.c,v 1.3.2.3 2002/03/28 15:38:28 niklas Exp $	*/
d396 1
a396 1
	vsnprintf(buf, sizeof buf, fmt, ap);
@


1.3.2.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 1
a46 1
#include <sys/stdarg.h>
d153 1
a153 1
	} else if ((tp->t_state&TS_XCLUDE) && suser(p, 0))
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: ofcons.c,v 1.3 1996/10/13 01:38:11 christos Exp $	*/
d56 2
a57 1
static int stdin, stdout;
d331 6
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@Import of Openfirmware device drivers for PowerPC port.
From NetBSD, with modification to get current time in kernel.
@
text
@@
