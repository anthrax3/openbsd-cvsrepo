head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5;
locks; strict;
comment	@ * @;


1.5
date	2016.08.23.21.30.18;	author kettenis;	state Exp;
branches;
next	1.4;
commitid	0siJFqG3H7QCEZ7D;

1.4
date	2016.08.22.19.28.27;	author kettenis;	state Exp;
branches;
next	1.3;
commitid	2cFVfsyxItr0CsgQ;

1.3
date	2016.08.22.18.16.58;	author kettenis;	state Exp;
branches;
next	1.2;
commitid	goSPkuqjVzTiXFUR;

1.2
date	2016.08.22.11.23.54;	author kettenis;	state Exp;
branches;
next	1.1;
commitid	y5ADlQLzmx3BnVsJ;

1.1
date	2016.08.21.21.38.05;	author kettenis;	state Exp;
branches;
next	;
commitid	m5uJ5zANvBBfdHRi;


desc
@@


1.5
log
@Add functions to assert/deassert all reset signals for a device.
@
text
@/*	$OpenBSD: ofw_clock.h,v 1.4 2016/08/22 19:28:27 kettenis Exp $	*/
/*
 * Copyright (c) 2016 Mark Kettenis
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _DEV_OFW_CLOCK_H_
#define _DEV_OFW_CLOCK_H_

struct clock_device {
	int	cd_node;
	void	*cd_cookie;
	uint32_t (*cd_get_frequency)(void *, uint32_t *);
	int	(*cd_set_frequency)(void *, uint32_t *, uint32_t);
	void	(*cd_enable)(void *, uint32_t *, int);

	LIST_ENTRY(clock_device) cd_list;
	uint32_t cd_phandle;
	uint32_t cd_cells;
};

void	clock_register(struct clock_device *);

uint32_t clock_get_frequency(int, const char *);
uint32_t clock_get_frequency_idx(int, int);
int	clock_set_frequency(int, const char *, uint32_t);
void	clock_enable(int, const char *);
void	clock_enable_idx(int, int);
void	clock_disable(int, const char *);
void	clock_disable_idx(int, int);

static inline void
clock_enable_all(int node)
{
	clock_enable_idx(node, -1);
}

static inline void
clock_disable_all(int node)
{
	clock_disable_idx(node, -1);
}

struct reset_device {
	int	rd_node;
	void	*rd_cookie;
	void	(*rd_reset)(void *, uint32_t *, int);

	LIST_ENTRY(reset_device) rd_list;
	uint32_t rd_phandle;
	uint32_t rd_cells;
};

void	reset_register(struct reset_device *);

void	reset_assert(int, const char *);
void	reset_assert_idx(int, int);
void	reset_deassert(int, const char *);
void	reset_deassert_idx(int, int);

static inline void
reset_assert_all(int node)
{
	reset_assert_idx(node, -1);
}

static inline void
reset_deassert_all(int node)
{
	reset_deassert_idx(node, -1);
}

#endif /* _DEV_OFW_CLOCK_H_ */
@


1.4
log
@Add an API to set the clock frequency.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofw_clock.h,v 1.3 2016/08/22 18:16:58 kettenis Exp $	*/
d68 1
d70 13
@


1.3
log
@Add a reset signal API alongside the clock API.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofw_clock.h,v 1.2 2016/08/22 11:23:54 kettenis Exp $	*/
d25 1
d37 1
@


1.2
log
@Implement interfaces to disable clocks and add interfaces that enable or
disable all clocks for a device.  The latter interfaces are useful for
devices that have multiple clocks that don't have specific names/purposes
such as sxiahci(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: ofw_clock.h,v 1.1 2016/08/21 21:38:05 kettenis Exp $	*/
d52 15
@


1.1
log
@Add a minimal clock "framework".  Build it on armv7.

ok patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 14
@

