head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.26
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.28
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.24
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.14
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.22
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.20
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.18
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.16
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.12
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.10
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.8
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.8
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.4
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.5.0.10
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.8
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.6
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.4
	UBC:1.1.0.8
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.2;
locks; strict;
comment	@ * @;


1.8
date	2010.08.28.12.48.14;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2009.09.05.14.09.35;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.26.05.42.18;	author ray;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.08.17.18.05;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.27.22.17.49;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.28.22.10.03;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.27.02;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.18.04.32.44;	author nate;	state Exp;
branches
	1.1.4.1
	1.1.8.1;
next	;

1.1.4.1
date	2001.05.14.22.26.15;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2002.03.30.08.19.20;	author niklas;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2003.03.28.00.38.29;	author niklas;	state Exp;
branches;
next	;

1.1.8.1
date	2002.06.11.03.42.29;	author art;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2002.10.29.00.33.31;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@ansify function definitions, and constify a few arrays while there.
no functional change.
@
text
@/*	$OpenBSD: rasops15.c,v 1.7 2009/09/05 14:09:35 miod Exp $	*/
/*	$NetBSD: rasops15.c,v 1.7 2000/04/12 14:22:29 pk Exp $	*/

/*-
 * Copyright (c) 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Andrew Doran.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/time.h>

#include <dev/wscons/wsdisplayvar.h>
#include <dev/wscons/wsconsio.h>
#include <dev/rasops/rasops.h>

int 	rasops15_putchar(void *, int, int, u_int, long attr);
#ifndef RASOPS_SMALL
int 	rasops15_putchar8(void *, int, int, u_int, long attr);
int 	rasops15_putchar12(void *, int, int, u_int, long attr);
int 	rasops15_putchar16(void *, int, int, u_int, long attr);
void	rasops15_makestamp(struct rasops_info *, long);

/*
 * (2x2)x1 stamp for optimized character blitting
 */
static int32_t	stamp[32];
static long	stamp_attr;
static int	stamp_mutex;	/* XXX see note in readme */
#endif

/*
 * XXX this confuses the hell out of gcc2 (not egcs) which always insists
 * that the shift count is negative.
 *
 * offset = STAMP_SHIFT(fontbits, nibble #) & STAMP_MASK
 * destination int32_t[0] = STAMP_READ(offset)
 * destination int32_t[1] = STAMP_READ(offset + 4)
 */
#define STAMP_SHIFT(fb,n)	((n*4-3) >= 0 ? (fb)>>(n*4-3):(fb)<<-(n*4-3))
#define STAMP_MASK		(15 << 3)
#define STAMP_READ(o)		(*(int32_t *)((caddr_t)stamp + (o)))

/*
 * Initialize rasops_info struct for this colordepth.
 */
void
rasops15_init(struct rasops_info *ri)
{

	switch (ri->ri_font->fontwidth) {
#ifndef RASOPS_SMALL
	case 8:
		ri->ri_ops.putchar = rasops15_putchar8;
		break;

	case 12:
		ri->ri_ops.putchar = rasops15_putchar12;
		break;

	case 16:
		ri->ri_ops.putchar = rasops15_putchar16;
		break;
#endif	/* !RASOPS_SMALL */
	default:
		ri->ri_ops.putchar = rasops15_putchar;
		break;
	}

	if (ri->ri_rnum == 0) {
		ri->ri_rnum = 5;
		ri->ri_rpos = 0;
		ri->ri_gnum = 5 + (ri->ri_depth == 16);
		ri->ri_gpos = 5;
		ri->ri_bnum = 5;
		ri->ri_bpos = 10 + (ri->ri_depth == 16);
	}
}

/*
 * Paint a single character.
 */
int
rasops15_putchar(void *cookie, int row, int col, u_int uc, long attr)
{
	int fb, width, height, cnt, clr[2];
	struct rasops_info *ri;
	u_char *dp, *rp, *fr;

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	/* Catches 'row < 0' case too */
	if ((unsigned)row >= (unsigned)ri->ri_rows)
		return 0;

	if ((unsigned)col >= (unsigned)ri->ri_cols)
		return 0;
#endif

	rp = ri->ri_bits + row * ri->ri_yscale + col * ri->ri_xscale;
	height = ri->ri_font->fontheight;
	width = ri->ri_font->fontwidth;

	clr[1] = ri->ri_devcmap[((u_int)attr >> 24) & 0xf];
	clr[0] = ri->ri_devcmap[((u_int)attr >> 16) & 0xf];

	if (uc == ' ') {
		int16_t c = (int16_t)clr[0];
		while (height--) {
			dp = rp;
			rp += ri->ri_stride;

			for (cnt = width; cnt; cnt--) {
				*(int16_t *)dp = c;
				dp += 2;
			}
		}
	} else {
		uc -= ri->ri_font->firstchar;
		fr = (u_char *)ri->ri_font->data + uc * ri->ri_fontscale;

		while (height--) {
			dp = rp;
			fb = fr[3] | (fr[2] << 8) | (fr[1] << 16) | (fr[0] << 24);
			fr += ri->ri_font->stride;
			rp += ri->ri_stride;

			for (cnt = width; cnt; cnt--) {
				*(int16_t *)dp = (int16_t)clr[(fb >> 31) & 1];
				fb <<= 1;
				dp += 2;
			}
		}
	}

	/* Do underline */
	if ((attr & 1) != 0) {
		int16_t c = (int16_t)clr[1];
		rp -= ri->ri_stride << 1;

		while (width--) {
			*(int16_t *)rp = c;
			rp += 2;
		}
	}

	return 0;
}

#ifndef RASOPS_SMALL
/*
 * Recompute the (2x2)x1 blitting stamp.
 */
void
rasops15_makestamp(struct rasops_info *ri, long attr)
{
	int32_t fg, bg;
	int i;

	fg = ri->ri_devcmap[((u_int)attr >> 24) & 0xf] & 0xffff;
	bg = ri->ri_devcmap[((u_int)attr >> 16) & 0xf] & 0xffff;
	stamp_attr = attr;

	for (i = 0; i < 32; i += 2) {
#if BYTE_ORDER == LITTLE_ENDIAN
		stamp[i] = (i & 16 ? fg : bg);
		stamp[i] |= ((i & 8 ? fg : bg) << 16);
		stamp[i + 1] = (i & 4 ? fg : bg);
		stamp[i + 1] |= ((i & 2 ? fg : bg) << 16);
#else
		stamp[i + 1] = (i & 2 ? fg : bg);
		stamp[i + 1] |= ((i & 4 ? fg : bg) << 16);
		stamp[i] = (i & 8 ? fg : bg);
		stamp[i] |= ((i & 16 ? fg : bg) << 16);
#endif
	}
}

/*
 * Paint a single character. This is for 8-pixel wide fonts.
 */
int
rasops15_putchar8(void *cookie, int row, int col, u_int uc, long attr)
{
	struct rasops_info *ri;
	int height, so, fs;
	int32_t *rp;
	u_char *fr;

	/* Can't risk remaking the stamp if it's already in use */
	if (stamp_mutex++) {
		stamp_mutex--;
		return rasops15_putchar(cookie, row, col, uc, attr);
	}

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	if ((unsigned)row >= (unsigned)ri->ri_rows) {
		stamp_mutex--;
		return 0;
	}

	if ((unsigned)col >= (unsigned)ri->ri_cols) {
		stamp_mutex--;
		return 0;
	}
#endif

	/* Recompute stamp? */
	if (attr != stamp_attr)
		rasops15_makestamp(ri, attr);

	rp = (int32_t *)(ri->ri_bits + row*ri->ri_yscale + col*ri->ri_xscale);
	height = ri->ri_font->fontheight;

	if (uc == (u_int)-1) {
		int32_t c = stamp[0];
		while (height--) {
			rp[0] = rp[1] = rp[2] = rp[3] = c;
			DELTA(rp, ri->ri_stride, int32_t *);
		}
	} else {
		uc -= ri->ri_font->firstchar;
		fr = (u_char *)ri->ri_font->data + uc*ri->ri_fontscale;
		fs = ri->ri_font->stride;

		while (height--) {
			so = STAMP_SHIFT(fr[0], 1) & STAMP_MASK;
			rp[0] = STAMP_READ(so);
			rp[1] = STAMP_READ(so + 4);

			so = STAMP_SHIFT(fr[0], 0) & STAMP_MASK;
			rp[2] = STAMP_READ(so);
			rp[3] = STAMP_READ(so + 4);

			fr += fs;
			DELTA(rp, ri->ri_stride, int32_t *);
		}
	}

	/* Do underline */
	if ((attr & 1) != 0) {
		int32_t c = STAMP_READ(28);

		DELTA(rp, -(ri->ri_stride << 1), int32_t *);
		rp[0] = rp[1] = rp[2] = rp[3] = c;
	}

	stamp_mutex--;

	return 0;
}

/*
 * Paint a single character. This is for 12-pixel wide fonts.
 */
int
rasops15_putchar12(void *cookie, int row, int col, u_int uc, long attr)
{
	struct rasops_info *ri;
	int height, so, fs;
	int32_t *rp;
	u_char *fr;

	/* Can't risk remaking the stamp if it's already in use */
	if (stamp_mutex++) {
		stamp_mutex--;
		return rasops15_putchar(cookie, row, col, uc, attr);
	}

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	if ((unsigned)row >= (unsigned)ri->ri_rows) {
		stamp_mutex--;
		return 0;
	}

	if ((unsigned)col >= (unsigned)ri->ri_cols) {
		stamp_mutex--;
		return 0;
	}
#endif

	/* Recompute stamp? */
	if (attr != stamp_attr)
		rasops15_makestamp(ri, attr);

	rp = (int32_t *)(ri->ri_bits + row*ri->ri_yscale + col*ri->ri_xscale);
	height = ri->ri_font->fontheight;

	if (uc == (u_int)-1) {
		int32_t c = stamp[0];
		while (height--) {
			rp[0] = rp[1] = rp[2] = rp[3] = rp[4] = rp[5] = c;
			DELTA(rp, ri->ri_stride, int32_t *);
		}
	} else {
		uc -= ri->ri_font->firstchar;
		fr = (u_char *)ri->ri_font->data + uc*ri->ri_fontscale;
		fs = ri->ri_font->stride;

		while (height--) {
			so = STAMP_SHIFT(fr[0], 1) & STAMP_MASK;
			rp[0] = STAMP_READ(so);
			rp[1] = STAMP_READ(so + 4);

			so = STAMP_SHIFT(fr[0], 0) & STAMP_MASK;
			rp[2] = STAMP_READ(so);
			rp[3] = STAMP_READ(so + 4);

			so = STAMP_SHIFT(fr[1], 1) & STAMP_MASK;
			rp[4] = STAMP_READ(so);
			rp[5] = STAMP_READ(so + 4);

			fr += fs;
			DELTA(rp, ri->ri_stride, int32_t *);
		}
	}

	/* Do underline */
	if (attr & 1) {
		int32_t c = STAMP_READ(28);

		DELTA(rp, -(ri->ri_stride << 1), int32_t *);
		rp[0] = rp[1] = rp[2] = rp[3] = rp[4] = rp[5] = c;
	}

	stamp_mutex--;

	return 0;
}

/*
 * Paint a single character. This is for 16-pixel wide fonts.
 */
int
rasops15_putchar16(void *cookie, int row, int col, u_int uc, long attr)
{
	struct rasops_info *ri;
	int height, so, fs;
	int32_t *rp;
	u_char *fr;

	/* Can't risk remaking the stamp if it's already in use */
	if (stamp_mutex++) {
		stamp_mutex--;
		return rasops15_putchar(cookie, row, col, uc, attr);
	}

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	if ((unsigned)row >= (unsigned)ri->ri_rows) {
		stamp_mutex--;
		return 0;
	}

	if ((unsigned)col >= (unsigned)ri->ri_cols) {
		stamp_mutex--;
		return 0;
	}
#endif

	/* Recompute stamp? */
	if (attr != stamp_attr)
		rasops15_makestamp(ri, attr);

	rp = (int32_t *)(ri->ri_bits + row*ri->ri_yscale + col*ri->ri_xscale);
	height = ri->ri_font->fontheight;

	if (uc == (u_int)-1) {
		int32_t c = stamp[0];
		while (height--) {
			rp[0] = rp[1] = rp[2] = rp[3] =
			rp[4] = rp[5] = rp[6] = rp[7] = c;
			DELTA(rp, ri->ri_stride, int32_t *);
		}
	} else {
		uc -= ri->ri_font->firstchar;
		fr = (u_char *)ri->ri_font->data + uc*ri->ri_fontscale;
		fs = ri->ri_font->stride;

		while (height--) {
			so = STAMP_SHIFT(fr[0], 1) & STAMP_MASK;
			rp[0] = STAMP_READ(so);
			rp[1] = STAMP_READ(so + 4);

			so = STAMP_SHIFT(fr[0], 0) & STAMP_MASK;
			rp[2] = STAMP_READ(so);
			rp[3] = STAMP_READ(so + 4);

			so = STAMP_SHIFT(fr[1], 1) & STAMP_MASK;
			rp[4] = STAMP_READ(so);
			rp[5] = STAMP_READ(so + 4);

			so = STAMP_SHIFT(fr[1], 0) & STAMP_MASK;
			rp[6] = STAMP_READ(so);
			rp[7] = STAMP_READ(so + 4);

			DELTA(rp, ri->ri_stride, int32_t *);
			fr += fs;
		}
	}

	/* Do underline */
	if (attr & 1) {
		int32_t c = STAMP_READ(28);

		DELTA(rp, -(ri->ri_stride << 1), int32_t *);
		rp[0] = rp[1] = rp[2] = rp[3] =
		rp[4] = rp[5] = rp[6] = rp[7] = c;
	}

	stamp_mutex--;

	return 0;
}
#endif	/* !RASOPS_SMALL */
@


1.7
log
@Change the wsdisplay_emulops return types from void to int; emulops will now
return zero on success and nonzero on failure.
This commit only performs mechanical changes for the existing emulops to
always return zero.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops15.c,v 1.6 2008/06/26 05:42:18 ray Exp $	*/
d72 1
a72 2
rasops15_init(ri)
	struct rasops_info *ri;
d108 1
a108 5
rasops15_putchar(cookie, row, col, uc, attr)
	void *cookie;
	int row, col;
	u_int uc;
	long attr;
d180 1
a180 3
rasops15_makestamp(ri, attr)
	struct rasops_info *ri;
	long attr;
d208 1
a208 5
rasops15_putchar8(cookie, row, col, uc, attr)
	void *cookie;
	int row, col;
	u_int uc;
	long attr;
d284 1
a284 5
rasops15_putchar12(cookie, row, col, uc, attr)
	void *cookie;
	int row, col;
	u_int uc;
	long attr;
d364 1
a364 5
rasops15_putchar16(cookie, row, col, uc, attr)
	void *cookie;
	int row, col;
	u_int uc;
	long attr;
@


1.6
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops15.c,v 1.5 2006/01/08 17:18:05 miod Exp $	*/
d41 1
a41 1
void 	rasops15_putchar(void *, int, int, u_int, long attr);
d43 3
a45 3
void 	rasops15_putchar8(void *, int, int, u_int, long attr);
void 	rasops15_putchar12(void *, int, int, u_int, long attr);
void 	rasops15_putchar16(void *, int, int, u_int, long attr);
d108 1
a108 1
void
d124 1
a124 1
		return;
d127 1
a127 1
		return;
d176 2
d214 1
a214 1
void
d229 1
a229 2
		rasops15_putchar(cookie, row, col, uc, attr);
		return;
d237 1
a237 1
		return;
d242 1
a242 1
		return;
d287 2
d294 1
a294 1
void
d309 1
a309 2
		rasops15_putchar(cookie, row, col, uc, attr);
		return;
d317 1
a317 1
		return;
d322 1
a322 1
		return;
d371 2
d378 1
a378 1
void
d393 1
a393 2
		rasops15_putchar(cookie, row, col, uc, attr);
		return;
d401 1
a401 1
		return;
d406 1
a406 1
		return;
d461 2
@


1.5
log
@Fix stamp creation for big-endian systems. Makes mac68k happy at 16bpp.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops15.c,v 1.4 2002/07/27 22:17:49 miod Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.4
log
@Unstaticize functions, for my ddb sessions pleasure.
Plus it makes hangman more difficult.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops15.c,v 1.3 2002/05/28 22:10:03 fgsch Exp $	*/
d208 4
a211 4
		stamp[i] = (i & 2 ? fg : bg);
		stamp[i] |= ((i & 4 ? fg : bg) << 16);
		stamp[i + 1] = (i & 8 ? fg : bg);
		stamp[i + 1] |= ((i & 16 ? fg : bg) << 16);
@


1.3
log
@o spaces, tabs, spelling cleanup.
o remove unneeded headers.
o makes this to compile if RASOPS_SMALL is defined.
o makes rasops2 to compile.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops15.c,v 1.2 2002/03/14 01:27:02 millert Exp $	*/
d48 1
a48 1
static void 	rasops15_putchar(void *, int, int, u_int, long attr);
d50 4
a53 4
static void 	rasops15_putchar8(void *, int, int, u_int, long attr);
static void 	rasops15_putchar12(void *, int, int, u_int, long attr);
static void 	rasops15_putchar16(void *, int, int, u_int, long attr);
static void	rasops15_makestamp(struct rasops_info *, long);
d115 1
a115 1
static void
d189 1
a189 1
static void
d219 1
a219 1
static void
d298 1
a298 1
static void
d381 1
a381 1
static void
@


1.2
log
@First round of __P removal in sys
@
text
@d1 2
a2 2
/*	$OpenBSD: rasops15.c,v 1.1 2001/03/18 04:32:44 nate Exp $ */
/* 	$NetBSD: rasops15.c,v 1.7 2000/04/12 14:22:29 pk Exp $	*/
a39 4
#include <sys/cdefs.h>
//__KERNEL_RCSID(0, "$NetBSD: rasops15.c,v 1.7 2000/04/12 14:22:29 pk Exp $");

#include <sys/types.h>
a53 1
#endif
d61 1
d76 1
a76 1
 * Initalize rasops_info struct for this colordepth.
@


1.1
log
@Import rasops from NetBSD.  This gives improved performance for raster
operations.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d52 1
a52 1
static void 	rasops15_putchar __P((void *, int, int, u_int, long attr));
d54 4
a57 4
static void 	rasops15_putchar8 __P((void *, int, int, u_int, long attr));
static void 	rasops15_putchar12 __P((void *, int, int, u_int, long attr));
static void 	rasops15_putchar16 __P((void *, int, int, u_int, long attr));
static void	rasops15_makestamp __P((struct rasops_info *, long));
@


1.1.8.1
log
@Sync UBC branch to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: rasops15.c,v 1.7 2000/04/12 14:22:29 pk Exp $	*/
d40 4
d52 1
a52 1
static void 	rasops15_putchar(void *, int, int, u_int, long attr);
d54 5
a58 4
static void 	rasops15_putchar8(void *, int, int, u_int, long attr);
static void 	rasops15_putchar12(void *, int, int, u_int, long attr);
static void 	rasops15_putchar16(void *, int, int, u_int, long attr);
static void	rasops15_makestamp(struct rasops_info *, long);
a65 1
#endif
d80 1
a80 1
 * Initialize rasops_info struct for this colordepth.
@


1.1.8.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops15.c,v 1.1.8.1 2002/06/11 03:42:29 art Exp $	*/
d48 1
a48 1
void 	rasops15_putchar(void *, int, int, u_int, long attr);
d50 4
a53 4
void 	rasops15_putchar8(void *, int, int, u_int, long attr);
void 	rasops15_putchar12(void *, int, int, u_int, long attr);
void 	rasops15_putchar16(void *, int, int, u_int, long attr);
void	rasops15_makestamp(struct rasops_info *, long);
d115 1
a115 1
void
d189 1
a189 1
void
d219 1
a219 1
void
d298 1
a298 1
void
d381 1
a381 1
void
@


1.1.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops15.c,v 1.1 2001/03/18 04:32:44 nate Exp $ */
@


1.1.4.2
log
@Merge unpeeing cvs missed
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d52 1
a52 1
static void 	rasops15_putchar(void *, int, int, u_int, long attr);
d54 4
a57 4
static void 	rasops15_putchar8(void *, int, int, u_int, long attr);
static void 	rasops15_putchar12(void *, int, int, u_int, long attr);
static void 	rasops15_putchar16(void *, int, int, u_int, long attr);
static void	rasops15_makestamp(struct rasops_info *, long);
@


1.1.4.3
log
@Sync the SMP branch with 3.3
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: rasops15.c,v 1.7 2000/04/12 14:22:29 pk Exp $	*/
d40 4
d52 1
a52 1
void 	rasops15_putchar(void *, int, int, u_int, long attr);
d54 5
a58 4
void 	rasops15_putchar8(void *, int, int, u_int, long attr);
void 	rasops15_putchar12(void *, int, int, u_int, long attr);
void 	rasops15_putchar16(void *, int, int, u_int, long attr);
void	rasops15_makestamp(struct rasops_info *, long);
a65 1
#endif
d80 1
a80 1
 * Initialize rasops_info struct for this colordepth.
d119 1
a119 1
void
d193 1
a193 1
void
d223 1
a223 1
void
d302 1
a302 1
void
d385 1
a385 1
void
@


