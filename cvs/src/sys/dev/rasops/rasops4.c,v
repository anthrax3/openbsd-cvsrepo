head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.12
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.8
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.4
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.18
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.8
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.14
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.12
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.5
	UBC:1.1.0.8
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.2;
locks; strict;
comment	@ * @;


1.11
date	2014.12.19.22.44.59;	author guenther;	state Exp;
branches;
next	1.10;
commitid	LS2TNeCue5R9L67C;

1.10
date	2010.08.28.12.48.14;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2009.09.05.14.09.35;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.26.05.42.18;	author ray;	state Exp;
branches;
next	1.7;

1.7
date	2006.08.03.18.42.06;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.08.17.40.30;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.27.22.18.20;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.27.22.17.49;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.28.22.10.03;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.27.02;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.18.04.32.45;	author nate;	state Exp;
branches
	1.1.4.1
	1.1.8.1;
next	;

1.1.4.1
date	2001.05.14.22.26.15;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2002.03.30.08.19.20;	author niklas;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2003.03.28.00.38.29;	author niklas;	state Exp;
branches;
next	;

1.1.8.1
date	2002.06.11.03.42.29;	author art;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2002.10.29.00.33.31;	author art;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Use <sys/endian.h> instead of <machine/endian.h>

ok dlg@@ mpi@@ bcook@@ millert@@ miod@@
@
text
@/*	$OpenBSD: rasops4.c,v 1.10 2010/08/28 12:48:14 miod Exp $	*/
/*	$NetBSD: rasops4.c,v 1.4 2001/11/15 09:48:15 lukem Exp $	*/

/*-
 * Copyright (c) 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Andrew Doran.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/time.h>
#include <sys/endian.h>

#include <dev/wscons/wsdisplayvar.h>
#include <dev/wscons/wsconsio.h>
#include <dev/rasops/rasops.h>
#include <dev/rasops/rasops_masks.h>

int	rasops4_copycols(void *, int, int, int, int);
int	rasops4_erasecols(void *, int, int, int, long);
int	rasops4_do_cursor(struct rasops_info *);
int	rasops4_putchar(void *, int, int col, u_int, long);
#ifndef RASOPS_SMALL
int	rasops4_putchar8(void *, int, int col, u_int, long);
int	rasops4_putchar12(void *, int, int col, u_int, long);
int	rasops4_putchar16(void *, int, int col, u_int, long);
void	rasops4_makestamp(struct rasops_info *, long);

/*
 * 4x1 stamp for optimized character blitting
 */
static u_int16_t	stamp[16];
static long	stamp_attr;
static int	stamp_mutex;	/* XXX see note in README */
#endif

/*
 * Initialize rasops_info struct for this colordepth.
 */
void
rasops4_init(struct rasops_info *ri)
{
	rasops_masks_init();

	switch (ri->ri_font->fontwidth) {
#ifndef RASOPS_SMALL
	case 8:
		ri->ri_ops.putchar = rasops4_putchar8;
		break;
	case 12:
		ri->ri_ops.putchar = rasops4_putchar12;
		break;
	case 16:
		ri->ri_ops.putchar = rasops4_putchar16;
		break;
#endif	/* !RASOPS_SMALL */
	default:
		panic("fontwidth not 8/12/16 or RASOPS_SMALL - fixme!");
		ri->ri_ops.putchar = rasops4_putchar;
		break;
	}

	if ((ri->ri_font->fontwidth & 1) != 0) {
		ri->ri_ops.erasecols = rasops4_erasecols;
		ri->ri_ops.copycols = rasops4_copycols;
		ri->ri_do_cursor = rasops4_do_cursor;
	}
}

#ifdef notyet
/*
 * Paint a single character. This is the generic version, this is ugly.
 */
int
rasops4_putchar(void *cookie, int row, int col, u_int uc, long attr)
{
	int height, width, fs, rs, fb, bg, fg, lmask, rmask;
	struct rasops_info *ri;
	int32_t *rp;
	u_char *fr;

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	/* Catches 'row < 0' case too */
	if ((unsigned)row >= (unsigned)ri->ri_rows)
		return 0;

	if ((unsigned)col >= (unsigned)ri->ri_cols)
		return 0;
#endif

	width = ri->ri_font->fontwidth << 1;
	height = ri->ri_font->fontheight;
	col *= width;
	rp = (int32_t *)(ri->ri_bits + row * ri->ri_yscale + ((col >> 3) & ~3));
	col = col & 31;
	rs = ri->ri_stride;

	bg = ri->ri_devcmap[(attr >> 16) & 0xf];
	fg = ri->ri_devcmap[(attr >> 24) & 0xf];

	/* If fg and bg match this becomes a space character */
	if (fg == bg || uc == ' ') {
		uc = (u_int)-1;
		fr = 0;		/* shutup gcc */
		fs = 0;		/* shutup gcc */
	} else {
		uc -= ri->ri_font->firstchar;
		fr = (u_char *)ri->ri_font->data + uc * ri->ri_fontscale;
		fs = ri->ri_font->stride;
	}

	/* Single word, one mask */
	if ((col + width) <= 32) {
		rmask = rasops_pmask[col][width];
		lmask = ~rmask;

		if (uc == (u_int)-1) {
			bg &= rmask;

			while (height--) {
				*rp = (*rp & lmask) | bg;
				DELTA(rp, rs, int32_t *);
			}
		} else {
			while (height--) {
				/* get bits, mask */
				/* compose sl */
				/* mask sl */
				/* put word */
			}
		}

		/* Do underline */
		if (attr & 1) {
			DELTA(rp, -(ri->ri_stride << 1), int32_t *);
			*rp = (*rp & lmask) | (fg & rmask);
		}
	} else {
		lmask = ~rasops_lmask[col];
		rmask = ~rasops_rmask[(col + width) & 31];

		if (uc == (u_int)-1) {
			bg = bg & ~lmask;
			width = bg & ~rmask;

			while (height--) {
				rp[0] = (rp[0] & lmask) | bg;
				rp[1] = (rp[1] & rmask) | width;
				DELTA(rp, rs, int32_t *);
			}
		} else {
			width = 32 - col;

			/* NOT fontbits if bg is white */
			while (height--) {
				fb = ~(fr[3] | (fr[2] << 8) |
				    (fr[1] << 16) | (fr[0] << 24));

				rp[0] = (rp[0] & lmask)
				    | MBE((u_int)fb >> col);

				rp[1] = (rp[1] & rmask)
				   | (MBE((u_int)fb << width) & ~rmask);

				fr += fs;
				DELTA(rp, rs, int32_t *);
			}
		}

		/* Do underline */
		if (attr & 1) {
			DELTA(rp, -(ri->ri_stride << 1), int32_t *);
			rp[0] = (rp[0] & lmask) | (fg & ~lmask);
			rp[1] = (rp[1] & rmask) | (fg & ~rmask);
		}
	}

	return 0;
}
#endif

/*
 * Put a single character. This is the generic version.
 */
int
rasops4_putchar(void *cookie, int row, int col, u_int uc, long attr)
{

	/* XXX punt */
	return (EAGAIN);
}

#ifndef RASOPS_SMALL
/*
 * Recompute the blitting stamp.
 */
void
rasops4_makestamp(struct rasops_info *ri, long attr)
{
	int i, fg, bg;

	fg = ri->ri_devcmap[(attr >> 24) & 0xf] & 0xf;
	bg = ri->ri_devcmap[(attr >> 16) & 0xf] & 0xf;
	stamp_attr = attr;

	for (i = 0; i < 16; i++) {
#if BYTE_ORDER == LITTLE_ENDIAN
		stamp[i] =  (i & 1 ? fg : bg) << 8;
		stamp[i] |= (i & 2 ? fg : bg) << 12;
		stamp[i] |= (i & 4 ? fg : bg) << 0;
		stamp[i] |= (i & 8 ? fg : bg) << 4;
#else
		stamp[i] =  (i & 1 ? fg : bg) << 0;
		stamp[i] |= (i & 2 ? fg : bg) << 4;
		stamp[i] |= (i & 4 ? fg : bg) << 8;
		stamp[i] |= (i & 8 ? fg : bg) << 12;
#endif
	}
}

/*
 * Put a single character. This is for 8-pixel wide fonts.
 */
int
rasops4_putchar8(void *cookie, int row, int col, u_int uc, long attr)
{
	struct rasops_info *ri;
	int height, fs, rs;
	u_char *fr;
	u_int16_t *rp;

	/* Can't risk remaking the stamp if it's already in use */
	if (stamp_mutex++) {
		stamp_mutex--;
		return rasops4_putchar(cookie, row, col, uc, attr);
	}

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	/* Catches 'row < 0' case too */
	if ((unsigned)row >= (unsigned)ri->ri_rows) {
		stamp_mutex--;
		return 0;
	}

	if ((unsigned)col >= (unsigned)ri->ri_cols) {
		stamp_mutex--;
		return 0;
	}
#endif

	rp = (u_int16_t *)(ri->ri_bits + row * ri->ri_yscale + col * ri->ri_xscale);
	height = ri->ri_font->fontheight;
	rs = ri->ri_stride / sizeof(*rp);

	/* Recompute stamp? */
	if (attr != stamp_attr)
		rasops4_makestamp(ri, attr);

	if (uc == ' ') {
		u_int16_t c = stamp[0];
		while (height--) {
			rp[0] = c;
			rp[1] = c;
			rp += rs;
		}
	} else {
		uc -= ri->ri_font->firstchar;
		fr = (u_char *)ri->ri_font->data + uc * ri->ri_fontscale;
		fs = ri->ri_font->stride;

		while (height--) {
			rp[0] = stamp[(*fr >> 4) & 0xf];
			rp[1] = stamp[*fr & 0xf];
			fr += fs;
			rp += rs;
		}
	}

	/* Do underline */
	if ((attr & 1) != 0) {
		rp -= (rs << 1);
		rp[0] = stamp[15];
		rp[1] = stamp[15];
	}

	stamp_mutex--;

	return 0;
}

/*
 * Put a single character. This is for 12-pixel wide fonts.
 */
int
rasops4_putchar12(void *cookie, int row, int col, u_int uc, long attr)
{
	struct rasops_info *ri;
	int height, fs, rs;
	u_char *fr;
	u_int16_t *rp;

	/* Can't risk remaking the stamp if it's already in use */
	if (stamp_mutex++) {
		stamp_mutex--;
		return rasops4_putchar(cookie, row, col, uc, attr);
	}

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	/* Catches 'row < 0' case too */
	if ((unsigned)row >= (unsigned)ri->ri_rows) {
		stamp_mutex--;
		return 0;
	}

	if ((unsigned)col >= (unsigned)ri->ri_cols) {
		stamp_mutex--;
		return 0;
	}
#endif

	rp = (u_int16_t *)(ri->ri_bits + row * ri->ri_yscale + col * ri->ri_xscale);
	height = ri->ri_font->fontheight;
	rs = ri->ri_stride / sizeof(*rp);

	/* Recompute stamp? */
	if (attr != stamp_attr)
		rasops4_makestamp(ri, attr);

	if (uc == ' ') {
		u_int16_t c = stamp[0];
		while (height--) {
			rp[0] = c;
			rp[1] = c;
			rp[2] = c;
			rp += rs;
		}
	} else {
		uc -= ri->ri_font->firstchar;
		fr = (u_char *)ri->ri_font->data + uc * ri->ri_fontscale;
		fs = ri->ri_font->stride;

		while (height--) {
			rp[0] = stamp[(fr[0] >> 4) & 0xf];
			rp[1] = stamp[fr[0] & 0xf];
			rp[2] = stamp[(fr[1] >> 4) & 0xf];
			fr += fs;
			rp += rs;
		}
	}

	/* Do underline */
	if ((attr & 1) != 0) {
		rp -= (rs << 1);
		rp[0] = stamp[15];
		rp[1] = stamp[15];
		rp[2] = stamp[15];
	}

	stamp_mutex--;

	return 0;
}

/*
 * Put a single character. This is for 16-pixel wide fonts.
 */
int
rasops4_putchar16(void *cookie, int row, int col, u_int uc, long attr)
{
	struct rasops_info *ri;
	int height, fs, rs;
	u_char *fr;
	u_int16_t *rp;

	/* Can't risk remaking the stamp if it's already in use */
	if (stamp_mutex++) {
		stamp_mutex--;
		return rasops4_putchar(cookie, row, col, uc, attr);
	}

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	/* Catches 'row < 0' case too */
	if ((unsigned)row >= (unsigned)ri->ri_rows) {
		stamp_mutex--;
		return 0;
	}

	if ((unsigned)col >= (unsigned)ri->ri_cols) {
		stamp_mutex--;
		return 0;
	}
#endif

	rp = (u_int16_t *)(ri->ri_bits + row * ri->ri_yscale + col * ri->ri_xscale);
	height = ri->ri_font->fontheight;
	rs = ri->ri_stride / sizeof(*rp);

	/* Recompute stamp? */
	if (attr != stamp_attr)
		rasops4_makestamp(ri, attr);

	if (uc == ' ') {
		u_int16_t c = stamp[0];
		while (height--) {
			rp[0] = c;
			rp[1] = c;
			rp[2] = c;
			rp[3] = c;
			rp += rs;
		}
	} else {
		uc -= ri->ri_font->firstchar;
		fr = (u_char *)ri->ri_font->data + uc * ri->ri_fontscale;
		fs = ri->ri_font->stride;

		while (height--) {
			rp[0] = stamp[(fr[0] >> 4) & 0xf];
			rp[1] = stamp[fr[0] & 0xf];
			rp[2] = stamp[(fr[1] >> 4) & 0xf];
			rp[3] = stamp[fr[1] & 0xf];
			fr += fs;
			rp += rs;
		}
	}

	/* Do underline */
	if ((attr & 1) != 0) {
		rp -= (rs << 1);
		rp[0] = stamp[15];
		rp[1] = stamp[15];
		rp[2] = stamp[15];
		rp[3] = stamp[15];
	}

	stamp_mutex--;

	return 0;
}
#endif	/* !RASOPS_SMALL */

/*
 * Grab routines common to depths where (bpp < 8)
 */
#define NAME(ident)	rasops4_##ident
#define PIXEL_SHIFT	2

#include <dev/rasops/rasops_bitops.h>
@


1.10
log
@ansify function definitions, and constify a few arrays while there.
no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops4.c,v 1.9 2009/09/05 14:09:35 miod Exp $	*/
d36 1
a36 1
#include <machine/endian.h>
@


1.9
log
@Change the wsdisplay_emulops return types from void to int; emulops will now
return zero on success and nonzero on failure.
This commit only performs mechanical changes for the existing emulops to
always return zero.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops4.c,v 1.8 2008/06/26 05:42:18 ray Exp $	*/
d65 1
a65 2
rasops4_init(ri)
	struct rasops_info *ri;
d99 1
a99 5
rasops4_putchar(cookie, row, col, uc, attr)
	void *cookie;
	int row, col;
	u_int uc;
	long attr;
d212 1
a212 5
rasops4_putchar(cookie, row, col, uc, attr)
	void *cookie;
	int row, col;
	u_int uc;
	long attr;
d224 1
a224 3
rasops4_makestamp(ri, attr)
	struct rasops_info *ri;
	long attr;
d251 1
a251 5
rasops4_putchar8(cookie, row, col, uc, attr)
	void *cookie;
	int row, col;
	u_int uc;
	long attr;
d323 1
a323 5
rasops4_putchar12(cookie, row, col, uc, attr)
	void *cookie;
	int row, col;
	u_int uc;
	long attr;
d398 1
a398 5
rasops4_putchar16(cookie, row, col, uc, attr)
	void *cookie;
	int row, col;
	u_int uc;
	long attr;
@


1.8
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops4.c,v 1.7 2006/08/03 18:42:06 miod Exp $	*/
d43 4
a46 4
void	rasops4_copycols(void *, int, int, int, int);
void	rasops4_erasecols(void *, int, int, int, long);
void	rasops4_do_cursor(struct rasops_info *);
void	rasops4_putchar(void *, int, int col, u_int, long);
d48 3
a50 3
void	rasops4_putchar8(void *, int, int col, u_int, long);
void	rasops4_putchar12(void *, int, int col, u_int, long);
void	rasops4_putchar16(void *, int, int col, u_int, long);
d99 1
a99 1
void
d116 1
a116 1
		return;
d119 1
a119 1
		return;
d208 2
d216 1
a216 1
void
d225 1
d261 1
a261 1
void
d276 1
a276 2
		rasops4_putchar(cookie, row, col, uc, attr);
		return;
d285 1
a285 1
		return;
d290 1
a290 1
		return;
d330 2
d337 1
a337 1
void
d352 1
a352 2
		rasops4_putchar(cookie, row, col, uc, attr);
		return;
d361 1
a361 1
		return;
d366 1
a366 1
		return;
d409 2
d416 1
a416 1
void
d431 1
a431 2
		rasops4_putchar(cookie, row, col, uc, attr);
		return;
d440 1
a440 1
		return;
d445 1
a445 1
		return;
d491 2
@


1.7
log
@Since rasops is big-endian internally (because it's the logical choice
for frame buffer work), it is no surprise that the less-than-8-bpp code
is completely wrong when run on a little endian machine, and only works
by accident if character cells are 8-bit wide.

Fix the BE<->LE conversions, so that now rasops1 works in all cases.
rasops2 and rasops4 might still need some help, but I'm not in a hurry to
meet a 4bpp big-endian frame buffer on a little-endian system...
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops4.c,v 1.6 2006/01/08 17:40:30 miod Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.6
log
@Big-endian fix here too.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops4.c,v 1.5 2002/07/27 22:18:20 miod Exp $	*/
d75 1
@


1.5
log
@Fix PIXEL_SHIFT value for 4bit displays.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops4.c,v 1.4 2002/07/27 22:17:49 miod Exp $	*/
d247 1
d252 6
@


1.4
log
@Unstaticize functions, for my ddb sessions pleasure.
Plus it makes hangman more difficult.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops4.c,v 1.3 2002/05/28 22:10:03 fgsch Exp $	*/
d493 1
a493 1
#define PIXEL_SHIFT	3
@


1.3
log
@o spaces, tabs, spelling cleanup.
o remove unneeded headers.
o makes this to compile if RASOPS_SMALL is defined.
o makes rasops2 to compile.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops4.c,v 1.2 2002/03/14 01:27:02 millert Exp $	*/
d50 4
a53 4
static void	rasops4_copycols(void *, int, int, int, int);
static void	rasops4_erasecols(void *, int, int, int, long);
static void	rasops4_do_cursor(struct rasops_info *);
static void	rasops4_putchar(void *, int, int col, u_int, long);
d55 4
a58 4
static void	rasops4_putchar8(void *, int, int col, u_int, long);
static void	rasops4_putchar12(void *, int, int col, u_int, long);
static void	rasops4_putchar16(void *, int, int col, u_int, long);
static void	rasops4_makestamp(struct rasops_info *, long);
d105 1
a105 1
static void
d220 1
a220 1
static void
d235 1
a235 1
static void
d257 1
a257 1
static void
d332 1
a332 1
static void
d410 1
a410 1
static void
@


1.2
log
@First round of __P removal in sys
@
text
@d1 2
a2 2
/*	$OpenBSD: rasops4.c,v 1.1 2001/03/18 04:32:45 nate Exp $ */
/* 	$NetBSD: $	*/
a39 4
#include <sys/cdefs.h>
//__KERNEL_RCSID(0, "$NetBSD: $");

#include <sys/types.h>
a58 1
#endif
d66 1
@


1.1
log
@Import rasops from NetBSD.  This gives improved performance for raster
operations.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d54 4
a57 4
static void	rasops4_copycols __P((void *, int, int, int, int));
static void	rasops4_erasecols __P((void *, int, int, int, long));
static void	rasops4_do_cursor __P((struct rasops_info *));
static void	rasops4_putchar __P((void *, int, int col, u_int, long));
d59 4
a62 4
static void	rasops4_putchar8 __P((void *, int, int col, u_int, long));
static void	rasops4_putchar12 __P((void *, int, int col, u_int, long));
static void	rasops4_putchar16 __P((void *, int, int col, u_int, long));
static void	rasops4_makestamp __P((struct rasops_info *, long));
@


1.1.8.1
log
@Sync UBC branch to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: rasops4.c,v 1.4 2001/11/15 09:48:15 lukem Exp $	*/
d40 4
d54 4
a57 4
static void	rasops4_copycols(void *, int, int, int, int);
static void	rasops4_erasecols(void *, int, int, int, long);
static void	rasops4_do_cursor(struct rasops_info *);
static void	rasops4_putchar(void *, int, int col, u_int, long);
d59 5
a63 4
static void	rasops4_putchar8(void *, int, int col, u_int, long);
static void	rasops4_putchar12(void *, int, int col, u_int, long);
static void	rasops4_putchar16(void *, int, int col, u_int, long);
static void	rasops4_makestamp(struct rasops_info *, long);
a70 1
#endif
@


1.1.8.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops4.c,v 1.1.8.1 2002/06/11 03:42:29 art Exp $	*/
d50 4
a53 4
void	rasops4_copycols(void *, int, int, int, int);
void	rasops4_erasecols(void *, int, int, int, long);
void	rasops4_do_cursor(struct rasops_info *);
void	rasops4_putchar(void *, int, int col, u_int, long);
d55 4
a58 4
void	rasops4_putchar8(void *, int, int col, u_int, long);
void	rasops4_putchar12(void *, int, int col, u_int, long);
void	rasops4_putchar16(void *, int, int col, u_int, long);
void	rasops4_makestamp(struct rasops_info *, long);
d105 1
a105 1
void
d220 1
a220 1
void
d235 1
a235 1
void
d257 1
a257 1
void
d332 1
a332 1
void
d410 1
a410 1
void
d493 1
a493 1
#define PIXEL_SHIFT	2
@


1.1.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops4.c,v 1.1 2001/03/18 04:32:45 nate Exp $ */
@


1.1.4.2
log
@Merge unpeeing cvs missed
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d54 4
a57 4
static void	rasops4_copycols(void *, int, int, int, int);
static void	rasops4_erasecols(void *, int, int, int, long);
static void	rasops4_do_cursor(struct rasops_info *);
static void	rasops4_putchar(void *, int, int col, u_int, long);
d59 4
a62 4
static void	rasops4_putchar8(void *, int, int col, u_int, long);
static void	rasops4_putchar12(void *, int, int col, u_int, long);
static void	rasops4_putchar16(void *, int, int col, u_int, long);
static void	rasops4_makestamp(struct rasops_info *, long);
@


1.1.4.3
log
@Sync the SMP branch with 3.3
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: rasops4.c,v 1.4 2001/11/15 09:48:15 lukem Exp $	*/
d40 4
d54 4
a57 4
void	rasops4_copycols(void *, int, int, int, int);
void	rasops4_erasecols(void *, int, int, int, long);
void	rasops4_do_cursor(struct rasops_info *);
void	rasops4_putchar(void *, int, int col, u_int, long);
d59 5
a63 4
void	rasops4_putchar8(void *, int, int col, u_int, long);
void	rasops4_putchar12(void *, int, int col, u_int, long);
void	rasops4_putchar16(void *, int, int col, u_int, long);
void	rasops4_makestamp(struct rasops_info *, long);
a70 1
#endif
d109 1
a109 1
void
d224 1
a224 1
void
d239 1
a239 1
void
d261 1
a261 1
void
d336 1
a336 1
void
d414 1
a414 1
void
d497 1
a497 1
#define PIXEL_SHIFT	2
@


