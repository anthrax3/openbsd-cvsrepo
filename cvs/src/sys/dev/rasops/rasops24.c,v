head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.10
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.8
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.4
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.18
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.16
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.12
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.8
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.8
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.4
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.5.0.22
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.20
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.18
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.16
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.14
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.12
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.5
	UBC:1.1.0.8
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.2;
locks; strict;
comment	@ * @;


1.10
date	2014.12.19.22.44.59;	author guenther;	state Exp;
branches;
next	1.9;
commitid	LS2TNeCue5R9L67C;

1.9
date	2010.08.28.12.48.14;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2009.09.05.14.09.35;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.26.05.42.18;	author ray;	state Exp;
branches;
next	1.6;

1.6
date	2007.09.01.12.58.19;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.27.22.17.49;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.28.22.10.03;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.28.15.16.32;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.27.02;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.18.04.32.45;	author nate;	state Exp;
branches
	1.1.4.1
	1.1.8.1;
next	;

1.1.4.1
date	2001.05.14.22.26.15;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2002.03.30.08.19.20;	author niklas;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2003.03.28.00.38.29;	author niklas;	state Exp;
branches;
next	;

1.1.8.1
date	2002.06.11.03.42.29;	author art;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2002.10.29.00.33.31;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Use <sys/endian.h> instead of <machine/endian.h>

ok dlg@@ mpi@@ bcook@@ millert@@ miod@@
@
text
@/*	$OpenBSD: rasops24.c,v 1.9 2010/08/28 12:48:14 miod Exp $	*/
/*	$NetBSD: rasops24.c,v 1.12 2000/04/12 14:22:29 pk Exp $	*/

/*-
 * Copyright (c) 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Andrew Doran.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/time.h>
#include <sys/endian.h>

#include <dev/wscons/wsdisplayvar.h>
#include <dev/wscons/wsconsio.h>
#include <dev/rasops/rasops.h>

int 	rasops24_erasecols(void *, int, int, int, long);
int 	rasops24_eraserows(void *, int, int, long);
int 	rasops24_putchar(void *, int, int, u_int, long attr);
#ifndef RASOPS_SMALL
int 	rasops24_putchar8(void *, int, int, u_int, long attr);
int 	rasops24_putchar12(void *, int, int, u_int, long attr);
int 	rasops24_putchar16(void *, int, int, u_int, long attr);
void	rasops24_makestamp(struct rasops_info *, long);

/*
 * 4x1 stamp for optimized character blitting
 */
static int32_t	stamp[64];
static long	stamp_attr;
static int	stamp_mutex;	/* XXX see note in readme */
#endif

/*
 * XXX this confuses the hell out of gcc2 (not egcs) which always insists
 * that the shift count is negative.
 *
 * offset = STAMP_SHIFT(fontbits, nibble #) & STAMP_MASK
 * destination int32_t[0] = STAMP_READ(offset)
 * destination int32_t[1] = STAMP_READ(offset + 4)
 * destination int32_t[2] = STAMP_READ(offset + 8)
 */
#define STAMP_SHIFT(fb,n)	((n*4-4) >= 0 ? (fb)>>(n*4-4):(fb)<<-(n*4-4))
#define STAMP_MASK		(0xf << 4)
#define STAMP_READ(o)		(*(int32_t *)((caddr_t)stamp + (o)))

/*
 * Initialize rasops_info struct for this colordepth.
 */
void
rasops24_init(struct rasops_info *ri)
{

	switch (ri->ri_font->fontwidth) {
#ifndef RASOPS_SMALL
	case 8:
		ri->ri_ops.putchar = rasops24_putchar8;
		break;
	case 12:
		ri->ri_ops.putchar = rasops24_putchar12;
		break;
	case 16:
		ri->ri_ops.putchar = rasops24_putchar16;
		break;
#endif
	default:
		ri->ri_ops.putchar = rasops24_putchar;
		break;
	}

	if (ri->ri_rnum == 0) {
		ri->ri_rnum = 8;
		ri->ri_rpos = 0;
		ri->ri_gnum = 8;
		ri->ri_gpos = 8;
		ri->ri_bnum = 8;
		ri->ri_bpos = 16;
	}

	ri->ri_ops.erasecols = rasops24_erasecols;
	ri->ri_ops.eraserows = rasops24_eraserows;
}

/*
 * Put a single character. This is the generic version.
 * XXX this bites - we should use masks.
 */
int
rasops24_putchar(void *cookie, int row, int col, u_int uc, long attr)
{
	int fb, width, height, cnt, clr[2];
	struct rasops_info *ri;
	u_char *dp, *rp, *fr;

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	/* Catches 'row < 0' case too */
	if ((unsigned)row >= (unsigned)ri->ri_rows)
		return 0;

	if ((unsigned)col >= (unsigned)ri->ri_cols)
		return 0;
#endif

	rp = ri->ri_bits + row * ri->ri_yscale + col * ri->ri_xscale;
	height = ri->ri_font->fontheight;
	width = ri->ri_font->fontwidth;

	clr[1] = ri->ri_devcmap[((u_int)attr >> 24) & 0xf];
	clr[0] = ri->ri_devcmap[((u_int)attr >> 16) & 0xf];

	if (uc == ' ') {
		while (height--) {
			dp = rp;
			rp += ri->ri_stride;

			for (cnt = width; cnt; cnt--) {
				*dp++ = clr[0] >> 16;
				*dp++ = clr[0] >> 8;
				*dp++ = clr[0];
			}
		}
	} else {
		uc -= ri->ri_font->firstchar;
		fr = (u_char *)ri->ri_font->data + uc * ri->ri_fontscale;

		while (height--) {
			dp = rp;
			fb = fr[3] | (fr[2] << 8) | (fr[1] << 16) |
			    (fr[0] << 24);
			fr += ri->ri_font->stride;
			rp += ri->ri_stride;

			for (cnt = width; cnt; cnt--, fb <<= 1) {
				if ((fb >> 31) & 1) {
					*dp++ = clr[1] >> 16;
					*dp++ = clr[1] >> 8;
					*dp++ = clr[1];
				} else {
					*dp++ = clr[0] >> 16;
					*dp++ = clr[0] >> 8;
					*dp++ = clr[0];
				}
			}
		}
	}

	/* Do underline */
	if ((attr & 1) != 0) {
		rp -= ri->ri_stride << 1;

		while (width--) {
			*rp++ = clr[1] >> 16;
			*rp++ = clr[1] >> 8;
			*rp++ = clr[1];
		}
	}

	return 0;
}

#ifndef RASOPS_SMALL
/*
 * Recompute the blitting stamp.
 */
void
rasops24_makestamp(struct rasops_info *ri, long attr)
{
	u_int fg, bg, c1, c2, c3, c4;
	int i;

	fg = ri->ri_devcmap[((u_int)attr >> 24) & 0xf] & 0xffffff;
	bg = ri->ri_devcmap[((u_int)attr >> 16) & 0xf] & 0xffffff;
	stamp_attr = attr;

	for (i = 0; i < 64; i += 4) {
#if BYTE_ORDER == LITTLE_ENDIAN
		c1 = (i & 32 ? fg : bg);
		c2 = (i & 16 ? fg : bg);
		c3 = (i & 8 ? fg : bg);
		c4 = (i & 4 ? fg : bg);
#else
		c1 = (i & 8 ? fg : bg);
		c2 = (i & 4 ? fg : bg);
		c3 = (i & 16 ? fg : bg);
		c4 = (i & 32 ? fg : bg);
#endif
		stamp[i+0] = (c1 <<  8) | (c2 >> 16);
		stamp[i+1] = (c2 << 16) | (c3 >>  8);
		stamp[i+2] = (c3 << 24) | c4;

#if BYTE_ORDER == LITTLE_ENDIAN
		if ((ri->ri_flg & RI_BSWAP) == 0) {
#else
		if ((ri->ri_flg & RI_BSWAP) != 0) {
#endif
			stamp[i+0] = swap32(stamp[i+0]);
			stamp[i+1] = swap32(stamp[i+1]);
			stamp[i+2] = swap32(stamp[i+2]);
		}
	}
}

/*
 * Put a single character. This is for 8-pixel wide fonts.
 */
int
rasops24_putchar8(void *cookie, int row, int col, u_int uc, long attr)
{
	struct rasops_info *ri;
	int height, so, fs;
	int32_t *rp;
	u_char *fr;

	/* Can't risk remaking the stamp if it's already in use */
	if (stamp_mutex++) {
		stamp_mutex--;
		return rasops24_putchar(cookie, row, col, uc, attr);
	}

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	if ((unsigned)row >= (unsigned)ri->ri_rows) {
		stamp_mutex--;
		return 0;
	}

	if ((unsigned)col >= (unsigned)ri->ri_cols) {
		stamp_mutex--;
		return 0;
	}
#endif

	/* Recompute stamp? */
	if (attr != stamp_attr)
		rasops24_makestamp(ri, attr);

	rp = (int32_t *)(ri->ri_bits + row*ri->ri_yscale + col*ri->ri_xscale);
	height = ri->ri_font->fontheight;

	if (uc == (u_int)-1) {
		int32_t c = stamp[0];
		while (height--) {
			rp[0] = rp[1] = rp[2] = rp[3] = rp[4] = rp[5] = c;
			DELTA(rp, ri->ri_stride, int32_t *);
		}
	} else {
		uc -= ri->ri_font->firstchar;
		fr = (u_char *)ri->ri_font->data + uc*ri->ri_fontscale;
		fs = ri->ri_font->stride;

		while (height--) {
			so = STAMP_SHIFT(fr[0], 1) & STAMP_MASK;
			rp[0] = STAMP_READ(so);
			rp[1] = STAMP_READ(so + 4);
			rp[2] = STAMP_READ(so + 8);

			so = STAMP_SHIFT(fr[0], 0) & STAMP_MASK;
			rp[3] = STAMP_READ(so);
			rp[4] = STAMP_READ(so + 4);
			rp[5] = STAMP_READ(so + 8);

			fr += fs;
			DELTA(rp, ri->ri_stride, int32_t *);
		}
	}

	/* Do underline */
	if ((attr & 1) != 0) {
		int32_t c = STAMP_READ(52);

		DELTA(rp, -(ri->ri_stride << 1), int32_t *);
		rp[0] = rp[1] = rp[2] = rp[3] = rp[4] = rp[5] = c;
	}

	stamp_mutex--;

	return 0;
}

/*
 * Put a single character. This is for 12-pixel wide fonts.
 */
int
rasops24_putchar12(void *cookie, int row, int col, u_int uc, long attr)
{
	struct rasops_info *ri;
	int height, so, fs;
	int32_t *rp;
	u_char *fr;

	/* Can't risk remaking the stamp if it's already in use */
	if (stamp_mutex++) {
		stamp_mutex--;
		return rasops24_putchar(cookie, row, col, uc, attr);
	}

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	if ((unsigned)row >= (unsigned)ri->ri_rows) {
		stamp_mutex--;
		return 0;
	}

	if ((unsigned)col >= (unsigned)ri->ri_cols) {
		stamp_mutex--;
		return 0;
	}
#endif

	/* Recompute stamp? */
	if (attr != stamp_attr)
		rasops24_makestamp(ri, attr);

	rp = (int32_t *)(ri->ri_bits + row*ri->ri_yscale + col*ri->ri_xscale);
	height = ri->ri_font->fontheight;

	if (uc == (u_int)-1) {
		int32_t c = stamp[0];
		while (height--) {
			rp[0] = rp[1] = rp[2] = rp[3] =
			rp[4] = rp[5] = rp[6] = rp[7] = rp[8] = c;
			DELTA(rp, ri->ri_stride, int32_t *);
		}
	} else {
		uc -= ri->ri_font->firstchar;
		fr = (u_char *)ri->ri_font->data + uc*ri->ri_fontscale;
		fs = ri->ri_font->stride;

		while (height--) {
			so = STAMP_SHIFT(fr[0], 1) & STAMP_MASK;
			rp[0] = STAMP_READ(so);
			rp[1] = STAMP_READ(so + 4);
			rp[2] = STAMP_READ(so + 8);

			so = STAMP_SHIFT(fr[0], 0) & STAMP_MASK;
			rp[3] = STAMP_READ(so);
			rp[4] = STAMP_READ(so + 4);
			rp[5] = STAMP_READ(so + 8);

			so = STAMP_SHIFT(fr[1], 1) & STAMP_MASK;
			rp[6] = STAMP_READ(so);
			rp[7] = STAMP_READ(so + 4);
			rp[8] = STAMP_READ(so + 8);

			fr += fs;
			DELTA(rp, ri->ri_stride, int32_t *);
		}
	}

	/* Do underline */
	if ((attr & 1) != 0) {
		int32_t c = STAMP_READ(52);

		DELTA(rp, -(ri->ri_stride << 1), int32_t *);
		rp[0] = rp[1] = rp[2] = rp[3] =
		rp[4] = rp[5] = rp[6] = rp[7] = rp[8] = c;
	}

	stamp_mutex--;

	return 0;
}

/*
 * Put a single character. This is for 16-pixel wide fonts.
 */
int
rasops24_putchar16(void *cookie, int row, int col, u_int uc, long attr)
{
	struct rasops_info *ri;
	int height, so, fs;
	int32_t *rp;
	u_char *fr;

	/* Can't risk remaking the stamp if it's already in use */
	if (stamp_mutex++) {
		stamp_mutex--;
		return rasops24_putchar(cookie, row, col, uc, attr);
	}

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	if ((unsigned)row >= (unsigned)ri->ri_rows) {
		stamp_mutex--;
		return 0;
	}

	if ((unsigned)col >= (unsigned)ri->ri_cols) {
		stamp_mutex--;
		return 0;
	}
#endif

	/* Recompute stamp? */
	if (attr != stamp_attr)
		rasops24_makestamp(ri, attr);

	rp = (int32_t *)(ri->ri_bits + row*ri->ri_yscale + col*ri->ri_xscale);
	height = ri->ri_font->fontheight;

	if (uc == (u_int)-1) {
		int32_t c = stamp[0];
		while (height--) {
			rp[0] = rp[1] = rp[2] = rp[3] =
			rp[4] = rp[5] = rp[6] = rp[7] =
			rp[8] = rp[9] = rp[10] = rp[11] = c;
			DELTA(rp, ri->ri_stride, int32_t *);
		}
	} else {
		uc -= ri->ri_font->firstchar;
		fr = (u_char *)ri->ri_font->data + uc*ri->ri_fontscale;
		fs = ri->ri_font->stride;

		while (height--) {
			so = STAMP_SHIFT(fr[0], 1) & STAMP_MASK;
			rp[0] = STAMP_READ(so);
			rp[1] = STAMP_READ(so + 4);
			rp[2] = STAMP_READ(so + 8);

			so = STAMP_SHIFT(fr[0], 0) & STAMP_MASK;
			rp[3] = STAMP_READ(so);
			rp[4] = STAMP_READ(so + 4);
			rp[5] = STAMP_READ(so + 8);

			so = STAMP_SHIFT(fr[1], 1) & STAMP_MASK;
			rp[6] = STAMP_READ(so);
			rp[7] = STAMP_READ(so + 4);
			rp[8] = STAMP_READ(so + 8);

			so = STAMP_SHIFT(fr[1], 0) & STAMP_MASK;
			rp[9] = STAMP_READ(so);
			rp[10] = STAMP_READ(so + 4);
			rp[11] = STAMP_READ(so + 8);

			DELTA(rp, ri->ri_stride, int32_t *);
			fr += fs;
		}
	}

	/* Do underline */
	if ((attr & 1) != 0) {
		int32_t c = STAMP_READ(52);

		DELTA(rp, -(ri->ri_stride << 1), int32_t *);
		rp[0] = rp[1] = rp[2] = rp[3] =
		rp[4] = rp[5] = rp[6] = rp[7] =
		rp[8] = rp[9] = rp[10] = rp[11] = c;
	}

	stamp_mutex--;

	return 0;
}
#endif	/* !RASOPS_SMALL */

/*
 * Erase rows. This is nice and easy due to alignment.
 */
int
rasops24_eraserows(void *cookie, int row, int num, long attr)
{
	int n9, n3, n1, cnt, stride, delta;
	u_int32_t *dp, clr, stamp[3];
	struct rasops_info *ri;

	/*
	 * If the color is gray, we can cheat and use the generic routines
	 * (which are faster, hopefully) since the r,g,b values are the same.
	 */
	if ((attr & 4) != 0)
		return rasops_eraserows(cookie, row, num, attr);

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	if (row < 0) {
		num += row;
		row = 0;
	}

	if ((row + num) > ri->ri_rows)
		num = ri->ri_rows - row;

	if (num <= 0)
		return 0;
#endif

	clr = ri->ri_devcmap[(attr >> 16) & 0xf] & 0xffffff;
	stamp[0] = (clr <<  8) | (clr >> 16);
	stamp[1] = (clr << 16) | (clr >>  8);
	stamp[2] = (clr << 24) | clr;

#if BYTE_ORDER == LITTLE_ENDIAN
	if ((ri->ri_flg & RI_BSWAP) == 0) {
#else
	if ((ri->ri_flg & RI_BSWAP) != 0) {
#endif
		stamp[0] = swap32(stamp[0]);
		stamp[1] = swap32(stamp[1]);
		stamp[2] = swap32(stamp[2]);
	}

	/*
	 * XXX the wsdisplay_emulops interface seems a little deficient in
	 * that there is no way to clear the *entire* screen. We provide a
	 * workaround here: if the entire console area is being cleared, and
	 * the RI_FULLCLEAR flag is set, clear the entire display.
	 */
	if (num == ri->ri_rows && (ri->ri_flg & RI_FULLCLEAR) != 0) {
		stride = ri->ri_stride;
		num = ri->ri_height;
		dp = (int32_t *)ri->ri_origbits;
		delta = 0;
	} else {
		stride = ri->ri_emustride;
		num *= ri->ri_font->fontheight;
		dp = (int32_t *)(ri->ri_bits + row * ri->ri_yscale);
		delta = ri->ri_delta;
	}

	n9 = stride / 36;
	cnt = (n9 << 5) + (n9 << 2); /* (32*n9) + (4*n9) */
	n3 = (stride - cnt) / 12;
	cnt += (n3 << 3) + (n3 << 2); /* (8*n3) + (4*n3) */
	n1 = (stride - cnt) >> 2;

	while (num--) {
		for (cnt = n9; cnt; cnt--) {
			dp[0] = stamp[0];
			dp[1] = stamp[1];
			dp[2] = stamp[2];
			dp[3] = stamp[0];
			dp[4] = stamp[1];
			dp[5] = stamp[2];
			dp[6] = stamp[0];
			dp[7] = stamp[1];
			dp[8] = stamp[2];
			dp += 9;
		}

		for (cnt = n3; cnt; cnt--) {
			dp[0] = stamp[0];
			dp[1] = stamp[1];
			dp[2] = stamp[2];
			dp += 3;
		}

		for (cnt = 0; cnt < n1; cnt++)
			*dp++ = stamp[cnt];

		DELTA(dp, delta, int32_t *);
	}

	return 0;
}

/*
 * Erase columns.
 */
int
rasops24_erasecols(void *cookie, int row, int col, int num, long attr)
{
	int n12, n4, height, cnt, slop, clr, stamp[3];
	struct rasops_info *ri;
	int32_t *dp, *rp;
	u_char *dbp;

	/*
	 * If the color is gray, we can cheat and use the generic routines
	 * (which are faster, hopefully) since the r,g,b values are the same.
	 */
	if ((attr & 4) != 0)
		return rasops_erasecols(cookie, row, col, num, attr);

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	/* Catches 'row < 0' case too */
	if ((unsigned)row >= (unsigned)ri->ri_rows)
		return 0;

	if (col < 0) {
		num += col;
		col = 0;
	}

	if ((col + num) > ri->ri_cols)
		num = ri->ri_cols - col;

	if (num <= 0)
		return 0;
#endif

	rp = (int32_t *)(ri->ri_bits + row*ri->ri_yscale + col*ri->ri_xscale);
	num *= ri->ri_font->fontwidth;
	height = ri->ri_font->fontheight;

	clr = ri->ri_devcmap[(attr >> 16) & 0xf] & 0xffffff;
	stamp[0] = (clr <<  8) | (clr >> 16);
	stamp[1] = (clr << 16) | (clr >>  8);
	stamp[2] = (clr << 24) | clr;

#if BYTE_ORDER == LITTLE_ENDIAN
	if ((ri->ri_flg & RI_BSWAP) == 0) {
#else
	if ((ri->ri_flg & RI_BSWAP) != 0) {
#endif
		stamp[0] = swap32(stamp[0]);
		stamp[1] = swap32(stamp[1]);
		stamp[2] = swap32(stamp[2]);
	}

	/*
	 * The current byte offset mod 4 tells us the number of 24-bit pels
	 * we need to write for alignment to 32-bits. Once we're aligned on
	 * a 32-bit boundary, we're also aligned on a 4 pixel boundary, so
	 * the stamp does not need to be rotated. The following shows the
	 * layout of 4 pels in a 3 word region and illustrates this:
	 *
	 *	aaab bbcc cddd
	 */
	slop = (long)rp & 3;	num -= slop;
	n12 = num / 12;		num -= (n12 << 3) + (n12 << 2);
	n4 = num >> 2;		num &= 3;

	while (height--) {
		dbp = (u_char *)rp;
		DELTA(rp, ri->ri_stride, int32_t *);

		/* Align to 4 bytes */
		/* XXX handle with masks, bring under control of RI_BSWAP */
		for (cnt = slop; cnt; cnt--) {
			*dbp++ = (clr >> 16);
			*dbp++ = (clr >> 8);
			*dbp++ = clr;
		}

		dp = (int32_t *)dbp;

		/* 12 pels per loop */
		for (cnt = n12; cnt; cnt--) {
			dp[0] = stamp[0];
			dp[1] = stamp[1];
			dp[2] = stamp[2];
			dp[3] = stamp[0];
			dp[4] = stamp[1];
			dp[5] = stamp[2];
			dp[6] = stamp[0];
			dp[7] = stamp[1];
			dp[8] = stamp[2];
			dp += 9;
		}

		/* 4 pels per loop */
		for (cnt = n4; cnt; cnt--) {
			dp[0] = stamp[0];
			dp[1] = stamp[1];
			dp[2] = stamp[2];
			dp += 3;
		}

		/* Trailing slop */
		/* XXX handle with masks, bring under control of RI_BSWAP */
		dbp = (u_char *)dp;
		for (cnt = num; cnt; cnt--) {
			*dbp++ = (clr >> 16);
			*dbp++ = (clr >> 8);
			*dbp++ = clr;
		}
	}

	return 0;
}
@


1.9
log
@ansify function definitions, and constify a few arrays while there.
no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops24.c,v 1.8 2009/09/05 14:09:35 miod Exp $	*/
d36 1
a36 2

#include <machine/endian.h>
@


1.8
log
@Change the wsdisplay_emulops return types from void to int; emulops will now
return zero on success and nonzero on failure.
This commit only performs mechanical changes for the existing emulops to
always return zero.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops24.c,v 1.7 2008/06/26 05:42:18 ray Exp $	*/
d77 1
a77 2
rasops24_init(ri)
	struct rasops_info *ri;
d115 1
a115 5
rasops24_putchar(cookie, row, col, uc, attr)
	void *cookie;
	int row, col;
	u_int uc;
	long attr;
d194 1
a194 3
rasops24_makestamp(ri, attr)
	struct rasops_info *ri;
	long attr;
d235 1
a235 5
rasops24_putchar8(cookie, row, col, uc, attr)
	void *cookie;
	int row, col;
	u_int uc;
	long attr;
d313 1
a313 5
rasops24_putchar12(cookie, row, col, uc, attr)
	void *cookie;
	int row, col;
	u_int uc;
	long attr;
d398 1
a398 5
rasops24_putchar16(cookie, row, col, uc, attr)
	void *cookie;
	int row, col;
	u_int uc;
	long attr;
d491 1
a491 4
rasops24_eraserows(cookie, row, num, attr)
	void *cookie;
	int row, num;
	long attr;
d592 1
a592 4
rasops24_erasecols(cookie, row, col, num, attr)
	void *cookie;
	int row, col, num;
	long attr;
@


1.7
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops24.c,v 1.6 2007/09/01 12:58:19 miod Exp $	*/
d43 3
a45 3
void 	rasops24_erasecols(void *, int, int, int, long);
void 	rasops24_eraserows(void *, int, int, long);
void 	rasops24_putchar(void *, int, int, u_int, long attr);
d47 3
a49 3
void 	rasops24_putchar8(void *, int, int, u_int, long attr);
void 	rasops24_putchar12(void *, int, int, u_int, long attr);
void 	rasops24_putchar16(void *, int, int, u_int, long attr);
d115 1
a115 1
void
d131 1
a131 1
		return;
d134 1
a134 1
		return;
d190 2
d241 1
a241 1
void
d256 1
a256 2
		rasops24_putchar(cookie, row, col, uc, attr);
		return;
d264 1
a264 1
		return;
d269 1
a269 1
		return;
d316 2
d323 1
a323 1
void
d338 1
a338 2
		rasops24_putchar(cookie, row, col, uc, attr);
		return;
d346 1
a346 1
		return;
d351 1
a351 1
		return;
d405 2
d412 1
a412 1
void
d427 1
a427 2
		rasops24_putchar(cookie, row, col, uc, attr);
		return;
d435 1
a435 1
		return;
d440 1
a440 1
		return;
d501 2
d509 1
a509 1
void
d523 2
a524 4
	if ((attr & 4) != 0) {
		rasops_eraserows(cookie, row, num, attr);
		return;
	}
d538 1
a538 1
		return;
d606 2
d613 1
a613 1
void
d628 2
a629 4
	if ((attr & 4) != 0) {
		rasops_erasecols(cookie, row, col, num, attr);
		return;
	}
d636 1
a636 1
		return;
d647 1
a647 1
		return;
d727 2
@


1.6
log
@Fix space and underline handling in rasops24_putchar(), spotted by Leon Zadorin.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops24.c,v 1.5 2002/07/27 22:17:49 miod Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.5
log
@Unstaticize functions, for my ddb sessions pleasure.
Plus it makes hangman more difficult.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops24.c,v 1.4 2002/05/28 22:10:03 fgsch Exp $	*/
a151 1
		u_char c = clr[0];
d157 3
a159 3
				*dp++ = c >> 16;
				*dp++ = c >> 8;
				*dp++ = c;
a188 2
		u_char c = clr[1];

d192 3
a194 3
			*rp++ = c >> 16;
			*rp++ = c >> 8;
			*rp++ = c;
@


1.4
log
@o spaces, tabs, spelling cleanup.
o remove unneeded headers.
o makes this to compile if RASOPS_SMALL is defined.
o makes rasops2 to compile.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops24.c,v 1.3 2002/05/28 15:16:32 fgsch Exp $	*/
d50 3
a52 3
static void 	rasops24_erasecols(void *, int, int, int, long);
static void 	rasops24_eraserows(void *, int, int, long);
static void 	rasops24_putchar(void *, int, int, u_int, long attr);
d54 4
a57 4
static void 	rasops24_putchar8(void *, int, int, u_int, long attr);
static void 	rasops24_putchar12(void *, int, int, u_int, long attr);
static void 	rasops24_putchar16(void *, int, int, u_int, long attr);
static void	rasops24_makestamp(struct rasops_info *, long);
d122 1
a122 1
static void
d206 1
a206 1
static void
d249 1
a249 1
static void
d330 1
a330 1
static void
d418 1
a418 1
static void
d514 1
a514 1
static void
d618 1
a618 1
static void
@


1.3
log
@make this compile; jason@@ ok.
@
text
@d1 2
a2 2
/*	$OpenBSD: rasops24.c,v 1.2 2002/03/14 01:27:02 millert Exp $ */
/* 	$NetBSD: rasops24.c,v 1.12 2000/04/12 14:22:29 pk Exp $	*/
a39 3
#include <sys/cdefs.h>

#include <sys/types.h>
a57 1
#endif
d65 1
d81 1
a81 1
 * Initalize rasops_info struct for this colordepth.
d373 1
a373 1
			rp[0] = rp[1] = rp[2] = rp[3] = 
d461 2
a462 2
			rp[0] = rp[1] = rp[2] = rp[3] = 
			rp[4] = rp[5] = rp[6] = rp[7] = 
d502 2
a503 2
		rp[0] = rp[1] = rp[2] = rp[3] = 
		rp[4] = rp[5] = rp[6] = rp[7] = 
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops24.c,v 1.1 2001/03/18 04:32:45 nate Exp $ */
a39 1
#include "opt_rasops.h"
a40 1
__KERNEL_RCSID(0, "$NetBSD: rasops24.c,v 1.12 2000/04/12 14:22:29 pk Exp $");
a47 1
#include <machine/bswap.h>
d242 3
a244 3
			stamp[i+0] = bswap32(stamp[i+0]);
			stamp[i+1] = bswap32(stamp[i+1]);
			stamp[i+2] = bswap32(stamp[i+2]);
d561 3
a563 3
		stamp[0] = bswap32(stamp[0]);
		stamp[1] = bswap32(stamp[1]);
		stamp[2] = bswap32(stamp[2]);
d674 3
a676 3
		stamp[0] = bswap32(stamp[0]);
		stamp[1] = bswap32(stamp[1]);
		stamp[2] = bswap32(stamp[2]);
d688 1
a688 1
	slop = (int)rp & 3;	num -= slop;
@


1.1
log
@Import rasops from NetBSD.  This gives improved performance for raster
operations.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d56 3
a58 3
static void 	rasops24_erasecols __P((void *, int, int, int, long));
static void 	rasops24_eraserows __P((void *, int, int, long));
static void 	rasops24_putchar __P((void *, int, int, u_int, long attr));
d60 4
a63 4
static void 	rasops24_putchar8 __P((void *, int, int, u_int, long attr));
static void 	rasops24_putchar12 __P((void *, int, int, u_int, long attr));
static void 	rasops24_putchar16 __P((void *, int, int, u_int, long attr));
static void	rasops24_makestamp __P((struct rasops_info *, long));
@


1.1.8.1
log
@Sync UBC branch to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: rasops24.c,v 1.12 2000/04/12 14:22:29 pk Exp $	*/
d40 5
d50 1
d56 3
a58 3
static void 	rasops24_erasecols(void *, int, int, int, long);
static void 	rasops24_eraserows(void *, int, int, long);
static void 	rasops24_putchar(void *, int, int, u_int, long attr);
d60 5
a64 4
static void 	rasops24_putchar8(void *, int, int, u_int, long attr);
static void 	rasops24_putchar12(void *, int, int, u_int, long attr);
static void 	rasops24_putchar16(void *, int, int, u_int, long attr);
static void	rasops24_makestamp(struct rasops_info *, long);
a71 1
#endif
d87 1
a87 1
 * Initialize rasops_info struct for this colordepth.
d245 3
a247 3
			stamp[i+0] = swap32(stamp[i+0]);
			stamp[i+1] = swap32(stamp[i+1]);
			stamp[i+2] = swap32(stamp[i+2]);
d379 1
a379 1
			rp[0] = rp[1] = rp[2] = rp[3] =
d467 2
a468 2
			rp[0] = rp[1] = rp[2] = rp[3] =
			rp[4] = rp[5] = rp[6] = rp[7] =
d508 2
a509 2
		rp[0] = rp[1] = rp[2] = rp[3] =
		rp[4] = rp[5] = rp[6] = rp[7] =
d564 3
a566 3
		stamp[0] = swap32(stamp[0]);
		stamp[1] = swap32(stamp[1]);
		stamp[2] = swap32(stamp[2]);
d677 3
a679 3
		stamp[0] = swap32(stamp[0]);
		stamp[1] = swap32(stamp[1]);
		stamp[2] = swap32(stamp[2]);
d691 1
a691 1
	slop = (long)rp & 3;	num -= slop;
@


1.1.8.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops24.c,v 1.1.8.1 2002/06/11 03:42:29 art Exp $	*/
d50 3
a52 3
void 	rasops24_erasecols(void *, int, int, int, long);
void 	rasops24_eraserows(void *, int, int, long);
void 	rasops24_putchar(void *, int, int, u_int, long attr);
d54 4
a57 4
void 	rasops24_putchar8(void *, int, int, u_int, long attr);
void 	rasops24_putchar12(void *, int, int, u_int, long attr);
void 	rasops24_putchar16(void *, int, int, u_int, long attr);
void	rasops24_makestamp(struct rasops_info *, long);
d122 1
a122 1
void
d206 1
a206 1
void
d249 1
a249 1
void
d330 1
a330 1
void
d418 1
a418 1
void
d514 1
a514 1
void
d618 1
a618 1
void
@


1.1.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops24.c,v 1.1 2001/03/18 04:32:45 nate Exp $ */
@


1.1.4.2
log
@Merge unpeeing cvs missed
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d56 3
a58 3
static void 	rasops24_erasecols(void *, int, int, int, long);
static void 	rasops24_eraserows(void *, int, int, long);
static void 	rasops24_putchar(void *, int, int, u_int, long attr);
d60 4
a63 4
static void 	rasops24_putchar8(void *, int, int, u_int, long attr);
static void 	rasops24_putchar12(void *, int, int, u_int, long attr);
static void 	rasops24_putchar16(void *, int, int, u_int, long attr);
static void	rasops24_makestamp(struct rasops_info *, long);
@


1.1.4.3
log
@Sync the SMP branch with 3.3
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: rasops24.c,v 1.12 2000/04/12 14:22:29 pk Exp $	*/
d40 5
d50 1
d56 3
a58 3
void 	rasops24_erasecols(void *, int, int, int, long);
void 	rasops24_eraserows(void *, int, int, long);
void 	rasops24_putchar(void *, int, int, u_int, long attr);
d60 5
a64 4
void 	rasops24_putchar8(void *, int, int, u_int, long attr);
void 	rasops24_putchar12(void *, int, int, u_int, long attr);
void 	rasops24_putchar16(void *, int, int, u_int, long attr);
void	rasops24_makestamp(struct rasops_info *, long);
a71 1
#endif
d87 1
a87 1
 * Initialize rasops_info struct for this colordepth.
d128 1
a128 1
void
d212 1
a212 1
void
d245 3
a247 3
			stamp[i+0] = swap32(stamp[i+0]);
			stamp[i+1] = swap32(stamp[i+1]);
			stamp[i+2] = swap32(stamp[i+2]);
d255 1
a255 1
void
d336 1
a336 1
void
d379 1
a379 1
			rp[0] = rp[1] = rp[2] = rp[3] =
d424 1
a424 1
void
d467 2
a468 2
			rp[0] = rp[1] = rp[2] = rp[3] =
			rp[4] = rp[5] = rp[6] = rp[7] =
d508 2
a509 2
		rp[0] = rp[1] = rp[2] = rp[3] =
		rp[4] = rp[5] = rp[6] = rp[7] =
d520 1
a520 1
void
d564 3
a566 3
		stamp[0] = swap32(stamp[0]);
		stamp[1] = swap32(stamp[1]);
		stamp[2] = swap32(stamp[2]);
d624 1
a624 1
void
d677 3
a679 3
		stamp[0] = swap32(stamp[0]);
		stamp[1] = swap32(stamp[1]);
		stamp[2] = swap32(stamp[2]);
d691 1
a691 1
	slop = (long)rp & 3;	num -= slop;
@


