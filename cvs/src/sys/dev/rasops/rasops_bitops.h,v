head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.24
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.14
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.22
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.20
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.18
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.16
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.12
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.10
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.8
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.6
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.8
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.0.10
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.2
	UBC:1.1.0.8
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.2;
locks; strict;
comment	@ * @;


1.6
date	2010.08.28.12.48.14;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2009.09.05.14.09.35;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.26.05.42.18;	author ray;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.12.20.53.59;	author henric;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.27.22.17.49;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.18.04.32.45;	author nate;	state Exp;
branches
	1.1.4.1
	1.1.8.1;
next	;

1.1.4.1
date	2001.05.14.22.26.16;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2003.03.28.00.38.29;	author niklas;	state Exp;
branches;
next	;

1.1.8.1
date	2002.10.29.00.33.31;	author art;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2003.05.19.22.21.53;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@ansify function definitions, and constify a few arrays while there.
no functional change.
@
text
@/*	$OpenBSD: rasops_bitops.h,v 1.5 2009/09/05 14:09:35 miod Exp $ */
/* 	$NetBSD: rasops_bitops.h,v 1.6 2000/04/12 14:22:30 pk Exp $	*/

/*-
 * Copyright (c) 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Andrew Doran.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _RASOPS_BITOPS_H_
#define _RASOPS_BITOPS_H_ 1

/*
 * Erase columns.
 */
int
NAME(erasecols)(void *cookie, int row, int col, int num, long attr)
{
	int lmask, rmask, lclr, rclr, clr;
	struct rasops_info *ri;
	int32_t *dp, *rp;
	int height, cnt;

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	if ((unsigned)row >= (unsigned)ri->ri_rows)
		return 0;

	if (col < 0) {
		num += col;
		col = 0;
	}

	if ((col + num) > ri->ri_cols)
		num = ri->ri_cols - col;

	if (num <= 0)
		return 0;
#endif
	col *= ri->ri_font->fontwidth << PIXEL_SHIFT;
	num *= ri->ri_font->fontwidth << PIXEL_SHIFT;
	height = ri->ri_font->fontheight;
	clr = ri->ri_devcmap[(attr >> 16) & 0xf];
	rp = (int32_t *)(ri->ri_bits + row*ri->ri_yscale + ((col >> 3) & ~3));

	if ((col & 31) + num <= 32) {
		lmask = ~rasops_pmask[col & 31][num];
		lclr = clr & ~lmask;

		while (height--) {
			dp = rp;
			DELTA(rp, ri->ri_stride, int32_t *);

			*dp = (*dp & lmask) | lclr;
		}
	} else {
		lmask = rasops_rmask[col & 31];
		rmask = rasops_lmask[(col + num) & 31];

		if (lmask)
			num = (num - (32 - (col & 31))) >> 5;
		else
			num = num >> 5;

		lclr = clr & ~lmask;
		rclr = clr & ~rmask;

		while (height--) {
			dp = rp;
			DELTA(rp, ri->ri_stride, int32_t *);

			if (lmask) {
				*dp = (*dp & lmask) | lclr;
				dp++;
			}

			for (cnt = num; cnt > 0; cnt--)
				*dp++ = clr;

			if (rmask)
				*dp = (*dp & rmask) | rclr;
		}
	}

	return 0;
}

/*
 * Actually paint the cursor.
 */
int
NAME(do_cursor)(struct rasops_info *ri)
{
	int lmask, rmask, height, row, col, num;
	int32_t *dp, *rp;

	row = ri->ri_crow;
	col = ri->ri_ccol * ri->ri_font->fontwidth << PIXEL_SHIFT;
	height = ri->ri_font->fontheight;
	num = ri->ri_font->fontwidth << PIXEL_SHIFT;
	rp = (int32_t *)(ri->ri_bits + row * ri->ri_yscale + ((col >> 3) & ~3));

	if ((col & 31) + num <= 32) {
		lmask = rasops_pmask[col & 31][num];

		while (height--) {
			dp = rp;
			DELTA(rp, ri->ri_stride, int32_t *);
			*dp ^= lmask;
		}
	} else {
		lmask = ~rasops_rmask[col & 31];
		rmask = ~rasops_lmask[(col + num) & 31];

		while (height--) {
			dp = rp;
			DELTA(rp, ri->ri_stride, int32_t *);

			if (lmask != -1)
				*dp++ ^= lmask;

			if (rmask != -1)
				*dp ^= rmask;
		}
	}

	return 0;
}

/*
 * Copy columns. Ick!
 */
int
NAME(copycols)(void *cookie, int row, int src, int dst, int num)
{
	int tmp, lmask, rmask, height, lnum, rnum, sb, db, cnt, full;
	int32_t *sp, *dp, *srp, *drp;
	struct rasops_info *ri;

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	if (dst == src)
		return 0;

	/* Catches < 0 case too */
	if ((unsigned)row >= (unsigned)ri->ri_rows)
		return 0;

	if (src < 0) {
		num += src;
		src = 0;
	}

	if ((src + num) > ri->ri_cols)
		num = ri->ri_cols - src;

	if (dst < 0) {
		num += dst;
		dst = 0;
	}

	if ((dst + num) > ri->ri_cols)
		num = ri->ri_cols - dst;

	if (num <= 0)
		return 0;
#endif

	cnt = ri->ri_font->fontwidth << PIXEL_SHIFT;
	src *= cnt;
	dst *= cnt;
	num *= cnt;
	row *= ri->ri_yscale;
	height = ri->ri_font->fontheight;
	db = dst & 31;

	if (db + num <= 32) {
		/* Destination is contained within a single word */
		srp = (int32_t *)(ri->ri_bits + row + ((src >> 3) & ~3));
		drp = (int32_t *)(ri->ri_bits + row + ((dst >> 3) & ~3));
		sb = src & 31;

		while (height--) {
			GETBITS(srp, sb, num, tmp);
			PUTBITS(tmp, db, num, drp);
			DELTA(srp, ri->ri_stride, int32_t *);
			DELTA(drp, ri->ri_stride, int32_t *);
		}

		return 0;
	}

	lmask = rasops_rmask[db];
	rmask = rasops_lmask[(dst + num) & 31];
	lnum = (32 - db) & 31;
	rnum = (dst + num) & 31;

	if (lmask)
		full = (num - (32 - (dst & 31))) >> 5;
	else
		full = num >> 5;

	if (src < dst && src + num > dst) {
		/* Copy right-to-left */
		sb = src & 31;
		src = src + num;
		dst = dst + num;
		srp = (int32_t *)(ri->ri_bits + row + ((src >> 3) & ~3));
		drp = (int32_t *)(ri->ri_bits + row + ((dst >> 3) & ~3));

		src = src & 31;
		rnum = 32 - lnum;
		db = dst & 31;

		if ((src -= db) < 0) {
			sp--;
			src += 32;
		}

		while (height--) {
			sp = srp;
			dp = drp;
			DELTA(srp, ri->ri_stride, int32_t *);
			DELTA(drp, ri->ri_stride, int32_t *);

			if (db) {
				GETBITS(sp, src, db, tmp);
				PUTBITS(tmp, 0, db, dp);
				dp--;
				sp--;
			}

			/* Now aligned to 32-bits wrt dp */
			for (cnt = full; cnt; cnt--, sp--) {
				GETBITS(sp, src, 32, tmp);
				*dp-- = tmp;
			}

			if (lmask) {
#if 0
				if (src > sb)
					sp++;
#endif
				GETBITS(sp, sb, lnum, tmp);
				PUTBITS(tmp, rnum, lnum, dp);
 			}
 		}
	} else {
		/* Copy left-to-right */
		srp = (int32_t *)(ri->ri_bits + row + ((src >> 3) & ~3));
		drp = (int32_t *)(ri->ri_bits + row + ((dst >> 3) & ~3));
		db = dst & 31;

		while (height--) {
			sb = src & 31;
			sp = srp;
			dp = drp;
			DELTA(srp, ri->ri_stride, int32_t *);
			DELTA(drp, ri->ri_stride, int32_t *);

			if (lmask) {
				GETBITS(sp, sb, lnum, tmp);
				PUTBITS(tmp, db, lnum, dp);
				dp++;

				if ((sb += lnum) > 31) {
					sp++;
					sb -= 32;
				}
			}

			/* Now aligned to 32-bits wrt dp */
			for (cnt = full; cnt; cnt--, sp++) {
				GETBITS(sp, sb, 32, tmp);
				*dp++ = tmp;
			}

			if (rmask) {
				GETBITS(sp, sb, rnum, tmp);
				PUTBITS(tmp, 0, rnum, dp);
 			}
 		}
 	}

	return 0;
}

#endif /* _RASOPS_BITOPS_H_ */
@


1.5
log
@Change the wsdisplay_emulops return types from void to int; emulops will now
return zero on success and nonzero on failure.
This commit only performs mechanical changes for the existing emulops to
always return zero.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops_bitops.h,v 1.4 2008/06/26 05:42:18 ray Exp $ */
d40 1
a40 4
NAME(erasecols)(cookie, row, col, num, attr)
	void *cookie;
	int row, col, num;
	long attr;
d116 1
a116 2
NAME(do_cursor)(ri)
	struct rasops_info *ri;
d158 1
a158 3
NAME(copycols)(cookie, row, src, dst, num)
	void *cookie;
	int row, src, dst, num;
@


1.4
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops_bitops.h,v 1.3 2003/02/12 20:53:59 henric Exp $ */
d39 1
a39 1
void
d54 1
a54 1
		return;
d65 1
a65 1
		return;
d111 2
d118 1
a118 1
void
d154 2
d161 1
a161 1
void
d174 1
a174 1
		return;
d178 1
a178 1
		return;
d197 1
a197 1
		return;
d221 1
a221 1
		return;
d315 2
@


1.3
log
@It is not clear that the order of operations will be what the programmer
intended.  (This fixes a gcc3 warning.)

ok jason, millert
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops_bitops.h,v 1.2 2002/07/27 22:17:49 miod Exp $ */
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.2
log
@Unstaticize functions, for my ddb sessions pleasure.
Plus it makes hangman more difficult.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops_bitops.h,v 1.1 2001/03/18 04:32:45 nate Exp $ */
d106 4
a109 2
			if (lmask)
				*dp++ = (*dp & lmask) | lclr;
@


1.1
log
@Import rasops from NetBSD.  This gives improved performance for raster
operations.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d46 1
a46 1
static void
d121 1
a121 1
static void
d162 1
a162 1
static void
@


1.1.8.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops_bitops.h,v 1.1 2001/03/18 04:32:45 nate Exp $ */
d46 1
a46 1
void
d121 1
a121 1
void
d162 1
a162 1
void
@


1.1.8.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d106 2
a107 4
			if (lmask) {
				*dp = (*dp & lmask) | lclr;
				dp++;
			}
@


1.1.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops_bitops.h,v 1.1 2001/03/18 04:32:45 nate Exp $ */
@


1.1.4.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d46 1
a46 1
void
d106 2
a107 4
			if (lmask) {
				*dp = (*dp & lmask) | lclr;
				dp++;
			}
d121 1
a121 1
void
d162 1
a162 1
void
@


