head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.24
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.26
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.22
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.12
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.20
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.18
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.16
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.14
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.12
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.10
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.6
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.8
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.8
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.16
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.14
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.12
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.10
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.0.10
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.2
	UBC:1.1.0.8
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.2;
locks; strict;
comment	@ * @;


1.5
date	2011.06.23.16.31.16;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.26.05.42.18;	author ray;	state Exp;
branches;
next	1.3;

1.3
date	2006.08.03.18.42.06;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.28.22.10.03;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.18.04.32.45;	author nate;	state Exp;
branches
	1.1.4.1
	1.1.8.1;
next	;

1.1.4.1
date	2001.05.14.22.26.16;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2003.03.28.00.38.29;	author niklas;	state Exp;
branches;
next	;

1.1.8.1
date	2002.06.11.03.42.29;	author art;	state Exp;
branches;
next	;


desc
@@


1.5
log
@a bit more ansi; ok tedu
@
text
@/*	$OpenBSD: rasops_masks.c,v 1.4 2008/06/26 05:42:18 ray Exp $	*/
/*	$NetBSD: rasops_masks.c,v 1.5 2000/06/13 13:37:00 ad Exp $	*/

/*-
 * Copyright (c) 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Andrew Doran.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "rasops_masks.h"

/* `ragged edge' bitmasks */
#if BYTE_ORDER == BIG_ENDIAN
const
#endif
int32_t rasops_lmask[32+1] = {
	0x00000000, 0x7fffffff, 0x3fffffff, 0x1fffffff,
	0x0fffffff, 0x07ffffff, 0x03ffffff, 0x01ffffff,
	0x00ffffff, 0x007fffff, 0x003fffff, 0x001fffff,
	0x000fffff, 0x0007ffff, 0x0003ffff, 0x0001ffff,
	0x0000ffff, 0x00007fff, 0x00003fff, 0x00001fff,
	0x00000fff, 0x000007ff, 0x000003ff, 0x000001ff,
	0x000000ff, 0x0000007f, 0x0000003f, 0x0000001f,
	0x0000000f, 0x00000007, 0x00000003, 0x00000001,
	0x00000000
};

#if BYTE_ORDER == BIG_ENDIAN
const
#endif
int32_t rasops_rmask[32+1] = {
	0x00000000, 0x80000000, 0xc0000000, 0xe0000000,
	0xf0000000, 0xf8000000, 0xfc000000, 0xfe000000,
	0xff000000, 0xff800000, 0xffc00000, 0xffe00000,
	0xfff00000, 0xfff80000, 0xfffc0000, 0xfffe0000,
	0xffff0000, 0xffff8000, 0xffffc000, 0xffffe000,
	0xfffff000, 0xfffff800, 0xfffffc00, 0xfffffe00,
	0xffffff00, 0xffffff80, 0xffffffc0, 0xffffffe0,
	0xfffffff0, 0xfffffff8, 0xfffffffc, 0xfffffffe,
	0xffffffff
};

/* Part bitmasks */
#if BYTE_ORDER == BIG_ENDIAN
const
#endif
int32_t rasops_pmask[32][32] = {
      { 0xffffffff, 0x80000000, 0xc0000000, 0xe0000000,
	0xf0000000, 0xf8000000, 0xfc000000, 0xfe000000,
	0xff000000, 0xff800000, 0xffc00000, 0xffe00000,
	0xfff00000, 0xfff80000, 0xfffc0000, 0xfffe0000,
	0xffff0000, 0xffff8000, 0xffffc000, 0xffffe000,
	0xfffff000, 0xfffff800, 0xfffffc00, 0xfffffe00,
	0xffffff00, 0xffffff80, 0xffffffc0, 0xffffffe0,
	0xfffffff0, 0xfffffff8, 0xfffffffc, 0xfffffffe },

      { 0x00000000, 0x40000000, 0x60000000, 0x70000000,
	0x78000000, 0x7c000000, 0x7e000000, 0x7f000000,
	0x7f800000, 0x7fc00000, 0x7fe00000, 0x7ff00000,
	0x7ff80000, 0x7ffc0000, 0x7ffe0000, 0x7fff0000,
	0x7fff8000, 0x7fffc000, 0x7fffe000, 0x7ffff000,
	0x7ffff800, 0x7ffffc00, 0x7ffffe00, 0x7fffff00,
	0x7fffff80, 0x7fffffc0, 0x7fffffe0, 0x7ffffff0,
	0x7ffffff8, 0x7ffffffc, 0x7ffffffe, 0x7fffffff },

      { 0x00000000, 0x20000000, 0x30000000, 0x38000000,
	0x3c000000, 0x3e000000, 0x3f000000, 0x3f800000,
	0x3fc00000, 0x3fe00000, 0x3ff00000, 0x3ff80000,
	0x3ffc0000, 0x3ffe0000, 0x3fff0000, 0x3fff8000,
	0x3fffc000, 0x3fffe000, 0x3ffff000, 0x3ffff800,
	0x3ffffc00, 0x3ffffe00, 0x3fffff00, 0x3fffff80,
	0x3fffffc0, 0x3fffffe0, 0x3ffffff0, 0x3ffffff8,
	0x3ffffffc, 0x3ffffffe, 0x3fffffff, 0x00000000 },

      { 0x00000000, 0x10000000, 0x18000000, 0x1c000000,
	0x1e000000, 0x1f000000, 0x1f800000, 0x1fc00000,
	0x1fe00000, 0x1ff00000, 0x1ff80000, 0x1ffc0000,
	0x1ffe0000, 0x1fff0000, 0x1fff8000, 0x1fffc000,
	0x1fffe000, 0x1ffff000, 0x1ffff800, 0x1ffffc00,
	0x1ffffe00, 0x1fffff00, 0x1fffff80, 0x1fffffc0,
	0x1fffffe0, 0x1ffffff0, 0x1ffffff8, 0x1ffffffc,
	0x1ffffffe, 0x1fffffff, 0x00000000, 0x00000000 },

      { 0x00000000, 0x08000000, 0x0c000000, 0x0e000000,
	0x0f000000, 0x0f800000, 0x0fc00000, 0x0fe00000,
	0x0ff00000, 0x0ff80000, 0x0ffc0000, 0x0ffe0000,
	0x0fff0000, 0x0fff8000, 0x0fffc000, 0x0fffe000,
	0x0ffff000, 0x0ffff800, 0x0ffffc00, 0x0ffffe00,
	0x0fffff00, 0x0fffff80, 0x0fffffc0, 0x0fffffe0,
	0x0ffffff0, 0x0ffffff8, 0x0ffffffc, 0x0ffffffe,
	0x0fffffff, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x04000000, 0x06000000, 0x07000000,
	0x07800000, 0x07c00000, 0x07e00000, 0x07f00000,
	0x07f80000, 0x07fc0000, 0x07fe0000, 0x07ff0000,
	0x07ff8000, 0x07ffc000, 0x07ffe000, 0x07fff000,
	0x07fff800, 0x07fffc00, 0x07fffe00, 0x07ffff00,
	0x07ffff80, 0x07ffffc0, 0x07ffffe0, 0x07fffff0,
	0x07fffff8, 0x07fffffc, 0x07fffffe, 0x07ffffff,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x02000000, 0x03000000, 0x03800000,
	0x03c00000, 0x03e00000, 0x03f00000, 0x03f80000,
	0x03fc0000, 0x03fe0000, 0x03ff0000, 0x03ff8000,
	0x03ffc000, 0x03ffe000, 0x03fff000, 0x03fff800,
	0x03fffc00, 0x03fffe00, 0x03ffff00, 0x03ffff80,
	0x03ffffc0, 0x03ffffe0, 0x03fffff0, 0x03fffff8,
	0x03fffffc, 0x03fffffe, 0x03ffffff, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x01000000, 0x01800000, 0x01c00000,
	0x01e00000, 0x01f00000, 0x01f80000, 0x01fc0000,
	0x01fe0000, 0x01ff0000, 0x01ff8000, 0x01ffc000,
	0x01ffe000, 0x01fff000, 0x01fff800, 0x01fffc00,
	0x01fffe00, 0x01ffff00, 0x01ffff80, 0x01ffffc0,
	0x01ffffe0, 0x01fffff0, 0x01fffff8, 0x01fffffc,
	0x01fffffe, 0x01ffffff, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00800000, 0x00c00000, 0x00e00000,
	0x00f00000, 0x00f80000, 0x00fc0000, 0x00fe0000,
	0x00ff0000, 0x00ff8000, 0x00ffc000, 0x00ffe000,
	0x00fff000, 0x00fff800, 0x00fffc00, 0x00fffe00,
	0x00ffff00, 0x00ffff80, 0x00ffffc0, 0x00ffffe0,
	0x00fffff0, 0x00fffff8, 0x00fffffc, 0x00fffffe,
	0x00ffffff, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00400000, 0x00600000, 0x00700000,
	0x00780000, 0x007c0000, 0x007e0000, 0x007f0000,
	0x007f8000, 0x007fc000, 0x007fe000, 0x007ff000,
	0x007ff800, 0x007ffc00, 0x007ffe00, 0x007fff00,
	0x007fff80, 0x007fffc0, 0x007fffe0, 0x007ffff0,
	0x007ffff8, 0x007ffffc, 0x007ffffe, 0x007fffff,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00200000, 0x00300000, 0x00380000,
	0x003c0000, 0x003e0000, 0x003f0000, 0x003f8000,
	0x003fc000, 0x003fe000, 0x003ff000, 0x003ff800,
	0x003ffc00, 0x003ffe00, 0x003fff00, 0x003fff80,
	0x003fffc0, 0x003fffe0, 0x003ffff0, 0x003ffff8,
	0x003ffffc, 0x003ffffe, 0x003fffff, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00100000, 0x00180000, 0x001c0000,
	0x001e0000, 0x001f0000, 0x001f8000, 0x001fc000,
	0x001fe000, 0x001ff000, 0x001ff800, 0x001ffc00,
	0x001ffe00, 0x001fff00, 0x001fff80, 0x001fffc0,
	0x001fffe0, 0x001ffff0, 0x001ffff8, 0x001ffffc,
	0x001ffffe, 0x001fffff, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00080000, 0x000c0000, 0x000e0000,
	0x000f0000, 0x000f8000, 0x000fc000, 0x000fe000,
	0x000ff000, 0x000ff800, 0x000ffc00, 0x000ffe00,
	0x000fff00, 0x000fff80, 0x000fffc0, 0x000fffe0,
	0x000ffff0, 0x000ffff8, 0x000ffffc, 0x000ffffe,
	0x000fffff, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00040000, 0x00060000, 0x00070000,
	0x00078000, 0x0007c000, 0x0007e000, 0x0007f000,
	0x0007f800, 0x0007fc00, 0x0007fe00, 0x0007ff00,
	0x0007ff80, 0x0007ffc0, 0x0007ffe0, 0x0007fff0,
	0x0007fff8, 0x0007fffc, 0x0007fffe, 0x0007ffff,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00020000, 0x00030000, 0x00038000,
	0x0003c000, 0x0003e000, 0x0003f000, 0x0003f800,
	0x0003fc00, 0x0003fe00, 0x0003ff00, 0x0003ff80,
	0x0003ffc0, 0x0003ffe0, 0x0003fff0, 0x0003fff8,
	0x0003fffc, 0x0003fffe, 0x0003ffff, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00010000, 0x00018000, 0x0001c000,
	0x0001e000, 0x0001f000, 0x0001f800, 0x0001fc00,
	0x0001fe00, 0x0001ff00, 0x0001ff80, 0x0001ffc0,
	0x0001ffe0, 0x0001fff0, 0x0001fff8, 0x0001fffc,
	0x0001fffe, 0x0001ffff, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00008000, 0x0000c000, 0x0000e000,
	0x0000f000, 0x0000f800, 0x0000fc00, 0x0000fe00,
	0x0000ff00, 0x0000ff80, 0x0000ffc0, 0x0000ffe0,
	0x0000fff0, 0x0000fff8, 0x0000fffc, 0x0000fffe,
	0x0000ffff, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00004000, 0x00006000, 0x00007000,
	0x00007800, 0x00007c00, 0x00007e00, 0x00007f00,
	0x00007f80, 0x00007fc0, 0x00007fe0, 0x00007ff0,
	0x00007ff8, 0x00007ffc, 0x00007ffe, 0x00007fff,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00002000, 0x00003000, 0x00003800,
	0x00003c00, 0x00003e00, 0x00003f00, 0x00003f80,
	0x00003fc0, 0x00003fe0, 0x00003ff0, 0x00003ff8,
	0x00003ffc, 0x00003ffe, 0x00003fff, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00001000, 0x00001800, 0x00001c00,
	0x00001e00, 0x00001f00, 0x00001f80, 0x00001fc0,
	0x00001fe0, 0x00001ff0, 0x00001ff8, 0x00001ffc,
	0x00001ffe, 0x00001fff, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00000800, 0x00000c00, 0x00000e00,
	0x00000f00, 0x00000f80, 0x00000fc0, 0x00000fe0,
	0x00000ff0, 0x00000ff8, 0x00000ffc, 0x00000ffe,
	0x00000fff, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00000400, 0x00000600, 0x00000700,
	0x00000780, 0x000007c0, 0x000007e0, 0x000007f0,
	0x000007f8, 0x000007fc, 0x000007fe, 0x000007ff,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00000200, 0x00000300, 0x00000380,
	0x000003c0, 0x000003e0, 0x000003f0, 0x000003f8,
	0x000003fc, 0x000003fe, 0x000003ff, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00000100, 0x00000180, 0x000001c0,
	0x000001e0, 0x000001f0, 0x000001f8, 0x000001fc,
	0x000001fe, 0x000001ff, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00000080, 0x000000c0, 0x000000e0,
	0x000000f0, 0x000000f8, 0x000000fc, 0x000000fe,
	0x000000ff, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },
     { 0x00000000, 0x00000040, 0x00000060, 0x00000070,
	0x00000078, 0x0000007c, 0x0000007e, 0x0000007f,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00000020, 0x00000030, 0x00000038,
	0x0000003c, 0x0000003e, 0x0000003f, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00000010, 0x00000018, 0x0000001c,
	0x0000001e, 0x0000001f, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00000008, 0x0000000c, 0x0000000e,
	0x0000000f, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00000004, 0x00000006, 0x00000007,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00000002, 0x00000003, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 },

      { 0x00000000, 0x00000001, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000 }
};

#if BYTE_ORDER != BIG_ENDIAN
void
rasops_masks_init(void)
{
	static int flipped = 0;
	u_int i;
	u_int32_t *mask;

	if (flipped != 0)
		return;

	mask = (u_int32_t *)rasops_lmask;
	for (i = 0; i < sizeof(rasops_lmask) / sizeof(int32_t); i++)
		*mask++ = MBE(*mask);
	mask = (u_int32_t *)rasops_rmask;
	for (i = 0; i < sizeof(rasops_rmask) / sizeof(int32_t); i++)
		*mask++ = MBE(*mask);
	mask = (u_int32_t *)rasops_pmask;
	for (i = 0; i < sizeof(rasops_pmask) / sizeof(int32_t); i++)
		*mask++ = MBE(*mask);

	flipped = 1;
}
#endif
@


1.4
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops_masks.c,v 1.3 2006/08/03 18:42:06 miod Exp $	*/
d361 1
a361 1
rasops_masks_init()
@


1.3
log
@Since rasops is big-endian internally (because it's the logical choice
for frame buffer work), it is no surprise that the less-than-8-bpp code
is completely wrong when run on a little endian machine, and only works
by accident if character cells are 8-bit wide.

Fix the BE<->LE conversions, so that now rasops1 works in all cases.
rasops2 and rasops4 might still need some help, but I'm not in a hurry to
meet a 4bpp big-endian frame buffer on a little-endian system...
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops_masks.c,v 1.2 2002/05/28 22:10:03 fgsch Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.2
log
@o spaces, tabs, spelling cleanup.
o remove unneeded headers.
o makes this to compile if RASOPS_SMALL is defined.
o makes rasops2 to compile.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops_masks.c,v 1.1 2001/03/18 04:32:45 nate Exp $	*/
d43 13
a55 10
const int32_t rasops_lmask[32+1] = {
	MBE(0x00000000), MBE(0x7fffffff), MBE(0x3fffffff), MBE(0x1fffffff),
	MBE(0x0fffffff), MBE(0x07ffffff), MBE(0x03ffffff), MBE(0x01ffffff),
	MBE(0x00ffffff), MBE(0x007fffff), MBE(0x003fffff), MBE(0x001fffff),
	MBE(0x000fffff), MBE(0x0007ffff), MBE(0x0003ffff), MBE(0x0001ffff),
	MBE(0x0000ffff), MBE(0x00007fff), MBE(0x00003fff), MBE(0x00001fff),
	MBE(0x00000fff), MBE(0x000007ff), MBE(0x000003ff), MBE(0x000001ff),
	MBE(0x000000ff), MBE(0x0000007f), MBE(0x0000003f), MBE(0x0000001f),
	MBE(0x0000000f), MBE(0x00000007), MBE(0x00000003), MBE(0x00000001),
	MBE(0x00000000)
d58 13
a70 10
const int32_t rasops_rmask[32+1] = {
	MBE(0x00000000), MBE(0x80000000), MBE(0xc0000000), MBE(0xe0000000),
	MBE(0xf0000000), MBE(0xf8000000), MBE(0xfc000000), MBE(0xfe000000),
	MBE(0xff000000), MBE(0xff800000), MBE(0xffc00000), MBE(0xffe00000),
	MBE(0xfff00000), MBE(0xfff80000), MBE(0xfffc0000), MBE(0xfffe0000),
	MBE(0xffff0000), MBE(0xffff8000), MBE(0xffffc000), MBE(0xffffe000),
	MBE(0xfffff000), MBE(0xfffff800), MBE(0xfffffc00), MBE(0xfffffe00),
	MBE(0xffffff00), MBE(0xffffff80), MBE(0xffffffc0), MBE(0xffffffe0),
	MBE(0xfffffff0), MBE(0xfffffff8), MBE(0xfffffffc), MBE(0xfffffffe),
	MBE(0xffffffff)
d74 290
a363 287
const int32_t rasops_pmask[32][32] = {
      { MBE(0xffffffff), MBE(0x80000000), MBE(0xc0000000), MBE(0xe0000000),
	MBE(0xf0000000), MBE(0xf8000000), MBE(0xfc000000), MBE(0xfe000000),
	MBE(0xff000000), MBE(0xff800000), MBE(0xffc00000), MBE(0xffe00000),
	MBE(0xfff00000), MBE(0xfff80000), MBE(0xfffc0000), MBE(0xfffe0000),
	MBE(0xffff0000), MBE(0xffff8000), MBE(0xffffc000), MBE(0xffffe000),
	MBE(0xfffff000), MBE(0xfffff800), MBE(0xfffffc00), MBE(0xfffffe00),
	MBE(0xffffff00), MBE(0xffffff80), MBE(0xffffffc0), MBE(0xffffffe0),
	MBE(0xfffffff0), MBE(0xfffffff8), MBE(0xfffffffc), MBE(0xfffffffe), },

      { MBE(0x00000000), MBE(0x40000000), MBE(0x60000000), MBE(0x70000000),
	MBE(0x78000000), MBE(0x7c000000), MBE(0x7e000000), MBE(0x7f000000),
	MBE(0x7f800000), MBE(0x7fc00000), MBE(0x7fe00000), MBE(0x7ff00000),
	MBE(0x7ff80000), MBE(0x7ffc0000), MBE(0x7ffe0000), MBE(0x7fff0000),
	MBE(0x7fff8000), MBE(0x7fffc000), MBE(0x7fffe000), MBE(0x7ffff000),
	MBE(0x7ffff800), MBE(0x7ffffc00), MBE(0x7ffffe00), MBE(0x7fffff00),
	MBE(0x7fffff80), MBE(0x7fffffc0), MBE(0x7fffffe0), MBE(0x7ffffff0),
	MBE(0x7ffffff8), MBE(0x7ffffffc), MBE(0x7ffffffe), MBE(0x7fffffff), },

      { MBE(0x00000000), MBE(0x20000000), MBE(0x30000000), MBE(0x38000000),
	MBE(0x3c000000), MBE(0x3e000000), MBE(0x3f000000), MBE(0x3f800000),
	MBE(0x3fc00000), MBE(0x3fe00000), MBE(0x3ff00000), MBE(0x3ff80000),
	MBE(0x3ffc0000), MBE(0x3ffe0000), MBE(0x3fff0000), MBE(0x3fff8000),
	MBE(0x3fffc000), MBE(0x3fffe000), MBE(0x3ffff000), MBE(0x3ffff800),
	MBE(0x3ffffc00), MBE(0x3ffffe00), MBE(0x3fffff00), MBE(0x3fffff80),
	MBE(0x3fffffc0), MBE(0x3fffffe0), MBE(0x3ffffff0), MBE(0x3ffffff8),
	MBE(0x3ffffffc), MBE(0x3ffffffe), MBE(0x3fffffff), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x10000000), MBE(0x18000000), MBE(0x1c000000),
	MBE(0x1e000000), MBE(0x1f000000), MBE(0x1f800000), MBE(0x1fc00000),
	MBE(0x1fe00000), MBE(0x1ff00000), MBE(0x1ff80000), MBE(0x1ffc0000),
	MBE(0x1ffe0000), MBE(0x1fff0000), MBE(0x1fff8000), MBE(0x1fffc000),
	MBE(0x1fffe000), MBE(0x1ffff000), MBE(0x1ffff800), MBE(0x1ffffc00),
	MBE(0x1ffffe00), MBE(0x1fffff00), MBE(0x1fffff80), MBE(0x1fffffc0),
	MBE(0x1fffffe0), MBE(0x1ffffff0), MBE(0x1ffffff8), MBE(0x1ffffffc),
	MBE(0x1ffffffe), MBE(0x1fffffff), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x08000000), MBE(0x0c000000), MBE(0x0e000000),
	MBE(0x0f000000), MBE(0x0f800000), MBE(0x0fc00000), MBE(0x0fe00000),
	MBE(0x0ff00000), MBE(0x0ff80000), MBE(0x0ffc0000), MBE(0x0ffe0000),
	MBE(0x0fff0000), MBE(0x0fff8000), MBE(0x0fffc000), MBE(0x0fffe000),
	MBE(0x0ffff000), MBE(0x0ffff800), MBE(0x0ffffc00), MBE(0x0ffffe00),
	MBE(0x0fffff00), MBE(0x0fffff80), MBE(0x0fffffc0), MBE(0x0fffffe0),
	MBE(0x0ffffff0), MBE(0x0ffffff8), MBE(0x0ffffffc), MBE(0x0ffffffe),
	MBE(0x0fffffff), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x04000000), MBE(0x06000000), MBE(0x07000000),
	MBE(0x07800000), MBE(0x07c00000), MBE(0x07e00000), MBE(0x07f00000),
	MBE(0x07f80000), MBE(0x07fc0000), MBE(0x07fe0000), MBE(0x07ff0000),
	MBE(0x07ff8000), MBE(0x07ffc000), MBE(0x07ffe000), MBE(0x07fff000),
	MBE(0x07fff800), MBE(0x07fffc00), MBE(0x07fffe00), MBE(0x07ffff00),
	MBE(0x07ffff80), MBE(0x07ffffc0), MBE(0x07ffffe0), MBE(0x07fffff0),
	MBE(0x07fffff8), MBE(0x07fffffc), MBE(0x07fffffe), MBE(0x07ffffff),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x02000000), MBE(0x03000000), MBE(0x03800000),
	MBE(0x03c00000), MBE(0x03e00000), MBE(0x03f00000), MBE(0x03f80000),
	MBE(0x03fc0000), MBE(0x03fe0000), MBE(0x03ff0000), MBE(0x03ff8000),
	MBE(0x03ffc000), MBE(0x03ffe000), MBE(0x03fff000), MBE(0x03fff800),
	MBE(0x03fffc00), MBE(0x03fffe00), MBE(0x03ffff00), MBE(0x03ffff80),
	MBE(0x03ffffc0), MBE(0x03ffffe0), MBE(0x03fffff0), MBE(0x03fffff8),
	MBE(0x03fffffc), MBE(0x03fffffe), MBE(0x03ffffff), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x01000000), MBE(0x01800000), MBE(0x01c00000),
	MBE(0x01e00000), MBE(0x01f00000), MBE(0x01f80000), MBE(0x01fc0000),
	MBE(0x01fe0000), MBE(0x01ff0000), MBE(0x01ff8000), MBE(0x01ffc000),
	MBE(0x01ffe000), MBE(0x01fff000), MBE(0x01fff800), MBE(0x01fffc00),
	MBE(0x01fffe00), MBE(0x01ffff00), MBE(0x01ffff80), MBE(0x01ffffc0),
	MBE(0x01ffffe0), MBE(0x01fffff0), MBE(0x01fffff8), MBE(0x01fffffc),
	MBE(0x01fffffe), MBE(0x01ffffff), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00800000), MBE(0x00c00000), MBE(0x00e00000),
	MBE(0x00f00000), MBE(0x00f80000), MBE(0x00fc0000), MBE(0x00fe0000),
	MBE(0x00ff0000), MBE(0x00ff8000), MBE(0x00ffc000), MBE(0x00ffe000),
	MBE(0x00fff000), MBE(0x00fff800), MBE(0x00fffc00), MBE(0x00fffe00),
	MBE(0x00ffff00), MBE(0x00ffff80), MBE(0x00ffffc0), MBE(0x00ffffe0),
	MBE(0x00fffff0), MBE(0x00fffff8), MBE(0x00fffffc), MBE(0x00fffffe),
	MBE(0x00ffffff), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00400000), MBE(0x00600000), MBE(0x00700000),
	MBE(0x00780000), MBE(0x007c0000), MBE(0x007e0000), MBE(0x007f0000),
	MBE(0x007f8000), MBE(0x007fc000), MBE(0x007fe000), MBE(0x007ff000),
	MBE(0x007ff800), MBE(0x007ffc00), MBE(0x007ffe00), MBE(0x007fff00),
	MBE(0x007fff80), MBE(0x007fffc0), MBE(0x007fffe0), MBE(0x007ffff0),
	MBE(0x007ffff8), MBE(0x007ffffc), MBE(0x007ffffe), MBE(0x007fffff),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00200000), MBE(0x00300000), MBE(0x00380000),
	MBE(0x003c0000), MBE(0x003e0000), MBE(0x003f0000), MBE(0x003f8000),
	MBE(0x003fc000), MBE(0x003fe000), MBE(0x003ff000), MBE(0x003ff800),
	MBE(0x003ffc00), MBE(0x003ffe00), MBE(0x003fff00), MBE(0x003fff80),
	MBE(0x003fffc0), MBE(0x003fffe0), MBE(0x003ffff0), MBE(0x003ffff8),
	MBE(0x003ffffc), MBE(0x003ffffe), MBE(0x003fffff), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00100000), MBE(0x00180000), MBE(0x001c0000),
	MBE(0x001e0000), MBE(0x001f0000), MBE(0x001f8000), MBE(0x001fc000),
	MBE(0x001fe000), MBE(0x001ff000), MBE(0x001ff800), MBE(0x001ffc00),
	MBE(0x001ffe00), MBE(0x001fff00), MBE(0x001fff80), MBE(0x001fffc0),
	MBE(0x001fffe0), MBE(0x001ffff0), MBE(0x001ffff8), MBE(0x001ffffc),
	MBE(0x001ffffe), MBE(0x001fffff), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00080000), MBE(0x000c0000), MBE(0x000e0000),
	MBE(0x000f0000), MBE(0x000f8000), MBE(0x000fc000), MBE(0x000fe000),
	MBE(0x000ff000), MBE(0x000ff800), MBE(0x000ffc00), MBE(0x000ffe00),
	MBE(0x000fff00), MBE(0x000fff80), MBE(0x000fffc0), MBE(0x000fffe0),
	MBE(0x000ffff0), MBE(0x000ffff8), MBE(0x000ffffc), MBE(0x000ffffe),
	MBE(0x000fffff), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00040000), MBE(0x00060000), MBE(0x00070000),
	MBE(0x00078000), MBE(0x0007c000), MBE(0x0007e000), MBE(0x0007f000),
	MBE(0x0007f800), MBE(0x0007fc00), MBE(0x0007fe00), MBE(0x0007ff00),
	MBE(0x0007ff80), MBE(0x0007ffc0), MBE(0x0007ffe0), MBE(0x0007fff0),
	MBE(0x0007fff8), MBE(0x0007fffc), MBE(0x0007fffe), MBE(0x0007ffff),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00020000), MBE(0x00030000), MBE(0x00038000),
	MBE(0x0003c000), MBE(0x0003e000), MBE(0x0003f000), MBE(0x0003f800),
	MBE(0x0003fc00), MBE(0x0003fe00), MBE(0x0003ff00), MBE(0x0003ff80),
	MBE(0x0003ffc0), MBE(0x0003ffe0), MBE(0x0003fff0), MBE(0x0003fff8),
	MBE(0x0003fffc), MBE(0x0003fffe), MBE(0x0003ffff), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00010000), MBE(0x00018000), MBE(0x0001c000),
	MBE(0x0001e000), MBE(0x0001f000), MBE(0x0001f800), MBE(0x0001fc00),
	MBE(0x0001fe00), MBE(0x0001ff00), MBE(0x0001ff80), MBE(0x0001ffc0),
	MBE(0x0001ffe0), MBE(0x0001fff0), MBE(0x0001fff8), MBE(0x0001fffc),
	MBE(0x0001fffe), MBE(0x0001ffff), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00008000), MBE(0x0000c000), MBE(0x0000e000),
	MBE(0x0000f000), MBE(0x0000f800), MBE(0x0000fc00), MBE(0x0000fe00),
	MBE(0x0000ff00), MBE(0x0000ff80), MBE(0x0000ffc0), MBE(0x0000ffe0),
	MBE(0x0000fff0), MBE(0x0000fff8), MBE(0x0000fffc), MBE(0x0000fffe),
	MBE(0x0000ffff), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00004000), MBE(0x00006000), MBE(0x00007000),
	MBE(0x00007800), MBE(0x00007c00), MBE(0x00007e00), MBE(0x00007f00),
	MBE(0x00007f80), MBE(0x00007fc0), MBE(0x00007fe0), MBE(0x00007ff0),
	MBE(0x00007ff8), MBE(0x00007ffc), MBE(0x00007ffe), MBE(0x00007fff),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00002000), MBE(0x00003000), MBE(0x00003800),
	MBE(0x00003c00), MBE(0x00003e00), MBE(0x00003f00), MBE(0x00003f80),
	MBE(0x00003fc0), MBE(0x00003fe0), MBE(0x00003ff0), MBE(0x00003ff8),
	MBE(0x00003ffc), MBE(0x00003ffe), MBE(0x00003fff), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00001000), MBE(0x00001800), MBE(0x00001c00),
	MBE(0x00001e00), MBE(0x00001f00), MBE(0x00001f80), MBE(0x00001fc0),
	MBE(0x00001fe0), MBE(0x00001ff0), MBE(0x00001ff8), MBE(0x00001ffc),
	MBE(0x00001ffe), MBE(0x00001fff), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00000800), MBE(0x00000c00), MBE(0x00000e00),
	MBE(0x00000f00), MBE(0x00000f80), MBE(0x00000fc0), MBE(0x00000fe0),
	MBE(0x00000ff0), MBE(0x00000ff8), MBE(0x00000ffc), MBE(0x00000ffe),
	MBE(0x00000fff), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00000400), MBE(0x00000600), MBE(0x00000700),
	MBE(0x00000780), MBE(0x000007c0), MBE(0x000007e0), MBE(0x000007f0),
	MBE(0x000007f8), MBE(0x000007fc), MBE(0x000007fe), MBE(0x000007ff),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00000200), MBE(0x00000300), MBE(0x00000380),
	MBE(0x000003c0), MBE(0x000003e0), MBE(0x000003f0), MBE(0x000003f8),
	MBE(0x000003fc), MBE(0x000003fe), MBE(0x000003ff), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00000100), MBE(0x00000180), MBE(0x000001c0),
	MBE(0x000001e0), MBE(0x000001f0), MBE(0x000001f8), MBE(0x000001fc),
	MBE(0x000001fe), MBE(0x000001ff), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00000080), MBE(0x000000c0), MBE(0x000000e0),
	MBE(0x000000f0), MBE(0x000000f8), MBE(0x000000fc), MBE(0x000000fe),
	MBE(0x000000ff), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },
     { MBE(0x00000000), MBE(0x00000040), MBE(0x00000060), MBE(0x00000070),
	MBE(0x00000078), MBE(0x0000007c), MBE(0x0000007e), MBE(0x0000007f),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00000020), MBE(0x00000030), MBE(0x00000038),
	MBE(0x0000003c), MBE(0x0000003e), MBE(0x0000003f), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00000010), MBE(0x00000018), MBE(0x0000001c),
	MBE(0x0000001e), MBE(0x0000001f), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00000008), MBE(0x0000000c), MBE(0x0000000e),
	MBE(0x0000000f), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00000004), MBE(0x00000006), MBE(0x00000007),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00000002), MBE(0x00000003), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },

      { MBE(0x00000000), MBE(0x00000001), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000),
	MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), MBE(0x00000000), },
d365 25
@


1.1
log
@Import rasops from NetBSD.  This gives improved performance for raster
operations.
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/* 	$NetBSD: rasops_masks.c,v 1.5 2000/06/13 13:37:00 ad Exp $	*/
@


1.1.8.1
log
@Sync UBC branch to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: rasops_masks.c,v 1.5 2000/06/13 13:37:00 ad Exp $	*/
@


1.1.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops_masks.c,v 1.1 2001/03/18 04:32:45 nate Exp $ */
@


1.1.4.2
log
@Sync the SMP branch with 3.3
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: rasops_masks.c,v 1.5 2000/06/13 13:37:00 ad Exp $	*/
@


