head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.24
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.14
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.22
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.20
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.18
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.8
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.6
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.4
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.2
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.6.0.18
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.16
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.14
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.12
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.10
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.8
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.6
	UBC:1.1.0.8
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.2;
locks; strict;
comment	@ * @;


1.10
date	2010.08.28.12.48.14;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2009.09.05.14.09.35;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.26.05.42.18;	author ray;	state Exp;
branches;
next	1.7;

1.7
date	2006.12.02.15.55.18;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.27.22.17.49;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.25.19.18.44;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.29.00.22.10;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.28.22.10.03;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.27.02;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.18.04.32.45;	author nate;	state Exp;
branches
	1.1.4.1
	1.1.8.1;
next	;

1.1.4.1
date	2001.05.14.22.26.16;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2002.03.30.08.19.20;	author niklas;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2003.03.28.00.38.29;	author niklas;	state Exp;
branches;
next	;

1.1.8.1
date	2002.06.11.03.42.29;	author art;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2002.10.29.00.33.31;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@ansify function definitions, and constify a few arrays while there.
no functional change.
@
text
@/*	$OpenBSD: rasops8.c,v 1.9 2009/09/05 14:09:35 miod Exp $	*/
/*	$NetBSD: rasops8.c,v 1.8 2000/04/12 14:22:29 pk Exp $	*/

/*-
 * Copyright (c) 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Andrew Doran.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/time.h>

#include <dev/wscons/wsdisplayvar.h>
#include <dev/wscons/wsconsio.h>
#include <dev/rasops/rasops.h>

int 	rasops8_putchar(void *, int, int, u_int, long attr);
#ifndef RASOPS_SMALL
int 	rasops8_putchar8(void *, int, int, u_int, long attr);
int 	rasops8_putchar12(void *, int, int, u_int, long attr);
int 	rasops8_putchar16(void *, int, int, u_int, long attr);
void	rasops8_makestamp(struct rasops_info *ri, long);

/*
 * 4x1 stamp for optimized character blitting
 */
static int32_t	stamp[16];
static long	stamp_attr;
static int	stamp_mutex;	/* XXX see note in README */
#endif

/*
 * XXX this confuses the hell out of gcc2 (not egcs) which always insists
 * that the shift count is negative.
 *
 * offset = STAMP_SHIFT(fontbits, nibble #) & STAMP_MASK
 * destination = STAMP_READ(offset)
 */
#define STAMP_SHIFT(fb,n)	((n*4-2) >= 0 ? (fb)>>(n*4-2):(fb)<<-(n*4-2))
#define STAMP_MASK		(0xf << 2)
#define STAMP_READ(o)		(*(int32_t *)((caddr_t)stamp + (o)))

/*
 * Initialize a 'rasops_info' descriptor for this depth.
 */
void
rasops8_init(struct rasops_info *ri)
{

	switch (ri->ri_font->fontwidth) {
#ifndef RASOPS_SMALL
	case 8:
		ri->ri_ops.putchar = rasops8_putchar8;
		break;
	case 12:
		ri->ri_ops.putchar = rasops8_putchar12;
		break;
	case 16:
		ri->ri_ops.putchar = rasops8_putchar16;
		break;
#endif /* !RASOPS_SMALL */
	default:
		ri->ri_ops.putchar = rasops8_putchar;
		break;
	}
}

/*
 * Put a single character.
 */
int
rasops8_putchar(void *cookie, int row, int col, u_int uc, long attr)
{
	int width, height, cnt, fs, fb;
	u_char *dp, *rp, *fr, clr[2];
	struct rasops_info *ri;

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	/* Catches 'row < 0' case too */
	if ((unsigned)row >= (unsigned)ri->ri_rows)
		return 0;

	if ((unsigned)col >= (unsigned)ri->ri_cols)
		return 0;
#endif
	rp = ri->ri_bits + row * ri->ri_yscale + col * ri->ri_xscale;

	height = ri->ri_font->fontheight;
	width = ri->ri_font->fontwidth;
	clr[0] = (u_char)ri->ri_devcmap[(attr >> 16) & 0xf];
	clr[1] = (u_char)ri->ri_devcmap[(attr >> 24) & 0xf];

	if (uc == ' ') {
		u_char c = clr[0];

		while (height--) {
			dp = rp;
			rp += ri->ri_stride;

			for (cnt = width; cnt; cnt--)
				*dp++ = c;
		}
	} else {
		uc -= ri->ri_font->firstchar;
		fr = (u_char *)ri->ri_font->data + uc * ri->ri_fontscale;
		fs = ri->ri_font->stride;

		while (height--) {
			dp = rp;
			fb = fr[3] | (fr[2] << 8) | (fr[1] << 16) | (fr[0] << 24);
			fr += fs;
			rp += ri->ri_stride;

			for (cnt = width; cnt; cnt--) {
				*dp++ = clr[(fb >> 31) & 1];
				fb <<= 1;
			}
		}
	}

	/* Do underline */
	if ((attr & 1) != 0) {
		u_char c = clr[1];

		rp -= (ri->ri_stride << 1);

		while (width--)
			*rp++ = c;
	}

	return 0;
}

#ifndef RASOPS_SMALL
/*
 * Recompute the 4x1 blitting stamp.
 */
void
rasops8_makestamp(struct rasops_info *ri, long attr)
{
	int32_t fg, bg;
	int i;

	fg = ri->ri_devcmap[(attr >> 24) & 0xf] & 0xff;
	bg = ri->ri_devcmap[(attr >> 16) & 0xf] & 0xff;
	stamp_attr = attr;

	for (i = 0; i < 16; i++) {
#if BYTE_ORDER == LITTLE_ENDIAN
		stamp[i] = (i & 8 ? fg : bg);
		stamp[i] |= ((i & 4 ? fg : bg) << 8);
		stamp[i] |= ((i & 2 ? fg : bg) << 16);
		stamp[i] |= ((i & 1 ? fg : bg) << 24);
#else
		stamp[i] = (i & 1 ? fg : bg);
		stamp[i] |= ((i & 2 ? fg : bg) << 8);
		stamp[i] |= ((i & 4 ? fg : bg) << 16);
		stamp[i] |= ((i & 8 ? fg : bg) << 24);
#endif
#if NRASOPS_BSWAP > 0
		if (ri->ri_flg & RI_BSWAP)
			stamp[i] = swap32(stamp[i]);
#endif
	}
}

/*
 * Put a single character. This is for 8-pixel wide fonts.
 */
int
rasops8_putchar8(void *cookie, int row, int col, u_int uc, long attr)
{
	struct rasops_info *ri;
	int height, fs;
	int32_t *rp;
	u_char *fr;

	/* Can't risk remaking the stamp if it's already in use */
	if (stamp_mutex++) {
		stamp_mutex--;
		return rasops8_putchar(cookie, row, col, uc, attr);
	}

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	if ((unsigned)row >= (unsigned)ri->ri_rows) {
		stamp_mutex--;
		return 0;
	}

	if ((unsigned)col >= (unsigned)ri->ri_cols) {
		stamp_mutex--;
		return 0;
	}
#endif

	/* Recompute stamp? */
	if (attr != stamp_attr)
		rasops8_makestamp(ri, attr);

	rp = (int32_t *)(ri->ri_bits + row*ri->ri_yscale + col*ri->ri_xscale);
	height = ri->ri_font->fontheight;

	if (uc == ' ') {
		while (height--) {
			rp[0] = rp[1] = stamp[0];
			DELTA(rp, ri->ri_stride, int32_t *);
		}
	} else {
		uc -= ri->ri_font->firstchar;
		fr = (u_char *)ri->ri_font->data + uc * ri->ri_fontscale;
		fs = ri->ri_font->stride;

		while (height--) {
			rp[0] = STAMP_READ(STAMP_SHIFT(fr[0], 1) & STAMP_MASK);
			rp[1] = STAMP_READ(STAMP_SHIFT(fr[0], 0) & STAMP_MASK);

			fr += fs;
			DELTA(rp, ri->ri_stride, int32_t *);
		}
	}

	/* Do underline */
	if ((attr & 1) != 0) {
		DELTA(rp, -(ri->ri_stride << 1), int32_t *);
		rp[0] = rp[1] = stamp[15];
	}

	stamp_mutex--;

	return 0;
}

/*
 * Put a single character. This is for 12-pixel wide fonts.
 */
int
rasops8_putchar12(void *cookie, int row, int col, u_int uc, long attr)
{
	struct rasops_info *ri;
	int height, fs;
	int32_t *rp;
	u_char *fr;

	/* Can't risk remaking the stamp if it's already in use */
	if (stamp_mutex++) {
		stamp_mutex--;
		return rasops8_putchar(cookie, row, col, uc, attr);
	}

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	if ((unsigned)row >= (unsigned)ri->ri_rows) {
		stamp_mutex--;
		return 0;
	}

	if ((unsigned)col >= (unsigned)ri->ri_cols) {
		stamp_mutex--;
		return 0;
	}
#endif

	/* Recompute stamp? */
	if (attr != stamp_attr)
		rasops8_makestamp(ri, attr);

	rp = (int32_t *)(ri->ri_bits + row*ri->ri_yscale + col*ri->ri_xscale);
	height = ri->ri_font->fontheight;

	if (uc == ' ') {
		while (height--) {
			int32_t c = stamp[0];

			rp[0] = rp[1] = rp[2] = c;
			DELTA(rp, ri->ri_stride, int32_t *);
		}
	} else {
		uc -= ri->ri_font->firstchar;
		fr = (u_char *)ri->ri_font->data + uc * ri->ri_fontscale;
		fs = ri->ri_font->stride;

		while (height--) {
			rp[0] = STAMP_READ(STAMP_SHIFT(fr[0], 1) & STAMP_MASK);
			rp[1] = STAMP_READ(STAMP_SHIFT(fr[0], 0) & STAMP_MASK);
			rp[2] = STAMP_READ(STAMP_SHIFT(fr[1], 1) & STAMP_MASK);

			fr += fs;
			DELTA(rp, ri->ri_stride, int32_t *);
		}
	}

	/* Do underline */
	if ((attr & 1) != 0) {
		DELTA(rp, -(ri->ri_stride << 1), int32_t *);
		rp[0] = rp[1] = rp[2] = stamp[15];
	}

	stamp_mutex--;

	return 0;
}

/*
 * Put a single character. This is for 16-pixel wide fonts.
 */
int
rasops8_putchar16(void *cookie, int row, int col, u_int uc, long attr)
{
	struct rasops_info *ri;
	int height, fs;
	int32_t *rp;
	u_char *fr;

	/* Can't risk remaking the stamp if it's already in use */
	if (stamp_mutex++) {
		stamp_mutex--;
		return rasops8_putchar(cookie, row, col, uc, attr);
	}

	ri = (struct rasops_info *)cookie;

#ifdef RASOPS_CLIPPING
	if ((unsigned)row >= (unsigned)ri->ri_rows) {
		stamp_mutex--;
		return 0;
	}

	if ((unsigned)col >= (unsigned)ri->ri_cols) {
		stamp_mutex--;
		return 0;
	}
#endif

	/* Recompute stamp? */
	if (attr != stamp_attr)
		rasops8_makestamp(ri, attr);

	rp = (int32_t *)(ri->ri_bits + row*ri->ri_yscale + col*ri->ri_xscale);
	height = ri->ri_font->fontheight;

	if (uc == ' ') {
		while (height--)
			rp[0] = rp[1] = rp[2] = rp[3] = stamp[0];
	} else {
		uc -= ri->ri_font->firstchar;
		fr = (u_char *)ri->ri_font->data + uc * ri->ri_fontscale;
		fs = ri->ri_font->stride;

		while (height--) {
			rp[0] = STAMP_READ(STAMP_SHIFT(fr[0], 1) & STAMP_MASK);
			rp[1] = STAMP_READ(STAMP_SHIFT(fr[0], 0) & STAMP_MASK);
			rp[2] = STAMP_READ(STAMP_SHIFT(fr[1], 1) & STAMP_MASK);
			rp[3] = STAMP_READ(STAMP_SHIFT(fr[1], 0) & STAMP_MASK);

			fr += fs;
			DELTA(rp, ri->ri_stride, int32_t *);
		}
	}

	/* Do underline */
	if ((attr & 1) != 0) {
		DELTA(rp, -(ri->ri_stride << 1), int32_t *);
		rp[0] = rp[1] = rp[2] = rp[3] = stamp[15];
	}

	stamp_mutex--;

	return 0;
}
#endif /* !RASOPS_SMALL */
@


1.9
log
@Change the wsdisplay_emulops return types from void to int; emulops will now
return zero on success and nonzero on failure.
This commit only performs mechanical changes for the existing emulops to
always return zero.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops8.c,v 1.8 2008/06/26 05:42:18 ray Exp $	*/
d71 1
a71 2
rasops8_init(ri)
	struct rasops_info *ri;
d96 1
a96 5
rasops8_putchar(cookie, row, col, uc, attr)
	void *cookie;
	int row, col;
	u_int uc;
	long attr;
d165 1
a165 3
rasops8_makestamp(ri, attr)
	struct rasops_info *ri;
	long attr;
d197 1
a197 5
rasops8_putchar8(cookie, row, col, uc, attr)
	void *cookie;
	int row, col;
	u_int uc;
	long attr;
d265 1
a265 5
rasops8_putchar12(cookie, row, col, uc, attr)
	void *cookie;
	int row, col;
	u_int uc;
	long attr;
d336 1
a336 5
rasops8_putchar16(cookie, row, col, uc, attr)
	void *cookie;
	int row, col;
	u_int uc;
	long attr;
@


1.8
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops8.c,v 1.7 2006/12/02 15:55:18 miod Exp $	*/
d41 1
a41 1
void 	rasops8_putchar(void *, int, int, u_int, long attr);
d43 3
a45 3
void 	rasops8_putchar8(void *, int, int, u_int, long attr);
void 	rasops8_putchar12(void *, int, int, u_int, long attr);
void 	rasops8_putchar16(void *, int, int, u_int, long attr);
d96 1
a96 1
void
d112 1
a112 1
		return;
d115 1
a115 1
		return;
d161 2
d203 1
a203 1
void
d218 1
a218 2
		rasops8_putchar(cookie, row, col, uc, attr);
		return;
d226 1
a226 1
		return;
d231 1
a231 1
		return;
d268 2
d275 1
a275 1
void
d290 1
a290 2
		rasops8_putchar(cookie, row, col, uc, attr);
		return;
d298 1
a298 1
		return;
d303 1
a303 1
		return;
d343 2
d350 1
a350 1
void
d365 1
a365 2
		rasops8_putchar(cookie, row, col, uc, attr);
		return;
d373 1
a373 1
		return;
d378 1
a378 1
		return;
d415 2
@


1.7
log
@On frame buffers which endianness differs from the host CPU, we can not afford
using ovbcopy() in the erasecols emulop, as the ovbcopy implementation might
do larger-than-byte loads and store, which will not have the expected result
if the source and destination addresses are not similarly aligned.

Instead, roll our own byte-only ovbcopy() in this case. This is made dependent
on a config(8) attribute to avoid bloating platforms which do not need this,
thus frame buffers which may set RI_BSWAP in ri_flg need to depend on this
attribute.

Problem spotted by matthieu@@ using tcsh on sparc64 console.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops8.c,v 1.6 2002/07/27 22:17:49 miod Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.6
log
@Unstaticize functions, for my ddb sessions pleasure.
Plus it makes hangman more difficult.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops8.c,v 1.5 2002/07/25 19:18:44 jason Exp $	*/
d198 1
d201 1
@


1.5
log
@If passed RI_BSWAP, swap32 the stamp
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops8.c,v 1.4 2002/05/29 00:22:10 fgsch Exp $	*/
d48 1
a48 1
static void 	rasops8_putchar(void *, int, int, u_int, long attr);
d50 4
a53 4
static void 	rasops8_putchar8(void *, int, int, u_int, long attr);
static void 	rasops8_putchar12(void *, int, int, u_int, long attr);
static void 	rasops8_putchar16(void *, int, int, u_int, long attr);
static void	rasops8_makestamp(struct rasops_info *ri, long);
d103 1
a103 1
static void
d174 1
a174 1
static void
d206 1
a206 1
static void
d277 1
a277 1
static void
d351 1
a351 1
static void
@


1.4
log
@remove unneeded header.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops8.c,v 1.3 2002/05/28 22:10:03 fgsch Exp $	*/
d198 2
@


1.3
log
@o spaces, tabs, spelling cleanup.
o remove unneeded headers.
o makes this to compile if RASOPS_SMALL is defined.
o makes rasops2 to compile.
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops8.c,v 1.2 2002/03/14 01:27:02 millert Exp $	*/
a39 1
#include <sys/types.h>
@


1.2
log
@First round of __P removal in sys
@
text
@d1 2
a2 2
/*	$OpenBSD: rasops8.c,v 1.1 2001/03/18 04:32:45 nate Exp $ */
/* 	$NetBSD: rasops8.c,v 1.8 2000/04/12 14:22:29 pk Exp $	*/
a39 3
#include <sys/cdefs.h>
//__KERNEL_RCSID(0, "$NetBSD: rasops8.c,v 1.8 2000/04/12 14:22:29 pk Exp $");

a54 1
#endif
d62 1
d76 1
a76 1
 * Initalize a 'rasops_info' descriptor for this depth.
@


1.1
log
@Import rasops from NetBSD.  This gives improved performance for raster
operations.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d52 1
a52 1
static void 	rasops8_putchar __P((void *, int, int, u_int, long attr));
d54 4
a57 4
static void 	rasops8_putchar8 __P((void *, int, int, u_int, long attr));
static void 	rasops8_putchar12 __P((void *, int, int, u_int, long attr));
static void 	rasops8_putchar16 __P((void *, int, int, u_int, long attr));
static void	rasops8_makestamp __P((struct rasops_info *ri, long));
@


1.1.8.1
log
@Sync UBC branch to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: rasops8.c,v 1.8 2000/04/12 14:22:29 pk Exp $	*/
d40 4
d52 1
a52 1
static void 	rasops8_putchar(void *, int, int, u_int, long attr);
d54 5
a58 4
static void 	rasops8_putchar8(void *, int, int, u_int, long attr);
static void 	rasops8_putchar12(void *, int, int, u_int, long attr);
static void 	rasops8_putchar16(void *, int, int, u_int, long attr);
static void	rasops8_makestamp(struct rasops_info *ri, long);
a65 1
#endif
d79 1
a79 1
 * Initialize a 'rasops_info' descriptor for this depth.
@


1.1.8.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops8.c,v 1.1.8.1 2002/06/11 03:42:29 art Exp $	*/
d48 1
a48 1
void 	rasops8_putchar(void *, int, int, u_int, long attr);
d50 4
a53 4
void 	rasops8_putchar8(void *, int, int, u_int, long attr);
void 	rasops8_putchar12(void *, int, int, u_int, long attr);
void 	rasops8_putchar16(void *, int, int, u_int, long attr);
void	rasops8_makestamp(struct rasops_info *ri, long);
d103 1
a103 1
void
d174 1
a174 1
void
a197 2
		if (ri->ri_flg & RI_BSWAP)
			stamp[i] = swap32(stamp[i]);
d204 1
a204 1
void
d275 1
a275 1
void
d349 1
a349 1
void
@


1.1.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: rasops8.c,v 1.1 2001/03/18 04:32:45 nate Exp $ */
@


1.1.4.2
log
@Merge unpeeing cvs missed
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d52 1
a52 1
static void 	rasops8_putchar(void *, int, int, u_int, long attr);
d54 4
a57 4
static void 	rasops8_putchar8(void *, int, int, u_int, long attr);
static void 	rasops8_putchar12(void *, int, int, u_int, long attr);
static void 	rasops8_putchar16(void *, int, int, u_int, long attr);
static void	rasops8_makestamp(struct rasops_info *ri, long);
@


1.1.4.3
log
@Sync the SMP branch with 3.3
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: rasops8.c,v 1.8 2000/04/12 14:22:29 pk Exp $	*/
d40 4
d52 1
a52 1
void 	rasops8_putchar(void *, int, int, u_int, long attr);
d54 5
a58 4
void 	rasops8_putchar8(void *, int, int, u_int, long attr);
void 	rasops8_putchar12(void *, int, int, u_int, long attr);
void 	rasops8_putchar16(void *, int, int, u_int, long attr);
void	rasops8_makestamp(struct rasops_info *ri, long);
a65 1
#endif
d79 1
a79 1
 * Initialize a 'rasops_info' descriptor for this depth.
d107 1
a107 1
void
d178 1
a178 1
void
a201 2
		if (ri->ri_flg & RI_BSWAP)
			stamp[i] = swap32(stamp[i]);
d208 1
a208 1
void
d279 1
a279 1
void
d353 1
a353 1
void
@


