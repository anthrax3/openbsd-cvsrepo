head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.12
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.10
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.8
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.8.0.22
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.20
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.18
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.16
	OPENBSD_5_0:1.8.0.14
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.12
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.10
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.6
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.8
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.14
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.12
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.10
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.4.0.8
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	SMP:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2014.01.26.17.48.08;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2013.12.02.02.36.22;	author krw;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.26.05.42.19;	author ray;	state Exp;
branches;
next	1.7;

1.7
date	2006.08.05.16.59.57;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.15.11.29.15;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.27.03;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.30.16.38.14;	author aaron;	state Exp;
branches
	1.4.4.1
	1.4.8.1;
next	1.3;

1.3
date	2000.11.13.15.35.17;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.01.13.51.19;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.16.23.49.12;	author mickey;	state Exp;
branches;
next	;

1.4.4.1
date	2001.05.14.22.26.33;	author niklas;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2002.03.28.15.09.10;	author niklas;	state Exp;
branches;
next	;

1.4.8.1
date	2002.06.11.03.42.32;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Attempt to make user changes of keyboard layout a bit more `sticky' on wsmux
kernels:
- keyboard drivers will now tell wskbd if the keyboard layout they ask
  for is a default value, or a value they are 100% sure of (either
  because your kernel has a XXXKBD_LAYOUT option, or because the
  driver can tell the keyboard layout, e.g. by the country code on USB
  keyboards which provide it, such as Sun's)
- when attaching a keyboard with a non-default layout, the layout will
  become the default layout of the mux for new keyboard attachments if
  the mux doesn't have a layout set already.
- when changing the keyboard layout of a particular keyboard with an
  ioctl (i.e. using kbd(8) or wsconsctl(8)), the layout will become the
  default layout of the mux for new keyboard attachments.

ok mpi@@
@
text
@/*	$OpenBSD: wsmuxvar.h,v 1.9 2013/12/02 02:36:22 krw Exp $	*/
/*      $NetBSD: wsmuxvar.h,v 1.10 2005/04/30 03:47:12 augustss Exp $   */

/*
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * Author: Lennart Augustsson <augustss@@carlstedt.se>
 *         Carlstedt Research & Technology
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * A ws event source, i.e., wskbd, wsmouse, or wsmux.
 */
struct wsevsrc {
	struct device me_dv;
	const struct wssrcops *me_ops;	/* method pointers */
	struct wseventvar me_evar;	/* wseventvar opened directly */
	struct wseventvar *me_evp;	/* our wseventvar when open */
#if NWSDISPLAY > 0
	struct device *me_dispdv;	/* our display if part of one */
#define	sc_displaydv	sc_base.me_dispdv
#endif
#if NWSMUX > 0
	struct wsmux_softc *me_parent;	/* parent mux device */
	TAILQ_ENTRY(wsevsrc) me_next;	/* sibling pointers */
#endif
};

/*
 * Methods that can be performed on an events source.  Usually called
 * from a wsmux.
 */
struct wssrcops {
	int type;			/* device type: WSMUX_{MOUSE,KBD,MUX} */
	int (*dopen)(struct wsevsrc *, struct wseventvar *);
	int (*dclose)(struct wsevsrc *);
	int (*dioctl)(struct device *, u_long, caddr_t, int, struct proc *);
	int (*ddispioctl)(struct device *, u_long, caddr_t, int, struct proc *);
	int (*dsetdisplay)(struct device *, struct device *);
};

#define wsevsrc_open(me, evp) \
	((me)->me_ops->dopen((me), evp))
#define wsevsrc_close(me) \
	((me)->me_ops->dclose((me)))
#define wsevsrc_ioctl(me, cmd, data, flag, p) \
	((me)->me_ops->dioctl(&(me)->me_dv, cmd, (caddr_t)data, flag, p))
#define wsevsrc_display_ioctl(me, cmd, data, flag, p) \
	((me)->me_ops->ddispioctl(&(me)->me_dv, cmd, (caddr_t)data, flag, p))
#define wsevsrc_set_display(me, arg) \
	((me)->me_ops->dsetdisplay(&(me)->me_dv, arg))

#if NWSMUX > 0
struct wsmux_softc {
	struct wsevsrc sc_base;
	struct proc *sc_p;		/* open proc */
	TAILQ_HEAD(, wsevsrc) sc_cld;	/* list of children */
	u_int32_t sc_kbd_layout;	/* current layout of keyboard */
#ifdef WSDISPLAY_COMPAT_RAWKBD
	int sc_rawkbd;			/* A hack to remember the kbd mode */
#endif
};

/*
 * configure defines
 */
#define WSMOUSEDEVCF_MUX		0

struct	wsmux_softc *wsmux_getmux(int);
struct	wsmux_softc *wsmux_create(const char *, int);
int	wsmux_attach_sc(struct wsmux_softc *, struct wsevsrc *);
void	wsmux_detach_sc(struct wsevsrc *);
int	wsmux_set_display(struct wsmux_softc *, struct device *);
uint32_t wsmux_get_layout(struct wsmux_softc *);
void	wsmux_set_layout(struct wsmux_softc *, uint32_t);

int	wskbd_add_mux(int, struct wsmux_softc *);
int	wsmouse_add_mux(int, struct wsmux_softc *);

#endif	/* NWSMUX > 0 */
@


1.9
log
@CIRCLEQ begone.

ok jsing@@ (who actually ok'd the systat one too, not millert@@)
@
text
@d1 1
a1 1
/*	$OpenBSD: wsmuxvar.h,v 1.8 2008/06/26 05:42:19 ray Exp $	*/
d96 2
@


1.8
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wsmuxvar.h,v 1.7 2006/08/05 16:59:57 miod Exp $	*/
d47 1
a47 1
	CIRCLEQ_ENTRY(wsevsrc) me_next;	/* sibling pointers */
d79 1
a79 1
	CIRCLEQ_HEAD(, wsevsrc) sc_cld;	/* list of children */
@


1.7
log
@On platforms which do not use wsmux (because they can't have more than one
keyboard at once), force wskbd0 to connect to wsdisplay0 even if they are
not console devices.
@
text
@d1 1
a1 1
/*	$OpenBSD: wsmuxvar.h,v 1.6 2005/05/15 11:29:15 miod Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.6
log
@Partial sync to the NetBSD wscons code, bringing a better wsmux behaviour
and bugfixes (the kqueue code, /dev/wsmuxctl and screen border color changes
have not been picked), keeping local changes.

Tested by many on alpha/cats/hp300/i386/macppc/sparc/sparc64/zaurus if not more.
@
text
@d1 1
a1 1
/*	$OpenBSD: wsmuxvar.h,v 1.5 2002/03/14 01:27:03 millert Exp $	*/
d68 1
a68 1
	int (*dsetdisplay)(struct device *, struct wsevsrc *);
@


1.5
log
@First round of __P removal in sys
@
text
@d1 2
a2 2
/*	$OpenBSD: wsmuxvar.h,v 1.4 2001/03/30 16:38:14 aaron Exp $	*/
/*	$NetBSD: wsmuxvar.h,v 1.1 1999/07/29 18:20:43 augustss Exp $	*/
d40 41
a80 2
struct wsdisplay_softc;
struct wsplink;
d82 1
d84 1
a84 3
	struct device sc_dv;
	struct wseventvar sc_events;	/* event queue state */
	int sc_flags, sc_mode;		/* open flags */
d86 2
a87 3
	LIST_HEAD(, wsplink) sc_reals;  /* list of real devices */
	struct wsmux_softc *sc_mux;     /* if part of another mux */
	struct device *sc_displaydv;    /* our display if part of one */
d89 1
a89 1
	int sc_rawkbd;		        /* A hack to remember the kbd mode */
a92 12
struct wsmuxops {
	int (*dopen)(dev_t, int, int, struct proc *);
	int (*dclose)(struct device *, int, int, struct proc *);
	int (*dioctl)(struct device *, u_long, caddr_t, int, 
			   struct proc *);
	int (*ddispioctl)(struct device *, u_long, caddr_t, int, 
			       struct proc *);
	int (*dsetdisplay)(struct device *, struct wsmux_softc *);
	int (*dissetdisplay)(struct device *);
};


a95 1
#define	WSKBDDEVCF_MUX_DEFAULT		-1
a96 14
#define WSMOUSEDEVCF_MUX_DEFAULT	-1

struct wsmux_softc *wsmux_create(const char *name, int no);
int	wsmux_attach_sc(
	  struct wsmux_softc *,
	  int, struct device *, struct wseventvar *,
	  struct wsmux_softc **,
	  struct wsmuxops *);
int	wsmux_detach_sc(struct wsmux_softc *, struct device *);
void	wsmux_attach(
	  int, int, struct device *, struct wseventvar *,
	  struct wsmux_softc **,
	  struct wsmuxops *);
void	wsmux_detach(int, struct device *);
d98 5
a102 2
int	wsmux_displayioctl(struct device *dev, u_long cmd,
	    caddr_t data, int flag, struct proc *p);
a103 4
int	wsmuxdoioctl(struct device *, u_long, caddr_t,int,struct proc *);

int	wsmux_add_mux(int, struct wsmux_softc *);
int	wsmux_rem_mux(int, struct wsmux_softc *);
a104 1
int	wskbd_rem_mux(int, struct wsmux_softc *);
d106 2
a107 1
int	wsmouse_rem_mux(int, struct wsmux_softc *);
@


1.4
log
@Add a new wsmuxop, dissetdisplay, which wsmux uses to disocver whether a mux
device is connected to a display or not. Use it in wsmux_detach_sc(). This
fixes a problem I've been struggling with whereby the machine panics if I
detach a USB keyboard before disconnecting it from wsdisplay.
@
text
@d1 1
a1 1
/*	$OpenBSD: wsmuxvar.h,v 1.3 2000/11/13 15:35:17 aaron Exp $	*/
d57 8
a64 8
	int (*dopen) __P((dev_t, int, int, struct proc *));
	int (*dclose) __P((struct device *, int, int, struct proc *));
	int (*dioctl) __P((struct device *, u_long, caddr_t, int, 
			   struct proc *));
	int (*ddispioctl) __P((struct device *, u_long, caddr_t, int, 
			       struct proc *));
	int (*dsetdisplay) __P((struct device *, struct wsmux_softc *));
	int (*dissetdisplay) __P((struct device *));
d75 2
a76 2
struct wsmux_softc *wsmux_create __P((const char *name, int no));
int	wsmux_attach_sc __P((
d80 3
a82 3
	  struct wsmuxops *));
int	wsmux_detach_sc __P((struct wsmux_softc *, struct device *));
void	wsmux_attach __P((
d85 2
a86 2
	  struct wsmuxops *));
void	wsmux_detach __P((int, struct device *));
d88 2
a89 2
int	wsmux_displayioctl __P((struct device *dev, u_long cmd,
	    caddr_t data, int flag, struct proc *p));
d91 1
a91 1
int	wsmuxdoioctl __P((struct device *, u_long, caddr_t,int,struct proc *));
d93 6
a98 6
int	wsmux_add_mux __P((int, struct wsmux_softc *));
int	wsmux_rem_mux __P((int, struct wsmux_softc *));
int	wskbd_add_mux __P((int, struct wsmux_softc *));
int	wskbd_rem_mux __P((int, struct wsmux_softc *));
int	wsmouse_add_mux __P((int, struct wsmux_softc *));
int	wsmouse_rem_mux __P((int, struct wsmux_softc *));
@


1.4.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: wsmuxvar.h,v 1.4 2001/03/30 16:38:14 aaron Exp $	*/
d57 8
a64 8
	int (*dopen)(dev_t, int, int, struct proc *);
	int (*dclose)(struct device *, int, int, struct proc *);
	int (*dioctl)(struct device *, u_long, caddr_t, int, 
			   struct proc *);
	int (*ddispioctl)(struct device *, u_long, caddr_t, int, 
			       struct proc *);
	int (*dsetdisplay)(struct device *, struct wsmux_softc *);
	int (*dissetdisplay)(struct device *);
d75 2
a76 2
struct wsmux_softc *wsmux_create(const char *name, int no);
int	wsmux_attach_sc(
d80 3
a82 3
	  struct wsmuxops *);
int	wsmux_detach_sc(struct wsmux_softc *, struct device *);
void	wsmux_attach(
d85 2
a86 2
	  struct wsmuxops *);
void	wsmux_detach(int, struct device *);
d88 2
a89 2
int	wsmux_displayioctl(struct device *dev, u_long cmd,
	    caddr_t data, int flag, struct proc *p);
d91 1
a91 1
int	wsmuxdoioctl(struct device *, u_long, caddr_t,int,struct proc *);
d93 6
a98 6
int	wsmux_add_mux(int, struct wsmux_softc *);
int	wsmux_rem_mux(int, struct wsmux_softc *);
int	wskbd_add_mux(int, struct wsmux_softc *);
int	wskbd_rem_mux(int, struct wsmux_softc *);
int	wsmouse_add_mux(int, struct wsmux_softc *);
int	wsmouse_rem_mux(int, struct wsmux_softc *);
@


1.4.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: wsmuxvar.h,v 1.4 2001/03/30 16:38:14 aaron Exp $	*/
@


1.4.4.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 8
a64 8
	int (*dopen)(dev_t, int, int, struct proc *);
	int (*dclose)(struct device *, int, int, struct proc *);
	int (*dioctl)(struct device *, u_long, caddr_t, int, 
			   struct proc *);
	int (*ddispioctl)(struct device *, u_long, caddr_t, int, 
			       struct proc *);
	int (*dsetdisplay)(struct device *, struct wsmux_softc *);
	int (*dissetdisplay)(struct device *);
d75 2
a76 2
struct wsmux_softc *wsmux_create(const char *name, int no);
int	wsmux_attach_sc(
d80 3
a82 3
	  struct wsmuxops *);
int	wsmux_detach_sc(struct wsmux_softc *, struct device *);
void	wsmux_attach(
d85 2
a86 2
	  struct wsmuxops *);
void	wsmux_detach(int, struct device *);
d88 2
a89 2
int	wsmux_displayioctl(struct device *dev, u_long cmd,
	    caddr_t data, int flag, struct proc *p);
d91 1
a91 1
int	wsmuxdoioctl(struct device *, u_long, caddr_t,int,struct proc *);
d93 6
a98 6
int	wsmux_add_mux(int, struct wsmux_softc *);
int	wsmux_rem_mux(int, struct wsmux_softc *);
int	wskbd_add_mux(int, struct wsmux_softc *);
int	wskbd_rem_mux(int, struct wsmux_softc *);
int	wsmouse_add_mux(int, struct wsmux_softc *);
int	wsmouse_rem_mux(int, struct wsmux_softc *);
@


1.3
log
@Make this compile under OpenBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: wsmuxvar.h,v 1.2 2000/08/01 13:51:19 mickey Exp $	*/
d64 1
@


1.2
log
@update wscons, nothing serious, mostly api fixes for us; from netbsd through aaron@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wsmuxvar.h,v 1.1 2000/05/16 23:49:12 mickey Exp $	*/
d70 3
a72 1
#define	WSKBDDEVCF_MUX_DEFAULT	-1
@


1.1
log
@import newer wscons source from netbsd.
art@@ said it will make his life easier in alpha
rhands@@ said it is not used in powerpc for now
bjc@@ said that it would make vax port easier
mickey@@ said other platforms can use it, and it's faster
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a39 3
#ifndef _DEV_WSCONS_WSMUXVAR_H_
#define _DEV_WSCONS_WSMUXVAR_H_

a95 2

#endif /* _DEV_WSCONS_WSMUXVAR_H_ */
@

