head	1.15;
access;
symbols
	OPENBSD_6_0:1.15.0.4
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.12.0.4
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.8
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.20
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.18
	OPENBSD_5_0:1.7.0.16
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.14
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.12
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.8
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.10
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.6
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.4
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.5.0.8
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.6
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.16
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.14
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.12
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.10
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	SMP:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.15
date	2016.01.12.16.21.09;	author stefan;	state Exp;
branches;
next	1.14;
commitid	T29czQ1Mfei5kraw;

1.14
date	2015.09.10.18.14.52;	author mpi;	state Exp;
branches;
next	1.13;
commitid	yCNTJc2qmad1KZnd;

1.13
date	2015.03.14.03.38.50;	author jsg;	state Exp;
branches;
next	1.12;
commitid	p4LJxGKbi0BU2cG6;

1.12
date	2015.02.10.21.56.09;	author miod;	state Exp;
branches;
next	1.11;
commitid	C5iGb36LQxjM60Q3;

1.11
date	2015.01.11.02.57.09;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	jpmRsPQh3fraZ70T;

1.10
date	2014.09.14.14.17.25;	author jsg;	state Exp;
branches;
next	1.9;
commitid	uzzBR7hz9ncd4O6G;

1.9
date	2014.07.12.18.48.53;	author tedu;	state Exp;
branches;
next	1.8;
commitid	OBNa5kfxQ2UXoiIw;

1.8
date	2012.12.05.23.20.22;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.11.13.39.34;	author gilles;	state Exp;
branches;
next	1.6;

1.6
date	2007.09.10.19.49.31;	author gilles;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.21.18.16.45;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.15.11.29.15;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.23.28.04;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.01.13.51.18;	author mickey;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2000.05.16.23.49.12;	author mickey;	state Exp;
branches;
next	;

1.2.6.1
date	2001.05.14.22.26.31;	author niklas;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2003.06.07.11.02.34;	author ho;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Use uiomove() instead of uiomovei(); from Martin Natano

ok deraadt@@
@
text
@/* $OpenBSD: wsevent.c,v 1.14 2015/09/10 18:14:52 mpi Exp $ */
/* $NetBSD: wsevent.c,v 1.16 2003/08/07 16:31:29 agc Exp $ */

/*
 * Copyright (c) 1996, 1997 Christopher G. Demetriou.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou
 *	for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)event.c	8.1 (Berkeley) 6/11/93
 */

/*
 * Internal "wscons_event" queue interface for the keyboard and mouse drivers.
 */

#include <sys/param.h>
#include <sys/malloc.h>
#include <sys/systm.h>
#include <sys/vnode.h>
#include <sys/selinfo.h>
#include <sys/poll.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wseventvar.h>

void	filt_wseventdetach(struct knote *);
int	filt_wseventread(struct knote *, long);

const struct filterops wsevent_filtops = {
	1,
	NULL,
	filt_wseventdetach,
	filt_wseventread
};

/*
 * Initialize a wscons_event queue.
 */
void
wsevent_init(struct wseventvar *ev)
{

	if (ev->q != NULL) {
#ifdef DIAGNOSTIC
		printf("wsevent_init: already initialized\n");
#endif
		return;
	}
	ev->get = ev->put = 0;
	ev->q = malloc(WSEVENT_QSIZE * sizeof(struct wscons_event),
	    M_DEVBUF, M_WAITOK | M_ZERO);
}

/*
 * Tear down a wscons_event queue.
 */
void
wsevent_fini(struct wseventvar *ev)
{
	if (ev->q == NULL) {
#ifdef DIAGNOSTIC
		printf("wsevent_fini: already invoked\n");
#endif
		return;
	}
	free(ev->q, M_DEVBUF, 0);
	ev->q = NULL;
}

/*
 * User-level interface: read, poll.
 * (User cannot write an event queue.)
 */
int
wsevent_read(struct wseventvar *ev, struct uio *uio, int flags)
{
	int s, error;
	u_int cnt;
	size_t n;

	/*
	 * Make sure we can return at least 1.
	 */
	if (uio->uio_resid < sizeof(struct wscons_event))
		return (EMSGSIZE);	/* ??? */
	s = splwsevent();
	while (ev->get == ev->put) {
		if (flags & IO_NDELAY) {
			splx(s);
			return (EWOULDBLOCK);
		}
		ev->wanted = 1;
		error = tsleep(ev, PWSEVENT | PCATCH,
		    "wsevent_read", 0);
		if (error) {
			splx(s);
			return (error);
		}
	}
	/*
	 * Move wscons_event from tail end of queue (there is at least one
	 * there).
	 */
	if (ev->put < ev->get)
		cnt = WSEVENT_QSIZE - ev->get;	/* events in [get..QSIZE) */
	else
		cnt = ev->put - ev->get;	/* events in [get..put) */
	splx(s);
	n = howmany(uio->uio_resid, sizeof(struct wscons_event));
	if (cnt > n)
		cnt = n;
	error = uiomove((caddr_t)&ev->q[ev->get],
	    cnt * sizeof(struct wscons_event), uio);
	n -= cnt;
	/*
	 * If we do not wrap to 0, used up all our space, or had an error,
	 * stop.  Otherwise move from front of queue to put index, if there
	 * is anything there to move.
	 */
	if ((ev->get = (ev->get + cnt) % WSEVENT_QSIZE) != 0 ||
	    n == 0 || error || (cnt = ev->put) == 0)
		return (error);
	if (cnt > n)
		cnt = n;
	error = uiomove((caddr_t)&ev->q[0],
	    cnt * sizeof(struct wscons_event), uio);
	ev->get = cnt;
	return (error);
}

int
wsevent_poll(struct wseventvar *ev, int events, struct proc *p)
{
	int revents = 0;
	int s = splwsevent();

	if (events & (POLLIN | POLLRDNORM)) {
		if (ev->get != ev->put)
			revents |= events & (POLLIN | POLLRDNORM);
		else
			selrecord(p, &ev->sel);
	}

	splx(s);
	return (revents);
}

int
wsevent_kqfilter(struct wseventvar *ev, struct knote *kn)
{
	struct klist *klist;
	int s;

	klist = &ev->sel.si_note;

	switch (kn->kn_filter) {
	case EVFILT_READ:
		kn->kn_fop = &wsevent_filtops;
		break;
	default:
		return (EINVAL);
	}

	kn->kn_hook = ev;

	s = splwsevent();
	SLIST_INSERT_HEAD(klist, kn, kn_selnext);
	splx(s);

	return (0);
}

void
filt_wseventdetach(struct knote *kn)
{
	struct wseventvar *ev = kn->kn_hook;
	struct klist *klist = &ev->sel.si_note;
	int s;

	s = splwsevent();
	SLIST_REMOVE(klist, kn, knote, kn_selnext);
	splx(s);
}

int
filt_wseventread(struct knote *kn, long hint)
{
	struct wseventvar *ev = kn->kn_hook;

	if (ev->get == ev->put)
		return (0);

	if (ev->get < ev->put)
		kn->kn_data = ev->put - ev->get;
	else
		kn->kn_data = (WSEVENT_QSIZE - ev->get) + ev->put;

	return (1);
}
@


1.14
log
@kqueue(2) support for wsmouse(4), wskbd(4) and wsmux(4).

Needed for libinput port.

ok guenther@@, miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsevent.c,v 1.13 2015/03/14 03:38:50 jsg Exp $ */
d139 3
a141 1
	int s, n, cnt, error;
d174 1
a174 1
	error = uiomovei((caddr_t)&ev->q[ev->get],
d187 1
a187 1
	error = uiomovei((caddr_t)&ev->q[0],
@


1.13
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsevent.c,v 1.12 2015/02/10 21:56:09 miod Exp $ */
d88 10
d206 53
@


1.12
log
@First step towards making uiomove() take a size_t size argument:
- rename uiomove() to uiomovei() and update all its users.
- introduce uiomove(), which is similar to uiomovei() but with a size_t.
- rewrite uiomovei() as an uiomove() wrapper.
ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsevent.c,v 1.11 2015/01/11 02:57:09 deraadt Exp $ */
a78 1
#include <sys/fcntl.h>
@


1.11
log
@unnecessary cast
@
text
@d1 1
a1 1
/* $OpenBSD: wsevent.c,v 1.10 2014/09/14 14:17:25 jsg Exp $ */
d163 1
a163 1
	error = uiomove((caddr_t)&ev->q[ev->get],
d176 1
a176 1
	error = uiomove((caddr_t)&ev->q[0],
@


1.10
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsevent.c,v 1.9 2014/07/12 18:48:53 tedu Exp $ */
d103 1
a103 1
	ev->q = malloc((u_long)WSEVENT_QSIZE * sizeof(struct wscons_event),
@


1.9
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/* $OpenBSD: wsevent.c,v 1.8 2012/12/05 23:20:22 deraadt Exp $ */
a80 1
#include <sys/proc.h>
@


1.8
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/* $OpenBSD: wsevent.c,v 1.7 2007/09/11 13:39:34 gilles Exp $ */
d120 1
a120 1
	free(ev->q, M_DEVBUF);
@


1.7
log
@KNF

prompted and "much better" by marco@@, ok pyr@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsevent.c,v 1.6 2007/09/10 19:49:31 gilles Exp $ */
a32 2

#include <sys/cdefs.h>
@


1.6
log
@more MALLOC/FREE -> malloc/free and M_ZERO changes

ok pyr@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsevent.c,v 1.5 2005/11/21 18:16:45 millert Exp $ */
d107 1
a107 1
	    M_DEVBUF, M_WAITOK|M_ZERO);
@


1.5
log
@Move contents of sys/select.h to sys/selinfo.h in preparation for a
userland-visible sys/select.h.  Consistent with what Net and Free do.
OK deraadt@@, tested with full ports build by naddy@@.
@
text
@d1 1
a1 1
/* $OpenBSD: wsevent.c,v 1.4 2005/05/15 11:29:15 miod Exp $ */
d107 1
a107 2
	    M_DEVBUF, M_WAITOK);
	bzero((caddr_t)ev->q, WSEVENT_QSIZE * sizeof(struct wscons_event));
@


1.4
log
@Partial sync to the NetBSD wscons code, bringing a better wsmux behaviour
and bugfixes (the kqueue code, /dev/wsmuxctl and screen border color changes
have not been picked), keeping local changes.

Tested by many on alpha/cats/hp300/i386/macppc/sparc/sparc64/zaurus if not more.
@
text
@d1 1
a1 1
/* $OpenBSD: wsevent.c,v 1.3 2003/06/02 23:28:04 millert Exp $ */
d86 1
a86 1
#include <sys/select.h>
@


1.3
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 2
a2 2
/* $OpenBSD: wsevent.c,v 1.2 2000/08/01 13:51:18 mickey Exp $ */
/* $NetBSD: wsevent.c,v 1.5 2000/03/30 12:45:44 augustss Exp $ */
d96 1
a96 2
wsevent_init(ev)
	struct wseventvar *ev;
d99 6
d108 1
a108 1
	memset((caddr_t)ev->q, 0, WSEVENT_QSIZE * sizeof(struct wscons_event));
d115 1
a115 2
wsevent_fini(ev)
	struct wseventvar *ev;
d117 6
a122 1

d124 1
d132 1
a132 4
wsevent_read(ev, uio, flags)
	struct wseventvar *ev;
	struct uio *uio;
	int flags;
d148 1
a148 1
		error = tsleep((caddr_t)ev, PWSEVENT | PCATCH,
d187 1
a187 4
wsevent_poll(ev, events, p)
	struct wseventvar *ev;
	int events;
	struct proc *p;
d192 1
a192 1
        if (events & (POLLIN | POLLRDNORM)) {
@


1.2
log
@update wscons, nothing serious, mostly api fixes for us; from netbsd through aaron@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsevent.c,v 1.1 2000/05/16 23:49:12 mickey Exp $ */
d57 1
a57 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/* $OpenBSD: wsevent.c,v 1.2 2000/08/01 13:51:18 mickey Exp $ */
@


1.2.6.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: wsevent.c,v 1.2.6.1 2001/05/14 22:26:31 niklas Exp $ */
d57 5
a61 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1
log
@import newer wscons source from netbsd.
art@@ said it will make his life easier in alpha
rhands@@ said it is not used in powerpc for now
bjc@@ said that it would make vax port easier
mickey@@ said other platforms can use it, and it's faster
@
text
@d1 2
a2 2
/* $OpenBSD$ */
/* $NetBSD: wsevent.c,v 1.4 2000/01/05 11:19:37 drochner Exp $ */
d107 1
a107 1
	bzero((caddr_t)ev->q, WSEVENT_QSIZE * sizeof(struct wscons_event));
@

