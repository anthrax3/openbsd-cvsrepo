head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.2
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.2.0.64
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.60
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.50
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.58
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.56
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.54
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.52
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.48
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.46
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.44
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.42
	OPENBSD_5_0:1.2.0.40
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.38
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.36
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.32
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.34
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.30
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.28
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.26
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.24
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.22
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.20
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.18
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.16
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.14
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.12
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.10
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.8
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.10
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.8
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.6
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2017.05.12.09.16.55;	author mpi;	state Exp;
branches;
next	1.2;
commitid	X2MJ0BBsPUZMUK2x;

1.2
date	2002.03.14.01.27.03;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.16.23.49.12;	author mickey;	state Exp;
branches
	1.1.6.1
	1.1.10.1;
next	;

1.1.6.1
date	2001.05.14.22.26.32;	author niklas;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2002.03.28.15.09.10;	author niklas;	state Exp;
branches;
next	;

1.1.10.1
date	2002.06.11.03.42.32;	author art;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Introduce a new keyboard console hook to enter ddb(4) and make ukbd(4)
use it.

Instead of defering every input of a USB console keyboard to a timeout
via a queue of one element, only differ entering ddb(4) once a matching
control sequenece has been typed.

This prevent loosing inputs when a USB console keyboard is "too fast".

Fix a problem reported by matthieu@@, Adam McDougall and Hrvoje Popovski.

ok stsp@@, dlg@@
@
text
@/* $OpenBSD: wskbdvar.h,v 1.2 2002/03/14 01:27:03 millert Exp $ */
/* $NetBSD: wskbdvar.h,v 1.8 1999/12/01 23:22:59 augustss Exp $ */

/*
 * Copyright (c) 1996, 1997 Christopher G. Demetriou.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou
 *	for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * WSKBD interfaces.
 */

/*
 * Keyboard access functions (must be provided by all keyboards).
 *
 * There is a "void *" cookie provided by the keyboard driver associated
 * with these functions, which is passed to them when they are invoked.
 */
struct wskbd_accessops {
	int	(*enable)(void *, int);
	void    (*set_leds)(void *, int);
	int     (*ioctl)(void *v, u_long cmd, caddr_t data, int flag,
			      struct proc *p);
};

/*
 * Keyboard console functions (must be provided by console input keyboards).
 *
 * There is a "void *" cookie provided by the keyboard driver associated
 * with these functions, which is passed to them when they are invoked.
 */
struct wskbd_consops {
	void    (*getc)(void *, u_int *, int *);
	void    (*pollc)(void *, int);
	void	(*bell)(void *, u_int, u_int, u_int);
	void	(*debugger)(void *);
};

/*
 * Attachment information provided by wskbddev devices when attaching
 * wskbd units.
 */
struct wskbddev_attach_args {
	int	console;				/* is it console? */
	const struct wskbd_mapdata *keymap;

	const struct wskbd_accessops *accessops;        /* access ops */
	void	*accesscookie;				/* access cookie */
};

#define	WSKBDDEVCF_CONSOLE	0
#define	wskbddevcf_console	cf_loc[WSKBDDEVCF_CONSOLE]	/* spec'd as console? */
#define	WSKBDDEVCF_CONSOLE_UNK	-1

#define	WSKBDDEVCF_MUX		1
#define	wskbddevcf_mux		cf_loc[WSKBDDEVCF_MUX]

/*
 * Autoconfiguration helper functions.
 */
void	wskbd_cnattach(const struct wskbd_consops *, void *,
			    const struct wskbd_mapdata *);
void	wskbd_cndetach(void);
int	wskbddevprint(void *, const char *);

/*
 * Callbacks from the keyboard driver to the wskbd interface driver.
 */
void	wskbd_input(struct device *kbddev, u_int type, int value);
/* for WSDISPLAY_COMPAT_RAWKBD */
void	wskbd_rawinput(struct device *, u_char *, int);

/*
 * Console interface.
 */
int	wskbd_cngetc(dev_t dev);
void	wskbd_cnpollc(dev_t dev, int poll);
void	wskbd_cnbell(dev_t, u_int, u_int, u_int);
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/* $OpenBSD: wskbdvar.h,v 1.1 2000/05/16 23:49:12 mickey Exp $ */
d61 1
@


1.1
log
@import newer wscons source from netbsd.
art@@ said it will make his life easier in alpha
rhands@@ said it is not used in powerpc for now
bjc@@ said that it would make vax port easier
mickey@@ said other platforms can use it, and it's faster
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d45 4
a48 4
	int	(*enable) __P((void *, int));
	void    (*set_leds) __P((void *, int));
	int     (*ioctl) __P((void *v, u_long cmd, caddr_t data, int flag,
			      struct proc *p));
d58 3
a60 3
	void    (*getc) __P((void *, u_int *, int *));
	void    (*pollc) __P((void *, int));
	void	(*bell) __P((void *, u_int, u_int, u_int));
d85 4
a88 4
void	wskbd_cnattach __P((const struct wskbd_consops *, void *,
			    const struct wskbd_mapdata *));
void	wskbd_cndetach __P((void));
int	wskbddevprint __P((void *, const char *));
d93 1
a93 1
void	wskbd_input __P((struct device *kbddev, u_int type, int value));
d95 1
a95 1
void	wskbd_rawinput __P((struct device *, u_char *, int));
d100 3
a102 3
int	wskbd_cngetc __P((dev_t dev));
void	wskbd_cnpollc __P((dev_t dev, int poll));
void	wskbd_cnbell __P((dev_t, u_int, u_int, u_int));
@


1.1.10.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: wskbdvar.h,v 1.1 2000/05/16 23:49:12 mickey Exp $ */
d45 4
a48 4
	int	(*enable)(void *, int);
	void    (*set_leds)(void *, int);
	int     (*ioctl)(void *v, u_long cmd, caddr_t data, int flag,
			      struct proc *p);
d58 3
a60 3
	void    (*getc)(void *, u_int *, int *);
	void    (*pollc)(void *, int);
	void	(*bell)(void *, u_int, u_int, u_int);
d85 4
a88 4
void	wskbd_cnattach(const struct wskbd_consops *, void *,
			    const struct wskbd_mapdata *);
void	wskbd_cndetach(void);
int	wskbddevprint(void *, const char *);
d93 1
a93 1
void	wskbd_input(struct device *kbddev, u_int type, int value);
d95 1
a95 1
void	wskbd_rawinput(struct device *, u_char *, int);
d100 3
a102 3
int	wskbd_cngetc(dev_t dev);
void	wskbd_cnpollc(dev_t dev, int poll);
void	wskbd_cnbell(dev_t, u_int, u_int, u_int);
@


1.1.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/* $OpenBSD: wskbdvar.h,v 1.1 2000/05/16 23:49:12 mickey Exp $ */
@


1.1.6.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d45 4
a48 4
	int	(*enable)(void *, int);
	void    (*set_leds)(void *, int);
	int     (*ioctl)(void *v, u_long cmd, caddr_t data, int flag,
			      struct proc *p);
d58 3
a60 3
	void    (*getc)(void *, u_int *, int *);
	void    (*pollc)(void *, int);
	void	(*bell)(void *, u_int, u_int, u_int);
d85 4
a88 4
void	wskbd_cnattach(const struct wskbd_consops *, void *,
			    const struct wskbd_mapdata *);
void	wskbd_cndetach(void);
int	wskbddevprint(void *, const char *);
d93 1
a93 1
void	wskbd_input(struct device *kbddev, u_int type, int value);
d95 1
a95 1
void	wskbd_rawinput(struct device *, u_char *, int);
d100 3
a102 3
int	wskbd_cngetc(dev_t dev);
void	wskbd_cnpollc(dev_t dev, int poll);
void	wskbd_cnbell(dev_t, u_int, u_int, u_int);
@


