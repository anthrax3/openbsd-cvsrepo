head	1.10;
access;
symbols
	OPENBSD_3_9:1.9.0.12
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.10
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.10
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.8
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.6
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.8.0.4
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.4
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.5.0.12
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.10
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.8
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5;
locks; strict;
comment	@ * @;


1.10
date	2006.08.06.13.07.00;	author miod;	state dead;
branches;
next	1.9;

1.9
date	2003.06.02.23.28.04;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.14.19.26.48;	author maja;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.01.13.51.17;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2000.05.16.23.49.11;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	97.11.06.12.27.00;	author niklas;	state Exp;
branches
	1.5.10.1;
next	1.4;

1.4
date	97.07.31.13.40.05;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.10.30.22.41.55;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.07.29.23.03.06;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.06.18.09.45.45;	author deraadt;	state Exp;
branches;
next	;

1.5.10.1
date	2001.05.14.22.26.30;	author niklas;	state Exp;
branches;
next	1.5.10.2;

1.5.10.2
date	2001.10.31.03.22.50;	author nate;	state Exp;
branches;
next	1.5.10.3;

1.5.10.3
date	2003.06.07.11.02.34;	author ho;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Time for rcons code to retire.
@
text
@/* $OpenBSD: wscons_rops.c,v 1.9 2003/06/02 23:28:04 millert Exp $ */
/* $NetBSD: wscons_rops.c,v 1.6 2000/03/30 12:45:44 augustss Exp $ */

/*
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)rcons_subr.c	8.1 (Berkeley) 6/11/93
 */

#include <sys/param.h>
#include <sys/device.h>

#include <dev/rcons/raster.h>
#include <dev/wscons/wscons_raster.h>
#include <dev/wscons/wsdisplayvar.h>

/*
 * Paint (or unpaint) the cursor.
 * Pays no lip service to hardware cursors.
 */
void
rcons_cursor(id, on, row, col)
	void *id;
	int on, row, col;
{
	struct rcons *rc = id;
	int x, y;

	/* turn the cursor off */
	if (!on) {
		/* make sure it's on */
		if ((rc->rc_bits & RC_CURSOR) == 0)
			return;

		row = *rc->rc_crowp;
		col = *rc->rc_ccolp;
	} else {
		/* unpaint the old copy. */
		*rc->rc_crowp = row;
		*rc->rc_ccolp = col;
	}

	x = col * rc->rc_font->width + rc->rc_xorigin;
	y = row * rc->rc_font->height + rc->rc_yorigin;

	raster_op(rc->rc_sp, x, y,
#ifdef notdef
	    /* XXX This is the right way but too slow */
	    rc->rc_font->chars[(int)' '].r->width,
	    rc->rc_font->chars[(int)' '].r->height,
#else
	    rc->rc_font->width, rc->rc_font->height,
#endif
	    RAS_INVERT,
	    (struct raster *) 0, 0, 0);

	rc->rc_bits ^= RC_CURSOR;
}

int
rcons_mapchar(id, uni, index)
	void *id;
	int uni;
	unsigned int *index;
{

	if (uni < 256) {
		*index = uni;
		return (5);
	}
	*index = ' ';
	return (0);
}

/*
 * Actually write a string to the frame buffer.
 */
void
rcons_putchar(id, row, col, uc, attr)
	void *id;
	int row, col;
	u_int uc;
	long attr;
{
	struct rcons *rc = id;
	int x, y, op;
	u_char help;

	x = col * rc->rc_font->width + rc->rc_xorigin;
	y = row * rc->rc_font->height + rc->rc_font_ascent + rc->rc_yorigin;

	op = RAS_SRC;
	if ((attr != 0) ^ ((rc->rc_bits & RC_INVERT) != 0))
		op = RAS_NOT(op);
	help = uc & 0xff;
	raster_textn(rc->rc_sp, x, y, op, rc->rc_font, &help, 1);
}

/*
 * Possibly change to white-on-black or black-on-white modes.
 */
void
rcons_invert(id, inverted)
	void *id;
	int inverted;
{
	struct rcons *rc = id;

	if (((rc->rc_bits & RC_INVERT) != 0) ^ inverted) {
		/* Invert the display */
		raster_op(rc->rc_sp, 0, 0, rc->rc_sp->width, rc->rc_sp->height,
		    RAS_INVERT, (struct raster *) 0, 0, 0);

		/* Swap things around */
		rc->rc_bits ^= RC_INVERT;
	}
}

/*
 * Copy columns (characters) in a row (line).
 */
void
rcons_copycols(id, row, srccol, dstcol, ncols)
	void *id;
	int row, srccol, dstcol, ncols;
{
	struct rcons *rc = id;
	int y, srcx, dstx, nx;

	y = rc->rc_yorigin + rc->rc_font->height * row;
	srcx = rc->rc_xorigin + rc->rc_font->width * srccol;
	dstx = rc->rc_xorigin + rc->rc_font->width * dstcol;
	nx = rc->rc_font->width * ncols;

	raster_op(rc->rc_sp, dstx, y,
	    nx, rc->rc_font->height, RAS_SRC,
	    rc->rc_sp, srcx, y);
}

/*
 * Clear columns (characters) in a row (line).
 */
void
rcons_erasecols(id, row, startcol, ncols, fillattr)
	void *id;
	int row, startcol, ncols;
	long fillattr;
{
	struct rcons *rc = id;
	int y, startx, nx, op;

	y = rc->rc_yorigin + rc->rc_font->height * row;
	startx = rc->rc_xorigin + rc->rc_font->width * startcol;
	nx = rc->rc_font->width * ncols;

	op = RAS_CLEAR;
	if ((fillattr != 0) ^ ((rc->rc_bits & RC_INVERT) != 0))
		op = RAS_NOT(op);
	raster_op(rc->rc_sp, startx, y,
	    nx, rc->rc_font->height, op,
	    (struct raster *) 0, 0, 0);
}

/*
 * Copy rows (lines).
 */
void
rcons_copyrows(id, srcrow, dstrow, nrows)
	void *id;
	int srcrow, dstrow, nrows;
{
	struct rcons *rc = id;
	int srcy, dsty, ny;

	srcy = rc->rc_yorigin + rc->rc_font->height * srcrow;
	dsty = rc->rc_yorigin + rc->rc_font->height * dstrow;
	ny = rc->rc_font->height * nrows;

	raster_op(rc->rc_sp, rc->rc_xorigin, dsty,
	    rc->rc_raswidth, ny, RAS_SRC,
	    rc->rc_sp, rc->rc_xorigin, srcy);
}

/*
 * Erase rows (lines).
 */
void
rcons_eraserows(id, startrow, nrows, fillattr)
	void *id;
	int startrow, nrows;
	long fillattr;
{
	struct rcons *rc = id;
	int starty, ny, op;

	starty = rc->rc_yorigin + rc->rc_font->height * startrow;
	ny = rc->rc_font->height * nrows;

	op = RAS_CLEAR;
	if ((fillattr != 0) ^ ((rc->rc_bits & RC_INVERT) != 0))
		op = RAS_NOT(op);
	raster_op(rc->rc_sp, rc->rc_xorigin, starty,
	    rc->rc_raswidth, ny, op,
	    (struct raster *) 0, 0, 0);
}

int
rcons_alloc_attr(id, fg, bg, flags, attrp)
	void *id;
	int fg, bg, flags;
	long *attrp;
{
	if (flags & (WSATTR_HILIT | WSATTR_BLINK |
		     WSATTR_UNDERLINE | WSATTR_WSCOLORS))
		return (EINVAL);
	if (flags & WSATTR_REVERSE)
		*attrp = 1;
	else
		*attrp = 0;
	return (0);
}
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/* $OpenBSD: wscons_rops.c,v 1.8 2001/08/14 19:26:48 maja Exp $ */
@


1.8
log
@Allow latin-1 chars. -moj
@
text
@d1 1
a1 1
/* $OpenBSD: wscons_rops.c,v 1.7 2000/08/01 13:51:17 mickey Exp $ */
d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@update wscons, nothing serious, mostly api fixes for us; from netbsd through aaron@@
@
text
@d1 1
a1 1
/* $OpenBSD: wscons_rops.c,v 1.6 2000/05/16 23:49:11 mickey Exp $ */
d105 1
a105 1
	if (uni < 128) {
@


1.6
log
@import newer wscons source from netbsd.
art@@ said it will make his life easier in alpha
rhands@@ said it is not used in powerpc for now
bjc@@ said that it would make vax port easier
mickey@@ said other platforms can use it, and it's faster
@
text
@d1 2
a2 2
/* $OpenBSD$ */
/* $NetBSD: wscons_rops.c,v 1.5 1999/02/12 11:25:23 drochner Exp $ */
@


1.5
log
@Add some missing things for the MI vga driver.  Move wscons to an MI place as
well.  $OpenBSD$ tagging
@
text
@d1 2
a2 2
/*	$OpenBSD: wscons_rops.c,v 1.4 1997/07/31 13:40:05 kstailey Exp $ */
/*	$NetBSD: wscons_rops.c,v 1.1 1996/04/12 02:00:55 cgd Exp $ */
d53 1
d64 2
a65 2
	register struct rcons *rc = id;
	register int x, y;
d98 15
d117 1
a117 1
rcons_putstr(id, row, col, str, n)
d119 3
a121 2
	int row, col, n;
	char *str;
d124 2
a125 1
	register int x, y, op;
d131 1
a131 2
	if (((rc->rc_bits & RC_STANDOUT) != 0) ^
	    ((rc->rc_bits & RC_INVERT) != 0))
d133 2
a134 1
	raster_textn(rc->rc_sp, x, y, op, rc->rc_font, str, n);
d138 1
a138 1
 * Possibly change entire display to white-on-black or black-on-white modes.
a152 1
		rc->rc_ras_blank = RAS_NOT(rc->rc_ras_blank);
d182 1
a182 1
rcons_erasecols(id, row, startcol, ncols)
d185 1
d188 1
a188 1
	int y, startx, nx;
d194 3
d198 1
a198 1
	    nx, rc->rc_font->height, rc->rc_ras_blank,
d226 1
a226 1
rcons_eraserows(id, startrow, nrows)
d229 1
d232 1
a232 1
	int starty, ny;
d237 3
d241 1
a241 1
	    rc->rc_raswidth, ny, rc->rc_ras_blank,
d245 2
a246 2
void
rcons_setattr(id, val)
d248 2
a249 1
	int val;
d251 8
a258 1
	/* XXX */
@


1.5.10.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/* $OpenBSD: wscons_rops.c,v 1.7 2000/08/01 13:51:17 mickey Exp $ */
/* $NetBSD: wscons_rops.c,v 1.6 2000/03/30 12:45:44 augustss Exp $ */
a52 1
#include <dev/wscons/wsdisplayvar.h>
d63 2
a64 2
	struct rcons *rc = id;
	int x, y;
a96 15
int
rcons_mapchar(id, uni, index)
	void *id;
	int uni;
	unsigned int *index;
{

	if (uni < 128) {
		*index = uni;
		return (5);
	}
	*index = ' ';
	return (0);
}

d101 1
a101 1
rcons_putchar(id, row, col, uc, attr)
d103 2
a104 3
	int row, col;
	u_int uc;
	long attr;
d107 1
a107 2
	int x, y, op;
	u_char help;
d113 2
a114 1
	if ((attr != 0) ^ ((rc->rc_bits & RC_INVERT) != 0))
d116 1
a116 2
	help = uc & 0xff;
	raster_textn(rc->rc_sp, x, y, op, rc->rc_font, &help, 1);
d120 1
a120 1
 * Possibly change to white-on-black or black-on-white modes.
d135 1
d165 1
a165 1
rcons_erasecols(id, row, startcol, ncols, fillattr)
a167 1
	long fillattr;
d170 1
a170 1
	int y, startx, nx, op;
a175 3
	op = RAS_CLEAR;
	if ((fillattr != 0) ^ ((rc->rc_bits & RC_INVERT) != 0))
		op = RAS_NOT(op);
d177 1
a177 1
	    nx, rc->rc_font->height, op,
d205 1
a205 1
rcons_eraserows(id, startrow, nrows, fillattr)
a207 1
	long fillattr;
d210 1
a210 1
	int starty, ny, op;
a214 3
	op = RAS_CLEAR;
	if ((fillattr != 0) ^ ((rc->rc_bits & RC_INVERT) != 0))
		op = RAS_NOT(op);
d216 1
a216 1
	    rc->rc_raswidth, ny, op,
d220 2
a221 2
int
rcons_alloc_attr(id, fg, bg, flags, attrp)
d223 1
a223 2
	int fg, bg, flags;
	long *attrp;
d225 1
a225 8
	if (flags & (WSATTR_HILIT | WSATTR_BLINK |
		     WSATTR_UNDERLINE | WSATTR_WSCOLORS))
		return (EINVAL);
	if (flags & WSATTR_REVERSE)
		*attrp = 1;
	else
		*attrp = 0;
	return (0);
@


1.5.10.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/* $OpenBSD: wscons_rops.c,v 1.5.10.1 2001/05/14 22:26:30 niklas Exp $ */
d105 1
a105 1
	if (uni < 256) {
@


1.5.10.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: wscons_rops.c,v 1.5.10.2 2001/10/31 03:22:50 nate Exp $ */
d25 5
a29 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.4
log
@text video attributes, tested only on vga, send me E-mail if it breaks something, thx.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_rops.c,v 1.3 1996/10/30 22:41:55 niklas Exp $ */
d52 1
a52 1
#include <alpha/wscons/wscons_raster.h>
@


1.3
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_rops.c,v 1.1 1996/04/12 02:00:55 cgd Exp $ */
d120 1
a120 1
 * Possibly change to white-on-black or black-on-white modes.
d218 8
@


1.2
log
@Add OpenBSD tags.  Adapt to OpenBSD *_intr_establish calling convention
@
text
@@


1.1
log
@sync to 0616, retaining local diffs
@
text
@d1 1
@
