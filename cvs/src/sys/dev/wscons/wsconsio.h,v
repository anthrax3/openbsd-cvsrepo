head	1.84;
access;
symbols
	OPENBSD_6_1:1.79.0.4
	OPENBSD_6_1_BASE:1.79
	OPENBSD_6_0:1.74.0.2
	OPENBSD_6_0_BASE:1.74
	OPENBSD_5_9:1.73.0.2
	OPENBSD_5_9_BASE:1.73
	OPENBSD_5_8:1.71.0.6
	OPENBSD_5_8_BASE:1.71
	OPENBSD_5_7:1.71.0.4
	OPENBSD_5_7_BASE:1.71
	OPENBSD_5_6:1.69.0.6
	OPENBSD_5_6_BASE:1.69
	OPENBSD_5_5:1.69.0.4
	OPENBSD_5_5_BASE:1.69
	OPENBSD_5_4:1.67.0.4
	OPENBSD_5_4_BASE:1.67
	OPENBSD_5_3:1.67.0.2
	OPENBSD_5_3_BASE:1.67
	OPENBSD_5_2:1.66.0.2
	OPENBSD_5_2_BASE:1.66
	OPENBSD_5_1_BASE:1.64
	OPENBSD_5_1:1.64.0.2
	OPENBSD_5_0:1.63.0.2
	OPENBSD_5_0_BASE:1.63
	OPENBSD_4_9:1.61.0.4
	OPENBSD_4_9_BASE:1.61
	OPENBSD_4_8:1.61.0.2
	OPENBSD_4_8_BASE:1.61
	OPENBSD_4_7:1.60.0.2
	OPENBSD_4_7_BASE:1.60
	OPENBSD_4_6:1.55.0.4
	OPENBSD_4_6_BASE:1.55
	OPENBSD_4_5:1.49.0.2
	OPENBSD_4_5_BASE:1.49
	OPENBSD_4_4:1.47.0.4
	OPENBSD_4_4_BASE:1.47
	OPENBSD_4_3:1.47.0.2
	OPENBSD_4_3_BASE:1.47
	OPENBSD_4_2:1.45.0.2
	OPENBSD_4_2_BASE:1.45
	OPENBSD_4_1:1.43.0.2
	OPENBSD_4_1_BASE:1.43
	OPENBSD_4_0:1.42.0.2
	OPENBSD_4_0_BASE:1.42
	OPENBSD_3_9:1.38.0.2
	OPENBSD_3_9_BASE:1.38
	OPENBSD_3_8:1.36.0.2
	OPENBSD_3_8_BASE:1.36
	OPENBSD_3_7:1.34.0.2
	OPENBSD_3_7_BASE:1.34
	OPENBSD_3_6:1.31.0.2
	OPENBSD_3_6_BASE:1.31
	SMP_SYNC_A:1.31
	SMP_SYNC_B:1.31
	OPENBSD_3_5:1.30.0.2
	OPENBSD_3_5_BASE:1.30
	OPENBSD_3_4:1.29.0.2
	OPENBSD_3_4_BASE:1.29
	UBC_SYNC_A:1.28
	OPENBSD_3_3:1.26.0.2
	OPENBSD_3_3_BASE:1.26
	OPENBSD_3_2:1.22.0.2
	OPENBSD_3_2_BASE:1.22
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	UBC_SYNC_B:1.22
	UBC:1.13.0.4
	UBC_BASE:1.13
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	SMP:1.10.0.2
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.84
date	2017.08.18.20.19.36;	author fcambus;	state Exp;
branches;
next	1.83;
commitid	V6jvyutjMTcBDgjS;

1.83
date	2017.06.15.11.48.49;	author fcambus;	state Exp;
branches;
next	1.82;
commitid	ebogfyDoFrcWq0Jo;

1.82
date	2017.06.13.08.00.24;	author fcambus;	state Exp;
branches;
next	1.81;
commitid	yUETPJHeZMaP3HTf;

1.81
date	2017.06.06.19.47.22;	author bru;	state Exp;
branches;
next	1.80;
commitid	UUXbgHynvDUT4Xm4;

1.80
date	2017.05.08.20.55.29;	author bru;	state Exp;
branches;
next	1.79;
commitid	HWVWBmAyExdFs9jj;

1.79
date	2017.03.16.10.03.27;	author mpi;	state Exp;
branches;
next	1.78;
commitid	98yfHbLbz9JTRK0J;

1.78
date	2017.02.27.15.59.56;	author bru;	state Exp;
branches;
next	1.77;
commitid	8SRGrIuLd7axW5SE;

1.77
date	2016.10.23.22.59.19;	author bru;	state Exp;
branches;
next	1.76;
commitid	m7Qv2drIZWfJ1bkB;

1.76
date	2016.09.30.12.05.46;	author kettenis;	state Exp;
branches;
next	1.75;
commitid	VUBzbivipKIEJKC3;

1.75
date	2016.09.14.03.25.51;	author jcs;	state Exp;
branches;
next	1.74;
commitid	qYDOYa2tB4BBaTp5;

1.74
date	2016.03.30.23.34.12;	author bru;	state Exp;
branches
	1.74.2.1;
next	1.73;
commitid	216Sb0C4sEs8CDdv;

1.73
date	2015.12.12.12.30.18;	author jung;	state Exp;
branches
	1.73.2.1;
next	1.72;
commitid	rTJn56JVqCI35b4N;

1.72
date	2015.08.30.10.05.09;	author yasuoka;	state Exp;
branches;
next	1.71;
commitid	8KYmU15QlyhusRif;

1.71
date	2015.01.15.01.19.29;	author jsg;	state Exp;
branches;
next	1.70;
commitid	PSdMLDHj2pHrUoMH;

1.70
date	2014.12.21.18.25.07;	author shadchin;	state Exp;
branches;
next	1.69;
commitid	G9wB7lbGSPKMmrck;

1.69
date	2013.11.17.13.41.26;	author kettenis;	state Exp;
branches;
next	1.68;

1.68
date	2013.10.20.10.43.48;	author miod;	state Exp;
branches;
next	1.67;

1.67
date	2012.10.29.11.54.45;	author stsp;	state Exp;
branches;
next	1.66;

1.66
date	2012.07.22.18.28.36;	author shadchin;	state Exp;
branches;
next	1.65;

1.65
date	2012.04.17.08.51.24;	author miod;	state Exp;
branches;
next	1.64;

1.64
date	2011.09.20.17.00.24;	author shadchin;	state Exp;
branches;
next	1.63;

1.63
date	2011.05.05.15.30.31;	author shadchin;	state Exp;
branches;
next	1.62;

1.62
date	2011.04.07.15.06.32;	author shadchin;	state Exp;
branches;
next	1.61;

1.61
date	2010.07.01.02.33.05;	author maja;	state Exp;
branches;
next	1.60;

1.60
date	2010.03.07.21.26.24;	author miod;	state Exp;
branches;
next	1.59;

1.59
date	2010.03.04.14.31.12;	author jsing;	state Exp;
branches;
next	1.58;

1.58
date	2010.02.28.22.32.50;	author miod;	state Exp;
branches;
next	1.57;

1.57
date	2009.12.25.22.02.47;	author miod;	state Exp;
branches;
next	1.56;

1.56
date	2009.09.21.07.41.18;	author mglocker;	state Exp;
branches;
next	1.55;

1.55
date	2009.07.03.17.37.02;	author kettenis;	state Exp;
branches;
next	1.54;

1.54
date	2009.06.03.21.30.11;	author kettenis;	state Exp;
branches;
next	1.53;

1.53
date	2009.06.02.04.53.57;	author kettenis;	state Exp;
branches;
next	1.52;

1.52
date	2009.05.20.18.22.33;	author miod;	state Exp;
branches;
next	1.51;

1.51
date	2009.05.09.19.23.07;	author mglocker;	state Exp;
branches;
next	1.50;

1.50
date	2009.03.12.19.10.22;	author kettenis;	state Exp;
branches;
next	1.49;

1.49
date	2008.12.29.22.25.16;	author miod;	state Exp;
branches;
next	1.48;

1.48
date	2008.08.24.20.10.57;	author miod;	state Exp;
branches;
next	1.47;

1.47
date	2007.11.27.14.13.39;	author jsing;	state Exp;
branches;
next	1.46;

1.46
date	2007.09.01.17.06.26;	author xsa;	state Exp;
branches;
next	1.45;

1.45
date	2007.05.08.20.38.20;	author robert;	state Exp;
branches;
next	1.44;

1.44
date	2007.04.10.22.37.17;	author miod;	state Exp;
branches;
next	1.43;

1.43
date	2006.11.27.18.04.28;	author gwk;	state Exp;
branches;
next	1.42;

1.42
date	2006.08.06.16.00.45;	author miod;	state Exp;
branches;
next	1.41;

1.41
date	2006.07.24.22.19.54;	author miod;	state Exp;
branches;
next	1.40;

1.40
date	2006.04.16.20.45.00;	author miod;	state Exp;
branches;
next	1.39;

1.39
date	2006.04.14.21.05.44;	author miod;	state Exp;
branches;
next	1.38;

1.38
date	2006.02.14.18.52.17;	author miod;	state Exp;
branches;
next	1.37;

1.37
date	2006.01.09.21.52.12;	author miod;	state Exp;
branches;
next	1.36;

1.36
date	2005.05.15.11.29.15;	author miod;	state Exp;
branches;
next	1.35;

1.35
date	2005.04.22.11.59.11;	author miod;	state Exp;
branches;
next	1.34;

1.34
date	2005.01.17.04.19.40;	author drahn;	state Exp;
branches;
next	1.33;

1.33
date	2005.01.14.22.39.33;	author miod;	state Exp;
branches;
next	1.32;

1.32
date	2005.01.14.15.48.01;	author drahn;	state Exp;
branches;
next	1.31;

1.31
date	2004.04.24.13.37.46;	author miod;	state Exp;
branches;
next	1.30;

1.30
date	2004.03.01.07.53.01;	author miod;	state Exp;
branches;
next	1.29;

1.29
date	2003.06.17.21.21.33;	author miod;	state Exp;
branches;
next	1.28;

1.28
date	2003.05.14.06.39.49;	author miod;	state Exp;
branches;
next	1.27;

1.27
date	2003.03.28.02.59.31;	author jason;	state Exp;
branches;
next	1.26;

1.26
date	2003.02.16.02.08.04;	author miod;	state Exp;
branches;
next	1.25;

1.25
date	2003.02.12.01.44.11;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2003.02.11.19.49.47;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2003.02.05.19.20.22;	author mickey;	state Exp;
branches;
next	1.22;

1.22
date	2002.07.25.19.01.19;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2002.06.11.22.56.48;	author jason;	state Exp;
branches;
next	1.20;

1.20
date	2002.06.11.15.33.27;	author matthieu;	state Exp;
branches;
next	1.19;

1.19
date	2002.06.07.20.56.38;	author drahn;	state Exp;
branches;
next	1.18;

1.18
date	2002.05.29.20.43.44;	author maja;	state Exp;
branches;
next	1.17;

1.17
date	2002.05.22.21.29.10;	author jason;	state Exp;
branches;
next	1.16;

1.16
date	2002.03.31.17.34.15;	author jason;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.27.18.54.09;	author jbm;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.16.14.55.38;	author jason;	state Exp;
branches;
next	1.13;

1.13
date	2001.09.16.00.42.44;	author millert;	state Exp;
branches
	1.13.4.1;
next	1.12;

1.12
date	2001.08.29.20.20.26;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.29.20.16.22;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.08.22.28.43;	author mickey;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2001.04.14.04.44.01;	author aaron;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2001.03.14.02.49.22;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.03.08.53.46;	author maja;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.28.19.12.40;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.10.19.42.06;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.05.23.39.01;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.01.13.51.17;	author mickey;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2000.06.30.05.08.06;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.16.23.49.11;	author mickey;	state Exp;
branches;
next	;

1.3.2.1
date	2001.09.16.15.22.03;	author miod;	state Exp;
branches;
next	;

1.9.2.1
date	2001.10.14.20.44.49;	author jason;	state Exp;
branches;
next	;

1.10.2.1
date	2001.05.14.22.26.30;	author niklas;	state Exp;
branches;
next	1.10.2.2;

1.10.2.2
date	2001.07.04.10.44.08;	author niklas;	state Exp;
branches;
next	1.10.2.3;

1.10.2.3
date	2001.10.31.03.22.50;	author nate;	state Exp;
branches;
next	1.10.2.4;

1.10.2.4
date	2002.03.06.02.11.48;	author niklas;	state Exp;
branches;
next	1.10.2.5;

1.10.2.5
date	2003.03.28.00.38.33;	author niklas;	state Exp;
branches;
next	1.10.2.6;

1.10.2.6
date	2003.05.13.19.35.13;	author ho;	state Exp;
branches;
next	1.10.2.7;

1.10.2.7
date	2003.05.16.00.29.42;	author niklas;	state Exp;
branches;
next	1.10.2.8;

1.10.2.8
date	2004.02.19.10.56.35;	author niklas;	state Exp;
branches;
next	1.10.2.9;

1.10.2.9
date	2004.06.05.23.12.59;	author niklas;	state Exp;
branches;
next	;

1.13.4.1
date	2002.01.31.22.55.39;	author niklas;	state Exp;
branches;
next	1.13.4.2;

1.13.4.2
date	2002.06.11.03.42.31;	author art;	state Exp;
branches;
next	1.13.4.3;

1.13.4.3
date	2002.10.29.00.33.33;	author art;	state Exp;
branches;
next	1.13.4.4;

1.13.4.4
date	2003.05.19.22.14.07;	author tedu;	state Exp;
branches;
next	;

1.73.2.1
date	2016.09.16.15.01.05;	author jcs;	state Exp;
branches;
next	;
commitid	LmmnMXsRS6RqM3I0;

1.74.2.1
date	2016.09.16.14.54.37;	author jcs;	state Exp;
branches;
next	;
commitid	AsdYHmqKmuFc5aNo;


desc
@@


1.84
log
@Add compressed fonts support in the kernel.

The wsdisplay_font structure has been modified to add two new members
(zdata and zdata_len) to store compressed font data and its size. We
define compressed fonts by setting the data field to NULL and populating
the zdata and zdata_len fields.

In wsfont_lock(), we check if the selected font needs to be inflated,
and we call the newly introduced wsfont_inflate() if required.

OK kettenis@@
@
text
@/* $OpenBSD: wsconsio.h,v 1.83 2017/06/15 11:48:49 fcambus Exp $ */
/* $NetBSD: wsconsio.h,v 1.74 2005/04/28 07:15:44 martin Exp $ */

/*
 * Copyright (c) 1996, 1997 Christopher G. Demetriou.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou
 *	for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _DEV_WSCONS_WSCONSIO_H_
#define	_DEV_WSCONS_WSCONSIO_H_

/*
 * WSCONS (wsdisplay, wskbd, wsmouse) exported interfaces.
 *
 * Ioctls are all in group 'W'.  Ioctl number space is partitioned like:
 *	0-31	keyboard ioctls (WSKBDIO)
 *	32-63	mouse ioctls (WSMOUSEIO)
 *	64-95	display ioctls (WSDISPLAYIO)
 *	96-127	mux ioctls (WSMUXIO)
 *	128-159 driver private ioctls
 *	160-255 reserved for future use
 */

#include <sys/types.h>
#include <sys/ioccom.h>
#include <dev/wscons/wsksymvar.h>

#include <sys/pciio.h>

#define	WSSCREEN_NAME_SIZE	16
#define	WSEMUL_NAME_SIZE	16
#define	WSFONT_NAME_SIZE	32

/*
 * Common event structure (used by keyboard and mouse)
 */
struct wscons_event {
	u_int		type;
	int		value;
	struct timespec	time;
};

/* Event type definitions.  Comment for each is information in value. */
#define	WSCONS_EVENT_KEY_UP		1	/* key code */
#define	WSCONS_EVENT_KEY_DOWN		2	/* key code */
#define	WSCONS_EVENT_ALL_KEYS_UP	3	/* void */
#define	WSCONS_EVENT_MOUSE_UP		4	/* button # (leftmost = 0) */
#define	WSCONS_EVENT_MOUSE_DOWN		5	/* button # (leftmost = 0)  */
#define	WSCONS_EVENT_MOUSE_DELTA_X	6	/* X delta amount */
#define	WSCONS_EVENT_MOUSE_DELTA_Y	7	/* Y delta amount */
#define	WSCONS_EVENT_MOUSE_ABSOLUTE_X	8	/* X location */
#define	WSCONS_EVENT_MOUSE_ABSOLUTE_Y	9	/* Y location */
#define	WSCONS_EVENT_MOUSE_DELTA_Z	10	/* Z delta amount */
#define	WSCONS_EVENT_MOUSE_ABSOLUTE_Z	11	/* (legacy, see below) */
				     /*	12-15, see below */
#define	WSCONS_EVENT_MOUSE_DELTA_W	16	/* W delta amount */
#define	WSCONS_EVENT_MOUSE_ABSOLUTE_W	17	/* (legacy, see below) */
#define	WSCONS_EVENT_SYNC		18
/* 
 * Following events are not real wscons_event but are used as parameters of the
 * WSDISPLAYIO_WSMOUSED ioctl 
 */
#define WSCONS_EVENT_WSMOUSED_ON	12	/* wsmoused(8) active */
#define WSCONS_EVENT_WSMOUSED_OFF	13	/* wsmoused(8) inactive */

#define IS_MOTION_EVENT(type) (((type) == WSCONS_EVENT_MOUSE_DELTA_X) || \
			       ((type) == WSCONS_EVENT_MOUSE_DELTA_Y) || \
			       ((type) == WSCONS_EVENT_MOUSE_DELTA_Z) || \
			       ((type) == WSCONS_EVENT_MOUSE_DELTA_W))
#define IS_BUTTON_EVENT(type) (((type) == WSCONS_EVENT_MOUSE_UP) || \
			       ((type) == WSCONS_EVENT_MOUSE_DOWN))
#define IS_CTRL_EVENT(type) ((type == WSCONS_EVENT_WSMOUSED_ON) || \
			     (type == WSCONS_EVENT_WSMOUSED_OFF))


/*
 * (Single-) Touch Events
 *
 * A RESET event will be generated whenever a change of X and Y is
 * coupled with a change of the contact count, or with a change of
 * the pointer-controlling MT slot.
 */
#define	WSCONS_EVENT_TOUCH_PRESSURE	WSCONS_EVENT_MOUSE_ABSOLUTE_Z
#define	WSCONS_EVENT_TOUCH_CONTACTS	WSCONS_EVENT_MOUSE_ABSOLUTE_W

#define	WSCONS_EVENT_TOUCH_WIDTH	24	/* contact width */
#define	WSCONS_EVENT_TOUCH_RESET	25	/* (no value) */

/*
 * Keyboard ioctls (0 - 31)
 */

/* Get keyboard type. */
#define	WSKBDIO_GTYPE		_IOR('W', 0, u_int)
#define		WSKBD_TYPE_LK201	1	/* lk-201 */
#define		WSKBD_TYPE_LK401	2	/* lk-401 */
#define		WSKBD_TYPE_PC_XT	3	/* PC-ish, XT scancode */
#define		WSKBD_TYPE_PC_AT	4	/* PC-ish, AT scancode */
#define		WSKBD_TYPE_USB		5	/* USB, XT scancode */
#define		WSKBD_TYPE_NEXT		6	/* NeXT keyboard */
#define		WSKBD_TYPE_HPC_KBD	7	/* HPC builtin keyboard */
#define		WSKBD_TYPE_HPC_BTN	8	/* HPC/PsPC buttons */
#define		WSKBD_TYPE_ARCHIMEDES	9	/* Archimedes keyboard */
#define		WSKBD_TYPE_ADB		10	/* Apple ADB keyboard */
#define		WSKBD_TYPE_SUN		11	/* Sun Type3/4 */
#define		WSKBD_TYPE_SUN5		12	/* Sun Type5 */
#define		WSKBD_TYPE_HIL		13	/* HP HIL */
#define		WSKBD_TYPE_GSC		14	/* HP PS/2 */
#define		WSKBD_TYPE_LUNA		15	/* OMRON Luna */
#define		WSKBD_TYPE_ZAURUS	16	/* Sharp Zaurus */
#define		WSKBD_TYPE_DOMAIN	17	/* Apollo Domain */
#define		WSKBD_TYPE_BLUETOOTH	18	/* Bluetooth keyboard */
#define		WSKBD_TYPE_KPC		19	/* Palm keypad */
#define		WSKBD_TYPE_SGI		20	/* SGI serial keyboard */

/* Manipulate the keyboard bell. */
struct wskbd_bell_data {
	u_int	which;				/* values to get/set */
	u_int	pitch;				/* pitch, in Hz */
	u_int	period;				/* period, in milliseconds */
	u_int	volume;				/* percentage of max volume */
};
#define		WSKBD_BELL_DOPITCH	0x1		/* get/set pitch */
#define		WSKBD_BELL_DOPERIOD	0x2		/* get/set period */
#define		WSKBD_BELL_DOVOLUME	0x4		/* get/set volume */
#define		WSKBD_BELL_DOALL	0x7		/* all of the above */

#define	WSKBDIO_BELL		_IO('W', 1)
#define	WSKBDIO_COMPLEXBELL	_IOW('W', 2, struct wskbd_bell_data)
#define	WSKBDIO_SETBELL		_IOW('W', 3, struct wskbd_bell_data)
#define	WSKBDIO_GETBELL		_IOR('W', 4, struct wskbd_bell_data)
#define	WSKBDIO_SETDEFAULTBELL	_IOW('W', 5, struct wskbd_bell_data)
#define	WSKBDIO_GETDEFAULTBELL	_IOR('W', 6, struct wskbd_bell_data)

/* Manipulate the emulation key repeat settings. */
struct wskbd_keyrepeat_data {
	u_int	which;				/* values to get/set */
	u_int	del1;				/* delay before first, ms */
	u_int	delN;				/* delay before rest, ms */
};
#define		WSKBD_KEYREPEAT_DODEL1	0x1		/* get/set del1 */
#define		WSKBD_KEYREPEAT_DODELN	0x2		/* get/set delN */
#define		WSKBD_KEYREPEAT_DOALL	0x3		/* all of the above */

#define	WSKBDIO_SETKEYREPEAT	_IOW('W', 7, struct wskbd_keyrepeat_data)
#define	WSKBDIO_GETKEYREPEAT	_IOR('W', 8, struct wskbd_keyrepeat_data)
#define	WSKBDIO_SETDEFAULTKEYREPEAT \
	    _IOW('W', 9, struct wskbd_keyrepeat_data)
#define	WSKBDIO_GETDEFAULTKEYREPEAT \
	    _IOR('W', 10, struct wskbd_keyrepeat_data)

/* Get/set keyboard leds */
#define		WSKBD_LED_CAPS		0x01
#define		WSKBD_LED_NUM		0x02
#define		WSKBD_LED_SCROLL	0x04
#define		WSKBD_LED_COMPOSE	0x08

#define	WSKBDIO_SETLEDS		_IOW('W', 11, int)
#define	WSKBDIO_GETLEDS		_IOR('W', 12, int)

/* Manipulate keysym groups. */
struct wskbd_map_data {
	u_int	maplen;				/* number of entries in map */
#define WSKBDIO_MAXMAPLEN	65536
	struct wscons_keymap *map;		/* map to get or set */
};
#define WSKBDIO_GETMAP		_IOWR('W', 13, struct wskbd_map_data)
#define WSKBDIO_SETMAP		_IOW('W', 14, struct wskbd_map_data)
#define WSKBDIO_GETENCODING	_IOR('W', 15, kbd_t)
#define WSKBDIO_SETENCODING	_IOW('W', 16, kbd_t)

/* Get/set keyboard backlight.  Not applicable to all keyboard types. */
struct wskbd_backlight {
	unsigned int min, max, curval;
};
#define	WSKBDIO_GETBACKLIGHT	_IOR('W', 17, struct wskbd_backlight)
#define	WSKBDIO_SETBACKLIGHT	_IOW('W', 18, struct wskbd_backlight)

/* internal use only */
#define WSKBDIO_SETMODE		_IOW('W', 19, int)
#define WSKBDIO_GETMODE		_IOR('W', 20, int)
#define		WSKBD_TRANSLATED	0
#define		WSKBD_RAW		1

struct wskbd_encoding_data {
	int	nencodings;
	kbd_t	*encodings;
};
#define WSKBDIO_GETENCODINGS	_IOWR('W', 21, struct wskbd_encoding_data)

/*
 * Mouse ioctls (32 - 63)
 */

/* Get mouse type */
#define	WSMOUSEIO_GTYPE		_IOR('W', 32, u_int)
#define		WSMOUSE_TYPE_VSXXX	1	/* DEC serial */
#define		WSMOUSE_TYPE_PS2	2	/* PS/2-compatible */
#define		WSMOUSE_TYPE_USB	3	/* USB mouse */
#define		WSMOUSE_TYPE_LMS	4	/* Logitech busmouse */
#define		WSMOUSE_TYPE_MMS	5	/* Microsoft InPort mouse */
#define		WSMOUSE_TYPE_TPANEL	6	/* Generic Touch Panel */
#define		WSMOUSE_TYPE_NEXT	7	/* NeXT mouse */
#define		WSMOUSE_TYPE_ARCHIMEDES	8	/* Archimedes mouse */
#define		WSMOUSE_TYPE_ADB	9	/* ADB */
#define		WSMOUSE_TYPE_HIL	10	/* HP HIL */
#define		WSMOUSE_TYPE_LUNA	11	/* OMRON Luna */
#define		WSMOUSE_TYPE_DOMAIN	12	/* Apollo Domain */
#define		WSMOUSE_TYPE_BLUETOOTH	13	/* Bluetooth mouse */
#define		WSMOUSE_TYPE_SUN	14	/* SUN serial mouse */
#define		WSMOUSE_TYPE_SYNAPTICS	15	/* Synaptics touchpad */
#define		WSMOUSE_TYPE_ALPS	16	/* ALPS touchpad */
#define		WSMOUSE_TYPE_SGI	17	/* SGI serial mouse */
#define		WSMOUSE_TYPE_ELANTECH	18	/* Elantech touchpad */
#define		WSMOUSE_TYPE_SYNAP_SBTN	19	/* Synaptics soft buttons */

/* Set resolution.  Not applicable to all mouse types. */
#define	WSMOUSEIO_SRES		_IOW('W', 33, u_int)
#define		WSMOUSE_RES_MIN		0
#define		WSMOUSE_RES_DEFAULT	75
#define		WSMOUSE_RES_MAX		100

/* Set scale factor (num / den).  Not applicable to all mouse types. */
#define	WSMOUSEIO_SSCALE	_IOW('W', 34, u_int[2])

/* Set sample rate.  Not applicable to all mouse types. */
#define	WSMOUSEIO_SRATE		_IOW('W', 35, u_int)
#define		WSMOUSE_RATE_MIN	0
#define		WSMOUSE_RATE_DEFAULT	50
#define		WSMOUSE_RATE_MAX	100

/* Set/get sample coordinates for calibration */
#define	WSMOUSE_CALIBCOORDS_MAX		16
#define	WSMOUSE_CALIBCOORDS_RESET	-1
struct wsmouse_calibcoords {
	int minx, miny;		/* minimum value of X/Y */
	int maxx, maxy;		/* maximum value of X/Y */
	int swapxy;		/* swap X/Y axis */
	int resx, resy;		/* X/Y resolution */
	int samplelen;		/* number of samples available or
				   WSMOUSE_CALIBCOORDS_RESET for raw mode */
	struct wsmouse_calibcoord {
		int rawx, rawy;	/* raw coordinate */
		int x, y;	/* translated coordinate */
	} samples[WSMOUSE_CALIBCOORDS_MAX];	/* sample coordinates */
};
#define	WSMOUSEIO_SCALIBCOORDS	_IOW('W', 36, struct wsmouse_calibcoords)
#define	WSMOUSEIO_GCALIBCOORDS	_IOR('W', 37, struct wsmouse_calibcoords)

#define	WSMOUSEIO_SETMODE	_IOW('W', 38, int)
#define		WSMOUSE_COMPAT		0
#define		WSMOUSE_NATIVE		1

/*
 * Keys of the configuration parameters in WSMOUSEIO_GETPARAMS/
 * WSMOUSEIO_SETPARAMS calls. Arbitrary subsets can be passed, provided
 * that all keys are valid and that the number of key/value pairs doesn't
 * exceed WSMOUSECFG_MAX.
 */
enum wsmousecfg {
 	/*
 	 * Coordinate handling.
 	 */
	WSMOUSECFG_DX_SCALE = 0,/* Xscale factor in [*.12] fixed-point format */
	WSMOUSECFG_DY_SCALE,	/* Yscale factor in [*.12] fixed-point format */
	WSMOUSECFG_PRESSURE_LO,	/* pressure limits defining start of touch */
	WSMOUSECFG_PRESSURE_HI,	/* pressure limits defining end of touch */
	WSMOUSECFG_TRKMAXDIST,	/* max distance to pair points for MT contact */
	WSMOUSECFG_SWAPXY,	/* swap X- and Y-axis */
	WSMOUSECFG_X_INV,	/* map absolute coordinate X to (INV - X) */
	WSMOUSECFG_Y_INV,	/* map absolute coordinate Y to (INV - Y) */

	/*
	 * Coordinate handling, applying only in WSMOUSE_COMPAT  mode.
	 */
	WSMOUSECFG_DX_MAX = 32,	/* ignore X deltas greater than this limit */
	WSMOUSECFG_DY_MAX,	/* ignore Y deltas greater than this limit */
	WSMOUSECFG_X_HYSTERESIS,/* retard value for X coordinates */
	WSMOUSECFG_Y_HYSTERESIS,/* retard value for Y coordinates */
	WSMOUSECFG_DECELERATION,/* threshold (distance) for deceleration */
	WSMOUSECFG_STRONG_HYSTERESIS,	/* apply the filter continuously */
	WSMOUSECFG_SMOOTHING,	/* smoothing factor (0-7) */

	/*
	 * Touchpad features
	 */
	WSMOUSECFG_SOFTBUTTONS = 64,	/* 2 soft-buttons at the bottom edge */
	WSMOUSECFG_SOFTMBTN,		/* add a middle-button area */
	WSMOUSECFG_TOPBUTTONS,		/* 3 soft-buttons at the top edge */
	WSMOUSECFG_TWOFINGERSCROLL,	/* enable two-finger scrolling */
	WSMOUSECFG_EDGESCROLL,		/* enable edge scrolling */
	WSMOUSECFG_HORIZSCROLL,		/* enable horizontal edge scrolling */
	WSMOUSECFG_SWAPSIDES,		/* invert soft-button/scroll areas */
	WSMOUSECFG_DISABLE,		/* disable all output except for
					   clicks in the top-button area */
	WSMOUSECFG_TAPPING,		/* enable tapping */

	/*
	 * Touchpad options
	 */
	WSMOUSECFG_LEFT_EDGE = 128,	/* ratio: left edge / total width */
	WSMOUSECFG_RIGHT_EDGE,		/* ratio: right edge / total width */
	WSMOUSECFG_TOP_EDGE,		/* ratio: top edge / total height */
	WSMOUSECFG_BOTTOM_EDGE,		/* ratio: bottom edge / total height */
	WSMOUSECFG_CENTERWIDTH,		/* ratio: center width / total width */
	WSMOUSECFG_HORIZSCROLLDIST,	/* distance mapped to a scroll event */
	WSMOUSECFG_VERTSCROLLDIST,	/* distance mapped to a scroll event */
	WSMOUSECFG_F2WIDTH,		/* width limit for single touches */
	WSMOUSECFG_F2PRESSURE,		/* pressure limit for single touches */
	WSMOUSECFG_TAP_MAXTIME,		/* max. duration of tap contacts (ms) */
	WSMOUSECFG_TAP_CLICKTIME,	/* time between the end of a tap and
					   the button-up-event (ms) */
	WSMOUSECFG_TAP_LOCKTIME,	/* time between a tap-and-drag action
					   and the button-up-event (ms) */
};
#define WSMOUSECFG_MAX	36	/* max size of param array per ioctl */

struct wsmouse_param {
	enum wsmousecfg key;
	int value;
};

struct wsmouse_parameters {
	struct wsmouse_param *params;
	u_int nparams;
};

#define WSMOUSEIO_GETPARAMS	_IOW('W', 39, struct wsmouse_parameters)
#define WSMOUSEIO_SETPARAMS	_IOW('W', 40, struct wsmouse_parameters)

/*
 * Display ioctls (64 - 95)
 */

/* Get display type */
#define	WSDISPLAYIO_GTYPE	_IOR('W', 64, u_int)
#define		WSDISPLAY_TYPE_UNKNOWN	0	/* unknown */
#define		WSDISPLAY_TYPE_PM_MONO	1	/* DEC [23]100 mono */
#define		WSDISPLAY_TYPE_PM_COLOR	2	/* DEC [23]100 color */
#define		WSDISPLAY_TYPE_CFB	3	/* DEC TC CFB (CX) */
#define		WSDISPLAY_TYPE_XCFB	4	/* DEC `maxine' onboard fb */
#define		WSDISPLAY_TYPE_MFB	5	/* DEC TC MFB (MX) */
#define		WSDISPLAY_TYPE_SFB	6	/* DEC TC SFB (HX) */
#define		WSDISPLAY_TYPE_ISAVGA	7	/* (generic) ISA VGA */
#define		WSDISPLAY_TYPE_PCIVGA	8	/* (generic) PCI VGA */
#define		WSDISPLAY_TYPE_TGA	9	/* DEC PCI TGA */
#define		WSDISPLAY_TYPE_SFBP	10	/* DEC TC SFB+ (HX+) */
#define		WSDISPLAY_TYPE_PCIMISC	11	/* (generic) PCI misc. disp. */
#define		WSDISPLAY_TYPE_NEXTMONO	12	/* NeXT mono display */
#define		WSDISPLAY_TYPE_PX	13	/* DEC TC PX */
#define		WSDISPLAY_TYPE_PXG	14	/* DEC TC PXG */
#define		WSDISPLAY_TYPE_TX	15	/* DEC TC TX */
#define		WSDISPLAY_TYPE_HPCFB	16	/* Handheld/PalmSize PC */
#define		WSDISPLAY_TYPE_VIDC	17	/* Acorn/ARM VIDC */
#define		WSDISPLAY_TYPE_SPX	18	/* DEC SPX (VS3100/VS4000) */
#define		WSDISPLAY_TYPE_GPX	19	/* DEC GPX (uVAX/VS2K/VS3100) */
#define		WSDISPLAY_TYPE_LCG	20	/* DEC LCG (VS4000) */
#define		WSDISPLAY_TYPE_VAX_MONO	21	/* DEC VS2K/VS3100 mono */
#define		WSDISPLAY_TYPE_SB_P9100	22	/* Tadpole SPARCbook P9100 */
#define		WSDISPLAY_TYPE_EGA	23	/* (generic) EGA */
#define		WSDISPLAY_TYPE_DCPVR	24	/* Dreamcast PowerVR */
#define		WSDISPLAY_TYPE_SUN24	25	/* Sun 24 bit framebuffers */
#define		WSDISPLAY_TYPE_SUNBW	26	/* Sun black and white fb */
#define		WSDISPLAY_TYPE_STI	27	/* HP STI framebuffers */
#define		WSDISPLAY_TYPE_SUNCG3	28	/* Sun cgthree */
#define		WSDISPLAY_TYPE_SUNCG6	29	/* Sun cgsix */
#define		WSDISPLAY_TYPE_SUNFFB	30	/* Sun creator FFB */
#define		WSDISPLAY_TYPE_SUNCG14	31	/* Sun cgfourteen */
#define		WSDISPLAY_TYPE_SUNCG2	32	/* Sun cgtwo */
#define		WSDISPLAY_TYPE_SUNCG4	33	/* Sun cgfour */
#define		WSDISPLAY_TYPE_SUNCG8	34	/* Sun cgeight */
#define		WSDISPLAY_TYPE_SUNTCX	35	/* Sun TCX */
#define		WSDISPLAY_TYPE_AGTEN	36	/* AG10E */
#define		WSDISPLAY_TYPE_XVIDEO	37	/* Xvideo */
#define		WSDISPLAY_TYPE_SUNCG12	38	/* Sun cgtwelve */
#define		WSDISPLAY_TYPE_MGX	39	/* SMS MGX */
#define		WSDISPLAY_TYPE_SB_P9000	40	/* Tadpole SPARCbook P9000 */
#define		WSDISPLAY_TYPE_RFLEX	41	/* RasterFlex series */
#define		WSDISPLAY_TYPE_LUNA	42	/* OMRON Luna */
#define		WSDISPLAY_TYPE_DVBOX	43	/* HP DaVinci */
#define		WSDISPLAY_TYPE_GBOX	44	/* HP Gatorbox */
#define		WSDISPLAY_TYPE_RBOX	45	/* HP Renaissance */
#define		WSDISPLAY_TYPE_HYPERION	46	/* HP Hyperion */
#define		WSDISPLAY_TYPE_TOPCAT	47	/* HP Topcat */
#define		WSDISPLAY_TYPE_PXALCD	48	/* PXALCD (Zaurus) */
#define		WSDISPLAY_TYPE_MAC68K	49	/* Generic mac68k framebuffer */
#define		WSDISPLAY_TYPE_SUNLEO	50	/* Sun ZX/Leo */
#define		WSDISPLAY_TYPE_TVRX	51	/* HP TurboVRX */
#define		WSDISPLAY_TYPE_CFXGA	52	/* CF VoyagerVGA */
#define		WSDISPLAY_TYPE_LCSPX	53	/* DEC LCSPX (VS4000) */
#define		WSDISPLAY_TYPE_GBE	54	/* SGI GBE frame buffer */
#define		WSDISPLAY_TYPE_LEGSS	55	/* DEC LEGSS (VS35x0) */
#define		WSDISPLAY_TYPE_IFB	56	/* Sun Expert3D{,-Lite} */
#define		WSDISPLAY_TYPE_RAPTOR	57	/* Tech Source Raptor */
#define		WSDISPLAY_TYPE_DL	58	/* DisplayLink DL-120/DL-160 */
#define		WSDISPLAY_TYPE_MACHFB	59	/* Sun PGX/PGX64 */
#define		WSDISPLAY_TYPE_GFXP	60	/* Sun PGX32 */
#define		WSDISPLAY_TYPE_RADEONFB	61	/* Sun XVR-100 */
#define		WSDISPLAY_TYPE_SMFB	62	/* SiliconMotion SM712 */
#define		WSDISPLAY_TYPE_SISFB	63	/* SiS 315 Pro */
#define		WSDISPLAY_TYPE_ODYSSEY	64	/* SGI Odyssey */
#define		WSDISPLAY_TYPE_IMPACT	65	/* SGI Impact */
#define		WSDISPLAY_TYPE_GRTWO	66	/* SGI GR2 */
#define		WSDISPLAY_TYPE_NEWPORT	67	/* SGI Newport */
#define		WSDISPLAY_TYPE_LIGHT	68	/* SGI Light */
#define		WSDISPLAY_TYPE_INTELDRM	69	/* Intel KMS framebuffer */
#define		WSDISPLAY_TYPE_RADEONDRM 70	/* ATI Radeon KMS framebuffer */
#define		WSDISPLAY_TYPE_EFIFB	71	/* EFI framebuffer */

/* Basic display information.  Not applicable to all display types. */
struct wsdisplay_fbinfo {
	u_int	height;				/* height in pixels */
	u_int	width;				/* width in pixels */
	u_int	depth;				/* bits per pixel */
	u_int	cmsize;				/* color map size (entries) */
};
#define	WSDISPLAYIO_GINFO	_IOR('W', 65, struct wsdisplay_fbinfo)

/* Colormap operations.  Not applicable to all display types. */
struct wsdisplay_cmap {
	u_int	index;				/* first element (0 origin) */
	u_int	count;				/* number of elements */
	u_char	*red;				/* red color map elements */
	u_char	*green;				/* green color map elements */
	u_char	*blue;				/* blue color map elements */
};      
#define WSDISPLAYIO_GETCMAP	_IOW('W', 66, struct wsdisplay_cmap)
#define WSDISPLAYIO_PUTCMAP	_IOW('W', 67, struct wsdisplay_cmap)

/* Video control.  Not applicable to all display types. */
#define	WSDISPLAYIO_GVIDEO	_IOR('W', 68, u_int)
#define	WSDISPLAYIO_SVIDEO	_IOW('W', 69, u_int)
#define		WSDISPLAYIO_VIDEO_OFF	0	/* video off */
#define		WSDISPLAYIO_VIDEO_ON	1	/* video on */

/* Cursor control.  Not applicable to all display types. */
struct wsdisplay_curpos {			/* cursor "position" */
	u_int x, y;
};

struct wsdisplay_cursor {
	u_int	which;				/* values to get/set */
	u_int	enable;				/* enable/disable */
	struct wsdisplay_curpos pos;		/* position */
	struct wsdisplay_curpos hot;		/* hot spot */
	struct wsdisplay_cmap cmap;		/* color map info */
	struct wsdisplay_curpos size;		/* bit map size */
	u_char *image;				/* image data */
	u_char *mask;				/* mask data */
};
#define		WSDISPLAY_CURSOR_DOCUR		0x01	/* get/set enable */
#define		WSDISPLAY_CURSOR_DOPOS		0x02	/* get/set pos */
#define		WSDISPLAY_CURSOR_DOHOT		0x04	/* get/set hot spot */
#define		WSDISPLAY_CURSOR_DOCMAP		0x08	/* get/set cmap */
#define		WSDISPLAY_CURSOR_DOSHAPE	0x10	/* get/set img/mask */
#define		WSDISPLAY_CURSOR_DOALL		0x1f	/* all of the above */

/* Cursor control: get and set position */
#define	WSDISPLAYIO_GCURPOS	_IOR('W', 70, struct wsdisplay_curpos)
#define	WSDISPLAYIO_SCURPOS	_IOW('W', 71, struct wsdisplay_curpos)

/* Cursor control: get maximum size */
#define	WSDISPLAYIO_GCURMAX	_IOR('W', 72, struct wsdisplay_curpos)

/* Cursor control: get/set cursor attributes/shape */
#define	WSDISPLAYIO_GCURSOR	_IOWR('W', 73, struct wsdisplay_cursor)
#define	WSDISPLAYIO_SCURSOR	_IOW('W', 74, struct wsdisplay_cursor)

/* Display mode: Emulation (text) vs. Mapped (graphics) mode */
#define	WSDISPLAYIO_GMODE	_IOR('W', 75, u_int)
#define	WSDISPLAYIO_SMODE	_IOW('W', 76, u_int)
#define		WSDISPLAYIO_MODE_EMUL	0	/* emulation (text) mode */
#define		WSDISPLAYIO_MODE_MAPPED	1	/* mapped (graphics) mode */
#define		WSDISPLAYIO_MODE_DUMBFB	2	/* mapped (graphics) fb mode */

struct wsdisplay_font {
	char name[WSFONT_NAME_SIZE];
	int index;
#define WSDISPLAY_MAXFONTCOUNT	8
	int firstchar, numchars;
	int encoding;
#define WSDISPLAY_FONTENC_ISO 0
#define WSDISPLAY_FONTENC_IBM 1
	u_int fontwidth, fontheight, stride;
#define WSDISPLAY_MAXFONTSZ	(512*1024)
	int bitorder, byteorder;
#define	WSDISPLAY_FONTORDER_KNOWN	0	/* i.e, no need to convert */
#define	WSDISPLAY_FONTORDER_L2R		1
#define	WSDISPLAY_FONTORDER_R2L		2
	void *cookie;
	void *data;
	void *zdata;
	u_int zdata_len;
};
#define WSDISPLAYIO_LDFONT	_IOW ('W', 77, struct wsdisplay_font)
#define	WSDISPLAYIO_LSFONT	_IOWR('W', 78, struct wsdisplay_font)
#define	WSDISPLAYIO_DELFONT	_IOW ('W', 79, struct wsdisplay_font)
#define WSDISPLAYIO_USEFONT	_IOW ('W', 80, struct wsdisplay_font)

struct wsdisplay_burner {
	u_int	off;
	u_int	on;
	u_int	flags;
#define	WSDISPLAY_BURN_VBLANK	0x0001
#define	WSDISPLAY_BURN_KBD	0x0002
#define	WSDISPLAY_BURN_MOUSE	0x0004
#define	WSDISPLAY_BURN_OUTPUT	0x0008
};
#define	WSDISPLAYIO_SBURNER	_IOW('W', 81, struct wsdisplay_burner)
#define	WSDISPLAYIO_GBURNER	_IOR('W', 82, struct wsdisplay_burner) 

/*
 * XXX WARNING
 * XXX The following definitions are very preliminary and are likely
 * XXX to be changed without care about backwards compatibility!
 */
struct wsdisplay_addscreendata {
	int idx; /* screen index */
	char screentype[WSSCREEN_NAME_SIZE];
	char emul[WSEMUL_NAME_SIZE];
};
#define WSDISPLAYIO_ADDSCREEN	_IOW('W', 83, struct wsdisplay_addscreendata)

struct wsdisplay_delscreendata {
	int idx; /* screen index */
	int flags;
#define	WSDISPLAY_DELSCR_FORCE	0x01
#define	WSDISPLAY_DELSCR_QUIET	0x02
};
#define WSDISPLAYIO_DELSCREEN	_IOW('W', 84, struct wsdisplay_delscreendata)

#define WSDISPLAYIO_GETSCREEN	_IOWR('W', 85, struct wsdisplay_addscreendata)
#define	WSDISPLAYIO_SETSCREEN	_IOW('W', 86, u_int)

/* Display information: number of bytes per row, may be same as pixels */
#define	WSDISPLAYIO_LINEBYTES	_IOR('W', 95, u_int)

/* Mouse console support */
#define WSDISPLAYIO_WSMOUSED	_IOW('W', 88, struct wscons_event)

/* Misc control.  Not applicable to all display types. */
struct wsdisplay_param {
        int param;
#define	WSDISPLAYIO_PARAM_BACKLIGHT	1
#define	WSDISPLAYIO_PARAM_BRIGHTNESS	2
#define	WSDISPLAYIO_PARAM_CONTRAST	3
        int min, max, curval;
        int reserved[4];
};
#define	WSDISPLAYIO_GETPARAM	_IOWR('W', 89, struct wsdisplay_param)
#define	WSDISPLAYIO_SETPARAM	_IOWR('W', 90, struct wsdisplay_param)

#define WSDISPLAYIO_GPCIID	_IOR('W', 91, struct pcisel)

/* graphical mode control */

#define WSDISPLAYIO_DEPTH_1		0x1
#define WSDISPLAYIO_DEPTH_4		0x2
#define WSDISPLAYIO_DEPTH_8		0x4
#define WSDISPLAYIO_DEPTH_15		0x8
#define WSDISPLAYIO_DEPTH_16		0x10
#define WSDISPLAYIO_DEPTH_24_24		0x20
#define WSDISPLAYIO_DEPTH_24_32		0x40
#define WSDISPLAYIO_DEPTH_24 (WSDISPLAYIO_DEPTH_24_24|WSDISPLAYIO_DEPTH_24_32)

#define WSDISPLAYIO_GETSUPPORTEDDEPTH	_IOR('W', 92, unsigned int)

struct wsdisplay_gfx_mode {
	int width;
	int height;
	int depth;
};

#define WSDISPLAYIO_SETGFXMODE	_IOW('W', 92, struct wsdisplay_gfx_mode)

struct wsdisplay_screentype {
	int idx;
	int nidx;
	char name[WSSCREEN_NAME_SIZE];
	int ncols, nrows;
	int fontwidth, fontheight;
};

#define	WSDISPLAYIO_GETSCREENTYPE	_IOWR('W', 93, struct wsdisplay_screentype)

struct wsdisplay_emultype {
	int idx;
	char name[WSSCREEN_NAME_SIZE];
};

#define	WSDISPLAYIO_GETEMULTYPE	_IOWR('W', 94, struct wsdisplay_emultype)

/* XXX NOT YET DEFINED */
/* Mapping information retrieval. */

/*
 * Mux ioctls (96 - 127)
 */

#define WSMUXIO_INJECTEVENT	_IOW('W', 96, struct wscons_event)
#define	WSMUX_INJECTEVENT	WSMUXIO_INJECTEVENT	/* XXX compat */

struct wsmux_device {
	int type;
#define WSMUX_MOUSE	1
#define WSMUX_KBD	2
#define WSMUX_MUX	3
	int idx;
};
#define WSMUXIO_ADD_DEVICE	_IOW('W', 97, struct wsmux_device)
#define	WSMUX_ADD_DEVICE	WSMUXIO_ADD_DEVICE	/* XXX compat */
#define WSMUXIO_REMOVE_DEVICE	_IOW('W', 98, struct wsmux_device)
#define	WSMUX_REMOVE_DEVICE	WSMUXIO_REMOVE_DEVICE	/* XXX compat */

#define WSMUX_MAXDEV 32
struct wsmux_device_list {
	int ndevices;
	struct wsmux_device devices[WSMUX_MAXDEV];
};
#define WSMUXIO_LIST_DEVICES	_IOWR('W', 99, struct wsmux_device_list)
#define	WSMUX_LIST_DEVICES	WSMUXIO_LIST_DEVICES	/* XXX compat */

#endif /* _DEV_WSCONS_WSCONSIO_H_ */
@


1.83
log
@We do not support iso7 nor pcvt encoding, so remove macro definitions
and commented entries.

OK mlarkin@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.82 2017/06/13 08:00:24 fcambus Exp $ */
d517 2
@


1.82
log
@Increase WSFONT_NAME_SIZE size, this will allow storing longer font
names in wsdisplay_font structures.

OK deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.81 2017/06/06 19:47:22 bru Exp $ */
a508 2
#define WSDISPLAY_FONTENC_PCVT 2
#define WSDISPLAY_FONTENC_ISO7 3 /* greek */
@


1.81
log
@Add support for tap gestures.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.80 2017/05/08 20:55:29 bru Exp $ */
d57 1
a57 1
#define	WSFONT_NAME_SIZE	16
@


1.80
log
@improved coordinate filters

ok mpi@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.79 2017/03/16 10:03:27 mpi Exp $ */
d321 1
d335 5
d341 1
a341 1
#define WSMOUSECFG_MAX	32	/* max size of param array per ioctl */
@


1.79
log
@Simplify wstpad option handling:

- Remove unnecessary abstraction
- Make it possible to support new features/options without ABI break
- Remove some complexity and hard limits
- Simplify & keep documentation close to options

ok bru@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.78 2017/02/27 15:59:56 bru Exp $ */
d306 2
d312 9
a320 8
	WSMOUSECFG_SOFTBUTTONS = 64,	/* has "soft" buttons */
	WSMOUSECFG_SOFTMBTN,	/* coordinates of middle-button area */
	WSMOUSECFG_TOPBUTTONS,
	WSMOUSECFG_TWOFINGERSCROLL,
	WSMOUSECFG_EDGESCROLL,
	WSMOUSECFG_HORIZSCROLL,	/* enable horizontal scrolling */
	WSMOUSECFG_SWAPSIDES,
	WSMOUSECFG_DISABLE,
d325 9
a333 9
	WSMOUSECFG_LEFT_EDGE = 128,	/* ratios of the left edge */
	WSMOUSECFG_RIGHT_EDGE,	/* ratios of the right edge */
	WSMOUSECFG_TOP_EDGE,	/* ratios of the top edge */
	WSMOUSECFG_BOTTOM_EDGE,	/* ratios of the bottom edge */
	WSMOUSECFG_CENTERWIDTH,	/* width of the middle-button area */
	WSMOUSECFG_HORIZSCROLLDIST,
	WSMOUSECFG_VERTSCROLLDIST,
	WSMOUSECFG_F2WIDTH,
	WSMOUSECFG_F2PRESSURE,
@


1.78
log
@Handle touchpad input in wsmouse.

The wstpad file contains the core of a touchpad-input driver that
is coupled with wsmouse. It is active in compat-mode if wsmouse has
been configured for it.

ok @@matthieu @@stsp @@mpi
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.77 2016/10/23 22:59:19 bru Exp $ */
d283 1
a283 37
 * exceed the enum size.
 *
 * Most parameters in the "FILTER" group concern coordinate handling.
 * DX_MAX, DY_MAX, HYSTERESIS, and DECELERATION only apply to touchpads in
 * WSMOUSE_COMPAT mode.
 *
 * WSMOUSECFG_DX_SCALE, WSMOUSECFG_DY_SCALE:
 *	Scale factors in [*.12] fixed-point format.
 * WSMOUSECFG_PRESSURE_LO, WSMOUSECFG_PRESSURE_HI:
 *	Pressure limits defining the end and the start of touches.
 * WSMOUSECFG_TRKMAXDIST:
 *	When tracking MT contacts, don't pair points with a distance that
 *	exceeds this limit.
 * WSMOUSECFG_SWAPXY:
 *	Swap the X- and Y-axis.
 * WSMOUSECFG_X_INV, WSMOUSECFG_Y_INV:
 *	Map an absolute coordinate C to (INV - C), negate relative coordinates.
 * WSMOUSECFG_DX_MAX, WSMOUSECFG_DY_MAX:
 *	Ignore deltas that are greater than these limits.
 * WSMOUSECFG_X_HYSTERESIS, WSMOUSECFG_Y_HYSTERESIS:
 *	If these values are non-zero, changes of output coordinates will lag
 *	behind the input by [+hysteresis] units, or [-hysteresis] units,
 *	respectively.
 * WSMOUSECFG_DECELERATION:
 *	A distance defining the thresholds for deceleration, see
 *	wstpad_decelerate().
 *
 * The "TP_OPTS" group consists exclusively of flags that control touchpad
 * behaviour. Softbuttons at the bottom edge of a touchpad (SOFTBUTTONS)
 * will not include a middle-button area if SOFTMBTN is not set. Likewise,
 * if edge scrolling is active, HORIZSCROLL must be set in addition in order
 * to enable horizontal scrolling.
 *
 * The first parameters in the "TP" group (*_EDGE) determine the size of the
 * edge areas, and the width of the middle-button area (CENTERWIDTH). The
 * values are ratios to the width or height of the touchpad surface and have
 * a [*.12] fixed-point format.
a284 4
#define wsmousecfg_group(group)	\
    WSMOUSECFG_##group##_MAX,	\
    WSMOUSECFG_##group##_ADV = (WSMOUSECFG_##group##_MAX | 0xff)

d286 26
a311 18
	WSMOUSECFG_DX_SCALE,
	WSMOUSECFG_DY_SCALE,
	WSMOUSECFG_PRESSURE_LO,
	WSMOUSECFG_PRESSURE_HI,
	WSMOUSECFG_TRKMAXDIST,
	WSMOUSECFG_SWAPXY,
	WSMOUSECFG_X_INV,
	WSMOUSECFG_Y_INV,
	WSMOUSECFG_DX_MAX,
	WSMOUSECFG_DY_MAX,
	WSMOUSECFG_X_HYSTERESIS,
	WSMOUSECFG_Y_HYSTERESIS,
	WSMOUSECFG_DECELERATION,

	wsmousecfg_group(FILTER),

	WSMOUSECFG_SOFTBUTTONS,
	WSMOUSECFG_SOFTMBTN,
d315 1
a315 1
	WSMOUSECFG_HORIZSCROLL,
d319 8
a326 7
	wsmousecfg_group(TP_OPTS),

	WSMOUSECFG_LEFT_EDGE,
	WSMOUSECFG_RIGHT_EDGE,
	WSMOUSECFG_TOP_EDGE,
	WSMOUSECFG_BOTTOM_EDGE,
	WSMOUSECFG_CENTERWIDTH,
a330 2

	wsmousecfg_group(TP),
d332 1
a332 1
#undef wsmousecfg_group
@


1.77
log
@Improved parameter handling in wsmouse and new ioctls for reading and
setting parameter values.

ok matthieu@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.76 2016/09/30 12:05:46 kettenis Exp $ */
d285 4
d301 19
a319 2
 *	Ignore deltas that are greater than these limits (for touchpads in
 *	WSMOUSE_COMPAT mode only).
d336 26
d363 1
a363 1
	wsmousecfg_group(FLTR),
@


1.76
log
@Add a WSKBDIO_GETENCODINGS ioctl that returns the supported keyboard
encodings.

ok deraadt@@, jca@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.75 2016/09/14 03:25:51 jcs Exp $ */
d278 54
@


1.75
log
@limit the number of fonts that can be loaded

ok millert mlarkin deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.74 2016/03/30 23:34:12 bru Exp $ */
d209 6
@


1.74
log
@Add support for multitouch input to wsmouse.

This change adds new input-processing functions to wsmouse and
adapts the touchpad drivers.

ok mpi@@, shadchin@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.73 2015/12/12 12:30:18 jung Exp $ */
d421 1
@


1.74.2.1
log
@MFC: limit the number of fonts that can be loaded

ok millert mlarkin deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.75 2016/09/14 03:25:51 jcs Exp $ */
a420 1
#define WSDISPLAY_MAXFONTCOUNT	8
@


1.73
log
@add new ioctls to control keyboard backlights

tested by Bryan Vyhmeister, krw, tb, and myself

ok jcs krw tb
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.72 2015/08/30 10:05:09 yasuoka Exp $ */
d79 1
a79 1
#define	WSCONS_EVENT_MOUSE_ABSOLUTE_Z	11	/* Z location */
d82 1
a82 1
#define	WSCONS_EVENT_MOUSE_ABSOLUTE_W	17	/* W location */
d99 14
@


1.73.2.1
log
@MFC: limit the number of fonts that can be loaded

ok millert mlarkin deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.75 2016/09/14 03:25:51 jcs Exp $ */
a406 1
#define WSDISPLAY_MAXFONTCOUNT	8
@


1.72
log
@Modify kernel to prepare boot from UEFI.

- Add new boot arg "bios_efi_info_t" to pass the paramters from UEFI
- Make bios(4) and acpi(4) be able to probe with the parameters from
  UEFI
- Add efifb(8).  It uses the framebuffer from UEFI and it will work as
  a backend of wsdisplay(4) and wsfb (X11 video driver).  Disabled by
  the kernel config for this moment

input and ok kettenis
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.71 2015/01/15 01:19:29 jsg Exp $ */
d182 7
@


1.71
log
@Define a new wscons mouse type for Synaptics clickpad devices that lack
physical buttons.  This will be used if the acpi pnpid for the mouse
matches a list provided by Synaptics found in Linux.

Combined with the xenocara changes this will remove the need for an xorg
config file for the x240/t440/t540 generation of thinkpads.

ok matthieu@@ shadchin@@ kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.70 2014/12/21 18:25:07 shadchin Exp $ */
d329 1
@


1.70
log
@WSCONS_EVENT_WSMOUSED_SLEEP and WSCONS_EVENT_WSMOUSED_CLOSE not used anymore.

ok mpi@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.69 2013/11/17 13:41:26 kettenis Exp $ */
d213 1
@


1.69
log
@Distinguish between inteldrm and radeondrm.

ok jsg@@, miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.68 2013/10/20 10:43:48 miod Exp $ */
a89 3
#define WSCONS_EVENT_WSMOUSED_SLEEP	14	/* wsmoused(8) sleeping */
#define WSCONS_EVENT_WSMOUSED_CLOSE	15	/* notify wsmoused(8) to close 
						   mouse device */
d98 1
a98 2
			     (type == WSCONS_EVENT_WSMOUSED_OFF)|| \
			     (type == WSCONS_EVENT_WSMOUSED_SLEEP))
@


1.68
log
@WSDISPLAYIO_GTYPE ioctl support for KMS drivers. ok jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.67 2012/10/29 11:54:45 stsp Exp $ */
d330 2
a331 1
#define		WSDISPLAY_TYPE_KMS	69	/* KMS framebuffer */
@


1.67
log
@Add support for Elantech touchpads to pms(4). This allows the X synaptics(4)
input driver to configure these touchpads properly, e.g. toggle tap-to-click,
two-finger scrolling, edge-scrolling, etc. So far these pads were working
only in PS/2 mouse compatibility mode.

Support for up to hardware version 3 has been implemented. But only version 3
has been tested so versions 1 and 2 remain disabled via #ifdef notyet until
someone tests (bugs in this code could seriously mess up the mouse and I
don't want to end up shipping such bugs in 5.3).

help and ok mpi@@ shadchin@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.66 2012/07/22 18:28:36 shadchin Exp $ */
d330 1
@


1.66
log
@Fix for ClickPad. On issue pointed gilles@@ and matthieu@@

ok gilles@@, matthieu@@, mpi@@, miod@@, deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.65 2012/04/17 08:51:24 miod Exp $ */
d216 1
@


1.65
log
@Add type numbers for upcoming sgi work, forgotten during newport(4) import.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.64 2011/09/20 17:00:24 shadchin Exp $ */
d83 1
@


1.64
log
@Prepare to add support ALPS touchpads

no objections mpi@@ and matthieu@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.63 2011/05/05 15:30:31 shadchin Exp $ */
d128 1
d214 1
d325 3
@


1.63
log
@synaptics touchpad keep the current (pms) behaviour until WSMOUSEIO_SETMODE
ioctl is issued to switch to synaptics mode.

WSMOUSE_COMPAT - behavior conventional mouse (relative mode) (default)
WSMOUSE_NATIVE - full power synaptics

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.62 2011/04/07 15:06:32 shadchin Exp $ */
d212 1
@


1.62
log
@Prepare to add support Synaptics touchpads

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.61 2010/07/01 02:33:05 maja Exp $ */
d245 4
@


1.61
log
@Make it possible to get the screen types and emulations for a wsdisplay.
Information needed for wsconscfg. feedback and ok miod@@. -moj
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.60 2010/03/07 21:26:24 miod Exp $ */
d211 1
@


1.60
log
@Minimalistic driver for the ImpactSR (Mardigras) video option found on older
Octane systems, as well as some Onyxes. With special permission to change a
systemwide .h file and add a manpage from deraadt@@
Magic numbers and operation sequencing borrowed from Linux; tested on
Octane + ESI.
ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.59 2010/03/04 14:31:12 jsing Exp $ */
d482 17
@


1.59
log
@Add wsdisplay type for SGI VPro (aka Odyssey)

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.57 2009/12/25 22:02:47 miod Exp $ */
d316 1
@


1.58
log
@Minimal frame buffer driver for the SiS 315 found on Lemote Fuloong systems.
Currently unable to change video modes or provide any form of acceleration,
so you are stuck in a 640x400x8 mode, but at least people scared of serial
consoles will get a chance to use their Fuloongs now.

Tested by otto@@ (early developments) and jasper@@ (final version)
@
text
@d315 1
@


1.57
log
@A couple more device types.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.56 2009/09/21 07:41:18 mglocker Exp $ */
d314 1
@


1.56
log
@Document a private ioctl range for wscons drivers (from Miod).  Therefore
change the UDLIO_DAMAGE ioctl from 0 to 128 and move the ioctl part from
udl.h to udlio.h so we can include it in userland applications.

Suggested and OK miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.55 2009/07/03 17:37:02 kettenis Exp $ */
d127 1
d313 1
@


1.55
log
@Add a wsdisplay type for an upcoming driver for the Sun XVR-100 framebuffer.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.54 2009/06/03 21:30:11 kettenis Exp $ */
d45 2
a46 1
 *	128-255	reserved for future use
@


1.54
log
@Define a wsdisplay type for gfxp(4).
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.53 2009/06/02 04:53:57 kettenis Exp $ */
d310 1
@


1.53
log
@Define a proper wsdisplay type for machfb(4).

requested by miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.52 2009/05/20 18:22:33 miod Exp $ */
d309 1
@


1.52
log
@Add code to attach sun mice on sparc and sparc64 as wsmouse devices. Since
not all Sun mice run at the canonical 1200 bps, hop between 1200, 4800 and
9600 bps by paying attention to breaks on the line.

Attachement and engine code written 7 years ago for OpenBSD/sparc, except for
sparc64 com(4) attachment. Speed hop idea borrowed from Opensolaris.

This allows sparc and sparc64 users to run X11 without needing a configuration
file anymore, as it was in the XFree86 3.x days. Multihead configurations
will still need a minimal configuration file, though.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.51 2009/05/09 19:23:07 mglocker Exp $ */
d308 1
@


1.51
log
@Initial console device driver for USB displays based on the DisplayLink
DL-120 / DL-160 graphic chips, using the wsdisplay(4) layer.  Based on
the reversed engineered specifications of Florian Echtler.  The driver
is disabled in GENERIC for now.

Thanks to claudio@@ for donating me a device and to oga@@ and miod@@ for
giving me hints in the graphic and wsdisplay area.

OK deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.50 2009/03/12 19:10:22 kettenis Exp $ */
d208 1
@


1.50
log
@Define a proper wsdisplay type for raptor(4).

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.49 2008/12/29 22:25:16 miod Exp $ */
d306 1
@


1.49
log
@Give ifb its own display type (be sure to make includes before rebuilding
wsconsctl)
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.48 2008/08/24 20:10:57 miod Exp $ */
d305 1
@


1.48
log
@Define a proper wsdisplay type for legss(4).
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.47 2007/11/27 14:13:39 jsing Exp $ */
d304 1
@


1.47
log
@Add display type for SGI GBE.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.46 2007/09/01 17:06:26 xsa Exp $ */
d303 1
@


1.46
log
@- Add bthidev(4), from NetBSD.
- Make btms(4) and btkbd(4) compile.
- Removed remaining proplib NetBSD'sim

Prodded a while ago by gwk@@. Eyeballed by miod@@.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.45 2007/05/08 20:38:20 robert Exp $ */
d302 1
@


1.45
log
@add swapxy, resx and resy to struct wsmouse_calibcoords,
so we can store these values here; ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.44 2007/04/10 22:37:17 miod Exp $ */
d125 1
d207 1
@


1.44
log
@Add support for a fourth axis on wsmouse devices, e.g. on the Apple Might
Mouse.  Currently limited to USB mice.

Adapted from a diff from Gareth <garf@@loveandnature.co.za> on tech@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.43 2006/11/27 18:04:28 gwk Exp $ */
d228 2
@


1.43
log
@commit vesabios for matthieu@@
ok deraadt, "slap it in" miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.42 2006/08/06 16:00:45 miod Exp $ */
d79 3
d94 2
a95 1
			       ((type) == WSCONS_EVENT_MOUSE_DELTA_Z))
@


1.42
log
@Convert the Sony wsfonts to ISO-Latin1 encoding, and drop the Sony encoding
conversion tables; from NetBSD.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.41 2006/07/24 22:19:54 miod Exp $ */
d438 21
@


1.41
log
@Driver for the VS4000/90 frame buffer, adapted from NetBSD (ragge) and
Blaz Antonic's work, no acceleration yet, untested due to the lack of
hardware, but enough sacrifices were made to the RAMDAC Gods.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.40 2006/04/16 20:45:00 miod Exp $ */
a369 1
#define WSDISPLAY_FONTENC_SONY 4
@


1.40
log
@Preliminary driver for the Colorgraphic VoyagerVGA pcmcia frame buffer;
more like a proof of concept than anything useful, due to the slowness of the
beast, but deraadt@@ insists this gets in the tree.

Written with matthieu@@'s help.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.39 2006/04/14 21:05:44 miod Exp $ */
d293 1
@


1.39
log
@Minimal support for the HP98705 ``Tigershark'' TurboVRX frame buffer
(using an overlay plane only for now). Bootblocks, text console and X11
are supported.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.38 2006/02/14 18:52:17 miod Exp $ */
d292 1
d411 2
a412 1
#define WSDISPLAY_DELSCR_FORCE 1
@


1.38
log
@Define a wsdisplay type for the Sun ZX/Leo frame buffer.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.37 2006/01/09 21:52:12 miod Exp $ */
d291 1
@


1.37
log
@Introduce a wsdisplay type for mac68k frame buffers; we might need to become
less generic in the future, though.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.36 2005/05/15 11:29:15 miod Exp $ */
d290 1
@


1.36
log
@Partial sync to the NetBSD wscons code, bringing a better wsmux behaviour
and bugfixes (the kqueue code, /dev/wsmuxctl and screen border color changes
have not been picked), keeping local changes.

Tested by many on alpha/cats/hp300/i386/macppc/sparc/sparc64/zaurus if not more.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.35 2005/04/22 11:59:11 miod Exp $ */
d259 1
a259 1
#define		WSDISPLAY_TYPE_GPX	19	/* DEC GPX (uVAX/VS2K/VS3100 */
d289 1
@


1.35
log
@Driver for the Apollo Domain keyboard and mouse, for the HP 9000/4xx series.

Claims the console keyboard if a keyboard is detected at boot time,
otherwise HIL is preferred (but due to wsmux both can be used simultaneously).
@
text
@d1 2
a2 2
/* $OpenBSD: wsconsio.h,v 1.34 2005/01/17 04:19:40 drahn Exp $ */
/* $NetBSD: wsconsio.h,v 1.31.2.1 2000/07/07 09:49:17 hannken Exp $ */
d44 2
a45 1
 *	96-255	reserved for future use
d51 1
a416 9
/* Replaced by WSMUX_{ADD,REMOVE}_DEVICE */
struct wsdisplay_kbddata {
	int op;
#define _O_WSDISPLAY_KBD_ADD 0
#define _O_WSDISPLAY_KBD_DEL 1
	int idx;
};
#define _O_WSDISPLAYIO_SETKEYBOARD _IOWR('W', 87, struct wsdisplay_kbddata)

d432 2
d437 6
a442 2
/* Mux ioctls (96 - 127) */
#define WSMUX_INJECTEVENT	_IOW('W', 96, struct wscons_event)
d451 4
a454 2
#define WSMUX_ADD_DEVICE	_IOW('W', 97, struct wsmux_device)
#define WSMUX_REMOVE_DEVICE	_IOW('W', 98, struct wsmux_device)
d461 2
a462 3
#define WSMUX_LIST_DEVICES	_IOWR('W', 99, struct wsmux_device_list)

#define WSDISPLAYIO_GPCIID	_IOR('W', 91, struct pcisel)
@


1.34
log
@Display driver for zaurus, PXALCD requested and ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.33 2005/01/14 22:39:33 miod Exp $ */
d118 1
d199 1
@


1.33
log
@Switch OpenBSD/hp300 to wscons, still using on-board ROM fonts for now.

Main features:
- MI hil drivers, allowing live plug/unplug of devices, and the keyboard
  does not need to be at id 1 anymore.
- SGC bus support on 4xx models. SGC frame buffers are supported too, but
  not as console, though you can use them as a regular glass terminal if
  you run a getty on ttyC0. Currently not compiled-in, awaiting for an sti(4)
  fix to be commited.
- HP-UX compatibility interfaces are removed. grfinfo and hilinfo are removed.

X11 support is currently broken by these changes; X.org X11R6 support will
be available very soon.

Tested on hyperion and 4 different flavours of catseye/topcat/kathmandu; other,
older frame buffers (davinci, gatorbox and renaissance) could not been tested
but should work; please report any regression.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.32 2005/01/14 15:48:01 drahn Exp $ */
d284 1
@


1.32
log
@Add type for zaurus, ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.30 2004/03/01 07:53:01 miod Exp $ */
d263 1
a263 1
#define		WSDISPLAY_TYPE_STI	27	/* HP STI frambuffers */
d279 5
@


1.31
log
@Define wscons device ids for the Luna devices.
@
text
@d117 1
@


1.30
log
@Define a wsdisplay type for rfx; ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.29 2003/06/17 21:21:33 miod Exp $ */
d116 1
d196 1
d277 1
@


1.29
log
@New driver and wsdisplay type for the Weitek Power9000 and Brooktree Bt445
combination, found on the Tadpole SPARCbook 3 only (later model use the
Power9100 and are already supported).

Untested for lack of hardware and volunteers, but carefully crafted; if it
does not work out of the box, this should be a good starting point.

"worth having in the tree" millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.28 2003/05/14 06:39:49 miod Exp $ */
d274 1
@


1.28
log
@The ramdac's hater club is proud to present new yet another SBus frame
bufer driver, this time for the Southland Media Systems (now Quantum 3D)
MGX and MGXPlus cards.

Not complete, but a good start.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.27 2003/03/28 02:59:31 jason Exp $ */
d273 1
@


1.27
log
@add a whole bunch of display types (will be used by the accelerated X
stuff coming soon to a tree near you).
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.26 2003/02/16 02:08:04 miod Exp $ */
d272 1
@


1.26
log
@Provide a wskbd type for gsc keyboards, make gsckbd use it, and take advantage
of it in kbd(8) to work correctly with such a keyboard.
Reminded by maja some time ago.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.25 2003/02/12 01:44:11 miod Exp $ */
d261 11
@


1.25
log
@Define a wsmouse type for HIL mice.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.24 2003/02/11 19:49:47 miod Exp $ */
d115 1
@


1.24
log
@Define an HIL wscons keyboard type.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.23 2003/02/05 19:20:22 mickey Exp $ */
d193 1
@


1.23
log
@wsdisplay type for sti
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.22 2002/07/25 19:01:19 miod Exp $ */
d108 1
a108 1
#define		WSKBD_TYPE_HPC_KBD	7	/* HPC bultin keyboard */
d114 1
@


1.22
log
@Rename the WSDISPLAY_TYPE_SUNFFB display type into a more generic name,
..._SUN24, since this only means 24 bit framebuffers with BGR encoding.
Also add a WSDISPLAY_TYPE_SUNBW for Sun monochrome framebuffers, to be used
by Xwsfb shortly.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.21 2002/06/11 22:56:48 jason Exp $ */
d257 1
@


1.21
log
@Fix, s/pci_sel/pcisel
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.20 2002/06/11 15:33:27 matthieu Exp $ */
d255 2
a256 1
#define		WSDISPLAY_TYPE_SUNFFB	25	/* Sun UPA FFB */
@


1.20
log
@add a new ioctl to wscons (currently implemented  only on sparc64)
`that returns the bus:dev:func PCI id of the device.
ok jason@@.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.19 2002/06/07 20:56:38 drahn Exp $ */
d431 1
a431 1
#define WSDISPLAYIO_GPCIID	_IOR('W', 91, struct pci_sel)
@


1.19
log
@Add wsconsctl recognition support for adb keyboard.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.18 2002/05/29 20:43:44 maja Exp $ */
d50 1
a383 1

d430 2
@


1.18
log
@Add a new wskbd type for Sun type 5 keyboards (WSKBD_TYPE_SUN5).
This is needed since eg Swedish type 4 and 5 keyboard has keycodes
with different keycodes. eg AltGr and Compose are switched in type 5
compared with type 4.

This change will need a new Xserver to allow sun type 5 keyboards.
-moj  ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.17 2002/05/22 21:29:10 jason Exp $ */
d190 1
@


1.17
log
@add WSDISPLAY_TYPE_SUNFFB
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.16 2002/03/31 17:34:15 jason Exp $ */
d111 2
a112 1
#define		WSKBD_TYPE_SUN		11	/* Sun Type3/4/5 */
@


1.16
log
@add a new mode to wsdisplay, WSDISPLAYIO_MODE_DUMBFB.  This mode is
functionally equivalent what used to be WSDISPLAYIO_MODE_MAPPED, which now
means a "native" mapping.
vgafb_mmap() returns pci relative mappings in WSDISPLAYIO_MODE_MAPPED and
linear framebuffer mappings in WSDISPLAYIO_MODE_DUMBFB
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.15 2002/03/27 18:54:09 jbm Exp $ */
d252 1
@


1.15
log
@Add X-Window support to wsmoused(8). This allows running wsmoused(8) and
X-Window at the same time, removing the need to kill wsmoused(8) before
starting X-Window.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.14 2002/01/16 14:55:38 jason Exp $ */
d317 1
@


1.14
log
@Add a sun keyboard type
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.13 2001/09/16 00:42:44 millert Exp $ */
d76 4
d82 3
d92 3
a94 1
			     (type == WSCONS_EVENT_WSMOUSED_OFF))
@


1.13
log
@Add some missing lengths checks when passing data from userland to
kernel.  From based on NetBSD patches.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.12 2001/08/29 20:20:26 mickey Exp $ */
d102 1
@


1.13.4.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.14 2002/01/16 14:55:38 jason Exp $ */
a101 1
#define		WSKBD_TYPE_SUN		11	/* Sun Type3/4/5 */
@


1.13.4.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.13.4.1 2002/01/31 22:55:39 niklas Exp $ */
a75 4
/* 
 * Following events are not real wscons_event but are used as parameters of the
 * WSDISPLAYIO_WSMOUSED ioctl 
 */
a77 3
#define WSCONS_EVENT_WSMOUSED_SLEEP	14	/* wsmoused(8) sleeping */
#define WSCONS_EVENT_WSMOUSED_CLOSE	15	/* notify wsmoused(8) to close 
						   mouse device */
d85 1
a85 3
			     (type == WSCONS_EVENT_WSMOUSED_OFF)|| \
			     (type == WSCONS_EVENT_WSMOUSED_SLEEP))

d102 1
a102 2
#define		WSKBD_TYPE_SUN		11	/* Sun Type3/4 */
#define		WSKBD_TYPE_SUN5		12	/* Sun Type5 */
a179 1
#define		WSMOUSE_TYPE_ADB	9	/* ADB */
a242 1
#define		WSDISPLAY_TYPE_SUNFFB	25	/* Sun UPA FFB */
a307 1
#define		WSDISPLAYIO_MODE_DUMBFB	2	/* mapped (graphics) fb mode */
@


1.13.4.3
log
@sync to -current
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.13.4.2 2002/06/11 03:42:31 art Exp $ */
a49 1
#include <sys/pciio.h>
d254 1
a254 2
#define		WSDISPLAY_TYPE_SUN24	25	/* Sun 24 bit framebuffers */
#define		WSDISPLAY_TYPE_SUNBW	26	/* Sun black and white fb */
d383 1
a429 2

#define WSDISPLAYIO_GPCIID	_IOR('W', 91, struct pcisel)
@


1.13.4.4
log
@sync
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d108 1
a108 1
#define		WSKBD_TYPE_HPC_KBD	7	/* HPC builtin keyboard */
a113 2
#define		WSKBD_TYPE_HIL		13	/* HP HIL */
#define		WSKBD_TYPE_GSC		14	/* HP PS/2 */
a191 1
#define		WSMOUSE_TYPE_HIL	10	/* HP HIL */
a256 13
#define		WSDISPLAY_TYPE_STI	27	/* HP STI frambuffers */
#define		WSDISPLAY_TYPE_SUNCG3	28	/* Sun cgthree */
#define		WSDISPLAY_TYPE_SUNCG6	29	/* Sun cgsix */
#define		WSDISPLAY_TYPE_SUNFFB	30	/* Sun creator FFB */
#define		WSDISPLAY_TYPE_SUNCG14	31	/* Sun cgfourteen */
#define		WSDISPLAY_TYPE_SUNCG2	32	/* Sun cgtwo */
#define		WSDISPLAY_TYPE_SUNCG4	33	/* Sun cgfour */
#define		WSDISPLAY_TYPE_SUNCG8	34	/* Sun cgeight */
#define		WSDISPLAY_TYPE_SUNTCX	35	/* Sun TCX */
#define		WSDISPLAY_TYPE_AGTEN	36	/* AG10E */
#define		WSDISPLAY_TYPE_XVIDEO	37	/* Xvideo */
#define		WSDISPLAY_TYPE_SUNCG12	38	/* Sun cgtwelve */
#define		WSDISPLAY_TYPE_MGX	39	/* SMS MGX */
@


1.12
log
@make set/get screen work now
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.11 2001/06/29 20:16:22 mickey Exp $ */
d151 1
d318 2
a319 1
	int fontwidth, fontheight, stride;
@


1.11
log
@implement get/set screen ioctls to fetch configured screen list
and switch focus out of comand line utility (to come soon).
also, fix duplicated ioctl numbers, so rebuild the ws* utils.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.10 2001/05/08 22:28:43 mickey Exp $ */
d361 2
a362 2
#define WSDISPLAYIO_GETSCREEN	_IOR('W', 85, struct wsdisplay_addscreendata)
#define	WSDISPLAYIO_SETSCREEN	_IOR('W', 86, u_int)
@


1.10
log
@inplement screen burner in screenblank(1) style (no program though).
disabled by default, also supports vsync blanking, disabled by default.
aaron@@ looked at it a while back and i fixed problems he had indicated.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.9 2001/04/14 04:44:01 aaron Exp $ */
d352 1
a352 1
#define WSDISPLAYIO_ADDSCREEN _IOW('W', 82, struct wsdisplay_addscreendata)
d359 4
a362 1
#define WSDISPLAYIO_DELSCREEN _IOW('W', 83, struct wsdisplay_delscreendata)
d375 1
a375 1
#define _O_WSDISPLAYIO_SETKEYBOARD _IOWR('W', 81, struct wsdisplay_kbddata)
d378 1
a378 1
#define WSDISPLAYIO_WSMOUSED	_IOW('W', 82, struct wscons_event)
d389 2
a390 2
#define	WSDISPLAYIO_GETPARAM	_IOWR('W', 82, struct wsdisplay_param)
#define	WSDISPLAYIO_SETPARAM	_IOWR('W', 83, struct wsdisplay_param)
@


1.10.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@a306 5
/*
 * XXX WARNING
 * XXX The following definitions are very preliminary and are likely
 * XXX to be changed without care about backwards compatibility!
 */
d330 17
@


1.10.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.10.2.1 2001/05/14 22:26:30 niklas Exp $ */
d307 5
a334 17
struct wsdisplay_burner {
	u_int	off;
	u_int	on;
	u_int	flags;
#define	WSDISPLAY_BURN_VBLANK	0x0001
#define	WSDISPLAY_BURN_KBD	0x0002
#define	WSDISPLAY_BURN_MOUSE	0x0004
#define	WSDISPLAY_BURN_OUTPUT	0x0008
};
#define	WSDISPLAYIO_SBURNER	_IOW('W', 81, struct wsdisplay_burner)
#define	WSDISPLAYIO_GBURNER	_IOR('W', 82, struct wsdisplay_burner) 

/*
 * XXX WARNING
 * XXX The following definitions are very preliminary and are likely
 * XXX to be changed without care about backwards compatibility!
 */
d340 1
a340 1
#define WSDISPLAYIO_ADDSCREEN	_IOW('W', 83, struct wsdisplay_addscreendata)
d347 1
a347 4
#define WSDISPLAYIO_DELSCREEN	_IOW('W', 84, struct wsdisplay_delscreendata)

#define WSDISPLAYIO_GETSCREEN	_IOR('W', 85, struct wsdisplay_addscreendata)
#define	WSDISPLAYIO_SETSCREEN	_IOR('W', 86, u_int)
d360 1
a360 1
#define _O_WSDISPLAYIO_SETKEYBOARD _IOWR('W', 87, struct wsdisplay_kbddata)
d363 1
a363 1
#define WSDISPLAYIO_WSMOUSED	_IOW('W', 88, struct wscons_event)
d374 2
a375 2
#define	WSDISPLAYIO_GETPARAM	_IOWR('W', 89, struct wsdisplay_param)
#define	WSDISPLAYIO_SETPARAM	_IOWR('W', 90, struct wsdisplay_param)
@


1.10.2.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.10.2.2 2001/07/04 10:44:08 niklas Exp $ */
a150 1
#define WSKBDIO_MAXMAPLEN	65536
d317 1
a317 2
	u_int fontwidth, fontheight, stride;
#define WSDISPLAY_MAXFONTSZ	(512*1024)
d361 2
a362 2
#define WSDISPLAYIO_GETSCREEN	_IOWR('W', 85, struct wsdisplay_addscreendata)
#define	WSDISPLAYIO_SETSCREEN	_IOW('W', 86, u_int)
@


1.10.2.4
log
@Merge in trunk
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a101 1
#define		WSKBD_TYPE_SUN		11	/* Sun Type3/4/5 */
@


1.10.2.5
log
@Sync the SMP branch with 3.3
@
text
@a49 1
#include <sys/pciio.h>
a75 4
/* 
 * Following events are not real wscons_event but are used as parameters of the
 * WSDISPLAYIO_WSMOUSED ioctl 
 */
a77 3
#define WSCONS_EVENT_WSMOUSED_SLEEP	14	/* wsmoused(8) sleeping */
#define WSCONS_EVENT_WSMOUSED_CLOSE	15	/* notify wsmoused(8) to close 
						   mouse device */
d85 1
a85 3
			     (type == WSCONS_EVENT_WSMOUSED_OFF)|| \
			     (type == WSCONS_EVENT_WSMOUSED_SLEEP))

d98 1
a98 1
#define		WSKBD_TYPE_HPC_KBD	7	/* HPC builtin keyboard */
d102 1
a102 4
#define		WSKBD_TYPE_SUN		11	/* Sun Type3/4 */
#define		WSKBD_TYPE_SUN5		12	/* Sun Type5 */
#define		WSKBD_TYPE_HIL		13	/* HP HIL */
#define		WSKBD_TYPE_GSC		14	/* HP PS/2 */
a179 2
#define		WSMOUSE_TYPE_ADB	9	/* ADB */
#define		WSMOUSE_TYPE_HIL	10	/* HP HIL */
a242 3
#define		WSDISPLAY_TYPE_SUN24	25	/* Sun 24 bit framebuffers */
#define		WSDISPLAY_TYPE_SUNBW	26	/* Sun black and white fb */
#define		WSDISPLAY_TYPE_STI	27	/* HP STI frambuffers */
a307 1
#define		WSDISPLAYIO_MODE_DUMBFB	2	/* mapped (graphics) fb mode */
d370 1
a416 2

#define WSDISPLAYIO_GPCIID	_IOR('W', 91, struct pcisel)
@


1.10.2.6
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.10.2.5 2003/03/28 00:38:33 niklas Exp $ */
a260 11
#define		WSDISPLAY_TYPE_SUNCG3	28	/* Sun cgthree */
#define		WSDISPLAY_TYPE_SUNCG6	29	/* Sun cgsix */
#define		WSDISPLAY_TYPE_SUNFFB	30	/* Sun creator FFB */
#define		WSDISPLAY_TYPE_SUNCG14	31	/* Sun cgfourteen */
#define		WSDISPLAY_TYPE_SUNCG2	32	/* Sun cgtwo */
#define		WSDISPLAY_TYPE_SUNCG4	33	/* Sun cgfour */
#define		WSDISPLAY_TYPE_SUNCG8	34	/* Sun cgeight */
#define		WSDISPLAY_TYPE_SUNTCX	35	/* Sun TCX */
#define		WSDISPLAY_TYPE_AGTEN	36	/* AG10E */
#define		WSDISPLAY_TYPE_XVIDEO	37	/* Xvideo */
#define		WSDISPLAY_TYPE_SUNCG12	38	/* Sun cgtwelve */
@


1.10.2.7
log
@merge the trunk so we will get the genfs and locking fixes
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a271 1
#define		WSDISPLAY_TYPE_MGX	39	/* SMS MGX */
@


1.10.2.8
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a272 1
#define		WSDISPLAY_TYPE_SB_P9000	40	/* Tadpole SPARCbook P9000 */
@


1.10.2.9
log
@Merge with the trunk
@
text
@a115 1
#define		WSKBD_TYPE_LUNA		15	/* OMRON Luna */
a194 1
#define		WSMOUSE_TYPE_LUNA	11	/* OMRON Luna */
a273 2
#define		WSDISPLAY_TYPE_RFLEX	41	/* RasterFlex series */
#define		WSDISPLAY_TYPE_LUNA	42	/* OMRON Luna */
@


1.9
log
@Kernel support for console mouse functionality which will be controlled by
the wsmoused daemon (replacement for moused which was used with PCVT). Adds
a "getchar" method to the display drivers which returns the value of the
character currently under the cursor (e.g., so it may be inversed). From jbm@@.

Still needs a bit of cleanup and improvement, especially X cohabitation
features. The pointer moves to fast as well. These sorts of issues will be
corrected in-tree.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.8 2001/03/14 02:49:22 mickey Exp $ */
a306 5
/*
 * XXX WARNING
 * XXX The following definitions are very preliminary and are likely
 * XXX to be changed without care about backwards compatibility!
 */
d330 17
@


1.9.2.1
log
@MFS (from millert):
Add some missing lengths checks when passing data from userland to
kernel.  From based on NetBSD patches.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.9 2001/04/14 04:44:01 aaron Exp $ */
a150 1
#define WSKBDIO_MAXMAPLEN	65536
d322 1
a322 2
	u_int fontwidth, fontheight, stride;
#define WSDISPLAY_MAXFONTSZ	(512*1024)
@


1.8
log
@allow listing and soon deleting fonts; aaron@@ ok
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.7 2001/03/03 08:53:46 maja Exp $ */
d76 2
d79 7
a85 1

d361 3
@


1.7
log
@complete wscons support for abd keyboard. -moj ok @@deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.6 2001/02/28 19:12:40 drahn Exp $ */
d51 3
d305 2
a306 1
	char *name;
d319 1
d322 4
a325 1
#define WSDISPLAYIO_LDFONT	_IOW('W', 77, struct wsdisplay_font)
d329 2
a330 2
	char *screentype;
	char *emul;
d332 1
a332 1
#define WSDISPLAYIO_ADDSCREEN _IOW('W', 78, struct wsdisplay_addscreendata)
d339 1
a339 6
#define WSDISPLAYIO_DELSCREEN _IOW('W', 79, struct wsdisplay_delscreendata)

struct wsdisplay_usefontdata {
	char *name;
};
#define WSDISPLAYIO_USEFONT	_IOW('W', 80, struct wsdisplay_usefontdata)
@


1.6
log
@Add ability to get display width in bytes for display memory, this
may be the same as visual width or larger.
This is seen on iMacDV systems running at 640x480 or 800x600 with a linebytes
of 1024.
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.5 2001/02/10 19:42:06 mickey Exp $ */
d90 1
@


1.5
log
@sync w/ netbsd; aaron@@ ok
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.4 2001/02/05 23:39:01 matthieu Exp $ */
d336 4
@


1.4
log
@WSMOUSEIO_SRES, WSMOUSEIO_SSCALE and WSMOUSEIO_SRATE are _IOW(), not _IOR()
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.3 2000/08/01 13:51:17 mickey Exp $ */
d228 1
d307 2
d345 12
@


1.3
log
@update wscons, nothing serious, mostly api fixes for us; from netbsd through aaron@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.2 2000/06/30 05:08:06 mickey Exp $ */
d168 1
a168 1
#define	WSMOUSEIO_SRES		_IOR('W', 33, u_int)
d174 1
a174 1
#define	WSMOUSEIO_SSCALE	_IOR('W', 34, u_int[2])
d177 1
a177 1
#define	WSMOUSEIO_SRATE		_IOR('W', 35, u_int)
@


1.3.2.1
log
@MFC:
Add some missing lengths checks when passing data from userland to the
kernel. From NetBSD via millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsconsio.h,v 1.13 2001/09/16 00:42:44 millert Exp $ */
a138 1
#define WSKBDIO_MAXMAPLEN	65536
d306 1
a306 2
	u_int fontwidth, fontheight, stride;
#define	WSDISPLAY_MAXFONTSZ	(512 * 1024)
@


1.2
log
@some more display types; from nbsd
@
text
@d1 2
a2 2
/* $OpenBSD$ */
/* $NetBSD: wsconsio.h,v 1.30 2000/06/02 23:45:13 matt Exp $ */
d143 2
a144 2
#define WSKBDIO_GETENCODING	_IOR('W', 15, int)
#define WSKBDIO_SETENCODING	_IOW('W', 16, int)
@


1.1
log
@import newer wscons source from netbsd.
art@@ said it will make his life easier in alpha
rhands@@ said it is not used in powerpc for now
bjc@@ said that it would make vax port easier
mickey@@ said other platforms can use it, and it's faster
@
text
@d2 1
a2 1
/* $NetBSD: wsconsio.h,v 1.28 2000/03/13 01:46:44 sato Exp $ */
d222 6
@

