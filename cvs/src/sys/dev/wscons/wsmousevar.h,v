head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.4
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.20
	OPENBSD_5_0:1.5.0.18
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.16
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.14
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.10
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.12
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.8
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.6
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.4
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.4.0.22
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.20
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.18
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.16
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.14
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.12
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.10
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.2.0.10
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	SMP:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.15
date	2017.06.18.13.21.48;	author bru;	state Exp;
branches;
next	1.14;
commitid	0ZF2p7gCAfW5VeUN;

1.14
date	2017.03.06.09.53.01;	author mpi;	state Exp;
branches;
next	1.13;
commitid	fckaiFbVNF5ECH1f;

1.13
date	2017.02.27.15.59.56;	author bru;	state Exp;
branches;
next	1.12;
commitid	8SRGrIuLd7axW5SE;

1.12
date	2016.10.23.22.59.19;	author bru;	state Exp;
branches;
next	1.11;
commitid	m7Qv2drIZWfJ1bkB;

1.11
date	2016.06.06.22.32.47;	author bru;	state Exp;
branches;
next	1.10;
commitid	d2zsEZc9nwE8cAmi;

1.10
date	2016.05.30.12.38.34;	author mpi;	state Exp;
branches;
next	1.9;
commitid	hfmBpUnajqcg3Nq4;

1.9
date	2016.03.30.23.34.12;	author bru;	state Exp;
branches;
next	1.8;
commitid	216Sb0C4sEs8CDdv;

1.8
date	2014.12.21.18.16.07;	author shadchin;	state Exp;
branches;
next	1.7;
commitid	EtoAIPtYPgf6ql1v;

1.7
date	2013.10.30.18.00.57;	author shadchin;	state Exp;
branches;
next	1.6;

1.6
date	2012.07.22.18.28.36;	author shadchin;	state Exp;
branches;
next	1.5;

1.5
date	2007.04.10.22.37.17;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.27.18.54.09;	author jbm;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.27.03;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.01.13.51.18;	author mickey;	state Exp;
branches
	1.2.6.1
	1.2.10.1;
next	1.1;

1.1
date	2000.05.16.23.49.12;	author mickey;	state Exp;
branches;
next	;

1.2.6.1
date	2001.05.14.22.26.33;	author niklas;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2002.03.28.15.09.10;	author niklas;	state Exp;
branches;
next	1.2.6.3;

1.2.6.3
date	2003.03.28.00.38.33;	author niklas;	state Exp;
branches;
next	;

1.2.10.1
date	2002.06.11.03.42.32;	author art;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove remnants of old versions.
@
text
@/* $OpenBSD: wsmousevar.h,v 1.14 2017/03/06 09:53:01 mpi Exp $ */
/* $NetBSD: wsmousevar.h,v 1.4 2000/01/08 02:57:24 takemura Exp $ */

/*
 * Copyright (c) 1996, 1997 Christopher G. Demetriou.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou
 *	for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 2015, 2016 Ulf Brosziewski
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _WSMOUSEVAR_H_
#define _WSMOUSEVAR_H_

#ifdef _KERNEL

/*
 * WSMOUSE interfaces.
 */

/*
 * Mouse access functions (must be provided by all mice).
 *
 * There is a "void *" cookie provided by the mouse driver associated
 * with these functions, which is passed to them when they are invoked.
 */
struct wsmouse_accessops {
	int	(*enable)(void *);
	int	(*ioctl)(void *v, u_long cmd, caddr_t data, int flag,
		    struct proc *p);
	void	(*disable)(void *);
};

/*
 * Attachment information provided by wsmousedev devices when attaching
 * wsmouse units.
 */
struct wsmousedev_attach_args {
	const struct wsmouse_accessops *accessops;	/* access ops */
	void	*accesscookie;				/* access cookie */
};

#define	wsmousedevcf_mux	cf_loc[WSMOUSEDEVCF_MUX]

/*
 * Autoconfiguration helper functions.
 */
int	wsmousedevprint(void *, const char *);


/* Process standard mouse input. */
#define WSMOUSE_INPUT(sc_wsmousedev, btns, dx, dy, dz, dw)		\
	do {								\
		wsmouse_buttons((sc_wsmousedev), (btns));		\
		wsmouse_motion((sc_wsmousedev), (dx), (dy), (dz), (dw));\
		wsmouse_input_sync(sc_wsmousedev);			\
	} while (0)


/* Process standard touchpad input. */
#define WSMOUSE_TOUCH(sc_wsmousedev, btns, x, y, pressure, contacts)	\
	do {								\
		wsmouse_buttons((sc_wsmousedev), (btns));		\
		wsmouse_position((sc_wsmousedev), (x), (y));		\
		wsmouse_touch((sc_wsmousedev), (pressure), (contacts));	\
		wsmouse_input_sync(sc_wsmousedev);			\
	} while (0)


/*
 * Drivers for touchpads that don't report pressure values can pass
 * WSMOUSE_DEFAULT_PRESSURE to wsmouse_touch or wsmouse_mtstate.
 *
 * A pressure value of 0 signals that a touch has been released (coordinates
 * will be ignored). Based on its pressure argument, wsmouse_touch will
 * normalize the contact count (drivers for touch devices that don't
 * recognize multiple contacts can always pass 0 as contact count to
 * wsmouse_touch).
 */
/* Use a synaptics-compatible value. */
#define WSMOUSE_DEFAULT_PRESSURE	45


struct device;

/*
 * Type codes for wsmouse_set. REL_X/Y, MT_REL_X/Y, and TOUCH_WIDTH
 * cannot be reported by other functions. Please note that REL_X/Y
 * values are deltas to be applied to the absolute coordinates and
 * don't represent "pure" relative motion.
 */
enum wsmouseval {
	WSMOUSE_REL_X,
	WSMOUSE_ABS_X,
	WSMOUSE_REL_Y,
	WSMOUSE_ABS_Y,
	WSMOUSE_PRESSURE,
	WSMOUSE_CONTACTS,
	WSMOUSE_TOUCH_WIDTH,
	WSMOUSE_MT_REL_X,
	WSMOUSE_MT_ABS_X,
	WSMOUSE_MT_REL_Y,
	WSMOUSE_MT_ABS_Y,
	WSMOUSE_MT_PRESSURE
};

#define WSMOUSE_IS_MT_CODE(code) \
    ((code) >= WSMOUSE_MT_REL_X && (code) <= WSMOUSE_MT_PRESSURE)

struct mtpoint {
	int x;
	int y;
	int pressure;
	int slot;		/* An output field, set by wsmouse_mtframe. */
};

/* Report button state. */
void wsmouse_buttons(struct device *, u_int);

/* Report motion deltas (dx, dy, dz, dw). */
void wsmouse_motion(struct device *, int, int, int, int);

/* Report absolute coordinates (x, y). */
void wsmouse_position(struct device *, int, int);

/* Report (single-)touch input (pressure, contacts). */
void wsmouse_touch(struct device *, int, int);

/* Report slot-based multitouch input (slot, x, y, pressure). */
void wsmouse_mtstate(struct device *, int, int, int, int);

/* Report multitouch input (mtpoints, size). */
void wsmouse_mtframe(struct device *, struct mtpoint *, int);

/* Report a single value (type, value, aux). */
void wsmouse_set(struct device *, enum wsmouseval, int, int);

/* Assign or look up a slot number for a tracking ID (id). */
int wsmouse_id_to_slot(struct device *, int);


/* Synchronize (generate wscons events) */
void wsmouse_input_sync(struct device *);


/* Initialize MT structures (num_slots, tracking). */
int wsmouse_mt_init(struct device *, int, int);

#define WSMOUSE_MT_SLOTS_MAX 10
#define WSMOUSE_MT_INIT_TRACKING 1

/* Switch between compatibility mode and native mode. */
int wsmouse_set_mode(struct device *, int);

/* Read/Set parameter values. */
int wsmouse_get_params(struct device *, struct wsmouse_param *, u_int);
int wsmouse_set_params(struct device *, const struct wsmouse_param *, u_int);


enum wsmousehw_type {
	WSMOUSEHW_RAW,
	WSMOUSEHW_MOUSE,
	WSMOUSEHW_TOUCHPAD,
	WSMOUSEHW_CLICKPAD,
	WSMOUSEHW_TPANEL,
};

/*
 * wsmousehw.flags
 */
/* Invert Y-coordinates */
#define WSMOUSEHW_LR_DOWN 	(1 << 0)
/* Allocate the buffers for wsmouse_mtframe(). */
#define WSMOUSEHW_MT_TRACKING	(1 << 1)


/*
 * The more or less minimal hardware description for the default
 * configuration.
 *
 * Drivers that report coordinates with a downward orientation
 * must set the flag WSMOUSEHW_LR_DOWN. Drivers for MT hardware
 * must provide the number of slots. If they use wsmouse_mtframe(),
 * WSMOUSEHW_MT_TRACKING must be set.
 *
 * The resolution values are optional.
 */
struct wsmousehw {
	int type;		/* WSMOUSE_TYPE_*, cf. wsconsio.h */
	enum wsmousehw_type hw_type;
	int x_min;
	int x_max;
	int y_min;
	int y_max;
	int h_res;
	int v_res;

	int flags;
	int mt_slots;

	int contacts_max;	/* inclusive (not needed for MT touchpads) */
};

struct wsmousehw *wsmouse_get_hw(struct device*);

/* Configure the input context. */
int wsmouse_configure(struct device *, struct wsmouse_param *, u_int);

#endif /* _KERNEL */

#endif /* _WSMOUSEVAR_H_ */
@


1.14
log
@Guard headers to make sure userland do not look at them.

ok bru@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsmousevar.h,v 1.13 2017/02/27 15:59:56 bru Exp $ */
d118 2
a119 1
#define WSMOUSE_DEFAULT_PRESSURE	-1
@


1.13
log
@Handle touchpad input in wsmouse.

The wstpad file contains the core of a touchpad-input driver that
is coupled with wsmouse. It is active in compat-mode if wsmouse has
been configured for it.

ok @@matthieu @@stsp @@mpi
@
text
@d1 1
a1 1
/* $OpenBSD: wsmousevar.h,v 1.12 2016/10/23 22:59:19 bru Exp $ */
d50 5
d245 4
@


1.12
log
@Improved parameter handling in wsmouse and new ioctls for reading and
setting parameter values.

ok matthieu@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsmousevar.h,v 1.11 2016/06/06 22:32:47 bru Exp $ */
d190 50
@


1.11
log
@Remove wsmouse_input.

ok mpi@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsmousevar.h,v 1.10 2016/05/30 12:38:34 mpi Exp $ */
a116 1
struct mtpoint;
d142 6
a147 2


d181 2
a182 2
/* Set a filter/transformation value (param type, value). */
void wsmouse_set_param(struct device *, size_t, int);
d187 3
a189 47

struct mtpoint {
	int x;
	int y;
	int pressure;
	int slot;		/* An output field, set by wsmouse_mtframe. */
};


struct wsmouseparams {
	int x_inv;
	int y_inv;

	int dx_mul;		/* delta scaling */
	int dx_div;
	int dy_mul;
	int dy_div;

	int swapxy;

	int pressure_lo;
	int pressure_hi;

	int dx_max;		/* (compat mode) */
	int dy_max;

	int tracking_maxdist;
};

#define WSMPARAM_X_INV		offsetof(struct wsmouseparams, x_inv)
#define WSMPARAM_Y_INV		offsetof(struct wsmouseparams, y_inv)
#define WSMPARAM_DX_MUL		offsetof(struct wsmouseparams, dx_mul)
#define WSMPARAM_DX_DIV		offsetof(struct wsmouseparams, dx_div)
#define WSMPARAM_DY_MUL		offsetof(struct wsmouseparams, dy_mul)
#define WSMPARAM_DY_DIV		offsetof(struct wsmouseparams, dy_div)
#define WSMPARAM_SWAPXY		offsetof(struct wsmouseparams, swapxy)
#define WSMPARAM_PRESSURE_LO	offsetof(struct wsmouseparams, pressure_lo)
#define WSMPARAM_PRESSURE_HI	offsetof(struct wsmouseparams, pressure_hi)
#define WSMPARAM_DX_MAX		offsetof(struct wsmouseparams, dx_max)
#define WSMPARAM_DY_MAX		offsetof(struct wsmouseparams, dy_max)

#define WSMPARAM_LASTFIELD	WSMPARAM_DY_MAX

#define IS_WSMFLTR_PARAM(param) \
    ((param) >= WSMPARAM_DX_MUL && (param) <= WSMPARAM_DY_DIV)

#define WSMOUSE_MT_SLOTS_MAX	10
@


1.10
log
@Do not forward declare an enum, makes gcc3 happy.

From miod@@, ok bru@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsmousevar.h,v 1.9 2016/03/30 23:34:12 bru Exp $ */
a81 12

/*
 * Callbacks from the mouse driver to the wsmouse interface driver.
 */
#define WSMOUSE_INPUT_DELTA		0
#define WSMOUSE_INPUT_ABSOLUTE_X	(1<<0)
#define WSMOUSE_INPUT_ABSOLUTE_Y	(1<<1)
#define WSMOUSE_INPUT_ABSOLUTE_Z	(1<<2)
#define WSMOUSE_INPUT_ABSOLUTE_W	(1<<3)

void	wsmouse_input(struct device *kbddev, u_int btns,
			   int x, int y, int z, int w, u_int flags);
@


1.9
log
@Add support for multitouch input to wsmouse.

This change adds new input-processing functions to wsmouse and
adapts the touchpad drivers.

ok mpi@@, shadchin@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsmousevar.h,v 1.8 2014/12/21 18:16:07 shadchin Exp $ */
a128 1
enum wsmouseval;
d131 26
a194 25


/*
 * Type codes for wsmouse_set. REL_X/Y, MT_REL_X/Y, and TOUCH_WIDTH
 * cannot be reported by other functions. Please note that REL_X/Y
 * values are deltas to be applied to the absolute coordinates and
 * don't represent "pure" relative motion.
 */
enum wsmouseval {
	WSMOUSE_REL_X,
	WSMOUSE_ABS_X,
	WSMOUSE_REL_Y,
	WSMOUSE_ABS_Y,
	WSMOUSE_PRESSURE,
	WSMOUSE_CONTACTS,
	WSMOUSE_TOUCH_WIDTH,
	WSMOUSE_MT_REL_X,
	WSMOUSE_MT_ABS_X,
	WSMOUSE_MT_REL_Y,
	WSMOUSE_MT_ABS_Y,
	WSMOUSE_MT_PRESSURE
};

#define WSMOUSE_IS_MT_CODE(code) \
    ((code) >= WSMOUSE_MT_REL_X && (code) <= WSMOUSE_MT_PRESSURE)
@


1.8
log
@WSMOUSE_INPUT_WSMOUSED_CLOSE not used anymore.

ok mpi@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsmousevar.h,v 1.7 2013/10/30 18:00:57 shadchin Exp $ */
d35 16
d94 149
@


1.7
log
@Fix jagged diagonal lines (kernel part)

Send WSCONS_EVENT_SYNC every time you call wsmouse_input(). Used to synchronize
and separate events into packets of input data changes occurring at the same
moment in time. For example, motion of a mouse may set the DELTA_X and DELTA_Y
values for one motion, then emit a SYNC.

ok matthieu@@. tested edd@@, Henri Kemppainen and Alf Schlichting.
@
text
@d1 1
a1 1
/* $OpenBSD: wsmousevar.h,v 1.6 2012/07/22 18:28:36 shadchin Exp $ */
d74 1
a74 3
#define WSMOUSE_INPUT_WSMOUSED_CLOSE	(1<<3) /* notify wsmoused(8) to close
						  mouse device */
#define WSMOUSE_INPUT_ABSOLUTE_W	(1<<4)
@


1.6
log
@Fix for ClickPad. On issue pointed gilles@@ and matthieu@@

ok gilles@@, matthieu@@, mpi@@, miod@@, deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsmousevar.h,v 1.5 2007/04/10 22:37:17 miod Exp $ */
a76 1
#define WSMOUSE_INPUT_SYNC		(1<<5)
@


1.5
log
@Add support for a fourth axis on wsmouse devices, e.g. on the Apple Might
Mouse.  Currently limited to USB mice.

Adapted from a diff from Gareth <garf@@loveandnature.co.za> on tech@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsmousevar.h,v 1.4 2002/03/27 18:54:09 jbm Exp $ */
a73 1
#define WSMOUSE_INPUT_ABSOLUTE_W	(1<<4)
d76 2
@


1.4
log
@Add X-Window support to wsmoused(8). This allows running wsmoused(8) and
X-Window at the same time, removing the need to kill wsmoused(8) before
starting X-Window.
@
text
@d1 1
a1 1
/* $OpenBSD: wsmousevar.h,v 1.3 2002/03/14 01:27:03 millert Exp $ */
d74 1
d79 1
a79 1
			   int x, int y, int z, u_int flags);
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/* $OpenBSD: wsmousevar.h,v 1.2 2000/08/01 13:51:18 mickey Exp $ */
d74 3
@


1.2
log
@update wscons, nothing serious, mostly api fixes for us; from netbsd through aaron@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsmousevar.h,v 1.1 2000/05/16 23:49:12 mickey Exp $ */
d45 4
a48 4
	int	(*enable) __P((void *));
	int	(*ioctl) __P((void *v, u_long cmd, caddr_t data, int flag,
		    struct proc *p));
	void	(*disable) __P((void *));
d65 1
a65 1
int	wsmousedevprint __P((void *, const char *));
d74 2
a75 2
void	wsmouse_input __P((struct device *kbddev, u_int btns,
			   int x, int y, int z, u_int flags));
@


1.2.10.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: wsmousevar.h,v 1.2 2000/08/01 13:51:18 mickey Exp $ */
d45 4
a48 4
	int	(*enable)(void *);
	int	(*ioctl)(void *v, u_long cmd, caddr_t data, int flag,
		    struct proc *p);
	void	(*disable)(void *);
d65 1
a65 1
int	wsmousedevprint(void *, const char *);
d74 2
a75 5
#define WSMOUSE_INPUT_WSMOUSED_CLOSE	(1<<3) /* notify wsmoused(8) to close
						  mouse device */

void	wsmouse_input(struct device *kbddev, u_int btns,
			   int x, int y, int z, u_int flags);
@


1.2.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/* $OpenBSD: wsmousevar.h,v 1.2 2000/08/01 13:51:18 mickey Exp $ */
@


1.2.6.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d45 4
a48 4
	int	(*enable)(void *);
	int	(*ioctl)(void *v, u_long cmd, caddr_t data, int flag,
		    struct proc *p);
	void	(*disable)(void *);
d65 1
a65 1
int	wsmousedevprint(void *, const char *);
d74 2
a75 2
void	wsmouse_input(struct device *kbddev, u_int btns,
			   int x, int y, int z, u_int flags);
@


1.2.6.3
log
@Sync the SMP branch with 3.3
@
text
@a73 3
#define WSMOUSE_INPUT_WSMOUSED_CLOSE	(1<<3) /* notify wsmoused(8) to close
						  mouse device */

@


1.1
log
@import newer wscons source from netbsd.
art@@ said it will make his life easier in alpha
rhands@@ said it is not used in powerpc for now
bjc@@ said that it would make vax port easier
mickey@@ said other platforms can use it, and it's faster
@
text
@d1 2
a2 2
/* $OpenBSD$ */
/* $NetBSD: wsmousevar.h,v 1.3 1999/07/29 18:20:03 augustss Exp $ */
a59 1
#define	WSMOUSEDEVCF_MUX	0
d70 4
a73 4
#define	WSMOUSE_INPUT_DELTA		0x00
#define	WSMOUSE_INPUT_ABSOLUTE_X	0x01
#define	WSMOUSE_INPUT_ABSOLUTE_Y	0x02
#define	WSMOUSE_INPUT_ABSOLUTE_Z	0x04
@

