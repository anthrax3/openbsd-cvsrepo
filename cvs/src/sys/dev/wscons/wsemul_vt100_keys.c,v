head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.10
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.6
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.7.0.8
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.14
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.10
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.2.0.14
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.12
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.10
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.1.0.20
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.18
	OPENBSD_3_4_BASE:1.1
	UBC_SYNC_A:1.1
	OPENBSD_3_3:1.1.0.16
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.14
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.12
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.1
	UBC:1.1.0.10
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.8
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.6
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.03.14.03.38.50;	author jsg;	state Exp;
branches;
next	1.7;
commitid	p4LJxGKbi0BU2cG6;

1.7
date	2013.10.18.22.06.41;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2013.04.14.19.40.12;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2009.09.05.14.49.20;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.27.16.37.27;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.26.16.56.42;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.02.04.39.51;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.16.23.49.11;	author mickey;	state Exp;
branches
	1.1.6.1;
next	;

1.1.6.1
date	2001.05.14.22.26.31;	author niklas;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2004.06.05.23.13.00;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/* $OpenBSD: wsemul_vt100_keys.c,v 1.7 2013/10/18 22:06:41 miod Exp $ */
/* $NetBSD: wsemul_vt100_keys.c,v 1.3 1999/04/22 20:06:02 mycroft Exp $ */

/*
 * Copyright (c) 1998
 *	Matthias Drochner.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wsdisplayvar.h>
#include <dev/wscons/wsksymvar.h>
#include <dev/wscons/wsksymdef.h>
#include <dev/wscons/wsemulvar.h>
#include <dev/wscons/wsemul_vt100var.h>

static const u_char *vt100_fkeys[] = {
	"\033[11~",	/* F1 */
	"\033[12~",
	"\033[13~",		/* F1-F5 normally don't send codes */
	"\033[14~",
	"\033[15~",	/* F5 */
	"\033[17~",	/* F6 */
	"\033[18~",
	"\033[19~",
	"\033[20~",
	"\033[21~",
	"\033[23~",	/* VT100: ESC */
	"\033[24~",	/* VT100: BS */
	"\033[25~",	/* VT100: LF */
	"\033[26~",
	"\033[28~",	/* help */
	"\033[29~",	/* do */
	"\033[31~",
	"\033[32~",
	"\033[33~",
	"\033[34~",	/* F20 */
	"\033[35~",
	"\033[36~",
	"\033[37~",
	"\033[38~"
};

static const u_char *vt100_pfkeys[] = {
	"\033OP",	/* PF1 */
	"\033OQ",
	"\033OR",
	"\033OS",	/* PF4 */
};

static const u_char *vt100_numpad[] = {
	"\033Op",	/* KP 0 */
	"\033Oq",	/* KP 1 */
	"\033Or",	/* KP 2 */
	"\033Os",	/* KP 3 */
	"\033Ot",	/* KP 4 */
	"\033Ou",	/* KP 5 */
	"\033Ov",	/* KP 6 */
	"\033Ow",	/* KP 7 */
	"\033Ox",	/* KP 8 */
	"\033Oy",	/* KP 9 */
};

int
wsemul_vt100_translate(void *cookie, kbd_t layout, keysym_t in,
    const u_char **out)
{
	struct wsemul_vt100_emuldata *edp = cookie;

	if (KS_GROUP(in) == KS_GROUP_Ascii) {
		*out = edp->translatebuf;
		return (wsemul_utf8_translate(KS_VALUE(in), layout,
		    edp->translatebuf, edp->flags & VTFL_UTF8));
	}

	if (in >= KS_f1 && in <= KS_f24) {
		*out = vt100_fkeys[in - KS_f1];
		return (5);
	}
	if (in >= KS_F1 && in <= KS_F24) {
		*out = vt100_fkeys[in - KS_F1];
		return (5);
	}
	if (in >= KS_KP_F1 && in <= KS_KP_F4) {
		*out = vt100_pfkeys[in - KS_KP_F1];
		return (3);
	}
	if (edp->flags & VTFL_APPLKEYPAD) {
		if (in >= KS_KP_0 && in <= KS_KP_9) {
			*out = vt100_numpad[in - KS_KP_0];
			return (3);
		}
		switch (in) {
		    case KS_KP_Tab:
			*out = "\033OI";
			return (3);
		    case KS_KP_Enter:
			*out = "\033OM";
			return (3);
		    case KS_KP_Multiply:
			*out = "\033Oj";
			return (3);
		    case KS_KP_Add:
			*out = "\033Ok";
			return (3);
		    case KS_KP_Separator:
			*out = "\033Ol";
			return (3);
		    case KS_KP_Subtract:
			*out = "\033Om";
			return (3);
		    case KS_KP_Decimal:
			*out = "\033On";
			return (3);
		    case KS_KP_Divide:
			*out = "\033Oo";
			return (3);
		}
	} else {
		if (!(in & 0x80)) {
			edp->translatebuf[0] = in & 0xff; /* turn into ASCII */
			*out = edp->translatebuf;
			return (1);
		}
	}
	switch (in) {
	    case KS_Help:
		*out = vt100_fkeys[15 - 1];
		return (5);
	    case KS_Execute: /* "Do" */
		*out = vt100_fkeys[16 - 1];
		return (5);
	    case KS_Find:
		*out = "\033[1~";
		return (4);
	    case KS_Insert:
	    case KS_KP_Insert:
		*out = "\033[2~";
		return (4);
	    case KS_KP_Delete:
		*out = "\033[3~";
		return (4);
	    case KS_Select:
		*out = "\033[4~";
		return (4);
	    case KS_Prior:
	    case KS_KP_Prior:
		*out = "\033[5~";
		return (4);
	    case KS_Next:
	    case KS_KP_Next:
		*out = "\033[6~";
		return (4);
	    case KS_Home:
	    case KS_KP_Home:
		*out = "\033[7~";
		return (4);
	    case KS_End:
	    case KS_KP_End:
		*out = "\033[8~";
		return (4);
	    case KS_Up:
	    case KS_KP_Up:
		if (edp->flags & VTFL_APPLCURSOR)
			*out = "\033OA";
		else
			*out = "\033[A";
		return (3);
	    case KS_Down:
	    case KS_KP_Down:
		if (edp->flags & VTFL_APPLCURSOR)
			*out = "\033OB";
		else
			*out = "\033[B";
		return (3);
	    case KS_Left:
	    case KS_KP_Left:
		if (edp->flags & VTFL_APPLCURSOR)
			*out = "\033OD";
		else
			*out = "\033[D";
		return (3);
	    case KS_Right:
	    case KS_KP_Right:
		if (edp->flags & VTFL_APPLCURSOR)
			*out = "\033OC";
		else
			*out = "\033[C";
		return (3);
	}
	return (0);
}
@


1.7
log
@UTF-8 support for wsdisplay emulation modes. Both vt100 and sun emulation
will now recognize xterm-compatible escape sequences ESC % G and ESC % @@ to
enter and leave UTF-8 mode, respectively.

Not enabled on SMALL_KERNEL.

Most of this written during c2k7, completed during b2k13.

Note that the value of several international keysyms change, to switch from
ISO Latin-[257] values to the real Unicode values. Be sure to update your
includes and rebuild and install wsconsctl.
@
text
@d1 1
a1 1
/* $OpenBSD: wsemul_vt100_keys.c,v 1.6 2013/04/14 19:40:12 miod Exp $ */
a32 1
#include <dev/wscons/wscons_features.h>
@


1.6
log
@Add escape codes for F21 to F24, continuing the existing sequence. Note that
vt100 and vt220 do not have such function keys, and there is no clear consensus,
for terminal emulations supporting F21 to F24, of the escape codes to use
(linux stops at F20, and Wyse and QNX use incompatible sequences for keys up
to F20).
From "Creamy" on tech@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsemul_vt100_keys.c,v 1.5 2009/09/05 14:49:20 miod Exp $ */
d33 1
d41 1
a41 1
static const char *vt100_fkeys[] = {
d68 1
a68 1
static const char *vt100_pfkeys[] = {
d75 1
a75 1
static const char *vt100_numpad[] = {
d89 2
a90 1
wsemul_vt100_translate(void *cookie, keysym_t in, const char **out)
d93 6
a98 1
	static char c;
d145 2
a146 2
			c = in & 0xff; /* turn into ASCII */
			*out = &c;
@


1.5
log
@Check the return value of all emulops in the emulation code, and abort
tty output as soon as we hit a failure.

Since the `output' of a character may cause several emulops to be called
(e.g. if it causes scrollup or if this is the end of an escape sequence),
all emulation code maintain a so-called `abort state', to be able to properly
recover when the character is tentatively output later, and not reissue
the emulops which did not fail the first time.

With help from mglocker@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsemul_vt100_keys.c,v 1.4 2007/11/27 16:37:27 miod Exp $ */
d61 4
d93 1
a93 1
	if (in >= KS_f1 && in <= KS_f20) {
d97 1
a97 1
	if (in >= KS_F1 && in <= KS_F20) {
@


1.4
log
@Remove whitespace at EOL, KNF, ansify. Move jump scroll code to a separate
routine. No functional change (har, har)
@
text
@d1 1
a1 1
/* $OpenBSD: wsemul_vt100_keys.c,v 1.3 2007/11/26 16:56:42 miod Exp $ */
d33 1
d37 1
@


1.3
log
@Constify the output of the emulops translate() function, as well as the
various tables they use.
@
text
@d1 1
a1 1
/* $OpenBSD: wsemul_vt100_keys.c,v 1.2 2004/04/02 04:39:51 deraadt Exp $ */
d82 1
a82 4
wsemul_vt100_translate(cookie, in, out)
	void *cookie;
	keysym_t in;
	const char **out;
@


1.2
log
@remove terms 3 & 4 for drochner@@NetBSD.org; as seen on netbsd lists
@
text
@d1 1
a1 1
/* $OpenBSD: wsemul_vt100_keys.c,v 1.1 2000/05/16 23:49:11 mickey Exp $ */
d38 1
a38 1
static char *vt100_fkeys[] = {
d61 1
a61 1
static char *vt100_pfkeys[] = {
d68 1
a68 1
static char *vt100_numpad[] = {
d85 1
a85 1
	char **out;
@


1.1
log
@import newer wscons source from netbsd.
art@@ said it will make his life easier in alpha
rhands@@ said it is not used in powerpc for now
bjc@@ said that it would make vax port easier
mickey@@ said other platforms can use it, and it's faster
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a15 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed for the NetBSD Project
 *	by Matthias Drochner.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.1.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/* $OpenBSD: wsemul_vt100_keys.c,v 1.1 2000/05/16 23:49:11 mickey Exp $ */
@


1.1.6.2
log
@Merge with the trunk
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d16 6
@


