head	1.9;
access;
symbols
	OPENBSD_6_0:1.9.0.12
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.10
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.8
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.8.0.12
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.10
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.8
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.7.0.18
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.14
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.16
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.12
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.14
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.12
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.10
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.3.0.8
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	SMP:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2013.10.18.22.06.40;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2010.11.20.20.52.10;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2006.08.05.16.59.57;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.15.11.29.15;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.03.16.08;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.27.03;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.10.19.42.06;	author mickey;	state Exp;
branches
	1.3.4.1
	1.3.8.1;
next	1.2;

1.2
date	2000.08.01.13.51.17;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.16.23.49.10;	author mickey;	state Exp;
branches;
next	;

1.3.4.1
date	2001.05.14.22.26.28;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2002.03.28.15.09.10;	author niklas;	state Exp;
branches;
next	;

1.3.8.1
date	2002.06.11.03.42.31;	author art;	state Exp;
branches;
next	;


desc
@@


1.9
log
@UTF-8 support for wsdisplay emulation modes. Both vt100 and sun emulation
will now recognize xterm-compatible escape sequences ESC % G and ESC % @@ to
enter and leave UTF-8 mode, respectively.

Not enabled on SMALL_KERNEL.

Most of this written during c2k7, completed during b2k13.

Note that the value of several international keysyms change, to switch from
ISO Latin-[257] values to the real Unicode values. Be sure to update your
includes and rebuild and install wsconsctl.
@
text
@/* $OpenBSD: wscons_callbacks.h,v 1.8 2010/11/20 20:52:10 miod Exp $ */
/* $NetBSD: wscons_callbacks.h,v 1.16 2001/11/10 17:14:51 augustss Exp $ */

/*
 * Copyright (c) 1996, 1997 Christopher G. Demetriou.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou
 *	for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

struct wsevsrc;

/*
 * Calls to the display interface from the glue code.
 */
void	wsdisplay_set_console_kbd(struct wsevsrc *);

/*
 * Calls to the display interface from the keyboard interface.
 */
void	wsdisplay_kbdinput(struct device *v, kbd_t, keysym_t *, int);
void	wsdisplay_rawkbdinput(struct device *v, u_char *, int);
int	wsdisplay_switch(struct device *, int, int);
enum wsdisplay_resetops {
	WSDISPLAY_RESETEMUL,
	WSDISPLAY_RESETCLOSE
};
void	wsdisplay_reset(struct device *, enum wsdisplay_resetops);
void	wsdisplay_kbdholdscreen(struct device *v, int);

void	wsdisplay_set_cons_kbd(int (*get)(dev_t),
			       void (*poll)(dev_t, int),
			       void (*bell)(dev_t, u_int, u_int, u_int));
void	wsdisplay_unset_cons_kbd(void);
int	wsdisplay_set_kbd(struct device *, struct wsevsrc *);
struct wsdisplay_param;
int	wsdisplay_param(struct device*, u_long, struct wsdisplay_param*);

/*
 * Calls to the keyboard interface from the glue code.
 */
struct wsevsrc *wskbd_set_console_display(struct device *, struct wsevsrc *);
int	wskbd_set_display(struct device *, struct device *);
int	wskbd_pickfree(void);
@


1.8
log
@Change wsdisplay_kbdinput() to get an aray of keysym_t and a count, instead of
a single keysym_t at a time - this means tty sanity checks will only happen
once.

Introduce wsdisplay_rawkbdinput() for raw mode input, since raw input is
a byte array. As a bonus this allows us to skip the `is this a KS_GROUP_Ascii
value' test in that case.
@
text
@d1 1
a1 1
/* $OpenBSD: wscons_callbacks.h,v 1.7 2006/08/05 16:59:57 miod Exp $ */
d44 1
a44 1
void	wsdisplay_kbdinput(struct device *v, keysym_t *, int);
@


1.7
log
@On platforms which do not use wsmux (because they can't have more than one
keyboard at once), force wskbd0 to connect to wsdisplay0 even if they are
not console devices.
@
text
@d1 1
a1 1
/* $OpenBSD: wscons_callbacks.h,v 1.6 2005/05/15 11:29:15 miod Exp $ */
d44 2
a45 1
void	wsdisplay_kbdinput(struct device *v, keysym_t);
@


1.6
log
@Partial sync to the NetBSD wscons code, bringing a better wsmux behaviour
and bugfixes (the kqueue code, /dev/wsmuxctl and screen border color changes
have not been picked), keeping local changes.

Tested by many on alpha/cats/hp300/i386/macppc/sparc/sparc64/zaurus if not more.
@
text
@d1 1
a1 1
/* $OpenBSD: wscons_callbacks.h,v 1.5 2002/03/14 03:16:08 millert Exp $ */
d57 1
d65 1
@


1.5
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 2
a2 2
/* $OpenBSD: wscons_callbacks.h,v 1.4 2002/03/14 01:27:03 millert Exp $ */
/* $NetBSD: wscons_callbacks.h,v 1.12 2000/03/06 21:37:16 thorpej Exp $ */
d34 2
d39 1
a39 1
struct device *wsdisplay_set_console_kbd(struct device *);
d63 2
a64 3
struct wsmux_softc;
struct device *wskbd_set_console_display(struct device *, struct wsmux_softc *);
int wskbd_pickfree(void);
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/* $OpenBSD: wscons_callbacks.h,v 1.3 2001/02/10 19:42:06 mickey Exp $ */
d51 3
a53 3
void	wsdisplay_set_cons_kbd __P((int (*get)(dev_t),
				    void (*poll)(dev_t, int),
				    void (*bell)(dev_t, u_int, u_int, u_int)));
@


1.3
log
@sync w/ netbsd; aaron@@ ok
@
text
@d1 1
a1 1
/* $OpenBSD: wscons_callbacks.h,v 1.2 2000/08/01 13:51:17 mickey Exp $ */
d37 1
a37 1
struct device *wsdisplay_set_console_kbd __P((struct device *));
d42 2
a43 2
void	wsdisplay_kbdinput __P((struct device *v, keysym_t));
int	wsdisplay_switch __P((struct device *, int, int));
d48 2
a49 2
void	wsdisplay_reset __P((struct device *, enum wsdisplay_resetops));
void	wsdisplay_kbdholdscreen __P((struct device *v, int));
d54 1
a54 1
void	wsdisplay_unset_cons_kbd __P((void));
d56 1
a56 1
int	wsdisplay_param __P((struct device*, u_long, struct wsdisplay_param*));
d62 2
a63 3
struct device *wskbd_set_console_display 
		__P((struct device *, struct wsmux_softc *));
int wskbd_pickfree __P((void));
@


1.3.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: wscons_callbacks.h,v 1.3 2001/02/10 19:42:06 mickey Exp $ */
d37 1
a37 1
struct device *wsdisplay_set_console_kbd(struct device *);
d42 2
a43 2
void	wsdisplay_kbdinput(struct device *v, keysym_t);
int	wsdisplay_switch(struct device *, int, int);
d48 2
a49 2
void	wsdisplay_reset(struct device *, enum wsdisplay_resetops);
void	wsdisplay_kbdholdscreen(struct device *v, int);
d51 4
a54 4
void	wsdisplay_set_cons_kbd(int (*get)(dev_t),
			       void (*poll)(dev_t, int),
			       void (*bell)(dev_t, u_int, u_int, u_int));
void	wsdisplay_unset_cons_kbd(void);
d56 1
a56 1
int	wsdisplay_param(struct device*, u_long, struct wsdisplay_param*);
d62 3
a64 2
struct device *wskbd_set_console_display(struct device *, struct wsmux_softc *);
int wskbd_pickfree(void);
@


1.3.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/* $OpenBSD: wscons_callbacks.h,v 1.3 2001/02/10 19:42:06 mickey Exp $ */
@


1.3.4.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d37 1
a37 1
struct device *wsdisplay_set_console_kbd(struct device *);
d42 2
a43 2
void	wsdisplay_kbdinput(struct device *v, keysym_t);
int	wsdisplay_switch(struct device *, int, int);
d48 2
a49 2
void	wsdisplay_reset(struct device *, enum wsdisplay_resetops);
void	wsdisplay_kbdholdscreen(struct device *v, int);
d51 4
a54 4
void	wsdisplay_set_cons_kbd(int (*get)(dev_t),
			       void (*poll)(dev_t, int),
			       void (*bell)(dev_t, u_int, u_int, u_int));
void	wsdisplay_unset_cons_kbd(void);
d56 1
a56 1
int	wsdisplay_param(struct device*, u_long, struct wsdisplay_param*);
d62 3
a64 2
struct device *wskbd_set_console_display(struct device *, struct wsmux_softc *);
int wskbd_pickfree(void);
@


1.2
log
@update wscons, nothing serious, mostly api fixes for us; from netbsd through aaron@@
@
text
@d1 1
a1 1
/* $OpenBSD: wscons_callbacks.h,v 1.1 2000/05/16 23:49:10 mickey Exp $ */
d55 2
@


1.1
log
@import newer wscons source from netbsd.
art@@ said it will make his life easier in alpha
rhands@@ said it is not used in powerpc for now
bjc@@ said that it would make vax port easier
mickey@@ said other platforms can use it, and it's faster
@
text
@d1 2
a2 2
/* $OpenBSD$ */
/* $NetBSD: wscons_callbacks.h,v 1.11 1999/12/01 23:22:59 augustss Exp $ */
@

