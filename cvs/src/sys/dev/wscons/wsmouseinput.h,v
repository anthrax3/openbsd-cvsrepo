head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.4
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.1.0.2
	OPENBSD_6_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2017.06.06.21.53.07;	author bru;	state Exp;
branches;
next	1.7;
commitid	ZieEBvL7i7Fgw9FN;

1.7
date	2017.05.08.20.55.29;	author bru;	state Exp;
branches;
next	1.6;
commitid	HWVWBmAyExdFs9jj;

1.6
date	2017.03.16.10.03.27;	author mpi;	state Exp;
branches;
next	1.5;
commitid	98yfHbLbz9JTRK0J;

1.5
date	2017.03.06.09.53.01;	author mpi;	state Exp;
branches;
next	1.4;
commitid	fckaiFbVNF5ECH1f;

1.4
date	2017.02.27.15.59.56;	author bru;	state Exp;
branches;
next	1.3;
commitid	8SRGrIuLd7axW5SE;

1.3
date	2016.10.23.22.59.19;	author bru;	state Exp;
branches;
next	1.2;
commitid	m7Qv2drIZWfJ1bkB;

1.2
date	2016.08.18.21.12.35;	author bru;	state Exp;
branches;
next	1.1;
commitid	iOWfDm0VZFKSQJu6;

1.1
date	2016.03.30.23.34.12;	author bru;	state Exp;
branches;
next	;
commitid	216Sb0C4sEs8CDdv;


desc
@@


1.8
log
@Set the weak variant of hysteresis as default.
@
text
@/* $OpenBSD: wsmouseinput.h,v 1.7 2017/05/08 20:55:29 bru Exp $ */

/*
 * Copyright (c) 2015, 2016 Ulf Brosziewski
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * wsmouse input processing - private header
 */

#ifndef _WSMOUSEINPUT_H_
#define _WSMOUSEINPUT_H_

#ifdef _KERNEL

struct btn_state {
	u_int buttons;
	u_int sync;
};

struct motion_state {
	int dx;
	int dy;
	int dz;
	int dw;
	int x;
	int y;
	u_int sync;

	/* deltas of absolute coordinates */
	int x_delta;
	int y_delta;
};
#define SYNC_DELTAS		(1 << 0)
#define SYNC_X			(1 << 1)
#define SYNC_Y			(1 << 2)
#define SYNC_POSITION		(SYNC_X | SYNC_Y)

struct touch_state {
	int pressure;
	int contacts;
	int width;
	u_int sync;

	int min_pressure;
	int prev_contacts;
};
#define SYNC_PRESSURE		(1 << 0)
#define SYNC_CONTACTS		(1 << 1)
#define SYNC_TOUCH_WIDTH	(1 << 2)

struct mt_slot {
	int x;
	int y;
	int pressure;
	int id;		/* tracking ID */
};
#define MTS_TOUCH	0
#define MTS_X		1
#define MTS_Y		2
#define MTS_PRESSURE	3

#define MTS_SIZE	4

struct mt_state {
	/* the set of slots with active touches */
	u_int touches;
	/* the set of slots with unsynchronized state */
	u_int frame;

	int num_slots;
	struct mt_slot *slots;
	/* the sets of changes per slot axis */
	u_int sync[MTS_SIZE];

	int num_touches;

	/* pointer control */
	u_int ptr;
	u_int ptr_cycle;
	u_int prev_ptr;

	/* a buffer for the MT tracking function */
	int *matrix;
};


struct axis_filter {
	/* A scale factor in [*.12] fixed-point format */
	int scale;
	int rmdr;
	/* Invert coordinates. */
	int inv;
	/* Hysteresis limit, accumulated deltas, and weighted delta average. */
	int hysteresis;
	int acc;
	int avg;
	int avg_rmdr;
	/* A [*.12] coefficient for "magnitudes", used for deceleration. */
	int mag_scale;
	int dclr_rmdr;
	/* Ignore deltas that are greater than this limit. */
	int dmax;
};

struct interval {
	long avg;	/* average update interval in nanoseconds */
	long sum;
	int samples;
	struct timespec ts;
	int track;
};

struct wsmouseinput {
	u_int flags;

	struct btn_state btn;
	struct btn_state sbtn;	/* softbuttons */
	struct motion_state motion;
	struct touch_state touch;
	struct mt_state mt;

	struct { /* Parameters and state of various input filters. */
		struct axis_filter h;
		struct axis_filter v;

		int dclr;	/* deceleration threshold */
		int mag;	/* weighted average of delta magnitudes */
		u_int mode;	/* hysteresis type, smoothing factor */

		int ratio;	/* X/Y ratio */

		int swapxy;
		int tracking_maxdist;
		int pressure_lo;
		int pressure_hi;
	} filter;

	struct wsmousehw hw;
	struct interval intv;
	struct wstpad *tp;

	struct wseventvar **evar;
};
/* wsmouseinput.flags */
#define TPAD_COMPAT_MODE	(1 << 0)
#define TPAD_NATIVE_MODE	(1 << 1)
#define MT_TRACKING		(1 << 2)
#define RESYNC			(1 << 16)
#define TRACK_INTERVAL		(1 << 17)
#define CONFIGURED		(1 << 18)

/* filter.mode (bit 0-2: smoothing factor, bit 3: hysteresis type) */
#define WEAK_HYSTERESIS		0
#define STRONG_HYSTERESIS	(1 << 3)
#define SMOOTHING_MASK		7
#define FILTER_MODE_DEFAULT	WEAK_HYSTERESIS

struct evq_access {
	struct wseventvar *evar;
	struct timespec ts;
	int put;
	int result;
};
#define EVQ_RESULT_OVERFLOW	-1
#define EVQ_RESULT_NONE		0
#define EVQ_RESULT_SUCCESS	1


void wsmouse_evq_put(struct evq_access *, int, int);
void wsmouse_input_reset(struct wsmouseinput *);
void wsmouse_input_cleanup(struct wsmouseinput *);

void wstpad_compat_convert(struct wsmouseinput *, struct evq_access *);
void wstpad_init_deceleration(struct wsmouseinput *);
int wstpad_configure(struct wsmouseinput *);
void wstpad_reset(struct wsmouseinput *);

int wstpad_get_param(struct wsmouseinput *, int, int *);
int wstpad_set_param(struct wsmouseinput *, int, int);


#define FOREACHBIT(v, i) \
    for ((i) = ffs(v) - 1; (i) != -1; (i) = ffs((v) & (~1 << (i))) - 1)

#define DELTA_X_EV(input) ((input)->filter.swapxy ? \
    WSCONS_EVENT_MOUSE_DELTA_Y : WSCONS_EVENT_MOUSE_DELTA_X)
#define DELTA_Y_EV(input) ((input)->filter.swapxy ? \
    WSCONS_EVENT_MOUSE_DELTA_X : WSCONS_EVENT_MOUSE_DELTA_Y)
#define ABS_X_EV(input) ((input)->filter.swapxy ? \
    WSCONS_EVENT_MOUSE_ABSOLUTE_Y : WSCONS_EVENT_MOUSE_ABSOLUTE_X)
#define ABS_Y_EV(input) ((input)->filter.swapxy ? \
    WSCONS_EVENT_MOUSE_ABSOLUTE_X : WSCONS_EVENT_MOUSE_ABSOLUTE_Y)
#define DELTA_Z_EV	WSCONS_EVENT_MOUSE_DELTA_Z
#define DELTA_W_EV	WSCONS_EVENT_MOUSE_DELTA_W
#define ABS_Z_EV	WSCONS_EVENT_TOUCH_PRESSURE
#define ABS_W_EV	WSCONS_EVENT_TOUCH_CONTACTS
#define BTN_DOWN_EV	WSCONS_EVENT_MOUSE_DOWN
#define BTN_UP_EV	WSCONS_EVENT_MOUSE_UP
#define SYNC_EV		WSCONS_EVENT_SYNC

/* matrix size + buffer size for wsmouse_matching */
#define MATRIX_SIZE(slots) (((slots) + 6) * (slots) * sizeof(int))

#define IS_TOUCHPAD(input)			\
    ((input)->hw.hw_type == WSMOUSEHW_TOUCHPAD	\
    || (input)->hw.hw_type == WSMOUSEHW_CLICKPAD)

#endif /* _KERNEL */

#endif /* _WSMOUSEINPUT_H_ */
@


1.7
log
@improved coordinate filters

ok mpi@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsmouseinput.h,v 1.6 2017/03/16 10:03:27 mpi Exp $ */
d166 1
d169 1
a169 1
#define FILTER_MODE_DEFAULT	STRONG_HYSTERESIS
@


1.6
log
@Simplify wstpad option handling:

- Remove unnecessary abstraction
- Make it possible to support new features/options without ABI break
- Remove some complexity and hard limits
- Simplify & keep documentation close to options

ok bru@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsmouseinput.h,v 1.5 2017/03/06 09:53:01 mpi Exp $ */
d106 1
a106 1
	/* Hysteresis limit and accumulated deltas. */
d109 2
d141 1
d164 5
@


1.5
log
@Guard headers to make sure userland do not look at them.

ok bru@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsmouseinput.h,v 1.4 2017/02/27 15:59:56 bru Exp $ */
d182 2
a183 4
int wstpad_get_params(struct wsmouseinput *,
    struct wsmouse_param *, u_int);
int wstpad_set_params(struct wsmouseinput *,
    const struct wsmouse_param *, u_int);
a210 14

#define WSMOUSECFG_MATCH(key, group)		\
    ((key) < WSMOUSECFG_##group##_MAX &&	\
    (key) >= (WSMOUSECFG_##group##_MAX & ~0xff))

#define IS_WSMOUSECFG_KEY(key)			\
    (WSMOUSECFG_MATCH((key), FILTER)		\
    || WSMOUSECFG_MATCH((key), TP_OPTS)		\
    || WSMOUSECFG_MATCH((key), TP))

#define WSMOUSECFG_SIZE				\
    ((WSMOUSECFG_FILTER_MAX & 0xff)		\
    + (WSMOUSECFG_TP_OPTS_MAX & 0xff)		\
    + (WSMOUSECFG_TP_MAX & 0xff))
@


1.4
log
@Handle touchpad input in wsmouse.

The wstpad file contains the core of a touchpad-input driver that
is coupled with wsmouse. It is active in compat-mode if wsmouse has
been configured for it.

ok @@matthieu @@stsp @@mpi
@
text
@d1 1
a1 1
/* $OpenBSD: wsmouseinput.h,v 1.3 2016/10/23 22:59:19 bru Exp $ */
d26 1
d227 2
@


1.3
log
@Improved parameter handling in wsmouse and new ioctls for reading and
setting parameter values.

ok matthieu@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsmouseinput.h,v 1.2 2016/08/18 21:12:35 bru Exp $ */
d57 1
d105 6
d115 8
d127 1
d136 5
d145 5
a149 1
	} fltr;
d158 2
a172 2
void wsmouse_init_scaling(struct wsmouseinput *);

a173 1
void wsmouse_input_init(struct wsmouseinput *, struct wseventvar **);
d176 10
d190 1
a190 2

#define DELTA_X_EV(input) ((input)->fltr.swapxy ? \
d192 1
a192 1
#define DELTA_Y_EV(input) ((input)->fltr.swapxy ? \
d194 1
a194 1
#define ABS_X_EV(input) ((input)->fltr.swapxy ? \
d196 1
a196 1
#define ABS_Y_EV(input) ((input)->fltr.swapxy ? \
d206 2
a207 2
/* buffer size for wsmouse_matching */
#define MATRIX_SIZE(slots) (((slots) + 7) * (slots) * sizeof(int))
d209 3
d217 9
a225 5
#define IS_WSMOUSECFG_KEY(key) \
    WSMOUSECFG_MATCH((key), FLTR)

#define WSMOUSECFG_SIZE \
    (WSMOUSECFG_FLTR_MAX & 0xff)
@


1.2
log
@Reset the input state completely when wsmouse is (re-)opened.

ok mpi@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsmouseinput.h,v 1.1 2016/03/30 23:34:12 bru Exp $ */
d99 1
a99 1
	/* scale factor in [*.12] fixed-point format */
d102 4
d116 1
a116 2
	struct wsmouseparams params;
	struct {
d119 5
d131 1
a131 3
#define SCALE_DELTAS		(1 << 2)
#define MT_TRACKING		(1 << 3)
#define SWAPXY			(1 << 4)
d157 1
a157 1
#define DELTA_X_EV(flags) (((flags) & SWAPXY) ? \
d159 1
a159 1
#define DELTA_Y_EV(flags) (((flags) & SWAPXY) ? \
d161 1
a161 1
#define ABS_X_EV(flags) (((flags) & SWAPXY) ? \
d163 1
a163 1
#define ABS_Y_EV(flags) (((flags) & SWAPXY) ? \
d175 11
@


1.1
log
@Add support for multitouch input to wsmouse.

This change adds new input-processing functions to wsmouse and
adapts the touchpad drivers.

ok mpi@@, shadchin@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d142 1
@

