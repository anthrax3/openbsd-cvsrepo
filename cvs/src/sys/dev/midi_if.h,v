head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.8
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.6
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.7.0.30
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.28
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.26
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.22
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.20
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.18
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.16
	OPENBSD_5_0:1.7.0.14
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.12
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.10
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.6
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.8
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.4
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.18
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.16
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.14
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.12
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.10
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.2.0.8
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.8
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.6
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.05.16.10.04.20;	author ratchov;	state Exp;
branches;
next	1.8;
commitid	8jFLLNJdmtnOqSgO;

1.8
date	2015.05.12.18.23.38;	author ratchov;	state Exp;
branches;
next	1.7;
commitid	7nAj0T8uP4hGcapP;

1.7
date	2008.06.26.05.42.14;	author ray;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.07.22.41.32;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.15.01.20.04;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.03.16.03;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.52;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.24.13.44.18;	author ho;	state Exp;
branches
	1.2.8.1;
next	1.1;

1.1
date	99.01.02.00.02.37;	author niklas;	state Exp;
branches
	1.1.6.1;
next	;

1.1.6.1
date	2001.05.14.22.23.01;	author niklas;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2002.03.28.12.29.44;	author niklas;	state Exp;
branches;
next	;

1.2.8.1
date	2002.06.11.03.42.15;	author art;	state Exp;
branches;
next	;


desc
@@


1.9
log
@hide private midi_softc strucure
@
text
@/*	$OpenBSD$	*/
/*	$NetBSD: midi_if.h,v 1.3 1998/11/25 22:17:07 augustss Exp $	*/

/*
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (augustss@@netbsd.org).
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _SYS_DEV_MIDI_IF_H_
#define _SYS_DEV_MIDI_IF_H_

struct midi_info {
	char	*name;		/* Name of MIDI hardware */
	int	props;
};
#define MIDI_PROP_OUT_INTR  1
#define MIDI_PROP_CAN_INPUT 2

struct midi_hw_if {
	int	(*open)(void *, int, 	/* open hardware */
			void (*)(void *, int), /* input callback */
			void (*)(void *), /* output callback */
			void *);
	void	(*close)(void *);	/* close hardware */
	int	(*output)(void *, int);	/* output a byte */
	void	(*flush)(void *);	/* flush the output */
	void	(*getinfo)(void *, struct midi_info *);
	int	(*ioctl)(void *, u_long, caddr_t, int, struct proc *);
};

struct device *midi_attach_mi(struct midi_hw_if *, void *, struct device *);

#endif /* _SYS_DEV_MIDI_IF_H_ */
@


1.8
log
@Remove unused code & definitions: midi_attach(), midi_unit_count(),
midi_getinfo(), midi_writebytes(). They were "used" by the sequencer
interface which we removed years ago.
@
text
@a42 2
struct midi_softc;

@


1.7
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: midi_if.h,v 1.6 2006/04/07 22:41:32 jsg Exp $	*/
d57 1
a57 7
void	       midi_attach(struct midi_softc *, struct device *);
struct device *midi_attach_mi(struct midi_hw_if *, void *, 
				   struct device *);

int	       midi_unit_count(void);
void	       midi_getinfo(dev_t, struct midi_info *);
int	       midi_writebytes(int, u_char *, int);
@


1.6
log
@Add optional flush method to MIDI hardware interface.
Allow umidi(4) to send multiple events in a single USB transfer.
This greatly improves the number of interrupts umidi is able to generate.

From Alexandre Ratchov.
@
text
@d1 1
a1 1
/*	$OpenBSD: midi_if.h,v 1.5 2002/03/15 01:20:04 millert Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.5
log
@Cosmetic changes only, primarily making comments line up nicely after the
__P removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: midi_if.h,v 1.4 2002/03/14 03:16:03 millert Exp $	*/
d59 1
@


1.4
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: midi_if.h,v 1.3 2002/03/14 01:26:52 millert Exp $	*/
d57 1
a57 1
	void	(*close)(void *);		/* close hardware */
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: midi_if.h,v 1.2 2000/05/24 13:44:18 ho Exp $	*/
d53 4
a56 4
	int	(*open)__P((void *, int, 	/* open hardware */
			    void (*)(void *, int), /* input callback */
			    void (*)(void *), /* output callback */
			    void *));
@


1.2
log
@Permit detach of audio devices, such as uaudio. Selected code
from NetBSD/Lennart Augustsson. (niklas@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD: midi_if.h,v 1.1 1999/01/02 00:02:37 niklas Exp $	*/
d54 2
a55 2
			    void (*)__P((void *, int)), /* input callback */
			    void (*)__P((void *)), /* output callback */
d57 4
a60 4
	void	(*close)__P((void *));		/* close hardware */
	int	(*output)__P((void *, int));	/* output a byte */
	void	(*getinfo)__P((void *, struct midi_info *));
	int	(*ioctl)__P((void *, u_long, caddr_t, int, struct proc *));
d63 7
a69 7
void	       midi_attach __P((struct midi_softc *, struct device *));
struct device *midi_attach_mi __P((struct midi_hw_if *, void *, 
				   struct device *));

int	       midi_unit_count __P((void));
void	       midi_getinfo __P((dev_t, struct midi_info *));
int	       midi_writebytes __P((int, u_char *, int));
@


1.2.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: midi_if.h,v 1.2 2000/05/24 13:44:18 ho Exp $	*/
d53 8
a60 8
	int	(*open)(void *, int, 	/* open hardware */
			void (*)(void *, int), /* input callback */
			void (*)(void *), /* output callback */
			void *);
	void	(*close)(void *);	/* close hardware */
	int	(*output)(void *, int);	/* output a byte */
	void	(*getinfo)(void *, struct midi_info *);
	int	(*ioctl)(void *, u_long, caddr_t, int, struct proc *);
d63 7
a69 7
void	       midi_attach(struct midi_softc *, struct device *);
struct device *midi_attach_mi(struct midi_hw_if *, void *, 
				   struct device *);

int	       midi_unit_count(void);
void	       midi_getinfo(dev_t, struct midi_info *);
int	       midi_writebytes(int, u_char *, int);
@


1.1
log
@Midi & sequencer support from NetBSD, mostly by Lennart Augustsson
@
text
@d1 1
a1 1
/*	$OpenBSD: midi_if.h,v 1.3 1998/11/25 22:17:07 augustss Exp $	*/
d63 7
a69 6
void	midi_attach __P((struct midi_softc *, struct device *));
void	midi_attach_mi __P((struct midi_hw_if *, void *, struct device *));

int	midi_unit_count __P((void));
void	midi_getinfo __P((dev_t, struct midi_info *));
int	midi_writebytes __P((int, u_char *, int));
@


1.1.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: midi_if.h,v 1.2 2000/05/24 13:44:18 ho Exp $	*/
d63 6
a68 7
void	       midi_attach __P((struct midi_softc *, struct device *));
struct device *midi_attach_mi __P((struct midi_hw_if *, void *, 
				   struct device *));

int	       midi_unit_count __P((void));
void	       midi_getinfo __P((dev_t, struct midi_info *));
int	       midi_writebytes __P((int, u_char *, int));
@


1.1.6.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d53 8
a60 8
	int	(*open)(void *, int, 	/* open hardware */
			void (*)(void *, int), /* input callback */
			void (*)(void *), /* output callback */
			void *);
	void	(*close)(void *);	/* close hardware */
	int	(*output)(void *, int);	/* output a byte */
	void	(*getinfo)(void *, struct midi_info *);
	int	(*ioctl)(void *, u_long, caddr_t, int, struct proc *);
d63 7
a69 7
void	       midi_attach(struct midi_softc *, struct device *);
struct device *midi_attach_mi(struct midi_hw_if *, void *, 
				   struct device *);

int	       midi_unit_count(void);
void	       midi_getinfo(dev_t, struct midi_info *);
int	       midi_writebytes(int, u_char *, int);
@


