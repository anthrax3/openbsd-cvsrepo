head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.24
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.20
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.10
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.18
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.16
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.14
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.12
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.8
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.6
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.12
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.10
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.8
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.3.0.12
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.10
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.6
date	2011.10.03.20.24.51;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.26.14.51.20;	author mbalmer;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.24.12.12.12;	author mbalmer;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.14.12.33.49;	author grange;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.05.11.52.24;	author grange;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.03.18.08.00;	author grange;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.12.38;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Add a 'flag' locator to gpioiic(4), and define a first flag
value to swap the SDA and SCL pins assigment during attach.
Mostly from work with mbalmer@@NetBSD.
ok miod@@
@
text
@/*	$OpenBSD: gpiovar.h,v 1.5 2008/11/26 14:51:20 mbalmer Exp $	*/

/*
 * Copyright (c) 2004, 2006 Alexander Yurchenko <grange@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _DEV_GPIO_GPIOVAR_H_
#define _DEV_GPIO_GPIOVAR_H_

/* GPIO controller description */
typedef struct gpio_chipset_tag {
	void	*gp_cookie;

	int	(*gp_pin_read)(void *, int);
	void	(*gp_pin_write)(void *, int, int);
	void	(*gp_pin_ctl)(void *, int, int);
} *gpio_chipset_tag_t;

/* GPIO pin description */
typedef struct gpio_pin {
	int	pin_num;		/* number */
	int	pin_caps;		/* capabilities */
	int	pin_flags;		/* current configuration */
	int	pin_state;		/* current state */
	int	pin_mapped;		/* is mapped */
} gpio_pin_t;

/* Attach GPIO framework to the controller */
struct gpiobus_attach_args {
	const char		*gba_name;	/* bus name */
	gpio_chipset_tag_t	gba_gc;		/* underlying controller */
	gpio_pin_t		*gba_pins;	/* pins array */
	int			gba_npins;	/* total number of pins */
};

int gpiobus_print(void *, const char *);

/* GPIO framework private methods */
#define gpiobus_pin_read(gc, pin) \
    ((gc)->gp_pin_read((gc)->gp_cookie, (pin)))
#define gpiobus_pin_write(gc, pin, value) \
    ((gc)->gp_pin_write((gc)->gp_cookie, (pin), (value)))
#define gpiobus_pin_ctl(gc, pin, flags) \
    ((gc)->gp_pin_ctl((gc)->gp_cookie, (pin), (flags)))

/* Attach devices connected to the GPIO pins */
struct gpio_attach_args {
	void *			ga_gpio;
	int			ga_offset;
	u_int32_t		ga_mask;
	char			*ga_dvname;
	u_int32_t		ga_flags;
};

/* GPIO pin map */
struct gpio_pinmap {
	int *	pm_map;			/* pin map */
	int	pm_size;		/* map size */
};

struct gpio_dev {
	struct device		*sc_dev;	/* the gpio device */
	LIST_ENTRY(gpio_dev)	 sc_next;
};

struct gpio_name {
	char			gp_name[GPIOPINMAXNAME];
	int			gp_pin;
	LIST_ENTRY(gpio_name)	gp_next;
};

int	gpio_pin_map(void *, int, u_int32_t, struct gpio_pinmap *);
void	gpio_pin_unmap(void *, struct gpio_pinmap *);
int	gpio_pin_read(void *, struct gpio_pinmap *, int);
void	gpio_pin_write(void *, struct gpio_pinmap *, int, int);
void	gpio_pin_ctl(void *, struct gpio_pinmap *, int, int);
int	gpio_pin_caps(void *, struct gpio_pinmap *, int);

int	gpio_npins(u_int32_t);

#endif	/* !_DEV_GPIO_GPIOVAR_H_ */
@


1.5
log
@Change the semantics of gpio(4) devices by locking down pin
configuration and device attachment/detachment to securelevel 0.

GPIO pins can now only be configured at securelevel 0.  Once the
securelevel is raised, only pins that have been configured and set
for securelevel access using the GPIOPINSET ioctl are accessible.
This also adds the possibility to give GPIO pins a name.

ok uwe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gpiovar.h,v 1.4 2008/11/24 12:12:12 mbalmer Exp $	*/
d64 1
@


1.4
log
@- Add two new ioctls to gpio(4), GPIOATTACH and GPIODETACH, to allow to attach
and detach devices on a gpiobus at runtime.  The offset and mask locators
in kernel config files can still be used for static configuration, so this
does not break existing custome kernel configs.

- Have gpioow(4) unmap the pins it used from the gpiobus during detach

Changes to gpioctl(8) will be a separate committ.

ok uwe
@
text
@d1 1
a1 1
/*	$OpenBSD: gpiovar.h,v 1.3 2006/01/14 12:33:49 grange Exp $	*/
d75 6
@


1.3
log
@Add gpio_pin_caps() method to provide pin capabilities.
@
text
@d1 1
a1 1
/*	$OpenBSD: gpiovar.h,v 1.2 2006/01/05 11:52:24 grange Exp $	*/
d63 1
d70 5
@


1.2
log
@Finish framework for attaching kernel drivers to the GPIO pins.
Not used yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: gpiovar.h,v 1.1 2004/06/03 18:08:00 grange Exp $	*/
d76 1
@


1.1
log
@A framework for supporting various General Purpose Input/Output (GPIO)
devices. Such devices provide a set of pins that you can use to connect
for example leds to it.
The pins can be accessed either from userland through the /dev/gpio*
device files or from the kernel drivers. The latter is necessary
for implementing timing-sensitive things like i2c or 1-wire master
controller.

ok deraadt@@
@
text
@d1 2
a2 1
/*	$OpenBSD$	*/
d4 1
a4 1
 * Copyright (c) 2004 Alexander Yurchenko <grange@@openbsd.org>
d37 1
a57 1

d60 9
a68 2
	int		ga_pin;
	u_int32_t	ga_mask;
d70 8
@


1.1.2.1
log
@Merge with the trunk
@
text
@@

