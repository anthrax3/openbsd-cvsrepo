head	1.18;
access;
symbols
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.2
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.10
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.8
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.24
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.22
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.20
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.18
	OPENBSD_5_0:1.16.0.16
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.14
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.12
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.8
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.10
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.6
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.4
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.2
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.15.0.8
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.6
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.4
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.2
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.13.0.8
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.6
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.8.0.6
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.4
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_8:1.6.0.12
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.10
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.8
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.6
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.8
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.6
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.4
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2016.05.17.23.43.47;	author bluhm;	state Exp;
branches;
next	1.17;
commitid	FQUHD8bvWBEOY9mu;

1.17
date	2013.09.29.12.56.31;	author kettenis;	state Exp;
branches;
next	1.16;

1.16
date	2008.01.23.16.37.55;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2006.01.01.11.59.40;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2005.12.30.18.08.12;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.23.16.51.12;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.23.28.01;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.15.01.20.04;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.04.01.23;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.52;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.04.17.04.30.49;	author aaron;	state Exp;
branches
	1.8.6.1;
next	1.7;

1.7
date	2001.03.01.20.54.33;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	98.06.17.14.58.34;	author mickey;	state Exp;
branches
	1.6.8.1;
next	1.5;

1.5
date	96.04.18.23.47.02;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.03.02.00.29.24;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.02.27.09.43.19;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.06.10.16;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.29;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.29;	author deraadt;	state Exp;
branches;
next	;

1.6.8.1
date	2001.05.14.22.23.01;	author niklas;	state Exp;
branches;
next	1.6.8.2;

1.6.8.2
date	2002.03.28.12.29.44;	author niklas;	state Exp;
branches;
next	1.6.8.3;

1.6.8.3
date	2003.06.07.11.02.28;	author ho;	state Exp;
branches;
next	1.6.8.4;

1.6.8.4
date	2004.02.19.10.56.13;	author niklas;	state Exp;
branches;
next	;

1.8.6.1
date	2002.06.11.03.42.15;	author art;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Allow sendsyslog(2) with LOG_CONS even when /dev/console has not
been opened during init(8).  Only log with cnwrite() if cn_devvp
exists, otherwise use cnputc() as fallback.  While there move extern
declarations to dev/cons.h.
input and OK deraadt@@
@
text
@/*	$OpenBSD: cons.h,v 1.17 2013/09/29 12:56:31 kettenis Exp $	*/
/*	$NetBSD: cons.h,v 1.14 1996/03/14 19:08:35 christos Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: cons.h 1.6 92/01/21$
 *
 *	@@(#)cons.h	8.1 (Berkeley) 6/10/93
 */

struct consdev {
				/* probe hardware and fill in consdev info */
	void	(*cn_probe)(struct consdev *);
				/* turn on as console */
	void	(*cn_init)(struct consdev *);
				/* kernel getchar interface */
	int	(*cn_getc)(dev_t);
				/* kernel putchar interface */
	void	(*cn_putc)(dev_t, int);
				/* turn on and off polling */
	void	(*cn_pollc)(dev_t, int);
				/* ring bell */
	void	(*cn_bell)(dev_t, u_int, u_int, u_int);
	dev_t	cn_dev;		/* major/minor of device */
	u_int	cn_pri;		/* picking order; the higher the better */
};

/* Values for cn_pri - policy for console selection. */
#define	CN_DEAD		0	/* Device does not exist. */
#define CN_LOWPRI	1	/* Device exists and is low priority. */
#define CN_MIDPRI	2	/* Device exists and is medium priority. */
#define CN_HIGHPRI	3	/* Device exists and is high priority. */
#define	CN_FORCED	4	/* Use this device. */

/* XXX */
#define	CONSMAJOR	0

#ifdef _KERNEL

extern	struct consdev constab[];
extern	struct consdev *cn_tab;
extern	struct tty *constty;
extern	struct vnode *cn_devvp;

struct knote;

void	cninit(void);
int	cnopen(dev_t, int, int, struct proc *);
int	cnclose(dev_t, int, int, struct proc *);
int	cnread(dev_t, struct uio *, int);
int	cnwrite(dev_t, struct uio *, int);
int	cnioctl(dev_t, u_long, caddr_t, int, struct proc *);
int	cnpoll(dev_t, int, struct proc *);
int	cnkqfilter(dev_t, struct knote *);
int	cngetc(void);
void	cnputc(int);
void	cnpollc(int);
void	cnbell(u_int, u_int, u_int);
void	cnrint(void);
void	nullcnpollc(dev_t, int);

/* console-specific types */
#define	dev_type_cnprobe(n)	void n(struct consdev *)
#define	dev_type_cninit(n)	void n(struct consdev *)
#define	dev_type_cngetc(n)	int n(dev_t)
#define	dev_type_cnputc(n)	void n(dev_t, int)
#define	dev_type_cnpollc(n)	void n(dev_t, int)
#define	dev_type_cnbell(n)	void n(dev_t, u_int, u_int, u_int)

#define	cons_decl(n) \
	dev_decl(n,cnprobe); dev_decl(n,cninit); dev_decl(n,cngetc); \
	dev_decl(n,cnputc); dev_decl(n,cnpollc); dev_decl(n,cnbell);

#define	cons_init(n) { \
	dev_init(1,n,cnprobe), dev_init(1,n,cninit), dev_init(1,n,cngetc), \
	dev_init(1,n,cnputc), dev_init(1,n,cnpollc), NULL, \
	NODEV, CN_DEAD }

#define cons_init_bell(n) { \
	dev_init(1,n,cnprobe), dev_init(1,n,cninit), dev_init(1,n,cngetc), \
	dev_init(1,n,cnputc), dev_init(1,n,cnpollc), dev_init(1,n,cnbell), \
	NODEV, CN_DEAD }

#endif
@


1.17
log
@Get rid of cnset().  It is only used on amd64/i386 and doesn't really do
anything useful there.  Switching from glass console to serial console is
already done by cninit(), and the reinitializaton of cn_tab by cnset()
breaks the conseleness checks in the wsdisplay code.

Tested on various amd64/i386 systems with both glass and serial console.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cons.h,v 1.16 2008/01/23 16:37:55 jsing Exp $	*/
d73 2
@


1.16
log
@Cleanup cn_pri. Change constants to more meaningful names, rather than
the hp300 related ones currently in use. CN_NORMAL becomes CN_LOWPRI,
CN_INTERNAL becomes CN_MIDPRI and CN_REMOTE becomes CN_HIGHPRI.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cons.h,v 1.15 2006/01/01 11:59:40 miod Exp $	*/
a76 1
int	cnset(dev_t);
@


1.15
log
@Let cons_init() and cons_init_bell() initialize the whole consdev structure,
thus removing the need for drivers to initialize cn_pri to CN_DEAD when
hardware probe fails.
@
text
@d1 1
a1 1
/*	$OpenBSD: cons.h,v 1.14 2005/12/30 18:08:12 miod Exp $	*/
d56 1
a56 1
	int	cn_pri;		/* picking order; the higher the better */
d59 6
a64 6
/* values for cn_pri - reflect our policy for console selection */
#define	CN_DEAD		0	/* device doesn't exist */
#define CN_NORMAL	1	/* device exists but is nothing special */
#define CN_INTERNAL	2	/* "internal" bit-mapped display */
#define CN_REMOTE	3	/* serial interface with remote bit set */
#define	CN_FORCED	4
@


1.14
log
@Introduce another console device priority level, CN_FORCED, which wins over
CN_REMOTE.
@
text
@d1 1
a1 1
/*	$OpenBSD: cons.h,v 1.13 2003/09/23 16:51:12 millert Exp $	*/
d106 2
a107 1
	dev_init(1,n,cnputc), dev_init(1,n,cnpollc) }
d111 2
a112 1
	dev_init(1,n,cnputc), dev_init(1,n,cnpollc), dev_init(1,n,cnbell) }
@


1.13
log
@Replace select backends with poll backends.  selscan() and pollscan()
now call the poll backend.  With this change we implement greater
poll(2) functionality instead of emulating it via the select backend.
Adapted from NetBSD and including some changes from FreeBSD.
Tested by many, deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: cons.h,v 1.12 2003/06/02 23:28:01 millert Exp $	*/
d56 1
a56 1
	int	cn_pri;		/* pecking order; the higher the better */
d64 1
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: cons.h,v 1.11 2002/03/15 01:20:04 millert Exp $	*/
d82 1
a82 1
int	cnselect(dev_t, int, struct proc *);
@


1.11
log
@Cosmetic changes only, primarily making comments line up nicely after the
__P removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: cons.h,v 1.10 2002/03/14 04:01:23 millert Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.10
log
@Fix ugliness caused by __P removing regexp
@
text
@d1 1
a1 1
/*	$OpenBSD: cons.h,v 1.9 2002/03/14 01:26:52 millert Exp $	*/
d47 1
d49 1
a49 1
				/* probe hardware and fill in consdev info */
d51 1
a51 1
				/* turn on as console */
d53 1
a53 1
				/* kernel getchar interface */
d55 1
a55 1
				/* kernel putchar interface */
d57 1
a57 1
				/* turn on and off polling */
a58 1
				/* ring bell */
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: cons.h,v 1.8 2001/04/17 04:30:49 aaron Exp $	*/
d47 12
a58 6
	void	(*cn_probe)	/* probe hardware and fill in consdev info */(struct consdev *);
	void	(*cn_init)	/* turn on as console */(struct consdev *);
	int	(*cn_getc)	/* kernel getchar interface */(dev_t);
	void	(*cn_putc)	/* kernel putchar interface */(dev_t, int);
	void	(*cn_pollc)	/* turn on and off polling */(dev_t, int);
	void	(*cn_bell)	/* ring bell */(dev_t, u_int, u_int, u_int);
@


1.8
log
@Implement cnbell(), an optional entrypoint that rings the console bell; from
NetBSD. deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cons.h,v 1.7 2001/03/01 20:54:33 provos Exp $	*/
d47 6
a52 12
	void	(*cn_probe)	/* probe hardware and fill in consdev info */
		    __P((struct consdev *));
	void	(*cn_init)	/* turn on as console */
		    __P((struct consdev *));
	int	(*cn_getc)	/* kernel getchar interface */
		    __P((dev_t));
	void	(*cn_putc)	/* kernel putchar interface */
		    __P((dev_t, int));
	void	(*cn_pollc)	/* turn on and off polling */
		    __P((dev_t, int));
	void	(*cn_bell)	/* ring bell */
		    __P((dev_t, u_int, u_int, u_int));
d73 15
a87 15
void	cninit __P((void));
int	cnset __P((dev_t));
int	cnopen __P((dev_t, int, int, struct proc *));
int	cnclose __P((dev_t, int, int, struct proc *));
int	cnread __P((dev_t, struct uio *, int));
int	cnwrite __P((dev_t, struct uio *, int));
int	cnioctl __P((dev_t, u_long, caddr_t, int, struct proc *));
int	cnselect __P((dev_t, int, struct proc *));
int	cnkqfilter __P((dev_t, struct knote *));
int	cngetc __P((void));
void	cnputc __P((int));
void	cnpollc __P((int));
void	cnbell __P((u_int, u_int, u_int));
void	cnrint __P((void));
void	nullcnpollc __P((dev_t, int));
d90 6
a95 6
#define	dev_type_cnprobe(n)	void n __P((struct consdev *))
#define	dev_type_cninit(n)	void n __P((struct consdev *))
#define	dev_type_cngetc(n)	int n __P((dev_t))
#define	dev_type_cnputc(n)	void n __P((dev_t, int))
#define	dev_type_cnpollc(n)	void n __P((dev_t, int))
#define	dev_type_cnbell(n)	void n __P((dev_t, u_int, u_int, u_int))
@


1.8.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cons.h,v 1.8 2001/04/17 04:30:49 aaron Exp $	*/
d47 12
a58 12
				/* probe hardware and fill in consdev info */
	void	(*cn_probe)(struct consdev *);
				/* turn on as console */
	void	(*cn_init)(struct consdev *);
				/* kernel getchar interface */
	int	(*cn_getc)(dev_t);
				/* kernel putchar interface */
	void	(*cn_putc)(dev_t, int);
				/* turn on and off polling */
	void	(*cn_pollc)(dev_t, int);
				/* ring bell */
	void	(*cn_bell)(dev_t, u_int, u_int, u_int);
d79 15
a93 15
void	cninit(void);
int	cnset(dev_t);
int	cnopen(dev_t, int, int, struct proc *);
int	cnclose(dev_t, int, int, struct proc *);
int	cnread(dev_t, struct uio *, int);
int	cnwrite(dev_t, struct uio *, int);
int	cnioctl(dev_t, u_long, caddr_t, int, struct proc *);
int	cnselect(dev_t, int, struct proc *);
int	cnkqfilter(dev_t, struct knote *);
int	cngetc(void);
void	cnputc(int);
void	cnpollc(int);
void	cnbell(u_int, u_int, u_int);
void	cnrint(void);
void	nullcnpollc(dev_t, int);
d96 6
a101 6
#define	dev_type_cnprobe(n)	void n(struct consdev *)
#define	dev_type_cninit(n)	void n(struct consdev *)
#define	dev_type_cngetc(n)	int n(dev_t)
#define	dev_type_cnputc(n)	void n(dev_t, int)
#define	dev_type_cnpollc(n)	void n(dev_t, int)
#define	dev_type_cnbell(n)	void n(dev_t, u_int, u_int, u_int)
@


1.7
log
@port kqueue changes from freebsd, plus all required openbsd glue.
okay deraadt@@, millert@@
from jlemon@@freebsd.org:
extend kqueue down to the device layer, backwards compatible approach
suggested by peter@@freebsd.org
@
text
@d1 1
a1 1
/*	$OpenBSD: cons.h,v 1.6 1998/06/17 14:58:34 mickey Exp $	*/
d57 2
d91 1
d101 1
d105 1
a105 1
	dev_decl(n,cnputc); dev_decl(n,cnpollc)
d110 4
@


1.6
log
@import cnset() from libsa
@
text
@d1 1
a1 1
/*	$OpenBSD: cons.h,v 1.5 1996/04/18 23:47:02 niklas Exp $	*/
d75 2
d85 1
@


1.6.8.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: cons.h,v 1.8 2001/04/17 04:30:49 aaron Exp $	*/
a56 2
	void	(*cn_bell)	/* ring bell */
		    __P((dev_t, u_int, u_int, u_int));
a74 2
struct knote;

a82 1
int	cnkqfilter __P((dev_t, struct knote *));
a85 1
void	cnbell __P((u_int, u_int, u_int));
a94 1
#define	dev_type_cnbell(n)	void n __P((dev_t, u_int, u_int, u_int))
d98 1
a98 1
	dev_decl(n,cnputc); dev_decl(n,cnpollc); dev_decl(n,cnbell);
a102 4

#define cons_init_bell(n) { \
	dev_init(1,n,cnprobe), dev_init(1,n,cninit), dev_init(1,n,cngetc), \
	dev_init(1,n,cnputc), dev_init(1,n,cnpollc), dev_init(1,n,cnbell) }
@


1.6.8.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 12
a58 12
				/* probe hardware and fill in consdev info */
	void	(*cn_probe)(struct consdev *);
				/* turn on as console */
	void	(*cn_init)(struct consdev *);
				/* kernel getchar interface */
	int	(*cn_getc)(dev_t);
				/* kernel putchar interface */
	void	(*cn_putc)(dev_t, int);
				/* turn on and off polling */
	void	(*cn_pollc)(dev_t, int);
				/* ring bell */
	void	(*cn_bell)(dev_t, u_int, u_int, u_int);
d79 15
a93 15
void	cninit(void);
int	cnset(dev_t);
int	cnopen(dev_t, int, int, struct proc *);
int	cnclose(dev_t, int, int, struct proc *);
int	cnread(dev_t, struct uio *, int);
int	cnwrite(dev_t, struct uio *, int);
int	cnioctl(dev_t, u_long, caddr_t, int, struct proc *);
int	cnselect(dev_t, int, struct proc *);
int	cnkqfilter(dev_t, struct knote *);
int	cngetc(void);
void	cnputc(int);
void	cnpollc(int);
void	cnbell(u_int, u_int, u_int);
void	cnrint(void);
void	nullcnpollc(dev_t, int);
d96 6
a101 6
#define	dev_type_cnprobe(n)	void n(struct consdev *)
#define	dev_type_cninit(n)	void n(struct consdev *)
#define	dev_type_cngetc(n)	int n(dev_t)
#define	dev_type_cnputc(n)	void n(dev_t, int)
#define	dev_type_cnpollc(n)	void n(dev_t, int)
#define	dev_type_cnbell(n)	void n(dev_t, u_int, u_int, u_int)
@


1.6.8.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cons.h,v 1.6.8.2 2002/03/28 12:29:44 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.6.8.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d82 1
a82 1
int	cnpoll(dev_t, int, struct proc *);
@


1.5
log
@NetBSD 960317 merge
@
text
@d1 1
a1 1
/*	$OpenBSD: cons.h,v 1.4 1996/03/02 00:29:24 niklas Exp $	*/
d76 1
@


1.4
log
@From NetBSD: sync with 960217 sources
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: cons.h,v 1.13 1996/02/04 02:04:17 christos Exp $	*/
d84 2
@


1.3
log
@From NetBSD: update to 960217 sources
@
text
@@


1.2
log
@from netbsd; fix definition of nullcnpollc, and add a prototype for it
@
text
@d1 2
a2 1
/*	$NetBSD: cons.h,v 1.12 1995/11/25 00:03:41 cgd Exp $	*/
d83 1
a83 1
int	cnputc __P((int));
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: cons.h,v 1.11 1995/04/24 21:34:04 gwr Exp $	*/
d83 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
