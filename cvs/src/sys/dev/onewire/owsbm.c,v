head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.8
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.6
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.9.0.4
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.20
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.18
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.14
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.12
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.10
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.8
	OPENBSD_5_0:1.8.0.6
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.4
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.4.0.6
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.4
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.1.0.2
	OPENBSD_4_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2015.03.14.03.38.48;	author jsg;	state Exp;
branches;
next	1.9;
commitid	p4LJxGKbi0BU2cG6;

1.9
date	2014.09.14.14.17.25;	author jsg;	state Exp;
branches;
next	1.8;
commitid	uzzBR7hz9ncd4O6G;

1.8
date	2010.07.08.07.19.54;	author jasper;	state Exp;
branches;
next	1.7;

1.7
date	2009.10.13.19.33.16;	author pirofti;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.26.15.07.49;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.25.00.27.09;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2007.06.24.05.34.35;	author dlg;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.01.23.35.00;	author cnst;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.22.16.55.31;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2007.02.28.21.54.43;	author grange;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: owsbm.c,v 1.9 2014/09/14 14:17:25 jsg Exp $	*/

/*
 * Copyright (c) 2007 Aaron Linville <aaron@@linville.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * 1-Wire Smart Battery Monitor family type device driver.
 * Provides on-board temperature, an A/D converter for voltage/current,
 * current accumulator, elapsed time metter, and 40 bytes of nonvolatile
 * memory.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/rwlock.h>
#include <sys/sensors.h>

#include <dev/onewire/onewiredevs.h>
#include <dev/onewire/onewirereg.h>
#include <dev/onewire/onewirevar.h>

/* Commands */
#define	DSSBM_CMD_READ_SCRATCHPAD	0xbe
#define	DSSBM_CMD_WRITE_SCRATCHPAD	0x4e
#define	DSSBM_CMD_COPY_SCRATCHPAD	0x48

#define	DSSBM_CMD_RECALL_MEMORY		0xb8

#define	DSSBM_CMD_CONVERT_T		0x44
#define	DSSBM_CMD_CONVERT_V		0xb4	

/* Scratchpad layout */
#define DS2438_SP_STATUS		0
#define DS2438_SP_TEMP_LSB		1
#define DS2438_SP_TEMP_MSB		2
#define DS2438_SP_VOLT_LSB		3
#define DS2438_SP_VOLT_MSB		4
#define DS2438_SP_CURRENT_LSB		5
#define DS2438_SP_CURRENT_MSB		6
#define DS2438_SP_THRESHOLD		7
#define DS2438_SP_CRC			8

struct owsbm_softc {
	struct device		sc_dev;

	void *			sc_onewire;
	u_int64_t		sc_rom;

	struct ksensordev	sc_sensordev;

	struct ksensor		sc_temp;
	struct ksensor		sc_voltage_vdd; /* Battery, AD = 1*/
	struct ksensor		sc_voltage_vad; /* General purpose, AD = 0 */
	struct ksensor		sc_voltage_cr; /* Current Register */

	struct sensor_task	*sc_sensortask;

	struct rwlock		sc_lock;
};

int	owsbm_match(struct device *, void *, void *);
void	owsbm_attach(struct device *, struct device *, void *);
int	owsbm_detach(struct device *, int);
int	owsbm_activate(struct device *, int);

void	owsbm_update(void *);

struct cfattach owsbm_ca = {
	sizeof(struct owsbm_softc),
	owsbm_match,
	owsbm_attach,
	owsbm_detach,
	owsbm_activate
};

struct cfdriver owsbm_cd = {
	NULL, "owsbm", DV_DULL
};

static const struct onewire_matchfam owsbm_fams[] = {
	{ ONEWIRE_FAMILY_DS2438 }
};

int
owsbm_match(struct device *parent, void *match, void *aux)
{
	return (onewire_matchbyfam(aux, owsbm_fams, nitems(owsbm_fams)));
}

void
owsbm_attach(struct device *parent, struct device *self, void *aux)
{
	struct owsbm_softc *sc = (struct owsbm_softc *)self;
	struct onewire_attach_args *oa = aux;

	sc->sc_onewire = oa->oa_onewire;
	sc->sc_rom = oa->oa_rom;

	/* Initialize temp sensor */
	strlcpy(sc->sc_sensordev.xname, sc->sc_dev.dv_xname,
	    sizeof(sc->sc_sensordev.xname));
	sc->sc_temp.type = SENSOR_TEMP;
	snprintf(sc->sc_temp.desc, sizeof(sc->sc_temp.desc), "sn %012llx",
	    ONEWIRE_ROM_SN(oa->oa_rom));
	sensor_attach(&sc->sc_sensordev, &sc->sc_temp);

	/* Initialize voltage sensor */
	sc->sc_voltage_vdd.type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_voltage_vdd.desc, "VDD", sizeof(sc->sc_voltage_vdd.desc));
	sensor_attach(&sc->sc_sensordev, &sc->sc_voltage_vdd);

	/* Initialize voltage sensor */
	sc->sc_voltage_vad.type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_voltage_vad.desc, "VAD", sizeof(sc->sc_voltage_vad.desc));
	sensor_attach(&sc->sc_sensordev, &sc->sc_voltage_vad);

	/* Initialize the current sensor */
	sc->sc_voltage_cr.type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_voltage_cr.desc, "CR", sizeof(sc->sc_voltage_cr.desc));
	sensor_attach(&sc->sc_sensordev, &sc->sc_voltage_cr);

	sc->sc_sensortask = sensor_task_register(sc, owsbm_update, 10);
	if (sc->sc_sensortask == NULL) {
		printf(": unable to register update task\n");
		return;
	}

	sensordev_install(&sc->sc_sensordev);

	rw_init(&sc->sc_lock, sc->sc_dev.dv_xname);
	printf("\n");
}

int
owsbm_detach(struct device *self, int flags)
{
	struct owsbm_softc *sc = (struct owsbm_softc *)self;

	rw_enter_write(&sc->sc_lock);
	sensordev_deinstall(&sc->sc_sensordev);
	if (sc->sc_sensortask != NULL)
		sensor_task_unregister(sc->sc_sensortask);
	rw_exit_write(&sc->sc_lock);

	return (0);
}

int
owsbm_activate(struct device *self, int act)
{
	return (0);
}

void
owsbm_update(void *arg)
{
	struct owsbm_softc *sc = arg;
	u_int8_t data[9];

	rw_enter_write(&sc->sc_lock);
	onewire_lock(sc->sc_onewire, 0);
	if (onewire_reset(sc->sc_onewire) != 0)
		goto done;

	onewire_matchrom(sc->sc_onewire, sc->sc_rom);
	onewire_write_byte(sc->sc_onewire, DSSBM_CMD_CONVERT_T);
	if (onewire_reset(sc->sc_onewire) != 0)
		goto done;
	
	onewire_matchrom(sc->sc_onewire, sc->sc_rom);
	onewire_write_byte(sc->sc_onewire, DSSBM_CMD_CONVERT_V);
	if (onewire_reset(sc->sc_onewire) != 0)
		goto done;

	onewire_matchrom(sc->sc_onewire, sc->sc_rom);
	/* Issue Recall Memory page 00h cmd */
	onewire_write_byte(sc->sc_onewire, DSSBM_CMD_RECALL_MEMORY);
	onewire_write_byte(sc->sc_onewire, 0);

	if (onewire_reset(sc->sc_onewire) != 0)
		goto done;

	onewire_matchrom(sc->sc_onewire, sc->sc_rom);
	/* Read page 0 of Memory Map from Scratchpad */
	onewire_write_byte(sc->sc_onewire, DSSBM_CMD_READ_SCRATCHPAD);
	onewire_write_byte(sc->sc_onewire, 0);
	onewire_read_block(sc->sc_onewire, data, 9);
	if (onewire_crc(data, 8) == data[DS2438_SP_CRC]) {
		sc->sc_temp.value = 273150000 +
		     (int)(((u_int16_t)data[DS2438_SP_TEMP_MSB] << 5) |
		     ((u_int16_t)data[DS2438_SP_TEMP_LSB] >> 3)) * 31250;
		sc->sc_voltage_vdd.value =
		     (int)(((u_int16_t)data[DS2438_SP_VOLT_MSB] << 8) |
		     data[DS2438_SP_VOLT_LSB]) * 10000;

		sc->sc_voltage_cr.value =
		    (int)(((u_int16_t)data[DS2438_SP_CURRENT_MSB] << 8) |
		    data[DS2438_SP_CURRENT_LSB]) * 244;
	}

	/* Reconfigure DS2438 to measure VAD */

	if (onewire_reset(sc->sc_onewire) != 0)
		goto done;

	onewire_matchrom(sc->sc_onewire, sc->sc_rom);
	onewire_write_byte(sc->sc_onewire, DSSBM_CMD_WRITE_SCRATCHPAD);
	onewire_write_byte(sc->sc_onewire, 0);
	onewire_write_byte(sc->sc_onewire, 0x7); /* AD = 0 */

	if (onewire_reset(sc->sc_onewire) != 0)
		goto done;

	onewire_matchrom(sc->sc_onewire, sc->sc_rom);
	onewire_write_byte(sc->sc_onewire, DSSBM_CMD_CONVERT_V);
	if (onewire_reset(sc->sc_onewire) != 0)
		goto done;

	onewire_matchrom(sc->sc_onewire, sc->sc_rom);
	/* Issue Recall Memory page 00h cmd */
	onewire_write_byte(sc->sc_onewire, DSSBM_CMD_RECALL_MEMORY);
	onewire_write_byte(sc->sc_onewire, 0);

	if (onewire_reset(sc->sc_onewire) != 0)
		goto done;

	onewire_matchrom(sc->sc_onewire, sc->sc_rom);
	onewire_write_byte(sc->sc_onewire, DSSBM_CMD_READ_SCRATCHPAD);
	onewire_write_byte(sc->sc_onewire, 0);
	onewire_read_block(sc->sc_onewire, data, 9);
	if (onewire_crc(data, 8) == data[8]) {
		sc->sc_voltage_vad.value =
		    (int)(((u_int16_t)data[DS2438_SP_VOLT_MSB] << 8) |
		    data[DS2438_SP_VOLT_LSB]) * 10000;
	}

	/* Reconfigure back DS2438 to measure VDD (default) */

	if (onewire_reset(sc->sc_onewire) != 0)
		goto done;

	onewire_matchrom(sc->sc_onewire, sc->sc_rom);
	onewire_write_byte(sc->sc_onewire, DSSBM_CMD_WRITE_SCRATCHPAD);
	onewire_write_byte(sc->sc_onewire, 0);
	onewire_write_byte(sc->sc_onewire, 0xf); /* AD = 1 */
	onewire_reset(sc->sc_onewire);

done:
	onewire_unlock(sc->sc_onewire);
	rw_exit_write(&sc->sc_lock);
}
@


1.9
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/*	$OpenBSD: owsbm.c,v 1.8 2010/07/08 07:19:54 jasper Exp $	*/
a28 1
#include <sys/kernel.h>
@


1.8
log
@- use nitems() where applicable

ok grange@@
@
text
@d1 1
a1 1
/*	$OpenBSD: owsbm.c,v 1.7 2009/10/13 19:33:16 pirofti Exp $	*/
a29 1
#include <sys/proc.h>
@


1.7
log
@Get rid of devact enum, substitute it with an int and coresponding defines.

This is needed for the addition of further suspend/resume actions.

Okay deraadt@@, marco@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: owsbm.c,v 1.6 2009/01/26 15:07:49 kettenis Exp $	*/
d103 1
a103 2
	return (onewire_matchbyfam(aux, owsbm_fams,
	    sizeof(owsbm_fams) /sizeof(owsbm_fams[0])));
@


1.6
log
@Unify error message.

ok grange@@, oga@@, todd@@
@
text
@d1 1
a1 1
/*	$OpenBSD: owsbm.c,v 1.5 2008/10/25 00:27:09 deraadt Exp $	*/
d80 1
a80 1
int	owsbm_activate(struct device *, enum devact);
d166 1
a166 1
owsbm_activate(struct device *self, enum devact act)
@


1.5
log
@put the serial number into the name of the devices (for sysctl), because
Joerg Goltermann has so many of them and has convinced me that he cannot
tell them apart.
ok grange cnst henning
@
text
@d1 1
a1 1
/*	$OpenBSD: owsbm.c,v 1.4 2007/06/24 05:34:35 dlg Exp $	*/
d141 1
a141 1
		printf(": unable to register owsbm update task\n");
@


1.4
log
@rework sensor tasks to use the kernels generic workq rather than a special
kernel thread of its own. the api has changed (which will be fixed in the
manpage shortly) so all the users of sensor tasks that i can find have
been fixed too.

noone tested, so its going in to force people to run with it.
"put it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: owsbm.c,v 1.3 2007/06/01 23:35:00 cnst Exp $	*/
d120 2
@


1.3
log
@remove strings from sensor.desc which are now present in sysctl variable names; ok grange@@
@
text
@d1 1
a1 1
/*	$OpenBSD: owsbm.c,v 1.2 2007/03/22 16:55:31 deraadt Exp $	*/
d72 2
d137 2
a138 1
	if (sensor_task_register(sc, owsbm_update, 10)) {
d156 2
a157 1
	sensor_task_unregister(sc);
@


1.2
log
@split userland & kernel struct sensor/sensordev so that the addition
of new fields in the future is less disruptive.  This is done similar
to how struct proc is handled for ps(1).  ok jmc (man page changes)
tested fkr simon, and more suggestions from millert
@
text
@d1 1
a1 1
/*	$OpenBSD: owsbm.c,v 1.1 2007/02/28 21:54:43 grange Exp $	*/
a117 1
	strlcpy(sc->sc_temp.desc, "Temp", sizeof(sc->sc_temp.desc));
@


1.1
log
@Add Smart Battery Monitor device driver. Provided by
Aaron Linville <aaron@@linville.org> in PR 5398.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d65 1
a65 1
	struct sensordev	sc_sensordev;
d67 4
a70 4
	struct sensor		sc_temp;
	struct sensor		sc_voltage_vdd; /* Battery, AD = 1*/
	struct sensor		sc_voltage_vad; /* General purpose, AD = 0 */
	struct sensor		sc_voltage_cr; /* Current Register */
@

