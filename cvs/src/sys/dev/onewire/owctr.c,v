head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.10
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.8
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.18
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.14
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.12
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.10
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4;
locks; strict;
comment	@ * @;


1.8
date	2015.08.27.05.49.23;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	k4adwfj9tN8Ty9be;

1.7
date	2015.03.14.03.38.48;	author jsg;	state Exp;
branches;
next	1.6;
commitid	p4LJxGKbi0BU2cG6;

1.6
date	2014.09.14.14.17.25;	author jsg;	state Exp;
branches;
next	1.5;
commitid	uzzBR7hz9ncd4O6G;

1.5
date	2014.07.12.18.48.51;	author tedu;	state Exp;
branches;
next	1.4;
commitid	OBNa5kfxQ2UXoiIw;

1.4
date	2010.07.19.23.44.09;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.08.07.19.54;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.07.16.15.53;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.06.19.59.59;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@simple size for free()
@
text
@/*	$OpenBSD: owctr.c,v 1.7 2015/03/14 03:38:48 jsg Exp $	*/
/*
 * Copyright (c) 2010 John L. Scarfone <john@@scarfone.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * DS2423 1-Wire 4kbit SRAM with Counter family type device driver.
 * Provides 4096 bits of SRAM and four 32-bit, read-only counters.
 * This driver provides access to the two externally triggered
 * counters.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/malloc.h>
#include <sys/rwlock.h>
#include <sys/sensors.h>

#include <dev/onewire/onewiredevs.h>
#include <dev/onewire/onewirereg.h>
#include <dev/onewire/onewirevar.h>

/* Commands */
#define	DSCTR_CMD_READ_MEMCOUNTER	0xa5

/* External counter banks */
#define DS2423_COUNTER_BANK_A		0x1c0
#define DS2423_COUNTER_BANK_B		0x1e0

/* Buffer offsets */
#define DS2423_COUNTER_BUF_COUNTER	35
#define DS2423_COUNTER_BUF_CRC		43

#define DS2423_COUNTER_BUFSZ		45

struct owctr_softc {
	struct device		sc_dev;

	void *			sc_onewire;
	u_int64_t		sc_rom;

	struct ksensordev	sc_sensordev;

	struct ksensor		sc_counterA;
	struct ksensor		sc_counterB;

	struct sensor_task	*sc_sensortask;

	struct rwlock		sc_lock;
};

int	owctr_match(struct device *, void *, void *);
void	owctr_attach(struct device *, struct device *, void *);
int	owctr_detach(struct device *, int);
int	owctr_activate(struct device *, int);

void	owctr_update(void *);
void	owctr_update_counter(void *, int);

struct cfattach owctr_ca = {
	sizeof(struct owctr_softc),
	owctr_match,
	owctr_attach,
	owctr_detach,
	owctr_activate
};

struct cfdriver owctr_cd = {
	NULL, "owctr", DV_DULL
};

static const struct onewire_matchfam owctr_fams[] = {
	{ ONEWIRE_FAMILY_DS2423 }
};

int
owctr_match(struct device *parent, void *match, void *aux)
{
	return (onewire_matchbyfam(aux, owctr_fams, nitems(owctr_fams)));
}

void
owctr_attach(struct device *parent, struct device *self, void *aux)
{
	struct owctr_softc *sc = (struct owctr_softc *)self;
	struct onewire_attach_args *oa = aux;

	sc->sc_onewire = oa->oa_onewire;
	sc->sc_rom = oa->oa_rom;

	/* Initialize counter sensors */
	strlcpy(sc->sc_sensordev.xname, sc->sc_dev.dv_xname,
		sizeof(sc->sc_sensordev.xname));
	sc->sc_counterA.type = SENSOR_INTEGER;
	snprintf(sc->sc_counterA.desc, sizeof(sc->sc_counterA.desc),
		"Counter A sn %012llx", ONEWIRE_ROM_SN(oa->oa_rom));
	sensor_attach(&sc->sc_sensordev, &sc->sc_counterA);
	sc->sc_counterB.type = SENSOR_INTEGER;
	snprintf(sc->sc_counterB.desc, sizeof(sc->sc_counterB.desc),
		"Counter B sn %012llx", ONEWIRE_ROM_SN(oa->oa_rom));
	sensor_attach(&sc->sc_sensordev, &sc->sc_counterB);

	sc->sc_sensortask = sensor_task_register(sc, owctr_update, 10);
	if (sc->sc_sensortask == NULL) {
		printf(": unable to register update task\n");
		return;
	}

	sensordev_install(&sc->sc_sensordev);

	rw_init(&sc->sc_lock, sc->sc_dev.dv_xname);
	printf("\n");
}

int
owctr_detach(struct device *self, int flags)
{
	struct owctr_softc *sc = (struct owctr_softc *)self;

	rw_enter_write(&sc->sc_lock);
	sensordev_deinstall(&sc->sc_sensordev);
	if (sc->sc_sensortask != NULL)
		sensor_task_unregister(sc->sc_sensortask);
	rw_exit_write(&sc->sc_lock);

	return (0);
}

int
owctr_activate(struct device *self, int act)
{
	return (0);
}

void
owctr_update(void *arg)
{
	owctr_update_counter(arg, DS2423_COUNTER_BANK_A);
	owctr_update_counter(arg, DS2423_COUNTER_BANK_B);
}

void
owctr_update_counter(void *arg, int bank)
{
	struct owctr_softc *sc = arg;
	u_int32_t counter;
	u_int16_t crc;
	u_int8_t *buf;

	rw_enter_write(&sc->sc_lock);
	onewire_lock(sc->sc_onewire, 0);
	if (onewire_reset(sc->sc_onewire) != 0)
		goto done;

	buf = malloc(DS2423_COUNTER_BUFSZ, M_DEVBUF, M_NOWAIT);
	if (buf == NULL) {
		printf("%s: malloc() failed\n", sc->sc_dev.dv_xname);
		goto done;
	}

	onewire_matchrom(sc->sc_onewire, sc->sc_rom);
	buf[0] = DSCTR_CMD_READ_MEMCOUNTER;
	buf[1] = bank;
	buf[2] = bank >> 8;
	onewire_write_byte(sc->sc_onewire, buf[0]);
	onewire_write_byte(sc->sc_onewire, buf[1]);
	onewire_write_byte(sc->sc_onewire, buf[2]);
	onewire_read_block(sc->sc_onewire, &buf[3], DS2423_COUNTER_BUFSZ-3);

	crc = onewire_crc16(buf, DS2423_COUNTER_BUFSZ-2);
	crc ^= buf[DS2423_COUNTER_BUF_CRC]
		| (buf[DS2423_COUNTER_BUF_CRC+1] << 8);
	if ( crc != 0xffff) {
		printf("%s: invalid CRC\n", sc->sc_dev.dv_xname);
		if (bank == DS2423_COUNTER_BANK_A) {
			sc->sc_counterA.value = 0;
			sc->sc_counterA.status = SENSOR_S_UNKNOWN;
			sc->sc_counterA.flags |= SENSOR_FUNKNOWN;
		} else {
			sc->sc_counterB.value = 0;
			sc->sc_counterB.status = SENSOR_S_UNKNOWN;
			sc->sc_counterB.flags |= SENSOR_FUNKNOWN;
		}
	} else {
		counter = buf[DS2423_COUNTER_BUF_COUNTER]
			| (buf[DS2423_COUNTER_BUF_COUNTER+1] << 8)
			| (buf[DS2423_COUNTER_BUF_COUNTER+2] << 16)
			| (buf[DS2423_COUNTER_BUF_COUNTER+3] << 24);
		if (bank == DS2423_COUNTER_BANK_A) {
			sc->sc_counterA.value = counter;
			sc->sc_counterA.status = SENSOR_S_UNSPEC;
			sc->sc_counterA.flags &= ~SENSOR_FUNKNOWN;
		} else {
			sc->sc_counterB.value = counter;
			sc->sc_counterB.status = SENSOR_S_UNSPEC;
			sc->sc_counterB.flags &= ~SENSOR_FUNKNOWN;
		}
	}

	onewire_reset(sc->sc_onewire);
	free(buf, M_DEVBUF, DS2423_COUNTER_BUFSZ);

done:
	onewire_unlock(sc->sc_onewire);
	rw_exit_write(&sc->sc_lock);
}
@


1.7
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: owctr.c,v 1.6 2014/09/14 14:17:25 jsg Exp $	*/
d214 1
a214 1
	free(buf, M_DEVBUF, 0);
@


1.6
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/*	$OpenBSD: owctr.c,v 1.5 2014/07/12 18:48:51 tedu Exp $	*/
a27 1
#include <sys/kernel.h>
@


1.5
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: owctr.c,v 1.4 2010/07/19 23:44:09 deraadt Exp $	*/
a29 1
#include <sys/proc.h>
@


1.4
log
@just use a buffer and make onewire_crc16() operate like onewire_crc()
from j0@@cox.net (author of owctr)
@
text
@d1 1
a1 1
/*	$OpenBSD: owctr.c,v 1.3 2010/07/08 07:19:54 jasper Exp $	*/
d216 1
a216 1
	free(buf, M_DEVBUF);
@


1.3
log
@- use nitems() where applicable

ok grange@@
@
text
@d1 1
a1 1
/*	$OpenBSD: owctr.c,v 1.2 2010/07/07 16:15:53 deraadt Exp $	*/
d29 1
d45 6
d163 1
a163 2
	int data;
	int i;
d170 6
d177 12
a188 34
	onewire_write_byte(sc->sc_onewire, DSCTR_CMD_READ_MEMCOUNTER);
	crc = onewire_crc16(0, DSCTR_CMD_READ_MEMCOUNTER);
	onewire_write_byte(sc->sc_onewire, bank);
	crc = onewire_crc16(crc, bank);
	onewire_write_byte(sc->sc_onewire, bank >> 8);
	crc = onewire_crc16(crc, bank >> 8);
	for (i=0; i<32; ++i)
	{
		data = onewire_read_byte(sc->sc_onewire);
		crc = onewire_crc16(crc, data);
	}
	data = onewire_read_byte(sc->sc_onewire);
	crc = onewire_crc16(crc, data);
	counter = data;
	data = onewire_read_byte(sc->sc_onewire);
	crc = onewire_crc16(crc, data);
	counter |= data << 8;
	data = onewire_read_byte(sc->sc_onewire);
	crc = onewire_crc16(crc, data);
	counter |= data << 16;
	data = onewire_read_byte(sc->sc_onewire);
	crc = onewire_crc16(crc, data);
	counter |= data << 24;
	for (i=0; i<4; ++i)
	{
		onewire_read_byte(sc->sc_onewire);
		crc = onewire_crc16(crc, data);
	}
	data = onewire_read_byte(sc->sc_onewire);
	crc ^= data;
	data = onewire_read_byte(sc->sc_onewire);
	crc ^= data << 8;
	if ( crc != 0xffff)
	{
d194 1
a194 3
		}
		else
		{
d199 6
a204 5
	}
	else
	{
		if (bank == DS2423_COUNTER_BANK_A)
		{
d208 1
a208 3
		}
		else
		{
d214 1
d216 1
@


1.2
log
@tag it
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d87 1
a87 2
	return (onewire_matchbyfam(aux, owctr_fams,
		sizeof(owctr_fams) /sizeof(owctr_fams[0])));
@


1.1
log
@one wire counter driver 2nd rev, from John L. Scarfone" <j0@@cox.net> PR 6422
ok miod
@
text
@d1 1
@

