head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.8
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.4
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.20
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.18
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.14
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.12
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.10
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.8
	OPENBSD_5_0:1.15.0.6
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.4
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.13.0.6
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.9.0.4
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.16
date	2014.09.14.14.17.25;	author jsg;	state Exp;
branches;
next	1.15;
commitid	uzzBR7hz9ncd4O6G;

1.15
date	2010.07.08.07.19.54;	author jasper;	state Exp;
branches;
next	1.14;

1.14
date	2009.10.13.19.33.16;	author pirofti;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.18.09.12.04;	author grange;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.17.20.30.27;	author grange;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.26.18.17.25;	author todd;	state Exp;
branches;
next	1.10;

1.10
date	2008.10.25.00.27.09;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2007.11.28.18.26.11;	author todd;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.24.05.34.35;	author dlg;	state Exp;
branches;
next	1.7;

1.7
date	2007.03.22.16.55.31;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.12.23.17.46.39;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2006.12.20.14.46.59;	author grange;	state Exp;
branches;
next	1.4;

1.4
date	2006.10.01.11.43.40;	author grange;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.01.08.09.04;	author grange;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.23.06.27.11;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.04.16.27.03;	author grange;	state Exp;
branches;
next	;


desc
@@


1.16
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@/*	$OpenBSD: owtemp.c,v 1.15 2010/07/08 07:19:54 jasper Exp $	*/

/*
 * Copyright (c) 2006, 2009 Alexander Yurchenko <grange@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * 1-Wire temperature family type device driver.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/rwlock.h>
#include <sys/sensors.h>

#include <dev/onewire/onewiredevs.h>
#include <dev/onewire/onewirereg.h>
#include <dev/onewire/onewirevar.h>

/* Commands */
#define DS1920_CMD_CONVERT		0x44
#define DS1920_CMD_READ_SCRATCHPAD	0xbe

/* Scratchpad layout */
#define DS1920_SP_TEMP_LSB		0
#define DS1920_SP_TEMP_MSB		1
#define DS1920_SP_TH			2
#define DS1920_SP_TL			3
#define DS18B20_SP_CONFIG		4
#define DS1920_SP_COUNT_REMAIN		6
#define DS1920_SP_COUNT_PERC		7
#define DS1920_SP_CRC			8

struct owtemp_softc {
	struct device		sc_dev;

	void *			sc_onewire;
	u_int64_t		sc_rom;

	struct ksensor		sc_sensor;
	struct ksensordev	sc_sensordev;
	struct sensor_task	*sc_sensortask;
	struct rwlock		sc_lock;
};

int	owtemp_match(struct device *, void *, void *);
void	owtemp_attach(struct device *, struct device *, void *);
int	owtemp_detach(struct device *, int);
int	owtemp_activate(struct device *, int);

void	owtemp_update(void *);

struct cfattach owtemp_ca = {
	sizeof(struct owtemp_softc),
	owtemp_match,
	owtemp_attach,
	owtemp_detach,
	owtemp_activate
};

struct cfdriver owtemp_cd = {
	NULL, "owtemp", DV_DULL
};

static const struct onewire_matchfam owtemp_fams[] = {
	{ ONEWIRE_FAMILY_DS1920 },
	{ ONEWIRE_FAMILY_DS18B20 },
	{ ONEWIRE_FAMILY_DS1822 }
};

int
owtemp_match(struct device *parent, void *match, void *aux)
{
	return (onewire_matchbyfam(aux, owtemp_fams, nitems(owtemp_fams)));
}

void
owtemp_attach(struct device *parent, struct device *self, void *aux)
{
	struct owtemp_softc *sc = (struct owtemp_softc *)self;
	struct onewire_attach_args *oa = aux;

	sc->sc_onewire = oa->oa_onewire;
	sc->sc_rom = oa->oa_rom;

	/* Initialize sensor */
	strlcpy(sc->sc_sensordev.xname, sc->sc_dev.dv_xname,
	    sizeof(sc->sc_sensordev.xname));
	sc->sc_sensor.type = SENSOR_TEMP;
	snprintf(sc->sc_sensor.desc, sizeof(sc->sc_sensor.desc), "sn %012llx",
	    ONEWIRE_ROM_SN(oa->oa_rom));

	sc->sc_sensortask = sensor_task_register(sc, owtemp_update, 5);
	if (sc->sc_sensortask == NULL) {
		printf(": unable to register update task\n");
		return;
	}
	sensor_attach(&sc->sc_sensordev, &sc->sc_sensor);
	sensordev_install(&sc->sc_sensordev);

	rw_init(&sc->sc_lock, sc->sc_dev.dv_xname);
	printf("\n");
}

int
owtemp_detach(struct device *self, int flags)
{
	struct owtemp_softc *sc = (struct owtemp_softc *)self;

	rw_enter_write(&sc->sc_lock);
	sensordev_deinstall(&sc->sc_sensordev);
	if (sc->sc_sensortask != NULL)
		sensor_task_unregister(sc->sc_sensortask);
	rw_exit_write(&sc->sc_lock);

	return (0);
}

int
owtemp_activate(struct device *self, int act)
{
	return (0);
}

void
owtemp_update(void *arg)
{
	struct owtemp_softc *sc = arg;
	u_int8_t data[9];
	int16_t temp;
	int count_perc, count_remain, val;

	rw_enter_write(&sc->sc_lock);
	onewire_lock(sc->sc_onewire, 0);
	if (onewire_reset(sc->sc_onewire) != 0)
		goto done;
	onewire_matchrom(sc->sc_onewire, sc->sc_rom);

	/*
	 * Start temperature conversion. The conversion takes up to 750ms.
	 * After sending the command, the data line must be held high for
	 * at least 750ms to provide power during the conversion process.
	 * As such, no other activity may take place on the 1-Wire bus for
	 * at least this period.
	 */
	onewire_write_byte(sc->sc_onewire, DS1920_CMD_CONVERT);
	tsleep(sc, PRIBIO, "owtemp", hz);

	if (onewire_reset(sc->sc_onewire) != 0)
		goto done;
	onewire_matchrom(sc->sc_onewire, sc->sc_rom);

	/*
	 * The result of the temperature measurement is placed in the
	 * first two bytes of the scratchpad.
	 */
	onewire_write_byte(sc->sc_onewire, DS1920_CMD_READ_SCRATCHPAD);
	onewire_read_block(sc->sc_onewire, data, 9);
	if (onewire_crc(data, 8) == data[DS1920_SP_CRC]) {
		temp = data[DS1920_SP_TEMP_MSB] << 8 |
		    data[DS1920_SP_TEMP_LSB];
		if (ONEWIRE_ROM_FAMILY(sc->sc_rom) == ONEWIRE_FAMILY_DS18B20 ||
		    ONEWIRE_ROM_FAMILY(sc->sc_rom) == ONEWIRE_FAMILY_DS1822) {
			/*
			 * DS18B20 decoding
			 * default 12 bit 0.0625 C resolution
			 */
			val = temp * (1000000 / 16);
		} else {
			/* DS1920 decoding */
			count_perc = data[DS1920_SP_COUNT_PERC];
			count_remain = data[DS1920_SP_COUNT_REMAIN];

			if (count_perc != 0) {
				/* High resolution algorithm */
				temp &= ~0x0001;
				val = temp * 500000 - 250000 +
				    ((count_perc - count_remain) * 1000000) /
				    count_perc;
			} else {
				val = temp * 500000;
			}
		}
		sc->sc_sensor.value = 273150000 + val;
	}

done:
	onewire_unlock(sc->sc_onewire);
	rw_exit_write(&sc->sc_lock);
}
@


1.15
log
@- use nitems() where applicable

ok grange@@
@
text
@d1 1
a1 1
/*	$OpenBSD: owtemp.c,v 1.14 2009/10/13 19:33:16 pirofti Exp $	*/
a26 1
#include <sys/proc.h>
@


1.14
log
@Get rid of devact enum, substitute it with an int and coresponding defines.

This is needed for the addition of further suspend/resume actions.

Okay deraadt@@, marco@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: owtemp.c,v 1.13 2009/01/18 09:12:04 grange Exp $	*/
d89 1
a89 2
	return (onewire_matchbyfam(aux, owtemp_fams,
	    sizeof(owtemp_fams) /sizeof(owtemp_fams[0])));
@


1.13
log
@Update copyright.
@
text
@d1 1
a1 1
/*	$OpenBSD: owtemp.c,v 1.12 2009/01/17 20:30:27 grange Exp $	*/
d64 1
a64 1
int	owtemp_activate(struct device *, enum devact);
d136 1
a136 1
owtemp_activate(struct device *self, enum devact act)
@


1.12
log
@Add support for DS1822 to owtemp(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: owtemp.c,v 1.11 2008/12/26 18:17:25 todd Exp $	*/
d4 1
a4 1
 * Copyright (c) 2006 Alexander Yurchenko <grange@@openbsd.org>
@


1.11
log
@implement support for another temperature sensor, DS18B20
from David Fries david(at)fries(dot)net
ok grange@@
@
text
@d1 1
a1 1
/*	$OpenBSD: owtemp.c,v 1.10 2008/10/25 00:27:09 deraadt Exp $	*/
d82 2
a83 1
	{ ONEWIRE_FAMILY_DS18B20 }
d178 2
a179 1
		if (ONEWIRE_ROM_FAMILY(sc->sc_rom) == ONEWIRE_FAMILY_DS18B20) {
@


1.10
log
@put the serial number into the name of the devices (for sysctl), because
Joerg Goltermann has so many of them and has convinced me that he cannot
tell them apart.
ok grange cnst henning
@
text
@d1 1
a1 1
/*	$OpenBSD: owtemp.c,v 1.9 2007/11/28 18:26:11 todd Exp $	*/
d44 1
d81 2
a82 1
	{ ONEWIRE_FAMILY_DS1920 }
d177 6
a182 9
		count_perc = data[DS1920_SP_COUNT_PERC];
		count_remain = data[DS1920_SP_COUNT_REMAIN];

		if (count_perc != 0) {
			/* High resolution algorithm */
			temp &= ~0x0001;
			val = temp * 500000 - 250000 +
			    ((count_perc - count_remain) * 1000000) /
			    count_perc;
d184 13
a196 1
			val = temp * 500000;
@


1.9
log
@my brother, David Fries david at fries dot net, noticed that if you put your
sensors in the freezer, they return negative results, making unsigned values
bad to store negative numbers and then do math on.  Another popular os had
this same bug fixed by the same person.

ok grange@@
@
text
@d1 1
a1 1
/*	$OpenBSD: owtemp.c,v 1.8 2007/06/24 05:34:35 dlg Exp $	*/
d103 2
@


1.8
log
@rework sensor tasks to use the kernels generic workq rather than a special
kernel thread of its own. the api has changed (which will be fixed in the
manpage shortly) so all the users of sensor tasks that i can find have
been fixed too.

noone tested, so its going in to force people to run with it.
"put it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: owtemp.c,v 1.7 2007/03/22 16:55:31 deraadt Exp $	*/
d141 1
a141 1
	u_int16_t temp;
@


1.7
log
@split userland & kernel struct sensor/sensordev so that the addition
of new fields in the future is less disruptive.  This is done similar
to how struct proc is handled for ps(1).  ok jmc (man page changes)
tested fkr simon, and more suggestions from millert
@
text
@d1 1
a1 1
/*	$OpenBSD: owtemp.c,v 1.6 2006/12/23 17:46:39 deraadt Exp $	*/
d56 1
d104 2
a105 1
	if (sensor_task_register(sc, owtemp_update, 5)) {
d123 2
a124 1
	sensor_task_unregister(sc);
@


1.6
log
@adapt to new two-level sensor api; Constantine A. Murenin
@
text
@d1 1
a1 1
/*	$OpenBSD: owtemp.c,v 1.5 2006/12/20 14:46:59 grange Exp $	*/
d54 2
a55 2
	struct sensor		sc_sensor;
	struct sensordev	sc_sensordev;
@


1.5
log
@Implement high resolution temperature measuring.
Based on the diff provided by aaron@@linville.org in PR 5314.
@
text
@d1 1
a1 1
/*	$OpenBSD: owtemp.c,v 1.4 2006/10/01 11:43:40 grange Exp $	*/
d55 1
d99 2
a100 2
	strlcpy(sc->sc_sensor.device, sc->sc_dev.dv_xname,
	    sizeof(sc->sc_sensor.device));
a101 1
	strlcpy(sc->sc_sensor.desc, "Temp", sizeof(sc->sc_sensor.desc));
d107 2
a108 1
	sensor_add(&sc->sc_sensor);
d120 1
a120 1
	sensor_del(&sc->sc_sensor);
@


1.4
log
@Don't reuse bus lock for locking sensor task thread. Use a
separate lock.
@
text
@d1 1
a1 1
/*	$OpenBSD: owtemp.c,v 1.3 2006/10/01 08:09:04 grange Exp $	*/
d35 1
d39 9
d137 2
d166 16
a181 3
	if (onewire_crc(data, 8) == data[8]) {
		sc->sc_sensor.value = 273150000 +
		    (int)((u_int16_t)data[1] << 8 | data[0]) * 500000;
@


1.3
log
@Protect sensor_task_unregister() with some locking.
@
text
@d1 1
a1 1
/*	$OpenBSD: owtemp.c,v 1.2 2006/06/23 06:27:11 miod Exp $	*/
d28 1
d45 1
a45 2

	int			sc_dying;
d99 1
d108 1
a109 2

	onewire_lock(sc, 0);
d111 1
a111 1
	onewire_unlock(sc);
a118 10
	struct owtemp_softc *sc = (struct owtemp_softc *)self;

	switch (act) {
	case DVACT_ACTIVATE:
		break;
	case DVACT_DEACTIVATE:
		sc->sc_dying = 1;
		break;
	}

d128 1
d161 1
@


1.2
log
@In a drivers activate() entry point, if on DVACT_DEACTIVATE it does
something, then it MUST return zero on DVACT_ACTIVATE, not EOPNOTSUPP;
this very popular bug has been cut and pasted a lot of times...
ok deraadt@@ mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: owtemp.c,v 1.1 2006/03/04 16:27:03 grange Exp $	*/
d108 2
d111 1
@


1.1
log
@Dallas 1-Wire bus support. Includes the following drivers:

gpioow(4)	1-Wire bus bit-banging through GPIO pin
onewire(4)	1-Wire bus driver
owid(4)		1-Wire ID family type device
owtemp(4)	1-Wire temperature family type device

Drivers for RS-232 and USB bus masters will follow.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d120 1
a120 1
		return (EOPNOTSUPP);
@

