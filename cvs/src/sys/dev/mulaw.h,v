head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.12
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.10
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.6
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.4
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.14.0.30
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.28
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.26
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.22
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.20
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.18
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.16
	OPENBSD_5_0:1.14.0.14
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.12
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.10
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.6
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.8
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.4
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.2
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.12.0.10
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.8
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.6
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.4
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.11.0.6
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.4
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.9
	UBC:1.6.0.4
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.6
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2015.06.25.06.43.46;	author ratchov;	state Exp;
branches;
next	1.15;
commitid	EA6IpjJSgQH2WTCf;

1.15
date	2015.05.11.06.46.21;	author ratchov;	state Exp;
branches;
next	1.14;
commitid	RaOGL5SyOGOZylwx;

1.14
date	2008.06.26.05.42.14;	author ray;	state Exp;
branches;
next	1.13;

1.13
date	2007.10.23.19.54.36;	author jakemsr;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.14.01.24.20;	author pascoe;	state Exp;
branches;
next	1.11;

1.11
date	2004.02.23.23.59.21;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.27.00.23.43;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.06.02.34.57;	author nate;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.52;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.31.04.14.00;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.01.01.49.48;	author aaron;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2000.07.20.21.44.34;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.10.28.18.01.02;	author downsj;	state Exp;
branches
	1.4.6.1;
next	1.3;

1.3
date	98.04.26.21.03.11;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	96.04.18.23.47.03;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.29;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.29;	author deraadt;	state Exp;
branches;
next	;

1.4.6.1
date	2001.05.14.22.23.02;	author niklas;	state Exp;
branches;
next	1.4.6.2;

1.4.6.2
date	2001.07.04.10.40.11;	author niklas;	state Exp;
branches;
next	1.4.6.3;

1.4.6.3
date	2002.03.06.02.11.42;	author niklas;	state Exp;
branches;
next	1.4.6.4;

1.4.6.4
date	2002.03.28.12.29.44;	author niklas;	state Exp;
branches;
next	1.4.6.5;

1.4.6.5
date	2003.03.28.00.38.09;	author niklas;	state Exp;
branches;
next	1.4.6.6;

1.4.6.6
date	2004.02.19.10.56.13;	author niklas;	state Exp;
branches;
next	1.4.6.7;

1.4.6.7
date	2004.06.05.23.12.36;	author niklas;	state Exp;
branches;
next	;

1.6.4.1
date	2002.01.31.22.55.29;	author niklas;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2002.06.11.03.42.15;	author art;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Reimplement the audio driver in a simpler way, removing unused/unusable
functionality. Same API and ABI except for the removed bits and no
behaviour change for programs using libsndio. With help from armani@@
and mpi@@, thanks.
@
text
@/*	$OpenBSD: mulaw.h,v 1.15 2015/05/11 06:46:21 ratchov Exp $ */
/*	$NetBSD: mulaw.h,v 1.11 1999/11/01 18:12:19 augustss Exp $	*/

/*-
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by John T. Kohl.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/* Convert 8-bit mu-law to/from 8 bit signed linear. */
void mulaw_to_slinear8(u_char *, int);
void slinear8_to_mulaw(u_char *, int);
/* Convert 24-bit mu-law to/from 24 bit signed linear. */
void mulaw24_to_slinear24(u_char *, int);
void slinear24_to_mulaw24(u_char *, int);
@


1.15
log
@Remove all audio format conversion code from the kernel (btw holding
the kernel_lock), as we already do better conversions in
user-mode. Yet, no need for every single driver to fiddle with the
conversion code as they are done transparently by common MI code. With
help from armani and miod, support from mpi

ok armani@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mulaw.h,v 1.14 2008/06/26 05:42:14 ray Exp $ */
a32 2
/* *_mts versions convert mono to stereo, in addition */

d34 2
a35 2
extern void mulaw_to_slinear8(void *, u_char *, int);
extern void slinear8_to_mulaw(void *, u_char *, int);
d37 2
a38 2
void mulaw24_to_slinear24(void *, u_char *, int);
void slinear24_to_mulaw24(void *, u_char *, int);
@


1.14
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mulaw.h,v 1.13 2007/10/23 19:54:36 jakemsr Exp $ */
a34 14
/* Convert 8-bit mu-law to 16 bit unsigned linear. */
extern void mulaw_to_ulinear16_le(void *, u_char *, int);
extern void mulaw_to_ulinear16_le_mts(void *, u_char *, int);
extern void mulaw_to_ulinear16_be(void *, u_char *, int);
extern void mulaw_to_ulinear16_be_mts(void *, u_char *, int);
/* Convert 8-bit mu-law to/from 16 bit signed linear. */
extern void mulaw_to_slinear16_le(void *, u_char *, int);
extern void mulaw_to_slinear16_le_mts(void *, u_char *, int);
extern void mulaw_to_slinear16_be(void *, u_char *, int);
extern void mulaw_to_slinear16_be_mts(void *, u_char *, int);
extern void slinear16_to_mulaw_le(void *, u_char *, int);
/* Convert 8-bit mu-law to/from 8 bit unsigned linear. */
extern void mulaw_to_ulinear8(void *, u_char *, int);
extern void ulinear8_to_mulaw(void *, u_char *, int);
d38 3
a40 42
/* Convert 8-bit a-law to 16 bit unsigned linear. */
extern void alaw_to_ulinear16_le(void *, u_char *, int);
extern void alaw_to_ulinear16_be(void *, u_char *, int);
/* Convert 8-bit a-law to/from 16 bit signed linear. */
extern void alaw_to_slinear16_le(void *, u_char *, int);
extern void alaw_to_slinear16_le_mts(void *, u_char *, int);
extern void alaw_to_slinear16_be(void *, u_char *, int);
extern void alaw_to_slinear16_be_mts(void *, u_char *, int);
extern void slinear16_to_alaw_le(void *, u_char *, int);
extern void slinear16_to_alaw_be(void *, u_char *, int);
/* Convert 8-bit a-law to/from 8 bit unsigned linear. */
extern void alaw_to_ulinear8(void *, u_char *, int);
extern void ulinear8_to_alaw(void *, u_char *, int);
/* Convert 8-bit a-law to/from 8 bit signed linear. */
extern void alaw_to_slinear8(void *, u_char *, int);
extern void slinear8_to_alaw(void *, u_char *, int);
/* Convert 8-bit a-law to/from mulaw */
void alaw_to_mulaw(void *, u_char *, int);
void mulaw_to_alaw(void *, u_char *, int);
/* Convert 16-bit signed linear stereo to 8-bit a-law mono */
void slinear16_to_alaw_le_stm(void *, u_char *, int);
void slinear16_to_alaw_be_stm(void *, u_char *, int);
/* Convert 16-bit signed linear stereo to 8-bit mu-law mono */
void slinear16_to_mulaw_le_stm(void *, u_char *, int);
void slinear16_to_mulaw_be_stm(void *, u_char *, int);

/* backwards compat for now */
#if BYTE_ORDER == LITTLE_ENDIAN
#define mulaw_to_ulinear16 mulaw_to_ulinear16_le 
#define alaw_to_ulinear16 alaw_to_ulinear16_le
#define mulaw_to_slinear16 mulaw_to_slinear16_le
#define mulaw_to_slinear16_mts mulaw_to_slinear16_le_mts
#define alaw_to_slinear16 alaw_to_slinear16_le
#define alaw_to_slinear16_mts alaw_to_slinear16_le_mts
#else
#define mulaw_to_ulinear16 mulaw_to_ulinear16_be 
#define alaw_to_ulinear16 alaw_to_ulinear16_be
#define mulaw_to_slinear16 mulaw_to_slinear16_be
#define mulaw_to_slinear16_mts mulaw_to_slinear16_be_mts
#define alaw_to_slinear16 alaw_to_slinear16_be
#define alaw_to_slinear16_mts alaw_to_slinear16_be_mts
#endif
@


1.13
log
@- add a couple more mono-to-stereo conversions
- add stereo-to-mono conversions for mono recording
  on stereo only devices
@
text
@d1 1
a1 1
/*	$OpenBSD: mulaw.h,v 1.12 2005/04/14 01:24:20 pascoe Exp $ */
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.12
log
@Correct signed/unsigned mismatches in compatibility macros and add
mono-to-stereo variants for mulaw_to_slinear16

ok dlg@@ jason@@ mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mulaw.h,v 1.11 2004/02/23 23:59:21 deraadt Exp $ */
d78 6
@


1.11
log
@slinear to alaw converters; from netbsd, via jakemsr@@jakemsr.com
@
text
@d1 1
a1 1
/*	$OpenBSD: mulaw.h,v 1.10 2003/06/27 00:23:43 jason Exp $ */
d49 1
d51 1
d81 1
a81 1
#define mulaw_to_ulinear16 mulaw_to_slinear16_le 
d83 2
a84 2
#define mulaw_to_slinear16 mulaw_to_ulinear16_le
#define mulaw_to_slinear16_mts mulaw_to_ulinear16_le_mts
d88 1
a88 1
#define mulaw_to_ulinear16 mulaw_to_slinear16_be 
d90 2
a91 2
#define mulaw_to_slinear16 mulaw_to_ulinear16_be
#define mulaw_to_slinear16_mts mulaw_to_ulinear16_be_mts
@


1.10
log
@ansify and add an alaw <-> mulaw conversion
@
text
@d1 1
a1 1
/*	$OpenBSD: mulaw.h,v 1.9 2002/05/06 02:34:57 nate Exp $ */
d47 1
a47 1
/* Convert 8-bit mu-law to 16 bit signed linear. */
d60 1
a60 1
/* Convert 8-bit a-law to 16 bit signed linear. */
d65 2
@


1.9
log
@new conversion functions from NetBSD for uaudio
@
text
@d1 1
a1 1
/*	$OpenBSD: mulaw.h,v 1.8 2002/03/14 01:26:52 millert Exp $ */
d43 4
a46 4
extern void mulaw_to_ulinear16_le(void *, u_char *buf, int cnt);
extern void mulaw_to_ulinear16_le_mts(void *, u_char *buf, int cnt);
extern void mulaw_to_ulinear16_be(void *, u_char *buf, int cnt);
extern void mulaw_to_ulinear16_be_mts(void *, u_char *buf, int cnt);
d48 3
a50 3
extern void mulaw_to_slinear16_le(void *, u_char *buf, int cnt);
extern void mulaw_to_slinear16_be(void *, u_char *buf, int cnt);
extern void slinear16_to_mulaw_le(void *, u_char *buf, int cnt);
d52 2
a53 2
extern void mulaw_to_ulinear8(void *, u_char *buf, int cnt);
extern void ulinear8_to_mulaw(void *, u_char *buf, int cnt);
d55 2
a56 2
extern void mulaw_to_slinear8(void *, u_char *buf, int cnt);
extern void slinear8_to_mulaw(void *, u_char *buf, int cnt);
d58 2
a59 2
extern void alaw_to_ulinear16_le(void *, u_char *buf, int cnt);
extern void alaw_to_ulinear16_be(void *, u_char *buf, int cnt);
d61 4
a64 4
extern void alaw_to_slinear16_le(void *, u_char *buf, int cnt);
extern void alaw_to_slinear16_le_mts(void *, u_char *buf, int cnt);
extern void alaw_to_slinear16_be(void *, u_char *buf, int cnt);
extern void alaw_to_slinear16_be_mts(void *, u_char *buf, int cnt);
d66 2
a67 2
extern void alaw_to_ulinear8(void *, u_char *buf, int cnt);
extern void ulinear8_to_alaw(void *, u_char *buf, int cnt);
d69 5
a73 2
extern void alaw_to_slinear8(void *, u_char *buf, int cnt);
extern void slinear8_to_alaw(void *, u_char *buf, int cnt);
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: mulaw.h,v 1.7 2001/12/31 04:14:00 mickey Exp $ */
d50 1
@


1.7
log
@add a mono-to-stereo versions; from Kazuhiko Fukuhara <zaa83571@@oak.zero.ad.jp>
@
text
@d1 1
a1 1
/*	$OpenBSD: mulaw.h,v 1.6 2001/05/01 01:49:48 aaron Exp $ */
d43 4
a46 4
extern void mulaw_to_ulinear16_le __P((void *, u_char *buf, int cnt));
extern void mulaw_to_ulinear16_le_mts __P((void *, u_char *buf, int cnt));
extern void mulaw_to_ulinear16_be __P((void *, u_char *buf, int cnt));
extern void mulaw_to_ulinear16_be_mts __P((void *, u_char *buf, int cnt));
d48 2
a49 2
extern void mulaw_to_slinear16_le __P((void *, u_char *buf, int cnt));
extern void mulaw_to_slinear16_be __P((void *, u_char *buf, int cnt));
d51 2
a52 2
extern void mulaw_to_ulinear8 __P((void *, u_char *buf, int cnt));
extern void ulinear8_to_mulaw __P((void *, u_char *buf, int cnt));
d54 2
a55 2
extern void mulaw_to_slinear8 __P((void *, u_char *buf, int cnt));
extern void slinear8_to_mulaw __P((void *, u_char *buf, int cnt));
d57 2
a58 2
extern void alaw_to_ulinear16_le __P((void *, u_char *buf, int cnt));
extern void alaw_to_ulinear16_be __P((void *, u_char *buf, int cnt));
d60 4
a63 4
extern void alaw_to_slinear16_le __P((void *, u_char *buf, int cnt));
extern void alaw_to_slinear16_le_mts __P((void *, u_char *buf, int cnt));
extern void alaw_to_slinear16_be __P((void *, u_char *buf, int cnt));
extern void alaw_to_slinear16_be_mts __P((void *, u_char *buf, int cnt));
d65 2
a66 2
extern void alaw_to_ulinear8 __P((void *, u_char *buf, int cnt));
extern void ulinear8_to_alaw __P((void *, u_char *buf, int cnt));
d68 2
a69 2
extern void alaw_to_slinear8 __P((void *, u_char *buf, int cnt));
extern void slinear8_to_alaw __P((void *, u_char *buf, int cnt));
@


1.6
log
@Add $OpenBSD$ tags.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d40 2
d44 1
d46 1
d61 1
d63 1
d76 1
d78 1
d83 1
d85 1
@


1.6.4.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: mulaw.h,v 1.7 2001/12/31 04:14:00 mickey Exp $ */
a39 2
/* *_mts versions convert mono to stereo, in addition */

a41 1
extern void mulaw_to_ulinear16_le_mts __P((void *, u_char *buf, int cnt));
a42 1
extern void mulaw_to_ulinear16_be_mts __P((void *, u_char *buf, int cnt));
a56 1
extern void alaw_to_slinear16_le_mts __P((void *, u_char *buf, int cnt));
a57 1
extern void alaw_to_slinear16_be_mts __P((void *, u_char *buf, int cnt));
a69 1
#define mulaw_to_slinear16_mts mulaw_to_ulinear16_le_mts
a70 1
#define alaw_to_slinear16_mts alaw_to_slinear16_le_mts
a74 1
#define mulaw_to_slinear16_mts mulaw_to_ulinear16_be_mts
a75 1
#define alaw_to_slinear16_mts alaw_to_slinear16_be_mts
@


1.6.4.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mulaw.h,v 1.6.4.1 2002/01/31 22:55:29 niklas Exp $ */
d43 4
a46 4
extern void mulaw_to_ulinear16_le(void *, u_char *buf, int cnt);
extern void mulaw_to_ulinear16_le_mts(void *, u_char *buf, int cnt);
extern void mulaw_to_ulinear16_be(void *, u_char *buf, int cnt);
extern void mulaw_to_ulinear16_be_mts(void *, u_char *buf, int cnt);
d48 2
a49 3
extern void mulaw_to_slinear16_le(void *, u_char *buf, int cnt);
extern void mulaw_to_slinear16_be(void *, u_char *buf, int cnt);
extern void slinear16_to_mulaw_le(void *, u_char *buf, int cnt);
d51 2
a52 2
extern void mulaw_to_ulinear8(void *, u_char *buf, int cnt);
extern void ulinear8_to_mulaw(void *, u_char *buf, int cnt);
d54 2
a55 2
extern void mulaw_to_slinear8(void *, u_char *buf, int cnt);
extern void slinear8_to_mulaw(void *, u_char *buf, int cnt);
d57 2
a58 2
extern void alaw_to_ulinear16_le(void *, u_char *buf, int cnt);
extern void alaw_to_ulinear16_be(void *, u_char *buf, int cnt);
d60 4
a63 4
extern void alaw_to_slinear16_le(void *, u_char *buf, int cnt);
extern void alaw_to_slinear16_le_mts(void *, u_char *buf, int cnt);
extern void alaw_to_slinear16_be(void *, u_char *buf, int cnt);
extern void alaw_to_slinear16_be_mts(void *, u_char *buf, int cnt);
d65 2
a66 2
extern void alaw_to_ulinear8(void *, u_char *buf, int cnt);
extern void ulinear8_to_alaw(void *, u_char *buf, int cnt);
d68 2
a69 2
extern void alaw_to_slinear8(void *, u_char *buf, int cnt);
extern void slinear8_to_alaw(void *, u_char *buf, int cnt);
@


1.5
log
@extend with new netbsd api, and add backwards compat hacks for drivers
@
text
@d1 1
@


1.4
log
@More conversion routines, from NetBSD
@
text
@d1 1
a1 2
/*	$OpenBSD$	*/
/*	$NetBSD: mulaw.h,v 1.10 1998/08/09 19:22:15 mycroft Exp $	*/
d40 2
a41 1
extern void mulaw_to_ulinear16 __P((void *, u_char *buf, int cnt));
d43 2
a44 1
extern void mulaw_to_slinear16 __P((void *, u_char *buf, int cnt));
d52 2
a53 1
extern void alaw_to_ulinear16 __P((void *, u_char *buf, int cnt));
d55 2
a56 1
extern void alaw_to_slinear16 __P((void *, u_char *buf, int cnt));
d63 13
@


1.4.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 1
/*	$NetBSD: mulaw.h,v 1.11 1999/11/01 18:12:19 augustss Exp $	*/
d41 1
a41 2
extern void mulaw_to_ulinear16_le __P((void *, u_char *buf, int cnt));
extern void mulaw_to_ulinear16_be __P((void *, u_char *buf, int cnt));
d43 1
a43 2
extern void mulaw_to_slinear16_le __P((void *, u_char *buf, int cnt));
extern void mulaw_to_slinear16_be __P((void *, u_char *buf, int cnt));
d51 1
a51 2
extern void alaw_to_ulinear16_le __P((void *, u_char *buf, int cnt));
extern void alaw_to_ulinear16_be __P((void *, u_char *buf, int cnt));
d53 1
a53 2
extern void alaw_to_slinear16_le __P((void *, u_char *buf, int cnt));
extern void alaw_to_slinear16_be __P((void *, u_char *buf, int cnt));
a59 13

/* backwards compat for now */
#if BYTE_ORDER == LITTLE_ENDIAN
#define mulaw_to_ulinear16 mulaw_to_slinear16_le 
#define alaw_to_ulinear16 alaw_to_ulinear16_le
#define mulaw_to_slinear16 mulaw_to_ulinear16_le
#define alaw_to_slinear16 alaw_to_slinear16_le
#else
#define mulaw_to_ulinear16 mulaw_to_slinear16_be 
#define alaw_to_ulinear16 alaw_to_ulinear16_be
#define mulaw_to_slinear16 mulaw_to_ulinear16_be
#define alaw_to_slinear16 alaw_to_slinear16_be
#endif
@


1.4.6.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@a0 1
/*	$OpenBSD$ */
@


1.4.6.3
log
@Merge in trunk
@
text
@a39 2
/* *_mts versions convert mono to stereo, in addition */

a41 1
extern void mulaw_to_ulinear16_le_mts __P((void *, u_char *buf, int cnt));
a42 1
extern void mulaw_to_ulinear16_be_mts __P((void *, u_char *buf, int cnt));
a56 1
extern void alaw_to_slinear16_le_mts __P((void *, u_char *buf, int cnt));
a57 1
extern void alaw_to_slinear16_be_mts __P((void *, u_char *buf, int cnt));
a69 1
#define mulaw_to_slinear16_mts mulaw_to_ulinear16_le_mts
a70 1
#define alaw_to_slinear16_mts alaw_to_slinear16_le_mts
a74 1
#define mulaw_to_slinear16_mts mulaw_to_ulinear16_be_mts
a75 1
#define alaw_to_slinear16_mts alaw_to_slinear16_be_mts
@


1.4.6.4
log
@Merge in -current from about a week ago
@
text
@d43 4
a46 4
extern void mulaw_to_ulinear16_le(void *, u_char *buf, int cnt);
extern void mulaw_to_ulinear16_le_mts(void *, u_char *buf, int cnt);
extern void mulaw_to_ulinear16_be(void *, u_char *buf, int cnt);
extern void mulaw_to_ulinear16_be_mts(void *, u_char *buf, int cnt);
d48 2
a49 2
extern void mulaw_to_slinear16_le(void *, u_char *buf, int cnt);
extern void mulaw_to_slinear16_be(void *, u_char *buf, int cnt);
d51 2
a52 2
extern void mulaw_to_ulinear8(void *, u_char *buf, int cnt);
extern void ulinear8_to_mulaw(void *, u_char *buf, int cnt);
d54 2
a55 2
extern void mulaw_to_slinear8(void *, u_char *buf, int cnt);
extern void slinear8_to_mulaw(void *, u_char *buf, int cnt);
d57 2
a58 2
extern void alaw_to_ulinear16_le(void *, u_char *buf, int cnt);
extern void alaw_to_ulinear16_be(void *, u_char *buf, int cnt);
d60 4
a63 4
extern void alaw_to_slinear16_le(void *, u_char *buf, int cnt);
extern void alaw_to_slinear16_le_mts(void *, u_char *buf, int cnt);
extern void alaw_to_slinear16_be(void *, u_char *buf, int cnt);
extern void alaw_to_slinear16_be_mts(void *, u_char *buf, int cnt);
d65 2
a66 2
extern void alaw_to_ulinear8(void *, u_char *buf, int cnt);
extern void ulinear8_to_alaw(void *, u_char *buf, int cnt);
d68 2
a69 2
extern void alaw_to_slinear8(void *, u_char *buf, int cnt);
extern void slinear8_to_alaw(void *, u_char *buf, int cnt);
@


1.4.6.5
log
@Sync the SMP branch with 3.3
@
text
@a49 1
extern void slinear16_to_mulaw_le(void *, u_char *buf, int cnt);
@


1.4.6.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d43 4
a46 4
extern void mulaw_to_ulinear16_le(void *, u_char *, int);
extern void mulaw_to_ulinear16_le_mts(void *, u_char *, int);
extern void mulaw_to_ulinear16_be(void *, u_char *, int);
extern void mulaw_to_ulinear16_be_mts(void *, u_char *, int);
d48 3
a50 3
extern void mulaw_to_slinear16_le(void *, u_char *, int);
extern void mulaw_to_slinear16_be(void *, u_char *, int);
extern void slinear16_to_mulaw_le(void *, u_char *, int);
d52 2
a53 2
extern void mulaw_to_ulinear8(void *, u_char *, int);
extern void ulinear8_to_mulaw(void *, u_char *, int);
d55 2
a56 2
extern void mulaw_to_slinear8(void *, u_char *, int);
extern void slinear8_to_mulaw(void *, u_char *, int);
d58 2
a59 2
extern void alaw_to_ulinear16_le(void *, u_char *, int);
extern void alaw_to_ulinear16_be(void *, u_char *, int);
d61 4
a64 4
extern void alaw_to_slinear16_le(void *, u_char *, int);
extern void alaw_to_slinear16_le_mts(void *, u_char *, int);
extern void alaw_to_slinear16_be(void *, u_char *, int);
extern void alaw_to_slinear16_be_mts(void *, u_char *, int);
d66 2
a67 2
extern void alaw_to_ulinear8(void *, u_char *, int);
extern void ulinear8_to_alaw(void *, u_char *, int);
d69 2
a70 5
extern void alaw_to_slinear8(void *, u_char *, int);
extern void slinear8_to_alaw(void *, u_char *, int);
/* Convert 8-bit a-law to/from mulaw */
void alaw_to_mulaw(void *, u_char *, int);
void mulaw_to_alaw(void *, u_char *, int);
@


1.4.6.7
log
@Merge with the trunk
@
text
@d47 1
a47 1
/* Convert 8-bit mu-law to/from 16 bit signed linear. */
d60 1
a60 1
/* Convert 8-bit a-law to/from 16 bit signed linear. */
a64 2
extern void slinear16_to_alaw_le(void *, u_char *, int);
extern void slinear16_to_alaw_be(void *, u_char *, int);
@


1.3
log
@update audio from NetBSD, mostly by Lennart Augustsson <augustss@@cs.chalmers.se>
@
text
@d1 2
a2 2
/*	$OpenBSD: mulaw.h,v 1.2 1996/04/18 23:47:03 niklas Exp $	*/
/*	$NetBSD: mulaw.h,v 1.8 1997/10/09 08:11:10 jtc Exp $	*/
d42 2
d47 3
d52 2
d57 3
@


1.2
log
@NetBSD 960317 merge
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: mulaw.h,v 1.2 1996/02/27 22:29:42 jtc Exp $	*/
d30 2
a31 2
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
d40 10
a49 5
/*
 * Convert 8-bit mu-law to/from 8 bit unsigned linear (PCM8)
 */
extern void mulaw_compress __P((void *hw_hdl, int encoding, unsigned char *buf, int cnt));
extern void mulaw_expand __P((void *hw_hdl, int encoding, unsigned char *buf, int cnt));
@


1.1
log
@Initial revision
@
text
@d1 36
a36 25
/*
 *  Copyright (c) 1995 John T. Kohl
 *  All rights reserved.
 * 
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
a37 1
 * 
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
