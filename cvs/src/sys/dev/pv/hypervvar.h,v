head	1.13;
access;
symbols
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.1.0.2
	OPENBSD_6_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2017.06.23.19.05.42;	author mikeb;	state Exp;
branches;
next	1.12;
commitid	hMJgAq6rYcx4lfUx;

1.12
date	2017.06.14.09.47.37;	author mikeb;	state Exp;
branches;
next	1.11;
commitid	ZuMc1lf2ThkFIJSc;

1.11
date	2016.11.23.12.40.04;	author mikeb;	state Exp;
branches;
next	1.10;
commitid	vd72Ax9ifxTBeJZY;

1.10
date	2016.11.23.09.37.43;	author mikeb;	state Exp;
branches;
next	1.9;
commitid	5XgIePKjlCwEuU2x;

1.9
date	2016.11.14.14.03.09;	author mikeb;	state Exp;
branches;
next	1.8;
commitid	9KgMaPdMFi7rts4Z;

1.8
date	2016.10.25.19.36.11;	author mikeb;	state Exp;
branches;
next	1.7;
commitid	tujUilLvS05dLN8J;

1.7
date	2016.10.12.16.23.35;	author mikeb;	state Exp;
branches;
next	1.6;
commitid	3tNzzGKXHGFXBdup;

1.6
date	2016.10.10.21.08.39;	author mikeb;	state Exp;
branches;
next	1.5;
commitid	wZhE0zlV0nfBXn3M;

1.5
date	2016.09.20.10.27.14;	author mikeb;	state Exp;
branches;
next	1.4;
commitid	rY9brrie9yj7uMrM;

1.4
date	2016.09.14.17.48.28;	author mikeb;	state Exp;
branches;
next	1.3;
commitid	3NQfXZDgsR52I33J;

1.3
date	2016.08.17.17.39.41;	author mikeb;	state Exp;
branches;
next	1.2;
commitid	VRQF41lN3BVrqsJk;

1.2
date	2016.08.16.14.43.31;	author mikeb;	state Exp;
branches;
next	1.1;
commitid	gjDTTLYz8B3N4PzV;

1.1
date	2016.06.22.01.13.07;	author mikeb;	state Exp;
branches;
next	;
commitid	qi2GLlgF1qtf4Kfm;


desc
@@


1.13
log
@Introduce deferred interrupt processing capability

Hyper-V interrupts seem to be sometimes delivered before the message
becomes available on the channel ring.  This is reproducible on hvs(4)
under load.  This change is modelled on the workaround found in the
Linux driver.
@
text
@/*
 * Copyright (c) 2016 Mike Belopuhov <mike@@esdenera.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _DEV_PV_HYPERVVAR_H_
#define _DEV_PV_HYPERVVAR_H_

/* #define HYPERV_DEBUG */

#ifdef HYPERV_DEBUG
#define DPRINTF(x...)		printf(x)
#else
#define DPRINTF(x...)
#endif

struct hv_softc;

struct hv_msg {
	uint64_t			 msg_flags;
#define  MSGF_NOSLEEP			  0x0001
#define  MSGF_NOQUEUE			  0x0002
#define  MSGF_ORPHANED			  0x0004
	struct hypercall_postmsg_in	 msg_req; /* must be 8 byte aligned */
	void				*msg_rsp;
	size_t				 msg_rsplen;
	TAILQ_ENTRY(hv_msg)		 msg_entry;
};
TAILQ_HEAD(hv_queue, hv_msg);

struct hv_offer {
	struct vmbus_chanmsg_choffer	 co_chan;
	SIMPLEQ_ENTRY(hv_offer)		 co_entry;
};
SIMPLEQ_HEAD(hv_offers, hv_offer);

struct hv_ring_data {
	struct vmbus_bufring		*rd_ring;
	uint32_t			 rd_size;
	struct mutex			 rd_lock;
	uint32_t			 rd_prod;
	uint32_t			 rd_cons;
	uint32_t			 rd_dsize;
};

struct hv_channel {
	struct hv_softc			*ch_sc;

	int				 ch_state;
#define  HV_CHANSTATE_OFFERED		  1
#define  HV_CHANSTATE_OPENED		  2
#define  HV_CHANSTATE_CLOSING		  3
#define  HV_CHANSTATE_CLOSED		  4
	uint32_t			 ch_id;

	struct hv_guid			 ch_type;
	struct hv_guid			 ch_inst;
	char				 ch_ident[38];

	void				*ch_ring;
	uint32_t			 ch_ring_gpadl;
	u_long				 ch_ring_size;

	struct hv_ring_data		 ch_wrd;
	struct hv_ring_data		 ch_rrd;

	uint32_t			 ch_vcpu;

	void				(*ch_handler)(void *);
	void				 *ch_ctx;
	struct evcount			  ch_evcnt;
	struct taskq			*ch_taskq;
	struct task			 ch_task;

	uint32_t			 ch_flags;
#define  CHF_BATCHED			  0x0001
#define  CHF_MONITOR			  0x0002

	uint8_t				 ch_mgroup;
	uint8_t				 ch_mindex;
	struct hv_mon_param		 ch_monprm __attribute__((aligned(8)));

	TAILQ_ENTRY(hv_channel)		 ch_entry;
};
TAILQ_HEAD(hv_channels, hv_channel);

struct hv_attach_args {
	void				*aa_parent;
	bus_dma_tag_t			 aa_dmat;
	struct hv_guid			*aa_type;
	struct hv_guid			*aa_inst;
	char				*aa_ident;
	struct hv_channel		*aa_chan;
};

struct hv_dev {
	struct hv_attach_args		 dv_aa;
	SLIST_ENTRY(hv_dev)		 dv_entry;
};
SLIST_HEAD(hv_devices, hv_dev);

struct hv_softc {
	struct device			 sc_dev;
	struct pvbus_hv			*sc_pvbus;
	struct bus_dma_tag		*sc_dmat;

	void				*sc_hc;
	uint32_t			 sc_features;

	uint32_t			 sc_flags;
#define  HSF_CONNECTED			  0x0001
#define  HSF_OFFERS_DELIVERED		  0x0002

	int				 sc_idtvec;
	int				 sc_proto;

	/* CPU id to VCPU id mapping */
	uint32_t			 sc_vcpus[1];	/* XXX: per-cpu */
	/* Synthetic Interrupt Message Page (SIMP) */
	void				*sc_simp[1];	/* XXX: per-cpu */
	/* Synthetic Interrupt Event Flags Page (SIEFP) */
	void				*sc_siep[1];	/* XXX: per-cpu */

	/* Channel port events page */
	void				*sc_events;
	u_long				*sc_wevents;	/* Write events */
	u_long				*sc_revents;	/* Read events */

	/* Monitor pages for parent<->child notifications */
	struct vmbus_mnf		*sc_monitor[2];

	struct hv_queue	 		 sc_reqs;	/* Request queue */
	struct mutex			 sc_reqlck;
	struct hv_queue	 		 sc_rsps;	/* Response queue */
	struct mutex			 sc_rsplck;

	struct hv_offers		 sc_offers;
	struct mutex			 sc_offerlck;

	struct hv_channels		 sc_channels;
	struct mutex			 sc_channelck;

	volatile uint32_t		 sc_handle;

	struct hv_devices		 sc_devs;
	struct mutex			 sc_devlck;

	struct task			 sc_sdtask;	/* shutdown */

	struct ksensordev		 sc_sensordev;
	struct ksensor			 sc_sensor;
};

static __inline void
clear_bit(u_int b, volatile void *p)
{
	atomic_clearbits_int(((volatile u_int *)p) + (b >> 5), 1 << (b & 0x1f));
}

static __inline void
set_bit(u_int b, volatile void *p)
{
	atomic_setbits_int(((volatile u_int *)p) + (b >> 5), 1 << (b & 0x1f));
}

static __inline int
test_bit(u_int b, volatile void *p)
{
	return !!(((volatile u_int *)p)[b >> 5] & (1 << (b & 0x1f)));
}

extern const struct hv_guid hv_guid_network;
extern const struct hv_guid hv_guid_ide;
extern const struct hv_guid hv_guid_scsi;
extern const struct hv_guid hv_guid_shutdown;
extern const struct hv_guid hv_guid_timesync;
extern const struct hv_guid hv_guid_heartbeat;
extern const struct hv_guid hv_guid_kvp;
#ifdef HYPERV_DEBUG
extern const struct hv_guid hv_guid_vss;
extern const struct hv_guid hv_guid_dynmem;
extern const struct hv_guid hv_guid_mouse;
extern const struct hv_guid hv_guid_kbd;
extern const struct hv_guid hv_guid_video;
extern const struct hv_guid hv_guid_fc;
extern const struct hv_guid hv_guid_fcopy;
extern const struct hv_guid hv_guid_pcie;
extern const struct hv_guid hv_guid_netdir;
extern const struct hv_guid hv_guid_rdesktop;
extern const struct hv_guid hv_guid_avma1;
extern const struct hv_guid hv_guid_avma2;
extern const struct hv_guid hv_guid_avma3;
extern const struct hv_guid hv_guid_avma4;
#endif	/* HYPERV_DEBUG */

int	hv_handle_alloc(struct hv_channel *, void *, uint32_t, uint32_t *);
void	hv_handle_free(struct hv_channel *, uint32_t);
int	hv_channel_open(struct hv_channel *, size_t, void *, size_t,
	    void (*)(void *), void *);
int	hv_channel_close(struct hv_channel *);
int	hv_channel_setdeferred(struct hv_channel *, const char *);
void	hv_channel_schedule(struct hv_channel *);
void	hv_evcount_attach(struct hv_channel *, const char *);
int	hv_channel_send(struct hv_channel *, void *, uint32_t, uint64_t,
	    int, uint32_t);
int	hv_channel_send_sgl(struct hv_channel *, struct vmbus_gpa *,
	    uint32_t, void *, uint32_t, uint64_t);
int	hv_channel_send_prpl(struct hv_channel *, struct vmbus_gpa_range *,
	    uint32_t, void *, uint32_t, uint64_t);
int	hv_channel_recv(struct hv_channel *, void *, uint32_t, uint32_t *,
	    uint64_t *, int);

#endif	/* _DEV_PV_HYPERVVAR_H_ */
@


1.12
log
@Add another type of a scatter-gather list operation used by StorVSC

Obtained from FreeBSD.
@
text
@d83 2
d212 2
@


1.11
log
@Move as much code out of a startup hook as possible

To be able to perform asynchronous operations early we need to
have a robust polling mechanism with flexible condition check
semantics.  A new hv_wait interface provides such facilities.

Right now hvn(4) submits NVS commands and sleeps waiting for a
interrupt to fire and run the completion code and it will take
some effort to convert this code to be able to poll instead of
tsleep.  But VMBus attachment, channel scanning, etc can done
at an earlier stage.  Lets see if this sticks.
@
text
@d215 2
@


1.10
log
@Disable debugging output
@
text
@d35 1
a35 1
	struct hypercall_postmsg_in	 msg_req;
@


1.9
log
@Minor cleanup, remove unused structure members
@
text
@d20 1
a20 1
#define HYPERV_DEBUG
@


1.8
log
@Channel API users should pick the bufring size

hvn(4) needs to be able to put up to 128 RNDIS data messages on the
channel ring each pointing up to 16 fragments in addition to a small
number of RNDIS control messages.  This simplifies accounting of
available TX descriptors in relation to the available space on the
channel ring and as a results prevents packet drops due to the ring
being full.
@
text
@d54 1
a54 2
	uint32_t			 rd_data_size;
	uint32_t			 rd_data_offset;
a72 1
	uint32_t			 ch_ring_npg;
@


1.7
log
@Get rid of the ch_buf member that is not part of the channel API

Devices need to allocate appropriate input/output buffers for use
with the VMBus channel API themselves.  There's no reason to keep
pointers to these buffers in the channel structure.

This requires a bit of restructuring of the code attaching internal
devices however.
@
text
@d209 2
a210 2
int	hv_channel_open(struct hv_channel *, void *, size_t, void (*)(void *),
	    void *);
@


1.6
log
@Reshuffle GUID device ID table and add $ tags to headers
@
text
@a83 2
	uint8_t				 *ch_buf;
	int				  ch_buflen;
@


1.5
log
@Add an API to hook up event counters
@
text
@d185 24
@


1.4
log
@Name include guard macros consistently within sys/dev/pv
@
text
@d190 1
@


1.3
log
@Sync up monitor trigger groups handling to the upstream

Replace hand rolled atomic bit operations and use MI ones from DRM
and convert event matrixes to arrays of longs.
@
text
@d17 2
a18 2
#ifndef _HYPERVVAR_H_
#define _HYPERVVAR_H_
d197 1
a197 1
#endif	/* _HYPERVVAR_H_ */
@


1.2
log
@Update Hyper-V structure definitions to the 2016 version

Microsoft has performed a significant clean up and stylistic improvement
of Hyper-V structure definitions and updated FreeBSD port.  We update to
stay in sync with the upstream and improve maintainability of this code
in the future.
@
text
@a71 3
	uint8_t				 ch_mgroup;
	uint8_t				 ch_mindex;

d75 1
a75 1
	ulong				 ch_ring_size;
d92 2
d139 2
a140 2
	uint32_t			*sc_wevents;	/* Write events */
	uint32_t			*sc_revents;	/* Read events */
d167 2
a168 2
static inline int
atomic_setbit_ptr(volatile void *ptr, int bit)
d170 2
a171 1
	int obit;
d173 4
a176 5
	__asm__ __volatile__ ("lock btsl %2,%1; sbbl %0,%0" :
	    "=r" (obit), "=m" (*(volatile long *)ptr) : "Ir" (bit) :
	    "memory");

	return (obit);
d179 2
a180 2
static inline int
atomic_clearbit_ptr(volatile void *ptr, int bit)
d182 1
a182 7
	int obit;

	__asm__ __volatile__ ("lock btrl %2,%1; sbbl %0,%0" :
	    "=r" (obit), "=m" (*(volatile long *)ptr) : "Ir" (bit) :
	    "memory");

	return (obit);
@


1.1
log
@Main Hyper-V nexus driver, work in progress.

ok mlarkin, deraadt
@
text
@d35 1
a35 1
	struct hv_input_post_message	 msg_req;
d43 1
a43 1
	struct hv_channel_offer_channel	 co_chan;
d49 1
a49 1
	struct hv_ring_buffer		*rd_ring;
d66 1
a66 1
	uint32_t			 ch_relid;
d76 1
a76 1
	uint32_t			 ch_ring_hndl;
d93 1
a93 2
#define  CHF_DEDICATED			  0x0002
#define  CHF_MONITOR			  0x0004
d95 1
a95 1
	struct hv_input_signal_event	 ch_sigevt __attribute__((aligned(8)));
d144 1
a144 1
	struct hv_monitor_page		*sc_monitor[2];
d199 1
a199 1
int	hv_channel_sendbuf(struct hv_channel *, struct hv_page_buffer *,
@

