head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.58
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.56
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.52
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.42
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.50
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.48
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.46
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.44
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.40
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.38
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.36
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.34
	OPENBSD_5_0:1.8.0.32
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.30
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.28
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.24
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.26
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.22
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.20
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.18
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.16
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.14
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.6
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.7
	UBC:1.1.0.12
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.10
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.8
	OPENBSD_2_8:1.1.0.6
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.8
date	2003.12.24.23.27.55;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.30.18.25.58;	author smurph;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.28.00.34.55;	author smurph;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.19.21.07.25;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.19.02.49.20;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.57;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.16.04.36.33;	author smurph;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.22.02.50.50;	author smurph;	state Exp;
branches
	1.1.2.1
	1.1.12.1;
next	;

1.1.2.1
date	2000.03.24.09.09.14;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.03.06.02.11.44;	author niklas;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2002.03.28.12.29.45;	author niklas;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2003.03.28.00.38.17;	author niklas;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2004.02.19.10.56.23;	author niklas;	state Exp;
branches;
next	;

1.1.12.1
date	2002.06.11.03.42.22;	author art;	state Exp;
branches;
next	1.1.12.2;

1.1.12.2
date	2002.10.29.00.33.27;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Sync ahc with NetBSD, which was in turn updated from FreeBSD by Pascal
Renauld of Network Storage Solutions, Inc. Many fixes, wider device
support. In particular, the notorious 'Target 0' problem seems to be
fixed.

Does *not* include any updates to isa or eisa code beyond what was
necessary to compile.

Known issues:

1) Tagged Queuing is probably not optimal.

2) PPR negotiation may not be fully functional.

3) No support yet for freezing devices or channels.

4) The mechanism for preventing 'A' and 'B' channel confusion during probe
can fail if scsibus > 254 found.

5) Requeuing I/O's not working. A workaround will be committed almost
immediately. At the moment timeouts, SCSI message rejects, aborting
SCB's and trying to freeze a device may cause incomplete i/o's to be
reported as complete.

6) Verbosity and probe messages need work.

7) Last disk on bus seems to go through an extra re-negotiation.

8) >16 devices on an adapter will trigger the usual problems of total
openings exceeding available SCB's under heavy load.

Tested by deraadt@@, beck@@, miod@@, naddy@@, drahn@@, marc@@ amoung
others.

ok deraadt@@.
@
text
@/* $OpenBSD: aicasm_symbol.h,v 1.7 2002/06/30 18:25:58 smurph Exp $ */
/*	$NetBSD: aicasm_symbol.h,v 1.2 2003/04/19 19:26:11 fvdl Exp $	*/

/*
 * Aic7xxx SCSI host adapter firmware asssembler symbol table definitions
 *
 * Copyright (c) 1997 Justin T. Gibbs.
 * Copyright (c) 2002 Adaptec Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions, and the following disclaimer,
 *    without modification.
 * 2. Redistributions in binary form must reproduce at minimum a disclaimer
 *    substantially similar to the "NO WARRANTY" disclaimer below
 *    ("Disclaimer") and any redistribution must be conditioned upon
 *    including a substantially similar Disclaimer requirement for further
 *    binary redistribution.
 * 3. Neither the names of the above-listed copyright holders nor the names
 *    of any contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * Alternatively, this software may be distributed under the terms of the
 * GNU General Public License ("GPL") version 2 as published by the Free
 * Software Foundation.
 *
 * NO WARRANTY
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES.
 *
 * $FreeBSD: src/sys/dev/aic7xxx/aicasm/aicasm_symbol.h,v 1.16 2002/08/31 06:39:41 gibbs Exp $
 */

#ifdef __linux__
#include "../queue.h"
#else
#include <sys/queue.h>
#endif

typedef enum {
	UNINITIALIZED,
	REGISTER,
	ALIAS,
	SCBLOC,
	SRAMLOC,
	ENUM_ENTRY,
	FIELD,
	MASK,
	ENUM,
	CONST,
	DOWNLOAD_CONST,
	LABEL,
	CONDITIONAL,
	MACRO
} symtype;

typedef enum {
	RO = 0x01,
	WO = 0x02,
	RW = 0x03
}amode_t;

typedef SLIST_HEAD(symlist, symbol_node) symlist_t;

struct reg_info {
	u_int	  address;
	int	  size;
	amode_t	  mode;
	symlist_t fields;
	uint8_t	  valid_bitmask;
	uint8_t	  modes;
	int	  typecheck_masks;
};

struct field_info {
	symlist_t symrefs;
	uint8_t	  value;
	uint8_t	  mask;
};

struct const_info {
	u_int	value;
	int	define;
};

struct alias_info {
	struct symbol *parent;
};

struct label_info {
	int	address;
	int	exported;
};

struct cond_info {
	int	func_num;
};

struct macro_arg {
	TAILQ_ENTRY(macro_arg)	links;
	regex_t	arg_regex;
	char   *replacement_text;
};
TAILQ_HEAD(macro_arg_list, macro_arg) args;

struct macro_info {
	struct macro_arg_list args;
	int   narg;
	const char* body;
};

typedef struct expression_info {
        symlist_t       referenced_syms;
        int             value;
} expression_t;

typedef struct symbol {
	char	*name;
	symtype	type;
	union	{
		struct reg_info	  *rinfo;
		struct field_info *finfo;
		struct const_info *cinfo;
		struct alias_info *ainfo;
		struct label_info *linfo;
		struct cond_info  *condinfo;
		struct macro_info *macroinfo;
	}info;
} symbol_t;

typedef struct symbol_ref {
	symbol_t *symbol;
	int	 offset;
} symbol_ref_t;

typedef struct symbol_node {
	SLIST_ENTRY(symbol_node) links;
	symbol_t *symbol;
} symbol_node_t;

typedef struct critical_section {
	TAILQ_ENTRY(critical_section) links;
	int begin_addr;
	int end_addr;
} critical_section_t;

typedef enum {
	SCOPE_ROOT,
	SCOPE_IF,
	SCOPE_ELSE_IF,
	SCOPE_ELSE
} scope_type;

typedef struct patch_info {
	int skip_patch;
	int skip_instr;
} patch_info_t;

typedef struct scope {
	SLIST_ENTRY(scope) scope_stack_links;
	TAILQ_ENTRY(scope) scope_links;
	TAILQ_HEAD(, scope) inner_scope;
	scope_type type;
	int inner_scope_patches;
	int begin_addr;
        int end_addr;
	patch_info_t patches[2];
	int func_num;
} scope_t;

TAILQ_HEAD(cs_tailq, critical_section);
SLIST_HEAD(scope_list, scope);
TAILQ_HEAD(scope_tailq, scope);

void	symbol_delete(symbol_t *symbol);

void	symtable_open(void);

void	symtable_close(void);

symbol_t *
	symtable_get(char *name);

symbol_node_t *
	symlist_search(symlist_t *symlist, char *symname);

void
	symlist_add(symlist_t *symlist, symbol_t *symbol, int how);
#define SYMLIST_INSERT_HEAD	0x00
#define SYMLIST_SORT		0x01

void	symlist_free(symlist_t *symlist);

void	symlist_merge(symlist_t *symlist_dest, symlist_t *symlist_src1,
		      symlist_t *symlist_src2);
void	symtable_dump(FILE *ofile, FILE *dfile);
@


1.7
log
@New aicasm synced with FreeBSD.
@
text
@d1 3
a3 1
/* $OpenBSD: aicasm_symbol.h,v 1.6 2002/06/28 00:34:55 smurph Exp $ */
d8 1
d43 1
a43 1
 * $FreeBSD: src/sys/dev/aic7xxx/aicasm/aicasm_symbol.h,v 1.15 2002/06/05 22:51:54 gibbs Exp $
d46 3
d50 1
d58 2
d61 1
a61 1
	BIT,
d67 1
a67 1
}symtype;
d75 2
d78 7
a84 6
	u_int	 address;
	int	 size;
	amode_t	 mode;
	u_int8_t valid_bitmask;
	u_int8_t modes;
	int	 typecheck_masks;
d87 1
a87 3
typedef SLIST_HEAD(symlist, symbol_node) symlist_t;

struct mask_info {
d89 2
a90 1
	u_int8_t mask;
d95 1
a95 1
	int	 define;
d133 2
a134 2
		struct reg_info *rinfo;
		struct mask_info *minfo;
d138 1
a138 1
		struct cond_info *condinfo;
d151 1
a151 1
}symbol_node_t;
d154 3
a156 3
        TAILQ_ENTRY(critical_section) links;
        int begin_addr;
        int end_addr;
d207 2
a208 2
	    symlist_t *symlist_src2);
void	symtable_dump(FILE *ofile);
@


1.6
log
@Return of new ahc
@
text
@d1 1
a1 1
/* $OpenBSD: aicasm_symbol.h,v 1.5 2002/03/19 21:07:25 millert Exp $ */
d14 8
a21 2
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d24 2
a25 1
 * GNU Public License ("GPL").
d27 6
a32 5
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
d35 4
a38 4
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d40 1
a40 1
 * $FreeBSD: src/sys/dev/aic7xxx/aicasm/aicasm_symbol.h,v 1.12 2000/11/10 19:54:17 gibbs Exp $
d56 2
a57 1
	CONDITIONAL
d67 1
a67 1
	u_int8_t address;
d71 1
d83 1
a83 1
	u_int8_t value;
d93 1
d100 13
d128 1
a197 1

@


1.5
log
@remove __P
@
text
@d1 1
a1 1
/* $OpenBSD: aicasm_symbol.h,v 1.4 2002/03/19 02:49:20 millert Exp $ */
d17 3
d32 1
a32 1
 * $FreeBSD: src/sys/dev/aic7xxx/aicasm_symbol.h,v 1.6 1999/12/06 18:23:31 gibbs Exp $
d117 6
d147 1
d173 1
@


1.4
log
@revert to older ahc driver until the new one's bugs are fixed
@
text
@d1 1
a1 1
/* $OpenBSD: aicasm_symbol.h,v 1.1 2000/03/22 02:50:50 smurph Exp $ */
d141 1
a141 1
void	symbol_delete __P((symbol_t *symbol));
d143 1
a143 1
void	symtable_open __P((void));
d145 1
a145 1
void	symtable_close __P((void));
d148 1
a148 1
	symtable_get __P((char *name));
d151 1
a151 1
	symlist_search __P((symlist_t *symlist, char *symname));
d154 1
a154 1
	symlist_add __P((symlist_t *symlist, symbol_t *symbol, int how));
d158 1
a158 1
void	symlist_free __P((symlist_t *symlist));
d160 3
a162 3
void	symlist_merge __P((symlist_t *symlist_dest, symlist_t *symlist_src1,
			   symlist_t *symlist_src2));
void	symtable_dump __P((FILE *ofile));
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/* $OpenBSD: aicasm_symbol.h,v 1.2 2002/02/16 04:36:33 smurph Exp $ */
a16 3
 * Alternatively, this software may be distributed under the terms of the
 * GNU Public License ("GPL").
 *
d29 1
a29 1
 * $FreeBSD: src/sys/dev/aic7xxx/aicasm/aicasm_symbol.h,v 1.12 2000/11/10 19:54:17 gibbs Exp $
a113 6
typedef struct critical_section {
        TAILQ_ENTRY(critical_section) links;
        int begin_addr;
        int end_addr;
} critical_section_t;

a137 1
TAILQ_HEAD(cs_tailq, critical_section);
d141 1
a141 1
void	symbol_delete(symbol_t *symbol);
d143 1
a143 1
void	symtable_open(void);
d145 1
a145 1
void	symtable_close(void);
d148 1
a148 1
	symtable_get(char *name);
d151 1
a151 1
	symlist_search(symlist_t *symlist, char *symname);
d154 1
a154 1
	symlist_add(symlist_t *symlist, symbol_t *symbol, int how);
d158 1
a158 5
void	symlist_free(symlist_t *symlist);

void	symlist_merge(symlist_t *symlist_dest, symlist_t *symlist_src1,
			   symlist_t *symlist_src2);
void	symtable_dump(FILE *ofile);
d160 3
@


1.2
log
@New port of FreeBSD's ahc driver
@
text
@d1 1
a1 1
/* $OpenBSD: aicasm_symbol.h,v 1.1 2000/03/22 02:50:50 smurph Exp $ */
d151 1
a151 1
void	symbol_delete __P((symbol_t *symbol));
d153 1
a153 1
void	symtable_open __P((void));
d155 1
a155 1
void	symtable_close __P((void));
d158 1
a158 1
	symtable_get __P((char *name));
d161 1
a161 1
	symlist_search __P((symlist_t *symlist, char *symname));
d164 1
a164 1
	symlist_add __P((symlist_t *symlist, symbol_t *symbol, int how));
d168 1
a168 1
void	symlist_free __P((symlist_t *symlist));
d170 3
a172 3
void	symlist_merge __P((symlist_t *symlist_dest, symlist_t *symlist_src1,
			   symlist_t *symlist_src2));
void	symtable_dump __P((FILE *ofile));
@


1.1
log
@new ahc driver.  Adds support for newer Adaptec controllers.  This represents two months of work.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d17 3
d32 1
a32 1
 * $FreeBSD: src/sys/dev/aic7xxx/aicasm_symbol.h,v 1.6 1999/12/06 18:23:31 gibbs Exp $
d117 6
d147 1
d173 1
@


1.1.12.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: aicasm_symbol.h,v 1.1 2000/03/22 02:50:50 smurph Exp $ */
d141 1
a141 1
void	symbol_delete(symbol_t *symbol);
d143 1
a143 1
void	symtable_open(void);
d145 1
a145 1
void	symtable_close(void);
d148 1
a148 1
	symtable_get(char *name);
d151 1
a151 1
	symlist_search(symlist_t *symlist, char *symname);
d154 1
a154 1
	symlist_add(symlist_t *symlist, symbol_t *symbol, int how);
d158 1
a158 1
void	symlist_free(symlist_t *symlist);
d160 3
a162 3
void	symlist_merge(symlist_t *symlist_dest, symlist_t *symlist_src1,
	    symlist_t *symlist_src2);
void	symtable_dump(FILE *ofile);
@


1.1.12.2
log
@sync to -current
@
text
@d1 1
a1 1
/* $OpenBSD: aicasm_symbol.h,v 1.1.12.1 2002/06/11 03:42:22 art Exp $ */
d14 2
a15 8
 * 2. Redistributions in binary form must reproduce at minimum a disclaimer
 *    substantially similar to the "NO WARRANTY" disclaimer below
 *    ("Disclaimer") and any redistribution must be conditioned upon
 *    including a substantially similar Disclaimer requirement for further
 *    binary redistribution.
 * 3. Neither the names of the above-listed copyright holders nor the names
 *    of any contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
d17 5
a21 10
 * Alternatively, this software may be distributed under the terms of the
 * GNU General Public License ("GPL") version 2 as published by the Free
 * Software Foundation.
 *
 * NO WARRANTY
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
d24 4
a27 4
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES.
d29 1
a29 1
 * $FreeBSD: src/sys/dev/aic7xxx/aicasm/aicasm_symbol.h,v 1.15 2002/06/05 22:51:54 gibbs Exp $
d45 1
a45 2
	CONDITIONAL,
	MACRO
d55 1
a55 1
	u_int	 address;
a58 1
	u_int8_t modes;
d70 1
a70 1
	u_int	value;
a79 1
	int	exported;
a85 13
struct macro_arg {
	TAILQ_ENTRY(macro_arg)	links;
	regex_t	arg_regex;
	char   *replacement_text;
};
TAILQ_HEAD(macro_arg_list, macro_arg) args;

struct macro_info {
	struct macro_arg_list args;
	int   narg;
	const char* body;
};

a100 1
		struct macro_info *macroinfo;
a113 6
typedef struct critical_section {
        TAILQ_ENTRY(critical_section) links;
        int begin_addr;
        int end_addr;
} critical_section_t;

a137 1
TAILQ_HEAD(cs_tailq, critical_section);
@


1.1.2.1
log
@Sync with -current
@
text
@@


1.1.2.2
log
@Merge in trunk
@
text
@a16 3
 * Alternatively, this software may be distributed under the terms of the
 * GNU Public License ("GPL").
 *
d29 1
a29 1
 * $FreeBSD: src/sys/dev/aic7xxx/aicasm/aicasm_symbol.h,v 1.12 2000/11/10 19:54:17 gibbs Exp $
a113 6
typedef struct critical_section {
        TAILQ_ENTRY(critical_section) links;
        int begin_addr;
        int end_addr;
} critical_section_t;

a137 1
TAILQ_HEAD(cs_tailq, critical_section);
a162 1

@


1.1.2.3
log
@Merge in -current from about a week ago
@
text
@d17 3
d32 1
a32 1
 * $FreeBSD: src/sys/dev/aic7xxx/aicasm_symbol.h,v 1.6 1999/12/06 18:23:31 gibbs Exp $
d117 6
d147 1
d151 1
a151 1
void	symbol_delete(symbol_t *symbol);
d153 1
a153 1
void	symtable_open(void);
d155 1
a155 1
void	symtable_close(void);
d158 1
a158 1
	symtable_get(char *name);
d161 1
a161 1
	symlist_search(symlist_t *symlist, char *symname);
d164 1
a164 1
	symlist_add(symlist_t *symlist, symbol_t *symbol, int how);
d168 5
a172 1
void	symlist_free(symlist_t *symlist);
a173 3
void	symlist_merge(symlist_t *symlist_dest, symlist_t *symlist_src1,
	    symlist_t *symlist_src2);
void	symtable_dump(FILE *ofile);
@


1.1.2.4
log
@Sync the SMP branch with 3.3
@
text
@d14 2
a15 8
 * 2. Redistributions in binary form must reproduce at minimum a disclaimer
 *    substantially similar to the "NO WARRANTY" disclaimer below
 *    ("Disclaimer") and any redistribution must be conditioned upon
 *    including a substantially similar Disclaimer requirement for further
 *    binary redistribution.
 * 3. Neither the names of the above-listed copyright holders nor the names
 *    of any contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
d17 5
a21 10
 * Alternatively, this software may be distributed under the terms of the
 * GNU General Public License ("GPL") version 2 as published by the Free
 * Software Foundation.
 *
 * NO WARRANTY
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
d24 4
a27 4
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES.
d29 1
a29 1
 * $FreeBSD: src/sys/dev/aic7xxx/aicasm/aicasm_symbol.h,v 1.15 2002/06/05 22:51:54 gibbs Exp $
d45 1
a45 2
	CONDITIONAL,
	MACRO
d55 1
a55 1
	u_int	 address;
a58 1
	u_int8_t modes;
d70 1
a70 1
	u_int	value;
a79 1
	int	exported;
a85 13
struct macro_arg {
	TAILQ_ENTRY(macro_arg)	links;
	regex_t	arg_regex;
	char   *replacement_text;
};
TAILQ_HEAD(macro_arg_list, macro_arg) args;

struct macro_info {
	struct macro_arg_list args;
	int   narg;
	const char* body;
};

a100 1
		struct macro_info *macroinfo;
a113 6
typedef struct critical_section {
        TAILQ_ENTRY(critical_section) links;
        int begin_addr;
        int end_addr;
} critical_section_t;

a137 1
TAILQ_HEAD(cs_tailq, critical_section);
@


1.1.2.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a1 2
/*	$NetBSD: aicasm_symbol.h,v 1.2 2003/04/19 19:26:11 fvdl Exp $	*/

a5 1
 * Copyright (c) 2002 Adaptec Inc.
d40 1
a40 1
 * $FreeBSD: src/sys/dev/aic7xxx/aicasm/aicasm_symbol.h,v 1.16 2002/08/31 06:39:41 gibbs Exp $
a42 3
#ifdef __linux__
#include "../queue.h"
#else
a43 1
#endif
a50 2
	ENUM_ENTRY,
	FIELD,
d52 1
a52 1
	ENUM,
d58 1
a58 1
} symtype;
a65 2
typedef SLIST_HEAD(symlist, symbol_node) symlist_t;

d67 6
a72 7
	u_int	  address;
	int	  size;
	amode_t	  mode;
	symlist_t fields;
	uint8_t	  valid_bitmask;
	uint8_t	  modes;
	int	  typecheck_masks;
d75 3
a77 1
struct field_info {
d79 1
a79 2
	uint8_t	  value;
	uint8_t	  mask;
d84 1
a84 1
	int	define;
d122 2
a123 2
		struct reg_info	  *rinfo;
		struct field_info *finfo;
d127 1
a127 1
		struct cond_info  *condinfo;
d140 1
a140 1
} symbol_node_t;
d143 3
a145 3
	TAILQ_ENTRY(critical_section) links;
	int begin_addr;
	int end_addr;
d196 2
a197 2
		      symlist_t *symlist_src2);
void	symtable_dump(FILE *ofile, FILE *dfile);
@


