head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.50
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.52
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.48
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.38
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.46
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.44
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.42
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.40
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.36
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.34
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.32
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.30
	OPENBSD_5_0:1.4.0.28
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.26
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.24
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.20
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.22
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.18
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.16
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.14
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.12
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.10
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.8
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.1.0.10
	OPENBSD_3_4_BASE:1.1
	UBC_SYNC_A:1.1
	SMP:1.1.0.8
	OPENBSD_3_3:1.1.0.6
	OPENBSD_3_3_BASE:1.1
	UBC:1.1.0.4
	UBC_SYNC_B:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2004.09.18.19.51.53;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.12.03.37.20;	author krw;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.24.23.27.55;	author krw;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.30.18.25.58;	author smurph;	state Exp;
branches
	1.1.4.1
	1.1.8.1;
next	;

1.1.4.1
date	2002.10.29.00.33.27;	author art;	state Exp;
branches;
next	;

1.1.8.1
date	2004.02.19.10.56.23;	author niklas;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2004.06.13.08.50.13;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.4
log
@repair build that reused y.tab.h for two different parsers
thus failing a build every other time.
make generated arrays const and repair rcsid generation for output.
allow one-step build; from krw@@
krw@@ ok
@
text
@%{
/*
/*	$OpenBSD: aicasm_macro_scan.l,v 1.3 2004/06/12 03:37:20 krw Exp $	*/
/*
 * Sub-Lexical Analyzer for macro invokation in 
 * the Aic7xxx SCSI Host adapter sequencer assembler.
 *
 * Copyright (c) 2001 Adaptec Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions, and the following disclaimer,
 *    without modification.
 * 2. Redistributions in binary form must reproduce at minimum a disclaimer
 *    substantially similar to the "NO WARRANTY" disclaimer below
 *    ("Disclaimer") and any redistribution must be conditioned upon
 *    including a substantially similar Disclaimer requirement for further
 *    binary redistribution.
 * 3. Neither the names of the above-listed copyright holders nor the names
 *    of any contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * Alternatively, this software may be distributed under the terms of the
 * GNU General Public License ("GPL") version 2 as published by the Free
 * Software Foundation.
 *
 * NO WARRANTY
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES.
 *
 * $Id: aicasm_macro_scan.l,v 1.3 2004/06/12 03:37:20 krw Exp $
 *
 * $FreeBSD: src/sys/dev/aic7xxx/aicasm/aicasm_macro_scan.l,v 1.5 2003/12/16 23:54:07 gibbs Exp $
 */

#include <sys/types.h>

#include <inttypes.h>
#include <limits.h>
#include <regex.h>
#include <stdio.h>
#include <string.h>
#include <sysexits.h>
#ifdef __linux__
#include "../queue.h"
#else
#include <sys/queue.h>
#endif

#include "aicasm.h"
#include "aicasm_symbol.h"
#include "aicasm_macro_gram.h"

#define MAX_STR_CONST 4096
static char string_buf[MAX_STR_CONST];
static char *string_buf_ptr;
static int  parren_count;
static char buf[255];
%}

WORD		[A-Za-z_][-A-Za-z_0-9]*
SPACE		[ \t]+
MCARG		[^(), \t]+

%x ARGLIST

%%
\n			{
				++yylineno;
			}
\r			;
<ARGLIST>{SPACE}	;
<ARGLIST>\(		{
				parren_count++;
				if (parren_count == 1) {
					string_buf_ptr = string_buf;
					return ('(');
				}
				*string_buf_ptr++ = '(';
			}
<ARGLIST>\)		{
				if (parren_count == 1) {
					if (string_buf_ptr != string_buf) {
						/*
						 * Return an argument and
						 * rescan this parren so we
						 * can return it as well.
						 */
						*string_buf_ptr = '\0';
						mmlval.str = string_buf;
						string_buf_ptr = string_buf;
						unput(')');
						return T_ARG;
					}
					BEGIN INITIAL;
					return (')');
				}
				parren_count--;
				*string_buf_ptr++ = ')';
			}
<ARGLIST>{MCARG}	{
				char *yptr;

				yptr = mmtext;
				while (*yptr)
					*string_buf_ptr++ = *yptr++;
			}
<ARGLIST>\,		{
				if (string_buf_ptr != string_buf) {
					/*
					 * Return an argument and
					 * rescan this comma so we
					 * can return it as well.
					 */
					*string_buf_ptr = '\0';
					mmlval.str = string_buf;
					string_buf_ptr = string_buf;
					unput(',');
					return T_ARG;
				}
				return ',';
			}
{WORD}[(]		{
				/* May be a symbol or a macro invocation. */
				mmlval.sym = symtable_get(mmtext);
				if (mmlval.sym->type != MACRO) {
					stop("Expecting Macro Name",
					     EX_DATAERR);
				}
				unput('(');
				parren_count = 0;
				BEGIN ARGLIST;
				return T_SYMBOL;
			}
.			{ 
				snprintf(buf, sizeof(buf), "Invalid character "
					 "'%c'", mmtext[0]);
				stop(buf, EX_DATAERR);
			}
%%

int
mmwrap()
{
	stop("EOF encountered in macro call", EX_DATAERR);
}
@


1.3
log
@Sync with FreeBSD aicasm. No changes to the generated reg.h or seq.h
files used by ahc or ahd result from these changes, so they are not
being sync'ed at this time.

ok deraadt@@
@
text
@d3 1
a3 1
/*	$OpenBSD: aicasm_macro_scan.l,v 1.2 2003/12/24 23:27:55 krw Exp $	*/
d43 1
a43 1
 * $Id: //depot/aic7xxx/aic7xxx/aicasm/aicasm_macro_scan.l#8 $
d64 1
a64 1
#include "y.tab.h"
@


1.2
log
@Sync ahc with NetBSD, which was in turn updated from FreeBSD by Pascal
Renauld of Network Storage Solutions, Inc. Many fixes, wider device
support. In particular, the notorious 'Target 0' problem seems to be
fixed.

Does *not* include any updates to isa or eisa code beyond what was
necessary to compile.

Known issues:

1) Tagged Queuing is probably not optimal.

2) PPR negotiation may not be fully functional.

3) No support yet for freezing devices or channels.

4) The mechanism for preventing 'A' and 'B' channel confusion during probe
can fail if scsibus > 254 found.

5) Requeuing I/O's not working. A workaround will be committed almost
immediately. At the moment timeouts, SCSI message rejects, aborting
SCB's and trying to freeze a device may cause incomplete i/o's to be
reported as complete.

6) Verbosity and probe messages need work.

7) Last disk on bus seems to go through an extra re-negotiation.

8) >16 devices on an adapter will trigger the usual problems of total
openings exceeding available SCB's under heavy load.

Tested by deraadt@@, beck@@, miod@@, naddy@@, drahn@@, marc@@ amoung
others.

ok deraadt@@.
@
text
@d2 2
a3 3
/*	$OpenBSD$	*/
/*	$NetBSD: aicasm_macro_scan.l,v 1.1 2003/04/19 19:26:11 fvdl Exp $	*/

d43 3
a45 1
 * $FreeBSD: src/sys/dev/aic7xxx/aicasm/aicasm_macro_scan.l,v 1.4 2002/09/27 03:23:02 gibbs Exp $
d83 1
d116 1
a116 1
				yptr = yytext;
d137 1
a137 1
				mmlval.sym = symtable_get(yytext);
d149 1
a149 1
					 "'%c'", yytext[0]);
@


1.1
log
@New aicasm synced with FreeBSD.
@
text
@d2 3
d44 1
a44 3
 * $Id$
 *
 * $FreeBSD: src/sys/dev/aic7xxx/aicasm/aicasm_macro_scan.l,v 1.1 2002/04/24 16:24:43 gibbs Exp $
d49 1
d55 3
d59 1
d114 1
a114 1
				yptr = mmtext;
d135 1
a135 1
				mmlval.sym = symtable_get(mmtext);
d147 1
a147 1
					 "'%c'", mmtext[0]);
@


1.1.8.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a1 3
/*	$OpenBSD$	*/
/*	$NetBSD: aicasm_macro_scan.l,v 1.1 2003/04/19 19:26:11 fvdl Exp $	*/

d41 3
a43 1
 * $FreeBSD: src/sys/dev/aic7xxx/aicasm/aicasm_macro_scan.l,v 1.4 2002/09/27 03:23:02 gibbs Exp $
a47 1
#include <inttypes.h>
a52 3
#ifdef __linux__
#include "../queue.h"
#else
a53 1
#endif
d108 1
a108 1
				yptr = yytext;
d129 1
a129 1
				mmlval.sym = symtable_get(yytext);
d141 1
a141 1
					 "'%c'", yytext[0]);
@


1.1.8.2
log
@sync to HEAD
@
text
@a1 1
/*
d3 2
d44 1
a44 3
 * $Id$
 *
 * $FreeBSD: src/sys/dev/aic7xxx/aicasm/aicasm_macro_scan.l,v 1.5 2003/12/16 23:54:07 gibbs Exp $
a81 1
\r			;
d114 1
a114 1
				yptr = mmtext;
d135 1
a135 1
				mmlval.sym = symtable_get(mmtext);
d147 1
a147 1
					 "'%c'", mmtext[0]);
@


1.1.4.1
log
@sync to -current
@
text
@@

