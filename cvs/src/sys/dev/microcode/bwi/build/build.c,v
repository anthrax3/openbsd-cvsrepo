head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.1.0.28
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.24
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.22
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.20
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.18
	OPENBSD_5_0:1.1.0.16
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.14
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.12
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.8
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.10
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.6
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.4
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.07.20.02.03.21;	author guenther;	state Exp;
branches;
next	1.3;
commitid	gWk0dA1RlTj45ZIB;

1.3
date	2014.07.12.19.01.49;	author tedu;	state Exp;
branches;
next	1.2;
commitid	oZu656PKSRXbpZyM;

1.2
date	2014.07.12.18.48.18;	author tedu;	state Exp;
branches;
next	1.1;
commitid	I19imNlAX05zJOED;

1.1
date	2007.10.04.17.46.09;	author mglocker;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Make sure the correct errno is reported by warn* or err* and not
the errno of an intervening cleanup operation like close/unlink/etc.
Also, the format string for warn* and err* shouldn't end with a newline.

Diff from Doug Hogan (doug (at) acyclic.org)
@
text
@/*	$OpenBSD: build.c,v 1.3 2014/07/12 19:01:49 tedu Exp $ */

/*
 * Copyright (c) 2006 Marcus Glocker <mglocker@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

//#define VERBOSE		1
#define FILENAME	"bwi-airforce"

struct header {
	char	filename[64];
	int	filesize;
	int	fileoffset;
};

int
main(int argc, char *argv[])
{
	void		*p;
	int		 i, j, offset;
	int		 fdout, fdin;
	int		 nfiles, headersize;
	int		 fwsize, totalsize;
	struct header	 h[argc - 1];
	struct stat	 s;

	if (argc < 2) {
		printf("%s <firmware files>\n", argv[0]);
		exit(1);
	}

	nfiles = argc - 1; /* number of firmware files */
	headersize = sizeof(h) + sizeof(nfiles); /* size of file header */

	/* initialize header struct */
	for (i = 1, j = 0, fwsize = 0; i < argc; i++, j++) {
		bzero(h[j].filename, sizeof(h[j].filename));
		strlcpy(h[j].filename, argv[i], sizeof(h[j].filename));

		if (stat(h[j].filename, &s) == -1)
			err(1, "header initialization failed");

		h[j].filesize = s.st_size;
		h[j].fileoffset = 0;

		fwsize += h[j].filesize;
#ifdef VERBOSE
		printf("create header entry for %s (%d bytes)\n",
		    h[j].filename, h[j].filesize);
#endif
	}

	/* calculate total file size */
	totalsize = headersize + fwsize;
#if VERBOSE
	printf("\n");
	printf("header size = %d bytes, ", headersize);
	printf("fw size = %d bytes, ", fwsize);
	printf("total file size = %d bytes\n", totalsize);
	printf("\n");
#endif

	/* calculating firmware offsets */
	for (i = 0, offset = headersize; i < nfiles; i++) {
		h[i].fileoffset = offset;
		offset += h[i].filesize;
#ifdef VERBOSE
		printf("offset of %s = %d\n", h[i].filename, h[i].fileoffset);
#endif
	}

	/* open output file */
	if ((fdout = open(FILENAME, O_CREAT|O_TRUNC|O_RDWR, 0644)) == -1)
		err(1, "open output file failed");

	/* host to network byte order */
	for (i = 0; i < nfiles; i++) {
		h[i].filesize = htonl(h[i].filesize);
		h[i].fileoffset = htonl(h[i].fileoffset);
	}
	nfiles = htonl(nfiles);

	/* write header */
	if (write(fdout, &nfiles, sizeof(nfiles)) < 1) {
		int saved_errno = errno;
		close(fdout);
		errc(1, saved_errno, "write header 1 to output file failed");
	}
	if (write(fdout, h, headersize - sizeof(nfiles)) < 1) {
		int saved_errno = errno;
		close(fdout);
		errc(1, saved_errno, "write header 2 to output file failed");
	}

	/* network to host byte order */
	nfiles = ntohl(nfiles);
	for (i = 0; i < nfiles; i++) {
		h[i].filesize = ntohl(h[i].filesize);
		h[i].fileoffset = ntohl(h[i].fileoffset);
	}

	/* write each file */
	for (i = 0; i < nfiles; i++) {
		if ((fdin = open(h[i].filename, O_RDONLY)) == -1) {
			int saved_errno = errno;
			close(fdout);
			errc(1, saved_errno, "open input file failed");
		}
		if ((p = malloc(h[i].filesize)) == NULL) {
			int saved_errno = errno;
			close(fdout);
			close(fdin);
			errc(1, saved_errno, "malloc");
		}
		if (read(fdin, p, h[i].filesize) < 1) {
			int saved_errno = errno;
			free(p);
			close(fdout);
			close(fdin);
			errc(1, saved_errno, "read input file failed");
		}
		if (write(fdout, p, h[i].filesize) < 1) {
			int saved_errno = errno;
			free(p);
			close(fdout);
			close(fdin);
			errc(1, saved_errno, "write to output file failed");
		}
		free(p);
		close(fdin);
	}

	close(fdout);

#ifdef VERBOSE
	printf("\n");
#endif

	/* game over */
	printf("wrote %d files to %s (%d bytes).\n",
	    nfiles, FILENAME, totalsize);

	return (0);
}
@


1.3
log
@revert bogus free changes in not kernel files. got a little trigger happy.
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.2 2014/07/12 18:48:18 tedu Exp $ */
d23 1
d108 1
d110 1
a110 1
		err(1, "write header 1 to output file failed\n");
d113 1
d115 1
a115 1
		err(1, "write header 2 to output file failed\n");
d128 1
d130 1
a130 1
			err(1, "open input file failed\n");
d133 1
d136 1
a136 1
			err(1, "malloc");
d139 1
d143 1
a143 1
			err(1, "read input file failed\n");
d146 1
d150 1
a150 1
			err(1, "write to output file failed\n");
@


1.2
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.1 2007/10/04 17:46:09 mglocker Exp $ */
d134 1
a134 1
			free(p, 0);
d140 1
a140 1
			free(p, 0);
d145 1
a145 1
		free(p, 0);
@


1.1
log
@Import the bwi single firmware-file builder / extractor before we forget
about it.  It's not linked into microcode/Makefile.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d134 1
a134 1
			free(p);
d140 1
a140 1
			free(p);
d145 1
a145 1
		free(p);
@

