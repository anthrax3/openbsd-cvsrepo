head	1.4;
access;
symbols
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.12
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.1.0.28
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.24
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.22
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.20
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.18
	OPENBSD_5_0:1.1.0.16
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.14
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.12
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.8
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.10
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.6
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.4
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.09.24.00.13.13;	author doug;	state Exp;
branches;
next	1.3;
commitid	vbzyzJXrp3exZiEy;

1.3
date	2014.07.12.19.01.49;	author tedu;	state Exp;
branches;
next	1.2;
commitid	oZu656PKSRXbpZyM;

1.2
date	2014.07.12.18.48.18;	author tedu;	state Exp;
branches;
next	1.1;
commitid	I19imNlAX05zJOED;

1.1
date	2007.10.04.17.46.09;	author mglocker;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Replace a few malloc() calls with reallocarray() so it checks for overflow.

ok deraadt@@
@
text
@/*	$OpenBSD: extract.c,v 1.3 2014/07/12 19:01:49 tedu Exp $ */

/*
 * Copyright (c) 2006 Marcus Glocker <mglocker@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <err.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

struct header {
	char	filename[64];
	int	filesize;
	int	fileoffset;
};

int
main(int argc, char *argv[])
{
	int		  i, fdin, fdout, nfiles;
	void		 *p;
	struct header	**h;

	if (argc < 2) {
		printf("%s <firmware file>\n", argv[0]);
		exit(1);
	}

	/* open firmware file */
	if ((fdin = open(argv[1], O_RDONLY)) == -1)
		err(1, "open of input file failed");

	/* read first header */
	if (read(fdin, &nfiles, sizeof(nfiles)) < 1)
		err(1, "first header parse failed");
	nfiles = ntohl(nfiles);

	/* allocate space for header struct */
	if ((h = reallocarray(NULL, nfiles, sizeof(*h))) == NULL)
		err(1, "malloc");
	for (i = 0; i < nfiles; i++) {
		if ((h[i] = malloc(sizeof(struct header))) == NULL)
			err(1, "malloc");
	}

	/* read header */
	for (i = 0; i < nfiles; i++) {
		if (read(fdin, h[i]->filename, sizeof(h[i]->filename)) < 1)
			err(1, "filename header read failed\n");
		if (read(fdin, &h[i]->filesize, sizeof(h[i]->filesize)) < 1)
			err(1, "filesize header read failed\n");
		h[i]->filesize = htonl(h[i]->filesize);
		if (read(fdin, &h[i]->fileoffset, sizeof(h[i]->fileoffset)) < 1)
			err(1, "fileoffset header read failed\n");
		h[i]->fileoffset = htonl(h[i]->fileoffset);
	}

	/* write each file */
	for (i = 0; i < nfiles; i++) {
		if ((fdout = open(h[i]->filename, O_CREAT|O_TRUNC|O_RDWR, 0644))
		    == -1)
			err(1, "open of output file failed");
		if ((p = malloc(h[i]->filesize)) == NULL)
			err(1, "malloc");
		if (lseek(fdin, h[i]->fileoffset, SEEK_SET) == -1)
			err(1, "lseek");
		if (read(fdin, p, h[i]->filesize) < 1)
			err(1, "read from input file failed");
		if (write(fdout, p, h[i]->filesize) < 1)
			err(1, "write to output file failed");
		free(p);
		close(fdout);
		printf("extracting %s (filesize %d, fileoffset %d)\n",
		    h[i]->filename, h[i]->filesize, h[i]->fileoffset);
	}

	/* free header space */
	for (i = 0; i < nfiles; i++)
		free(h[i]);
	free(h);

	/* game over */
	close (fdin);

	return (0);
}
@


1.3
log
@revert bogus free changes in not kernel files. got a little trigger happy.
@
text
@d1 1
a1 1
/*	$OpenBSD: extract.c,v 1.2 2014/07/12 18:48:18 tedu Exp $ */
d56 1
a56 1
	if ((h = malloc(nfiles * sizeof(*h))) == NULL)
@


1.2
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: extract.c,v 1.1 2007/10/04 17:46:09 mglocker Exp $ */
d88 1
a88 1
		free(p, 0);
d96 2
a97 2
		free(h[i], 0);
	free(h, 0);
@


1.1
log
@Import the bwi single firmware-file builder / extractor before we forget
about it.  It's not linked into microcode/Makefile.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d88 1
a88 1
		free(p);
d96 2
a97 2
		free(h[i]);
	free(h);
@

