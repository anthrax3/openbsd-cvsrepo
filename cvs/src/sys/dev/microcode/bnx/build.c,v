head	1.9;
access;
symbols
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.10
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.8
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.6
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.5.0.22
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.18
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.16
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.14
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.12
	OPENBSD_5_0:1.5.0.10
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.10
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.8
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.6
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.4
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4;
locks; strict;
comment	@ * @;


1.9
date	2017.08.27.08.15.48;	author otto;	state Exp;
branches;
next	1.8;
commitid	J7zgqXEDYMKP9CFf;

1.8
date	2016.12.18.18.28.38;	author krw;	state Exp;
branches;
next	1.7;
commitid	fSD9BCfnjZyV2uP8;

1.7
date	2014.07.12.19.01.49;	author tedu;	state Exp;
branches;
next	1.6;
commitid	oZu656PKSRXbpZyM;

1.6
date	2014.07.12.18.48.18;	author tedu;	state Exp;
branches;
next	1.5;
commitid	I19imNlAX05zJOED;

1.5
date	2009.07.03.04.34.51;	author dlg;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.10.18.09.25;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.02.06.03.31;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.02.02.30.13;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.20.22.16.04;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@always use %s to print a non-constant string; ok deraadt@@ guenther@@
@
text
@/*	$OpenBSD: build.c,v 1.8 2016/12/18 18:28:38 krw Exp $	*/

/*
 * Copyright (c) 2004 Theo de Raadt <deraadt@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#include <sys/types.h>
#include <dev/pci/if_bnxreg.h>
#include <fcntl.h>
#include <stdlib.h>
#include <err.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>

#include "bnxfw.h"

#define nitems(_a) (sizeof((_a)) / sizeof((_a)[0]))

int	bnx_rv2p_proc1len;
int	bnx_rv2p_proc2len;

struct chunks {
	void *start;
	int *len;
};

#define FILENAME_B06 "bnx-b06"
struct chunks chunks_b06[] = {
	{ bnx_COM_b06FwText, &bnx_COM_b06FwTextLen },
	{ bnx_COM_b06FwData, &bnx_COM_b06FwDataLen },
	{ bnx_COM_b06FwRodata, &bnx_COM_b06FwRodataLen },
	{ bnx_COM_b06FwBss, &bnx_COM_b06FwBssLen },
	{ bnx_COM_b06FwSbss, &bnx_COM_b06FwSbssLen },

	{ bnx_RXP_b06FwText, &bnx_RXP_b06FwTextLen },
	{ bnx_RXP_b06FwData, &bnx_RXP_b06FwDataLen },
	{ bnx_RXP_b06FwRodata, &bnx_RXP_b06FwRodataLen },
	{ bnx_RXP_b06FwBss, &bnx_RXP_b06FwBssLen },
	{ bnx_RXP_b06FwSbss, &bnx_RXP_b06FwSbssLen },

	{ bnx_TPAT_b06FwText, &bnx_TPAT_b06FwTextLen },
	{ bnx_TPAT_b06FwData, &bnx_TPAT_b06FwDataLen },
	{ bnx_TPAT_b06FwRodata, &bnx_TPAT_b06FwRodataLen },
	{ bnx_TPAT_b06FwBss, &bnx_TPAT_b06FwBssLen },
	{ bnx_TPAT_b06FwSbss, &bnx_TPAT_b06FwSbssLen },

	{ bnx_TXP_b06FwText, &bnx_TXP_b06FwTextLen },
	{ bnx_TXP_b06FwData, &bnx_TXP_b06FwDataLen },
	{ bnx_TXP_b06FwRodata, &bnx_TXP_b06FwRodataLen },
	{ bnx_TXP_b06FwBss, &bnx_TXP_b06FwBssLen },
	{ bnx_TXP_b06FwSbss, &bnx_TXP_b06FwSbssLen }
};

#define FILENAME_B09 "bnx-b09"
struct chunks chunks_b09[] = {
	{ bnx_COM_b09FwText, &bnx_COM_b09FwTextLen },
	{ bnx_COM_b09FwData, &bnx_COM_b09FwDataLen },
	{ bnx_COM_b09FwRodata, &bnx_COM_b09FwRodataLen },
	{ bnx_COM_b09FwBss, &bnx_COM_b09FwBssLen },
	{ bnx_COM_b09FwSbss, &bnx_COM_b09FwSbssLen },

	{ bnx_RXP_b09FwText, &bnx_RXP_b09FwTextLen },
	{ bnx_RXP_b09FwData, &bnx_RXP_b09FwDataLen },
	{ bnx_RXP_b09FwRodata, &bnx_RXP_b09FwRodataLen },
	{ bnx_RXP_b09FwBss, &bnx_RXP_b09FwBssLen },
	{ bnx_RXP_b09FwSbss, &bnx_RXP_b09FwSbssLen },

	{ bnx_TPAT_b09FwText, &bnx_TPAT_b09FwTextLen },
	{ bnx_TPAT_b09FwData, &bnx_TPAT_b09FwDataLen },
	{ bnx_TPAT_b09FwRodata, &bnx_TPAT_b09FwRodataLen },
	{ bnx_TPAT_b09FwBss, &bnx_TPAT_b09FwBssLen },
	{ bnx_TPAT_b09FwSbss, &bnx_TPAT_b09FwSbssLen },

	{ bnx_TXP_b09FwText, &bnx_TXP_b09FwTextLen },
	{ bnx_TXP_b09FwData, &bnx_TXP_b09FwDataLen },
	{ bnx_TXP_b09FwRodata, &bnx_TXP_b09FwRodataLen },
	{ bnx_TXP_b09FwBss, &bnx_TXP_b09FwBssLen },
	{ bnx_TXP_b09FwSbss, &bnx_TXP_b09FwSbssLen }
};

#define FILENAME_RV2P "bnx-rv2p"
struct chunks chunks_rv2p[] = {
	{ bnx_rv2p_proc1, &bnx_rv2p_proc1len },
	{ bnx_rv2p_proc2, &bnx_rv2p_proc2len }
};

#define FILENAME_XI_RV2P "bnx-xi-rv2p"
struct chunks chunks_xi_rv2p[] = {
	{ bnx_xi_rv2p_proc1, &bnx_rv2p_proc1len },
	{ bnx_xi_rv2p_proc2, &bnx_rv2p_proc2len }
};

#define FILENAME_XI90_RV2P "bnx-xi90-rv2p"
struct chunks chunks_xi90_rv2p[] = {
	{ bnx_xi90_rv2p_proc1, &bnx_rv2p_proc1len },
	{ bnx_xi90_rv2p_proc2, &bnx_rv2p_proc2len }
};

void
hswapn(u_int32_t *p, int wcount)
{
	for (; wcount; wcount -=4) {
		*p = htonl(*p);
		p++;
	}
}

void
write_firmware(char *filename, void *header, size_t hlen,
    struct chunks *chunks, u_int nchunks)
{
	int fd, i, total;
	ssize_t rlen;

	printf("creating %s", filename);
	fd = open(filename, O_WRONLY|O_CREAT|O_TRUNC, 0644);
	if (fd == -1)
		err(1, "%s", filename);

	rlen = write(fd, header, hlen);
	if (rlen == -1)
		err(1, "%s", filename);
	if (rlen != hlen)
		errx(1, "%s: short write", filename);
	total = rlen;
	printf(" [%d", total);
	fflush(stdout);

	for (i = 0; i < nchunks; i++) {
		hswapn(chunks[i].start, *chunks[i].len);
		rlen = write(fd, chunks[i].start, *chunks[i].len);
		if (rlen == -1) {
			printf("\n");
			err(1, "%s", filename);
		}
		if (rlen != *chunks[i].len) {
			printf("\n");
			errx(1, "%s: short write", filename);
		}
		printf("+%zd", rlen);
		fflush(stdout);
		total += rlen;
	}

	printf("] total %d\n", total);

	close(fd);
}

int
main(int argc, char *argv[])
{
	struct	bnx_firmware_header *bf;
	struct	bnx_rv2p_header	*rh;

	bf = (struct bnx_firmware_header *)malloc(sizeof *bf);
	bzero(bf, sizeof *bf);

	/* initialize the file header */
	bf->bnx_COM_FwReleaseMajor = htonl(bnx_COM_b06FwReleaseMajor);
	bf->bnx_COM_FwReleaseMinor = htonl(bnx_COM_b06FwReleaseMinor);
	bf->bnx_COM_FwReleaseFix = htonl(bnx_COM_b06FwReleaseFix);
	bf->bnx_COM_FwStartAddr = htonl(bnx_COM_b06FwStartAddr);
	bf->bnx_COM_FwTextAddr = htonl(bnx_COM_b06FwTextAddr);
	bf->bnx_COM_FwTextLen = htonl(bnx_COM_b06FwTextLen);
	bf->bnx_COM_FwDataAddr = htonl(bnx_COM_b06FwDataAddr);
	bf->bnx_COM_FwDataLen = htonl(bnx_COM_b06FwDataLen);
	bf->bnx_COM_FwRodataAddr = htonl(bnx_COM_b06FwRodataAddr);
	bf->bnx_COM_FwRodataLen = htonl(bnx_COM_b06FwRodataLen);
	bf->bnx_COM_FwBssAddr = htonl(bnx_COM_b06FwBssAddr);
	bf->bnx_COM_FwBssLen = htonl(bnx_COM_b06FwBssLen);
	bf->bnx_COM_FwSbssAddr = htonl(bnx_COM_b06FwSbssAddr);
	bf->bnx_COM_FwSbssLen = htonl(bnx_COM_b06FwSbssLen);

	bf->bnx_RXP_FwReleaseMajor = htonl(bnx_RXP_b06FwReleaseMajor);
	bf->bnx_RXP_FwReleaseMinor = htonl(bnx_RXP_b06FwReleaseMinor);
	bf->bnx_RXP_FwReleaseFix = htonl(bnx_RXP_b06FwReleaseFix);
	bf->bnx_RXP_FwStartAddr = htonl(bnx_RXP_b06FwStartAddr);
	bf->bnx_RXP_FwTextAddr = htonl(bnx_RXP_b06FwTextAddr);
	bf->bnx_RXP_FwTextLen = htonl(bnx_RXP_b06FwTextLen);
	bf->bnx_RXP_FwDataAddr = htonl(bnx_RXP_b06FwDataAddr);
	bf->bnx_RXP_FwDataLen = htonl(bnx_RXP_b06FwDataLen);
	bf->bnx_RXP_FwRodataAddr = htonl(bnx_RXP_b06FwRodataAddr);
	bf->bnx_RXP_FwRodataLen = htonl(bnx_RXP_b06FwRodataLen);
	bf->bnx_RXP_FwBssAddr = htonl(bnx_RXP_b06FwBssAddr);
	bf->bnx_RXP_FwBssLen = htonl(bnx_RXP_b06FwBssLen);
	bf->bnx_RXP_FwSbssAddr = htonl(bnx_RXP_b06FwSbssAddr);
	bf->bnx_RXP_FwSbssLen = htonl(bnx_RXP_b06FwSbssLen);

	bf->bnx_TPAT_FwReleaseMajor = htonl(bnx_TPAT_b06FwReleaseMajor);
	bf->bnx_TPAT_FwReleaseMinor = htonl(bnx_TPAT_b06FwReleaseMinor);
	bf->bnx_TPAT_FwReleaseFix = htonl(bnx_TPAT_b06FwReleaseFix);
	bf->bnx_TPAT_FwStartAddr = htonl(bnx_TPAT_b06FwStartAddr);
	bf->bnx_TPAT_FwTextAddr = htonl(bnx_TPAT_b06FwTextAddr);
	bf->bnx_TPAT_FwTextLen = htonl(bnx_TPAT_b06FwTextLen);
	bf->bnx_TPAT_FwDataAddr = htonl(bnx_TPAT_b06FwDataAddr);
	bf->bnx_TPAT_FwDataLen = htonl(bnx_TPAT_b06FwDataLen);
	bf->bnx_TPAT_FwRodataAddr = htonl(bnx_TPAT_b06FwRodataAddr);
	bf->bnx_TPAT_FwRodataLen = htonl(bnx_TPAT_b06FwRodataLen);
	bf->bnx_TPAT_FwBssAddr = htonl(bnx_TPAT_b06FwBssAddr);
	bf->bnx_TPAT_FwBssLen = htonl(bnx_TPAT_b06FwBssLen);
	bf->bnx_TPAT_FwSbssAddr = htonl(bnx_TPAT_b06FwSbssAddr);
	bf->bnx_TPAT_FwSbssLen = htonl(bnx_TPAT_b06FwSbssLen);

	bf->bnx_TXP_FwReleaseMajor = htonl(bnx_TXP_b06FwReleaseMajor);
	bf->bnx_TXP_FwReleaseMinor = htonl(bnx_TXP_b06FwReleaseMinor);
	bf->bnx_TXP_FwReleaseFix = htonl(bnx_TXP_b06FwReleaseFix);
	bf->bnx_TXP_FwStartAddr = htonl(bnx_TXP_b06FwStartAddr);
	bf->bnx_TXP_FwTextAddr = htonl(bnx_TXP_b06FwTextAddr);
	bf->bnx_TXP_FwTextLen = htonl(bnx_TXP_b06FwTextLen);
	bf->bnx_TXP_FwDataAddr = htonl(bnx_TXP_b06FwDataAddr);
	bf->bnx_TXP_FwDataLen = htonl(bnx_TXP_b06FwDataLen);
	bf->bnx_TXP_FwRodataAddr = htonl(bnx_TXP_b06FwRodataAddr);
	bf->bnx_TXP_FwRodataLen = htonl(bnx_TXP_b06FwRodataLen);
	bf->bnx_TXP_FwBssAddr = htonl(bnx_TXP_b06FwBssAddr);
	bf->bnx_TXP_FwBssLen = htonl(bnx_TXP_b06FwBssLen);
	bf->bnx_TXP_FwSbssAddr = htonl(bnx_TXP_b06FwSbssAddr);
	bf->bnx_TXP_FwSbssLen = htonl(bnx_TXP_b06FwSbssLen);

	write_firmware(FILENAME_B06, bf, sizeof(*bf), chunks_b06,
	    nitems(chunks_b06));

	bzero(bf, sizeof *bf);

	bf->bnx_COM_FwReleaseMajor = htonl(bnx_COM_b09FwReleaseMajor);
	bf->bnx_COM_FwReleaseMinor = htonl(bnx_COM_b09FwReleaseMinor);
	bf->bnx_COM_FwReleaseFix = htonl(bnx_COM_b09FwReleaseFix);
	bf->bnx_COM_FwStartAddr = htonl(bnx_COM_b09FwStartAddr);
	bf->bnx_COM_FwTextAddr = htonl(bnx_COM_b09FwTextAddr);
	bf->bnx_COM_FwTextLen = htonl(bnx_COM_b09FwTextLen);
	bf->bnx_COM_FwDataAddr = htonl(bnx_COM_b09FwDataAddr);
	bf->bnx_COM_FwDataLen = htonl(bnx_COM_b09FwDataLen);
	bf->bnx_COM_FwRodataAddr = htonl(bnx_COM_b09FwRodataAddr);
	bf->bnx_COM_FwRodataLen = htonl(bnx_COM_b09FwRodataLen);
	bf->bnx_COM_FwBssAddr = htonl(bnx_COM_b09FwBssAddr);
	bf->bnx_COM_FwBssLen = htonl(bnx_COM_b09FwBssLen);
	bf->bnx_COM_FwSbssAddr = htonl(bnx_COM_b09FwSbssAddr);
	bf->bnx_COM_FwSbssLen = htonl(bnx_COM_b09FwSbssLen);

	bf->bnx_RXP_FwReleaseMajor = htonl(bnx_RXP_b09FwReleaseMajor);
	bf->bnx_RXP_FwReleaseMinor = htonl(bnx_RXP_b09FwReleaseMinor);
	bf->bnx_RXP_FwReleaseFix = htonl(bnx_RXP_b09FwReleaseFix);
	bf->bnx_RXP_FwStartAddr = htonl(bnx_RXP_b09FwStartAddr);
	bf->bnx_RXP_FwTextAddr = htonl(bnx_RXP_b09FwTextAddr);
	bf->bnx_RXP_FwTextLen = htonl(bnx_RXP_b09FwTextLen);
	bf->bnx_RXP_FwDataAddr = htonl(bnx_RXP_b09FwDataAddr);
	bf->bnx_RXP_FwDataLen = htonl(bnx_RXP_b09FwDataLen);
	bf->bnx_RXP_FwRodataAddr = htonl(bnx_RXP_b09FwRodataAddr);
	bf->bnx_RXP_FwRodataLen = htonl(bnx_RXP_b09FwRodataLen);
	bf->bnx_RXP_FwBssAddr = htonl(bnx_RXP_b09FwBssAddr);
	bf->bnx_RXP_FwBssLen = htonl(bnx_RXP_b09FwBssLen);
	bf->bnx_RXP_FwSbssAddr = htonl(bnx_RXP_b09FwSbssAddr);
	bf->bnx_RXP_FwSbssLen = htonl(bnx_RXP_b09FwSbssLen);

	bf->bnx_TPAT_FwReleaseMajor = htonl(bnx_TPAT_b09FwReleaseMajor);
	bf->bnx_TPAT_FwReleaseMinor = htonl(bnx_TPAT_b09FwReleaseMinor);
	bf->bnx_TPAT_FwReleaseFix = htonl(bnx_TPAT_b09FwReleaseFix);
	bf->bnx_TPAT_FwStartAddr = htonl(bnx_TPAT_b09FwStartAddr);
	bf->bnx_TPAT_FwTextAddr = htonl(bnx_TPAT_b09FwTextAddr);
	bf->bnx_TPAT_FwTextLen = htonl(bnx_TPAT_b09FwTextLen);
	bf->bnx_TPAT_FwDataAddr = htonl(bnx_TPAT_b09FwDataAddr);
	bf->bnx_TPAT_FwDataLen = htonl(bnx_TPAT_b09FwDataLen);
	bf->bnx_TPAT_FwRodataAddr = htonl(bnx_TPAT_b09FwRodataAddr);
	bf->bnx_TPAT_FwRodataLen = htonl(bnx_TPAT_b09FwRodataLen);
	bf->bnx_TPAT_FwBssAddr = htonl(bnx_TPAT_b09FwBssAddr);
	bf->bnx_TPAT_FwBssLen = htonl(bnx_TPAT_b09FwBssLen);
	bf->bnx_TPAT_FwSbssAddr = htonl(bnx_TPAT_b09FwSbssAddr);
	bf->bnx_TPAT_FwSbssLen = htonl(bnx_TPAT_b09FwSbssLen);

	bf->bnx_TXP_FwReleaseMajor = htonl(bnx_TXP_b09FwReleaseMajor);
	bf->bnx_TXP_FwReleaseMinor = htonl(bnx_TXP_b09FwReleaseMinor);
	bf->bnx_TXP_FwReleaseFix = htonl(bnx_TXP_b09FwReleaseFix);
	bf->bnx_TXP_FwStartAddr = htonl(bnx_TXP_b09FwStartAddr);
	bf->bnx_TXP_FwTextAddr = htonl(bnx_TXP_b09FwTextAddr);
	bf->bnx_TXP_FwTextLen = htonl(bnx_TXP_b09FwTextLen);
	bf->bnx_TXP_FwDataAddr = htonl(bnx_TXP_b09FwDataAddr);
	bf->bnx_TXP_FwDataLen = htonl(bnx_TXP_b09FwDataLen);
	bf->bnx_TXP_FwRodataAddr = htonl(bnx_TXP_b09FwRodataAddr);
	bf->bnx_TXP_FwRodataLen = htonl(bnx_TXP_b09FwRodataLen);
	bf->bnx_TXP_FwBssAddr = htonl(bnx_TXP_b09FwBssAddr);
	bf->bnx_TXP_FwBssLen = htonl(bnx_TXP_b09FwBssLen);
	bf->bnx_TXP_FwSbssAddr = htonl(bnx_TXP_b09FwSbssAddr);
	bf->bnx_TXP_FwSbssLen = htonl(bnx_TXP_b09FwSbssLen);

	write_firmware(FILENAME_B09, bf, sizeof(*bf), chunks_b09,
	    nitems(chunks_b09));

	free(bf);

	rh = (struct bnx_rv2p_header *)malloc(sizeof *rh);

	bzero(rh, sizeof *rh);
	bnx_rv2p_proc1len = sizeof bnx_rv2p_proc1;
	bnx_rv2p_proc2len = sizeof bnx_rv2p_proc2;
	rh->bnx_rv2p_proc1len = htonl(bnx_rv2p_proc1len);
	rh->bnx_rv2p_proc2len = htonl(bnx_rv2p_proc2len);

	write_firmware(FILENAME_RV2P, rh, sizeof(*rh), chunks_rv2p,
	    nitems(chunks_rv2p));

	bzero(rh, sizeof *rh);
	bnx_rv2p_proc1len = sizeof bnx_xi_rv2p_proc1;
	bnx_rv2p_proc2len = sizeof bnx_xi_rv2p_proc2;
	rh->bnx_rv2p_proc1len = htonl(bnx_rv2p_proc1len);
	rh->bnx_rv2p_proc2len = htonl(bnx_rv2p_proc2len);

	write_firmware(FILENAME_XI_RV2P, rh, sizeof(*rh), chunks_xi_rv2p,
	    nitems(chunks_xi_rv2p));

	bzero(rh, sizeof *rh);
	bnx_rv2p_proc1len = sizeof bnx_xi90_rv2p_proc1;
	bnx_rv2p_proc2len = sizeof bnx_xi90_rv2p_proc2;
	rh->bnx_rv2p_proc1len = htonl(bnx_rv2p_proc1len);
	rh->bnx_rv2p_proc2len = htonl(bnx_rv2p_proc2len);

	write_firmware(FILENAME_XI90_RV2P, rh, sizeof(*rh), chunks_xi90_rv2p,
	    nitems(chunks_xi90_rv2p));

	free(rh);

	return 0;
}
@


1.8
log
@Use %zu/%d to print size_t/ssize_t. Cast recno_t (a.k.a. u_int32_t)
to (unsigned long) to match %lu formats. Makes gcc happier and
quieter.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.7 2014/07/12 19:01:49 tedu Exp $	*/
d130 1
a130 1
		err(1, filename);
@


1.7
log
@revert bogus free changes in not kernel files. got a little trigger happy.
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.6 2014/07/12 18:48:18 tedu Exp $	*/
d152 1
a152 1
		printf("+%d", rlen);
@


1.6
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.5 2009/07/03 04:34:51 dlg Exp $	*/
d300 1
a300 1
	free(bf, 0);
d331 1
a331 1
	free(rh, 0);
@


1.5
log
@newer bnx chips use a separate firmware to the "old" ones. this updates
the b06 firmware for the older chips, and adds the b09 firmware. there are
three variants of the rv2p code thats loaded onto the chips, so this has
been split out into separate firmware files as well.

the driver has been updated to handle the split firmwares, and to easily
allow loading of the different versions. this change only supports the
loading of the firmwares for the currently supported chips.

after this change you must build the new firmwares and install them as well
as your new kernel.

"go to it" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.3 2006/10/02 06:03:31 deraadt Exp $	*/
d300 1
a300 1
	free(bf);
d331 1
a331 1
	free(rh);
@


1.4
log
@change firmware byte order to be same on all architectures
THIS MEANS YOU NEED TO UPDATE YOUR FIRMWARE FILE BEFORE BOOTING WITH
A NEW KERNEL
tested by marco, biorn
@
text
@d29 2
a33 2
#define FILENAME "bnx"

d37 4
a40 1
} chunks[] = {
d63 29
a91 1
	{ bnx_TXP_b06FwSbss, &bnx_TXP_b06FwSbssLen },
d93 2
d99 12
d120 3
a122 2
int
main(int argc, char *argv[])
a123 1
	struct	bnx_firmware_header bfproto, *bf;
d127 2
a128 72
	bnx_rv2p_proc1len = sizeof bnx_rv2p_proc1;
	bnx_rv2p_proc2len = sizeof bnx_rv2p_proc2;

	bf = (struct bnx_firmware_header *)malloc(sizeof *bf);
	bzero(bf, sizeof *bf);

	/* initialize the file header */
	bf->bnx_COM_b06FwReleaseMajor = htonl(bnx_COM_b06FwReleaseMajor);
	bf->bnx_COM_b06FwReleaseMinor = htonl(bnx_COM_b06FwReleaseMinor);
	bf->bnx_COM_b06FwReleaseFix = htonl(bnx_COM_b06FwReleaseFix);
	bf->bnx_COM_b06FwStartAddr = htonl(bnx_COM_b06FwStartAddr);
	bf->bnx_COM_b06FwTextAddr = htonl(bnx_COM_b06FwTextAddr);
	bf->bnx_COM_b06FwTextLen = htonl(bnx_COM_b06FwTextLen);
	bf->bnx_COM_b06FwDataAddr = htonl(bnx_COM_b06FwDataAddr);
	bf->bnx_COM_b06FwDataLen = htonl(bnx_COM_b06FwDataLen);
	bf->bnx_COM_b06FwRodataAddr = htonl(bnx_COM_b06FwRodataAddr);
	bf->bnx_COM_b06FwRodataLen = htonl(bnx_COM_b06FwRodataLen);
	bf->bnx_COM_b06FwBssAddr = htonl(bnx_COM_b06FwBssAddr);
	bf->bnx_COM_b06FwBssLen = htonl(bnx_COM_b06FwBssLen);
	bf->bnx_COM_b06FwSbssAddr = htonl(bnx_COM_b06FwSbssAddr);
	bf->bnx_COM_b06FwSbssLen = htonl(bnx_COM_b06FwSbssLen);

	bf->bnx_RXP_b06FwReleaseMajor = htonl(bnx_RXP_b06FwReleaseMajor);
	bf->bnx_RXP_b06FwReleaseMinor = htonl(bnx_RXP_b06FwReleaseMinor);
	bf->bnx_RXP_b06FwReleaseFix = htonl(bnx_RXP_b06FwReleaseFix);
	bf->bnx_RXP_b06FwStartAddr = htonl(bnx_RXP_b06FwStartAddr);
	bf->bnx_RXP_b06FwTextAddr = htonl(bnx_RXP_b06FwTextAddr);
	bf->bnx_RXP_b06FwTextLen = htonl(bnx_RXP_b06FwTextLen);
	bf->bnx_RXP_b06FwDataAddr = htonl(bnx_RXP_b06FwDataAddr);
	bf->bnx_RXP_b06FwDataLen = htonl(bnx_RXP_b06FwDataLen);
	bf->bnx_RXP_b06FwRodataAddr = htonl(bnx_RXP_b06FwRodataAddr);
	bf->bnx_RXP_b06FwRodataLen = htonl(bnx_RXP_b06FwRodataLen);
	bf->bnx_RXP_b06FwBssAddr = htonl(bnx_RXP_b06FwBssAddr);
	bf->bnx_RXP_b06FwBssLen = htonl(bnx_RXP_b06FwBssLen);
	bf->bnx_RXP_b06FwSbssAddr = htonl(bnx_RXP_b06FwSbssAddr);
	bf->bnx_RXP_b06FwSbssLen = htonl(bnx_RXP_b06FwSbssLen);

	bf->bnx_TPAT_b06FwReleaseMajor = htonl(bnx_TPAT_b06FwReleaseMajor);
	bf->bnx_TPAT_b06FwReleaseMinor = htonl(bnx_TPAT_b06FwReleaseMinor);
	bf->bnx_TPAT_b06FwReleaseFix = htonl(bnx_TPAT_b06FwReleaseFix);
	bf->bnx_TPAT_b06FwStartAddr = htonl(bnx_TPAT_b06FwStartAddr);
	bf->bnx_TPAT_b06FwTextAddr = htonl(bnx_TPAT_b06FwTextAddr);
	bf->bnx_TPAT_b06FwTextLen = htonl(bnx_TPAT_b06FwTextLen);
	bf->bnx_TPAT_b06FwDataAddr = htonl(bnx_TPAT_b06FwDataAddr);
	bf->bnx_TPAT_b06FwDataLen = htonl(bnx_TPAT_b06FwDataLen);
	bf->bnx_TPAT_b06FwRodataAddr = htonl(bnx_TPAT_b06FwRodataAddr);
	bf->bnx_TPAT_b06FwRodataLen = htonl(bnx_TPAT_b06FwRodataLen);
	bf->bnx_TPAT_b06FwBssAddr = htonl(bnx_TPAT_b06FwBssAddr);
	bf->bnx_TPAT_b06FwBssLen = htonl(bnx_TPAT_b06FwBssLen);
	bf->bnx_TPAT_b06FwSbssAddr = htonl(bnx_TPAT_b06FwSbssAddr);
	bf->bnx_TPAT_b06FwSbssLen = htonl(bnx_TPAT_b06FwSbssLen);

	bf->bnx_TXP_b06FwReleaseMajor = htonl(bnx_TXP_b06FwReleaseMajor);
	bf->bnx_TXP_b06FwReleaseMinor = htonl(bnx_TXP_b06FwReleaseMinor);
	bf->bnx_TXP_b06FwReleaseFix = htonl(bnx_TXP_b06FwReleaseFix);
	bf->bnx_TXP_b06FwStartAddr = htonl(bnx_TXP_b06FwStartAddr);
	bf->bnx_TXP_b06FwTextAddr = htonl(bnx_TXP_b06FwTextAddr);
	bf->bnx_TXP_b06FwTextLen = htonl(bnx_TXP_b06FwTextLen);
	bf->bnx_TXP_b06FwDataAddr = htonl(bnx_TXP_b06FwDataAddr);
	bf->bnx_TXP_b06FwDataLen = htonl(bnx_TXP_b06FwDataLen);
	bf->bnx_TXP_b06FwRodataAddr = htonl(bnx_TXP_b06FwRodataAddr);
	bf->bnx_TXP_b06FwRodataLen = htonl(bnx_TXP_b06FwRodataLen);
	bf->bnx_TXP_b06FwBssAddr = htonl(bnx_TXP_b06FwBssAddr);
	bf->bnx_TXP_b06FwBssLen = htonl(bnx_TXP_b06FwBssLen);
	bf->bnx_TXP_b06FwSbssAddr = htonl(bnx_TXP_b06FwSbssAddr);
	bf->bnx_TXP_b06FwSbssLen = htonl(bnx_TXP_b06FwSbssLen);

	bf->bnx_rv2p_proc1len = htonl(bnx_rv2p_proc1len);
	bf->bnx_rv2p_proc2len = htonl(bnx_rv2p_proc2len);

	printf("creating %s", FILENAME);
	fd = open(FILENAME, O_WRONLY|O_CREAT|O_TRUNC, 0644);
d130 1
a130 1
		err(1, FILENAME);
d132 1
a132 1
	rlen = write(fd, bf, sizeof *bf);
d134 3
a136 3
		err(1, "%s", FILENAME);
	if (rlen != sizeof *bf)
		errx(1, "%s: short write", FILENAME);
d141 1
a141 1
	for (i = 0; i < sizeof(chunks) / sizeof(chunks[0]); i++) {
d146 1
a146 1
			err(1, "%s", FILENAME);
d150 1
a150 1
			errx(1, "%s: short write", FILENAME);
d159 141
d301 32
a332 1
	close(fd);
@


1.3
log
@remove variable we do not need
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.2 2006/10/02 02:30:13 deraadt Exp $	*/
d66 9
d89 59
a147 59
	bf->bnx_COM_b06FwReleaseMajor = bnx_COM_b06FwReleaseMajor;
	bf->bnx_COM_b06FwReleaseMinor = bnx_COM_b06FwReleaseMinor;
	bf->bnx_COM_b06FwReleaseFix = bnx_COM_b06FwReleaseFix;
	bf->bnx_COM_b06FwStartAddr = bnx_COM_b06FwStartAddr;
	bf->bnx_COM_b06FwTextAddr = bnx_COM_b06FwTextAddr;
	bf->bnx_COM_b06FwTextLen = bnx_COM_b06FwTextLen;
	bf->bnx_COM_b06FwDataAddr = bnx_COM_b06FwDataAddr;
	bf->bnx_COM_b06FwDataLen = bnx_COM_b06FwDataLen;
	bf->bnx_COM_b06FwRodataAddr = bnx_COM_b06FwRodataAddr;
	bf->bnx_COM_b06FwRodataLen = bnx_COM_b06FwRodataLen;
	bf->bnx_COM_b06FwBssAddr = bnx_COM_b06FwBssAddr;
	bf->bnx_COM_b06FwBssLen = bnx_COM_b06FwBssLen;
	bf->bnx_COM_b06FwSbssAddr = bnx_COM_b06FwSbssAddr;
	bf->bnx_COM_b06FwSbssLen = bnx_COM_b06FwSbssLen;

	bf->bnx_RXP_b06FwReleaseMajor = bnx_RXP_b06FwReleaseMajor;
	bf->bnx_RXP_b06FwReleaseMinor = bnx_RXP_b06FwReleaseMinor;
	bf->bnx_RXP_b06FwReleaseFix = bnx_RXP_b06FwReleaseFix;
	bf->bnx_RXP_b06FwStartAddr = bnx_RXP_b06FwStartAddr;
	bf->bnx_RXP_b06FwTextAddr = bnx_RXP_b06FwTextAddr;
	bf->bnx_RXP_b06FwTextLen = bnx_RXP_b06FwTextLen;
	bf->bnx_RXP_b06FwDataAddr = bnx_RXP_b06FwDataAddr;
	bf->bnx_RXP_b06FwDataLen = bnx_RXP_b06FwDataLen;
	bf->bnx_RXP_b06FwRodataAddr = bnx_RXP_b06FwRodataAddr;
	bf->bnx_RXP_b06FwRodataLen = bnx_RXP_b06FwRodataLen;
	bf->bnx_RXP_b06FwBssAddr = bnx_RXP_b06FwBssAddr;
	bf->bnx_RXP_b06FwBssLen = bnx_RXP_b06FwBssLen;
	bf->bnx_RXP_b06FwSbssAddr = bnx_RXP_b06FwSbssAddr;
	bf->bnx_RXP_b06FwSbssLen = bnx_RXP_b06FwSbssLen;

	bf->bnx_TPAT_b06FwReleaseMajor = bnx_TPAT_b06FwReleaseMajor;
	bf->bnx_TPAT_b06FwReleaseMinor = bnx_TPAT_b06FwReleaseMinor;
	bf->bnx_TPAT_b06FwReleaseFix = bnx_TPAT_b06FwReleaseFix;
	bf->bnx_TPAT_b06FwStartAddr = bnx_TPAT_b06FwStartAddr;
	bf->bnx_TPAT_b06FwTextAddr = bnx_TPAT_b06FwTextAddr;
	bf->bnx_TPAT_b06FwTextLen = bnx_TPAT_b06FwTextLen;
	bf->bnx_TPAT_b06FwDataAddr = bnx_TPAT_b06FwDataAddr;
	bf->bnx_TPAT_b06FwDataLen = bnx_TPAT_b06FwDataLen;
	bf->bnx_TPAT_b06FwRodataAddr = bnx_TPAT_b06FwRodataAddr;
	bf->bnx_TPAT_b06FwRodataLen = bnx_TPAT_b06FwRodataLen;
	bf->bnx_TPAT_b06FwBssAddr = bnx_TPAT_b06FwBssAddr;
	bf->bnx_TPAT_b06FwBssLen = bnx_TPAT_b06FwBssLen;
	bf->bnx_TPAT_b06FwSbssAddr = bnx_TPAT_b06FwSbssAddr;
	bf->bnx_TPAT_b06FwSbssLen = bnx_TPAT_b06FwSbssLen;

	bf->bnx_TXP_b06FwReleaseMajor = bnx_TXP_b06FwReleaseMajor;
	bf->bnx_TXP_b06FwReleaseMinor = bnx_TXP_b06FwReleaseMinor;
	bf->bnx_TXP_b06FwReleaseFix = bnx_TXP_b06FwReleaseFix;
	bf->bnx_TXP_b06FwStartAddr = bnx_TXP_b06FwStartAddr;
	bf->bnx_TXP_b06FwTextAddr = bnx_TXP_b06FwTextAddr;
	bf->bnx_TXP_b06FwTextLen = bnx_TXP_b06FwTextLen;
	bf->bnx_TXP_b06FwDataAddr = bnx_TXP_b06FwDataAddr;
	bf->bnx_TXP_b06FwDataLen = bnx_TXP_b06FwDataLen;
	bf->bnx_TXP_b06FwRodataAddr = bnx_TXP_b06FwRodataAddr;
	bf->bnx_TXP_b06FwRodataLen = bnx_TXP_b06FwRodataLen;
	bf->bnx_TXP_b06FwBssAddr = bnx_TXP_b06FwBssAddr;
	bf->bnx_TXP_b06FwBssLen = bnx_TXP_b06FwBssLen;
	bf->bnx_TXP_b06FwSbssAddr = bnx_TXP_b06FwSbssAddr;
	bf->bnx_TXP_b06FwSbssLen = bnx_TXP_b06FwSbssLen;
d149 2
a150 2
	bf->bnx_rv2p_proc1len = bnx_rv2p_proc1len;
	bf->bnx_rv2p_proc2len = bnx_rv2p_proc2len;
d167 1
@


1.2
log
@actually put all the require firmware bits into the file
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.1 2006/09/20 22:16:04 deraadt Exp $	*/
d70 1
a70 1
	int len, fd, i, total;
d76 2
a77 3
	len = sizeof(*bf);
	bf = (struct bnx_firmware_header *)malloc(len);
	bzero(bf, len);
d148 1
a148 1
	rlen = write(fd, bf, len);
d151 1
a151 1
	if (rlen != len)
@


1.1
log
@build a bnx firmware file, for firmload
@
text
@d1 1
a1 1
/*	$OpenBSD: build.c,v 1.3 2005/05/17 18:48:52 jason Exp $	*/
d26 1
d29 3
d34 32
d70 1
a70 1
	int len, fd;
d73 3
d96 44
a139 4
	memcpy(bf->bnx_TXP_b06FwData, bnx_TXP_b06FwData, sizeof bnx_TXP_b06FwData);
	memcpy(bf->bnx_TXP_b06FwRodata, bnx_TXP_b06FwRodata, sizeof bnx_TXP_b06FwRodata);
	memcpy(bf->bnx_TXP_b06FwBss, bnx_TXP_b06FwBss, sizeof bnx_TXP_b06FwBss);
	memcpy(bf->bnx_TXP_b06FwSbss, bnx_TXP_b06FwSbss, sizeof bnx_TXP_b06FwSbss);
d141 2
a142 1
	bf->firmlength = sizeof bnx_COM_b06FwText;
d144 1
a144 2
	printf("creating %s length %d [%d+%d]\n",
	    FILENAME, len + bf->firmlength, len, bf->firmlength); 
d154 18
d173 1
a173 5
	rlen = write(fd, bnx_COM_b06FwText, sizeof bnx_COM_b06FwText);
	if (rlen == -1)
		err(1, "%s", FILENAME);
	if (rlen != sizeof bnx_COM_b06FwText)
		errx(1, "%s: short write", FILENAME);
@

