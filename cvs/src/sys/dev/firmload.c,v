head	1.14;
access;
symbols
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.8
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.11.0.6
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.14
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.10
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.12
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.10
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.6
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.8
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.4
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4;
locks; strict;
comment	@ * @;


1.14
date	2015.12.29.04.46.28;	author mmcc;	state Exp;
branches;
next	1.13;
commitid	QKSTqnEw1KIrhSLM;

1.13
date	2015.08.26.22.33.24;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	CoFAXAbnMLAWJVYK;

1.12
date	2015.03.13.23.05.04;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	hPbCW3qmWlJeOcHk;

1.11
date	2014.07.12.18.48.17;	author tedu;	state Exp;
branches;
next	1.10;
commitid	I19imNlAX05zJOED;

1.10
date	2011.03.23.16.09.19;	author marco;	state Exp;
branches;
next	1.9;

1.9
date	2008.03.08.19.15.26;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.27.03.51.29;	author pedro;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.19.17.49.50;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.09.18.26.08;	author pedro;	state Exp;
branches;
next	1.5;

1.5
date	2005.08.01.08.15.02;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.28.01.17.19;	author pat;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.17.16.16.09;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.17.15.14.57;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.11.17.14.12.59;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Remove NULL-checks before free().

ok tb@@
@
text
@/*	$OpenBSD: firmload.c,v 1.13 2015/08/26 22:33:24 deraadt Exp $	*/

/*
 * Copyright (c) 2004 Theo de Raadt <deraadt@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/syslimits.h>
#include <sys/namei.h>
#include <sys/vnode.h>
#include <sys/errno.h>
#include <sys/malloc.h>
#include <sys/proc.h>
#include <sys/device.h>

int
loadfirmware(const char *name, u_char **bufp, size_t *buflen)
{
	struct proc *p = curproc;
	struct nameidata nid;
	char *path, *ptr;
	struct iovec iov;
	struct uio uio;
	struct vattr va;
	int error;

	if (!rootvp || !vcount(rootvp))
		return (EIO);

	path = malloc(MAXPATHLEN, M_TEMP, M_NOWAIT);
	if (path == NULL)
		return (ENOMEM);

	if (snprintf(path, MAXPATHLEN, "/etc/firmware/%s", name) >=
	    MAXPATHLEN) {
		error = ENAMETOOLONG;
		goto err;
	}

	NDINIT(&nid, LOOKUP, NOFOLLOW|LOCKLEAF, UIO_SYSSPACE, path, p);
	error = namei(&nid);
#ifdef RAMDISK_HOOKS
	/* try again with mounted disk */
	if (error) {
		if (snprintf(path, MAXPATHLEN, "/mnt/etc/firmware/%s", name) >=
		    MAXPATHLEN) {
			error = ENAMETOOLONG;
			goto err;
		}

		NDINIT(&nid, LOOKUP, NOFOLLOW|LOCKLEAF, UIO_SYSSPACE, path, p);
		error = namei(&nid);
	}
#endif
	if (error)
		goto err;
	error = VOP_GETATTR(nid.ni_vp, &va, p->p_ucred, p);
	if (error)
		goto fail;
	if (nid.ni_vp->v_type != VREG || va.va_size == 0) {
		error = EINVAL;
		goto fail;
	}
	if (va.va_size > FIRMWARE_MAX) {
		error = E2BIG;
		goto fail;
	}
	ptr = malloc(va.va_size, M_DEVBUF, M_NOWAIT);
	if (ptr == NULL) {
		error = ENOMEM;
		goto fail;
	}

	iov.iov_base = ptr;
	iov.iov_len = va.va_size;
	uio.uio_iov = &iov;
	uio.uio_iovcnt = 1;
	uio.uio_offset = 0;
	uio.uio_resid = va.va_size;
	uio.uio_segflg = UIO_SYSSPACE;
	uio.uio_rw = UIO_READ;
	uio.uio_procp = p;

	error = VOP_READ(nid.ni_vp, &uio, 0, p->p_ucred);

	if (error == 0) {
		*bufp = ptr;
		*buflen = va.va_size;
	} else
		free(ptr, M_DEVBUF, va.va_size);

fail:
	vput(nid.ni_vp);
err:
	free(path, M_TEMP, MAXPATHLEN);
	return (error);
}
@


1.13
log
@two simple sizes to free()
@
text
@d1 1
a1 1
/*	$OpenBSD: firmload.c,v 1.12 2015/03/13 23:05:04 deraadt Exp $	*/
d108 1
a108 2
	if (path)
		free(path, M_TEMP, MAXPATHLEN);
@


1.12
log
@some include files not needed; matthew markfort
@
text
@d1 1
a1 1
/*	$OpenBSD: firmload.c,v 1.11 2014/07/12 18:48:17 tedu Exp $	*/
d103 1
a103 1
		free(ptr, M_DEVBUF, 0);
d109 1
a109 1
		free(path, M_TEMP, 0);
@


1.11
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: firmload.c,v 1.10 2011/03/23 16:09:19 marco Exp $	*/
a21 1
#include <sys/time.h>
a23 1
#include <sys/mount.h>
@


1.10
log
@renegade tabs, no binary change
@
text
@d1 1
a1 1
/*	$OpenBSD: firmload.c,v 1.9 2008/03/08 19:15:26 espie Exp $	*/
d105 1
a105 1
		free(ptr, M_DEVBUF);
d111 1
a111 1
		free(path, M_TEMP);
@


1.9
log
@look for firmload on /mnt/etc/firmware as well, only for ramdisks.
okay deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: firmload.c,v 1.8 2006/06/27 03:51:29 pedro Exp $	*/
d48 1
a48 1
		
@


1.8
log
@Pass process credentials to VOP_READ(), making it possible to load
firmwares over NFS, okay deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: firmload.c,v 1.7 2006/01/19 17:49:50 deraadt Exp $	*/
d57 13
@


1.7
log
@ENAMETOOLONG if path too long; ok miod pedro
@
text
@d1 1
a1 1
/*	$OpenBSD: firmload.c,v 1.6 2006/01/09 18:26:08 pedro Exp $	*/
d86 1
a86 1
	error = VOP_READ(nid.ni_vp, &uio, 0, NOCRED);
@


1.6
log
@Make sure the vnode being read is a file, okay dlg@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: firmload.c,v 1.5 2005/08/01 08:15:02 deraadt Exp $	*/
d49 5
a53 1
	snprintf(path, MAXPATHLEN, "/etc/firmware/%s", name);
@


1.5
log
@allocate path using malloc, not as local variable; ok dlg pascoe
@
text
@d1 1
a1 1
/*	$OpenBSD: firmload.c,v 1.4 2005/02/28 01:17:19 pat Exp $	*/
d58 1
a58 1
	if (va.va_size == 0) {
@


1.4
log
@Don't bother trying to load an empty firmware file.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: firmload.c,v 1.3 2004/11/17 16:16:09 deraadt Exp $	*/
d36 1
a36 1
	char path[MAXPATHLEN];
a40 1
	char *ptr;
d45 5
a49 1
	snprintf(path, sizeof path, "/etc/firmware/%s", name);
d54 1
a54 1
		return error;
d92 3
@


1.3
log
@oops, spotted by pat as always
@
text
@d1 1
a1 1
/*	$OpenBSD: firmload.c,v 1.2 2004/11/17 15:14:57 deraadt Exp $	*/
d55 4
@


1.2
log
@typo, spotted by pedro
@
text
@d1 1
a1 1
/*	$OpenBSD: firmload.c,v 1.1 2004/11/17 14:12:59 deraadt Exp $	*/
d65 1
a65 1
	iov.iov_base = ptr, 
@


1.1
log
@firmware loading; ok pedro tedu dlg miod
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d81 1
a81 1
		free(bufp, M_DEVBUF);
@

