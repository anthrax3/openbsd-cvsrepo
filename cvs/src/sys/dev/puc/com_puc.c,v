head	1.22;
access;
symbols
	OPENBSD_6_1:1.22.0.12
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.8
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.22.0.6
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.4
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.21.0.6
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.20.0.8
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.6
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.4
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.2
	OPENBSD_5_0:1.18.0.6
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.4
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.2
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.16.0.6
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.8
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.4
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.2
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.15.0.2
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.14.0.4
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_8:1.1.0.6
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.2
	SMP_BASE:1.1
	kame_19991208:1.1;
locks; strict;
comment	@ * @;


1.22
date	2014.09.14.14.17.25;	author jsg;	state Exp;
branches;
next	1.21;
commitid	uzzBR7hz9ncd4O6G;

1.21
date	2013.12.09.19.52.01;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2011.11.15.22.27.53;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2011.10.25.20.02.20;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2010.08.06.21.07.27;	author kettenis;	state Exp;
branches;
next	1.17;

1.17
date	2010.06.26.23.24.45;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2008.05.21.18.49.47;	author kettenis;	state Exp;
branches;
next	1.15;

1.15
date	2007.12.04.21.49.35;	author kettenis;	state Exp;
branches;
next	1.14;

1.14
date	2006.11.05.17.18.14;	author martin;	state Exp;
branches;
next	1.13;

1.13
date	2006.07.31.11.06.36;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.01.01.28.40;	author fkr;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.24.04.42.19;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.21.18.16.42;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2005.09.26.22.32.06;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2005.07.18.17.51.48;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2004.08.19.21.47.54;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.15.05.01.47;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.27.01;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.01.30.20.45.34;	author nordin;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.08.15.10.03;	author mickey;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2001.03.15.17.52.20;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.10.26.13.08.44;	author downsj;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.05.14.22.26.09;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.10.31.03.22.48;	author nate;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2002.03.06.02.11.47;	author niklas;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2002.03.28.15.34.52;	author niklas;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2004.02.19.10.56.31;	author niklas;	state Exp;
branches;
next	;

1.3.4.1
date	2002.01.31.22.55.37;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2002.06.11.03.42.28;	author art;	state Exp;
branches;
next	;


desc
@@


1.22
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@/*	$OpenBSD: com_puc.c,v 1.21 2013/12/09 19:52:01 deraadt Exp $	*/

/*
 * Copyright (c) 1997 - 1999, Jason Downs.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name(s) of the author(s) nor the name OpenBSD
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/ioctl.h>
#include <sys/selinfo.h>
#include <sys/tty.h>
#include <sys/conf.h>
#include <sys/file.h>
#include <sys/uio.h>
#include <sys/kernel.h>
#include <sys/syslog.h>
#include <sys/device.h>

#include <machine/intr.h>
#include <machine/bus.h>

#include <dev/pci/pucvar.h>

#include "com.h"

#include <dev/ic/comreg.h>
#include <dev/ic/comvar.h>
#include <dev/ic/ns16550reg.h>

#define	com_lcr		com_cfcr

int	com_puc_match(struct device *, void *, void *);
void	com_puc_attach(struct device *, struct device *, void *);
int	com_puc_detach(struct device *, int);

struct cfattach com_puc_ca = {
	sizeof(struct com_softc), com_puc_match,
	com_puc_attach, com_puc_detach, com_activate
};

int
com_puc_match(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct puc_attach_args *pa = aux;

	if (PUC_IS_COM(pa->type))
		return(1);

	return(0);
}

void
com_puc_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct com_softc *sc = (void *)self;
	struct puc_attach_args *pa = aux;
	const char *intrstr;

	/* Grab a PCI interrupt. */
	intrstr = pa->intr_string(pa);
	sc->sc_ih = pa->intr_establish(pa, IPL_TTY, comintr, sc,
	    sc->sc_dev.dv_xname);
	if (sc->sc_ih == NULL) {
		printf(": couldn't establish interrupt");
		if (intrstr != NULL)
			printf(" at %s", intrstr);
		printf("\n");
		return;
	}
	printf(" %s", intrstr);

	sc->sc_iot = pa->t;
	sc->sc_ioh = pa->h;
	sc->sc_iobase = pa->a;
	if (PUC_IS_COM_MUL(pa->type))
		sc->sc_frequency = COM_FREQ * PUC_COM_GET_MUL(pa->type);
	else
		sc->sc_frequency = COM_FREQ * (1 << PUC_COM_GET_POW2(pa->type));

	com_attach_subr(sc);
}

int
com_puc_detach(struct device *self, int flags)
{
	return com_detach(self, flags);
}
@


1.21
log
@use new com.c bus-independent suspend/resume code, rather than trying to
craft broken local code here
ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.20 2011/11/15 22:27:53 deraadt Exp $	*/
a35 1
#include <sys/proc.h>
@


1.20
log
@Simplify various parts of the puc(4) attachment code.  Tested lightly
by krw and myself.
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.19 2011/10/25 20:02:20 deraadt Exp $	*/
a59 1
int	com_puc_activate(struct device *, int);
d63 1
a63 1
	com_puc_attach, com_puc_detach, com_puc_activate
a115 16
}

int
com_puc_activate(struct device *self, int act)
{
	struct com_softc *sc = (struct com_softc *)self;

	switch (act) {
	case DVACT_SUSPEND:
		break;
	case DVACT_RESUME:
		com_resume(sc);
		break;
	}

	return (0);
@


1.19
log
@Use a new encoding for the entries in the pucdata table, the result is
that the .o file is half the size.  Tested by camield (who just doubled
the table size recently for a 16-port device).  Hopefully no regressions,
since this is a pretty large change of a very large table.
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.18 2010/08/06 21:07:27 kettenis Exp $	*/
a108 6

	if (pa->hwtype)
		sc->sc_uarttype = pa->hwtype;

	sc->sc_hwflags = 0;
	sc->sc_swflags = 0;
@


1.18
log
@Initial stab at making com@@puc suspend and resume properly.  Works fine
for using cu(1) between two OpenBSD machines.  Probably doesn't work for
serial consoles but we don't support those on puc(4) anyway.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.17 2010/06/26 23:24:45 guenther Exp $	*/
d74 1
a74 1
	if (pa->type == PUC_PORT_TYPE_COM)
d105 4
a108 1
	sc->sc_frequency = COM_FREQ;
a109 2
	if (pa->flags)
		sc->sc_frequency = pa->flags & PUC_COM_CLOCKMASK;
@


1.17
log
@Don't #include <sys/user.h> into files that don't need the stuff
it defines.  In some cases, this means pulling in uvm.h or pcb.h
instead, but most of the inclusions were just noise.  Tested on
alpha, amd64, armish, hppa, i386, macpcc, sgi, sparc64, and vax,
mostly by krw and naddy.
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.16 2008/05/21 18:49:47 kettenis Exp $	*/
d57 4
a60 3
int com_puc_match(struct device *, void *, void *);
void com_puc_attach(struct device *, struct device *, void *);
int com_puc_detach(struct device *, int );
d63 2
a64 1
	sizeof(struct com_softc), com_puc_match, com_puc_attach, com_puc_detach
d122 16
@


1.16
log
@Switch i386 from pccom to com.  Welcomed by many.

ok dlg@@, jsing@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.15 2007/12/04 21:49:35 kettenis Exp $	*/
a36 1
#include <sys/user.h>
@


1.15
log
@Make puc(4) detachable.

Tested by millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.14 2006/11/05 17:18:14 martin Exp $	*/
a50 3
#ifdef i386
#include "pccom.h"
#endif
a52 4
#if NPCCOM > 0
#include <i386/isa/pccomvar.h>
#endif
#if NCOM > 0
a53 1
#endif
a61 1
#if NCOM > 0
a64 7
#endif

#if NPCCOM > 0
struct cfattach pccom_puc_ca = {
	sizeof(struct com_softc), com_puc_match, com_puc_attach, com_puc_detach
};
#endif
@


1.14
log
@kill leftover debug printf

ok mickey
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.13 2006/07/31 11:06:36 mickey Exp $	*/
d136 1
a136 9
	/* struct com_softc *sc = (void *)self; */
	int error;

	if ((error = com_detach(self, flags)) != 0)
		return (error);

	/* cardbus_intr_disestablish(psc->sc_cc, psc->sc_cf, csc->cc_ih); */

	return (0);
@


1.13
log
@puc@@cardbus (only added (commented out) to whom has puc@@pci enabled)
tested on puc@@pci by fkr and meself on the cardbus.
still needs a bit more work but generally works.
deraadt@@ ok and some input from miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.12 2006/06/01 01:28:40 fkr Exp $	*/
a123 1
printf(" %x ", pa->hwtype);
@


1.12
log
@remove another useless isavar.h include
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.11 2005/12/24 04:42:19 djm Exp $	*/
a42 1
#include <sys/types.h>
a47 1
#include <dev/pci/pcivar.h>
d68 1
d72 1
a72 1
	sizeof(struct com_softc), com_puc_match, com_puc_attach
d78 1
a78 1
	sizeof(struct com_softc), com_puc_match, com_puc_attach
d105 3
a107 4
	intrstr = pci_intr_string(pa->pc, pa->intrhandle);
	sc->sc_ih = pci_intr_establish(pa->pc, pa->intrhandle,
			IPL_TTY, comintr, sc,
			sc->sc_dev.dv_xname);
d124 3
d132 14
@


1.11
log
@establish interrupt at IPL_TTY instead of IPL_HIGH, so it doesn't
reenter comstart; pr #4947 and fix from Kudo Takashi, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.10 2005/11/21 18:16:42 millert Exp $	*/
a50 4

#ifdef i386
#include <dev/isa/isavar.h>	/* XXX */
#endif
@


1.10
log
@Move contents of sys/select.h to sys/selinfo.h in preparation for a
userland-visible sys/select.h.  Consistent with what Net and Free do.
OK deraadt@@, tested with full ports build by naddy@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.9 2005/09/26 22:32:06 miod Exp $	*/
d112 1
a112 1
			IPL_HIGH, comintr, sc,
@


1.9
log
@Share com probe code between com and pccom; allows us to get rid of awkward
code duplication in cardbus, pcmcia and puc attachments.

Joint effort with fgs@@; blessed deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.8 2005/07/18 17:51:48 miod Exp $	*/
d34 1
a34 1
#include <sys/select.h>
@


1.8
log
@Compensate for NCOM_PUC disappearance; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.7 2004/08/19 21:47:54 miod Exp $	*/
a86 2
void com_puc_attach2(struct com_softc *);

a130 14
	com_puc_attach2(sc);
}

/* 
 * XXX This should be handled by a generic attach
 */
void
com_puc_attach2(sc)
	struct com_softc *sc;
{
	bus_space_tag_t iot = sc->sc_iot;
	bus_space_handle_t ioh = sc->sc_ioh;
	u_int8_t lcr;

d134 1
a134 155
	/*
	 * Probe for all known forms of UART.
	 */
	lcr = bus_space_read_1(iot, ioh, com_lcr);

	bus_space_write_1(iot, ioh, com_lcr, LCR_EFR);
	bus_space_write_1(iot, ioh, com_efr, 0);
	bus_space_write_1(iot, ioh, com_lcr, 0);

	bus_space_write_1(iot, ioh, com_fifo, FIFO_ENABLE);
	delay(100);

	switch(bus_space_read_1(iot, ioh, com_iir) >> 6) {
	case 0:
		sc->sc_uarttype = COM_UART_16450;
		break;
	case 2:
		sc->sc_uarttype = COM_UART_16550;
		break;
	case 3:
		sc->sc_uarttype = COM_UART_16550A;
		break;
	default:
		sc->sc_uarttype = COM_UART_UNKNOWN;
		break;
	}

	if (sc->sc_uarttype == COM_UART_16550A) { /* Probe for ST16650s */
		bus_space_write_1(iot, ioh, com_lcr, lcr | LCR_DLAB);
		if (bus_space_read_1(iot, ioh, com_efr) == 0) {
			sc->sc_uarttype = COM_UART_ST16650;
		} else {
			bus_space_write_1(iot, ioh, com_lcr, LCR_EFR);
			if (bus_space_read_1(iot, ioh, com_efr) == 0)
				sc->sc_uarttype = COM_UART_ST16650V2;
		}
	}

#if NPCCOM > 0
#ifdef i386
	if (sc->sc_uarttype == COM_UART_ST16650V2) {	/* Probe for XR16850s */
		u_int8_t dlbl, dlbh;

		/* Enable latch access and get the current values. */
		bus_space_write_1(iot, ioh, com_lcr, lcr | LCR_DLAB);
		dlbl = bus_space_read_1(iot, ioh, com_dlbl);
		dlbh = bus_space_read_1(iot, ioh, com_dlbh);

		/* Zero out the latch divisors */
		bus_space_write_1(iot, ioh, com_dlbl, 0);
		bus_space_write_1(iot, ioh, com_dlbh, 0);

		if (bus_space_read_1(iot, ioh, com_dlbh) == 0x10) {
			sc->sc_uarttype = COM_UART_XR16850;
			sc->sc_uartrev = bus_space_read_1(iot, ioh, com_dlbl);
		}

		/* Reset to original. */
		bus_space_write_1(iot, ioh, com_dlbl, dlbl);
		bus_space_write_1(iot, ioh, com_dlbh, dlbh);
	}
#endif
#endif
	
	/* Reset the LCR (latch access is probably enabled). */
	bus_space_write_1(iot, ioh, com_lcr, lcr);
	if (sc->sc_uarttype == COM_UART_16450) { /* Probe for 8250 */
		u_int8_t scr0, scr1, scr2;

		scr0 = bus_space_read_1(iot, ioh, com_scratch);
		bus_space_write_1(iot, ioh, com_scratch, 0xa5);
		scr1 = bus_space_read_1(iot, ioh, com_scratch);
		bus_space_write_1(iot, ioh, com_scratch, 0x5a);
		scr2 = bus_space_read_1(iot, ioh, com_scratch);
		bus_space_write_1(iot, ioh, com_scratch, scr0);

		if ((scr1 != 0xa5) || (scr2 != 0x5a))
			sc->sc_uarttype = COM_UART_8250;
	}

	/*
	 * Print UART type and initialize ourself.
	 */
	sc->sc_fifolen = 1;	/* default */
	switch (sc->sc_uarttype) {
	case COM_UART_UNKNOWN:
		printf(": unknown uart\n");
		break;
	case COM_UART_8250:
		printf(": ns8250, no fifo\n");
		break;
	case COM_UART_16450:
		printf(": ns16450, no fifo\n");
		break;
	case COM_UART_16550:
		printf(": ns16550, no working fifo\n");
		break;
	case COM_UART_16550A:
		printf(": ns16550a, 16 byte fifo\n");
		SET(sc->sc_hwflags, COM_HW_FIFO);
		sc->sc_fifolen = 16;
		break;
	case COM_UART_ST16650:
		printf(": st16650, no working fifo\n");
		break;
	case COM_UART_ST16650V2:
		printf(": st16650, 32 byte fifo\n");
		SET(sc->sc_hwflags, COM_HW_FIFO);
		sc->sc_fifolen = 32;
		break;
	case COM_UART_TI16750:
		printf(": ti16750, 64 byte fifo\n");
		SET(sc->sc_hwflags, COM_HW_FIFO);
		sc->sc_fifolen = 64;
		break;
#if NPCCOM > 0
#ifdef i386
	case COM_UART_XR16850:
		printf(": xr16850 (rev %d), 128 byte fifo\n", sc->sc_uartrev);
		SET(sc->sc_hwflags, COM_HW_FIFO);
		sc->sc_fifolen = 128;
		break;
#endif
#endif
	default:
		panic("com_puc_attach2: bad fifo type");
	}

	/* clear and disable fifo */
	bus_space_write_1(iot, ioh, com_fifo, FIFO_RCV_RST | FIFO_XMT_RST);
	(void)bus_space_read_1(iot, ioh, com_data);
	bus_space_write_1(iot, ioh, com_fifo, 0);

	sc->sc_mcr = 0;
	bus_space_write_1(iot, ioh, com_mcr, sc->sc_mcr);

	timeout_set(&sc->sc_diag_tmo, comdiag, sc);
	timeout_set(&sc->sc_dtr_tmo, com_raisedtr, sc);
#if NCOM > 0
#ifdef __HAVE_GENERIC_SOFT_INTERRUPTS
	sc->sc_si = softintr_establish(IPL_TTY, comsoft, sc);
	if (sc->sc_si == NULL)
		panic("%s: can't establish soft interrupt.",
		    sc->sc_dev.dv_xname);
#else
	timeout_set(&sc->sc_comsoft_tmo, comsoft, sc);
#endif
#endif

	/*
	 * If there are no enable/disable functions, assume the device
	 * is always enabled.
	 */
	if (!sc->enable)
		sc->enabled = 1;
@


1.7
log
@Do as much in com_puc_attach2() as done in com_attach_subr(), until they
really get cleaned up and factorized; fixes puc operation on amd64 and sparc64.

tested pval@@ millert@@ naddy@@; ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.6 2003/07/15 05:01:47 jason Exp $	*/
d75 1
a75 1
#if NCOM_PUC
d81 1
a81 1
#if NPCCOM_PUC
@


1.6
log
@i386 needs isavar.h, sparc64 doesn't (no one else uses this.. yet)
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.5 2002/03/14 01:27:01 millert Exp $	*/
a149 3
	timeout_set(&sc->sc_dtr_tmo, com_raisedtr, sc);
	timeout_set(&sc->sc_diag_tmo, comdiag, sc);

d260 5
d275 1
a275 1
		panic("comattach: bad fifo type");
d282 23
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.4 2002/01/30 20:45:34 nordin Exp $	*/
d52 1
d54 1
@


1.4
log
@Move SET/CLR/ISSET macros to param.h. fgsch@@ and millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.3 2001/08/08 15:10:03 mickey Exp $	*/
d70 2
a71 2
int com_puc_match __P((struct device *, void *, void *));
void com_puc_attach __P((struct device *, struct device *, void *));
d85 1
a85 1
void com_puc_attach2 __P((struct com_softc *));
@


1.3
log
@initialize timeouts, since it's a copy of comattach; reported by Larry Moore <lmoore@@starwon.com.au>
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.2 2001/03/15 17:52:20 deraadt Exp $	*/
a68 1
#define	SET(t, f)	(t) |= (f)
@


1.3.4.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.4 2002/01/30 20:45:34 nordin Exp $	*/
d69 1
@


1.3.4.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.3.4.1 2002/01/31 22:55:37 niklas Exp $	*/
d70 2
a71 2
int com_puc_match(struct device *, void *, void *);
void com_puc_attach(struct device *, struct device *, void *);
d85 1
a85 1
void com_puc_attach2(struct com_softc *);
@


1.2
log
@support puc devices with higher speeds (not tested yet)
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.1 1999/10/26 13:08:44 downsj Exp $	*/
d128 1
d148 3
@


1.1
log
@Add com/pccom driver for puc.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d127 3
@


1.1.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.2 2001/03/15 17:52:20 deraadt Exp $	*/
a126 3
	sc->sc_frequency = COM_FREQ;
	if (pa->flags)
		sc->sc_frequency = pa->flags & PUC_COM_CLOCKMASK;
@


1.1.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: com_puc.c,v 1.1.2.1 2001/05/14 22:26:09 niklas Exp $	*/
a127 1

a146 3

	timeout_set(&sc->sc_dtr_tmo, com_raisedtr, sc);
	timeout_set(&sc->sc_diag_tmo, comdiag, sc);
@


1.1.2.3
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d69 1
@


1.1.2.4
log
@Merge in -current from roughly a week ago
@
text
@d70 2
a71 2
int com_puc_match(struct device *, void *, void *);
void com_puc_attach(struct device *, struct device *, void *);
d85 1
a85 1
void com_puc_attach2(struct com_softc *);
@


1.1.2.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a51 1
#ifdef i386
a52 1
#endif
@


