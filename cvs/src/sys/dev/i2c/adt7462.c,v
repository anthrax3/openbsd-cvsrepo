head	1.6;
access;
symbols
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.38
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.34
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.24
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.32
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.30
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.28
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.26
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.22
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.20
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.18
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.16
	OPENBSD_5_0:1.6.0.14
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.12
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.10
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.6
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.8
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.4
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6;
locks; strict;
comment	@ * @;


1.6
date	2008.04.23.11.11.14;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2008.04.22.03.05.03;	author cnst;	state Exp;
branches;
next	1.4;

1.4
date	2008.04.22.00.25.32;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2008.04.21.15.32.48;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.21.06.13.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.21.04.48.25;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.6
log
@learn about the fans
@
text
@/*	$OpenBSD: adt7462.c,v 1.5 2008/04/22 03:05:03 cnst Exp $	*/

/*
 * Copyright (c) 2008 Theo de Raadt
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/sensors.h>

#include <dev/i2c/i2cvar.h>

#define ADT7462_TEMPL		0x88
#define ADT7462_TEMPH		0x89
#define ADT7462_TEMP1L		0x8a
#define ADT7462_TEMP1H		0x8b
#define ADT7462_TEMP2L		0x8c
#define ADT7462_TEMP2H		0x8d
#define ADT7462_TEMP3L		0x8e
#define ADT7462_TEMP3H		0x8f
#define ADT7262_TACH1L		0x98
#define ADT7262_TACH1H		0x99
#define ADT7262_TACH2L		0x9a
#define ADT7262_TACH2H		0x9b
#define ADT7262_TACH3L		0x9c
#define ADT7262_TACH3H		0x9d
#define ADT7262_TACH4L		0x9e
#define ADT7262_TACH4H		0x9f
#define ADT7262_TACH5L		0xa2
#define ADT7262_TACH5H		0xa3
#define ADT7262_TACH6L		0xa4
#define ADT7262_TACH6H		0xa5
#define ADT7262_TACH7L		0xa6
#define ADT7262_TACH7H		0xa7
#define ADT7262_TACH8L		0xa8
#define ADT7262_TACH8H		0xa9

/* Sensors */
#define ADTFSM_TEMP0		0
#define ADTFSM_TEMP1		1
#define ADTFSM_TEMP2		2
#define ADTFSM_TEMP3		3
#define ADTFSM_TACH1		4
#define ADTFSM_TACH2		5
#define ADTFSM_TACH3		6
#define ADTFSM_TACH4		7
#define ADTFSM_TACH5		8
#define ADTFSM_TACH6		9
#define ADTFSM_TACH7		10
#define ADTFSM_TACH8		11
#define ADTFSM_NUM_SENSORS	12

struct adtfsm_softc {
	struct device	sc_dev;
	i2c_tag_t	sc_tag;
	i2c_addr_t	sc_addr;
	int		sc_fanmul;

	struct ksensor	sc_sensor[ADTFSM_NUM_SENSORS];
	struct ksensordev sc_sensordev;
};

int	adtfsm_match(struct device *, void *, void *);
void	adtfsm_attach(struct device *, struct device *, void *);
void	adtfsm_refresh(void *);

struct cfattach adtfsm_ca = {
	sizeof(struct adtfsm_softc), adtfsm_match, adtfsm_attach
};

struct cfdriver adtfsm_cd = {
	NULL, "adtfsm", DV_DULL
};

int
adtfsm_match(struct device *parent, void *match, void *aux)
{
	struct i2c_attach_args *ia = aux;

	if (strcmp(ia->ia_name, "adt7462") == 0)
		return (1);
	return (0);
}

void
adtfsm_attach(struct device *parent, struct device *self, void *aux)
{
	struct adtfsm_softc *sc = (struct adtfsm_softc *)self;
	struct i2c_attach_args *ia = aux;
	int i;

	sc->sc_tag = ia->ia_tag;
	sc->sc_addr = ia->ia_addr;

	/* Initialize sensor data. */
	strlcpy(sc->sc_sensordev.xname, sc->sc_dev.dv_xname,
	    sizeof(sc->sc_sensordev.xname));

	for (i = ADTFSM_TEMP0; i <= ADTFSM_TEMP3; i++) {
		sc->sc_sensor[i].type = SENSOR_TEMP;
		sc->sc_sensor[i].flags |= SENSOR_FINVALID;
	}

	strlcpy(sc->sc_sensor[0].desc, "Internal",
	    sizeof(sc->sc_sensor[0].desc));
	for (i = 1; i < 4; i++)
		strlcpy(sc->sc_sensor[i].desc, "External",
		    sizeof(sc->sc_sensor[i].desc));

	for (i = ADTFSM_TACH1; i <= ADTFSM_TACH8; i++) {
		sc->sc_sensor[i].type = SENSOR_FANRPM;
		sc->sc_sensor[i].flags |= SENSOR_FINVALID;
	}

	if (sensor_task_register(sc, adtfsm_refresh, 5) == NULL) {
		printf(", unable to register update task\n");
		return;
	}

	for (i = 0; i < ADTFSM_NUM_SENSORS; i++)
		sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[i]);
	sensordev_install(&sc->sc_sensordev);

	printf("\n");
}

void
adtfsm_refresh(void *arg)
{
	struct adtfsm_softc *sc = arg;
	u_int8_t cmdh, cmdl, datah = 0x01, datal = 0x02;
	struct ksensor *ks;
	u_short ut;
	short t;
	int i;

	iic_acquire_bus(sc->sc_tag, 0);

	for (i = 0; i <= ADTFSM_TEMP3 - ADTFSM_TEMP0; i++) {
		cmdl = ADT7462_TEMPL + i * 2;
		cmdh = ADT7462_TEMPH + i * 2;
		ks = &sc->sc_sensor[ADTFSM_TEMP0 + i];
		if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
		    sc->sc_addr, &cmdl, sizeof cmdl, &datal,
		    sizeof datal, 0) == 0 &&
		    iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
		    sc->sc_addr, &cmdh, sizeof cmdh, &datah,
		    sizeof datah, 0) == 0) {
			t = (((datah << 8) | datal) >> 6) - (64 << 2);
			ks->value = 273150000 + t * 250000;
			ks->flags &= ~SENSOR_FINVALID;
		} else
			ks->flags |= SENSOR_FINVALID;
	}

	for (i = 0; i <= ADTFSM_TACH8 - ADTFSM_TACH1; i++) {
		cmdl = ADT7262_TACH1L + i * 2;
		cmdh = ADT7262_TACH1H + i * 2;
		ks = &sc->sc_sensor[ADTFSM_TACH1 + i];
		if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
		    sc->sc_addr, &cmdl, sizeof cmdl, &datal,
		    sizeof datal, 0) == 0 &&
		    iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
		    sc->sc_addr, &cmdh, sizeof cmdh, &datah,
		    sizeof datah, 0) == 0) {
			ut = ((datah << 8) | datal);
			if (ut == 0x0000 || ut == 0xffff)
				ks->flags |= SENSOR_FINVALID;
			else {
				ks->value = 90000 * 60 / ut;
				ks->flags &= ~SENSOR_FINVALID;
			}
		} else
			ks->flags |= SENSOR_FINVALID;
	}

	iic_release_bus(sc->sc_tag, 0);
}
@


1.5
log
@* correct the names of the register defines
* describe the temperature sensors as 'Internal' / 'External'
* no need for sensor description enumeration

'sure' deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: adt7462.c,v 1.4 2008/04/22 00:25:32 deraadt Exp $	*/
d26 24
a49 8
#define ADT7462_INT_TEMPL	0x88
#define ADT7462_INT_TEMPH	0x89
#define ADT7462_EXT_TEMP1L	0x8a
#define ADT7462_EXT_TEMP1H	0x8b
#define ADT7462_EXT_TEMP2L	0x8c
#define ADT7462_EXT_TEMP2H	0x8d
#define ADT7462_EXT_TEMP3L	0x8e
#define ADT7462_EXT_TEMP3H	0x8f
d56 9
a64 1
#define ADTFSM_NUM_SENSORS	4
d112 1
a112 1
	for (i = 0; i < 4; i++)
d114 2
d117 2
a118 3
	for (i = 0; i < 1; i++)
		strlcpy(sc->sc_sensor[i].desc, "Internal",
		    sizeof(sc->sc_sensor[i].desc));
d123 5
d145 2
d152 4
a155 3
	for (i = 0; i < 4; i++) {
		cmdl = ADT7462_INT_TEMPL + i * 2;
		cmdh = ADT7462_INT_TEMPH + i * 2;
d163 23
a185 2
			sc->sc_sensor[i].value = 273150000 + t * 250000;
			sc->sc_sensor[i].flags &= ~SENSOR_FINVALID;
d187 1
a187 2
			sc->sc_sensor[i].flags |= SENSOR_FINVALID;
		printf("val %02x %02x\n", datah, datal);
@


1.4
log
@handle all four temperature sensors
@
text
@d1 1
a1 1
/*	$OpenBSD: adt7462.c,v 1.3 2008/04/21 15:32:48 deraadt Exp $	*/
d28 6
a33 6
#define ADT7462_INT_REM1L	0x8a
#define ADT7462_INT_REM1H	0x8b
#define ADT7462_INT_REM2L	0x8c
#define ADT7462_INT_REM2H	0x8d
#define ADT7462_INT_REM3L	0x8e
#define ADT7462_INT_REM3H	0x8f
d88 1
a88 1
	for (i = 0; i < 4; i++) {
d90 7
a96 4
		snprintf(sc->sc_sensor[i].desc,
		    sizeof(sc->sc_sensor[i].desc),
		    "Temperature%d", i);
	}
@


1.3
log
@correct negative temperatures (if they ever happen); spotted by cnst
@
text
@d1 1
a1 1
/*	$OpenBSD: adt7462.c,v 1.2 2008/04/21 06:13:35 deraadt Exp $	*/
d36 5
a40 2
#define ADTFSM_INT		0
#define ADTFSM_NUM_SENSORS	1
d88 6
a93 3
	sc->sc_sensor[ADTFSM_INT].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[ADTFSM_INT].desc, "Internal",
	    sizeof(sc->sc_sensor[ADTFSM_INT].desc));
d113 1
d117 16
a132 13
	cmdl = ADT7462_INT_TEMPL;
	cmdh = ADT7462_INT_TEMPH;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmdl, sizeof cmdl, &datal, sizeof datal, 0) == 0 &&
	    iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmdh, sizeof cmdh, &datah, sizeof datah, 0) == 0) {
		t = (((datah << 8) | datal) >> 6) - (64 << 2);
		sc->sc_sensor[ADTFSM_INT].value = 273150000 + t * 250000;
		sc->sc_sensor[ADTFSM_INT].flags &= ~SENSOR_FINVALID;
	} else
		sc->sc_sensor[ADTFSM_INT].flags |= SENSOR_FINVALID;

	printf("val %02x %02x\n", datah, datal);
@


1.2
log
@improve register to temperature conversion code
@
text
@d1 1
a1 1
/*	$OpenBSD: adt7462.c,v 1.1 2008/04/21 04:48:25 deraadt Exp $	*/
d28 6
d106 1
a106 1
	u_short t;
@


1.1
log
@A very very rough start at an adt7462 driver
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1030.c,v 1.8 2007/06/24 05:34:35 dlg Exp $	*/
d100 1
a100 1
	short t;
d110 1
a110 3
		t = datah << 2;
		t += (datah < 64 ? -1 : 1) * (datal >> 6);
		t -= (64 << 2);
@

