head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.8
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.6
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.11.0.18
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.26
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.24
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.22
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.20
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.16
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.14
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.8
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.4
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.9.0.4
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.7.0.2
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5;
locks; strict;
comment	@ * @;


1.12
date	2016.05.12.21.00.23;	author kettenis;	state Exp;
branches;
next	1.11;
commitid	kK62jzRvYJNeTYEv;

1.11
date	2009.08.12.17.13.30;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2008.04.17.19.01.48;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.24.05.34.35;	author dlg;	state Exp;
branches;
next	1.8;

1.8
date	2007.03.22.16.55.31;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2006.12.23.17.46.39;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.10.00.57.23;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.19.17.08.39;	author grange;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.13.21.41.40;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.13.00.13.01;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.27.17.18.18;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.16.06.26.14;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@If writing the control register fails, bail out without attaching any sensors.

From Marcus Glocker, who has an Apple G5 machine where an advertised sensor
isn't there, and plodding on creates annoying dmesg spam.
@
text
@/*	$OpenBSD: ds1631.c,v 1.11 2009/08/12 17:13:30 kettenis Exp $	*/

/*
 * Copyright (c) 2005 Theo de Raadt
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/sensors.h>

#include <dev/i2c/i2cvar.h>

/* Maxim ds 1631 registers */
#define DS1631_START		0x51
#define DS1624_START		0xee
#define DS1631_TEMP		0xaa
#define DS1631_CONTROL		0xac
#define  DS1631_CONTROL_DONE	0x80
#define  DS1631_CONTROL_1SHOT	0x01

/* Sensors */
#define MAXDS_TEMP		0
#define MAXDS_NUM_SENSORS	1

struct maxds_softc {
	struct device	sc_dev;
	i2c_tag_t	sc_tag;
	i2c_addr_t	sc_addr;

	struct ksensor	sc_sensor[MAXDS_NUM_SENSORS];
	struct ksensordev sc_sensordev;
};

int	maxds_match(struct device *, void *, void *);
void	maxds_attach(struct device *, struct device *, void *);
void	maxds_refresh(void *);

struct cfattach maxds_ca = {
	sizeof(struct maxds_softc), maxds_match, maxds_attach
};

struct cfdriver maxds_cd = {
	NULL, "maxds", DV_DULL
};

int
maxds_match(struct device *parent, void *match, void *aux)
{
	struct i2c_attach_args *ia = aux;

	if (strcmp(ia->ia_name, "ds1631") == 0 ||
	    strcmp(ia->ia_name, "ds1624") == 0 ||
	    strcmp(ia->ia_name, "ds1721") == 0)
		return (1);
	return (0);
}

void
maxds_attach(struct device *parent, struct device *self, void *aux)
{
	struct maxds_softc *sc = (struct maxds_softc *)self;
	struct i2c_attach_args *ia = aux;
	u_int8_t cmd, data;
	int i;

	printf(": %s", ia->ia_name);

	sc->sc_tag = ia->ia_tag;
	sc->sc_addr = ia->ia_addr;

	iic_acquire_bus(sc->sc_tag, 0);

	cmd = DS1631_CONTROL;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0) {
		if (data & DS1631_CONTROL_1SHOT) {
			/*
			 * 1-Shot mode would require us to write every refresh
			 * which is stupid.  Put us into continuous mode.
			 */
			data &= ~DS1631_CONTROL_1SHOT;

			(void) iic_exec(sc->sc_tag, I2C_OP_WRITE_WITH_STOP,
			    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0);
			//delay(10 * 1000);
			printf(", continuous");
			goto dostart;
		}
		if (data & DS1631_CONTROL_DONE) {
dostart:
			cmd = DS1631_START;
			if (strcmp(ia->ia_name, "ds1624") == 0)
				cmd = DS1624_START;
			(void) iic_exec(sc->sc_tag, I2C_OP_WRITE_WITH_STOP,
			    sc->sc_addr, &cmd, sizeof cmd, NULL, 0, 0);
			printf(", starting");
		}
	} else {
		iic_release_bus(sc->sc_tag, 0);
		printf(", fails to respond\n");
		return;
	}

	iic_release_bus(sc->sc_tag, 0);

	/* Initialize sensor data. */
	strlcpy(sc->sc_sensordev.xname, sc->sc_dev.dv_xname,
	    sizeof(sc->sc_sensordev.xname));

	sc->sc_sensor[MAXDS_TEMP].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[MAXDS_TEMP].desc, "Internal",
	    sizeof(sc->sc_sensor[MAXDS_TEMP].desc));

	if (sensor_task_register(sc, maxds_refresh, 5) == NULL) {
		printf(", unable to register update task\n");
		return;
	}

	for (i = 0; i < MAXDS_NUM_SENSORS; i++)
		sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[i]);
	sensordev_install(&sc->sc_sensordev);

	printf("\n");
}

void
maxds_refresh(void *arg)
{
	struct maxds_softc *sc = arg;
	u_int8_t cmd;
	u_int16_t data;

	iic_acquire_bus(sc->sc_tag, 0);

	cmd = DS1631_TEMP;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0) {
		sc->sc_sensor[MAXDS_TEMP].value = 273150000 +
		    (int)(betoh16(data)) / 8 * 31250;
		sc->sc_sensor[MAXDS_TEMP].flags &= ~SENSOR_FINVALID;
	} else
		sc->sc_sensor[MAXDS_TEMP].flags |= SENSOR_FINVALID;

	iic_release_bus(sc->sc_tag, 0);
}
@


1.11
log
@Mark sensor as invalid if the i2c transaction to read its value fails.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ds1631.c,v 1.10 2008/04/17 19:01:48 deraadt Exp $	*/
d111 4
@


1.10
log
@make it more apparent that when we are dealing with 16 bit registers
(not a series of 8 bit registers), the bytes come off the wire in
big-endian order
@
text
@d1 1
a1 1
/*	$OpenBSD: ds1631.c,v 1.9 2007/06/24 05:34:35 dlg Exp $	*/
d146 1
a146 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
d149 3
@


1.9
log
@rework sensor tasks to use the kernels generic workq rather than a special
kernel thread of its own. the api has changed (which will be fixed in the
manpage shortly) so all the users of sensor tasks that i can find have
been fixed too.

noone tested, so its going in to force people to run with it.
"put it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ds1631.c,v 1.8 2007/03/22 16:55:31 deraadt Exp $	*/
d139 2
a140 1
	u_int8_t cmd, data[2];
d148 1
a148 1
		    ((int)((u_int16_t)data[0] << 8 | data[1])) / 8 * 31250;
@


1.8
log
@split userland & kernel struct sensor/sensordev so that the addition
of new fields in the future is less disruptive.  This is done similar
to how struct proc is handled for ps(1).  ok jmc (man page changes)
tested fkr simon, and more suggestions from millert
@
text
@d1 1
a1 1
/*	$OpenBSD: ds1631.c,v 1.7 2006/12/23 17:46:39 deraadt Exp $	*/
d123 1
a123 1
	if (sensor_task_register(sc, maxds_refresh, 5)) {
@


1.7
log
@adapt to new two-level sensor api; Constantine A. Murenin
@
text
@d1 1
a1 1
/*	$OpenBSD: ds1631.c,v 1.6 2006/04/10 00:57:23 deraadt Exp $	*/
d43 2
a44 2
	struct sensor	sc_sensor[MAXDS_NUM_SENSORS];
	struct sensordev sc_sensordev;
@


1.6
log
@make this match our code standards
@
text
@d1 1
a1 1
/*	$OpenBSD: ds1631.c,v 1.5 2006/01/19 17:08:39 grange Exp $	*/
d44 1
d116 2
a117 3
	for (i = 0; i < MAXDS_NUM_SENSORS; i++)
		strlcpy(sc->sc_sensor[i].device, sc->sc_dev.dv_xname,
		    sizeof(sc->sc_sensor[i].device));
d120 1
a120 1
	strlcpy(sc->sc_sensor[MAXDS_TEMP].desc, "Internal Temp",
d129 2
a130 1
		sensor_add(&sc->sc_sensor[i]);
@


1.5
log
@Replace SENSOR_ADD() macro with a pair of functions
sensor_add()/sensor_del() so that sensors can be attached
and detached dynamicaly.

ok kettenis@@ deraadt@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ds1631.c,v 1.4 2006/01/13 21:41:40 deraadt Exp $	*/
d120 1
a120 1
	strlcpy(sc->sc_sensor[MAXDS_TEMP].desc, "Internal",
@


1.4
log
@handle all 3 types of chips correctly.  go into continuous mode, and
start the chips right (two kinds of start sequences).  then get the
temperature readings correctly, including negative temperatures.
done with grange.
pity the poor russian with only the lowest of the low end i2c chips
@
text
@d1 1
a1 1
/*	$OpenBSD: ds1631.c,v 1.3 2006/01/13 00:13:01 deraadt Exp $	*/
d129 1
a129 1
		SENSOR_ADD(&sc->sc_sensor[i]);
@


1.3
log
@ds1624 and ds1721 too, horrid horrid horrid chips
@
text
@d1 1
a1 1
/*	$OpenBSD: ds1631.c,v 1.2 2005/12/27 17:18:18 deraadt Exp $	*/
d27 2
d30 3
d75 1
d78 2
d83 31
d146 1
a146 1
		    1000000 * data[1] + 1000000 * data[0] / 256;
@


1.2
log
@no longer use ia_compat; tested by a few
@
text
@d1 1
a1 1
/*	$OpenBSD: ds1631.c,v 1.1 2005/11/16 06:26:14 deraadt Exp $	*/
d58 3
a60 1
	if (strcmp(ia->ia_name, "ds1631") == 0)
@


1.1
log
@driver for maxim ds1631, might work, might not!
@
text
@d1 1
a1 1
/*	$OpenBSD: ds1631.c,v 1.1 2005/11/15 23:25:24 deraadt Exp $	*/
d58 3
a60 6
	if (ia->ia_compat) {
		if (strcmp(ia->ia_compat, "ds1631") == 0)
			return (1);
		return (0);
	}
	return (1);
@

