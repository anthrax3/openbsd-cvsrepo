head	1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.52
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.42
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.50
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.48
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.46
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.44
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.40
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.38
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.36
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.34
	OPENBSD_5_0:1.1.0.32
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.30
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.28
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.24
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.26
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.22
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.20
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.18
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.16
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.14
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.12
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.10
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2004.05.23.17.33.43;	author grange;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.12.38;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.1
log
@I2C framework originally written by Steve C. Woodford and Jason R. Thorpe
for NetBSD (r).

This framework supports various i2c master controllers:
- dumb bit-bang controllers
- a few styles of automated controllers that give you control
over sending start/stop conditions on the i2c bus
- automated controllers that are too smart for its own good,
giving software no control over start/stop conditions
- smbus controllers by emulating smbus protocol with i2c commands

i2c slave devices need their addresses to be specified in the kernel
config file, no device discovery presented.

ok deraadt@@
@
text
@/*	$OpenBSD$	*/
/*	$NetBSD: i2c_io.h,v 1.1 2003/09/30 00:35:31 thorpej Exp $	*/

/*
 * Copyright (c) 2003 Wasabi Systems, Inc.
 * All rights reserved.
 *
 * Written by Jason R. Thorpe for Wasabi Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed for the NetBSD Project by
 *      Wasabi Systems, Inc.
 * 4. The name of Wasabi Systems, Inc. may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY WASABI SYSTEMS, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL WASABI SYSTEMS, INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _DEV_I2C_I2C_IO_H_
#define	_DEV_I2C_I2C_IO_H_

#include <sys/ioccom.h>

/* I2C bus address. */
typedef uint16_t i2c_addr_t;

/* High-level I2C operations. */
typedef enum {
	I2C_OP_READ		= 0,
	I2C_OP_READ_WITH_STOP	= 1,
	I2C_OP_WRITE		= 2,
	I2C_OP_WRITE_WITH_STOP	= 3,
} i2c_op_t;

#define	I2C_OP_READ_P(x)	(((int)(x) & 2) == 0)
#define	I2C_OP_WRITE_P(x)	(! I2C_OP_READ_P(x))
#define	I2C_OP_STOP_P(x)	(((int)(x) & 1) != 0)

/*
 * This structure describes a single I2C control script fragment.
 *
 * Note that use of this scripted API allows for support of automated
 * SMBus controllers.  The following table maps SMBus operations to
 * script fragment configuration:
 *
 *	SMBus "write byte":		I2C_OP_WRITE_WITH_STOP
 *					cmdlen = 1
 *
 *	SMBus "read byte":		I2C_OP_READ_WITH_STOP
 *					cmdlen = 1
 *
 *	SMBus "receive byte":		I2C_OP_READ_WITH_STOP
 *					cmdlen = 0
 *
 * Note that while each of these 3 SMBus operations implies a STOP
 * (which an automated controller will likely perform automatically),
 * non-SMBus clients may continue to function even if they issue
 * I2C_OP_WRITE and I2C_OP_READ.
 */

#ifdef notyet
/*
 * I2C_IOCTL_EXEC:
 *
 *	User ioctl to execute an i2c operation.
 */
typedef struct i2c_ioctl_exec {
	i2c_op_t iie_op;		/* operation to perform */
	i2c_addr_t iie_addr;		/* address of device */
	const void *iie_cmd;		/* pointer to command */
	size_t iie_cmdlen;		/* length of command */
	void *iie_buf;			/* pointer to data buffer */
	size_t iie_buflen;		/* length of data buffer */
} i2c_ioctl_exec_t;
#define	I2C_EXEC_MAX_CMDLEN	32
#define	I2C_EXEC_MAX_BUFLEN	32

#define	I2C_IOCTL_EXEC		 _IOW('I', 0, i2c_ioctl_exec_t)
#endif

#endif /* _DEV_I2C_I2C_IO_H_ */
@


1.1.2.1
log
@Merge with the trunk
@
text
@@

