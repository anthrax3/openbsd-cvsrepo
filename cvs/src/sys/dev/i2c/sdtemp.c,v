head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.10
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.12
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.8
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.4
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.13.0.14
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.12
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.8
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.6
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.4
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.2
	OPENBSD_5_0:1.12.0.6
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.4
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.7.0.4
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5;
locks; strict;
comment	@ * @;


1.15
date	2014.11.14.07.03.22;	author jsg;	state Exp;
branches;
next	1.14;
commitid	naCzHMrBA7BDJc1u;

1.14
date	2014.09.27.06.07.01;	author jsg;	state Exp;
branches;
next	1.13;
commitid	wVbow7LwU9NDbltA;

1.13
date	2011.10.07.06.29.43;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2010.07.09.08.05.45;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2009.07.10.18.12.56;	author cnst;	state Exp;
branches;
next	1.10;

1.10
date	2009.07.10.00.17.30;	author cnst;	state Exp;
branches;
next	1.9;

1.9
date	2009.07.10.00.07.37;	author cnst;	state Exp;
branches;
next	1.8;

1.8
date	2009.07.10.00.03.06;	author cnst;	state Exp;
branches;
next	1.7;

1.7
date	2009.04.22.01.09.23;	author cnst;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.13.17.57.15;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2008.04.17.19.01.48;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2008.04.10.17.14.09;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2008.04.09.22.04.10;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.09.21.56.40;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.07.01.31.44;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@add some more sdtemp devices
@
text
@/*	$OpenBSD: sdtemp.c,v 1.14 2014/09/27 06:07:01 jsg Exp $	*/

/*
 * Copyright (c) 2008 Theo de Raadt
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/sensors.h>

#include <dev/i2c/i2cvar.h>

/* JEDEC JC-42.4 registers */
#define JC_TEMP			0x05

/* Sensors */
#define JCTEMP_TEMP		0
#define JCTEMP_NUM_SENSORS	1

struct sdtemp_softc {
	struct device	sc_dev;
	i2c_tag_t	sc_tag;
	i2c_addr_t	sc_addr;

	struct ksensor	sc_sensor[JCTEMP_NUM_SENSORS];
	struct ksensordev sc_sensordev;
};

int	sdtemp_match(struct device *, void *, void *);
void	sdtemp_attach(struct device *, struct device *, void *);
void	sdtemp_refresh(void *);

struct cfattach sdtemp_ca = {
	sizeof(struct sdtemp_softc), sdtemp_match, sdtemp_attach
};

struct cfdriver sdtemp_cd = {
	NULL, "sdtemp", DV_DULL
};

int
sdtemp_match(struct device *parent, void *match, void *aux)
{
	struct i2c_attach_args *ia = aux;

	if (strcmp(ia->ia_name, "se97") == 0 ||
	    strcmp(ia->ia_name, "se98") == 0 ||
	    strcmp(ia->ia_name, "max6604") == 0 ||
	    strcmp(ia->ia_name, "mcp9804") == 0 ||
	    strcmp(ia->ia_name, "mcp9805") == 0 ||
	    strcmp(ia->ia_name, "mcp98242") == 0 ||
	    strcmp(ia->ia_name, "mcp98243") == 0 ||
	    strcmp(ia->ia_name, "mcp98244") == 0 ||
	    strcmp(ia->ia_name, "adt7408") == 0 ||
	    strcmp(ia->ia_name, "stts424e02") == 0 ||
	    strcmp(ia->ia_name, "stts424") == 0 ||
	    strcmp(ia->ia_name, "stts2002") == 0 ||
	    strcmp(ia->ia_name, "stts2004") == 0 ||
	    strcmp(ia->ia_name, "stts3000") == 0 ||
	    strcmp(ia->ia_name, "ts3000b3") == 0 ||
	    strcmp(ia->ia_name, "ts3000gb0") == 0 ||
	    strcmp(ia->ia_name, "ts3000gb2") == 0 ||
	    strcmp(ia->ia_name, "ts3001gb2") == 0 ||
	    strcmp(ia->ia_name, "tse2004gb2") == 0 ||
	    strcmp(ia->ia_name, "at30ts00") == 0 ||
	    strcmp(ia->ia_name, "at30tse004") == 0 ||
	    strcmp(ia->ia_name, "cat34ts02") == 0 ||
	    strcmp(ia->ia_name, "cat34ts02c") == 0 ||
	    strcmp(ia->ia_name, "cat34ts04") == 0 ||
	    strcmp(ia->ia_name, "gt30ts00") == 0 ||
	    strcmp(ia->ia_name, "gt34ts02") == 0)
		return (1);
	return (0);
}

void
sdtemp_attach(struct device *parent, struct device *self, void *aux)
{
	struct sdtemp_softc *sc = (struct sdtemp_softc *)self;
	struct i2c_attach_args *ia = aux;

	sc->sc_tag = ia->ia_tag;
	sc->sc_addr = ia->ia_addr;

	printf(": %s", ia->ia_name);

	/* Initialize sensor data. */
	strlcpy(sc->sc_sensordev.xname, sc->sc_dev.dv_xname,
	    sizeof(sc->sc_sensordev.xname));

	sc->sc_sensor[JCTEMP_TEMP].type = SENSOR_TEMP;

	if (sensor_task_register(sc, sdtemp_refresh, 5) == NULL) {
		printf(", unable to register update task\n");
		return;
	}

	sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[0]);
	sensordev_install(&sc->sc_sensordev);

	printf("\n");
}

void
sdtemp_refresh(void *arg)
{
	struct sdtemp_softc *sc = arg;
	u_int8_t cmd;
	int16_t data, sdata;

	iic_acquire_bus(sc->sc_tag, 0);

	cmd = JC_TEMP;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP, sc->sc_addr,
	    &cmd, sizeof cmd, &data, sizeof data, 0) == 0) {
		sdata = betoh16(data) & 0x1fff;
		if (sdata & 0x1000)
			sdata -= 0x2000;
		sc->sc_sensor[JCTEMP_TEMP].value =
		    273150000 + 62500 * sdata;
		sc->sc_sensor[JCTEMP_TEMP].flags &= ~SENSOR_FINVALID;
#if 0
		printf("sdtemp %04x %04x %d\n", data & 0xffff,
		    (u_int)sdata & 0xffff,
		    sc->sc_sensor[JCTEMP_TEMP].value);
#endif
	}

	iic_release_bus(sc->sc_tag, 0);
}
@


1.14
log
@add some more sdtemp devices
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdtemp.c,v 1.13 2011/10/07 06:29:43 deraadt Exp $	*/
d77 1
d82 1
@


1.13
log
@Detect the ts3000b3 and stts2002, and weaken the cat34ts02 model check
since a similar device (not yet named as far as I can see) has showed up
on the market. cat34ts02 tested by weerd.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdtemp.c,v 1.12 2010/07/09 08:05:45 deraadt Exp $	*/
d62 1
d66 1
d71 2
d74 9
a82 1
	    strcmp(ia->ia_name, "cat34ts02") == 0)
@


1.12
log
@3 more JEDEC JC-42.4 sensors are the market
@
text
@d1 1
a1 1
/*	$OpenBSD: sdtemp.c,v 1.11 2009/07/10 18:12:56 cnst Exp $	*/
d68 2
@


1.11
log
@fix the complement in the 2's complement patch from yesterday;  ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: sdtemp.c,v 1.10 2009/07/10 00:17:30 cnst Exp $	*/
d61 1
d64 1
d67 1
@


1.10
log
@support onsemi's cat34ts02 and cat6095;  ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: sdtemp.c,v 1.9 2009/07/10 00:07:37 cnst Exp $	*/
d112 1
a112 1
			sdata = -0x2000;
@


1.9
log
@the temperature value is really a 13-bit 2's complement;  ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: sdtemp.c,v 1.8 2009/07/10 00:03:06 cnst Exp $	*/
d64 2
a65 1
	    strcmp(ia->ia_name, "stts424e02") == 0)
@


1.8
log
@fix the mask for the sign bit and some comment;  ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: sdtemp.c,v 1.7 2009/04/22 01:09:23 cnst Exp $	*/
a27 1
#define  JC_TEMP_SIGN		0x1000
d109 3
a111 3
		sdata = betoh16(data) & 0x0fff;
		if (betoh16(data) & JC_TEMP_SIGN)
			sdata = -sdata;
@


1.7
log
@remove a meaningless sensor.desc;  ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: sdtemp.c,v 1.6 2008/11/13 17:57:15 deraadt Exp $	*/
d26 1
a26 1
/* JDEC JC-42.4 registers */
d28 1
a28 1
#define JC_TEMP_SIGN		0x10
@


1.6
log
@add support for ST's chip since documentation is now available at
http://www.st.com/stonline/products/literature/ds/13448/stts424e02.pdf
as discovered by Gert-Jan Vons.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdtemp.c,v 1.5 2008/04/17 19:01:48 deraadt Exp $	*/
a85 2
	strlcpy(sc->sc_sensor[JCTEMP_TEMP].desc, "Temperature",
	    sizeof(sc->sc_sensor[JCTEMP_TEMP].desc));
@


1.5
log
@make it more apparent that when we are dealing with 16 bit registers
(not a series of 8 bit registers), the bytes come off the wire in
big-endian order
@
text
@d1 1
a1 1
/*	$OpenBSD: sdtemp.c,v 1.4 2008/04/10 17:14:09 deraadt Exp $	*/
d64 2
a65 1
	    strcmp(ia->ia_name, "adt7408") == 0)
@


1.4
log
@MCP98242 temp sensor docs found..
@
text
@d1 1
a1 1
/*	$OpenBSD: sdtemp.c,v 1.3 2008/04/09 22:04:10 deraadt Exp $	*/
d103 2
a104 2
	u_int8_t cmd, data[2];
	int16_t sdata;
d110 3
a112 3
	    &cmd, sizeof cmd, data, sizeof data, 0) == 0) {
		sdata = ((data[0] << 8) | data[1]) & 0x0fff;
		if (data[0] & JC_TEMP_SIGN)
d118 1
a118 1
		printf("sdtemp %02x%02x %04x %d\n", data[0], data[1],
@


1.3
log
@Recognize and support the Microchip MCP9805 JC-42.2 sensor (we hope; I am
simply going through datasheets found on the net...)
@
text
@d1 1
a1 1
/*	$OpenBSD: sdtemp.c,v 1.2 2008/04/09 21:56:40 deraadt Exp $	*/
d63 1
@


1.2
log
@support the NPX SE97 too
@
text
@d1 1
a1 1
/*	$OpenBSD: sdtemp.c,v 1.1 2008/04/07 01:31:44 deraadt Exp $	*/
d62 1
@


1.1
log
@New sensor driver for JDEC JC-42.4 standard dimm temperature sensors
(still extremely rare devices.. so rare I had to wire up a chip myself)
@
text
@d1 1
a1 1
/*	$OpenBSD: sdtemp.c,v 1.27 2007/06/24 05:34:35 dlg Exp $	*/
d60 2
a61 1
	if (strcmp(ia->ia_name, "se98") == 0 ||
@

