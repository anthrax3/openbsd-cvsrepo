head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.40
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.38
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.34
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.24
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.32
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.30
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.28
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.26
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.22
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.20
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.18
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.16
	OPENBSD_5_0:1.9.0.14
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.12
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.10
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.6
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.8
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.4
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.8.0.4
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4;
locks; strict;
comment	@ * @;


1.9
date	2008.05.01.23.02.05;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.24.05.34.35;	author dlg;	state Exp;
branches;
next	1.7;

1.7
date	2007.03.22.16.55.31;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.12.23.17.46.39;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.10.00.57.23;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.19.17.08.39;	author grange;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.27.17.18.18;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.22.22.56.48;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.15.23.25.24;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@correct attach messages
@
text
@/*	$OpenBSD: adm1030.c,v 1.8 2007/06/24 05:34:35 dlg Exp $	*/

/*
 * Copyright (c) 2005 Theo de Raadt
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/sensors.h>

#include <dev/i2c/i2cvar.h>

/* adm 1030 registers */
#define ADM1030_INT_TEMP	0x0a
#define ADM1030_EXT_TEMP	0x0b
#define ADM1030_FAN		0x08
#define ADM1030_FANC		0x20
#define  ADM1024_FANC_VAL(x)	(x >> 6)

/* Sensors */
#define ADMTMP_INT		0
#define ADMTMP_EXT		1
#define ADMTMP_FAN		2
#define ADMTMP_NUM_SENSORS	3

struct admtmp_softc {
	struct device	sc_dev;
	i2c_tag_t	sc_tag;
	i2c_addr_t	sc_addr;
	int		sc_fanmul;

	struct ksensor	sc_sensor[ADMTMP_NUM_SENSORS];
	struct ksensordev sc_sensordev;
};

int	admtmp_match(struct device *, void *, void *);
void	admtmp_attach(struct device *, struct device *, void *);
void	admtmp_refresh(void *);

struct cfattach admtmp_ca = {
	sizeof(struct admtmp_softc), admtmp_match, admtmp_attach
};

struct cfdriver admtmp_cd = {
	NULL, "admtmp", DV_DULL
};

int
admtmp_match(struct device *parent, void *match, void *aux)
{
	struct i2c_attach_args *ia = aux;

	if (strcmp(ia->ia_name, "adm1030") == 0)
		return (1);
	return (0);
}

void
admtmp_attach(struct device *parent, struct device *self, void *aux)
{
	struct admtmp_softc *sc = (struct admtmp_softc *)self;
	struct i2c_attach_args *ia = aux;
	u_int8_t cmd, data;
	int i;

	sc->sc_tag = ia->ia_tag;
	sc->sc_addr = ia->ia_addr;

	cmd = ADM1030_FANC;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0)) {
		printf(": unable to read fan setting\n");
		return;
	}

	sc->sc_fanmul = 11250/8 * (1 << ADM1024_FANC_VAL(data)) * 60;

	/* Initialize sensor data. */
	strlcpy(sc->sc_sensordev.xname, sc->sc_dev.dv_xname,
	    sizeof(sc->sc_sensordev.xname));

	sc->sc_sensor[ADMTMP_INT].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[ADMTMP_INT].desc, "Internal",
	    sizeof(sc->sc_sensor[ADMTMP_INT].desc));

	sc->sc_sensor[ADMTMP_EXT].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[ADMTMP_EXT].desc, "External",
	    sizeof(sc->sc_sensor[ADMTMP_EXT].desc));

	sc->sc_sensor[ADMTMP_FAN].type = SENSOR_FANRPM;

	if (sensor_task_register(sc, admtmp_refresh, 5) == NULL) {
		printf(": unable to register update task\n");
		return;
	}

	for (i = 0; i < ADMTMP_NUM_SENSORS; i++)
		sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[i]);
	sensordev_install(&sc->sc_sensordev);

	printf("\n");
}

void
admtmp_refresh(void *arg)
{
	struct admtmp_softc *sc = arg;
	u_int8_t cmd, data;

	iic_acquire_bus(sc->sc_tag, 0);

	cmd = ADM1030_INT_TEMP;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMTMP_INT].value = 273150000 + 1000000 * data;

	cmd = ADM1030_EXT_TEMP;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMTMP_EXT].value = 273150000 + 1000000 * data;

	cmd = ADM1030_FAN;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0) {
		if (data == 0)
			sc->sc_sensor[ADMTMP_FAN].flags |= SENSOR_FINVALID;
		else {
			sc->sc_sensor[ADMTMP_FAN].value =
			    sc->sc_fanmul / (2 * (int)data);
			sc->sc_sensor[ADMTMP_FAN].flags &= ~SENSOR_FINVALID;
		}
	}

	iic_release_bus(sc->sc_tag, 0);
}
@


1.8
log
@rework sensor tasks to use the kernels generic workq rather than a special
kernel thread of its own. the api has changed (which will be fixed in the
manpage shortly) so all the users of sensor tasks that i can find have
been fixed too.

noone tested, so its going in to force people to run with it.
"put it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1030.c,v 1.7 2007/03/22 16:55:31 deraadt Exp $	*/
d85 1
a85 1
		printf(", unable to read fan setting\n");
d106 1
a106 1
		printf(", unable to register update task\n");
@


1.7
log
@split userland & kernel struct sensor/sensordev so that the addition
of new fields in the future is less disruptive.  This is done similar
to how struct proc is handled for ps(1).  ok jmc (man page changes)
tested fkr simon, and more suggestions from millert
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1030.c,v 1.6 2006/12/23 17:46:39 deraadt Exp $	*/
d105 1
a105 1
	if (sensor_task_register(sc, admtmp_refresh, 5)) {
@


1.6
log
@adapt to new two-level sensor api; Constantine A. Murenin
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1030.c,v 1.5 2006/04/10 00:57:23 deraadt Exp $	*/
d45 2
a46 2
	struct sensor	sc_sensor[ADMTMP_NUM_SENSORS];
	struct sensordev sc_sensordev;
@


1.5
log
@make this match our code standards
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1030.c,v 1.4 2006/01/19 17:08:39 grange Exp $	*/
d46 1
d92 2
a93 3
	for (i = 0; i < ADMTMP_NUM_SENSORS; i++)
		strlcpy(sc->sc_sensor[i].device, sc->sc_dev.dv_xname,
		    sizeof(sc->sc_sensor[i].device));
d96 1
a96 1
	strlcpy(sc->sc_sensor[ADMTMP_INT].desc, "Internal Temp",
d100 1
a100 1
	strlcpy(sc->sc_sensor[ADMTMP_EXT].desc, "External Temp",
a103 2
	strlcpy(sc->sc_sensor[ADMTMP_FAN].desc, "Fan",
	    sizeof(sc->sc_sensor[ADMTMP_FAN].desc));
d111 2
a112 1
		sensor_add(&sc->sc_sensor[i]);
@


1.4
log
@Replace SENSOR_ADD() macro with a pair of functions
sensor_add()/sensor_del() so that sensors can be attached
and detached dynamicaly.

ok kettenis@@ deraadt@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1030.c,v 1.3 2005/12/27 17:18:18 deraadt Exp $	*/
d96 1
a96 1
	strlcpy(sc->sc_sensor[ADMTMP_INT].desc, "Internal",
d100 1
a100 1
	strlcpy(sc->sc_sensor[ADMTMP_EXT].desc, "External",
@


1.3
log
@no longer use ia_compat; tested by a few
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1030.c,v 1.2 2005/12/22 22:56:48 deraadt Exp $	*/
d113 1
a113 1
		SENSOR_ADD(&sc->sc_sensor[i]);
@


1.2
log
@typo
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1030.c,v 1.1 2005/11/15 23:25:24 deraadt Exp $	*/
d65 3
a67 6
	if (ia->ia_compat) {
		if (strcmp(ia->ia_compat, "adm1030") == 0)
			return (1);
		return (0);
	}
	return (1);
@


1.1
log
@driver for adm1030 i2c temp + fan controller
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1030.c,v 1.1 2005/11/15 16:24:49 deraadt Exp $	*/
d26 1
a26 1
/* Maxim 6690 registers */
@

