head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.42
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.38
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.28
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.36
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.34
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.32
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.30
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.26
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.24
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.22
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.20
	OPENBSD_5_0:1.7.0.18
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.16
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.14
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.10
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.12
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.8
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.6
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2007.06.24.05.34.35;	author dlg;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.22.16.55.31;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.07.18.27.46;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.23.17.46.39;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.19.17.08.39;	author grange;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.27.17.18.18;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.16.18.51.45;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@rework sensor tasks to use the kernels generic workq rather than a special
kernel thread of its own. the api has changed (which will be fixed in the
manpage shortly) so all the users of sensor tasks that i can find have
been fixed too.

noone tested, so its going in to force people to run with it.
"put it in" deraadt@@
@
text
@/*	$OpenBSD: fcu.c,v 1.6 2007/03/22 16:55:31 deraadt Exp $	*/

/*
 * Copyright (c) 2005 Mark Kettenis
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/sensors.h>

#include <dev/i2c/i2cvar.h>

/* FCU registers */
#define FCU_FAN_FAIL	0x0b		/* fans states in bits 0<1-6>7 */
#define FCU_FAN_ACTIVE	0x0d
#define FCU_FANREAD(x)	0x11 + (x)*2
#define FCU_FANSET(x)	0x10 + (x)*2
#define FCU_PWM_FAIL	0x2b
#define FCU_PWM_ACTIVE	0x2d
#define FCU_PWMREAD(x)	0x30 + (x)*2

/* Sensors */
#define FCU_RPM1		0
#define FCU_RPM2		1
#define FCU_RPM3		2
#define FCU_RPM4		3
#define FCU_RPM5		4
#define FCU_RPM6		5
#define  FCU_FANS		6
#define FCU_PWM1		6
#define FCU_PWM2		7
#define  FCU_PWMS		2
#define FCU_NUM_SENSORS		8

struct fcu_softc {
	struct device sc_dev;
	i2c_tag_t sc_tag;
	i2c_addr_t sc_addr;

	struct ksensor sc_sensor[FCU_NUM_SENSORS];
	struct ksensordev sc_sensordev;
};

int	fcu_match(struct device *, void *, void *);
void	fcu_attach(struct device *, struct device *, void *);

void	fcu_refresh(void *);

struct cfattach fcu_ca = {
	sizeof(struct fcu_softc), fcu_match, fcu_attach
};

struct cfdriver fcu_cd = {
	NULL, "fcu", DV_DULL
};

int
fcu_match(struct device *parent, void *match, void *aux)
{
	struct i2c_attach_args *ia = aux;

	if (strcmp(ia->ia_name, "fcu") == 0)
		return (1);
	return (0);
}

void
fcu_attach(struct device *parent, struct device *self, void *aux)
{
	struct fcu_softc *sc = (struct fcu_softc *)self;
	struct i2c_attach_args *ia = aux;
	int i;

	sc->sc_tag = ia->ia_tag;
	sc->sc_addr = ia->ia_addr;

	/* Initialize sensor data. */
	strlcpy(sc->sc_sensordev.xname, sc->sc_dev.dv_xname,
	    sizeof(sc->sc_sensordev.xname));
	for (i = 0; i < FCU_FANS; i++)
		sc->sc_sensor[i].type = SENSOR_FANRPM;
	for (i = 0; i < FCU_PWMS; i++) {
		sc->sc_sensor[FCU_PWM1 + i].type = SENSOR_PERCENT;
		strlcpy(sc->sc_sensor[FCU_PWM1 + i].desc, "PWM",
		    sizeof(sc->sc_sensor[FCU_PWM1 + i].desc));
	}

	if (sensor_task_register(sc, fcu_refresh, 5) == NULL) {
		printf(", unable to register update task\n");
		return;
	}

	for (i = 0; i < FCU_NUM_SENSORS; i++)
		sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[i]);
	sensordev_install(&sc->sc_sensordev);

	printf("\n");
}

void
fcu_refresh(void *arg)
{
	struct fcu_softc *sc = arg;
	u_int8_t cmd, fail, fan[2], active;
	int i;

	iic_acquire_bus(sc->sc_tag, 0);

	cmd = FCU_FAN_FAIL;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &fail, sizeof fail, 0))
		goto abort;
	cmd = FCU_FAN_ACTIVE;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &active, sizeof active, 0))
		goto abort;
	fail &= active;

	for (i = 0; i < FCU_FANS; i++) {
		if (fail & (1 << (i + 1)))
			sc->sc_sensor[i].flags |= SENSOR_FINVALID;
		else
			sc->sc_sensor[i].flags &= ~SENSOR_FINVALID;
	}

	cmd = FCU_PWM_FAIL;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &fail, sizeof fail, 0))
		goto abort;
	cmd = FCU_PWM_ACTIVE;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &active, sizeof active, 0))
		goto abort;
	fail &= active;

	for (i = 0; i < FCU_PWMS; i++) {
		if (fail & (1 << (i + 1)))
			sc->sc_sensor[FCU_PWMS + i].flags |= SENSOR_FINVALID;
		else
			sc->sc_sensor[FCU_PWMS + i].flags &= ~SENSOR_FINVALID;
	}

	for (i = 0; i < FCU_FANS; i++) {
		cmd = FCU_FANREAD(i + 1);
		if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
		    sc->sc_addr, &cmd, sizeof cmd, &fan, sizeof fan, 0)) {
			sc->sc_sensor[FCU_RPM1 + i].flags |= SENSOR_FINVALID;
			continue;
		}
		sc->sc_sensor[FCU_RPM1 + i].value = (fan[0] << 5) | (fan[1] >> 3);
	}

	for (i = 0; i < FCU_PWMS; i++) {
		cmd = FCU_PWMREAD(i + 1);
		if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
		    sc->sc_addr, &cmd, sizeof cmd, &fan, sizeof fan, 0)) {
			sc->sc_sensor[FCU_PWM1 + i].flags |= SENSOR_FINVALID;
			continue;
		}
		sc->sc_sensor[FCU_PWM1 + i].value = (fan[0] * 100 * 1000) / 255;
	}

abort:
	iic_release_bus(sc->sc_tag, 0);
}
@


1.6
log
@split userland & kernel struct sensor/sensordev so that the addition
of new fields in the future is less disruptive.  This is done similar
to how struct proc is handled for ps(1).  ok jmc (man page changes)
tested fkr simon, and more suggestions from millert
@
text
@d1 1
a1 1
/*	$OpenBSD: fcu.c,v 1.5 2007/01/07 18:27:46 deraadt Exp $	*/
d101 1
a101 1
	if (sensor_task_register(sc, fcu_refresh, 5)) {
@


1.5
log
@fcu fans are PWM, express as %; from murenin
@
text
@d1 1
a1 1
/*	$OpenBSD: fcu.c,v 1.4 2006/12/23 17:46:39 deraadt Exp $	*/
d53 2
a54 2
	struct sensor sc_sensor[FCU_NUM_SENSORS];
	struct sensordev sc_sensordev;
@


1.4
log
@adapt to new two-level sensor api; Constantine A. Murenin
@
text
@d1 1
a1 1
/*	$OpenBSD: fcu.c,v 1.3 2006/01/19 17:08:39 grange Exp $	*/
d96 1
a96 1
		sc->sc_sensor[FCU_PWM1 + i].type = SENSOR_FANRPM;
d173 1
a173 1
		sc->sc_sensor[FCU_PWM1 + i].value = (fan[0] * 1000) / 2559;
@


1.3
log
@Replace SENSOR_ADD() macro with a pair of functions
sensor_add()/sensor_del() so that sensors can be attached
and detached dynamicaly.

ok kettenis@@ deraadt@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fcu.c,v 1.2 2005/12/27 17:18:18 deraadt Exp $	*/
d54 1
d91 3
a93 3
	for (i = 0; i < FCU_FANS; i++) {
		strlcpy(sc->sc_sensor[i].device, sc->sc_dev.dv_xname,
		    sizeof(sc->sc_sensor[i].device));
a94 3
		snprintf(sc->sc_sensor[i].desc,
		    sizeof(sc->sc_sensor[i].desc), "FAN%d", i);
	}
a95 2
		strlcpy(sc->sc_sensor[FCU_PWM1 + i].device, sc->sc_dev.dv_xname,
		    sizeof(sc->sc_sensor[FCU_PWM1 + i].device));
d97 2
a98 2
		snprintf(sc->sc_sensor[FCU_PWM1 + i].desc,
		    sizeof(sc->sc_sensor[FCU_PWM1 + i].desc), "PWM%d", i);
d107 2
a108 1
		sensor_add(&sc->sc_sensor[i]);
@


1.2
log
@no longer use ia_compat; tested by a few
@
text
@d1 1
a1 1
/*	$OpenBSD: fcu.c,v 1.1 2005/11/16 18:51:45 deraadt Exp $	*/
d111 1
a111 1
		SENSOR_ADD(&sc->sc_sensor[i]);
@


1.1
log
@basic driver for apple fcu fan controller.  can read up to 6 fan rpm's
and up to 2 fan pwms.  we do not yet adjust the fan speeds, because we do
not have a death wish
@
text
@d1 1
a1 1
/*	$OpenBSD: fcu.c,v 1.6 2005/11/15 22:01:36 deraadt Exp $	*/
d74 3
a76 6
	if (ia->ia_compat) {
		if (strcmp(ia->ia_compat, "fcu") == 0)
			return (1);
		return (0);
	}
	return (0);	/* Apple-only */
@

