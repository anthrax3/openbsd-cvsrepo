head	1.16;
access;
symbols
	OPENBSD_6_1:1.16.0.38
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.36
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.26
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.34
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.32
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.30
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.28
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.24
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.22
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.20
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.18
	OPENBSD_5_0:1.16.0.16
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.14
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.12
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.8
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.10
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.6
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.4
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.2
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6;
locks; strict;
comment	@ * @;


1.16
date	2007.10.20.22.06.43;	author cnst;	state Exp;
branches;
next	1.15;

1.15
date	2007.06.24.05.34.35;	author dlg;	state Exp;
branches;
next	1.14;

1.14
date	2007.03.22.16.55.31;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2006.12.23.17.46.39;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2006.11.20.21.53.02;	author kettenis;	state Exp;
branches;
next	1.11;

1.11
date	2006.11.20.18.51.07;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2006.04.30.22.30.17;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.30.09.33.19;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.17.18.33.00;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.10.00.57.23;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.19.17.08.39;	author grange;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.31.04.31.27;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.28.23.05.21;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.27.17.18.18;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.16.16.27.53;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.15.16.24.49;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.16
log
@_check prototypes are no longer used (replaced by i2c_scan.c); ok deraadt@@
@
text
@/*	$OpenBSD: maxim6690.c,v 1.15 2007/06/24 05:34:35 dlg Exp $	*/

/*
 * Copyright (c) 2005 Theo de Raadt
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/sensors.h>

#include <dev/i2c/i2cvar.h>

/* Maxim MAX6642/90 registers */
#define MAX6690_INT_TEMP	0x00
#define MAX6690_EXT_TEMP	0x01
#define MAX6690_INT_TEMP2	0x11
#define MAX6690_EXT_TEMP2	0x10
#define MAX6690_STATUS		0x02
#define MAX6690_DEVID		0xfe
#define MAX6690_REVISION	0xff	/* absent on MAX6642 */

#define MAX6642_TEMP_INVALID	0xff	/* sensor disconnected */
#define MAX6690_TEMP_INVALID	0x80	/* sensor disconnected */
#define MAX6690_TEMP_INVALID2	0x7f	/* open-circuit without pull-up */
#define LM90_TEMP_INVALID	0x7f	/* sensor disconnected */

#define MAX6642_TEMP2_MASK	0xc0	/* significant bits */
#define MAX6690_TEMP2_MASK	0xe0	/* significant bits */
#define LM90_TEMP2_MASK		0xe0	/* significant bits */

/* Sensors */
#define MAXTMP_INT		0
#define MAXTMP_EXT		1
#define MAXTMP_NUM_SENSORS	2

struct maxtmp_softc {
	struct device sc_dev;
	i2c_tag_t sc_tag;
	i2c_addr_t sc_addr;

	u_int8_t sc_temp_invalid[2];
	u_int8_t sc_temp2_mask;

	struct ksensor sc_sensor[MAXTMP_NUM_SENSORS];
	struct ksensordev sc_sensordev;
};

int	maxtmp_match(struct device *, void *, void *);
void	maxtmp_attach(struct device *, struct device *, void *);
void	maxtmp_refresh(void *);

struct cfattach maxtmp_ca = {
	sizeof(struct maxtmp_softc), maxtmp_match, maxtmp_attach
};

struct cfdriver maxtmp_cd = {
	NULL, "maxtmp", DV_DULL
};

int
maxtmp_match(struct device *parent, void *match, void *aux)
{
	struct i2c_attach_args *ia = aux;

	if (strcmp(ia->ia_name, "max6642") == 0 ||
	    strcmp(ia->ia_name, "max6690") == 0 ||
	    strcmp(ia->ia_name, "max6657") == 0 ||
	    strcmp(ia->ia_name, "max6658") == 0 ||
	    strcmp(ia->ia_name, "max6659") == 0 ||
	    strcmp(ia->ia_name, "lm63") == 0 ||
	    strcmp(ia->ia_name, "lm86") == 0 ||
	    strcmp(ia->ia_name, "lm89") == 0 ||
	    strcmp(ia->ia_name, "lm89-1") == 0 ||
	    strcmp(ia->ia_name, "lm90") == 0 ||
	    strcmp(ia->ia_name, "lm99") == 0 ||
	    strcmp(ia->ia_name, "lm99-1") == 0)
		return (1);
	return (0);
}

void
maxtmp_attach(struct device *parent, struct device *self, void *aux)
{
	struct maxtmp_softc *sc = (struct maxtmp_softc *)self;
	struct i2c_attach_args *ia = aux;
	int i;

	sc->sc_tag = ia->ia_tag;
	sc->sc_addr = ia->ia_addr;

	if (strcmp(ia->ia_name, "max6642") == 0) {
		sc->sc_temp_invalid[0] = MAX6642_TEMP_INVALID;
		sc->sc_temp_invalid[1] = MAX6642_TEMP_INVALID;
		sc->sc_temp2_mask = MAX6642_TEMP2_MASK;
	} else if (strcmp(ia->ia_name, "max6690") == 0 ||
	    strcmp(ia->ia_name, "max6657") == 0 ||
	    strcmp(ia->ia_name, "max6658") == 0 ||
	    strcmp(ia->ia_name, "max6659") == 0) {
		sc->sc_temp_invalid[0] = MAX6690_TEMP_INVALID;
		sc->sc_temp_invalid[1] = MAX6690_TEMP_INVALID2;
		sc->sc_temp2_mask = MAX6690_TEMP2_MASK;
	} else {
		sc->sc_temp_invalid[0] = LM90_TEMP_INVALID;
		sc->sc_temp_invalid[1] = LM90_TEMP_INVALID;
		sc->sc_temp2_mask = LM90_TEMP2_MASK;
	}
	printf(": %s", ia->ia_name);

	/* Initialize sensor data. */
	strlcpy(sc->sc_sensordev.xname, sc->sc_dev.dv_xname,
	    sizeof(sc->sc_sensordev.xname));

	sc->sc_sensor[MAXTMP_INT].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[MAXTMP_INT].desc, "Internal",
	    sizeof(sc->sc_sensor[MAXTMP_INT].desc));

	sc->sc_sensor[MAXTMP_EXT].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[MAXTMP_EXT].desc, "External",
	    sizeof(sc->sc_sensor[MAXTMP_EXT].desc));

	if (sensor_task_register(sc, maxtmp_refresh, 5) == NULL) {
		printf(", unable to register update task\n");
		return;
	}

	for (i = 0; i < MAXTMP_NUM_SENSORS; i++)
		sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[i]);
	sensordev_install(&sc->sc_sensordev);

	printf("\n");
}

void	maxtmp_readport(struct maxtmp_softc *, u_int8_t, u_int8_t, int);

void
maxtmp_readport(struct maxtmp_softc *sc, u_int8_t cmd1, u_int8_t cmd2,
    int index)
{
	u_int8_t data, data2;

	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd1, sizeof cmd1, &data, sizeof data, 0))
		goto invalid;
	if (data == sc->sc_temp_invalid[0] || data == sc->sc_temp_invalid[1])
		goto invalid;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd2, sizeof cmd2, &data2, sizeof data2, 0))
		goto invalid;

	/* Set any meaningless bits to zero. */
	data2 &= sc->sc_temp2_mask;

	sc->sc_sensor[index].value = 273150000 +
	    1000000 * data + (data2 >> 5) * 1000000 / 8;
	return;

invalid:
	sc->sc_sensor[index].flags |= SENSOR_FINVALID;
}

void
maxtmp_refresh(void *arg)
{
	struct maxtmp_softc *sc = arg;

	iic_acquire_bus(sc->sc_tag, 0);

	maxtmp_readport(sc, MAX6690_INT_TEMP, MAX6690_INT_TEMP2, MAXTMP_INT);
	maxtmp_readport(sc, MAX6690_EXT_TEMP, MAX6690_EXT_TEMP2, MAXTMP_EXT);

	iic_release_bus(sc->sc_tag, 0);
}
@


1.15
log
@rework sensor tasks to use the kernels generic workq rather than a special
kernel thread of its own. the api has changed (which will be fixed in the
manpage shortly) so all the users of sensor tasks that i can find have
been fixed too.

noone tested, so its going in to force people to run with it.
"put it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: maxim6690.c,v 1.14 2007/03/22 16:55:31 deraadt Exp $	*/
a62 1
int	maxtmp_check(struct i2c_attach_args *, u_int8_t *, u_int8_t *);
@


1.14
log
@split userland & kernel struct sensor/sensordev so that the addition
of new fields in the future is less disruptive.  This is done similar
to how struct proc is handled for ps(1).  ok jmc (man page changes)
tested fkr simon, and more suggestions from millert
@
text
@d1 1
a1 1
/*	$OpenBSD: maxim6690.c,v 1.13 2006/12/23 17:46:39 deraadt Exp $	*/
d135 1
a135 1
	if (sensor_task_register(sc, maxtmp_refresh, 5)) {
@


1.13
log
@adapt to new two-level sensor api; Constantine A. Murenin
@
text
@d1 1
a1 1
/*	$OpenBSD: maxim6690.c,v 1.12 2006/11/20 21:53:02 kettenis Exp $	*/
d57 2
a58 2
	struct sensor sc_sensor[MAXTMP_NUM_SENSORS];
	struct sensordev sc_sensordev;
@


1.12
log
@Fix register number definitions.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: maxim6690.c,v 1.11 2006/11/20 18:51:07 kettenis Exp $	*/
d58 1
d124 2
a125 3
	for (i = 0; i < MAXTMP_NUM_SENSORS; i++)
		strlcpy(sc->sc_sensor[i].device, sc->sc_dev.dv_xname,
		    sizeof(sc->sc_sensor[i].device));
d128 1
a128 1
	strlcpy(sc->sc_sensor[MAXTMP_INT].desc, "Internal Temp",
d132 1
a132 1
	strlcpy(sc->sc_sensor[MAXTMP_EXT].desc, "External Temp",
d141 2
a142 1
		sensor_add(&sc->sc_sensor[i]);
@


1.11
log
@Add support for LM63.

tested by niklas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: maxim6690.c,v 1.10 2006/04/30 22:30:17 djm Exp $	*/
d29 2
a30 2
#define MAX6690_INT_TEMP2	0x10
#define MAX6690_EXT_TEMP2	0x11
@


1.10
log
@incorporate feedback from kettenis@@: fix init of sc_temp_invalid for LM90,
make sc_temp_invalid an array and set 0x7f as an invalid reading for the
Maxim 6690 too
@
text
@d1 1
a1 1
/*	$OpenBSD: maxim6690.c,v 1.9 2006/04/30 09:33:19 djm Exp $	*/
d83 1
@


1.9
log
@support the Maxim 6657, 6658 and 6659 parts, which are register-wise
identical to the Maxim 6690. Also fixes a bug which caused Maxim 6642
parts to be mishandled; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: maxim6690.c,v 1.8 2006/04/17 18:33:00 kettenis Exp $	*/
a35 1
#define MAX6657_TEMP_INVALID2	0x7f	/* sensor disconnected */
d37 1
d54 1
a54 2
	u_int8_t sc_temp_invalid;
	u_int8_t sc_temp_invalid2;
d104 2
a105 2
		sc->sc_temp_invalid = MAX6642_TEMP_INVALID;
		sc->sc_temp_invalid2 = MAX6642_TEMP_INVALID;
d107 2
a108 5
	} else if (strcmp(ia->ia_name, "max6690") == 0) {
		sc->sc_temp_invalid = MAX6690_TEMP_INVALID;
		sc->sc_temp_invalid2 = MAX6690_TEMP_INVALID;
		sc->sc_temp2_mask = MAX6690_TEMP2_MASK;
	} else if (strcmp(ia->ia_name, "max6657") == 0 ||
d111 2
a112 2
		sc->sc_temp_invalid = MAX6690_TEMP_INVALID;
		sc->sc_temp_invalid2 = MAX6657_TEMP_INVALID2; /* open circuit */
d115 2
a116 1
		sc->sc_temp_invalid = LM90_TEMP_INVALID;
d156 1
a156 1
	if (data == sc->sc_temp_invalid || data == sc->sc_temp_invalid2)
@


1.8
log
@Reorganize the 0xfe vendor register block, adding new devices and tightening
checks on existing devices.
"slap it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: maxim6690.c,v 1.7 2006/04/10 00:57:23 deraadt Exp $	*/
d36 1
d55 1
d81 3
d106 1
d108 1
a108 1
	} if (strcmp(ia->ia_name, "max6690") == 0) {
d110 7
d159 1
a159 1
	if (data == sc->sc_temp_invalid)
@


1.7
log
@make this match our code standards
@
text
@d1 1
a1 1
/*	$OpenBSD: maxim6690.c,v 1.6 2006/01/19 17:08:39 grange Exp $	*/
d81 1
@


1.6
log
@Replace SENSOR_ADD() macro with a pair of functions
sensor_add()/sensor_del() so that sensors can be attached
and detached dynamicaly.

ok kettenis@@ deraadt@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: maxim6690.c,v 1.5 2005/12/31 04:31:27 deraadt Exp $	*/
d116 1
a116 1
	strlcpy(sc->sc_sensor[MAXTMP_INT].desc, "Internal",
d120 1
a120 1
	strlcpy(sc->sc_sensor[MAXTMP_EXT].desc, "External",
@


1.5
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: maxim6690.c,v 1.4 2005/12/28 23:05:21 deraadt Exp $	*/
d129 1
a129 1
		SENSOR_ADD(&sc->sc_sensor[i]);
@


1.4
log
@this should also match lm86, lm89, lm90, lm99, lm89-1, lm99-1, i think
@
text
@d1 1
a1 1
/*	$OpenBSD: maxim6690.c,v 1.3 2005/12/27 17:18:18 deraadt Exp $	*/
d109 1
a109 1
	
d141 1
a141 1
	
@


1.3
log
@no longer use ia_compat; tested by a few
@
text
@d1 1
a1 1
/*	$OpenBSD: maxim6690.c,v 1.2 2005/11/16 16:27:53 kettenis Exp $	*/
d37 1
d41 1
a72 31
maxtmp_check(struct i2c_attach_args *ia, u_int8_t *idp, u_int8_t *revp)
{
	u_int8_t cmd, id, rev;

	iic_acquire_bus(ia->ia_tag, 0);

	cmd = MAX6690_DEVID;
	if (iic_exec(ia->ia_tag, I2C_OP_READ_WITH_STOP,
	    ia->ia_addr, &cmd, sizeof cmd, &id, sizeof id, 0)) {
		iic_release_bus(ia->ia_tag, 0);
		return 0;
	}

	cmd = MAX6690_REVISION;
	if (iic_exec(ia->ia_tag, I2C_OP_READ_WITH_STOP,
	    ia->ia_addr, &cmd, sizeof cmd, &rev, sizeof rev, 0)) {
		iic_release_bus(ia->ia_tag, 0);
		return 0;
	}

	iic_release_bus(ia->ia_tag, 0);

	*idp = id;
	*revp = rev;

	if (id == 0x4d)
		return (1);
	return (0);
}

int
d78 6
a83 1
	    strcmp(ia->ia_name, "max6690") == 0)
a85 1
	// return (maxtmp_check(ia, &id, &rev));
a92 1
	u_int8_t id, rev;
a97 5
	if (maxtmp_check(ia, &id, &rev) == 0) {
		printf(": unknown Device ID 0x%x\n", id);
		return;
	}

d101 1
a101 2
		printf(": MAX6642");
	} else {
d104 3
a106 1
		printf(": MAX6690 rev 0x%x", rev);
d108 2
a109 1

@


1.2
log
@Add support for MAX6642.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: maxim6690.c,v 1.1 2005/11/15 16:24:49 deraadt Exp $	*/
a104 1
	u_int8_t id, rev;
d106 5
a110 7
	if (ia->ia_compat) {
		if (strcmp(ia->ia_compat, "max6642") == 0 ||
		    strcmp(ia->ia_compat, "max6690") == 0)
			return (1);
		return (0);
	}
	return (maxtmp_check(ia, &id, &rev));
d129 1
a129 1
	if (ia->ia_compat && strcmp(ia->ia_compat, "max6642") == 0) {
@


1.1
log
@driver for the maxim6690 i2c dual temperature sensor
@
text
@d1 1
a1 1
/*	$OpenBSD: lm87.c,v 1.2 2005/11/14 22:22:32 deraadt Exp $	*/
d26 8
a33 8
/* Maxim 6690 registers */
#define MAXIM6690_INT_TEMP	0x00
#define MAXIM6690_EXT_TEMP	0x01
#define MAXIM6690_INT_TEMP2	0x10
#define MAXIM6690_EXT_TEMP2	0x11
#define MAXIM6690_STATUS	0x02
#define MAXIM6690_DEVID		0xfe
#define MAXIM6690_REVISION	0xff
d35 5
a39 1
#define MAXIM6690_TEMP_INVALID	0x80	/* sensor disconnected */
d51 3
d77 1
a77 1
	cmd = MAXIM6690_DEVID;
d84 1
a84 1
	cmd = MAXIM6690_REVISION;
d93 4
a96 3
	if (id == 0x4d  && rev == 0x09) {
		*idp = id;
		*revp = rev;
a97 1
	}
a100 1

d108 2
a109 1
		if (strcmp(ia->ia_compat, "max6690") == 0)
d127 14
a140 2
	rev = maxtmp_check(ia, &id, &rev);
	printf(": id 0x%x rev 0x%x", id, rev);
d177 1
a177 1
	if (data == MAXIM6690_TEMP_INVALID)
d183 3
d187 1
a187 1
	    1000000 * data + (data2 >> 5) * 1000000 / 16;
d201 2
a202 2
	maxtmp_readport(sc, MAXIM6690_INT_TEMP, MAXIM6690_INT_TEMP2, MAXTMP_INT);
	maxtmp_readport(sc, MAXIM6690_EXT_TEMP, MAXIM6690_EXT_TEMP2, MAXTMP_EXT);
@

