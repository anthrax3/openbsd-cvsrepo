head	1.25;
access;
symbols
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.25.0.38
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.28
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.25.0.36
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.34
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.25.0.32
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.30
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.26
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.24
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.22
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.20
	OPENBSD_5_0:1.25.0.18
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.16
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.25.0.14
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.10
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.12
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.25.0.8
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.25.0.6
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.25.0.4
	OPENBSD_4_3_BASE:1.25
	OPENBSD_4_2:1.25.0.2
	OPENBSD_4_2_BASE:1.25
	OPENBSD_4_1:1.23.0.2
	OPENBSD_4_1_BASE:1.23
	OPENBSD_4_0:1.22.0.2
	OPENBSD_4_0_BASE:1.22
	OPENBSD_3_9:1.21.0.2
	OPENBSD_3_9_BASE:1.21;
locks; strict;
comment	@ * @;


1.25
date	2007.06.24.05.34.35;	author dlg;	state Exp;
branches;
next	1.24;

1.24
date	2007.03.22.16.55.31;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2006.12.23.17.46.39;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2006.04.10.00.57.23;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2006.01.19.17.08.39;	author grange;	state Exp;
branches;
next	1.20;

1.20
date	2006.01.06.03.44.35;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2005.12.31.04.31.27;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2005.12.29.14.51.08;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2005.12.28.18.41.24;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2005.12.27.22.49.41;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2005.12.27.21.47.42;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2005.12.27.20.34.59;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.27.17.18.18;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.24.19.46.33;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.23.23.39.10;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.23.22.56.44;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.23.21.13.18;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.23.20.46.27;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.23.15.06.32;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.23.04.10.07;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.23.01.15.06;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.22.23.49.41;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.22.23.19.07;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.22.23.16.49;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.22.22.57.27;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.25
log
@rework sensor tasks to use the kernels generic workq rather than a special
kernel thread of its own. the api has changed (which will be fixed in the
manpage shortly) so all the users of sensor tasks that i can find have
been fixed too.

noone tested, so its going in to force people to run with it.
"put it in" deraadt@@
@
text
@/*	$OpenBSD: adm1025.c,v 1.24 2007/03/22 16:55:31 deraadt Exp $	*/

/*
 * Copyright (c) 2005 Theo de Raadt
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/sensors.h>

#include <dev/i2c/i2cvar.h>

/* ADM 1025 registers */
#define ADM1025_V2_5		0x20
#define ADM1025_Vccp		0x21
#define ADM1025_V3_3		0x22
#define ADM1025_V5		0x23
#define ADM1025_V12		0x24
#define ADM1025_Vcc		0x25
#define ADM1025_EXT_TEMP	0x26
#define ADM1025_INT_TEMP	0x27
#define ADM1025_STATUS2		0x42
#define  ADM1025_STATUS2_EXT	0x40
#define ADM1025_COMPANY		0x3e	/* contains 0x41 */
#define ADM1025_STEPPING	0x3f	/* contains 0x2? */
#define ADM1025_CONFIG		0x40
#define  ADM1025_CONFIG_START	0x01
#define SMSC47M192_V1_5		0x50
#define SMSC47M192_V1_8		0x51
#define SMSC47M192_TEMP2	0x52

/* Sensors */
#define ADMTM_INT		0
#define ADMTM_EXT		1
#define ADMTM_V2_5		2
#define ADMTM_Vccp		3
#define ADMTM_V3_3		4
#define ADMTM_V5		5
#define ADMTM_V12		6
#define ADMTM_Vcc		7
#define ADMTM_NUM_SENSORS	8
#define SMSC_V1_5		8
#define SMSC_V1_8		9
#define SMSC_TEMP2		10
#define SMSC_NUM_SENSORS	3
struct admtm_softc {
	struct device	sc_dev;
	i2c_tag_t	sc_tag;
	i2c_addr_t	sc_addr;

	struct ksensor	sc_sensor[ADMTM_NUM_SENSORS + SMSC_NUM_SENSORS];
	struct ksensordev sc_sensordev;
	int		sc_nsensors;
	int		sc_model;
};

int	admtm_match(struct device *, void *, void *);
void	admtm_attach(struct device *, struct device *, void *);
void	admtm_refresh(void *);

struct cfattach admtm_ca = {
	sizeof(struct admtm_softc), admtm_match, admtm_attach
};

struct cfdriver admtm_cd = {
	NULL, "admtm", DV_DULL
};

int
admtm_match(struct device *parent, void *match, void *aux)
{
	struct i2c_attach_args *ia = aux;

	if (strcmp(ia->ia_name, "adm1025") == 0 ||
	    strcmp(ia->ia_name, "47m192") == 0 ||
	    strcmp(ia->ia_name, "ne1619") == 0)
		return (1);
	return (0);
}

void
admtm_attach(struct device *parent, struct device *self, void *aux)
{
	struct admtm_softc *sc = (struct admtm_softc *)self;
	struct i2c_attach_args *ia = aux;
	u_int8_t cmd, data, data2;
	int i;

	sc->sc_tag = ia->ia_tag;
	sc->sc_addr = ia->ia_addr;

	printf(": %s", ia->ia_name);

	sc->sc_nsensors = ADMTM_NUM_SENSORS;
	sc->sc_model = 1025;
	if (strcmp(ia->ia_name, "47m192") == 0) {
		sc->sc_nsensors += SMSC_NUM_SENSORS;
		sc->sc_model = 192;
	}

	iic_acquire_bus(sc->sc_tag, 0);
	cmd = ADM1025_CONFIG;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0)) {
		iic_release_bus(sc->sc_tag, 0);
		printf(", cannot get control register\n");
		return;
	}

	data2 = data | ADM1025_CONFIG_START;
	if (data != data2) {
		if (iic_exec(sc->sc_tag, I2C_OP_WRITE_WITH_STOP,
		    sc->sc_addr, &cmd, sizeof cmd, &data2, sizeof data2, 0)) {
			iic_release_bus(sc->sc_tag, 0);
			printf(", cannot set control register\n");
			return;
		}
	}
	iic_release_bus(sc->sc_tag, 0);

	/* Initialize sensor data. */
	strlcpy(sc->sc_sensordev.xname, sc->sc_dev.dv_xname,
	    sizeof(sc->sc_sensordev.xname));

	sc->sc_sensor[ADMTM_INT].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[ADMTM_INT].desc, "Internal",
	    sizeof(sc->sc_sensor[ADMTM_INT].desc));

	sc->sc_sensor[ADMTM_EXT].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[ADMTM_EXT].desc, "External",
	    sizeof(sc->sc_sensor[ADMTM_EXT].desc));

	sc->sc_sensor[ADMTM_V2_5].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMTM_V2_5].desc, "2.5 V",
	    sizeof(sc->sc_sensor[ADMTM_V2_5].desc));

	sc->sc_sensor[ADMTM_Vccp].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMTM_Vccp].desc, "Vccp",
	    sizeof(sc->sc_sensor[ADMTM_Vccp].desc));

	sc->sc_sensor[ADMTM_V3_3].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMTM_V3_3].desc, "3.3 V",
	    sizeof(sc->sc_sensor[ADMTM_V3_3].desc));

	sc->sc_sensor[ADMTM_V5].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMTM_V5].desc, "5 V",
	    sizeof(sc->sc_sensor[ADMTM_V5].desc));

	sc->sc_sensor[ADMTM_V12].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMTM_V12].desc, "12 V",
	    sizeof(sc->sc_sensor[ADMTM_V12].desc));

	sc->sc_sensor[ADMTM_Vcc].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMTM_Vcc].desc, "Vcc",
	    sizeof(sc->sc_sensor[ADMTM_Vcc].desc));

	sc->sc_sensor[SMSC_V1_5].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[SMSC_V1_5].desc, "1.5 V",
	    sizeof(sc->sc_sensor[SMSC_V1_5].desc));

	sc->sc_sensor[SMSC_V1_8].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[SMSC_V1_8].desc, "1.8 V",
	    sizeof(sc->sc_sensor[SMSC_V1_8].desc));

	sc->sc_sensor[SMSC_TEMP2].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[SMSC_TEMP2].desc, "External",
	    sizeof(sc->sc_sensor[SMSC_TEMP2].desc));

	if (sensor_task_register(sc, admtm_refresh, 5) == NULL) {
		printf(", unable to register update task\n");
		return;
	}

	for (i = 0; i < sc->sc_nsensors; i++)
		sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[i]);
	sensordev_install(&sc->sc_sensordev);

	printf("\n");
}

void
admtm_refresh(void *arg)
{
	struct admtm_softc *sc = arg;
	u_int8_t cmd, data;
	int8_t sdata;

	iic_acquire_bus(sc->sc_tag, 0);

	cmd = ADM1025_INT_TEMP;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata, 0) == 0)
		sc->sc_sensor[ADMTM_INT].value = 273150000 + 1000000 * sdata;

	cmd = ADM1025_EXT_TEMP;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata, 0) == 0)
		sc->sc_sensor[ADMTM_EXT].value = 273150000 + 1000000 * sdata;

	cmd = ADM1025_STATUS2;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0) {
		if (data & ADM1025_STATUS2_EXT)
			sc->sc_sensor[ADMTM_EXT].flags |= SENSOR_FINVALID;
		else
			sc->sc_sensor[ADMTM_EXT].flags &= ~SENSOR_FINVALID;
	}

	cmd = ADM1025_V2_5;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMTM_V2_5].value = 2500000 * data / 192;

	cmd = ADM1025_Vccp;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMTM_Vcc].value = 2249000 * data / 192;

	cmd = ADM1025_V3_3;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMTM_V3_3].value = 3300000 * data / 192;

	cmd = ADM1025_V5;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMTM_V5].value = 5000000 * data / 192;

	cmd = ADM1025_V12;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMTM_V12].value = 12000000 * data / 192;

	cmd = ADM1025_Vcc;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMTM_Vcc].value = 3300000 * data / 192;

	if (sc->sc_model == 192) {
		cmd = SMSC47M192_V1_5;
		if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
		    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
			sc->sc_sensor[SMSC_V1_5].value = 1500000 * data / 192;

		cmd = SMSC47M192_V1_8;
		if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
		    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
			sc->sc_sensor[SMSC_V1_8].value = 1800000 * data / 192;

		cmd = SMSC47M192_TEMP2;
		if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
		    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata,
		    0) == 0)
			sc->sc_sensor[SMSC_TEMP2].value = 273150000 + 1000000 * sdata;

	}

	iic_release_bus(sc->sc_tag, 0);
}
@


1.24
log
@split userland & kernel struct sensor/sensordev so that the addition
of new fields in the future is less disruptive.  This is done similar
to how struct proc is handled for ps(1).  ok jmc (man page changes)
tested fkr simon, and more suggestions from millert
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.23 2006/12/23 17:46:39 deraadt Exp $	*/
d182 1
a182 1
	if (sensor_task_register(sc, admtm_refresh, 5)) {
@


1.23
log
@adapt to new two-level sensor api; Constantine A. Murenin
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.22 2006/04/10 00:57:23 deraadt Exp $	*/
d64 2
a65 2
	struct sensor	sc_sensor[ADMTM_NUM_SENSORS + SMSC_NUM_SENSORS];
	struct sensordev sc_sensordev;
@


1.22
log
@make this match our code standards
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.21 2006/01/19 17:08:39 grange Exp $	*/
d65 1
d135 2
a136 3
	for (i = 0; i < ADMTM_NUM_SENSORS + SMSC_NUM_SENSORS; i++)
		strlcpy(sc->sc_sensor[i].device, sc->sc_dev.dv_xname,
		    sizeof(sc->sc_sensor[i].device));
d139 1
a139 1
	strlcpy(sc->sc_sensor[ADMTM_INT].desc, "Internal Temp",
d143 1
a143 1
	strlcpy(sc->sc_sensor[ADMTM_EXT].desc, "External Temp",
d179 1
a179 1
	strlcpy(sc->sc_sensor[SMSC_TEMP2].desc, "External2 Temp",
d188 2
a189 1
		sensor_add(&sc->sc_sensor[i]);
@


1.21
log
@Replace SENSOR_ADD() macro with a pair of functions
sensor_add()/sensor_del() so that sensors can be attached
and detached dynamicaly.

ok kettenis@@ deraadt@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.20 2006/01/06 03:44:35 deraadt Exp $	*/
d139 1
a139 1
	strlcpy(sc->sc_sensor[ADMTM_INT].desc, "Internal",
d143 1
a143 1
	strlcpy(sc->sc_sensor[ADMTM_EXT].desc, "External",
d179 1
a179 1
	strlcpy(sc->sc_sensor[SMSC_TEMP2].desc, "External2",
@


1.20
log
@we now do these checks in iic_scan
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.19 2005/12/31 04:31:27 deraadt Exp $	*/
d188 1
a188 1
		SENSOR_ADD(&sc->sc_sensor[i]);
@


1.19
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.18 2005/12/29 14:51:08 deraadt Exp $	*/
d88 1
a88 8
	    strcmp(ia->ia_name, "ne1619") == 0) {
		/*
		 * should also ensure that
		 * config & 0x80 == 0x00
		 * status1 & 0xc0 == 0x00
		 * status2 & 0xbc == 0x00
		 * before accepting this to be for real
		 */
a89 1
	}
@


1.18
log
@stop using I2C_F_POLL; it is a bus driver responsibility now
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.17 2005/12/28 18:41:24 deraadt Exp $	*/
d86 1
a86 1
	if (strcmp(ia->ia_name, "adm1025") == 0 || 
d116 1
a116 1
    	if (strcmp(ia->ia_name, "47m192") == 0) {
@


1.17
log
@symbolic + 3
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.16 2005/12/27 22:49:41 deraadt Exp $	*/
d212 1
a212 1
	    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata, I2C_F_POLL) == 0)
d217 1
a217 1
	    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata, I2C_F_POLL) == 0)
d222 1
a222 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0) {
d231 1
a231 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d236 1
a236 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d241 1
a241 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d246 1
a246 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d251 1
a251 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d256 1
a256 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d262 1
a262 1
		    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d267 1
a267 1
		    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d273 1
a273 1
		    I2C_F_POLL) == 0)
@


1.16
log
@better names
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.15 2005/12/27 21:47:42 deraadt Exp $	*/
d117 1
a117 1
		sc->sc_nsensors += 3;
@


1.15
log
@handle smsc 47m192 and varients, which have 3 additional sensors
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.14 2005/12/27 20:34:59 deraadt Exp $	*/
d27 1
a27 1
#define ADM1025_V25		0x20
d29 1
a29 1
#define ADM1025_V33		0x22
d48 1
a48 1
#define ADMTM_V25		2
d50 1
a50 1
#define ADMTM_V33		4
d154 3
a156 3
	sc->sc_sensor[ADMTM_V25].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMTM_V25].desc, "2.5 V",
	    sizeof(sc->sc_sensor[ADMTM_V25].desc));
d162 3
a164 3
	sc->sc_sensor[ADMTM_V33].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMTM_V33].desc, "3.3 V",
	    sizeof(sc->sc_sensor[ADMTM_V33].desc));
d229 1
a229 1
	cmd = ADM1025_V25;
d232 1
a232 1
		sc->sc_sensor[ADMTM_V25].value = 2500000 * data / 192;
d239 1
a239 1
	cmd = ADM1025_V33;
d242 1
a242 1
		sc->sc_sensor[ADMTM_V33].value = 3300000 * data / 192;
@


1.14
log
@avoid writing back same value; and use symbolic name for config START bit
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.13 2005/12/27 17:18:18 deraadt Exp $	*/
d41 3
d55 4
a58 1

d64 3
a66 1
	struct sensor	sc_sensor[ADMTM_NUM_SENSORS];
d114 7
d142 1
a142 1
	for (i = 0; i < ADMTM_NUM_SENSORS; i++)
d178 12
d195 1
a195 1
	for (i = 0; i < ADMTM_NUM_SENSORS; i++)
d258 19
@


1.13
log
@no longer use ia_compat; tested by a few
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.12 2005/12/24 19:46:33 deraadt Exp $	*/
d40 1
d98 1
a98 1
	u_int8_t cmd, data;
d109 1
a109 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL)) {
d114 9
a122 6
	data |= 0x01;
	if (iic_exec(sc->sc_tag, I2C_OP_WRITE_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL)) {
		iic_release_bus(sc->sc_tag, 0);
		printf(", cannot set control register\n");
		return;
@


1.12
log
@use I2C_F_POLL for now
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.11 2005/12/23 23:39:10 deraadt Exp $	*/
d103 2
d110 1
a110 1
		printf(": cannot get control register\n");
d117 1
a117 1
		printf(": cannot set control register\n");
@


1.11
log
@sdata should be signed
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.10 2005/12/23 22:56:44 deraadt Exp $	*/
a103 1

d106 1
a106 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0)) {
d111 1
a111 1
	data &= ~0x01;
d113 1
a113 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0)) {
d179 1
a179 1
	    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata, 0) == 0)
d184 1
a184 1
	    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata, 0) == 0)
d189 1
a189 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0) {
d198 1
a198 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
d203 1
a203 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
d208 1
a208 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
d213 1
a213 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
d218 1
a218 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
d223 1
a223 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
@


1.10
log
@build a cacheing-read api internally, so that we can be even more stingy
with i2c cycles.  as well, this will let us basically now write if/else
code for basically free.  much easier; tested by kettenis and pval
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.9 2005/12/23 21:13:18 deraadt Exp $	*/
d173 2
a174 1
	u_int8_t cmd, data, sdata;
@


1.9
log
@typo
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.8 2005/12/23 20:46:27 deraadt Exp $	*/
d112 1
a112 1
	data |= 0x01;
d173 1
a173 1
	u_int8_t cmd, data;
d179 2
a180 2
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMTM_INT].value = 273150000 + 1000000 * data;
d184 2
a185 2
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMTM_EXT].value = 273150000 + 1000000 * data;
@


1.8
log
@correct ic_release_bus
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.7 2005/12/23 15:06:32 deraadt Exp $	*/
d204 1
a204 1
		sc->sc_sensor[ADMTM_Vcc].value =  + 2249000 * data / 192;
@


1.7
log
@smsc 47m192 has a monitor like the adm1025
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.6 2005/12/23 04:10:07 deraadt Exp $	*/
d109 1
a109 1
		printf(": cannot set control register\n");
d119 1
@


1.6
log
@send a command to start scanning...
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.5 2005/12/23 01:15:06 deraadt Exp $	*/
d78 1
@


1.5
log
@match functions deserve a failure condition
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.4 2005/12/22 23:49:41 deraadt Exp $	*/
d39 1
d96 1
d101 17
@


1.4
log
@ne1619 is a clone by philips
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.3 2005/12/22 23:19:07 deraadt Exp $	*/
d87 1
a87 1
	return (1);
@


1.3
log
@document company/stepping regs
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.2 2005/12/22 23:16:49 deraadt Exp $	*/
d76 10
a85 4
	if (ia->ia_compat) {
		if (strcmp(ia->ia_compat, "adm1025") == 0)
			return (1);
		return (0);
@


1.2
log
@note missing ext temp sensors
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.1 2005/12/22 22:57:27 deraadt Exp $	*/
d37 2
@


1.1
log
@adm1025 ... another day, another chip..
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1025.c,v 1.1 2005/11/15 23:25:24 deraadt Exp $	*/
d35 2
a52 1
	int		sc_fanmul;
d158 8
@

