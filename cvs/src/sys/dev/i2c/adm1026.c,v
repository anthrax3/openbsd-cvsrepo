head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.40
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.38
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.34
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.24
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.32
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.30
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.28
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.26
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.22
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.20
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.18
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.16
	OPENBSD_5_0:1.11.0.14
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.12
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.10
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.6
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.8
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.4
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.8.0.2
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6;
locks; strict;
comment	@ * @;


1.11
date	2008.06.09.16.21.33;	author cnst;	state Exp;
branches;
next	1.10;

1.10
date	2007.06.24.05.34.35;	author dlg;	state Exp;
branches;
next	1.9;

1.9
date	2007.03.22.16.55.31;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2006.12.23.17.46.39;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.10.00.57.23;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.19.17.08.39;	author grange;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.31.04.31.27;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.29.14.51.08;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.28.22.04.28;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.28.20.35.42;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.28.00.21.43;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@* fix the order of precedence in the divisor bits calculation
* correct the constant in the fanrpm formula
ok deraadt
@
text
@/*	$OpenBSD: adm1026.c,v 1.10 2007/06/24 05:34:35 dlg Exp $	*/

/*
 * Copyright (c) 2005 Theo de Raadt
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/sensors.h>

#include <dev/i2c/i2cvar.h>

/* ADM 1026 registers */
#define ADM1026_TEMP		0x1f
#define ADM1026_STATUS		0x20
#define ADM1026_Vbat		0x26
#define ADM1026_Ain8		0x27
#define ADM1026_EXT1		0x28
#define ADM1026_EXT2		0x29
#define ADM1026_V3_3stby	0x2a
#define ADM1026_V3_3main	0x2b
#define ADM1026_V5		0x2c
#define ADM1026_Vccp		0x2d
#define ADM1026_V12		0x2e
#define ADM1026_Vminus12	0x2f
#define ADM1026_FAN0		0x38
#define ADM1026_FAN1		0x39
#define ADM1026_FAN2		0x3a
#define ADM1026_FAN3		0x3b
#define ADM1026_FAN4		0x3c
#define ADM1026_FAN5		0x3d
#define ADM1026_FAN6		0x3e
#define ADM1026_FAN7		0x3f
#define ADM1026_EXT1_OFF	0x6e
#define ADM1026_EXT2_OFF	0x6f
#define ADM1026_FAN0123DIV	0x02
#define ADM1026_FAN4567DIV	0x03
#define ADM1026_CONTROL		0x00
#define  ADM1026_CONTROL_START	0x01
#define  ADM1026_CONTROL_INTCLR	0x04

/* Sensors */
#define ADMCTS_TEMP		0
#define ADMCTS_EXT1		1
#define ADMCTS_EXT2		2
#define ADMCTS_Vbat		3
#define ADMCTS_V3_3stby		4
#define ADMCTS_V3_3main		5
#define ADMCTS_V5		6
#define ADMCTS_Vccp		7
#define ADMCTS_V12		8
#define ADMCTS_Vminus12		9
#define ADMCTS_FAN0		10
#define ADMCTS_FAN1		11
#define ADMCTS_FAN2		12
#define ADMCTS_FAN3		13
#define ADMCTS_FAN4		14
#define ADMCTS_FAN5		15
#define ADMCTS_FAN6		16
#define ADMCTS_FAN7		17
#define ADMCTS_NUM_SENSORS	18

struct admcts_softc {
	struct device	sc_dev;
	i2c_tag_t	sc_tag;
	i2c_addr_t	sc_addr;

	struct ksensor	sc_sensor[ADMCTS_NUM_SENSORS];
	struct ksensordev sc_sensordev;
	int		sc_fanmul[8];
};

int	admcts_match(struct device *, void *, void *);
void	admcts_attach(struct device *, struct device *, void *);
void	admcts_refresh(void *);

struct cfattach admcts_ca = {
	sizeof(struct admcts_softc), admcts_match, admcts_attach
};

struct cfdriver admcts_cd = {
	NULL, "admcts", DV_DULL
};

int
admcts_match(struct device *parent, void *match, void *aux)
{
	struct i2c_attach_args *ia = aux;

	if (strcmp(ia->ia_name, "adm1026") == 0)
		return (1);
	return (0);
}

void
admcts_attach(struct device *parent, struct device *self, void *aux)
{
	struct admcts_softc *sc = (struct admcts_softc *)self;
	struct i2c_attach_args *ia = aux;
	u_int8_t cmd, data, data2;
	int i;

	sc->sc_tag = ia->ia_tag;
	sc->sc_addr = ia->ia_addr;

	iic_acquire_bus(sc->sc_tag, 0);
	cmd = ADM1026_CONTROL;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0)) {
		iic_release_bus(sc->sc_tag, 0);
		printf(": cannot get control register\n");
		return;
	}
	data2 = data | ADM1026_CONTROL_START;
	data2 = data2 & ~ADM1026_CONTROL_INTCLR;
	if (data != data2) {
		if (iic_exec(sc->sc_tag, I2C_OP_WRITE_WITH_STOP,
		    sc->sc_addr, &cmd, sizeof cmd, &data2, sizeof data2, 0)) {
			iic_release_bus(sc->sc_tag, 0);
			printf(": cannot set control register\n");
			return;
		}
	}

	cmd = ADM1026_FAN0123DIV;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0)) {
		iic_release_bus(sc->sc_tag, 0);
		printf(": cannot get fan0123div register\n");
		return;
	}
	sc->sc_fanmul[0] = (1 << ((data >> 0) & 0x3));
	sc->sc_fanmul[1] = (1 << ((data >> 2) & 0x3));
	sc->sc_fanmul[2] = (1 << ((data >> 4) & 0x3));
	sc->sc_fanmul[3] = (1 << ((data >> 6) & 0x3));

	cmd = ADM1026_FAN4567DIV;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0)) {
		iic_release_bus(sc->sc_tag, 0);
		printf(": cannot get fan0123div register\n");
		return;
	}
	sc->sc_fanmul[4] = (1 << ((data >> 0) & 0x3));
	sc->sc_fanmul[5] = (1 << ((data >> 2) & 0x3));
	sc->sc_fanmul[6] = (1 << ((data >> 4) & 0x3));
	sc->sc_fanmul[7] = (1 << ((data >> 6) & 0x3));

	iic_release_bus(sc->sc_tag, 0);

	/* Initialize sensor data. */
	strlcpy(sc->sc_sensordev.xname, sc->sc_dev.dv_xname,
	    sizeof(sc->sc_sensordev.xname));

	sc->sc_sensor[ADMCTS_TEMP].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[ADMCTS_TEMP].desc, "Internal",
	    sizeof(sc->sc_sensor[ADMCTS_TEMP].desc));

	sc->sc_sensor[ADMCTS_Vbat].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMCTS_Vbat].desc, "Vbat",
	    sizeof(sc->sc_sensor[ADMCTS_Vbat].desc));

	sc->sc_sensor[ADMCTS_EXT1].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[ADMCTS_EXT1].desc, "External",
	    sizeof(sc->sc_sensor[ADMCTS_EXT1].desc));

	sc->sc_sensor[ADMCTS_EXT2].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[ADMCTS_EXT2].desc, "External",
	    sizeof(sc->sc_sensor[ADMCTS_EXT2].desc));

	sc->sc_sensor[ADMCTS_V3_3stby].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMCTS_V3_3stby].desc, "3.3 V standby",
	    sizeof(sc->sc_sensor[ADMCTS_V3_3stby].desc));

	sc->sc_sensor[ADMCTS_V3_3main].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMCTS_V3_3main].desc, "3.3 V main",
	    sizeof(sc->sc_sensor[ADMCTS_V3_3main].desc));

	sc->sc_sensor[ADMCTS_V5].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMCTS_V5].desc, "5 V",
	    sizeof(sc->sc_sensor[ADMCTS_V5].desc));

	sc->sc_sensor[ADMCTS_Vccp].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMCTS_Vccp].desc, "Vccp",
	    sizeof(sc->sc_sensor[ADMCTS_Vccp].desc));

	sc->sc_sensor[ADMCTS_V12].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMCTS_V12].desc, "12 V",
	    sizeof(sc->sc_sensor[ADMCTS_V12].desc));

	sc->sc_sensor[ADMCTS_Vminus12].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMCTS_Vminus12].desc, "-12 V",
	    sizeof(sc->sc_sensor[ADMCTS_Vminus12].desc));

	sc->sc_sensor[ADMCTS_FAN1].type = SENSOR_FANRPM;
	sc->sc_sensor[ADMCTS_FAN2].type = SENSOR_FANRPM;
	sc->sc_sensor[ADMCTS_FAN3].type = SENSOR_FANRPM;
	sc->sc_sensor[ADMCTS_FAN4].type = SENSOR_FANRPM;
	sc->sc_sensor[ADMCTS_FAN5].type = SENSOR_FANRPM;
	sc->sc_sensor[ADMCTS_FAN6].type = SENSOR_FANRPM;
	sc->sc_sensor[ADMCTS_FAN7].type = SENSOR_FANRPM;

	if (sensor_task_register(sc, admcts_refresh, 5) == NULL) {
		printf(", unable to register update task\n");
		return;
	}

	for (i = 0; i < ADMCTS_NUM_SENSORS; i++)
		sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[i]);
	sensordev_install(&sc->sc_sensordev);

	printf("\n");
}

static void
fanval(struct ksensor *sens, int mul, u_int8_t data)
{
	int tmp = data * mul;

	if (tmp == 0)
		sens->flags |= SENSOR_FINVALID;
	else
		sens->value = 1630000 / tmp;
}

void
admcts_refresh(void *arg)
{
	struct admcts_softc *sc = arg;
	u_int8_t cmd, data;
	int8_t sdata;

	iic_acquire_bus(sc->sc_tag, 0);

	cmd = ADM1026_TEMP;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata, 0) == 0)
		sc->sc_sensor[ADMCTS_TEMP].value = 273150000 + 1000000 * sdata;

	cmd = ADM1026_EXT1;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata, 0) == 0)
		sc->sc_sensor[ADMCTS_EXT1].value = 273150000 + 1000000 * sdata;

	cmd = ADM1026_EXT2;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata, 0) == 0)
		sc->sc_sensor[ADMCTS_EXT2].value = 273150000 + 1000000 * sdata;

	cmd = ADM1026_Vbat;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMCTS_Vbat].value = 3000000 * data / 192;

	cmd = ADM1026_V3_3stby;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMCTS_V3_3stby].value = 3300000 * data / 192;

	cmd = ADM1026_V3_3main;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMCTS_V3_3main].value = 3300000 * data / 192;

	cmd = ADM1026_V5;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMCTS_V5].value = 5500000 * data / 192;

	cmd = ADM1026_Vccp;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMCTS_Vccp].value = 2250000 * data / 192;

	cmd = ADM1026_V12;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMCTS_V12].value = 12000000 * data / 192;

	cmd = ADM1026_Vminus12;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMCTS_Vminus12].value = -2125000 * data / 192;

	cmd = ADM1026_FAN0;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		fanval(&sc->sc_sensor[ADMCTS_FAN0], sc->sc_fanmul[0], data);

	cmd = ADM1026_FAN1;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		fanval(&sc->sc_sensor[ADMCTS_FAN1], sc->sc_fanmul[1], data);

	cmd = ADM1026_FAN2;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		fanval(&sc->sc_sensor[ADMCTS_FAN2], sc->sc_fanmul[2], data);

	cmd = ADM1026_FAN3;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		fanval(&sc->sc_sensor[ADMCTS_FAN3], sc->sc_fanmul[3], data);

	cmd = ADM1026_FAN4;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		fanval(&sc->sc_sensor[ADMCTS_FAN4], sc->sc_fanmul[4], data);

	cmd = ADM1026_FAN5;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		fanval(&sc->sc_sensor[ADMCTS_FAN5], sc->sc_fanmul[5], data);

	cmd = ADM1026_FAN6;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		fanval(&sc->sc_sensor[ADMCTS_FAN6], sc->sc_fanmul[6], data);

	cmd = ADM1026_FAN7;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		fanval(&sc->sc_sensor[ADMCTS_FAN7], sc->sc_fanmul[7], data);

	iic_release_bus(sc->sc_tag, 0);
}
@


1.10
log
@rework sensor tasks to use the kernels generic workq rather than a special
kernel thread of its own. the api has changed (which will be fixed in the
manpage shortly) so all the users of sensor tasks that i can find have
been fixed too.

noone tested, so its going in to force people to run with it.
"put it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1026.c,v 1.9 2007/03/22 16:55:31 deraadt Exp $	*/
d145 4
a148 4
	sc->sc_fanmul[0] = (1 << (data >> 0) & 0x3);
	sc->sc_fanmul[1] = (1 << (data >> 2) & 0x3);
	sc->sc_fanmul[2] = (1 << (data >> 4) & 0x3);
	sc->sc_fanmul[3] = (1 << (data >> 6) & 0x3);
d157 4
a160 4
	sc->sc_fanmul[4] = (1 << (data >> 0) & 0x3);
	sc->sc_fanmul[5] = (1 << (data >> 2) & 0x3);
	sc->sc_fanmul[6] = (1 << (data >> 4) & 0x3);
	sc->sc_fanmul[7] = (1 << (data >> 6) & 0x3);
d236 1
a236 1
		sens->value = 1350000 / tmp;
@


1.9
log
@split userland & kernel struct sensor/sensordev so that the addition
of new fields in the future is less disruptive.  This is done similar
to how struct proc is handled for ps(1).  ok jmc (man page changes)
tested fkr simon, and more suggestions from millert
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1026.c,v 1.8 2006/12/23 17:46:39 deraadt Exp $	*/
d216 1
a216 1
	if (sensor_task_register(sc, admcts_refresh, 5)) {
@


1.8
log
@adapt to new two-level sensor api; Constantine A. Murenin
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1026.c,v 1.7 2006/04/10 00:57:23 deraadt Exp $	*/
d81 2
a82 2
	struct sensor	sc_sensor[ADMCTS_NUM_SENSORS];
	struct sensordev sc_sensordev;
d229 1
a229 1
fanval(struct sensor *sens, int mul, u_int8_t data)
@


1.7
log
@make this match our code standards
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1026.c,v 1.6 2006/01/19 17:08:39 grange Exp $	*/
d82 1
d165 2
a166 3
	for (i = 0; i < ADMCTS_NUM_SENSORS; i++)
		strlcpy(sc->sc_sensor[i].device, sc->sc_dev.dv_xname,
		    sizeof(sc->sc_sensor[i].device));
d169 1
a169 1
	strlcpy(sc->sc_sensor[ADMCTS_TEMP].desc, "Internal Temp",
d177 1
a177 1
	strlcpy(sc->sc_sensor[ADMCTS_EXT1].desc, "External1 Temp",
d181 1
a181 1
	strlcpy(sc->sc_sensor[ADMCTS_EXT2].desc, "External2 Temp",
a208 3
	strlcpy(sc->sc_sensor[ADMCTS_FAN1].desc, "Fan1",
	    sizeof(sc->sc_sensor[ADMCTS_FAN1].desc));

a209 7
	strlcpy(sc->sc_sensor[ADMCTS_FAN2].desc, "Fan2",
	    sizeof(sc->sc_sensor[ADMCTS_FAN2].desc));

	sc->sc_sensor[ADMCTS_FAN2].type = SENSOR_FANRPM;
	strlcpy(sc->sc_sensor[ADMCTS_FAN2].desc, "Fan2",
	    sizeof(sc->sc_sensor[ADMCTS_FAN2].desc));

a210 3
	strlcpy(sc->sc_sensor[ADMCTS_FAN3].desc, "Fan3",
	    sizeof(sc->sc_sensor[ADMCTS_FAN3].desc));

a211 3
	strlcpy(sc->sc_sensor[ADMCTS_FAN4].desc, "Fan4",
	    sizeof(sc->sc_sensor[ADMCTS_FAN4].desc));

a212 3
	strlcpy(sc->sc_sensor[ADMCTS_FAN5].desc, "Fan5",
	    sizeof(sc->sc_sensor[ADMCTS_FAN5].desc));

a213 3
	strlcpy(sc->sc_sensor[ADMCTS_FAN6].desc, "Fan6",
	    sizeof(sc->sc_sensor[ADMCTS_FAN6].desc));

a214 2
	strlcpy(sc->sc_sensor[ADMCTS_FAN7].desc, "Fan7",
	    sizeof(sc->sc_sensor[ADMCTS_FAN7].desc));
d222 2
a223 1
		sensor_add(&sc->sc_sensor[i]);
@


1.6
log
@Replace SENSOR_ADD() macro with a pair of functions
sensor_add()/sensor_del() so that sensors can be attached
and detached dynamicaly.

ok kettenis@@ deraadt@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1026.c,v 1.5 2005/12/31 04:31:27 deraadt Exp $	*/
d169 1
a169 1
	strlcpy(sc->sc_sensor[ADMCTS_TEMP].desc, "Internal",
d177 1
a177 1
	strlcpy(sc->sc_sensor[ADMCTS_EXT1].desc, "External1",
d181 1
a181 1
	strlcpy(sc->sc_sensor[ADMCTS_EXT2].desc, "External2",
@


1.5
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1026.c,v 1.4 2005/12/29 14:51:08 deraadt Exp $	*/
d246 1
a246 1
		SENSOR_ADD(&sc->sc_sensor[i]);
@


1.4
log
@stop using I2C_F_POLL; it is a bus driver responsibility now
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1026.c,v 1.3 2005/12/28 22:04:28 deraadt Exp $	*/
d260 1
a260 1
}	
@


1.3
log
@I think this is better fan support
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1026.c,v 1.2 2005/12/28 20:35:42 deraadt Exp $	*/
d121 1
a121 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL)) {
d130 1
a130 1
		    sc->sc_addr, &cmd, sizeof cmd, &data2, sizeof data2, I2C_F_POLL)) {
d139 1
a139 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL)) {
d151 1
a151 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL)) {
d273 1
a273 1
	    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata, I2C_F_POLL) == 0)
d278 1
a278 1
	    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata, I2C_F_POLL) == 0)
d283 1
a283 1
	    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata, I2C_F_POLL) == 0)
d288 1
a288 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d293 1
a293 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d298 1
a298 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d303 1
a303 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d308 1
a308 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d313 1
a313 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d318 1
a318 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d323 1
a323 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d328 1
a328 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d333 1
a333 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d338 1
a338 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d343 1
a343 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d348 1
a348 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d353 1
a353 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d358 1
a358 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
@


1.2
log
@attempt at fan measurement
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1026.c,v 1.1 2005/12/28 00:21:43 deraadt Exp $	*/
d144 4
a147 4
	sc->sc_fanmul[0] = 8800 * (1 << (data >> 0) & 0x3);
	sc->sc_fanmul[1] = 8800 * (1 << (data >> 2) & 0x3);
	sc->sc_fanmul[2] = 8800 * (1 << (data >> 4) & 0x3);
	sc->sc_fanmul[3] = 8800 * (1 << (data >> 6) & 0x3);
d156 4
a159 4
	sc->sc_fanmul[4] = 8800 * (1 << (data >> 0) & 0x3);
	sc->sc_fanmul[5] = 8800 * (1 << (data >> 2) & 0x3);
	sc->sc_fanmul[6] = 8800 * (1 << (data >> 4) & 0x3);
	sc->sc_fanmul[7] = 8800 * (1 << (data >> 6) & 0x3);
d251 11
d324 1
a324 1
		sc->sc_sensor[ADMCTS_FAN0].value = sc->sc_fanmul[0] * data;
d329 1
a329 1
		sc->sc_sensor[ADMCTS_FAN1].value = sc->sc_fanmul[1] * data;
d334 1
a334 1
		sc->sc_sensor[ADMCTS_FAN2].value = sc->sc_fanmul[2] * data;
d339 1
a339 1
		sc->sc_sensor[ADMCTS_FAN3].value = sc->sc_fanmul[3] * data;
d344 1
a344 1
		sc->sc_sensor[ADMCTS_FAN4].value = sc->sc_fanmul[4] * data;
d349 1
a349 1
		sc->sc_sensor[ADMCTS_FAN5].value = sc->sc_fanmul[5] * data;
d354 1
a354 1
		sc->sc_sensor[ADMCTS_FAN6].value = sc->sc_fanmul[6] * data;
d359 1
a359 1
		sc->sc_sensor[ADMCTS_FAN7].value = sc->sc_fanmul[7] * data;
@


1.1
log
@first draft of an adm1026 driver, without fan code yet
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1026.c,v 1.5 2005/12/27 22:49:41 deraadt Exp $	*/
d82 1
d136 25
d310 39
a348 1
	/* XXX read fan values */
@

