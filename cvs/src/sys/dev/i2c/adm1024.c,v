head	1.14;
access;
symbols
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.42
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.38
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.28
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.36
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.34
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.32
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.30
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.26
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.24
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.22
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.20
	OPENBSD_5_0:1.14.0.18
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.16
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.14
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.10
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.12
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.8
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.6
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.4
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.2
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.12.0.2
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10;
locks; strict;
comment	@ * @;


1.14
date	2007.06.24.05.34.35;	author dlg;	state Exp;
branches;
next	1.13;

1.13
date	2007.03.22.16.55.31;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2006.12.23.17.46.39;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.10.00.57.23;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.19.17.08.39;	author grange;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.31.04.31.27;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.29.14.51.08;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.28.22.04.28;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.28.20.35.42;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.27.22.49.41;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.27.20.26.46;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.26.01.05.13;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.25.13.06.08;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.25.12.19.48;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@rework sensor tasks to use the kernels generic workq rather than a special
kernel thread of its own. the api has changed (which will be fixed in the
manpage shortly) so all the users of sensor tasks that i can find have
been fixed too.

noone tested, so its going in to force people to run with it.
"put it in" deraadt@@
@
text
@/*	$OpenBSD: adm1024.c,v 1.13 2007/03/22 16:55:31 deraadt Exp $	*/

/*
 * Copyright (c) 2005 Theo de Raadt
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/sensors.h>

#include <dev/i2c/i2cvar.h>

/* ADM 1024 registers */
#define ADM1024_V2_5		0x20
#define ADM1024_Vccp		0x21
#define ADM1024_Vcc		0x22
#define ADM1024_V5		0x23
#define ADM1024_V12		0x24
#define ADM1024_Vccp2		0x25
#define ADM1024_EXT_TEMP	0x26
#define ADM1024_INT_TEMP	0x27
#define ADM1024_FAN1		0x28
#define ADM1024_FAN2		0x29
#define ADM1024_STATUS2		0x42
#define ADM1024_FANC		0x47
#define  ADM1024_STATUS2_EXT	0x40
#define ADM1024_COMPANY		0x3e	/* contains 0x41 */
#define ADM1024_STEPPING	0x3f	/* contains 0x2? */
#define ADM1024_CONFIG1		0x40
#define  ADM1024_CONFIG1_START	0x01
#define  ADM1024_CONFIG1_INTCLR	0x08

/* Sensors */
#define ADMLC_INT		0
#define ADMLC_EXT		1
#define ADMLC_V2_5		2
#define ADMLC_Vccp		3
#define ADMLC_Vcc		4
#define ADMLC_V5		5
#define ADMLC_V12		6
#define ADMLC_Vccp2		7
#define ADMLC_FAN1		8
#define ADMLC_FAN2		9
#define ADMLC_NUM_SENSORS	10

struct admlc_softc {
	struct device	sc_dev;
	i2c_tag_t	sc_tag;
	i2c_addr_t	sc_addr;

	struct ksensor	sc_sensor[ADMLC_NUM_SENSORS];
	struct ksensordev sc_sensordev;
	int		sc_fan1mul;
	int		sc_fan2mul;
};

int	admlc_match(struct device *, void *, void *);
void	admlc_attach(struct device *, struct device *, void *);
void	admlc_refresh(void *);

struct cfattach admlc_ca = {
	sizeof(struct admlc_softc), admlc_match, admlc_attach
};

struct cfdriver admlc_cd = {
	NULL, "admlc", DV_DULL
};

int
admlc_match(struct device *parent, void *match, void *aux)
{
	struct i2c_attach_args *ia = aux;

	if (strcmp(ia->ia_name, "adm1024") == 0)
		return (1);
	return (0);
}

void
admlc_attach(struct device *parent, struct device *self, void *aux)
{
	struct admlc_softc *sc = (struct admlc_softc *)self;
	struct i2c_attach_args *ia = aux;
	u_int8_t cmd, data, data2;
	int i;

	sc->sc_tag = ia->ia_tag;
	sc->sc_addr = ia->ia_addr;

	iic_acquire_bus(sc->sc_tag, 0);
	cmd = ADM1024_CONFIG1;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0)) {
		iic_release_bus(sc->sc_tag, 0);
		printf(": cannot get control register\n");
		return;
	}
	data2 = data | ADM1024_CONFIG1_START;
	data2 = data2 & ~ADM1024_CONFIG1_INTCLR;
	if (data != data2) {
		if (iic_exec(sc->sc_tag, I2C_OP_WRITE_WITH_STOP,
		    sc->sc_addr, &cmd, sizeof cmd, &data2, sizeof data2, 0)) {
			iic_release_bus(sc->sc_tag, 0);
			printf(": cannot set control register\n");
			return;
		}
	}

	cmd = ADM1024_FANC;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0)) {
		printf(", unable to read fan setting\n");
		return;
	}
	sc->sc_fan1mul = (1 << (data >> 4) & 0x3);
	sc->sc_fan2mul = (1 << (data >> 6) & 0x3);

	iic_release_bus(sc->sc_tag, 0);

	/* Initialize sensor data. */
	strlcpy(sc->sc_sensordev.xname, sc->sc_dev.dv_xname,
	    sizeof(sc->sc_sensordev.xname));

	sc->sc_sensor[ADMLC_INT].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[ADMLC_INT].desc, "Internal",
	    sizeof(sc->sc_sensor[ADMLC_INT].desc));

	sc->sc_sensor[ADMLC_EXT].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[ADMLC_EXT].desc, "External",
	    sizeof(sc->sc_sensor[ADMLC_EXT].desc));

	sc->sc_sensor[ADMLC_V2_5].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMLC_V2_5].desc, "2.5 V",
	    sizeof(sc->sc_sensor[ADMLC_V2_5].desc));

	sc->sc_sensor[ADMLC_Vccp].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMLC_Vccp].desc, "Vccp",
	    sizeof(sc->sc_sensor[ADMLC_Vccp].desc));

	sc->sc_sensor[ADMLC_Vcc].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMLC_Vcc].desc, "Vcc",
	    sizeof(sc->sc_sensor[ADMLC_Vcc].desc));

	sc->sc_sensor[ADMLC_V5].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMLC_V5].desc, "5 V",
	    sizeof(sc->sc_sensor[ADMLC_V5].desc));

	sc->sc_sensor[ADMLC_V12].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMLC_V12].desc, "12 V",
	    sizeof(sc->sc_sensor[ADMLC_V12].desc));

	sc->sc_sensor[ADMLC_Vccp2].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMLC_Vccp2].desc, "Vccp2",
	    sizeof(sc->sc_sensor[ADMLC_Vccp2].desc));

	sc->sc_sensor[ADMLC_FAN1].type = SENSOR_FANRPM;

	sc->sc_sensor[ADMLC_FAN2].type = SENSOR_FANRPM;


	if (sensor_task_register(sc, admlc_refresh, 5) == NULL) {
		printf(", unable to register update task\n");
		return;
	}

	for (i = 0; i < ADMLC_NUM_SENSORS; i++)
		sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[i]);
	sensordev_install(&sc->sc_sensordev);

	printf("\n");
}

static void
fanval(struct ksensor *sens, int mul, u_int8_t data)
{
	int tmp = data * mul;

	if (tmp == 0)
		sens->flags |= SENSOR_FINVALID;
	else
		sens->value = 1350000 / tmp;
}

void
admlc_refresh(void *arg)
{
	struct admlc_softc *sc = arg;
	u_int8_t cmd, data;
	int8_t sdata;

	iic_acquire_bus(sc->sc_tag, 0);

	cmd = ADM1024_INT_TEMP;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata, 0) == 0)
		sc->sc_sensor[ADMLC_INT].value = 273150000 + 1000000 * sdata;

	cmd = ADM1024_EXT_TEMP;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata, 0) == 0)
		sc->sc_sensor[ADMLC_EXT].value = 273150000 + 1000000 * sdata;

	cmd = ADM1024_STATUS2;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0) {
		if (data & ADM1024_STATUS2_EXT)
			sc->sc_sensor[ADMLC_EXT].flags |= SENSOR_FINVALID;
		else
			sc->sc_sensor[ADMLC_EXT].flags &= ~SENSOR_FINVALID;
	}

	cmd = ADM1024_V2_5;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMLC_V2_5].value = 2500000 * data / 192;

	cmd = ADM1024_Vccp;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMLC_Vcc].value = 2249000 * data / 192;

	cmd = ADM1024_Vcc;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMLC_Vcc].value = 3300000 * data / 192;

	cmd = ADM1024_V5;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMLC_V5].value = 5000000 * data / 192;

	cmd = ADM1024_V12;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMLC_V12].value = 12000000 * data / 192;

	cmd = ADM1024_Vccp2;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMLC_Vccp2].value = 2700000 * data / 192;

	cmd = ADM1024_FAN1;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		fanval(&sc->sc_sensor[ADMLC_FAN1], sc->sc_fan1mul, data);

	cmd = ADM1024_FAN2;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		fanval(&sc->sc_sensor[ADMLC_FAN2], sc->sc_fan2mul, data);
	iic_release_bus(sc->sc_tag, 0);
}
@


1.13
log
@split userland & kernel struct sensor/sensordev so that the addition
of new fields in the future is less disruptive.  This is done similar
to how struct proc is handled for ps(1).  ok jmc (man page changes)
tested fkr simon, and more suggestions from millert
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1024.c,v 1.12 2006/12/23 17:46:39 deraadt Exp $	*/
d174 1
a174 1
	if (sensor_task_register(sc, admlc_refresh, 5)) {
@


1.12
log
@adapt to new two-level sensor api; Constantine A. Murenin
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1024.c,v 1.11 2006/04/10 00:57:23 deraadt Exp $	*/
d64 2
a65 2
	struct sensor	sc_sensor[ADMLC_NUM_SENSORS];
	struct sensordev sc_sensordev;
d187 1
a187 1
fanval(struct sensor *sens, int mul, u_int8_t data)
@


1.11
log
@make this match our code standards
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1024.c,v 1.10 2006/01/19 17:08:39 grange Exp $	*/
d65 1
d134 2
a135 3
	for (i = 0; i < ADMLC_NUM_SENSORS; i++)
		strlcpy(sc->sc_sensor[i].device, sc->sc_dev.dv_xname,
		    sizeof(sc->sc_sensor[i].device));
d138 1
a138 1
	strlcpy(sc->sc_sensor[ADMLC_INT].desc, "Internal Temp",
d142 1
a142 1
	strlcpy(sc->sc_sensor[ADMLC_EXT].desc, "External Temp",
a169 2
	strlcpy(sc->sc_sensor[ADMLC_FAN1].desc, "Fan1",
	    sizeof(sc->sc_sensor[ADMLC_FAN1].desc));
a171 2
	strlcpy(sc->sc_sensor[ADMLC_FAN2].desc, "Fan2",
	    sizeof(sc->sc_sensor[ADMLC_FAN2].desc));
d180 2
a181 1
		sensor_add(&sc->sc_sensor[i]);
@


1.10
log
@Replace SENSOR_ADD() macro with a pair of functions
sensor_add()/sensor_del() so that sensors can be attached
and detached dynamicaly.

ok kettenis@@ deraadt@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1024.c,v 1.9 2005/12/31 04:31:27 deraadt Exp $	*/
d138 1
a138 1
	strlcpy(sc->sc_sensor[ADMLC_INT].desc, "Internal",
d142 1
a142 1
	strlcpy(sc->sc_sensor[ADMLC_EXT].desc, "External",
@


1.9
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1024.c,v 1.8 2005/12/29 14:51:08 deraadt Exp $	*/
d184 1
a184 1
		SENSOR_ADD(&sc->sc_sensor[i]);
@


1.8
log
@stop using I2C_F_POLL; it is a bus driver responsibility now
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1024.c,v 1.7 2005/12/28 22:04:28 deraadt Exp $	*/
d198 1
a198 1
}	
@


1.7
log
@I think this is better fan support
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1024.c,v 1.6 2005/12/28 20:35:42 deraadt Exp $	*/
d105 1
a105 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL)) {
d114 1
a114 1
		    sc->sc_addr, &cmd, sizeof cmd, &data2, sizeof data2, I2C_F_POLL)) {
d211 1
a211 1
	    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata, I2C_F_POLL) == 0)
d216 1
a216 1
	    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata, I2C_F_POLL) == 0)
d221 1
a221 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0) {
d230 1
a230 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d235 1
a235 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d240 1
a240 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d245 1
a245 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d250 1
a250 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d255 1
a255 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d260 1
a260 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
d265 1
a265 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL) == 0)
@


1.6
log
@attempt at fan measurement
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1024.c,v 1.5 2005/12/27 22:49:41 deraadt Exp $	*/
d127 2
a128 2
	sc->sc_fan1mul = 8800 * (1 << (data >> 4) & 0x3);
	sc->sc_fan2mul = 8800 * (1 << (data >> 6) & 0x3);
d189 11
d261 1
a261 1
		sc->sc_sensor[ADMLC_FAN1].value = sc->sc_fan1mul * data;
d266 1
a266 2
		sc->sc_sensor[ADMLC_FAN2].value = sc->sc_fan2mul * data;

@


1.5
log
@better names
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1024.c,v 1.4 2005/12/27 20:26:46 deraadt Exp $	*/
d38 1
d65 2
d120 10
d247 9
a255 1
	/* XXX read fan values */
@


1.4
log
@adm1024 has the same interrupt clearing semantics as a lm87; tested by miod
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1024.c,v 1.3 2005/12/26 01:05:13 deraadt Exp $	*/
d27 1
a27 1
#define ADM1024_V25		0x20
d48 1
a48 1
#define ADMLC_V25		2
d132 3
a134 3
	sc->sc_sensor[ADMLC_V25].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[ADMLC_V25].desc, "2.5 V",
	    sizeof(sc->sc_sensor[ADMLC_V25].desc));
d204 1
a204 1
	cmd = ADM1024_V25;
d207 1
a207 1
		sc->sc_sensor[ADMLC_V25].value = 2500000 * data / 192;
@


1.3
log
@symbolic names for command start bit
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1024.c,v 1.2 2005/12/25 13:06:08 deraadt Exp $	*/
d43 1
d93 1
a93 1
	u_int8_t cmd, data;
d107 3
a109 2
	if ((data & ADM1024_CONFIG1_START) == 0) {
		data |= ADM1024_CONFIG1_START;
d111 1
a111 1
		    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL)) {
@


1.2
log
@wrong fan2 register
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1024.c,v 1.1 2005/12/25 12:19:48 deraadt Exp $	*/
a26 1
#define ADM1024_CHANNEL		0x16
d41 2
a42 1
#define ADM1024_CONFIG		0x40
d99 1
a99 1
	cmd = ADM1024_CONFIG;
d106 2
a107 2
	if ((data & 0x01) == 0x00) {
		data |= 0x01;
@


1.1
log
@support adm1024, kind of like adm1025 but some voltage pins more around and 2 fans show up
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1024.c,v 1.12 2005/12/24 19:46:33 deraadt Exp $	*/
d37 1
a37 1
#define ADM1024_FAN2		0x28
@

