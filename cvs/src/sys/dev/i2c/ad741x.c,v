head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.36
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.38
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.34
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.24
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.32
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.30
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.28
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.26
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.22
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.20
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.18
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.16
	OPENBSD_5_0:1.14.0.14
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.12
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.10
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.6
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.8
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.4
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.2
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7;
locks; strict;
comment	@ * @;


1.14
date	2008.04.17.19.01.48;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2007.10.20.22.06.43;	author cnst;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.24.05.34.35;	author dlg;	state Exp;
branches;
next	1.11;

1.11
date	2007.04.09.19.31.22;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2007.03.22.16.55.31;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2006.12.23.17.46.39;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.10.00.57.23;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.19.17.08.39;	author grange;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.31.04.31.27;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.28.20.35.16;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.27.17.18.18;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.28.17.58.20;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.15.22.15.09;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.15.18.28.05;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@make it more apparent that when we are dealing with 16 bit registers
(not a series of 8 bit registers), the bytes come off the wire in
big-endian order
@
text
@/*	$OpenBSD: ad741x.c,v 1.13 2007/10/20 22:06:43 cnst Exp $	*/

/*
 * Copyright (c) 2005 Theo de Raadt
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/sensors.h>

#include <dev/i2c/i2cvar.h>

/* AD741x registers */
#define AD741X_TEMP	0x00
#define AD741X_CONFIG	0x01
#define AD741X_THYST	0x02
#define AD741X_TOTI	0x03
#define AD741X_ADC	0x04
#define AD741X_CONFIG2	0x05

#define AD741X_CONFMASK	0xe0

/* Sensors */
#define ADC_TEMP		0
#define ADC_ADC0		1
#define ADC_ADC1		2
#define ADC_ADC2		3
#define ADC_ADC3		4
#define ADC_MAX_SENSORS		5

struct adc_softc {
	struct device	sc_dev;
	i2c_tag_t	sc_tag;
	i2c_addr_t	sc_addr;
	int		sc_chip;
	u_int8_t	sc_config;

	struct ksensor sc_sensor[ADC_MAX_SENSORS];
	struct ksensordev sc_sensordev;
};

int	adc_match(struct device *, void *, void *);
void	adc_attach(struct device *, struct device *, void *);
void	adc_refresh(void *);

struct cfattach adc_ca = {
	sizeof(struct adc_softc), adc_match, adc_attach
};

struct cfdriver adc_cd = {
	NULL, "adc", DV_DULL
};

int
adc_match(struct device *parent, void *match, void *aux)
{
	struct i2c_attach_args *ia = aux;

	if (strcmp(ia->ia_name, "ad7417") == 0 ||
	    strcmp(ia->ia_name, "ad7418") == 0)
		return (1);
	return (0);
}

void
adc_attach(struct device *parent, struct device *self, void *aux)
{
	struct adc_softc *sc = (struct adc_softc *)self;
	struct i2c_attach_args *ia = aux;
	u_int8_t cmd, data;
	int nsens = 0, i;

	sc->sc_tag = ia->ia_tag;
	sc->sc_addr = ia->ia_addr;

	printf(": %s", ia->ia_name);

	sc->sc_chip = 0;
	if (strcmp(ia->ia_name, "ad7417") == 0)
		sc->sc_chip = 7417;
	if (strcmp(ia->ia_name, "ad7418") == 0)
		sc->sc_chip = 7418;

	if (sc->sc_chip != 0) {
		cmd = AD741X_CONFIG2;
		data = 0;
		if (iic_exec(sc->sc_tag, I2C_OP_WRITE_WITH_STOP,
		    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0)) {
			printf(", config2 reset failed\n");
			return;
		}
	}

	cmd = AD741X_CONFIG;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0)) {
		printf(", config reset failed\n");
		return;
	}
	data &= 0xfe;
	if (iic_exec(sc->sc_tag, I2C_OP_WRITE_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0)) {
		printf(", config reset failed\n");
		return;
	}
	sc->sc_config = data;

	/* Initialize sensor data. */
	strlcpy(sc->sc_sensordev.xname, sc->sc_dev.dv_xname,
	    sizeof(sc->sc_sensordev.xname));

	sc->sc_sensor[ADC_TEMP].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[ADC_TEMP].desc, "Internal",
	    sizeof(sc->sc_sensor[ADC_TEMP].desc));
	nsens = 1;

	if (sc->sc_chip == 7417 || sc->sc_chip == 7418) {
		sc->sc_sensor[ADC_ADC0].type = SENSOR_INTEGER;
		nsens++;
	}
	if (sc->sc_chip == 7417 || sc->sc_chip == 7418) {
		sc->sc_sensor[ADC_ADC1].type = SENSOR_INTEGER;
		sc->sc_sensor[ADC_ADC2].type = SENSOR_INTEGER;
		sc->sc_sensor[ADC_ADC3].type = SENSOR_INTEGER;
		nsens += 3;
	}

	if (sensor_task_register(sc, adc_refresh, 5) == NULL) {
		printf(", unable to register update task\n");
		return;
	}

	sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[0]);
	if (sc->sc_chip == 7417 || sc->sc_chip == 7418)
		sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[1]);
	if (sc->sc_chip == 7417)
		for (i = 2; i < nsens; i++)
			sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[i]);
	sensordev_install(&sc->sc_sensordev);

	printf("\n");
}

void
adc_refresh(void *arg)
{
	struct adc_softc *sc = arg;
	u_int8_t cmd, reg;
	u_int16_t data;
	int i;

	iic_acquire_bus(sc->sc_tag, 0);

	reg = (sc->sc_config & AD741X_CONFMASK) | (0 << 5);
	if (iic_exec(sc->sc_tag, I2C_OP_WRITE_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &reg, sizeof reg, 0))
		goto done;
	delay(1000);
	cmd = AD741X_TEMP;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0))
		goto done;
	sc->sc_sensor[ADC_TEMP].value = 273150000 +
	    (betoh16(data) >> 6) * 250000;

	if (sc->sc_chip == 0)
		goto done;

	if (sc->sc_chip == 7418) {
		reg = (reg & AD741X_CONFMASK) | (4 << 5);
		if (iic_exec(sc->sc_tag, I2C_OP_WRITE_WITH_STOP,
		    sc->sc_addr, &cmd, sizeof cmd, &reg, sizeof reg, 0))
			goto done;
		delay(1000);
		cmd = AD741X_ADC;
		if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
		    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0))
			goto done;
		sc->sc_sensor[ADC_ADC0].value = betoh16(data) >> 6;
		goto done;
	}

	for (i = 0; i < 4; i++) {
		reg = (reg & AD741X_CONFMASK) | (i << 5);
		if (iic_exec(sc->sc_tag, I2C_OP_WRITE_WITH_STOP,
		    sc->sc_addr, &cmd, sizeof cmd, &reg, sizeof reg, 0))
			goto done;
		delay(1000);
		cmd = AD741X_ADC;
		if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
		    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0))
			goto done;
		sc->sc_sensor[ADC_ADC0 + i].value = betoh16(data) >> 6;
	}

done:
	iic_release_bus(sc->sc_tag, 0);
}
@


1.13
log
@_check prototypes are no longer used (replaced by i2c_scan.c); ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ad741x.c,v 1.12 2007/06/24 05:34:35 dlg Exp $	*/
d161 2
a162 1
	u_int8_t cmd, data[2], reg;
d177 1
a177 1
	    ((data[0] << 8 | data[1]) >> 6) * 250000;
d192 1
a192 2
		sc->sc_sensor[ADC_ADC0].value =
		    (data[0] << 8 | data[1]) >> 6;
d206 1
a206 2
		sc->sc_sensor[ADC_ADC0 + i].value =
		    (data[0] << 8 | data[1]) >> 6;
@


1.12
log
@rework sensor tasks to use the kernels generic workq rather than a special
kernel thread of its own. the api has changed (which will be fixed in the
manpage shortly) so all the users of sensor tasks that i can find have
been fixed too.

noone tested, so its going in to force people to run with it.
"put it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ad741x.c,v 1.11 2007/04/09 19:31:22 kettenis Exp $	*/
a56 1
int	adc_check(struct i2c_attach_args *, u_int8_t *, u_int8_t *);
@


1.11
log
@Remove unused prototype.
@
text
@d1 1
a1 1
/*	$OpenBSD: ad741x.c,v 1.10 2007/03/22 16:55:31 deraadt Exp $	*/
d142 1
a142 1
	if (sensor_task_register(sc, adc_refresh, 5)) {
@


1.10
log
@split userland & kernel struct sensor/sensordev so that the addition
of new fields in the future is less disruptive.  This is done similar
to how struct proc is handled for ps(1).  ok jmc (man page changes)
tested fkr simon, and more suggestions from millert
@
text
@d1 1
a1 1
/*	$OpenBSD: ad741x.c,v 1.9 2006/12/23 17:46:39 deraadt Exp $	*/
a156 2

void	adc_readport(struct adc_softc *, u_int8_t, u_int8_t, int);
@


1.9
log
@adapt to new two-level sensor api; Constantine A. Murenin
@
text
@d1 1
a1 1
/*	$OpenBSD: ad741x.c,v 1.8 2006/04/10 00:57:23 deraadt Exp $	*/
d51 2
a52 2
	struct sensor sc_sensor[ADC_MAX_SENSORS];
	struct sensordev sc_sensordev;
@


1.8
log
@make this match our code standards
@
text
@d1 1
a1 1
/*	$OpenBSD: ad741x.c,v 1.7 2006/01/19 17:08:39 grange Exp $	*/
d52 1
d123 2
a124 3
	for (i = 0; i < ADC_MAX_SENSORS; i++)
		strlcpy(sc->sc_sensor[i].device, sc->sc_dev.dv_xname,
		    sizeof(sc->sc_sensor[i].device));
d127 1
a127 1
	strlcpy(sc->sc_sensor[ADC_TEMP].desc, "Internal Temp",
a132 2
		strlcpy(sc->sc_sensor[ADC_ADC0].desc, "adc0",
		    sizeof(sc->sc_sensor[ADC_ADC0].desc));
a136 2
		strlcpy(sc->sc_sensor[ADC_ADC1].desc, "adc1",
		    sizeof(sc->sc_sensor[ADC_ADC1].desc));
a137 2
		strlcpy(sc->sc_sensor[ADC_ADC2].desc, "adc2",
		    sizeof(sc->sc_sensor[ADC_ADC2].desc));
a138 2
		strlcpy(sc->sc_sensor[ADC_ADC3].desc, "adc3",
		    sizeof(sc->sc_sensor[ADC_ADC3].desc));
d147 1
a147 1
	sensor_add(&sc->sc_sensor[0]);
d149 1
a149 1
		sensor_add(&sc->sc_sensor[1]);
d152 2
a153 1
			sensor_add(&sc->sc_sensor[i]);
@


1.7
log
@Replace SENSOR_ADD() macro with a pair of functions
sensor_add()/sensor_del() so that sensors can be attached
and detached dynamicaly.

ok kettenis@@ deraadt@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ad741x.c,v 1.6 2005/12/31 04:31:27 deraadt Exp $	*/
d127 1
a127 1
	strlcpy(sc->sc_sensor[ADC_TEMP].desc, "Internal",
@


1.6
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: ad741x.c,v 1.5 2005/12/28 20:35:16 deraadt Exp $	*/
d155 1
a155 1
	SENSOR_ADD(&sc->sc_sensor[0]);
d157 1
a157 1
		SENSOR_ADD(&sc->sc_sensor[1]);
d160 1
a160 1
			SENSOR_ADD(&sc->sc_sensor[i]);
@


1.5
log
@ad7417 much like ad7418
@
text
@d1 1
a1 1
/*	$OpenBSD: ad741x.c,v 1.4 2005/12/27 17:18:18 deraadt Exp $	*/
d40 1
a40 1
#define ADC_ADC2		3	
@


1.4
log
@no longer use ia_compat; tested by a few
@
text
@d1 1
a1 1
/*	$OpenBSD: ad741x.c,v 1.3 2005/11/28 17:58:20 deraadt Exp $	*/
d73 1
a73 1
	    strcmp(ia->ia_name, "ad7418") == 0)		/* XXX? */
@


1.3
log
@attempt to cope with the other versions of the chips
try not to scan all the sensors every pass through, but do a
few registers each time
still not reading correct data on one machine i have, but this
might be because apple did not connect them up.  who knows, when
they build machines with 50+ sensors..
@
text
@d1 1
a1 1
/*	$OpenBSD: ad741x.c,v 1.2 2005/11/15 22:15:09 deraadt Exp $	*/
d72 4
a75 6
	if (ia->ia_compat) {
		if (strcmp(ia->ia_compat, "ad7417") == 0)
			return (1);
		return (0);
	}
	return (1);
d89 7
a95 7
	if (ia->ia_compat) {
		sc->sc_chip = 0;
		if (strcmp(ia->ia_compat, "ad7417") == 0)
			sc->sc_chip = 7417;
		if (strcmp(ia->ia_compat, "ad7418") == 0)
			sc->sc_chip = 7418;
	}
@


1.2
log
@differentiate the older chip without the 4 adc
@
text
@d1 1
a1 1
/*	$OpenBSD: ad741x.c,v 1.1 2005/11/15 18:28:05 deraadt Exp $	*/
d48 2
a49 1
	int		sc_newchip;
d86 1
a86 1
	int i;
d92 5
a96 12
		sc->sc_newchip = 0;
		if (strcmp(ia->ia_compat, "ad7417") == 0 ||
		    strcmp(ia->ia_compat, "ad7418") == 0)
			sc->sc_newchip = 1;
	}

	cmd = AD741X_CONFIG;
	data = 0;
	if (iic_exec(sc->sc_tag, I2C_OP_WRITE_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0)) {
		printf(", config reset failed\n");
		return;
d99 1
a99 1
	if (sc->sc_newchip) {
d109 14
d131 1
d133 1
a133 1
	if (sc->sc_newchip) {
d137 3
d149 1
d158 4
a161 2
	if (sc->sc_newchip) {
		for (i = 1; i < ADC_MAX_SENSORS; i++)
a162 1
	}
d178 1
a178 5
	cmd = AD741X_CONFIG;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &reg, sizeof reg, 0))
		goto done;
	reg = (reg & AD741X_CONFMASK) | (0 << 5);
d182 1
d190 15
a204 1
	if (sc->sc_newchip == 0)
d206 1
d213 1
@


1.1
log
@simple driver for the Analog Devices AD7417/7418 (does not cope right
with 7416 without ADC yet)
@
text
@d1 1
a1 1
/*	$OpenBSD: ad741x.c,v 1.1 2005/11/15 16:24:49 deraadt Exp $	*/
d42 1
a42 1
#define ADC_NUM_SENSORS		5
d45 4
a48 3
	struct device sc_dev;
	i2c_tag_t sc_tag;
	i2c_addr_t sc_addr;
d50 1
a50 1
	struct sensor sc_sensor[ADC_NUM_SENSORS];
d90 7
d105 8
a112 6
	cmd = AD741X_CONFIG2;
	data = 0;
	if (iic_exec(sc->sc_tag, I2C_OP_WRITE_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0)) {
		printf(", config2 reset failed\n");
		return;
d116 1
a116 1
	for (i = 0; i < ADC_NUM_SENSORS; i++)
d124 14
a137 12
	sc->sc_sensor[ADC_ADC0].type = SENSOR_INTEGER;
	strlcpy(sc->sc_sensor[ADC_ADC0].desc, "adc0",
	    sizeof(sc->sc_sensor[ADC_ADC0].desc));
	sc->sc_sensor[ADC_ADC1].type = SENSOR_INTEGER;
	strlcpy(sc->sc_sensor[ADC_ADC1].desc, "adc1",
	    sizeof(sc->sc_sensor[ADC_ADC1].desc));
	sc->sc_sensor[ADC_ADC2].type = SENSOR_INTEGER;
	strlcpy(sc->sc_sensor[ADC_ADC2].desc, "adc2",
	    sizeof(sc->sc_sensor[ADC_ADC2].desc));
	sc->sc_sensor[ADC_ADC3].type = SENSOR_INTEGER;
	strlcpy(sc->sc_sensor[ADC_ADC3].desc, "adc3",
	    sizeof(sc->sc_sensor[ADC_ADC3].desc));
d144 5
a148 2
	for (i = 0; i < ADC_NUM_SENSORS; i++)
		SENSOR_ADD(&sc->sc_sensor[i]);
d167 1
a167 1
		goto fail;
d171 1
a171 1
		goto fail;
d175 1
a175 1
		goto fail;
d179 3
d186 1
a186 1
			goto fail;
d190 1
a190 1
			goto fail;
d195 1
a195 1
fail:
@

