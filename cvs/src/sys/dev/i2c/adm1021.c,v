head	1.28;
access;
symbols
	OPENBSD_6_2:1.28.0.24
	OPENBSD_6_2_BASE:1.28
	OPENBSD_6_1:1.28.0.26
	OPENBSD_6_1_BASE:1.28
	OPENBSD_6_0:1.28.0.22
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.12
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.28.0.20
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.28.0.18
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.28.0.16
	OPENBSD_5_6_BASE:1.28
	OPENBSD_5_5:1.28.0.14
	OPENBSD_5_5_BASE:1.28
	OPENBSD_5_4:1.28.0.10
	OPENBSD_5_4_BASE:1.28
	OPENBSD_5_3:1.28.0.8
	OPENBSD_5_3_BASE:1.28
	OPENBSD_5_2:1.28.0.6
	OPENBSD_5_2_BASE:1.28
	OPENBSD_5_1_BASE:1.28
	OPENBSD_5_1:1.28.0.4
	OPENBSD_5_0:1.28.0.2
	OPENBSD_5_0_BASE:1.28
	OPENBSD_4_9:1.27.0.16
	OPENBSD_4_9_BASE:1.27
	OPENBSD_4_8:1.27.0.14
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.27.0.10
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.27.0.12
	OPENBSD_4_6_BASE:1.27
	OPENBSD_4_5:1.27.0.8
	OPENBSD_4_5_BASE:1.27
	OPENBSD_4_4:1.27.0.6
	OPENBSD_4_4_BASE:1.27
	OPENBSD_4_3:1.27.0.4
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.27.0.2
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.25.0.2
	OPENBSD_4_1_BASE:1.25
	OPENBSD_4_0:1.24.0.2
	OPENBSD_4_0_BASE:1.24
	OPENBSD_3_9:1.21.0.2
	OPENBSD_3_9_BASE:1.21;
locks; strict;
comment	@ * @;


1.28
date	2011.03.10.23.14.30;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	2007.06.24.05.34.35;	author dlg;	state Exp;
branches;
next	1.26;

1.26
date	2007.03.22.16.55.31;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2006.12.23.17.46.39;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2006.07.20.21.23.42;	author kettenis;	state Exp;
branches;
next	1.23;

1.23
date	2006.07.15.19.39.55;	author kettenis;	state Exp;
branches;
next	1.22;

1.22
date	2006.04.10.00.57.23;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2006.01.19.17.08.39;	author grange;	state Exp;
branches;
next	1.20;

1.20
date	2006.01.03.07.55.47;	author kettenis;	state Exp;
branches;
next	1.19;

1.19
date	2006.01.02.03.13.08;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2005.12.29.14.51.08;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2005.12.29.00.30.44;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2005.12.28.23.06.14;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2005.12.27.23.03.04;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2005.12.27.22.55.50;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.27.22.18.44;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.27.18.28.51;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.27.17.18.18;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.26.08.14.17;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.26.01.59.36;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.26.01.04.55;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.25.03.38.01;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.24.23.10.55;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.24.23.09.19;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.24.22.08.17;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.24.19.41.45;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.23.01.15.06;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.22.23.44.12;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Add support for detecting the NXP SA56004X (we have not actually
seen it in the wild yet, but the detection seems easy).  Few bugs spotted
by kettenis.
ok kettenis
@
text
@/*	$OpenBSD: adm1021.c,v 1.27 2007/06/24 05:34:35 dlg Exp $	*/

/*
 * Copyright (c) 2005 Theo de Raadt
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/sensors.h>

#include <dev/i2c/i2cvar.h>

/* ADM 1021 registers */
#define ADM1021_INT_TEMP	0x00
#define ADM1021_EXT_TEMP	0x01
#define ADM1021_STATUS		0x02
#define  ADM1021_STATUS_INVAL	0x7f
#define  ADM1021_STATUS_NOEXT	0x40
#define ADM1021_CONFIG_READ	0x03
#define ADM1021_CONFIG_WRITE	0x09
#define  ADM1021_CONFIG_RUN	0x40
#define ADM1021_COMPANY		0xfe	/* contains 0x41 */
#define ADM1021_STEPPING	0xff	/* contains 0x3? */

/* Sensors */
#define ADMTEMP_EXT		0
#define ADMTEMP_INT		1
#define ADMTEMP_NUM_SENSORS	2

struct admtemp_softc {
	struct device	sc_dev;
	i2c_tag_t	sc_tag;
	i2c_addr_t	sc_addr;

	struct ksensor	sc_sensor[ADMTEMP_NUM_SENSORS];
	struct ksensordev sc_sensordev;
	int		sc_noexternal;
};

int	admtemp_match(struct device *, void *, void *);
void	admtemp_attach(struct device *, struct device *, void *);
void	admtemp_refresh(void *);

struct cfattach admtemp_ca = {
	sizeof(struct admtemp_softc), admtemp_match, admtemp_attach
};

struct cfdriver admtemp_cd = {
	NULL, "admtemp", DV_DULL
};

int
admtemp_match(struct device *parent, void *match, void *aux)
{
	struct i2c_attach_args *ia = aux;

	if (strcmp(ia->ia_name, "adm1021") == 0 ||
	    strcmp(ia->ia_name, "adm1023") == 0 ||
	    strcmp(ia->ia_name, "adm1032") == 0 ||
	    strcmp(ia->ia_name, "g781") == 0 ||
	    strcmp(ia->ia_name, "g781-1") == 0 ||
	    strcmp(ia->ia_name, "gl523sm") == 0 ||
	    strcmp(ia->ia_name, "max1617") == 0 ||
	    strcmp(ia->ia_name, "sa56004x") == 0 ||
	    strcmp(ia->ia_name, "xeontemp") == 0)
		return (1);
	return (0);
}

void
admtemp_attach(struct device *parent, struct device *self, void *aux)
{
	struct admtemp_softc *sc = (struct admtemp_softc *)self;
	struct i2c_attach_args *ia = aux;
	u_int8_t cmd, data, stat;
	int xeon = 0, i;

	sc->sc_tag = ia->ia_tag;
	sc->sc_addr = ia->ia_addr;

	if (strcmp(ia->ia_name, "xeontemp") == 0) {
		printf(": Xeon");
		xeon = 1;
	} else
		printf(": %s", ia->ia_name);

	iic_acquire_bus(sc->sc_tag, 0);
	cmd = ADM1021_CONFIG_READ;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0)) {
		iic_release_bus(sc->sc_tag, 0);
		printf(", cannot get control register\n");
		return;
	}
	if (data & ADM1021_CONFIG_RUN) {
		cmd = ADM1021_STATUS;
		if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
		    sc->sc_addr, &cmd, sizeof cmd, &stat, sizeof stat, 0)) {
			iic_release_bus(sc->sc_tag, 0);
			printf(", cannot read status register\n");
			return;
		}
		if ((stat & ADM1021_STATUS_INVAL) == ADM1021_STATUS_INVAL) {
			if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
			    sc->sc_addr, &cmd, sizeof cmd, &stat, sizeof stat, 0)) {
				iic_release_bus(sc->sc_tag, 0);
				printf(", cannot read status register\n");
				return;
			}
		}

		/* means external is dead */
		if ((stat & ADM1021_STATUS_INVAL) != ADM1021_STATUS_INVAL &&
		    (stat & ADM1021_STATUS_NOEXT))
			sc->sc_noexternal = 1;

		data &= ~ADM1021_CONFIG_RUN;
		cmd = ADM1021_CONFIG_WRITE;
		if (iic_exec(sc->sc_tag, I2C_OP_WRITE_WITH_STOP,
		    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0)) {
			iic_release_bus(sc->sc_tag, 0);
			printf(", cannot set control register\n");
			return;
		}
	}
	iic_release_bus(sc->sc_tag, 0);

	/* Initialize sensor data. */
	strlcpy(sc->sc_sensordev.xname, sc->sc_dev.dv_xname,
	    sizeof(sc->sc_sensordev.xname));

	sc->sc_sensor[ADMTEMP_EXT].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[ADMTEMP_EXT].desc,
	    xeon ? "Xeon" : "External",
	    sizeof(sc->sc_sensor[ADMTEMP_EXT].desc));

	sc->sc_sensor[ADMTEMP_INT].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[ADMTEMP_INT].desc,
	    xeon ? "Xeon" : "Internal",
	    sizeof(sc->sc_sensor[ADMTEMP_INT].desc));

	if (sensor_task_register(sc, admtemp_refresh, 5) == NULL) {
		printf(", unable to register update task\n");
		return;
	}

	for (i = 0; i < (sc->sc_noexternal ? 1 : ADMTEMP_NUM_SENSORS); i++)
		sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[i]);
	sensordev_install(&sc->sc_sensordev);

	printf("\n");
}

void
admtemp_refresh(void *arg)
{
	struct admtemp_softc *sc = arg;
	u_int8_t cmd;
	int8_t sdata;

	iic_acquire_bus(sc->sc_tag, 0);

	if (sc->sc_noexternal == 0) {
		cmd = ADM1021_EXT_TEMP;
		if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP, sc->sc_addr,
		    &cmd, sizeof cmd, &sdata, sizeof sdata, 0) == 0) {
			if (sdata == 0x7f) {
				sc->sc_sensor[ADMTEMP_EXT].flags |= SENSOR_FINVALID;
			} else {
				sc->sc_sensor[ADMTEMP_EXT].value =
				    273150000 + 1000000 * sdata;
				sc->sc_sensor[ADMTEMP_EXT].flags &= ~SENSOR_FINVALID;
			}
		}
	} else
		sc->sc_sensor[ADMTEMP_EXT].flags |= SENSOR_FINVALID;


	cmd = ADM1021_INT_TEMP;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP, sc->sc_addr,
	    &cmd, sizeof cmd, &sdata,  sizeof sdata, 0) == 0) {
		if (sdata == 0x7f) {
			sc->sc_sensor[ADMTEMP_INT].flags |= SENSOR_FINVALID;
		} else {
			sc->sc_sensor[ADMTEMP_INT].value =
			    273150000 + 1000000 * sdata;
			sc->sc_sensor[ADMTEMP_INT].flags &= ~SENSOR_FINVALID;
		}
	}

	iic_release_bus(sc->sc_tag, 0);
}
@


1.27
log
@rework sensor tasks to use the kernels generic workq rather than a special
kernel thread of its own. the api has changed (which will be fixed in the
manpage shortly) so all the users of sensor tasks that i can find have
been fixed too.

noone tested, so its going in to force people to run with it.
"put it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.26 2007/03/22 16:55:31 deraadt Exp $	*/
d77 1
@


1.26
log
@split userland & kernel struct sensor/sensordev so that the addition
of new fields in the future is less disruptive.  This is done similar
to how struct proc is handled for ps(1).  ok jmc (man page changes)
tested fkr simon, and more suggestions from millert
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.25 2006/12/23 17:46:39 deraadt Exp $	*/
d154 1
a154 1
	if (sensor_task_register(sc, admtemp_refresh, 5)) {
@


1.25
log
@adapt to new two-level sensor api; Constantine A. Murenin
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.24 2006/07/20 21:23:42 kettenis Exp $	*/
d48 2
a49 2
	struct sensor	sc_sensor[ADMTEMP_NUM_SENSORS];
	struct sensordev sc_sensordev;
@


1.24
log
@Add support for Analog Devices ADM1023 (and ADM1021A).
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.23 2006/07/15 19:39:55 kettenis Exp $	*/
d49 1
d141 2
a142 3
	for (i = 0; i < ADMTEMP_NUM_SENSORS; i++)
		strlcpy(sc->sc_sensor[i].device, sc->sc_dev.dv_xname,
		    sizeof(sc->sc_sensor[i].device));
d146 1
a146 1
	    xeon ? "Xeon Temp" : "External Temp",
d151 1
a151 1
	    xeon ? "Xeon Temp" : "Internal Temp",
d160 2
a161 1
		sensor_add(&sc->sc_sensor[i]);
@


1.23
log
@Add support for Genesys Logic GL523SM and Global Mixed-mode Technology G781.

tested by fgs@@ and Stuart Henderson.
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.22 2006/04/10 00:57:23 deraadt Exp $	*/
d70 1
@


1.22
log
@make this match our code standards
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.21 2006/01/19 17:08:39 grange Exp $	*/
d71 5
a75 2
	    strcmp(ia->ia_name, "xeontemp") == 0 ||
	    strcmp(ia->ia_name, "max1617") == 0)
@


1.21
log
@Replace SENSOR_ADD() macro with a pair of functions
sensor_add()/sensor_del() so that sensors can be attached
and detached dynamicaly.

ok kettenis@@ deraadt@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.20 2006/01/03 07:55:47 kettenis Exp $	*/
d142 1
a142 1
	    xeon ? "Xeon" : "External",
d147 1
a147 1
	    xeon ? "Xeon" : "Internal",
@


1.20
log
@Use "official" chip part names/numbers for matching.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.19 2006/01/02 03:13:08 deraadt Exp $	*/
d156 1
a156 1
		SENSOR_ADD(&sc->sc_sensor[i]);
@


1.19
log
@add the name sparc64 calls this thing
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.18 2005/12/29 14:51:08 deraadt Exp $	*/
a71 1
	    strcmp(ia->ia_name, "maxim1617") == 0 ||
@


1.18
log
@stop using I2C_F_POLL; it is a bus driver responsibility now
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.17 2005/12/29 00:30:44 deraadt Exp $	*/
d72 2
a73 1
	    strcmp(ia->ia_name, "maxim1617") == 0)
@


1.17
log
@"xeontemp" just means "looks like some sort of adm1021, or maxim1617,
but without any ID registers".  anyways, i found some that still have
two registers.  instead of using "xeontemp" to mean "only look at one
probe", use the existing 0x7f == short plus the ext-short bit in the
status register to determine validity.  otherwise, show them both.
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.16 2005/12/28 23:06:14 deraadt Exp $	*/
d97 1
a97 1
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL)) {
d105 1
a105 1
		    sc->sc_addr, &cmd, sizeof cmd, &stat, sizeof stat, I2C_F_POLL)) {
d127 1
a127 1
		    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL)) {
d173 1
a173 1
		    &cmd, sizeof cmd, &sdata, sizeof sdata, I2C_F_POLL) == 0) {
d188 1
a188 1
	    &cmd, sizeof cmd, &sdata,  sizeof sdata, I2C_F_POLL) == 0) {
@


1.16
log
@probe for adm1032, a stupid stupid adm1021
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.15 2005/12/27 23:03:04 deraadt Exp $	*/
d30 2
d49 1
a49 1
	int		sc_xeon;
d82 2
a83 2
	u_int8_t cmd, data;
	int i;
d90 1
a90 1
		sc->sc_xeon = 1;
d103 21
d142 1
a142 1
	    sc->sc_xeon ? "Xeon" : "External",
d146 2
a147 1
	strlcpy(sc->sc_sensor[ADMTEMP_INT].desc, "Internal",
d155 1
a155 1
	for (i = 0; i < (sc->sc_xeon ? 1 : ADMTEMP_NUM_SENSORS); i++)
d170 2
a171 14
	cmd = ADM1021_EXT_TEMP;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP, sc->sc_addr,
	    &cmd, sizeof cmd, &sdata, sizeof sdata, I2C_F_POLL) == 0) {
		if (sdata == 0x7f) {
			sc->sc_sensor[ADMTEMP_EXT].flags |= SENSOR_FINVALID;
		} else {
			sc->sc_sensor[ADMTEMP_EXT].value =
			    273150000 + 1000000 * sdata;
			sc->sc_sensor[ADMTEMP_EXT].flags &= ~SENSOR_FINVALID;
		}
	}

	if (sc->sc_xeon == 0) {
		cmd = ADM1021_INT_TEMP;
d173 1
a173 1
		    &cmd, sizeof cmd, &sdata,  sizeof sdata, I2C_F_POLL) == 0) {
d175 1
a175 1
				sc->sc_sensor[ADMTEMP_INT].flags |= SENSOR_FINVALID;
d177 1
a177 1
				sc->sc_sensor[ADMTEMP_INT].value =
d179 1
a179 1
				sc->sc_sensor[ADMTEMP_INT].flags &= ~SENSOR_FINVALID;
d183 14
a196 1
		sc->sc_sensor[ADMTEMP_INT].flags |= SENSOR_FINVALID;
@


1.15
log
@correctly mark 0x7f temperature reading as invalid
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.14 2005/12/27 22:55:50 deraadt Exp $	*/
d68 1
@


1.14
log
@mark xeon internal sensor invalid each time
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.13 2005/12/27 22:18:44 deraadt Exp $	*/
d149 1
a149 1
			sc->sc_sensor[ADMTEMP_EXT].flags &= ~SENSOR_FINVALID;
d162 1
a162 1
				sc->sc_sensor[ADMTEMP_INT].flags &= ~SENSOR_FINVALID;
d170 1
a170 1
		sc->sc_sensor[ADMTEMP_INT].flags &= ~SENSOR_FINVALID;
@


1.13
log
@oops, messed up "enabling run"
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.12 2005/12/27 18:28:51 deraadt Exp $	*/
d169 2
a170 1
	}
@


1.12
log
@only start, if not already started
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.11 2005/12/27 17:18:18 deraadt Exp $	*/
d99 1
a99 1
	if ((data & ADM1021_CONFIG_RUN) == 0) {
@


1.11
log
@no longer use ia_compat; tested by a few
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.10 2005/12/26 08:14:17 deraadt Exp $	*/
d96 1
a96 1
		printf(": cannot get control register\n");
d99 9
a107 7
	data &= ~ADM1021_CONFIG_RUN;
	cmd = ADM1021_CONFIG_WRITE;
	if (iic_exec(sc->sc_tag, I2C_OP_WRITE_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, I2C_F_POLL)) {
		iic_release_bus(sc->sc_tag, 0);
		printf(": cannot set control register\n");
		return;
@


1.10
log
@add address qualifiers to a few chips (ie. they can only occur at certain
addresses)
there are some "xeon" sensors that are actually real maxim1617, and hence
have a 0xfe register containing maxim's identifier .. cope.
remove totally bogus lm81 detection.
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.9 2005/12/26 01:59:36 deraadt Exp $	*/
d85 1
a85 1
	if (ia->ia_name && strcmp(ia->ia_name, "xeontemp") == 0) {
d88 2
a89 1
	}
@


1.9
log
@maxim1617 is the same
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.8 2005/12/26 01:04:55 deraadt Exp $	*/
d68 1
a68 1
	    strcmp(ia->ia_name, "xeon") == 0 ||
d85 1
a85 1
	if (ia->ia_name && strcmp(ia->ia_name, "xeon") == 0) {
d144 9
a152 3
	    &cmd, sizeof cmd, &sdata, sizeof sdata, I2C_F_POLL) == 0)
		sc->sc_sensor[ADMTEMP_EXT].value =
		    273150000 + 1000000 * sdata;
d157 9
a165 3
		    &cmd, sizeof cmd, &sdata,  sizeof sdata, I2C_F_POLL) == 0)
			sc->sc_sensor[ADMTEMP_INT].value =
			    273150000 + 1000000 * sdata;
@


1.8
log
@set the "start adc" bit upon startup
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.7 2005/12/25 03:38:01 deraadt Exp $	*/
d68 2
a69 8
	    strcmp(ia->ia_name, "xeon") == 0) {
		/*
		 * should also ensure that
		 * config & 0x80 == 0x00
		 * status1 & 0xc0 == 0x00
		 * status2 & 0xbc == 0x00
		 * before accepting this to be for real
		 */
a70 1
	}
@


1.7
log
@rename Xeon sensor, and ignore the other temperature sensor
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.6 2005/12/24 23:10:55 deraadt Exp $	*/
d32 1
a32 1

d86 1
a86 1
//	u_int8_t cmd, data;
d97 17
a113 17
//	iic_acquire_bus(sc->sc_tag, 0);
//	cmd = ADM1021_CONFIG_READ;
//	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
//	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0)) {
//		iic_release_bus(sc->sc_tag, 0);
//		printf(": cannot get control register\n");
//		return;
//	}
//	data &= ~0x40;
//	cmd = ADM1021_CONFIG_WRITE;
//	if (iic_exec(sc->sc_tag, I2C_OP_WRITE_WITH_STOP,
//	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0)) {
//		iic_release_bus(sc->sc_tag, 0);
//		printf(": cannot set control register\n");
//		return;
//	}
//	iic_release_bus(sc->sc_tag, 0);
@


1.6
log
@bad message
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.5 2005/12/24 23:09:19 deraadt Exp $	*/
d37 2
a38 2
#define ADMTEMP_INT		0
#define ADMTEMP_EXT		1
d120 5
a127 6
	if (sc->sc_xeon)
		sc->sc_sensor[ADMTEMP_INT].flags |= SENSOR_FINVALID;	

	sc->sc_sensor[ADMTEMP_EXT].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[ADMTEMP_EXT].desc, "External",
	    sizeof(sc->sc_sensor[ADMTEMP_EXT].desc));
d134 1
a134 1
	for (i = 0; i < ADMTEMP_NUM_SENSORS; i++)
d149 6
d157 2
a158 3
		if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
		    sc->sc_addr, &cmd, sizeof cmd, &sdata,
		    sizeof sdata, I2C_F_POLL) == 0)
a161 6

	cmd = ADM1021_EXT_TEMP;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &sdata,
	    sizeof sdata, I2C_F_POLL) == 0)
		sc->sc_sensor[ADMTEMP_EXT].value = 273150000 + 1000000 * sdata;
@


1.5
log
@For Xeon sensors, only show one probe
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.4 2005/12/24 22:08:17 deraadt Exp $	*/
d93 1
a93 1
		printf(": Xeon\n");
@


1.4
log
@handle embedded xeon temperature probes.  yes, you got it -- i2c wires
coming off the processor... for an embedded adm1021 on the chip.  only
the "external" temperature is valid, the other one is disabled.
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.3 2005/12/24 19:41:45 deraadt Exp $	*/
d47 1
d92 5
d123 2
a124 2
	if (ia->ia_name && strcmp(ia->ia_name, "xeon") == 0)
		sc->sc_sensor[ADMTEMP_INT].flags |= SENSOR_FINVALID;
d150 8
a157 4
	cmd = ADM1021_INT_TEMP;
	if (iic_exec(sc->sc_tag, I2C_OP_READ_WITH_STOP,
	    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata, I2C_F_POLL) == 0)
		sc->sc_sensor[ADMTEMP_INT].value = 273150000 + 1000000 * sdata;
d161 2
a162 1
	    sc->sc_addr, &cmd, sizeof cmd, &sdata, sizeof sdata, I2C_F_POLL) == 0)
@


1.3
log
@signed temperature...
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.2 2005/12/23 01:15:06 deraadt Exp $	*/
d66 2
a67 1
	if (strcmp(ia->ia_name, "adm1021") == 0) {
d117 2
@


1.2
log
@match functions deserve a failure condition
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.1 2005/12/22 23:44:12 deraadt Exp $	*/
d30 2
d84 1
d90 18
d136 2
a137 1
	u_int8_t cmd, data;
d143 2
a144 2
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMTEMP_INT].value = 273150000 + 1000000 * data;
d148 2
a149 2
	    sc->sc_addr, &cmd, sizeof cmd, &data, sizeof data, 0) == 0)
		sc->sc_sensor[ADMTEMP_EXT].value = 273150000 + 1000000 * data;
@


1.1
log
@start at a driver for the stupid ADM 1021
@
text
@d1 1
a1 1
/*	$OpenBSD: adm1021.c,v 1.3 2005/12/22 23:19:07 deraadt Exp $	*/
d74 1
a74 1
	return (1);
@

