head	1.30;
access;
symbols
	OPENBSD_6_2:1.30.0.14
	OPENBSD_6_2_BASE:1.30
	OPENBSD_6_1:1.30.0.12
	OPENBSD_6_1_BASE:1.30
	OPENBSD_6_0:1.30.0.10
	OPENBSD_6_0_BASE:1.30
	OPENBSD_5_9:1.30.0.4
	OPENBSD_5_9_BASE:1.30
	OPENBSD_5_8:1.30.0.6
	OPENBSD_5_8_BASE:1.30
	OPENBSD_5_7:1.30.0.2
	OPENBSD_5_7_BASE:1.30
	OPENBSD_5_6:1.29.0.36
	OPENBSD_5_6_BASE:1.29
	OPENBSD_5_5:1.29.0.34
	OPENBSD_5_5_BASE:1.29
	OPENBSD_5_4:1.29.0.30
	OPENBSD_5_4_BASE:1.29
	OPENBSD_5_3:1.29.0.28
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.29.0.24
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.26
	OPENBSD_5_0:1.29.0.22
	OPENBSD_5_0_BASE:1.29
	OPENBSD_4_9:1.29.0.20
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.29.0.18
	OPENBSD_4_8_BASE:1.29
	OPENBSD_4_7:1.29.0.14
	OPENBSD_4_7_BASE:1.29
	OPENBSD_4_6:1.29.0.16
	OPENBSD_4_6_BASE:1.29
	OPENBSD_4_5:1.29.0.12
	OPENBSD_4_5_BASE:1.29
	OPENBSD_4_4:1.29.0.10
	OPENBSD_4_4_BASE:1.29
	OPENBSD_4_3:1.29.0.8
	OPENBSD_4_3_BASE:1.29
	OPENBSD_4_2:1.29.0.6
	OPENBSD_4_2_BASE:1.29
	OPENBSD_4_1:1.29.0.4
	OPENBSD_4_1_BASE:1.29
	OPENBSD_4_0:1.29.0.2
	OPENBSD_4_0_BASE:1.29
	OPENBSD_3_9:1.27.0.2
	OPENBSD_3_9_BASE:1.27
	OPENBSD_3_8:1.24.0.6
	OPENBSD_3_8_BASE:1.24
	OPENBSD_3_7:1.24.0.4
	OPENBSD_3_7_BASE:1.24
	OPENBSD_3_6:1.24.0.2
	OPENBSD_3_6_BASE:1.24
	SMP_SYNC_A:1.22
	SMP_SYNC_B:1.22
	OPENBSD_3_5:1.22.0.2
	OPENBSD_3_5_BASE:1.22
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	UBC_SYNC_A:1.16
	OPENBSD_3_3:1.16.0.2
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.16
	UBC:1.3.0.6
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	SMP:1.3.0.2;
locks; strict;
comment	@ * @;


1.30
date	2014.08.24.18.01.27;	author zhuk;	state Exp;
branches;
next	1.29;
commitid	U5Tni3KouSny7h2m;

1.29
date	2006.06.27.20.55.51;	author reyk;	state Exp;
branches;
next	1.28;

1.28
date	2006.06.27.09.48.02;	author reyk;	state Exp;
branches;
next	1.27;

1.27
date	2005.12.13.10.30.35;	author jsg;	state Exp;
branches;
next	1.26;

1.26
date	2005.11.19.07.04.52;	author jsg;	state Exp;
branches;
next	1.25;

1.25
date	2005.10.12.18.43.07;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2004.06.22.20.51.01;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2004.06.22.20.48.00;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2004.03.18.16.16.10;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2004.03.05.20.39.48;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2004.03.02.21.55.07;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2003.10.26.15.34.15;	author drahn;	state Exp;
branches;
next	1.18;

1.18
date	2003.10.21.18.58.49;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2003.08.24.12.23.57;	author fgsch;	state Exp;
branches;
next	1.16;

1.16
date	2002.10.27.16.20.48;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2002.10.22.19.48.22;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.10.11.13.31.49;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2002.10.10.20.27.46;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.10.04.02.29.36;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.09.10.08.21.35;	author fgsch;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.25.02.03.02;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.14.21.34.59;	author todd;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.02.16.11.41;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.20.03.56.37;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.06.23.48.38;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.06.20.31.56;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.28.18.21.06;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.07.18.51.59;	author millert;	state Exp;
branches
	1.3.2.1
	1.3.6.1;
next	1.2;

1.2
date	2001.06.07.04.58.20;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.15.02.40.36;	author millert;	state Exp;
branches;
next	;

1.3.2.1
date	2003.03.28.00.38.13;	author niklas;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2004.02.19.10.56.18;	author niklas;	state Exp;
branches;
next	1.3.2.3;

1.3.2.3
date	2004.06.05.23.12.42;	author niklas;	state Exp;
branches;
next	;

1.3.6.1
date	2002.06.11.03.42.18;	author art;	state Exp;
branches;
next	1.3.6.2;

1.3.6.2
date	2002.10.29.00.33.25;	author art;	state Exp;
branches;
next	;


desc
@@


1.30
log
@Fix wrong IEEE 802.11 ioctl's:

  * SIOCG80211ALLNODES operates on struct ieee80211_nodereq_all, not
    struct ieee80211_nodereq.

  * Six SIOC* from wi(4) were using same codes with generic parts of
    IEEE 802.11 framework. Things worked due to the fact that size
    of data struct being passed is encoded in actual SIOC*, too.

This commit means that ifconfig and some ports will need to be rebuilt,
if any of affected SIOC* codes is used. Port bumps to follow.

First part okay reyk@@, whole diff okay mpi@@
Heavy prodding to commit now from deraadt@@
@
text
@/*	$OpenBSD: if_wi_ieee.h,v 1.29 2006/06/27 20:55:51 reyk Exp $	*/

/*
 * Copyright (c) 1997, 1998, 1999
 *	Bill Paul <wpaul@@ctr.columbia.edu>.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Bill Paul.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY Bill Paul AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL Bill Paul OR THE VOICES IN HIS HEAD
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 *	From: if_wavelan_ieee.h,v 1.5.2.1 2001/07/04 00:12:34 brooks Exp $
 */

#ifndef _IF_WI_IEEE_H
#define _IF_WI_IEEE_H

/*
 * This header defines a simple command interface to the FreeBSD
 * WaveLAN/IEEE driver (wi) driver, which is used to set certain
 * device-specific parameters which can't be easily managed through
 * ifconfig(8). No, sysctl(2) is not the answer. I said a _simple_
 * interface, didn't I.
 */

#define SIOCSWAVELAN	_IOW('i', 206, struct ifreq)	/* wavelan set op */
#define SIOCGWAVELAN	_IOWR('i', 207, struct ifreq)	/* wavelan get op */

/*
 * Technically I don't think there's a limit to a record
 * length. The largest record is the one that contains the CIS
 * data, which is 240 words long, so 256 should be a safe
 * value.
 */
#define WI_MAX_DATALEN	512

struct wi_req {
	u_int16_t	wi_len;
	u_int16_t	wi_type;
	u_int16_t	wi_val[WI_MAX_DATALEN];
};

/*
 * Private LTV records (interpreted only by the driver). This is
 * a minor kludge to allow reading the interface statistics from
 * the driver.
 */
#define WI_RID_IFACE_STATS	0x0100
#define WI_RID_MGMT_XMIT	0x0200
#define	WI_RID_MONITOR_MODE	0x0500
#define WI_RID_SCAN_APS		0x0600
#define WI_RID_READ_APS		0x0700

struct wi_80211_hdr {
	u_int16_t		frame_ctl;
	u_int16_t		dur_id;
	u_int8_t		addr1[6];
	u_int8_t		addr2[6];
	u_int8_t		addr3[6];
	u_int16_t		seq_ctl;
	u_int8_t		addr4[6];
};

#define WI_FCTL_VERS		0x0002
#define WI_FCTL_FTYPE		0x000C
#define WI_FCTL_STYPE		0x00F0
#define WI_FCTL_TODS		0x0100
#define WI_FCTL_FROMDS		0x0200
#define WI_FCTL_MOREFRAGS	0x0400
#define WI_FCTL_RETRY		0x0800
#define WI_FCTL_PM		0x1000
#define WI_FCTL_MOREDATA	0x2000
#define WI_FCTL_WEP		0x4000
#define WI_FCTL_ORDER		0x8000

#define WI_FTYPE_MGMT		0x0000
#define WI_FTYPE_CTL		0x0004
#define WI_FTYPE_DATA		0x0008

#define WI_STYPE_MGMT_ASREQ	0x0000	/* association request */
#define WI_STYPE_MGMT_ASRESP	0x0010	/* association response */
#define WI_STYPE_MGMT_REASREQ	0x0020	/* reassociation request */
#define WI_STYPE_MGMT_REASRESP	0x0030	/* reassociation response */
#define WI_STYPE_MGMT_PROBEREQ	0x0040	/* probe request */
#define WI_STYPE_MGMT_PROBERESP	0x0050	/* probe response */
#define WI_STYPE_MGMT_BEACON	0x0080	/* beacon */
#define WI_STYPE_MGMT_ATIM	0x0090	/* announcement traffic ind msg */
#define WI_STYPE_MGMT_DISAS	0x00A0	/* disassociation */
#define WI_STYPE_MGMT_AUTH	0x00B0	/* authentication */
#define WI_STYPE_MGMT_DEAUTH	0x00C0	/* deauthentication */

#define WI_STYPE_CTL_PSPOLL	0x00A0
#define WI_STYPE_CTL_RTS	0x00B0
#define WI_STYPE_CTL_CTS	0x00C0
#define WI_STYPE_CTL_ACK	0x00D0
#define WI_STYPE_CTL_CFEND	0x00E0
#define WI_STYPE_CTL_CFENDACK	0x00F0
#define WI_STYPE_CTL_CFENDCFACK	WI_STYPE_CTL_CFENDACK

#define WI_STYPE_DATA		0x0000
#define WI_STYPE_DATA_CFACK	0x0010
#define WI_STYPE_DATA_CFPOLL	0x0020
#define WI_STYPE_DATA_CFACKPOLL	0x0030
#define WI_STYPE_NULLFUNC	0x0040
#define WI_STYPE_CFACK		0x0050
#define WI_STYPE_CFPOLL		0x0060
#define WI_STYPE_CFACKPOLL	0x0070

struct wi_mgmt_hdr {
	u_int16_t		frame_ctl;
	u_int16_t		duration;
	u_int8_t		dst_addr[6];
	u_int8_t		src_addr[6];
	u_int8_t		bssid[6];
	u_int16_t		seq_ctl;
};

struct wi_counters {
	u_int32_t		wi_tx_unicast_frames;
	u_int32_t		wi_tx_multicast_frames;
	u_int32_t		wi_tx_fragments;
	u_int32_t		wi_tx_unicast_octets;
	u_int32_t		wi_tx_multicast_octets;
	u_int32_t		wi_tx_deferred_xmits;
	u_int32_t		wi_tx_single_retries;
	u_int32_t		wi_tx_multi_retries;
	u_int32_t		wi_tx_retry_limit;
	u_int32_t		wi_tx_discards;
	u_int32_t		wi_rx_unicast_frames;
	u_int32_t		wi_rx_multicast_frames;
	u_int32_t		wi_rx_fragments;
	u_int32_t		wi_rx_unicast_octets;
	u_int32_t		wi_rx_multicast_octets;
	u_int32_t		wi_rx_fcs_errors;
	u_int32_t		wi_rx_discards_nobuf;
	u_int32_t		wi_tx_discards_wrong_sa;
	u_int32_t		wi_rx_WEP_cant_decrypt;
	u_int32_t		wi_rx_msg_in_msg_frags;
	u_int32_t		wi_rx_msg_in_bad_msg_frags;
};

/*
 * These are all the LTV record types that we can read or write
 * from the WaveLAN. Not all of them are tremendously useful, but I
 * list as many as I know about here for completeness.
 */

#define WI_RID_DNLD_BUF		0xFD01
#define WI_RID_MEMSZ		0xFD02 /* memory size info (Lucent) */
#define WI_RID_PRI_IDENTITY	0xFD02 /* primary firmware ident (PRISM2) */
#define WI_RID_DOMAINS		0xFD11 /* List of intended regulatory domains */
#define WI_RID_CIS		0xFD13 /* CIS info */
#define WI_RID_COMMQUAL		0xFD43 /* Communications quality */
#define WI_RID_SCALETHRESH	0xFD46 /* Actual system scale thresholds */
#define WI_RID_PCF		0xFD87 /* PCF info */

/*
 * Network parameters, static configuration entities.
 */
#define	WI_RID_PORTTYPE		0xFC00 /* Connection control characteristics */
#define	WI_RID_MAC_NODE		0xFC01 /* MAC address of this station */
#define	WI_RID_DESIRED_SSID	0xFC02 /* Service Set ID for connection */
#define	WI_RID_OWN_CHNL		0xFC03 /* Comm channel for BSS creation */
#define	WI_RID_OWN_SSID		0xFC04 /* IBSS creation ID */
#define	WI_RID_OWN_ATIM_WIN	0xFC05 /* ATIM window time for IBSS creation */
#define	WI_RID_SYSTEM_SCALE	0xFC06 /* scale that specifies AP density */
#define	WI_RID_MAX_DATALEN	0xFC07 /* Max len of MAC frame body data */
#define	WI_RID_MAC_WDS		0xFC08 /* MAC addr of corresponding WDS node */
#define	WI_RID_PM_ENABLED	0xFC09 /* ESS power management enable */
#define	WI_RID_PM_EPS		0xFC0A /* PM EPS/PS mode */
#define	WI_RID_MCAST_RX		0xFC0B /* ESS PM mcast reception */
#define	WI_RID_MAX_SLEEP	0xFC0C /* max sleep time for ESS PM */
#define	WI_RID_HOLDOVER		0xFC0D /* holdover time for ESS PM */
#define	WI_RID_NODENAME		0xFC0E /* ID name of this node for diag */
#define	WI_RID_DTIM_PERIOD	0xFC10 /* beacon interval between DTIMs */
#define	WI_RID_WDS_ADDR1	0xFC11 /* port 1 MAC of WDS link node */
#define	WI_RID_WDS_ADDR2	0xFC12 /* port 1 MAC of WDS link node */
#define	WI_RID_WDS_ADDR3	0xFC13 /* port 1 MAC of WDS link node */
#define	WI_RID_WDS_ADDR4	0xFC14 /* port 1 MAC of WDS link node */
#define	WI_RID_WDS_ADDR5	0xFC15 /* port 1 MAC of WDS link node */
#define	WI_RID_WDS_ADDR6	0xFC16 /* port 1 MAC of WDS link node */
#define	WI_RID_MCAST_PM_BUF	0xFC17 /* PM buffering of mcast */
#define	WI_RID_ENCRYPTION	0xFC20 /* enable/disable WEP */
#define	WI_RID_AUTHTYPE		0xFC21 /* specify authentication type */
#define	WI_RID_SYMBOL_MANDATORYBSSID 0xFC21
#define	WI_RID_P2_TX_CRYPT_KEY	0xFC23
#define	WI_RID_P2_CRYPT_KEY0	0xFC24
#define	WI_RID_P2_CRYPT_KEY1	0xFC25
#define	WI_RID_MICROWAVE_OVEN	0xFC25 /* Microwave oven robustness */
#define	WI_RID_P2_CRYPT_KEY2	0xFC26
#define	WI_RID_P2_CRYPT_KEY3	0xFC27
#define	WI_RID_P2_ENCRYPTION	0xFC28
#define PRIVACY_INVOKED		0x01
#define EXCLUDE_UNENCRYPTED	0x02
#define HOST_ENCRYPT		0x10
#define IV_EVERY_FRAME		0x00
#define IV_EVERY10_FRAME	0x20
#define IV_EVERY50_FRAME	0x40
#define IV_EVERY100_FRAME	0x60
#define HOST_DECRYPT		0x80
#define	WI_RID_WEP_MAPTABLE	0xFC29
#define	WI_RID_CNFAUTHMODE	0xFC2A
#define	WI_RID_SYMBOL_KEYLENGTH	0xFC2B
#define	WI_RID_ROAMING_MODE	0xFC2D /* Roaming mode (1:firm,3:disable) */
#define WI_RID_CUR_BEACON_INT	0xFC33 /* beacon xmit time for BSS creation */
#define	WI_RID_ENH_SECURITY	0xFC43 /* hide SSID name (prism fw >= 1.6.3) */
#define WI_HIDESSID		0x01
#define WI_IGNPROBES		0x02
#define WI_HIDESSID_IGNPROBES	0x03
#define	WI_RID_DBM_ADJUST	0xFC46 /* Get DBM adjustment factor */
#define	WI_RID_SYMBOL_PREAMBLE	0xFC8C /* Enable/disable short preamble */
#define	WI_RID_P2_SHORT_PREAMBLE	0xFCB0 /* Short preamble support */
#define	WI_RID_P2_EXCLUDE_LONG_PREAMBLE	0xFCB1 /* Don't send long preamble */
#define	WI_RID_BASIC_RATE	0xFCB3
#define	WI_RID_SUPPORT_RATE	0xFCB4
#define WI_RID_SYMBOL_DIVERSITY	0xFC87 /* Symbol antenna diversity */
#define WI_RID_SYMBOL_BASIC_RATE 0xFC90

/*
 * Network parameters, dynamic configuration entities
 */
#define WI_RID_MCAST_LIST	0xFC80 /* list of multicast addrs (up to 16) */
#define WI_RID_CREATE_IBSS	0xFC81 /* create IBSS */
#define WI_RID_FRAG_THRESH	0xFC82 /* frag len, unicast msg xmit */
#define WI_RID_RTS_THRESH	0xFC83 /* frame len for RTS/CTS handshake */
#define WI_RID_TX_RATE		0xFC84 /* data rate for message xmit */
#define WI_RID_PROMISC		0xFC85 /* enable promisc mode */
#define WI_RID_FRAG_THRESH0	0xFC90
#define WI_RID_FRAG_THRESH1	0xFC91
#define WI_RID_FRAG_THRESH2	0xFC92
#define WI_RID_FRAG_THRESH3	0xFC93
#define WI_RID_FRAG_THRESH4	0xFC94
#define WI_RID_FRAG_THRESH5	0xFC95
#define WI_RID_FRAG_THRESH6	0xFC96
#define WI_RID_RTS_THRESH0	0xFC97
#define WI_RID_RTS_THRESH1	0xFC98
#define WI_RID_RTS_THRESH2	0xFC99
#define WI_RID_RTS_THRESH3	0xFC9A
#define WI_RID_RTS_THRESH4	0xFC9B
#define WI_RID_RTS_THRESH5	0xFC9C
#define WI_RID_RTS_THRESH6	0xFC9D
#define WI_RID_TX_RATE0		0xFC9E
#define WI_RID_TX_RATE1		0xFC9F
#define WI_RID_TX_RATE2		0xFCA0
#define WI_RID_TX_RATE3		0xFCA1
#define WI_RID_TX_RATE4		0xFCA2
#define WI_RID_TX_RATE5		0xFCA3
#define WI_RID_TX_RATE6		0xFCA4
#define WI_RID_DEFLT_CRYPT_KEYS	0xFCB0
#define WI_RID_TX_CRYPT_KEY	0xFCB1
#define WI_RID_TICK_TIME	0xFCE0 /* Auxiliary Timer tick interval */

struct wi_key {
	u_int16_t		wi_keylen;
	u_int8_t		wi_keydat[13];
};

#define	WI_NLTV_KEYS	4
struct wi_ltv_keys {
	u_int16_t		wi_len;
	u_int16_t		wi_type;
	struct wi_key		wi_keys[WI_NLTV_KEYS];
};

/*
 * NIC information
 */
#define WI_RID_FIRM_ID		0xFD02 /* Primary func firmware ID. */
#define WI_RID_PRI_SUP_RANGE	0xFD03 /* primary supplier compatibility */
#define WI_RID_CIF_ACT_RANGE	0xFD04 /* controller sup. compatibility */
#define WI_RID_SERIALNO		0xFD0A /* card serial number */
#define WI_RID_CARD_ID		0xFD0B /* card identification */
#define WI_RID_MFI_SUP_RANGE	0xFD0C /* modem supplier compatibility */
#define WI_RID_CFI_SUP_RANGE	0xFD0D /* controller sup. compatibility */
#define WI_RID_CHANNEL_LIST	0xFD10 /* allowed comm. frequencies. */
#define WI_RID_REG_DOMAINS	0xFD11 /* list of intended regulatory doms */
#define WI_RID_TEMP_TYPE	0xFD12 /* hw temp range code */
#define WI_RID_CIS		0xFD13 /* PC card info struct */
#define WI_RID_STA_IDENTITY	0xFD20 /* station funcs firmware ident */
#define WI_RID_STA_SUP_RANGE	0xFD21 /* station supplier compat */
#define WI_RID_MFI_ACT_RANGE	0xFD22
#define WI_RID_SYMBOL_IDENTITY	0xFD24 /* Symbol station firmware ident */
#define WI_RID_CFI_ACT_RANGE	0xFD33

/*
 * MAC information
 */
#define WI_RID_PORT_STAT	0xFD40 /* actual MAC port con control stat */
#define WI_RID_CURRENT_SSID	0xFD41 /* ID of actually connected SS */
#define WI_RID_CURRENT_BSSID	0xFD42 /* ID of actually connected BSS */
#define WI_RID_COMMS_QUALITY	0xFD43 /* quality of BSS connection */
#define WI_RID_CUR_TX_RATE	0xFD44 /* current TX rate */
#define WI_RID_OWN_BEACON_INT	0xFD45 /* beacon xmit time for BSS creation */
#define WI_RID_CUR_SCALE_THRESH	0xFD46 /* actual system scale thresh setting */
#define WI_RID_PROT_RESP_TIME	0xFD47 /* time to wait for resp to req msg */
#define WI_RID_SHORT_RTR_LIM	0xFD48 /* max tx attempts for short frames */
#define WI_RID_LONG_RTS_LIM	0xFD49 /* max tx attempts for long frames */
#define WI_RID_MAX_TX_LIFE	0xFD4A /* max tx frame handling duration */
#define WI_RID_MAX_RX_LIFE	0xFD4B /* max rx frame handling duration */
#define WI_RID_CF_POLL		0xFD4C /* contention free pollable ind */
#define WI_RID_AUTH_ALGS	0xFD4D /* auth algorithms available */
#define WI_RID_AUTH_TYPE	0xFD4E /* available auth types */
#define WI_RID_WEP_AVAIL	0xFD4F /* WEP privacy option available */
#define WI_RID_CUR_TX_RATE1	0xFD80
#define WI_RID_CUR_TX_RATE2	0xFD81
#define WI_RID_CUR_TX_RATE3	0xFD82
#define WI_RID_CUR_TX_RATE4	0xFD83
#define WI_RID_CUR_TX_RATE5	0xFD84
#define WI_RID_CUR_TX_RATE6	0xFD85
#define WI_RID_OWN_MAC		0xFD86 /* unique local MAC addr */
#define WI_RID_PCI_INFO		0xFD87 /* point coordination func cap */

/*
 * Scan Information
 */
#define WI_RID_BCAST_SCAN_REQ	0xFCAB /* Broadcast Scan request (Symbol) */
#define BSCAN_5SEC		0x01
#define BSCAN_ONETIME		0x02
#define BSCAN_PASSIVE		0x40
#define BSCAN_BCAST		0x80
#define WI_RID_SCAN_REQ		0xFCE1 /* Scan request (STA only) */
#define WI_RID_JOIN_REQ		0xFCE2 /* Join request (STA only) */
#define WI_RID_AUTH_STATION	0xFCE3 /* Authenticates Station (AP) */
#define WI_RID_CHANNEL_REQ	0xFCE4 /* Channel Information Request (AP) */
#define WI_RID_SCAN_RES		0xFD88 /* Scan Results Table */

struct wi_apinfo {
	int			scanreason;	/* ScanReason */
	char			bssid[6];	/* BSSID (mac address) */
	int			channel;	/* Channel */
	int			signal;		/* Signal level */
	int			noise;		/* Average Noise Level*/
	int			quality;	/* Quality */
	int			namelen;	/* Length of SSID string */
	char			name[32];	/* SSID string */
	int			capinfo;	/* Capability info. */ 
	int			interval;	/* BSS Beacon Interval */
	int			rate;		/* Data Rate */
};

/*
 * The following do not get passed down to the card, they are used
 * by wicontrol to modify the behavior of the driver (use WEP in software or
 * firmware, use alternate cryptographic algorithms, etc.)  I'm calling them
 * "fake record IDs."
 */
#define	WI_FRID_CRYPTO_ALG	0xFCE3
#define	WI_FRID_DEBUGGING	0xFCE4

/*
 * bsd-airtools v0.2 - source-mods v0.2 [common.h]
 * by h1kari - (c) Dachb0den Labs 2001
 */

/*
 * Copyright (c) 2001 Dachb0den Labs.
 *      David Hulton <h1kari@@dachb0den.com>.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by David Hulton.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY David Hulton AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL David Hulton OR THE VOICES IN HIS HEAD
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * standard hermes receive frame used by wavelan/prism2 cards
 */
struct wi_rx_frame {
	/*
	 * hermes prefix header. supplies information on the current status of
	 * the network and various other statistics gathered from the
	 * management/control frames as used internally.
	 */
	u_int16_t	wi_status;
	u_int16_t	wi_ts0;
	u_int16_t	wi_ts1;
	u_int8_t	wi_silence;
	u_int8_t	wi_signal;
	u_int8_t	wi_rate;
	u_int8_t	wi_rx_flow;
	u_int16_t	wi_rsvd0;
	u_int16_t	wi_rsvd1;
	/*
	 * standard 80211 frame header. all packets have to use this header as
	 * per the AN9900 from intersil, even management/control. for
	 * management packets, they just threw the header into the data field,
	 * but for control packets the headers are lost in translation and
	 * therefore not all control packet info can be displayed.
	 */
	u_int16_t	wi_frame_ctl;
	u_int16_t	wi_id;
	u_int8_t	wi_addr1[6];
	u_int8_t	wi_addr2[6];
	u_int8_t	wi_addr3[6];
	u_int16_t	wi_seq_ctl;
	u_int8_t	wi_addr4[6];
	u_int16_t	wi_dat_len;
	/*
	 * another wierdity with the drivers. they append a 802.3 header which
	 * is somewhat redundant, since all the same data is provided in the
	 * 802.11 header.
	 */
	u_int8_t	wi_dst_addr[6];
	u_int8_t	wi_src_addr[6];
	u_int16_t	wi_len;
};
#define WI_DATA_HDRLEN		WI_802_11_OFFSET
#define WI_MGMT_HDRLEN		WI_802_11_OFFSET_RAW
#define WI_CTL_HDRLEN		WI_802_11_OFFSET_RAW


/*
 * all data packets have a snap (sub-network access protocol) header that
 * isn't entirely defined, but added for ethernet compatibility.
 */
struct wi_snap_frame {
	u_int16_t	wi_dat[3];
	u_int16_t	wi_type;
};


/*
 * management frame headers
 * note: all management frames consist of a static header and variable length
 * fields.
 */

/*
 * variable length field structure
 */
struct wi_mgmt_var_hdr {
	u_int8_t	wi_code;
	u_int8_t	wi_len;
	u_int8_t	wi_data[256];
};

/*
 * management beacon frame prefix
 */
struct wi_mgmt_beacon_hdr {
	u_int32_t	wi_ts0;
	u_int32_t	wi_ts1;
	u_int16_t	wi_interval;
	u_int16_t	wi_capinfo;
};

/*
 * ibss announcement traffic indication message (atim) frame
 * note: no parameters
 */

/*
 * management disassociation frame
 */
struct wi_mgmt_disas_hdr {
	u_int16_t	wi_reason;
};

/*
 * management association request frame prefix
 */
struct wi_mgmt_asreq_hdr {
	u_int16_t	wi_capinfo;
	u_int16_t	wi_interval;
};

/*
 * management association response frame prefix
 */
struct wi_mgmt_asresp_hdr {
	u_int16_t	wi_capinfo;
	u_int16_t	wi_status;
	u_int16_t	wi_aid;
};

/*
 * management reassociation request frame prefix
 */
struct wi_mgmt_reasreq_hdr {
	u_int16_t	wi_capinfo;
	u_int16_t	wi_interval;
	u_int8_t	wi_currap[6];
};

/*
 * management reassociation response frame prefix
 */
struct wi_mgmt_reasresp_hdr {
	u_int16_t	wi_capinfo;
	u_int16_t	wi_status;
	u_int16_t	wi_aid;
};

/*
 * management probe request frame prefix
 * note: no static parameters, only variable length
 */

/*
 * management probe response frame prefix
 */
struct wi_mgmt_proberesp_hdr {
	u_int32_t	wi_ts0;
	u_int32_t	wi_ts1;
	u_int16_t	wi_interval;
	u_int16_t	wi_capinfo;
};

/*
 * management authentication frame prefix
 */
struct wi_mgmt_auth_hdr {
	u_int16_t	wi_algo;
	u_int16_t	wi_seq;
	u_int16_t	wi_status;
};

/*
 * management deauthentication frame
 */
struct wi_mgmt_deauth_hdr {
	u_int16_t	wi_reason;
};


/*
 * rid configuration register definitions
 */
#define WI_RID_PROCFRAME	0x3137 /* Return full frame information */
#define WI_RID_PRISM2		0x3138 /* tell if we're a prism2 card or not */


/*
 * 802.11 definitions
 */
#define WI_STAT_BADCRC		0x0001
#define WI_STAT_UNDECRYPTABLE	0x0002
#define WI_STAT_ERRSTAT		0x0003
#define WI_STAT_MAC_PORT	0x0700
#define WI_STAT_1042		0x2000
#define WI_STAT_TUNNEL		0x4000
#define WI_STAT_WMP_MSG		0x6000
#define WI_RXSTAT_MSG_TYPE	0xE000

#define WI_FCTL_OPT_MASK	0xFF00
#define WI_AID_SET		0xC000
#define WI_AID_MASK		0x3FFF
#define WI_SCTL_FRAGNUM_MASK	0x000F
#define WI_SCTL_SEQNUM_MASK	0xFFF0

#define WI_STAT_UNSPEC_FAIL	1
#define WI_STAT_CAPINFO_FAIL	10
#define WI_STAT_REAS_DENY	11
#define WI_STAT_ASSOC_DENY	12
#define WI_STAT_ALGO_FAIL	13
#define WI_STAT_SEQ_FAIL	14
#define WI_STAT_CHAL_FAIL	15
#define WI_STAT_TOUT_FAIL	16
#define WI_STAT_OVERL_DENY	17
#define WI_STAT_RATE_DENY	18

#define WI_FTYPE_MGMT		0x0000
#define WI_FTYPE_CTL		0x0004
#define WI_FTYPE_DATA		0x0008

#define WI_FCTL_VERS		0x0002
#define WI_FCTL_FTYPE		0x000C
#define WI_FCTL_STYPE		0x00F0
#define WI_FCTL_TODS		0x0100
#define WI_FCTL_FROMDS		0x0200
#define WI_FCTL_MOREFRAGS	0x0400
#define WI_FCTL_RETRY		0x0800
#define WI_FCTL_PM		0x1000
#define WI_FCTL_MOREDATA	0x2000
#define WI_FCTL_WEP		0x4000
#define WI_FCTL_ORDER		0x8000

#define WI_FCS_LEN		0x4 /* checksum length */


/*
 * management definitions
 */
#define WI_CAPINFO_ESS		0x01
#define WI_CAPINFO_IBSS		0x02
#define WI_CAPINFO_CFPOLL	0x04
#define WI_CAPINFO_CFPOLLREQ	0x08
#define WI_CAPINFO_PRIV		0x10

#define WI_REASON_UNSPEC	1
#define WI_REASON_AUTH_INVALID	2
#define WI_REASON_DEAUTH_LEAVE	3
#define WI_REASON_DISAS_INACT	4
#define WI_REASON_DISAS_OVERL	5
#define WI_REASON_CLASS2	6
#define WI_REASON_CLASS3	7
#define WI_REASON_DISAS_LEAVE	8
#define WI_REASON_NOAUTH	9

#define WI_VAR_SSID		0
#define WI_VAR_SRATES		1
#define WI_VAR_FH		2
#define WI_VAR_DS		3
#define WI_VAR_CF		4
#define WI_VAR_TIM		5
#define WI_VAR_IBSS		6
#define WI_VAR_CHAL		16

#define WI_VAR_SRATES_MASK	0x7F

/*
 * ap scanning structures
 */
struct wi_scan_res {
	u_int16_t	wi_chan;
	u_int16_t	wi_noise;
	u_int16_t	wi_signal;
	u_int8_t	wi_bssid[6];
	u_int16_t	wi_interval;
	u_int16_t	wi_capinfo;
	u_int16_t	wi_ssid_len;
	u_int8_t	wi_ssid[32];
	u_int8_t	wi_srates[10];
	u_int8_t	wi_rate;
	u_int8_t	wi_rsvd;
};
#define WI_WAVELAN_RES_1M	0x0a
#define WI_WAVELAN_RES_2M	0x14
#define WI_WAVELAN_RES_5M	0x37
#define WI_WAVELAN_RES_11M	0x6e

#define WI_WAVELAN_RES_SIZE	50
#define WI_WAVELAN_RES_TIMEOUT	((hz / 10) * 2)		/* 200ms */
#define WI_WAVELAN_RES_TRIES	100

struct wi_scan_p2_hdr {
	u_int16_t	wi_rsvd;
	u_int16_t	wi_reason;
};
#define WI_PRISM2_RES_SIZE	62

/*
 * prism2 debug mode definitions
 */
#define SIOCSPRISM2DEBUG	_IOW('i', 137, struct ifreq)
#define SIOCGPRISM2DEBUG	_IOWR('i', 138, struct ifreq)

#define WI_CMD_DEBUG		0x0038 /* prism2 debug */

#define WI_DEBUG_RESET		0x00
#define WI_DEBUG_INIT		0x01
#define WI_DEBUG_SLEEP		0x02
#define WI_DEBUG_WAKE		0x03
#define WI_DEBUG_CHAN		0x08
#define WI_DEBUG_DELAYSUPP	0x09
#define WI_DEBUG_TXSUPP		0x0A
#define WI_DEBUG_MONITOR	0x0B
#define WI_DEBUG_LEDTEST	0x0C
#define WI_DEBUG_CONTTX		0x0E
#define WI_DEBUG_STOPTEST	0x0F
#define WI_DEBUG_CONTRX		0x10
#define WI_DEBUG_SIGSTATE	0x11
#define WI_DEBUG_CALENABLE	0x13
#define WI_DEBUG_CONFBITS	0x15

/*
 * Modem information
 */
#define WI_RID_PHY_TYPE		0xFDC0 /* phys layer type indication */
#define WI_RID_CURRENT_CHAN	0xFDC1 /* current frequency */
#define WI_RID_PWR_STATE	0xFDC2 /* pwr consumption status */
#define WI_RID_CCA_MODE		0xFDC3 /* clear chan assess mode indication */
#define WI_RID_CCA_TIME		0xFDC4 /* clear chan assess time */
#define WI_RID_MAC_PROC_DELAY	0xFDC5 /* MAC processing delay time */
#define WI_RID_DATA_RATES	0xFDC6 /* supported data rates */

/*
 * Values for supported crypto algorithms:
 */
#define	WI_CRYPTO_FIRMWARE_WEP		0x00 /* default */
#define	WI_CRYPTO_SOFTWARE_WEP		0x01

/* Firmware types */
#define	WI_NOTYPE	0
#define	WI_LUCENT	1
#define	WI_INTERSIL	2
#define	WI_SYMBOL	3

/* Card identities */
#define	WI_NIC_LUCENT		0x0001

#define	WI_NIC_SONY		0x0002

#define	WI_NIC_LUCENT_EMB	0x0005

#define	WI_NIC_EVB2		0x8000

#define	WI_NIC_HWB3763		0x8001

#define	WI_NIC_HWB3163		0x8002

#define	WI_NIC_HWB3163B		0x8003

#define	WI_NIC_EVB3		0x8004

#define	WI_NIC_HWB1153		0x8007

#define	WI_NIC_P2_SST		0x8008	/* Prism2 with SST flush */

#define	WI_NIC_EVB2_SST		0x8009

#define	WI_NIC_3842_EVA		0x800A	/* 3842 Evaluation Board */

#define	WI_NIC_3842_PCMCIA_AMD	0x800B	/* Prism2.5 PCMCIA */
#define	WI_NIC_3842_PCMCIA_SST	0x800C
#define	WI_NIC_3842_PCMCIA_ATL	0x800D
#define	WI_NIC_3842_PCMCIA_ATS	0x800E

#define WI_NIC_3842_USB_AMD	0x800f	/* Prism2.5 USB */
#define WI_NIC_3842_USB_SST	0x8010
#define WI_NIC_3842_USB_ATL	0x8011

#define	WI_NIC_3842_MINI_AMD	0x8012	/* Prism2.5 Mini-PCI */
#define	WI_NIC_3842_MINI_SST	0x8013
#define	WI_NIC_3842_MINI_ATL	0x8014
#define	WI_NIC_3842_MINI_ATS	0x8015

#define	WI_NIC_3842_PCI_AMD	0x8016	/* Prism2.5 PCI-bridge */
#define	WI_NIC_3842_PCI_SST	0x8017
#define	WI_NIC_3842_PCI_ATL	0x8018
#define	WI_NIC_3842_PCI_ATS	0x8019

#define	WI_NIC_P3_PCMCIA_AMD	0x801A	/* Prism3 PCMCIA */
#define	WI_NIC_P3_PCMCIA_SST	0x801B
#define	WI_NIC_P3_PCMCIA_ATL	0x801C
#define	WI_NIC_P3_PCMCIA_ATS	0x801D

#define WI_NIC_3842_USB_AMD_2	0x801E	/* Prism2.5 USB */
#define WI_NIC_3842_USB_SST_2	0x801F
#define WI_NIC_3842_USB_ATL_2	0x8020

#define	WI_NIC_P3_MINI_AMD	0x8021	/* Prism3 Mini-PCI */
#define	WI_NIC_P3_MINI_SST	0x8022
#define	WI_NIC_P3_MINI_ATL	0x8023
#define	WI_NIC_P3_MINI_ATS	0x8024

#define WI_NIC_P3_USB		0x8025 	/* Prism3 USB */
#define	WI_NIC_P3_USB_NETGEAR	0x8026
#define WI_NIC_P3_USB_2		0x8027

struct wi_card_ident {
	const u_int16_t	card_id;
	const char	*card_name;
	const u_int8_t	firm_type;
};

#define WI_CARD_IDS							\
	{								\
		WI_NIC_LUCENT,						\
		"Lucent WaveLAN/IEEE",					\
		WI_LUCENT						\
	}, {								\
		WI_NIC_SONY,						\
		"Sony WaveLAN/IEEE",					\
		WI_LUCENT						\
	}, {								\
		WI_NIC_LUCENT_EMB,					\
		"Lucent Embedded WaveLAN/IEEE",				\
		WI_LUCENT						\
	}, {								\
		WI_NIC_EVB2,						\
		"PRISM2 HFA3841(EVB2)",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_HWB3763,						\
		"PRISM2 HWB3763 rev.B",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_HWB3163,						\
		"PRISM2 HWB3163 rev.A",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_HWB3163B,					\
		"PRISM2 HWB3163 rev.B",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_EVB3,						\
		"PRISM2 HFA3842(EVB3)",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_HWB1153,						\
		"PRISM1 HWB1153",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P2_SST,						\
		"PRISM2 HWB3163 SST-flash",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_EVB2_SST,					\
		"PRISM2 HWB3163(EVB2) SST-flash",			\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_EVA,					\
		"PRISM2 HFA3842(EVAL)",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCMCIA_AMD,					\
		"PRISM2.5 ISL3873",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCMCIA_SST,					\
		"PRISM2.5 ISL3873",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCMCIA_ATL,					\
		"PRISM2.5 ISL3873",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCMCIA_ATS,					\
		"PRISM2.5 ISL3873",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_USB_AMD,					\
		"PRISM2.5 USB",						\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_USB_SST,					\
		"PRISM2.5 USB",						\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_USB_ATL,					\
		"PRISM2.5 USB",						\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_MINI_AMD,					\
		"PRISM2.5 ISL3874A(Mini-PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_MINI_SST,					\
		"PRISM2.5 ISL3874A(Mini-PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_MINI_ATL,					\
		"PRISM2.5 ISL3874A(Mini-PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_MINI_ATS,					\
		"PRISM2.5 ISL3874A(Mini-PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCI_AMD,					\
		"PRISM2.5 ISL3874A(PCI-bridge)",			\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCI_SST,					\
		"PRISM2.5 ISL3874A(PCI-bridge)",			\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCI_ATS,					\
		"PRISM2.5 ISL3874A(PCI-bridge)",			\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCI_ATL,					\
		"PRISM2.5 ISL3874A(PCI-bridge)",			\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_PCMCIA_AMD,					\
		"PRISM3 ISL37300P",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_PCMCIA_SST,					\
		"PRISM3 ISL37300P",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_PCMCIA_ATL,					\
		"PRISM3 ISL37300P",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_PCMCIA_ATS,					\
		"PRISM3 ISL37300P",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_USB_AMD_2,					\
		"PRISM2.5 USB",						\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_USB_SST_2,					\
		"PRISM2.5 USB",						\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_USB_ATL_2,					\
		"PRISM2.5 USB",						\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_MINI_AMD,					\
		"PRISM3 ISL37300P(PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_MINI_SST,					\
		"PRISM3 ISL37300P(PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_MINI_ATL,					\
		"PRISM3 ISL37300P(PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_MINI_ATS,					\
		"PRISM3 ISL37300P(PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_USB,						\
		"PRISM3 (USB)",						\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_USB_NETGEAR,					\
		"PRISM3 (USB)",						\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_USB_2,						\
		"PRISM3 (USB)",						\
		WI_INTERSIL						\
	}, {								\
		0,							\
		NULL,							\
		WI_NOTYPE						\
	}

#endif /* _IF_WI_IEEE_H */
@


1.29
log
@add the net80211 hostap options "nwflag hidenwid" for hidden SSID mode
and "nwflag nobridge" to prevent inter-station communications.
"hidenwid" will also work with wi(4) to replace the old -E 3 option of
wicontrol.

ok damien@@ jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.28 2006/06/27 09:48:02 reyk Exp $	*/
d48 2
a49 2
#define SIOCSWAVELAN	_IOW('i', 249, struct ifreq)	/* wavelan set op */
#define SIOCGWAVELAN	_IOWR('i', 250, struct ifreq)	/* wavelan get op */
@


1.28
log
@add some more net80211 compatibility glue:
- support scanning and node listing ("ifconfig -M"). this will replace
wicontrol -L in station mode and wicontrol -l in hostap mode.
- allow to print the BSSID

tested by quite a few people
ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.27 2005/12/13 10:30:35 jsg Exp $	*/
d229 3
@


1.27
log
@Correct typos in comments. From pedro la peu.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.26 2005/11/19 07:04:52 jsg Exp $	*/
d668 5
d674 2
a681 1

@


1.26
log
@Add a few more Prism USB Component IDs.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.25 2005/10/12 18:43:07 deraadt Exp $	*/
d295 1
a295 1
#define WI_RID_REG_DOMAINS	0xFD11 /* list of intendted regulatory doms */
d313 1
a313 1
#define WI_RID_CUR_SCALE_THRESH	0xFD46 /* actual system scane thresh setting */
@


1.25
log
@unconflict (one day legacy) wavelan ioctl's from the vlan ioctl's
so that vlan's can be done on wavelan (if you are crazy enough to want
to).  spotted by fgs, but my fix, ok a few people
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.24 2004/06/22 20:51:01 millert Exp $	*/
d754 4
d773 4
d782 3
a784 1
#define	WI_NIC_P3_USB_NETGEAR	0x8026 	/* Prism3 USB */
d858 12
d918 12
d946 4
d951 4
@


1.24
log
@Use SIOCSIFGENERIC and SIOCGIFGENERIC for SIOCSWAVELAN and SIOCGWAVELAN
instead of SIOCSIFASYNCMAP and SIOCGIFASYNCMAP.  Needed for upcoming
802.11 framework.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.23 2004/06/22 20:48:00 millert Exp $	*/
d48 2
a49 7
#ifndef SIOCSWAVELAN
#define SIOCSWAVELAN	SIOCSIFGENERIC
#endif

#ifndef SIOCGWAVELAN
#define SIOCGWAVELAN	SIOCGIFGENERIC
#endif
@


1.23
log
@The Prism device driver's manual makes a distinction in naming of
config comands and other types but we don't so remove the CNF_ from
WI_RID_CNF_ENH_SECURITY and WI_RID_CNF_DBM_ADJUST for consistency
and compat with Net and Free.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.22 2004/03/18 16:16:10 millert Exp $	*/
a48 1
#ifdef __FreeBSD__
a49 3
#else	/* !__FreeBSD__ */
#define SIOCSWAVELAN	SIOCSIFASYNCMAP
#endif	/* __FreeBSD__ */
a52 1
#ifdef __FreeBSD__
a53 3
#else	/* !__FreeBSD__ */
#define SIOCGWAVELAN	SIOCGIFASYNCMAP
#endif	/* __FreeBSD__ */
@


1.22
log
@Starting with Prism firmware version 1.6.3, HostAP supports an
enhanced security mode whereby the SSID can be hidden from snoopers.
Ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.21 2004/03/05 20:39:48 millert Exp $	*/
d241 2
a242 2
#define	WI_RID_CNF_ENH_SECURITY	0xFC43 /* hide SSID name (prism fw >= 1.6.3) */
#define	WI_RID_CNF_DBM_ADJUST	0xFC46 /* Get DBM adjustment factor */
@


1.21
log
@Remove duplicate defines.  BSD airtools uses WI_STYPE_CTL_CFENDCFACK
instead of WI_STYPE_CTL_CFENDACK so for now, just
"#define WI_STYPE_CTL_CFENDCFACK WI_STYPE_CTL_CFENDACK"
mickey@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.20 2004/03/02 21:55:07 millert Exp $	*/
d241 1
@


1.20
log
@Make HostAP work Prism cards with newer firmware (1.7.0 and higher).
Accept probe packets that Lucent cards send when the associated AP
disapears; this speeds up reassocication with those cards.  Don't
advertise HostAP as being available for firmware 1.4.2.  I added a
note about this in the man pages a while ago but forgot to update
the driver itself.  OK mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.19 2003/10/26 15:34:15 drahn Exp $	*/
d133 1
a636 12
#define WI_STYPE_MGMT_ASREQ	0x0000
#define WI_STYPE_MGMT_ASRESP	0x0010
#define WI_STYPE_MGMT_REASREQ	0x0020
#define WI_STYPE_MGMT_REASRESP	0x0030
#define WI_STYPE_MGMT_PROBEREQ	0x0040
#define WI_STYPE_MGMT_PROBERESP	0x0050
#define WI_STYPE_MGMT_BEACON	0x0080
#define WI_STYPE_MGMT_ATIM	0x0090
#define WI_STYPE_MGMT_DISAS	0x00A0
#define WI_STYPE_MGMT_AUTH	0x00B0
#define WI_STYPE_MGMT_DEAUTH	0x00C0

a662 12


/*
 * control definitions
 */
#define WI_STYPE_CTL_PSPOLL	0x00A0
#define WI_STYPE_CTL_RTS	0x00B0
#define WI_STYPE_CTL_CTS	0x00C0
#define WI_STYPE_CTL_ACK	0x00D0
#define WI_STYPE_CTL_CFEND	0x00E0
#define WI_STYPE_CTL_CFENDCFACK	0x00F0

@


1.19
log
@Driver for PRISM 2.5/3 based (wifi) USB adapters. This is a work in progress,
it does not yet handle bulk data copies or hostap mode. Only one model
currently supported, however driver may support other PRISM based adapters.
ok millert@@ fgsch@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.18 2003/10/21 18:58:49 jmc Exp $	*/
d133 9
@


1.18
log
@typos from Tom Cosgrove;

Tom: I did not commit a couple of your changes.

i did not include some punctuation fixes (full stops, etc.)
mnemorable -> mnemonic: i decided memorable was probably better
instrunctions -> instruction: i kept the plural
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.17 2003/08/24 12:23:57 fgsch Exp $	*/
d800 2
d936 4
@


1.17
log
@defines and struct for the ieee80211 framework; deraadt@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.15 2002/10/22 19:48:22 millert Exp $	*/
d169 1
a169 1
 * from the WaveLAN. Not all of them are temendously useful, but I
d296 1
a296 1
#define WI_RID_CHANNEL_LIST	0xFD10 /* allowd comm. frequencies. */
d323 1
a323 1
#define WI_RID_AUTH_TYPE	0xFD4E /* availanle auth types */
d457 1
a457 1
 * isn't entirely definied, but added for ethernet compatibility.
@


1.16
log
@Add an option to use software WEP now that we have a software decrypt
function.  Can be useful for cards that only support 40-bit WEP or
where the card firmware lacks weak IVs avoidance.  Prism/Symbol only.
In the future this will be expanded to support proposed WEP replacements.
Based on code from Jamison Adcock.
@
text
@d86 2
d230 1
d347 14
@


1.15
log
@Make wi_keydat in struct wi_key 13 bytes, not 14.  This is not a
NUL-terminated string and 13 bytes is what you need for a 104-bit
WEP key.  This fixes an off-by-one comparison in wi_set_nwkey().
mickey@@ OK.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.14 2002/10/11 13:31:49 millert Exp $	*/
d346 9
d720 6
@


1.14
log
@Sigh, we can't just put the htole16() in the WI_CARD_IDS macro
since gcc doesn't seem to evaluate htole16() of a constant at
compile time after all.  Noticed by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.13 2002/10/10 20:27:46 millert Exp $	*/
d273 1
a273 1
	u_int8_t		wi_keydat[14];
@


1.13
log
@Make wi_get_id() table driven, similar to NetBSD and FreeBSD but
make the table itself a #define so we can reuse it in wicontrol.
Also add a bunch of chip IDs from NetBSD/FreeBSD.
mickey@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.12 2002/10/04 02:29:36 millert Exp $	*/
d776 1
a776 1
		htole16(WI_NIC_LUCENT),					\
d780 1
a780 1
		htole16(WI_NIC_SONY),					\
d784 1
a784 1
		htole16(WI_NIC_LUCENT_EMB),				\
d788 1
a788 1
		htole16(WI_NIC_EVB2),					\
d792 1
a792 1
		htole16(WI_NIC_HWB3763),				\
d796 1
a796 1
		htole16(WI_NIC_HWB3163),				\
d800 1
a800 1
		htole16(WI_NIC_HWB3163B),				\
d804 1
a804 1
		htole16(WI_NIC_EVB3),					\
d808 1
a808 1
		htole16(WI_NIC_HWB1153),				\
d812 1
a812 1
		htole16(WI_NIC_P2_SST),					\
d816 1
a816 1
		htole16(WI_NIC_EVB2_SST),				\
d820 1
a820 1
		htole16(WI_NIC_3842_EVA),				\
d824 1
a824 1
		htole16(WI_NIC_3842_PCMCIA_AMD),			\
d828 1
a828 1
		htole16(WI_NIC_3842_PCMCIA_SST),			\
d832 1
a832 1
		htole16(WI_NIC_3842_PCMCIA_ATL),			\
d836 1
a836 1
		htole16(WI_NIC_3842_PCMCIA_ATS),			\
d840 1
a840 1
		htole16(WI_NIC_3842_MINI_AMD),				\
d844 1
a844 1
		htole16(WI_NIC_3842_MINI_SST),				\
d848 1
a848 1
		htole16(WI_NIC_3842_MINI_ATL),				\
d852 1
a852 1
		htole16(WI_NIC_3842_MINI_ATS),				\
d856 1
a856 1
		htole16(WI_NIC_3842_PCI_AMD),				\
d860 1
a860 1
		htole16(WI_NIC_3842_PCI_SST),				\
d864 1
a864 1
		htole16(WI_NIC_3842_PCI_ATS),				\
d868 1
a868 1
		htole16(WI_NIC_3842_PCI_ATL),				\
d872 1
a872 1
		htole16(WI_NIC_P3_PCMCIA_AMD),				\
d876 1
a876 1
		htole16(WI_NIC_P3_PCMCIA_SST),				\
d880 1
a880 1
		htole16(WI_NIC_P3_PCMCIA_ATL),				\
d884 1
a884 1
		htole16(WI_NIC_P3_PCMCIA_ATS),				\
d888 1
a888 1
		htole16(WI_NIC_P3_MINI_AMD),				\
d892 1
a892 1
		htole16(WI_NIC_P3_MINI_SST),				\
d896 1
a896 1
		htole16(WI_NIC_P3_MINI_ATL),				\
d900 1
a900 1
		htole16(WI_NIC_P3_MINI_ATS),				\
@


1.12
log
@Limit the TX key to a valid range; imp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.11 2002/09/10 08:21:35 fgsch Exp $	*/
d712 198
a909 1
#endif
@


1.11
log
@no need for pragma here.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.9 2002/06/14 21:34:59 todd Exp $	*/
d276 1
d280 1
a280 1
	struct wi_key		wi_keys[4];
@


1.10
log
@Add RID to get the DBM adjustment factor; imp@@freebsd.org
@
text
@a39 2
#pragma pack(1)

a709 2

#pragma pack()
@


1.9
log
@spelling; from Brian Poole <raj@@cerias.purdue.edu>
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.8 2002/06/02 16:11:41 millert Exp $	*/
d230 1
@


1.8
log
@BSD air-tools 0.2 patches from dachb0den labs; h1kari@@dachb0den.com
The common.h include file has been incorporated into if_wi_ieee.h
similar to what is in FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.7 2002/04/20 03:56:37 millert Exp $	*/
d383 1
a383 1
 * standard hermes recieve frame used by wavelan/prism2 cards
@


1.7
log
@Correct the value for WI_RID_SYMBOL_PREAMBLE and add
WI_RID_P2_SHORT_PREAMBLE and WI_RID_P2_EXCLUDE_LONG_PREAMBLE.
Unforturnately, the Prism2 preamble RIDs conflict with the Lucent
WEP RIDs (and they don't seem to behave as I would expect anyway).
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.6 2002/04/06 23:48:38 millert Exp $	*/
a270 2
#define WI_RID_SCAN_REQ		0xFCE1
#define WI_RID_JOIN_REQ		0xFCE2
d330 370
@


1.6
log
@Add support for setting antenna diversity on Symbol cards.
Also add some more Symbol-specific RID values I noticed in the
Linux orinoco driver.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.5 2002/04/06 20:31:56 millert Exp $	*/
a228 1
#define	WI_RID_SYMBOL_PREAMBLE	0xFC2C /* Enable/disable short preamble */
d230 3
@


1.5
log
@Add support for Symbol cards and printing of the primary station
firmware version.  Adapted from NetBSD and the Linux orinoco driver.
The Symbol firmware requires that we do a COR soft reset before
initializing the card in wi_reset().  Also, setting WI_RID_ROAMING_MODE
caused the Symbol card to go into a strange (non-working) mode with
firmware 2.x.x.

There are some other Symbol additions/oddities that will need to be
addressed in the future.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.4 2002/03/28 18:21:06 mickey Exp $	*/
d210 1
d228 2
d233 2
@


1.4
log
@basic host-ap implementation, more work is needed; from Thomas Skibo <skibo@@pacbell.net>; millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.3 2001/06/07 18:51:59 millert Exp $	*/
d174 2
a175 1
#define WI_RID_MEMSZ		0xFD02
d217 8
d295 1
@


1.3
log
@Kill #define duplicates between if_wireg.h and if_wi_ieee.h
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.2 2001/06/07 04:58:20 mickey Exp $	*/
d34 1
a34 1
 *	From: if_wavelan_ieee.h,v 1.1 1999/05/05 07:36:50 wpaul Exp $
d40 2
d87 1
d127 7
d217 1
a217 1
#define	WI_RID_AUTH_CNTL	0xFC2A
d326 2
@


1.3.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d34 1
a34 1
 *	From: if_wavelan_ieee.h,v 1.5.2.1 2001/07/04 00:12:34 brooks Exp $
a84 1
#define	WI_RID_MONITOR_MODE	0x0500
a123 7
#define WI_STYPE_CTL_PSPOLL	0x00A0
#define WI_STYPE_CTL_RTS	0x00B0
#define WI_STYPE_CTL_CTS	0x00C0
#define WI_STYPE_CTL_ACK	0x00D0
#define WI_STYPE_CTL_CFEND	0x00E0
#define WI_STYPE_CTL_CFENDACK	0x00F0

d164 1
a164 2
#define WI_RID_MEMSZ		0xFD02 /* memory size info (Lucent) */
#define WI_RID_PRI_IDENTITY	0xFD02 /* primary firmware ident (PRISM2) */
a198 1
#define	WI_RID_SYMBOL_MANDATORYBSSID 0xFC21
a205 8
#define PRIVACY_INVOKED		0x01
#define EXCLUDE_UNENCRYPTED	0x02
#define HOST_ENCRYPT		0x10
#define IV_EVERY_FRAME		0x00
#define IV_EVERY10_FRAME	0x20
#define IV_EVERY50_FRAME	0x40
#define IV_EVERY100_FRAME	0x60
#define HOST_DECRYPT		0x80
d207 1
a207 2
#define	WI_RID_CNFAUTHMODE	0xFC2A
#define	WI_RID_SYMBOL_KEYLENGTH	0xFC2B
a208 4
#define	WI_RID_CNF_DBM_ADJUST	0xFC46 /* Get DBM adjustment factor */
#define	WI_RID_SYMBOL_PREAMBLE	0xFC8C /* Enable/disable short preamble */
#define	WI_RID_P2_SHORT_PREAMBLE	0xFCB0 /* Short preamble support */
#define	WI_RID_P2_EXCLUDE_LONG_PREAMBLE	0xFCB1 /* Don't send long preamble */
a210 2
#define WI_RID_SYMBOL_DIVERSITY	0xFC87 /* Symbol antenna diversity */
#define WI_RID_SYMBOL_BASIC_RATE 0xFC90
d245 2
d250 1
a250 1
	u_int8_t		wi_keydat[13];
a252 1
#define	WI_NLTV_KEYS	4
d256 1
a256 1
	struct wi_key		wi_keys[WI_NLTV_KEYS];
a275 1
#define WI_RID_SYMBOL_IDENTITY	0xFD24 /* Symbol station firmware ident */
a306 379
 * Scan Information
 */
#define WI_RID_BCAST_SCAN_REQ	0xFCAB /* Broadcast Scan request (Symbol) */
#define BSCAN_5SEC		0x01
#define BSCAN_ONETIME		0x02
#define BSCAN_PASSIVE		0x40
#define BSCAN_BCAST		0x80
#define WI_RID_SCAN_REQ		0xFCE1 /* Scan request (STA only) */
#define WI_RID_JOIN_REQ		0xFCE2 /* Join request (STA only) */
#define WI_RID_AUTH_STATION	0xFCE3 /* Authenticates Station (AP) */
#define WI_RID_CHANNEL_REQ	0xFCE4 /* Channel Information Request (AP) */
#define WI_RID_SCAN_RES		0xFD88 /* Scan Results Table */

/*
 * The following do not get passed down to the card, they are used
 * by wicontrol to modify the behavior of the driver (use WEP in software or
 * firmware, use alternate cryptographic algorithms, etc.)  I'm calling them
 * "fake record IDs."
 */
#define	WI_FRID_CRYPTO_ALG	0xFCE3
#define	WI_FRID_DEBUGGING	0xFCE4

/*
 * bsd-airtools v0.2 - source-mods v0.2 [common.h]
 * by h1kari - (c) Dachb0den Labs 2001
 */

/*
 * Copyright (c) 2001 Dachb0den Labs.
 *      David Hulton <h1kari@@dachb0den.com>.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by David Hulton.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY David Hulton AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL David Hulton OR THE VOICES IN HIS HEAD
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * standard hermes receive frame used by wavelan/prism2 cards
 */
struct wi_rx_frame {
	/*
	 * hermes prefix header. supplies information on the current status of
	 * the network and various other statistics gathered from the
	 * management/control frames as used internally.
	 */
	u_int16_t	wi_status;
	u_int16_t	wi_ts0;
	u_int16_t	wi_ts1;
	u_int8_t	wi_silence;
	u_int8_t	wi_signal;
	u_int8_t	wi_rate;
	u_int8_t	wi_rx_flow;
	u_int16_t	wi_rsvd0;
	u_int16_t	wi_rsvd1;
	/*
	 * standard 80211 frame header. all packets have to use this header as
	 * per the AN9900 from intersil, even management/control. for
	 * management packets, they just threw the header into the data field,
	 * but for control packets the headers are lost in translation and
	 * therefore not all control packet info can be displayed.
	 */
	u_int16_t	wi_frame_ctl;
	u_int16_t	wi_id;
	u_int8_t	wi_addr1[6];
	u_int8_t	wi_addr2[6];
	u_int8_t	wi_addr3[6];
	u_int16_t	wi_seq_ctl;
	u_int8_t	wi_addr4[6];
	u_int16_t	wi_dat_len;
	/*
	 * another wierdity with the drivers. they append a 802.3 header which
	 * is somewhat redundant, since all the same data is provided in the
	 * 802.11 header.
	 */
	u_int8_t	wi_dst_addr[6];
	u_int8_t	wi_src_addr[6];
	u_int16_t	wi_len;
};
#define WI_DATA_HDRLEN		WI_802_11_OFFSET
#define WI_MGMT_HDRLEN		WI_802_11_OFFSET_RAW
#define WI_CTL_HDRLEN		WI_802_11_OFFSET_RAW


/*
 * all data packets have a snap (sub-network access protocol) header that
 * isn't entirely definied, but added for ethernet compatibility.
 */
struct wi_snap_frame {
	u_int16_t	wi_dat[3];
	u_int16_t	wi_type;
};


/*
 * management frame headers
 * note: all management frames consist of a static header and variable length
 * fields.
 */

/*
 * variable length field structure
 */
struct wi_mgmt_var_hdr {
	u_int8_t	wi_code;
	u_int8_t	wi_len;
	u_int8_t	wi_data[256];
};

/*
 * management beacon frame prefix
 */
struct wi_mgmt_beacon_hdr {
	u_int32_t	wi_ts0;
	u_int32_t	wi_ts1;
	u_int16_t	wi_interval;
	u_int16_t	wi_capinfo;
};

/*
 * ibss announcement traffic indication message (atim) frame
 * note: no parameters
 */

/*
 * management disassociation frame
 */
struct wi_mgmt_disas_hdr {
	u_int16_t	wi_reason;
};

/*
 * management association request frame prefix
 */
struct wi_mgmt_asreq_hdr {
	u_int16_t	wi_capinfo;
	u_int16_t	wi_interval;
};

/*
 * management association response frame prefix
 */
struct wi_mgmt_asresp_hdr {
	u_int16_t	wi_capinfo;
	u_int16_t	wi_status;
	u_int16_t	wi_aid;
};

/*
 * management reassociation request frame prefix
 */
struct wi_mgmt_reasreq_hdr {
	u_int16_t	wi_capinfo;
	u_int16_t	wi_interval;
	u_int8_t	wi_currap[6];
};

/*
 * management reassociation response frame prefix
 */
struct wi_mgmt_reasresp_hdr {
	u_int16_t	wi_capinfo;
	u_int16_t	wi_status;
	u_int16_t	wi_aid;
};

/*
 * management probe request frame prefix
 * note: no static parameters, only variable length
 */

/*
 * management probe response frame prefix
 */
struct wi_mgmt_proberesp_hdr {
	u_int32_t	wi_ts0;
	u_int32_t	wi_ts1;
	u_int16_t	wi_interval;
	u_int16_t	wi_capinfo;
};

/*
 * management authentication frame prefix
 */
struct wi_mgmt_auth_hdr {
	u_int16_t	wi_algo;
	u_int16_t	wi_seq;
	u_int16_t	wi_status;
};

/*
 * management deauthentication frame
 */
struct wi_mgmt_deauth_hdr {
	u_int16_t	wi_reason;
};


/*
 * rid configuration register definitions
 */
#define WI_RID_PROCFRAME	0x3137 /* Return full frame information */
#define WI_RID_PRISM2		0x3138 /* tell if we're a prism2 card or not */


/*
 * 802.11 definitions
 */
#define WI_STAT_BADCRC		0x0001
#define WI_STAT_UNDECRYPTABLE	0x0002
#define WI_STAT_ERRSTAT		0x0003
#define WI_STAT_MAC_PORT	0x0700
#define WI_STAT_1042		0x2000
#define WI_STAT_TUNNEL		0x4000
#define WI_STAT_WMP_MSG		0x6000
#define WI_RXSTAT_MSG_TYPE	0xE000

#define WI_FCTL_OPT_MASK	0xFF00
#define WI_AID_SET		0xC000
#define WI_AID_MASK		0x3FFF
#define WI_SCTL_FRAGNUM_MASK	0x000F
#define WI_SCTL_SEQNUM_MASK	0xFFF0

#define WI_STAT_UNSPEC_FAIL	1
#define WI_STAT_CAPINFO_FAIL	10
#define WI_STAT_REAS_DENY	11
#define WI_STAT_ASSOC_DENY	12
#define WI_STAT_ALGO_FAIL	13
#define WI_STAT_SEQ_FAIL	14
#define WI_STAT_CHAL_FAIL	15
#define WI_STAT_TOUT_FAIL	16
#define WI_STAT_OVERL_DENY	17
#define WI_STAT_RATE_DENY	18

#define WI_FTYPE_MGMT		0x0000
#define WI_FTYPE_CTL		0x0004
#define WI_FTYPE_DATA		0x0008

#define WI_FCTL_VERS		0x0002
#define WI_FCTL_FTYPE		0x000C
#define WI_FCTL_STYPE		0x00F0
#define WI_FCTL_TODS		0x0100
#define WI_FCTL_FROMDS		0x0200
#define WI_FCTL_MOREFRAGS	0x0400
#define WI_FCTL_RETRY		0x0800
#define WI_FCTL_PM		0x1000
#define WI_FCTL_MOREDATA	0x2000
#define WI_FCTL_WEP		0x4000
#define WI_FCTL_ORDER		0x8000

#define WI_FCS_LEN		0x4 /* checksum length */


/*
 * management definitions
 */
#define WI_STYPE_MGMT_ASREQ	0x0000
#define WI_STYPE_MGMT_ASRESP	0x0010
#define WI_STYPE_MGMT_REASREQ	0x0020
#define WI_STYPE_MGMT_REASRESP	0x0030
#define WI_STYPE_MGMT_PROBEREQ	0x0040
#define WI_STYPE_MGMT_PROBERESP	0x0050
#define WI_STYPE_MGMT_BEACON	0x0080
#define WI_STYPE_MGMT_ATIM	0x0090
#define WI_STYPE_MGMT_DISAS	0x00A0
#define WI_STYPE_MGMT_AUTH	0x00B0
#define WI_STYPE_MGMT_DEAUTH	0x00C0

#define WI_CAPINFO_ESS		0x01
#define WI_CAPINFO_IBSS		0x02
#define WI_CAPINFO_CFPOLL	0x04
#define WI_CAPINFO_CFPOLLREQ	0x08
#define WI_CAPINFO_PRIV		0x10

#define WI_REASON_UNSPEC	1
#define WI_REASON_AUTH_INVALID	2
#define WI_REASON_DEAUTH_LEAVE	3
#define WI_REASON_DISAS_INACT	4
#define WI_REASON_DISAS_OVERL	5
#define WI_REASON_CLASS2	6
#define WI_REASON_CLASS3	7
#define WI_REASON_DISAS_LEAVE	8
#define WI_REASON_NOAUTH	9

#define WI_VAR_SSID		0
#define WI_VAR_SRATES		1
#define WI_VAR_FH		2
#define WI_VAR_DS		3
#define WI_VAR_CF		4
#define WI_VAR_TIM		5
#define WI_VAR_IBSS		6
#define WI_VAR_CHAL		16

#define WI_VAR_SRATES_MASK	0x7F


/*
 * control definitions
 */
#define WI_STYPE_CTL_PSPOLL	0x00A0
#define WI_STYPE_CTL_RTS	0x00B0
#define WI_STYPE_CTL_CTS	0x00C0
#define WI_STYPE_CTL_ACK	0x00D0
#define WI_STYPE_CTL_CFEND	0x00E0
#define WI_STYPE_CTL_CFENDCFACK	0x00F0


/*
 * ap scanning structures
 */
struct wi_scan_res {
	u_int16_t	wi_chan;
	u_int16_t	wi_noise;
	u_int16_t	wi_signal;
	u_int8_t	wi_bssid[6];
	u_int16_t	wi_interval;
	u_int16_t	wi_capinfo;
	u_int16_t	wi_ssid_len;
	u_int8_t	wi_ssid[32];
	u_int8_t	wi_srates[10];
	u_int8_t	wi_rate;
	u_int8_t	wi_rsvd;
};
#define WI_WAVELAN_RES_SIZE	50

struct wi_scan_p2_hdr {
	u_int16_t	wi_rsvd;
	u_int16_t	wi_reason;
};
#define WI_PRISM2_RES_SIZE	62


/*
 * prism2 debug mode definitions
 */
#define SIOCSPRISM2DEBUG	_IOW('i', 137, struct ifreq)
#define SIOCGPRISM2DEBUG	_IOWR('i', 138, struct ifreq)

#define WI_CMD_DEBUG		0x0038 /* prism2 debug */

#define WI_DEBUG_RESET		0x00
#define WI_DEBUG_INIT		0x01
#define WI_DEBUG_SLEEP		0x02
#define WI_DEBUG_WAKE		0x03
#define WI_DEBUG_CHAN		0x08
#define WI_DEBUG_DELAYSUPP	0x09
#define WI_DEBUG_TXSUPP		0x0A
#define WI_DEBUG_MONITOR	0x0B
#define WI_DEBUG_LEDTEST	0x0C
#define WI_DEBUG_CONTTX		0x0E
#define WI_DEBUG_STOPTEST	0x0F
#define WI_DEBUG_CONTRX		0x10
#define WI_DEBUG_SIGSTATE	0x11
#define WI_DEBUG_CALENABLE	0x13
#define WI_DEBUG_CONFBITS	0x15

/*
d317 1
a317 204
/*
 * Values for supported crypto algorithms:
 */
#define	WI_CRYPTO_FIRMWARE_WEP		0x00 /* default */
#define	WI_CRYPTO_SOFTWARE_WEP		0x01

/* Firmware types */
#define	WI_NOTYPE	0
#define	WI_LUCENT	1
#define	WI_INTERSIL	2
#define	WI_SYMBOL	3

/* Card identities */
#define	WI_NIC_LUCENT		0x0001

#define	WI_NIC_SONY		0x0002

#define	WI_NIC_LUCENT_EMB	0x0005

#define	WI_NIC_EVB2		0x8000

#define	WI_NIC_HWB3763		0x8001

#define	WI_NIC_HWB3163		0x8002

#define	WI_NIC_HWB3163B		0x8003

#define	WI_NIC_EVB3		0x8004

#define	WI_NIC_HWB1153		0x8007

#define	WI_NIC_P2_SST		0x8008	/* Prism2 with SST flush */

#define	WI_NIC_EVB2_SST		0x8009

#define	WI_NIC_3842_EVA		0x800A	/* 3842 Evaluation Board */

#define	WI_NIC_3842_PCMCIA_AMD	0x800B	/* Prism2.5 PCMCIA */
#define	WI_NIC_3842_PCMCIA_SST	0x800C
#define	WI_NIC_3842_PCMCIA_ATL	0x800D
#define	WI_NIC_3842_PCMCIA_ATS	0x800E

#define	WI_NIC_3842_MINI_AMD	0x8012	/* Prism2.5 Mini-PCI */
#define	WI_NIC_3842_MINI_SST	0x8013
#define	WI_NIC_3842_MINI_ATL	0x8014
#define	WI_NIC_3842_MINI_ATS	0x8015

#define	WI_NIC_3842_PCI_AMD	0x8016	/* Prism2.5 PCI-bridge */
#define	WI_NIC_3842_PCI_SST	0x8017
#define	WI_NIC_3842_PCI_ATL	0x8018
#define	WI_NIC_3842_PCI_ATS	0x8019

#define	WI_NIC_P3_PCMCIA_AMD	0x801A	/* Prism3 PCMCIA */
#define	WI_NIC_P3_PCMCIA_SST	0x801B
#define	WI_NIC_P3_PCMCIA_ATL	0x801C
#define	WI_NIC_P3_PCMCIA_ATS	0x801D

#define	WI_NIC_P3_MINI_AMD	0x8021	/* Prism3 Mini-PCI */
#define	WI_NIC_P3_MINI_SST	0x8022
#define	WI_NIC_P3_MINI_ATL	0x8023
#define	WI_NIC_P3_MINI_ATS	0x8024

struct wi_card_ident {
	const u_int16_t	card_id;
	const char	*card_name;
	const u_int8_t	firm_type;
};

#define WI_CARD_IDS							\
	{								\
		WI_NIC_LUCENT,						\
		"Lucent WaveLAN/IEEE",					\
		WI_LUCENT						\
	}, {								\
		WI_NIC_SONY,						\
		"Sony WaveLAN/IEEE",					\
		WI_LUCENT						\
	}, {								\
		WI_NIC_LUCENT_EMB,					\
		"Lucent Embedded WaveLAN/IEEE",				\
		WI_LUCENT						\
	}, {								\
		WI_NIC_EVB2,						\
		"PRISM2 HFA3841(EVB2)",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_HWB3763,						\
		"PRISM2 HWB3763 rev.B",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_HWB3163,						\
		"PRISM2 HWB3163 rev.A",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_HWB3163B,					\
		"PRISM2 HWB3163 rev.B",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_EVB3,						\
		"PRISM2 HFA3842(EVB3)",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_HWB1153,						\
		"PRISM1 HWB1153",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P2_SST,						\
		"PRISM2 HWB3163 SST-flash",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_EVB2_SST,					\
		"PRISM2 HWB3163(EVB2) SST-flash",			\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_EVA,					\
		"PRISM2 HFA3842(EVAL)",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCMCIA_AMD,					\
		"PRISM2.5 ISL3873",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCMCIA_SST,					\
		"PRISM2.5 ISL3873",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCMCIA_ATL,					\
		"PRISM2.5 ISL3873",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCMCIA_ATS,					\
		"PRISM2.5 ISL3873",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_MINI_AMD,					\
		"PRISM2.5 ISL3874A(Mini-PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_MINI_SST,					\
		"PRISM2.5 ISL3874A(Mini-PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_MINI_ATL,					\
		"PRISM2.5 ISL3874A(Mini-PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_MINI_ATS,					\
		"PRISM2.5 ISL3874A(Mini-PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCI_AMD,					\
		"PRISM2.5 ISL3874A(PCI-bridge)",			\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCI_SST,					\
		"PRISM2.5 ISL3874A(PCI-bridge)",			\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCI_ATS,					\
		"PRISM2.5 ISL3874A(PCI-bridge)",			\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCI_ATL,					\
		"PRISM2.5 ISL3874A(PCI-bridge)",			\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_PCMCIA_AMD,					\
		"PRISM3 ISL37300P",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_PCMCIA_SST,					\
		"PRISM3 ISL37300P",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_PCMCIA_ATL,					\
		"PRISM3 ISL37300P",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_PCMCIA_ATS,					\
		"PRISM3 ISL37300P",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_MINI_AMD,					\
		"PRISM3 ISL37300P(PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_MINI_SST,					\
		"PRISM3 ISL37300P(PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_MINI_ATL,					\
		"PRISM3 ISL37300P(PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_MINI_ATS,					\
		"PRISM3 ISL37300P(PCI)",				\
		WI_INTERSIL						\
	}, {								\
		0,							\
		NULL,							\
		WI_NOTYPE						\
	}

#endif /* _IF_WI_IEEE_H */
@


1.3.2.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a85 2
#define WI_RID_SCAN_APS		0x0600
#define WI_RID_READ_APS		0x0700
d167 1
a167 1
 * from the WaveLAN. Not all of them are tremendously useful, but I
a227 1
#define WI_RID_CUR_BEACON_INT	0xFC33 /* beacon xmit time for BSS creation */
d293 1
a293 1
#define WI_RID_CHANNEL_LIST	0xFD10 /* allowed comm. frequencies. */
d320 1
a320 1
#define WI_RID_AUTH_TYPE	0xFD4E /* available auth types */
a344 14
struct wi_apinfo {
	int			scanreason;	/* ScanReason */
	char			bssid[6];	/* BSSID (mac address) */
	int			channel;	/* Channel */
	int			signal;		/* Signal level */
	int			noise;		/* Average Noise Level*/
	int			quality;	/* Quality */
	int			namelen;	/* Length of SSID string */
	char			name[32];	/* SSID string */
	int			capinfo;	/* Capability info. */ 
	int			interval;	/* BSS Beacon Interval */
	int			rate;		/* Data Rate */
};

d440 1
a440 1
 * isn't entirely defined, but added for ethernet compatibility.
a782 2
#define	WI_NIC_P3_USB_NETGEAR	0x8026 	/* Prism3 USB */

a916 4
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_USB_NETGEAR,					\
		"PRISM3 (USB)",						\
@


1.3.2.3
log
@Merge with the trunk
@
text
@a132 10
#define WI_STYPE_CTL_CFENDCFACK	WI_STYPE_CTL_CFENDACK

#define WI_STYPE_DATA		0x0000
#define WI_STYPE_DATA_CFACK	0x0010
#define WI_STYPE_DATA_CFPOLL	0x0020
#define WI_STYPE_DATA_CFACKPOLL	0x0030
#define WI_STYPE_NULLFUNC	0x0040
#define WI_STYPE_CFACK		0x0050
#define WI_STYPE_CFPOLL		0x0060
#define WI_STYPE_CFACKPOLL	0x0070
a230 1
#define	WI_RID_CNF_ENH_SECURITY	0xFC43 /* hide SSID name (prism fw >= 1.6.3) */
d627 12
d665 12
@


1.3.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.3 2001/06/07 18:51:59 millert Exp $	*/
d34 1
a34 1
 *	From: if_wavelan_ieee.h,v 1.5.2.1 2001/07/04 00:12:34 brooks Exp $
a39 2
#pragma pack(1)

a84 1
#define	WI_RID_MONITOR_MODE	0x0500
a123 7
#define WI_STYPE_CTL_PSPOLL	0x00A0
#define WI_STYPE_CTL_RTS	0x00B0
#define WI_STYPE_CTL_CTS	0x00C0
#define WI_STYPE_CTL_ACK	0x00D0
#define WI_STYPE_CTL_CFEND	0x00E0
#define WI_STYPE_CTL_CFENDACK	0x00F0

d164 1
a164 2
#define WI_RID_MEMSZ		0xFD02 /* memory size info (Lucent) */
#define WI_RID_PRI_IDENTITY	0xFD02 /* primary firmware ident (PRISM2) */
a198 1
#define	WI_RID_SYMBOL_MANDATORYBSSID 0xFC21
a205 8
#define PRIVACY_INVOKED		0x01
#define EXCLUDE_UNENCRYPTED	0x02
#define HOST_ENCRYPT		0x10
#define IV_EVERY_FRAME		0x00
#define IV_EVERY10_FRAME	0x20
#define IV_EVERY50_FRAME	0x40
#define IV_EVERY100_FRAME	0x60
#define HOST_DECRYPT		0x80
d207 1
a207 2
#define	WI_RID_CNFAUTHMODE	0xFC2A
#define	WI_RID_SYMBOL_KEYLENGTH	0xFC2B
a208 3
#define	WI_RID_SYMBOL_PREAMBLE	0xFC8C /* Enable/disable short preamble */
#define	WI_RID_P2_SHORT_PREAMBLE	0xFCB0 /* Short preamble support */
#define	WI_RID_P2_EXCLUDE_LONG_PREAMBLE	0xFCB1 /* Don't send long preamble */
a210 2
#define WI_RID_SYMBOL_DIVERSITY	0xFC87 /* Symbol antenna diversity */
#define WI_RID_SYMBOL_BASIC_RATE 0xFC90
d245 2
a275 1
#define WI_RID_SYMBOL_IDENTITY	0xFD24 /* Symbol station firmware ident */
a306 370
 * Scan Information
 */
#define WI_RID_BCAST_SCAN_REQ	0xFCAB /* Broadcast Scan request (Symbol) */
#define BSCAN_5SEC		0x01
#define BSCAN_ONETIME		0x02
#define BSCAN_PASSIVE		0x40
#define BSCAN_BCAST		0x80
#define WI_RID_SCAN_REQ		0xFCE1 /* Scan request (STA only) */
#define WI_RID_JOIN_REQ		0xFCE2 /* Join request (STA only) */
#define WI_RID_AUTH_STATION	0xFCE3 /* Authenticates Station (AP) */
#define WI_RID_CHANNEL_REQ	0xFCE4 /* Channel Information Request (AP) */
#define WI_RID_SCAN_RES		0xFD88 /* Scan Results Table */

/*
 * bsd-airtools v0.2 - source-mods v0.2 [common.h]
 * by h1kari - (c) Dachb0den Labs 2001
 */

/*
 * Copyright (c) 2001 Dachb0den Labs.
 *      David Hulton <h1kari@@dachb0den.com>.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by David Hulton.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY David Hulton AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL David Hulton OR THE VOICES IN HIS HEAD
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * standard hermes recieve frame used by wavelan/prism2 cards
 */
struct wi_rx_frame {
	/*
	 * hermes prefix header. supplies information on the current status of
	 * the network and various other statistics gathered from the
	 * management/control frames as used internally.
	 */
	u_int16_t	wi_status;
	u_int16_t	wi_ts0;
	u_int16_t	wi_ts1;
	u_int8_t	wi_silence;
	u_int8_t	wi_signal;
	u_int8_t	wi_rate;
	u_int8_t	wi_rx_flow;
	u_int16_t	wi_rsvd0;
	u_int16_t	wi_rsvd1;
	/*
	 * standard 80211 frame header. all packets have to use this header as
	 * per the AN9900 from intersil, even management/control. for
	 * management packets, they just threw the header into the data field,
	 * but for control packets the headers are lost in translation and
	 * therefore not all control packet info can be displayed.
	 */
	u_int16_t	wi_frame_ctl;
	u_int16_t	wi_id;
	u_int8_t	wi_addr1[6];
	u_int8_t	wi_addr2[6];
	u_int8_t	wi_addr3[6];
	u_int16_t	wi_seq_ctl;
	u_int8_t	wi_addr4[6];
	u_int16_t	wi_dat_len;
	/*
	 * another wierdity with the drivers. they append a 802.3 header which
	 * is somewhat redundant, since all the same data is provided in the
	 * 802.11 header.
	 */
	u_int8_t	wi_dst_addr[6];
	u_int8_t	wi_src_addr[6];
	u_int16_t	wi_len;
};
#define WI_DATA_HDRLEN		WI_802_11_OFFSET
#define WI_MGMT_HDRLEN		WI_802_11_OFFSET_RAW
#define WI_CTL_HDRLEN		WI_802_11_OFFSET_RAW


/*
 * all data packets have a snap (sub-network access protocol) header that
 * isn't entirely definied, but added for ethernet compatibility.
 */
struct wi_snap_frame {
	u_int16_t	wi_dat[3];
	u_int16_t	wi_type;
};


/*
 * management frame headers
 * note: all management frames consist of a static header and variable length
 * fields.
 */

/*
 * variable length field structure
 */
struct wi_mgmt_var_hdr {
	u_int8_t	wi_code;
	u_int8_t	wi_len;
	u_int8_t	wi_data[256];
};

/*
 * management beacon frame prefix
 */
struct wi_mgmt_beacon_hdr {
	u_int32_t	wi_ts0;
	u_int32_t	wi_ts1;
	u_int16_t	wi_interval;
	u_int16_t	wi_capinfo;
};

/*
 * ibss announcement traffic indication message (atim) frame
 * note: no parameters
 */

/*
 * management disassociation frame
 */
struct wi_mgmt_disas_hdr {
	u_int16_t	wi_reason;
};

/*
 * management association request frame prefix
 */
struct wi_mgmt_asreq_hdr {
	u_int16_t	wi_capinfo;
	u_int16_t	wi_interval;
};

/*
 * management association response frame prefix
 */
struct wi_mgmt_asresp_hdr {
	u_int16_t	wi_capinfo;
	u_int16_t	wi_status;
	u_int16_t	wi_aid;
};

/*
 * management reassociation request frame prefix
 */
struct wi_mgmt_reasreq_hdr {
	u_int16_t	wi_capinfo;
	u_int16_t	wi_interval;
	u_int8_t	wi_currap[6];
};

/*
 * management reassociation response frame prefix
 */
struct wi_mgmt_reasresp_hdr {
	u_int16_t	wi_capinfo;
	u_int16_t	wi_status;
	u_int16_t	wi_aid;
};

/*
 * management probe request frame prefix
 * note: no static parameters, only variable length
 */

/*
 * management probe response frame prefix
 */
struct wi_mgmt_proberesp_hdr {
	u_int32_t	wi_ts0;
	u_int32_t	wi_ts1;
	u_int16_t	wi_interval;
	u_int16_t	wi_capinfo;
};

/*
 * management authentication frame prefix
 */
struct wi_mgmt_auth_hdr {
	u_int16_t	wi_algo;
	u_int16_t	wi_seq;
	u_int16_t	wi_status;
};

/*
 * management deauthentication frame
 */
struct wi_mgmt_deauth_hdr {
	u_int16_t	wi_reason;
};


/*
 * rid configuration register definitions
 */
#define WI_RID_PROCFRAME	0x3137 /* Return full frame information */
#define WI_RID_PRISM2		0x3138 /* tell if we're a prism2 card or not */


/*
 * 802.11 definitions
 */
#define WI_STAT_BADCRC		0x0001
#define WI_STAT_UNDECRYPTABLE	0x0002
#define WI_STAT_ERRSTAT		0x0003
#define WI_STAT_MAC_PORT	0x0700
#define WI_STAT_1042		0x2000
#define WI_STAT_TUNNEL		0x4000
#define WI_STAT_WMP_MSG		0x6000
#define WI_RXSTAT_MSG_TYPE	0xE000

#define WI_FCTL_OPT_MASK	0xFF00
#define WI_AID_SET		0xC000
#define WI_AID_MASK		0x3FFF
#define WI_SCTL_FRAGNUM_MASK	0x000F
#define WI_SCTL_SEQNUM_MASK	0xFFF0

#define WI_STAT_UNSPEC_FAIL	1
#define WI_STAT_CAPINFO_FAIL	10
#define WI_STAT_REAS_DENY	11
#define WI_STAT_ASSOC_DENY	12
#define WI_STAT_ALGO_FAIL	13
#define WI_STAT_SEQ_FAIL	14
#define WI_STAT_CHAL_FAIL	15
#define WI_STAT_TOUT_FAIL	16
#define WI_STAT_OVERL_DENY	17
#define WI_STAT_RATE_DENY	18

#define WI_FTYPE_MGMT		0x0000
#define WI_FTYPE_CTL		0x0004
#define WI_FTYPE_DATA		0x0008

#define WI_FCTL_VERS		0x0002
#define WI_FCTL_FTYPE		0x000C
#define WI_FCTL_STYPE		0x00F0
#define WI_FCTL_TODS		0x0100
#define WI_FCTL_FROMDS		0x0200
#define WI_FCTL_MOREFRAGS	0x0400
#define WI_FCTL_RETRY		0x0800
#define WI_FCTL_PM		0x1000
#define WI_FCTL_MOREDATA	0x2000
#define WI_FCTL_WEP		0x4000
#define WI_FCTL_ORDER		0x8000

#define WI_FCS_LEN		0x4 /* checksum length */


/*
 * management definitions
 */
#define WI_STYPE_MGMT_ASREQ	0x0000
#define WI_STYPE_MGMT_ASRESP	0x0010
#define WI_STYPE_MGMT_REASREQ	0x0020
#define WI_STYPE_MGMT_REASRESP	0x0030
#define WI_STYPE_MGMT_PROBEREQ	0x0040
#define WI_STYPE_MGMT_PROBERESP	0x0050
#define WI_STYPE_MGMT_BEACON	0x0080
#define WI_STYPE_MGMT_ATIM	0x0090
#define WI_STYPE_MGMT_DISAS	0x00A0
#define WI_STYPE_MGMT_AUTH	0x00B0
#define WI_STYPE_MGMT_DEAUTH	0x00C0

#define WI_CAPINFO_ESS		0x01
#define WI_CAPINFO_IBSS		0x02
#define WI_CAPINFO_CFPOLL	0x04
#define WI_CAPINFO_CFPOLLREQ	0x08
#define WI_CAPINFO_PRIV		0x10

#define WI_REASON_UNSPEC	1
#define WI_REASON_AUTH_INVALID	2
#define WI_REASON_DEAUTH_LEAVE	3
#define WI_REASON_DISAS_INACT	4
#define WI_REASON_DISAS_OVERL	5
#define WI_REASON_CLASS2	6
#define WI_REASON_CLASS3	7
#define WI_REASON_DISAS_LEAVE	8
#define WI_REASON_NOAUTH	9

#define WI_VAR_SSID		0
#define WI_VAR_SRATES		1
#define WI_VAR_FH		2
#define WI_VAR_DS		3
#define WI_VAR_CF		4
#define WI_VAR_TIM		5
#define WI_VAR_IBSS		6
#define WI_VAR_CHAL		16

#define WI_VAR_SRATES_MASK	0x7F


/*
 * control definitions
 */
#define WI_STYPE_CTL_PSPOLL	0x00A0
#define WI_STYPE_CTL_RTS	0x00B0
#define WI_STYPE_CTL_CTS	0x00C0
#define WI_STYPE_CTL_ACK	0x00D0
#define WI_STYPE_CTL_CFEND	0x00E0
#define WI_STYPE_CTL_CFENDCFACK	0x00F0


/*
 * ap scanning structures
 */
struct wi_scan_res {
	u_int16_t	wi_chan;
	u_int16_t	wi_noise;
	u_int16_t	wi_signal;
	u_int8_t	wi_bssid[6];
	u_int16_t	wi_interval;
	u_int16_t	wi_capinfo;
	u_int16_t	wi_ssid_len;
	u_int8_t	wi_ssid[32];
	u_int8_t	wi_srates[10];
	u_int8_t	wi_rate;
	u_int8_t	wi_rsvd;
};
#define WI_WAVELAN_RES_SIZE	50

struct wi_scan_p2_hdr {
	u_int16_t	wi_rsvd;
	u_int16_t	wi_reason;
};
#define WI_PRISM2_RES_SIZE	62


/*
 * prism2 debug mode definitions
 */
#define SIOCSPRISM2DEBUG	_IOW('i', 137, struct ifreq)
#define SIOCGPRISM2DEBUG	_IOWR('i', 138, struct ifreq)

#define WI_CMD_DEBUG		0x0038 /* prism2 debug */

#define WI_DEBUG_RESET		0x00
#define WI_DEBUG_INIT		0x01
#define WI_DEBUG_SLEEP		0x02
#define WI_DEBUG_WAKE		0x03
#define WI_DEBUG_CHAN		0x08
#define WI_DEBUG_DELAYSUPP	0x09
#define WI_DEBUG_TXSUPP		0x0A
#define WI_DEBUG_MONITOR	0x0B
#define WI_DEBUG_LEDTEST	0x0C
#define WI_DEBUG_CONTTX		0x0E
#define WI_DEBUG_STOPTEST	0x0F
#define WI_DEBUG_CONTRX		0x10
#define WI_DEBUG_SIGSTATE	0x11
#define WI_DEBUG_CALENABLE	0x13
#define WI_DEBUG_CONFBITS	0x15

/*
a315 2

#pragma pack()
@


1.3.6.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.3.6.1 2002/06/11 03:42:18 art Exp $	*/
d40 2
a229 1
#define	WI_RID_CNF_DBM_ADJUST	0xFC46 /* Get DBM adjustment factor */
d274 1
a274 1
	u_int8_t		wi_keydat[13];
a276 1
#define	WI_NLTV_KEYS	4
d280 1
a280 1
	struct wi_key		wi_keys[WI_NLTV_KEYS];
a345 9
 * The following do not get passed down to the card, they are used
 * by wicontrol to modify the behavior of the driver (use WEP in software or
 * firmware, use alternate cryptographic algorithms, etc.)  I'm calling them
 * "fake record IDs."
 */
#define	WI_FRID_CRYPTO_ALG	0xFCE3
#define	WI_FRID_DEBUGGING	0xFCE4

/*
d383 1
a383 1
 * standard hermes receive frame used by wavelan/prism2 cards
d712 1
a712 5
/*
 * Values for supported crypto algorithms:
 */
#define	WI_CRYPTO_FIRMWARE_WEP		0x00 /* default */
#define	WI_CRYPTO_SOFTWARE_WEP		0x01
d714 1
a714 198
/* Firmware types */
#define	WI_NOTYPE	0
#define	WI_LUCENT	1
#define	WI_INTERSIL	2
#define	WI_SYMBOL	3

/* Card identities */
#define	WI_NIC_LUCENT		0x0001

#define	WI_NIC_SONY		0x0002

#define	WI_NIC_LUCENT_EMB	0x0005

#define	WI_NIC_EVB2		0x8000

#define	WI_NIC_HWB3763		0x8001

#define	WI_NIC_HWB3163		0x8002

#define	WI_NIC_HWB3163B		0x8003

#define	WI_NIC_EVB3		0x8004

#define	WI_NIC_HWB1153		0x8007

#define	WI_NIC_P2_SST		0x8008	/* Prism2 with SST flush */

#define	WI_NIC_EVB2_SST		0x8009

#define	WI_NIC_3842_EVA		0x800A	/* 3842 Evaluation Board */

#define	WI_NIC_3842_PCMCIA_AMD	0x800B	/* Prism2.5 PCMCIA */
#define	WI_NIC_3842_PCMCIA_SST	0x800C
#define	WI_NIC_3842_PCMCIA_ATL	0x800D
#define	WI_NIC_3842_PCMCIA_ATS	0x800E

#define	WI_NIC_3842_MINI_AMD	0x8012	/* Prism2.5 Mini-PCI */
#define	WI_NIC_3842_MINI_SST	0x8013
#define	WI_NIC_3842_MINI_ATL	0x8014
#define	WI_NIC_3842_MINI_ATS	0x8015

#define	WI_NIC_3842_PCI_AMD	0x8016	/* Prism2.5 PCI-bridge */
#define	WI_NIC_3842_PCI_SST	0x8017
#define	WI_NIC_3842_PCI_ATL	0x8018
#define	WI_NIC_3842_PCI_ATS	0x8019

#define	WI_NIC_P3_PCMCIA_AMD	0x801A	/* Prism3 PCMCIA */
#define	WI_NIC_P3_PCMCIA_SST	0x801B
#define	WI_NIC_P3_PCMCIA_ATL	0x801C
#define	WI_NIC_P3_PCMCIA_ATS	0x801D

#define	WI_NIC_P3_MINI_AMD	0x8021	/* Prism3 Mini-PCI */
#define	WI_NIC_P3_MINI_SST	0x8022
#define	WI_NIC_P3_MINI_ATL	0x8023
#define	WI_NIC_P3_MINI_ATS	0x8024

struct wi_card_ident {
	const u_int16_t	card_id;
	const char	*card_name;
	const u_int8_t	firm_type;
};

#define WI_CARD_IDS							\
	{								\
		WI_NIC_LUCENT,						\
		"Lucent WaveLAN/IEEE",					\
		WI_LUCENT						\
	}, {								\
		WI_NIC_SONY,						\
		"Sony WaveLAN/IEEE",					\
		WI_LUCENT						\
	}, {								\
		WI_NIC_LUCENT_EMB,					\
		"Lucent Embedded WaveLAN/IEEE",				\
		WI_LUCENT						\
	}, {								\
		WI_NIC_EVB2,						\
		"PRISM2 HFA3841(EVB2)",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_HWB3763,						\
		"PRISM2 HWB3763 rev.B",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_HWB3163,						\
		"PRISM2 HWB3163 rev.A",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_HWB3163B,					\
		"PRISM2 HWB3163 rev.B",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_EVB3,						\
		"PRISM2 HFA3842(EVB3)",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_HWB1153,						\
		"PRISM1 HWB1153",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P2_SST,						\
		"PRISM2 HWB3163 SST-flash",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_EVB2_SST,					\
		"PRISM2 HWB3163(EVB2) SST-flash",			\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_EVA,					\
		"PRISM2 HFA3842(EVAL)",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCMCIA_AMD,					\
		"PRISM2.5 ISL3873",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCMCIA_SST,					\
		"PRISM2.5 ISL3873",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCMCIA_ATL,					\
		"PRISM2.5 ISL3873",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCMCIA_ATS,					\
		"PRISM2.5 ISL3873",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_MINI_AMD,					\
		"PRISM2.5 ISL3874A(Mini-PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_MINI_SST,					\
		"PRISM2.5 ISL3874A(Mini-PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_MINI_ATL,					\
		"PRISM2.5 ISL3874A(Mini-PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_MINI_ATS,					\
		"PRISM2.5 ISL3874A(Mini-PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCI_AMD,					\
		"PRISM2.5 ISL3874A(PCI-bridge)",			\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCI_SST,					\
		"PRISM2.5 ISL3874A(PCI-bridge)",			\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCI_ATS,					\
		"PRISM2.5 ISL3874A(PCI-bridge)",			\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_3842_PCI_ATL,					\
		"PRISM2.5 ISL3874A(PCI-bridge)",			\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_PCMCIA_AMD,					\
		"PRISM3 ISL37300P",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_PCMCIA_SST,					\
		"PRISM3 ISL37300P",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_PCMCIA_ATL,					\
		"PRISM3 ISL37300P",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_PCMCIA_ATS,					\
		"PRISM3 ISL37300P",					\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_MINI_AMD,					\
		"PRISM3 ISL37300P(PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_MINI_SST,					\
		"PRISM3 ISL37300P(PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_MINI_ATL,					\
		"PRISM3 ISL37300P(PCI)",				\
		WI_INTERSIL						\
	}, {								\
		WI_NIC_P3_MINI_ATS,					\
		"PRISM3 ISL37300P(PCI)",				\
		WI_INTERSIL						\
	}, {								\
		0,							\
		NULL,							\
		WI_NOTYPE						\
	}

#endif /* _IF_WI_IEEE_H */
@


1.2
log
@missed from last ci, all is from netbsd of course
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_ieee.h,v 1.1 2001/05/15 02:40:36 millert Exp $	*/
d165 5
a169 5
#define WI_RID_DOMAINS		0xFD11
#define WI_RID_CIS		0xFD13
#define WI_RID_COMMQUAL		0xFD43
#define WI_RID_SCALETHRESH	0xFD46
#define WI_RID_PCF		0xFD87
d202 1
a202 1
#define	WI_RID_MICROWAVE_OVEN	0xFC25
d208 1
a208 1
#define	WI_RID_ROAMING_MODE	0xFC2D
d215 1
a215 1
#define WI_RID_MCAST_LIST	0xFC80 /* list of multicast addrs */
d244 1
a244 1
#define WI_RID_TICK_TIME	0xFCE0
d273 1
a273 1
#define WI_RID_STA_IDENEITY	0xFD20 /* station funcs firmware ident */
@


1.1
log
@Split wi(4) into bus-dependent and bus-independent bits similar to
an(4) -- no real code changes at this point.
Rename if_wavelan_ieee.h to if_wi_ieee.h while I'm at it and
create an if_wivar.h similar to NetBSD.
PCI adaptors exist that are not true PCMCIA controllers so
wi(4) @@ PCI is possible (though the code is not working yet ;-).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d174 37
a210 32
#define WI_RID_PORTTYPE		0xFC00 /* Connection control characteristics */
#define WI_RID_MAC_NODE		0xFC01 /* MAC address of this station */
#define WI_RID_DESIRED_SSID	0xFC02 /* Service Set ID for connection */
#define WI_RID_OWN_CHNL		0xFC03 /* Comm channel for BSS creation */
#define WI_RID_OWN_SSID		0xFC04 /* IBSS creation ID */
#define WI_RID_OWN_ATIM_WIN	0xFC05 /* ATIM window time for IBSS creation */
#define WI_RID_SYSTEM_SCALE	0xFC06 /* scale that specifies AP density */
#define WI_RID_MAX_DATALEN	0xFC07 /* Max len of MAC frame body data */
#define WI_RID_MAC_WDS		0xFC08 /* MAC addr of corresponding WDS node */
#define WI_RID_PM_ENABLED	0xFC09 /* ESS power management enable */
#define WI_RID_PM_EPS		0xFC0A /* PM EPS/PS mode */
#define WI_RID_MCAST_RX		0xFC0B /* ESS PM mcast reception */
#define WI_RID_MAX_SLEEP	0xFC0C /* max sleep time for ESS PM */
#define WI_RID_HOLDOVER		0xFC0D /* holdover time for ESS PM */
#define WI_RID_NODENAME		0xFC0E /* ID name of this node for diag */
#define WI_RID_DTIM_PERIOD	0xFC10 /* beacon interval between DTIMs */
#define WI_RID_WDS_ADDR1	0xFC11 /* port 1 MAC of WDS link node */
#define WI_RID_WDS_ADDR2	0xFC12 /* port 1 MAC of WDS link node */
#define WI_RID_WDS_ADDR3	0xFC13 /* port 1 MAC of WDS link node */
#define WI_RID_WDS_ADDR4	0xFC14 /* port 1 MAC of WDS link node */
#define WI_RID_WDS_ADDR5	0xFC15 /* port 1 MAC of WDS link node */
#define WI_RID_WDS_ADDR6	0xFC16 /* port 1 MAC of WDS link node */
#define WI_RID_MCAST_PM_BUF	0xFC17 /* PM buffering of mcast */
#define WI_RID_ENCRYPTION	0xFC20 /* enable/disable WEP */
#define WI_RID_AUTHTYPE		0xFC21 /* specify authentication type */
#define WI_RID_P2_TX_CRYPT_KEY	0xFC23
#define WI_RID_P2_CRYPT_KEY0	0xFC24
#define WI_RID_P2_CRYPT_KEY1	0xFC25
#define WI_RID_MICROWAVE_OVEN	0xFC25
#define WI_RID_P2_CRYPT_KEY2	0xFC26
#define WI_RID_P2_CRYPT_KEY3	0xFC27
#define WI_RID_P2_ENCRYPTION	0xFC28
d245 2
@

