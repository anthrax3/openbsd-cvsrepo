head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.24
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.18
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.20
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.12
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.16
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.14
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.10
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.4
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.10
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.8
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.10
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.8
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.6
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.5
	UBC:1.3.0.6
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	SMP:1.3.0.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2011.04.03.15.49.16;	author dlg;	state Exp;
branches;
next	1.9;

1.9
date	2009.02.16.21.19.07;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2008.07.24.19.03.08;	author thib;	state Exp;
branches;
next	1.7;

1.7
date	2005.09.15.05.33.39;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.19.24.22;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.17.13.45.38;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.26.55;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.10.20.07.35;	author mickey;	state Exp;
branches
	1.3.2.1
	1.3.6.1;
next	1.2;

1.2
date	2001.02.19.20.48.02;	author mickey;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2000.09.15.16.56.13;	author mickey;	state Exp;
branches;
next	;

1.2.2.1
date	2001.05.11.04.49.50;	author jason;	state Exp;
branches;
next	;

1.3.2.1
date	2001.05.14.22.24.19;	author niklas;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2001.07.04.10.41.15;	author niklas;	state Exp;
branches;
next	1.3.2.3;

1.3.2.3
date	2002.03.28.12.09.41;	author niklas;	state Exp;
branches;
next	1.3.2.4;

1.3.2.4
date	2003.03.28.00.38.15;	author niklas;	state Exp;
branches;
next	1.3.2.5;

1.3.2.5
date	2003.06.07.11.02.29;	author ho;	state Exp;
branches;
next	;

1.3.6.1
date	2002.06.11.03.42.20;	author art;	state Exp;
branches;
next	1.3.6.2;

1.3.6.2
date	2002.10.29.00.33.26;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@move twe over to iopools so we can get rid of another NO_CCB user. this
also cuts the aen drain over to using an iohandler so it can be made
reliable.

this compiles, but i havent got hardware to test with. its going in as a
way to force testing. if there's a problem with the code then let me know
or back it out.

"man up" k2k11
@
text
@/*	$OpenBSD: twevar.h,v 1.9 2009/02/16 21:19:07 miod Exp $	*/

/*
 * Copyright (c) 2000 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

struct twe_softc;

struct twe_ccb {
	struct twe_softc	*ccb_sc;
	struct twe_cmd		*ccb_cmd;
	struct scsi_xfer	*ccb_xs;
	paddr_t			ccb_cmdpa;
	TAILQ_ENTRY(twe_ccb)	ccb_link;
	enum {
		TWE_CCB_FREE, TWE_CCB_READY, TWE_CCB_QUEUED, TWE_CCB_PREQUEUED,
		TWE_CCB_DONE
	} ccb_state;
	int			ccb_length;
	void			*ccb_data;
	void			*ccb_realdata;
	bus_dmamap_t		ccb_dmamap;
	bus_dma_segment_t	ccb_2bseg[TWE_MAXOFFSETS];
	int			ccb_2nseg;
};

typedef TAILQ_HEAD(twe_queue_head, twe_ccb)	twe_queue_head;

struct twe_softc {
	struct device	sc_dev;
	void		*sc_ih;
	struct scsi_link sc_link;
	struct proc	*sc_thread;
	int		sc_thread_on;

	bus_space_tag_t	iot;
	bus_space_handle_t ioh;
	bus_dma_tag_t	dmat;

	void *sc_cmds;
	bus_dmamap_t	sc_cmdmap;
	bus_dma_segment_t sc_cmdseg[1];
	struct twe_ccb	sc_ccbs[TWE_MAXCMDS];
	twe_queue_head	sc_free_ccb;
	twe_queue_head	sc_ccbq;
	twe_queue_head	sc_ccb2q;
	twe_queue_head	sc_done_ccb;
	struct mutex	sc_ccb_mtx;
	struct scsi_iopool sc_iopool;

	struct timeout	sc_enqueue_tmo;

	struct scsi_iohandler sc_aen;

	struct {
		int	hd_present;
		int	hd_devtype;
		int	hd_lock;
		int	hd_size;
	} sc_hdr[TWE_MAX_UNITS];
};

/* XXX These have to become spinlocks in case of SMP */
#define TWE_LOCK(sc) splbio()
#define TWE_UNLOCK(sc, lock) splx(lock)
typedef int twe_lock_t;

void	tweminphys(struct buf *bp, struct scsi_link *sl);
int	twe_attach(struct twe_softc *);
int	twe_intr(void *);
@


1.9
log
@Extend the scsi_adapter minphys() callback to take a struct scsi_link *
as additional argument. This will allow intermediate layers between
scsi devices such as sd and scsi host adapters to take appropriate
action if necessary.
@
text
@d1 1
a1 1
/*	$OpenBSD: twevar.h,v 1.8 2008/07/24 19:03:08 thib Exp $	*/
d70 2
d74 2
@


1.8
log
@the softc sc_lock lockmgr lock is unused, so remove it.

ok krw@@, dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: twevar.h,v 1.7 2005/09/15 05:33:39 krw Exp $	*/
d86 1
a86 1
void	tweminphys(struct buf *bp);
@


1.7
log
@Don't fake MODE SENSE page 4 info inside raid drivers, just let sd
fake a geometry. Page 4 info does not get used for size information.
Eliminate now unused union scsi_disk_pages.

ok marco@@ mickey@@ pre-lock.
@
text
@d1 1
a1 1
/*	$OpenBSD: twevar.h,v 1.6 2003/06/02 19:24:22 mickey Exp $	*/
a54 1
	struct lock	sc_lock;
@


1.6
log
@kill the caluses three and four on some of my code
@
text
@d1 1
a1 1
/*	$OpenBSD: twevar.h,v 1.5 2002/09/17 13:45:38 mickey Exp $	*/
a77 2
		int	hd_secs;
		int	hd_heads;
@


1.5
log
@deal w/ the dma in a special thread to follow the busdma semantics. this fixes panics on unaligned physio; w/ help and testing from daniel@@lucq.org
@
text
@d1 1
a1 1
/*	$OpenBSD: twevar.h,v 1.4 2002/03/14 01:26:55 millert Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: twevar.h,v 1.3 2001/05/10 20:07:35 mickey Exp $	*/
d43 2
a44 1
		TWE_CCB_FREE, TWE_CCB_READY, TWE_CCB_QUEUED, TWE_CCB_PREQUEUED
d60 3
d75 1
d90 2
a91 2
#define TWE_LOCK_TWE(sc) splbio()
#define TWE_UNLOCK_TWE(sc, lock) splx(lock)
@


1.3
log
@dmamem_unmap the memory before dmamem_freeig it.
only affects unaligned transfers (such as disklabel, fsck and dump).
we used to get away w/ this due to older pmap, uvm or both.
be more precise w/ double-buffer on command failure as well.
once at it, allow more than 1 segment for double-buffer to be allocated.
also fix a couple of endianesses and command timeouts.
@
text
@d1 1
a1 1
/*	$OpenBSD: twevar.h,v 1.2 2001/02/19 20:48:02 mickey Exp $	*/
d89 3
a91 3
void	tweminphys __P((struct buf *bp));
int	twe_attach __P((struct twe_softc *));
int	twe_intr __P((void *));
@


1.3.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: twevar.h,v 1.3 2001/05/10 20:07:35 mickey Exp $	*/
d89 3
a91 3
void	tweminphys(struct buf *bp);
int	twe_attach(struct twe_softc *);
int	twe_intr(void *);
@


1.3.6.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: twevar.h,v 1.3.6.1 2002/06/11 03:42:20 art Exp $	*/
d43 1
a43 2
		TWE_CCB_FREE, TWE_CCB_READY, TWE_CCB_QUEUED, TWE_CCB_PREQUEUED,
		TWE_CCB_DONE
a58 3
	struct lock	sc_lock;
	struct proc	*sc_thread;
	int		sc_thread_on;
a70 1
	twe_queue_head	sc_done_ccb;
d85 2
a86 2
#define TWE_LOCK(sc) splbio()
#define TWE_UNLOCK(sc, lock) splx(lock)
@


1.3.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d49 2
a50 1
	bus_dma_segment_t	ccb_2bseg;
d66 1
a66 1
	bus_dma_segment_t sc_cmdseg;
a91 2


@


1.3.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: twevar.h,v 1.3.2.1 2001/05/14 22:24:19 niklas Exp $	*/
d49 1
a49 2
	bus_dma_segment_t	ccb_2bseg[TWE_MAXOFFSETS];
	int			ccb_2nseg;
d65 1
a65 1
	bus_dma_segment_t sc_cmdseg[1];
d91 2
@


1.3.2.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d89 3
a91 3
void	tweminphys(struct buf *bp);
int	twe_attach(struct twe_softc *);
int	twe_intr(void *);
@


1.3.2.4
log
@Sync the SMP branch with 3.3
@
text
@d43 1
a43 2
		TWE_CCB_FREE, TWE_CCB_READY, TWE_CCB_QUEUED, TWE_CCB_PREQUEUED,
		TWE_CCB_DONE
a58 3
	struct lock	sc_lock;
	struct proc	*sc_thread;
	int		sc_thread_on;
a70 1
	twe_queue_head	sc_done_ccb;
d85 2
a86 2
#define TWE_LOCK(sc) splbio()
#define TWE_UNLOCK(sc, lock) splx(lock)
@


1.3.2.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: twevar.h,v 1.3.2.4 2003/03/28 00:38:15 niklas Exp $	*/
d15 5
@


1.2
log
@proper dmaable memory allocations; oops
@
text
@d1 1
a1 1
/*	$OpenBSD: twevar.h,v 1.1 2000/09/15 16:56:13 mickey Exp $	*/
d49 2
a50 1
	bus_dma_segment_t	ccb_2bseg;
d66 1
a66 1
	bus_dma_segment_t sc_cmdseg;
a91 2


@


1.2.2.1
log
@Pull in patch from current:
Fix (mickey):
dmamem_unmap the memory before dmamem_freeig it.
only affects unaligned transfers (such as disklabel, fsck and dump).
we used to get away w/ this due to older pmap, uvm or both.
be more precise w/ double-buffer on command failure as well.
once at it, allow more than 1 segment for double-buffer to be allocated.
also fix a couple of endianesses and command timeouts.
@
text
@d1 1
a1 1
/*	$OpenBSD: twevar.h,v 1.2 2001/02/19 20:48:02 mickey Exp $	*/
d49 1
a49 2
	bus_dma_segment_t	ccb_2bseg[TWE_MAXOFFSETS];
	int			ccb_2nseg;
d65 1
a65 1
	bus_dma_segment_t sc_cmdseg[1];
d91 2
@


1.1
log
@3ware escalade ide raid controllers
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d49 1
d65 1
@

