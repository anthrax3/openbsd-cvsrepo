head	1.18;
access;
symbols
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.28
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.26
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.20
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.22
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.14
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.18
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.16
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.12
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.10
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.6
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.8
	OPENBSD_5_0:1.18.0.4
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.2
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.17.0.2
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.16.0.4
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.6
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.2
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.15.0.20
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.18
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.16
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.14
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.12
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.10
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.8
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.6
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.4
	OPENBSD_3_6_BASE:1.15
	SMP_SYNC_A:1.15
	SMP_SYNC_B:1.15
	OPENBSD_3_5:1.15.0.2
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	UBC_SYNC_A:1.13
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.10
	UBC:1.9.0.2
	UBC_BASE:1.9
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	SMP:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.2;
locks; strict;
comment	@ * @;


1.18
date	2010.10.03.21.14.40;	author krw;	state Exp;
branches;
next	1.17;

1.17
date	2010.03.23.01.57.19;	author krw;	state Exp;
branches;
next	1.16;

1.16
date	2009.02.16.21.19.06;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2004.01.19.00.44.33;	author krw;	state Exp;
branches;
next	1.14;

1.14
date	2003.10.21.18.58.49;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.30.00.32.48;	author krw;	state Exp;
branches;
next	1.12;

1.12
date	2003.03.29.17.52.01;	author krw;	state Exp;
branches;
next	1.11;

1.11
date	2002.11.14.02.31.46;	author krw;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.01.26.54;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.11.21.59.19;	author krw;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2001.11.05.17.25.58;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.26.02.39.05;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.13.04.27.09;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.13.03.24.20;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.10.23.30.39;	author krw;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.09.15.20.27;	author krw;	state Exp;
branches;
next	1.2;

1.2
date	2001.02.08.17.35.05;	author krw;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2001.01.23.04.19.42;	author krw;	state Exp;
branches;
next	;

1.2.4.1
date	2001.05.14.22.23.52;	author niklas;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2001.10.31.03.22.42;	author nate;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2001.11.13.21.10.00;	author niklas;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2002.03.28.11.51.01;	author niklas;	state Exp;
branches;
next	1.2.4.5;

1.2.4.5
date	2003.03.28.00.38.13;	author niklas;	state Exp;
branches;
next	1.2.4.6;

1.2.4.6
date	2003.05.13.19.35.01;	author ho;	state Exp;
branches;
next	1.2.4.7;

1.2.4.7
date	2004.02.19.10.56.18;	author niklas;	state Exp;
branches;
next	;

1.9.2.1
date	2002.06.11.03.42.18;	author art;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2003.05.19.21.54.24;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.18
log
@iopoolification. Tested on my Initio INIC-950. Various eyes including
miod@@, oga@@, dlg@@, matthew@@.
@
text
@/*	$OpenBSD: iha.h,v 1.17 2010/03/23 01:57:19 krw Exp $ */
/*-------------------------------------------------------------------------
 *
 * Device driver for the INI-9XXXU/UW or INIC-940/950  PCI SCSI Controller.
 *
 * Written for 386bsd and FreeBSD by
 *	Winston Hung		<winstonh@@initio.com>
 *
 * Copyright (c) 1997-1999 Initio Corp
 * Copyright (c) 2000-2002 Ken Westerback
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer,
 *    without modification, immediately at the beginning of the file.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 *-------------------------------------------------------------------------
 */

#define IHA_MAX_SG_ENTRIES	33
#define IHA_MAX_TARGETS		16
#define IHA_MAX_SCB		32
#define IHA_MAX_EXTENDED_MSG	 4 /* SDTR(3) and WDTR(4) only */

/*
 *   Scatter-Gather Element Structure
 */
struct iha_sg_element {
	u_int32_t SG_Addr; /* Physical address of segment */
	u_int32_t SG_Len;  /* Length of segment */
};

/*
 * iha_scb - SCSI Request structure used by the
 *	     Tulip (aka inic-940/950). Note that 32
 *	     bit pointers and ints are assumed!
 */

struct iha_scb {
	TAILQ_ENTRY(iha_scb) SCB_ScbList;

	bus_dmamap_t	SCB_DataDma;	/* maps xfer buffer	     */
	bus_dmamap_t	SCB_SGDma;	/* maps scatter-gather list  */

	int	  SCB_Status;		   /* Current status of the SCB	     */
#define		      STATUS_QUEUED   0	   /*	   SCB one of Free/Done/Pend */
#define		      STATUS_RENT     1	   /*	   SCB allocated, not queued */
#define		      STATUS_SELECT   2	   /*	   SCB being selected	     */
#define		      STATUS_BUSY     3	   /*	   SCB I/O is active	     */
	u_int8_t  SCB_NxtStat;		   /* Next state function to apply   */
	int	  SCB_Flags;		   /* SCB Flags (xs->flags + private)*/
#define		      FLAG_RSENS      0x00010000 /*	 Request Sense sent  */
#define		      FLAG_SG	      0x00020000 /*      Scatter/Gather used */
#define		      FLAG_DIR	      (SCSI_DATA_IN | SCSI_DATA_OUT)
	u_int8_t  SCB_Target;		   /* Target Id			     */
	u_int8_t  SCB_Lun;		   /* Lun			     */
	u_int32_t SCB_BufChars;		   /* size of data buf		     */
	u_int32_t SCB_BufCharsLeft;	   /* Chars left to xfer to/from buf */
	u_int8_t  SCB_HaStat;		   /* Status of Host Adapter	     */
#define		      HOST_OK	      0x00 /*	   OK - operation a success  */
#define		      HOST_TIMED_OUT  0x01 /*      Request timed out         */
#define		      HOST_SPERR      0x10 /*	   SCSI parity error	     */
#define		      HOST_SEL_TOUT   0x11 /*	   Selection Timeout	     */
#define		      HOST_DO_DU      0x12 /*	   Data Over/Underrun	     */
#define		      HOST_BAD_PHAS   0x14 /*	   Unexpected SCSI bus phase */
#define		      HOST_SCSI_RST   0x1B /*	   SCSI bus was reset	     */
#define		      HOST_DEV_RST    0x1C /*	   Device was reset	     */
	u_int8_t  SCB_TaStat;		   /* SCSI Status Byte		     */
	u_int8_t  SCB_Ident;		   /* Identity Message		     */
	u_int8_t  SCB_TagMsg;		   /* Tag Message		     */
	u_int8_t  SCB_TagId;		   /* Queue Tag			     */

	u_int8_t  SCB_CDB[12];		   /* SCSI command being executed    */
	u_int8_t  SCB_CDBLen;		   /* Length of SCSI command in CDB  */

	struct scsi_xfer *SCB_Xs;	   /* xs this SCB is executing	     */
					   
	struct iha_sg_element SCB_SGList[IHA_MAX_SG_ENTRIES]; /* SG list     */
	u_int16_t SCB_SGCount;		   /* # segments in list             */
	u_int16_t SCB_SGIdx;		   /* index to current element       */

	struct scsi_sense_data	SCB_ScsiSenseData; /* DMA-able sense buffer  */
	struct tcs	       *SCB_Tcs;   	   /* tcs for SCB_Target     */
};

/*
 *   Target Device Control Structure
 */
struct tcs {
	u_int16_t TCS_Flags;
#define		      FLAG_SCSI_RATE	 0x0007 /* Index into tul_rate_tbl[] */
#define		      FLAG_EN_DISC	 0x0008 /* Enable disconnect	     */
#define		      FLAG_NO_SYNC	 0x0010 /* No sync data transfer     */
#define		      FLAG_NO_WIDE	 0x0020 /* No wide data transfer     */
#define		      FLAG_1GIGA	 0x0040 /* 255 hd/63 sec (64/32)     */
#define		      FLAG_SPINUP	 0x0080 /* Start disk drive	     */
#define		      FLAG_WIDE_DONE	 0x0100 /* WDTR msg has been sent    */
#define		      FLAG_SYNC_DONE	 0x0200 /* SDTR msg has been sent    */
#define		      FLAG_NO_NEG_SYNC   (FLAG_NO_SYNC | FLAG_SYNC_DONE)
#define		      FLAG_NO_NEG_WIDE   (FLAG_NO_WIDE | FLAG_WIDE_DONE)
	u_int8_t  TCS_JS_Period;
#define		      PERIOD_WIDE_SCSI	 0x80	/* Enable Wide SCSI	     */
#define		      PERIOD_SYXPD	 0x70	/* Synch. SCSI Xfer rate     */
#define		      PERIOD_SYOFS	 0x0f	/* Synch. SCSI Offset	     */
	u_int8_t  TCS_SConfig0;
	u_int8_t  TCS_TagCnt;

	struct iha_scb  *TCS_NonTagScb;
};

struct iha_softc {
	struct device	     sc_dev;

	bus_space_tag_t	     sc_iot;
	bus_space_handle_t   sc_ioh;

	bus_dma_tag_t	     sc_dmat;
	bus_dmamap_t	     sc_dmamap;

	struct	scsi_link    sc_link;
	struct	scsi_adapter sc_adapter;

	void		    *sc_ih;

	/*
	 *   Initio specific fields
	 */
	u_int8_t  HCS_Flags;
#define		      FLAG_EXPECT_DISC	     0x01
#define		      FLAG_EXPECT_SELECT     0x02
#define		      FLAG_EXPECT_RESET	     0x10
#define		      FLAG_EXPECT_DONE_DISC  0x20
	u_int8_t  HCS_Semaph;
#define		      SEMAPH_IN_MAIN	     0x00   /* Already in tulip_main */
	u_int8_t  HCS_Phase;			    /* MSG  C/D	 I/O	     */
#define		      PHASE_DATA_OUT	     0x00   /*	0    0	  0	     */
#define		      PHASE_DATA_IN	     0x01   /*	0    0	  1	     */
#define		      PHASE_CMD_OUT	     0x02   /*	0    1	  0	     */
#define		      PHASE_STATUS_IN	     0x03   /*	0    1	  1	     */
#define		      PHASE_MSG_OUT	     0x06   /*	1    1	  0	     */
#define		      PHASE_MSG_IN	     0x07   /*	1    1	  1	     */
	u_int8_t  HCS_JSInt;
	u_int8_t  HCS_JSStatus0;
	u_int8_t  HCS_JSStatus1;
	u_int8_t  HCS_SConf1;
	u_int8_t  HCS_Msg[IHA_MAX_EXTENDED_MSG];    /* [0] len, [1] Msg Code */

	struct iha_scb *HCS_Scb;		    /* SCB array	     */
	struct iha_scb *HCS_ActScb;	    /* SCB using SCSI bus    */

	TAILQ_HEAD(, iha_scb) HCS_FreeScb, HCS_PendScb, HCS_DoneScb;

	struct tcs HCS_Tcs[IHA_MAX_TARGETS];

	struct mutex		sc_scb_mtx;	/* scb queue protection */
	struct scsi_iopool	sc_iopool;
};

/*
 *   EEPROM for one SCSI Channel
 *
 */
struct iha_nvram_scsi {
	u_int8_t  NVM_SCSI_Id;	    /* 0x00 Channel Adapter SCSI Id          */
	u_int8_t  NVM_SCSI_Cfg;	    /* 0x01 Channel configuration            */
#define		      CFG_SCSI_RESET 0x0001 /*     Reset bus at power up     */
#define		      CFG_EN_PAR     0x0002 /*     SCSI parity enable        */
#define		      CFG_ACT_TERM1  0x0004 /*     Enable active term 1      */
#define		      CFG_ACT_TERM2  0x0008 /*     Enable active term 2      */
#define		      CFG_AUTO_TERM  0x0010 /*     Enable auto terminator    */
#define		      CFG_EN_PWR     0x0080 /*     Enable power mgmt         */
	u_int8_t  NVM_SCSI_CfgByte2;        /* 0x02 Unused Channel Cfg byte 2*/
	u_int8_t  NVM_SCSI_Targets;	    /* 0x03 Number of SCSI targets   */
					    /* 0x04 Lower bytes of targ flags*/
	u_int8_t  NVM_SCSI_TargetFlags[IHA_MAX_TARGETS];
};

/*
 * Tulip (aka ini-940/950) Serial EEPROM Layout
 *
 */
struct iha_nvram {
	/* ---------- Header ------------------------------------------------*/
	u_int16_t  NVM_Signature;	       /* 0x00 NVRAM Signature	     */
#define		       SIGNATURE	0xC925
	u_int8_t   NVM_Size;		       /* 0x02 Size of data structure*/
	u_int8_t   NVM_Revision;	       /* 0x03 Rev. of data structure*/

	/* ---------- Host Adapter Structure --------------------------------*/
	u_int8_t   NVM_ModelByte0;	       /* 0x04 Model number (byte 0) */
	u_int8_t   NVM_ModelByte1;	       /* 0x05 Model number (byte 1) */
	u_int8_t   NVM_ModelInfo;	       /* 0x06 Model information     */
	u_int8_t   NVM_NumOfCh;		       /* 0x07 Number of SCSI channel*/
	u_int8_t   NVM_BIOSConfig1;	       /* 0x08 BIOS configuration 1  */
#define		       BIOSCFG_ENABLE	  0x01 /*      BIOS enable	     */
#define		       BIOSCFG_8DRIVE	  0x02 /*      Support > 2 drives    */
#define		       BIOSCFG_REMOVABLE  0x04 /*      Support removable drv */
#define		       BIOSCFG_INT19	  0x08 /*      Intercept int 19h     */
#define		       BIOSCFG_BIOSSCAN	  0x10 /*      Dynamic BIOS scan     */
#define		       BIOSCFG_LUNSUPPORT 0x40 /*      Support LUN	     */
#define		       BIOSCFG_DEFAULT	  (BIOSCFG_ENABLE)
	u_int8_t   NVM_BIOSConfig2;	       /* 0x09 BIOS configuration 2  */
	u_int8_t   NVM_HAConfig1;	       /* 0x0a Host adapter config 1 */
#define		       HACFG_BOOTIDMASK	  0x0F /*      Boot ID number	     */
#define		       HACFG_LUNMASK	  0x70 /*      Boot LUN number	     */
#define		       HACFG_CHANMASK	  0x80 /*      Boot Channel number   */
	u_int8_t   NVM_HAConfig2;	       /* 0x0b Host adapter config 2 */
	struct iha_nvram_scsi NVM_Scsi[2];     /* 0x0c		             */
	u_int8_t   NVM_Reserved[10];	       /* 0x34			     */

	/* --------- CheckSum -----------------------------------------------*/
	u_int16_t  NVM_CheckSum;	       /* 0x3E Checksum of NVRam     */
};

/*
 *  Tulip (aka inic-940/950) PCI Configuration Space Initio Specific Registers
 *
 *  Offsets 0x00 through 0x3f are the standard PCI Configuration Header
 *  registers.
 *
 *  Offsets 0x40 through 0x4f, 0x51, 0x53, 0x57, 0x5b, 0x5e and 0x5f are
 *  reserved registers.
 *
 *  Registers 0x50 and 0x52 always read as 0.
 *
 *  The register offset names and associated bit field names are taken
 *  from the Inic-950 Data Sheet, Version 2.1, March 1997
 */
#define TUL_GCTRL0	0x54	       /* R/W Global Control 0		     */
#define	    EEPRG	    0x04       /*     Enable EEPROM Programming	     */
#define TUL_GCTRL1	0x55	       /* R/W Global Control 1		     */
#define	    ATDEN	    0x01       /*     Auto Termination Detect Enable */
#define TUL_GSTAT	0x56	       /* R/W Global Status - connector type */
#define TUL_EPAD0	0x58	       /* R/W External EEPROM Addr (lo byte) */
#define TUL_EPAD1	0x59	       /* R/W External EEPROM Addr (hi byte) */
#define TUL_PNVPG	0x5A	       /* R/W Data port to external BIOS     */
#define TUL_EPDATA	0x5C	       /* R/W EEPROM Data port		     */
#define TUL_NVRAM	0x5D	       /* R/W Non-volatile RAM port	     */
#define     NVREAD	    0x80       /*     Read from given NVRAM addr     */
#define     NVWRITE         0x40       /*     Write to given NVRAM addr	     */
#define     NVENABLE_ERASE  0x30       /*     Enable NVRAM Erase/Write       */
#define	    NVRCS	    0x08       /*     Select external NVRAM	     */
#define	    NVRCK	    0x04       /*     NVRAM Clock		     */
#define	    NVRDO	    0x02       /*     NVRAM Write Data		     */
#define	    NVRDI	    0x01       /*     NVRAM Read  Data		     */

/*
 *   Tulip (aka inic-940/950) SCSI Registers
 */
#define TUL_STCNT0	0x80	       /* R/W 24 bit SCSI Xfer Count	     */
#define	    TCNT	    0x00ffffff /*     SCSI Xfer Transfer Count	     */
#define TUL_SFIFOCNT	0x83	       /* R/W  5 bit FIFO counter	     */
#define	    FIFOC	    0x1f       /*     SCSI Offset Fifo Count	     */
#define TUL_SISTAT	0x84	       /* R   Interrupt Register	     */
#define	    RSELED	    0x80       /*     Reselected		     */
#define	    STIMEO	    0x40       /*     Selected/Reselected Timeout    */
#define	    SBSRV	    0x20       /*     SCSI Bus Service		     */
#define	    SRSTD	    0x10       /*     SCSI Reset Detected	     */
#define	    DISCD	    0x08       /*     Disconnected Status	     */
#define	    SELED	    0x04       /*     Select Interrupt		     */
#define	    SCAMSCT	    0x02       /*     SCAM selected		     */
#define	    SCMDN	    0x01       /*     Command Complete		     */
#define TUL_SIEN	0x84	       /* W   Interrupt enable		     */
#define	    ALL_INTERRUPTS  0xff
#define TUL_STAT0	0x85	       /* R   Status 0			     */
#define	    INTPD	    0x80       /*     Interrupt pending		     */
#define	    SQACT	    0x40       /*     Sequencer active		     */
#define	    XFCZ	    0x20       /*     Xfer counter zero		     */
#define	    SFEMP	    0x10       /*     FIFO empty		     */
#define	    SPERR	    0x08       /*     SCSI parity error		     */
#define	    PH_MASK	    0x07       /*     SCSI phase mask		     */
#define TUL_SCTRL0	0x85	       /* W   Control 0			     */
#define	    RSSQC	    0x20       /*     Reset sequence counter	     */
#define	    RSFIFO	    0x10       /*     Flush FIFO		     */
#define	    CMDAB	    0x04       /*     Abort command (sequence)	     */
#define	    RSMOD	    0x02       /*     Reset SCSI Chip		     */
#define	    RSCSI	    0x01       /*     Reset SCSI Bus		     */
#define TUL_STAT1	0x86	       /* R   Status 1			     */
#define	    STRCV	    0x80       /*     Status received		     */
#define	    MSGST	    0x40       /*     Message sent		     */
#define	    CPDNE	    0x20       /*     Data phase done		     */
#define	    DPHDN	    0x10       /*     Data phase done		     */
#define	    STSNT	    0x08       /*     Status sent		     */
#define	    SXCMP	    0x04       /*     Xfer completed		     */
#define	    SLCMP	    0x02       /*     Selection completed	     */
#define	    ARBCMP	    0x01       /*     Arbitration completed	     */
#define TUL_SCTRL1	0x86	       /* W   Control 1			     */
#define	    ENSCAM	    0x80       /*     Enable SCAM		     */
#define	    NIDARB	    0x40       /*     No ID for Arbitration	     */
#define	    ENLRS	    0x20       /*     Low Level Reselect	     */
#define	    PWDN	    0x10       /*     Power down mode		     */
#define	    WCPU	    0x08       /*     Wide CPU			     */
#define	    EHRSL	    0x04       /*     Enable HW reselect	     */
#define	    ESBUSOUT	    0x02       /*     Enable SCSI data bus out latch */
#define	    ESBUSIN	    0x01       /*     Enable SCSI data bus in latch  */
#define TUL_SSTATUS2	0x87	       /* R   Status 2			     */
#define	    SABRT	    0x80       /*     Command aborted		     */
#define	    OSCZ	    0x40       /*     Offset counter zero	     */
#define	    SFFUL	    0x20       /*     FIFO full			     */
#define	    TMCZ	    0x10       /*     Timeout counter zero	     */
#define	    BSYGN	    0x08       /*     Busy release		     */
#define	    PHMIS	    0x04       /*     Phase mismatch		     */
#define	    SBEN	    0x02       /*     SCSI data bus enable	     */
#define	    SRST	    0x01       /*     SCSI bus reset in progress     */
#define TUL_SCONFIG0	0x87	       /* W   Configuration		     */
#define	    PHLAT	    0x80       /*     Enable phase latch	     */
#define	    ITMOD	    0x40       /*     Initiator mode		     */
#define	    SPCHK	    0x20       /*     Enable SCSI parity	     */
#define	    ADMA8	    0x10       /*     Alternate dma 8-bits mode	     */
#define	    ADMAW	    0x08       /*     Alternate dma 16-bits mode     */
#define	    EDACK	    0x04       /*     Enable DACK in wide SCSI xfer  */
#define	    ALTPD	    0x02       /*     Alternate sync period mode     */
#define	    DSRST	    0x01       /*     Disable SCSI Reset signal	     */
#define	    SCONFIG0DEFAULT (PHLAT | ITMOD | ALTPD | DSRST)
#define TUL_SOFSC	0x88	       /* R   Offset			     */
#define TUL_SYNCM	0x88	       /* W   Sync. Xfer Period & Offset     */
#define TUL_SBID	0x89	       /* R   SCSI BUS ID		     */
#define TUL_SID		0x89	       /* W   SCSI ID			     */
#define TUL_SALVC	0x8A	       /* R   FIFO Avail Cnt/Identify Msg    */
#define TUL_STIMO	0x8A	       /* W   Sel/Resel Time Out Register    */
#define TUL_SDATI	0x8B	       /* R   SCSI Bus contents		     */
#define TUL_SDAT0	0x8B	       /* W   SCSI Data Out		     */
#define TUL_SFIFO	0x8C	       /* R/W FIFO			     */
#define TUL_SSIGI	0x90	       /* R   SCSI signal in		     */
#define	    REQ		    0x80       /*     REQ signal		     */
#define	    ACK		    0x40       /*     ACK signal		     */
#define	    BSY		    0x20       /*     BSY signal		     */
#define	    SEL		    0x10       /*     SEL signal		     */
#define	    ATN		    0x08       /*     ATN signal		     */
#define	    MSG		    0x04       /*     MSG signal		     */
#define	    CD		    0x02       /*     C/D signal		     */
#define	    IO		    0x01       /*     I/O signal		     */
#define TUL_SSIGO	0x90	       /* W   SCSI signal out		     */
#define TUL_SCMD	0x91	       /* R/W SCSI Command		     */
#define	    NO_OP	    0x00       /*     Place Holder for tulip_wait()  */
#define	    SEL_NOATN	    0x01       /*     Select w/o ATN Sequence	     */
#define	    XF_FIFO_OUT	    0x03       /*     FIFO Xfer Information out	     */
#define	    MSG_ACCEPT	    0x0F       /*     Message Accept		     */
#define	    SEL_ATN	    0x11       /*     Select w ATN Sequence	     */
#define	    SEL_ATNSTOP	    0x12       /*     Select w ATN & Stop Sequence   */
#define	    SELATNSTOP	    0x1E       /*     Select w ATN & Stop Sequence   */
#define	    SEL_ATN3	    0x31       /*     Select w ATN3 Sequence	     */
#define	    XF_DMA_OUT	    0x43       /*     DMA Xfer Information out	     */
#define	    EN_RESEL	    0x80       /*     Enable Reselection	     */
#define	    XF_FIFO_IN	    0x83       /*     FIFO Xfer Information in	     */
#define	    CMD_COMP	    0x84       /*     Command Complete Sequence	     */
#define	    XF_DMA_IN	    0xC3       /*     DMA Xfer Information in	     */
#define TUL_STEST0	0x92	       /* R/W Test0			     */
#define TUL_STEST1	0x93	       /* R/W Test1			     */

/*
 *   Tulip (aka inic-940/950) DMA Registers
 */
#define TUL_DXPA	0xC0	       /* R/W DMA      Xfer Physcl Addr	 0-31*/
#define TUL_DXPAE	0xC4	       /* R/W DMA      Xfer Physcl Addr 32-63*/
#define TUL_DCXA	0xC8	       /* R   DMA Curr Xfer Physcl Addr	 0-31*/
#define TUL_DCXAE	0xCC	       /* R   DMA Curr Xfer Physcl Addr 32-63*/
#define TUL_DXC		0xD0	       /* R/W DMA Xfer Counter		     */
#define TUL_DCXC	0xD4	       /* R   DMA Current Xfer Counter	     */
#define TUL_DCMD	0xD8	       /* R/W DMA Command Register	     */
#define	    SGXFR	    0x80       /*     Scatter/Gather Xfer	     */
#define	    RSVD	    0x40       /*     Reserved - always reads as 0   */
#define	    XDIR	    0x20       /*     Xfer Direction 0/1 = out/in    */
#define	    BMTST	    0x10       /*     Bus Master Test		     */
#define	    CLFIFO	    0x08       /*     Clear FIFO		     */
#define	    ABTXFR	    0x04       /*     Abort Xfer		     */
#define	    FRXFR	    0x02       /*     Force Xfer		     */
#define	    STRXFR	    0x01       /*     Start Xfer		     */
#define	    ST_X_IN	    (XDIR | STRXFR)
#define	    ST_X_OUT	    (	    STRXFR)
#define	    ST_SG_IN	    (SGXFR | ST_X_IN)
#define	    ST_SG_OUT	    (SGXFR | ST_X_OUT)
#define TUL_ISTUS0	0xDC	       /* R/W Interrupt Status Register	     */
#define	    DGINT	    0x80       /*     DMA Global Interrupt	     */
#define	    RSVRD0	    0x40       /*     Reserved			     */
#define	    RSVRD1	    0x20       /*     Reserved			     */
#define	    SCMP	    0x10       /*     SCSI Complete		     */
#define	    PXERR	    0x08       /*     PCI Xfer Error		     */
#define	    DABT	    0x04       /*     DMA Xfer Aborted		     */
#define	    FXCMP	    0x02       /*     Forced Xfer Complete	     */
#define	    XCMP	    0x01       /*     Bus Master Xfer Complete	     */
#define TUL_ISTUS1	0xDD	       /* R   DMA status Register	     */
#define	    SCBSY	    0x08       /*     SCSI Busy			     */
#define	    FFULL	    0x04       /*     FIFO Full			     */
#define	    FEMPT	    0x02       /*     FIFO Empty		     */
#define	    XPEND	    0x01       /*     Xfer pending		     */
#define TUL_IMSK	0xE0	       /* R/W Interrupt Mask Register	     */
#define	    MSCMP	    0x10       /*     Mask SCSI Complete	     */
#define	    MPXFER	    0x08       /*     Mask PCI Xfer Error	     */
#define	    MDABT	    0x04       /*     Mask Bus Master Abort	     */
#define	    MFCMP	    0x02       /*     Mask Force Xfer Complete	     */
#define	    MXCMP	    0x01       /*     Mask Bus Master Xfer Complete  */
#define	    MASK_ALL	    (MXCMP | MFCMP | MDABT | MPXFER | MSCMP)
#define TUL_DCTRL0	0xE4	       /* R/W DMA Control Register	     */
#define	    SXSTP	    0x80       /*     SCSI Xfer Stop		     */
#define	    RPMOD	    0x40       /*     Reset PCI Module		     */
#define	    RSVRD2	    0x20       /*     SCSI Xfer Stop		     */
#define	    PWDWN	    0x10       /*     Power Down		     */
#define	    ENTM	    0x08       /*     Enable SCSI Terminator Low     */
#define	    ENTMW	    0x04       /*     Enable SCSI Terminator High    */
#define	    DISAFC	    0x02       /*     Disable Auto Clear	     */
#define	    LEDCTL	    0x01       /*     LED Control		     */
#define TUL_DCTRL1	0xE5	       /* R/W DMA Control Register 1	     */
#define	    SDWS	    0x01       /*     SCSI DMA Wait State	     */
#define TUL_DFIFO	0xE8	       /* R/W DMA FIFO			     */

#define TUL_WCTRL	0xF7	       /* ?/? Bus master wait state control  */
#define TUL_DCTRL	0xFB	       /* ?/? DMA delay control		     */

/* Functions used by higher SCSI layers, the kernel, or iha.c and iha_pci.c  */

void iha_scsi_cmd(struct scsi_xfer *);
int  iha_intr(void *);
void iha_minphys(struct buf *, struct scsi_link *);
int  iha_init_tulip(struct iha_softc *);


@


1.17
log
@Change the scsi_cmd function member of scsi_adapter from int to
void. Use XS_NO_CCB error in the scsi command (xs) to report the
NO_CCB condition. Eliminates all SUCCESSFULLY_QUEUED and COMPLETE
confusion and untangles the midlayer from the adapter a bit more.

Eyes and some fixes by miod@@

There may be some compile issues on little used (i.e. I don't have
any) drivers but the change is mechanical and thus easy to remedy.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.16 2009/02/16 21:19:06 miod Exp $ */
d170 3
@


1.16
log
@Extend the scsi_adapter minphys() callback to take a struct scsi_link *
as additional argument. This will allow intermediate layers between
scsi devices such as sd and scsi host adapters to take appropriate
action if necessary.
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.15 2004/01/19 00:44:33 krw Exp $ */
d425 1
a425 1
int  iha_scsi_cmd(struct scsi_xfer *);
@


1.15
log
@Rename a few defines to avoid namespace pollution. The only one used was 'READ' which is now 'NVREAD'.

Potential conflict with SCSI 'READ' spotted by tdeval@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.14 2003/10/21 18:58:49 jmc Exp $ */
d427 1
a427 1
void iha_minphys(struct buf *);
@


1.14
log
@typos from Tom Cosgrove;

Tom: I did not commit a couple of your changes.

i did not include some punctuation fixes (full stops, etc.)
mnemorable -> mnemonic: i decided memorable was probably better
instrunctions -> instruction: i kept the plural
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.13 2003/03/30 00:32:48 krw Exp $ */
d252 3
a254 3
#define     READ	    0x80       /*     Read from given NVRAM addr     */
#define     WRITE           0x40       /*     Write to given NVRAM addr	     */
#define     ENABLE_ERASE    0x30       /*     Enable NVRAM Erase/Write       */
@


1.13
log
@As long as I am here pull in some useful changes from NetBSD.

1) Eliminate some magic numbers.
2) Eliminate some double semi-colons.
3) Rename iha_scsi_req_q to iha_scb.
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.12 2003/03/29 17:52:01 krw Exp $ */
d350 1
a350 1
#define	    XF_FIFO_OUT	    0x03       /*     FIFO Xfer Infomation out	     */
d356 1
a356 1
#define	    XF_DMA_OUT	    0x43       /*     DMA Xfer Infomation out	     */
d358 1
a358 1
#define	    XF_FIFO_IN	    0x83       /*     FIFO Xfer Infomation in	     */
d360 1
a360 1
#define	    XF_DMA_IN	    0xC3       /*     DMA Xfer Infomation in	     */
@


1.12
log
@Another chunk of bus_dma fixes. May actually approach correctness now.

1) Actually map and sync scatter gather list that is also DMA'd.

2) Actually map and sync request sense buffer.

3) Actually POSTREAD/WRITE sync data buffer after I/O, rather than
skipping it because the I/O was successful and no chars were left to
xfer.

4) Eliminate extra fields, clarify some names, reorder fields to
clarify their use.

5) Put common scatter gather preparation logic into separate function.

6) If insertion of request sense command fails, complete active
command with XS_SENSE, but zero'd sense data.

7) Eliminate physical address arithmetic as much as possible,
centralizing remaining manipulations in code actually sending
addresses to adapter.
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.11 2002/11/14 02:31:46 krw Exp $ */
d50 3
a52 3
 * iha_scsi_req_q - SCSI Request structure used by the
 *		    Tulip (aka inic-940/950). Note that 32
 *		    bit pointers and ints are assumed!
d55 2
a56 2
struct iha_scsi_req_q {
	TAILQ_ENTRY(iha_scsi_req_q) SCB_ScbList;
d124 1
a124 1
	struct iha_scsi_req_q  *TCS_NonTagScb;
d164 2
a165 2
	struct iha_scsi_req_q *HCS_Scb;		    /* SCB array	     */
	struct iha_scsi_req_q *HCS_ActScb;	    /* SCB using SCSI bus    */
d167 1
a167 1
	TAILQ_HEAD(, iha_scsi_req_q) HCS_FreeScb, HCS_PendScb, HCS_DoneScb;
@


1.11
log
@Rework iha copyight verbiage to make clear what needs to be clear for
it to remain in the tree. With agreement of Initio.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.10 2002/03/14 01:26:54 millert Exp $ */
d45 2
a46 2
	u_int32_t SG_Ptr;  /* Data Pointer */
	u_int32_t SG_Len;  /* Data Length  */
d58 3
a66 2
	u_int16_t SCB_SGIdx;		   /* Scatter/Gather Index	     */
	u_int16_t SCB_SGMax;		   /* Scatter/Gather # valid entries */
d73 2
a74 2
	u_int32_t SCB_BufPAddr;		   /* Data Buffer Physical Addr	     */
	u_int32_t SCB_BufLen;		   /* Data Allocation Length	     */
a84 3
	u_int8_t  SCB_SGLen;		   /* # of valid entries in SGList   */
	u_int8_t  SCB_SenseLen;		   /* Sense Data Allocation Length   */
	u_int8_t  SCB_CDBLen;		   /* CDB Length		     */
d88 3
a90 3
	u_int8_t  SCB_CDB[12];		   /* SCSI Command		     */
	u_int32_t SCB_SGPAddr;		   /* SGList Physical Address	     */
	u_int32_t SCB_SensePAddr;	   /* Sense Data PhysicalAddress     */
d93 4
d98 2
a99 7
					   /* Start of SG list		     */
	struct iha_sg_element SCB_SGList[IHA_MAX_SG_ENTRIES];

	struct scsi_sense_data	SCB_ScsiSenseData;
	bus_dmamap_t		SCB_Dmamap;/* maps xs->buf xfer buffer	     */
	int			SCB_Timeout; /* in milliseconds              */
	struct tcs	       *SCB_Tcs;   /* tcs for SCB_Target	     */
@


1.10
log
@First round of __P removal in sys
@
text
@d1 2
a2 3
/*	$OpenBSD: iha.h,v 1.9 2001/11/11 21:59:19 krw Exp $ */
/*
 * Initio INI-9xxxU/UW SCSI Device Driver
d4 7
a10 2
 * Copyright (c) 2000-2001 Ken Westerback
 * All rights reserved.
a31 14
 *
 *-------------------------------------------------------------------------
 *
 * Ported from i91uscsi.h, provided by Initio Corporation, which probably
 * came from the same people who provided i91u.c:
 *
 * Device driver for the INI-9XXXU/UW or INIC-940/950  PCI SCSI Controller.
 *
 * FreeBSD
 *
 *  Written for 386bsd and FreeBSD by
 *	Winston Hung		<winstonh@@initio.com>
 *
 * Copyright (c) 1997-99 Initio Corp.  All rights reserved.
@


1.9
log
@Remove local defines for SCSI status codes and use those now
defined in scsi_all.h.
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.8 2001/11/05 17:25:58 art Exp $ */
d438 4
a441 4
int  iha_scsi_cmd   __P((struct scsi_xfer *));
int  iha_intr	    __P((void *));
void iha_minphys    __P((struct buf *));
int  iha_init_tulip __P((struct iha_softc *));
@


1.9.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.9 2001/11/11 21:59:19 krw Exp $ */
d438 4
a441 4
int  iha_scsi_cmd(struct scsi_xfer *);
int  iha_intr(void *);
void iha_minphys(struct buf *);
int  iha_init_tulip(struct iha_softc *);
@


1.9.2.2
log
@sync
@
text
@d1 3
a3 7
/*	$OpenBSD$ */
/*-------------------------------------------------------------------------
 *
 * Device driver for the INI-9XXXU/UW or INIC-940/950  PCI SCSI Controller.
 *
 * Written for 386bsd and FreeBSD by
 *	Winston Hung		<winstonh@@initio.com>
d5 2
a6 2
 * Copyright (c) 1997-1999 Initio Corp
 * Copyright (c) 2000-2002 Ken Westerback
d30 14
d55 2
a56 2
	u_int32_t SG_Addr; /* Physical address of segment */
	u_int32_t SG_Len;  /* Length of segment */
d60 3
a62 3
 * iha_scb - SCSI Request structure used by the
 *	     Tulip (aka inic-940/950). Note that 32
 *	     bit pointers and ints are assumed!
d65 2
a66 5
struct iha_scb {
	TAILQ_ENTRY(iha_scb) SCB_ScbList;

	bus_dmamap_t	SCB_DataDma;	/* maps xfer buffer	     */
	bus_dmamap_t	SCB_SGDma;	/* maps scatter-gather list  */
d74 2
d82 2
a83 2
	u_int32_t SCB_BufChars;		   /* size of data buf		     */
	u_int32_t SCB_BufCharsLeft;	   /* Chars left to xfer to/from buf */
d94 3
d100 3
d104 1
a104 2
	u_int8_t  SCB_CDB[12];		   /* SCSI command being executed    */
	u_int8_t  SCB_CDBLen;		   /* Length of SCSI command in CDB  */
d106 2
a107 5
	struct scsi_xfer *SCB_Xs;	   /* xs this SCB is executing	     */
					   
	struct iha_sg_element SCB_SGList[IHA_MAX_SG_ENTRIES]; /* SG list     */
	u_int16_t SCB_SGCount;		   /* # segments in list             */
	u_int16_t SCB_SGIdx;		   /* index to current element       */
d109 4
a112 2
	struct scsi_sense_data	SCB_ScsiSenseData; /* DMA-able sense buffer  */
	struct tcs	       *SCB_Tcs;   	   /* tcs for SCB_Target     */
d137 1
a137 1
	struct iha_scb  *TCS_NonTagScb;
d177 2
a178 2
	struct iha_scb *HCS_Scb;		    /* SCB array	     */
	struct iha_scb *HCS_ActScb;	    /* SCB using SCSI bus    */
d180 1
a180 1
	TAILQ_HEAD(, iha_scb) HCS_FreeScb, HCS_PendScb, HCS_DoneScb;
@


1.8
log
@Switch everything to the new bus_dmamap_sync API.
Most work by Wilbern Cobb <vedge@@csoft.org> with some fixes from me, mickey@@
and drahn@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.7 2001/08/26 02:39:05 krw Exp $ */
a49 6

#define SCSI_CONDITION_MET    0x04 /* SCSI Status codes not defined */
#define SCSI_INTERM_COND_MET  0x14 /*     in scsi_all.h             */
#define SCSI_RSERV_CONFLICT   0x18
#define SCSI_CMD_TERMINATED   0x22
#define SCSI_ACA_ACTIVE	      0x30
@


1.7
log
@Prepare for transition to 5-parameter bus_dmamap_sync() by creating and
using *_bus_dmamap_sync() defines that are defined appropriately
depending on __HAS_NEW_BUS_DMAMAP_SYNC.

Most of the code changes are simple reversions to the original NetBSD
code.

Slip in a siop_script_sync() instead of a manually done code section.
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.6 2001/07/13 04:27:09 krw Exp $ */
a447 10

#ifdef __HAS_NEW_BUS_DMAMAP_SYNC
#define	iha_bus_dmamap_sync(tag, map, off, len, op)	\
    bus_dmamap_sync((tag), (map), (off), (len), (op))
#else
#define	iha_bus_dmamap_sync(tag, map, off, len, op)	\
    bus_dmamap_sync((tag), (map), (op))
#endif


@


1.6
log
@Change references to inic-950 to inic-940/950 to reflect chips
actually supported.

Update copyright to include 2001.

Fold iha_se2_rd_all() into iha_read_eeprom(), eliminating magic number
31 at the same time, calculating correct offset of checksum at run
time instead.

Eliminate static global variable iha_nvram in favour of dynamic
variable in iha_init_tulip(), which is only place it is used.

Rectify a few typos in comments.
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.5 2001/07/13 03:24:20 krw Exp $ */
d449 7
a455 2


@


1.5
log
@Remove static'ness of functions in line with normal OpenBSD
preferences.

Rename tul_* functions/variables iha_* for consistancy, since all are
now visible.

As updating the EEPROM did not work, don't try. Remove now unused
static dftNvram variable, and functions used only in trying to write
it to EEPROM.

Make iha_rate_tbl a const.
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.4 2001/07/10 23:30:39 krw Exp $ */
d5 1
a5 1
 * Copyright (c) 2000 Ken Westerback
d67 1
a67 1
 *		    Tulip (aka inic-950). Note that 32
d211 1
a211 1
 * Tulip (aka ini-950) Serial EEPROM Layout
d248 1
a248 1
 *  Tulip (aka inic-950) PCI Configuration Space Initio Specific Registers
d259 1
a259 1
 *  from the Init-950 Data Sheet, Version 2.1, March 1997
d280 1
a280 1
 *   Tulip (aka inic-950) SCSI Registers
d384 1
a384 1
 *   Tulip (aka inic-950) DMA Registers
@


1.4
log
@Use offsetof() from sys/param.h, not a local define.
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.3 2001/07/09 15:20:27 krw Exp $ */
d195 1
a195 1
struct nvram_scsi {
a203 1
#define		      CFG_DEFAULT (CFG_SCSI_RESET | CFG_AUTO_TERM | CFG_EN_PAR)
a207 1
#define		      FLAG_DEFAULT   (FLAG_NO_WIDE | FLAG_1GIGA | FLAG_EN_DISC)
d214 1
a214 1
struct nvram {
d240 1
a240 1
	struct nvram_scsi NVM_Scsi[2];         /* 0x0c		             */
@


1.3
log
@Fix incorrect logic 'optimization' so that sync is negotiated even if
wide is not.

Now my CD drives on the narrow channel of the INI-9100UW negotiate to
the same configuration they do on other cards.
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.2 2001/02/08 17:35:05 krw Exp $ */
a49 2

#define OFFSETOF(type, member)	((size_t)(&((type *)0)->member))
@


1.2
log
@Use <scsi/scsi_message.h> defines rather than homegrown ones.
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.1 2001/01/23 04:19:42 krw Exp $ */
a137 1
#define		      FLAG_NO_NEGOTIATE	 (FLAG_NO_NEG_SYNC | FLAG_NO_NEG_WIDE)
@


1.2.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.2 2001/02/08 17:35:05 krw Exp $ */
@


1.2.4.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.2.4.1 2001/05/14 22:23:52 niklas Exp $ */
d5 1
a5 1
 * Copyright (c) 2000-2001 Ken Westerback
d51 2
d69 1
a69 1
 *		    Tulip (aka inic-940/950). Note that 32
d138 1
d198 1
a198 1
struct iha_nvram_scsi {
d207 1
d212 1
d216 1
a216 1
 * Tulip (aka ini-940/950) Serial EEPROM Layout
d219 1
a219 1
struct iha_nvram {
d245 1
a245 1
	struct iha_nvram_scsi NVM_Scsi[2];     /* 0x0c		             */
d253 1
a253 1
 *  Tulip (aka inic-940/950) PCI Configuration Space Initio Specific Registers
d264 1
a264 1
 *  from the Inic-950 Data Sheet, Version 2.1, March 1997
d285 1
a285 1
 *   Tulip (aka inic-940/950) SCSI Registers
d389 1
a389 1
 *   Tulip (aka inic-940/950) DMA Registers
d454 2
a455 7
#ifdef __HAS_NEW_BUS_DMAMAP_SYNC
#define	iha_bus_dmamap_sync(tag, map, off, len, op)	\
    bus_dmamap_sync((tag), (map), (off), (len), (op))
#else
#define	iha_bus_dmamap_sync(tag, map, off, len, op)	\
    bus_dmamap_sync((tag), (map), (op))
#endif
@


1.2.4.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d51 6
d448 10
@


1.2.4.4
log
@Merge in -current from about a week ago
@
text
@d438 4
a441 4
int  iha_scsi_cmd(struct scsi_xfer *);
int  iha_intr(void *);
void iha_minphys(struct buf *);
int  iha_init_tulip(struct iha_softc *);
@


1.2.4.5
log
@Sync the SMP branch with 3.3
@
text
@d2 2
a3 1
/*-------------------------------------------------------------------------
d5 2
a6 7
 * Device driver for the INI-9XXXU/UW or INIC-940/950  PCI SCSI Controller.
 *
 * Written for 386bsd and FreeBSD by
 *	Winston Hung		<winstonh@@initio.com>
 *
 * Copyright (c) 1997-1999 Initio Corp
 * Copyright (c) 2000-2002 Ken Westerback
d28 14
@


1.2.4.6
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: iha.h,v 1.2.4.5 2003/03/28 00:38:13 niklas Exp $ */
d45 2
a46 2
	u_int32_t SG_Addr; /* Physical address of segment */
	u_int32_t SG_Len;  /* Length of segment */
d50 3
a52 3
 * iha_scb - SCSI Request structure used by the
 *	     Tulip (aka inic-940/950). Note that 32
 *	     bit pointers and ints are assumed!
d55 2
a56 5
struct iha_scb {
	TAILQ_ENTRY(iha_scb) SCB_ScbList;

	bus_dmamap_t	SCB_DataDma;	/* maps xfer buffer	     */
	bus_dmamap_t	SCB_SGDma;	/* maps scatter-gather list  */
d64 2
d72 2
a73 2
	u_int32_t SCB_BufChars;		   /* size of data buf		     */
	u_int32_t SCB_BufCharsLeft;	   /* Chars left to xfer to/from buf */
d84 3
d90 3
d94 1
a94 2
	u_int8_t  SCB_CDB[12];		   /* SCSI command being executed    */
	u_int8_t  SCB_CDBLen;		   /* Length of SCSI command in CDB  */
d96 2
a97 5
	struct scsi_xfer *SCB_Xs;	   /* xs this SCB is executing	     */
					   
	struct iha_sg_element SCB_SGList[IHA_MAX_SG_ENTRIES]; /* SG list     */
	u_int16_t SCB_SGCount;		   /* # segments in list             */
	u_int16_t SCB_SGIdx;		   /* index to current element       */
d99 4
a102 2
	struct scsi_sense_data	SCB_ScsiSenseData; /* DMA-able sense buffer  */
	struct tcs	       *SCB_Tcs;   	   /* tcs for SCB_Target     */
d127 1
a127 1
	struct iha_scb  *TCS_NonTagScb;
d167 2
a168 2
	struct iha_scb *HCS_Scb;		    /* SCB array	     */
	struct iha_scb *HCS_ActScb;	    /* SCB using SCSI bus    */
d170 1
a170 1
	TAILQ_HEAD(, iha_scb) HCS_FreeScb, HCS_PendScb, HCS_DoneScb;
@


1.2.4.7
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d252 3
a254 3
#define     NVREAD	    0x80       /*     Read from given NVRAM addr     */
#define     NVWRITE         0x40       /*     Write to given NVRAM addr	     */
#define     NVENABLE_ERASE  0x30       /*     Enable NVRAM Erase/Write       */
d350 1
a350 1
#define	    XF_FIFO_OUT	    0x03       /*     FIFO Xfer Information out	     */
d356 1
a356 1
#define	    XF_DMA_OUT	    0x43       /*     DMA Xfer Information out	     */
d358 1
a358 1
#define	    XF_FIFO_IN	    0x83       /*     FIFO Xfer Information in	     */
d360 1
a360 1
#define	    XF_DMA_IN	    0xC3       /*     DMA Xfer Information in	     */
@


1.1
log
@Add support for Initio INI-91xx SCSI Cards
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d105 1
a105 4
	u_int8_t  SCB_Ident;		   /* Identity			     */
#define		      IDENT_IDENTITY  0x80 /*	   Must ALWAYS be set	     */
#define		      IDENT_DISC_PRIV 0x40 /*	   Disconnect allowed	     */
#define		      IDENT_LUN	      0x3f /*	   Target LUN		     */
a184 4
#define		      MSG_LEN_SYNC_XFER	     0x03
#define		      MSG_CODE_SYNC_XFER     0x01
#define		      MSG_LEN_WIDE_XFER	     0x02
#define		      MSG_CODE_WIDE_XFER     0x03
a360 29
#define	    MSG_COMP	    0x00       /*     Command Complete		     */
#define	    MSG_EXTEND	    0x01       /*     Extended Message		     */
#define	    MSG_SDP	    0x02       /*     Save Data Pointer		     */
#define	    MSG_RESTORE	    0x03       /*     Restore Pointers		     */
#define	    MSG_DISC	    0x04       /*     Disconnect		     */
#define	    MSG_IDE	    0x05       /*     Initiator Detected Error	     */
#define	    MSG_ABORT	    0x06       /*     Abort			     */
#define	    MSG_REJ	    0x07       /*     Message Reject		     */
#define	    MSG_NOP	    0x08       /*     No Operation		     */
#define	    MSG_PARITY	    0x09       /*     Message Parity Error	     */
#define	    MSG_LINK_COMP   0x0A       /*     Linked Command Complete	     */
#define	    MSG_LINK_FLAG   0x0B       /*     Linked Command Complete w Flag */
#define	    MSG_DEVRST	    0x0C       /*     Bus Device Reset		     */
#define	    MSG_ABORT_TAG   0x0D       /*     Abort Tag			     */
#define	    MSG_CLEAR_QUEUE 0x0E       /*     Clear Queue		     */
#define	    MSG_INIT_RCVRY  0x0F       /*     Initiate Recovery		     */
#define	    MSG_RLSE_RCVRY  0x10       /*     Release Recovery		     */
#define	    MSG_TERM_IO	    0x11       /*     Terminate I/O Process	     */
#define	    MSG_CONT_IO	    0x12       /*     Continue	I/O		     */
#define	    MSG_TARG_XF_DIS 0x13       /*     Target Transfer Disable	     */
				       /*     0x14 -> 0x15 are reserved	     */
#define	    MSG_CLEAR_ACA   0x16       /*     Clear Auto Contingent Active   */
				       /*     0x17 -> 0x1f are reserved	     */
#define	    MSG_STAG	    0x20       /*     Simple Queue Tag		     */
#define	    MSG_HTAG	    0x21       /*     Head of Queue Tag		     */
#define	    MSG_OTAG	    0x22       /*     Ordered Queue Tag		     */
#define	    MSG_IGNOREWIDE  0x23       /*     Ignore Wide Residue	     */
				       /*     0x24 -> 0x7f are reserved	     */
				       /*     0x80 -> 0xff are identify msgs */
@

