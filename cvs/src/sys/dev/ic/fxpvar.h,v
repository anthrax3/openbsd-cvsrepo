head	1.37;
access;
symbols
	OPENBSD_6_1_BASE:1.37
	OPENBSD_6_0:1.37.0.14
	OPENBSD_6_0_BASE:1.37
	OPENBSD_5_9:1.37.0.8
	OPENBSD_5_9_BASE:1.37
	OPENBSD_5_8:1.37.0.10
	OPENBSD_5_8_BASE:1.37
	OPENBSD_5_7:1.37.0.2
	OPENBSD_5_7_BASE:1.37
	OPENBSD_5_6:1.37.0.6
	OPENBSD_5_6_BASE:1.37
	OPENBSD_5_5:1.37.0.4
	OPENBSD_5_5_BASE:1.37
	OPENBSD_5_4:1.35.0.6
	OPENBSD_5_4_BASE:1.35
	OPENBSD_5_3:1.35.0.4
	OPENBSD_5_3_BASE:1.35
	OPENBSD_5_2:1.35.0.2
	OPENBSD_5_2_BASE:1.35
	OPENBSD_5_1_BASE:1.34
	OPENBSD_5_1:1.34.0.8
	OPENBSD_5_0:1.34.0.4
	OPENBSD_5_0_BASE:1.34
	OPENBSD_4_9:1.34.0.2
	OPENBSD_4_9_BASE:1.34
	OPENBSD_4_8:1.32.0.2
	OPENBSD_4_8_BASE:1.32
	OPENBSD_4_7:1.31.0.2
	OPENBSD_4_7_BASE:1.31
	OPENBSD_4_6:1.29.0.4
	OPENBSD_4_6_BASE:1.29
	OPENBSD_4_5:1.28.0.6
	OPENBSD_4_5_BASE:1.28
	OPENBSD_4_4:1.28.0.4
	OPENBSD_4_4_BASE:1.28
	OPENBSD_4_3:1.28.0.2
	OPENBSD_4_3_BASE:1.28
	OPENBSD_4_2:1.27.0.2
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.25.0.4
	OPENBSD_4_1_BASE:1.25
	OPENBSD_4_0:1.25.0.2
	OPENBSD_4_0_BASE:1.25
	OPENBSD_3_9:1.24.0.2
	OPENBSD_3_9_BASE:1.24
	OPENBSD_3_8:1.23.0.2
	OPENBSD_3_8_BASE:1.23
	OPENBSD_3_7:1.22.0.2
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.18.0.2
	OPENBSD_3_6_BASE:1.18
	SMP_SYNC_A:1.16
	SMP_SYNC_B:1.16
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.13.0.4
	OPENBSD_3_4_BASE:1.13
	UBC_SYNC_A:1.13
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.13
	UBC:1.10.0.2
	UBC_BASE:1.10
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	SMP:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.37
date	2013.12.06.21.03.03;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	2013.11.14.12.16.01;	author dlg;	state Exp;
branches;
next	1.35;

1.35
date	2012.04.03.23.39.09;	author deraadt;	state Exp;
branches;
next	1.34;

1.34
date	2010.09.07.16.21.42;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2010.08.27.18.25.47;	author deraadt;	state Exp;
branches;
next	1.32;

1.32
date	2010.08.06.14.11.43;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2009.10.15.17.54.54;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	2009.08.10.20.29.54;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2009.06.02.16.50.20;	author jsg;	state Exp;
branches;
next	1.28;

1.28
date	2008.02.21.03.58.07;	author brad;	state Exp;
branches;
next	1.27;

1.27
date	2007.05.28.22.54.04;	author ckuethe;	state Exp;
branches;
next	1.26;

1.26
date	2007.05.08.20.33.07;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2006.07.01.21.48.08;	author brad;	state Exp;
branches;
next	1.24;

1.24
date	2006.01.05.21.22.24;	author brad;	state Exp;
branches;
next	1.23;

1.23
date	2005.05.27.06.37.21;	author brad;	state Exp;
branches;
next	1.22;

1.22
date	2005.01.15.18.48.12;	author brad;	state Exp;
branches;
next	1.21;

1.21
date	2005.01.14.18.14.12;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2004.12.23.19.40.21;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2004.09.20.04.27.23;	author brad;	state Exp;
branches;
next	1.18;

1.18
date	2004.08.04.19.42.30;	author mickey;	state Exp;
branches;
next	1.17;

1.17
date	2004.06.27.02.38.38;	author brad;	state Exp;
branches;
next	1.16;

1.16
date	2004.05.18.22.37.25;	author beck;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.26.02.35.12;	author mcbride;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.26.21.43.31;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2002.10.17.15.12.12;	author drahn;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.09.03.14.18;	author todd;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.01.26.54;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.05.17.25.58;	author art;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2001.09.17.16.24.49;	author jason;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.25.14.55.14;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.10.15.02.05;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.09.21.12.51;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.13.23.19.17;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.17.17.08.16;	author aaron;	state Exp;
branches
	1.4.6.1;
next	1.3;

1.3
date	2000.07.20.16.22.26;	author ho;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.26.19.12.08;	author chris;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.18.18.44.27;	author jason;	state Exp;
branches;
next	;

1.4.6.1
date	2001.05.14.22.23.47;	author niklas;	state Exp;
branches;
next	1.4.6.2;

1.4.6.2
date	2001.07.04.10.40.53;	author niklas;	state Exp;
branches;
next	1.4.6.3;

1.4.6.3
date	2001.10.31.03.22.42;	author nate;	state Exp;
branches;
next	1.4.6.4;

1.4.6.4
date	2001.11.13.21.10.00;	author niklas;	state Exp;
branches;
next	1.4.6.5;

1.4.6.5
date	2002.03.28.11.51.00;	author niklas;	state Exp;
branches;
next	1.4.6.6;

1.4.6.6
date	2003.03.28.00.38.13;	author niklas;	state Exp;
branches;
next	1.4.6.7;

1.4.6.7
date	2004.02.19.10.56.18;	author niklas;	state Exp;
branches;
next	1.4.6.8;

1.4.6.8
date	2004.06.05.23.12.41;	author niklas;	state Exp;
branches;
next	;

1.10.2.1
date	2002.06.11.03.42.18;	author art;	state Exp;
branches;
next	1.10.2.2;

1.10.2.2
date	2002.10.29.00.33.25;	author art;	state Exp;
branches;
next	;


desc
@@


1.37
log
@Add a DVACT_WAKEUP op to the *_activate() API.  This is called after the
kernel resumes normal (non-cold, able to run processes, etc) operation.
Previously we were relying on specific DVACT_RESUME op's in drivers
creating callback/threads themselves, but that has become too common,
indicating the need for a built-in mechanism.
ok dlg kettenis, tested by a sufficient amount of people
@
text
@/*	$OpenBSD: fxpvar.h,v 1.36 2013/11/14 12:16:01 dlg Exp $	*/
/*	$NetBSD: if_fxpvar.h,v 1.1 1997/06/05 02:01:58 thorpej Exp $	*/

/*                  
 * Copyright (c) 1995, David Greenman
 * All rights reserved.
 *              
 * Modifications to support NetBSD:
 * Copyright (c) 1997 Jason R. Thorpe.  All rights reserved.
 *                  
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:             
 * 1. Redistributions of source code must retain the above copyright
 *    notice unmodified, this list of conditions, and the following
 *    disclaimer.  
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *      Id: if_fxpvar.h,v 1.6 1998/08/02 00:29:15 dg Exp
 */

/*
 * Misc. definitions for the Intel EtherExpress Pro/100B PCI Fast
 * Ethernet driver
 */

/*
 * Number of transmit control blocks. This determines the number
 * of transmit buffers that can be chained in the CB list.
 * This must be a power of two.
 */
#define FXP_NTXCB	128

/*
 * Minimum and maximum number of receive frame area buffers. 
 */
#define FXP_NRFABUFS_MIN	4
#define FXP_NRFABUFS_MAX	64	/* These are large so choose wisely. */

/*
 * Default maximum time, in microseconds, that an interrupt may be delayed
 * in an attempt to coalesce interrupts.  This is only effective if the Intel
 * microcode is loaded.
 */
#ifndef FXP_INT_DELAY
#define FXP_INT_DELAY 128 
#endif

/*
 * Default number of packets that will be bundled, before an interrupt is
 * generated.  This is only effective if the Intel microcode is loaded.
 * This is not present in all microcode revisions.
 */
#ifndef FXP_BUNDLE_MAX
#define FXP_BUNDLE_MAX 16
#endif

/* 
 * Bit-mask describing minimum size frame that will be bundled.
 * This is only effetive if the Intel microcode is loaded.
 * This is not present in all microcode revisions. Disabled by default,
 * to reduce recieving immediately interrupts from all frames with size less
 * than 128 bytes.
 */
#ifndef FXP_MIN_SIZE_MASK
#define FXP_MIN_SIZE_MASK 0xFFFF
#endif

/*
 * NOTE: Elements are ordered for optimal cacheline behavior, and NOT
 *	 for functional grouping.
 */

struct fxp_txsw {
	struct fxp_txsw *tx_next;
	struct mbuf *tx_mbuf;
	bus_dmamap_t tx_map;
	bus_addr_t tx_off;
	struct fxp_cb_tx *tx_cb;
};

struct fxp_ctrl {
	struct fxp_cb_tx tx_cb[FXP_NTXCB];
	struct fxp_stats stats;
	union {
		struct fxp_cb_mcs mcs;
		struct fxp_cb_ias ias;
		struct fxp_cb_config cfg;
		struct fxp_cb_ucode code;
	} u;
};

struct fxp_softc {
	struct device sc_dev;		/* generic device structures */
	void *sc_ih;			/* interrupt handler cookie */
	bus_space_tag_t sc_st;		/* bus space tag */
	bus_space_handle_t sc_sh;	/* bus space handle */
	bus_dma_tag_t sc_dmat;		/* bus dma tag */
	struct arpcom sc_arpcom;	/* per-interface network data */
	struct mii_data sc_mii;		/* MII media information */
	struct mbuf *rfa_headm;		/* first mbuf in receive frame area */
	struct mbuf *rfa_tailm;		/* last mbuf in receive frame area */
	int sc_flags;			/* misc. flags */
#define	FXPF_MWI_ENABLE		0x10	/* enable use of PCI MWI command */
#define	FXPF_DISABLE_STANDBY	0x20	/* currently need to work-around */
#define	FXPF_UCODELOADED	0x40    /* ucode load already attempted */
#define	FXPF_NOUCODE		0x80	/* no ucode for this chip */
#define	FXPF_RECV_WORKAROUND	0x100	/* receiver lock-up workaround */
	struct timeout stats_update_to; /* Pointer to timeout structure */
	int rx_idle_secs;		/* # of seconds RX has been idle */
	struct fxp_cb_tx *cbl_base;	/* base of TxCB list */
	int phy_primary_addr;		/* address of primary PHY */
	int phy_primary_device;		/* device type of primary PHY */
	int phy_10Mbps_only;		/* PHY is 10Mbps-only device */
	int eeprom_size;		/* size of serial EEPROM */
	int rx_bufs;			/* how many rx buffers allocated? */
	struct fxp_txsw txs[FXP_NTXCB];
	struct fxp_txsw *sc_cbt_cons, *sc_cbt_prod, *sc_cbt_prev;
	int sc_cbt_cnt;
	bus_dmamap_t tx_cb_map;
	bus_dma_segment_t sc_cb_seg;
	int sc_cb_nseg;
	struct fxp_ctrl *sc_ctrl;
	bus_dmamap_t sc_rxmaps[FXP_NRFABUFS_MAX];
	int sc_rxfree;
	u_int32_t sc_revision;		/* chip revision */ 
	u_int16_t sc_int_delay;		/* interrupt delay value for ucode */
	u_int16_t sc_bundle_max;	/* max # frames per interrupt (ucode) */
	u_int16_t sc_min_size_mask;	/* bit-mask describing the minimum
					 * size of frame that will be bundled */

	u_int32_t		*sc_ucodebuf;
	size_t			sc_ucodelen;
};

/* Macros to ease CSR access. */
#define	CSR_READ_2(sc, reg)						\
	bus_space_read_2((sc)->sc_st, (sc)->sc_sh, (reg))
#define	CSR_READ_4(sc, reg)						\
	bus_space_read_4((sc)->sc_st, (sc)->sc_sh, (reg))
#define	CSR_WRITE_2(sc, reg, val)					\
	bus_space_write_2((sc)->sc_st, (sc)->sc_sh, (reg), (val))
#define	CSR_WRITE_4(sc, reg, val)					\
	bus_space_write_4((sc)->sc_st, (sc)->sc_sh, (reg), (val))

extern int fxp_intr(void *);
extern int fxp_attach(struct fxp_softc *, const char *);
void fxp_detach(struct fxp_softc *);
void fxp_init(void *);
void fxp_stop(struct fxp_softc *, int, int);
int fxp_activate(struct device *, int);
void fxp_wakeup(struct fxp_softc *);

#define	FXP_RXMAP_GET(sc)	((sc)->sc_rxmaps[(sc)->sc_rxfree++])
#define	FXP_RXMAP_PUT(sc,map)	((sc)->sc_rxmaps[--(sc)->sc_rxfree] = (map))

#define	FXP_TXCB_SYNC(sc, txs, p)					\
    bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map, (txs)->tx_off,	\
	sizeof(struct fxp_cb_tx), (p))

#define	FXP_MCS_SYNC(sc, p)						\
    bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map,			\
	offsetof(struct fxp_ctrl, u.mcs), sizeof(struct fxp_cb_mcs), (p))

#define	FXP_IAS_SYNC(sc, p)						\
    bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map,			\
	offsetof(struct fxp_ctrl, u.ias), sizeof(struct fxp_cb_ias), (p))

#define	FXP_CFG_SYNC(sc, p)						\
    bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map,			\
	offsetof(struct fxp_ctrl, u.cfg), sizeof(struct fxp_cb_config), (p))

#define FXP_UCODE_SYNC(sc, p)						\
    bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map,			\
	offsetof(struct fxp_ctrl, u.code), sizeof(struct fxp_cb_ucode), (p))

#define	FXP_STATS_SYNC(sc, p)						\
    bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map,			\
	offsetof(struct fxp_ctrl, stats), sizeof(struct fxp_stats), (p)) 

#define	FXP_MBUF_SYNC(sc, m, p)						\
    bus_dmamap_sync((sc)->sc_dmat, (m), 0, (m)->dm_mapsize, (p))
@


1.36
log
@replace workqs with tasks for handling resume

from kimberley manning
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.35 2012/04/03 23:39:09 deraadt Exp $	*/
a144 1
	struct task		sc_resume_t;
d166 1
a166 1
void fxp_resume(void *, void *);
@


1.35
log
@After suspend/resume, reload the firmware.  Skip firmware on
FXP_REV_82550_C with server extensions.
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.34 2010/09/07 16:21:42 deraadt Exp $	*/
d145 1
a145 1
	struct workq_task	sc_resume_wqt;
@


1.34
log
@remove the powerhook code.  All architectures now use the ca_activate tree
traversal code to suspend/resume
ok oga kettenis blambert
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.33 2010/08/27 18:25:47 deraadt Exp $	*/
d120 3
a122 2
#define	FXPF_UCODE		0x40	/* ucode load already attempted */
#define	FXPF_RECV_WORKAROUND	0x80	/* receiver lock-up workaround */
d146 3
@


1.33
log
@Since the pci-specific activate function does nothing, move it to fxp.c.
Then it is possible for fxp_powerhook to use it.
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.32 2010/08/06 14:11:43 deraadt Exp $	*/
a129 1
	void *sc_powerhook;		/* powerhook */
@


1.32
log
@ca_activate for suspend/resume; tested by andrew@@afresh1.com
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.31 2009/10/15 17:54:54 deraadt Exp $	*/
d145 1
d163 2
@


1.31
log
@Add detach support to a few more drivers, and in others do the neccessary
operations in the detach function in the right order.  Also ensure that the
interrupt handlers not trust registers that go away.
read over very carefully by dms, tested by me
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.30 2009/08/10 20:29:54 deraadt Exp $	*/
d160 2
@


1.30
log
@More cases of shutdown hooks not needed after card is already stopped.  In
these cases the xxstop function is a bit more complicated and has a flag of
some sort, but the use of that flag does not matter;  DMA is already ceased
ok dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.29 2009/06/02 16:50:20 jsg Exp $	*/
d159 1
a159 1
int fxp_detach(struct fxp_softc *);
@


1.29
log
@Make fxp at pci detachable; untested.
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.28 2008/02/21 03:58:07 brad Exp $	*/
a129 1
	void *sc_sdhook;		/* shutdownhook */
@


1.28
log
@Some fxp(4) chips do not like having their status/command registers accessed
as 8-bit reads/writes even though they are 16-bit. This can cause the
respective interfaces to lock up until the system is hard rebooted. Having
the driver read/write to these registers as 16-bit entities resolves the
instability.

From mickey@@

ok krw@@ sthen@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.27 2007/05/28 22:54:04 ckuethe Exp $	*/
d160 1
@


1.27
log
@Gently nudge up the interrupt coalescing timeout to 128 microseconds. This
gives the firmware time to do its job. Makes my fxps go from 12000int/sec
while moving 100Mbps to 3000int/sec
ok beck claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.26 2007/05/08 20:33:07 deraadt Exp $	*/
a148 2
#define	CSR_READ_1(sc, reg)						\
	bus_space_read_1((sc)->sc_st, (sc)->sc_sh, (reg))
a152 2
#define	CSR_WRITE_1(sc, reg, val)					\
	bus_space_write_1((sc)->sc_st, (sc)->sc_sh, (reg), (val))
@


1.26
log
@put more foo_detach() routines where they are used
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.25 2006/07/01 21:48:08 brad Exp $	*/
d60 1
a60 1
#define FXP_INT_DELAY 64 
@


1.25
log
@(fxp/re)_attach_common -> (fxp/re)_attach
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.24 2006/01/05 21:22:24 brad Exp $	*/
a163 1
extern int fxp_detach(struct fxp_softc *);
@


1.24
log
@Disable the minimum size frame bundling when using the CPUSaver microcode.
This could cause 2 interrupts per frame if the frame size is below 128 bytes.

From Dmitry Bogdan <dsb at imcs dot dvgu dot ru>
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.23 2005/05/27 06:37:21 brad Exp $	*/
d163 1
a163 1
extern int fxp_attach_common(struct fxp_softc *, const char *);
@


1.23
log
@- fix reception of VLAN sized frames on 82558 and up
- add support for reception of VLAN sized frames on 82557
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.22 2005/01/15 18:48:12 brad Exp $	*/
d72 11
d144 2
@


1.22
log
@rev 1.85

Newer chips do not need the receiver lock-up workaround; detect when it
is required.

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.21 2005/01/14 18:14:12 deraadt Exp $	*/
a117 1
	int not_82557;			/* yes if we are 82558/82559 */
@


1.21
log
@use PCI Memory Write and Invalidate; from bogdan@@eastonline.ru, ok pascoe
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.20 2004/12/23 19:40:21 deraadt Exp $	*/
d110 1
@


1.20
log
@change FXPF_UCODE to mean "firmware load attempted".  if the first
loadfirmware() fails because the file is missing, we do not want to
try again when the first softclock -> fxp_stats_update -> fxp_init
happens later. calling namei in that context is really bad; tested by mcbride
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.19 2004/09/20 04:27:23 brad Exp $	*/
d107 1
@


1.19
log
@meant to commit this too, remove old resume workaround flags
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.18 2004/08/04 19:42:30 mickey Exp $	*/
d108 1
a108 1
#define	FXPF_UCODE		0x40	/* ucode is loaded */
@


1.18
log
@interrupt coalescing on post 82557 chips; from freebsd via Dmitry Bogdan <dsb@@poi.dvo.ru>
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.17 2004/06/27 02:38:38 brad Exp $	*/
a106 3
#define	FXPF_HAS_RESUME_BUG	0x08	/* has the resume bug */
#define	FXPF_FIX_RESUME_BUG	0x10	/* currently need to work-around 
					   the resume bug */
@


1.17
log
@stop passing an empty enaddr around since we figure out the
MAC address in the common attach code and not the PCI/CardBus
specific portions, this was a side effect of the code being
split to support CardBus.

ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.16 2004/05/18 22:37:25 beck Exp $	*/
d55 18
d76 1
d92 1
d108 1
a108 1
#define	FXPF_FIX_RESUME_BUG	0x10	/* currently need to work-around
d111 1
d132 3
d173 4
@


1.16
log
@fix from netbsd to twiddle the fxp eeprom to disable dynamic standby mode
on cards that have issues with this creating pci errors in 10 mbps mode
tested by many, including me, nick, and pval.
ok jason@@, markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.15 2004/04/26 02:35:12 mcbride Exp $	*/
d128 1
a128 1
extern int fxp_attach_common(struct fxp_softc *, u_int8_t *, const char *);
@


1.15
log
@Howe eye wysh eye cud spel.
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.14 2003/09/26 21:43:31 miod Exp $	*/
d90 1
@


1.14
log
@Typos: defintion -> definition, proccess -> process

There are more occurences hiding in binutils, lynx and afs but I am too
lazy to report them upstream at the moment.
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.13 2002/10/17 15:12:12 drahn Exp $	*/
d49 1
a49 2
 * Number of receive frame area buffers. These are large so chose
 * wisely.
d51 2
a52 1
#define FXP_NRFABUFS	64
d98 1
d108 1
a108 1
	bus_dmamap_t sc_rxmaps[FXP_NRFABUFS];
@


1.13
log
@Bigendian support for fxp, work from pefo with cleanups, ok art@@ and others.
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.12 2002/06/09 03:14:18 todd Exp $	*/
d37 1
a37 1
 * Misc. defintions for the Intel EtherExpress Pro/100B PCI Fast
@


1.12
log
@a step towards consistancy; in general:
	'struct arpcom foo' -> 'struct arpcom sc_arpcom'
ok itojun@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.10 2001/11/05 17:25:58 art Exp $	*/
d147 4
@


1.11
log
@First round of __P removal in sys
@
text
@d82 1
a82 1
	struct arpcom arpcom;		/* per-interface network data */
@


1.10
log
@Switch everything to the new bus_dmamap_sync API.
Most work by Wilbern Cobb <vedge@@csoft.org> with some fixes from me, mickey@@
and drahn@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.9 2001/09/17 16:24:49 jason Exp $	*/
d125 3
a127 3
extern int fxp_intr __P((void *));
extern int fxp_attach_common __P((struct fxp_softc *, u_int8_t *, const char *));
extern int fxp_detach __P((struct fxp_softc *));
@


1.10.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.10 2001/11/05 17:25:58 art Exp $	*/
d82 1
a82 1
	struct arpcom sc_arpcom;	/* per-interface network data */
d125 3
a127 3
extern int fxp_intr(void *);
extern int fxp_attach_common(struct fxp_softc *, u_int8_t *, const char *);
extern int fxp_detach(struct fxp_softc *);
@


1.10.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.10.2.1 2002/06/11 03:42:18 art Exp $	*/
a146 4

#define	FXP_STATS_SYNC(sc, p)						\
    bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map,			\
	offsetof(struct fxp_ctrl, stats), sizeof(struct fxp_stats), (p)) 
@


1.9
log
@Remove all of the last vestiges of vtophys (namely RFA's):
o stash bus_dmamap_t in the mbuf cluster (alignment fudge is now
  2+sizeof(bus_dmamap_t)
o borrow FXP_RXMAP_{GET|PUT} macros from NetBSD
o move a few definitions around to make it all work
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.8 2001/08/25 14:55:14 jason Exp $	*/
a131 8
#ifdef __HAS_NEW_BUS_DMAMAP_SYNC
#define	fxp_bus_dmamap_sync(t, m, o, l, p)	\
    bus_dmamap_sync((t), (m), (o), (l), (p))
#else
#define fxp_bus_dmamap_sync(t, m, o, l, p)	\
    bus_dmamap_sync((t), (m), (p))
#endif

d133 1
a133 1
    fxp_bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map, (txs)->tx_off,	\
d137 1
a137 1
    fxp_bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map,			\
d141 1
a141 1
    fxp_bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map,			\
d145 1
a145 1
    fxp_bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map,			\
d149 1
a149 1
    fxp_bus_dmamap_sync((sc)->sc_dmat, (m), 0, (m)->dm_mapsize, (p))
@


1.8
log
@deal with 5 arg form of bus_dmamap_sync() if available.
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.7 2001/08/10 15:02:05 jason Exp $	*/
d49 6
d107 2
d128 3
@


1.7
log
@- make transmit use linked lists not indexed arrays (more like it was when I started)
- also, only bus_dmamap_unload() loaded maps in fxp_stop()
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.6 2001/08/09 21:12:51 jason Exp $	*/
d56 1
d120 27
@


1.6
log
@- scb_wait() is now time based (not cpu speed based)
- rearrange multicast setup to be part of init
- convert cu operations to bus_dma(9) (still have to do RFA ops).
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.5 2001/06/13 23:19:17 jason Exp $	*/
d53 1
d94 2
a95 1
	int tx_cons, tx_prod, tx_cnt;
@


1.5
log
@From NetBSD, 82562 requires a nop before a resume (tested by mickey)
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.4 2000/09/17 17:08:16 aaron Exp $	*/
d40 8
d52 16
d73 1
a77 1
	struct fxp_cb_tx *cbl_first;	/* first active TxCB in list */
a81 4
	int tx_queued;			/* # of active TxCB's */
	int need_mcsetup;		/* multicast filter needs programming */
	struct fxp_cb_tx *cbl_last;	/* last active TxCB in list */
	struct fxp_stats *fxp_stats;	/* Pointer to interface stats */
a84 2
	struct fxp_cb_mcs *mcsp;	/* Pointer to mcast setup descriptor */
	int all_mcasts;			/* receive all multicasts */
d92 6
@


1.4
log
@Support detach of fxp devices to allow ejection of Intel CardBus adapters.
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.3 2000/07/20 16:22:26 ho Exp $	*/
d54 4
@


1.4.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.4 2000/09/17 17:08:16 aaron Exp $	*/
@


1.4.6.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.4.6.1 2001/05/14 22:23:47 niklas Exp $	*/
a53 4
	int sc_flags;			/* misc. flags */
#define	FXPF_HAS_RESUME_BUG	0x08	/* has the resume bug */
#define	FXPF_FIX_RESUME_BUG	0x10	/* currently need to work-around
					   the resume bug */
@


1.4.6.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.4.6.2 2001/07/04 10:40:53 niklas Exp $	*/
a39 14

/*
 * Number of transmit control blocks. This determines the number
 * of transmit buffers that can be chained in the CB list.
 * This must be a power of two.
 */
#define FXP_NTXCB	128

/*
 * Number of receive frame area buffers. These are large so chose
 * wisely.
 */
#define FXP_NRFABUFS	64

a43 18
struct fxp_txsw {
	struct fxp_txsw *tx_next;
	struct mbuf *tx_mbuf;
	bus_dmamap_t tx_map;
	bus_addr_t tx_off;
	struct fxp_cb_tx *tx_cb;
};

struct fxp_ctrl {
	struct fxp_cb_tx tx_cb[FXP_NTXCB];
	struct fxp_stats stats;
	union {
		struct fxp_cb_mcs mcs;
		struct fxp_cb_ias ias;
		struct fxp_cb_config cfg;
	} u;
};

a48 1
	bus_dma_tag_t sc_dmat;		/* bus dma tag */
d53 1
d58 4
d65 2
a73 9
	struct fxp_txsw txs[FXP_NTXCB];
	struct fxp_txsw *sc_cbt_cons, *sc_cbt_prod, *sc_cbt_prev;
	int sc_cbt_cnt;
	bus_dmamap_t tx_cb_map;
	bus_dma_segment_t sc_cb_seg;
	int sc_cb_nseg;
	struct fxp_ctrl *sc_ctrl;
	bus_dmamap_t sc_rxmaps[FXP_NRFABUFS];
	int sc_rxfree;
a92 30

#define	FXP_RXMAP_GET(sc)	((sc)->sc_rxmaps[(sc)->sc_rxfree++])
#define	FXP_RXMAP_PUT(sc,map)	((sc)->sc_rxmaps[--(sc)->sc_rxfree] = (map))

#ifdef __HAS_NEW_BUS_DMAMAP_SYNC
#define	fxp_bus_dmamap_sync(t, m, o, l, p)	\
    bus_dmamap_sync((t), (m), (o), (l), (p))
#else
#define fxp_bus_dmamap_sync(t, m, o, l, p)	\
    bus_dmamap_sync((t), (m), (p))
#endif

#define	FXP_TXCB_SYNC(sc, txs, p)					\
    fxp_bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map, (txs)->tx_off,	\
	sizeof(struct fxp_cb_tx), (p))

#define	FXP_MCS_SYNC(sc, p)						\
    fxp_bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map,			\
	offsetof(struct fxp_ctrl, u.mcs), sizeof(struct fxp_cb_mcs), (p))

#define	FXP_IAS_SYNC(sc, p)						\
    fxp_bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map,			\
	offsetof(struct fxp_ctrl, u.ias), sizeof(struct fxp_cb_ias), (p))

#define	FXP_CFG_SYNC(sc, p)						\
    fxp_bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map,			\
	offsetof(struct fxp_ctrl, u.cfg), sizeof(struct fxp_cb_config), (p))

#define	FXP_MBUF_SYNC(sc, m, p)						\
    fxp_bus_dmamap_sync((sc)->sc_dmat, (m), 0, (m)->dm_mapsize, (p))
@


1.4.6.4
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d132 8
d141 1
a141 1
    bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map, (txs)->tx_off,	\
d145 1
a145 1
    bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map,			\
d149 1
a149 1
    bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map,			\
d153 1
a153 1
    bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map,			\
d157 1
a157 1
    bus_dmamap_sync((sc)->sc_dmat, (m), 0, (m)->dm_mapsize, (p))
@


1.4.6.5
log
@Merge in -current from about a week ago
@
text
@d125 3
a127 3
extern int fxp_intr(void *);
extern int fxp_attach_common(struct fxp_softc *, u_int8_t *, const char *);
extern int fxp_detach(struct fxp_softc *);
@


1.4.6.6
log
@Sync the SMP branch with 3.3
@
text
@d82 1
a82 1
	struct arpcom sc_arpcom;	/* per-interface network data */
a146 4

#define	FXP_STATS_SYNC(sc, p)						\
    bus_dmamap_sync((sc)->sc_dmat, (sc)->tx_cb_map,			\
	offsetof(struct fxp_ctrl, stats), sizeof(struct fxp_stats), (p)) 
@


1.4.6.7
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d37 1
a37 1
 * Misc. definitions for the Intel EtherExpress Pro/100B PCI Fast
@


1.4.6.8
log
@Merge with the trunk
@
text
@d49 2
a50 1
 * Minimum and maximum number of receive frame area buffers. 
d52 1
a52 2
#define FXP_NRFABUFS_MIN	4
#define FXP_NRFABUFS_MAX	64	/* These are large so choose wisely. */
a89 1
#define	FXPF_DISABLE_STANDBY	0x20	/* currently need to work-around */
a97 1
	int rx_bufs;			/* how many rx buffers allocated? */
d107 1
a107 1
	bus_dmamap_t sc_rxmaps[FXP_NRFABUFS_MAX];
@


1.3
log
@Convert to new timeouts. (art@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.2 2000/04/26 19:12:08 chris Exp $	*/
d68 2
d88 1
@


1.2
log
@Turn on a bit (for 82558/82559 only) which disables the chip's
builin feature to discard frames >1500 bytes (useful for jumbo frames,
also 802.1Q VLANs)

ok aaron@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fxpvar.h,v 1.1 2000/04/18 18:44:27 jason Exp $	*/
d58 1
@


1.1
log
@split fxp into bus independent and dependent (pci) parts (cardbus to come)
@
text
@d1 1
a1 1
/*	$OpenBSD: if_fxpvar.h,v 1.8 2000/04/18 03:40:55 jason Exp $	*/
d66 1
@

