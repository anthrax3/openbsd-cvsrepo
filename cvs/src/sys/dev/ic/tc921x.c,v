head	1.3;
access;
symbols
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.42
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.40
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.34
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.36
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.28
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.32
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.30
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.26
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.24
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.20
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.22
	OPENBSD_5_0:1.3.0.18
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.16
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.14
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.10
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.12
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.8
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.6
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.14
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.12
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.10
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.8
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.1.0.10
	OPENBSD_3_4_BASE:1.1
	UBC_SYNC_A:1.1
	SMP:1.1.0.8
	OPENBSD_3_3:1.1.0.6
	OPENBSD_3_3_BASE:1.1
	UBC_SYNC_B:1.1
	OPENBSD_3_2:1.1.0.4
	OPENBSD_3_2_BASE:1.1
	UBC:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2007.05.22.04.14.03;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.21.18.58.49;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.25.04.56.59;	author mickey;	state Exp;
branches
	1.1.2.1
	1.1.8.1;
next	;

1.1.2.1
date	2002.06.11.03.42.20;	author art;	state Exp;
branches;
next	;

1.1.8.1
date	2004.02.19.10.56.21;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove broken URLs.
Fixes PRs 5482, 5483, 5484, 5486, 5487, 5488
Filed by casati@@nortel.com
@
text
@/*	$OpenBSD: tc921x.c,v 1.2 2003/10/21 18:58:49 jmc Exp $	*/

/*
 * Copyright (c) 2001, 2002 Vladimir Popov <jumbo@@narod.ru>.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Toshiba's High Speed PLL for DTS
 *
 * TC9216P, TC9217P, TC9217F are a high speed PLL-LSI with built-in 2 modulus
 * prescaler. Each function is controlled through 3 serial bus lines and high
 * performance digital tuning system can be constituted.
 *
 * Each function is controlled by the data setting to a pair of 24-bit
 * registers. Each data of these registers is exchanged with controller side
 * by 3 serial lines of DATA, CLOCK and PERIOD.
 *
 * 8 address bits and 24 data bits, total 32 bits, are transferred thru
 * serial port.
 *
 * Input data is latched to the first and second input registers at the fall
 * of PERIOD signal and each function is activated.
 *
 * Each output data is latched to output register in parallel at the fall
 * timing of the 9th of CLOCK signal and can be received serially over the
 * DATA line. Serial data of DATA, CLOCK and PERIOD is synchronized with
 * crystal oscillation clock and tacken into the internal circuit of LSI.
 * Thus, if crystal oscillator is stopped, serial data can not be input.
 */

#include <sys/param.h>
#include <sys/radioio.h>

#include <dev/ic/tc921x.h>

#define PL_CL_DL(c)	((0 << c->period) | (0 << c->clock) | (0 << c->data))
#define PL_CL_DH(c)	((0 << c->period) | (0 << c->clock) | (1 << c->data))
#define PL_CH_DL(c)	((0 << c->period) | (1 << c->clock) | (0 << c->data))
#define PL_CH_DH(c)	((0 << c->period) | (1 << c->clock) | (1 << c->data))

#define PH_CL_DL(c)	((1 << c->period) | (0 << c->clock) | (0 << c->data))
#define PH_CL_DH(c)	((1 << c->period) | (0 << c->clock) | (1 << c->data))
#define PH_CH_DL(c)	((1 << c->period) | (1 << c->clock) | (0 << c->data))
#define PH_CH_DH(c)	((1 << c->period) | (1 << c->clock) | (1 << c->data))

#define PERIOD_LOW	0
#define PERIOD_HIGH	1

static void __tc921x_write_burst(unsigned int, u_int32_t, struct tc921x_t *, int);
static u_int32_t __tc921x_read_burst(unsigned int, struct tc921x_t *);

u_int32_t
tc921x_encode_freq(u_int32_t freq) {
	/* Normalize incoming frequency */
	if (freq < MIN_FM_FREQ)
		freq = MIN_FM_FREQ;
	if (freq > MAX_FM_FREQ)
		freq = MAX_FM_FREQ;

	return (freq + IF_FREQ)/10;
}

u_int32_t
tc921x_decode_freq(u_int32_t reg) {
	return (reg & TC921X_D0_FREQ_DIVIDER) * 10 - IF_FREQ;
}

u_int32_t
tc921x_read_addr(struct tc921x_t *c, u_int8_t addr) {
	u_int32_t ret;

	/* Finish previous transmission - PERIOD HIGH, CLOCK HIGH, DATA HIGH */
	bus_space_write_1(c->iot, c->ioh, c->offset, PH_CH_DH(c));
	/* Start transmission - PERIOD LOW, CLOCK HIGH, DATA HIGH */
	bus_space_write_1(c->iot, c->ioh, c->offset, PL_CH_DH(c));

	/*
	 * Period must be low when the register address transmission starts.
	 * Period must be high when the register data transmission starts.
	 * Do the switch in the middle of the address transmission.
	 */
	__tc921x_write_burst(4, addr, c, PERIOD_LOW);
	__tc921x_write_burst(4, addr >> 4, c, PERIOD_HIGH);

	/* Reading data from the register */
	ret = __tc921x_read_burst(TC921X_REGISTER_LENGTH, c);

	/* End of transmission - PERIOD goes LOW then HIGH */
	bus_space_write_1(c->iot, c->ioh, c->offset, PL_CH_DH(c));
	bus_space_write_1(c->iot, c->ioh, c->offset, PH_CH_DH(c));

	return ret;
}

void
tc921x_write_addr(struct tc921x_t *c, u_int8_t addr, u_int32_t reg) {
	/* Finish previous transmission - PERIOD HIGH, CLOCK HIGH, DATA HIGH */
	bus_space_write_1(c->iot, c->ioh, c->offset, PH_CH_DH(c));
	/* Start transmission - PERIOD LOW, CLOCK HIGH, DATA HIGH */
	bus_space_write_1(c->iot, c->ioh, c->offset, PL_CH_DH(c));

	/*
	 * Period must be low when the register address transmission starts.
	 * Period must be high when the register data transmission starts.
	 * Do the switch in the middle of the address transmission.
	 */
	__tc921x_write_burst(4, addr, c, PERIOD_LOW);
	__tc921x_write_burst(4, addr >> 4, c, PERIOD_HIGH);

	/* Writing data to the register */
	__tc921x_write_burst(TC921X_REGISTER_LENGTH, reg, c, 1);

	/* End of transmission - PERIOD goes LOW then HIGH */
	bus_space_write_1(c->iot, c->ioh, c->offset, PL_CH_DH(c));
	bus_space_write_1(c->iot, c->ioh, c->offset, PH_CH_DH(c));
}

static void
__tc921x_write_burst(unsigned int length, u_int32_t data, struct tc921x_t *c, int p) {
	int i;
	u_int8_t cldh, chdh, cldl, chdl;

	cldh = p == PERIOD_LOW ? PL_CL_DH(c) : PH_CL_DH(c);
	chdh = p == PERIOD_LOW ? PL_CH_DH(c) : PH_CH_DH(c);
	cldl = p == PERIOD_LOW ? PL_CL_DL(c) : PH_CL_DL(c);
	chdl = p == PERIOD_LOW ? PL_CH_DL(c) : PH_CH_DL(c);

	for (i = 0; i < length; i++)
		if (data & (1 << i)) {
			bus_space_write_1(c->iot, c->ioh, c->offset, cldh);
			bus_space_write_1(c->iot, c->ioh, c->offset, chdh);
		} else {
			bus_space_write_1(c->iot, c->ioh, c->offset, cldl);
			bus_space_write_1(c->iot, c->ioh, c->offset, chdl);
		}
}

static u_int32_t
__tc921x_read_burst(unsigned int length, struct tc921x_t *c) {
	unsigned int i;
	u_int32_t ret = 0ul;

#define DATA_ON	(1 << c->data)

	for (i = 0; i < length; i++) {
		bus_space_write_1(c->iot, c->ioh, c->offset, PH_CL_DH(c));
		bus_space_write_1(c->iot, c->ioh, c->offset, PH_CH_DH(c));
		ret |= bus_space_read_1(c->iot, c->ioh, c->offset) & DATA_ON ?
			(1 << i) : (0 << i);
	}

	return ret;
}
@


1.2
log
@typos from Tom Cosgrove;

Tom: I did not commit a couple of your changes.

i did not include some punctuation fixes (full stops, etc.)
mnemorable -> mnemonic: i decided memorable was probably better
instrunctions -> instruction: i kept the plural
@
text
@d1 1
a1 1
/*	$OpenBSD: tc921x.c,v 1.1 2002/04/25 04:56:59 mickey Exp $	*/
a27 1
 *   http://www.chipbook.co.kr/pdf/ic/toshiba/TC9216.pdf
@


1.1
log
@soundforte radio driver, from Vladimir Popov <jumbo@@narod.ru>
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d32 1
a32 1
 * performance digital tuning system can be constitued.
@


1.1.8.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d32 1
a32 1
 * performance digital tuning system can be constituted.
@


1.1.2.1
log
@Sync UBC branch to -current
@
text
@@

