head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.24
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.26
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.20
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.22
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.14
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.18
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.16
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.12
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.6
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.8
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.11.0.16
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.12
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.14
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.10
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.8
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.6
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.4
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.2
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.9.0.12
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.10
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.8
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.6
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.6
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.8
	UBC:1.6.0.4
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	SMP:1.1.0.8
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.6
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.4
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2010.08.29.18.01.21;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.10.20.18.12.50;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	2006.10.10.00.09.07;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.21.18.58.49;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.03.20.01.36;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.54;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.18.16.50.03;	author aaron;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2001.03.29.01.39.32;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.12.05.36.58;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.29.17.08.51;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.19.21.52.38;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	98.09.22.06.41.13;	author fgsch;	state Exp;
branches
	1.1.8.1;
next	;

1.1.8.1
date	2001.05.14.22.23.43;	author niklas;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2001.10.31.03.22.42;	author nate;	state Exp;
branches;
next	1.1.8.3;

1.1.8.3
date	2002.03.28.11.51.00;	author niklas;	state Exp;
branches;
next	1.1.8.4;

1.1.8.4
date	2003.03.28.00.38.12;	author niklas;	state Exp;
branches;
next	1.1.8.5;

1.1.8.5
date	2004.02.19.10.56.18;	author niklas;	state Exp;
branches;
next	;

1.6.4.1
date	2002.06.11.03.42.18;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@expose dp8390_enable/disable to the higher level drivers
@
text
@/*	$OpenBSD: dp8390var.h,v 1.11 2006/10/20 18:12:50 brad Exp $	*/
/*	$NetBSD: dp8390var.h,v 1.8 1998/08/12 07:19:09 scottr Exp $	*/

/*
 * Device driver for National Semiconductor DS8390/WD83C690 based ethernet
 * adapters.
 *
 * Copyright (c) 1994, 1995 Charles M. Hannum.  All rights reserved.
 *
 * Copyright (C) 1993, David Greenman.  This software may be used, modified,
 * copied, distributed, and sold, in both source and binary form provided that
 * the above copyright and these terms are retained.  Under no circumstances is
 * the author responsible for the proper functioning of this software, nor does
 * the author assume any responsibility for damages incurred with its use.
 */

/*
 * We include MII glue here -- some DP8390 compatible chips have
 * MII interfaces on them (scary, isn't it...).
 */
#include <dev/mii/miivar.h>

#define INTERFACE_NAME_LEN	32

/*
 * dp8390_softc: per line info and status
 */
struct dp8390_softc {
	struct device	sc_dev;
	void	*sc_ih;
	int	sc_flags;		/* interface flags, from config */

	struct arpcom sc_arpcom;	/* ethernet common */
	struct mii_data sc_mii;		/* MII glue */
#define sc_media sc_mii.mii_media	/* compatibility definition */

	bus_space_tag_t	sc_regt;	/* NIC register space tag */
	bus_space_handle_t sc_regh;	/* NIC register space handle */
	bus_space_tag_t	sc_buft;	/* Buffer space tag */
	bus_space_handle_t sc_bufh;	/* Buffer space handle */

	bus_size_t sc_reg_map[16];	/* register map (offsets) */

	int	is790;		/* NIC is a 790 */

	u_int8_t cr_proto;	/* values always set in CR */
	u_int8_t rcr_proto;	/* values always set in RCR */
	u_int8_t dcr_reg;	/* override DCR iff LS is set */

	int	mem_start;	/* offset of NIC memory */
	int	mem_end;	/* offset of NIC memory end */
	int	mem_size;	/* total shared memory size */
	int	mem_ring;	/* offset of start of RX ring-buffer */

	u_short	txb_cnt;	/* Number of transmit buffers */
	u_short	txb_inuse;	/* number of transmit buffers active */

	u_short	txb_new;	/* pointer to where new buffer will be added */
	u_short	txb_next_tx;	/* pointer to next buffer ready to xmit */
	u_short	txb_len[8];	/* buffered xmit buffer lengths */
	u_short	tx_page_start;	/* first page of TX buffer area */
	u_short	rec_page_start; /* first page of RX ring-buffer */
	u_short	rec_page_stop;	/* last page of RX ring-buffer */
	u_short	next_packet;	/* pointer to next unread RX packet */

	int	sc_enabled;	/* boolean; power enabled on interface */

	int	(*test_mem)(struct dp8390_softc *);
	void	(*init_card)(struct dp8390_softc *);
	void	(*stop_card)(struct dp8390_softc *);
	void	(*read_hdr)(struct dp8390_softc *,
		    int, struct dp8390_ring *);
	void	(*recv_int)(struct dp8390_softc *);
	int	(*ring_copy)(struct dp8390_softc *,
		    int, caddr_t, u_short);
	int	(*write_mbuf)(struct dp8390_softc *, struct mbuf *, int);

	int	(*sc_enable)(struct dp8390_softc *);
	void	(*sc_disable)(struct dp8390_softc *);

	void	(*sc_media_init)(struct dp8390_softc *);
	void	(*sc_media_fini)(struct dp8390_softc *);

	int	(*sc_mediachange)(struct dp8390_softc *);
	void	(*sc_mediastatus)(struct dp8390_softc *,
		    struct ifmediareq *);
};

/*
 * Vendor types
 */
#define DP8390_VENDOR_UNKNOWN	0xff	/* Unknown network card */
#define DP8390_VENDOR_WD_SMC	0x00	/* Western Digital/SMC */
#define DP8390_VENDOR_3COM	0x01	/* 3Com */
#define DP8390_VENDOR_NOVELL	0x02	/* Novell */
#define DP8390_VENDOR_APPLE	0x10	/* Apple Ethernet card */
#define DP8390_VENDOR_INTERLAN	0x11	/* Interlan A310 card (GatorCard) */
#define DP8390_VENDOR_DAYNA	0x12	/* DaynaPORT E/30s (and others?) */
#define DP8390_VENDOR_ASANTE	0x13	/* Asante MacCon II/E */
#define DP8390_VENDOR_FARALLON	0x14	/* Farallon EtherMac II-TP */
#define DP8390_VENDOR_FOCUS	0x15	/* FOCUS Enhancements EtherLAN */
#define DP8390_VENDOR_KINETICS	0x16	/* Kinetics EtherPort SE/30 */
#define DP8390_VENDOR_CABLETRON	0x17	/* Cabletron Ethernet */

/*
 * Compile-time config flags
 */
/*
 * This sets the default for enabling/disabling the transceiver.
 */
#define DP8390_DISABLE_TRANSCEIVER	0x0001

/*
 * This forces the board to be used in 8/16-bit mode even if it autoconfigs
 * differently.
 */
#define DP8390_FORCE_8BIT_MODE		0x0002
#define DP8390_FORCE_16BIT_MODE		0x0004

/*
 * This disables the use of multiple transmit buffers.
 */
#define DP8390_NO_MULTI_BUFFERING	0x0008

/*
 * This forces all operations with the NIC memory to use Programmed I/O (i.e.
 * not via shared memory).
 */
#define DP8390_FORCE_PIO		0x0010

/*
 * The chip is ASIX AX88190 and needs work around.
 */
#define DP8390_DO_AX88190_WORKAROUND	0x0020

#define DP8390_ATTACHED			0x0040	/* attach has succeeded */

/*
 * ASIX AX88796 doesn't have remote DMA conmplete bit in ISR, so don't
 * check ISR.RDC
 */
#define DP8390_NO_REMOTE_DMA_COMPLETE	0x0080

/*
 * NIC register access macros
 */
#define NIC_GET(t, h, reg)	bus_space_read_1(t, h,			\
				    ((sc)->sc_reg_map[reg]))
#define NIC_PUT(t, h, reg, val)	bus_space_write_1(t, h,			\
				    ((sc)->sc_reg_map[reg]), (val))
#define NIC_BARRIER(t, h)	bus_space_barrier(t, h, 0, 0x10,	\
		    BUS_SPACE_BARRIER_READ | BUS_SPACE_BARRIER_WRITE)

int	dp8390_config(struct dp8390_softc *);
int	dp8390_intr(void *);
int	dp8390_ioctl(struct ifnet *, u_long, caddr_t);
void	dp8390_start(struct ifnet *);
void	dp8390_watchdog(struct ifnet *);
void	dp8390_reset(struct dp8390_softc *);
void	dp8390_init(struct dp8390_softc *);
void	dp8390_stop(struct dp8390_softc *);
int	dp8390_enable(struct dp8390_softc *);
void	dp8390_disable(struct dp8390_softc *);

int	dp8390_mediachange(struct ifnet *);
void	dp8390_mediastatus(struct ifnet *, struct ifmediareq *);

void	dp8390_media_init(struct dp8390_softc *);

int	dp8390_detach(struct dp8390_softc *, int);

void	dp8390_rint(struct dp8390_softc *);

void	dp8390_getmcaf(struct arpcom *, u_int8_t *);
struct mbuf *dp8390_get(struct dp8390_softc *, int, u_short);
void	dp8390_read(struct dp8390_softc *, int, u_short);
@


1.11
log
@some new flags.

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: dp8390var.h,v 1.10 2006/10/10 00:09:07 brad Exp $	*/
d162 2
@


1.10
log
@Add bus_space_barrier.
Add DELAY in some busy loops to allow the DMA engine to actually do something
(neccessary on fast processors).

From ws@@ & mycroft@@ NetBSD

Testing by deraadt@@ nick@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dp8390var.h,v 1.9 2003/10/21 18:58:49 jmc Exp $	*/
d136 7
@


1.9
log
@typos from Tom Cosgrove;

Tom: I did not commit a couple of your changes.

i did not include some punctuation fixes (full stops, etc.)
mnemorable -> mnemonic: i decided memorable was probably better
instrunctions -> instruction: i kept the plural
@
text
@d1 1
a1 1
/*	$OpenBSD: dp8390var.h,v 1.8 2002/06/03 20:01:36 deraadt Exp $	*/
d144 2
@


1.8
log
@spell transceiver correctly
@
text
@d1 1
a1 1
/*	$OpenBSD: dp8390var.h,v 1.7 2002/03/14 01:26:54 millert Exp $	*/
d109 1
a109 1
 * This sets the default for enabling/disablng the transceiver.
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: dp8390var.h,v 1.6 2001/08/18 16:50:03 aaron Exp $	*/
d109 1
a109 1
 * This sets the default for enabling/disablng the tranceiver.
d111 1
a111 1
#define DP8390_DISABLE_TRANCEIVER	0x0001
@


1.6
log
@Make use of ax88190_stop_card and dl10019_stop_card.
@
text
@d1 1
a1 1
/*	$OpenBSD: dp8390var.h,v 1.5 2001/03/29 01:39:32 aaron Exp $	*/
d68 19
a86 19
	int	(*test_mem) __P((struct dp8390_softc *));
	void	(*init_card) __P((struct dp8390_softc *));
	void	(*stop_card) __P((struct dp8390_softc *));
	void	(*read_hdr) __P((struct dp8390_softc *,
		    int, struct dp8390_ring *));
	void	(*recv_int) __P((struct dp8390_softc *));
	int	(*ring_copy) __P((struct dp8390_softc *,
		    int, caddr_t, u_short));
	int	(*write_mbuf) __P((struct dp8390_softc *, struct mbuf *, int));

	int	(*sc_enable) __P((struct dp8390_softc *));
	void	(*sc_disable) __P((struct dp8390_softc *));

	void	(*sc_media_init) __P((struct dp8390_softc *));
	void	(*sc_media_fini) __P((struct dp8390_softc *));

	int	(*sc_mediachange) __P((struct dp8390_softc *));
	void	(*sc_mediastatus) __P((struct dp8390_softc *,
		    struct ifmediareq *));
d145 21
a165 21
int	dp8390_config __P((struct dp8390_softc *));
int	dp8390_intr __P((void *));
int	dp8390_ioctl __P((struct ifnet *, u_long, caddr_t));
void	dp8390_start __P((struct ifnet *));
void	dp8390_watchdog __P((struct ifnet *));
void	dp8390_reset __P((struct dp8390_softc *));
void	dp8390_init __P((struct dp8390_softc *));
void	dp8390_stop __P((struct dp8390_softc *));

int	dp8390_mediachange __P((struct ifnet *));
void	dp8390_mediastatus __P((struct ifnet *, struct ifmediareq *));

void	dp8390_media_init __P((struct dp8390_softc *));

int	dp8390_detach __P((struct dp8390_softc *, int));

void	dp8390_rint __P((struct dp8390_softc *));

void	dp8390_getmcaf __P((struct arpcom *, u_int8_t *));
struct mbuf *dp8390_get __P((struct dp8390_softc *, int, u_short));
void	dp8390_read __P((struct dp8390_softc *, int, u_short));
@


1.6.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: dp8390var.h,v 1.6 2001/08/18 16:50:03 aaron Exp $	*/
d68 19
a86 19
	int	(*test_mem)(struct dp8390_softc *);
	void	(*init_card)(struct dp8390_softc *);
	void	(*stop_card)(struct dp8390_softc *);
	void	(*read_hdr)(struct dp8390_softc *,
		    int, struct dp8390_ring *);
	void	(*recv_int)(struct dp8390_softc *);
	int	(*ring_copy)(struct dp8390_softc *,
		    int, caddr_t, u_short);
	int	(*write_mbuf)(struct dp8390_softc *, struct mbuf *, int);

	int	(*sc_enable)(struct dp8390_softc *);
	void	(*sc_disable)(struct dp8390_softc *);

	void	(*sc_media_init)(struct dp8390_softc *);
	void	(*sc_media_fini)(struct dp8390_softc *);

	int	(*sc_mediachange)(struct dp8390_softc *);
	void	(*sc_mediastatus)(struct dp8390_softc *,
		    struct ifmediareq *);
d109 1
a109 1
 * This sets the default for enabling/disablng the transceiver.
d111 1
a111 1
#define DP8390_DISABLE_TRANSCEIVER	0x0001
d145 21
a165 21
int	dp8390_config(struct dp8390_softc *);
int	dp8390_intr(void *);
int	dp8390_ioctl(struct ifnet *, u_long, caddr_t);
void	dp8390_start(struct ifnet *);
void	dp8390_watchdog(struct ifnet *);
void	dp8390_reset(struct dp8390_softc *);
void	dp8390_init(struct dp8390_softc *);
void	dp8390_stop(struct dp8390_softc *);

int	dp8390_mediachange(struct ifnet *);
void	dp8390_mediastatus(struct ifnet *, struct ifmediareq *);

void	dp8390_media_init(struct dp8390_softc *);

int	dp8390_detach(struct dp8390_softc *, int);

void	dp8390_rint(struct dp8390_softc *);

void	dp8390_getmcaf(struct arpcom *, u_int8_t *);
struct mbuf *dp8390_get(struct dp8390_softc *, int, u_short);
void	dp8390_read(struct dp8390_softc *, int, u_short);
@


1.5
log
@Add MII support to NE2000 PCMCIA driver. Both the Netgear FA410TXC and
New Media LiveWire Fast Ethernet adapters now work after these changes,
although the Netgear card still requires media to be set manually.
@
text
@d1 1
a1 1
/*	$OpenBSD: dp8390var.h,v 1.4 2001/03/12 05:36:58 aaron Exp $	*/
d70 1
@


1.4
log
@Adjust the way that media is initialized on DP8390-compatibles; from NetBSD.
The dp8390_softc now has media_init and media_fini function pointers that
do the work. fgsch@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: dp8390var.h,v 1.3 2000/05/29 17:08:51 fgsch Exp $	*/
d17 6
d34 2
a35 1
	struct ifmedia sc_media;	/* supported media information */
d157 2
@


1.3
log
@preparing for AX88190 support; from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: dp8390var.h,v 1.2 2000/04/19 21:52:38 fgsch Exp $	*/
d73 3
d137 1
a137 1
int	dp8390_config __P((struct dp8390_softc *, int *, int, int));
d145 5
@


1.2
log
@Remove NetBSD ifdefs here too.
@
text
@d1 1
a1 1
/*	$OpenBSD: dp8390var.h,v 1.1 1998/09/22 06:41:13 fgsch Exp $	*/
d40 1
d119 6
@


1.1
log
@New DS8390/WD83C690 device driver used by ec, ne and we from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a26 3
#ifdef __NetBSD__
	struct ethercom sc_ec;		/* ethernet common */
#else
a27 1
#endif
a57 4
#ifdef __NetBSD__
	u_int8_t sc_enaddr[6];	/* storage for MAC address */
#endif

a137 3
#ifdef __NetBSD__
void	dp8390_getmcaf __P((struct ethercom *, u_int8_t *));
#else
a138 1
#endif
@


1.1.8.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: dp8390var.h,v 1.5 2001/03/29 01:39:32 aaron Exp $	*/
a16 6
/*
 * We include MII glue here -- some DP8390 compatible chips have
 * MII interfaces on them (scary, isn't it...).
 */
#include <dev/mii/miivar.h>

d27 3
d31 2
a32 2
	struct mii_data sc_mii;		/* MII glue */
#define sc_media sc_mii.mii_media	/* compatibility definition */
a43 1
	u_int8_t rcr_proto;	/* values always set in RCR */
d62 4
a79 3
	void	(*sc_media_init) __P((struct dp8390_softc *));
	void	(*sc_media_fini) __P((struct dp8390_softc *));

a127 6
 * The chip is ASIX AX88190 and needs work around.
 */
#define DP8390_DO_AX88190_WORKAROUND	0x0020


/*
d135 1
a135 1
int	dp8390_config __P((struct dp8390_softc *));
a143 7
int	dp8390_mediachange __P((struct ifnet *));
void	dp8390_mediastatus __P((struct ifnet *, struct ifmediareq *));

void	dp8390_media_init __P((struct dp8390_softc *));

int	dp8390_detach __P((struct dp8390_softc *, int));

d146 3
d150 1
@


1.1.8.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: dp8390var.h,v 1.1.8.1 2001/05/14 22:23:43 niklas Exp $	*/
a69 1
	void	(*stop_card) __P((struct dp8390_softc *));
@


1.1.8.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d68 19
a86 19
	int	(*test_mem)(struct dp8390_softc *);
	void	(*init_card)(struct dp8390_softc *);
	void	(*stop_card)(struct dp8390_softc *);
	void	(*read_hdr)(struct dp8390_softc *,
		    int, struct dp8390_ring *);
	void	(*recv_int)(struct dp8390_softc *);
	int	(*ring_copy)(struct dp8390_softc *,
		    int, caddr_t, u_short);
	int	(*write_mbuf)(struct dp8390_softc *, struct mbuf *, int);

	int	(*sc_enable)(struct dp8390_softc *);
	void	(*sc_disable)(struct dp8390_softc *);

	void	(*sc_media_init)(struct dp8390_softc *);
	void	(*sc_media_fini)(struct dp8390_softc *);

	int	(*sc_mediachange)(struct dp8390_softc *);
	void	(*sc_mediastatus)(struct dp8390_softc *,
		    struct ifmediareq *);
d145 21
a165 21
int	dp8390_config(struct dp8390_softc *);
int	dp8390_intr(void *);
int	dp8390_ioctl(struct ifnet *, u_long, caddr_t);
void	dp8390_start(struct ifnet *);
void	dp8390_watchdog(struct ifnet *);
void	dp8390_reset(struct dp8390_softc *);
void	dp8390_init(struct dp8390_softc *);
void	dp8390_stop(struct dp8390_softc *);

int	dp8390_mediachange(struct ifnet *);
void	dp8390_mediastatus(struct ifnet *, struct ifmediareq *);

void	dp8390_media_init(struct dp8390_softc *);

int	dp8390_detach(struct dp8390_softc *, int);

void	dp8390_rint(struct dp8390_softc *);

void	dp8390_getmcaf(struct arpcom *, u_int8_t *);
struct mbuf *dp8390_get(struct dp8390_softc *, int, u_short);
void	dp8390_read(struct dp8390_softc *, int, u_short);
@


1.1.8.4
log
@Sync the SMP branch with 3.3
@
text
@d109 1
a109 1
 * This sets the default for enabling/disablng the transceiver.
d111 1
a111 1
#define DP8390_DISABLE_TRANSCEIVER	0x0001
@


1.1.8.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d109 1
a109 1
 * This sets the default for enabling/disabling the transceiver.
@


