head	1.12;
access;
symbols
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.11.0.28
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.26
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.20
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.22
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.14
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.18
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.16
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.12
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.10
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.6
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.8
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.14
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.10
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.8
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.6
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.6.0.10
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.8
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.6
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.5.0.10
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.4.0.8
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	SMP:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2;
locks; strict;
comment	@ * @;


1.12
date	2017.05.30.08.24.56;	author fcambus;	state Exp;
branches;
next	1.11;
commitid	GYyGfZe5CsmHN5fK;

1.11
date	2010.08.28.12.48.14;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.09.05.14.09.35;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2007.02.11.20.29.22;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2006.11.29.19.11.15;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2006.09.29.19.46.02;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.02.04.39.50;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.55;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.04.14.04.44.01;	author aaron;	state Exp;
branches
	1.4.4.1
	1.4.8.1;
next	1.3;

1.3
date	2001.04.06.04.42.05;	author csapuntz;	state Exp;
branches;
next	1.2;

1.2
date	2001.02.02.20.25.39;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	2000.11.15.20.42.40;	author aaron;	state Exp;
branches;
next	;

1.4.4.1
date	2001.05.14.22.24.06;	author niklas;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2002.03.28.11.51.01;	author niklas;	state Exp;
branches;
next	1.4.4.3;

1.4.4.3
date	2004.06.05.23.12.43;	author niklas;	state Exp;
branches;
next	;

1.4.8.1
date	2002.06.11.03.42.19;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Remove the unused pcdisplay_mapchar_simple function in pcdisplay(4).

It has been unused since this code was imported from NetBSD.

OK mlarkin@@
@
text
@/* $OpenBSD: pcdisplayvar.h,v 1.11 2010/08/28 12:48:14 miod Exp $ */
/* $NetBSD: pcdisplayvar.h,v 1.8 2000/01/25 02:44:03 ad Exp $ */

/*
 * Copyright (c) 1998
 *	Matthias Drochner.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

struct pcdisplayscreen {
	struct pcdisplay_handle *hdl;

	const struct wsscreen_descr *type;

	int active;		/* currently displayed */
	u_int16_t *mem;		/* backing store for contents */

	int cursoron;		/* cursor displayed? */
#ifdef PCDISPLAY_SOFTCURSOR
	int cursortmp;		/* glyph & attribute behind software cursor */
#endif
	int vc_ccol, vc_crow;	/* current cursor position */

	int dispoffset;		/* offset of displayed area in video mem */
	int visibleoffset;
};

struct pcdisplay_handle {
	bus_space_tag_t	ph_iot, ph_memt;
	bus_space_handle_t ph_ioh_6845, ph_memh;
};

static inline u_int8_t _pcdisplay_6845_read(struct pcdisplay_handle *, int);
static inline void _pcdisplay_6845_write(struct pcdisplay_handle *,
					      int, u_int8_t);

static inline u_int8_t
_pcdisplay_6845_read(struct pcdisplay_handle *ph, int reg)
{
	bus_space_write_1(ph->ph_iot, ph->ph_ioh_6845, MC6845_INDEX, reg);
	return (bus_space_read_1(ph->ph_iot, ph->ph_ioh_6845, MC6845_DATA));
}

static inline void
_pcdisplay_6845_write(struct pcdisplay_handle *ph, int reg, u_int8_t val)
{
	bus_space_write_1(ph->ph_iot, ph->ph_ioh_6845, MC6845_INDEX, reg);
	bus_space_write_1(ph->ph_iot, ph->ph_ioh_6845, MC6845_DATA, val);
}

#define pcdisplay_6845_read(ph, reg) \
	_pcdisplay_6845_read(ph, offsetof(struct reg_mc6845, reg))
#define pcdisplay_6845_write(ph, reg, val) \
	_pcdisplay_6845_write(ph, offsetof(struct reg_mc6845, reg), val)

void	pcdisplay_cursor_init(struct pcdisplayscreen *, int);
void	pcdisplay_cursor_reset(struct pcdisplayscreen *);
int	pcdisplay_cursor(void *, int, int, int);
int	pcdisplay_mapchar(void *, int, unsigned int *);
int	pcdisplay_putchar(void *, int, int, u_int, long);
struct wsdisplay_charcell;
int	pcdisplay_getchar(void *, int, int, struct wsdisplay_charcell *);
int	pcdisplay_copycols(void *, int, int, int,int);
int	pcdisplay_erasecols(void *, int, int, int, long);
int	pcdisplay_copyrows(void *, int, int, int);
int	pcdisplay_eraserows(void *, int, int, long);
@


1.11
log
@ansify function definitions, and constify a few arrays while there.
no functional change.
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplayvar.h,v 1.10 2009/09/05 14:09:35 miod Exp $ */
a78 3
#if 0
unsigned int pcdisplay_mapchar_simple(void *, int);
#endif
@


1.10
log
@Change the wsdisplay_emulops return types from void to int; emulops will now
return zero on success and nonzero on failure.
This commit only performs mechanical changes for the existing emulops to
always return zero.
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplayvar.h,v 1.9 2007/02/11 20:29:22 miod Exp $ */
d53 1
a53 2
static inline u_int8_t _pcdisplay_6845_read(struct pcdisplay_handle *,
						 int);
d57 2
a58 3
static inline u_int8_t _pcdisplay_6845_read(ph, reg)
	struct pcdisplay_handle *ph;
	int reg;
d64 2
a65 4
static inline void _pcdisplay_6845_write(ph, reg, val)
	struct pcdisplay_handle *ph;
	int reg;
	u_int8_t val;
@


1.9
log
@Remove _KERNEL_OPT leftovers.
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplayvar.h,v 1.8 2006/11/29 19:11:15 miod Exp $ */
d82 1
a82 1
void	pcdisplay_cursor(void *, int, int, int);
d86 2
a87 2
int pcdisplay_mapchar(void *, int, unsigned int *);
void	pcdisplay_putchar(void *, int, int, u_int, long);
d90 4
a93 4
void	pcdisplay_copycols(void *, int, int, int,int);
void	pcdisplay_erasecols(void *, int, int, int, long);
void	pcdisplay_copyrows(void *, int, int, int);
void	pcdisplay_eraserows(void *, int, int, long);
@


1.8
log
@Change the getchar wsdisplay_accessops function to not return a
display-dependent value, but instead fill a structure with the chaarcter
and a valid attribute, suitable for use with unpack_attr.

Adapt the wsmoused code to these changes, and remove all knowledge of
the text-mode style pc video attributes in it.

This will eventually allow wsmoused to be used on non-pcdisplay devices.
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplayvar.h,v 1.7 2006/09/29 19:46:02 miod Exp $ */
a28 4

#if 0
#include "opt_pcdisplay.h"
#endif
@


1.7
log
@If option PCDISPLAY_SOFTCURSOR, force the hardware cursor off every time
we switch vt, so that the hardware cursor does not reappear after starting
X11, and switching to a text vt.

Spotted by jmc@@
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplayvar.h,v 1.6 2004/04/02 04:39:50 deraadt Exp $ */
d92 2
a93 1
u_int16_t pcdisplay_getchar(void *, int, int);
@


1.6
log
@remove terms 3 & 4 for drochner@@NetBSD.org; as seen on netbsd lists
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplayvar.h,v 1.5 2002/03/14 01:26:55 millert Exp $ */
d85 1
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplayvar.h,v 1.4 2001/04/14 04:44:01 aaron Exp $ */
a15 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed for the NetBSD Project
 *	by Matthias Drochner.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.4
log
@Kernel support for console mouse functionality which will be controlled by
the wsmoused daemon (replacement for moused which was used with PCVT). Adds
a "getchar" method to the display drivers which returns the value of the
character currently under the cursor (e.g., so it may be inversed). From jbm@@.

Still needs a bit of cleanup and improvement, especially X cohabitation
features. The pointer moves to fast as well. These sorts of issues will be
corrected in-tree.
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplayvar.h,v 1.3 2001/04/06 04:42:05 csapuntz Exp $ */
d63 4
a66 4
static inline u_int8_t _pcdisplay_6845_read __P((struct pcdisplay_handle *,
						 int));
static inline void _pcdisplay_6845_write __P((struct pcdisplay_handle *,
					      int, u_int8_t));
d90 2
a91 2
void	pcdisplay_cursor_init __P((struct pcdisplayscreen *, int));
void	pcdisplay_cursor __P((void *, int, int, int));
d93 1
a93 1
unsigned int pcdisplay_mapchar_simple __P((void *, int));
d95 7
a101 7
int pcdisplay_mapchar __P((void *, int, unsigned int *));
void	pcdisplay_putchar __P((void *, int, int, u_int, long));
u_int16_t pcdisplay_getchar __P((void *, int, int));
void	pcdisplay_copycols __P((void *, int, int, int,int));
void	pcdisplay_erasecols __P((void *, int, int, int, long));
void	pcdisplay_copyrows __P((void *, int, int, int));
void	pcdisplay_eraserows __P((void *, int, int, long));
@


1.4.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplayvar.h,v 1.4 2001/04/14 04:44:01 aaron Exp $ */
d63 4
a66 4
static inline u_int8_t _pcdisplay_6845_read(struct pcdisplay_handle *,
						 int);
static inline void _pcdisplay_6845_write(struct pcdisplay_handle *,
					      int, u_int8_t);
d90 2
a91 2
void	pcdisplay_cursor_init(struct pcdisplayscreen *, int);
void	pcdisplay_cursor(void *, int, int, int);
d93 1
a93 1
unsigned int pcdisplay_mapchar_simple(void *, int);
d95 7
a101 7
int pcdisplay_mapchar(void *, int, unsigned int *);
void	pcdisplay_putchar(void *, int, int, u_int, long);
u_int16_t pcdisplay_getchar(void *, int, int);
void	pcdisplay_copycols(void *, int, int, int,int);
void	pcdisplay_erasecols(void *, int, int, int, long);
void	pcdisplay_copyrows(void *, int, int, int);
void	pcdisplay_eraserows(void *, int, int, long);
@


1.4.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplayvar.h,v 1.4 2001/04/14 04:44:01 aaron Exp $ */
@


1.4.4.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d63 4
a66 4
static inline u_int8_t _pcdisplay_6845_read(struct pcdisplay_handle *,
						 int);
static inline void _pcdisplay_6845_write(struct pcdisplay_handle *,
					      int, u_int8_t);
d90 2
a91 2
void	pcdisplay_cursor_init(struct pcdisplayscreen *, int);
void	pcdisplay_cursor(void *, int, int, int);
d93 1
a93 1
unsigned int pcdisplay_mapchar_simple(void *, int);
d95 7
a101 7
int pcdisplay_mapchar(void *, int, unsigned int *);
void	pcdisplay_putchar(void *, int, int, u_int, long);
u_int16_t pcdisplay_getchar(void *, int, int);
void	pcdisplay_copycols(void *, int, int, int,int);
void	pcdisplay_erasecols(void *, int, int, int, long);
void	pcdisplay_copyrows(void *, int, int, int);
void	pcdisplay_eraserows(void *, int, int, long);
@


1.4.4.3
log
@Merge with the trunk
@
text
@d16 6
@


1.3
log
@

Move offsetof define into sys/param.h
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplayvar.h,v 1.2 2001/02/02 20:25:39 aaron Exp $ */
d97 1
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a38 2

#define offsetof(type, member) ((size_t)(&((type *)0)->member))
@


1.1
log
@This driver supports PC display adapter hardware within the wscons(4)
console framework. It doesn't provide direct device driver entry points
but makes its functions available via the internal wsdisplay(4) interface.

The pcdisplay driver is indended as a minimal ``catch-all'' driver for
the different kinds of MDA or CGA compatible adapters. It doesn't support
multiple screens, nor colors or font loading.

From NetBSD. Contains routines used by the vga(4) and ega(4) drivers, etc.
This is more MI stuff in prepartion for wscons on i386 and alpha.
@
text
@d1 1
@

