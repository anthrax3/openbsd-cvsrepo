head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.14
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.16
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.10
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.12
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.4
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.8
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.40
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.36
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.38
	OPENBSD_5_0:1.10.0.34
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.32
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.30
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.26
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.28
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.24
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.22
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.20
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.18
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.16
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.14
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.8.0.4
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.20
	OPENBSD_2_8:1.7.0.18
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.16
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.14
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.12
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.10
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.8
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.6
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.4
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.11
date	2013.04.21.14.44.16;	author sebastia;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.23.28.02;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.55;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.18.22.37.40;	author art;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	97.01.15.05.35.47;	author kstailey;	state Exp;
branches
	1.7.14.1;
next	1.6;

1.6
date	97.01.15.00.41.55;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	96.11.28.23.27.56;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.10.31.01.01.42;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.05.26.00.27.07;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.22.21.42;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.01.31.07.01.09;	author deraadt;	state Exp;
branches;
next	;

1.7.14.1
date	2001.10.31.03.22.43;	author nate;	state Exp;
branches;
next	1.7.14.2;

1.7.14.2
date	2002.03.28.12.11.34;	author niklas;	state Exp;
branches;
next	1.7.14.3;

1.7.14.3
date	2003.06.07.11.02.29;	author ho;	state Exp;
branches;
next	;

1.8.4.1
date	2002.06.11.03.42.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Unify the zs tty driver.

Most of the hard work by mpi@@, who provided the initial diff.
Fixes for sparc from myself. Tested on sgi and sparc myself.
Compiles and detects zstty on my powerbook, compile tested on
sparc64 by me. Real testing with zs device on sparc64 by miod@@
who also gave a lot of help and feedback.

ok miod@@, mpi@@
@
text
@/*	$OpenBSD: z8530sc.h,v 1.5 2010/03/03 20:13:34 miod Exp $	*/
/*	$NetBSD: z8530sc.h,v 1.15 2001/05/11 01:40:48 thorpej Exp $	*/

/*
 * Copyright (c) 1994 Gordon W. Ross
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)zsvar.h	8.1 (Berkeley) 6/11/93
 */


/*
 * Function vector - per channel
 */
struct zs_chanstate;
struct zsops {
	void	(*zsop_rxint)(struct zs_chanstate *);
					/* receive char available */
	void	(*zsop_stint)(struct zs_chanstate *, int);
					/* external/status */
	void	(*zsop_txint)(struct zs_chanstate *);
					/* xmit buffer empty */
	void	(*zsop_softint)(struct zs_chanstate *);
					/* process software interrupt */
};

extern struct zsops zsops_null;


/*
 * Software state, per zs channel.
 */
struct zs_chanstate {

	/* Pointers to the device registers. */
	volatile uint8_t *cs_reg_csr; 	/* ctrl, status, and reg. number. */
	volatile uint8_t *cs_reg_data;	/* data or numbered register */

	int	cs_channel;		/* sub-unit number */
	void   *cs_private;		/* sub-driver data pointer */
	struct zsops *cs_ops;

	int	cs_brg_clk;		/* BAUD Rate Generator clock
					 * (usually PCLK / 16) */
	int	cs_defspeed;		/* default baud rate */
	int	cs_defcflag;		/* default cflag */

	/*
	 * We must keep a copy of the write registers as they are
	 * mostly write-only and we sometimes need to set and clear
	 * individual bits (e.g., in WR3).  Not all of these are
	 * needed but 16 bytes is cheap and this makes the addressing
	 * simpler.  Unfortunately, we can only write to some registers
	 * when the chip is not actually transmitting, so whenever
	 * we are expecting a `transmit done' interrupt the preg array
	 * is allowed to `get ahead' of the current values.  In a
	 * few places we must change the current value of a register,
	 * rather than (or in addition to) the pending value; for these
	 * cs_creg[] contains the current value.
	 */
	uint8_t	cs_creg[17];		/* current values */
	uint8_t	cs_preg[17];		/* pending values */
	int 	cs_heldchange;		/* change pending (creg != preg) */

	uint8_t	cs_rr0;			/* last rr0 processed */
	uint8_t	cs_rr0_delta;		/* rr0 changes at status intr. */
	uint8_t	cs_rr0_mask;		/* rr0 bits that stop output */
	uint8_t	cs_rr0_dcd;		/* which bit to read as DCD */
	uint8_t	cs_rr0_cts;		/* which bit to read as CTS */
	uint8_t	cs_rr0_pps;		/* which bit to use for PPS */
	/* the above is set only while CRTSCTS is enabled. */

	uint8_t	cs_wr5_dtr;		/* which bit to write as DTR */
	uint8_t	cs_wr5_rts;		/* which bit to write as RTS */
	/* the above is set only while CRTSCTS is enabled. */

	volatile uint8_t cs_softreq;	/* need soft interrupt call */
	char	cs_cua;  		/* CUA mode flag */

	/*
	 * For strange systems that have oddly wired serial ports, we
	 * provide a pointer to the channel state of the port that has
	 * our status lines on it.
	 */
	struct  zs_chanstate *cs_ctl_chan;

	/* power management hooks */
	int	(*enable)(struct zs_chanstate *);
	void	(*disable)(struct zs_chanstate *);
	int	enabled;

	/* MD code might define a larger variant of this. */
};

struct consdev;
struct zsc_attach_args {
	char *type;		/* type name 'serial', 'keyboard', 'mouse' */
	int channel;		/* two serial channels per zsc */
	int hwflags;		/* see definitions below */
	/* `consdev' is only valid if ZS_HWFLAG_USE_CONSDEV is set */
	struct consdev *consdev;
};
/* In case of split console devices, use these: */
#define ZS_HWFLAG_CONSOLE_INPUT		1
#define ZS_HWFLAG_CONSOLE_OUTPUT	2
#define ZS_HWFLAG_CONSOLE		\
	(ZS_HWFLAG_CONSOLE_INPUT | ZS_HWFLAG_CONSOLE_OUTPUT)
#define ZS_HWFLAG_NO_DCD	4	/* Ignore the DCD bit */
#define ZS_HWFLAG_NO_CTS	8	/* Ignore the CTS bit */
#define ZS_HWFLAG_RAW   	16	/* advise raw mode */
#define ZS_HWFLAG_USE_CONSDEV  	32	/* Use console ops from `consdev' */
#define	ZS_HWFLAG_NORESET	64	/* Don't reset at attach time */

int 	zsc_intr_soft(void *);
int 	zsc_intr_hard(void *);

void	zs_abort(struct zs_chanstate *);
void	zs_break(struct zs_chanstate *, int);
void	zs_iflush(struct zs_chanstate *);
void	zs_loadchannelregs(struct zs_chanstate *);
int 	zs_set_speed(struct zs_chanstate *, int);
int 	zs_set_modes(struct zs_chanstate *, int);

extern int zs_major;

int zs_check_kgdb(struct zs_chanstate *, int);
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 2
a2 2
/*	$OpenBSD: z8530sc.h,v 1.9 2002/03/14 01:26:55 millert Exp $	*/
/*	$NetBSD: z8530sc.h,v 1.4 1996/10/16 20:34:54 gwr Exp $	*/
d47 18
d70 2
a71 2
	volatile u_char	*cs_reg_csr; 	/* ctrl, status, and reg. number. */
	volatile u_char	*cs_reg_data;	/* data or numbered register */
d79 2
a80 1
	int	cs_defspeed;		/* default baud rate (from PROM) */
d95 15
a109 2
	u_char	cs_creg[16];		/* current values */
	u_char	cs_preg[16];		/* pending values */
d111 2
a112 3
	u_char	cs_heldchange;		/* change pending (creg != preg) */
	u_char	cs_rr0;			/* last rr0 processed */
	u_char	cs_rr0_delta;		/* rr0 changes at status intr. */
d114 6
a119 9
	char	cs_softreq;		/* need soft interrupt call */
};

/*
 * Function vector - per channel
 */
struct zsops {
	/* receive char available */
	void	(*zsop_rxint)(register struct zs_chanstate *);
d121 4
a124 2
	/* external/status */
	void	(*zsop_stint)(register struct zs_chanstate *);
d126 1
a126 5
	/* xmit buffer empty */
	void	(*zsop_txint)(register struct zs_chanstate *);

	/* process software interrupt */
	void	(*zsop_softint)(struct zs_chanstate *);
d129 1
a129 2
extern struct zsops zsops_null;

d131 5
a135 2
	int channel;	/* two serial channels per zsc */
	int hwflags;
d137 22
a158 1
#define ZS_HWFLAG_CONSOLE 1
d160 1
a160 6
int  zsc_intr_hard(void *);
int  zsc_intr_soft(void *);
void zs_break(struct zs_chanstate *, int);
int  zs_getspeed(struct zs_chanstate *);
void zs_iflush(struct zs_chanstate *);
void zs_loadchannelregs(struct zs_chanstate *);
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: z8530sc.h,v 1.8 2001/08/18 22:37:40 art Exp $	*/
d26 1
a26 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.8
log
@Move the softc into the machdep parts.
@
text
@d1 1
a1 1
/*	$OpenBSD: z8530sc.h,v 1.7 1997/01/15 05:35:47 kstailey Exp $	*/
d95 1
a95 1
	void	(*zsop_rxint)__P((register struct zs_chanstate *));
d98 1
a98 1
	void	(*zsop_stint)__P((register struct zs_chanstate *));
d101 1
a101 1
	void	(*zsop_txint)__P((register struct zs_chanstate *));
d104 1
a104 1
	void	(*zsop_softint)__P((struct zs_chanstate *));
d115 6
a120 6
int  zsc_intr_hard __P((void *));
int  zsc_intr_soft __P((void *));
void zs_break __P((struct zs_chanstate *, int));
int  zs_getspeed __P((struct zs_chanstate *));
void zs_iflush __P((struct zs_chanstate *));
void zs_loadchannelregs __P((struct zs_chanstate *));
@


1.8.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: z8530sc.h,v 1.8 2001/08/18 22:37:40 art Exp $	*/
d95 1
a95 1
	void	(*zsop_rxint)(register struct zs_chanstate *);
d98 1
a98 1
	void	(*zsop_stint)(register struct zs_chanstate *);
d101 1
a101 1
	void	(*zsop_txint)(register struct zs_chanstate *);
d104 1
a104 1
	void	(*zsop_softint)(struct zs_chanstate *);
d115 6
a120 6
int  zsc_intr_hard(void *);
int  zsc_intr_soft(void *);
void zs_break(struct zs_chanstate *, int);
int  zs_getspeed(struct zs_chanstate *);
void zs_iflush(struct zs_chanstate *);
void zs_loadchannelregs(struct zs_chanstate *);
@


1.7
log
@more missing prototypes and other warnings fixed
@
text
@d1 1
a1 1
/*	$OpenBSD: z8530sc.h,v 1.6 1997/01/15 00:41:55 kstailey Exp $	*/
a107 5

struct zsc_softc {
	struct	device zsc_dev;		/* required first: base device */
	struct	zs_chanstate zsc_cs[2];	/* channel A and B soft state */
};
@


1.7.14.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: z8530sc.h,v 1.7 1997/01/15 05:35:47 kstailey Exp $	*/
d108 5
@


1.7.14.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d95 1
a95 1
	void	(*zsop_rxint)(register struct zs_chanstate *);
d98 1
a98 1
	void	(*zsop_stint)(register struct zs_chanstate *);
d101 1
a101 1
	void	(*zsop_txint)(register struct zs_chanstate *);
d104 1
a104 1
	void	(*zsop_softint)(struct zs_chanstate *);
d115 6
a120 6
int  zsc_intr_hard(void *);
int  zsc_intr_soft(void *);
void zs_break(struct zs_chanstate *, int);
int  zs_getspeed(struct zs_chanstate *);
void zs_iflush(struct zs_chanstate *);
void zs_loadchannelregs(struct zs_chanstate *);
@


1.7.14.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: z8530sc.h,v 1.7.14.2 2002/03/28 12:11:34 niklas Exp $	*/
d26 5
a30 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.6
log
@added prototypes
@
text
@d1 1
a1 1
/*	$OpenBSD: z8530sc.h,v 1.5 1996/11/28 23:27:56 niklas Exp $	*/
d120 6
a125 2
int zsc_intr_hard __P((void *));
int zsc_intr_soft __P((void *));
@


1.5
log
@Adaption to new bus.h from NetBSD.  Various driver has been updated to
NetBSD 961107 state.  Other has not, partly because sometimes the bus.h
changes was coupled with other changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: z8530sc.h,v 1.4 1996/10/31 01:01:42 niklas Exp $	*/
a50 13
 * Function vector - per channel
 */
struct zsops {
	void	(*zsop_rxint)();	/* receive char available */
	void	(*zsop_stint)();	/* external/status */
	void	(*zsop_txint)();	/* xmit buffer empty */
	void	(*zsop_softint)();	/* process software interrupt */
};

extern struct zsops zsops_null;


/*
d90 19
d120 2
@


1.4
log
@$OpenBSD RCSIDs
@
text
@d1 2
a2 2
/*	$OpenBSD: z8530sc.h,v 1.3 1996/05/17 19:29:37 gwr Exp $	*/
/*	$NetBSD: z8530sc.h,v 1.3 1996/05/17 19:29:37 gwr Exp $	*/
d98 1
a98 1
	u_char	cs_rr0_new;		/* rr0 saved in status interrupt. */
@


1.3
log
@sync 0521
@
text
@d1 1
@


1.2
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$NetBSD: z8530sc.h,v 1.2 1996/04/10 21:44:44 gwr Exp $	*/
d72 1
a72 1
	void *cs_private;	/* sub-driver data pointer */
d75 2
a76 1
	int cs_pclk_div16;		/* PCLK / 16 */
d97 1
a97 1
	u_char	cs_rr0_new; 	/* rr0 saved in status interrupt. */
@


1.1
log
@z8530 reorganization from gwr (which i think isn't nearly as machine
independent or correct as he thinks it is)
@
text
@d1 1
a1 1
/*	$NetBSD: z8530sc.h,v 1.1 1996/01/24 01:07:24 gwr Exp $	*/
d53 4
a56 4
	int	(*zsop_rxint)();	/* receive char available */
	int	(*zsop_stint)();	/* external/status */
	int	(*zsop_txint)();	/* xmit buffer empty */
	int	(*zsop_softint)();	/* process software interrupt */
d96 1
a98 1
	char	cs__spare;
@
