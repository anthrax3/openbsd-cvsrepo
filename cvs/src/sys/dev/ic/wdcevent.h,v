head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.8
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.6
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.28
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.26
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.22
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.20
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.16
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.18
	OPENBSD_5_0:1.6.0.14
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.12
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.10
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.6
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.8
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.4
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.4.0.18
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.16
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.14
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.12
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.10
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	UBC_SYNC_B:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	UBC:1.2.0.2
	OPENBSD_3_1:1.1.0.4
	OPENBSD_3_1_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.8
date	2015.08.17.15.36.29;	author krw;	state Exp;
branches;
next	1.7;
commitid	Le3SuX5chjCNZy3I;

1.7
date	2014.12.19.07.23.57;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	cV4v1OA8Ccwr5fwb;

1.6
date	2008.07.02.03.00.55;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.30.00.13.30;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.28.21.01.43;	author grange;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.22.18.24.45;	author grange;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.03.09.18.46;	author gluk;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2002.03.16.17.12.09;	author csapuntz;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.03.28.00.38.15;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2004.02.19.10.56.21;	author niklas;	state Exp;
branches;
next	;

1.2.2.1
date	2002.06.11.03.42.20;	author art;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2003.05.19.21.59.43;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@The 80's called and want their interface back. Remove last fragments of
ST-506 support. Remove redundant 'precomp' variables/fields and rename
remaining few to 'features' to be consistant with the rest of the code.

Consensus that no ST-506 disks (requiring ISA cards, <120MB, usually
rife with bad sectors that can't be worked around) are still running
OpenBSD.
@
text
@/*	$OpenBSD: wdcevent.h,v 1.7 2014/12/19 07:23:57 deraadt Exp $	*/
/*
 * Copyright (c) 2001 Constantine Sapuntzakis
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#ifndef WDCEVENT_H
#define WDCEVENT_H

enum wdcevent_type {
	WDCEVENT_STATUS = 1,
	WDCEVENT_ERROR,
	WDCEVENT_ATAPI_CMD,
	WDCEVENT_ATAPI_DONE,
	WDCEVENT_ATA_SHORT,
	WDCEVENT_ATA_LONG,
	WDCEVENT_SET_DRIVE1,
	WDCEVENT_SET_DRIVE0,
	WDCEVENT_REG,
	WDCEVENT_ATA_EXT
};

#ifdef _KERNEL

#ifdef WDCDEBUG
void wdc_log(struct channel_softc *chp, enum wdcevent_type type,
    unsigned int size, char  val[]);

static __inline void WDC_LOG_STATUS(struct channel_softc *chp,
    u_int8_t status) {
	if (chp->ch_prev_log_status == status)
		return;

	chp->ch_prev_log_status = status;
	wdc_log(chp, WDCEVENT_STATUS, 1, &status);
}

static __inline void WDC_LOG_ERROR(struct channel_softc *chp,
    u_int8_t error) {
	wdc_log(chp, WDCEVENT_ERROR, 1, &error);
}

static __inline void WDC_LOG_ATAPI_CMD(struct channel_softc *chp, int drive,
    int flags, int len, void *cmd) {
	u_int8_t record[20];

	record[0] = (flags >> 8);
	record[1] = flags & 0xff;
	memcpy(&record[2], cmd, len);

	wdc_log(chp, WDCEVENT_ATAPI_CMD, len + 2, record);
}

static __inline void WDC_LOG_ATAPI_DONE(struct channel_softc *chp, int drive,
    int flags, u_int8_t error) {
	char record[3] = {flags >> 8, flags & 0xff, error};
	wdc_log(chp, WDCEVENT_ATAPI_DONE, 3, record);
}

static __inline void WDC_LOG_ATA_CMDSHORT(struct channel_softc *chp, u_int8_t cmd) {
	wdc_log(chp, WDCEVENT_ATA_SHORT, 1, &cmd);
}

static __inline void WDC_LOG_ATA_CMDLONG(struct channel_softc *chp,
    u_int8_t head, u_int8_t features, u_int8_t cylinhi, u_int8_t cylinlo,
    u_int8_t sector, u_int8_t count, u_int8_t command) {
	char record[8] = { head, features, cylinhi, cylinlo,
			   sector, count, command };

	wdc_log(chp, WDCEVENT_ATA_LONG, 7, record);
}

static __inline void WDC_LOG_SET_DRIVE(struct channel_softc *chp,
    u_int8_t drive) {
	wdc_log(chp, drive ? WDCEVENT_SET_DRIVE1 : WDCEVENT_SET_DRIVE0,
	    0, NULL);
}

static __inline void WDC_LOG_REG(struct channel_softc *chp,
    enum wdc_regs reg, u_int16_t val) {
	char record[3];

	record[0] = reg;
	record[1] = (val >> 8);
	record[2] = val & 0xff;

	wdc_log(chp, WDCEVENT_REG, 3, record);
}

static __inline void WDC_LOG_ATA_CMDEXT(struct channel_softc *chp,
    u_int8_t lba_hi1, u_int8_t lba_hi2, u_int8_t lba_mi1, u_int8_t lba_mi2,
    u_int8_t lba_lo1, u_int8_t lba_lo2, u_int8_t count1, u_int8_t count2,
    u_int8_t command) {
	char record[9] = { lba_hi1, lba_hi2, lba_mi1, lba_mi2,
			   lba_lo1, lba_lo2, count1, count2, command };

	wdc_log(chp, WDCEVENT_ATA_EXT, 9, record);
}
#else
#define WDC_LOG_STATUS(chp, status)
#define WDC_LOG_ERROR(chp, error)
#define WDC_LOG_ATAPI_CMD(chp, drive, flags, len, cmd)
#define WDC_LOG_ATAPI_DONE(chp, drive, flags, error)
#define WDC_LOG_ATA_CMDSHORT(chp, cmd)
#define WDC_LOG_ATA_CMDLONG(chp, head, features, cylinhi, cylinlo, \
    sector, count, command)
#define WDC_LOG_SET_DRIVE(chp, drive)
#define WDC_LOG_REG(chp, reg, val)
#define WDC_LOG_ATA_CMDEXT(chp, lba_hi1, lba_hi2, lba_mi1, lba_mi2, \
    lba_lo1, lba_lo2, count1, count2, command)
#endif /* WDCDEBUG */

#endif	/* _KERNEL */

#endif	/* WDCEVENT_H */
@


1.7
log
@another handful of bcopy -> memcpy because there is no overlap
@
text
@d1 1
a1 1
/*	$OpenBSD: wdcevent.h,v 1.6 2008/07/02 03:00:55 fgsch Exp $	*/
d86 1
a86 1
    u_int8_t head, u_int8_t precomp, u_int8_t cylinhi, u_int8_t cylinlo,
d88 1
a88 1
	char record[8] = { head, precomp, cylinhi, cylinlo,
d126 1
a126 1
#define WDC_LOG_ATA_CMDLONG(chp, head, precomp, cylinhi, cylinlo, \
@


1.6
log
@unify using WDCDEBUG.
@
text
@d1 1
a1 1
/*	$OpenBSD: wdcevent.h,v 1.5 2008/06/30 00:13:30 fgsch Exp $	*/
d70 1
a70 1
	bcopy(cmd, &record[2], len);
@


1.5
log
@wrap logging code around WDC_DEBUG. shrinks kernel by ~4k.
jsg@@ krw@@ miod@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: wdcevent.h,v 1.4 2003/09/28 21:01:43 grange Exp $	*/
d46 1
a46 1
#ifdef WDC_DEBUG
d132 1
a132 1
#endif /* WDC_DEBUG */
@


1.4
log
@kill trailing spaces, no functional changes
@
text
@d1 1
a1 2
/* $OpenBSD: wdcevent.h,v 1.3 2002/12/22 18:24:45 grange Exp $ */

d46 1
d120 13
@


1.3
log
@No more magic wdc events types, give them names.
ok costa@@
@
text
@d1 1
a1 1
/* $OpenBSD: wdcevent.h,v 1.2 2002/05/03 09:18:46 gluk Exp $ */
d54 1
a54 1
	
d85 1
a85 1
static __inline void WDC_LOG_ATA_CMDLONG(struct channel_softc *chp, 
@


1.2
log
@LBA48 support.
Adopted from NetBSD by Alexander Yurchenko <grange@@openbsd.ru>.

costa@@ ok.
@
text
@d1 1
a1 1
/* $OpenBSD: wdcevent.h,v 1.1 2002/03/16 17:12:09 csapuntz Exp $ */
d32 16
a47 1
void wdc_log(struct channel_softc *chp, int type, 
d56 1
a56 1
	wdc_log(chp, 1, 1, &status);
d61 1
a61 1
	wdc_log(chp, 2, 1, &error);
d72 1
a72 1
	wdc_log(chp, 3, len + 2, record);
d78 1
a78 1
	wdc_log(chp, 4, 3, record);
d82 1
a82 1
	wdc_log(chp, 5, 1, &cmd);
d91 1
a91 1
	wdc_log(chp, 6, 7, record);
d96 2
a97 1
	wdc_log(chp, drive ? 7 : 8, 0, NULL);
d108 1
a108 1
	wdc_log(chp, 9, 3, record);
d118 1
a118 1
	wdc_log(chp, 10, 9, record);
d121 3
a123 1
#endif
@


1.2.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.2.2.2
log
@sync
@
text
@d32 1
a32 16
enum wdcevent_type {
	WDCEVENT_STATUS = 1,
	WDCEVENT_ERROR,
	WDCEVENT_ATAPI_CMD,
	WDCEVENT_ATAPI_DONE,
	WDCEVENT_ATA_SHORT,
	WDCEVENT_ATA_LONG,
	WDCEVENT_SET_DRIVE1,
	WDCEVENT_SET_DRIVE0,
	WDCEVENT_REG,
	WDCEVENT_ATA_EXT
};

#ifdef _KERNEL

void wdc_log(struct channel_softc *chp, enum wdcevent_type type,
d41 1
a41 1
	wdc_log(chp, WDCEVENT_STATUS, 1, &status);
d46 1
a46 1
	wdc_log(chp, WDCEVENT_ERROR, 1, &error);
d57 1
a57 1
	wdc_log(chp, WDCEVENT_ATAPI_CMD, len + 2, record);
d63 1
a63 1
	wdc_log(chp, WDCEVENT_ATAPI_DONE, 3, record);
d67 1
a67 1
	wdc_log(chp, WDCEVENT_ATA_SHORT, 1, &cmd);
d76 1
a76 1
	wdc_log(chp, WDCEVENT_ATA_LONG, 7, record);
d81 1
a81 2
	wdc_log(chp, drive ? WDCEVENT_SET_DRIVE1 : WDCEVENT_SET_DRIVE0,
	    0, NULL);
d92 1
a92 1
	wdc_log(chp, WDCEVENT_REG, 3, record);
d102 1
a102 1
	wdc_log(chp, WDCEVENT_ATA_EXT, 9, record);
d105 1
a105 3
#endif	/* _KERNEL */

#endif	/* WDCEVENT_H */
@


1.1
log
@The new code logs the control signals on the IDE bus. You can extract the log
using atactl <device> dump. The log will help us support more devices.
Send logs to csapuntz@@
@
text
@d1 1
a1 1
/* $OpenBSD: $ */
d93 10
@


1.1.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d32 1
a32 16
enum wdcevent_type {
	WDCEVENT_STATUS = 1,
	WDCEVENT_ERROR,
	WDCEVENT_ATAPI_CMD,
	WDCEVENT_ATAPI_DONE,
	WDCEVENT_ATA_SHORT,
	WDCEVENT_ATA_LONG,
	WDCEVENT_SET_DRIVE1,
	WDCEVENT_SET_DRIVE0,
	WDCEVENT_REG,
	WDCEVENT_ATA_EXT
};

#ifdef _KERNEL

void wdc_log(struct channel_softc *chp, enum wdcevent_type type,
d41 1
a41 1
	wdc_log(chp, WDCEVENT_STATUS, 1, &status);
d46 1
a46 1
	wdc_log(chp, WDCEVENT_ERROR, 1, &error);
d57 1
a57 1
	wdc_log(chp, WDCEVENT_ATAPI_CMD, len + 2, record);
d63 1
a63 1
	wdc_log(chp, WDCEVENT_ATAPI_DONE, 3, record);
d67 1
a67 1
	wdc_log(chp, WDCEVENT_ATA_SHORT, 1, &cmd);
d76 1
a76 1
	wdc_log(chp, WDCEVENT_ATA_LONG, 7, record);
d81 1
a81 2
	wdc_log(chp, drive ? WDCEVENT_SET_DRIVE1 : WDCEVENT_SET_DRIVE0,
	    0, NULL);
d92 1
a92 11
	wdc_log(chp, WDCEVENT_REG, 3, record);
}

static __inline void WDC_LOG_ATA_CMDEXT(struct channel_softc *chp,
    u_int8_t lba_hi1, u_int8_t lba_hi2, u_int8_t lba_mi1, u_int8_t lba_mi2,
    u_int8_t lba_lo1, u_int8_t lba_lo2, u_int8_t count1, u_int8_t count2,
    u_int8_t command) {
	char record[9] = { lba_hi1, lba_hi2, lba_mi1, lba_mi2,
			   lba_lo1, lba_lo2, count1, count2, command };

	wdc_log(chp, WDCEVENT_ATA_EXT, 9, record);
d95 1
a95 3
#endif	/* _KERNEL */

#endif	/* WDCEVENT_H */
@


1.1.2.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d54 1
a54 1

d85 1
a85 1
static __inline void WDC_LOG_ATA_CMDLONG(struct channel_softc *chp,
@


