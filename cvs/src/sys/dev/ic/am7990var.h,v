head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.14
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.8
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.10
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.16
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.14
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.10
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.12
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.34
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.30
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.28
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.26
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.24
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.22
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.20
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.18
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.16
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.14
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.12
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.10
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.8
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.8.0.18
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.16
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.14
	OPENBSD_2_8:1.8.0.12
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.10
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.8
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.6
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.4
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2013.09.24.20.10.57;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.08.10.20.29.54;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.54;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	98.09.16.22.41.20;	author jason;	state Exp;
branches
	1.8.8.1
	1.8.18.1;
next	1.7;

1.7
date	97.08.08.08.05.42;	author downsj;	state Exp;
branches;
next	1.6;

1.6
date	96.11.28.23.27.47;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.05.10.12.41.11;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.05.02.13.51.46;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.18.23.47.18;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.12.15.02.35.10;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.31;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.31;	author deraadt;	state Exp;
branches;
next	;

1.8.8.1
date	2002.03.28.11.51.00;	author niklas;	state Exp;
branches;
next	;

1.8.18.1
date	2002.06.11.03.42.17;	author art;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Sync the MI LANCE code ( le(4) ) with NetBSD, except for the following:
- the am7990_get() - now lance_get() - is unchanged.
- the interrupt acknowledge logic is unchanged, and will disable interrupts,
  then acknowledge all interrupt conditions.

Add ILACC (79900) support (from NetBSD).

Both LANCE (am7990.c) and ILACC (am79900.c) code share as much common code
(lance.c) as possible. This affects all le(4) attachments, but the changes
are mostly mechanical, to split am7990-specific parts from lance-agnostic
parts.

Compile tested on all affected platforms. Tested on alpha, hp300, luna88k,
mvme88k, sparc, sparc64 and vax.
@
text
@/*	$OpenBSD$	*/
/*	$NetBSD: am7990var.h,v 1.24 2008/04/28 20:23:49 martin Exp $	*/

/*-
 * Copyright (c) 1997, 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Charles M. Hannum and by Jason R. Thorpe of the Numerical Aerospace
 * Simulation Facility, NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _DEV_IC_AM7990VAR_H_
#define	_DEV_IC_AM7990VAR_H_

/*
 * Ethernet software status per device.
 *
 * NOTE: this structure MUST be the first element in machine-dependent
 * le_softc structures!  This is designed SPECIFICALLY to make it possible
 * to simply cast a "void *" to "struct le_softc *" or to
 * "struct am7990_softc *".  Among other things, this saves a lot of hair
 * in the interrupt handlers.
 */
struct am7990_softc {
	struct lance_softc lsc;
};

void	am7990_config(struct am7990_softc *);
int	am7990_intr(void *);

#endif /* _DEV_IC_AM7990VAR_H_ */
@


1.10
log
@More cases of shutdown hooks not needed after card is already stopped.  In
these cases the xxstop function is a bit more complicated and has a flag of
some sort, but the use of that flag does not matter;  DMA is already ceased
ok dlg
@
text
@d1 2
a2 2
/*	$OpenBSD: am7990var.h,v 1.9 2002/03/14 01:26:54 millert Exp $	*/
/*	$NetBSD: am7990var.h,v 1.8 1996/07/05 23:57:01 abrown Exp $	*/
d4 7
a10 2
/*
 * Copyright (c) 1995 Charles M. Hannum.  All rights reserved.
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Charles M. Hannum.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d21 11
a31 10
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d34 2
a35 7
#ifdef DDB
#define	integrate
#define hide
#else
#define	integrate	static __inline
#define hide		static
#endif
a39 4
 * Each interface is referenced by a network interface structure,
 * arpcom.ac_if, which the routing code uses to locate the interface. 
 * This structure contains the output queue for the interface, its address, ...
 *
d47 1
a47 54
	struct	device sc_dev;		/* base device glue */
	struct	arpcom sc_arpcom;	/* Ethernet common part */

	/*
	 * Memory functions:
	 *
	 *	copy to/from descriptor
	 *	copy to/from buffer
	 *	zero bytes in buffer
	 */
	void	(*sc_copytodesc)(struct am7990_softc *, void *, int, int);
	void	(*sc_copyfromdesc)(struct am7990_softc *, void *, int, int);
	void	(*sc_copytobuf)(struct am7990_softc *, void *, int, int);
	void	(*sc_copyfrombuf)(struct am7990_softc *, void *, int, int);
	void	(*sc_zerobuf)(struct am7990_softc *, int, int);

	/*
	 * Machine-dependent functions:
	 *
	 *	read/write CSR
	 *	hardware reset hook - may be NULL
	 *	hardware init hook - may be NULL
	 *	no carrier hook - may be NULL
	 */
	u_int16_t (*sc_rdcsr)(struct am7990_softc *, u_int16_t);
	void	(*sc_wrcsr)(struct am7990_softc *, u_int16_t, u_int16_t);
	void	(*sc_hwreset)(struct am7990_softc *);
	void	(*sc_hwinit)(struct am7990_softc *);
	void	(*sc_nocarrier)(struct am7990_softc *);

	int	sc_hasifmedia;
	struct	ifmedia sc_ifmedia;

	u_int16_t sc_conf3;	/* CSR3 value */

	void	*sc_mem;	/* base address of RAM -- CPU's view */
	u_long	sc_addr;	/* base address of RAM -- LANCE's view */

	u_long	sc_memsize;	/* size of RAM */

	int	sc_nrbuf;	/* number of receive buffers */
	int	sc_ntbuf;	/* number of transmit buffers */
	int	sc_last_rd;
	int	sc_first_td, sc_last_td, sc_no_td;

	int	sc_initaddr;
	int	sc_rmdaddr;
	int	sc_tmdaddr;
	int	sc_rbufaddr;
	int	sc_tbufaddr;

#ifdef LEDEBUG
	int	sc_debug;
#endif
d50 2
a51 28
/* Export this to machine-dependent drivers. */
extern struct cfdriver le_cd;

void am7990_config(struct am7990_softc *);
void am7990_init(struct am7990_softc *);
int am7990_ioctl(struct ifnet *, u_long, caddr_t);
void am7990_meminit(struct am7990_softc *);
void am7990_reset(struct am7990_softc *);
void am7990_setladrf(struct arpcom *, u_int16_t *);
void am7990_start(struct ifnet *);
void am7990_stop(struct am7990_softc *);
void am7990_watchdog(struct ifnet *);
int am7990_intr(void *);

/*
 * The following functions are only useful on certain cpu/bus
 * combinations.  They should be written in assembly language for
 * maximum efficiency, but machine-independent versions are provided
 * for drivers that have not yet been optimized.
 */
void am7990_copytobuf_contig(struct am7990_softc *, void *, int, int);
void am7990_copyfrombuf_contig(struct am7990_softc *, void *, int, int);
void am7990_zerobuf_contig(struct am7990_softc *, int, int);

#if 0	/* Example only - see am7990.c */
void am7990_copytobuf_gap2(struct am7990_softc *, void *, int, int);
void am7990_copyfrombuf_gap2(struct am7990_softc *, void *, int, int);
void am7990_zerobuf_gap2(struct am7990_softc *, int, int);
d53 1
a53 4
void am7990_copytobuf_gap16(struct am7990_softc *, void *, int, int);
void am7990_copyfrombuf_gap16(struct am7990_softc *, void *, int, int);
void am7990_zerobuf_gap16(struct am7990_softc *, int, int);
#endif /* Example only */
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: am7990var.h,v 1.8 1998/09/16 22:41:20 jason Exp $	*/
a86 2

	void	*sc_sh;		/* shutdownhook cookie */
@


1.8
log
@o if_media'fied am7990
o if_media'fied sun4m le.
@
text
@d1 1
a1 1
/*	$OpenBSD: am7990var.h,v 1.7 1997/08/08 08:05:42 downsj Exp $	*/
d65 5
a69 10
	void	(*sc_copytodesc)
		    __P((struct am7990_softc *, void *, int, int));
	void	(*sc_copyfromdesc)
		    __P((struct am7990_softc *, void *, int, int));
	void	(*sc_copytobuf)
		    __P((struct am7990_softc *, void *, int, int));
	void	(*sc_copyfrombuf)
		    __P((struct am7990_softc *, void *, int, int));
	void	(*sc_zerobuf)
		    __P((struct am7990_softc *, int, int));
d79 5
a83 7
	u_int16_t (*sc_rdcsr)
		    __P((struct am7990_softc *, u_int16_t));
	void	(*sc_wrcsr)
		    __P((struct am7990_softc *, u_int16_t, u_int16_t));
	void	(*sc_hwreset) __P((struct am7990_softc *));
	void	(*sc_hwinit) __P((struct am7990_softc *));
	void	(*sc_nocarrier) __P((struct am7990_softc *));
d116 10
a125 10
void am7990_config __P((struct am7990_softc *));
void am7990_init __P((struct am7990_softc *));
int am7990_ioctl __P((struct ifnet *, u_long, caddr_t));
void am7990_meminit __P((struct am7990_softc *));
void am7990_reset __P((struct am7990_softc *));
void am7990_setladrf __P((struct arpcom *, u_int16_t *));
void am7990_start __P((struct ifnet *));
void am7990_stop __P((struct am7990_softc *));
void am7990_watchdog __P((struct ifnet *));
int am7990_intr __P((void *));
d133 3
a135 3
void am7990_copytobuf_contig __P((struct am7990_softc *, void *, int, int));
void am7990_copyfrombuf_contig __P((struct am7990_softc *, void *, int, int));
void am7990_zerobuf_contig __P((struct am7990_softc *, int, int));
d138 7
a144 7
void am7990_copytobuf_gap2 __P((struct am7990_softc *, void *, int, int));
void am7990_copyfrombuf_gap2 __P((struct am7990_softc *, void *, int, int));
void am7990_zerobuf_gap2 __P((struct am7990_softc *, int, int));

void am7990_copytobuf_gap16 __P((struct am7990_softc *, void *, int, int));
void am7990_copyfrombuf_gap16 __P((struct am7990_softc *, void *, int, int));
void am7990_zerobuf_gap16 __P((struct am7990_softc *, int, int));
@


1.8.18.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: am7990var.h,v 1.8 1998/09/16 22:41:20 jason Exp $	*/
d65 10
a74 5
	void	(*sc_copytodesc)(struct am7990_softc *, void *, int, int);
	void	(*sc_copyfromdesc)(struct am7990_softc *, void *, int, int);
	void	(*sc_copytobuf)(struct am7990_softc *, void *, int, int);
	void	(*sc_copyfrombuf)(struct am7990_softc *, void *, int, int);
	void	(*sc_zerobuf)(struct am7990_softc *, int, int);
d84 7
a90 5
	u_int16_t (*sc_rdcsr)(struct am7990_softc *, u_int16_t);
	void	(*sc_wrcsr)(struct am7990_softc *, u_int16_t, u_int16_t);
	void	(*sc_hwreset)(struct am7990_softc *);
	void	(*sc_hwinit)(struct am7990_softc *);
	void	(*sc_nocarrier)(struct am7990_softc *);
d123 10
a132 10
void am7990_config(struct am7990_softc *);
void am7990_init(struct am7990_softc *);
int am7990_ioctl(struct ifnet *, u_long, caddr_t);
void am7990_meminit(struct am7990_softc *);
void am7990_reset(struct am7990_softc *);
void am7990_setladrf(struct arpcom *, u_int16_t *);
void am7990_start(struct ifnet *);
void am7990_stop(struct am7990_softc *);
void am7990_watchdog(struct ifnet *);
int am7990_intr(void *);
d140 3
a142 3
void am7990_copytobuf_contig(struct am7990_softc *, void *, int, int);
void am7990_copyfrombuf_contig(struct am7990_softc *, void *, int, int);
void am7990_zerobuf_contig(struct am7990_softc *, int, int);
d145 7
a151 7
void am7990_copytobuf_gap2(struct am7990_softc *, void *, int, int);
void am7990_copyfrombuf_gap2(struct am7990_softc *, void *, int, int);
void am7990_zerobuf_gap2(struct am7990_softc *, int, int);

void am7990_copytobuf_gap16(struct am7990_softc *, void *, int, int);
void am7990_copyfrombuf_gap16(struct am7990_softc *, void *, int, int);
void am7990_zerobuf_gap16(struct am7990_softc *, int, int);
@


1.8.8.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d65 10
a74 5
	void	(*sc_copytodesc)(struct am7990_softc *, void *, int, int);
	void	(*sc_copyfromdesc)(struct am7990_softc *, void *, int, int);
	void	(*sc_copytobuf)(struct am7990_softc *, void *, int, int);
	void	(*sc_copyfrombuf)(struct am7990_softc *, void *, int, int);
	void	(*sc_zerobuf)(struct am7990_softc *, int, int);
d84 7
a90 5
	u_int16_t (*sc_rdcsr)(struct am7990_softc *, u_int16_t);
	void	(*sc_wrcsr)(struct am7990_softc *, u_int16_t, u_int16_t);
	void	(*sc_hwreset)(struct am7990_softc *);
	void	(*sc_hwinit)(struct am7990_softc *);
	void	(*sc_nocarrier)(struct am7990_softc *);
d123 10
a132 10
void am7990_config(struct am7990_softc *);
void am7990_init(struct am7990_softc *);
int am7990_ioctl(struct ifnet *, u_long, caddr_t);
void am7990_meminit(struct am7990_softc *);
void am7990_reset(struct am7990_softc *);
void am7990_setladrf(struct arpcom *, u_int16_t *);
void am7990_start(struct ifnet *);
void am7990_stop(struct am7990_softc *);
void am7990_watchdog(struct ifnet *);
int am7990_intr(void *);
d140 3
a142 3
void am7990_copytobuf_contig(struct am7990_softc *, void *, int, int);
void am7990_copyfrombuf_contig(struct am7990_softc *, void *, int, int);
void am7990_zerobuf_contig(struct am7990_softc *, int, int);
d145 7
a151 7
void am7990_copytobuf_gap2(struct am7990_softc *, void *, int, int);
void am7990_copyfrombuf_gap2(struct am7990_softc *, void *, int, int);
void am7990_zerobuf_gap2(struct am7990_softc *, int, int);

void am7990_copytobuf_gap16(struct am7990_softc *, void *, int, int);
void am7990_copyfrombuf_gap16(struct am7990_softc *, void *, int, int);
void am7990_zerobuf_gap16(struct am7990_softc *, int, int);
@


1.7
log
@Add hwreset callback; drivers need to set this appropiately.
@
text
@d1 1
a1 1
/*	$OpenBSD: am7990var.h,v 1.6 1996/11/28 23:27:47 niklas Exp $	*/
d91 3
@


1.6
log
@Adaption to new bus.h from NetBSD.  Various driver has been updated to
NetBSD 961107 state.  Other has not, partly because sometimes the bus.h
changes was coupled with other changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: am7990var.h,v 1.3 1996/04/18 23:47:18 niklas Exp $	*/
d80 1
d88 1
@


1.5
log
@if_name/if_unit -> if_xname/if_softc
@
text
@d2 1
a2 1
/*	$NetBSD: am7990var.h,v 1.7 1996/05/07 01:38:37 thorpej Exp $	*/
d81 1
d88 1
@


1.4
log
@make these work together
@
text
@d2 1
a2 1
/*	$NetBSD: am7990var.h,v 1.6 1996/04/22 02:40:49 christos Exp $	*/
d35 1
d38 1
d41 85
a125 20
void leconfig __P((struct le_softc *));
void leinit __P((struct le_softc *));
int leioctl __P((struct ifnet *, u_long, caddr_t));
void lememinit __P((struct le_softc *));
void lereset __P((struct le_softc *));
void lesetladrf __P((struct arpcom *, u_int16_t *));
void lestart __P((struct ifnet *));
void lestop __P((struct le_softc *));
void lewatchdog __P((int));

integrate void lehwinit __P((struct le_softc *));
integrate u_int16_t lerdcsr __P((struct le_softc *, u_int16_t));
integrate void lewrcsr __P((struct le_softc *, u_int16_t, u_int16_t));

integrate void lerint __P((struct le_softc *));
integrate void letint __P((struct le_softc *));

integrate int leput __P((struct le_softc *, int, struct mbuf *));
integrate struct mbuf *leget __P((struct le_softc *, int, int));
integrate void leread __P((struct le_softc *, int, int));
d133 13
a145 15
#ifdef LE_NEED_BUF_CONTIG
void am7990_copytobuf_contig __P((struct le_softc *, void *, int, int));
void am7990_copyfrombuf_contig __P((struct le_softc *, void *, int, int));
void am7990_zerobuf_contig __P((struct le_softc *, int, int));
#endif /* LE_NEED_BUF_CONTIG */
#ifdef LE_NEED_BUF_GAP2
void am7990_copytobuf_gap2 __P((struct le_softc *, void *, int, int));
void am7990_copyfrombuf_gap2 __P((struct le_softc *, void *, int, int));
void am7990_zerobuf_gap2 __P((struct le_softc *, int, int));
#endif /* LE_NEED_BUF_GAP2 */
#ifdef LE_NEED_BUF_GAP16
void am7990_copytobuf_gap16 __P((struct le_softc *, void *, int, int));
void am7990_copyfrombuf_gap16 __P((struct le_softc *, void *, int, int));
void am7990_zerobuf_gap16 __P((struct le_softc *, int, int));
#endif /* LE_NEED_BUF_GAP16 */
@


1.3
log
@NetBSD 960317 merge
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: am7990var.h,v 1.4 1996/03/14 19:05:09 christos Exp $	*/
d36 1
a36 1
#define	integrate	static inline
d49 1
d67 3
a69 3
integrate void copytobuf_contig __P((struct le_softc *, void *, int, int));
integrate void copyfrombuf_contig __P((struct le_softc *, void *, int, int));
integrate void zerobuf_contig __P((struct le_softc *, int, int));
d72 3
a74 3
integrate void copytobuf_gap2 __P((struct le_softc *, void *, int, int));
integrate void copyfrombuf_gap2 __P((struct le_softc *, void *, int, int));
integrate void zerobuf_gap2 __P((struct le_softc *, int, int));
d77 3
a79 3
integrate void copytobuf_gap16 __P((struct le_softc *, void *, int, int));
integrate void copyfrombuf_gap16 __P((struct le_softc *, void *, int, int));
integrate void zerobuf_gap16 __P((struct le_softc *, int, int));
@


1.2
log
@from netbsd; mi lance driver
@
text
@d1 2
a2 1
/*	$NetBSD: am7990var.h,v 1.3 1995/12/11 19:48:58 mycroft Exp $	*/
d49 2
a50 2
integrate u_int16_t lerdcsr __P((/* struct le_softc *, u_int16_t */));
integrate void lewrcsr __P((/* struct le_softc *, u_int16_t, u_int16_t */));
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: am7990var.h,v 1.1 1995/06/28 02:24:56 cgd Exp $	*/
d46 1
a46 1
void lewatchdog __P((/* short */));
d58 21
a78 6
void copytodesc_contig(), copyfromdesc_contig();
void copytobuf_contig(), copyfrombuf_contig(), zerobuf_contig();
#ifdef 0
void copytobuf_gap2(), copyfrombuf_gap2(), zerobuf_gap2();
void copytobuf_gap16(), copyfrombuf_gap16(), zerobuf_gap16();
#endif
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
