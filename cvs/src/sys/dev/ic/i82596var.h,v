head	1.13;
access;
symbols
	OPENBSD_6_0:1.13.0.6
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.32
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.24
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.28
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.26
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.22
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.20
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.16
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.18
	OPENBSD_5_0:1.12.0.14
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.12
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.10
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.6
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.8
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.4
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.11.0.18
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.16
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.14
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.12
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.10
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.8
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.6
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.4
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.10.0.4
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.9
	UBC:1.5.0.4
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.2
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.09.18.09.54.08;	author miod;	state Exp;
branches;
next	1.12;
commitid	LqjITe5VmspY4HjZ;

1.12
date	2008.06.26.05.42.15;	author ray;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.21.18.58.49;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2002.12.19.01.24.03;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2002.10.13.14.21.49;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.23.06.11.50;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.03.16.04;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.26.54;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.23.21.54.45;	author fgsch;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2001.03.23.00.16.49;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.12.22.56.03;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	99.11.26.17.45.57;	author mickey;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	99.08.15.23.49.30;	author mickey;	state Exp;
branches;
next	;

1.2.2.1
date	2001.05.14.22.23.51;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2001.07.04.10.40.56;	author niklas;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2002.03.28.11.51.01;	author niklas;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	2003.03.28.00.38.13;	author niklas;	state Exp;
branches;
next	1.2.2.5;

1.2.2.5
date	2004.02.19.10.56.18;	author niklas;	state Exp;
branches;
next	;

1.5.4.1
date	2002.06.11.03.42.18;	author art;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2002.10.29.00.33.25;	author art;	state Exp;
branches;
next	1.5.4.3;

1.5.4.3
date	2003.05.19.21.54.24;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.13
log
@More ifmedia64 fallout.
@
text
@/*	$OpenBSD: i82596var.h,v 1.12 2008/06/26 05:42:15 ray Exp $	*/
/*	$NetBSD: i82586var.h,v 1.10 1998/08/15 04:42:42 mycroft Exp $	*/

/*-
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Paul Kranenburg and Charles M. Hannum.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*-
 * Copyright (c) 1992, 1993, University of Vermont and State
 *  Agricultural College.
 * Copyright (c) 1992, 1993, Garrett A. Wollman.
 *
 * Portions:
 * Copyright (c) 1994, 1995, Rafal K. Boni
 * Copyright (c) 1990, 1991, William F. Jolitz
 * Copyright (c) 1990, The Regents of the University of California
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of Vermont
 *	and State Agricultural College and Garrett A. Wollman, by William F.
 *	Jolitz, and by the University of California, Berkeley, Lawrence
 *	Berkeley Laboratory, and its contributors.
 * 4. Neither the names of the Universities nor the names of the authors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR AUTHORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Intel 82586/82596 Ethernet chip
 * Register, bit, and structure definitions.
 *
 * Original StarLAN driver written by Garrett Wollman with reference to the
 * Clarkson Packet Driver code for this chip written by Russ Nelson and others.
 *
 * BPF support code taken from hpdev/if_le.c, supplied with tcpdump.
 *
 * 3C507 support is loosely based on code donated to NetBSD by Rafal Boni.
 *
 * Majorly cleaned up and 3C507 code merged by Charles Hannum.
 *
 * Converted to SUN ie driver by Charles D. Cranor,
 *		October 1994, January 1995.
 * This sun version based on i386 version 1.30.
 */

/* #define I82596_DEBUG */

/* Debug elements */
#define	IED_RINT	0x01
#define	IED_TINT	0x02
#define	IED_RNR		0x04
#define	IED_CNA		0x08
#define	IED_READFRAME	0x10
#define IED_ENQ		0x20
#define IED_XMIT	0x40
#define IED_CMDS	0x80
#define	IED_ALL		0xff

#define B_PER_F		6		/* recv buffers per frame */
#define	IE_RBUF_SIZE	256		/* size of each receive buffer;
						MUST BE POWER OF TWO */
#define	NTXBUF		4		/* number of transmit commands */
#define	IE_TBUF_SIZE	ETHER_MAX_LEN	/* length of transmit buffer */

#define IE_MAXMCAST	(IE_TBUF_SIZE/6)/* must fit in transmit buffer */


#define	IE_INTR_ENRCV	1		/* receive pkt interrupt */
#define	IE_INTR_ENSND	2		/* send pkt interrupt */
#define	IE_INTR_LOOP	3		/* a loop for next one*/
#define	IE_INTR_EXIT	4		/* done w/ interrupts */

#define	IE_CHIP_PROBE	0		/* reset called from chip probe */
#define	IE_CARD_RESET	1		/* reset called from card reset */

#define	IE_PORT_RESET	0
#define	IE_PORT_TEST	1
#define	IE_PORT_SCP	2
#define	IE_PORT_DUMP	3

/*
 * Ethernet status, per interface.
 *
 * The chip uses two types of pointers: 16 bit and 24 bit
 *   24 bit pointers cover the board's memory.
 *   16 bit pointers are offsets from the ISCP's `ie_base'
 *
 * The board's memory is represented by the bus handle `bh'. The MI
 * i82586/596 driver deals exclusively with offsets relative to the
 * board memory bus handle. The `ie_softc' fields below that are marked
 * `MD' are in the domain of the front-end driver; they opaque to the
 * MI driver part.
 *
 * The front-end is required to manage the SCP and ISCP structures. i.e.
 * allocate room for them on the board's memory, and arrange to point the
 * chip at the SCB structure, the offset of which is passed to the MI
 * driver in `sc_scb'.
 *
 * The following functions provide the glue necessary to deal with
 * host and bus idiosyncracies:
 *
 *	hwreset		- board reset
 *	hwinit		- board initialization
 *	chan_attn	- get chip to look at prepared commands
 *	intrhook	- board dependent interrupt processing
 *
 *	All of the following shared-memory access function use an offset
 *	relative to the bus handle to indicate the shared memory location.
 *	The bus_{read/write}N function take or return offset into the
 *	shared memory in the host's byte-order.
 *
 *	memcopyin	- copy device memory: board to KVA
 *	memcopyout	- copy device memory: KVA to board
 *	bus_read16	- read a 16-bit i82586 pointer
			  `offset' argument will be 16-bit aligned
 *	bus_write16	- write a 16-bit i82586 pointer
			  `offset' argument will be 16-bit aligned
 *	bus_write24	- write a 24-bit i82586 pointer
			  `offset' argument will be 32-bit aligned
 *
 */

struct ie_softc {
	struct device sc_dev;   /* device structure */
	void *sc_ih;

	bus_space_tag_t	iot;	/* bus-space tag of card registers */
	bus_space_handle_t ioh;	/* bus-space handle of card registers */

	bus_space_tag_t	bt;	/* bus-space tag of card memory */
	bus_space_handle_t bh;	/* bus-space handle of card memory */

	const char *sc_type;	/* (MD) hardware type */
	int	sc_vers;	/* (MD) hardware version */
	int	sc_irq;		/* (MD) irq in md format */
	void	*sc_iobase;	/* (MD) KVA of base of 24 bit addr space */
	u_long	sc_maddr;	/* (MD) base of chip's RAM (16bit addr space) */
	u_int	sc_msize;	/* (MD) how much RAM we have/use */
	u_int	sc_flags;	/* (MI/MD) flags */
#define	IEMD_FLAG0	0x00010000
#define	IEMD_FLAG1	0x00020000
#define	IEMD_FLAG2	0x00040000
#define	IEMD_FLAG3	0x00080000
#define	IEMD_FLAG4	0x00100000
#define	IEMD_FLAG5	0x00200000
#define	IEMD_FLAG6	0x00400000
#define	IEMD_FLAG7	0x00800000
	struct	arpcom sc_arpcom;	/* system ethercom structure */
	struct	ifmedia sc_media;	/* supported media information */

	/* Bus glue */
	void	(*hwreset)(struct ie_softc *, int);
	void	(*hwinit)(struct ie_softc *);
	void	(*chan_attn)(struct ie_softc *);
	void	(*port)(struct ie_softc *, u_int);
	int	(*intrhook)(struct ie_softc *, int where);

	void	(*memcopyin)(struct ie_softc *, void *, int, size_t);
	void	(*memcopyout)(struct ie_softc *, const void *,
				   int, size_t);
	u_int16_t (*ie_bus_read16)(struct ie_softc *, int offset);
	void	(*ie_bus_write16)(struct ie_softc *, int offset,
					u_int16_t value);
	void	(*ie_bus_write24)(struct ie_softc *, int offset,
					int addr);

	/* Media management */
        int  (*sc_mediachange)(struct ie_softc *);
				/* card dependent media change */
        void (*sc_mediastatus)(struct ie_softc *, struct ifmediareq *);
				/* card dependent media status */


	/*
	 * Offsets (relative to bus handle) of the i82586 SYSTEM structures.
	 */
	int	scp;		/* Offset to the SCP (set by front-end) */
	int	iscp;		/* Offset to the ISCP (set by front-end) */
	int	scb;		/* Offset to SCB (set by front-end) */

	/*
	 * Offset and size of a block of board memory where the buffers
	 * are to be allocated from (initialized by front-end).
	 */
	int	buf_area;	/* Start of descriptors and buffers */
	int	buf_area_sz;	/* Size of above */

	/* SYSBUS byte */
	int	sysbus;

	/*
	 * The buffers & descriptors (recv and xmit)
	 */
	int	rframes;	/* Offset to `nrxbuf' frame descriptors */
	int	rbds;		/* Offset to `nrxbuf' buffer descriptors */
	int	rbufs;		/* Offset to `nrxbuf' receive buffers */
#define IE_RBUF_ADDR(sc, i)	(sc->rbufs + ((i) * IE_RBUF_SIZE))
        int	rfhead, rftail;
	int	rbhead, rbtail;
	int	nframes;	/* number of frames in use */
	int	nrxbuf;		/* number of recv buffs in use */
	int	rnr_expect;	/* XXX - expect a RCVR not ready interrupt */

	int	nop_cmds;	/* Offset to NTXBUF no-op commands */
	int	xmit_cmds;	/* Offset to NTXBUF transmit commands */
	int	xbds;		/* Offset to NTXBUF buffer descriptors */
	int	xbufs;		/* Offset to NTXBUF transmit buffers */
#define IE_XBUF_ADDR(sc, i)	(sc->xbufs + ((i) * IE_TBUF_SIZE))

	int	xchead, xctail;
	int	xmit_busy;
	int	do_xmitnopchain;	/* Controls use of xmit NOP chains */

	/* Multicast addresses */
	char	*mcast_addrs;		/* Current MC filter addresses */
	int	mcast_addrs_size;	/* Current size of MC buffer */
	int	mcast_count;		/* Current # of addrs in buffer */
	int	want_mcsetup;		/* run mcsetup at next opportunity */

	int	promisc;		/* are we in promisc mode? */
	int	async_cmd_inprogress;	/* we didn't wait for 586 to accept
					   a command */

#ifdef I82596_DEBUG
	int	sc_debug;
#endif
};

/* Exported functions */
int 	i82596_intr(void *);
int 	i82596_probe(struct ie_softc *);
int 	i82596_proberam(struct ie_softc *);
void 	i82596_attach(struct ie_softc *, const char *, u_int8_t *, 
	    uint64_t *, int, uint64_t);
int 	i82596_start_cmd(struct ie_softc *, int, int, int, int);

/*
 * Interrupt Acknowledge.
 */
static __inline__ void
ie_ack(struct ie_softc *sc, u_int mask) /* in native byte-order */
{
	u_int status;
	int off = IE_SCB_STATUS(sc->scb);

	bus_space_barrier(sc->bt, sc->bh, off, 2, BUS_SPACE_BARRIER_READ);
	status = (sc->ie_bus_read16)(sc, off);
	i82596_start_cmd(sc, status & mask, 0, 0, 0);
}

@


1.12
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: i82596var.h,v 1.11 2003/10/21 18:58:49 jmc Exp $	*/
d282 1
a282 1
	    int *, int, int);
@


1.11
log
@typos from Tom Cosgrove;

Tom: I did not commit a couple of your changes.

i did not include some punctuation fixes (full stops, etc.)
mnemorable -> mnemonic: i decided memorable was probably better
instrunctions -> instruction: i kept the plural
@
text
@d1 1
a1 1
/*	$OpenBSD: i82596var.h,v 1.10 2002/12/19 01:24:03 mickey Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.10
log
@proper barrier call in ie_ack
@
text
@d1 1
a1 1
/*	$OpenBSD: i82596var.h,v 1.9 2002/10/13 14:21:49 mickey Exp $	*/
d151 1
a151 1
 * chip at the SCB stucture, the offset of which is passed to the MI
d189 1
a189 1
	int	sc_vers;	/* (MD) hardvare version */
@


1.9
log
@do not flush cache here, better support for intrhook, increase number of transmit cmds and properly align the rings
@
text
@d1 1
a1 1
/*	$OpenBSD: i82596var.h,v 1.8 2002/09/23 06:11:50 mickey Exp $	*/
d298 2
a299 1
	register u_int status;
d301 2
a302 2
	bus_space_barrier(sc->bt, sc->bh, 0, 0, BUS_SPACE_BARRIER_READ);
	status = (sc->ie_bus_read16)(sc, IE_SCB_STATUS(sc->scb));
@


1.8
log
@make the leds blink (on those machines where we have 'em).
simple logic is to light up the led in the intrhook and dim in the
heartbeat always, makes a believable impression.
upper four bits represent a cpu usage w/in the last Hz/8
made up from the cp_time[] times.
@
text
@d1 1
a1 1
/*	$OpenBSD: i82596var.h,v 1.7 2002/03/14 03:16:04 millert Exp $	*/
d114 1
a114 1
#define B_PER_F		3		/* recv buffers per frame */
d117 1
a117 1
#define	NTXBUF		2		/* number of transmit commands */
@


1.7
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: i82596var.h,v 1.6 2002/03/14 01:26:54 millert Exp $	*/
d123 4
a126 3
#define	IE_INTR_ENTER	0		/* intr hook called on ISR entry */
#define	IE_INTR_EXIT	1		/* intr hook called on ISR exit */
#define	IE_INTR_LOOP	2		/* intr hook called on ISR loop */
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: i82596var.h,v 1.5 2001/06/23 21:54:45 fgsch Exp $	*/
d288 1
a288 1
			     int*, int, int);
@


1.5
log
@Remove repeated ethernet constants; use if_ether.h for it instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: i82596var.h,v 1.4 2001/03/23 00:16:49 mickey Exp $	*/
d206 14
a219 14
	void	(*hwreset) __P((struct ie_softc *, int));
	void	(*hwinit) __P((struct ie_softc *));
	void	(*chan_attn) __P((struct ie_softc *));
	void	(*port) __P((struct ie_softc *, u_int));
	int	(*intrhook) __P((struct ie_softc *, int where));

	void	(*memcopyin) __P((struct ie_softc *, void *, int, size_t));
	void	(*memcopyout) __P((struct ie_softc *, const void *,
				   int, size_t));
	u_int16_t (*ie_bus_read16) __P((struct ie_softc *, int offset));
	void	(*ie_bus_write16) __P((struct ie_softc *, int offset,
					u_int16_t value));
	void	(*ie_bus_write24) __P((struct ie_softc *, int offset,
					int addr));
d222 1
a222 1
        int  (*sc_mediachange) __P((struct ie_softc *));
d224 1
a224 1
        void (*sc_mediastatus) __P((struct ie_softc *, struct ifmediareq *));
d284 6
a289 6
int 	i82596_intr	__P((void *));
int 	i82596_probe	__P((struct ie_softc *));
int 	i82596_proberam	__P((struct ie_softc *));
void 	i82596_attach	__P((struct ie_softc *, const char *, u_int8_t *, 
			     int*, int, int));
int 	i82596_start_cmd __P((struct ie_softc *, int, int, int, int));
@


1.5.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: i82596var.h,v 1.5 2001/06/23 21:54:45 fgsch Exp $	*/
d206 14
a219 14
	void	(*hwreset)(struct ie_softc *, int);
	void	(*hwinit)(struct ie_softc *);
	void	(*chan_attn)(struct ie_softc *);
	void	(*port)(struct ie_softc *, u_int);
	int	(*intrhook)(struct ie_softc *, int where);

	void	(*memcopyin)(struct ie_softc *, void *, int, size_t);
	void	(*memcopyout)(struct ie_softc *, const void *,
				   int, size_t);
	u_int16_t (*ie_bus_read16)(struct ie_softc *, int offset);
	void	(*ie_bus_write16)(struct ie_softc *, int offset,
					u_int16_t value);
	void	(*ie_bus_write24)(struct ie_softc *, int offset,
					int addr);
d222 1
a222 1
        int  (*sc_mediachange)(struct ie_softc *);
d224 1
a224 1
        void (*sc_mediastatus)(struct ie_softc *, struct ifmediareq *);
d284 6
a289 6
int 	i82596_intr(void *);
int 	i82596_probe(struct ie_softc *);
int 	i82596_proberam(struct ie_softc *);
void 	i82596_attach(struct ie_softc *, const char *, u_int8_t *, 
	    int *, int, int);
int 	i82596_start_cmd(struct ie_softc *, int, int, int, int);
@


1.5.4.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: i82596var.h,v 1.5.4.1 2002/06/11 03:42:18 art Exp $	*/
d114 1
a114 1
#define B_PER_F		6		/* recv buffers per frame */
d117 1
a117 1
#define	NTXBUF		4		/* number of transmit commands */
d123 3
a125 4
#define	IE_INTR_ENRCV	1		/* receive pkt interrupt */
#define	IE_INTR_ENSND	2		/* send pkt interrupt */
#define	IE_INTR_LOOP	3		/* a loop for next one*/
#define	IE_INTR_EXIT	4		/* done w/ interrupts */
@


1.5.4.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d298 1
a298 2
	u_int status;
	int off = IE_SCB_STATUS(sc->scb);
d300 2
a301 2
	bus_space_barrier(sc->bt, sc->bh, off, 2, BUS_SPACE_BARRIER_READ);
	status = (sc->ie_bus_read16)(sc, off);
@


1.4
log
@cache alignment games
@
text
@d1 1
a1 1
/*	$OpenBSD: i82596var.h,v 1.3 2001/01/12 22:56:03 mickey Exp $	*/
a112 3

#define	ETHER_MIN_LEN	64
#define	ETHER_MAX_LEN	1518
@


1.3
log
@this is an ugly quick hack, but it works; theo helped (;
@
text
@d1 1
a1 1
/*	$OpenBSD: i82596var.h,v 1.2 1999/11/26 17:45:57 mickey Exp $	*/
d101 1
a101 1
/* #define I82596_DEBUG*/
@


1.2
log
@provide general "probing" routine, also used in isa cards memory sizing;
also utilize port commands (if provided by the md backend);
prefix macros w/ IE_;
build control structures here, providing sysbus byte in the softc.
@
text
@d1 1
a1 1
/*	$OpenBSD: i82596var.h,v 1.1 1999/08/15 23:49:30 mickey Exp $	*/
d101 1
a101 1
/* #define I82596_DEBUG */
@


1.2.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: i82596var.h,v 1.4 2001/03/23 00:16:49 mickey Exp $	*/
@


1.2.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: i82596var.h,v 1.2.2.1 2001/05/14 22:23:51 niklas Exp $	*/
d113 3
@


1.2.2.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d206 14
a219 14
	void	(*hwreset)(struct ie_softc *, int);
	void	(*hwinit)(struct ie_softc *);
	void	(*chan_attn)(struct ie_softc *);
	void	(*port)(struct ie_softc *, u_int);
	int	(*intrhook)(struct ie_softc *, int where);

	void	(*memcopyin)(struct ie_softc *, void *, int, size_t);
	void	(*memcopyout)(struct ie_softc *, const void *,
				   int, size_t);
	u_int16_t (*ie_bus_read16)(struct ie_softc *, int offset);
	void	(*ie_bus_write16)(struct ie_softc *, int offset,
					u_int16_t value);
	void	(*ie_bus_write24)(struct ie_softc *, int offset,
					int addr);
d222 1
a222 1
        int  (*sc_mediachange)(struct ie_softc *);
d224 1
a224 1
        void (*sc_mediastatus)(struct ie_softc *, struct ifmediareq *);
d284 6
a289 6
int 	i82596_intr(void *);
int 	i82596_probe(struct ie_softc *);
int 	i82596_proberam(struct ie_softc *);
void 	i82596_attach(struct ie_softc *, const char *, u_int8_t *, 
	    int *, int, int);
int 	i82596_start_cmd(struct ie_softc *, int, int, int, int);
@


1.2.2.4
log
@Sync the SMP branch with 3.3
@
text
@d114 1
a114 1
#define B_PER_F		6		/* recv buffers per frame */
d117 1
a117 1
#define	NTXBUF		4		/* number of transmit commands */
d123 3
a125 4
#define	IE_INTR_ENRCV	1		/* receive pkt interrupt */
#define	IE_INTR_ENSND	2		/* send pkt interrupt */
#define	IE_INTR_LOOP	3		/* a loop for next one*/
#define	IE_INTR_EXIT	4		/* done w/ interrupts */
d297 1
a297 2
	u_int status;
	int off = IE_SCB_STATUS(sc->scb);
d299 2
a300 2
	bus_space_barrier(sc->bt, sc->bh, off, 2, BUS_SPACE_BARRIER_READ);
	status = (sc->ie_bus_read16)(sc, off);
@


1.2.2.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d151 1
a151 1
 * chip at the SCB structure, the offset of which is passed to the MI
d189 1
a189 1
	int	sc_vers;	/* (MD) hardware version */
@


1.1
log
@i82586/96 MI stuff currently in 586 mode, tested on hppa; from netbsd i82586
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d101 1
a101 1
#undef I82596_DEBUG
d126 11
a136 6
#define INTR_ENTER	0		/* intr hook called on ISR entry */
#define INTR_EXIT	1		/* intr hook called on ISR exit */
#define INTR_LOOP	2		/* intr hook called on ISR loop */

#define CHIP_PROBE	0		/* reset called from chip probe */
#define CARD_RESET	1		/* reset called from card reset */
a195 1
	void	*sc_reg;	/* (MD) KVA of car's register (also iot/ioh) */
d212 1
d244 3
@

