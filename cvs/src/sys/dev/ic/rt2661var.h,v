head	1.18;
access;
symbols
	OPENBSD_6_1:1.18.0.12
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.14
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.8
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.10
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.6
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.17.0.4
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.16.0.2
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.6
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.14
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.10
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.8
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.6
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4;
locks; strict;
comment	@ * @;


1.18
date	2013.12.06.21.03.03;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2012.08.23.10.34.25;	author stsp;	state Exp;
branches;
next	1.16;

1.16
date	2012.07.17.14.43.12;	author stsp;	state Exp;
branches;
next	1.15;

1.15
date	2012.07.13.10.08.15;	author stsp;	state Exp;
branches;
next	1.14;

1.14
date	2011.03.18.06.05.21;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2010.09.07.16.21.42;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2010.08.27.16.06.25;	author kettenis;	state Exp;
branches;
next	1.11;

1.11
date	2010.08.04.19.48.33;	author damien;	state Exp;
branches;
next	1.10;

1.10
date	2009.08.10.17.47.23;	author damien;	state Exp;
branches;
next	1.9;

1.9
date	2006.10.22.12.14.44;	author damien;	state Exp;
branches;
next	1.8;

1.8
date	2006.08.03.09.28.13;	author damien;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.18.18.44.04;	author damien;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.08.19.58.44;	author damien;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.01.16.24.22;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.25.12.56.47;	author damien;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.14.12.43.27;	author damien;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.10.21.20.46;	author damien;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.09.20.03.34;	author damien;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Add a DVACT_WAKEUP op to the *_activate() API.  This is called after the
kernel resumes normal (non-cold, able to run processes, etc) operation.
Previously we were relying on specific DVACT_RESUME op's in drivers
creating callback/threads themselves, but that has become too common,
indicating the need for a built-in mechanism.
ok dlg kettenis, tested by a sufficient amount of people
@
text
@/*	$OpenBSD: rt2661var.h,v 1.17 2012/08/23 10:34:25 stsp Exp $	*/

/*-
 * Copyright (c) 2006
 *	Damien Bergamini <damien.bergamini@@free.fr>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

struct rt2661_rx_radiotap_header {
	struct ieee80211_radiotap_header wr_ihdr;
	uint64_t	wr_tsf;
	uint8_t		wr_flags;
	uint8_t		wr_rate;
	uint16_t	wr_chan_freq;
	uint16_t	wr_chan_flags;
	uint8_t		wr_antsignal;
} __packed;

#define RT2661_RX_RADIOTAP_PRESENT					\
	((1 << IEEE80211_RADIOTAP_TSFT) |				\
	 (1 << IEEE80211_RADIOTAP_FLAGS) |				\
	 (1 << IEEE80211_RADIOTAP_RATE) |				\
	 (1 << IEEE80211_RADIOTAP_CHANNEL) |				\
	 (1 << IEEE80211_RADIOTAP_DB_ANTSIGNAL))

struct rt2661_tx_radiotap_header {
	struct ieee80211_radiotap_header wt_ihdr;
	uint8_t		wt_flags;
	uint8_t		wt_rate;
	uint16_t	wt_chan_freq;
	uint16_t	wt_chan_flags;
} __packed;

#define RT2661_TX_RADIOTAP_PRESENT					\
	((1 << IEEE80211_RADIOTAP_FLAGS) |				\
	 (1 << IEEE80211_RADIOTAP_RATE) |				\
	 (1 << IEEE80211_RADIOTAP_CHANNEL))

struct rt2661_tx_data {
	bus_dmamap_t			map;
	struct mbuf			*m;
	struct ieee80211_node		*ni;
};

struct rt2661_tx_ring {
	bus_dmamap_t		map;
	bus_dma_segment_t	seg;
	bus_addr_t		physaddr;
	struct rt2661_tx_desc	*desc;
	struct rt2661_tx_data	*data;
	int			count;
	int			queued;
	int			cur;
	int			next;
	int			stat;
};

struct rt2661_rx_data {
	bus_dmamap_t	map;
	struct mbuf	*m;
};

struct rt2661_rx_ring {
	bus_dmamap_t		map;
	bus_dma_segment_t	seg;
	bus_addr_t		physaddr;
	struct rt2661_rx_desc	*desc;
	struct rt2661_rx_data	*data;
	int			count;
	int			cur;
	int			next;
};

#define RT2661_AMRR_NODES_MAX 	100 /* based on IEEE80211_CACHE_SIZE */
#define RT2661_AMRR_INVALID_ID	(RT2661_AMRR_NODES_MAX + 1)

struct rt2661_amrr_node {
	struct ieee80211_amrr_node	amn;
	struct rt2661_node		*rn;
	u_int8_t			id;
	TAILQ_ENTRY(rt2661_amrr_node)	entry;
};

struct rt2661_node {
	struct ieee80211_node		ni;
	struct rt2661_amrr_node		*amn;
};

struct rt2661_softc {
	struct device			sc_dev;

	struct ieee80211com		sc_ic;
	int				(*sc_newstate)(struct ieee80211com *,
					    enum ieee80211_state, int);
	struct ieee80211_amrr		amrr;

	int				(*sc_enable)(struct rt2661_softc *);
	void				(*sc_disable)(struct rt2661_softc *);

	bus_dma_tag_t			sc_dmat;
	bus_space_tag_t			sc_st;
	bus_space_handle_t		sc_sh;

	struct timeout			scan_to;
	struct timeout			amrr_to;

	int				sc_id;
	int				sc_flags;
#define RT2661_ENABLED		(1 << 0)
#define RT2661_UPDATE_SLOT	(1 << 1)
#define RT2661_SET_SLOTTIME	(1 << 2)
#define RT2661_FWLOADED		(1 << 3)
#define RT2661_MGT_OACTIVE	(1 << 4)
#define RT2661_DATA_OACTIVE	(1 << 5)

	int				sc_tx_timer;

	struct ieee80211_channel	*sc_curchan;

	u_char				*ucode;
	size_t				ucsize;

	uint8_t				rf_rev;

	uint8_t				rfprog;
	uint8_t				rffreq;

	struct rt2661_tx_ring		txq[5];
	struct rt2661_tx_ring		mgtq;
	struct rt2661_rx_ring		rxq;

	uint32_t			rf_regs[4];
	int8_t				txpow[38];

	struct {
		uint8_t	reg;
		uint8_t	val;
	}				bbp_prom[16];

	int				hw_radio;
	int				rx_ant;
	int				tx_ant;
	int				nb_ant;
	int				ext_2ghz_lna;
	int				ext_5ghz_lna;
	int				rssi_2ghz_corr;
	int				rssi_5ghz_corr;

	int				ncalls;
	int				avg_rssi;
	int				sifs;

	uint32_t			erp_csr;

	uint8_t				bbp18;
	uint8_t				bbp21;
	uint8_t				bbp22;
	uint8_t				bbp16;
	uint8_t				bbp17;
	uint8_t				bbp64;

#if NBPFILTER > 0
	caddr_t				sc_drvbpf;

	union {
		struct rt2661_rx_radiotap_header th;
		uint8_t	pad[64];
	}				sc_rxtapu;
#define sc_rxtap			sc_rxtapu.th
	int				sc_rxtap_len;

	union {
		struct rt2661_tx_radiotap_header th;
		uint8_t	pad[64];
	}				sc_txtapu;
#define sc_txtap			sc_txtapu.th
	int				sc_txtap_len;
#endif
	void				(*sc_node_free)(struct ieee80211com *,
					    struct ieee80211_node *);
	TAILQ_HEAD(, rt2661_amrr_node)	amn;
	u_int8_t			amn_count;
};

int	rt2661_attach(void *, int);
int	rt2661_detach(void *);
void	rt2661_suspend(void *);
void	rt2661_wakeup(void *);
int	rt2661_intr(void *);
@


1.17
log
@Fix a race in rt2661 Tx interrupt processing which can cause Tx processing
to get stuck with OACTIVE set, requiring 'ifconfig ral0 down up' to unwedge.

Make space in the Tx queue from the rt2661_tx_dma_intr() handler,
rather than waiting until rt2661_tx_intr() is run. The latter function
now collects AMRR statistics only. AMRR node allocation is now separated
from ieee80211_node allocation to make this possible.

This commit also brings back the separation of OACTIVE flags for management
and data Tx queues which I reverted in the previous commit.

Inspired by ral commits by sephe@@dragonflybsd and patch submission to
misc@@ by Roland Dreier http://marc.info/?l=openbsd-misc&m=125895269930106&w=2

Tested by myself, edd, jsg, Tobias Ulmer, Pieter Verberne, Tim van der Molen.
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2661var.h,v 1.16 2012/07/17 14:43:12 stsp Exp $	*/
d199 1
a199 1
void	rt2661_resume(void *);
@


1.16
log
@Revert my previous change for rt2661. It is causing excessive "ral0: device
timeout" messages on my soekris and doesn't fix the real problem.
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2661var.h,v 1.14 2011/03/18 06:05:21 deraadt Exp $	*/
d85 10
d97 1
a97 1
	struct ieee80211_amrr_node	amn;
d124 2
d190 4
@


1.15
log
@Keep separate OACTIVE flags to mark full management/data tx queues,
and set the interface's IFF_OACTIVE flag if either queue is full and
clear it only if both queues have free slots. Before this change both
queues were setting/clearing the same flag with no regard for the
other queue's state.

Also, don't reset the tx watchdog counter if either queue still has frames
queued when we exit the frame-processing loop in the per-queue interrupt
handlers.

Both changes originally from sephe@@dragonfly.

Tested by myself and edd on a slow busy soekris which before this
change required occasional 'ifconfig ral0 down up' to recover.
@
text
@a113 2
#define RT2661_MGT_OACTIVE	(1 << 4)
#define RT2661_DATA_OACTIVE	(1 << 5)
@


1.14
log
@Fix firmware loading at startup (and resume); from Tim van der Molen
based on discussion with damien; tested by others on the lists
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2661var.h,v 1.13 2010/09/07 16:21:42 deraadt Exp $	*/
d114 2
@


1.13
log
@remove the powerhook code.  All architectures now use the ca_activate tree
traversal code to suspend/resume
ok oga kettenis blambert
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2661var.h,v 1.12 2010/08/27 16:06:25 kettenis Exp $	*/
d113 1
@


1.12
log
@Stop calling xxx_power() from xxx_resume(); instead do it the other way around.
Get rid of the sc_power() callback, which isn't used anymore.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2661var.h,v 1.11 2010/08/04 19:48:33 damien Exp $	*/
a176 1
	void				*sc_powerhook;
@


1.11
log
@add suspend/resume support for PCI ral(4) devices.

ok deraadt@@, sthen@@

tested by matthew@@ (RT2560), dcoppa@@ (RT2790), okan@@ (RT2860), todd@@ (RT2560)
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2661var.h,v 1.10 2009/08/10 17:47:23 damien Exp $	*/
a99 1
	void				(*sc_power)(struct rt2661_softc *, int);
@


1.10
log
@three more shutdown hooks bite the dust.
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2661var.h,v 1.9 2006/10/22 12:14:44 damien Exp $	*/
d112 2
a113 3
#define RT2661_FWLOADED		(1 << 1)
#define RT2661_UPDATE_SLOT	(1 << 2)
#define RT2661_SET_SLOTTIME	(1 << 3)
d119 3
d183 2
@


1.9
log
@replace rssadapt(9) with amrr for automatic rate control.
as a side-effect, this should fix all the "bogus xmit rate" panics
users have been complaining about for some time when operating in
HostAP mode.
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2661var.h,v 1.8 2006/08/03 09:28:13 damien Exp $	*/
a175 1
	void				*sc_sdhook;
a181 1
void	rt2661_shutdown(void *);
@


1.8
log
@802.11a uses a 16 microseconds short interframe space.
With this change, I now have a working 802.11a ral-based AP.
Fix rt2661_set_macaddr() so that we don't override the "unicast to me"
flag in RT2661_MAC_CSR3 when setting the MAC address.

Thanks to wim@@ for donating a RT2561 a/b/g adapter.
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2661var.h,v 1.7 2006/06/18 18:44:04 damien Exp $	*/
a53 1
	struct ieee80211_rssdesc	id;
d87 1
a87 1
	struct ieee80211_rssadapt	rssadapt;
d96 1
d106 2
a107 2
	struct timeout			scan_ch;
	struct timeout			rssadapt_ch;
@


1.7
log
@- implement new ic_updateslot() callback.
- in hostap mode, we defer update of the slot time until all associated
  STAs are notified with updated beacons.
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2661var.h,v 1.6 2006/06/08 19:58:44 damien Exp $	*/
d148 1
d160 1
a160 1
	caddr_t			sc_drvbpf;
d165 3
a167 3
	}			sc_rxtapu;
#define sc_rxtap		sc_rxtapu.th
	int			sc_rxtap_len;
d172 3
a174 3
	}			sc_txtapu;
#define sc_txtap		sc_txtapu.th
	int			sc_txtap_len;
d176 2
a177 2
	void			*sc_sdhook;	/* shutdown hook */
	void			*sc_powerhook;	/* power management hook */
@


1.6
log
@Keep track of the average RSSI using an Exponential Moving Average (EMA).
Use it to dynamically tune radio receive sensitivity.

The idea is simple:
- increase sensitivity when the RSSI is bad to optimize throughput on
  long distance to the AP, and
- decrease sensitivity when the RSSI is good to reduce noise level and
  optimize throughput on short distance to the AP

The EMA allows to smooth RSSI variations so we don't end up changing the
sensitivity too frequently.  We check if it would be worth updating the
sensitivity every one second.
RSSI thresholds were taken from the Ralink Tech. Linux driver.


Also, clean a few things while I'm here:
- account for FCS when determining if RTS protection must be used
- fix check for whether WEP encryption is needed or not
- encrypt mgmt frames if we need to (shared authmode)
- cosmetic tweaks
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2661var.h,v 1.5 2006/06/01 16:24:22 robert Exp $	*/
d111 4
a114 2
#define RT2661_ENABLED	(1 << 0)
#define RT2661_FWLOADED	(1 << 1)
d148 2
@


1.5
log
@Add powerhooks for ral(4) cards with RT2561 chipset, and also fix
builds with RAL_DEBUG, so we have debug information now.

ok damien@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2661var.h,v 1.4 2006/02/25 12:56:47 damien Exp $	*/
d143 3
@


1.4
log
@load the firmware only when necessary (first call to rt2661_init or if the
cardbus socket has been powered off). restore the call to rt2661_init() in
the watchdog since the firmware is not reloaded in this case.
fixes "timeout waiting for BBP" errors seen on some PCI adapters.
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2661var.h,v 1.3 2006/01/14 12:43:27 damien Exp $	*/
d168 2
d175 1
@


1.3
log
@- give rate to rx radiotap
- read TSF high 32bit word before low 32bit word to avoid wraparounds
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2661var.h,v 1.2 2006/01/10 21:20:46 damien Exp $	*/
d112 1
@


1.2
log
@- use rssadapt(9) as rate control algorithm
- add 802.11 radiotap support
- read 802.11a channels tx power from EEPROM
- read vendor-specific BBP settings from EEPROM
- fix setting of beacons (xflags)
- fix DMA sync in rt2661_rx_intr
- indicate whether RF supports MIMO in dmesg
- add short slot time support
- many cleanups while i'm here
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2661var.h,v 1.1 2006/01/09 20:03:34 damien Exp $	*/
d24 1
d33 1
@


1.1
log
@- add preliminary support for Ralink Technology RT2561, RT2561S and RT2661
  chipsets in ral(4).
- restructure the code a bit; split ic/ral.c into ic/rt2560.c and ic/rt2661.c
- import the 8051 microcode files required by these chipsets.
- more to come;  there is currently no automatic rate control and some
  features are untested (hostap and ibss modes for instance).  most of
  the pre-802.11n capabilities of the RT2661 chipset are not supported
  (like frame aggregation, piggy-back).  MIMO should work though the
  performance/range gain has not been measured.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d20 28
d49 4
a52 3
	bus_dmamap_t		map;
	struct mbuf		*m;
	struct ieee80211_node	*ni;
d84 5
d105 1
d125 1
a125 1
	uint8_t				txpow[14];
a131 1
	int				led_mode;
d147 18
@

