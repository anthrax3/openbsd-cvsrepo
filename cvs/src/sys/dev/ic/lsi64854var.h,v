head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.40
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.38
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.36
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.30
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.32
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.24
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.28
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.26
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.22
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.20
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.16
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.18
	OPENBSD_5_0:1.7.0.14
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.12
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.10
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.6
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.8
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.4
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.6
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.4
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.5.0.8
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.4
	UBC:1.2.0.6
	UBC_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2008.06.26.05.42.15;	author ray;	state Exp;
branches;
next	1.6;

1.6
date	2007.02.28.18.48.35;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.03.01.41.44;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.14.21.34.59;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.54;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.25.14.58.32;	author jason;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2001.08.19.17.11.21;	author jason;	state Exp;
branches;
next	;

1.2.4.1
date	2001.10.31.03.22.42;	author nate;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.28.11.51.01;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2003.03.28.00.38.14;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2002.06.11.03.42.19;	author art;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2002.10.29.00.33.25;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@/*	$OpenBSD: lsi64854var.h,v 1.6 2007/02/28 18:48:35 miod Exp $	*/
/*	$NetBSD: lsi64854var.h,v 1.4 2001/03/29 02:58:39 petrov Exp $ */

/*-
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Paul Kranenburg.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

struct lsi64854_softc {
	struct device		sc_dev;		/* base device */
	bus_space_tag_t		sc_bustag;	/* bus tags */
	bus_dma_tag_t		sc_dmatag;

	bus_space_handle_t	sc_regs;	/* the registers */
	u_int			sc_rev;		/* revision */
	int			sc_burst;	/* max supported burst size */

	int			sc_channel;
#define L64854_CHANNEL_SCSI	1
#define L64854_CHANNEL_ENET	2
#define L64854_CHANNEL_PP	3
	void			*sc_client;

	int			sc_active;	/* DMA active ? */
	bus_dmamap_t		sc_dmamap;	/* DMA map for bus_dma_* */
	caddr_t			sc_dvmaaddr;	/* DVMA cookie */
	size_t			sc_dmasize;
	caddr_t			*sc_dmaaddr;
	size_t			*sc_dmalen;

	void	(*reset)(struct lsi64854_softc *);/* reset routine */
	int	(*setup)(struct lsi64854_softc *, caddr_t *, size_t *,
			      int, size_t *);	/* dma setup */
	int	(*intr)(void *);		/* interrupt handler */

	int	(*sc_intrchain)(void *);	/* next handler in intr chain */
	void	*sc_intrchainarg;		/* arg for next intr handler */

	u_int 			sc_dmactl;
};

#define L64854_GCSR(sc)	\
	(bus_space_read_4((sc)->sc_bustag, (sc)->sc_regs, L64854_REG_CSR))

#define L64854_SCSR(sc, csr)	\
	bus_space_write_4((sc)->sc_bustag, (sc)->sc_regs, L64854_REG_CSR, csr)


/*
 * DMA engine interface functions.
 */
#define DMA_RESET(sc)			(((sc)->reset)(sc))
#define DMA_INTR(sc)			(((sc)->intr)(sc))
#define DMA_SETUP(sc, a, l, d, s)	(((sc)->setup)(sc, a, l, d, s))

#define DMA_ISACTIVE(sc)		((sc)->sc_active)

#define DMA_ENINTR(sc) do {			\
	u_int32_t csr = L64854_GCSR(sc);	\
	csr |= L64854_INT_EN;			\
	L64854_SCSR(sc, csr);			\
} while (0)

#define DMA_ISINTR(sc)	(L64854_GCSR(sc) & (D_INT_PEND|D_ERR_PEND))

#define DMA_GO(sc) do {				\
	u_int32_t csr = L64854_GCSR(sc);	\
	csr |= D_EN_DMA;			\
	L64854_SCSR(sc, csr);			\
	sc->sc_active = 1;			\
} while (0)


int	lsi64854_attach(struct lsi64854_softc *);
int	lsi64854_enet_intr(void *);
@


1.6
log
@SBus parallel port driver, from NetBSD but untested (no printer or cables);
this should hopefully stop people from asking me about it (-:
@
text
@d1 1
a1 1
/*	$OpenBSD: lsi64854var.h,v 1.5 2005/03/03 01:41:44 miod Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.5
log
@Do not let dma attach children if it could not initialize properly.
@
text
@d1 1
a1 1
/*	$OpenBSD: lsi64854var.h,v 1.4 2002/06/14 21:34:59 todd Exp $	*/
a105 1
int	lsi64854_scsi_intr(void *);
a106 1
int	lsi64854_pp_intr(void *);
@


1.4
log
@spelling; from Brian Poole <raj@@cerias.purdue.edu>
@
text
@d1 1
a1 1
/*	$OpenBSD: lsi64854var.h,v 1.3 2002/03/14 01:26:54 millert Exp $	*/
d105 1
a105 1
void	lsi64854_attach(struct lsi64854_softc *);
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: lsi64854var.h,v 1.2 2001/08/25 14:58:32 jason Exp $	*/
d47 1
a47 1
	int			sc_burst;	/* max suported burst size */
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d62 4
a65 4
	void	(*reset) __P((struct lsi64854_softc *));/* reset routine */
	int	(*setup) __P((struct lsi64854_softc *, caddr_t *, size_t *,
			      int, size_t *));	/* dma setup */
	int	(*intr) __P((void *));		/* interrupt handler */
d67 1
a67 1
	int	(*sc_intrchain) __P((void *));	/* next handler in intr chain */
d105 4
a108 4
void	lsi64854_attach	__P((struct lsi64854_softc *));
int	lsi64854_scsi_intr	__P((void *));
int	lsi64854_enet_intr	__P((void *));
int	lsi64854_pp_intr	__P((void *));
@


1.2.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lsi64854var.h,v 1.2 2001/08/25 14:58:32 jason Exp $	*/
d62 4
a65 4
	void	(*reset)(struct lsi64854_softc *);/* reset routine */
	int	(*setup)(struct lsi64854_softc *, caddr_t *, size_t *,
			      int, size_t *);	/* dma setup */
	int	(*intr)(void *);		/* interrupt handler */
d67 1
a67 1
	int	(*sc_intrchain)(void *);	/* next handler in intr chain */
d105 4
a108 4
void	lsi64854_attach(struct lsi64854_softc *);
int	lsi64854_scsi_intr(void *);
int	lsi64854_enet_intr(void *);
int	lsi64854_pp_intr(void *);
@


1.2.6.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lsi64854var.h,v 1.2.6.1 2002/06/11 03:42:19 art Exp $	*/
d47 1
a47 1
	int			sc_burst;	/* max supported burst size */
@


1.2.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.2.4.2
log
@Merge in -current from about a week ago
@
text
@d62 4
a65 4
	void	(*reset)(struct lsi64854_softc *);/* reset routine */
	int	(*setup)(struct lsi64854_softc *, caddr_t *, size_t *,
			      int, size_t *);	/* dma setup */
	int	(*intr)(void *);		/* interrupt handler */
d67 1
a67 1
	int	(*sc_intrchain)(void *);	/* next handler in intr chain */
d105 4
a108 4
void	lsi64854_attach(struct lsi64854_softc *);
int	lsi64854_scsi_intr(void *);
int	lsi64854_enet_intr(void *);
int	lsi64854_pp_intr(void *);
@


1.2.4.3
log
@Sync the SMP branch with 3.3
@
text
@d47 1
a47 1
	int			sc_burst;	/* max supported burst size */
@


1.1
log
@generic driver for LSI dma controller from NetBSD
@
text
@d1 1
@

