head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.12
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.10
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.8
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.5.0.50
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.46
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.48
	OPENBSD_5_0:1.5.0.44
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.42
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.40
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.36
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.38
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.34
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.32
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.30
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.28
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.26
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.24
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.22
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.20
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.18
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.16
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.14
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.12
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.10
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.8
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.4
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.14
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.05.05.16.27.20;	author shadchin;	state Exp;
branches;
next	1.8;
commitid	OGpZ6NPD7IKNt4a2;

1.8
date	2013.12.25.21.01.01;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2013.05.23.18.29.51;	author tobias;	state Exp;
branches;
next	1.6;

1.6
date	2013.04.20.08.01.37;	author tobias;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.18.15.30.39;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.04.09.03.01;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.13.15.53.33;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	96.10.31.01.01.31;	author niklas;	state Exp;
branches
	1.2.14.1;
next	1.1;

1.1
date	95.10.18.08.52.31;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.31;	author deraadt;	state Exp;
branches;
next	;

1.2.14.1
date	2001.05.14.22.23.49;	author niklas;	state Exp;
branches;
next	1.2.14.2;

1.2.14.2
date	2001.10.31.03.22.42;	author nate;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Less magic number

For PS/2 - status byte - bit 5:
The bit is '1' if the data on input port 60h came from the AUX port, or '0' if
the data came from the keyboard or from the keyboard controller itself.

KBS_TERR (kbd transmission error) was valid for AT-mode, but not for PS/2-mode.

ok ratchov@@, miod@@
@
text
@/*	$OpenBSD: i8042reg.h,v 1.8 2013/12/25 21:01:01 miod Exp $	*/
/*	$NetBSD: i8042reg.h,v 1.7 1998/01/18 14:41:37 drochner Exp $	*/

#define	KBSTATP		4	/* kbd controller status port (I) */
#define	 KBS_DIB	0x01	/* kbd data in buffer */
#define	 KBS_IBF	0x02	/* kbd input buffer low */
#define	 KBS_WARM	0x04	/* kbd input buffer low */
#define	 KBS_OCMD	0x08	/* kbd output buffer has command */
#define	 KBS_NOSEC	0x10	/* kbd security lock not engaged */
#define	 KBS_AUXDATA	0x20	/* kbd data in buffer from aux port */
#define	 KBS_RERR	0x40	/* kbd receive error */
#define	 KBS_PERR	0x80	/* kbd parity error */

#define	KBCMDP		4	/* kbd controller port (O) */
#define	 KBC_RAMREAD	0x20	/* read from RAM */
#define	 KBC_RAMWRITE	0x60	/* write to RAM */
#define	 KBC_AUXDISABLE	0xa7	/* disable auxiliary port */
#define	 KBC_AUXENABLE	0xa8	/* enable auxiliary port */
#define	 KBC_AUXTEST	0xa9	/* test auxiliary port */
#define	 KBC_CMDWOUT	0xd1	/* write output port */
#define	 KBC_KBDECHO	0xd2	/* echo to keyboard port */
#define	 KBC_AUXECHO	0xd3	/* echo to auxiliary port */
#define	 KBC_AUXWRITE	0xd4	/* write to auxiliary port */
#define	 KBC_SELFTEST	0xaa	/* start self-test */
#define	 KBC_KBDTEST	0xab	/* test keyboard port */
#define	 KBC_KBDDISABLE	0xad	/* disable keyboard port */
#define	 KBC_KBDENABLE	0xae	/* enable keyboard port */
#define	 KBC_READID	0xf2	/* read device id */
#define	 KBC_PULSE0	0xfe	/* pulse output bit 0 */
#define	 KBC_PULSE1	0xfd	/* pulse output bit 1 */
#define	 KBC_PULSE2	0xfb	/* pulse output bit 2 */
#define	 KBC_PULSE3	0xf7	/* pulse output bit 3 */

#define	KBDATAP		0	/* kbd data port (I) */
#define	KBOUTP		0	/* kbd data port (O) */

#define	K_RDCMDBYTE	0x20
#define	K_LDCMDBYTE	0x60

#define	KC8_TRANS	0x40	/* convert to old scan codes */
#define	KC8_MDISABLE	0x20	/* disable mouse */
#define	KC8_KDISABLE	0x10	/* disable keyboard */
#define	KC8_IGNSEC	0x08	/* ignore security lock */
#define	KC8_CPU		0x04	/* exit from protected mode reset */
#define	KC8_MENABLE	0x02	/* enable mouse interrupt */
#define	KC8_KENABLE	0x01	/* enable keyboard interrupt */
#define	CMDBYTE		(KC8_TRANS|KC8_CPU|KC8_MENABLE|KC8_KENABLE)

#define	KCID_KBD1	0xAB
#define	KCID_KBD2	0x83
#define	KCID_MOUSE	0x00
@


1.8
log
@Instead of deciding which iockbc port is the keyboard port, and which one is the
mouse port, depending upon the system time, match what the prom is doing and
actually probe for a keyboard on both ports, and decide the first port with a
keyboard is the keyboard port.

If no keyboard is found, but a mouse is found, decide the keyboard port is the
empty one.

If no device is found, then we can try and pick the defaults, depending upon
the system we are running on, as this used to be the case (i.e. coping with
Fuel having keyboard on port 1 and mouse on port 0 when connecting devices
according to the chassis' markings).

This is necessary because different IO9 board revisions on Tezro come with
different wirings, and we can not tell these boards apart.

Discussed with "nullnilaki" (nullnilaki on gmail) who is the lucky owner of an
Onyx 350 with correct wiring and a Tezro with inverted wiring. Tested on Octane
and Fuel with all combinations of devices connected (mouse only, keyboard only,
keyboard and mouse) in both ports, glass and serial console.

XXX We probably want to allow for more pckbd attachment flexibility on non-x86
XXX platforms eventually (at least where the PS/2 slots are really independent,
XXX so that we can attach pckbd to any port and better cope with human error
XXX when connecting devices.
@
text
@d1 1
a1 1
/*	$OpenBSD: i8042reg.h,v 1.7 2013/05/23 18:29:51 tobias Exp $	*/
d10 1
a10 1
#define	 KBS_TERR	0x20	/* kbd transmission error */
@


1.7
log
@Revert Active PS/2 support for now, until we find a solution suitable
for chipsets which stopped working.

ok mpi
@
text
@d1 1
a1 1
/*	$OpenBSD: i8042reg.h,v 1.5 2001/08/18 15:30:39 mickey Exp $	*/
d28 1
d48 4
@


1.6
log
@Enable active PS/2 multiplexing if available.
Supported for i386 and amd64 except SMALL_KERNEL.

Based on Miod's former work on this subject.

ok mpi
@
text
@a46 14

/*
 * Defines for Active PS/2 Multiplexing
 */

#define	KBC_APM_ENB1	0xf0
#define	KBC_APM_ENB2	0x56
#define	KBC_APM_ENB3	0xa4

#define	KBC_APM_DIS1	0xf0
#define	KBC_APM_DIS2	0x56
#define	KBC_APM_DIS3	0xa5

#define	KBC_APM_PREFIX(p)	(0x90 | (p))
@


1.5
log
@write output port
@
text
@d1 1
a1 1
/*	$OpenBSD: i8042reg.h,v 1.4 2001/07/04 09:03:01 niklas Exp $	*/
d47 14
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: i8042reg.h,v 1.7 1998/01/18 14:41:37 drochner Exp $	*/
d20 1
@


1.3
log
@Address the i8042 keyboard controller registers as offsets from IO_KBD; from
NetBSD. This will ease the pain when we bring in the pckbc MI keyboard
driver to be used for wscons/i386 and wscons/alpha.
@
text
@d1 1
@


1.2
log
@$OpenBSD RCSIDs
@
text
@d1 1
a1 2
/*	$OpenBSD: i8042reg.h,v 1.6 1995/04/21 09:16:16 mycroft Exp $	*/
/*	$NetBSD: i8042reg.h,v 1.6 1995/04/21 09:16:16 mycroft Exp $	*/
d3 1
a3 1
#define	KBSTATP		0x64	/* kbd controller status port (I) */
d13 1
a13 1
#define	KBCMDP		0x64	/* kbd controller port (O) */
d31 2
a32 2
#define	KBDATAP		0x60	/* kbd data port (I) */
#define	KBOUTP		0x60	/* kbd data port (O) */
@


1.2.14.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 1
/*	$NetBSD: i8042reg.h,v 1.7 1998/01/18 14:41:37 drochner Exp $	*/
d4 1
a4 1
#define	KBSTATP		4	/* kbd controller status port (I) */
d14 1
a14 1
#define	KBCMDP		4	/* kbd controller port (O) */
d32 2
a33 2
#define	KBDATAP		0	/* kbd data port (I) */
#define	KBOUTP		0	/* kbd data port (O) */
@


1.2.14.2
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 1
/*	$OpenBSD$	*/
a18 1
#define	 KBC_CMDWOUT	0xd1	/* write output port */
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
