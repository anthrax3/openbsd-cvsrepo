head	1.24;
access;
symbols
	OPENBSD_6_1:1.24.0.4
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.23.0.4
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.21.0.8
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.10
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.6
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.20.0.12
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.10
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.6
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.8
	OPENBSD_5_0:1.20.0.4
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.2
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.18.0.2
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6;
locks; strict;
comment	@ * @;


1.24
date	2016.08.17.11.50.52;	author stsp;	state Exp;
branches;
next	1.23;
commitid	HEQW3uHEkL9CrHHt;

1.23
date	2016.03.21.21.16.30;	author stsp;	state Exp;
branches;
next	1.22;
commitid	SFvz494jge4qMbr0;

1.22
date	2016.03.21.21.16.01;	author stsp;	state Exp;
branches;
next	1.21;
commitid	XBQSRFlZr25PQ4cY;

1.21
date	2013.12.06.21.03.03;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2010.09.07.16.21.42;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2010.08.27.16.06.25;	author kettenis;	state Exp;
branches;
next	1.18;

1.18
date	2010.08.04.19.48.33;	author damien;	state Exp;
branches;
next	1.17;

1.17
date	2010.07.19.19.47.52;	author damien;	state Exp;
branches;
next	1.16;

1.16
date	2010.04.06.16.41.54;	author damien;	state Exp;
branches;
next	1.15;

1.15
date	2010.04.05.14.14.02;	author damien;	state Exp;
branches;
next	1.14;

1.14
date	2010.02.08.18.46.47;	author damien;	state Exp;
branches;
next	1.13;

1.13
date	2010.02.07.09.14.55;	author damien;	state Exp;
branches;
next	1.12;

1.12
date	2009.08.10.17.47.23;	author damien;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.29.13.27.27;	author damien;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.13.14.35.19;	author damien;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.12.20.58.48;	author damien;	state Exp;
branches;
next	1.8;

1.8
date	2008.07.21.19.41.44;	author damien;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.08.19.34.14;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2007.12.14.21.28.49;	author damien;	state Exp;
branches;
next	1.5;

1.5
date	2007.12.07.21.23.14;	author damien;	state Exp;
branches;
next	1.4;

1.4
date	2007.12.07.19.37.04;	author damien;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.19.21.26.19;	author damien;	state Exp;
branches;
next	1.2;

1.2
date	2007.11.17.15.39.38;	author damien;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.15.21.15.34;	author damien;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Add support for RT5390 and RT5392 chipsets to the ral(4) driver.

Tested by procter@@ on RT2860 and by me on RT2790 and RT3090.
Ported from FreeBSD by James Hastings.
@
text
@/*	$OpenBSD: rt2860var.h,v 1.23 2016/03/21 21:16:30 stsp Exp $	*/

/*-
 * Copyright (c) 2007
 *	Damien Bergamini <damien.bergamini@@free.fr>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define RT2860_MAX_SCATTER	15
#define RT2860_MAX_SCATTER_TXD	(1 + (RT2860_MAX_SCATTER / 2))

#define RT2860_RX_RING_COUNT	128
#define RT2860_TX_RING_COUNT	64
#define RT2860_TX_RING_MAX	(RT2860_TX_RING_COUNT - 1)
#define RT2860_TX_RING_ONEMORE	(RT2860_TX_RING_MAX - RT2860_MAX_SCATTER_TXD)
#define RT2860_TX_POOL_COUNT	(RT2860_TX_RING_COUNT * 2)

/* HW supports up to 255 STAs */
#define RT2860_WCID_MAX		254
#define RT2860_AID2WCID(aid)	((aid) & 0xff)

struct rt2860_rx_radiotap_header {
	struct ieee80211_radiotap_header wr_ihdr;
	uint8_t		wr_flags;
	uint8_t		wr_rate;
	uint16_t	wr_chan_freq;
	uint16_t	wr_chan_flags;
	uint8_t		wr_dbm_antsignal;
	uint8_t		wr_antenna;
	uint8_t		wr_antsignal;
} __packed;

#define RT2860_RX_RADIOTAP_PRESENT			\
	(1 << IEEE80211_RADIOTAP_FLAGS |		\
	 1 << IEEE80211_RADIOTAP_RATE |			\
	 1 << IEEE80211_RADIOTAP_CHANNEL |		\
	 1 << IEEE80211_RADIOTAP_DBM_ANTSIGNAL |	\
	 1 << IEEE80211_RADIOTAP_ANTENNA |		\
	 1 << IEEE80211_RADIOTAP_DB_ANTSIGNAL)

struct rt2860_tx_radiotap_header {
	struct ieee80211_radiotap_header wt_ihdr;
	uint8_t		wt_flags;
	uint8_t		wt_rate;
	uint16_t	wt_chan_freq;
	uint16_t	wt_chan_flags;
	uint8_t		wt_hwqueue;
} __packed;

#define RT2860_TX_RADIOTAP_PRESENT			\
	(1 << IEEE80211_RADIOTAP_FLAGS |		\
	 1 << IEEE80211_RADIOTAP_RATE |			\
	 1 << IEEE80211_RADIOTAP_CHANNEL |		\
	 1 << IEEE80211_RADIOTAP_HWQUEUE)

struct rt2860_tx_data {
	struct rt2860_txwi		*txwi;
	struct mbuf			*m;
	struct ieee80211_node		*ni;
	bus_dmamap_t			map;
	bus_addr_t			paddr;
	SLIST_ENTRY(rt2860_tx_data)	next;
};

struct rt2860_tx_ring {
	struct rt2860_txd	*txd;
	bus_addr_t		paddr;
	bus_dmamap_t		map;
	bus_dma_segment_t	seg;
	struct rt2860_tx_data	*data[RT2860_TX_RING_COUNT];
	int			cur;
	int			next;
	int			queued;
};

struct rt2860_rx_data {
	struct mbuf	*m;
	bus_dmamap_t	map;
};

struct rt2860_rx_ring {
	struct rt2860_rxd	*rxd;
	bus_addr_t		paddr;
	bus_dmamap_t		map;
	bus_dma_segment_t	seg;
	unsigned int		cur;	/* must be unsigned */
	struct rt2860_rx_data	data[RT2860_RX_RING_COUNT];
};

struct rt2860_node {
	struct ieee80211_node	ni;
	uint8_t			wcid;
	uint8_t			ridx[IEEE80211_RATE_MAXSIZE];
	uint8_t			ctl_ridx[IEEE80211_RATE_MAXSIZE];
};

struct rt2860_softc {
	struct device			sc_dev;

	struct ieee80211com		sc_ic;
	int				(*sc_newstate)(struct ieee80211com *,
					    enum ieee80211_state, int);
	struct ieee80211_amrr		amrr;

	int				(*sc_enable)(struct rt2860_softc *);
	void				(*sc_disable)(struct rt2860_softc *);

	bus_dma_tag_t			sc_dmat;
	bus_space_tag_t			sc_st;
	bus_space_handle_t		sc_sh;

	uint16_t			(*sc_srom_read)(struct rt2860_softc *,
					    uint16_t);

	int				sc_flags;
#define RT2860_ENABLED		(1 << 0)
#define RT2860_ADVANCED_PS	(1 << 1)
#define RT2860_PCIE		(1 << 2)

	uint32_t			sc_ic_flags;
	int				fixed_ridx;

	u_char				*ucode;
	size_t				ucsize;

	struct rt2860_tx_ring		txq[6];
	struct rt2860_rx_ring		rxq;

	SLIST_HEAD(, rt2860_tx_data)	data_pool;
	struct rt2860_tx_data		data[RT2860_TX_POOL_COUNT];
	bus_dmamap_t			txwi_map;
	bus_dma_segment_t		txwi_seg;
	caddr_t				txwi_vaddr;

	int				sc_tx_timer;
	int				mgtqid;
	uint8_t				qfullmsk;

	uint16_t			mac_ver;
	uint16_t			mac_rev;
	uint16_t			rf_rev;
	uint8_t				freq;
	uint8_t				ntxchains;
	uint8_t				nrxchains;
	uint8_t				pslevel;
	int8_t				txpow1[54];
	int8_t				txpow2[54];
	int8_t				rssi_2ghz[3];
	int8_t				rssi_5ghz[3];
	uint8_t				lna[4];
	uint8_t				rf24_20mhz;
	uint8_t				rf24_40mhz;
	uint8_t				patch_dac;
	uint8_t				rfswitch;
	uint8_t				ext_2ghz_lna;
	uint8_t				ext_5ghz_lna;
	uint8_t				calib_2ghz;
	uint8_t				calib_5ghz;
	uint8_t				txmixgain_2ghz;
	uint8_t				txmixgain_5ghz;
	uint8_t				tssi_2ghz[9];
	uint8_t				tssi_5ghz[9];
	uint8_t				step_2ghz;
	uint8_t				step_5ghz;
	struct {
		uint8_t	reg;
		uint8_t	val;
	}				bbp[8], rf[10];
	uint8_t				leds;
	uint16_t			led[3];
	uint32_t			txpow20mhz[5];
	uint32_t			txpow40mhz_2ghz[5];
	uint32_t			txpow40mhz_5ghz[5];

	struct ieee80211_amrr_node	amn[RT2860_WCID_MAX + 1];

#if NBPFILTER > 0
	caddr_t				sc_drvbpf;
	union {
		struct rt2860_rx_radiotap_header th;
		uint8_t pad[64];
	}				sc_rxtapu;
#define sc_rxtap			sc_rxtapu.th
	int				sc_rxtap_len;

	union {
		struct rt2860_tx_radiotap_header th;
		uint8_t pad[64];
	}				sc_txtapu;
#define sc_txtap			sc_txtapu.th
	int				sc_txtap_len;
#endif
};

int	rt2860_attach(void *, int);
int	rt2860_detach(void *);
void	rt2860_suspend(void *);
void	rt2860_wakeup(void *);
int	rt2860_intr(void *);
@


1.23
log
@In ral(4) RT2860 code, replace custom defrag with m_defrag().

This fixes an error in the existing code: the "hopeless case" guard
equivales 'ring now full', so oactive is never set: the code drops any mbuf
that would fill the ring. This occurs often in practice.

The new code avoids some hoop-jumping. Currently, one tx dma-map can fill
the tx ring. Therefore an mbuf that fits a dma-map may yet not fit into the tx
ring's remaining space.  To be sure it can, we must in general count the
mbuf's fragments and, if necessary, defrag it and reload the dmamap.

Patch by Richard Procter via bugs@@
Tested by Richard on RT2860 and by me on RT3090 and RT2700.
ok mpi@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.22 2016/03/21 21:16:01 stsp Exp $	*/
d152 1
a152 1
	uint8_t				rf_rev;
@


1.22
log
@Fix watchdog timeouts and dropped frames under load with RT2860 ral(4).

On full tx ring, ring->cur wraps to an active tx descriptor. Passing
that wrapped value to the card was observed to cause general flakiness.
Fix prevents the wrap at the cost of reducing usable tx descriptors by one.

Patch by Richard Procter via bugs@@
Tested by Richard on RT2860 and by me on RT3090 and RT2700.
ok mpi@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.21 2013/12/06 21:03:03 deraadt Exp $	*/
d20 3
d26 1
a27 2

#define RT2860_MAX_SCATTER	((RT2860_TX_RING_COUNT * 2) - 1)
@


1.21
log
@Add a DVACT_WAKEUP op to the *_activate() API.  This is called after the
kernel resumes normal (non-cold, able to run processes, etc) operation.
Previously we were relying on specific DVACT_RESUME op's in drivers
creating callback/threads themselves, but that has become too common,
indicating the need for a built-in mechanism.
ok dlg kettenis, tested by a sufficient amount of people
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.20 2010/09/07 16:21:42 deraadt Exp $	*/
d20 1
d22 1
a22 1
#define RT2860_RX_RING_COUNT	128
@


1.20
log
@remove the powerhook code.  All architectures now use the ca_activate tree
traversal code to suspend/resume
ok oga kettenis blambert
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.19 2010/08/27 16:06:25 kettenis Exp $	*/
d206 1
a206 1
void	rt2860_resume(void *);
@


1.19
log
@Stop calling xxx_power() from xxx_resume(); instead do it the other way around.
Get rid of the sc_power() callback, which isn't used anymore.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.18 2010/08/04 19:48:33 damien Exp $	*/
a200 1
	void				*sc_powerhook;
@


1.18
log
@add suspend/resume support for PCI ral(4) devices.

ok deraadt@@, sthen@@

tested by matthew@@ (RT2560), dcoppa@@ (RT2790), okan@@ (RT2860), todd@@ (RT2560)
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.17 2010/07/19 19:47:52 damien Exp $	*/
a114 1
	void				(*sc_power)(struct rt2860_softc *, int);
@


1.17
log
@store the WCID in the rt2860_node structure at association time
and use this later instead of converting ni_associd into WCID each
time we need it.
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.16 2010/04/06 16:41:54 damien Exp $	*/
d126 2
a127 3
#define RT2860_FWLOADED		(1 << 1)
#define RT2860_ADVANCED_PS	(1 << 2)
#define RT2860_PCIE		(1 << 3)
d132 3
d207 2
@


1.16
log
@On RT3090 chips, read vendor RF settings from ROM and apply them.
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.15 2010/04/05 14:14:02 damien Exp $	*/
d100 1
@


1.15
log
@Initial bits for >=RT3090 support.
Probably not functionnal yet (but test reports are welcome).

Update microcode for RT2860 while I'm here (remember to run
make && make install under sys/dev/microcode/ral/).
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.14 2010/02/08 18:46:47 damien Exp $	*/
d174 1
a174 1
	}				bbp[8];
@


1.14
log
@add the 10us sifs directly to the pre-computed ack durations.
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.13 2010/02/07 09:14:55 damien Exp $	*/
d120 3
d127 1
d145 2
a146 1
	uint32_t			mac_rev;
d157 4
d165 2
@


1.13
log
@add channels 167, 169, 171, 173 for dual-band devices
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.12 2009/08/10 17:47:23 damien Exp $	*/
a138 1
	int				sifs;
@


1.12
log
@three more shutdown hooks bite the dust.
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.11 2008/12/29 13:27:27 damien Exp $	*/
d148 2
a149 2
	int8_t				txpow1[50];
	int8_t				txpow2[50];
@


1.11
log
@move the 802.11 header out of the TXWI structure.
add some definitions for RT2870/RT3070.
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.10 2008/12/13 14:35:19 damien Exp $	*/
a188 1
	void				*sc_sdhook;
a194 1
void	rt2860_shutdown(void *);
@


1.10
log
@use the hardware general-purpose timer interrupt instead of timeout(9).
clean up the ctl_ridx mess.
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.9 2008/12/12 20:58:48 damien Exp $	*/
d135 1
a135 1
	struct rt2860_txwi		*txwi;
d153 2
@


1.9
log
@- fix HW crypto using group keys (this should fix the "ExtIV bit not set"
  logged by some WPA supplicants when connecting to a ral(4) WPA AP.)
- get rid of the ugly ack_rate, rate2mcs functions (pre-compute ACKs
  duration for all rates at node association time.)
- lot of clean up, prepare for future enhancements
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.8 2008/07/21 19:41:44 damien Exp $	*/
a118 3

	struct timeout			scan_to;
	struct timeout			amrr_to;
@


1.8
log
@rename rt2860 pci ids to match with reality.
import some fixes for 1T2R adapters from the linux vendor driver.
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.7 2008/06/08 19:34:14 jsg Exp $	*/
d98 6
d126 1
a126 2
#define RT2860_UPD_BEACON	(1 << 2)
#define RT2860_ADVANCED_PS	(1 << 3)
d129 1
d143 1
@


1.7
log
@Set up shutdown and powerhooks with code adapted from rt2661.
Fixes resume from suspend/hibernate problems mentioned in
PR 5845.
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.6 2007/12/14 21:28:49 damien Exp $	*/
d121 1
d143 1
@


1.6
log
@the hardware does not allow to specify the protection mode in each
frame, so track changes to protection mode at each beacon interval
and update the hardware registers appropriately.
cleanup some comments.

undef RAL_DEBUG while i'm here..
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.5 2007/12/07 21:23:14 damien Exp $	*/
d181 2
@


1.5
log
@LEDs
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.4 2007/12/07 19:37:04 damien Exp $	*/
d121 2
@


1.4
log
@In hostap mode, update beacon to reflect ERP IE changes.
Fix channel 126 settings.
Workarounds for various hardware bugs.
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.3 2007/11/19 21:26:19 damien Exp $	*/
d155 2
@


1.3
log
@802.11 radiotap + various tweaks
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.2 2007/11/17 15:39:38 damien Exp $	*/
d120 1
@


1.2
log
@implement ic_set_key() and ic_delete_key() callbacks.
@
text
@d1 1
a1 1
/*	$OpenBSD: rt2860var.h,v 1.1 2007/11/15 21:15:34 damien Exp $	*/
d30 34
d159 17
@


1.1
log
@New driver for Ralink RT2860 chipset.
Attaches as 'ral' as it shares the PCI and CardBus frontends with
RT2560 and RT2661 though it is actually a separate driver.

Requires a firmware that can't be redistributed with the base system
due to license restrictions (exact same license as iwn(4) firmware).

The 802.11n capabilities not yet supported (except MIMO).
Great thanks to Sam Fourman Jr for donating hardware.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d27 1
a27 1
#define RT2860_WCID_MAX	254
@

