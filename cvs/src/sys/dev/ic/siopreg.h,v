head	1.12;
access;
symbols
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.28
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.22
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.24
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.16
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.20
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.18
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.14
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.12
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.6
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.4
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.11.0.10
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.12
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.8
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.6
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.5
	UBC:1.4.0.4
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	SMP:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2;
locks; strict;
comment	@ * @;


1.12
date	2010.07.23.07.47.13;	author jsg;	state Exp;
branches;
next	1.11;

1.11
date	2007.08.05.19.05.09;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.16.22.11.24;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.08.16.17.57;	author krw;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.16.20.30.06;	author avsm;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.21.18.58.49;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.11.19.20.27;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.16.00.53.12;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.25.23.14.40;	author krw;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2001.04.15.06.01.29;	author krw;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2001.03.10.05.04.06;	author krw;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.15.04.07.58;	author krw;	state Exp;
branches;
next	;

1.3.4.1
date	2001.05.14.22.24.12;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2001.07.04.10.41.09;	author niklas;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2003.03.28.00.38.15;	author niklas;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2004.02.19.10.56.20;	author niklas;	state Exp;
branches;
next	;

1.4.4.1
date	2002.10.29.00.33.26;	author art;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2003.05.19.21.59.43;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Manuel Bouyer rescinded clauses 3 and 4 of his license text.
@
text
@/*	$OpenBSD: siopreg.h,v 1.11 2007/08/05 19:05:09 kettenis Exp $ */
/*	$NetBSD: siopreg.h,v 1.16 2005/02/27 00:27:02 perry Exp $	*/

/*
 * Copyright (c) 2000 Manuel Bouyer.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 * Devices definitions for Symbios/NCR M53c8xx PCI-SCSI I/O Processors
 * Docs available from http://www.symbios.com/
 */

#define SIOP_SCNTL0 	0x00 /* SCSI control 0, R/W */
#define SCNTL0_ARB_MASK	0xc0
#define SCNTL0_SARB	0x00
#define SCNTL0_FARB	0xc0
#define SCNTL0_START	0x20
#define SCNTL0_WATM	0x10
#define SCNTL0_EPC	0x08
#define SCNTL0_AAP	0x02
#define SCNTL0_TRG	0x01

#define SIOP_SCNTL1 	0x01 /* SCSI control 1, R/W */
#define SCNTL1_EXC	0x80
#define SCNTL1_ADB	0x40
#define SCNTL1_DHP	0x20
#define SCNTL1_CON	0x10
#define SCNTL1_RST	0x08
#define SCNTL1_AESP	0x04
#define SCNTL1_IARB	0x02
#define SCNTL1_SST	0x01

#define SIOP_SCNTL2 	0x02 /* SCSI control 2, R/W */
#define SCNTL2_SDU	0x80
#define SCNTL2_CHM	0x40	/* 875 only */
#define SCNTL2_SLPMD	0x20	/* 875 only */
#define SCNTL2_SLPHBEN	0x10	/* 875 only */
#define SCNTL2_WSS	0x08	/* 875 only */
#define SCNTL2_VUE0	0x04	/* 875 only */
#define SCNTL2_VUE1	0x02	/* 875 only */
#define SCNTL2_WSR	0x01	/* 875 only */

#define SIOP_SCNTL3 	0x03 /* SCSI control 3, R/W */
#define SCNTL3_ULTRA	0x80	/* 875 only */
#define SCNTL3_SCF_SHIFT 4
#define SCNTL3_SCF_MASK	0x70
#define SCNTL3_EWS	0x08	/* 875 only */
#define SCNTL3_CCF_SHIFT 0
#define SCNTL3_CCF_MASK	0x07

/* periods for various SCF values, assume transfer period of 4 */
struct scf_period {
	int clock; /* clock period (ns * 10) */
	int period; /* scsi period, as set in the SDTR message */
	int scf; /* scf value to use */
};

#ifdef SIOP_NEEDS_PERIOD_TABLES
static const struct scf_period scf_period[] = {
	{250, 25, 1}, /* 10.0 MHz */
	{250, 37, 2}, /* 6.67 MHz */
	{250, 50, 3},  /* 5.00 MHz */
	{250, 75, 4},  /* 3.33 MHz */
	{125, 12, 1},  /* 20.0 MHz */
	{125, 18, 2},  /* 13.3 MHz */
	{125, 25, 3},  /* 10.0 MHz */
	{125, 37, 4},  /* 6.67 MHz */
	{125, 50, 5},  /* 5.0 MHz */
	{ 62, 10, 1},  /* 40.0 MHz */
	{ 62, 12, 3},  /* 20.0 MHz */
	{ 62, 18, 4},  /* 13.3 MHz */
	{ 62, 25, 5},  /* 10.0 MHz */
};

static const struct scf_period dt_scf_period[] = {
	{ 62,  9, 1},  /* 80.0 MHz */
	{ 62, 10, 3},  /* 40.0 MHz */
	{ 62, 12, 5},  /* 20.0 MHz */
	{ 62, 18, 6},  /* 13.3 MHz */
	{ 62, 25, 7},  /* 10.0 MHz */
};
#endif

#define SIOP_SCID	0x04 /* SCSI chip ID R/W */
#define SCID_RRE	0x40
#define SCID_SRE	0x20
#define SCID_ENCID_SHIFT 0
#define SCID_ENCID_MASK	0x07

#define SIOP_SXFER	0x05 /* SCSI transfer, R/W */
#define SXFER_TP_SHIFT	 5
#define SXFER_TP_MASK	0xe0
#define SXFER_MO_SHIFT  0
#define SXFER_MO_MASK  0x3f

#define SIOP_SDID	0x06 /* SCSI destination ID, R/W */
#define SDID_ENCID_SHIFT 0
#define SDID_ENCID_MASK	0x07

#define SIOP_GPREG	0x07 /* General purpose, R/W */
#define GPREG_GPIO4	0x10	/* 875 only */
#define GPREG_GPIO3	0x08	/* 875 only */
#define GPREG_GPIO2	0x04	/* 875 only */
#define GPREG_GPIO1	0x02
#define GPREG_GPIO0	0x01

#define SIOP_SFBR	0x08 /* SCSI first byte received, R/W */

#define SIOP_SOCL	0x09 /* SCSI output control latch, RW */

#define SIOP_SSID	0x0A /* SCSI selector ID, RO */
#define SSID_VAL	0x80
#define SSID_ENCID_SHIFT 0
#define SSID_ENCID_MASK 0x0f

#define SIOP_SBCL	0x0B /* SCSI control line, RO */

#define SIOP_DSTAT	0x0C /* DMA status, RO */
#define DSTAT_DFE	0x80
#define DSTAT_MDPE	0x40
#define DSTAT_BF	0x20
#define DSTAT_ABRT	0x10
#define DSTAT_SSI	0x08
#define DSTAT_SIR	0x04
#define DSTAT_IID	0x01

#define SIOP_SSTAT0	0x0D /* STSI status 0, RO */
#define SSTAT0_ILF	0x80
#define SSTAT0_ORF	0x40
#define SSTAT0_OLF	0x20
#define SSTAT0_AIP	0x10
#define SSTAT0_LOA	0x08
#define SSTAT0_WOA	0x04
#define SSTAT0_RST	0x02
#define SSTAT0_SDP	0x01

#define SIOP_SSTAT1	0x0E /* STSI status 1, RO */
#define SSTAT1_FFO_SHIFT 4
#define SSTAT1_FFO_MASK 0x80
#define SSTAT1_SDPL	0x08
#define SSTAT1_MSG	0x04
#define SSTAT1_CD	0x02
#define SSTAT1_IO	0x01
#define SSTAT1_PHASE_MASK (SSTAT1_IO | SSTAT1_CD | SSTAT1_MSG)
#define SSTAT1_PHASE_DATAOUT	0
#define SSTAT1_PHASE_DATAIN	SSTAT1_IO
#define SSTAT1_PHASE_CMD	SSTAT1_CD
#define SSTAT1_PHASE_STATUS	(SSTAT1_CD | SSTAT1_IO)
#define SSTAT1_PHASE_MSGOUT	(SSTAT1_MSG | SSTAT1_CD)
#define SSTAT1_PHASE_MSGIN	(SSTAT1_MSG | SSTAT1_CD | SSTAT1_IO)

#define SIOP_SSTAT2	0x0F /* STSI status 2, RO */
#define SSTAT2_ILF1	0x80	/* 875 only */
#define SSTAT2_ORF1	0x40	/* 875 only */
#define SSTAT2_OLF1	0x20	/* 875 only */
#define SSTAT2_FF4	0x10	/* 875 only */
#define SSTAT2_SPL1	0x08	/* 875 only */
#define SSTAT2_DF	0x04	/* 875 only */
#define SSTAT2_LDSC	0x02
#define SSTAT2_SDP1	0x01	/* 875 only */

#define SIOP_DSA	0x10 /* data struct addr, R/W */

#define SIOP_ISTAT	0x14 /* IRQ status, R/W */
#define ISTAT_ABRT	0x80
#define ISTAT_SRST	0x40
#define ISTAT_SIGP	0x20
#define ISTAT_SEM	0x10
#define ISTAT_CON	0x08
#define ISTAT_INTF	0x04
#define ISTAT_SIP	0x02
#define ISTAT_DIP	0x01

#define SIOP_CTEST0	0x18 /* Chip test 0, R/W */
#define CTEST0_EHP	0x04    /* 720/770 */

#define SIOP_CTEST1	0x19 /* Chip test 1, R/W */

#define SIOP_CTEST2	0x1A /* Chip test 2, R/W */
#define CTEST2_SRTCH	0x04	/* 875 only */

#define SIOP_CTEST3	0x1B /* Chip test 3, R/W */
#define CTEST3_FLF	0x08
#define CTEST3_CLF	0x04
#define CTEST3_FM	0x02
#define CTEST3_WRIE	0x01

#define SIOP_TEMP	0x1C /* Temp register (used by CALL/RET), R/W */

#define SIOP_DFIFO	0x20 /* DMA FIFO */

#define SIOP_CTEST4	0x21 /* Chip test 4, R/W */
#define CTEST4_MUX	0x80    /* 720/770 */
#define CTEST4_BDIS	0x80
#define CTEST_ZMOD	0x40
#define CTEST_ZSD	0x20
#define CTEST_SRTM	0x10
#define CTEST_MPEE	0x08

#define SIOP_CTEST5	0x22 /* Chip test 5, R/W */
#define CTEST5_ADCK	0x80
#define CTEST5_BBCK	0x40
#define CTEST5_DFS	0x20
#define CTEST5_MASR	0x10
#define CTEST5_DDIR	0x08
#define CTEST5_BOMASK	0x03

#define SIOP_CTEST6	0x23 /* Chip test 6, R/W */

#define SIOP_DBC	0x24 /* DMA byte counter, R/W */

#define SIOP_DCMD	0x27 /* DMA command, R/W */

#define SIOP_DNAD	0x28 /* DMA next addr, R/W */

#define SIOP_DSP	0x2C /* DMA scripts pointer, R/W */

#define SIOP_DSPS	0x30 /* DMA scripts pointer save, R/W */

#define SIOP_SCRATCHA	0x34 /* scratch register A. R/W */

#define SIOP_DMODE	0x38 /* DMA mode, R/W */
#define DMODE_BL_SHIFT   6
#define DMODE_BL_MASK	0xC0
#define DMODE_SIOM	0x20
#define DMODE_DIOM	0x10
#define DMODE_ERL	0x08
#define DMODE_ERMP	0x04
#define DMODE_BOF	0x02
#define DMODE_MAN	0x01

#define SIOP_DIEN	0x39 /* DMA interrupt enable, R/W */
#define DIEN_MDPE	0x40
#define DIEN_BF		0x20
#define DIEN_AVRT	0x10
#define DIEN_SSI	0x08
#define DIEN_SIR	0x04
#define DIEN_IID	0x01

#define SIOP_SBR	0x3A /* scratch byte register, R/W */

#define SIOP_DCNTL	0x3B /* DMA control, R/W */
#define DCNTL_CLSE	0x80
#define DCNTL_PFF	0x40
#define DCNTL_EA	0x20    /* 720/770 */
#define DCNTL_PFEN	0x20    /* 8xx */
#define DCNTL_SSM	0x10
#define DCNTL_IRQM	0x08
#define DCNTL_STD	0x04
#define DCNTL_IRQD	0x02
#define DCNTL_COM	0x01

#define SIOP_ADDER	0x3C /* adder output sum, RO */

#define SIOP_SIEN0	0x40 /* SCSI interrupt enable 0, R/W */
#define SIEN0_MA	0x80
#define SIEN0_CMP	0x40
#define SIEN0_SEL	0x20
#define SIEN0_RSL	0x10
#define SIEN0_SGE	0x08
#define SIEN0_UDC	0x04
#define SIEN0_SRT	0x02
#define SIEN0_PAR	0x01

#define SIOP_SIEN1	0x41 /* SCSI interrupt enable 1, R/W */
#define SIEN1_SBMC	0x10 /* 895 only */
#define SIEN1_STO	0x04
#define SIEN1_GEN	0x02
#define SIEN1_HTH	0x01

#define SIOP_SIST0	0x42 /* SCSI interrupt status 0, RO */
#define SIST0_MA	0x80
#define SIST0_CMP	0x40
#define SIST0_SEL	0x20
#define SIST0_RSL	0x10
#define SIST0_SGE	0x08
#define SIST0_UDC	0x04
#define SIST0_RST	0x02
#define SIST0_PAR	0x01

#define SIOP_SIST1	0x43 /* SCSI interrupt status 1, RO */
#define SIST1_SBMC	0x10 /* 895 only */
#define SIST1_STO	0x04
#define SIST1_GEN	0x02
#define SIST1_HTH	0x01

#define SIOP_SLPAR	0x44 /* scsi longitudinal parity, R/W */

#define SIOP_SWIDE	0x45 /* scsi wide residue, RW, 875 only */

#define SIOP_MACNTL	0x46 /* memory access control, R/W */

#define SIOP_GPCNTL	0x47 /* General Purpose Pin control, R/W */
#define GPCNTL_ME	0x80	/* 875 only */
#define GPCNTL_FE	0x40	/* 875 only */
#define GPCNTL_IN4	0x10	/* 875 only */
#define GPCNTL_IN3	0x08	/* 875 only */
#define GPCNTL_IN2	0x04	/* 875 only */
#define GPCNTL_IN1	0x02
#define GPCNTL_IN0	0x01

#define SIOP_STIME0	0x48 /* SCSI timer 0, R/W */
#define STIME0_HTH_SHIFT 4
#define STIME0_HTH_MASK	0xf0
#define STIME0_SEL_SHIFT 0
#define STIME0_SEL_MASK	0x0f

#define SIOP_STIME1	0x49 /* SCSI timer 1, R/W */
#define STIME1_HTHBA	0x40	/* 875 only */
#define STIME1_GENSF	0x20	/* 875 only */
#define STIME1_HTHSF	0x10	/* 875 only */
#define STIME1_GEN_SHIFT 0
#define STIME1_GEN_MASK	0x0f

#define SIOP_RESPID0	0x4A /* response ID, R/W */

#define SIOP_RESPID1	0x4B /* response ID, R/W, 875-only */

#define SIOP_STEST0	0x4C /* SCSI test 0, RO */

#define SIOP_STEST1	0x4D /* SCSI test 1, RO, RW on 875 */
#define STEST1_DOGE	0x20	/* 1010 only */
#define STEST1_DIGE	0x10	/* 1010 only */
#define STEST1_DBLEN	0x08	/* 875-only */
#define STEST1_DBLSEL	0x04	/* 875-only */

#define SIOP_STEST2	0x4E /* SCSI test 2, RO, R/W on 875 */
#define STEST2_DIF	0x20	/* 875 only */
#define STEST2_EXT	0x02

#define SIOP_STEST3	0x4F /* SCSI test 3, RO, RW on 875 */
#define STEST3_TE	0x80
#define STEST3_HSC	0x20

#define SIOP_STEST4	0x52 /* SCSI test 4, 895 only */
#define STEST4_MODE_MASK 0xc0
#define STEST4_MODE_DIF	0x40
#define STEST4_MODE_SE	0x80
#define STEST4_MODE_LVD	0xc0
#define STEST4_LOCK	0x20
#define STEST4_

#define SIOP_SIDL	0x50 /* SCSI input data latch, RO */

#define SIOP_SODL	0x54 /* SCSI output data latch, R/W */

#define SIOP_SBDL	0x58 /* SCSI bus data lines, RO */

#define SIOP_SCRATCHB	0x5C /* Scratch register B, R/W */

#define SIOP_SCRATCHC	0x60 /* Scratch register C, R/W, 875 only */

#define SIOP_SCRATCHD	0x64 /* Scratch register D, R/W, 875-only */

#define SIOP_SCRATCHE	0x68 /* Scratch register E, R/W, 875-only */

#define SIOP_SCRATCHF	0x6c /* Scratch register F, R/W, 875-only */

#define SIOP_SCRATCHG	0x70 /* Scratch register G, R/W, 875-only */

#define SIOP_SCRATCHH	0x74 /* Scratch register H, R/W, 875-only */

#define SIOP_SCRATCHI	0x78 /* Scratch register I, R/W, 875-only */

#define SIOP_SCRATCHJ	0x7c /* Scratch register J, R/W, 875-only */

#define SIOP_SCNTL4	0xBC /* SCSI control 4, R/W, 1010-only */
#define SCNTL4_XCLKS_ST	0x01
#define SCNTL4_XCLKS_DT	0x02
#define SCNTL4_XCLKH_ST	0x04
#define SCNTL4_XCLKH_DT	0x08
#define SCNTL4_AIPEN	0x40
#define SCNTL4_U3EN	0x80

#define SIOP_DFBC	0xf0 /* DMA fifo byte count, RO */

#define SIOP_AIPCNTL0	0xbe	/* AIP Control 0, 1010-only */
#define AIPCNTL0_ERRLIVE 0x04	/* AIP error status, live */
#define AIPCNTL0_ERR	0x02	/* AIP error status, latched */
#define AIPCNTL0_PARITYERRs 0x01 /* Parity error */

#define SIOP_AIPCNTL1	0xbf	/* AIP Control 1, 1010-only */
#define AIPCNTL1_DIS	0x08	/* disable AIP generation, 1010-66 only */
#define AIPCNTL1_RSETERR 0x04	/* reset AIP error 1010-66 only */
#define AIPCNTL1_FB	0x02	/* force bad AIP value 1010-66 only */
#define AIPCNTL1_RSET	0x01	/* reset AIP sequence value 1010-66 only */

/*
 * Non-volatile configuration settings stored in the EEPROM.  There
 * are at least two known formats: Symbios Logic format and Tekram format.
 */

#define	SIOP_NVRAM_SYM_SIZE		368
#define	SIOP_NVRAM_SYM_ADDRESS		0x100

struct nvram_symbios {
	/* Header (6 bytes) */
	u_int16_t	type;		/* 0x0000 */
	u_int16_t	byte_count;	/* excluding header/trailer */
	u_int16_t	checksum;

	/* Adapter configuration (20 bytes) */
	u_int8_t	v_major;
	u_int8_t	v_minor;
	u_int32_t	boot_crc;
	u_int16_t	flags;
#define	NVRAM_SYM_F_SCAM_ENABLE		0x0001
#define	NVRAM_SYM_F_PARITY_ENABLE	0x0002
#define	NVRAM_SYM_F_VERBOSE_MESSAGES	0x0004
#define	NVRAM_SYM_F_CHS_MAPPING		0x0008
	u_int16_t	flags1;
#define	NVRAM_SYM_F1_SCAN_HI_LO		0x0001
	u_int16_t	term_state;
#define	NVRAM_SYM_TERM_CANT_PROGRAM	0
#define	NVRAM_SYM_TERM_ENABLED		1
#define	NVRAM_SYM_TERM_DISABLED		2
	u_int16_t	rmvbl_flags;
#define	NVRAM_SYM_RMVBL_NO_SUPPORT	0
#define	NVRAM_SYM_RMVBL_BOOT_DEVICE	1
#define	NVRAM_SYM_RMVBL_MEDIA_INSTALLED	2
	u_int8_t	host_id;
	u_int8_t	num_hba;
	u_int8_t	num_devices;
	u_int8_t	max_scam_devices;
	u_int8_t	num_valid_scam_devices;
	u_int8_t	rsvd;

	/* Boot order (14 bytes x 4) */
	struct nvram_symbios_host {
		u_int16_t	type;		/* 4 - 8xx */
		u_int16_t	device_id;	/* PCI device ID */
		u_int16_t	vendor_id;	/* PCI vendor ID */
		u_int8_t	bus_nr;		/* PCI bus number */
		u_int8_t	device_fn;	/* PCI device/func # << 3 */
		u_int16_t	word8;
		u_int16_t	flags;
#define	NVRAM_SYM_HOST_F_SCAN_AT_BOOT	0x0001
		u_int16_t	io_port;	/* PCI I/O address */
	} __packed host[4];

	/* Targets (8 bytes x 16) */
	struct nvram_symbios_target {
		u_int8_t	flags;
#define	NVRAM_SYM_TARG_F_DISCONNECT_EN	0x0001
#define	NVRAM_SYM_TARG_F_SCAN_AT_BOOT	0x0002
#define	NVRAM_SYM_TARG_F_SCAN_LUNS	0x0004
#define	NVRAM_SYM_TARG_F_TQ_EN		0x0008
		u_int8_t	rsvd;
		u_int8_t	bus_width;
		u_int8_t	sync_offset;	/* 8, 16, etc. */
		u_int16_t	sync_period;	/* 4 * factor */
		u_int16_t	timeout;
	} __packed target[16];

	/* SCAM table (8 bytes x 4) */
	struct nvram_symbios_scam {
		u_int16_t	id;
		u_int16_t	method;
#define	NVRAM_SYM_SCAM_DEFAULT_METHOD	0
#define	NVRAM_SYM_SCAM_DONT_ASSIGN	1
#define	NVRAM_SYM_SCAM_SET_SPECIFIC_ID	2
#define	NVRAM_SYM_SCAM_USE_ORDER_GIVEN	3
		u_int16_t	status;
#define	NVRAM_SYM_SCAM_UNKNOWN		0
#define	NVRAM_SYM_SCAM_DEVICE_NOT_FOUND	1
#define	NVRAM_SYM_SCAM_ID_NOT_SET	2
#define	NVRAM_SYM_SCAM_ID_VALID		3
		u_int8_t		target_id;
		u_int8_t		rsvd;
	} __packed scam[4];

	u_int8_t	spare_devices[15 * 8];
	u_int8_t	trailer[6];	/* 0xfe 0xfe 0x00 0x00 0x00 0x00 */
} __packed;

#define	SIOP_NVRAM_TEK_SIZE		64
#define	SIOP_NVRAM_TEK_93c46_ADDRESS	0
#define	SIOP_NVRAM_TEK_24c16_ADDRESS	0x40

#if 0
static const u_int8_t tekram_sync_table[16] __attribute__((__unused__)) = {
	25, 31, 37,  43,
	50, 62, 75, 125,
	12, 15, 18,  21,
	 6,  7,  9,  10,
};

struct nvram_tekram {
	struct nvram_tekram_target {
		u_int8_t	flags;
#define	NVRAM_TEK_TARG_F_PARITY_CHECK	0x01
#define	NVRAM_TEK_TARG_F_SYNC_NEGO	0x02
#define	NVRAM_TEK_TARG_F_DISCONNECT_EN	0x04
#define	NVRAM_TEK_TARG_F_START_CMD	0x08
#define	NVRAM_TEK_TARG_F_TQ_EN		0x10
#define	NVRAM_TEK_TARG_F_WIDE_NEGO	0x20
		u_int8_t	sync_index;
		u_int16_t	word2;
	} __packed target[16];
	u_int8_t	host_id;
	u_int8_t	flags;
#define	NVRAM_TEK_F_MORE_THAN_2_DRIVES	0x01
#define	NVRAM_TEK_F_DRIVES_SUP_1G	0x02
#define	NVRAM_TEK_F_RESET_ON_POWER_ON	0x04
#define	NVRAM_TEK_F_ACTIVE_NEGATION	0x08
#define	NVRAM_TEK_F_IMMEDIATE_SEEK	0x10
#define	NVRAM_TEK_F_SCAN_LUNS		0x20
#define	NVRAM_TEK_F_REMOVABLE_FLAGS	0xc0	/* 0 dis, 1 boot, 2 all */
	u_int8_t	boot_delay_index;
	u_int8_t	max_tags_index;
	u_int16_t	flags1;
#define	NVRAM_TEK_F_F2_F6_ENABLED	0x0001
	u_int16_t	spare[29];
} __packed;
#endif
@


1.11
log
@Add support for the (non-pci) NCR 53c720/770 in big-endian mode.

ok martin@@, krw@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: siopreg.h,v 1.10 2006/03/16 22:11:24 miod Exp $ */
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Manuel Bouyer.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.10
log
@Comment out tekram_sync_table and only degine {,dt_}scf_period[] for
siop_common.c; shaves half a KB.
@
text
@d1 1
a1 1
/*	$OpenBSD: siopreg.h,v 1.9 2005/10/08 16:17:57 krw Exp $ */
d201 1
d219 1
d271 2
a272 1
#define DCNTL_PFEN	0x20
@


1.9
log
@Remove some trailing whitespace in license. From perry via NetBSD.
Note we are now sync'd up to latest (r1.16) NetBSD source.
@
text
@d1 1
a1 1
/*	$OpenBSD: siopreg.h,v 1.8 2003/11/16 20:30:06 avsm Exp $ */
d84 2
a85 1
static const struct scf_period scf_period[] __attribute__((__unused__)) = {
d101 1
a101 1
static const struct scf_period dt_scf_period[] __attribute__((__unused__)) = {
d108 1
d503 1
d538 1
@


1.8
log
@convert __attribute__((__packed__)) to __packed so that parsers unaware
of gcc extensions have more of a chance.
ok mcbride@@, no objections from millert@@, deraadt@@
@
text
@d1 2
a2 2
/*	$OpenBSD: siopreg.h,v 1.7 2003/10/21 18:58:49 jmc Exp $ */
/*	$NetBSD: siopreg.h,v 1.13 2002/08/29 16:43:23 bouyer Exp $	*/
d24 1
a24 1
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,     
@


1.7
log
@typos from Tom Cosgrove;

Tom: I did not commit a couple of your changes.

i did not include some punctuation fixes (full stops, etc.)
mnemorable -> mnemonic: i decided memorable was probably better
instrunctions -> instruction: i kept the plural
@
text
@d1 1
a1 1
/*	$OpenBSD: siopreg.h,v 1.6 2003/02/11 19:20:27 mickey Exp $ */
d460 1
a460 1
	} __attribute__((__packed__)) host[4];
d474 1
a474 1
	} __attribute__((__packed__)) target[16];
d491 1
a491 1
	} __attribute__((__packed__)) scam[4];
d495 1
a495 1
} __attribute__((__packed__));
d519 1
a519 1
	} __attribute__((__packed__)) target[16];
d534 1
a534 1
} __attribute__((__packed__));
@


1.6
log
@be consistant on Hz vs hz
@
text
@d1 1
a1 1
/*	$OpenBSD: siopreg.h,v 1.5 2002/09/16 00:53:12 krw Exp $ */
d120 1
a120 1
#define SIOP_SDID	0x06 /* SCSI destiation ID, R/W */
d302 1
a302 1
#define SIOP_SIST1	0x43 /* SCSI interrut status 1, RO */
@


1.5
log
@Resync siop with NetBSD. Make strong effort to minimize
differences, undoing whitespace, spelling, etc. changes
and adopting the NetBSD code instead of equivalent home
grown code for PPR negotiation, etc.

siop.c            1.21 -> 1.64
siop_common.c     1.12 -> 1.30
siopreg.h         1.7  -> 1.13
siopvar.h         1.13 -> 1.18
siopvar_common.h  1.10 -> 1.21
ncr53cxxx.c       1.5  -> 1.10
siop.ss           1.12 -> 1.17
siop_pci.c        1.8  -> 1.11
siop_pci_common.c 1.6  -> 1.17
siop_pci_common.h 1.2  -> 1.4

Many fixes, add 1010-66 support, restructure things to prepare for
addition of esiop, osiop and oosiop drivers.

tested on various archs by art@@, millert@@, wilfried@@, jason@@,
Dan Weeks.

ok deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: siopreg.h,v 1.4 2001/06/25 23:14:40 krw Exp $ */
d85 13
a97 13
	{250, 25, 1}, /* 10.0 Mhz */
	{250, 37, 2}, /* 6.67 Mhz */
	{250, 50, 3},  /* 5.00 Mhz */
	{250, 75, 4},  /* 3.33 Mhz */
	{125, 12, 1},  /* 20.0 Mhz */
	{125, 18, 2},  /* 13.3 Mhz */
	{125, 25, 3},  /* 10.0 Mhz */
	{125, 37, 4},  /* 6.67 Mhz */
	{125, 50, 5},  /* 5.0 Mhz */
	{ 62, 10, 1},  /* 40.0 Mhz */
	{ 62, 12, 3},  /* 20.0 Mhz */
	{ 62, 18, 4},  /* 13.3 Mhz */
	{ 62, 25, 5},  /* 10.0 Mhz */
d101 5
a105 5
	{ 62,  9, 1},  /* 80.0 Mhz */
	{ 62, 10, 3},  /* 40.0 Mhz */
	{ 62, 12, 5},  /* 20.0 Mhz */
	{ 62, 18, 6},  /* 13.3 Mhz */
	{ 62, 25, 7},  /* 10.0 Mhz */
@


1.4
log
@Revert change to using sc_link in calls to siop_print_info().

sc_link->device_softc not necessarily available for devices like cd's
that don't issue SCSI commands after INQUIRY during probe, leaving
negotiation triggering to next LUN. Spotted by Nikolay Sturm.

Fixing this is not worth the effort and added complexity for a
cosmetic improvement.

Keep code cleanups done at the same time, and add a typo fix
(destiation -> destination).
@
text
@d1 2
a2 2
/*	$OpenBSD: siopreg.h,v 1.3 2001/04/15 06:01:29 krw Exp $ */
/*	$NetBSD: siopreg.h,v 1.7 2000/10/06 16:35:13 bouyer Exp $	*/
d17 1
a17 1
 *	This product includes software developed by Manuel Bouyer
d77 6
a82 1
#define SIOP_CLOCKS_SUPPORTED 3 /* 3 supported clocks: 25, 12.5, 6.25 ns */
d84 14
a97 30
struct period_factor {
	int factor; /* transfer period factor from sdtr/ppr */
	char *rate; /* string describing transfer rate      */
	struct {
		int st_scf;
		int dt_scf;
	} scf[SIOP_CLOCKS_SUPPORTED];	
		/* scf value to use in SCNTL3[6:4]
		 *   0 == SCLK/3
		 *   1 == SCLK/1
		 *   2 == SCLK/1.5
		 *   3 == SCLK/2
		 *   4 == SCLK/3
		 *   5 == SCLK/4
		 *   6 == SCLK/6
		 *   7 == SCLK/8
		 *
		 * One entry for each different clock
		 * supported, showing appropriate scf
		 * for the period_factor requested. A
		 * value of 0 indicates the rate is
		 * not supported.
		 *
		 * scf[0] == scf for a 25ns cycle
		 * scf[1] == scf for a 12.5 ns cycle
		 * scf[2] == scf for a 6.25 ns cycle
		 *
		 * min sync = first non zero in column
		 * max sync = last  non zero in column	
		 */
d100 6
a105 9
static const struct period_factor period_factor[] __attribute__((__unused__)) = {
	{0x09, "80",   {{0,0},{0,0},{0,1}}},
	{0x0a, "40",   {{0,0},{0,0},{1,3}}},
	{0x0c, "20",   {{0,0},{1,0},{3,5}}},
	{0x12, "13.3", {{0,0},{2,0},{4,6}}},
	{0x19, "10",   {{1,0},{3,0},{5,7}}},
	{0x25, "6.67", {{2,0},{4,0},{6,0}}},
	{0x32, "5",    {{3,0},{5,0},{7,0}}},
	{0x4b, "3.33", {{4,0},{6,0},{0,0}}},
d118 1
a118 1
#define SXFER_MO_MASK	0x1f
d120 1
a120 1
#define SIOP_SDID	0x06 /* SCSI destination ID, R/W */
d343 2
d388 119
a506 3
#define SIOP_SCNTL4	0xbc
#define SCNTL4_ULTRA3	0x80
#define SCNTL4_AIP	0x40
d508 27
a534 1
#define SIOP_DFBC	0xf0 /* DMA FIFO byte count, RO, C10-only */
@


1.4.4.1
log
@sync to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: siopreg.h,v 1.13 2002/08/29 16:43:23 bouyer Exp $	*/
d17 1
a17 1
 *	This product includes software developed by Manuel Bouyer.
d77 1
a77 6
/* periods for various SCF values, assume transfer period of 4 */
struct scf_period {
	int clock; /* clock period (ns * 10) */
	int period; /* scsi period, as set in the SDTR message */
	int scf; /* scf value to use */
};
d79 30
a108 14
static const struct scf_period scf_period[] __attribute__((__unused__)) = {
	{250, 25, 1}, /* 10.0 Mhz */
	{250, 37, 2}, /* 6.67 Mhz */
	{250, 50, 3},  /* 5.00 Mhz */
	{250, 75, 4},  /* 3.33 Mhz */
	{125, 12, 1},  /* 20.0 Mhz */
	{125, 18, 2},  /* 13.3 Mhz */
	{125, 25, 3},  /* 10.0 Mhz */
	{125, 37, 4},  /* 6.67 Mhz */
	{125, 50, 5},  /* 5.0 Mhz */
	{ 62, 10, 1},  /* 40.0 Mhz */
	{ 62, 12, 3},  /* 20.0 Mhz */
	{ 62, 18, 4},  /* 13.3 Mhz */
	{ 62, 25, 5},  /* 10.0 Mhz */
d111 9
a119 6
static const struct scf_period dt_scf_period[] __attribute__((__unused__)) = {
	{ 62,  9, 1},  /* 80.0 Mhz */
	{ 62, 10, 3},  /* 40.0 Mhz */
	{ 62, 12, 5},  /* 20.0 Mhz */
	{ 62, 18, 6},  /* 13.3 Mhz */
	{ 62, 25, 7},  /* 10.0 Mhz */
d132 1
a132 1
#define SXFER_MO_MASK  0x3f
d134 1
a134 1
#define SIOP_SDID	0x06 /* SCSI destiation ID, R/W */
a356 2
#define STEST1_DOGE	0x20	/* 1010 only */
#define STEST1_DIGE	0x10	/* 1010 only */
d400 3
a402 119
#define SIOP_SCNTL4	0xBC /* SCSI control 4, R/W, 1010-only */
#define SCNTL4_XCLKS_ST	0x01
#define SCNTL4_XCLKS_DT	0x02
#define SCNTL4_XCLKH_ST	0x04
#define SCNTL4_XCLKH_DT	0x08
#define SCNTL4_AIPEN	0x40
#define SCNTL4_U3EN	0x80

#define SIOP_DFBC	0xf0 /* DMA fifo byte count, RO */

#define SIOP_AIPCNTL0	0xbe	/* AIP Control 0, 1010-only */
#define AIPCNTL0_ERRLIVE 0x04	/* AIP error status, live */
#define AIPCNTL0_ERR	0x02	/* AIP error status, latched */
#define AIPCNTL0_PARITYERRs 0x01 /* Parity error */

#define SIOP_AIPCNTL1	0xbf	/* AIP Control 1, 1010-only */
#define AIPCNTL1_DIS	0x08	/* disable AIP generation, 1010-66 only */
#define AIPCNTL1_RSETERR 0x04	/* reset AIP error 1010-66 only */
#define AIPCNTL1_FB	0x02	/* force bad AIP value 1010-66 only */
#define AIPCNTL1_RSET	0x01	/* reset AIP sequence value 1010-66 only */

/*
 * Non-volatile configuration settings stored in the EEPROM.  There
 * are at least two known formats: Symbios Logic format and Tekram format.
 */

#define	SIOP_NVRAM_SYM_SIZE		368
#define	SIOP_NVRAM_SYM_ADDRESS		0x100

struct nvram_symbios {
	/* Header (6 bytes) */
	u_int16_t	type;		/* 0x0000 */
	u_int16_t	byte_count;	/* excluding header/trailer */
	u_int16_t	checksum;

	/* Adapter configuration (20 bytes) */
	u_int8_t	v_major;
	u_int8_t	v_minor;
	u_int32_t	boot_crc;
	u_int16_t	flags;
#define	NVRAM_SYM_F_SCAM_ENABLE		0x0001
#define	NVRAM_SYM_F_PARITY_ENABLE	0x0002
#define	NVRAM_SYM_F_VERBOSE_MESSAGES	0x0004
#define	NVRAM_SYM_F_CHS_MAPPING		0x0008
	u_int16_t	flags1;
#define	NVRAM_SYM_F1_SCAN_HI_LO		0x0001
	u_int16_t	term_state;
#define	NVRAM_SYM_TERM_CANT_PROGRAM	0
#define	NVRAM_SYM_TERM_ENABLED		1
#define	NVRAM_SYM_TERM_DISABLED		2
	u_int16_t	rmvbl_flags;
#define	NVRAM_SYM_RMVBL_NO_SUPPORT	0
#define	NVRAM_SYM_RMVBL_BOOT_DEVICE	1
#define	NVRAM_SYM_RMVBL_MEDIA_INSTALLED	2
	u_int8_t	host_id;
	u_int8_t	num_hba;
	u_int8_t	num_devices;
	u_int8_t	max_scam_devices;
	u_int8_t	num_valid_scam_devices;
	u_int8_t	rsvd;

	/* Boot order (14 bytes x 4) */
	struct nvram_symbios_host {
		u_int16_t	type;		/* 4 - 8xx */
		u_int16_t	device_id;	/* PCI device ID */
		u_int16_t	vendor_id;	/* PCI vendor ID */
		u_int8_t	bus_nr;		/* PCI bus number */
		u_int8_t	device_fn;	/* PCI device/func # << 3 */
		u_int16_t	word8;
		u_int16_t	flags;
#define	NVRAM_SYM_HOST_F_SCAN_AT_BOOT	0x0001
		u_int16_t	io_port;	/* PCI I/O address */
	} __attribute__((__packed__)) host[4];

	/* Targets (8 bytes x 16) */
	struct nvram_symbios_target {
		u_int8_t	flags;
#define	NVRAM_SYM_TARG_F_DISCONNECT_EN	0x0001
#define	NVRAM_SYM_TARG_F_SCAN_AT_BOOT	0x0002
#define	NVRAM_SYM_TARG_F_SCAN_LUNS	0x0004
#define	NVRAM_SYM_TARG_F_TQ_EN		0x0008
		u_int8_t	rsvd;
		u_int8_t	bus_width;
		u_int8_t	sync_offset;	/* 8, 16, etc. */
		u_int16_t	sync_period;	/* 4 * factor */
		u_int16_t	timeout;
	} __attribute__((__packed__)) target[16];

	/* SCAM table (8 bytes x 4) */
	struct nvram_symbios_scam {
		u_int16_t	id;
		u_int16_t	method;
#define	NVRAM_SYM_SCAM_DEFAULT_METHOD	0
#define	NVRAM_SYM_SCAM_DONT_ASSIGN	1
#define	NVRAM_SYM_SCAM_SET_SPECIFIC_ID	2
#define	NVRAM_SYM_SCAM_USE_ORDER_GIVEN	3
		u_int16_t	status;
#define	NVRAM_SYM_SCAM_UNKNOWN		0
#define	NVRAM_SYM_SCAM_DEVICE_NOT_FOUND	1
#define	NVRAM_SYM_SCAM_ID_NOT_SET	2
#define	NVRAM_SYM_SCAM_ID_VALID		3
		u_int8_t		target_id;
		u_int8_t		rsvd;
	} __attribute__((__packed__)) scam[4];

	u_int8_t	spare_devices[15 * 8];
	u_int8_t	trailer[6];	/* 0xfe 0xfe 0x00 0x00 0x00 0x00 */
} __attribute__((__packed__));

#define	SIOP_NVRAM_TEK_SIZE		64
#define	SIOP_NVRAM_TEK_93c46_ADDRESS	0
#define	SIOP_NVRAM_TEK_24c16_ADDRESS	0x40

static const u_int8_t tekram_sync_table[16] __attribute__((__unused__)) = {
	25, 31, 37,  43,
	50, 62, 75, 125,
	12, 15, 18,  21,
	 6,  7,  9,  10,
};
d404 1
a404 27
struct nvram_tekram {
	struct nvram_tekram_target {
		u_int8_t	flags;
#define	NVRAM_TEK_TARG_F_PARITY_CHECK	0x01
#define	NVRAM_TEK_TARG_F_SYNC_NEGO	0x02
#define	NVRAM_TEK_TARG_F_DISCONNECT_EN	0x04
#define	NVRAM_TEK_TARG_F_START_CMD	0x08
#define	NVRAM_TEK_TARG_F_TQ_EN		0x10
#define	NVRAM_TEK_TARG_F_WIDE_NEGO	0x20
		u_int8_t	sync_index;
		u_int16_t	word2;
	} __attribute__((__packed__)) target[16];
	u_int8_t	host_id;
	u_int8_t	flags;
#define	NVRAM_TEK_F_MORE_THAN_2_DRIVES	0x01
#define	NVRAM_TEK_F_DRIVES_SUP_1G	0x02
#define	NVRAM_TEK_F_RESET_ON_POWER_ON	0x04
#define	NVRAM_TEK_F_ACTIVE_NEGATION	0x08
#define	NVRAM_TEK_F_IMMEDIATE_SEEK	0x10
#define	NVRAM_TEK_F_SCAN_LUNS		0x20
#define	NVRAM_TEK_F_REMOVABLE_FLAGS	0xc0	/* 0 dis, 1 boot, 2 all */
	u_int8_t	boot_delay_index;
	u_int8_t	max_tags_index;
	u_int16_t	flags1;
#define	NVRAM_TEK_F_F2_F6_ENABLED	0x0001
	u_int16_t	spare[29];
} __attribute__((__packed__));
@


1.4.4.2
log
@sync
@
text
@d85 13
a97 13
	{250, 25, 1}, /* 10.0 MHz */
	{250, 37, 2}, /* 6.67 MHz */
	{250, 50, 3},  /* 5.00 MHz */
	{250, 75, 4},  /* 3.33 MHz */
	{125, 12, 1},  /* 20.0 MHz */
	{125, 18, 2},  /* 13.3 MHz */
	{125, 25, 3},  /* 10.0 MHz */
	{125, 37, 4},  /* 6.67 MHz */
	{125, 50, 5},  /* 5.0 MHz */
	{ 62, 10, 1},  /* 40.0 MHz */
	{ 62, 12, 3},  /* 20.0 MHz */
	{ 62, 18, 4},  /* 13.3 MHz */
	{ 62, 25, 5},  /* 10.0 MHz */
d101 5
a105 5
	{ 62,  9, 1},  /* 80.0 MHz */
	{ 62, 10, 3},  /* 40.0 MHz */
	{ 62, 12, 5},  /* 20.0 MHz */
	{ 62, 18, 6},  /* 13.3 MHz */
	{ 62, 25, 7},  /* 10.0 MHz */
@


1.3
log
@Support U160 on 53c1010 chips.

Add support for PPR negotiations and DT transfers,
and the preservation and restoration of the
SCNTL4 register which controls Ultra3 transfers.

Redo sync lookup, since the same period factor
can mean two things depending on whether you are
using DT or ST. Keep a minimum allowed ST period
factor, and a minimum allowd DT period factor for
each adapter.

Currently NO support for QAS or IUS or AIP.
@
text
@d1 1
a1 1
/*	$OpenBSD: siopreg.h,v 1.2 2001/03/10 05:04:06 krw Exp $ */
d134 1
a134 1
#define SIOP_SDID	0x06 /* SCSI destiation ID, R/W */
@


1.3.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: siopreg.h,v 1.3 2001/04/15 06:01:29 krw Exp $ */
@


1.3.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: siopreg.h,v 1.3.4.1 2001/05/14 22:24:12 niklas Exp $ */
d134 1
a134 1
#define SIOP_SDID	0x06 /* SCSI destination ID, R/W */
@


1.3.4.3
log
@Sync the SMP branch with 3.3
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: siopreg.h,v 1.13 2002/08/29 16:43:23 bouyer Exp $	*/
d17 1
a17 1
 *	This product includes software developed by Manuel Bouyer.
d77 1
a77 6
/* periods for various SCF values, assume transfer period of 4 */
struct scf_period {
	int clock; /* clock period (ns * 10) */
	int period; /* scsi period, as set in the SDTR message */
	int scf; /* scf value to use */
};
d79 30
a108 14
static const struct scf_period scf_period[] __attribute__((__unused__)) = {
	{250, 25, 1}, /* 10.0 MHz */
	{250, 37, 2}, /* 6.67 MHz */
	{250, 50, 3},  /* 5.00 MHz */
	{250, 75, 4},  /* 3.33 MHz */
	{125, 12, 1},  /* 20.0 MHz */
	{125, 18, 2},  /* 13.3 MHz */
	{125, 25, 3},  /* 10.0 MHz */
	{125, 37, 4},  /* 6.67 MHz */
	{125, 50, 5},  /* 5.0 MHz */
	{ 62, 10, 1},  /* 40.0 MHz */
	{ 62, 12, 3},  /* 20.0 MHz */
	{ 62, 18, 4},  /* 13.3 MHz */
	{ 62, 25, 5},  /* 10.0 MHz */
d111 9
a119 6
static const struct scf_period dt_scf_period[] __attribute__((__unused__)) = {
	{ 62,  9, 1},  /* 80.0 MHz */
	{ 62, 10, 3},  /* 40.0 MHz */
	{ 62, 12, 5},  /* 20.0 MHz */
	{ 62, 18, 6},  /* 13.3 MHz */
	{ 62, 25, 7},  /* 10.0 MHz */
d132 1
a132 1
#define SXFER_MO_MASK  0x3f
d134 1
a134 1
#define SIOP_SDID	0x06 /* SCSI destiation ID, R/W */
a356 2
#define STEST1_DOGE	0x20	/* 1010 only */
#define STEST1_DIGE	0x10	/* 1010 only */
d400 3
a402 119
#define SIOP_SCNTL4	0xBC /* SCSI control 4, R/W, 1010-only */
#define SCNTL4_XCLKS_ST	0x01
#define SCNTL4_XCLKS_DT	0x02
#define SCNTL4_XCLKH_ST	0x04
#define SCNTL4_XCLKH_DT	0x08
#define SCNTL4_AIPEN	0x40
#define SCNTL4_U3EN	0x80

#define SIOP_DFBC	0xf0 /* DMA fifo byte count, RO */

#define SIOP_AIPCNTL0	0xbe	/* AIP Control 0, 1010-only */
#define AIPCNTL0_ERRLIVE 0x04	/* AIP error status, live */
#define AIPCNTL0_ERR	0x02	/* AIP error status, latched */
#define AIPCNTL0_PARITYERRs 0x01 /* Parity error */

#define SIOP_AIPCNTL1	0xbf	/* AIP Control 1, 1010-only */
#define AIPCNTL1_DIS	0x08	/* disable AIP generation, 1010-66 only */
#define AIPCNTL1_RSETERR 0x04	/* reset AIP error 1010-66 only */
#define AIPCNTL1_FB	0x02	/* force bad AIP value 1010-66 only */
#define AIPCNTL1_RSET	0x01	/* reset AIP sequence value 1010-66 only */

/*
 * Non-volatile configuration settings stored in the EEPROM.  There
 * are at least two known formats: Symbios Logic format and Tekram format.
 */

#define	SIOP_NVRAM_SYM_SIZE		368
#define	SIOP_NVRAM_SYM_ADDRESS		0x100

struct nvram_symbios {
	/* Header (6 bytes) */
	u_int16_t	type;		/* 0x0000 */
	u_int16_t	byte_count;	/* excluding header/trailer */
	u_int16_t	checksum;

	/* Adapter configuration (20 bytes) */
	u_int8_t	v_major;
	u_int8_t	v_minor;
	u_int32_t	boot_crc;
	u_int16_t	flags;
#define	NVRAM_SYM_F_SCAM_ENABLE		0x0001
#define	NVRAM_SYM_F_PARITY_ENABLE	0x0002
#define	NVRAM_SYM_F_VERBOSE_MESSAGES	0x0004
#define	NVRAM_SYM_F_CHS_MAPPING		0x0008
	u_int16_t	flags1;
#define	NVRAM_SYM_F1_SCAN_HI_LO		0x0001
	u_int16_t	term_state;
#define	NVRAM_SYM_TERM_CANT_PROGRAM	0
#define	NVRAM_SYM_TERM_ENABLED		1
#define	NVRAM_SYM_TERM_DISABLED		2
	u_int16_t	rmvbl_flags;
#define	NVRAM_SYM_RMVBL_NO_SUPPORT	0
#define	NVRAM_SYM_RMVBL_BOOT_DEVICE	1
#define	NVRAM_SYM_RMVBL_MEDIA_INSTALLED	2
	u_int8_t	host_id;
	u_int8_t	num_hba;
	u_int8_t	num_devices;
	u_int8_t	max_scam_devices;
	u_int8_t	num_valid_scam_devices;
	u_int8_t	rsvd;

	/* Boot order (14 bytes x 4) */
	struct nvram_symbios_host {
		u_int16_t	type;		/* 4 - 8xx */
		u_int16_t	device_id;	/* PCI device ID */
		u_int16_t	vendor_id;	/* PCI vendor ID */
		u_int8_t	bus_nr;		/* PCI bus number */
		u_int8_t	device_fn;	/* PCI device/func # << 3 */
		u_int16_t	word8;
		u_int16_t	flags;
#define	NVRAM_SYM_HOST_F_SCAN_AT_BOOT	0x0001
		u_int16_t	io_port;	/* PCI I/O address */
	} __attribute__((__packed__)) host[4];

	/* Targets (8 bytes x 16) */
	struct nvram_symbios_target {
		u_int8_t	flags;
#define	NVRAM_SYM_TARG_F_DISCONNECT_EN	0x0001
#define	NVRAM_SYM_TARG_F_SCAN_AT_BOOT	0x0002
#define	NVRAM_SYM_TARG_F_SCAN_LUNS	0x0004
#define	NVRAM_SYM_TARG_F_TQ_EN		0x0008
		u_int8_t	rsvd;
		u_int8_t	bus_width;
		u_int8_t	sync_offset;	/* 8, 16, etc. */
		u_int16_t	sync_period;	/* 4 * factor */
		u_int16_t	timeout;
	} __attribute__((__packed__)) target[16];

	/* SCAM table (8 bytes x 4) */
	struct nvram_symbios_scam {
		u_int16_t	id;
		u_int16_t	method;
#define	NVRAM_SYM_SCAM_DEFAULT_METHOD	0
#define	NVRAM_SYM_SCAM_DONT_ASSIGN	1
#define	NVRAM_SYM_SCAM_SET_SPECIFIC_ID	2
#define	NVRAM_SYM_SCAM_USE_ORDER_GIVEN	3
		u_int16_t	status;
#define	NVRAM_SYM_SCAM_UNKNOWN		0
#define	NVRAM_SYM_SCAM_DEVICE_NOT_FOUND	1
#define	NVRAM_SYM_SCAM_ID_NOT_SET	2
#define	NVRAM_SYM_SCAM_ID_VALID		3
		u_int8_t		target_id;
		u_int8_t		rsvd;
	} __attribute__((__packed__)) scam[4];

	u_int8_t	spare_devices[15 * 8];
	u_int8_t	trailer[6];	/* 0xfe 0xfe 0x00 0x00 0x00 0x00 */
} __attribute__((__packed__));

#define	SIOP_NVRAM_TEK_SIZE		64
#define	SIOP_NVRAM_TEK_93c46_ADDRESS	0
#define	SIOP_NVRAM_TEK_24c16_ADDRESS	0x40

static const u_int8_t tekram_sync_table[16] __attribute__((__unused__)) = {
	25, 31, 37,  43,
	50, 62, 75, 125,
	12, 15, 18,  21,
	 6,  7,  9,  10,
};
d404 1
a404 27
struct nvram_tekram {
	struct nvram_tekram_target {
		u_int8_t	flags;
#define	NVRAM_TEK_TARG_F_PARITY_CHECK	0x01
#define	NVRAM_TEK_TARG_F_SYNC_NEGO	0x02
#define	NVRAM_TEK_TARG_F_DISCONNECT_EN	0x04
#define	NVRAM_TEK_TARG_F_START_CMD	0x08
#define	NVRAM_TEK_TARG_F_TQ_EN		0x10
#define	NVRAM_TEK_TARG_F_WIDE_NEGO	0x20
		u_int8_t	sync_index;
		u_int16_t	word2;
	} __attribute__((__packed__)) target[16];
	u_int8_t	host_id;
	u_int8_t	flags;
#define	NVRAM_TEK_F_MORE_THAN_2_DRIVES	0x01
#define	NVRAM_TEK_F_DRIVES_SUP_1G	0x02
#define	NVRAM_TEK_F_RESET_ON_POWER_ON	0x04
#define	NVRAM_TEK_F_ACTIVE_NEGATION	0x08
#define	NVRAM_TEK_F_IMMEDIATE_SEEK	0x10
#define	NVRAM_TEK_F_SCAN_LUNS		0x20
#define	NVRAM_TEK_F_REMOVABLE_FLAGS	0xc0	/* 0 dis, 1 boot, 2 all */
	u_int8_t	boot_delay_index;
	u_int8_t	max_tags_index;
	u_int16_t	flags1;
#define	NVRAM_TEK_F_F2_F6_ENABLED	0x0001
	u_int16_t	spare[29];
} __attribute__((__packed__));
@


1.3.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d120 1
a120 1
#define SIOP_SDID	0x06 /* SCSI destination ID, R/W */
d302 1
a302 1
#define SIOP_SIST1	0x43 /* SCSI interrupt status 1, RO */
d460 1
a460 1
	} __packed host[4];
d474 1
a474 1
	} __packed target[16];
d491 1
a491 1
	} __packed scam[4];
d495 1
a495 1
} __packed;
d519 1
a519 1
	} __packed target[16];
d534 1
a534 1
} __packed;
@


1.2
log
@First support for 53c1010 chip. This enables support up to U2W for
either or both channels on the 53c1010. U3W/U160 support coming.

The particulars of 53c1010 support was derived from the FreeBSD/Linux
sym-2 driver under development by Gerard ROUDIER (groudier@@FreeBSD.org).

This first support ensures that registers and bits now reserved are
not used by the 53c1010. It uses the new DFBC register to obtain
DMA FIFO relics.

A single new feature (SF_CHIP_C10) was added, rather than a new
feature for each change the 53c1010 incorporates.

These changes were sufficient to get the imbedded 53c1010 on a Tyan
S2510U3NG board to support installation of OpenBSD to a Quantum Atlas
10K2 drive, and several subsequent 'make build' and 'make release'
cycles using disks on both channels, with and without
softupdates.

More 53c1010 specific code is yet to be extracted from sym-2,
including the changes necessary to enable U160.
@
text
@d1 1
a1 1
/*	$OpenBSD: siopreg.h,v 1.1 2001/02/15 04:07:58 krw Exp $ */
d77 32
a108 6
/* periods for various SCF values, assume transfer period of 4 */
struct scf_period {
	int clock; /* clock period (ns * 10) */
	int period; /* scsi period, as set in the SDTR message */
	int scf; /* scf value to use */
	char *rate; /* the resulting rate */
d111 9
a119 14
static const struct scf_period scf_period[] __attribute__((__unused__)) = {
	{250, 25, 1, "10.0"},
	{250, 37, 2, "6.67"},
	{250, 50, 3, "5.0"},
	{250, 75, 4, "3.33"},
	{125, 12, 1, "20.0"},
	{125, 18, 2, "13.33"},
	{125, 25, 3, "10.0"},
	{125, 37, 4, "6.67"},
	{125, 50, 5, "5.0"},
	{ 62, 10, 1, "40.0"},
	{ 62, 12, 3, "20.0"},
	{ 62, 18, 4, "13.3"},
	{ 62, 25, 5, "10.0"},
d132 1
a132 1
#define SXFER_MO_MASK  0x1f
d399 4
@


1.1
log
@Import siop, a replacement for the ncr SCSI driver, from NetBSD.

Written for NetBSD by Manuel Bouyer.

Tested with various cards on i386 and alpha.

Outstanding issue: doesn't work with PowerPC yet.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d378 2
@

