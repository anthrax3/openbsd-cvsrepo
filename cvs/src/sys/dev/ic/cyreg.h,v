head	1.8;
access;
symbols
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.62
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.60
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.54
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.56
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.48
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.52
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.50
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.46
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.44
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.40
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.42
	OPENBSD_5_0:1.8.0.38
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.36
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.34
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.30
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.32
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.28
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.26
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.24
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.22
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.20
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.18
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.16
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.14
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.12
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.10
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.8
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.6
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.8
	UBC:1.6.0.4
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.14
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2002.09.14.15.00.02;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.54;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.20.04.41.39;	author smart;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2001.03.25.11.54.00;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.03.06.33.37;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.10.11.12.01;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.11.28.23.27.49;	author niklas;	state Exp;
branches
	1.2.14.1;
next	1.1;

1.1
date	96.07.27.07.20.03;	author deraadt;	state Exp;
branches;
next	;

1.2.14.1
date	2001.05.14.22.23.40;	author niklas;	state Exp;
branches;
next	1.2.14.2;

1.2.14.2
date	2001.10.31.03.22.41;	author nate;	state Exp;
branches;
next	1.2.14.3;

1.2.14.3
date	2002.03.28.11.51.00;	author niklas;	state Exp;
branches;
next	1.2.14.4;

1.2.14.4
date	2003.03.28.00.38.12;	author niklas;	state Exp;
branches;
next	;

1.6.4.1
date	2002.06.11.03.42.18;	author art;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2002.10.29.00.33.24;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Various fixes and cleanups in the cy driver.
Finally my "Cyclades Cyclom-8Y" works correctly.

Cleanups:
 - no more stupid arrays, we have softc structs, use them.
 - no more global poll timeout that walks an array, timeouts are now cheap,
   one poll per softc.
 - sc_dev.dv_xname is the correct thing to print in diagnostic printfs.
 - don't have bus-specific code in the generic attach for @@#%$! sake, it
   took 20 seconds to fix (I suspect that the workaround took much more
   time to write).
 - spltty, not splhigh.
 - use pci_mapreg_map, not pci_{io,mem}_find + bus_space_map.
 - use defines, not magic constants in a few places.
 - KNF in a few places (much more work needed).
Now the interesting parts:
 - when handling the interrupt, don't just ignore it when the tty is not
   open. Read and discard the data. If we don't read it, the card will
   interrupt again and again and again and ... (inspired by NetBSD).
 - actually enable interrupts on PLX9050
 - From FreeBSD: "Work around a PLX9050 bug that causes system lockup in
   certain systems"

deraadt@@ ok
@
text
@/*	$OpenBSD: cyreg.h,v 1.7 2002/03/14 01:26:54 millert Exp $	*/
/*	$FreeBSD: cyreg.h,v 1.1 1995/07/05 12:15:51 bde Exp $	*/

/*-
 * Copyright (c) 1995 Bruce Evans.
 * All rights reserved.
 *
 * Modified by Timo Rossi, 1996
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef _DEV_IC_CYREG_H_
#define _DEV_IC_CYREG_H_

#include <sys/timeout.h>

/*
 * Definitions for Cyclades Cyclom-Y serial boards.
 */

#define	CY8_SVCACKR		0x100
#define	CY8_SVCACKT		0x200
#define	CY8_SVCACKM		0x300

/* twice this in PCI mode (shifed BUSTYPE bits left) */
#define	CY_CD1400_MEMSPACING	0x400

/* adjustment value for accessing the last 4 cd1400s on Cyclom-32 */
#define CY32_ADDR_FIX           0xe00

#define	CY16_RESET		0x1400
#define	CY_CLEAR_INTR		0x1800	/* intr ack address */

#define	CY_MAX_CD1400s		8	/* for Cyclom-32 */

/* I/O location for enabling interrupts on PCI Cyclom cards */
#define CY_PCI_INTENA           0x68
#define CY_PCI_INTENA_9050      0x4c

/* Cyclom-Y Custom Register for PLX ID (PCI only) */
#define CY_PLX_VER             0x3400          /* PLX version */
#define CY_PLX_9050            0x0b
#define CY_PLX_9060            0x0c
#define CY_PLX_9080            0x0d

#define CY_CLOCK		25000000	/* baud rate clock */
#define CY_CLOCK_60		60000000	/* baud rate clock for newer cd1400s */

/*
 * bustype is actually the shift count for the offset
 * ISA card addresses are multiplied by 2 (shifted 1 bit)
 * and PCI addresses multiplied by 4 (shifted 2 bits)
 */
#define CY_BUSTYPE_ISA 0
#define CY_BUSTYPE_PCI 1

#define RX_FIFO_THRESHOLD  6

/* Automatic RTS (or actually DTR, the RTS and DTR lines need to be exchanged)
 * handshake threshold used if CY_HW_RTS is defined
 */
#define RX_DTR_THRESHOLD   9

/*
 * Maximum number of ports per card 
 */
#define	CY_MAX_PORTS		(CD1400_NO_OF_CHANNELS * CY_MAX_CD1400s)

/*
 * Port number on card encoded in low 5 bits
 * card number in next 2 bits (only space for 4 cards)
 * high bit reserved for dialout flag
 */
#define CY_PORT(x) (minor(x) & 0xf)
#define CY_CARD(x) ((minor(x) >> 5) & 3)
#define CY_DIALOUT(x) ((minor(x) & 0x80) != 0)
#define CY_DIALIN(x) (!CY_DIALOUT(x))

/*
 * read/write cd1400 registers (when cy_port-structure is available)
 */
#define cd_read_reg(cy,reg) bus_space_read_1(cy->cy_memt, cy->cy_memh, \
			  cy->cy_chip_offs+(((reg<<1))<<cy->cy_bustype))

#define cd_write_reg(cy,reg,val) bus_space_write_1(cy->cy_memt, cy->cy_memh, \
			  cy->cy_chip_offs+(((reg<<1))<<cy->cy_bustype), \
			  (val))

/*
 * read/write cd1400 registers (when sc_softc-structure is available)
 */
#define cd_read_reg_sc(sc,chip,reg) bus_space_read_1(sc->sc_memt, \
				 sc->sc_memh, \
				 sc->sc_cd1400_offs[chip]+\
				 (((reg<<1))<<sc->sc_bustype))

#define cd_write_reg_sc(sc,chip,reg,val) bus_space_write_1(sc->sc_memt, \
				 sc->sc_memh, \
				 sc->sc_cd1400_offs[chip]+\
				 (((reg<<1))<<sc->sc_bustype), \
				 (val))

/*
 * ibuf is a simple ring buffer. It is always used two
 * bytes at a time (status and data)
 */
#define IBUF_SIZE (2*512)

/* software state for one port */
struct cy_port {
	int			 cy_port_num;
	bus_space_tag_t		 cy_memt;
	bus_space_handle_t	 cy_memh;
	int			 cy_chip_offs;
	int			 cy_bustype;
	int			 cy_clock;
	struct tty		*cy_tty;
	int			 cy_openflags;
	int			 cy_fifo_overruns;
	int			 cy_ibuf_overruns;
	u_char			 cy_channel_control;	/* last CCR channel
							 * control command
							 * bits */
	u_char			 cy_carrier_stat;	/* copied from MSVR2 */
	u_char			 cy_flags;
	u_char			*cy_ibuf, *cy_ibuf_end;
	u_char			*cy_ibuf_rd_ptr, *cy_ibuf_wr_ptr;
#ifdef CY_DEBUG1
	int			 cy_rx_int_count;
	int			 cy_tx_int_count;
	int			 cy_modem_int_count;
	int			 cy_start_count;
#endif /* CY_DEBUG1 */
};

#define CYF_CARRIER_CHANGED  0x01
#define CYF_START_BREAK      0x02
#define CYF_END_BREAK        0x04
#define CYF_STOP             0x08
#define CYF_SEND_NUL         0x10
#define CYF_START            0x20

/* software state for one card */
struct cy_softc {
	struct device		 sc_dev;
	struct timeout		 sc_poll_to;
	int			 sc_events;
	void			*sc_ih;
	bus_space_tag_t		 sc_memt;
	bus_space_handle_t	 sc_memh;
	int			 sc_bustype;
	int			 sc_nports; /* number of ports on this card */
	int			 sc_cd1400_offs[CY_MAX_CD1400s];
	struct cy_port		 sc_ports[CY_MAX_PORTS];
	int			 sc_nr_cd1400s;
#ifdef CY_DEBUG1
	int			 sc_poll_count1;
	int			 sc_poll_count2;
#endif
};

int	cy_probe_common(bus_space_tag_t, bus_space_handle_t, int);
void	cy_attach(struct device *, struct device *);
int	cy_intr(void *);

#endif	/* _DEV_IC_CYREG_H_ */
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: cyreg.h,v 1.6 2001/08/20 04:41:39 smart Exp $	*/
d169 2
d178 1
d185 2
a186 2
int	cy_probe_common(int, bus_space_tag_t, bus_space_handle_t, int);
void	cy_attach(struct device *, struct device *, void *);
@


1.6
log
@Allow driver to recognize Cyclades 4Y and 8Y cards.

Not finished yet, but cleaned up and moved around code for
better organization.  Inspired by NetBSD and other PCI drivers.

From my dmesg:
     cy1 at pci0 dev 10 function 0 "Cyclades Cyclom-8Y" rev 0x01
@
text
@d1 1
a1 1
/*	$OpenBSD: cyreg.h,v 1.5 2001/03/25 11:54:00 art Exp $	*/
d182 3
a184 3
int	cy_probe_common __P((int, bus_space_tag_t, bus_space_handle_t, int));
void	cy_attach __P((struct device *, struct device *, void *));
int	cy_intr __P((void *));
@


1.6.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cyreg.h,v 1.6 2001/08/20 04:41:39 smart Exp $	*/
d182 3
a184 3
int	cy_probe_common(int, bus_space_tag_t, bus_space_handle_t, int);
void	cy_attach(struct device *, struct device *, void *);
int	cy_intr(void *);
@


1.6.4.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cyreg.h,v 1.6.4.1 2002/06/11 03:42:18 art Exp $	*/
a168 2
	struct timeout		 sc_poll_to;
	int			 sc_events;
a175 1
	int			 sc_nr_cd1400s;
d182 2
a183 2
int	cy_probe_common(bus_space_tag_t, bus_space_handle_t, int);
void	cy_attach(struct device *, struct device *);
@


1.5
log
@Repair timeouts. kern/1743, but with simpler fix
@
text
@d1 1
a1 1
/*	$OpenBSD: cyreg.h,v 1.4 2001/02/03 06:33:37 mickey Exp $	*/
d35 3
d105 2
a106 2
#define cd_read_reg(cy,reg)  bus_space_read_1(cy->cy_memt, cy->cy_memh, \
			     cy->cy_chip_offs+(((reg<<1))<<cy->cy_bustype))
d134 17
a150 15
  int cy_port_num;
  bus_space_tag_t cy_memt;
  bus_space_handle_t cy_memh;
  int cy_chip_offs;
  int cy_bustype;
  int cy_clock;
  struct tty *cy_tty;
  int cy_openflags;
  int cy_fifo_overruns;
  int cy_ibuf_overruns;
  u_char cy_channel_control; /* last CCR channel control command bits */
  u_char cy_carrier_stat;      /* copied from MSVR2 */
  u_char cy_flags;
  u_char *cy_ibuf, *cy_ibuf_end;
  u_char *cy_ibuf_rd_ptr, *cy_ibuf_wr_ptr;
d152 4
a155 4
  int cy_rx_int_count;
  int cy_tx_int_count;
  int cy_modem_int_count;
  int cy_start_count;
d168 8
a175 8
  struct device sc_dev;
  void *sc_ih;
  bus_space_tag_t sc_memt;
  bus_space_handle_t sc_memh;
  int sc_bustype;
  int sc_nports; /* number of ports on this card */
  int sc_cd1400_offs[CY_MAX_CD1400s];
  struct cy_port sc_ports[CY_MAX_PORTS];
d177 2
a178 2
  int sc_poll_count1;
  int sc_poll_count2;
d181 6
@


1.4
log
@new timeouts
@
text
@d1 1
a1 1
/*	$OpenBSD: cyreg.h,v 1.3 2000/12/10 11:12:01 deraadt Exp $	*/
a164 1
  struct timeout sc_tmo;
@


1.3
log
@support newer cy cards; elektrosatan@@voltagenoir.org, pr#1479
@
text
@d1 1
a1 1
/*	$OpenBSD: cyreg.h,v 1.2 1996/11/28 23:27:49 niklas Exp $	*/
d35 2
d165 1
@


1.2
log
@Adaption to new bus.h from NetBSD.  Various driver has been updated to
NetBSD 961107 state.  Other has not, partly because sometimes the bus.h
changes was coupled with other changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: cyreg.h,v 1.1 1996/07/27 07:20:03 deraadt Exp $	*/
d56 1
d58 8
a65 1
#define	CY_CLOCK		25000000	/* baud rate clock */
d134 1
@


1.2.14.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: cyreg.h,v 1.5 2001/03/25 11:54:00 art Exp $	*/
a34 2
#include <sys/timeout.h>

a55 7
#define CY_PCI_INTENA_9050      0x4c

/* Cyclom-Y Custom Register for PLX ID (PCI only) */
#define CY_PLX_VER             0x3400          /* PLX version */
#define CY_PLX_9050            0x0b
#define CY_PLX_9060            0x0c
#define CY_PLX_9080            0x0d
d57 1
a57 2
#define CY_CLOCK		25000000	/* baud rate clock */
#define CY_CLOCK_60		60000000	/* baud rate clock for newer cd1400s */
a125 1
  int cy_clock;
@


1.2.14.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: cyreg.h,v 1.2.14.1 2001/05/14 22:23:40 niklas Exp $	*/
a34 3
#ifndef _DEV_IC_CYREG_H_
#define _DEV_IC_CYREG_H_

d102 2
a103 2
#define cd_read_reg(cy,reg) bus_space_read_1(cy->cy_memt, cy->cy_memh, \
			  cy->cy_chip_offs+(((reg<<1))<<cy->cy_bustype))
d131 15
a145 17
	int			 cy_port_num;
	bus_space_tag_t		 cy_memt;
	bus_space_handle_t	 cy_memh;
	int			 cy_chip_offs;
	int			 cy_bustype;
	int			 cy_clock;
	struct tty		*cy_tty;
	int			 cy_openflags;
	int			 cy_fifo_overruns;
	int			 cy_ibuf_overruns;
	u_char			 cy_channel_control;	/* last CCR channel
							 * control command
							 * bits */
	u_char			 cy_carrier_stat;	/* copied from MSVR2 */
	u_char			 cy_flags;
	u_char			*cy_ibuf, *cy_ibuf_end;
	u_char			*cy_ibuf_rd_ptr, *cy_ibuf_wr_ptr;
d147 4
a150 4
	int			 cy_rx_int_count;
	int			 cy_tx_int_count;
	int			 cy_modem_int_count;
	int			 cy_start_count;
d163 8
a170 8
	struct device		 sc_dev;
	void			*sc_ih;
	bus_space_tag_t		 sc_memt;
	bus_space_handle_t	 sc_memh;
	int			 sc_bustype;
	int			 sc_nports; /* number of ports on this card */
	int			 sc_cd1400_offs[CY_MAX_CD1400s];
	struct cy_port		 sc_ports[CY_MAX_PORTS];
d172 2
a173 2
	int			 sc_poll_count1;
	int			 sc_poll_count2;
a175 6

int	cy_probe_common __P((int, bus_space_tag_t, bus_space_handle_t, int));
void	cy_attach __P((struct device *, struct device *, void *));
int	cy_intr __P((void *));

#endif	/* _DEV_IC_CYREG_H_ */
@


1.2.14.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d182 3
a184 3
int	cy_probe_common(int, bus_space_tag_t, bus_space_handle_t, int);
void	cy_attach(struct device *, struct device *, void *);
int	cy_intr(void *);
@


1.2.14.4
log
@Sync the SMP branch with 3.3
@
text
@a168 2
	struct timeout		 sc_poll_to;
	int			 sc_events;
a175 1
	int			 sc_nr_cd1400s;
d182 2
a183 2
int	cy_probe_common(bus_space_tag_t, bus_space_handle_t, int);
void	cy_attach(struct device *, struct device *);
@


1.1
log
@split cy driver up
@
text
@d1 1
a1 1
/*	$OpenBSD: cyreg.h,v 1.1 1996/06/20 11:39:11 deraadt Exp $	*/
d92 1
a92 1
#define cd_read_reg(cy,reg)  bus_mem_read_1(cy->cy_bc, cy->cy_memh, \
d95 1
a95 1
#define cd_write_reg(cy,reg,val) bus_mem_write_1(cy->cy_bc, cy->cy_memh, \
d102 1
a102 1
#define cd_read_reg_sc(sc,chip,reg) bus_mem_read_1(sc->sc_bc, \
d107 1
a107 1
#define cd_write_reg_sc(sc,chip,reg,val) bus_mem_write_1(sc->sc_bc, \
d122 2
a123 2
  bus_chipset_tag_t cy_bc;
  bus_mem_handle_t cy_memh;
d154 2
a155 2
  bus_chipset_tag_t sc_bc;
  bus_mem_handle_t sc_memh;
@
