head	1.31;
access;
symbols
	OPENBSD_6_2:1.31.0.4
	OPENBSD_6_2_BASE:1.31
	OPENBSD_6_1:1.31.0.8
	OPENBSD_6_1_BASE:1.31
	OPENBSD_6_0:1.31.0.6
	OPENBSD_6_0_BASE:1.31
	OPENBSD_5_9:1.31.0.2
	OPENBSD_5_9_BASE:1.31
	OPENBSD_5_8:1.29.0.8
	OPENBSD_5_8_BASE:1.29
	OPENBSD_5_7:1.29.0.2
	OPENBSD_5_7_BASE:1.29
	OPENBSD_5_6:1.29.0.4
	OPENBSD_5_6_BASE:1.29
	OPENBSD_5_5:1.27.0.6
	OPENBSD_5_5_BASE:1.27
	OPENBSD_5_4:1.27.0.2
	OPENBSD_5_4_BASE:1.27
	OPENBSD_5_3:1.26.0.10
	OPENBSD_5_3_BASE:1.26
	OPENBSD_5_2:1.26.0.6
	OPENBSD_5_2_BASE:1.26
	OPENBSD_5_1_BASE:1.26
	OPENBSD_5_1:1.26.0.8
	OPENBSD_5_0:1.26.0.4
	OPENBSD_5_0_BASE:1.26
	OPENBSD_4_9:1.26.0.2
	OPENBSD_4_9_BASE:1.26
	OPENBSD_4_8:1.24.0.4
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.2
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.21.0.4
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.20.0.2
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.17.0.6
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.4
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.16.0.2
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.14.0.2
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.6
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.6
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.8
	UBC:1.4.0.2
	UBC_BASE:1.4
	SMP:1.3.0.4
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.31
date	2015.11.28.09.42.10;	author jmatthew;	state Exp;
branches;
next	1.30;
commitid	H1hUCw2u7OaGgYvP;

1.30
date	2015.09.10.12.49.55;	author stsp;	state Exp;
branches;
next	1.29;
commitid	LrD0sbdQk3dnPhfp;

1.29
date	2014.07.08.05.35.18;	author dlg;	state Exp;
branches;
next	1.28;
commitid	0QJleeeWqZmC5anF;

1.28
date	2014.03.14.11.04.24;	author dlg;	state Exp;
branches;
next	1.27;

1.27
date	2013.03.09.17.57.00;	author mpi;	state Exp;
branches;
next	1.26;

1.26
date	2010.09.20.07.40.41;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2010.08.27.08.05.01;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2009.10.15.17.54.54;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2009.10.13.19.33.16;	author pirofti;	state Exp;
branches;
next	1.22;

1.22
date	2009.08.10.20.29.54;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2009.03.22.21.46.31;	author kettenis;	state Exp;
branches;
next	1.20;

1.20
date	2008.12.14.21.31.50;	author kettenis;	state Exp;
branches;
next	1.19;

1.19
date	2008.11.07.18.03.52;	author brad;	state Exp;
branches;
next	1.18;

1.18
date	2008.08.30.07.41.51;	author brad;	state Exp;
branches;
next	1.17;

1.17
date	2007.04.19.19.00.01;	author kettenis;	state Exp;
branches;
next	1.16;

1.16
date	2006.12.21.22.13.36;	author jason;	state Exp;
branches;
next	1.15;

1.15
date	2006.11.25.02.12.04;	author brad;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.10.07.22.42;	author brad;	state Exp;
branches;
next	1.13;

1.13
date	2006.04.10.07.17.57;	author brad;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.05.00.25.06;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.17.03.03.24;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	2005.08.01.05.45.03;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.21.18.58.49;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.07.23.44.05;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.54;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.22.20.15.28;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.28.01.04.02;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.14.02.43.55;	author drahn;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2001.10.03.18.18.01;	author jason;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2001.10.02.15.24.09;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.21.00.01.20;	author art;	state Exp;
branches;
next	;

1.3.4.1
date	2001.10.31.03.22.42;	author nate;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2002.03.06.02.11.43;	author niklas;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2002.03.28.11.51.01;	author niklas;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2003.03.28.00.38.13;	author niklas;	state Exp;
branches;
next	1.3.4.5;

1.3.4.5
date	2004.02.19.10.56.18;	author niklas;	state Exp;
branches;
next	;

1.4.2.1
date	2002.01.31.22.55.31;	author niklas;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2002.06.11.03.42.18;	author art;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Rework gem_start to check that there's enough space in the ring before
dequeueing a packet, then drop the packet if it can't be sent, rather than
using two phase dequeue then commit.

Adjust sc_tx_cnt using atomic operations, take the kernel lock before
calling gem_start or gem_init from the interrupt handler, and use an
interrupt barrier when taking the interface down.

With all this done, we can mark the interrupt handler for pci (but not sbus)
attached gem(4) as mpsafe.

mpi@@ wrote this initially, I fixed bugs to keep sparc64 happy and kept it up
to date with ifq changes.

ok mpi@@ dlg@@
@
text
@/*	$OpenBSD: gemvar.h,v 1.30 2015/09/10 12:49:55 stsp Exp $	*/
/*	$NetBSD: gemvar.h,v 1.1 2001/09/16 00:11:43 eeh Exp $ */

/*
 *
 * Copyright (C) 2001 Eduardo Horvath.
 * All rights reserved.
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR  ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR  BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef	_IF_GEMVAR_H
#define	_IF_GEMVAR_H

#include <sys/queue.h>
#include <sys/timeout.h>

/*
 * Misc. definitions for the Sun ``Gem'' Ethernet controller family driver.
 */

/*
 * Transmit descriptor list size.  This is arbitrary, but allocate
 * enough descriptors for 64 pending transmissions and 16 segments
 * per packet.
 */
#define	GEM_NTXSEGS		16

#define	GEM_TXQUEUELEN		64
#define	GEM_NTXDESC		(GEM_TXQUEUELEN * GEM_NTXSEGS)
#define	GEM_NTXDESC_MASK	(GEM_NTXDESC - 1)
#define	GEM_NEXTTX(x)		((x + 1) & GEM_NTXDESC_MASK)

struct gem_sxd {
	struct mbuf *sd_mbuf;
	bus_dmamap_t sd_map;
};

/*
 * Receive descriptor list size.  We have one Rx buffer per incoming
 * packet, so this logic is a little simpler.
 */
#define	GEM_NRXDESC		128
#define	GEM_NRXDESC_MASK	(GEM_NRXDESC - 1)
#define	GEM_NEXTRX(x)		((x + 1) & GEM_NRXDESC_MASK)

/*
 * Control structures are DMA'd to the GEM chip.  We allocate them in
 * a single clump that maps to a single DMA segment to make several things
 * easier.
 */
struct gem_control_data {
	/*
	 * The transmit descriptors.
	 */
	struct gem_desc gcd_txdescs[GEM_NTXDESC];

	/*
	 * The receive descriptors.
	 */
	struct gem_desc gcd_rxdescs[GEM_NRXDESC];
};

#define	GEM_CDOFF(x)		offsetof(struct gem_control_data, x)
#define	GEM_CDTXOFF(x)		GEM_CDOFF(gcd_txdescs[(x)])
#define	GEM_CDRXOFF(x)		GEM_CDOFF(gcd_rxdescs[(x)])

/*
 * Software state for receive jobs.
 */
struct gem_rxsoft {
	struct mbuf *rxs_mbuf;		/* head of our mbuf chain */
	bus_dmamap_t rxs_dmamap;	/* our DMA map */
};


/*
 * Table which describes the transmit threshold mode.  We generally
 * start at index 0.  Whenever we get a transmit underrun, we increment
 * our index, falling back if we encounter the NULL terminator.
 */
struct gem_txthresh_tab {
	u_int32_t txth_opmode;		/* OPMODE bits */
	const char *txth_name;		/* name of mode */
};

/*
 * Some misc. statics, useful for debugging.
 */
struct gem_stats {
	u_long		ts_tx_uf;	/* transmit underflow errors */
	u_long		ts_tx_to;	/* transmit jabber timeouts */
	u_long		ts_tx_ec;	/* excessive collision count */
	u_long		ts_tx_lc;	/* late collision count */
};

/*
 * Software state per device.
 */
struct gem_softc {
	struct device	sc_dev;		/* generic device information */
	struct arpcom	sc_arpcom;	/* ethernet common data */
	struct mii_data	sc_mii;		/* MII media control */
#define sc_media	sc_mii.mii_media/* shorthand */
	struct timeout	sc_tick_ch;	/* tick callout */
	void		*sc_ih;		/* interrupt handler */

	/* The following bus handles are to be provided by the bus front-end */
	bus_space_tag_t	sc_bustag;	/* bus tag */
	bus_dma_tag_t	sc_dmatag;	/* bus dma tag */
	bus_dmamap_t	sc_dmamap;	/* bus dma handle */
	bus_space_handle_t sc_h1;	/* bus space handle for bank 1 regs */
	bus_space_handle_t sc_h2;	/* bus space handle for bank 2 regs */
#if 0
	/* The following may be needed for SBus */
	bus_space_handle_t sc_seb;	/* HME Global registers */
	bus_space_handle_t sc_erx;	/* HME ERX registers */
	bus_space_handle_t sc_etx;	/* HME ETX registers */
	bus_space_handle_t sc_mac;	/* HME MAC registers */
	bus_space_handle_t sc_mif;	/* HME MIF registers */
#endif
	int		sc_burst;	/* DVMA burst size in effect */

	int		sc_mif_config;	/* Selected MII reg setting */

	int		sc_pci;		/* XXXXX -- PCI buses are LE. */
	u_int		sc_variant;	/* which GEM are we dealing with? */
#define GEM_UNKNOWN			0	/* don't know */
#define GEM_SUN_GEM			1	/* Sun GEM */
#define GEM_SUN_ERI			2	/* Sun ERI */
#define GEM_APPLE_GMAC			3	/* Apple GMAC */
#define GEM_APPLE_K2_GMAC		4	/* Apple K2 GMAC */

#define	GEM_IS_APPLE(sc)						\
	((sc)->sc_variant == GEM_APPLE_GMAC ||				\
	 (sc)->sc_variant == GEM_APPLE_K2_GMAC)

	u_int		sc_flags;	/* */
#define	GEM_GIGABIT		0x0001	/* has a gigabit PHY */


	struct gem_stats sc_stats;	/* debugging stats */

	/*
	 * Ring buffer DMA stuff.
	 */
	bus_dma_segment_t sc_cdseg;	/* control data memory */
	int		sc_cdnseg;	/* number of segments */
	bus_dmamap_t sc_cddmamap;	/* control data DMA map */
#define	sc_cddma	sc_cddmamap->dm_segs[0].ds_addr

	/*
	 * Software state for transmit and receive descriptors.
	 */
	struct gem_sxd sc_txd[GEM_NTXDESC];
	u_int32_t sc_tx_cnt, sc_tx_prod, sc_tx_cons;

	struct gem_rxsoft sc_rxsoft[GEM_NRXDESC];
	struct if_rxring sc_rx_ring;
	u_int32_t sc_rx_prod, sc_rx_cons;

	/*
	 * Control data structures.
	 */
	struct gem_control_data *sc_control_data;
#define	sc_txdescs	sc_control_data->gcd_txdescs
#define	sc_rxdescs	sc_control_data->gcd_rxdescs

	int			sc_txfree;		/* number of free Tx descriptors */
	int			sc_txnext;		/* next ready Tx descriptor */

	u_int32_t		sc_tdctl_ch;		/* conditional desc chaining */
	u_int32_t		sc_tdctl_er;		/* conditional desc end-of-ring */

	u_int32_t		sc_setup_fsls;	/* FS|LS on setup descriptor */

	int			sc_rxfifosize;

	u_int32_t		sc_rx_fifo_wr_ptr;
	u_int32_t		sc_rx_fifo_rd_ptr;
	struct timeout		sc_rx_watchdog;

	/* ========== */
	int			sc_inited;
	int			sc_debug;

	/* Special hardware hooks */
	void	(*sc_hwreset)(struct gem_softc *);
	void	(*sc_hwinit)(struct gem_softc *);
};

#define	GEM_DMA_READ(_sc, _a) \
	(((_sc)->sc_pci) ? lemtoh64(_a) : bemtoh64(_a))
#define	GEM_DMA_WRITE(_sc, _a, _v) \
	(((_sc)->sc_pci) ? htolem64((_a), (_v)) : htobem64((_a), (_v)))

/*
 * This macro determines if a change to media-related OPMODE bits requires
 * a chip reset.
 */
#define	GEM_MEDIA_NEEDSRESET(sc, newbits)				\
	(((sc)->sc_opmode & OPMODE_MEDIA_BITS) !=			\
	 ((newbits) & OPMODE_MEDIA_BITS))

#define	GEM_CDTXADDR(sc, x)	((sc)->sc_cddma + GEM_CDTXOFF((x)))
#define	GEM_CDRXADDR(sc, x)	((sc)->sc_cddma + GEM_CDRXOFF((x)))

#define	GEM_CDSPADDR(sc)	((sc)->sc_cddma + GEM_CDSPOFF)

#define	GEM_CDTXSYNC(sc, x, n, ops)					\
do {									\
	int __x, __n;							\
									\
	__x = (x);							\
	__n = (n);							\
									\
	/* If it will wrap around, sync to the end of the ring. */	\
	if ((__x + __n) > GEM_NTXDESC) {				\
		bus_dmamap_sync((sc)->sc_dmatag, (sc)->sc_cddmamap,	\
		    GEM_CDTXOFF(__x), sizeof(struct gem_desc) *		\
		    (GEM_NTXDESC - __x), (ops));			\
		__n -= (GEM_NTXDESC - __x);				\
		__x = 0;						\
	}								\
									\
	/* Now sync whatever is left. */				\
	bus_dmamap_sync((sc)->sc_dmatag, (sc)->sc_cddmamap,		\
	    GEM_CDTXOFF(__x), sizeof(struct gem_desc) * __n, (ops));	\
} while (0)

#define	GEM_CDRXSYNC(sc, x, ops)					\
	bus_dmamap_sync((sc)->sc_dmatag, (sc)->sc_cddmamap,		\
	    GEM_CDRXOFF((x)), sizeof(struct gem_desc), (ops))

#define	GEM_CDSPSYNC(sc, ops)						\
	bus_dmamap_sync((sc)->sc_dmatag, (sc)->sc_cddmamap,		\
	    GEM_CDSPOFF, GEM_SETUP_PACKET_LEN, (ops))

#define	GEM_INIT_RXDESC(sc, x)						\
do {									\
	struct gem_rxsoft *__rxs = &sc->sc_rxsoft[(x)];			\
	struct gem_desc *__rxd = &sc->sc_rxdescs[(x)];			\
	struct mbuf *__m = __rxs->rxs_mbuf;				\
									\
	GEM_DMA_WRITE((sc), &__rxd->gd_addr,				\
	    __rxs->rxs_dmamap->dm_segs[0].ds_addr);			\
	GEM_DMA_WRITE((sc), &__rxd->gd_flags,				\
		(((__m->m_ext.ext_size)<<GEM_RD_BUFSHIFT)		\
	    & GEM_RD_BUFSIZE) | GEM_RD_OWN);				\
	GEM_CDRXSYNC((sc), (x), BUS_DMASYNC_PREREAD|BUS_DMASYNC_PREWRITE); \
} while (0)

#ifdef _KERNEL
void	gem_attach(struct gem_softc *, const u_int8_t *);
int	gem_activate(struct device *, int);
int	gem_detach(struct gem_softc *);
int	gem_intr(void *);
int	gem_read_srom(struct gem_softc *);
int	gem_srom_crcok(const u_int8_t *);
int	gem_isv_srom(const u_int8_t *);
int	gem_isv_srom_enaddr(struct gem_softc *, u_int8_t *);
int	gem_parse_old_srom(struct gem_softc *, u_int8_t *);

int	gem_mediachange(struct ifnet *);
void	gem_mediastatus(struct ifnet *, struct ifmediareq *);

void	gem_config(struct gem_softc *);
void	gem_unconfig(struct gem_softc *);
void	gem_reset(struct gem_softc *);
int	gem_intr(void *);
#endif /* _KERNEL */

#endif
@


1.30
log
@remove unused macro GEM_CURRENT_MEDIA; ok dlg@@ mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.29 2014/07/08 05:35:18 dlg Exp $	*/
d127 1
@


1.29
log
@cut things that relied on mclgeti for rx ring accounting/restriction over
to using if_rxr.

cut the reporting systat did over to the rxr ioctl.

tested as much as i can on alpha, amd64, and sparc64.
mpi@@ has run it on macppc.
ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.28 2014/03/14 11:04:24 dlg Exp $	*/
a215 7

/*
 * This macro returns the current media entry for *non-MII* media.
 */
#define	GEM_CURRENT_MEDIA(sc)						\
	(IFM_SUBTYPE((sc)->sc_mii.mii_media.ifm_cur->ifm_media) != IFM_AUTO ? \
	 (sc)->sc_mii.mii_media.ifm_cur : (sc)->sc_nway_active)
@


1.28
log
@use lemtoh64 and htolem64 for reading and writing entries in the rings.

tested on sparc64 and powerpc with and without the MI backends for the
lem ops enabled.
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.27 2013/03/09 17:57:00 mpi Exp $	*/
d179 2
a180 1
	u_int32_t sc_rx_cnt, sc_rx_prod, sc_rx_cons;
@


1.27
log
@Always use the internal PHY on Apple variants, from FreeBSD. This unbreaks
gem(4) on some PowerMac G5.

tested by kirby@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.26 2010/09/20 07:40:41 deraadt Exp $	*/
d211 4
a214 2
#define	GEM_DMA_READ(sc, v)	(((sc)->sc_pci) ? letoh64(v) : betoh64(v))
#define	GEM_DMA_WRITE(sc, v)	(((sc)->sc_pci) ? htole64(v) : htobe64(v))
d271 3
a273 4
	__rxd->gd_addr =						\
	    GEM_DMA_WRITE((sc), __rxs->rxs_dmamap->dm_segs[0].ds_addr);	\
	__rxd->gd_flags =						\
	    GEM_DMA_WRITE((sc),						\
@


1.26
log
@Stop doing shutdown hooks in network drivers where possible.  We already
take all interfaces down, via their xxstop routines.  Claudio and I have
verified that none of the shutdown hooks do much extra beyond what xxstop
was already doing; it is largely a pile of junk.
ok claudio, some early comments by sthen; also read by matthew, jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.25 2010/08/27 08:05:01 deraadt Exp $	*/
d153 4
@


1.25
log
@gem never had any powerhook support
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.24 2009/10/15 17:54:54 deraadt Exp $	*/
a200 1
	void			*sc_sh;		/* shutdownhook cookie */
@


1.24
log
@Add detach support to a few more drivers, and in others do the neccessary
operations in the detach function in the right order.  Also ensure that the
interrupt handlers not trust registers that go away.
read over very carefully by dms, tested by me
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.23 2009/10/13 19:33:16 pirofti Exp $	*/
a156 2

	void *sc_powerhook;		/* power management hook */
@


1.23
log
@Get rid of devact enum, substitute it with an int and coresponding defines.

This is needed for the addition of further suspend/resume actions.

Okay deraadt@@, marco@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.22 2009/08/10 20:29:54 deraadt Exp $	*/
d292 1
@


1.22
log
@More cases of shutdown hooks not needed after card is already stopped.  In
these cases the xxstop function is a bit more complicated and has a flag of
some sort, but the use of that flag does not matter;  DMA is already ceased
ok dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.21 2009/03/22 21:46:31 kettenis Exp $	*/
d279 1
a279 1
int	gem_activate(struct device *, enum devact);
@


1.21
log
@Add workaround for RX MAC/FIFO hangs on ERI.  Tested by matthieu@@ and naddy@@.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.20 2008/12/14 21:31:50 kettenis Exp $	*/
a157 1
	void *sc_sdhook;		/* shutdown hook */
@


1.20
log
@Switch gem(4) over to using MCLGETI when allocating mbufs for the rx ring.

help from dlg@@, tested by a few, ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.19 2008/11/07 18:03:52 brad Exp $	*/
d196 4
@


1.19
log
@Simplify the interface flag handling in the ioctl handler.
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.18 2008/08/30 07:41:51 brad Exp $	*/
d178 1
a194 1
	int			sc_rxptr;		/* next ready RX descriptor/descsoft */
a264 1
	__m->m_data = __m->m_ext.ext_buf;				\
@


1.18
log
@garbage collect the no longer used GEM_IS_APPLE macro.
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.17 2007/04/19 19:00:01 kettenis Exp $	*/
a142 2

	int		sc_if_flags;
@


1.17
log
@Cleanup phy selection code, simplifying the code considerably.  Attach only
one phy on Sun ERI; gets rid of the duplicate phy on the blade1k.

tested by many, ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.16 2006/12/21 22:13:36 jason Exp $	*/
a276 4
#define GEM_IS_APPLE(sc)	\
    ((sc)->sc_variant >= GEM_APPLE_INTREPID2_GMAC &&	\
    (sc)->sc_variant <= GEM_APPLE_UNINORTH2GMAC)

a294 1

@


1.16
log
@betetr yet, just nuke sc_enaddr all together, just fill in arpcom and
everybody is happy
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.15 2006/11/25 02:12:04 brad Exp $	*/
a142 1
	int		sc_phys[2];	/* MII instance -> PHY map */
a146 1
	u_int		sc_tcvr;
d153 1
a153 1
#define GEM_APPLE_INTREPID2_GMAC	3	/* Apple Intrepid 2 GMAC */
a154 4
#define GEM_APPLE_PANGEA_GMAC		5	/* Apple Pangea GMAC */
#define GEM_APPLE_SHASTA_GMAC		6	/* Apple Shasta GMAC */
#define GEM_APPLE_UNINORTHGMAC		7	/* Apple UniNorth GMAC */
#define GEM_APPLE_UNINORTH2GMAC		8	/* Apple UniNorth 2 GMAC */
@


1.15
log
@Split the GEM registers into two halfs and provide a bus_space_handle_t
for each. While there, fix a typo in gem_bitwait().

From martin@@NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.14 2006/04/10 07:22:42 brad Exp $	*/
a208 1
	u_int8_t		sc_enaddr[ETHER_ADDR_LEN]; /* MAC address */
@


1.14
log
@fix the macro so gem recognizes the Intrepid 2 GMAC.
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.13 2006/04/10 07:17:57 brad Exp $	*/
d132 2
a133 1
	bus_space_handle_t sc_h;	/* bus space handle for all regs */
@


1.13
log
@recognize the Intrepid 2 GMAC
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.12 2006/02/05 00:25:06 brad Exp $	*/
d284 2
a285 1
    ((sc)->sc_variant >= GEM_APPLE_K2_GMAC && (sc)->sc_variant <= GEM_APPLE_UNINORTH2GMAC)
@


1.12
log
@and the softc addition too.
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.11 2005/10/17 03:03:24 brad Exp $	*/
d151 9
a159 8
#define GEM_UNKNOWN		0	/* don't know */
#define GEM_SUN_GEM		1	/* Sun GEM variant */
#define GEM_SUN_ERI		2	/* Sun ERI variant */
#define GEM_APPLE_K2_GMAC	3	/* Apple K2 GMAC variant */
#define GEM_APPLE_PANGEA_GMAC	4	/* Apple Pangea GMAC variant */
#define GEM_APPLE_SHASTA_GMAC	5	/* Apple Shasta GMAC variant */
#define GEM_APPLE_UNINORTHGMAC	6	/* Apple UniNorth GMAC variant */
#define GEM_APPLE_UNINORTH2GMAC	7	/* Apple UniNorth 2 GMAC variant */
@


1.11
log
@Start using the unused sc_variant to identify the GMAC vendor and chipset
model to the MI part of the driver. On Apple systems only attach the PHY to
location 0, unless using a K2 GMAC, then use location 1.

Tested by drahn@@ and kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.10 2005/08/01 05:45:03 brad Exp $	*/
d143 2
@


1.10
log
@remove whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.9 2003/10/21 18:58:49 jmc Exp $	*/
d145 1
d149 8
a156 3
#define	GEM_UNKNOWN		0	/* don't know */
#define	GEM_SUN_GEM		1	/* Sun GEM variant */
#define	GEM_APPLE_GMAC		2	/* Apple GMAC variant */
d279 3
@


1.9
log
@typos from Tom Cosgrove;

Tom: I did not commit a couple of your changes.

i did not include some punctuation fixes (full stops, etc.)
mnemorable -> mnemonic: i decided memorable was probably better
instrunctions -> instruction: i kept the plural
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.8 2002/06/07 23:44:05 drahn Exp $	*/
d5 1
a5 1
 * 
d18 1
a18 1
 *  
d40 1
a40 1
 * Misc. definitions for the Sun ``Gem'' Ethernet controller family driver.  
d46 1
a46 1
 * per packet.  
@


1.8
log
@Multicast fixes, Gig-E support, mostly from netbsd. ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.7 2002/03/14 01:26:54 millert Exp $	*/
d114 1
a114 1
	u_long		ts_tx_ec;	/* excessve collision count */
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.6 2002/02/22 20:15:28 jason Exp $	*/
d147 8
d193 1
@


1.6
log
@Revert to previous (non hacked =) version now that the iommu is handled
correctly and it doesn't crash
@
text
@d1 1
a1 1
/*	$OpenBSD: gemvar.h,v 1.4 2001/12/14 02:43:55 drahn Exp $	*/
d193 2
a194 2
	void	(*sc_hwreset) __P((struct gem_softc *));
	void	(*sc_hwinit) __P((struct gem_softc *));
d266 16
a281 16
void	gem_attach __P((struct gem_softc *, const u_int8_t *));
int	gem_activate __P((struct device *, enum devact));
int	gem_detach __P((struct gem_softc *));
int	gem_intr __P((void *));
int	gem_read_srom __P((struct gem_softc *));
int	gem_srom_crcok __P((const u_int8_t *));
int	gem_isv_srom __P((const u_int8_t *));
int	gem_isv_srom_enaddr __P((struct gem_softc *, u_int8_t *));
int	gem_parse_old_srom __P((struct gem_softc *, u_int8_t *));

int	gem_mediachange __P((struct ifnet *));
void	gem_mediastatus __P((struct ifnet *, struct ifmediareq *));

void	gem_config __P((struct gem_softc *));
void	gem_reset __P((struct gem_softc *));
int	gem_intr __P((void *));
@


1.5
log
@Re-port the NetBSD driver, but rewrite tx logic to use static buffers (and
copies).  This makes the Blade100 gem stable for me.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: gemvar.h,v 1.4 2001/10/18 15:09:15 thorpej Exp $ */
a35 1

a38 4
#if NRND > 0
#include <sys/rnd.h>
#endif

d50 1
a50 1
#define	GEM_TXQUEUELEN		8
d55 5
a82 2

	u_int8_t gcd_txbufs[GEM_NTXDESC][MCLBYTES];
d90 1
a90 1
 * Software state for transmit jobs.
d92 3
a94 7
struct gem_txsoft {
	struct mbuf *txs_mbuf;		/* head of our mbuf chain */
	bus_dmamap_t txs_dmamap;	/* our DMA map */
	int txs_firstdesc;		/* first descriptor in packet */
	int txs_lastdesc;		/* last descriptor in packet */
	int txs_ndescs;			/* number of descriptors */
	SIMPLEQ_ENTRY(gem_txsoft) txs_q;
a96 1
SIMPLEQ_HEAD(gem_txsq, gem_txsoft);
d99 11
a109 1
 * Software state for receive jobs.
d111 5
a115 3
struct gem_rxsoft {
	struct mbuf *rxs_mbuf;		/* head of our mbuf chain */
	bus_dmamap_t rxs_dmamap;	/* our DMA map */
d123 1
a123 1
	struct arpcom sc_arpcom;	/* ethernet common data */
d133 9
a141 1

d151 2
d164 3
a166 1
	struct gem_txsoft sc_txsoft[GEM_TXQUEUELEN];
a168 2
	u_int32_t	sc_tx_prod, sc_tx_cons, sc_tx_cnt;

d176 9
a184 1
	int		sc_rxptr;	/* next ready RX descriptor/descsoft */
d187 4
a190 3
	int		sc_inited;
	int		sc_debug;
	void		*sc_sh;		/* shutdownhook cookie */
a194 4

#if NRND > 0
	rndsource_element_t	rnd_source;
#endif
a196 1

d200 15
d260 2
a261 2
			(((__m->m_ext.ext_size)<<GEM_RD_BUFSHIFT)	\
				& GEM_RD_BUFSIZE) | GEM_RD_OWN);	\
d266 3
a268 1
void	gem_attach __P((struct gem_softc *, uint8_t *));
d270 5
d276 4
d281 1
@


1.4
log
@$OpenBSD$
@
text
@d2 1
a2 1
/*	$NetBSD: gemvar.h,v 1.1 2001/09/16 00:11:43 eeh Exp $ */
d36 1
d40 4
d55 1
a55 1
#define	GEM_TXQUEUELEN		64
a59 5
struct gem_sxd {
	struct mbuf *sd_mbuf;
	bus_dmamap_t sd_map;
};

d83 2
d92 1
a92 1
 * Software state for receive jobs.
d94 7
a100 3
struct gem_rxsoft {
	struct mbuf *rxs_mbuf;		/* head of our mbuf chain */
	bus_dmamap_t rxs_dmamap;	/* our DMA map */
d103 1
d106 1
a106 3
 * Table which describes the transmit threshold mode.  We generally
 * start at index 0.  Whenever we get a transmit underrun, we increment
 * our index, falling back if we encounter the NULL terminator.
d108 3
a110 13
struct gem_txthresh_tab {
	u_int32_t txth_opmode;		/* OPMODE bits */
	const char *txth_name;		/* name of mode */
};

/*
 * Some misc. statics, useful for debugging.
 */
struct gem_stats {
	u_long		ts_tx_uf;	/* transmit underflow errors */
	u_long		ts_tx_to;	/* transmit jabber timeouts */
	u_long		ts_tx_ec;	/* excessve collision count */
	u_long		ts_tx_lc;	/* late collision count */
d118 1
a118 1
	struct arpcom	sc_arpcom;	/* ethernet common data */
d128 1
a128 9
#if 0
	/* The following may be needed for SBus */
	bus_space_handle_t sc_seb;	/* HME Global registers */
	bus_space_handle_t sc_erx;	/* HME ERX registers */
	bus_space_handle_t sc_etx;	/* HME ETX registers */
	bus_space_handle_t sc_mac;	/* HME MAC registers */
	bus_space_handle_t sc_mif;	/* HME MIF registers */
#endif
	int		sc_burst;	/* DVMA burst size in effect */
a137 2
	struct gem_stats sc_stats;	/* debugging stats */

d149 2
a150 2
	struct gem_sxd sc_txd[GEM_NTXDESC];
	u_int32_t sc_tx_cnt, sc_tx_prod, sc_tx_cons;
d152 1
a152 1
	struct gem_rxsoft sc_rxsoft[GEM_NRXDESC];
d161 1
a161 9
	int			sc_txfree;		/* number of free Tx descriptors */
	int			sc_txnext;		/* next ready Tx descriptor */

	u_int32_t		sc_tdctl_ch;		/* conditional desc chaining */
	u_int32_t		sc_tdctl_er;		/* conditional desc end-of-ring */

	u_int32_t		sc_setup_fsls;	/* FS|LS on setup descriptor */

	int			sc_rxptr;		/* next ready RX descriptor/descsoft */
d164 3
a166 4
	int			sc_inited;
	int			sc_debug;
	void			*sc_sh;		/* shutdownhook cookie */
	u_int8_t		sc_enaddr[ETHER_ADDR_LEN]; /* MAC address */
d171 4
d177 1
a180 15
/*
 * This macro returns the current media entry for *non-MII* media.
 */
#define	GEM_CURRENT_MEDIA(sc)						\
	(IFM_SUBTYPE((sc)->sc_mii.mii_media.ifm_cur->ifm_media) != IFM_AUTO ? \
	 (sc)->sc_mii.mii_media.ifm_cur : (sc)->sc_nway_active)

/*
 * This macro determines if a change to media-related OPMODE bits requires
 * a chip reset.
 */
#define	GEM_MEDIA_NEEDSRESET(sc, newbits)				\
	(((sc)->sc_opmode & OPMODE_MEDIA_BITS) !=			\
	 ((newbits) & OPMODE_MEDIA_BITS))

d226 2
a227 2
		(((__m->m_ext.ext_size)<<GEM_RD_BUFSHIFT)		\
	    & GEM_RD_BUFSIZE) | GEM_RD_OWN);				\
d232 1
a232 3
void	gem_attach __P((struct gem_softc *, const u_int8_t *));
int	gem_activate __P((struct device *, enum devact));
int	gem_detach __P((struct gem_softc *));
a233 5
int	gem_read_srom __P((struct gem_softc *));
int	gem_srom_crcok __P((const u_int8_t *));
int	gem_isv_srom __P((const u_int8_t *));
int	gem_isv_srom_enaddr __P((struct gem_softc *, u_int8_t *));
int	gem_parse_old_srom __P((struct gem_softc *, u_int8_t *));
a234 4
int	gem_mediachange __P((struct ifnet *));
void	gem_mediastatus __P((struct ifnet *, struct ifmediareq *));

void	gem_config __P((struct gem_softc *));
a235 1
int	gem_intr __P((void *));
@


1.4.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 2
a2 2
/*	$OpenBSD: gemvar.h,v 1.5 2002/01/28 01:04:02 jason Exp $	*/
/*	$NetBSD: gemvar.h,v 1.4 2001/10/18 15:09:15 thorpej Exp $ */
a35 1

a38 4
#if NRND > 0
#include <sys/rnd.h>
#endif

d50 1
a50 1
#define	GEM_TXQUEUELEN		8
d55 5
a82 2

	u_int8_t gcd_txbufs[GEM_NTXDESC][MCLBYTES];
d90 1
a90 1
 * Software state for transmit jobs.
d92 3
a94 7
struct gem_txsoft {
	struct mbuf *txs_mbuf;		/* head of our mbuf chain */
	bus_dmamap_t txs_dmamap;	/* our DMA map */
	int txs_firstdesc;		/* first descriptor in packet */
	int txs_lastdesc;		/* last descriptor in packet */
	int txs_ndescs;			/* number of descriptors */
	SIMPLEQ_ENTRY(gem_txsoft) txs_q;
a96 1
SIMPLEQ_HEAD(gem_txsq, gem_txsoft);
d99 11
a109 1
 * Software state for receive jobs.
d111 5
a115 3
struct gem_rxsoft {
	struct mbuf *rxs_mbuf;		/* head of our mbuf chain */
	bus_dmamap_t rxs_dmamap;	/* our DMA map */
d123 1
a123 1
	struct arpcom sc_arpcom;	/* ethernet common data */
d133 9
a141 1

d151 2
d164 3
a166 1
	struct gem_txsoft sc_txsoft[GEM_TXQUEUELEN];
a168 2
	u_int32_t	sc_tx_prod, sc_tx_cons, sc_tx_cnt;

d176 9
a184 1
	int		sc_rxptr;	/* next ready RX descriptor/descsoft */
d187 4
a190 3
	int		sc_inited;
	int		sc_debug;
	void		*sc_sh;		/* shutdownhook cookie */
a194 4

#if NRND > 0
	rndsource_element_t	rnd_source;
#endif
a196 1

d200 15
d260 2
a261 2
			(((__m->m_ext.ext_size)<<GEM_RD_BUFSHIFT)	\
				& GEM_RD_BUFSIZE) | GEM_RD_OWN);	\
d266 3
a268 1
void	gem_attach __P((struct gem_softc *, uint8_t *));
d270 5
d276 4
d281 1
@


1.4.2.2
log
@Sync UBC branch to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: gemvar.h,v 1.1 2001/09/16 00:11:43 eeh Exp $ */
d36 1
d40 4
d55 1
a55 1
#define	GEM_TXQUEUELEN		64
a59 5
struct gem_sxd {
	struct mbuf *sd_mbuf;
	bus_dmamap_t sd_map;
};

d83 2
d92 1
a92 1
 * Software state for receive jobs.
d94 7
a100 3
struct gem_rxsoft {
	struct mbuf *rxs_mbuf;		/* head of our mbuf chain */
	bus_dmamap_t rxs_dmamap;	/* our DMA map */
d103 1
d106 1
a106 3
 * Table which describes the transmit threshold mode.  We generally
 * start at index 0.  Whenever we get a transmit underrun, we increment
 * our index, falling back if we encounter the NULL terminator.
d108 3
a110 13
struct gem_txthresh_tab {
	u_int32_t txth_opmode;		/* OPMODE bits */
	const char *txth_name;		/* name of mode */
};

/*
 * Some misc. statics, useful for debugging.
 */
struct gem_stats {
	u_long		ts_tx_uf;	/* transmit underflow errors */
	u_long		ts_tx_to;	/* transmit jabber timeouts */
	u_long		ts_tx_ec;	/* excessve collision count */
	u_long		ts_tx_lc;	/* late collision count */
d118 1
a118 1
	struct arpcom	sc_arpcom;	/* ethernet common data */
d128 1
a128 9
#if 0
	/* The following may be needed for SBus */
	bus_space_handle_t sc_seb;	/* HME Global registers */
	bus_space_handle_t sc_erx;	/* HME ERX registers */
	bus_space_handle_t sc_etx;	/* HME ETX registers */
	bus_space_handle_t sc_mac;	/* HME MAC registers */
	bus_space_handle_t sc_mif;	/* HME MIF registers */
#endif
	int		sc_burst;	/* DVMA burst size in effect */
a133 8
	u_int		sc_variant;	/* which GEM are we dealing with? */
#define	GEM_UNKNOWN		0	/* don't know */
#define	GEM_SUN_GEM		1	/* Sun GEM variant */
#define	GEM_APPLE_GMAC		2	/* Apple GMAC variant */

	u_int		sc_flags;	/* */
#define	GEM_GIGABIT		0x0001	/* has a gigabit PHY */

a137 2
	struct gem_stats sc_stats;	/* debugging stats */

d149 2
a150 2
	struct gem_sxd sc_txd[GEM_NTXDESC];
	u_int32_t sc_tx_cnt, sc_tx_prod, sc_tx_cons;
d152 1
a152 1
	struct gem_rxsoft sc_rxsoft[GEM_NRXDESC];
d161 1
a161 10
	int			sc_txfree;		/* number of free Tx descriptors */
	int			sc_txnext;		/* next ready Tx descriptor */

	u_int32_t		sc_tdctl_ch;		/* conditional desc chaining */
	u_int32_t		sc_tdctl_er;		/* conditional desc end-of-ring */

	u_int32_t		sc_setup_fsls;	/* FS|LS on setup descriptor */

	int			sc_rxptr;		/* next ready RX descriptor/descsoft */
	int			sc_rxfifosize;
d164 3
a166 4
	int			sc_inited;
	int			sc_debug;
	void			*sc_sh;		/* shutdownhook cookie */
	u_int8_t		sc_enaddr[ETHER_ADDR_LEN]; /* MAC address */
d169 6
a174 2
	void	(*sc_hwreset)(struct gem_softc *);
	void	(*sc_hwinit)(struct gem_softc *);
d177 1
a180 15
/*
 * This macro returns the current media entry for *non-MII* media.
 */
#define	GEM_CURRENT_MEDIA(sc)						\
	(IFM_SUBTYPE((sc)->sc_mii.mii_media.ifm_cur->ifm_media) != IFM_AUTO ? \
	 (sc)->sc_mii.mii_media.ifm_cur : (sc)->sc_nway_active)

/*
 * This macro determines if a change to media-related OPMODE bits requires
 * a chip reset.
 */
#define	GEM_MEDIA_NEEDSRESET(sc, newbits)				\
	(((sc)->sc_opmode & OPMODE_MEDIA_BITS) !=			\
	 ((newbits) & OPMODE_MEDIA_BITS))

d226 2
a227 2
		(((__m->m_ext.ext_size)<<GEM_RD_BUFSHIFT)		\
	    & GEM_RD_BUFSIZE) | GEM_RD_OWN);				\
d232 4
a235 16
void	gem_attach(struct gem_softc *, const u_int8_t *);
int	gem_activate(struct device *, enum devact);
int	gem_detach(struct gem_softc *);
int	gem_intr(void *);
int	gem_read_srom(struct gem_softc *);
int	gem_srom_crcok(const u_int8_t *);
int	gem_isv_srom(const u_int8_t *);
int	gem_isv_srom_enaddr(struct gem_softc *, u_int8_t *);
int	gem_parse_old_srom(struct gem_softc *, u_int8_t *);

int	gem_mediachange(struct ifnet *);
void	gem_mediastatus(struct ifnet *, struct ifmediareq *);

void	gem_config(struct gem_softc *);
void	gem_reset(struct gem_softc *);
int	gem_intr(void *);
@


1.3
log
@Rewrite transmit handling (looks something more like hme), also takes advantage
of some register shadowing provided by the asic.
[This still isn't optimal, but it's getting closer...]
Move all of the stat stuff out of the interrupt context and into the timeout.
@
text
@d1 1
@


1.3.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.3.4.2
log
@Merge in trunk
@
text
@a0 1
/*	$OpenBSD$	*/
@


1.3.4.3
log
@Merge in -current from about a week ago
@
text
@d193 2
a194 2
	void	(*sc_hwreset)(struct gem_softc *);
	void	(*sc_hwinit)(struct gem_softc *);
d266 16
a281 16
void	gem_attach(struct gem_softc *, const u_int8_t *);
int	gem_activate(struct device *, enum devact);
int	gem_detach(struct gem_softc *);
int	gem_intr(void *);
int	gem_read_srom(struct gem_softc *);
int	gem_srom_crcok(const u_int8_t *);
int	gem_isv_srom(const u_int8_t *);
int	gem_isv_srom_enaddr(struct gem_softc *, u_int8_t *);
int	gem_parse_old_srom(struct gem_softc *, u_int8_t *);

int	gem_mediachange(struct ifnet *);
void	gem_mediastatus(struct ifnet *, struct ifmediareq *);

void	gem_config(struct gem_softc *);
void	gem_reset(struct gem_softc *);
int	gem_intr(void *);
@


1.3.4.4
log
@Sync the SMP branch with 3.3
@
text
@a146 8
	u_int		sc_variant;	/* which GEM are we dealing with? */
#define	GEM_UNKNOWN		0	/* don't know */
#define	GEM_SUN_GEM		1	/* Sun GEM variant */
#define	GEM_APPLE_GMAC		2	/* Apple GMAC variant */

	u_int		sc_flags;	/* */
#define	GEM_GIGABIT		0x0001	/* has a gigabit PHY */

a184 1
	int			sc_rxfifosize;
@


1.3.4.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d114 1
a114 1
	u_long		ts_tx_ec;	/* excessive collision count */
@


1.2
log
@increase rx descriptors, remove some debugging code, deal with different endian; NetBSD
general cleanup; me.
@
text
@d54 5
a88 14
 * Software state for transmit jobs.
 */
struct gem_txsoft {
	struct mbuf *txs_mbuf;		/* head of our mbuf chain */
	bus_dmamap_t txs_dmamap;	/* our DMA map */
	int txs_firstdesc;		/* first descriptor in packet */
	int txs_lastdesc;		/* last descriptor in packet */
	int txs_ndescs;			/* number of descriptors */
	SIMPLEQ_ENTRY(gem_txsoft) txs_q;
};

SIMPLEQ_HEAD(gem_txsq, gem_txsoft);

/*
d163 3
a165 1
	struct gem_txsoft sc_txsoft[GEM_TXQUEUELEN];
a181 3

	struct gem_txsq		sc_txfreeq;	/* free Tx descsofts */
	struct gem_txsq		sc_txdirtyq;	/* dirty Tx descsofts */
@


1.1
log
@Driver for Sun GEM ethernet. Not ready yet.
From NetBSD
@
text
@d58 1
a58 1
#define	GEM_NRXDESC		64
a196 1
	int			sc_flags;
d206 2
a207 18
/* sc_flags */
#define	GEMF_WANT_SETUP		0x00000001	/* want filter setup */
#define	GEMF_DOING_SETUP	0x00000002	/* doing multicast setup */
#define	GEMF_HAS_MII		0x00000004	/* has media on MII */
#define	GEMF_IC_FS		0x00000008	/* IC bit on first tx seg */
#define	GEMF_MRL		0x00000010	/* memory read line okay */
#define	GEMF_MRM		0x00000020	/* memory read multi okay */
#define	GEMF_MWI		0x00000040	/* memory write inval okay */
#define	GEMF_AUTOPOLL		0x00000080	/* chip supports auto-poll */
#define	GEMF_LINK_UP		0x00000100	/* link is up (non-MII) */
#define	GEMF_LINK_VALID		0x00000200	/* link state valid */
#define	GEMF_DOINGAUTO		0x00000400	/* doing autoneg (non-MII) */
#define	GEMF_ATTACHED		0x00000800	/* attach has succeeded */
#define	GEMF_ENABLED		0x00001000	/* chip is enabled */
#define	GEMF_BLE		0x00002000	/* data is big endian */
#define	GEMF_DBO		0x00004000	/* descriptor is big endian */

#define	GEM_IS_ENABLED(sc)	((sc)->sc_flags & GEMF_ENABLED)
d266 1
a266 1
	    htole64(__rxs->rxs_dmamap->dm_segs[0].ds_addr);		\
d268 2
a269 1
	    htole64((((__m->m_ext.ext_size)<<GEM_RD_BUFSHIFT)		\
@

