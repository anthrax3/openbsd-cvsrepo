head	1.21;
access;
symbols
	OPENBSD_3_9:1.20.0.2
	OPENBSD_3_9_BASE:1.20
	OPENBSD_3_8:1.15.0.4
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.2
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	SMP:1.6.0.4
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6;
locks; strict;
comment	@ * @;


1.21
date	2006.06.29.22.14.41;	author dlg;	state dead;
branches;
next	1.20;

1.20
date	2006.02.04.19.05.00;	author marco;	state Exp;
branches;
next	1.19;

1.19
date	2005.12.03.04.00.08;	author marco;	state Exp;
branches;
next	1.18;

1.18
date	2005.12.01.02.15.21;	author krw;	state Exp;
branches;
next	1.17;

1.17
date	2005.11.16.04.31.32;	author marco;	state Exp;
branches;
next	1.16;

1.16
date	2005.11.06.01.42.23;	author dlg;	state Exp;
branches;
next	1.15;

1.15
date	2004.12.29.06.57.11;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2004.11.21.04.49.26;	author marco;	state Exp;
branches;
next	1.13;

1.13
date	2004.11.03.00.59.56;	author marco;	state Exp;
branches;
next	1.12;

1.12
date	2004.10.28.02.58.33;	author marco;	state Exp;
branches;
next	1.11;

1.11
date	2004.10.26.04.43.59;	author marco;	state Exp;
branches;
next	1.10;

1.10
date	2004.10.22.04.54.26;	author marco;	state Exp;
branches;
next	1.9;

1.9
date	2004.08.23.20.52.15;	author marco;	state Exp;
branches;
next	1.8;

1.8
date	2004.07.13.00.03.29;	author marco;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.12.23.57.14;	author marco;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.20.03.54.16;	author krw;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2004.03.19.02.47.36;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.17.00.47.06;	author krw;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.14.23.14.36;	author krw;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.07.05.08.16;	author krw;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.06.03.03.07;	author krw;	state Exp;
branches;
next	;

1.6.4.1
date	2004.06.05.23.12.43;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.21
log
@remove mpt. it has since been replaced with mpi, which is a smaller and
cleaner driver that supports more hardware.
@
text
@/*	$OpenBSD: mpt_openbsd.h,v 1.20 2006/02/04 19:05:00 marco Exp $	*/
/*	$NetBSD: mpt_netbsd.h,v 1.2 2003/04/16 23:02:14 thorpej Exp $	*/

/*
 * Copyright (c) 2004 Milos Urbanek
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Copyright (c) 2003 Wasabi Systems, Inc.
 * All rights reserved.
 *
 * Written by Jason R. Thorpe for Wasabi Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed for the NetBSD Project by
 *	Wasabi Systems, Inc.
 * 4. The name of Wasabi Systems, Inc. may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY WASABI SYSTEMS, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL WASABI SYSTEMS, INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 2000, 2001 by Greg Ansley, Adam Prewett
 *
 * Partially derived from Matt Jacobs ISP driver.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice immediately at the beginning of the file, without modification,
 *    this list of conditions, and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 */
/*
 * Additional Copyright (c) 2002 by Matthew Jacob under same license.
 */

/*
 * mpt_openbsd.h:
 *
 * OpenBSD-specific definitions for LSI Fusion adapters.
 *
 * Adapted from the NetBSD "mpt" driver by Milos Urbanek for
 * ZOOM International, s.r.o.
 */

#ifndef _DEV_IC_MPT_OPENBSD_H_
#define	_DEV_IC_MPT_OPENBSD_H_

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/device.h>
#include <sys/ioctl.h>
#include <sys/kernel.h>
#include <sys/timeout.h>
#include <sys/errno.h>
#include <sys/buf.h>
#include <sys/queue.h>

#include <uvm/uvm_extern.h>

#include <machine/bus.h>
#include <machine/intr.h>

#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>

#include <dev/ic/mpt_mpilib.h>

/*
 * macro to convert from milliseconds to hz without integer overflow
 * Default version using only 32bits arithmetics.
 * 64bit port can define 64bit version in their <machine/param.h>
 * 0x20000 is safe for hz < 20000
 */
#ifndef mstohz
#define mstohz(ms) \
	    (((ms +0u) / 1000u) * hz)
#endif

/* Max MPT Reply we are willing to accept (must be a power of 2). */
#define	MPT_REPLY_SIZE		128

#define	MPT_MAX_REQUESTS(mpt)	((mpt)->is_fc ? 1024 : 256)
#define	MPT_REQUEST_AREA	512
#define	MPT_SENSE_SIZE		32	/* included in MPT_REQUEST_AREA */
#define	MPT_REQ_MEM_SIZE(mpt)	(MPT_MAX_REQUESTS(mpt) * MPT_REQUEST_AREA)

/*
 * We cannot tell prior to getting IOC facts how big the IOC's request
 * area is. Because of this we cannot tell at compile time how many
 * simple SG elements we can fit within an IOC request prior to having
 * to put in a chain element.
 *
 * Experimentally we know that the Ultra4 parts have a 96 byte request
 * element size and the Fibre Channel units have a 144 byte request
 * element size. Therefore, if we have 512-32 (== 480) bytes of request
 * area to play with, we have room for between 3 and 5 request sized
 * regions- the first of which is the command  plus a simple SG list,
 * the rest of which are chained continuation SG lists. Given that the
 * normal request we use is 48 bytes w/o the first SG element, we can
 * assume we have 480-48 == 432 bytes to have simple SG elements and/or
 * chain elements. If we assume 32 bit addressing, this works out to
 * 54 SG or chain elements. If we assume 5 chain elements, then we have
 * a maximum of 49 seperate actual SG segments.
 */
#define	MPT_SGL_MAX		49

#define	MPT_RQSL(mpt)		((mpt)->request_frame_size << 2)
#define	MPT_NSGL(mpt)		(MPT_RQSL(mpt) / sizeof(SGE_SIMPLE32))

#define	MPT_NSGL_FIRST(mpt)					\
	((((mpt)->request_frame_size << 2) -			\
	  sizeof(MSG_SCSI_IO_REQUEST) -				\
	  sizeof(SGE_IO_UNION)) / sizeof(SGE_SIMPLE32))

/*
 * Convert a physical address returned from IOC to a virtual address
 * needed to access the data.
 */
#define	MPT_REPLY_PTOV(m, x)					\
	((void *)(&(m)->reply[(((x) << 1) - (m)->reply_phys)]))

enum mpt_req_state {
	REQ_FREE,
	REQ_IN_PROGRESS,
	REQ_TIMEOUT,
	REQ_ON_CHIP,
	REQ_DONE
};

struct req_entry {
	uint16_t	index;		/* index of this entry */
	struct scsi_xfer *xfer;		/* scsipi xfer request */
	void		*req_vbuf;	/* virtual address of entry */
	void		*sense_vbuf;	/* virtual address of sense data */
	bus_addr_t	req_pbuf;	/* physical address of entry */
	bus_addr_t	sense_pbuf;	/* physical address of sense data */
	bus_dmamap_t	dmap;		/* DMA map for data buffer */
	SLIST_ENTRY(req_entry) link;	/* pointer to next in list */
	enum mpt_req_state debug;	/* debugging */
	uint32_t	sequence;	/* sequence number */
};

struct mpt_softc {
	struct device	mpt_dev;		/* base device glue */

	int		is_fc;
	int		bus;

	/* IOC facts */
	uint16_t	mpt_global_credits;
	uint16_t	request_frame_size;
	uint8_t		mpt_max_devices;
	uint8_t		mpt_max_buses;
	uint8_t         fw_download_boot;
	uint32_t        fw_image_size;
	uint32_t	im_support;

	/* Port facts */
	uint16_t	mpt_ini_id;

	/* Device configuration information */
	struct {
		struct mpt_spi_cfg {
			CONFIG_PAGE_SCSI_PORT_0	_port_page0;
			CONFIG_PAGE_SCSI_PORT_1	_port_page1;
			CONFIG_PAGE_SCSI_PORT_2	_port_page2;
			CONFIG_PAGE_SCSI_DEVICE_0	_dev_page0[16];
			CONFIG_PAGE_SCSI_DEVICE_1	_dev_page1[16];
			uint16_t			_negotiated_speed[16];
			uint16_t			_tag_enable;
			uint16_t			_disc_enable;
			uint16_t			_update_params0;
			uint16_t			_update_params1;
			uint16_t			_report_xfer_mode;
		} spi;
#define	mpt_port_page0		cfg.spi._port_page0
#define	mpt_port_page1		cfg.spi._port_page1
#define	mpt_port_page2		cfg.spi._port_page2
#define	mpt_dev_page0		cfg.spi._dev_page0
#define	mpt_dev_page1		cfg.spi._dev_page1
#define	mpt_negotiated_speed	cfg.spi._negotiated_speed
#define	mpt_tag_enable		cfg.spi._tag_enable
#define	mpt_disc_enable		cfg.spi._disc_enable
#define	mpt_update_params0	cfg.spi._update_params0
#define	mpt_update_params1	cfg.spi._update_params1
#define	mpt_report_xfer_mode	cfg.spi._report_xfer_mode

		struct mpt_fc_cfg {
			uint8_t		nada;
		} fc;

		struct mpt_mfg_cfg {
			CONFIG_PAGE_MANUFACTURING_0 _mfg_page0;
			CONFIG_PAGE_MANUFACTURING_1 _mfg_page1;
			CONFIG_PAGE_MANUFACTURING_2 _mfg_page2;
			CONFIG_PAGE_MANUFACTURING_3 _mfg_page3;
			CONFIG_PAGE_MANUFACTURING_4 _mfg_page4;
		} mfg;
#define mpt_mfg_page0		cfg.mfg._mfg_page0
#define mpt_mfg_page1		cfg.mfg._mfg_page1
#define mpt_mfg_page2		cfg.mfg._mfg_page2
#define mpt_mfg_page3		cfg.mfg._mfg_page3
#define mpt_mfg_page4		cfg.mfg._mfg_page4

		struct mpt_iou_cfg {
			CONFIG_PAGE_IO_UNIT_0 _iou_page0;
			CONFIG_PAGE_IO_UNIT_1 _iou_page1;
			CONFIG_PAGE_IO_UNIT_2 _iou_page2;
			CONFIG_PAGE_IO_UNIT_3 _iou_page3;
		} iou;
#define mpt_iou_page0		cfg.iou._iou_page0
#define mpt_iou_page1		cfg.iou._iou_page1
#define mpt_iou_page2		cfg.iou._iou_page2
#define mpt_iou_page3		cfg.iou._iou_page3

		struct mpt_ioc_cfg {
			CONFIG_PAGE_IOC_0 _ioc_page0;
			CONFIG_PAGE_IOC_1 _ioc_page1;
			CONFIG_PAGE_IOC_2 _ioc_page2;
			CONFIG_PAGE_IOC_3 _ioc_page3;
			CONFIG_PAGE_IOC_4 _ioc_page4;
		} ioc;
#define mpt_ioc_page0		cfg.ioc._ioc_page0
#define mpt_ioc_page1		cfg.ioc._ioc_page1
#define mpt_ioc_page2		cfg.ioc._ioc_page2
#define mpt_ioc_page3		cfg.ioc._ioc_page3
#define mpt_ioc_page4		cfg.ioc._ioc_page4

		struct mpt_raid_cfg {
			CONFIG_PAGE_RAID_VOL_0 _raidvol_page0;
			CONFIG_PAGE_RAID_PHYS_DISK_0 _raidphys_page0;
		} raid;
#define mpt_raidvol_page0		cfg.raid._raidvol_page0
#define mpt_raidphys_page0		cfg.raid._raidphys_page0
	} cfg;

	bus_space_tag_t		sc_st;
	bus_space_handle_t	sc_sh;
	bus_dma_tag_t		sc_dmat;

	/* Reply memory */
	bus_dmamap_t		reply_dmap;
	char			*reply;
	bus_addr_t		reply_phys;

	/* Request memory */
	bus_dmamap_t		request_dmap;
	char			*request;
	bus_addr_t		request_phys;

	/* scsi linkage */
	struct req_entry		*request_pool;
	SLIST_HEAD(req_queue, req_entry) request_free_list;

	struct scsi_link	sc_link;
	struct scsi_adapter	sc_adapter;

	uint32_t		sequence;	/* sequence number */
	uint32_t		timeouts;	/* timeout count */
	uint32_t		success;	/* success after timeout */

	uint8_t                 vmware;		/* If set, running in vmware */
	uint8_t                 upload_fw;      /* If set, do a fw upload */
	/* Firmware memory */
	bus_dmamap_t            fw_dmap;
	bus_dma_segment_t       fw_seg;
	char                    *fw;

	/* Companion part in a 929 or 1030, or NULL. */
	struct mpt_softc	*mpt2;

	/* To restore configuration after hard reset. */
	void			(*sc_set_config_regs)(struct mpt_softc *);
};

#define	MPT_SYNC_REQ(mpt, req, ops)				\
	bus_dmamap_sync((mpt)->sc_dmat, (mpt)->request_dmap,	\
	    (req)->req_pbuf - (mpt)->request_phys,		\
	    MPT_REQUEST_AREA, (ops))

#define	mpt_read(mpt, reg)					\
	bus_space_read_4((mpt)->sc_st, (mpt)->sc_sh, (reg))
#define	mpt_write(mpt, reg, val)				\
	bus_space_write_4((mpt)->sc_st, (mpt)->sc_sh, (reg), (val))

void	mpt_attach(struct mpt_softc *);
int	mpt_dma_mem_alloc(struct mpt_softc *);
int	mpt_intr(void *);
void	mpt_prt(struct mpt_softc *, const char *, ...);


#define	mpt_set_config_regs(mpt)				\
do {								\
	if ((mpt)->sc_set_config_regs != NULL)			\
		(*(mpt)->sc_set_config_regs)((mpt));		\
} while (/*CONSTCOND*/0)

#endif /* _DEV_IC_MPT_OPENBSD_H_ */
@


1.20
log
@Redo debugging mechanism to something less loud and more useful.

Shaves 22k of the kernel.

ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.19 2005/12/03 04:00:08 marco Exp $	*/
@


1.19
log
@Remove some typedef struct goo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.18 2005/12/01 02:15:21 krw Exp $	*/
a203 1
	int		verbose;
@


1.18
log
@bus_dma code clean up. No functional change. Polished form of diff
from marco@@.

ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.17 2005/11/16 04:31:32 marco Exp $	*/
d187 2
a188 1
typedef struct req_entry {
d199 1
a199 1
} request_t;
d201 1
a201 1
typedef struct mpt_softc {
d311 1
a311 1
	request_t		*request_pool;
d333 1
a333 1
} mpt_softc_t;
d345 2
a346 2
void	mpt_attach(mpt_softc_t *);
int	mpt_dma_mem_alloc(mpt_softc_t *);
d348 1
a348 1
void	mpt_prt(mpt_softc_t *, const char *, ...);
@


1.17
log
@Synch up all .h mpi files with FreeBSD.  These new files contain the latest
LSI changes necssary for IM.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.16 2005/11/06 01:42:23 dlg Exp $	*/
a323 1
	int                     fw_rseg;
@


1.16
log
@clean up some early but unused work on bio support.

ok marco@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.15 2004/12/29 06:57:11 deraadt Exp $	*/
d222 5
a226 5
			fCONFIG_PAGE_SCSI_PORT_0	_port_page0;
			fCONFIG_PAGE_SCSI_PORT_1	_port_page1;
			fCONFIG_PAGE_SCSI_PORT_2	_port_page2;
			fCONFIG_PAGE_SCSI_DEVICE_0	_dev_page0[16];
			fCONFIG_PAGE_SCSI_DEVICE_1	_dev_page1[16];
d251 5
a255 5
			fCONFIG_PAGE_MANUFACTURING_0 _mfg_page0;
			fCONFIG_PAGE_MANUFACTURING_1 _mfg_page1;
			fCONFIG_PAGE_MANUFACTURING_2 _mfg_page2;
			fCONFIG_PAGE_MANUFACTURING_3 _mfg_page3;
			fCONFIG_PAGE_MANUFACTURING_4 _mfg_page4;
d264 4
a267 4
			fCONFIG_PAGE_IO_UNIT_0 _iou_page0;
			fCONFIG_PAGE_IO_UNIT_1 _iou_page1;
			fCONFIG_PAGE_IO_UNIT_2 _iou_page2;
			fCONFIG_PAGE_IO_UNIT_3 _iou_page3;
d275 5
a279 5
			fCONFIG_PAGE_IOC_0 _ioc_page0;
			fCONFIG_PAGE_IOC_1 _ioc_page1;
			fCONFIG_PAGE_IOC_2 _ioc_page2;
			fCONFIG_PAGE_IOC_3 _ioc_page3;
			fCONFIG_PAGE_IOC_4 _ioc_page4;
d288 2
a289 2
			fCONFIG_PAGE_RAID_VOL_0 _raidvol_page0;
			fCONFIG_PAGE_RAID_PHYS_DISK_0 _raidphys_page0;
@


1.15
log
@indentation repair; marco ok
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.14 2004/11/21 04:49:26 marco Exp $	*/
a123 2
#include <dev/biovar.h>
#include <dev/ic/mpt_ioctl.h>
a124 2

#include "bio.h"
@


1.14
log
@Fix theo's amd64
Fix vmware
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.13 2004/10/28 02:58:33 marco Exp $	*/
d93 1
a93 1
/* 
d165 1
a165 1
 * a maximum of 49 seperate actual SG segments. 
d324 1
a324 1
	uint8_t                 vmware;      	/* If set, running in vmware */
@


1.13
log
@Revert to 3.6-current code since IBM onboard mpt's act up.  Found by pval & deraadt

no cookie for me...
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.9 2004/08/23 20:52:15 marco Exp $	*/
d109 1
d124 2
d128 2
d224 1
a224 1
	union {
d253 44
d324 1
@


1.12
log
@Redo RAID volume pages
Add RAID physical disk pages
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.11 2004/10/26 04:43:59 marco Exp $	*/
a108 1
#include <sys/ioctl.h>
a122 2
#include <dev/biovar.h>
#include <dev/ic/mpt_ioctl.h>
a124 2
#include "bio.h"

d219 1
a219 1
	struct {
a247 33

		struct mpt_mfg_cfg {
			fCONFIG_PAGE_MANUFACTURING_0 _mfg_page0;
			fCONFIG_PAGE_MANUFACTURING_1 _mfg_page1;
			fCONFIG_PAGE_MANUFACTURING_2 _mfg_page2;
			fCONFIG_PAGE_MANUFACTURING_3 _mfg_page3;
			fCONFIG_PAGE_MANUFACTURING_4 _mfg_page4;
		} mfg;
#define mpt_mfg_page0		cfg.mfg._mfg_page0
#define mpt_mfg_page1		cfg.mfg._mfg_page1
#define mpt_mfg_page2		cfg.mfg._mfg_page2
#define mpt_mfg_page3		cfg.mfg._mfg_page3
#define mpt_mfg_page4		cfg.mfg._mfg_page4

		struct mpt_ioc_cfg {
			fCONFIG_PAGE_IOC_0 _ioc_page0;
			fCONFIG_PAGE_IOC_1 _ioc_page1;
			fCONFIG_PAGE_IOC_2 _ioc_page2;
			fCONFIG_PAGE_IOC_3 _ioc_page3;
			fCONFIG_PAGE_IOC_4 _ioc_page4;
		} ioc;
#define mpt_ioc_page0		cfg.ioc._ioc_page0
#define mpt_ioc_page1		cfg.ioc._ioc_page1
#define mpt_ioc_page2		cfg.ioc._ioc_page2
#define mpt_ioc_page3		cfg.ioc._ioc_page3
#define mpt_ioc_page4		cfg.ioc._ioc_page4

		struct mpt_raid_cfg {
			fCONFIG_PAGE_RAID_VOL_0 _raidvol_page0;
			fCONFIG_PAGE_RAID_PHYS_DISK_0 _raidphys_page0;
		} raid;
#define mpt_raidvol_page0		cfg.raid._raidvol_page0
#define mpt_raidphys_page0		cfg.raid._raidphys_page0
@


1.11
log
@Add RAID volume page
Add more IOC pages
Some cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.10 2004/10/22 04:54:26 marco Exp $	*/
a223 1
	/* union { is this right? */
d256 4
d262 4
d281 2
a282 1
			fCONFIG_PAGE_RAID_VOL_0 _raid_page0;
d284 2
a285 3
#define mpt_raid_page0		cfg.raid._raid_page0


@


1.10
log
@Add:
* bio ioctl interface
* retrieval of manufacturing pages
* retrieval of IOC pages
* IM detection during boot

This is the initial infrastructure to add IM/IME/IS support to the mpt driver.  This is not extremely useful yet. Userland tool to follow.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.9 2004/08/23 20:52:15 marco Exp $	*/
d224 2
a225 1
	union {
d272 7
@


1.9
log
@Fix license.  ok krw@@, deraadt@@ tedu@@ & Milos Urbanek <urbanek at zoom-int.cz>
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.8 2004/07/13 00:03:29 marco Exp $	*/
d109 1
d124 2
d128 2
d253 18
@


1.8
log
@Replace _DEV_IC_MPT_NETBSD_H_ with _DEV_IC_MPT_OPENBSD_H_
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.7 2004/07/12 23:57:14 marco Exp $	*/
d17 11
a27 6
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
d29 1
@


1.7
log
@Add detection of IM/IS/IME support in mpt_attach().  This is in preparation to add RAID support.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.6 2004/03/20 03:54:16 krw Exp $	*/
d96 2
a97 2
#ifndef _DEV_IC_MPT_NETBSD_H_
#define	_DEV_IC_MPT_NETBSD_H_
d305 1
a305 1
#endif /* _DEV_IC_MPT_NETBSD_H_ */
@


1.6
log
@Implement firmware download.

From Milos Urbanek via Marco Peereboom, with suggestions from LSI.

ok deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.5 2004/03/19 02:47:36 krw Exp $	*/
d207 1
@


1.6.4.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.5
log
@Tweak isr to speed it up, panic in correct spot, prepare for more firmware
handling and error handling.

From Marco Peereboom, with suggestions from LSI.

ok deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.4 2004/03/17 00:47:06 krw Exp $	*/
a268 1
	uint8_t                 download_fw;      /* If set, do a fw download */
@


1.4
log
@Reduce openings to avoid both usual 'EIO' problems in interrupt mode
and apparently some mpt specific problems. With this change installs
to my U320 disk work, and work *fast*.

Try to return XS_TIMEOUT for timeouts rather than XS_NOERROR.

Load on-board firmware. Currently v1.01.61 seems to work well, but
the latest 1.03.23 does not.

With these changes Marco and Milos torture chambers now report no
problems and we should be set for 3.5.

Mostly from Milos Urbanek and Marco Peereboom.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.3 2004/03/14 23:14:36 krw Exp $	*/
d269 1
@


1.3
log
@Add first cut at PPR negotiation. From Marco Peereboom.

Call mpt_done() instead of scsi_done() when the command times out.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.2 2004/03/07 05:08:16 krw Exp $	*/
d205 2
d268 7
d296 1
@


1.2
log
@Eliminate bit fields and unused fields in mpt_softc.

Return XS_DRIVER_STUFFUP for all status values we aren't sure of.

Mostly from Milos Urbanek.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpt_openbsd.h,v 1.1 2004/03/06 03:03:07 krw Exp $	*/
d217 1
d229 1
@


1.1
log
@Initial version of driver for LSI MPT devices, like the U320 1030.
Basically works but much still to fix/implement.

From NetBSD via Milos Urbanek and Marco Peereboom.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d196 3
a198 9
	/* Locking context */
	int		mpt_splsaved;
	uint32_t	mpt_islocked;

	int		verbose : 3,
			mpt_locksetup : 1,
			is_fc : 1,
			bus : 1,
			: 26;
@

