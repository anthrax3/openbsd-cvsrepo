head	1.7;
access;
symbols
	OPENBSD_4_3:1.6.0.18
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.16
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.14
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.12
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.5
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.2
	SMP_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2008.05.23.14.04.19;	author brad;	state dead;
branches;
next	1.6;

1.6
date	2003.10.21.18.58.49;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.09.03.14.18;	author todd;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.26.54;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.04.09.02.59;	author niklas;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2000.08.17.16.16.31;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	99.12.16.02.56.56;	author deraadt;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.05.14.22.23.33;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.10.31.03.22.41;	author nate;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2002.03.28.11.51.00;	author niklas;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2003.03.28.00.38.12;	author niklas;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2004.02.19.10.56.17;	author niklas;	state Exp;
branches;
next	;

1.3.4.1
date	2002.06.11.03.42.17;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Bye bye awi(4). No net80211 love, uses its own WEP code and has not worked
properly in 8.5 years so just garbage collect the driver.

ok damien@@ deraadt@@
@
text
@/* $OpenBSD: awivar.h,v 1.6 2003/10/21 18:58:49 jmc Exp $ */
/* $NetBSD: awivar.h,v 1.12 2000/07/21 04:48:56 onoe Exp $ */

/*-
 * Copyright (c) 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Bill Sommerfeld
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/* timer values in msec */
#define	AWI_SELFTEST_TIMEOUT	5000
#define	AWI_CMD_TIMEOUT		2000
#define	AWI_LOCKOUT_TIMEOUT	50
#define	AWI_ASCAN_DURATION	100
#define	AWI_ASCAN_WAIT		3000
#define	AWI_PSCAN_DURATION	200
#define	AWI_PSCAN_WAIT		5000
#define	AWI_TRANS_TIMEOUT	2000

#define	AWI_NTXBUFS		4
#define	AWI_MAX_KEYLEN		16

enum awi_status {
	AWI_ST_INIT,
	AWI_ST_SCAN,
	AWI_ST_SETSS,
	AWI_ST_SYNC,
	AWI_ST_AUTH,
	AWI_ST_ASSOC,
	AWI_ST_RUNNING
};

struct awi_bss 
{
	TAILQ_ENTRY(awi_bss)	list;
	u_int8_t	esrc[ETHER_ADDR_LEN];
	u_int8_t	chanset;	/* channel set to use */
	u_int8_t	pattern;	/* hop pattern to use */
	u_int8_t	index;		/* index to use */
	u_int8_t	rssi;		/* strength of this beacon */
	u_int16_t	dwell_time;	/* dwell time */
	u_int8_t	timestamp[8];	/* timestamp of this bss */
	u_int8_t	bssid[ETHER_ADDR_LEN];
	u_int16_t	capinfo;
	u_int32_t	rxtime;		/* unit's local time */
	u_int16_t	interval;	/* beacon interval */
	u_int8_t	txrate;
	u_int8_t	fails;
	u_int8_t	essid[IEEE80211_NWID_LEN + 2];
};

struct awi_wep_algo {
	char		*awa_name;
	int		(*awa_ctxlen)(void);
	void		(*awa_setkey)(void *, u_char *, int);
	void		(*awa_encrypt)(void *, u_char *, u_char *, int);
	void		(*awa_decrypt)(void *, u_char *, u_char *, int);
};

struct awi_softc 
{
#ifdef __NetBSD__
	struct device 		sc_dev;
	struct ethercom		sc_ec;
	void			*sc_ih; /* interrupt handler */
#endif
#ifdef __FreeBSD__
#if __FreeBSD__ >= 4
	struct {
		char	dv_xname[64];	/*XXX*/
	}			sc_dev;
#else
	struct device		sc_dev;
#endif
#endif
#ifdef __OpenBSD__
	struct device 		sc_dev;
	struct arpcom		sc_arpcom;
	void			*sc_ih; /* interrupt handler */
#endif
	struct am79c930_softc 	sc_chip;
	struct ifnet		*sc_ifp;
	int			(*sc_enable)(struct awi_softc *);
	void			(*sc_disable)(struct awi_softc *);

	struct ifmedia		sc_media;
	enum awi_status		sc_status;
	unsigned int		sc_enabled:1,
				sc_busy:1,
				sc_cansleep:1,
				sc_invalid:1,
				sc_enab_intr:1,
				sc_format_llc:1,
				sc_start_bss:1,
				sc_rawbpf:1,
				sc_no_bssid:1,
				sc_active_scan:1,
				sc_attached:1;	/* attach has succeeded */
	u_int8_t		sc_cmd_inprog;
	int			sc_sleep_cnt;

	int			sc_mgt_timer;

	TAILQ_HEAD(, awi_bss)	sc_scan;
	u_int8_t		sc_scan_cur;
	u_int8_t		sc_scan_min;
	u_int8_t		sc_scan_max;
	u_int8_t		sc_scan_set;
	struct awi_bss		sc_bss;
	u_int8_t		sc_ownssid[IEEE80211_NWID_LEN + 2];
	u_int8_t		sc_ownch;

	int			sc_rx_timer;
	u_int32_t		sc_rxdoff;
	u_int32_t		sc_rxmoff;
	struct mbuf		*sc_rxpend;

	int			sc_tx_timer;
	u_int8_t		sc_tx_rate;
	struct ifqueue		sc_mgtq;
	u_int32_t		sc_txbase;
	u_int32_t		sc_txend;
	u_int32_t		sc_txnext;
	u_int32_t		sc_txdone;

	int			sc_wep_keylen[IEEE80211_WEP_NKID]; /* keylen */
	u_int8_t		sc_wep_key[IEEE80211_WEP_NKID][AWI_MAX_KEYLEN];
	int			sc_wep_defkid;
	void			*sc_wep_ctx;	/* work area */
	struct awi_wep_algo	*sc_wep_algo;

	u_char			sc_banner[AWI_BANNER_LEN];
	struct awi_mib_local	sc_mib_local;
	struct awi_mib_addr	sc_mib_addr;
	struct awi_mib_mac	sc_mib_mac;
	struct awi_mib_stat	sc_mib_stat;
	struct awi_mib_mgt	sc_mib_mgt;
	struct awi_mib_phy	sc_mib_phy;
};

#define awi_read_1(sc, off) ((sc)->sc_chip.sc_ops->read_1)(&sc->sc_chip, off)
#define awi_read_2(sc, off) ((sc)->sc_chip.sc_ops->read_2)(&sc->sc_chip, off)
#define awi_read_4(sc, off) ((sc)->sc_chip.sc_ops->read_4)(&sc->sc_chip, off)
#define awi_read_bytes(sc, off, ptr, len) ((sc)->sc_chip.sc_ops->read_bytes)(&sc->sc_chip, off, ptr, len)

#define awi_write_1(sc, off, val) \
	((sc)->sc_chip.sc_ops->write_1)(&sc->sc_chip, off, val)
#define awi_write_2(sc, off, val) \
	((sc)->sc_chip.sc_ops->write_2)(&sc->sc_chip, off, val)
#define awi_write_4(sc, off, val) \
	((sc)->sc_chip.sc_ops->write_4)(&sc->sc_chip, off, val)
#define awi_write_bytes(sc, off, ptr, len) \
	((sc)->sc_chip.sc_ops->write_bytes)(&sc->sc_chip, off, ptr, len)

#define awi_drvstate(sc, state) \
	awi_write_1(sc, AWI_DRIVERSTATE, \
	    ((state) | AWI_DRV_AUTORXLED|AWI_DRV_AUTOTXLED))

/* unaligned little endian access */
#define	LE_READ_2(p)							\
	(((u_int8_t *)(p))[0] | (((u_int8_t *)(p))[1] << 8))
#define	LE_READ_4(p)							\
	(((u_int8_t *)(p))[0] | (((u_int8_t *)(p))[1] << 8) |		\
	 (((u_int8_t *)(p))[2] << 16) | (((u_int8_t *)(p))[3] << 24))
#define	LE_WRITE_2(p, v)						\
	((((u_int8_t *)(p))[0] = ((u_int32_t)(v) & 0xff)),		\
	 (((u_int8_t *)(p))[1] = (((u_int32_t)(v) >> 8) & 0xff)))
#define	LE_WRITE_4(p, v)						\
	((((u_int8_t *)(p))[0] = ((u_int32_t)(v) & 0xff)),		\
	 (((u_int8_t *)(p))[1] = (((u_int32_t)(v) >> 8) & 0xff)),	\
	 (((u_int8_t *)(p))[2] = (((u_int32_t)(v) >> 16) & 0xff)),	\
	 (((u_int8_t *)(p))[3] = (((u_int32_t)(v) >> 24) & 0xff)))

#define	AWI_80211_RATE(rate)	(((rate) & 0x7f) * 5)

int	awi_attach(struct awi_softc *);
int	awi_intr(void *);
void	awi_reset(struct awi_softc *);
#ifndef __FreeBSD__
int	awi_activate(struct device *, enum devact);
int	awi_detach(struct awi_softc *);
void	awi_power(struct awi_softc *, int);
#endif

void awi_stop(struct awi_softc *sc);
int awi_init(struct awi_softc *sc);
int awi_init_region(struct awi_softc *);
int awi_wicfg(struct ifnet *, u_long, caddr_t);

int awi_wep_setnwkey(struct awi_softc *, struct ieee80211_nwkey *);
int awi_wep_getnwkey(struct awi_softc *, struct ieee80211_nwkey *);
int awi_wep_getalgo(struct awi_softc *);
int awi_wep_setalgo(struct awi_softc *, int);
int awi_wep_setkey(struct awi_softc *, int, unsigned char *, int);
int awi_wep_getkey(struct awi_softc *, int, unsigned char *, int *);
struct mbuf *awi_wep_encrypt(struct awi_softc *, struct mbuf *, int);

#ifdef __FreeBSD__
/* Provide mem* for compat with NetBSD to fix LINT */
static __inline int
memcmp(const void *b1, const void *b2, size_t len)
{
	return (bcmp(b1, b2, len));
}

static __inline void *
memset(void *b, int c, size_t len)
{
	bzero(b, len);
	return (b);
}
#endif
@


1.6
log
@typos from Tom Cosgrove;

Tom: I did not commit a couple of your changes.

i did not include some punctuation fixes (full stops, etc.)
mnemorable -> mnemonic: i decided memorable was probably better
instrunctions -> instruction: i kept the plural
@
text
@d1 1
a1 1
/* $OpenBSD: awivar.h,v 1.5 2002/06/09 03:14:18 todd Exp $ */
@


1.5
log
@a step towards consistancy; in general:
	'struct arpcom foo' -> 'struct arpcom sc_arpcom'
ok itojun@@
@
text
@d1 1
a1 1
/* $OpenBSD: awivar.h,v 1.3 2001/07/04 09:02:59 niklas Exp $ */
d189 1
a189 1
/* unalligned little endian access */
@


1.4
log
@First round of __P removal in sys
@
text
@d108 1
a108 1
	struct arpcom		sc_ec;
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/* $OpenBSD: awivar.h,v 1.12 2000/07/21 04:48:56 onoe Exp $ */
d84 4
a87 4
	int		(*awa_ctxlen) __P((void));
	void		(*awa_setkey) __P((void *, u_char *, int));
	void		(*awa_encrypt) __P((void *, u_char *, u_char *, int));
	void		(*awa_decrypt) __P((void *, u_char *, u_char *, int));
d113 2
a114 2
	int			(*sc_enable) __P((struct awi_softc *));
	void			(*sc_disable) __P((struct awi_softc *));
d206 3
a208 3
int	awi_attach __P((struct awi_softc *));
int	awi_intr __P((void *));
void	awi_reset __P((struct awi_softc *));
d210 3
a212 3
int	awi_activate __P((struct device *, enum devact));
int	awi_detach __P((struct awi_softc *));
void	awi_power __P((struct awi_softc *, int));
d215 12
a226 12
void awi_stop __P((struct awi_softc *sc));
int awi_init __P((struct awi_softc *sc));
int awi_init_region __P((struct awi_softc *));
int awi_wicfg __P((struct ifnet *, u_long, caddr_t));

int awi_wep_setnwkey __P((struct awi_softc *, struct ieee80211_nwkey *));
int awi_wep_getnwkey __P((struct awi_softc *, struct ieee80211_nwkey *));
int awi_wep_getalgo __P((struct awi_softc *));
int awi_wep_setalgo __P((struct awi_softc *, int));
int awi_wep_setkey __P((struct awi_softc *, int, unsigned char *, int));
int awi_wep_getkey __P((struct awi_softc *, int, unsigned char *, int *));
struct mbuf *awi_wep_encrypt __P((struct awi_softc *, struct mbuf *, int));
@


1.3.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: awivar.h,v 1.3 2001/07/04 09:02:59 niklas Exp $ */
d84 4
a87 4
	int		(*awa_ctxlen)(void);
	void		(*awa_setkey)(void *, u_char *, int);
	void		(*awa_encrypt)(void *, u_char *, u_char *, int);
	void		(*awa_decrypt)(void *, u_char *, u_char *, int);
d108 1
a108 1
	struct arpcom		sc_arpcom;
d113 2
a114 2
	int			(*sc_enable)(struct awi_softc *);
	void			(*sc_disable)(struct awi_softc *);
d206 3
a208 3
int	awi_attach(struct awi_softc *);
int	awi_intr(void *);
void	awi_reset(struct awi_softc *);
d210 3
a212 3
int	awi_activate(struct device *, enum devact);
int	awi_detach(struct awi_softc *);
void	awi_power(struct awi_softc *, int);
d215 12
a226 12
void awi_stop(struct awi_softc *sc);
int awi_init(struct awi_softc *sc);
int awi_init_region(struct awi_softc *);
int awi_wicfg(struct ifnet *, u_long, caddr_t);

int awi_wep_setnwkey(struct awi_softc *, struct ieee80211_nwkey *);
int awi_wep_getnwkey(struct awi_softc *, struct ieee80211_nwkey *);
int awi_wep_getalgo(struct awi_softc *);
int awi_wep_setalgo(struct awi_softc *, int);
int awi_wep_setkey(struct awi_softc *, int, unsigned char *, int);
int awi_wep_getkey(struct awi_softc *, int, unsigned char *, int *);
struct mbuf *awi_wep_encrypt(struct awi_softc *, struct mbuf *, int);
@


1.2
log
@replace if_awi w/ semi-current netbsd driver; still has problems
@
text
@d1 1
@


1.1
log
@non-working awi driver; someone finish it
@
text
@d1 1
a1 2
/* $NetBSD: awivar.h,v 1.4 1999/11/09 14:58:07 sommerfeld Exp $ */
/* $OpenBSD$ */
d39 21
a59 15

enum awi_state {
	AWI_ST_OFF,		/* powered off */
	AWI_ST_SELFTEST,		/* waiting for selftest to complete*/
	AWI_ST_IFTEST,		/* waiting for interface to respond */
	AWI_ST_MIB_GET,		/* fetching MIB variables */
	AWI_ST_MIB_SET,		/* stuffing MIB variables */
	AWI_ST_TXINIT,		/* initializing TX side */
	AWI_ST_RXINIT,		/* initializing RX side */
	AWI_ST_SCAN,		/* hunting for a BSS */
	AWI_ST_SYNCED,		/* synced?  trying to auth.. */
	/* there are probably some missing 802.11 states here.. */
	AWI_ST_AUTHED,		/* authenticated */
	AWI_ST_RUNNING,		/* ready to send user data.. */
	AWI_ST_INSANE,		/* failed to respond.. */
d62 1
a62 5
#define AWI_FL_CMD_INPROG 		0x0001

#define AWI_SSID_LEN 33

struct awi_bss_binding 
d64 15
a78 10
	u_int8_t	chanset; /* channel set to use */
	u_int8_t	pattern; /* hop pattern to use */
	u_int8_t	index;	/* index to use */
	u_int8_t	rssi;	/* strenght of this beacon */
	u_int16_t	dwell_time; /* dwell time */
	u_int8_t	bss_timestamp[8]; /* timestamp of this bss */
	u_int8_t	bss_id[6];
	u_int32_t	rxtime;	/* unit's local time */
	u_int8_t	sslen;
	u_int8_t	ssid[AWI_SSID_LEN];
d81 6
a86 8
#define NBND 4
#define NTXD 4

struct awi_txbd 
{
	u_int32_t	descr;	/* offset to descriptor */
	u_int32_t	frame;	/* offset to frame */
	u_int32_t	len;	/* frame length */	
d91 15
a106 1
	struct am79c930_softc 	sc_chip;
a107 3
	int 			sc_enabled;
	enum awi_state		sc_state;
	int			sc_flags;
d109 3
a111 1
	struct ifnet		*sc_ifp;	/* XXX */
a113 2
	void			(*sc_completion) __P((struct awi_softc *,
	    u_int8_t));
d115 15
a129 31
	struct ifqueue		sc_mgtq;
	
	u_int32_t		sc_txbase;
	u_int32_t		sc_txlen;
	u_int32_t		sc_rxbase;
	u_int32_t		sc_rxlen;

	u_int32_t		sc_rx_data_desc;
	u_int32_t		sc_rx_mgt_desc;

	u_int16_t		sc_scan_duration;
	u_int8_t		sc_scan_chanset;
	u_int8_t		sc_scan_pattern;

	int			sc_nbindings;

	u_int8_t		sc_my_addr[6];
	
	int			sc_new_bss;
	struct awi_bss_binding	sc_active_bss;
	/*
	 * BSS's found during a scan.. XXX doesn't need to be in-line
	 */
	struct awi_bss_binding	sc_bindings[NBND];
	
	int			sc_txpending;
	int			sc_ntxd;
	int			sc_txnext; /* next txd to be given to driver */
	int			sc_txfirst; /* first unsent txd dev has */
	struct awi_txbd	sc_txd[NTXD];
	u_int8_t		sc_curmib;
a130 2
	int			sc_scan_timer;
	int			sc_tx_timer;
a131 2
	int			sc_cmd_timer;
	int			sc_selftest_tries;
d133 35
a167 9
	/*
	 * packet parsing state.
	 */

	struct mbuf		*sc_nextpkt;
	struct mbuf		*sc_m;
	u_int8_t		*sc_mptr;
	u_int32_t		sc_mleft;
	int			sc_flushpkt;
a169 5
extern int awi_activate __P((struct device *, enum devact));
extern int awi_attach __P((struct awi_softc *, u_int8_t *macaddr));
extern void awi_init __P((struct awi_softc *));
extern void awi_stop __P((struct awi_softc *));

d186 1
a186 1
	    ((state) | AWI_DRV_AUTORXLED|AWI_DRV_AUTOTXLED));
d188 46
a233 1
/* Number of trips around the loop waiting for the device.. */
d235 7
a241 10
#define AWI_LOCKOUT_SPIN	10000 /* 10ms */

/* 24-byte mac header + 8 byte SNAP header + 1500-byte ether MTU */
#define AWI_FRAME_SIZE		1532

/* refresh associations every 300s */
  
#define AWI_ASSOC_REFRESH	300

extern int awi_intr __P((void *));
@


1.1.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 1
/* $NetBSD: awivar.h,v 1.12 2000/07/21 04:48:56 onoe Exp $ */
d40 15
a54 21
/* timer values in msec */
#define	AWI_SELFTEST_TIMEOUT	5000
#define	AWI_CMD_TIMEOUT		2000
#define	AWI_LOCKOUT_TIMEOUT	50
#define	AWI_ASCAN_DURATION	100
#define	AWI_ASCAN_WAIT		3000
#define	AWI_PSCAN_DURATION	200
#define	AWI_PSCAN_WAIT		5000
#define	AWI_TRANS_TIMEOUT	2000

#define	AWI_NTXBUFS		4
#define	AWI_MAX_KEYLEN		16

enum awi_status {
	AWI_ST_INIT,
	AWI_ST_SCAN,
	AWI_ST_SETSS,
	AWI_ST_SYNC,
	AWI_ST_AUTH,
	AWI_ST_ASSOC,
	AWI_ST_RUNNING
d57 5
a61 1
struct awi_bss 
d63 10
a72 15
	TAILQ_ENTRY(awi_bss)	list;
	u_int8_t	esrc[ETHER_ADDR_LEN];
	u_int8_t	chanset;	/* channel set to use */
	u_int8_t	pattern;	/* hop pattern to use */
	u_int8_t	index;		/* index to use */
	u_int8_t	rssi;		/* strength of this beacon */
	u_int16_t	dwell_time;	/* dwell time */
	u_int8_t	timestamp[8];	/* timestamp of this bss */
	u_int8_t	bssid[ETHER_ADDR_LEN];
	u_int16_t	capinfo;
	u_int32_t	rxtime;		/* unit's local time */
	u_int16_t	interval;	/* beacon interval */
	u_int8_t	txrate;
	u_int8_t	fails;
	u_int8_t	essid[IEEE80211_NWID_LEN + 2];
d75 8
a82 6
struct awi_wep_algo {
	char		*awa_name;
	int		(*awa_ctxlen) __P((void));
	void		(*awa_setkey) __P((void *, u_char *, int));
	void		(*awa_encrypt) __P((void *, u_char *, u_char *, int));
	void		(*awa_decrypt) __P((void *, u_char *, u_char *, int));
a86 15
#ifdef __NetBSD__
	struct device 		sc_dev;
	struct ethercom		sc_ec;
	void			*sc_ih; /* interrupt handler */
#endif
#ifdef __FreeBSD__
#if __FreeBSD__ >= 4
	struct {
		char	dv_xname[64];	/*XXX*/
	}			sc_dev;
#else
	struct device		sc_dev;
#endif
#endif
#ifdef __OpenBSD__
d88 1
d90 3
d94 1
a94 3
#endif
	struct am79c930_softc 	sc_chip;
	struct ifnet		*sc_ifp;
d97 2
d100 31
a130 15
	struct ifmedia		sc_media;
	enum awi_status		sc_status;
	unsigned int		sc_enabled:1,
				sc_busy:1,
				sc_cansleep:1,
				sc_invalid:1,
				sc_enab_intr:1,
				sc_format_llc:1,
				sc_start_bss:1,
				sc_rawbpf:1,
				sc_no_bssid:1,
				sc_active_scan:1,
				sc_attached:1;	/* attach has succeeded */
	u_int8_t		sc_cmd_inprog;
	int			sc_sleep_cnt;
d132 2
d135 2
d138 10
a147 13
	TAILQ_HEAD(, awi_bss)	sc_scan;
	u_int8_t		sc_scan_cur;
	u_int8_t		sc_scan_min;
	u_int8_t		sc_scan_max;
	u_int8_t		sc_scan_set;
	struct awi_bss		sc_bss;
	u_int8_t		sc_ownssid[IEEE80211_NWID_LEN + 2];
	u_int8_t		sc_ownch;

	int			sc_rx_timer;
	u_int32_t		sc_rxdoff;
	u_int32_t		sc_rxmoff;
	struct mbuf		*sc_rxpend;
d149 4
a152 22
	int			sc_tx_timer;
	u_int8_t		sc_tx_rate;
	struct ifqueue		sc_mgtq;
	u_int32_t		sc_txbase;
	u_int32_t		sc_txend;
	u_int32_t		sc_txnext;
	u_int32_t		sc_txdone;

	int			sc_wep_keylen[IEEE80211_WEP_NKID]; /* keylen */
	u_int8_t		sc_wep_key[IEEE80211_WEP_NKID][AWI_MAX_KEYLEN];
	int			sc_wep_defkid;
	void			*sc_wep_ctx;	/* work area */
	struct awi_wep_algo	*sc_wep_algo;

	u_char			sc_banner[AWI_BANNER_LEN];
	struct awi_mib_local	sc_mib_local;
	struct awi_mib_addr	sc_mib_addr;
	struct awi_mib_mac	sc_mib_mac;
	struct awi_mib_stat	sc_mib_stat;
	struct awi_mib_mgt	sc_mib_mgt;
	struct awi_mib_phy	sc_mib_phy;
};
d170 1
a170 1
	    ((state) | AWI_DRV_AUTORXLED|AWI_DRV_AUTOTXLED))
d172 10
a181 46
/* unalligned little endian access */
#define	LE_READ_2(p)							\
	(((u_int8_t *)(p))[0] | (((u_int8_t *)(p))[1] << 8))
#define	LE_READ_4(p)							\
	(((u_int8_t *)(p))[0] | (((u_int8_t *)(p))[1] << 8) |		\
	 (((u_int8_t *)(p))[2] << 16) | (((u_int8_t *)(p))[3] << 24))
#define	LE_WRITE_2(p, v)						\
	((((u_int8_t *)(p))[0] = ((u_int32_t)(v) & 0xff)),		\
	 (((u_int8_t *)(p))[1] = (((u_int32_t)(v) >> 8) & 0xff)))
#define	LE_WRITE_4(p, v)						\
	((((u_int8_t *)(p))[0] = ((u_int32_t)(v) & 0xff)),		\
	 (((u_int8_t *)(p))[1] = (((u_int32_t)(v) >> 8) & 0xff)),	\
	 (((u_int8_t *)(p))[2] = (((u_int32_t)(v) >> 16) & 0xff)),	\
	 (((u_int8_t *)(p))[3] = (((u_int32_t)(v) >> 24) & 0xff)))

#define	AWI_80211_RATE(rate)	(((rate) & 0x7f) * 5)

int	awi_attach __P((struct awi_softc *));
int	awi_intr __P((void *));
void	awi_reset __P((struct awi_softc *));
#ifndef __FreeBSD__
int	awi_activate __P((struct device *, enum devact));
int	awi_detach __P((struct awi_softc *));
void	awi_power __P((struct awi_softc *, int));
#endif

void awi_stop __P((struct awi_softc *sc));
int awi_init __P((struct awi_softc *sc));
int awi_init_region __P((struct awi_softc *));
int awi_wicfg __P((struct ifnet *, u_long, caddr_t));

int awi_wep_setnwkey __P((struct awi_softc *, struct ieee80211_nwkey *));
int awi_wep_getnwkey __P((struct awi_softc *, struct ieee80211_nwkey *));
int awi_wep_getalgo __P((struct awi_softc *));
int awi_wep_setalgo __P((struct awi_softc *, int));
int awi_wep_setkey __P((struct awi_softc *, int, unsigned char *, int));
int awi_wep_getkey __P((struct awi_softc *, int, unsigned char *, int *));
struct mbuf *awi_wep_encrypt __P((struct awi_softc *, struct mbuf *, int));

#ifdef __FreeBSD__
/* Provide mem* for compat with NetBSD to fix LINT */
static __inline int
memcmp(const void *b1, const void *b2, size_t len)
{
	return (bcmp(b1, b2, len));
}
d183 1
a183 7
static __inline void *
memset(void *b, int c, size_t len)
{
	bzero(b, len);
	return (b);
}
#endif
@


1.1.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 1
/* $OpenBSD$ */
@


1.1.2.3
log
@Merge in -current from about a week ago
@
text
@d84 4
a87 4
	int		(*awa_ctxlen)(void);
	void		(*awa_setkey)(void *, u_char *, int);
	void		(*awa_encrypt)(void *, u_char *, u_char *, int);
	void		(*awa_decrypt)(void *, u_char *, u_char *, int);
d113 2
a114 2
	int			(*sc_enable)(struct awi_softc *);
	void			(*sc_disable)(struct awi_softc *);
d206 3
a208 3
int	awi_attach(struct awi_softc *);
int	awi_intr(void *);
void	awi_reset(struct awi_softc *);
d210 3
a212 3
int	awi_activate(struct device *, enum devact);
int	awi_detach(struct awi_softc *);
void	awi_power(struct awi_softc *, int);
d215 12
a226 12
void awi_stop(struct awi_softc *sc);
int awi_init(struct awi_softc *sc);
int awi_init_region(struct awi_softc *);
int awi_wicfg(struct ifnet *, u_long, caddr_t);

int awi_wep_setnwkey(struct awi_softc *, struct ieee80211_nwkey *);
int awi_wep_getnwkey(struct awi_softc *, struct ieee80211_nwkey *);
int awi_wep_getalgo(struct awi_softc *);
int awi_wep_setalgo(struct awi_softc *, int);
int awi_wep_setkey(struct awi_softc *, int, unsigned char *, int);
int awi_wep_getkey(struct awi_softc *, int, unsigned char *, int *);
struct mbuf *awi_wep_encrypt(struct awi_softc *, struct mbuf *, int);
@


1.1.2.4
log
@Sync the SMP branch with 3.3
@
text
@d108 1
a108 1
	struct arpcom		sc_arpcom;
@


1.1.2.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d189 1
a189 1
/* unaligned little endian access */
@


