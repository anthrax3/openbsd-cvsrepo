head	1.5;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.34
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.32
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.30
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.24
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.22
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.20
	OPENBSD_2_8:1.1.0.18
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.16
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.14
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.12
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.10
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.8
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.6
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.4
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2012.03.28.20.44.23;	author miod;	state dead;
branches;
next	1.4;

1.4
date	2012.03.07.18.15.25;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.09.16.34.22;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.54;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.02.19.20.17.01;	author pefo;	state Exp;
branches
	1.1.14.1
	1.1.24.1;
next	;

1.1.14.1
date	2002.03.28.11.51.00;	author niklas;	state Exp;
branches;
next	1.1.14.2;

1.1.14.2
date	2004.02.19.10.56.18;	author niklas;	state Exp;
branches;
next	;

1.1.24.1
date	2002.06.11.03.42.18;	author art;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Work in progress support for the SGI Indigo, Indigo 2 and Indy systems
(IP20, IP22, IP24) in 64-bit mode, adapated from NetBSD. Currently limited
to headless operation, input and video drivers will get ported soon.

Should work on all R4000, R4440 and R5000 based systems. L2 cache on R5000SC
Indy not supported yet (coming soon), R4600 not supported yet either (coming
soon as well).

Tested to boot multiuser on: Indigo2 R4000SC, Indy R4000PC, Indy R4000SC,
Indy R5000SC, Indigo2 R4400SC. There are still glitches in the Ethernet driver
which are being looked at.

Expansion support is limited to the GIO E++ board; GIO boards with PCI-GIO
bridges not ported yet due to the lack of hardware, and this kind of driver
does not port blindly.

Most of this work comes from NetBSD, polishing and integration work, as well
as putting as many ``R4x00 in 64-bit mode'' erratas as necessary, by yours
truly.

More work is coming, as well as trying to get some easy way to boot install
kernels (as older PROM can only boot ECOFF binaries, which won't do for the
kernel).
@
text
@/*	$OpenBSD: dp857xreg.h,v 1.4 2012/03/07 18:15:25 miod Exp $ */

/*
 * Copyright (c) 1996 Per Fogelstrom
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#if !defined(_DP857X_H)
#define	_DP857X_H

/*
 *	Definition of Real Time Clock address space.
 *
 *	Clock is a National DP8570A RTC
 */
#define BSIZE           1       /* No of Bytes for Address Spacing */
#define	MAIN_STATUS	0x00	/* Main status register		*/
/*
 *  Registers selected with BS=0 RS=0
 */
#define	TIMER0_CTRL	0x01	/* Timer 0 control register	*/
#define	TIMER1_CTRL	0x02	/* Timer 0 control register	*/
#define	PERIODIC_FLAGS	0x03	/* Timer periodic flag register	*/
#define	INTERRUPT_ROUT	0x04	/* Interrupt routing register	*/
/*
 *  Registers selected with BS=0 RS=1
 */
#define	REAL_TIME_MODE	0x01	/* Real Time Mode register	*/
#define	OUTPUT_MODE	0x02	/* Output mode register		*/
#define	INTERRUPT_CTRL0	0x03	/* Interrupt control register 0	*/
#define	INTERRUPT_CTRL1	0x04	/* Interrupt control register 1	*/
/*
 *  Clock and timer registers when BS=0
 */
#define	CLK_SUBSECONDS	0x05	/* 1/100 seconds register	*/
#define	CLK_SECONDS	0x06	/* Seconds			*/
#define	CLK_MINUTES	0x07	/* Minutes			*/
#define	CLK_HOURS	0x08	/* Hours			*/
#define	CLK_DAY		0x09	/* Day of month			*/
#define	CLK_MONTH	0x0a	/* Month			*/
#define	CLK_YEAR	0x0b	/* Year				*/
#define	CLK_JULIAN_L	0x0c	/* Lsb of Julian date		*/
#define	CLK_JULIAN_H	0x0d	/* Msb of Julian date		*/
#define	CLK_WEEKDAY	0x0e	/* Day of week			*/
#define	TIMER0_LSB	0x0f	/* Timer 0 lsb			*/
#define	TIMER0_MSB	0x10	/* Timer 0 msb			*/
#define	TIMER1_LSB	0x11	/* Timer 1 lsb			*/
#define	TIMER1_MSB	0x12	/* Timer 1 msb			*/
#define	CMP_SECONDS	0x13	/* Seconds compare		*/
#define	CMP_MINUTES	0x14	/* Minutes compare		*/
#define	CMP_HOUR	0x15	/* Hours compare		*/
#define	CMP_DAY		0x16	/* Day of month compare		*/
#define	CMP_MONTH	0x17	/* Month compare		*/
#define	CMP_WEEKDAY	0x18	/* Day of week compare		*/
#define	SAVE_SECONDS	0x19	/* Seconds time save		*/
#define	SAVE_MINUTES	0x1a	/* Minutes time save		*/
#define	SAVE_HOUR	0x1b	/* Hours time save		*/
#define	SAVE_DAY	0x1c	/* Day of month time save	*/
#define	SAVE_MONTH	0x1d	/* Month time save		*/
#define	RAM_1E		0x1e	/* Ram location 1e		*/
#define	RAM_1F		0x1f	/* Ram location 1f		*/
#define	SIZE_DP857X	0x20	/* Size of dp address map	*/

#define	DP_FIRSTTODREG	CLK_SUBSECONDS
#define	DP_LASTTODREG	CLK_WEEKDAY

typedef u_int dp_todregs[SIZE_DP857X];
u_int dp857x_read(void *sc, u_int reg);
void dp857x_write(void *sc, u_int reg, u_int datum);

/*
 * Get all of the TOD/Alarm registers
 * Must be called at splhigh(), and with the RTC properly set up.
 */
#define DP857X_GETTOD(sc, regs)					\
	do {								\
		int i;							\
									\
		/* make sure clock regs are selected */			\
		dp857x_write(sc, MAIN_STATUS, 0);			\
		/* try read until no rollover */			\
		do {							\
			/* read all of the tod/alarm regs */		\
			for (i = DP_FIRSTTODREG; i < SIZE_DP857X; i++)	\
				(*regs)[i] = dp857x_read(sc, i);	\
		} while(dp857x_read(sc, PERIODIC_FLAGS) & 7);		\
	} while (0);

/*
 * Set all of the TOD/Alarm registers
 * Must be called at splhigh(), and with the RTC properly set up.
 */
#define DP857X_PUTTOD(sc, regs)					\
	do {								\
		int i;							\
									\
		/* stop updates while setting, eg clear start bit */	\
		dp857x_write(sc, MAIN_STATUS, 0x40);			\
		dp857x_write(sc, REAL_TIME_MODE,			\
		    dp857x_read(sc, REAL_TIME_MODE) & 0xF7);		\
									\
		/* write all of the tod/alarm regs */			\
		for (i = DP_FIRSTTODREG; i <= DP_LASTTODREG; i++)	\
			dp857x_write(sc, i, (*regs)[i]);		\
									\
		/* reenable updates, eg set clock start bit */		\
		dp857x_write(sc, REAL_TIME_MODE,			\
		    dp857x_read(sc, REAL_TIME_MODE) | 0x08);		\
	} while (0);

#endif	/*_DP857X_H*/

@


1.4
log
@reisters -> registers
@
text
@d1 1
a1 1
/*	$OpenBSD: dp857xreg.h,v 1.3 2003/06/09 16:34:22 deraadt Exp $ */
@


1.3
log
@more 3/4 cleanup for pefo
@
text
@d1 1
a1 1
/*	$OpenBSD: dp857xreg.h,v 1.2 2002/03/14 01:26:54 millert Exp $ */
d56 1
a56 1
#define	CLK_SUBSECONDS	0x05	/* 1/100 seconds reister	*/
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: dp857xreg.h,v 1.1 1997/02/19 20:17:01 pefo Exp $ */
a13 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.1
log
@NS DP875x series clock chip definition file.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d95 2
a96 2
u_int dp857x_read __P((void *sc, u_int reg));
void dp857x_write __P((void *sc, u_int reg, u_int datum));
@


1.1.24.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: dp857xreg.h,v 1.1 1997/02/19 20:17:01 pefo Exp $ */
d95 2
a96 2
u_int dp857x_read(void *sc, u_int reg);
void dp857x_write(void *sc, u_int reg, u_int datum);
@


1.1.14.1
log
@Merge in -current from about a week ago
@
text
@d95 2
a96 2
u_int dp857x_read(void *sc, u_int reg);
void dp857x_write(void *sc, u_int reg, u_int datum);
@


1.1.14.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d14 6
@


