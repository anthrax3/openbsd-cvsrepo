head	1.28;
access;
symbols
	OPENBSD_4_1:1.16.0.2
	OPENBSD_4_1_BASE:1.16;
locks; strict;
comment	@ * @;


1.28
date	2007.04.05.16.25.25;	author mglocker;	state dead;
branches;
next	1.27;

1.27
date	2007.04.04.19.36.42;	author mglocker;	state Exp;
branches;
next	1.26;

1.26
date	2007.03.31.23.50.59;	author mglocker;	state Exp;
branches;
next	1.25;

1.25
date	2007.03.31.09.48.02;	author mglocker;	state Exp;
branches;
next	1.24;

1.24
date	2007.03.20.21.14.39;	author mglocker;	state Exp;
branches;
next	1.23;

1.23
date	2007.03.20.11.55.36;	author mglocker;	state Exp;
branches;
next	1.22;

1.22
date	2007.03.18.14.40.47;	author mglocker;	state Exp;
branches;
next	1.21;

1.21
date	2007.03.16.13.49.11;	author mglocker;	state Exp;
branches;
next	1.20;

1.20
date	2007.03.16.12.16.31;	author mglocker;	state Exp;
branches;
next	1.19;

1.19
date	2007.03.16.07.05.13;	author mglocker;	state Exp;
branches;
next	1.18;

1.18
date	2007.03.15.14.30.49;	author mglocker;	state Exp;
branches;
next	1.17;

1.17
date	2007.03.12.06.51.16;	author mglocker;	state Exp;
branches;
next	1.16;

1.16
date	2007.03.04.14.27.27;	author mglocker;	state Exp;
branches;
next	1.15;

1.15
date	2007.02.23.10.40.54;	author mglocker;	state Exp;
branches;
next	1.14;

1.14
date	2007.02.22.17.04.31;	author mglocker;	state Exp;
branches;
next	1.13;

1.13
date	2007.02.20.21.24.36;	author mglocker;	state Exp;
branches;
next	1.12;

1.12
date	2007.02.18.09.37.21;	author mglocker;	state Exp;
branches;
next	1.11;

1.11
date	2007.02.18.00.05.39;	author mglocker;	state Exp;
branches;
next	1.10;

1.10
date	2007.01.07.00.29.44;	author mglocker;	state Exp;
branches;
next	1.9;

1.9
date	2007.01.03.18.54.29;	author mglocker;	state Exp;
branches;
next	1.8;

1.8
date	2006.12.30.23.23.41;	author mglocker;	state Exp;
branches;
next	1.7;

1.7
date	2006.12.28.22.23.07;	author mglocker;	state Exp;
branches;
next	1.6;

1.6
date	2006.12.27.14.05.57;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2006.12.06.19.21.45;	author mglocker;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.24.20.27.41;	author mglocker;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.21.11.41.14;	author mglocker;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.17.20.49.27;	author mglocker;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.17.18.58.31;	author mglocker;	state Exp;
branches;
next	;


desc
@@


1.28
log
@After been attacked by Michael Buesch <mb@@bu3sch.de> because we initially
were using some of their routines in the bcw driver, I decided to stop
working on it.  To avoid any further license chit chat I plain drop the
driver.
@
text
@/*	$OpenBSD: bcwreg.h,v 1.27 2007/04/04 19:36:42 mglocker Exp $ */

/*
 * Copyright (c) 2007 Marcus Glocker <mglocker@@openbsd.org>
 * Copyright (c) 2006 Jon Simola <jsimola@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

/* Broadcom BCM43xx */

/*
 * PCI registers defined in the PCI 2.2 specs
 */
#define BCW_PCI_BAR0			0x10

/*
 * SPROM control register
 */
#define BCW_SPROM_CONTROL		0x88

/*
 * PCI Interrupt Configuration Register
 */
#define BCW_PCICFG_ICR			0x94

/*
 * MMIO offsets
 */
#define BCW_MMIO_DMA0_REASON		0x20
#define BCW_MMIO_DMA0_INT_MASK		0x24
#define BCW_MMIO_DMA1_REASON		0x28
#define BCW_MMIO_DMA1_INT_MASK		0x2c
#define BCW_MMIO_DMA2_REASON		0x30
#define BCW_MMIO_DMA2_INT_MASK		0x34
#define BCW_MMIO_DMA3_REASON		0x38
#define BCW_MMIO_DMA3_INT_MASK		0x3c
#define BCW_MMIO_DMA4_REASON		0x40
#define BCW_MMIO_DMA4_INT_MASK		0x44
#define BCW_MMIO_DMA5_REASON		0x48
#define BCW_MMIO_DMA5_INT_MASK		0x4c
#define BCW_MMIO_SBF			0x120	/* Status Bit Field */
#define BCW_MMIO_GIR			0x128	/* Generic Interrupt Reason */
#define BCW_MMIO_GIM			0x12c	/* Generic Interrupt Mask */
#define BCW_MMIO_RAM_CONTROL		0x130
#define BCW_MMIO_RAM_DATA		0x134
#define BCW_MMIO_SHM_CONTROL		0x160	/* Control */
#define BCW_MMIO_SHM_DATA		0x164	/* Data - 32bit */
#define BCW_MMIO_SHM_DATALOW		0x164	/* Data Low - 16bit */
#define BCW_MMIO_SHM_DATA_UNALIGNED	0x166	/* Data High - 16 bit */

#define BCW_MMIO_PHY_RADIO		0x3e2
#define BCW_MMIO_CHANNEL		0x3f0
#define BCW_MMIO_CHANNEL_EXT		0x3f4
#define BCW_MMIO_RADIO_DATA_LOW		0x3fa
#define BCW_MMIO_RADIO_CONTROL		0x3f6
#define BCW_MMIO_RADIO_DATA_HIGH	0x3f8
#define BCW_MMIO_PHY_CONTROL		0x3fc
#define BCW_MMIO_PHY_DATA		0x3fe
#define BCW_MMIO_MACFILTER_CONTROL	0x420
#define BCW_MMIO_MACFILTER_DATA		0x422
#define BCW_MMIO_GPIO_CONTROL		0x49c
#define BCW_MMIO_GPIO_MASK		0x49e
#define BCW_MMIO_POWERUP_DELAY		0x6a8

/*
 * SPROM registers are 16 bit and based at MMIO offset 0x1000
 */
#define BCW_SPROM_BASE			0x1000
#define BCW_SPROM_BOARDFLAGS2		0x1c
#define BCW_SPROM_IL0MACADDR		0x24
#define BCW_SPROM_ET0MACADDR		0x27
#define BCW_SPROM_ET1MACADDR		0x2a
#define BCW_SPROM_ETHPHY		0x2d
#define BCW_SPROM_BOARDREV		0x2e
#define BCW_SPROM_PA0B0			0x2f
#define BCW_SPROM_PA0B1			0x30
#define BCW_SPROM_PA0B2			0x31
#define BCW_SPROM_WL0GPIO0		0x32
#define BCW_SPROM_WL0GPIO2		0x33
#define BCW_SPROM_MAXPWR		0x34
#define BCW_SPROM_PA1B0			0x35
#define BCW_SPROM_PA1B1			0x36
#define BCW_SPROM_PA1B2			0x37
#define BCW_SPROM_IDL_TSSI_TGT		0x38
#define BCW_SPROM_BOARDFLAGS		0x39
#define BCW_SPROM_ANTENNA_GAIN		0x3a
#define BCW_SPROM_VERSION		0x3f

/*
 * SPROM Board Flags
 */
#define BCW_BF_BTCOEXIST		0x0001	/* Bluetooth Co-existance */
#define BCW_BF_PACTRL			0x0002	/* GPIO 9 controls PA */
#define BCW_BF_AIRLINEMODE		0x0004	/* GPIO13 -> radio off LED */
#define BCW_BF_RSSI			0x0008	/* "something RSSI related */
#define BCW_BF_ENETSPI			0x0010	/* EPHY Roboswitch SPI */
#define BCW_BF_XTAL			0x0020	/* XTAL doesn't slow clock */
#define BCW_BF_CCKHIPWR			0x0040	/* HiPower CCK xmission */
#define BCW_BF_ENETADM			0x0080	/* has ADMtek Switch */
#define BCW_BF_ENETVLAN			0x0100	/* VLAN capable - huh? */
#define BCW_BF_AFTERBURNER		0x0200	/* Afterburner capable */
#define BCW_BF_NOPCI			0x0400	/* Board leaves PCI floating */
#define BCW_BF_FEM			0x0800	/* Front End Module support */
#define BCW_BF_EXTLNA			0x1000	/* has external LNA */
#define BCW_BF_HGPA			0x2000	/* has High Gain PA */
#define BCW_BF_BTCMOD			0x4000	/* BTCOEXIST in alt GPIOs */
#define BCW_BF_ALTIQ			0x8000	/* Alternate I/Q settings */

/*
 * GPIO register offset, in both ChipCommon and PCI core
 */
#define BCW_GPIO_CTRL			0x6c

/*
 * SHM Routing
 */
#define BCW_SHM_SHARED			0x0001
#define BCW_SHM_80211			0x0002
#define BCW_SHM_PCM			0x0003
#define BCW_SHM_HWMAC			0x0004
#define BCW_SHM_UCODE			0x0300

/*
 * MAC filter offsets
 */
#define BCW_MACFILTER_SELF		0
#define BCW_MACFILTER_ASSOC		0x0003

/*
 * Chip Common registers
 */
#define BCW_CHIPCOMMON_CAPABILITIES	0x04
#define BCW_CHIPCOMMON_CTL		0x28
#define BCW_CHIPCOMMON_PLLONDELAY	0xB0
#define BCW_CHIPCOMMON_FREFSELDELAY	0xB4
#define BCW_CHIPCOMMON_SLOWCLKCTL	0xB8
#define BCW_CHIPCOMMON_SYSCLKCTL	0xC0

/*
 * PCI core registers
 */
#define BCW_PCICORE_BCAST_ADDR		0x50
#define BCW_PCICORE_BCAST_DATA		0x54
#define BCW_PCICORE_SBTOPCI2		0x108

/*
 * SBTOPCI2 values
 */
#define BCW_SBTOPCI2_PREFETCH		0x4
#define BCW_SBTOPCI2_BURST		0x8
#define BCW_SBTOPCI2_MEMREAD_MULTI	0x20

/*
 * Chip Common capabilities
 */
#define BCW_CAPABILITIES_PCTL		0x00040000
#define BCW_CAPABILITIES_PLLMASK	0x00030000
#define BCW_CAPABILITIES_PLLSHIFT	16
#define BCW_CAPABILITIES_FLASHMASK	0x00000700
#define BCW_CAPABILITIES_FLASHSHIFT	8
#define BCW_CAPABILITIES_EXTBUSPRESENT	0x00000040
#define BCW_CAPABILITIES_UARTGPIO	0x00000020
#define BCW_CAPABILITIES_UARTCLOCKMASK	0x00000018
#define BCW_CAPABILITIES_UARTCLOCKSHIFT	3
#define BCW_CAPABILITIES_MIPSBIGENDIAN	0x00000004
#define BCW_CAPABILITIES_NRUARTSMASK	0x00000003

/*
 * Power control
 */
#define BCW_PCTL_IN			0xb0
#define BCW_PCTL_OUT			0xb4
#define BCW_PCTL_OUTENABLE		0xb8
#define BCW_PCTL_XTAL_POWERUP		0x40
#define BCW_PCTL_PLL_POWERDOWN		0x80

/*
 * Power control clock modes
 */
#define BCW_PCTL_CLK_FAST		0x00
#define BCW_PCTL_CLK_SLOW		0x01
#define BCW_PCTL_CLK_DYNAMIC		0x02
#define BCW_PCTL_FORCE_SLOW		0x0800
#define BCW_PCTL_FORCE_PLL		0x1000
#define BCW_PCTL_DYN_XTAL		0x2000

/*
 * Core IDs
 */
#define BCW_CORE_COMMON_CHIPID		0x0
#define BCW_CORE_COMMON			0x800
#define BCW_CORE_PCI			0x804
#define BCW_CORE_ENET			0x806
#define BCW_CORE_PCMCIA			0x80d
#define BCW_CORE_80211			0x812
#define BCW_CORE_PCIE			0x820
#define BCW_CORE_MIMOPHY		0x821
#define BCW_CORE_NONEXIST		0x8ff

/*
 * Core information registers
 */
#define BCW_CIR_BASE			0xf00
#define BCW_CIR_SBTPSFLAG		(BCW_CIR_BASE + 0x18)
#define BCW_CIR_SBIMSTATE		(BCW_CIR_BASE + 0x90)
#define BCW_CIR_SBINTVEC		(BCW_CIR_BASE + 0x94)
#define BCW_CIR_SBTMSTATELOW		(BCW_CIR_BASE + 0x98)
#define BCW_CIR_SBTMSTATEHIGH		(BCW_CIR_BASE + 0x9c)
#define BCW_CIR_SBIMCONFIGLOW		(BCW_CIR_BASE + 0xa8)
#define BCW_CIR_SB_ID_HI		(BCW_CIR_BASE + 0xfc)

/* sbimconfiglow values/masks */
#define BCW_SBIMCONFIGLOW_STM		0x00000007
#define BCW_SBIMCONFIGLOW_STS		0
#define BCW_SBIMCONFIGLOW_RTM		0x00000070
#define BCW_SBIMCONFIGLOW_RTS		4
#define BCW_SBIMCONFIGLOW_CM		0x00ff0000
#define BCW_SBIMCONFIGLOW_CS		16

/* sbtmstatelow state flags */
#define BCW_SBTMSTATELOW_RESET		0x01
#define BCW_SBTMSTATELOW_REJECT		0x02
#define BCW_SBTMSTATELOW_CLOCK		0x10000
#define BCW_SBTMSTATELOW_FGCLOCK	0x20000

/* sbtmstatehigh state flags */
#define BCW_SBTMSTATEHIGH_SERROR	0x00000001
#define BCW_SBTMSTATEHIGH_BUSY		0x00000004
#define BCW_SBTMSTATEHIGH_TIMEOUT	0x00000020
#define BCW_SBTMSTATEHIGH_COREFLAGS	0x1FFF0000
#define BCW_SBTMSTATEHIGH_DMA64BIT	0x10000000
#define BCW_SBTMSTATEHIGH_GATEDCLK	0x20000000
#define BCW_SBTMSTATEHIGH_BISTFAILED	0x40000000
#define BCW_SBTMSTATEHIGH_BISTCOMPLETE	0x80000000

/* sbimstate flags */
#define BCW_SBIMSTATE_IB_ERROR		0x20000
#define BCW_SBIMSTATE_TIMEOUT		0x40000

/*
 * PHY Versioning
 */
#define BCW_PHY_TYPEA			0x0	/* 802.11a PHY */
#define BCW_PHY_TYPEB			0x1	/* 802.11b PHY */
#define BCW_PHY_TYPEG			0x2	/* 802.11g PHY */
#define BCW_PHY_TYPEN			0x4	/* 802.11n PHY */

/*
 * PHY registers
 */
#define BCW_PHY_ILT_A_CTRL		0x0072
#define BCW_PHY_ILT_A_DATA1		0x0073
#define BCW_PHY_G_LO_CONTROL		0x0810
#define BCW_PHY_ILT_G_CTRL		0x0472
#define BCW_PHY_ILT_G_DATA1		0x0473
#define BCW_PHY_G_CRS			0x0429
#define BCW_PHY_A_CRS			0x0029
#define BCW_PHY_RADIO_BITFIELD		0x0401
#define BCW_PHY_A_PCTL			0x007b
#define BCW_PHY_G_PCTL			0x0029
#define BCW_PHY_NRSSILT_CTRL		0x0803
#define BCW_PHY_NRSSILT_DATA		0x0804

/*
 * Radio Registers
 */
#define BCW_RADIO_ID			0x01

/*
 * Status Bit Fields
 */
#define BCW_SBF_MAC_ENABLED		0x00000001
#define BCW_SBF_CORE_READY		0x00000004
#define BCW_SBF_400_MAGIC		0x00000400
#define BCW_SBF_REGISTER_BYTESWAP	0x00010000
#define BCW_SBF_ADHOC			0x00020000
#define BCW_SBF_AP			0x00040000
#define BCW_SBF_RADIOREG_LOCK		0x00080000
#define BCW_SBF_MONITOR			0x00400000 
#define BCW_SBF_PROMISC			0x01000000
#define BCW_SBF_PS1			0x02000000
#define BCW_SBF_PS2			0x04000000
#define BCW_SBF_SSID_BCAST		0x08000000
#define BCW_SBF_TIME_UPDATE		0x10000000

/*
 * Microcode
 */
#define BCW_UCODE_REVISION		0x0000
#define BCW_UCODE_PATCHLEVEL		0x0002
#define BCW_UCODE_DATE			0x0004
#define BCW_UCODE_TIME			0x0006
#define BCW_UCODE_STATUS		0x0040

/*
 * Microcode Flags Bitfield
 *
 * http://bcm-specs.sipsolutions.net/MicrocodeFlagsBitfield
 */
#define BCW_UCODEFLAGS_OFFSET		0x005e

#define BCW_UCODEFLAG_AUTODIV		0x0001
#define BCW_UCODEFLAG_UNKBGPHY		0x0002
#define BCW_UCODEFLAG_UNKBPHY		0x0004
#define BCW_UCODEFLAG_UNKGPHY		0x0020
#define BCW_UCODEFLAG_UNKPACTRL		0x0040
#define BCW_UCODEFLAG_JAPAN		0x0080

/*
 * Generic interrupt reasons
 */
#define BCW_INTR_READY			(1 << 0)
#define BCW_INTR_BEACON			(1 << 1)
#define BCW_INTR_PS			(1 << 2)
#define BCW_INTR_REG124			(1 << 5)
#define BCW_INTR_PMQ			(1 << 6)
#define BCW_INTR_PIO_WORKAROUND		(1 << 8)
#define BCW_INTR_XMIT_ERROR		(1 << 11)
#define BCW_INTR_RX			(1 << 15)
#define BCW_INTR_SCAN			(1 << 16)
#define BCW_INTR_NOISE			(1 << 18)
#define BCW_INTR_XMIT_STATUS		(1 << 29)

#define BCW_INTR_ALL			0xffffffff
#define BCW_INTR_INITIAL		(BCW_INTR_PS |		\
					 BCW_INTR_REG124 |	\
					 BCW_INTR_PMQ |		\
					 BCW_INTR_XMIT_ERROR |	\
					 BCW_INTR_RX |		\
					 BCW_INTR_SCAN |	\
					 BCW_INTR_NOISE |	\
					 BCW_INTR_XMIT_STATUS)

/*
 * XXX 0x300 PIO Register space
 */
#define BCW_RADIO_BASEBAND		0x3e6	/* Baseband Attenuation */

/*
 * XXX Do we really need those ...
 */
#define BCW_GPIOI			0xb0
#define BCW_GPIOO			0xb4
#define BCW_GPIOE			0xb8
#define BCW_ADDR_SPACE0			0x80
/* transmit control bits */
#define BCW_DMA_TXADDR			0x0204
#define BCW_DMA_RXADDR			0x0214
/* receive status bits */
#define RS_CD_MASK			0x0fff
/* SiliconBackplane registers 0xea8 through 0xffc */
#define SBIM_REJECT			0x0200000
#define SBIM_INBANDERR			0x20000
#define SBIM_TIMEOUT			0x40000
#define SBTML_RESET			0x1
#define SBTML_REJ			0x6
#define SBTML_REJ22			0x2
#define SBTML_REJ23			0x4
#define SBTML_CLK			0x10000
#define SBTML_FGC			0x20000
#define SBTML_80211FLAG			0x40000
#define SBTML_80211PHY			0x20000000
#define SBTMH_SERR			0x1
#define SBTMH_BUSY			0x4
#define SBREV_MASK			0xf0000000
#define SBREV_MASK_SHIFT		28
#define SBTPS_BACKPLANEFLAGMASK		0x3f
#define BCW_SBTMSTATEHI			0x0f9C
#define BCW_SBTPSFLAG			0x0f18
#define BCW_SBIMSTATE			0x0f90
#define BCW_SBTMSTATELOW		0x0f98
#define BCW_CIR_SBID_LO			0xff8
#define BCW_CIR_SBID_LO_INITIATOR	0x80
#define BCW_CIR_SBID_HI			0xffc

/*
 * XXX Do we really need those ...
 */
#define BCW_DMA_TXCONTROL(x)		(0x200 + (x * 0x20))
#define BCW_DMA_RXCONTROL(x)		(0x200 + (x * 0x20))
#define BCW_DMA_RXSTATUS(x)		(0x20c + (x * 0x20))

/*
 * Core select address macro
 */
#define BCW_CORE_SELECT(x)		(0x18000000 + (x * 0x1000))

/*
 * 16-bit and 32-bit register read/write
 */
#define BCW_READ16(sc, reg) \
	bus_space_read_2((sc)->sc_iot, (sc)->sc_ioh, (reg))
#define BCW_READ(sc, reg) \
	bus_space_read_4((sc)->sc_iot, (sc)->sc_ioh, (reg))
#define BCW_WRITE16(sc, reg, val) \
	bus_space_write_2((sc)->sc_iot, (sc)->sc_ioh, (reg), (val))
#define BCW_WRITE(sc, reg, val) \
	bus_space_write_4((sc)->sc_iot, (sc)->sc_ioh, (reg), (val))
@


1.27
log
@Debugging.  Fix a lot wrong registers.  Fix a couple of /* XXX */ and
/* TODO */ for the radio / PHY init.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.26 2007/03/31 23:50:59 mglocker Exp $ */
@


1.26
log
@Since I spent some work on this beast, too, I allow myself to add me
to the drivers copyright note.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.25 2007/03/31 09:48:02 mglocker Exp $ */
d75 1
@


1.25
log
@Enable interrupts.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.24 2007/03/20 21:14:39 mglocker Exp $ */
d4 1
d6 1
@


1.24
log
@Fix crystal on/off routine (no more panic).  Add two new routines to
set and clear the device's MAC filter.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.23 2007/03/20 11:55:36 mglocker Exp $ */
d32 5
d39 1
d41 1
d43 1
d45 1
d47 1
d49 1
d139 39
d185 10
@


1.23
log
@Read the whole SPROM content with a single routine to a own sprom struct.

For those people who have reported about broken MAC address at attach
time, this should fix the problem.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.22 2007/03/18 14:40:47 mglocker Exp $ */
d58 2
d120 6
@


1.22
log
@o Add bcw_80211_core_init() according to
  http://bcm-specs.sipsolutions.net/80211Init.
o Add a rewritten version of bcw_core_reset() called bcw_80211_core_reset()
  according to http://bcm-specs.sipsolutions.net/80211CoreReset.  This
  will probably replace bcw_core_reset(), but I need more verification
  first.
o Add bcw_core_enable() and bcw_core_disable().  There seems to be
  devices which contain several 802.11 cores.  The unused needs to be
  disabled.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.21 2007/03/16 13:49:11 mglocker Exp $ */
d62 1
a62 1
 * XXX SPROM registers are 16 bit and based at MMIO offset 0x1000
d65 19
a83 15
#define BCW_SPROM_SUBPRODID		0x1004	/* Subsystem Product ID */
#define BCW_SPROM_SUBVENID		0x1006	/* Subsystem Vendor ID */
#define BCW_SPROM_PRODID		0x1008	/* Product ID */
#define BCW_SPROM_IL0MACADDR		0x1048	/* 802.11b/g MAC */
#define BCW_SPROM_ET0MACADDR		0x104e	/* ethernet MAC */
#define BCW_SPROM_ET1MACADDR		0x1054	/* 802.11a MAC */
#define BCW_SPROM_PA0B0			0x105e
#define BCW_SPROM_PA0B1			0x1060
#define BCW_SPROM_PA0B2			0x1062
#define BCW_SPROM_PAMAXPOWER		0x1066	/* 7-0 for A, 15-8 for B/G */
#define BCW_SPROM_PA1B0			0x106a
#define BCW_SPROM_PA1B1			0x106c
#define BCW_SPROM_PA1B2			0x106e
#define BCW_SPROM_IDLETSSI		0x1070  /* As below */
#define BCW_SPROM_BOARDFLAGS		0x1072	/* lower 16 bits */
a315 1
#define BCW_SPROM_ANTGAIN		0x1074
@


1.21
log
@Remove a lot of dead code and nonexisting registers.  This stuff was mostly
copied over from bce(4) and is obsolete or needs to be rewritten.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.20 2007/03/16 12:16:31 mglocker Exp $ */
d48 1
a48 1
#define BCW_MMIO_SHM_DATAHIGH		0x166	/* Data High - 16 bit */
d141 3
d145 31
d237 8
a244 2
#define BCW_SHM_MICROCODEFLAGSLOW	0x005e
#define BCW_SHM_MICROCODEFLAGSAUTODIV	0x0001
@


1.20
log
@Better (constant) register naming.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.19 2007/03/16 07:05:13 mglocker Exp $ */
a272 46

/*
 * XXX Dead code (also dead in bcw.c), please remove me soon
 */
#if 0
#define BCW_INT_STS			0x20
#define BCW_REG0_WIN			0x80			/* XXX */
#define BCW_PCICR			0x94			/* XXX */
#define BCW_SONICS_WIN			0x18002000		/* XXX */
#define BCW_SPCI_TR2			0x0108			/* XXX */
#define SBTOPCI_PREF			0x4			/* XXX */
#define SBTOPCI_BURST			0x8			/* XXX */
#define BCW_SBINTVEC			0x0f94			/* XXX */
#define SBIV_ENET0			0x02			/* XXX */
#define I_TO				0x00000080		/* XXX */
#define I_PC				0x00000400		/* XXX */
#define I_PD				0x00000800		/* XXX */
#define I_DE				0x00001000		/* XXX */
#define I_RU				0x00002000 		/* XXX */
#define I_RO				0x00004000		/* XXX */
#define I_XU				0x00008000		/* XXX */
#define I_RI				0x00010000		/* XXX */
#define I_XI				0x01000000		/* XXX */
#define BCW_MACCTL			0x00A8			/* XXX */
#define BCW_EMC_CRC32_ENAB		0x00000001		/* XXX */
#define BCW_EMC_PDOWN			0x00000004		/* XXX */
#define BCW_EMC_LED			0x000000e0		/* XXX */
#define BCW_DMAI_CTL			0x0100			/* XXX */
#define BCW_DMA_TXCTL			0x0200			/* XXX */
#define XC_XE				0x1			/* XXX */
#define BCW_DMA_DPTR			0x0208			/* XXX */
#define BCW_DMA_RXCTL			0x0210			/* XXX */
#define BCW_DMA_RXDPTR			0x0218			/* XXX */
#define BCW_RX_CTL			0x0400			/* XXX */
#define ERC_DB				0x00000001		/* XXX */
#define ERC_AM				0x00000002		/* XXX */
#define ERC_PE				0x00000008		/* XXX */
#define BCW_RX_MAX			0x0404			/* XXX */
#define BCW_TX_MAX			0x0408			/* XXX */
#define BCW_FILT_CTL			0x0428			/* XXX */
#define BCW_ENET_CTL			0x042C			/* XXX */
#define EC_EE				0x00000001		/* XXX */
#define EC_ED				0x00000002		/* XXX */
#define BCW_TX_WATER			0x0434			/* XXX */
#define BCW_DMA_TXSTATUS(x)		(0x20c + (x * 0x20))	/* XXX */
#endif
@


1.19
log
@First super massive register cleanup run;  group/sort registers,
remove lots of obsolete registers, mark unused registers for deletion,
mark suspect registers for closer verification, comments ...
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.18 2007/03/15 14:30:49 mglocker Exp $ */
d34 9
a42 10
#define BCW_INT_STS			0x20
#define BCW_DMA0_INT_MASK		0x24
#define BCW_DMA1_INT_MASK		0x2c
#define BCW_DMA2_INT_MASK		0x34
#define BCW_DMA3_INT_MASK		0x3c
#define BCW_DMA4_INT_MASK		0x44
#define BCW_DMA5_INT_MASK		0x4c
#define BCW_SBF				0x120	/* Status Bit Field */
#define BCW_GIR				0x128	/* Generic Interrupt Reason */
#define BCW_GIM				0x12c	/* Generic Interrupt Mask */
d45 4
a48 4
#define BCW_SHM_CONTROL			0x160	/* Control */
#define BCW_SHM_DATA			0x164	/* Data - 32bit */
#define BCW_SHM_DATALOW			0x164	/* Data Low - 16bit */
#define BCW_SHM_DATAHIGH		0x166	/* Data High - 16 bit */
d53 5
a57 6
#define BCW_RADIO_DATA			0x3fa
#define BCW_RADIO_DATALOW		0x3fa
#define BCW_RADIO_CONTROL		0x3f6
#define BCW_RADIO_DATAHIGH		0x3f8
#define BCW_PHY_CONTROL			0x3fc
#define BCW_PHY_DATA			0x3fe
d59 1
a59 1
#define BCW_GPIO_MASK			0x49e
d64 1
a64 1
#define BCW_MMIO_BASE			0x1000
d109 5
a113 5
#define BCW_SHM_CONTROL_SHARED		0x0001
#define BCW_SHM_CONTROL_80211		0x0002
#define BCW_SHM_CONTROL_PCM		0x0003
#define BCW_SHM_CONTROL_HWMAC		0x0004
#define BCW_SHM_CONTROL_MCODE		0x0300
d118 5
a122 5
#define BCW_PCICI			0xb0
#define BCW_PCICO			0xb4
#define BCW_PCICOE			0xb8
#define BCW_XTALPOWERUP			0x40
#define BCW_PLLPOWERDOWN		0x80
a153 1
#define BCW_PHY_G_LO_CONTROL		0x0810
d156 1
d162 2
a165 2
#define BCW_PHY_A_PCTL			0x007b
#define BCW_PHY_G_PCTL			0x0029
d278 1
@


1.18
log
@Set chip operation mode in the init path.  Add first bits to enable
interrupts at some point.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.17 2007/03/12 06:51:16 mglocker Exp $ */
d21 3
a23 1
/* PCI registers defined in the PCI 2.2 spec. */
d26 3
a28 8
/* Saved Interrupt mask */
#define BCW_SAVEDINTRMASK		0xb007a864

/* Sonics SB register access */
#define BCW_ADDR_SPACE0			0x80
#define BCW_ADDR_SPACE1			0x84
#define BCW_REG0_WIN			0x80
#define BCW_REG1_WIN			0x84
a29 10
#define BCW_ADDR1_BURST_CONTROL		0x8C
#define	BCW_PCII			0x90
#define BCW_PCICR			0x94
#define BCW_BI				0x98
#define BCW_PCICI			0xB0
#define BCW_PCICO			0xB4
#define BCW_PCICOE			0xB8
#define BCW_GPIOI			0xB0 /* GPIO IN */
#define BCW_GPIOO			0xB4 /* GPIO OUT */
#define BCW_GPIOE			0xB8 /* GPIO ENABLE */
d31 3
a33 43
/* Some bitmasks */
#define BCW_XTALPOWERUP			0x40
#define BCW_PLLPOWERDOWN		0x80

/* Core select address macro */
#define BCW_CORE_SELECT(x)		(0x18000000 + (x * 0x1000))

/* Core information registers */
#define BCW_CIR_BASE			0xf00
#define BCW_CIR_SBTMSTATELOW		(BCW_CIR_BASE + 0x98)

/* Some Core Types */
#define BCW_CORE_COMMON			0x800
#define BCW_CORE_PCI			0x804
#define BCW_CORE_ENET			0x806
#define BCW_CORE_PCMCIA			0x80d
#define BCW_CORE_80211			0x812
#define BCW_CORE_PCIE			0x820
#define BCW_CORE_MIMOPHY		0x821
#define BCW_CORE_NONEXIST		0x8ff

#define BCW_CORE_COMMON_CHIPID		0x0

#define BCW_SONICS_WIN			0x18002000

/* Sonics PCI control */
#define BCW_SPCI_TR2			0x0108	/* Sonics to PCI translation
					         * 2 */
/* bit defines */
#define SBTOPCI_PREF			0x4	/* prefetch enable */
#define SBTOPCI_BURST			0x8	/* burst enable */
#define BCW_SBINTVEC			0x0f94
/* interrupt bits */
#define SBIV_ENET0			0x02	/* enable for enet 0 */
#define SBIV_ENET1			0x40	/* enable for enet 1 */

/* Host Interface Registers */

#define BCW_DEVCTL			0x0000		/* device control */
/* device control bits */
#define BCW_DC_IP			0x00000400	/* internal phy present */
#define BCW_DC_ER			0x00008000	/* ephy reset */
/* Interrupt Control */
d41 3
a43 125

/* bits for both status, and mask */
#define I_TO				0x00000080	/* general timeout */
#define I_PC				0x00000400	/* descriptor error */
#define I_PD				0x00000800	/* data error */
#define I_DE				0x00001000	/* desc. protocol error */
#define I_RU				0x00002000	/* rx desc. underflow */
#define I_RO				0x00004000	/* rx fifo overflow */
#define I_XU				0x00008000	/* tx fifo underflow */
#define I_RI				0x00010000	/* receive interrupt */
#define I_XI				0x01000000	/* transmit interrupt */

/* Ethernet MAC Control */
#define BCW_MACCTL			0x00A8	/* ethernet mac control */
/* mac control bits */
#define BCW_EMC_CRC32_ENAB		0x00000001	/* crc32 generation */
#define BCW_EMC_PDOWN			0x00000004	/* PHY powerdown */
#define BCW_EMC_EDET			0x00000008	/* PHY energy detect */
#define BCW_EMC_LED			0x000000e0	/* PHY LED control */

/* DMA Interrupt control */
#define BCW_DMAI_CTL			0x0100

/* DMA registers */
#define BCW_DMA_TXCTL			0x0200	/* transmit control */
/* transmit control bits */
#define XC_XE				0x1	/* transmit enable */
#define XC_LE				0x4	/* loopback enable */
#define BCW_DMA_TXADDR			0x0204	/* tx ring base address */
#define BCW_DMA_DPTR			0x0208	/* last tx descriptor */
//#define BCW_DMA_TXSTATUS		0x020C	/* active desc, etc */
#define BCW_DMA_RXCTL			0x0210	/* enable, etc */
#define BCW_DMA_RXADDR			0x0214	/* rx ring base address */
#define BCW_DMA_RXDPTR			0x0218	/* last descriptor */
//#define BCW_DMA_RXSTATUS		0x021C	/* active desc, etc */
/* receive status bits */
#define RS_CD_MASK			0x0fff	/* current descriptor pointer */
#define RS_DMA_IDLE			0x2000	/* DMA is idle */
#define RS_ERROR			0xf0000	/* had an error */

/* Ethernet MAC control registers */
#define BCW_RX_CTL			0x0400		/* receive config */
/* config bits */
#define ERC_DB				0x00000001	/* disable broadcast */
#define ERC_AM				0x00000002	/* rx all multicast */
#define ERC_PE				0x00000008	/* promiscuous enable */

#define BCW_RX_MAX			0x0404		/* max packet length */
#define BCW_TX_MAX			0x0408
#define BCW_MI_CTL			0x0410
#define BCW_MI_COMM			0x0414
#define BCW_MI_STS			0x041C
/* mii status bits */
#define BCW_MIINTR			0x00000001	/* mii mdio interrupt */

#define BCW_FILT_LOW			0x0420		/* mac low 4 bytes */
#define BCW_FILT_HI			0x0424		/* mac hi 2 bytes */
#define BCW_FILT_CTL			0x0428		/* packet filter ctrl */
#define BCW_ENET_CTL			0x042C
/* bits for mac control */
#define EC_EE				0x00000001	/* emac enable */
#define EC_ED				0x00000002	/* disable emac */
#define EC_ES				0x00000004	/* soft reset emac */
#define EC_EP				0x00000008	/* external phy */
#define BCW_TX_CTL			0x0430
/* bits for transmit control */
#define EXC_FD				0x00000001	/* full duplex */
#define BCW_TX_WATER			0x0434		/* tx watermark */

/* statistics counters */
#define BCW_RX_PKTS			0x058C

/* SiliconBackplane registers 0xea8 through 0xffc */
#define BCW_SBTPSFLAG			0x0f18
#define SBTPS_BACKPLANEFLAGMASK		0x3f
#define SBTPS_INT_ALWAYS		0x40		/* Interrupt always sent on backplane */
#define BCW_SBIMSTATE			0x0f90
#define SBIM_REJECT			0x0200000
#define SBIM_INBANDERR			0x20000		/* Inband Error */
#define SBIM_TIMEOUT			0x40000		/* Timeout */
#define BCW_SBTMSTATELOW		0x0f98
#define SBTML_RESET			0x1		/* reset */
#define SBTML_REJ			0x6		/* reject */
#define SBTML_REJ22			0x2		/* v2.2 Reject bit */
#define SBTML_REJ23			0x4		/* v2.3 Reject bit */
#define SBTML_CLK			0x10000		/* clock enable */
#define SBTML_FGC			0x20000		/* force gated clocks on */
#define SBTML_80211FLAG			0x40000		/* core specific flag */
#define SBTML_80211PHY			0x20000000	/* Attach PHY */
#define BCW_SBTMSTATEHI			0x0f9C
#define SBTMH_SERR			0x1		/* S Error */
#define SBTMH_INT			0x2
#define SBTMH_BUSY			0x4

#define BCW_CIR_SBID_LO			0xff8
#define BCW_CIR_SBID_LO_INITIATOR	0x80
#define SBREV_MASK			0xf0000000	/* 1 = v2.3, 0 <= v2.2 */
#define SBREV_MASK_SHIFT		28
#define BCW_CIR_SBID_HI			0xffc

/*
 * MMIO Registers by offset, followed by indented bitmasks
 */
#define BCW_SPROM_CONTROL		0x88		/* SPROM Control register */

#define BCW_SBF				0x120		/* MIMO - Status Bit Field */
#define BCW_SBF_MAC_ENABLED		0x00000001	/* Set when mac enabled */
#define BCW_SBF_CORE_READY		0x00000004	/* set after core reset/enabled */
#define BCW_SBF_400_MAGIC		0x00000400	/* MAGIC */
#define BCW_SBF_REGISTER_BYTESWAP	0x00010000	/* xfer regs are byteswapped in hw */
#define  BCW_SBF_ADHOC			0x00020000	/* Operating mode is not adhoc */
#define BCW_SBF_AP			0x00040000	/* Device is in AP mode */
#define BCW_SBF_RADIOREG_LOCK		0x00080000	/* Radio Registers locked for use */
#define BCW_SBF_MONITOR			0x00400000	/* Pass HW handled control frames 
							 * to driver, needs PROMISC also */
#define BCW_SBF_PROMISC			0x01000000	/* Device is in promiscuous mode */
#define BCW_SBF_PS1			0x02000000	/* Power saving bit 1 - unknown */
#define BCW_SBF_PS2			0x04000000	/*  bit 2 - Device is awake */
#define BCW_SBF_SSID_BCAST		0x08000000	/* set = SSID bcast is disabled
							 * unset = SSID bcast enabled */
#define BCW_SBF_TIME_UPDATE		0x10000000	/* Related to TSF updates */

#define BCW_GIR				0x128	/* MIMO - Generic Interrupt Reason */
#define BCW_GIM				0x12c	/* MMIO - Generic Interrupt Mask */

a45 1

a49 11
#define BCW_SHM_CONTROL_SHARED		0x0001	/* Select SHM Routing shared memory */
#define BCW_SHM_CONTROL_80211		0x0002	/* Select 80211 settings */
#define BCW_SHM_CONTROL_PCM		0x0003	/* Select PCM data */
#define BCW_SHM_CONTROL_HWMAC		0x0004	/* Security Hardware MAC Address list */
#define BCW_SHM_CONTROL_MCODE		0x0300	/* Microcode */
#define BCW_SHM_CONTROL_INIMCODE	0x0301	/* Initial Value Microcode? */
/* SHM Addresses */
#define BCW_SHM_MICROCODEFLAGSLOW	0x005e	/* Flags for Microcode ops */
#define BCW_SHM_MICROCODEFLAGSHIGH	0x0060	/* Flags for Microcode ops */
#define BCW_SHM_MICROCODEFLAGSAUTODIV	0x0001
/* http://bcm-specs.sipsolutions.net/MicrocodeFlagsBitfield */
d51 11
a61 49
/* 0x200 DMA Register space, there are 6 controllers */
/* 32 bit DMA controllers */
#define BCW_DMA_TXCONTROL(x)		(0x200 + (x * 0x20))
						/* DMA Control Word*/
#define BCW_DMA_TXRINGADDR(x)		(0x204 + (x * 0x20))
						/* Ring Address */
#define BCW_DMA_TXSTOPADDR(x)		(0x208 + (x * 0x20))
						/* Last Descriptor */
#define BCW_DMA_TXSTATUS(x)		(0x20c + (x * 0x20))
						/* Transmit Status Word */
#define BCW_DMA_RXCONTROL(x)		(0x200 + (x * 0x20))
						/* DMA Control Word*/
#define BCW_DMA_RXRINGADDR(x)		(0x204 + (x * 0x20))
						/* Ring Address */
#define BCW_DMA_RXSTOPADDR(x)		(0x208 + (x * 0x20))
						/* Last descriptor */
#define BCW_DMA_RXSTATUS(x)		(0x20c + (x * 0x20))
						/* Receive Status Word */
/* 64 bit DMA controllers */
#define BCW_DMA64_TXCONTROL(x)		(0x200 + (x * 0x40))
						/* DMA control Word */
#define BCW_DMA64_TXSTOPADDR(x)		(0x204 + (x * 0x40))
						/* Last Descriptor */
#define BCW_DMA64_TXRINGADDRLOW(x)	(0x208 + (x * 0x40))
						/* Low 32 bits Ring Address */
#define BCW_DMA64_TXRINGADDRHIGH(x)	(0x20c + (x * 0x40))
						/* High 32 bits Ring Address */
#define BCW_DMA64_TXSTATUS(x)		(0x210 + (x * 0x40))
						/* Transmit Status State */
#define BCW_DMA64_TXERROR(x)		(0x214 + (x * 0x40))
						/* Transmit Status Error */
#define BCW_DMA64_RXCONTROL(x)		(0x220 + (x * 0x40))
						/* DMA control Word */
#define BCW_DMA64_RXSTOPADDR(x)		(0x224 + (x * 0x40))
						/* Last Descriptor */
#define BCW_DMA64_RXRINGADDRLOW(x)	(0x228 + (x * 0x40))
						/* Low 32 bits Ring Address */
#define BCW_DMA64_RXRINGADDRHIGH(x)	(0x22c + (x * 0x40))
						/* High 32 bits Ring Address */
#define BCW_DMA64_RXSTATUS(x)		(0x230 + (x * 0x40))
						/* Transmit Status State */
#define BCW_DMA64_RXERROR(x)		(0x234 + (x * 0x40))
						/* Transmit Status Error */

#define BCW_DMA_CONTROL_ENABLE		0x1	/* Enable */
#define BCW_DMA_CONTROL_SUSPEND		0x2	/* Suspend Request */
#define BCW_DMA_CONTROL_LOOPBACK	0x4	/* Loopback Enable */
#define BCW_DMA_CONTROL_FLUSH		0x10	/* Flush Request */
#define BCW_DMA_CONTROL_ADDREXT		0x30000	/* Address Extension */
d63 3
a65 12
/* 0x300 PIO Register space */
#define BCW_RADIO_BASEBAND		0x3e6	/* Baseband Attenuation */
#define BCW_RADIO_CONTROL		0x3f6	/* Control - 16bit */
#define BCW_RADIO_DATA			0x3fa	/* Data - 16bit */
#define BCW_RADIO_DATALOW		0x3fa	/* Data Low - 16bit */
#define BCW_RADIO_DATAHIGH		0x3f8	/* Data High - 16 bit */
#define BCW_RADIO_ID			0x01	/* Radio ID offset */

#define BCW_PHY_CONTROL			0x3fc	/* Control - 16bit */
#define BCW_PHY_DATA			0x3fe	/* Data - 16bit */

/* SPROM registers are 16 bit and based at MMIO offset 0x1000 */
a72 1

d82 4
d103 41
a143 2
#define BCW_SPROM_ANTGAIN		0x1074	/* bits 7-0 for an A PHY
						   bits 15-8 for B/G PHYs */
d145 3
d153 58
a210 1
/* generic interrupt reasons */
d233 4
a236 6
/* firmware revision informations */
#define BCW_UCODE_REVISION		0x0000
#define BCW_UCODE_PATCHLEVEL		0x0002
#define BCW_UCODE_DATE			0x0004
#define BCW_UCODE_TIME			0x0006
#define BCW_UCODE_STATUS		0x0040
d238 37
a274 1
#define BCW_PHY_RADIO_BITFIELD		0x0401
d276 44
a319 3
/* GPIO */
#define BCW_GPIO_MASK			0x49e
#define BCW_GPIO_CTRL			0x6c
d321 6
a326 3
#define BCW_MMIO_PHY_RADIO		0x3e2
#define BCW_MMIO_CHANNEL		0x3f0
#define BCW_MMIO_CHANNEL_EXT		0x3f4
d328 4
a331 17
#define BCW_MMIO_GPIO_CONTROL		0x49c

/* LEDS */
#define BCW_NR_LEDS			4

/* PHY registers */
#define BCW_PHY_G_LO_CONTROL		0x0810
#define BCW_PHY_ILT_A_CTRL		0x0072
#define BCW_PHY_ILT_A_DATA1		0x0073
#define BCW_PHY_ILT_G_CTRL		0x0472
#define BCW_PHY_ILT_G_DATA1		0x0473
#define BCW_PHY_G_CRS			0x0429
#define BCW_PHY_A_CRS			0x0029
#define BCW_PHY_NRSSILT_CTRL		0x0803
#define BCW_PHY_NRSSILT_DATA		0x0804
#define BCW_PHY_A_PCTL			0x007b
#define BCW_PHY_G_PCTL			0x0029
d333 3
@


1.17
log
@Finish chip base initialization.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.16 2007/03/04 14:27:27 mglocker Exp $ */
d217 2
d344 20
@


1.16
log
@Fix panic caused by bcw_leds_switch_all() because reading from wrong
register.  Noted while testing on sparc64.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.15 2007/02/23 10:40:54 mglocker Exp $ */
d51 4
d87 8
a94 2
#define BCW_INT_STS			0x0020
#define BCW_INT_MASK			0x0024
d233 1
d349 2
@


1.15
log
@Complement bcw_phy_inita(), add bcw_radio_init2060().
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.14 2007/02/22 17:04:31 mglocker Exp $ */
d346 2
@


1.14
log
@Halftime for PHY init code, another ~1000 new lines.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.13 2007/02/20 21:24:36 mglocker Exp $ */
d357 1
d360 1
@


1.13
log
@~1052 lines of new PHY radio initialization code and no end in sight.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.12 2007/02/18 09:37:21 mglocker Exp $ */
d207 2
d345 1
d359 1
@


1.12
log
@Start to add radio PHY initialization routines.

Rename some radio variable names to names which doesn't confuse me
everytime I have to use them.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.11 2007/02/18 00:05:39 mglocker Exp $ */
d346 10
@


1.11
log
@Turn radio (version 2050) on.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.10 2007/01/07 00:29:44 mglocker Exp $ */
d341 1
@


1.10
log
@Initialize GPIO.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.9 2007/01/03 18:54:29 mglocker Exp $ */
d340 2
@


1.9
log
@After the firmware has been loaded to the chip, read the exact firmware
revision from the chip and print it in a debug line.  Verify that the
firmware has the right revision for us.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.8 2006/12/30 23:23:41 mglocker Exp $ */
d336 7
@


1.8
log
@spacing.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.7 2006/12/28 22:23:07 mglocker Exp $ */
d326 10
@


1.7
log
@Finish core enumeration, break out core change and reset functions.

From Jon Simola <simola@@mecha.com>.  Diff merged together by me with
last changes from jsg@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.6 2006/12/27 14:05:57 jsg Exp $ */
d158 2
a159 2
#define  SBTPS_BACKPLANEFLAGMASK	0x3f
#define  SBTPS_INT_ALWAYS		0x40		/* Interrupt always sent on backplane */
d161 3
a163 3
#define  SBIM_REJECT			0x0200000
#define  SBIM_INBANDERR			0x20000		/* Inband Error */
#define  SBIM_TIMEOUT			0x40000		/* Timeout */
d165 8
a172 8
#define  SBTML_RESET			0x1		/* reset */
#define  SBTML_REJ			0x6		/* reject */
#define  SBTML_REJ22			0x2		/* v2.2 Reject bit */
#define  SBTML_REJ23			0x4		/* v2.3 Reject bit */
#define  SBTML_CLK			0x10000		/* clock enable */
#define  SBTML_FGC			0x20000		/* force gated clocks on */
#define  SBTML_80211FLAG		0x40000		/* core specific flag */
#define  SBTML_80211PHY			0x20000000	/* Attach PHY */
d174 3
a176 3
#define  SBTMH_SERR			0x1		/* S Error */
#define  SBTMH_INT			0x2
#define  SBTMH_BUSY			0x4
d179 3
a181 3
#define  BCW_CIR_SBID_LO_INITIATOR	0x80
#define  SBREV_MASK			0xf0000000	/* 1 = v2.3, 0 <= v2.2 */
#define  SBREV_MASK_SHIFT		28
d190 4
a193 4
#define  BCW_SBF_MAC_ENABLED		0x00000001	/* Set when mac enabled */
#define  BCW_SBF_CORE_READY		0x00000004	/* set after core reset/enabled */
#define  BCW_SBF_400_MAGIC		0x00000400	/* MAGIC */
#define  BCW_SBF_REGISTER_BYTESWAP	0x00010000	/* xfer regs are byteswapped in hw */
d195 3
a197 3
#define  BCW_SBF_AP			0x00040000	/* Device is in AP mode */
#define  BCW_SBF_RADIOREG_LOCK		0x00080000	/* Radio Registers locked for use */
#define  BCW_SBF_MONITOR		0x00400000	/* Pass HW handled control frames 
d199 4
a202 4
#define  BCW_SBF_PROMISC		0x01000000	/* Device is in promiscuous mode */
#define  BCW_SBF_PS1			0x02000000	/* Power saving bit 1 - unknown */
#define  BCW_SBF_PS2			0x04000000	/*  bit 2 - Device is awake */
#define  BCW_SBF_SSID_BCAST		0x08000000	/* set = SSID bcast is disabled
d204 1
a204 1
#define  BCW_SBF_TIME_UPDATE		0x10000000	/* Related to TSF updates */
a272 1

a273 1

d279 1
a279 1
#define  BCW_RADIO_ID			0x01	/* Radio ID offset */
d302 16
a317 16
#define  BCW_BF_BTCOEXIST		0x0001	/* Bluetooth Co-existance */
#define  BCW_BF_PACTRL			0x0002	/* GPIO 9 controls PA */
#define  BCW_BF_AIRLINEMODE		0x0004	/* GPIO13 -> radio off LED */
#define  BCW_BF_RSSI			0x0008	/* "something RSSI related */
#define  BCW_BF_ENETSPI			0x0010	/* EPHY Roboswitch SPI */
#define  BCW_BF_XTAL			0x0020	/* XTAL doesn't slow clock */
#define  BCW_BF_CCKHIPWR		0x0040	/* HiPower CCK xmission */
#define  BCW_BF_ENETADM			0x0080	/* has ADMtek Switch */
#define  BCW_BF_ENETVLAN		0x0100	/* VLAN capable - huh? */
#define  BCW_BF_AFTERBURNER		0x0200	/* Afterburner capable */
#define  BCW_BF_NOPCI			0x0400	/* Board leaves PCI floating */
#define  BCW_BF_FEM			0x0800	/* Front End Module support */
#define  BCW_BF_EXTLNA			0x1000	/* has external LNA */
#define  BCW_BF_HGPA			0x2000	/* has High Gain PA */
#define  BCW_BF_BTCMOD			0x4000	/* BTCOEXIST in alt GPIOs */
#define  BCW_BF_ALTIQ			0x8000	/* Alternate I/Q settings */
@


1.6
log
@Wrap bus space access in similiar macros to other drivers
making things much more readable.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.5 2006/12/06 19:21:45 mglocker Exp $ */
d157 3
@


1.5
log
@From Jon Simola <simola@@mecha.com>:

Add bus-specific config space read and write functions, this fixes the
attach for ian@@darwinsys.com and properly enumerates multiple cores.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.4 2006/11/24 20:27:41 mglocker Exp $ */
d326 8
@


1.4
log
@From Jon Simola <jsimola@@gmail.com>:

Completely rewrote bcw_reset() based on new specs, this cleared up the
random attach warning I occasionally had during warm boots.

Also change the license, as nearly nothing is left of the original bce
code.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.3 2006/11/21 11:41:14 mglocker Exp $ */
d55 1
d59 1
@


1.3
log
@From Jon Simola <simola@@mecha.com>:

Lots of help from Jonathan Gray. bcw_regs has been removed,
and DMA/descriptor style changes that look more normal. Tested,
no loss in current unfunctionality.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.2 2006/11/17 20:49:27 mglocker Exp $ */
a60 7
/* Core Info Registers */
#define BCW_CIR_SBID_HI			0xffc
#define BCW_CIR_SBID_LO			0xff8

#define BCW_SBTMSTATELOW                0x0f98
#define BCW_SBTMSTATEHI                 0x0f9C

d154 1
a154 1
/* SiliconBackplane registers */
d156 3
d160 8
d169 3
a171 7
#define SBTML_RESET			0x1		/* reset */
#define SBTML_REJ			0x6		/* reject */
#define SBTML_CLK			0x10000		/* clock enable */
#define SBTML_FGC			0x20000	/* force gated clocks on */
#define SBTML_80211FLAG			0x40000		/* core specific flag */
#define SBTML_80211PHY			0x20000000	/* Attach PHY */
#define SBTMH_BUSY			0x4
d173 5
a177 1
#define SBIM_MAGIC_ERRORBITS		0x60000
d187 1
d271 1
d283 3
@


1.2
log
@Minor cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwreg.h,v 1.1 2006/11/17 18:58:31 mglocker Exp $ */
d119 1
a119 1
#define BCW_DMA_TXSTATUS		0x020C	/* active desc, etc */
d123 1
a123 1
#define BCW_DMA_RXSTATUS		0x021C	/* active desc, etc */
a211 1
#define BCW_SHM_MICROCODEFLAGS
d213 51
a263 1
/* 0x200 DMA Register space */
d277 1
a277 2

#define	BCW_SPROM_IL0MACADDR		0x1048	/* 802.11b/g MAC */
d284 1
a284 1
#define BCW_SPROM_PAMAXPOWER		0x1066 /* 7-0 for A, 15-8 for B/G */
d289 18
a314 23
#define BCW_READ8(regs, ofs)						\
	((*(regs)->r_read8)(regs, ofs))

#define BCW_READ16(regs, ofs)						\
	((*(regs)->r_read16)(regs, ofs))

#define BCW_READ32(regs, ofs)						\
	((*(regs)->r_read32)(regs, ofs))

#define BCW_WRITE8(regs, ofs, val)					\
	((*(regs)->r_write8)(regs, ofs, val))

#define BCW_WRITE16(regs, ofs, val)					\
	((*(regs)->r_write16)(regs, ofs, val))

#define BCW_WRITE32(regs, ofs, val)					\
	((*(regs)->r_write32)(regs, ofs, val))

#define	BCW_ISSET(regs, reg, mask)					\
	(BCW_READ32((regs), (reg)) & (mask))

#define	BCW_CLR(regs, reg, mask)					\
	BCW_WRITE32((regs), (reg), BCW_READ32((regs), (reg)) & ~(mask))
@


1.1
log
@This is a very initial import for a driver which supports the IEEE 802.11
Broadcom BCM43xx chipset.  Device attaches, but has no further
functionality yet.

The work has been done by Jon Simola <jsimola@@gmail.com>, based on the
existing bce(4) code.  He will continue to work on the driver and try
to make further progress.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a80 1

d83 1
a83 1
#define BCW_DEVCTL			0x0000	/* device control */
d130 1
a130 1
#define BCW_RX_CTL			0x0400	/* receive config */
d136 1
a136 1
#define BCW_RX_MAX			0x0404	/* max packet length */
d144 3
a146 3
#define BCW_FILT_LOW			0x0420	/* mac low 4 bytes */
#define BCW_FILT_HI			0x0424	/* mac hi 2 bytes */
#define BCW_FILT_CTL			0x0428	/* packet filter ctrl */
d156 1
a156 1
#define BCW_TX_WATER			0x0434	/* tx watermark */
d165 3
a167 3
#define SBTML_RESET			0x1	/* reset */
#define SBTML_REJ			0x6	/* reject */
#define SBTML_CLK			0x10000	/* clock enable */
d169 2
a170 2
#define SBTML_80211FLAG			0x40000 /* core specific flag */
#define SBTML_80211PHY			0x20000000 /* Attach PHY */
d202 6
a207 6
#define  BCW_SHM_CONTROL_SHARED		0x0001	/* Select SHM Routing shared memory */
#define  BCW_SHM_CONTROL_80211		0x0002	/* Select 80211 settings */
#define  BCW_SHM_CONTROL_PCM		0x0003	/* Select PCM data */
#define  BCW_SHM_CONTROL_HWMAC		0x0004	/* Security Hardware MAC Address list */
#define  BCW_SHM_CONTROL_MCODE		0x0300	/* Microcode */
#define  BCW_SHM_CONTROL_INIMCODE	0x0301	/* Initial Value Microcode? */
d211 2
a212 2
/*    http://bcm-specs.sipsolutions.net/MicrocodeFlagsBitfield */
#define  BCW_SHM_MICROCODEFLAGS
a232 1

a243 3



a271 1

@

