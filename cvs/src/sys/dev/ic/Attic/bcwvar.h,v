head	1.38;
access;
symbols
	OPENBSD_4_1:1.27.0.2
	OPENBSD_4_1_BASE:1.27;
locks; strict;
comment	@ * @;


1.38
date	2007.04.05.16.25.25;	author mglocker;	state dead;
branches;
next	1.37;

1.37
date	2007.04.04.19.36.42;	author mglocker;	state Exp;
branches;
next	1.36;

1.36
date	2007.04.01.11.58.00;	author mglocker;	state Exp;
branches;
next	1.35;

1.35
date	2007.04.01.11.21.40;	author mglocker;	state Exp;
branches;
next	1.34;

1.34
date	2007.04.01.00.08.17;	author mglocker;	state Exp;
branches;
next	1.33;

1.33
date	2007.03.31.23.50.59;	author mglocker;	state Exp;
branches;
next	1.32;

1.32
date	2007.03.31.09.48.02;	author mglocker;	state Exp;
branches;
next	1.31;

1.31
date	2007.03.20.11.55.36;	author mglocker;	state Exp;
branches;
next	1.30;

1.30
date	2007.03.18.14.40.47;	author mglocker;	state Exp;
branches;
next	1.29;

1.29
date	2007.03.16.07.05.13;	author mglocker;	state Exp;
branches;
next	1.28;

1.28
date	2007.03.12.06.51.16;	author mglocker;	state Exp;
branches;
next	1.27;

1.27
date	2007.03.04.00.43.26;	author mglocker;	state Exp;
branches;
next	1.26;

1.26
date	2007.03.01.19.48.00;	author mglocker;	state Exp;
branches;
next	1.25;

1.25
date	2007.02.27.07.04.18;	author mglocker;	state Exp;
branches;
next	1.24;

1.24
date	2007.02.26.14.14.02;	author mglocker;	state Exp;
branches;
next	1.23;

1.23
date	2007.02.24.23.05.04;	author mglocker;	state Exp;
branches;
next	1.22;

1.22
date	2007.02.24.11.59.33;	author mglocker;	state Exp;
branches;
next	1.21;

1.21
date	2007.02.23.19.44.37;	author mglocker;	state Exp;
branches;
next	1.20;

1.20
date	2007.02.23.10.40.54;	author mglocker;	state Exp;
branches;
next	1.19;

1.19
date	2007.02.22.21.26.49;	author mglocker;	state Exp;
branches;
next	1.18;

1.18
date	2007.02.22.19.25.45;	author mglocker;	state Exp;
branches;
next	1.17;

1.17
date	2007.02.22.17.04.31;	author mglocker;	state Exp;
branches;
next	1.16;

1.16
date	2007.02.20.21.24.36;	author mglocker;	state Exp;
branches;
next	1.15;

1.15
date	2007.02.18.09.37.21;	author mglocker;	state Exp;
branches;
next	1.14;

1.14
date	2007.02.18.00.05.39;	author mglocker;	state Exp;
branches;
next	1.13;

1.13
date	2007.01.07.00.29.44;	author mglocker;	state Exp;
branches;
next	1.12;

1.12
date	2007.01.05.07.09.15;	author mglocker;	state Exp;
branches;
next	1.11;

1.11
date	2007.01.03.06.31.54;	author mglocker;	state Exp;
branches;
next	1.10;

1.10
date	2007.01.03.05.46.42;	author mglocker;	state Exp;
branches;
next	1.9;

1.9
date	2006.12.28.22.23.07;	author mglocker;	state Exp;
branches;
next	1.8;

1.8
date	2006.12.06.19.21.45;	author mglocker;	state Exp;
branches;
next	1.7;

1.7
date	2006.11.29.21.34.06;	author mglocker;	state Exp;
branches;
next	1.6;

1.6
date	2006.11.26.11.14.17;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.24.20.27.41;	author mglocker;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.22.15.12.50;	author mglocker;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.21.11.41.14;	author mglocker;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.17.20.49.27;	author mglocker;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.17.18.58.31;	author mglocker;	state Exp;
branches;
next	;


desc
@@


1.38
log
@After been attacked by Michael Buesch <mb@@bu3sch.de> because we initially
were using some of their routines in the bcw driver, I decided to stop
working on it.  To avoid any further license chit chat I plain drop the
driver.
@
text
@/*	$OpenBSD: bcwvar.h,v 1.37 2007/04/04 19:36:42 mglocker Exp $ */

/*
 * Copyright (c) 2007 Marcus Glocker <mglocker@@openbsd.org>
 * Copyright (c) 2006 Jon Simola <jsimola@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Broadcom BCM43xx Wireless network chipsets (broadcom.com)
 * SiliconBackplane is technology from Sonics, Inc. (sonicsinc.com)
 */

#define BCW_ARRAY_SIZE(array)	(sizeof(array) / sizeof(array[0]))

#define BCW_FLAGS_INITIALIZED		0x00000001

#define BCW_DEFAULT_SHORT_RETRY_LIMIT	7
#define BCW_DEFAULT_LONG_RETRY_LIMIT	4

struct fwheader {
	char	filename[64];
	int	filesize;
	int	fileoffset;
};

struct bcw_initval {
        uint16_t	offset;
        uint16_t	size;
        uint32_t	value;
} __packed;

#define BCW_NR_LEDS	4
struct bcw_led {
	uint8_t		behaviour:7;
	uint8_t		activelow:1;
	unsigned long	blink_interval;
};
enum {
	BCW_LED_OFF,
	BCW_LED_ON,
	BCW_LED_ACTIVITY,
	BCW_LED_RADIO_ALL,
	BCW_LED_RADIO_A,
	BCW_LED_RADIO_B,
	BCW_LED_MODE_BG,
	BCW_LED_TRANSFER,
	BCW_LED_APTRANSFER,
	BCW_LED_WEIRD, /* XXX */
	BCW_LED_ASSOC,
	BCW_LED_INACTIVE,

	/*
	 * Behaviour values for testing.
	 * With these values it is easier to figure out
	 * the real behaviour of leds, in case the SPROM
	 * is missing information.
	 */
	BCW_LED_TEST_BLINKSLOW,
	BCW_LED_TEST_BLINKMEDIUM,
	BCW_LED_TEST_BLINKFAST,

	/* misc values for BCM4303 */
	BCW_LED_BCM4303_0 = 0x2B,
	BCW_LED_BCM4303_1 = 0x78,
	BCW_LED_BCM4303_2 = 0x2E,
	BCW_LED_BCM4303_3 = 0x19,
};

#define BCW_RADIO_TXANTENNA_LASTPLCP	3
#define BCW_RADIO_TXANTENNA_DEFAULT	BCW_RADIO_TXANTENNA_LASTPLCP
#define BCW_RADIO_INTERFMODE_NONE	0
#define BCW_RADIO_INTERFMODE_NONWLAN	1
#define BCW_RADIO_INTERFMODE_MANUALWLAN	2
#define BCW_RADIO_INTERFMODE_AUTOWLAN	3
#define BCW_RADIO_DEFAULT_CHANNEL_A	36
#define BCW_RADIO_DEFAULT_CHANNEL_BG	6
#define BCW_RADIO_MAX			2
struct bcw_radio {
	uint16_t	id;
	uint16_t	info;
	u_char		enabled;
};

#define BCW_MAX_CORES		10
struct bcw_core {
	uint16_t	id;
	uint8_t		index;
	uint8_t		rev;
	uint8_t		backplane_flag;
};

/* number of descriptors used in a ring */
#define BCW_RX_RING_COUNT	128
#define BCW_TX_RING_COUNT	128
#define BCW_MAX_SCATTER		8	/* XXX unknown, wild guess */

struct bcw_rx_data {
	bus_dmamap_t		map;
	struct mbuf		*m;
};

struct bcw_tx_data {
	bus_dmamap_t		map;
	struct mbuf		*m;
	uint32_t		softstat;
	struct ieee80211_node	*ni;
};

struct bcw_rx_ring {
	bus_dmamap_t		map;
	bus_dma_segment_t	seg;
	bus_addr_t		physaddr;
	struct bcw_desc		*desc;
	struct bcw_rx_data	*data;
	int			count;
	int			cur;
	int			next;
};

struct bcw_tx_ring {
	bus_dmamap_t		map;
	bus_dma_segment_t	seg;
	bus_addr_t		physaddr;
	struct bcw_desc		*desc;
	struct bcw_tx_data	*data;
	int			count;
	int			queued;
	int			cur;
	int			next;
	int			stat;
};

struct bcw_desc {
	uint32_t	ctrl;
	uint32_t	addr;
};

/* ring descriptor */
struct bcw_dma_slot {
	uint32_t	ctrl;
	uint32_t	addr;
};

struct bcw_lopair {
	int8_t low;
	int8_t high;
	uint8_t used:1;
};
#define BCW_LO_COUNT	(14 * 4)

#define CTRL_BC_MASK	0x1fff		/* buffer byte count */
#define CTRL_EOT	0x10000000	/* end of descriptor table */
#define CTRL_IOC	0x20000000	/* interrupt on completion */
#define CTRL_EOF	0x40000000	/* end of frame */
#define CTRL_SOF	0x80000000	/* start of frame */

/* radio */
#define BCW_INTERFSTACK_SIZE		26
                
/* ilt */
#define BCW_ILT_FINEFREQA_SIZE		256
#define BCW_ILT_FINEFREQG_SIZE		256
#define BCW_ILT_NOISEA2_SIZE		8
#define BCW_ILT_NOISEA3_SIZE		8 
#define BCW_ILT_NOISEG1_SIZE		8
#define BCW_ILT_NOISEG2_SIZE		8
#define BCW_ILT_ROTOR_SIZE		53
#define BCW_ILT_RETARD_SIZE		53
#define BCW_ILT_SIGMASQR_SIZE		53
#define BCW_ILT_NOISESCALEG_SIZE	27

#if 0
/*
 * Mbuf pointers. We need these to keep track of the virtual addresses   
 * of our mbuf chains since we can only convert from physical to virtual,
 * not the other way around.
 *
 * The chip has 6 DMA engines, looks like we only need to use one each
 * for TX and RX, the others stay disabled.
 */
struct bcw_chain_data {
	struct mbuf    *bcw_tx_chain[BCW_NTXDESC];
	struct mbuf    *bcw_rx_chain[BCW_NRXDESC];
	bus_dmamap_t    bcw_tx_map[BCW_NTXDESC];  
	bus_dmamap_t    bcw_rx_map[BCW_NRXDESC];
};
#endif

struct bcw_rx_ring;
struct bcw_tx_ring;

#define BCW_SPROM_SIZE			64	/* in 16-bit words */
struct bcw_sprom {
	uint16_t	boardflags2;
	uint8_t		il0macaddr[6];
	uint8_t		et0macaddr[6];
	uint8_t		et1macaddr[6];
	uint8_t		et1phyaddr:5;
	uint8_t		et0phyaddr:5;
	uint8_t		et0mdcport:1;
	uint8_t		et1mdcport:1;
	uint8_t		boardrev;
	uint8_t		locale:4;
	uint8_t		antennas_aphy:2;
	uint8_t		antennas_bgphy:2;
	uint16_t	pa0b0;
	uint16_t	pa0b1;
	uint16_t	pa0b2;
	uint8_t		wl0gpio0;
	uint8_t		wl0gpio1;
	uint8_t		wl0gpio2;
	uint8_t		wl0gpio3;
	uint8_t		maxpower_aphy;
	uint8_t		maxpower_bgphy;
	uint16_t	pa1b0;
	uint16_t	pa1b1;
	uint16_t	pa1b2;
	uint8_t		idle_tssi_tgt_aphy;
	uint8_t		idle_tssi_tgt_bgphy;
	uint16_t	boardflags;
	uint16_t	antennagain_aphy;
	uint16_t	antennagain_bgphy;
};

struct bcw_softc {
	struct device		 sc_dev;
	struct ieee80211com	 sc_ic;
	struct bcw_rx_ring	 sc_rxring;
	struct bcw_tx_ring	 sc_txring;
	/* function pointers */
	int			 (*sc_newstate)(struct ieee80211com *,
				     enum ieee80211_state, int);
	int			 (*sc_enable)(struct bcw_softc *);
	void			 (*sc_disable)(struct bcw_softc *);
	void			 (*sc_power)(struct bcw_softc *, int);
	void			 (*sc_conf_write)(void *, uint32_t, uint32_t);
	uint32_t		 (*sc_conf_read)(void *, uint32_t);

	bus_dma_tag_t		 sc_dmat;
	bus_space_tag_t		 sc_iot;
	bus_space_handle_t	 sc_ioh;

	void			*sc_dev_softc;
	uint32_t		 sc_flags;
	uint32_t		 sc_intmask;		/* current intr mask */
	uint32_t		 sc_rxin;		/* last rx desc seen */
	uint32_t		 sc_txin;		/* last tx desc seen */
	int			 sc_txsfree;		/* no. tx slots avail */
	int			 sc_txsnext;		/* next avail tx slot */
	bus_dmamap_t		 sc_ring_map;
	struct bcw_dma_slot	*bcw_rx_ring;		/* receive ring */
	struct bcw_dma_slot	*bcw_tx_ring;		/* transmit ring */
	struct timeout		 sc_timeout;
	struct timeout		 sc_scan_to;
	//struct bcw_chain_data	 sc_cdata;		/* mbufs */

	uint16_t		 sc_board_vendor;	/* Board vendor */
	uint16_t		 sc_board_type;		/* Board type */
	uint16_t		 sc_board_rev;		/* Board revision */
	uint16_t		 sc_chip_id;		/* Chip ID */
	uint16_t		 sc_chip_rev;		/* Chip revision */
	uint16_t		 sc_chip_pkg;		/* Chip package */
	uint16_t		 sc_prodid;		/* Product ID */
	uint8_t			 sc_idletssi;
	uint16_t		 sc_boardflags;
	uint16_t		 sc_using_pio:1;
	struct bcw_sprom	 sc_sprom;
	struct bcw_led		 leds[BCW_NR_LEDS];
	/* cores */
	uint16_t		 sc_numcores;
	uint16_t		 sc_havecommon;
	int			 sc_currentcore;
	int			 sc_lastcore;
	uint32_t		 sc_chip_common_capa;
	struct bcw_core		 sc_core[BCW_MAX_CORES];
	struct bcw_core		*sc_core_common;
	struct bcw_core		*sc_core_80211;
	struct bcw_core		*sc_core_bus;		/* PCI or cardbus */
	/* PHY */
	uint16_t		 sc_phy_ver;
	uint16_t		 sc_phy_rev;
	uint16_t		 sc_phy_type;
	uint8_t			 sc_phy_connected:1,	/* XXX */
				     sc_phy_calibrated:1,
				     sc_phy_is_locked:1,
				     sc_phy_dyn_tssi_tbl:1;
	uint16_t		 sc_phy_loopback_gain[2];
	uint16_t		 sc_phy_savedpctlreg;
	uint16_t		 sc_phy_minlowsig[2];
	uint16_t		 sc_phy_minlowsigpos[2];
	int8_t			 sc_phy_idle_tssi;
	const int8_t		 sc_phy_tssi2dbm;
	uint16_t		 sc_phy_antenna_diversity;
	struct bcw_lopair	*sc_phy_lopairs;
	/* radio */
	uint16_t		 sc_radio_ver;
	uint16_t		 sc_radio_rev;
	uint32_t		 sc_radio_mnf;
	uint16_t		 sc_radio_initval;
	int16_t			 sc_radio_nrssi[2];
	int			 sc_radio_interfmode;
	uint8_t			 sc_radio_aci_enable:1,
				     sc_radio_aci_wlan_automatic:1,
				     sc_radio_aci_hw_rssi;
	int32_t			 sc_radio_nrssislope;
	uint16_t		 sc_radio_txpwr_offset;
	uint16_t		 sc_radio_lofcal;
	uint16_t		 sc_radio_txpower_desired;
	uint16_t		 sc_radio_pa0b0;
	uint16_t		 sc_radio_pa0b1;
	uint16_t		 sc_radio_pa0b2;
	uint16_t		 sc_radio_pa1b0;
	uint16_t		 sc_radio_pa1b1;
	uint16_t		 sc_radio_pa1b2;
	uint16_t		 sc_radio_baseband_atten;
	uint16_t		 sc_radio_radio_atten;
	uint16_t		 sc_radio_txctl1;
	uint16_t		 sc_radio_txctl2;
	uint8_t			 sc_radio_channel;
	int8_t			 sc_radio_nrssi_lt[64];
	uint32_t		 sc_radio_interfstack[BCW_INTERFSTACK_SIZE];
	//struct bcw_radio	 radio[BCW_RADIO_MAX];
};

void	bcw_attach(struct bcw_softc *);
int	bcw_detach(void *);
int	bcw_intr(void *);
void	bcw_powercontrol_crystal_on(struct bcw_softc *);

#define BCW_DEBUG
#ifdef BCW_DEBUG
//#define DPRINTF(x)	do { if (bcw_debug) printf x; } while (0)
//#define DPRINTFN(n,x)	do { if (bcwdebug >= (n)) printf x; } while (0)
#define DPRINTF(x)	do { if (1) printf x; } while (0)
#define DPRINTFN(n,x)	do { if (1 >= (n)) printf x; } while (0)
//int bcw_debug = 99;
#else
#define DPRINTF(x)
#define DPRINTFN(n,x)
#endif

/*
 * Some legacy stuff from bce and iwi to make this compile
 */
/* transmit buffer max frags allowed */
#define BCW_NTXFRAGS	16

/* Packet status is returned in a pre-packet header */
struct rx_pph {
	uint16_t	len;
	uint16_t	flags;
	uint16_t	pad[12];
};

#define BCW_PREPKT_HEADER_SIZE		30

/* packet status flags bits */
#define RXF_NO				0x8	/* odd number of nibbles */
#define RXF_RXER			0x4	/* receive symbol error */
#define RXF_CRC				0x2	/* crc error */
#define RXF_OV				0x1	/* fifo overflow */

#define BCW_TIMEOUT			100	/* # 10us for mii read/write */

/* for ring descriptors */
#define BCW_RXBUF_LEN			(MCLBYTES - 4)
#define BCW_INIT_RXDESC(sc, x)						\
do {									\
	struct bcw_dma_slot *__bcwd = &sc->bcw_rx_ring[x];		\
									\
	*mtod(sc->bcw_cdata.bcw_rx_chain[x], uint32_t *) = 0;		\
	__bcwd->addr =							\
	    htole32(sc->bcw_cdata.bcw_rx_map[x]->dm_segs[0].ds_addr	\
	    + 0x40000000);						\
	if (x != (BCW_NRXDESC - 1))					\
		__bcwd->ctrl = htole32(BCW_RXBUF_LEN);			\
	else								\
		__bcwd->ctrl = htole32(BCW_RXBUF_LEN | CTRL_EOT);	\
	bus_dmamap_sync(sc->bcw_dmatag, sc->bcw_ring_map,		\
	    sizeof(struct bcw_dma_slot) * x,				\
	    sizeof(struct bcw_dma_slot),				\
	    BUS_DMASYNC_PREREAD|BUS_DMASYNC_PREWRITE);			\
} while (/* CONSTCOND */ 0)

#define BCW_NTXFRAGS   16
@


1.37
log
@Debugging.  Fix a lot wrong registers.  Fix a couple of /* XXX */ and
/* TODO */ for the radio / PHY init.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.36 2007/04/01 11:58:00 mglocker Exp $ */
@


1.36
log
@Cleanup sc_softc.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.35 2007/04/01 11:21:40 mglocker Exp $ */
d60 1
a60 1
	BCW_LED_WEIRD, /* FIXME */
@


1.35
log
@There is no need to keep the intrstr in the drivers softc struct.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.34 2007/04/01 00:08:17 mglocker Exp $ */
a236 1
/* Needs to have garbage removed */
d238 16
a253 18
	struct device		sc_dev;
	struct ieee80211com	sc_ic;
	struct bcw_rx_ring	sc_rxring;
	struct bcw_tx_ring	sc_txring;

	int			(*sc_newstate)(struct ieee80211com *,
				    enum ieee80211_state, int);
	int			(*sc_enable)(struct bcw_softc *);
	void			(*sc_disable)(struct bcw_softc *);
	void			(*sc_power)(struct bcw_softc *, int);
	void			(*sc_conf_write)(void *, uint32_t, uint32_t);
	uint32_t		(*sc_conf_read)(void *, uint32_t);

	struct timeout		sc_scan_to;

	bus_dma_tag_t		sc_dmat;
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
a254 1
	uint32_t		sc_flags;
d256 32
a287 76
	uint32_t		sc_phy;		/* eeprom indicated phy */
	struct bcw_dma_slot	*bcw_rx_ring;	/* receive ring */
	struct bcw_dma_slot	*bcw_tx_ring;	/* transmit ring */
//	struct bcw_chain_data	sc_cdata;	/* mbufs */
	bus_dmamap_t		sc_ring_map;
	uint32_t		sc_intmask;	/* current intr mask */
	uint32_t		sc_rxin;	/* last rx descriptor seen */
	uint32_t		sc_txin;	/* last tx descriptor seen */
	int			sc_txsfree;	/* no. tx slots available */
	int			sc_txsnext;	/* next available tx slot */
	struct timeout		sc_timeout;
	/* Break these out into seperate structs */
	uint16_t		sc_board_vendor;
	uint16_t		sc_board_type;
	uint16_t		sc_board_rev;
	uint16_t		sc_chip_id;		/* Chip ID */
	uint16_t		sc_chip_rev;		/* Chip Revision */
	uint16_t		sc_chip_pkg;		/* Chip Package */
	uint16_t		sc_prodid;		/* Product ID */
	struct bcw_core		sc_core[BCW_MAX_CORES];
//	struct bcw_radio	radio[BCW_RADIO_MAX];
	uint16_t		sc_using_pio:1;
	uint16_t		sc_phy_ver;
	uint16_t		sc_phy_type;
	uint16_t		sc_phy_rev;
	uint8_t			sc_phy_connected:1, /* XXX */
				    sc_phy_calibrated:1,
				    sc_phy_is_locked:1,
				    sc_phy_dyn_tssi_tbl:1;
	uint16_t		sc_phy_loopback_gain[2];
	struct bcw_lopair	*sc_phy_lopairs;
	uint16_t		sc_phy_savedpctlreg;
	uint16_t		sc_phy_minlowsig[2];
	uint16_t		sc_phy_minlowsigpos[2];
	int8_t			sc_phy_idle_tssi;
	const int8_t		sc_phy_tssi2dbm;
	uint16_t		sc_phy_antenna_diversity;
//	uint16_t		sc_corerev;
	uint32_t		sc_radio_mnf;
	uint16_t		sc_radio_rev;
	uint16_t		sc_radio_ver;
	uint16_t		sc_radio_initval;
	int16_t			sc_radio_nrssi[2];
	int			sc_radio_interfmode;
	uint8_t			sc_radio_aci_enable:1,
				    sc_radio_aci_wlan_automatic:1,
				    sc_radio_aci_hw_rssi;
	int32_t			sc_radio_nrssislope;
	uint16_t		sc_radio_txpwr_offset;
	uint16_t		sc_radio_lofcal;
	uint16_t		sc_radio_txpower_desired;
	uint32_t		sc_phyinfo;
	uint16_t		sc_numcores;
	uint16_t		sc_havecommon;
	uint32_t		sc_chip_common_capa;
	int			sc_currentcore;
	int			sc_lastcore;
	uint16_t		sc_radio_pa0b0;
	uint16_t		sc_radio_pa0b1;
	uint16_t		sc_radio_pa0b2;
	uint16_t		sc_radio_pa1b0;
	uint16_t		sc_radio_pa1b1;
	uint16_t		sc_radio_pa1b2;
	uint16_t		sc_radio_baseband_atten;
	uint16_t		sc_radio_radio_atten;
	uint16_t		sc_radio_txctl1;
	uint16_t		sc_radio_txctl2;
	uint8_t			sc_radio_channel;
	int8_t			sc_radio_nrssi_lt[64];
	uint32_t		sc_radio_interfstack[BCW_INTERFSTACK_SIZE];
	uint8_t			sc_idletssi;
	uint8_t			sc_spromrev;
	uint16_t		sc_boardflags;
	uint8_t			sc_sbrev;	/* Sonics Backplane Revision */
	struct bcw_sprom	sc_sprom;
	/* Core locations */
d290 45
a334 2
	struct bcw_core		*sc_core_bus;	/* PCI or cardbus */
	struct bcw_led		leds[BCW_NR_LEDS];
@


1.34
log
@Remove dead code.  Comments.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.33 2007/03/31 23:50:59 mglocker Exp $ */
a258 2
	void			*bcw_intrhand;
	const char		*bcw_intrstr;	/* interrupt description */
d260 1
a260 1
	uint32_t		sc_phy;	/* eeprom indicated phy */
d278 1
a278 1
	uint16_t		sc_prodid;	/* Product ID */
d333 1
a333 1
	uint8_t			sc_sbrev; /* Sonics Backplane Revision */
@


1.33
log
@Since I spent some work on this beast, too, I allow myself to add me
to the drivers copyright note.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.32 2007/03/31 09:48:02 mglocker Exp $ */
d22 1
a22 3
 * SiliconBackplane is technology from Sonics, Inc.(sonicsinc.com)
 *
 * Cliff Wright cliff@@snipe444.org
@


1.32
log
@Enable interrupts.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.31 2007/03/20 11:55:36 mglocker Exp $ */
d4 1
@


1.31
log
@Read the whole SPROM content with a single routine to a own sprom struct.

For those people who have reported about broken MAC address at attach
time, this should fix the problem.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.30 2007/03/18 14:40:47 mglocker Exp $ */
d28 2
d100 1
a100 1
	uint8_t		num;
d259 1
d280 1
a280 1
	uint16_t		sc_chip_package;	/* Chip Package */
d317 1
@


1.30
log
@o Add bcw_80211_core_init() according to
  http://bcm-specs.sipsolutions.net/80211Init.
o Add a rewritten version of bcw_core_reset() called bcw_80211_core_reset()
  according to http://bcm-specs.sipsolutions.net/80211CoreReset.  This
  will probably replace bcw_core_reset(), but I need more verification
  first.
o Add bcw_core_enable() and bcw_core_disable().  There seems to be
  devices which contain several 802.11 cores.  The unused needs to be
  disabled.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.29 2007/03/16 07:05:13 mglocker Exp $ */
d203 33
a315 1
	uint8_t			sc_radio_gain;
d333 1
@


1.29
log
@First super massive register cleanup run;  group/sort registers,
remove lots of obsolete registers, mark unused registers for deletion,
mark suspect registers for closer verification, comments ...
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.28 2007/03/12 06:51:16 mglocker Exp $ */
d27 3
@


1.28
log
@Finish chip base initialization.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.27 2007/03/04 00:43:26 mglocker Exp $ */
d40 1
@


1.27
log
@Kill a cardbus dependency which breaked kernel compilation e.g. for
sparc*.

OK deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.26 2007/03/01 19:48:00 mglocker Exp $ */
d76 3
d80 2
d163 3
d244 1
d292 1
@


1.26
log
@Set phy / radio softc vars to initial default values.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.25 2007/02/27 07:04:18 mglocker Exp $ */
d203 2
a204 3
	void			(*sc_conf_write)(struct bcw_softc *,
				    uint32_t, uint32_t);
	uint32_t		(*sc_conf_read)(struct bcw_softc *, uint32_t);
d214 1
a214 2
	struct pci_attach_args	sc_pa;
	struct cardbus_attach_args	sc_ca;
@


1.25
log
@Fix page fault trap in radio init code path and activate radio init in
bcw_init().  Remove obsolete debug code therefore.  The radio seems
to initialize (can't verify yet), but I'm sure there are still some tweaks.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.24 2007/02/26 14:14:02 mglocker Exp $ */
d26 2
d242 3
a244 3
				    calibrated:1,
				    is_locked:1,
				    dyn_tssi_tbl:1;
d252 1
d284 1
@


1.24
log
@We need to save some PCI infos in our softc struct for further decisions
in the driver code.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.23 2007/02/24 23:05:04 mglocker Exp $ */
d149 1
@


1.23
log
@Get correct chip revision and also get chip package.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.22 2007/02/24 11:59:33 mglocker Exp $ */
d226 3
@


1.22
log
@Fix value typos, sync radio vars with phy vars, add radio default
attenuation routine, add temporary debug printfs.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.21 2007/02/23 19:44:37 mglocker Exp $ */
d226 3
a228 2
	uint16_t		sc_chipid;	/* Chip ID */
	uint16_t		sc_chiprev;	/* Chip Revision */
@


1.21
log
@Add bcw_phy_xmitpower().
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.20 2007/02/23 10:40:54 mglocker Exp $ */
d231 1
a231 1
	uint16_t		sc_phy_version;
@


1.20
log
@Complement bcw_phy_inita(), add bcw_radio_init2060().
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.19 2007/02/22 21:26:49 mglocker Exp $ */
d243 2
d258 1
@


1.19
log
@Add bcw_phy_lo_b_measure().
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.18 2007/02/22 19:25:45 mglocker Exp $ */
d75 1
d254 2
@


1.18
log
@Add bcw_phy_initb2() and bcw_phy_initb4().  Activate bcw_phy_init() in the
bcw_init() path.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.17 2007/02/22 17:04:31 mglocker Exp $ */
d240 2
@


1.17
log
@Halftime for PHY init code, another ~1000 new lines.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.16 2007/02/20 21:24:36 mglocker Exp $ */
d75 1
a75 1
#define BCW_RADIO_DEFAULT_CHANNEL	6
@


1.16
log
@~1052 lines of new PHY radio initialization code and no end in sight.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.15 2007/02/18 09:37:21 mglocker Exp $ */
d74 1
d233 4
d239 1
d245 6
d267 1
@


1.15
log
@Start to add radio PHY initialization routines.

Rename some radio variable names to names which doesn't confuse me
everytime I have to use them.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.14 2007/02/18 00:05:39 mglocker Exp $ */
d142 6
d154 11
d232 2
d238 1
d251 4
@


1.14
log
@Turn radio (version 2050) on.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.13 2007/01/07 00:29:44 mglocker Exp $ */
d216 3
a218 3
	uint32_t		sc_radioid;
	uint16_t		sc_radiorev;
	uint16_t		sc_radiotype;
@


1.13
log
@Initialize GPIO.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.12 2007/01/05 07:09:15 mglocker Exp $ */
d74 2
a75 1
#define BCW_MAX_RADIOS		2
d211 1
a211 1
//	struct bcw_radio	radio[BCW_MAX_RADIOS];
@


1.12
log
@First shot of making the driver capable to parse several firmware files
from one single file.

Suggested and help by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.11 2007/01/03 06:31:54 mglocker Exp $ */
d38 36
d238 1
@


1.11
log
@Avoid mixing of u_int* and uint* in the same code.  uint* wins.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.10 2007/01/03 05:46:42 mglocker Exp $ */
d25 6
@


1.10
log
@Add first shot of the firmware upload.  Tested on i386 and amd64.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.9 2006/12/28 22:23:07 mglocker Exp $ */
d34 2
a35 2
	u_int16_t	id;
	u_int16_t	info;
d41 4
a44 4
	u_int16_t	id;
	u_int8_t	num;
	u_int8_t	rev;
	u_int8_t	backplane_flag;
d89 2
a90 2
	u_int32_t ctrl;
	u_int32_t addr;
d95 2
a96 2
	u_int32_t ctrl;
	u_int32_t addr;
d139 2
a140 2
				    u_int32_t, u_int32_t);
	u_int32_t		(*sc_conf_read)(struct bcw_softc *, u_int32_t);
d152 1
a152 1
	u_int32_t		sc_phy;	/* eeprom indicated phy */
d157 3
a159 3
	u_int32_t		sc_intmask;	/* current intr mask */
	u_int32_t		sc_rxin;	/* last rx descriptor seen */
	u_int32_t		sc_txin;	/* last tx descriptor seen */
d164 3
a166 3
	u_int16_t		sc_chipid;	/* Chip ID */
	u_int16_t		sc_chiprev;	/* Chip Revision */
	u_int16_t		sc_prodid;	/* Product ID */
d169 10
a178 10
	u_int16_t		sc_phy_version;
	u_int16_t		sc_phy_type;
	u_int16_t		sc_phy_rev;
//	u_int16_t		sc_corerev;
	u_int32_t		sc_radioid;
	u_int16_t		sc_radiorev;
	u_int16_t		sc_radiotype;
	u_int32_t		sc_phyinfo;
	u_int16_t		sc_numcores;
	u_int16_t		sc_havecommon;
d181 11
a191 11
	u_int8_t		sc_radio_gain;
	u_int16_t		sc_radio_pa0b0;
	u_int16_t		sc_radio_pa0b1;
	u_int16_t		sc_radio_pa0b2;
	u_int16_t		sc_radio_pa1b0;
	u_int16_t		sc_radio_pa1b1;
	u_int16_t		sc_radio_pa1b2;
	u_int8_t		sc_idletssi;
	u_int8_t		sc_spromrev;
	u_int16_t		sc_boardflags;
	u_int8_t		sc_sbrev; /* Sonics Backplane Revision */
d223 3
a225 3
	u_int16_t len;
	u_int16_t flags;
	u_int16_t pad[12];
d244 1
a244 1
	*mtod(sc->bcw_cdata.bcw_rx_chain[x], u_int32_t *) = 0;		\
@


1.9
log
@Finish core enumeration, break out core change and reset functions.

From Jon Simola <simola@@mecha.com>.  Diff merged together by me with
last changes from jsg@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.8 2006/12/06 19:21:45 mglocker Exp $ */
d25 6
@


1.8
log
@From Jon Simola <simola@@mecha.com>:

Add bus-specific config space read and write functions, this fixes the
attach for ian@@darwinsys.com and properly enumerates multiple cores.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.7 2006/11/29 21:34:06 mglocker Exp $ */
d36 3
a38 2
	u_int16_t	revision;
	u_char		enabled;
d166 1
a166 1
	u_int16_t		sc_corerev;
d173 2
d186 4
@


1.7
log
@From Jon Simola <simola@@mecha.com>:

New bcw_powercontrol_crystal_on() function, and fix the license for the
pci wrapper.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.6 2006/11/26 11:14:17 deraadt Exp $ */
d131 4
d144 1
d160 1
a160 1
//	struct bcw_core		core[BCW_MAX_CORES];
@


1.6
log
@do not have each net80211 driver define its own rates structures.  if they use
the standard rates, use some defined by net80211 itself.  kernel shrinks a bit
ok jsg mglocker
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.5 2006/11/24 20:27:41 mglocker Exp $ */
d181 1
a181 1
int	bcw_detach(void *arg);
d183 1
@


1.5
log
@From Jon Simola <jsimola@@gmail.com>:

Completely rewrote bcw_reset() based on new specs, this cleared up the
random attach warning I occasionally had during warm boots.

Also change the license, as nearly nothing is left of the original bce
code.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.4 2006/11/22 15:12:50 mglocker Exp $ */
a239 7

static const struct ieee80211_rateset bcw_rateset_11a =
	{ 8, { 12, 18, 24, 36, 48, 72, 96, 108 } };
static const struct ieee80211_rateset bcw_rateset_11b =
	{ 4, { 2, 4, 11, 22 } };
static const struct ieee80211_rateset bcw_rateset_11g =
	{ 12, { 2, 4, 11, 22, 12, 18, 24, 36, 48, 72, 96, 108 } };
@


1.4
log
@From Jon Simola <jon@@mecha.ca>:

Attach to cardbus based bcw cards, and more cleanup. This should help
with a few of the card lockup reports I've received.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.3 2006/11/21 11:41:14 mglocker Exp $ */
a4 1
 * Copyright (c) 2003 Clifford Wright. All rights reserved.
d6 3
a8 10
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d10 7
a16 11
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d177 1
@


1.3
log
@From Jon Simola <simola@@mecha.com>:

Lots of help from Jonathan Gray. bcw_regs has been removed,
and DMA/descriptor style changes that look more normal. Tested,
no loss in current unfunctionality.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.2 2006/11/17 20:49:27 mglocker Exp $ */
d142 1
@


1.2
log
@Minor cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcwvar.h,v 1.1 2006/11/17 18:58:31 mglocker Exp $ */
d53 57
a109 2
#define BCW_NRXDESC             128
#define BCW_NTXDESC             128
d111 1
d126 1
d128 2
a129 15
struct bcw_regs {
	bus_space_tag_t		r_bt;
	bus_space_handle_t	r_bh;
//	enum bcw_access		r_access;
	void			*r_priv;
	
	/* bus independent I/O callbacks */
	u_int8_t		(*r_read8)(void *, u_int32_t);
	u_int16_t		(*r_read16)(void *, u_int32_t);
	u_int32_t		(*r_read32)(void *, u_int32_t);
	void			(*r_write8)(void *, u_int32_t, u_int8_t);
	void			(*r_write16)(void *, u_int32_t, u_int16_t);
	void			(*r_write32)(void *, u_int32_t, u_int32_t);
	void			(*r_barrier)(void *, u_int32_t, u_int32_t, int);
};
d133 5
a137 3
	struct device		bcw_dev;
	struct ieee80211com	bcw_ic;
	struct bcw_regs		bcw_regs;
d142 6
a147 4
	bus_space_tag_t		bcw_btag;
	bus_space_handle_t	bcw_bhandle;
	bus_dma_tag_t		bcw_dmatag;
	struct arpcom		bcw_ac;		/* interface info */
d150 2
a151 2
	struct pci_attach_args	bcw_pa;
	u_int32_t		bcw_phy;	/* eeprom indicated phy */
d154 8
a161 8
	struct bcw_chain_data	bcw_cdata;	/* mbufs */
	bus_dmamap_t		bcw_ring_map;
	u_int32_t		bcw_intmask;	/* current intr mask */
	u_int32_t		bcw_rxin;	/* last rx descriptor seen */
	u_int32_t		bcw_txin;	/* last tx descriptor seen */
	int			bcw_txsfree;	/* no. tx slots available */
	int			bcw_txsnext;	/* next available tx slot */
	struct timeout		bcw_timeout;
d163 3
a165 3
	u_int16_t		bcw_chipid;	/* Chip ID */
	u_int16_t		bcw_chiprev;	/* Chip Revision */
	u_int16_t		bcw_prodid;	/* Product ID */
d168 20
a187 18
	u_int16_t		bcw_phy_version;
	u_int16_t		bcw_phy_type;
	u_int16_t		bcw_phy_rev;
	u_int16_t		bcw_corerev;
	u_int32_t		bcw_radioid;
	u_int16_t		bcw_radiorev;
	u_int16_t		bcw_radiotype;
	u_int32_t		bcw_phyinfo;
	u_int16_t		bcw_numcores;
	u_int16_t		bcw_havecommon;
	u_int8_t		bcw_radio_gain;
	u_int16_t		bcw_radio_pa0b0;
	u_int16_t		bcw_radio_pa0b1;
	u_int16_t		bcw_radio_pa0b2;
	u_int16_t		bcw_radio_pa1b0;
	u_int16_t		bcw_radio_pa1b1;
	u_int16_t		bcw_radio_pa1b2;
	u_int8_t		bcw_idletssi;
d191 1
a211 12
/* ring descriptor */
struct bcw_dma_slot {
	u_int32_t ctrl;
	u_int32_t addr;
};

#define CTRL_BC_MASK	0x1fff		/* buffer byte count */
#define CTRL_EOT	0x10000000	/* end of descriptor table */
#define CTRL_IOC	0x20000000	/* interrupt on completion */
#define CTRL_EOF	0x40000000	/* end of frame */
#define CTRL_SOF	0x80000000	/* start of frame */
                
@


1.1
log
@This is a very initial import for a driver which supports the IEEE 802.11
Broadcom BCM43xx chipset.  Device attaches, but has no further
functionality yet.

The work has been done by Jon Simola <jsimola@@gmail.com>, based on the
existing bce(4) code.  He will continue to work on the driver and try
to make further progress.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a37 1

d55 1
d57 7
a63 7
* Mbuf pointers. We need these to keep track of the virtual addresses   
* of our mbuf chains since we can only convert from physical to virtual,
* not the other way around.
*
* The chip has 6 DMA engines, looks like we only need to use one each
* for TX and RX, the others stay disabled.
*/
d86 1
d92 2
a93 1
	int			(*sc_newstate)(struct ieee80211com *, enum ieee80211_state, int);
d118 2
a119 2
//	struct 	bcw_core core[BCW_MAX_CORES];
//	struct 	bcw_radio radio[BCW_MAX_RADIOS];
d159 1
a159 1
#define BCW_NTXFRAGS    16
d163 1
a163 1
        u_int32_t ctrl;
d166 6
a171 6
                
#define CTRL_BC_MASK    0x1fff  /* buffer byte count */
#define CTRL_EOT        0x10000000      /* end of descriptor table */
#define CTRL_IOC        0x20000000      /* interrupt on completion */
#define CTRL_EOF        0x40000000      /* end of frame */
#define CTRL_SOF        0x80000000      /* start of frame */
a217 1

@

