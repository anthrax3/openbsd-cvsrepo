head	1.8;
access;
symbols
	OPENBSD_4_3:1.7.0.24
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.22
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.20
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.18
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.16
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.14
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.12
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.10
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.8
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.6
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.7
	UBC:1.4.0.6
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.2
	SMP_BASE:1.3
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2008.04.23.13.28.59;	author jsg;	state dead;
branches;
next	1.7;

1.7
date	2002.06.09.03.14.18;	author todd;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.03.16.05;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.55;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.13.15.58.39;	author mickey;	state Exp;
branches
	1.4.6.1;
next	1.3;

1.3
date	2000.02.05.13.55.46;	author d;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	99.08.19.06.17.04;	author d;	state Exp;
branches;
next	1.1;

1.1
date	99.07.30.13.43.36;	author d;	state Exp;
branches;
next	;

1.3.2.1
date	2001.05.14.22.24.08;	author niklas;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2002.03.28.11.51.01;	author niklas;	state Exp;
branches;
next	;

1.4.6.1
date	2002.06.11.03.42.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove driver for pre 802.11 RangeLAN2 wireless devices.
It doesn't compile, was never finished, is now irrelevant, and miod
has taken it apon himself to scare good boys and girls by suggesting
they read the code.

ok dlg@@
@
text
@/*	$OpenBSD: rlnvar.h,v 1.7 2002/06/09 03:14:18 todd Exp $	*/
/*
 * David Leonard <d@@openbsd.org>, 1999. Public domain.
 *
 * Proxim RangeLAN2 soft state copy.
 */

#include <sys/timeout.h>

/*
 * Mailboxes are used to communicate card-initiated messages
 * from the interrupt handler to other kernel threads.
 */
struct rln_mbox {
	void *		mb_buf;		/* Message buffer */
	size_t		mb_len;		/* Message buffer size */
	size_t		mb_actlen;	/* Actual message size */
	u_int8_t	mb_state;	/* Mailbox state */
#define RLNMBOX_VOID		0
#define RLNMBOX_EMPTY		1
#define RLNMBOX_FILLING		2
#define RLNMBOX_FILLED		3
};

#define RLN_NMBOX	0x7c			/* Same as max msg seq number */

/* Soft state */
struct rln_softc {
	struct		device sc_dev;
	void		*sc_ih;			/* Interrupt handler */
	struct		arpcom sc_arpcom;	/* Ethernet common part */
	bus_space_tag_t	sc_iot;			/* Bus cookie */
	bus_space_handle_t sc_ioh;		/* Bus i/o handle */
	struct timeout	sc_timeout;

	u_int8_t	sc_width;		/* Bus transfer width */
	u_int8_t	sc_irq;			/* IRQ for card */

	u_int16_t	sc_cardtype;		/* Set from config flags */
#define RLN_CTYPE_OEM		0x01
#define RLN_CTYPE_UISA		0x02
#define RLN_CTYPE_ONE_PIECE	0x04

	u_int8_t	sc_intsel;		/* Copy of INTSEL */
	u_int8_t	sc_status;		/* Copy of STATUS */
	u_int8_t	sc_control;		/* Copy of CONTROL */
#ifdef RLNDEBUG_REG
	u_int16_t	dbg_oreg[8];		/* Last reg value written */
#endif

	u_int8_t	sc_pktseq;		/* Card message seq no */
	u_int8_t	sc_txseq;		/* Tx packet seq no */

	u_int16_t	sc_state;		/* Soft state. */
#define RLN_STATE_SYNC		0x0001	/* Card is synchronised */
#define RLN_STATE_NEEDINIT	0x0002	/* Card needs reset+init */
#define RLN_STATE_PROMISC	0x0004	/* Receive all packets */

	struct		rln_mbox sc_mbox[0x80];	/* Per-message mailboxes */
	struct		rln_param sc_param;	/* User controlled parameters */
};

#define rln_need_reset(sc) \
	(sc)->sc_state |= RLN_STATE_NEEDINIT

/* Structure used to hold partial read state for rln_rx_pdata() */
struct rln_pdata {
	u_int8_t p_data;		/* extra data read but not consumed */
        int      p_nremain;		/* size of unconsumed data */
};
#define RLN_PDATA_INIT {0,0}

/* Structure used to hold partial transmit state for rln_msg_tx_*() */
struct rln_msg_tx_state {
	int      ien;			/* saved interrupt state */
	u_int8_t w;			/* saved wakup state */
	struct rln_pdata pd;		/* saved partial write state */
};

struct rln_mm_cmd;			/* fwd decl */

#define RLN_WAKEUP_SET		0xff
#define RLN_WAKEUP_NOCHANGE	(0x80|0x10)

void		rlnconfig(struct rln_softc *);
int		rlnintr(void *);
void		rlninit(struct rln_softc *);
void		rlnstop(struct rln_softc *);
void		rlnread(struct rln_softc *, struct rln_mm_cmd *, int);
int		rln_enable(struct rln_softc *, int);
int		rln_reset(struct rln_softc *);
u_int8_t	rln_wakeup(struct rln_softc *, u_int8_t);
int		rln_rx_request(struct rln_softc *, int);
int		rln_rx_data(struct rln_softc *, void *, int);
void		rln_rx_pdata(struct rln_softc *, void *, int,
			struct rln_pdata *);
void		rln_rx_end(struct rln_softc *);
void		rln_clear_nak(struct rln_softc *);
u_int8_t	rln_newseq(struct rln_softc *);

void		rln_msg_tx_data(struct rln_softc *, void *, u_int16_t,
			struct rln_msg_tx_state *);
int		rln_msg_tx_start(struct rln_softc *, void *, int,
			struct rln_msg_tx_state *);
int		rln_msg_tx_end(struct rln_softc *, 
			struct rln_msg_tx_state *);
int		rln_msg_txrx(struct rln_softc *, void *, int, 
			void *, int);

int		rln_mbox_create(struct rln_softc *, u_int8_t, void *,
			size_t);
int		rln_mbox_wait(struct rln_softc *, u_int8_t, int);
int		rln_mbox_lock(struct rln_softc *, u_int8_t, void **,
			size_t*);
void		rln_mbox_unlock(struct rln_softc *, u_int8_t, size_t);

/* debug all card operations */
#ifdef RLNDEBUG
#define dprintf(fmt, args...) printf(fmt , ## args)
	/* log(LOG_DEBUG, fmt , ## args) */
#define dprinthex(buf, len)	do {				\
	unsigned char *_b = (unsigned char *)(buf);		\
	int _i, _l=(len); 					\
	printf("{");						\
	for(_i = 0; _i < _l; _i++) {				\
		printf("%02x", _b[_i]);				\
		if (_i % 4 == 3 && _i != _l - 1)		\
			printf(",");				\
	}							\
	printf("}");						\
} while (0)
#else
#define dprintf(fmt, args...) /* nothing */
#define dprinthex(buf, len)	/* nothing */
#endif

/* debug messages to/from card. prints 4-octet groups separated by commas */
#define RLNDUMP
#define RLNDUMPHEX(buf, buflen) do {				\
	int _i;							\
	for (_i = 0; _i < (buflen); _i++) {			\
		printf("%02x", ((unsigned char *)(buf))[_i]);	\
		if (_i != (buflen) - 1 && _i % 4 == 3)		\
			printf(",");				\
	}							\
} while (0)
@


1.7
log
@a step towards consistancy; in general:
	'struct arpcom foo' -> 'struct arpcom sc_arpcom'
ok itojun@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rlnvar.h,v 1.5 2002/03/14 01:26:55 millert Exp $	*/
@


1.6
log
@Final __P removal plus some cosmetic fixups
@
text
@@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: rlnvar.h,v 1.4 2000/12/13 15:58:39 mickey Exp $	*/
d122 1
a122 1
	unsigned char *_b = (unsigned char*)(buf);		\
@


1.4
log
@new timeouts; hmm why it's not in generic?
@
text
@d1 1
a1 1
/*	$OpenBSD: rlnvar.h,v 1.3 2000/02/05 13:55:46 d Exp $	*/
d85 31
a115 31
void		rlnconfig __P((struct rln_softc *));
int		rlnintr __P((void *));
void		rlninit __P((struct rln_softc *));
void		rlnstop __P((struct rln_softc *));
void		rlnread __P((struct rln_softc *, struct rln_mm_cmd *, int));
int		rln_enable __P((struct rln_softc *, int));
int		rln_reset __P((struct rln_softc *));
u_int8_t	rln_wakeup __P((struct rln_softc *, u_int8_t));
int		rln_rx_request __P((struct rln_softc *, int));
int		rln_rx_data __P((struct rln_softc *, void *, int));
void		rln_rx_pdata __P((struct rln_softc *, void *, int,
			struct rln_pdata *));
void		rln_rx_end __P((struct rln_softc *));
void		rln_clear_nak __P((struct rln_softc *));
u_int8_t	rln_newseq __P((struct rln_softc *));

void		rln_msg_tx_data __P((struct rln_softc *, void *, u_int16_t,
			struct rln_msg_tx_state *));
int		rln_msg_tx_start __P((struct rln_softc *, void *, int,
			struct rln_msg_tx_state *));
int		rln_msg_tx_end __P((struct rln_softc *, 
			struct rln_msg_tx_state *));
int		rln_msg_txrx __P((struct rln_softc *, void *, int, 
			void *, int));

int		rln_mbox_create __P((struct rln_softc *, u_int8_t, void *,
			size_t));
int		rln_mbox_wait __P((struct rln_softc *, u_int8_t, int));
int		rln_mbox_lock __P((struct rln_softc *, u_int8_t, void **,
			size_t*));
void		rln_mbox_unlock __P((struct rln_softc *, u_int8_t, size_t));
@


1.4.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rlnvar.h,v 1.4 2000/12/13 15:58:39 mickey Exp $	*/
d85 31
a115 31
void		rlnconfig(struct rln_softc *);
int		rlnintr(void *);
void		rlninit(struct rln_softc *);
void		rlnstop(struct rln_softc *);
void		rlnread(struct rln_softc *, struct rln_mm_cmd *, int);
int		rln_enable(struct rln_softc *, int);
int		rln_reset(struct rln_softc *);
u_int8_t	rln_wakeup(struct rln_softc *, u_int8_t);
int		rln_rx_request(struct rln_softc *, int);
int		rln_rx_data(struct rln_softc *, void *, int);
void		rln_rx_pdata(struct rln_softc *, void *, int,
			struct rln_pdata *);
void		rln_rx_end(struct rln_softc *);
void		rln_clear_nak(struct rln_softc *);
u_int8_t	rln_newseq(struct rln_softc *);

void		rln_msg_tx_data(struct rln_softc *, void *, u_int16_t,
			struct rln_msg_tx_state *);
int		rln_msg_tx_start(struct rln_softc *, void *, int,
			struct rln_msg_tx_state *);
int		rln_msg_tx_end(struct rln_softc *, 
			struct rln_msg_tx_state *);
int		rln_msg_txrx(struct rln_softc *, void *, int, 
			void *, int);

int		rln_mbox_create(struct rln_softc *, u_int8_t, void *,
			size_t);
int		rln_mbox_wait(struct rln_softc *, u_int8_t, int);
int		rln_mbox_lock(struct rln_softc *, u_int8_t, void **,
			size_t*);
void		rln_mbox_unlock(struct rln_softc *, u_int8_t, size_t);
d122 1
a122 1
	unsigned char *_b = (unsigned char *)(buf);		\
@


1.3
log
@repair suspend/activate; extern rlnstop, rlninit
@
text
@d1 1
a1 1
/*	$OpenBSD: rlnvar.h,v 1.2 1999/08/19 06:17:04 d Exp $	*/
d8 2
d34 1
@


1.3.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: rlnvar.h,v 1.4 2000/12/13 15:58:39 mickey Exp $	*/
a7 2
#include <sys/timeout.h>

a31 1
	struct timeout	sc_timeout;
@


1.3.2.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d85 31
a115 31
void		rlnconfig(struct rln_softc *);
int		rlnintr(void *);
void		rlninit(struct rln_softc *);
void		rlnstop(struct rln_softc *);
void		rlnread(struct rln_softc *, struct rln_mm_cmd *, int);
int		rln_enable(struct rln_softc *, int);
int		rln_reset(struct rln_softc *);
u_int8_t	rln_wakeup(struct rln_softc *, u_int8_t);
int		rln_rx_request(struct rln_softc *, int);
int		rln_rx_data(struct rln_softc *, void *, int);
void		rln_rx_pdata(struct rln_softc *, void *, int,
			struct rln_pdata *);
void		rln_rx_end(struct rln_softc *);
void		rln_clear_nak(struct rln_softc *);
u_int8_t	rln_newseq(struct rln_softc *);

void		rln_msg_tx_data(struct rln_softc *, void *, u_int16_t,
			struct rln_msg_tx_state *);
int		rln_msg_tx_start(struct rln_softc *, void *, int,
			struct rln_msg_tx_state *);
int		rln_msg_tx_end(struct rln_softc *, 
			struct rln_msg_tx_state *);
int		rln_msg_txrx(struct rln_softc *, void *, int, 
			void *, int);

int		rln_mbox_create(struct rln_softc *, u_int8_t, void *,
			size_t);
int		rln_mbox_wait(struct rln_softc *, u_int8_t, int);
int		rln_mbox_lock(struct rln_softc *, u_int8_t, void **,
			size_t*);
void		rln_mbox_unlock(struct rln_softc *, u_int8_t, size_t);
d122 1
a122 1
	unsigned char *_b = (unsigned char *)(buf);		\
@


1.2
log
@increase size of register copies for debugging
@
text
@d1 1
a1 1
/*	$OpenBSD: rlnvar.h,v 1.1 1999/07/30 13:43:36 d Exp $	*/
d84 2
@


1.1
log
@rename rl2->rln for sanity
@
text
@d1 1
a1 1
/*	$OpenBSD: rlnvar.h,v 1.3 1999/07/14 03:54:38 d Exp $	*/
d45 1
a45 1
	u_int8_t	dbg_oreg[8];		/* Last reg value written */
@

