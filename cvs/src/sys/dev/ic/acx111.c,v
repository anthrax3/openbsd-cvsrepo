head	1.23;
access;
symbols
	OPENBSD_6_1:1.23.0.8
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.23.0.6
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.22.0.6
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.19.0.10
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.8
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.4
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.2
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.18.0.8
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.10
	OPENBSD_5_0:1.18.0.6
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.4
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.2
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.17.0.6
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.8
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.4
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.2
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.16.0.4
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.15.0.2
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11;
locks; strict;
comment	@ * @;


1.23
date	2015.11.24.13.45.06;	author mpi;	state Exp;
branches;
next	1.22;
commitid	FuSD2mFDJWATHIDx;

1.22
date	2014.12.22.02.28.51;	author tedu;	state Exp;
branches;
next	1.21;
commitid	yM2VFFhpDTeFQlve;

1.21
date	2014.11.18.23.55.01;	author krw;	state Exp;
branches;
next	1.20;
commitid	Qb045HZ5OhQfU69H;

1.20
date	2014.09.25.04.19.45;	author jsg;	state Exp;
branches;
next	1.19;
commitid	YyN37YkZHI2iLMjR;

1.19
date	2012.10.27.16.13.28;	author claudio;	state Exp;
branches;
next	1.18;

1.18
date	2010.04.20.22.05.41;	author tedu;	state Exp;
branches;
next	1.17;

1.17
date	2008.06.01.10.17.45;	author brad;	state Exp;
branches;
next	1.16;

1.16
date	2007.08.05.21.37.29;	author claudio;	state Exp;
branches;
next	1.15;

1.15
date	2007.02.28.09.26.26;	author claudio;	state Exp;
branches;
next	1.14;

1.14
date	2006.12.08.00.04.10;	author mglocker;	state Exp;
branches;
next	1.13;

1.13
date	2006.11.26.17.20.33;	author jsg;	state Exp;
branches;
next	1.12;

1.12
date	2006.09.27.04.34.36;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2006.08.19.23.17.12;	author mglocker;	state Exp;
branches;
next	1.10;

1.10
date	2006.08.15.15.43.34;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2006.08.14.06.53.26;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2006.08.06.14.23.28;	author mglocker;	state Exp;
branches;
next	1.7;

1.7
date	2006.08.06.13.03.03;	author mglocker;	state Exp;
branches;
next	1.6;

1.6
date	2006.08.05.13.06.50;	author mglocker;	state Exp;
branches;
next	1.5;

1.5
date	2006.08.04.10.47.15;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2006.08.03.12.00.07;	author mglocker;	state Exp;
branches;
next	1.3;

1.3
date	2006.08.03.10.47.42;	author mglocker;	state Exp;
branches;
next	1.2;

1.2
date	2006.08.03.10.12.37;	author mglocker;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.03.08.45.01;	author mglocker;	state Exp;
branches;
next	;


desc
@@


1.23
log
@No need to include <net/if_arp.h>

This header is only needed because <netinet/if_ether.h> declares a
structure that needs it.  But it turns out that <net/if.h> already
includes it as workaround.

A proper solution would be to stop declarting "struct ether_arp"
there.  But no driver should need this header.
@
text
@/*	$OpenBSD: acx111.c,v 1.22 2014/12/22 02:28:51 tedu Exp $ */

/*
 * Copyright (c) 2006 Jonathan Gray <jsg@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Copyright (c) 2006 The DragonFly Project.  All rights reserved.
 *
 * This code is derived from software contributed to The DragonFly Project
 * by Sepherosa Ziehau <sepherosa@@gmail.com>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name of The DragonFly Project nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific, prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "bpfilter.h"

#include <sys/param.h>
#include <sys/endian.h>
#include <sys/socket.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/bus.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <net80211/ieee80211_var.h>
#include <net80211/ieee80211_amrr.h>
#include <net80211/ieee80211_radiotap.h>

#include <dev/pci/pcireg.h>

#include <dev/ic/acxvar.h>
#include <dev/ic/acxreg.h>

#define ACX111_CONF_MEM		0x0003
#define ACX111_CONF_MEMINFO	0x0005

#define ACX111_INTR_ENABLE	(ACXRV_INTR_TX_FINI | ACXRV_INTR_RX_FINI)
/*
 * XXX do we really care about fowlling interrupts?
 *
 * ACXRV_INTR_IV_ICV_FAILURE | ACXRV_INTR_INFO |
 * ACXRV_INTR_SCAN_FINI | ACXRV_INTR_FCS_THRESHOLD
 */

#define ACX111_INTR_DISABLE	(uint16_t)~(ACXRV_INTR_CMD_FINI)

#define ACX111_RATE_2		0x0001
#define ACX111_RATE_4		0x0002
#define ACX111_RATE_11		0x0004
#define ACX111_RATE_12		0x0008
#define ACX111_RATE_18		0x0010
#define ACX111_RATE_22		0x0020
#define ACX111_RATE_24		0x0040
#define ACX111_RATE_36		0x0080
#define ACX111_RATE_44		0x0100
#define ACX111_RATE_48		0x0200
#define ACX111_RATE_72		0x0400
#define ACX111_RATE_96		0x0800
#define ACX111_RATE_108		0x1000

/* XXX skip ACX111_RATE_44 */
#define ACX111_RATE_ALL		0x1eff

#define ACX111_TXPOWER		15
#define ACX111_GPIO_POWER_LED	0x0040
#define ACX111_EE_EADDR_OFS	0x21

#define ACX111_FW_TXDESC_SIZE	(sizeof(struct acx_fw_txdesc) + 4)

#if ACX111_TXPOWER <= 12
#define ACX111_TXPOWER_VAL	1
#else
#define ACX111_TXPOWER_VAL	2
#endif

int	acx111_init(struct acx_softc *);
int	acx111_init_memory(struct acx_softc *);
void	acx111_init_fw_txring(struct acx_softc *, uint32_t);
int	acx111_write_config(struct acx_softc *, struct acx_config *);
void	acx111_set_fw_txdesc_rate(struct acx_softc *,
	    struct acx_txbuf *, int);
void	acx111_set_bss_join_param(struct acx_softc *, void *, int);

/*
 * NOTE:
 * Following structs' fields are little endian
 */
struct acx111_bss_join {
	uint16_t	basic_rates;
	uint8_t		dtim_intvl;
} __packed;

struct acx111_conf_mem {
	struct acx_conf	confcom;

	uint16_t	sta_max;	/* max num of sta, ACX111_STA_MAX */
	uint16_t	memblk_size;	/* mem block size */
	uint8_t		rx_memblk_perc;	/* percent of RX mem block, unit: 5% */
	uint8_t		fw_rxring_num;	/* num of RX ring */
	uint8_t		fw_txring_num;	/* num of TX ring */
	uint8_t		opt;		/* see ACX111_MEMOPT_ */
	uint8_t		xfer_perc;	/* frag/xfer proportion, unit: 5% */
	uint16_t	reserved0;
	uint8_t		reserved1;

	uint8_t		fw_rxdesc_num;	/* num of fw rx desc */
	uint8_t		fw_rxring_reserved1;
	uint8_t		fw_rxring_type;	/* see ACX111_RXRING_TYPE_ */
	uint8_t		fw_rxring_prio;	/* see ACX111_RXRING_PRIO_ */

	uint32_t	h_rxring_paddr; /* host rx desc start phyaddr */

	uint8_t		fw_txdesc_num;	/* num of fw tx desc */
	uint8_t		fw_txring_reserved1;
	uint8_t		fw_txring_reserved2;
	uint8_t		fw_txring_attr;	/* see ACX111_TXRING_ATTR_ */
} __packed;

#define ACX111_STA_MAX			32
#define ACX111_RX_MEMBLK_PERCENT	10	/* 50% */
#define ACX111_XFER_PERCENT		15	/* 75% */
#define ACX111_RXRING_TYPE_DEFAULT	7
#define ACX111_RXRING_PRIO_DEFAULT	0
#define ACX111_TXRING_ATTR_DEFAULT	0
#define ACX111_MEMOPT_DEFAULT		0

struct acx111_conf_meminfo {
	struct acx_conf	confcom;
	uint32_t	tx_memblk_addr;	/* start addr of tx mem blocks */
	uint32_t	rx_memblk_addr;	/* start addr of rx mem blocks */
	uint32_t	fw_rxring_start; /* start phyaddr of fw rx ring */
	uint32_t	reserved0;
	uint32_t	fw_txring_start; /* start phyaddr of fw tx ring */
	uint8_t		fw_txring_attr;	/* XXX see ACX111_TXRING_ATTR_ */
	uint16_t	reserved1;
	uint8_t		reserved2;
} __packed;

struct acx111_conf_txpower {
	struct acx_conf	confcom;
	uint8_t		txpower;
} __packed;

struct acx111_conf_option {
	struct acx_conf	confcom;
	uint32_t	feature;
	uint32_t	dataflow;	/* see ACX111_DF_ */
} __packed;

#define ACX111_DF_NO_RXDECRYPT	0x00000080
#define ACX111_DF_NO_TXENCRYPT	0x00000001

struct acx111_wepkey {
	uint8_t		mac_addr[IEEE80211_ADDR_LEN];
	uint16_t	action;		/* see ACX111_WEPKEY_ACT_ */
	uint16_t	reserved;
	uint8_t		key_len;
	uint8_t		key_type;	/* see ACX111_WEPKEY_TYPE_ */
	uint8_t		index;		/* XXX ?? */
	uint8_t		key_idx;
	uint8_t		counter[6];
#define ACX111_WEPKEY_LEN	32
	uint8_t		key[ACX111_WEPKEY_LEN];
} __packed;

#define ACX111_WEPKEY_ACT_ADD		1
#define ACX111_WEPKEY_TYPE_DEFAULT	0

static const uint16_t acx111_reg[ACXREG_MAX] = {
	ACXREG(SOFT_RESET,		0x0000),

	ACXREG(FWMEM_ADDR,		0x0014),
	ACXREG(FWMEM_DATA,		0x0018),
	ACXREG(FWMEM_CTRL,		0x001c),
	ACXREG(FWMEM_START,		0x0020),

	ACXREG(EVENT_MASK,		0x0034),

	ACXREG(INTR_TRIG,		0x00b4),
	ACXREG(INTR_MASK,		0x00d4),
	ACXREG(INTR_STATUS,		0x00f0),
	ACXREG(INTR_STATUS_CLR,		0x00e4),
	ACXREG(INTR_ACK,		0x00e8),

	ACXREG(HINTR_TRIG,		0x00ec),
	ACXREG(RADIO_ENABLE,		0x01d0),

	ACXREG(EEPROM_INIT,		0x0100),
	ACXREG(EEPROM_CTRL,		0x0338),
	ACXREG(EEPROM_ADDR,		0x033c),
	ACXREG(EEPROM_DATA,		0x0340),
	ACXREG(EEPROM_CONF,		0x0344),
	ACXREG(EEPROM_INFO,		0x0390),

	ACXREG(PHY_ADDR,		0x0350),
	ACXREG(PHY_DATA,		0x0354),
	ACXREG(PHY_CTRL,		0x0358),

	ACXREG(GPIO_OUT_ENABLE,		0x0374),
	ACXREG(GPIO_OUT,		0x037c),

	ACXREG(CMD_REG_OFFSET,		0x0388),
	ACXREG(INFO_REG_OFFSET,		0x038c),

	ACXREG(RESET_SENSE,		0x0104),
	ACXREG(ECPU_CTRL,		0x0108)
};

/* XXX */
static uint16_t	acx111_rate_map[109] = {
	ACX111_RATE_2,
	ACX111_RATE_4,
	ACX111_RATE_11,
	ACX111_RATE_22,
	ACX111_RATE_12,
	ACX111_RATE_18,
	ACX111_RATE_24,
	ACX111_RATE_36,
	ACX111_RATE_48,
	ACX111_RATE_72,
	ACX111_RATE_96,
	ACX111_RATE_108
};

void
acx111_set_param(struct acx_softc *sc)
{
	sc->chip_mem1_rid = PCIR_BAR(0);
	sc->chip_mem2_rid = PCIR_BAR(1);
	sc->chip_ioreg = acx111_reg;
	sc->chip_intr_enable = ACX111_INTR_ENABLE;
#ifndef IEEE80211_STA_ONLY
	sc->chip_intr_enable |= ACXRV_INTR_DTIM;
#endif
	sc->chip_intr_disable = ACX111_INTR_DISABLE;
	sc->chip_gpio_pled = ACX111_GPIO_POWER_LED;
	sc->chip_ee_eaddr_ofs = ACX111_EE_EADDR_OFS;

	sc->chip_phymode = IEEE80211_MODE_11G;
	sc->chip_chan_flags = IEEE80211_CHAN_CCK |
	    IEEE80211_CHAN_OFDM |
	    IEEE80211_CHAN_DYN |
	    IEEE80211_CHAN_2GHZ;
	sc->sc_ic.ic_caps = IEEE80211_C_WEP | IEEE80211_C_SHSLOT;
	sc->sc_ic.ic_phytype = IEEE80211_T_OFDM;
	sc->sc_ic.ic_sup_rates[IEEE80211_MODE_11B] = ieee80211_std_rateset_11b;
	sc->sc_ic.ic_sup_rates[IEEE80211_MODE_11G] = ieee80211_std_rateset_11g;

	sc->chip_init = acx111_init;
	sc->chip_write_config = acx111_write_config;
	sc->chip_set_fw_txdesc_rate = acx111_set_fw_txdesc_rate;
	sc->chip_set_bss_join_param = acx111_set_bss_join_param;
	sc->sc_flags |= ACX_FLAG_ACX111;
}

int
acx111_init(struct acx_softc *sc)
{
	struct ifnet *ifp = &sc->sc_ic.ic_if;

	/*
	 * NOTE:
	 * Order of initialization:
	 * 1) Templates
	 * 2) Hardware memory
	 * Above order is critical to get a correct memory map
	 */
	if (acx_init_tmplt_ordered(sc) != 0) {
		printf("%s: %s can't initialize templates\n",
		    ifp->if_xname, __func__);
		return (ENXIO);
	}

	if (acx111_init_memory(sc) != 0) {
		printf("%s: %s can't initialize hw memory\n",
		    ifp->if_xname, __func__);
		return (ENXIO);
	}

	return (0);
}

int
acx111_init_memory(struct acx_softc *sc)
{
	struct acx111_conf_mem mem;
	struct acx111_conf_meminfo mem_info;
	struct ifnet *ifp = &sc->sc_ic.ic_if;

	/* Set memory configuration */
	bzero(&mem, sizeof(mem));

	mem.sta_max = htole16(ACX111_STA_MAX);
	mem.memblk_size = htole16(ACX_MEMBLOCK_SIZE);
	mem.rx_memblk_perc = ACX111_RX_MEMBLK_PERCENT;
	mem.opt = ACX111_MEMOPT_DEFAULT;
	mem.xfer_perc = ACX111_XFER_PERCENT;

	mem.fw_rxring_num = 1;
	mem.fw_rxring_type = ACX111_RXRING_TYPE_DEFAULT;
	mem.fw_rxring_prio = ACX111_RXRING_PRIO_DEFAULT;
	mem.fw_rxdesc_num = ACX_RX_DESC_CNT;
	mem.h_rxring_paddr = htole32(sc->sc_ring_data.rx_ring_paddr);

	mem.fw_txring_num = 1;
	mem.fw_txring_attr = ACX111_TXRING_ATTR_DEFAULT;
	mem.fw_txdesc_num = ACX_TX_DESC_CNT;

	if (acx_set_conf(sc, ACX111_CONF_MEM, &mem, sizeof(mem)) != 0) {
		printf("%s: can't set mem\n", ifp->if_xname);
		return (1);
	}

	/* Get memory configuration */
	if (acx_get_conf(sc, ACX111_CONF_MEMINFO, &mem_info,
	    sizeof(mem_info)) != 0) {
		printf("%s: can't get meminfo\n", ifp->if_xname);
		return (1);
	}

	/* Setup firmware TX descriptor ring */
	acx111_init_fw_txring(sc, letoh32(mem_info.fw_txring_start));

	/*
	 * There is no need to setup firmware RX descriptor ring,
	 * it is automaticly setup by hardware.
	 */

	return (0);
}

void
acx111_init_fw_txring(struct acx_softc *sc, uint32_t fw_txdesc_start)
{
	struct acx_txbuf *tx_buf;
	uint32_t desc_paddr;
	int i;

	tx_buf = sc->sc_buf_data.tx_buf;
	desc_paddr = sc->sc_ring_data.tx_ring_paddr;

	for (i = 0; i < ACX_TX_DESC_CNT; ++i) {
		tx_buf[i].tb_fwdesc_ofs = fw_txdesc_start +
		    (i * ACX111_FW_TXDESC_SIZE);

		/*
		 * Except for the following fields, rest of the fields
		 * are setup by hardware.
		 */
		FW_TXDESC_SETFIELD_4(sc, &tx_buf[i], f_tx_host_desc,
		    desc_paddr);
		FW_TXDESC_SETFIELD_1(sc, &tx_buf[i], f_tx_ctrl,
		    DESC_CTRL_HOSTOWN);

		desc_paddr += (2 * sizeof(struct acx_host_desc));
	}
}

int
acx111_write_config(struct acx_softc *sc, struct acx_config *conf)
{
	struct acx111_conf_txpower tx_power;
	struct acx111_conf_option opt;
	struct ifnet *ifp = &sc->sc_ic.ic_if;
	uint32_t dataflow;

	/* Set TX power */
	tx_power.txpower = ACX111_TXPOWER_VAL;
	if (acx_set_conf(sc, ACX_CONF_TXPOWER, &tx_power,
	    sizeof(tx_power)) != 0) {
		printf("%s: %s can't set TX power\n",
		    ifp->if_xname, __func__);
		return (ENXIO);
	}

	/*
	 * Turn off hardware WEP
	 */
	if (acx_get_conf(sc, ACX_CONF_OPTION, &opt, sizeof(opt)) != 0) {
		printf("%s: %s can't get option\n", ifp->if_xname, __func__);
		return (ENXIO);
	}

	dataflow = letoh32(opt.dataflow) |
	    ACX111_DF_NO_TXENCRYPT |
	    ACX111_DF_NO_RXDECRYPT;
	opt.dataflow = htole32(dataflow);

	if (acx_set_conf(sc, ACX_CONF_OPTION, &opt, sizeof(opt)) != 0) {
		printf("%s: %s can't set option\n", ifp->if_xname, __func__);
		return (ENXIO);
	}

	return (0);
}

void
acx111_set_fw_txdesc_rate(struct acx_softc *sc, struct acx_txbuf *tx_buf,
    int rate0)
{
	uint16_t rate;

	rate = acx111_rate_map[rate0];
	if (rate == 0)
		/* set rate to 1Mbit/s if rate was zero */
		rate = acx111_rate_map[2];

	FW_TXDESC_SETFIELD_2(sc, tx_buf, u.r2.rate111, rate);
}

void
acx111_set_bss_join_param(struct acx_softc *sc, void *param, int dtim_intvl)
{
	struct acx111_bss_join *bj = param;

	bj->basic_rates = htole16(ACX111_RATE_ALL);
	bj->dtim_intvl = dtim_intvl;
}
@


1.22
log
@unifdef INET
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.21 2014/11/18 23:55:01 krw Exp $ */
a63 1
#include <net/if_arp.h>
@


1.21
log
@Nuke yet more obvious #include duplications.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.20 2014/09/25 04:19:45 jsg Exp $ */
a66 1
#ifdef INET
a68 1
#endif
@


1.20
log
@include bpfilter.h so the softc will be the same size in all files
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.19 2012/10/27 16:13:28 claudio Exp $ */
a65 2

#include <net/if.h>
@


1.19
log
@Implememnt AP side power saving for acx(4). Tested on acx11.
With some input and OK from kettenis@@ and OK sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.18 2010/04/20 22:05:41 tedu Exp $ */
d52 2
@


1.18
log
@remove proc.h include from uvm_map.h.  This has far reaching effects, as
sysctl.h was reliant on this particular include, and many drivers included
sysctl.h unnecessarily.  remove sysctl.h or add proc.h as needed.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.17 2008/06/01 10:17:45 brad Exp $ */
d279 3
@


1.17
log
@ACX111 parts can't send using short slot time, but it seems to have no problem
to receive packets sent using short slot time.  Turn on short slot time
support, so that we don't prevent other STA from using short slot time.

From sephe@@DragonFly

ok mglocker@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.16 2007/08/05 21:37:29 claudio Exp $ */
d56 1
a56 1
#include <sys/sysctl.h>
@


1.16
log
@Kill one more useless macro. Found while looking for something totaly
different. OK mglocker@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.15 2007/02/28 09:26:26 claudio Exp $ */
d288 1
a288 1
	sc->sc_ic.ic_caps = IEEE80211_C_WEP;
@


1.15
log
@Another round of makro killing. Kill _ACX_CONF_FUNC() and replace all
calls with acx_set_conf()/acx_get_conf(). OK mglocker@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.14 2006/12/08 00:04:10 mglocker Exp $ */
a106 1
#define ACX111_RATE(rate)	[rate] = ACX111_RATE_##rate
d258 12
a269 12
	ACX111_RATE(2),
	ACX111_RATE(4),
	ACX111_RATE(11),
	ACX111_RATE(22),
	ACX111_RATE(12),
	ACX111_RATE(18),
	ACX111_RATE(24),
	ACX111_RATE(36),
	ACX111_RATE(48),
	ACX111_RATE(72),
	ACX111_RATE(96),
	ACX111_RATE(108)
@


1.14
log
@If we receive a rate of 0 from the AMRR rate adaption code, set the
TX rate to a minimum value of 1Mbit/s instead of doing a panic().  We
don't know yet how the rate of 0 is produced in some conditions.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.13 2006/11/26 17:20:33 jsg Exp $ */
a216 11
#define ACX111_CONF_FUNC(sg, name)	_ACX_CONF_FUNC(sg, name, 111)
#define ACX_CONF_mem			ACX111_CONF_MEM
#define ACX_CONF_meminfo		ACX111_CONF_MEMINFO
#define ACX_CONF_txpower		ACX_CONF_TXPOWER
#define ACX_CONF_option			ACX_CONF_OPTION
ACX111_CONF_FUNC(set, mem);
ACX111_CONF_FUNC(get, meminfo);
ACX111_CONF_FUNC(set, txpower);
ACX111_CONF_FUNC(get, option);
ACX111_CONF_FUNC(set, option);

d354 1
a354 1
	if (acx111_set_mem_conf(sc, &mem) != 0) {
d360 2
a361 1
	if (acx111_get_meminfo_conf(sc, &mem_info) != 0) {
d414 2
a415 1
	if (acx111_set_txpower_conf(sc, &tx_power) != 0) {
d424 1
a424 1
	if (acx111_get_option_conf(sc, &opt) != 0) {
d434 1
a434 1
	if (acx111_set_option_conf(sc, &opt) != 0) {
@


1.13
log
@Make use of ieee80211_std_rateset
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.12 2006/09/27 04:34:36 brad Exp $ */
d459 2
a460 1
		panic("no rate map for %d\n", rate0);
@


1.12
log
@add missing sys/device.h header.
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.11 2006/08/19 23:17:12 mglocker Exp $ */
d302 2
a303 2
	sc->sc_ic.ic_sup_rates[IEEE80211_MODE_11B] = acx_rates_11b;
	sc->sc_ic.ic_sup_rates[IEEE80211_MODE_11G] = acx_rates_11g;
@


1.11
log
@Replace existing rate adaption code with the ieee80211_amrr framework.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.10 2006/08/15 15:43:34 deraadt Exp $ */
d57 1
@


1.10
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.9 2006/08/14 06:53:26 jsg Exp $ */
d72 1
@


1.9
log
@Turn off debug messages by default.
Reminded by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.8 2006/08/06 14:23:28 mglocker Exp $ */
d21 1
a21 1
 * 
d24 1
a24 1
 * 
d28 1
a28 1
 * 
d38 1
a38 1
 * 
d263 1
a263 1
	ACXREG(ECPU_CTRL,		0x0108) 
@


1.8
log
@Some KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.7 2006/08/06 13:03:03 mglocker Exp $ */
a74 2

#define ACX_DEBUG
@


1.7
log
@Add bpf hooks.  Based on slightly modified diff from jsg.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.6 2006/08/05 13:06:50 mglocker Exp $ */
d124 8
a135 1

a283 11
int	acx111_init(struct acx_softc *);
int	acx111_init_memory(struct acx_softc *);
void	acx111_init_fw_txring(struct acx_softc *, uint32_t);

int	acx111_write_config(struct acx_softc *, struct acx_config *);

void	acx111_set_fw_txdesc_rate(struct acx_softc *,
					  struct acx_txbuf *, int);
void	acx111_set_bss_join_param(struct acx_softc *, void *, int);


d297 3
a299 3
			      IEEE80211_CHAN_OFDM |
			      IEEE80211_CHAN_DYN |
			      IEEE80211_CHAN_2GHZ;
a323 1

d327 1
a327 1
		return ENXIO;
d333 1
a333 1
		return ENXIO;
d335 2
a336 1
	return 0;
d367 1
a367 1
		return 1;
d373 1
a373 1
		return 1;
d384 1
a384 1
	return 0;
d399 1
a399 1
					  (i * ACX111_FW_TXDESC_SIZE);
d406 1
a406 1
				     desc_paddr);
d408 1
a408 1
				     DESC_CTRL_HOSTOWN);
d427 1
a427 1
		return ENXIO;
d435 1
a435 1
		return ENXIO;
d439 2
a440 2
		   ACX111_DF_NO_TXENCRYPT |
		   ACX111_DF_NO_RXDECRYPT;
d445 1
a445 1
		return ENXIO;
d447 2
a448 1
	return 0;
d453 1
a453 1
			  int rate0)
@


1.6
log
@Adjust copyright.
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.5 2006/08/04 10:47:15 jsg Exp $ */
d72 1
@


1.5
log
@Load ACX111 firmware for ACX111.
ok mglocker@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.4 2006/08/03 12:00:07 mglocker Exp $ */
a4 1
 * Copyright (c) 2006 Marcus Glocker <mglocker@@openbsd.org>
@


1.4
log
@Fix more cvs Id tag tweaks in copyright notes.

Spotted by <gwyllion@@ulyssis.org>
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.3 2006/08/03 10:47:42 mglocker Exp $ */
d313 1
@


1.3
log
@Add/Fix copyright notes.
@
text
@d1 1
a1 1
/*	$OpenBSD: acx111.c,v 1.2 2006/08/03 10:12:37 mglocker Exp $ */
a51 2
 * 
 * $DragonFly$
@


1.2
log
@Change to OpenBSD cvs tag.
@
text
@d1 18
a18 1
/*	$OpenBSD$ */
@


1.1
log
@Inital import for the acx(4) driver.

ok deraadt@@ jsg@@
@
text
@d1 1
a1 1
/* $Id: acx111.c,v 1.2 2006/08/01 11:32:19 hacki Exp $ */
@

