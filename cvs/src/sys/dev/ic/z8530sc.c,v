head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.16
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.10
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.12
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.4
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.8
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.40
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.36
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.38
	OPENBSD_5_0:1.6.0.34
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.32
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.30
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.26
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.4.0.24
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.22
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.20
	OPENBSD_2_8:1.4.0.18
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.16
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.14
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2013.04.21.14.44.16;	author sebastia;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.23.28.02;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.55;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.01.15.05.35.46;	author kstailey;	state Exp;
branches
	1.4.14.1
	1.4.24.1;
next	1.3;

1.3
date	96.05.26.00.27.06;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.22.21.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.01.31.07.01.08;	author deraadt;	state Exp;
branches;
next	;

1.4.14.1
date	2002.03.28.12.11.34;	author niklas;	state Exp;
branches;
next	1.4.14.2;

1.4.14.2
date	2003.06.07.11.02.29;	author ho;	state Exp;
branches;
next	;

1.4.24.1
date	2002.06.11.03.42.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Unify the zs tty driver.

Most of the hard work by mpi@@, who provided the initial diff.
Fixes for sparc from myself. Tested on sgi and sparc myself.
Compiles and detects zstty on my powerbook, compile tested on
sparc64 by me. Real testing with zs device on sparc64 by miod@@
who also gave a lot of help and feedback.

ok miod@@, mpi@@
@
text
@/*	$OpenBSD: z8530sc.c,v 1.2 2012/04/29 09:01:38 miod Exp $	*/
/*	$NetBSD: z8530sc.c,v 1.30 2009/05/22 03:51:30 mrg Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)zs.c	8.1 (Berkeley) 7/19/93
 */

/*
 * Copyright (c) 1994 Gordon W. Ross
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)zs.c	8.1 (Berkeley) 7/19/93
 */

/*
 * Zilog Z8530 Dual UART driver (common part)
 *
 * This file contains the machine-independent parts of the
 * driver common to tty and keyboard/mouse sub-drivers.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/file.h>
#include <sys/ioctl.h>
#include <sys/tty.h>
#include <sys/time.h>
#include <sys/kernel.h>
#include <sys/syslog.h>

#include <dev/ic/z8530reg.h>
#include <machine/z8530var.h>

void
zs_break(struct zs_chanstate *cs, int set)
{

	if (set) {
		cs->cs_preg[5] |= ZSWR5_BREAK;
		cs->cs_creg[5] |= ZSWR5_BREAK;
	} else {
		cs->cs_preg[5] &= ~ZSWR5_BREAK;
		cs->cs_creg[5] &= ~ZSWR5_BREAK;
	}
	zs_write_reg(cs, 5, cs->cs_creg[5]);
}


/*
 * drain on-chip fifo
 */
void
zs_iflush(struct zs_chanstate *cs)
{
	uint8_t c, rr0, rr1;
	int i;

	/*
	 * Count how many times we loop. Some systems, such as some
	 * Apple PowerBooks, claim to have SCC's which they really don't.
	 */
	for (i = 0; i < 32; i++) {
		/* Is there input available? */
		rr0 = zs_read_csr(cs);
		if ((rr0 & ZSRR0_RX_READY) == 0)
			break;

		/*
		 * First read the status, because reading the data
		 * destroys the status of this char.
		 */
		rr1 = zs_read_reg(cs, 1);
		c = zs_read_data(cs);

		if (rr1 & (ZSRR1_FE | ZSRR1_DO | ZSRR1_PE)) {
			/* Clear the receive error. */
			zs_write_csr(cs, ZSWR0_RESET_ERRORS);
		}
	}
}


/*
 * Write the given register set to the given zs channel in the proper order.
 * The channel must not be transmitting at the time.  The receiver will
 * be disabled for the time it takes to write all the registers.
 * Call this with interrupts disabled.
 */
void
zs_loadchannelregs(struct zs_chanstate *cs)
{
	uint8_t *reg, v;

	zs_write_csr(cs, ZSM_RESET_ERR); /* XXX: reset error condition */

#if 1
	/*
	 * XXX: Is this really a good idea?
	 * XXX: Should go elsewhere! -gwr
	 */
	zs_iflush(cs);	/* XXX */
#endif

	if (cs->cs_ctl_chan != NULL)
		v = ((cs->cs_ctl_chan->cs_creg[5] & (ZSWR5_RTS | ZSWR5_DTR)) !=
		    (cs->cs_ctl_chan->cs_preg[5] & (ZSWR5_RTS | ZSWR5_DTR)));
	else
		v = 0;

	if (memcmp((void *)cs->cs_preg, (void *)cs->cs_creg, 16) == 0 && !v)
		return;	/* only change if values are different */

	/* Copy "pending" regs to "current" */
	memcpy((void *)cs->cs_creg, (void *)cs->cs_preg, 16);
	reg = cs->cs_creg;	/* current regs */

	/* disable interrupts */
	zs_write_reg(cs, 1, reg[1] & ~ZSWR1_IMASK);

	/* baud clock divisor, stop bits, parity */
	zs_write_reg(cs, 4, reg[4]);

	/* misc. TX/RX control bits */
	zs_write_reg(cs, 10, reg[10]);

	/* char size, enable (RX/TX) */
	zs_write_reg(cs, 3, reg[3] & ~ZSWR3_RX_ENABLE);
	zs_write_reg(cs, 5, reg[5] & ~ZSWR5_TX_ENABLE);

	/* synchronous mode stuff */
	zs_write_reg(cs, 6, reg[6]);
	if (reg[15] & ZSWR15_ENABLE_ENHANCED)
		zs_write_reg(cs, 15, 0);
	zs_write_reg(cs, 7, reg[7]);

#if 0
	/*
	 * Registers 2 and 9 are special because they are
	 * actually common to both channels, but must be
	 * programmed through channel A.  The "zsc" attach
	 * function takes care of setting these registers
	 * and they should not be touched thereafter.
	 */
	/* interrupt vector */
	zs_write_reg(cs, 2, reg[2]);
	/* master interrupt control */
	zs_write_reg(cs, 9, reg[9]);
#endif

	/* Shut down the BRG */
	zs_write_reg(cs, 14, reg[14] & ~ZSWR14_BAUD_ENA);

#ifdef	ZS_MD_SETCLK
	/* Let the MD code setup any external clock. */
	ZS_MD_SETCLK(cs);
#endif	/* ZS_MD_SETCLK */

	/* clock mode control */
	zs_write_reg(cs, 11, reg[11]);

	/* baud rate (lo/hi) */
	zs_write_reg(cs, 12, reg[12]);
	zs_write_reg(cs, 13, reg[13]);

	/* Misc. control bits */
	zs_write_reg(cs, 14, reg[14]);

	/* which lines cause status interrupts */
	zs_write_reg(cs, 15, reg[15]);

	/*
	 * Zilog docs recommend resetting external status twice at this
	 * point. Mainly as the status bits are latched, and the first
	 * interrupt clear might unlatch them to new values, generating
	 * a second interrupt request.
	 */
	zs_write_csr(cs, ZSM_RESET_STINT);
	zs_write_csr(cs, ZSM_RESET_STINT);

	/* char size, enable (RX/TX)*/
	zs_write_reg(cs, 3, reg[3]);
	zs_write_reg(cs, 5, reg[5]);

	/* Write the status bits on the alternate channel also. */
	if (cs->cs_ctl_chan != NULL) {
		v = cs->cs_ctl_chan->cs_preg[5];
		cs->cs_ctl_chan->cs_creg[5] = v;
		zs_write_reg(cs->cs_ctl_chan, 5, v);
	}

	/* Register 7' if applicable */
	if (reg[15] & ZSWR15_ENABLE_ENHANCED)
		zs_write_reg(cs, 7, reg[16]);

	/* interrupt enables: RX, TX, STATUS */
	zs_write_reg(cs, 1, reg[1]);
}

/*
 * ZS hardware interrupt.  Scan all ZS channels.  NB: we know here that
 * channels are kept in (A,B) pairs.
 *
 * Do just a little, then get out; set a software interrupt if more
 * work is needed.
 *
 * We deliberately ignore the vectoring Zilog gives us, and match up
 * only the number of `reset interrupt under service' operations, not
 * the order.
 */
int
zsc_intr_hard(void *arg)
{
	struct zsc_softc *zsc = arg;
	struct zs_chanstate *cs0, *cs1;
	int handled;
	uint8_t rr3;

	handled = 0;

	/* First look at channel A. */
	cs0 = zsc->zsc_cs[0];
	cs1 = zsc->zsc_cs[1];

	/*
	 * We have to clear interrupt first to avoid a race condition,
	 * but it will be done in each MD handler.
	 */
	for (;;) {
		/* Note: only channel A has an RR3 */
		rr3 = zs_read_reg(cs0, 3);

		if ((rr3 & (ZSRR3_IP_A_RX | ZSRR3_IP_A_TX | ZSRR3_IP_A_STAT |
		    ZSRR3_IP_B_RX | ZSRR3_IP_B_TX | ZSRR3_IP_B_STAT)) == 0) {
			break;
		}
		handled = 1;

		/* First look at channel A. */
		if (rr3 & (ZSRR3_IP_A_RX | ZSRR3_IP_A_TX | ZSRR3_IP_A_STAT))
			zs_write_csr(cs0, ZSWR0_CLR_INTR);

		if (rr3 & ZSRR3_IP_A_RX)
			(*cs0->cs_ops->zsop_rxint)(cs0);
		if (rr3 & ZSRR3_IP_A_STAT)
			(*cs0->cs_ops->zsop_stint)(cs0, 0);
		if (rr3 & ZSRR3_IP_A_TX)
			(*cs0->cs_ops->zsop_txint)(cs0);

		/* Now look at channel B. */
		if (rr3 & (ZSRR3_IP_B_RX | ZSRR3_IP_B_TX | ZSRR3_IP_B_STAT))
			zs_write_csr(cs1, ZSWR0_CLR_INTR);

		if (rr3 & ZSRR3_IP_B_RX)
			(*cs1->cs_ops->zsop_rxint)(cs1);
		if (rr3 & ZSRR3_IP_B_STAT)
			(*cs1->cs_ops->zsop_stint)(cs1, 0);
		if (rr3 & ZSRR3_IP_B_TX)
			(*cs1->cs_ops->zsop_txint)(cs1);
	}

	/* Note: caller will check cs_x->cs_softreq and DTRT. */
	return handled;
}


/*
 * ZS software interrupt.  Scan all channels for deferred interrupts.
 */
int
zsc_intr_soft(void *arg)
{
	struct zsc_softc *zsc = arg;
	struct zs_chanstate *cs;
	int rval, chan;

	rval = 0;
	for (chan = 0; chan < 2; chan++) {
		cs = zsc->zsc_cs[chan];

		/*
		 * The softint flag can be safely cleared once
		 * we have decided to call the softint routine.
		 * (No need to do splzs() first.)
		 */
		if (cs->cs_softreq) {
			cs->cs_softreq = 0;
			(*cs->cs_ops->zsop_softint)(cs);
			rval++;
		}
	}
	return (rval);
}

/*
 * Provide a null zs "ops" vector.
 */

static void zsnull_rxint  (struct zs_chanstate *);
static void zsnull_stint  (struct zs_chanstate *, int);
static void zsnull_txint  (struct zs_chanstate *);
static void zsnull_softint(struct zs_chanstate *);

static void
zsnull_rxint(struct zs_chanstate *cs)
{

	/* Ask for softint() call. */
	cs->cs_softreq = 1;
}

static void
zsnull_stint(struct zs_chanstate *cs, int force)
{

	/* Ask for softint() call. */
	cs->cs_softreq = 1;
}

static void
zsnull_txint(struct zs_chanstate *cs)
{

	/* Ask for softint() call. */
	cs->cs_softreq = 1;
}

static void
zsnull_softint(struct zs_chanstate *cs)
{

	zs_write_reg(cs,  1, 0);
	zs_write_reg(cs, 15, 0);
}

struct zsops zsops_null = {
	zsnull_rxint,	/* receive char available */
	zsnull_stint,	/* external/status */
	zsnull_txint,	/* xmit buffer empty */
	zsnull_softint,	/* process software interrupt */
};
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 2
a2 2
/*	$OpenBSD: z8530sc.c,v 1.5 2002/03/14 01:26:55 millert Exp $ */
/*	$NetBSD: z8530sc.c,v 1.4 1996/05/17 19:30:34 gwr Exp $	*/
a4 1
 * Copyright (c) 1994 Gordon W. Ross
d45 43
a108 3
static void zsnull_intr(struct zs_chanstate *);
static void zsnull_softint(struct zs_chanstate *);

d110 1
a110 3
zs_break(cs, set)
	struct zs_chanstate *cs;
	int set;
a111 1
	int s;
a112 1
	s = splzs();
a120 1
	splx(s);
a124 14
 * Compute the current baud rate given a ZSCC channel.
 */
int
zs_getspeed(cs)
	struct zs_chanstate *cs;
{
	int tconst;

	tconst = zs_read_reg(cs, 12);
	tconst |= zs_read_reg(cs, 13) << 8;
	return (TCONST_TO_BPS(cs->cs_brg_clk, tconst));
}

/*
d128 1
a128 2
zs_iflush(cs)
	struct zs_chanstate *cs;
d130 2
a131 1
	u_char c, rr0, rr1;
d133 5
a137 1
	for (;;) {
d156 1
a156 1
	
d165 1
a165 2
zs_loadchannelregs(cs)
	struct zs_chanstate *cs;
d167 1
a167 5
	u_char *reg;

	/* Copy "pending" regs to "current" */
	bcopy((caddr_t)cs->cs_preg, (caddr_t)cs->cs_creg, 16);
	reg = cs->cs_creg;	/* current regs */
d169 1
a169 1
	zs_write_csr(cs, ZSM_RESET_ERR);	/* XXX: reset error condition */
d179 16
d205 5
a209 2
	/* interrupt enables: TX, TX, STATUS */
	zs_write_reg(cs, 1, reg[1]);
d225 8
d246 9
d258 14
a273 1

d286 1
a286 2
zsc_intr_hard(arg)
	void *arg;
d288 10
a297 5
	register struct zsc_softc *zsc = arg;
	register struct zs_chanstate *cs_a;
	register struct zs_chanstate *cs_b;
	register int rval;
	register u_char rr3;
d299 7
a305 3
	cs_a = &zsc->zsc_cs[0];
	cs_b = &zsc->zsc_cs[1];
	rval = 0;
d307 5
a311 2
	/* Note: only channel A has an RR3 */
	rr3 = zs_read_reg(cs_a, 3);
d313 21
a333 31
	/* Handle receive interrupts first. */
	if (rr3 & ZSRR3_IP_A_RX)
		(*cs_a->cs_ops->zsop_rxint)(cs_a);
	if (rr3 & ZSRR3_IP_B_RX)
		(*cs_b->cs_ops->zsop_rxint)(cs_b);

	/* Handle status interrupts (i.e. flow control). */
	if (rr3 & ZSRR3_IP_A_STAT)
		(*cs_a->cs_ops->zsop_stint)(cs_a);
	if (rr3 & ZSRR3_IP_B_STAT)
		(*cs_b->cs_ops->zsop_stint)(cs_b);

	/* Handle transmit done interrupts. */
	if (rr3 & ZSRR3_IP_A_TX)
		(*cs_a->cs_ops->zsop_txint)(cs_a);
	if (rr3 & ZSRR3_IP_B_TX)
		(*cs_b->cs_ops->zsop_txint)(cs_b);

	/* Clear interrupt. */
	if (rr3 & (ZSRR3_IP_A_RX | ZSRR3_IP_A_TX | ZSRR3_IP_A_STAT)) {
		zs_write_csr(cs_a, ZSWR0_CLR_INTR);
		rval |= 1;
	}
	if (rr3 & (ZSRR3_IP_B_RX | ZSRR3_IP_B_TX | ZSRR3_IP_B_STAT)) {
		zs_write_csr(cs_b, ZSWR0_CLR_INTR);
		rval |= 2;
	}

	if ((cs_a->cs_softreq) || (cs_b->cs_softreq)) {
		/* This is a machine-dependent function (or macro). */
		zsc_req_softint(zsc);
d336 2
a337 1
	return (rval);
d345 1
a345 2
zsc_intr_soft(arg)
	void *arg;
d347 3
a349 3
	register struct zsc_softc *zsc = arg;
	register struct zs_chanstate *cs;
	register int rval, unit;
d352 2
a353 2
	for (unit = 0; unit < 2; unit++) {
		cs = &zsc->zsc_cs[unit];
d363 1
a363 1
			rval = 1;
d369 16
d387 9
a395 2
zsnull_intr(cs)
	struct zs_chanstate *cs;
d397 3
a399 2
	zs_write_reg(cs,  1, 0);
	zs_write_reg(cs, 15, 0);
d403 1
a403 2
zsnull_softint(cs)
	struct zs_chanstate *cs;
d405 3
d411 3
a413 3
	zsnull_intr,	/* receive char available */
	zsnull_intr,	/* external/status */
	zsnull_intr,	/* xmit buffer empty */
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: z8530sc.c,v 1.4 1997/01/15 05:35:46 kstailey Exp $ */
d26 1
a26 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.4
log
@more missing prototypes and other warnings fixed
@
text
@d1 1
a1 1
/*	$OpenBSD: z8530sc.c,v 1.2 1996/04/21 22:21:35 deraadt Exp $ */
d71 2
a72 2
static void zsnull_intr __P((struct zs_chanstate *));
static void zsnull_softint __P((struct zs_chanstate *));
@


1.4.24.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: z8530sc.c,v 1.4 1997/01/15 05:35:46 kstailey Exp $ */
d71 2
a72 2
static void zsnull_intr(struct zs_chanstate *);
static void zsnull_softint(struct zs_chanstate *);
@


1.4.14.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d71 2
a72 2
static void zsnull_intr(struct zs_chanstate *);
static void zsnull_softint(struct zs_chanstate *);
@


1.4.14.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: z8530sc.c,v 1.4.14.1 2002/03/28 12:11:34 niklas Exp $ */
d26 5
a30 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.3
log
@sync 0521
@
text
@d71 4
a74 1
int
a148 1
	int i;
@


1.2
log
@partial sync with netbsd 960418, more to come
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: z8530sc.c,v 1.3 1996/04/10 21:44:35 gwr Exp $	*/
d102 1
a102 1
	return (TCONST_TO_BPS(cs->cs_pclk_div16, tconst));
@


1.1
log
@z8530 reorganization from gwr (which i think isn't nearly as machine
independent or correct as he thinks it is)
@
text
@d1 2
a2 1
/*	$NetBSD: z8530sc.c,v 1.1 1996/01/24 01:07:23 gwr Exp $	*/
d86 1
a86 1
	ZS_WRITE(cs, 5, cs->cs_creg[5]);
d100 2
a101 2
	tconst = ZS_READ(cs, 12);
	tconst |= ZS_READ(cs, 13) << 8;
d116 1
a116 2
		rr0 = *(cs->cs_reg_csr);
		ZS_DELAY();
d120 6
a125 3
		/* Read the data. */
		c = *(cs->cs_reg_data);
		ZS_DELAY();
a126 2
		/* Need to read status register too? */
		rr1 = ZS_READ(cs, 1);
d129 1
a129 2
			*(cs->cs_reg_csr) = ZSWR0_RESET_ERRORS;
			ZS_DELAY();
d152 1
a152 2
	*(cs->cs_reg_csr) = ZSM_RESET_ERR;	/* XXX: reset error condition */
	ZS_DELAY();
d163 1
a163 1
	ZS_WRITE(cs, 4, reg[4]);
d166 1
a166 1
	ZS_WRITE(cs, 10, reg[10]);
d169 2
a170 2
	ZS_WRITE(cs, 3, reg[3] & ~ZSWR3_RX_ENABLE);
	ZS_WRITE(cs, 5, reg[5] & ~ZSWR5_TX_ENABLE);
d173 1
a173 1
	ZS_WRITE(cs, 1, reg[1]);
d184 1
a184 1
	ZS_WRITE(cs, 2, reg[2]);
d186 1
a186 1
	ZS_WRITE(cs, 9, reg[9]);
d190 1
a190 1
	ZS_WRITE(cs, 11, reg[11]);
d193 2
a194 2
	ZS_WRITE(cs, 12, reg[12]);
	ZS_WRITE(cs, 13, reg[13]);
d197 1
a197 1
	ZS_WRITE(cs, 14, reg[14]);
d200 1
a200 1
	ZS_WRITE(cs, 15, reg[15]);
d203 2
a204 2
	ZS_WRITE(cs, 3, reg[3]);
	ZS_WRITE(cs, 5, reg[5]);
d226 1
a226 1
	register int rval, soft;
a231 1
	soft = 0;
d234 1
a234 1
	rr3 = ZS_READ(cs_a, 3);
d242 6
a253 6
	/* Handle status interrupts. */
	if (rr3 & ZSRR3_IP_A_STAT)
		(*cs_a->cs_ops->zsop_stint)(cs_a);
	if (rr3 & ZSRR3_IP_B_STAT)
		(*cs_b->cs_ops->zsop_stint)(cs_b);

d256 1
a256 2
		*(cs_a->cs_reg_csr) = ZSWR0_CLR_INTR;
		ZS_DELAY();
d260 1
a260 2
		*(cs_b->cs_reg_csr) = ZSWR0_CLR_INTR;
		ZS_DELAY();
d264 2
a265 3
	if ((cs_a->cs_softreq) || (cs_b->cs_softreq))
	{
		/* This is a machine-dependent function. */
d282 1
a282 1
	register int req, rval, s, unit;
d288 7
a294 6
		s = splzs();
		req = cs->cs_softreq;
		cs->cs_softreq = 0;
		splx(s);

		if (req) {
d303 1
a303 1
static int
d307 2
a308 2
	ZS_WRITE(cs,  1, 0);
	ZS_WRITE(cs, 15, 0);
d311 1
a311 1
static int
@
