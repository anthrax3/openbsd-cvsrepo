head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.66
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.64
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.58
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.60
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.52
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.56
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.54
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.50
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.48
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.44
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.46
	OPENBSD_5_0:1.2.0.42
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.40
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.38
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.34
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.36
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.32
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.30
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.28
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.26
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.24
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.22
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.20
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.18
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.16
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.14
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.12
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.10
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.8
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.2
	UBC_BASE:1.2
	SMP:1.1.0.4
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2001.12.06.16.28.18;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2001.10.04.19.46.46;	author gluk;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2001.10.31.03.22.42;	author nate;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2002.03.06.02.11.43;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update the radio chipset support
@
text
@/*	$OpenBSD$	*/
/* $RuOBSD: lm700x.h,v 1.2 2001/10/18 16:51:36 pva Exp $ */

/*
 * Copyright (c) 2001 Vladimir Popov <jumbo@@narod.ru>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _LM700X_H_
#define _LM700X_H_

#include <sys/types.h>

#include <machine/bus.h>

#define LM700X_REGISTER_LENGTH	24

#define LM700X_DATA_MASK	0xFFC000
#define LM700X_FREQ_MASK	0x003FFF

#define LM700X_FREQ(x)		(x << 0)	/* 0x003FFF */
#define LM700X_LSI(x)		(x << 14)	/* 0x00C000 */ /* always zero */
#define LM700X_BAND(x)		(x << 16)	/* 0x070000 */
#define		LM700X_STEREO	LM700X_BAND(3)
#define		LM700X_MONO	LM700X_BAND(1)
#define LM700X_TIME_BASE(x)	(x << 19)	/* 0x080000 */ /* always zero */
#define LM700X_REF_FREQ(x)	(x << 20)	/* 0x700000 */
#define		LM700X_REF_100	LM700X_REF_FREQ(0)
#define		LM700X_REF_025	LM700X_REF_FREQ(2)
#define		LM700X_REF_050	LM700X_REF_FREQ(4)
/* The rest is for an AM band */

#define LM700X_DIVIDER_AM	(0 << 23)	/* 0x000000 */
#define LM700X_DIVIDER_FM	(1 << 23)	/* 0x800000 */

#define LM700X_WRITE_DELAY	6		/* 6 microseconds */

struct lm700x_t {
	bus_space_tag_t	iot;
	bus_space_handle_t	ioh;
	bus_size_t	offset;

	u_int32_t	wzcl;	/* write zero clock low */
	u_int32_t	wzch;	/* write zero clock high */
	u_int32_t	wocl;	/* write one clock low */
	u_int32_t	woch;	/* write one clock high */
	u_int32_t	initdata;
	u_int32_t	rsetdata;

	void (*init)(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
	void (*rset)(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
};

u_int32_t	lm700x_encode_freq(u_int32_t, u_int32_t);
u_int32_t	lm700x_encode_ref(u_int8_t);
u_int8_t	lm700x_decode_ref(u_int32_t);
void	lm700x_hardware_write(struct lm700x_t *, u_int32_t, u_int32_t);

#endif /* _LM700X_H_ */
@


1.1
log
@Chip specific parts for FM-radio drivers.

Work by Vladimir Popov <jumbo@@narod.ru> and Maxim Tsyplakov <tm@@oganer.net>
@
text
@d2 1
a2 1
/* $RuOBSD: lm700x.h,v 1.3 2001/10/04 19:25:39 gluk Exp $ */
d63 6
a68 6
	u_long	wzcl;	/* write zero clock low */
	u_long	wzch;	/* write zero clock high */
	u_long	wocl;	/* write one clock low */
	u_long	woch;	/* write one clock high */
	u_long	initdata;
	u_long	rsetdata;
d70 2
a71 2
	void (*init)(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_long);
	void (*rset)(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_long);
d74 4
a77 4
u_long	lm700x_encode_freq(u_long, u_long);
u_long	lm700x_encode_ref(u_char);
u_char	lm700x_decode_ref(u_long);
void	lm700x_hardware_write(struct lm700x_t *, u_long, u_long);
@


1.1.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.1.4.2
log
@Merge in trunk
@
text
@d2 1
a2 1
/* $RuOBSD: lm700x.h,v 1.2 2001/10/18 16:51:36 pva Exp $ */
d63 6
a68 6
	u_int32_t	wzcl;	/* write zero clock low */
	u_int32_t	wzch;	/* write zero clock high */
	u_int32_t	wocl;	/* write one clock low */
	u_int32_t	woch;	/* write one clock high */
	u_int32_t	initdata;
	u_int32_t	rsetdata;
d70 2
a71 2
	void (*init)(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
	void (*rset)(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
d74 4
a77 4
u_int32_t	lm700x_encode_freq(u_int32_t, u_int32_t);
u_int32_t	lm700x_encode_ref(u_int8_t);
u_int8_t	lm700x_decode_ref(u_int32_t);
void	lm700x_hardware_write(struct lm700x_t *, u_int32_t, u_int32_t);
@


