head	1.26;
access;
symbols
	OPENBSD_6_0:1.26.0.14
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.26.0.8
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.26.0.10
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.26.0.6
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.26.0.4
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.24.0.12
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.24.0.10
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.24.0.6
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.24
	OPENBSD_5_1:1.24.0.8
	OPENBSD_5_0:1.24.0.4
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.24.0.2
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.21.0.4
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.17.0.4
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.15.0.4
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.2
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.13.0.4
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.2
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7;
locks; strict;
comment	@ * @;


1.26
date	2013.12.06.21.03.02;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2013.11.14.12.30.39;	author dlg;	state Exp;
branches;
next	1.24;

1.24
date	2010.11.20.20.11.19;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2010.09.07.16.21.42;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2010.08.29.16.46.58;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2009.10.13.19.33.16;	author pirofti;	state Exp;
branches;
next	1.20;

1.20
date	2009.08.16.18.03.48;	author jsg;	state Exp;
branches;
next	1.19;

1.19
date	2009.08.16.17.24.04;	author jsg;	state Exp;
branches;
next	1.18;

1.18
date	2009.08.10.20.29.54;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2009.06.03.20.00.36;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2009.06.02.15.13.58;	author jsg;	state Exp;
branches;
next	1.15;

1.15
date	2008.07.21.18.43.19;	author damien;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.27.06.03.08;	author ray;	state Exp;
branches;
next	1.13;

1.13
date	2007.06.07.20.20.15;	author damien;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.27.04.25.12;	author jsg;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.17.11.07.44;	author jsg;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.09.03.46.42;	author jsg;	state Exp;
branches;
next	1.9;

1.9
date	2005.09.24.09.12.10;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2005.05.27.18.57.19;	author robert;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.25.13.36.08;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2004.07.25.00.16.35;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2004.07.15.16.14.14;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.15.15.39.41;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.15.12.00.31;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.07.19.08.25;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.22.23.55.24;	author millert;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Add a DVACT_WAKEUP op to the *_activate() API.  This is called after the
kernel resumes normal (non-cold, able to run processes, etc) operation.
Previously we were relying on specific DVACT_RESUME op's in drivers
creating callback/threads themselves, but that has become too common,
indicating the need for a built-in mechanism.
ok dlg kettenis, tested by a sufficient amount of people
@
text
@/*	$OpenBSD: atwvar.h,v 1.25 2013/11/14 12:30:39 dlg Exp $	*/
/*	$NetBSD: atwvar.h,v 1.13 2004/07/23 07:07:55 dyoung Exp $	*/

/*
 * Copyright (c) 2003, 2004 The NetBSD Foundation, Inc.  All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by David Young.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY David Young AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL David Young
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _DEV_IC_ATWVAR_H_
#define	_DEV_IC_ATWVAR_H_

#include <sys/queue.h>
#include <sys/time.h>
#include <sys/timeout.h>

/*
 * Some misc. statics, useful for debugging.
 */
struct atw_stats {
	u_long		ts_tx_tuf;	/* transmit underflow errors */
	u_long		ts_tx_tro;	/* transmit jabber timeouts */
	u_long		ts_tx_trt;	/* retry count exceeded */
	u_long		ts_tx_tlt;	/* lifetime exceeded */
	u_long		ts_tx_sofbr;	/* packet size mismatch */
};

/*
 * Transmit descriptor list size.  This is arbitrary, but allocate
 * enough descriptors for 64 pending transmissions and 16 segments
 * per packet.  Since a descriptor holds 2 buffer addresses, that's
 * 8 descriptors per packet.  This MUST work out to a power of 2.
 */
#define	ATW_NTXSEGS		16

#define	ATW_TXQUEUELEN	64
#define	ATW_NTXDESC		(ATW_TXQUEUELEN * ATW_NTXSEGS)
#define	ATW_NTXDESC_MASK	(ATW_NTXDESC - 1)
#define	ATW_NEXTTX(x)		((x + 1) & ATW_NTXDESC_MASK)

/*
 * Receive descriptor list size.  We have one Rx buffer per incoming
 * packet, so this logic is a little simpler.
 */
#define	ATW_NRXDESC		64
#define	ATW_NRXDESC_MASK	(ATW_NRXDESC - 1)
#define	ATW_NEXTRX(x)		((x + 1) & ATW_NRXDESC_MASK)

/*
 * Control structures are DMA'd to the ADM8211 chip.  We allocate them in
 * a single clump that maps to a single DMA segment to make several things
 * easier.
 */
struct atw_control_data {
	/*
	 * The transmit descriptors.
	 */
	struct atw_txdesc acd_txdescs[ATW_NTXDESC];

	/*
	 * The receive descriptors.
	 */
	struct atw_rxdesc acd_rxdescs[ATW_NRXDESC];
};

#define	ATW_CDOFF(x)		offsetof(struct atw_control_data, x)
#define	ATW_CDTXOFF(x)	ATW_CDOFF(acd_txdescs[(x)])
#define	ATW_CDRXOFF(x)	ATW_CDOFF(acd_rxdescs[(x)])

struct atw_duration {
	uint16_t	d_rts_dur;
	uint16_t	d_data_dur;
	uint16_t	d_plcp_len;
	uint8_t		d_residue;	/* unused octets in time slot */
};

/*
 * Software state for transmit jobs.
 */
struct atw_txsoft {
	struct mbuf *txs_mbuf;		/* head of our mbuf chain */
	bus_dmamap_t txs_dmamap;	/* our DMA map */
	int txs_firstdesc;		/* first descriptor in packet */
	int txs_lastdesc;		/* last descriptor in packet */
	int txs_ndescs;			/* number of descriptors */
	struct atw_duration txs_d0;
	struct atw_duration txs_dn;
	SIMPLEQ_ENTRY(atw_txsoft) txs_q;
};

SIMPLEQ_HEAD(atw_txsq, atw_txsoft);

/*
 * Software state for receive jobs.
 */
struct atw_rxsoft {
	struct mbuf *rxs_mbuf;		/* head of our mbuf chain */
	bus_dmamap_t rxs_dmamap;	/* our DMA map */
};

/*
 * Table which describes the transmit threshold mode.  We generally
 * start at index 0.  Whenever we get a transmit underrun, we increment
 * our index, falling back if we encounter the NULL terminator.
 */
struct atw_txthresh_tab {
	u_int32_t txth_opmode;		/* OPMODE bits */
	const char *txth_name;		/* name of mode */
};

enum atw_rftype { ATW_RFTYPE_INTERSIL = 0, ATW_RFTYPE_RFMD  = 1,
       ATW_RFTYPE_MARVEL = 2 };

enum atw_bbptype { ATW_BBPTYPE_INTERSIL = 0, ATW_BBPTYPE_RFMD  = 1,
       ATW_BBPTYPE_MARVEL = 2, ATW_C_BBPTYPE_RFMD  = 5 };

/* Radio capture format for ADMtek. */

#define ATW_RX_RADIOTAP_PRESENT	\
	((1 << IEEE80211_RADIOTAP_FLAGS) | (1 << IEEE80211_RADIOTAP_RATE) | \
	 (1 << IEEE80211_RADIOTAP_CHANNEL) | \
	 (1 << IEEE80211_RADIOTAP_DB_ANTSIGNAL))

struct atw_rx_radiotap_header {
	struct ieee80211_radiotap_header	ar_ihdr;
	u_int8_t				ar_flags;
	u_int8_t				ar_rate;
	u_int16_t				ar_chan_freq;
	u_int16_t				ar_chan_flags;
	u_int8_t				ar_antsignal;
} __packed;

#define ATW_TX_RADIOTAP_PRESENT	((1 << IEEE80211_RADIOTAP_FLAGS) | \
				 (1 << IEEE80211_RADIOTAP_RATE) | \
				 (1 << IEEE80211_RADIOTAP_CHANNEL))

struct atw_tx_radiotap_header {
	struct ieee80211_radiotap_header	at_ihdr;
	u_int8_t				at_flags;
	u_int8_t				at_rate;
	u_int16_t				at_chan_freq;
	u_int16_t				at_chan_flags;
} __packed;

enum atw_revision {
	ATW_REVISION_AB = 0x11,	/* ADM8211A */
	ATW_REVISION_AF = 0x15,	/* ADM8211A? */
	ATW_REVISION_BA = 0x20,	/* ADM8211B */
	ATW_REVISION_CA = 0x30	/* ADM8211C/CR */
};

struct atw_softc {
	struct device		sc_dev;
	struct ieee80211com	sc_ic;
	int			(*sc_enable)(struct atw_softc *);
	void			(*sc_disable)(struct atw_softc *);
	void			(*sc_power)(struct atw_softc *, int);
	int			(*sc_newstate)(struct ieee80211com *,
					enum ieee80211_state, int);
	void			(*sc_recv_mgmt)(struct ieee80211com *,
				    struct mbuf *, struct ieee80211_node *,
				    struct ieee80211_rxinfo *, int);
	struct ieee80211_node	*(*sc_node_alloc)(struct ieee80211com *);
	void			(*sc_node_free)(struct ieee80211com *,
					struct ieee80211_node *);

	struct atw_stats sc_stats;	/* debugging stats */

	int			sc_tx_timer;
	int			sc_rescan_timer;

	bus_space_tag_t		sc_st;		/* bus space tag */
	bus_space_handle_t	sc_sh;		/* bus space handle */
	bus_size_t		sc_mapsize;	/* mapping size */
	bus_dma_tag_t		sc_dmat;	/* bus dma tag */
	u_int32_t		sc_cacheline;	/* cache line size */
	u_int32_t		sc_maxburst;	/* maximum burst length */

	const struct atw_txthresh_tab	*sc_txth;
	int				sc_txthresh; /* current tx threshold */

	u_int			sc_cur_chan;	/* current channel */

	int			sc_flags;

	u_int16_t		*sc_srom;
	u_int16_t		sc_sromsz;

	caddr_t			sc_radiobpf;

	bus_dma_segment_t	sc_cdseg;	/* control data memory */
	int			sc_cdnseg;	/* number of segments */
	bus_dmamap_t		sc_cddmamap;	/* control data DMA map */
#define	sc_cddma	sc_cddmamap->dm_segs[0].ds_addr

	/*
	 * Software state for transmit and receive descriptors.
	 */
	struct atw_txsoft sc_txsoft[ATW_TXQUEUELEN];
	struct atw_rxsoft sc_rxsoft[ATW_NRXDESC];

	/*
	 * Control data structures.
	 */
	struct atw_control_data *sc_control_data;
#define	sc_txdescs	sc_control_data->acd_txdescs
#define	sc_rxdescs	sc_control_data->acd_rxdescs
#define	sc_setup_desc	sc_control_data->acd_setup_desc

	int	sc_txfree;		/* number of free Tx descriptors */
	int	sc_txnext;		/* next ready Tx descriptor */
	int	sc_ntxsegs;		/* number of transmit segs per pkt */

	struct atw_txsq sc_txfreeq;	/* free Tx descsofts */
	struct atw_txsq sc_txdirtyq;	/* dirty Tx descsofts */

	int	sc_rxptr;		/* next ready RX descriptor/descsoft */

	u_int32_t	sc_busmode;	/* copy of ATW_PAR */
	u_int32_t	sc_opmode;	/* copy of ATW_NAR */
	u_int32_t	sc_inten;	/* copy of ATW_IER */
	u_int32_t	sc_wepctl;	/* copy of ATW_WEPCTL */

	u_int32_t	sc_rxint_mask;	/* mask of Rx interrupts we want */
	u_int32_t	sc_txint_mask;	/* mask of Tx interrupts we want */
	u_int32_t	sc_linkint_mask;/* link-state interrupts mask */

	enum atw_rftype		sc_rftype;
	enum atw_bbptype	sc_bbptype;
	u_int32_t	sc_synctl_rd;
	u_int32_t	sc_synctl_wr;
	u_int32_t	sc_bbpctl_rd;
	u_int32_t	sc_bbpctl_wr;

	void		(*sc_recv_beacon)(struct ieee80211com *, struct mbuf *,
			    int, u_int32_t);
	void		(*sc_recv_prresp)(struct ieee80211com *, struct mbuf *,
			    int, u_int32_t);

	/* ADM8211 state variables. */
	u_int8_t	sc_sram[ATW_SRAM_MAXSIZE];
	u_int		sc_sramlen;
	u_int8_t	sc_bssid[IEEE80211_ADDR_LEN];
	u_int8_t	sc_rev;
	u_int8_t	sc_rf3000_options1;
	u_int8_t	sc_rf3000_options2;

	struct timeval	sc_last_beacon;
	struct timeout	sc_scan_to;
	union {
		struct atw_rx_radiotap_header	tap;
		u_int8_t			pad[64];
	} sc_rxtapu;
	union {
		struct atw_tx_radiotap_header	tap;
		u_int8_t			pad[64];
	} sc_txtapu;
};

#define sc_rxtap	sc_rxtapu.tap
#define sc_txtap	sc_txtapu.tap

#define	sc_if			sc_ic.ic_if

/* XXX this is fragile. try not to introduce any u_int32_t's. */
struct atw_frame {
/*00*/	u_int8_t			atw_dst[IEEE80211_ADDR_LEN];
/*06*/	u_int8_t			atw_rate;	/* TX rate in 100Kbps */
/*07*/	u_int8_t			atw_service;	/* 0 */
/*08*/	u_int16_t			atw_paylen;	/* payload length */
/*0a*/	u_int8_t			atw_fc[2];	/* 802.11 Frame
							 * Control
							 */
	/* 802.11 PLCP Length for first & last fragment */
/*0c*/	u_int16_t			atw_tail_plcplen;
/*0e*/	u_int16_t			atw_head_plcplen;
	/* 802.11 Duration for first & last fragment */
/*10*/	u_int16_t			atw_tail_dur;
/*12*/	u_int16_t			atw_head_dur;
/*14*/	u_int8_t			atw_addr4[IEEE80211_ADDR_LEN];
	union {
		struct {
/*1a*/			u_int16_t	hdrctl;	/*transmission control*/
/*1c*/			u_int16_t	fragthr;/* fragmentation threshold
						 * [0:11], zero [12:15].
						 */
/*1e*/			u_int8_t	fragnum;/* fragment number [4:7],
						 * zero [0:3].
						 */
/*1f*/			u_int8_t	rtylmt;	/* retry limit */
/*20*/			u_int8_t	wepkey0[4];/* ??? */
/*24*/			u_int8_t	wepkey1[4];/* ??? */
/*28*/			u_int8_t	wepkey2[4];/* ??? */
/*2c*/			u_int8_t	wepkey3[4];/* ??? */
/*30*/			u_int8_t	keyid;
/*31*/			u_int8_t	reserved0[7];
		} s1;
		struct {
			u_int8_t		pad[6];
			struct ieee80211_frame	ihdr;
		} s2;
	} u;
} __packed;

#define atw_hdrctl	u.s1.hdrctl
#define atw_fragthr	u.s1.fragthr
#define atw_fragnum	u.s1.fragnum
#define atw_rtylmt	u.s1.rtylmt
#define atw_keyid	u.s1.keyid
#define atw_ihdr	u.s2.ihdr

#define ATW_HDRCTL_SHORT_PREAMBLE	(1<<0)	/* use short preamble */
#define ATW_HDRCTL_RTSCTS		(1<<4)	/* send RTS */
#define ATW_HDRCTL_WEP			(1<<5)
#define ATW_HDRCTL_UNKNOWN1		(1<<15) /* MAC adds FCS? */
#define ATW_HDRCTL_UNKNOWN2		(1<<8)

#define ATW_FRAGTHR_FRAGTHR_MASK	0x0fff
#define ATW_FRAGNUM_FRAGNUM_MASK	0x00f0

/* Values for sc_flags. */
#define	ATWF_MRL		0x00000010	/* memory read line okay */
#define	ATWF_MRM		0x00000020	/* memory read multi okay */
#define	ATWF_MWI		0x00000040	/* memory write inval okay */
#define	ATWF_SHORT_PREAMBLE	0x00000080	/* short preamble enabled */
#define	ATWF_RTSCTS		0x00000100	/* RTS/CTS enabled */
#define	ATWF_ATTACHED		0x00000800	/* attach has succeeded */
#define	ATWF_ENABLED		0x00001000	/* chip is enabled */

#define	ATW_IS_ENABLED(sc)	((sc)->sc_flags & ATWF_ENABLED)

#define	ATW_CDTXADDR(sc, x)	((sc)->sc_cddma + ATW_CDTXOFF((x)))
#define	ATW_CDRXADDR(sc, x)	((sc)->sc_cddma + ATW_CDRXOFF((x)))

#define	ATW_CDTXSYNC(sc, x, n, ops)					\
do {									\
	int __x, __n;							\
									\
	__x = (x);							\
	__n = (n);							\
									\
	/* If it will wrap around, sync to the end of the ring. */	\
	if ((__x + __n) > ATW_NTXDESC) {				\
		bus_dmamap_sync((sc)->sc_dmat, (sc)->sc_cddmamap,	\
		    ATW_CDTXOFF(__x), sizeof(struct atw_txdesc) *	\
		    (ATW_NTXDESC - __x), (ops));			\
		__n -= (ATW_NTXDESC - __x);				\
		__x = 0;						\
	}								\
									\
	/* Now sync whatever is left. */				\
	bus_dmamap_sync((sc)->sc_dmat, (sc)->sc_cddmamap,		\
	    ATW_CDTXOFF(__x), sizeof(struct atw_txdesc) * __n, (ops)); \
} while (0)

#define	ATW_CDRXSYNC(sc, x, ops)					\
	bus_dmamap_sync((sc)->sc_dmat, (sc)->sc_cddmamap,		\
	    ATW_CDRXOFF((x)), sizeof(struct atw_rxdesc), (ops))

/*
 * Note we rely on MCLBYTES being a power of two.  Because the `length'
 * field is only 11 bits, we must subtract 1 from the length to avoid
 * having it truncated to 0!
 */
#define	ATW_INIT_RXDESC(sc, x)						\
do {									\
	struct atw_rxsoft *__rxs = &sc->sc_rxsoft[(x)];			\
	struct atw_rxdesc *__rxd = &sc->sc_rxdescs[(x)];		\
	struct mbuf *__m = __rxs->rxs_mbuf;				\
									\
	__rxd->ar_buf1 =						\
	    htole32(__rxs->rxs_dmamap->dm_segs[0].ds_addr);		\
	__rxd->ar_buf2 =	/* for descriptor chaining */		\
	    htole32(ATW_CDRXADDR((sc), ATW_NEXTRX((x))));		\
	__rxd->ar_ctl =							\
	    htole32(LSHIFT(((__m->m_ext.ext_size - 1) & ~0x3U),		\
	                   ATW_RXCTL_RBS1_MASK) |			\
		    0 /* ATW_RXCTL_RCH */ |				\
	    ((x) == (ATW_NRXDESC - 1) ? ATW_RXCTL_RER : 0));		\
	__rxd->ar_stat = htole32(ATW_RXSTAT_OWN);			\
	            							\
	ATW_CDRXSYNC((sc), (x),						\
	    BUS_DMASYNC_PREREAD|BUS_DMASYNC_PREWRITE);			\
} while (0)

/* country codes from ADM8211 SROM */
#define	ATW_COUNTRY_FCC 0		/* USA 1-11 */
#define	ATW_COUNTRY_IC 1		/* Canada 1-11 */
#define	ATW_COUNTRY_ETSI 2		/* European Union (?) 1-13 */
#define	ATW_COUNTRY_SPAIN 3		/* 10-11 */
#define	ATW_COUNTRY_FRANCE 4		/* 10-13 */
#define	ATW_COUNTRY_MKK 5		/* Japan: 14 */
#define	ATW_COUNTRY_MKK2 6		/* Japan: 1-14 */

/*
 * register space access macros
 */
#define	ATW_READ(sc, reg)						\
	bus_space_read_4((sc)->sc_st, (sc)->sc_sh, (reg))

#define	ATW_WRITE(sc, reg, val)					\
	bus_space_write_4((sc)->sc_st, (sc)->sc_sh, (reg), (val))

#define	ATW_SET(sc, reg, mask)					\
	ATW_WRITE((sc), (reg), ATW_READ((sc), (reg)) | (mask))

#define	ATW_CLR(sc, reg, mask)					\
	ATW_WRITE((sc), (reg), ATW_READ((sc), (reg)) & ~(mask))

#define	ATW_ISSET(sc, reg, mask)					\
	(ATW_READ((sc), (reg)) & (mask))

void	atw_attach(struct atw_softc *);
int	atw_detach(struct atw_softc *);
int	atw_activate(struct device *, int);
int	atw_intr(void *arg);
int	atw_enable(struct atw_softc *);
void	atw_wakeup(struct atw_softc *);

#endif /* _DEV_IC_ATWVAR_H_ */
@


1.25
log
@replace workqs with tasks for handling resume

from kimberley manning
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.24 2010/11/20 20:11:19 miod Exp $	*/
a37 1
#include <sys/task.h>
a279 2

	struct task	sc_resume_t;
d440 1
a440 1
void	atw_resume(void *, void *);
@


1.24
log
@__attribute__((packed)) -> __packed. The ioprbs.c chunk was commented out, and
uncommenting it is intentional.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.23 2010/09/07 16:21:42 deraadt Exp $	*/
d38 1
a38 1
#include <sys/workq.h>
d282 1
a282 1
	struct workq_task	sc_resume_wqt;
@


1.23
log
@remove the powerhook code.  All architectures now use the ca_activate tree
traversal code to suspend/resume
ok oga kettenis blambert
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.22 2010/08/29 16:46:58 deraadt Exp $	*/
d328 1
a328 1
} __attribute__((__packed__));
@


1.22
log
@Massage the powerhook functions into activate functions, and then call
them from the powerhook.  Fix a few quibbles about the things done for
the IFF_RUNNING and IFF_UP cases
ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.21 2009/10/13 19:33:16 pirofti Exp $	*/
a198 1
	void			*sc_powerhook;	/* power management hook */
a442 1
void	atw_powerhook(int, void *);
@


1.21
log
@Get rid of devact enum, substitute it with an int and coresponding defines.

This is needed for the addition of further suspend/resume actions.

Okay deraadt@@, marco@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.20 2009/08/16 18:03:48 jsg Exp $	*/
d38 1
d282 2
d444 2
a445 1
void	atw_power(int, void *);
@


1.20
log
@remove use of BITS and BIT macros.
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.19 2009/08/16 17:24:04 jsg Exp $	*/
d438 1
a438 1
int	atw_activate(struct device *, enum devact);
@


1.19
log
@start getting rid of some of these horrific bit macros, remove
usage of BITS().  There is a binary change due to the way these
macros are further used in the MASK_AND_RSHIFT specifically
for ATW_SR_RFTYPE_MASK and ATW_SR_BBPTYPE_MASK.
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.18 2009/08/10 20:29:54 deraadt Exp $	*/
d335 5
a339 5
#define ATW_HDRCTL_SHORT_PREAMBLE	BIT(0)	/* use short preamble */
#define ATW_HDRCTL_RTSCTS		BIT(4)	/* send RTS */
#define ATW_HDRCTL_WEP			BIT(5)
#define ATW_HDRCTL_UNKNOWN1		BIT(15) /* MAC adds FCS? */
#define ATW_HDRCTL_UNKNOWN2		BIT(8)
@


1.18
log
@More cases of shutdown hooks not needed after card is already stopped.  In
these cases the xxstop function is a bit more complicated and has a flag of
some sort, but the use of that flag does not matter;  DMA is already ceased
ok dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.17 2009/06/03 20:00:36 deraadt Exp $	*/
d341 2
a342 2
#define ATW_FRAGTHR_FRAGTHR_MASK	BITS(0, 11)
#define ATW_FRAGNUM_FRAGNUM_MASK	BITS(4, 7)
@


1.17
log
@put the values direct in the array, otherwise the nested macros are longer
than standards permit
found & ok by jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.16 2009/06/02 15:13:58 jsg Exp $	*/
a197 1
	void			*sc_sdhook;	/* shutdown hook */
a441 1
void	atw_shutdown(void *);
@


1.16
log
@let atw at pci be detachable; untested.
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.15 2008/07/21 18:43:19 damien Exp $	*/
a131 16

#define	ATW_TXTHRESH_TAB_LO_RATE {					\
	{ ATW_NAR_TR_L64,	"64 bytes" },				\
	{ ATW_NAR_TR_L160,	"160 bytes" },				\
	{ ATW_NAR_TR_L192,	"192 bytes" },				\
	{ ATW_NAR_SF,		"store and forward" },			\
	{ 0,			NULL },					\
}

#define	ATW_TXTHRESH_TAB_HI_RATE {					\
	{ ATW_NAR_TR_H96,	"96 bytes" },				\
	{ ATW_NAR_TR_H288,	"288 bytes" },				\
	{ ATW_NAR_TR_H544,	"544 bytes" },				\
	{ ATW_NAR_SF,		"store and forward" },			\
	{ 0,			NULL },					\
}
@


1.15
log
@instead of passing rx tstamp and rssi to the ieee80211_input function,
pass a pointer to an ieee80211_rxinfo structure containing those two
fields plus an extra flags field that indicates whether the frame was
decrypted by hardware or not.
required for a future fix.
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.14 2008/06/27 06:03:08 ray Exp $	*/
d212 1
@


1.14
log
@More removal of clauses 3 and 4 from NetBSD licenses.

OK deraadt@@ and millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.13 2007/06/07 20:20:15 damien Exp $	*/
d200 1
a200 1
				    int, int, u_int32_t);
@


1.13
log
@move ieee80211_compute_duration() and ieee80211_compute_duration1()
functions into the two drivers that use them (atw and rtw.)
this code is not generic enough to be used by other drivers and
there is no chance that it will ever be used in newer driver since
it supports 802.11b only.
plus, it hurts my eyes each time i look into ieee80211_output.c.

"fine with me as long as the logic doesn't change in the functions" jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.12 2006/06/27 04:25:12 jsg Exp $	*/
a17 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
@


1.12
log
@__attribute__((__packed__)) -> __packed
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.11 2006/02/17 11:07:44 jsg Exp $	*/
d98 8
d115 2
a116 2
	struct ieee80211_duration txs_d0;
	struct ieee80211_duration txs_dn;
@


1.11
log
@Missed part of last atw commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.10 2005/12/09 03:46:42 jsg Exp $	*/
d168 1
a168 1
} __attribute__((__packed__));
d180 1
a180 1
} __attribute__((__packed__));
@


1.10
log
@Remove surplus semicolon.
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.9 2005/09/24 09:12:10 jsg Exp $	*/
d107 2
@


1.9
log
@Remove a bunch of redundant defines that are also in net80211.
From a change by David Young to NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.8 2005/05/27 18:57:19 robert Exp $	*/
d280 1
a280 1
	u_int8_t	sc_rev;;
@


1.8
log
@make sure to enable socket on resume.
in order for the enable to work disable the socket on suspend.
lot of help from mickey@@

ok jsg@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.7 2004/07/25 13:36:08 millert Exp $	*/
a429 23

/* One Time Unit (TU) is 1Kus = 1024 microseconds. */
#define IEEE80211_DUR_TU		1024

/* IEEE 802.11b durations for DSSS PHY in microseconds */
#define IEEE80211_DUR_DS_LONG_PREAMBLE	144
#define IEEE80211_DUR_DS_SHORT_PREAMBLE	72
#define IEEE80211_DUR_DS_FAST_PLCPHDR	24
#define IEEE80211_DUR_DS_SLOW_PLCPHDR	48
#define IEEE80211_DUR_DS_SLOW_ACK	112
#define IEEE80211_DUR_DS_FAST_ACK	56
#define IEEE80211_DUR_DS_SLOW_CTS	112
#define IEEE80211_DUR_DS_FAST_CTS	56
#define IEEE80211_DUR_DS_SLOT		20
#define IEEE80211_DUR_DS_SIFS		10
#define IEEE80211_DUR_DS_PIFS	(IEEE80211_DUR_DS_SIFS + IEEE80211_DUR_DS_SLOT)
#define IEEE80211_DUR_DS_DIFS	(IEEE80211_DUR_DS_SIFS + \
				 2 * IEEE80211_DUR_DS_SLOT)
#define IEEE80211_DUR_DS_EIFS	(IEEE80211_DUR_DS_SIFS + \
				 IEEE80211_DUR_DS_SLOW_ACK + \
				 IEEE80211_DUR_DS_LONG_PREAMBLE + \
				 IEEE80211_DUR_DS_SLOW_PLCPHDR + \
				 IEEE80211_DUR_DIFS)
@


1.7
log
@Begin conditioning device configuration on revision number.  Three types
are known: ADM8211A (1.1/1.5), ADM8211B (2.0), ADM8211C (3.0).  The B and
C parts, while not yet supported, have AP capability.  From NetBSD (dyoung).
@
text
@d1 1
a1 1
/*	$OpenBSD: atwvar.h,v 1.6 2004/07/25 00:16:35 millert Exp $	*/
d476 1
@


1.6
log
@Improve register definitions and slightly demystify some magic
numbers.  From NetBSD (dyoung)
@
text
@d1 2
a2 2
/*	$OpenBSD: atwvar.h,v 1.5 2004/07/15 16:14:14 millert Exp $	*/
/*	$NetBSD: atwvar.h,v 1.12 2004/07/23 05:06:26 dyoung Exp $	*/
d180 7
d278 1
d280 3
@


1.5
log
@Simplify receive descriptor setup; from NetBSD (dyoung).
@
text
@d1 2
a2 2
/*	$OpenBSD: atwvar.h,v 1.4 2004/07/15 15:39:41 millert Exp $	*/
/*	$NetBSD: atwvar.h,v 1.11 2004/07/15 06:13:44 dyoung Exp $	*/
d270 1
a270 1
	u_int8_t	sc_sram[ATW_SRAM_SIZE];
@


1.4
log
@kill sc_intr_ack
@
text
@d1 2
a2 2
/*	$OpenBSD: atwvar.h,v 1.3 2004/07/15 12:00:31 millert Exp $	*/
/*	$NetBSD: atwvar.h,v 1.10 2004/07/15 06:06:53 dyoung Exp $	*/
a388 3
 *
 * Apparently we have to set ATW_RXSTAT_SQL to make the ADM8211 tell
 * us RSSI.
a395 1
	__m->m_data = __m->m_ext.ext_buf;				\
d405 2
a406 3
	__rxd->ar_stat =						\
	    htole32(ATW_RXSTAT_OWN|ATW_RXSTAT_SQL|ATW_RXSTAT_FS|	\
	            ATW_RXSTAT_LS);					\
@


1.3
log
@Do not treat the lost beacon count specially any more.  It is kind of
a dumb way to track the link condition anyway.  From NetBSD (dyoung).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a255 3

	/* interrupt acknowledge hook */
	void (*sc_intr_ack)(struct atw_softc *);
@


1.2
log
@The ADM8211C uses a different BBP type-number for RFMD parts than
the original ADM8211.  From NetBSD (dyoung)
@
text
@d1 2
a2 1
/*	$NetBSD: atwvar.h,v 1.9 2004/06/23 08:13:29 dyoung Exp $	*/
a274 1
	u_int8_t	sc_lost_bcn_thresh;
@


1.1
log
@atw(4) driver from NetBSD (dyoung).  Based in part on a port by
Matthew Gream.

Unfortunately, the adm8211 card I have with me does not work correctly
with the driver yet so real testing will have to wait until I get
my hands on an adm8211-based DWL-650 or something similar.
@
text
@d1 1
a1 1
/*	$NetBSD: atwvar.h,v 1.8 2004/01/29 10:25:49 dyoung Exp $	*/
d149 1
a149 1
       ATW_BBPTYPE_MARVEL = 2 };
@

