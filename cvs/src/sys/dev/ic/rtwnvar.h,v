head	1.8;
access;
symbols
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7;
locks; strict;
comment	@ * @;


1.8
date	2017.01.30.21.54.30;	author stsp;	state Exp;
branches;
next	1.7;
commitid	Gi00kQrNZo1HNvpa;

1.7
date	2016.06.17.10.53.55;	author stsp;	state Exp;
branches;
next	1.6;
commitid	wpzelyaGh6bAmql3;

1.6
date	2016.06.05.20.11.41;	author stsp;	state Exp;
branches;
next	1.5;
commitid	8S2EGziJrG8NAt6l;

1.5
date	2016.03.21.12.00.32;	author stsp;	state Exp;
branches;
next	1.4;
commitid	vO4miOGLK1UqlKDH;

1.4
date	2016.03.15.10.28.31;	author stsp;	state Exp;
branches;
next	1.3;
commitid	VFx5v7dTKtC7fHGg;

1.3
date	2016.03.11.14.06.37;	author stsp;	state Exp;
branches;
next	1.2;
commitid	2e9leZxJYQontEkl;

1.2
date	2016.03.09.20.36.16;	author stsp;	state Exp;
branches;
next	1.1;
commitid	UPzDUmFZjFNsXYRu;

1.1
date	2016.03.09.18.18.28;	author stsp;	state Exp;
branches;
next	;
commitid	HrtNlKkwBmjs28Xq;


desc
@@


1.8
log
@Make urtwn(4) run slot time updates from a USB task.
Fixes 'usbd_do_request: not in process context' warnings introduced recently.
Fix reported and confirmed by Mikhail aka mp39590 aka misha
@
text
@/*	$OpenBSD: rtwnvar.h,v 1.7 2016/06/17 10:53:55 stsp Exp $	*/

/*-
 * Copyright (c) 2010 Damien Bergamini <damien.bergamini@@free.fr>
 * Copyright (c) 2015 Stefan Sperling <stsp@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* Operations provided by bus-specific attachment drivers. */
struct rtwn_ops {
	void		*cookie; /* Attachment driver's private data. */

	uint8_t		(*read_1)(void *, uint16_t);
	uint16_t	(*read_2)(void *, uint16_t);
	uint32_t	(*read_4)(void *, uint16_t);
	void		(*write_1)(void *, uint16_t, uint8_t);
	void		(*write_2)(void *, uint16_t, uint16_t);
	void		(*write_4)(void *, uint16_t, uint32_t);
	int		(*tx)(void *, struct mbuf *, struct ieee80211_node *);
	int		(*power_on)(void *);
	int		(*dma_init)(void *);
	int		(*fw_loadpage)(void *, int, uint8_t *, int);
	int		(*load_firmware)(void *, u_char **fw, size_t *);
	void		(*mac_init)(void *);
	void		(*bb_init)(void *);
	int		(*alloc_buffers)(void *);
	int		(*init)(void *);
	void		(*stop)(void *);
	int		(*is_oactive)(void *);
	void		(*next_calib)(void *);
	void		(*cancel_calib)(void *);
	void		(*next_scan)(void *);
	void		(*cancel_scan)(void *);
	void		(*wait_async)(void *);
};

#define RTWN_LED_LINK	0
#define RTWN_LED_DATA	1

#define RTWN_INT_ENABLE	(R92C_IMR_ROK | R92C_IMR_VODOK | R92C_IMR_VIDOK | \
			R92C_IMR_BEDOK | R92C_IMR_BKDOK | R92C_IMR_MGNTDOK | \
			R92C_IMR_HIGHDOK | R92C_IMR_BDOK | R92C_IMR_RDU | \
			R92C_IMR_RXFOVW)

struct rtwn_softc {
	/* sc_ops must be initialized by the attachment driver! */
	struct rtwn_ops			sc_ops;

	struct device			*sc_pdev;
	struct ieee80211com		sc_ic;
	int				(*sc_newstate)(struct ieee80211com *,
					    enum ieee80211_state, int);
	struct task			init_task;
	int				ac2idx[EDCA_NUM_AC];
	uint32_t			sc_flags;
#define RTWN_FLAG_CCK_HIPWR		0x01
#define RTWN_FLAG_BUSY			0x02
#define RTWN_FLAG_FORCE_RAID_11B	0x04

	uint32_t		chip;
#define RTWN_CHIP_92C		0x00000001
#define RTWN_CHIP_92C_1T2R	0x00000002
#define RTWN_CHIP_UMC		0x00000004
#define RTWN_CHIP_UMC_A_CUT	0x00000008
#define RTWN_CHIP_88C		0x00000010
#define RTWN_CHIP_88E		0x00000020

#define RTWN_CHIP_PCI		0x40000000
#define RTWN_CHIP_USB		0x80000000

	uint8_t				board_type;
	uint8_t				regulatory;
	uint8_t				pa_setting;
	int				avg_pwdb;
	int				thcal_state;
	int				thcal_lctemp;
	int				ntxchains;
	int				nrxchains;
	int				ledlink;

	int				sc_tx_timer;
	int				fwcur;
	struct r92c_rom			rom;

	uint8_t				r88e_rom[512];
	uint8_t				cck_tx_pwr[6];
	uint8_t				ht40_tx_pwr[5];
	int8_t				bw20_tx_pwr_diff;
	int8_t				ofdm_tx_pwr_diff;

	uint32_t			rf_chnlbw[R92C_MAX_CHAINS];
};

int		rtwn_attach(struct device *, struct rtwn_softc *, uint32_t);
int		rtwn_detach(struct rtwn_softc *, int);
int		rtwn_activate(struct rtwn_softc *, int);
int8_t		rtwn_get_rssi(struct rtwn_softc *, int, void *);
void		rtwn_update_avgrssi(struct rtwn_softc *, int, int8_t);
void		rtwn_calib(struct rtwn_softc *);
void		rtwn_next_scan(struct rtwn_softc *);
int		rtwn_newstate(struct ieee80211com *, enum ieee80211_state, int);
void		rtwn_updateslot(struct ieee80211com *);
void		rtwn_updateedca(struct ieee80211com *);
int		rtwn_set_key(struct ieee80211com *, struct ieee80211_node *,
		    struct ieee80211_key *);
void		rtwn_delete_key(struct ieee80211com *,
		    struct ieee80211_node *, struct ieee80211_key *);
int		rtwn_ioctl(struct ifnet *, u_long, caddr_t);
void		rtwn_start(struct ifnet *);
void		rtwn_fw_reset(struct rtwn_softc *);
@


1.7
log
@Merge a lot of code from urtwn(4) into rtwn(4). Both drivers now share code
in the file sys/dev/ic/rtwn.c. This reduces kernel bloat and will make it
easier to have both drivers benefit from future enhancements.
ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtwnvar.h,v 1.6 2016/06/05 20:11:41 stsp Exp $	*/
d113 1
@


1.6
log
@Continue preparing a future merge of urtwn(4) and rtwn(4).
This mostly copies r88e support code to ic/rtwn.c and moves some functions
which are not trivial to merge with USB counterparts back to pci/if_rtwn.c.
ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtwnvar.h,v 1.5 2016/03/21 12:00:32 stsp Exp $	*/
d33 1
d37 2
a38 2
	void		(*enable_intr)(void *);
	void		(*disable_intr)(void *);
d45 1
d48 8
d72 9
a80 6
#define RTWN_CHIP_92C		0x01
#define RTWN_CHIP_92C_1T2R	0x02
#define RTWN_CHIP_UMC		0x04
#define RTWN_CHIP_UMC_A_CUT	0x08
#define RTWN_CHIP_88C		0x10
#define RTWN_CHIP_88E		0x20
d112 9
@


1.5
log
@The common part of rtwn(4) needs help from attachment drivers to determine
the chip type. Require chip type as a parameter to rtwn_attach().
ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtwnvar.h,v 1.4 2016/03/15 10:28:31 stsp Exp $	*/
d31 1
d33 3
d57 3
a59 2
#define RTWN_FLAG_CCK_HIPWR	0x01
#define RTWN_FLAG_BUSY		0x02
d82 6
@


1.4
log
@usbd_is_dying() can't be part of the common rtwn(4) driver code once we
merge code from urtwn(4). So timeouts must move back to the bus-specific
part of the driver.
ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtwnvar.h,v 1.3 2016/03/11 14:06:37 stsp Exp $	*/
d52 1
a52 1
	u_int				sc_flags;
d56 1
a56 2
	u_int				chip;
#define RTWN_CHIP_88C		0x00
d61 2
d81 1
a81 1
int		rtwn_attach(struct device *, struct rtwn_softc *);
@


1.3
log
@Move rtwn(4) DMA init code back to the PCI part of the driver.
This will make a future merge with urtwn(4) easier.
ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtwnvar.h,v 1.2 2016/03/09 20:36:16 stsp Exp $	*/
a29 1
	void		(*next_scan)(void *);
d36 4
a49 2
	struct timeout			scan_to;
	struct timeout			calib_to;
d85 2
@


1.2
log
@Make rtwn(4) check for "unsupported test chip" error during attach again.
ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtwnvar.h,v 1.1 2016/03/09 18:18:28 stsp Exp $	*/
d32 1
a32 1
	int		(*configure_dma)(void *);
@


1.1
log
@Split the rtwn(4) driver into two layers:

One layer which handles PCI support and low-level packet processing.

And another layer which handles ioctls, net80211 state transitions,
and all communication with the chip. The plan is to eventually merge
corresponding code from urtwn(4) in here.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d79 1
a79 1
void		rtwn_attach(struct device *, struct rtwn_softc *);
@

