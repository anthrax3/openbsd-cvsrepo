head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.30
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.28
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.22
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.24
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.16
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.20
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.18
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.14
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.12
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.8
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.6
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.4
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.9.0.8
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.10
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.6
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.4
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.11
date	2010.08.01.18.48.41;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2010.04.30.15.18.29;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2007.10.20.18.46.21;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.21.03.11.11;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.22.08.33.43;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.21.15.58.19;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.15.16.25.22;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.14.04.13.37;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.14.01.15.17;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.01.11.09.16;	author dlg;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.01.11.03.34;	author dlg;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Read status register after all writes to the pcf8584 controller.  Alegedly
this is what (Open)Solaris does and it makes the i2c controller on the
blade2.5k work.  From NetBSD.

Tested by sthen@@, ok deraadt@@
@
text
@/*	$OpenBSD: pcf8584.c,v 1.10 2010/04/30 15:18:29 kettenis Exp $ */

/*
 * Copyright (c) 2006 David Gwynne <dlg@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/malloc.h>
#include <sys/kernel.h>
#include <sys/rwlock.h>
#include <sys/proc.h>

#include <machine/bus.h>

#include <dev/i2c/i2cvar.h>

#include <dev/ic/pcf8584var.h>

#define PCF_S0			0x00
#define PCF_S1			0x01
#define PCF_S2			0x02
#define PCF_S3			0x03

#define PCF_CTRL_ACK		(1<<0)
#define PCF_CTRL_STO		(1<<1)
#define PCF_CTRL_STA		(1<<2)
#define PCF_CTRL_ENI		(1<<3)
#define PCF_CTRL_ES2		(1<<4)
#define PCF_CTRL_ES1		(1<<5)
#define PCF_CTRL_ESO		(1<<6)
#define PCF_CTRL_PIN		(1<<7)

#define PCF_CTRL_START		(PCF_CTRL_PIN | PCF_CTRL_ESO | \
    PCF_CTRL_STA | PCF_CTRL_ACK)
#define PCF_CTRL_STOP		(PCF_CTRL_PIN | PCF_CTRL_ESO | \
    PCF_CTRL_STO | PCF_CTRL_ACK)
#define PCF_CTRL_REPSTART	(PCF_CTRL_ESO | PCF_CTRL_STA | PCF_CTRL_ACK)
#define PCF_CTRL_IDLE		(PCF_CTRL_PIN | PCF_CTRL_ESO | PCF_CTRL_ACK)

#define PCF_STAT_nBB		(1<<0)
#define PCF_STAT_LAB		(1<<1)
#define PCF_STAT_AAS		(1<<2)
#define PCF_STAT_AD0		(1<<3)
#define PCF_STAT_LRB		(1<<3)
#define PCF_STAT_BER		(1<<4)
#define PCF_STAT_STS		(1<<5)
#define PCF_STAT_PIN		(1<<7)

struct cfdriver pcfiic_cd = {
	NULL, "pcfiic", DV_DULL
};

void		pcfiic_init(struct pcfiic_softc *);
int		pcfiic_i2c_acquire_bus(void *, int);
void		pcfiic_i2c_release_bus(void *, int);
int		pcfiic_i2c_exec(void *, i2c_op_t, i2c_addr_t, const void *,
		    size_t, void *, size_t, int);

int		pcfiic_xmit(struct pcfiic_softc *, u_int8_t, const u_int8_t *,
		    size_t);
int		pcfiic_recv(struct pcfiic_softc *, u_int8_t, u_int8_t *,
		    size_t);

u_int8_t	pcfiic_read(struct pcfiic_softc *, bus_size_t);
void		pcfiic_write(struct pcfiic_softc *, bus_size_t, u_int8_t);
void		pcfiic_choose_bus(struct pcfiic_softc *, u_int8_t);
int		pcfiic_wait_nBB(struct pcfiic_softc *);
int		pcfiic_wait_pin(struct pcfiic_softc *, volatile u_int8_t *);

void
pcfiic_init(struct pcfiic_softc *sc)
{
	/* init S1 */
	pcfiic_write(sc, PCF_S1, PCF_CTRL_PIN);
	/* own address */
	pcfiic_write(sc, PCF_S0, sc->sc_addr);

	/* select clock reg */
	pcfiic_write(sc, PCF_S1, PCF_CTRL_PIN|PCF_CTRL_ES1);
	pcfiic_write(sc, PCF_S0, sc->sc_clock);

	pcfiic_write(sc, PCF_S1, PCF_CTRL_IDLE);

	delay(200000);	/* Multi-Master mode, wait for longest i2c message */
}

void
pcfiic_attach(struct pcfiic_softc *sc, i2c_addr_t addr, u_int8_t clock,
    int swapregs,
    void (*scan_func)(struct device *, struct i2cbus_attach_args *, void *),
    void *scan_arg)
{
	struct i2cbus_attach_args		iba;

	if (swapregs) {
		sc->sc_regmap[PCF_S1] = PCF_S0;
		sc->sc_regmap[PCF_S0] = PCF_S1;
	} else {
		sc->sc_regmap[PCF_S0] = PCF_S0;
		sc->sc_regmap[PCF_S1] = PCF_S1;
	}
	sc->sc_clock = clock;
	sc->sc_addr = addr;

	pcfiic_init(sc);

	printf("\n");

	if (sc->sc_master)
		pcfiic_choose_bus(sc, 0);

	rw_init(&sc->sc_lock, "iiclk");
	sc->sc_i2c.ic_cookie = sc;
	sc->sc_i2c.ic_acquire_bus = pcfiic_i2c_acquire_bus;
	sc->sc_i2c.ic_release_bus = pcfiic_i2c_release_bus;
	sc->sc_i2c.ic_exec = pcfiic_i2c_exec;

	bzero(&iba, sizeof(iba));
	iba.iba_name = "iic";
	iba.iba_tag = &sc->sc_i2c;
	iba.iba_bus_scan = scan_func;
	iba.iba_bus_scan_arg = scan_arg;
	config_found(&sc->sc_dev, &iba, iicbus_print);
}

int
pcfiic_intr(void *arg)
{
	return (0);
}

int
pcfiic_i2c_acquire_bus(void *arg, int flags)
{
	struct pcfiic_softc	*sc = arg;

	if (cold || sc->sc_poll || (flags & I2C_F_POLL))
		return (0);

	return (rw_enter(&sc->sc_lock, RW_WRITE | RW_INTR));
}

void
pcfiic_i2c_release_bus(void *arg, int flags)
{
	struct pcfiic_softc	*sc = arg;

	if (cold || sc->sc_poll || (flags & I2C_F_POLL))
		return;

	rw_exit(&sc->sc_lock);
}

int
pcfiic_i2c_exec(void *arg, i2c_op_t op, i2c_addr_t addr,
    const void *cmdbuf, size_t cmdlen, void *buf, size_t len, int flags)
{
	struct pcfiic_softc	*sc = arg;
	int			ret = 0;

#if 0
        printf("%s: exec op: %d addr: 0x%x cmdlen: %d len: %d flags 0x%x\n",
            sc->sc_dev.dv_xname, op, addr, cmdlen, len, flags);
#endif

	if (cold || sc->sc_poll)
		flags |= I2C_F_POLL;

	if (sc->sc_master)
		pcfiic_choose_bus(sc, addr >> 7);

	if (cmdlen > 0)
		if (pcfiic_xmit(sc, addr & 0x7f, cmdbuf, cmdlen) != 0)
			return (1);

	if (len > 0) {
		if (I2C_OP_WRITE_P(op))
			ret = pcfiic_xmit(sc, addr & 0x7f, buf, len);
		else
			ret = pcfiic_recv(sc, addr & 0x7f, buf, len);
	}
	return (ret);
}

int
pcfiic_xmit(struct pcfiic_softc *sc, u_int8_t addr, const u_int8_t *buf,
    size_t len)
{
	int			i, err = 0;
	volatile u_int8_t	r;

	if (pcfiic_wait_nBB(sc) != 0)
		return (1);

	pcfiic_write(sc, PCF_S0, addr << 1);
	pcfiic_write(sc, PCF_S1, PCF_CTRL_START);

	for (i = 0; i <= len; i++) {
		if (pcfiic_wait_pin(sc, &r) != 0) {
			pcfiic_write(sc, PCF_S1, PCF_CTRL_STOP);
			return (1);
		}

		if (r & PCF_STAT_LRB) {
			err = 1;
			break;
		}

		if (i < len)
			pcfiic_write(sc, PCF_S0, buf[i]);
	}
	pcfiic_write(sc, PCF_S1, PCF_CTRL_STOP);
	return (err);
}

int
pcfiic_recv(struct pcfiic_softc *sc, u_int8_t addr, u_int8_t *buf, size_t len)
{
	int			i = 0, err = 0;
	volatile u_int8_t	r;

	if (pcfiic_wait_nBB(sc) != 0)
		return (1);

	pcfiic_write(sc, PCF_S0, (addr << 1) | 0x01);
	pcfiic_write(sc, PCF_S1, PCF_CTRL_START);

	for (i = 0; i <= len; i++) {
		if (pcfiic_wait_pin(sc, &r) != 0) {
			pcfiic_write(sc, PCF_S1, PCF_CTRL_STOP);
			return (1);
		}

		if ((i != len) && (r & PCF_STAT_LRB)) {
			pcfiic_write(sc, PCF_S1, PCF_CTRL_STOP);
			return (1);
		}

		if (i == len - 1) {
			pcfiic_write(sc, PCF_S1, PCF_CTRL_ESO);
		} else if (i == len) {
			pcfiic_write(sc, PCF_S1, PCF_CTRL_STOP);
		}

		r = pcfiic_read(sc, PCF_S0);
		if (i > 0)
			buf[i - 1] = r;
	}
	return (err);
}

u_int8_t
pcfiic_read(struct pcfiic_softc *sc, bus_size_t r)
{
	bus_space_barrier(sc->sc_iot, sc->sc_ioh, sc->sc_regmap[r], 1,
	    BUS_SPACE_BARRIER_READ);
	return (bus_space_read_1(sc->sc_iot, sc->sc_ioh, sc->sc_regmap[r]));
}

void
pcfiic_write(struct pcfiic_softc *sc, bus_size_t r, u_int8_t v)
{
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, sc->sc_regmap[r], v);
	bus_space_barrier(sc->sc_iot, sc->sc_ioh, 0, 4,
	    BUS_SPACE_BARRIER_WRITE | BUS_SPACE_BARRIER_READ);
	bus_space_read_1(sc->sc_iot, sc->sc_ioh, sc->sc_regmap[PCF_S1]);
}

void
pcfiic_choose_bus(struct pcfiic_softc *sc, u_int8_t bus)
{
	bus_space_write_1(sc->sc_iot, sc->sc_ioh2, 0, bus);
	bus_space_barrier(sc->sc_iot, sc->sc_ioh2, 0, 1,
	    BUS_SPACE_BARRIER_WRITE);
}

int
pcfiic_wait_nBB(struct pcfiic_softc *sc)
{
	int		i;

	for (i = 0; i < 1000; i++) {
		if (pcfiic_read(sc, PCF_S1) & PCF_STAT_nBB)
			return (0);
		delay(1000);
	}
	return (1);
}

int
pcfiic_wait_pin(struct pcfiic_softc *sc, volatile u_int8_t *r)
{
	int		i;

	for (i = 0; i < 1000; i++) {
		*r = pcfiic_read(sc, PCF_S1);
		if ((*r & PCF_STAT_PIN) == 0)
			return (0);
		delay(1000);
	}
	return (1);
}
@


1.10
log
@Remove volatile from function return values since gcc4 complains about them
and they don't make any sense (the old deprecated GCC way of marking noreturn
functions is surely not what was meant here).

ok jsg@@, guenther@@, marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcf8584.c,v 1.9 2007/10/20 18:46:21 kettenis Exp $ */
d278 3
a280 2
	bus_space_barrier(sc->sc_iot, sc->sc_ioh, sc->sc_regmap[r], 1,
	    BUS_SPACE_BARRIER_WRITE);
@


1.9
log
@Move a few more definitions to pcf8584var.h.  Needed for SUNW,envctrl and
SUNW,envctrltwo support.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcf8584.c,v 1.8 2007/05/21 03:11:11 jsg Exp $ */
d78 2
a79 2
volatile u_int8_t pcfiic_read(struct pcfiic_softc *, bus_size_t);
volatile void	pcfiic_write(struct pcfiic_softc *, bus_size_t, u_int8_t);
d266 1
a266 1
volatile u_int8_t
d274 1
a274 1
volatile void
@


1.8
log
@Switch pcfiic to rwlock.
ok dlg@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcf8584.c,v 1.7 2006/06/22 08:33:43 deraadt Exp $ */
a61 5

#define PCF_FREQ_90		0x00 /* 90 kHz */
#define PCF_FREQ_45		0x01 /* 45 kHz */
#define PCF_FREQ_11		0x02 /* 11 kHz */
#define PCF_FREQ_1_5		0x03 /* 1.5 kHz */
@


1.7
log
@BBC-based machines swap the two registers (good going Sun -- that is why we
don't get documentation, right?), and the clock fed into the chip can vary
from model to model; help & testing from dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: pcf8584.c,v 1.6 2006/06/21 15:58:19 deraadt Exp $ */
d24 1
a24 1
#include <sys/lock.h>
d131 1
a131 1
	lockinit(&sc->sc_lock, PRIBIO | PCATCH, "iiclk", 0, 0);
d159 1
a159 1
	return (lockmgr(&sc->sc_lock, LK_EXCLUSIVE, NULL));
d170 1
a170 1
	lockmgr(&sc->sc_lock, LK_RELEASE, NULL);
@


1.6
log
@properly handle timeout failure in while loop
@
text
@d1 1
a1 1
/*	$OpenBSD: pcf8584.c,v 1.5 2006/06/15 16:25:22 deraadt Exp $ */
a62 6
#define PCF_CLOCK_3		0x00 /* 3 MHz */
#define PCF_CLOCK_4_43		0x10 /* 4.43 MHz */
#define PCF_CLOCK_6		0x14 /* 6 MHz */
#define PCF_CLOCK_8		0x18 /* 8 MHz */
#define PCF_CLOCK_12		0x1c /* 12 MHz */

d72 1
d90 1
a90 3
pcfiic_attach(struct pcfiic_softc *sc, i2c_addr_t addr,
    void (*scan_func)(struct device *, struct i2cbus_attach_args *, void *),
    void *scan_arg)
a91 2
	struct i2cbus_attach_args		iba;

d95 1
a95 1
	pcfiic_write(sc, PCF_S0, addr);
d99 1
a99 1
	pcfiic_write(sc, PCF_S0, PCF_CLOCK_12);
d103 22
a124 3
#if 0
	pcfiic_read(sc, PCF_S0);	/* dummy read maybe? */
#endif
d208 1
a208 1
	int			i, err = 0, tries = 100;
d211 2
a212 5
	while ((pcfiic_read(sc, PCF_S1) & PCF_STAT_nBB) == 0) {
		if (--tries == 0)
			return (1);
		DELAY(1);
	}
d218 3
a220 6
		while ((r = pcfiic_read(sc, PCF_S1)) & PCF_STAT_PIN) {
			if (--tries == 0) {
				err = 1;
				goto fail;
			}
			DELAY(1);
a230 1
fail:
a240 2
	pcfiic_write(sc, PCF_S0, (addr << 1) | 0x01);

d244 1
d274 1
a274 1
	bus_space_barrier(sc->sc_iot, sc->sc_ioh, r, 1,
d276 1
a276 1
	return (bus_space_read_1(sc->sc_iot, sc->sc_ioh, r));
d282 2
a283 2
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, r, v);
	bus_space_barrier(sc->sc_iot, sc->sc_ioh, r, 1,
@


1.5
log
@tighten this code up
@
text
@d1 1
a1 1
/*	$OpenBSD: pcf8584.c,v 1.4 2006/06/14 04:13:37 deraadt Exp $ */
d214 1
a214 1
				break;
d227 1
a227 1

@


1.4
log
@no more infinite loops; tested by dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: pcf8584.c,v 1.3 2006/06/14 01:15:17 deraadt Exp $ */
d112 3
a114 1
//	pcfiic_read(sc, PCF_S0);	/* dummy read */
d144 1
a144 1
	struct pcfiic_softc		*sc = arg;
d155 1
a155 1
	struct pcfiic_softc		*sc = arg;
d167 2
a168 2
	struct pcfiic_softc		*sc = arg;
	int				ret = 0;
d181 1
a181 1
	if (cmdlen > 0) {
a183 1
	}
a190 1

d198 2
a199 4
	int				i;
	int				err = 0;
	volatile u_int8_t		r;
	int				tries = 100;
a228 1

d235 2
a236 3
	int				i;
	int				err = 0;
	volatile u_int8_t		r;
a244 1
	i = 0;
a265 1

d296 1
a296 1
	int				i;
a302 1

d309 1
a309 1
	int				i;
a316 1

@


1.3
log
@support the iic busses on the ultrasparc III machines (something is still
wrong, likely clocking); tested to not break older machines by dlg & djm
@
text
@d1 1
a1 1
/*	$OpenBSD: pcf8584.c,v 1.2 2006/02/01 11:09:16 dlg Exp $ */
d201 1
d203 5
a207 2
	while ((pcfiic_read(sc, PCF_S1) & PCF_STAT_nBB) == 0)
		;
d213 7
a219 2
		while ((r = pcfiic_read(sc, PCF_S1)) & PCF_STAT_PIN)
			;
@


1.2
log
@dont clutter up dmesg with useless or redundant information

prodded by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcf8584.c,v 1.1 2006/02/01 11:03:34 dlg Exp $ */
d88 3
a90 2
u_int8_t	pcfiic_read(struct pcfiic_softc *, bus_size_t);
void		pcfiic_write(struct pcfiic_softc *, bus_size_t, u_int8_t);
a93 7
#define pcfiic_ctrl_start(_sc)		pcfiic_write((_sc), PCF_S1, \
					    PCF_CTRL_START)
#define pcfiic_ctrl_repstart(_sc)	pcf_write((_sc), PCF_S1, \
					    PCF_CTRL_REPSTART)
#define pcfiic_ctrl_stop(_sc)		pcfiic_write((_sc), PCF_S1, \
					    PCF_CTRL_STOP)

d110 3
a112 2
	pcfiic_write(sc, PCF_S1, PCF_CTRL_PIN | PCF_CTRL_ESO | PCF_CTRL_ENI |
	    PCF_CTRL_ACK);
d116 3
d176 3
d180 1
a180 1
		if (pcfiic_xmit(sc, addr, cmdbuf, cmdlen) != 0)
d186 1
a186 1
			ret = pcfiic_xmit(sc, addr, buf, len);
d188 1
a188 1
			ret = pcfiic_recv(sc, addr, buf, len);
a201 1

d206 1
a206 2
	
	pcfiic_write(sc, PCF_S1, 0xc5);
d221 1
a221 1
	pcfiic_write(sc, PCF_S1, 0xc3);
d237 2
a238 2
	
	pcfiic_ctrl_start(sc);
d243 1
a243 1
			pcfiic_ctrl_stop(sc);
d248 1
a248 1
			pcfiic_ctrl_stop(sc);
d255 1
a255 1
			pcfiic_ctrl_stop(sc);
d266 1
a266 2

u_int8_t
d274 1
a274 1
void
d279 8
@


1.1
log
@a driver for the phillips pcf8584 i2c controller as found on the sun netra
t1 105.

tested by henning@@ djm@@
ok kettenis@@ put it in deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d119 1
a119 2
	printf(": PCF8584 I2C address 0x%02x%s\n", addr,
	    sc->sc_poll ? ", polled" : "");
@

