head	1.22;
access;
symbols
	OPENBSD_6_0:1.22.0.14
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.8
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.22.0.10
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.22.0.6
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.4
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.21.0.12
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.10
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.6
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.8
	OPENBSD_5_0:1.21.0.4
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.2
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.20.0.14
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.10
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.20.0.12
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.8
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.6
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.4
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.20.0.2
	OPENBSD_4_2_BASE:1.20;
locks; strict;
comment	@ * @;


1.22
date	2013.11.26.20.33.16;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2011.01.26.21.41.00;	author drahn;	state Exp;
branches;
next	1.20;

1.20
date	2007.04.07.13.02.52;	author pascoe;	state Exp;
branches;
next	1.19;

1.19
date	2007.04.07.06.12.19;	author pascoe;	state Exp;
branches;
next	1.18;

1.18
date	2007.04.07.06.10.09;	author dlg;	state Exp;
branches;
next	1.17;

1.17
date	2007.04.05.10.45.25;	author dlg;	state Exp;
branches;
next	1.16;

1.16
date	2007.04.05.09.57.50;	author dlg;	state Exp;
branches;
next	1.15;

1.15
date	2007.04.05.02.38.28;	author dlg;	state Exp;
branches;
next	1.14;

1.14
date	2007.04.04.11.38.35;	author dlg;	state Exp;
branches;
next	1.13;

1.13
date	2007.04.04.11.16.23;	author dlg;	state Exp;
branches;
next	1.12;

1.12
date	2007.04.01.00.13.17;	author jsg;	state Exp;
branches;
next	1.11;

1.11
date	2007.03.31.08.13.40;	author dlg;	state Exp;
branches;
next	1.10;

1.10
date	2007.03.31.08.08.15;	author dlg;	state Exp;
branches;
next	1.9;

1.9
date	2007.03.31.03.59.53;	author dlg;	state Exp;
branches;
next	1.8;

1.8
date	2007.03.30.04.45.30;	author dlg;	state Exp;
branches;
next	1.7;

1.7
date	2007.03.26.01.55.02;	author dlg;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.26.00.33.38;	author dlg;	state Exp;
branches;
next	1.5;

1.5
date	2007.03.24.02.42.21;	author dlg;	state Exp;
branches;
next	1.4;

1.4
date	2007.03.24.02.28.06;	author dlg;	state Exp;
branches;
next	1.3;

1.3
date	2007.03.22.06.54.01;	author dlg;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.22.06.32.14;	author dlg;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.22.02.48.42;	author dlg;	state Exp;
branches;
next	;


desc
@@


1.22
log
@1 << 31 cleanup.  Eitan Adler pointed out that there has been a
resurrection of the bad idiom in the tree.
sufficient review by miod, kettenis, tedu
@
text
@/*	$OpenBSD: silireg.h,v 1.21 2011/01/26 21:41:00 drahn Exp $ */

/*
 * Copyright (c) 2007 David Gwynne <dlg@@openbsd.org>
 * Copyright (c) 2010 Conformal Systems LLC <info@@conformal.com>
 * Copyright (c) 2010 Jonathan Matthew <jonathan@@d14n.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* PCI Registers */
#define SILI_PCI_BAR_GLOBAL	0x10 /* Global Registers address */
#define SILI_PCI_BAR_PORT	0x18 /* Port Registers address */
#define SILI_PCI_BAR_INDIRECT	0x20 /* Indirect IO Registers address */

/* Global Registers */
#define SILI_REG_PORT0_STATUS	0x00 /* Port 0 Slot Status */
#define SILI_REG_PORT1_STATUS	0x04 /* Port 1 Slot Status */
#define SILI_REG_PORT2_STATUS	0x08 /* Port 2 Slot Status */
#define SILI_REG_PORT3_STATUS	0x0c /* Port 3 Slot Status */
#define SILI_REG_GC		0x40 /* Global Control */
#define  SILI_REG_GC_GR			(1<<31) /* Global Reset */
#define  SILI_REG_GC_MSIACK		(1<<30) /* MSI Acknowledge */
#define  SILI_REG_GC_I2CINT		(1<<29) /* I2C Interrupt Enable */
#define  SILI_REG_GC_PERRDIS		(1<<28) /* PCI Error Report Disable */
#define  SILI_REG_GC_REQ64		(1<<20) /* latched PCI REQ64 */
#define  SILI_REG_GC_DEVSEL		(1<<19) /* latched PCI DEVSEL */
#define  SILI_REG_GC_STOP		(1<<18) /* latched PCI STOP */
#define  SILI_REG_GC_TRDY		(1<<17) /* latched PCI TRDY */
#define  SILI_REG_GC_M66EN		(1<<16) /* M66EN PCI bus signal */
#define  SILI_REG_GC_PIE_MASK		0x0f
#define SILI_FMT_GC		"\020" "\040GR" "\037MSIACK" "\036I2CINT" \
				    "\035PERRDIS" "\025REQ64" "\024DEVSEL" \
				    "\023STOP" "\022TRDY" "\021M66EN" \
				    "\004P3IE" "\003P2IE" "\002P1IE" "\001P0IE"
#define SILI_REG_GIS		0x44 /* Global Interrupt Status */
#define  SILI_REG_GIS_I2C		(1 << 29)
#define  SILI_REG_GIS_PIS_MASK		0x0f
#define SILI_REG_PHYCONF	0x48 /* PHY Configuration */
#define SILI_REG_BISTCTL	0x50 /* BIST Control */
#define SILI_REG_BISTPATTERN	0x54 /* BIST Pattern */
#define SILI_REG_BISTSTAT	0x58 /* BIST Status */
#define SILI_REG_FLASHADDR	0x70 /* Flash Address */
#define SILI_REG_FLASHDATA	0x74 /* Flash Memory Data / GPIO Control */
#define SILI_REG_GPIOCTL	SILI_REG_FLASHDATA
#define SILI_REG_IICADDR	0x78 /* I2C Address */
#define SILI_REG_IIC		0x7c /* I2C Data / Control */

#define SILI_PORT_SIZE		0x2000
#define SILI_PORT_OFFSET(_p)	((_p) * SILI_PORT_SIZE)

/* Port Registers */
#define SILI_PREG_LRAM		0x0000 /* Port LRAM */
#define SILI_PREG_SLOT_WIDTH	0x80
#define SILI_PREG_SLOT(_s)	(SILI_PREG_LRAM + (_s) * SILI_PREG_SLOT_WIDTH)
#define SILI_PREG_RX_COUNT(_s)	(SILI_PREG_SLOT(_s) + 0x04)
#define SILI_PREG_SIG_HI(_s)	(SILI_PREG_SLOT(_s) + 0x0c)
#define SILI_PREG_SIG_HI_SHIFT	8
#define SILI_PREG_SIG_LO(_s)	(SILI_PREG_SLOT(_s) + 0x14)
#define SILI_PREG_SIG_LO_MASK	0xff

#define SILI_PREG_PMP_BASE	0xF80	/* PMP Device Status/QActive Registers */
#define SILI_PREG_PMP_STATUS(_p) (SILI_PREG_PMP_BASE + (_p * 8))
#define SILI_PREG_PMP_QACTIVE(_p) (SILI_PREG_PMP_BASE + 4 + (_p * 8))
#define  SILI_PREG_PMP_STATUS_PIO	0x000000FF
#define  SILI_PREG_PMP_STATUS_ACTIVE	0x00000F00
#define  SILI_PREG_PMP_STATUS_BUSY	(1 << 13)
#define  SILI_PREG_PMP_STATUS_NCQ	(1 << 14)
#define  SILI_PREG_PMP_STATUS_LEGACY_Q	(1 << 15)
#define  SILI_PREG_PMP_STATUS_PENDING	(1 << 16)

#define SILI_PREG_PCS		0x1000 /* Port Control Set / Status */
#define  SILI_PREG_PCS_PORTRDY		(1<<31) /* Port Ready */
#define  SILI_PREG_PCS_OOBB		(1<<25) /* OOB Bypass */
#define  SILI_PREG_PCS_ACTIVE(_x)	(((_x)>>16) & 0x1f) /* Active Slot */
#define  SILI_PREG_PCS_LED_ON		(1<<15) /* LED On */
#define  SILI_PREG_PCS_AIA		(1<<14) /* Auto Interlock Accept */
#define  SILI_PREG_PCS_PMEN		(1<<13) /* Port Mult Enable */
#define  SILI_PREG_PCS_IA		(1<<12) /* Interlock Accept */
#define  SILI_PREG_PCS_IR		(1<<11) /* Interlock Reject */
#define  SILI_PREG_PCS_A32B		(1<<10) /* 32-bit Activation */
#define  SILI_PREG_PCS_SD		(1<<9) /* Scrambler Disable */
#define  SILI_PREG_PCS_CD		(1<<8) /* CONT Disable */
#define  SILI_PREG_PCS_TB		(1<<7) /* Transmit BIST */
#define  SILI_PREG_PCS_RESUME		(1<<6) /* Resume */
#define  SILI_PREG_PCS_PLEN		(1<<5) /* Packet Length */
#define  SILI_PREG_PCS_LEDDISABLE	(1<<4) /* LED Disable */
#define  SILI_PREG_PCS_NOINTCLR		(1<<3) /* No Intr Clear on Read */
#define  SILI_PREG_PCS_PORTINIT		(1<<2) /* Port Initialize */
#define  SILI_PREG_PCS_DEVRESET		(1<<1) /* Device Reset */
#define  SILI_PREG_PCS_PORTRESET	(1<<0) /* Port Reset */
#define SILI_PFMT_PCS		"\020" "\032OOBB" "\020LED_ON" "\017AIA" \
				    "\016PMEN" "\015IA" "\014IR" "\013A32B" \
				    "\012SD" "\011CD" "\010TB" "\007RESUME" \
				    "\006PLEN" "\005LEDDISABLE" \
				    "\004NOINTCLR" "\003PORTINIT" \
				    "\002PORTINIT" "\001PORTRESET"
#define SILI_PREG_PCC		0x1004 /* Port Control Clear */
#define  SILI_PREG_PCC_OOBB		(1<<25) /* OOB Bypass */
#define  SILI_PREG_PCC_LED_ON		(1<<15) /* LED On */
#define  SILI_PREG_PCC_AIA		(1<<14) /* Auto Interlock Accept */
#define  SILI_PREG_PCC_PMEN		(1<<13) /* Port Mult Enable */
#define  SILI_PREG_PCC_IA		(1<<12) /* Interlock Accept */
#define  SILI_PREG_PCC_IR		(1<<11) /* Interlock Reject */
#define  SILI_PREG_PCC_A32B		(1<<10) /* 32-bit Activation */
#define  SILI_PREG_PCC_SD		(1<<9) /* Scrambler Disable */
#define  SILI_PREG_PCC_CD		(1<<8) /* CONT Disable */
#define  SILI_PREG_PCC_TB		(1<<7) /* Transmit BIST */
#define  SILI_PREG_PCC_RESUME		(1<<6) /* Resume */
#define  SILI_PREG_PCC_PLEN		(1<<5) /* Packet Length */
#define  SILI_PREG_PCC_LEDDISABLE	(1<<4) /* LED Disable */
#define  SILI_PREG_PCC_NOINTCLR		(1<<3) /* No Intr Clear on Read */
#define  SILI_PREG_PCC_PORTINIT		(1<<2) /* Port Initialize */
#define  SILI_PREG_PCC_DEVRESET		(1<<1) /* Device Reset */
#define  SILI_PREG_PCC_PORTRESET	(1<<0) /* Port Reset */
#define SILI_PREG_IS		0x1008 /* Interrupt Status */
#define  SILI_PREG_IS_SDB		(1<<11) /* SDB Notify */
#define  SILI_PREG_IS_HANDSHAKE		(1<<10) /* Handshake error threshold */
#define  SILI_PREG_IS_CRC		(1<<9) /* CRC error threshold */
#define  SILI_PREG_IS_DEC		(1<<8) /* 8b/10b decode error thresh */
#define  SILI_PREG_IS_DEVXCHG		(1<<7) /* Device Exchanged */
#define  SILI_PREG_IS_UNRECFIS		(1<<6) /* Unrecognized FIS Type */
#define  SILI_PREG_IS_COMWAKE		(1<<5) /* ComWake */
#define  SILI_PREG_IS_PHYRDYCHG		(1<<4) /* Phy Ready Change */
#define  SILI_PREG_IS_PMCHG		(1<<3) /* Power Mmgt Change */
#define  SILI_PREG_IS_PORTRDY		(1<<2) /* Port Ready */
#define  SILI_PREG_IS_CMDERR		(1<<1) /* Command Error */
#define  SILI_PREG_IS_CMDCOMP		(1<<0) /* Command Completion */
#define SILI_PFMT_IS		"\020" "\014SDB" "\013HANDSHAKE" \
				    "\012CRC" "\011DECODE" \
				    "\010DEVXCHG" "\007UNRECFIS" \
				    "\006COMWAKE" "\005PHYRDYCHG" \
				    "\004PMCHG" "\003PORTRDY" \
				    "\002CMDERR" "\001CMDCOMP"
#define SILI_PREG_IES		0x1010 /* Interrupt Enable Set */
#define SILI_PREG_IEC		0x1014 /* Interrupt Enable Clear */
#define  SILI_PREG_IE_SDB		(1<<11) /* SDB Notify */
#define  SILI_PREG_IE_DEVXCHG		(1<<7) /* Device Exchange */
#define  SILI_PREG_IE_UNRECFIS		(1<<6) /* Unrecognized FIS Type */
#define  SILI_PREG_IE_COMWAKE		(1<<5) /* ComWake */
#define  SILI_PREG_IE_PHYRDYCHG		(1<<4) /* Phy Ready Change */
#define  SILI_PREG_IE_PMCHG		(1<<3) /* Power Mmgt Change */
#define  SILI_PREG_IE_PORTRDY		(1<<2) /* Port Ready */
#define  SILI_PREG_IE_CMDERR		(1<<1) /* Command Error */
#define  SILI_PREG_IE_CMDCOMP		(1<<0) /* Command Completion */
#define  SILI_PREG_IE_ALL		0x08ff
#define SILI_PREG_AUA		0x101c /* Activation Upper Address */
#define SILI_PREG_FIFO		0x1020 /* Command Execution FIFO */
#define SILI_PREG_CE		0x1024 /* Command Error */
#define  SILI_PREG_CE_DEVICEERROR		1
#define  SILI_PREG_CE_SDBERROR			2
#define  SILI_PREG_CE_DATAFISERROR		3
#define SILI_PREG_FC		0x1028 /* FIS Configuration */
#define SILI_PREG_RFT		0x102c /* Request FIFO Threshold */
#define SILI_PREG_DEC		0x1040 /* 8b/10b Decode Error Counter */
#define SILI_PREG_CEC		0x1044 /* CRC Error Counter */
#define SILI_PREG_HEC		0x1048 /* Handshake Error Counter */
#define SILI_PREG_PHYCONF	0x1050 /* Port PHY Configuration */
#define SILI_PREG_PSS		0x1800 /* Port Slot Status */
#define SILI_PREG_PSS_ATTENTION		(1U << 31)
#define SILI_PREG_PSS_ALL_SLOTS		0x7fffffff
#define SILI_PREG_CAR_LO(_s)	(0x1c00 + ((_s) * 0x8)) /* Cmd Activate Reg */
#define SILI_PREG_CAR_HI(_s)	(0x1c00 + ((_s) * 0x8) + 0x4)
#define SILI_PREG_CONTEXT	0x1e04 /* Port Context Register */
#define  SILI_PREG_CONTEXT_SLOT_MASK	0x1F
#define  SILI_PREG_CONTEXT_PMPORT_MASK	0x0F
#define  SILI_PREG_CONTEXT_SLOT_SHIFT	0
#define  SILI_PREG_CONTEXT_PMPORT_SHIFT	5
#define SILI_PREG_SCTL		0x1f00 /* SControl */
#define  SILI_PREG_SCTL_PMP		0x000F0000
#define  SILI_PREG_SCTL_PMP_SHIFT	16
#define SILI_PREG_SSTS		0x1f04 /* SStatus */
#define SILI_PREG_SERR		0x1f08 /* SError */
#define SILI_PREG_SACT		0x1f0c /* SActive */
#define SILI_PREG_SNOT		0x1f10 /* SNotification */




struct sili_sge {
	u_int32_t		addr_lo;
	u_int32_t		addr_hi;
	u_int32_t		data_count;
	u_int32_t		flags;
#define SILI_SGE_TRM			(1<<31)
#define SILI_SGE_LNK			(1<<30)
#define SILI_SGE_DRD			(1<<29)
#define SILI_SGE_XCF			(1<<28)
} __packed;

#define SILI_SGT_SGLLEN		4

struct sili_sgt {
	struct sili_sge		sgl[SILI_SGT_SGLLEN];
} __packed;

#define SILI_PRB_PROTOCOL_OVERRIDE	(1<<0)
#define SILI_PRB_RETRANSMIT		(1<<1)
#define SILI_PRB_EXTERNAL_COMMAND	(1<<2)
#define SILI_PRB_RECEIVE		(1<<3)
#define SILI_PRB_PACKET_READ		(1<<4)
#define SILI_PRB_PACKET_WRITE		(1<<5)
#define SILI_PRB_INTERRUPT_MASK		(1<<6)
#define SILI_PRB_SOFT_RESET		(1<<7)

struct sili_prb { /* this is just a useful template */
	u_int16_t		control;
	u_int16_t		reserved1;
	u_int32_t		reserved2;

	u_int8_t		fis[ATA_FIS_LENGTH];

	u_int32_t		reserved3[9];
} __packed;

struct sili_prb_ata {
	u_int16_t		control;
	u_int16_t		protocol_override;
	u_int32_t		rx_count;

	u_int8_t		fis[ATA_FIS_LENGTH];

	u_int32_t		reserved;

	struct sili_sge		sgl[2];
} __packed;

struct sili_prb_packet {
	u_int16_t		control;
	u_int16_t		protocol_override;
	u_int32_t		rx_count;

	u_int8_t		fis[ATA_FIS_LENGTH];

	u_int32_t		reserved;

	u_int8_t		cdb[16];

	struct sili_sge		sgl[1];
} __packed;

struct sili_prb_softreset {
	u_int16_t		control;
	u_int16_t		reserved1;
	u_int32_t		reserved2;

	u_int8_t		fis[ATA_FIS_LENGTH];

	u_int32_t		reserved3[9];
} __packed;

#define SILI_MAX_CMDS		31
#define SILI_PRB_LENGTH		64
#define SILI_PRB_ALIGN		8
#define SILI_SGT_LENGTH		64
@


1.21
log
@Add port multiplier support, has been in snaps for a while with no reported
issues. No actual OKs, but general acknowledgement and 'get it in' from several.
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.20 2007/04/07 13:02:52 pascoe Exp $ */
d170 1
a170 1
#define SILI_PREG_PSS_ATTENTION		(1 << 31)
@


1.20
log
@Add some more device status related register definitions.
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.19 2007/04/07 06:12:19 pascoe Exp $ */
d5 2
d71 11
a81 1
/* XXX PMP Bits */
d174 5
a178 1
#define SILI_PREG_CONTEXT	0x1e0f /* Port Context Register */
d180 2
d185 3
@


1.19
log
@Correct offset for global interrupt status register.
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.18 2007/04/07 06:10:09 dlg Exp $ */
d37 1
a37 1
#define  SILI_REG_GC_TRDY		(1<<17) /* latched PCI TRDY */   
d45 2
d64 1
d71 1
d73 1
a73 1
#define  SILI_PREG_PCS_ACTIVE(_x)	(((_x)>>16) & 0xf) /* Active Slot */
d115 18
d144 1
d148 3
d158 2
@


1.18
log
@this diff covers two changes, but theyre very tightly tied together.

implement long sgls by allocating 512 bytes per command, which gives us 7
scatter gather tables to fill in per command. we can now do proper sized
io. commands are still polled though, so its very very slow ;)

since you cant submit more than 128 bytes using direct command submission,
we needed to implement indirect submission too.

this almost worked, but i gave the controller to pascoe before i got it
working. he did the fixes to my dumb dumb mistakes. thanks pascoe. thascoe.
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.17 2007/04/05 10:45:25 dlg Exp $ */
d44 1
a44 1
#define SILI_REG_GIS		0x40 /* Global Interrupt Status */
@


1.17
log
@finish resetting the device by sending a soft reset via the post_direct
mechanism, and then read the device signature.
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.16 2007/04/05 09:57:50 dlg Exp $ */
d132 2
a133 2
#define SILI_PREG_CAR		0x1c00 /* Command Activation Registers */
	/* XXX up to 0x1cf7 is more of these */
d152 2
d155 1
a155 1
	struct sili_sge		sgl[4];
d167 10
d215 1
@


1.16
log
@control bits in the prb. shuffle things around a bit...
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.15 2007/04/05 02:38:28 dlg Exp $ */
d62 4
@


1.15
log
@start defining the scatter/gather bits and the port request blocks (PRBs).
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.14 2007/04/04 11:38:35 dlg Exp $ */
d60 3
a62 1
	/* XXX 31 slots and port multiplier stuff sits in here */
a136 3
#define SILI_MAX_CMDS		31


d148 13
d197 3
@


1.14
log
@interrupt enable set/clear defns
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.13 2007/04/04 11:16:23 dlg Exp $ */
d136 49
@


1.13
log
@port control clear bits
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.12 2007/04/01 00:13:17 jsg Exp $ */
d107 9
@


1.12
log
@Correct some sili port offsets.
ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.11 2007/03/31 08:13:40 dlg Exp $ */
d87 17
@


1.11
log
@more bits and the %b thing for port set/status
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.10 2007/03/31 08:08:15 dlg Exp $ */
d88 2
a89 2
#define SILI_PREG_IES		0x1008 /* Interrupt Enable Set */
#define SILI_PREG_IEC		0x1008 /* Interrupt Enable Clear */
@


1.10
log
@Port Control Set register defs
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.9 2007/03/31 03:59:53 dlg Exp $ */
d63 1
a74 2
#define  SILI_PREG_PCS_PLEN_12		(0<<5)
#define  SILI_PREG_PCS_PLEN_16		(1<<5)
d80 6
@


1.9
log
@initial atascsi glue.
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.8 2007/03/30 04:45:30 dlg Exp $ */
d62 19
@


1.8
log
@define the size and offsets for each ports set of registers
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.7 2007/03/26 01:55:02 dlg Exp $ */
d84 2
@


1.7
log
@bits for the global control register
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.6 2007/03/26 00:33:38 dlg Exp $ */
d54 3
@


1.6
log
@oops, 64bit memory bars.
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.5 2007/03/24 02:42:21 dlg Exp $ */
d30 14
@


1.5
log
@port registers
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.4 2007/03/24 02:28:06 dlg Exp $ */
d21 2
a22 2
#define SILI_PCI_BAR_PORT	0x14 /* Port Registers address */
#define SILI_PCI_BAR_INDIRECT	0x18 /* Indirect IO Registers address */
@


1.4
log
@global register definitions
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.3 2007/03/22 06:54:01 dlg Exp $ */
d19 4
a22 3
#define SILI_PCI_BAR_GLOBAL	0x10
#define SILI_PCI_BAR_PORT	0x14
#define SILI_PCI_BAR_INDIRECT	0x18
d24 1
d40 27
@


1.3
log
@read and write funcs for the global register space
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.2 2007/03/22 06:32:14 dlg Exp $ */
d22 16
@


1.2
log
@map the global and port register spaces.
@
text
@d1 1
a1 1
/*	$OpenBSD: silireg.h,v 1.1 2007/03/22 02:48:42 dlg Exp $ */
a21 2


@


1.1
log
@import sili(4) so it can be worked on in the tree. this will support the
silicon image 3124/3132/3531 sata chipsets eventually.

so far this is the autoconf glue, an actual match routine for the 3124, and
interrupt establishment code. it is split up between pci and ic cos there
are cardbus variants of these controllers that we can support in the
future.

thanks to jolan@@ for the name, it was better liked than my initial
suggestion of siisl(4).
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d18 5
@

