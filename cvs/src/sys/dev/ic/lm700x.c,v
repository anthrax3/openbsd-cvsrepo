head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.44
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.42
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.40
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.34
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.36
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.28
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.32
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.30
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.26
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.24
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.20
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.22
	OPENBSD_5_0:1.3.0.18
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.16
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.14
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.10
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.12
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.8
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.6
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.24
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.22
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.20
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.18
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.16
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.14
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.12
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.10
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.8
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.2
	UBC_BASE:1.2
	SMP:1.1.0.4
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2007.05.22.04.14.03;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2001.12.06.16.28.18;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2001.10.04.19.46.46;	author gluk;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2001.10.31.03.22.42;	author nate;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2002.03.06.02.11.43;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove broken URLs.
Fixes PRs 5482, 5483, 5484, 5486, 5487, 5488
Filed by casati@@nortel.com
@
text
@/*	$OpenBSD: lm700x.c,v 1.2 2001/12/06 16:28:18 mickey Exp $	*/

/*
 * Copyright (c) 2001 Vladimir Popov <jumbo@@narod.ru>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* Implementation of most common lm700x routines */

/*
 * Sanyo LM7001 Direct PLL Frequency Synthesizer
 *
 * The LM7001J and LM7001JM (used in Aztech/PackardBell cards) are PLL
 * frequency synthesizer LSIs for tuners. These LSIs are software compatible
 * with LM7000 (used in Radiotrack, Radioreveal RA300, some Mediaforte cards),
 * but do not include an IF calculation circuit.
 *
 * The FM VCO circuit includes a high-speed programmable divider that can
 * divide directly.
 *
 * Features:
 * Seven reference frequencies: 1, 5, 9, 10, 25, 50, and 100 kHz;
 * Band-switching outputs (3 bits);
 * Controller clock output (400 kHz);
 * Serial input circuit for data input (using the CE, CL and DATA pins).
 *
 * The LM7001J and LM7001JM have a 24-bit shift register.
 */

#include <sys/param.h>
#include <sys/radioio.h>

#include <dev/ic/lm700x.h>

u_int32_t
lm700x_encode_freq(u_int32_t nfreq, u_int32_t rf)
{
	nfreq += IF_FREQ;
	nfreq /= lm700x_decode_ref(rf);
	return nfreq;
}

void
lm700x_hardware_write(struct lm700x_t *lm, u_int32_t data, u_int32_t addon)
{
	int i;

	lm->init(lm->iot, lm->ioh, lm->offset, lm->rsetdata | addon);

	for (i = 0; i < LM700X_REGISTER_LENGTH; i++)
		if (data & (1 << i)) {
			bus_space_write_1(lm->iot, lm->ioh, lm->offset,
					lm->wocl | addon);
			DELAY(LM700X_WRITE_DELAY);
			bus_space_write_1(lm->iot, lm->ioh, lm->offset,
					lm->woch | addon);
			DELAY(LM700X_WRITE_DELAY);
			bus_space_write_1(lm->iot, lm->ioh, lm->offset,
					lm->wocl | addon);
		} else {
			bus_space_write_1(lm->iot, lm->ioh, lm->offset,
					lm->wzcl | addon);
			DELAY(LM700X_WRITE_DELAY);
			bus_space_write_1(lm->iot, lm->ioh, lm->offset,
					lm->wzch | addon);
			DELAY(LM700X_WRITE_DELAY);
			bus_space_write_1(lm->iot, lm->ioh, lm->offset,
					lm->wzcl | addon);
		}

	lm->rset(lm->iot, lm->ioh, lm->offset, lm->rsetdata | addon);
}

u_int32_t
lm700x_encode_ref(u_int8_t rf)
{
	u_int32_t ret;

	if (rf < 36)
		ret = LM700X_REF_025;
	else if (rf > 35 && rf < 75)
			ret = LM700X_REF_050;
	else
		ret = LM700X_REF_100;

	return ret;
}

u_int8_t
lm700x_decode_ref(u_int32_t rf)
{
	u_int8_t ret;

	switch (rf) {
	case LM700X_REF_100:
		ret = 100;
		break;
	case LM700X_REF_025:
		ret = 25;
		break;
	case LM700X_REF_050:
		/* FALLTHROUGH */
	default:
		ret = 50;
		break;
	}

	return ret;
}
@


1.2
log
@update the radio chipset support
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a31 1
 *    ??? See http://www.redsword.com/tjacobs/geeb/fmcard.htm
@


1.1
log
@Chip specific parts for FM-radio drivers.

Work by Vladimir Popov <jumbo@@narod.ru> and Maxim Tsyplakov <tm@@oganer.net>
@
text
@d30 21
d56 2
a57 2
u_long
lm700x_encode_freq(u_long nfreq, u_long rf)
a58 16
	u_char ref_freq;

	switch (rf) {
	case LM700X_REF_100:
		ref_freq = 100;
		break;
	case LM700X_REF_025:
		ref_freq = 25;
		break;
	case LM700X_REF_050:
		/* FALLTHROUGH */
	default:
		ref_freq = 50;
		break;
	}

d60 1
a60 2
	nfreq /= ref_freq;

d65 1
a65 1
lm700x_hardware_write(struct lm700x_t *lm, u_long data, u_long addon)
d95 2
a96 2
u_long
lm700x_encode_ref(u_char rf)
d98 1
a98 1
	u_long ret;
d110 2
a111 2
u_char
lm700x_decode_ref(u_long rf)
d113 1
a113 1
	u_char ret;
@


1.1.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.1.4.2
log
@Merge in trunk
@
text
@a29 21
/*
 * Sanyo LM7001 Direct PLL Frequency Synthesizer
 *    ??? See http://www.redsword.com/tjacobs/geeb/fmcard.htm
 *
 * The LM7001J and LM7001JM (used in Aztech/PackardBell cards) are PLL
 * frequency synthesizer LSIs for tuners. These LSIs are software compatible
 * with LM7000 (used in Radiotrack, Radioreveal RA300, some Mediaforte cards),
 * but do not include an IF calculation circuit.
 *
 * The FM VCO circuit includes a high-speed programmable divider that can
 * divide directly.
 *
 * Features:
 * Seven reference frequencies: 1, 5, 9, 10, 25, 50, and 100 kHz;
 * Band-switching outputs (3 bits);
 * Controller clock output (400 kHz);
 * Serial input circuit for data input (using the CE, CL and DATA pins).
 *
 * The LM7001J and LM7001JM have a 24-bit shift register.
 */

d35 2
a36 2
u_int32_t
lm700x_encode_freq(u_int32_t nfreq, u_int32_t rf)
d38 16
d55 2
a56 1
	nfreq /= lm700x_decode_ref(rf);
d61 1
a61 1
lm700x_hardware_write(struct lm700x_t *lm, u_int32_t data, u_int32_t addon)
d91 2
a92 2
u_int32_t
lm700x_encode_ref(u_int8_t rf)
d94 1
a94 1
	u_int32_t ret;
d106 2
a107 2
u_int8_t
lm700x_decode_ref(u_int32_t rf)
d109 1
a109 1
	u_int8_t ret;
@


