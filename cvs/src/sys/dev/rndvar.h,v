head	1.38;
access;
symbols
	OPENBSD_6_1:1.38.0.6
	OPENBSD_6_1_BASE:1.38
	OPENBSD_6_0:1.38.0.2
	OPENBSD_6_0_BASE:1.38
	OPENBSD_5_9:1.36.0.2
	OPENBSD_5_9_BASE:1.36
	OPENBSD_5_8:1.36.0.6
	OPENBSD_5_8_BASE:1.36
	OPENBSD_5_7:1.36.0.4
	OPENBSD_5_7_BASE:1.36
	OPENBSD_5_6:1.33.0.6
	OPENBSD_5_6_BASE:1.33
	OPENBSD_5_5:1.33.0.4
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.31.0.2
	OPENBSD_5_4_BASE:1.31
	OPENBSD_5_3:1.29.0.10
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.29.0.8
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.6
	OPENBSD_5_0:1.29.0.4
	OPENBSD_5_0_BASE:1.29
	OPENBSD_4_9:1.29.0.2
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.22.0.8
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.4
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.6
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.2
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.21.0.2
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.20.0.2
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.19.0.16
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.19.0.14
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.12
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.10
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.19.0.8
	OPENBSD_3_8_BASE:1.19
	OPENBSD_3_7:1.19.0.6
	OPENBSD_3_7_BASE:1.19
	OPENBSD_3_6:1.19.0.4
	OPENBSD_3_6_BASE:1.19
	SMP_SYNC_A:1.19
	SMP_SYNC_B:1.19
	OPENBSD_3_5:1.19.0.2
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	UBC_SYNC_A:1.17
	OPENBSD_3_3:1.17.0.4
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.2
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	UBC_SYNC_B:1.17
	UBC:1.15.0.4
	UBC_BASE:1.15
	OPENBSD_3_0:1.15.0.2
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_9:1.14.0.6
	OPENBSD_2_8:1.14.0.4
	OPENBSD_2_8_BASE:1.14
	OPENBSD_2_7:1.14.0.2
	OPENBSD_2_7_BASE:1.14
	SMP:1.11.0.12
	SMP_BASE:1.11
	kame_19991208:1.11
	OPENBSD_2_6:1.11.0.10
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.11.0.8
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.11.0.6
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.11.0.4
	OPENBSD_2_3_BASE:1.11
	OPENBSD_2_2:1.11.0.2
	OPENBSD_2_2_BASE:1.11
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.38
date	2016.05.23.15.48.59;	author deraadt;	state Exp;
branches;
next	1.37;
commitid	u827DKK0c0dFAF72;

1.37
date	2016.05.17.21.05.49;	author tedu;	state Exp;
branches;
next	1.36;
commitid	CCble4VU2BZwEtcg;

1.36
date	2015.02.07.01.19.40;	author deraadt;	state Exp;
branches;
next	1.35;
commitid	J7ySI1ZREP62T8hM;

1.35
date	2014.12.18.16.27.30;	author deraadt;	state Exp;
branches;
next	1.34;
commitid	KtbVt5DtBuq9rG7s;

1.34
date	2014.11.18.02.37.30;	author tedu;	state Exp;
branches;
next	1.33;
commitid	Z1vcFtHO8wRH0yRt;

1.33
date	2014.01.19.23.52.54;	author deraadt;	state Exp;
branches;
next	1.32;

1.32
date	2014.01.19.00.39.40;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2013.03.29.01.35.37;	author tedu;	state Exp;
branches;
next	1.30;

1.30
date	2013.03.25.14.58.28;	author markus;	state Exp;
branches;
next	1.29;

1.29
date	2011.01.08.19.45.08;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2011.01.07.23.13.48;	author tedu;	state Exp;
branches;
next	1.27;

1.27
date	2011.01.07.04.56.52;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2011.01.06.15.41.51;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2011.01.05.00.23.16;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2010.12.29.18.19.42;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2010.12.29.18.16.59;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2008.10.10.20.13.11;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2008.06.09.07.07.16;	author djm;	state Exp;
branches;
next	1.20;

1.20
date	2008.03.02.21.29.07;	author djm;	state Exp;
branches;
next	1.19;

1.19
date	2003.11.03.18.24.28;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.02.19.24.22;	author mickey;	state Exp;
branches;
next	1.17;

1.17
date	2002.05.27.01.59.58;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2002.03.14.01.26.52;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2001.09.22.19.41.13;	author mickey;	state Exp;
branches
	1.15.4.1;
next	1.14;

1.14
date	2000.04.13.13.48.30;	author mickey;	state Exp;
branches;
next	1.13;

1.13
date	2000.04.10.19.44.39;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	2000.03.19.17.38.03;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	97.06.28.07.05.23;	author deraadt;	state Exp;
branches
	1.11.12.1;
next	1.10;

1.10
date	97.06.24.02.45.01;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	97.06.22.04.58.06;	author flipk;	state Exp;
branches;
next	1.8;

1.8
date	97.06.21.04.59.37;	author flipk;	state Exp;
branches;
next	1.7;

1.7
date	97.06.17.19.42.01;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	97.06.14.21.37.09;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	97.01.05.11.08.59;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.09.06.08.36.14;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.08.11.07.31.32;	author dm;	state Exp;
branches;
next	1.2;

1.2
date	96.04.24.21.26.43;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	96.03.29.12.09.58;	author mickey;	state Exp;
branches;
next	;

1.11.12.1
date	2000.03.24.09.09.06;	author niklas;	state Exp;
branches;
next	1.11.12.2;

1.11.12.2
date	2001.05.14.22.23.03;	author niklas;	state Exp;
branches;
next	1.11.12.3;

1.11.12.3
date	2001.10.31.03.22.40;	author nate;	state Exp;
branches;
next	1.11.12.4;

1.11.12.4
date	2002.03.28.15.03.52;	author niklas;	state Exp;
branches;
next	1.11.12.5;

1.11.12.5
date	2003.03.28.00.38.10;	author niklas;	state Exp;
branches;
next	1.11.12.6;

1.11.12.6
date	2003.06.07.11.02.28;	author ho;	state Exp;
branches;
next	1.11.12.7;

1.11.12.7
date	2004.02.19.10.56.13;	author niklas;	state Exp;
branches;
next	;

1.15.4.1
date	2002.06.11.03.42.15;	author art;	state Exp;
branches;
next	;


desc
@@


1.38
log
@remove the sysctl kern.random counters, since none of the remaining
ones are capable of giving valuable works vs does-not-work evidence.
ok tedu
@
text
@/*	$OpenBSD: rndvar.h,v 1.37 2016/05/17 21:05:49 tedu Exp $	*/

/*
 * Copyright (c) 1996,2000 Michael Shalayeff.
 *
 * This software derived from one contributed by Theodore Ts'o.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef __RNDVAR_H__
#define __RNDVAR_H__

#define	RND_SRC_TRUE	0
#define	RND_SRC_TIMER	1
#define	RND_SRC_MOUSE	2
#define	RND_SRC_TTY	3
#define	RND_SRC_DISK	4
#define	RND_SRC_NET	5
#define	RND_SRC_AUDIO	6
#define	RND_SRC_VIDEO	7
#define	RND_SRC_NUM	8

#ifdef _KERNEL
#define	add_true_randomness(d)	enqueue_randomness(RND_SRC_TRUE,  (int)(d))
#define	add_timer_randomness(d)	enqueue_randomness(RND_SRC_TIMER, (int)(d))
#define	add_mouse_randomness(d)	enqueue_randomness(RND_SRC_MOUSE, (int)(d))
#define	add_tty_randomness(d)	enqueue_randomness(RND_SRC_TTY,   (int)(d))
#define	add_disk_randomness(d)	enqueue_randomness(RND_SRC_DISK,  (int)(d))
#define	add_net_randomness(d)	enqueue_randomness(RND_SRC_NET,   (int)(d))
#define	add_audio_randomness(d)	enqueue_randomness(RND_SRC_AUDIO, (int)(d))
#define	add_video_randomness(d)	enqueue_randomness(RND_SRC_VIDEO, (int)(d))

void random_start(void);

void enqueue_randomness(unsigned int, unsigned int);
void suspend_randomness(void);
void resume_randomness(char *, size_t);

#endif /* _KERNEL */

#endif /* __RNDVAR_H__ */
@


1.37
log
@Change the random event buffer from a queue to an endless ring. This way
we don't drop any events when the queue is full. They are instead mixed
into previous events.
The mixing function selected is addition instead of xor to reduce the
possibility that new values effectively erase existing ones.
Convert some types to u_int to ensure defined overflow.
ok deraadt djm
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.36 2015/02/07 01:19:40 deraadt Exp $	*/
a43 16
struct rndstats {
	quad_t rnd_total;	/* total bits of entropy generated */
	quad_t rnd_used;	/* strong data bits read so far */
	quad_t arc4_reads;	/* aRC4 data bytes read so far */
	quad_t arc4_nstirs;	/* arc4 pool stirs */

	quad_t rnd_enqs;	/* enqueue calls */
	quad_t rnd_deqs;	/* dequeue calls */
	quad_t rnd_drops;	/* queue-full drops */
	quad_t rnd_drople;	/* queue low watermark low entropy drops */

	quad_t rnd_ed[32];	/* entropy feed distribution */
	quad_t rnd_sc[RND_SRC_NUM]; /* add* calls */
	quad_t rnd_sb[RND_SRC_NUM]; /* add* bits */
};

a44 2
extern struct rndstats rndstats;

@


1.36
log
@New framework that allows hibernate to pass in entropy from it's fresh
boot.
ok mlarkin
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.35 2014/12/18 16:27:30 deraadt Exp $	*/
d74 1
a74 1
void enqueue_randomness(int, int);
@


1.35
log
@Create a suspend/resume infrastructure for the RNG.  At suspend time,
process all queued entropy and create a brand new pool to prevent
backtracking upon resume.  At resume time, process the entropy queue
(since other resume code paths which run earlier can enqueue entropy)
and force all higher to reseed.
ok reyk djm
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.34 2014/11/18 02:37:30 tedu Exp $	*/
d76 1
a76 1
void resume_randomness(void);
@


1.34
log
@move arc4random prototype to systm.h. more appropriate for most code
to include that than rdnvar.h. ok deraadt dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.33 2014/01/19 23:52:54 deraadt Exp $	*/
d75 2
@


1.33
log
@Refactor rnd startup so arc4random/arc4random_buf can create a chacha state
on first call, very early on, from boot-supplied entropy, then feed from
that.  Later when we have more subsystems ready, the main() can properly
initialize the entropy-driven model.  Lots of discussion with mikeb.
ok kettenis markus mikeb
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.32 2014/01/19 00:39:40 deraadt Exp $	*/
a74 3
void arc4random_buf(void *, size_t);
u_int32_t arc4random(void);
u_int32_t arc4random_uniform(u_int32_t);
@


1.32
log
@With the earlier initialization of the random subsystem, random_hostseed()
is no longer providing significant value.  The random subsystem is in
pretty good state, and moments later userland will feed the dmesg.
ok jsing
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.31 2013/03/29 01:35:37 tedu Exp $	*/
a71 1
void random_init(void);
@


1.31
log
@remove some of the unused fields from rndstats and stop printing zeroes.
print labels before stats so people can tell what's what.
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.30 2013/03/25 14:58:28 markus Exp $	*/
a73 1
void random_hostseed(void);
@


1.30
log
@reseed the random pool with 'dmesg' when more devices are attached
from hshoexer@@; ok tedu@@, "looks good" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.29 2011/01/08 19:45:08 deraadt Exp $	*/
a46 1
	quad_t rnd_reads;	/* strong read calls -- unused */
a48 1
	quad_t arc4_stirs;	/* arc4 pool stirs (bits used) -- unused */
a49 3
	quad_t rnd_pad[5];

	quad_t rnd_waits;	/* sleeps for data -- unused */
@


1.29
log
@split randomattach into random_init() and random_start(), so that we
can make attempts to load 'entropy' into the RC4.
ok miod ariane
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.28 2011/01/07 23:13:48 tedu Exp $	*/
d79 1
@


1.28
log
@some minor improvements to rnd.
1.  only support pool words == 2048.
2.  define the amount of key we use.
3.  define the amount of rc4 we skip.
4.  use arc4random_buf instead of reimplementing inline.
5.  bzero some more "secrets".
ok deraadt djm
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.27 2011/01/07 04:56:52 deraadt Exp $	*/
d76 3
@


1.27
log
@substantial rewrite.  put a very thin mutex at the entropy-collection
side so that entropy events can come in from any kernel context.  place
a 2nd very thin mutex at the call-down path as well, so that any context can
request random data.  in the middle, meet with a bcopy that has no mutex,
but copying unlocked data is actually a benefit.
move the pool->MD5->RC4init sequence into a workq driven from a timeout,
so that we can do all the heavy work without any mutex held or IPL; only
grab the 2nd mutex to swap to a new RC4 state. (this workq design from tedu)
ok dlg tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.26 2011/01/06 15:41:51 deraadt Exp $	*/
a32 2

#define POOLWORDS 2048	/* Power of 2 - note that this is 32-bit words */
@


1.26
log
@make all /dev/*random nodes respond; in fact, don't even worry about
the minor number at all.  The chances of an application ignoring the
error on /dev/random are *greater* than the risk of an application
getting bad data from it.
ok dlg tedu kjell
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.25 2011/01/05 00:23:16 deraadt Exp $	*/
d52 1
a52 1
	quad_t arc4_stirs;	/* arc4 pool stirs (bits used) */
@


1.25
log
@mark unused fields in struct rndstats
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.24 2010/12/29 18:19:42 deraadt Exp $	*/
a34 6

#define	RND_RND		0	/* real randomness like nuclear chips */
#define	RND_SRND	1	/* strong random source */
#define	RND_URND	2	/* less strong random source */
#define	RND_ARND	3	/* aRC4 based random number generator */
#define	RND_NODEV	4	/* First invalid minor device number */
@


1.24
log
@kill RND_ARND_OLD, and decrease RND_NODEV to account for it; ok djm
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.23 2010/12/29 18:16:59 deraadt Exp $	*/
d55 1
a55 1
	quad_t rnd_reads;	/* strong read calls */
d62 1
a62 1
	quad_t rnd_waits;	/* sleeps for data */
@


1.23
log
@Remove the get_random_bytes() API.
ok kjell djm
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.22 2008/10/10 20:13:11 deraadt Exp $	*/
d39 2
a40 3
#define RND_ARND	3	/* aRC4 based random number generator */
#define RND_ARND_OLD	4	/* old: delete when we reach OpenBSD 4.6 */
#define RND_NODEV	5	/* First invalid minor device number */
@


1.22
log
@minor 3 was /dev/prandom, which used random().  make that use the
arandom code, just like minor 4.  in fact, make them act exactly
the same.
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.21 2008/06/09 07:07:16 djm Exp $	*/
a86 1
void get_random_bytes(void *, size_t);
@


1.21
log
@rename arc4random_bytes => arc4random_buf to match libc's nicer name;
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.20 2008/03/02 21:29:07 djm Exp $	*/
d39 2
a40 2
#define	RND_PRND	3	/* pseudo random source */
#define RND_ARND	4	/* aRC4 based random number generator */
@


1.20
log
@Add a arc4random_uniform() that returns a uniformly distributed number
in the range 0 <= x < upper_bound

Please use this new API instead of "arc4random() % upper_bound", as it
avoids the "modulo bias" that favours small results when upper_bound is
not a power of two.

feedback deraadt@@ mcbride@@; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.19 2003/11/03 18:24:28 tedu Exp $	*/
d34 1
a34 1
#define POOLWORDS 1024	/* Power of 2 - note that this is 32-bit words */
d88 1
a88 1
void arc4random_bytes(void *, size_t);
@


1.19
log
@add arc4random_bytes.  input ok mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.18 2003/06/02 19:24:22 mickey Exp $	*/
d90 1
@


1.18
log
@kill the caluses three and four on some of my code
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.17 2002/05/27 01:59:58 deraadt Exp $	*/
d88 1
@


1.17
log
@kill unused arc4random_8() API
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.16 2002/03/14 01:26:52 millert Exp $	*/
a15 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Theodore Ts'o.
 * 4. Neither the name of the University nor of the Laboratory may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
@


1.16
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.15 2001/09/22 19:41:13 mickey Exp $	*/
a94 1
int arc4random_8(void);
@


1.15
log
@new type for video i/o entropy
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.14 2000/04/13 13:48:30 mickey Exp $	*/
d92 4
a95 4
void enqueue_randomness __P((int, int));
void get_random_bytes __P((void *, size_t));
u_int32_t arc4random __P((void));
int arc4random_8 __P((void));
@


1.15.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.15 2001/09/22 19:41:13 mickey Exp $	*/
d92 4
a95 3
void enqueue_randomness(int, int);
void get_random_bytes(void *, size_t);
u_int32_t arc4random(void);
@


1.14
log
@better has when adding entropy to the pool.
bigger pool (4k).
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.13 2000/04/10 19:44:39 mickey Exp $	*/
d56 1
d90 1
@


1.13
log
@add support for more random sources.
make it easy to add more in the future.
make extract_entropy() faster.
more accurate stats.
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.12 2000/03/19 17:38:03 mickey Exp $	*/
d4 1
a4 1
 * Copyright (c) 1996 Michael Shalayeff.
d40 1
a40 1
#define POOLWORDS 64	/* Power of 2 - note that this is 32-bit words */
@


1.12
log
@faster log2, more stats, lazy random stirring, more stats, less debug, help and ok from provos@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.11 1997/06/28 07:05:23 deraadt Exp $	*/
d5 1
a5 1
 * 
d40 1
a40 1
#define POOLWORDS 128    /* Power of 2 - note that this is 32-bit words */
d49 9
d59 18
a76 22
	u_long rnd_total; /* total bits of entropy generated */
	u_long rnd_used;  /* strong data bits read so far */
	u_long arc4_reads;/* aRC4 data bytes read so far */

	u_long rnd_timer; /* timer calls */
	u_long rnd_mouse; /* mouse calls */
	u_long rnd_tty;   /* tty calls */
	u_long rnd_disk;  /* block devices calls */
	u_long rnd_net;   /* net calls */

	u_long rnd_reads; /* strong read calls */
	u_long rnd_waits; /* sleep for data */
	u_long rnd_enqs;  /* enqueue calls */
	u_long rnd_deqs;  /* dequeue calls */
	u_long rnd_drops; /* queue-full drops */
	u_long rnd_drople;/* queue low watermark low entropy drops */

	u_long rnd_asleep;/* sleeping for the data */
	u_long rnd_queued;/* queued for processing */
	u_long arc4_stirs;/* arc4 pool stirs */

	u_long rnd_ed[32];/* entropy feed distribution */
d82 12
a93 8
extern void add_mouse_randomness __P((u_int32_t));
extern void add_net_randomness __P((int));
extern void add_disk_randomness __P((u_int32_t));
extern void add_tty_randomness __P((int));

extern void get_random_bytes __P((void *, size_t));
extern u_int32_t arc4random __P((void));
extern int arc4random_8 __P((void));
@


1.11
log
@fix the types
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.10 1997/06/24 02:45:01 mickey Exp $	*/
d50 20
a69 16
	u_int32_t rnd_total; /* total bits of entropy generated */
	u_int32_t rnd_used;  /* strong data bits read so far */
	u_int32_t arc4_reads;/* aRC4 data bytes read so far */

	u_int32_t rnd_timer; /* timer calls */
	u_int32_t rnd_mouse; /* mouse calls */
	u_int32_t rnd_tty;   /* tty calls */
	u_int32_t rnd_disk;  /* block devices calls */
	u_int32_t rnd_net;   /* net calls */

	u_int32_t rnd_reads; /* strong read calls */
	u_int32_t rnd_waits; /* sleep for data */
	u_int32_t rnd_enqs;  /* enqueue calls */
	u_int32_t rnd_deqs;  /* dequeue calls */
	u_int32_t rnd_drops; /* queue-full drops */
	u_int32_t rnd_drople;/* queue low watermark low entropy drops */
d71 1
a71 2
	u_int32_t rnd_asleep; /* sleeping for the data */
	u_int32_t rnd_queued; /* queued for processing */
d84 1
@


1.11.12.1
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 16
a65 20
	u_long rnd_total; /* total bits of entropy generated */
	u_long rnd_used;  /* strong data bits read so far */
	u_long arc4_reads;/* aRC4 data bytes read so far */

	u_long rnd_timer; /* timer calls */
	u_long rnd_mouse; /* mouse calls */
	u_long rnd_tty;   /* tty calls */
	u_long rnd_disk;  /* block devices calls */
	u_long rnd_net;   /* net calls */

	u_long rnd_reads; /* strong read calls */
	u_long rnd_waits; /* sleep for data */
	u_long rnd_enqs;  /* enqueue calls */
	u_long rnd_deqs;  /* dequeue calls */
	u_long rnd_drops; /* queue-full drops */
	u_long rnd_drople;/* queue low watermark low entropy drops */

	u_long rnd_asleep;/* sleeping for the data */
	u_long rnd_queued;/* queued for processing */
	u_long arc4_stirs;/* arc4 pool stirs */
d67 2
a68 1
	u_long rnd_ed[32];/* entropy feed distribution */
a80 1
extern int arc4random_8 __P((void));
@


1.11.12.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.14 2000/04/13 13:48:30 mickey Exp $	*/
d4 2
a5 2
 * Copyright (c) 1996,2000 Michael Shalayeff.
 *
d40 1
a40 1
#define POOLWORDS 1024	/* Power of 2 - note that this is 32-bit words */
d49 21
a69 8
#define	RND_SRC_TRUE	0
#define	RND_SRC_TIMER	1
#define	RND_SRC_MOUSE	2
#define	RND_SRC_TTY	3
#define	RND_SRC_DISK	4
#define	RND_SRC_NET	5
#define	RND_SRC_AUDIO	6
#define	RND_SRC_NUM	8
d71 1
a71 19
struct rndstats {
	quad_t rnd_total;	/* total bits of entropy generated */
	quad_t rnd_used;	/* strong data bits read so far */
	quad_t rnd_reads;	/* strong read calls */
	quad_t arc4_reads;	/* aRC4 data bytes read so far */
	quad_t arc4_nstirs;	/* arc4 pool stirs */
	quad_t arc4_stirs;	/* arc4 pool stirs (bits used) */

	quad_t rnd_pad[5];

	quad_t rnd_waits;	/* sleeps for data */
	quad_t rnd_enqs;	/* enqueue calls */
	quad_t rnd_deqs;	/* dequeue calls */
	quad_t rnd_drops;	/* queue-full drops */
	quad_t rnd_drople;	/* queue low watermark low entropy drops */

	quad_t rnd_ed[32];	/* entropy feed distribution */
	quad_t rnd_sc[RND_SRC_NUM]; /* add* calls */
	quad_t rnd_sb[RND_SRC_NUM]; /* add* bits */
d77 8
a84 12
#define	add_true_randomness(d)	enqueue_randomness(RND_SRC_TRUE,  (int)(d))
#define	add_timer_randomness(d)	enqueue_randomness(RND_SRC_TIMER, (int)(d))
#define	add_mouse_randomness(d)	enqueue_randomness(RND_SRC_MOUSE, (int)(d))
#define	add_tty_randomness(d)	enqueue_randomness(RND_SRC_TTY,   (int)(d))
#define	add_disk_randomness(d)	enqueue_randomness(RND_SRC_DISK,  (int)(d))
#define	add_net_randomness(d)	enqueue_randomness(RND_SRC_NET,   (int)(d))
#define	add_audio_randomness(d)	enqueue_randomness(RND_SRC_AUDIO, (int)(d))

void enqueue_randomness __P((int, int));
void get_random_bytes __P((void *, size_t));
u_int32_t arc4random __P((void));
int arc4random_8 __P((void));
@


1.11.12.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.11.12.2 2001/05/14 22:23:03 niklas Exp $	*/
a55 1
#define	RND_SRC_VIDEO	7
a88 1
#define	add_video_randomness(d)	enqueue_randomness(RND_SRC_VIDEO, (int)(d))
@


1.11.12.4
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d92 4
a95 4
void enqueue_randomness(int, int);
void get_random_bytes(void *, size_t);
u_int32_t arc4random(void);
int arc4random_8(void);
@


1.11.12.5
log
@Sync the SMP branch with 3.3
@
text
@d95 1
@


1.11.12.6
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.11.12.5 2003/03/28 00:38:10 niklas Exp $	*/
d16 6
@


1.11.12.7
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a87 1
void arc4random_bytes(void *, size_t);
@


1.10
log
@more accounting!
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.7 1997/06/17 19:42:01 mickey Exp $	*/
d50 16
a65 16
	u_long rnd_total; /* total bits of entropy generated */
	u_long rnd_used;  /* strong data bits read so far */
	u_long arc4_reads;/* aRC4 data bytes read so far */

	u_long rnd_timer; /* timer calls */
	u_long rnd_mouse; /* mouse calls */
	u_long rnd_tty;   /* tty calls */
	u_long rnd_disk;  /* block devices calls */
	u_long rnd_net;   /* net calls */

	u_long rnd_reads; /* strong read calls */
	u_long rnd_waits; /* sleep for data */
	u_long rnd_enqs;  /* enqueue calls */
	u_long rnd_deqs;  /* dequeue calls */
	u_long rnd_drops; /* queue-full drops */
	u_long rnd_drople;/* queue low watermark low entropy drops */
d67 2
a68 2
	u_int rnd_asleep; /* sleeping for the data */
	u_int rnd_queued; /* queued for processing */
@


1.9
log
@wasn't a race after all. properly initialize event_q pointers so the
last one doesn't point off the end.
@
text
@d66 3
@


1.8
log
@revert, there's a nasty race condition here.
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.5 1997/01/05 11:08:59 niklas Exp $	*/
d49 19
d69 1
@


1.7
log
@count slow queue low entropy drops
bigger queue
use queue overflows for arc4_stir()
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.6 1997/06/14 21:37:09 mickey Exp $	*/
a48 19
struct rndstats {
	u_long rnd_total; /* total bits of entropy generated */
	u_long rnd_used;  /* strong data bits read so far */
	u_long arc4_reads;/* aRC4 data bytes read so far */

	u_long rnd_timer; /* timer calls */
	u_long rnd_mouse; /* mouse calls */
	u_long rnd_tty;   /* tty calls */
	u_long rnd_disk;  /* block devices calls */
	u_long rnd_net;   /* net calls */

	u_long rnd_reads; /* strong read calls */
	u_long rnd_waits; /* sleep for data */
	u_long rnd_enqs;  /* enqueue calls */
	u_long rnd_deqs;  /* dequeue calls */
	u_long rnd_drops; /* queue-full drops */
	u_long rnd_drople;/* queue low watermark low entropy drops */
};

a49 1
extern struct rndstats rndstats;
@


1.6
log
@split the treatment of the random events
event_q by flipk@@
spl fix by deraadt@@
gother statistics about whole processing
use 'sysctl kern.random' to view what had happened
also fix wrong vm.psstrings description
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.5 1997/01/05 11:08:59 niklas Exp $	*/
d65 1
@


1.5
log
@Remove lots of timer_state structs as they just ate memory and only a few was
ever used.  Now a single state is kept for net, tty and disk events resp.
Also, call the randomness from disk_unbusy instead of biodone, as biodone
gets a lot of virtual events (from virtual filesystems etc), and as a bonus:
feed xfer time and size into the entropy pool too.
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.4 1996/09/06 08:36:14 mickey Exp $	*/
d49 18
d68 1
@


1.4
log
@cleanup and sync w/ latest Linux source.
remove keyboard randomness entry point.
make Free ppl happy, remove suspicious piece.
missed: SHA neede in libkern, why not to put aRC4 there too?
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.3 1996/08/11 07:31:32 dm Exp $	*/
d53 2
a54 2
extern void add_blkdev_randomness __P((dev_t));
extern void add_tty_randomness __P((dev_t, int));
@


1.3
log
@Increased entropy through decreased typos.
@
text
@d1 1
a1 1
/*	$OpenBSD: rndvar.h,v 1.1 1996/03/29 12:09:58 mickey Exp $	*/
d57 1
a57 1
extern unsigned long arc4random __P((void));
@


1.2
log
@Supply randomness source for the rnd device.
@
text
@d46 2
d57 1
@


1.1
log
@The random data source driver itself.
Initial commit.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a48 1
extern void add_keyboard_randomness __P((u_char));
d52 1
@
