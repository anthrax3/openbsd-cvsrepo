head	1.26;
access;
symbols
	OPENBSD_6_2_BASE:1.26
	OPENBSD_6_1:1.26.0.4
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.25.0.8
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.25.0.4
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.24.0.2
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.24.0.4
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.23.0.4
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.21.0.2
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.20.0.8
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.6
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.4
	OPENBSD_5_0:1.20.0.2
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.19.0.2
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.16.0.8
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.4
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.2
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.15.0.2
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.26
date	2016.11.06.12.58.01;	author mpi;	state Exp;
branches;
next	1.25;
commitid	xlY19nmD0cBL53l1;

1.25
date	2015.03.14.03.38.50;	author jsg;	state Exp;
branches;
next	1.24;
commitid	p4LJxGKbi0BU2cG6;

1.24
date	2014.07.12.20.26.33;	author mpi;	state Exp;
branches;
next	1.23;
commitid	PSjXNz8dGohZ6ZSK;

1.23
date	2013.11.15.08.25.31;	author pirofti;	state Exp;
branches;
next	1.22;

1.22
date	2013.11.07.12.07.18;	author pirofti;	state Exp;
branches;
next	1.21;

1.21
date	2013.04.15.09.23.02;	author mglocker;	state Exp;
branches;
next	1.20;

1.20
date	2011.07.03.15.47.17;	author matthew;	state Exp;
branches;
next	1.19;

1.19
date	2011.01.25.20.03.36;	author jakemsr;	state Exp;
branches;
next	1.18;

1.18
date	2010.09.24.08.33.59;	author yuo;	state Exp;
branches;
next	1.17;

1.17
date	2009.10.13.19.33.19;	author pirofti;	state Exp;
branches;
next	1.16;

1.16
date	2008.06.26.05.42.18;	author ray;	state Exp;
branches;
next	1.15;

1.15
date	2007.10.22.19.40.19;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2007.10.11.18.33.15;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2007.09.02.04.20.25;	author jsg;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.14.10.11.16;	author mbalmer;	state Exp;
branches;
next	1.11;

1.11
date	2007.06.13.06.25.03;	author mbalmer;	state Exp;
branches;
next	1.10;

1.10
date	2007.06.12.16.26.36;	author mbalmer;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.10.14.49.01;	author mbalmer;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.10.10.53.48;	author mbalmer;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.06.19.25.49;	author mk;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.05.08.43.55;	author mbalmer;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.27.04.00.25;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.23.06.27.11;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.16.04.01.12;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.01.05.36.48;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.17.23.50.33;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Avoid calling usbd_set_config_no() in *_attach() and let the stack do
it instead.

If anything bad happen due to a malformed descriptor it makes no sense
to try to attach a driver, and bail before probing.

This is similar to the change to avoid calling usbd_set_config_index().
@
text
@/*	$OpenBSD: uipaq.c,v 1.25 2015/03/14 03:38:50 jsg Exp $	*/

/*
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net) at
 * Carlstedt Research & Technology.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * iPAQ driver
 * 
 * 19 July 2003:	Incorporated changes suggested by Sam Lawrance from
 * 			the uppc module
 *
 *
 * Contact isis@@cs.umd.edu if you have any questions/comments about this driver
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/tty.h>

#include <dev/usb/usb.h>

#include <dev/usb/usbcdc.h>	/*UCDC_* stuff */

#include <dev/usb/usbdi.h>
#include <dev/usb/usbdi_util.h>
#include <dev/usb/usbdevs.h>

#include <dev/usb/ucomvar.h>

#ifdef UIPAQ_DEBUG
#define DPRINTF(x)	if (uipaqdebug) printf x
#define DPRINTFN(n,x)	if (uipaqdebug>(n)) printf x
int uipaqdebug = 0;
#else
#define DPRINTF(x)
#define DPRINTFN(n,x)
#endif

#define UIPAQ_CONFIG_NO		1
#define UIPAQ_IFACE_INDEX	0

#define UIPAQIBUFSIZE 1024
#define UIPAQOBUFSIZE 1024

struct uipaq_softc {
	struct device		 sc_dev;	/* base device */
	struct usbd_device	*sc_udev;	/* device */
	struct usbd_interface	*sc_iface;	/* interface */

	struct device		*sc_subdev;	/* ucom uses that */
	u_int16_t		 sc_lcr;	/* state for DTR/RTS */

	u_int16_t		 sc_flags;
};

/* Callback routines */
void	uipaq_set(void *, int, int, int);


/* Support routines. */
/* based on uppc module by Sam Lawrance */
void	uipaq_dtr(struct uipaq_softc *sc, int onoff);
void	uipaq_rts(struct uipaq_softc *sc, int onoff);
void	uipaq_break(struct uipaq_softc* sc, int onoff);


struct ucom_methods uipaq_methods = {
	NULL,
	uipaq_set,
	NULL,
	NULL,
	NULL,	/*open*/
	NULL,	/*close*/
	NULL,
	NULL
};

struct uipaq_type {
	struct usb_devno	uv_dev;
	u_int16_t		uv_flags;
};

static const struct uipaq_type uipaq_devs[] = {
	{{ USB_VENDOR_ASUS, USB_PRODUCT_ASUS_MYPAL_A730} , 0},
	{{ USB_VENDOR_CASIO, USB_PRODUCT_CASIO_BE300} , 0},
	{{ USB_VENDOR_COMPAQ, USB_PRODUCT_COMPAQ_IPAQPOCKETPC} , 0},
	{{ USB_VENDOR_HTC, USB_PRODUCT_HTC_SMARTPHONE }, 0},
	{{ USB_VENDOR_HP, USB_PRODUCT_HP_2215 }, 0 },
	{{ USB_VENDOR_HP, USB_PRODUCT_HP_568J }, 0},
	{{ USB_VENDOR_HTC, USB_PRODUCT_HTC_PPC6700MODEM }, 0}
};

#define uipaq_lookup(v, p) ((struct uipaq_type *)usb_lookup(uipaq_devs, v, p))

int uipaq_match(struct device *, void *, void *);
void uipaq_attach(struct device *, struct device *, void *);
int uipaq_detach(struct device *, int);

struct cfdriver uipaq_cd = {
	NULL, "uipaq", DV_DULL
};

const struct cfattach uipaq_ca = {
	sizeof(struct uipaq_softc), uipaq_match, uipaq_attach, uipaq_detach
};

int
uipaq_match(struct device *parent, void *match, void *aux)
{
	struct usb_attach_arg *uaa = aux;

	if (uaa->iface == NULL || uaa->configno != UIPAQ_CONFIG_NO)
		return (UMATCH_NONE);

	DPRINTFN(20,("uipaq: vendor=0x%x, product=0x%x\n",
	    uaa->vendor, uaa->product));

	return (uipaq_lookup(uaa->vendor, uaa->product) != NULL ?
	    UMATCH_VENDOR_PRODUCT : UMATCH_NONE);
}

void
uipaq_attach(struct device *parent, struct device *self, void *aux)
{
	struct uipaq_softc *sc = (struct uipaq_softc *)self;
	struct usb_attach_arg *uaa = aux;
	struct usbd_device *dev = uaa->device;
	struct usbd_interface *iface;
	usb_interface_descriptor_t *id;
	usb_endpoint_descriptor_t *ed;
	char *devname = sc->sc_dev.dv_xname;
	int i;
	usbd_status err;
	struct ucom_attach_args uca;

	DPRINTFN(10,("\nuipaq_attach: sc=%p\n", sc));

	err = usbd_device2interface_handle(dev, UIPAQ_IFACE_INDEX, &iface);
	if (err) {
		printf(": failed to get interface, err=%s\n",
		    usbd_errstr(err));
		goto bad;
	}

	sc->sc_flags = uipaq_lookup(uaa->vendor, uaa->product)->uv_flags;

	id = usbd_get_interface_descriptor(iface);

	sc->sc_udev = dev;
	sc->sc_iface = iface;

	uca.ibufsize = UIPAQIBUFSIZE;
	uca.obufsize = UIPAQOBUFSIZE;
	uca.ibufsizepad = UIPAQIBUFSIZE;
	uca.opkthdrlen = 0;
	uca.device = dev;
	uca.iface = iface;
	uca.methods = &uipaq_methods;
	uca.arg = sc;
	uca.portno = UCOM_UNK_PORTNO;
	uca.info = "Generic";

/*	err = uipaq_init(sc);
	if (err) {
		printf("%s: init failed, %s\n", sc->sc_dev.dv_xname,
		    usbd_errstr(err));
		goto bad;
	}*/

	uca.bulkin = uca.bulkout = -1;
	for (i=0; i<id->bNumEndpoints; i++) {
		ed = usbd_interface2endpoint_descriptor(iface, i);
		if (ed == NULL) {
			printf("%s: no endpoint descriptor for %d\n",
					devname,i);
			goto bad;
		}
		if (UE_GET_DIR(ed->bEndpointAddress) == UE_DIR_IN &&
		    (ed->bmAttributes & UE_XFERTYPE) == UE_BULK) {
			uca.bulkin = ed->bEndpointAddress;
		} else if (UE_GET_DIR(ed->bEndpointAddress) == UE_DIR_OUT &&
		    (ed->bmAttributes & UE_XFERTYPE) == UE_BULK) {
			uca.bulkout = ed->bEndpointAddress;
		}
	}
	if (uca.bulkin != -1 && uca.bulkout != -1)
		sc->sc_subdev = config_found_sm(self, &uca,
		    ucomprint, ucomsubmatch);
	else
		printf("%s: no proper endpoints found (%d,%d) \n",
		    devname, uca.bulkin, uca.bulkout);

	return;

bad:
	DPRINTF(("uipaq_attach: ATTACH ERROR\n"));
	usbd_deactivate(sc->sc_udev);
}


void
uipaq_dtr(struct uipaq_softc* sc, int onoff)
{
	usb_device_request_t req;
	usbd_status err;
	int retries = 3;

	DPRINTF(("%s: uipaq_dtr: onoff=%x\n", sc->sc_dev.dv_xname, onoff));

	/* Avoid sending unnecessary requests */
	if (onoff && (sc->sc_lcr & UCDC_LINE_DTR))
		return;
	if (!onoff && !(sc->sc_lcr & UCDC_LINE_DTR))
		return;

	/* Other parameters depend on reg */
	req.bmRequestType = UT_WRITE_CLASS_INTERFACE;
	req.bRequest = UCDC_SET_CONTROL_LINE_STATE;
	sc->sc_lcr = onoff ? sc->sc_lcr | UCDC_LINE_DTR : sc->sc_lcr & ~UCDC_LINE_DTR;
	USETW(req.wValue, sc->sc_lcr);
	USETW(req.wIndex, 0x0);
	USETW(req.wLength, 0);

	/* Fire off the request a few times if necessary */
	while (retries) {
		err = usbd_do_request(sc->sc_udev, &req, NULL);
		if (!err)
			break;
		retries--;
	}
}


void
uipaq_rts(struct uipaq_softc* sc, int onoff)
{
	usb_device_request_t req;
	usbd_status err;
	int retries = 3;

	DPRINTF(("%s: uipaq_rts: onoff=%x\n", sc->sc_dev.dv_xname, onoff));

	/* Avoid sending unnecessary requests */
	if (onoff && (sc->sc_lcr & UCDC_LINE_RTS)) return;
	if (!onoff && !(sc->sc_lcr & UCDC_LINE_RTS)) return;

	req.bmRequestType = UT_WRITE_CLASS_INTERFACE;
	req.bRequest = UCDC_SET_CONTROL_LINE_STATE;
	sc->sc_lcr = onoff ? sc->sc_lcr | UCDC_LINE_RTS : sc->sc_lcr & ~UCDC_LINE_RTS;
	USETW(req.wValue, sc->sc_lcr);
	USETW(req.wIndex, 0x0);
	USETW(req.wLength, 0);

	while (retries) {
		err = usbd_do_request(sc->sc_udev, &req, NULL);
		if (!err)
			break;
		retries--;
	}
}


void
uipaq_break(struct uipaq_softc* sc, int onoff)
{
	usb_device_request_t req;
	usbd_status err;
	int retries = 3;

	DPRINTF(("%s: uipaq_break: onoff=%x\n", sc->sc_dev.dv_xname, onoff));

	req.bmRequestType = UT_WRITE_CLASS_INTERFACE;
	req.bRequest = UCDC_SEND_BREAK;

	USETW(req.wValue, onoff ? UCDC_BREAK_ON : UCDC_BREAK_OFF);
	USETW(req.wIndex, 0x0);
	USETW(req.wLength, 0);

	while (retries) {
		err = usbd_do_request(sc->sc_udev, &req, NULL);
		if (!err)
			break;
		retries--;
	}
}


void
uipaq_set(void *addr, int portno, int reg, int onoff)
{
	struct uipaq_softc* sc = addr;

	switch (reg) {
	case UCOM_SET_DTR:
		uipaq_dtr(addr, onoff);
		break;
	case UCOM_SET_RTS:
		uipaq_rts(addr, onoff);
		break;
	case UCOM_SET_BREAK:
		uipaq_break(addr, onoff);
		break;
	default:
		printf("%s: unhandled set request: reg=%x onoff=%x\n",
		    sc->sc_dev.dv_xname, reg, onoff);
		return;
	}
}


int
uipaq_detach(struct device *self, int flags)
{
	struct uipaq_softc *sc = (struct uipaq_softc *)self;
	int rv = 0;

	DPRINTF(("uipaq_detach: sc=%p flags=%d\n", sc, flags));
	if (sc->sc_subdev != NULL) {
		rv |= config_detach(sc->sc_subdev, flags);
		sc->sc_subdev = NULL;
	}

	return (rv);
}

@


1.25
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.24 2014/07/12 20:26:33 mpi Exp $	*/
d142 1
a142 1
	if (uaa->iface != NULL)
a166 8

	/* Move the device into the configured state. */
	err = usbd_set_config_no(dev, UIPAQ_CONFIG_NO, 1);
	if (err) {
		printf(": failed to set configuration, err=%s\n",
		    usbd_errstr(err));
		goto bad;
	}
@


1.24
log
@tedu another bunch of DVACT_DEACTIVATE handlers that do nothing but set
the 'dying' flag.
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.23 2013/11/15 08:25:31 pirofti Exp $	*/
a50 1
#include <dev/usb/usbhid.h>
@


1.23
log
@Sort-out activate functionality for ucom(4) and it's parents.


The child should not have to call the parent for deactivation.
The parent should handle it.
So kill the activate routine in ucom(4) and adapt the parents
to no longer call it.


Also remove sc_dying in ucom(4) and use usbd_is_dying() instead.

Okay mpi@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.22 2013/11/07 12:07:18 pirofti Exp $	*/
d126 10
a135 15
int uipaq_match(struct device *, void *, void *); 
void uipaq_attach(struct device *, struct device *, void *); 
int uipaq_detach(struct device *, int); 
int uipaq_activate(struct device *, int); 

struct cfdriver uipaq_cd = { 
	NULL, "uipaq", DV_DULL 
}; 

const struct cfattach uipaq_ca = { 
	sizeof(struct uipaq_softc), 
	uipaq_match, 
	uipaq_attach, 
	uipaq_detach, 
	uipaq_activate, 
a348 13

int
uipaq_activate(struct device *self, int act)
{
	struct uipaq_softc *sc = (struct uipaq_softc *)self;

	switch (act) {
	case DVACT_DEACTIVATE:
		usbd_deactivate(sc->sc_udev);
		break;
	}
	return (0);
}
@


1.22
log
@Replace sc_dying in favour of usbd_is_dying() and usbd_deactivate().

Okay mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.21 2013/04/15 09:23:02 mglocker Exp $	*/
a358 1
	int rv = 0;
a361 2
		if (sc->sc_subdev != NULL)
			rv = config_deactivate(sc->sc_subdev);
d365 1
a365 1
	return (rv);
@


1.21
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.20 2011/07/03 15:47:17 matthew Exp $	*/
a84 2

	u_char			 sc_dying;
d241 1
a241 1
	sc->sc_dying = 1;
d365 1
a365 1
		sc->sc_dying = 1;
@


1.20
log
@Remove config_activate() and DVACT_ACTIVATE.  PCMCIA's the only thing
that's ever used it, and it's long since been changed to use
DVACT_{QUIESCE,SUSPEND,RESUME} instead.

ok deraadt@@, dlg@@; miod@@ also agreed with this idea when I brought it
up a few weeks ago
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.19 2011/01/25 20:03:36 jakemsr Exp $	*/
d78 2
a79 2
	usbd_device_handle	 sc_udev;	/* device */
	usbd_interface_handle	 sc_iface;	/* interface */
d165 2
a166 2
	usbd_device_handle dev = uaa->device;
	usbd_interface_handle iface;
@


1.19
log
@garbage collect "usb events".  without /dev/usb there is no way to access
them from userland, and nothing in the kernel uses them.

ok krw@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.18 2010/09/24 08:33:59 yuo Exp $	*/
a363 3
	case DVACT_ACTIVATE:
		break;

@


1.18
log
@remove dying flag in detach() function.
The dying flag will be set in activate()/DEACTIVATE.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.17 2009/10/13 19:33:19 pirofti Exp $	*/
a215 3
	usbd_add_drv_event(USB_EVENT_DRIVER_ATTACH, sc->sc_udev,
	    &sc->sc_dev);

a386 3

	usbd_add_drv_event(USB_EVENT_DRIVER_DETACH, sc->sc_udev,
	    &sc->sc_dev);
@


1.17
log
@Get rid of devact enum, substitute it with an int and coresponding defines.

This is needed for the addition of further suspend/resume actions.

Okay deraadt@@, marco@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.16 2008/06/26 05:42:18 ray Exp $	*/
a385 1
	sc->sc_dying = 1;
@


1.16
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.15 2007/10/22 19:40:19 deraadt Exp $	*/
d131 1
a131 1
int uipaq_activate(struct device *, enum devact); 
d361 1
a361 1
uipaq_activate(struct device *self, enum devact act)
@


1.15
log
@HTC smartphone
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.14 2007/10/11 18:33:15 deraadt Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.14
log
@treat usb vendor/product names as a locator, and have usbd_print handle it,
so that it shows up before the :.  as a result, all the usb devices do not
need to have name printing code anymore.  all this now works and prints
nicely because usbd_probe_and_attach() is serialized.  ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.13 2007/09/02 04:20:25 jsg Exp $	*/
d127 1
@


1.13
log
@Add support for Alltel UTStarcom PPC6700.
Tested by Sam Fourman Jr. <sfourman@@gmail.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.12 2007/06/14 10:11:16 mbalmer Exp $	*/
a174 1
	char *devinfop;
d185 2
a186 2
		printf("\n%s: failed to set configuration, err=%s\n",
		    devname, usbd_errstr(err));
d192 2
a193 2
		printf("\n%s: failed to get interface, err=%s\n",
		    devname, usbd_errstr(err));
a195 4

	devinfop = usbd_devinfo_alloc(dev, 0);
	printf("\n%s: %s\n", devname, devinfop);
	usbd_devinfo_free(devinfop);
@


1.12
log
@Remove the definition and usage of the USB_DECLARE_DRIVER_CLASS and
USB_DECLARE_DRIVER macros.

No binary change.

ok dlg.
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.11 2007/06/13 06:25:03 mbalmer Exp $	*/
d124 3
d129 1
a129 3
	{{ USB_VENDOR_COMPAQ, USB_PRODUCT_COMPAQ_IPAQPOCKETPC} , 0},
	{{ USB_VENDOR_CASIO, USB_PRODUCT_CASIO_BE300} , 0},
	{{ USB_VENDOR_ASUS, USB_PRODUCT_ASUS_MYPAL_A730} , 0}
@


1.11
log
@Apply some KNF after the recent removal of macros and type definitions.

No binary change.

ok ray.
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.10 2007/06/12 16:26:36 mbalmer Exp $	*/
d133 16
a148 1
USB_DECLARE_DRIVER(uipaq);
@


1.10
log
@Remove the definition and use of the device_ptr_t which was a struct device *.

No binary change.

ok mk.
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.9 2007/06/10 14:49:01 mbalmer Exp $	*/
d84 3
a86 3
	struct device		sc_dev;		/* base device */
	usbd_device_handle	sc_udev;	/* device */
	usbd_interface_handle	sc_iface;	/* interface */
d88 2
a89 2
	struct device *		sc_subdev;	/* ucom uses that */
	u_int16_t		sc_lcr;		/* state for DTR/RTS */
d91 1
a91 1
	u_int16_t		sc_flags;
d93 1
a93 1
	u_char			sc_dying;
@


1.9
log
@Remove the definition and use of the USBDEVNAME macro.

(This might look easy, but it was a big diff.  Thanks to dlg and especially jsg
for looking over it; we found at least four mistakes in the initial diff.)

ok jsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.8 2007/06/10 10:53:48 mbalmer Exp $	*/
d88 1
a88 1
	device_ptr_t		sc_subdev;	/* ucom uses that */
d356 1
a356 1
uipaq_activate(device_ptr_t self, enum devact act)
d375 1
a375 1
uipaq_detach(device_ptr_t self, int flags)
@


1.8
log
@Remove the definition and use of the USBDEV macro.  It only created confusion
and the address of it's argument:  USBDEV(sc->sc_dev) yields &sc->sc_dev.

No binary changes.

ok jsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.7 2007/06/06 19:25:49 mk Exp $	*/
d160 1
a160 1
	char *devname = USBDEVNAME(sc->sc_dev);
d206 1
a206 1
		printf("%s: init failed, %s\n", USBDEVNAME(sc->sc_dev),
d252 1
a252 1
	DPRINTF(("%s: uipaq_dtr: onoff=%x\n", USBDEVNAME(sc->sc_dev), onoff));
d285 1
a285 1
	DPRINTF(("%s: uipaq_rts: onoff=%x\n", USBDEVNAME(sc->sc_dev), onoff));
d314 1
a314 1
	DPRINTF(("%s: uipaq_break: onoff=%x\n", USBDEVNAME(sc->sc_dev), onoff));
d349 1
a349 1
		    USBDEVNAME(sc->sc_dev), reg, onoff);
@


1.7
log
@Mechanical removal of USBBASEDEVICE.  No binary change.

Tested by thib and myself.

ok mbalmer jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.6 2007/06/05 08:43:55 mbalmer Exp $	*/
d212 1
a212 1
	    USBDEV(sc->sc_dev));
d388 1
a388 1
	    USBDEV(sc->sc_dev));
@


1.6
log
@Remove the "Static" declaration of many functions.  It was defined to be empty
and it was not consistently used.  It was confusing as it suggested these
functions were static, which they were not.

discussed with dlg and jsg, ok jsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.5 2007/05/27 04:00:25 jsg Exp $	*/
d84 1
a84 1
	USBBASEDEVICE		sc_dev;		/* base device */
@


1.5
log
@Farewell USB_{ATTACH,MATCH,DETACH}* you will not be missed.
ok deraadt@@ krw@@ mbalmer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.4 2006/06/23 06:27:11 miod Exp $	*/
d97 1
a97 1
Static void	uipaq_set(void *, int, int, int);
d102 3
a104 3
Static void	uipaq_dtr(struct uipaq_softc *sc, int onoff);
Static void	uipaq_rts(struct uipaq_softc *sc, int onoff);
Static void	uipaq_break(struct uipaq_softc* sc, int onoff);
@


1.4
log
@In a drivers activate() entry point, if on DVACT_DEACTIVATE it does
something, then it MUST return zero on DVACT_ACTIVATE, not EOPNOTSUPP;
this very popular bug has been cut and pasted a lot of times...
ok deraadt@@ mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.3 2006/04/16 04:01:12 brad Exp $	*/
d135 2
a136 1
USB_MATCH(uipaq)
d138 1
a138 1
	USB_MATCH_START(uipaq, uaa);
d150 2
a151 1
USB_ATTACH(uipaq)
d153 2
a154 1
	USB_ATTACH_START(uipaq, sc, uaa);
d183 1
a183 2
	USB_ATTACH_SETUP;
	printf("%s: %s\n", devname, devinfop);
d237 1
a237 1
	USB_ATTACH_SUCCESS_RETURN;
a241 1
	USB_ATTACH_ERROR_RETURN;
@


1.3
log
@add support for the Asus MyPal A730 PocketPC.

From Steffen Schuetz <st dot sch at gmx dot net>
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.2 2005/08/01 05:36:48 brad Exp $	*/
a361 1
		return (EOPNOTSUPP);
@


1.2
log
@Don't keep the devinfo string on the stack, instead use malloc/free.
This should cure some rare stack overflows.

From augustss NetBSD

ok dlg@@ pascoe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.1 2005/06/17 23:50:33 deraadt Exp $	*/
d127 2
a128 1
	{{ USB_VENDOR_CASIO, USB_PRODUCT_CASIO_BE300} , 0}
@


1.1
log
@uipaq/ucom support; written by isis@@www.cs.umd.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: uipaq.c,v 1.1 2003/07/16 02:31:51 isis Exp $	*/
d155 1
a155 1
	char devinfo[1024];
d178 1
a178 1
	usbd_devinfo(dev, 0, devinfo, sizeof devinfo);
d180 2
a181 1
	printf("%s: %s\n", devname, devinfo);
@

