head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.2
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.4
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5;
locks; strict;
comment	@ * @;


1.21
date	2017.01.22.10.17.39;	author dlg;	state Exp;
branches;
next	1.20;
commitid	VyLWTsbepAOk7VQM;

1.20
date	2016.04.13.11.03.37;	author mpi;	state Exp;
branches;
next	1.19;
commitid	gWZDkudwxydTq8x4;

1.19
date	2016.04.12.10.15.25;	author mpi;	state Exp;
branches;
next	1.18;
commitid	qnT2zx5QZlYWGbAS;

1.18
date	2015.11.25.11.20.38;	author mpi;	state Exp;
branches;
next	1.17;
commitid	f4dx5ry1aOiKJw33;

1.17
date	2015.11.25.03.10.00;	author dlg;	state Exp;
branches;
next	1.16;
commitid	B0kwmVGiD5DVx4kv;

1.16
date	2015.11.24.13.33.18;	author mpi;	state Exp;
branches;
next	1.15;
commitid	5DvsamK0GblTp8ww;

1.15
date	2015.11.20.03.35.23;	author dlg;	state Exp;
branches;
next	1.14;
commitid	eYnPulzvLjDImPCa;

1.14
date	2015.10.25.12.11.56;	author mpi;	state Exp;
branches;
next	1.13;
commitid	pwYnMC1gOKohmeGw;

1.13
date	2015.06.24.09.40.54;	author mpi;	state Exp;
branches;
next	1.12;
commitid	MVWrtktB46JRxFWT;

1.12
date	2015.06.20.11.35.27;	author mpi;	state Exp;
branches;
next	1.11;
commitid	3eY7hAdUfnYj96g1;

1.11
date	2015.03.27.19.32.53;	author mpi;	state Exp;
branches;
next	1.10;
commitid	RE2E8L9rIzeyhZNK;

1.10
date	2015.03.14.03.38.49;	author jsg;	state Exp;
branches;
next	1.9;
commitid	p4LJxGKbi0BU2cG6;

1.9
date	2015.02.04.05.12.13;	author mpi;	state Exp;
branches;
next	1.8;
commitid	kJMgw6D3PQCR1sKa;

1.8
date	2014.12.22.02.28.52;	author tedu;	state Exp;
branches;
next	1.7;
commitid	yM2VFFhpDTeFQlve;

1.7
date	2014.07.13.15.52.49;	author mpi;	state Exp;
branches;
next	1.6;
commitid	Pclvgy2Z4XV9hveD;

1.6
date	2014.07.12.07.59.23;	author mpi;	state Exp;
branches;
next	1.5;
commitid	b0VSac5dnnsxcDao;

1.5
date	2014.01.07.09.54.18;	author mpi;	state Exp;
branches;
next	1.4;

1.4
date	2013.12.11.01.12.01;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2013.12.05.20.53.15;	author sasano;	state Exp;
branches;
next	1.2;

1.2
date	2013.12.03.21.06.59;	author sasano;	state Exp;
branches;
next	1.1;

1.1
date	2013.11.15.19.42.20;	author sasano;	state Exp;
branches;
next	;


desc
@@


1.21
log
@move counting if_opackets next to counting if_obytes in if_enqueue.

this means packets are consistently counted in one place, unlike the
many and various ways that drivers thought they should do it.

ok mpi@@ deraadt@@
@
text
@/*	$OpenBSD: if_ugl.c,v 1.20 2016/04/13 11:03:37 mpi Exp $	*/
/*	$NetBSD: if_upl.c,v 1.19 2002/07/11 21:14:26 augustss Exp $	*/
/*
 * Copyright (c) 2013 SASANO Takayoshi <uaa@@uaa.org.uk>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net) at
 * Carlstedt Research & Technology.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Genesys Logic GL620USB-A driver
 *   This driver is based on Prolific PL2301/PL2302 driver (if_upl.c).
 */

#include <bpfilter.h>

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/timeout.h>
#include <sys/sockio.h>
#include <sys/mbuf.h>
#include <sys/kernel.h>
#include <sys/socket.h>

#include <sys/device.h>

#include <net/if.h>

#if NBPFILTER > 0
#include <net/bpf.h>
#endif

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdi_util.h>
#include <dev/usb/usbdevs.h>

#define UGL_INTR_PKTLEN		8
#define UGL_BULK_PKTLEN		64

/***/

#define UGL_INTR_INTERVAL	20

#define UGL_MAX_MTU		1514
#define UGL_BUFSZ		roundup(sizeof(struct ugl_packet), UGL_BULK_PKTLEN)

#define UGL_RX_FRAMES		1	/* must be one */
#define UGL_TX_FRAMES		1	/* must be one */

#define UGL_RX_LIST_CNT		1
#define UGL_TX_LIST_CNT		1

#define UGL_ENDPT_RX		0x0
#define UGL_ENDPT_TX		0x1
#define UGL_ENDPT_INTR		0x2
#define UGL_ENDPT_MAX		0x3

struct ugl_softc;

struct ugl_packet {
	uDWord			pkt_count;
	uDWord			pkt_length;
	char			pkt_data[UGL_MAX_MTU];
} __packed;

struct ugl_chain {
	struct ugl_softc	*ugl_sc;
	struct usbd_xfer	*ugl_xfer;
	struct ugl_packet	*ugl_buf;
	struct mbuf		*ugl_mbuf;
	int			ugl_idx;
};

struct ugl_cdata {
	struct ugl_chain	ugl_tx_chain[UGL_TX_LIST_CNT];
	struct ugl_chain	ugl_rx_chain[UGL_RX_LIST_CNT];
	int			ugl_tx_prod;
	int			ugl_tx_cons;
	int			ugl_tx_cnt;
	int			ugl_rx_prod;
};

struct ugl_softc {
	struct device		sc_dev;

	struct arpcom		sc_arpcom;
#define GET_IFP(sc) (&(sc)->sc_arpcom.ac_if)
	struct timeout		sc_stat_ch;

	struct usbd_device	*sc_udev;
	struct usbd_interface	*sc_iface;
	int			sc_ed[UGL_ENDPT_MAX];
	struct usbd_pipe	*sc_ep[UGL_ENDPT_MAX];
	struct ugl_cdata	sc_cdata;

	uByte			sc_ibuf[UGL_INTR_PKTLEN];

	u_int			sc_rx_errs;
	struct timeval		sc_rx_notice;
	u_int			sc_intr_errs;
};

#ifdef UGL_DEBUG
#define DPRINTF(x)	do { if (ugldebug) printf x; } while (0)
#define DPRINTFN(n,x)	do { if (ugldebug >= (n)) printf x; } while (0)
int	ugldebug = 0;
#else
#define DPRINTF(x)
#define DPRINTFN(n,x)
#endif

/*
 * Various supported device vendors/products.
 */
struct usb_devno ugl_devs[] = {
	{ USB_VENDOR_GENESYS, USB_PRODUCT_GENESYS_GL620USB_A },
};

int ugl_match(struct device *, void *, void *);
void ugl_attach(struct device *, struct device *, void *);
int ugl_detach(struct device *, int);

struct cfdriver ugl_cd = {
	NULL, "ugl", DV_IFNET
};

const struct cfattach ugl_ca = {
	sizeof(struct ugl_softc), ugl_match, ugl_attach, ugl_detach
};

int ugl_openpipes(struct ugl_softc *);
int ugl_tx_list_init(struct ugl_softc *);
int ugl_rx_list_init(struct ugl_softc *);
int ugl_newbuf(struct ugl_softc *, struct ugl_chain *, struct mbuf *);
int ugl_send(struct ugl_softc *, struct mbuf *, int);
void ugl_intr(struct usbd_xfer *, void *, usbd_status);
void ugl_rxeof(struct usbd_xfer *, void *, usbd_status);
void ugl_txeof(struct usbd_xfer *, void *, usbd_status);
void ugl_start(struct ifnet *);
int ugl_ioctl(struct ifnet *, u_long, caddr_t);
void ugl_init(void *);
void ugl_stop(struct ugl_softc *);
void ugl_watchdog(struct ifnet *);

/*
 * Probe for a Genesys Logic chip.
 */
int
ugl_match(struct device *parent, void *match, void *aux)
{
	struct usb_attach_arg		*uaa = aux;

	if (uaa->iface == NULL || uaa->configno != 1)
		return (UMATCH_NONE);

	return (usb_lookup(ugl_devs, uaa->vendor, uaa->product) != NULL ?
	    UMATCH_VENDOR_PRODUCT_CONF_IFACE : UMATCH_NONE);
}

void
ugl_attach(struct device *parent, struct device *self, void *aux)
{
	struct ugl_softc	*sc = (struct ugl_softc *)self;
	struct usb_attach_arg	*uaa = aux;
	int			s;
	struct usbd_device	*dev = uaa->device;
	struct usbd_interface	*iface = uaa->iface;
	struct ifnet		*ifp = GET_IFP(sc);
	usb_interface_descriptor_t	*id;
	usb_endpoint_descriptor_t	*ed;
	int			i;

	DPRINTFN(5,(" : ugl_attach: sc=%p, dev=%p", sc, dev));


	sc->sc_udev = dev;
	sc->sc_iface = iface;
	id = usbd_get_interface_descriptor(iface);

	/* Find endpoints. */
	for (i = 0; i < id->bNumEndpoints; i++) {
		ed = usbd_interface2endpoint_descriptor(iface, i);
		if (ed == NULL) {
			printf("%s: couldn't get ep %d\n",
			    sc->sc_dev.dv_xname, i);
			return;
		}
		if (UE_GET_DIR(ed->bEndpointAddress) == UE_DIR_IN &&
		    UE_GET_XFERTYPE(ed->bmAttributes) == UE_BULK) {
			sc->sc_ed[UGL_ENDPT_RX] = ed->bEndpointAddress;
		} else if (UE_GET_DIR(ed->bEndpointAddress) == UE_DIR_OUT &&
			   UE_GET_XFERTYPE(ed->bmAttributes) == UE_BULK) {
			sc->sc_ed[UGL_ENDPT_TX] = ed->bEndpointAddress;
		} else if (UE_GET_DIR(ed->bEndpointAddress) == UE_DIR_IN &&
			   UE_GET_XFERTYPE(ed->bmAttributes) == UE_INTERRUPT) {
			sc->sc_ed[UGL_ENDPT_INTR] = ed->bEndpointAddress;
		}
	}

	if (sc->sc_ed[UGL_ENDPT_RX] == 0 || sc->sc_ed[UGL_ENDPT_TX] == 0 ||
	    sc->sc_ed[UGL_ENDPT_INTR] == 0) {
		printf("%s: missing endpoint\n", sc->sc_dev.dv_xname);
		return;
	}

	s = splnet();

	ether_fakeaddr(ifp);
	printf("%s: address %s\n",
	    sc->sc_dev.dv_xname, ether_sprintf(sc->sc_arpcom.ac_enaddr));

	/* Initialize interface info.*/
	ifp->if_softc = sc;
	ifp->if_hardmtu = UGL_MAX_MTU;
	ifp->if_flags = IFF_BROADCAST | IFF_SIMPLEX | IFF_MULTICAST;
	ifp->if_ioctl = ugl_ioctl;
	ifp->if_start = ugl_start;
	ifp->if_watchdog = ugl_watchdog;
	strlcpy(ifp->if_xname, sc->sc_dev.dv_xname, IFNAMSIZ);

	/* Attach the interface. */
	if_attach(ifp);
	ether_ifattach(ifp);

	splx(s);
}

int
ugl_detach(struct device *self, int flags)
{
	struct ugl_softc	*sc = (struct ugl_softc *)self;
	struct ifnet		*ifp = GET_IFP(sc);
	int			s;

	DPRINTFN(2,("%s: %s: enter\n", sc->sc_dev.dv_xname, __func__));

	s = splusb();

	if (ifp->if_flags & IFF_RUNNING)
		ugl_stop(sc);

	if (ifp->if_softc != NULL)
		if_detach(ifp);

#ifdef DIAGNOSTIC
	if (sc->sc_ep[UGL_ENDPT_TX] != NULL ||
	    sc->sc_ep[UGL_ENDPT_RX] != NULL ||
	    sc->sc_ep[UGL_ENDPT_INTR] != NULL)
		printf("%s: detach has active endpoints\n",
		       sc->sc_dev.dv_xname);
#endif

	splx(s);

	return (0);
}

/*
 * Initialize an RX descriptor and attach an MBUF cluster.
 */
int
ugl_newbuf(struct ugl_softc *sc, struct ugl_chain *c, struct mbuf *m)
{
	struct mbuf		*m_new = NULL;

	DPRINTFN(8,("%s: %s: enter\n", sc->sc_dev.dv_xname, __func__));

	if (m == NULL) {
		MGETHDR(m_new, M_DONTWAIT, MT_DATA);
		if (m_new == NULL) {
			printf("%s: no memory for rx list "
			    "-- packet dropped!\n", sc->sc_dev.dv_xname);
			return (ENOBUFS);
		}

		MCLGET(m_new, M_DONTWAIT);
		if (!(m_new->m_flags & M_EXT)) {
			printf("%s: no memory for rx list "
			    "-- packet dropped!\n", sc->sc_dev.dv_xname);
			m_freem(m_new);
			return (ENOBUFS);
		}
		m_new->m_len = m_new->m_pkthdr.len = MCLBYTES;
	} else {
		m_new = m;
		m_new->m_len = m_new->m_pkthdr.len = MCLBYTES;
		m_new->m_data = m_new->m_ext.ext_buf;
	}

	c->ugl_mbuf = m_new;

	return (0);
}

int
ugl_rx_list_init(struct ugl_softc *sc)
{
	struct ugl_cdata	*cd;
	struct ugl_chain	*c;
	int			i;

	DPRINTFN(5,("%s: %s: enter\n", sc->sc_dev.dv_xname, __func__));

	cd = &sc->sc_cdata;
	for (i = 0; i < UGL_RX_LIST_CNT; i++) {
		c = &cd->ugl_rx_chain[i];
		c->ugl_sc = sc;
		c->ugl_idx = i;
		if (ugl_newbuf(sc, c, NULL) == ENOBUFS)
			return (ENOBUFS);
		if (c->ugl_xfer == NULL) {
			c->ugl_xfer = usbd_alloc_xfer(sc->sc_udev);
			if (c->ugl_xfer == NULL)
				return (ENOBUFS);
			c->ugl_buf = usbd_alloc_buffer(c->ugl_xfer, UGL_BUFSZ);
			if (c->ugl_buf == NULL) {
				usbd_free_xfer(c->ugl_xfer);
				return (ENOBUFS);
			}
		}
	}

	return (0);
}

int
ugl_tx_list_init(struct ugl_softc *sc)
{
	struct ugl_cdata	*cd;
	struct ugl_chain	*c;
	int			i;

	DPRINTFN(5,("%s: %s: enter\n", sc->sc_dev.dv_xname, __func__));

	cd = &sc->sc_cdata;
	for (i = 0; i < UGL_TX_LIST_CNT; i++) {
		c = &cd->ugl_tx_chain[i];
		c->ugl_sc = sc;
		c->ugl_idx = i;
		c->ugl_mbuf = NULL;
		if (c->ugl_xfer == NULL) {
			c->ugl_xfer = usbd_alloc_xfer(sc->sc_udev);
			if (c->ugl_xfer == NULL)
				return (ENOBUFS);
			c->ugl_buf = usbd_alloc_buffer(c->ugl_xfer, UGL_BUFSZ);
			if (c->ugl_buf == NULL) {
				usbd_free_xfer(c->ugl_xfer);
				return (ENOBUFS);
			}
		}
	}

	return (0);
}

/*
 * A frame has been uploaded: pass the resulting mbuf chain up to
 * the higher level protocols.
 */
void
ugl_rxeof(struct usbd_xfer *xfer, void *priv, usbd_status status)
{
	struct ugl_chain	*c = priv;
	struct ugl_softc	*sc = c->ugl_sc;
	struct ifnet		*ifp = GET_IFP(sc);
	struct mbuf_list	ml = MBUF_LIST_INITIALIZER();
	struct mbuf		*m;
	int			total_len = 0;
	unsigned int		packet_len, packet_count;
	int			s;

	if (usbd_is_dying(sc->sc_udev))
		return;

	if (!(ifp->if_flags & IFF_RUNNING))
		return;

	if (status != USBD_NORMAL_COMPLETION) {
		if (status == USBD_NOT_STARTED || status == USBD_CANCELLED)
			return;
		sc->sc_rx_errs++;
		if (usbd_ratecheck(&sc->sc_rx_notice)) {
			printf("%s: %u usb errors on rx: %s\n",
			    sc->sc_dev.dv_xname, sc->sc_rx_errs,
			    usbd_errstr(status));
			sc->sc_rx_errs = 0;
		}
		if (status == USBD_STALLED)
			usbd_clear_endpoint_stall_async(sc->sc_ep[UGL_ENDPT_RX]);
		goto done;
	}

	usbd_get_xfer_status(xfer, NULL, NULL, &total_len, NULL);

	DPRINTFN(9,("%s: %s: enter status=%d length=%d\n",
		    sc->sc_dev.dv_xname, __func__, status, total_len));

	if (total_len < offsetof(struct ugl_packet, pkt_data)) {
		printf("%s: bad header (length=%d)\n",
		    sc->sc_dev.dv_xname, total_len);

		goto done;
	}

	packet_count = UGETDW(c->ugl_buf->pkt_count);
	if (packet_count != UGL_RX_FRAMES) {
		printf("%s: bad packet count (%d)\n",
		    sc->sc_dev.dv_xname, packet_count);

		if (packet_count == 0)
			goto done;
	}

	packet_len = UGETDW(c->ugl_buf->pkt_length);
	if (total_len < packet_len) {
		printf("%s: bad packet size(%d), length=%d\n",
		    sc->sc_dev.dv_xname, packet_len, total_len);

		if (packet_len == 0)
			goto done;
	}

	m = c->ugl_mbuf;
	memcpy(mtod(c->ugl_mbuf, char *), c->ugl_buf->pkt_data, packet_len);

	m->m_pkthdr.len = m->m_len = packet_len;
	ml_enqueue(&ml, m);

	if (ugl_newbuf(sc, c, NULL) == ENOBUFS) {
		ifp->if_ierrors++;
		goto done;
	}

	s = splnet();
	if_input(ifp, &ml);
	splx(s);

 done:
	/* Setup new transfer. */
	usbd_setup_xfer(c->ugl_xfer, sc->sc_ep[UGL_ENDPT_RX],
	    c, c->ugl_buf, UGL_BUFSZ, USBD_SHORT_XFER_OK | USBD_NO_COPY,
	    USBD_NO_TIMEOUT, ugl_rxeof);
	usbd_transfer(c->ugl_xfer);

	DPRINTFN(10,("%s: %s: start rx\n", sc->sc_dev.dv_xname,
		    __func__));
}

/*
 * A frame was downloaded to the chip. It's safe for us to clean up
 * the list buffers.
 */
void
ugl_txeof(struct usbd_xfer *xfer, void *priv, usbd_status status)
{
	struct ugl_chain	*c = priv;
	struct ugl_softc	*sc = c->ugl_sc;
	struct ifnet		*ifp = GET_IFP(sc);
	int			s;

	if (usbd_is_dying(sc->sc_udev))
		return;

	s = splnet();

	DPRINTFN(10,("%s: %s: enter status=%d\n", sc->sc_dev.dv_xname,
		    __func__, status));

	ifp->if_timer = 0;
	ifq_clr_oactive(&ifp->if_snd);

	if (status != USBD_NORMAL_COMPLETION) {
		if (status == USBD_NOT_STARTED || status == USBD_CANCELLED) {
			splx(s);
			return;
		}
		ifp->if_oerrors++;
		printf("%s: usb error on tx: %s\n", sc->sc_dev.dv_xname,
		    usbd_errstr(status));
		if (status == USBD_STALLED)
			usbd_clear_endpoint_stall_async(sc->sc_ep[UGL_ENDPT_TX]);
		splx(s);
		return;
	}

	m_freem(c->ugl_mbuf);
	c->ugl_mbuf = NULL;

	if (IFQ_IS_EMPTY(&ifp->if_snd) == 0)
		ugl_start(ifp);

	splx(s);
}

int
ugl_send(struct ugl_softc *sc, struct mbuf *m, int idx)
{
	int			total_len;
	struct ugl_chain	*c;
	usbd_status		err;

	c = &sc->sc_cdata.ugl_tx_chain[idx];

	/*
	 * Copy the mbuf data into a contiguous buffer, leaving two
	 * bytes at the beginning to hold the frame length.
	 */
	USETDW(c->ugl_buf->pkt_count, UGL_TX_FRAMES);
	USETDW(c->ugl_buf->pkt_length, m->m_pkthdr.len);
	m_copydata(m, 0, m->m_pkthdr.len, c->ugl_buf->pkt_data);
	c->ugl_mbuf = m;

	total_len = offsetof(struct ugl_packet, pkt_data[m->m_pkthdr.len]);

	DPRINTFN(10,("%s: %s: total_len=%d\n",
		     sc->sc_dev.dv_xname, __func__, total_len));

	usbd_setup_xfer(c->ugl_xfer, sc->sc_ep[UGL_ENDPT_TX],
	    c, c->ugl_buf, total_len, USBD_FORCE_SHORT_XFER | USBD_NO_COPY,
	    USBD_DEFAULT_TIMEOUT, ugl_txeof);

	/* Transmit */
	err = usbd_transfer(c->ugl_xfer);
	if (err != USBD_IN_PROGRESS) {
		printf("%s: ugl_send error=%s\n", sc->sc_dev.dv_xname,
		       usbd_errstr(err));
		ugl_stop(sc);
		return (EIO);
	}

	sc->sc_cdata.ugl_tx_cnt++;

	return (0);
}

void
ugl_start(struct ifnet *ifp)
{
	struct ugl_softc	*sc = ifp->if_softc;
	struct mbuf		*m_head = NULL;

	if (usbd_is_dying(sc->sc_udev))
		return;

	DPRINTFN(10,("%s: %s: enter\n", sc->sc_dev.dv_xname,__func__));

	if (ifq_is_oactive(&ifp->if_snd))
		return;

	m_head = ifq_deq_begin(&ifp->if_snd);
	if (m_head == NULL)
		return;

	if (ugl_send(sc, m_head, 0)) {
		ifq_deq_commit(&ifp->if_snd, m_head);
		ifq_set_oactive(&ifp->if_snd);
		return;
	}

	ifq_deq_commit(&ifp->if_snd, m_head);

#if NBPFILTER > 0
	/*
	 * If there's a BPF listener, bounce a copy of this frame
	 * to him.
	 */
	if (ifp->if_bpf)
		bpf_mtap(ifp->if_bpf, m_head, BPF_DIRECTION_OUT);
#endif

	ifq_set_oactive(&ifp->if_snd);

	/*
	 * Set a timeout in case the chip goes out to lunch.
	 */
	ifp->if_timer = 5;
}

void
ugl_init(void *xsc)
{
	struct ugl_softc	*sc = xsc;
	struct ifnet		*ifp = GET_IFP(sc);
	int			s;

	if (usbd_is_dying(sc->sc_udev))
		return;

	DPRINTFN(10,("%s: %s: enter\n", sc->sc_dev.dv_xname,__func__));

	s = splnet();

	/* Init TX ring. */
	if (ugl_tx_list_init(sc) == ENOBUFS) {
		printf("%s: tx list init failed\n", sc->sc_dev.dv_xname);
		splx(s);
		return;
	}

	/* Init RX ring. */
	if (ugl_rx_list_init(sc) == ENOBUFS) {
		printf("%s: rx list init failed\n", sc->sc_dev.dv_xname);
		splx(s);
		return;
	}

	if (sc->sc_ep[UGL_ENDPT_RX] == NULL) {
		if (ugl_openpipes(sc)) {
			splx(s);
			return;
		}
	}

	ifp->if_flags |= IFF_RUNNING;
	splx(s);

	ifq_clr_oactive(&ifp->if_snd);
}

int
ugl_openpipes(struct ugl_softc *sc)
{
	struct ugl_chain	*c;
	usbd_status		err;
	int			i;

	/* Open RX and TX pipes. */
	err = usbd_open_pipe(sc->sc_iface, sc->sc_ed[UGL_ENDPT_RX],
	    USBD_EXCLUSIVE_USE, &sc->sc_ep[UGL_ENDPT_RX]);
	if (err) {
		printf("%s: open rx pipe failed: %s\n",
		    sc->sc_dev.dv_xname, usbd_errstr(err));
		return (EIO);
	}
	err = usbd_open_pipe(sc->sc_iface, sc->sc_ed[UGL_ENDPT_TX],
	    USBD_EXCLUSIVE_USE, &sc->sc_ep[UGL_ENDPT_TX]);
	if (err) {
		printf("%s: open tx pipe failed: %s\n",
		    sc->sc_dev.dv_xname, usbd_errstr(err));
		return (EIO);
	}
	err = usbd_open_pipe_intr(sc->sc_iface, sc->sc_ed[UGL_ENDPT_INTR],
	    USBD_EXCLUSIVE_USE, &sc->sc_ep[UGL_ENDPT_INTR], sc,
	    sc->sc_ibuf, UGL_INTR_PKTLEN, ugl_intr,
	    UGL_INTR_INTERVAL);
	if (err) {
		printf("%s: open intr pipe failed: %s\n",
		    sc->sc_dev.dv_xname, usbd_errstr(err));
		return (EIO);
	}

	/* Start up the receive pipe. */
	for (i = 0; i < UGL_RX_LIST_CNT; i++) {
		c = &sc->sc_cdata.ugl_rx_chain[i];
		usbd_setup_xfer(c->ugl_xfer, sc->sc_ep[UGL_ENDPT_RX],
		    c, c->ugl_buf, UGL_BUFSZ,
		    USBD_SHORT_XFER_OK | USBD_NO_COPY, USBD_NO_TIMEOUT,
		    ugl_rxeof);
		usbd_transfer(c->ugl_xfer);
	}

	return (0);
}

void
ugl_intr(struct usbd_xfer *xfer, void *priv, usbd_status status)
{
	struct ugl_softc	*sc = priv;
	struct ifnet		*ifp = GET_IFP(sc);
	int			i;

	DPRINTFN(15,("%s: %s: enter\n", sc->sc_dev.dv_xname,__func__));

	if (usbd_is_dying(sc->sc_udev))
		return;

	if (!(ifp->if_flags & IFF_RUNNING))
		return;

	if (status != USBD_NORMAL_COMPLETION) {
		if (status == USBD_NOT_STARTED || status == USBD_CANCELLED) {
			return;
		}
		sc->sc_intr_errs++;
		if (usbd_ratecheck(&sc->sc_rx_notice)) {
			printf("%s: %u usb errors on intr: %s\n",
			    sc->sc_dev.dv_xname, sc->sc_rx_errs,
			    usbd_errstr(status));
			sc->sc_intr_errs = 0;
		}
		if (status == USBD_STALLED)
			usbd_clear_endpoint_stall_async(sc->sc_ep[UGL_ENDPT_RX]);
		return;
	}

	DPRINTFN(10,("%s: %s:", sc->sc_dev.dv_xname, __func__));
	for (i = 0; i < UGL_INTR_PKTLEN; i++)
		DPRINTFN(10,(" 0x%02x", sc->sc_ibuf[i]));
	DPRINTFN(10,("\n"));

}

int
ugl_ioctl(struct ifnet *ifp, u_long command, caddr_t data)
{
	struct ugl_softc	*sc = ifp->if_softc;
	int			s, error = 0;

	if (usbd_is_dying(sc->sc_udev))
		return (EIO);

	DPRINTFN(5,("%s: %s: cmd=0x%08lx\n",
		    sc->sc_dev.dv_xname, __func__, command));

	s = splnet();

	switch(command) {
	case SIOCSIFADDR:
		ifp->if_flags |= IFF_UP;
		if (!(ifp->if_flags & IFF_RUNNING))
			ugl_init(sc);
		break;

	case SIOCSIFFLAGS:
		if (ifp->if_flags & IFF_UP) {
			if (ifp->if_flags & IFF_RUNNING)
				error = ENETRESET;
			else
				ugl_init(sc);
		} else {
			if (ifp->if_flags & IFF_RUNNING)
				ugl_stop(sc);
		}
		break;

	default:
		error = ether_ioctl(ifp, &sc->sc_arpcom, command, data);
		break;
	}

	if (error == ENETRESET)
		error = 0;

	splx(s);
	return (error);
}

void
ugl_watchdog(struct ifnet *ifp)
{
	struct ugl_softc	*sc = ifp->if_softc;

	if (usbd_is_dying(sc->sc_udev))
		return;

	ifp->if_oerrors++;
	printf("%s: watchdog timeout\n", sc->sc_dev.dv_xname);
}

/*
 * Stop the adapter and free any mbufs allocated to the
 * RX and TX lists.
 */
void
ugl_stop(struct ugl_softc *sc)
{
	struct ifnet		*ifp;
	int			i;

	DPRINTFN(10,("%s: %s: enter\n", sc->sc_dev.dv_xname,__func__));

	ifp = GET_IFP(sc);
	ifp->if_timer = 0;
	ifp->if_flags &= ~IFF_RUNNING;
	ifq_clr_oactive(&ifp->if_snd);

	/* Stop transfers. */
	if (sc->sc_ep[UGL_ENDPT_RX] != NULL) {
		usbd_abort_pipe(sc->sc_ep[UGL_ENDPT_RX]);
		usbd_close_pipe(sc->sc_ep[UGL_ENDPT_RX]);
		sc->sc_ep[UGL_ENDPT_RX] = NULL;
	}

	if (sc->sc_ep[UGL_ENDPT_TX] != NULL) {
		usbd_abort_pipe(sc->sc_ep[UGL_ENDPT_TX]);
		usbd_close_pipe(sc->sc_ep[UGL_ENDPT_TX]);
		sc->sc_ep[UGL_ENDPT_TX] = NULL;
	}

	if (sc->sc_ep[UGL_ENDPT_INTR] != NULL) {
		usbd_abort_pipe(sc->sc_ep[UGL_ENDPT_INTR]);
		usbd_close_pipe(sc->sc_ep[UGL_ENDPT_INTR]);
		sc->sc_ep[UGL_ENDPT_INTR] = NULL;
	}

	/* Free RX resources. */
	for (i = 0; i < UGL_RX_LIST_CNT; i++) {
		if (sc->sc_cdata.ugl_rx_chain[i].ugl_mbuf != NULL) {
			m_freem(sc->sc_cdata.ugl_rx_chain[i].ugl_mbuf);
			sc->sc_cdata.ugl_rx_chain[i].ugl_mbuf = NULL;
		}
		if (sc->sc_cdata.ugl_rx_chain[i].ugl_xfer != NULL) {
			usbd_free_xfer(sc->sc_cdata.ugl_rx_chain[i].ugl_xfer);
			sc->sc_cdata.ugl_rx_chain[i].ugl_xfer = NULL;
		}
	}

	/* Free TX resources. */
	for (i = 0; i < UGL_TX_LIST_CNT; i++) {
		if (sc->sc_cdata.ugl_tx_chain[i].ugl_mbuf != NULL) {
			m_freem(sc->sc_cdata.ugl_tx_chain[i].ugl_mbuf);
			sc->sc_cdata.ugl_tx_chain[i].ugl_mbuf = NULL;
		}
		if (sc->sc_cdata.ugl_tx_chain[i].ugl_xfer != NULL) {
			usbd_free_xfer(sc->sc_cdata.ugl_tx_chain[i].ugl_xfer);
			sc->sc_cdata.ugl_tx_chain[i].ugl_xfer = NULL;
		}
	}
}
@


1.20
log
@G/C IFQ_SET_READY().
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.19 2016/04/12 10:15:25 mpi Exp $	*/
a527 2

	ifp->if_opackets++;
@


1.19
log
@Call ether_fakeaddr() instead of faking Ethernet addresses manually.

Input from and ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.18 2015/11/25 11:20:38 mpi Exp $	*/
a262 2

	IFQ_SET_READY(&ifp->if_snd);
@


1.18
log
@Network drivers should not include <net/route.h> or <net/netisr.h>
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.17 2015/11/25 03:10:00 dlg Exp $	*/
a154 2
extern int ticks;

d211 1
a211 1
	struct ifnet		*ifp;
a214 1
	u_int16_t		macaddr_hi;
d251 1
a251 5
	macaddr_hi = htons(0x2acb);
	bcopy(&macaddr_hi, &sc->sc_arpcom.ac_enaddr[0], sizeof(u_int16_t));
	bcopy(&ticks, &sc->sc_arpcom.ac_enaddr[2], sizeof(u_int32_t));
	sc->sc_arpcom.ac_enaddr[5] = (u_int8_t)(sc->sc_dev.dv_unit);

a255 1
	ifp = GET_IFP(sc);
@


1.17
log
@replace IFF_OACTIVE manipulation with mpsafe operations.

there are two things shared between the network stack and drivers
in the send path: the send queue and the IFF_OACTIVE flag. the send
queue is now protected by a mutex. this diff makes the oactive
functionality mpsafe too.

IFF_OACTIVE is part of if_flags. there are two problems with that.
firstly, if_flags is a short and we dont have any MI atomic operations
to manipulate a short. secondly, while we could make the IFF_OACTIVE
operates mpsafe, all changes to other flags would have to be made
safe at the same time, otherwise a read-modify-write cycle on their
updates could clobber the oactive change.

instead, this moves the oactive mark into struct ifqueue and provides
an API for changing it. there's ifq_set_oactive, ifq_clr_oactive,
and ifq_is_oactive. these are modelled on ifsq_set_oactive,
ifsq_clr_oactive, and ifsq_is_oactive in dragonflybsd.

this diff includes changes to all the drivers manipulating IFF_OACTIVE
to now use the ifsq_{set,clr_is}_oactive API too.

ok kettenis@@ mpi@@ jmatthew@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.16 2015/11/24 13:33:18 mpi Exp $	*/
a66 1
#include <net/netisr.h>
@


1.16
log
@The only network driver needing <net/if_types.h> is upl(4) for IFT_OTHER.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.15 2015/11/20 03:35:23 dlg Exp $	*/
d524 1
a524 1
	ifp->if_flags &= ~IFF_OACTIVE;
d603 1
a603 1
	if (ifp->if_flags & IFF_OACTIVE)
d612 1
a612 1
		ifp->if_flags |= IFF_OACTIVE;
d627 1
a627 1
	ifp->if_flags |= IFF_OACTIVE;
d671 1
a671 1
	ifp->if_flags &= ~IFF_OACTIVE;
d673 1
a673 1
	splx(s);
d830 2
a831 1
	ifp->if_flags &= ~(IFF_RUNNING | IFF_OACTIVE);
@


1.15
log
@shuffle struct ifqueue so in flight mbufs are protected by a mutex.

the code is refactored so the IFQ macros call newly implemented ifq
functions. the ifq code is split so each discipline (priq and hfsc
in our case) is an opaque set of operations that the common ifq
code can call. the common code does the locking, accounting (ifq_len
manipulation), and freeing of the mbuf if the disciplines enqueue
function rejects it. theyre kind of like bufqs in the block layer
with their fifo and nscan disciplines.

the new api also supports atomic switching of disciplines at runtime.
the hfsc setup in pf_ioctl.c has been tweaked to build a complete
hfsc_if structure which it attaches to the send queue in a single
operation, rather than attaching to the interface up front and
building up a list of queues.

the send queue is now mutexed, which raises the expectation that
packets can be enqueued or purged on one cpu while another cpu is
dequeueing them in a driver for transmission. a lot of drivers use
IFQ_POLL to peek at an mbuf and attempt to fit it on the ring before
committing to it with a later IFQ_DEQUEUE operation. if the mbuf
gets freed in between the POLL and DEQUEUE operations, fireworks
will ensue.

to avoid this, the ifq api introduces ifq_deq_begin, ifq_deq_rollback,
and ifq_deq_commit. ifq_deq_begin allows a driver to take the ifq
mutex and get a reference to the mbuf they wish to try and tx. if
there's space, they can ifq_deq_commit it to remove the mbuf and
release the mutex. if there's no space, ifq_deq_rollback simply
releases the mutex. this api was developed to make updating the
drivers using IFQ_POLL easy, instead of having to do significant
semantic changes to avoid POLL that we cannot test on all the
hardware.

the common code has been tested pretty hard, and all the driver
modifications are straightforward except for de(4). if that breaks
it can be dealt with later.

ok mpi@@ jmatthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.14 2015/10/25 12:11:56 mpi Exp $	*/
a66 1
#include <net/if_types.h>
@


1.14
log
@arp_ifinit() is no longer needed.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.13 2015/06/24 09:40:54 mpi Exp $	*/
d607 1
a607 1
	IFQ_POLL(&ifp->if_snd, m_head);
d612 1
d617 1
a617 1
	IFQ_DEQUEUE(&ifp->if_snd, m_head);
@


1.13
log
@Increment if_ipackets in if_input().

Note that pseudo-drivers not using if_input() are not affected by this
conversion.

ok mikeb@@, kettenis@@, claudio@@, dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.12 2015/06/20 11:35:27 mpi Exp $	*/
a762 1
	struct ifaddr 		*ifa = (struct ifaddr *)data;
a777 2
		if (ifa->ifa_addr->sa_family == AF_INET)
			arp_ifinit(&sc->sc_arpcom, ifa);
@


1.12
log
@Only match devices with a valid configuration.

ok uaa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.11 2015/03/27 19:32:53 mpi Exp $	*/
a480 1
	ifp->if_ipackets++;
@


1.11
log
@Convert to if_input().

Tested by and ok uaa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.10 2015/03/14 03:38:49 jsg Exp $	*/
a84 3
#define UGL_CONFIG_NO		1
#define UGL_IFACE_IDX		0

d200 1
a200 1
	if (uaa->iface != NULL)
d204 1
a204 1
	    UMATCH_VENDOR_PRODUCT : UMATCH_NONE);
d214 1
a214 2
	struct usbd_interface	*iface;
	usbd_status		err;
a222 6
	err = usbd_set_config_no(dev, UGL_CONFIG_NO, 1);
	if (err) {
		printf("%s: setting config no failed\n",
		    sc->sc_dev.dv_xname);
		return;
	}
a224 8

	err = usbd_device2interface_handle(dev, UGL_IFACE_IDX, &iface);
	if (err) {
		printf("%s: getting interface handle failed\n",
		    sc->sc_dev.dv_xname);
		return;
	}

@


1.10
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.9 2015/02/04 05:12:13 mpi Exp $	*/
d439 1
d501 1
a502 5
	m->m_pkthdr.rcvif = ifp;

	s = splnet();

	/* XXX ugly */
d505 1
a505 1
		goto done1;
d508 2
a509 12
#if NBPFILTER > 0
	if (ifp->if_bpf) {
		bpf_mtap(ifp->if_bpf, m, BPF_DIRECTION_IN);
	}
#endif

	DPRINTFN(10,("%s: %s: deliver %d\n", sc->sc_dev.dv_xname,
		    __func__, m->m_len));

	ether_input_mbuf(ifp, m);

 done1:
@


1.9
log
@Kill annoying comments about ether_input()
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.8 2014/12/22 02:28:52 tedu Exp $	*/
a67 1
#include <net/if_dl.h>
@


1.8
log
@unifdef INET
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.7 2014/07/13 15:52:49 mpi Exp $	*/
a512 6
	/*
	 * Handle BPF listeners. Let the BPF user see the packet, but
	 * don't pass it up to the ether_input() layer unless it's
	 * a broadcast packet, multicast packet, matches our ethernet
	 * address or the interface is in promiscuous mode.
	 */
@


1.7
log
@No need for <netinet/in_systm.h> here.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.6 2014/07/12 07:59:23 mpi Exp $	*/
a817 1
#ifdef INET
a819 1
#endif
@


1.6
log
@Kill a bunch of DVACT_DEACTIVATE handlers whose only purpose were to
set the 'dying' flag of a device.  Such handlers are useless now that
usbd_detach() already set this flag.

Even if the purpose of this flag is questionnable on OpenBSD because
DVACT_DEACTIVATE acts as a pre-detach event, this is just a first small
step towards the simplification of the autoconf(9) device states.

This cleaning is now possible thanks to the work of pirofti@@ to convert
all the USB drivers to properly use usbd_is_dying().

Discussed many times with deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.5 2014/01/07 09:54:18 mpi Exp $	*/
a74 1
#ifdef INET
a75 2
#include <netinet/in_systm.h>
#include <netinet/ip.h>
a76 3
#else
#error ugl without INET?
#endif
@


1.5
log
@Remove unused fields.

ok sasano@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.4 2013/12/11 01:12:01 brad Exp $	*/
d176 10
a185 15
int ugl_match(struct device *, void *, void *); 
void ugl_attach(struct device *, struct device *, void *); 
int ugl_detach(struct device *, int); 
int ugl_activate(struct device *, int); 

struct cfdriver ugl_cd = { 
	NULL, "ugl", DV_IFNET 
}; 

const struct cfattach ugl_ca = { 
	sizeof(struct ugl_softc), 
	ugl_match, 
	ugl_attach, 
	ugl_detach, 
	ugl_activate, 
a334 13
	return (0);
}

int
ugl_activate(struct device *self, int act)
{
	struct ugl_softc *sc = (struct ugl_softc *)self;

	switch (act) {
	case DVACT_DEACTIVATE:
		usbd_deactivate(sc->sc_udev);
		break;
	}
@


1.4
log
@Clean up the ioctl handler to be in line with most of the other
Ethernet drivers.

ok sasano@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.3 2013/12/05 20:53:15 sasano Exp $	*/
a146 2
	u_int16_t		sc_vendor;
	u_int16_t		sc_product;
a246 2
	sc->sc_product = uaa->product;
	sc->sc_vendor = uaa->vendor;
@


1.3
log
@use dv_unit rather than storing local version (removed sc_unit in
struct ugl_softc).

ok by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.2 2013/12/03 21:06:59 sasano Exp $	*/
d301 1
a713 3
	if (ifp->if_flags & IFF_RUNNING)
		return;

a830 1
	struct ifreq		*ifr = (struct ifreq *)data;
d844 2
a845 3
		ugl_init(sc);

		switch (ifa->ifa_addr->sa_family) {
d847 1
a847 1
		case AF_INET:
d849 1
a849 10
			break;
#endif /* INET */
		}
		break;

	case SIOCSIFMTU:
		if (ifr->ifr_mtu > UGL_MAX_MTU)
			error = EINVAL;
		else
			ifp->if_mtu = ifr->ifr_mtu;
d854 3
a856 1
			if (!(ifp->if_flags & IFF_RUNNING))
a861 1
		error = 0;
d863 1
d865 1
a865 1
		error = ENOTTY;
d868 3
@


1.2
log
@add copyright notice/code modifier's name.

ok by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ugl.c,v 1.1 2013/11/15 19:42:20 sasano Exp $	*/
a154 1
	int			sc_unit;
a247 1
	sc->sc_unit = self->dv_unit;
d293 1
a293 1
	sc->sc_arpcom.ac_enaddr[5] = (u_int8_t)(sc->sc_unit);
@


1.1
log
@Added dev/usb/if_ugl.c, a driver for Genesys Logic GL620USB-A
USB host-to-host link cable. This driver is derived from upl(4).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d3 16
@

