head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.6
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.10
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.8
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.4
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.6
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.14.0.16
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.14
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.12
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.10
	OPENBSD_5_0:1.14.0.8
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.6
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.13.0.14
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.10
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.8
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.6
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.4
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.12.0.4
	OPENBSD_4_0_BASE:1.12;
locks; strict;
comment	@ * @;


1.16
date	2015.06.12.15.47.31;	author mpi;	state Exp;
branches;
next	1.15;
commitid	t0sjCnxjbRqHxJe2;

1.15
date	2013.11.26.20.33.18;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2009.08.10.18.04.56;	author damien;	state Exp;
branches;
next	1.13;

1.13
date	2006.11.13.20.06.38;	author damien;	state Exp;
branches;
next	1.12;

1.12
date	2006.08.09.08.21.08;	author damien;	state Exp;
branches;
next	1.11;

1.11
date	2006.07.19.20.27.30;	author damien;	state Exp;
branches;
next	1.10;

1.10
date	2006.07.19.20.22.56;	author damien;	state Exp;
branches;
next	1.9;

1.9
date	2006.07.19.20.07.30;	author damien;	state Exp;
branches;
next	1.8;

1.8
date	2006.07.19.19.57.02;	author damien;	state Exp;
branches;
next	1.7;

1.7
date	2006.07.19.19.54.00;	author damien;	state Exp;
branches;
next	1.6;

1.6
date	2006.07.19.19.51.01;	author damien;	state Exp;
branches;
next	1.5;

1.5
date	2006.07.19.19.07.36;	author damien;	state Exp;
branches;
next	1.4;

1.4
date	2006.07.18.20.54.15;	author damien;	state Exp;
branches;
next	1.3;

1.3
date	2006.07.18.20.12.15;	author damien;	state Exp;
branches;
next	1.2;

1.2
date	2006.07.18.19.56.12;	author damien;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.16.22.30.46;	author niallo;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Only match devices with a valid configuration.

Most of the WiFi/Ethernet USB adapter only have one configuration and always
use its first interface.  In order to improve USB descriptors parsing start
by reducing the number of places where a configuration is set.

Tests & ok stsp@@
@
text
@/*	$OpenBSD: if_rumreg.h,v 1.15 2013/11/26 20:33:18 deraadt Exp $	*/

/*-
 * Copyright (c) 2005, 2006 Damien Bergamini <damien.bergamini@@free.fr>
 * Copyright (c) 2006 Niall O'Higgins <niallo@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define RT2573_TX_DESC_SIZE	(sizeof (struct rum_tx_desc))
#define RT2573_RX_DESC_SIZE	(sizeof (struct rum_rx_desc))

#define RT2573_MCU_CNTL		0x01
#define RT2573_WRITE_MAC	0x02
#define RT2573_READ_MAC		0x03
#define RT2573_WRITE_MULTI_MAC	0x06
#define RT2573_READ_MULTI_MAC	0x07
#define RT2573_READ_EEPROM	0x09
#define RT2573_WRITE_LED	0x0a

/*
 * Control and status registers.
 */
#define RT2573_AIFSN_CSR	0x0400
#define RT2573_CWMIN_CSR	0x0404
#define RT2573_CWMAX_CSR	0x0408
#define RT2573_MCU_CODE_BASE	0x0800
#define RT2573_HW_BEACON_BASE0	0x2400
#define RT2573_HW_BEACON_BASE1	0x2500
#define RT2573_HW_BEACON_BASE2	0x2600
#define RT2573_HW_BEACON_BASE3	0x2700
#define RT2573_MAC_CSR0		0x3000
#define RT2573_MAC_CSR1		0x3004
#define RT2573_MAC_CSR2		0x3008
#define RT2573_MAC_CSR3		0x300c
#define RT2573_MAC_CSR4		0x3010
#define RT2573_MAC_CSR5		0x3014
#define RT2573_MAC_CSR6		0x3018
#define RT2573_MAC_CSR7		0x301c
#define RT2573_MAC_CSR8		0x3020
#define RT2573_MAC_CSR9		0x3024
#define RT2573_MAC_CSR10	0x3028
#define RT2573_MAC_CSR11	0x302c
#define RT2573_MAC_CSR12	0x3030
#define RT2573_MAC_CSR13	0x3034
#define RT2573_MAC_CSR14	0x3038
#define RT2573_MAC_CSR15	0x303c
#define RT2573_TXRX_CSR0	0x3040
#define RT2573_TXRX_CSR1	0x3044
#define RT2573_TXRX_CSR2	0x3048
#define RT2573_TXRX_CSR3	0x304c
#define RT2573_TXRX_CSR4	0x3050
#define RT2573_TXRX_CSR5	0x3054
#define RT2573_TXRX_CSR6	0x3058
#define RT2573_TXRX_CSR7	0x305c
#define RT2573_TXRX_CSR8	0x3060
#define RT2573_TXRX_CSR9	0x3064
#define RT2573_TXRX_CSR10	0x3068
#define RT2573_TXRX_CSR11	0x306c
#define RT2573_TXRX_CSR12	0x3070
#define RT2573_TXRX_CSR13	0x3074
#define RT2573_TXRX_CSR14	0x3078
#define RT2573_TXRX_CSR15	0x307c
#define RT2573_PHY_CSR0		0x3080
#define RT2573_PHY_CSR1		0x3084
#define RT2573_PHY_CSR2		0x3088
#define RT2573_PHY_CSR3		0x308c
#define RT2573_PHY_CSR4		0x3090
#define RT2573_PHY_CSR5		0x3094
#define RT2573_PHY_CSR6		0x3098
#define RT2573_PHY_CSR7		0x309c
#define RT2573_SEC_CSR0		0x30a0
#define RT2573_SEC_CSR1		0x30a4
#define RT2573_SEC_CSR2		0x30a8
#define RT2573_SEC_CSR3		0x30ac
#define RT2573_SEC_CSR4		0x30b0
#define RT2573_SEC_CSR5		0x30b4
#define RT2573_STA_CSR0		0x30c0
#define RT2573_STA_CSR1		0x30c4
#define RT2573_STA_CSR2		0x30c8
#define RT2573_STA_CSR3		0x30cc
#define RT2573_STA_CSR4		0x30d0
#define RT2573_STA_CSR5		0x30d4


/* possible flags for register RT2573_MAC_CSR1 */
#define RT2573_RESET_ASIC	(1 << 0)
#define RT2573_RESET_BBP	(1 << 1)
#define RT2573_HOST_READY	(1 << 2)

/* possible flags for register MAC_CSR5 */
#define RT2573_ONE_BSSID	3

/* possible flags for register TXRX_CSR0 */
/* Tx filter flags are in the low 16 bits */
#define RT2573_AUTO_TX_SEQ		(1 << 15)
/* Rx filter flags are in the high 16 bits */
#define RT2573_DISABLE_RX		(1 << 16)
#define RT2573_DROP_CRC_ERROR		(1 << 17)
#define RT2573_DROP_PHY_ERROR		(1 << 18)
#define RT2573_DROP_CTL			(1 << 19)
#define RT2573_DROP_NOT_TO_ME		(1 << 20)
#define RT2573_DROP_TODS		(1 << 21)
#define RT2573_DROP_VER_ERROR		(1 << 22)
#define RT2573_DROP_MULTICAST		(1 << 23)
#define RT2573_DROP_BROADCAST		(1 << 24)
#define RT2573_DROP_ACKCTS		(1 << 25)

/* possible flags for register TXRX_CSR4 */
#define RT2573_SHORT_PREAMBLE	(1 << 18)
#define RT2573_MRR_ENABLED	(1 << 19)
#define RT2573_MRR_CCK_FALLBACK	(1 << 22)

/* possible flags for register TXRX_CSR9 */
#define RT2573_TSF_TICKING	(1 << 16)
#define RT2573_TSF_MODE(x)	(((x) & 0x3) << 17)
/* TBTT stands for Target Beacon Transmission Time */
#define RT2573_ENABLE_TBTT	(1 << 19)
#define RT2573_GENERATE_BEACON	(1 << 20)

/* possible flags for register PHY_CSR0 */
#define RT2573_PA_PE_2GHZ	(1 << 16)
#define RT2573_PA_PE_5GHZ	(1 << 17)

/* possible flags for register PHY_CSR3 */
#define RT2573_BBP_READ	(1 << 15)
#define RT2573_BBP_BUSY	(1 << 16)
/* possible flags for register PHY_CSR4 */
#define RT2573_RF_20BIT	(20 << 24)
#define RT2573_RF_BUSY	(1U << 31)

/* LED values */
#define RT2573_LED_RADIO	(1 << 8)
#define RT2573_LED_G		(1 << 9)
#define RT2573_LED_A		(1 << 10)
#define RT2573_LED_ON		0x1e1e
#define RT2573_LED_OFF		0x0

#define RT2573_MCU_RUN	(1 << 3)

#define RT2573_SMART_MODE	(1 << 0)

#define RT2573_BBPR94_DEFAULT	6

#define RT2573_BBP_WRITE	(1 << 15)

/* dual-band RF */
#define RT2573_RF_5226	1
#define RT2573_RF_5225	3
/* single-band RF */
#define RT2573_RF_2528	2
#define RT2573_RF_2527	4

#define RT2573_BBP_VERSION	0

struct rum_tx_desc {
	uint32_t	flags;
#define RT2573_TX_BURST			(1 << 0)
#define RT2573_TX_VALID			(1 << 1)
#define RT2573_TX_MORE_FRAG		(1 << 2)
#define RT2573_TX_NEED_ACK		(1 << 3)
#define RT2573_TX_TIMESTAMP		(1 << 4)
#define RT2573_TX_OFDM			(1 << 5)
#define RT2573_TX_IFS_SIFS		(1 << 6)
#define RT2573_TX_LONG_RETRY		(1 << 7)

	uint16_t	wme;
#define RT2573_QID(v)		(v)
#define RT2573_AIFSN(v)		((v) << 4)
#define RT2573_LOGCWMIN(v)	((v) << 8)
#define RT2573_LOGCWMAX(v)	((v) << 12)

	uint16_t	xflags;
#define RT2573_TX_HWSEQ		(1 << 12)

	uint8_t		plcp_signal;
	uint8_t		plcp_service;
#define RT2573_PLCP_LENGEXT	0x80

	uint8_t		plcp_length_lo;
	uint8_t		plcp_length_hi;

	uint32_t	iv;
	uint32_t	eiv;

	uint8_t		offset;
	uint8_t		qid;
	uint8_t		txpower;
#define RT2573_DEFAULT_TXPOWER	0

	uint8_t		reserved;
} __packed;

struct rum_rx_desc {
	uint32_t	flags;
#define RT2573_RX_BUSY		(1 << 0)
#define RT2573_RX_DROP		(1 << 1)
#define RT2573_RX_CRC_ERROR	(1 << 6)
#define RT2573_RX_OFDM		(1 << 7)

	uint8_t		rate;
	uint8_t		rssi;
	uint8_t		reserved1;
	uint8_t		offset;
	uint32_t	iv;
	uint32_t	eiv;
	uint32_t	reserved2[2];
} __packed;

#define RT2573_RF1	0
#define RT2573_RF2	2
#define RT2573_RF3	1
#define RT2573_RF4	3

#define RT2573_EEPROM_MACBBP		0x0000
#define RT2573_EEPROM_ADDRESS		0x0004
#define RT2573_EEPROM_ANTENNA		0x0020
#define RT2573_EEPROM_CONFIG2		0x0022
#define RT2573_EEPROM_BBP_BASE		0x0026
#define RT2573_EEPROM_TXPOWER		0x0046
#define RT2573_EEPROM_FREQ_OFFSET	0x005e
#define RT2573_EEPROM_RSSI_2GHZ_OFFSET	0x009a
#define RT2573_EEPROM_RSSI_5GHZ_OFFSET	0x009c

/*
 * Default values for MAC registers; values taken from the reference driver.
 */
#define RT2573_DEF_MAC				\
	{ RT2573_TXRX_CSR0,       0x025fb032 },	\
	{ RT2573_TXRX_CSR1,       0x9eaa9eaf },	\
	{ RT2573_TXRX_CSR2,       0x8a8b8c8d },	\
	{ RT2573_TXRX_CSR3,       0x00858687 },	\
	{ RT2573_TXRX_CSR7,       0x2e31353b },	\
	{ RT2573_TXRX_CSR8,       0x2a2a2a2c },	\
	{ RT2573_TXRX_CSR15,      0x0000000f },	\
	{ RT2573_MAC_CSR6,        0x00000fff },	\
	{ RT2573_MAC_CSR8,        0x016c030a },	\
	{ RT2573_MAC_CSR10,       0x00000718 },	\
	{ RT2573_MAC_CSR12,       0x00000004 },	\
	{ RT2573_MAC_CSR13,       0x00007f00 },	\
	{ RT2573_SEC_CSR0,        0x00000000 },	\
	{ RT2573_SEC_CSR1,        0x00000000 },	\
	{ RT2573_SEC_CSR5,        0x00000000 },	\
	{ RT2573_PHY_CSR1,        0x000023b0 },	\
	{ RT2573_PHY_CSR5,        0x00040a06 },	\
	{ RT2573_PHY_CSR6,        0x00080606 },	\
	{ RT2573_PHY_CSR7,        0x00000408 },	\
	{ RT2573_AIFSN_CSR,       0x00002273 },	\
	{ RT2573_CWMIN_CSR,       0x00002344 },	\
	{ RT2573_CWMAX_CSR,       0x000034aa },	\
	{ RT2573_HW_BEACON_BASE0, 0x00000000 },	\
	{ RT2573_HW_BEACON_BASE1, 0x00000000 },	\
	{ RT2573_HW_BEACON_BASE2, 0x00000000 },	\
	{ RT2573_HW_BEACON_BASE3, 0x00000000 }

/*
 * Default values for BBP registers; values taken from the reference driver.
 */
#define RT2573_DEF_BBP	\
	{   3, 0x80 },	\
	{  15, 0x30 },	\
	{  17, 0x20 },	\
	{  21, 0xc8 },	\
	{  22, 0x38 },	\
	{  23, 0x06 },	\
	{  24, 0xfe },	\
	{  25, 0x0a },	\
	{  26, 0x0d },	\
	{  32, 0x0b },	\
	{  34, 0x12 },	\
	{  37, 0x07 },	\
	{  39, 0xf8 },	\
	{  41, 0x60 },	\
	{  53, 0x10 },	\
	{  54, 0x18 },	\
	{  60, 0x10 },	\
	{  61, 0x04 },	\
	{  62, 0x04 },	\
	{  75, 0xfe },	\
	{  86, 0xfe },	\
	{  88, 0xfe },	\
	{  90, 0x0f },	\
	{  99, 0x00 },	\
	{ 102, 0x16 },	\
	{ 107, 0x04 }

/*
 * Default settings for RF registers; values taken from the reference driver.
 */
#define RT2573_RF5226					\
	{   1, 0x00b03, 0x001e1, 0x1a014, 0x30282 },	\
	{   2, 0x00b03, 0x001e1, 0x1a014, 0x30287 },	\
	{   3, 0x00b03, 0x001e2, 0x1a014, 0x30282 },	\
	{   4, 0x00b03, 0x001e2, 0x1a014, 0x30287 },	\
	{   5, 0x00b03, 0x001e3, 0x1a014, 0x30282 },	\
	{   6, 0x00b03, 0x001e3, 0x1a014, 0x30287 },	\
	{   7, 0x00b03, 0x001e4, 0x1a014, 0x30282 },	\
	{   8, 0x00b03, 0x001e4, 0x1a014, 0x30287 },	\
	{   9, 0x00b03, 0x001e5, 0x1a014, 0x30282 },	\
	{  10, 0x00b03, 0x001e5, 0x1a014, 0x30287 },	\
	{  11, 0x00b03, 0x001e6, 0x1a014, 0x30282 },	\
	{  12, 0x00b03, 0x001e6, 0x1a014, 0x30287 },	\
	{  13, 0x00b03, 0x001e7, 0x1a014, 0x30282 },	\
	{  14, 0x00b03, 0x001e8, 0x1a014, 0x30284 },	\
							\
	{  34, 0x00b03, 0x20266, 0x36014, 0x30282 },	\
	{  38, 0x00b03, 0x20267, 0x36014, 0x30284 },	\
	{  42, 0x00b03, 0x20268, 0x36014, 0x30286 },	\
	{  46, 0x00b03, 0x20269, 0x36014, 0x30288 },	\
							\
	{  36, 0x00b03, 0x00266, 0x26014, 0x30288 },	\
	{  40, 0x00b03, 0x00268, 0x26014, 0x30280 },	\
	{  44, 0x00b03, 0x00269, 0x26014, 0x30282 },	\
	{  48, 0x00b03, 0x0026a, 0x26014, 0x30284 },	\
	{  52, 0x00b03, 0x0026b, 0x26014, 0x30286 },	\
	{  56, 0x00b03, 0x0026c, 0x26014, 0x30288 },	\
	{  60, 0x00b03, 0x0026e, 0x26014, 0x30280 },	\
	{  64, 0x00b03, 0x0026f, 0x26014, 0x30282 },	\
							\
	{ 100, 0x00b03, 0x0028a, 0x2e014, 0x30280 },	\
	{ 104, 0x00b03, 0x0028b, 0x2e014, 0x30282 },	\
	{ 108, 0x00b03, 0x0028c, 0x2e014, 0x30284 },	\
	{ 112, 0x00b03, 0x0028d, 0x2e014, 0x30286 },	\
	{ 116, 0x00b03, 0x0028e, 0x2e014, 0x30288 },	\
	{ 120, 0x00b03, 0x002a0, 0x2e014, 0x30280 },	\
	{ 124, 0x00b03, 0x002a1, 0x2e014, 0x30282 },	\
	{ 128, 0x00b03, 0x002a2, 0x2e014, 0x30284 },	\
	{ 132, 0x00b03, 0x002a3, 0x2e014, 0x30286 },	\
	{ 136, 0x00b03, 0x002a4, 0x2e014, 0x30288 },	\
	{ 140, 0x00b03, 0x002a6, 0x2e014, 0x30280 },	\
							\
	{ 149, 0x00b03, 0x002a8, 0x2e014, 0x30287 },	\
	{ 153, 0x00b03, 0x002a9, 0x2e014, 0x30289 },	\
	{ 157, 0x00b03, 0x002ab, 0x2e014, 0x30281 },	\
	{ 161, 0x00b03, 0x002ac, 0x2e014, 0x30283 },	\
	{ 165, 0x00b03, 0x002ad, 0x2e014, 0x30285 }

#define RT2573_RF5225					\
	{   1, 0x00b33, 0x011e1, 0x1a014, 0x30282 },	\
	{   2, 0x00b33, 0x011e1, 0x1a014, 0x30287 },	\
	{   3, 0x00b33, 0x011e2, 0x1a014, 0x30282 },	\
	{   4, 0x00b33, 0x011e2, 0x1a014, 0x30287 },	\
	{   5, 0x00b33, 0x011e3, 0x1a014, 0x30282 },	\
	{   6, 0x00b33, 0x011e3, 0x1a014, 0x30287 },	\
	{   7, 0x00b33, 0x011e4, 0x1a014, 0x30282 },	\
	{   8, 0x00b33, 0x011e4, 0x1a014, 0x30287 },	\
	{   9, 0x00b33, 0x011e5, 0x1a014, 0x30282 },	\
	{  10, 0x00b33, 0x011e5, 0x1a014, 0x30287 },	\
	{  11, 0x00b33, 0x011e6, 0x1a014, 0x30282 },	\
	{  12, 0x00b33, 0x011e6, 0x1a014, 0x30287 },	\
	{  13, 0x00b33, 0x011e7, 0x1a014, 0x30282 },	\
	{  14, 0x00b33, 0x011e8, 0x1a014, 0x30284 },	\
							\
	{  34, 0x00b33, 0x01266, 0x26014, 0x30282 },	\
	{  38, 0x00b33, 0x01267, 0x26014, 0x30284 },	\
	{  42, 0x00b33, 0x01268, 0x26014, 0x30286 },	\
	{  46, 0x00b33, 0x01269, 0x26014, 0x30288 },	\
							\
	{  36, 0x00b33, 0x01266, 0x26014, 0x30288 },	\
	{  40, 0x00b33, 0x01268, 0x26014, 0x30280 },	\
	{  44, 0x00b33, 0x01269, 0x26014, 0x30282 },	\
	{  48, 0x00b33, 0x0126a, 0x26014, 0x30284 },	\
	{  52, 0x00b33, 0x0126b, 0x26014, 0x30286 },	\
	{  56, 0x00b33, 0x0126c, 0x26014, 0x30288 },	\
	{  60, 0x00b33, 0x0126e, 0x26014, 0x30280 },	\
	{  64, 0x00b33, 0x0126f, 0x26014, 0x30282 },	\
							\
	{ 100, 0x00b33, 0x0128a, 0x2e014, 0x30280 },	\
	{ 104, 0x00b33, 0x0128b, 0x2e014, 0x30282 },	\
	{ 108, 0x00b33, 0x0128c, 0x2e014, 0x30284 },	\
	{ 112, 0x00b33, 0x0128d, 0x2e014, 0x30286 },	\
	{ 116, 0x00b33, 0x0128e, 0x2e014, 0x30288 },	\
	{ 120, 0x00b33, 0x012a0, 0x2e014, 0x30280 },	\
	{ 124, 0x00b33, 0x012a1, 0x2e014, 0x30282 },	\
	{ 128, 0x00b33, 0x012a2, 0x2e014, 0x30284 },	\
	{ 132, 0x00b33, 0x012a3, 0x2e014, 0x30286 },	\
	{ 136, 0x00b33, 0x012a4, 0x2e014, 0x30288 },	\
	{ 140, 0x00b33, 0x012a6, 0x2e014, 0x30280 },	\
							\
	{ 149, 0x00b33, 0x012a8, 0x2e014, 0x30287 },	\
	{ 153, 0x00b33, 0x012a9, 0x2e014, 0x30289 },	\
	{ 157, 0x00b33, 0x012ab, 0x2e014, 0x30281 },	\
	{ 161, 0x00b33, 0x012ac, 0x2e014, 0x30283 },	\
	{ 165, 0x00b33, 0x012ad, 0x2e014, 0x30285 }
@


1.15
log
@1 << 31 cleanup.  Eitan Adler pointed out that there has been a
resurrection of the bad idiom in the tree.
sufficient review by miod, kettenis, tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: if_rumreg.h,v 1.14 2009/08/10 18:04:56 damien Exp $	*/
a21 3

#define RT2573_CONFIG_NO	1
#define RT2573_IFACE_INDEX	0
@


1.14
log
@clear the beacons owner/valid bits to avoid garbage.

slightly modified version of a diff from Piotr Durlej.
similar to what the vendor driver is doing.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_rumreg.h,v 1.13 2006/11/13 20:06:38 damien Exp $	*/
d143 1
a143 1
#define RT2573_RF_BUSY	(1 << 31)
@


1.13
log
@first round of commits for proper 11b/g protection support:
- use the newly introduced ieee80211_get_rts() and
  ieee80211_get_cts_to_self() functions.
- use CTS-to-self instead of RTS/CTS to protect OFDM frames in
  a mixed 11b/g BSS.
- make sure multicast frames are sent using CCK modulation.

remove support for 5GHz radios in ral(4) RT2560 and ural(4).
i'm not aware of any such adapters on the market and 11a code
is known to be broken.

some cleanup while i'm here.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_rumreg.h,v 1.12 2006/08/09 08:21:08 damien Exp $	*/
d42 3
d242 26
a267 22
	{ RT2573_TXRX_CSR0,  0x025fb032 },	\
	{ RT2573_TXRX_CSR1,  0x9eaa9eaf },	\
	{ RT2573_TXRX_CSR2,  0x8a8b8c8d },	\
	{ RT2573_TXRX_CSR3,  0x00858687 },	\
	{ RT2573_TXRX_CSR7,  0x2e31353b },	\
	{ RT2573_TXRX_CSR8,  0x2a2a2a2c },	\
	{ RT2573_TXRX_CSR15, 0x0000000f },	\
	{ RT2573_MAC_CSR6,   0x00000fff },	\
	{ RT2573_MAC_CSR8,   0x016c030a },	\
	{ RT2573_MAC_CSR10,  0x00000718 },	\
	{ RT2573_MAC_CSR12,  0x00000004 },	\
	{ RT2573_MAC_CSR13,  0x00007f00 },	\
	{ RT2573_SEC_CSR0,   0x00000000 },	\
	{ RT2573_SEC_CSR1,   0x00000000 },	\
	{ RT2573_SEC_CSR5,   0x00000000 },	\
	{ RT2573_PHY_CSR1,   0x000023b0 },	\
	{ RT2573_PHY_CSR5,   0x00040a06 },	\
	{ RT2573_PHY_CSR6,   0x00080606 },	\
	{ RT2573_PHY_CSR7,   0x00000408 },	\
	{ RT2573_AIFSN_CSR,  0x00002273 },	\
	{ RT2573_CWMIN_CSR,  0x00002344 },	\
	{ RT2573_CWMAX_CSR,  0x000034aa }
@


1.12
log
@mega-commit of unrelated changes to bring rum(4) into a working state.
more to come but works well enough for me to commit this over a rum(4).
it shares a lot of code with ral(4) rt2661.c.

thanks to jsg@@ for sending me a rum(4).
@
text
@d1 1
a1 1
/*	$OpenBSD: if_rumreg.h,v 1.11 2006/07/19 20:27:30 damien Exp $	*/
d171 1
a171 1
#define RT2573_TX_ACK			(1 << 3)
@


1.11
log
@fix TX descriptor layout.
@
text
@d1 2
a2 1
/*	$OpenBSD: if_rumreg.h,v 1.10 2006/07/19 20:22:56 damien Exp $  */
d20 3
d34 61
a94 1
#define RT2573_MCU_RUN	(1 << 3)
d96 1
a96 1
#define RT2573_HOST_READY	(1 << 2)
d99 49
d149 3
a151 4
#define RT2573_ENABLE_TSF		(1 << 0)
#define RT2573_ENABLE_TSF_SYNC(x)	(((x) & 0x3) << 1)
#define RT2573_ENABLE_TBCN		(1 << 3)
#define RT2573_ENABLE_BEACON_GENERATOR	(1 << 4)
d153 1
a153 2
#define RT2573_RF_AWAKE		(3 << 7)
#define RT2573_BBP_AWAKE	(3 << 5)
d157 3
d161 2
a162 3
#define RT2573_RF_2528	0
/* dual-band RF */
#define RT2573_RF_5222	16
d168 1
a168 1
#define RT2573_TX_BUSY			(1 << 0)
d170 5
a174 2
#define RT2573_TX_RETRY(x)		((x) << 4)
#define RT2573_TX_IFS			(1 << 6)
a175 11
#define RT2573_TX_MORE_FRAG		(1 << 8)
#define RT2573_TX_ACK			(1 << 9)
#define RT2573_TX_TIMESTAMP		(1 << 10)
#define RT2573_TX_OFDM			(1 << 11)
#define RT2573_TX_NEWSEQ		(1 << 12)
#define RT2573_TX_IFS_MASK		0x00006000
#define RT2573_TX_IFS_BACKOFF		(0 << 13)
#define RT2573_TX_IFS_SIFS		(1 << 13)
#define RT2573_TX_IFS_NEWBACKOFF	(2 << 13)
#define RT2573_TX_IFS_NONE		(3 << 13)
#define RT2573_TX_BURST			(1 << 28)
d184 1
a188 1
#define RT2573_TX_HWSEQ		(1 << 12)
a197 2
#define RT2573_QID_MGT	13

a209 1
#define RT2573_RX_PHY_ERROR	(1 << 8)
a219 4
#define RT2573_RF_LOBUSY	(1 << 15)
#define RT2573_RF_BUSY		(1 << 31)
#define RT2573_RF_20BIT		(20 << 24)

d225 1
a225 7
#define RT2573_EEPROM_MACBBP	0x0000
#define RT2573_EEPROM_ADDRESS	0x0004
#define RT2573_EEPROM_TXPOWER	0x003c
#define RT2573_EEPROM_CONFIG0	0x0016
#define RT2573_EEPROM_BBP_BASE	0x001c

#define RT2573_EEPROM_VERSION		0x0002
d227 7
a233 174
#define RT2573_EEPROM_TXPOWER_RT70	0x003c
#define RT2573_EEPROM_TXPOWER_RT71	0x0046
#define RT2573_EEPROM_CONFIG0_RT70	0x0016
#define RT2573_EEPROM_CONFIG0_RT71	0x0020
#define RT2573_EEPROM_BBP_BASE_RT70	0x001c
#define RT2573_EEPROM_BBP_BASE_RT71	0x0026

#define RT2573_MCU_CODE_BASE	0x800
#define RT2573_TX_RING_COUNT	32
#define RT2573_MGT_RING_COUNT	32
#define RT2573_RX_RING_COUNT	64

#define RT2573_TX_DESC_SIZE	(sizeof (struct rum_tx_desc))
#define RT2573_RX_DESC_SIZE	(sizeof (struct rum_rx_desc))

#define RT2573_MAX_SCATTER	5


/*
 * Control and status registers.
 */
#define RT2573_AIFSN_CSR		0x0400
#define RT2573_CWMIN_CSR		0x0404
#define RT2573_CWMAX_CSR		0x0408
#define RT2573_HW_BEACON_BASE0		0x2400
#define RT2573_MAC_CSR0			0x3000
#define RT2573_MAC_CSR1			0x3004
#define RT2573_MAC_CSR2			0x3008
#define RT2573_MAC_CSR3			0x300c
#define RT2573_MAC_CSR4			0x3010
#define RT2573_MAC_CSR5			0x3014
#define RT2573_MAC_CSR6			0x3018
#define RT2573_MAC_CSR7			0x301c
#define RT2573_MAC_CSR8			0x3020
#define RT2573_MAC_CSR9			0x3024
#define RT2573_MAC_CSR10		0x3028
#define RT2573_MAC_CSR11		0x302c
#define RT2573_MAC_CSR12		0x3030
#define RT2573_MAC_CSR13		0x3034
#define RT2573_MAC_CSR14		0x3038
#define RT2573_MAC_CSR15		0x303c
#define RT2573_TXRX_CSR0		0x3040
#define RT2573_TXRX_CSR1		0x3044
#define RT2573_TXRX_CSR2		0x3048
#define RT2573_TXRX_CSR3		0x304c
#define RT2573_TXRX_CSR4		0x3050
#define RT2573_TXRX_CSR5		0x3054
#define RT2573_TXRX_CSR6		0x3058
#define RT2573_TXRX_CSR7		0x305c
#define RT2573_TXRX_CSR8		0x3060
#define RT2573_TXRX_CSR9		0x3064
#define RT2573_TXRX_CSR10		0x3068
#define RT2573_TXRX_CSR11		0x306c
#define RT2573_TXRX_CSR12		0x3070
#define RT2573_TXRX_CSR13		0x3074
#define RT2573_TXRX_CSR14		0x3078
#define RT2573_TXRX_CSR15		0x307c
#define RT2573_PHY_CSR0			0x3080
#define RT2573_PHY_CSR1			0x3084
#define RT2573_PHY_CSR2			0x3088
#define RT2573_PHY_CSR3			0x308c
#define RT2573_PHY_CSR4			0x3090
#define RT2573_PHY_CSR5			0x3094
#define RT2573_PHY_CSR6			0x3098
#define RT2573_PHY_CSR7			0x309c
#define RT2573_SEC_CSR0			0x30a0
#define RT2573_SEC_CSR1			0x30a4
#define RT2573_SEC_CSR2			0x30a8
#define RT2573_SEC_CSR3			0x30ac
#define RT2573_SEC_CSR4			0x30b0
#define RT2573_SEC_CSR5			0x30b4
#define RT2573_STA_CSR0			0x30c0
#define RT2573_STA_CSR1			0x30c4
#define RT2573_STA_CSR2			0x30c8
#define RT2573_STA_CSR3			0x30cc
#define RT2573_STA_CSR4			0x30d0
#define RT2573_STA_CSR5			0x30d4

/* possible flags for register HOST_CMD_CSR */
#define RT2573_KICK_CMD		(1 << 7)
/* Host to MCU (8051) command identifiers */
#define RT2573_MCU_CMD_SLEEP	0x30
#define RT2573_MCU_CMD_WAKEUP	0x31
#define RT2573_MCU_SET_LED	0x50
#define RT2573_MCU_SET_RSSI_LED	0x52

/* possible flags for register MCU_CNTL_CSR */
#define RT2573_MCU_SEL		(1 << 0)
#define RT2573_MCU_RESET	(1 << 1)
#define RT2573_MCU_READY	(1 << 2)
/* possible flags for register MCU_INT_SOURCE_CSR */
#define RT2573_MCU_CMD_DONE		0xff
#define RT2573_MCU_WAKEUP		(1 << 8)
#define RT2573_MCU_BEACON_EXPIRE	(1 << 9)

/* possible flags for register H2M_MAILBOX_CSR */
#define RT2573_H2M_BUSY		(1 << 24)
#define RT2573_TOKEN_NO_INTR	0xff

/* possible flags for register MAC_CSR5 */
#define RT2573_ONE_BSSID	3

/* possible flags for register TXRX_CSR0 */
/* Tx filter flags are in the low 16 bits */
#define RT2573_AUTO_TX_SEQ		(1 << 15)
/* Rx filter flags are in the high 16 bits */
#define RT2573_DISABLE_RX		(1 << 16)
#define RT2573_DROP_CRC_ERROR		(1 << 17)
#define RT2573_DROP_PHY_ERROR		(1 << 18)
#define RT2573_DROP_CTL			(1 << 19)
#define RT2573_DROP_NOT_TO_ME		(1 << 20)
#define RT2573_DROP_TODS		(1 << 21)
#define RT2573_DROP_VER_ERROR		(1 << 22)
#define RT2573_DROP_MULTICAST		(1 << 23)
#define RT2573_DROP_BROADCAST		(1 << 24)
#define RT2573_DROP_ACKCTS		(1 << 25)
#define RT2573_DROP_VERSION_ERROR	(1 << 6)

/* possible flags for register TXRX_CSR4 */
#define RT2573_SHORT_PREAMBLE	(1 << 19)
#define RT2573_MRR_ENABLED	(1 << 20)
#define RT2573_MRR_CCK_FALLBACK	(1 << 23)

/* possible flags for register TXRX_CSR9 */
#define RT2573_TSF_TICKING	(1 << 16)
#define RT2573_TSF_MODE(x)	(((x) & 0x3) << 17)
/* TBTT stands for Target Beacon Transmission Time */
#define RT2573_ENABLE_TBTT	(1 << 19)
#define RT2573_GENERATE_BEACON	(1 << 20)

/* possible flags for register PHY_CSR0 */
#define RT2573_PA_PE_2GHZ	(1 << 16)
#define RT2573_PA_PE_5GHZ	(1 << 17)

/* possible flags for register PHY_CSR3 */
#define RT2573_BBP_READ	(1 << 15)
#define RT2573_BBP_BUSY	(1 << 16)
/* possible flags for register PHY_CSR4 */
#define RT2573_RF_20BIT	(20 << 24)
#define RT2573_RF_BUSY	(1 << 31)

/* possible values for register STA_CSR4 */
#define RT2573_TX_STAT_VALID	(1 << 0)
#define RT2573_TX_RESULT(v)	(((v) >> 1) & 0x7)
#define RT2573_TX_RETRYCNT(v)	(((v) >> 4) & 0xf)
#define RT2573_TX_QID(v)	(((v) >> 8) & 0xf)
#define RT2573_TX_SUCCESS	0
#define RT2573_TX_RETRY_FAIL	6

/* possible flags for register TX_CNTL_CSR */
#define RT2573_KICK_MGT	(1 << 4)

/* possible flags for register INT_SOURCE_CSR */
#define RT2573_TX_DONE		(1 << 0)
#define RT2573_RX_DONE		(1 << 1)
#define RT2573_TX0_DMA_DONE	(1 << 16)
#define RT2573_TX1_DMA_DONE	(1 << 17)
#define RT2573_TX2_DMA_DONE	(1 << 18)
#define RT2573_TX3_DMA_DONE	(1 << 19)
#define RT2573_MGT_DONE		(1 << 20)
/* possible flags for register E2PROM_CSR */
#define RT2573_C	(1 << 1)
#define RT2573_S	(1 << 2)
#define RT2573_D	(1 << 3)
#define RT2573_Q	(1 << 4)
#define RT2573_93C46	(1 << 5)

/* LED values */
#define RT2573_LED_RADIO	(1 << 8)
#define RT2573_LED_G		(1 << 9)
#define RT2573_LED_A		(1 << 10)
#define RT2573_LED_ON		0x1e1e
#define RT2573_LED_OFF		0x0
#define RT2573_BBPR94_DEFAULT	6
d294 1
a294 20
 * Default values for RF register R2 indexed by channel numbers.
 */
#define RT2573_RF2528_R2						\
{									\
	0x001e1, 0x001e1, 0x001e2, 0x001e2, 0x001e3, 0x001e3, 0x001e4,	\
	0x001e4, 0x001e5, 0x001e5, 0x001e6, 0x001e6, 0x001e7, 0x001e8	\
}

/*
 * Default values for RF register R4 indexed by channel numbers.
 */
#define RT2573_RF2528_R4						\
{									\
	0x30282, 0x30287, 0x30282, 0x30287, 0x30282, 0x30287, 0x30282,	\
	0x30287, 0x30282, 0x30287, 0x30282, 0x30287, 0x30282, 0x30284	\
}

/*
 * For dual-band RF, RF registers R1 and R4 also depend on channel number;
 * values taken from the reference driver.
d296 95
a390 41
#define RT2573_RF5222				\
	{   1, 0x08808, 0x0044d, 0x00282 },	\
	{   2, 0x08808, 0x0044e, 0x00282 },	\
	{   3, 0x08808, 0x0044f, 0x00282 },	\
	{   4, 0x08808, 0x00460, 0x00282 },	\
	{   5, 0x08808, 0x00461, 0x00282 },	\
	{   6, 0x08808, 0x00462, 0x00282 },	\
	{   7, 0x08808, 0x00463, 0x00282 },	\
	{   8, 0x08808, 0x00464, 0x00282 },	\
	{   9, 0x08808, 0x00465, 0x00282 },	\
	{  10, 0x08808, 0x00466, 0x00282 },	\
	{  11, 0x08808, 0x00467, 0x00282 },	\
	{  12, 0x08808, 0x00468, 0x00282 },	\
	{  13, 0x08808, 0x00469, 0x00282 },	\
	{  14, 0x08808, 0x0046b, 0x00286 },	\
						\
	{  36, 0x08804, 0x06225, 0x00287 },	\
	{  40, 0x08804, 0x06226, 0x00287 },	\
	{  44, 0x08804, 0x06227, 0x00287 },	\
	{  48, 0x08804, 0x06228, 0x00287 },	\
	{  52, 0x08804, 0x06229, 0x00287 },	\
	{  56, 0x08804, 0x0622a, 0x00287 },	\
	{  60, 0x08804, 0x0622b, 0x00287 },	\
	{  64, 0x08804, 0x0622c, 0x00287 },	\
						\
	{ 100, 0x08804, 0x02200, 0x00283 },	\
	{ 104, 0x08804, 0x02201, 0x00283 },	\
	{ 108, 0x08804, 0x02202, 0x00283 },	\
	{ 112, 0x08804, 0x02203, 0x00283 },	\
	{ 116, 0x08804, 0x02204, 0x00283 },	\
	{ 120, 0x08804, 0x02205, 0x00283 },	\
	{ 124, 0x08804, 0x02206, 0x00283 },	\
	{ 128, 0x08804, 0x02207, 0x00283 },	\
	{ 132, 0x08804, 0x02208, 0x00283 },	\
	{ 136, 0x08804, 0x02209, 0x00283 },	\
	{ 140, 0x08804, 0x0220a, 0x00283 },	\
						\
	{ 149, 0x08808, 0x02429, 0x00281 },	\
	{ 153, 0x08808, 0x0242b, 0x00281 },	\
	{ 157, 0x08808, 0x0242d, 0x00281 },	\
	{ 161, 0x08808, 0x0242f, 0x00281 }
@


1.10
log
@fix offsets of registers AIFSN, CWMIN and CWMAX (they differ from RT2661).
add definition of STA_CSR5.
remove definitions of register offsets that are unused or irrelevant.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_rumreg.h,v 1.9 2006/07/19 20:07:30 damien Exp $  */
a64 1

a69 1

d75 2
a76 3
#define RT2573_LOGCWMAX(x)	(((x) & 0xf) << 12)
#define RT2573_LOGCWMIN(x)	(((x) & 0xf) << 8)
#define RT2573_IVOFFSET(x)	(((x) & 0x3f))
d79 1
a79 1
	uint16_t	reserved;
d87 1
d90 1
d94 5
@


1.9
log
@fix RX descriptor format and flags.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_rumreg.h,v 1.8 2006/07/19 19:57:02 damien Exp $  */
d152 3
a154 8
#define RT2573_HOST_CMD_CSR		0x0008
#define RT2573_MCU_CNTL_CSR		0x000c
#define RT2573_SOFT_RESET_CSR		0x0010
#define RT2573_MCU_INT_SOURCE_CSR	0x0014
#define RT2573_MCU_INT_MASK_CSR		0x0018
#define RT2573_PCI_USEC_CSR		0x001c
#define RT2573_H2M_MAILBOX_CSR		0x2100
#define RT2573_M2H_CMD_DONE_CSR		0x2104
d207 1
a207 25
#define RT2573_AC0_BASE_CSR		0x3400
#define RT2573_AC1_BASE_CSR		0x3404
#define RT2573_AC2_BASE_CSR		0x3408
#define RT2573_AC3_BASE_CSR		0x340c
#define RT2573_MGT_BASE_CSR		0x3410
#define RT2573_TX_RING_CSR0		0x3418
#define RT2573_TX_RING_CSR1		0x341c
#define RT2573_AIFSN_CSR		0x3420
#define RT2573_CWMIN_CSR		0x3424
#define RT2573_CWMAX_CSR		0x3428
#define RT2573_TX_DMA_DST_CSR		0x342c
#define RT2573_TX_CNTL_CSR		0x3430
#define RT2573_LOAD_TX_RING_CSR		0x3434
#define RT2573_RX_BASE_CSR		0x3450
#define RT2573_RX_RING_CSR		0x3454
#define RT2573_RX_CNTL_CSR		0x3458
#define RT2573_PCI_CFG_CSR		0x3460
#define RT2573_INT_SOURCE_CSR		0x3468
#define RT2573_INT_MASK_CSR		0x346c
#define RT2573_E2PROM_CSR		0x3470
#define RT2573_AC_TXOP_CSR0		0x3474
#define RT2573_AC_TXOP_CSR1		0x3478
#define RT2573_TEST_MODE_CSR		0x3484
#define RT2573_IO_CNTL_CSR		0x3498

@


1.8
log
@remove more irrelevant #define
@
text
@d1 1
a1 1
/*	$OpenBSD: if_rumreg.h,v 1.7 2006/07/19 19:54:00 damien Exp $  */
d55 2
d58 2
d72 2
d99 5
a103 8
#define RT2573_RX_CRC_ERROR	(1 << 5)
#define RT2573_RX_OFDM		(1 << 6)
#define RT2573_RX_PHY_ERROR	(1 << 7)
#define RT2573_TX_BUSY		(1 << 0)
#define RT2573_TX_VALID		(1 << 1)
#define RT2573_TX_IFS		(1 << 6)
#define RT2573_TX_LONG_RETRY	(1 << 7)
#define RT2573_TX_BURST		(1 << 28)
d107 2
a108 2
	uint16_t	reserved;

d111 1
a143 1
#define RT2573_TX_DESC_WSIZE	(RT2661_TX_DESC_SIZE / 4)
a144 1
#define RT2573_RX_DESC_WSIZE	(RT2661_RX_DESC_SIZE / 4)
@


1.7
log
@remove rum_set{tx,rx}antenna() that were specific to RT2500USB.
remove #define that are no longer needed or not relevant for this hardware.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_rumreg.h,v 1.6 2006/07/19 19:51:01 damien Exp $  */
d46 2
a47 9
#define RT2573_RF1_AUTOTUNE	0x08000
#define RT2573_RF3_AUTOTUNE	0x00040

#define RT2573_RF_2522	0x00
#define RT2573_RF_2523	0x01
#define RT2573_RF_2524	0x02
#define RT2573_RF_2525	0x03
#define RT2573_RF_2525E	0x04
#define RT2573_RF_2526	0x05
d49 1
a49 2
#define RT2573_RF_5222	0x10
#define RT2573_RF_2528	0x00
@


1.6
log
@write firmware 4 bytes at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_rumreg.h,v 1.5 2006/07/19 19:07:36 damien Exp $  */
a59 10
#define RT2573_BBP_TX		2
#define RT2573_BBP_RX		14

#define RT2573_BBP_ANTA		0x00
#define RT2573_BBP_DIVERSITY	0x01
#define RT2573_BBP_ANTB		0x02
#define RT2573_BBP_ANTMASK	0x03
#define RT2573_BBP_FLIPIQ	0x04

#define RT2573_JAPAN_FILTER	0x08
@


1.5
log
@remove redundant #define
@
text
@d1 1
a1 1
/*	$OpenBSD: if_rumreg.h,v 1.4 2006/07/18 20:54:15 damien Exp $  */
d22 1
a22 1
#define RT2573_FIRMWARE_RUN	0x01
d29 2
@


1.4
log
@mountroothooks don't return a value, so don't use USB_ATTACH_ERROR_RETURN
(even if it's defined as return; under OpenBSD, it's just confusing).

kill all soft tabs while i'm here.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_rumreg.h,v 1.3 2006/07/18 20:12:15 damien Exp $  */
a28 10

#define RT2573_PHY_CSR0_RT71	0x3080	/* RF/PS control */
#define RT2573_PHY_CSR1_RT71	0x3084
#define RT2573_PHY_CSR2_RT71	0x3088	/* BBP Pre-Tx control */
#define RT2573_PHY_CSR3_RT71	0x308c	/* BBP access */
#define RT2573_PHY_CSR4_RT71	0x3090	/* RF serial control */
#define RT2573_PHY_CSR5_RT71	0x3094	/* Rx to Tx signal switch timing */
#define RT2573_PHY_CSR6_RT71	0x3098	/* Tx to Rx signal timing */
#define RT2573_PHY_CSR7_RT71	0x309c	/* Tx DAC switching timing */

@


1.3
log
@RF registers are 20 bits on RT2501USB, not 21.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_rumreg.h,v 1.2 2006/07/18 19:56:12 damien Exp $  */
d44 3
a46 3
#define RT2573_ENABLE_TSF			(1 << 0)
#define RT2573_ENABLE_TSF_SYNC(x)		(((x) & 0x3) << 1)
#define RT2573_ENABLE_TBCN			(1 << 3)
d49 1
a49 1
#define RT2573_RF_AWAKE	(3 << 7)
d68 2
a69 2
#define RT2573_BBP_TX	2
#define RT2573_BBP_RX	14
d74 2
a75 2
#define RT2573_BBP_ANTMASK		0x03
#define RT2573_BBP_FLIPIQ		0x04
d82 4
a85 4
#define RT2573_TX_MORE_FRAG	(1 << 8)
#define RT2573_TX_ACK		(1 << 9)
#define RT2573_TX_TIMESTAMP	(1 << 10)
#define RT2573_TX_OFDM		(1 << 11)
d89 1
a89 1
#define RT2573_TX_IFS_BACKOFF	(0 << 13)
d95 5
a99 5
#define RT2573_QID(v)           (v)
#define RT2573_AIFSN(v)         ((v) << 4)
#define RT2573_LOGCWMAX(x)		(((x) & 0xf) << 12)
#define RT2573_LOGCWMIN(x)		(((x) & 0xf) << 8)
#define RT2573_IVOFFSET(x)		(((x) & 0x3f))
d106 1
a106 1
#define RT2573_TX_HWSEQ         (1 << 12)
d114 1
a114 1
#define RT2573_QID_MGT  13
d122 5
a126 5
#define RT2573_TX_BUSY          (1 << 0)
#define RT2573_TX_VALID         (1 << 1)
#define RT2573_TX_IFS           (1 << 6)
#define RT2573_TX_LONG_RETRY    (1 << 7)
#define RT2573_TX_BURST         (1 << 28)
d137 2
a138 2
#define RT2573_RF_BUSY	(1 << 31)
#define RT2573_RF_20BIT	(20 << 24)
d153 4
a156 4
#define RT2573_EEPROM_TXPOWER_RT70		0x003c
#define RT2573_EEPROM_TXPOWER_RT71		0x0046
#define RT2573_EEPROM_CONFIG0_RT70		0x0016
#define RT2573_EEPROM_CONFIG0_RT71		0x0020
d160 9
a168 9
#define RT2573_MCU_CODE_BASE    0x800
#define RT2573_TX_RING_COUNT    32
#define RT2573_MGT_RING_COUNT   32
#define RT2573_RX_RING_COUNT    64

#define RT2573_TX_DESC_SIZE     (sizeof (struct rum_tx_desc))
#define RT2573_TX_DESC_WSIZE    (RT2661_TX_DESC_SIZE / 4)
#define RT2573_RX_DESC_SIZE     (sizeof (struct rum_rx_desc))
#define RT2573_RX_DESC_WSIZE    (RT2661_RX_DESC_SIZE / 4)
d170 1
a170 1
#define RT2573_MAX_SCATTER      5
d176 84
a259 84
#define RT2573_HOST_CMD_CSR             0x0008
#define RT2573_MCU_CNTL_CSR             0x000c
#define RT2573_SOFT_RESET_CSR           0x0010
#define RT2573_MCU_INT_SOURCE_CSR       0x0014
#define RT2573_MCU_INT_MASK_CSR         0x0018
#define RT2573_PCI_USEC_CSR             0x001c
#define RT2573_H2M_MAILBOX_CSR          0x2100
#define RT2573_M2H_CMD_DONE_CSR         0x2104
#define RT2573_HW_BEACON_BASE0          0x2400
#define RT2573_MAC_CSR0                 0x3000
#define RT2573_MAC_CSR1                 0x3004
#define RT2573_MAC_CSR2                 0x3008
#define RT2573_MAC_CSR3                 0x300c
#define RT2573_MAC_CSR4                 0x3010
#define RT2573_MAC_CSR5                 0x3014
#define RT2573_MAC_CSR6                 0x3018
#define RT2573_MAC_CSR7                 0x301c
#define RT2573_MAC_CSR8                 0x3020
#define RT2573_MAC_CSR9                 0x3024
#define RT2573_MAC_CSR10                0x3028
#define RT2573_MAC_CSR11                0x302c
#define RT2573_MAC_CSR12                0x3030
#define RT2573_MAC_CSR13                0x3034
#define RT2573_MAC_CSR14                0x3038
#define RT2573_MAC_CSR15                0x303c
#define RT2573_TXRX_CSR0                0x3040
#define RT2573_TXRX_CSR1                0x3044
#define RT2573_TXRX_CSR2                0x3048
#define RT2573_TXRX_CSR3                0x304c
#define RT2573_TXRX_CSR4                0x3050
#define RT2573_TXRX_CSR5                0x3054
#define RT2573_TXRX_CSR6                0x3058
#define RT2573_TXRX_CSR7                0x305c
#define RT2573_TXRX_CSR8                0x3060
#define RT2573_TXRX_CSR9                0x3064
#define RT2573_TXRX_CSR10               0x3068
#define RT2573_TXRX_CSR11               0x306c
#define RT2573_TXRX_CSR12               0x3070
#define RT2573_TXRX_CSR13               0x3074
#define RT2573_TXRX_CSR14               0x3078
#define RT2573_TXRX_CSR15               0x307c
#define RT2573_PHY_CSR0                 0x3080
#define RT2573_PHY_CSR1                 0x3084
#define RT2573_PHY_CSR2                 0x3088
#define RT2573_PHY_CSR3                 0x308c
#define RT2573_PHY_CSR4                 0x3090
#define RT2573_PHY_CSR5                 0x3094
#define RT2573_PHY_CSR6                 0x3098
#define RT2573_PHY_CSR7                 0x309c
#define RT2573_SEC_CSR0                 0x30a0
#define RT2573_SEC_CSR1                 0x30a4
#define RT2573_SEC_CSR2                 0x30a8
#define RT2573_SEC_CSR3                 0x30ac
#define RT2573_SEC_CSR4                 0x30b0
#define RT2573_SEC_CSR5                 0x30b4
#define RT2573_STA_CSR0                 0x30c0
#define RT2573_STA_CSR1                 0x30c4
#define RT2573_STA_CSR2                 0x30c8
#define RT2573_STA_CSR3                 0x30cc
#define RT2573_STA_CSR4                 0x30d0
#define RT2573_AC0_BASE_CSR             0x3400
#define RT2573_AC1_BASE_CSR             0x3404
#define RT2573_AC2_BASE_CSR             0x3408
#define RT2573_AC3_BASE_CSR             0x340c
#define RT2573_MGT_BASE_CSR             0x3410
#define RT2573_TX_RING_CSR0             0x3418
#define RT2573_TX_RING_CSR1             0x341c
#define RT2573_AIFSN_CSR                0x3420
#define RT2573_CWMIN_CSR                0x3424
#define RT2573_CWMAX_CSR                0x3428
#define RT2573_TX_DMA_DST_CSR           0x342c
#define RT2573_TX_CNTL_CSR              0x3430
#define RT2573_LOAD_TX_RING_CSR         0x3434
#define RT2573_RX_BASE_CSR              0x3450
#define RT2573_RX_RING_CSR              0x3454
#define RT2573_RX_CNTL_CSR              0x3458
#define RT2573_PCI_CFG_CSR              0x3460
#define RT2573_INT_SOURCE_CSR           0x3468
#define RT2573_INT_MASK_CSR             0x346c
#define RT2573_E2PROM_CSR               0x3470
#define RT2573_AC_TXOP_CSR0             0x3474
#define RT2573_AC_TXOP_CSR1             0x3478
#define RT2573_TEST_MODE_CSR            0x3484
#define RT2573_IO_CNTL_CSR              0x3498
d263 1
a263 1
#define RT2573_KICK_CMD         (1 << 7)
d265 4
a268 4
#define RT2573_MCU_CMD_SLEEP    0x30
#define RT2573_MCU_CMD_WAKEUP   0x31
#define RT2573_MCU_SET_LED      0x50
#define RT2573_MCU_SET_RSSI_LED 0x52
d271 3
a273 3
#define RT2573_MCU_SEL          (1 << 0)
#define RT2573_MCU_RESET        (1 << 1)
#define RT2573_MCU_READY        (1 << 2)
d275 3
a277 3
#define RT2573_MCU_CMD_DONE             0xff
#define RT2573_MCU_WAKEUP               (1 << 8)
#define RT2573_MCU_BEACON_EXPIRE        (1 << 9)
d280 2
a281 2
#define RT2573_H2M_BUSY         (1 << 24)
#define RT2573_TOKEN_NO_INTR    0xff
d284 1
a284 1
#define RT2573_ONE_BSSID        3
d288 1
a288 1
#define RT2573_AUTO_TX_SEQ      (1 << 15)
d290 10
a299 10
#define RT2573_DISABLE_RX       (1 << 16)
#define RT2573_DROP_CRC_ERROR   (1 << 17)
#define RT2573_DROP_PHY_ERROR   (1 << 18)
#define RT2573_DROP_CTL         (1 << 19)
#define RT2573_DROP_NOT_TO_ME   (1 << 20)
#define RT2573_DROP_TODS        (1 << 21)
#define RT2573_DROP_VER_ERROR   (1 << 22)
#define RT2573_DROP_MULTICAST   (1 << 23)
#define RT2573_DROP_BROADCAST   (1 << 24)
#define RT2573_DROP_ACKCTS      (1 << 25)
d303 3
a305 3
#define RT2573_SHORT_PREAMBLE   (1 << 19)
#define RT2573_MRR_ENABLED      (1 << 20)
#define RT2573_MRR_CCK_FALLBACK (1 << 23)
d308 2
a309 2
#define RT2573_TSF_TICKING      (1 << 16)
#define RT2573_TSF_MODE(x)      (((x) & 0x3) << 17)
d311 2
a312 2
#define RT2573_ENABLE_TBTT      (1 << 19)
#define RT2573_GENERATE_BEACON  (1 << 20)
d315 2
a316 2
#define RT2573_PA_PE_2GHZ       (1 << 16)
#define RT2573_PA_PE_5GHZ       (1 << 17)
d319 2
a320 2
#define RT2573_BBP_READ (1 << 15)
#define RT2573_BBP_BUSY (1 << 16)
d326 6
a331 6
#define RT2573_TX_STAT_VALID    (1 << 0)
#define RT2573_TX_RESULT(v)     (((v) >> 1) & 0x7)
#define RT2573_TX_RETRYCNT(v)   (((v) >> 4) & 0xf)
#define RT2573_TX_QID(v)        (((v) >> 8) & 0xf)
#define RT2573_TX_SUCCESS       0
#define RT2573_TX_RETRY_FAIL    6
d334 1
a334 1
#define RT2573_KICK_MGT (1 << 4)
d337 7
a343 7
#define RT2573_TX_DONE          (1 << 0)
#define RT2573_RX_DONE          (1 << 1)
#define RT2573_TX0_DMA_DONE     (1 << 16)
#define RT2573_TX1_DMA_DONE     (1 << 17)
#define RT2573_TX2_DMA_DONE     (1 << 18)
#define RT2573_TX3_DMA_DONE     (1 << 19)
#define RT2573_MGT_DONE         (1 << 20)
d345 5
a349 5
#define RT2573_C        (1 << 1)
#define RT2573_S        (1 << 2)
#define RT2573_D        (1 << 3)
#define RT2573_Q        (1 << 4)
#define RT2573_93C46    (1 << 5)
d363 22
a384 22
        { RT2573_TXRX_CSR0,  0x025fb032 },	\
        { RT2573_TXRX_CSR1,  0x9eaa9eaf },	\
        { RT2573_TXRX_CSR2,  0x8a8b8c8d },	\
        { RT2573_TXRX_CSR3,  0x00858687 },	\
        { RT2573_TXRX_CSR7,  0x2e31353b },	\
        { RT2573_TXRX_CSR8,  0x2a2a2a2c },	\
        { RT2573_TXRX_CSR15, 0x0000000f },	\
        { RT2573_MAC_CSR6,   0x00000fff },	\
        { RT2573_MAC_CSR8,   0x016c030a },	\
        { RT2573_MAC_CSR10,  0x00000718 },	\
        { RT2573_MAC_CSR12,  0x00000004 },	\
        { RT2573_MAC_CSR13,  0x00007f00 },	\
        { RT2573_SEC_CSR0,   0x00000000 },	\
        { RT2573_SEC_CSR1,   0x00000000 },	\
        { RT2573_SEC_CSR5,   0x00000000 },	\
        { RT2573_PHY_CSR1,   0x000023b0 },	\
        { RT2573_PHY_CSR5,   0x00040a06 },	\
        { RT2573_PHY_CSR6,   0x00080606 },	\
        { RT2573_PHY_CSR7,   0x00000408 },	\
        { RT2573_AIFSN_CSR,  0x00002273 },	\
        { RT2573_CWMIN_CSR,  0x00002344 },	\
        { RT2573_CWMAX_CSR,  0x000034aa }
@


1.2
log
@- move default register values into if_rumreg.h (for consistency w/ ural)
- fix channel 11 RF R4 setting for RF2528
- overwrite BBP register 39 default value
@
text
@d1 1
a1 1
/*	$OpenBSD: if_rumreg.h,v 1.1 2006/06/16 22:30:46 niallo Exp $  */
d322 2
a323 2
#define RT2573_RF_21BIT (21 << 24)
#define RT2573_RF_BUSY  (1 << 31)
@


1.1
log
@- add rum(4), a driver for the next generation Ralink Technology USB 802.11a/b/g
  wireless network devices.

not yet fully functional, putting it in the tree so others can hack on it too.
@
text
@d1 1
a1 1
/*	$OpenBSD$  */
a229 1

d358 122
@

