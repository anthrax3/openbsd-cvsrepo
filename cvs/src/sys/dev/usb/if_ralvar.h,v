head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.16
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.10
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.12
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.4
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.8
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.24
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.22
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.20
	OPENBSD_5_0:1.9.0.18
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.16
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.14
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.10
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.12
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.8
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.6
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.4
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.8.0.2
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2013.04.15.09.23.01;	author mglocker;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.06.19.25.49;	author mk;	state Exp;
branches;
next	1.8;

1.8
date	2006.11.13.20.06.38;	author damien;	state Exp;
branches;
next	1.7;

1.7
date	2006.08.18.15.18.24;	author damien;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.17.19.07.19;	author damien;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.21.11.19.22;	author pedro;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.14.12.40.39;	author damien;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.23.20.23.48;	author damien;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.13.18.42.50;	author damien;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.16.20.17.10;	author damien;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@/*	$OpenBSD: if_ralvar.h,v 1.9 2007/06/06 19:25:49 mk Exp $  */

/*-
 * Copyright (c) 2005
 *	Damien Bergamini <damien.bergamini@@free.fr>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define RAL_RX_LIST_COUNT	1
#define RAL_TX_LIST_COUNT	8

struct ural_rx_radiotap_header {
	struct ieee80211_radiotap_header wr_ihdr;
	uint8_t		wr_flags;
	uint8_t		wr_rate;
	uint16_t	wr_chan_freq;
	uint16_t	wr_chan_flags;
	uint8_t		wr_antenna;
	uint8_t		wr_antsignal;
} __packed;

#define RAL_RX_RADIOTAP_PRESENT						\
	((1 << IEEE80211_RADIOTAP_FLAGS) |				\
	 (1 << IEEE80211_RADIOTAP_RATE) |				\
	 (1 << IEEE80211_RADIOTAP_CHANNEL) |				\
	 (1 << IEEE80211_RADIOTAP_ANTENNA) |				\
	 (1 << IEEE80211_RADIOTAP_DB_ANTSIGNAL))

struct ural_tx_radiotap_header {
	struct ieee80211_radiotap_header wt_ihdr;
	uint8_t		wt_flags;
	uint8_t		wt_rate;
	uint16_t	wt_chan_freq;
	uint16_t	wt_chan_flags;
	uint8_t		wt_antenna;
} __packed;

#define RAL_TX_RADIOTAP_PRESENT						\
	((1 << IEEE80211_RADIOTAP_FLAGS) |				\
	 (1 << IEEE80211_RADIOTAP_RATE) |				\
	 (1 << IEEE80211_RADIOTAP_CHANNEL) |				\
	 (1 << IEEE80211_RADIOTAP_ANTENNA))

struct ural_softc;

struct ural_tx_data {
	struct ural_softc	*sc;
	struct usbd_xfer	*xfer;
	uint8_t			*buf;
	struct ieee80211_node	*ni;
};

struct ural_rx_data {
	struct ural_softc	*sc;
	struct usbd_xfer	*xfer;
	uint8_t			*buf;
	struct mbuf		*m;
};

struct ural_softc {
	struct device			sc_dev;
	struct ieee80211com		sc_ic;
	int				(*sc_newstate)(struct ieee80211com *,
					    enum ieee80211_state, int);

	struct usbd_device		*sc_udev;
	struct usbd_interface		*sc_iface;

	int				sc_rx_no;
	int				sc_tx_no;

	uint32_t			asic_rev;
	uint16_t			macbbp_rev;
	uint8_t				rf_rev;

	struct usbd_xfer		*amrr_xfer;

	struct usbd_pipe		*sc_rx_pipeh;
	struct usbd_pipe		*sc_tx_pipeh;

	enum ieee80211_state		sc_state;
	int				sc_arg;
	struct usb_task			sc_task;

	struct ieee80211_amrr		amrr;
	struct ieee80211_amrr_node	amn;

	struct ural_rx_data		rx_data[RAL_RX_LIST_COUNT];
	struct ural_tx_data		tx_data[RAL_TX_LIST_COUNT];
	int				tx_queued;
	int				tx_cur;

	struct timeout			scan_to;
	struct timeout			amrr_to;

	int				sc_tx_timer;

	uint16_t			sta[11];
	uint32_t			rf_regs[4];
	uint8_t				txpow[14];

	struct {
		uint8_t	val;
		uint8_t	reg;
	} __packed			bbp_prom[16];

	int				led_mode;
	int				hw_radio;
	int				rx_ant;
	int				tx_ant;
	int				nb_ant;

#if NBPFILTER > 0
	caddr_t				sc_drvbpf;

	union {
		struct ural_rx_radiotap_header th;
		uint8_t	pad[64];
	}				sc_rxtapu;
#define sc_rxtap	sc_rxtapu.th
	int				sc_rxtap_len;

	union {
		struct ural_tx_radiotap_header th;
		uint8_t	pad[64];
	}				sc_txtapu;
#define sc_txtap	sc_txtapu.th
	int				sc_txtap_len;
#endif
};
@


1.9
log
@Mechanical removal of USBBASEDEVICE.  No binary change.

Tested by thib and myself.

ok mbalmer jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ralvar.h,v 1.8 2006/11/13 20:06:38 damien Exp $  */
d59 1
a59 1
	usbd_xfer_handle	xfer;
d66 1
a66 1
	usbd_xfer_handle	xfer;
d77 2
a78 2
	usbd_device_handle		sc_udev;
	usbd_interface_handle		sc_iface;
d87 1
a87 1
	usbd_xfer_handle		amrr_xfer;
d89 2
a90 2
	usbd_pipe_handle		sc_rx_pipeh;
	usbd_pipe_handle		sc_tx_pipeh;
@


1.8
log
@first round of commits for proper 11b/g protection support:
- use the newly introduced ieee80211_get_rts() and
  ieee80211_get_cts_to_self() functions.
- use CTS-to-self instead of RTS/CTS to protect OFDM frames in
  a mixed 11b/g BSS.
- make sure multicast frames are sent using CCK modulation.

remove support for 5GHz radios in ral(4) RT2560 and ural(4).
i'm not aware of any such adapters on the market and 11a code
is known to be broken.

some cleanup while i'm here.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ralvar.h,v 1.7 2006/08/18 15:18:24 damien Exp $  */
d72 1
a72 1
	USBBASEDEVICE			sc_dev;
@


1.7
log
@sync w/ rum(4):

- in ral_newstate(), save the "arg" parameter so we can pass it to the
  ieee80211_newstate() function in the usb task
- merge ral_tx_data() and ral_tx_mgt()
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ralvar.h,v 1.6 2006/06/17 19:07:19 damien Exp $  */
d21 1
a21 1
#define RAL_TX_LIST_COUNT	1
a60 1
	struct mbuf		*m;
d102 1
d104 2
a105 2
	struct timeout			scan_ch;
	struct timeout			amrr_ch;
@


1.6
log
@Move AMRR rate control algorithm out of wpi(4) and ural(4), into net80211.

ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ralvar.h,v 1.5 2006/03/21 11:19:22 pedro Exp $  */
d94 1
@


1.5
log
@Make ural(4) read and show real MAC/BBP rev instead of hardcoded RT2570
"Go ahead" damien@@ via jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ralvar.h,v 1.4 2006/01/14 12:40:39 damien Exp $  */
a71 8
struct ural_amrr {
	int	txcnt;
	int	retrycnt;
	int	success;
	int	success_threshold;
	int	recovery;
};

d73 4
a76 4
	USBBASEDEVICE		sc_dev;
	struct ieee80211com	sc_ic;
	int			(*sc_newstate)(struct ieee80211com *,
				    enum ieee80211_state, int);
d78 2
a79 2
	usbd_device_handle	sc_udev;
	usbd_interface_handle	sc_iface;
d81 2
a82 2
	int			sc_rx_no;
	int			sc_tx_no;
d84 3
a86 3
	uint32_t		asic_rev;
	uint16_t		macbbp_rev;
	uint8_t			rf_rev;
d88 1
a88 1
	usbd_xfer_handle	amrr_xfer;
d90 2
a91 2
	usbd_pipe_handle	sc_rx_pipeh;
	usbd_pipe_handle	sc_tx_pipeh;
d93 2
a94 2
	enum ieee80211_state	sc_state;
	struct usb_task		sc_task;
d96 2
a97 1
	struct ural_amrr	amrr;
d99 3
a101 3
	struct ural_rx_data	rx_data[RAL_RX_LIST_COUNT];
	struct ural_tx_data	tx_data[RAL_TX_LIST_COUNT];
	int			tx_queued;
d103 2
a104 2
	struct timeout		scan_ch;
	struct timeout		amrr_ch;
d106 1
a106 1
	int			sc_tx_timer;
d108 3
a110 3
	uint16_t		sta[11];
	uint32_t		rf_regs[4];
	uint8_t			txpow[14];
d115 1
a115 1
	} __packed		bbp_prom[16];
d117 5
a121 5
	int			led_mode;
	int			hw_radio;
	int			rx_ant;
	int			tx_ant;
	int			nb_ant;
d124 1
a124 1
	caddr_t			sc_drvbpf;
d129 1
a129 1
	}			sc_rxtapu;
d131 1
a131 1
	int			sc_rxtap_len;
d136 1
a136 1
	}			sc_txtapu;
d138 1
a138 1
	int			sc_txtap_len;
@


1.4
log
@- give rate to rx radiotap
- swap rssi/rate fields in ural_rx_desc
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ralvar.h,v 1.3 2005/11/23 20:23:48 damien Exp $  */
d93 1
@


1.3
log
@Implement the Adaptive Multi Rate Retry algorithm (AMRR) for BSS mode.
This algorithm is particularly well suited for ural since it does not
require per-frame retry statistics.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ralvar.h,v 1.2 2005/05/13 18:42:50 damien Exp $  */
d26 1
d35 1
@


1.2
log
@make sure all endpoint descriptors have been found during the attachment.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ralvar.h,v 1.1 2005/03/16 20:17:10 damien Exp $  */
d70 8
d93 2
d101 2
d108 1
d112 1
@


1.1
log
@Driver for Ralink Technology RT2500USB wireless adapters.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$  */
d79 2
a80 2
	uint8_t			sc_rx_no;
	uint8_t			sc_tx_no;
@

