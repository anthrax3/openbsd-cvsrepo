head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.42
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.40
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.34
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.36
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.28
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.32
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.30
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.26
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.24
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.22
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.20
	OPENBSD_5_0:1.11.0.18
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.16
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.14
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.10
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.12
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.8
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.6
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.8.0.6
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.7.0.18
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.14
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.16
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.12
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.10
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.8
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.6
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.4
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.7.0.2
	UBC_BASE:1.7
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.2
	SMP_BASE:1.4
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@# @;


1.11
date	2007.06.04.10.34.04;	author mbalmer;	state Exp;
branches;
next	1.10;

1.10
date	2007.02.28.22.51.07;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2007.02.28.22.30.55;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.17.18.00.43;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.31.04.24.44;	author nate;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.28.09.43.41;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.27.04.02.10;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.12.26.15.00.47;	author fgsch;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	99.12.26.14.59.16;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	99.08.29.10.35.35;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	99.08.13.05.28.03;	author fgsch;	state Exp;
branches;
next	;

1.4.2.1
date	2001.05.14.22.26.17;	author niklas;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2001.11.13.21.10.04;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Last part of FreeBSD/NetBSD sepcific code removal.

ok jsg@@
@
text
@#! /usr/bin/awk -f
#	$OpenBSD: devlist2h.awk,v 1.10 2007/02/28 22:51:07 deraadt Exp $
#	$NetBSD: devlist2h.awk,v 1.9 2001/01/18 20:28:22 jdolecek Exp $
#
# Copyright (c) 1995, 1996 Christopher G. Demetriou
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#      This product includes software developed by Christopher G. Demetriou.
# 4. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
BEGIN {
	nproducts = nvendors = 0
	dfile="usbdevs_data.h"
	hfile="usbdevs.h"
}
NR == 1 {
	VERSION = $0
	gsub("\\$", "", VERSION)

	printf("/*\t\$OpenBSD\$\t*/\n\n") > dfile
	printf("/*\n") > dfile
	printf(" * THIS FILE IS AUTOMATICALLY GENERATED.  DO NOT EDIT.\n") \
	    > dfile
	printf(" *\n") > dfile
	printf(" * generated from:\n") > dfile
	printf(" *\t%s\n", VERSION) > dfile
	printf(" */\n") > dfile

	printf("/*\t\$OpenBSD\$\t*/\n\n") > hfile
	printf("/*\n") > hfile
	printf(" * THIS FILE IS AUTOMATICALLY GENERATED.  DO NOT EDIT.\n") \
	    > hfile
	printf(" *\n") > hfile
	printf(" * generated from:\n") > hfile
	printf(" *\t%s\n", VERSION) > hfile
	printf(" */\n") > hfile

	next
}
$1 == "vendor" {
	nvendors++

	vendorindex[$2] = nvendors;		# record index for this name, for later.
	vendors[nvendors, 1] = $2;		# name
	vendors[nvendors, 2] = $3;		# id
	printf("#define\tUSB_VENDOR_%s\t%s\t", vendors[nvendors, 1],
	    vendors[nvendors, 2]) > hfile

	i = 3; f = 4;

	# comments
	ocomment = oparen = 0
	if (f <= NF) {
		printf("\t/* ") > hfile
		ocomment = 1;
	}
	while (f <= NF) {
		if ($f == "#") {
			printf("(") > hfile
			oparen = 1
			f++
			continue
		}
		if (oparen) {
			printf("%s", $f) > hfile
			if (f < NF)
				printf(" ") > hfile
			f++
			continue
		}
		vendors[nvendors, i] = $f
		printf("%s", vendors[nvendors, i]) > hfile
		if (f < NF)
			printf(" ") > hfile
		i++; f++;
	}
	if (oparen)
		printf(")") > hfile
	if (ocomment)
		printf(" */") > hfile
	printf("\n") > hfile

	next
}
$1 == "product" {
	nproducts++

	products[nproducts, 1] = $2;		# vendor name
	products[nproducts, 2] = $3;		# product id
	products[nproducts, 3] = $4;		# id
	printf("#define\tUSB_PRODUCT_%s_%s\t%s\t", products[nproducts, 1],
	    products[nproducts, 2], products[nproducts, 3]) > hfile

	i=4; f = 5;

	# comments
	ocomment = oparen = 0
	if (f <= NF) {
		printf("\t/* ") > hfile
		ocomment = 1;
	}
	while (f <= NF) {
		if ($f == "#") {
			printf("(") > hfile
			oparen = 1
			f++
			continue
		}
		if (oparen) {
			printf("%s", $f) > hfile
			if (f < NF)
				printf(" ") > hfile
			f++
			continue
		}
		products[nproducts, i] = $f
		printf("%s", products[nproducts, i]) > hfile
		if (f < NF)
			printf(" ") > hfile
		i++; f++;
	}
	if (oparen)
		printf(")") > hfile
	if (ocomment)
		printf(" */") > hfile
	printf("\n") > hfile

	next
}
{
	if ($0 == "")
		blanklines++
	print $0 > hfile
	if (blanklines < 2)
		print $0 > dfile
}
END {
	# print out the match tables

	printf("\n") > dfile

	printf("/*\n") > dfile
	printf(" * Descriptions of known vendors and devices (\"products\").\n") > dfile
	printf(" */\n") > dfile
	printf("struct usb_known_vendor {\n") > dfile
	printf("	u_int16_t	vendor;\n") > dfile
	printf("	char		*vendorname;\n") > dfile
	printf("};\n\n") > dfile

	printf("struct usb_known_product {\n") > dfile
	printf("	u_int16_t	vendor;\n") > dfile
	printf("	u_int16_t	product;\n") > dfile
	printf("	char		*productname;\n") > dfile
	printf("};\n\n") > dfile
	printf("const struct usb_known_product usb_known_products[] = {\n") \
	    > dfile
	for (i = 1; i <= nproducts; i++) {
		printf("\t{\n") > dfile
		printf("\t    USB_VENDOR_%s, USB_PRODUCT_%s_%s,\n",
		    products[i, 1], products[i, 1], products[i, 2]) \
		    > dfile

		printf("\t    \"") > dfile
		j = 4;
		needspace = 0;
		while (products[i, j] != "") {
			if (needspace)
				printf(" ") > dfile
			printf("%s", products[i, j]) > dfile
			needspace = 1
			j++
		}
		printf("\",\n") > dfile
		printf("\t},\n") > dfile
	}
	printf("\t{ 0, 0, NULL }\n") > dfile
	printf("};\n\n") > dfile

	printf("const struct usb_known_vendor usb_known_vendors[] = {\n") \
	     > dfile
	for (i = 1; i <= nvendors; i++) {
		printf("\t{\n") > dfile
		printf("\t    USB_VENDOR_%s,\n", vendors[i, 1]) \
		    > dfile

		printf("\t    \"") > dfile
		j = 3;
		needspace = 0;
		while (vendors[i, j] != "") {
			if (needspace)
				printf(" ") > dfile
			printf("%s", vendors[i, j]) > dfile
			needspace = 1
			j++
		}
		printf("\",\n") > dfile
		printf("\t},\n") > dfile
	}
	printf("\t{ 0, NULL }\n") > dfile
	printf("};\n") > dfile
}
@


1.10
log
@the_t world_t would_t be_t a_t better_t place_t if_t some_t people_t did_t
not_t feel_t the_t need_t to_t typedef_t everything_t
@
text
@d2 1
a2 1
#	$OpenBSD: devlist2h.awk,v 1.9 2007/02/28 22:30:55 deraadt Exp $
d42 1
a42 8
	if (os == "NetBSD")
		printf("/*\t\$NetBSD\$\t*/\n\n") > dfile
	else if (os == "FreeBSD")
		printf("/*\t\$FreeBSD\$\t*/\n\n") > dfile
	else if (os == "OpenBSD")
		printf("/*\t\$OpenBSD\$\t*/\n\n") > dfile
	else
		printf("/* ??? */\n\n") > dfile
d51 1
a51 8
	if (os == "NetBSD")
		printf("/*\t\$NetBSD\$\t*/\n\n") > hfile
	else if (os == "FreeBSD")
		printf("/*\t\$FreeBSD\$\t*/\n\n") > hfile
	else if (os == "OpenBSD")
		printf("/*\t\$OpenBSD\$\t*/\n\n") > hfile
	else
		printf("/* ??? */\n\n") > hfile
@


1.9
log
@place types needed by usbdevs_data.h, directly into that file so that it
is consumable by anyone who includes it (matches idea in pcidevs)
@
text
@d2 1
a2 1
#	$OpenBSD: devlist2h.awk,v 1.8 2005/10/17 18:00:43 drahn Exp $
a177 3
	printf("typedef u_int16_t usb_vendor_id_t;\n") > dfile
	printf("typedef u_int16_t usb_product_id_t;\n\n") > dfile

d182 2
a183 2
	printf("	usb_vendor_id_t		vendor;\n") > dfile
	printf("	char			*vendorname;\n") > dfile
d187 3
a189 3
	printf("	usb_vendor_id_t		vendor;\n") > dfile
	printf("	usb_product_id_t	product;\n") > dfile
	printf("	char			*productname;\n") > dfile
@


1.8
log
@Store the usb device names and vendors in more compact structures.
Originally committed in 2001, backed out in a sync, now back in.
saves close to 12k of kernel size. commit deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: devlist2h.awk,v 1.7 2001/10/31 04:24:44 nate Exp $
d178 16
@


1.7
log
@Synchronize usb code with NetBSD.
@
text
@d2 1
a2 1
#	$OpenBSD: devlist2h.awk,v 1.6 2001/01/28 09:43:41 aaron Exp $
d178 2
a179 1
	printf("const struct usb_knowndev usb_knowndevs[] = {\n") > dfile
a184 16
		printf("\t    ") > dfile
		printf("0") > dfile
		printf(",\n") > dfile

		vendi = vendorindex[products[i, 1]];
		printf("\t    \"") > dfile
		j = 3;
		needspace = 0;
		while (vendors[vendi, j] != "") {
			if (needspace)
				printf(" ") > dfile
			printf("%s", vendors[vendi, j]) > dfile
			needspace = 1
			j++
		}
		printf("\",\n") > dfile
d199 5
d206 1
a206 3
		printf("\t    USB_VENDOR_%s, 0,\n", vendors[i, 1]) \
		    > dfile
		printf("\t    USB_KNOWNDEV_NOPROD,\n") \
d208 1
a219 1
		printf("\t    NULL,\n") > dfile
d222 1
a222 1
	printf("\t{ 0, 0, 0, NULL, NULL, }\n") > dfile
@


1.6
log
@Another USB sync with NetBSD. We are still lacking an up-to-date umass(4)
driver. I would appreciate it if someone with the hardware looked into it.
I also have to take a closer look at changes to the USB Ethernet drivers,
as well as import some drivers we are missing (uftdi, if_upl, yap, etc.)
@
text
@d2 2
a3 2
#	$OpenBSD: devlist2h.awk,v 1.5 2001/01/27 04:02:10 deraadt Exp $
#	$NetBSD: devlist2h.awk,v 1.8 1999/11/18 23:32:25 augustss Exp $
d178 1
a178 1
	printf("const struct usb_known_product usb_known_products[] = {\n") > dfile
d184 16
a213 4
	printf("\t{ 0, 0, NULL }\n") > dfile
	printf("};\n\n") > dfile

	printf("const struct usb_known_vendor usb_known_vendors[] = {\n") > dfile
d216 3
a218 1
		printf("\t    USB_VENDOR_%s,\n", vendors[i, 1]) \
a219 1

d231 1
d234 1
a234 1
	printf("\t{ 0, NULL }\n") > dfile
@


1.5
log
@re-arrange tables as pcidevs was changed; huge space savings
@
text
@d2 1
a2 1
#	$OpenBSD: devlist2h.awk,v 1.4 1999/12/26 15:00:47 fgsch Exp $
d178 1
a178 1
	printf("struct usb_known_product usb_known_products[] = {\n") > dfile
d201 1
a201 1
	printf("struct usb_known_vendor usb_known_vendors[] = {\n") > dfile
@


1.4
log
@tag.
@
text
@d2 1
a2 1
#	$OpenBSD$
d178 1
a178 1
	printf("struct usb_knowndev usb_knowndevs[] = {\n") > dfile
a183 16
		printf("\t    ") > dfile
		printf("0") > dfile
		printf(",\n") > dfile

		vendi = vendorindex[products[i, 1]];
		printf("\t    \"") > dfile
		j = 3;
		needspace = 0;
		while (vendors[vendi, j] != "") {
			if (needspace)
				printf(" ") > dfile
			printf("%s", vendors[vendi, j]) > dfile
			needspace = 1
			j++
		}
		printf("\",\n") > dfile
d198 4
d204 1
a204 3
		printf("\t    USB_VENDOR_%s, 0,\n", vendors[i, 1]) \
		    > dfile
		printf("\t    USB_KNOWNDEV_NOPROD,\n") \
d206 1
a217 1
		printf("\t    NULL,\n") > dfile
d220 1
a220 1
	printf("\t{ 0, 0, 0, NULL, NULL, }\n") > dfile
@


1.4.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d2 1
a2 1
#	$OpenBSD: devlist2h.awk,v 1.6 2001/01/28 09:43:41 aaron Exp $
d178 1
a178 1
	printf("const struct usb_known_product usb_known_products[] = {\n") > dfile
d184 16
a213 4
	printf("\t{ 0, 0, NULL }\n") > dfile
	printf("};\n\n") > dfile

	printf("const struct usb_known_vendor usb_known_vendors[] = {\n") > dfile
d216 3
a218 1
		printf("\t    USB_VENDOR_%s,\n", vendors[i, 1]) \
a219 1

d231 1
d234 1
a234 1
	printf("\t{ 0, NULL }\n") > dfile
@


1.4.2.2
log
@Merge in -current
@
text
@d2 2
a3 2
#	$OpenBSD$
#	$NetBSD: devlist2h.awk,v 1.9 2001/01/18 20:28:22 jdolecek Exp $
d178 1
a178 1
	printf("const struct usb_knowndev usb_knowndevs[] = {\n") > dfile
a183 16
		printf("\t    ") > dfile
		printf("0") > dfile
		printf(",\n") > dfile

		vendi = vendorindex[products[i, 1]];
		printf("\t    \"") > dfile
		j = 3;
		needspace = 0;
		while (vendors[vendi, j] != "") {
			if (needspace)
				printf(" ") > dfile
			printf("%s", vendors[vendi, j]) > dfile
			needspace = 1
			j++
		}
		printf("\",\n") > dfile
d198 4
d204 1
a204 3
		printf("\t    USB_VENDOR_%s, 0,\n", vendors[i, 1]) \
		    > dfile
		printf("\t    USB_KNOWNDEV_NOPROD,\n") \
d206 1
a217 1
		printf("\t    NULL,\n") > dfile
d220 1
a220 1
	printf("\t{ 0, 0, 0, NULL, NULL, }\n") > dfile
@


1.3
log
@spelling
@
text
@d2 1
@


1.2
log
@Sync with NetBSD;
Add some comments.  Change a type name.
@
text
@d2 1
a2 2
#	$OpenBSD$
#	$NetBSD: devlist2h.awk,v 1.7 1999/08/28 10:01:42 augustss Exp $
d66 1
a66 1
	printf(" * THIS FILE AUTOMATICALLY GENERATED.  DO NOT EDIT.\n") \
@


1.1
log
@From NetBSD; USB support.
@
text
@d3 1
a3 1
#	$NetBSD: devlist2h.awk,v 1.5 1999/04/03 18:59:51 augustss Exp $
d45 1
a45 1
		printf("/*\tFreeBSD \$Id\$\t*/\n\n") > dfile
d61 1
a61 1
		printf("/*\tFreeBSD \$Id\$\t*/\n\n") > hfile
@

