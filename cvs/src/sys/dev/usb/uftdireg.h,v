head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.20
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.18
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.12
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.14
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.6
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.10
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.8
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.4
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.12.0.18
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.16
	OPENBSD_5_0:1.12.0.14
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.12
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.10
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.6
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.8
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.4
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.2
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.4
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.8
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.6
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.8
	UBC:1.3.0.2
	UBC_BASE:1.3
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.2;
locks; strict;
comment	@ * @;


1.13
date	2012.09.11.16.04.44;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2008.07.05.14.41.28;	author mbalmer;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.16.06.28.25;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.12.21.38.48;	author tdeval;	state Exp;
branches;
next	1.9;

1.9
date	2004.07.11.07.17.58;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.25.04.07.32;	author nate;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.25.02.18.10;	author nate;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.10.02.56.53;	author nate;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.07.18.29.18;	author nate;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.07.18.08.04;	author nate;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.31.04.24.44;	author nate;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2001.02.20.04.15.29;	author nate;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2001.02.20.04.11.52;	author nate;	state Exp;
branches;
next	;

1.2.4.1
date	2001.05.14.22.26.21;	author niklas;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2001.11.13.21.10.04;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2003.03.28.00.38.31;	author niklas;	state Exp;
branches;
next	;

1.3.2.1
date	2002.06.11.03.42.30;	author art;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2002.10.29.00.33.32;	author art;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Support FTDI FT2232H.  This has a new base clock rate, different divisor,
and the buffersizes are now taken from the endpoint descriptors.
From Raphael Graf
@
text
@/*	$OpenBSD: uftdireg.h,v 1.12 2008/07/05 14:41:28 mbalmer Exp $ 	*/
/*	$NetBSD: uftdireg.h,v 1.6 2002/07/11 21:14:28 augustss Exp $ */

/*
 * Definitions for the FTDI USB Single Port Serial Converter -
 * known as FTDI_SIO (Serial Input/Output application of the chipset)
 *
 * The device is based on the FTDI FT8U100AX chip. It has a DB25 on one side,
 * USB on the other.
 *
 * Thanks to FTDI (http://www.ftdi.co.uk) for so kindly providing details
 * of the protocol required to talk to the device and ongoing assistance
 * during development.
 *
 * Bill Ryder - bryder@@sgi.com of Silicon Graphics, Inc. is the original
 * author of this file.
 */
/* Modified by Lennart Augustsson */

/* Vendor Request Interface */
#define FTDI_SIO_RESET 		0 /* Reset the port */
#define FTDI_SIO_MODEM_CTRL 	1 /* Set the modem control register */
#define FTDI_SIO_SET_FLOW_CTRL	2 /* Set flow control register */
#define FTDI_SIO_SET_BAUD_RATE	3 /* Set baud rate */
#define FTDI_SIO_SET_DATA	4 /* Set the data characteristics of the port */
#define FTDI_SIO_GET_STATUS	5 /* Retrieve current value of status reg */
#define FTDI_SIO_SET_EVENT_CHAR	6 /* Set the event character */
#define FTDI_SIO_SET_ERROR_CHAR	7 /* Set the error character */

/* Port Identifier Table */
#define FTDI_PIT_DEFAULT 	0 /* SIOA */
#define FTDI_PIT_SIOA		1 /* SIOA */
#define FTDI_PIT_SIOB		2 /* SIOB */
#define FTDI_PIT_PARALLEL	3 /* Parallel */

enum uftdi_type {
	UFTDI_TYPE_SIO,
	UFTDI_TYPE_8U232AM,
	UFTDI_TYPE_2232H
};

/*
 * BmRequestType:  0100 0000B
 * bRequest:       FTDI_SIO_RESET
 * wValue:         Control Value
 *                   0 = Reset SIO
 *                   1 = Purge RX buffer
 *                   2 = Purge TX buffer
 * wIndex:         Port
 * wLength:        0
 * Data:           None
 *
 * The Reset SIO command has this effect:
 *
 *    Sets flow control set to 'none'
 *    Event char = 0x0d
 *    Event trigger = disabled
 *    Purge RX buffer
 *    Purge TX buffer
 *    Clear DTR
 *    Clear RTS
 *    baud and data format not reset
 *
 * The Purge RX and TX buffer commands affect nothing except the buffers
 *
 */
/* FTDI_SIO_RESET */
#define FTDI_SIO_RESET_SIO 0
#define FTDI_SIO_RESET_PURGE_RX 1
#define FTDI_SIO_RESET_PURGE_TX 2


/*
 * BmRequestType:  0100 0000B
 * bRequest:       FTDI_SIO_SET_BAUDRATE
 * wValue:         BaudRate value - see below
 * wIndex:         Port
 * wLength:        0
 * Data:           None
 */
/* FTDI_SIO_SET_BAUDRATE */
enum {
	ftdi_sio_b300 = 0,
	ftdi_sio_b600 = 1,
	ftdi_sio_b1200 = 2,
	ftdi_sio_b2400 = 3,
	ftdi_sio_b4800 = 4,
	ftdi_sio_b9600 = 5,
	ftdi_sio_b19200 = 6,
	ftdi_sio_b38400 = 7,
	ftdi_sio_b57600 = 8,
	ftdi_sio_b115200 = 9
};

#define FTDI_8U232AM_FREQ 3000000 /* (48MHz / 16) */
#define FTDI_2232H_FREQ 12000000 /* (120MHz / 10) */

/* Bounds for normal divisors as 4-bit fixed precision ints. */
#define FTDI_8U232AM_MIN_DIV 0x20
#define FTDI_8U232AM_MAX_DIV 0x3fff8

/*
 * BmRequestType:  0100 0000B
 * bRequest:       FTDI_SIO_SET_DATA
 * wValue:         Data characteristics (see below)
 * wIndex:         Port
 * wLength:        0
 * Data:           No
 *
 * Data characteristics
 *
 *   B0..7   Number of data bits
 *   B8..10  Parity
 *           0 = None
 *           1 = Odd
 *           2 = Even
 *           3 = Mark
 *           4 = Space
 *   B11..13 Stop Bits
 *           0 = 1
 *           1 = 1.5
 *           2 = 2
 *   B14..15 Reserved
 *
 */
/* FTDI_SIO_SET_DATA */
#define FTDI_SIO_SET_DATA_BITS(n) (n)
#define FTDI_SIO_SET_DATA_PARITY_NONE (0x0 << 8)
#define FTDI_SIO_SET_DATA_PARITY_ODD (0x1 << 8)
#define FTDI_SIO_SET_DATA_PARITY_EVEN (0x2 << 8)
#define FTDI_SIO_SET_DATA_PARITY_MARK (0x3 << 8)
#define FTDI_SIO_SET_DATA_PARITY_SPACE (0x4 << 8)
#define FTDI_SIO_SET_DATA_STOP_BITS_1 (0x0 << 11)
#define FTDI_SIO_SET_DATA_STOP_BITS_15 (0x1 << 11)
#define FTDI_SIO_SET_DATA_STOP_BITS_2 (0x2 << 11)
#define FTDI_SIO_SET_BREAK (0x1 << 14)


/*
 * BmRequestType:   0100 0000B
 * bRequest:        FTDI_SIO_MODEM_CTRL
 * wValue:          ControlValue (see below)
 * wIndex:          Port
 * wLength:         0
 * Data:            None
 *
 * NOTE: If the device is in RTS/CTS flow control, the RTS set by this
 * command will be IGNORED without an error being returned
 * Also - you can not set DTR and RTS with one control message
 *
 * ControlValue
 * B0    DTR state
 *          0 = reset
 *          1 = set
 * B1    RTS state
 *          0 = reset
 *          1 = set
 * B2..7 Reserved
 * B8    DTR state enable
 *          0 = ignore
 *          1 = use DTR state
 * B9    RTS state enable
 *          0 = ignore
 *          1 = use RTS state
 * B10..15 Reserved
 */
/* FTDI_SIO_MODEM_CTRL */
#define FTDI_SIO_SET_DTR_MASK 0x1
#define FTDI_SIO_SET_DTR_HIGH (1 | ( FTDI_SIO_SET_DTR_MASK  << 8))
#define FTDI_SIO_SET_DTR_LOW  (0 | ( FTDI_SIO_SET_DTR_MASK  << 8))
#define FTDI_SIO_SET_RTS_MASK 0x2
#define FTDI_SIO_SET_RTS_HIGH (2 | ( FTDI_SIO_SET_RTS_MASK << 8))
#define FTDI_SIO_SET_RTS_LOW (0 | ( FTDI_SIO_SET_RTS_MASK << 8))


/*
 *   BmRequestType:  0100 0000b
 *   bRequest:       FTDI_SIO_SET_FLOW_CTRL
 *   wValue:         Xoff/Xon
 *   wIndex:         Protocol/Port - hIndex is protocol / lIndex is port
 *   wLength:        0
 *   Data:           None
 *
 * hIndex protocol is:
 *   B0 Output handshaking using RTS/CTS
 *       0 = disabled
 *       1 = enabled
 *   B1 Output handshaking using DTR/DSR
 *       0 = disabled
 *       1 = enabled
 *   B2 Xon/Xoff handshaking
 *       0 = disabled
 *       1 = enabled
 *
 * A value of zero in the hIndex field disables handshaking
 *
 * If Xon/Xoff handshaking is specified, the hValue field should contain the
 * XOFF character and the lValue field contains the XON character.
 */
/* FTDI_SIO_SET_FLOW_CTRL */
#define FTDI_SIO_DISABLE_FLOW_CTRL 0x0
#define FTDI_SIO_RTS_CTS_HS 0x1
#define FTDI_SIO_DTR_DSR_HS 0x2
#define FTDI_SIO_XON_XOFF_HS 0x4


/*
 *  BmRequestType:   0100 0000b
 *  bRequest:        FTDI_SIO_SET_EVENT_CHAR
 *  wValue:          Event Char
 *  wIndex:          Port
 *  wLength:         0
 *  Data:            None
 *
 * wValue:
 *   B0..7   Event Character
 *   B8      Event Character Processing
 *             0 = disabled
 *             1 = enabled
 *   B9..15  Reserved
 *
 * FTDI_SIO_SET_EVENT_CHAR
 *
 * Set the special event character for the specified communications port.
 * If the device sees this character it will immediately return the
 * data read so far - rather than wait 40ms or until 62 bytes are read
 * which is what normally happens.
 */



/*
 *  BmRequestType:  0100 0000b
 *  bRequest:       FTDI_SIO_SET_ERROR_CHAR
 *  wValue:         Error Char
 *  wIndex:         Port
 *  wLength:        0
 *  Data:           None
 *
 *  Error Char
 *  B0..7  Error Character
 *  B8     Error Character Processing
 *           0 = disabled
 *           1 = enabled
 *  B9..15 Reserved
 *
 *
 * FTDI_SIO_SET_ERROR_CHAR
 * Set the parity error replacement character for the specified communications
 * port.
 */


/*
 *   BmRequestType:   1100 0000b
 *   bRequest:        FTDI_SIO_GET_STATUS
 *   wValue:          zero
 *   wIndex:          Port
 *   wLength:         1		(2 for newer devices like the FT232R)
 *   Data:            Status
 *
 * One byte of data is returned
 * B0..3 0
 * B4    CTS
 *         0 = inactive
 *         1 = active
 * B5    DSR
 *         0 = inactive
 *         1 = active
 * B6    Ring Indicator (RI)
 *         0 = inactive
 *         1 = active
 * B7    Receive Line Signal Detect (RLSD)
 *         0 = inactive
 *         1 = active
 *
 * FTDI_SIO_GET_STATUS
 * Retrieve the current value of the modem status register.
 */
#define FTDI_SIO_CTS_MASK 0x10
#define FTDI_SIO_DSR_MASK 0x20
#define FTDI_SIO_RI_MASK  0x40
#define FTDI_SIO_RLSD_MASK 0x80



/*
 *
 * DATA FORMAT
 *
 * IN Endpoint
 *
 * The device reserves the first two bytes of data on this endpoint to contain
 * the current values of the modem and line status registers. In the absence of
 * data, the device generates a message consisting of these two status bytes
 * every 40 ms.
 *
 * Byte 0: Modem Status
 *   NOTE: 4 upper bits have same layout as the MSR register in a 16550
 *
 * Offset	Description
 * B0..3	Port
 * B4		Clear to Send (CTS)
 * B5		Data Set Ready (DSR)
 * B6		Ring Indicator (RI)
 * B7		Receive Line Signal Detect (RLSD)
 *
 * Byte 1: Line Status
 *   NOTE: same layout as the LSR register in a 16550
 *
 * Offset	Description
 * B0	Data Ready (DR)
 * B1	Overrun Error (OE)
 * B2	Parity Error (PE)
 * B3	Framing Error (FE)
 * B4	Break Interrupt (BI)
 * B5	Transmitter Holding Register (THRE)
 * B6	Transmitter Empty (TEMT)
 * B7	Error in RCVR FIFO
 *
 *
 * OUT Endpoint
 *
 * This device reserves the first bytes of data on this endpoint contain the
 * length and port identifier of the message. For the FTDI USB Serial converter
 * the port identifier is always 1.
 *
 * Byte 0: Port & length
 *
 * Offset	Description
 * B0..1	Port
 * B2..7	Length of message - (not including Byte 0)
 *
 */
#define FTDI_PORT_MASK 0x0f
#define FTDI_MSR_MASK 0xf0
#define FTDI_GET_MSR(p) (((p)[0]) & FTDI_MSR_MASK)
#define FTDI_GET_LSR(p) ((p)[1])
#define FTDI_LSR_MASK (~0x60) /* interesting bits */
#define FTDI_OUT_TAG(len, port) (((len) << 2) | (port))
@


1.12
log
@Fix a comment:  Code defines FTDI_SIO_GET_STATUS, use that in
comments, not FTDI_SIO_GET_MODEM_STATUS which is not defined anywhere.
Also note that on newer devices like the FT232R the request is two
bytes, not one.
@
text
@d1 1
a1 1
/*	$OpenBSD: uftdireg.h,v 1.11 2006/06/16 06:28:25 deraadt Exp $ 	*/
d38 2
a39 1
	UFTDI_TYPE_8U232AM
d95 2
a96 1
#define FTDI_8U232AM_FREQ 3000000
@


1.11
log
@algorithmically handle baudrate requests, allowing all sorts of
strange rates one might need; mrd@@alkemio.org
@
text
@d1 1
a1 1
/*	$OpenBSD: uftdireg.h,v 1.10 2005/03/12 21:38:48 tdeval Exp $ 	*/
d254 1
a254 1
 *   bRequest:        FTDI_SIO_GET_MODEM_STATUS
d257 1
a257 1
 *   wLength:         1
d275 1
a275 1
 * FTDI_SIO_GET_MODEM_STATUS
@


1.10
log
@Typos.
@
text
@d1 1
a1 1
/*	$OpenBSD: uftdireg.h,v 1.9 2004/07/11 07:17:58 deraadt Exp $ 	*/
d94 5
a98 17
enum {
	ftdi_8u232am_b300 = 0x2710,
	ftdi_8u232am_b600 = 0x1388,
	ftdi_8u232am_b1200 = 0x09c4,
	ftdi_8u232am_b2400 = 0x04e2,
	ftdi_8u232am_b4800 = 0x0271,
	ftdi_8u232am_b9600 = 0x4138,
	ftdi_8u232am_b19200 = 0x809c,
	ftdi_8u232am_b38400 = 0xc04e,
	ftdi_8u232am_b57600 = 0x0034,
	ftdi_8u232am_b115200 = 0x001a,
	ftdi_8u232am_b230400 = 0x000d,
	ftdi_8u232am_b460800 = 0x4006,
	ftdi_8u232am_b921600 = 0x8003,
	ftdi_8u232am_b2000000 = 0x0001, /* special case for 2M baud */
	ftdi_8u232am_b3000000 = 0x0000, /* special case for 3M baud */
};
@


1.9
log
@support 4 more uftdi ports (3 from freebsd, 1 from netbsd)
@
text
@d1 1
a1 1
/*	$OpenBSD: uftdireg.h,v 1.8 2002/07/25 04:07:32 nate Exp $ 	*/
d11 2
a12 2
 * Thanx to FTDI (http://www.ftdi.co.uk) for so kindly providing details
 * of the protocol required to talk to the device and ongoing assistence
d190 1
a190 1
 *   wIndex:         Protocol/Port - hIndex is protocl / lIndex is port
@


1.8
log
@update $NetBSD$ tags
@
text
@d1 1
a1 1
/*	$OpenBSD: uftdireg.h,v 1.7 2002/07/25 02:18:10 nate Exp $ 	*/
d107 3
a109 1
	ftdi_8u232am_b921600 = 0x8003
@


1.7
log
@get rid of trailing whitespace
@
text
@d1 2
a2 2
/*	$OpenBSD: uftdireg.h,v 1.6 2002/07/10 02:56:53 nate Exp $ 	*/
/*	$NetBSD: uftdireg.h,v 1.5 2002/05/08 18:10:19 scw Exp $ */
@


1.6
log
@Support for USB->Serial adapters based on FT8U232AM
various updates
From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: uftdireg.h,v 1.5 2002/05/07 18:29:18 nate Exp $ 	*/
d5 2
a6 2
 * Definitions for the FTDI USB Single Port Serial Converter - 
 * known as FTDI_SIO (Serial Input/Output application of the chipset) 
d8 1
a8 1
 * The device is based on the FTDI FT8U100AX chip. It has a DB25 on one side, 
d44 1
a44 1
 * wValue:         Control Value 
d82 2
a83 2
	ftdi_sio_b300 = 0, 
	ftdi_sio_b600 = 1, 
d111 1
a111 1
 * BmRequestType:  0100 0000B 
d147 1
a147 1
/* 
d189 1
a189 1
 *   wLength:        0 
d207 1
a207 1
 */  
d209 1
a209 1
#define FTDI_SIO_DISABLE_FLOW_CTRL 0x0 
d214 2
a215 2
 
/* 
d230 1
a230 1
 * FTDI_SIO_SET_EVENT_CHAR 
d239 2
a240 2
          
/* 
d262 1
a262 1
/* 
d269 2
a270 2
 * 
 * One byte of data is returned 
d283 1
a283 1
 *         1 = active 
d296 1
a296 1
 *     
d298 1
a298 1
 * 
d300 1
a300 1
 * 
d305 1
a305 1
 * 
d308 1
a308 1
 * 
d315 1
a315 1
 * 
d318 1
a318 1
 * 
d331 1
a331 1
 * 
d335 1
a335 1
 * 
d337 1
a337 1
 * 
d341 1
a341 1
 * 
@


1.5
log
@Meant to commit only ulpt and committed everything.  Most things weren't ready
@
text
@d1 2
a2 2
/*	$OpenBSD: uftdireg.h,v 1.3 2001/10/31 04:24:44 nate Exp $ 	*/
/*	$NetBSD: uftdireg.h,v 1.3 2001/06/12 14:59:28 wiz Exp $ */
d36 5
d94 15
d144 1
@


1.4
log
@Sync ulpt driver with NetBSD
@
text
@d2 1
a2 1
/*	$NetBSD: uftdireg.h,v 1.4 2001/12/17 14:31:02 ichiro Exp $ */
a123 1
#define FTDI_SIO_SET_BREAK (0x1 << 14)
@


1.3
log
@Synchronize usb code with NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: uftdireg.h,v 1.2 2001/02/20 04:15:29 nate Exp $ 	*/
/*	$NetBSD: uftdireg.h,v 1.3 2001/06/12 14:59:28 wiz Exp $ */
d124 1
@


1.3.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: uftdireg.h,v 1.3 2001/10/31 04:24:44 nate Exp $ 	*/
@


1.3.2.2
log
@sync to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$ 	*/
/*	$NetBSD: uftdireg.h,v 1.6 2002/07/11 21:14:28 augustss Exp $ */
d5 2
a6 2
 * Definitions for the FTDI USB Single Port Serial Converter -
 * known as FTDI_SIO (Serial Input/Output application of the chipset)
d8 1
a8 1
 * The device is based on the FTDI FT8U100AX chip. It has a DB25 on one side,
a35 5
enum uftdi_type {
	UFTDI_TYPE_SIO,
	UFTDI_TYPE_8U232AM
};

d39 1
a39 1
 * wValue:         Control Value
d77 2
a78 2
	ftdi_sio_b300 = 0,
	ftdi_sio_b600 = 1,
a88 15
enum {
	ftdi_8u232am_b300 = 0x2710,
	ftdi_8u232am_b600 = 0x1388,
	ftdi_8u232am_b1200 = 0x09c4,
	ftdi_8u232am_b2400 = 0x04e2,
	ftdi_8u232am_b4800 = 0x0271,
	ftdi_8u232am_b9600 = 0x4138,
	ftdi_8u232am_b19200 = 0x809c,
	ftdi_8u232am_b38400 = 0xc04e,
	ftdi_8u232am_b57600 = 0x0034,
	ftdi_8u232am_b115200 = 0x001a,
	ftdi_8u232am_b230400 = 0x000d,
	ftdi_8u232am_b460800 = 0x4006,
	ftdi_8u232am_b921600 = 0x8003
};
d91 1
a91 1
 * BmRequestType:  0100 0000B
a123 1
#define FTDI_SIO_SET_BREAK (0x1 << 14)
d126 1
a126 1
/*
d168 1
a168 1
 *   wLength:        0
d186 1
a186 1
 */
d188 1
a188 1
#define FTDI_SIO_DISABLE_FLOW_CTRL 0x0
d193 2
a194 2

/*
d209 1
a209 1
 * FTDI_SIO_SET_EVENT_CHAR
d218 2
a219 2

/*
d241 1
a241 1
/*
d248 2
a249 2
 *
 * One byte of data is returned
d262 1
a262 1
 *         1 = active
d275 1
a275 1
 *
d277 1
a277 1
 *
d279 1
a279 1
 *
d284 1
a284 1
 *
d287 1
a287 1
 *
d294 1
a294 1
 *
d297 1
a297 1
 *
d310 1
a310 1
 *
d314 1
a314 1
 *
d316 1
a316 1
 *
d320 1
a320 1
 *
@


1.2
log
@Forgot $OpenBSD$ tags
@
text
@d1 3
a3 1
/*	$OpenBSD$ 	*/
d265 1
a265 1
 * Retreive the current value of the modem status register.
@


1.2.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: uftdireg.h,v 1.2 2001/02/20 04:15:29 nate Exp $ 	*/
@


1.2.4.2
log
@Merge in -current
@
text
@d1 1
a1 3
/*	$OpenBSD$ 	*/
/*	$NetBSD: uftdireg.h,v 1.3 2001/06/12 14:59:28 wiz Exp $ */

d263 1
a263 1
 * Retrieve the current value of the modem status register.
@


1.2.4.3
log
@Sync the SMP branch with 3.3
@
text
@d2 1
a2 1
/*	$NetBSD: uftdireg.h,v 1.6 2002/07/11 21:14:28 augustss Exp $ */
d5 2
a6 2
 * Definitions for the FTDI USB Single Port Serial Converter -
 * known as FTDI_SIO (Serial Input/Output application of the chipset)
d8 1
a8 1
 * The device is based on the FTDI FT8U100AX chip. It has a DB25 on one side,
a35 5
enum uftdi_type {
	UFTDI_TYPE_SIO,
	UFTDI_TYPE_8U232AM
};

d39 1
a39 1
 * wValue:         Control Value
d77 2
a78 2
	ftdi_sio_b300 = 0,
	ftdi_sio_b600 = 1,
a88 15
enum {
	ftdi_8u232am_b300 = 0x2710,
	ftdi_8u232am_b600 = 0x1388,
	ftdi_8u232am_b1200 = 0x09c4,
	ftdi_8u232am_b2400 = 0x04e2,
	ftdi_8u232am_b4800 = 0x0271,
	ftdi_8u232am_b9600 = 0x4138,
	ftdi_8u232am_b19200 = 0x809c,
	ftdi_8u232am_b38400 = 0xc04e,
	ftdi_8u232am_b57600 = 0x0034,
	ftdi_8u232am_b115200 = 0x001a,
	ftdi_8u232am_b230400 = 0x000d,
	ftdi_8u232am_b460800 = 0x4006,
	ftdi_8u232am_b921600 = 0x8003
};
d91 1
a91 1
 * BmRequestType:  0100 0000B
a123 1
#define FTDI_SIO_SET_BREAK (0x1 << 14)
d126 1
a126 1
/*
d168 1
a168 1
 *   wLength:        0
d186 1
a186 1
 */
d188 1
a188 1
#define FTDI_SIO_DISABLE_FLOW_CTRL 0x0
d193 2
a194 2

/*
d209 1
a209 1
 * FTDI_SIO_SET_EVENT_CHAR
d218 2
a219 2

/*
d241 1
a241 1
/*
d248 2
a249 2
 *
 * One byte of data is returned
d262 1
a262 1
 *         1 = active
d275 1
a275 1
 *
d277 1
a277 1
 *
d279 1
a279 1
 *
d284 1
a284 1
 *
d287 1
a287 1
 *
d294 1
a294 1
 *
d297 1
a297 1
 *
d310 1
a310 1
 *
d314 1
a314 1
 *
d316 1
a316 1
 *
d320 1
a320 1
 *
@


1.1
log
@Add the uftdi driver for the FTDI usb->serial converter.
Driver from NetBSD. ok aaron@@
@
text
@d1 1
@

