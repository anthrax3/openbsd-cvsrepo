head	1.4;
access;
symbols
	OPENBSD_5_4:1.3.0.32
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.30
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.28
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.26
	OPENBSD_5_0:1.3.0.24
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.22
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.20
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.16
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.18
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.14
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.12
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.10
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.6
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.18
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.14
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.16
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.12
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.10
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.8
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.2
	UBC_BASE:1.2
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.2;
locks; strict;
comment	@ * @;


1.4
date	2013.10.25.03.09.59;	author jeremy;	state dead;
branches;
next	1.3;

1.3
date	2006.01.06.03.36.32;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.31.04.24.44;	author nate;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.28.09.43.41;	author aaron;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2001.05.14.22.26.21;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2001.11.13.21.10.04;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Add support for Microsoft XBox 360 controller as a uhid. It doesn't use
the standard interface class and doesn't have a report descriptor, so
use a manually created one.

The controller shows up as multiple devices with different interface
numbers, so only match the first one as a uhid.  The controller shows up
as both a uhid and a ugen.

Rename ugraphire_rdesc.h to uhid_rdesc.h and add the manually created
Xbox 360 report descriptor to the file.

Add ifndef SMALL_KERNEL around the related blocks for the XBox 360
controller and Wacom Graphire, so this should actually shrink the
ramdisks.

Manual report descriptor taken from a 2005 FreeBSD commit.  Much help
from mpi@@ for getting this suitable for commit to OpenBSD.

OK mpi@@
@
text
@/*	$OpenBSD: ugraphire_rdesc.h,v 1.3 2006/01/06 03:36:32 brad Exp $ */
/*	$NetBSD: ugraphire_rdesc.h,v 1.1 2000/12/29 01:47:49 augustss Exp $	*/
/*
 * Copyright (c) 2000 Nick Hibma <n_hibma@@freebsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

static uByte uhid_graphire_report_descr[] = {
    0x05, 0x0d,                    /*  USAGE_PAGE (Digitizers)		*/
    0x09, 0x01,                    /*  USAGE (Digitizer)		*/
    0xa1, 0x01,                    /*  COLLECTION (Application)		*/
    0x85, 0x02,                    /*    REPORT_ID (2)			*/
    0x05, 0x0d,                    /*    USAGE_PAGE (Digitizers)	*/
    0x09, 0x01,                    /*    USAGE (Digitizer)		*/
    0xa1, 0x00,                    /*    COLLECTION (Physical)		*/
    0x15, 0x00,                    /*      LOGICAL_MINIMUM (0)		*/
    0x25, 0x01,                    /*      LOGICAL_MAXIMUM (1)		*/
    0x09, 0x33,                    /*      USAGE (Touch)		*/
    0x95, 0x01,                    /*      REPORT_COUNT (1)		*/
    0x75, 0x01,                    /*      REPORT_SIZE (1)		*/
    0x81, 0x02,                    /*      INPUT (Data,Var,Abs)		*/
    0x09, 0x44,                    /*      USAGE (Barrel Switch)	*/
    0x95, 0x02,                    /*      REPORT_COUNT (2)		*/
    0x75, 0x01,                    /*      REPORT_SIZE (1)		*/
    0x81, 0x02,                    /*      INPUT (Data,Var,Abs)		*/
    0x09, 0x00,                    /*      USAGE (Undefined)		*/
    0x95, 0x02,                    /*      REPORT_COUNT (2)		*/
    0x75, 0x01,                    /*      REPORT_SIZE (1)		*/
    0x81, 0x03,                    /*      INPUT (Cnst,Var,Abs)		*/
    0x09, 0x3c,                    /*      USAGE (Invert)		*/
    0x95, 0x01,                    /*      REPORT_COUNT (1)		*/
    0x75, 0x01,                    /*      REPORT_SIZE (1)		*/
    0x81, 0x02,                    /*      INPUT (Data,Var,Abs)		*/
    0x09, 0x38,                    /*      USAGE (Transducer Index)	*/
    0x95, 0x01,                    /*      REPORT_COUNT (1)		*/
    0x75, 0x01,                    /*      REPORT_SIZE (1)		*/
    0x81, 0x02,                    /*      INPUT (Data,Var,Abs)		*/
    0x09, 0x32,                    /*      USAGE (In Range)		*/
    0x95, 0x01,                    /*      REPORT_COUNT (1)		*/
    0x75, 0x01,                    /*      REPORT_SIZE (1)		*/
    0x81, 0x02,                    /*      INPUT (Data,Var,Abs)		*/
    0x05, 0x01,                    /*      USAGE_PAGE (Generic Desktop)	*/
    0x09, 0x30,                    /*      USAGE (X)			*/
    0x15, 0x00,                    /*      LOGICAL_MINIMUM (0)		*/
    0x26, 0xde, 0x27,              /*      LOGICAL_MAXIMUM (10206)	*/
    0x95, 0x01,                    /*      REPORT_COUNT (1)		*/
    0x75, 0x10,                    /*      REPORT_SIZE (16)		*/
    0x81, 0x02,                    /*      INPUT (Data,Var,Abs)		*/
    0x09, 0x31,                    /*      USAGE (Y)			*/
    0x26, 0xfe, 0x1c,              /*      LOGICAL_MAXIMUM (7422)	*/
    0x95, 0x01,                    /*      REPORT_COUNT (1)		*/
    0x75, 0x10,                    /*      REPORT_SIZE (16)		*/
    0x81, 0x02,                    /*      INPUT (Data,Var,Abs)		*/
    0x05, 0x0d,                    /*      USAGE_PAGE (Digitizers)	*/
    0x09, 0x30,                    /*      USAGE (Tip Pressure)		*/
    0x26, 0xff, 0x01,              /*      LOGICAL_MAXIMUM (511)	*/
    0x95, 0x01,                    /*      REPORT_COUNT (1)		*/
    0x75, 0x10,                    /*      REPORT_SIZE (16)		*/
    0x81, 0x02,                    /*      INPUT (Data,Var,Abs)		*/
    0xc0,                          /*    END_COLLECTION			*/
    0x05, 0x0d,                    /*    USAGE_PAGE (Digitizers)	*/
    0x09, 0x00,                    /*    USAGE (Undefined)		*/
    0x85, 0x02,                    /*    REPORT_ID (2)			*/
    0x95, 0x01,                    /*    REPORT_COUNT (1)		*/
    0xb1, 0x02,                    /*    FEATURE (Data,Var,Abs)		*/
    0x09, 0x00,                    /*    USAGE (Undefined)		*/
    0x85, 0x03,                    /*    REPORT_ID (3)			*/
    0x95, 0x01,                    /*    REPORT_COUNT (1)		*/
    0xb1, 0x02,                    /*    FEATURE (Data,Var,Abs)		*/
    0xc0,                          /*  END_COLLECTION			*/
};

static uByte uhid_graphire3_4x5_report_descr[] = {
    0x05, 0x01,                    /* USAGE_PAGE (Generic Desktop) */
    0x09, 0x02,                    /* USAGE (Mouse) */
    0xa1, 0x01,                    /* COLLECTION (Application) */
    0x85, 0x01,                    /*   REPORT_ID (1) */
    0x09, 0x01,                    /*   USAGE (Pointer) */
    0xa1, 0x00,                    /*   COLLECTION (Physical) */
    0x05, 0x09,                    /*     USAGE_PAGE (Button) */
    0x19, 0x01,                    /*     USAGE_MINIMUM (Button 1) */
    0x29, 0x03,                    /*     USAGE_MAXIMUM (Button 3) */
    0x15, 0x00,                    /*     LOGICAL_MINIMUM (0) */
    0x25, 0x01,                    /*     LOGICAL_MAXIMUM (1) */
    0x95, 0x03,                    /*     REPORT_COUNT (3) */
    0x75, 0x01,                    /*     REPORT_SIZE (1) */
    0x81, 0x02,                    /*     INPUT (Data,Var,Abs) */
    0x95, 0x01,                    /*     REPORT_COUNT (1) */
    0x75, 0x05,                    /*     REPORT_SIZE (5) */
    0x81, 0x01,                    /*     INPUT (Cnst,Ary,Abs) */
    0x05, 0x01,                    /*     USAGE_PAGE (Generic Desktop) */
    0x09, 0x30,                    /*     USAGE (X) */
    0x09, 0x31,                    /*     USAGE (Y) */
    0x09, 0x38,                    /*     USAGE (Wheel) */
    0x15, 0x81,                    /*     LOGICAL_MINIMUM (-127) */
    0x25, 0x7f,                    /*     LOGICAL_MAXIMUM (127) */
    0x75, 0x08,                    /*     REPORT_SIZE (8) */
    0x95, 0x03,                    /*     REPORT_COUNT (3) */
    0x81, 0x06,                    /*     INPUT (Data,Var,Rel) */
    0xc0,                          /*   END_COLLECTION */
    0xc0,                          /* END_COLLECTION */
    0x05, 0x0d,                    /* USAGE_PAGE (Digitizers) */
    0x09, 0x01,                    /* USAGE (Pointer) */
    0xa1, 0x01,                    /* COLLECTION (Application) */
    0x85, 0x02,                    /*   REPORT_ID (2) */
    0x05, 0x0d,                    /*   USAGE_PAGE (Digitizers) */
    0x09, 0x01,                    /*   USAGE (Digitizer) */
    0xa1, 0x00,                    /*   COLLECTION (Physical) */
    0x09, 0x33,                    /*     USAGE (Touch) */
    0x09, 0x44,                    /*     USAGE (Barrel Switch) */
    0x09, 0x44,                    /*     USAGE (Barrel Switch) */
    0x15, 0x00,                    /*     LOGICAL_MINIMUM (0) */
    0x25, 0x01,                    /*     LOGICAL_MAXIMUM (1) */
    0x75, 0x01,                    /*     REPORT_SIZE (1) */
    0x95, 0x03,                    /*     REPORT_COUNT (3) */
    0x81, 0x02,                    /*     INPUT (Data,Var,Abs) */
    0x75, 0x01,                    /*     REPORT_SIZE (1) */
    0x95, 0x02,                    /*     REPORT_COUNT (2) */
    0x81, 0x01,                    /*     INPUT (Cnst,Ary,Abs) */
    0x09, 0x3c,                    /*     USAGE (Invert) */
    0x09, 0x38,                    /*     USAGE (Transducer Index) */
    0x09, 0x32,                    /*     USAGE (In Range) */
    0x75, 0x01,                    /*     REPORT_SIZE (1) */
    0x95, 0x03,                    /*     REPORT_COUNT (3) */
    0x81, 0x02,                    /*     INPUT (Data,Var,Abs) */
    0x05, 0x01,                    /*     USAGE_PAGE (Generic Desktop) */
    0x09, 0x30,                    /*     USAGE (X) */
    0x15, 0x00,                    /*     LOGICAL_MINIMUM (0) */
    0x26, 0xde, 0x27,              /*     LOGICAL_MAXIMUM (10206) */
    0x75, 0x10,                    /*     REPORT_SIZE (16) */
    0x95, 0x01,                    /*     REPORT_COUNT (1) */
    0x81, 0x02,                    /*     INPUT (Data,Var,Abs) */
    0x09, 0x31,                    /*     USAGE (Y) */
    0x26, 0xfe, 0x1c,              /*     LOGICAL_MAXIMUM (7422) */
    0x75, 0x10,                    /*     REPORT_SIZE (16) */
    0x95, 0x01,                    /*     REPORT_COUNT (1) */
    0x81, 0x02,                    /*     INPUT (Data,Var,Abs) */
    0x05, 0x0d,                    /*     USAGE_PAGE (Digitizers) */
    0x09, 0x30,                    /*     USAGE (Tip Pressure) */
    0x26, 0xff, 0x01,              /*     LOGICAL_MAXIMUM (511) */
    0x75, 0x10,                    /*     REPORT_SIZE (16) */
    0x95, 0x01,                    /*     REPORT_COUNT (1) */
    0x81, 0x02,                    /*     INPUT (Data,Var,Abs) */
    0xc0,                          /*   END_COLLECTION */
    0x05, 0x0d,                    /*   USAGE_PAGE (Digitizers) */
    0x09, 0x00,                    /*   USAGE (Undefined) */
    0x85, 0x02,                    /*   REPORT_ID (2) */
    0x95, 0x01,                    /*   REPORT_COUNT (1) */
    0xb1, 0x02,                    /*   FEATURE (Data,Var,Abs) */
    0x09, 0x00,                    /*   USAGE (Undefined) */
    0x85, 0x03,                    /*   REPORT_ID (3) */
    0x95, 0x01,                    /*   REPORT_COUNT (1) */
    0xb1, 0x02,                    /*   FEATURE (Data,Var,Abs) */
    0xc0                           /* END_COLLECTION */
};

@


1.3
log
@add Wacom Graphire3 and Graphire4 support.

From NetBSD via Michael Knudsen

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ugraphire_rdesc.h,v 1.2 2001/10/31 04:24:44 nate Exp $ */
@


1.2
log
@Synchronize usb code with NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: ugraphire_rdesc.h,v 1.1 2001/01/28 09:43:41 aaron Exp $ */
d93 85
@


1.1
log
@Another USB sync with NetBSD. We are still lacking an up-to-date umass(4)
driver. I would appreciate it if someone with the hardware looked into it.
I also have to take a closer look at changes to the USB Ethernet drivers,
as well as import some drivers we are missing (uftdi, if_upl, yap, etc.)
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD:  $	*/
@


1.1.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: ugraphire_rdesc.h,v 1.1 2001/01/28 09:43:41 aaron Exp $ */
@


1.1.4.2
log
@Merge in -current
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: ugraphire_rdesc.h,v 1.1 2000/12/29 01:47:49 augustss Exp $	*/
@


