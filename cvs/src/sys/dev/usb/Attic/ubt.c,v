head	1.27;
access;
symbols
	OPENBSD_5_5:1.26.0.4
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.23.0.2
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.21.0.8
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.6
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.4
	OPENBSD_5_0:1.21.0.2
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.20.0.2
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.17.0.2
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.6
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.2
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8;
locks; strict;
comment	@ * @;


1.27
date	2014.07.11.21.54.38;	author tedu;	state dead;
branches;
next	1.26;
commitid	0n9cIGBISFAEt4b1;

1.26
date	2013.12.15.14.28.35;	author pirofti;	state Exp;
branches;
next	1.25;

1.25
date	2013.11.06.17.04.47;	author pirofti;	state Exp;
branches;
next	1.24;

1.24
date	2013.08.07.15.56.03;	author tedu;	state Exp;
branches;
next	1.23;

1.23
date	2013.04.15.09.23.02;	author mglocker;	state Exp;
branches;
next	1.22;

1.22
date	2013.03.28.03.58.03;	author tedu;	state Exp;
branches;
next	1.21;

1.21
date	2011.07.03.15.47.17;	author matthew;	state Exp;
branches;
next	1.20;

1.20
date	2011.01.25.20.03.36;	author jakemsr;	state Exp;
branches;
next	1.19;

1.19
date	2010.09.24.08.33.59;	author yuo;	state Exp;
branches;
next	1.18;

1.18
date	2010.08.31.16.20.48;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2010.07.02.02.40.16;	author blambert;	state Exp;
branches;
next	1.16;

1.16
date	2010.04.22.21.20.22;	author sthen;	state Exp;
branches;
next	1.15;

1.15
date	2009.10.13.19.33.17;	author pirofti;	state Exp;
branches;
next	1.14;

1.14
date	2008.11.22.04.42.58;	author uwe;	state Exp;
branches;
next	1.13;

1.13
date	2008.07.10.13.48.54;	author mbalmer;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.26.05.42.18;	author ray;	state Exp;
branches;
next	1.11;

1.11
date	2008.02.24.21.34.48;	author uwe;	state Exp;
branches;
next	1.10;

1.10
date	2007.11.09.18.05.51;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2007.10.11.18.33.14;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.14.10.11.15;	author mbalmer;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.12.16.26.36;	author mbalmer;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.10.14.49.00;	author mbalmer;	state Exp;
branches;
next	1.5;

1.5
date	2007.06.10.10.53.48;	author mbalmer;	state Exp;
branches;
next	1.4;

1.4
date	2007.06.06.19.25.49;	author mk;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.01.05.23.49;	author gwk;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.31.05.07.19;	author gwk;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.30.12.15.02;	author gwk;	state Exp;
branches;
next	;


desc
@@


1.27
log
@"It's not the years, honey; it's the mileage."

bluetooth support doesn't work and isn't going anywhere. the current
design is a dead end, and should not be the basis for any future support.
general consensus says to whack it so as to not mislead the unwary.
@
text
@/*	$OpenBSD: ubt.c,v 1.26 2013/12/15 14:28:35 pirofti Exp $	*/
/*	$NetBSD: ubt.c,v 1.35 2008/07/28 14:19:26 drochner Exp $	*/

/*-
 * Copyright (c) 2006 Itronix Inc.
 * All rights reserved.
 *
 * Written by Iain Hibbert for Itronix Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of Itronix Inc. may not be used to endorse
 *    or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ITRONIX INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL ITRONIX INC. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Copyright (c) 2002, 2003 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net) and
 * David Sainty (David.Sainty@@dtsp.co.nz).
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * This driver originally written by Lennart Augustsson and David Sainty,
 * but was mostly rewritten for the NetBSD Bluetooth protocol stack by
 * Iain Hibbert for Itronix, Inc using the FreeBSD ng_ubt.c driver as a
 * reference.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/ioctl.h>
#include <sys/kernel.h>
#include <sys/malloc.h>
#include <sys/mbuf.h>
#include <sys/systm.h>
#include <sys/timeout.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdi_util.h>
#include <dev/usb/usbdevs.h>

#include <netbt/bluetooth.h>
#include <netbt/hci.h>

/*******************************************************************************
 *
 *	debugging stuff
 */
#undef DPRINTF
#undef DPRINTFN

#define UBT_DEBUG 0
#ifdef UBT_DEBUG
int	ubt_debug = UBT_DEBUG;

#define DPRINTF(fmt, args...)		do {		\
	if (ubt_debug)					\
		printf("%s: "fmt, __func__ , ##args);	\
} while (/* CONSTCOND */0)

#define DPRINTFN(n, fmt, args...)	do {		\
	if (ubt_debug > (n))				\
		printf("%s: "fmt, __func__ , ##args);	\
} while (/* CONSTCOND */0)

#else
#define DPRINTF(...)
#define DPRINTFN(...)
#endif

/*******************************************************************************
 *
 *	ubt softc structure
 *
 */

/* buffer sizes */
/*
 * NB: although ACL packets can extend to 65535 bytes, most devices
 * have max_acl_size at much less (largest I have seen is 384)
 */
#define UBT_BUFSIZ_CMD		(HCI_CMD_PKT_SIZE - 1)
#define UBT_BUFSIZ_ACL		(2048 - 1)
#define UBT_BUFSIZ_EVENT	(HCI_EVENT_PKT_SIZE - 1)

/* Transmit timeouts */
#define UBT_CMD_TIMEOUT		USBD_DEFAULT_TIMEOUT
#define UBT_ACL_TIMEOUT		USBD_DEFAULT_TIMEOUT

/*
 * ISOC transfers
 *
 * xfer buffer size depends on the frame size, and the number
 * of frames per transfer is fixed, as each frame should be
 * 1ms worth of data. This keeps the rate that xfers complete
 * fairly constant. We use multiple xfers to keep the hardware
 * busy
 */
#define UBT_NXFERS		3	/* max xfers to queue */
#define UBT_NFRAMES		10	/* frames per xfer */

struct ubt_isoc_xfer {
	struct ubt_softc	*softc;
	struct usbd_xfer	*xfer;
	uint8_t			*buf;
	uint16_t		 size[UBT_NFRAMES];
	int			 busy;
};

struct ubt_softc {
	struct device		 sc_dev;
	struct usbd_device	*sc_udev;
	int			 sc_refcnt;
	int			 sc_enabled;

	/* Control Interface */
	struct usbd_interface	*sc_iface0;

	/* Commands (control) */
	struct usbd_xfer	*sc_cmd_xfer;
	uint8_t			*sc_cmd_buf;
	int			 sc_cmd_busy;	/* write active */
	struct ifqueue		 sc_cmd_queue;	/* output queue */

	/* Events (interrupt) */
	int			 sc_evt_addr;	/* endpoint address */
	struct usbd_pipe	*sc_evt_pipe;
	uint8_t			*sc_evt_buf;

	/* ACL data (in) */
	int			 sc_aclrd_addr;	/* endpoint address */
	struct usbd_pipe	*sc_aclrd_pipe;	/* read pipe */
	struct usbd_xfer	*sc_aclrd_xfer;	/* read xfer */
	uint8_t			*sc_aclrd_buf;	/* read buffer */
	int			 sc_aclrd_busy;	/* reading */

	/* ACL data (out) */
	int			 sc_aclwr_addr;	/* endpoint address */
	struct usbd_pipe	*sc_aclwr_pipe;	/* write pipe */
	struct usbd_xfer	*sc_aclwr_xfer;	/* write xfer */
	uint8_t			*sc_aclwr_buf;	/* write buffer */
	int			 sc_aclwr_busy;	/* write active */
	struct ifqueue		 sc_aclwr_queue;/* output queue */

	/* ISOC interface */
	struct usbd_interface	*sc_iface1;	/* ISOC interface */
	int			 sc_config;	/* current config no */
	int			 sc_alt_config;	/* no of alternates */

	/* SCO data (in) */
	int			 sc_scord_addr;	/* endpoint address */
	struct usbd_pipe	*sc_scord_pipe;	/* read pipe */
	int			 sc_scord_size;	/* frame length */
	struct ubt_isoc_xfer	 sc_scord[UBT_NXFERS];
	struct mbuf		*sc_scord_mbuf;	/* current packet */

	/* SCO data (out) */
	int			 sc_scowr_addr;	/* endpoint address */
	struct usbd_pipe	*sc_scowr_pipe;	/* write pipe */
	int			 sc_scowr_size;	/* frame length */
	struct ubt_isoc_xfer	 sc_scowr[UBT_NXFERS];
	struct mbuf		*sc_scowr_mbuf;	/* current packet */
	int			 sc_scowr_busy;	/* write active */
	struct ifqueue		 sc_scowr_queue;/* output queue */

	/* Protocol structure */
	struct hci_unit		*sc_unit;
	struct bt_stats		 sc_stats;

	/* Successfully attached */
	int			 sc_ok;
};

/*
 * Bluetooth unit/USB callback routines
 */
int ubt_enable(struct device *);
void ubt_disable(struct device *);

void ubt_xmit_cmd(struct device *, struct mbuf *);
void ubt_xmit_cmd_start(struct ubt_softc *);
void ubt_xmit_cmd_complete(struct usbd_xfer *, void *, usbd_status);

void ubt_xmit_acl(struct device *, struct mbuf *);
void ubt_xmit_acl_start(struct ubt_softc *);
void ubt_xmit_acl_complete(struct usbd_xfer *, void *, usbd_status);

void ubt_xmit_sco(struct device *, struct mbuf *);
void ubt_xmit_sco_start(struct ubt_softc *);
void ubt_xmit_sco_start1(struct ubt_softc *, struct ubt_isoc_xfer *);
void ubt_xmit_sco_complete(struct usbd_xfer *, void *, usbd_status);

void ubt_recv_event(struct usbd_xfer *, void *, usbd_status);

void ubt_recv_acl_start(struct ubt_softc *);
void ubt_recv_acl_complete(struct usbd_xfer *, void *, usbd_status);

void ubt_recv_sco_start1(struct ubt_softc *, struct ubt_isoc_xfer *);
void ubt_recv_sco_complete(struct usbd_xfer *, void *, usbd_status);

void ubt_stats(struct device *, struct bt_stats *, int);

int ubt_match(struct device *, void *, void *); 
void ubt_attach(struct device *, struct device *, void *); 
int ubt_detach(struct device *, int); 
int ubt_activate(struct device *, int); 

struct cfdriver ubt_cd = { 
	NULL, "ubt", DV_DULL 
}; 

const struct cfattach ubt_ca = { 
	sizeof(struct ubt_softc), 
	ubt_match, 
	ubt_attach, 
	ubt_detach, 
	ubt_activate, 
};

const struct hci_if ubt_hci = {
	.enable = ubt_enable,
	.disable = ubt_disable,
	.output_cmd = ubt_xmit_cmd,
	.output_acl = ubt_xmit_acl,
	.output_sco = ubt_xmit_sco,
	.get_stats = ubt_stats,
	.ipl = IPL_USB,		/* IPL_SOFTUSB ??? */
};

static int ubt_set_isoc_config(struct ubt_softc *);
static void ubt_abortdealloc(struct ubt_softc *);

/*
 * Match against the whole device, since we want to take
 * both interfaces. If a device should be ignored then add
 *
 *	{ VendorID, ProductID }
 *
 * to the ubt_ignore list.
 */
static const struct usb_devno ubt_ignore[] = {
	{ USB_VENDOR_BROADCOM, USB_PRODUCT_BROADCOM_BCM2033NF }
};

int
ubt_match(struct device *parent, void *match, void *aux)
{
	struct usb_attach_arg *uaa = aux;
	usb_device_descriptor_t *dd = usbd_get_device_descriptor(uaa->device);

	DPRINTFN(50, "ubt_match\n");

	if (usb_lookup(ubt_ignore, uaa->vendor, uaa->product))
		return UMATCH_NONE;

	if (dd->bDeviceClass == UDCLASS_WIRELESS
	    && dd->bDeviceSubClass == UDSUBCLASS_RF
	    && dd->bDeviceProtocol == UDPROTO_BLUETOOTH)
		return UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO;

	return UMATCH_NONE;
}


void
ubt_attach(struct device *parent, struct device *self, void *aux)
{
	struct ubt_softc *sc = (struct ubt_softc *)self;
	struct usb_attach_arg *uaa = aux;
	usb_config_descriptor_t *cd;
	usb_endpoint_descriptor_t *ed;
	int err;
	uint8_t count, i;

	DPRINTFN(50, "ubt_attach: sc=%p\n", sc);

	sc->sc_udev = uaa->device;

#ifndef __OpenBSD__		/* ??? */
	MBUFQ_INIT(&sc->sc_cmd_queue);
	MBUFQ_INIT(&sc->sc_aclwr_queue);
	MBUFQ_INIT(&sc->sc_scowr_queue);
#endif

	/*
	 * Move the device into the configured state
	 */
	err = usbd_set_config_index(sc->sc_udev, 0, 1);
	if (err) {
		printf("%s: failed to set configuration idx 0: %s\n",
		    sc->sc_dev.dv_xname, usbd_errstr(err));

		return;
	}

	/*
	 * Interface 0 must have 3 endpoints
	 *	1) Interrupt endpoint to receive HCI events
	 *	2) Bulk IN endpoint to receive ACL data
	 *	3) Bulk OUT endpoint to send ACL data
	 */
	err = usbd_device2interface_handle(sc->sc_udev, 0, &sc->sc_iface0);
	if (err) {
		printf("%s: Could not get interface 0 handle %s (%d)\n",
				sc->sc_dev.dv_xname, usbd_errstr(err), err);

		return;
	}

	sc->sc_evt_addr = -1;
	sc->sc_aclrd_addr = -1;
	sc->sc_aclwr_addr = -1;

	count = 0;
	(void)usbd_endpoint_count(sc->sc_iface0, &count);

	for (i = 0 ; i < count ; i++) {
		int dir, type;

		ed = usbd_interface2endpoint_descriptor(sc->sc_iface0, i);
		if (ed == NULL) {
			printf("%s: could not read endpoint descriptor %d\n",
			    sc->sc_dev.dv_xname, i);

			return;
		}

		dir = UE_GET_DIR(ed->bEndpointAddress);
		type = UE_GET_XFERTYPE(ed->bmAttributes);

		if (dir == UE_DIR_IN && type == UE_INTERRUPT)
			sc->sc_evt_addr = ed->bEndpointAddress;
		else if (dir == UE_DIR_IN && type == UE_BULK)
			sc->sc_aclrd_addr = ed->bEndpointAddress;
		else if (dir == UE_DIR_OUT && type == UE_BULK)
			sc->sc_aclwr_addr = ed->bEndpointAddress;
	}

	if (sc->sc_evt_addr == -1) {
		printf("%s: missing INTERRUPT endpoint on interface 0\n",
				sc->sc_dev.dv_xname);

		return;
	}
	if (sc->sc_aclrd_addr == -1) {
		printf("%s: missing BULK IN endpoint on interface 0\n",
				sc->sc_dev.dv_xname);

		return;
	}
	if (sc->sc_aclwr_addr == -1) {
		printf("%s: missing BULK OUT endpoint on interface 0\n",
				sc->sc_dev.dv_xname);

		return;
	}

	/*
	 * Interface 1 must have 2 endpoints
	 *	1) Isochronous IN endpoint to receive SCO data
	 *	2) Isochronous OUT endpoint to send SCO data
	 *
	 * and will have several configurations, which can be selected
	 * via a sysctl variable. We select config 0 to start, which
	 * means that no SCO data will be available.
	 */
	err = usbd_device2interface_handle(sc->sc_udev, 1, &sc->sc_iface1);
	if (err) {
		printf("%s: Could not get interface 1 handle %s (%d)\n",
				sc->sc_dev.dv_xname, usbd_errstr(err), err);

		return;
	}

	cd = usbd_get_config_descriptor(sc->sc_udev);
	if (cd == NULL) {
		printf("%s: could not get config descriptor\n",
			sc->sc_dev.dv_xname);

		return;
	}

	sc->sc_alt_config = usbd_get_no_alts(cd, 1);

	/* set initial config */
	err = ubt_set_isoc_config(sc);
	if (err) {
		printf("%s: ISOC config failed\n",
			sc->sc_dev.dv_xname);

		return;
	}

	/* Attach HCI */
	sc->sc_unit = hci_attach(&ubt_hci, &sc->sc_dev, 0);

	sc->sc_ok = 1;
	/* XXX pmf_device_deregister in NetBSD (power hook) */
}

int
ubt_detach(struct device *self, int flags)
{
	struct ubt_softc *sc = (struct ubt_softc *)self;
	int s;

	DPRINTF("sc=%p flags=%d\n", sc, flags);

	/* XXX pmf_device_deregister in NetBSD (power hook) */

	if (!sc->sc_ok)
		return 0;

	/* Detach HCI interface */
	if (sc->sc_unit) {
		hci_detach(sc->sc_unit);
		sc->sc_unit = NULL;
	}

	/*
	 * Abort all pipes. Causes processes waiting for transfer to wake.
	 *
	 * Actually, hci_detach() above will call ubt_disable() which may
	 * call ubt_abortdealloc(), but lets be sure since doing it twice
	 * wont cause an error.
	 */
	ubt_abortdealloc(sc);

	/* wait for all processes to finish */
	s = splusb();
	if (sc->sc_refcnt-- > 0)
		usb_detach_wait(&sc->sc_dev);

	splx(s);

	DPRINTFN(1, "driver detached\n");

	return 0;
}

int
ubt_activate(struct device *self, int act)
{
	struct ubt_softc *sc = (struct ubt_softc *)self;

	switch (act) {
	case DVACT_DEACTIVATE:
		usbd_deactivate(sc->sc_udev);
		break;
	}
	return (0);
}

/* set ISOC configuration */
int
ubt_set_isoc_config(struct ubt_softc *sc)
{
	usb_endpoint_descriptor_t *ed;
	int rd_addr, wr_addr, rd_size, wr_size;
	uint8_t count, i;
	int err;

	err = usbd_set_interface(sc->sc_iface1, sc->sc_config);
	if (err != USBD_NORMAL_COMPLETION) {
		printf(
		    "%s: Could not set config %d on ISOC interface. %s (%d)\n",
		    sc->sc_dev.dv_xname, sc->sc_config, usbd_errstr(err), err);

		return err == USBD_IN_USE ? EBUSY : EIO;
	}

	/*
	 * We wont get past the above if there are any pipes open, so no
	 * need to worry about buf/xfer/pipe deallocation. If we get an
	 * error after this, the frame quantities will be 0 and no SCO
	 * data will be possible.
	 */

	sc->sc_scord_size = rd_size = 0;
	sc->sc_scord_addr = rd_addr = -1;

	sc->sc_scowr_size = wr_size = 0;
	sc->sc_scowr_addr = wr_addr = -1;

	count = 0;
	(void)usbd_endpoint_count(sc->sc_iface1, &count);

	for (i = 0 ; i < count ; i++) {
		ed = usbd_interface2endpoint_descriptor(sc->sc_iface1, i);
		if (ed == NULL) {
			printf("%s: could not read endpoint descriptor %d\n",
			    sc->sc_dev.dv_xname, i);

			return EIO;
		}

		DPRINTFN(5, "%s: endpoint type %02x (%02x) addr %02x (%s)\n",
			sc->sc_dev.dv_xname,
			UE_GET_XFERTYPE(ed->bmAttributes),
			UE_GET_ISO_TYPE(ed->bmAttributes),
			ed->bEndpointAddress,
			UE_GET_DIR(ed->bEndpointAddress) ? "in" : "out");

		if (UE_GET_XFERTYPE(ed->bmAttributes) != UE_ISOCHRONOUS)
			continue;

		if (UE_GET_DIR(ed->bEndpointAddress) == UE_DIR_IN) {
			rd_addr = ed->bEndpointAddress;
			rd_size = UGETW(ed->wMaxPacketSize);
		} else {
			wr_addr = ed->bEndpointAddress;
			wr_size = UGETW(ed->wMaxPacketSize);
		}
	}

	if (rd_addr == -1) {
		printf(
		    "%s: missing ISOC IN endpoint on interface config %d\n",
		    sc->sc_dev.dv_xname, sc->sc_config);

		return ENOENT;
	}
	if (wr_addr == -1) {
		printf(
		    "%s: missing ISOC OUT endpoint on interface config %d\n",
		    sc->sc_dev.dv_xname, sc->sc_config);

		return ENOENT;
	}

#ifdef DIAGNOSTIC
	if (rd_size > MLEN) {
		printf("%s: rd_size=%d exceeds MLEN\n",
		    sc->sc_dev.dv_xname, rd_size);

		return EOVERFLOW;
	}

	if (wr_size > MLEN) {
		printf("%s: wr_size=%d exceeds MLEN\n",
		    sc->sc_dev.dv_xname, wr_size);

		return EOVERFLOW;
	}
#endif

	sc->sc_scord_size = rd_size;
	sc->sc_scord_addr = rd_addr;

	sc->sc_scowr_size = wr_size;
	sc->sc_scowr_addr = wr_addr;

	return 0;
}

void
ubt_abortdealloc(struct ubt_softc *sc)
{
	int i;

	DPRINTFN(1, "sc=%p\n", sc);

	/* Abort all pipes */
	if (sc->sc_evt_pipe != NULL) {
		usbd_abort_pipe(sc->sc_evt_pipe);
		usbd_close_pipe(sc->sc_evt_pipe);
		sc->sc_evt_pipe = NULL;
	}

	if (sc->sc_aclrd_pipe != NULL) {
		usbd_abort_pipe(sc->sc_aclrd_pipe);
		usbd_close_pipe(sc->sc_aclrd_pipe);
		sc->sc_aclrd_pipe = NULL;
	}

	if (sc->sc_aclwr_pipe != NULL) {
		usbd_abort_pipe(sc->sc_aclwr_pipe);
		usbd_close_pipe(sc->sc_aclwr_pipe);
		sc->sc_aclwr_pipe = NULL;
	}

	if (sc->sc_scord_pipe != NULL) {
		usbd_abort_pipe(sc->sc_scord_pipe);
		usbd_close_pipe(sc->sc_scord_pipe);
		sc->sc_scord_pipe = NULL;
	}

	if (sc->sc_scowr_pipe != NULL) {
		usbd_abort_pipe(sc->sc_scowr_pipe);
		usbd_close_pipe(sc->sc_scowr_pipe);
		sc->sc_scowr_pipe = NULL;
	}

	/* Free event buffer */
	if (sc->sc_evt_buf != NULL) {
		free(sc->sc_evt_buf, M_USBDEV);
		sc->sc_evt_buf = NULL;
	}

	/* Free all xfers and xfer buffers (implicit) */
	if (sc->sc_cmd_xfer != NULL) {
		usbd_free_xfer(sc->sc_cmd_xfer);
		sc->sc_cmd_xfer = NULL;
		sc->sc_cmd_buf = NULL;
	}

	if (sc->sc_aclrd_xfer != NULL) {
		usbd_free_xfer(sc->sc_aclrd_xfer);
		sc->sc_aclrd_xfer = NULL;
		sc->sc_aclrd_buf = NULL;
	}

	if (sc->sc_aclwr_xfer != NULL) {
		usbd_free_xfer(sc->sc_aclwr_xfer);
		sc->sc_aclwr_xfer = NULL;
		sc->sc_aclwr_buf = NULL;
	}

	for (i = 0 ; i < UBT_NXFERS ; i++) {
		if (sc->sc_scord[i].xfer != NULL) {
			usbd_free_xfer(sc->sc_scord[i].xfer);
			sc->sc_scord[i].xfer = NULL;
			sc->sc_scord[i].buf = NULL;
		}

		if (sc->sc_scowr[i].xfer != NULL) {
			usbd_free_xfer(sc->sc_scowr[i].xfer);
			sc->sc_scowr[i].xfer = NULL;
			sc->sc_scowr[i].buf = NULL;
		}
	}

	/* Free partial SCO packets */
	if (sc->sc_scord_mbuf != NULL) {
		m_freem(sc->sc_scord_mbuf);
		sc->sc_scord_mbuf = NULL;
	}

	if (sc->sc_scowr_mbuf != NULL) {
		m_freem(sc->sc_scowr_mbuf);
		sc->sc_scowr_mbuf = NULL;
	}

	/* Empty mbuf queues */
	IF_PURGE(&sc->sc_cmd_queue);
	IF_PURGE(&sc->sc_aclwr_queue);
	IF_PURGE(&sc->sc_scowr_queue);
}

/*******************************************************************************
 *
 * Bluetooth Unit/USB callbacks
 *
 */
int
ubt_enable(struct device *self)
{
	struct ubt_softc *sc = (struct ubt_softc *)self;
	usbd_status err;
	int s, i, error;

	DPRINTFN(1, "sc=%p\n", sc);

	if (sc->sc_enabled)
		return 0;

	s = splusb();

	/* Events */
	sc->sc_evt_buf = malloc(UBT_BUFSIZ_EVENT, M_USBDEV, M_NOWAIT);
	if (sc->sc_evt_buf == NULL) {
		error = ENOMEM;
		goto bad;
	}
	err = usbd_open_pipe_intr(sc->sc_iface0,
				  sc->sc_evt_addr,
				  USBD_SHORT_XFER_OK,
				  &sc->sc_evt_pipe,
				  sc,
				  sc->sc_evt_buf,
				  UBT_BUFSIZ_EVENT,
				  ubt_recv_event,
				  USBD_DEFAULT_INTERVAL);
	if (err != USBD_NORMAL_COMPLETION) {
		error = EIO;
		goto bad;
	}

	/* Commands */
	sc->sc_cmd_xfer = usbd_alloc_xfer(sc->sc_udev);
	if (sc->sc_cmd_xfer == NULL) {
		error = ENOMEM;
		goto bad;
	}
	sc->sc_cmd_buf = usbd_alloc_buffer(sc->sc_cmd_xfer, UBT_BUFSIZ_CMD);
	if (sc->sc_cmd_buf == NULL) {
		error = ENOMEM;
		goto bad;
	}
	sc->sc_cmd_busy = 0;

	/* ACL read */
	err = usbd_open_pipe(sc->sc_iface0, sc->sc_aclrd_addr,
				USBD_EXCLUSIVE_USE, &sc->sc_aclrd_pipe);
	if (err != USBD_NORMAL_COMPLETION) {
		error = EIO;
		goto bad;
	}
	sc->sc_aclrd_xfer = usbd_alloc_xfer(sc->sc_udev);
	if (sc->sc_aclrd_xfer == NULL) {
		error = ENOMEM;
		goto bad;
	}
	sc->sc_aclrd_buf = usbd_alloc_buffer(sc->sc_aclrd_xfer, UBT_BUFSIZ_ACL);
	if (sc->sc_aclrd_buf == NULL) {
		error = ENOMEM;
		goto bad;
	}
	sc->sc_aclrd_busy = 0;
	ubt_recv_acl_start(sc);

	/* ACL write */
	err = usbd_open_pipe(sc->sc_iface0, sc->sc_aclwr_addr,
				USBD_EXCLUSIVE_USE, &sc->sc_aclwr_pipe);
	if (err != USBD_NORMAL_COMPLETION) {
		error = EIO;
		goto bad;
	}
	sc->sc_aclwr_xfer = usbd_alloc_xfer(sc->sc_udev);
	if (sc->sc_aclwr_xfer == NULL) {
		error = ENOMEM;
		goto bad;
	}
	sc->sc_aclwr_buf = usbd_alloc_buffer(sc->sc_aclwr_xfer, UBT_BUFSIZ_ACL);
	if (sc->sc_aclwr_buf == NULL) {
		error = ENOMEM;
		goto bad;
	}
	sc->sc_aclwr_busy = 0;

	/* SCO read */
	if (sc->sc_scord_size > 0) {
		err = usbd_open_pipe(sc->sc_iface1, sc->sc_scord_addr,
					USBD_EXCLUSIVE_USE, &sc->sc_scord_pipe);
		if (err != USBD_NORMAL_COMPLETION) {
			error = EIO;
			goto bad;
		}

		for (i = 0 ; i < UBT_NXFERS ; i++) {
			sc->sc_scord[i].xfer = usbd_alloc_xfer(sc->sc_udev);
			if (sc->sc_scord[i].xfer == NULL) {
				error = ENOMEM;
				goto bad;
			}
			sc->sc_scord[i].buf = usbd_alloc_buffer(sc->sc_scord[i].xfer,
						sc->sc_scord_size * UBT_NFRAMES);
			if (sc->sc_scord[i].buf == NULL) {
				error = ENOMEM;
				goto bad;
			}
			sc->sc_scord[i].softc = sc;
			sc->sc_scord[i].busy = 0;
			ubt_recv_sco_start1(sc, &sc->sc_scord[i]);
		}
	}

	/* SCO write */
	if (sc->sc_scowr_size > 0) {
		err = usbd_open_pipe(sc->sc_iface1, sc->sc_scowr_addr,
					USBD_EXCLUSIVE_USE, &sc->sc_scowr_pipe);
		if (err != USBD_NORMAL_COMPLETION) {
			error = EIO;
			goto bad;
		}

		for (i = 0 ; i < UBT_NXFERS ; i++) {
			sc->sc_scowr[i].xfer = usbd_alloc_xfer(sc->sc_udev);
			if (sc->sc_scowr[i].xfer == NULL) {
				error = ENOMEM;
				goto bad;
			}
			sc->sc_scowr[i].buf = usbd_alloc_buffer(sc->sc_scowr[i].xfer,
						sc->sc_scowr_size * UBT_NFRAMES);
			if (sc->sc_scowr[i].buf == NULL) {
				error = ENOMEM;
				goto bad;
			}
			sc->sc_scowr[i].softc = sc;
			sc->sc_scowr[i].busy = 0;
		}

		sc->sc_scowr_busy = 0;
	}

	sc->sc_enabled = 1;
	splx(s);
	return 0;

bad:
	ubt_abortdealloc(sc);
	splx(s);
	return error;
}

void
ubt_disable(struct device *self)
{
	struct ubt_softc *sc = (struct ubt_softc *)self;
	int s;

	DPRINTFN(1, "sc=%p\n", sc);

	if (sc->sc_enabled == 0)
		return;

	s = splusb();
	ubt_abortdealloc(sc);

	sc->sc_enabled = 0;
	splx(s);
}

void
ubt_xmit_cmd(struct device *self, struct mbuf *m)
{
	struct ubt_softc *sc = (struct ubt_softc *)self;
	int s;

	KASSERT(sc->sc_enabled);

	s = splusb();
	IF_ENQUEUE(&sc->sc_cmd_queue, m);

	if (sc->sc_cmd_busy == 0)
		ubt_xmit_cmd_start(sc);

	splx(s);
}

void
ubt_xmit_cmd_start(struct ubt_softc *sc)
{
	usb_device_request_t req;
	usbd_status status;
	struct mbuf *m;
	int len;

	if (usbd_is_dying(sc->sc_udev))
		return;

	if (IF_IS_EMPTY(&sc->sc_cmd_queue))
		return;

	IF_DEQUEUE(&sc->sc_cmd_queue, m);
	KASSERT(m != NULL);

	DPRINTFN(15, "%s: xmit CMD packet (%d bytes)\n",
	    &sc->sc_dev, m->m_pkthdr.len);

	sc->sc_refcnt++;
	sc->sc_cmd_busy = 1;

	len = m->m_pkthdr.len - 1;
	m_copydata(m, 1, len, sc->sc_cmd_buf);
	m_freem(m);

	memset(&req, 0, sizeof(req));
	req.bmRequestType = UT_WRITE_CLASS_DEVICE;
	USETW(req.wLength, len);

	usbd_setup_default_xfer(sc->sc_cmd_xfer,
				sc->sc_udev,
				sc,
				UBT_CMD_TIMEOUT,
				&req,
				sc->sc_cmd_buf,
				len,
				USBD_NO_COPY | USBD_FORCE_SHORT_XFER,
				ubt_xmit_cmd_complete);

	status = usbd_transfer(sc->sc_cmd_xfer);

	KASSERT(status != USBD_NORMAL_COMPLETION);

	if (status != USBD_IN_PROGRESS) {
		DPRINTF("usbd_transfer status=%s (%d)\n",
			usbd_errstr(status), status);

		sc->sc_refcnt--;
		sc->sc_cmd_busy = 0;
	}
}

void
ubt_xmit_cmd_complete(struct usbd_xfer *xfer, void *h, usbd_status status)
{
	struct ubt_softc *sc = h;
	uint32_t count;

	DPRINTFN(15, "%s: CMD complete status=%s (%d)\n",
	    sc->sc_dev.dv_xname, usbd_errstr(status), status);

	sc->sc_cmd_busy = 0;

	if (--sc->sc_refcnt < 0) {
		DPRINTF("sc_refcnt=%d\n", sc->sc_refcnt);
		usb_detach_wakeup(&sc->sc_dev);
		return;
	}

	if (usbd_is_dying(sc->sc_udev)) {
		DPRINTF("dying\n");
		return;
	}

	if (status != USBD_NORMAL_COMPLETION) {
		DPRINTF("status=%s (%d)\n",
			usbd_errstr(status), status);

		sc->sc_stats.err_tx++;
		return;
	}

	usbd_get_xfer_status(xfer, NULL, NULL, &count, NULL);
	sc->sc_stats.cmd_tx++;
	sc->sc_stats.byte_tx += count;

	ubt_xmit_cmd_start(sc);
}

void
ubt_xmit_acl(struct device *self, struct mbuf *m)
{
	struct ubt_softc *sc = (struct ubt_softc *)self;
	int s;

	KASSERT(sc->sc_enabled);

	s = splusb();
	IF_ENQUEUE(&sc->sc_aclwr_queue, m);

	if (sc->sc_aclwr_busy == 0)
		ubt_xmit_acl_start(sc);

	splx(s);
}

void
ubt_xmit_acl_start(struct ubt_softc *sc)
{
	struct mbuf *m;
	usbd_status status;
	int len;

	if (usbd_is_dying(sc->sc_udev))
		return;

	if (IF_IS_EMPTY(&sc->sc_aclwr_queue))
		return;

	sc->sc_refcnt++;
	sc->sc_aclwr_busy = 1;

	IF_DEQUEUE(&sc->sc_aclwr_queue, m);
	KASSERT(m != NULL);

	DPRINTFN(15, "%s: xmit ACL packet (%d bytes)\n",
	    sc->sc_dev.dv_xname, m->m_pkthdr.len);

	len = m->m_pkthdr.len - 1;
	if (len > UBT_BUFSIZ_ACL) {
		DPRINTF("%s: truncating ACL packet (%d => %d)!\n",
		    sc->sc_dev.dv_xname, len, UBT_BUFSIZ_ACL);

		len = UBT_BUFSIZ_ACL;
	}

	m_copydata(m, 1, len, sc->sc_aclwr_buf);
	m_freem(m);

	sc->sc_stats.acl_tx++;
	sc->sc_stats.byte_tx += len;

	usbd_setup_xfer(sc->sc_aclwr_xfer,
			sc->sc_aclwr_pipe,
			sc,
			sc->sc_aclwr_buf,
			len,
			USBD_NO_COPY | USBD_FORCE_SHORT_XFER,
			UBT_ACL_TIMEOUT,
			ubt_xmit_acl_complete);

	status = usbd_transfer(sc->sc_aclwr_xfer);

	KASSERT(status != USBD_NORMAL_COMPLETION);

	if (status != USBD_IN_PROGRESS) {
		DPRINTF("usbd_transfer status=%s (%d)\n",
			usbd_errstr(status), status);

		sc->sc_refcnt--;
		sc->sc_aclwr_busy = 0;
	}
}

void
ubt_xmit_acl_complete(struct usbd_xfer *xfer, void *h, usbd_status status)
{
	struct ubt_softc *sc = h;

	DPRINTFN(15, "%s: ACL complete status=%s (%d)\n",
	    sc->sc_dev.dv_xname, usbd_errstr(status), status);

	sc->sc_aclwr_busy = 0;

	if (--sc->sc_refcnt < 0) {
		usb_detach_wakeup(&sc->sc_dev);
		return;
	}

	if (usbd_is_dying(sc->sc_udev))
		return;

	if (status != USBD_NORMAL_COMPLETION) {
		DPRINTF("status=%s (%d)\n",
			usbd_errstr(status), status);

		sc->sc_stats.err_tx++;

		if (status == USBD_STALLED)
			usbd_clear_endpoint_stall_async(sc->sc_aclwr_pipe);
		else
			return;
	}

	ubt_xmit_acl_start(sc);
}

void
ubt_xmit_sco(struct device *self, struct mbuf *m)
{
	struct ubt_softc *sc = (struct ubt_softc *)self;
	int s;

	KASSERT(sc->sc_enabled);

	s = splusb();
	IF_ENQUEUE(&sc->sc_scowr_queue, m);

	if (sc->sc_scowr_busy == 0)
		ubt_xmit_sco_start(sc);

	splx(s);
}

void
ubt_xmit_sco_start(struct ubt_softc *sc)
{
	int i;

	if (usbd_is_dying(sc->sc_udev) || sc->sc_scowr_size == 0)
		return;

	for (i = 0 ; i < UBT_NXFERS ; i++) {
		if (sc->sc_scowr[i].busy)
			continue;

		ubt_xmit_sco_start1(sc, &sc->sc_scowr[i]);
	}
}

void
ubt_xmit_sco_start1(struct ubt_softc *sc, struct ubt_isoc_xfer *isoc)
{
	struct mbuf *m;
	uint8_t *buf;
	int num, len, size, space;

	space = sc->sc_scowr_size * UBT_NFRAMES;
	buf = isoc->buf;
	len = 0;

	/*
	 * Fill the request buffer with data from the queue,
	 * keeping any leftover packet on our private hook.
	 *
	 * Complete packets are passed back up to the stack
	 * for disposal, since we can't rely on the controller
	 * to tell us when it has finished with them.
	 */

	m = sc->sc_scowr_mbuf;
	while (space > 0) {
		if (m == NULL) {
			IF_DEQUEUE(&sc->sc_scowr_queue, m);
			if (m == NULL)
				break;

			m_adj(m, 1);	/* packet type */
		}

		if (m->m_pkthdr.len > 0) {
			size = MIN(m->m_pkthdr.len, space);

			m_copydata(m, 0, size, buf);
			m_adj(m, size);

			buf += size;
			len += size;
			space -= size;
		}

		if (m->m_pkthdr.len == 0) {
			sc->sc_stats.sco_tx++;
			if (!hci_complete_sco(sc->sc_unit, m))
				sc->sc_stats.err_tx++;

			m = NULL;
		}
	}
	sc->sc_scowr_mbuf = m;

	DPRINTFN(15, "isoc=%p, len=%d, space=%d\n", isoc, len, space);

	if (len == 0)	/* nothing to send */
		return;

	sc->sc_refcnt++;
	sc->sc_scowr_busy = 1;
	sc->sc_stats.byte_tx += len;
	isoc->busy = 1;

	/*
	 * calculate number of isoc frames and sizes
	 */

	for (num = 0 ; len > 0 ; num++) {
		size = MIN(sc->sc_scowr_size, len);

		isoc->size[num] = size;
		len -= size;
	}

	usbd_setup_isoc_xfer(isoc->xfer,
			     sc->sc_scowr_pipe,
			     isoc,
			     isoc->size,
			     num,
			     USBD_NO_COPY | USBD_FORCE_SHORT_XFER,
			     ubt_xmit_sco_complete);

	usbd_transfer(isoc->xfer);
}

void
ubt_xmit_sco_complete(struct usbd_xfer *xfer, void *h, usbd_status status)
{
	struct ubt_isoc_xfer *isoc = h;
	struct ubt_softc *sc;
	int i;

	KASSERT(xfer == isoc->xfer);
	sc = isoc->softc;

	DPRINTFN(15, "isoc=%p, status=%s (%d)\n",
		isoc, usbd_errstr(status), status);

	isoc->busy = 0;

	for (i = 0 ; ; i++) {
		if (i == UBT_NXFERS) {
			sc->sc_scowr_busy = 0;
			break;
		}

		if (sc->sc_scowr[i].busy)
			break;
	}

	if (--sc->sc_refcnt < 0) {
		usb_detach_wakeup(&sc->sc_dev);
		return;
	}

	if (usbd_is_dying(sc->sc_udev))
		return;

	if (status != USBD_NORMAL_COMPLETION) {
		DPRINTF("status=%s (%d)\n",
			usbd_errstr(status), status);

		sc->sc_stats.err_tx++;

		if (status == USBD_STALLED)
			usbd_clear_endpoint_stall_async(sc->sc_scowr_pipe);
		else
			return;
	}

	ubt_xmit_sco_start(sc);
}

/*
 * load incoming data into an mbuf with
 * leading type byte
 */
static struct mbuf *
ubt_mbufload(uint8_t *buf, int count, uint8_t type)
{
	struct mbuf *m;

	MGETHDR(m, M_DONTWAIT, MT_DATA);
	if (m == NULL)
		return NULL;

	*mtod(m, uint8_t *) = type;
	m->m_pkthdr.len = m->m_len = MHLEN;
	m_copyback(m, 1, count, buf, M_NOWAIT); /* extends if this doesn't fail */
	if (m->m_pkthdr.len != MAX(MHLEN, count + 1)) {
		m_free(m);
		return NULL;
	}

	m->m_pkthdr.len = count + 1;
	m->m_len = MIN(MHLEN, m->m_pkthdr.len);

	return m;
}

void
ubt_recv_event(struct usbd_xfer *xfer, void *h, usbd_status status)
{
	struct ubt_softc *sc = h;
	struct mbuf *m;
	uint32_t count;
	void *buf;

	DPRINTFN(15, "sc=%p status=%s (%d)\n",
		    sc, usbd_errstr(status), status);

	if (status != USBD_NORMAL_COMPLETION || usbd_is_dying(sc->sc_udev))
		return;

	usbd_get_xfer_status(xfer, NULL, &buf, &count, NULL);

	if (count < sizeof(hci_event_hdr_t) - 1) {
		DPRINTF("dumped undersized event (count = %d)\n", count);
		sc->sc_stats.err_rx++;
		return;
	}

	sc->sc_stats.evt_rx++;
	sc->sc_stats.byte_rx += count;

	m = ubt_mbufload(buf, count, HCI_EVENT_PKT);
	if (m == NULL || !hci_input_event(sc->sc_unit, m))
		sc->sc_stats.err_rx++;
}

void
ubt_recv_acl_start(struct ubt_softc *sc)
{
	usbd_status status;

	DPRINTFN(15, "sc=%p\n", sc);

	if (sc->sc_aclrd_busy) {
		DPRINTF("sc_aclrd_busy=%d\n", sc->sc_aclrd_busy);
		return;
	}
	if (usbd_is_dying(sc->sc_udev)) {
		DPRINTF("dying");
		return;
	}

	sc->sc_refcnt++;
	sc->sc_aclrd_busy = 1;

	usbd_setup_xfer(sc->sc_aclrd_xfer,
			sc->sc_aclrd_pipe,
			sc,
			sc->sc_aclrd_buf,
			UBT_BUFSIZ_ACL,
			USBD_NO_COPY | USBD_SHORT_XFER_OK,
			USBD_NO_TIMEOUT,
			ubt_recv_acl_complete);

	status = usbd_transfer(sc->sc_aclrd_xfer);

	KASSERT(status != USBD_NORMAL_COMPLETION);

	if (status != USBD_IN_PROGRESS) {
		DPRINTF("usbd_transfer status=%s (%d)\n",
			usbd_errstr(status), status);

		sc->sc_refcnt--;
		sc->sc_aclrd_busy = 0;
	}
}

void
ubt_recv_acl_complete(struct usbd_xfer *xfer, void *h, usbd_status status)
{
	struct ubt_softc *sc = h;
	struct mbuf *m;
	uint32_t count;
	void *buf;

	DPRINTFN(15, "sc=%p status=%s (%d)\n",
			sc, usbd_errstr(status), status);

	sc->sc_aclrd_busy = 0;

	if (--sc->sc_refcnt < 0) {
		DPRINTF("refcnt = %d\n", sc->sc_refcnt);
		usb_detach_wakeup(&sc->sc_dev);
		return;
	}

	if (usbd_is_dying(sc->sc_udev)) {
		DPRINTF("dying\n");
		return;
	}

	if (status != USBD_NORMAL_COMPLETION) {
		DPRINTF("status=%s (%d)\n",
			usbd_errstr(status), status);

		sc->sc_stats.err_rx++;

		if (status == USBD_STALLED)
			usbd_clear_endpoint_stall_async(sc->sc_aclrd_pipe);
		else
			return;
	} else {
		usbd_get_xfer_status(xfer, NULL, &buf, &count, NULL);

		if (count < sizeof(hci_acldata_hdr_t) - 1) {
			DPRINTF("dumped undersized packet (%d)\n", count);
			sc->sc_stats.err_rx++;
		} else {
			sc->sc_stats.acl_rx++;
			sc->sc_stats.byte_rx += count;

			m = ubt_mbufload(buf, count, HCI_ACL_DATA_PKT);
			if (m == NULL || !hci_input_acl(sc->sc_unit, m))
				sc->sc_stats.err_rx++;
		}
	}

	/* and restart */
	ubt_recv_acl_start(sc);
}

void
ubt_recv_sco_start1(struct ubt_softc *sc, struct ubt_isoc_xfer *isoc)
{
	int i;

	DPRINTFN(15, "sc=%p, isoc=%p\n", sc, isoc);

	if (usbd_is_dying(sc->sc_udev)) {
		DPRINTF("dying");
		return;
	}
	if (isoc->busy || sc->sc_scord_size == 0) {
		DPRINTF("%s%s\n",
			isoc->busy ? " busy" : "",
			sc->sc_scord_size == 0 ? " size=0" : "");

		return;
	}

	sc->sc_refcnt++;
	isoc->busy = 1;

	for (i = 0 ; i < UBT_NFRAMES ; i++)
		isoc->size[i] = sc->sc_scord_size;

	usbd_setup_isoc_xfer(isoc->xfer,
			     sc->sc_scord_pipe,
			     isoc,
			     isoc->size,
			     UBT_NFRAMES,
			     USBD_NO_COPY | USBD_SHORT_XFER_OK,
			     ubt_recv_sco_complete);

	usbd_transfer(isoc->xfer);
}

void
ubt_recv_sco_complete(struct usbd_xfer *xfer, void *h, usbd_status status)
{
	struct ubt_isoc_xfer *isoc = h;
	struct ubt_softc *sc;
	struct mbuf *m;
	uint32_t count;
	uint8_t *ptr, *frame;
	int i, size, got, want;

	KASSERT(isoc != NULL);
	KASSERT(isoc->xfer == xfer);

	sc = isoc->softc;
	isoc->busy = 0;

	if (--sc->sc_refcnt < 0) {
		DPRINTF("refcnt=%d\n", sc->sc_refcnt);
		usb_detach_wakeup(&sc->sc_dev);
		return;
	}

	if (usbd_is_dying(sc->sc_udev)) {
		DPRINTF("dying\n");
		return;
	}

	if (status != USBD_NORMAL_COMPLETION) {
		DPRINTF("status=%s (%d)\n",
			usbd_errstr(status), status);

		sc->sc_stats.err_rx++;

		if (status == USBD_STALLED) {
			usbd_clear_endpoint_stall_async(sc->sc_scord_pipe);
			goto restart;
		}

		return;
	}

	usbd_get_xfer_status(xfer, NULL, NULL, &count, NULL);
	if (count == 0)
		goto restart;

	DPRINTFN(15, "sc=%p, isoc=%p, count=%u\n",
			sc, isoc, count);

	sc->sc_stats.byte_rx += count;

	/*
	 * Extract SCO packets from ISOC frames. The way we have it,
	 * no SCO packet can be bigger than MHLEN. This is unlikely
	 * to actually happen, but if we ran out of mbufs and lost
	 * sync then we may get spurious data that makes it seem that
	 * way, so we discard data that wont fit. This doesnt really
	 * help with the lost sync situation alas.
	 */

	m = sc->sc_scord_mbuf;
	if (m != NULL) {
		sc->sc_scord_mbuf = NULL;
		ptr = mtod(m, uint8_t *) + m->m_pkthdr.len;
		got = m->m_pkthdr.len;
		want = sizeof(hci_scodata_hdr_t);
		if (got >= want)
			want += mtod(m, hci_scodata_hdr_t *)->length ;
	} else {
		ptr = NULL;
		got = 0;
		want = 0;
	}

	for (i = 0 ; i < UBT_NFRAMES ; i++) {
		frame = isoc->buf + (i * sc->sc_scord_size);

		while (isoc->size[i] > 0) {
			size = isoc->size[i];

			if (m == NULL) {
				MGETHDR(m, M_DONTWAIT, MT_DATA);
				if (m == NULL) {
					printf("%s: out of memory (xfer halted)\n",
						sc->sc_dev.dv_xname);

					sc->sc_stats.err_rx++;
					return;		/* lost sync */
				}

				ptr = mtod(m, uint8_t *);
				*ptr++ = HCI_SCO_DATA_PKT;
				got = 1;
				want = sizeof(hci_scodata_hdr_t);
			}

			if (got + size > want)
				size = want - got;

			if (got + size > MHLEN)
				memcpy(ptr, frame, MHLEN - got);
			else
				memcpy(ptr, frame, size);

			ptr += size;
			got += size;
			frame += size;

			if (got == want) {
				/*
				 * If we only got a header, add the packet
				 * length to our want count. Send complete
				 * packets up to protocol stack.
				 */
				if (want == sizeof(hci_scodata_hdr_t))
					want += mtod(m, hci_scodata_hdr_t *)->length;

				if (got == want) {
					m->m_pkthdr.len = m->m_len = got;
					sc->sc_stats.sco_rx++;
					if (!hci_input_sco(sc->sc_unit, m))
						sc->sc_stats.err_rx++;
						
					m = NULL;
				}
			}

			isoc->size[i] -= size;
		}
	}

	if (m != NULL) {
		m->m_pkthdr.len = m->m_len = got;
		sc->sc_scord_mbuf = m;
	}

restart: /* and restart */
	ubt_recv_sco_start1(sc, isoc);
}

void
ubt_stats(struct device *self, struct bt_stats *dest, int flush)
{
	struct ubt_softc *sc = (struct ubt_softc *)self;
	int s;

	s = splusb();
	memcpy(dest, &sc->sc_stats, sizeof(struct bt_stats));

	if (flush)
		memset(&sc->sc_stats, 0, sizeof(struct bt_stats));

	splx(s);
}
@


1.26
log
@Fix ubt compilation after my last usbd_dying sprint.

Report and patch from Rafael Neves, thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD: ubt.c,v 1.25 2013/11/06 17:04:47 pirofti Exp $	*/
@


1.25
log
@Replace sc_dying in favour of usbd_is_dying() and usbd_deactivate().

Okay mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ubt.c,v 1.24 2013/08/07 15:56:03 tedu Exp $	*/
d954 1
a954 1
	if (usbd_is_dying(sc->sc_udev))
@


1.24
log
@needs timeout.h to compile. from Rafael Neves
@
text
@d1 1
a1 1
/*	$OpenBSD: ubt.c,v 1.23 2013/04/15 09:23:02 mglocker Exp $	*/
a155 1
	int			 sc_dying;
d490 1
a490 1
		sc->sc_dying = 1;
d891 1
a891 1
	if (sc->sc_dying)
d954 2
a955 2
	if (sc->sc_dying) {
		DPRINTF("sc_dying\n");
d998 1
a998 1
	if (sc->sc_dying)
d1064 1
a1064 1
	if (sc->sc_dying)
d1104 1
a1104 1
	if (sc->sc_dying || sc->sc_scowr_size == 0)
d1228 1
a1228 1
	if (sc->sc_dying)
d1284 1
a1284 1
	if (status != USBD_NORMAL_COMPLETION || sc->sc_dying)
d1310 6
a1315 5
	if (sc->sc_aclrd_busy || sc->sc_dying) {
		DPRINTF("sc_aclrd_busy=%d, sc_dying=%d\n",
			sc->sc_aclrd_busy,
			sc->sc_dying);

d1363 2
a1364 2
	if (sc->sc_dying) {
		DPRINTF("sc_dying\n");
d1405 6
a1410 2
	if (isoc->busy || sc->sc_dying || sc->sc_scord_size == 0) {
		DPRINTF("%s%s%s\n",
a1411 1
			sc->sc_dying ? " dying" : "",
d1456 2
a1457 2
	if (sc->sc_dying) {
		DPRINTF("sc_dying\n");
@


1.23
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ubt.c,v 1.22 2013/03/28 03:58:03 tedu Exp $	*/
d77 1
@


1.22
log
@proc.h is way too much header for usb to handle.
@
text
@d1 1
a1 1
/*	$OpenBSD: ubt.c,v 1.21 2011/07/03 15:47:17 matthew Exp $	*/
d145 1
a145 1
	usbd_xfer_handle	 xfer;
d153 1
a153 1
	usbd_device_handle	 sc_udev;
d159 1
a159 1
	usbd_interface_handle	 sc_iface0;
d162 1
a162 1
	usbd_xfer_handle	 sc_cmd_xfer;
d169 1
a169 1
	usbd_pipe_handle	 sc_evt_pipe;
d174 2
a175 2
	usbd_pipe_handle	 sc_aclrd_pipe;	/* read pipe */
	usbd_xfer_handle	 sc_aclrd_xfer;	/* read xfer */
d181 2
a182 2
	usbd_pipe_handle	 sc_aclwr_pipe;	/* write pipe */
	usbd_xfer_handle	 sc_aclwr_xfer;	/* write xfer */
d188 1
a188 1
	usbd_interface_handle	 sc_iface1;	/* ISOC interface */
d194 1
a194 1
	usbd_pipe_handle	 sc_scord_pipe;	/* read pipe */
d201 1
a201 1
	usbd_pipe_handle	 sc_scowr_pipe;	/* write pipe */
d224 1
a224 2
void ubt_xmit_cmd_complete(usbd_xfer_handle,
				usbd_private_handle, usbd_status);
d228 1
a228 2
void ubt_xmit_acl_complete(usbd_xfer_handle,
				usbd_private_handle, usbd_status);
d233 1
a233 2
void ubt_xmit_sco_complete(usbd_xfer_handle,
				usbd_private_handle, usbd_status);
d235 1
a235 2
void ubt_recv_event(usbd_xfer_handle,
				usbd_private_handle, usbd_status);
d238 1
a238 2
void ubt_recv_acl_complete(usbd_xfer_handle,
				usbd_private_handle, usbd_status);
d241 1
a241 2
void ubt_recv_sco_complete(usbd_xfer_handle,
				usbd_private_handle, usbd_status);
d938 1
a938 2
ubt_xmit_cmd_complete(usbd_xfer_handle xfer,
			usbd_private_handle h, usbd_status status)
d1050 1
a1050 2
ubt_xmit_acl_complete(usbd_xfer_handle xfer,
		usbd_private_handle h, usbd_status status)
d1199 1
a1199 2
ubt_xmit_sco_complete(usbd_xfer_handle xfer,
		usbd_private_handle h, usbd_status status)
d1274 1
a1274 1
ubt_recv_event(usbd_xfer_handle xfer, usbd_private_handle h, usbd_status status)
d1344 1
a1344 2
ubt_recv_acl_complete(usbd_xfer_handle xfer,
		usbd_private_handle h, usbd_status status)
d1431 1
a1431 2
ubt_recv_sco_complete(usbd_xfer_handle xfer,
		usbd_private_handle h, usbd_status status)
@


1.21
log
@Remove config_activate() and DVACT_ACTIVATE.  PCMCIA's the only thing
that's ever used it, and it's long since been changed to use
DVACT_{QUIESCE,SUSPEND,RESUME} instead.

ok deraadt@@, dlg@@; miod@@ also agreed with this idea when I brought it
up a few weeks ago
@
text
@d1 1
a1 1
/*	$OpenBSD: ubt.c,v 1.20 2011/01/25 20:03:36 jakemsr Exp $	*/
a75 1
#include <sys/proc.h>
@


1.20
log
@garbage collect "usb events".  without /dev/usb there is no way to access
them from userland, and nothing in the kernel uses them.

ok krw@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ubt.c,v 1.19 2010/09/24 08:33:59 yuo Exp $	*/
a495 2
	case DVACT_ACTIVATE:
		break;
@


1.19
log
@remove dying flag in detach() function.
The dying flag will be set in activate()/DEACTIVATE.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ubt.c,v 1.18 2010/08/31 16:20:48 deraadt Exp $	*/
a445 3
	usbd_add_drv_event(USB_EVENT_DRIVER_ATTACH, sc->sc_udev,
			   &sc->sc_dev);

a483 3

	usbd_add_drv_event(USB_EVENT_DRIVER_DETACH, sc->sc_udev,
			   &sc->sc_dev);
@


1.18
log
@activate functions should not return EOPNOTSUPP
@
text
@d1 1
a1 1
/*	$OpenBSD: ubt.c,v 1.17 2010/07/02 02:40:16 blambert Exp $	*/
a461 2

	sc->sc_dying = 1;
@


1.17
log
@m_copyback can fail to allocate memory, but is a void fucntion so gymnastics
are required to detect that.

Change the function to take a wait argument (used in nfs server, but
M_NOWAIT everywhere else for now) and to return an error

ok claudio@@ henning@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ubt.c,v 1.16 2010/04/22 21:20:22 sthen Exp $	*/
a501 3
	int error = 0;

	DPRINTFN(1, "sc=%p, act=%d\n", sc, act);
a505 1

a508 4

	default:
		error = EOPNOTSUPP;
		break;
d510 1
a510 2

	return error;
@


1.16
log
@Don't include sysctl.h, and remove an unused struct from the softc.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ubt.c,v 1.15 2009/10/13 19:33:17 pirofti Exp $	*/
d1290 1
a1290 1
	m_copyback(m, 1, count, buf);	// (extends if necessary)
@


1.15
log
@Get rid of devact enum, substitute it with an int and coresponding defines.

This is needed for the addition of further suspend/resume actions.

Okay deraadt@@, marco@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: ubt.c,v 1.14 2008/11/22 04:42:58 uwe Exp $	*/
a76 1
#include <sys/sysctl.h>
a189 1
	struct sysctllog	*sc_log;	/* sysctl log */
@


1.14
log
@Sync bluetooth with NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: ubt.c,v 1.13 2008/07/10 13:48:54 mbalmer Exp $	*/
d257 1
a257 1
int ubt_activate(struct device *, enum devact); 
d501 1
a501 1
ubt_activate(struct device *self, enum devact act)
@


1.13
log
@Don't terminate the array of matching product/vendor IDs with { 0, 0 }
when usb_lookup is used.  If a device indeed has 0 as vendor and product
ID, like the  HP DL165 BMC Server Engines SE USB Device, a wrong driver
will attach and the machine will most pbly crash.

Problem reported Rivo Nurges <rix@@estpak.ee>
cvs: ----------------------------------------------------------------------
@
text
@d1 2
a2 2
/*	$OpenBSD: ubt.c,v 1.12 2008/06/26 05:42:18 ray Exp $	*/
/*	$NetBSD: ubt.c,v 1.30 2007/12/16 19:01:37 christos Exp $	*/
d452 1
d463 2
a723 1
 * All of this will be called at the IPL_ we specified above
@


1.12
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ubt.c,v 1.11 2008/02/24 21:34:48 uwe Exp $	*/
d293 1
a293 2
	{ USB_VENDOR_BROADCOM, USB_PRODUCT_BROADCOM_BCM2033NF },
	{ 0, 0 }	/* end of list */
@


1.11
log
@Sync sys/netbt with NetBSD
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ubt.c,v 1.8 2007/06/14 10:11:15 mbalmer Exp $	*/
a49 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.10
log
@Wrong logic in ubt_xmit_acl_start(); reported by Dmitry Komissaroff
(dxi, mail dot ru), thanks!
@
text
@d1 2
a2 1
/* $OpenBSD: ubt.c,v 1.9 2007/10/11 18:33:14 deraadt Exp $ */
a76 2
#include <sys/cdefs.h>

d102 1
d165 1
d173 2
d193 2
d215 2
d219 2
a220 1
	struct hci_unit		 sc_unit;
d229 2
a230 2
int ubt_enable(struct hci_unit *);
void ubt_disable(struct hci_unit *);
d232 2
a233 1
void ubt_xmit_cmd_start(struct hci_unit *);
d237 2
a238 1
void ubt_xmit_acl_start(struct hci_unit *);
d242 2
a243 1
void ubt_xmit_sco_start(struct hci_unit *);
d259 2
d278 10
a299 1
	{ USB_VENDOR_BROADCOM, USB_PRODUCT_BROADCOM_BCM2033 },
a306 1

d338 6
d454 1
a454 9
	sc->sc_unit.hci_softc = self;
	sc->sc_unit.hci_devname = sc->sc_dev.dv_xname;
	sc->sc_unit.hci_enable = ubt_enable;
	sc->sc_unit.hci_disable = ubt_disable;
	sc->sc_unit.hci_start_cmd = ubt_xmit_cmd_start;
	sc->sc_unit.hci_start_acl = ubt_xmit_acl_start;
	sc->sc_unit.hci_start_sco = ubt_xmit_sco_start;
	sc->sc_unit.hci_ipl = IPL_USB; /* XXX: IPL_SOFTUSB ?? */
	hci_attach(&sc->sc_unit);
a459 2

	return;
d476 4
a479 1
	hci_detach(&sc->sc_unit);
d511 1
a511 1
	DPRINTFN(1, "ubt_activate: sc=%p, act=%d\n", sc, act);
a514 1
		return EOPNOTSUPP;
d520 4
d525 1
d718 5
d732 1
a732 1
ubt_enable(struct hci_unit *unit)
d734 1
a734 1
	struct ubt_softc *sc = (struct ubt_softc *)unit->hci_softc;
d736 1
a736 1
	int i, error;
d740 1
a740 1
	if (unit->hci_flags & BTF_RUNNING)
d743 2
d776 1
d815 1
d868 2
d872 2
a873 2
	unit->hci_flags &= ~BTF_XMIT;
	unit->hci_flags |= BTF_RUNNING;
d878 1
d883 1
a883 1
ubt_disable(struct hci_unit *unit)
d885 2
a886 1
	struct ubt_softc *sc = (struct ubt_softc *)unit->hci_softc;
d890 1
a890 1
	if ((unit->hci_flags & BTF_RUNNING) == 0)
d893 1
d896 2
a897 1
	unit->hci_flags &= ~BTF_RUNNING;
d901 18
a918 1
ubt_xmit_cmd_start(struct hci_unit *unit)
a919 1
	struct ubt_softc *sc = (struct ubt_softc *)unit->hci_softc;
d928 1
a928 1
	if (IF_IS_EMPTY(&unit->hci_cmdq))
d931 2
a932 1
	IF_DEQUEUE(&unit->hci_cmdq, m);
d935 1
a935 1
			unit->hci_devname, m->m_pkthdr.len);
d938 1
a938 1
	unit->hci_flags |= BTF_XMIT_CMD;
d950 1
a950 1
				unit,
d967 1
a967 1
		unit->hci_flags &= ~BTF_XMIT_CMD;
d975 1
a975 2
	struct hci_unit *unit = h;
	struct ubt_softc *sc = (struct ubt_softc *)unit->hci_softc;
d979 1
a979 1
			unit->hci_devname, usbd_errstr(status), status);
d981 1
a981 1
	unit->hci_flags &= ~BTF_XMIT_CMD;
d998 1
a998 1
		unit->hci_stats.err_tx++;
d1003 2
a1004 2
	unit->hci_stats.cmd_tx++;
	unit->hci_stats.byte_tx += count;
d1006 1
a1006 1
	ubt_xmit_cmd_start(unit);
d1010 18
a1027 1
ubt_xmit_acl_start(struct hci_unit *unit)
a1028 1
	struct ubt_softc *sc = (struct ubt_softc *)unit->hci_softc;
d1036 1
a1036 1
	if (IF_IS_EMPTY(&unit->hci_acltxq))
d1040 1
a1040 1
	unit->hci_flags |= BTF_XMIT_ACL;
d1042 2
a1043 1
	IF_DEQUEUE(&unit->hci_acltxq, m);
d1046 1
a1046 1
			unit->hci_devname, m->m_pkthdr.len);
d1051 1
a1051 1
			unit->hci_devname, len, UBT_BUFSIZ_ACL);
d1059 2
a1060 2
	unit->hci_stats.acl_tx++;
	unit->hci_stats.byte_tx += len;
d1064 1
a1064 1
			unit,
d1080 1
a1080 1
		unit->hci_flags &= ~BTF_XMIT_ACL;
d1088 1
a1088 2
	struct hci_unit *unit = h;
	struct ubt_softc *sc = (struct ubt_softc *)unit->hci_softc;
d1091 1
a1091 1
		unit->hci_devname, usbd_errstr(status), status);
d1093 1
a1093 1
	unit->hci_flags &= ~BTF_XMIT_ACL;
d1107 1
a1107 1
		unit->hci_stats.err_tx++;
d1115 1
a1115 1
	ubt_xmit_acl_start(unit);
d1119 18
a1136 1
ubt_xmit_sco_start(struct hci_unit *unit)
a1137 1
	struct ubt_softc *sc = (struct ubt_softc *)unit->hci_softc;
d1174 1
a1174 1
			IF_DEQUEUE(&sc->sc_unit.hci_scotxq, m);
d1193 4
a1196 2
			sc->sc_unit.hci_stats.sco_tx++;
			hci_complete_sco(&sc->sc_unit, m);
d1208 2
a1209 2
	sc->sc_unit.hci_flags |= BTF_XMIT_SCO;
	sc->sc_unit.hci_stats.byte_tx += len;
d1252 1
a1252 1
			sc->sc_unit.hci_flags &= ~BTF_XMIT_SCO;
d1272 1
a1272 1
		sc->sc_unit.hci_stats.err_tx++;
d1280 1
a1280 1
	ubt_xmit_sco_start(&sc->sc_unit);
d1328 1
a1328 1
		sc->sc_unit.hci_stats.err_rx++;
d1332 2
a1333 2
	sc->sc_unit.hci_stats.evt_rx++;
	sc->sc_unit.hci_stats.byte_rx += count;
d1336 2
a1337 4
	if (m != NULL)
		hci_input_event(&sc->sc_unit, m);
	else
		sc->sc_unit.hci_stats.err_rx++;
d1409 1
a1409 1
		sc->sc_unit.hci_stats.err_rx++;
d1420 1
a1420 1
			sc->sc_unit.hci_stats.err_rx++;
d1422 2
a1423 2
			sc->sc_unit.hci_stats.acl_rx++;
			sc->sc_unit.hci_stats.byte_rx += count;
d1426 2
a1427 4
			if (m != NULL)
				hci_input_acl(&sc->sc_unit, m);
			else
				sc->sc_unit.hci_stats.err_rx++;
d1500 1
a1500 1
		sc->sc_unit.hci_stats.err_rx++;
d1517 1
a1517 1
	sc->sc_unit.hci_stats.byte_rx += count;
d1554 1
a1554 1
					sc->sc_unit.hci_stats.err_rx++;
d1587 4
a1590 2
					sc->sc_unit.hci_stats.sco_rx++;
					hci_input_sco(&sc->sc_unit, m);
d1606 15
@


1.9
log
@treat usb vendor/product names as a locator, and have usbd_print handle it,
so that it shows up before the :.  as a result, all the usb devices do not
need to have name printing code anymore.  all this now works and prints
nicely because usbd_probe_and_attach() is serialized.  ok kettenis
@
text
@d1 1
a1 1
/* $OpenBSD: ubt.c,v 1.8 2007/06/14 10:11:15 mbalmer Exp $ */
d965 1
a965 1
	if (IF_IS_EMPTY(&unit->hci_acltxq) == NULL)
@


1.8
log
@Remove the definition and usage of the USB_DECLARE_DRIVER_CLASS and
USB_DECLARE_DRIVER macros.

No binary change.

ok dlg.
@
text
@d1 1
a1 1
/* $OpenBSD: ubt.c,v 1.7 2007/06/12 16:26:36 mbalmer Exp $ */
a309 1
	char *devinfop;
a315 4

	devinfop = usbd_devinfo_alloc(sc->sc_udev, 0);
	printf("\n%s: %s\n", sc->sc_dev.dv_xname, devinfop);
	usbd_devinfo_free(devinfop);
@


1.7
log
@Remove the definition and use of the device_ptr_t which was a struct device *.

No binary change.

ok mk.
@
text
@d1 1
a1 1
/* $OpenBSD: ubt.c,v 1.6 2007/06/10 14:49:00 mbalmer Exp $ */
d248 16
a263 1
USB_DECLARE_DRIVER(ubt);
@


1.6
log
@Remove the definition and use of the USBDEVNAME macro.

(This might look easy, but it was a big diff.  Thanks to dlg and especially jsg
for looking over it; we found at least four mistakes in the initial diff.)

ok jsg.
@
text
@d1 1
a1 1
/* $OpenBSD: ubt.c,v 1.5 2007/06/10 10:53:48 mbalmer Exp $ */
d476 1
a476 1
ubt_activate(device_ptr_t self, enum devact act)
@


1.5
log
@Remove the definition and use of the USBDEV macro.  It only created confusion
and the address of it's argument:  USBDEV(sc->sc_dev) yields &sc->sc_dev.

No binary changes.

ok jsg.
@
text
@d1 1
a1 1
/* $OpenBSD: ubt.c,v 1.4 2007/06/06 19:25:49 mk Exp $ */
d304 1
a304 1
	printf("\n%s: %s\n", USBDEVNAME(sc->sc_dev), devinfop);
d313 1
a313 1
		    USBDEVNAME(sc->sc_dev), usbd_errstr(err));
d327 1
a327 1
				USBDEVNAME(sc->sc_dev), usbd_errstr(err), err);
d345 1
a345 1
			    USBDEVNAME(sc->sc_dev), i);
d363 1
a363 1
				USBDEVNAME(sc->sc_dev));
d369 1
a369 1
				USBDEVNAME(sc->sc_dev));
d375 1
a375 1
				USBDEVNAME(sc->sc_dev));
d392 1
a392 1
				USBDEVNAME(sc->sc_dev), usbd_errstr(err), err);
d400 1
a400 1
			USBDEVNAME(sc->sc_dev));
d411 1
a411 1
			USBDEVNAME(sc->sc_dev));
d418 1
a418 1
	sc->sc_unit.hci_devname = USBDEVNAME(sc->sc_dev);
d508 1
a508 1
		    USBDEVNAME(sc->sc_dev), sc->sc_config, usbd_errstr(err), err);
d533 1
a533 1
			    USBDEVNAME(sc->sc_dev), i);
d539 1
a539 1
			USBDEVNAME(sc->sc_dev),
d560 1
a560 1
		    USBDEVNAME(sc->sc_dev), sc->sc_config);
d567 1
a567 1
		    USBDEVNAME(sc->sc_dev), sc->sc_config);
d575 1
a575 1
		    USBDEVNAME(sc->sc_dev), rd_size);
d582 1
a582 1
		    USBDEVNAME(sc->sc_dev), wr_size);
d1457 1
a1457 1
						USBDEVNAME(sc->sc_dev));
@


1.4
log
@Mechanical removal of USBBASEDEVICE.  No binary change.

Tested by thib and myself.

ok mbalmer jsg
@
text
@d1 1
a1 1
/* $OpenBSD: ubt.c,v 1.3 2007/06/01 05:23:49 gwk Exp $ */
d428 1
a428 1
			   USBDEV(sc->sc_dev));
d463 1
a463 1
		usb_detach_wait(USBDEV(sc->sc_dev));
d468 1
a468 1
			   USBDEV(sc->sc_dev));
d920 1
a920 1
		usb_detach_wakeup(USBDEV(sc->sc_dev));
d1015 1
a1015 1
		usb_detach_wakeup(USBDEV(sc->sc_dev));
d1162 1
a1162 1
		usb_detach_wakeup(USBDEV(sc->sc_dev));
d1299 1
a1299 1
		usb_detach_wakeup(USBDEV(sc->sc_dev));
d1392 1
a1392 1
		usb_detach_wakeup(USBDEV(sc->sc_dev));
@


1.3
log
@Remove the hci_enable now done in a higher layer.

ok uwe
@
text
@d1 1
a1 1
/* $OpenBSD: ubt.c,v 1.2 2007/05/31 05:07:19 gwk Exp $ */
d161 1
a161 1
	USBBASEDEVICE		 sc_dev;
@


1.2
log
@Add some context and call hci_enable from this new context, also add an
extra usb dev that we can match on.

ok uwe
@
text
@d1 1
a1 1
/* $OpenBSD: ubt.c,v 1.1 2007/05/30 12:15:02 gwk Exp $ */
a86 1
#include <sys/kthread.h>
a252 2
void ubt_create_thread(void *);
void ubt_thread(void *);
a429 1
	kthread_create_deferred(ubt_create_thread, sc);
a432 14
}

void
ubt_create_thread(void *v)
{
	kthread_create(ubt_thread, v, NULL, "ubt");
}

void
ubt_thread(void *v)
{
	struct ubt_softc *sc = (struct ubt_softc *)v;
	hci_enable(&sc->sc_unit);
	kthread_exit(0);
@


1.1
log
@Drop if_ubt.c originally from freebsd and replace with ubt.c from
netbsd that will work with the new netbt code.

ok uwe
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d87 1
d254 2
d265 1
d433 1
d437 14
@

