head	1.14;
access;
symbols
	OPENBSD_5_5:1.12.0.6
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.11.0.20
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.18
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.16
	OPENBSD_5_0:1.11.0.14
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.12
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.10
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.6
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.8
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.4
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.10.0.2
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.8.0.10
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.6
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.8
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.12
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.8
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.6
	UBC:1.3.0.2
	UBC_BASE:1.3
	OPENBSD_3_0:1.2.0.4
	OPENBSD_3_0_BASE:1.2
	SMP:1.2.0.2
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.2;
locks; strict;
comment	@ * @;


1.14
date	2014.07.12.21.56.57;	author tedu;	state dead;
branches;
next	1.13;
commitid	6Bshd6p5VmKoCOQI;

1.13
date	2014.07.12.18.48.52;	author tedu;	state Exp;
branches;
next	1.12;
commitid	OBNa5kfxQ2UXoiIw;

1.12
date	2013.04.15.09.23.01;	author mglocker;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.26.05.42.18;	author ray;	state Exp;
branches;
next	1.10;

1.10
date	2007.09.19.21.59.51;	author martin;	state Exp;
branches;
next	1.9;

1.9
date	2007.09.17.01.40.38;	author fgsch;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.14.19.07.02;	author damien;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.19.15.20.13;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.25.04.07.32;	author nate;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.25.02.18.10;	author nate;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.05.22.23.43;	author nate;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.31.04.24.44;	author nate;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2001.05.03.02.20.31;	author aaron;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2001.01.29.00.33.13;	author aaron;	state Exp;
branches;
next	;

1.2.2.1
date	2001.05.14.22.26.18;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2001.07.04.10.43.38;	author niklas;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2001.11.13.21.10.04;	author niklas;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	2003.03.28.00.38.30;	author niklas;	state Exp;
branches;
next	;

1.3.2.1
date	2002.06.11.03.42.30;	author art;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2002.10.29.00.33.31;	author art;	state Exp;
branches;
next	;


desc
@@


1.14
log
@"Dr. Jones. Again we see there is nothing you can possess which I cannot
take away."

remove uyap. no effect except on hppa where it was strangely enabled.
@
text
@/*	$OpenBSD: ezload.c,v 1.13 2014/07/12 18:48:52 tedu Exp $ */
/*	$NetBSD: ezload.c,v 1.5 2002/07/11 21:14:25 augustss Exp $	*/

/*
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by  Lennart Augustsson <lennart@@augustsson.net>.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/malloc.h>
#include <sys/conf.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdi_util.h>

#include <dev/usb/ezload.h>

/*
 * Vendor specific request code for Anchor Upload/Download
 */

/* This one is implemented in the core */
#define ANCHOR_LOAD_INTERNAL	0xA0

/* This is the highest internal RAM address for the AN2131Q */
#define ANCHOR_MAX_INTERNAL_ADDRESS  0x1B3F

/*
 * EZ-USB Control and Status Register.  Bit 0 controls 8051 reset
 */
#define ANCHOR_CPUCS_REG	0x7F92
#define  ANCHOR_RESET		0x01

/*
 * Although USB does not limit you here, the Anchor docs
 * quote 64 as a limit, and Mato@@activewireinc.com suggested
 * to use 16.
 */
#define ANCHOR_CHUNK 16

/*
 * This is a firmware loader for ezusb (Anchor) devices. When the firmware
 * has been downloaded the device will simulate a disconnect and when it
 * is next recognized by the USB software it will appear as another
 * device.
 */

#ifdef USB_DEBUG
#define DPRINTF(x)	if (ezloaddebug) printf x
#define DPRINTFN(n,x)	if (ezloaddebug>(n)) printf x
int ezloaddebug = 0;
#else
#define DPRINTF(x)
#define DPRINTFN(n,x)
#endif

usbd_status
ezload_reset(struct usbd_device *dev, int reset)
{
	usb_device_request_t req;
	uByte rst;

	DPRINTF(("ezload_reset: reset=%d\n", reset));

	rst = reset ? ANCHOR_RESET : 0;
	req.bmRequestType = UT_WRITE_VENDOR_DEVICE;
	req.bRequest = ANCHOR_LOAD_INTERNAL;
	USETW(req.wValue, ANCHOR_CPUCS_REG);
	USETW(req.wIndex, 0);
	USETW(req.wLength, 1);
	return (usbd_do_request(dev, &req, &rst));
}

usbd_status
ezload_download(struct usbd_device *dev, const char *name, const u_char *buf,
    size_t buflen)
{
	usb_device_request_t req;
	usbd_status err = 0;
	u_int8_t length;
	u_int16_t address;
	u_int len, offs;

	for (;;) {
		length = *buf++;
		if (length == 0)
			break;

		address = UGETW(buf); buf += 2;
#if 0
		if (address + length > ANCHOR_MAX_INTERNAL_ADDRESS)
			return (USBD_INVAL);
#endif

		req.bmRequestType = UT_WRITE_VENDOR_DEVICE;
		req.bRequest = ANCHOR_LOAD_INTERNAL;
		USETW(req.wIndex, 0);
		for (offs = 0; offs < length; offs += ANCHOR_CHUNK) {
			len = length - offs;
			if (len > ANCHOR_CHUNK)
				len = ANCHOR_CHUNK;
			USETW(req.wValue, address + offs);
			USETW(req.wLength, len);
			DPRINTFN(2,("ezload_download: addr=0x%x len=%d\n",
				    address + offs, len));
			err = usbd_do_request(dev, &req, (u_char *)buf);
			if (err)
				break;

			buf += len;
		}
		if (err)
			break;
	}

	return (err);
}

usbd_status
ezload_downloads_and_reset(struct usbd_device *dev, char **names)
{
	usbd_status err;
	size_t buflen;
	u_char *buf;
	int error;

	/*(void)ezload_reset(dev, 1);*/
	err = ezload_reset(dev, 1);
	if (err)
		return (err);
	usbd_delay_ms(dev, 250);

	while (*names != NULL) {
		error = loadfirmware(*names, &buf, &buflen);
		if (error)
			return (error);

		err = ezload_download(dev, *names, buf, buflen);
		free(buf, M_DEVBUF, 0);
		if (err)
			return (err);
		names++;
	}
	if (err)
		return (err);
	usbd_delay_ms(dev, 250);
	/*(void)ezload_reset(dev, 0);*/
	err = ezload_reset(dev, 0);
	usbd_delay_ms(dev, 250);
	return (err);
}
@


1.13
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: ezload.c,v 1.12 2013/04/15 09:23:01 mglocker Exp $ */
@


1.12
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ezload.c,v 1.11 2008/06/26 05:42:18 ray Exp $ */
d167 1
a167 1
		free(buf, M_DEVBUF);
@


1.11
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ezload.c,v 1.10 2007/09/19 21:59:51 martin Exp $ */
d86 1
a86 1
ezload_reset(usbd_device_handle dev, int reset)
d103 1
a103 1
ezload_download(usbd_device_handle dev, const char *name, const u_char *buf,
d148 1
a148 1
ezload_downloads_and_reset(usbd_device_handle dev, char **names)
@


1.10
log
@revert previous; still need sys/malloc.h for free(9) and friends here

noted by Markus Hennecke
@
text
@d1 1
a1 1
/*	$OpenBSD: ezload.c,v 1.9 2007/09/17 01:40:38 fgsch Exp $ */
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.9
log
@remove unneeded malloc.h include.
@
text
@d1 1
a1 1
/*	$OpenBSD: ezload.c,v 1.8 2005/04/14 19:07:02 damien Exp $ */
d44 1
@


1.8
log
@fix reading of the binary image.
binary image is not a set of ezdata structures.
@
text
@d1 1
a1 1
/*	$OpenBSD: ezload.c,v 1.7 2004/12/19 15:20:13 deraadt Exp $ */
a43 1
#include <sys/malloc.h>
@


1.7
log
@filesystem firmware loading for uyap(4).  this should work, i wrote it very
carefully.  unfortunately, we cannot find anyone who has one of these devices
in our entire user community, thus far.  commit it anyways.  whoever finds
one can contact me if there is a problem.
@
text
@d1 1
a1 1
/*	$OpenBSD: ezload.c,v 1.6 2002/07/25 04:07:32 nate Exp $ */
d114 3
a116 2
	const struct ezdata *ptr;
	usbd_status err;
a117 1
	const struct ezdata *rec = (struct ezdata *)buf;
d119 4
a122 3
	DPRINTF(("ezload_down record=%p\n", rec));

	for (ptr = rec; ptr->length != 0; ptr++) {
d124 1
d126 1
a126 1
		if (ptr->address + ptr->length > ANCHOR_MAX_INTERNAL_ADDRESS)
d133 2
a134 2
		for (offs = 0; offs < ptr->length; offs += ANCHOR_CHUNK) {
			len = ptr->length - offs;
d137 1
a137 1
			USETW(req.wValue, ptr->address + offs);
d140 2
a141 2
				    ptr->address + offs, len));
			err = usbd_do_request(dev, &req, ptr->data + offs);
d144 2
@


1.6
log
@update $NetBSD$ tags
@
text
@d1 1
a1 1
/*	$OpenBSD: ezload.c,v 1.5 2002/07/25 02:18:10 nate Exp $ */
d44 1
d110 2
a111 1
ezload_download(usbd_device_handle dev, const struct ezdata *rec)
d117 1
d151 1
a151 1
ezload_downloads_and_reset(usbd_device_handle dev, const struct ezdata **recs)
d154 3
d163 8
a170 2
	while (*recs != NULL) {
		err = ezload_download(dev, *recs++);
d173 1
@


1.5
log
@get rid of trailing whitespace
@
text
@d1 2
a2 2
/*	$OpenBSD: ezload.c,v 1.4 2002/05/05 22:23:43 nate Exp $ */
/*	$NetBSD: ezload.c,v 1.4 2001/11/13 06:24:53 lukem Exp $	*/
@


1.4
log
@Use correct $NetBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: ezload.c,v 1.3 2001/10/31 04:24:44 nate Exp $ */
d96 1
a96 1
	
d115 1
a115 1
	
d117 1
a117 1
	
d143 1
a143 1
	
@


1.3
log
@Synchronize usb code with NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: ezload.c,v 1.2 2001/05/03 02:20:31 aaron Exp $ */
/*	$NetBSD: ezload.c,v 1.3 2001/07/11 04:53:48 augustss Exp $	*/
@


1.3.2.1
log
@Sync UBC branch to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: ezload.c,v 1.4 2001/11/13 06:24:53 lukem Exp $	*/
@


1.3.2.2
log
@sync to -current
@
text
@d2 1
a2 1
/*	$NetBSD: ezload.c,v 1.5 2002/07/11 21:14:25 augustss Exp $	*/
d96 1
a96 1

d115 1
a115 1

d117 1
a117 1

d143 1
a143 1

@


1.2
log
@Sync with NetBSD. Tested with a USB keyboard, USB mouse, and three different
kue(4) Ethernet devices.
@
text
@d1 2
a2 2
/*	$OpenBSD: ezload.c,v 1.1 2001/01/29 00:33:13 aaron Exp $ */
/*	$NetBSD: ezload.c,v 1.2 2001/01/18 20:28:23 jdolecek Exp $	*/
a71 1
 * which is too big as an error for now.
d134 1
a134 1
			DPRINTFN(5,("ezload_download: addr=0x%x len=%d\n",
d152 1
a152 1
	(void)ezload_reset(dev, 1);
d165 1
a165 1
	(void)ezload_reset(dev, 0);
@


1.2.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d2 1
a2 1
/*	$NetBSD: ezload.c,v 1.1 2001/01/02 18:49:56 augustss Exp $	*/
@


1.2.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: ezload.c,v 1.2 2001/01/18 20:28:23 jdolecek Exp $	*/
@


1.2.2.3
log
@Merge in -current
@
text
@d2 1
a2 1
/*	$NetBSD: ezload.c,v 1.3 2001/07/11 04:53:48 augustss Exp $	*/
d72 1
d135 1
a135 1
			DPRINTFN(2,("ezload_download: addr=0x%x len=%d\n",
d153 1
a153 1
	/*(void)ezload_reset(dev, 1);*/
d166 1
a166 1
	/*(void)ezload_reset(dev, 0);*/
@


1.2.2.4
log
@Sync the SMP branch with 3.3
@
text
@d2 1
a2 1
/*	$NetBSD: ezload.c,v 1.5 2002/07/11 21:14:25 augustss Exp $	*/
d96 1
a96 1

d115 1
a115 1

d117 1
a117 1

d143 1
a143 1

@


1.1
log
@Add ezload, subroutines for downloading firmware into Cypress (formerly
Anchor) EZ-USB chips. From NetBSD. /* XXX - untested */
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: ezload.c,v 1.1 2001/01/02 18:49:56 augustss Exp $	*/
@

