head	1.12;
access;
symbols
	OPENBSD_6_0:1.12.0.6
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.12
date	2016.01.09.04.14.42;	author jcs;	state Exp;
branches;
next	1.11;
commitid	KAeCDAijcgEnOtfF;

1.11
date	2016.01.08.15.54.14;	author jcs;	state Exp;
branches;
next	1.10;
commitid	kI4H556ZKYkRQGw5;

1.10
date	2015.03.14.03.38.50;	author jsg;	state Exp;
branches;
next	1.9;
commitid	p4LJxGKbi0BU2cG6;

1.9
date	2014.07.12.18.48.52;	author tedu;	state Exp;
branches;
next	1.8;
commitid	OBNa5kfxQ2UXoiIw;

1.8
date	2014.05.07.08.17.21;	author mpi;	state Exp;
branches;
next	1.7;

1.7
date	2014.03.19.08.59.37;	author mpi;	state Exp;
branches;
next	1.6;

1.6
date	2014.03.07.18.39.02;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2013.11.11.09.16.03;	author pirofti;	state Exp;
branches;
next	1.4;

1.4
date	2013.04.15.09.23.02;	author mglocker;	state Exp;
branches;
next	1.3;

1.3
date	2013.03.28.03.58.03;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2012.10.19.14.52.38;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2012.09.20.13.52.11;	author yuo;	state Exp;
branches;
next	;


desc
@@


1.12
log
@revert manual additions of hid.h now that usbhid.h brings it in
@
text
@/*	$OpenBSD: uoaklux.c,v 1.11 2016/01/08 15:54:14 jcs Exp $   */

/*
 * Copyright (c) 2012 Yojiro UO <yuo@@nui.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* TORADEX OAK seriese sensors: lux sensor driver */
/* http://developer.toradex.com/files/toradex-dev/uploads/media/Oak/Oak_ProgrammingGuide.pdf */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/malloc.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/sensors.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbhid.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdevs.h>
#include <dev/usb/uhidev.h>

#include "uoak.h"

#ifdef UOAKLUX_DEBUG
int	uoakluxdebug = 0;
#define DPRINTFN(n, x)	do { if (uoakluxdebug > (n)) printf x; } while (0)
#else
#define DPRINTFN(n, x)
#endif

#define DPRINTF(x) DPRINTFN(0, x)

#define UOAKLUX_SAMPLE_RATE	200	/* ms */
#define UOAKLUX_REFRESH_PERIOD	5	/* 5 sec : 0.2Hz */

struct uoaklux_sensor {
	struct uoak_sensor lux;
	/* lux sensor setting */
	uint8_t		 gain;
	int		 inttime;

};

struct uoaklux_softc {
	struct uhidev		 sc_hdev;

	/* uoak common */
	struct uoak_softc	 sc_uoak_softc;

	/* sensor framework */
	struct uoaklux_sensor	 sc_sensor;
	struct ksensordev	 sc_sensordev;
	struct sensor_task	*sc_sensortask;
};

const struct usb_devno uoaklux_devs[] = {
	{ USB_VENDOR_TORADEX, USB_PRODUCT_TORADEX_LUX},
};
#define uoaklux_lookup(v, p) usb_lookup(uoaklux_devs, v, p)

int  uoaklux_match(struct device *, void *, void *);
void uoaklux_attach(struct device *, struct device *, void *);
int  uoaklux_detach(struct device *, int);

void uoaklux_intr(struct uhidev *, void *, u_int);
void uoaklux_refresh(void *);

int uoaklux_get_sensor_setting(struct uoaklux_softc *, enum uoak_target);

void uoaklux_dev_setting(void *, enum uoak_target);
void uoaklux_dev_print(void *, enum uoak_target);


struct cfdriver uoaklux_cd = {
	NULL, "uoaklux", DV_DULL
};

const struct cfattach uoaklux_ca = {
	sizeof(struct uoaklux_softc),
	uoaklux_match,
	uoaklux_attach,
	uoaklux_detach,
};

struct uoak_methods uoaklux_methods = {
	uoaklux_dev_print,
	uoaklux_dev_setting
};


int
uoaklux_match(struct device *parent, void *match, void *aux)
{
	struct uhidev_attach_arg *uha = aux;

	if (uha->reportid == UHIDEV_CLAIM_ALLREPORTID)
		return (UMATCH_NONE);

	if (uoaklux_lookup(uha->uaa->vendor, uha->uaa->product) == NULL)
		return UMATCH_NONE;

	return (UMATCH_VENDOR_PRODUCT);
}

void
uoaklux_attach(struct device *parent, struct device *self, void *aux)
{
	struct uoaklux_softc *sc = (struct uoaklux_softc *)self;
	struct usb_attach_arg *uaa = aux;
	struct uhidev_attach_arg *uha = (struct uhidev_attach_arg *)uaa;
	struct usbd_device *dev = uha->parent->sc_udev;

	struct uoak_softc *scc = &sc->sc_uoak_softc;
	int err, size, repid;
	void *desc;

	sc->sc_hdev.sc_intr = uoaklux_intr;
	sc->sc_hdev.sc_parent = uha->parent;
	sc->sc_hdev.sc_report_id = uha->reportid;

	scc->sc_parent = sc;
	scc->sc_udev = dev;
	scc->sc_hdev = &sc->sc_hdev;
	scc->sc_methods = &uoaklux_methods;
	scc->sc_sensordev = &sc->sc_sensordev;

	uhidev_get_report_desc(uha->parent, &desc, &size);
	repid = uha->reportid;
	scc->sc_ilen = hid_report_size(desc, size, hid_input, repid);
	scc->sc_olen = hid_report_size(desc, size, hid_output, repid);
	scc->sc_flen = hid_report_size(desc, size, hid_feature, repid);

	/*device initialize */
	(void)uoak_led_ctrl(scc, OAK_TARGET_RAM, OAK_LED_ON);
	err = uoak_set_sample_rate(scc, OAK_TARGET_RAM, UOAKLUX_SAMPLE_RATE);
	if (err) {
		printf("%s: could not set sampling rate. exit\n",
		    sc->sc_hdev.sc_dev.dv_xname);
		return;
	}

	/* query and print device setting */
	uoak_get_devinfo(scc);
	uoak_print_devinfo(scc);

	DPRINTF((" config in RAM\n"));
	uoak_get_setting(scc, OAK_TARGET_RAM);
	uoak_print_setting(scc, OAK_TARGET_RAM);
#ifdef UOAKLUX_DEBUG
	DPRINTF((" config in FLASh\n"));
	uoak_get_setting(scc, OAK_TARGET_FLASH);
	uoak_print_setting(scc, OAK_TARGET_FLASH);
#endif

	/* attach sensor */
	strlcpy(sc->sc_sensordev.xname, sc->sc_hdev.sc_dev.dv_xname,
	    sizeof(sc->sc_sensordev.xname));
	uoak_sensor_attach(scc, &sc->sc_sensor.lux, SENSOR_LUX);

	/* start sensor */
	sc->sc_sensortask = sensor_task_register(sc, uoaklux_refresh, 
	    UOAKLUX_REFRESH_PERIOD);
	if (sc->sc_sensortask == NULL) {
		printf(", unable to register update task\n");
		return;
	}
	sensordev_install(&sc->sc_sensordev);

	err = uhidev_open(&sc->sc_hdev);
	if (err) {
		printf("%s: could not open interrupt pipe, quit\n",
		    sc->sc_hdev.sc_dev.dv_xname);
		return;
	}
	scc->sc_ibuf = malloc(scc->sc_ilen, M_USBDEV, M_WAITOK);

	DPRINTF(("uoaklux_attach: complete\n"));
}


int
uoaklux_detach(struct device *self, int flags)
{
	struct uoaklux_softc *sc = (struct uoaklux_softc *)self;
	struct uoak_softc *scc = &sc->sc_uoak_softc;
	int rv = 0;

	wakeup(&sc->sc_sensortask);
	sensordev_deinstall(&sc->sc_sensordev);

	uoak_sensor_detach(scc, &sc->sc_sensor.lux);

	if (sc->sc_sensortask != NULL)
		sensor_task_unregister(sc->sc_sensortask);

	if (sc->sc_hdev.sc_state & UHIDEV_OPEN)
		uhidev_close(&sc->sc_hdev);

	if (scc->sc_ibuf != NULL) {
		free(scc->sc_ibuf, M_USBDEV, 0);
		scc->sc_ibuf = NULL;
	}

	return (rv);
}

void
uoaklux_intr(struct uhidev *addr, void *ibuf, u_int len)
{
	struct uoaklux_softc *sc = (struct uoaklux_softc *)addr;
	struct uoak_softc *scc = &sc->sc_uoak_softc;
	int frame, val;

	if (scc->sc_ibuf == NULL)
		return;

	memcpy(scc->sc_ibuf, ibuf, len);
	frame = (scc->sc_ibuf[1] << 8) + (scc->sc_ibuf[0]);
	val = (scc->sc_ibuf[3] << 8) + (scc->sc_ibuf[2]);
	uoak_sensor_update(&sc->sc_sensor.lux, val);
}

void
uoaklux_refresh(void *arg)
{
	struct uoaklux_softc *sc = arg;
	struct uoak_softc *scc = &sc->sc_uoak_softc;
	uint8_t led;

	/* blink LED for each cycle */
	if (uoak_led_status(scc, OAK_TARGET_RAM, &led) < 0)
		DPRINTF(("status query error\n"));
	if (led == OAK_LED_OFF) 
		(void)uoak_led_ctrl(scc, OAK_TARGET_RAM, OAK_LED_ON);
	else 
		(void)uoak_led_ctrl(scc, OAK_TARGET_RAM, OAK_LED_OFF);

	uoak_sensor_refresh(&sc->sc_sensor.lux, 1000000, 0);
}

int
uoaklux_get_sensor_setting(struct uoaklux_softc *sc, enum uoak_target target)
{
	struct uoak_softc *scc = &sc->sc_uoak_softc;
	uint8_t result;

	memset(&scc->sc_rcmd, 0, sizeof(struct uoak_rcmd));
	scc->sc_rcmd.target = target;
	scc->sc_rcmd.datasize = 0x1;
	USETW(&scc->sc_rcmd.cmd, OAK_CMD_SENSORSETTING);

	if (uoak_get_cmd(scc) < 0)
		return EIO;

	result =  scc->sc_buf[1];

	sc->sc_sensor.gain = ((result & OAK_LUX_SENSOR_GAIN_MASK) >> 3);
	sc->sc_sensor.inttime = (result & OAK_LUX_SENSOR_INTTIME_MASK);

	return 0;
}

/* device specific functions */
void
uoaklux_dev_setting(void *parent, enum uoak_target target)
{
	struct uoaklux_softc *sc = (struct uoaklux_softc *)parent;

	/* get device specific configuration */
	(void)uoaklux_get_sensor_setting(sc, target);
}

void
uoaklux_dev_print(void *parent, enum uoak_target target)
{
	struct uoaklux_softc *sc = (struct uoaklux_softc *)parent;

	printf(", %s gain", (sc->sc_sensor.gain ? "HIGH" : "LOW"));
	printf(", speed ");
	switch(sc->sc_sensor.inttime) {
	case OAK_LUX_SENSOR_INTTIME_13_7ms:
		printf("13.7ms");
		break;
	case OAK_LUX_SENSOR_INTTIME_101ms:
		printf("101ms");
		break;
	case OAK_LUX_SENSOR_INTTIME_402ms:
		printf("402ms");
		break;
	default:
		printf("unknown");
		break;
	}
}
@


1.11
log
@Move HID support files out of dev/usb into new dev/hid directory

These files aren't USB-specific and were used by the previous
Bluetooth implementation, and will be used by the upcoming
HID-over-i2C implementation

ok deraadt
previous version ok kettenis and mpi
@
text
@d1 1
a1 1
/*	$OpenBSD: uoaklux.c,v 1.10 2015/03/14 03:38:50 jsg Exp $   */
a34 2

#include <dev/hid/hid.h>
@


1.10
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uoaklux.c,v 1.9 2014/07/12 18:48:52 tedu Exp $   */
d35 3
a37 1
#include <dev/usb/hid.h>
@


1.9
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: uoaklux.c,v 1.8 2014/05/07 08:17:21 mpi Exp $   */
a32 1
#include <dev/usb/usbdi_util.h>
@


1.8
log
@Make sure to call uhidev_close() upon detach for every HID driver calling
uhidev_open() at attach time.  This plugs up to 3 xfer leaks and a buffer
one.

ok yuo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uoaklux.c,v 1.7 2014/03/19 08:59:37 mpi Exp $   */
d215 1
a215 1
		free(scc->sc_ibuf, M_USBDEV);
@


1.7
log
@Add a temporary hack to let a subdriver claim all the reportIDs of
a device.  This should be removed once all the drivers attaching to
uhidev(4) are converted.

ok andre@@, sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uoaklux.c,v 1.6 2014/03/07 18:39:02 mpi Exp $   */
d210 3
@


1.6
log
@Do not define per-driver DEBUG variable when USB_DEBUG is defined.  It's
really impossible to debug the USB stack when any single device you plug
in your machine starts to vomit its own poetry,
@
text
@d1 1
a1 1
/*	$OpenBSD: uoaklux.c,v 1.5 2013/11/11 09:16:03 pirofti Exp $   */
d109 4
a112 2
	struct usb_attach_arg *uaa = aux;
	struct uhidev_attach_arg *uha = (struct uhidev_attach_arg *)uaa;
@


1.5
log
@Clean-up the activate routines from the uoak*(4) drivers.

Leave the deactivate bits to the parent.
Simplify by making a single dying check in uhidev(4) interrupt routine
instead of having each child doing it.

Okay mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uoaklux.c,v 1.4 2013/04/15 09:23:02 mglocker Exp $   */
a37 4

#ifdef USB_DEBUG
#define UOAKLUX_DEBUG
#endif
@


1.4
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uoaklux.c,v 1.3 2013/03/28 03:58:03 tedu Exp $   */
a64 1
	u_char			 sc_dying;
a82 1
int  uoaklux_activate(struct device *, int);
a101 1
	uoaklux_activate,
a220 13
int
uoaklux_activate(struct device *self, int act)
{
	struct uoaklux_softc *sc = (struct uoaklux_softc *)self;

	switch (act) {
	case DVACT_DEACTIVATE:
		sc->sc_dying = 1;
		break;
	}
	return (0);
}

a227 2
	if (sc->sc_dying)
		return;
@


1.3
log
@proc.h is way too much header for usb to handle.
@
text
@d1 1
a1 1
/*	$OpenBSD: uoaklux.c,v 1.2 2012/10/19 14:52:38 deraadt Exp $   */
d131 1
a131 1
	usbd_device_handle dev = uha->parent->sc_udev;
@


1.2
log
@small cleanups and output prettying
ok yuo matthieu
@
text
@d1 1
a1 1
/*	$OpenBSD: uoaklux.c,v 1.1 2012/09/20 13:52:11 yuo Exp $   */
a22 1
#include <sys/proc.h>
@


1.1
log
@add device driver for Toradex OAK usb sensors:
 uoaklux(4): Toradex OAK LUX, USB illuminance sensor
 uoakrh(4) : Toradex OAK RH, USB temperature and relative humidity sensor
 uoakv(4)  : Toradex OAK V, USB +/- 10V 8channel ADC interface

ok deraadet@@
@
text
@d1 1
a1 1
/*	$OpenBSD:$   */
d159 1
a159 1
		  sc->sc_hdev.sc_dev.dv_xname);
d193 1
a193 1
		  sc->sc_hdev.sc_dev.dv_xname);
d311 2
a312 2
	printf("  sensor gain:%s", (sc->sc_sensor.gain ? "HIGH" : "LOW"));
	printf(", integration time:");
a326 2

	printf("\n");
@

