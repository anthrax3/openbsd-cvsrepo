head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.10
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.34
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.38
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.36
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.32
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.30
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.28
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.26
	OPENBSD_5_0:1.2.0.24
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.22
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.20
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.16
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.18
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.14
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.12
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.10
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.8
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.6
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.0.10
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.8
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2015.06.12.15.47.31;	author mpi;	state Exp;
branches;
next	1.2;
commitid	t0sjCnxjbRqHxJe2;

1.2
date	2005.10.31.05.37.13;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.26.15.34.16;	author drahn;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.02.19.10.56.33;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Only match devices with a valid configuration.

Most of the WiFi/Ethernet USB adapter only have one configuration and always
use its first interface.  In order to improve USB descriptors parsing start
by reducing the number of places where a configuration is set.

Tests & ok stsp@@
@
text
@/*	$OpenBSD: if_wi_usb.h,v 1.2 2005/10/31 05:37:13 jsg Exp $ */

/*
 * Copyright (c) 2003 Dale Rahn. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
 */

#define WI_USB_ENDPT_TX		1
#define WI_USB_ENDPT_RX		2
#define WI_USB_ENDPT_INTR	3
#define WI_USB_ENDPT_MAX	4


/* XXX */
#define WI_USB_DATA_MAXLEN	WI_DEFAULT_DATALEN
#define WI_USB_BUFSZ		2368	/* MAX PACKET LEN ???  n%64 == 0 */
#define WI_USB_INTR_INTERVAL	100	/* ms */

struct wi_usb_softc;

struct wi_usb_chain {
	struct wi_usb_softc	*wi_usb_sc;
	struct usbd_xfer	*wi_usb_xfer;
	void			*wi_usb_buf;
	struct mbuf		*wi_usb_mbuf;
	int			wi_usb_idx;
};
#define WI_USB_TX_LIST_CNT	1
#define WI_USB_RX_LIST_CNT	1

struct wi_rridreq {
	u_int16_t		type;		/* 0x00 */
	u_int16_t		frmlen;		/* 0x02 */
	u_int16_t		rid;		/* 0x04 */
	u_int8_t		pad[58]; 	/* 0x06	+ sizeof(.) == 64 */	
};
struct wi_rridresp {
	u_int16_t		type;		/* 0x00 */
	u_int16_t		frmlen;		/* 0x02 */
	u_int16_t		rid;		/* 0x04 */
	u_int8_t		data[1658];	/* 0x06 */
	/* sizeof(struct wi_rridresp) == WI_USB_BUFSZ */
};
struct wi_wridreq {
	u_int16_t		type;		/* 0x00 */
	u_int16_t		frmlen;		/* 0x02 */
	u_int16_t		rid;		/* 0x04 */
	u_int8_t		data[2048];	/* 0x06 */
};
struct wi_wridresp {
	u_int16_t		type;
	u_int16_t		status;
	u_int16_t		resp0;
	u_int16_t		resp1;
	u_int16_t		resp2;
};
struct wi_info {
	u_int16_t		type;
	u_int16_t		info;
};


#define WI_USB_CMD_INIT		0x0
#define WI_USB_CMD_ENABLE	0x1
#define WI_USB_CMD_DISABLE	0x2
#define WI_USB_CMD_DIAG		0x3

struct wi_cmdreq {
	u_int16_t		type;
	u_int16_t		cmd;
	u_int16_t		param0;
	u_int16_t		param1;
	u_int16_t		param2;
	u_int8_t		pad[54];
};
struct wi_cmdresp {
	u_int16_t		type;
	u_int16_t		status;
	u_int16_t		resp0;
	u_int16_t		resp1;
	u_int16_t		resp2;
};

typedef union {
	u_int16_t		type;
	struct wi_rridreq	rridreq;
	struct wi_rridresp	rridresp;
	struct wi_cmdreq	cmdreq;
	struct wi_cmdresp	cmdresp;
} wi_usb_usbin;
#define WI_USB_INTR_PKTLEN	8

#define WI_USB_TX_TIMEOUT	10000 /* ms */


/* Should be sent to the bulkout endpoint */
#define WI_USB_TXFRM		0
#define WI_USB_CMDREQ		1
#define WI_USB_WRIDREQ		2
#define WI_USB_RRIDREQ		3
#define WI_USB_WMEMREQ		4
#define WI_USB_RMEMREQ		5

/* Received from the bulkin endpoint */
#define WI_USB_ISTXFRM(a)	(((a) & 0xf000) == 0x0000)
#define WI_USB_ISRXFRM(a)	(((a) & 0xf000) == 0x2000)

#define WI_USB_INFOFRM		0x8000
#define WI_USB_CMDRESP		0x8001
#define WI_USB_WRIDRESP		0x8002
#define WI_USB_RRIDRESP		0x8003
#define WI_USB_WMEMRESP		0x8004
#define WI_USB_RMEMRESP		0x8005
#define WI_USB_BUFAVAIL		0x8006
#define WI_USB_ERROR		0x8007

#define WI_GET_IFP(sc)		&(sc)->sc_wi.sc_ic.ic_if

/* USB */
int wi_cmd_usb(struct wi_softc *sc, int cmd, int val0, int val1, int val2);
int wi_read_record_usb(struct wi_softc *sc, struct wi_ltv_gen *ltv);
int wi_write_record_usb(struct wi_softc *sc, struct wi_ltv_gen *ltv);
int wi_read_data_usb(struct wi_softc *sc, int id, int off, caddr_t buf,
    int len);
int wi_write_data_usb(struct wi_softc *sc, int id, int off, caddr_t buf,
    int len);
int wi_alloc_nicmem_usb(struct wi_softc *sc, int len, int *id);
int wi_get_fid_usb(struct wi_softc *sc, int fid);
void wi_init_usb(struct wi_softc *sc);

void wi_start_usb(struct ifnet *ifp);
int wi_ioctl_usb(struct ifnet *, u_long, caddr_t);
void wi_inquire_usb(void *xsc);
void wi_watchdog_usb(struct ifnet *ifp);
@


1.2
log
@Move from arpcom to ieee80211com in wi softc.  This will be
required for net80211 support.
Updated version of a diff from dlg@@
similiar diff ok fgsch@@, ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_wi_usb.h,v 1.1 2003/10/26 15:34:16 drahn Exp $ */
a30 2
#define WI_USB_CONFIG_NO	1

a34 2

#define WI_USB_IFACE_IDX	0
@


1.1
log
@Driver for PRISM 2.5/3 based (wifi) USB adapters. This is a work in progress,
it does not yet handle bulk data copies or hostap mode. Only one model
currently supported, however driver may support other PRISM based adapters.
ok millert@@ fgsch@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d144 1
a144 1
#define WI_GET_IFP(sc)		&(sc)->sc_wi.sc_arpcom.ac_if
@


1.1.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@@

