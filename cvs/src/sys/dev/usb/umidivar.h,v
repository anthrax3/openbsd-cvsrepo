head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.12
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.16
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.14
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.8
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.10
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.14.0.2
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.16
	OPENBSD_5_0:1.12.0.14
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.12
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.10
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.6
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.8
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.4
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.8
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.6
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	SMP:1.7.0.4
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	UBC:1.6.0.4
	UBC_SYNC_B:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6;
locks; strict;
comment	@ * @;


1.16
date	2013.11.10.10.22.39;	author pirofti;	state Exp;
branches;
next	1.15;

1.15
date	2013.04.15.09.23.02;	author mglocker;	state Exp;
branches;
next	1.14;

1.14
date	2012.09.02.20.51.36;	author ratchov;	state Exp;
branches;
next	1.13;

1.13
date	2012.03.30.08.18.19;	author ratchov;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.26.05.42.19;	author ray;	state Exp;
branches;
next	1.11;

1.11
date	2007.06.06.19.25.49;	author mk;	state Exp;
branches;
next	1.10;

1.10
date	2006.04.07.22.41.33;	author jsg;	state Exp;
branches;
next	1.9;

1.9
date	2005.09.07.06.57.09;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2004.06.27.19.44.48;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.11.11.02.32.32;	author nate;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.08.01.09.07;	author deraadt;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2002.07.25.04.07.33;	author nate;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.25.02.18.11;	author nate;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.11.07.49.57;	author nate;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.07.18.29.18;	author nate;	state dead;
branches;
next	1.1;

1.1
date	2002.05.07.18.08.04;	author nate;	state Exp;
branches;
next	;

1.6.4.1
date	2002.10.29.00.33.32;	author art;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2003.05.19.22.26.19;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Replace sc_dying in favour of usbd_is_dying() and usbd_deactivate().

Okay mpi@@
@
text
@/*	$OpenBSD: umidivar.h,v 1.15 2013/04/15 09:23:02 mglocker Exp $ */
/*	$NetBSD: umidivar.h,v 1.5 2002/09/12 21:00:42 augustss Exp $	*/
/*
 * Copyright (c) 2001 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Takuya SHIOZAKI (tshiozak@@netbsd.org).
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#define UMIDI_PACKET_SIZE 4
struct umidi_packet {
	unsigned	status;
	unsigned	index;
	unsigned char	buf[UMIDI_PACKET_SIZE];		/* common/voice packet */
};

/*
 * hierarchie
 *
 * <-- parent	       child -->
 *
 * umidi(sc) -> endpoint -> jack   <- (dynamically assignable) - mididev
 *	   ^	 |    ^	    |
 *	   +-----+    +-----+
 */

/* midi device */
struct umidi_mididev {
	struct umidi_softc	*sc;
	struct device		*mdev;
	/* */
	struct umidi_jack	*in_jack;
	struct umidi_jack	*out_jack;
	/* */
	int			opened;
	int			flags;
};

/* Jack Information */
struct umidi_jack {
	struct umidi_endpoint	*endpoint;
	/* */
	int			cable_number;
	struct umidi_packet	packet;
	void			*arg;
	int			binded;
	int			opened;
	SIMPLEQ_ENTRY(umidi_jack) intrq_entry;	
	unsigned 		intr;
	union {
		struct {
			void				(*intr)(void *);
		} out;
		struct {
			void				(*intr)(void *, int);
		} in;
	} u;
};

#define UMIDI_MAX_EPJACKS	16
/* endpoint data */
struct umidi_endpoint {
	struct umidi_softc	*sc;
	/* */
	int			addr;
	struct usbd_pipe	*pipe;
	struct usbd_xfer	*xfer;
	unsigned char		*buffer;
	unsigned		packetsize;
	int			num_open;
	int			num_jacks;
	struct umidi_jack	*jacks[UMIDI_MAX_EPJACKS];
	unsigned		used;
	unsigned		busy;
	unsigned 		pending;
	SIMPLEQ_HEAD(, umidi_jack) intrq;
};

/* software context */
struct umidi_softc {
	struct device		sc_dev;
	struct usbd_device	*sc_udev;
	struct usbd_interface	*sc_iface;
	struct umidi_quirk	*sc_quirk;

	int			sc_out_num_jacks;
	struct umidi_jack	*sc_out_jacks;
	int			sc_in_num_jacks;
	struct umidi_jack	*sc_in_jacks;
	struct umidi_jack	*sc_jacks;

	int			sc_num_mididevs;
	struct umidi_mididev	*sc_mididevs;

	int			sc_out_num_endpoints;
	struct umidi_endpoint	*sc_out_ep;
	int			sc_in_num_endpoints;
	struct umidi_endpoint	*sc_in_ep;
	struct umidi_endpoint	*sc_endpoints;
};
@


1.15
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umidivar.h,v 1.14 2012/09/02 20:51:36 ratchov Exp $ */
a106 2

	int			sc_dying;
@


1.14
log
@Dont "#ifdef DIAGNOSTICS" out umidi_jack->intr.
Unbreaks compilation with no DIAGNOSTICS defined. From
Artturi Alm <artturi.alm at gmail.com>.
Thanks
@
text
@d1 1
a1 1
/*	$OpenBSD: umidivar.h,v 1.13 2012/03/30 08:18:19 ratchov Exp $ */
d88 2
a89 2
	usbd_pipe_handle	pipe;
	usbd_xfer_handle	xfer;
d104 2
a105 2
	usbd_device_handle	sc_udev;
	usbd_interface_handle	sc_iface;
@


1.13
log
@If the MIDI UART is not ready for output, don't spin at IPL_CLOCK;
just return and make the midi(4) driver retry later. UART buffers
are large enough for this, except eap(4) which uses interrupts for
output.
help from and ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umidivar.h,v 1.12 2008/06/26 05:42:19 ray Exp $ */
a70 1
#ifdef DIAGNOSTIC
a71 1
#endif
@


1.12
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umidivar.h,v 1.11 2007/06/06 19:25:49 mk Exp $ */
d72 1
a72 1
	unsigned 		wait;
@


1.11
log
@Mechanical removal of USBBASEDEVICE.  No binary change.

Tested by thib and myself.

ok mbalmer jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: umidivar.h,v 1.10 2006/04/07 22:41:33 jsg Exp $ */
a17 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	  This product includes software developed by the NetBSD
 *	  Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.10
log
@Add optional flush method to MIDI hardware interface.
Allow umidi(4) to send multiple events in a single USB transfer.
This greatly improves the number of interrupts umidi is able to generate.

From Alexandre Ratchov.
@
text
@d1 1
a1 1
/*	$OpenBSD: umidivar.h,v 1.9 2005/09/07 06:57:09 jsg Exp $ */
d112 1
a112 1
	USBBASEDEVICE		sc_dev;
@


1.9
log
@Part of Alexandre Ratchov's last umidi diff that should have been committed.
pointed out by reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umidivar.h,v 1.8 2004/06/27 19:44:48 deraadt Exp $ */
d43 1
a43 3
	unsigned char	buffer_rt[UMIDI_PACKET_SIZE];	/* real time packet */
	unsigned char	buffer_com[UMIDI_PACKET_SIZE];	/* common/voice packet */
	unsigned char  *buffer;
d77 4
d83 1
a83 2
			void			(*intr)(void *);
			TAILQ_ENTRY(umidi_jack)	queue_entry;
d86 1
a86 1
			void			(*intr)(void *, int);
d104 4
a107 1
	TAILQ_HEAD(, umidi_jack) queue_head;
@


1.8
log
@better midi stuff from alex@@caoua.org
@
text
@d1 1
a1 1
/*	$OpenBSD: umidivar.h,v 1.7 2002/11/11 02:32:32 nate Exp $ */
d43 3
a45 1
	unsigned char	buffer[UMIDI_PACKET_SIZE];
@


1.7
log
@sync with NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: umidivar.h,v 1.6 2002/09/08 01:09:07 deraadt Exp $ */
a38 12
/* pending MUX-MIDI packet */
typedef enum {
	PS_EXCL_0=-2,	/* put, and next state is PS_EXCL_0 */
	PS_END=-1,	/* put, and next state is PS_INITIAL */
	PS_INITIAL=0,	/* 0>= : not put, and state is keeped */
	PS_NORMAL_1OF3=1,
	PS_NORMAL_2OF3=2,
	PS_NORMAL_1OF2=3,
	PS_EXCL_1=4,
	PS_EXCL_2=5
} packet_state_t;

d41 3
a43 2
	char		buffer[UMIDI_PACKET_SIZE];
	packet_state_t	state;
d80 1
a80 1
			LIST_ENTRY(umidi_jack)	queue_entry;
d96 2
a97 1
	char			*buffer;
d101 1
a101 2
	LIST_HEAD(, umidi_jack)	queue_head;
	struct umidi_jack	*queue_tail;
@


1.6
log
@no , after last element in a enum
@
text
@d1 2
a2 2
/*	$OpenBSD: umidivar.h,v 1.5 2002/07/25 04:07:33 nate Exp $ */
/*	$NetBSD: umidivar.h,v 1.4 2002/07/11 21:14:32 augustss Exp $ */
@


1.6.4.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@


1.6.4.2
log
@sync
@
text
@d2 1
a2 1
/*	$NetBSD: umidivar.h,v 1.5 2002/09/12 21:00:42 augustss Exp $	*/
@


1.5
log
@update $NetBSD$ tags
@
text
@d1 1
a1 1
/*	$OpenBSD: umidivar.h,v 1.4 2002/07/25 02:18:11 nate Exp $ */
d48 1
a48 1
	PS_EXCL_2=5,
@


1.4
log
@get rid of trailing whitespace
@
text
@d1 2
a2 2
/*	$OpenBSD: umidivar.h,v 1.3 2002/06/11 07:49:57 nate Exp $	*/
/*	$NetBSD: umidivar.h,v 1.3 2001/02/03 18:50:32 tshiozak Exp $	*/
@


1.3
log
@add usb midi support.
untested
From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d63 2
a64 2
 *	   ^	 |    ^	    | 
 *	   +-----+    +-----+ 
@


1.2
log
@Meant to commit only ulpt and committed everything.  Most things weren't ready
@
text
@d1 1
a1 1
/*	$OpenBSD: umidivar.h,v 1.1 2002/05/07 18:08:04 nate Exp $	*/
@


1.1
log
@Sync ulpt driver with NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

