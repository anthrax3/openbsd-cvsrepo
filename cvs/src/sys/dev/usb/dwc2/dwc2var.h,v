head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.2
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.16.0.6
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	NETBSD_20150201:1.1.1.2
	NETBSD:1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2017.09.05.14.01.03;	author otto;	state Exp;
branches;
next	1.18;
commitid	OXQR8uwIhu60hURG;

1.18
date	2017.02.12.17.41.17;	author visa;	state Exp;
branches;
next	1.17;
commitid	3LHNrivPvi4vWnqZ;

1.17
date	2016.09.24.12.59.42;	author kettenis;	state Exp;
branches;
next	1.16;
commitid	8GVF7vfwLAuOePYM;

1.16
date	2015.09.03.14.22.27;	author visa;	state Exp;
branches;
next	1.15;
commitid	XdgWAAdmEMUYJhm9;

1.15
date	2015.09.03.12.55.54;	author visa;	state Exp;
branches;
next	1.14;
commitid	nYGLcp1vtZI0hUoE;

1.14
date	2015.02.12.11.38.42;	author uebayasi;	state Exp;
branches;
next	1.13;
commitid	9VLzkArmGNRpOVTz;

1.13
date	2015.02.12.07.55.50;	author uebayasi;	state Exp;
branches;
next	1.12;
commitid	X4uHXJddPhoCNVyq;

1.12
date	2015.02.12.07.51.51;	author uebayasi;	state Exp;
branches;
next	1.11;
commitid	fg3wGYDRaxIxRvlX;

1.11
date	2015.02.11.22.55.25;	author uebayasi;	state Exp;
branches;
next	1.10;
commitid	YSWmdaoKk1xYqwm2;

1.10
date	2015.02.11.06.25.20;	author uebayasi;	state Exp;
branches;
next	1.9;
commitid	wubeGQ8eKtDQmEoh;

1.9
date	2015.02.10.23.43.46;	author uebayasi;	state Exp;
branches;
next	1.8;
commitid	KdRcQuqZ2fT4xGzO;

1.8
date	2015.02.10.23.38.13;	author uebayasi;	state Exp;
branches;
next	1.7;
commitid	wDM5JZ7hVG9y06Xd;

1.7
date	2015.02.10.23.10.21;	author uebayasi;	state Exp;
branches;
next	1.6;
commitid	ZPfYvaSag55ForeS;

1.6
date	2015.02.10.14.15.14;	author uebayasi;	state Exp;
branches;
next	1.5;
commitid	PcNdF1apgXAKIBJI;

1.5
date	2015.02.10.13.49.48;	author uebayasi;	state Exp;
branches;
next	1.4;
commitid	1OLk1XAIxZV0U2BX;

1.4
date	2015.02.10.13.30.27;	author uebayasi;	state Exp;
branches;
next	1.3;
commitid	DPPlJ6fWAGOUGijh;

1.3
date	2015.02.10.13.27.55;	author uebayasi;	state Exp;
branches;
next	1.2;
commitid	Sa9vvvQVTmOntzZK;

1.2
date	2015.02.10.12.58.47;	author uebayasi;	state Exp;
branches;
next	1.1;
commitid	fO2y2txhcaZJkDvb;

1.1
date	2015.02.10.05.00.26;	author uebayasi;	state Exp;
branches
	1.1.1.1;
next	;
commitid	fozgu6iqsHzTcMiM;

1.1.1.1
date	2015.02.10.05.00.26;	author uebayasi;	state Exp;
branches;
next	1.1.1.2;
commitid	fozgu6iqsHzTcMiM;

1.1.1.2
date	2015.02.10.05.10.13;	author uebayasi;	state Exp;
branches;
next	;
commitid	LFuM1eFaklW8eMEs;


desc
@@


1.19
log
@EPROTO is now in sys/errno.h
@
text
@/*	$OpenBSD: dwc2var.h,v 1.18 2017/02/12 17:41:17 visa Exp $	*/
/*	$NetBSD: dwc2var.h,v 1.3 2013/10/22 12:57:40 skrll Exp $	*/

/*-
 * Copyright (c) 2013 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Nick Hudson
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef	_DWC2VAR_H_
#define	_DWC2VAR_H_

#include <sys/pool.h>

struct task;

#define DWC2_MAXISOCPACKETS	16
struct dwc2_hsotg;
struct dwc2_qtd;

struct dwc2_xfer {
	struct usbd_xfer xfer;			/* Needs to be first */

	struct dwc2_hcd_urb *urb;
	int packet_count;

	TAILQ_ENTRY(dwc2_xfer) xnext;		/* list of complete xfers */

	u_int32_t flags;
#define DWC2_XFER_ABORTING	0x0001	/* xfer is aborting. */
#define DWC2_XFER_ABORTWAIT	0x0002	/* abort completion is being awaited. */
};

struct dwc2_pipe {
	struct usbd_pipe pipe;		/* Must be first */

	/* Current transfer */
	void *priv;			/* QH */

	 /* DMA buffer for control endpoint requests */
	struct usb_dma req_dma;
};


#define	DWC2_BUS2SC(bus)	((void *)(bus))
#define	DWC2_PIPE2SC(pipe)	DWC2_BUS2SC((pipe)->device->bus)
#define	DWC2_XFER2SC(xfer)	DWC2_PIPE2SC((xfer)->pipe)
#define	DWC2_DPIPE2SC(d)	DWC2_BUS2SC((d)->pipe.device->bus)

#define	DWC2_XFER2DXFER(x)	(struct dwc2_xfer *)(x)

#define	DWC2_XFER2DPIPE(x)	(struct dwc2_pipe *)(x)->pipe;
#define	DWC2_PIPE2DPIPE(p)	(struct dwc2_pipe *)(p)


typedef struct dwc2_softc {
	struct usbd_bus		sc_bus;

 	bus_space_tag_t		sc_iot;
 	bus_space_handle_t	sc_ioh;
	struct dwc2_core_params *sc_params;
	struct dwc2_core_dma_config *sc_dma_config;

	/*
	 * Private
	 */

	struct dwc2_hsotg *sc_hsotg;

	bool sc_hcdenabled;
	void *sc_rhc_si;

	struct usbd_xfer *sc_intrxfer;

	struct device *sc_child;		/* /dev/usb# device */
	char sc_dying;
#if 0
	struct usb_dma_reserve sc_dma_reserve;
#endif

	char sc_vendor[32];		/* vendor string for root hub */
	int sc_id_vendor;		/* vendor ID for root hub */

	TAILQ_HEAD(, dwc2_xfer) sc_complete;	/* complete transfers */

	uint8_t sc_addr;		/* device address */
	uint8_t sc_conf;		/* device configuration */

	struct pool sc_xferpool;
	struct pool sc_qhpool;
	struct pool sc_qtdpool;

} dwc2_softc_t;

int		dwc2_init(struct dwc2_softc *);
int		dwc2_dma_config(struct dwc2_softc *,
				struct dwc2_core_dma_config *);
int		dwc2_intr(void *);
int		dwc2_detach(dwc2_softc_t *, int);

void		dwc2_worker(struct task *, void *);

void		dwc2_host_complete(struct dwc2_hsotg *, struct dwc2_qtd *,
				   int);

#define DWC2_READ_4(hsotg, reg) \
    bus_space_read_4((hsotg)->hsotg_sc->sc_iot, (hsotg)->hsotg_sc->sc_ioh, \
    (reg))
#define DWC2_WRITE_4(hsotg, reg, data)  \
    bus_space_write_4((hsotg)->hsotg_sc->sc_iot, (hsotg)->hsotg_sc->sc_ioh, \
    (reg), (data))

static inline void
dwc2_root_intr(dwc2_softc_t *sc)
{

	softintr_schedule(sc->sc_rhc_si);
}

// XXX compat

#define	ENOSR		90

#ifndef mstohz
#define mstohz(ms) \
	(__predict_false((ms) >= 0x20000) ? \
	    ((ms +0u) / 1000u) * hz : \
	    ((ms +0u) * hz) / 1000u)
#endif

#define	timeout_reset(x, t, f, a) \
do { \
	timeout_set((x), (f), (a)); \
	timeout_add((x), (t)); \
} while (0)

#define	device_xname(d)	((d)->dv_xname)

#endif	/* _DWC_OTGVAR_H_ */
@


1.18
log
@Replace dummy mutex asserts with real ones.

OK stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dwc2var.h,v 1.17 2016/09/24 12:59:42 kettenis Exp $	*/
a145 1
#define	EPROTO		96
@


1.17
log
@Remove unused functions.

ok jmatthew@@, visa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dwc2var.h,v 1.16 2015/09/03 14:22:27 visa Exp $	*/
a143 2

#define	mtx_owned(x)	((void)(x), 1)
@


1.16
log
@Remove the abort_task field in struct dwc2_xfer. There is an identical
field in struct usbd_xfer which is part of dwc2_xfer.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dwc2var.h,v 1.15 2015/09/03 12:55:54 visa Exp $	*/
a122 7
bool		dwc2_shutdown(struct device *, int);
void		dwc2_childdet(struct device *, struct device *);
int		dwc2_activate(struct device *, int);
#if 0
bool		dwc2_resume(struct device *, const pmf_qual_t *);
bool		dwc2_suspend(struct device *, const pmf_qual_t *);
#endif
@


1.15
log
@Remove sc->sc_lock and add several splusb()'s in dwc2, to avoid a
possible lock recursion panic on transfer timeout. The lock is not
needed yet because the USB stack is not MP-safe.

ok mpi@@, "makes sense" jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dwc2var.h,v 1.14 2015/02/12 11:38:42 uebayasi Exp $	*/
a45 1
	struct usb_task	abort_task;
@


1.14
log
@Provide interface for external DMA address configuration.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a92 2

	struct mutex sc_lock;
@


1.13
log
@Remove a stray ;.
@
text
@d86 1
d122 2
@


1.12
log
@Move register accessor macros to saner place.
@
text
@d141 1
a141 1
    (reg), (data));
@


1.11
log
@- Fix thinko about struct usbd_xfer allocation.
- Use bus_dma_tag_t held in struct usbd_bus.
@
text
@d136 7
@


1.10
log
@Fix debug build, etc.
@
text
@d45 1
a45 1
	struct usbd_xfer *xfer;			/* Needs to be first */
a84 1
 	bus_dma_tag_t		sc_dmat;
@


1.9
log
@Adjust usb(9) API differences to at least compile.
@
text
@d146 2
a147 1
#define	mtx_owned(x)	1
d163 2
@


1.8
log
@Adjust various kernel API differences.
@
text
@d38 2
d45 1
a45 1
	struct usbd_xfer xfer;			/* Needs to be first */
d52 4
d65 1
a65 1
	struct usb_dma * req_dma;
d69 1
a69 1
#define	DWC2_BUS2SC(bus)	((bus)->hci_private)
d81 1
a81 1
	struct device *sc_dev;
a91 1
	struct usbd_bus sc_bus;
d103 1
d105 1
@


1.7
log
@Convert timeout(9)/taskq(9) usages.
@
text
@d119 2
a120 1
int		dwc2_activate(struct device *, enum devact);
d123 1
d136 13
@


1.6
log
@s/device_t/struct device */
@
text
@d135 6
@


1.5
log
@s/mutex/mtx/
s/pool_cache/pool/
s/callout/timeout/
s/kmem/malloc/
s/workqueue/taskq/
s/softint/softintr/
@
text
@d75 1
a75 1
	device_t sc_dev;
d94 1
a94 1
	struct usbd_xfer * sc_intrxfer;
d96 1
a96 1
	device_t sc_child;		/* /dev/usb# device */
d117 5
a121 5
bool		dwc2_shutdown(device_t, int);
void		dwc2_childdet(device_t, device_t);
int		dwc2_activate(device_t, enum devact);
bool		dwc2_resume(device_t, const pmf_qual_t *);
bool		dwc2_suspend(device_t, const pmf_qual_t *);
@


1.4
log
@s/usb_dma_t/struct usb_dma */
@
text
@d89 1
a89 1
	kmutex_t sc_lock;
d108 3
a110 3
	pool_cache_t sc_xferpool;
	pool_cache_t sc_qhpool;
	pool_cache_t sc_qtdpool;
d123 1
a123 1
void		dwc2_worker(struct work *, void *);
d132 1
a132 1
	softint_schedule(sc->sc_rhc_si);
@


1.3
log
@s/usbd_xfer_handle/struct usbd_xfer */
s/usbd_pipe_handle/struct usbd_pipe */
s/usbd_device_handle/struct usbd_device */
@
text
@d59 1
a59 1
	usb_dma_t req_dma;
@


1.2
log
@Add RCS IDs.
@
text
@d94 1
a94 1
	usbd_xfer_handle sc_intrxfer;
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD$	*/
@


1.1.1.1
log
@Import dwc2 core and glue code from NetBSD.  OK deraadt@@ jsing@@ miod@@ mpi@@
@
text
@@


1.1.1.2
log
@Redo dwc2 import with CVS tags expanded.
@
text
@d1 1
a1 1
/*	$NetBSD: dwc2var.h,v 1.3 2013/10/22 12:57:40 skrll Exp $	*/
@

