head	1.26;
access;
symbols
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.26.0.8
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.26.0.2
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.26.0.4
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.24.0.4
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.24.0.8
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.24.0.6
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.24.0.2
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.22.0.2
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.21.0.2
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.6
	OPENBSD_5_0:1.20.0.4
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.2
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.18.0.14
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.10
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.12
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.8
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.6
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.4
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.2
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.12.0.4
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	SMP:1.2.0.2;
locks; strict;
comment	@ * @;


1.26
date	2015.06.12.15.47.31;	author mpi;	state Exp;
branches;
next	1.25;
commitid	t0sjCnxjbRqHxJe2;

1.25
date	2015.05.17.02.44.38;	author canacar;	state Exp;
branches;
next	1.24;
commitid	qwMkRBiEn0eRXsn1;

1.24
date	2013.05.31.15.20.49;	author yuo;	state Exp;
branches;
next	1.23;

1.23
date	2013.04.15.09.23.01;	author mglocker;	state Exp;
branches;
next	1.22;

1.22
date	2012.11.10.18.46.21;	author brad;	state Exp;
branches;
next	1.21;

1.21
date	2012.03.01.04.33.15;	author jsg;	state Exp;
branches;
next	1.20;

1.20
date	2010.12.06.04.41.39;	author jakemsr;	state Exp;
branches;
next	1.19;

1.19
date	2010.09.21.08.02.49;	author jsg;	state Exp;
branches;
next	1.18;

1.18
date	2007.06.10.10.15.35;	author mbalmer;	state Exp;
branches;
next	1.17;

1.17
date	2007.06.06.19.25.49;	author mk;	state Exp;
branches;
next	1.16;

1.16
date	2007.06.04.10.34.04;	author mbalmer;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.14.00.46.21;	author jsg;	state Exp;
branches;
next	1.14;

1.14
date	2007.04.03.00.56.16;	author jsg;	state Exp;
branches;
next	1.13;

1.13
date	2007.01.18.04.36.57;	author jsg;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.01.05.19.38;	author pascoe;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.29.23.16.59;	author jsg;	state Exp;
branches;
next	1.10;

1.10
date	2005.08.28.03.34.33;	author jsg;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.28.02.51.05;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.28.02.49.25;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.28.02.46.13;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.10.23.17.46;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2005.08.10.23.07.33;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.11.12.47.14;	author dlg;	state Exp;
branches;
next	1.3;

1.3
date	2004.10.01.04.08.46;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.19.11.37.00;	author brad;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2004.04.02.01.10.09;	author deraadt;	state Exp;
branches;
next	;

1.2.2.1
date	2004.06.05.23.12.57;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Only match devices with a valid configuration.

Most of the WiFi/Ethernet USB adapter only have one configuration and always
use its first interface.  In order to improve USB descriptors parsing start
by reducing the number of places where a configuration is set.

Tests & ok stsp@@
@
text
@/*	$OpenBSD: if_axereg.h,v 1.25 2015/05/17 02:44:38 canacar Exp $	*/

/*
 * Copyright (c) 1997, 1998, 1999, 2000-2003
 *	Bill Paul <wpaul@@windriver.com>.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Bill Paul.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY Bill Paul AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL Bill Paul OR THE VOICES IN HIS HEAD
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $FreeBSD: src/sys/dev/usb/if_axereg.h,v 1.2 2003/06/15 21:45:43 wpaul Exp $
 */

/*
 * Definitions for the ASIX Electronics AX88172 to ethernet controller.
 */


/*
 * Vendor specific commands
 * ASIX conveniently doesn't document the 'set NODEID' command in their
 * datasheet (thanks a lot guys).
 * To make handling these commands easier, I added some extra data
 * which is decided by the axe_cmd() routine. Commands are encoded
 * in 16 bites, with the format: LDCC. L and D are both nibbles in
 * the high byte. L represents the data length (0 to 15) and D
 * represents the direction (0 for vendor read, 1 for vendor write).
 * CC is the command byte, as specified in the manual.
 */

#define AXE_CMD_LEN(x)	(((x) & 0xF000) >> 12)
#define AXE_CMD_DIR(x)	(((x) & 0x0F00) >> 8)
#define AXE_CMD_CMD(x)	 ((x) & 0x00FF)

#define AXE_172_CMD_READ_RXTX_SRAM		0x2002
#define AXE_182_CMD_READ_RXTX_SRAM		0x8002
#define AXE_172_CMD_WRITE_RX_SRAM		0x0103
#define AXE_172_CMD_WRITE_TX_SRAM		0x0104
#define AXE_182_CMD_WRITE_RXTX_SRAM		0x8103
#define AXE_CMD_MII_OPMODE_SW			0x0106
#define AXE_CMD_MII_READ_REG			0x2007
#define AXE_CMD_MII_WRITE_REG			0x2108
#define AXE_CMD_MII_READ_OPMODE			0x1009
#define AXE_CMD_MII_OPMODE_HW			0x010A
#define AXE_CMD_SROM_READ			0x200B
#define AXE_CMD_SROM_WRITE			0x010C
#define AXE_CMD_SROM_WR_ENABLE			0x010D
#define AXE_CMD_SROM_WR_DISABLE			0x010E
#define AXE_CMD_RXCTL_READ			0x200F
#define AXE_CMD_RXCTL_WRITE			0x0110
#define AXE_CMD_READ_IPG012			0x3011
#define AXE_172_CMD_WRITE_IPG0			0x0112
#define AXE_172_CMD_WRITE_IPG1			0x0113
#define AXE_172_CMD_WRITE_IPG2			0x0114
#define AXE_178_CMD_WRITE_IPG012		0x0112
#define AXE_CMD_READ_MCAST			0x8015
#define AXE_CMD_WRITE_MCAST			0x8116
#define AXE_172_CMD_READ_NODEID			0x6017
#define AXE_172_CMD_WRITE_NODEID		0x6118
#define AXE_178_CMD_READ_NODEID			0x6013
#define AXE_178_CMD_WRITE_NODEID		0x6114
#define AXE_CMD_READ_PHYID			0x2019
#define AXE_172_CMD_READ_MEDIA			0x101A
#define AXE_178_CMD_READ_MEDIA			0x201A
#define AXE_CMD_WRITE_MEDIA			0x011B
#define AXE_CMD_READ_MONITOR_MODE		0x101C
#define AXE_CMD_WRITE_MONITOR_MODE		0x011D
#define AXE_CMD_READ_GPIO			0x101E
#define AXE_CMD_WRITE_GPIO			0x011F
#define AXE_CMD_SW_RESET_REG			0x0120
#define AXE_CMD_SW_PHY_STATUS			0x0021
#define AXE_CMD_SW_PHY_SELECT			0x0122

#define AXE_SW_RESET_CLEAR			0x00
#define AXE_SW_RESET_RR				0x01
#define AXE_SW_RESET_RT				0x02
#define AXE_SW_RESET_PRTE			0x04
#define AXE_SW_RESET_PRL			0x08
#define AXE_SW_RESET_BZ				0x10
#define AXE_SW_RESET_IPRL			0x20
#define AXE_SW_RESET_IPPD			0x40

/* AX88178 documentation says to always write this bit... */
#define AXE_178_RESET_MAGIC			0x40

#define AXE_178_MEDIA_GMII			0x0001
#define AXE_MEDIA_FULL_DUPLEX			0x0002
#define AXE_172_MEDIA_TX_ABORT_ALLOW		0x0004
/* AX88178 documentation says to always write 1 to reserved bit... */
#define AXE_178_MEDIA_MAGIC			0x0004
#define AXE_178_MEDIA_ENCK			0x0008
#define AXE_172_MEDIA_FLOW_CONTROL_EN		0x0010
#define AXE_178_MEDIA_RXFLOW_CONTROL_EN		0x0010
#define AXE_178_MEDIA_TXFLOW_CONTROL_EN		0x0020
#define AXE_178_MEDIA_JUMBO_EN			0x0040
#define AXE_178_MEDIA_LTPF_ONLY			0x0080
#define AXE_178_MEDIA_RX_EN			0x0100
#define AXE_178_MEDIA_100TX			0x0200
#define AXE_178_MEDIA_SBP			0x0800
#define AXE_178_MEDIA_SUPERMAC			0x1000

#define AXE_RXCMD_PROMISC			0x0001
#define AXE_RXCMD_ALLMULTI			0x0002
#define AXE_172_RXCMD_UNICAST			0x0004
#define AXE_178_RXCMD_KEEP_INVALID_CRC		0x0004
#define AXE_RXCMD_BROADCAST			0x0008
#define AXE_RXCMD_MULTICAST			0x0010
#define AXE_RXCMD_ENABLE			0x0080
#define AXE_178_RXCMD_MFB			0x0300

#define        AXE_PHY_SEL_PRI         1
#define        AXE_PHY_SEL_SEC         0
#define        AXE_PHY_TYPE_MASK       0xE0
#define        AXE_PHY_TYPE_SHIFT      5
#define        AXE_PHY_TYPE(x)         \
       (((x) & AXE_PHY_TYPE_MASK) >> AXE_PHY_TYPE_SHIFT)

#define        PHY_TYPE_100_HOME       0       /* 10/100 or 1M HOME PHY */
#define        PHY_TYPE_GIG            1       /* Gigabit PHY */
#define        PHY_TYPE_SPECIAL        4       /* Special case */
#define        PHY_TYPE_RSVD           5       /* Reserved */
#define        PHY_TYPE_NON_SUP        7       /* Non-supported PHY */

#define        AXE_PHY_NO_MASK         0x1F
#define        AXE_PHY_NO(x)           ((x) & AXE_PHY_NO_MASK)

#define        AXE_PHY_NO_AX772_EPHY   0x10    /* Embedded 10/100 PHY of AX88772 */

#define AXE_GPIO0_EN		0x01
#define AXE_GPIO0		0x02
#define AXE_GPIO1_EN		0x04
#define AXE_GPIO1		0x08
#define AXE_GPIO2_EN		0x10
#define AXE_GPIO2		0x20
#define AXE_GPIO_RELOAD_EEPROM	0x80

#define AXE_PHY_MODE_MARVELL		0x00
#define AXE_PHY_MODE_CICADA		0x01
#define AXE_PHY_MODE_AGERE		0x02
#define AXE_PHY_MODE_CICADA_V2		0x05
#define AXE_PHY_MODE_CICADA_V2_ASIX	0x09
#define AXE_PHY_MODE_REALTEK_8211CL	0x0c
#define AXE_PHY_MODE_REALTEK_8211BN	0x0d
#define AXE_PHY_MODE_REALTEK_8251CL	0x0e
#define AXE_PHY_MODE_ATTANSIC		0x40

#define AXE_772B_RXCMD_RH1M	0x0100
#define AXE_772B_RXCMD_RH2M	0x0200
#define AXE_772B_RXCMD_RH3M	0x0400

#define AXE_RH1M_RXLEN_MASK	0x07ff

#define AXE_TIMEOUT		1000
#define AXE_172_BUFSZ		1536
#define AXE_178_MIN_BUFSZ	2048
#define AXE_178_MAX_BUFSZ	16384

#define AXE_RX_LIST_CNT		1
#define AXE_TX_LIST_CNT		1

#define AXE_CTL_READ		0x01
#define AXE_CTL_WRITE		0x02

/* EEPROM Map */
#define	AXE_EEPROM_772B_NODEID		0x04

/*
 * The interrupt endpoint is currently unused
 * by the ASIX part.
 */
#define AXE_ENDPT_RX		0x0
#define AXE_ENDPT_TX		0x1
#define AXE_ENDPT_INTR		0x2
#define AXE_ENDPT_MAX		0x3

struct axe_type {
	struct usb_devno	axe_dev;
	u_int16_t		axe_flags;
#define AX178	0x0001		/* AX88178 */
#define AX772	0x0002		/* AX88772 */
#define AX772B	0x0004		/* AX88772B */
};

struct axe_softc;

struct axe_chain {
	struct axe_softc	*axe_sc;
	struct usbd_xfer	*axe_xfer;
	char			*axe_buf;
	struct mbuf		*axe_mbuf;
	int			axe_accum;
	int			axe_idx;
};

struct axe_cdata {
	struct axe_chain	axe_tx_chain[AXE_TX_LIST_CNT];
	struct axe_chain	axe_rx_chain[AXE_RX_LIST_CNT];
	int			axe_tx_prod;
	int			axe_tx_cons;
	int			axe_tx_cnt;
	int			axe_rx_prod;
};

struct axe_sframe_hdr {
	u_int16_t		len;
	u_int16_t		ilen;
} __packed;

struct axe_softc {
	struct device		axe_dev;
#define GET_MII(sc) (&(sc)->axe_mii)
	struct arpcom		arpcom;
#define GET_IFP(sc) (&(sc)->arpcom.ac_if)
	struct mii_data		axe_mii;
	struct usbd_device	*axe_udev;
	struct usbd_interface	*axe_iface;

	u_int16_t		axe_vendor;
	u_int16_t		axe_product;

	u_int16_t		axe_flags;

	int			axe_ed[AXE_ENDPT_MAX];
	struct usbd_pipe	*axe_ep[AXE_ENDPT_MAX];
	int			axe_unit;
	struct axe_cdata	axe_cdata;
	struct timeout		axe_stat_ch;

	int			axe_refcnt;

	struct usb_task		axe_tick_task;
	struct usb_task		axe_stop_task;

	struct rwlock		axe_mii_lock;

	int			axe_link;
	unsigned char		axe_ipgs[3];
	unsigned char 		axe_phyaddrs[2];
	int			axe_phyno;
	struct timeval		axe_rx_notice;
	u_int			axe_bufsz;
};
@


1.25
log
@Read ethernet address from EEPROM on AX88772B based on FreeBSD
ok djm@@ jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.24 2013/05/31 15:20:49 yuo Exp $	*/
a185 3

#define AXE_CONFIG_NO		1
#define AXE_IFACE_IDX		0
@


1.24
log
@enable REALTEK 8211C(L) GbE phy with axe(4).

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.23 2013/04/15 09:23:01 mglocker Exp $	*/
d189 3
@


1.23
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.22 2012/11/10 18:46:21 brad Exp $	*/
d151 18
@


1.22
log
@Rewrite the receive filter handling code and cleanup the ioctl bits.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.21 2012/03/01 04:33:15 jsg Exp $	*/
d193 1
a193 1
	usbd_xfer_handle	axe_xfer;
d220 2
a221 2
	usbd_device_handle	axe_udev;
	usbd_interface_handle	axe_iface;
d229 1
a229 1
	usbd_pipe_handle	axe_ep[AXE_ENDPT_MAX];
@


1.21
log
@add support for AX88772B
tweaked version of a diff from jcs@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.20 2010/12/06 04:41:39 jakemsr Exp $	*/
a230 1
	int			axe_if_flags;
@


1.20
log
@* replace per-driver dying and/or other state variables with use of
  usbd_deactivete() and usbd_is_dying()
* use usbd_deactivate() in activate()/DEACTIVATE
* convert a few more direct checks of the associated bus' dying flag
  with usbd_is_dying()
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.19 2010/09/21 08:02:49 jsg Exp $	*/
d152 6
d186 1
@


1.19
log
@Better PHY probing adapted from FreeBSD by Laurent Ghigonis
fixes problems seen with Linksys USB300M.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.18 2007/06/10 10:15:35 mbalmer Exp $	*/
a228 2
	char			axe_dying;
	char			axe_attached;
@


1.18
log
@Remove definitions and usage of usb_callout and related macros.  These macros
were used as a layer of confusion^Wabstraction around the timeout(9) API.

No binary change.

ok jsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.17 2007/06/06 19:25:49 mk Exp $	*/
d134 17
a150 2
#define AXE_NOPHY				0xE0
#define AXE_INTPHY				0x10
d240 1
@


1.17
log
@Mechanical removal of USBBASEDEVICE.  No binary change.

Tested by thib and myself.

ok mbalmer jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.16 2007/06/04 10:34:04 mbalmer Exp $	*/
d211 1
a211 1
	usb_callout_t		axe_stat_ch;
@


1.16
log
@Last part of FreeBSD/NetBSD sepcific code removal.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.15 2007/05/14 00:46:21 jsg Exp $	*/
d193 1
a193 1
	USBBASEDEVICE		axe_dev;
@


1.15
log
@Convert from lockmgr to rwlock.
Initial diff from krw@@, uneeded lock_mii()/unlock_mii() on all commands
in existing code removed by me so it doesn't try to recurse.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.14 2007/04/03 00:56:16 jsg Exp $	*/
a193 3
#if defined(__FreeBSD__)
#define GET_MII(sc) (device_get_softc((sc)->axe_mii))
#elif defined(__NetBSD__)
a194 3
#elif defined(__OpenBSD__)
#define GET_MII(sc) (&(sc)->axe_mii)
#endif
@


1.14
log
@Data direction was not properly encoded in (unused)
AX88178 write nodeid command.

From Hans Petter Selasky <hselasky@@c2i.net>
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.13 2007/01/18 04:36:57 jsg Exp $	*/
d226 1
a226 1
	struct lock		axe_mii_lock;
@


1.13
log
@Add support for AX88772 devices with external PHY.

Thanks to Marco S Hyman for sending me hardware to play with.
Committed over DUB-E100 rev B1 with external IC Plus PHY.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.12 2006/06/01 05:19:38 pascoe Exp $	*/
d84 1
a84 1
#define AXE_178_CMD_WRITE_NODEID		0x6014
@


1.12
log
@Remove unused macros, improve readability.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.11 2005/11/29 23:16:59 jsg Exp $	*/
d97 9
a105 5
#define AXE_178_RESET_RR			0x01
#define AXE_178_RESET_RT			0x02
#define AXE_178_RESET_PRTE			0x04
#define AXE_178_RESET_PRL			0x08
#define AXE_178_RESET_BZ			0x10
d135 1
@


1.11
log
@Add support for ASIX AX88772 10/100 based adapters which are very similiar
to the gigabit AX88178 but with a different initialisation routine
because the PHY is not external.

Man page changes reviewed by jmc@@ and oxford commas added per his
sugestion.

Thanks to Bruno Scap for donating an adapter.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.10 2005/08/28 03:34:33 jsg Exp $	*/
d54 1
d56 1
a56 2
#define AXE_CMD_LEN(x)	(((x) & 0xF000) >> 12)
#define AXE_CMD_CMD(x)	((x) & 0x00FF)
a135 3
#define AXE_MIN_FRAMELEN	60
#define AXE_RX_FRAMES		1
#define AXE_TX_FRAMES		1
a186 2
#define AXE_INC(x, y)		(x) = (x + 1) % y

a228 8

#if 0
#define	AXE_LOCK(_sc)		mtx_lock(&(_sc)->axe_mtx)
#define	AXE_UNLOCK(_sc)		mtx_unlock(&(_sc)->axe_mtx)
#else
#define	AXE_LOCK(_sc)
#define	AXE_UNLOCK(_sc)
#endif
@


1.10
log
@The AX88178 sends multiple frames per USB transfer
and has extra bytes and rules to deal with this.

Initial rxeof/encap changes by me, dlg@@ rewrote
axe_rxeof and axe_newbuf from scratch and cleaned up encap
so they can jump over buildings in a single bound
and be more elegant/readable.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.9 2005/08/28 02:51:05 jsg Exp $	*/
d162 1
@


1.9
log
@Tell the AX88178 to give us the full transaction size.
ok dlg@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.8 2005/08/28 02:49:25 jsg Exp $	*/
d183 5
@


1.8
log
@Account for larger USB transaction size of AX88178 by
making the size a member of the softc.
ok dlg@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.7 2005/08/28 02:46:13 jsg Exp $	*/
d128 1
@


1.7
log
@We have to do some extra hand holding on link state change
on the AX88178 because of the external PHY.
ok dlg@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.6 2005/08/10 23:17:46 jsg Exp $	*/
d132 3
a134 1
#define AXE_BUFSZ		1536
d225 1
@


1.6
log
@whitespace nits
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.5 2005/08/10 23:07:33 jsg Exp $	*/
d117 1
a117 1
#define AXE_178_MEDIA_PORT_SPEED		0x0200
@


1.5
log
@Some of the bits that will be required for AX88178.
PHY doesn't attach possibly due to not twiddling GPIO
pins correctly, rx and tx pipes being swapped not dealt
with yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.4 2004/11/11 12:47:14 dlg Exp $	*/
d58 5
a62 5
#define AXE_172_CMD_READ_RXTX_SRAM			0x2002
#define AXE_182_CMD_READ_RXTX_SRAM			0x8002
#define AXE_172_CMD_WRITE_RX_SRAM			0x0103
#define AXE_172_CMD_WRITE_TX_SRAM			0x0104
#define AXE_182_CMD_WRITE_RXTX_SRAM			0x8103
@


1.4
log
@from netbsd, if_axereg.h revision 1.2
Add some media defines.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_axereg.h,v 1.3 2004/10/01 04:08:46 jsg Exp $	*/
d58 5
a62 3
#define AXE_CMD_READ_RXTX_SRAM			0x2002
#define AXE_CMD_WRITE_RX_SRAM			0x0103
#define AXE_CMD_WRITE_TX_SRAM			0x0104
d75 4
a78 3
#define AXE_CMD_WRITE_IPG0			0x0112
#define AXE_CMD_WRITE_IPG1			0x0113
#define AXE_CMD_WRITE_IPG2			0x0114
d81 4
a84 2
#define AXE_CMD_READ_NODEID			0x6017
#define AXE_CMD_WRITE_NODEID			0x6118
d86 2
a87 1
#define AXE_CMD_READ_MEDIA			0x101A
d93 27
a119 4

#define AXE_MEDIA_FULL_DUPLEX			0x02
#define AXE_MEDIA_TX_ABORT_ALLOW		0x04
#define AXE_MEDIA_FLOW_CONTROL_EN		0x10
d123 2
a124 1
#define AXE_RXCMD_UNICAST			0x0004
d158 1
a158 1
/* XXX No flags so far */
d200 2
@


1.3
log
@add some missing $, ok djm@@ 'That looks fine to me' millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d87 4
@


1.2
log
@remove duplication, use ETHER_ALIGN from if_ether.h
@
text
@d1 2
@


1.2.2.1
log
@Merge with the trunk
@
text
@@


1.1
log
@axe usb ethernet driver hacked into the tree by taleck@@oz.net
@
text
@a109 1
#define ETHER_ALIGN		2
@

