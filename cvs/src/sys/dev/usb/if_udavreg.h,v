head	1.15;
access;
symbols
	OPENBSD_6_0:1.15.0.8
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.4
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.8
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.6
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.4
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.10.0.12
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.8
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.10
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.6
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.4
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.2
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.15
date	2015.06.19.20.39.34;	author uaa;	state Exp;
branches;
next	1.14;
commitid	FNybUU20eX9u5b1s;

1.14
date	2014.01.22.04.13.22;	author sasano;	state Exp;
branches;
next	1.13;

1.13
date	2013.04.15.09.23.01;	author mglocker;	state Exp;
branches;
next	1.12;

1.12
date	2011.03.31.17.06.25;	author mk;	state Exp;
branches;
next	1.11;

1.11
date	2010.12.06.04.41.39;	author jakemsr;	state Exp;
branches;
next	1.10;

1.10
date	2007.11.25.16.40.03;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.10.10.15.35;	author mbalmer;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.09.11.06.53;	author mbalmer;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.06.19.25.49;	author mk;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.04.10.34.04;	author mbalmer;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.06.04.08.47;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.07.04.41.19;	author krw;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.30.13.22.58;	author dlg;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.30.07.43.09;	author dlg;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.05.02.01.18;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Only match devices with a valid configuration.

ok by mpi@@
@
text
@/*	$OpenBSD: if_udavreg.h,v 1.14 2014/01/22 04:13:22 sasano Exp $ */
/*	$NetBSD: if_udavreg.h,v 1.2 2003/09/04 15:17:39 tsutsui Exp $	*/
/*	$nabe: if_udavreg.h,v 1.2 2003/08/21 16:26:40 nabe Exp $	*/
/*
 * Copyright (c) 2003
 *     Shingo WATANABE <nabe@@nabechan.org>.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#define	UDAV_TX_LIST_CNT	1
#define	UDAV_RX_LIST_CNT	1

#define	UDAV_TX_TIMEOUT		1000
#define	UDAV_TIMEOUT		10000


/* Request */
#define	UDAV_REQ_REG_READ	0x00 /* Read from register(s) */
#define	UDAV_REQ_REG_WRITE	0x01 /* Write to register(s) */
#define	UDAV_REQ_REG_WRITE1	0x03 /* Write to a register */

#define	UDAV_REQ_MEM_READ	0x02 /* Read from memory */
#define	UDAV_REQ_MEM_WRITE	0x05 /* Write to memory */
#define	UDAV_REQ_MEM_WRITE1	0x07 /* Write a byte to memory */

/* Registers */
#define	UDAV_NCR		0x00 /* Network Control Register */
#define	 UDAV_NCR_EXT_PHY	(1<<7) /* Select External PHY */
#define	 UDAV_NCR_WAKEEN	(1<<6) /* Wakeup Event Enable */
#define	 UDAV_NCR_FCOL		(1<<4) /* Force Collision Mode */
#define	 UDAV_NCR_FDX		(1<<3) /* Full-Duplex Mode (RO on Int. PHY) */
#define	 UDAV_NCR_LBK1		(1<<2) /* Lookback Mode */
#define	 UDAV_NCR_LBK0		(1<<1) /* Lookback Mode */
#define	 UDAV_NCR_RST		(1<<0) /* Software reset */

#define	UDAV_NSR		0x01 /* Network Status Register */
#define	 UDAV_NSR_SPEED		(1<<7) /* Media Speed (Int. PHY) */
#define	 UDAV_NSR_LINKST	(1<<6) /* Link Status (Int. PHY) */
#define	 UDAV_NSR_WAKEST	(1<<5) /* Wakeup Status */ 
#define	 UDAV_NSR_TXFULL	(1<<4) /* TX FIFO Full */
#define	 UDAV_NSR_TX2END	(1<<3) /* TX Packet 2 Complete Status */
#define	 UDAV_NSR_TX1END	(1<<2) /* TX Packet 1 Complete Status */
#define	 UDAV_NSR_RXOV		(1<<1) /* RX FIFO Overflow */
#define	 UDAV_NSR_RXRDY		(1<<0) /* RX Packet Ready */

#define	UDAV_RCR		0x05 /* RX Control Register */
#define	 UDAV_RCR_WTDIS		(1<<6) /* Watchdog Timer Disable */
#define	 UDAV_RCR_DIS_LONG	(1<<5) /* Discard Long Packet(over 1522Byte) */
#define	 UDAV_RCR_DIS_CRC	(1<<4) /* Discard CRC Error Packet */
#define	 UDAV_RCR_ALL		(1<<3) /* Pass All Multicast */
#define	 UDAV_RCR_RUNT		(1<<2) /* Pass Runt Packet */
#define	 UDAV_RCR_PRMSC		(1<<1) /* Promiscuous Mode */
#define	 UDAV_RCR_RXEN		(1<<0) /* RX Enable */

#define	UDAV_RSR		0x06 /* RX Status Register */
#define	 UDAV_RSR_RF		(1<<7) /* Runt Frame */
#define	 UDAV_RSR_MF		(1<<6) /* Multicast Frame */
#define	 UDAV_RSR_LCS		(1<<5) /* Late Collision Seen */
#define	 UDAV_RSR_RWTO		(1<<4) /* Receive Watchdog Time-Out */
#define	 UDAV_RSR_PLE		(1<<3) /* Physical Layer Error */
#define	 UDAV_RSR_AE		(1<<2) /* Alignment Error */
#define	 UDAV_RSR_CE		(1<<1) /* CRC Error */
#define	 UDAV_RSR_FOE		(1<<0) /* FIFO Overflow Error */
#define	 UDAV_RSR_ERR		(UDAV_RSR_RF | UDAV_RSR_LCS | UDAV_RSR_RWTO |\
				UDAV_RSR_PLE | UDAV_RSR_AE | UDAV_RSR_CE |\
				UDAV_RSR_FOE)

#define	UDAV_EPCR		0x0b /* EEPROM & PHY Control Register */
#define	 UDAV_EPCR_REEP		(1<<5) /* Reload EEPROM */
#define	 UDAV_EPCR_WEP		(1<<4) /* Write EEPROM enable */
#define	 UDAV_EPCR_EPOS		(1<<3) /* EEPROM or PHY Operation Select */
#define	 UDAV_EPCR_ERPRR	(1<<2) /* EEPROM/PHY Register Read Command */
#define	 UDAV_EPCR_ERPRW	(1<<1) /* EEPROM/PHY Register Write Command */
#define	 UDAV_EPCR_ERRE		(1<<0) /* EEPROM/PHY Access Status */

#define	UDAV_EPAR		0x0c /* EEPROM & PHY Control Register */
#define	 UDAV_EPAR_PHY_ADR1	(1<<7) /* PHY Address bit 1 */
#define	 UDAV_EPAR_PHY_ADR0	(1<<6) /* PHY Address bit 0 */
#define	 UDAV_EPAR_EROA		(1<<0) /* EEPROM Word/PHY Register Address */
#define	 UDAV_EPAR_EROA_MASK	(0x1f) /* [5:0] */

#define	UDAV_EPDRL		0x0d /* EEPROM & PHY Data Register */
#define	UDAV_EPDRH		0x0e /* EEPROM & PHY Data Register */

#define	UDAV_PAR0		0x10 /* Ethernet Address, load from EEPROM */
#define	UDAV_PAR1		0x11 /* Ethernet Address, load from EEPROM */
#define	UDAV_PAR2		0x12 /* Ethernet Address, load from EEPROM */
#define	UDAV_PAR3		0x13 /* Ethernet Address, load from EEPROM */
#define	UDAV_PAR4		0x14 /* Ethernet Address, load from EEPROM */
#define	UDAV_PAR5		0x15 /* Ethernet Address, load from EEPROM */
#define	UDAV_PAR		UDAV_PAR0

#define	UDAV_MAR0		0x16 /* Multicast Register */
#define	UDAV_MAR1		0x17 /* Multicast Register */
#define	UDAV_MAR2		0x18 /* Multicast Register */
#define	UDAV_MAR3		0x19 /* Multicast Register */
#define	UDAV_MAR4		0x1a /* Multicast Register */
#define	UDAV_MAR5		0x1b /* Multicast Register */
#define	UDAV_MAR6		0x1c /* Multicast Register */
#define	UDAV_MAR7		0x1d /* Multicast Register */
#define	UDAV_MAR		UDAV_MAR0

#define	UDAV_GPCR		0x1e /* General purpose control register */
#define	 UDAV_GPCR_GEP_CNTL6	(1<<6) /* General purpose control 6 */
#define	 UDAV_GPCR_GEP_CNTL5	(1<<5) /* General purpose control 5 */
#define	 UDAV_GPCR_GEP_CNTL4	(1<<4) /* General purpose control 4 */
#define	 UDAV_GPCR_GEP_CNTL3	(1<<3) /* General purpose control 3 */
#define	 UDAV_GPCR_GEP_CNTL2	(1<<2) /* General purpose control 2 */
#define	 UDAV_GPCR_GEP_CNTL1	(1<<1) /* General purpose control 1 */
#define	 UDAV_GPCR_GEP_CNTL0	(1<<0) /* General purpose control 0 */

#define	UDAV_GPR		0x1f /* General purpose register */
#define	 UDAV_GPR_GEPIO6	(1<<6) /* General purpose 6 */
#define	 UDAV_GPR_GEPIO5	(1<<5) /* General purpose 5 */
#define	 UDAV_GPR_GEPIO4	(1<<4) /* General purpose 4 */
#define	 UDAV_GPR_GEPIO3	(1<<3) /* General purpose 3 */
#define	 UDAV_GPR_GEPIO2	(1<<2) /* General purpose 2 */
#define	 UDAV_GPR_GEPIO1	(1<<1) /* General purpose 1 */
#define	 UDAV_GPR_GEPIO0	(1<<0) /* General purpose 0 */

#define GET_IFP(sc)             (&(sc)->sc_ac.ac_if)
#define	GET_MII(sc)		(&(sc)->sc_mii)

struct udav_chain {
	struct udav_softc	*udav_sc;
	struct usbd_xfer	*udav_xfer;
	char			*udav_buf;
	struct mbuf		*udav_mbuf;
	int			udav_idx;
};

struct udav_cdata {
	struct udav_chain	udav_tx_chain[UDAV_TX_LIST_CNT];
	struct udav_chain	udav_rx_chain[UDAV_TX_LIST_CNT];
#if 0
	/* XXX: Interrupt Endpoint is not yet supported! */
	struct udav_intrpkg	udav_ibuf;
#endif
	int			udav_tx_prod;
	int			udav_tx_cons;
	int			udav_tx_cnt;
	int			udav_rx_prod;
};

struct udav_softc {
	struct device		sc_dev;	/* base device */
	struct usbd_device	*sc_udev;

	/* USB */
	struct usbd_interface	*sc_ctl_iface;
	/* int			sc_ctl_iface_no; */
	int			sc_bulkin_no; /* bulk in endpoint */
	int			sc_bulkout_no; /* bulk out endpoint */
	int			sc_intrin_no; /* intr in endpoint */
	struct usbd_pipe	*sc_pipe_rx;
	struct usbd_pipe	*sc_pipe_tx;
	struct usbd_pipe	*sc_pipe_intr;
	struct timeout		sc_stat_ch;
	u_int			sc_rx_errs;
	/* u_int		sc_intr_errs; */
	struct timeval		sc_rx_notice;

	/* Ethernet */
        struct arpcom           sc_ac; /* ethernet common */
	struct mii_data		sc_mii;
	struct rwlock		sc_mii_lock;
	int			sc_link;
#define	sc_media udav_mii.mii_media
	struct udav_cdata	sc_cdata;

        int                     sc_refcnt;

	struct usb_task		sc_tick_task;
	struct usb_task		sc_stop_task;

	u_int16_t		sc_flags;
};

struct udav_rx_hdr {
	uByte			pktstat;
	uWord			length;
} __packed;
#define UDAV_RX_HDRLEN		sizeof(struct udav_rx_hdr)

/* Packet length */
#define	UDAV_MAX_MTU		1522 /* According to datasheet */
#define	UDAV_MIN_FRAME_LEN	60
#define	UDAV_BUFSZ		UDAV_MAX_MTU + UDAV_RX_HDRLEN
@


1.14
log
@udav(4): add CoreChip RD9700 support

RD9700 has no MII-PHY, no serial EEPROM.

ok by deraadt@@, brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_udavreg.h,v 1.13 2013/04/15 09:23:01 mglocker Exp $ */
a32 3

#define	UDAV_IFACE_INDEX	0
#define	UDAV_CONFIG_NO		1
@


1.13
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_udavreg.h,v 1.12 2011/03/31 17:06:25 mk Exp $ */
d62 10
@


1.12
log
@Don't process packets where the USB xfer length is shorter than a packet
header, and don't process packets where the packet header length field
says the packet is longer than the size of the USB xfer.

While there, fix a debug print that was missing the device name from the
parameter list, causing it to crash when enabled.

Also, use correct MTU from datasheet.

From Loganaden Velvindrom with input from me.

Tested by kili.

ok jasper sthen (with a whitespace nit)
@
text
@d1 1
a1 1
/*	$OpenBSD: if_udavreg.h,v 1.11 2010/12/06 04:41:39 jakemsr Exp $ */
d143 1
a143 1
	usbd_xfer_handle	udav_xfer;
d164 1
a164 1
	usbd_device_handle	sc_udev;
d167 1
a167 1
	usbd_interface_handle	sc_ctl_iface;
d172 3
a174 3
	usbd_pipe_handle	sc_pipe_rx;
	usbd_pipe_handle	sc_pipe_tx;
	usbd_pipe_handle	sc_pipe_intr;
@


1.11
log
@* replace per-driver dying and/or other state variables with use of
  usbd_deactivete() and usbd_is_dying()
* use usbd_deactivate() in activate()/DEACTIVATE
* convert a few more direct checks of the associated bus' dying flag
  with usbd_is_dying()
@
text
@d1 1
a1 1
/*	$OpenBSD: if_udavreg.h,v 1.10 2007/11/25 16:40:03 jmc Exp $ */
d203 1
a203 1
#define	UDAV_MAX_MTU		1536 /* XXX: max frame size is unknown */
@


1.10
log
@spelling fixes, from Martynas Venckus;
@
text
@d1 1
a1 1
/*	$OpenBSD: if_udavreg.h,v 1.9 2007/06/10 10:15:35 mbalmer Exp $ */
a187 2
	int                     sc_attached;
	int			sc_dying;
@


1.9
log
@Remove definitions and usage of usb_callout and related macros.  These macros
were used as a layer of confusion^Wabstraction around the timeout(9) API.

No binary change.

ok jsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_udavreg.h,v 1.8 2007/06/09 11:06:53 mbalmer Exp $ */
d153 1
a153 1
	/* XXX: Intrrupt Endpoint is not yet supported! */
@


1.8
log
@Remove the definition and use of UPACKED and replace it with our own __packed
(to which UPACKED was define'd before anway).  No binary change, just one layer
of confusion less in the sourcecode.

ok jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: if_udavreg.h,v 1.7 2007/06/06 19:25:49 mk Exp $ */
d175 1
a175 1
	usb_callout_t		sc_stat_ch;
@


1.7
log
@Mechanical removal of USBBASEDEVICE.  No binary change.

Tested by thib and myself.

ok mbalmer jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: if_udavreg.h,v 1.6 2007/06/04 10:34:04 mbalmer Exp $ */
d201 1
a201 1
} UPACKED;
@


1.6
log
@Last part of FreeBSD/NetBSD sepcific code removal.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_udavreg.h,v 1.5 2007/05/06 04:08:47 krw Exp $ */
d163 1
a163 1
	USBBASEDEVICE		sc_dev;	/* base device */
@


1.5
log
@More lockmgr -> rwlock low hanging fruit.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_udavreg.h,v 1.4 2006/03/07 04:41:19 krw Exp $ */
a137 3
#if defined(__NetBSD__)
#define GET_IFP(sc)             (&(sc)->sc_ec.ec_if)
#else
a138 1
#endif
a180 3
#if defined(__NetBSD__)
        struct ethercom         sc_ec; /* ethernet common */
#else
a181 1
#endif
@


1.4
log
@Remove last NRND NetBSDisms from tree.

ok deraadt@@ brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_udavreg.h,v 1.3 2005/01/30 13:22:58 dlg Exp $ */
d191 1
a191 1
	struct lock		sc_mii_lock;
@


1.3
log
@dont redefine ETHER_ALIGN
@
text
@d1 1
a1 1
/*	$OpenBSD: if_udavreg.h,v 1.2 2004/12/30 07:43:09 dlg Exp $ */
a193 3
#if NRND > 0
	rndsource_element_t	rnd_source;
#endif
@


1.2
log
@fix for some archs that don't like unaligned accesses, eg sparc64 and alpha

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_udavreg.h,v 1.1 2004/10/05 02:01:18 jsg Exp $ */
a42 7
#define	ETHER_ALIGN		2


/* Packet length */
#define	UDAV_MAX_MTU		1536 /* XXX: max frame size is unknown */
#define	UDAV_MIN_FRAME_LEN	60
#define	UDAV_BUFSZ		UDAV_MAX_MTU
d215 4
@


1.1
log
@Port of NetBSD's udav driver for Davicom USB DM960 based Ethernet.
Thanks to Mark Uemura for donating several of these adapters.
Tested by and ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: $ */
d215 7
@

