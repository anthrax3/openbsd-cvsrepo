head	1.24;
access;
symbols
	OPENBSD_6_1:1.24.0.4
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.23.0.6
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.22.0.4
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.20.0.4
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.16.0.8
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.6
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.4
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.15.0.2
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.11.0.10
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.6
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.4
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.24
date	2016.09.02.09.14.59;	author mpi;	state Exp;
branches;
next	1.23;
commitid	blfE5YU3eGM81J65;

1.23
date	2016.01.07.12.53.37;	author mpi;	state Exp;
branches;
next	1.22;
commitid	cbOY1YhZQayIAejH;

1.22
date	2015.03.14.03.38.49;	author jsg;	state Exp;
branches;
next	1.21;
commitid	p4LJxGKbi0BU2cG6;

1.21
date	2014.11.18.23.55.01;	author krw;	state Exp;
branches;
next	1.20;
commitid	Qb045HZ5OhQfU69H;

1.20
date	2014.07.12.21.24.33;	author mpi;	state Exp;
branches;
next	1.19;
commitid	AGVMSdzbrCHVAlSG;

1.19
date	2013.11.15.08.25.30;	author pirofti;	state Exp;
branches;
next	1.18;

1.18
date	2013.11.07.12.52.42;	author pirofti;	state Exp;
branches;
next	1.17;

1.17
date	2013.04.15.09.23.01;	author mglocker;	state Exp;
branches;
next	1.16;

1.16
date	2011.07.03.15.47.17;	author matthew;	state Exp;
branches;
next	1.15;

1.15
date	2011.01.25.20.03.36;	author jakemsr;	state Exp;
branches;
next	1.14;

1.14
date	2010.09.24.08.33.59;	author yuo;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.13.19.33.17;	author pirofti;	state Exp;
branches;
next	1.12;

1.12
date	2009.08.16.12.57.22;	author jsg;	state Exp;
branches;
next	1.11;

1.11
date	2007.10.11.18.33.14;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2007.06.14.10.11.15;	author mbalmer;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.13.06.25.03;	author mbalmer;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.12.16.26.36;	author mbalmer;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.10.14.49.00;	author mbalmer;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.10.10.53.48;	author mbalmer;	state Exp;
branches;
next	1.5;

1.5
date	2007.06.06.19.25.49;	author mk;	state Exp;
branches;
next	1.4;

1.4
date	2007.06.05.08.43.55;	author mbalmer;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.27.04.00.25;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.26.06.02.43;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.26.04.14.09;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Avoid calling usbd_set_config_index() in *_attach() and let the stack
do it instead.

If anything bad happen due to a malformed descriptor it makes no sense
to try to attach a driver, and bail before probing.
@
text
@/*	$OpenBSD: moscom.c,v 1.23 2016/01/07 12:53:37 mpi Exp $	*/

/*
 * Copyright (c) 2006 Jonathan Gray <jsg@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/tty.h>
#include <sys/device.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdi_util.h>
#include <dev/usb/usbdevs.h>

#include <dev/usb/ucomvar.h>

#define MOSCOMBUFSZ		256
#define MOSCOM_IFACE_NO		0

#define MOSCOM_READ		0x0d
#define MOSCOM_WRITE		0x0e
#define MOSCOM_UART_REG		0x0300
#define MOSCOM_VEND_REG		0x0000

#define MOSCOM_TXBUF		0x00	/* Write */
#define MOSCOM_RXBUF		0x00	/* Read */
#define MOSCOM_INT		0x01
#define MOSCOM_FIFO		0x02	/* Write */
#define MOSCOM_ISR		0x02	/* Read */
#define MOSCOM_LCR		0x03
#define MOSCOM_MCR		0x04
#define MOSCOM_LSR		0x05
#define MOSCOM_MSR		0x06
#define MOSCOM_SCRATCH		0x07
#define MOSCOM_DIV_LO		0x08
#define MOSCOM_DIV_HI		0x09
#define MOSCOM_EFR		0x0a
#define	MOSCOM_XON1		0x0b
#define MOSCOM_XON2		0x0c
#define MOSCOM_XOFF1		0x0d
#define MOSCOM_XOFF2		0x0e

#define MOSCOM_BAUDLO		0x00
#define MOSCOM_BAUDHI		0x01

#define MOSCOM_INT_RXEN		0x01
#define MOSCOM_INT_TXEN		0x02
#define MOSCOM_INT_RSEN		0x04	
#define MOSCOM_INT_MDMEM	0x08
#define MOSCOM_INT_SLEEP	0x10
#define MOSCOM_INT_XOFF		0x20
#define MOSCOM_INT_RTS		0x40	

#define MOSCOM_FIFO_EN		0x01
#define MOSCOM_FIFO_RXCLR	0x02
#define MOSCOM_FIFO_TXCLR	0x04
#define MOSCOM_FIFO_DMA_BLK	0x08
#define MOSCOM_FIFO_TXLVL_MASK	0x30
#define MOSCOM_FIFO_TXLVL_8	0x00
#define MOSCOM_FIFO_TXLVL_16	0x10
#define MOSCOM_FIFO_TXLVL_32	0x20
#define MOSCOM_FIFO_TXLVL_56	0x30
#define MOSCOM_FIFO_RXLVL_MASK	0xc0
#define MOSCOM_FIFO_RXLVL_8	0x00
#define MOSCOM_FIFO_RXLVL_16	0x40
#define MOSCOM_FIFO_RXLVL_56	0x80
#define MOSCOM_FIFO_RXLVL_80	0xc0

#define MOSCOM_ISR_MDM		0x00
#define MOSCOM_ISR_NONE		0x01
#define MOSCOM_ISR_TX		0x02
#define MOSCOM_ISR_RX		0x04
#define MOSCOM_ISR_LINE		0x06
#define MOSCOM_ISR_RXTIMEOUT	0x0c
#define MOSCOM_ISR_RX_XOFF	0x10
#define MOSCOM_ISR_RTSCTS	0x20
#define MOSCOM_ISR_FIFOEN	0xc0

#define MOSCOM_LCR_DBITS(x)	(x - 5)
#define MOSCOM_LCR_STOP_BITS_1	0x00
#define MOSCOM_LCR_STOP_BITS_2	0x04	/* 2 if 6-8 bits/char or 1.5 if 5 */
#define MOSCOM_LCR_PARITY_NONE	0x00
#define MOSCOM_LCR_PARITY_ODD	0x08
#define MOSCOM_LCR_PARITY_EVEN	0x18
#define MOSCOM_LCR_BREAK	0x40
#define MOSCOM_LCR_DIVLATCH_EN	0x80

#define MOSCOM_MCR_DTR		0x01
#define MOSCOM_MCR_RTS		0x02
#define MOSCOM_MCR_LOOP		0x04
#define MOSCOM_MCR_INTEN	0x08
#define MOSCOM_MCR_LOOPBACK	0x10
#define MOSCOM_MCR_XONANY	0x20
#define MOSCOM_MCR_IRDA_EN	0x40
#define MOSCOM_MCR_BAUD_DIV4	0x80

#define MOSCOM_LSR_RXDATA	0x01
#define MOSCOM_LSR_RXOVER	0x02
#define MOSCOM_LSR_RXPAR_ERR	0x04
#define MOSCOM_LSR_RXFRM_ERR	0x08
#define MOSCOM_LSR_RXBREAK	0x10
#define MOSCOM_LSR_TXEMPTY	0x20
#define MOSCOM_LSR_TXALLEMPTY	0x40
#define MOSCOM_LSR_TXFIFO_ERR	0x80

#define MOSCOM_MSR_CTS_CHG	0x01
#define MOSCOM_MSR_DSR_CHG	0x02
#define MOSCOM_MSR_RI_CHG	0x04
#define MOSCOM_MSR_CD_CHG	0x08
#define MOSCOM_MSR_CTS		0x10
#define MOSCOM_MSR_RTS		0x20
#define MOSCOM_MSR_RI		0x40
#define MOSCOM_MSR_CD		0x80

#define MOSCOM_BAUD_REF		115200

struct moscom_softc {
	struct device		 sc_dev;
	struct usbd_device	*sc_udev;
	struct usbd_interface	*sc_iface;
	struct device		*sc_subdev;

	u_char			 sc_msr;
	u_char			 sc_lsr;
	u_char			 sc_lcr;
};

void	moscom_set(void *, int, int, int);
int	moscom_param(void *, int, struct termios *);
int	moscom_open(void *, int);
int	moscom_cmd(struct moscom_softc *, int, int);	

struct ucom_methods moscom_methods = {
	NULL,
	moscom_set,
	moscom_param,
	NULL,
	moscom_open,
	NULL,
	NULL,
	NULL,
};

static const struct usb_devno moscom_devs[] = {
	{ USB_VENDOR_MOSCHIP,		USB_PRODUCT_MOSCHIP_MCS7703 }
};

int moscom_match(struct device *, void *, void *);
void moscom_attach(struct device *, struct device *, void *);
int moscom_detach(struct device *, int);

struct cfdriver moscom_cd = {
	NULL, "moscom", DV_DULL
};

const struct cfattach moscom_ca = {
	sizeof(struct moscom_softc), moscom_match, moscom_attach, moscom_detach
};

int
moscom_match(struct device *parent, void *match, void *aux)
{
	struct usb_attach_arg *uaa = aux;

	if (uaa->iface == NULL)
		return UMATCH_NONE;

	return (usb_lookup(moscom_devs, uaa->vendor, uaa->product) != NULL) ?
	    UMATCH_VENDOR_PRODUCT : UMATCH_NONE;
}

void
moscom_attach(struct device *parent, struct device *self, void *aux)
{
	struct moscom_softc *sc = (struct moscom_softc *)self;
	struct usb_attach_arg *uaa = aux;
	struct ucom_attach_args uca;
	usb_interface_descriptor_t *id;
	usb_endpoint_descriptor_t *ed;
	usbd_status error;
	int i;

	bzero(&uca, sizeof(uca));
	sc->sc_udev = uaa->device;

	/* get the first interface handle */
	error = usbd_device2interface_handle(sc->sc_udev, MOSCOM_IFACE_NO,
	    &sc->sc_iface);
	if (error != 0) {
		printf("%s: could not get interface handle\n",
		    sc->sc_dev.dv_xname);
		usbd_deactivate(sc->sc_udev);
		return;
	}

	id = usbd_get_interface_descriptor(sc->sc_iface);

	uca.bulkin = uca.bulkout = -1;
	for (i = 0; i < id->bNumEndpoints; i++) {
		ed = usbd_interface2endpoint_descriptor(sc->sc_iface, i);
		if (ed == NULL) {
			printf("%s: no endpoint descriptor found for %d\n",
			    sc->sc_dev.dv_xname, i);
			usbd_deactivate(sc->sc_udev);
			return;
		}

		if (UE_GET_DIR(ed->bEndpointAddress) == UE_DIR_IN &&
		    UE_GET_XFERTYPE(ed->bmAttributes) == UE_BULK)
			uca.bulkin = ed->bEndpointAddress;
		else if (UE_GET_DIR(ed->bEndpointAddress) == UE_DIR_OUT &&
		    UE_GET_XFERTYPE(ed->bmAttributes) == UE_BULK)
			uca.bulkout = ed->bEndpointAddress;
	}

	if (uca.bulkin == -1 || uca.bulkout == -1) {
		printf("%s: missing endpoint\n", sc->sc_dev.dv_xname);
		usbd_deactivate(sc->sc_udev);
		return;
	}

	uca.ibufsize = MOSCOMBUFSZ;
	uca.obufsize = MOSCOMBUFSZ;
	uca.ibufsizepad = MOSCOMBUFSZ;
	uca.opkthdrlen = 0;
	uca.device = sc->sc_udev;
	uca.iface = sc->sc_iface;
	uca.methods = &moscom_methods;
	uca.arg = sc;
	uca.info = NULL;
	
	sc->sc_subdev = config_found_sm(self, &uca, ucomprint, ucomsubmatch);
}

int
moscom_detach(struct device *self, int flags)
{
	struct moscom_softc *sc = (struct moscom_softc *)self;
	int rv = 0;

	if (sc->sc_subdev != NULL) {
		rv = config_detach(sc->sc_subdev, flags);
		sc->sc_subdev = NULL;
	}

	return (rv);
}

int
moscom_open(void *vsc, int portno)
{
	struct moscom_softc *sc = vsc;
	usb_device_request_t req;

	if (usbd_is_dying(sc->sc_udev))
		return (EIO);

	/* Purge FIFOs or odd things happen */
	if (moscom_cmd(sc, MOSCOM_FIFO, 0x00) != 0)
		return (EIO);
	
	if (moscom_cmd(sc, MOSCOM_FIFO, MOSCOM_FIFO_EN |
	    MOSCOM_FIFO_RXCLR | MOSCOM_FIFO_TXCLR |
	    MOSCOM_FIFO_DMA_BLK | MOSCOM_FIFO_RXLVL_MASK) != 0) 
		return (EIO);

	/* Magic tell device we're ready for data command */
	req.bmRequestType = UT_WRITE_VENDOR_DEVICE;
	req.bRequest = MOSCOM_WRITE;
	USETW(req.wValue, 0x08);
	USETW(req.wIndex, MOSCOM_INT);
	USETW(req.wLength, 0);
	if (usbd_do_request(sc->sc_udev, &req, NULL) != 0)
		return (EIO);

	return (0);
}

void
moscom_set(void *vsc, int portno, int reg, int onoff)
{
	struct moscom_softc *sc = vsc;
	int val;

	switch (reg) {
	case UCOM_SET_DTR:
		val = onoff ? MOSCOM_MCR_DTR : 0;
		break;
	case UCOM_SET_RTS:
		val = onoff ? MOSCOM_MCR_RTS : 0;
		break;
	case UCOM_SET_BREAK:
		val = sc->sc_lcr;
		if (onoff)
			val |= MOSCOM_LCR_BREAK;
		moscom_cmd(sc, MOSCOM_LCR, val);
		return;
	default:
		return;
	}

	moscom_cmd(sc, MOSCOM_MCR, val);
}

int
moscom_param(void *vsc, int portno, struct termios *t)
{
	struct moscom_softc *sc = (struct moscom_softc *)vsc;
	int data;

	if (t->c_ospeed <= 0 || t->c_ospeed > 115200)
		return (EINVAL);

	data = MOSCOM_BAUD_REF / t->c_ospeed;

	if (data == 0 || data > 0xffff)
		return (EINVAL);

	moscom_cmd(sc, MOSCOM_LCR, MOSCOM_LCR_DIVLATCH_EN);
	moscom_cmd(sc, MOSCOM_BAUDLO, data & 0xFF);
	moscom_cmd(sc, MOSCOM_BAUDHI, (data >> 8) & 0xFF);

	if (ISSET(t->c_cflag, CSTOPB))
		data = MOSCOM_LCR_STOP_BITS_2;
	else
		data = MOSCOM_LCR_STOP_BITS_1;
	if (ISSET(t->c_cflag, PARENB)) {
		if (ISSET(t->c_cflag, PARODD))
			data |= MOSCOM_LCR_PARITY_ODD;
		else
			data |= MOSCOM_LCR_PARITY_EVEN;
	} else
		data |= MOSCOM_LCR_PARITY_NONE;
	switch (ISSET(t->c_cflag, CSIZE)) {
	case CS5:
		data |= MOSCOM_LCR_DBITS(5);
		break;
	case CS6:
		data |= MOSCOM_LCR_DBITS(6);
		break;
	case CS7:
		data |= MOSCOM_LCR_DBITS(7);
		break;
	case CS8:
		data |= MOSCOM_LCR_DBITS(8);
		break;
	}

	sc->sc_lcr = data;
	moscom_cmd(sc, MOSCOM_LCR, sc->sc_lcr);

#if 0
	/* XXX flow control */
	if (ISSET(t->c_cflag, CRTSCTS))
		/*  rts/cts flow ctl */
	} else if (ISSET(t->c_iflag, IXON|IXOFF)) {
		/*  xon/xoff flow ctl */
	} else {
		/* disable flow ctl */
	}
#endif

	return (0);
}

int
moscom_cmd(struct moscom_softc *sc, int reg, int val)
{
	usb_device_request_t req;
	usbd_status err;
	
	req.bmRequestType = UT_WRITE_VENDOR_DEVICE;
	req.bRequest = MOSCOM_WRITE;
	USETW(req.wValue, val + MOSCOM_UART_REG);
	USETW(req.wIndex, reg);
	USETW(req.wLength, 0);
	err = usbd_do_request(sc->sc_udev, &req, NULL);
	if (err)
		return (EIO);
	else
		return (0);
}
@


1.23
log
@Rename some wrongly defined *_CONFIG_NO into *_CONFIG_INDEX.

Configuration indexes start a 0, for the default one, while
numbers correspond to the 'bConfigurationValue' field of a
config descriptor.
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.22 2015/03/14 03:38:49 jsg Exp $	*/
a32 1
#define MOSCOM_CONFIG_INDEX	0
d180 1
a180 1
	if (uaa->iface != NULL)
a199 7

	if (usbd_set_config_index(sc->sc_udev, MOSCOM_CONFIG_INDEX, 1) != 0) {
		printf("%s: could not set configuration no\n",
		    sc->sc_dev.dv_xname);
		usbd_deactivate(sc->sc_udev);
		return;
	}
@


1.22
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.21 2014/11/18 23:55:01 krw Exp $	*/
d33 1
a33 1
#define MOSCOM_CONFIG_NO	0
d202 1
a202 1
	if (usbd_set_config_index(sc->sc_udev, MOSCOM_CONFIG_NO, 1) != 0) {
@


1.21
log
@Nuke yet more obvious #include duplications.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.20 2014/07/12 21:24:33 mpi Exp $	*/
a21 1
#include <sys/conf.h>
@


1.20
log
@Kill the last dumb DVACT_DEACTIVATE handlers.
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.19 2013/11/15 08:25:30 pirofti Exp $	*/
a30 1
#include <dev/usb/usbdevs.h>
@


1.19
log
@Sort-out activate functionality for ucom(4) and it's parents.


The child should not have to call the parent for deactivation.
The parent should handle it.
So kill the activate routine in ucom(4) and adapt the parents
to no longer call it.


Also remove sc_dying in ucom(4) and use usbd_is_dying() instead.

Okay mpi@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.18 2013/11/07 12:52:42 pirofti Exp $	*/
d166 10
a175 15
int moscom_match(struct device *, void *, void *); 
void moscom_attach(struct device *, struct device *, void *); 
int moscom_detach(struct device *, int); 
int moscom_activate(struct device *, int); 

struct cfdriver moscom_cd = { 
	NULL, "moscom", DV_DULL 
}; 

const struct cfattach moscom_ca = { 
	sizeof(struct moscom_softc), 
	moscom_match, 
	moscom_attach, 
	moscom_detach, 
	moscom_activate, 
a271 13
}

int
moscom_activate(struct device *self, int act)
{
	struct moscom_softc *sc = (struct moscom_softc *)self;

	switch (act) {
	case DVACT_DEACTIVATE:
		usbd_deactivate(sc->sc_udev);
		break;
	}
	return (0);
@


1.18
log
@Replace sc_dying in favour of usbd_is_dying() and usbd_deactivate().

Okay mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.17 2013/04/15 09:23:01 mglocker Exp $	*/
a282 1
	int rv = 0;
a285 2
		if (sc->sc_subdev != NULL)
			rv = config_deactivate(sc->sc_subdev);
d289 1
a289 1
	return (rv);
@


1.17
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.16 2011/07/03 15:47:17 matthew Exp $	*/
a143 2

	u_char			 sc_dying;
d212 1
a212 1
		sc->sc_dying = 1;
d222 1
a222 1
		sc->sc_dying = 1;
d234 1
a234 1
			sc->sc_dying = 1;
d248 1
a248 1
		sc->sc_dying = 1;
d289 1
a289 1
		sc->sc_dying = 1;
d301 1
a301 1
	if (sc->sc_dying)
@


1.16
log
@Remove config_activate() and DVACT_ACTIVATE.  PCMCIA's the only thing
that's ever used it, and it's long since been changed to use
DVACT_{QUIESCE,SUSPEND,RESUME} instead.

ok deraadt@@, dlg@@; miod@@ also agreed with this idea when I brought it
up a few weeks ago
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.15 2011/01/25 20:03:36 jakemsr Exp $	*/
d137 2
a138 2
	usbd_device_handle	 sc_udev;
	usbd_interface_handle	 sc_iface;
@


1.15
log
@garbage collect "usb events".  without /dev/usb there is no way to access
them from userland, and nothing in the kernel uses them.

ok krw@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.14 2010/09/24 08:33:59 yuo Exp $	*/
a287 3
	case DVACT_ACTIVATE:
		break;

@


1.14
log
@remove dying flag in detach() function.
The dying flag will be set in activate()/DEACTIVATE.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.13 2009/10/13 19:33:17 pirofti Exp $	*/
a262 3

	usbd_add_drv_event(USB_EVENT_DRIVER_ATTACH, sc->sc_udev,
	    &sc->sc_dev);
a276 3

	usbd_add_drv_event(USB_EVENT_DRIVER_DETACH, sc->sc_udev,
			   &sc->sc_dev);
@


1.13
log
@Get rid of devact enum, substitute it with an int and coresponding defines.

This is needed for the addition of further suspend/resume actions.

Okay deraadt@@, marco@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.12 2009/08/16 12:57:22 jsg Exp $	*/
a275 1
	sc->sc_dying = 1;
@


1.12
log
@remove moscom_get_status() as it not called or required.
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.11 2007/10/11 18:33:14 deraadt Exp $	*/
d171 1
a171 1
int moscom_activate(struct device *, enum devact); 
d289 1
a289 1
moscom_activate(struct device *self, enum devact act)
@


1.11
log
@treat usb vendor/product names as a locator, and have usbd_print handle it,
so that it shows up before the :.  as a result, all the usb devices do not
need to have name printing code anymore.  all this now works and prints
nicely because usbd_probe_and_attach() is serialized.  ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.10 2007/06/14 10:11:15 mbalmer Exp $	*/
a147 1
void	moscom_get_status(void *, int, u_char *, u_char *);
a421 11
}

void
moscom_get_status(void *vsc, int portno, u_char *lsr, u_char *msr)
{
	struct moscom_softc *sc = vsc;
	
	if (msr != NULL)
		*msr = sc->sc_msr;
	if (lsr != NULL)
		*lsr = sc->sc_lsr;
@


1.10
log
@Remove the definition and usage of the USB_DECLARE_DRIVER_CLASS and
USB_DECLARE_DRIVER macros.

No binary change.

ok dlg.
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.9 2007/06/13 06:25:03 mbalmer Exp $	*/
a206 1
	char *devinfop;
a210 3
	devinfop = usbd_devinfo_alloc(uaa->device, 0);
	printf("\n%s: %s\n", sc->sc_dev.dv_xname, devinfop);
	usbd_devinfo_free(devinfop);
@


1.9
log
@Apply some KNF after the recent removal of macros and type definitions.

No binary change.

ok ray.
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.8 2007/06/12 16:26:36 mbalmer Exp $	*/
d169 16
a184 1
USB_DECLARE_DRIVER(moscom);
@


1.8
log
@Remove the definition and use of the device_ptr_t which was a struct device *.

No binary change.

ok mk.
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.7 2007/06/10 14:49:00 mbalmer Exp $	*/
d136 8
a143 8
	struct device		sc_dev;
	usbd_device_handle	sc_udev;
	usbd_interface_handle	sc_iface;
	struct device *		sc_subdev;

	u_char			sc_msr;
	u_char			sc_lsr;
	u_char			sc_lcr;
d145 1
a145 1
	u_char			sc_dying;
@


1.7
log
@Remove the definition and use of the USBDEVNAME macro.

(This might look easy, but it was a big diff.  Thanks to dlg and especially jsg
for looking over it; we found at least four mistakes in the initial diff.)

ok jsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.6 2007/06/10 10:53:48 mbalmer Exp $	*/
d139 1
a139 1
	device_ptr_t		sc_subdev;
d279 1
a279 1
moscom_activate(device_ptr_t self, enum devact act)
@


1.6
log
@Remove the definition and use of the USBDEV macro.  It only created confusion
and the address of it's argument:  USBDEV(sc->sc_dev) yields &sc->sc_dev.

No binary changes.

ok jsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.5 2007/06/06 19:25:49 mk Exp $	*/
d198 1
a198 1
	printf("\n%s: %s\n", USBDEVNAME(sc->sc_dev), devinfop);
d203 1
a203 1
		    USBDEVNAME(sc->sc_dev));
d213 1
a213 1
		    USBDEVNAME(sc->sc_dev));
d225 1
a225 1
			    USBDEVNAME(sc->sc_dev), i);
d239 1
a239 1
		printf("%s: missing endpoint\n", USBDEVNAME(sc->sc_dev));
@


1.5
log
@Mechanical removal of USBBASEDEVICE.  No binary change.

Tested by thib and myself.

ok mbalmer jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.4 2007/06/05 08:43:55 mbalmer Exp $	*/
d255 1
a255 1
	    USBDEV(sc->sc_dev));
d273 1
a273 1
			   USBDEV(sc->sc_dev));
@


1.4
log
@Remove the "Static" declaration of many functions.  It was defined to be empty
and it was not consistently used.  It was confusing as it suggested these
functions were static, which they were not.

discussed with dlg and jsg, ok jsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.3 2007/05/27 04:00:25 jsg Exp $	*/
d136 1
a136 1
	USBBASEDEVICE		sc_dev;
@


1.3
log
@Farewell USB_{ATTACH,MATCH,DETACH}* you will not be missed.
ok deraadt@@ krw@@ mbalmer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.2 2006/10/26 06:02:43 jsg Exp $	*/
d148 5
a152 5
Static void	moscom_get_status(void *, int, u_char *, u_char *);
Static void	moscom_set(void *, int, int, int);
Static int	moscom_param(void *, int, struct termios *);
Static int	moscom_open(void *, int);
Static int	moscom_cmd(struct moscom_softc *, int, int);	
d297 1
a297 1
Static int
d327 1
a327 1
Static void
d353 1
a353 1
Static int
d414 1
a414 1
Static void
d425 1
a425 1
Static int
@


1.2
log
@Move from a switch based baud rate selection to range checking
based selection as hardware is not limited to fixed rates.
Suggested by deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.1 2006/10/26 04:14:09 jsg Exp $	*/
d171 2
a172 1
USB_MATCH(moscom)
d174 1
a174 1
	USB_MATCH_START(moscom, uaa);
d183 2
a184 1
USB_ATTACH(moscom)
d186 2
a187 1
	USB_ATTACH_START(moscom, sc, uaa);
d198 1
a198 2
	USB_ATTACH_SETUP;
	printf("%s: %s\n", USBDEVNAME(sc->sc_dev), devinfop);
d205 1
a205 1
		USB_ATTACH_ERROR_RETURN;
d215 1
a215 1
		USB_ATTACH_ERROR_RETURN;
d227 1
a227 1
			USB_ATTACH_ERROR_RETURN;
d241 1
a241 1
		USB_ATTACH_ERROR_RETURN;
a257 2

	USB_ATTACH_SUCCESS_RETURN;
d260 2
a261 1
USB_DETACH(moscom)
d263 1
a263 1
	USB_DETACH_START(moscom, sc);
@


1.1
log
@Driver for MosChip MCS7703 based USB Serial devices.
Support for hardware flow control not yet implemented.
@
text
@d1 1
a1 1
/*	$OpenBSD: moscom.c,v 1.3 2006/06/23 06:27:12 miod Exp $	*/
d133 1
a133 13
#define MOSCOM_BAUD_150		768
#define MOSCOM_BAUD_300		384
#define MOSCOM_BAUD_600		192
#define MOSCOM_BAUD_1200	96
#define MOSCOM_BAUD_1800	64
#define MOSCOM_BAUD_2400	48
#define MOSCOM_BAUD_4800	24
#define MOSCOM_BAUD_9600	12
#define MOSCOM_BAUD_19200	6
#define MOSCOM_BAUD_38400	3
#define MOSCOM_BAUD_57600	2
#define MOSCOM_BAUD_115200	1

d358 6
a363 14
	switch (t->c_ospeed) {
	case 150:	data = MOSCOM_BAUD_150; break;
	case 300:	data = MOSCOM_BAUD_300; break;
	case 600:	data = MOSCOM_BAUD_600; break;
	case 1200:	data = MOSCOM_BAUD_1200; break;
	case 1800:	data = MOSCOM_BAUD_1800; break;
	case 2400:	data = MOSCOM_BAUD_2400; break;
	case 4800:	data = MOSCOM_BAUD_4800; break;
	case 9600:	data = MOSCOM_BAUD_9600; break;
	case 19200:	data = MOSCOM_BAUD_19200; break;
	case 38400:	data = MOSCOM_BAUD_38400; break;
	case 57600:	data = MOSCOM_BAUD_57600; break;
	case 115200:	data = MOSCOM_BAUD_115200; break;
	default:
a364 1
	}
@

