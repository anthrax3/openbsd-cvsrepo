head	1.24;
access;
symbols
	OPENBSD_6_2:1.24.0.2
	OPENBSD_6_2_BASE:1.24
	OPENBSD_6_1:1.24.0.4
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.23.0.10
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.4
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.23.0.6
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.21.0.6
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.2
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.20.0.8
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.6
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.4
	OPENBSD_5_0:1.20.0.2
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.19.0.2
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.17.0.2
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.15.0.10
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.6
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.4
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.2
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.24
date	2016.11.06.12.58.01;	author mpi;	state Exp;
branches;
next	1.23;
commitid	xlY19nmD0cBL53l1;

1.23
date	2014.12.19.22.44.59;	author guenther;	state Exp;
branches;
next	1.22;
commitid	LS2TNeCue5R9L67C;

1.22
date	2014.07.12.20.26.33;	author mpi;	state Exp;
branches;
next	1.21;
commitid	PSjXNz8dGohZ6ZSK;

1.21
date	2013.04.15.09.23.02;	author mglocker;	state Exp;
branches;
next	1.20;

1.20
date	2011.07.03.15.47.17;	author matthew;	state Exp;
branches;
next	1.19;

1.19
date	2011.01.25.20.03.36;	author jakemsr;	state Exp;
branches;
next	1.18;

1.18
date	2010.12.27.03.03.50;	author jakemsr;	state Exp;
branches;
next	1.17;

1.17
date	2010.04.20.22.05.43;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2009.10.13.19.33.17;	author pirofti;	state Exp;
branches;
next	1.15;

1.15
date	2007.10.11.18.33.14;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2007.09.17.01.40.38;	author fgsch;	state Exp;
branches;
next	1.13;

1.13
date	2007.08.30.05.06.21;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2007.08.24.01.16.36;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2007.08.23.02.48.04;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2007.06.14.10.11.15;	author mbalmer;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.12.16.26.36;	author mbalmer;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.10.14.49.00;	author mbalmer;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.10.10.53.48;	author mbalmer;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.06.19.25.49;	author mk;	state Exp;
branches;
next	1.5;

1.5
date	2007.06.05.08.43.55;	author mbalmer;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.27.04.00.25;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.26.17.00.28;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.29.19.55.37;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.27.11.38.43;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Avoid calling usbd_set_config_no() in *_attach() and let the stack do
it instead.

If anything bad happen due to a malformed descriptor it makes no sense
to try to attach a driver, and bail before probing.

This is similar to the change to avoid calling usbd_set_config_index().
@
text
@/*	$OpenBSD: uberry.c,v 1.23 2014/12/19 22:44:59 guenther Exp $	*/

/*-
 * Copyright (c) 2006 Theo de Raadt <deraadt@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/sockio.h>
#include <sys/mbuf.h>
#include <sys/kernel.h>
#include <sys/socket.h>
#include <sys/systm.h>
#include <sys/timeout.h>
#include <sys/conf.h>
#include <sys/device.h>
#include <sys/endian.h>

#include <machine/bus.h>
#include <machine/intr.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdivar.h>
#include <dev/usb/usbdi_util.h>
#include <dev/usb/usbdevs.h>

struct uberry_softc {
	struct device			sc_dev;
	struct usbd_device		*sc_udev;
	struct usbd_interface		*sc_iface;
};

#define UBERRY_INTERFACE_NO		0
#define UBERRY_CONFIG_NO		1

/*
 * Do not match on the following device, because it is type umass
 * { USB_VENDOR_RIM, USB_PRODUCT_RIM_PEARL_DUAL },
 */
struct usb_devno const uberry_devices[] = {
	{ USB_VENDOR_RIM, USB_PRODUCT_RIM_BLACKBERRY },
	{ USB_VENDOR_RIM, USB_PRODUCT_RIM_PEARL }
};

int uberry_match(struct device *, void *, void *);
void uberry_attach(struct device *, struct device *, void *);
int uberry_detach(struct device *, int);

void uberry_pearlmode(struct uberry_softc *);
void uberry_charge(struct uberry_softc *);

struct cfdriver uberry_cd = {
	NULL, "uberry", DV_DULL
};

const struct cfattach uberry_ca = {
	sizeof(struct uberry_softc), uberry_match, uberry_attach, uberry_detach
};

int
uberry_match(struct device *parent, void *match, void *aux)
{
	struct usb_attach_arg *uaa = aux;

	if (uaa->iface == NULL || uaa->configno != UBERRY_CONFIG_NO)
		return UMATCH_NONE;

	return (usb_lookup(uberry_devices, uaa->vendor, uaa->product) != NULL) ?
	    UMATCH_VENDOR_PRODUCT : UMATCH_NONE;
}

void
uberry_attach(struct device *parent, struct device *self, void *aux)
{
	struct uberry_softc *sc = (struct uberry_softc *)self;
	struct usb_attach_arg *uaa = aux;
	usb_device_descriptor_t *dd;

	sc->sc_udev = uaa->device;

	dd = usbd_get_device_descriptor(uaa->device);

	printf("%s: Charging at %dmA", sc->sc_dev.dv_xname,
	    sc->sc_udev->power);
	if (sc->sc_udev->power >= 250)
		printf("\n");
	else {
		printf("... requesting higher-power charging\n");
		uberry_charge(sc);
		/*
		 * Older berry's will disconnect/reconnect at this
		 * point, and come back requesting higher power
		 */
	}

	/* On the Pearl, request a change to Dual mode */
	if (UGETW(dd->idProduct) == USB_PRODUCT_RIM_PEARL)
		uberry_pearlmode(sc);

	/* Enable the device, then it cannot idle, and will charge */
	if (usbd_set_config_no(sc->sc_udev, UBERRY_CONFIG_NO, 1) != 0) {
		printf("%s: could not set configuration no\n",
		    sc->sc_dev.dv_xname);
		return;
	}

	if (UGETW(dd->idProduct) == USB_PRODUCT_RIM_PEARL) {
		/*
		 * Pearl does not disconnect/reconnect by itself,
		 * and therefore needs to be told to reset, so that
		 * it can come back in Dual mode.
		 */
		usb_needs_reattach(sc->sc_udev);
	}
}

int
uberry_detach(struct device *self, int flags)
{
	/* struct uberry_softc *sc = (struct uberry_softc *)self; */

	return 0;
}

void
uberry_pearlmode(struct uberry_softc *sc)
{
	usb_device_request_t req;
	char buffer[256];

	req.bmRequestType = UT_READ_VENDOR_DEVICE;
	req.bRequest = 0xa9;
	USETW(req.wValue, 1);
	USETW(req.wIndex, 1);
	USETW(req.wLength, 2);
	(void) usbd_do_request(sc->sc_udev, &req, &buffer);
}

void 
uberry_charge(struct uberry_softc *sc)
{
	usb_device_request_t req;
	char buffer[256];

	req.bmRequestType = UT_READ_VENDOR_DEVICE;
	req.bRequest = 0xa5;
	USETW(req.wValue, 0);
	USETW(req.wIndex, 1);
	USETW(req.wLength, 2);
	(void) usbd_do_request(sc->sc_udev, &req, &buffer);

	req.bmRequestType = UT_WRITE_VENDOR_DEVICE;
	req.bRequest = 0xa2;
	USETW(req.wValue, 0);
	USETW(req.wIndex, 1);
	USETW(req.wLength, 0);
	(void) usbd_do_request(sc->sc_udev, &req, &buffer);
}
@


1.23
log
@Use <sys/endian.h> instead of <machine/endian.h>

ok dlg@@ mpi@@ bcook@@ millert@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.22 2014/07/12 20:26:33 mpi Exp $	*/
d77 1
a77 1
	if (uaa->iface != NULL)
a93 11

	/* Enable configuration, to keep it connected... */
	if (usbd_set_config_no(sc->sc_udev, UBERRY_CONFIG_NO, 1) != 0) {
		/*
		 * Really ancient (ie. 7250) devices when off will
		 * only charge at 100mA when turned off.
		 */
		printf("%s: Charging at %dmA\n", sc->sc_dev.dv_xname,
		    sc->sc_udev->power);
		return;
	}
@


1.22
log
@tedu another bunch of DVACT_DEACTIVATE handlers that do nothing but set
the 'dying' flag.
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.21 2013/04/15 09:23:02 mglocker Exp $	*/
d28 1
a30 1
#include <machine/endian.h>
@


1.21
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.20 2011/07/03 15:47:17 matthew Exp $	*/
d57 3
a59 4
int uberry_match(struct device *, void *, void *); 
void uberry_attach(struct device *, struct device *, void *); 
int uberry_detach(struct device *, int); 
int uberry_activate(struct device *, int); 
d64 6
a69 10
struct cfdriver uberry_cd = { 
	NULL, "uberry", DV_DULL 
}; 

const struct cfattach uberry_ca = { 
	sizeof(struct uberry_softc), 
	uberry_match, 
	uberry_attach, 
	uberry_detach, 
	uberry_activate, 
a144 13
	return 0;
}

int
uberry_activate(struct device *self, int act)
{
	struct uberry_softc *sc = (struct uberry_softc *)self;

	switch (act) {
	case DVACT_DEACTIVATE:
		usbd_deactivate(sc->sc_udev);
		break;
	}
@


1.20
log
@Remove config_activate() and DVACT_ACTIVATE.  PCMCIA's the only thing
that's ever used it, and it's long since been changed to use
DVACT_{QUIESCE,SUSPEND,RESUME} instead.

ok deraadt@@, dlg@@; miod@@ also agreed with this idea when I brought it
up a few weeks ago
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.19 2011/01/25 20:03:36 jakemsr Exp $	*/
d41 2
a42 2
	usbd_device_handle		sc_udev;
	usbd_interface_handle		sc_iface;
@


1.19
log
@garbage collect "usb events".  without /dev/usb there is no way to access
them from userland, and nothing in the kernel uses them.

ok krw@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.18 2010/12/27 03:03:50 jakemsr Exp $	*/
a158 3
	case DVACT_ACTIVATE:
		break;

@


1.18
log
@* add cfattach activate functions and call usbd_deactivate() in the
  DVACT_DEACTIVATE case for drivers that don't have activate finctions
* fill out cfattach activate functions and call usbd_deactivate() in
  the DVACT_DEACTIVATE case for drivers that don't have a dying flag

"ok with the intent" miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.17 2010/04/20 22:05:43 tedu Exp $	*/
a142 3

	usbd_add_drv_event(USB_EVENT_DRIVER_ATTACH, sc->sc_udev,
	    &sc->sc_dev);
d148 1
a148 1
	struct uberry_softc *sc = (struct uberry_softc *)self;
a149 2
	usbd_add_drv_event(USB_EVENT_DRIVER_DETACH, sc->sc_udev,
	    &sc->sc_dev);
@


1.17
log
@remove proc.h include from uvm_map.h.  This has far reaching effects, as
sysctl.h was reliant on this particular include, and many drivers included
sysctl.h unnecessarily.  remove sysctl.h or add proc.h as needed.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.16 2009/10/13 19:33:17 pirofti Exp $	*/
d161 2
d168 1
@


1.16
log
@Get rid of devact enum, substitute it with an int and coresponding defines.

This is needed for the addition of further suspend/resume actions.

Okay deraadt@@, marco@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.15 2007/10/11 18:33:14 deraadt Exp $	*/
a20 1
#include <sys/sysctl.h>
@


1.15
log
@treat usb vendor/product names as a locator, and have usbd_print handle it,
so that it shows up before the :.  as a result, all the usb devices do not
need to have name printing code anymore.  all this now works and prints
nicely because usbd_probe_and_attach() is serialized.  ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.14 2007/09/17 01:40:38 fgsch Exp $	*/
d61 1
a61 1
int uberry_activate(struct device *, enum devact); 
d160 1
a160 1
uberry_activate(struct device *self, enum devact act)
@


1.14
log
@remove unneeded malloc.h include.
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.13 2007/08/30 05:06:21 deraadt Exp $	*/
a95 1
	char *devinfop;
a99 4

	devinfop = usbd_devinfo_alloc(uaa->device, 0);
	printf("\n%s: %s\n", sc->sc_dev.dv_xname, devinfop);
	usbd_devinfo_free(devinfop);
@


1.13
log
@handle new pearl-style devices (which now attach their SD cards as a umass),
or ancient ancient usb/serial devices (which come up as false usb devices
when turned off); thanks to kitella for giving me a variety pack of old units
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.12 2007/08/24 01:16:36 deraadt Exp $	*/
a25 1
#include <sys/malloc.h>
@


1.12
log
@On the older devices, apparently early configuration (and doing it again
later) removes the need for forced device disconnection.  And now they do
not bounce back a few times, but go to 500mA on the 2nd connection.
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.11 2007/08/23 02:48:04 deraadt Exp $	*/
d50 4
a55 1
	{ USB_VENDOR_RIM, USB_PRODUCT_RIM_PEARL_DUAL },
d109 6
a114 2
		printf("%s: could not set configuration no\n",
		    sc->sc_dev.dv_xname);
a161 1

@


1.11
log
@"correctly" activate high-power charging on (hopefully) all devices,
based on work in barry/bcharge; tested on a few units.  still not tested
on pearl-style units... if someone has one, contact me please
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.10 2007/06/14 10:11:15 mbalmer Exp $	*/
d47 1
d104 1
a104 1
	/* Enable the device, then it cannot idle, and will charge */
d118 15
a132 1
		usb_needs_reattach(sc->sc_udev);
d136 5
a140 2
		/* Request a change to Dual mode */
		uberry_pearlmode(sc);
@


1.10
log
@Remove the definition and usage of the USB_DECLARE_DRIVER_CLASS and
USB_DECLARE_DRIVER macros.

No binary change.

ok dlg.
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.9 2007/06/12 16:26:36 mbalmer Exp $	*/
d37 1
d47 1
a47 1
#define UBERRY_CONFIG_NO		0
d50 3
a52 1
	{ USB_VENDOR_RIM, USB_PRODUCT_RIM_BLACKBERRY }
d60 3
d92 1
d97 2
d109 16
a124 1
	printf("%s: Charging enabled\n", sc->sc_dev.dv_xname);
d152 35
@


1.9
log
@Remove the definition and use of the device_ptr_t which was a struct device *.

No binary change.

ok mk.
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.8 2007/06/10 14:49:00 mbalmer Exp $	*/
d52 16
a67 1
USB_DECLARE_DRIVER(uberry);
@


1.8
log
@Remove the definition and use of the USBDEVNAME macro.

(This might look easy, but it was a big diff.  Thanks to dlg and especially jsg
for looking over it; we found at least four mistakes in the initial diff.)

ok jsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.7 2007/06/10 10:53:48 mbalmer Exp $	*/
d103 1
a103 1
uberry_activate(device_ptr_t self, enum devact act)
@


1.7
log
@Remove the definition and use of the USBDEV macro.  It only created confusion
and the address of it's argument:  USBDEV(sc->sc_dev) yields &sc->sc_dev.

No binary changes.

ok jsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.6 2007/06/06 19:25:49 mk Exp $	*/
d76 1
a76 1
	printf("\n%s: %s\n", USBDEVNAME(sc->sc_dev), devinfop);
d82 1
a82 1
		    USBDEVNAME(sc->sc_dev));
d85 1
a85 1
	printf("%s: Charging enabled\n", USBDEVNAME(sc->sc_dev));
@


1.6
log
@Mechanical removal of USBBASEDEVICE.  No binary change.

Tested by thib and myself.

ok mbalmer jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.5 2007/06/05 08:43:55 mbalmer Exp $	*/
d88 1
a88 1
	    USBDEV(sc->sc_dev));
d97 1
a97 1
	    USBDEV(sc->sc_dev));
@


1.5
log
@Remove the "Static" declaration of many functions.  It was defined to be empty
and it was not consistently used.  It was confusing as it suggested these
functions were static, which they were not.

discussed with dlg and jsg, ok jsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.4 2007/05/27 04:00:25 jsg Exp $	*/
d41 1
a41 1
	USBBASEDEVICE			sc_dev;
@


1.4
log
@Farewell USB_{ATTACH,MATCH,DETACH}* you will not be missed.
ok deraadt@@ krw@@ mbalmer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.3 2007/04/26 17:00:28 miod Exp $	*/
d48 1
a48 1
Static struct usb_devno const uberry_devices[] = {
d102 1
a102 1
Static int
@


1.3
log
@USB device lists do not need a terminating sentinel, so don't provide any;
this should prevent phantom devices from attaching axe or uberry on
some machines.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.2 2006/11/29 19:55:37 miod Exp $	*/
d54 2
a55 1
USB_MATCH(uberry)
d57 1
a57 1
	USB_MATCH_START(uberry, uaa);
d66 2
a67 1
USB_ATTACH(uberry)
d69 2
a70 1
	USB_ATTACH_START(uberry, sc, uaa);
d76 1
a76 2
	USB_ATTACH_SETUP;
	printf("%s: %s\n", USBDEVNAME(sc->sc_dev), devinfop);
d83 1
a83 1
		USB_ATTACH_ERROR_RETURN;
a88 2

	USB_ATTACH_SUCCESS_RETURN;
d91 2
a92 1
USB_DETACH(uberry)
d94 1
a94 1
	USB_DETACH_START(uberry, sc);
@


1.2
log
@Detach correctly; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uberry.c,v 1.1 2006/11/27 11:38:43 deraadt Exp $	*/
d49 1
a49 2
	{ USB_VENDOR_RIM, USB_PRODUCT_RIM_BLACKBERRY },
	{ 0, 0 }
@


1.1
log
@smallest usb driver ever: enable config on the Blackberry which prevents
usb from idling, thus it can get enough power to charge in all cases
@
text
@d1 1
a1 1
/*	$OpenBSD: if_uberry.c,v 1.12 2006/11/26 11:14:22 deraadt Exp $	*/
d94 5
@

