head	1.15;
access;
symbols
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.8
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.6
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.14.0.10
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.24
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.22
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.20
	OPENBSD_5_0:1.12.0.18
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.16
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.14
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.10
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.12
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.8
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.6
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.4
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.8.0.6
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.8
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	SMP:1.3.0.4
	UBC:1.3.0.2
	UBC_SYNC_A:1.3
	UBC_SYNC_B:1.2;
locks; strict;
comment	@ * @;


1.15
date	2015.12.16.14.50.26;	author mpi;	state Exp;
branches;
next	1.14;
commitid	Hjg9j5O0F4eVYCbh;

1.14
date	2013.11.06.14.37.31;	author pirofti;	state Exp;
branches;
next	1.13;

1.13
date	2013.04.15.09.23.02;	author mglocker;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.13.06.25.03;	author mbalmer;	state Exp;
branches;
next	1.11;

1.11
date	2007.06.12.16.26.36;	author mbalmer;	state Exp;
branches;
next	1.10;

1.10
date	2007.06.06.19.25.49;	author mk;	state Exp;
branches;
next	1.9;

1.9
date	2007.05.21.05.40.28;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.01.06.41.13;	author pascoe;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.21.07.43.41;	author dlg;	state Exp;
branches;
next	1.6;

1.6
date	2004.07.17.06.04.00;	author dlg;	state Exp;
branches;
next	1.5;

1.5
date	2004.07.08.22.20.04;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.21.00.47.42;	author krw;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.17.06.07.57;	author nate;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2002.05.07.18.29.18;	author nate;	state dead;
branches;
next	1.1;

1.1
date	2002.05.07.18.08.04;	author nate;	state Exp;
branches;
next	;

1.3.4.1
date	2003.06.07.10.39.47;	author ho;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2004.06.05.23.12.58;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Refactor umass_detach() in order to pass a size to free(9).

Based on a diff from Mathieu <naabed AT poolp DOT org>.
@
text
@/*	$OpenBSD: umassvar.h,v 1.14 2013/11/06 14:37:31 pirofti Exp $ */
/*	$NetBSD: umassvar.h,v 1.20 2003/09/08 19:31:01 mycroft Exp $	*/
/*-
 * Copyright (c) 1999 MAEKAWA Masahide <bishop@@rr.iij4u.or.jp>,
 *		      Nick Hibma <n_hibma@@freebsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *     $FreeBSD: src/sys/dev/usb/umass.c,v 1.13 2000/03/26 01:39:12 n_hibma Exp $
 */

#ifdef UMASS_DEBUG
#define DIF(m, x)	if (umassdebug & (m)) do { x ; } while (0)
#define DPRINTF(m, x)	do { if (umassdebug & (m)) printf x; } while (0)
#define UDMASS_UPPER	0x00008000	/* upper layer */
#define UDMASS_GEN	0x00010000	/* general */
#define UDMASS_SCSI	0x00020000	/* scsi */
#define UDMASS_UFI	0x00040000	/* ufi command set */
#define UDMASS_8070	0x00080000	/* 8070i command set */
#define UDMASS_USB	0x00100000	/* USB general */
#define UDMASS_BBB	0x00200000	/* Bulk-Only transfers */
#define UDMASS_CBI	0x00400000	/* CBI transfers */
#define UDMASS_ALL	0xffff0000	/* all of the above */

#define UDMASS_XFER	0x40000000	/* all transfers */
#define UDMASS_CMD	0x80000000

extern int umassdebug;
#else
#define DIF(m, x)	/* nop */
#define DPRINTF(m, x)	/* nop */
#endif

/* Generic definitions */

#define UFI_COMMAND_LENGTH 12

/* Direction for umass_*_transfer */
#define DIR_NONE	0
#define DIR_IN		1
#define DIR_OUT		2

/* Endpoints for umass */
#define	UMASS_BULKIN	0
#define	UMASS_BULKOUT	1
#define	UMASS_INTRIN	2
#define	UMASS_NEP	3

/* Bulk-Only features */

#define UR_BBB_RESET	0xff		/* Bulk-Only reset */
#define	UR_BBB_GET_MAX_LUN	0xfe

/* Command Block Wrapper */
struct umass_bbb_cbw {
	uDWord		dCBWSignature;
#define CBWSIGNATURE	0x43425355
	uDWord		dCBWTag;
	uDWord		dCBWDataTransferLength;
	uByte		bCBWFlags;
#define CBWFLAGS_OUT	0x00
#define CBWFLAGS_IN	0x80
	uByte		bCBWLUN;
	uByte		bCDBLength;
#define CBWCDBLENGTH	16
	uByte		CBWCDB[CBWCDBLENGTH];
};
#define UMASS_BBB_CBW_SIZE	31

/* Command Status Wrapper */
struct umass_bbb_csw {
	uDWord		dCSWSignature;
#define CSWSIGNATURE		0x53425355
#define CSWSIGNATURE_OLYMPUS_C1	0x55425355
	uDWord		dCSWTag;
	uDWord		dCSWDataResidue;
	uByte		bCSWStatus;
#define CSWSTATUS_GOOD	0x0
#define CSWSTATUS_FAILED 0x1
#define CSWSTATUS_PHASE	0x2
};
#define UMASS_BBB_CSW_SIZE	13

/* CBI features */

#define UR_CBI_ADSC	0x00

typedef unsigned char umass_cbi_cbl_t[16];	/* Command block */

typedef union {
	struct {
		uByte	type;
#define IDB_TYPE_CCI		0x00
		uByte	value;
#define IDB_VALUE_PASS		0x00
#define IDB_VALUE_FAIL		0x01
#define IDB_VALUE_PHASE		0x02
#define IDB_VALUE_PERSISTENT	0x03
#define IDB_VALUE_STATUS_MASK	0x03
	} common;

	struct {
		uByte	asc;
		uByte	ascq;
	} ufi;
} umass_cbi_sbl_t;

struct umass_softc;		/* see below */

typedef void (*umass_callback)(struct umass_softc *, void *, int, int);
#define STATUS_CMD_OK		0	/* everything ok */
#define STATUS_CMD_UNKNOWN	1	/* will have to fetch sense */
#define STATUS_CMD_FAILED	2	/* transfer was ok, command failed */
#define STATUS_WIRE_FAILED	3	/* couldn't even get command across */

typedef void (*umass_wire_xfer)(struct umass_softc *, int, void *, int, void *,
				int, int, u_int, umass_callback, void *);
typedef void (*umass_wire_reset)(struct umass_softc *, int);
typedef void (*umass_wire_state)(struct usbd_xfer *, void *, usbd_status);

struct umass_wire_methods {
	umass_wire_xfer		wire_xfer;
	umass_wire_reset	wire_reset;
	umass_wire_state	wire_state;
};

struct umass_scsi_softc;

/* the per device structure */
struct umass_softc {
	struct device		sc_dev;		/* base device */
	struct usbd_device	*sc_udev;	/* device */
	struct usbd_interface	*sc_iface;	/* interface */
	int			sc_ifaceno;	/* interface number */

	u_int8_t		sc_epaddr[UMASS_NEP];
	struct usbd_pipe	*sc_pipe[UMASS_NEP];
	usb_device_request_t	sc_req;

	const struct umass_wire_methods *sc_methods;

	u_int8_t		sc_wire;	/* wire protocol */
#define	UMASS_WPROTO_UNSPEC	0
#define	UMASS_WPROTO_BBB	1
#define	UMASS_WPROTO_CBI	2
#define	UMASS_WPROTO_CBI_I	3

	u_int8_t		sc_cmd;		/* command protocol */
#define	UMASS_CPROTO_UNSPEC	0
#define	UMASS_CPROTO_SCSI	1
#define	UMASS_CPROTO_ATAPI	2
#define	UMASS_CPROTO_UFI	3
#define	UMASS_CPROTO_RBC	4
#define UMASS_CPROTO_ISD_ATA	5

	u_int32_t		sc_quirks;
#define UMASS_QUIRK_WRONG_CSWSIG	0x00000001
#define UMASS_QUIRK_WRONG_CSWTAG	0x00000002

	u_int32_t		sc_busquirks;

	/* Bulk specific variables for transfers in progress */
	struct umass_bbb_cbw	cbw;	/* command block wrapper */
	struct umass_bbb_csw	csw;	/* command status wrapper*/
	/* CBI specific variables for transfers in progress */
	umass_cbi_cbl_t		cbl;	/* command block */
	umass_cbi_sbl_t		sbl;	/* status block */

	/* xfer handles
	 * Most of our operations are initiated from interrupt context, so
	 * we need to avoid using the one that is in use. We want to avoid
	 * allocating them in the interrupt context as well.
	 */
	/* indices into array below */
#define XFER_BBB_CBW		0	/* Bulk-Only */
#define XFER_BBB_DATA		1
#define XFER_BBB_DCLEAR		2
#define XFER_BBB_CSW1		3
#define XFER_BBB_CSW2		4
#define XFER_BBB_SCLEAR		5
#define XFER_BBB_RESET1		6
#define XFER_BBB_RESET2		7
#define XFER_BBB_RESET3		8

#define XFER_CBI_CB		0	/* CBI */
#define XFER_CBI_DATA		1
#define XFER_CBI_STATUS		2
#define XFER_CBI_DCLEAR		3
#define XFER_CBI_SCLEAR		4
#define XFER_CBI_RESET1		5
#define XFER_CBI_RESET2		6
#define XFER_CBI_RESET3		7

#define XFER_NR			9	/* maximum number */

	struct usbd_xfer	*transfer_xfer[XFER_NR]; /* for ctrl xfers */

	void			*data_buffer;

	int			transfer_dir;		/* data direction */
	void			*transfer_data;		/* data buffer */
	int			transfer_datalen;	/* (maximum) length */
	int			transfer_actlen;	/* actual length */
	umass_callback		transfer_cb;		/* callback */
	void			*transfer_priv;		/* for callback */
	int			transfer_status;

	int			transfer_state;
#define TSTATE_IDLE			0
#define TSTATE_BBB_COMMAND		1	/* CBW transfer */
#define TSTATE_BBB_DATA			2	/* Data transfer */
#define TSTATE_BBB_DCLEAR		3	/* clear endpt stall */
#define TSTATE_BBB_STATUS1		4	/* clear endpt stall */
#define TSTATE_BBB_SCLEAR		5	/* clear endpt stall */
#define TSTATE_BBB_STATUS2		6	/* CSW transfer */
#define TSTATE_BBB_RESET1		7	/* reset command */
#define TSTATE_BBB_RESET2		8	/* in clear stall */
#define TSTATE_BBB_RESET3		9	/* out clear stall */
#define TSTATE_CBI_COMMAND		10	/* command transfer */
#define TSTATE_CBI_DATA			11	/* data transfer */
#define TSTATE_CBI_STATUS		12	/* status transfer */
#define TSTATE_CBI_DCLEAR		13	/* clear ep stall */
#define TSTATE_CBI_SCLEAR		14	/* clear ep stall */
#define TSTATE_CBI_RESET1		15	/* reset command */
#define TSTATE_CBI_RESET2		16	/* in clear stall */
#define TSTATE_CBI_RESET3		17	/* out clear stall */
#define TSTATE_STATES			18	/* # of states above */


	int			timeout;		/* in msecs */

	u_int8_t		maxlun;			/* max lun supported */

#ifdef UMASS_DEBUG
	struct timeval tv;
#endif

	int			sc_xfer_flags;
	int			sc_refcnt;
	int			sc_sense;

	struct umass_scsi_softc	*bus;		 /* bus dependent data */

	/* For polled transfers */
	int			polling_depth;
	usbd_status		polled_xfer_status;
	struct usbd_xfer	*next_polled_xfer;
};

#define UMASS_MAX_TRANSFER_SIZE	MAXBSIZE
@


1.14
log
@Replace sc_dying in favour of usbd_is_dying() and usbd_deactivate().

Okay mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umassvar.h,v 1.13 2013/04/15 09:23:02 mglocker Exp $ */
d147 1
a147 3
struct umassbus_softc {
	struct device		*sc_child;	/* child device, for detach */
};
d262 1
a262 1
	struct umassbus_softc	*bus;		 /* bus dependent data */
@


1.13
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umassvar.h,v 1.12 2007/06/13 06:25:03 mbalmer Exp $ */
a260 1
	char			sc_dying;
@


1.12
log
@Apply some KNF after the recent removal of macros and type definitions.

No binary change.

ok ray.
@
text
@d1 1
a1 1
/*	$OpenBSD: umassvar.h,v 1.11 2007/06/12 16:26:36 mbalmer Exp $ */
d75 1
a75 1
typedef struct {
d87 1
a87 1
} umass_bbb_cbw_t;
d91 1
a91 1
typedef struct {
d101 1
a101 1
} umass_bbb_csw_t;
d139 1
a139 2
typedef void (*umass_wire_state)(usbd_xfer_handle, usbd_private_handle,
				 usbd_status);
d154 2
a155 2
	usbd_device_handle	sc_udev;	/* device */
	usbd_interface_handle	sc_iface;	/* interface */
d159 1
a159 1
	usbd_pipe_handle	sc_pipe[UMASS_NEP];
d185 2
a186 2
	umass_bbb_cbw_t		cbw;	/* command block wrapper */
	umass_bbb_csw_t		csw;	/* command status wrapper*/
d218 1
a218 1
	usbd_xfer_handle	transfer_xfer[XFER_NR]; /* for ctrl xfers */
d270 1
a270 1
	usbd_xfer_handle	next_polled_xfer;
@


1.11
log
@Remove the definition and use of the device_ptr_t which was a struct device *.

No binary change.

ok mk.
@
text
@d1 1
a1 1
/*	$OpenBSD: umassvar.h,v 1.10 2007/06/06 19:25:49 mk Exp $ */
d149 1
a149 1
	struct device *		sc_child;	/* child device, for detach */
@


1.10
log
@Mechanical removal of USBBASEDEVICE.  No binary change.

Tested by thib and myself.

ok mbalmer jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: umassvar.h,v 1.9 2007/05/21 05:40:28 jsg Exp $ */
d149 1
a149 1
	device_ptr_t		sc_child;	/* child device, for detach */
@


1.9
log
@Remove logprintf macro
@
text
@d1 1
a1 1
/*	$OpenBSD: umassvar.h,v 1.8 2005/04/01 06:41:13 pascoe Exp $ */
d154 1
a154 1
	USBBASEDEVICE		sc_dev;		/* base device */
@


1.8
log
@Add support for polled umass/SCSI transactions.  Should eliminate the panics
seen at reboot time after writing to umass devices.

ok dlg@@, testing markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umassvar.h,v 1.7 2004/07/21 07:43:41 dlg Exp $ */
d34 1
a34 1
#define DPRINTF(m, x)	do { if (umassdebug & (m)) logprintf x; } while (0)
@


1.7
log
@from netbsd, umass.c 1.100 1.113 1.115, umass_scsipi.c 1.11, umassvar.h 1.21
log message for umass 1.98, umass_scsipi.c 1.11, umassvar.h 1.21:
Fix several problems with CCI handling, and enable it: * We were never calling
the callback function when we got a UFI CCI(!). * We were passing a bogus
residual count on non-UFI CCIs. * After a REQUEST SENSE, the UFI CCI may
include the ASC/ASCQ from the sense  information -- don't consider this a
failure.

In addition, remove a horrible hack that was causing us to drop sense
information on the floor and return empty INQUIRY responses, often in the
case where there is a UNIT ATTENTION pending during the INQUIRY.  (Some drives
send the data and then fail, some don't.)

log message for umass.c 1.113:
Do not return STATUS_WIRE_FAILED in response to a CBI stall.  This is perfectly
normal, and is used to report errors.  Instead, use STATUS_CMD_FAILED, which
causes us to do a REQUEST SENSE.  Should address PR 22960.

log message for umass.c 1.115:
Do not do a CBI reset before returning STATUS_CMD_FAILED.  This causes any
sense information to be thrown away, and is therefore nonsensical.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umassvar.h,v 1.6 2004/07/17 06:04:00 dlg Exp $ */
d267 5
@


1.6
log
@from netbsd, umass.c 1.98, umassvar.h 1.20
log message:
Remove UMASS_QUIRK_NO_START_STOP and UMASS_QUIRK_NO_MAX_LUN.

We don't have UMASS_QUIRK_NO_START_STOP so I didn't have to remove it. I
consider umass_quirks.c to be too different so I hand removed references to
the removed defines. There are some useless entries in there now which will
be cleaned up after umass is merged with netbsd.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umassvar.h,v 1.5 2004/07/08 22:20:04 deraadt Exp $ */
d180 2
a181 3
#define UMASS_QUIRK_RS_NO_CLEAR_UA	0x00000002
#define UMASS_QUIRK_WRONG_CSWSIG	0x00000010
#define UMASS_QUIRK_WRONG_CSWTAG	0x00000020
d264 1
@


1.5
log
@put "do { } while (0)" wrappers on all the debug maroc functions
@
text
@d1 2
a2 2
/*	$OpenBSD: umassvar.h,v 1.4 2004/02/21 00:47:42 krw Exp $ */
/*	$NetBSD: umassvar.h,v 1.19 2003/02/22 05:18:50 tsutsui Exp $	*/
d182 1
a182 2
#define UMASS_QUIRK_NO_MAX_LUN		0x00000020
#define UMASS_QUIRK_WRONG_CSWTAG	0x00000040
@


1.4
log
@Eliminate the quirks SDEV_NOSTARTUNIT, UMASS_QUIRK_NO_START_STOP, and
UMASS_QUIRK_FORCE_SHORT_INQUIRY. Fixes a bunch of USB devices. Based
on work by Mycroft in NetBSD.

ok tdeval@@ deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: umassvar.h,v 1.3 2003/05/17 06:07:57 nate Exp $ */
d34 1
a34 1
#define DPRINTF(m, x)	if (umassdebug & (m)) logprintf x
@


1.3
log
@sync with NetBSD and add various local hacks to make things work correctly
with our scsi layer
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a180 2
#define UMASS_QUIRK_NO_START_STOP	0x00000004
#define UMASS_QUIRK_FORCE_SHORT_INQUIRY	0x00000008
@


1.3.4.1
log
@add file to SMP branch
@
text
@@


1.3.4.2
log
@Merge with the trunk
@
text
@d181 2
@


1.2
log
@Meant to commit only ulpt and committed everything.  Most things weren't ready
@
text
@d1 2
a2 1
/*	$NetBSD: umassvar.h,v 1.15 2002/02/07 13:52:55 augustss Exp $	*/
a62 2
#define MS_TO_TICKS(ms) ((ms) * hz / 1000)			      

d180 4
a183 4
#define	UMASS_QUIRK_RS_NO_CLEAR_UA	0x00000002
#define	UMASS_QUIRK_NO_START_STOP	0x00000004
#define	UMASS_QUIRK_FORCE_SHORT_INQUIRY	0x00000008
#define	UMASS_QUIRK_WRONG_CSWSIG	0x00000010
d185 1
d193 1
a193 1
	umass_cbi_cbl_t		cbl;	/* command block */ 
d211 1
a211 1
	
d230 1
a230 1
	int			transfer_actlen;	/* actual length */ 
d267 1
@


1.1
log
@Sync ulpt driver with NetBSD
@
text
@@

