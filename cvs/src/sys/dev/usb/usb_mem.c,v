head	1.28;
access;
symbols
	OPENBSD_6_1_BASE:1.28
	OPENBSD_6_0:1.27.0.10
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.27.0.4
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.27.0.6
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.27.0.2
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.26.0.4
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.25.0.6
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.2
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.23.0.8
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.6
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.4
	OPENBSD_5_0:1.23.0.2
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.22.0.2
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.21.0.10
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.6
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.21.0.8
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.4
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.2
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.20.0.4
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.20.0.2
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.16.0.10
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.12
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.8
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.6
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.2
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.4
	OPENBSD_3_6_BASE:1.16
	SMP_SYNC_A:1.15
	SMP_SYNC_B:1.15
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	UBC_SYNC_A:1.13
	OPENBSD_3_3:1.13.0.4
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.11.0.8
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.13
	UBC:1.11.0.6
	UBC_BASE:1.11
	OPENBSD_3_0:1.11.0.4
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	SMP:1.6.0.2
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5;
locks; strict;
comment	@ * @;


1.28
date	2016.11.30.10.19.18;	author mpi;	state Exp;
branches;
next	1.27;
commitid	loUvSjtnv6JBwpXz;

1.27
date	2014.10.31.15.20.01;	author mpi;	state Exp;
branches;
next	1.26;
commitid	E7RVsDbpaylSiL3C;

1.26
date	2014.07.12.18.48.53;	author tedu;	state Exp;
branches;
next	1.25;
commitid	OBNa5kfxQ2UXoiIw;

1.25
date	2013.04.15.09.23.02;	author mglocker;	state Exp;
branches;
next	1.24;

1.24
date	2013.03.28.03.58.03;	author tedu;	state Exp;
branches;
next	1.23;

1.23
date	2011.04.05.19.54.35;	author jasper;	state Exp;
branches;
next	1.22;

1.22
date	2010.09.29.20.06.38;	author kettenis;	state Exp;
branches;
next	1.21;

1.21
date	2008.06.26.05.42.19;	author ray;	state Exp;
branches;
next	1.20;

1.20
date	2007.06.15.04.05.53;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2007.06.05.08.43.56;	author mbalmer;	state Exp;
branches;
next	1.18;

1.18
date	2007.06.04.10.34.04;	author mbalmer;	state Exp;
branches;
next	1.17;

1.17
date	2007.05.21.05.40.28;	author jsg;	state Exp;
branches;
next	1.16;

1.16
date	2004.07.08.22.18.44;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.08.06.20.43.12;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.07.08.13.19.09;	author nate;	state Exp;
branches;
next	1.13;

1.13
date	2002.07.25.02.18.11;	author nate;	state Exp;
branches;
next	1.12;

1.12
date	2002.05.05.22.23.43;	author nate;	state Exp;
branches;
next	1.11;

1.11
date	2000.11.08.18.10.39;	author aaron;	state Exp;
branches
	1.11.6.1;
next	1.10;

1.10
date	2000.07.04.11.44.24;	author fgsch;	state Exp;
branches;
next	1.9;

1.9
date	2000.03.30.16.19.33;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.28.19.37.50;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	2000.03.26.08.39.46;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.11.07.21.30.19;	author fgsch;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	99.09.27.18.03.56;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	99.08.27.09.00.29;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	99.08.19.08.18.39;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	99.08.16.22.08.49;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	99.08.13.05.28.04;	author fgsch;	state Exp;
branches;
next	;

1.6.2.1
date	2001.05.14.22.26.24;	author niklas;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2003.03.28.00.38.32;	author niklas;	state Exp;
branches;
next	1.6.2.3;

1.6.2.3
date	2004.02.19.10.56.34;	author niklas;	state Exp;
branches;
next	;

1.11.6.1
date	2002.06.11.03.42.31;	author art;	state Exp;
branches;
next	1.11.6.2;

1.11.6.2
date	2002.10.29.00.33.32;	author art;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Do not overlay DMA fragment decriptors with free list handling.

This "cleverness" increase the risk of races due to caching and/or
prefetching between the HC and DMA engine.  Many of the bug reports
on bugs@@ involving memory corruptions in usb_allocmem() should be
easier to diagnose when not avoided with this change.

From Marius Strobl, ok kettenis@@
@
text
@/*	$OpenBSD: usb_mem.c,v 1.27 2014/10/31 15:20:01 mpi Exp $ */
/*	$NetBSD: usb_mem.c,v 1.26 2003/02/01 06:23:40 thorpej Exp $	*/

/*
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net) at
 * Carlstedt Research & Technology.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * USB DMA memory allocation.
 * We need to allocate a lot of small (many 8 byte, some larger)
 * memory blocks that can be used for DMA.  Using the bus_dma
 * routines directly would incur large overheads in space and time.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/malloc.h>
#include <sys/queue.h>
#include <sys/timeout.h>
#include <sys/device.h>		/* for usbdivar.h */
#include <machine/bus.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdivar.h>	/* just for struct usb_dma */
#include <dev/usb/usb_mem.h>

#ifdef USB_DEBUG
#define DPRINTF(x)	do { if (usbdebug) printf x; } while (0)
#define DPRINTFN(n,x)	do { if (usbdebug>(n)) printf x; } while (0)
extern int usbdebug;
#else
#define DPRINTF(x)
#define DPRINTFN(n,x)
#endif

#define USB_MEM_SMALL 64
#define USB_MEM_CHUNKS 64
#define USB_MEM_BLOCK (USB_MEM_SMALL * USB_MEM_CHUNKS)

struct usb_frag_dma {
	struct usb_dma_block *block;
	u_int offs;
	LIST_ENTRY(usb_frag_dma) next;
};

usbd_status	usb_block_allocmem(bus_dma_tag_t, size_t, size_t,
		    struct usb_dma_block **);
void		usb_block_freemem(struct usb_dma_block *);

LIST_HEAD(, usb_dma_block) usb_blk_freelist =
	LIST_HEAD_INITIALIZER(usb_blk_freelist);
int usb_blk_nfree = 0;
/* XXX should have different free list for different tags (for speed) */
LIST_HEAD(, usb_frag_dma) usb_frag_freelist =
	LIST_HEAD_INITIALIZER(usb_frag_freelist);

usbd_status
usb_block_allocmem(bus_dma_tag_t tag, size_t size, size_t align,
    struct usb_dma_block **dmap)
{
	int error;
        struct usb_dma_block *p;
	int s;

	DPRINTFN(5, ("usb_block_allocmem: size=%lu align=%lu\n",
		     (u_long)size, (u_long)align));

	s = splusb();
	/* First check the free list. */
	for (p = LIST_FIRST(&usb_blk_freelist); p; p = LIST_NEXT(p, next)) {
		if (p->tag == tag && p->size >= size && p->align >= align) {
			LIST_REMOVE(p, next);
			usb_blk_nfree--;
			splx(s);
			*dmap = p;
			DPRINTFN(6,("usb_block_allocmem: free list size=%lu\n",
				    (u_long)p->size));
			return (USBD_NORMAL_COMPLETION);
		}
	}
	splx(s);

#ifdef DIAGNOSTIC
	if (!curproc) {
		printf("usb_block_allocmem: in interrupt context, failed\n");
		return (USBD_NOMEM);
	}
#endif

	DPRINTFN(6, ("usb_block_allocmem: no free\n"));
	p = malloc(sizeof *p, M_USB, M_NOWAIT);
	if (p == NULL)
		return (USBD_NOMEM);

	p->tag = tag;
	p->size = size;
	p->align = align;
	error = bus_dmamem_alloc(tag, p->size, align, 0,
				 p->segs, nitems(p->segs),
				 &p->nsegs, BUS_DMA_NOWAIT);
	if (error)
		goto free0;

	error = bus_dmamem_map(tag, p->segs, p->nsegs, p->size,
			       &p->kaddr, BUS_DMA_NOWAIT|BUS_DMA_COHERENT);
	if (error)
		goto free1;

	error = bus_dmamap_create(tag, p->size, 1, p->size,
				  0, BUS_DMA_NOWAIT, &p->map);
	if (error)
		goto unmap;

	error = bus_dmamap_load(tag, p->map, p->kaddr, p->size, NULL,
				BUS_DMA_NOWAIT);
	if (error)
		goto destroy;

	*dmap = p;
	return (USBD_NORMAL_COMPLETION);

destroy:
	bus_dmamap_destroy(tag, p->map);
unmap:
	bus_dmamem_unmap(tag, p->kaddr, p->size);
free1:
	bus_dmamem_free(tag, p->segs, p->nsegs);
free0:
	free(p, M_USB, 0);
	return (USBD_NOMEM);
}

#if 0
void
usb_block_real_freemem(struct usb_dma_block *p)
{
#ifdef DIAGNOSTIC
	if (!curproc) {
		printf("usb_block_real_freemem: in interrupt context\n");
		return;
	}
#endif
	bus_dmamap_unload(p->tag, p->map);
	bus_dmamap_destroy(p->tag, p->map);
	bus_dmamem_unmap(p->tag, p->kaddr, p->size);
	bus_dmamem_free(p->tag, p->segs, p->nsegs);
	free(p, M_USB, 0);
}
#endif

/*
 * Do not free the memory unconditionally since we might be called
 * from an interrupt context and that is BAD.
 * XXX when should we really free?
 */
void
usb_block_freemem(struct usb_dma_block *p)
{
	int s;

	DPRINTFN(6, ("usb_block_freemem: size=%lu\n", (u_long)p->size));
	s = splusb();
	LIST_INSERT_HEAD(&usb_blk_freelist, p, next);
	usb_blk_nfree++;
	splx(s);
}

usbd_status
usb_allocmem(struct usbd_bus *bus, size_t size, size_t align, struct usb_dma *p)
{
	bus_dma_tag_t tag = bus->dmatag;
	usbd_status err;
	struct usb_frag_dma *f;
	struct usb_dma_block *b;
	int i;
	int s;

	/* If the request is large then just use a full block. */
	if (size > USB_MEM_SMALL || align > USB_MEM_SMALL) {
		DPRINTFN(1, ("usb_allocmem: large alloc %d\n", (int)size));
		size = (size + USB_MEM_BLOCK - 1) & ~(USB_MEM_BLOCK - 1);
		err = usb_block_allocmem(tag, size, align, &p->block);
		if (!err) {
			p->block->frags = NULL;
			p->offs = 0;
		}
		return (err);
	}

	s = splusb();
	/* Check for free fragments. */
	for (f = LIST_FIRST(&usb_frag_freelist); f; f = LIST_NEXT(f, next))
		if (f->block->tag == tag)
			break;
	if (f == NULL) {
		DPRINTFN(1, ("usb_allocmem: adding fragments\n"));
		err = usb_block_allocmem(tag, USB_MEM_BLOCK, USB_MEM_SMALL,&b);
		if (err) {
			splx(s);
			return (err);
		}
		b->frags = mallocarray(USB_MEM_CHUNKS, sizeof(*f), M_USB,
		    M_NOWAIT);
		if (b->frags == NULL) {
			splx(s);
			usb_block_freemem(b);
			return (USBD_NOMEM);
		}
		for (i = 0; i < USB_MEM_CHUNKS; i++) {
			f = &b->frags[i];
			f->block = b;
			f->offs = USB_MEM_SMALL * i;
			LIST_INSERT_HEAD(&usb_frag_freelist, f, next);
		}
		f = LIST_FIRST(&usb_frag_freelist);
	}
	p->block = f->block;
	p->offs = f->offs;
	LIST_REMOVE(f, next);
	splx(s);
	DPRINTFN(5, ("usb_allocmem: use frag=%p size=%d\n", f, (int)size));
	return (USBD_NORMAL_COMPLETION);
}

void
usb_freemem(struct usbd_bus *bus, struct usb_dma *p)
{
	struct usb_frag_dma *f;
	int s;

	if (p->block->frags == NULL) {
		DPRINTFN(1, ("usb_freemem: large free\n"));
		usb_block_freemem(p->block);
		return;
	}
	s = splusb();
	f = &p->block->frags[p->offs / USB_MEM_SMALL];
	LIST_INSERT_HEAD(&usb_frag_freelist, f, next);
	splx(s);
	DPRINTFN(5, ("usb_freemem: frag=%p block=%p\n", f, f->block));
}

void
usb_syncmem(struct usb_dma *p, bus_addr_t offset, bus_size_t len, int ops)
{
	bus_dmamap_sync(p->block->tag, p->block->map, p->offs + offset,
	    len, ops);
}
@


1.27
log
@Even in interrupt context curproc is not NULL.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usb_mem.c,v 1.26 2014/07/12 18:48:53 tedu Exp $ */
a67 1
/* This struct is overlayed on free fragments. */
d212 1
a212 1
			p->block->fullblock = 1;
d230 9
a238 3
		b->fullblock = 0;
		for (i = 0; i < USB_MEM_BLOCK; i += USB_MEM_SMALL) {
			f = (struct usb_frag_dma *)(b->kaddr + i);
d240 1
a240 1
			f->offs = i;
d259 1
a259 1
	if (p->block->fullblock) {
a263 3
	f = KERNADDR(p, 0);
	f->block = p->block;
	f->offs = p->offs;
d265 1
@


1.26
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: usb_mem.c,v 1.25 2013/04/15 09:23:02 mglocker Exp $ */
a96 7
#ifdef DIAGNOSTIC
	if (!curproc) {
		printf("usb_block_allocmem: in interrupt context, size=%lu\n",
		    (unsigned long) size);
	}
#endif

d265 1
a265 1
	DPRINTFN(5, ("usb_freemem: frag=%p\n", f));
@


1.25
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usb_mem.c,v 1.24 2013/03/28 03:58:03 tedu Exp $ */
d165 1
a165 1
	free(p, M_USB);
d183 1
a183 1
	free(p, M_USB);
@


1.24
log
@proc.h is way too much header for usb to handle.
@
text
@d1 1
a1 1
/*	$OpenBSD: usb_mem.c,v 1.23 2011/04/05 19:54:35 jasper Exp $ */
d52 1
a52 1
#include <dev/usb/usbdivar.h>	/* just for usb_dma_t */
d70 1
a70 1
	usb_dma_block_t *block;
d76 2
a77 2
					   usb_dma_block_t **);
void		usb_block_freemem(usb_dma_block_t *);
d88 1
a88 1
		   usb_dma_block_t **dmap)
d91 1
a91 1
        usb_dma_block_t *p;
d171 1
a171 1
usb_block_real_freemem(usb_dma_block_t *p)
d193 1
a193 1
usb_block_freemem(usb_dma_block_t *p)
d205 1
a205 1
usb_allocmem(usbd_bus_handle bus, size_t size, size_t align, usb_dma_t *p)
d210 1
a210 1
	usb_dma_block_t *b;
d256 1
a256 1
usb_freemem(usbd_bus_handle bus, usb_dma_t *p)
d276 1
a276 1
usb_syncmem(usb_dma_t *p, bus_addr_t offset, bus_size_t len, int ops)
@


1.23
log
@- use nitems() no binary change on amd64

"reads OK" claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usb_mem.c,v 1.22 2010/09/29 20:06:38 kettenis Exp $ */
a48 4

#ifdef DIAGNOSTIC
#include <sys/proc.h>
#endif
@


1.22
log
@Add DMA sync operations.  Fixes problems on macppc with gcc4 because
apparently it reorders stores in a bad way.  Mostly from NetBSD.

earlier diff tested by landry@@ (who noticed the problems on macppc)
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usb_mem.c,v 1.21 2008/06/26 05:42:19 ray Exp $ */
d139 1
a139 1
				 p->segs, sizeof(p->segs)/sizeof(p->segs[0]),
@


1.21
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usb_mem.c,v 1.20 2007/06/15 04:05:53 deraadt Exp $ */
d277 7
@


1.20
log
@more (*&@@#$ timeout.h fallout
@
text
@d1 1
a1 1
/*	$OpenBSD: usb_mem.c,v 1.19 2007/06/05 08:43:56 mbalmer Exp $ */
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.19
log
@Remove the "Static" declaration of many functions.  It was defined to be empty
and it was not consistently used.  It was confusing as it suggested these
functions were static, which they were not.

discussed with dlg and jsg, ok jsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: usb_mem.c,v 1.18 2007/06/04 10:34:04 mbalmer Exp $ */
d53 1
@


1.18
log
@Last part of FreeBSD/NetBSD sepcific code removal.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: usb_mem.c,v 1.17 2007/05/21 05:40:28 jsg Exp $ */
d85 1
a85 1
Static usbd_status	usb_block_allocmem(bus_dma_tag_t, size_t, size_t,
d87 1
a87 1
Static void		usb_block_freemem(usb_dma_block_t *);
d89 1
a89 1
Static LIST_HEAD(, usb_dma_block) usb_blk_freelist =
d91 1
a91 1
Static int usb_blk_nfree = 0;
d93 1
a93 1
Static LIST_HEAD(, usb_frag_dma) usb_frag_freelist =
d96 1
a96 1
Static usbd_status
d202 1
a202 1
Static void
@


1.17
log
@Remove logprintf macro
@
text
@d1 1
a1 1
/*	$OpenBSD: usb_mem.c,v 1.16 2004/07/08 22:18:44 deraadt Exp $ */
a71 6
#endif

#if defined(__NetBSD__)
MALLOC_DEFINE(M_USB, "USB", "USB misc. memory");
MALLOC_DEFINE(M_USBDEV, "USB device", "USB device driver");
MALLOC_DEFINE(M_USBHC, "USB HC", "USB host controller");
@


1.16
log
@put "do { } while (0)" wrappers on all the debug maroc functions
@
text
@d1 1
a1 1
/*	$OpenBSD: usb_mem.c,v 1.15 2003/08/06 20:43:12 millert Exp $ */
d66 2
a67 2
#define DPRINTF(x)	do { if (usbdebug) logprintf x; } while (0)
#define DPRINTFN(n,x)	do { if (usbdebug>(n)) logprintf x; } while (0)
@


1.15
log
@Fix a memleak on error in usb_block_allocmem(); Patrick Latifi
deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: usb_mem.c,v 1.14 2003/07/08 13:19:09 nate Exp $ */
d66 2
a67 2
#define DPRINTF(x)	if (usbdebug) logprintf x
#define DPRINTFN(n,x)	if (usbdebug>(n)) logprintf x
@


1.14
log
@Sync USB code with NetBSD.
This includes numerous fixes and paves the way for usb 2.0 support.
@
text
@d1 1
a1 1
/*	$OpenBSD: usb_mem.c,v 1.13 2002/07/25 02:18:11 nate Exp $ */
a145 1
	*dmap = p;
d154 1
a154 1
		return (USBD_NOMEM);
d159 1
a159 1
		goto free;
d170 2
d178 1
a178 1
free:
d180 2
@


1.13
log
@get rid of trailing whitespace
@
text
@d1 2
a2 2
/*	$OpenBSD: usb_mem.c,v 1.12 2002/05/05 22:23:43 nate Exp $ */
/*	$NetBSD: usb_mem.c,v 1.22 2001/11/13 06:24:56 lukem Exp $	*/
d68 1
a68 1
int usbdebug;
d74 6
d279 1
a279 1
	f = KERNADDR(p);
@


1.12
log
@Use correct $NetBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: usb_mem.c,v 1.11 2000/11/08 18:10:39 aaron Exp $ */
d89 1
a89 1
Static LIST_HEAD(, usb_dma_block) usb_blk_freelist = 
d104 1
a104 1
	DPRINTFN(5, ("usb_block_allocmem: size=%lu align=%lu\n", 
d151 1
a151 1
	error = bus_dmamem_map(tag, p->segs, p->nsegs, p->size, 
d161 1
a161 1
	error = bus_dmamap_load(tag, p->map, p->kaddr, p->size, NULL, 
d232 1
a232 1
	
@


1.11
log
@Sync with NetBSD. Too many changes to mention. For now I have skipped
umass.c and ukbd.c as the diffs are a bit hairier.
@
text
@d1 2
a2 2
/*	$OpenBSD: usb_mem.c,v 1.10 2000/07/04 11:44:24 fgsch Exp $ */
/*	$NetBSD: usb_mem.c,v 1.21 2000/06/01 14:29:01 augustss Exp $	*/
@


1.11.6.1
log
@Sync UBC branch to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: usb_mem.c,v 1.22 2001/11/13 06:24:56 lukem Exp $	*/
@


1.11.6.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: usb_mem.c,v 1.11.6.1 2002/06/11 03:42:31 art Exp $ */
d89 1
a89 1
Static LIST_HEAD(, usb_dma_block) usb_blk_freelist =
d104 1
a104 1
	DPRINTFN(5, ("usb_block_allocmem: size=%lu align=%lu\n",
d151 1
a151 1
	error = bus_dmamem_map(tag, p->segs, p->nsegs, p->size,
d161 1
a161 1
	error = bus_dmamap_load(tag, p->map, p->kaddr, p->size, NULL,
d232 1
a232 1

@


1.10
log
@sync with NetBSD... well almost. someone w/ the hw should check umass.
@
text
@d1 2
a2 2
/*	$OpenBSD: usb_mem.c,v 1.9 2000/03/30 16:19:33 aaron Exp $ */
/*	$NetBSD: usb_mem.c,v 1.19 2000/03/27 12:33:58 augustss Exp $	*/
d85 3
a87 3
Static usbd_status	usb_block_allocmem __P((bus_dma_tag_t, size_t, size_t,
						usb_dma_block_t **));
Static void		usb_block_freemem  __P((usb_dma_block_t *));
d97 2
a98 5
usb_block_allocmem(tag, size, align, dmap)
	bus_dma_tag_t tag;
	size_t size;
	size_t align;
        usb_dma_block_t **dmap;
d178 1
a178 2
usb_block_real_freemem(p)
        usb_dma_block_t *p;
d200 1
a200 2
usb_block_freemem(p)
        usb_dma_block_t *p;
d212 1
a212 5
usb_allocmem(bus, size, align, p)
	usbd_bus_handle bus;
	size_t size;
	size_t align;
        usb_dma_t *p;
d263 1
a263 3
usb_freemem(bus, p)
	usbd_bus_handle bus;
        usb_dma_t *p;
@


1.9
log
@Sync with NetBSD. USB Ethernet drivers should work now.
@
text
@d1 1
a1 1
/*	$OpenBSD: usb_mem.c,v 1.8 2000/03/28 19:37:50 aaron Exp $ */
d9 1
a9 1
 * by Lennart Augustsson (augustss@@carlstedt.se) at
@


1.8
log
@Much cleaner sync with NetBSD. Some #if defined() magic has been sent in the
form of a diff to augustss@@netbsd.org so that future syncs will be very easy.
This commit also adds support for ADMtek AN986 "Pegasus" based USB Ethernet,
CATC USB-EL1210A based USB Ethernet, and USB Printers (all untested).
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: usb_mem.c,v 1.18 2000/03/27 08:27:03 augustss Exp $	*/
d85 1
a85 1
static usbd_status	usb_block_allocmem __P((bus_dma_tag_t, size_t, size_t,
d87 1
a87 1
static void		usb_block_freemem  __P((usb_dma_block_t *));
d89 1
a89 1
static LIST_HEAD(, usb_dma_block) usb_blk_freelist = 
d91 1
a91 1
int usb_blk_nfree = 0;
d93 1
a93 1
static LIST_HEAD(, usb_frag_dma) usb_frag_freelist =
d96 1
a96 1
static usbd_status
d203 1
a203 1
static void
@


1.7
log
@Sync with NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: usb_mem.c,v 1.6 1999/11/07 21:30:19 fgsch Exp $	*/
/*	$NetBSD: usb_mem.c,v 1.17 1999/12/18 22:47:11 augustss Exp $	*/
d89 1
a89 1
LIST_HEAD(, usb_dma_block) usb_blk_freelist = 
d91 1
d93 1
a93 1
LIST_HEAD(, usb_frag_dma) usb_frag_freelist =
d107 1
a107 1
	DPRINTFN(5, ("usb_block_allocmem: size=%lu align=%lu\n",
d122 1
d212 1
d249 1
a249 1
		err = usb_block_allocmem(tag, USB_MEM_BLOCK, USB_MEM_SMALL, &b);
@


1.6
log
@sync with NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: usb_mem.c,v 1.15 1999/10/12 11:24:22 augustss Exp $	*/
d106 2
a107 1
	DPRINTFN(5, ("usb_block_allocmem: size=%d align=%d\n", size, align));
d123 2
a124 2
			DPRINTFN(6,("usb_block_allocmem: free list size=%d\n",
				    p->size));
d139 1
a139 1
	if (p == 0)
d166 1
a166 1
	return 0;
d207 1
a207 1
	DPRINTFN(6, ("usb_block_freemem: size=%d\n", p->size));
d221 1
a221 1
	usbd_status r;
d231 2
a232 2
		r = usb_block_allocmem(tag, size, align, &p->block);
		if (r == USBD_NORMAL_COMPLETION) {
d236 1
a236 1
		return (r);
d244 1
a244 1
	if (!f) {
d246 2
a247 2
		r = usb_block_allocmem(tag, USB_MEM_BLOCK, USB_MEM_SMALL, &b);
		if (r != USBD_NORMAL_COMPLETION) {
d249 1
a249 1
			return (r);
@


1.6.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/*	$OpenBSD: usb_mem.c,v 1.11 2000/11/08 18:10:39 aaron Exp $ */
/*	$NetBSD: usb_mem.c,v 1.21 2000/06/01 14:29:01 augustss Exp $	*/
d9 1
a9 1
 * by Lennart Augustsson (lennart@@augustsson.net) at
d85 3
a87 3
Static usbd_status	usb_block_allocmem(bus_dma_tag_t, size_t, size_t,
					   usb_dma_block_t **);
Static void		usb_block_freemem(usb_dma_block_t *);
d89 1
a89 1
Static LIST_HEAD(, usb_dma_block) usb_blk_freelist = 
a90 1
Static int usb_blk_nfree = 0;
d92 1
a92 1
Static LIST_HEAD(, usb_frag_dma) usb_frag_freelist =
d95 6
a100 3
Static usbd_status
usb_block_allocmem(bus_dma_tag_t tag, size_t size, size_t align,
		   usb_dma_block_t **dmap)
d106 1
a106 2
	DPRINTFN(5, ("usb_block_allocmem: size=%lu align=%lu\n", 
		     (u_long)size, (u_long)align));
a119 1
			usb_blk_nfree--;
d122 2
a123 2
			DPRINTFN(6,("usb_block_allocmem: free list size=%lu\n",
				    (u_long)p->size));
d138 1
a138 1
	if (p == NULL)
d165 1
a165 1
	return (USBD_NORMAL_COMPLETION);
d178 2
a179 1
usb_block_real_freemem(usb_dma_block_t *p)
d200 3
a202 2
Static void
usb_block_freemem(usb_dma_block_t *p)
d206 1
a206 1
	DPRINTFN(6, ("usb_block_freemem: size=%lu\n", (u_long)p->size));
a208 1
	usb_blk_nfree++;
d213 5
a217 1
usb_allocmem(usbd_bus_handle bus, size_t size, size_t align, usb_dma_t *p)
d220 1
a220 1
	usbd_status err;
d230 2
a231 2
		err = usb_block_allocmem(tag, size, align, &p->block);
		if (!err) {
d235 1
a235 1
		return (err);
d243 1
a243 1
	if (f == NULL) {
d245 2
a246 2
		err = usb_block_allocmem(tag, USB_MEM_BLOCK, USB_MEM_SMALL,&b);
		if (err) {
d248 1
a248 1
			return (err);
d268 3
a270 1
usb_freemem(usbd_bus_handle bus, usb_dma_t *p)
@


1.6.2.2
log
@Sync the SMP branch with 3.3
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: usb_mem.c,v 1.22 2001/11/13 06:24:56 lukem Exp $	*/
d89 1
a89 1
Static LIST_HEAD(, usb_dma_block) usb_blk_freelist =
d104 1
a104 1
	DPRINTFN(5, ("usb_block_allocmem: size=%lu align=%lu\n",
d151 1
a151 1
	error = bus_dmamem_map(tag, p->segs, p->nsegs, p->size,
d161 1
a161 1
	error = bus_dmamap_load(tag, p->map, p->kaddr, p->size, NULL,
d232 1
a232 1

@


1.6.2.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d2 1
a2 1
/*	$NetBSD: usb_mem.c,v 1.26 2003/02/01 06:23:40 thorpej Exp $	*/
d68 1
a68 1
extern int usbdebug;
a73 6
#if defined(__NetBSD__)
MALLOC_DEFINE(M_USB, "USB", "USB misc. memory");
MALLOC_DEFINE(M_USBDEV, "USB device", "USB device driver");
MALLOC_DEFINE(M_USBHC, "USB HC", "USB host controller");
#endif

d140 1
d149 1
a149 1
		goto free0;
d154 1
a154 1
		goto free1;
a164 2

	*dmap = p;
d171 1
a171 1
free1:
a172 2
free0:
	free(p, M_USB);
d273 1
a273 1
	f = KERNADDR(p, 0);
@


1.5
log
@Sync with NetBSD.
@
text
@d2 1
a2 1
/*	$NetBSD: usb_mem.c,v 1.14 1999/09/13 19:18:17 augustss Exp $	*/
d85 3
a87 3
usbd_status	usb_block_allocmem __P((bus_dma_tag_t, size_t, size_t,
					usb_dma_block_t **));
void		usb_block_freemem  __P((usb_dma_block_t *));
d95 1
a95 1
usbd_status
d200 1
a200 1
void
@


1.4
log
@Sync with NetBSD;
Make sure not to call tsleep() from suspend/resume routine.
Move more of the transfer completion processing to HC independent code.
Fix some problems with transfer abort & timeout.
Merge the soft_{td,qh} with the real {td,qh}.  This saves time and space.
@
text
@d1 2
a2 2
/*	$OpenBSD: usb_mem.c,v 1.3 1999/08/19 08:18:39 fgsch Exp $	*/
/*	$NetBSD: usb_mem.c,v 1.9 1999/08/16 20:19:55 augustss Exp $	*/
d53 2
a59 2
#include <machine/bus.h>

d62 1
d85 2
a86 5
usbd_status	usb_block_allocmem 
	__P((bus_dma_tag_t, size_t, size_t, usb_dma_block_t **));
#if 0
void		usb_block_real_freemem  __P((usb_dma_block_t *));
#endif
d213 2
a214 2
usb_allocmem(tag, size, align, p)
	bus_dma_tag_t tag;
d219 1
d268 2
a269 2
usb_freemem(tag, p)
	bus_dma_tag_t tag;
@


1.3
log
@Sync with NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d67 1
a67 1
extern int usbdebug;
d86 1
d88 1
d91 1
a91 1
LIST_HEAD(, usb_block_dma) usb_blk_freelist = 
d93 1
a93 1
/* XXX should have different free list for different tags */
d112 2
a113 2
		printf("usb_block_allocmem: in interrupt context, size=%u\n",
		       size);
d178 1
d195 1
@


1.2
log
@Sync with NetBSD. Mostly FreeBSD related changes.
Diffs sent to augustsson.
@
text
@d1 2
a2 2
/*	$OpenBSD: usb_mem.c,v 1.1 1999/08/13 05:28:04 fgsch Exp $	*/
/*	$NetBSD: usb_mem.c,v 1.7 1999/08/02 19:49:50 augustss Exp $	*/
d110 2
a111 2
		printf("usb_block_allocmem: in interrupt context\n");
		return (USBD_NOMEM);
d122 2
a123 2
			DPRINTFN(6, ("usb_block_allocmem: free list size=%d\n",
				     p->size));
d128 7
@


1.1
log
@From NetBSD; USB support.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d65 2
a66 2
#define DPRINTF(x)	if (usbdebug) printf x
#define DPRINTFN(n,x)	if (usbdebug>(n)) printf x
@

