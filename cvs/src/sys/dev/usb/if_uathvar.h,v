head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.14
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.16
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.10
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.12
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.4
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.8
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.22
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.20
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.18
	OPENBSD_5_0:1.6.0.16
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.14
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2013.04.15.09.23.01;	author mglocker;	state Exp;
branches;
next	1.6;

1.6
date	2007.09.11.19.53.58;	author damien;	state Exp;
branches;
next	1.5;

1.5
date	2007.06.06.19.25.49;	author mk;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.03.16.09.21;	author damien;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.20.19.47.17;	author damien;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.16.19.56.44;	author damien;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.16.13.21.24;	author damien;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@/*	$OpenBSD: if_uathvar.h,v 1.6 2007/09/11 19:53:58 damien Exp $	*/

/*-
 * Copyright (c) 2006
 *	Damien Bergamini <damien.bergamini@@free.fr>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define UATH_TX_DATA_LIST_COUNT	8	/* 16 */
#define UATH_TX_CMD_LIST_COUNT	8	/* 30 */

/* XXX ehci will panic on abort_pipe if set to anything > 1 */
#define UATH_RX_DATA_LIST_COUNT	1	/* 128 */
#define UATH_RX_CMD_LIST_COUNT	1	/* 30 */

#define UATH_DATA_TIMEOUT	10000
#define UATH_CMD_TIMEOUT	1000

struct uath_rx_radiotap_header {
	struct ieee80211_radiotap_header wr_ihdr;
	uint8_t		wr_flags;
	uint16_t	wr_chan_freq;
	uint16_t	wr_chan_flags;
	int8_t		wr_dbm_antsignal;
} __packed;

#define UATH_RX_RADIOTAP_PRESENT					\
	((1 << IEEE80211_RADIOTAP_FLAGS) |				\
	 (1 << IEEE80211_RADIOTAP_CHANNEL) |				\
	 (1 << IEEE80211_RADIOTAP_DBM_ANTSIGNAL))

struct uath_tx_radiotap_header {
	struct ieee80211_radiotap_header wt_ihdr;
	uint8_t		wt_flags;
	uint16_t	wt_chan_freq;
	uint16_t	wt_chan_flags;
} __packed;

#define UATH_TX_RADIOTAP_PRESENT					\
	((1 << IEEE80211_RADIOTAP_FLAGS) |				\
	 (1 << IEEE80211_RADIOTAP_CHANNEL))

struct uath_tx_data {
	struct uath_softc	*sc;
	struct usbd_xfer	*xfer;
	uint8_t			*buf;
	struct ieee80211_node	*ni;
};

struct uath_rx_data {
	struct uath_softc	*sc;
	struct usbd_xfer	*xfer;
	uint8_t			*buf;
	struct mbuf		*m;
};

struct uath_tx_cmd {
	struct uath_softc	*sc;
	struct usbd_xfer	*xfer;
	uint8_t			*buf;
	void			*odata;
};

struct uath_rx_cmd {
	struct uath_softc	*sc;
	struct usbd_xfer	*xfer;
	uint8_t			*buf;
};

struct uath_wme_settings {
	uint8_t		aifsn;
	uint8_t		logcwmin;
	uint8_t		logcwmax;
	uint16_t	txop;
#define UATH_TXOP_TO_US(txop)	((txop) << 5)

	uint8_t		acm;
};

/* condvars */
#define UATH_COND_INIT(sc)	((caddr_t)sc + 1)

/* flags for sending firmware commands */
#define UATH_CMD_FLAG_ASYNC	(1 << 0)
#define UATH_CMD_FLAG_READ	(1 << 1)
#define UATH_CMD_FLAG_MAGIC	(1 << 2)

struct uath_softc {
	struct device			sc_dev;
	struct ieee80211com		sc_ic;
	int				(*sc_newstate)(struct ieee80211com *,
					    enum ieee80211_state, int);

	struct uath_tx_data		tx_data[UATH_TX_DATA_LIST_COUNT];
	struct uath_rx_data		rx_data[UATH_RX_DATA_LIST_COUNT];

	struct uath_tx_cmd		tx_cmd[UATH_TX_CMD_LIST_COUNT];
	struct uath_rx_cmd		rx_cmd[UATH_RX_CMD_LIST_COUNT];

	int				sc_flags;

	int				data_idx;
	int				cmd_idx;
	int				tx_queued;

	struct usbd_device		*sc_udev;
	struct usbd_device		*sc_uhub;
	int				sc_port;

	struct usbd_interface		*sc_iface;

	struct usbd_pipe		*data_tx_pipe;
	struct usbd_pipe		*data_rx_pipe;
	struct usbd_pipe		*cmd_tx_pipe;
	struct usbd_pipe		*cmd_rx_pipe;

	enum ieee80211_state		sc_state;
	int				sc_arg;
	struct usb_task			sc_task;

	struct timeout			scan_to;
	struct timeout			stat_to;

	int				sc_tx_timer;

	int				rxbufsz;

#if NBPFILTER > 0
	caddr_t				sc_drvbpf;

	union {
		struct	uath_rx_radiotap_header th;
		uint8_t	pad[64];
	}				sc_rxtapu;
#define sc_rxtap			sc_rxtapu.th
	int				sc_rxtap_len;

	union {
		struct	uath_tx_radiotap_header th;
		uint8_t	pad[64];
	}				sc_txtapu;
#define sc_txtap			sc_txtapu.th
	int				sc_txtap_len;
#endif
};
@


1.6
log
@undo rev 1.10 "implement a zero-copy RX data path".
working with a fixed number of Rx buffers doesn't work well.
fixes problems with blocked incoming traffic.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_uathvar.h,v 1.5 2007/06/06 19:25:49 mk Exp $	*/
d56 1
a56 1
	usbd_xfer_handle	xfer;
d63 1
a63 1
	usbd_xfer_handle	xfer;
d70 1
a70 1
	usbd_xfer_handle	xfer;
d77 1
a77 1
	usbd_xfer_handle	xfer;
d117 2
a118 2
	usbd_device_handle		sc_udev;
	usbd_device_handle		sc_uhub;
d121 1
a121 1
	usbd_interface_handle		sc_iface;
d123 4
a126 4
	usbd_pipe_handle		data_tx_pipe;
	usbd_pipe_handle		data_rx_pipe;
	usbd_pipe_handle		cmd_tx_pipe;
	usbd_pipe_handle		cmd_rx_pipe;
@


1.5
log
@Mechanical removal of USBBASEDEVICE.  No binary change.

Tested by thib and myself.

ok mbalmer jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: if_uathvar.h,v 1.4 2006/12/03 16:09:21 damien Exp $	*/
a26 2
#define UATH_RX_DATA_POOL_COUNT	(UATH_RX_DATA_LIST_COUNT + 24)

d62 4
a65 4
	struct uath_softc		*sc;
	usbd_xfer_handle		xfer;
	uint8_t				*buf;
	SLIST_ENTRY(uath_rx_data)	next;
a92 1
#define UATH_COND_NOREF(sc)	((caddr_t)sc + 2)
d106 1
a106 1
	struct uath_rx_data		rx_data[UATH_RX_DATA_POOL_COUNT];
a110 2
	SLIST_HEAD(, uath_rx_data)	rx_freelist;

a111 2
	int				sc_dying;
	int				sc_refcnt;
@


1.4
log
@The device doesn't always detach gracefully from the bus after a firmware
upload. We thus force a port reset and a re-exploration on the parent hub
after firmware upload.

In uath_newstate(), if we're called from a process context, we don't need
to schedule a USB task. This fixes a problem in uath_stop(): when moving
to the S_INIT state, the task was scheduled after the device was reset.

Don't abort the RX firmware command pipe in uath_stop(), otherwise we will
never receive commands ACKs from the firmware anymore.  We now survive to
an ifconfig down up.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_uathvar.h,v 1.3 2006/09/20 19:47:17 damien Exp $	*/
d103 1
a103 1
	USBBASEDEVICE			sc_dev;
@


1.3
log
@implement a zero-copy RX data path.
instead of copying the xfer buffer's content into a mbuf cluster, attach
the xfer buffer as a mbuf external storage and pass it to the net80211
layer as is.
maintain a reference count on the softc structure and wait in detach()
until all references have been released by the network layer.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_uathvar.h,v 1.2 2006/09/16 19:56:44 damien Exp $	*/
d125 3
@


1.2
log
@add new uath(4) ids and fix existing ones.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_uathvar.h,v 1.1 2006/09/16 13:21:24 damien Exp $	*/
d27 2
d64 4
a67 4
	struct uath_softc	*sc;
	usbd_xfer_handle	xfer;
	uint8_t			*buf;
	struct mbuf		*m;
d95 1
d103 7
a109 4
	USBBASEDEVICE		sc_dev;
	struct ieee80211com	sc_ic;
	int			(*sc_newstate)(struct ieee80211com *,
				    enum ieee80211_state, int);
d111 2
a112 2
	struct uath_tx_data	tx_data[UATH_TX_DATA_LIST_COUNT];
	struct uath_rx_data	rx_data[UATH_RX_DATA_LIST_COUNT];
d114 1
a114 2
	struct uath_tx_cmd	tx_cmd[UATH_TX_CMD_LIST_COUNT];
	struct uath_rx_cmd	rx_cmd[UATH_RX_CMD_LIST_COUNT];
d116 3
a118 1
	int			sc_flags;
d120 3
a122 3
	int			data_idx;
	int			cmd_idx;
	int			tx_queued;
d124 2
a125 2
	usbd_device_handle	sc_udev;
	usbd_interface_handle	sc_iface;
d127 4
a130 4
	usbd_pipe_handle	data_tx_pipe;
	usbd_pipe_handle	data_rx_pipe;
	usbd_pipe_handle	cmd_tx_pipe;
	usbd_pipe_handle	cmd_rx_pipe;
d132 3
a134 3
	enum ieee80211_state	sc_state;
	int			sc_arg;
	struct usb_task		sc_task;
d136 2
a137 2
	struct timeout		scan_to;
	struct timeout		stat_to;
d139 1
a139 1
	int			sc_tx_timer;
d141 1
a141 1
	int			rxbufsz;
d144 1
a144 1
	caddr_t			sc_drvbpf;
d149 3
a151 3
	}			sc_rxtapu;
#define sc_rxtap		sc_rxtapu.th
	int			sc_rxtap_len;
d156 3
a158 3
	}			sc_txtapu;
#define sc_txtap		sc_txtapu.th
	int			sc_txtap_len;
@


1.1
log
@Initial import of uath(4), a driver for Atheros USB2.0 AR5005UG/AR5005UX
chipsets.  Based on a black-box analysis of the Windows binary driver.
Requires a firmware that is not freely redistributable (see man uath).
The driver handles both pre- and post-firmware devices.

Still a bit experimental but Tx/Rx works great in BSS mode (on i386).
No 802.11a, IBSS, or HostAP modes yet but there's more to come.

Great thanks to jsg@@ for digging the USB IDs out of the Windows driver.

Committed over a D-Link DWL-G132.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a111 2
#define UATH_FLAG_PRE_FIRMWARE	(1 << 0)
#define UATH_FLAG_DUAL_BAND_RF	(1 << 1)
@

