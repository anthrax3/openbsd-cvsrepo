head	1.42;
access;
symbols
	OPENBSD_6_1:1.42.0.2
	OPENBSD_6_1_BASE:1.42
	OPENBSD_6_0:1.41.0.14
	OPENBSD_6_0_BASE:1.41
	OPENBSD_5_9:1.41.0.8
	OPENBSD_5_9_BASE:1.41
	OPENBSD_5_8:1.41.0.10
	OPENBSD_5_8_BASE:1.41
	OPENBSD_5_7:1.41.0.2
	OPENBSD_5_7_BASE:1.41
	OPENBSD_5_6:1.41.0.6
	OPENBSD_5_6_BASE:1.41
	OPENBSD_5_5:1.41.0.4
	OPENBSD_5_5_BASE:1.41
	OPENBSD_5_4:1.40.0.2
	OPENBSD_5_4_BASE:1.40
	OPENBSD_5_3:1.39.0.4
	OPENBSD_5_3_BASE:1.39
	OPENBSD_5_2:1.39.0.2
	OPENBSD_5_2_BASE:1.39
	OPENBSD_5_1_BASE:1.38
	OPENBSD_5_1:1.38.0.4
	OPENBSD_5_0:1.38.0.2
	OPENBSD_5_0_BASE:1.38
	OPENBSD_4_9:1.37.0.2
	OPENBSD_4_9_BASE:1.37
	OPENBSD_4_8:1.36.0.2
	OPENBSD_4_8_BASE:1.36
	OPENBSD_4_7:1.35.0.2
	OPENBSD_4_7_BASE:1.35
	OPENBSD_4_6:1.34.0.6
	OPENBSD_4_6_BASE:1.34
	OPENBSD_4_5:1.34.0.2
	OPENBSD_4_5_BASE:1.34
	OPENBSD_4_4:1.32.0.2
	OPENBSD_4_4_BASE:1.32
	OPENBSD_4_3:1.27.0.4
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.27.0.2
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.26.0.2
	OPENBSD_4_1_BASE:1.26
	OPENBSD_4_0:1.25.0.4
	OPENBSD_4_0_BASE:1.25
	OPENBSD_3_9:1.22.0.4
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.22.0.2
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.15.0.2
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.4
	OPENBSD_3_6_BASE:1.15
	SMP_SYNC_A:1.14
	SMP_SYNC_B:1.14
	OPENBSD_3_5:1.14.0.8
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.6
	OPENBSD_3_4_BASE:1.14
	UBC_SYNC_A:1.14
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.14
	UBC:1.7.0.6
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.4
	OPENBSD_3_0_BASE:1.7
	SMP:1.7.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.42
date	2016.08.31.11.08.37;	author jca;	state Exp;
branches;
next	1.41;
commitid	7iAjd6bUiyg6OFjq;

1.41
date	2013.11.20.17.28.00;	author miod;	state Exp;
branches;
next	1.40;

1.40
date	2013.04.14.19.34.11;	author miod;	state Exp;
branches;
next	1.39;

1.39
date	2012.04.03.18.19.20;	author miod;	state Exp;
branches;
next	1.38;

1.38
date	2011.04.05.19.12.34;	author miod;	state Exp;
branches;
next	1.37;

1.37
date	2010.08.28.16.40.32;	author miod;	state Exp;
branches;
next	1.36;

1.36
date	2010.07.31.16.13.28;	author miod;	state Exp;
branches;
next	1.35;

1.35
date	2009.12.07.19.23.17;	author oga;	state Exp;
branches;
next	1.34;

1.34
date	2009.01.11.16.55.07;	author miod;	state Exp;
branches;
next	1.33;

1.33
date	2008.08.09.16.31.23;	author miod;	state Exp;
branches;
next	1.32;

1.32
date	2008.07.30.15.53.37;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2008.06.26.05.42.18;	author ray;	state Exp;
branches;
next	1.30;

1.30
date	2008.05.19.18.09.57;	author miod;	state Exp;
branches;
next	1.29;

1.29
date	2008.03.21.17.12.43;	author miod;	state Exp;
branches;
next	1.28;

1.28
date	2008.03.21.17.10.46;	author miod;	state Exp;
branches;
next	1.27;

1.27
date	2007.06.17.07.53.11;	author mbalmer;	state Exp;
branches;
next	1.26;

1.26
date	2006.12.05.21.28.42;	author otto;	state Exp;
branches;
next	1.25;

1.25
date	2006.07.20.16.55.28;	author mickey;	state Exp;
branches;
next	1.24;

1.24
date	2006.07.20.10.46.02;	author mickey;	state Exp;
branches;
next	1.23;

1.23
date	2006.05.29.20.25.30;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2005.05.23.21.33.43;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2005.05.19.17.50.46;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2005.05.19.10.41.05;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2005.05.12.16.21.48;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2005.05.12.09.28.37;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2005.05.09.05.09.23;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2005.04.14.01.04.25;	author mickey;	state Exp;
branches;
next	1.15;

1.15
date	2004.07.26.14.07.50;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2002.08.26.20.48.12;	author mickey;	state Exp;
branches;
next	1.13;

1.13
date	2002.07.29.03.04.16;	author nate;	state Exp;
branches;
next	1.12;

1.12
date	2002.07.25.02.18.10;	author nate;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.07.18.29.18;	author nate;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.07.18.08.04;	author nate;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.05.21.52.16;	author nate;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.12.15.16.33;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.03.02.20.33;	author aaron;	state Exp;
branches
	1.7.2.1
	1.7.6.1;
next	1.6;

1.6
date	2001.03.07.20.42.38;	author maja;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.01.03.43.12;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.11.19.14.06;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.04.01.26.07;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.08.18.10.38;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.06.22.46.01;	author rahnds;	state Exp;
branches;
next	;

1.7.2.1
date	2001.05.14.22.26.22;	author niklas;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2001.07.04.10.43.56;	author niklas;	state Exp;
branches;
next	1.7.2.3;

1.7.2.3
date	2002.03.28.15.09.10;	author niklas;	state Exp;
branches;
next	1.7.2.4;

1.7.2.4
date	2003.03.28.00.38.32;	author niklas;	state Exp;
branches;
next	;

1.7.6.1
date	2002.06.11.03.42.30;	author art;	state Exp;
branches;
next	1.7.6.2;

1.7.6.2
date	2002.10.29.00.33.32;	author art;	state Exp;
branches;
next	;


desc
@@


1.42
log
@regen
@
text
@/*	$OpenBSD$	*/

/*
 * THIS FILE IS AUTOMAGICALLY GENERATED.  DO NOT EDIT.
 *
 * generated by:
 *	OpenBSD: makemap.awk,v 1.14 2013/11/20 17:27:32 miod Exp 
 * generated from:
 */
/*	OpenBSD: wskbdmap_mfii.c,v 1.44 2016/08/31 11:05:48 jca Exp  */
/*	$NetBSD: wskbdmap_mfii.c,v 1.15 2000/05/19 16:40:04 drochner Exp $	*/

/*
 * PLEASE DO NOT FORGET TO REGEN
 *	sys/dev/usb/ukbdmap.c
 * AFTER ANY CHANGES TO THIS FILE!
 */

/*-
 * Copyright (c) 1997 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Juergen Hannken-Illjes.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <dev/wscons/wsksymdef.h>
#include <dev/wscons/wsksymvar.h>

#define KC(n) KS_KEYCODE(n)

static const keysym_t ukbd_keydesc_us[] = {
/*  pos      command		normal		shifted */
    KC(4),	KS_a,
    KC(5),	KS_b,
    KC(6),	KS_c,
    KC(7),	KS_d,
    KC(8),	KS_e,
    KC(9),	KS_f,
    KC(10),	KS_g,
    KC(11),	KS_h,
    KC(12),	KS_i,
    KC(13),	KS_j,
    KC(14),	KS_k,
    KC(15),	KS_l,
    KC(16),	KS_m,
    KC(17),	KS_n,
    KC(18),	KS_o,
    KC(19),	KS_p,
    KC(20),	KS_q,
    KC(21),	KS_r,
    KC(22),	KS_s,
    KC(23),	KS_t,
    KC(24),	KS_u,
    KC(25),	KS_v,
    KC(26),	KS_w,
    KC(27),	KS_x,
    KC(28),	KS_y,
    KC(29),	KS_z,
    KC(30),	KS_1,		KS_exclam,
    KC(31),	KS_2,		KS_at,
    KC(32),	KS_3,		KS_numbersign,
    KC(33),	KS_4,		KS_dollar,
    KC(34),	KS_5,		KS_percent,
    KC(35),	KS_6,		KS_asciicircum,
    KC(36),	KS_7,		KS_ampersand,
    KC(37),	KS_8,		KS_asterisk,
    KC(38),	KS_9,		KS_parenleft,
    KC(39),	KS_0,		KS_parenright,
    KC(40),	KS_Return,
    KC(41),	KS_Cmd_Debugger,KS_Escape,
    KC(42),	KS_Cmd_ResetEmul,KS_Delete,
    KC(43),	KS_Tab,
    KC(44),	KS_space,
    KC(45),	KS_minus,	KS_underscore,
    KC(46),	KS_equal,	KS_plus,
    KC(47),	KS_bracketleft,	KS_braceleft,
    KC(48),	KS_bracketright,KS_braceright,
    KC(49),	KS_backslash,	KS_bar,
    KC(50),	KS_backslash,	KS_bar,
    KC(51),	KS_semicolon,	KS_colon,
    KC(52),	KS_apostrophe,	KS_quotedbl,
    KC(53),	KS_grave,	KS_asciitilde,
    KC(54),	KS_comma,	KS_less,
    KC(55),	KS_period,	KS_greater,
    KC(56),	KS_slash,	KS_question,
    KC(57),	KS_Caps_Lock,
    KC(58),	KS_Cmd_Screen0,	KS_f1,
    KC(59),	KS_Cmd_Screen1,	KS_f2,
    KC(60),	KS_Cmd_Screen2,	KS_f3,
    KC(61),	KS_Cmd_Screen3,	KS_f4,
    KC(62),	KS_Cmd_Screen4,	KS_f5,
    KC(63),	KS_Cmd_Screen5,	KS_f6,
    KC(64),	KS_Cmd_Screen6,	KS_f7,
    KC(65),	KS_Cmd_Screen7,	KS_f8,
    KC(66),	KS_Cmd_Screen8,	KS_f9,
    KC(67),	KS_Cmd_Screen9,	KS_f10,
    KC(68),	KS_Cmd_Screen10,KS_f11,
    KC(69),	KS_Cmd_Screen11,KS_f12,
    KC(70),	KS_Print_Screen,
    KC(71),	KS_Hold_Screen,
    KC(72),	KS_Pause,	/*Break*/
    KC(73),	KS_Insert,
    KC(74),	KS_Home,
    KC(75),	KS_Cmd_ScrollBack,KS_Prior,
    KC(76),	KS_Cmd_KbdReset,KS_KP_Delete,
    KC(77),	KS_End,
    KC(78),	KS_Cmd_ScrollFwd,KS_Next,
    KC(79),	KS_Right,
    KC(80),	KS_Left,
    KC(81),	KS_Down,
    KC(82),	KS_Up,
    KC(83),	KS_Num_Lock,
    KC(84),	KS_KP_Divide,
    KC(85),	KS_KP_Multiply,
    KC(86),	KS_KP_Subtract,
    KC(87),	KS_KP_Add,
    KC(88),	KS_KP_Enter,
    KC(89),	KS_KP_End,	KS_KP_1,
    KC(90),	KS_KP_Down,	KS_KP_2,
    KC(91),	KS_KP_Next,	KS_KP_3,
    KC(92),	KS_KP_Left,	KS_KP_4,
    KC(93),	KS_KP_Begin,	KS_KP_5,
    KC(94),	KS_KP_Right,	KS_KP_6,
    KC(95),	KS_KP_Home,	KS_KP_7,
    KC(96),	KS_KP_Up,	KS_KP_8,
    KC(97),	KS_KP_Prior,	KS_KP_9,
    KC(98),	KS_KP_Insert,	KS_KP_0,
    KC(99),	KS_KP_Delete,	KS_KP_Decimal,
    KC(101),	KS_Menu,
    KC(104),	KS_f13,
    KC(105),	KS_f14,
    KC(106),	KS_f15,
    KC(107),	KS_f16,
    KC(108),	KS_f17,
    KC(109),	KS_f18,
    KC(110),	KS_f19,
    KC(111),	KS_f20,
    KC(112),	KS_f21,
    KC(113),	KS_f22,
    KC(114),	KS_f23,
    KC(115),	KS_f24,
    KC(116),	KS_Open,
    KC(117),	KS_Help,
    KC(118),	KS_Props,
    KC(119),	KS_Front,
    KC(120),	KS_Cmd,
    KC(121),	KS_Again,
    KC(122),	KS_Undo,
    KC(123),	KS_Cut,
    KC(124),	KS_Copy,
    KC(125),	KS_Paste,
    KC(126),	KS_Find,
    KC(127),	KS_AudioMute,
    KC(128),	KS_AudioRaise,
    KC(129),	KS_AudioLower,
    KC(224),	KS_Cmd1,	KS_Control_L,
    KC(225),	KS_Shift_L,
    KC(226),	KS_Cmd2,	KS_Alt_L,
    KC(227),	KS_Meta_L,
    KC(228),	KS_Cmd1,	KS_Control_R,
    KC(229),	KS_Shift_R,
    KC(230),	KS_Cmd2,	KS_Alt_R,	KS_Multi_key,
    KC(231),	KS_Meta_R,
};

#if !defined(WSKBD_NO_INTL_LAYOUTS)

static const keysym_t ukbd_keydesc_de[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(16),	KS_m,		KS_M,		KS_mu,
    KC(20),	KS_q,		KS_Q,		KS_at,
    KC(28),	KS_z,
    KC(29),	KS_y,
    KC(31),	KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(32),	KS_3,		KS_section,	KS_threesuperior,
    KC(35),	KS_6,		KS_ampersand,
    KC(36),	KS_7,		KS_slash,	KS_braceleft,
    KC(37),	KS_8,		KS_parenleft,	KS_bracketleft,
    KC(38),	KS_9,		KS_parenright,	KS_bracketright,
    KC(39),	KS_0,		KS_equal,	KS_braceright,
    KC(45),	KS_ssharp,	KS_question,	KS_backslash,
    KC(46),	KS_dead_acute,	KS_dead_grave,
    KC(47),	KS_udiaeresis,
    KC(48),	KS_plus,	KS_asterisk,	KS_dead_tilde,
    KC(49),	KS_numbersign,	KS_apostrophe,
    KC(50),	KS_numbersign,	KS_apostrophe,
    KC(51),	KS_odiaeresis,
    KC(52),	KS_adiaeresis,
    KC(53),	KS_dead_circumflex,KS_dead_abovering,
    KC(54),	KS_comma,	KS_semicolon,
    KC(55),	KS_period,	KS_colon,
    KC(56),	KS_minus,	KS_underscore,
    KC(100),	KS_less,	KS_greater,	KS_bar,		KS_brokenbar,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_de_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(46),	KS_apostrophe,	KS_grave,
    KC(48),	KS_plus,	KS_asterisk,	KS_asciitilde,
    KC(53),	KS_asciicircum,	KS_degree,
};

static const keysym_t ukbd_keydesc_dk[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(31),	KS_2,		KS_quotedbl,	KS_at,
    KC(32),	KS_3,		KS_numbersign,	KS_sterling,
    KC(33),	KS_4,		KS_currency,	KS_dollar,
    KC(35),	KS_6,		KS_ampersand,
    KC(36),	KS_7,		KS_slash,	KS_braceleft,
    KC(37),	KS_8,		KS_parenleft,	KS_bracketleft,
    KC(38),	KS_9,		KS_parenright,	KS_bracketright,
    KC(39),	KS_0,		KS_equal,	KS_braceright,
    KC(45),	KS_plus,	KS_question,
    KC(46),	KS_dead_acute,	KS_dead_grave,	KS_bar,
    KC(47),	KS_aring,
    KC(48),	KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(49),	KS_apostrophe,	KS_asterisk,
    KC(50),	KS_apostrophe,	KS_asterisk,
    KC(51),	KS_ae,
    KC(52),	KS_oslash,
    KC(53),	KS_onehalf,	KS_paragraph,
    KC(54),	KS_comma,	KS_semicolon,
    KC(55),	KS_period,	KS_colon,
    KC(56),	KS_minus,	KS_underscore,
    KC(100),	KS_less,	KS_greater,	KS_backslash,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_dk_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(46),	KS_apostrophe,	KS_grave,	KS_bar,
    KC(48),	KS_diaeresis,	KS_asciicircum,	KS_asciitilde,
};

static const keysym_t ukbd_keydesc_sv[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(45),	KS_plus,	KS_question,	KS_backslash,
    KC(48),	KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(51),	KS_odiaeresis,
    KC(52),	KS_adiaeresis,
    KC(53),	KS_section,	KS_onehalf,
    KC(100),	KS_less,	KS_greater,	KS_bar,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_sv_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(46),	KS_apostrophe,	KS_grave,	KS_bar,
    KC(48),	KS_diaeresis,	KS_asciicircum,	KS_asciitilde,
};

static const keysym_t ukbd_keydesc_no[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(46),	KS_backslash,	KS_dead_grave,	KS_dead_acute,
    KC(48),	KS_dead_diaeresis,KS_dead_circumflex,KS_dead_tilde,
    KC(51),	KS_oslash,
    KC(52),	KS_ae,
    KC(53),	KS_bar,		KS_paragraph,
    KC(100),	KS_less,	KS_greater,
};

static const keysym_t ukbd_keydesc_no_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(46),	KS_backslash,	KS_grave,	KS_acute,
    KC(48),	KS_diaeresis,	KS_asciicircum,	KS_asciitilde,
};

static const keysym_t ukbd_keydesc_fr[] = {
/*  pos	     normal		shifted		altgr		shift-altgr */
    KC(4),	KS_q,
    KC(16),	KS_comma,	KS_question,
    KC(20),	KS_a,
    KC(26),	KS_z,
    KC(29),	KS_w,
    KC(30),	KS_ampersand,	KS_1,
    KC(31),	KS_eacute,	KS_2,		KS_asciitilde,
    KC(32),	KS_quotedbl,	KS_3,		KS_numbersign,
    KC(33),	KS_apostrophe,	KS_4,		KS_braceleft,
    KC(34),	KS_parenleft,	KS_5,		KS_bracketleft,
    KC(35),	KS_minus,	KS_6,		KS_bar,
    KC(36),	KS_egrave,	KS_7,		KS_grave,
    KC(37),	KS_underscore,	KS_8,		KS_backslash,
    KC(38),	KS_ccedilla,	KS_9,		KS_asciicircum,
    KC(39),	KS_agrave,	KS_0,		KS_at,
    KC(45),	KS_parenright,	KS_degree,	KS_bracketright,
    KC(46),	KS_equal,	KS_plus,	KS_braceright,
    KC(47),	KS_dead_circumflex,KS_dead_diaeresis,
    KC(48),	KS_dollar,	KS_sterling,	KS_currency,
    KC(49),	KS_asterisk,	KS_mu,
    KC(50),	KS_asterisk,	KS_mu,
    KC(51),	KS_m,
    KC(52),	KS_ugrave,	KS_percent,
    KC(53),	KS_twosuperior,
    KC(54),	KS_semicolon,	KS_period,
    KC(55),	KS_colon,	KS_slash,
    KC(56),	KS_exclam,	KS_section,
    KC(100),	KS_less,	KS_greater,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_fr_apple[] = {
    KC(5),	KS_b,		KS_B,		KS_ssharp,
    KC(8),	KS_e,		KS_E,		KS_ecircumflex,	KS_Ecircumflex,
    KC(11),	KS_h,		KS_H,		KS_Igrave,	KS_Icircumflex,
    KC(12),	KS_i,		KS_I,		KS_icircumflex,	KS_idiaeresis,
    KC(13),	KS_j,		KS_J,		KS_Idiaeresis,	KS_Iacute,
    KC(14),	KS_k,		KS_K,		KS_Egrave,	KS_Ediaeresis,
    KC(15),	KS_l,		KS_L,		KS_voidSymbol,	KS_bar,
    KC(16),	KS_comma,	KS_question,	KS_voidSymbol,	KS_questiondown,
    KC(17),	KS_n,		KS_N,		KS_asciitilde,
    KC(20),	KS_a,		KS_A,		KS_ae,		KS_AE,
    KC(21),	KS_r,		KS_R,		KS_registered,	KS_comma,
    KC(22),	KS_s,		KS_S,		KS_Ograve,
    KC(26),	KS_z,		KS_Z,		KS_Acircumflex,	KS_Aring,
    KC(28),	KS_y,		KS_Y,		KS_Uacute,
    KC(31),	KS_eacute,	KS_2,		KS_ediaeresis,
    KC(32),	KS_quotedbl,	KS_3,
    KC(33),	KS_apostrophe,	KS_4,
    KC(34),	KS_parenleft,	KS_5,		KS_braceleft,	KS_bracketleft,
    KC(35),	KS_section,	KS_6,
    KC(36),	KS_egrave,	KS_7,		KS_guillemotleft,
						KS_guillemotright,
    KC(37),	KS_exclam,	KS_8,
    KC(38),	KS_ccedilla,	KS_9,		KS_Ccedilla,	KS_Aacute,
    KC(37),	KS_exclam,	KS_8,		KS_exclamdown,	KS_Ucircumflex,
    KC(39),	KS_agrave,	KS_0,		KS_oslash,	KS_Ooblique,
    KC(45),	KS_parenright,	KS_degree,	KS_braceright,	KS_bracketright,
    KC(46),	KS_minus,	KS_underscore,
    KC(47),	KS_dead_circumflex, KS_dead_diaeresis,
						KS_ocircumflex,	KS_Ocircumflex,
    KC(48),	KS_dollar,	KS_asterisk,	KS_cent,	KS_yen,
    KC(50),	KS_grave,	KS_sterling,	KS_at,		KS_numbersign,
    KC(51),	KS_m,		KS_M,		KS_mu,		KS_Oacute,
    KC(52),	KS_ugrave,	KS_percent,	KS_Ugrave,
    KC(53),	KS_at,		KS_numbersign,
    KC(55),	KS_colon,	KS_slash,	KS_voidSymbol,	KS_backslash,
    KC(56),	KS_equal,	KS_plus,
    KC(103),	KS_KP_Equal,
    KC(231),	KS_Mode_switch,	KS_Multi_key,
};

/*
 * fr-dvorak-be'po layout, simplified map, per http://www.clavier-dvorak.org/
 * (the complete map is still a moving target)
 */
static const keysym_t ukbd_keydesc_fr_dvorak_bepo[] = {
						/* oe ligature */
						/* euro currency */
    KC(4),	KS_a,		KS_A,		KS_ae,		KS_AE,
    KC(5),	KS_k,		KS_K,		KS_asciitilde,
    KC(6),	KS_x,		KS_X,		KS_braceright,
    KC(7),	KS_i,		KS_I,		KS_dead_diaeresis,
    KC(8),	KS_p,		KS_P,		KS_ampersand,
    KC(9),	KS_e,		KS_E,
    KC(10),	KS_comma,	KS_semicolon,
    KC(11),	KS_c,
    KC(12),	KS_d,
    KC(13),	KS_t,
    KC(14),	KS_s,
    KC(15),	KS_r,
    KC(16),	KS_q,		KS_Q,
    KC(17),	KS_apostrophe,	KS_question,
    KC(18),	KS_l,
    KC(19),	KS_j,
    KC(20),	KS_b,		KS_B,		KS_bar,
    KC(21),	KS_o,		KS_O,
    KC(22),	KS_u,		KS_U,		KS_ugrave,	KS_Ugrave,
    KC(23),	KS_egrave,	KS_Egrave,	KS_dead_grave,
    KC(24),	KS_v,
    KC(25),	KS_period,	KS_colon,	/*ellipsis*/
    KC(26),	KS_eacute,	KS_Eacute,	KS_dead_acute,
    KC(27),	KS_y,		KS_Y,		KS_braceleft,
    KC(28),	KS_dead_circumflex,KS_exclam,
    KC(29),	KS_agrave,	KS_Agrave,	KS_backslash,
    KC(30),	KS_quotedbl,	KS_1,		KS_hyphen,
    KC(31),	KS_guillemotleft,KS_2,		KS_less,
    KC(32),	KS_guillemotright,KS_3,		KS_greater,
    KC(33),	KS_parenleft,	KS_4,		KS_bracketleft,
    KC(34),	KS_parenright,	KS_5,		KS_bracketright,
    KC(35),	KS_at,		KS_6,
    KC(36),	KS_plus,	KS_7,
    KC(37),	KS_minus,	KS_8,
    KC(38),	KS_slash,	KS_9,
    KC(39),	KS_asterisk,	KS_0,
    KC(44),	KS_space,	KS_nobreakspace,KS_underscore,
    KC(45),	KS_equal,	KS_asciicircum,
    KC(46),	KS_percent,	KS_grave,
    KC(47),	KS_z,
    KC(48),	KS_w,
    KC(49),	KS_ccedilla,	KS_Ccedilla,
    KC(50),	KS_ccedilla,	KS_Ccedilla,
    KC(51),	KS_n,
    KC(52),	KS_m,
    KC(53),	KS_dollar,	KS_numbersign,
    KC(54),	KS_g,		KS_G,		KS_mu,
    KC(55),	KS_h,
    KC(56),	KS_f,
    KC(100),	KS_egrave,	KS_Egrave,	KS_slash,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_it[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(31),	KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(32),	KS_3,		KS_sterling,	KS_threesuperior,
    KC(34),	KS_5,		KS_percent,
    KC(35),	KS_6,		KS_ampersand,
    KC(36),	KS_7,		KS_slash,
    KC(37),	KS_8,		KS_parenleft,
    KC(38),	KS_9,		KS_parenright,
    KC(39),	KS_0,		KS_equal,
    KC(45),	KS_apostrophe,	KS_question,
    KC(46),	KS_igrave,	KS_asciicircum,
    KC(47),	KS_egrave,	KS_eacute,	KS_braceleft,	KS_bracketleft,
    KC(48),	KS_plus,	KS_asterisk,	KS_braceright,	KS_bracketright,
    KC(49),	KS_ugrave,	KS_section,
    KC(50),	KS_ugrave,	KS_section,
    KC(51),	KS_ograve,	KS_Ccedilla,	KS_at,
    KC(52),	KS_agrave,	KS_degree,	KS_numbersign,
    KC(53),	KS_backslash,	KS_bar,
    KC(54),	KS_comma,	KS_semicolon,
    KC(55),	KS_period,	KS_colon,
    KC(56),	KS_minus,	KS_underscore,
    KC(100),	KS_less,	KS_greater,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_uk[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(30),	KS_1,		KS_exclam,	KS_plusminus,	KS_exclamdown,
    KC(31),	KS_2,		KS_quotedbl,	KS_twosuperior,	KS_cent,
    KC(32),	KS_3,		KS_sterling,	KS_threesuperior,
    KC(33),	KS_4,		KS_dollar,	KS_acute,	KS_currency,
    KC(34),	KS_5,		KS_percent,	KS_mu,		KS_yen,
    KC(35),	KS_6,		KS_asciicircum,	KS_paragraph,
    KC(36),	KS_7,		KS_ampersand,	KS_periodcentered,KS_brokenbar,
    KC(37),	KS_8,		KS_asterisk,	KS_cedilla,	KS_ordfeminine,
    KC(38),	KS_9,		KS_parenleft,	KS_onesuperior,	KS_diaeresis,
    KC(39),	KS_0,		KS_parenright,	KS_masculine,	KS_copyright,
    KC(45),	KS_minus,	KS_underscore,	KS_hyphen,	KS_ssharp,
    KC(46),	KS_equal,	KS_plus,	KS_onehalf,	KS_guillemotleft,
    KC(49),	KS_numbersign,	KS_asciitilde,	KS_sterling,	KS_thorn,
    KC(50),	KS_numbersign,	KS_asciitilde,	KS_sterling,	KS_thorn,
    KC(52),	KS_apostrophe,	KS_at,		KS_section,	KS_Agrave,
    KC(53),	KS_grave,	KS_grave,	KS_agrave,	KS_agrave,
    KC(100),	KS_backslash,	KS_bar,		KS_Udiaeresis,
};

static const keysym_t ukbd_keydesc_jp[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(31),	KS_2,		KS_quotedbl,
    KC(35),	KS_6,		KS_ampersand,
    KC(36),	KS_7,		KS_apostrophe,
    KC(37),	KS_8,		KS_parenleft,
    KC(38),	KS_9,		KS_parenright,
    KC(39),	KS_0,
    KC(45),	KS_minus,	KS_equal,
    KC(46),	KS_asciicircum,	KS_asciitilde,
    KC(47),	KS_at,		KS_grave,
    KC(48),	KS_bracketleft,	KS_braceleft,
    KC(49),	KS_bracketright,KS_braceright,
    KC(50),	KS_bracketright,KS_braceright,
    KC(51),	KS_semicolon,	KS_plus,
    KC(52),	KS_colon,	KS_asterisk,
    KC(53),	KS_Zenkaku_Hankaku,/*replacegrave/tilde*/
    KC(135),	KS_backslash,	KS_underscore,
    KC(136),	KS_Hiragana_Katakana,
    KC(137),	KS_backslash,	KS_bar,
    KC(138),	KS_Henkan,
    KC(139),	KS_Muhenkan,
};

static const keysym_t ukbd_keydesc_es[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(30),	KS_1,		KS_exclam,	KS_bar,
    KC(31),	KS_2,		KS_quotedbl,	KS_at,
    KC(32),	KS_3,		KS_periodcentered,KS_numbersign,
    KC(33),	KS_4,		KS_dollar,	KS_asciitilde,
    KC(35),	KS_6,		KS_ampersand,
    KC(36),	KS_7,		KS_slash,
    KC(37),	KS_8,		KS_parenleft,
    KC(38),	KS_9,		KS_parenright,
    KC(39),	KS_0,		KS_equal,
    KC(45),	KS_apostrophe,	KS_question,
    KC(46),	KS_exclamdown,	KS_questiondown,
    KC(47),	KS_dead_grave,	KS_dead_circumflex,KS_bracketleft,
    KC(48),	KS_plus,	KS_asterisk,	KS_bracketright,
    KC(49),	KS_ccedilla,	KS_Ccedilla,	KS_braceright,
    KC(50),	KS_ccedilla,	KS_Ccedilla,	KS_braceright,
    KC(51),	KS_ntilde,
    KC(52),	KS_dead_acute,	KS_dead_diaeresis,KS_braceleft,
    KC(53),	KS_degree,	KS_ordfeminine,	KS_backslash,
    KC(54),	KS_comma,	KS_semicolon,
    KC(55),	KS_period,	KS_colon,
    KC(56),	KS_minus,	KS_underscore,
    KC(100),	KS_less,	KS_greater,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_lt[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(8),	KS_e,		KS_E,		KS_currency,
    KC(9),	KS_L7_scaron,	KS_L7_Scaron,
    KC(20),	KS_L7_aogonek,	KS_L7_Aogonek,
    KC(26),	KS_L7_zcaron,	KS_L7_Zcaron,
    KC(27),	KS_L7_umacron,	KS_L7_Umacron,
    KC(30),	KS_exclam,	KS_1,		KS_at,
    KC(31),	KS_minus,	KS_2,		KS_underscore,
    KC(32),	KS_slash,	KS_3,		KS_numbersign,
    KC(33),	KS_semicolon,	KS_4,		KS_dollar,
    KC(34),	KS_colon,	KS_5,		KS_paragraph,
    KC(35),	KS_comma,	KS_6,		KS_asciicircum,
    KC(36),	KS_period,	KS_7,		KS_ampersand,
    KC(37),	KS_equal,	KS_8,		KS_asterisk,
    KC(38),	KS_bracketleft,	KS_9,		KS_parenleft,
    KC(39),	KS_bracketright,KS_0,		KS_parenright,
    KC(44),	KS_space,	KS_space,	KS_nobreakspace,
    KC(45),	KS_question,	KS_plus,	KS_apostrophe,
    KC(46),	KS_x,		KS_X,		KS_percent,
    KC(47),	KS_L7_iogonek,	KS_L7_Iogonek,	KS_braceleft,
    KC(48),	KS_w,		KS_W,		KS_braceright,
    KC(49),	KS_q,		KS_Q,		KS_bar,
    KC(50),	KS_q,		KS_Q,		KS_bar,
    KC(51),	KS_L7_uogonek,	KS_L7_Uogonek,
    KC(52),	KS_L7_edot,	KS_L7_Edot,	KS_quotedbl,
    KC(53),	KS_grave,	KS_asciitilde,
    KC(54),	KS_L7_ccaron,	KS_L7_Ccaron,	KS_L7_dbllow9quot,
    KC(55),	KS_f,		KS_F,		KS_L7_leftdblquot,
    KC(56),	KS_L7_eogonek,	KS_L7_Eogonek,	KS_backslash,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_be[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(4),	KS_q,
    KC(16),	KS_comma,	KS_question,
    KC(20),	KS_a,
    KC(26),	KS_z,
    KC(29),	KS_w,
    KC(30),	KS_ampersand,	KS_1,		KS_bar,
    KC(31),	KS_eacute,	KS_2,		KS_at,
    KC(32),	KS_quotedbl,	KS_3,		KS_numbersign,
    KC(33),	KS_apostrophe,	KS_4,
    KC(34),	KS_parenleft,	KS_5,
    KC(35),	KS_section,	KS_6,		KS_asciicircum,
    KC(36),	KS_egrave,	KS_7,
    KC(37),	KS_exclam,	KS_8,
    KC(38),	KS_ccedilla,	KS_9,		KS_braceleft,
    KC(39),	KS_agrave,	KS_0,		KS_braceright,
    KC(45),	KS_parenright,	KS_degree,
    KC(46),	KS_minus,	KS_underscore,
    KC(47),	KS_dead_circumflex,KS_dead_diaeresis,KS_bracketleft,
    KC(48),	KS_dollar,	KS_asterisk,	KS_bracketright,
    KC(49),	KS_mu,		KS_sterling,	KS_grave,
    KC(50),	KS_mu,		KS_sterling,	KS_grave,
    KC(51),	KS_m,
    KC(52),	KS_ugrave,	KS_percent,	KS_acute,
    KC(53),	KS_twosuperior,	KS_threesuperior,
    KC(54),	KS_semicolon,	KS_period,
    KC(55),	KS_colon,	KS_slash,
    KC(56),	KS_equal,	KS_plus,	KS_asciitilde,
    KC(100),	KS_less,	KS_greater,	KS_backslash,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};


static const keysym_t ukbd_keydesc_us_dvorak[] = {
/*  pos      command		normal		shifted */
    KC(5),	KS_x,
    KC(6),	KS_j,
    KC(7),	KS_e,
    KC(8),	KS_period,	KS_greater,
    KC(9),	KS_u,
    KC(10),	KS_i,
    KC(11),	KS_d,
    KC(12),	KS_c,
    KC(13),	KS_h,
    KC(14),	KS_t,
    KC(15),	KS_n,
    KC(17),	KS_b,
    KC(18),	KS_r,
    KC(19),	KS_l,
    KC(20),	KS_apostrophe,	KS_quotedbl,
    KC(21),	KS_p,
    KC(22),	KS_o,
    KC(23),	KS_y,
    KC(24),	KS_g,
    KC(25),	KS_k,
    KC(26),	KS_comma,	KS_less,
    KC(27),	KS_q,
    KC(28),	KS_f,
    KC(29),	KS_semicolon,	KS_colon,
    KC(45),	KS_bracketleft,	KS_braceleft,
    KC(46),	KS_bracketright,KS_braceright,
    KC(47),	KS_slash,	KS_question,
    KC(48),	KS_equal,	KS_plus,
    KC(51),	KS_s,
    KC(52),	KS_minus,	KS_underscore,
    KC(54),	KS_w,
    KC(55),	KS_v,
    KC(56),	KS_z,
};

static const keysym_t ukbd_keydesc_swapctrlcaps[] = {
/*  pos      command		normal		shifted */
    KC(57),	KS_Cmd1,	KS_Control_L,
    KC(224),	KS_Caps_Lock,
};

static const keysym_t ukbd_keydesc_iopener[] = {
/*  pos      command		normal		shifted */
    KC(58),	KS_Cmd_Debugger,KS_Escape,
    KC(59),	KS_Cmd_Screen0,	KS_f1,
    KC(60),	KS_Cmd_Screen1,	KS_f2,
    KC(61),	KS_Cmd_Screen2,	KS_f3,
    KC(62),	KS_Cmd_Screen3,	KS_f4,
    KC(63),	KS_Cmd_Screen4,	KS_f5,
    KC(64),	KS_Cmd_Screen5,	KS_f6,
    KC(65),	KS_Cmd_Screen6,	KS_f7,
    KC(66),	KS_Cmd_Screen7,	KS_f8,
    KC(67),	KS_Cmd_Screen8,	KS_f9,
    KC(68),	KS_Cmd_Screen9,	KS_f10,
    KC(69),	KS_f11,
};

static const keysym_t ukbd_keydesc_ru[] = {
/*  pos      normal		shifted		altgr			shift-altgr */
    KC(4),	KS_a,		KS_A,		KS_Cyrillic_ef,	KS_Cyrillic_EF,
    KC(5),	KS_b,		KS_B,		KS_Cyrillic_i,	KS_Cyrillic_I,
    KC(6),	KS_c,		KS_C,		KS_Cyrillic_es,	KS_Cyrillic_ES,
    KC(7),	KS_d,		KS_D,		KS_Cyrillic_ve,	KS_Cyrillic_VE,
    KC(8),	KS_e,		KS_E,		KS_Cyrillic_u,	KS_Cyrillic_U,
    KC(9),	KS_f,		KS_F,		KS_Cyrillic_a,	KS_Cyrillic_A,
    KC(10),	KS_g,		KS_G,		KS_Cyrillic_pe,	KS_Cyrillic_PE,
    KC(11),	KS_h,		KS_H,		KS_Cyrillic_er,	KS_Cyrillic_ER,
    KC(12),	KS_i,		KS_I,		KS_Cyrillic_sha,KS_Cyrillic_SHA,
    KC(13),	KS_j,		KS_J,		KS_Cyrillic_o,	KS_Cyrillic_O,
    KC(14),	KS_k,		KS_K,		KS_Cyrillic_el,	KS_Cyrillic_EL,
    KC(15),	KS_l,		KS_L,		KS_Cyrillic_de,	KS_Cyrillic_DE,
    KC(16),	KS_m,		KS_M,		KS_Cyrillic_ssighn,KS_Cyrillic_SSIGHN,
    KC(17),	KS_n,		KS_N,		KS_Cyrillic_te,	KS_Cyrillic_TE,
    KC(18),	KS_o,		KS_O,		KS_Cyrillic_scha,KS_Cyrillic_SCHA,
    KC(19),	KS_p,		KS_P,		KS_Cyrillic_ze,	KS_Cyrillic_ZE,
    KC(20),	KS_q,		KS_Q,		KS_Cyrillic_ishort,KS_Cyrillic_ISHORT,
    KC(21),	KS_r,		KS_R,		KS_Cyrillic_ka,	KS_Cyrillic_KA,
    KC(22),	KS_s,		KS_S,		KS_Cyrillic_yeru,KS_Cyrillic_YERU,
    KC(23),	KS_t,		KS_T,		KS_Cyrillic_ie,	KS_Cyrillic_IE,
    KC(24),	KS_u,		KS_U,		KS_Cyrillic_ge,	KS_Cyrillic_GE,
    KC(25),	KS_v,		KS_V,		KS_Cyrillic_em,	KS_Cyrillic_EM,
    KC(26),	KS_w,		KS_W,		KS_Cyrillic_tse,KS_Cyrillic_TSE,
    KC(27),	KS_x,		KS_X,		KS_Cyrillic_che,KS_Cyrillic_CHE,
    KC(28),	KS_y,		KS_Y,		KS_Cyrillic_en,	KS_Cyrillic_EN,
    KC(29),	KS_z,		KS_Z,		KS_Cyrillic_ya,	KS_Cyrillic_YA,
    KC(35),	KS_6,		KS_asciicircum,	KS_6,		KS_comma,
    KC(36),	KS_7,		KS_ampersand,	KS_7,		KS_period,
    KC(47),	KS_bracketleft,	KS_braceleft,	KS_Cyrillic_ha,	KS_Cyrillic_HA,
    KC(48),	KS_bracketright,KS_braceright,	KS_Cyrillic_hsighn,KS_Cyrillic_HSIGHN,
    KC(51),	KS_semicolon,	KS_colon,	KS_Cyrillic_zhe,KS_Cyrillic_ZHE,
    KC(52),	KS_apostrophe,	KS_quotedbl,	KS_Cyrillic_e,	KS_Cyrillic_E,
    KC(54),	KS_comma,	KS_less,	KS_Cyrillic_be,	KS_Cyrillic_BE,
    KC(55),	KS_period,	KS_greater,	KS_Cyrillic_yu,	KS_Cyrillic_YU,
    KC(56),	KS_slash,	KS_question,	KS_Cyrillic_yo,	KS_Cyrillic_YO,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_ua[] = {
/*  pos      normal		shifted		altgr			shift-altgr */
    KC(4),	KS_a,		KS_A,		KS_Cyrillic_ef,	KS_Cyrillic_EF,
    KC(5),	KS_b,		KS_B,		KS_Cyrillic_i,	KS_Cyrillic_I,
    KC(6),	KS_c,		KS_C,		KS_Cyrillic_es,	KS_Cyrillic_ES,
    KC(7),	KS_d,		KS_D,		KS_Cyrillic_ve,	KS_Cyrillic_VE,
    KC(8),	KS_e,		KS_E,		KS_Cyrillic_u,	KS_Cyrillic_U,
    KC(9),	KS_f,		KS_F,		KS_Cyrillic_a,	KS_Cyrillic_A,
    KC(10),	KS_g,		KS_G,		KS_Cyrillic_pe,	KS_Cyrillic_PE,
    KC(11),	KS_h,		KS_H,		KS_Cyrillic_er,	KS_Cyrillic_ER,
    KC(12),	KS_i,		KS_I,		KS_Cyrillic_sha,KS_Cyrillic_SHA,
    KC(13),	KS_j,		KS_J,		KS_Cyrillic_o,	KS_Cyrillic_O,
    KC(14),	KS_k,		KS_K,		KS_Cyrillic_el,	KS_Cyrillic_EL,
    KC(15),	KS_l,		KS_L,		KS_Cyrillic_de,	KS_Cyrillic_DE,
    KC(16),	KS_m,		KS_M,		KS_Cyrillic_ssighn,KS_Cyrillic_SSIGHN,
    KC(17),	KS_n,		KS_N,		KS_Cyrillic_te,	KS_Cyrillic_TE,
    KC(18),	KS_o,		KS_O,		KS_Cyrillic_scha,KS_Cyrillic_SCHA,
    KC(19),	KS_p,		KS_P,		KS_Cyrillic_ze,	KS_Cyrillic_ZE,
    KC(20),	KS_q,		KS_Q,		KS_Cyrillic_ishort,KS_Cyrillic_ISHORT,
    KC(21),	KS_r,		KS_R,		KS_Cyrillic_ka,	KS_Cyrillic_KA,
    KC(22),	KS_s,		KS_S,		KS_Cyrillic_yeru,KS_Cyrillic_YERU,
    KC(23),	KS_t,		KS_T,		KS_Cyrillic_ie,	KS_Cyrillic_IE,
    KC(24),	KS_u,		KS_U,		KS_Cyrillic_ge,	KS_Cyrillic_GE,
    KC(25),	KS_v,		KS_V,		KS_Cyrillic_em,	KS_Cyrillic_EM,
    KC(26),	KS_w,		KS_W,		KS_Cyrillic_tse,KS_Cyrillic_TSE,
    KC(27),	KS_x,		KS_X,		KS_Cyrillic_che,KS_Cyrillic_CHE,
    KC(28),	KS_y,		KS_Y,		KS_Cyrillic_en,	KS_Cyrillic_EN,
    KC(29),	KS_z,		KS_Z,		KS_Cyrillic_ya,	KS_Cyrillic_YA,
    KC(35),	KS_6,		KS_asciicircum,	KS_6,		KS_comma,
    KC(36),	KS_7,		KS_ampersand,	KS_7,		KS_period,
    KC(45),	KS_minus,	KS_underscore,	KS_Cyrillic_iukr,KS_Cyrillic_IUKR,
    KC(46),	KS_equal,	KS_plus,	KS_Cyrillic_yeukr,KS_Cyrillic_YEUKR,
    KC(47),	KS_bracketleft,	KS_braceleft,	KS_Cyrillic_ha,	KS_Cyrillic_HA,
    KC(48),	KS_bracketright,KS_braceright,	KS_Cyrillic_hsighn,KS_Cyrillic_HSIGHN,
    KC(49),	KS_backslash,	KS_bar,		KS_Cyrillic_yi,	KS_Cyrillic_YI,
    KC(50),	KS_backslash,	KS_bar,		KS_Cyrillic_yi,	KS_Cyrillic_YI,
    KC(51),	KS_semicolon,	KS_colon,	KS_Cyrillic_zhe,KS_Cyrillic_ZHE,
    KC(52),	KS_apostrophe,	KS_quotedbl,	KS_Cyrillic_e,	KS_Cyrillic_E,
    KC(53),	KS_grave,	KS_asciitilde,	KS_Cyrillic_gheukr,KS_Cyrillic_GHEUKR,
    KC(54),	KS_comma,	KS_less,	KS_Cyrillic_be,	KS_Cyrillic_BE,
    KC(55),	KS_period,	KS_greater,	KS_Cyrillic_yu,	KS_Cyrillic_YU,
    KC(56),	KS_slash,	KS_question,	KS_Cyrillic_yo,	KS_Cyrillic_YO,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_sg[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(8),	KS_e,		KS_E,		KS_currency,
    KC(28),	KS_z,
    KC(29),	KS_y,
    KC(30),	KS_1,		KS_plus,	KS_bar,
    KC(31),	KS_2,		KS_quotedbl,	KS_at,
    KC(32),	KS_3,		KS_asterisk,	KS_numbersign,
    KC(33),	KS_4,		KS_ccedilla,
    KC(35),	KS_6,		KS_ampersand,	KS_notsign,
    KC(36),	KS_7,		KS_slash,	KS_brokenbar,
    KC(37),	KS_8,		KS_parenleft,	KS_cent,
    KC(38),	KS_9,		KS_parenright,
    KC(39),	KS_0,		KS_equal,
    KC(45),	KS_apostrophe,	KS_question,	KS_dead_acute,
    KC(46),	KS_dead_circumflex,KS_dead_grave,KS_dead_tilde,
    KC(47),	KS_udiaeresis,	KS_egrave,	KS_bracketleft,
    KC(48),	KS_dead_diaeresis,KS_exclam,	KS_bracketright,
    KC(49),	KS_dollar,	KS_sterling,	KS_braceright,
    KC(50),	KS_dollar,	KS_sterling,	KS_braceright,
    KC(51),	KS_odiaeresis,	KS_eacute,
    KC(52),	KS_adiaeresis,	KS_agrave,	KS_braceleft,
    KC(53),	KS_section,	KS_degree,	KS_dead_abovering,
    KC(54),	KS_comma,	KS_semicolon,
    KC(55),	KS_period,	KS_colon,
    KC(56),	KS_minus,	KS_underscore,
    KC(100),	KS_less,	KS_greater,	KS_backslash,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_sg_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(45),	KS_apostrophe,	KS_question,	KS_acute,
    KC(46),	KS_asciicircum,	KS_grave,	KS_asciitilde,
    KC(48),	KS_diaeresis,	KS_exclam,	KS_bracketright,
};

static const keysym_t ukbd_keydesc_sf[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(47),	KS_egrave,	KS_udiaeresis,	KS_bracketleft,
    KC(51),	KS_eacute,	KS_odiaeresis,
    KC(52),	KS_agrave,	KS_adiaeresis,	KS_braceleft,
};

static const keysym_t ukbd_keydesc_pt[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(31),	KS_2,		KS_quotedbl,	KS_at,
    KC(32),	KS_3,		KS_numbersign,	KS_sterling,
    KC(35),	KS_6,		KS_ampersand,
    KC(36),	KS_7,		KS_slash,	KS_braceleft,
    KC(37),	KS_8,		KS_parenleft,	KS_bracketleft,
    KC(38),	KS_9,		KS_parenright,	KS_bracketright,
    KC(39),	KS_0,		KS_equal,	KS_braceright,
    KC(45),	KS_apostrophe,	KS_question,
    KC(46),	KS_less,	KS_greater,
    KC(47),	KS_plus,	KS_asterisk,
    KC(48),	KS_dead_acute,	KS_dead_grave,
    KC(49),	KS_dead_tilde,	KS_dead_circumflex,
    KC(50),	KS_dead_tilde,	KS_dead_circumflex,
    KC(51),	KS_ccedilla,	KS_Ccedilla,
    KC(52),	KS_masculine,	KS_ordfeminine,
    KC(53),	KS_backslash,	KS_bar,
    KC(54),	KS_comma,	KS_semicolon,
    KC(55),	KS_period,	KS_colon,
    KC(56),	KS_minus,	KS_underscore,
    KC(100),	KS_less,	KS_greater,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_pt_apple[] = {
/*  pos		normal		shifted */
    KC(46),	KS_plus,	KS_asterisk,
    KC(47),	KS_masculine,	KS_ordfeminine,
    KC(50),	KS_backslash,	KS_bar,
    KC(52),	KS_dead_tilde,	KS_dead_circumflex
};

static const keysym_t ukbd_keydesc_la[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(20),	KS_q,		KS_Q,		KS_at,
    KC(30),	KS_1,		KS_exclam,
    KC(31),	KS_2,		KS_quotedbl,
    KC(32),	KS_3,		KS_numbersign,
    KC(35),	KS_6,		KS_ampersand,
    KC(36),	KS_7,		KS_slash,
    KC(37),	KS_8,		KS_parenleft,
    KC(38),	KS_9,		KS_parenright,
    KC(39),	KS_0,		KS_equal,
    KC(45),	KS_apostrophe,	KS_question,	KS_backslash,
    KC(46),	KS_questiondown,KS_exclamdown,
    KC(47),	KS_dead_acute,	KS_dead_diaeresis,
    KC(48),	KS_plus,	KS_asterisk,	KS_asciitilde,
    KC(49),	KS_braceright,	KS_bracketright,KS_dead_grave,
    KC(50),	KS_braceright,	KS_bracketright,KS_dead_grave,
    KC(51),	KS_ntilde,
    KC(52),	KS_braceleft,	KS_bracketleft,	KS_dead_circumflex,
    KC(53),	KS_bar,		KS_degree,	KS_notsign,
    KC(54),	KS_comma,	KS_semicolon,
    KC(55),	KS_period,	KS_colon,
    KC(56),	KS_minus,	KS_underscore,
    KC(100),	KS_less,	KS_greater,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_br[] = {
/*  pos      normal		shifted         altgr           shift-altgr */
    KC(30),	KS_1,		KS_exclam,	KS_onesuperior,
    KC(31),	KS_2,		KS_at,		KS_twosuperior,
    KC(32),	KS_3,		KS_numbersign,	KS_threesuperior,
    KC(33),	KS_4,		KS_dollar,	KS_sterling,
    KC(34),	KS_5,		KS_percent,	KS_cent,
    KC(35),	KS_6,		KS_dead_diaeresis,KS_notsign,
    KC(46),	KS_equal,	KS_plus,	KS_section,
    KC(47),	KS_dead_acute,	KS_dead_grave,
    KC(48),	KS_bracketleft,	KS_braceleft,	KS_ordfeminine,
    KC(49),	KS_bracketright,KS_braceright,	KS_masculine,
    KC(50),	KS_bracketright,KS_braceright,	KS_masculine,
    KC(51),	KS_ccedilla,	KS_Ccedilla,
    KC(52),	KS_dead_tilde,	KS_dead_circumflex,
    KC(53),	KS_apostrophe,	KS_quotedbl,
    KC(56),	KS_semicolon,	KS_colon,
    KC(99),	KS_KP_Delete,	KS_KP_Decimal,
    KC(100),	KS_backslash,	KS_bar,
    KC(135),	KS_slash,	KS_question,	KS_degree,
};

static const keysym_t ukbd_keydesc_tr[] = {
/*  pos      normal		shifted         altgr           shift-altgr */
    KC(12),	KS_L5_idotless,	KS_I,
    KC(20),	KS_q,		KS_Q,		KS_at,
    KC(31),	KS_2,		KS_apostrophe,	KS_sterling,
    KC(32),	KS_3,		KS_asciicircum,	KS_numbersign,
    KC(33),	KS_4,		KS_plus,	KS_dollar,
    KC(34),	KS_5,		KS_percent,	KS_onehalf,
    KC(35),	KS_6,		KS_ampersand,
    KC(36),	KS_7,		KS_slash,	KS_braceleft,
    KC(37),	KS_8,		KS_parenleft,	KS_bracketleft,
    KC(38),	KS_9,		KS_parenright,	KS_bracketright,
    KC(39),	KS_0,		KS_equal,	KS_braceright,
    KC(45),	KS_asterisk,	KS_question,	KS_backslash,
    KC(46),	KS_minus,	KS_underscore,
    KC(47),	KS_L5_gbreve,	KS_L5_Gbreve,	KS_dead_diaeresis,
    KC(48),	KS_udiaeresis,	KS_Udiaeresis,	KS_asciitilde,
    KC(49),	KS_comma,	KS_semicolon,	KS_dead_grave,
    KC(50),	KS_comma,	KS_semicolon,	KS_dead_grave,
    KC(51),	KS_L5_scedilla,	KS_L5_Scedilla,	KS_dead_acute,
    KC(52),	KS_i,		KS_L5_Idotabove,
    KC(53),	KS_quotedbl,	KS_eacute,
    KC(54),	KS_odiaeresis,	KS_Odiaeresis,
    KC(55),	KS_ccedilla,	KS_Ccedilla,
    KC(56),	KS_period,	KS_colon,
    KC(100),	KS_less,	KS_greater,	KS_bar,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_tr_nodead[] = {
/*  pos      normal		shifted         altgr           shift-altgr */
    KC(47),	KS_L5_gbreve,	KS_L5_Gbreve,
    KC(49),	KS_comma,	KS_semicolon,	KS_grave,
    KC(50),	KS_comma,	KS_semicolon,	KS_grave,
    KC(51),	KS_L5_scedilla,	KS_L5_Scedilla,	KS_apostrophe,
};

static const keysym_t ukbd_keydesc_pl[] = {
/*  pos      normal		shifted         altgr           shift-altgr */
    KC(4),	KS_a,		KS_A,		KS_L2_aogonek,	KS_L2_Aogonek,
    KC(6),	KS_c,		KS_C,		KS_L2_cacute,	KS_L2_Cacute,
    KC(8),	KS_e,		KS_E,		KS_L2_eogonek,	KS_L2_Eogonek,
    KC(15),	KS_l,		KS_L,		KS_L2_lstroke,	KS_L2_Lstroke,
    KC(17),	KS_n,		KS_N,		KS_L2_nacute,	KS_L2_Nacute,
    KC(18),	KS_o,		KS_O,		KS_oacute,	KS_Oacute,
    KC(22),	KS_s,		KS_S,		KS_L2_sacute,	KS_L2_Sacute,
    KC(27),	KS_x,		KS_X,		KS_L2_zacute,	KS_L2_Zacute,
    KC(29),	KS_z,		KS_Z,		KS_L2_zdotabove,KS_L2_Zdotabove,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_hu[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(5),	KS_b,		KS_B,		KS_braceleft,
    KC(6),	KS_c,		KS_C,		KS_ampersand,
    KC(9),	KS_f,		KS_F,		KS_bracketleft,
    KC(10),	KS_g,		KS_G,		KS_bracketright,
    KC(12),	KS_i,		KS_I,		KS_iacute,
    KC(13),	KS_j,		KS_J,		KS_iacute,
    KC(17),	KS_n,		KS_N,		KS_braceright,
    KC(20),	KS_q,		KS_Q,		KS_backslash,
    KC(25),	KS_v,		KS_V,		KS_at,
    KC(26),	KS_w,		KS_W,KS_bar,
    KC(27),	KS_x,		KS_X,		KS_numbersign,
    KC(28),	KS_z,		KS_Z,
    KC(29),	KS_y,		KS_Y,		KS_greater,
    KC(30),	KS_1,		KS_apostrophe,	KS_asciitilde,
    KC(31),	KS_2,		KS_quotedbl,
    KC(32),	KS_3,		KS_plus,	KS_asciicircum,
    KC(33),	KS_4,		KS_exclam,
    KC(34),	KS_5,		KS_percent,
    KC(35),	KS_6,		KS_slash,
    KC(36),	KS_7,		KS_equal,KS_grave,
    KC(37),	KS_8,		KS_parenleft,
    KC(38),	KS_9,		KS_parenright,	KS_acute,
    KC(39),	KS_odiaeresis,	KS_Odiaeresis,
    KC(45),	KS_udiaeresis,	KS_Udiaeresis,
    KC(46),	KS_oacute,	KS_Oacute,
    KC(47),	KS_odoubleacute,KS_Odoubleacute,KS_division,
    KC(48),	KS_uacute,	KS_Uacute,	KS_multiply,
    KC(49),	KS_udoubleacute,KS_Udoubleacute,KS_currency,
    KC(50),	KS_udoubleacute,KS_Udoubleacute,KS_currency,
    KC(51),	KS_eacute,	KS_Eacute,	KS_dollar,
    KC(52),	KS_aacute,	KS_Aacute,	KS_ssharp,
    KC(53),	KS_0,		KS_section,
    KC(54),	KS_comma,	KS_question,	KS_semicolon,
    KC(55),	KS_period,	KS_colon,
    KC(56),	KS_minus,	KS_underscore,	KS_asterisk,
    KC(100),	KS_iacute,	KS_Iacute,	KS_less,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_si[]=
{
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(5),	KS_b,		KS_B,		KS_braceleft,
    KC(9),	KS_f,		KS_F,		KS_bracketleft,
    KC(10),	KS_g,		KS_G,		KS_bracketright,
    KC(14),	KS_k,		KS_K,		KS_L2_lstroke,
    KC(15),	KS_l,		KS_L,		KS_L2_Lstroke,
    KC(16),	KS_m,		KS_M,		KS_section,
    KC(17),	KS_n,		KS_N,		KS_braceright,
    KC(20),	KS_q,		KS_Q,		KS_backslash,
    KC(25),	KS_v,		KS_V,		KS_at,
    KC(26),	KS_w,		KS_W,		KS_bar,
    KC(28),	KS_z,		KS_Z,
    KC(29),	KS_y,		KS_Y,
    KC(30),	KS_1,		KS_exclam,	KS_asciitilde,
    KC(31),	KS_2,		KS_quotedbl,	KS_L2_caron,
    KC(32),	KS_3,		KS_numbersign,	KS_asciicircum,
    KC(33),	KS_4,		KS_dollar,	KS_L2_breve,
    KC(34),	KS_5,		KS_percent,	KS_degree,
    KC(35),	KS_6,		KS_ampersand,	KS_L2_ogonek,
    KC(36),	KS_7,		KS_slash,	KS_grave,
    KC(37),	KS_8,		KS_parenleft,	KS_L2_dotabove,
    KC(38),	KS_9,		KS_parenright,	KS_acute,
    KC(39),	KS_0,		KS_equal,	KS_L2_dblacute,
    KC(45),	KS_apostrophe,	KS_question,	KS_diaeresis,
    KC(46),	KS_plus,	KS_asterisk,	KS_cedilla,
    KC(47),	KS_L2_scaron,	KS_L2_Scaron,	KS_division,
    KC(48),	KS_L2_dstroke,	KS_L2_Dstroke,	KS_multiply,
    KC(49),	KS_L2_zcaron,	KS_L2_Zcaron,	KS_currency,
    KC(50),	KS_L2_zcaron,	KS_L2_Zcaron,	KS_currency,
    KC(51),	KS_L2_ccaron,	KS_L2_Ccaron,
    KC(52),	KS_L2_cacute,	KS_L2_Cacute,	KS_ssharp,
    KC(53),	KS_cedilla,	KS_diaeresis,
    KC(54),	KS_comma,	KS_semicolon,	KS_less,
    KC(55),	KS_period,	KS_colon,	KS_greater,
    KC(56),	KS_minus,	KS_underscore,
    KC(100),	KS_less,	KS_greater,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_cf[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(16),	KS_m,		KS_M,		KS_mu,
    KC(18),	KS_o,		KS_O,		KS_section,
    KC(19),	KS_p,		KS_P,		KS_paragraph,
    KC(30),	KS_1,		KS_exclam,	KS_plusminus,
    KC(31),	KS_2,		KS_quotedbl,	KS_at,
    KC(32),	KS_3,		KS_slash,	KS_sterling,
    KC(33),	KS_4,		KS_dollar,	KS_cent,
    KC(34),	KS_5,		KS_percent,	KS_diaeresis,
    KC(35),	KS_6,		KS_question,	KS_macron,
    KC(36),	KS_7,		KS_ampersand,	KS_brokenbar,
    KC(37),	KS_8,		KS_asterisk,	KS_twosuperior,
    KC(38),	KS_9,		KS_parenleft,	KS_threesuperior,
    KC(39),	KS_0,		KS_parenright,	KS_onequarter,
    KC(45),	KS_minus,	KS_underscore,	KS_onehalf,
    KC(46),	KS_equal,	KS_plus,	KS_threequarters,
    KC(47),	KS_dead_circumflex,KS_dead_circumflex,KS_bracketleft,
    KC(48),	KS_dead_cedilla,KS_dead_diaeresis,KS_bracketright,
    KC(49),	KS_less,	KS_greater,	KS_braceright,
    KC(50),	KS_less,	KS_greater,	KS_braceright,
    KC(51),	KS_semicolon,	KS_colon,	KS_asciitilde,
    KC(52),	KS_dead_grave,	KS_dead_grave,	KS_braceleft,
    KC(53),	KS_numbersign,	KS_bar,		KS_backslash,
    KC(54),	KS_comma,	KS_apostrophe,	KS_hyphen,
    KC(55),	KS_period,	KS_period,
    KC(56),	KS_eacute,	KS_Eacute,	KS_dead_acute,
    KC(100),	KS_guillemotleft,KS_guillemotright,KS_degree,
    KC(230),	KS_Mode_switch,KS_Multi_key,
};

static const keysym_t ukbd_keydesc_cf_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(47),	KS_asciicircum,KS_asciicircum,KS_bracketleft,
    KC(48),	KS_cedilla,	KS_diaeresis,	KS_bracketright,
    KC(52),	KS_grave,	KS_grave,	KS_braceleft,
    KC(56),	KS_eacute,	KS_Eacute,	KS_acute,
};

static const keysym_t ukbd_keydesc_lv[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(4),	KS_a,		KS_A,		KS_L7_amacron,	KS_L7_Amacron,
    KC(6),	KS_c,		KS_C,		KS_L7_ccaron,	KS_L7_Ccaron,
    KC(8),	KS_e,		KS_E,		KS_L7_emacron,	KS_L7_Emacron,
    KC(10),	KS_g,		KS_G,		KS_L7_gcedilla,	KS_L7_Gcedilla,
    KC(12),	KS_i,		KS_I,		KS_L7_imacron,	KS_L7_Imacron,
    KC(14),	KS_k,		KS_K,		KS_L7_kcedilla,	KS_L7_Kcedilla,
    KC(15),	KS_l,		KS_L,		KS_L7_lcedilla,	KS_L7_Lcedilla,
    KC(17),	KS_n,		KS_N,		KS_L7_ncedilla,	KS_L7_Ncedilla,
    KC(18),	KS_o,		KS_O,		KS_L7_omacron,	KS_L7_Omacron,
    KC(22),	KS_s,		KS_S,		KS_L7_scaron,	KS_L7_Scaron,
    KC(24),	KS_u,		KS_U,		KS_L7_umacron,	KS_L7_Umacron,
    KC(29),	KS_z,		KS_Z,		KS_L7_zcaron,	KS_L7_Zcaron,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_nl[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(6),	KS_c,		KS_C,		KS_cent,
    KC(16),	KS_m,		KS_M,		KS_mu,
    KC(21),	KS_r,		KS_R,		KS_paragraph,
    KC(22),	KS_s,		KS_S,		KS_ssharp,
    KC(27),	KS_x,		KS_X,		KS_guillemotright,
    KC(29),	KS_z,		KS_Z,		KS_guillemotleft,
    KC(30),	KS_1,		KS_exclam,	KS_onesuperior,
    KC(31),	KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(32),	KS_3,		KS_numbersign,	KS_threesuperior,
    KC(33),	KS_4,		KS_dollar,	KS_onequarter,
    KC(34),	KS_5,		KS_percent,	KS_onehalf,
    KC(35),	KS_6,		KS_ampersand,	KS_threequarters,
    KC(36),	KS_7,		KS_underscore,	KS_sterling,
    KC(37),	KS_8,		KS_parenleft,	KS_braceleft,
    KC(38),	KS_9,		KS_parenright,	KS_braceright,
    KC(39),	KS_0,		KS_apostrophe,
    KC(45),	KS_slash,	KS_question,	KS_backslash,
    KC(46),	KS_degree,	KS_dead_tilde,	KS_dead_cedilla,
    KC(47),	KS_dead_diaeresis,KS_dead_circumflex,
    KC(48),	KS_asterisk,	KS_bar,
    KC(49),	KS_less,	KS_greater,
    KC(50),	KS_less,	KS_greater,
    KC(51),	KS_plus,	KS_plusminus,
    KC(52),	KS_dead_acute,	KS_dead_grave,
    KC(53),	KS_at,		KS_section,	KS_notsign,
    KC(54),	KS_comma,	KS_semicolon,
    KC(55),	KS_period,	KS_colon,	KS_periodcentered,
    KC(56),	KS_minus,	KS_equal,
    KC(100),	KS_bracketright,KS_bracketleft,	KS_brokenbar,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_nl_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(46),	KS_degree,	KS_asciitilde,	KS_cedilla,
    KC(47),	KS_quotedbl,	KS_asciicircum,
    KC(52),	KS_apostrophe,	KS_grave,
};

static const keysym_t ukbd_keydesc_is[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
						/* euro currency */
    KC(8),	KS_e,		KS_E,
    KC(20),	KS_q,		KS_Q,		KS_at,
    KC(31),	KS_2,		KS_quotedbl,
    KC(35),	KS_6,		KS_ampersand,
    KC(36),	KS_7,		KS_slash,	KS_braceleft,
    KC(37),	KS_8,		KS_parenleft,	KS_bracketleft,
    KC(38),	KS_9,		KS_parenright,	KS_bracketright,
    KC(39),	KS_0,		KS_equal,	KS_braceright,
    KC(45),	KS_odiaeresis,	KS_Odiaeresis,	KS_backslash,
    KC(46),	KS_minus,	KS_underscore,
    KC(47),	KS_eth,
    KC(48),	KS_apostrophe,	KS_question,	KS_asciitilde,
    KC(49),	KS_plus,	KS_asterisk,	KS_grave,
    KC(50),	KS_plus,	KS_asterisk,	KS_grave,
    KC(51),	KS_ae,
    KC(52),	KS_dead_acute,	KS_dead_diaeresis,KS_dead_circumflex,
    KC(53),	KS_degree,	KS_diaeresis,
    KC(54),	KS_comma,	KS_semicolon,
    KC(55),	KS_period,	KS_colon,
    KC(56),	KS_thorn,
    KC(100),	KS_less,	KS_greater,	KS_bar,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_is_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(52),	KS_acute,	KS_diaeresis,	KS_asciicircum,
};

static const keysym_t ukbd_keydesc_ee[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(22),	KS_s,		KS_S,		KS_L2_scaron,	KS_L2_Scaron,
    KC(29),	KS_z,		KS_Z,		KS_L2_zcaron,	KS_L2_Zcaron,
    KC(31),	KS_2,		KS_quotedbl,	KS_at,
    KC(32),	KS_3,		KS_numbersign,	KS_sterling,
    KC(33),	KS_4,		KS_currency,	KS_dollar,
    KC(35),	KS_6,		KS_ampersand,
    KC(36),	KS_7,		KS_slash,	KS_braceleft,
    KC(37),	KS_8,		KS_parenleft,	KS_bracketleft,
    KC(38),	KS_9,		KS_parenright,	KS_bracketright,
    KC(39),	KS_0,		KS_equal,	KS_braceright,
    KC(45),	KS_plus,	KS_question,	KS_backslash,
    KC(46),	KS_dead_acute,	KS_dead_grave,
    KC(47),	KS_udiaeresis,
    KC(48),	KS_otilde,	KS_Otilde,	KS_section,
    KC(49),	KS_apostrophe,	KS_asterisk,	KS_onehalf,
    KC(50),	KS_apostrophe,	KS_asterisk,	KS_onehalf,
    KC(51),	KS_odiaeresis,
    KC(52),	KS_adiaeresis,	KS_Adiaeresis,	KS_dead_circumflex,
    KC(53),	KS_dead_caron,	KS_dead_tilde,
    KC(54),	KS_comma,	KS_semicolon,
    KC(55),	KS_period,	KS_colon,
    KC(56),	KS_minus,	KS_underscore,
    KC(100),	KS_less,	KS_greater,	KS_bar,		KS_brokenbar,
    KC(230),	KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t ukbd_keydesc_ee_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(46),	KS_apostrophe,	KS_grave,
    KC(52),	KS_adiaeresis,	KS_Adiaeresis,	KS_asciicircum,
    KC(53),	KS_L2_caron,	KS_asciitilde,
};

#endif	/* WSKBD_NO_INTL_LAYOUTS */

#define KBD_MAP(name, base, map) \
			{ name, base, sizeof(map)/sizeof(keysym_t), map }

const struct wscons_keydesc ukbd_keydesctab[] = {
	KBD_MAP(KB_US,			0,	ukbd_keydesc_us),
#if !defined(WSKBD_NO_INTL_LAYOUTS)
	KBD_MAP(KB_DE,			KB_US,	ukbd_keydesc_de),
	KBD_MAP(KB_DE | KB_NODEAD,	KB_DE,	ukbd_keydesc_de_nodead),
	KBD_MAP(KB_FR,			KB_US,	ukbd_keydesc_fr),
	KBD_MAP(KB_FR | KB_APPLE,	KB_FR,	ukbd_keydesc_fr_apple),
	KBD_MAP(KB_FR | KB_DVORAK,	KB_US,	ukbd_keydesc_fr_dvorak_bepo),
	KBD_MAP(KB_DK,			KB_US,	ukbd_keydesc_dk),
	KBD_MAP(KB_DK | KB_NODEAD,	KB_DK,	ukbd_keydesc_dk_nodead),
	KBD_MAP(KB_IT,			KB_US,	ukbd_keydesc_it),
	KBD_MAP(KB_UK,			KB_US,	ukbd_keydesc_uk),
	KBD_MAP(KB_JP,			KB_US,	ukbd_keydesc_jp),
	KBD_MAP(KB_SV,			KB_DK,	ukbd_keydesc_sv),
	KBD_MAP(KB_SV | KB_NODEAD,	KB_SV,	ukbd_keydesc_sv_nodead),
	KBD_MAP(KB_NO,			KB_DK,	ukbd_keydesc_no),
	KBD_MAP(KB_NO | KB_NODEAD,	KB_NO,	ukbd_keydesc_no_nodead),
	KBD_MAP(KB_US | KB_DVORAK,	KB_US,	ukbd_keydesc_us_dvorak),
	KBD_MAP(KB_US | KB_SWAPCTRLCAPS, KB_US,	ukbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_US | KB_IOPENER,	KB_US,	ukbd_keydesc_iopener),
	KBD_MAP(KB_UK | KB_SWAPCTRLCAPS, KB_UK,	ukbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_JP | KB_SWAPCTRLCAPS, KB_JP,	ukbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_FR | KB_SWAPCTRLCAPS, KB_FR,	ukbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_FR | KB_APPLE | KB_SWAPCTRLCAPS,	KB_FR | KB_APPLE,
		ukbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_FR | KB_DVORAK | KB_SWAPCTRLCAPS,	KB_FR | KB_DVORAK,
		ukbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_BE | KB_SWAPCTRLCAPS, KB_BE,	ukbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_US | KB_DVORAK | KB_SWAPCTRLCAPS,	KB_US | KB_DVORAK,
		ukbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_US | KB_IOPENER | KB_SWAPCTRLCAPS,	KB_US | KB_IOPENER,
		ukbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_ES,			KB_US,	ukbd_keydesc_es),
	KBD_MAP(KB_BE,			KB_US,	ukbd_keydesc_be),
	KBD_MAP(KB_RU,			KB_US,	ukbd_keydesc_ru),
	KBD_MAP(KB_UA,			KB_US,	ukbd_keydesc_ua),
	KBD_MAP(KB_SG,			KB_US,	ukbd_keydesc_sg),
	KBD_MAP(KB_SG | KB_NODEAD,	KB_SG,	ukbd_keydesc_sg_nodead),
	KBD_MAP(KB_SF,			KB_SG,	ukbd_keydesc_sf),
	KBD_MAP(KB_SF | KB_NODEAD,	KB_SF,	ukbd_keydesc_sg_nodead),
	KBD_MAP(KB_PT,			KB_US,	ukbd_keydesc_pt),
	KBD_MAP(KB_PT | KB_APPLE,	KB_PT,	ukbd_keydesc_pt_apple),
	KBD_MAP(KB_LT,			KB_US,	ukbd_keydesc_lt),
	KBD_MAP(KB_LA,			KB_US,	ukbd_keydesc_la),
	KBD_MAP(KB_BR,			KB_US,	ukbd_keydesc_br),
	KBD_MAP(KB_TR,			KB_US,	ukbd_keydesc_tr),
	KBD_MAP(KB_TR | KB_NODEAD,	KB_TR,	ukbd_keydesc_tr_nodead),
	KBD_MAP(KB_PL,			KB_US,	ukbd_keydesc_pl),
	KBD_MAP(KB_HU,			KB_US,	ukbd_keydesc_hu),
	KBD_MAP(KB_SI,			KB_US,	ukbd_keydesc_si),
	KBD_MAP(KB_CF,			KB_US, 	ukbd_keydesc_cf),
	KBD_MAP(KB_CF | KB_NODEAD,	KB_CF,	ukbd_keydesc_cf_nodead),
	KBD_MAP(KB_LV,			KB_US,	ukbd_keydesc_lv),
	KBD_MAP(KB_NL,			KB_US, 	ukbd_keydesc_nl),
	KBD_MAP(KB_NL | KB_NODEAD,	KB_NL,	ukbd_keydesc_nl_nodead),
	KBD_MAP(KB_IS,			KB_US, 	ukbd_keydesc_is),
	KBD_MAP(KB_IS | KB_NODEAD,	KB_IS, 	ukbd_keydesc_is_nodead),
	KBD_MAP(KB_EE,			KB_US,	ukbd_keydesc_ee),
	KBD_MAP(KB_EE | KB_NODEAD,	KB_EE,	ukbd_keydesc_ee_nodead),
#endif	/* WSKBD_NO_INTL_LAYOUTS */
	{0, 0, 0, 0}
};

#undef KBD_MAP
#undef KC
@


1.41
log
@regen
@
text
@d10 1
a10 1
/*	OpenBSD: wskbdmap_mfii.c,v 1.43 2013/04/14 19:32:52 miod Exp  */
d1123 35
d1220 2
@


1.40
log
@regen
@
text
@d7 1
a7 1
 *	OpenBSD: makemap.awk,v 1.13 2013/04/14 19:33:46 miod Exp 
d490 5
a494 5
    KC(135),	KS_Hiragana_Katakana,
    KC(136),	KS_backslash,	KS_underscore,
    KC(137),	KS_Henkan,
    KC(138),	KS_Muhenkan,
    KC(139),	KS_backslash,	KS_bar,
d858 1
a858 1
    KC(136),	KS_slash,	KS_question,	KS_degree,
@


1.39
log
@regen
@
text
@d7 1
a7 1
 *	OpenBSD: makemap.awk,v 1.12 2012/04/03 18:18:41 miod Exp 
d10 1
a10 1
/*	OpenBSD: wskbdmap_mfii.c,v 1.42 2011/04/05 19:12:13 miod Exp  */
d153 12
a164 12
    KC(104),	KS_F13,
    KC(105),	KS_F14,
    KC(106),	KS_F15,
    KC(107),	KS_F16,
    KC(108),	KS_F17,
    KC(109),	KS_F18,
    KC(110),	KS_F19,
    KC(111),	KS_F20,
    KC(112),	KS_F21,
    KC(113),	KS_F22,
    KC(114),	KS_F23,
    KC(115),	KS_F24,
@


1.38
log
@regen
@
text
@d7 1
a7 1
 *	OpenBSD: makemap.awk,v 1.11 2010/07/31 16:12:37 miod Exp 
d128 1
a128 1
    KC(76),	KS_Cmd_ResetEmul,KS_Delete,
d151 1
a151 1
    KC(99),	KS_Cmd_KbdReset,KS_KP_Delete,
@


1.37
log
@regen
@
text
@d10 1
a10 1
/*	OpenBSD: wskbdmap_mfii.c,v 1.41 2010/08/28 16:39:18 miod Exp  */
d1091 32
d1183 2
@


1.36
log
@regen
@
text
@d10 1
a10 1
/*	OpenBSD: wskbdmap_mfii.c,v 1.40 2009/12/07 19:22:38 oga Exp  */
d987 2
a988 2
    KC(54),	KS_comma,	KS_semicolon,
    KC(55),	KS_period,	KS_colon,
@


1.35
log
@sync (with pckbd)
@
text
@d7 1
a7 1
 *	OpenBSD: makemap.awk,v 1.10 2009/01/11 16:54:53 miod Exp 
d10 1
a10 1
/*	OpenBSD: wskbdmap_mfii.c,v 1.39 2008/08/09 16:31:08 miod Exp  */
d153 12
@


1.34
log
@Regen (no functional change)
@
text
@d1104 1
@


1.33
log
@Regen
@
text
@d7 1
a7 1
 *	OpenBSD: makemap.awk,v 1.9 2008/08/09 16:31:08 miod Exp 
a55 3
/* initially KC(160),	KS_AudioMute,	*/
/* initially KC(174),	KS_AudioLower,	*/
/* initially KC(176),	KS_AudioRaise,	*/
@


1.32
log
@sync
@
text
@d7 1
a7 1
 *	OpenBSD: makemap.awk,v 1.8 2008/05/19 18:09:06 miod Exp 
d10 1
a10 1
/*	OpenBSD: wskbdmap_mfii.c,v 1.38 2008/07/30 15:53:31 deraadt Exp  */
d357 60
d1094 1
d1110 2
@


1.31
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ukbdmap.c,v 1.30 2008/05/19 18:09:57 miod Exp $	*/
d10 1
a10 1
/*	OpenBSD: wskbdmap_mfii.c,v 1.35 2008/03/21 17:10:46 miod Exp  */
a14 1
 *	sys/arch/hppa/gsc/gsckbdmap.c
@


1.30
log
@regen
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a34 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.29
log
@regen
@
text
@d7 1
a7 1
 *	OpenBSD: makemap.awk,v 1.7 2007/06/17 07:53:11 mbalmer Exp 
d164 14
@


1.28
log
@Add option WSKBD_NO_INTL_LAYOUTS to prevent inclusion of international
keyboard layouts, instead of having SMALL_KERNEL imply this on alpha.
No functional change.

ok deraadt@@
@
text
@d10 1
a10 1
/*	OpenBSD: wskbdmap_mfii.c,v 1.34 2006/12/05 21:27:07 otto Exp  */
@


1.27
log
@No longer include usb_port.h, all macros have been converted to their C
counterparts.

Revert usb_port.h to it's original form with all the macro definitions to
ease the import of new drivers from other BSDs.

after discussion with deraadt; feedback from mk, miod, jsg, dlg.

ok dlg.
@
text
@d1 1
a1 1
/*	$OpenBSD: ukbdmap.c,v 1.26 2006/12/05 21:28:42 otto Exp $	*/
d7 1
a7 1
 *	OpenBSD: makemap.awk,v 1.6 2005/05/23 21:33:03 miod Exp 
d174 1
a174 1
#if !defined(SMALL_KERNEL) || !defined(__alpha__)
d1016 1
a1016 1
#endif	/* SMALL_KERNEL */
d1023 1
a1023 1
#if !defined(SMALL_KERNEL) || !defined(__alpha__)
d1072 1
a1072 1
#endif	/* SMALL_KERNEL */
@


1.26
log
@regen
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a58 1
#include <dev/usb/usb_port.h>
@


1.25
log
@regen
@
text
@d10 1
a10 1
/*	OpenBSD: wskbdmap_mfii.c,v 1.33 2006/07/20 16:45:05 mickey Exp  */
d976 41
d1071 2
@


1.24
log
@regen
@
text
@d10 1
a10 1
/*	OpenBSD: wskbdmap_mfii.c,v 1.32 2006/07/20 10:44:40 mickey Exp  */
d961 13
a973 13
    KC(4),	KS_a,		KS_A,		KS_L7_amacron,KS_L7_Amacron,
    KC(6),	KS_c,		KS_C,		KS_L7_ccaron,KS_L7_Ccaron,
    KC(8),	KS_e,		KS_E,		KS_L7_emacron,KS_L7_Emacron,
    KC(10),	KS_g,		KS_G,		KS_L7_gcedilla,KS_L7_Gcedilla,
    KC(12),	KS_i,		KS_I,		KS_L7_imacron,KS_L7_Imacron,
    KC(14),	KS_k,		KS_K,		KS_L7_kcedilla,KS_L7_Kcedilla,
    KC(17),	KS_n,		KS_N,		KS_L7_ncedilla,KS_L7_Ncedilla,
    KC(22),	KS_s,		KS_S,		KS_L7_scaron,KS_L7_Scaron,
    KC(24),	KS_u,		KS_U,		KS_L7_umacron,KS_L7_Umacron,
    KC(29),	KS_z,		KS_Z,		KS_L7_zcaron,KS_L7_Zcaron,
    KC(51),	KS_l,		KS_L,		KS_L7_lcedilla,KS_L7_Lcedilla,
    KC(53),	KS_Mode_switch,	KS_Multi_key,	KS_Mode_switch,	KS_Multi_key,
    KC(230),	KS_Multi_key,
@


1.23
log
@Regen (although this does not change anything for these keyboards).
@
text
@d10 1
a10 1
/*	OpenBSD: wskbdmap_mfii.c,v 1.31 2006/05/29 20:23:13 miod Exp  */
d959 17
d1029 1
@


1.22
log
@ROTD (Regen Of The Day)
@
text
@d10 1
a10 1
/*	OpenBSD: wskbdmap_mfii.c,v 1.30 2005/05/09 05:08:57 miod Exp  */
d65 3
@


1.21
log
@At this rate I'm regenerating this file faster than I am losing my hair.
@
text
@d7 1
a7 1
 *	OpenBSD: makemap.awk,v 1.5 2005/05/19 17:49:54 miod Exp 
d110 1
d191 1
d224 1
d296 1
d363 1
d389 1
d408 1
d435 1
d469 1
d501 1
d647 1
d676 1
d715 1
d750 1
d773 1
d801 1
d816 1
d864 1
d905 1
d936 1
@


1.20
log
@Regen
@
text
@d7 1
a7 1
 *	OpenBSD: makemap.awk,v 1.4 2005/05/19 10:40:48 miod Exp 
d305 18
d324 2
d327 4
d332 8
a339 3
    KC(48),	KS_dollar,	KS_asterisk,
    KC(50),	KS_backslash,	KS_sterling,
    KC(53),	KS_at,	KS_numbersign,
d342 1
@


1.19
log
@Regen
@
text
@d7 1
a7 1
 *	OpenBSD: makemap.awk,v 1.3 2005/05/12 16:21:24 miod Exp 
d304 11
d917 1
d932 2
@


1.18
log
@Regen
@
text
@d7 1
a7 1
 *	OpenBSD: makemap.awk,v 1.2 2005/05/12 09:28:21 miod Exp 
d91 10
a100 10
    KC(30),	KS_1,	KS_exclam,
    KC(31),	KS_2,	KS_at,
    KC(32),	KS_3,	KS_numbersign,
    KC(33),	KS_4,	KS_dollar,
    KC(34),	KS_5,	KS_percent,
    KC(35),	KS_6,	KS_asciicircum,
    KC(36),	KS_7,	KS_ampersand,
    KC(37),	KS_8,	KS_asterisk,
    KC(38),	KS_9,	KS_parenleft,
    KC(39),	KS_0,	KS_parenright,
d102 2
a103 2
    KC(41),	KS_Cmd_Debugger,	KS_Escape,
    KC(42),	KS_Cmd_ResetEmul,	KS_Delete,
d109 1
a109 1
    KC(48),	KS_bracketright,	KS_braceright,
d128 2
a129 2
    KC(68),	KS_Cmd_Screen10,	KS_f11,
    KC(69),	KS_Cmd_Screen11,	KS_f12,
d132 1
a132 1
    KC(72),	KS_Pause,	/*	Break	*/
d135 2
a136 2
    KC(75),	KS_Cmd_ScrollBack,	KS_Prior,
    KC(76),	KS_Cmd_ResetEmul,	KS_Delete,
d138 1
a138 1
    KC(78),	KS_Cmd_ScrollFwd,	KS_Next,
d159 1
a159 1
    KC(99),	KS_Cmd_KbdReset,	KS_KP_Delete,
d175 2
a176 2
    KC(16),	KS_m,	KS_M,	KS_mu,
    KC(20),	KS_q,	KS_Q,	KS_at,
d179 7
a185 7
    KC(31),	KS_2,	KS_quotedbl,	KS_twosuperior,
    KC(32),	KS_3,	KS_section,	KS_threesuperior,
    KC(35),	KS_6,	KS_ampersand,
    KC(36),	KS_7,	KS_slash,	KS_braceleft,
    KC(37),	KS_8,	KS_parenleft,	KS_bracketleft,
    KC(38),	KS_9,	KS_parenright,	KS_bracketright,
    KC(39),	KS_0,	KS_equal,	KS_braceright,
d197 1
a197 1
    KC(100),	KS_less,	KS_greater,	KS_bar,	KS_brokenbar,
d210 8
a217 8
    KC(31),	KS_2,	KS_quotedbl,	KS_at,
    KC(32),	KS_3,	KS_numbersign,	KS_sterling,
    KC(33),	KS_4,	KS_currency,	KS_dollar,
    KC(35),	KS_6,	KS_ampersand,
    KC(36),	KS_7,	KS_slash,	KS_braceleft,
    KC(37),	KS_8,	KS_parenleft,	KS_bracketleft,
    KC(38),	KS_9,	KS_parenright,	KS_bracketright,
    KC(39),	KS_0,	KS_equal,	KS_braceright,
d221 1
a221 1
    KC(48),	KS_dead_diaeresis,	KS_dead_circumflex,	KS_dead_tilde,
d242 1
a242 1
    KC(48),	KS_dead_diaeresis,	KS_dead_circumflex,	KS_dead_tilde,
d259 1
a259 1
    KC(48),	KS_dead_diaeresis,	KS_dead_circumflex,	KS_dead_tilde,
d262 1
a262 1
    KC(53),	KS_bar,	KS_paragraph,
d280 9
a288 9
    KC(31),	KS_eacute,	KS_2,	KS_asciitilde,
    KC(32),	KS_quotedbl,	KS_3,	KS_numbersign,
    KC(33),	KS_apostrophe,	KS_4,	KS_braceleft,
    KC(34),	KS_parenleft,	KS_5,	KS_bracketleft,
    KC(35),	KS_minus,	KS_6,	KS_bar,
    KC(36),	KS_egrave,	KS_7,	KS_grave,
    KC(37),	KS_underscore,	KS_8,	KS_backslash,
    KC(38),	KS_ccedilla,	KS_9,	KS_asciicircum,
    KC(39),	KS_agrave,	KS_0,	KS_at,
d291 1
a291 1
    KC(47),	KS_dead_circumflex,	KS_dead_diaeresis,
d306 8
a313 8
    KC(31),	KS_2,	KS_quotedbl,	KS_twosuperior,
    KC(32),	KS_3,	KS_sterling,	KS_threesuperior,
    KC(34),	KS_5,	KS_percent,
    KC(35),	KS_6,	KS_ampersand,
    KC(36),	KS_7,	KS_slash,
    KC(37),	KS_8,	KS_parenleft,
    KC(38),	KS_9,	KS_parenright,
    KC(39),	KS_0,	KS_equal,
d331 10
a340 10
    KC(30),	KS_1,	KS_exclam,	KS_plusminus,	KS_exclamdown,
    KC(31),	KS_2,	KS_quotedbl,	KS_twosuperior,	KS_cent,
    KC(32),	KS_3,	KS_sterling,	KS_threesuperior,
    KC(33),	KS_4,	KS_dollar,	KS_acute,	KS_currency,
    KC(34),	KS_5,	KS_percent,	KS_mu,	KS_yen,
    KC(35),	KS_6,	KS_asciicircum,	KS_paragraph,
    KC(36),	KS_7,	KS_ampersand,	KS_periodcentered,	KS_brokenbar,
    KC(37),	KS_8,	KS_asterisk,	KS_cedilla,	KS_ordfeminine,
    KC(38),	KS_9,	KS_parenleft,	KS_onesuperior,	KS_diaeresis,
    KC(39),	KS_0,	KS_parenright,	KS_masculine,	KS_copyright,
d344 1
a344 1
    KC(52),	KS_apostrophe,	KS_at,	KS_section,	KS_Agrave,
d346 1
a346 1
    KC(100),	KS_backslash,	KS_bar,	KS_Udiaeresis,
d351 5
a355 5
    KC(31),	KS_2,	KS_quotedbl,
    KC(35),	KS_6,	KS_ampersand,
    KC(36),	KS_7,	KS_apostrophe,
    KC(37),	KS_8,	KS_parenleft,
    KC(38),	KS_9,	KS_parenright,
d359 1
a359 1
    KC(47),	KS_at,	KS_grave,
d361 1
a361 1
    KC(50),	KS_bracketright,	KS_braceright,
d364 1
a364 1
    KC(53),	KS_Zenkaku_Hankaku,	/*	replace	grave/tilde	*/
d374 9
a382 9
    KC(30),	KS_1,	KS_exclam,	KS_bar,
    KC(31),	KS_2,	KS_quotedbl,	KS_at,
    KC(32),	KS_3,	KS_periodcentered,	KS_numbersign,
    KC(33),	KS_4,	KS_dollar,	KS_asciitilde,
    KC(35),	KS_6,	KS_ampersand,
    KC(36),	KS_7,	KS_slash,
    KC(37),	KS_8,	KS_parenleft,
    KC(38),	KS_9,	KS_parenright,
    KC(39),	KS_0,	KS_equal,
d385 1
a385 1
    KC(47),	KS_dead_grave,	KS_dead_circumflex,	KS_bracketleft,
d389 1
a389 1
    KC(52),	KS_dead_acute,	KS_dead_diaeresis,	KS_braceleft,
d400 1
a400 1
    KC(8),	KS_e,	KS_E,	KS_currency,
d405 10
a414 10
    KC(30),	KS_exclam,	KS_1,	KS_at,
    KC(31),	KS_minus,	KS_2,	KS_underscore,
    KC(32),	KS_slash,	KS_3,	KS_numbersign,
    KC(33),	KS_semicolon,	KS_4,	KS_dollar,
    KC(34),	KS_colon,	KS_5,	KS_paragraph,
    KC(35),	KS_comma,	KS_6,	KS_asciicircum,
    KC(36),	KS_period,	KS_7,	KS_ampersand,
    KC(37),	KS_equal,	KS_8,	KS_asterisk,
    KC(38),	KS_bracketleft,	KS_9,	KS_parenleft,
    KC(39),	KS_bracketright,	KS_0,	KS_parenright,
d417 1
a417 1
    KC(46),	KS_x,	KS_X,	KS_percent,
d419 2
a420 2
    KC(48),	KS_w,	KS_W,	KS_braceright,
    KC(50),	KS_q,	KS_Q,	KS_bar,
d425 1
a425 1
    KC(55),	KS_f,	KS_F,	KS_L7_leftdblquot,
d437 3
a439 3
    KC(30),	KS_ampersand,	KS_1,	KS_bar,
    KC(31),	KS_eacute,	KS_2,	KS_at,
    KC(32),	KS_quotedbl,	KS_3,	KS_numbersign,
d442 1
a442 1
    KC(35),	KS_section,	KS_6,	KS_asciicircum,
d445 2
a446 2
    KC(38),	KS_ccedilla,	KS_9,	KS_braceleft,
    KC(39),	KS_agrave,	KS_0,	KS_braceright,
d449 1
a449 1
    KC(47),	KS_dead_circumflex,	KS_dead_diaeresis,	KS_bracketleft,
d451 1
a451 1
    KC(50),	KS_mu,	KS_sterling,	KS_grave,
d490 1
a490 1
    KC(46),	KS_bracketright,	KS_braceright,
d508 1
a508 1
    KC(58),	KS_Cmd_Debugger,	KS_Escape,
d524 28
a551 28
    KC(4),	KS_a,	KS_A,	KS_Cyrillic_ef,	KS_Cyrillic_EF,
    KC(5),	KS_b,	KS_B,	KS_Cyrillic_i,	KS_Cyrillic_I,
    KC(6),	KS_c,	KS_C,	KS_Cyrillic_es,	KS_Cyrillic_ES,
    KC(7),	KS_d,	KS_D,	KS_Cyrillic_ve,	KS_Cyrillic_VE,
    KC(8),	KS_e,	KS_E,	KS_Cyrillic_u,	KS_Cyrillic_U,
    KC(9),	KS_f,	KS_F,	KS_Cyrillic_a,	KS_Cyrillic_A,
    KC(10),	KS_g,	KS_G,	KS_Cyrillic_pe,	KS_Cyrillic_PE,
    KC(11),	KS_h,	KS_H,	KS_Cyrillic_er,	KS_Cyrillic_ER,
    KC(12),	KS_i,	KS_I,	KS_Cyrillic_sha,	KS_Cyrillic_SHA,
    KC(13),	KS_j,	KS_J,	KS_Cyrillic_o,	KS_Cyrillic_O,
    KC(14),	KS_k,	KS_K,	KS_Cyrillic_el,	KS_Cyrillic_EL,
    KC(15),	KS_l,	KS_L,	KS_Cyrillic_de,	KS_Cyrillic_DE,
    KC(16),	KS_m,	KS_M,	KS_Cyrillic_ssighn,	KS_Cyrillic_SSIGHN,
    KC(17),	KS_n,	KS_N,	KS_Cyrillic_te,	KS_Cyrillic_TE,
    KC(18),	KS_o,	KS_O,	KS_Cyrillic_scha,	KS_Cyrillic_SCHA,
    KC(19),	KS_p,	KS_P,	KS_Cyrillic_ze,	KS_Cyrillic_ZE,
    KC(20),	KS_q,	KS_Q,	KS_Cyrillic_ishort,	KS_Cyrillic_ISHORT,
    KC(21),	KS_r,	KS_R,	KS_Cyrillic_ka,	KS_Cyrillic_KA,
    KC(22),	KS_s,	KS_S,	KS_Cyrillic_yeru,	KS_Cyrillic_YERU,
    KC(23),	KS_t,	KS_T,	KS_Cyrillic_ie,	KS_Cyrillic_IE,
    KC(24),	KS_u,	KS_U,	KS_Cyrillic_ge,	KS_Cyrillic_GE,
    KC(25),	KS_v,	KS_V,	KS_Cyrillic_em,	KS_Cyrillic_EM,
    KC(26),	KS_w,	KS_W,	KS_Cyrillic_tse,	KS_Cyrillic_TSE,
    KC(27),	KS_x,	KS_X,	KS_Cyrillic_che,	KS_Cyrillic_CHE,
    KC(28),	KS_y,	KS_Y,	KS_Cyrillic_en,	KS_Cyrillic_EN,
    KC(29),	KS_z,	KS_Z,	KS_Cyrillic_ya,	KS_Cyrillic_YA,
    KC(35),	KS_6,	KS_asciicircum,	KS_6,	KS_comma,
    KC(36),	KS_7,	KS_ampersand,	KS_7,	KS_period,
d553 2
a554 2
    KC(48),	KS_bracketright,	KS_braceright,	KS_Cyrillic_hsighn,	KS_Cyrillic_HSIGHN,
    KC(51),	KS_semicolon,	KS_colon,	KS_Cyrillic_zhe,	KS_Cyrillic_ZHE,
d564 30
a593 30
    KC(4),	KS_a,	KS_A,	KS_Cyrillic_ef,	KS_Cyrillic_EF,
    KC(5),	KS_b,	KS_B,	KS_Cyrillic_i,	KS_Cyrillic_I,
    KC(6),	KS_c,	KS_C,	KS_Cyrillic_es,	KS_Cyrillic_ES,
    KC(7),	KS_d,	KS_D,	KS_Cyrillic_ve,	KS_Cyrillic_VE,
    KC(8),	KS_e,	KS_E,	KS_Cyrillic_u,	KS_Cyrillic_U,
    KC(9),	KS_f,	KS_F,	KS_Cyrillic_a,	KS_Cyrillic_A,
    KC(10),	KS_g,	KS_G,	KS_Cyrillic_pe,	KS_Cyrillic_PE,
    KC(11),	KS_h,	KS_H,	KS_Cyrillic_er,	KS_Cyrillic_ER,
    KC(12),	KS_i,	KS_I,	KS_Cyrillic_sha,	KS_Cyrillic_SHA,
    KC(13),	KS_j,	KS_J,	KS_Cyrillic_o,	KS_Cyrillic_O,
    KC(14),	KS_k,	KS_K,	KS_Cyrillic_el,	KS_Cyrillic_EL,
    KC(15),	KS_l,	KS_L,	KS_Cyrillic_de,	KS_Cyrillic_DE,
    KC(16),	KS_m,	KS_M,	KS_Cyrillic_ssighn,	KS_Cyrillic_SSIGHN,
    KC(17),	KS_n,	KS_N,	KS_Cyrillic_te,	KS_Cyrillic_TE,
    KC(18),	KS_o,	KS_O,	KS_Cyrillic_scha,	KS_Cyrillic_SCHA,
    KC(19),	KS_p,	KS_P,	KS_Cyrillic_ze,	KS_Cyrillic_ZE,
    KC(20),	KS_q,	KS_Q,	KS_Cyrillic_ishort,	KS_Cyrillic_ISHORT,
    KC(21),	KS_r,	KS_R,	KS_Cyrillic_ka,	KS_Cyrillic_KA,
    KC(22),	KS_s,	KS_S,	KS_Cyrillic_yeru,	KS_Cyrillic_YERU,
    KC(23),	KS_t,	KS_T,	KS_Cyrillic_ie,	KS_Cyrillic_IE,
    KC(24),	KS_u,	KS_U,	KS_Cyrillic_ge,	KS_Cyrillic_GE,
    KC(25),	KS_v,	KS_V,	KS_Cyrillic_em,	KS_Cyrillic_EM,
    KC(26),	KS_w,	KS_W,	KS_Cyrillic_tse,	KS_Cyrillic_TSE,
    KC(27),	KS_x,	KS_X,	KS_Cyrillic_che,	KS_Cyrillic_CHE,
    KC(28),	KS_y,	KS_Y,	KS_Cyrillic_en,	KS_Cyrillic_EN,
    KC(29),	KS_z,	KS_Z,	KS_Cyrillic_ya,	KS_Cyrillic_YA,
    KC(35),	KS_6,	KS_asciicircum,	KS_6,	KS_comma,
    KC(36),	KS_7,	KS_ampersand,	KS_7,	KS_period,
    KC(45),	KS_minus,	KS_underscore,	KS_Cyrillic_iukr,	KS_Cyrillic_IUKR,
    KC(46),	KS_equal,	KS_plus,	KS_Cyrillic_yeukr,	KS_Cyrillic_YEUKR,
d595 3
a597 3
    KC(48),	KS_bracketright,	KS_braceright,	KS_Cyrillic_hsighn,	KS_Cyrillic_HSIGHN,
    KC(50),	KS_backslash,	KS_bar,	KS_Cyrillic_yi,	KS_Cyrillic_YI,
    KC(51),	KS_semicolon,	KS_colon,	KS_Cyrillic_zhe,	KS_Cyrillic_ZHE,
d599 1
a599 1
    KC(53),	KS_grave,	KS_asciitilde,	KS_Cyrillic_gheukr,	KS_Cyrillic_GHEUKR,
d608 1
a608 1
    KC(8),	KS_e,	KS_E,	KS_currency,
d611 9
a619 9
    KC(30),	KS_1,	KS_plus,	KS_bar,
    KC(31),	KS_2,	KS_quotedbl,	KS_at,
    KC(32),	KS_3,	KS_asterisk,	KS_numbersign,
    KC(33),	KS_4,	KS_ccedilla,
    KC(35),	KS_6,	KS_ampersand,	KS_notsign,
    KC(36),	KS_7,	KS_slash,	KS_brokenbar,
    KC(37),	KS_8,	KS_parenleft,	KS_cent,
    KC(38),	KS_9,	KS_parenright,
    KC(39),	KS_0,	KS_equal,
d621 1
a621 1
    KC(46),	KS_dead_circumflex,KS_dead_grave,	KS_dead_tilde,
d623 1
a623 1
    KC(48),	KS_dead_diaeresis,	KS_exclam,	KS_bracketright,
d651 7
a657 7
    KC(31),	KS_2,	KS_quotedbl,	KS_at,
    KC(32),	KS_3,	KS_numbersign,	KS_sterling,
    KC(35),	KS_6,	KS_ampersand,
    KC(36),	KS_7,	KS_slash,	KS_braceleft,
    KC(37),	KS_8,	KS_parenleft,	KS_bracketleft,
    KC(38),	KS_9,	KS_parenright,	KS_bracketright,
    KC(39),	KS_0,	KS_equal,	KS_braceright,
d683 9
a691 9
    KC(20),	KS_q,	KS_Q,	KS_at,
    KC(30),	KS_1,	KS_exclam,
    KC(31),	KS_2,	KS_quotedbl,
    KC(32),	KS_3,	KS_numbersign,
    KC(35),	KS_6,	KS_ampersand,
    KC(36),	KS_7,	KS_slash,
    KC(37),	KS_8,	KS_parenleft,
    KC(38),	KS_9,	KS_parenright,
    KC(39),	KS_0,	KS_equal,
d693 1
a693 1
    KC(46),	KS_questiondown,	KS_exclamdown,
d699 1
a699 1
    KC(53),	KS_bar,	KS_degree,	KS_notsign,
d709 6
a714 6
    KC(30),	KS_1,	KS_exclam,	KS_onesuperior,
    KC(31),	KS_2,	KS_at,	KS_twosuperior,
    KC(32),	KS_3,	KS_numbersign,	KS_threesuperior,
    KC(33),	KS_4,	KS_dollar,	KS_sterling,
    KC(34),	KS_5,	KS_percent,	KS_cent,
    KC(35),	KS_6,	KS_dead_diaeresis,	KS_notsign,
d718 1
a718 1
    KC(50),	KS_bracketright,	KS_braceright,	KS_masculine,
d731 10
a740 10
    KC(20),	KS_q,	KS_Q,	KS_at,
    KC(31),	KS_2,	KS_apostrophe,	KS_sterling,
    KC(32),	KS_3,	KS_asciicircum,	KS_numbersign,
    KC(33),	KS_4,	KS_plus,	KS_dollar,
    KC(34),	KS_5,	KS_percent,	KS_onehalf,
    KC(35),	KS_6,	KS_ampersand,
    KC(36),	KS_7,	KS_slash,	KS_braceleft,
    KC(37),	KS_8,	KS_parenleft,	KS_bracketleft,
    KC(38),	KS_9,	KS_parenright,	KS_bracketright,
    KC(39),	KS_0,	KS_equal,	KS_braceright,
d747 1
a747 1
    KC(52),	KS_i,	KS_L5_Idotabove,
d765 9
a773 9
    KC(4),	KS_a,	KS_A,	KS_L2_aogonek,	KS_L2_Aogonek,
    KC(6),	KS_c,	KS_C,	KS_L2_cacute,	KS_L2_Cacute,
    KC(8),	KS_e,	KS_E,	KS_L2_eogonek,	KS_L2_Eogonek,
    KC(15),	KS_l,	KS_L,	KS_L2_lstroke,	KS_L2_Lstroke,
    KC(17),	KS_n,	KS_N,	KS_L2_nacute,	KS_L2_Nacute,
    KC(18),	KS_o,	KS_O,	KS_oacute,	KS_Oacute,
    KC(22),	KS_s,	KS_S,	KS_L2_sacute,	KS_L2_Sacute,
    KC(27),	KS_x,	KS_X,	KS_L2_zacute,	KS_L2_Zacute,
    KC(29),	KS_z,	KS_Z,	KS_L2_zdotabove,KS_L2_Zdotabove,
d779 22
a800 22
    KC(5),	KS_b,	KS_B,	KS_braceleft,
    KC(6),	KS_c,	KS_C,	KS_ampersand,
    KC(9),	KS_f,	KS_F,	KS_bracketleft,
    KC(10),	KS_g,	KS_G,	KS_bracketright,
    KC(12),	KS_i,	KS_I,	KS_iacute,
    KC(13),	KS_j,	KS_J,	KS_iacute,
    KC(17),	KS_n,	KS_N,	KS_braceright,
    KC(20),	KS_q,	KS_Q,	KS_backslash,
    KC(25),	KS_v,	KS_V,	KS_at,
    KC(26),	KS_w,	KS_W,KS_bar,
    KC(27),	KS_x,	KS_X,	KS_numbersign,
    KC(28),	KS_z,	KS_Z,
    KC(29),	KS_y,	KS_Y,	KS_greater,
    KC(30),	KS_1,	KS_apostrophe,	KS_asciitilde,
    KC(31),	KS_2,	KS_quotedbl,
    KC(32),	KS_3,	KS_plus,	KS_asciicircum,
    KC(33),	KS_4,	KS_exclam,
    KC(34),	KS_5,	KS_percent,
    KC(35),	KS_6,	KS_slash,
    KC(36),	KS_7,	KS_equal,KS_grave,
    KC(37),	KS_8,	KS_parenleft,
    KC(38),	KS_9,	KS_parenright,	KS_acute,
d804 1
a804 1
    KC(47),	KS_odoubleacute,	KS_Odoubleacute,	KS_division,
d806 1
a806 1
    KC(50),	KS_udoubleacute,	KS_Udoubleacute,	KS_currency,
d809 1
a809 1
    KC(53),	KS_0,	KS_section,
d820 22
a841 22
    KC(5),	KS_b,	KS_B,	KS_braceleft,
    KC(9),	KS_f,	KS_F,	KS_bracketleft,
    KC(10),	KS_g,	KS_G,	KS_bracketright,
    KC(14),	KS_k,	KS_K,	KS_L2_lstroke,
    KC(15),	KS_l,	KS_L,	KS_L2_Lstroke,
    KC(16),	KS_m,	KS_M,	KS_section,
    KC(17),	KS_n,	KS_N,	KS_braceright,
    KC(20),	KS_q,	KS_Q,	KS_backslash,
    KC(25),	KS_v,	KS_V,	KS_at,
    KC(26),	KS_w,	KS_W,	KS_bar,
    KC(28),	KS_z,	KS_Z,
    KC(29),	KS_y,	KS_Y,
    KC(30),	KS_1,	KS_exclam,	KS_asciitilde,
    KC(31),	KS_2,	KS_quotedbl,	KS_L2_caron,
    KC(32),	KS_3,	KS_numbersign,	KS_asciicircum,
    KC(33),	KS_4,	KS_dollar,	KS_L2_breve,
    KC(34),	KS_5,	KS_percent,	KS_degree,
    KC(35),	KS_6,	KS_ampersand,	KS_L2_ogonek,
    KC(36),	KS_7,	KS_slash,	KS_grave,
    KC(37),	KS_8,	KS_parenleft,	KS_L2_dotabove,
    KC(38),	KS_9,	KS_parenright,	KS_acute,
    KC(39),	KS_0,	KS_equal,	KS_L2_dblacute,
d859 13
a871 13
    KC(16),	KS_m,	KS_M,	KS_mu,
    KC(18),	KS_o,	KS_O,	KS_section,
    KC(19),	KS_p,	KS_P,	KS_paragraph,
    KC(30),	KS_1,	KS_exclam,	KS_plusminus,
    KC(31),	KS_2,	KS_quotedbl,	KS_at,
    KC(32),	KS_3,	KS_slash,	KS_sterling,
    KC(33),	KS_4,	KS_dollar,	KS_cent,
    KC(34),	KS_5,	KS_percent,	KS_diaeresis,
    KC(35),	KS_6,	KS_question,	KS_macron,
    KC(36),	KS_7,	KS_ampersand,	KS_brokenbar,
    KC(37),	KS_8,	KS_asterisk,	KS_twosuperior,
    KC(38),	KS_9,	KS_parenleft,	KS_threesuperior,
    KC(39),	KS_0,	KS_parenright,	KS_onequarter,
d874 2
a875 2
    KC(47),	KS_dead_circumflex,KS_dead_circumflex,	KS_bracketleft,
    KC(48),	KS_dead_cedilla,KS_dead_diaeresis,	KS_bracketright,
d879 1
a879 1
    KC(53),	KS_numbersign,	KS_bar,	KS_backslash,
d883 1
a883 1
    KC(100),	KS_guillemotleft,KS_guillemotright,	KS_degree,
d889 1
a889 1
    KC(47),	KS_asciicircum,KS_asciicircum,	KS_bracketleft,
@


1.17
log
@Regen
@
text
@d7 1
a7 1
 *	OpenBSD: makemap.awk,v 1.1 2005/05/09 05:08:32 miod Exp 
d673 8
d934 1
@


1.16
log
@.pt map from Manuel Pata <pata@@alface.de>
@
text
@d1 1
a1 2
/*	$OpenBSD: ukbdmap.c,v 1.15 2004/07/26 14:07:50 miod Exp $ */
/*	$NetBSD: ukbdmap.c,v 1.11 2002/07/11 21:14:31 augustss Exp $	*/
d4 18
a21 1
 * Copyright (c) 1999,2001 The NetBSD Foundation, Inc.
d25 1
a25 2
 * by Lennart Augustsson (lennart@@augustsson.net) at
 * Carlstedt Research & Technology.
a58 1

d61 1
a61 1
#define KC(n)		KS_KEYCODE(n)
d63 1
a63 1
Static const keysym_t ukbd_keydesc_us[] = {
d65 199
a263 130
    KC(4), 			KS_a,
    KC(5), 			KS_b,
    KC(6), 			KS_c,
    KC(7), 			KS_d,
    KC(8), 			KS_e,
    KC(9), 			KS_f,
    KC(10), 			KS_g,
    KC(11), 			KS_h,
    KC(12), 			KS_i,
    KC(13), 			KS_j,
    KC(14), 			KS_k,
    KC(15), 			KS_l,
    KC(16), 			KS_m,
    KC(17), 			KS_n,
    KC(18), 			KS_o,
    KC(19), 			KS_p,
    KC(20), 			KS_q,
    KC(21), 			KS_r,
    KC(22), 			KS_s,
    KC(23), 			KS_t,
    KC(24), 			KS_u,
    KC(25), 			KS_v,
    KC(26), 			KS_w,
    KC(27), 			KS_x,
    KC(28), 			KS_y,
    KC(29), 			KS_z,
    KC(30),  			KS_1,		KS_exclam,
    KC(31),  			KS_2,		KS_at,
    KC(32),  			KS_3,		KS_numbersign,
    KC(33),  			KS_4,		KS_dollar,
    KC(34),  			KS_5,		KS_percent,
    KC(35),  			KS_6,		KS_asciicircum,
    KC(36),  			KS_7,		KS_ampersand,
    KC(37),  			KS_8,		KS_asterisk,
    KC(38), 			KS_9,		KS_parenleft,
    KC(39), 			KS_0,		KS_parenright,
    KC(40), 			KS_Return,
    KC(41),   KS_Cmd_Debugger,	KS_Escape,
    KC(42), 			KS_Delete,
    KC(43), 			KS_Tab,
    KC(44), 			KS_space,
    KC(45), 			KS_minus,	KS_underscore,
    KC(46), 			KS_equal,	KS_plus,
    KC(47), 			KS_bracketleft,	KS_braceleft,
    KC(48), 			KS_bracketright,KS_braceright,
    KC(49), 			KS_backslash,	KS_bar,
    KC(50),			KS_numbersign,	KS_asciitilde,
    KC(51), 			KS_semicolon,	KS_colon,
    KC(52), 			KS_apostrophe,	KS_quotedbl,
    KC(53), 			KS_grave,	KS_asciitilde,
    KC(54), 			KS_comma,	KS_less,
    KC(55), 			KS_period,	KS_greater,
    KC(56), 			KS_slash,	KS_question,
    KC(57), 			KS_Caps_Lock,
    KC(58),  KS_Cmd_Screen0,	KS_f1,
    KC(59),  KS_Cmd_Screen1,	KS_f2,
    KC(60),  KS_Cmd_Screen2,	KS_f3,
    KC(61),  KS_Cmd_Screen3,	KS_f4,
    KC(62),  KS_Cmd_Screen4,	KS_f5,
    KC(63),  KS_Cmd_Screen5,	KS_f6,
    KC(64),  KS_Cmd_Screen6,	KS_f7,
    KC(65),  KS_Cmd_Screen7,	KS_f8,
    KC(66),  KS_Cmd_Screen8,	KS_f9,
    KC(67),  KS_Cmd_Screen9,	KS_f10,
    KC(68),  KS_Cmd_Screen10,	KS_f11,
    KC(69),  KS_Cmd_Screen11,	KS_f12,
    KC(70),			KS_Print_Screen,
    KC(71), 			KS_Hold_Screen,
    KC(72),			KS_Pause,
    KC(73),			KS_Insert,
    KC(74),			KS_Home,
    KC(75), KS_Cmd_ScrollBack,	KS_Prior,
    KC(76),			KS_Delete,
    KC(77),			KS_End,
    KC(78), KS_Cmd_ScrollFwd,	KS_Next,
    KC(79),			KS_Right,
    KC(80),			KS_Left,
    KC(81),			KS_Down,
    KC(82),			KS_Up,
    KC(83), 			KS_Num_Lock,
    KC(84),			KS_KP_Divide,
    KC(85), 			KS_KP_Multiply,
    KC(86), 			KS_KP_Subtract,
    KC(87), 			KS_KP_Add,
    KC(88),			KS_KP_Enter,
    KC(89), 			KS_KP_End,	KS_KP_1,
    KC(90), 			KS_KP_Down,	KS_KP_2,
    KC(91), 			KS_KP_Next,	KS_KP_3,
    KC(92), 			KS_KP_Left,	KS_KP_4,
    KC(93), 			KS_KP_Begin,	KS_KP_5,
    KC(94), 			KS_KP_Right,	KS_KP_6,
    KC(95), 			KS_KP_Home,	KS_KP_7,
    KC(96), 			KS_KP_Up,	KS_KP_8,
    KC(97), 			KS_KP_Prior,	KS_KP_9,
    KC(98), 			KS_KP_Insert,	KS_KP_0,
    KC(99),   KS_Cmd_KbdReset,	KS_KP_Delete,	KS_KP_Decimal,
    KC(100),			KS_backslash,	KS_bar,
    KC(101),			KS_Menu,
/* ... many unmapped keys ... */
    KC(224),  KS_Cmd1,		KS_Control_L,
    KC(225), 			KS_Shift_L,
    KC(226),  KS_Cmd2,		KS_Alt_L,
    KC(227),			KS_Meta_L,
    KC(228),			KS_Control_R,
    KC(229), 			KS_Shift_R,
    KC(230),			KS_Alt_R,	KS_Multi_key,
    KC(231),			KS_Meta_R,
};

Static const keysym_t ukbd_keydesc_jp[] = {
/*  pos		command		normal			shifted */
    KC(31),			KS_2,			KS_quotedbl,
    KC(35),			KS_6,			KS_ampersand,
    KC(36),			KS_7,			KS_apostrophe,
    KC(37),			KS_8,			KS_parenleft,
    KC(38),			KS_9,			KS_parenright,
    KC(39),			KS_0,
    KC(45),			KS_minus,		KS_equal,
    KC(46),			KS_asciicircum,		KS_asciitilde,
    KC(47),			KS_at,			KS_grave,
    KC(48),			KS_bracketleft,		KS_braceleft,
    KC(50),			KS_bracketright,	KS_braceright,
    KC(51),			KS_semicolon,		KS_plus,
    KC(52),			KS_colon,		KS_asterisk,
    KC(53),			KS_Zenkaku_Hankaku, /* replace grave/tilde */
    KC(135),			KS_backslash,		KS_underscore,
    KC(136),			KS_Hiragana_Katakana,
    KC(137),			KS_backslash,		KS_bar,
    KC(138),			KS_Henkan,
    KC(139),			KS_Muhenkan,
d266 194
a459 4
Static const keysym_t ukbd_keydesc_swapctrlcaps[] = {
/*  pos      command		normal		shifted */
    KC(57), 			KS_Control_L,
    KC(224), KS_Cmd1,		KS_Caps_Lock,
a461 124
Static const keysym_t ukbd_keydesc_de[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(16),  KS_m,		KS_M,		KS_mu,
    KC(20),  KS_q,		KS_Q,		KS_at,
    KC(28),  KS_z,
    KC(29),  KS_y,
    KC(31),  KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(32),  KS_3,		KS_section,	KS_threesuperior,
    KC(35),  KS_6,		KS_ampersand,
    KC(36),  KS_7,		KS_slash,	KS_braceleft,
    KC(37),  KS_8,		KS_parenleft,	KS_bracketleft,
    KC(38),  KS_9,		KS_parenright,	KS_bracketright,
    KC(39),  KS_0,		KS_equal,	KS_braceright,
    KC(45),  KS_ssharp,		KS_question,	KS_backslash,
    KC(46),  KS_dead_acute,	KS_dead_grave,
    KC(47),  KS_udiaeresis,
    KC(48),  KS_plus,		KS_asterisk,	KS_dead_tilde,
    KC(50),  KS_numbersign,	KS_apostrophe,
    KC(51),  KS_odiaeresis,
    KC(52),  KS_adiaeresis,
    KC(53),  KS_dead_circumflex,KS_dead_abovering,
    KC(54),  KS_comma,		KS_semicolon,
    KC(55),  KS_period,		KS_colon,
    KC(56),  KS_minus,		KS_underscore,
    KC(100), KS_less,		KS_greater,	KS_bar,		KS_brokenbar,
    KC(230), KS_Mode_switch,	KS_Multi_key,
};

Static const keysym_t ukbd_keydesc_de_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(46),  KS_apostrophe,	KS_grave,
    KC(48),  KS_plus,		KS_asterisk,	KS_asciitilde,
    KC(53),  KS_asciicircum,	KS_degree,
};

Static const keysym_t ukbd_keydesc_dk[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(31),  KS_2,		KS_quotedbl,	KS_at,
    KC(32),  KS_3,		KS_numbersign,	KS_sterling,
    KC(33),  KS_4,		KS_currency,	KS_dollar,
    KC(35),  KS_6,		KS_ampersand,
    KC(36),  KS_7,		KS_slash,	KS_braceleft,
    KC(37),  KS_8,		KS_parenleft,	KS_bracketleft,
    KC(38),  KS_9,		KS_parenright,	KS_bracketright,
    KC(39),  KS_0,		KS_equal,	KS_braceright,
    KC(45),  KS_plus,		KS_question,
    KC(46),  KS_dead_acute,	KS_dead_grave,	KS_bar,
    KC(47),  KS_aring,
    KC(48),  KS_dead_diaeresis,	KS_dead_circumflex, KS_dead_tilde,
    KC(50),  KS_apostrophe,	KS_asterisk,
    KC(51),  KS_ae,
    KC(52),  KS_oslash,
    KC(53),  KS_onehalf,	KS_paragraph,
    KC(54),  KS_comma,		KS_semicolon,
    KC(55),  KS_period,		KS_colon,
    KC(56),  KS_minus,		KS_underscore,
    KC(100), KS_less,		KS_greater,	KS_backslash,
    KC(230), KS_Mode_switch,	KS_Multi_key,
};

Static const keysym_t ukbd_keydesc_dk_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(46),  KS_apostrophe,	KS_grave,	KS_bar,
    KC(48),  KS_diaeresis,	KS_asciicircum,	KS_asciitilde,
};

Static const keysym_t ukbd_keydesc_sv[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(45),  KS_plus,		KS_question,	KS_backslash,
    KC(48),  KS_dead_diaeresis,	KS_dead_circumflex, KS_dead_tilde,
    KC(51),  KS_odiaeresis,
    KC(52),  KS_adiaeresis,
    KC(53),  KS_paragraph,	KS_onehalf,
    KC(100), KS_less,		KS_greater,	KS_bar,
    KC(230), KS_Mode_switch,	KS_Multi_key,
};

Static const keysym_t ukbd_keydesc_sv_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(46),  KS_apostrophe,	KS_grave,	KS_bar,
    KC(48),  KS_diaeresis,	KS_asciicircum,	KS_asciitilde,
};

Static const keysym_t ukbd_keydesc_no[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(46),  KS_backslash,	KS_dead_grave,	KS_dead_acute,
    KC(48),  KS_dead_diaeresis,	KS_dead_circumflex, KS_dead_tilde,
    KC(51),  KS_oslash,
    KC(52),  KS_ae,
    KC(53),  KS_bar,		KS_paragraph,
    KC(100), KS_less,		KS_greater,
};

Static const keysym_t ukbd_keydesc_no_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(46),  KS_backslash,	KS_grave,	KS_acute,
    KC(48),  KS_diaeresis,	KS_asciicircum,	KS_asciitilde,
};

Static const keysym_t ukbd_keydesc_pt[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
 
    KC(31),  KS_2,		KS_quotedbl,	KS_at,
    KC(32),  KS_3,		KS_numbersign,	KS_sterling,
    KC(35),  KS_6,		KS_ampersand,
    KC(36),  KS_7,		KS_slash,	KS_braceleft,
    KC(37),  KS_8,		KS_parenleft,	KS_bracketleft,
    KC(38),  KS_9,		KS_parenright,	KS_bracketright,
    KC(39),  KS_0,		KS_equal,	KS_braceright,
    KC(45),  KS_apostrophe,	KS_question,
    KC(46),  KS_plus,		KS_asterisk,
    KC(47),  KS_plus,		KS_asterisk,
    KC(48),  KS_dead_acute,	KS_dead_grave,
    KC(49),  KS_less,		KS_greater,
    KC(50),  KS_dead_tilde,	KS_dead_circumflex,
    KC(51),  KS_ccedilla,	KS_Ccedilla,
    KC(52),  KS_masculine,	KS_ordfeminine,
    KC(53),  KS_backslash,	KS_bar,
    KC(54),  KS_comma,		KS_semicolon,
    KC(55),  KS_period,		KS_colon,
    KC(56),  KS_minus,		KS_underscore,
    KC(100), KS_less,		KS_greater,
    KC(226), KS_Mode_switch,	KS_Multi_key,
    KC(230), KS_Mode_switch,	KS_Multi_key,
d463 35
a497 1
/*  KC(184), KS_Mode_switch,	KS_Multi_key, */
d500 4
a503 102
Static const keysym_t ukbd_keydesc_fr[] = {
/*  pos	     normal		shifted		altgr		shift-altgr */
    KC(4),   KS_q,
    KC(16),  KS_comma,		KS_question,
    KC(20),  KS_a,
    KC(26),  KS_z,
    KC(29),  KS_w,
    KC(30),  KS_ampersand,	KS_1,
    KC(31),  KS_eacute,		KS_2,		KS_asciitilde,
    KC(32),  KS_quotedbl,	KS_3,		KS_numbersign,
    KC(33),  KS_apostrophe,	KS_4,		KS_braceleft,
    KC(34),  KS_parenleft,	KS_5,		KS_bracketleft,
    KC(35),  KS_minus,		KS_6,		KS_bar,
    KC(36),  KS_egrave,		KS_7,		KS_grave,
    KC(37),  KS_underscore,	KS_8,		KS_backslash,
    KC(38),  KS_ccedilla,	KS_9,		KS_asciicircum,
    KC(39),  KS_agrave,		KS_0,		KS_at,
    KC(45),  KS_parenright,	KS_degree,	KS_bracketright,
    KC(46),  KS_equal,		KS_plus,	KS_braceright,
    KC(47),  KS_dead_circumflex, KS_dead_diaeresis,
    KC(48),  KS_dollar,		KS_sterling,	KS_currency,
    KC(50),  KS_asterisk,	KS_mu,
    KC(51),  KS_m,
    KC(52),  KS_ugrave,		KS_percent,
    KC(53),  KS_twosuperior,
    KC(54),  KS_semicolon,	KS_period,
    KC(55),  KS_colon,		KS_slash,
    KC(56),  KS_exclam,		KS_section,
    KC(100), KS_less,		KS_greater,
    KC(230), KS_Mode_switch,	KS_Multi_key,
};

Static const keysym_t ukbd_keydesc_it[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(31),  KS_2,	    	KS_quotedbl,	KS_twosuperior,
    KC(32),  KS_3,	    	KS_sterling,	KS_threesuperior,
    KC(33),  KS_4,	    	KS_dollar,
    KC(34),  KS_5,	    	KS_percent,
    KC(35),  KS_6,	    	KS_ampersand,
    KC(36),  KS_7,	    	KS_slash,
    KC(37),  KS_8,	    	KS_parenleft,
    KC(38),  KS_9,	    	KS_parenright,
    KC(39),  KS_0,	    	KS_equal,
    KC(45),  KS_apostrophe,	KS_question,
    KC(46),  KS_igrave,	    	KS_asciicircum,
    KC(47),  KS_egrave,		KS_eacute,	KS_braceleft,	KS_bracketleft,
    KC(48),  KS_plus,		KS_asterisk,	KS_braceright,	KS_bracketright,
    KC(49),  KS_ugrave,		KS_section,
    KC(51),  KS_ograve,		KS_Ccedilla,	KS_at,
    KC(52),  KS_agrave,		KS_degree,	KS_numbersign,
    KC(53),  KS_backslash,	KS_bar,
    KC(54),  KS_comma,		KS_semicolon,
    KC(55),  KS_period,		KS_colon,
    KC(56),  KS_minus,		KS_underscore,
    KC(100), KS_less,		KS_greater,
    KC(230), KS_Mode_switch,	KS_Multi_key,
};

Static const keysym_t ukbd_keydesc_uk[] = {
/*  pos      normal             shifted         altgr           shift-altgr */
    KC(30),  KS_1,              KS_exclam,      KS_plusminus,   KS_exclamdown,
    KC(31),  KS_2,              KS_quotedbl,    KS_twosuperior, KS_cent,
    KC(32),  KS_3,              KS_sterling,    KS_threesuperior,
    KC(33),  KS_4,              KS_dollar,      KS_acute,       KS_currency,
    KC(34),  KS_5,              KS_percent,     KS_mu,          KS_yen,
    KC(35),  KS_6,              KS_asciicircum, KS_paragraph,
    KC(36),  KS_7,              KS_ampersand,   KS_periodcentered, KS_brokenbar,
    KC(37),  KS_8,              KS_asterisk,    KS_cedilla,     KS_ordfeminine,
    KC(38),  KS_9,              KS_parenleft,   KS_onesuperior, KS_diaeresis,
    KC(39),  KS_0,              KS_parenright,  KS_masculine,   KS_copyright,
    KC(45),  KS_minus,          KS_underscore,  KS_hyphen,      KS_ssharp,
    KC(46),  KS_equal,          KS_plus,        KS_onehalf,    KS_guillemotleft,
    KC(49),  KS_numbersign,     KS_asciitilde,  KS_sterling,    KS_thorn,
    KC(52),  KS_apostrophe,     KS_at,          KS_section,     KS_Agrave,
    KC(53),  KS_grave,          KS_grave,       KS_agrave,      KS_agrave,
    KC(100), KS_backslash,      KS_bar,         KS_Udiaeresis,
};

Static const keysym_t ukbd_keydesc_es[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(30),  KS_1,		KS_exclam,	KS_bar,
    KC(31),  KS_2,		KS_quotedbl,	KS_at,
    KC(32),  KS_3,		KS_periodcentered, KS_numbersign,
    KC(33),  KS_4,		KS_dollar,	KS_asciitilde,
    KC(35),  KS_6,		KS_ampersand,
    KC(36),  KS_7,		KS_slash,
    KC(37),  KS_8,		KS_parenleft,
    KC(38),  KS_9,		KS_parenright,
    KC(39),  KS_0,		KS_equal,
    KC(45),  KS_grave,		KS_question,
    KC(46),  KS_exclamdown,	KS_questiondown,
    KC(47),  KS_dead_grave,	KS_dead_circumflex, KS_bracketleft,
    KC(48),  KS_plus,		KS_asterisk,	KS_bracketright,
    KC(49),  KS_ccedilla,	KS_Ccedilla,	KS_braceright,
    KC(51),  KS_ntilde,
    KC(52),  KS_dead_acute,	KS_dead_diaeresis, KS_braceleft,
    KC(53),  KS_degree,		KS_ordfeminine,	KS_backslash,
    KC(54),  KS_comma,		KS_semicolon,
    KC(55),  KS_period,		KS_colon,
    KC(56),  KS_minus,		KS_underscore,
    KC(100), KS_less,		KS_greater,
    KC(230), KS_Mode_switch,	KS_Multi_key,
d506 379
a884 73
Static const keysym_t ukbd_keydesc_be[] = {
/*  pos	     normal		shifted		altgr		shift-altgr */
    KC(4),   KS_q,
    KC(16),  KS_comma,		KS_question,
    KC(20),  KS_a,
    KC(26),  KS_z,
    KC(29),  KS_w,
    KC(30),  KS_ampersand,	KS_1,		KS_bar,
    KC(31),  KS_eacute,		KS_2,		KS_at,
    KC(32),  KS_quotedbl,	KS_3,		KS_numbersign,
    KC(33),  KS_apostrophe,	KS_4,
    KC(34),  KS_parenleft,	KS_5,
    KC(35),  KS_section,	KS_6,		KS_asciicircum,
    KC(36),  KS_egrave,		KS_7,
    KC(37),  KS_exclam,		KS_8,
    KC(38),  KS_ccedilla,	KS_9,		KS_braceleft,
    KC(39),  KS_agrave,		KS_0,		KS_braceright,
    KC(45),  KS_parenright,	KS_degree,
    KC(46),  KS_minus,		KS_underscore,
    KC(47),  KS_dead_circumflex, KS_dead_diaeresis, KS_bracketleft,
    KC(48),  KS_dollar,		KS_asterisk,	KS_bracketright,
    KC(50),  KS_mu,		KS_sterling,	KS_grave,
    KC(51),  KS_m,
    KC(52),  KS_ugrave,		KS_percent,	KS_acute,
    KC(53),  KS_twosuperior,	KS_threesuperior,
    KC(54),  KS_semicolon,	KS_period,
    KC(55),  KS_colon,		KS_slash,
    KC(56),  KS_equal,		KS_plus,	KS_asciitilde,
    KC(100), KS_less,		KS_greater,	KS_backslash,
    KC(230), KS_Mode_switch,	KS_Multi_key,
};

Static const keysym_t ukbd_keydesc_sg[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(30),  KS_1,		KS_plus,	KS_bar,
    KC(31),  KS_2,		KS_quotedbl,	KS_at,
    KC(32),  KS_3,		KS_asterisk,	KS_numbersign,
    KC(33),  KS_4,		KS_ccedilla,
    KC(35),  KS_6,		KS_ampersand,	KS_notsign,
    KC(36),  KS_7,		KS_slash,	KS_brokenbar,
    KC(37),  KS_8,		KS_parenleft,	KS_cent,
    KC(38),  KS_9,		KS_parenright,
    KC(39),  KS_0,		KS_equal,
    KC(45),  KS_apostrophe,	KS_question,	KS_dead_acute,
    KC(46),  KS_dead_circumflex,KS_dead_grave,	KS_dead_tilde,
    KC(8),   KS_e,		KS_E,		KS_currency,
    KC(28),  KS_z,
    KC(47),  KS_udiaeresis,	KS_egrave,	KS_bracketleft,
    KC(48),  KS_dead_diaeresis,	KS_exclam,	KS_bracketright,
    KC(51),  KS_odiaeresis,	KS_eacute,
    KC(52),  KS_adiaeresis,	KS_agrave,	KS_braceleft,
    KC(53),  KS_section,	KS_degree,	KS_dead_abovering,
    KC(50),  KS_dollar,		KS_sterling,	KS_braceright,
    KC(29),  KS_y,
    KC(54),  KS_comma,		KS_semicolon,
    KC(55),  KS_period,		KS_colon,
    KC(56),  KS_minus,		KS_underscore,
    KC(100), KS_less,		KS_greater,	KS_backslash,
    KC(230), KS_Mode_switch,	KS_Multi_key,
};

Static const keysym_t ukbd_keydesc_sg_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(45),  KS_apostrophe,	KS_question,	KS_acute,
    KC(46),  KS_asciicircum,	KS_grave,	KS_asciitilde,
    KC(48),  KS_diaeresis,	KS_exclam,	KS_bracketright
};

Static const keysym_t ukbd_keydesc_sf[] = {
/*  pos      normal            shifted         altgr           shift-altgr */
    KC(47),  KS_egrave,        KS_udiaeresis,  KS_bracketleft,
    KC(51),  KS_eacute,        KS_odiaeresis,
    KC(52),  KS_agrave,        KS_adiaeresis,  KS_braceleft
d887 2
d894 1
a894 3
	KBD_MAP(KB_US | KB_SWAPCTRLCAPS,KB_US,	ukbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_JP,			KB_US,	ukbd_keydesc_jp),
	KBD_MAP(KB_JP | KB_SWAPCTRLCAPS,KB_JP,	ukbd_keydesc_swapctrlcaps),
d897 1
a897 2
	KBD_MAP(KB_FR,                  KB_US,	ukbd_keydesc_fr),
	KBD_MAP(KB_FR | KB_SWAPCTRLCAPS,KB_FR,	ukbd_keydesc_swapctrlcaps),
d902 1
d907 10
a916 1
	KBD_MAP(KB_PT,			KB_US,	ukbd_keydesc_pt),
d918 3
d925 12
a936 1
	KBD_MAP(KB_BE,			KB_US,	ukbd_keydesc_be),
@


1.15
log
@Belgium USB keyboard map; contributed by Richard Ben Aleya.
@
text
@d1 1
a1 1
/*	$OpenBSD: ukbdmap.c,v 1.14 2002/08/26 20:48:12 mickey Exp $ */
d288 29
d516 1
@


1.14
log
@map backspace to delete, not backspace key symbol which are defined the same at the moment; drahn ok@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ukbdmap.c,v 1.13 2002/07/29 03:04:16 nate Exp $ */
d392 32
d487 1
a487 1
	KBD_MAP(KB_ES ,			KB_US,	ukbd_keydesc_es),
d492 1
@


1.13
log
@update copyright and Id tags
@
text
@d1 1
a1 1
/*	$OpenBSD: ukbdmap.c,v 1.12 2002/07/25 02:18:10 nate Exp $ */
d89 1
a89 1
    KC(42), 			KS_BackSpace,
@


1.12
log
@get rid of trailing whitespace
@
text
@d1 2
a2 2
/*	$OpenBSD: ukbdmap.c,v 1.11 2002/05/07 18:29:18 nate Exp $ */
/*	$NetBSD: ukbdmap.c,v 1.6 2001/04/04 05:31:57 toshii Exp $	*/
d5 1
a5 1
 * Copyright (c) 1999 The NetBSD Foundation, Inc.
@


1.11
log
@Meant to commit only ulpt and committed everything.  Most things weren't ready
@
text
@d1 1
a1 1
/*	$OpenBSD: ukbdmap.c,v 1.9 2002/05/05 21:52:16 nate Exp $ */
d120 1
a120 1
    KC(73),			KS_Insert, 
d307 1
a307 1
    KC(47),  KS_dead_circumflex, KS_dead_diaeresis, 
@


1.10
log
@Sync ulpt driver with NetBSD
@
text
@d2 1
a2 1
/*	$NetBSD: ukbdmap.c,v 1.10 2002/03/17 18:01:07 augustss Exp $	*/
d5 1
a5 1
 * Copyright (c) 1999,2001 The NetBSD Foundation, Inc.
d97 1
a97 1
    KC(50), 			KS_backslash,	KS_bar,
a258 1
    KC(50),  KS_comma,		KS_asterisk,
a275 1
    KC(50),  KS_comma,		KS_asterisk,
a360 1
    KC(50),  KS_numbersign,	KS_asciitilde,
@


1.9
log
@whitespace sync with netbsd.
@
text
@d1 2
a2 2
/*	$OpenBSD: ukbdmap.c,v 1.8 2002/03/12 15:16:33 mickey Exp $ */
/*	$NetBSD: ukbdmap.c,v 1.6 2001/04/04 05:31:57 toshii Exp $	*/
d5 1
a5 1
 * Copyright (c) 1999 The NetBSD Foundation, Inc.
d97 1
a97 1
    KC(50),			KS_numbersign,	KS_asciitilde,
d259 1
d277 1
d363 1
@


1.8
log
@swiss german and french keymaps; from pckbd by Mathias Schmocker <smat@@polaris.smat.ch>
@
text
@d1 1
a1 1
/*	$OpenBSD: ukbdmap.c,v 1.7 2001/05/03 02:20:33 aaron Exp $ */
d440 1
a440 1
	KBD_MAP(KB_US | KB_SWAPCTRLCAPS, KB_US,	ukbd_keydesc_swapctrlcaps),
d445 2
a446 2
	KBD_MAP(KB_FR,                  KB_US,  ukbd_keydesc_fr),
	KBD_MAP(KB_FR | KB_SWAPCTRLCAPS, KB_FR, ukbd_keydesc_swapctrlcaps),
@


1.7
log
@Sync with NetBSD. Tested with a USB keyboard, USB mouse, and three different
kue(4) Ethernet devices.
@
text
@d1 1
a1 1
/*	$OpenBSD: ukbdmap.c,v 1.6 2001/03/07 20:42:38 maja Exp $ */
d392 43
d456 4
@


1.7.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ukbdmap.c,v 1.7 2001/05/03 02:20:33 aaron Exp $ */
a391 43
Static const keysym_t ukbd_keydesc_sg[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(30),  KS_1,		KS_plus,	KS_bar,
    KC(31),  KS_2,		KS_quotedbl,	KS_at,
    KC(32),  KS_3,		KS_asterisk,	KS_numbersign,
    KC(33),  KS_4,		KS_ccedilla,
    KC(35),  KS_6,		KS_ampersand,	KS_notsign,
    KC(36),  KS_7,		KS_slash,	KS_brokenbar,
    KC(37),  KS_8,		KS_parenleft,	KS_cent,
    KC(38),  KS_9,		KS_parenright,
    KC(39),  KS_0,		KS_equal,
    KC(45),  KS_apostrophe,	KS_question,	KS_dead_acute,
    KC(46),  KS_dead_circumflex,KS_dead_grave,	KS_dead_tilde,
    KC(8),   KS_e,		KS_E,		KS_currency,
    KC(28),  KS_z,
    KC(47),  KS_udiaeresis,	KS_egrave,	KS_bracketleft,
    KC(48),  KS_dead_diaeresis,	KS_exclam,	KS_bracketright,
    KC(51),  KS_odiaeresis,	KS_eacute,
    KC(52),  KS_adiaeresis,	KS_agrave,	KS_braceleft,
    KC(53),  KS_section,	KS_degree,	KS_dead_abovering,
    KC(50),  KS_dollar,		KS_sterling,	KS_braceright,
    KC(29),  KS_y,
    KC(54),  KS_comma,		KS_semicolon,
    KC(55),  KS_period,		KS_colon,
    KC(56),  KS_minus,		KS_underscore,
    KC(100), KS_less,		KS_greater,	KS_backslash,
    KC(230), KS_Mode_switch,	KS_Multi_key,
};

Static const keysym_t ukbd_keydesc_sg_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(45),  KS_apostrophe,	KS_question,	KS_acute,
    KC(46),  KS_asciicircum,	KS_grave,	KS_asciitilde,
    KC(48),  KS_diaeresis,	KS_exclam,	KS_bracketright
};

Static const keysym_t ukbd_keydesc_sf[] = {
/*  pos      normal            shifted         altgr           shift-altgr */
    KC(47),  KS_egrave,        KS_udiaeresis,  KS_bracketleft,
    KC(51),  KS_eacute,        KS_odiaeresis,
    KC(52),  KS_agrave,        KS_adiaeresis,  KS_braceleft
};

d397 1
a397 1
	KBD_MAP(KB_US | KB_SWAPCTRLCAPS,KB_US,	ukbd_keydesc_swapctrlcaps),
d402 2
a403 2
	KBD_MAP(KB_FR,                  KB_US,	ukbd_keydesc_fr),
	KBD_MAP(KB_FR | KB_SWAPCTRLCAPS,KB_FR,	ukbd_keydesc_swapctrlcaps),
a412 4
	KBD_MAP(KB_SG,			KB_US,	ukbd_keydesc_sg),
	KBD_MAP(KB_SG | KB_NODEAD,	KB_SG,	ukbd_keydesc_sg_nodead),
	KBD_MAP(KB_SF,			KB_SG,	ukbd_keydesc_sf),
	KBD_MAP(KB_SF | KB_NODEAD,	KB_SF,	ukbd_keydesc_sg_nodead),
@


1.7.6.2
log
@sync to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: ukbdmap.c,v 1.11 2002/07/11 21:14:31 augustss Exp $	*/
d5 1
a5 1
 * Copyright (c) 1999,2001 The NetBSD Foundation, Inc.
d89 1
a89 1
    KC(42), 			KS_Delete,
d120 1
a120 1
    KC(73),			KS_Insert,
d307 1
a307 1
    KC(47),  KS_dead_circumflex, KS_dead_diaeresis,
@


1.7.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d2 1
a2 1
/*	$NetBSD: ukbdmap.c,v 1.5 2000/04/27 15:26:49 augustss Exp $	*/
d160 23
d397 3
d403 1
a411 2
	KBD_MAP(KB_US | KB_SWAPCTRLCAPS, KB_US,	ukbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_FR | KB_SWAPCTRLCAPS, KB_FR, ukbd_keydesc_swapctrlcaps),
@


1.7.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: ukbdmap.c,v 1.6 2001/04/04 05:31:57 toshii Exp $	*/
a159 23
Static const keysym_t ukbd_keydesc_jp[] = {
/*  pos		command		normal			shifted */
    KC(31),			KS_2,			KS_quotedbl,
    KC(35),			KS_6,			KS_ampersand,
    KC(36),			KS_7,			KS_apostrophe,
    KC(37),			KS_8,			KS_parenleft,
    KC(38),			KS_9,			KS_parenright,
    KC(39),			KS_0,
    KC(45),			KS_minus,		KS_equal,
    KC(46),			KS_asciicircum,		KS_asciitilde,
    KC(47),			KS_at,			KS_grave,
    KC(48),			KS_bracketleft,		KS_braceleft,
    KC(50),			KS_bracketright,	KS_braceright,
    KC(51),			KS_semicolon,		KS_plus,
    KC(52),			KS_colon,		KS_asterisk,
    KC(53),			KS_Zenkaku_Hankaku, /* replace grave/tilde */
    KC(135),			KS_backslash,		KS_underscore,
    KC(136),			KS_Hiragana_Katakana,
    KC(137),			KS_backslash,		KS_bar,
    KC(138),			KS_Henkan,
    KC(139),			KS_Muhenkan,
};

a373 3
	KBD_MAP(KB_US | KB_SWAPCTRLCAPS, KB_US,	ukbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_JP,			KB_US,	ukbd_keydesc_jp),
	KBD_MAP(KB_JP | KB_SWAPCTRLCAPS,KB_JP,	ukbd_keydesc_swapctrlcaps),
a376 1
	KBD_MAP(KB_FR | KB_SWAPCTRLCAPS, KB_FR, ukbd_keydesc_swapctrlcaps),
d385 2
@


1.7.2.3
log
@Merge in -current from roughly a week ago
@
text
@a391 43
Static const keysym_t ukbd_keydesc_sg[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(30),  KS_1,		KS_plus,	KS_bar,
    KC(31),  KS_2,		KS_quotedbl,	KS_at,
    KC(32),  KS_3,		KS_asterisk,	KS_numbersign,
    KC(33),  KS_4,		KS_ccedilla,
    KC(35),  KS_6,		KS_ampersand,	KS_notsign,
    KC(36),  KS_7,		KS_slash,	KS_brokenbar,
    KC(37),  KS_8,		KS_parenleft,	KS_cent,
    KC(38),  KS_9,		KS_parenright,
    KC(39),  KS_0,		KS_equal,
    KC(45),  KS_apostrophe,	KS_question,	KS_dead_acute,
    KC(46),  KS_dead_circumflex,KS_dead_grave,	KS_dead_tilde,
    KC(8),   KS_e,		KS_E,		KS_currency,
    KC(28),  KS_z,
    KC(47),  KS_udiaeresis,	KS_egrave,	KS_bracketleft,
    KC(48),  KS_dead_diaeresis,	KS_exclam,	KS_bracketright,
    KC(51),  KS_odiaeresis,	KS_eacute,
    KC(52),  KS_adiaeresis,	KS_agrave,	KS_braceleft,
    KC(53),  KS_section,	KS_degree,	KS_dead_abovering,
    KC(50),  KS_dollar,		KS_sterling,	KS_braceright,
    KC(29),  KS_y,
    KC(54),  KS_comma,		KS_semicolon,
    KC(55),  KS_period,		KS_colon,
    KC(56),  KS_minus,		KS_underscore,
    KC(100), KS_less,		KS_greater,	KS_backslash,
    KC(230), KS_Mode_switch,	KS_Multi_key,
};

Static const keysym_t ukbd_keydesc_sg_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(45),  KS_apostrophe,	KS_question,	KS_acute,
    KC(46),  KS_asciicircum,	KS_grave,	KS_asciitilde,
    KC(48),  KS_diaeresis,	KS_exclam,	KS_bracketright
};

Static const keysym_t ukbd_keydesc_sf[] = {
/*  pos      normal            shifted         altgr           shift-altgr */
    KC(47),  KS_egrave,        KS_udiaeresis,  KS_bracketleft,
    KC(51),  KS_eacute,        KS_odiaeresis,
    KC(52),  KS_agrave,        KS_adiaeresis,  KS_braceleft
};

a412 4
	KBD_MAP(KB_SG,			KB_US,	ukbd_keydesc_sg),
	KBD_MAP(KB_SG | KB_NODEAD,	KB_SG,	ukbd_keydesc_sg_nodead),
	KBD_MAP(KB_SF,			KB_SG,	ukbd_keydesc_sf),
	KBD_MAP(KB_SF | KB_NODEAD,	KB_SF,	ukbd_keydesc_sg_nodead),
@


1.7.2.4
log
@Sync the SMP branch with 3.3
@
text
@d2 1
a2 1
/*	$NetBSD: ukbdmap.c,v 1.11 2002/07/11 21:14:31 augustss Exp $	*/
d5 1
a5 1
 * Copyright (c) 1999,2001 The NetBSD Foundation, Inc.
d89 1
a89 1
    KC(42), 			KS_Delete,
d120 1
a120 1
    KC(73),			KS_Insert,
d307 1
a307 1
    KC(47),  KS_dead_circumflex, KS_dead_diaeresis,
d440 1
a440 1
	KBD_MAP(KB_US | KB_SWAPCTRLCAPS,KB_US,	ukbd_keydesc_swapctrlcaps),
d445 2
a446 2
	KBD_MAP(KB_FR,                  KB_US,	ukbd_keydesc_fr),
	KBD_MAP(KB_FR | KB_SWAPCTRLCAPS,KB_FR,	ukbd_keydesc_swapctrlcaps),
@


1.6
log
@Add some non US encodings. Add option UKBD_LAYOUT. -moj ok @@aaron
@
text
@d1 2
a2 2
/*	$OpenBSD: ukbdmap.c,v 1.5 2001/03/01 03:43:12 aaron Exp $ */
/*	$NetBSD: ukbdmap.c,v 1.5 2000/04/27 15:26:49 augustss Exp $	*/
d160 23
d397 3
d403 1
a411 2
	KBD_MAP(KB_US | KB_SWAPCTRLCAPS, KB_US,	ukbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_FR | KB_SWAPCTRLCAPS, KB_FR, ukbd_keydesc_swapctrlcaps),
@


1.5
log
@Add CTRL-ALT-DEL machine reset support, like PCVT had, enabled by the
machdep.kbdreset sysctl as configured in /etc/sysctl.conf.
@
text
@d1 1
a1 1
/*	$OpenBSD: ukbdmap.c,v 1.4 2001/02/11 19:14:06 aaron Exp $ */
d166 203
d374 11
d386 2
@


1.4
log
@Allow up to 12 virtual terminals (CTRL-ALT-F1 through CTRL-ALT-F12). Only
6 are enabled by default. After these changes, to enable more you must
change the "option WSDISPLAY_DEFAULTSCREENS" in the kernel config file and
edit /etc/ttys to switch the new ones from 'off' to 'on'.
@
text
@d1 1
a1 1
/*	$OpenBSD: ukbdmap.c,v 1.3 2001/02/04 01:26:07 aaron Exp $ */
d146 1
a146 1
    KC(99), 			KS_KP_Delete,	KS_KP_Decimal,
@


1.3
log
@Permit scrollback (SHIFT+PGUP/PGDN) to be activated from a USB keyboard.
@
text
@d1 1
a1 1
/*	$OpenBSD: ukbdmap.c,v 1.2 2000/11/08 18:10:38 aaron Exp $ */
d115 2
a116 2
    KC(68), 			KS_f11,
    KC(69), 			KS_f12,
@


1.2
log
@Sync with NetBSD. Too many changes to mention. For now I have skipped
umass.c and ukbd.c as the diffs are a bit hairier.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d122 1
a122 1
    KC(75),			KS_Prior,
d125 1
a125 1
    KC(78),			KS_Next,
@


1.1
log
@Add usb keyboard. from NetBSD.
@
text
@d1 1
@

