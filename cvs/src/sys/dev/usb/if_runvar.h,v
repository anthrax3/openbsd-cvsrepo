head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.10
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.12
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.6
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.8
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.05.24.10.10.17;	author stsp;	state Exp;
branches;
next	1.9;

1.9
date	2013.04.15.09.23.01;	author mglocker;	state Exp;
branches;
next	1.8;

1.8
date	2010.02.08.18.46.47;	author damien;	state Exp;
branches;
next	1.7;

1.7
date	2010.02.07.11.02.24;	author damien;	state Exp;
branches;
next	1.6;

1.6
date	2010.02.07.10.52.33;	author damien;	state Exp;
branches;
next	1.5;

1.5
date	2010.02.07.10.25.21;	author damien;	state Exp;
branches;
next	1.4;

1.4
date	2010.02.07.09.14.55;	author damien;	state Exp;
branches;
next	1.3;

1.3
date	2009.03.26.20.17.27;	author damien;	state Exp;
branches;
next	1.2;

1.2
date	2009.03.14.15.53.23;	author damien;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.03.18.39.33;	author damien;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Support for newer run(4) hardware ported from FreeBSD's run(4) driver.
Committing over MAC/BBP RT5390 (rev 0x0502), RF RT5370 (MIMO 1T1R).
Tested by myself, matthieu@@, juanfra@@
Diff glanced over by kettenis@@
@
text
@/*	$OpenBSD: if_runvar.h,v 1.9 2013/04/15 09:23:01 mglocker Exp $	*/

/*-
 * Copyright (c) 2008,2009 Damien Bergamini <damien.bergamini@@free.fr>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define RUN_MAX_RXSZ			\
	4096
#if 0
	(sizeof (uint32_t) +		\
	 sizeof (struct rt2860_rxwi) +	\
	 sizeof (uint16_t) +		\
	 MCLBYTES +			\
	 sizeof (struct rt2870_rxd))
#endif
/* NB: "11" is the maximum number of padding bytes needed for Tx */
#define RUN_MAX_TXSZ			\
	(sizeof (struct rt2870_txd) +	\
	 sizeof (struct rt2860_txwi) +	\
	 MCLBYTES + 11)

#define RUN_TX_TIMEOUT	5000	/* ms */

#define RUN_RX_RING_COUNT	1
#define RUN_TX_RING_COUNT	8

#define RT2870_WCID_MAX		64
#define RUN_AID2WCID(aid)	((aid) & 0xff)

struct run_rx_radiotap_header {
	struct ieee80211_radiotap_header wr_ihdr;
	uint8_t		wr_flags;
	uint8_t		wr_rate;
	uint16_t	wr_chan_freq;
	uint16_t	wr_chan_flags;
	uint8_t		wr_dbm_antsignal;
	uint8_t		wr_antenna;
	uint8_t		wr_antsignal;
} __packed;

#define RUN_RX_RADIOTAP_PRESENT				\
	(1 << IEEE80211_RADIOTAP_FLAGS |		\
	 1 << IEEE80211_RADIOTAP_RATE |			\
	 1 << IEEE80211_RADIOTAP_CHANNEL |		\
	 1 << IEEE80211_RADIOTAP_DBM_ANTSIGNAL |	\
	 1 << IEEE80211_RADIOTAP_ANTENNA |		\
	 1 << IEEE80211_RADIOTAP_DB_ANTSIGNAL)

struct run_tx_radiotap_header {
	struct ieee80211_radiotap_header wt_ihdr;
	uint8_t		wt_flags;
	uint8_t		wt_rate;
	uint16_t	wt_chan_freq;
	uint16_t	wt_chan_flags;
	uint8_t		wt_hwqueue;
} __packed;

#define RUN_TX_RADIOTAP_PRESENT				\
	(1 << IEEE80211_RADIOTAP_FLAGS |		\
	 1 << IEEE80211_RADIOTAP_RATE |			\
	 1 << IEEE80211_RADIOTAP_CHANNEL |		\
	 1 << IEEE80211_RADIOTAP_HWQUEUE)

struct run_softc;

struct run_tx_data {
	struct run_softc	*sc;
	struct usbd_xfer	*xfer;
	uint8_t			*buf;
	uint8_t			qid;
};

struct run_rx_data {
	struct run_softc	*sc;
	struct usbd_xfer	*xfer;
	uint8_t			*buf;
};

struct run_tx_ring {
	struct run_tx_data	data[RUN_TX_RING_COUNT];
	struct usbd_pipe	*pipeh;
	int			cur;
	int			queued;
	uint8_t			pipe_no;
};

struct run_rx_ring {
	struct run_rx_data	data[RUN_RX_RING_COUNT];
	struct usbd_pipe	*pipeh;
	uint8_t			pipe_no;
};

struct run_host_cmd {
	void	(*cb)(struct run_softc *, void *);
	uint8_t	data[256];
};

struct run_cmd_newstate {
	enum ieee80211_state	state;
	int			arg;
};

struct run_cmd_key {
	struct ieee80211_key	key;
	uint16_t		associd;
};

#define RUN_HOST_CMD_RING_COUNT	32
struct run_host_cmd_ring {
	struct run_host_cmd	cmd[RUN_HOST_CMD_RING_COUNT];
	int			cur;
	int			next;
	int			queued;
};

struct run_node {
	struct ieee80211_node	ni;
	uint8_t			ridx[IEEE80211_RATE_MAXSIZE];
	uint8_t			ctl_ridx[IEEE80211_RATE_MAXSIZE];
};

struct run_softc {
	struct device			sc_dev;
	struct ieee80211com		sc_ic;
	int				(*sc_newstate)(struct ieee80211com *,
					    enum ieee80211_state, int);
	int				(*sc_srom_read)(struct run_softc *,
					    uint16_t, uint16_t *);

	struct usbd_device		*sc_udev;
	struct usbd_interface		*sc_iface;

	uint16_t			mac_ver;
	uint16_t			mac_rev;
	uint16_t			rf_rev;
	uint8_t				freq;
	uint8_t				ntxchains;
	uint8_t				nrxchains;
	int				fixed_ridx;

	uint8_t				bbp25;
	uint8_t				bbp26;
	uint8_t				rf24_20mhz;
	uint8_t				rf24_40mhz;
	uint8_t				patch_dac;
	uint8_t				rfswitch;
	uint8_t				ext_2ghz_lna;
	uint8_t				ext_5ghz_lna;
	uint8_t				calib_2ghz;
	uint8_t				calib_5ghz;
	uint8_t				txmixgain_2ghz;
	uint8_t				txmixgain_5ghz;
	int8_t				txpow1[54];
	int8_t				txpow2[54];
	int8_t				txpow3[54];
	int8_t				rssi_2ghz[3];
	int8_t				rssi_5ghz[3];
	uint8_t				lna[4];

	struct {
		uint8_t	reg;
		uint8_t	val;
	}				bbp[10], rf[10];
	uint8_t				leds;
	uint16_t			led[3];
	uint32_t			txpow20mhz[5];
	uint32_t			txpow40mhz_2ghz[5];
	uint32_t			txpow40mhz_5ghz[5];

	struct usb_task			sc_task;

	struct ieee80211_amrr		amrr;
	struct ieee80211_amrr_node	amn;

	struct timeout			scan_to;
	struct timeout			calib_to;

	struct run_rx_ring		rxq;
	struct run_tx_ring		txq[4];
	struct run_host_cmd_ring	cmdq;
	uint8_t				qfullmsk;
	int				sc_tx_timer;

#if NBPFILTER > 0
	caddr_t				sc_drvbpf;

	union {
		struct run_rx_radiotap_header th;
		uint8_t	pad[64];
	}				sc_rxtapu;
#define sc_rxtap	sc_rxtapu.th
	int				sc_rxtap_len;

	union {
		struct run_tx_radiotap_header th;
		uint8_t	pad[64];
	}				sc_txtapu;
#define sc_txtap	sc_txtapu.th
	int				sc_txtap_len;
#endif
};
@


1.9
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_runvar.h,v 1.8 2010/02/08 18:46:47 damien Exp $	*/
d31 1
a31 1
	 sizeof (struct rt2860_rxwi) +	\
d39 1
a39 1
#define RT2870_WCID_MAX		253
d147 1
a147 1
	uint8_t				rf_rev;
d167 1
@


1.8
log
@add the 10us sifs directly to the pre-computed ack durations.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_runvar.h,v 1.7 2010/02/07 11:02:24 damien Exp $	*/
d80 1
a80 1
	usbd_xfer_handle	xfer;
d87 1
a87 1
	usbd_xfer_handle	xfer;
d93 1
a93 1
	usbd_pipe_handle	pipeh;
d101 1
a101 1
	usbd_pipe_handle	pipeh;
d142 2
a143 2
	usbd_device_handle		sc_udev;
	usbd_interface_handle		sc_iface;
@


1.7
log
@add a function to set the channel on RT3572.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_runvar.h,v 1.6 2010/02/07 10:52:33 damien Exp $	*/
a192 1
	int				sifs;
@


1.6
log
@read vendor RF settings for >=RT3572 and tx mixer gains for >=RT3070
check if we have a hardware RF switch and if we must patch the
DAC issue too.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_runvar.h,v 1.5 2010/02/07 10:25:21 damien Exp $	*/
d153 2
@


1.5
log
@split 32-bit mac_rev into 16-bit mac_ver and mac_rev to avoid
annoying shifts and masks.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_runvar.h,v 1.4 2010/02/07 09:14:55 damien Exp $	*/
d155 2
d161 2
d172 1
a172 1
	}				bbp[8];
@


1.4
log
@add channels 167, 169, 171, 173 for dual-band devices
@
text
@d1 1
a1 1
/*	$OpenBSD: if_runvar.h,v 1.3 2009/03/26 20:17:27 damien Exp $	*/
d145 2
a146 1
	uint32_t			mac_rev;
@


1.3
log
@remove useless code to force an empty transfer in case the length
is a multiple of wMaxPacketSize, since this is exactly what the
USBD_FORCE_SHORT_XFER flag does for us.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_runvar.h,v 1.2 2009/03/14 15:53:23 damien Exp $	*/
d158 2
a159 2
	int8_t				txpow1[50];
	int8_t				txpow2[50];
@


1.2
log
@some devices like the Planex GW-US300MiniS seem to have only 4 Tx bulk
endpoints instead of 6 (4 EDCAs + HCCA + Prio).
since we do not use the last two endpoints anyway, only check that we
have at least found 4 Tx bulk endpoints.

from FUKAUMI Naoki.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_runvar.h,v 1.1 2009/01/03 18:39:33 damien Exp $	*/
a95 1
	uint16_t		pktsize;
@


1.1
log
@run(4), a driver for Ralink RT2700U/RT2800U/RT3000U USB 802.11agn devices.
the driver supports legacy 802.11abg modes only (no 802.11n yet.)
WPA works, with hardware encryption/decryption.

committed over an RT2800U (RT2870+RT2820).
enabled on i386 and amd64 GENERIC only for now.

thanks to Paul Lin at Ralink for letting us ship the firmware under an
appropriate license.

"man page looks ok" jmc@@
"you should commit it" jsg@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d184 1
a184 1
	struct run_tx_ring		txq[6];
@

