head	1.21;
access;
symbols
	OPENBSD_6_1:1.21.0.4
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.20.0.8
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.4
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.18.0.6
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.2
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.17.0.6
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.4
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.2
	OPENBSD_5_0:1.16.0.12
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.10
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.8
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.4
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.6
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.2
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.14.0.2
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.13.0.10
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.8
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.6
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.12.0.4
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	SMP:1.4.0.2
	UBC_SYNC_A:1.2
	UBC_SYNC_B:1.2;
locks; strict;
comment	@ * @;


1.21
date	2016.10.02.06.36.39;	author kettenis;	state Exp;
branches;
next	1.20;
commitid	IMFyKh2keS7O5Fww;

1.20
date	2015.04.10.13.56.42;	author mpi;	state Exp;
branches;
next	1.19;
commitid	NEEggNm5YeE2QUZC;

1.19
date	2014.03.11.10.24.42;	author mpi;	state Exp;
branches;
next	1.18;

1.18
date	2013.04.15.09.23.01;	author mglocker;	state Exp;
branches;
next	1.17;

1.17
date	2011.11.02.19.19.47;	author eric;	state Exp;
branches;
next	1.16;

1.16
date	2008.11.29.08.52.03;	author mglocker;	state Exp;
branches;
next	1.15;

1.15
date	2008.08.09.22.59.20;	author mglocker;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.26.05.42.18;	author ray;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.28.04.36.42;	author fgsch;	state Exp;
branches;
next	1.12;

1.12
date	2004.12.29.01.52.27;	author dlg;	state Exp;
branches;
next	1.11;

1.11
date	2004.10.25.22.30.04;	author dlg;	state Exp;
branches;
next	1.10;

1.10
date	2004.08.11.06.57.42;	author dlg;	state Exp;
branches;
next	1.9;

1.9
date	2004.07.07.00.58.42;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2004.07.07.00.58.05;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.05.03.09.57;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2004.07.05.03.08.56;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2004.07.05.03.07.45;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.30.01.25.17;	author tedu;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2004.05.23.03.23.01;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.07.18.29.18;	author nate;	state dead;
branches;
next	1.1;

1.1
date	2002.05.07.18.08.04;	author nate;	state Exp;
branches;
next	;

1.4.2.1
date	2004.06.05.23.12.57;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Save and restore the (non-standard) USBMODE register around a reset of the
controller.  This register controls whether the controller is in device or
host mode on many dual role controllers and gets reset during a reset of
the controller, placing the controller in (non-functional) idle mode.  By
saving and restoring it, we keep the controller in host mode.  Since this is
a non-standard register, add a new EHCIF_USBMODE flag and only do the save and
restore if it has been set.

Makes the upper "OTG" port of the Cubox-i work.

ok mpi@@, jsg@@
@
text
@/*	$OpenBSD: ehcireg.h,v 1.20 2015/04/10 13:56:42 mpi Exp $ */
/*	$NetBSD: ehcireg.h,v 1.17 2004/06/23 06:45:56 mycroft Exp $	*/

/*
 * Copyright (c) 2001, 2004 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@@augustsson.net).
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _DEV_PCI_EHCIREG_H_
#define _DEV_PCI_EHCIREG_H_

/*** PCI config registers ***/

#define PCI_CBMEM		0x10	/* configuration base MEM */

#define PCI_INTERFACE_EHCI	0x20

#define PCI_USBREV		0x60	/* RO USB protocol revision */
#define  PCI_USBREV_MASK	0xff
#define  PCI_USBREV_PRE_1_0	0x00
#define  PCI_USBREV_1_0		0x10
#define  PCI_USBREV_1_1		0x11
#define  PCI_USBREV_2_0		0x20

#define PCI_EHCI_FLADJ		0x61	/*RW Frame len adj, SOF=59488+6*fladj */

#define PCI_EHCI_PORTWAKECAP	0x62	/* RW Port wake caps (opt)  */

/* EHCI Extended Capabilities */
#define EHCI_EC_LEGSUP		0x01

#define EHCI_EECP_NEXT(x)	(((x) >> 8) & 0xff)
#define EHCI_EECP_ID(x)		((x) & 0xff)

#define EHCI_LEGSUP_LEGSUP	0x00
#define  EHCI_LEGSUP_OSOWNED	0x01000000 /* OS owned semaphore */
#define  EHCI_LEGSUP_BIOSOWNED	0x00010000 /* BIOS owned semaphore */
#define PCI_LEGSUP_USBLEGCTLSTS	0x04

/*** EHCI capability registers ***/

#define EHCI_CAPLENGTH		0x00	/*RO Capability register length field */
/* reserved			0x01 */
#define EHCI_HCIVERSION		0x02	/* RO Interface version number */

#define EHCI_HCSPARAMS		0x04	/* RO Structural parameters */
#define  EHCI_HCS_DEBUGPORT(x)	(((x) >> 20) & 0xf)
#define  EHCI_HCS_P_INDICATOR(x) ((x) & 0x10000)
#define  EHCI_HCS_N_CC(x)	(((x) >> 12) & 0xf) /* # of companion ctlrs */
#define  EHCI_HCS_N_PCC(x)	(((x) >> 8) & 0xf) /* # of ports per comp. */
#define  EHCI_HCS_PRR(x)	((x) & 0x80) /* port routing rules */
#define  EHCI_HCS_PPC(x)	((x) & 0x10) /* port power control */
#define  EHCI_HCS_N_PORTS(x)	((x) & 0xf) /* # of ports */

#define EHCI_HCCPARAMS		0x08	/* RO Capability parameters */
#define  EHCI_HCC_EECP(x)	(((x) >> 8) & 0xff) /* extended ports caps */
#define  EHCI_HCC_IST(x)	(((x) >> 4) & 0xf) /* isoc sched threshold */
#define  EHCI_HCC_ASPC(x)	((x) & 0x4) /* async sched park cap */
#define  EHCI_HCC_PFLF(x)	((x) & 0x2) /* prog frame list flag */
#define  EHCI_HCC_64BIT(x)	((x) & 0x1) /* 64 bit address cap */

#define EHCI_HCSP_PORTROUTE	0x0c	/*RO Companion port route description */

/* EHCI operational registers.  Offset given by EHCI_CAPLENGTH register */
#define EHCI_USBCMD		0x00	/* RO, RW, WO Command register */
#define  EHCI_CMD_ITC_M		0x00ff0000 /* RW interrupt threshold ctrl */
#define   EHCI_CMD_ITC_1	0x00010000
#define   EHCI_CMD_ITC_2	0x00020000
#define   EHCI_CMD_ITC_4	0x00040000
#define   EHCI_CMD_ITC_8	0x00080000
#define   EHCI_CMD_ITC_16	0x00100000
#define   EHCI_CMD_ITC_32	0x00200000
#define   EHCI_CMD_ITC_64	0x00400000
#define  EHCI_CMD_ASPME		0x00000800 /* RW/RO async park enable */
#define  EHCI_CMD_ASPMC		0x00000300 /* RW/RO async park count */
#define  EHCI_CMD_LHCR		0x00000080 /* RW light host ctrl reset */
#define  EHCI_CMD_IAAD		0x00000040 /* RW intr on async adv door bell */
#define  EHCI_CMD_ASE		0x00000020 /* RW async sched enable */
#define  EHCI_CMD_PSE		0x00000010 /* RW periodic sched enable */
#define  EHCI_CMD_FLS_M		0x0000000c /* RW/RO frame list size */
#define  EHCI_CMD_FLS(x)	(((x) >> 2) & 3) /* RW/RO frame list size */
#define  EHCI_CMD_HCRESET	0x00000002 /* RW reset */
#define  EHCI_CMD_RS		0x00000001 /* RW run/stop */

#define EHCI_USBSTS		0x04	/* RO, RW, RWC Status register */
#define  EHCI_STS_ASS		0x00008000 /* RO async sched status */
#define  EHCI_STS_PSS		0x00004000 /* RO periodic sched status */
#define  EHCI_STS_REC		0x00002000 /* RO reclamation */
#define  EHCI_STS_HCH		0x00001000 /* RO host controller halted */
#define  EHCI_STS_IAA		0x00000020 /* RWC interrupt on async adv */
#define  EHCI_STS_HSE		0x00000010 /* RWC host system error */
#define  EHCI_STS_FLR		0x00000008 /* RWC frame list rollover */
#define  EHCI_STS_PCD		0x00000004 /* RWC port change detect */
#define  EHCI_STS_ERRINT	0x00000002 /* RWC error interrupt */
#define  EHCI_STS_INT		0x00000001 /* RWC interrupt */
#define  EHCI_STS_INTRS(x)	((x) & 0x3f)

#define EHCI_NORMAL_INTRS (EHCI_STS_IAA | EHCI_STS_HSE | EHCI_STS_PCD | EHCI_STS_ERRINT | EHCI_STS_INT)

#define EHCI_USBINTR		0x08	/* RW Interrupt register */
#define EHCI_INTR_IAAE		0x00000020 /* interrupt on async advance ena */
#define EHCI_INTR_HSEE		0x00000010 /* host system error ena */
#define EHCI_INTR_FLRE		0x00000008 /* frame list rollover ena */
#define EHCI_INTR_PCIE		0x00000004 /* port change ena */
#define EHCI_INTR_UEIE		0x00000002 /* USB error intr ena */
#define EHCI_INTR_UIE		0x00000001 /* USB intr ena */

#define EHCI_FRINDEX		0x0c	/* RW Frame Index register */

#define EHCI_CTRLDSSEGMENT	0x10	/* RW Control Data Structure Segment */

#define EHCI_PERIODICLISTBASE	0x14	/* RW Periodic List Base */
#define EHCI_ASYNCLISTADDR	0x18	/* RW Async List Base */

#define EHCI_CONFIGFLAG		0x40	/* RW Configure Flag register */
#define  EHCI_CONF_CF		0x00000001 /* RW configure flag */

#define EHCI_PORTSC(n)		(0x40+4*(n)) /* RO, RW, RWC Port Status reg */
#define  EHCI_PS_WKOC_E		0x00400000 /* RW wake on over current ena */
#define  EHCI_PS_WKDSCNNT_E	0x00200000 /* RW wake on disconnect ena */
#define  EHCI_PS_WKCNNT_E	0x00100000 /* RW wake on connect ena */
#define  EHCI_PS_PTC		0x000f0000 /* RW port test control */
#define  EHCI_PS_PIC		0x0000c000 /* RW port indicator control */
#define  EHCI_PS_PO		0x00002000 /* RW port owner */
#define  EHCI_PS_PP		0x00001000 /* RW,RO port power */
#define  EHCI_PS_LS		0x00000c00 /* RO line status */
#define  EHCI_PS_IS_LOWSPEED(x)	(((x) & EHCI_PS_LS) == 0x00000400)
#define  EHCI_PS_PR		0x00000100 /* RW port reset */
#define  EHCI_PS_SUSP		0x00000080 /* RW suspend */
#define  EHCI_PS_FPR		0x00000040 /* RW force port resume */
#define  EHCI_PS_OCC		0x00000020 /* RWC over current change */
#define  EHCI_PS_OCA		0x00000010 /* RO over current active */
#define  EHCI_PS_PEC		0x00000008 /* RWC port enable change */
#define  EHCI_PS_PE		0x00000004 /* RW port enable */
#define  EHCI_PS_CSC		0x00000002 /* RWC connect status change */
#define  EHCI_PS_CS		0x00000001 /* RO connect status */
#define  EHCI_PS_CLEAR		(EHCI_PS_OCC|EHCI_PS_PEC|EHCI_PS_CSC)

#define EHCI_PORT_RESET_COMPLETE 2 /* ms */

/* Nonstandard register to set controller mode. */
#define EHCI_USBMODE		0x68
#define  EHCI_USBMODE_CM_M	0x00000003
#define  EHCI_USBMODE_CM_IDLE	0x00000000
#define  EHCI_USBMODE_CM_DEVICE	0x00000002
#define  EHCI_USBMODE_CM_HOST	0x00000003 	

#define EHCI_FLALIGN_ALIGN	0x1000

/* No data structure may cross a page boundary. */
#define EHCI_PAGE_SIZE		0x1000
#define EHCI_PAGE(x)		((x) &~ 0xfff)
#define EHCI_PAGE_OFFSET(x)	((x) & 0xfff)

typedef u_int32_t ehci_link_t;
#define EHCI_LINK_TERMINATE	0x00000001
#define EHCI_LINK_TYPE(x)	((x) & 0x00000006)
#define  EHCI_LINK_ITD		0x0
#define  EHCI_LINK_QH		0x2
#define  EHCI_LINK_SITD		0x4
#define  EHCI_LINK_FSTN		0x6
#define EHCI_LINK_ADDR(x)	((x) &~ 0x1f)

typedef u_int32_t ehci_physaddr_t;
typedef u_int32_t ehci_isoc_trans_t;
typedef u_int32_t ehci_isoc_bufr_ptr_t;
#define	EHCI_BUFPTR_MASK	0xfffff000

/* Isochronous Transfer Descriptor */
#define EHCI_ITD_NTRANS		8
#define EHCI_ITD_NBUFFERS	7
struct ehci_itd {
	volatile ehci_link_t            itd_next;
	volatile ehci_isoc_trans_t      itd_ctl[8];
#define EHCI_ITD_GET_STATUS(x)	(((x) >> 28) & 0xf)
#define EHCI_ITD_SET_STATUS(x)	(((x) & 0xf) << 28)
#define EHCI_ITD_ACTIVE		0x80000000
#define EHCI_ITD_BUF_ERR	0x40000000
#define EHCI_ITD_BABBLE		0x20000000
#define EHCI_ITD_ERROR		0x10000000
#define EHCI_ITD_GET_LEN(x)	(((x) >> 16) & 0xfff)
#define EHCI_ITD_SET_LEN(x)	(((x) & 0xfff) << 16)
#define EHCI_ITD_IOC		0x8000
#define EHCI_ITD_GET_IOC(x)	(((x) >> 15) & 1)
#define EHCI_ITD_SET_IOC(x)	(((x) << 15) & EHCI_ITD_IOC)
#define EHCI_ITD_GET_PG(x)	(((x) >> 12) & 0x7)
#define EHCI_ITD_SET_PG(x)	(((x) & 0x7) << 12)
#define EHCI_ITD_GET_OFFS(x)	(((x) >> 0) & 0xfff)
#define EHCI_ITD_SET_OFFS(x)	(((x) & 0xfff) << 0)
	volatile ehci_isoc_bufr_ptr_t   itd_bufr[7];
#define EHCI_ITD_GET_ENDPT(x)	(((x) >> 8) & 0xf)
#define EHCI_ITD_SET_ENDPT(x)	(((x) & 0xf) << 8)
#define EHCI_ITD_GET_DADDR(x)	((x) & 0x7f)
#define EHCI_ITD_SET_DADDR(x)	((x) & 0x7f)
#define EHCI_ITD_GET_DIR(x)	(((x) >> 11) & 1)
#define EHCI_ITD_SET_DIR(x)	(((x) & 1) << 11)
#define EHCI_ITD_GET_MAXPKT(x)	((x) & 0x7ff)
#define EHCI_ITD_SET_MAXPKT(x)	((x) & 0x7ff)
#define EHCI_ITD_GET_MULTI(x)	((x) & 0x3)
#define EHCI_ITD_SET_MULTI(x)	((x) & 0x3)
	volatile ehci_isoc_bufr_ptr_t	itd_bufr_hi[7];
};
#define EHCI_ITD_ALIGN		32

/* Split Transaction Isochronous Transfer Descriptor */
struct ehci_sitd {
	volatile ehci_link_t		sitd_next;
	volatile u_int32_t		sitd_endp;
#define EHCI_SITD_GET_ADDR(x)	(((x) >>  0) & 0x7f) /* endpoint addr */
#define EHCI_SITD_SET_ADDR(x)	(x)
#define EHCI_SITD_GET_ENDPT(x)	(((x) >>  8) & 0xf) /* endpoint no */
#define EHCI_SITD_SET_ENDPT(x)	((x) <<  8)
#define EHCI_SITD_GET_HUBA(x)	(((x) >> 16) & 0x7f) /* hub address */
#define EHCI_SITD_SET_HUBA(x)	((x) << 16)
#define EHCI_SITD_GET_PORT(x)	(((x) >> 23) & 0x7f) /* hub port */
#define EHCI_SITD_SET_PORT(x)	((x) << 23)
#define EHCI_SITD_GET_DIR(x)	(((x) >> 31) & 0x1) /* direction */
#define EHCI_SITD_SET_DIR(x)	((x) << 31)
	volatile u_int32_t		sitd_sched;
#define EHCI_SITD_GET_SMASK(x)	(((x) >>  0) & 0xff) /* intr sched mask */
#define EHCI_SITD_SET_SMASK(x)	((x) <<  0)
#define EHCI_SITD_GET_CMASK(x)	(((x) >>  8) & 0xff) /* split completion mask */
#define EHCI_SITD_SET_CMASK(x)	((x) <<  8)
	volatile u_int32_t		sitd_trans;
#define  EHCI_SITD_IOC		0x80000000
#define  EHCI_SITD_ACTIVE	0x80
#define  EHCI_SITD_ERR		0x40
#define  EHCI_SITD_BUFERR	0x20
#define  EHCI_SITD_BABBLE	0x10
#define  EHCI_SITD_XACTERR	0x08
#define  EHCI_SITD_MISSEDMICRO	0x04
#define  EHCI_SITD_SPLITXSTATE	0x02
#define EHCI_SITD_GET_LEN(x)	(((x) >> 16) & 0x3ff) /* bytes to transfer */
#define EHCI_SITD_SET_LEN(x)	(((x) & 0x3ff) << 16)
#define EHCI_SITD_GET_PG(x)	(((x) >> 30) & 0x1) /* buffer page */
#define EHCI_SITD_SET_PG(x)	((x) << 30)
	volatile ehci_physaddr_t	sitd_bufr[2];
#define EHCI_SITD_GET_TCOUNT(x)	(((x) >>  0) & 0x7) /* transaction count */
#define EHCI_SITD_SET_TCOUNT(x)	((x) << 0)
#define EHCI_SITD_GET_TP(x)	(((x) >>  3) & 0x3) /* transaction position */
#define EHCI_SITD_SET_TP(x)	((x) <<  3)
#define  EHCI_SITD_TP_ALL	0x0
#define  EHCI_SITD_TP_BEGIN	0x1
#define  EHCI_SITD_TP_MIDDLE	0x2
#define  EHCI_SITD_TP_END	0x3
	volatile ehci_link_t		sitd_back;
	volatile ehci_physaddr_t	sitd_bufr_hi[2]; /* 64bit */
};
#define EHCI_SITD_ALIGN		32

/* Queue Element Transfer Descriptor */
#define EHCI_QTD_NBUFFERS	5
struct ehci_qtd {
	ehci_link_t	qtd_next;
	ehci_link_t	qtd_altnext;
	u_int32_t	qtd_status;
#define EHCI_QTD_GET_STATUS(x)	(((x) >>  0) & 0xff)
#define EHCI_QTD_SET_STATUS(x)	((x) << 0)
#define  EHCI_QTD_ACTIVE	0x80
#define  EHCI_QTD_HALTED	0x40
#define  EHCI_QTD_BUFERR	0x20
#define  EHCI_QTD_BABBLE	0x10
#define  EHCI_QTD_XACTERR	0x08
#define  EHCI_QTD_MISSEDMICRO	0x04
#define  EHCI_QTD_SPLITXSTATE	0x02
#define  EHCI_QTD_PINGSTATE	0x01
#define  EHCI_QTD_STATERRS	0x7c
#define EHCI_QTD_GET_PID(x)	(((x) >>  8) & 0x3)
#define EHCI_QTD_SET_PID(x)	((x) <<  8)
#define  EHCI_QTD_PID_OUT	0x0
#define  EHCI_QTD_PID_IN	0x1
#define  EHCI_QTD_PID_SETUP	0x2
#define EHCI_QTD_GET_CERR(x)	(((x) >> 10) &  0x3)
#define EHCI_QTD_SET_CERR(x)	((x) << 10)
#define EHCI_QTD_GET_C_PAGE(x)	(((x) >> 12) &  0x7)
#define EHCI_QTD_SET_C_PAGE(x)	((x) << 12)
#define EHCI_QTD_GET_IOC(x)	(((x) >> 15) &  0x1)
#define EHCI_QTD_IOC		0x00008000
#define EHCI_QTD_GET_BYTES(x)	(((x) >> 16) &  0x7fff)
#define EHCI_QTD_SET_BYTES(x)	((x) << 16)
#define EHCI_QTD_GET_TOGGLE(x)	(((x) >> 31) &  0x1)
#define EHCI_QTD_SET_TOGGLE(x)	((x) << 31)
#define EHCI_QTD_TOGGLE_MASK	0x80000000
	ehci_physaddr_t	qtd_buffer[EHCI_QTD_NBUFFERS];
	ehci_physaddr_t qtd_buffer_hi[EHCI_QTD_NBUFFERS];
};
#define EHCI_QTD_ALIGN		32

/* Queue Head */
struct ehci_qh {
	ehci_link_t	qh_link;
	u_int32_t	qh_endp;
#define EHCI_QH_GET_ADDR(x)	(((x) >>  0) & 0x7f) /* endpoint addr */
#define EHCI_QH_SET_ADDR(x)	(x)
#define EHCI_QH_ADDRMASK	0x0000007f
#define EHCI_QH_GET_INACT(x)	(((x) >>  7) & 0x01) /* inactivate on next */
#define EHCI_QH_INACT		0x00000080
#define EHCI_QH_GET_ENDPT(x)	(((x) >>  8) & 0x0f) /* endpoint no */
#define EHCI_QH_SET_ENDPT(x)	((x) <<  8)
#define EHCI_QH_GET_EPS(x)	(((x) >> 12) & 0x03) /* endpoint speed */
#define EHCI_QH_SET_EPS(x)	((x) << 12)
#define  EHCI_QH_SPEED_FULL	0x0
#define  EHCI_QH_SPEED_LOW	0x1
#define  EHCI_QH_SPEED_HIGH	0x2
#define EHCI_QH_GET_DTC(x)	(((x) >> 14) & 0x01) /* data toggle control */
#define EHCI_QH_DTC		0x00004000
#define EHCI_QH_GET_HRECL(x)	(((x) >> 15) & 0x01) /* head of reclamation */
#define EHCI_QH_HRECL		0x00008000
#define EHCI_QH_GET_MPL(x)	(((x) >> 16) & 0x7ff) /* max packet len */
#define EHCI_QH_SET_MPL(x)	((x) << 16)
#define EHCI_QH_MPLMASK		0x07ff0000
#define EHCI_QH_GET_CTL(x)	(((x) >> 27) & 0x01) /* control endpoint */
#define EHCI_QH_CTL		0x08000000
#define EHCI_QH_GET_NRL(x)	(((x) >> 28) & 0x0f) /* NAK reload */
#define EHCI_QH_SET_NRL(x)	((x) << 28)
	u_int32_t	qh_endphub;
#define EHCI_QH_GET_SMASK(x)	(((x) >>  0) & 0xff) /* intr sched mask */
#define EHCI_QH_SET_SMASK(x)	((x) <<  0)
#define EHCI_QH_GET_CMASK(x)	(((x) >>  8) & 0xff) /* split completion mask */
#define EHCI_QH_SET_CMASK(x)	((x) <<  8)
#define EHCI_QH_GET_HUBA(x)	(((x) >> 16) & 0x7f) /* hub address */
#define EHCI_QH_SET_HUBA(x)	((x) << 16)
#define EHCI_QH_GET_PORT(x)	(((x) >> 23) & 0x7f) /* hub port */
#define EHCI_QH_SET_PORT(x)	((x) << 23)
#define EHCI_QH_GET_MULT(x)	(((x) >> 30) & 0x03) /* pipe multiplier */
#define EHCI_QH_SET_MULT(x)	((x) << 30)
	ehci_link_t	qh_curqtd;
	struct ehci_qtd	qh_qtd;
};
#define EHCI_QH_ALIGN		32

/* Periodic Frame Span Traversal Node */
struct ehci_fstn {
	ehci_link_t	fstn_link;
	ehci_link_t	fstn_back;
};
#define EHCI_FSTN_ALIGN		32

#endif /* _DEV_PCI_EHCIREG_H_ */
@


1.20
log
@Full-speed isochronous transfers support with opportunistic micro-frames
scheduling.

More work is required to properly budget and schedule micro-frames, most
of it at the HUB level.  But this let people use USB1.1 uaudio(4) devices
on ehci(4)-only systems.

Thanks to all the testers!

ok ratchov@@, sthen@@, naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehcireg.h,v 1.19 2014/03/11 10:24:42 mpi Exp $ */
d164 7
@


1.19
log
@Kill dead links.
@
text
@d1 1
a1 1
/*	$OpenBSD: ehcireg.h,v 1.18 2013/04/15 09:23:01 mglocker Exp $ */
d208 2
a209 4
#define EHCI_ITD_GET_BPTR(x)	((x) & 0xfffff000)
#define EHCI_ITD_SET_BPTR(x)	((x) & 0xfffff000)
#define EHCI_ITD_GET_EP(x)	(((x) >> 8) & 0xf)
#define EHCI_ITD_SET_EP(x)	(((x) & 0xf) << 8)
a222 1
#define EHCI_SITD_NBUFFERS	2
d224 2
a225 2
	ehci_link_t	sitd_next;
	u_int32_t	sitd_endp;
d236 1
a236 1
	u_int32_t	sitd_sched;
d241 2
a242 2
	u_int32_t	sitd_trans;
#define EHCI_SITD_GET_STATUS(x)	(((x) >>  0) & 0xff) /* status */
d250 2
a251 4
#define EHCI_SITD_GET_CPROG(x)	(((x) >>  8) & 0xff) /* c-mask progress */
#define EHCI_SITD_SET_CPROG(x)	((x) <<  8)
#define EHCI_SITD_GET_BYTES(x)	(((x) >> 16) &  0x7ff) /* bytes to transfer */
#define EHCI_SITD_SET_BYTES(x)	((x) << 16)
d254 1
a254 5
#define EHCI_SITD_IOC		0x80000000 /* interrupt on complete */
	ehci_physaddr_t	sitd_buffer[EHCI_SITD_NBUFFERS];
/* page (buffer) 0 */
#define EHCI_SITD_GET_OFFSET(x)	(((x) >>  0) & 0xfff) /* current offset */
/* page (buffer) 1 */
d263 2
a264 2
	ehci_link_t	sitd_back;
	ehci_physaddr_t sitd_buffer_hi[EHCI_SITD_NBUFFERS]; /* 64bit */
@


1.18
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehcireg.h,v 1.17 2011/11/02 19:19:47 eric Exp $ */
a30 7
 */

/*
 * The EHCI 1.0 spec can be found at
 * http://developer.intel.com/technology/usb/download/ehci-r10.pdf
 * and the USB 2.0 spec at
 * http://www.usb.org/developers/data/usb_20.zip
@


1.17
log
@fix defines for some ehci registers. they are not used yet as they only
matter for split-transactions which are not currently supported.

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehcireg.h,v 1.16 2008/11/29 08:52:03 mglocker Exp $ */
d196 1
a196 1
typedef struct {
d228 1
a228 1
} ehci_itd_t;
d233 1
a233 1
typedef struct {
d281 1
a281 1
} ehci_sitd_t;
d286 1
a286 1
typedef struct {
d319 1
a319 1
} ehci_qtd_t;
d323 1
a323 1
typedef struct {
d361 2
a362 2
	ehci_qtd_t	qh_qtd;
} ehci_qh_t;
d366 1
a366 1
typedef struct {
d369 1
a369 1
} ehci_fstn_t;
@


1.16
log
@Fix high-speed isoc USB transfers;  64bit capable USB host controllers
have a different transfer descriptor than non-64bit capable ones.

This fixes isoc transfer issues (resulting in broken image data) for
uvideo(4) devices attached to ehci(4) seen on USB Intel host controllers.

From Jeremy Morse via NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: ehcireg.h,v 1.15 2008/08/09 22:59:20 mglocker Exp $ */
d244 2
d247 4
a250 4
#define EHCI_QH_GET_SMASK(x)	(((x) >>  0) & 0xff) /* intr sched mask */
#define EHCI_QH_SET_SMASK(x)	((x) <<  0)
#define EHCI_QH_GET_CMASK(x)	(((x) >>  8) & 0xff) /* split completion mask */
#define EHCI_QH_SET_CMASK(x)	((x) <<  8)
d261 1
a261 1
#define EHCI_SITD_SET_CPROG(x)	(((x) >>  8) & 0xff)
d271 2
a272 1
#define EHCI_SITD_GET_TCOUNT(x)	(((x) >>  0) & 0x3) /* transaction count */
@


1.15
log
@Add isochronous xfer support for ehci(4).  From NetBSD.

OK brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehcireg.h,v 1.14 2008/06/26 05:42:18 ray Exp $ */
d210 2
a211 2
#define EHCI_ITD_GET_PG(x)	(((x) >> 12) & 0xf)
#define EHCI_ITD_SET_PG(x)	(((x) & 0xf) << 12)
d227 1
@


1.14
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehcireg.h,v 1.13 2005/10/28 04:36:42 fgsch Exp $ */
d5 1
a5 1
 * Copyright (c) 2001 The NetBSD Foundation, Inc.
d189 2
d197 30
a226 30
	ehci_link_t	itd_next;
	u_int32_t	itd_trans[EHCI_ITD_NTRANS];
#define EHCI_ITD_GET_OFFSET(x)	(((x) >>  0) & 0xfff) /* offset from buf ptr */
#define EHCI_ITD_SET_OFFSET(x)	(x)
#define EHCI_ITD_GET_PG(x)	(((x) >> 12) & 0x7) /* buffer page */
#define EHCI_ITD_SET_PG(x)	((x) << 12)
#define EHCI_ITD_GET_IOC(x)	(((x) >> 15) &  0x1) /* interrupt on complete */
#define EHCI_ITD_IOC		0x00008000
#define EHCI_ITD_GET_XLEN(x)	(((x) >> 16) & 0xfff) /* transaction length */
#define EHCI_ITD_SET_XLEN(x)	((x) << 12)
#define EHCI_ITD_GET_STATUS(x)	(((x) >> 28) & 0xf) /* duh */
#define EHCI_ITD_SET_STATUS(x)	((x) << 28)
#define  EHCI_ITD_ACTIVE	0x8
#define  EHCI_ITD_BUFERR	0x4
#define  EHCI_ITD_BABBLE	0x2
#define  EHCI_ITD_XACTERR	0x1
	ehci_physaddr_t	itd_buffer[EHCI_ITD_NBUFFERS];
/* page (buffer) 0 */
#define EHCI_ITD_GET_ADDR(x)	(((x) >>  0) & 0x7f) /* endpoint addr */
#define EHCI_ITD_SET_ADDR(x)	(x)
#define EHCI_ITD_GET_ENDPT(x)	(((x) >>  8) & 0xf) /* endpoint no */
#define EHCI_ITD_SET_ENDPT(x)	((x) <<  8)
/* page (buffer) 2 */
#define EHCI_ITD_GET_MPS(x)	(((x) >>  0) & 0x7ff) /* max packet size */
#define EHCI_ITD_SET_MPS(x)	(x)
#define EHCI_ITD_DIRECTION	0x00000800
/* page (buffer) 3 */
#define EHCI_ITD_GET_MULTI(x)	(((x) >>  0) & 0x3) /* trans per microframe */
#define EHCI_ITD_SET_MULTI(x)	(x)
	ehci_physaddr_t	itd_buffer_hi[EHCI_ITD_NBUFFERS]; /* 64bit */
@


1.13
log
@correct legsup register per spec; dlg@@ pascoe@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: ehcireg.h,v 1.12 2004/12/29 01:52:27 dlg Exp $ */
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.12
log
@from freebsd: ehci.c 1.13, ehci_pci.c 1.13, ehcireg.h 1.5, ehcivar.h 1.3
log message:
Attempt to follow the correct procedure for synchronising with the
system BIOS to disable legacy device emulation as per the "EHCI
Extended Capability: Pre-OS to OS Handoff Synchronisation" section
of the EHCI spec. BIOSes that implement legacy emulation using SMIs
are supposed to disable the emulation when this procedure is performed.

tested on various archs by jsg@@ and me
ok pascoe@@, looks sane jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ehcireg.h,v 1.11 2004/10/25 22:30:04 dlg Exp $ */
d73 1
a73 1
#define EHCI_LEGSUP_LEGSUP	0x01
@


1.11
log
@add EHCI_QTD_SET_STATUS
from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: ehcireg.h,v 1.10 2004/08/11 06:57:42 dlg Exp $ */
d67 10
a76 3
/* Regs ar EECP + offset */
#define PCI_EHCI_USBLEGSUP	0x00
#define PCI_EHCI_USBLEGCTLSTS	0x04
@


1.10
log
@fix spelling, macros and formatting
@
text
@d1 1
a1 1
/*	$OpenBSD: ehcireg.h,v 1.9 2004/07/07 00:58:42 deraadt Exp $ */
d285 1
@


1.9
log
@copyright dates sync; loki@@animata.net
@
text
@d1 1
a1 1
/*	$OpenBSD: ehcireg.h,v 1.8 2004/07/07 00:58:05 deraadt Exp $ */
d175 3
a177 3
#define EHCI_PAGE_SIZE 0x1000
#define EHCI_PAGE(x) ((x) &~ 0xfff)
#define EHCI_PAGE_OFFSET(x) ((x) & 0xfff)
d189 1
d192 2
a193 2
#define EHCI_ITD_NTRANS 8
#define EHCI_ITD_NBUFFERS 7
d201 2
a202 2
#define EHCI_QTD_GET_IOC(x)	(((x) >> 15) &  0x1) /* interrupt on complete */
#define EHCI_QTD_IOC		0x00008000
d207 4
a210 4
#define  ECHI_ITD_ACTIVE	0x8
#define  ECHI_ITD_BUFERR	0x4
#define  ECHI_ITD_BABBLE	0x2
#define  ECHI_ITD_XACTERR	0x1
d213 4
a216 4
#define EHCI_ITD_GET_ADDR	(((x) >>  0) & 0x7f) /* endpoint addr */
#define EHCI_ITD_SET_ADDR	(x)
#define EHCI_ITD_GET_ENDPT	(((x) >>  8) & 0xf) /* endpoint no */
#define EHCI_ITD_SET_ENDPT	((x) <<  8)
d218 2
a219 2
#define EHCI_ITD_GET_MPS	(((x) >>  0) & 0x7ff) /* max packet size */
#define EHCI_ITD_SET_MPS	(x)
d222 2
a223 2
#define EHCI_ITD_GET_MULTI	(((x) >>  0) & 0x3) /* trans per microframe */
#define EHCI_ITD_SET_MULTI	(x)
d226 1
a226 1
#define EHCI_ITD_ALIGN 32
d229 1
a229 1
#define EHCI_SITD_NBUFFERS 2
d233 6
a238 6
#define EHCI_SITD_GET_ADDR	(((x) >>  0) & 0x7f) /* endpoint addr */
#define EHCI_SITD_SET_ADDR	(x)
#define EHCI_SITD_GET_ENDPT	(((x) >>  8) & 0xf) /* endpoint no */
#define EHCI_SITD_SET_ENDPT	((x) <<  8)
#define EHCI_SITD_GET_HUBA	(((x) >> 16) & 0x7f) /* hub address */
#define EHCI_SITD_SET_HUBA	((x) << 16)
d264 1
a264 1
#define ECHI_SITD_GET_OFFSET(x)	(((x) >>  0) & 0xfff) /* current offset */
d276 1
a276 1
#define EHCI_SITD_ALIGN 32
d279 1
a279 1
#define EHCI_QTD_NBUFFERS 5
d313 1
a313 1
#define EHCI_QTD_ALIGN 32
d356 1
a356 1
#define EHCI_QH_ALIGN 32
d363 1
a363 1
#define EHCI_FSTN_ALIGN 32
@


1.8
log
@Changes EHCI_QTD_TOGGLE to EHCI_QTD_TOGGLE_MASK; loki@@animata.net
@
text
@d1 2
a2 2
/*	$OpenBSD: ehcireg.h,v 1.7 2004/07/05 03:09:57 deraadt Exp $ */
/*	$NetBSD: ehcireg.h,v 1.14 2003/10/13 00:05:10 enami Exp $	*/
@


1.7
log
@Completes the structs for the isochronous and split transaction
isochronous transfer descriptor types. Also updates the doco link at the
top of the file; from netbsd; via loki@@animata.net
@
text
@d1 1
a1 1
/*	$OpenBSD: ehcireg.h,v 1.6 2004/07/05 03:08:56 deraadt Exp $ */
d308 1
a308 1
#define EHCI_QTD_TOGGLE		0x80000000
@


1.6
log
@Adds missing port routing rules field, fixes an incorrect offset for
EHCI_QH_GET_CTL and adds a macro for setting the data toggle on a qtd
token; from netbsd; via loki@@animata.net
@
text
@d1 1
a1 1
/*	$OpenBSD: ehcireg.h,v 1.5 2004/07/05 03:07:45 deraadt Exp $ */
d41 2
a42 2
 * The EHCI 0.96 spec can be found at
 * http://developer.intel.com/technology/usb/download/ehci-r096.pdf
d191 2
d195 29
a223 1
	/* XXX many more */
d228 1
d231 43
a273 1
	/* XXX many more */
@


1.5
log
@This fixes a couple of spelling errors (EHCI_HCS_P_INCICATOR to
EHCI_HCS_P_INDICATOR and EHCI_QG_MPLMASK to EHCI_QH_MPLMASK);
from netbsd; via, loki@@animata.net
@
text
@d1 1
a1 1
/*	$OpenBSD: ehcireg.h,v 1.4 2004/05/30 01:25:17 tedu Exp $ */
d82 1
d234 1
d264 1
a264 1
#define EHCI_QH_GET_CTL(x)	(((x) >> 26) & 0x01) /* control endpoint */
@


1.4
log
@rcsids
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d79 1
a79 1
#define  EHCI_HCS_P_INCICATOR(x) ((x) & 0x10000)
d261 1
a261 1
#define EHCI_QG_MPLMASK		0x07ff0000
@


1.4.2.1
log
@Merge with the trunk
@
text
@@


1.3
log
@ehci support; hacked into working shape by jonathon@@gateway.zenbu.net
@
text
@d1 1
@


1.2
log
@Meant to commit only ulpt and committed everything.  Most things weren't ready
@
text
@d1 1
a1 2
/*	$OpenBSD: ehcireg.h,v 1.1 2002/05/07 18:08:04 nate Exp $	*/
/*	$NetBSD: ehcireg.h,v 1.13 2001/11/23 01:16:27 augustss Exp $	*/
d234 1
@


1.1
log
@Sync ulpt driver with NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

