head	1.24;
access;
symbols
	OPENBSD_6_2:1.24.0.2
	OPENBSD_6_2_BASE:1.24
	OPENBSD_6_1:1.24.0.4
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.23.0.12
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.6
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.23.0.8
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.23.0.4
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.22.0.4
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.21.0.2
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.17.0.8
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.6
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.4
	OPENBSD_5_0:1.17.0.2
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.9.0.4
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6;
locks; strict;
comment	@ * @;


1.24
date	2016.09.02.09.14.59;	author mpi;	state Exp;
branches;
next	1.23;
commitid	blfE5YU3eGM81J65;

1.23
date	2014.07.12.20.26.33;	author mpi;	state Exp;
branches;
next	1.22;
commitid	PSjXNz8dGohZ6ZSK;

1.22
date	2013.11.15.10.17.39;	author pirofti;	state Exp;
branches;
next	1.21;

1.21
date	2013.04.15.09.23.02;	author mglocker;	state Exp;
branches;
next	1.20;

1.20
date	2013.04.12.12.58.39;	author mpi;	state Exp;
branches;
next	1.19;

1.19
date	2013.03.28.03.58.03;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2013.03.28.03.31.55;	author tedu;	state Exp;
branches;
next	1.17;

1.17
date	2011.07.03.15.47.17;	author matthew;	state Exp;
branches;
next	1.16;

1.16
date	2011.01.25.20.03.36;	author jakemsr;	state Exp;
branches;
next	1.15;

1.15
date	2010.12.06.04.41.40;	author jakemsr;	state Exp;
branches;
next	1.14;

1.14
date	2010.10.23.16.14.07;	author jakemsr;	state Exp;
branches;
next	1.13;

1.13
date	2010.10.23.15.42.09;	author jakemsr;	state Exp;
branches;
next	1.12;

1.12
date	2010.09.24.08.33.59;	author yuo;	state Exp;
branches;
next	1.11;

1.11
date	2009.11.21.14.30.35;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.13.19.33.19;	author pirofti;	state Exp;
branches;
next	1.9;

1.9
date	2009.04.26.02.20.58;	author cnst;	state Exp;
branches;
next	1.8;

1.8
date	2008.11.21.11.38.12;	author mbalmer;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.10.14.01.23;	author blambert;	state Exp;
branches;
next	1.6;

1.6
date	2007.11.23.16.34.47;	author mbalmer;	state Exp;
branches;
next	1.5;

1.5
date	2007.11.23.12.22.23;	author mbalmer;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.12.16.42.23;	author mbalmer;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.10.14.40.09;	author mbalmer;	state Exp;
branches;
next	1.2;

1.2
date	2007.11.10.13.43.05;	author mbalmer;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.10.12.58.08;	author mbalmer;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Avoid calling usbd_set_config_index() in *_attach() and let the stack
do it instead.

If anything bad happen due to a malformed descriptor it makes no sense
to try to attach a driver, and bail before probing.
@
text
@/*	$OpenBSD: umbg.c,v 1.23 2014/07/12 20:26:33 mpi Exp $ */

/*
 * Copyright (c) 2007 Marc Balmer <mbalmer@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/conf.h>
#include <sys/file.h>
#include <sys/select.h>
#include <sys/device.h>
#include <sys/poll.h>
#include <sys/time.h>
#include <sys/sensors.h>
#include <sys/timeout.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdi_util.h>
#include <dev/usb/usbdevs.h>

#ifdef UMBG_DEBUG
#define DPRINTFN(n, x)	do { if (umbgdebug > (n)) printf x; } while (0)
int umbgdebug = 0;
#else
#define DPRINTFN(n, x)
#endif
#define DPRINTF(x)	DPRINTFN(0, x)

#ifdef UMBG_DEBUG
#define TRUSTTIME	((long) 60)
#else
#define TRUSTTIME	((long) 12 * 60 * 60)	/* degrade OK > WARN > CRIT */
#endif

struct umbg_softc {
	struct device		sc_dev;		/* base device */
	struct usbd_device	*sc_udev;	/* USB device */
	struct usbd_interface	*sc_iface;	/* data interface */

	int			sc_bulkin_no;
	struct usbd_pipe	*sc_bulkin_pipe;
	int			sc_bulkout_no;
	struct usbd_pipe	*sc_bulkout_pipe;

	struct timeout		sc_to;		/* get time from device */
	struct usb_task		sc_task;

	struct timeout		sc_it_to;	/* invalidate sensor */

	usb_device_request_t	sc_req;

	struct ksensor		sc_timedelta;	/* timedelta */
	struct ksensor		sc_signal;	/* signal quality and status */
	struct ksensordev	sc_sensordev;
};

struct mbg_time {
	u_int8_t		hundreds;
	u_int8_t		sec;
	u_int8_t		min;
	u_int8_t		hour;
	u_int8_t		mday;
	u_int8_t		wday;	/* 1 (monday) - 7 (sunday) */
	u_int8_t		mon;
	u_int8_t		year;	/* 0 - 99 */
	u_int8_t		status;
	u_int8_t		signal;
	int8_t			utc_off;
};

struct mbg_time_hr {
	u_int32_t		sec;		/* always UTC */
	u_int32_t		frac;		/* fractions of second */
	int32_t			utc_off;	/* informal only, in seconds */
	u_int16_t		status;
	u_int8_t		signal;
};

/* mbg_time.status bits */
#define MBG_FREERUN		0x01	/* clock running on xtal */
#define MBG_DST_ENA		0x02	/* DST enabled */
#define MBG_SYNC		0x04	/* clock synced at least once */
#define MBG_DST_CHG		0x08	/* DST change announcement */
#define MBG_UTC			0x10	/* special UTC firmware is installed */
#define MBG_LEAP		0x20	/* announcement of a leap second */
#define MBG_IFTM		0x40	/* current time was set from host */
#define MBG_INVALID		0x80	/* time invalid, batt. was disconn. */

/* commands */
#define MBG_GET_TIME		0x00
#define MBG_GET_SYNC_TIME	0x02
#define MBG_GET_TIME_HR		0x03
#define MBG_SET_TIME		0x10
#define MBG_GET_TZCODE		0x32
#define MBG_SET_TZCODE		0x33
#define MBG_GET_FW_ID_1		0x40
#define MBG_GET_FW_ID_2		0x41
#define MBG_GET_SERNUM		0x42

/* timezone codes (for MBG_{GET|SET}_TZCODE) */
#define MBG_TZCODE_CET_CEST	0x00
#define MBG_TZCODE_CET		0x01
#define MBG_TZCODE_UTC		0x02
#define MBG_TZCODE_EET_EEST	0x03

/* misc. constants */
#define MBG_FIFO_LEN		16
#define MBG_ID_LEN		(2 * MBG_FIFO_LEN + 1)
#define MBG_BUSY		0x01
#define MBG_SIG_BIAS		55
#define MBG_SIG_MAX		68
#define NSECPERSEC		1000000000LL	/* nanoseconds per second */
#define HRDIVISOR		0x100000000LL	/* for hi-res timestamp */

static int t_wait, t_trust;

void umbg_intr(void *);
void umbg_it_intr(void *);

int umbg_match(struct device *, void *, void *);
void umbg_attach(struct device *, struct device *, void *);
int umbg_detach(struct device *, int);

void umbg_task(void *);

int umbg_read(struct umbg_softc *, u_int8_t cmd, char *buf, size_t len,
    struct timespec *tstamp);

struct cfdriver umbg_cd = {
	NULL, "umbg", DV_DULL
};

const struct cfattach umbg_ca = {
	sizeof(struct umbg_softc), umbg_match, umbg_attach, umbg_detach
};

int
umbg_match(struct device *parent, void *match, void *aux)
{
	struct usb_attach_arg *uaa = aux;

	if (uaa->iface == NULL)
		return UMATCH_NONE;

	return uaa->vendor == USB_VENDOR_MEINBERG &&
	    uaa->product == USB_PRODUCT_MEINBERG_USB5131 ?
	    UMATCH_VENDOR_PRODUCT : UMATCH_NONE;
}

void
umbg_attach(struct device *parent, struct device *self, void *aux)
{
	struct umbg_softc *sc = (struct umbg_softc *)self;
	struct usb_attach_arg *uaa = aux;
	struct usbd_device *dev = uaa->device;
	struct usbd_interface *iface = uaa->iface;
	struct mbg_time tframe;
	usb_endpoint_descriptor_t *ed;
	usbd_status err;
	int signal;
#ifdef UMBG_DEBUG
	char fw_id[MBG_ID_LEN];
#endif
	sc->sc_udev = dev;

	strlcpy(sc->sc_sensordev.xname, sc->sc_dev.dv_xname,
	    sizeof(sc->sc_sensordev.xname));

	sc->sc_timedelta.type = SENSOR_TIMEDELTA;
	sc->sc_timedelta.status = SENSOR_S_UNKNOWN;
	strlcpy(sc->sc_timedelta.desc, "USB5131",
	    sizeof(sc->sc_timedelta.desc));
	sensor_attach(&sc->sc_sensordev, &sc->sc_timedelta);

	sc->sc_signal.type = SENSOR_PERCENT;
	strlcpy(sc->sc_signal.desc, "Signal", sizeof(sc->sc_signal.desc));
	sensor_attach(&sc->sc_sensordev, &sc->sc_signal);
	sensordev_install(&sc->sc_sensordev);

	usb_init_task(&sc->sc_task, umbg_task, sc, USB_TASK_TYPE_GENERIC);
	timeout_set(&sc->sc_to, umbg_intr, sc);
	timeout_set(&sc->sc_it_to, umbg_it_intr, sc);

	if ((err = usbd_device2interface_handle(dev, 0, &iface))) {
		printf("%s: failed to get interface, err=%s\n",
		    sc->sc_dev.dv_xname, usbd_errstr(err));
		goto fishy;
	}

	ed = usbd_interface2endpoint_descriptor(iface, 0);
	sc->sc_bulkin_no = ed->bEndpointAddress;
	ed = usbd_interface2endpoint_descriptor(iface, 1);
	sc->sc_bulkout_no = ed->bEndpointAddress;

	sc->sc_iface = iface;

	err = usbd_open_pipe(sc->sc_iface, sc->sc_bulkin_no,
	    USBD_EXCLUSIVE_USE, &sc->sc_bulkin_pipe);
	if (err) {
		printf("%s: open rx pipe failed: %s\n", sc->sc_dev.dv_xname,
		    usbd_errstr(err));
		goto fishy;
	}

	err = usbd_open_pipe(sc->sc_iface, sc->sc_bulkout_no,
	    USBD_EXCLUSIVE_USE, &sc->sc_bulkout_pipe);
	if (err) {
		printf("%s: open tx pipe failed: %s\n", sc->sc_dev.dv_xname,
		    usbd_errstr(err));
		goto fishy;
	}

	printf("%s: ", sc->sc_dev.dv_xname);
	if (umbg_read(sc, MBG_GET_TIME, (char *)&tframe,
	    sizeof(struct mbg_time), NULL)) {
		sc->sc_signal.status = SENSOR_S_CRIT;
		printf("unknown status");
	} else {
		sc->sc_signal.status = SENSOR_S_OK;
		signal = tframe.signal - MBG_SIG_BIAS;
		if (signal < 0)
			signal = 0;
		else if (signal > MBG_SIG_MAX)
			signal = MBG_SIG_MAX;
		sc->sc_signal.value = signal;

		if (tframe.status & MBG_SYNC)
			printf("synchronized");
		else
			printf("not synchronized");
		if (tframe.status & MBG_FREERUN) {
			sc->sc_signal.status = SENSOR_S_WARN;
			printf(", freerun");
		}
		if (tframe.status & MBG_IFTM)
			printf(", time set from host");
	}
#ifdef UMBG_DEBUG
	if (umbg_read(sc, MBG_GET_FW_ID_1, fw_id, MBG_FIFO_LEN, NULL) ||
	    umbg_read(sc, MBG_GET_FW_ID_2, &fw_id[MBG_FIFO_LEN], MBG_FIFO_LEN,
	    NULL))
		printf(", firmware unknown");
	else {
		fw_id[MBG_ID_LEN - 1] = '\0';
		printf(", firmware %s", fw_id);
	}
#endif
	printf("\n");

	t_wait = 5;

	t_trust = TRUSTTIME;

	usb_add_task(sc->sc_udev, &sc->sc_task);
	return;

fishy:
	usbd_deactivate(sc->sc_udev);
}

int
umbg_detach(struct device *self, int flags)
{
	struct umbg_softc *sc = (struct umbg_softc *)self;
	usbd_status err;

	if (timeout_initialized(&sc->sc_to))
		timeout_del(&sc->sc_to);
	if (timeout_initialized(&sc->sc_it_to))
		timeout_del(&sc->sc_it_to);

	usb_rem_task(sc->sc_udev, &sc->sc_task);

	if (sc->sc_bulkin_pipe != NULL) {
		usbd_abort_pipe(sc->sc_bulkin_pipe);
		err = usbd_close_pipe(sc->sc_bulkin_pipe);
		if (err)
			printf("%s: close rx pipe failed: %s\n",
			    sc->sc_dev.dv_xname, usbd_errstr(err));
		sc->sc_bulkin_pipe = NULL;
	}
	if (sc->sc_bulkout_pipe != NULL) {
		usbd_abort_pipe(sc->sc_bulkout_pipe);
		err = usbd_close_pipe(sc->sc_bulkout_pipe);
		if (err)
			printf("%s: close tx pipe failed: %s\n",
			    sc->sc_dev.dv_xname, usbd_errstr(err));
		sc->sc_bulkout_pipe = NULL;
	}

	/* Unregister the clock with the kernel */
	sensordev_deinstall(&sc->sc_sensordev);

	return 0;
}

void
umbg_intr(void *xsc)
{
	struct umbg_softc *sc = xsc;
	usb_add_task(sc->sc_udev, &sc->sc_task);
}

/* umbg_task_hr() read a high resolution timestamp from the device. */
void
umbg_task(void *arg)
{
	struct umbg_softc *sc = (struct umbg_softc *)arg;
	struct mbg_time_hr tframe;
	struct timespec tstamp;
	int64_t tlocal, trecv;
	int signal;

	if (usbd_is_dying(sc->sc_udev))
		return;

	if (umbg_read(sc, MBG_GET_TIME_HR, (char *)&tframe, sizeof(tframe),
	    &tstamp)) {
		sc->sc_signal.status = SENSOR_S_CRIT;
		goto bail_out;
	}
	if (tframe.status & MBG_INVALID) {
		sc->sc_signal.status = SENSOR_S_CRIT;
		goto bail_out;
	}

	tlocal = tstamp.tv_sec * NSECPERSEC + tstamp.tv_nsec;
	trecv = letoh32(tframe.sec) * NSECPERSEC +
	    (letoh32(tframe.frac) * NSECPERSEC >> 32);

	sc->sc_timedelta.value = tlocal - trecv;
	if (sc->sc_timedelta.status == SENSOR_S_UNKNOWN ||
		!(letoh16(tframe.status) & MBG_FREERUN)) {
		sc->sc_timedelta.status = SENSOR_S_OK;
		timeout_add_sec(&sc->sc_it_to, t_trust);
	}

	sc->sc_timedelta.tv.tv_sec = tstamp.tv_sec;
	sc->sc_timedelta.tv.tv_usec = tstamp.tv_nsec / 1000;

	signal = tframe.signal - MBG_SIG_BIAS;
	if (signal < 0)
		signal = 0;
	else if (signal > MBG_SIG_MAX)
		signal = MBG_SIG_MAX;

	sc->sc_signal.value = signal * 100000 / MBG_SIG_MAX;
	sc->sc_signal.status = letoh16(tframe.status) & MBG_FREERUN ?
	    SENSOR_S_WARN : SENSOR_S_OK;
	sc->sc_signal.tv.tv_sec = sc->sc_timedelta.tv.tv_sec;
	sc->sc_signal.tv.tv_usec = sc->sc_timedelta.tv.tv_usec;

bail_out:
	timeout_add_sec(&sc->sc_to, t_wait);
	
}

/* send a command and read back results */
int
umbg_read(struct umbg_softc *sc, u_int8_t cmd, char *buf, size_t len,
    struct timespec *tstamp)
{
	usbd_status err;
	struct usbd_xfer *xfer;

	xfer = usbd_alloc_xfer(sc->sc_udev);
	if (xfer == NULL) {
		DPRINTF(("%s: alloc xfer failed\n", sc->sc_dev.dv_xname));
		return -1;
	}

	usbd_setup_xfer(xfer, sc->sc_bulkout_pipe, NULL, &cmd, sizeof(cmd),
	    USBD_SHORT_XFER_OK | USBD_SYNCHRONOUS, USBD_DEFAULT_TIMEOUT, NULL);
	if (tstamp)
		nanotime(tstamp);
	err = usbd_transfer(xfer);
	if (err) {
		DPRINTF(("%s: sending of command failed: %s\n",
		    sc->sc_dev.dv_xname, usbd_errstr(err)));
		usbd_free_xfer(xfer);
		return -1;
	}

	usbd_setup_xfer(xfer, sc->sc_bulkin_pipe, NULL, buf, len,
	    USBD_SHORT_XFER_OK | USBD_SYNCHRONOUS, USBD_DEFAULT_TIMEOUT, NULL);

	err = usbd_transfer(xfer);
	usbd_free_xfer(xfer);
	if (err) {
		DPRINTF(("%s: reading data failed: %s\n",
		    sc->sc_dev.dv_xname, usbd_errstr(err)));
		return -1;
	}
	return 0;
}

void
umbg_it_intr(void *xsc)
{
	struct umbg_softc *sc = xsc;

	if (usbd_is_dying(sc->sc_udev))
		return;

	if (sc->sc_timedelta.status == SENSOR_S_OK) {
		sc->sc_timedelta.status = SENSOR_S_WARN;
		/*
		 * further degrade in TRUSTTIME seconds if the clocks remains
		 * free running.
		 */
		timeout_add_sec(&sc->sc_it_to, t_trust);
	} else
		sc->sc_timedelta.status = SENSOR_S_CRIT;
}
@


1.23
log
@tedu another bunch of DVACT_DEACTIVATE handlers that do nothing but set
the 'dying' flag.
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.22 2013/11/15 10:17:39 pirofti Exp $ */
d157 1
a157 1
	if (uaa->iface != NULL)
a197 6

	if ((err = usbd_set_config_index(dev, 0, 1))) {
		printf("%s: failed to set configuration, err=%s\n",
		    sc->sc_dev.dv_xname, usbd_errstr(err));
		goto fishy;
	}
@


1.22
log
@Clean-up usbd_abort_pipe() usage.


This function never fails. So change it's return type to void and
adjust the copy-pasted callers that were checking the return.

"If it compiles, ok" mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.21 2013/04/15 09:23:02 mglocker Exp $ */
d135 3
a137 4
int umbg_match(struct device *, void *, void *); 
void umbg_attach(struct device *, struct device *, void *); 
int umbg_detach(struct device *, int); 
int umbg_activate(struct device *, int); 
d149 1
a149 5
	sizeof(struct umbg_softc),
	umbg_match,
	umbg_attach,
	umbg_detach,
	umbg_activate
a434 13
}

int
umbg_activate(struct device *self, int act)
{
	struct umbg_softc *sc = (struct umbg_softc *)self;

	switch (act) {
	case DVACT_DEACTIVATE:
		usbd_deactivate(sc->sc_udev);
		break;
	}
	return 0;
@


1.21
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.20 2013/04/12 12:58:39 mpi Exp $ */
d301 1
a301 4
		err = usbd_abort_pipe(sc->sc_bulkin_pipe);
		if (err)
			printf("%s: abort rx pipe failed: %s\n",
			    sc->sc_dev.dv_xname, usbd_errstr(err));
d309 1
a309 4
		err = usbd_abort_pipe(sc->sc_bulkout_pipe);
		if (err)
			printf("%s: abort tx pipe failed: %s\n",
			    sc->sc_dev.dv_xname, usbd_errstr(err));
@


1.20
log
@Instead of using a wrapper around usbd_transfer() when submitting a
transfer synchronously just pass the USBD_SYNCHRONOUS flag like any
other flags when creating a transfer.

ok sthen@@, mglocker@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.19 2013/03/28 03:58:03 tedu Exp $ */
d52 2
a53 2
	usbd_device_handle	sc_udev;	/* USB device */
	usbd_interface_handle	sc_iface;	/* data interface */
d56 1
a56 1
	usbd_pipe_handle	sc_bulkin_pipe;
d58 1
a58 1
	usbd_pipe_handle	sc_bulkout_pipe;
d175 2
a176 2
	usbd_device_handle dev = uaa->device;
	usbd_interface_handle iface = uaa->iface;
d396 1
a396 1
	usbd_xfer_handle xfer;
@


1.19
log
@proc.h is way too much header for usb to handle.
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.18 2013/03/28 03:31:55 tedu Exp $ */
d405 1
a405 1
	    USBD_SHORT_XFER_OK, USBD_DEFAULT_TIMEOUT, NULL);
d408 1
a408 1
	err = usbd_sync_transfer(xfer);
d417 1
a417 1
	    USBD_SHORT_XFER_OK, USBD_DEFAULT_TIMEOUT, NULL);
d419 1
a419 1
	err = usbd_sync_transfer(xfer);
@


1.18
log
@you probably don't need to include vnode.h or reboot.h. you most definitely
absolutely do not need to include vnode.h because it includes uvm_extern.h
and you want the idiotic TRUE FALSE defines from uvm.
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.17 2011/07/03 15:47:17 matthew Exp $ */
a24 1
#include <sys/proc.h>
d29 1
@


1.17
log
@Remove config_activate() and DVACT_ACTIVATE.  PCMCIA's the only thing
that's ever used it, and it's long since been changed to use
DVACT_{QUIESCE,SUSPEND,RESUME} instead.

ok deraadt@@, dlg@@; miod@@ also agreed with this idea when I brought it
up a few weeks ago
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.16 2011/01/25 20:03:36 jakemsr Exp $ */
a25 1
#include <sys/vnode.h>
a27 1
#include <sys/syslog.h>
@


1.16
log
@garbage collect "usb events".  without /dev/usb there is no way to access
them from userland, and nothing in the kernel uses them.

ok krw@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.15 2010/12/06 04:41:40 jakemsr Exp $ */
a455 2
	case DVACT_ACTIVATE:
		break;
@


1.15
log
@* replace per-driver dying and/or other state variables with use of
  usbd_deactivete() and usbd_is_dying()
* use usbd_deactivate() in activate()/DEACTIVATE
* convert a few more direct checks of the associated bus' dying flag
  with usbd_is_dying()
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.14 2010/10/23 16:14:07 jakemsr Exp $ */
a277 3
	usbd_add_drv_event(USB_EVENT_DRIVER_ATTACH, sc->sc_udev,
	    &sc->sc_dev);

a327 1
	usbd_add_drv_event(USB_EVENT_DRIVER_DETACH, sc->sc_udev, &sc->sc_dev);
@


1.14
log
@check that a timeout(9) has been initialized before deleting it

ok phessler
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.13 2010/10/23 15:42:09 jakemsr Exp $ */
a55 1
	u_char			sc_dying;	/* disconnecting */
d289 1
a289 1
	sc->sc_dying = 1;
d352 1
a352 1
	if (sc->sc_dying)
d440 1
a440 1
	if (sc->sc_dying)
d463 1
a463 1
		sc->sc_dying = 1;
@


1.13
log
@create another kthread to run xfer abort tasks.  xfer abort tasks cannot
be run from the generic task kthread, because xfers that need to be
aborted block newly queued tasks from running (i.e. the xfer to be aborted
blocks the abort of that task).  as there are now three types of usb
tasks, add an argument to usb_init_task() and another member to struct
usb_task to specify the task type.

fixes boot hangs that are showing up because we now use usb tasks to
attach/detach usb devices.
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.12 2010/09/24 08:33:59 yuo Exp $ */
d299 4
a302 2
	timeout_del(&sc->sc_to);
	timeout_del(&sc->sc_it_to);
@


1.12
log
@remove dying flag in detach() function.
The dying flag will be set in activate()/DEACTIVATE.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.11 2009/11/21 14:30:35 deraadt Exp $ */
d203 1
a203 1
	usb_init_task(&sc->sc_task, umbg_task, sc);
@


1.11
log
@in the detach function remove our usb task before calling any other
teardown functions which could potentially sleep (and then, the usb
task would get called for a half-torn down device)
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.10 2009/10/13 19:33:19 pirofti Exp $ */
a297 2

	sc->sc_dying = 1;
@


1.10
log
@Get rid of devact enum, substitute it with an int and coresponding defines.

This is needed for the addition of further suspend/resume actions.

Okay deraadt@@, marco@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.9 2009/04/26 02:20:58 cnst Exp $ */
d304 2
a327 2

	usb_rem_task(sc->sc_udev, &sc->sc_task);
@


1.9
log
@in ca_attach() there is no need to set .value and .flags of sensors to 0,
since autoconf(9) allocates softc with M_ZERO;  ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.8 2008/11/21 11:38:12 mbalmer Exp $ */
d141 1
a141 1
int umbg_activate(struct device *, enum devact); 
d456 1
a456 1
umbg_activate(struct device *self, enum devact act)
@


1.8
log
@Kill whitespace, remove unneeded ,
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.7 2008/09/10 14:01:23 blambert Exp $ */
a193 2
	sc->sc_timedelta.value = 0LL;
	sc->sc_timedelta.flags = 0;
a198 2
	sc->sc_signal.value = 0LL;
	sc->sc_signal.flags = 0;
@


1.7
log
@Convert timeout_add() calls using multiples of hz to timeout_add_sec()

Really just the low-hanging fruit of (hopefully) forthcoming timeout
conversions.

ok art@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.6 2007/11/23 16:34:47 mbalmer Exp $ */
d148 10
a157 10
struct cfdriver umbg_cd = { 
	NULL, "umbg", DV_DULL 
}; 

const struct cfattach umbg_ca = { 
	sizeof(struct umbg_softc), 
	umbg_match, 
	umbg_attach, 
	umbg_detach, 
	umbg_activate, 
@


1.6
log
@Don't use uninitialized variables in umbg_detach.
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.5 2007/11/23 12:22:23 mbalmer Exp $ */
a179 1
	struct timeval t;
d286 1
a286 4
	/* convert timevals to hz */
	t.tv_sec = 5L;
	t.tv_usec = 0L;
	t_wait = tvtohz(&t);
d288 1
a288 2
	t.tv_sec = TRUSTTIME;
	t_trust = tvtohz(&t);
d378 1
a378 1
		timeout_add(&sc->sc_it_to, t_trust);
d397 1
a397 1
	timeout_add(&sc->sc_to, t_wait);
d454 1
a454 1
		timeout_add(&sc->sc_it_to, t_trust);
@


1.5
log
@Degrade sensor status in an interrupt context.
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.4 2007/11/12 16:42:23 mbalmer Exp $ */
d188 23
a228 1
	sc->sc_udev = dev;
a246 17
	strlcpy(sc->sc_sensordev.xname, sc->sc_dev.dv_xname,
	    sizeof(sc->sc_sensordev.xname));

	sc->sc_timedelta.type = SENSOR_TIMEDELTA;
	sc->sc_timedelta.status = SENSOR_S_UNKNOWN;
	sc->sc_timedelta.value = 0LL;
	sc->sc_timedelta.flags = 0;
	strlcpy(sc->sc_timedelta.desc, "USB5131",
	    sizeof(sc->sc_timedelta.desc));
	sensor_attach(&sc->sc_sensordev, &sc->sc_timedelta);

	sc->sc_signal.type = SENSOR_PERCENT;
	sc->sc_signal.value = 0LL;
	sc->sc_signal.flags = 0;
	strlcpy(sc->sc_signal.desc, "Signal", sizeof(sc->sc_signal.desc));
	sensor_attach(&sc->sc_sensordev, &sc->sc_signal);

a283 2
	sensordev_install(&sc->sc_sensordev);

a285 5

	usb_init_task(&sc->sc_task, umbg_task, sc);
	timeout_set(&sc->sc_to, umbg_intr, sc);

	timeout_set(&sc->sc_it_to, umbg_it_intr, sc);
@


1.4
log
@Don't use utc_off, time is always reported in UTC.
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.3 2007/11/10 14:40:09 mbalmer Exp $ */
a66 1
	struct usb_task		sc_it_task;
a136 1
void umbg_it_probe(void *);
a286 1
	usb_init_task(&sc->sc_it_task, umbg_it_probe, sc);
a338 1
	usb_rem_task(sc->sc_udev, &sc->sc_it_task);
d343 1
a343 2
	usbd_add_drv_event(USB_EVENT_DRIVER_DETACH, sc->sc_udev,
	    &sc->sc_dev);
a446 1
/* degrade the sensor */
a450 7
	usb_add_task(sc->sc_udev, &sc->sc_it_task);
}

void
umbg_it_probe(void *xsc)
{
	struct umbg_softc *sc = xsc;
a453 2

	DPRINTF(("\ndegrading sensor state\n"));
@


1.3
log
@Clean up some debugging left-overs.
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.2 2007/11/10 13:43:05 mbalmer Exp $ */
d91 1
a91 1
	u_int32_t		sec;		/* seconds since the epoch */
d93 1
a93 1
	int32_t			utc_off;	/* UTC offset in seconds */
d383 1
a383 1
	trecv = (letoh32(tframe.sec) - letoh32(tframe.utc_off)) * NSECPERSEC +
@


1.2
log
@knf.
@
text
@d1 1
a1 1
/*	$OpenBSD: umbg.c,v 1.1 2007/11/10 12:58:08 mbalmer Exp $ */
d106 1
a106 1
#define MBG_INVALID		0x80	/* time is invalid */
d192 2
a193 2
		DPRINTF(("%s: failed to set configuration, err=%s\n",
		    sc->sc_dev.dv_xname, usbd_errstr(err)));
d198 2
a199 2
		DPRINTF(("%s: failed to get interface, err=%s\n",
		    sc->sc_dev.dv_xname, usbd_errstr(err)));
a303 1
	DPRINTF(("umbg_attach failed\n"));
a373 2
		DPRINTF(("%s: error reading hi-res time\n",
		    sc->sc_dev.dv_xname));
a377 2
		DPRINTF(("%s: invalid time, battery was disconnected\n",
		    sc->sc_dev.dv_xname));
@


1.1
log
@umbg(4) is a driver to support the USB attached Meinberg USB5131 DCF77
radio clock.  umbg(4) implements a timedelta sensor and reports the
signal quality in the Signal sensor as percentage.  The signal sensor status
further indicates if the clock is free running (WARN).

ok dlg, jsg
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d241 1
a241 2
	strlcpy(sc->sc_signal.desc, "Signal",
	    sizeof(sc->sc_signal.desc));
@

