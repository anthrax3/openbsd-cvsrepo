head	1.24;
access;
symbols
	OPENBSD_6_1:1.24.0.4
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.23.0.6
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.22.0.4
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.20.0.4
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.16.0.8
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.6
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.4
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.15.0.2
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.11.0.10
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.6
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.4
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.1.0.2
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.4
	OPENBSD_4_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.24
date	2016.09.02.09.14.59;	author mpi;	state Exp;
branches;
next	1.23;
commitid	blfE5YU3eGM81J65;

1.23
date	2016.01.07.12.53.37;	author mpi;	state Exp;
branches;
next	1.22;
commitid	cbOY1YhZQayIAejH;

1.22
date	2015.03.14.03.38.49;	author jsg;	state Exp;
branches;
next	1.21;
commitid	p4LJxGKbi0BU2cG6;

1.21
date	2014.11.18.23.55.01;	author krw;	state Exp;
branches;
next	1.20;
commitid	Qb045HZ5OhQfU69H;

1.20
date	2014.07.12.20.26.33;	author mpi;	state Exp;
branches;
next	1.19;
commitid	PSjXNz8dGohZ6ZSK;

1.19
date	2013.11.15.08.25.31;	author pirofti;	state Exp;
branches;
next	1.18;

1.18
date	2013.11.07.11.50.38;	author pirofti;	state Exp;
branches;
next	1.17;

1.17
date	2013.04.15.09.23.01;	author mglocker;	state Exp;
branches;
next	1.16;

1.16
date	2011.07.03.15.47.17;	author matthew;	state Exp;
branches;
next	1.15;

1.15
date	2011.01.25.20.03.36;	author jakemsr;	state Exp;
branches;
next	1.14;

1.14
date	2010.09.24.08.33.59;	author yuo;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.13.19.33.17;	author pirofti;	state Exp;
branches;
next	1.12;

1.12
date	2009.08.16.12.55.55;	author jsg;	state Exp;
branches;
next	1.11;

1.11
date	2007.10.11.18.33.14;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2007.06.14.10.11.15;	author mbalmer;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.13.06.25.03;	author mbalmer;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.12.16.26.36;	author mbalmer;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.10.14.49.00;	author mbalmer;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.10.10.53.48;	author mbalmer;	state Exp;
branches;
next	1.5;

1.5
date	2007.06.06.19.25.49;	author mk;	state Exp;
branches;
next	1.4;

1.4
date	2007.06.05.08.43.55;	author mbalmer;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.27.04.00.25;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.21.05.40.27;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.14.08.30.22;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Avoid calling usbd_set_config_index() in *_attach() and let the stack
do it instead.

If anything bad happen due to a malformed descriptor it makes no sense
to try to attach a driver, and bail before probing.
@
text
@/*	$OpenBSD: uark.c,v 1.23 2016/01/07 12:53:37 mpi Exp $	*/

/*
 * Copyright (c) 2006 Jonathan Gray <jsg@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/tty.h>
#include <sys/device.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdi_util.h>
#include <dev/usb/usbdevs.h>

#include <dev/usb/ucomvar.h>

#ifdef UARK_DEBUG
#define DPRINTFN(n, x)  do { if (uarkdebug > (n)) printf x; } while (0)
int	uarkebug = 0;
#else
#define DPRINTFN(n, x)
#endif
#define DPRINTF(x) DPRINTFN(0, x)

#define UARKBUFSZ		256
#define UARK_IFACE_NO		0

#define UARK_SET_DATA_BITS(x)	(x - 5)

#define UARK_PARITY_NONE	0x00
#define UARK_PARITY_ODD		0x08
#define UARK_PARITY_EVEN	0x18

#define UARK_STOP_BITS_1	0x00
#define UARK_STOP_BITS_2	0x04

#define UARK_BAUD_REF		3000000

#define UARK_WRITE		0x40
#define UARK_READ		0xc0

#define UARK_REQUEST		0xfe

struct uark_softc {
	struct device		 sc_dev;
	struct usbd_device	*sc_udev;
	struct usbd_interface	*sc_iface;
	struct device 		*sc_subdev;

	u_char			 sc_msr;
	u_char			 sc_lsr;
};

void	uark_get_status(void *, int portno, u_char *lsr, u_char *msr);
void	uark_set(void *, int, int, int);
int	uark_param(void *, int, struct termios *);
void	uark_break(void *, int, int);
int	uark_cmd(struct uark_softc *, uint16_t, uint16_t);

struct ucom_methods uark_methods = {
	uark_get_status,
	uark_set,
	uark_param,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
};

static const struct usb_devno uark_devs[] = {
	{ USB_VENDOR_ARKMICRO,		USB_PRODUCT_ARKMICRO_ARK3116 }
};

int uark_match(struct device *, void *, void *);
void uark_attach(struct device *, struct device *, void *);
int uark_detach(struct device *, int);

struct cfdriver uark_cd = {
	NULL, "uark", DV_DULL
};

const struct cfattach uark_ca = {
	sizeof(struct uark_softc), uark_match, uark_attach, uark_detach
};

int
uark_match(struct device *parent, void *match, void *aux)
{
	struct usb_attach_arg *uaa = aux;

	if (uaa->iface == NULL)
		return UMATCH_NONE;

	return (usb_lookup(uark_devs, uaa->vendor, uaa->product) != NULL) ?
	    UMATCH_VENDOR_PRODUCT : UMATCH_NONE;
}

void
uark_attach(struct device *parent, struct device *self, void *aux)
{
	struct uark_softc *sc = (struct uark_softc *)self;
	struct usb_attach_arg *uaa = aux;
	struct ucom_attach_args uca;
	usb_interface_descriptor_t *id;
	usb_endpoint_descriptor_t *ed;
	usbd_status error;
	int i;

	bzero(&uca, sizeof(uca));
	sc->sc_udev = uaa->device;

	/* get the first interface handle */
	error = usbd_device2interface_handle(sc->sc_udev, UARK_IFACE_NO,
	    &sc->sc_iface);
	if (error != 0) {
		printf("%s: could not get interface handle\n",
		    sc->sc_dev.dv_xname);
		usbd_deactivate(sc->sc_udev);
		return;
	}

	id = usbd_get_interface_descriptor(sc->sc_iface);

	uca.bulkin = uca.bulkout = -1;
	for (i = 0; i < id->bNumEndpoints; i++) {
		ed = usbd_interface2endpoint_descriptor(sc->sc_iface, i);
		if (ed == NULL) {
			printf("%s: no endpoint descriptor found for %d\n",
			    sc->sc_dev.dv_xname, i);
			usbd_deactivate(sc->sc_udev);
			return;
		}

		if (UE_GET_DIR(ed->bEndpointAddress) == UE_DIR_IN &&
		    UE_GET_XFERTYPE(ed->bmAttributes) == UE_BULK)
			uca.bulkin = ed->bEndpointAddress;
		else if (UE_GET_DIR(ed->bEndpointAddress) == UE_DIR_OUT &&
		    UE_GET_XFERTYPE(ed->bmAttributes) == UE_BULK)
			uca.bulkout = ed->bEndpointAddress;
	}

	if (uca.bulkin == -1 || uca.bulkout == -1) {
		printf("%s: missing endpoint\n", sc->sc_dev.dv_xname);
		usbd_deactivate(sc->sc_udev);
		return;
	}

	uca.ibufsize = UARKBUFSZ;
	uca.obufsize = UARKBUFSZ;
	uca.ibufsizepad = UARKBUFSZ;
	uca.opkthdrlen = 0;
	uca.device = sc->sc_udev;
	uca.iface = sc->sc_iface;
	uca.methods = &uark_methods;
	uca.arg = sc;
	uca.info = NULL;
	
	sc->sc_subdev = config_found_sm(self, &uca, ucomprint, ucomsubmatch);
}

int
uark_detach(struct device *self, int flags)
{
	struct uark_softc *sc = (struct uark_softc *)self;
	int rv = 0;

	if (sc->sc_subdev != NULL) {
		rv = config_detach(sc->sc_subdev, flags);
		sc->sc_subdev = NULL;
	}

	return (rv);
}

void
uark_set(void *vsc, int portno, int reg, int onoff)
{
	struct uark_softc *sc = vsc;

	switch (reg) {
	case UCOM_SET_BREAK:
		uark_break(sc, portno, onoff);
		return;
	case UCOM_SET_DTR:
	case UCOM_SET_RTS:
	default:
		return;
	}
}

int
uark_param(void *vsc, int portno, struct termios *t)
{
	struct uark_softc *sc = (struct uark_softc *)vsc;
	int data;

	switch (t->c_ospeed) {
	case 300:
	case 600:
	case 1200:
	case 1800:
	case 2400:
	case 4800:
	case 9600:
	case 19200:
	case 38400:
	case 57600:
	case 115200:
		uark_cmd(sc, 3, 0x83);
		uark_cmd(sc, 0, (UARK_BAUD_REF / t->c_ospeed) & 0xFF);
		uark_cmd(sc, 1, (UARK_BAUD_REF / t->c_ospeed) >> 8);
		uark_cmd(sc, 3, 0x03);
		break;
	default:
		return (EINVAL);
	}

	if (ISSET(t->c_cflag, CSTOPB))
		data = UARK_STOP_BITS_2;
	else
		data = UARK_STOP_BITS_1;

	if (ISSET(t->c_cflag, PARENB)) {
		if (ISSET(t->c_cflag, PARODD))
			data |= UARK_PARITY_ODD;
		else
			data |= UARK_PARITY_EVEN;
	} else
		data |= UARK_PARITY_NONE;

	switch (ISSET(t->c_cflag, CSIZE)) {
	case CS5:
		data |= UARK_SET_DATA_BITS(5);
		break;
	case CS6:
		data |= UARK_SET_DATA_BITS(6);
		break;
	case CS7:
		data |= UARK_SET_DATA_BITS(7);
		break;
	case CS8:
		data |= UARK_SET_DATA_BITS(8);
		break;
	}

	uark_cmd(sc, 3, 0x00);
	uark_cmd(sc, 3, data);

#if 0
	/* XXX flow control */
	if (ISSET(t->c_cflag, CRTSCTS))
		/*  rts/cts flow ctl */
	} else if (ISSET(t->c_iflag, IXON|IXOFF)) {
		/*  xon/xoff flow ctl */
	} else {
		/* disable flow ctl */
	}
#endif

	return (0);
}

void
uark_get_status(void *vsc, int portno, u_char *lsr, u_char *msr)
{
	struct uark_softc *sc = vsc;
	
	if (msr != NULL)
		*msr = sc->sc_msr;
	if (lsr != NULL)
		*lsr = sc->sc_lsr;
}

void
uark_break(void *vsc, int portno, int onoff)
{
#ifdef UARK_DEBUG
	struct uark_softc *sc = vsc;

	printf("%s: break %s!\n", sc->sc_dev.dv_xname,
	    onoff ? "on" : "off");

	if (onoff)
		/* break on */
		uark_cmd(sc, 4, 0x01);
	else
		uark_cmd(sc, 4, 0x00);
#endif
}

int
uark_cmd(struct uark_softc *sc, uint16_t index, uint16_t value)
{
	usb_device_request_t req;
	usbd_status err;

	req.bmRequestType = UARK_WRITE;
	req.bRequest = UARK_REQUEST;
	USETW(req.wValue, value);
	USETW(req.wIndex, index);
	USETW(req.wLength, 0);
	err = usbd_do_request(sc->sc_udev, &req, NULL);

	if (err)
		return (EIO);

	return (0);
}
@


1.23
log
@Rename some wrongly defined *_CONFIG_NO into *_CONFIG_INDEX.

Configuration indexes start a 0, for the default one, while
numbers correspond to the 'bConfigurationValue' field of a
config descriptor.
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.22 2015/03/14 03:38:49 jsg Exp $	*/
a40 1
#define UARK_CONFIG_INDEX	0
d107 1
a107 1
	if (uaa->iface != NULL)
a126 7

	if (usbd_set_config_index(sc->sc_udev, UARK_CONFIG_INDEX, 1) != 0) {
		printf("%s: could not set configuration no\n",
		    sc->sc_dev.dv_xname);
		usbd_deactivate(sc->sc_udev);
		return;
	}
@


1.22
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.21 2014/11/18 23:55:01 krw Exp $	*/
d41 1
a41 1
#define UARK_CONFIG_NO	0
d129 1
a129 1
	if (usbd_set_config_index(sc->sc_udev, UARK_CONFIG_NO, 1) != 0) {
@


1.21
log
@Nuke yet more obvious #include duplications.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.20 2014/07/12 20:26:33 mpi Exp $	*/
a21 1
#include <sys/conf.h>
@


1.20
log
@tedu another bunch of DVACT_DEACTIVATE handlers that do nothing but set
the 'dying' flag.
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.19 2013/11/15 08:25:31 pirofti Exp $	*/
a30 1
#include <dev/usb/usbdevs.h>
@


1.19
log
@Sort-out activate functionality for ucom(4) and it's parents.


The child should not have to call the parent for deactivation.
The parent should handle it.
So kill the activate routine in ucom(4) and adapt the parents
to no longer call it.


Also remove sc_dying in ucom(4) and use usbd_is_dying() instead.

Okay mpi@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.18 2013/11/07 11:50:38 pirofti Exp $	*/
d93 10
a102 15
int uark_match(struct device *, void *, void *); 
void uark_attach(struct device *, struct device *, void *); 
int uark_detach(struct device *, int); 
int uark_activate(struct device *, int); 

struct cfdriver uark_cd = { 
	NULL, "uark", DV_DULL 
}; 

const struct cfattach uark_ca = { 
	sizeof(struct uark_softc), 
	uark_match, 
	uark_attach, 
	uark_detach, 
	uark_activate, 
a198 13
}

int
uark_activate(struct device *self, int act)
{
	struct uark_softc *sc = (struct uark_softc *)self;

	switch (act) {
	case DVACT_DEACTIVATE:
		usbd_deactivate(sc->sc_udev);
		break;
	}
	return (0);
@


1.18
log
@Replace sc_dying in favour of usbd_is_dying() and usbd_deactivate().

Okay mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.17 2013/04/15 09:23:01 mglocker Exp $	*/
a209 1
	int rv = 0;
a212 2
		if (sc->sc_subdev != NULL)
			rv = config_deactivate(sc->sc_subdev);
d216 1
a216 1
	return (rv);
@


1.17
log
@Get rid of various 'typedef struct' definitions and use plain structure
definitions instead.  We don't change usb.h for now to stay compatible
with userland.

Tested by mpi@@ on macppc and myself on i386.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.16 2011/07/03 15:47:17 matthew Exp $	*/
a69 2

	u_char			 sc_dying;
d139 1
a139 1
		sc->sc_dying = 1;
d149 1
a149 1
		sc->sc_dying = 1;
d161 1
a161 1
			sc->sc_dying = 1;
d175 1
a175 1
		sc->sc_dying = 1;
d216 1
a216 1
		sc->sc_dying = 1;
@


1.16
log
@Remove config_activate() and DVACT_ACTIVATE.  PCMCIA's the only thing
that's ever used it, and it's long since been changed to use
DVACT_{QUIESCE,SUSPEND,RESUME} instead.

ok deraadt@@, dlg@@; miod@@ also agreed with this idea when I brought it
up a few weeks ago
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.15 2011/01/25 20:03:36 jakemsr Exp $	*/
d64 2
a65 2
	usbd_device_handle	 sc_udev;
	usbd_interface_handle	 sc_iface;
@


1.15
log
@garbage collect "usb events".  without /dev/usb there is no way to access
them from userland, and nothing in the kernel uses them.

ok krw@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.14 2010/09/24 08:33:59 yuo Exp $	*/
a214 3
	case DVACT_ACTIVATE:
		break;

@


1.14
log
@remove dying flag in detach() function.
The dying flag will be set in activate()/DEACTIVATE.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.13 2009/10/13 19:33:17 pirofti Exp $	*/
a189 3

	usbd_add_drv_event(USB_EVENT_DRIVER_ATTACH, sc->sc_udev,
	    &sc->sc_dev);
a203 3

	usbd_add_drv_event(USB_EVENT_DRIVER_DETACH, sc->sc_udev,
			   &sc->sc_dev);
@


1.13
log
@Get rid of devact enum, substitute it with an int and coresponding defines.

This is needed for the addition of further suspend/resume actions.

Okay deraadt@@, marco@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.12 2009/08/16 12:55:55 jsg Exp $	*/
a202 1
	sc->sc_dying = 1;
@


1.12
log
@remove prototype for uark_open for which there is no implementation.
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.11 2007/10/11 18:33:14 deraadt Exp $	*/
d98 1
a98 1
int uark_activate(struct device *, enum devact); 
d216 1
a216 1
uark_activate(struct device *self, enum devact act)
@


1.11
log
@treat usb vendor/product names as a locator, and have usbd_print handle it,
so that it shows up before the :.  as a result, all the usb devices do not
need to have name printing code anymore.  all this now works and prints
nicely because usbd_probe_and_attach() is serialized.  ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.10 2007/06/14 10:11:15 mbalmer Exp $	*/
a76 1
int	uark_open(void *sc, int);
@


1.10
log
@Remove the definition and usage of the USB_DECLARE_DRIVER_CLASS and
USB_DECLARE_DRIVER macros.

No binary change.

ok dlg.
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.9 2007/06/13 06:25:03 mbalmer Exp $	*/
a133 1
	char *devinfop;
a137 3
	devinfop = usbd_devinfo_alloc(uaa->device, 0);
	printf("\n%s: %s\n", sc->sc_dev.dv_xname, devinfop);
	usbd_devinfo_free(devinfop);
@


1.9
log
@Apply some KNF after the recent removal of macros and type definitions.

No binary change.

ok ray.
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.8 2007/06/12 16:26:36 mbalmer Exp $	*/
d96 16
a111 1
USB_DECLARE_DRIVER(uark);
@


1.8
log
@Remove the definition and use of the device_ptr_t which was a struct device *.

No binary change.

ok mk.
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.7 2007/06/10 14:49:00 mbalmer Exp $	*/
d63 4
a66 4
	struct device		sc_dev;
	usbd_device_handle	sc_udev;
	usbd_interface_handle	sc_iface;
	struct device *		sc_subdev;
d68 2
a69 2
	u_char			sc_msr;
	u_char			sc_lsr;
d71 1
a71 1
	u_char			sc_dying;
@


1.7
log
@Remove the definition and use of the USBDEVNAME macro.

(This might look easy, but it was a big diff.  Thanks to dlg and especially jsg
for looking over it; we found at least four mistakes in the initial diff.)

ok jsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.6 2007/06/10 10:53:48 mbalmer Exp $	*/
d66 1
a66 1
	device_ptr_t		sc_subdev;
d206 1
a206 1
uark_activate(device_ptr_t self, enum devact act)
@


1.6
log
@Remove the definition and use of the USBDEV macro.  It only created confusion
and the address of it's argument:  USBDEV(sc->sc_dev) yields &sc->sc_dev.

No binary changes.

ok jsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.5 2007/06/06 19:25:49 mk Exp $	*/
d125 1
a125 1
	printf("\n%s: %s\n", USBDEVNAME(sc->sc_dev), devinfop);
d130 1
a130 1
		    USBDEVNAME(sc->sc_dev));
d140 1
a140 1
		    USBDEVNAME(sc->sc_dev));
d152 1
a152 1
			    USBDEVNAME(sc->sc_dev), i);
d166 1
a166 1
		printf("%s: missing endpoint\n", USBDEVNAME(sc->sc_dev));
d329 1
a329 1
	printf("%s: break %s!\n", USBDEVNAME(sc->sc_dev),
@


1.5
log
@Mechanical removal of USBBASEDEVICE.  No binary change.

Tested by thib and myself.

ok mbalmer jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.4 2007/06/05 08:43:55 mbalmer Exp $	*/
d182 1
a182 1
	    USBDEV(sc->sc_dev));
d200 1
a200 1
			   USBDEV(sc->sc_dev));
@


1.4
log
@Remove the "Static" declaration of many functions.  It was defined to be empty
and it was not consistently used.  It was confusing as it suggested these
functions were static, which they were not.

discussed with dlg and jsg, ok jsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.3 2007/05/27 04:00:25 jsg Exp $	*/
d63 1
a63 1
	USBBASEDEVICE		sc_dev;
@


1.3
log
@Farewell USB_{ATTACH,MATCH,DETACH}* you will not be missed.
ok deraadt@@ krw@@ mbalmer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.2 2007/05/21 05:40:27 jsg Exp $	*/
d74 6
a79 6
Static void	uark_get_status(void *, int portno, u_char *lsr, u_char *msr);
Static void	uark_set(void *, int, int, int);
Static int	uark_param(void *, int, struct termios *);
Static int	uark_open(void *sc, int);
Static void	uark_break(void *, int, int);
Static int	uark_cmd(struct uark_softc *, uint16_t, uint16_t);
d224 1
a224 1
Static void
d240 1
a240 1
Static int
@


1.2
log
@Remove logprintf macro
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.1 2006/08/14 08:30:22 jsg Exp $	*/
d98 2
a99 1
USB_MATCH(uark)
d101 1
a101 1
	USB_MATCH_START(uark, uaa);
d110 2
a111 1
USB_ATTACH(uark)
d113 2
a114 1
	USB_ATTACH_START(uark, sc, uaa);
d125 1
a125 2
	USB_ATTACH_SETUP;
	printf("%s: %s\n", USBDEVNAME(sc->sc_dev), devinfop);
d132 1
a132 1
		USB_ATTACH_ERROR_RETURN;
d142 1
a142 1
		USB_ATTACH_ERROR_RETURN;
d154 1
a154 1
			USB_ATTACH_ERROR_RETURN;
d168 1
a168 1
		USB_ATTACH_ERROR_RETURN;
a184 2

	USB_ATTACH_SUCCESS_RETURN;
d187 2
a188 1
USB_DETACH(uark)
d190 1
a190 1
	USB_DETACH_START(uark, sc);
@


1.1
log
@Driver for Arkmicro Technologies ARK3116 USB UART based devices.
@
text
@d1 1
a1 1
/*	$OpenBSD: uark.c,v 1.3 2006/06/23 06:27:12 miod Exp $	*/
d35 1
a35 1
#define DPRINTFN(n, x)  do { if (uarkdebug > (n)) logprintf x; } while (0)
@

