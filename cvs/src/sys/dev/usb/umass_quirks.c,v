head	1.32;
access;
symbols
	OPENBSD_6_0:1.32.0.8
	OPENBSD_6_0_BASE:1.32
	OPENBSD_5_9:1.32.0.2
	OPENBSD_5_9_BASE:1.32
	OPENBSD_5_8:1.32.0.4
	OPENBSD_5_8_BASE:1.32
	OPENBSD_5_7:1.31.0.2
	OPENBSD_5_7_BASE:1.31
	OPENBSD_5_6:1.30.0.28
	OPENBSD_5_6_BASE:1.30
	OPENBSD_5_5:1.30.0.26
	OPENBSD_5_5_BASE:1.30
	OPENBSD_5_4:1.30.0.22
	OPENBSD_5_4_BASE:1.30
	OPENBSD_5_3:1.30.0.20
	OPENBSD_5_3_BASE:1.30
	OPENBSD_5_2:1.30.0.18
	OPENBSD_5_2_BASE:1.30
	OPENBSD_5_1_BASE:1.30
	OPENBSD_5_1:1.30.0.16
	OPENBSD_5_0:1.30.0.14
	OPENBSD_5_0_BASE:1.30
	OPENBSD_4_9:1.30.0.12
	OPENBSD_4_9_BASE:1.30
	OPENBSD_4_8:1.30.0.10
	OPENBSD_4_8_BASE:1.30
	OPENBSD_4_7:1.30.0.6
	OPENBSD_4_7_BASE:1.30
	OPENBSD_4_6:1.30.0.8
	OPENBSD_4_6_BASE:1.30
	OPENBSD_4_5:1.30.0.4
	OPENBSD_4_5_BASE:1.30
	OPENBSD_4_4:1.30.0.2
	OPENBSD_4_4_BASE:1.30
	OPENBSD_4_3:1.29.0.4
	OPENBSD_4_3_BASE:1.29
	OPENBSD_4_2:1.29.0.2
	OPENBSD_4_2_BASE:1.29
	OPENBSD_4_1:1.24.0.2
	OPENBSD_4_1_BASE:1.24
	OPENBSD_4_0:1.22.0.6
	OPENBSD_4_0_BASE:1.22
	OPENBSD_3_9:1.22.0.2
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.20.0.2
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.17.0.2
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.15.0.4
	OPENBSD_3_6_BASE:1.15
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	SMP:1.6.0.4
	UBC:1.6.0.2
	UBC_SYNC_A:1.3
	UBC_SYNC_B:1.2;
locks; strict;
comment	@ * @;


1.32
date	2015.06.24.11.32.37;	author mpi;	state Exp;
branches;
next	1.31;
commitid	r4kG95Ggk32vvYGu;

1.31
date	2014.10.05.08.34.14;	author mpi;	state Exp;
branches;
next	1.30;
commitid	9pTXkCRwWSWWERui;

1.30
date	2008.06.26.05.42.19;	author ray;	state Exp;
branches;
next	1.29;

1.29
date	2007.06.13.10.33.52;	author mbalmer;	state Exp;
branches;
next	1.28;

1.28
date	2007.06.10.14.49.01;	author mbalmer;	state Exp;
branches;
next	1.27;

1.27
date	2007.06.05.08.43.56;	author mbalmer;	state Exp;
branches;
next	1.26;

1.26
date	2007.06.04.10.34.04;	author mbalmer;	state Exp;
branches;
next	1.25;

1.25
date	2007.03.13.06.23.45;	author steven;	state Exp;
branches;
next	1.24;

1.24
date	2006.12.09.21.22.30;	author pedro;	state Exp;
branches;
next	1.23;

1.23
date	2006.12.09.21.06.12;	author pedro;	state Exp;
branches;
next	1.22;

1.22
date	2005.12.31.04.55.52;	author fgsch;	state Exp;
branches;
next	1.21;

1.21
date	2005.12.18.12.34.43;	author kettenis;	state Exp;
branches;
next	1.20;

1.20
date	2005.06.02.02.03.33;	author krw;	state Exp;
branches;
next	1.19;

1.19
date	2005.05.26.20.54.39;	author krw;	state Exp;
branches;
next	1.18;

1.18
date	2005.05.25.21.12.54;	author krw;	state Exp;
branches;
next	1.17;

1.17
date	2004.11.11.07.48.02;	author grange;	state Exp;
branches;
next	1.16;

1.16
date	2004.10.18.12.56.43;	author dlg;	state Exp;
branches;
next	1.15;

1.15
date	2004.07.21.07.43.41;	author dlg;	state Exp;
branches;
next	1.14;

1.14
date	2004.07.17.06.04.00;	author dlg;	state Exp;
branches;
next	1.13;

1.13
date	2004.07.09.19.14.41;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2004.06.13.19.52.57;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2004.04.10.08.11.21;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2004.02.21.00.47.42;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2004.01.14.02.00.41;	author krw;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.03.09.11.37;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.27.12.35.58;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.19.01.02.39;	author nate;	state Exp;
branches
	1.6.2.1
	1.6.4.1;
next	1.5;

1.5
date	2003.05.18.18.22.23;	author nate;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.18.18.13.01;	author nate;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.17.06.07.57;	author nate;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.07.18.29.18;	author nate;	state dead;
branches;
next	1.1;

1.1
date	2002.05.07.18.08.04;	author nate;	state Exp;
branches;
next	;

1.6.2.1
date	2003.05.20.02.52.19;	author tedu;	state Exp;
branches;
next	;

1.6.4.1
date	2003.06.07.10.39.47;	author ho;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2004.02.19.10.56.34;	author niklas;	state Exp;
branches;
next	1.6.4.3;

1.6.4.3
date	2004.06.05.23.12.58;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Quirk needed for SuperTop IDE bridge from frantisek holop.
@
text
@/*	$OpenBSD: umass_quirks.c,v 1.31 2014/10/05 08:34:14 mpi Exp $	*/
/*	$NetBSD: umass_quirks.c,v 1.67 2004/06/28 07:49:16 mycroft Exp $	*/

/*
 * Copyright (c) 2001 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by MAEKAWA Masahide (gehenna@@NetBSD.org).
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/buf.h>

#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdevs.h>

#include <dev/usb/umassvar.h>
#include <dev/usb/umass_quirks.h>

usbd_status umass_init_insystem(struct umass_softc *);
usbd_status umass_init_shuttle(struct umass_softc *);

void umass_fixup_sony(struct umass_softc *);
void umass_fixup_yedata(struct umass_softc *);

const struct umass_quirk umass_quirks[] = {
	{ { USB_VENDOR_ATI, USB_PRODUCT_ATI2_205 },
	  UMASS_WPROTO_BBB, UMASS_CPROTO_ISD_ATA,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_DMI, USB_PRODUCT_DMI_SA2_0 },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_DOMAIN, USB_PRODUCT_DOMAIN_ROCKCHIP },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  UMASS_QUIRK_WRONG_CSWTAG,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_EASYDISK, USB_PRODUCT_EASYDISK_EASYDISK },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_FUJIPHOTO, USB_PRODUCT_FUJIPHOTO_MASS0100 },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  ADEV_NOSENSE,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_GENESYS, USB_PRODUCT_GENESYS_GL641USB },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_HP, USB_PRODUCT_HP_CDWRITERPLUS },
	  UMASS_WPROTO_CBI, UMASS_CPROTO_ATAPI,
	  0,
	  ADEV_NOSENSE,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_IMATION, USB_PRODUCT_IMATION_FLASHGO },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_INSYSTEM, USB_PRODUCT_INSYSTEM_ADAPTERV2 },
	  UMASS_WPROTO_BBB, UMASS_CPROTO_ISD_ATA,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},
	{ { USB_VENDOR_INSYSTEM, USB_PRODUCT_INSYSTEM_ATAPI },
	  UMASS_WPROTO_BBB, UMASS_CPROTO_ISD_ATA,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},
	{ { USB_VENDOR_INSYSTEM, USB_PRODUCT_INSYSTEM_DRIVEV2_5 },
	  UMASS_WPROTO_BBB, UMASS_CPROTO_ISD_ATA,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_INSYSTEM, USB_PRODUCT_INSYSTEM_IDEUSB2 },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_INSYSTEM, USB_PRODUCT_INSYSTEM_USBCABLE },
	  UMASS_WPROTO_CBI, UMASS_CPROTO_ATAPI,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  umass_init_insystem, NULL
	},

	{ { USB_VENDOR_IODATA2, USB_PRODUCT_IODATA2_USB2SC },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_IOMEGA, USB_PRODUCT_IOMEGA_ZIP100 },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_IOMEGA, USB_PRODUCT_IOMEGA_ZIP250 },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_IOMEGA, USB_PRODUCT_IOMEGA_ZIP250_2 },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_IRIVER, USB_PRODUCT_IRIVER_IFP_1XX },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  SDEV_ONLYBIG,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_IRIVER, USB_PRODUCT_IRIVER_IFP_3XX },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_MELCO, USB_PRODUCT_MELCO_DUBPXXG },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_MICROTECH, USB_PRODUCT_MICROTECH_DPCM },
	  UMASS_WPROTO_CBI, UMASS_CPROTO_ATAPI,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_MINOLTA, USB_PRODUCT_MINOLTA_S304 },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_MINOLTA, USB_PRODUCT_MINOLTA_X },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_MINOLTA, USB_PRODUCT_MINOLTA_DIMAGEA1 },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_MSYSTEMS, USB_PRODUCT_MSYSTEMS_DISKONKEY },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_MSYSTEMS, USB_PRODUCT_MSYSTEMS_DISKONKEY2 },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_ATAPI,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_NEODIO, USB_PRODUCT_NEODIO_ND3050 },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_NEODIO, USB_PRODUCT_NEODIO_ND5010 },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_OLYMPUS, USB_PRODUCT_OLYMPUS_C1 },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  UMASS_QUIRK_WRONG_CSWSIG,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_OLYMPUS, USB_PRODUCT_OLYMPUS_C700 },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  SDEV_ONLYBIG | SDEV_NOSYNCCACHE,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_ONSPEC, USB_PRODUCT_ONSPEC_MD1II },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_ONSPEC, USB_PRODUCT_ONSPEC_MD2 },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_OTI, USB_PRODUCT_OTI_SOLID },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_PEN, USB_PRODUCT_PEN_MOBILEDRIVE },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_PEN, USB_PRODUCT_PEN_USBDISK },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_PEN, USB_PRODUCT_PEN_USBREADER },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_PILOTECH, USB_PRODUCT_PILOTECH_CRW600 },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_PQI, USB_PRODUCT_PQI_TRAVELFLASH },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_SCANLOGIC, USB_PRODUCT_SCANLOGIC_SL11R },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  UMASS_QUIRK_WRONG_CSWTAG,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_SHUTTLE, USB_PRODUCT_SHUTTLE_EUSB },
	  UMASS_WPROTO_CBI_I, UMASS_CPROTO_ATAPI,
	  0,
	  ADEV_NOSENSE,
	  UMATCH_VENDOR_PRODUCT,
	  umass_init_shuttle, NULL
	},

	{ { USB_VENDOR_SHUTTLE, USB_PRODUCT_SHUTTLE_ZIOMMC },
	  UMASS_WPROTO_CBI_I, UMASS_CPROTO_ATAPI,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_SIIG, USB_PRODUCT_SIIG_MULTICARDREADER },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL,NULL
	},

	{ { USB_VENDOR_SONY, USB_PRODUCT_SONY_DRIVEV2 },
	  UMASS_WPROTO_BBB, UMASS_CPROTO_ISD_ATA,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_SONY, USB_PRODUCT_SONY_DSC },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, umass_fixup_sony
	},

	{ { USB_VENDOR_SONY, USB_PRODUCT_SONY_MSC },
	  UMASS_WPROTO_CBI, UMASS_CPROTO_UFI,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_TEAC, USB_PRODUCT_TEAC_FD05PUB },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_TREK, USB_PRODUCT_TREK_THUMBDRIVE_8MB },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  0,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_TRUMPION, USB_PRODUCT_TRUMPION_XXX1100 },
	  UMASS_WPROTO_CBI, UMASS_CPROTO_ATAPI,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_YANO, USB_PRODUCT_YANO_U640MO },
	  UMASS_WPROTO_CBI_I, UMASS_CPROTO_ATAPI,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT,
	  NULL, NULL
	},

	{ { USB_VENDOR_YEDATA, USB_PRODUCT_YEDATA_FLASHBUSTERU },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UFI,
	  0,
	  0,
	  UMATCH_VENDOR_PRODUCT_REV,
	  NULL, umass_fixup_yedata
	},

	{ { USB_VENDOR_SIGMATEL, USB_PRODUCT_SIGMATEL_DNSSF7X},
	 UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	 0,
	 SDEV_NOSYNCCACHE,
	 UMATCH_VENDOR_PRODUCT,
	 NULL, NULL
	},

	{ { USB_VENDOR_CREATIVE, USB_PRODUCT_CREATIVE_NOMAD},
	 UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	 0,
	 SDEV_NOSYNCCACHE,
	 UMATCH_VENDOR_PRODUCT,
	 NULL, NULL
	},

	{ { USB_VENDOR_SUPERTOP, USB_PRODUCT_SUPERTOP_IDEBRIDGE },
	 UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	 0,
	 ADEV_NOSENSE,
	 UMATCH_VENDOR_PRODUCT,
	 NULL, NULL
	},
};

const struct umass_quirk *
umass_lookup(u_int16_t vendor, u_int16_t product)
{
	return ((const struct umass_quirk *)
		usb_lookup(umass_quirks, vendor, product));
}

usbd_status
umass_init_insystem(struct umass_softc *sc)
{
	usbd_status err;

	err = usbd_set_interface(sc->sc_iface, 1);
	if (err) {
		DPRINTF(UDMASS_USB,
			("%s: could not switch to Alt Interface 1\n",
			sc->sc_dev.dv_xname));
		return (err);
	}

	return (USBD_NORMAL_COMPLETION);
}

usbd_status
umass_init_shuttle(struct umass_softc *sc)
{
	usb_device_request_t req;
	u_int8_t status[2];

	/* The Linux driver does this */
	req.bmRequestType = UT_READ_VENDOR_DEVICE;
	req.bRequest = 1;
	USETW(req.wValue, 0);
	USETW(req.wIndex, sc->sc_ifaceno);
	USETW(req.wLength, sizeof(status));

	return (usbd_do_request(sc->sc_udev, &req, &status));
}

void
umass_fixup_sony(struct umass_softc *sc)
{
	usb_interface_descriptor_t *id;
	usb_device_descriptor_t *dd;

	id = usbd_get_interface_descriptor(sc->sc_iface);
	if (id->bInterfaceSubClass == 0xff) {
		dd = usbd_get_device_descriptor(sc->sc_udev);
		/*
		 * Many Sony DSC cameras share the same product ID, so the
		 * revision number is used to distinguish between them.
		 */
		switch (UGETW(dd->bcdDevice)) {
		case 0x611: /* Sony DSC-T10, rev 6.11 */
		case 0x600: /* Sony DSC-W50, rev 6.00 */
		case 0x500: /* Sony DSC-P41, rev 5.00 */
			sc->sc_cmd = UMASS_CPROTO_UFI;
			break;
		default:
			sc->sc_cmd = UMASS_CPROTO_SCSI;
		}
	}
}

void
umass_fixup_yedata(struct umass_softc *sc)
{
	usb_device_descriptor_t *dd;

	dd = usbd_get_device_descriptor(sc->sc_udev);

	/*
	 * Revisions < 1.28 do not handle the interrupt endpoint very well.
	 */
	if (UGETW(dd->bcdDevice) < 0x128)
		sc->sc_wire = UMASS_WPROTO_CBI;
	else
		sc->sc_wire = UMASS_WPROTO_CBI_I;
}
@


1.31
log
@Quirk needed by the Archos 24y Vision, from Max Fillinger.
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.30 2008/06/26 05:42:19 ray Exp $	*/
d465 8
@


1.30
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.29 2007/06/13 10:33:52 mbalmer Exp $	*/
d66 8
@


1.29
log
@Remove the definition and use of umass/umass_quirks related macros.

No binary change.

ok dlg.
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.28 2007/06/10 14:49:01 mbalmer Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	  This product includes software developed by the NetBSD
 *	  Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.28
log
@Remove the definition and use of the USBDEVNAME macro.

(This might look easy, but it was a big diff.  Thanks to dlg and especially jsg
for looking over it; we found at least four mistakes in the initial diff.)

ok jsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.27 2007/06/05 08:43:56 mbalmer Exp $	*/
d89 1
a89 1
	  PQUIRK_NOSENSE,
d105 1
a105 1
	  PQUIRK_NOSENSE,
d191 1
a191 1
	  PQUIRK_ONLYBIG,
d287 1
a287 1
	  PQUIRK_ONLYBIG | SDEV_NOSYNCCACHE,
d367 1
a367 1
	  PQUIRK_NOSENSE,
@


1.27
log
@Remove the "Static" declaration of many functions.  It was defined to be empty
and it was not consistently used.  It was confusing as it suggested these
functions were static, which they were not.

discussed with dlg and jsg, ok jsg.
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.26 2007/06/04 10:34:04 mbalmer Exp $	*/
d485 1
a485 1
			USBDEVNAME(sc->sc_dev)));
@


1.26
log
@Last part of FreeBSD/NetBSD sepcific code removal.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.25 2007/03/13 06:23:45 steven Exp $	*/
d55 2
a56 2
Static usbd_status umass_init_insystem(struct umass_softc *);
Static usbd_status umass_init_shuttle(struct umass_softc *);
d58 2
a59 2
Static void umass_fixup_sony(struct umass_softc *);
Static void umass_fixup_yedata(struct umass_softc *);
d61 1
a61 1
Static const struct umass_quirk umass_quirks[] = {
d476 1
a476 1
Static usbd_status
d492 1
a492 1
Static usbd_status
d508 1
a508 1
Static void
d533 1
a533 1
Static void
@


1.25
log
@add quirk for Sony DSC-T10, which is UFI, not SCSI.

help and ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.24 2006/12/09 21:22:30 pedro Exp $	*/
a44 4
#if defined(__NetBSD__)
#include <dev/scsipi/scsipi_all.h> /* for scsiconf.h below */
#include <dev/scsipi/scsiconf.h> /* for quirks defines */
#elif defined(__OpenBSD__)
a46 1
#endif
@


1.24
log
@Better describe the magic done by umass_fixup_sony(), okay krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.23 2006/12/09 21:06:12 pedro Exp $	*/
d527 1
@


1.23
log
@Add quirk for Sony DSC-W50 (which is UFI, not SCSI) and rearrange
umass_fixup_sony() a bit while there, okay krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.22 2005/12/31 04:55:52 fgsch Exp $	*/
d522 4
@


1.22
log
@The Sony DSC-P41 it's actually UFI, not SCSI. Unfortunately (all?) DSC
cameras share the same product id, so toggle this behavior for revision
5.00 only for now. krw@@ agrees.
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.21 2005/12/18 12:34:43 kettenis Exp $	*/
d522 3
a524 5

		/*
		 * The Sony DSC-P41, rev 5.00 is really UFI.
		 */
		if (UGETW(dd->bcdDevice) == 0x500)
d526 2
a527 1
		else
d529 1
@


1.21
log
@Apparently the Scanlogic SL11R is not UFI, and correctly identifies itself as
SCSI.  From NetBSD.  Tested by me.
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.20 2005/06/02 02:03:33 krw Exp $	*/
d517 1
d520 11
a530 2
	if (id->bInterfaceSubClass == 0xff)
		sc->sc_cmd = UMASS_CPROTO_SCSI;
@


1.20
log
@Eradicate USB quirks NOTUR and NODOORLOCK. Should no longer be
required and no actual users of the relevant devices found.

ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.19 2005/05/26 20:54:39 krw Exp $	*/
d362 1
a362 1
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UFI,
@


1.19
log
@M-Systems DiskOnKey2 works better with zero padded commands so make it
CPROTO_ATAPI. This is what my 'IBM USB 2.0 Memory Key' actually was.
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.18 2005/05/25 21:12:54 krw Exp $	*/
d94 1
a94 1
	  PQUIRK_NOTUR | PQUIRK_NOSENSE,
d118 1
a118 1
	  PQUIRK_NODOORLOCK,
d156 1
a156 1
	  PQUIRK_NOTUR,
d172 1
a172 1
	  PQUIRK_NOTUR,
d180 1
a180 1
	  PQUIRK_NOTUR,
d188 1
a188 1
	  PQUIRK_NOTUR,
d196 1
a196 1
	  PQUIRK_NODOORLOCK | PQUIRK_ONLYBIG,
d204 1
a204 1
	  PQUIRK_NODOORLOCK,
d220 1
a220 1
	  PQUIRK_NOTUR,
d252 1
a252 1
	  PQUIRK_NODOORLOCK,
d260 1
a260 1
	  PQUIRK_NODOORLOCK,
d356 1
a356 1
	  PQUIRK_NODOORLOCK,
d372 1
a372 1
	  PQUIRK_NOTUR | PQUIRK_NOSENSE,
d380 1
a380 1
	  PQUIRK_NOTUR,
d428 1
a428 1
	  PQUIRK_NODOORLOCK,
d460 1
a460 1
	 SDEV_NOSYNCCACHE | PQUIRK_NODOORLOCK,
d468 1
a468 1
	 SDEV_NOSYNCCACHE | PQUIRK_NODOORLOCK,
a536 7

	/*
	 * Revisions < 1.28 do not have the TEST UNIT READY command
	 * Revisions == 1.28 have a broken TEST UNIT READY
	 */
	if (UGETW(dd->bcdDevice) <= 0x128)
		sc->sc_busquirks |= PQUIRK_NOTUR;
@


1.18
log
@PQUIK_NOMODESENSE no longer does anything, and PQUIRK_NOBIGMODESENSE was
defined to be 0. Expunge references. Null entries in quirks table will be
removed later.
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.17 2004/11/11 07:48:02 grange Exp $	*/
d258 1
a258 1
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
@


1.17
log
@quirk for iriver 3xx.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.16 2004/10/18 12:56:43 dlg Exp $	*/
d78 1
a78 1
	  PQUIRK_NOMODESENSE,
d86 1
a86 1
	  PQUIRK_NOMODESENSE,
d102 1
a102 1
	  PQUIRK_NOMODESENSE,
d110 1
a110 1
	  PQUIRK_NOSENSE | PQUIRK_NOMODESENSE,
d148 1
a148 1
	  PQUIRK_NOMODESENSE,
d196 1
a196 1
	  PQUIRK_NOBIGMODESENSE | PQUIRK_NODOORLOCK | PQUIRK_ONLYBIG,
d212 1
a212 1
	  PQUIRK_NOMODESENSE,
d252 1
a252 1
	  PQUIRK_NOMODESENSE | PQUIRK_NODOORLOCK | PQUIRK_NOBIGMODESENSE,
d260 1
a260 1
	  PQUIRK_NOMODESENSE | PQUIRK_NODOORLOCK | PQUIRK_NOBIGMODESENSE,
d268 1
a268 1
	  PQUIRK_NOMODESENSE,
d276 1
a276 1
	  PQUIRK_NOMODESENSE,
d300 1
a300 1
	  PQUIRK_NOMODESENSE,
d308 1
a308 1
	  PQUIRK_NOMODESENSE,
d316 1
a316 1
	  PQUIRK_NOMODESENSE | PQUIRK_NOBIGMODESENSE,
d324 1
a324 1
	  PQUIRK_NOMODESENSE | PQUIRK_NODOORLOCK,
d340 1
a340 1
	  PQUIRK_NOMODESENSE,
d348 1
a348 1
	  PQUIRK_NOMODESENSE,
d356 1
a356 1
	  PQUIRK_NOMODESENSE | PQUIRK_NODOORLOCK,
d412 1
a412 1
	  PQUIRK_NOMODESENSE,
d420 1
a420 1
	  PQUIRK_NOMODESENSE,
d452 1
a452 1
	  PQUIRK_NOMODESENSE,
@


1.16
log
@quirks for the Creative Nomad from Michael Adda

push by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.15 2004/07/21 07:43:41 dlg Exp $	*/
d197 8
@


1.15
log
@from netbsd, umass.c 1.100 1.113 1.115, umass_scsipi.c 1.11, umassvar.h 1.21
log message for umass 1.98, umass_scsipi.c 1.11, umassvar.h 1.21:
Fix several problems with CCI handling, and enable it: * We were never calling
the callback function when we got a UFI CCI(!). * We were passing a bogus
residual count on non-UFI CCIs. * After a REQUEST SENSE, the UFI CCI may
include the ASC/ASCQ from the sense  information -- don't consider this a
failure.

In addition, remove a horrible hack that was causing us to drop sense
information on the floor and return empty INQUIRY responses, often in the
case where there is a UNIT ATTENTION pending during the INQUIRY.  (Some drives
send the data and then fail, some don't.)

log message for umass.c 1.113:
Do not return STATUS_WIRE_FAILED in response to a CBI stall.  This is perfectly
normal, and is used to report errors.  Instead, use STATUS_CMD_FAILED, which
causes us to do a REQUEST SENSE.  Should address PR 22960.

log message for umass.c 1.115:
Do not do a CBI reset before returning STATUS_CMD_FAILED.  This causes any
sense information to be thrown away, and is therefore nonsensical.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.14 2004/07/17 06:04:00 dlg Exp $	*/
d450 8
@


1.14
log
@from netbsd, umass.c 1.98, umassvar.h 1.20
log message:
Remove UMASS_QUIRK_NO_START_STOP and UMASS_QUIRK_NO_MAX_LUN.

We don't have UMASS_QUIRK_NO_START_STOP so I didn't have to remove it. I
consider umass_quirks.c to be too different so I hand removed references to
the removed defines. There are some useless entries in there now which will
be cleaned up after umass is merged with netbsd.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.13 2004/07/09 19:14:41 deraadt Exp $	*/
d403 1
a403 1
	  UMASS_QUIRK_RS_NO_CLEAR_UA,
d443 1
a443 1
	  UMASS_QUIRK_RS_NO_CLEAR_UA,
@


1.13
log
@from netbsd:
The Sony camera reports itself as a "disk", not a "simplified direct access"
device -- ergo, it is "SCSI", not "RBC".
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.12 2004/06/13 19:52:57 mickey Exp $	*/
d219 1
a219 1
	  UMASS_QUIRK_NO_MAX_LUN,
d227 1
a227 1
	  UMASS_QUIRK_NO_MAX_LUN,
d235 1
a235 1
	  UMASS_QUIRK_NO_MAX_LUN,
d243 1
a243 1
	  UMASS_QUIRK_NO_MAX_LUN,
d251 1
a251 1
	  UMASS_QUIRK_NO_MAX_LUN,
d291 1
a291 1
	  UMASS_QUIRK_NO_MAX_LUN,
d323 1
a323 1
	  UMASS_QUIRK_NO_MAX_LUN,
@


1.12
log
@support iriver ifp-1xx thingies
@
text
@d1 2
a2 2
/*	$OpenBSD: umass_quirks.c,v 1.11 2004/04/10 08:11:21 deraadt Exp $	*/
/*	$NetBSD: umass_quirks.c,v 1.39 2003/05/08 15:19:47 augustss Exp $	*/
a129 1

a136 1

d503 2
a504 3
	if (id->bInterfaceSubClass == 0xff) {
		sc->sc_cmd = UMASS_CPROTO_RBC;
	}
@


1.11
log
@minolta dimage A1 quirk; 3734, michael@@paddon.org
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.10 2004/02/21 00:47:42 krw Exp $	*/
d195 8
d451 7
a457 7
       { { USB_VENDOR_SIGMATEL, USB_PRODUCT_SIGMATEL_DNSSF7X},
         UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
         0,
         SDEV_NOSYNCCACHE | PQUIRK_NODOORLOCK,
         UMATCH_VENDOR_PRODUCT,
         NULL, NULL
       },
@


1.10
log
@Eliminate the quirks SDEV_NOSTARTUNIT, UMASS_QUIRK_NO_START_STOP, and
UMASS_QUIRK_FORCE_SHORT_INQUIRY. Fixes a bunch of USB devices. Based
on work by Mycroft in NetBSD.

ok tdeval@@ deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.9 2004/01/14 02:00:41 krw Exp $	*/
d220 8
@


1.9
log
@Nuke SDEV_NOLUNS, SDEV_FORCELUNS, and PQUIRK_FORCELUNS quirks. Also
moreluns field in scsi_link structure.  Instead, treat an INQUIRY
result that duplicates the INQUIRY result of LUN 0 as proof the LUN
does not exist.  Compensate for lack of SDEV_NOLUNS where necessary by
setting sc_link->luns to 1, which has the same effect. From Marco
Peereboom.

Don't issue Test Unit Ready command before INQUIRY command - not
necessary and potentially harmful to devices with ADEV_NOTUR quirk
since quirks have not been set yet. From mycroft@@NetBSD

ok deraadt@@, mvme* changes by miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.8 2003/12/03 09:11:37 markus Exp $	*/
d93 1
a93 1
	  UMASS_QUIRK_NO_START_STOP,
d101 1
a101 1
	  UMASS_QUIRK_FORCE_SHORT_INQUIRY | UMASS_QUIRK_NO_START_STOP,
d157 1
a157 1
	  UMASS_QUIRK_NO_START_STOP,
d189 1
a189 1
	  UMASS_QUIRK_NO_START_STOP,
d197 1
a197 1
	  UMASS_QUIRK_FORCE_SHORT_INQUIRY | UMASS_QUIRK_NO_START_STOP,
d213 1
a213 1
	  UMASS_QUIRK_NO_MAX_LUN | UMASS_QUIRK_NO_START_STOP,
d221 1
a221 1
	  UMASS_QUIRK_NO_MAX_LUN | UMASS_QUIRK_NO_START_STOP,
d277 1
a277 1
	  UMASS_QUIRK_NO_MAX_LUN | UMASS_QUIRK_NO_START_STOP,
d309 1
a309 1
	  UMASS_QUIRK_NO_MAX_LUN | UMASS_QUIRK_NO_START_STOP,
d349 1
a349 1
	  UMASS_QUIRK_NO_START_STOP,
d357 1
a357 1
	  UMASS_QUIRK_NO_START_STOP,
d365 1
a365 1
	  UMASS_QUIRK_NO_START_STOP,
d389 1
a389 1
	  UMASS_QUIRK_FORCE_SHORT_INQUIRY | UMASS_QUIRK_RS_NO_CLEAR_UA,
d421 1
a421 1
	  UMASS_QUIRK_FORCE_SHORT_INQUIRY,
@


1.8
log
@my USB_PRODUCT_SHUTTLE_EUSB needs PQUIRK_NOSENSE; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.7 2003/11/27 12:35:58 henning Exp $	*/
d246 1
a246 1
	  PQUIRK_NOMODESENSE | PQUIRK_FORCELUNS,
d254 1
a254 1
	  PQUIRK_NOMODESENSE | PQUIRK_FORCELUNS,
d302 1
a302 1
	  PQUIRK_NOMODESENSE | PQUIRK_NODOORLOCK | PQUIRK_FORCELUNS,
d326 1
a326 1
	  PQUIRK_NOMODESENSE | PQUIRK_FORCELUNS,
@


1.7
log
@add quirk for Datum Networks SSF-7X USB Multi Players
PR3580; Aldo Cortesi <aldo@@nullcube.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.6 2003/05/19 01:02:39 nate Exp $	*/
d350 1
a350 1
	  PQUIRK_NOTUR,
@


1.6
log
@add a quirk for my trek thumbdrive
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.5 2003/05/18 18:22:23 nate Exp $	*/
d363 1
a363 1
	{ { USB_VENDOR_SIIG, USB_PRODUCT_SIIG_MULTICARDREADER }, 
d369 1
a369 1
	}, 
d435 7
@


1.6.4.1
log
@add file to SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.6.4.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d246 1
a246 1
	  PQUIRK_NOMODESENSE,
d254 1
a254 1
	  PQUIRK_NOMODESENSE,
d302 1
a302 1
	  PQUIRK_NOMODESENSE | PQUIRK_NODOORLOCK,
d326 1
a326 1
	  PQUIRK_NOMODESENSE,
d350 1
a350 1
	  PQUIRK_NOTUR | PQUIRK_NOSENSE,
d363 1
a363 1
	{ { USB_VENDOR_SIIG, USB_PRODUCT_SIIG_MULTICARDREADER },
d369 1
a369 1
	},
a434 7
       { { USB_VENDOR_SIGMATEL, USB_PRODUCT_SIGMATEL_DNSSF7X},
         UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
         0,
         SDEV_NOSYNCCACHE | PQUIRK_NODOORLOCK,
         UMATCH_VENDOR_PRODUCT,
         NULL, NULL
       },
@


1.6.4.3
log
@Merge with the trunk
@
text
@d93 1
a93 1
	  0,
d101 1
a101 1
	  0,
d157 1
a157 1
	  0,
d189 1
a189 1
	  0,
d197 1
a197 1
	  0,
d213 1
a213 1
	  UMASS_QUIRK_NO_MAX_LUN,
d221 1
a221 9
	  UMASS_QUIRK_NO_MAX_LUN,
	  0,
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
	  NULL, NULL
	},

	{ { USB_VENDOR_MINOLTA, USB_PRODUCT_MINOLTA_DIMAGEA1 },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UNSPEC,
	  UMASS_QUIRK_NO_MAX_LUN,
d277 1
a277 1
	  UMASS_QUIRK_NO_MAX_LUN,
d309 1
a309 1
	  UMASS_QUIRK_NO_MAX_LUN,
d349 1
a349 1
	  0,
d357 1
a357 1
	  0,
d365 1
a365 1
	  0,
d389 1
a389 1
	  UMASS_QUIRK_RS_NO_CLEAR_UA,
d421 1
a421 1
	  0,
@


1.6.2.1
log
@change to the version we want.  bad cvs
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.3 2003/05/17 06:07:57 nate Exp $	*/
d115 8
d187 8
d399 8
@


1.5
log
@add a quirk for the Imation FlashGo adapter to make it shut up
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.4 2003/05/18 18:13:01 nate Exp $	*/
d399 8
@


1.4
log
@add a quirk for a different zip250 model
@
text
@d1 1
a1 1
/*	$OpenBSD: umass_quirks.c,v 1.3 2003/05/17 06:07:57 nate Exp $	*/
d112 8
@


1.3
log
@sync with NetBSD and add various local hacks to make things work correctly
with our scsi layer
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d174 8
@


1.2
log
@Meant to commit only ulpt and committed everything.  Most things weren't ready
@
text
@d1 2
a2 2
/*	$OpenBSD: umass_quirks.c,v 1.1 2002/05/07 18:08:04 nate Exp $	*/
/*	$NetBSD: umass_quirks.c,v 1.13 2002/04/22 12:48:40 augustss Exp $	*/
d48 3
d67 24
d99 48
d155 8
d179 8
d190 1
a190 1
	  0,
d195 1
a195 1
	{ { USB_VENDOR_MSYSTEMS, USB_PRODUCT_MSYSTEMS_DISKONKEY },
d197 1
a198 1
	  PQUIRK_NOMODESENSE | PQUIRK_NODOORLOCK | PQUIRK_NOBIGMODESENSE,
d203 1
a203 1
	{ { USB_VENDOR_OLYMPUS, USB_PRODUCT_OLYMPUS_C1 },
d205 1
a205 1
	  UMASS_QUIRK_WRONG_CSWSIG,
d211 1
a211 1
	{ { USB_VENDOR_ONSPEC, USB_PRODUCT_ONSPEC_MD2 },
d213 2
a214 2
	  0,
	  PQUIRK_NOMODESENSE,
d219 1
a219 1
	{ { USB_VENDOR_ONSPEC, USB_PRODUCT_ONSPEC_MD1II },
d221 2
a222 2
	  UMASS_QUIRK_NO_MAX_LUN | UMASS_QUIRK_NO_START_STOP,
	  PQUIRK_NOMODESENSE,
d227 2
a228 3
	{ { USB_VENDOR_SCANLOGIC, USB_PRODUCT_SCANLOGIC_SL11R },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UFI,
	  0,
d230 1
d235 4
a238 4
	{ { USB_VENDOR_SHUTTLE, USB_PRODUCT_SHUTTLE_EUSB },
	  UMASS_WPROTO_CBI_I, UMASS_CPROTO_ATAPI,
	  UMASS_QUIRK_NO_START_STOP,
	  PQUIRK_NOTUR,
d240 1
a240 1
	  umass_init_shuttle, NULL
d243 5
a247 5
	{ { USB_VENDOR_SHUTTLE, USB_PRODUCT_SHUTTLE_ZIOMMC },
	  UMASS_WPROTO_CBI_I, UMASS_CPROTO_ATAPI,
	  UMASS_QUIRK_NO_START_STOP,
	  PQUIRK_NOTUR,
	  UMATCH_VENDOR_PRODUCT,
d251 1
a251 1
	{ { USB_VENDOR_SONY, USB_PRODUCT_SONY_MSC },
a252 1
	  UMASS_QUIRK_FORCE_SHORT_INQUIRY,
d254 1
d256 1
a256 1
	  NULL, umass_fixup_sony
d259 4
a262 4
	{ { USB_VENDOR_SONY, USB_PRODUCT_ANY },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_RBC,
	  0,
	  0,
d264 1
a264 1
	  NULL, umass_fixup_sony
d267 1
a267 1
	{ { USB_VENDOR_TEAC, USB_PRODUCT_TEAC_FD05PUB },
d275 2
a276 3
	{ { USB_VENDOR_YANO, USB_PRODUCT_YANO_U640MO },
	  UMASS_WPROTO_CBI_I, UMASS_CPROTO_ATAPI,
	  UMASS_QUIRK_FORCE_SHORT_INQUIRY,
d278 1
d283 6
a288 6
	{ { USB_VENDOR_YEDATA, USB_PRODUCT_YEDATA_FLASHBUSTERU },
	  UMASS_WPROTO_UNSPEC, UMASS_CPROTO_UFI,
	  UMASS_QUIRK_RS_NO_CLEAR_UA,
	  PQUIRK_NOMODESENSE,
	  UMATCH_VENDOR_PRODUCT_REV,
	  NULL, umass_fixup_yedata
d291 1
a291 1
	{ { USB_VENDOR_MINOLTA, USB_PRODUCT_MINOLTA_S304 },
d299 1
a299 1
	{ { USB_VENDOR_MINOLTA, USB_PRODUCT_MINOLTA_X },
a300 1
	  UMASS_QUIRK_NO_MAX_LUN | UMASS_QUIRK_NO_START_STOP,
d302 1
d307 1
a307 1
	{ { USB_VENDOR_PEN, USB_PRODUCT_PEN_USBDISK },
a308 1
	  UMASS_QUIRK_NO_MAX_LUN | UMASS_QUIRK_NO_START_STOP,
d310 2
a311 1
	  UMATCH_DEVCLASS_DEVSUBCLASS_DEVPROTO,
d315 2
a316 3
	/* InSystem Design ATA over USB devices */
	{ { USB_VENDOR_ATI, USB_PRODUCT_ATI2_205 },
	  UMASS_WPROTO_BBB, UMASS_CPROTO_ISD_ATA,
d318 8
d330 26
a355 1
	{ { USB_VENDOR_INSYSTEM, USB_PRODUCT_INSYSTEM_ATAPI },
d362 3
a364 2
	{ { USB_VENDOR_INSYSTEM, USB_PRODUCT_INSYSTEM_DRIVEV2_5 },
	  UMASS_WPROTO_BBB, UMASS_CPROTO_ISD_ATA,
d367 17
a383 1
	  UMATCH_VENDOR_PRODUCT,
d386 3
a388 2
	{ { USB_VENDOR_INSYSTEM, USB_PRODUCT_INSYSTEM_ADAPTERV2 },
	  UMASS_WPROTO_BBB, UMASS_CPROTO_ISD_ATA,
d394 4
a397 3
	{ { USB_VENDOR_SONY, USB_PRODUCT_SONY_DRIVEV2 },
	  UMASS_WPROTO_BBB, UMASS_CPROTO_ISD_ATA,
	  0,
d402 9
@


1.1
log
@Sync ulpt driver with NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

