head	1.6;
access;
symbols
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.10
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.6
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.4
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2010.09.26.20.39.08;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2010.07.30.17.15.14;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.25.22.46.17;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.24.10.35.34;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.17.01.32.46;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2007.08.01.12.16.59;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge pmsi(4) into pms(4). From Alexandr Shadchin on tech@@.
@
text
@/* $OpenBSD: pms_intelli.c,v 1.5 2010/07/30 17:15:14 krw Exp $ */
/* $NetBSD: psm_intelli.c,v 1.8 2000/06/05 22:20:57 sommerfeld Exp $ */

/*-
 * Copyright (c) 1994 Charles M. Hannum.
 * Copyright (c) 1992, 1993 Erik Forsberg.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN
 * NO EVENT SHALL I BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/ioctl.h>

#include <machine/bus.h>

#include <dev/ic/pckbcvar.h>

#include <dev/pckbc/pmsreg.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wsmousevar.h>

struct pmsi_softc {		/* driver status information */
	struct device sc_dev;

	pckbc_tag_t sc_kbctag;
	int sc_kbcslot;

	int sc_state;
#define PMSI_STATE_DISABLED	0
#define PMSI_STATE_ENABLED	1
#define PMSI_STATE_SUSPENDED	2

	int inputstate;
	u_int buttons, oldbuttons;	/* mouse button status */
	signed char dx, dy;

	struct device *sc_wsmousedev;
};

int pmsiprobe(struct device *, void *, void *);
void pmsiattach(struct device *, struct device *, void *);
int pmsiactivate(struct device *, int);
void pmsiinput(void *, int);

struct cfattach pmsi_ca = {
	sizeof(struct pmsi_softc), pmsiprobe, pmsiattach, NULL,
	pmsiactivate
};

int	pmsi_change_state(struct pmsi_softc *, int);
int	pmsi_ioctl(void *, u_long, caddr_t, int, struct proc *);
int	pmsi_enable(void *);
void	pmsi_disable(void *);

const struct wsmouse_accessops pmsi_accessops = {
	pmsi_enable,
	pmsi_ioctl,
	pmsi_disable,
};

int	pmsi_setintellimode(pckbc_tag_t, pckbc_slot_t, int);

int
pmsi_setintellimode(pckbc_tag_t tag, pckbc_slot_t slot, int poll)
{
	u_char cmd[2], resp[1];
	int i, res;
	static const u_char rates[] = {200, 100, 80};

	cmd[0] = PMS_SET_SAMPLE;
	for (i = 0; i < 3; i++) {
		cmd[1] = rates[i];
		if (poll)
			res = pckbc_poll_cmd(tag, slot, cmd, 2, 0, NULL, 0);
		else
			res = pckbc_enqueue_cmd(tag, slot, cmd, 2, 0, 0, NULL);
		if (res)
			return (res);
	}

	cmd[0] = PMS_SEND_DEV_ID;
	if (poll)
		res = pckbc_poll_cmd(tag, slot, cmd, 1, 1, resp, 0);
	else
		res = pckbc_enqueue_cmd(tag, slot, cmd, 1, 1, 0, resp);
	if (res)
		return (res);
	if (resp[0] != 3)
		return (ENXIO);

	return (0);
}

int
pmsiprobe(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
{
	struct pckbc_attach_args *pa = aux;
	u_char cmd[1], resp[2];
	int res;

	if (pa->pa_slot != PCKBC_AUX_SLOT)
		return (0);

	/* Flush any garbage. */
	pckbc_flush(pa->pa_tag, pa->pa_slot);

	/* reset the device */
	cmd[0] = PMS_RESET;
	res = pckbc_poll_cmd(pa->pa_tag, pa->pa_slot, cmd, 1, 2, resp, 1);
	if (res) {
#ifdef DEBUG
		printf("pmsiprobe: reset error %d\n", res);
#endif
		return (0);
	}
	if (resp[0] != PMS_RSTDONE) {
		printf("pmsiprobe: reset response 0x%x\n", resp[0]);
		return (0);
	}

	/* get type number (0 = mouse) */
	if (resp[1] != 0) {
#ifdef DEBUG
		printf("pmsiprobe: type 0x%x\n", resp[1]);
#endif
		return (0);
	}

	if ((res = pmsi_setintellimode(pa->pa_tag, pa->pa_slot, 1))) {
#ifdef DEBUG
		printf("pmsiprobe: intellimode -> %d\n", res);
#endif
		return (0);
	}

	return (20);
}

void
pmsiattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct pmsi_softc *sc = (void *)self;
	struct pckbc_attach_args *pa = aux;
	struct wsmousedev_attach_args a;
	u_char cmd[1], resp[2];
	int res;

	sc->sc_kbctag = pa->pa_tag;
	sc->sc_kbcslot = pa->pa_slot;

	printf("\n");

	/* Flush any garbage. */
	pckbc_flush(pa->pa_tag, pa->pa_slot);

	/* reset the device */
	cmd[0] = PMS_RESET;
	res = pckbc_poll_cmd(pa->pa_tag, pa->pa_slot, cmd, 1, 2, resp, 1);
#ifdef DEBUG
	if (res || resp[0] != PMS_RSTDONE || resp[1] != 0) {
		printf("pmsiattach: reset error\n");
		return;
	}
#endif
	res = pmsi_setintellimode(pa->pa_tag, pa->pa_slot, 1);
#ifdef DEBUG
	if (res) {
		printf("pmsiattach: error setting intelli mode\n");
		return;
	}
#endif

	/* Other initialization was done by pmsiprobe. */
	sc->inputstate = 0;
	sc->oldbuttons = 0;

	pckbc_set_inputhandler(sc->sc_kbctag, sc->sc_kbcslot,
			       pmsiinput, sc, sc->sc_dev.dv_xname);

	a.accessops = &pmsi_accessops;
	a.accesscookie = sc;

	/*
	 * Attach the wsmouse, saving a handle to it.
	 * Note that we don't need to check this pointer against NULL
	 * here or in pmsintr, because if this fails pmsi_enable() will
	 * never be called, so pmsiinput() will never be called.
	 */
	sc->sc_wsmousedev = config_found(self, &a, wsmousedevprint);

	/* no interrupts until enabled */
	cmd[0] = PMS_DEV_DISABLE;
	res = pckbc_poll_cmd(pa->pa_tag, pa->pa_slot, cmd, 1, 0, NULL, 0);
	if (res)
		printf("pmsiattach: disable error\n");
	pckbc_slot_enable(sc->sc_kbctag, sc->sc_kbcslot, 0);
}

int
pmsiactivate(struct device *self, int act)
{
	struct pmsi_softc *sc = (struct pmsi_softc *)self;

	switch (act) {
	case DVACT_SUSPEND:
		if (sc->sc_state == PMSI_STATE_ENABLED)
			pmsi_change_state(sc, PMSI_STATE_SUSPENDED);
		break;
	case DVACT_RESUME:
		if (sc->sc_state == PMSI_STATE_SUSPENDED)
			pmsi_change_state(sc, PMSI_STATE_ENABLED);
		break;
	}
	return (0);
}

int
pmsi_change_state(struct pmsi_softc *sc, int newstate)
{
	u_char cmd[1];
	int res;

	switch (newstate) {
	case PMSI_STATE_ENABLED:
		if (sc->sc_state == PMSI_STATE_ENABLED)
			return EBUSY;
		sc->inputstate = 0;
		sc->oldbuttons = 0;

		pckbc_slot_enable(sc->sc_kbctag, sc->sc_kbcslot, 1);

		pckbc_flush(sc->sc_kbctag, sc->sc_kbcslot);
		res = pmsi_setintellimode(sc->sc_kbctag, sc->sc_kbcslot, 0);
#ifdef DEBUG
		if (res) {
			printf("pmsi_change_state: error setting intelli mode\n");
		}
#endif

		cmd[0] = PMS_DEV_ENABLE;
		res = pckbc_enqueue_cmd(sc->sc_kbctag, sc->sc_kbcslot,
		    cmd, 1, 0, 1, 0);
		if (res)
			printf("pmsi_change_state: command error\n");
		sc->sc_state = newstate;
		break;
	case PMSI_STATE_DISABLED:
		/* FALLTHROUGH */
	case PMSI_STATE_SUSPENDED:
	        cmd[0] = PMS_DEV_DISABLE;
	        res = pckbc_enqueue_cmd(sc->sc_kbctag, sc->sc_kbcslot,
		    cmd, 1, 0, 1, 0);
	        if (res)
	                printf("pmsi_change_state: command error\n");
	        pckbc_slot_enable(sc->sc_kbctag, sc->sc_kbcslot, 0);
		sc->sc_state = newstate;
		break;
	}
	return 0;
}

int
pmsi_enable(void *v)
{
	struct pmsi_softc *sc = v;

	return pmsi_change_state(sc, PMSI_STATE_ENABLED);
}


void
pmsi_disable(void *v)
{
	struct pmsi_softc *sc = v;

	pmsi_change_state(sc, PMSI_STATE_DISABLED);
}

int
pmsi_ioctl(v, cmd, data, flag, p)
	void *v;
	u_long cmd;
	caddr_t data;
	int flag;
	struct proc *p;
{
	struct pmsi_softc *sc = v;
	u_char kbcmd[2];
	int i;

	switch (cmd) {
	case WSMOUSEIO_GTYPE:
		*(u_int *)data = WSMOUSE_TYPE_PS2;
		break;
		
	case WSMOUSEIO_SRES:
		i = ((int) *(u_int *)data - 12) / 25;		
		/* valid values are {0,1,2,3} */
		if (i < 0)
			i = 0;
		if (i > 3)
			i = 3;

		kbcmd[0] = PMS_SET_RES;
		kbcmd[1] = (unsigned char) i;			
		i = pckbc_enqueue_cmd(sc->sc_kbctag, sc->sc_kbcslot, kbcmd, 
		    2, 0, 1, 0);
		
		if (i)
			printf("pmsi_ioctl: SET_RES command error\n");
		break;
		
	default:
		return (-1);
	}
	return (0);
}

/* Masks for the first byte of a packet */
#define PS2LBUTMASK 0x01
#define PS2RBUTMASK 0x02
#define PS2MBUTMASK 0x04

void pmsiinput(vsc, data)
void *vsc;
int data;
{
	struct pmsi_softc *sc = vsc;
	signed char dz;
	u_int changed;

	if (sc->sc_state != PMSI_STATE_ENABLED) {
		/* Interrupts are not expected.  Discard the byte. */
		return;
	}

	switch (sc->inputstate) {

	case 0:
		if ((data & 0xc0) == 0) { /* no ovfl, bit 3 == 1 too? */
			sc->buttons = ((data & PS2LBUTMASK) ? 0x1 : 0) |
			    ((data & PS2MBUTMASK) ? 0x2 : 0) |
			    ((data & PS2RBUTMASK) ? 0x4 : 0);
			++sc->inputstate;
		}
		break;

	case 1:
		sc->dx = data;
		/* Bounding at -127 avoids a bug in XFree86. */
		sc->dx = (sc->dx == -128) ? -127 : sc->dx;
		++sc->inputstate;
		break;

	case 2:
		sc->dy = data;
		sc->dy = (sc->dy == -128) ? -127 : sc->dy;
		++sc->inputstate;
		break;

	case 3:
		dz = data;
		dz = (dz == -128) ? -127 : dz;
		sc->inputstate = 0;

		changed = (sc->buttons ^ sc->oldbuttons);
		sc->oldbuttons = sc->buttons;

		if (sc->dx || sc->dy || dz || changed)
			wsmouse_input(sc->sc_wsmousedev,
				      sc->buttons, sc->dx, sc->dy, dz, 0,
				      WSMOUSE_INPUT_DELTA);
		break;
	}

	return;
}

struct cfdriver pmsi_cd = {
	NULL, "pmsi", DV_DULL
};
@


1.5
log
@Don't reset pms/pmsi devices when attempting to set the mode. Makes nicm@@'s,
todd@@'s and my machines all work as expected. Various other success stories
and no reports of failures. Also fix DEBUG compiles by removing a return
that was unneeded anyway.

"gud" miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: pms_intelli.c,v 1.4 2010/07/25 22:46:17 miod Exp $ */
@


1.4
log
@In pmsi_setintellimode(), make sure we send commands with
pckbc_enqueue_cmd() if interrupts are enabled at this point.
@
text
@d1 1
a1 1
/* $OpenBSD: pms_intelli.c,v 1.3 2010/07/24 10:35:34 deraadt Exp $ */
d244 1
a244 1
	u_char cmd[1], resp[2];
a256 11

		/* reset the device */
		cmd[0] = PMS_RESET;
		res = pckbc_poll_cmd(sc->sc_kbctag, sc->sc_kbcslot,
		    cmd, 1, 2, resp, 1);
#ifdef DEBUG
		if (res || resp[0] != PMS_RSTDONE || resp[1] != 0) {
			printf("pmsi_change_state: reset error\n");
			return;
		}
#endif
a260 1
			return;
@


1.3
log
@add suspend/resume code, modelled along pms.  on at least one ASUS laptop
(which krw is the lucky owner of) this requires a much bigger hammer.  we
have to reset it and put it back into the right mode
ok krw
@
text
@d1 1
a1 1
/* $OpenBSD: pms_intelli.c,v 1.2 2007/10/17 01:32:46 deraadt Exp $ */
d80 1
a80 1
static int pmsi_setintellimode(pckbc_tag_t, pckbc_slot_t);
d82 2
a83 4
static int
pmsi_setintellimode(tag, slot)
	pckbc_tag_t tag;
	pckbc_slot_t slot;
d87 1
a87 1
	static u_char rates[] = {200, 100, 80};
d92 4
a95 1
		res = pckbc_poll_cmd(tag, slot, cmd, 2, 0, NULL, 0);
d101 4
a104 1
	res = pckbc_poll_cmd(tag, slot, cmd, 1, 1, resp, 0);
d151 1
a151 1
	if ((res = pmsi_setintellimode(pa->pa_tag, pa->pa_slot))) {
d189 1
a189 1
	res = pmsi_setintellimode(pa->pa_tag, pa->pa_slot);
d264 1
a264 1
			printf("pmsiattach: reset error\n");
d268 1
a268 1
		res = pmsi_setintellimode(sc->sc_kbctag, sc->sc_kbcslot);
d271 1
a271 1
			printf("pmsiattach: error setting intelli mode\n");
d280 1
a280 1
			printf("pmsi_enable: command error\n");
a283 1

d290 1
a290 1
	                printf("pmsi_disable: command error\n");
@


1.2
log
@use NULL to point to the response buffer, which avoids confusion; ok fgsch
@
text
@d1 1
a1 1
/* $OpenBSD: pms_intelli.c,v 1.1 2007/08/01 12:16:59 kettenis Exp $ */
d47 5
a51 1
	int sc_enabled;		/* input enabled? */
d61 1
d65 2
a66 1
	sizeof(struct pmsi_softc), pmsiprobe, pmsiattach,
d69 2
a71 1
int	pmsi_ioctl(void *, u_long, caddr_t, int, struct proc *);
d206 1
a206 1
	 * here or in pmsintr, because if this fails pms_enable() will
d220 1
a220 2
pmsi_enable(v)
	void *v;
d222 1
a222 3
	struct pmsi_softc *sc = v;
	u_char cmd[1];
	int res;
d224 12
a235 2
	if (sc->sc_enabled)
		return EBUSY;
d237 5
a241 3
	sc->sc_enabled = 1;
	sc->inputstate = 0;
	sc->oldbuttons = 0;
d243 28
a270 1
	pckbc_slot_enable(sc->sc_kbctag, sc->sc_kbcslot, 1);
d272 8
a279 4
	cmd[0] = PMS_DEV_ENABLE;
	res = pckbc_enqueue_cmd(sc->sc_kbctag, sc->sc_kbcslot, cmd, 1, 0, 1, 0);
	if (res)
		printf("pmsi_enable: command error\n");
d281 11
d295 2
a296 3
void
pmsi_disable(v)
	void *v;
a298 2
	u_char cmd[1];
	int res;
d300 3
a302 4
	cmd[0] = PMS_DEV_DISABLE;
	res = pckbc_enqueue_cmd(sc->sc_kbctag, sc->sc_kbcslot, cmd, 1, 0, 1, 0);
	if (res)
		printf("pmsi_disable: command error\n");
d304 4
a307 1
	pckbc_slot_enable(sc->sc_kbctag, sc->sc_kbcslot, 0);
d309 1
a309 1
	sc->sc_enabled = 0;
d343 1
a343 1
			printf("pms_ioctl: SET_RES command error\n");
d365 1
a365 1
	if (!sc->sc_enabled) {
@


1.1
log
@Correct a 10-year old typo inherited from NetBSD by renaming psm.c,
psm_intelli.c and psmreg.h into pms.c, pms_intelli.c and pmsreg.h.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: psm_intelli.c,v 1.5 2007/04/10 22:37:17 miod Exp $ */
d87 1
a87 1
		res = pckbc_poll_cmd(tag, slot, cmd, 2, 0, 0, 0);
d206 1
a206 1
	res = pckbc_poll_cmd(pa->pa_tag, pa->pa_slot, cmd, 1, 0, 0, 0);
@

