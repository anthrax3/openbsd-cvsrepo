head	1.45;
access;
symbols
	OPENBSD_6_0:1.43.0.14
	OPENBSD_6_0_BASE:1.43
	OPENBSD_5_9:1.43.0.4
	OPENBSD_5_9_BASE:1.43
	OPENBSD_5_8:1.43.0.12
	OPENBSD_5_8_BASE:1.43
	OPENBSD_5_7:1.43.0.10
	OPENBSD_5_7_BASE:1.43
	OPENBSD_5_6:1.43.0.8
	OPENBSD_5_6_BASE:1.43
	OPENBSD_5_5:1.43.0.6
	OPENBSD_5_5_BASE:1.43
	OPENBSD_5_4:1.43.0.2
	OPENBSD_5_4_BASE:1.43
	OPENBSD_5_3:1.42.0.8
	OPENBSD_5_3_BASE:1.42
	OPENBSD_5_2:1.42.0.6
	OPENBSD_5_2_BASE:1.42
	OPENBSD_5_1_BASE:1.42
	OPENBSD_5_1:1.42.0.4
	OPENBSD_5_0:1.42.0.2
	OPENBSD_5_0_BASE:1.42
	OPENBSD_4_9:1.41.0.2
	OPENBSD_4_9_BASE:1.41
	OPENBSD_4_8:1.40.0.4
	OPENBSD_4_8_BASE:1.40
	OPENBSD_4_7:1.40.0.2
	OPENBSD_4_7_BASE:1.40
	OPENBSD_4_6:1.39.0.6
	OPENBSD_4_6_BASE:1.39
	OPENBSD_4_5:1.39.0.2
	OPENBSD_4_5_BASE:1.39
	OPENBSD_4_4:1.38.0.2
	OPENBSD_4_4_BASE:1.38
	OPENBSD_4_3:1.34.0.6
	OPENBSD_4_3_BASE:1.34
	OPENBSD_4_2:1.34.0.4
	OPENBSD_4_2_BASE:1.34
	OPENBSD_4_1:1.34.0.2
	OPENBSD_4_1_BASE:1.34
	OPENBSD_4_0:1.33.0.2
	OPENBSD_4_0_BASE:1.33
	OPENBSD_3_9:1.30.0.4
	OPENBSD_3_9_BASE:1.30
	OPENBSD_3_8:1.30.0.2
	OPENBSD_3_8_BASE:1.30
	OPENBSD_3_7:1.26.0.2
	OPENBSD_3_7_BASE:1.26
	OPENBSD_3_6:1.25.0.2
	OPENBSD_3_6_BASE:1.25
	SMP_SYNC_A:1.23
	SMP_SYNC_B:1.23
	OPENBSD_3_5:1.23.0.2
	OPENBSD_3_5_BASE:1.23
	OPENBSD_3_4:1.21.0.4
	OPENBSD_3_4_BASE:1.21
	UBC_SYNC_A:1.21
	OPENBSD_3_3:1.21.0.2
	OPENBSD_3_3_BASE:1.21
	OPENBSD_3_2:1.19.0.2
	OPENBSD_3_2_BASE:1.19
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	UBC_SYNC_B:1.19
	UBC:1.14.0.2
	UBC_BASE:1.14
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	SMP:1.8.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2;
locks; strict;
comment	@ * @;


1.45
date	2016.08.31.15.25.27;	author jca;	state Exp;
branches;
next	1.44;
commitid	FgPa4Zb9ksvhh3Ow;

1.44
date	2016.08.31.11.05.48;	author jca;	state Exp;
branches;
next	1.43;
commitid	4R338SA8BluElLXK;

1.43
date	2013.04.14.19.32.52;	author miod;	state Exp;
branches;
next	1.42;

1.42
date	2011.04.05.19.12.13;	author miod;	state Exp;
branches;
next	1.41;

1.41
date	2010.08.28.16.39.18;	author miod;	state Exp;
branches;
next	1.40;

1.40
date	2009.12.07.19.22.38;	author oga;	state Exp;
branches;
next	1.39;

1.39
date	2008.08.09.16.31.08;	author miod;	state Exp;
branches;
next	1.38;

1.38
date	2008.07.30.15.53.31;	author deraadt;	state Exp;
branches;
next	1.37;

1.37
date	2008.07.16.16.33.18;	author miod;	state Exp;
branches;
next	1.36;

1.36
date	2008.06.26.05.42.17;	author ray;	state Exp;
branches;
next	1.35;

1.35
date	2008.03.21.17.10.46;	author miod;	state Exp;
branches;
next	1.34;

1.34
date	2006.12.05.21.27.07;	author otto;	state Exp;
branches;
next	1.33;

1.33
date	2006.07.20.16.45.05;	author mickey;	state Exp;
branches;
next	1.32;

1.32
date	2006.07.20.10.44.40;	author mickey;	state Exp;
branches;
next	1.31;

1.31
date	2006.05.29.20.23.13;	author miod;	state Exp;
branches;
next	1.30;

1.30
date	2005.05.09.05.08.57;	author miod;	state Exp;
branches;
next	1.29;

1.29
date	2005.05.06.17.51.41;	author mickey;	state Exp;
branches;
next	1.28;

1.28
date	2005.05.06.17.40.32;	author mickey;	state Exp;
branches;
next	1.27;

1.27
date	2005.05.04.18.00.30;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2005.02.22.19.41.44;	author mickey;	state Exp;
branches;
next	1.25;

1.25
date	2004.07.26.14.05.59;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2004.07.09.19.07.45;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2004.03.16.07.50.26;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2003.09.25.23.38.23;	author mickey;	state Exp;
branches;
next	1.21;

1.21
date	2003.01.04.13.40.08;	author maja;	state Exp;
branches;
next	1.20;

1.20
date	2003.01.04.13.24.31;	author maja;	state Exp;
branches;
next	1.19;

1.19
date	2002.06.29.15.21.48;	author maja;	state Exp;
branches;
next	1.18;

1.18
date	2002.06.29.14.51.24;	author maja;	state Exp;
branches;
next	1.17;

1.17
date	2002.04.22.07.44.16;	author mickey;	state Exp;
branches;
next	1.16;

1.16
date	2002.04.09.19.07.14;	author mickey;	state Exp;
branches;
next	1.15;

1.15
date	2002.04.04.21.24.33;	author mickey;	state Exp;
branches;
next	1.14;

1.14
date	2001.10.25.15.42.43;	author mickey;	state Exp;
branches
	1.14.2.1;
next	1.13;

1.13
date	2001.10.04.23.23.46;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	2001.09.04.21.28.54;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.13.20.36.24;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.10.17.01.09;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.08.17.24.41;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.14.16.43.18;	author mickey;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2001.05.02.18.58.20;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2001.04.30.16.53.34;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.09.15.25.01;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.01.03.43.12;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.11.19.14.05;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.15.19.53.58;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	2000.11.13.20.12.35;	author aaron;	state Exp;
branches;
next	;

1.8.2.1
date	2001.05.14.22.26.05;	author niklas;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2001.07.04.10.43.19;	author niklas;	state Exp;
branches;
next	1.8.2.3;

1.8.2.3
date	2001.10.31.03.22.48;	author nate;	state Exp;
branches;
next	1.8.2.4;

1.8.2.4
date	2003.03.28.00.38.26;	author niklas;	state Exp;
branches;
next	1.8.2.5;

1.8.2.5
date	2004.02.19.10.56.30;	author niklas;	state Exp;
branches;
next	1.8.2.6;

1.8.2.6
date	2004.06.05.23.12.55;	author niklas;	state Exp;
branches;
next	;

1.14.2.1
date	2002.06.11.03.42.27;	author art;	state Exp;
branches;
next	1.14.2.2;

1.14.2.2
date	2002.10.29.00.33.30;	author art;	state Exp;
branches;
next	1.14.2.3;

1.14.2.3
date	2003.05.19.22.20.35;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.45
log
@sys/arch/sgi/hpc/wskbdmap_sgi.c should be regen'd too.

Requested by miod
@
text
@/*	$OpenBSD: wskbdmap_mfii.c,v 1.44 2016/08/31 11:05:48 jca Exp $ */
/*	$NetBSD: wskbdmap_mfii.c,v 1.15 2000/05/19 16:40:04 drochner Exp $	*/

/*
 * PLEASE DO NOT FORGET TO REGEN
 *	sys/dev/usb/ukbdmap.c
 *	sys/arch/sgi/hpc/wskbdmap_sgi.c
 * AFTER ANY CHANGES TO THIS FILE!
 */

/*-
 * Copyright (c) 1997 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Juergen Hannken-Illjes.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <dev/wscons/wsksymdef.h>
#include <dev/wscons/wsksymvar.h>
#include <dev/pckbc/wskbdmap_mfii.h>

#define KC(n) KS_KEYCODE(n)

static const keysym_t pckbd_keydesc_us[] = {
/*  pos      command		normal		shifted */
    KC(1),   KS_Cmd_Debugger,	KS_Escape,
    KC(2),			KS_1,		KS_exclam,
    KC(3),			KS_2,		KS_at,
    KC(4),			KS_3,		KS_numbersign,
    KC(5),			KS_4,		KS_dollar,
    KC(6),			KS_5,		KS_percent,
    KC(7),			KS_6,		KS_asciicircum,
    KC(8),			KS_7,		KS_ampersand,
    KC(9),			KS_8,		KS_asterisk,
    KC(10),			KS_9,		KS_parenleft,
    KC(11),			KS_0,		KS_parenright,
    KC(12),			KS_minus,	KS_underscore,
    KC(13),			KS_equal,	KS_plus,
    KC(14),  KS_Cmd_ResetEmul,	KS_Delete,
    KC(15),			KS_Tab,
    KC(16),			KS_q,
    KC(17),			KS_w,
    KC(18),			KS_e,
    KC(19),			KS_r,
    KC(20),			KS_t,
    KC(21),			KS_y,
    KC(22),			KS_u,
    KC(23),			KS_i,
    KC(24),			KS_o,
    KC(25),			KS_p,
    KC(26),			KS_bracketleft,	KS_braceleft,
    KC(27),			KS_bracketright, KS_braceright,
    KC(28),			KS_Return,
    KC(29),  KS_Cmd1,		KS_Control_L,
    KC(30),			KS_a,
    KC(31),			KS_s,
    KC(32),			KS_d,
    KC(33),			KS_f,
    KC(34),			KS_g,
    KC(35),			KS_h,
    KC(36),			KS_j,
    KC(37),			KS_k,
    KC(38),			KS_l,
    KC(39),			KS_semicolon,	KS_colon,
    KC(40),			KS_apostrophe,	KS_quotedbl,
    KC(41),			KS_grave,	KS_asciitilde,
    KC(42),			KS_Shift_L,
    KC(43),			KS_backslash,	KS_bar,
    KC(44),			KS_z,
    KC(45),			KS_x,
    KC(46),			KS_c,
    KC(47),			KS_v,
    KC(48),			KS_b,
    KC(49),			KS_n,
    KC(50),			KS_m,
    KC(51),			KS_comma,	KS_less,
    KC(52),			KS_period,	KS_greater,
    KC(53),			KS_slash,	KS_question,
    KC(54),			KS_Shift_R,
    KC(55),			KS_KP_Multiply,
    KC(56),  KS_Cmd2,		KS_Alt_L,
    KC(57),			KS_space,
    KC(58),			KS_Caps_Lock,
    KC(59),  KS_Cmd_Screen0,	KS_f1,
    KC(60),  KS_Cmd_Screen1,	KS_f2,
    KC(61),  KS_Cmd_Screen2,	KS_f3,
    KC(62),  KS_Cmd_Screen3,	KS_f4,
    KC(63),  KS_Cmd_Screen4,	KS_f5,
    KC(64),  KS_Cmd_Screen5,	KS_f6,
    KC(65),  KS_Cmd_Screen6,	KS_f7,
    KC(66),  KS_Cmd_Screen7,	KS_f8,
    KC(67),  KS_Cmd_Screen8,	KS_f9,
    KC(68),  KS_Cmd_Screen9,	KS_f10,
    KC(69),			KS_Num_Lock,
    KC(70),			KS_Hold_Screen,
    KC(71),			KS_KP_Home,	KS_KP_7,
    KC(72),			KS_KP_Up,	KS_KP_8,
    KC(73),			KS_KP_Prior,	KS_KP_9,
    KC(74),			KS_KP_Subtract,
    KC(75),			KS_KP_Left,	KS_KP_4,
    KC(76),			KS_KP_Begin,	KS_KP_5,
    KC(77),			KS_KP_Right,	KS_KP_6,
    KC(78),			KS_KP_Add,
    KC(79),			KS_KP_End,	KS_KP_1,
    KC(80),			KS_KP_Down,	KS_KP_2,
    KC(81),			KS_KP_Next,	KS_KP_3,
    KC(82),			KS_KP_Insert,	KS_KP_0,
    KC(83),			KS_KP_Delete,	KS_KP_Decimal,
    KC(87),  KS_Cmd_Screen10,	KS_f11,
    KC(88),  KS_Cmd_Screen11,	KS_f12,
    KC(91),			KS_f13,
    KC(92),			KS_f14,
    KC(93),			KS_f15,
    KC(99),			KS_f16,
    KC(100),			KS_f17,
    KC(101),			KS_f18,
    KC(102),			KS_f19,
    KC(103),			KS_f20,
    KC(104),			KS_f21,
    KC(105),			KS_f22,
    KC(106),			KS_f23,
    KC(107),			KS_f24,
    KC(127),			KS_Pause, /* Break */
    KC(156),			KS_KP_Enter,
    KC(157), KS_Cmd1,		KS_Control_R,
    KC(160),			KS_AudioMute,
    KC(170),			KS_Print_Screen,
    KC(174),			KS_AudioLower,
    KC(176),			KS_AudioRaise,
    KC(181),			KS_KP_Divide,
    KC(183),			KS_Print_Screen,
    KC(184), KS_Cmd2,		KS_Alt_R,	KS_Multi_key,
#if 0
    KC(198),  KS_Cmd_ResetClose, /* CTL-Break */
#endif
    KC(199),			KS_Home,
    KC(200),			KS_Up,
    KC(201), KS_Cmd_ScrollBack,	KS_Prior,
    KC(203),			KS_Left,
    KC(205),			KS_Right,
    KC(207),			KS_End,
    KC(208),			KS_Down,
    KC(209), KS_Cmd_ScrollFwd,	KS_Next,
    KC(210),			KS_Insert,
    KC(211), KS_Cmd_KbdReset,	KS_KP_Delete,
    KC(219),			KS_Meta_L,
    KC(220),			KS_Meta_R,
    KC(221),			KS_Menu,
};

#if !defined(WSKBD_NO_INTL_LAYOUTS)

static const keysym_t pckbd_keydesc_de[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(3),   KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(4),   KS_3,		KS_section,	KS_threesuperior,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_slash,	KS_braceleft,
    KC(9),   KS_8,		KS_parenleft,	KS_bracketleft,
    KC(10),  KS_9,		KS_parenright,	KS_bracketright,
    KC(11),  KS_0,		KS_equal,	KS_braceright,
    KC(12),  KS_ssharp,		KS_question,	KS_backslash,
    KC(13),  KS_dead_acute,	KS_dead_grave,
    KC(16),  KS_q,		KS_Q,		KS_at,
    KC(21),  KS_z,
    KC(26),  KS_udiaeresis,
    KC(27),  KS_plus,		KS_asterisk,	KS_dead_tilde,
    KC(39),  KS_odiaeresis,
    KC(40),  KS_adiaeresis,
    KC(41),  KS_dead_circumflex,KS_dead_abovering,
    KC(43),  KS_numbersign,	KS_apostrophe,
    KC(44),  KS_y,
    KC(50),  KS_m,		KS_M,		KS_mu,
    KC(51),  KS_comma,		KS_semicolon,
    KC(52),  KS_period,		KS_colon,
    KC(53),  KS_minus,		KS_underscore,
    KC(86),  KS_less,		KS_greater,	KS_bar,		KS_brokenbar,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_de_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(13),  KS_apostrophe,	KS_grave,
    KC(27),  KS_plus,		KS_asterisk,	KS_asciitilde,
    KC(41),  KS_asciicircum,	KS_degree,
};

static const keysym_t pckbd_keydesc_dk[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(3),   KS_2,		KS_quotedbl,	KS_at,
    KC(4),   KS_3,		KS_numbersign,	KS_sterling,
    KC(5),   KS_4,		KS_currency,	KS_dollar,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_slash,	KS_braceleft,
    KC(9),   KS_8,		KS_parenleft,	KS_bracketleft,
    KC(10),  KS_9,		KS_parenright,	KS_bracketright,
    KC(11),  KS_0,		KS_equal,	KS_braceright,
    KC(12),  KS_plus,		KS_question,
    KC(13),  KS_dead_acute,	KS_dead_grave,	KS_bar,
    KC(26),  KS_aring,
    KC(27),  KS_dead_diaeresis,	KS_dead_circumflex, KS_dead_tilde,
    KC(39),  KS_ae,
    KC(40),  KS_oslash,
    KC(41),  KS_onehalf,	KS_paragraph,
    KC(43),  KS_apostrophe,	KS_asterisk,
    KC(51),  KS_comma,		KS_semicolon,
    KC(52),  KS_period,		KS_colon,
    KC(53),  KS_minus,		KS_underscore,
    KC(86),  KS_less,		KS_greater,	KS_backslash,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_dk_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(13),  KS_apostrophe,	KS_grave,	KS_bar,
    KC(27),  KS_diaeresis,	KS_asciicircum,	KS_asciitilde,
};

static const keysym_t pckbd_keydesc_sv[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(12),  KS_plus,		KS_question,	KS_backslash,
    KC(27),  KS_dead_diaeresis,	KS_dead_circumflex, KS_dead_tilde,
    KC(39),  KS_odiaeresis,
    KC(40),  KS_adiaeresis,
    KC(41),  KS_section,	KS_onehalf,
    KC(86),  KS_less,		KS_greater,	KS_bar,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_sv_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(13),  KS_apostrophe,	KS_grave,	KS_bar,
    KC(27),  KS_diaeresis,	KS_asciicircum,	KS_asciitilde,
};

static const keysym_t pckbd_keydesc_no[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(13),  KS_backslash,	KS_dead_grave,	KS_dead_acute,
    KC(27),  KS_dead_diaeresis,	KS_dead_circumflex, KS_dead_tilde,
    KC(39),  KS_oslash,
    KC(40),  KS_ae,
    KC(41),  KS_bar,		KS_paragraph,
    KC(86),  KS_less,		KS_greater,
};

static const keysym_t pckbd_keydesc_no_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(13),  KS_backslash,	KS_grave,	KS_acute,
    KC(27),  KS_diaeresis,	KS_asciicircum,	KS_asciitilde,
};

static const keysym_t pckbd_keydesc_fr[] = {
/*  pos	     normal		shifted		altgr		shift-altgr */
    KC(2),   KS_ampersand,	KS_1,
    KC(3),   KS_eacute,		KS_2,		KS_asciitilde,
    KC(4),   KS_quotedbl,	KS_3,		KS_numbersign,
    KC(5),   KS_apostrophe,	KS_4,		KS_braceleft,
    KC(6),   KS_parenleft,	KS_5,		KS_bracketleft,
    KC(7),   KS_minus,		KS_6,		KS_bar,
    KC(8),   KS_egrave,		KS_7,		KS_grave,
    KC(9),   KS_underscore,	KS_8,		KS_backslash,
    KC(10),  KS_ccedilla,	KS_9,		KS_asciicircum,
    KC(11),  KS_agrave,		KS_0,		KS_at,
    KC(12),  KS_parenright,	KS_degree,	KS_bracketright,
    KC(13),  KS_equal,		KS_plus,	KS_braceright,
    KC(16),  KS_a,
    KC(17),  KS_z,
    KC(26),  KS_dead_circumflex, KS_dead_diaeresis,
    KC(27),  KS_dollar,		KS_sterling,	KS_currency,
    KC(30),  KS_q,
    KC(39),  KS_m,
    KC(40),  KS_ugrave,		KS_percent,
    KC(41),  KS_twosuperior,
    KC(43),  KS_asterisk,	KS_mu,
    KC(44),  KS_w,
    KC(50),  KS_comma,		KS_question,
    KC(51),  KS_semicolon,	KS_period,
    KC(52),  KS_colon,		KS_slash,
    KC(53),  KS_exclam,		KS_section,
    KC(86),  KS_less,		KS_greater,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

/*
 * fr-dvorak-be'po layout, simplified map, per http://www.clavier-dvorak.org/
 * (the complete map is still a moving target)
 */
static const keysym_t pckbd_keydesc_fr_dvorak_bepo[] = {
    KC(2),   KS_quotedbl,	KS_1,		KS_hyphen,
    KC(3),   KS_guillemotleft,	KS_2,		KS_less,
    KC(4),   KS_guillemotright,	KS_3,		KS_greater,
    KC(5),   KS_parenleft,	KS_4,		KS_bracketleft,
    KC(6),   KS_parenright,	KS_5,		KS_bracketright,
    KC(7),   KS_at,		KS_6,
    KC(8),   KS_plus,		KS_7,
    KC(9),   KS_minus,		KS_8,
    KC(10),  KS_slash,		KS_9,
    KC(11),  KS_asterisk,	KS_0,
    KC(12),  KS_equal,		KS_asciicircum,
    KC(13),  KS_percent,	KS_grave,
    KC(16),  KS_b,		KS_B,		KS_bar,
    KC(17),  KS_eacute,		KS_Eacute,	KS_dead_acute,
    KC(18),  KS_p,		KS_P,		KS_ampersand,
    KC(19),  KS_o,		KS_O,
						/* oe ligature */
    KC(20),  KS_egrave,		KS_Egrave,	KS_dead_grave,
    KC(21),  KS_dead_circumflex,KS_exclam,
    KC(22),			KS_v,
    KC(23),			KS_d,
    KC(24),			KS_l,
    KC(25),			KS_j,
    KC(26),			KS_z,
    KC(27),			KS_w,
    KC(30),  KS_a,		KS_A,		KS_ae,		KS_AE,
    KC(31),  KS_u,		KS_U,		KS_ugrave,	KS_Ugrave,
    KC(32),  KS_i,		KS_I,		KS_dead_diaeresis,
    KC(33),  KS_e,		KS_E,
						/* euro currency */
    KC(34),  KS_comma,		KS_semicolon,
    KC(35),			KS_c,
    KC(36),			KS_t,
    KC(37),			KS_s,
    KC(38),			KS_r,
    KC(39),			KS_n,
    KC(40),			KS_m,
    KC(41),  KS_dollar,		KS_numbersign,
    KC(43),  KS_ccedilla,	KS_Ccedilla,
    KC(44),  KS_agrave,		KS_Agrave,	KS_backslash,
    KC(45),  KS_y,		KS_Y,		KS_braceleft,
    KC(46),  KS_x,		KS_X,		KS_braceright,
    KC(47),  KS_period,		KS_colon,	/* ellipsis */
    KC(48),  KS_k,		KS_K,		KS_asciitilde,
    KC(49),  KS_apostrophe,	KS_question,
    KC(50),  KS_q,		KS_Q,
    KC(51),  KS_g,		KS_G,		KS_mu,
    KC(52),			KS_h,
    KC(53),			KS_f,
    KC(57),  KS_space,		KS_nobreakspace,KS_underscore,
    KC(86),  KS_egrave,		KS_Egrave,	KS_slash,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_it[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(3),   KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(4),   KS_3,		KS_sterling,	KS_threesuperior,
    KC(6),   KS_5,		KS_percent,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_slash,
    KC(9),   KS_8,		KS_parenleft,
    KC(10),  KS_9,		KS_parenright,
    KC(11),  KS_0,		KS_equal,
    KC(12),  KS_apostrophe,	KS_question,
    KC(13),  KS_igrave,		KS_asciicircum,
    KC(26),  KS_egrave,		KS_eacute,	KS_braceleft,	KS_bracketleft,
    KC(27),  KS_plus,		KS_asterisk,	KS_braceright,	KS_bracketright,
    KC(39),  KS_ograve,		KS_Ccedilla,	KS_at,
    KC(40),  KS_agrave,		KS_degree,	KS_numbersign,
    KC(41),  KS_backslash,	KS_bar,
    KC(43),  KS_ugrave,		KS_section,
    KC(51),  KS_comma,		KS_semicolon,
    KC(52),  KS_period,		KS_colon,
    KC(53),  KS_minus,		KS_underscore,
    KC(86),  KS_less,		KS_greater,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_uk[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(2),   KS_1,		KS_exclam,	KS_plusminus,	KS_exclamdown,
    KC(3),   KS_2,		KS_quotedbl,	KS_twosuperior,	KS_cent,
    KC(4),   KS_3,		KS_sterling,	KS_threesuperior,
    KC(5),   KS_4,		KS_dollar,	KS_acute,	KS_currency,
    KC(6),   KS_5,		KS_percent,	KS_mu,		KS_yen,
    KC(7),   KS_6,		KS_asciicircum,	KS_paragraph,
    KC(8),   KS_7,		KS_ampersand,	KS_periodcentered, KS_brokenbar,
    KC(9),   KS_8,		KS_asterisk,	KS_cedilla,	KS_ordfeminine,
    KC(10),  KS_9,		KS_parenleft,	KS_onesuperior,	KS_diaeresis,
    KC(11),  KS_0,		KS_parenright,	KS_masculine,	KS_copyright,
    KC(12),  KS_minus,		KS_underscore,	KS_hyphen,	KS_ssharp,
    KC(13),  KS_equal,		KS_plus,	KS_onehalf,    KS_guillemotleft,
    KC(40),  KS_apostrophe,	KS_at,		KS_section,	KS_Agrave,
    KC(41),  KS_grave,		KS_grave,	KS_agrave,	KS_agrave,
    KC(43),  KS_numbersign,	KS_asciitilde,  KS_sterling,	KS_thorn,
    KC(86),  KS_backslash,	KS_bar,		KS_Udiaeresis,
};

static const keysym_t pckbd_keydesc_jp[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(3),   KS_2,		KS_quotedbl,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_apostrophe,
    KC(9),   KS_8,		KS_parenleft,
    KC(10),  KS_9,		KS_parenright,
    KC(11),  KS_0,
    KC(12),  KS_minus,		KS_equal,
    KC(13),  KS_asciicircum,	KS_asciitilde,
    KC(26),  KS_at,		KS_grave,
    KC(27),  KS_bracketleft,	KS_braceleft,
    KC(39),  KS_semicolon,	KS_plus,
    KC(40),  KS_colon,		KS_asterisk,
    KC(41),  KS_Zenkaku_Hankaku, /* replace grave/tilde */
    KC(43),  KS_bracketright,	KS_braceright,
    KC(112), KS_Hiragana_Katakana,
    KC(115), KS_backslash,	KS_underscore,
    KC(121), KS_Henkan,
    KC(123), KS_Muhenkan,
    KC(125), KS_backslash,	KS_bar,
};

static const keysym_t pckbd_keydesc_es[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(2),   KS_1,		KS_exclam,	KS_bar,
    KC(3),   KS_2,		KS_quotedbl,	KS_at,
    KC(4),   KS_3,		KS_periodcentered, KS_numbersign,
    KC(5),   KS_4,		KS_dollar,	KS_asciitilde,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_slash,
    KC(9),   KS_8,		KS_parenleft,
    KC(10),  KS_9,		KS_parenright,
    KC(11),  KS_0,		KS_equal,
    KC(12),  KS_apostrophe,	KS_question,
    KC(13),  KS_exclamdown,	KS_questiondown,
    KC(26),  KS_dead_grave,	KS_dead_circumflex, KS_bracketleft,
    KC(27),  KS_plus,		KS_asterisk,	KS_bracketright,
    KC(39),  KS_ntilde,
    KC(40),  KS_dead_acute,	KS_dead_diaeresis, KS_braceleft,
    KC(41),  KS_degree,		KS_ordfeminine,	KS_backslash,
    KC(43),  KS_ccedilla,	KS_Ccedilla,	KS_braceright,
    KC(51),  KS_comma,		KS_semicolon,
    KC(52),  KS_period,		KS_colon,
    KC(53),  KS_minus,		KS_underscore,
    KC(86),  KS_less,		KS_greater,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_lt[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(2),   KS_exclam,		KS_1,		KS_at,
    KC(3),   KS_minus,		KS_2,		KS_underscore,
    KC(4),   KS_slash,		KS_3,		KS_numbersign,
    KC(5),   KS_semicolon,	KS_4,		KS_dollar,
    KC(6),   KS_colon,		KS_5,		KS_paragraph,
    KC(7),   KS_comma,		KS_6,		KS_asciicircum,
    KC(8),   KS_period,		KS_7,		KS_ampersand,
    KC(9),   KS_equal,		KS_8,		KS_asterisk,
    KC(10),  KS_bracketleft,	KS_9,		KS_parenleft,
    KC(11),  KS_bracketright,	KS_0,		KS_parenright,
    KC(12),  KS_question,	KS_plus,	KS_apostrophe,
    KC(13),  KS_x,		KS_X,		KS_percent,
    KC(16),  KS_L7_aogonek,	KS_L7_Aogonek,
    KC(17),  KS_L7_zcaron,	KS_L7_Zcaron,
    KC(18),  KS_e,		KS_E,		KS_currency,
    KC(26),  KS_L7_iogonek,	KS_L7_Iogonek,	KS_braceleft,
    KC(27),  KS_w,		KS_W,		KS_braceright,
    KC(33),  KS_L7_scaron,	KS_L7_Scaron,
    KC(39),  KS_L7_uogonek,	KS_L7_Uogonek,
    KC(40),  KS_L7_edot,	KS_L7_Edot,	KS_quotedbl,
    KC(41),  KS_grave,		KS_asciitilde,
    KC(43),  KS_q,		KS_Q,		KS_bar,
    KC(45),  KS_L7_umacron,	KS_L7_Umacron,
    KC(51),  KS_L7_ccaron,	KS_L7_Ccaron,	KS_L7_dbllow9quot,
    KC(52),  KS_f,		KS_F,		KS_L7_leftdblquot,
    KC(53),  KS_L7_eogonek,	KS_L7_Eogonek,	KS_backslash,
    KC(57),  KS_space,		KS_space,	KS_nobreakspace,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_be[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(2),   KS_ampersand,	KS_1,		KS_bar,
    KC(3),   KS_eacute,		KS_2,		KS_at,
    KC(4),   KS_quotedbl,	KS_3,		KS_numbersign,
    KC(5),   KS_apostrophe,	KS_4,
    KC(6),   KS_parenleft,	KS_5,
    KC(7),   KS_section,	KS_6,		KS_asciicircum,
    KC(8),   KS_egrave,		KS_7,
    KC(9),   KS_exclam,		KS_8,
    KC(10),  KS_ccedilla,	KS_9,		KS_braceleft,
    KC(11),  KS_agrave,		KS_0,		KS_braceright,
    KC(12),  KS_parenright,	KS_degree,
    KC(13),  KS_minus,		KS_underscore,
    KC(16),  KS_a,
    KC(17),  KS_z,
    KC(26),  KS_dead_circumflex, KS_dead_diaeresis, KS_bracketleft,
    KC(27),  KS_dollar,		KS_asterisk,	KS_bracketright,
    KC(30),  KS_q,
    KC(39),  KS_m,
    KC(40),  KS_ugrave,		KS_percent,	KS_acute,
    KC(41),  KS_twosuperior,	KS_threesuperior,
    KC(43),  KS_mu,		KS_sterling,	KS_grave,
    KC(44),  KS_w,
    KC(50),  KS_comma,		KS_question,
    KC(51),  KS_semicolon,	KS_period,
    KC(52),  KS_colon,		KS_slash,
    KC(53),  KS_equal,		KS_plus,	KS_asciitilde,
    KC(86),  KS_less,		KS_greater,	KS_backslash,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_us_declk[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(1),	KS_grave,	KS_asciitilde, /* replace escape */
    KC(41),	KS_less,	KS_greater, /* replace grave/tilde */
    KC(143),	KS_Multi_key, /* left compose */
    KC(157),	KS_Multi_key, /* right compose, replace right control */
    KC(87),	KS_Cmd_Debugger,	KS_Escape, /* replace F11 */
    KC(189),	KS_f13,
    KC(190),	KS_f14,
    KC(191),	KS_Help,
    KC(192),	KS_Execute,
    KC(193),	KS_f17,
    KC(183),	KS_f18,
    KC(70),	KS_f19, /* replace scroll lock */
    KC(127),	KS_f20, /* replace break */
    KC(69),	KS_KP_F1, /* replace num lock */
    KC(181),	KS_KP_F2, /* replace divide */
    KC(55),	KS_KP_F3, /* replace multiply */
    KC(74),	KS_KP_F4, /* replace subtract */

    /* keypad is numbers only - no num lock */
    KC(71),	KS_KP_7,
    KC(72),	KS_KP_8,
    KC(73),	KS_KP_9,
    KC(75),	KS_KP_4,
    KC(76),	KS_KP_5,
    KC(77),	KS_KP_6,
    KC(79),	KS_KP_1,
    KC(80),	KS_KP_2,
    KC(81),	KS_KP_3,
    KC(82),	KS_KP_0,
    KC(83),	KS_KP_Decimal,

    KC(206),	KS_KP_Subtract,
    KC(78),	KS_KP_Separator, /* replace add */
    KC(199),	KS_Find, /* replace home */
    KC(207),	KS_Select, /* replace end */
};

static const keysym_t pckbd_keydesc_us_dvorak[] = {
/*  pos      command		normal		shifted */
    KC(12),			KS_bracketleft,	KS_braceleft,
    KC(13),			KS_bracketright, KS_braceright,
    KC(16),			KS_apostrophe, KS_quotedbl,
    KC(17),			KS_comma, KS_less,
    KC(18),			KS_period, KS_greater,
    KC(19),			KS_p,
    KC(20),			KS_y,
    KC(21),			KS_f,
    KC(22),			KS_g,
    KC(23),			KS_c,
    KC(24),			KS_r,
    KC(25),			KS_l,
    KC(26),			KS_slash, KS_question,
    KC(27),			KS_equal, KS_plus,
    KC(31),			KS_o,
    KC(32),			KS_e,
    KC(33),			KS_u,
    KC(34),			KS_i,
    KC(35),			KS_d,
    KC(36),			KS_h,
    KC(37),			KS_t,
    KC(38),			KS_n,
    KC(39),			KS_s,
    KC(40),			KS_minus, KS_underscore,
    KC(44),			KS_semicolon, KS_colon,
    KC(45),			KS_q,
    KC(46),			KS_j,
    KC(47),			KS_k,
    KC(48),			KS_x,
    KC(49),			KS_b,
    KC(51),			KS_w,
    KC(52),			KS_v,
    KC(53),			KS_z,
};

static const keysym_t pckbd_keydesc_swapctrlcaps[] = {
/*  pos      command		normal		shifted */
    KC(29),			KS_Caps_Lock,
    KC(58),  KS_Cmd1,		KS_Control_L,
};

static const keysym_t pckbd_keydesc_iopener[] = {
/*  pos      command		normal		shifted */
    KC(59),  KS_Cmd_Debugger,	KS_Escape,
    KC(60),  KS_Cmd_Screen0,	KS_f1,
    KC(61),  KS_Cmd_Screen1,	KS_f2,
    KC(62),  KS_Cmd_Screen2,	KS_f3,
    KC(63),  KS_Cmd_Screen3,	KS_f4,
    KC(64),  KS_Cmd_Screen4,	KS_f5,
    KC(65),  KS_Cmd_Screen5,	KS_f6,
    KC(66),  KS_Cmd_Screen6,	KS_f7,
    KC(67),  KS_Cmd_Screen7,	KS_f8,
    KC(68),  KS_Cmd_Screen8,	KS_f9,
    KC(87),  KS_Cmd_Screen9,	KS_f10,
    KC(88),			KS_f11,
};

static const keysym_t pckbd_keydesc_ru[] = {
/*  pos      normal		shifted		altgr			shift-altgr */
    KC(7),   KS_6,		KS_asciicircum,	KS_6,			KS_comma,
    KC(8),   KS_7,		KS_ampersand,	KS_7,			KS_period,
    KC(16),  KS_q,		KS_Q,		KS_Cyrillic_ishort,	KS_Cyrillic_ISHORT,
    KC(17),  KS_w,		KS_W,		KS_Cyrillic_tse,	KS_Cyrillic_TSE,
    KC(18),  KS_e,		KS_E,		KS_Cyrillic_u,		KS_Cyrillic_U,
    KC(19),  KS_r,		KS_R,		KS_Cyrillic_ka,		KS_Cyrillic_KA,
    KC(20),  KS_t,		KS_T,		KS_Cyrillic_ie,		KS_Cyrillic_IE,
    KC(21),  KS_y,		KS_Y,		KS_Cyrillic_en,		KS_Cyrillic_EN,
    KC(22),  KS_u,		KS_U,		KS_Cyrillic_ge,		KS_Cyrillic_GE,
    KC(23),  KS_i,		KS_I,		KS_Cyrillic_sha,	KS_Cyrillic_SHA,
    KC(24),  KS_o,		KS_O,		KS_Cyrillic_scha,	KS_Cyrillic_SCHA,
    KC(25),  KS_p,		KS_P,		KS_Cyrillic_ze,		KS_Cyrillic_ZE,
    KC(26),  KS_bracketleft,	KS_braceleft,	KS_Cyrillic_ha,		KS_Cyrillic_HA,
    KC(27),  KS_bracketright,	KS_braceright,	KS_Cyrillic_hsighn,	KS_Cyrillic_HSIGHN,
    KC(30),  KS_a,		KS_A,		KS_Cyrillic_ef,		KS_Cyrillic_EF,
    KC(31),  KS_s,		KS_S,		KS_Cyrillic_yeru,	KS_Cyrillic_YERU,
    KC(32),  KS_d,		KS_D,		KS_Cyrillic_ve,		KS_Cyrillic_VE,
    KC(33),  KS_f,		KS_F,		KS_Cyrillic_a,		KS_Cyrillic_A,
    KC(34),  KS_g,		KS_G,		KS_Cyrillic_pe,		KS_Cyrillic_PE,
    KC(35),  KS_h,		KS_H,		KS_Cyrillic_er,		KS_Cyrillic_ER,
    KC(36),  KS_j,		KS_J,		KS_Cyrillic_o,		KS_Cyrillic_O,
    KC(37),  KS_k,		KS_K,		KS_Cyrillic_el,		KS_Cyrillic_EL,
    KC(38),  KS_l,		KS_L,		KS_Cyrillic_de,		KS_Cyrillic_DE,
    KC(39),  KS_semicolon,	KS_colon,	KS_Cyrillic_zhe,	KS_Cyrillic_ZHE,
    KC(40),  KS_apostrophe,	KS_quotedbl,	KS_Cyrillic_e,		KS_Cyrillic_E,
    KC(44),  KS_z,		KS_Z,		KS_Cyrillic_ya,		KS_Cyrillic_YA,
    KC(45),  KS_x,		KS_X,		KS_Cyrillic_che,	KS_Cyrillic_CHE,
    KC(46),  KS_c,		KS_C,		KS_Cyrillic_es,		KS_Cyrillic_ES,
    KC(47),  KS_v,		KS_V,		KS_Cyrillic_em,		KS_Cyrillic_EM,
    KC(48),  KS_b,		KS_B,		KS_Cyrillic_i,		KS_Cyrillic_I,
    KC(49),  KS_n,		KS_N,		KS_Cyrillic_te,		KS_Cyrillic_TE,
    KC(50),  KS_m,		KS_M,		KS_Cyrillic_ssighn,	KS_Cyrillic_SSIGHN,
    KC(51),  KS_comma,		KS_less,	KS_Cyrillic_be,		KS_Cyrillic_BE,
    KC(52),  KS_period,		KS_greater,	KS_Cyrillic_yu,		KS_Cyrillic_YU,
    KC(53),  KS_slash,		KS_question,	KS_Cyrillic_yo,		KS_Cyrillic_YO,
    KC(184), KS_Mode_switch,   KS_Multi_key,
};

static const keysym_t pckbd_keydesc_ua[] = {
/*  pos      normal		shifted		altgr			shift-altgr */
    KC(7),   KS_6,		KS_asciicircum,	KS_6,			KS_comma,
    KC(8),   KS_7,		KS_ampersand,	KS_7,			KS_period,
    KC(12),   KS_minus,		KS_underscore,	KS_Cyrillic_iukr,			KS_Cyrillic_IUKR,
    KC(13),   KS_equal,		KS_plus,	KS_Cyrillic_yeukr,			KS_Cyrillic_YEUKR,
    KC(16),  KS_q,		KS_Q,		KS_Cyrillic_ishort,	KS_Cyrillic_ISHORT,
    KC(17),  KS_w,		KS_W,		KS_Cyrillic_tse,	KS_Cyrillic_TSE,
    KC(18),  KS_e,		KS_E,		KS_Cyrillic_u,		KS_Cyrillic_U,
    KC(19),  KS_r,		KS_R,		KS_Cyrillic_ka,		KS_Cyrillic_KA,
    KC(20),  KS_t,		KS_T,		KS_Cyrillic_ie,		KS_Cyrillic_IE,
    KC(21),  KS_y,		KS_Y,		KS_Cyrillic_en,		KS_Cyrillic_EN,
    KC(22),  KS_u,		KS_U,		KS_Cyrillic_ge,		KS_Cyrillic_GE,
    KC(23),  KS_i,		KS_I,		KS_Cyrillic_sha,	KS_Cyrillic_SHA,
    KC(24),  KS_o,		KS_O,		KS_Cyrillic_scha,	KS_Cyrillic_SCHA,
    KC(25),  KS_p,		KS_P,		KS_Cyrillic_ze,		KS_Cyrillic_ZE,
    KC(26),  KS_bracketleft,	KS_braceleft,	KS_Cyrillic_ha,		KS_Cyrillic_HA,
    KC(27),  KS_bracketright,	KS_braceright,	KS_Cyrillic_hsighn,	KS_Cyrillic_HSIGHN,
    KC(30),  KS_a,		KS_A,		KS_Cyrillic_ef,		KS_Cyrillic_EF,
    KC(31),  KS_s,		KS_S,		KS_Cyrillic_yeru,	KS_Cyrillic_YERU,
    KC(32),  KS_d,		KS_D,		KS_Cyrillic_ve,		KS_Cyrillic_VE,
    KC(33),  KS_f,		KS_F,		KS_Cyrillic_a,		KS_Cyrillic_A,
    KC(34),  KS_g,		KS_G,		KS_Cyrillic_pe,		KS_Cyrillic_PE,
    KC(35),  KS_h,		KS_H,		KS_Cyrillic_er,		KS_Cyrillic_ER,
    KC(36),  KS_j,		KS_J,		KS_Cyrillic_o,		KS_Cyrillic_O,
    KC(37),  KS_k,		KS_K,		KS_Cyrillic_el,		KS_Cyrillic_EL,
    KC(38),  KS_l,		KS_L,		KS_Cyrillic_de,		KS_Cyrillic_DE,
    KC(39),  KS_semicolon,	KS_colon,	KS_Cyrillic_zhe,	KS_Cyrillic_ZHE,
    KC(40),  KS_apostrophe,	KS_quotedbl,	KS_Cyrillic_e,		KS_Cyrillic_E,
    KC(41),  KS_grave,	KS_asciitilde,	KS_Cyrillic_gheukr,		KS_Cyrillic_GHEUKR,
    KC(43),  KS_backslash,	KS_bar,	KS_Cyrillic_yi,		KS_Cyrillic_YI,
    KC(44),  KS_z,		KS_Z,		KS_Cyrillic_ya,		KS_Cyrillic_YA,
    KC(45),  KS_x,		KS_X,		KS_Cyrillic_che,	KS_Cyrillic_CHE,
    KC(46),  KS_c,		KS_C,		KS_Cyrillic_es,		KS_Cyrillic_ES,
    KC(47),  KS_v,		KS_V,		KS_Cyrillic_em,		KS_Cyrillic_EM,
    KC(48),  KS_b,		KS_B,		KS_Cyrillic_i,		KS_Cyrillic_I,
    KC(49),  KS_n,		KS_N,		KS_Cyrillic_te,		KS_Cyrillic_TE,
    KC(50),  KS_m,		KS_M,		KS_Cyrillic_ssighn,	KS_Cyrillic_SSIGHN,
    KC(51),  KS_comma,		KS_less,	KS_Cyrillic_be,		KS_Cyrillic_BE,
    KC(52),  KS_period,		KS_greater,	KS_Cyrillic_yu,		KS_Cyrillic_YU,
    KC(53),  KS_slash,		KS_question,	KS_Cyrillic_yo,		KS_Cyrillic_YO,
    KC(184), KS_Mode_switch,   KS_Multi_key,
};

static const keysym_t pckbd_keydesc_sg[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(2),   KS_1,		KS_plus,	KS_bar,
    KC(3),   KS_2,		KS_quotedbl,	KS_at,
    KC(4),   KS_3,		KS_asterisk,	KS_numbersign,
    KC(5),   KS_4,		KS_ccedilla,
    KC(7),   KS_6,		KS_ampersand,	KS_notsign,
    KC(8),   KS_7,		KS_slash,	KS_brokenbar,
    KC(9),   KS_8,		KS_parenleft,	KS_cent,
    KC(10),  KS_9,		KS_parenright,
    KC(11),  KS_0,		KS_equal,
    KC(12),  KS_apostrophe,	KS_question,	KS_dead_acute,
    KC(13),  KS_dead_circumflex,KS_dead_grave,	KS_dead_tilde,
    KC(18),  KS_e,		KS_E,		KS_currency,
    KC(21),  KS_z,
    KC(26),  KS_udiaeresis,	KS_egrave,	KS_bracketleft,
    KC(27),  KS_dead_diaeresis,	KS_exclam,	KS_bracketright,
    KC(39),  KS_odiaeresis,	KS_eacute,
    KC(40),  KS_adiaeresis,	KS_agrave,	KS_braceleft,
    KC(41),  KS_section,	KS_degree,	KS_dead_abovering,
    KC(43),  KS_dollar,		KS_sterling,	KS_braceright,
    KC(44),  KS_y,
    KC(51),  KS_comma,		KS_semicolon,
    KC(52),  KS_period,		KS_colon,
    KC(53),  KS_minus,		KS_underscore,
    KC(86),  KS_less,		KS_greater,	KS_backslash,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_sg_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(12),  KS_apostrophe,	KS_question,	KS_acute,
    KC(13),  KS_asciicircum,	KS_grave,	KS_asciitilde,
    KC(27),  KS_diaeresis,	KS_exclam,	KS_bracketright
};

static const keysym_t pckbd_keydesc_sf[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(26),  KS_egrave,		KS_udiaeresis,	KS_bracketleft,
    KC(39),  KS_eacute,		KS_odiaeresis,
    KC(40),  KS_agrave,		KS_adiaeresis,	KS_braceleft
};

static const keysym_t pckbd_keydesc_pt[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(3),   KS_2,		KS_quotedbl,	KS_at,
    KC(4),   KS_3,		KS_numbersign,	KS_sterling,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_slash,	KS_braceleft,
    KC(9),   KS_8,		KS_parenleft,	KS_bracketleft,
    KC(10),  KS_9,		KS_parenright,	KS_bracketright,
    KC(11),  KS_0,		KS_equal,	KS_braceright,
    KC(12),  KS_apostrophe,	KS_question,
    KC(13),  KS_less,		KS_greater,
    KC(26),  KS_plus,		KS_asterisk,
    KC(27),  KS_dead_acute,	KS_dead_grave,
    KC(39),  KS_ccedilla,	KS_Ccedilla,
    KC(40),  KS_masculine,	KS_ordfeminine,
    KC(41),  KS_backslash,	KS_bar,
    KC(43),  KS_dead_tilde,	KS_dead_circumflex,
    KC(51),  KS_comma,		KS_semicolon,
    KC(52),  KS_period,		KS_colon,
    KC(53),  KS_minus,		KS_underscore,
    KC(86),  KS_less,		KS_greater,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_la[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(2),   KS_1,		KS_exclam,
    KC(3),   KS_2,		KS_quotedbl,
    KC(4),   KS_3,		KS_numbersign,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_slash,
    KC(9),   KS_8,		KS_parenleft,
    KC(10),  KS_9,		KS_parenright,
    KC(11),  KS_0,		KS_equal,
    KC(12),  KS_apostrophe,	KS_question,	KS_backslash,
    KC(13),  KS_questiondown,	KS_exclamdown,
    KC(16),  KS_q,		KS_Q,		KS_at,
    KC(26),  KS_dead_acute,	KS_dead_diaeresis,
    KC(27),  KS_plus,		KS_asterisk,	KS_asciitilde,
    KC(39),  KS_ntilde,
    KC(40),  KS_braceleft,	KS_bracketleft,	KS_dead_circumflex,
    KC(41),  KS_bar,		KS_degree,	KS_notsign,
    KC(43),  KS_braceright,	KS_bracketright,KS_dead_grave,
    KC(51),  KS_comma,		KS_semicolon,
    KC(52),  KS_period,		KS_colon,
    KC(53),  KS_minus,		KS_underscore,
    KC(86),  KS_less,		KS_greater,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_br[] = {
/*  pos      normal		shifted         altgr           shift-altgr */
    KC(2),   KS_1,		KS_exclam,	KS_onesuperior,
    KC(3),   KS_2,		KS_at,		KS_twosuperior,
    KC(4),   KS_3,		KS_numbersign,	KS_threesuperior,
    KC(5),   KS_4,		KS_dollar,	KS_sterling,
    KC(6),   KS_5,		KS_percent,	KS_cent,
    KC(7),   KS_6,		KS_dead_diaeresis,	KS_notsign,
    KC(13),  KS_equal,		KS_plus,	KS_section,
    KC(26),  KS_dead_acute,	KS_dead_grave,
    KC(27),  KS_bracketleft,	KS_braceleft,	KS_ordfeminine,
    KC(39),  KS_ccedilla,	KS_Ccedilla,
    KC(40),  KS_dead_tilde,	KS_dead_circumflex,
    KC(41),  KS_apostrophe,	KS_quotedbl,
    KC(43),  KS_bracketright,	KS_braceright,	KS_masculine,
    KC(53),  KS_semicolon,	KS_colon,
    KC(83),  KS_KP_Delete,	KS_KP_Decimal,
    KC(86),  KS_backslash,	KS_bar,
    KC(115), KS_slash,		KS_question,	KS_degree,
};

static const keysym_t pckbd_keydesc_tr[] = {
/*  pos      normal		shifted         altgr           shift-altgr */
    KC(3),   KS_2,		KS_apostrophe,	KS_sterling,
    KC(4),   KS_3,		KS_asciicircum,	KS_numbersign,
    KC(5),   KS_4,		KS_plus,	KS_dollar,
    KC(6),   KS_5,		KS_percent,	KS_onehalf,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_slash,	KS_braceleft,
    KC(9),   KS_8,		KS_parenleft,	KS_bracketleft,
    KC(10),  KS_9,		KS_parenright,	KS_bracketright,
    KC(11),  KS_0,		KS_equal,	KS_braceright,
    KC(12),  KS_asterisk,	KS_question,	KS_backslash,
    KC(13),  KS_minus,		KS_underscore,
    KC(16),  KS_q,		KS_Q,		KS_at,
    KC(23),  KS_L5_idotless,	KS_I,
    KC(26),  KS_L5_gbreve,	KS_L5_Gbreve,	KS_dead_diaeresis,
    KC(27),  KS_udiaeresis,	KS_Udiaeresis,	KS_asciitilde,
    KC(39),  KS_L5_scedilla,	KS_L5_Scedilla,	KS_dead_acute,
    KC(40),  KS_i,		KS_L5_Idotabove,
    KC(41),  KS_quotedbl,	KS_eacute,
    KC(43),  KS_comma,		KS_semicolon,	KS_dead_grave,
    KC(51),  KS_odiaeresis,	KS_Odiaeresis,
    KC(52),  KS_ccedilla,	KS_Ccedilla,
    KC(53),  KS_period,	KS_colon,
    KC(86),  KS_less,		KS_greater,	KS_bar,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_tr_nodead[] = {
/*  pos      normal		shifted         altgr           shift-altgr */
    KC(26),  KS_L5_gbreve,	KS_L5_Gbreve,
    KC(39),  KS_L5_scedilla,	KS_L5_Scedilla,	KS_apostrophe,
    KC(43),  KS_comma,		KS_semicolon,	KS_grave,
};

static const keysym_t pckbd_keydesc_pl[] = {
/*  pos      normal		shifted         altgr           shift-altgr */
    KC(18),  KS_e,		KS_E,		KS_L2_eogonek,	KS_L2_Eogonek,
    KC(24),  KS_o,		KS_O,		KS_oacute,	KS_Oacute,
    KC(30),  KS_a,		KS_A,		KS_L2_aogonek,	KS_L2_Aogonek,
    KC(31),  KS_s,		KS_S,		KS_L2_sacute,	KS_L2_Sacute,
    KC(38),  KS_l,		KS_L,		KS_L2_lstroke,	KS_L2_Lstroke,
    KC(44),  KS_z,		KS_Z,		KS_L2_zdotabove,KS_L2_Zdotabove,
    KC(45),  KS_x,		KS_X,		KS_L2_zacute,	KS_L2_Zacute,
    KC(46),  KS_c,		KS_C,		KS_L2_cacute,	KS_L2_Cacute,
    KC(49),  KS_n,		KS_N,		KS_L2_nacute,	KS_L2_Nacute,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_hu[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(2),   KS_1,		KS_apostrophe,	KS_asciitilde,
    KC(3),   KS_2,		KS_quotedbl,
    KC(4),   KS_3,		KS_plus,	KS_asciicircum,
    KC(5),   KS_4,		KS_exclam,
    KC(6),   KS_5,		KS_percent,
    KC(7),   KS_6,		KS_slash,
    KC(8),   KS_7,		KS_equal,KS_grave,
    KC(9),   KS_8,		KS_parenleft,
    KC(10),  KS_9,		KS_parenright,	KS_acute,
    KC(11),  KS_odiaeresis,	KS_Odiaeresis,
    KC(12),  KS_udiaeresis,	KS_Udiaeresis,
    KC(13),  KS_oacute,		KS_Oacute,
    KC(16),  KS_q,		KS_Q,		KS_backslash,
    KC(17),  KS_w,		KS_W,KS_bar,
    KC(21),  KS_z,		KS_Z,
    KC(23),  KS_i,		KS_I,		KS_iacute,
    KC(26),  KS_odoubleacute,	KS_Odoubleacute,	KS_division,
    KC(27),  KS_uacute,		KS_Uacute,	KS_multiply,
    KC(33),  KS_f,		KS_F,		KS_bracketleft,
    KC(34),  KS_g,		KS_G,		KS_bracketright,
    KC(36),  KS_j,		KS_J,		KS_iacute,
    KC(39),  KS_eacute,		KS_Eacute,	KS_dollar,
    KC(40),  KS_aacute,		KS_Aacute,	KS_ssharp,
    KC(41),  KS_0,		KS_section,
    KC(43),  KS_udoubleacute,	KS_Udoubleacute,	KS_currency,
    KC(44),  KS_y,		KS_Y,		KS_greater,
    KC(45),  KS_x,		KS_X,		KS_numbersign,
    KC(46),  KS_c,		KS_C,		KS_ampersand,
    KC(47),  KS_v,		KS_V,		KS_at,
    KC(48),  KS_b,		KS_B,		KS_braceleft,
    KC(49),  KS_n,		KS_N,		KS_braceright,
    KC(51),  KS_comma,		KS_question,	KS_semicolon,
    KC(52),  KS_period,		KS_colon,
    KC(53),  KS_minus,		KS_underscore,	KS_asterisk,
    KC(86),  KS_iacute,		KS_Iacute,	KS_less,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_si[]=
{
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(2),   KS_1,		KS_exclam,	KS_asciitilde,
    KC(3),   KS_2,		KS_quotedbl,	KS_L2_caron,
    KC(4),   KS_3,		KS_numbersign,	KS_asciicircum,
    KC(5),   KS_4,		KS_dollar,	KS_L2_breve,
    KC(6),   KS_5,		KS_percent,	KS_degree,
    KC(7),   KS_6,		KS_ampersand,	KS_L2_ogonek,
    KC(8),   KS_7,		KS_slash,	KS_grave,
    KC(9),   KS_8,		KS_parenleft,	KS_L2_dotabove,
    KC(10),  KS_9,		KS_parenright,	KS_acute,
    KC(11),  KS_0,		KS_equal,	KS_L2_dblacute,
    KC(12),  KS_apostrophe,	KS_question,	KS_diaeresis,
    KC(13),  KS_plus,		KS_asterisk,	KS_cedilla,
    KC(16),  KS_q,		KS_Q,		KS_backslash,
    KC(17),  KS_w,		KS_W,		KS_bar,
    KC(21),  KS_z,		KS_Z,
    KC(26),  KS_L2_scaron,	KS_L2_Scaron,	KS_division,
    KC(27),  KS_L2_dstroke,	KS_L2_Dstroke,	KS_multiply,
    KC(33),  KS_f,		KS_F,		KS_bracketleft,
    KC(34),  KS_g,		KS_G,		KS_bracketright,
    KC(37),  KS_k,		KS_K,		KS_L2_lstroke,
    KC(38),  KS_l,		KS_L,		KS_L2_Lstroke,
    KC(39),  KS_L2_ccaron,	KS_L2_Ccaron,	
    KC(40),  KS_L2_cacute,	KS_L2_Cacute,	KS_ssharp,
    KC(41),  KS_cedilla,	KS_diaeresis,
    KC(43),  KS_L2_zcaron,	KS_L2_Zcaron,	KS_currency,
    KC(44),  KS_y,		KS_Y,
    KC(47),  KS_v,		KS_V,		KS_at,
    KC(48),  KS_b,		KS_B,		KS_braceleft,
    KC(49),  KS_n,		KS_N,		KS_braceright,
    KC(50),  KS_m,		KS_M,		KS_section,
    KC(51),  KS_comma,		KS_semicolon,	KS_less,
    KC(52),  KS_period,		KS_colon,	KS_greater,
    KC(53),  KS_minus,		KS_underscore,
    KC(86),  KS_less,		KS_greater,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_cf[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
	KC(2),   KS_1,		KS_exclam,	KS_plusminus,
	KC(3), 	 KS_2,		KS_quotedbl,	KS_at,
	KC(4),   KS_3,		KS_slash,	KS_sterling,
	KC(5),   KS_4,		KS_dollar,	KS_cent,
	KC(6),   KS_5,		KS_percent,	KS_diaeresis,
	KC(7),   KS_6,		KS_question,	KS_macron,
	KC(8),   KS_7,		KS_ampersand,	KS_brokenbar,
	KC(9),   KS_8,		KS_asterisk,	KS_twosuperior,
	KC(10),  KS_9,		KS_parenleft,	KS_threesuperior,
	KC(11),  KS_0,		KS_parenright,	KS_onequarter,
	KC(12),  KS_minus,	KS_underscore,	KS_onehalf,
	KC(13),  KS_equal,	KS_plus,	KS_threequarters,
	KC(24),  KS_o,		KS_O,		KS_section,
	KC(25),  KS_p,		KS_P,		KS_paragraph,
	KC(26),  KS_dead_circumflex,KS_dead_circumflex, KS_bracketleft,
	KC(27),  KS_dead_cedilla,KS_dead_diaeresis, KS_bracketright,
	KC(39),  KS_semicolon,	KS_colon,	KS_asciitilde,
	KC(40),  KS_dead_grave,	KS_dead_grave,	KS_braceleft,
	KC(41),  KS_numbersign,	KS_bar,		KS_backslash,
	KC(43),  KS_less,	KS_greater,	KS_braceright,
	KC(50),  KS_m,		KS_M,		KS_mu,
	KC(51),  KS_comma,	KS_apostrophe,	KS_hyphen,
	KC(52),  KS_period,	KS_period,
	KC(53),  KS_eacute,	KS_Eacute,	KS_dead_acute,
	KC(86),  KS_guillemotleft,KS_guillemotright, KS_degree,
	KC(184), KS_Mode_switch,KS_Multi_key,
};

static const keysym_t pckbd_keydesc_cf_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
	KC(26),  KS_asciicircum,KS_asciicircum,	KS_bracketleft,
	KC(27),  KS_cedilla,	KS_diaeresis,	KS_bracketright,
	KC(40),  KS_grave,	KS_grave,	KS_braceleft,
	KC(53),  KS_eacute,	KS_Eacute,	KS_acute,
};

static const keysym_t pckbd_keydesc_lv[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(18),  KS_e,		KS_E,		KS_L7_emacron,	KS_L7_Emacron,
    KC(22),  KS_u,		KS_U,		KS_L7_umacron,	KS_L7_Umacron,
    KC(23),  KS_i,		KS_I,		KS_L7_imacron,	KS_L7_Imacron,
    KC(24),  KS_o,		KS_O,		KS_L7_omacron,	KS_L7_Omacron,
    KC(30),  KS_a,		KS_A,		KS_L7_amacron,	KS_L7_Amacron,
    KC(31),  KS_s,		KS_S,		KS_L7_scaron,	KS_L7_Scaron,
    KC(34),  KS_g,		KS_G,		KS_L7_gcedilla,	KS_L7_Gcedilla,
    KC(37),  KS_k,		KS_K,		KS_L7_kcedilla,	KS_L7_Kcedilla,
    KC(38),  KS_l,		KS_L,		KS_L7_lcedilla,	KS_L7_Lcedilla,
    KC(44),  KS_z,		KS_Z,		KS_L7_zcaron,	KS_L7_Zcaron,
    KC(46),  KS_c,		KS_C,		KS_L7_ccaron,	KS_L7_Ccaron,
    KC(49),  KS_n,		KS_N,		KS_L7_ncedilla,	KS_L7_Ncedilla,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_nl[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(2),   KS_1,		KS_exclam,	KS_onesuperior,
    KC(3),   KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(4),   KS_3,		KS_numbersign,	KS_threesuperior,
    KC(5),   KS_4,		KS_dollar,	KS_onequarter,
    KC(6),   KS_5,		KS_percent,	KS_onehalf,
    KC(7),   KS_6,		KS_ampersand,	KS_threequarters,
    KC(8),   KS_7,		KS_underscore,	KS_sterling,
    KC(9),   KS_8,		KS_parenleft,	KS_braceleft,
    KC(10),  KS_9,		KS_parenright,	KS_braceright,
    KC(11),  KS_0,		KS_apostrophe,
    KC(12),  KS_slash,		KS_question,	KS_backslash,
    KC(13),  KS_degree,		KS_dead_tilde,	KS_dead_cedilla,
    KC(19),  KS_r,		KS_R,		KS_paragraph,
    KC(26),  KS_dead_diaeresis, KS_dead_circumflex,
    KC(27),  KS_asterisk,	KS_bar,
    KC(31),  KS_s,		KS_S,		KS_ssharp,
    KC(39),  KS_plus,		KS_plusminus,
    KC(40),  KS_dead_acute,	KS_dead_grave,
    KC(41),  KS_at,		KS_section,	KS_notsign,
    KC(43),  KS_less,		KS_greater,
    KC(44),  KS_z,		KS_Z,		KS_guillemotleft,
    KC(45),  KS_x,		KS_X,		KS_guillemotright,
    KC(46),  KS_c,		KS_C,		KS_cent,
    KC(50),  KS_m,		KS_M,		KS_mu,
    KC(51),  KS_comma,		KS_semicolon,
    KC(52),  KS_period,		KS_colon,	KS_periodcentered,
    KC(53),  KS_minus,		KS_equal,
    KC(86),  KS_bracketright,	KS_bracketleft,	KS_brokenbar,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_nl_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(13),  KS_degree,		KS_asciitilde,	KS_cedilla,
    KC(26),  KS_quotedbl,	KS_asciicircum,
    KC(40),  KS_apostrophe,	KS_grave,
};

static const keysym_t pckbd_keydesc_is[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(3),   KS_2,		KS_quotedbl,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_slash,	KS_braceleft,
    KC(9),   KS_8,		KS_parenleft,	KS_bracketleft,
    KC(10),  KS_9,		KS_parenright,	KS_bracketright,
    KC(11),  KS_0,		KS_equal,	KS_braceright,
    KC(12),  KS_odiaeresis,	KS_Odiaeresis,	KS_backslash,
    KC(13),  KS_minus,		KS_underscore,
    KC(16),  KS_q,		KS_Q,		KS_at,
    KC(18),  KS_e,		KS_E,
						/* euro currency */
    KC(26),  KS_eth,
    KC(27),  KS_apostrophe,	KS_question,	KS_asciitilde,
    KC(39),  KS_ae,
    KC(40),  KS_dead_acute,	KS_dead_diaeresis, KS_dead_circumflex,
    KC(41),  KS_degree,		KS_diaeresis,
    KC(43),  KS_plus,		KS_asterisk,	KS_grave,
    KC(51),  KS_comma,		KS_semicolon,
    KC(52),  KS_period,		KS_colon,
    KC(53),  KS_thorn,
    KC(86),  KS_less,		KS_greater,	KS_bar,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_is_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(40),  KS_acute,		KS_diaeresis,	KS_asciicircum,
};

static const keysym_t pckbd_keydesc_ee[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(3),   KS_2,		KS_quotedbl,	KS_at,
    KC(4),   KS_3,		KS_numbersign,	KS_sterling,
    KC(5),   KS_4,		KS_currency,	KS_dollar,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_slash,	KS_braceleft,
    KC(9),   KS_8,		KS_parenleft,	KS_bracketleft,
    KC(10),  KS_9,		KS_parenright,	KS_bracketright,
    KC(11),  KS_0,		KS_equal,	KS_braceright,
    KC(12),  KS_plus,		KS_question,	KS_backslash,
    KC(13),  KS_dead_acute,	KS_dead_grave,
    KC(26),  KS_udiaeresis,
    KC(27),  KS_otilde,		KS_Otilde,	KS_section,
    KC(31),  KS_s,		KS_S,		KS_L2_scaron,	KS_L2_Scaron,
    KC(39),  KS_odiaeresis,
    KC(40),  KS_adiaeresis,	KS_Adiaeresis,	KS_dead_circumflex,
    KC(41),  KS_dead_caron,	KS_dead_tilde,
    KC(43),  KS_apostrophe,	KS_asterisk,	KS_onehalf,
    KC(44),  KS_z,		KS_Z,		KS_L2_zcaron,	KS_L2_Zcaron,
    KC(51),  KS_comma,		KS_semicolon,
    KC(52),  KS_period,		KS_colon,
    KC(53),  KS_minus,		KS_underscore,
    KC(86),  KS_less,		KS_greater,	KS_bar,		KS_brokenbar,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_ee_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(13),  KS_apostrophe,	KS_grave,
    KC(40),  KS_adiaeresis,	KS_Adiaeresis,	KS_asciicircum,
    KC(41),  KS_L2_caron,	KS_asciitilde,
};

#endif	/* WSKBD_NO_INTL_LAYOUTS */

#define KBD_MAP(name, base, map) \
			{ name, base, sizeof(map)/sizeof(keysym_t), map }

const struct wscons_keydesc pckbd_keydesctab[] = {
	KBD_MAP(KB_US,			0,	pckbd_keydesc_us),
#if !defined(WSKBD_NO_INTL_LAYOUTS)
	KBD_MAP(KB_DE,			KB_US,	pckbd_keydesc_de),
	KBD_MAP(KB_DE | KB_NODEAD,	KB_DE,	pckbd_keydesc_de_nodead),
	KBD_MAP(KB_FR,			KB_US,	pckbd_keydesc_fr),
	KBD_MAP(KB_FR | KB_DVORAK,	KB_US,	pckbd_keydesc_fr_dvorak_bepo),
	KBD_MAP(KB_DK,			KB_US,	pckbd_keydesc_dk),
	KBD_MAP(KB_DK | KB_NODEAD,	KB_DK,	pckbd_keydesc_dk_nodead),
	KBD_MAP(KB_IT,			KB_US,	pckbd_keydesc_it),
	KBD_MAP(KB_UK,			KB_US,	pckbd_keydesc_uk),
	KBD_MAP(KB_JP,			KB_US,	pckbd_keydesc_jp),
	KBD_MAP(KB_SV,			KB_DK,	pckbd_keydesc_sv),
	KBD_MAP(KB_SV | KB_NODEAD,	KB_SV,	pckbd_keydesc_sv_nodead),
	KBD_MAP(KB_NO,			KB_DK,	pckbd_keydesc_no),
	KBD_MAP(KB_NO | KB_NODEAD,	KB_NO,	pckbd_keydesc_no_nodead),
	KBD_MAP(KB_US | KB_DECLK,	KB_US,	pckbd_keydesc_us_declk),
	KBD_MAP(KB_US | KB_DVORAK,	KB_US,	pckbd_keydesc_us_dvorak),
	KBD_MAP(KB_US | KB_SWAPCTRLCAPS, KB_US,	pckbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_US | KB_IOPENER,	KB_US,	pckbd_keydesc_iopener),
	KBD_MAP(KB_UK | KB_SWAPCTRLCAPS, KB_UK,	pckbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_JP | KB_SWAPCTRLCAPS, KB_JP,	pckbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_FR | KB_SWAPCTRLCAPS, KB_FR,	pckbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_FR | KB_DVORAK | KB_SWAPCTRLCAPS,	KB_FR | KB_DVORAK,
		pckbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_BE | KB_SWAPCTRLCAPS, KB_BE,	pckbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_US | KB_DVORAK | KB_SWAPCTRLCAPS,	KB_US | KB_DVORAK,
		pckbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_US | KB_IOPENER | KB_SWAPCTRLCAPS,	KB_US | KB_IOPENER,
		pckbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_ES,			KB_US,	pckbd_keydesc_es),
	KBD_MAP(KB_BE,			KB_US,	pckbd_keydesc_be),
	KBD_MAP(KB_RU,			KB_US,	pckbd_keydesc_ru),
	KBD_MAP(KB_UA,			KB_US,	pckbd_keydesc_ua),
	KBD_MAP(KB_SG,			KB_US,	pckbd_keydesc_sg),
	KBD_MAP(KB_SG | KB_NODEAD,	KB_SG,	pckbd_keydesc_sg_nodead),
	KBD_MAP(KB_SF,			KB_SG,	pckbd_keydesc_sf),
	KBD_MAP(KB_SF | KB_NODEAD,	KB_SF,	pckbd_keydesc_sg_nodead),
	KBD_MAP(KB_PT,			KB_US,	pckbd_keydesc_pt),
	KBD_MAP(KB_LT,			KB_US,	pckbd_keydesc_lt),
	KBD_MAP(KB_LA,			KB_US,	pckbd_keydesc_la),
	KBD_MAP(KB_BR,			KB_US,	pckbd_keydesc_br),
	KBD_MAP(KB_TR,			KB_US,	pckbd_keydesc_tr),
	KBD_MAP(KB_TR | KB_NODEAD,	KB_TR,	pckbd_keydesc_tr_nodead),
	KBD_MAP(KB_PL,			KB_US,	pckbd_keydesc_pl),
	KBD_MAP(KB_HU,			KB_US,	pckbd_keydesc_hu),
	KBD_MAP(KB_SI,			KB_US,	pckbd_keydesc_si),
	KBD_MAP(KB_CF,			KB_US, 	pckbd_keydesc_cf),
	KBD_MAP(KB_CF | KB_NODEAD,	KB_CF,	pckbd_keydesc_cf_nodead),
	KBD_MAP(KB_LV,			KB_US,	pckbd_keydesc_lv),
	KBD_MAP(KB_NL,			KB_US, 	pckbd_keydesc_nl),
	KBD_MAP(KB_NL | KB_NODEAD,	KB_NL,	pckbd_keydesc_nl_nodead),
	KBD_MAP(KB_IS,			KB_US, 	pckbd_keydesc_is),
	KBD_MAP(KB_IS | KB_NODEAD,	KB_IS, 	pckbd_keydesc_is_nodead),
	KBD_MAP(KB_EE,			KB_US,	pckbd_keydesc_ee),
	KBD_MAP(KB_EE | KB_NODEAD,	KB_EE,	pckbd_keydesc_ee_nodead),
#endif	/* WSKBD_NO_INTL_LAYOUTS */
	{0, 0, 0, 0}
};

#undef KBD_MAP
#undef KC
@


1.44
log
@Estonian keymap

Original diff from Taavi Tani in 2005 (!), adapted to -current by Mart
Tonso.  ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.43 2013/04/14 19:32:52 miod Exp $ */
d7 1
@


1.43
log
@Support for F13-F24 keys found on IBM 122-key keyboards.
From "Creamy" on tech@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.42 2011/04/05 19:12:13 miod Exp $ */
d1074 34
d1167 2
@


1.42
log
@Icelandic keyboard mapping. Commited from an Icelandic keyboard.
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.41 2010/08/28 16:39:18 miod Exp $ */
d133 12
@


1.41
log
@Provide a way to get < and > symbols on 101-key slovenian layouts; from
Zavisa Nikac (firstname dot lastname at inet dot hr)
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.40 2009/12/07 19:22:38 oga Exp $ */
d1031 31
d1119 2
@


1.40
log
@Support uk.swapctrlcaps as a valid keymap.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.39 2008/08/09 16:31:08 miod Exp $ */
d929 2
a930 2
    KC(51),  KS_comma,		KS_semicolon,
    KC(52),  KS_period,		KS_colon,
@


1.39
log
@Add the fr-dvorak-be'po layout as fr.dvorak for ps/2 and usb keyboards.
This is only the simplified layout, which is final; the complete layout with
extra symbols is still being discussed.
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.38 2008/07/30 15:53:31 deraadt Exp $ */
d1056 1
@


1.38
log
@repair comment
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.37 2008/07/16 16:33:18 miod Exp $ */
d294 59
d1042 1
d1058 2
@


1.37
log
@It is no longer necessary to regen gsckbdmap after changing this file.
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.36 2008/06/26 05:42:17 ray Exp $ */
d6 1
a6 1
 	sys/dev/usb/ukbdmap.c
@


1.36
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.35 2008/03/21 17:10:46 miod Exp $ */
d6 1
a6 2
 *	sys/arch/hppa/gsc/gsckbdmap.c
 *	sys/dev/usb/ukbdmap.c
@


1.35
log
@Add option WSKBD_NO_INTL_LAYOUTS to prevent inclusion of international
keyboard layouts, instead of having SMALL_KERNEL imply this on alpha.
No functional change.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.34 2006/12/05 21:27:07 otto Exp $ */
a25 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.34
log
@Add Dutch map; from Maurice Janssen; ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.33 2006/07/20 16:45:05 mickey Exp $ */
d169 1
a169 1
#if !defined(SMALL_KERNEL) || !defined(__alpha__)
d980 1
a980 1
#endif	/* SMALL_KERNEL */
d987 1
a987 1
#if !defined(SMALL_KERNEL) || !defined(__alpha__)
d1033 1
a1033 1
#endif	/* SMALL_KERNEL */
@


1.33
log
@a couple fixes in the lv map; from Martynas Venckus
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.32 2006/07/20 10:44:40 mickey Exp $ */
d940 40
d1031 2
@


1.32
log
@latvian kbd map; from Martynas Venckus <lab@@plius.net>
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.31 2006/05/29 20:23:13 miod Exp $ */
d925 13
a937 13
	KC(18),	KS_e,		KS_E,		KS_L7_emacron,KS_L7_Emacron,
	KC(22),	KS_u,		KS_U,		KS_L7_umacron,KS_L7_Umacron,
	KC(23),	KS_i,		KS_I,		KS_L7_imacron,KS_L7_Imacron,
	KC(30),	KS_a,		KS_A,		KS_L7_amacron,KS_L7_Amacron,
	KC(31),	KS_s,		KS_S,		KS_L7_scaron,KS_L7_Scaron,
	KC(34),	KS_g,		KS_G,		KS_L7_gcedilla,KS_L7_Gcedilla,
	KC(44),	KS_z,		KS_Z,		KS_L7_zcaron,KS_L7_Zcaron,
	KC(46),	KS_c,		KS_C,		KS_L7_ccaron,KS_L7_Ccaron,
	KC(37),	KS_k,		KS_K,		KS_L7_kcedilla,KS_L7_Kcedilla,
	KC(39),	KS_l,		KS_L,		KS_L7_lcedilla,KS_L7_Lcedilla,
	KC(49),	KS_n,		KS_N,		KS_L7_ncedilla,KS_L7_Ncedilla,
	KC(184),KS_Mode_switch,	KS_Multi_key,
	KC(41),	KS_Mode_switch,	KS_Multi_key,	KS_Mode_switch,	KS_Multi_key,
@


1.31
log
@Add support for the audio volume keys found on many laptops' builtin
keyboard. These specific keys are posted to a kernel thread which will
issue mixer commands if an audio device exists.

Written by Alexey Vatchenko <avv , mail zp ua> with tweaks by deraadt@@ and I.
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.30 2005/05/09 05:08:57 miod Exp $ */
d923 17
d990 1
@


1.30
log
@Add a note reminding people to regen gsc and usb maps after changing this file.
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.29 2005/05/06 17:51:41 mickey Exp $ */
d144 1
d146 2
@


1.29
log
@never trust a user diff...
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.28 2005/05/06 17:40:32 mickey Exp $ */
d3 7
@


1.28
log
@french a canadian; form Arnaud Bergeron <abergeron@@gmail.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.27 2005/05/04 18:00:30 miod Exp $ */
d877 34
a910 34
	KC(2),   KS_1,      KS_exclam,  KS_plusminus,
	KC(3), 	 KS_2,		KS_quotedbl,    KS_at,
	KC(4),   KS_3,      KS_slash,   KS_sterling,
	KC(5),   KS_4,      KS_dollar,  KS_cent,
	KC(6),   KS_5,      KS_percent, KS_diaeresis,
	KC(7),   KS_6,      KS_question,    KS_macron,
	KC(8),   KS_7,      KS_ampersand,   KS_brokenbar,
	KC(9),   KS_8,      KS_asterisk,    KS_twosuperior,
	KC(10),  KS_9,      KS_parenleft,   KS_threesuperior,
	KC(11),  KS_0,      KS_parenright,  KS_onequarter,
	KC(12),  KS_minus,  KS_underscore,  KS_onehalf,
	KC(13),  KS_equal,  KS_plus,    KS_threequarters,
	KC(24),  KS_o,      KS_O,       KS_section,
	KC(25),  KS_p,      KS_P,       KS_paragraph,
	KC(26),  KS_dead_circumflex,    KS_dead_circumflex, KS_bracketleft,
	KC(27),  KS_dead_cedilla,   KS_dead_diaeresis,   KS_bracketright,
	KC(39),  KS_semicolon,  KS_colon,   KS_asciitilde,
	KC(40),  KS_dead_grave, KS_dead_grave,  KS_braceleft,
	KC(41),  KS_numbersign, KS_bar,     KS_backslash,
	KC(43),  KS_less,   KS_greater, KS_braceright,
	KC(50),  KS_m,      KS_M,       KS_mu,
	KC(51),  KS_comma,  KS_apostrophe,  KS_hyphen,
	KC(52),  KS_period, KS_period,
	KC(53),  KS_eacute, KS_Eacute,  KS_dead_acute,
	KC(86),  KS_guillemotleft,  KS_guillemotright, KS_degree,
	KC(184), KS_Mode_switch,	KS_Multi_key,
};

const struct keysym_t pckbd_keydesc_cf_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
	KC(26),  KS_circumflex,    KS_circumflex, KS_bracketleft,
	KC(27),  KS_cedilla,   KS_diaeresis,   KS_bracketright,
	KC(40),  KS_grave, KS_grave,  KS_braceleft,
	KC(53),  KS_eacute, KS_Eacute,  KS_acute,
@


1.27
log
@Remove duplicate 4/$ entries in non-US layouts where the key is the same.
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.26 2005/02/22 19:41:44 mickey Exp $ */
d875 38
d961 2
@


1.26
log
@sv map fix; from Jan Johansson <janj+openbsd@@wenf.org>
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.25 2004/07/26 14:05:59 miod Exp $ */
a295 1
    KC(5),   KS_4,		KS_dollar,
a678 1
    KC(5),   KS_4,		KS_dollar,
a703 1
    KC(5),   KS_4,		KS_dollar,
@


1.25
log
@Minor glitches in the belgium keyboard layout; reported by Richard Ben Aleya.
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.24 2004/07/09 19:07:45 miod Exp $ */
d233 1
a233 1
    KC(41),  KS_paragraph,	KS_onehalf,
@


1.24
log
@Do not compile non-us keyboard tables on alpha if SMALL_KERNEL, as an
expedient to s(h)ave more bytes on the installation media.

Prompted by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.23 2004/03/16 07:50:26 miod Exp $ */
d426 1
a426 1
    KC(7),   KS_currency,	KS_6,		KS_asciicircum,
d439 2
a440 2
    KC(40),  KS_ugrave,		KS_percent,	KS_section,
    KC(41),  KS_twosuperior,
@


1.23
log
@Slovenian keymap, contributed by Jernej Kovacic (jkovacic, email dot si).
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.22 2003/09/25 23:38:23 mickey Exp $ */
d159 2
d878 2
d885 1
d926 1
@


1.22
log
@hungarian keymap; from thuglife@@bsd.hu
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.21 2003/01/04 13:40:08 maja Exp $ */
d836 40
d883 1
a883 1
	KBD_MAP(KB_FR,			KB_US,  pckbd_keydesc_fr),
d896 4
a899 4
	KBD_MAP(KB_US | KB_IOPENER, KB_US,	pckbd_keydesc_iopener),
	KBD_MAP(KB_JP | KB_SWAPCTRLCAPS, KB_JP, pckbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_FR | KB_SWAPCTRLCAPS, KB_FR, pckbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_BE | KB_SWAPCTRLCAPS, KB_BE, pckbd_keydesc_swapctrlcaps),
d920 1
@


1.21
log
@Add support for polish keyboard from Kamil Andrusz wizz at mniam dot net.
Replaced some Latin 1 symbols with Latin 2. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.20 2003/01/04 13:24:31 maja Exp $ */
d796 40
d879 1
@


1.20
log
@Add support for turkish keyboard from Berk Demir bdd at ieee dot org.
Replaced some Latin 1 symbols with Latin 5. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.19 2002/06/29 15:21:48 maja Exp $ */
d782 14
d838 1
@


1.19
log
@Add Brazilian keymap (iso275). Create by me and tested by
gustavo.rios@@transport.alstom.com. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.18 2002/06/29 14:51:24 maja Exp $ */
d747 35
d822 2
@


1.18
log
@Latinamerica keymap from Gerardo Santana Gomez Garrido <santana@@openbsd.org.mx>.
-moj
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.17 2002/04/22 07:44:16 mickey Exp $ */
d726 21
d786 1
@


1.17
log
@even better lt kbd map (in the best .su tradition ); from vld@@vic.lt
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.16 2002/04/09 19:07:14 mickey Exp $ */
d699 27
d764 1
@


1.16
log
@better lt keymap (in the best .su tradition); from Vladis Adler <vld@@vic.lt>
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.15 2002/04/04 21:24:33 mickey Exp $ */
d50 12
a61 12
    KC(2),  			KS_1,		KS_exclam,
    KC(3),  			KS_2,		KS_at,
    KC(4),  			KS_3,		KS_numbersign,
    KC(5),  			KS_4,		KS_dollar,
    KC(6),  			KS_5,		KS_percent,
    KC(7),  			KS_6,		KS_asciicircum,
    KC(8),  			KS_7,		KS_ampersand,
    KC(9),  			KS_8,		KS_asterisk,
    KC(10), 			KS_9,		KS_parenleft,
    KC(11), 			KS_0,		KS_parenright,
    KC(12), 			KS_minus,	KS_underscore,
    KC(13), 			KS_equal,	KS_plus,
d63 14
a76 14
    KC(15), 			KS_Tab,
    KC(16), 			KS_q,
    KC(17), 			KS_w,
    KC(18), 			KS_e,
    KC(19), 			KS_r,
    KC(20), 			KS_t,
    KC(21), 			KS_y,
    KC(22), 			KS_u,
    KC(23), 			KS_i,
    KC(24), 			KS_o,
    KC(25), 			KS_p,
    KC(26), 			KS_bracketleft,	KS_braceleft,
    KC(27), 			KS_bracketright, KS_braceright,
    KC(28), 			KS_Return,
d78 26
a103 26
    KC(30), 			KS_a,
    KC(31), 			KS_s,
    KC(32), 			KS_d,
    KC(33), 			KS_f,
    KC(34), 			KS_g,
    KC(35), 			KS_h,
    KC(36), 			KS_j,
    KC(37), 			KS_k,
    KC(38), 			KS_l,
    KC(39), 			KS_semicolon,	KS_colon,
    KC(40), 			KS_apostrophe,	KS_quotedbl,
    KC(41), 			KS_grave,	KS_asciitilde,
    KC(42), 			KS_Shift_L,
    KC(43), 			KS_backslash,	KS_bar,
    KC(44), 			KS_z,
    KC(45), 			KS_x,
    KC(46), 			KS_c,
    KC(47), 			KS_v,
    KC(48), 			KS_b,
    KC(49), 			KS_n,
    KC(50), 			KS_m,
    KC(51), 			KS_comma,	KS_less,
    KC(52), 			KS_period,	KS_greater,
    KC(53), 			KS_slash,	KS_question,
    KC(54), 			KS_Shift_R,
    KC(55), 			KS_KP_Multiply,
d105 2
a106 2
    KC(57), 			KS_space,
    KC(58), 			KS_Caps_Lock,
d117 15
a131 15
    KC(69), 			KS_Num_Lock,
    KC(70), 			KS_Hold_Screen,
    KC(71), 			KS_KP_Home,	KS_KP_7,
    KC(72), 			KS_KP_Up,	KS_KP_8,
    KC(73), 			KS_KP_Prior,	KS_KP_9,
    KC(74), 			KS_KP_Subtract,
    KC(75), 			KS_KP_Left,	KS_KP_4,
    KC(76), 			KS_KP_Begin,	KS_KP_5,
    KC(77), 			KS_KP_Right,	KS_KP_6,
    KC(78), 			KS_KP_Add,
    KC(79), 			KS_KP_End,	KS_KP_1,
    KC(80), 			KS_KP_Down,	KS_KP_2,
    KC(81), 			KS_KP_Next,	KS_KP_3,
    KC(82), 			KS_KP_Insert,	KS_KP_0,
    KC(83), 			KS_KP_Delete,	KS_KP_Decimal,
d274 1
a274 1
    KC(26),  KS_dead_circumflex, KS_dead_diaeresis, 
d292 9
a300 9
    KC(3),   KS_2,	    	KS_quotedbl,	KS_twosuperior,
    KC(4),   KS_3,	    	KS_sterling,	KS_threesuperior,
    KC(5),   KS_4,	    	KS_dollar,
    KC(6),   KS_5,	    	KS_percent,
    KC(7),   KS_6,	    	KS_ampersand,
    KC(8),   KS_7,	    	KS_slash,
    KC(9),   KS_8,	    	KS_parenleft,
    KC(10),  KS_9,	    	KS_parenright,
    KC(11),  KS_0,	    	KS_equal,
d302 1
a302 1
    KC(13),  KS_igrave,	    	KS_asciicircum,
d317 17
a333 17
/*  pos      normal             shifted         altgr           shift-altgr */
    KC(2),   KS_1,              KS_exclam,      KS_plusminus,   KS_exclamdown,
    KC(3),   KS_2,              KS_quotedbl,    KS_twosuperior, KS_cent,
    KC(4),   KS_3,              KS_sterling,    KS_threesuperior,
    KC(5),   KS_4,              KS_dollar,      KS_acute,       KS_currency,
    KC(6),   KS_5,              KS_percent,     KS_mu,          KS_yen,
    KC(7),   KS_6,              KS_asciicircum, KS_paragraph,
    KC(8),   KS_7,              KS_ampersand,   KS_periodcentered, KS_brokenbar,
    KC(9),   KS_8,              KS_asterisk,    KS_cedilla,     KS_ordfeminine,
    KC(10),  KS_9,              KS_parenleft,   KS_onesuperior, KS_diaeresis,
    KC(11),  KS_0,              KS_parenright,  KS_masculine,   KS_copyright,
    KC(12),  KS_minus,          KS_underscore,  KS_hyphen,      KS_ssharp,
    KC(13),  KS_equal,          KS_plus,        KS_onehalf,    KS_guillemotleft,
    KC(40),  KS_apostrophe,     KS_at,          KS_section,     KS_Agrave,
    KC(41),  KS_grave,          KS_grave,       KS_agrave,      KS_agrave,
    KC(43),  KS_numbersign,     KS_asciitilde,  KS_sterling,    KS_thorn,
    KC(86),  KS_backslash,      KS_bar,         KS_Udiaeresis,
d338 5
a342 5
    KC(3),   KS_2,              KS_quotedbl,
    KC(7),   KS_6,              KS_ampersand,
    KC(8),   KS_7,              KS_apostrophe,
    KC(9),   KS_8,              KS_parenleft,
    KC(10),  KS_9,              KS_parenright,
d344 6
a349 6
    KC(12),  KS_minus,          KS_equal,
    KC(13),  KS_asciicircum,    KS_asciitilde,
    KC(26),  KS_at,             KS_grave,
    KC(27),  KS_bracketleft,    KS_braceleft,
    KC(39),  KS_semicolon,      KS_plus,
    KC(40),  KS_colon,          KS_asterisk,
d351 1
a351 1
    KC(43),  KS_bracketright,   KS_braceright,
d353 1
a353 1
    KC(115), KS_backslash,      KS_underscore,
d356 1
a356 1
    KC(125), KS_backslash,      KS_bar,
d387 27
a413 9
    KC(2),   KS_1,		KS_exclam,	KS_L7_aogonek,	KS_L7_Aogonek,
    KC(3),   KS_2,		KS_at,		KS_L7_ccaron,	KS_L7_Ccaron,
    KC(4),   KS_3,		KS_numbersign,	KS_L7_eogonek,	KS_L7_Eogonek,
    KC(5),   KS_4,		KS_dollar,	KS_L7_edot,	KS_L7_Edot,
    KC(6),   KS_5,		KS_percent,	KS_L7_iogonek,	KS_L7_Iogonek,
    KC(7),   KS_6,		KS_asciicircum,	KS_L7_scaron,	KS_L7_Scaron,
    KC(8),   KS_7,		KS_ampersand,	KS_L7_uogonek,	KS_L7_Uogonek,
    KC(9),   KS_8,		KS_asterisk,	KS_L7_umacron,	KS_L7_Umacron,
    KC(13),  KS_equal,		KS_plus,	KS_L7_zcaron,	KS_L7_Zcaron,
d470 11
a480 11
    KC(71), 	KS_KP_7,
    KC(72), 	KS_KP_8,
    KC(73), 	KS_KP_9,
    KC(75), 	KS_KP_4,
    KC(76), 	KS_KP_5,
    KC(77), 	KS_KP_6,
    KC(79), 	KS_KP_1,
    KC(80), 	KS_KP_2,
    KC(81), 	KS_KP_3,
    KC(82), 	KS_KP_0,
    KC(83), 	KS_KP_Decimal,
d490 33
a522 33
    KC(12), 			KS_bracketleft,	KS_braceleft,
    KC(13), 			KS_bracketright, KS_braceright,
    KC(16), 			KS_apostrophe, KS_quotedbl,
    KC(17), 			KS_comma, KS_less,
    KC(18), 			KS_period, KS_greater,
    KC(19), 			KS_p,
    KC(20), 			KS_y,
    KC(21), 			KS_f,
    KC(22), 			KS_g,
    KC(23), 			KS_c,
    KC(24), 			KS_r,
    KC(25), 			KS_l,
    KC(26), 			KS_slash, KS_question,
    KC(27), 			KS_equal, KS_plus,
    KC(31), 			KS_o,
    KC(32), 			KS_e,
    KC(33), 			KS_u,
    KC(34), 			KS_i,
    KC(35), 			KS_d,
    KC(36), 			KS_h,
    KC(37), 			KS_t,
    KC(38), 			KS_n,
    KC(39), 			KS_s,
    KC(40), 			KS_minus, KS_underscore,
    KC(44), 			KS_semicolon, KS_colon,
    KC(45), 			KS_q,
    KC(46), 			KS_j,
    KC(47), 			KS_k,
    KC(48), 			KS_x,
    KC(49), 			KS_b,
    KC(51), 			KS_w,
    KC(52), 			KS_v,
    KC(53), 			KS_z,
d527 1
a527 1
    KC(29), 			KS_Caps_Lock,
d544 1
a544 1
    KC(88), 			KS_f11,
d668 4
a671 4
/*  pos      normal            shifted         altgr           shift-altgr */
    KC(26),  KS_egrave,        KS_udiaeresis,  KS_bracketleft,
    KC(39),  KS_eacute,        KS_odiaeresis,
    KC(40),  KS_agrave,        KS_adiaeresis,  KS_braceleft
d675 22
a696 22
/*  pos      normal            shifted         altgr           shift-altgr */
    KC(3),   KS_2,             KS_quotedbl,    KS_at,
    KC(4),   KS_3,             KS_numbersign,  KS_sterling,
    KC(5),   KS_4,             KS_dollar,
    KC(7),   KS_6,             KS_ampersand,
    KC(8),   KS_7,             KS_slash,       KS_braceleft,
    KC(9),   KS_8,             KS_parenleft,   KS_bracketleft,
    KC(10),  KS_9,             KS_parenright,  KS_bracketright,
    KC(11),  KS_0,             KS_equal,       KS_braceright,
    KC(12),  KS_apostrophe,    KS_question,
    KC(13),  KS_less,          KS_greater,
    KC(26),  KS_plus,          KS_asterisk,
    KC(27),  KS_dead_acute,    KS_dead_grave,
    KC(39),  KS_ccedilla,      KS_Ccedilla,
    KC(40),  KS_masculine,     KS_ordfeminine,
    KC(41),  KS_backslash,     KS_bar,
    KC(43),  KS_dead_tilde,    KS_dead_circumflex,
    KC(51),  KS_comma,         KS_semicolon,
    KC(52),  KS_period,        KS_colon,
    KC(53),  KS_minus,         KS_underscore,
    KC(86),  KS_less,          KS_greater,
    KC(184), KS_Mode_switch,   KS_Multi_key,
d706 1
a706 1
	KBD_MAP(KB_FR,                  KB_US,  pckbd_keydesc_fr),
@


1.15
log
@lithuanian kbdmap, made from the script at http://open.bsd.lt
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.14 2001/10/25 15:42:43 mickey Exp $ */
d387 9
a395 9
    KC(2),   KS_1,		KS_exclam,	KS_agrave,	KS_Agrave,
    KC(3),   KS_2,		KS_at,		KS_egrave,	KS_Egrave,
    KC(3),   KS_2,		KS_numbersign,	KS_ae,		KS_AE,
    KC(3),   KS_2,		KS_dollar,	KS_ediaeresis,	KS_Ediaeresis,
    KC(3),   KS_2,		KS_percent,	KS_aacute,	KS_Aacute,
    KC(3),   KS_2,		KS_asciicircum,	KS_eth,		KS_ETH,
    KC(3),   KS_2,		KS_ampersand,	KS_oslash,	KS_Ooblique,
    KC(3),   KS_2,		KS_asterisk,	KS_ucircumflex,	KS_Ucircumflex,
    KC(13),  KS_equal,		KS_plus,	KS_thorn,	KS_THORN,
@


1.14
log
@darkblack@@networking-center.org says it should be apostrophe instead of grave in the _es map
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.13 2001/10/04 23:23:46 mickey Exp $ */
d385 14
d718 1
@


1.14.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.14 2001/10/25 15:42:43 mickey Exp $ */
d50 12
a61 12
    KC(2),			KS_1,		KS_exclam,
    KC(3),			KS_2,		KS_at,
    KC(4),			KS_3,		KS_numbersign,
    KC(5),			KS_4,		KS_dollar,
    KC(6),			KS_5,		KS_percent,
    KC(7),			KS_6,		KS_asciicircum,
    KC(8),			KS_7,		KS_ampersand,
    KC(9),			KS_8,		KS_asterisk,
    KC(10),			KS_9,		KS_parenleft,
    KC(11),			KS_0,		KS_parenright,
    KC(12),			KS_minus,	KS_underscore,
    KC(13),			KS_equal,	KS_plus,
d63 14
a76 14
    KC(15),			KS_Tab,
    KC(16),			KS_q,
    KC(17),			KS_w,
    KC(18),			KS_e,
    KC(19),			KS_r,
    KC(20),			KS_t,
    KC(21),			KS_y,
    KC(22),			KS_u,
    KC(23),			KS_i,
    KC(24),			KS_o,
    KC(25),			KS_p,
    KC(26),			KS_bracketleft,	KS_braceleft,
    KC(27),			KS_bracketright, KS_braceright,
    KC(28),			KS_Return,
d78 26
a103 26
    KC(30),			KS_a,
    KC(31),			KS_s,
    KC(32),			KS_d,
    KC(33),			KS_f,
    KC(34),			KS_g,
    KC(35),			KS_h,
    KC(36),			KS_j,
    KC(37),			KS_k,
    KC(38),			KS_l,
    KC(39),			KS_semicolon,	KS_colon,
    KC(40),			KS_apostrophe,	KS_quotedbl,
    KC(41),			KS_grave,	KS_asciitilde,
    KC(42),			KS_Shift_L,
    KC(43),			KS_backslash,	KS_bar,
    KC(44),			KS_z,
    KC(45),			KS_x,
    KC(46),			KS_c,
    KC(47),			KS_v,
    KC(48),			KS_b,
    KC(49),			KS_n,
    KC(50),			KS_m,
    KC(51),			KS_comma,	KS_less,
    KC(52),			KS_period,	KS_greater,
    KC(53),			KS_slash,	KS_question,
    KC(54),			KS_Shift_R,
    KC(55),			KS_KP_Multiply,
d105 2
a106 2
    KC(57),			KS_space,
    KC(58),			KS_Caps_Lock,
d117 15
a131 15
    KC(69),			KS_Num_Lock,
    KC(70),			KS_Hold_Screen,
    KC(71),			KS_KP_Home,	KS_KP_7,
    KC(72),			KS_KP_Up,	KS_KP_8,
    KC(73),			KS_KP_Prior,	KS_KP_9,
    KC(74),			KS_KP_Subtract,
    KC(75),			KS_KP_Left,	KS_KP_4,
    KC(76),			KS_KP_Begin,	KS_KP_5,
    KC(77),			KS_KP_Right,	KS_KP_6,
    KC(78),			KS_KP_Add,
    KC(79),			KS_KP_End,	KS_KP_1,
    KC(80),			KS_KP_Down,	KS_KP_2,
    KC(81),			KS_KP_Next,	KS_KP_3,
    KC(82),			KS_KP_Insert,	KS_KP_0,
    KC(83),			KS_KP_Delete,	KS_KP_Decimal,
d274 1
a274 1
    KC(26),  KS_dead_circumflex, KS_dead_diaeresis,
d292 9
a300 9
    KC(3),   KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(4),   KS_3,		KS_sterling,	KS_threesuperior,
    KC(5),   KS_4,		KS_dollar,
    KC(6),   KS_5,		KS_percent,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_slash,
    KC(9),   KS_8,		KS_parenleft,
    KC(10),  KS_9,		KS_parenright,
    KC(11),  KS_0,		KS_equal,
d302 1
a302 1
    KC(13),  KS_igrave,		KS_asciicircum,
d317 17
a333 17
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(2),   KS_1,		KS_exclam,	KS_plusminus,	KS_exclamdown,
    KC(3),   KS_2,		KS_quotedbl,	KS_twosuperior,	KS_cent,
    KC(4),   KS_3,		KS_sterling,	KS_threesuperior,
    KC(5),   KS_4,		KS_dollar,	KS_acute,	KS_currency,
    KC(6),   KS_5,		KS_percent,	KS_mu,		KS_yen,
    KC(7),   KS_6,		KS_asciicircum,	KS_paragraph,
    KC(8),   KS_7,		KS_ampersand,	KS_periodcentered, KS_brokenbar,
    KC(9),   KS_8,		KS_asterisk,	KS_cedilla,	KS_ordfeminine,
    KC(10),  KS_9,		KS_parenleft,	KS_onesuperior,	KS_diaeresis,
    KC(11),  KS_0,		KS_parenright,	KS_masculine,	KS_copyright,
    KC(12),  KS_minus,		KS_underscore,	KS_hyphen,	KS_ssharp,
    KC(13),  KS_equal,		KS_plus,	KS_onehalf,    KS_guillemotleft,
    KC(40),  KS_apostrophe,	KS_at,		KS_section,	KS_Agrave,
    KC(41),  KS_grave,		KS_grave,	KS_agrave,	KS_agrave,
    KC(43),  KS_numbersign,	KS_asciitilde,  KS_sterling,	KS_thorn,
    KC(86),  KS_backslash,	KS_bar,		KS_Udiaeresis,
d338 5
a342 5
    KC(3),   KS_2,		KS_quotedbl,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_apostrophe,
    KC(9),   KS_8,		KS_parenleft,
    KC(10),  KS_9,		KS_parenright,
d344 6
a349 6
    KC(12),  KS_minus,		KS_equal,
    KC(13),  KS_asciicircum,	KS_asciitilde,
    KC(26),  KS_at,		KS_grave,
    KC(27),  KS_bracketleft,	KS_braceleft,
    KC(39),  KS_semicolon,	KS_plus,
    KC(40),  KS_colon,		KS_asterisk,
d351 1
a351 1
    KC(43),  KS_bracketright,	KS_braceright,
d353 1
a353 1
    KC(115), KS_backslash,	KS_underscore,
d356 1
a356 1
    KC(125), KS_backslash,	KS_bar,
a384 32
static const keysym_t pckbd_keydesc_lt[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(2),   KS_exclam,		KS_1,		KS_at,
    KC(3),   KS_minus,		KS_2,		KS_underscore,
    KC(4),   KS_slash,		KS_3,		KS_numbersign,
    KC(5),   KS_semicolon,	KS_4,		KS_dollar,
    KC(6),   KS_colon,		KS_5,		KS_paragraph,
    KC(7),   KS_comma,		KS_6,		KS_asciicircum,
    KC(8),   KS_period,		KS_7,		KS_ampersand,
    KC(9),   KS_equal,		KS_8,		KS_asterisk,
    KC(10),  KS_bracketleft,	KS_9,		KS_parenleft,
    KC(11),  KS_bracketright,	KS_0,		KS_parenright,
    KC(12),  KS_question,	KS_plus,	KS_apostrophe,
    KC(13),  KS_x,		KS_X,		KS_percent,
    KC(16),  KS_L7_aogonek,	KS_L7_Aogonek,
    KC(17),  KS_L7_zcaron,	KS_L7_Zcaron,
    KC(18),  KS_e,		KS_E,		KS_currency,
    KC(26),  KS_L7_iogonek,	KS_L7_Iogonek,	KS_braceleft,
    KC(27),  KS_w,		KS_W,		KS_braceright,
    KC(33),  KS_L7_scaron,	KS_L7_Scaron,
    KC(39),  KS_L7_uogonek,	KS_L7_Uogonek,
    KC(40),  KS_L7_edot,	KS_L7_Edot,	KS_quotedbl,
    KC(41),  KS_grave,		KS_asciitilde,
    KC(43),  KS_q,		KS_Q,		KS_bar,
    KC(45),  KS_L7_umacron,	KS_L7_Umacron,
    KC(51),  KS_L7_ccaron,	KS_L7_Ccaron,	KS_L7_dbllow9quot,
    KC(52),  KS_f,		KS_F,		KS_L7_leftdblquot,
    KC(53),  KS_L7_eogonek,	KS_L7_Eogonek,	KS_backslash,
    KC(57),  KS_space,		KS_space,	KS_nobreakspace,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

d438 11
a448 11
    KC(71),	KS_KP_7,
    KC(72),	KS_KP_8,
    KC(73),	KS_KP_9,
    KC(75),	KS_KP_4,
    KC(76),	KS_KP_5,
    KC(77),	KS_KP_6,
    KC(79),	KS_KP_1,
    KC(80),	KS_KP_2,
    KC(81),	KS_KP_3,
    KC(82),	KS_KP_0,
    KC(83),	KS_KP_Decimal,
d458 33
a490 33
    KC(12),			KS_bracketleft,	KS_braceleft,
    KC(13),			KS_bracketright, KS_braceright,
    KC(16),			KS_apostrophe, KS_quotedbl,
    KC(17),			KS_comma, KS_less,
    KC(18),			KS_period, KS_greater,
    KC(19),			KS_p,
    KC(20),			KS_y,
    KC(21),			KS_f,
    KC(22),			KS_g,
    KC(23),			KS_c,
    KC(24),			KS_r,
    KC(25),			KS_l,
    KC(26),			KS_slash, KS_question,
    KC(27),			KS_equal, KS_plus,
    KC(31),			KS_o,
    KC(32),			KS_e,
    KC(33),			KS_u,
    KC(34),			KS_i,
    KC(35),			KS_d,
    KC(36),			KS_h,
    KC(37),			KS_t,
    KC(38),			KS_n,
    KC(39),			KS_s,
    KC(40),			KS_minus, KS_underscore,
    KC(44),			KS_semicolon, KS_colon,
    KC(45),			KS_q,
    KC(46),			KS_j,
    KC(47),			KS_k,
    KC(48),			KS_x,
    KC(49),			KS_b,
    KC(51),			KS_w,
    KC(52),			KS_v,
    KC(53),			KS_z,
d495 1
a495 1
    KC(29),			KS_Caps_Lock,
d512 1
a512 1
    KC(88),			KS_f11,
d636 4
a639 4
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(26),  KS_egrave,		KS_udiaeresis,	KS_bracketleft,
    KC(39),  KS_eacute,		KS_odiaeresis,
    KC(40),  KS_agrave,		KS_adiaeresis,	KS_braceleft
d643 22
a664 22
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(3),   KS_2,		KS_quotedbl,	KS_at,
    KC(4),   KS_3,		KS_numbersign,	KS_sterling,
    KC(5),   KS_4,		KS_dollar,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_slash,	KS_braceleft,
    KC(9),   KS_8,		KS_parenleft,	KS_bracketleft,
    KC(10),  KS_9,		KS_parenright,	KS_bracketright,
    KC(11),  KS_0,		KS_equal,	KS_braceright,
    KC(12),  KS_apostrophe,	KS_question,
    KC(13),  KS_less,		KS_greater,
    KC(26),  KS_plus,		KS_asterisk,
    KC(27),  KS_dead_acute,	KS_dead_grave,
    KC(39),  KS_ccedilla,	KS_Ccedilla,
    KC(40),  KS_masculine,	KS_ordfeminine,
    KC(41),  KS_backslash,	KS_bar,
    KC(43),  KS_dead_tilde,	KS_dead_circumflex,
    KC(51),  KS_comma,		KS_semicolon,
    KC(52),  KS_period,		KS_colon,
    KC(53),  KS_minus,		KS_underscore,
    KC(86),  KS_less,		KS_greater,
    KC(184), KS_Mode_switch,	KS_Multi_key,
d674 1
a674 1
	KBD_MAP(KB_FR,			KB_US,  pckbd_keydesc_fr),
a703 1
	KBD_MAP(KB_LT,			KB_US,	pckbd_keydesc_lt),
@


1.14.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.14.2.1 2002/06/11 03:42:27 art Exp $ */
a698 48
static const keysym_t pckbd_keydesc_la[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(2),   KS_1,		KS_exclam,
    KC(3),   KS_2,		KS_quotedbl,
    KC(4),   KS_3,		KS_numbersign,
    KC(5),   KS_4,		KS_dollar,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_slash,
    KC(9),   KS_8,		KS_parenleft,
    KC(10),  KS_9,		KS_parenright,
    KC(11),  KS_0,		KS_equal,
    KC(12),  KS_apostrophe,	KS_question,	KS_backslash,
    KC(13),  KS_questiondown,	KS_exclamdown,
    KC(16),  KS_q,		KS_Q,		KS_at,
    KC(26),  KS_dead_acute,	KS_dead_diaeresis,
    KC(27),  KS_plus,		KS_asterisk,	KS_asciitilde,
    KC(39),  KS_ntilde,
    KC(40),  KS_braceleft,	KS_bracketleft,	KS_dead_circumflex,
    KC(41),  KS_bar,		KS_degree,	KS_notsign,
    KC(43),  KS_braceright,	KS_bracketright,KS_dead_grave,
    KC(51),  KS_comma,		KS_semicolon,
    KC(52),  KS_period,		KS_colon,
    KC(53),  KS_minus,		KS_underscore,
    KC(86),  KS_less,		KS_greater,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_br[] = {
/*  pos      normal		shifted         altgr           shift-altgr */
    KC(2),   KS_1,		KS_exclam,	KS_onesuperior,
    KC(3),   KS_2,		KS_at,		KS_twosuperior,
    KC(4),   KS_3,		KS_numbersign,	KS_threesuperior,
    KC(5),   KS_4,		KS_dollar,	KS_sterling,
    KC(6),   KS_5,		KS_percent,	KS_cent,
    KC(7),   KS_6,		KS_dead_diaeresis,	KS_notsign,
    KC(13),  KS_equal,		KS_plus,	KS_section,
    KC(26),  KS_dead_acute,	KS_dead_grave,
    KC(27),  KS_bracketleft,	KS_braceleft,	KS_ordfeminine,
    KC(39),  KS_ccedilla,	KS_Ccedilla,
    KC(40),  KS_dead_tilde,	KS_dead_circumflex,
    KC(41),  KS_apostrophe,	KS_quotedbl,
    KC(43),  KS_bracketright,	KS_braceright,	KS_masculine,
    KC(53),  KS_semicolon,	KS_colon,
    KC(83),  KS_KP_Delete,	KS_KP_Decimal,
    KC(86),  KS_backslash,	KS_bar,
    KC(115), KS_slash,		KS_question,	KS_degree,
};

a736 2
	KBD_MAP(KB_LA,			KB_US,	pckbd_keydesc_la),
	KBD_MAP(KB_BR,			KB_US,	pckbd_keydesc_br),
@


1.14.2.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a746 49
static const keysym_t pckbd_keydesc_tr[] = {
/*  pos      normal		shifted         altgr           shift-altgr */
    KC(3),   KS_2,		KS_apostrophe,	KS_sterling,
    KC(4),   KS_3,		KS_asciicircum,	KS_numbersign,
    KC(5),   KS_4,		KS_plus,	KS_dollar,
    KC(6),   KS_5,		KS_percent,	KS_onehalf,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_slash,	KS_braceleft,
    KC(9),   KS_8,		KS_parenleft,	KS_bracketleft,
    KC(10),  KS_9,		KS_parenright,	KS_bracketright,
    KC(11),  KS_0,		KS_equal,	KS_braceright,
    KC(12),  KS_asterisk,	KS_question,	KS_backslash,
    KC(13),  KS_minus,		KS_underscore,
    KC(16),  KS_q,		KS_Q,		KS_at,
    KC(23),  KS_L5_idotless,	KS_I,
    KC(26),  KS_L5_gbreve,	KS_L5_Gbreve,	KS_dead_diaeresis,
    KC(27),  KS_udiaeresis,	KS_Udiaeresis,	KS_asciitilde,
    KC(39),  KS_L5_scedilla,	KS_L5_Scedilla,	KS_dead_acute,
    KC(40),  KS_i,		KS_L5_Idotabove,
    KC(41),  KS_quotedbl,	KS_eacute,
    KC(43),  KS_comma,		KS_semicolon,	KS_dead_grave,
    KC(51),  KS_odiaeresis,	KS_Odiaeresis,
    KC(52),  KS_ccedilla,	KS_Ccedilla,
    KC(53),  KS_period,	KS_colon,
    KC(86),  KS_less,		KS_greater,	KS_bar,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_tr_nodead[] = {
/*  pos      normal		shifted         altgr           shift-altgr */
    KC(26),  KS_L5_gbreve,	KS_L5_Gbreve,
    KC(39),  KS_L5_scedilla,	KS_L5_Scedilla,	KS_apostrophe,
    KC(43),  KS_comma,		KS_semicolon,	KS_grave,
};

static const keysym_t pckbd_keydesc_pl[] = {
/*  pos      normal		shifted         altgr           shift-altgr */
    KC(18),  KS_e,		KS_E,		KS_L2_eogonek,	KS_L2_Eogonek,
    KC(24),  KS_o,		KS_O,		KS_oacute,	KS_Oacute,
    KC(30),  KS_a,		KS_A,		KS_L2_aogonek,	KS_L2_Aogonek,
    KC(31),  KS_s,		KS_S,		KS_L2_sacute,	KS_L2_Sacute,
    KC(38),  KS_l,		KS_L,		KS_L2_lstroke,	KS_L2_Lstroke,
    KC(44),  KS_z,		KS_Z,		KS_L2_zdotabove,KS_L2_Zdotabove,
    KC(45),  KS_x,		KS_X,		KS_L2_zacute,	KS_L2_Zacute,
    KC(46),  KS_c,		KS_C,		KS_L2_cacute,	KS_L2_Cacute,
    KC(49),  KS_n,		KS_N,		KS_L2_nacute,	KS_L2_Nacute,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

a786 3
	KBD_MAP(KB_TR,			KB_US,	pckbd_keydesc_tr),
	KBD_MAP(KB_TR | KB_NODEAD,	KB_TR,	pckbd_keydesc_tr_nodead),
	KBD_MAP(KB_PL,			KB_US,	pckbd_keydesc_pl),
@


1.13
log
@add mode_switch for ru & ua
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.12 2001/09/04 21:28:54 mickey Exp $ */
d370 1
a370 1
    KC(12),  KS_grave,		KS_question,
@


1.12
log
@.ua keyboard; from Igor Grabin <violent@@death.kiev.ua>
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.11 2001/06/13 20:36:24 mickey Exp $ */
d552 1
d596 1
@


1.11
log
@add portuguese kbd map; from pmsac <pmsac@@netcabo.pt>
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.10 2001/06/10 17:01:09 mickey Exp $ */
d554 43
d696 1
@


1.10
log
@sg fixes from Mathias Schmocker <smat@@acm.org>
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.9 2001/06/08 17:24:41 mickey Exp $ */
d597 25
d657 1
@


1.9
log
@swiss french keyboard; from Mathias Schmocker <smat@@acm.org>
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.8 2001/05/14 16:43:18 mickey Exp $ */
d566 2
a567 1
    KC(13),  KS_dead_circumflex,KS_dead_grave,	KS_asciitilde,	KS_dead_tilde,
d586 1
a586 1
    KC(13),  KS_asciicircum,	KS_grave,	KS_asciitilde,	KS_dead_tilde,
@


1.8
log
@add swiss german layout; from Kaspar Brand <kasparb@@freesurf.ch>
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.7 2001/05/02 18:58:20 mickey Exp $ */
d589 7
d629 2
@


1.8.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.5 2001/03/09 15:25:01 aaron Exp $ */
d136 1
a136 1
    KC(157),			KS_Control_R,
d140 1
a140 1
    KC(184),			KS_Alt_R,	KS_Multi_key,
d515 74
d619 3
@


1.8.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.8.2.1 2001/05/14 22:26:05 niklas Exp $ */
d136 1
a136 1
    KC(157), KS_Cmd1,		KS_Control_R,
d140 1
a140 1
    KC(184), KS_Cmd2,		KS_Alt_R,	KS_Multi_key,
a514 107
static const keysym_t pckbd_keydesc_ru[] = {
/*  pos      normal		shifted		altgr			shift-altgr */
    KC(7),   KS_6,		KS_asciicircum,	KS_6,			KS_comma,
    KC(8),   KS_7,		KS_ampersand,	KS_7,			KS_period,
    KC(16),  KS_q,		KS_Q,		KS_Cyrillic_ishort,	KS_Cyrillic_ISHORT,
    KC(17),  KS_w,		KS_W,		KS_Cyrillic_tse,	KS_Cyrillic_TSE,
    KC(18),  KS_e,		KS_E,		KS_Cyrillic_u,		KS_Cyrillic_U,
    KC(19),  KS_r,		KS_R,		KS_Cyrillic_ka,		KS_Cyrillic_KA,
    KC(20),  KS_t,		KS_T,		KS_Cyrillic_ie,		KS_Cyrillic_IE,
    KC(21),  KS_y,		KS_Y,		KS_Cyrillic_en,		KS_Cyrillic_EN,
    KC(22),  KS_u,		KS_U,		KS_Cyrillic_ge,		KS_Cyrillic_GE,
    KC(23),  KS_i,		KS_I,		KS_Cyrillic_sha,	KS_Cyrillic_SHA,
    KC(24),  KS_o,		KS_O,		KS_Cyrillic_scha,	KS_Cyrillic_SCHA,
    KC(25),  KS_p,		KS_P,		KS_Cyrillic_ze,		KS_Cyrillic_ZE,
    KC(26),  KS_bracketleft,	KS_braceleft,	KS_Cyrillic_ha,		KS_Cyrillic_HA,
    KC(27),  KS_bracketright,	KS_braceright,	KS_Cyrillic_hsighn,	KS_Cyrillic_HSIGHN,
    KC(30),  KS_a,		KS_A,		KS_Cyrillic_ef,		KS_Cyrillic_EF,
    KC(31),  KS_s,		KS_S,		KS_Cyrillic_yeru,	KS_Cyrillic_YERU,
    KC(32),  KS_d,		KS_D,		KS_Cyrillic_ve,		KS_Cyrillic_VE,
    KC(33),  KS_f,		KS_F,		KS_Cyrillic_a,		KS_Cyrillic_A,
    KC(34),  KS_g,		KS_G,		KS_Cyrillic_pe,		KS_Cyrillic_PE,
    KC(35),  KS_h,		KS_H,		KS_Cyrillic_er,		KS_Cyrillic_ER,
    KC(36),  KS_j,		KS_J,		KS_Cyrillic_o,		KS_Cyrillic_O,
    KC(37),  KS_k,		KS_K,		KS_Cyrillic_el,		KS_Cyrillic_EL,
    KC(38),  KS_l,		KS_L,		KS_Cyrillic_de,		KS_Cyrillic_DE,
    KC(39),  KS_semicolon,	KS_colon,	KS_Cyrillic_zhe,	KS_Cyrillic_ZHE,
    KC(40),  KS_apostrophe,	KS_quotedbl,	KS_Cyrillic_e,		KS_Cyrillic_E,
    KC(44),  KS_z,		KS_Z,		KS_Cyrillic_ya,		KS_Cyrillic_YA,
    KC(45),  KS_x,		KS_X,		KS_Cyrillic_che,	KS_Cyrillic_CHE,
    KC(46),  KS_c,		KS_C,		KS_Cyrillic_es,		KS_Cyrillic_ES,
    KC(47),  KS_v,		KS_V,		KS_Cyrillic_em,		KS_Cyrillic_EM,
    KC(48),  KS_b,		KS_B,		KS_Cyrillic_i,		KS_Cyrillic_I,
    KC(49),  KS_n,		KS_N,		KS_Cyrillic_te,		KS_Cyrillic_TE,
    KC(50),  KS_m,		KS_M,		KS_Cyrillic_ssighn,	KS_Cyrillic_SSIGHN,
    KC(51),  KS_comma,		KS_less,	KS_Cyrillic_be,		KS_Cyrillic_BE,
    KC(52),  KS_period,		KS_greater,	KS_Cyrillic_yu,		KS_Cyrillic_YU,
    KC(53),  KS_slash,		KS_question,	KS_Cyrillic_yo,		KS_Cyrillic_YO,
};

static const keysym_t pckbd_keydesc_sg[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(2),   KS_1,		KS_plus,	KS_bar,
    KC(3),   KS_2,		KS_quotedbl,	KS_at,
    KC(4),   KS_3,		KS_asterisk,	KS_numbersign,
    KC(5),   KS_4,		KS_ccedilla,
    KC(7),   KS_6,		KS_ampersand,	KS_notsign,
    KC(8),   KS_7,		KS_slash,	KS_brokenbar,
    KC(9),   KS_8,		KS_parenleft,	KS_cent,
    KC(10),  KS_9,		KS_parenright,
    KC(11),  KS_0,		KS_equal,
    KC(12),  KS_apostrophe,	KS_question,	KS_dead_acute,
    KC(13),  KS_dead_circumflex,KS_dead_grave,	KS_dead_tilde,
    KC(18),  KS_e,		KS_E,		KS_currency,
    KC(21),  KS_z,
    KC(26),  KS_udiaeresis,	KS_egrave,	KS_bracketleft,
    KC(27),  KS_dead_diaeresis,	KS_exclam,	KS_bracketright,
    KC(39),  KS_odiaeresis,	KS_eacute,
    KC(40),  KS_adiaeresis,	KS_agrave,	KS_braceleft,
    KC(41),  KS_section,	KS_degree,	KS_dead_abovering,
    KC(43),  KS_dollar,		KS_sterling,	KS_braceright,
    KC(44),  KS_y,
    KC(51),  KS_comma,		KS_semicolon,
    KC(52),  KS_period,		KS_colon,
    KC(53),  KS_minus,		KS_underscore,
    KC(86),  KS_less,		KS_greater,	KS_backslash,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_sg_nodead[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(12),  KS_apostrophe,	KS_question,	KS_acute,
    KC(13),  KS_asciicircum,	KS_grave,	KS_asciitilde,
    KC(27),  KS_diaeresis,	KS_exclam,	KS_bracketright
};

static const keysym_t pckbd_keydesc_sf[] = {
/*  pos      normal            shifted         altgr           shift-altgr */
    KC(26),  KS_egrave,        KS_udiaeresis,  KS_bracketleft,
    KC(39),  KS_eacute,        KS_odiaeresis,
    KC(40),  KS_agrave,        KS_adiaeresis,  KS_braceleft
};

static const keysym_t pckbd_keydesc_pt[] = {
/*  pos      normal            shifted         altgr           shift-altgr */
    KC(3),   KS_2,             KS_quotedbl,    KS_at,
    KC(4),   KS_3,             KS_numbersign,  KS_sterling,
    KC(5),   KS_4,             KS_dollar,
    KC(7),   KS_6,             KS_ampersand,
    KC(8),   KS_7,             KS_slash,       KS_braceleft,
    KC(9),   KS_8,             KS_parenleft,   KS_bracketleft,
    KC(10),  KS_9,             KS_parenright,  KS_bracketright,
    KC(11),  KS_0,             KS_equal,       KS_braceright,
    KC(12),  KS_apostrophe,    KS_question,
    KC(13),  KS_less,          KS_greater,
    KC(26),  KS_plus,          KS_asterisk,
    KC(27),  KS_dead_acute,    KS_dead_grave,
    KC(39),  KS_ccedilla,      KS_Ccedilla,
    KC(40),  KS_masculine,     KS_ordfeminine,
    KC(41),  KS_backslash,     KS_bar,
    KC(43),  KS_dead_tilde,    KS_dead_circumflex,
    KC(51),  KS_comma,         KS_semicolon,
    KC(52),  KS_period,        KS_colon,
    KC(53),  KS_minus,         KS_underscore,
    KC(86),  KS_less,          KS_greater,
    KC(184), KS_Mode_switch,   KS_Multi_key,
};

a544 6
	KBD_MAP(KB_RU,			KB_US,	pckbd_keydesc_ru),
	KBD_MAP(KB_SG,			KB_US,	pckbd_keydesc_sg),
	KBD_MAP(KB_SG | KB_NODEAD,	KB_SG,	pckbd_keydesc_sg_nodead),
	KBD_MAP(KB_SF,			KB_SG,	pckbd_keydesc_sf),
	KBD_MAP(KB_SF | KB_NODEAD,	KB_SF,	pckbd_keydesc_sg_nodead),
	KBD_MAP(KB_PT,			KB_US,	pckbd_keydesc_pt),
@


1.8.2.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.8.2.2 2001/07/04 10:43:19 niklas Exp $ */
d370 1
a370 1
    KC(12),  KS_apostrophe,	KS_question,
a551 45
    KC(184), KS_Mode_switch,   KS_Multi_key,
};

static const keysym_t pckbd_keydesc_ua[] = {
/*  pos      normal		shifted		altgr			shift-altgr */
    KC(7),   KS_6,		KS_asciicircum,	KS_6,			KS_comma,
    KC(8),   KS_7,		KS_ampersand,	KS_7,			KS_period,
    KC(12),   KS_minus,		KS_underscore,	KS_Cyrillic_iukr,			KS_Cyrillic_IUKR,
    KC(13),   KS_equal,		KS_plus,	KS_Cyrillic_yeukr,			KS_Cyrillic_YEUKR,
    KC(16),  KS_q,		KS_Q,		KS_Cyrillic_ishort,	KS_Cyrillic_ISHORT,
    KC(17),  KS_w,		KS_W,		KS_Cyrillic_tse,	KS_Cyrillic_TSE,
    KC(18),  KS_e,		KS_E,		KS_Cyrillic_u,		KS_Cyrillic_U,
    KC(19),  KS_r,		KS_R,		KS_Cyrillic_ka,		KS_Cyrillic_KA,
    KC(20),  KS_t,		KS_T,		KS_Cyrillic_ie,		KS_Cyrillic_IE,
    KC(21),  KS_y,		KS_Y,		KS_Cyrillic_en,		KS_Cyrillic_EN,
    KC(22),  KS_u,		KS_U,		KS_Cyrillic_ge,		KS_Cyrillic_GE,
    KC(23),  KS_i,		KS_I,		KS_Cyrillic_sha,	KS_Cyrillic_SHA,
    KC(24),  KS_o,		KS_O,		KS_Cyrillic_scha,	KS_Cyrillic_SCHA,
    KC(25),  KS_p,		KS_P,		KS_Cyrillic_ze,		KS_Cyrillic_ZE,
    KC(26),  KS_bracketleft,	KS_braceleft,	KS_Cyrillic_ha,		KS_Cyrillic_HA,
    KC(27),  KS_bracketright,	KS_braceright,	KS_Cyrillic_hsighn,	KS_Cyrillic_HSIGHN,
    KC(30),  KS_a,		KS_A,		KS_Cyrillic_ef,		KS_Cyrillic_EF,
    KC(31),  KS_s,		KS_S,		KS_Cyrillic_yeru,	KS_Cyrillic_YERU,
    KC(32),  KS_d,		KS_D,		KS_Cyrillic_ve,		KS_Cyrillic_VE,
    KC(33),  KS_f,		KS_F,		KS_Cyrillic_a,		KS_Cyrillic_A,
    KC(34),  KS_g,		KS_G,		KS_Cyrillic_pe,		KS_Cyrillic_PE,
    KC(35),  KS_h,		KS_H,		KS_Cyrillic_er,		KS_Cyrillic_ER,
    KC(36),  KS_j,		KS_J,		KS_Cyrillic_o,		KS_Cyrillic_O,
    KC(37),  KS_k,		KS_K,		KS_Cyrillic_el,		KS_Cyrillic_EL,
    KC(38),  KS_l,		KS_L,		KS_Cyrillic_de,		KS_Cyrillic_DE,
    KC(39),  KS_semicolon,	KS_colon,	KS_Cyrillic_zhe,	KS_Cyrillic_ZHE,
    KC(40),  KS_apostrophe,	KS_quotedbl,	KS_Cyrillic_e,		KS_Cyrillic_E,
    KC(41),  KS_grave,	KS_asciitilde,	KS_Cyrillic_gheukr,		KS_Cyrillic_GHEUKR,
    KC(43),  KS_backslash,	KS_bar,	KS_Cyrillic_yi,		KS_Cyrillic_YI,
    KC(44),  KS_z,		KS_Z,		KS_Cyrillic_ya,		KS_Cyrillic_YA,
    KC(45),  KS_x,		KS_X,		KS_Cyrillic_che,	KS_Cyrillic_CHE,
    KC(46),  KS_c,		KS_C,		KS_Cyrillic_es,		KS_Cyrillic_ES,
    KC(47),  KS_v,		KS_V,		KS_Cyrillic_em,		KS_Cyrillic_EM,
    KC(48),  KS_b,		KS_B,		KS_Cyrillic_i,		KS_Cyrillic_I,
    KC(49),  KS_n,		KS_N,		KS_Cyrillic_te,		KS_Cyrillic_TE,
    KC(50),  KS_m,		KS_M,		KS_Cyrillic_ssighn,	KS_Cyrillic_SSIGHN,
    KC(51),  KS_comma,		KS_less,	KS_Cyrillic_be,		KS_Cyrillic_BE,
    KC(52),  KS_period,		KS_greater,	KS_Cyrillic_yu,		KS_Cyrillic_YU,
    KC(53),  KS_slash,		KS_question,	KS_Cyrillic_yo,		KS_Cyrillic_YO,
    KC(184), KS_Mode_switch,   KS_Multi_key,
a652 1
	KBD_MAP(KB_UA,			KB_US,	pckbd_keydesc_ua),
@


1.8.2.4
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d50 12
a61 12
    KC(2),			KS_1,		KS_exclam,
    KC(3),			KS_2,		KS_at,
    KC(4),			KS_3,		KS_numbersign,
    KC(5),			KS_4,		KS_dollar,
    KC(6),			KS_5,		KS_percent,
    KC(7),			KS_6,		KS_asciicircum,
    KC(8),			KS_7,		KS_ampersand,
    KC(9),			KS_8,		KS_asterisk,
    KC(10),			KS_9,		KS_parenleft,
    KC(11),			KS_0,		KS_parenright,
    KC(12),			KS_minus,	KS_underscore,
    KC(13),			KS_equal,	KS_plus,
d63 14
a76 14
    KC(15),			KS_Tab,
    KC(16),			KS_q,
    KC(17),			KS_w,
    KC(18),			KS_e,
    KC(19),			KS_r,
    KC(20),			KS_t,
    KC(21),			KS_y,
    KC(22),			KS_u,
    KC(23),			KS_i,
    KC(24),			KS_o,
    KC(25),			KS_p,
    KC(26),			KS_bracketleft,	KS_braceleft,
    KC(27),			KS_bracketright, KS_braceright,
    KC(28),			KS_Return,
d78 26
a103 26
    KC(30),			KS_a,
    KC(31),			KS_s,
    KC(32),			KS_d,
    KC(33),			KS_f,
    KC(34),			KS_g,
    KC(35),			KS_h,
    KC(36),			KS_j,
    KC(37),			KS_k,
    KC(38),			KS_l,
    KC(39),			KS_semicolon,	KS_colon,
    KC(40),			KS_apostrophe,	KS_quotedbl,
    KC(41),			KS_grave,	KS_asciitilde,
    KC(42),			KS_Shift_L,
    KC(43),			KS_backslash,	KS_bar,
    KC(44),			KS_z,
    KC(45),			KS_x,
    KC(46),			KS_c,
    KC(47),			KS_v,
    KC(48),			KS_b,
    KC(49),			KS_n,
    KC(50),			KS_m,
    KC(51),			KS_comma,	KS_less,
    KC(52),			KS_period,	KS_greater,
    KC(53),			KS_slash,	KS_question,
    KC(54),			KS_Shift_R,
    KC(55),			KS_KP_Multiply,
d105 2
a106 2
    KC(57),			KS_space,
    KC(58),			KS_Caps_Lock,
d117 15
a131 15
    KC(69),			KS_Num_Lock,
    KC(70),			KS_Hold_Screen,
    KC(71),			KS_KP_Home,	KS_KP_7,
    KC(72),			KS_KP_Up,	KS_KP_8,
    KC(73),			KS_KP_Prior,	KS_KP_9,
    KC(74),			KS_KP_Subtract,
    KC(75),			KS_KP_Left,	KS_KP_4,
    KC(76),			KS_KP_Begin,	KS_KP_5,
    KC(77),			KS_KP_Right,	KS_KP_6,
    KC(78),			KS_KP_Add,
    KC(79),			KS_KP_End,	KS_KP_1,
    KC(80),			KS_KP_Down,	KS_KP_2,
    KC(81),			KS_KP_Next,	KS_KP_3,
    KC(82),			KS_KP_Insert,	KS_KP_0,
    KC(83),			KS_KP_Delete,	KS_KP_Decimal,
d274 1
a274 1
    KC(26),  KS_dead_circumflex, KS_dead_diaeresis,
d292 9
a300 9
    KC(3),   KS_2,		KS_quotedbl,	KS_twosuperior,
    KC(4),   KS_3,		KS_sterling,	KS_threesuperior,
    KC(5),   KS_4,		KS_dollar,
    KC(6),   KS_5,		KS_percent,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_slash,
    KC(9),   KS_8,		KS_parenleft,
    KC(10),  KS_9,		KS_parenright,
    KC(11),  KS_0,		KS_equal,
d302 1
a302 1
    KC(13),  KS_igrave,		KS_asciicircum,
d317 17
a333 17
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(2),   KS_1,		KS_exclam,	KS_plusminus,	KS_exclamdown,
    KC(3),   KS_2,		KS_quotedbl,	KS_twosuperior,	KS_cent,
    KC(4),   KS_3,		KS_sterling,	KS_threesuperior,
    KC(5),   KS_4,		KS_dollar,	KS_acute,	KS_currency,
    KC(6),   KS_5,		KS_percent,	KS_mu,		KS_yen,
    KC(7),   KS_6,		KS_asciicircum,	KS_paragraph,
    KC(8),   KS_7,		KS_ampersand,	KS_periodcentered, KS_brokenbar,
    KC(9),   KS_8,		KS_asterisk,	KS_cedilla,	KS_ordfeminine,
    KC(10),  KS_9,		KS_parenleft,	KS_onesuperior,	KS_diaeresis,
    KC(11),  KS_0,		KS_parenright,	KS_masculine,	KS_copyright,
    KC(12),  KS_minus,		KS_underscore,	KS_hyphen,	KS_ssharp,
    KC(13),  KS_equal,		KS_plus,	KS_onehalf,    KS_guillemotleft,
    KC(40),  KS_apostrophe,	KS_at,		KS_section,	KS_Agrave,
    KC(41),  KS_grave,		KS_grave,	KS_agrave,	KS_agrave,
    KC(43),  KS_numbersign,	KS_asciitilde,  KS_sterling,	KS_thorn,
    KC(86),  KS_backslash,	KS_bar,		KS_Udiaeresis,
d338 5
a342 5
    KC(3),   KS_2,		KS_quotedbl,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_apostrophe,
    KC(9),   KS_8,		KS_parenleft,
    KC(10),  KS_9,		KS_parenright,
d344 6
a349 6
    KC(12),  KS_minus,		KS_equal,
    KC(13),  KS_asciicircum,	KS_asciitilde,
    KC(26),  KS_at,		KS_grave,
    KC(27),  KS_bracketleft,	KS_braceleft,
    KC(39),  KS_semicolon,	KS_plus,
    KC(40),  KS_colon,		KS_asterisk,
d351 1
a351 1
    KC(43),  KS_bracketright,	KS_braceright,
d353 1
a353 1
    KC(115), KS_backslash,	KS_underscore,
d356 1
a356 1
    KC(125), KS_backslash,	KS_bar,
a384 32
static const keysym_t pckbd_keydesc_lt[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(2),   KS_exclam,		KS_1,		KS_at,
    KC(3),   KS_minus,		KS_2,		KS_underscore,
    KC(4),   KS_slash,		KS_3,		KS_numbersign,
    KC(5),   KS_semicolon,	KS_4,		KS_dollar,
    KC(6),   KS_colon,		KS_5,		KS_paragraph,
    KC(7),   KS_comma,		KS_6,		KS_asciicircum,
    KC(8),   KS_period,		KS_7,		KS_ampersand,
    KC(9),   KS_equal,		KS_8,		KS_asterisk,
    KC(10),  KS_bracketleft,	KS_9,		KS_parenleft,
    KC(11),  KS_bracketright,	KS_0,		KS_parenright,
    KC(12),  KS_question,	KS_plus,	KS_apostrophe,
    KC(13),  KS_x,		KS_X,		KS_percent,
    KC(16),  KS_L7_aogonek,	KS_L7_Aogonek,
    KC(17),  KS_L7_zcaron,	KS_L7_Zcaron,
    KC(18),  KS_e,		KS_E,		KS_currency,
    KC(26),  KS_L7_iogonek,	KS_L7_Iogonek,	KS_braceleft,
    KC(27),  KS_w,		KS_W,		KS_braceright,
    KC(33),  KS_L7_scaron,	KS_L7_Scaron,
    KC(39),  KS_L7_uogonek,	KS_L7_Uogonek,
    KC(40),  KS_L7_edot,	KS_L7_Edot,	KS_quotedbl,
    KC(41),  KS_grave,		KS_asciitilde,
    KC(43),  KS_q,		KS_Q,		KS_bar,
    KC(45),  KS_L7_umacron,	KS_L7_Umacron,
    KC(51),  KS_L7_ccaron,	KS_L7_Ccaron,	KS_L7_dbllow9quot,
    KC(52),  KS_f,		KS_F,		KS_L7_leftdblquot,
    KC(53),  KS_L7_eogonek,	KS_L7_Eogonek,	KS_backslash,
    KC(57),  KS_space,		KS_space,	KS_nobreakspace,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

d438 11
a448 11
    KC(71),	KS_KP_7,
    KC(72),	KS_KP_8,
    KC(73),	KS_KP_9,
    KC(75),	KS_KP_4,
    KC(76),	KS_KP_5,
    KC(77),	KS_KP_6,
    KC(79),	KS_KP_1,
    KC(80),	KS_KP_2,
    KC(81),	KS_KP_3,
    KC(82),	KS_KP_0,
    KC(83),	KS_KP_Decimal,
d458 33
a490 33
    KC(12),			KS_bracketleft,	KS_braceleft,
    KC(13),			KS_bracketright, KS_braceright,
    KC(16),			KS_apostrophe, KS_quotedbl,
    KC(17),			KS_comma, KS_less,
    KC(18),			KS_period, KS_greater,
    KC(19),			KS_p,
    KC(20),			KS_y,
    KC(21),			KS_f,
    KC(22),			KS_g,
    KC(23),			KS_c,
    KC(24),			KS_r,
    KC(25),			KS_l,
    KC(26),			KS_slash, KS_question,
    KC(27),			KS_equal, KS_plus,
    KC(31),			KS_o,
    KC(32),			KS_e,
    KC(33),			KS_u,
    KC(34),			KS_i,
    KC(35),			KS_d,
    KC(36),			KS_h,
    KC(37),			KS_t,
    KC(38),			KS_n,
    KC(39),			KS_s,
    KC(40),			KS_minus, KS_underscore,
    KC(44),			KS_semicolon, KS_colon,
    KC(45),			KS_q,
    KC(46),			KS_j,
    KC(47),			KS_k,
    KC(48),			KS_x,
    KC(49),			KS_b,
    KC(51),			KS_w,
    KC(52),			KS_v,
    KC(53),			KS_z,
d495 1
a495 1
    KC(29),			KS_Caps_Lock,
d512 1
a512 1
    KC(88),			KS_f11,
d636 4
a639 4
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(26),  KS_egrave,		KS_udiaeresis,	KS_bracketleft,
    KC(39),  KS_eacute,		KS_odiaeresis,
    KC(40),  KS_agrave,		KS_adiaeresis,	KS_braceleft
d643 22
a664 119
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(3),   KS_2,		KS_quotedbl,	KS_at,
    KC(4),   KS_3,		KS_numbersign,	KS_sterling,
    KC(5),   KS_4,		KS_dollar,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_slash,	KS_braceleft,
    KC(9),   KS_8,		KS_parenleft,	KS_bracketleft,
    KC(10),  KS_9,		KS_parenright,	KS_bracketright,
    KC(11),  KS_0,		KS_equal,	KS_braceright,
    KC(12),  KS_apostrophe,	KS_question,
    KC(13),  KS_less,		KS_greater,
    KC(26),  KS_plus,		KS_asterisk,
    KC(27),  KS_dead_acute,	KS_dead_grave,
    KC(39),  KS_ccedilla,	KS_Ccedilla,
    KC(40),  KS_masculine,	KS_ordfeminine,
    KC(41),  KS_backslash,	KS_bar,
    KC(43),  KS_dead_tilde,	KS_dead_circumflex,
    KC(51),  KS_comma,		KS_semicolon,
    KC(52),  KS_period,		KS_colon,
    KC(53),  KS_minus,		KS_underscore,
    KC(86),  KS_less,		KS_greater,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_la[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(2),   KS_1,		KS_exclam,
    KC(3),   KS_2,		KS_quotedbl,
    KC(4),   KS_3,		KS_numbersign,
    KC(5),   KS_4,		KS_dollar,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_slash,
    KC(9),   KS_8,		KS_parenleft,
    KC(10),  KS_9,		KS_parenright,
    KC(11),  KS_0,		KS_equal,
    KC(12),  KS_apostrophe,	KS_question,	KS_backslash,
    KC(13),  KS_questiondown,	KS_exclamdown,
    KC(16),  KS_q,		KS_Q,		KS_at,
    KC(26),  KS_dead_acute,	KS_dead_diaeresis,
    KC(27),  KS_plus,		KS_asterisk,	KS_asciitilde,
    KC(39),  KS_ntilde,
    KC(40),  KS_braceleft,	KS_bracketleft,	KS_dead_circumflex,
    KC(41),  KS_bar,		KS_degree,	KS_notsign,
    KC(43),  KS_braceright,	KS_bracketright,KS_dead_grave,
    KC(51),  KS_comma,		KS_semicolon,
    KC(52),  KS_period,		KS_colon,
    KC(53),  KS_minus,		KS_underscore,
    KC(86),  KS_less,		KS_greater,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_br[] = {
/*  pos      normal		shifted         altgr           shift-altgr */
    KC(2),   KS_1,		KS_exclam,	KS_onesuperior,
    KC(3),   KS_2,		KS_at,		KS_twosuperior,
    KC(4),   KS_3,		KS_numbersign,	KS_threesuperior,
    KC(5),   KS_4,		KS_dollar,	KS_sterling,
    KC(6),   KS_5,		KS_percent,	KS_cent,
    KC(7),   KS_6,		KS_dead_diaeresis,	KS_notsign,
    KC(13),  KS_equal,		KS_plus,	KS_section,
    KC(26),  KS_dead_acute,	KS_dead_grave,
    KC(27),  KS_bracketleft,	KS_braceleft,	KS_ordfeminine,
    KC(39),  KS_ccedilla,	KS_Ccedilla,
    KC(40),  KS_dead_tilde,	KS_dead_circumflex,
    KC(41),  KS_apostrophe,	KS_quotedbl,
    KC(43),  KS_bracketright,	KS_braceright,	KS_masculine,
    KC(53),  KS_semicolon,	KS_colon,
    KC(83),  KS_KP_Delete,	KS_KP_Decimal,
    KC(86),  KS_backslash,	KS_bar,
    KC(115), KS_slash,		KS_question,	KS_degree,
};

static const keysym_t pckbd_keydesc_tr[] = {
/*  pos      normal		shifted         altgr           shift-altgr */
    KC(3),   KS_2,		KS_apostrophe,	KS_sterling,
    KC(4),   KS_3,		KS_asciicircum,	KS_numbersign,
    KC(5),   KS_4,		KS_plus,	KS_dollar,
    KC(6),   KS_5,		KS_percent,	KS_onehalf,
    KC(7),   KS_6,		KS_ampersand,
    KC(8),   KS_7,		KS_slash,	KS_braceleft,
    KC(9),   KS_8,		KS_parenleft,	KS_bracketleft,
    KC(10),  KS_9,		KS_parenright,	KS_bracketright,
    KC(11),  KS_0,		KS_equal,	KS_braceright,
    KC(12),  KS_asterisk,	KS_question,	KS_backslash,
    KC(13),  KS_minus,		KS_underscore,
    KC(16),  KS_q,		KS_Q,		KS_at,
    KC(23),  KS_L5_idotless,	KS_I,
    KC(26),  KS_L5_gbreve,	KS_L5_Gbreve,	KS_dead_diaeresis,
    KC(27),  KS_udiaeresis,	KS_Udiaeresis,	KS_asciitilde,
    KC(39),  KS_L5_scedilla,	KS_L5_Scedilla,	KS_dead_acute,
    KC(40),  KS_i,		KS_L5_Idotabove,
    KC(41),  KS_quotedbl,	KS_eacute,
    KC(43),  KS_comma,		KS_semicolon,	KS_dead_grave,
    KC(51),  KS_odiaeresis,	KS_Odiaeresis,
    KC(52),  KS_ccedilla,	KS_Ccedilla,
    KC(53),  KS_period,	KS_colon,
    KC(86),  KS_less,		KS_greater,	KS_bar,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

static const keysym_t pckbd_keydesc_tr_nodead[] = {
/*  pos      normal		shifted         altgr           shift-altgr */
    KC(26),  KS_L5_gbreve,	KS_L5_Gbreve,
    KC(39),  KS_L5_scedilla,	KS_L5_Scedilla,	KS_apostrophe,
    KC(43),  KS_comma,		KS_semicolon,	KS_grave,
};

static const keysym_t pckbd_keydesc_pl[] = {
/*  pos      normal		shifted         altgr           shift-altgr */
    KC(18),  KS_e,		KS_E,		KS_L2_eogonek,	KS_L2_Eogonek,
    KC(24),  KS_o,		KS_O,		KS_oacute,	KS_Oacute,
    KC(30),  KS_a,		KS_A,		KS_L2_aogonek,	KS_L2_Aogonek,
    KC(31),  KS_s,		KS_S,		KS_L2_sacute,	KS_L2_Sacute,
    KC(38),  KS_l,		KS_L,		KS_L2_lstroke,	KS_L2_Lstroke,
    KC(44),  KS_z,		KS_Z,		KS_L2_zdotabove,KS_L2_Zdotabove,
    KC(45),  KS_x,		KS_X,		KS_L2_zacute,	KS_L2_Zacute,
    KC(46),  KS_c,		KS_C,		KS_L2_cacute,	KS_L2_Cacute,
    KC(49),  KS_n,		KS_N,		KS_L2_nacute,	KS_L2_Nacute,
    KC(184), KS_Mode_switch,	KS_Multi_key,
d674 1
a674 1
	KBD_MAP(KB_FR,			KB_US,  pckbd_keydesc_fr),
a703 6
	KBD_MAP(KB_LT,			KB_US,	pckbd_keydesc_lt),
	KBD_MAP(KB_LA,			KB_US,	pckbd_keydesc_la),
	KBD_MAP(KB_BR,			KB_US,	pckbd_keydesc_br),
	KBD_MAP(KB_TR,			KB_US,	pckbd_keydesc_tr),
	KBD_MAP(KB_TR | KB_NODEAD,	KB_TR,	pckbd_keydesc_tr_nodead),
	KBD_MAP(KB_PL,			KB_US,	pckbd_keydesc_pl),
@


1.8.2.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a795 40
static const keysym_t pckbd_keydesc_hu[] = {
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(2),   KS_1,		KS_apostrophe,	KS_asciitilde,
    KC(3),   KS_2,		KS_quotedbl,
    KC(4),   KS_3,		KS_plus,	KS_asciicircum,
    KC(5),   KS_4,		KS_exclam,
    KC(6),   KS_5,		KS_percent,
    KC(7),   KS_6,		KS_slash,
    KC(8),   KS_7,		KS_equal,KS_grave,
    KC(9),   KS_8,		KS_parenleft,
    KC(10),  KS_9,		KS_parenright,	KS_acute,
    KC(11),  KS_odiaeresis,	KS_Odiaeresis,
    KC(12),  KS_udiaeresis,	KS_Udiaeresis,
    KC(13),  KS_oacute,		KS_Oacute,
    KC(16),  KS_q,		KS_Q,		KS_backslash,
    KC(17),  KS_w,		KS_W,KS_bar,
    KC(21),  KS_z,		KS_Z,
    KC(23),  KS_i,		KS_I,		KS_iacute,
    KC(26),  KS_odoubleacute,	KS_Odoubleacute,	KS_division,
    KC(27),  KS_uacute,		KS_Uacute,	KS_multiply,
    KC(33),  KS_f,		KS_F,		KS_bracketleft,
    KC(34),  KS_g,		KS_G,		KS_bracketright,
    KC(36),  KS_j,		KS_J,		KS_iacute,
    KC(39),  KS_eacute,		KS_Eacute,	KS_dollar,
    KC(40),  KS_aacute,		KS_Aacute,	KS_ssharp,
    KC(41),  KS_0,		KS_section,
    KC(43),  KS_udoubleacute,	KS_Udoubleacute,	KS_currency,
    KC(44),  KS_y,		KS_Y,		KS_greater,
    KC(45),  KS_x,		KS_X,		KS_numbersign,
    KC(46),  KS_c,		KS_C,		KS_ampersand,
    KC(47),  KS_v,		KS_V,		KS_at,
    KC(48),  KS_b,		KS_B,		KS_braceleft,
    KC(49),  KS_n,		KS_N,		KS_braceright,
    KC(51),  KS_comma,		KS_question,	KS_semicolon,
    KC(52),  KS_period,		KS_colon,
    KC(53),  KS_minus,		KS_underscore,	KS_asterisk,
    KC(86),  KS_iacute,		KS_Iacute,	KS_less,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

a838 1
	KBD_MAP(KB_HU,			KB_US,	pckbd_keydesc_hu),
@


1.8.2.6
log
@Merge with the trunk
@
text
@a835 40
static const keysym_t pckbd_keydesc_si[]=
{
/*  pos      normal		shifted		altgr		shift-altgr */
    KC(2),   KS_1,		KS_exclam,	KS_asciitilde,
    KC(3),   KS_2,		KS_quotedbl,	KS_L2_caron,
    KC(4),   KS_3,		KS_numbersign,	KS_asciicircum,
    KC(5),   KS_4,		KS_dollar,	KS_L2_breve,
    KC(6),   KS_5,		KS_percent,	KS_degree,
    KC(7),   KS_6,		KS_ampersand,	KS_L2_ogonek,
    KC(8),   KS_7,		KS_slash,	KS_grave,
    KC(9),   KS_8,		KS_parenleft,	KS_L2_dotabove,
    KC(10),  KS_9,		KS_parenright,	KS_acute,
    KC(11),  KS_0,		KS_equal,	KS_L2_dblacute,
    KC(12),  KS_apostrophe,	KS_question,	KS_diaeresis,
    KC(13),  KS_plus,		KS_asterisk,	KS_cedilla,
    KC(16),  KS_q,		KS_Q,		KS_backslash,
    KC(17),  KS_w,		KS_W,		KS_bar,
    KC(21),  KS_z,		KS_Z,
    KC(26),  KS_L2_scaron,	KS_L2_Scaron,	KS_division,
    KC(27),  KS_L2_dstroke,	KS_L2_Dstroke,	KS_multiply,
    KC(33),  KS_f,		KS_F,		KS_bracketleft,
    KC(34),  KS_g,		KS_G,		KS_bracketright,
    KC(37),  KS_k,		KS_K,		KS_L2_lstroke,
    KC(38),  KS_l,		KS_L,		KS_L2_Lstroke,
    KC(39),  KS_L2_ccaron,	KS_L2_Ccaron,	
    KC(40),  KS_L2_cacute,	KS_L2_Cacute,	KS_ssharp,
    KC(41),  KS_cedilla,	KS_diaeresis,
    KC(43),  KS_L2_zcaron,	KS_L2_Zcaron,	KS_currency,
    KC(44),  KS_y,		KS_Y,
    KC(47),  KS_v,		KS_V,		KS_at,
    KC(48),  KS_b,		KS_B,		KS_braceleft,
    KC(49),  KS_n,		KS_N,		KS_braceright,
    KC(50),  KS_m,		KS_M,		KS_section,
    KC(51),  KS_comma,		KS_semicolon,
    KC(52),  KS_period,		KS_colon,
    KC(53),  KS_minus,		KS_underscore,
    KC(86),  KS_less,		KS_greater,
    KC(184), KS_Mode_switch,	KS_Multi_key,
};

d843 1
a843 1
	KBD_MAP(KB_FR,			KB_US,	pckbd_keydesc_fr),
d856 4
a859 4
	KBD_MAP(KB_US | KB_IOPENER,	KB_US,	pckbd_keydesc_iopener),
	KBD_MAP(KB_JP | KB_SWAPCTRLCAPS, KB_JP,	pckbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_FR | KB_SWAPCTRLCAPS, KB_FR,	pckbd_keydesc_swapctrlcaps),
	KBD_MAP(KB_BE | KB_SWAPCTRLCAPS, KB_BE,	pckbd_keydesc_swapctrlcaps),
a879 1
	KBD_MAP(KB_SI,			KB_US,	pckbd_keydesc_si),
@


1.7
log
@allow switching vts w/ right alt/ctrl/fn; from Mike Glamm <glam0006@@umn.edu>
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.6 2001/04/30 16:53:34 mickey Exp $ */
d554 35
d620 2
@


1.6
log
@koi8-r keyboard layout; from igor grabin <violent@@death.kiev.ua>
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.5 2001/03/09 15:25:01 aaron Exp $ */
d136 1
a136 1
    KC(157),			KS_Control_R,
d140 1
a140 1
    KC(184),			KS_Alt_R,	KS_Multi_key,
@


1.5
log
@Add Belgian keymap for wscons; addresses PR/1592 from TDeval@@PrimeOBJ.COM.
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.4 2001/03/01 03:43:12 aaron Exp $ */
d515 39
d584 1
@


1.4
log
@Add CTRL-ALT-DEL machine reset support, like PCVT had, enabled by the
machdep.kbdreset sysctl as configured in /etc/sysctl.conf.
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.3 2001/02/11 19:14:05 aaron Exp $ */
d385 32
d538 1
d543 2
a544 1
	KBD_MAP(KB_ES ,			KB_US,	pckbd_keydesc_es),
@


1.3
log
@Allow up to 12 virtual terminals (CTRL-ALT-F1 through CTRL-ALT-F12). Only
6 are enabled by default. After these changes, to enable more you must
change the "option WSDISPLAY_DEFAULTSCREENS" in the kernel config file and
edit /etc/ttys to switch the new ones from 'off' to 'on'.
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.2 2000/11/15 19:53:58 aaron Exp $ */
d153 1
a153 1
    KC(211),			KS_KP_Delete,
@


1.2
log
@Add two command definitions for wscons scrollback support and link them to
the PGUP/PGDN keys.
@
text
@d1 1
a1 1
/*	$OpenBSD: wskbdmap_mfii.c,v 1.1 2000/11/13 20:12:35 aaron Exp $ */
d132 2
a133 2
    KC(87), 			KS_f11,
    KC(88), 			KS_f12,
@


1.1
log
@Machine-independent PC-like keyboard driver; from NetBSD. XXX - Not used
anywhere quite yet, but useful to have these files in the tree while we work
towards wscons for i386 and alpha.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d146 1
a146 1
    KC(201),			KS_Prior,
d151 1
a151 1
    KC(209),			KS_Next,
@

