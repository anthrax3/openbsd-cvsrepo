head	1.7;
access;
symbols
	OPENBSD_5_8:1.6.0.14
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.12
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.18
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.16
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.12
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.14
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.10
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.8
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.6
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.4
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4;
locks; strict;
comment	@ * @;


1.7
date	2015.08.20.04.41.46;	author mlarkin;	state dead;
branches;
next	1.6;
commitid	eoSwLmCZ9T7CGJzs;

1.6
date	2012.12.05.23.20.22;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.05.19.54.35;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2007.02.18.19.19.02;	author gwk;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.28.20.28.50;	author gwk;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.02.13.26.15;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.27.18.04.28;	author gwk;	state Exp;
branches;
next	;


desc
@@


1.7
log
@
remove unused vesafb code, had been commented out and not compiled in for
7 years (for some parts, 9 years), and was only ever referenced in i386
anyway.

ok jsg@@, matthieu@@, armani@@
@
text
@/* $OpenBSD: vesabios.c,v 1.6 2012/12/05 23:20:22 deraadt Exp $ */

/*
 * Copyright (c) 2002, 2004
 * 	Matthias Drochner.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions, and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/malloc.h>
#include <machine/frame.h>
#include <machine/kvm86.h>

#include <dev/vesa/vesabiosvar.h>
#include <dev/vesa/vesabiosreg.h>
#include <dev/vesa/vbe.h>

struct vbeinfoblock
{
	char VbeSignature[4];
	uint16_t VbeVersion;
	uint32_t OemStringPtr;
	uint32_t Capabilities;
	uint32_t VideoModePtr;
	uint16_t TotalMemory;
	uint16_t OemSoftwareRev;
	uint32_t OemVendorNamePtr, OemProductNamePtr, OemProductRevPtr;
	/* data area, in total max 512 bytes for VBE 2.0 */
} __packed;

#define FAR2FLATPTR(p) ((p & 0xffff) + ((p >> 12) & 0xffff0))

int vesabios_match(struct device *, void *, void *);
void vesabios_attach(struct device *, struct device *, void *);
int vesabios_print(void *, const char *);

int vbegetinfo(struct vbeinfoblock **);
void vbefreeinfo(struct vbeinfoblock *);
#ifdef VESABIOSVERBOSE
const char *mm2txt(unsigned int);
#endif

struct vesabios_softc *vesabios_softc;

struct cfattach vesabios_ca = {
	sizeof(struct vesabios_softc), vesabios_match, vesabios_attach
};

struct cfdriver vesabios_cd = {
	NULL, "vesabios", DV_DULL
};

int
vesabios_match(struct device *parent, void *match, void *aux)
{

	return (1);
}

int
vbegetinfo(struct vbeinfoblock **vip)
{
	unsigned char *buf;
	struct trapframe tf;
	int res, error;

	if ((buf = kvm86_bios_addpage(KVM86_CALL_TASKVA)) == NULL) {
		printf("vbegetinfo: kvm86_bios_addpage failed\n");
		return (ENOMEM);
	}

	memcpy(buf, "VBE2", 4);

	memset(&tf, 0, sizeof(struct trapframe));
	tf.tf_eax = VBE_FUNC_CTRLINFO;
	tf.tf_vm86_es = 0;
	tf.tf_edi = KVM86_CALL_TASKVA;

	res = kvm86_bioscall(BIOS_VIDEO_INTR, &tf);
	if (res || VBECALL_SUPPORT(tf.tf_eax) != VBECALL_SUPPORTED) {
		printf("vbecall: res=%d, ax=%x\n", res, tf.tf_eax);
		error = ENXIO;
		goto out;
	}

	if (memcmp(((struct vbeinfoblock *)buf)->VbeSignature, "VESA", 4)) {
		error = EIO;
		goto out;
	}

	if (vip)
		*vip = (struct vbeinfoblock *)buf;
	return (0);

out:
	kvm86_bios_delpage(KVM86_CALL_TASKVA, buf);
	return (error);
}

void
vbefreeinfo(struct vbeinfoblock *vip)
{

	kvm86_bios_delpage(KVM86_CALL_TASKVA, vip);
}

int
vbeprobe(void)
{
	struct vbeinfoblock *vi;
	int found = 0;

	if (vbegetinfo(&vi))
		return (0);
	if (VBE_CTRLINFO_VERSION(vi->VbeVersion) > 1) {
		/* VESA bios is at least version 2.0 */
		found = 1;
	}
	vbefreeinfo(vi);
	return (found);
}

#ifdef VESABIOSVERBOSE
const char *
mm2txt(unsigned int mm)
{
	static char buf[30];
	static const char *names[] = {
		"Text mode",
		"CGA graphics",
		"Hercules graphics",
		"Planar",
		"Packed pixel",
		"Non-chain 4, 256 color",
		"Direct Color",
		"YUV"
	};

	if (mm < nitems(names))
		return (names[mm]);
	snprintf(buf, sizeof(buf), "unknown memory model %d", mm);
	return (buf);
}
#endif

void
vesabios_attach(struct device *parent, struct device *self, void *aux)
{
	struct vesabios_softc *sc = (struct vesabios_softc *)self;
	struct vbeinfoblock *vi;
	unsigned char *buf;
	struct trapframe tf;
	int res;
	char name[256];
#define MAXMODES 60
	uint16_t modes[MAXMODES];
	int rastermodes[MAXMODES];
	int textmodes[MAXMODES];
	int nmodes, nrastermodes, ntextmodes, i;
	uint32_t modeptr;
	struct modeinfoblock *mi;

	if (vbegetinfo(&vi)) {
		printf("\n");
		panic("vesabios_attach: disappeared");
	}

	printf(": version %d.%d",
	    VBE_CTRLINFO_VERSION(vi->VbeVersion),
	    VBE_CTRLINFO_REVISION(vi->VbeVersion));


	res = kvm86_bios_read(FAR2FLATPTR(vi->OemVendorNamePtr),
	    name, sizeof(name));

	sc->sc_size = vi->TotalMemory * 65536;
	if (res > 0) {
		name[res - 1] = 0;
		printf(", %s", name);
		res = kvm86_bios_read(FAR2FLATPTR(vi->OemProductNamePtr),
				      name, sizeof(name));
		if (res > 0) {
			name[res - 1] = 0;
			printf(" %s", name);
		}
	}
	printf("\n");

	nmodes = 0;
	modeptr = FAR2FLATPTR(vi->VideoModePtr);
	while (nmodes < MAXMODES) {
		res = kvm86_bios_read(modeptr, (char *)&modes[nmodes], 2);
		if (res != 2 || modes[nmodes] == 0xffff)
			break;
		nmodes++;
		modeptr += 2;
	}

	vbefreeinfo(vi);
	if (nmodes == 0)
		return;

	nrastermodes = ntextmodes = 0;

	buf = kvm86_bios_addpage(KVM86_CALL_TASKVA);
	if (!buf) {
		printf("%s: kvm86_bios_addpage failed\n",
		    self->dv_xname);
		return;
	}
	for (i = 0; i < nmodes; i++) {

		memset(&tf, 0, sizeof(struct trapframe));
		tf.tf_eax = VBE_FUNC_MODEINFO;
		tf.tf_ecx = modes[i];
		tf.tf_vm86_es = 0;
		tf.tf_edi = KVM86_CALL_TASKVA;

		res = kvm86_bioscall(BIOS_VIDEO_INTR, &tf);
		if (res || VBECALL_SUPPORT(tf.tf_eax) != VBECALL_SUPPORTED) {
			printf("%s: vbecall: res=%d, ax=%x\n",
			    self->dv_xname, res, tf.tf_eax);
			printf("%s: error getting info for mode %04x\n",
			    self->dv_xname, modes[i]);
			continue;
		}
		mi = (struct modeinfoblock *)buf;
#ifdef VESABIOSVERBOSE
		printf("%s: VESA mode %04x: attributes %04x",
		       self->dv_xname, modes[i], mi->ModeAttributes);
#endif
		if (!(mi->ModeAttributes & 1)) {
#ifdef VESABIOSVERBOSE
			printf("\n");
#endif
			continue;
		}
		if (mi->ModeAttributes & 0x10) {
			/* graphics */
#ifdef VESABIOSVERBOSE
			printf(", %dx%d %dbbp %s\n",
			       mi->XResolution, mi->YResolution,
			       mi->BitsPerPixel, mm2txt(mi->MemoryModel));
#endif
			if (mi->ModeAttributes & 0x80) {
				/* flat buffer */
				rastermodes[nrastermodes++] = modes[i];
			}
		} else {
			/* text */
#ifdef VESABIOSVERBOSE
			printf(", text %dx%d\n",
			       mi->XResolution, mi->YResolution);
#endif
			if (!(mi->ModeAttributes & 0x20)) /* VGA compatible */
				textmodes[ntextmodes++] = modes[i];
		}
	}
	kvm86_bios_delpage(KVM86_CALL_TASKVA, buf);
	if (nrastermodes > 0) {
		sc->sc_modes =
		    (uint16_t *)malloc(sizeof(uint16_t)*nrastermodes,
			M_DEVBUF, M_NOWAIT);
		if (sc->sc_modes == NULL) {
			sc->sc_nmodes = 0;
			return;
		}
		sc->sc_nmodes = nrastermodes;
		for (i = 0; i < nrastermodes; i++)
			sc->sc_modes[i] = rastermodes[i];
	}
	vesabios_softc = sc;
}

int
vesabios_print(aux, pnp)
	void *aux;
	const char *pnp;
{
	char *busname = aux;

	if (pnp)
		printf("%s at %s", busname, pnp);
	return (UNCONF);
}
@


1.6
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/* $OpenBSD: vesabios.c,v 1.5 2011/04/05 19:54:35 jasper Exp $ */
@


1.5
log
@- use nitems() no binary change on amd64

"reads OK" claudio@@
@
text
@d1 1
a1 1
/* $OpenBSD: vesabios.c,v 1.4 2007/02/18 19:19:02 gwk Exp $ */
a27 2

#include <sys/cdefs.h>
@


1.4
log
@Add currently unused functions for getting EDID information (max supported
resolution, hsync, vsync etc) from the monitor using DDC.

Cleanup a whole bunch of magic,
ok deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: vesabios.c,v 1.3 2007/01/28 20:28:50 gwk Exp $ */
d163 1
a163 1
	if (mm < sizeof(names)/sizeof(names[0]))
@


1.3
log
@Fix a number of issues with vesabios discovered by miod@@

1. Add bounds checking to vga_pci_mmap, fixing a potential security issue.
Limit the amount of memory to what the vbe info structure says the card
card has. This should be nicely refined to limit to the amount of memory
needed by the active resolution and depth but this will do for the time
being.

2. Fix several places in vesafb.c where the return of kvm86_bios_addpage()
isnt being checked. Also ensure that if vesafb_get_mode_info() fails that it
cleans up after itself by releasing the page it added.

3. Correct the range checks in vesafb_putcmap and vesafb_getcmap, harmonize
code with similar code found else where.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: vesabios.c,v 1.2 2006/12/02 13:26:15 matthieu Exp $ */
d40 1
d53 1
a53 1
} __attribute__ ((packed));
d91 2
a92 3
	buf = kvm86_bios_addpage(0x2000);
	if (!buf) {
		printf("vbegetinfo: kvm86_bios_addpage(0x2000) failed\n");
d99 1
a99 1
	tf.tf_eax = 0x4f00; /* function code */
d101 1
a101 1
	tf.tf_edi = 0x2000; /* buf ptr */
d103 2
a104 2
	res = kvm86_bioscall(0x10, &tf);
	if (res || (tf.tf_eax & 0xff) != 0x4f) {
d120 1
a120 1
	kvm86_bios_delpage(0x2000, buf);
d128 1
a128 1
	kvm86_bios_delpage(0x2000, vip);
d139 1
a139 1
	if ((vi->VbeVersion >> 8) > 1) {
d193 3
a195 1
	    vi->VbeVersion >> 8, vi->VbeVersion & 0xff);
d198 1
a198 1
			      name, sizeof(name));
d229 1
a229 1
	buf = kvm86_bios_addpage(0x2000);
d231 1
a231 1
		printf("%s: kvm86_bios_addpage(0x2000) failed\n",
d238 1
a238 1
		tf.tf_eax = 0x4f01; /* function code */
d241 1
a241 1
		tf.tf_edi = 0x2000; /* buf ptr */
d243 2
a244 2
		res = kvm86_bioscall(0x10, &tf);
		if (res || (tf.tf_eax & 0xff) != 0x4f) {
d283 1
a283 1
	kvm86_bios_delpage(0x2000, buf);
d285 1
a285 1
		sc->sc_modes = 
@


1.2
log
@typo
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d197 2
@


1.1
log
@commit vesabios for matthieu@@
ok deraadt, "slap it in" miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: */
@

