head	1.9;
access;
symbols
	OPENBSD_5_8:1.8.0.8
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.6
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.7.0.20
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.16
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.14
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.12
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.10
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.8
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.4
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.4.0.4
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4;
locks; strict;
comment	@ * @;


1.9
date	2015.08.20.04.41.46;	author mlarkin;	state dead;
branches;
next	1.8;
commitid	eoSwLmCZ9T7CGJzs;

1.8
date	2014.07.08.17.19.25;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	EF98ch02VpFassUi;

1.7
date	2009.11.11.00.01.34;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2008.04.28.19.28.37;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2007.11.25.16.43.39;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2007.02.18.19.19.02;	author gwk;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.28.20.28.50;	author gwk;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.02.20.20.55;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.27.18.04.28;	author gwk;	state Exp;
branches;
next	;


desc
@@


1.9
log
@
remove unused vesafb code, had been commented out and not compiled in for
7 years (for some parts, 9 years), and was only ever referenced in i386
anyway.

ok jsg@@, matthieu@@, armani@@
@
text
@/*	$OpenBSD: vesafb.c,v 1.8 2014/07/08 17:19:25 deraadt Exp $	*/

/*-
 * Copyright (c) 2006 Jared D. McNeill <jmcneill@@invisible.ca>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Copyright (c) 2006 Matthieu Herrb
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>

#include <machine/bus.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#include <dev/ic/mc6845reg.h>
#include <dev/ic/pcdisplayvar.h>
#include <dev/ic/vgareg.h>
#include <dev/ic/vgavar.h>
#include <dev/pci/vga_pcivar.h>

#include <dev/vesa/vesabiosreg.h>
#include <dev/vesa/vesabiosvar.h>
#include <dev/vesa/vbe.h>

#include <machine/frame.h>
#include <machine/kvm86.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wsdisplayvar.h>


void vesafb_set_mode(struct vga_pci_softc *, int);
int vesafb_get_mode(struct vga_pci_softc *);
void vesafb_get_mode_info(struct vga_pci_softc *, int, struct modeinfoblock *);
void vesafb_set_palette(struct vga_pci_softc *, int, struct paletteentry *);
int vesafb_putcmap(struct vga_pci_softc *, struct wsdisplay_cmap *);
int vesafb_getcmap(struct vga_pci_softc *, struct wsdisplay_cmap *);
int vesafb_get_ddc_version(struct vga_pci_softc *);
int vesafb_get_ddc_info(struct vga_pci_softc *, struct edid *);

int
vesafb_get_ddc_version(struct vga_pci_softc *sc)
{
	struct trapframe tf;
	int res;

	bzero(&tf, sizeof(struct trapframe));
	tf.tf_eax = VBE_FUNC_DDC;

	res = kvm86_bioscall(BIOS_VIDEO_INTR, &tf);
	if (res || VBECALL_SUPPORT(tf.tf_eax) != VBECALL_SUPPORTED)
		return 0;

	return VBECALL_SUCCESS(tf.tf_eax);
}


int
vesafb_get_ddc_info(struct vga_pci_softc *sc, struct edid *info)
{
	struct trapframe tf;
	unsigned char *buf;
	int res;

	if ((buf = kvm86_bios_addpage(KVM86_CALL_TASKVA)) == NULL) {
		printf("%s: kvm86_bios_addpage failed.\n",
		    sc->sc_dev.dv_xname);
		return 1;
	}

	bzero(&tf, sizeof(struct trapframe));
	tf.tf_eax = VBE_FUNC_DDC;
	tf.tf_ebx = VBE_DDC_GET;
	tf.tf_vm86_es = 0;
	tf.tf_edi = KVM86_CALL_TASKVA;

	res = kvm86_bioscall(BIOS_VIDEO_INTR, &tf);
	if (res || VBECALL_SUPPORT(tf.tf_eax) != VBECALL_SUPPORTED) {
		kvm86_bios_delpage(KVM86_CALL_TASKVA, buf);
		return 1;
	}

	memcpy(info, buf, sizeof(struct edid));
	kvm86_bios_delpage(KVM86_CALL_TASKVA, buf);
	return VBECALL_SUCCESS(tf.tf_eax);
}

int
vesafb_get_mode(struct vga_pci_softc *sc)
{
	struct trapframe tf;
	int res;

	bzero(&tf, sizeof(struct trapframe));
	tf.tf_eax = VBE_FUNC_GETMODE;

	res = kvm86_bioscall(BIOS_VIDEO_INTR, &tf);
	if (res || VBECALL_SUPPORT(tf.tf_eax) != VBECALL_SUPPORTED) {
		printf("%s: vbecall: res=%d, ax=%x\n",
		    sc->sc_dev.dv_xname, res, tf.tf_eax);
	}
	return tf.tf_ebx & 0xffff;
}

void
vesafb_get_mode_info(struct vga_pci_softc *sc, int mode,
    struct modeinfoblock *mi)
{
	struct trapframe tf;
	unsigned char *buf;
	int res;

	if ((buf = kvm86_bios_addpage(KVM86_CALL_TASKVA)) == NULL) {
		printf("%s: kvm86_bios_addpage failed.\n",
		    sc->sc_dev.dv_xname);
		return;
	}
	memset(&tf, 0, sizeof(struct trapframe));
	tf.tf_eax = VBE_FUNC_MODEINFO;
	tf.tf_ecx = mode;
	tf.tf_vm86_es = 0;
	tf.tf_edi = KVM86_CALL_TASKVA;

	res = kvm86_bioscall(BIOS_VIDEO_INTR, &tf);
	if (res || VBECALL_SUPPORT(tf.tf_eax) != VBECALL_SUPPORTED) {
		printf("%s: vbecall: res=%d, ax=%x\n",
		    sc->sc_dev.dv_xname, res, tf.tf_eax);
		printf("%s: error getting info for mode %05x\n",
		    sc->sc_dev.dv_xname, mode);
		kvm86_bios_delpage(KVM86_CALL_TASKVA, buf);
		return;
	}
	memcpy(mi, buf, sizeof(struct modeinfoblock));
	kvm86_bios_delpage(KVM86_CALL_TASKVA, buf);
}

void
vesafb_set_palette(struct vga_pci_softc *sc, int reg, struct paletteentry *pe)
{
	struct trapframe tf;
	int res;
	char *buf;

	if ((buf = kvm86_bios_addpage(KVM86_CALL_TASKVA)) == NULL) {
		printf("%s: kvm86_bios_addpage failed.\n",
		       sc->sc_dev.dv_xname);
		return;
	}

	memcpy(buf, pe, sizeof(struct paletteentry));

	/*
	 * this function takes 8 bit per palette as input, but we're
	 * working in 6 bit mode here
	 */
	pe = (struct paletteentry *)buf; 
	pe->Red >>= 2;
	pe->Green >>= 2;
	pe->Blue >>= 2;

	/* set palette */
	memset(&tf, 0, sizeof(struct trapframe));
	tf.tf_eax = VBE_FUNC_PALETTE;
	tf.tf_ebx = 0x0600; /* 6 bit per primary, set format */
	tf.tf_ecx = 1;
	tf.tf_edx = reg;
	tf.tf_vm86_es = 0;
	tf.tf_edi = KVM86_CALL_TASKVA;

	res = kvm86_bioscall(BIOS_VIDEO_INTR, &tf);
	if (res || VBECALL_SUPPORT(tf.tf_eax) != VBECALL_SUPPORTED)
		printf("%s: vbecall: res=%d, ax=%x\n",
		    sc->sc_dev.dv_xname, res, tf.tf_eax);

	kvm86_bios_delpage(KVM86_CALL_TASKVA, buf);
	return;
}

void
vesafb_set_mode(struct vga_pci_softc *sc, int mode)
{
	struct trapframe tf;
	int res;

	bzero(&tf, sizeof(struct trapframe));
	tf.tf_eax = VBE_FUNC_SETMODE;
	tf.tf_ebx = mode;

	res = kvm86_bioscall(BIOS_VIDEO_INTR, &tf);
	if (res || VBECALL_SUPPORT(tf.tf_eax) != VBECALL_SUPPORTED) {
		printf("%s: vbecall: res=%d, ax=%x\n",
		    sc->sc_dev.dv_xname, res, tf.tf_eax);
		return;
	}
}

int
vesafb_find_mode(struct vga_pci_softc *sc, int width, int height, int bpp)
{
	struct modeinfoblock mi;
	int i;

	if (vesabios_softc == NULL || vesabios_softc->sc_nmodes == 0)
		return -1;
#ifdef VESABIOSVERBOSE
	printf("vesafb_find_mode %d %d %d\n", width, height, bpp);
#endif
	/* Choose a graphics mode */
	for (i = 0; i < vesabios_softc->sc_nmodes; i++) {
		vesafb_get_mode_info(sc, vesabios_softc->sc_modes[i], &mi);
		if (mi.XResolution == width &&
		    mi.YResolution == height &&
		    mi.BitsPerPixel == bpp) {
			sc->sc_width = mi.XResolution;
			sc->sc_height = mi.YResolution;
			sc->sc_depth = mi.BitsPerPixel;
			sc->sc_linebytes = mi.BytesPerScanLine;
			sc->sc_base = mi.PhysBasePtr;
			break;
		}
	}
	if (i == vesabios_softc->sc_nmodes)
		return -1;
	else
		return vesabios_softc->sc_modes[i] | 0x4000; /* flat */
}

int
vesafb_putcmap(struct vga_pci_softc *sc, struct wsdisplay_cmap *cm)
{
	struct paletteentry pe;
	u_int idx, cnt;
	u_char r[256], g[256], b[256];
	u_char *rp, *gp, *bp;
	int rv, i;

	idx = cm->index;
	cnt = cm->count;

	if (idx >= 256 || cnt > 256 - idx)
		return EINVAL;

	rv = copyin(cm->red, &r[idx], cnt);
	if (rv)
		return rv;
	rv = copyin(cm->green, &g[idx], cnt);
	if (rv)
		return rv;
	rv = copyin(cm->blue, &b[idx], cnt);
	if (rv)
		return rv;

	memcpy(&sc->sc_cmap_red[idx], &r[idx], cnt);
	memcpy(&sc->sc_cmap_green[idx], &g[idx], cnt);
	memcpy(&sc->sc_cmap_blue[idx], &b[idx], cnt);

	rp = &sc->sc_cmap_red[idx];
	gp = &sc->sc_cmap_green[idx];
	bp = &sc->sc_cmap_blue[idx];

	for (i = 0; i < cnt; i++) {
		pe.Blue = *bp;
		pe.Green = *gp;
		pe.Red = *rp;
		pe.Alignment = 0;
		vesafb_set_palette(sc, idx, &pe);
		idx++;
		rp++, gp++, bp++;
	}

	return 0;
}

int
vesafb_getcmap(struct vga_pci_softc *sc, struct wsdisplay_cmap *cm)
{
	u_int idx, cnt;
	int rv;

	idx = cm->index;
	cnt = cm->count;

	if (idx >= 256 || cnt > 256 - idx)
		return EINVAL;

	rv = copyout(&sc->sc_cmap_red[idx], cm->red, cnt);
	if (rv)
		return rv;
	rv = copyout(&sc->sc_cmap_green[idx], cm->green, cnt);
	if (rv)
		return rv;
	rv = copyout(&sc->sc_cmap_blue[idx], cm->blue, cnt);
	if (rv)
		return rv;

	return 0;
}

static int
vesafb_getdepthflag(struct modeinfoblock *mi)
{
	int bpp, depth;

	depth = mi->RedMaskSize + mi->GreenMaskSize + mi->BlueMaskSize;
	bpp = mi->BitsPerPixel;
	switch (depth) {
	case 1:
		return WSDISPLAYIO_DEPTH_1;
	case 4:
		return WSDISPLAYIO_DEPTH_4;
	case 8:
		return WSDISPLAYIO_DEPTH_8;
	case 15:
		return WSDISPLAYIO_DEPTH_15;
	case 16:
		return WSDISPLAYIO_DEPTH_16;
	case 24:
		switch (bpp) {
		case 24:
			return WSDISPLAYIO_DEPTH_24_24;
		case 32:
			return WSDISPLAYIO_DEPTH_24_32;
		}
	}
	return 0;
}


int
vesafb_get_supported_depth(struct vga_pci_softc *sc)
{
	int i, depths;
	struct modeinfoblock mi;

	depths = 0;

	if (vesabios_softc == NULL || vesabios_softc->sc_nmodes == 0)
		return 0;

	for (i = 0; i < vesabios_softc->sc_nmodes; i++) {
		vesafb_get_mode_info(sc, vesabios_softc->sc_modes[i], &mi);
		depths |= vesafb_getdepthflag(&mi);
	}
	return depths;
}
@


1.8
log
@decouple struct uvmexp into a new file, so that uvm_extern.h and sysctl.h
don't need to be married.
ok guenther miod beck jsing kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: vesafb.c,v 1.7 2009/11/11 00:01:34 fgsch Exp $	*/
@


1.7
log
@Pass the structure by reference. pointed out and ok by miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vesafb.c,v 1.6 2008/04/28 19:28:37 miod Exp $	*/
a76 2

#include <uvm/uvm_extern.h>
@


1.6
log
@Do not alter mode parameter in vesafb_set_mode(), since we might ask for a
non-linear-graphics mode; found the hard way by
Yusuke Baba (babayaga1 , y8 dot dion dot ne dot jp), thanks for the report.
@
text
@d1 1
a1 1
/* $OpenBSD: vesafb.c,v 1.5 2007/11/25 16:43:39 jmc Exp $ */
d84 1
a84 1
void vesafb_set_palette(struct vga_pci_softc *, int, struct paletteentry);
d187 1
a187 1
vesafb_set_palette(struct vga_pci_softc *sc, int reg, struct paletteentry pe)
d198 3
d205 4
a208 5
	pe.Red >>= 2;
	pe.Green >>= 2;
	pe.Blue >>= 2;

	memcpy(buf, &pe, sizeof(struct paletteentry));
d315 1
a315 1
		vesafb_set_palette(sc, idx, pe);
@


1.5
log
@spelling fixes from Martynas Venckus; ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: vesafb.c,v 1.4 2007/02/18 19:19:02 gwk Exp $ */
d234 1
a234 1
	tf.tf_ebx = mode | 0x4000; /* flat */
d272 1
a272 1
		return vesabios_softc->sc_modes[i];
@


1.4
log
@Add currently unused functions for getting EDID information (max supported
resolution, hsync, vsync etc) from the monitor using DDC.

Cleanup a whole bunch of magic,
ok deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: vesafb.c,v 1.3 2007/01/28 20:28:50 gwk Exp $ */
d103 1
a103 1
	return VBECALL_SUCESS(tf.tf_eax);
d134 1
a134 1
	return VBECALL_SUCESS(tf.tf_eax);
@


1.3
log
@Fix a number of issues with vesabios discovered by miod@@

1. Add bounds checking to vga_pci_mmap, fixing a potential security issue.
Limit the amount of memory to what the vbe info structure says the card
card has. This should be nicely refined to limit to the amount of memory
needed by the active resolution and depth but this will do for the time
being.

2. Fix several places in vesafb.c where the return of kvm86_bios_addpage()
isnt being checked. Also ensure that if vesafb_get_mode_info() fails that it
cleans up after itself by releasing the page it added.

3. Correct the range checks in vesafb_putcmap and vesafb_getcmap, harmonize
code with similar code found else where.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: vesafb.c,v 1.2 2006/12/02 20:20:55 matthieu Exp $ */
d70 1
a80 1

d87 2
d90 8
d99 37
d144 1
a144 1
	tf.tf_eax = 0x4f03;
d146 2
a147 2
	res = kvm86_bioscall(0x10, &tf);
	if (res || (tf.tf_eax & 0xff) != 0x4f) {
d162 3
a164 2
	if ((buf = kvm86_bios_addpage(0x2000)) == NULL) {
		printf("%s: kvm86_bios_addpage(0x2000) failed.\n");
d168 1
a168 1
	tf.tf_eax = 0x4f01; /* function code */
d171 1
a171 1
	tf.tf_edi = 0x2000; /* buf ptr */
d173 2
a174 2
	res = kvm86_bioscall(0x10, &tf);
	if (res || (tf.tf_eax & 0xff) != 0x4f) {
d179 1
a179 1
		kvm86_bios_delpage(0x2000, buf);
d183 1
a183 1
	kvm86_bios_delpage(0x2000, buf);
d193 3
a195 2
	if ((buf = kvm86_bios_addpage(0x2000)) == NULL) {
		printf("%s: kvm86_bios_addpage(0x2000) failed.\n");
d210 1
a210 1
	tf.tf_eax = 0x4f09; /* function code */
d215 1
a215 1
	tf.tf_edi = 0x2000;
d217 2
a218 2
	res = kvm86_bioscall(0x10, &tf);
	if (res || (tf.tf_eax & 0xff) != 0x4f)
d222 1
a222 1
	kvm86_bios_delpage(0x2000, buf);
d233 1
a233 1
	tf.tf_eax = 0x4f02;
d236 2
a237 2
	res = kvm86_bioscall(0x10, &tf);
	if (res || (tf.tf_eax & 0xff) != 0x4f) {
@


1.2
log
@Make a debugging printf conditionnal to VESABIOSVERBOSE.
ok miod@@, gwk@@, deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: vesafb.c,v 1.1 2006/11/27 18:04:28 gwk Exp $ */
d115 4
a118 1
	buf = kvm86_bios_addpage(0x2000);
d129 1
a129 1
		printf("%s: error getting info for mode %04x\n",
d131 1
d145 4
a148 2
	buf = kvm86_bios_addpage(0x2000);

d238 1
a238 1
	if (idx >= 255 || cnt > 256 || idx + cnt > 256)
d281 1
a281 1
	if (idx >= 255 || cnt > 256 || idx + cnt > 256)
d301 1
a301 2
	
	
d334 1
a334 1
	
d337 1
a337 1
	
@


1.1
log
@commit vesabios for matthieu@@
ok deraadt, "slap it in" miod@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d197 1
a197 1

d199 1
@

