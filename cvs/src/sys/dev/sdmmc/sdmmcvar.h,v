head	1.26;
access;
symbols
	OPENBSD_6_2:1.26.0.8
	OPENBSD_6_2_BASE:1.26
	OPENBSD_6_1:1.26.0.6
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.26.0.2
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.22.0.10
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.8
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.22.0.6
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.4
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.21.0.8
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.6
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.4
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.2
	OPENBSD_5_0:1.20.0.2
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.18.0.2
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.16.0.6
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.4
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.15.0.2
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.10.0.4
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.2
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.26
date	2016.05.05.11.01.08;	author kettenis;	state Exp;
branches;
next	1.25;
commitid	tXZ4cDDS7O2NIM1F;

1.25
date	2016.05.04.09.30.06;	author kettenis;	state Exp;
branches;
next	1.24;
commitid	nKwnMLLuwctt5XwF;

1.24
date	2016.05.01.16.04.39;	author kettenis;	state Exp;
branches;
next	1.23;
commitid	rwmsBKqrjX2EodCO;

1.23
date	2016.04.30.11.32.23;	author kettenis;	state Exp;
branches;
next	1.22;
commitid	idV1JJlqFozdGODX;

1.22
date	2013.09.12.11.54.04;	author rapha;	state Exp;
branches;
next	1.21;

1.21
date	2011.11.10.14.24.29;	author uwe;	state Exp;
branches;
next	1.20;

1.20
date	2011.07.17.22.46.48;	author matthew;	state Exp;
branches;
next	1.19;

1.19
date	2011.07.09.00.39.29;	author matthew;	state Exp;
branches;
next	1.18;

1.18
date	2010.08.24.14.52.23;	author blambert;	state Exp;
branches;
next	1.17;

1.17
date	2010.08.19.17.54.12;	author jasper;	state Exp;
branches;
next	1.16;

1.16
date	2009.04.07.16.35.52;	author blambert;	state Exp;
branches;
next	1.15;

1.15
date	2009.02.20.19.16.35;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2009.02.06.20.16.41;	author grange;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.09.10.55.22;	author jsg;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.02.23.49.54;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2008.11.24.07.32.08;	author blambert;	state Exp;
branches;
next	1.10;

1.10
date	2007.11.29.13.16.06;	author todd;	state Exp;
branches;
next	1.9;

1.9
date	2007.05.31.10.09.01;	author uwe;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.26.18.37.45;	author uwe;	state Exp;
branches;
next	1.7;

1.7
date	2007.03.18.22.07.16;	author uwe;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.18.20.53.10;	author uwe;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.29.14.16.43;	author uwe;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.29.00.46.52;	author uwe;	state Exp;
branches;
next	1.3;

1.3
date	2006.07.18.04.10.35;	author uwe;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.01.21.53.41;	author uwe;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.28.17.21.14;	author uwe;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Add Dual Data Rate support for eMMC at 52MHz.
@
text
@/*	$OpenBSD: sdmmcvar.h,v 1.25 2016/05/04 09:30:06 kettenis Exp $	*/

/*
 * Copyright (c) 2006 Uwe Stuehler <uwe@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _SDMMCVAR_H_
#define _SDMMCVAR_H_

#include <sys/queue.h>
#include <sys/rwlock.h>

#include <machine/bus.h>

#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>

#include <dev/sdmmc/sdmmcchip.h>
#include <dev/sdmmc/sdmmcreg.h>

struct sdmmc_csd {
	int	csdver;		/* CSD structure format */
	int	mmcver;		/* MMC version (for CID format) */
	int	capacity;	/* total number of sectors */
	int	sector_size;	/* sector size in bytes */
	int	read_bl_len;	/* block length for reads */
	int	ccc;		/* Card Command Class for SD */
	/* ... */
};

struct sdmmc_cid {
	int	mid;		/* manufacturer identification number */
	int	oid;		/* OEM/product identification number */
	char	pnm[8];		/* product name (MMC v1 has the longest) */
	int	rev;		/* product revision */
	int	psn;		/* product serial number */
	int	mdt;		/* manufacturing date */
};

struct sdmmc_scr {
	int	sd_spec;
	int	bus_width;
};

typedef u_int32_t sdmmc_response[4];

struct sdmmc_softc;

struct sdmmc_task {
	void (*func)(void *arg);
	void *arg;
	int onqueue;
	struct sdmmc_softc *sc;
	TAILQ_ENTRY(sdmmc_task) next;
};

#define	sdmmc_init_task(xtask, xfunc, xarg) do {			\
	(xtask)->func = (xfunc);					\
	(xtask)->arg = (xarg);						\
	(xtask)->onqueue = 0;						\
	(xtask)->sc = NULL;						\
} while (0)

#define sdmmc_task_pending(xtask) ((xtask)->onqueue)

struct sdmmc_command {
	struct sdmmc_task c_task;	/* task queue entry */
	u_int16_t	 c_opcode;	/* SD or MMC command index */
	u_int32_t	 c_arg;		/* SD/MMC command argument */
	sdmmc_response	 c_resp;	/* response buffer */
	bus_dmamap_t	 c_dmamap;
	void		*c_data;	/* buffer to send or read into */
	int		 c_datalen;	/* length of data buffer */
	int		 c_blklen;	/* block length */
	int		 c_flags;	/* see below */
#define SCF_ITSDONE	 0x0001		/* command is complete */
#define SCF_CMD(flags)	 ((flags) & 0x00f0)
#define SCF_CMD_AC	 0x0000
#define SCF_CMD_ADTC	 0x0010
#define SCF_CMD_BC	 0x0020
#define SCF_CMD_BCR	 0x0030
#define SCF_CMD_READ	 0x0040		/* read command (data expected) */
#define SCF_RSP_BSY	 0x0100
#define SCF_RSP_136	 0x0200
#define SCF_RSP_CRC	 0x0400
#define SCF_RSP_IDX	 0x0800
#define SCF_RSP_PRESENT	 0x1000
/* response types */
#define SCF_RSP_R0	 0 /* none */
#define SCF_RSP_R1	 (SCF_RSP_PRESENT|SCF_RSP_CRC|SCF_RSP_IDX)
#define SCF_RSP_R1B	 (SCF_RSP_PRESENT|SCF_RSP_CRC|SCF_RSP_IDX|SCF_RSP_BSY)
#define SCF_RSP_R2	 (SCF_RSP_PRESENT|SCF_RSP_CRC|SCF_RSP_136)
#define SCF_RSP_R3	 (SCF_RSP_PRESENT)
#define SCF_RSP_R4	 (SCF_RSP_PRESENT)
#define SCF_RSP_R5	 (SCF_RSP_PRESENT|SCF_RSP_CRC|SCF_RSP_IDX)
#define SCF_RSP_R5B	 (SCF_RSP_PRESENT|SCF_RSP_CRC|SCF_RSP_IDX|SCF_RSP_BSY)
#define SCF_RSP_R6	 (SCF_RSP_PRESENT|SCF_RSP_CRC|SCF_RSP_IDX)
#define SCF_RSP_R7	 (SCF_RSP_PRESENT|SCF_RSP_CRC|SCF_RSP_IDX)
	int		 c_error;	/* errno value on completion */

	/* Host controller owned fields for data xfer in progress */
	int c_resid;			/* remaining I/O */
	u_char *c_buf;			/* remaining data */
};

/*
 * Decoded PC Card 16 based Card Information Structure (CIS),
 * per card (function 0) and per function (1 and greater).
 */
struct sdmmc_cis {
	u_int16_t	 manufacturer;
#define SDMMC_VENDOR_INVALID	0xffff
	u_int16_t	 product;
#define SDMMC_PRODUCT_INVALID	0xffff
	u_int8_t	 function;
#define SDMMC_FUNCTION_INVALID	0xff
	u_char		 cis1_major;
	u_char		 cis1_minor;
	char		 cis1_info_buf[256];
	char		*cis1_info[4];
};

/*
 * Structure describing either an SD card I/O function or a SD/MMC
 * memory card from a "stack of cards" that responded to CMD2.  For a
 * combo card with one I/O function and one memory card, there will be
 * two of these structures allocated.  Each card slot has such a list
 * of sdmmc_function structures.
 */
struct sdmmc_function {
	/* common members */
	struct sdmmc_softc *sc;		/* card slot softc */
	u_int16_t rca;			/* relative card address */
	int flags;
#define SFF_ERROR		0x0001	/* function is poo; ignore it */
#define SFF_SDHC		0x0002	/* SD High Capacity card */
	SIMPLEQ_ENTRY(sdmmc_function) sf_list;
	/* SD card I/O function members */
	int number;			/* I/O function number or -1 */
	struct device *child;		/* function driver */
	struct sdmmc_cis cis;		/* decoded CIS */
	/* SD/MMC memory card members */
	struct sdmmc_csd csd;		/* decoded CSD value */
	struct sdmmc_cid cid;		/* decoded CID value */
	sdmmc_response raw_cid;		/* temp. storage for decoding */
	struct sdmmc_scr scr;		/* decoded SCR value */
};

/*
 * Structure describing a single SD/MMC/SDIO card slot.
 */
struct sdmmc_softc {
	struct device sc_dev;		/* base device */
#define DEVNAME(sc)	((sc)->sc_dev.dv_xname)
	sdmmc_chipset_tag_t sct;	/* host controller chipset tag */
	sdmmc_chipset_handle_t sch;	/* host controller chipset handle */

	bus_dma_tag_t sc_dmat;
	bus_dmamap_t sc_dmap;
#define SDMMC_MAXNSEGS	((MAXPHYS / PAGE_SIZE) + 1)

	int sc_flags;
#define SMF_SD_MODE		0x0001	/* host in SD mode (MMC otherwise) */
#define SMF_IO_MODE		0x0002	/* host in I/O mode (SD mode only) */
#define SMF_MEM_MODE		0x0004	/* host in memory mode (SD or MMC) */
#define SMF_CARD_PRESENT	0x0010	/* card presence noticed */
#define SMF_CARD_ATTACHED	0x0020	/* card driver(s) attached */
#define	SMF_STOP_AFTER_MULTIPLE	0x0040	/* send a stop after a multiple cmd */
#define SMF_CONFIG_PENDING	0x0080	/* config_pending_incr() called */

	uint32_t sc_caps;		/* host capability */
#define SMC_CAPS_AUTO_STOP	0x0001	/* send CMD12 automagically by host */
#define SMC_CAPS_4BIT_MODE	0x0002	/* 4-bits data bus width */
#define SMC_CAPS_DMA		0x0004	/* DMA transfer */
#define SMC_CAPS_SPI_MODE	0x0008	/* SPI mode */
#define SMC_CAPS_POLL_CARD_DET	0x0010	/* Polling card detect */
#define SMC_CAPS_SINGLE_ONLY	0x0020	/* only single read/write */
#define SMC_CAPS_8BIT_MODE	0x0040	/* 8-bits data bus width */
#define SMC_CAPS_MULTI_SEG_DMA	0x0080	/* multiple segment DMA transfer */
#define SMC_CAPS_SD_HIGHSPEED	0x0100	/* SD high-speed timing */
#define SMC_CAPS_MMC_HIGHSPEED	0x0200	/* MMC high-speed timing */
#define SMC_CAPS_UHS_SDR50	0x0400	/* UHS SDR50 timing */
#define SMC_CAPS_UHS_SDR104	0x0800	/* UHS SDR104 timing */
#define SMC_CAPS_UHS_DDR50	0x1000	/* UHS DDR50 timing */
#define SMC_CAPS_UHS_MASK	0x1c00
#define SMC_CAPS_MMC_DDR52	0x2000  /* eMMC DDR52 timing */
#define SMC_CAPS_MMC_HS200	0x4000	/* eMMC HS200 timing */
#define SMC_CAPS_MMC_HS400	0x8000	/* eMMC HS400 timing */

	int sc_function_count;		/* number of I/O functions (SDIO) */
	struct sdmmc_function *sc_card;	/* selected card */
	struct sdmmc_function *sc_fn0;	/* function 0, the card itself */
	SIMPLEQ_HEAD(, sdmmc_function) sf_head; /* list of card functions */
	int sc_dying;			/* bus driver is shutting down */
	struct proc *sc_task_thread;	/* asynchronous tasks */
	TAILQ_HEAD(, sdmmc_task) sc_tskq;   /* task thread work queue */
	struct sdmmc_task sc_discover_task; /* card attach/detach task */
	struct sdmmc_task sc_intr_task;	/* card interrupt task */
	struct rwlock sc_lock;		/* lock around host controller */
	void *sc_scsibus;		/* SCSI bus emulation softc */
	TAILQ_HEAD(, sdmmc_intr_handler) sc_intrq; /* interrupt handlers */
	long sc_max_xfer;		/* maximum transfer size */
};

/*
 * Attach devices at the sdmmc bus.
 */
struct sdmmc_attach_args {
	struct scsi_link *scsi_link;	/* XXX */
	struct sdmmc_function *sf;
};

#define IPL_SDMMC	IPL_BIO
#define splsdmmc()	splbio()

#define	SDMMC_ASSERT_LOCKED(sc) \
	rw_assert_wrlock(&(sc)->sc_lock)

void	sdmmc_add_task(struct sdmmc_softc *, struct sdmmc_task *);
void	sdmmc_del_task(struct sdmmc_task *);

struct	sdmmc_function *sdmmc_function_alloc(struct sdmmc_softc *);
void	sdmmc_function_free(struct sdmmc_function *);
int	sdmmc_set_bus_power(struct sdmmc_softc *, u_int32_t, u_int32_t);
int	sdmmc_mmc_command(struct sdmmc_softc *, struct sdmmc_command *);
int	sdmmc_app_command(struct sdmmc_softc *, struct sdmmc_command *);
void	sdmmc_go_idle_state(struct sdmmc_softc *);
int	sdmmc_select_card(struct sdmmc_softc *, struct sdmmc_function *);
int	sdmmc_set_relative_addr(struct sdmmc_softc *,
	    struct sdmmc_function *);
int	sdmmc_send_if_cond(struct sdmmc_softc *, uint32_t);

void	sdmmc_intr_enable(struct sdmmc_function *);
void	sdmmc_intr_disable(struct sdmmc_function *);
void	*sdmmc_intr_establish(struct device *, int (*)(void *),
	    void *, const char *);
void	sdmmc_intr_disestablish(void *);
void	sdmmc_intr_task(void *);

int	sdmmc_io_enable(struct sdmmc_softc *);
void	sdmmc_io_scan(struct sdmmc_softc *);
int	sdmmc_io_init(struct sdmmc_softc *, struct sdmmc_function *);
void	sdmmc_io_attach(struct sdmmc_softc *);
void	sdmmc_io_detach(struct sdmmc_softc *);
u_int8_t sdmmc_io_read_1(struct sdmmc_function *, int);
u_int16_t sdmmc_io_read_2(struct sdmmc_function *, int);
u_int32_t sdmmc_io_read_4(struct sdmmc_function *, int);
int	sdmmc_io_read_multi_1(struct sdmmc_function *, int, u_char *, int);
void	sdmmc_io_write_1(struct sdmmc_function *, int, u_int8_t);
void	sdmmc_io_write_2(struct sdmmc_function *, int, u_int16_t);
void	sdmmc_io_write_4(struct sdmmc_function *, int, u_int32_t);
int	sdmmc_io_write_multi_1(struct sdmmc_function *, int, u_char *, int);
int	sdmmc_io_function_ready(struct sdmmc_function *);
int	sdmmc_io_function_enable(struct sdmmc_function *);
void	sdmmc_io_function_disable(struct sdmmc_function *);

int	sdmmc_read_cis(struct sdmmc_function *, struct sdmmc_cis *);
void	sdmmc_print_cis(struct sdmmc_function *);
void	sdmmc_check_cis_quirks(struct sdmmc_function *);

int	sdmmc_mem_enable(struct sdmmc_softc *);
void	sdmmc_mem_scan(struct sdmmc_softc *);
int	sdmmc_mem_init(struct sdmmc_softc *, struct sdmmc_function *);
int	sdmmc_mem_read_block(struct sdmmc_function *, int, u_char *, size_t);
int	sdmmc_mem_write_block(struct sdmmc_function *, int, u_char *, size_t);

/* ioctls */

#include <sys/ioccom.h>

struct bio_sdmmc_command {
	void *cookie;
	struct sdmmc_command cmd;
};

struct bio_sdmmc_debug {
	void *cookie;
	int debug;
};

#define SDIOCEXECMMC	_IOWR('S',0, struct bio_sdmmc_command)
#define SDIOCEXECAPP	_IOWR('S',1, struct bio_sdmmc_command)
#define SDIOCSETDEBUG	_IOWR('S',2, struct bio_sdmmc_debug)

#endif
@


1.25
log
@Add high-speed support for SD cards.  In theory this should double the
transfer rates to and from the card.  In practice the improvement will be
smaller, but I am seeing serious improvement in the read speeds.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.24 2016/05/01 16:04:39 kettenis Exp $	*/
d194 7
@


1.24
log
@Add support for changing the bus width to the sdmmc subsystem and the sdhc(4)
controller.  Use this to switch SD cards to a 4-bit bus if they support it.

ok deraadt@@, jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.23 2016/04/30 11:32:23 kettenis Exp $	*/
d39 1
@


1.23
log
@Implement DMA support.  Bits and pieces taken from NetBSD, but we only
support ADMA2.  The older SDMA mode has too many limitations to be really
usable.  Gives us only moderate speed improvements, bus reduces the CPU load
considerably.  We will reap the full benefits once we implement wider bus
widths and high speed modes.

There is a remining issue with simultanious use of eMMC and external SD card
on (some) Intel Bay Trail hardware.  Still under investigation.

ok patrick@@, stsp@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.22 2013/09/12 11:54:04 rapha Exp $	*/
d51 5
d157 1
@


1.22
log
@Add basic support for eMMC memory.
Heavily based on netbsd.

Tested by dlg@@, bcallah@@ (sdhc), stsp@@ (rstx) and me (ommmc).

ok patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.21 2011/11/10 14:24:29 uwe Exp $	*/
d25 2
d77 1
d162 5
@


1.21
log
@Fixed config_pending calls in sdmmc(4)

Root on SD/MMC card did not work reliably because the config_pending
state was cleared too early.  This change will clear config_pending
only after the card discovery has actually completed once.

ok deraadt@@ drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.20 2011/07/17 22:46:48 matthew Exp $	*/
d167 13
@


1.20
log
@Backout a bunch of my SCSI commits from c2k11.  At least one of these
is causing problems when trying to boot sparc64 from an isp(4).

Verified to fix the sparc64/isp(4) regression by krw@@; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.19 2011/07/09 00:39:29 matthew Exp $	*/
d166 1
@


1.19
log
@Kludge around sdmmc(4)'s poor design: replace "struct scsi_link *"
with "struct scsibus_attach_args" in sdmmc_attach_args.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.18 2010/08/24 14:52:23 blambert Exp $	*/
d185 1
a185 1
	struct scsibus_attach_args saa;	/* XXX */
@


1.18
log
@lockmgr -> rwlock conversion

and with this, my adventure in sdmmc-land is over
bikeshed is still banana-shaped

ok oga@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.17 2010/08/19 17:54:12 jasper Exp $	*/
d185 1
a185 1
	struct scsi_link *scsi_link;	/* XXX */
@


1.17
log
@- fold several occurences of DEVNAME() into one located in sdmmcvar.h.
making DEVNAME() usage a lot more consistent.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.16 2009/04/07 16:35:52 blambert Exp $	*/
d23 1
a23 1
#include <sys/lock.h>
d175 1
a175 1
	struct lock sc_lock;		/* lock around host controller */
a191 2
#define SDMMC_LOCK(sc)	 lockmgr(&(sc)->sc_lock, LK_EXCLUSIVE, NULL)
#define SDMMC_UNLOCK(sc) lockmgr(&(sc)->sc_lock, LK_RELEASE, NULL)
d193 1
a193 1
	KASSERT(lockstatus(&((sc))->sc_lock) == LK_EXCLUSIVE)
@


1.16
log
@Remove recursion from the sdmmc locking regime.

In snaps for a while.

Originally hacked on phessler@@'s couch.
Testing by many, input from jsg@@

"I'm tired of seeing the Ms" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.15 2009/02/20 19:16:35 miod Exp $	*/
d156 1
a156 1
#define SDMMCDEVNAME(sc)	((sc)->sc_dev.dv_xname)
@


1.15
log
@Let the sdmmc adapters tell the sdmmc layer how much sectors they can
transfer with one command. Build on this and the recent minphys() changes
in the sdmmc layer to crank transfers at the maximum possible size instead
of a sad DEV_BSIZE.

Depending on your controller, this can speed up sdmmc I/O up to 2.5 times.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.14 2009/02/06 20:16:41 grange Exp $	*/
d194 2
@


1.14
log
@Fix crash on zaurus when sd memory card plugged by providing an attachment
structure that slave devices like sbt expect.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.13 2009/01/09 10:55:22 jsg Exp $	*/
d165 1
d178 1
@


1.13
log
@Add support for SDHC cards on SDHC capable host controllers.
Thanks to everyone who tested in particular jsing@@ who found several
problems in the initial diffs.

ok dlg@@ jsing@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.12 2008/12/02 23:49:54 deraadt Exp $	*/
d183 1
a183 1
	struct scsi_link scsi_link;	/* XXX */
@


1.12
log
@backout: would have been nice if this had been tested, to see that it
crashes the moment a card is plugged in.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.10 2007/11/29 13:16:06 todd Exp $	*/
d101 1
d139 1
d205 1
@


1.11
log
@Rework sdmmc locking to remove recursion
Add SDMMC_ASSERT_LOCKED(), replacing many locking calls, and sprinkling
the assertion to make sure that future changes don't catch us out

"please commit" uwe@@
@
text
@a189 6
#ifdef DIAGNOSTIC
#define	SDMMC_ASSERT_LOCKED(sc) \
	KASSERT(lockstatus(&((sc))->sc_lock) == LK_EXCLUSIVE)
#else
#define	SDMMC_ASSERT_LOCKED(sc)
#endif /* DIAGNOSTIC */
@


1.10
log
@unbreak the zaurus kernel build by adding a missing header
co-discovered by robert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.9 2007/05/31 10:09:01 uwe Exp $	*/
d190 6
@


1.9
log
@Add SDIO card interrupt handling code
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.8 2007/05/26 18:37:45 uwe Exp $	*/
d23 1
@


1.8
log
@Wait until an I/O function becomes ready after enabling it, and make
sdmmc_io_rw_extended() non-incremental, by default.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.7 2007/03/18 22:07:16 uwe Exp $	*/
d170 1
d173 1
d202 7
@


1.7
log
@DHC automatically sends a CMD12 after multiple-block transfers, but other
controllers don't.  Put in a temporary hack for pxammc on Zaurus.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.6 2007/03/18 20:53:10 uwe Exp $	*/
d209 1
d213 3
a215 1
void	sdmmc_io_function_enable(struct sdmmc_function *);
@


1.6
log
@Support the PXA27x SD/SDIO/MMC controller on Zaurus

We use the suggested workaround for the problem E40 in the PXA27x errata
sheet. Unfortunately this limits the bus speed to 9.75Mhz.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.5 2006/11/29 14:16:43 uwe Exp $	*/
d93 1
@


1.5
log
@move CSD/CID decoding to sdmmc_mem.c
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.4 2006/11/29 00:46:52 uwe Exp $	*/
d79 1
d98 1
a98 1
#define SCF_RSP_R6	 (SCF_RSP_PRESENT|SCF_RSP_CRC)
d100 4
@


1.4
log
@add ioctl hack to support the sdio(8) userland tool
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.3 2006/07/18 04:10:35 uwe Exp $	*/
a193 5
int	sdmmc_decode_csd(struct sdmmc_softc *, sdmmc_response,
	    struct sdmmc_function *);
int	sdmmc_decode_cid(struct sdmmc_softc *, sdmmc_response,
	    struct sdmmc_function *);
void	sdmmc_print_cid(struct sdmmc_cid *);
@


1.3
log
@First and foremost, avoid an obious race between two or more processes
trying to get MMC commands through to the SD/MMC host controller via the
emulated SCSI layer.  This is achieved by ensuring exclusive access to
the host controller for one process during any MMC command and during a
sequence of commands at the sdmmc(4) layer.

While at it, the command processing thread has been moved to sdmmc(4),
so as to simplify the implementation of future host controller drivers.
This should also pave the way for further cleanup of the code and for
new drivers.

Minor cleanups are included in this commit, as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.2 2006/06/01 21:53:41 uwe Exp $	*/
d223 18
@


1.2
log
@SDIO card identification
@
text
@d1 1
a1 1
/*	$OpenBSD: sdmmcvar.h,v 1.1 2006/05/28 17:21:14 uwe Exp $	*/
d48 3
a50 1
struct sdmmc_command;
d52 16
a67 2
typedef u_int32_t sdmmc_response[4];
typedef void (*sdmmc_callback)(struct device *, struct sdmmc_command *);
d70 1
d78 1
a78 4
#define SCF_DONE	 0x0001		/* command is finished */
#define SCF_BUF_READY	 0x0002		/* buffer ready int occurred */
#define SCF_CMD_DONE	 0x0004		/* cmd complete int occurred */
#define SCF_XFR_DONE	 0x0008		/* transfer complete int occurred */
a97 1
	sdmmc_callback	 c_done;	/* callback function */
d154 2
a156 1
	void *sc_scsibus;		/* SCSI bus emulation softc */
d159 7
a165 1
	SIMPLEQ_HEAD(, sdmmc_function) sf_head;
d179 6
a186 1
void	sdmmc_delay(u_int);
d221 2
a222 4
int	sdmmc_mem_read_block(struct sdmmc_softc *,
	    struct sdmmc_function *, int, u_char *, size_t);
int	sdmmc_mem_write_block(struct sdmmc_softc *,
	    struct sdmmc_function *, int, u_char *, size_t);
@


1.1
log
@Support for standard SD host controllers like the Ricoh 5C822, a small
generic bus layer, and SCSI emulation for SD/MMC memory cards.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d23 4
d81 2
d88 28
a115 2
struct sdmmc_card {
	u_int16_t rca;
d117 10
a126 5
#define SDMMCF_CARD_ERROR	0x0010	/* card in error state */
	sdmmc_response raw_cid;
	struct sdmmc_cid cid;
	struct sdmmc_csd csd;
	SIMPLEQ_ENTRY(sdmmc_card) cs_list;
d129 3
d139 1
a139 1
#define SMF_IO_MODE		0x0002	/* host in I/O mode (SD only) */
d141 1
a141 2
	SIMPLEQ_HEAD(, sdmmc_card) cs_head;
	struct sdmmc_card *sc_card;	/* selected card */
d143 11
d159 2
d166 8
a173 1
int	sdmmc_select_card(struct sdmmc_softc *, struct sdmmc_card *);
d176 16
a191 2
void	sdmmc_io_reset(struct sdmmc_softc *);
int	sdmmc_io_send_op_cond(struct sdmmc_softc *, u_int32_t, u_int32_t *);
d194 6
a199 5
int	sdmmc_mem_init(struct sdmmc_softc *, struct sdmmc_card *);
int	sdmmc_mem_read_block(struct sdmmc_softc *, struct sdmmc_card *,
	    int, u_char *, size_t);
int	sdmmc_mem_write_block(struct sdmmc_softc *, struct sdmmc_card *,
	    int, u_char *, size_t);
@

