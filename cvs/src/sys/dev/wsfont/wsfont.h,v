head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.12
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.10
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.8
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.8.0.8
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.6
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.4
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.5.0.14
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.12
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.10
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.6
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.10
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.8
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.6
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.16
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.14
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.12
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.10
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.8
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.1.0.8
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.2;
locks; strict;
comment	@ * @;


1.10
date	2013.10.20.21.24.01;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2013.10.20.16.44.48;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2012.01.10.18.53.18;	author shadchin;	state Exp;
branches;
next	1.7;

1.7
date	2012.01.10.18.50.40;	author shadchin;	state Exp;
branches;
next	1.6;

1.6
date	2012.01.06.14.55.38;	author shadchin;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.26.05.42.20;	author ray;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.15.20.23.10;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.03.16.08;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.27.03;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.18.04.30.24;	author nate;	state Exp;
branches
	1.1.4.1
	1.1.8.1;
next	;

1.1.4.1
date	2001.05.14.22.26.36;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2002.03.30.08.19.20;	author niklas;	state Exp;
branches;
next	;

1.1.8.1
date	2002.06.11.03.42.32;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@No longer store fonts added with the WSDISPLAYIO_LDFONT ioctl into the
wsdisplay softc. Instead, since the knowledge about available fonts lies in
the parent driver itself, introduce a list_font wsdisplay_accessop which
queries a font index, suitable to use within the WSDISPLAYIO_LSFONT ioctl.

With this in place:
- there is no global wsdisplay limit on the number of fonts loaded. Such a
  limit will be enforced by the display drivers themselves.
- built-in kernel fonts will now appear in the list of fonts.

Grow a list_font accesop for rasops, which relies upon wsfont_enum(), which
is turned into something useful (and abortable if you do not need to iterate
further). Not used by any rasops driver yet.
@
text
@/*	$OpenBSD: wsfont.h,v 1.9 2013/10/20 16:44:48 miod Exp $ */
/*	$NetBSD: wsfont.h,v 1.12 2000/06/13 13:37:07 ad Exp $	*/

/*-
 * Copyright (c) 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Andrew Doran.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _WSFONT_H_
#define _WSFONT_H_ 1

/*
 * wsfont_find() can be called with any of the parameters as 0, meaning we
 * don't care about that aspect of the font. It returns a cookie which
 * we can use with the other functions. When more flexibility is required,
 * wsfont_enum() should be used. The last two parameters to wsfont_lock()
 * are the bit order and byte order required (WSDISPLAY_FONTORDER_L2R or
 * WSDISPLAY_FONTORDER_R2L).
 *
 * Example:
 *
 *	struct wsdisplay_font *font;
 *	int cookie;
 *
 *	if ((cookie = wsfont_find(NULL, 8, 16, 0, 0)) <= 0)
 *		panic("unable to get 8x16 font");
 *
 *	if (wsfont_lock(cookie, &font, WSDISPLAY_FONTORDER_L2R,
 *	    WSDISPLAY_FONTORDER_R2L) <= 0)
 *		panic("unable to lock font");
 *
 *	... do stuff ...
 *
 *	wsfont_unlock(cookie);
 */

struct wsdisplay_font;

/* For wsfont_add() */
#define WSFONT_BUILTIN	(0x01)
#define WSFONT_STATIC	(0x02)

/* wsfont.c */
void	wsfont_init(void);
int	wsfont_find(const char *, int, int, int);
int	wsfont_add(struct wsdisplay_font *, int);
int	wsfont_remove(int);
void	wsfont_enum(int (*)(void *, struct wsdisplay_font *), void *);
int	wsfont_lock(int, struct wsdisplay_font **, int, int);
int	wsfont_unlock(int);
int	wsfont_map_unichar(struct wsdisplay_font *, int);
int	wsfont_rotate(int);

#endif	/* !_WSFONT_H_ */
@


1.9
log
@Add a load_font accessop to rasops, to allow for fonts to be loaded and
selected. All rasops fonts are managed by wsfont, which allows a font to be
loaded on a rasops device and used on another.

Currently not plumbed in any driver yet. This is work in progress.
@
text
@d1 1
a1 1
/*	$OpenBSD: wsfont.h,v 1.8 2012/01/10 18:53:18 shadchin Exp $ */
d72 1
a72 1
void	wsfont_enum(void (*)(const char *, int, int, int));
@


1.8
log
@Remove unused definition WSFONT_RDONLY.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wsfont.h,v 1.7 2012/01/10 18:50:40 shadchin Exp $ */
d69 1
a69 1
int	wsfont_find(char *, int, int, int);
d72 1
a72 1
void	wsfont_enum(void (*)(char *, int, int, int));
@


1.7
log
@Remove unused function wsfont_getflg.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wsfont.h,v 1.6 2012/01/06 14:55:38 shadchin Exp $ */
a65 1
#define WSFONT_RDONLY	(0x04)
@


1.6
log
@Remove extra and trailing spaces.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wsfont.h,v 1.5 2008/06/26 05:42:20 ray Exp $ */
a75 1
int	wsfont_getflg(int, int *, int *);
@


1.5
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 2
a2 2
/*	$OpenBSD: wsfont.h,v 1.4 2005/09/15 20:23:10 miod Exp $ */
/* 	$NetBSD: wsfont.h,v 1.12 2000/06/13 13:37:07 ad Exp $	*/
d41 1
a41 1
 * are the bit order and byte order required (WSDISPLAY_FONTORDER_L2R or 
@


1.4
log
@Stop compiling the texte console rotation code #ifdef __zaurus__, but use
a flag in the rasops_info structure; drivers which may use it shall declare
a specific attribute for the config(8) machinery, so that the necessary code
is compiled in.

In addition to this, rotated font computation is now done on-demand, and a
list of unrotated-rotated font cookie pairs is kept, rather than rotating all
built-in wsfonts at initialization time.

No user-perceptible functional change.

Tested matthieu@@ uwe@@, ok uwe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wsfont.h,v 1.3 2002/03/14 03:16:08 millert Exp $ */
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.3
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: wsfont.h,v 1.2 2002/03/14 01:27:03 millert Exp $ */
d85 1
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: wsfont.h,v 1.1 2001/03/18 04:30:24 nate Exp $ */
d80 1
a80 1
void	wsfont_enum __P((void (*)(char *, int, int, int)));
@


1.1
log
@Importing wsfont stuff from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d76 9
a84 9
void	wsfont_init __P((void));
int	wsfont_find __P((char *, int, int, int));
int	wsfont_add __P((struct wsdisplay_font *, int));
int	wsfont_remove __P((int));
void	wsfont_enum __P((void (*) __P((char *, int, int, int))));
int	wsfont_lock __P((int, struct wsdisplay_font **, int, int));
int	wsfont_unlock __P((int));
int	wsfont_getflg __P((int, int *, int *));
int	wsfont_map_unichar __P((struct wsdisplay_font *, int));
@


1.1.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: wsfont.h,v 1.1 2001/03/18 04:30:24 nate Exp $ */
d76 9
a84 9
void	wsfont_init(void);
int	wsfont_find(char *, int, int, int);
int	wsfont_add(struct wsdisplay_font *, int);
int	wsfont_remove(int);
void	wsfont_enum(void (*)(char *, int, int, int));
int	wsfont_lock(int, struct wsdisplay_font **, int, int);
int	wsfont_unlock(int);
int	wsfont_getflg(int, int *, int *);
int	wsfont_map_unichar(struct wsdisplay_font *, int);
@


1.1.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: wsfont.h,v 1.1 2001/03/18 04:30:24 nate Exp $ */
@


1.1.4.2
log
@Merge unpeeing cvs missed
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d76 9
a84 9
void	wsfont_init(void);
int	wsfont_find(char *, int, int, int);
int	wsfont_add(struct wsdisplay_font *, int);
int	wsfont_remove(int);
void	wsfont_enum(void (*)(char *, int, int, int));
int	wsfont_lock(int, struct wsdisplay_font **, int, int);
int	wsfont_unlock(int);
int	wsfont_getflg(int, int *, int *);
int	wsfont_map_unichar(struct wsdisplay_font *, int);
@


