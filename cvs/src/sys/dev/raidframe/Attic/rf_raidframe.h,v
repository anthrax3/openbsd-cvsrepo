head	1.7;
access;
symbols
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.38
	OPENBSD_5_0:1.6.0.36
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.34
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.32
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.28
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.30
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.26
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.24
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.22
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.20
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.18
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.16
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.14
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.12
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.10
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.8
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.5.0.12
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.10
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.8
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.2
	SMP_BASE:1.4
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2012.04.06.15.53.59;	author jsing;	state dead;
branches;
next	1.6;

1.6
date	2002.12.16.07.01.05;	author tdeval;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.08.16.07.44;	author peter;	state Exp;
branches
	1.5.8.1;
next	1.4;

1.4
date	2000.01.07.14.50.22;	author peter;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	99.07.30.14.45.33;	author peter;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.03.19;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.29.44;	author niklas;	state Exp;
branches;
next	;

1.4.2.1
date	2001.05.14.22.26.13;	author niklas;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2003.03.28.00.38.29;	author niklas;	state Exp;
branches;
next	;

1.5.8.1
date	2003.05.19.22.21.53;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_raidframe.h,v 1.6 2002/12/16 07:01:05 tdeval Exp $	*/
/*	$NetBSD: rf_raidframe.h,v 1.11 2000/05/28 00:48:31 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*****************************************************
 *
 * rf_raidframe.h
 *
 * Main header file for using RAIDframe in the kernel.
 *
 *****************************************************/


#ifndef	_RF__RF_RAIDFRAME_H_
#define	_RF__RF_RAIDFRAME_H_

#include "rf_types.h"
#include "rf_configure.h"
#include "rf_disks.h"
#include "rf_raid.h"

typedef RF_uint32 RF_ReconReqFlags_t;

struct rf_recon_req {	/* Used to tell the kernel to fail a disk. */
	RF_RowCol_t		 row, col;
	RF_ReconReqFlags_t	 flags;
	void			*raidPtr;	/*
						 * Used internally; need not be
						 * set at ioctl time.
						 */
	struct rf_recon_req	*next;		/*
						 * Used internally; need not be
						 * set at ioctl time.
						 */
};

struct RF_SparetWait_s {
	int			 C, G, fcol;	/*
						 * C = # disks in row,
						 * G = # units in stripe,
						 * fcol = which disk has failed
						 */

	RF_StripeCount_t	 SUsPerPU;	/*
						 * This stuff is the info
						 * required to create a spare
						 * table.
						 */
	int			 TablesPerSpareRegion;
	int			 BlocksPerTable;
	RF_StripeCount_t	 TableDepthInPUs;
	RF_StripeCount_t	 SpareSpaceDepthPerRegionInSUs;

	RF_SparetWait_t		*next;		/*
						 * Used internally; need not be
						 * set at ioctl time.
						 */
};

typedef struct RF_DeviceConfig_s {
	u_int			rows;
	u_int			cols;
	u_int			maxqdepth;
	int			ndevs;
	RF_RaidDisk_t		devs[RF_MAX_DISKS];
	int			nspares;
	RF_RaidDisk_t		spares[RF_MAX_DISKS];
} RF_DeviceConfig_t;


typedef struct RF_ProgressInfo_s {
	RF_uint64		remaining;
	RF_uint64		completed;
	RF_uint64		total;
} RF_ProgressInfo_t;

/* Flags that can be put in the rf_recon_req structure. */
#define	RF_FDFLAGS_NONE		0x0	/* Just fail the disk. */
#define	RF_FDFLAGS_RECON	0x1	/* Fail and initiate recon. */

#define	RF_SCSI_DISK_MAJOR	8	/*
					 * The device major number for disks
					 * in the system.
					 */

	/* Configure the driver. */
#define	RAIDFRAME_CONFIGURE		_IOW ('r',  1, void *)
	/* Shutdown the driver. */
#define	RAIDFRAME_SHUTDOWN		_IO  ('r',  2)
	/* Debug only: test unit ready. */
#define	RAIDFRAME_TUR			_IOW ('r',  3, dev_t)
	/* Run a test access. */
#define	RAIDFRAME_TEST_ACC		_IOWR('r',  4, struct rf_test_acc)
	/* Fail a disk & optionally start recon. */
#define	RAIDFRAME_FAIL_DISK		_IOW ('r',  5, struct rf_recon_req)
	/* Get reconstruction % complete on indicated row. */
#define	RAIDFRAME_CHECK_RECON_STATUS	 _IOWR('r',  6, int)
	/* Rewrite (initialize) all parity. */
#define	RAIDFRAME_REWRITEPARITY		_IO  ('r',  7)
	/* Copy reconstructed data back to replaced disk. */
#define	RAIDFRAME_COPYBACK		_IO  ('r',  8)
	/* Does not return until kernel needs a spare table. */
#define	RAIDFRAME_SPARET_WAIT		_IOR ('r',  9, RF_SparetWait_t)
	/* Used to send a spare table down into the kernel. */
#define	RAIDFRAME_SEND_SPARET		_IOW ('r', 10, void *)
	/* Used to wake up the sparemap daemon & tell it to exit. */
#define	RAIDFRAME_ABORT_SPARET_WAIT	_IO  ('r', 11)
	/* Start tracing accesses. */
#define	RAIDFRAME_START_ATRAC		_IO  ('r', 12)
	/* Stop tracing accesses. */
#define	RAIDFRAME_STOP_ATRACE		_IO  ('r', 13)
	/* Get size (# sectors) in raid device. */
#define	RAIDFRAME_GET_SIZE		_IOR ('r', 14, int)
	/* Get configuration. */
#define	RAIDFRAME_GET_INFO		_IOWR('r', 15, RF_DeviceConfig_t *)
	/* Reset AccTotals for device. */
#define	RAIDFRAME_RESET_ACCTOTALS	_IO  ('r', 16)
	/* Retrieve AccTotals for device. */
#define	RAIDFRAME_GET_ACCTOTALS		_IOR ('r', 17, RF_AccTotals_t)
	/* Turn AccTotals on or off for device. */
#define	RAIDFRAME_KEEP_ACCTOTALS	_IOW ('r', 18, int)

#define	RAIDFRAME_GET_COMPONENT_LABEL	_IOWR ('r', 19, RF_ComponentLabel_t *)
#define	RAIDFRAME_SET_COMPONENT_LABEL	_IOW ('r', 20, RF_ComponentLabel_t)

#define	RAIDFRAME_INIT_LABELS		_IOW ('r', 21, RF_ComponentLabel_t)
#define	RAIDFRAME_ADD_HOT_SPARE		_IOW ('r', 22, RF_SingleComponent_t)
#define	RAIDFRAME_REMOVE_HOT_SPARE	_IOW ('r', 23, RF_SingleComponent_t)
#define	RAIDFRAME_REBUILD_IN_PLACE	_IOW ('r', 24, RF_SingleComponent_t)
#define	RAIDFRAME_CHECK_PARITY		_IOWR ('r', 25, int)
#define	RAIDFRAME_CHECK_PARITYREWRITE_STATUS _IOWR ('r', 26, int)
#define	RAIDFRAME_CHECK_COPYBACK_STATUS	_IOWR ('r', 27, int)
#define	RAIDFRAME_SET_AUTOCONFIG	_IOWR ('r', 28, int)
#define	RAIDFRAME_SET_ROOT		_IOWR ('r', 29, int)
#define	RAIDFRAME_DELETE_COMPONENT	_IOW ('r', 30, RF_SingleComponent_t)
#define	RAIDFRAME_INCORPORATE_HOT_SPARE	_IOW ('r', 31, RF_SingleComponent_t)

/* 'Extended' status versions. */
#define	RAIDFRAME_CHECK_RECON_STATUS_EXT				\
					_IOWR('r',  32, RF_ProgressInfo_t *)
#define	RAIDFRAME_CHECK_PARITYREWRITE_STATUS_EXT			\
					_IOWR ('r', 33, RF_ProgressInfo_t *)
#define	RAIDFRAME_CHECK_COPYBACK_STATUS_EXT				\
					_IOWR ('r', 34, RF_ProgressInfo_t *)

#endif	/* !_RF__RF_RAIDFRAME_H_ */
@


1.6
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_raidframe.h,v 1.5 2000/08/08 16:07:44 peter Exp $	*/
@


1.5
log
@sync RAIDframe with Gre Oster's work for NetBSD.

This update incorporates changes since January 2000.

RAID1 and RAID5 tested for functionality matching the 2.7 code. A
number of bug fixes (including stopping a parity rebuild when
unconfiguring) have been included. See Greg's RAIDframe info page:

	http://www.cs.usask.ca/staff/oster/raid.html

The RAID_AUTOCONFIG feature set does *NOT* yet work. These features
require more work throughout the boot system and as such are a big
task.

IMPORTANT: As with anything that is this near live data on your
systems, please test carefully with existing configurations before
deploying in a live system.  Feedback via sendbug or mail direct
to peter@@wonderland.org is appreciated.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_raidframe.h,v 1.4 2000/01/07 14:50:22 peter Exp $	*/
d3 1
d35 1
a35 1
 * main header file for using raidframe in the kernel.
d40 2
a41 2
#ifndef _RF__RF_RAIDFRAME_H_
#define _RF__RF_RAIDFRAME_H_
d50 11
a60 7
struct rf_recon_req {		/* used to tell the kernel to fail a disk */
	RF_RowCol_t row, col;
	RF_ReconReqFlags_t flags;
	void   *raidPtr;	/* used internally; need not be set at ioctl
				 * time */
	struct rf_recon_req *next;	/* used internally; need not be set at
					 * ioctl time */
d64 20
a83 12
	int     C, G, fcol;	/* C = # disks in row, G = # units in stripe,
				 * fcol = which disk has failed */

	RF_StripeCount_t SUsPerPU;	/* this stuff is the info required to
					 * create a spare table */
	int     TablesPerSpareRegion;
	int     BlocksPerTable;
	RF_StripeCount_t TableDepthInPUs;
	RF_StripeCount_t SpareSpaceDepthPerRegionInSUs;

	RF_SparetWait_t *next;	/* used internally; need not be set at ioctl
				 * time */
d87 8
a94 8
	u_int   rows;
	u_int   cols;
	u_int   maxqdepth;
	int     ndevs;
	RF_RaidDisk_t devs[RF_MAX_DISKS];
	int     nspares;
	RF_RaidDisk_t spares[RF_MAX_DISKS];
}       RF_DeviceConfig_t;
d98 3
a100 3
	RF_uint64 remaining;
	RF_uint64 completed;
	RF_uint64 total;
d103 68
a170 62
/* flags that can be put in the rf_recon_req structure */
#define RF_FDFLAGS_NONE   0x0	/* just fail the disk */
#define RF_FDFLAGS_RECON  0x1	/* fail and initiate recon */

#define RF_SCSI_DISK_MAJOR   8	/* the device major number for disks in the
				 * system */

#define RAIDFRAME_CONFIGURE         _IOW ('r',  1, void *)	/* configure the driver */
#define RAIDFRAME_SHUTDOWN          _IO  ('r',  2)	/* shutdown the driver */
#define RAIDFRAME_TUR               _IOW ('r',  3, dev_t)	/* debug only: test unit
								 * ready */
#define RAIDFRAME_TEST_ACC          _IOWR('r',  4, struct rf_test_acc)	/* run a test access */
#define RAIDFRAME_FAIL_DISK         _IOW ('r',  5, struct rf_recon_req)	/* fail a disk &
									 * optionally start
									 * recon */
#define RAIDFRAME_CHECK_RECON_STATUS _IOWR('r',  6, int)	/* get reconstruction %
							 * complete on indicated
							 * row */
#define RAIDFRAME_REWRITEPARITY     _IO  ('r',  7)	/* rewrite (initialize)
							 * all parity */
#define RAIDFRAME_COPYBACK          _IO  ('r',  8)	/* copy reconstructed
							 * data back to replaced
							 * disk */
#define RAIDFRAME_SPARET_WAIT       _IOR ('r',  9, RF_SparetWait_t)	/* does not return until
									 * kernel needs a spare
									 * table */
#define RAIDFRAME_SEND_SPARET       _IOW ('r', 10, void *)	/* used to send a spare
								 * table down into the
								 * kernel */
#define RAIDFRAME_ABORT_SPARET_WAIT _IO  ('r', 11)	/* used to wake up the
							 * sparemap daemon &
							 * tell it to exit */
#define RAIDFRAME_START_ATRACE      _IO  ('r', 12)	/* start tracing
							 * accesses */
#define RAIDFRAME_STOP_ATRACE       _IO  ('r', 13)	/* stop tracing accesses */
#define RAIDFRAME_GET_SIZE          _IOR ('r', 14, int)	/* get size (# sectors)
							 * in raid device */
#define RAIDFRAME_GET_INFO          _IOWR('r', 15, RF_DeviceConfig_t *)	/* get configuration */
#define RAIDFRAME_RESET_ACCTOTALS   _IO  ('r', 16)	/* reset AccTotals for
							 * device */
#define RAIDFRAME_GET_ACCTOTALS     _IOR ('r', 17, RF_AccTotals_t)	/* retrieve AccTotals
									 * for device */
#define RAIDFRAME_KEEP_ACCTOTALS    _IOW ('r', 18, int)	/* turn AccTotals on or
							 * off for device */
#define RAIDFRAME_GET_COMPONENT_LABEL _IOWR ('r', 19, RF_ComponentLabel_t *) 
#define RAIDFRAME_SET_COMPONENT_LABEL _IOW ('r', 20, RF_ComponentLabel_t) 

#define RAIDFRAME_INIT_LABELS _IOW ('r', 21, RF_ComponentLabel_t)
#define RAIDFRAME_ADD_HOT_SPARE     _IOW ('r', 22, RF_SingleComponent_t)
#define RAIDFRAME_REMOVE_HOT_SPARE  _IOW ('r', 23, RF_SingleComponent_t)
#define RAIDFRAME_REBUILD_IN_PLACE  _IOW ('r', 24, RF_SingleComponent_t)
#define RAIDFRAME_CHECK_PARITY      _IOWR ('r', 25, int)
#define RAIDFRAME_CHECK_PARITYREWRITE_STATUS _IOWR ('r', 26, int)
#define RAIDFRAME_CHECK_COPYBACK_STATUS _IOWR ('r', 27, int)
#define RAIDFRAME_SET_AUTOCONFIG _IOWR ('r', 28, int)
#define RAIDFRAME_SET_ROOT _IOWR ('r', 29, int)
#define RAIDFRAME_DELETE_COMPONENT _IOW ('r', 30, RF_SingleComponent_t)
#define RAIDFRAME_INCORPORATE_HOT_SPARE _IOW ('r', 31, RF_SingleComponent_t)
/* 'Extended' status versions */
#define RAIDFRAME_CHECK_RECON_STATUS_EXT _IOWR('r',  32, RF_ProgressInfo_t *)
#define RAIDFRAME_CHECK_PARITYREWRITE_STATUS_EXT _IOWR ('r', 33, RF_ProgressInfo_t *)
#define RAIDFRAME_CHECK_COPYBACK_STATUS_EXT _IOWR ('r', 34, RF_ProgressInfo_t *)
d172 1
a172 1
#endif				/* !_RF__RF_RAIDFRAME_H_ */
@


1.5.8.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d34 1
a34 1
 * Main header file for using RAIDframe in the kernel.
d39 2
a40 2
#ifndef	_RF__RF_RAIDFRAME_H_
#define	_RF__RF_RAIDFRAME_H_
d49 7
a55 11
struct rf_recon_req {	/* Used to tell the kernel to fail a disk. */
	RF_RowCol_t		 row, col;
	RF_ReconReqFlags_t	 flags;
	void			*raidPtr;	/*
						 * Used internally; need not be
						 * set at ioctl time.
						 */
	struct rf_recon_req	*next;		/*
						 * Used internally; need not be
						 * set at ioctl time.
						 */
d59 12
a70 20
	int			 C, G, fcol;	/*
						 * C = # disks in row,
						 * G = # units in stripe,
						 * fcol = which disk has failed
						 */

	RF_StripeCount_t	 SUsPerPU;	/*
						 * This stuff is the info
						 * required to create a spare
						 * table.
						 */
	int			 TablesPerSpareRegion;
	int			 BlocksPerTable;
	RF_StripeCount_t	 TableDepthInPUs;
	RF_StripeCount_t	 SpareSpaceDepthPerRegionInSUs;

	RF_SparetWait_t		*next;		/*
						 * Used internally; need not be
						 * set at ioctl time.
						 */
d74 8
a81 8
	u_int			rows;
	u_int			cols;
	u_int			maxqdepth;
	int			ndevs;
	RF_RaidDisk_t		devs[RF_MAX_DISKS];
	int			nspares;
	RF_RaidDisk_t		spares[RF_MAX_DISKS];
} RF_DeviceConfig_t;
d85 3
a87 3
	RF_uint64		remaining;
	RF_uint64		completed;
	RF_uint64		total;
d90 62
a151 68
/* Flags that can be put in the rf_recon_req structure. */
#define	RF_FDFLAGS_NONE		0x0	/* Just fail the disk. */
#define	RF_FDFLAGS_RECON	0x1	/* Fail and initiate recon. */

#define	RF_SCSI_DISK_MAJOR	8	/*
					 * The device major number for disks
					 * in the system.
					 */

	/* Configure the driver. */
#define	RAIDFRAME_CONFIGURE		_IOW ('r',  1, void *)
	/* Shutdown the driver. */
#define	RAIDFRAME_SHUTDOWN		_IO  ('r',  2)
	/* Debug only: test unit ready. */
#define	RAIDFRAME_TUR			_IOW ('r',  3, dev_t)
	/* Run a test access. */
#define	RAIDFRAME_TEST_ACC		_IOWR('r',  4, struct rf_test_acc)
	/* Fail a disk & optionally start recon. */
#define	RAIDFRAME_FAIL_DISK		_IOW ('r',  5, struct rf_recon_req)
	/* Get reconstruction % complete on indicated row. */
#define	RAIDFRAME_CHECK_RECON_STATUS	 _IOWR('r',  6, int)
	/* Rewrite (initialize) all parity. */
#define	RAIDFRAME_REWRITEPARITY		_IO  ('r',  7)
	/* Copy reconstructed data back to replaced disk. */
#define	RAIDFRAME_COPYBACK		_IO  ('r',  8)
	/* Does not return until kernel needs a spare table. */
#define	RAIDFRAME_SPARET_WAIT		_IOR ('r',  9, RF_SparetWait_t)
	/* Used to send a spare table down into the kernel. */
#define	RAIDFRAME_SEND_SPARET		_IOW ('r', 10, void *)
	/* Used to wake up the sparemap daemon & tell it to exit. */
#define	RAIDFRAME_ABORT_SPARET_WAIT	_IO  ('r', 11)
	/* Start tracing accesses. */
#define	RAIDFRAME_START_ATRAC		_IO  ('r', 12)
	/* Stop tracing accesses. */
#define	RAIDFRAME_STOP_ATRACE		_IO  ('r', 13)
	/* Get size (# sectors) in raid device. */
#define	RAIDFRAME_GET_SIZE		_IOR ('r', 14, int)
	/* Get configuration. */
#define	RAIDFRAME_GET_INFO		_IOWR('r', 15, RF_DeviceConfig_t *)
	/* Reset AccTotals for device. */
#define	RAIDFRAME_RESET_ACCTOTALS	_IO  ('r', 16)
	/* Retrieve AccTotals for device. */
#define	RAIDFRAME_GET_ACCTOTALS		_IOR ('r', 17, RF_AccTotals_t)
	/* Turn AccTotals on or off for device. */
#define	RAIDFRAME_KEEP_ACCTOTALS	_IOW ('r', 18, int)

#define	RAIDFRAME_GET_COMPONENT_LABEL	_IOWR ('r', 19, RF_ComponentLabel_t *)
#define	RAIDFRAME_SET_COMPONENT_LABEL	_IOW ('r', 20, RF_ComponentLabel_t)

#define	RAIDFRAME_INIT_LABELS		_IOW ('r', 21, RF_ComponentLabel_t)
#define	RAIDFRAME_ADD_HOT_SPARE		_IOW ('r', 22, RF_SingleComponent_t)
#define	RAIDFRAME_REMOVE_HOT_SPARE	_IOW ('r', 23, RF_SingleComponent_t)
#define	RAIDFRAME_REBUILD_IN_PLACE	_IOW ('r', 24, RF_SingleComponent_t)
#define	RAIDFRAME_CHECK_PARITY		_IOWR ('r', 25, int)
#define	RAIDFRAME_CHECK_PARITYREWRITE_STATUS _IOWR ('r', 26, int)
#define	RAIDFRAME_CHECK_COPYBACK_STATUS	_IOWR ('r', 27, int)
#define	RAIDFRAME_SET_AUTOCONFIG	_IOWR ('r', 28, int)
#define	RAIDFRAME_SET_ROOT		_IOWR ('r', 29, int)
#define	RAIDFRAME_DELETE_COMPONENT	_IOW ('r', 30, RF_SingleComponent_t)
#define	RAIDFRAME_INCORPORATE_HOT_SPARE	_IOW ('r', 31, RF_SingleComponent_t)

/* 'Extended' status versions. */
#define	RAIDFRAME_CHECK_RECON_STATUS_EXT				\
					_IOWR('r',  32, RF_ProgressInfo_t *)
#define	RAIDFRAME_CHECK_PARITYREWRITE_STATUS_EXT			\
					_IOWR ('r', 33, RF_ProgressInfo_t *)
#define	RAIDFRAME_CHECK_COPYBACK_STATUS_EXT				\
					_IOWR ('r', 34, RF_ProgressInfo_t *)
d153 1
a153 1
#endif	/* !_RF__RF_RAIDFRAME_H_ */
@


1.4
log
@sync with work by Greg Oster on NetBSD

Please note: This update has *only* been tested on i386 with IDE
disks. Could someone with a spare box please make sure all is OK with
SCSI and maybe other arches ? sparc testing will follow locally.

* remove rf_sys.h
* many changes to make it more stable
* some performance increases
* All raid threads now get their own kernel process and the calling
  raidctl(8) program will show status progress through a meter.
* In theory FFS_SOFTUPDATES and RAIDframe will now work together - NOT
  TESTED YET

See http://www.cs.usask.ca/staff/oster/raid.html

This updates include Greg's changes to Jan 4th 2000.

TODO:
* some odd behaviour when running raictl -c on an already config'ed
  raid set - problem founf, fix being done
* progress meter is in raidctl(8) - seperate commit, but could do with
  sync'ing with OpenBSD ftp version
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_raidframe.h,v 1.3 1999/07/30 14:45:33 peter Exp $	*/
/*	$NetBSD: rf_raidframe.h,v 1.8 2000/01/05 02:57:29 oster Exp $	*/
d84 6
d144 9
@


1.4.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_raidframe.h,v 1.5 2000/08/08 16:07:44 peter Exp $	*/
/*	$NetBSD: rf_raidframe.h,v 1.11 2000/05/28 00:48:31 oster Exp $	*/
a83 6
typedef struct RF_ProgressInfo_s {
	RF_uint64 remaining;
	RF_uint64 completed;
	RF_uint64 total;
} RF_ProgressInfo_t;

a137 9
#define RAIDFRAME_SET_AUTOCONFIG _IOWR ('r', 28, int)
#define RAIDFRAME_SET_ROOT _IOWR ('r', 29, int)
#define RAIDFRAME_DELETE_COMPONENT _IOW ('r', 30, RF_SingleComponent_t)
#define RAIDFRAME_INCORPORATE_HOT_SPARE _IOW ('r', 31, RF_SingleComponent_t)
/* 'Extended' status versions */
#define RAIDFRAME_CHECK_RECON_STATUS_EXT _IOWR('r',  32, RF_ProgressInfo_t *)
#define RAIDFRAME_CHECK_PARITYREWRITE_STATUS_EXT _IOWR ('r', 33, RF_ProgressInfo_t *)
#define RAIDFRAME_CHECK_COPYBACK_STATUS_EXT _IOWR ('r', 34, RF_ProgressInfo_t *)

@


1.4.2.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d34 1
a34 1
 * Main header file for using RAIDframe in the kernel.
d39 2
a40 2
#ifndef	_RF__RF_RAIDFRAME_H_
#define	_RF__RF_RAIDFRAME_H_
d49 7
a55 11
struct rf_recon_req {	/* Used to tell the kernel to fail a disk. */
	RF_RowCol_t		 row, col;
	RF_ReconReqFlags_t	 flags;
	void			*raidPtr;	/*
						 * Used internally; need not be
						 * set at ioctl time.
						 */
	struct rf_recon_req	*next;		/*
						 * Used internally; need not be
						 * set at ioctl time.
						 */
d59 12
a70 20
	int			 C, G, fcol;	/*
						 * C = # disks in row,
						 * G = # units in stripe,
						 * fcol = which disk has failed
						 */

	RF_StripeCount_t	 SUsPerPU;	/*
						 * This stuff is the info
						 * required to create a spare
						 * table.
						 */
	int			 TablesPerSpareRegion;
	int			 BlocksPerTable;
	RF_StripeCount_t	 TableDepthInPUs;
	RF_StripeCount_t	 SpareSpaceDepthPerRegionInSUs;

	RF_SparetWait_t		*next;		/*
						 * Used internally; need not be
						 * set at ioctl time.
						 */
d74 8
a81 8
	u_int			rows;
	u_int			cols;
	u_int			maxqdepth;
	int			ndevs;
	RF_RaidDisk_t		devs[RF_MAX_DISKS];
	int			nspares;
	RF_RaidDisk_t		spares[RF_MAX_DISKS];
} RF_DeviceConfig_t;
d85 3
a87 3
	RF_uint64		remaining;
	RF_uint64		completed;
	RF_uint64		total;
d90 62
a151 68
/* Flags that can be put in the rf_recon_req structure. */
#define	RF_FDFLAGS_NONE		0x0	/* Just fail the disk. */
#define	RF_FDFLAGS_RECON	0x1	/* Fail and initiate recon. */

#define	RF_SCSI_DISK_MAJOR	8	/*
					 * The device major number for disks
					 * in the system.
					 */

	/* Configure the driver. */
#define	RAIDFRAME_CONFIGURE		_IOW ('r',  1, void *)
	/* Shutdown the driver. */
#define	RAIDFRAME_SHUTDOWN		_IO  ('r',  2)
	/* Debug only: test unit ready. */
#define	RAIDFRAME_TUR			_IOW ('r',  3, dev_t)
	/* Run a test access. */
#define	RAIDFRAME_TEST_ACC		_IOWR('r',  4, struct rf_test_acc)
	/* Fail a disk & optionally start recon. */
#define	RAIDFRAME_FAIL_DISK		_IOW ('r',  5, struct rf_recon_req)
	/* Get reconstruction % complete on indicated row. */
#define	RAIDFRAME_CHECK_RECON_STATUS	 _IOWR('r',  6, int)
	/* Rewrite (initialize) all parity. */
#define	RAIDFRAME_REWRITEPARITY		_IO  ('r',  7)
	/* Copy reconstructed data back to replaced disk. */
#define	RAIDFRAME_COPYBACK		_IO  ('r',  8)
	/* Does not return until kernel needs a spare table. */
#define	RAIDFRAME_SPARET_WAIT		_IOR ('r',  9, RF_SparetWait_t)
	/* Used to send a spare table down into the kernel. */
#define	RAIDFRAME_SEND_SPARET		_IOW ('r', 10, void *)
	/* Used to wake up the sparemap daemon & tell it to exit. */
#define	RAIDFRAME_ABORT_SPARET_WAIT	_IO  ('r', 11)
	/* Start tracing accesses. */
#define	RAIDFRAME_START_ATRAC		_IO  ('r', 12)
	/* Stop tracing accesses. */
#define	RAIDFRAME_STOP_ATRACE		_IO  ('r', 13)
	/* Get size (# sectors) in raid device. */
#define	RAIDFRAME_GET_SIZE		_IOR ('r', 14, int)
	/* Get configuration. */
#define	RAIDFRAME_GET_INFO		_IOWR('r', 15, RF_DeviceConfig_t *)
	/* Reset AccTotals for device. */
#define	RAIDFRAME_RESET_ACCTOTALS	_IO  ('r', 16)
	/* Retrieve AccTotals for device. */
#define	RAIDFRAME_GET_ACCTOTALS		_IOR ('r', 17, RF_AccTotals_t)
	/* Turn AccTotals on or off for device. */
#define	RAIDFRAME_KEEP_ACCTOTALS	_IOW ('r', 18, int)

#define	RAIDFRAME_GET_COMPONENT_LABEL	_IOWR ('r', 19, RF_ComponentLabel_t *)
#define	RAIDFRAME_SET_COMPONENT_LABEL	_IOW ('r', 20, RF_ComponentLabel_t)

#define	RAIDFRAME_INIT_LABELS		_IOW ('r', 21, RF_ComponentLabel_t)
#define	RAIDFRAME_ADD_HOT_SPARE		_IOW ('r', 22, RF_SingleComponent_t)
#define	RAIDFRAME_REMOVE_HOT_SPARE	_IOW ('r', 23, RF_SingleComponent_t)
#define	RAIDFRAME_REBUILD_IN_PLACE	_IOW ('r', 24, RF_SingleComponent_t)
#define	RAIDFRAME_CHECK_PARITY		_IOWR ('r', 25, int)
#define	RAIDFRAME_CHECK_PARITYREWRITE_STATUS _IOWR ('r', 26, int)
#define	RAIDFRAME_CHECK_COPYBACK_STATUS	_IOWR ('r', 27, int)
#define	RAIDFRAME_SET_AUTOCONFIG	_IOWR ('r', 28, int)
#define	RAIDFRAME_SET_ROOT		_IOWR ('r', 29, int)
#define	RAIDFRAME_DELETE_COMPONENT	_IOW ('r', 30, RF_SingleComponent_t)
#define	RAIDFRAME_INCORPORATE_HOT_SPARE	_IOW ('r', 31, RF_SingleComponent_t)

/* 'Extended' status versions. */
#define	RAIDFRAME_CHECK_RECON_STATUS_EXT				\
					_IOWR('r',  32, RF_ProgressInfo_t *)
#define	RAIDFRAME_CHECK_PARITYREWRITE_STATUS_EXT			\
					_IOWR ('r', 33, RF_ProgressInfo_t *)
#define	RAIDFRAME_CHECK_COPYBACK_STATUS_EXT				\
					_IOWR ('r', 34, RF_ProgressInfo_t *)
d153 1
a153 1
#endif	/* !_RF__RF_RAIDFRAME_H_ */
@


1.3
log
@Update RAIDframe from NetBSD-current as of 1999/07/26.

Please note that you *must* follow the upgrade instructions at

	http://www.cs.usask.ca/staff/oster/clabel_upgrade.html

before installing the new raidctl and new kernel using this code.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_raidframe.h,v 1.2 1999/02/16 00:03:19 niklas Exp $	*/
/*	$NetBSD: rf_raidframe.h,v 1.5 1999/03/02 03:18:48 oster Exp $	*/
a46 12
struct rf_test_acc {		/* used by RAIDFRAME_TEST_ACC ioctl */
	RF_SectorNum_t startSector;	/* raidAddress */
	RF_SectorCount_t numSector;	/* number of sectors to xfer */
	char   *buf;		/* data buffer */
	void   *returnBufs[10];	/* for async accs only, completed I/Os
				 * returned */
	struct rf_test_acc *next;	/* for making lists */
	RF_IoType_t type;	/* (see rf_types.h for RF_IO_TYPE_*) */
	struct rf_test_acc *myaddr;	/* user-address of this struct */
	void   *bp;		/* used in-kernel: need not be set by user */
};

d99 1
a99 1
#define RAIDFRAME_CHECKRECON        _IOWR('r',  6, int)	/* get reconstruction %
d135 3
a137 1

@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_raidframe.h,v 1.1 1999/01/11 14:29:44 niklas Exp $	*/
/*	$NetBSD: rf_raidframe.h,v 1.3 1999/02/05 00:06:16 oster Exp $	*/
d140 7
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_raidframe.h,v 1.1 1998/11/13 04:20:33 oster Exp $	*/
/*	$NetBSD: rf_raidframe.h,v 1.1 1998/11/13 04:20:33 oster Exp $	*/
d32 1
a32 1
 * rf_raidframe.h 
a37 50
/*
 * :  
 *
 * Log: rf_raidframe.h,v 
 * Revision 1.21  1996/06/17 03:00:15  jimz
 * Change RAIDFRAME_GET_INFO interface to work around ioctl
 * size limitation problem. This operation now takes a pointer
 * to a pointer, and does its own copyout() (so it can transfer
 * more than 8k at a time).
 *
 * Revision 1.20  1996/06/07  21:33:04  jimz
 * begin using consistent types for sector numbers,
 * stripe numbers, row+col numbers, recon unit numbers
 *
 * Revision 1.19  1996/06/03  23:28:26  jimz
 * more bugfixes
 * check in tree to sync for IPDS runs with current bugfixes
 * there still may be a problem with threads in the script test
 * getting I/Os stuck- not trivially reproducible (runs ~50 times
 * in a row without getting stuck)
 *
 * Revision 1.18  1996/05/24  22:17:04  jimz
 * continue code + namespace cleanup
 * typed a bunch of flags
 *
 * Revision 1.17  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.16  1996/05/23  00:33:23  jimz
 * code cleanup: move all debug decls to rf_options.c, all extern
 * debug decls to rf_options.h, all debug vars preceded by rf_
 *
 * Revision 1.15  1996/05/02  22:09:48  jimz
 * change devs and spares in device_config to RF_RaidDisk_t
 *
 * Revision 1.14  1995/12/06  15:03:33  root
 * added copyright info
 *
 * Revision 1.13  1995/09/30  20:39:54  jimz
 * added new ioctls:
 *   RAIDFRAME_RESET_ACCTOTALS
 *   RAIDFRAME_GET_ACCTOTALS
 *   RAIDFRAME_KEEP_ACCTOTALS
 *
 * Revision 1.12  1995/09/25  20:11:51  wvcii
 * Added #include "rf_raid.h"
 *
 *
 */
d47 10
a56 9
struct rf_test_acc { /* used by RAIDFRAME_TEST_ACC ioctl */
  RF_SectorNum_t       startSector;    /* raidAddress */
  RF_SectorCount_t     numSector;      /* number of sectors to xfer */
  char                *buf;            /* data buffer */
  void                *returnBufs[10]; /* for async accs only, completed I/Os returned */
  struct rf_test_acc  *next;           /* for making lists */
  RF_IoType_t          type;           /* (see rf_types.h for RF_IO_TYPE_*) */
  struct rf_test_acc  *myaddr;         /* user-address of this struct */
  void                *bp;             /* used in-kernel: need not be set by user */
d61 7
a67 5
struct rf_recon_req {                              /* used to tell the kernel to fail a disk */
  RF_RowCol_t row, col;
  RF_ReconReqFlags_t flags;
  void *raidPtr;                                   /* used internally; need not be set at ioctl time */
  struct rf_recon_req *next;                       /* used internally; need not be set at ioctl time */
d71 2
a72 1
  int C, G, fcol;                                  /* C = # disks in row, G = # units in stripe, fcol = which disk has failed */
d74 6
a79 5
  RF_StripeCount_t  SUsPerPU;                                    /* this stuff is the info required to create a spare table */
  int               TablesPerSpareRegion;
  int               BlocksPerTable;
  RF_StripeCount_t  TableDepthInPUs;
  RF_StripeCount_t  SpareSpaceDepthPerRegionInSUs;
d81 2
a82 1
  RF_SparetWait_t *next;  /* used internally; need not be set at ioctl time */
d86 4
a89 4
	u_int rows;
	u_int cols;
	u_int maxqdepth;
	int ndevs;
d91 1
a91 1
	int nspares;
d93 1
a93 1
} RF_DeviceConfig_t;
d97 2
a98 2
#define RF_FDFLAGS_NONE   0x0  /* just fail the disk */
#define RF_FDFLAGS_RECON  0x1  /* fail and initiate recon */
d100 2
a101 1
#define RF_SCSI_DISK_MAJOR   8  /* the device major number for disks in the system */
d103 37
a139 18
#define RAIDFRAME_CONFIGURE         _IOW ('r',  1, void *)                  /* configure the driver */
#define RAIDFRAME_SHUTDOWN          _IO  ('r',  2)                          /* shutdown the driver */
#define RAIDFRAME_TUR               _IOW ('r',  3, dev_t)                   /* debug only: test unit ready */
#define RAIDFRAME_TEST_ACC          _IOWR('r',  4, struct rf_test_acc)      /* run a test access */
#define RAIDFRAME_FAIL_DISK         _IOW ('r',  5, struct rf_recon_req)     /* fail a disk & optionally start recon */
#define RAIDFRAME_CHECKRECON        _IOWR('r',  6, int)                     /* get reconstruction % complete on indicated row */
#define RAIDFRAME_REWRITEPARITY     _IO  ('r',  7)                          /* rewrite (initialize) all parity */
#define RAIDFRAME_COPYBACK          _IO  ('r',  8)                          /* copy reconstructed data back to replaced disk */
#define RAIDFRAME_SPARET_WAIT       _IOR ('r',  9, RF_SparetWait_t)         /* does not return until kernel needs a spare table */
#define RAIDFRAME_SEND_SPARET       _IOW ('r', 10, void *)                  /* used to send a spare table down into the kernel */
#define RAIDFRAME_ABORT_SPARET_WAIT _IO  ('r', 11)                          /* used to wake up the sparemap daemon & tell it to exit */
#define RAIDFRAME_START_ATRACE      _IO  ('r', 12)                          /* start tracing accesses */
#define RAIDFRAME_STOP_ATRACE       _IO  ('r', 13)                          /* stop tracing accesses */
#define RAIDFRAME_GET_SIZE          _IOR ('r', 14, int)                     /* get size (# sectors) in raid device */
#define RAIDFRAME_GET_INFO          _IOWR('r', 15, RF_DeviceConfig_t *)     /* get configuration */
#define RAIDFRAME_RESET_ACCTOTALS   _IO  ('r', 16)                          /* reset AccTotals for device */
#define RAIDFRAME_GET_ACCTOTALS     _IOR ('r', 17, RF_AccTotals_t)          /* retrieve AccTotals for device */
#define RAIDFRAME_KEEP_ACCTOTALS    _IOW ('r', 18, int)                     /* turn AccTotals on or off for device */
d141 1
a141 1
#endif /* !_RF__RF_RAIDFRAME_H_ */
@

