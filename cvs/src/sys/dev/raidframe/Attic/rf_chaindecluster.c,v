head	1.5;
access;
symbols
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.38
	OPENBSD_5_0:1.4.0.36
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.34
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.32
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.28
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.30
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.26
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.24
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.22
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.20
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.18
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.16
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.14
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.12
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.10
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.8
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.3.0.16
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.14
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.12
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.10
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.8
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.2
	SMP_BASE:1.3
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.4;

1.4
date	2002.12.16.07.01.03;	author tdeval;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.11.18.02.20;	author peter;	state Exp;
branches
	1.3.2.1
	1.3.12.1;
next	1.2;

1.2
date	99.02.16.00.02.24;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.29.01;	author niklas;	state Exp;
branches;
next	;

1.3.2.1
date	2003.03.28.00.38.27;	author niklas;	state Exp;
branches;
next	;

1.3.12.1
date	2003.05.19.22.21.51;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_chaindecluster.c,v 1.4 2002/12/16 07:01:03 tdeval Exp $	*/
/*	$NetBSD: rf_chaindecluster.c,v 1.4 2000/01/07 03:40:56 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Khalil Amiri
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*****************************************************************************
 *
 * rf_chaindecluster.c -- implements chained declustering
 *
 *****************************************************************************/

#include "rf_archs.h"
#include "rf_types.h"
#include "rf_raid.h"
#include "rf_chaindecluster.h"
#include "rf_dag.h"
#include "rf_dagutils.h"
#include "rf_dagffrd.h"
#include "rf_dagffwr.h"
#include "rf_dagdegrd.h"
#include "rf_dagfuncs.h"
#include "rf_general.h"
#include "rf_utils.h"

typedef struct RF_ChaindeclusterConfigInfo_s {
	RF_RowCol_t	**stripeIdentifier;	/*
						 * Filled in at config time and
						 * used by IdentifyStripe.
						 */
	RF_StripeCount_t  numSparingRegions;
	RF_StripeCount_t  stripeUnitsPerSparingRegion;
	RF_SectorNum_t	  mirrorStripeOffset;
}	RF_ChaindeclusterConfigInfo_t;


int
rf_ConfigureChainDecluster(RF_ShutdownList_t **listp, RF_Raid_t *raidPtr,
    RF_Config_t *cfgPtr)
{
	RF_RaidLayout_t *layoutPtr = &raidPtr->Layout;
	RF_StripeCount_t num_used_stripeUnitsPerDisk;
	RF_ChaindeclusterConfigInfo_t *info;
	RF_RowCol_t i;

	/* Create a Chained Declustering configuration structure. */
	RF_MallocAndAdd(info, sizeof(RF_ChaindeclusterConfigInfo_t),
	    (RF_ChaindeclusterConfigInfo_t *), raidPtr->cleanupList);
	if (info == NULL)
		return (ENOMEM);
	layoutPtr->layoutSpecificInfo = (void *) info;

	/* Fill in the config structure. */
	info->stripeIdentifier = rf_make_2d_array(raidPtr->numCol, 2,
	    raidPtr->cleanupList);
	if (info->stripeIdentifier == NULL)
		return (ENOMEM);
	for (i = 0; i < raidPtr->numCol; i++) {
		info->stripeIdentifier[i][0] = i % raidPtr->numCol;
		info->stripeIdentifier[i][1] = (i + 1) % raidPtr->numCol;
	}

	RF_ASSERT(raidPtr->numRow == 1);

	/* Fill in the remaining layout parameters. */
	num_used_stripeUnitsPerDisk = layoutPtr->stripeUnitsPerDisk -
	    (layoutPtr->stripeUnitsPerDisk % (2 * raidPtr->numCol - 2));
	info->numSparingRegions = num_used_stripeUnitsPerDisk /
	    (2 * raidPtr->numCol - 2);
	info->stripeUnitsPerSparingRegion = raidPtr->numCol *
	    (raidPtr->numCol - 1);
	info->mirrorStripeOffset = info->numSparingRegions *
	    (raidPtr->numCol - 1);
	layoutPtr->numStripe = info->numSparingRegions *
	    info->stripeUnitsPerSparingRegion;
	layoutPtr->bytesPerStripeUnit = layoutPtr->sectorsPerStripeUnit <<
	    raidPtr->logBytesPerSector;
	layoutPtr->numDataCol = 1;
	layoutPtr->dataSectorsPerStripe = layoutPtr->numDataCol *
	    layoutPtr->sectorsPerStripeUnit;
	layoutPtr->numParityCol = 1;

	layoutPtr->dataStripeUnitsPerDisk = num_used_stripeUnitsPerDisk;

	raidPtr->sectorsPerDisk = num_used_stripeUnitsPerDisk *
	    layoutPtr->sectorsPerStripeUnit;

	raidPtr->totalSectors = (layoutPtr->numStripe) *
	    layoutPtr->sectorsPerStripeUnit;

	layoutPtr->stripeUnitsPerDisk = raidPtr->sectorsPerDisk /
	    layoutPtr->sectorsPerStripeUnit;

	return (0);
}

RF_ReconUnitCount_t
rf_GetNumSpareRUsChainDecluster(RF_Raid_t *raidPtr)
{
	RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *)
	    raidPtr->Layout.layoutSpecificInfo;

	/*
	 * The layout uses two stripe units per disk as spare within each
	 * sparing region.
	 */
	return (2 * info->numSparingRegions);
}


/* Maps to the primary copy of the data, i.e. the first mirror pair. */
void
rf_MapSectorChainDecluster(RF_Raid_t *raidPtr, RF_RaidAddr_t raidSector,
    RF_RowCol_t *row, RF_RowCol_t *col, RF_SectorNum_t *diskSector, int remap)
{
	RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *)
	    raidPtr->Layout.layoutSpecificInfo;
	RF_StripeNum_t SUID = raidSector / raidPtr->Layout.sectorsPerStripeUnit;
	RF_SectorNum_t index_within_region, index_within_disk;
	RF_StripeNum_t sparing_region_id;
	int col_before_remap;

	*row = 0;
	sparing_region_id = SUID / info->stripeUnitsPerSparingRegion;
	index_within_region = SUID % info->stripeUnitsPerSparingRegion;
	index_within_disk = index_within_region / raidPtr->numCol;
	col_before_remap = SUID % raidPtr->numCol;

	if (!remap) {
		*col = col_before_remap;
		*diskSector = (index_within_disk + ((raidPtr->numCol - 1) *
		    sparing_region_id)) * raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidSector %
		    raidPtr->Layout.sectorsPerStripeUnit);
	} else {
		/* Remap sector to spare space... */
		*diskSector = sparing_region_id * (raidPtr->numCol + 1) *
		    raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidPtr->numCol - 1) *
		    raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidSector %
		    raidPtr->Layout.sectorsPerStripeUnit);
		index_within_disk = index_within_region / raidPtr->numCol;
		if (index_within_disk < col_before_remap)
			*col = index_within_disk;
		else
			if (index_within_disk == raidPtr->numCol - 2) {
				*col = (col_before_remap + raidPtr->numCol - 1)
				    % raidPtr->numCol;
				*diskSector +=
				    raidPtr->Layout.sectorsPerStripeUnit;
			} else
				*col = (index_within_disk + 2) %
				    raidPtr->numCol;
	}

}


/*
 * Maps to the second copy of the mirror pair, which is chain declustered.
 * The second copy is contained in the next disk (mod numCol) after the disk
 * containing the primary copy.
 * The offset into the disk is one-half disk down.
 */
void
rf_MapParityChainDecluster(RF_Raid_t *raidPtr, RF_RaidAddr_t raidSector,
    RF_RowCol_t *row, RF_RowCol_t *col, RF_SectorNum_t *diskSector, int remap)
{
	RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *)
	    raidPtr->Layout.layoutSpecificInfo;
	RF_StripeNum_t SUID = raidSector / raidPtr->Layout.sectorsPerStripeUnit;
	RF_SectorNum_t index_within_region, index_within_disk;
	RF_StripeNum_t sparing_region_id;
	int col_before_remap;

	*row = 0;
	if (!remap) {
		*col = SUID % raidPtr->numCol;
		*col = (*col + 1) % raidPtr->numCol;
		*diskSector = info->mirrorStripeOffset *
		    raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (SUID / raidPtr->numCol) *
		    raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidSector %
		    raidPtr->Layout.sectorsPerStripeUnit);
	} else {
		/* Remap parity to spare space... */
		sparing_region_id = SUID / info->stripeUnitsPerSparingRegion;
		index_within_region = SUID % info->stripeUnitsPerSparingRegion;
		index_within_disk = index_within_region / raidPtr->numCol;
		*diskSector = sparing_region_id * (raidPtr->numCol + 1) *
		    raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidPtr->numCol) *
		    raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidSector %
		    raidPtr->Layout.sectorsPerStripeUnit);
		col_before_remap = SUID % raidPtr->numCol;
		if (index_within_disk < col_before_remap)
			*col = index_within_disk;
		else
			if (index_within_disk == raidPtr->numCol - 2) {
				*col = (col_before_remap + 2) % raidPtr->numCol;
				*diskSector -=
				    raidPtr->Layout.sectorsPerStripeUnit;
			} else
				*col = (index_within_disk + 2) %
				    raidPtr->numCol;
	}
}

void
rf_IdentifyStripeChainDecluster(RF_Raid_t *raidPtr, RF_RaidAddr_t addr,
    RF_RowCol_t **diskids, RF_RowCol_t *outRow)
{
	RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *)
	    raidPtr->Layout.layoutSpecificInfo;
	RF_StripeNum_t SUID;
	RF_RowCol_t col;

	SUID = addr / raidPtr->Layout.sectorsPerStripeUnit;
	col = SUID % raidPtr->numCol;
	*outRow = 0;
	*diskids = info->stripeIdentifier[col];
}

void
rf_MapSIDToPSIDChainDecluster(RF_RaidLayout_t *layoutPtr,
    RF_StripeNum_t stripeID, RF_StripeNum_t *psID, RF_ReconUnitNum_t *which_ru)
{
	*which_ru = 0;
	*psID = stripeID;
}


/****************************************************************************
 * Select a graph to perform a single-stripe access.
 *
 * Parameters:	raidPtr	   - description of the physical array
 *		type	   - type of operation (read or write) requested
 *		asmap	   - logical & physical addresses for this access
 *		createFunc - function to use to create the graph (return value)
 *****************************************************************************/

void
rf_RAIDCDagSelect(RF_Raid_t *raidPtr, RF_IoType_t type,
    RF_AccessStripeMap_t *asmap, RF_VoidFuncPtr *createFunc)
{
	RF_ASSERT(RF_IO_IS_R_OR_W(type));
	RF_ASSERT(raidPtr->numRow == 1);

	if (asmap->numDataFailed + asmap->numParityFailed > 1) {
		RF_ERRORMSG("Multiple disks failed in a single group !"
		    "  Aborting I/O operation.\n");
		*createFunc = NULL;
		return;
	}
	*createFunc = (type == RF_IO_TYPE_READ) ?
	    (RF_VoidFuncPtr) rf_CreateFaultFreeReadDAG :
	    (RF_VoidFuncPtr) rf_CreateRaidOneWriteDAG;

	if (type == RF_IO_TYPE_READ) {
		if ((raidPtr->status[0] == rf_rs_degraded) ||
		    (raidPtr->status[0] == rf_rs_reconstructing))
			/*
			 * Array status is degraded,
			 * implement workload shifting.
			 */
			*createFunc = (RF_VoidFuncPtr)
			    rf_CreateRaidCDegradedReadDAG;
		else
			/*
			 * Array status not degraded,
			 * so use mirror partition dag.
			 */
			*createFunc = (RF_VoidFuncPtr)
			    rf_CreateMirrorPartitionReadDAG;
	} else
		*createFunc = (RF_VoidFuncPtr) rf_CreateRaidOneWriteDAG;
}
@


1.4
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_chaindecluster.c,v 1.3 2000/01/11 18:02:20 peter Exp $	*/
@


1.3
log
@sync with NetBSD

- removed threadid stuff
- removed unused files
- general tidyup
- you can no longer configure the same unit twice (without
de-configuring first of course).

Again, this has only been tested locally on IDE disks. Further testing
and feedback would be appreciated.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_chaindecluster.c,v 1.2 1999/02/16 00:02:24 niklas Exp $	*/
d3 1
d31 1
a31 1
/******************************************************************************
d51 13
a63 12
	RF_RowCol_t **stripeIdentifier;	/* filled in at config time and used
					 * by IdentifyStripe */
	RF_StripeCount_t numSparingRegions;
	RF_StripeCount_t stripeUnitsPerSparingRegion;
	RF_SectorNum_t mirrorStripeOffset;
}       RF_ChaindeclusterConfigInfo_t;

int 
rf_ConfigureChainDecluster(
    RF_ShutdownList_t ** listp,
    RF_Raid_t * raidPtr,
    RF_Config_t * cfgPtr)
d70 3
a72 2
	/* create a Chained Declustering configuration structure */
	RF_MallocAndAdd(info, sizeof(RF_ChaindeclusterConfigInfo_t), (RF_ChaindeclusterConfigInfo_t *), raidPtr->cleanupList);
d77 3
a79 2
	/* fill in the config structure.  */
	info->stripeIdentifier = rf_make_2d_array(raidPtr->numCol, 2, raidPtr->cleanupList);
d89 13
a101 8
	/* fill in the remaining layout parameters */
	num_used_stripeUnitsPerDisk = layoutPtr->stripeUnitsPerDisk - (layoutPtr->stripeUnitsPerDisk %
	    (2 * raidPtr->numCol - 2));
	info->numSparingRegions = num_used_stripeUnitsPerDisk / (2 * raidPtr->numCol - 2);
	info->stripeUnitsPerSparingRegion = raidPtr->numCol * (raidPtr->numCol - 1);
	info->mirrorStripeOffset = info->numSparingRegions * (raidPtr->numCol - 1);
	layoutPtr->numStripe = info->numSparingRegions * info->stripeUnitsPerSparingRegion;
	layoutPtr->bytesPerStripeUnit = layoutPtr->sectorsPerStripeUnit << raidPtr->logBytesPerSector;
d103 2
a104 1
	layoutPtr->dataSectorsPerStripe = layoutPtr->numDataCol * layoutPtr->sectorsPerStripeUnit;
d109 2
a110 2
	raidPtr->sectorsPerDisk =
	    num_used_stripeUnitsPerDisk * layoutPtr->sectorsPerStripeUnit;
d112 2
a113 2
	raidPtr->totalSectors =
	    (layoutPtr->numStripe) * layoutPtr->sectorsPerStripeUnit;
d115 2
a116 1
	layoutPtr->stripeUnitsPerDisk = raidPtr->sectorsPerDisk / layoutPtr->sectorsPerStripeUnit;
d121 2
a122 3
RF_ReconUnitCount_t 
rf_GetNumSpareRUsChainDecluster(raidPtr)
	RF_Raid_t *raidPtr;
d124 2
a125 1
	RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *) raidPtr->Layout.layoutSpecificInfo;
d128 3
a130 3
         * The layout uses two stripe units per disk as spare within each
         * sparing region.
         */
d135 4
a138 9
/* Maps to the primary copy of the data, i.e. the first mirror pair */
void 
rf_MapSectorChainDecluster(
    RF_Raid_t * raidPtr,
    RF_RaidAddr_t raidSector,
    RF_RowCol_t * row,
    RF_RowCol_t * col,
    RF_SectorNum_t * diskSector,
    int remap)
d140 2
a141 1
	RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *) raidPtr->Layout.layoutSpecificInfo;
d145 1
a145 1
	int     col_before_remap;
d155 7
a161 1
		*diskSector = (index_within_disk + ((raidPtr->numCol - 1) * sparing_region_id)) *
d163 4
a166 6
		*diskSector += (raidSector % raidPtr->Layout.sectorsPerStripeUnit);
	} else {
		/* remap sector to spare space... */
		*diskSector = sparing_region_id * (raidPtr->numCol + 1) * raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidPtr->numCol - 1) * raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidSector % raidPtr->Layout.sectorsPerStripeUnit);
d172 4
a175 2
				*col = (col_before_remap + raidPtr->numCol - 1) % raidPtr->numCol;
				*diskSector += raidPtr->Layout.sectorsPerStripeUnit;
d177 2
a178 1
				*col = (index_within_disk + 2) % raidPtr->numCol;
d184 9
a192 12

/* Maps to the second copy of the mirror pair, which is chain declustered. The second copy is contained
   in the next disk (mod numCol) after the disk containing the primary copy.
   The offset into the disk is one-half disk down */
void 
rf_MapParityChainDecluster(
    RF_Raid_t * raidPtr,
    RF_RaidAddr_t raidSector,
    RF_RowCol_t * row,
    RF_RowCol_t * col,
    RF_SectorNum_t * diskSector,
    int remap)
d194 2
a195 1
	RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *) raidPtr->Layout.layoutSpecificInfo;
d199 1
a199 1
	int     col_before_remap;
d205 6
a210 3
		*diskSector = info->mirrorStripeOffset * raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (SUID / raidPtr->numCol) * raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidSector % raidPtr->Layout.sectorsPerStripeUnit);
d212 1
a212 1
		/* remap parity to spare space ... */
d216 6
a221 3
		*diskSector = sparing_region_id * (raidPtr->numCol + 1) * raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidPtr->numCol) * raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidSector % raidPtr->Layout.sectorsPerStripeUnit);
d228 2
a229 1
				*diskSector -= raidPtr->Layout.sectorsPerStripeUnit;
d231 2
a232 1
				*col = (index_within_disk + 2) % raidPtr->numCol;
a233 1

d236 3
a238 6
void 
rf_IdentifyStripeChainDecluster(
    RF_Raid_t * raidPtr,
    RF_RaidAddr_t addr,
    RF_RowCol_t ** diskids,
    RF_RowCol_t * outRow)
d240 2
a241 1
	RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *) raidPtr->Layout.layoutSpecificInfo;
d251 3
a253 6
void 
rf_MapSIDToPSIDChainDecluster(
    RF_RaidLayout_t * layoutPtr,
    RF_StripeNum_t stripeID,
    RF_StripeNum_t * psID,
    RF_ReconUnitNum_t * which_ru)
d258 4
a261 2
/******************************************************************************
 * select a graph to perform a single-stripe access
d263 4
a266 4
 * Parameters:  raidPtr    - description of the physical array
 *              type       - type of operation (read or write) requested
 *              asmap      - logical & physical addresses for this access
 *              createFunc - function to use to create the graph (return value)
d269 3
a271 12
void 
rf_RAIDCDagSelect(
    RF_Raid_t * raidPtr,
    RF_IoType_t type,
    RF_AccessStripeMap_t * asmap,
    RF_VoidFuncPtr * createFunc)
#if 0
	void    (**createFunc) (RF_Raid_t *, RF_AccessStripeMap_t *,
            RF_DagHeader_t *, void *, RF_RaidAccessFlags_t,
/**INDENT** Warning@@258: Extra ) */
            RF_AllocListElem_t *))
#endif
d277 2
a278 1
		RF_ERRORMSG("Multiple disks failed in a single group!  Aborting I/O operation.\n");
d282 3
a284 1
	*createFunc = (type == RF_IO_TYPE_READ) ? (RF_VoidFuncPtr) rf_CreateFaultFreeReadDAG : (RF_VoidFuncPtr) rf_CreateRaidOneWriteDAG;
d287 8
a294 4
		if ((raidPtr->status[0] == rf_rs_degraded) || (raidPtr->status[0] == rf_rs_reconstructing))
			*createFunc = (RF_VoidFuncPtr) rf_CreateRaidCDegradedReadDAG;	/* array status is
											 * degraded, implement
											 * workload shifting */
d296 6
a301 3
			*createFunc = (RF_VoidFuncPtr) rf_CreateMirrorPartitionReadDAG;	/* array status not
											 * degraded, so use
											 * mirror partition dag */
@


1.3.12.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/*****************************************************************************
d50 12
a61 13
	RF_RowCol_t	**stripeIdentifier;	/*
						 * Filled in at config time and
						 * used by IdentifyStripe.
						 */
	RF_StripeCount_t  numSparingRegions;
	RF_StripeCount_t  stripeUnitsPerSparingRegion;
	RF_SectorNum_t	  mirrorStripeOffset;
}	RF_ChaindeclusterConfigInfo_t;


int
rf_ConfigureChainDecluster(RF_ShutdownList_t **listp, RF_Raid_t *raidPtr,
    RF_Config_t *cfgPtr)
d68 2
a69 3
	/* Create a Chained Declustering configuration structure. */
	RF_MallocAndAdd(info, sizeof(RF_ChaindeclusterConfigInfo_t),
	    (RF_ChaindeclusterConfigInfo_t *), raidPtr->cleanupList);
d74 2
a75 3
	/* Fill in the config structure. */
	info->stripeIdentifier = rf_make_2d_array(raidPtr->numCol, 2,
	    raidPtr->cleanupList);
d85 8
a92 13
	/* Fill in the remaining layout parameters. */
	num_used_stripeUnitsPerDisk = layoutPtr->stripeUnitsPerDisk -
	    (layoutPtr->stripeUnitsPerDisk % (2 * raidPtr->numCol - 2));
	info->numSparingRegions = num_used_stripeUnitsPerDisk /
	    (2 * raidPtr->numCol - 2);
	info->stripeUnitsPerSparingRegion = raidPtr->numCol *
	    (raidPtr->numCol - 1);
	info->mirrorStripeOffset = info->numSparingRegions *
	    (raidPtr->numCol - 1);
	layoutPtr->numStripe = info->numSparingRegions *
	    info->stripeUnitsPerSparingRegion;
	layoutPtr->bytesPerStripeUnit = layoutPtr->sectorsPerStripeUnit <<
	    raidPtr->logBytesPerSector;
d94 1
a94 2
	layoutPtr->dataSectorsPerStripe = layoutPtr->numDataCol *
	    layoutPtr->sectorsPerStripeUnit;
d99 2
a100 2
	raidPtr->sectorsPerDisk = num_used_stripeUnitsPerDisk *
	    layoutPtr->sectorsPerStripeUnit;
d102 2
a103 2
	raidPtr->totalSectors = (layoutPtr->numStripe) *
	    layoutPtr->sectorsPerStripeUnit;
d105 1
a105 2
	layoutPtr->stripeUnitsPerDisk = raidPtr->sectorsPerDisk /
	    layoutPtr->sectorsPerStripeUnit;
d110 3
a112 2
RF_ReconUnitCount_t
rf_GetNumSpareRUsChainDecluster(RF_Raid_t *raidPtr)
d114 1
a114 2
	RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *)
	    raidPtr->Layout.layoutSpecificInfo;
d117 3
a119 3
	 * The layout uses two stripe units per disk as spare within each
	 * sparing region.
	 */
d124 9
a132 4
/* Maps to the primary copy of the data, i.e. the first mirror pair. */
void
rf_MapSectorChainDecluster(RF_Raid_t *raidPtr, RF_RaidAddr_t raidSector,
    RF_RowCol_t *row, RF_RowCol_t *col, RF_SectorNum_t *diskSector, int remap)
d134 1
a134 2
	RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *)
	    raidPtr->Layout.layoutSpecificInfo;
d138 1
a138 1
	int col_before_remap;
d148 3
a150 4
		*diskSector = (index_within_disk + ((raidPtr->numCol - 1) *
		    sparing_region_id)) * raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidSector %
		    raidPtr->Layout.sectorsPerStripeUnit);
d152 4
a155 7
		/* Remap sector to spare space... */
		*diskSector = sparing_region_id * (raidPtr->numCol + 1) *
		    raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidPtr->numCol - 1) *
		    raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidSector %
		    raidPtr->Layout.sectorsPerStripeUnit);
d161 2
a162 4
				*col = (col_before_remap + raidPtr->numCol - 1)
				    % raidPtr->numCol;
				*diskSector +=
				    raidPtr->Layout.sectorsPerStripeUnit;
d164 1
a164 2
				*col = (index_within_disk + 2) %
				    raidPtr->numCol;
d170 12
a181 9
/*
 * Maps to the second copy of the mirror pair, which is chain declustered.
 * The second copy is contained in the next disk (mod numCol) after the disk
 * containing the primary copy.
 * The offset into the disk is one-half disk down.
 */
void
rf_MapParityChainDecluster(RF_Raid_t *raidPtr, RF_RaidAddr_t raidSector,
    RF_RowCol_t *row, RF_RowCol_t *col, RF_SectorNum_t *diskSector, int remap)
d183 1
a183 2
	RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *)
	    raidPtr->Layout.layoutSpecificInfo;
d187 1
a187 1
	int col_before_remap;
d193 3
a195 6
		*diskSector = info->mirrorStripeOffset *
		    raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (SUID / raidPtr->numCol) *
		    raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidSector %
		    raidPtr->Layout.sectorsPerStripeUnit);
d197 1
a197 1
		/* Remap parity to spare space... */
d201 3
a203 6
		*diskSector = sparing_region_id * (raidPtr->numCol + 1) *
		    raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidPtr->numCol) *
		    raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidSector %
		    raidPtr->Layout.sectorsPerStripeUnit);
d210 1
a210 2
				*diskSector -=
				    raidPtr->Layout.sectorsPerStripeUnit;
d212 1
a212 2
				*col = (index_within_disk + 2) %
				    raidPtr->numCol;
d214 1
d217 6
a222 3
void
rf_IdentifyStripeChainDecluster(RF_Raid_t *raidPtr, RF_RaidAddr_t addr,
    RF_RowCol_t **diskids, RF_RowCol_t *outRow)
d224 1
a224 2
	RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *)
	    raidPtr->Layout.layoutSpecificInfo;
d234 6
a239 3
void
rf_MapSIDToPSIDChainDecluster(RF_RaidLayout_t *layoutPtr,
    RF_StripeNum_t stripeID, RF_StripeNum_t *psID, RF_ReconUnitNum_t *which_ru)
d244 2
a245 4


/****************************************************************************
 * Select a graph to perform a single-stripe access.
d247 4
a250 4
 * Parameters:	raidPtr	   - description of the physical array
 *		type	   - type of operation (read or write) requested
 *		asmap	   - logical & physical addresses for this access
 *		createFunc - function to use to create the graph (return value)
d253 12
a264 3
void
rf_RAIDCDagSelect(RF_Raid_t *raidPtr, RF_IoType_t type,
    RF_AccessStripeMap_t *asmap, RF_VoidFuncPtr *createFunc)
d270 1
a270 2
		RF_ERRORMSG("Multiple disks failed in a single group !"
		    "  Aborting I/O operation.\n");
d274 1
a274 3
	*createFunc = (type == RF_IO_TYPE_READ) ?
	    (RF_VoidFuncPtr) rf_CreateFaultFreeReadDAG :
	    (RF_VoidFuncPtr) rf_CreateRaidOneWriteDAG;
d277 4
a280 8
		if ((raidPtr->status[0] == rf_rs_degraded) ||
		    (raidPtr->status[0] == rf_rs_reconstructing))
			/*
			 * Array status is degraded,
			 * implement workload shifting.
			 */
			*createFunc = (RF_VoidFuncPtr)
			    rf_CreateRaidCDegradedReadDAG;
d282 3
a284 6
			/*
			 * Array status not degraded,
			 * so use mirror partition dag.
			 */
			*createFunc = (RF_VoidFuncPtr)
			    rf_CreateMirrorPartitionReadDAG;
@


1.3.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/*****************************************************************************
d50 12
a61 13
	RF_RowCol_t	**stripeIdentifier;	/*
						 * Filled in at config time and
						 * used by IdentifyStripe.
						 */
	RF_StripeCount_t  numSparingRegions;
	RF_StripeCount_t  stripeUnitsPerSparingRegion;
	RF_SectorNum_t	  mirrorStripeOffset;
}	RF_ChaindeclusterConfigInfo_t;


int
rf_ConfigureChainDecluster(RF_ShutdownList_t **listp, RF_Raid_t *raidPtr,
    RF_Config_t *cfgPtr)
d68 2
a69 3
	/* Create a Chained Declustering configuration structure. */
	RF_MallocAndAdd(info, sizeof(RF_ChaindeclusterConfigInfo_t),
	    (RF_ChaindeclusterConfigInfo_t *), raidPtr->cleanupList);
d74 2
a75 3
	/* Fill in the config structure. */
	info->stripeIdentifier = rf_make_2d_array(raidPtr->numCol, 2,
	    raidPtr->cleanupList);
d85 8
a92 13
	/* Fill in the remaining layout parameters. */
	num_used_stripeUnitsPerDisk = layoutPtr->stripeUnitsPerDisk -
	    (layoutPtr->stripeUnitsPerDisk % (2 * raidPtr->numCol - 2));
	info->numSparingRegions = num_used_stripeUnitsPerDisk /
	    (2 * raidPtr->numCol - 2);
	info->stripeUnitsPerSparingRegion = raidPtr->numCol *
	    (raidPtr->numCol - 1);
	info->mirrorStripeOffset = info->numSparingRegions *
	    (raidPtr->numCol - 1);
	layoutPtr->numStripe = info->numSparingRegions *
	    info->stripeUnitsPerSparingRegion;
	layoutPtr->bytesPerStripeUnit = layoutPtr->sectorsPerStripeUnit <<
	    raidPtr->logBytesPerSector;
d94 1
a94 2
	layoutPtr->dataSectorsPerStripe = layoutPtr->numDataCol *
	    layoutPtr->sectorsPerStripeUnit;
d99 2
a100 2
	raidPtr->sectorsPerDisk = num_used_stripeUnitsPerDisk *
	    layoutPtr->sectorsPerStripeUnit;
d102 2
a103 2
	raidPtr->totalSectors = (layoutPtr->numStripe) *
	    layoutPtr->sectorsPerStripeUnit;
d105 1
a105 2
	layoutPtr->stripeUnitsPerDisk = raidPtr->sectorsPerDisk /
	    layoutPtr->sectorsPerStripeUnit;
d110 3
a112 2
RF_ReconUnitCount_t
rf_GetNumSpareRUsChainDecluster(RF_Raid_t *raidPtr)
d114 1
a114 2
	RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *)
	    raidPtr->Layout.layoutSpecificInfo;
d117 3
a119 3
	 * The layout uses two stripe units per disk as spare within each
	 * sparing region.
	 */
d124 9
a132 4
/* Maps to the primary copy of the data, i.e. the first mirror pair. */
void
rf_MapSectorChainDecluster(RF_Raid_t *raidPtr, RF_RaidAddr_t raidSector,
    RF_RowCol_t *row, RF_RowCol_t *col, RF_SectorNum_t *diskSector, int remap)
d134 1
a134 2
	RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *)
	    raidPtr->Layout.layoutSpecificInfo;
d138 1
a138 1
	int col_before_remap;
d148 3
a150 4
		*diskSector = (index_within_disk + ((raidPtr->numCol - 1) *
		    sparing_region_id)) * raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidSector %
		    raidPtr->Layout.sectorsPerStripeUnit);
d152 4
a155 7
		/* Remap sector to spare space... */
		*diskSector = sparing_region_id * (raidPtr->numCol + 1) *
		    raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidPtr->numCol - 1) *
		    raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidSector %
		    raidPtr->Layout.sectorsPerStripeUnit);
d161 2
a162 4
				*col = (col_before_remap + raidPtr->numCol - 1)
				    % raidPtr->numCol;
				*diskSector +=
				    raidPtr->Layout.sectorsPerStripeUnit;
d164 1
a164 2
				*col = (index_within_disk + 2) %
				    raidPtr->numCol;
d170 12
a181 9
/*
 * Maps to the second copy of the mirror pair, which is chain declustered.
 * The second copy is contained in the next disk (mod numCol) after the disk
 * containing the primary copy.
 * The offset into the disk is one-half disk down.
 */
void
rf_MapParityChainDecluster(RF_Raid_t *raidPtr, RF_RaidAddr_t raidSector,
    RF_RowCol_t *row, RF_RowCol_t *col, RF_SectorNum_t *diskSector, int remap)
d183 1
a183 2
	RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *)
	    raidPtr->Layout.layoutSpecificInfo;
d187 1
a187 1
	int col_before_remap;
d193 3
a195 6
		*diskSector = info->mirrorStripeOffset *
		    raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (SUID / raidPtr->numCol) *
		    raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidSector %
		    raidPtr->Layout.sectorsPerStripeUnit);
d197 1
a197 1
		/* Remap parity to spare space... */
d201 3
a203 6
		*diskSector = sparing_region_id * (raidPtr->numCol + 1) *
		    raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidPtr->numCol) *
		    raidPtr->Layout.sectorsPerStripeUnit;
		*diskSector += (raidSector %
		    raidPtr->Layout.sectorsPerStripeUnit);
d210 1
a210 2
				*diskSector -=
				    raidPtr->Layout.sectorsPerStripeUnit;
d212 1
a212 2
				*col = (index_within_disk + 2) %
				    raidPtr->numCol;
d214 1
d217 6
a222 3
void
rf_IdentifyStripeChainDecluster(RF_Raid_t *raidPtr, RF_RaidAddr_t addr,
    RF_RowCol_t **diskids, RF_RowCol_t *outRow)
d224 1
a224 2
	RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *)
	    raidPtr->Layout.layoutSpecificInfo;
d234 6
a239 3
void
rf_MapSIDToPSIDChainDecluster(RF_RaidLayout_t *layoutPtr,
    RF_StripeNum_t stripeID, RF_StripeNum_t *psID, RF_ReconUnitNum_t *which_ru)
d244 2
a245 4


/****************************************************************************
 * Select a graph to perform a single-stripe access.
d247 4
a250 4
 * Parameters:	raidPtr	   - description of the physical array
 *		type	   - type of operation (read or write) requested
 *		asmap	   - logical & physical addresses for this access
 *		createFunc - function to use to create the graph (return value)
d253 12
a264 3
void
rf_RAIDCDagSelect(RF_Raid_t *raidPtr, RF_IoType_t type,
    RF_AccessStripeMap_t *asmap, RF_VoidFuncPtr *createFunc)
d270 1
a270 2
		RF_ERRORMSG("Multiple disks failed in a single group !"
		    "  Aborting I/O operation.\n");
d274 1
a274 3
	*createFunc = (type == RF_IO_TYPE_READ) ?
	    (RF_VoidFuncPtr) rf_CreateFaultFreeReadDAG :
	    (RF_VoidFuncPtr) rf_CreateRaidOneWriteDAG;
d277 4
a280 8
		if ((raidPtr->status[0] == rf_rs_degraded) ||
		    (raidPtr->status[0] == rf_rs_reconstructing))
			/*
			 * Array status is degraded,
			 * implement workload shifting.
			 */
			*createFunc = (RF_VoidFuncPtr)
			    rf_CreateRaidCDegradedReadDAG;
d282 3
a284 6
			/*
			 * Array status not degraded,
			 * so use mirror partition dag.
			 */
			*createFunc = (RF_VoidFuncPtr)
			    rf_CreateMirrorPartitionReadDAG;
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_chaindecluster.c,v 1.1 1999/01/11 14:29:01 niklas Exp $	*/
/*	$NetBSD: rf_chaindecluster.c,v 1.3 1999/02/05 00:06:06 oster Exp $	*/
a45 1
#include "rf_threadid.h"
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_chaindecluster.c,v 1.1 1998/11/13 04:20:26 oster Exp $	*/
/*	$NetBSD: rf_chaindecluster.c,v 1.1 1998/11/13 04:20:26 oster Exp $	*/
a35 101
/* :  
 * Log: rf_chaindecluster.c,v 
 * Revision 1.33  1996/08/02 13:20:34  jimz
 * get rid of bogus (long) casts
 *
 * Revision 1.32  1996/07/31  16:56:18  jimz
 * dataBytesPerStripe, sectorsPerDisk init arch-indep.
 *
 * Revision 1.31  1996/07/29  14:05:12  jimz
 * fix numPUs/numRUs confusion (everything is now numRUs)
 * clean up some commenting, return values
 *
 * Revision 1.30  1996/07/22  19:52:16  jimz
 * switched node params to RF_DagParam_t, a union of
 * a 64-bit int and a void *, for better portability
 * attempted hpux port, but failed partway through for
 * lack of a single C compiler capable of compiling all
 * source files
 *
 * Revision 1.29  1996/07/18  22:57:14  jimz
 * port simulator to AIX
 *
 * Revision 1.28  1996/06/19  17:53:48  jimz
 * move GetNumSparePUs, InstallSpareTable ops into layout switch
 *
 * Revision 1.27  1996/06/11  15:19:57  wvcii
 * added include of rf_chaindecluster.h
 * fixed parameter list of rf_ConfigureChainDecluster
 *
 * Revision 1.26  1996/06/11  08:55:15  jimz
 * improved error-checking at configuration time
 *
 * Revision 1.25  1996/06/10  11:55:47  jimz
 * Straightened out some per-array/not-per-array distinctions, fixed
 * a couple bugs related to confusion. Added shutdown lists. Removed
 * layout shutdown function (now subsumed by shutdown lists).
 *
 * Revision 1.24  1996/06/07  22:26:27  jimz
 * type-ify which_ru (RF_ReconUnitNum_t)
 *
 * Revision 1.23  1996/06/07  21:33:04  jimz
 * begin using consistent types for sector numbers,
 * stripe numbers, row+col numbers, recon unit numbers
 *
 * Revision 1.22  1996/06/06  17:31:30  jimz
 * use CreateMirrorPartitionReadDAG for mirrored reads
 *
 * Revision 1.21  1996/06/03  23:28:26  jimz
 * more bugfixes
 * check in tree to sync for IPDS runs with current bugfixes
 * there still may be a problem with threads in the script test
 * getting I/Os stuck- not trivially reproducible (runs ~50 times
 * in a row without getting stuck)
 *
 * Revision 1.20  1996/06/02  17:31:48  jimz
 * Moved a lot of global stuff into array structure, where it belongs.
 * Fixed up paritylogging, pss modules in this manner. Some general
 * code cleanup. Removed lots of dead code, some dead files.
 *
 * Revision 1.19  1996/05/31  22:26:54  jimz
 * fix a lot of mapping problems, memory allocation problems
 * found some weird lock issues, fixed 'em
 * more code cleanup
 *
 * Revision 1.18  1996/05/31  16:13:28  amiri
 * removed/added some commnets.
 *
 * Revision 1.17  1996/05/31  05:01:52  amiri
 * fixed a bug related to sparing layout.
 *
 * Revision 1.16  1996/05/30  23:22:16  jimz
 * bugfixes of serialization, timing problems
 * more cleanup
 *
 * Revision 1.15  1996/05/27  18:56:37  jimz
 * more code cleanup
 * better typing
 * compiles in all 3 environments
 *
 * Revision 1.14  1996/05/24  22:17:04  jimz
 * continue code + namespace cleanup
 * typed a bunch of flags
 *
 * Revision 1.13  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.12  1996/05/23  00:33:23  jimz
 * code cleanup: move all debug decls to rf_options.c, all extern
 * debug decls to rf_options.h, all debug vars preceded by rf_
 *
 * Revision 1.11  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.10  1996/05/03  19:53:56  wvcii
 * removed include of rf_redstripe.h
 * moved dag creation routines to new dag library
 *
 */

d51 12
a62 11
  RF_RowCol_t       **stripeIdentifier;   /* filled in at config time
                                           * and used by IdentifyStripe */
  RF_StripeCount_t    numSparingRegions;
  RF_StripeCount_t    stripeUnitsPerSparingRegion;
  RF_SectorNum_t      mirrorStripeOffset;  
} RF_ChaindeclusterConfigInfo_t;

int rf_ConfigureChainDecluster(
  RF_ShutdownList_t  **listp,
  RF_Raid_t           *raidPtr,
  RF_Config_t         *cfgPtr)
d64 38
a101 38
  RF_RaidLayout_t *layoutPtr = &raidPtr->Layout;
  RF_StripeCount_t num_used_stripeUnitsPerDisk;
  RF_ChaindeclusterConfigInfo_t *info;
  RF_RowCol_t i;
  
  /* create a Chained Declustering configuration structure */
  RF_MallocAndAdd(info, sizeof(RF_ChaindeclusterConfigInfo_t), (RF_ChaindeclusterConfigInfo_t *), raidPtr->cleanupList);
  if (info == NULL)
    return(ENOMEM);
  layoutPtr->layoutSpecificInfo = (void *) info;

  /*  fill in the config structure.  */
  info->stripeIdentifier = rf_make_2d_array(raidPtr->numCol, 2 , raidPtr->cleanupList);
  if (info->stripeIdentifier == NULL)
    return(ENOMEM);
  for (i=0; i< raidPtr->numCol; i++) {
      info->stripeIdentifier[i][0] = i % raidPtr->numCol;
      info->stripeIdentifier[i][1] = (i+1) % raidPtr->numCol;
    }

  RF_ASSERT(raidPtr->numRow == 1);

  /* fill in the remaining layout parameters */
  num_used_stripeUnitsPerDisk = layoutPtr->stripeUnitsPerDisk - (layoutPtr->stripeUnitsPerDisk %
        (2*raidPtr->numCol-2) );
  info->numSparingRegions = num_used_stripeUnitsPerDisk / (2*raidPtr->numCol-2);
  info->stripeUnitsPerSparingRegion = raidPtr->numCol * (raidPtr->numCol - 1);
  info->mirrorStripeOffset = info->numSparingRegions * (raidPtr->numCol-1);
  layoutPtr->numStripe = info->numSparingRegions * info->stripeUnitsPerSparingRegion;
  layoutPtr->bytesPerStripeUnit = layoutPtr->sectorsPerStripeUnit << raidPtr->logBytesPerSector;
  layoutPtr->numDataCol = 1;
  layoutPtr->dataSectorsPerStripe = layoutPtr->numDataCol * layoutPtr->sectorsPerStripeUnit;
  layoutPtr->numParityCol = 1;

 layoutPtr->dataStripeUnitsPerDisk = num_used_stripeUnitsPerDisk;

 raidPtr->sectorsPerDisk =
     num_used_stripeUnitsPerDisk * layoutPtr->sectorsPerStripeUnit;
d103 2
a104 2
  raidPtr->totalSectors =
     (layoutPtr->numStripe) * layoutPtr->sectorsPerStripeUnit;
d106 1
a106 1
  layoutPtr->stripeUnitsPerDisk = raidPtr->sectorsPerDisk / layoutPtr->sectorsPerStripeUnit;
d108 1
a108 1
  return(0);
d111 3
a113 2
RF_ReconUnitCount_t rf_GetNumSpareRUsChainDecluster(raidPtr)
  RF_Raid_t  *raidPtr;
d115 1
a115 1
  RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *) raidPtr->Layout.layoutSpecificInfo;
d117 5
a121 5
  /*
   * The layout uses two stripe units per disk as spare within each
   * sparing region.
   */
  return (2*info->numSparingRegions);
d126 8
a133 7
void rf_MapSectorChainDecluster(
  RF_Raid_t         *raidPtr,
  RF_RaidAddr_t      raidSector,
  RF_RowCol_t       *row,
  RF_RowCol_t       *col,
  RF_SectorNum_t    *diskSector,
  int                remap)
d135 32
a166 33
 RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *) raidPtr->Layout.layoutSpecificInfo;
 RF_StripeNum_t SUID = raidSector / raidPtr->Layout.sectorsPerStripeUnit;
 RF_SectorNum_t index_within_region, index_within_disk;
 RF_StripeNum_t sparing_region_id;
 int col_before_remap;

 *row = 0;
 sparing_region_id = SUID / info->stripeUnitsPerSparingRegion;
 index_within_region = SUID % info->stripeUnitsPerSparingRegion;
 index_within_disk = index_within_region / raidPtr->numCol;
 col_before_remap = SUID % raidPtr->numCol;

 if (!remap) {
        *col = col_before_remap;
        *diskSector = ( index_within_disk + ( (raidPtr->numCol-1) * sparing_region_id) ) *
                        raidPtr->Layout.sectorsPerStripeUnit;
        *diskSector += (raidSector % raidPtr->Layout.sectorsPerStripeUnit);
      }
 else {
       /* remap sector to spare space...*/
      *diskSector = sparing_region_id * (raidPtr->numCol+1) * raidPtr->Layout.sectorsPerStripeUnit;
      *diskSector += (raidPtr->numCol-1) * raidPtr->Layout.sectorsPerStripeUnit;
      *diskSector += (raidSector % raidPtr->Layout.sectorsPerStripeUnit);
      index_within_disk = index_within_region / raidPtr->numCol;
      if (index_within_disk < col_before_remap )
        *col = index_within_disk;
      else if (index_within_disk  == raidPtr->numCol-2 ) {
        *col = (col_before_remap+raidPtr->numCol-1) % raidPtr->numCol;
        *diskSector += raidPtr->Layout.sectorsPerStripeUnit;
        }
      else
        *col = (index_within_disk + 2) % raidPtr->numCol; 
   }
d173 1
a173 1
   in the next disk (mod numCol) after the disk containing the primary copy. 
d175 8
a182 7
void rf_MapParityChainDecluster(
  RF_Raid_t       *raidPtr,
  RF_RaidAddr_t    raidSector,
  RF_RowCol_t     *row,
  RF_RowCol_t     *col,
  RF_SectorNum_t  *diskSector,
  int              remap)
d184 31
a214 32
  RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *) raidPtr->Layout.layoutSpecificInfo;
  RF_StripeNum_t SUID = raidSector / raidPtr->Layout.sectorsPerStripeUnit;
  RF_SectorNum_t index_within_region, index_within_disk;
  RF_StripeNum_t sparing_region_id;
  int col_before_remap;

  *row = 0;
  if (!remap) {
        *col = SUID % raidPtr->numCol;
        *col = (*col + 1) % raidPtr->numCol;
        *diskSector =  info->mirrorStripeOffset * raidPtr->Layout.sectorsPerStripeUnit;
        *diskSector += ( SUID / raidPtr->numCol ) * raidPtr->Layout.sectorsPerStripeUnit;
        *diskSector += (raidSector % raidPtr->Layout.sectorsPerStripeUnit);
       }
  else {
        /* remap parity to spare space ... */
        sparing_region_id = SUID / info->stripeUnitsPerSparingRegion;
        index_within_region = SUID % info->stripeUnitsPerSparingRegion;
        index_within_disk = index_within_region / raidPtr->numCol;
        *diskSector =  sparing_region_id * (raidPtr->numCol+1) * raidPtr->Layout.sectorsPerStripeUnit;
        *diskSector += (raidPtr->numCol) * raidPtr->Layout.sectorsPerStripeUnit;
        *diskSector += (raidSector % raidPtr->Layout.sectorsPerStripeUnit);
        col_before_remap = SUID % raidPtr->numCol;
        if (index_within_disk < col_before_remap)
                *col = index_within_disk;
        else if (index_within_disk  == raidPtr->numCol-2 ) {
                *col = (col_before_remap+2) % raidPtr->numCol;
                *diskSector -= raidPtr->Layout.sectorsPerStripeUnit;
                }
        else
                *col = (index_within_disk + 2) % raidPtr->numCol;
  }
d218 6
a223 5
void rf_IdentifyStripeChainDecluster(
  RF_Raid_t        *raidPtr,
  RF_RaidAddr_t     addr,
  RF_RowCol_t     **diskids,
  RF_RowCol_t      *outRow)
d225 8
a232 8
  RF_ChaindeclusterConfigInfo_t *info = (RF_ChaindeclusterConfigInfo_t *) raidPtr->Layout.layoutSpecificInfo;
  RF_StripeNum_t SUID;
  RF_RowCol_t col;

  SUID = addr / raidPtr->Layout.sectorsPerStripeUnit;
  col = SUID  % raidPtr->numCol;
  *outRow = 0;
  *diskids = info->stripeIdentifier[ col ];
d235 6
a240 5
void rf_MapSIDToPSIDChainDecluster(
  RF_RaidLayout_t    *layoutPtr,
  RF_StripeNum_t      stripeID,
  RF_StripeNum_t     *psID,
  RF_ReconUnitNum_t  *which_ru)
d242 2
a243 2
  *which_ru = 0;
  *psID = stripeID;
a244 1

d254 6
a259 5
void rf_RAIDCDagSelect(
  RF_Raid_t             *raidPtr,
  RF_IoType_t            type,
  RF_AccessStripeMap_t  *asmap,
  RF_VoidFuncPtr *createFunc)
d261 4
a264 3
  void (**createFunc)(RF_Raid_t *, RF_AccessStripeMap_t *,
		     RF_DagHeader_t *, void *, RF_RaidAccessFlags_t,
		     RF_AllocListElem_t *))
d267 2
a268 2
  RF_ASSERT(RF_IO_IS_R_OR_W(type));
  RF_ASSERT(raidPtr->numRow == 1);
d270 18
a287 16
  if (asmap->numDataFailed + asmap->numParityFailed > 1) {
    RF_ERRORMSG("Multiple disks failed in a single group!  Aborting I/O operation.\n");
    *createFunc = NULL;
    return;
  }

  *createFunc = (type == RF_IO_TYPE_READ) ? (RF_VoidFuncPtr)rf_CreateFaultFreeReadDAG :(RF_VoidFuncPtr) rf_CreateRaidOneWriteDAG;

  if (type == RF_IO_TYPE_READ) {
    if ( ( raidPtr->status[0] == rf_rs_degraded ) || (  raidPtr->status[0] == rf_rs_reconstructing) )
      *createFunc = (RF_VoidFuncPtr)rf_CreateRaidCDegradedReadDAG;  /* array status is degraded, implement workload shifting */
    else
      *createFunc = (RF_VoidFuncPtr)rf_CreateMirrorPartitionReadDAG; /* array status not degraded, so use mirror partition dag */
  }
  else
    *createFunc = (RF_VoidFuncPtr)rf_CreateRaidOneWriteDAG;
@

