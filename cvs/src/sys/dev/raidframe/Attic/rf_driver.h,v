head	1.5;
access;
symbols
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.38
	OPENBSD_5_0:1.4.0.36
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.34
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.32
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.28
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.30
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.26
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.24
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.22
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.20
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.18
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.16
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.14
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.12
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.10
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.8
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.8
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.4;

1.4
date	2002.12.16.07.01.03;	author tdeval;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.08.16.07.41;	author peter;	state Exp;
branches
	1.3.8.1;
next	1.2;

1.2
date	99.02.16.00.02.41;	author niklas;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	99.01.11.14.29.19;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2001.05.14.22.26.11;	author niklas;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2003.03.28.00.38.28;	author niklas;	state Exp;
branches;
next	;

1.3.8.1
date	2003.05.19.22.21.51;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_driver.h,v 1.4 2002/12/16 07:01:03 tdeval Exp $	*/
/*	$NetBSD: rf_driver.h,v 1.4 2000/02/13 04:53:57 oster Exp $	*/

/*
 * rf_driver.h
 */
/*
 * Copyright (c) 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Jim Zelenka
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#ifndef	_RF__RF_DRIVER_H_
#define	_RF__RF_DRIVER_H_

#include "rf_threadstuff.h"
#include "rf_types.h"

#if	defined(__NetBSD__)
#include "rf_netbsd.h"
#elif	defined(__OpenBSD__)
#include "rf_openbsd.h"
#endif

#if	_KERNEL
RF_DECLARE_EXTERN_MUTEX(rf_printf_mutex);
int  rf_BootRaidframe(void);
int  rf_UnbootRaidframe(void);
int  rf_Shutdown(RF_Raid_t *);
int  rf_Configure(RF_Raid_t *, RF_Config_t *, RF_AutoConfig_t *);
RF_RaidAccessDesc_t *rf_AllocRaidAccDesc(RF_Raid_t *, RF_IoType_t,
	RF_RaidAddr_t, RF_SectorCount_t, caddr_t, void *, RF_DagHeader_t **,
	RF_AccessStripeMapHeader_t **, RF_RaidAccessFlags_t,
	void (*) (struct buf *), void *, RF_AccessState_t *);
void rf_FreeRaidAccDesc(RF_RaidAccessDesc_t *);
int  rf_DoAccess(RF_Raid_t *, RF_IoType_t, int, RF_RaidAddr_t,
	RF_SectorCount_t, caddr_t, void *, RF_DagHeader_t **,
	RF_AccessStripeMapHeader_t **, RF_RaidAccessFlags_t,
	RF_RaidAccessDesc_t **, void (*) (struct buf *), void *);
int  rf_SetReconfiguredMode(RF_Raid_t *, RF_RowCol_t, RF_RowCol_t);
int  rf_FailDisk(RF_Raid_t *, RF_RowCol_t, RF_RowCol_t, int);
void rf_SignalQuiescenceLock(RF_Raid_t *, RF_RaidReconDesc_t *);
int  rf_SuspendNewRequestsAndWait(RF_Raid_t *);
void rf_ResumeNewRequests(RF_Raid_t *);
void rf_StartThroughputStats(RF_Raid_t *);
void rf_StartUserStats(RF_Raid_t *);
void rf_StopUserStats(RF_Raid_t *);
void rf_UpdateUserStats(RF_Raid_t *, int, int);
void rf_PrintUserStats(RF_Raid_t *);
#endif	/* _KERNEL */

#endif	/* !_RF__RF_DRIVER_H_ */
@


1.4
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_driver.h,v 1.3 2000/08/08 16:07:41 peter Exp $	*/
@


1.3
log
@sync RAIDframe with Gre Oster's work for NetBSD.

This update incorporates changes since January 2000.

RAID1 and RAID5 tested for functionality matching the 2.7 code. A
number of bug fixes (including stopping a parity rebuild when
unconfiguring) have been included. See Greg's RAIDframe info page:

	http://www.cs.usask.ca/staff/oster/raid.html

The RAID_AUTOCONFIG feature set does *NOT* yet work. These features
require more work throughout the boot system and as such are a big
task.

IMPORTANT: As with anything that is this near live data on your
systems, please test carefully with existing configurations before
deploying in a live system.  Feedback via sendbug or mail direct
to peter@@wonderland.org is appreciated.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_driver.h,v 1.2 1999/02/16 00:02:41 niklas Exp $	*/
d3 1
d34 2
a35 2
#ifndef _RF__RF_DRIVER_H_
#define _RF__RF_DRIVER_H_
d40 1
a40 1
#if defined(__NetBSD__)
d42 1
a42 1
#elif defined(__OpenBSD__)
d46 28
a73 40
#if _KERNEL
RF_DECLARE_EXTERN_MUTEX(rf_printf_mutex)
int     rf_BootRaidframe(void);
int     rf_UnbootRaidframe(void);
int     rf_Shutdown(RF_Raid_t * raidPtr);
int     rf_Configure(RF_Raid_t * raidPtr, RF_Config_t * cfgPtr,
		     RF_AutoConfig_t *ac);
RF_RaidAccessDesc_t *rf_AllocRaidAccDesc(RF_Raid_t * raidPtr, RF_IoType_t type,
					 RF_RaidAddr_t raidAddress, 
					 RF_SectorCount_t numBlocks, 
					 caddr_t bufPtr,
					 void *bp, RF_DagHeader_t ** paramDAG,
					 RF_AccessStripeMapHeader_t ** paramASM,
					 RF_RaidAccessFlags_t flags, 
					 void (*cbF) (struct buf *), 
					 void *cbA,
					 RF_AccessState_t * states);
void    rf_FreeRaidAccDesc(RF_RaidAccessDesc_t * desc);
int     rf_DoAccess(RF_Raid_t * raidPtr, RF_IoType_t type, int async_flag,
		    RF_RaidAddr_t raidAddress, RF_SectorCount_t numBlocks, 
		    caddr_t bufPtr, void *bp_in, RF_DagHeader_t ** paramDAG,
		    RF_AccessStripeMapHeader_t ** paramASM, 
		    RF_RaidAccessFlags_t flags, 
		    RF_RaidAccessDesc_t ** paramDesc, 
		    void (*cbF) (struct buf *), void *cbA);
int     rf_SetReconfiguredMode(RF_Raid_t * raidPtr, RF_RowCol_t row,
			       RF_RowCol_t col);
int     rf_FailDisk(RF_Raid_t * raidPtr, RF_RowCol_t frow, RF_RowCol_t fcol,
		    int initRecon);
void    rf_SignalQuiescenceLock(RF_Raid_t * raidPtr, 
				RF_RaidReconDesc_t * reconDesc);
int     rf_SuspendNewRequestsAndWait(RF_Raid_t * raidPtr);
void    rf_ResumeNewRequests(RF_Raid_t * raidPtr);
void    rf_StartThroughputStats(RF_Raid_t * raidPtr);
void    rf_StartUserStats(RF_Raid_t * raidPtr);
void    rf_StopUserStats(RF_Raid_t * raidPtr);
void    rf_UpdateUserStats(RF_Raid_t * raidPtr, int rt, int numsect);
void    rf_PrintUserStats(RF_Raid_t * raidPtr);
#endif /* _KERNEL */
#endif				/* !_RF__RF_DRIVER_H_ */
@


1.3.8.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d33 2
a34 2
#ifndef	_RF__RF_DRIVER_H_
#define	_RF__RF_DRIVER_H_
d39 1
a39 1
#if	defined(__NetBSD__)
d41 1
a41 1
#elif	defined(__OpenBSD__)
d45 40
a84 28
#if	_KERNEL
RF_DECLARE_EXTERN_MUTEX(rf_printf_mutex);
int  rf_BootRaidframe(void);
int  rf_UnbootRaidframe(void);
int  rf_Shutdown(RF_Raid_t *);
int  rf_Configure(RF_Raid_t *, RF_Config_t *, RF_AutoConfig_t *);
RF_RaidAccessDesc_t *rf_AllocRaidAccDesc(RF_Raid_t *, RF_IoType_t,
	RF_RaidAddr_t, RF_SectorCount_t, caddr_t, void *, RF_DagHeader_t **,
	RF_AccessStripeMapHeader_t **, RF_RaidAccessFlags_t,
	void (*) (struct buf *), void *, RF_AccessState_t *);
void rf_FreeRaidAccDesc(RF_RaidAccessDesc_t *);
int  rf_DoAccess(RF_Raid_t *, RF_IoType_t, int, RF_RaidAddr_t,
	RF_SectorCount_t, caddr_t, void *, RF_DagHeader_t **,
	RF_AccessStripeMapHeader_t **, RF_RaidAccessFlags_t,
	RF_RaidAccessDesc_t **, void (*) (struct buf *), void *);
int  rf_SetReconfiguredMode(RF_Raid_t *, RF_RowCol_t, RF_RowCol_t);
int  rf_FailDisk(RF_Raid_t *, RF_RowCol_t, RF_RowCol_t, int);
void rf_SignalQuiescenceLock(RF_Raid_t *, RF_RaidReconDesc_t *);
int  rf_SuspendNewRequestsAndWait(RF_Raid_t *);
void rf_ResumeNewRequests(RF_Raid_t *);
void rf_StartThroughputStats(RF_Raid_t *);
void rf_StartUserStats(RF_Raid_t *);
void rf_StopUserStats(RF_Raid_t *);
void rf_UpdateUserStats(RF_Raid_t *, int, int);
void rf_PrintUserStats(RF_Raid_t *);
#endif	/* _KERNEL */

#endif	/* !_RF__RF_DRIVER_H_ */
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_driver.h,v 1.1 1999/01/11 14:29:19 niklas Exp $	*/
/*	$NetBSD: rf_driver.h,v 1.3 1999/02/05 00:06:11 oster Exp $	*/
d39 7
d47 37
a83 28
	int     rf_BootRaidframe(void);
	int     rf_UnbootRaidframe(void);
	int     rf_Shutdown(RF_Raid_t * raidPtr);
	int     rf_Configure(RF_Raid_t * raidPtr, RF_Config_t * cfgPtr);
	RF_RaidAccessDesc_t *rf_AllocRaidAccDesc(RF_Raid_t * raidPtr, RF_IoType_t type,
            RF_RaidAddr_t raidAddress, RF_SectorCount_t numBlocks, caddr_t bufPtr,
            void *bp, RF_DagHeader_t ** paramDAG, RF_AccessStripeMapHeader_t ** paramASM,
            RF_RaidAccessFlags_t flags, void (*cbF) (struct buf *), void *cbA,
            RF_AccessState_t * states);
	void    rf_FreeRaidAccDesc(RF_RaidAccessDesc_t * desc);
	int     rf_DoAccess(RF_Raid_t * raidPtr, RF_IoType_t type, int async_flag,
            RF_RaidAddr_t raidAddress, RF_SectorCount_t numBlocks, caddr_t bufPtr,
            void *bp_in, RF_DagHeader_t ** paramDAG,
            RF_AccessStripeMapHeader_t ** paramASM, RF_RaidAccessFlags_t flags,
            RF_RaidAccessDesc_t ** paramDesc, void (*cbF) (struct buf *), void *cbA);
	int     rf_SetReconfiguredMode(RF_Raid_t * raidPtr, RF_RowCol_t row,
            RF_RowCol_t col);
	int     rf_FailDisk(RF_Raid_t * raidPtr, RF_RowCol_t frow, RF_RowCol_t fcol,
            int initRecon);
	void    rf_SignalQuiescenceLock(RF_Raid_t * raidPtr, RF_RaidReconDesc_t * reconDesc);
	int     rf_SuspendNewRequestsAndWait(RF_Raid_t * raidPtr);
	void    rf_ResumeNewRequests(RF_Raid_t * raidPtr);
	void    rf_StartThroughputStats(RF_Raid_t * raidPtr);
	void    rf_StartUserStats(RF_Raid_t * raidPtr);
	void    rf_StopUserStats(RF_Raid_t * raidPtr);
	void    rf_UpdateUserStats(RF_Raid_t * raidPtr, int rt, int numsect);
	void    rf_PrintUserStats(RF_Raid_t * raidPtr);

@


1.2.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_driver.h,v 1.3 2000/08/08 16:07:41 peter Exp $	*/
/*	$NetBSD: rf_driver.h,v 1.4 2000/02/13 04:53:57 oster Exp $	*/
d39 28
a66 5
#if defined(__NetBSD__)
#include "rf_netbsd.h"
#elif defined(__OpenBSD__)
#include "rf_openbsd.h"
#endif
a67 39
#if _KERNEL
RF_DECLARE_EXTERN_MUTEX(rf_printf_mutex)
int     rf_BootRaidframe(void);
int     rf_UnbootRaidframe(void);
int     rf_Shutdown(RF_Raid_t * raidPtr);
int     rf_Configure(RF_Raid_t * raidPtr, RF_Config_t * cfgPtr,
		     RF_AutoConfig_t *ac);
RF_RaidAccessDesc_t *rf_AllocRaidAccDesc(RF_Raid_t * raidPtr, RF_IoType_t type,
					 RF_RaidAddr_t raidAddress, 
					 RF_SectorCount_t numBlocks, 
					 caddr_t bufPtr,
					 void *bp, RF_DagHeader_t ** paramDAG,
					 RF_AccessStripeMapHeader_t ** paramASM,
					 RF_RaidAccessFlags_t flags, 
					 void (*cbF) (struct buf *), 
					 void *cbA,
					 RF_AccessState_t * states);
void    rf_FreeRaidAccDesc(RF_RaidAccessDesc_t * desc);
int     rf_DoAccess(RF_Raid_t * raidPtr, RF_IoType_t type, int async_flag,
		    RF_RaidAddr_t raidAddress, RF_SectorCount_t numBlocks, 
		    caddr_t bufPtr, void *bp_in, RF_DagHeader_t ** paramDAG,
		    RF_AccessStripeMapHeader_t ** paramASM, 
		    RF_RaidAccessFlags_t flags, 
		    RF_RaidAccessDesc_t ** paramDesc, 
		    void (*cbF) (struct buf *), void *cbA);
int     rf_SetReconfiguredMode(RF_Raid_t * raidPtr, RF_RowCol_t row,
			       RF_RowCol_t col);
int     rf_FailDisk(RF_Raid_t * raidPtr, RF_RowCol_t frow, RF_RowCol_t fcol,
		    int initRecon);
void    rf_SignalQuiescenceLock(RF_Raid_t * raidPtr, 
				RF_RaidReconDesc_t * reconDesc);
int     rf_SuspendNewRequestsAndWait(RF_Raid_t * raidPtr);
void    rf_ResumeNewRequests(RF_Raid_t * raidPtr);
void    rf_StartThroughputStats(RF_Raid_t * raidPtr);
void    rf_StartUserStats(RF_Raid_t * raidPtr);
void    rf_StopUserStats(RF_Raid_t * raidPtr);
void    rf_UpdateUserStats(RF_Raid_t * raidPtr, int rt, int numsect);
void    rf_PrintUserStats(RF_Raid_t * raidPtr);
#endif /* _KERNEL */
@


1.2.6.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d33 2
a34 2
#ifndef	_RF__RF_DRIVER_H_
#define	_RF__RF_DRIVER_H_
d39 1
a39 1
#if	defined(__NetBSD__)
d41 1
a41 1
#elif	defined(__OpenBSD__)
d45 40
a84 28
#if	_KERNEL
RF_DECLARE_EXTERN_MUTEX(rf_printf_mutex);
int  rf_BootRaidframe(void);
int  rf_UnbootRaidframe(void);
int  rf_Shutdown(RF_Raid_t *);
int  rf_Configure(RF_Raid_t *, RF_Config_t *, RF_AutoConfig_t *);
RF_RaidAccessDesc_t *rf_AllocRaidAccDesc(RF_Raid_t *, RF_IoType_t,
	RF_RaidAddr_t, RF_SectorCount_t, caddr_t, void *, RF_DagHeader_t **,
	RF_AccessStripeMapHeader_t **, RF_RaidAccessFlags_t,
	void (*) (struct buf *), void *, RF_AccessState_t *);
void rf_FreeRaidAccDesc(RF_RaidAccessDesc_t *);
int  rf_DoAccess(RF_Raid_t *, RF_IoType_t, int, RF_RaidAddr_t,
	RF_SectorCount_t, caddr_t, void *, RF_DagHeader_t **,
	RF_AccessStripeMapHeader_t **, RF_RaidAccessFlags_t,
	RF_RaidAccessDesc_t **, void (*) (struct buf *), void *);
int  rf_SetReconfiguredMode(RF_Raid_t *, RF_RowCol_t, RF_RowCol_t);
int  rf_FailDisk(RF_Raid_t *, RF_RowCol_t, RF_RowCol_t, int);
void rf_SignalQuiescenceLock(RF_Raid_t *, RF_RaidReconDesc_t *);
int  rf_SuspendNewRequestsAndWait(RF_Raid_t *);
void rf_ResumeNewRequests(RF_Raid_t *);
void rf_StartThroughputStats(RF_Raid_t *);
void rf_StartUserStats(RF_Raid_t *);
void rf_StopUserStats(RF_Raid_t *);
void rf_UpdateUserStats(RF_Raid_t *, int, int);
void rf_PrintUserStats(RF_Raid_t *);
#endif	/* _KERNEL */

#endif	/* !_RF__RF_DRIVER_H_ */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_driver.h,v 1.1 1998/11/13 04:20:29 oster Exp $	*/
/*	$NetBSD: rf_driver.h,v 1.1 1998/11/13 04:20:29 oster Exp $	*/
a31 54
/*
 * :  
 * Log: rf_driver.h,v 
 * Revision 1.11  1996/07/11 19:08:00  jimz
 * generalize reconstruction mechanism
 * allow raid1 reconstructs via copyback (done with array
 * quiesced, not online, therefore not disk-directed)
 *
 * Revision 1.10  1996/06/10  14:18:58  jimz
 * move user, throughput stats into per-array structure
 *
 * Revision 1.9  1996/06/07  21:33:04  jimz
 * begin using consistent types for sector numbers,
 * stripe numbers, row+col numbers, recon unit numbers
 *
 * Revision 1.8  1996/06/05  18:06:02  jimz
 * Major code cleanup. The Great Renaming is now done.
 * Better modularity. Better typing. Fixed a bunch of
 * synchronization bugs. Made a lot of global stuff
 * per-desc or per-array. Removed dead code.
 *
 * Revision 1.7  1996/05/30  11:29:41  jimz
 * Numerous bug fixes. Stripe lock release code disagreed with the taking code
 * about when stripes should be locked (I made it consistent: no parity, no lock)
 * There was a lot of extra serialization of I/Os which I've removed- a lot of
 * it was to calculate values for the cache code, which is no longer with us.
 * More types, function, macro cleanup. Added code to properly quiesce the array
 * on shutdown. Made a lot of stuff array-specific which was (bogusly) general
 * before. Fixed memory allocation, freeing bugs.
 *
 * Revision 1.6  1996/05/27  18:56:37  jimz
 * more code cleanup
 * better typing
 * compiles in all 3 environments
 *
 * Revision 1.5  1996/05/24  22:17:04  jimz
 * continue code + namespace cleanup
 * typed a bunch of flags
 *
 * Revision 1.4  1996/05/24  04:28:55  jimz
 * release cleanup ckpt
 *
 * Revision 1.3  1996/05/24  01:59:45  jimz
 * another checkpoint in code cleanup for release
 * time to sync kernel tree
 *
 * Revision 1.2  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.1  1996/05/18  19:56:10  jimz
 * Initial revision
 *
 */
d40 27
d68 1
a68 32
int rf_BootRaidframe(void);
int rf_UnbootRaidframe(void);
int rf_Shutdown(RF_Raid_t *raidPtr);
int rf_Configure(RF_Raid_t *raidPtr, RF_Config_t *cfgPtr);
RF_RaidAccessDesc_t *rf_AllocRaidAccDesc(RF_Raid_t *raidPtr, RF_IoType_t type,
	RF_RaidAddr_t raidAddress, RF_SectorCount_t numBlocks, caddr_t bufPtr,
	void *bp, RF_DagHeader_t **paramDAG, RF_AccessStripeMapHeader_t **paramASM,
	RF_RaidAccessFlags_t flags, void (*cbF)(struct buf *), void *cbA,
	RF_AccessState_t *states);
void rf_FreeRaidAccDesc(RF_RaidAccessDesc_t *desc);
int rf_DoAccess(RF_Raid_t *raidPtr, RF_IoType_t type, int async_flag,
	RF_RaidAddr_t raidAddress, RF_SectorCount_t numBlocks, caddr_t bufPtr,
	void *bp_in, RF_DagHeader_t **paramDAG,
	RF_AccessStripeMapHeader_t **paramASM, RF_RaidAccessFlags_t flags,
	RF_RaidAccessDesc_t **paramDesc, void (*cbF)(struct buf *), void *cbA);
int rf_SetReconfiguredMode(RF_Raid_t *raidPtr, RF_RowCol_t row,
	RF_RowCol_t col);
int rf_FailDisk(RF_Raid_t *raidPtr, RF_RowCol_t frow, RF_RowCol_t fcol,
	int initRecon);
#ifdef SIMULATE
void rf_ScheduleContinueReconstructFailedDisk(RF_RaidReconDesc_t *reconDesc);
#endif /* SIMULATE */
void rf_SignalQuiescenceLock(RF_Raid_t *raidPtr, RF_RaidReconDesc_t *reconDesc);
int  rf_SuspendNewRequestsAndWait(RF_Raid_t *raidPtr);
void rf_ResumeNewRequests(RF_Raid_t *raidPtr);
void rf_StartThroughputStats(RF_Raid_t *raidPtr);
void rf_StartUserStats(RF_Raid_t *raidPtr);
void rf_StopUserStats(RF_Raid_t *raidPtr);
void rf_UpdateUserStats(RF_Raid_t *raidPtr, int rt, int numsect);
void rf_PrintUserStats(RF_Raid_t *raidPtr);

#endif /* !_RF__RF_DRIVER_H_ */
@

