head	1.6;
access;
symbols
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.38
	OPENBSD_5_0:1.5.0.36
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.34
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.32
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.28
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.30
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.26
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.24
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.22
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.20
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.18
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.16
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.16
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.14
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.12
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.10
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.2
	SMP_BASE:1.4
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.5;

1.5
date	2002.12.16.07.01.03;	author tdeval;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.11.18.02.21;	author peter;	state Exp;
branches
	1.4.2.1
	1.4.12.1;
next	1.3;

1.3
date	2000.01.07.14.50.20;	author peter;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.02.33;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.29.12;	author niklas;	state Exp;
branches;
next	;

1.4.2.1
date	2003.03.28.00.38.27;	author niklas;	state Exp;
branches;
next	;

1.4.12.1
date	2003.05.19.22.21.51;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_debugMem.c,v 1.5 2002/12/16 07:01:03 tdeval Exp $	*/
/*	$NetBSD: rf_debugMem.c,v 1.7 2000/01/07 03:40:59 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Daniel Stodolsky, Mark Holland, Jim Zelenka
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*
 * debugMem.c:  Memory usage debugging stuff.
 *
 * Malloc, Calloc, and Free are #defined everywhere
 * to do_malloc, do_calloc, and do_free.
 *
 * If RF_UTILITY is nonzero, it means we are compiling one of the
 * RAIDframe utility programs, such as rfctrl or smd. In this
 * case, we eliminate all references to the threads package
 * and to the allocation list stuff.
 */

#include "rf_types.h"
#include "rf_threadstuff.h"
#include "rf_options.h"
#include "rf_debugMem.h"
#include "rf_general.h"

static long tot_mem_in_use = 0;

/* Hash table of information about memory allocations. */
#define	RF_MH_TABLESIZE		1000

struct mh_struct {
	void		*address;
	int		 size;
	int		 line;
	char		*filen;
	char		 allocated;
	struct mh_struct *next;
};

static struct mh_struct *mh_table[RF_MH_TABLESIZE];

RF_DECLARE_MUTEX(rf_debug_mem_mutex);
static int mh_table_initialized = 0;

void rf_memory_hash_insert(void *, int, int, char *);
int  rf_memory_hash_remove(void *, int);

void
rf_record_malloc(void *p, int size, int line, char *filen)
{
	RF_ASSERT(size != 0);

	/*RF_LOCK_MUTEX(rf_debug_mem_mutex);*/
	rf_memory_hash_insert(p, size, line, filen);
	tot_mem_in_use += size;
	/*RF_UNLOCK_MUTEX(rf_debug_mem_mutex);*/

	if ((long) p == rf_memDebugAddress) {
		printf("Allocate: debug address allocated from line %d file"
		    " %s\n", line, filen);
	}
}

void
rf_unrecord_malloc(void *p, int sz)
{
	int size;

	/*RF_LOCK_MUTEX(rf_debug_mem_mutex);*/
	size = rf_memory_hash_remove(p, sz);
	tot_mem_in_use -= size;
	/*RF_UNLOCK_MUTEX(rf_debug_mem_mutex);*/
	if ((long) p == rf_memDebugAddress) {
		/* This is really only a flag line for gdb. */
		printf("Free: Found debug address\n");
	}
}

void
rf_print_unfreed(void)
{
	int i, foundone = 0;
	struct mh_struct *p;

	for (i = 0; i < RF_MH_TABLESIZE; i++) {
		for (p = mh_table[i]; p; p = p->next)
			if (p->allocated) {
				if (!foundone)
					printf("\n\nThere are unfreed"
					    " memory locations at"
					    " program shutdown:\n");
				foundone = 1;
				printf("Addr 0x%lx Size %d line %d file %s\n",
				    (long) p->address, p->size, p->line,
				    p->filen);
			}
	}
	if (tot_mem_in_use) {
		printf("%ld total bytes in use\n", tot_mem_in_use);
	}
}

int
rf_ConfigureDebugMem(RF_ShutdownList_t **listp)
{
	int i, rc;

	rc = rf_create_managed_mutex(listp, &rf_debug_mem_mutex);
	if (rc) {
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d\n",
		    __FILE__, __LINE__, rc);
		return (rc);
	}
	if (rf_memDebug) {
		for (i = 0; i < RF_MH_TABLESIZE; i++)
			mh_table[i] = NULL;
		mh_table_initialized = 1;
	}
	return (0);
}

#define	HASHADDR(_a_)	( (((unsigned long) _a_)>>3) % RF_MH_TABLESIZE )

void
rf_memory_hash_insert(void *addr, int size, int line, char *filen)
{
	unsigned long bucket = HASHADDR(addr);
	struct mh_struct *p;

	RF_ASSERT(mh_table_initialized);

	/* Search for this address in the hash table. */
	for (p = mh_table[bucket]; p && (p->address != addr); p = p->next);
	if (!p) {
		RF_Malloc(p, sizeof(struct mh_struct), (struct mh_struct *));
		RF_ASSERT(p);
		p->next = mh_table[bucket];
		mh_table[bucket] = p;
		p->address = addr;
		p->allocated = 0;
	}
	if (p->allocated) {
		printf("ERROR:  Reallocated address 0x%lx from line %d,"
		    " file %s without intervening free\n", (long) addr,
		    line, filen);
		printf("        Last allocated from line %d file %s\n",
		    p->line, p->filen);
		RF_ASSERT(0);
	}
	p->size = size;
	p->line = line;
	p->filen = filen;
	p->allocated = 1;
}

int
rf_memory_hash_remove(void *addr, int sz)
{
	unsigned long bucket = HASHADDR(addr);
	struct mh_struct *p;

	RF_ASSERT(mh_table_initialized);
	for (p = mh_table[bucket]; p && (p->address != addr); p = p->next);
	if (!p) {
		printf("ERROR:  Freeing never-allocated address 0x%lx\n",
		    (long) addr);
		RF_PANIC();
	}
	if (!p->allocated) {
		printf("ERROR:  Freeing unallocated address 0x%lx."
		    "  Last allocation line %d file %s\n", (long) addr,
		    p->line, p->filen);
		RF_PANIC();
	}
	if (sz > 0 && p->size != sz) {
		/*
		 * This error can be suppressed by using a negative value
		 * as the size to free.
		 */
		printf("ERROR:  Incorrect size at free for address 0x%lx:"
		    " is %d should be %d.  Alloc at line %d of file %s\n",
		    (unsigned long) addr, sz, p->size, p->line, p->filen);
		RF_PANIC();
	}
	p->allocated = 0;
	return (p->size);
}
@


1.5
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_debugMem.c,v 1.4 2000/01/11 18:02:21 peter Exp $	*/
@


1.4
log
@sync with NetBSD

- removed threadid stuff
- removed unused files
- general tidyup
- you can no longer configure the same unit twice (without
de-configuring first of course).

Again, this has only been tested locally on IDE disks. Further testing
and feedback would be appreciated.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_debugMem.c,v 1.3 2000/01/07 14:50:20 peter Exp $	*/
d3 1
d31 3
a33 1
/* debugMem.c:  memory usage debugging stuff.
d37 2
a38 2
 * if RF_UTILITY is nonzero, it means were compiling one of the
 * raidframe utility programs, such as rfctrl or smd.  In this
a43 1

d51 2
a52 2
/* Hash table of information about memory allocations */
#define RF_MH_TABLESIZE 1000
d55 5
a59 5
	void   *address;
	int     size;
	int     line;
	char   *filen;
	char    allocated;
d62 1
a63 2
RF_DECLARE_MUTEX(rf_debug_mem_mutex)
	static int mh_table_initialized = 0;
d65 5
a69 2
	static void memory_hash_insert(void *addr, int size, int line, char *filen);
	static int memory_hash_remove(void *addr, int sz);
d71 2
a72 5
void 
rf_record_malloc(p, size, line, filen)
	void   *p;
	int     size, line;
	char   *filen;
d76 2
a77 2
	/* RF_LOCK_MUTEX(rf_debug_mem_mutex); */
	memory_hash_insert(p, size, line, filen);
d79 2
a80 1
	/* RF_UNLOCK_MUTEX(rf_debug_mem_mutex); */
d82 2
a83 1
		printf("Allocate: debug address allocated from line %d file %s\n", line, filen);
d87 2
a88 4
void 
rf_unrecord_malloc(p, sz)
	void   *p;
	int     sz;
d90 1
a90 1
	int     size;
d92 2
a93 2
	/* RF_LOCK_MUTEX(rf_debug_mem_mutex); */
	size = memory_hash_remove(p, sz);
d95 1
a95 1
	/* RF_UNLOCK_MUTEX(rf_debug_mem_mutex); */
d97 2
a98 2
		printf("Free: Found debug address\n");	/* this is really only a
							 * flag line for gdb */
d102 2
a103 2
void 
rf_print_unfreed()
d105 1
a105 1
	int     i, foundone = 0;
d112 3
a114 1
					printf("\n\nThere are unfreed memory locations at program shutdown:\n");
d117 2
a118 1
				    (long) p->address, p->size, p->line, p->filen);
d126 2
a127 3
int 
rf_ConfigureDebugMem(listp)
	RF_ShutdownList_t **listp;
d129 1
a129 1
	int     i, rc;
d133 2
a134 2
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d\n", __FILE__,
		    __LINE__, rc);
a143 1
#define HASHADDR(_a_)      ( (((unsigned long) _a_)>>3) % RF_MH_TABLESIZE )
d145 4
a148 5
static void 
memory_hash_insert(addr, size, line, filen)
	void   *addr;
	int     size, line;
	char   *filen;
d155 1
a155 1
	/* search for this address in the hash table */
d166 5
a170 2
		printf("ERROR:  reallocated address 0x%lx from line %d, file %s without intervening free\n", (long) addr, line, filen);
		printf("        last allocated from line %d file %s\n", p->line, p->filen);
d179 2
a180 4
static int 
memory_hash_remove(addr, sz)
	void   *addr;
	int     sz;
d188 2
a189 1
		printf("ERROR:  freeing never-allocated address 0x%lx\n", (long) addr);
d193 3
a195 1
		printf("ERROR:  freeing unallocated address 0x%lx.  Last allocation line %d file %s\n", (long) addr, p->line, p->filen);
d198 8
a205 4
	if (sz > 0 && p->size != sz) {	/* you can suppress this error by
					 * using a negative value as the size
					 * to free */
		printf("ERROR:  incorrect size at free for address 0x%lx: is %d should be %d.  Alloc at line %d of file %s\n", (unsigned long) addr, sz, p->size, p->line, p->filen);
@


1.4.12.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 3
/*
 * debugMem.c:  Memory usage debugging stuff.
 *
d34 2
a35 2
 * If RF_UTILITY is nonzero, it means we are compiling one of the
 * RAIDframe utility programs, such as rfctrl or smd. In this
d41 1
d49 2
a50 2
/* Hash table of information about memory allocations. */
#define	RF_MH_TABLESIZE		1000
d53 5
a57 5
	void		*address;
	int		 size;
	int		 line;
	char		*filen;
	char		 allocated;
a59 1

d61 2
d64 2
a65 5
RF_DECLARE_MUTEX(rf_debug_mem_mutex);
static int mh_table_initialized = 0;

void rf_memory_hash_insert(void *, int, int, char *);
int  rf_memory_hash_remove(void *, int);
d67 5
a71 2
void
rf_record_malloc(void *p, int size, int line, char *filen)
d75 2
a76 2
	/*RF_LOCK_MUTEX(rf_debug_mem_mutex);*/
	rf_memory_hash_insert(p, size, line, filen);
d78 1
a78 2
	/*RF_UNLOCK_MUTEX(rf_debug_mem_mutex);*/

d80 1
a80 2
		printf("Allocate: debug address allocated from line %d file"
		    " %s\n", line, filen);
d84 4
a87 2
void
rf_unrecord_malloc(void *p, int sz)
d89 1
a89 1
	int size;
d91 2
a92 2
	/*RF_LOCK_MUTEX(rf_debug_mem_mutex);*/
	size = rf_memory_hash_remove(p, sz);
d94 1
a94 1
	/*RF_UNLOCK_MUTEX(rf_debug_mem_mutex);*/
d96 2
a97 2
		/* This is really only a flag line for gdb. */
		printf("Free: Found debug address\n");
d101 2
a102 2
void
rf_print_unfreed(void)
d104 1
a104 1
	int i, foundone = 0;
d111 1
a111 3
					printf("\n\nThere are unfreed"
					    " memory locations at"
					    " program shutdown:\n");
d114 1
a114 2
				    (long) p->address, p->size, p->line,
				    p->filen);
d122 3
a124 2
int
rf_ConfigureDebugMem(RF_ShutdownList_t **listp)
d126 1
a126 1
	int i, rc;
d130 2
a131 2
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d\n",
		    __FILE__, __LINE__, rc);
d141 1
d143 5
a147 4
#define	HASHADDR(_a_)	( (((unsigned long) _a_)>>3) % RF_MH_TABLESIZE )

void
rf_memory_hash_insert(void *addr, int size, int line, char *filen)
d154 1
a154 1
	/* Search for this address in the hash table. */
d165 2
a166 5
		printf("ERROR:  Reallocated address 0x%lx from line %d,"
		    " file %s without intervening free\n", (long) addr,
		    line, filen);
		printf("        Last allocated from line %d file %s\n",
		    p->line, p->filen);
d175 4
a178 2
int
rf_memory_hash_remove(void *addr, int sz)
d186 1
a186 2
		printf("ERROR:  Freeing never-allocated address 0x%lx\n",
		    (long) addr);
d190 1
a190 3
		printf("ERROR:  Freeing unallocated address 0x%lx."
		    "  Last allocation line %d file %s\n", (long) addr,
		    p->line, p->filen);
d193 4
a196 8
	if (sz > 0 && p->size != sz) {
		/*
		 * This error can be suppressed by using a negative value
		 * as the size to free.
		 */
		printf("ERROR:  Incorrect size at free for address 0x%lx:"
		    " is %d should be %d.  Alloc at line %d of file %s\n",
		    (unsigned long) addr, sz, p->size, p->line, p->filen);
@


1.4.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 3
/*
 * debugMem.c:  Memory usage debugging stuff.
 *
d34 2
a35 2
 * If RF_UTILITY is nonzero, it means we are compiling one of the
 * RAIDframe utility programs, such as rfctrl or smd. In this
d41 1
d49 2
a50 2
/* Hash table of information about memory allocations. */
#define	RF_MH_TABLESIZE		1000
d53 5
a57 5
	void		*address;
	int		 size;
	int		 line;
	char		*filen;
	char		 allocated;
a59 1

d61 2
d64 2
a65 5
RF_DECLARE_MUTEX(rf_debug_mem_mutex);
static int mh_table_initialized = 0;

void rf_memory_hash_insert(void *, int, int, char *);
int  rf_memory_hash_remove(void *, int);
d67 5
a71 2
void
rf_record_malloc(void *p, int size, int line, char *filen)
d75 2
a76 2
	/*RF_LOCK_MUTEX(rf_debug_mem_mutex);*/
	rf_memory_hash_insert(p, size, line, filen);
d78 1
a78 2
	/*RF_UNLOCK_MUTEX(rf_debug_mem_mutex);*/

d80 1
a80 2
		printf("Allocate: debug address allocated from line %d file"
		    " %s\n", line, filen);
d84 4
a87 2
void
rf_unrecord_malloc(void *p, int sz)
d89 1
a89 1
	int size;
d91 2
a92 2
	/*RF_LOCK_MUTEX(rf_debug_mem_mutex);*/
	size = rf_memory_hash_remove(p, sz);
d94 1
a94 1
	/*RF_UNLOCK_MUTEX(rf_debug_mem_mutex);*/
d96 2
a97 2
		/* This is really only a flag line for gdb. */
		printf("Free: Found debug address\n");
d101 2
a102 2
void
rf_print_unfreed(void)
d104 1
a104 1
	int i, foundone = 0;
d111 1
a111 3
					printf("\n\nThere are unfreed"
					    " memory locations at"
					    " program shutdown:\n");
d114 1
a114 2
				    (long) p->address, p->size, p->line,
				    p->filen);
d122 3
a124 2
int
rf_ConfigureDebugMem(RF_ShutdownList_t **listp)
d126 1
a126 1
	int i, rc;
d130 2
a131 2
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d\n",
		    __FILE__, __LINE__, rc);
d141 1
d143 5
a147 4
#define	HASHADDR(_a_)	( (((unsigned long) _a_)>>3) % RF_MH_TABLESIZE )

void
rf_memory_hash_insert(void *addr, int size, int line, char *filen)
d154 1
a154 1
	/* Search for this address in the hash table. */
d165 2
a166 5
		printf("ERROR:  Reallocated address 0x%lx from line %d,"
		    " file %s without intervening free\n", (long) addr,
		    line, filen);
		printf("        Last allocated from line %d file %s\n",
		    p->line, p->filen);
d175 4
a178 2
int
rf_memory_hash_remove(void *addr, int sz)
d186 1
a186 2
		printf("ERROR:  Freeing never-allocated address 0x%lx\n",
		    (long) addr);
d190 1
a190 3
		printf("ERROR:  Freeing unallocated address 0x%lx."
		    "  Last allocation line %d file %s\n", (long) addr,
		    p->line, p->filen);
d193 4
a196 8
	if (sz > 0 && p->size != sz) {
		/*
		 * This error can be suppressed by using a negative value
		 * as the size to free.
		 */
		printf("ERROR:  Incorrect size at free for address 0x%lx:"
		    " is %d should be %d.  Alloc at line %d of file %s\n",
		    (unsigned long) addr, sz, p->size, p->line, p->filen);
@


1.3
log
@sync with work by Greg Oster on NetBSD

Please note: This update has *only* been tested on i386 with IDE
disks. Could someone with a spare box please make sure all is OK with
SCSI and maybe other arches ? sparc testing will follow locally.

* remove rf_sys.h
* many changes to make it more stable
* some performance increases
* All raid threads now get their own kernel process and the calling
  raidctl(8) program will show status progress through a meter.
* In theory FFS_SOFTUPDATES and RAIDframe will now work together - NOT
  TESTED YET

See http://www.cs.usask.ca/staff/oster/raid.html

This updates include Greg's changes to Jan 4th 2000.

TODO:
* some odd behaviour when running raictl -c on an already config'ed
  raid set - problem founf, fix being done
* progress meter is in raidctl(8) - seperate commit, but could do with
  sync'ing with OpenBSD ftp version
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_debugMem.c,v 1.2 1999/02/16 00:02:33 niklas Exp $	*/
/*	$NetBSD: rf_debugMem.c,v 1.6 1999/09/04 21:11:21 oster Exp $	*/
a42 1
#include "rf_threadid.h"
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_debugMem.c,v 1.1 1999/01/11 14:29:12 niklas Exp $	*/
/*	$NetBSD: rf_debugMem.c,v 1.3 1999/02/05 00:06:08 oster Exp $	*/
a40 1
#include "rf_sys.h"
a41 1
#if RF_UTILITY == 0
a44 4
#else				/* RF_UTILITY == 0 */
#include "rf_utility.h"
#endif				/* RF_UTILITY == 0 */

d48 1
a48 1
static long tot_mem_in_use = 0, max_mem = 0;
a67 269
#ifndef _KERNEL			/* no redzones or "real_" routines in the
				 * kernel */

	static void rf_redzone_free_failed(void *ptr, int size, int line, char *file);

	void   *rf_real_redzone_malloc(_size_)
	int     _size_;
{
	char   *p;

	rf_validate_mh_table();
	p = malloc((_size_) + 16);
	if (p == NULL)
		return (p);
	RF_ASSERT(p);
	*((long *) p) = (_size_);
	((char *) p)[(_size_) + 8] = '!';
	((char *) p)[(_size_) + 15] = '!';
	p += 8;
	return (p);
}

void   *
rf_real_redzone_calloc(_n_, _size_)
	int     _n_, _size_;
{
	char   *p;
	int     _sz_;

	rf_validate_mh_table();
	_sz_ = (_n_) * (_size_);
	p = malloc((_sz_) + 16);
	if (p == NULL)
		return (p);
	bzero(p, (_sz_) + 16);
	*((long *) p) = (_sz_);
	((char *) p)[(_sz_) + 8] = '!';
	((char *) p)[(_sz_) + 15] = '!';
	p += 8;
	return (p);
}

void 
rf_real_redzone_free(p, line, filen)
	char   *p;
	int     line;
	char   *filen;
{
	unsigned long _size_;

	rf_validate_mh_table();
	p -= 8;
	_size_ = *((long *) p);
	if ((((char *) p)[(_size_) + 8] != '!') || (((char *) p)[(_size_) + 15] != '!'))
		rf_redzone_free_failed(p, (_size_), line, filen);
	free(p);
}

unsigned long rf_mem_alloc = 0;

char   *
rf_real_Malloc(size, line, file)
	int     size;
	int     line;
	char   *file;
{
	void   *pp;
	char   *p;
	int     tid;

	RF_LOCK_MUTEX(rf_debug_mem_mutex);
	rf_redzone_malloc(pp, size);
	p = pp;
	if (p == NULL) {
		RF_ERRORMSG3("Unable to malloc %d bytes at line %d file %s\n", size,
		    line, file);
	}
	if (rf_memAmtDebug) {
		rf_mem_alloc += size;
		printf("%lu    size %d %s:%d\n", rf_mem_alloc, size, file, line);
	}
#if RF_UTILITY == 0
	if (rf_memDebug > 1) {
		rf_get_threadid(tid);
		printf("[%d] malloc 0x%lx - 0x%lx (%d) %s %d\n", tid, p, p + size, size,
		    file, line);
	}
#endif				/* RF_UTILITY == 0 */
	if (rf_memDebug)
		rf_record_malloc(p, size, line, file);
	RF_UNLOCK_MUTEX(rf_debug_mem_mutex);
	return (p);
}
#if RF_UTILITY == 0
char   *
rf_real_MallocAndAdd(size, alist, line, file)
	int     size;
	RF_AllocListElem_t *alist;
	int     line;
	char   *file;
{
	void   *pp;
	char   *p;
	int     tid;

	RF_LOCK_MUTEX(rf_debug_mem_mutex);
	rf_redzone_malloc(pp, size);
	p = pp;
	if (p == NULL) {
		RF_ERRORMSG3("Unable to malloc %d bytes at line %d file %s\n", size,
		    line, file);
	}
	if (rf_memAmtDebug) {
		rf_mem_alloc += size;
		printf("%lu    size %d %s:%d\n", rf_mem_alloc, size, file, line);
	}
	if (rf_memDebug > 1) {
		rf_get_threadid(tid);
		printf("[%d] malloc+add 0x%lx - 0x%lx (%d) %s %d\n", tid, p, p + size,
		    size, file, line);
	}
	if (alist) {
		rf_real_AddToAllocList(alist, pp, size, 0);
	}
	if (rf_memDebug)
		rf_record_malloc(p, size, line, file);
	RF_UNLOCK_MUTEX(rf_debug_mem_mutex);
	return (p);
}
#endif				/* RF_UTILITY == 0 */

char   *
rf_real_Calloc(nel, elsz, line, file)
	int     nel;
	int     elsz;
	int     line;
	char   *file;
{
	int     tid, size;
	void   *pp;
	char   *p;

	size = nel * elsz;
	RF_LOCK_MUTEX(rf_debug_mem_mutex);
	rf_redzone_calloc(pp, nel, elsz);
	p = pp;
	if (p == NULL) {
		RF_ERRORMSG4("Unable to calloc %d objects of size %d at line %d file %s\n",
		    nel, elsz, line, file);
		return (NULL);
	}
	if (rf_memAmtDebug) {
		rf_mem_alloc += size;
		printf("%lu    size %d %s:%d\n", rf_mem_alloc, size, file, line);
	}
#if RF_UTILITY == 0
	if (rf_memDebug > 1) {
		rf_get_threadid(tid);
		printf("[%d] calloc 0x%lx - 0x%lx (%d,%d) %s %d\n", tid, p, p + size, nel,
		    elsz, file, line);
	}
#endif				/* RF_UTILITY == 0 */
	if (rf_memDebug) {
		rf_record_malloc(p, size, line, file);
	}
	RF_UNLOCK_MUTEX(rf_debug_mem_mutex);
	return (p);
}
#if RF_UTILITY == 0
char   *
rf_real_CallocAndAdd(nel, elsz, alist, line, file)
	int     nel;
	int     elsz;
	RF_AllocListElem_t *alist;
	int     line;
	char   *file;
{
	int     tid, size;
	void   *pp;
	char   *p;

	size = nel * elsz;
	RF_LOCK_MUTEX(rf_debug_mem_mutex);
	rf_redzone_calloc(pp, nel, elsz);
	p = pp;
	if (p == NULL) {
		RF_ERRORMSG4("Unable to calloc %d objs of size %d at line %d file %s\n",
		    nel, elsz, line, file);
		return (NULL);
	}
	if (rf_memAmtDebug) {
		rf_mem_alloc += size;
		printf("%lu    size %d %s:%d\n", rf_mem_alloc, size, file, line);
	}
	if (rf_memDebug > 1) {
		rf_get_threadid(tid);
		printf("[%d] calloc+add 0x%lx - 0x%lx (%d,%d) %s %d\n", tid, p,
		    p + size, nel, elsz, file, line);
	}
	if (alist) {
		rf_real_AddToAllocList(alist, pp, size, 0);
	}
	if (rf_memDebug)
		rf_record_malloc(p, size, line, file);
	RF_UNLOCK_MUTEX(rf_debug_mem_mutex);
	return (p);
}
#endif				/* RF_UTILITY == 0 */

void 
rf_real_Free(p, sz, line, file)
	void   *p;
	int     sz;
	int     line;
	char   *file;
{
	int     tid;

#if RF_UTILITY == 0
	if (rf_memDebug > 1) {
		rf_get_threadid(tid);
		printf("[%d] free 0x%lx - 0x%lx (%d) %s %d\n", tid, p, ((char *) p) + sz, sz,
		    file, line);
	}
#endif				/* RF_UTILITY == 0 */
	RF_LOCK_MUTEX(rf_debug_mem_mutex);
	if (rf_memAmtDebug) {
		rf_mem_alloc -= sz;
		printf("%lu  - size %d %s:%d\n", rf_mem_alloc, sz, file, line);
	}
	if (rf_memDebug) {
		rf_unrecord_malloc(p, sz);
	}
	rf_redzone_free(p);
	RF_UNLOCK_MUTEX(rf_debug_mem_mutex);
}

void 
rf_validate_mh_table()
{
	int     i, size;
	struct mh_struct *p;
	char   *cp;

	return;
	for (i = 0; i < RF_MH_TABLESIZE; i++) {
		for (p = mh_table[i]; p; p = p->next)
			if (p->allocated) {
				cp = ((char *) p->address) - 8;
				size = *((long *) cp);
				if ((((char *) cp)[(size) + 8] != '!') || (((char *) cp)[(size) + 15] != '!')) {
					rf_redzone_free_failed(cp, (size), __LINE__, __FILE__);
				}
			}
	}
}

static void 
rf_redzone_free_failed(ptr, size, line, file)
	void   *ptr;
	int     size;
	int     line;
	char   *file;
{
	RF_ERRORMSG4("Free of 0x%lx (recorded size %d) at %d of %s detected redzone overrun\n", ptr, size, line, file);
	RF_ASSERT(0);
}
#endif				/* !_KERNEL */

a201 6
}

void 
rf_ReportMaxMem()
{
	printf("Max memory used:  %d bytes\n", (int) max_mem);
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_debugMem.c,v 1.1 1998/11/13 04:20:28 oster Exp $	*/
/*	$NetBSD: rf_debugMem.c,v 1.1 1998/11/13 04:20:28 oster Exp $	*/
d31 1
a31 1
 * Malloc, Calloc, and Free are #defined everywhere 
a39 103
/* :  
 * Log: rf_debugMem.c,v 
 * Revision 1.38  1996/08/20 14:45:43  jimz
 * add debugging to track memory allocated (amount only, w/out
 * excessive sanity checking)
 *
 * Revision 1.37  1996/07/27  23:36:08  jimz
 * Solaris port of simulator
 *
 * Revision 1.36  1996/07/18  22:57:14  jimz
 * port simulator to AIX
 *
 * Revision 1.35  1996/06/13  08:55:38  jimz
 * make error messages refer to file, line of original
 * allocation
 *
 * Revision 1.34  1996/06/10  11:55:47  jimz
 * Straightened out some per-array/not-per-array distinctions, fixed
 * a couple bugs related to confusion. Added shutdown lists. Removed
 * layout shutdown function (now subsumed by shutdown lists).
 *
 * Revision 1.33  1996/06/09  02:36:46  jimz
 * lots of little crufty cleanup- fixup whitespace
 * issues, comment #ifdefs, improve typing in some
 * places (esp size-related)
 *
 * Revision 1.32  1996/06/05  18:06:02  jimz
 * Major code cleanup. The Great Renaming is now done.
 * Better modularity. Better typing. Fixed a bunch of
 * synchronization bugs. Made a lot of global stuff
 * per-desc or per-array. Removed dead code.
 *
 * Revision 1.31  1996/05/30  23:22:16  jimz
 * bugfixes of serialization, timing problems
 * more cleanup
 *
 * Revision 1.30  1996/05/30  11:29:41  jimz
 * Numerous bug fixes. Stripe lock release code disagreed with the taking code
 * about when stripes should be locked (I made it consistent: no parity, no lock)
 * There was a lot of extra serialization of I/Os which I've removed- a lot of
 * it was to calculate values for the cache code, which is no longer with us.
 * More types, function, macro cleanup. Added code to properly quiesce the array
 * on shutdown. Made a lot of stuff array-specific which was (bogusly) general
 * before. Fixed memory allocation, freeing bugs.
 *
 * Revision 1.29  1996/05/27  18:56:37  jimz
 * more code cleanup
 * better typing
 * compiles in all 3 environments
 *
 * Revision 1.28  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.27  1996/05/23  00:33:23  jimz
 * code cleanup: move all debug decls to rf_options.c, all extern
 * debug decls to rf_options.h, all debug vars preceded by rf_
 *
 * Revision 1.26  1996/05/21  18:53:46  jimz
 * return NULL for failed allocations, not panic
 *
 * Revision 1.25  1996/05/20  16:14:19  jimz
 * switch to rf_{mutex,cond}_{init,destroy}
 *
 * Revision 1.24  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.23  1996/05/17  12:42:35  jimz
 * wrap get_threadid stuff in #ifndef UTILITY for utils which use
 * redzone allocation stuff
 *
 * Revision 1.22  1996/05/16  23:06:09  jimz
 * don't warn about NULL alists
 *
 * Revision 1.21  1996/05/16  22:25:02  jimz
 * show allocations for [MC]allocAndAdd
 *
 * Revision 1.20  1996/05/15  18:30:22  jimz
 * print memory allocation as well as frees if memDebug > 1
 *
 * Revision 1.19  1996/05/07  17:41:17  jimz
 * add "level 2" for memDebug, which will print freed address ranges
 *
 * Revision 1.18  1996/05/02  20:41:53  jimz
 * really fix malloc problem out-of-kernel in memory_hash_insert()
 *
 * Revision 1.17  1996/05/02  20:04:29  jimz
 * fixed malloc deadlock previous change introduced
 *
 * Revision 1.16  1996/05/01  16:27:26  jimz
 * get rid of ALLOCMH
 * stop using ccmn_ memory management
 *
 * Revision 1.15  1995/12/12  18:10:06  jimz
 * MIN -> RF_MIN, MAX -> RF_MAX, ASSERT -> RF_ASSERT
 * fix 80-column brain damage in comments
 *
 * Revision 1.14  1995/12/01  15:56:17  root
 * added copyright info
 *
 */

d47 1
a47 1
#else /* RF_UTILITY == 0 */
d49 1
a49 1
#endif /* RF_UTILITY == 0 */
a50 4
#ifndef KERNEL
#include <stdio.h>
#include <assert.h>
#endif /* !KERNEL */
d60 6
a65 6
    void              *address;
    int                size;
    int                line;
    char              *filen;
    char               allocated;
    struct mh_struct  *next;
d69 1
a69 1
static int mh_table_initialized=0;
d71 2
a72 2
static void memory_hash_insert(void *addr, int size, int line, char *filen);
static int memory_hash_remove(void *addr, int sz);
d74 2
a75 1
#ifndef KERNEL                    /* no redzones or "real_" routines in the kernel */
d77 53
a129 51
static void rf_redzone_free_failed(void *ptr, int size, int line, char *file);

void *rf_real_redzone_malloc(_size_)
  int  _size_;
{
  char *p;

  rf_validate_mh_table();
  p = malloc((_size_)+16);
  if (p == NULL)
    return(p);
  RF_ASSERT (p);
  *((long *) p) = (_size_) ;
  ((char *) p)[(_size_)+8] = '!';
  ((char *) p)[(_size_)+15] = '!';
  p += 8;
  return(p);
}

void *rf_real_redzone_calloc(_n_,_size_)
int _n_,_size_;
{
  char *p;
  int _sz_;
  
  rf_validate_mh_table();
  _sz_  = (_n_) * (_size_);
  p = malloc((_sz_)+16);
  if (p == NULL)
    return(p);
  bzero(p,(_sz_)+16);
  *((long *) p) = (_sz_) ;
  ((char *) p)[(_sz_)+8] = '!';
  ((char *) p)[(_sz_)+15] = '!';
  p += 8;
  return(p);
}

void rf_real_redzone_free(p, line, filen)
char *p;
int line;
char *filen;
{
  unsigned long _size_;
  
  rf_validate_mh_table();
  p -= 8;
  _size_ = *((long *) p);
  if  ((((char *) p)[(_size_)+8] != '!') || (((char *) p)[(_size_)+15] != '!'))
    rf_redzone_free_failed(p,(_size_),line,filen);
  free(p);
d134 21
a154 20
char *rf_real_Malloc(size, line, file)
  int    size;
  int    line;
  char  *file;
{
  void *pp;
  char *p;
  int tid;

  RF_LOCK_MUTEX(rf_debug_mem_mutex);
  rf_redzone_malloc(pp, size);
  p = pp;
  if (p == NULL) {
    RF_ERRORMSG3("Unable to malloc %d bytes at line %d file %s\n", size,
      line, file);
  }
  if (rf_memAmtDebug) {
    rf_mem_alloc += size;
    printf("%lu    size %d %s:%d\n", rf_mem_alloc, size, file, line);
  }
d156 10
a165 10
  if (rf_memDebug > 1) {
    rf_get_threadid(tid);
    printf("[%d] malloc 0x%lx - 0x%lx (%d) %s %d\n", tid, p, p+size, size,
        file, line);
  }
#endif /* RF_UTILITY == 0 */
  if (rf_memDebug)
    rf_record_malloc(p, size, line, file);
  RF_UNLOCK_MUTEX(rf_debug_mem_mutex);
  return(p);
a166 1

d168 10
a177 9
char *rf_real_MallocAndAdd(size, alist, line, file)
  int                  size;
  RF_AllocListElem_t  *alist;
  int                  line;
  char                *file;
{
	void *pp;
	char *p;
	int tid;
d184 1
a184 1
			line, file);
d192 2
a193 2
		printf("[%d] malloc+add 0x%lx - 0x%lx (%d) %s %d\n", tid, p, p+size,
			size, file, line);
d201 1
a201 1
	return(p);
d203 12
a214 1
#endif /* RF_UTILITY == 0 */
d216 13
a228 23
char *rf_real_Calloc(nel, elsz, line, file)
  int    nel;
  int    elsz;
  int    line;
  char  *file;
{
  int tid, size;
  void *pp;
  char *p;
  
  size = nel * elsz;
  RF_LOCK_MUTEX(rf_debug_mem_mutex);
  rf_redzone_calloc(pp, nel, elsz);
  p = pp;
  if (p == NULL) {
    RF_ERRORMSG4("Unable to calloc %d objects of size %d at line %d file %s\n",
      nel, elsz, line, file);
    return(NULL);
  }
  if (rf_memAmtDebug) {
    rf_mem_alloc += size;
    printf("%lu    size %d %s:%d\n", rf_mem_alloc, size, file, line);
  }
d230 11
a240 11
  if (rf_memDebug > 1) {
    rf_get_threadid(tid);
    printf("[%d] calloc 0x%lx - 0x%lx (%d,%d) %s %d\n", tid, p, p+size, nel,
        elsz, file, line);
  }
#endif /* RF_UTILITY == 0 */
  if (rf_memDebug) {
    rf_record_malloc(p, size, line, file);
  }
  RF_UNLOCK_MUTEX(rf_debug_mem_mutex);
  return(p);
a241 1

d243 11
a253 10
char *rf_real_CallocAndAdd(nel, elsz, alist, line, file)
  int                  nel;
  int                  elsz;
  RF_AllocListElem_t  *alist;
  int                  line;
  char                *file;
{
	int tid, size;
	void *pp;
	char *p;
d261 2
a262 2
			nel, elsz, line, file);
		return(NULL);
d271 1
a271 1
			p+size, nel, elsz, file, line);
d279 1
a279 1
	return(p);
d281 1
a281 1
#endif /* RF_UTILITY == 0 */
d283 6
a288 5
void rf_real_Free(p, sz, line, file)
  void  *p;
  int    sz;
  int    line;
  char  *file;
d290 1
a290 1
  int tid;
d293 16
a308 114
  if (rf_memDebug > 1) {
    rf_get_threadid(tid);
    printf("[%d] free 0x%lx - 0x%lx (%d) %s %d\n", tid, p, ((char *)p)+sz, sz,
      file, line);
  }
#endif /* RF_UTILITY == 0 */
  RF_LOCK_MUTEX(rf_debug_mem_mutex);
  if (rf_memAmtDebug) {
    rf_mem_alloc -= sz;
    printf("%lu  - size %d %s:%d\n", rf_mem_alloc, sz, file, line);
  }
  if (rf_memDebug) {
    rf_unrecord_malloc(p,sz);
  }
  rf_redzone_free(p);
  RF_UNLOCK_MUTEX(rf_debug_mem_mutex);
}

void rf_validate_mh_table()
{
  int i, size;
  struct mh_struct *p;
  char *cp;

  return;
  for (i=0; i<RF_MH_TABLESIZE; i++) {
    for (p=mh_table[i]; p; p=p->next) if (p->allocated) {
      cp = ((char *) p->address) - 8;
      size = *((long *) cp);
      if  ((((char *) cp)[(size)+8] != '!') || (((char *) cp)[(size)+15] != '!')) {
	rf_redzone_free_failed(cp,(size),__LINE__,__FILE__);
      }
    }
  }
}

static void rf_redzone_free_failed(ptr,size,line,file)
  void  *ptr;
  int    size;
  int    line;
  char  *file;
{
  RF_ERRORMSG4("Free of 0x%lx (recorded size %d) at %d of %s detected redzone overrun\n",ptr,size,line,file);
  RF_ASSERT(0);
}

#endif /* !KERNEL */

void rf_record_malloc(p, size, line, filen)
void *p;
int size, line;
char *filen;
{
  RF_ASSERT(size != 0);
  
  /*RF_LOCK_MUTEX(rf_debug_mem_mutex);*/
  memory_hash_insert(p, size, line, filen);
  tot_mem_in_use += size;
  /*RF_UNLOCK_MUTEX(rf_debug_mem_mutex);*/
  if ( (long) p == rf_memDebugAddress) {
    printf("Allocate: debug address allocated from line %d file %s\n",line,filen); 
  }
}

void rf_unrecord_malloc(p, sz)
void *p;
int sz;
{
  int size;
  
  /*RF_LOCK_MUTEX(rf_debug_mem_mutex);*/
  size = memory_hash_remove(p, sz);
  tot_mem_in_use -= size;
  /*RF_UNLOCK_MUTEX(rf_debug_mem_mutex);*/
  if ( (long) p == rf_memDebugAddress) {
    printf("Free: Found debug address\n");         /* this is really only a flag line for gdb */
  }
}

void rf_print_unfreed()
{
  int i, foundone=0;
  struct mh_struct *p;

  for (i=0; i<RF_MH_TABLESIZE; i++) {
    for (p=mh_table[i]; p; p=p->next) if (p->allocated) {
      if (!foundone) printf("\n\nThere are unfreed memory locations at program shutdown:\n");
      foundone = 1;
      printf("Addr 0x%lx Size %d line %d file %s\n",
	     (long)p->address,p->size,p->line,p->filen);
    }
  }
  if (tot_mem_in_use) {
    printf("%ld total bytes in use\n", tot_mem_in_use);
  }
}

int rf_ConfigureDebugMem(listp)
  RF_ShutdownList_t  **listp;
{
  int i, rc;

  rc = rf_create_managed_mutex(listp, &rf_debug_mem_mutex);
  if (rc) {
    RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d\n", __FILE__,
      __LINE__, rc);
    return(rc);
  }
  if (rf_memDebug) {
    for (i=0; i<RF_MH_TABLESIZE; i++)
      mh_table[i] = NULL;
    mh_table_initialized=1;
  }
  return(0);
d311 106
d419 64
a482 66
static void memory_hash_insert(addr, size, line, filen)
void *addr;
int size, line;
char *filen;
{
    unsigned long bucket = HASHADDR(addr);
    struct mh_struct *p;
    
    RF_ASSERT(mh_table_initialized);

    /* search for this address in the hash table */
    for (p=mh_table[bucket]; p && (p->address != addr); p=p->next);
    if (!p) {
#ifdef KERNEL
      RF_Malloc(p,sizeof(struct mh_struct),(struct mh_struct *));
#else /* KERNEL */
      p = (struct mh_struct *)malloc(sizeof(struct mh_struct));
#endif /* KERNEL */
      RF_ASSERT(p);
      p->next = mh_table[bucket];
      mh_table[bucket] = p;
      p->address = addr;
      p->allocated = 0;
    }
    if (p->allocated) {
      printf("ERROR:  reallocated address 0x%lx from line %d, file %s without intervening free\n",(long) addr, line, filen);
      printf("        last allocated from line %d file %s\n",p->line, p->filen);
      RF_ASSERT(0);
    }
    p->size = size; p->line = line; p->filen = filen;
    p->allocated = 1;
}

static int memory_hash_remove(addr, sz)
void *addr;
int sz;
{
    unsigned long bucket = HASHADDR(addr);
    struct mh_struct *p;
    
    RF_ASSERT(mh_table_initialized);
    for (p=mh_table[bucket]; p && (p->address != addr); p=p->next);
    if (!p) {
      printf("ERROR:  freeing never-allocated address 0x%lx\n",(long) addr);
      RF_PANIC();
    }
    if (!p->allocated) {
      printf("ERROR:  freeing unallocated address 0x%lx.  Last allocation line %d file %s\n",(long) addr, p->line, p->filen);
      RF_PANIC();
    }
    if (sz > 0 && p->size != sz) {         /* you can suppress this error by using a negative value as the size to free */
      printf("ERROR:  incorrect size at free for address 0x%lx: is %d should be %d.  Alloc at line %d of file %s\n",(unsigned long) addr, sz, p->size,p->line, p->filen);
      RF_PANIC();
    }
    p->allocated = 0;
    return(p->size);
}

void rf_ReportMaxMem()
{
    printf("Max memory used:  %d bytes\n",(int)max_mem);
#ifndef KERNEL
    fflush(stdout);
    fprintf(stderr,"Max memory used:  %d bytes\n",max_mem);
    fflush(stderr);
#endif /* !KERNEL */
@

