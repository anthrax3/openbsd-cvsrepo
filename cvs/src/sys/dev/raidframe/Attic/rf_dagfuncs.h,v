head	1.5;
access;
symbols
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.38
	OPENBSD_5_0:1.4.0.36
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.34
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.32
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.28
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.30
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.26
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.24
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.22
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.20
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.18
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.16
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.14
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.12
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.10
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.8
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.8
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.4;

1.4
date	2002.12.16.07.01.03;	author tdeval;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.08.16.07.39;	author peter;	state Exp;
branches
	1.3.8.1;
next	1.2;

1.2
date	99.02.16.00.02.32;	author niklas;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	99.01.11.14.29.11;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2001.05.14.22.26.10;	author niklas;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2003.03.28.00.38.27;	author niklas;	state Exp;
branches;
next	;

1.3.8.1
date	2003.05.19.22.21.51;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_dagfuncs.h,v 1.4 2002/12/16 07:01:03 tdeval Exp $	*/
/*	$NetBSD: rf_dagfuncs.h,v 1.4 2000/03/30 13:39:07 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland, William V. Courtright II, Jim Zelenka
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*****************************************************************************
 *
 * dagfuncs.h -- Header file for DAG node execution routines.
 *
 *****************************************************************************/

#ifndef	_RF__RF_DAGFUNCS_H_
#define	_RF__RF_DAGFUNCS_H_

int rf_ConfigureDAGFuncs(RF_ShutdownList_t **);
int rf_TerminateFunc(RF_DagNode_t *);
int rf_TerminateUndoFunc(RF_DagNode_t *);
int rf_DiskReadMirrorIdleFunc(RF_DagNode_t *);
int rf_DiskReadMirrorPartitionFunc(RF_DagNode_t *);
int rf_DiskReadMirrorUndoFunc(RF_DagNode_t *);
int rf_ParityLogUpdateFunc(RF_DagNode_t *);
int rf_ParityLogOverwriteFunc(RF_DagNode_t *);
int rf_ParityLogUpdateUndoFunc(RF_DagNode_t *);
int rf_ParityLogOverwriteUndoFunc(RF_DagNode_t *);
int rf_NullNodeFunc(RF_DagNode_t *);
int rf_NullNodeUndoFunc(RF_DagNode_t *);
int rf_DiskReadFuncForThreads(RF_DagNode_t *);
int rf_DiskWriteFuncForThreads(RF_DagNode_t *);
int rf_DiskUndoFunc(RF_DagNode_t *);
int rf_DiskUnlockFuncForThreads(RF_DagNode_t *);
int rf_GenericWakeupFunc(RF_DagNode_t *, int);
int rf_RegularXorFunc(RF_DagNode_t *);
int rf_SimpleXorFunc(RF_DagNode_t *);
int rf_RecoveryXorFunc(RF_DagNode_t *);
int rf_XorIntoBuffer(RF_Raid_t *, RF_PhysDiskAddr_t *, char *, char *, void *);
int rf_bxor(char *, char *, int, void *);
int rf_longword_bxor(unsigned long *, unsigned long *, int, void *);
int rf_longword_bxor3(unsigned long *, unsigned long *, unsigned long *,
	unsigned long *, int, void *);
int rf_bxor3(unsigned char *, unsigned char *, unsigned char *,
	unsigned char *, unsigned long, void *);

/* Function ptrs defined in ConfigureDAGFuncs(). */
extern int (*rf_DiskReadFunc) (RF_DagNode_t *);
extern int (*rf_DiskWriteFunc) (RF_DagNode_t *);
extern int (*rf_DiskReadUndoFunc) (RF_DagNode_t *);
extern int (*rf_DiskWriteUndoFunc) (RF_DagNode_t *);
extern int (*rf_DiskUnlockFunc) (RF_DagNode_t *);
extern int (*rf_DiskUnlockUndoFunc) (RF_DagNode_t *);
extern int (*rf_SimpleXorUndoFunc) (RF_DagNode_t *);
extern int (*rf_RegularXorUndoFunc) (RF_DagNode_t *);
extern int (*rf_RecoveryXorUndoFunc) (RF_DagNode_t *);

/* Macros for manipulating the param[3] in a read or write node. */
#define	RF_CREATE_PARAM3(pri,lk,unlk,wru)				\
	(((RF_uint64) (((wru & 0xFFFFFF) << 8) | ((lk) ? 0x10 : 0) |	\
		       ((unlk) ? 0x20 : 0) | ((pri) & 0xF))))
#define	RF_EXTRACT_PRIORITY(_x_)					\
	((((unsigned) ((unsigned long)(_x_))) >> 0) & 0x0F)
#define	RF_EXTRACT_LOCK_FLAG(_x_)					\
	((((unsigned) ((unsigned long)(_x_))) >> 4) & 0x1)
#define	RF_EXTRACT_UNLOCK_FLAG(_x_)					\
	((((unsigned) ((unsigned long)(_x_))) >> 5) & 0x1)
#define	RF_EXTRACT_RU(_x_)						\
	((((unsigned) ((unsigned long)(_x_))) >> 8) & 0xFFFFFF)

#endif	/* !_RF__RF_DAGFUNCS_H_ */
@


1.4
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_dagfuncs.h,v 1.3 2000/08/08 16:07:39 peter Exp $	*/
@


1.3
log
@sync RAIDframe with Gre Oster's work for NetBSD.

This update incorporates changes since January 2000.

RAID1 and RAID5 tested for functionality matching the 2.7 code. A
number of bug fixes (including stopping a parity rebuild when
unconfiguring) have been included. See Greg's RAIDframe info page:

	http://www.cs.usask.ca/staff/oster/raid.html

The RAID_AUTOCONFIG feature set does *NOT* yet work. These features
require more work throughout the boot system and as such are a big
task.

IMPORTANT: As with anything that is this near live data on your
systems, please test carefully with existing configurations before
deploying in a live system.  Feedback via sendbug or mail direct
to peter@@wonderland.org is appreciated.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_dagfuncs.h,v 1.2 1999/02/16 00:02:32 niklas Exp $	*/
d3 1
d31 1
a31 1
/*****************************************************************************************
d33 1
a33 1
 * dagfuncs.h -- header file for DAG node execution routines
d35 1
a35 1
 ****************************************************************************************/
d37 2
a38 2
#ifndef _RF__RF_DAGFUNCS_H_
#define _RF__RF_DAGFUNCS_H_
d40 27
a66 32
int     rf_ConfigureDAGFuncs(RF_ShutdownList_t ** listp);
int     rf_TerminateFunc(RF_DagNode_t * node);
int     rf_TerminateUndoFunc(RF_DagNode_t * node);
int     rf_DiskReadMirrorIdleFunc(RF_DagNode_t * node);
int     rf_DiskReadMirrorPartitionFunc(RF_DagNode_t * node);
int     rf_DiskReadMirrorUndoFunc(RF_DagNode_t * node);
int     rf_ParityLogUpdateFunc(RF_DagNode_t * node);
int     rf_ParityLogOverwriteFunc(RF_DagNode_t * node);
int     rf_ParityLogUpdateUndoFunc(RF_DagNode_t * node);
int     rf_ParityLogOverwriteUndoFunc(RF_DagNode_t * node);
int     rf_NullNodeFunc(RF_DagNode_t * node);
int     rf_NullNodeUndoFunc(RF_DagNode_t * node);
int     rf_DiskReadFuncForThreads(RF_DagNode_t * node);
int     rf_DiskWriteFuncForThreads(RF_DagNode_t * node);
int     rf_DiskUndoFunc(RF_DagNode_t * node);
int     rf_DiskUnlockFuncForThreads(RF_DagNode_t * node);
int     rf_GenericWakeupFunc(RF_DagNode_t * node, int status);
int     rf_RegularXorFunc(RF_DagNode_t * node);
int     rf_SimpleXorFunc(RF_DagNode_t * node);
int     rf_RecoveryXorFunc(RF_DagNode_t * node);
int 
rf_XorIntoBuffer(RF_Raid_t * raidPtr, RF_PhysDiskAddr_t * pda, char *srcbuf,
    char *targbuf, void *bp);
int     rf_bxor(char *src, char *dest, int len, void *bp);
int 
rf_longword_bxor(unsigned long *src, unsigned long *dest, int len, void *bp);
int 
rf_longword_bxor3(unsigned long *dest, unsigned long *a, unsigned long *b, 
		  unsigned long *c, int len, void *bp);
int 
rf_bxor3(unsigned char *dst, unsigned char *a, unsigned char *b,
    unsigned char *c, unsigned long len, void *bp);
d68 1
a68 1
/* function ptrs defined in ConfigureDAGFuncs() */
d79 12
a90 6
/* macros for manipulating the param[3] in a read or write node */
#define RF_CREATE_PARAM3(pri, lk, unlk, wru) (((RF_uint64)(((wru&0xFFFFFF)<<8)|((lk)?0x10:0)|((unlk)?0x20:0)|((pri)&0xF)) ))
#define RF_EXTRACT_PRIORITY(_x_)     ((((unsigned) ((unsigned long)(_x_))) >> 0) & 0x0F)
#define RF_EXTRACT_LOCK_FLAG(_x_)    ((((unsigned) ((unsigned long)(_x_))) >> 4) & 0x1)
#define RF_EXTRACT_UNLOCK_FLAG(_x_)  ((((unsigned) ((unsigned long)(_x_))) >> 5) & 0x1)
#define RF_EXTRACT_RU(_x_)           ((((unsigned) ((unsigned long)(_x_))) >> 8) & 0xFFFFFF)
d92 1
a92 1
#endif				/* !_RF__RF_DAGFUNCS_H_ */
@


1.3.8.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/*****************************************************************************
d32 1
a32 1
 * dagfuncs.h -- Header file for DAG node execution routines.
d34 1
a34 1
 *****************************************************************************/
d36 2
a37 2
#ifndef	_RF__RF_DAGFUNCS_H_
#define	_RF__RF_DAGFUNCS_H_
d39 32
a70 27
int rf_ConfigureDAGFuncs(RF_ShutdownList_t **);
int rf_TerminateFunc(RF_DagNode_t *);
int rf_TerminateUndoFunc(RF_DagNode_t *);
int rf_DiskReadMirrorIdleFunc(RF_DagNode_t *);
int rf_DiskReadMirrorPartitionFunc(RF_DagNode_t *);
int rf_DiskReadMirrorUndoFunc(RF_DagNode_t *);
int rf_ParityLogUpdateFunc(RF_DagNode_t *);
int rf_ParityLogOverwriteFunc(RF_DagNode_t *);
int rf_ParityLogUpdateUndoFunc(RF_DagNode_t *);
int rf_ParityLogOverwriteUndoFunc(RF_DagNode_t *);
int rf_NullNodeFunc(RF_DagNode_t *);
int rf_NullNodeUndoFunc(RF_DagNode_t *);
int rf_DiskReadFuncForThreads(RF_DagNode_t *);
int rf_DiskWriteFuncForThreads(RF_DagNode_t *);
int rf_DiskUndoFunc(RF_DagNode_t *);
int rf_DiskUnlockFuncForThreads(RF_DagNode_t *);
int rf_GenericWakeupFunc(RF_DagNode_t *, int);
int rf_RegularXorFunc(RF_DagNode_t *);
int rf_SimpleXorFunc(RF_DagNode_t *);
int rf_RecoveryXorFunc(RF_DagNode_t *);
int rf_XorIntoBuffer(RF_Raid_t *, RF_PhysDiskAddr_t *, char *, char *, void *);
int rf_bxor(char *, char *, int, void *);
int rf_longword_bxor(unsigned long *, unsigned long *, int, void *);
int rf_longword_bxor3(unsigned long *, unsigned long *, unsigned long *,
	unsigned long *, int, void *);
int rf_bxor3(unsigned char *, unsigned char *, unsigned char *,
	unsigned char *, unsigned long, void *);
d72 1
a72 1
/* Function ptrs defined in ConfigureDAGFuncs(). */
d83 6
a88 12
/* Macros for manipulating the param[3] in a read or write node. */
#define	RF_CREATE_PARAM3(pri,lk,unlk,wru)				\
	(((RF_uint64) (((wru & 0xFFFFFF) << 8) | ((lk) ? 0x10 : 0) |	\
		       ((unlk) ? 0x20 : 0) | ((pri) & 0xF))))
#define	RF_EXTRACT_PRIORITY(_x_)					\
	((((unsigned) ((unsigned long)(_x_))) >> 0) & 0x0F)
#define	RF_EXTRACT_LOCK_FLAG(_x_)					\
	((((unsigned) ((unsigned long)(_x_))) >> 4) & 0x1)
#define	RF_EXTRACT_UNLOCK_FLAG(_x_)					\
	((((unsigned) ((unsigned long)(_x_))) >> 5) & 0x1)
#define	RF_EXTRACT_RU(_x_)						\
	((((unsigned) ((unsigned long)(_x_))) >> 8) & 0xFFFFFF)
d90 1
a90 1
#endif	/* !_RF__RF_DAGFUNCS_H_ */
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_dagfuncs.h,v 1.1 1999/01/11 14:29:11 niklas Exp $	*/
/*	$NetBSD: rf_dagfuncs.h,v 1.3 1999/02/05 00:06:08 oster Exp $	*/
d64 1
a64 2
rf_longword_bxor(register unsigned long *src, register unsigned long *dest,
    int len, void *bp);
d66 2
a67 2
rf_longword_bxor3(register unsigned long *dest, register unsigned long *a,
    register unsigned long *b, register unsigned long *c, int len, void *bp);
@


1.2.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_dagfuncs.h,v 1.3 2000/08/08 16:07:39 peter Exp $	*/
/*	$NetBSD: rf_dagfuncs.h,v 1.4 2000/03/30 13:39:07 oster Exp $	*/
d64 2
a65 1
rf_longword_bxor(unsigned long *src, unsigned long *dest, int len, void *bp);
d67 2
a68 2
rf_longword_bxor3(unsigned long *dest, unsigned long *a, unsigned long *b, 
		  unsigned long *c, int len, void *bp);
@


1.2.6.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/*****************************************************************************
d32 1
a32 1
 * dagfuncs.h -- Header file for DAG node execution routines.
d34 1
a34 1
 *****************************************************************************/
d36 2
a37 2
#ifndef	_RF__RF_DAGFUNCS_H_
#define	_RF__RF_DAGFUNCS_H_
d39 32
a70 27
int rf_ConfigureDAGFuncs(RF_ShutdownList_t **);
int rf_TerminateFunc(RF_DagNode_t *);
int rf_TerminateUndoFunc(RF_DagNode_t *);
int rf_DiskReadMirrorIdleFunc(RF_DagNode_t *);
int rf_DiskReadMirrorPartitionFunc(RF_DagNode_t *);
int rf_DiskReadMirrorUndoFunc(RF_DagNode_t *);
int rf_ParityLogUpdateFunc(RF_DagNode_t *);
int rf_ParityLogOverwriteFunc(RF_DagNode_t *);
int rf_ParityLogUpdateUndoFunc(RF_DagNode_t *);
int rf_ParityLogOverwriteUndoFunc(RF_DagNode_t *);
int rf_NullNodeFunc(RF_DagNode_t *);
int rf_NullNodeUndoFunc(RF_DagNode_t *);
int rf_DiskReadFuncForThreads(RF_DagNode_t *);
int rf_DiskWriteFuncForThreads(RF_DagNode_t *);
int rf_DiskUndoFunc(RF_DagNode_t *);
int rf_DiskUnlockFuncForThreads(RF_DagNode_t *);
int rf_GenericWakeupFunc(RF_DagNode_t *, int);
int rf_RegularXorFunc(RF_DagNode_t *);
int rf_SimpleXorFunc(RF_DagNode_t *);
int rf_RecoveryXorFunc(RF_DagNode_t *);
int rf_XorIntoBuffer(RF_Raid_t *, RF_PhysDiskAddr_t *, char *, char *, void *);
int rf_bxor(char *, char *, int, void *);
int rf_longword_bxor(unsigned long *, unsigned long *, int, void *);
int rf_longword_bxor3(unsigned long *, unsigned long *, unsigned long *,
	unsigned long *, int, void *);
int rf_bxor3(unsigned char *, unsigned char *, unsigned char *,
	unsigned char *, unsigned long, void *);
d72 1
a72 1
/* Function ptrs defined in ConfigureDAGFuncs(). */
d83 6
a88 12
/* Macros for manipulating the param[3] in a read or write node. */
#define	RF_CREATE_PARAM3(pri,lk,unlk,wru)				\
	(((RF_uint64) (((wru & 0xFFFFFF) << 8) | ((lk) ? 0x10 : 0) |	\
		       ((unlk) ? 0x20 : 0) | ((pri) & 0xF))))
#define	RF_EXTRACT_PRIORITY(_x_)					\
	((((unsigned) ((unsigned long)(_x_))) >> 0) & 0x0F)
#define	RF_EXTRACT_LOCK_FLAG(_x_)					\
	((((unsigned) ((unsigned long)(_x_))) >> 4) & 0x1)
#define	RF_EXTRACT_UNLOCK_FLAG(_x_)					\
	((((unsigned) ((unsigned long)(_x_))) >> 5) & 0x1)
#define	RF_EXTRACT_RU(_x_)						\
	((((unsigned) ((unsigned long)(_x_))) >> 8) & 0xFFFFFF)
d90 1
a90 1
#endif	/* !_RF__RF_DAGFUNCS_H_ */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_dagfuncs.h,v 1.1 1998/11/13 04:20:28 oster Exp $	*/
/*	$NetBSD: rf_dagfuncs.h,v 1.1 1998/11/13 04:20:28 oster Exp $	*/
d33 1
a33 1
 * 
a35 51
/*
 * :  
 * Log: rf_dagfuncs.h,v 
 * Revision 1.17  1996/07/22 19:52:16  jimz
 * switched node params to RF_DagParam_t, a union of
 * a 64-bit int and a void *, for better portability
 * attempted hpux port, but failed partway through for
 * lack of a single C compiler capable of compiling all
 * source files
 *
 * Revision 1.16  1996/06/10  11:55:47  jimz
 * Straightened out some per-array/not-per-array distinctions, fixed
 * a couple bugs related to confusion. Added shutdown lists. Removed
 * layout shutdown function (now subsumed by shutdown lists).
 *
 * Revision 1.15  1996/06/06  17:27:20  jimz
 * added another read mirror func (partitioning), changed names so dag
 * creation routines can use the appropriate one
 *
 * Revision 1.14  1996/05/30  11:29:41  jimz
 * Numerous bug fixes. Stripe lock release code disagreed with the taking code
 * about when stripes should be locked (I made it consistent: no parity, no lock)
 * There was a lot of extra serialization of I/Os which I've removed- a lot of
 * it was to calculate values for the cache code, which is no longer with us.
 * More types, function, macro cleanup. Added code to properly quiesce the array
 * on shutdown. Made a lot of stuff array-specific which was (bogusly) general
 * before. Fixed memory allocation, freeing bugs.
 *
 * Revision 1.13  1996/05/24  22:17:04  jimz
 * continue code + namespace cleanup
 * typed a bunch of flags
 *
 * Revision 1.12  1996/05/24  04:28:55  jimz
 * release cleanup ckpt
 *
 * Revision 1.11  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.10  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.9  1995/12/01  15:56:46  root
 * added copyright info
 *
 * Revision 1.8  1995/11/07  16:25:23  wvcii
 * added DiskUnlockFuncForThreads
 *
 */

d39 33
a71 29
int rf_ConfigureDAGFuncs(RF_ShutdownList_t **listp);
int rf_TerminateFunc(RF_DagNode_t *node);
int rf_TerminateUndoFunc(RF_DagNode_t *node);
int rf_DiskReadMirrorIdleFunc(RF_DagNode_t *node);
int rf_DiskReadMirrorPartitionFunc(RF_DagNode_t *node);
int rf_DiskReadMirrorUndoFunc(RF_DagNode_t *node);
int rf_ParityLogUpdateFunc(RF_DagNode_t *node);
int rf_ParityLogOverwriteFunc(RF_DagNode_t *node);
int rf_ParityLogUpdateUndoFunc(RF_DagNode_t *node);
int rf_ParityLogOverwriteUndoFunc(RF_DagNode_t *node);
int rf_NullNodeFunc(RF_DagNode_t *node);
int rf_NullNodeUndoFunc(RF_DagNode_t *node);
int rf_DiskReadFuncForThreads(RF_DagNode_t *node);
int rf_DiskWriteFuncForThreads(RF_DagNode_t *node);
int rf_DiskUndoFunc(RF_DagNode_t *node);
int rf_DiskUnlockFuncForThreads(RF_DagNode_t *node);
int rf_GenericWakeupFunc(RF_DagNode_t *node, int status);
int rf_RegularXorFunc(RF_DagNode_t *node);
int rf_SimpleXorFunc(RF_DagNode_t *node);
int rf_RecoveryXorFunc(RF_DagNode_t *node);
int rf_XorIntoBuffer(RF_Raid_t *raidPtr, RF_PhysDiskAddr_t *pda, char *srcbuf,
	char *targbuf, void *bp);
int rf_bxor(char *src, char *dest, int len, void *bp);
int rf_longword_bxor(register unsigned long *src, register unsigned long *dest,
	int len, void *bp);
int rf_longword_bxor3(register unsigned long *dest, register unsigned long *a,
	register unsigned long *b, register unsigned long *c, int len, void *bp);
int rf_bxor3(unsigned char *dst, unsigned char *a, unsigned char *b,
	unsigned char *c, unsigned long len, void *bp);
d74 9
a82 9
extern int (*rf_DiskReadFunc)(RF_DagNode_t *);
extern int (*rf_DiskWriteFunc)(RF_DagNode_t *);
extern int (*rf_DiskReadUndoFunc)(RF_DagNode_t *);
extern int (*rf_DiskWriteUndoFunc)(RF_DagNode_t *);
extern int (*rf_DiskUnlockFunc)(RF_DagNode_t *);
extern int (*rf_DiskUnlockUndoFunc)(RF_DagNode_t *);
extern int (*rf_SimpleXorUndoFunc)(RF_DagNode_t *);
extern int (*rf_RegularXorUndoFunc)(RF_DagNode_t *);
extern int (*rf_RecoveryXorUndoFunc)(RF_DagNode_t *);
d91 1
a91 1
#endif /* !_RF__RF_DAGFUNCS_H_ */
@

