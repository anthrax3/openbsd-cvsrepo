head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.03;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.02.35;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.14;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.27;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.51;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_decluster.h,v 1.3 2002/12/16 07:01:03 tdeval Exp $	*/
/*	$NetBSD: rf_decluster.h,v 1.3 1999/02/05 00:06:09 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*****************************************************************************
 *
 * decluster.h -- Header file for declustered layout code.
 *
 * Adapted from raidSim version July 1994
 * Created 10-21-92 (MCH)
 *
 *****************************************************************************/

#ifndef	_RF__RF_DECLUSTER_H_
#define	_RF__RF_DECLUSTER_H_

#include "rf_types.h"

/*
 * These structures define the tables used to locate the spare unit
 * associated with a particular data or parity unit, and to perform
 * the associated inverse mapping.
 */
struct RF_SpareTableEntry_s {
	u_int	spareDisk;		/* Disk where this block is spared. */
	u_int	spareBlockOffsetInSUs;	/*
					 * Offset into spare table for that
					 * disk.
					 */
};

#define	RF_SPAREMAP_NAME_LEN	128

/*
 * This is the layout-specific info structure for the declustered layout.
 */
struct RF_DeclusteredConfigInfo_s {
		/* Number of stripe units per parity stripe. */
	RF_StripeCount_t	  groupSize;
		/* The block design table. */
	RF_RowCol_t		**LayoutTable;
	RF_RowCol_t		**OffsetTable;
		/* The sector offset table. */
	RF_RowCol_t		**BlockTable;
		/* The block membership table. */
	RF_StripeCount_t	  SUsPerFullTable;
		/* Stripe units per full table. */
	RF_StripeCount_t	  SUsPerTable;
		/* Stripe units per table. */
	RF_StripeCount_t	  PUsPerBlock;
		/* Parity units per block. */
	RF_StripeCount_t	  SUsPerBlock;
		/* Stripe units per block. */
	RF_StripeCount_t	  BlocksPerTable;
		/* Block design tuples per table. */
	RF_StripeCount_t	  NumParityReps;
		/* Tables per full table. */
	RF_StripeCount_t	  TableDepthInPUs;
		/* PUs on one disk in 1 table. */
	RF_StripeCount_t	  FullTableDepthInPUs;
		/* PUs on one disk in 1 fulltable. */
	RF_StripeCount_t	  FullTableLimitSUID;
		/* SU where partial fulltables start. */
	RF_StripeCount_t	  ExtraTablesPerDisk;
		/* Number of tables in last fulltable. */
	RF_SectorNum_t		  DiskOffsetOfLastFullTableInSUs;
		/* Disk offsets of partial fulltable, if any. */
	RF_StripeCount_t	  numCompleteFullTablesPerDisk;
		/* Fulltable identifier of partial fulltable, if any. */
	u_int			  Lambda;
		/* The pair count in the block design. */

	/* These are used only in the distributed-sparing case. */
	RF_StripeCount_t	  FullTablesPerSpareRegion;
		/* Number of fulltables comprising 1 spare region. */
	RF_StripeCount_t	  TablesPerSpareRegion;
		/* Number of tables. */
	RF_SectorCount_t	  SpareSpaceDepthPerRegionInSUs;
		/* Spare space/disk/region. */
	RF_SectorCount_t	  SpareRegionDepthInSUs;
		/* Number of units/disk/region. */
	RF_SectorNum_t		  DiskOffsetOfLastSpareSpaceChunkInSUs;
		/* Locates spare space after partial fulltable. */
	RF_StripeCount_t	  TotSparePUsPerDisk;
		/* Total number of spare PUs per disk. */
	RF_StripeCount_t	  NumCompleteSRs;
	RF_SpareTableEntry_t	**SpareTable;
		/* Remap table for spare space. */
	char			  sparemap_fname[RF_SPAREMAP_NAME_LEN];
		/* Where to find sparemap. Not used in kernel. */
};

int  rf_ConfigureDeclustered(RF_ShutdownList_t **, RF_Raid_t *, RF_Config_t *);
int  rf_ConfigureDeclusteredDS(RF_ShutdownList_t **, RF_Raid_t *,
	RF_Config_t *);

void rf_MapSectorDeclustered(RF_Raid_t *, RF_RaidAddr_t, RF_RowCol_t *,
	RF_RowCol_t *, RF_SectorNum_t *, int);
void rf_MapParityDeclustered(RF_Raid_t *, RF_RaidAddr_t, RF_RowCol_t *,
	RF_RowCol_t *, RF_SectorNum_t *, int);
void rf_IdentifyStripeDeclustered(RF_Raid_t *, RF_RaidAddr_t, RF_RowCol_t **,
	RF_RowCol_t *);
void rf_MapSIDToPSIDDeclustered(RF_RaidLayout_t *, RF_StripeNum_t,
	RF_StripeNum_t *, RF_ReconUnitNum_t *);
int  rf_InstallSpareTable(RF_Raid_t *, RF_RowCol_t, RF_RowCol_t);
void rf_FreeSpareTable(RF_Raid_t *);

RF_HeadSepLimit_t rf_GetDefaultHeadSepLimitDeclustered(RF_Raid_t *);
int  rf_GetDefaultNumFloatingReconBuffersDeclustered(RF_Raid_t *);

void rf_decluster_adjust_params(RF_RaidLayout_t *, RF_StripeNum_t *,
	RF_StripeCount_t *, RF_StripeCount_t *, RF_StripeNum_t *);
void rf_remap_to_spare_space(RF_RaidLayout_t *, RF_DeclusteredConfigInfo_t *,
	RF_RowCol_t, RF_StripeNum_t, RF_StripeNum_t, RF_SectorNum_t,
	RF_StripeNum_t, RF_StripeNum_t, RF_RowCol_t *, RF_StripeNum_t *);
int  rf_SetSpareTable(RF_Raid_t *, void *);
RF_ReconUnitCount_t rf_GetNumSpareRUsDeclustered(RF_Raid_t *);

#endif	/* ! _RF__RF_DECLUSTER_H_ */
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_decluster.h,v 1.2 1999/02/16 00:02:35 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_decluster.h,v 1.1 1999/01/11 14:29:14 niklas Exp $	*/
d3 1
d31 1
a31 1
/*----------------------------------------------------------------------
d33 1
a33 1
 * decluster.h -- header file for declustered layout code
d38 1
a38 1
 *--------------------------------------------------------------------*/
d40 2
a41 2
#ifndef _RF__RF_DECLUSTER_H_
#define _RF__RF_DECLUSTER_H_
d51 5
a55 3
	u_int   spareDisk;	/* disk to which this block is spared */
	u_int   spareBlockOffsetInSUs;	/* offset into spare table for that
					 * disk */
a56 1
#define RF_SPAREMAP_NAME_LEN 128
d58 4
a61 1
/* this is the layout-specific info structure for the declustered layout.
d64 53
a116 41
	RF_StripeCount_t groupSize;	/* no. of stripe units per parity
					 * stripe */
	RF_RowCol_t **LayoutTable;	/* the block design table */
	RF_RowCol_t **OffsetTable;	/* the sector offset table */
	RF_RowCol_t **BlockTable;	/* the block membership table */
	RF_StripeCount_t SUsPerFullTable;	/* stripe units per full table */
	RF_StripeCount_t SUsPerTable;	/* stripe units per table */
	RF_StripeCount_t PUsPerBlock;	/* parity units per block */
	RF_StripeCount_t SUsPerBlock;	/* stripe units per block */
	RF_StripeCount_t BlocksPerTable;	/* block design tuples per
						 * table */
	RF_StripeCount_t NumParityReps;	/* tables per full table */
	RF_StripeCount_t TableDepthInPUs;	/* PUs on one disk in 1 table */
	RF_StripeCount_t FullTableDepthInPUs;	/* PUs on one disk in 1
						 * fulltable */
	RF_StripeCount_t FullTableLimitSUID;	/* SU where partial fulltables
						 * start */
	RF_StripeCount_t ExtraTablesPerDisk;	/* # of tables in last
						 * fulltable */
	RF_SectorNum_t DiskOffsetOfLastFullTableInSUs;	/* disk offs of partial
							 * ft, if any */
	RF_StripeCount_t numCompleteFullTablesPerDisk;	/* ft identifier of
							 * partial ft, if any */
	u_int   Lambda;		/* the pair count in the block design */

	/* these are used only in the distributed-sparing case */
	RF_StripeCount_t FullTablesPerSpareRegion;	/* # of ft's comprising
							 * 1 spare region */
	RF_StripeCount_t TablesPerSpareRegion;	/* # of tables */
	RF_SectorCount_t SpareSpaceDepthPerRegionInSUs;	/* spare
							 * space/disk/region */
	RF_SectorCount_t SpareRegionDepthInSUs;	/* # of units/disk/region */
	RF_SectorNum_t DiskOffsetOfLastSpareSpaceChunkInSUs;	/* locates sp space
								 * after partial ft */
	RF_StripeCount_t TotSparePUsPerDisk;	/* total number of spare PUs
						 * per disk */
	RF_StripeCount_t NumCompleteSRs;
	RF_SpareTableEntry_t **SpareTable;	/* remap table for spare space */
	char    sparemap_fname[RF_SPAREMAP_NAME_LEN];	/* where to find
							 * sparemap. not used in
							 * kernel */
d119 25
a143 38
int 
rf_ConfigureDeclustered(RF_ShutdownList_t ** listp, RF_Raid_t * raidPtr,
    RF_Config_t * cfgPtr);
int 
rf_ConfigureDeclusteredDS(RF_ShutdownList_t ** listp, RF_Raid_t * raidPtr,
    RF_Config_t * cfgPtr);

void 
rf_MapSectorDeclustered(RF_Raid_t * raidPtr, RF_RaidAddr_t raidSector,
    RF_RowCol_t * row, RF_RowCol_t * col, RF_SectorNum_t * diskSector, int remap);
void 
rf_MapParityDeclustered(RF_Raid_t * raidPtr, RF_RaidAddr_t raidSector,
    RF_RowCol_t * row, RF_RowCol_t * col, RF_SectorNum_t * diskSector, int remap);
void 
rf_IdentifyStripeDeclustered(RF_Raid_t * raidPtr, RF_RaidAddr_t addr,
    RF_RowCol_t ** diskids, RF_RowCol_t * outRow);
void 
rf_MapSIDToPSIDDeclustered(RF_RaidLayout_t * layoutPtr,
    RF_StripeNum_t stripeID, RF_StripeNum_t * psID,
    RF_ReconUnitNum_t * which_ru);
int     rf_InstallSpareTable(RF_Raid_t * raidPtr, RF_RowCol_t frow, RF_RowCol_t fcol);
void    rf_FreeSpareTable(RF_Raid_t * raidPtr);

RF_HeadSepLimit_t rf_GetDefaultHeadSepLimitDeclustered(RF_Raid_t * raidPtr);
int     rf_GetDefaultNumFloatingReconBuffersDeclustered(RF_Raid_t * raidPtr);

void 
rf_decluster_adjust_params(RF_RaidLayout_t * layoutPtr,
    RF_StripeNum_t * SUID, RF_StripeCount_t * sus_per_fulltable,
    RF_StripeCount_t * fulltable_depth, RF_StripeNum_t * base_suid);
void 
rf_remap_to_spare_space(
    RF_RaidLayout_t * layoutPtr,
    RF_DeclusteredConfigInfo_t * info, RF_RowCol_t row, RF_StripeNum_t FullTableID,
    RF_StripeNum_t TableID, RF_SectorNum_t BlockID, RF_StripeNum_t base_suid,
    RF_StripeNum_t SpareRegion, RF_RowCol_t * outCol, RF_StripeNum_t * outSU);
int     rf_SetSpareTable(RF_Raid_t * raidPtr, void *data);
RF_ReconUnitCount_t rf_GetNumSpareRUsDeclustered(RF_Raid_t * raidPtr);
d145 1
a145 1
#endif				/* !_RF__RF_DECLUSTER_H_ */
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/*****************************************************************************
d32 1
a32 1
 * decluster.h -- Header file for declustered layout code.
d37 1
a37 1
 *****************************************************************************/
d39 2
a40 2
#ifndef	_RF__RF_DECLUSTER_H_
#define	_RF__RF_DECLUSTER_H_
d50 3
a52 5
	u_int	spareDisk;		/* Disk where this block is spared. */
	u_int	spareBlockOffsetInSUs;	/*
					 * Offset into spare table for that
					 * disk.
					 */
d54 1
d56 1
a56 4
#define	RF_SPAREMAP_NAME_LEN	128

/*
 * This is the layout-specific info structure for the declustered layout.
d59 41
a99 53
		/* Number of stripe units per parity stripe. */
	RF_StripeCount_t	  groupSize;
		/* The block design table. */
	RF_RowCol_t		**LayoutTable;
	RF_RowCol_t		**OffsetTable;
		/* The sector offset table. */
	RF_RowCol_t		**BlockTable;
		/* The block membership table. */
	RF_StripeCount_t	  SUsPerFullTable;
		/* Stripe units per full table. */
	RF_StripeCount_t	  SUsPerTable;
		/* Stripe units per table. */
	RF_StripeCount_t	  PUsPerBlock;
		/* Parity units per block. */
	RF_StripeCount_t	  SUsPerBlock;
		/* Stripe units per block. */
	RF_StripeCount_t	  BlocksPerTable;
		/* Block design tuples per table. */
	RF_StripeCount_t	  NumParityReps;
		/* Tables per full table. */
	RF_StripeCount_t	  TableDepthInPUs;
		/* PUs on one disk in 1 table. */
	RF_StripeCount_t	  FullTableDepthInPUs;
		/* PUs on one disk in 1 fulltable. */
	RF_StripeCount_t	  FullTableLimitSUID;
		/* SU where partial fulltables start. */
	RF_StripeCount_t	  ExtraTablesPerDisk;
		/* Number of tables in last fulltable. */
	RF_SectorNum_t		  DiskOffsetOfLastFullTableInSUs;
		/* Disk offsets of partial fulltable, if any. */
	RF_StripeCount_t	  numCompleteFullTablesPerDisk;
		/* Fulltable identifier of partial fulltable, if any. */
	u_int			  Lambda;
		/* The pair count in the block design. */

	/* These are used only in the distributed-sparing case. */
	RF_StripeCount_t	  FullTablesPerSpareRegion;
		/* Number of fulltables comprising 1 spare region. */
	RF_StripeCount_t	  TablesPerSpareRegion;
		/* Number of tables. */
	RF_SectorCount_t	  SpareSpaceDepthPerRegionInSUs;
		/* Spare space/disk/region. */
	RF_SectorCount_t	  SpareRegionDepthInSUs;
		/* Number of units/disk/region. */
	RF_SectorNum_t		  DiskOffsetOfLastSpareSpaceChunkInSUs;
		/* Locates spare space after partial fulltable. */
	RF_StripeCount_t	  TotSparePUsPerDisk;
		/* Total number of spare PUs per disk. */
	RF_StripeCount_t	  NumCompleteSRs;
	RF_SpareTableEntry_t	**SpareTable;
		/* Remap table for spare space. */
	char			  sparemap_fname[RF_SPAREMAP_NAME_LEN];
		/* Where to find sparemap. Not used in kernel. */
d102 38
a139 25
int  rf_ConfigureDeclustered(RF_ShutdownList_t **, RF_Raid_t *, RF_Config_t *);
int  rf_ConfigureDeclusteredDS(RF_ShutdownList_t **, RF_Raid_t *,
	RF_Config_t *);

void rf_MapSectorDeclustered(RF_Raid_t *, RF_RaidAddr_t, RF_RowCol_t *,
	RF_RowCol_t *, RF_SectorNum_t *, int);
void rf_MapParityDeclustered(RF_Raid_t *, RF_RaidAddr_t, RF_RowCol_t *,
	RF_RowCol_t *, RF_SectorNum_t *, int);
void rf_IdentifyStripeDeclustered(RF_Raid_t *, RF_RaidAddr_t, RF_RowCol_t **,
	RF_RowCol_t *);
void rf_MapSIDToPSIDDeclustered(RF_RaidLayout_t *, RF_StripeNum_t,
	RF_StripeNum_t *, RF_ReconUnitNum_t *);
int  rf_InstallSpareTable(RF_Raid_t *, RF_RowCol_t, RF_RowCol_t);
void rf_FreeSpareTable(RF_Raid_t *);

RF_HeadSepLimit_t rf_GetDefaultHeadSepLimitDeclustered(RF_Raid_t *);
int  rf_GetDefaultNumFloatingReconBuffersDeclustered(RF_Raid_t *);

void rf_decluster_adjust_params(RF_RaidLayout_t *, RF_StripeNum_t *,
	RF_StripeCount_t *, RF_StripeCount_t *, RF_StripeNum_t *);
void rf_remap_to_spare_space(RF_RaidLayout_t *, RF_DeclusteredConfigInfo_t *,
	RF_RowCol_t, RF_StripeNum_t, RF_StripeNum_t, RF_SectorNum_t,
	RF_StripeNum_t, RF_StripeNum_t, RF_RowCol_t *, RF_StripeNum_t *);
int  rf_SetSpareTable(RF_Raid_t *, void *);
RF_ReconUnitCount_t rf_GetNumSpareRUsDeclustered(RF_Raid_t *);
d141 1
a141 1
#endif	/* ! _RF__RF_DECLUSTER_H_ */
@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/*****************************************************************************
d32 1
a32 1
 * decluster.h -- Header file for declustered layout code.
d37 1
a37 1
 *****************************************************************************/
d39 2
a40 2
#ifndef	_RF__RF_DECLUSTER_H_
#define	_RF__RF_DECLUSTER_H_
d50 3
a52 5
	u_int	spareDisk;		/* Disk where this block is spared. */
	u_int	spareBlockOffsetInSUs;	/*
					 * Offset into spare table for that
					 * disk.
					 */
d54 1
d56 1
a56 4
#define	RF_SPAREMAP_NAME_LEN	128

/*
 * This is the layout-specific info structure for the declustered layout.
d59 41
a99 53
		/* Number of stripe units per parity stripe. */
	RF_StripeCount_t	  groupSize;
		/* The block design table. */
	RF_RowCol_t		**LayoutTable;
	RF_RowCol_t		**OffsetTable;
		/* The sector offset table. */
	RF_RowCol_t		**BlockTable;
		/* The block membership table. */
	RF_StripeCount_t	  SUsPerFullTable;
		/* Stripe units per full table. */
	RF_StripeCount_t	  SUsPerTable;
		/* Stripe units per table. */
	RF_StripeCount_t	  PUsPerBlock;
		/* Parity units per block. */
	RF_StripeCount_t	  SUsPerBlock;
		/* Stripe units per block. */
	RF_StripeCount_t	  BlocksPerTable;
		/* Block design tuples per table. */
	RF_StripeCount_t	  NumParityReps;
		/* Tables per full table. */
	RF_StripeCount_t	  TableDepthInPUs;
		/* PUs on one disk in 1 table. */
	RF_StripeCount_t	  FullTableDepthInPUs;
		/* PUs on one disk in 1 fulltable. */
	RF_StripeCount_t	  FullTableLimitSUID;
		/* SU where partial fulltables start. */
	RF_StripeCount_t	  ExtraTablesPerDisk;
		/* Number of tables in last fulltable. */
	RF_SectorNum_t		  DiskOffsetOfLastFullTableInSUs;
		/* Disk offsets of partial fulltable, if any. */
	RF_StripeCount_t	  numCompleteFullTablesPerDisk;
		/* Fulltable identifier of partial fulltable, if any. */
	u_int			  Lambda;
		/* The pair count in the block design. */

	/* These are used only in the distributed-sparing case. */
	RF_StripeCount_t	  FullTablesPerSpareRegion;
		/* Number of fulltables comprising 1 spare region. */
	RF_StripeCount_t	  TablesPerSpareRegion;
		/* Number of tables. */
	RF_SectorCount_t	  SpareSpaceDepthPerRegionInSUs;
		/* Spare space/disk/region. */
	RF_SectorCount_t	  SpareRegionDepthInSUs;
		/* Number of units/disk/region. */
	RF_SectorNum_t		  DiskOffsetOfLastSpareSpaceChunkInSUs;
		/* Locates spare space after partial fulltable. */
	RF_StripeCount_t	  TotSparePUsPerDisk;
		/* Total number of spare PUs per disk. */
	RF_StripeCount_t	  NumCompleteSRs;
	RF_SpareTableEntry_t	**SpareTable;
		/* Remap table for spare space. */
	char			  sparemap_fname[RF_SPAREMAP_NAME_LEN];
		/* Where to find sparemap. Not used in kernel. */
d102 38
a139 25
int  rf_ConfigureDeclustered(RF_ShutdownList_t **, RF_Raid_t *, RF_Config_t *);
int  rf_ConfigureDeclusteredDS(RF_ShutdownList_t **, RF_Raid_t *,
	RF_Config_t *);

void rf_MapSectorDeclustered(RF_Raid_t *, RF_RaidAddr_t, RF_RowCol_t *,
	RF_RowCol_t *, RF_SectorNum_t *, int);
void rf_MapParityDeclustered(RF_Raid_t *, RF_RaidAddr_t, RF_RowCol_t *,
	RF_RowCol_t *, RF_SectorNum_t *, int);
void rf_IdentifyStripeDeclustered(RF_Raid_t *, RF_RaidAddr_t, RF_RowCol_t **,
	RF_RowCol_t *);
void rf_MapSIDToPSIDDeclustered(RF_RaidLayout_t *, RF_StripeNum_t,
	RF_StripeNum_t *, RF_ReconUnitNum_t *);
int  rf_InstallSpareTable(RF_Raid_t *, RF_RowCol_t, RF_RowCol_t);
void rf_FreeSpareTable(RF_Raid_t *);

RF_HeadSepLimit_t rf_GetDefaultHeadSepLimitDeclustered(RF_Raid_t *);
int  rf_GetDefaultNumFloatingReconBuffersDeclustered(RF_Raid_t *);

void rf_decluster_adjust_params(RF_RaidLayout_t *, RF_StripeNum_t *,
	RF_StripeCount_t *, RF_StripeCount_t *, RF_StripeNum_t *);
void rf_remap_to_spare_space(RF_RaidLayout_t *, RF_DeclusteredConfigInfo_t *,
	RF_RowCol_t, RF_StripeNum_t, RF_StripeNum_t, RF_SectorNum_t,
	RF_StripeNum_t, RF_StripeNum_t, RF_RowCol_t *, RF_StripeNum_t *);
int  rf_SetSpareTable(RF_Raid_t *, void *);
RF_ReconUnitCount_t rf_GetNumSpareRUsDeclustered(RF_Raid_t *);
d141 1
a141 1
#endif	/* ! _RF__RF_DECLUSTER_H_ */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_decluster.h,v 1.1 1998/11/13 04:20:28 oster Exp $	*/
/*	$NetBSD: rf_decluster.h,v 1.1 1998/11/13 04:20:28 oster Exp $	*/
a38 62
/*
 * :  
 * Log: rf_decluster.h,v 
 * Revision 1.20  1996/07/29 14:05:12  jimz
 * fix numPUs/numRUs confusion (everything is now numRUs)
 * clean up some commenting, return values
 *
 * Revision 1.19  1996/07/13  00:00:59  jimz
 * sanitized generalized reconstruction architecture
 * cleaned up head sep, rbuf problems
 *
 * Revision 1.18  1996/06/19  17:53:48  jimz
 * move GetNumSparePUs, InstallSpareTable ops into layout switch
 *
 * Revision 1.17  1996/06/10  11:55:47  jimz
 * Straightened out some per-array/not-per-array distinctions, fixed
 * a couple bugs related to confusion. Added shutdown lists. Removed
 * layout shutdown function (now subsumed by shutdown lists).
 *
 * Revision 1.16  1996/06/09  02:36:46  jimz
 * lots of little crufty cleanup- fixup whitespace
 * issues, comment #ifdefs, improve typing in some
 * places (esp size-related)
 *
 * Revision 1.15  1996/06/07  22:26:27  jimz
 * type-ify which_ru (RF_ReconUnitNum_t)
 *
 * Revision 1.14  1996/06/07  21:33:04  jimz
 * begin using consistent types for sector numbers,
 * stripe numbers, row+col numbers, recon unit numbers
 *
 * Revision 1.13  1996/05/27  18:56:37  jimz
 * more code cleanup
 * better typing
 * compiles in all 3 environments
 *
 * Revision 1.12  1996/05/24  01:59:45  jimz
 * another checkpoint in code cleanup for release
 * time to sync kernel tree
 *
 * Revision 1.11  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.10  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.9  1995/12/01  15:58:23  root
 * added copyright info
 *
 * Revision 1.8  1995/11/17  18:57:02  wvcii
 * added prototyping to MapParity
 *
 * Revision 1.7  1995/07/02  15:08:31  holland
 * bug fixes related to getting distributed sparing numbers
 *
 * Revision 1.6  1995/06/23  13:41:18  robby
 * updeated to prototypes in rf_layout.h
 *
 */

d50 3
a52 2
    u_int spareDisk;             /* disk to which this block is spared */
    u_int spareBlockOffsetInSUs; /* offset into spare table for that disk */
a53 1

d59 41
a99 28
  RF_StripeCount_t    groupSize;                      /* no. of stripe units per parity stripe */
  RF_RowCol_t       **LayoutTable;	                  /* the block design table */
  RF_RowCol_t       **OffsetTable;                    /* the sector offset table */
  RF_RowCol_t       **BlockTable;                     /* the block membership table */
  RF_StripeCount_t    SUsPerFullTable;                /* stripe units per full table */
  RF_StripeCount_t    SUsPerTable;                    /* stripe units per table */
  RF_StripeCount_t    PUsPerBlock;                    /* parity units per block */
  RF_StripeCount_t    SUsPerBlock;                    /* stripe units per block */
  RF_StripeCount_t    BlocksPerTable;                 /* block design tuples per table */
  RF_StripeCount_t    NumParityReps;                  /* tables per full table */
  RF_StripeCount_t    TableDepthInPUs;                /* PUs on one disk in 1 table */
  RF_StripeCount_t    FullTableDepthInPUs;            /* PUs on one disk in 1 fulltable */
  RF_StripeCount_t    FullTableLimitSUID;             /* SU where partial fulltables start */
  RF_StripeCount_t    ExtraTablesPerDisk;             /* # of tables in last fulltable */
  RF_SectorNum_t      DiskOffsetOfLastFullTableInSUs; /* disk offs of partial ft, if any */
  RF_StripeCount_t    numCompleteFullTablesPerDisk;   /* ft identifier of partial ft, if any */
  u_int               Lambda;                         /* the pair count in the block design */

  /* these are used only in the distributed-sparing case */
  RF_StripeCount_t    FullTablesPerSpareRegion;       /* # of ft's comprising 1 spare region */
  RF_StripeCount_t    TablesPerSpareRegion;           /* # of tables */
  RF_SectorCount_t    SpareSpaceDepthPerRegionInSUs;  /* spare space/disk/region */
  RF_SectorCount_t    SpareRegionDepthInSUs;          /* # of units/disk/region */
  RF_SectorNum_t      DiskOffsetOfLastSpareSpaceChunkInSUs; /* locates sp space after partial ft */
  RF_StripeCount_t    TotSparePUsPerDisk;             /* total number of spare PUs per disk */
  RF_StripeCount_t    NumCompleteSRs;
  RF_SpareTableEntry_t        **SpareTable;           /* remap table for spare space */
  char sparemap_fname[RF_SPAREMAP_NAME_LEN];          /* where to find sparemap. not used in kernel */
d102 38
a139 30
int rf_ConfigureDeclustered(RF_ShutdownList_t **listp, RF_Raid_t *raidPtr,
	RF_Config_t *cfgPtr);
int rf_ConfigureDeclusteredDS(RF_ShutdownList_t **listp, RF_Raid_t *raidPtr,
	RF_Config_t *cfgPtr);

void rf_MapSectorDeclustered(RF_Raid_t *raidPtr, RF_RaidAddr_t raidSector,
	RF_RowCol_t *row, RF_RowCol_t *col, RF_SectorNum_t *diskSector, int remap);
void rf_MapParityDeclustered(RF_Raid_t *raidPtr, RF_RaidAddr_t raidSector,
	RF_RowCol_t *row, RF_RowCol_t *col, RF_SectorNum_t *diskSector, int remap);
void rf_IdentifyStripeDeclustered(RF_Raid_t *raidPtr, RF_RaidAddr_t addr,
	RF_RowCol_t **diskids, RF_RowCol_t *outRow);
void rf_MapSIDToPSIDDeclustered(RF_RaidLayout_t *layoutPtr,
	RF_StripeNum_t stripeID, RF_StripeNum_t *psID,
	RF_ReconUnitNum_t *which_ru);
int  rf_InstallSpareTable(RF_Raid_t *raidPtr, RF_RowCol_t frow, RF_RowCol_t fcol);
void rf_FreeSpareTable(RF_Raid_t *raidPtr);

RF_HeadSepLimit_t rf_GetDefaultHeadSepLimitDeclustered(RF_Raid_t *raidPtr);
int rf_GetDefaultNumFloatingReconBuffersDeclustered(RF_Raid_t *raidPtr);

void rf_decluster_adjust_params(RF_RaidLayout_t *layoutPtr,
	RF_StripeNum_t *SUID, RF_StripeCount_t *sus_per_fulltable,
	RF_StripeCount_t *fulltable_depth, RF_StripeNum_t *base_suid);
void rf_remap_to_spare_space(
RF_RaidLayout_t *layoutPtr,
RF_DeclusteredConfigInfo_t *info, RF_RowCol_t row, RF_StripeNum_t FullTableID,
	RF_StripeNum_t TableID, RF_SectorNum_t BlockID, RF_StripeNum_t base_suid,
	RF_StripeNum_t SpareRegion, RF_RowCol_t *outCol, RF_StripeNum_t *outSU);
int rf_SetSpareTable(RF_Raid_t *raidPtr, void *data);
RF_ReconUnitCount_t rf_GetNumSpareRUsDeclustered(RF_Raid_t *raidPtr);
d141 1
a141 1
#endif /* !_RF__RF_DECLUSTER_H_ */
@

