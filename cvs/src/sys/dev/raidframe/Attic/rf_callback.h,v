head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.03;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.02.24;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.00;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.27;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.51;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_callback.h,v 1.3 2002/12/16 07:01:03 tdeval Exp $	*/
/*	$NetBSD: rf_callback.h,v 1.3 1999/02/05 00:06:06 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*****************************************************************************
 *
 * rf_callback.h -- Header file for callback.c
 *
 * The reconstruction code must manage concurrent I/Os on multiple drives.
 * It sometimes needs to suspend operation on a particular drive until some
 * condition occurs. We can't block the thread, of course, or we wouldn't
 * be able to manage our other outstanding I/Os. Instead we just suspend
 * new activity on the indicated disk, and create a callback descriptor and
 * put it someplace where it will get invoked when the condition that's
 * stalling us has cleared. When the descriptor is invoked, it will call
 * a function that will restart operation on the indicated disk.
 *
 *****************************************************************************/

#ifndef	_RF__RF_CALLBACK_H_
#define	_RF__RF_CALLBACK_H_

#include "rf_types.h"

struct RF_CallbackDesc_s {
	void		(*callbackFunc) (RF_CBParam_t);	/* Function to call. */
	RF_CBParam_t	  callbackArg;	/* Args to give to function, or */
	RF_CBParam_t	  callbackArg2;	/* just info about this callback. */
	RF_RowCol_t	  row;		/* Disk row and column IDs to */
	RF_RowCol_t	  col;		/* give to the callback func. */
	RF_CallbackDesc_t *next;	/* Next entry in list. */
};

int  rf_ConfigureCallback(RF_ShutdownList_t **);
RF_CallbackDesc_t *rf_AllocCallbackDesc(void);
void rf_FreeCallbackDesc(RF_CallbackDesc_t *);

#endif	/* !_RF__RF_CALLBACK_H_ */
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_callback.h,v 1.2 1999/02/16 00:02:24 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_callback.h,v 1.1 1999/01/11 14:29:00 niklas Exp $	*/
d3 1
d31 1
a31 1
/*****************************************************************************************
d33 1
a33 1
 * callback.h -- header file for callback.c
d35 4
a38 4
 * the reconstruction code must manage concurrent I/Os on multiple drives.
 * it sometimes needs to suspend operation on a particular drive until some
 * condition occurs.  we can't block the thread, of course, or we wouldn't
 * be able to manage our other outstanding I/Os.  Instead we just suspend
d41 1
a41 1
 * stalling us has cleared.  When the descriptor is invoked, it will call
d44 1
a44 1
 ****************************************************************************************/
d46 2
a47 2
#ifndef _RF__RF_CALLBACK_H_
#define _RF__RF_CALLBACK_H_
d52 6
a57 8
	void    (*callbackFunc) (RF_CBParam_t);	/* function to call */
	RF_CBParam_t callbackArg;	/* args to give to function, or just
					 * info about this callback  */
	RF_CBParam_t callbackArg2;
	RF_RowCol_t row;	/* disk row and column IDs to give to the
				 * callback func */
	RF_RowCol_t col;
	RF_CallbackDesc_t *next;/* next entry in list */
d60 1
a60 1
int     rf_ConfigureCallback(RF_ShutdownList_t ** listp);
d62 1
a62 1
void    rf_FreeCallbackDesc(RF_CallbackDesc_t * p);
d64 1
a64 1
#endif				/* !_RF__RF_CALLBACK_H_ */
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/*****************************************************************************
d32 1
a32 1
 * rf_callback.h -- Header file for callback.c
d34 4
a37 4
 * The reconstruction code must manage concurrent I/Os on multiple drives.
 * It sometimes needs to suspend operation on a particular drive until some
 * condition occurs. We can't block the thread, of course, or we wouldn't
 * be able to manage our other outstanding I/Os. Instead we just suspend
d40 1
a40 1
 * stalling us has cleared. When the descriptor is invoked, it will call
d43 1
a43 1
 *****************************************************************************/
d45 2
a46 2
#ifndef	_RF__RF_CALLBACK_H_
#define	_RF__RF_CALLBACK_H_
d51 8
a58 6
	void		(*callbackFunc) (RF_CBParam_t);	/* Function to call. */
	RF_CBParam_t	  callbackArg;	/* Args to give to function, or */
	RF_CBParam_t	  callbackArg2;	/* just info about this callback. */
	RF_RowCol_t	  row;		/* Disk row and column IDs to */
	RF_RowCol_t	  col;		/* give to the callback func. */
	RF_CallbackDesc_t *next;	/* Next entry in list. */
d61 1
a61 1
int  rf_ConfigureCallback(RF_ShutdownList_t **);
d63 1
a63 1
void rf_FreeCallbackDesc(RF_CallbackDesc_t *);
d65 1
a65 1
#endif	/* !_RF__RF_CALLBACK_H_ */
@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/*****************************************************************************
d32 1
a32 1
 * rf_callback.h -- Header file for callback.c
d34 4
a37 4
 * The reconstruction code must manage concurrent I/Os on multiple drives.
 * It sometimes needs to suspend operation on a particular drive until some
 * condition occurs. We can't block the thread, of course, or we wouldn't
 * be able to manage our other outstanding I/Os. Instead we just suspend
d40 1
a40 1
 * stalling us has cleared. When the descriptor is invoked, it will call
d43 1
a43 1
 *****************************************************************************/
d45 2
a46 2
#ifndef	_RF__RF_CALLBACK_H_
#define	_RF__RF_CALLBACK_H_
d51 8
a58 6
	void		(*callbackFunc) (RF_CBParam_t);	/* Function to call. */
	RF_CBParam_t	  callbackArg;	/* Args to give to function, or */
	RF_CBParam_t	  callbackArg2;	/* just info about this callback. */
	RF_RowCol_t	  row;		/* Disk row and column IDs to */
	RF_RowCol_t	  col;		/* give to the callback func. */
	RF_CallbackDesc_t *next;	/* Next entry in list. */
d61 1
a61 1
int  rf_ConfigureCallback(RF_ShutdownList_t **);
d63 1
a63 1
void rf_FreeCallbackDesc(RF_CallbackDesc_t *);
d65 1
a65 1
#endif	/* !_RF__RF_CALLBACK_H_ */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_callback.h,v 1.1 1998/11/13 04:20:26 oster Exp $	*/
/*	$NetBSD: rf_callback.h,v 1.1 1998/11/13 04:20:26 oster Exp $	*/
a44 29
/* :  
 * Log: rf_callback.h,v 
 * Revision 1.8  1996/08/01 15:57:28  jimz
 * minor cleanup
 *
 * Revision 1.7  1996/07/27  23:36:08  jimz
 * Solaris port of simulator
 *
 * Revision 1.6  1996/06/10  11:55:47  jimz
 * Straightened out some per-array/not-per-array distinctions, fixed
 * a couple bugs related to confusion. Added shutdown lists. Removed
 * layout shutdown function (now subsumed by shutdown lists).
 *
 * Revision 1.5  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.4  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.3  1996/05/17  16:30:46  jimz
 * add prototypes
 *
 * Revision 1.2  1995/12/01  15:15:55  root
 * added copyright info
 *
 */

d51 8
a58 6
  void              (*callbackFunc)(RF_CBParam_t); /* function to call */
  RF_CBParam_t        callbackArg;     /* args to give to function, or just info about this callback  */
  RF_CBParam_t        callbackArg2;
  RF_RowCol_t         row;             /* disk row and column IDs to give to the callback func */
  RF_RowCol_t         col;
  RF_CallbackDesc_t  *next;            /* next entry in list */
d61 3
a63 3
int                 rf_ConfigureCallback(RF_ShutdownList_t **listp);
RF_CallbackDesc_t  *rf_AllocCallbackDesc(void);
void                rf_FreeCallbackDesc(RF_CallbackDesc_t *p);
d65 1
a65 1
#endif /* !_RF__RF_CALLBACK_H_ */
@

