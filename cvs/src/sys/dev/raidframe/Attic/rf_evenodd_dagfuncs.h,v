head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.04;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.02.45;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.22;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.28;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.52;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_evenodd_dagfuncs.h,v 1.3 2002/12/16 07:01:04 tdeval Exp $	*/
/*	$NetBSD: rf_evenodd_dagfuncs.h,v 1.2 1999/02/05 00:06:11 oster Exp $	*/

/*
 * rf_evenodd_dagfuncs.h
 */
/*
 * Copyright (c) 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chang-Ming Wu
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#ifndef	_RF__RF_EVENODD_DAGFUNCS_H_
#define	_RF__RF_EVENODD_DAGFUNCS_H_

extern RF_RedFuncs_t rf_EOSmallWriteEFuncs;
extern RF_RedFuncs_t rf_EOSmallWritePFuncs;
extern RF_RedFuncs_t rf_eoERecoveryFuncs;
extern RF_RedFuncs_t rf_eoPRecoveryFuncs;
extern RF_RedFuncs_t rf_eoERecoveryFuncs;

int  rf_RegularPEFunc(RF_DagNode_t *);
int  rf_RegularONEFunc(RF_DagNode_t *);
int  rf_SimpleONEFunc(RF_DagNode_t *);
void rf_RegularESubroutine(RF_DagNode_t *, char *);
int  rf_RegularEFunc(RF_DagNode_t *);
void rf_DegrESubroutine(RF_DagNode_t *, char *);
int  rf_Degraded_100_EOFunc(RF_DagNode_t *);
void rf_e_EncOneSect(RF_RowCol_t, char *, RF_RowCol_t, char *, int);
void rf_e_encToBuf(RF_Raid_t *, RF_RowCol_t, char *, RF_RowCol_t, char *, int);
int  rf_RecoveryEFunc(RF_DagNode_t *);
int  rf_EO_DegradedWriteEFunc(RF_DagNode_t *);
void rf_doubleEOdecode(RF_Raid_t *, char **, char **, RF_RowCol_t *,
	char *, char *);
int  rf_EvenOddDoubleRecoveryFunc(RF_DagNode_t *);
int  rf_EOWriteDoubleRecoveryFunc(RF_DagNode_t *);

#define	rf_EUCol(_layoutPtr_,_addr_)					\
	((_addr_) % ((_layoutPtr_)->dataSectorsPerStripe)) /		\
	((_layoutPtr_)->sectorsPerStripeUnit)

#define	rf_EO_Mod(_int1_,_int2_)					\
	(((_int1_) < 0) ? (((_int1_) + (_int2_)) % (_int2_))		\
			: ((_int1_) % (_int2_)))

#define	rf_OffsetOfNextEUBoundary(_offset_, sec_per_eu)			\
	((_offset_) / (sec_per_eu) + 1) * (sec_per_eu)

#define	RF_EO_MATRIX_DIM	17

/*
 * RF_EO_MATRIX_DIM should be a prime number: and "bytesPerSector" should be
 * divisible by (RF_EO_MATRIX_DIM - 1) to fully encode and utilize the space
 * in a sector, this number could also be 17. That later case doesn't apply
 * for disk array larger than 17 columns totally.
 */

#endif	/* !_RF__RF_EVENODD_DAGFUNCS_H_ */
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_evenodd_dagfuncs.h,v 1.2 1999/02/16 00:02:45 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_evenodd_dagfuncs.h,v 1.1 1999/01/11 14:29:22 niklas Exp $	*/
d3 1
d34 2
a35 2
#ifndef _RF__RF_EVENODD_DAGFUNCS_H_
#define _RF__RF_EVENODD_DAGFUNCS_H_
d43 23
a65 26
int     rf_RegularPEFunc(RF_DagNode_t * node);
int     rf_RegularONEFunc(RF_DagNode_t * node);
int     rf_SimpleONEFunc(RF_DagNode_t * node);
void    rf_RegularESubroutine(RF_DagNode_t * node, char *ebuf);
int     rf_RegularEFunc(RF_DagNode_t * node);
void    rf_DegrESubroutine(RF_DagNode_t * node, char *ebuf);
int     rf_Degraded_100_EOFunc(RF_DagNode_t * node);
void 
rf_e_EncOneSect(RF_RowCol_t srcLogicCol, char *srcSecbuf,
    RF_RowCol_t destLogicCol, char *destSecbuf, int bytesPerSector);
void 
rf_e_encToBuf(RF_Raid_t * raidPtr, RF_RowCol_t srcLogicCol,
    char *srcbuf, RF_RowCol_t destLogicCol, char *destbuf, int numSector);
int     rf_RecoveryEFunc(RF_DagNode_t * node);
int     rf_EO_DegradedWriteEFunc(RF_DagNode_t * node);
void 
rf_doubleEOdecode(RF_Raid_t * raidPtr, char **rrdbuf, char **dest,
    RF_RowCol_t * fcol, char *pbuf, char *ebuf);
int     rf_EvenOddDoubleRecoveryFunc(RF_DagNode_t * node);
int     rf_EOWriteDoubleRecoveryFunc(RF_DagNode_t * node);

#define rf_EUCol(_layoutPtr_, _addr_ ) \
( (_addr_)%( (_layoutPtr_)->dataSectorsPerStripe ) )/((_layoutPtr_)->sectorsPerStripeUnit)

#define rf_EO_Mod( _int1_, _int2_ ) \
( ((_int1_) < 0)? (((_int1_)+(_int2_))%(_int2_)) : (_int1_)%(_int2_) )
d67 2
a68 1
#define rf_OffsetOfNextEUBoundary(_offset_, sec_per_eu) ((_offset_)/(sec_per_eu) + 1)*(sec_per_eu)
d70 1
a70 1
#define RF_EO_MATRIX_DIM 17
d74 2
a75 2
 * dividable by ( RF_EO_MATRIX_DIM - 1) to fully encode and utilize the space
 * in a sector, this number could also be 17. Tha later case doesn't apply
d79 1
a79 1
#endif				/* !_RF__RF_EVENODD_DAGFUNCS_H_ */
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d33 2
a34 2
#ifndef	_RF__RF_EVENODD_DAGFUNCS_H_
#define	_RF__RF_EVENODD_DAGFUNCS_H_
d42 26
a67 23
int  rf_RegularPEFunc(RF_DagNode_t *);
int  rf_RegularONEFunc(RF_DagNode_t *);
int  rf_SimpleONEFunc(RF_DagNode_t *);
void rf_RegularESubroutine(RF_DagNode_t *, char *);
int  rf_RegularEFunc(RF_DagNode_t *);
void rf_DegrESubroutine(RF_DagNode_t *, char *);
int  rf_Degraded_100_EOFunc(RF_DagNode_t *);
void rf_e_EncOneSect(RF_RowCol_t, char *, RF_RowCol_t, char *, int);
void rf_e_encToBuf(RF_Raid_t *, RF_RowCol_t, char *, RF_RowCol_t, char *, int);
int  rf_RecoveryEFunc(RF_DagNode_t *);
int  rf_EO_DegradedWriteEFunc(RF_DagNode_t *);
void rf_doubleEOdecode(RF_Raid_t *, char **, char **, RF_RowCol_t *,
	char *, char *);
int  rf_EvenOddDoubleRecoveryFunc(RF_DagNode_t *);
int  rf_EOWriteDoubleRecoveryFunc(RF_DagNode_t *);

#define	rf_EUCol(_layoutPtr_,_addr_)					\
	((_addr_) % ((_layoutPtr_)->dataSectorsPerStripe)) /		\
	((_layoutPtr_)->sectorsPerStripeUnit)

#define	rf_EO_Mod(_int1_,_int2_)					\
	(((_int1_) < 0) ? (((_int1_) + (_int2_)) % (_int2_))		\
			: ((_int1_) % (_int2_)))
d69 1
a69 2
#define	rf_OffsetOfNextEUBoundary(_offset_, sec_per_eu)			\
	((_offset_) / (sec_per_eu) + 1) * (sec_per_eu)
d71 1
a71 1
#define	RF_EO_MATRIX_DIM	17
d75 2
a76 2
 * divisible by (RF_EO_MATRIX_DIM - 1) to fully encode and utilize the space
 * in a sector, this number could also be 17. That later case doesn't apply
d80 1
a80 1
#endif	/* !_RF__RF_EVENODD_DAGFUNCS_H_ */
@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d33 2
a34 2
#ifndef	_RF__RF_EVENODD_DAGFUNCS_H_
#define	_RF__RF_EVENODD_DAGFUNCS_H_
d42 26
a67 23
int  rf_RegularPEFunc(RF_DagNode_t *);
int  rf_RegularONEFunc(RF_DagNode_t *);
int  rf_SimpleONEFunc(RF_DagNode_t *);
void rf_RegularESubroutine(RF_DagNode_t *, char *);
int  rf_RegularEFunc(RF_DagNode_t *);
void rf_DegrESubroutine(RF_DagNode_t *, char *);
int  rf_Degraded_100_EOFunc(RF_DagNode_t *);
void rf_e_EncOneSect(RF_RowCol_t, char *, RF_RowCol_t, char *, int);
void rf_e_encToBuf(RF_Raid_t *, RF_RowCol_t, char *, RF_RowCol_t, char *, int);
int  rf_RecoveryEFunc(RF_DagNode_t *);
int  rf_EO_DegradedWriteEFunc(RF_DagNode_t *);
void rf_doubleEOdecode(RF_Raid_t *, char **, char **, RF_RowCol_t *,
	char *, char *);
int  rf_EvenOddDoubleRecoveryFunc(RF_DagNode_t *);
int  rf_EOWriteDoubleRecoveryFunc(RF_DagNode_t *);

#define	rf_EUCol(_layoutPtr_,_addr_)					\
	((_addr_) % ((_layoutPtr_)->dataSectorsPerStripe)) /		\
	((_layoutPtr_)->sectorsPerStripeUnit)

#define	rf_EO_Mod(_int1_,_int2_)					\
	(((_int1_) < 0) ? (((_int1_) + (_int2_)) % (_int2_))		\
			: ((_int1_) % (_int2_)))
d69 1
a69 2
#define	rf_OffsetOfNextEUBoundary(_offset_, sec_per_eu)			\
	((_offset_) / (sec_per_eu) + 1) * (sec_per_eu)
d71 1
a71 1
#define	RF_EO_MATRIX_DIM	17
d75 2
a76 2
 * divisible by (RF_EO_MATRIX_DIM - 1) to fully encode and utilize the space
 * in a sector, this number could also be 17. That later case doesn't apply
d80 1
a80 1
#endif	/* !_RF__RF_EVENODD_DAGFUNCS_H_ */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_evenodd_dagfuncs.h,v 1.1 1998/11/13 04:20:29 oster Exp $	*/
/*	$NetBSD: rf_evenodd_dagfuncs.h,v 1.1 1998/11/13 04:20:29 oster Exp $	*/
d42 20
a61 17
int rf_RegularPEFunc(RF_DagNode_t *node);
int rf_RegularONEFunc(RF_DagNode_t *node);
int rf_SimpleONEFunc(RF_DagNode_t *node);
void rf_RegularESubroutine(RF_DagNode_t *node, char *ebuf);
int rf_RegularEFunc(RF_DagNode_t *node);
void rf_DegrESubroutine(RF_DagNode_t *node, char *ebuf);
int rf_Degraded_100_EOFunc(RF_DagNode_t *node);
void rf_e_EncOneSect(RF_RowCol_t srcLogicCol, char *srcSecbuf,
  RF_RowCol_t destLogicCol, char *destSecbuf, int bytesPerSector);
void rf_e_encToBuf(RF_Raid_t *raidPtr, RF_RowCol_t srcLogicCol,
  char *srcbuf, RF_RowCol_t destLogicCol, char *destbuf, int numSector);
int rf_RecoveryEFunc(RF_DagNode_t *node);
int rf_EO_DegradedWriteEFunc(RF_DagNode_t *node);
void rf_doubleEOdecode(RF_Raid_t *raidPtr, char **rrdbuf, char **dest,
  RF_RowCol_t *fcol, char *pbuf, char *ebuf);
int rf_EvenOddDoubleRecoveryFunc(RF_DagNode_t *node);
int rf_EOWriteDoubleRecoveryFunc(RF_DagNode_t *node);
d80 1
a80 1
#endif /* !_RF__RF_EVENODD_DAGFUNCS_H_ */
@

