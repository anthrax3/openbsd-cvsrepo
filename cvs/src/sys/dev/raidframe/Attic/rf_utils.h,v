head	1.6;
access;
symbols
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.38
	OPENBSD_5_0:1.5.0.36
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.34
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.32
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.28
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.30
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.26
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.24
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.22
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.20
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.18
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.16
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.16
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.14
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.12
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.10
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.2
	SMP_BASE:1.4
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2012.04.06.15.53.59;	author jsing;	state dead;
branches;
next	1.5;

1.5
date	2002.12.16.07.01.05;	author tdeval;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.07.14.50.23;	author peter;	state Exp;
branches
	1.4.2.1
	1.4.12.1;
next	1.3;

1.3
date	99.08.03.13.56.38;	author peter;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.03.33;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.29.55;	author niklas;	state Exp;
branches;
next	;

1.4.2.1
date	2003.03.28.00.38.29;	author niklas;	state Exp;
branches;
next	;

1.4.12.1
date	2003.05.19.22.21.53;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_utils.h,v 1.5 2002/12/16 07:01:05 tdeval Exp $	*/
/*	$NetBSD: rf_utils.h,v 1.4 1999/08/13 03:26:55 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/****************************************
 *
 * rf_utils.c -- Header file for utils.c
 *
 ****************************************/


#ifndef	_RF__RF_UTILS_H_
#define	_RF__RF_UTILS_H_

#include "rf_types.h"
#include "rf_alloclist.h"
#include "rf_threadstuff.h"

char *rf_find_non_white(char *);
char *rf_find_white(char *);
RF_RowCol_t **rf_make_2d_array(int, int, RF_AllocListElem_t *);
RF_RowCol_t *rf_make_1d_array(int, RF_AllocListElem_t *);
void  rf_free_2d_array(RF_RowCol_t **, int, int);
void  rf_free_1d_array(RF_RowCol_t *, int);
int   rf_gcd(int, int);
int   rf_atoi(char *);
int   rf_htoi(char *);

#define	RF_USEC_PER_SEC			1000000
#define	RF_TIMEVAL_TO_US(_t_)						\
	(((_t_).tv_sec) * RF_USEC_PER_SEC + (_t_).tv_usec)

#define	RF_TIMEVAL_DIFF(_start_,_end_,_diff_)				\
do {									\
	if ((_end_)->tv_usec < (_start_)->tv_usec) {			\
		(_diff_)->tv_usec = ((_end_)->tv_usec +			\
		    RF_USEC_PER_SEC) - (_start_)->tv_usec;		\
		(_diff_)->tv_sec = ((_end_)->tv_sec-1) -		\
		    (_start_)->tv_sec;					\
	}								\
	else {								\
		(_diff_)->tv_usec = (_end_)->tv_usec -			\
		    (_start_)->tv_usec;					\
		(_diff_)->tv_sec  = (_end_)->tv_sec  -			\
		    (_start_)->tv_sec;					\
	}								\
} while (0)

#endif	/* !_RF__RF_UTILS_H_ */
@


1.5
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_utils.h,v 1.4 2000/01/07 14:50:23 peter Exp $	*/
@


1.4
log
@sync with work by Greg Oster on NetBSD

Please note: This update has *only* been tested on i386 with IDE
disks. Could someone with a spare box please make sure all is OK with
SCSI and maybe other arches ? sparc testing will follow locally.

* remove rf_sys.h
* many changes to make it more stable
* some performance increases
* All raid threads now get their own kernel process and the calling
  raidctl(8) program will show status progress through a meter.
* In theory FFS_SOFTUPDATES and RAIDframe will now work together - NOT
  TESTED YET

See http://www.cs.usask.ca/staff/oster/raid.html

This updates include Greg's changes to Jan 4th 2000.

TODO:
* some odd behaviour when running raictl -c on an already config'ed
  raid set - problem founf, fix being done
* progress meter is in raidctl(8) - seperate commit, but could do with
  sync'ing with OpenBSD ftp version
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_utils.h,v 1.3 1999/08/03 13:56:38 peter Exp $	*/
d3 1
d31 1
a31 1
/***************************************
d33 1
a33 1
 * rf_utils.c -- header file for utils.c
d35 1
a35 1
 ***************************************/
d38 2
a39 2
#ifndef _RF__RF_UTILS_H_
#define _RF__RF_UTILS_H_
d45 29
a73 25
char   *rf_find_non_white(char *p);
char   *rf_find_white(char *p);
RF_RowCol_t **rf_make_2d_array(int b, int k, RF_AllocListElem_t * allocList);
RF_RowCol_t *rf_make_1d_array(int c, RF_AllocListElem_t * allocList);
void    rf_free_2d_array(RF_RowCol_t ** a, int b, int k);
void    rf_free_1d_array(RF_RowCol_t * a, int n);
int     rf_gcd(int m, int n);
int     rf_atoi(char *p);
int     rf_htoi(char *p);

#define RF_USEC_PER_SEC 1000000
#define RF_TIMEVAL_TO_US(_t_) (((_t_).tv_sec) \
                * RF_USEC_PER_SEC + (_t_).tv_usec)

#define RF_TIMEVAL_DIFF(_start_,_end_,_diff_) { \
	if ((_end_)->tv_usec < (_start_)->tv_usec) { \
		(_diff_)->tv_usec = ((_end_)->tv_usec + RF_USEC_PER_SEC) \
				- (_start_)->tv_usec; \
		(_diff_)->tv_sec = ((_end_)->tv_sec-1) - (_start_)->tv_sec; \
	} \
	else { \
		(_diff_)->tv_usec = (_end_)->tv_usec - (_start_)->tv_usec; \
		(_diff_)->tv_sec  = (_end_)->tv_sec  - (_start_)->tv_sec; \
	} \
}
d75 1
a75 1
#endif				/* !_RF__RF_UTILS_H_ */
@


1.4.12.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/****************************************
d32 1
a32 1
 * rf_utils.c -- Header file for utils.c
d34 1
a34 1
 ****************************************/
d37 2
a38 2
#ifndef	_RF__RF_UTILS_H_
#define	_RF__RF_UTILS_H_
d44 25
a68 29
char *rf_find_non_white(char *);
char *rf_find_white(char *);
RF_RowCol_t **rf_make_2d_array(int, int, RF_AllocListElem_t *);
RF_RowCol_t *rf_make_1d_array(int, RF_AllocListElem_t *);
void  rf_free_2d_array(RF_RowCol_t **, int, int);
void  rf_free_1d_array(RF_RowCol_t *, int);
int   rf_gcd(int, int);
int   rf_atoi(char *);
int   rf_htoi(char *);

#define	RF_USEC_PER_SEC			1000000
#define	RF_TIMEVAL_TO_US(_t_)						\
	(((_t_).tv_sec) * RF_USEC_PER_SEC + (_t_).tv_usec)

#define	RF_TIMEVAL_DIFF(_start_,_end_,_diff_)				\
do {									\
	if ((_end_)->tv_usec < (_start_)->tv_usec) {			\
		(_diff_)->tv_usec = ((_end_)->tv_usec +			\
		    RF_USEC_PER_SEC) - (_start_)->tv_usec;		\
		(_diff_)->tv_sec = ((_end_)->tv_sec-1) -		\
		    (_start_)->tv_sec;					\
	}								\
	else {								\
		(_diff_)->tv_usec = (_end_)->tv_usec -			\
		    (_start_)->tv_usec;					\
		(_diff_)->tv_sec  = (_end_)->tv_sec  -			\
		    (_start_)->tv_sec;					\
	}								\
} while (0)
d70 1
a70 1
#endif	/* !_RF__RF_UTILS_H_ */
@


1.4.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/****************************************
d32 1
a32 1
 * rf_utils.c -- Header file for utils.c
d34 1
a34 1
 ****************************************/
d37 2
a38 2
#ifndef	_RF__RF_UTILS_H_
#define	_RF__RF_UTILS_H_
d44 25
a68 29
char *rf_find_non_white(char *);
char *rf_find_white(char *);
RF_RowCol_t **rf_make_2d_array(int, int, RF_AllocListElem_t *);
RF_RowCol_t *rf_make_1d_array(int, RF_AllocListElem_t *);
void  rf_free_2d_array(RF_RowCol_t **, int, int);
void  rf_free_1d_array(RF_RowCol_t *, int);
int   rf_gcd(int, int);
int   rf_atoi(char *);
int   rf_htoi(char *);

#define	RF_USEC_PER_SEC			1000000
#define	RF_TIMEVAL_TO_US(_t_)						\
	(((_t_).tv_sec) * RF_USEC_PER_SEC + (_t_).tv_usec)

#define	RF_TIMEVAL_DIFF(_start_,_end_,_diff_)				\
do {									\
	if ((_end_)->tv_usec < (_start_)->tv_usec) {			\
		(_diff_)->tv_usec = ((_end_)->tv_usec +			\
		    RF_USEC_PER_SEC) - (_start_)->tv_usec;		\
		(_diff_)->tv_sec = ((_end_)->tv_sec-1) -		\
		    (_start_)->tv_sec;					\
	}								\
	else {								\
		(_diff_)->tv_usec = (_end_)->tv_usec -			\
		    (_start_)->tv_usec;					\
		(_diff_)->tv_sec  = (_end_)->tv_sec  -			\
		    (_start_)->tv_sec;					\
	}								\
} while (0)
d70 1
a70 1
#endif	/* !_RF__RF_UTILS_H_ */
@


1.3
log
@* rf_reconstruct.c: adopt nilkas' suggestion regard statics and
__inline__ - this is a proof of concept and will cover the raidframe
source as a whole over coming updates. Update namespace of function to
prefix with rf_ - comments again welcome.

* overall: rework the macros in rf_etimer.h and the resultant changes
to their use to count microseconds and not clock ticks. Restore the code
in rf_revent.c to a similar strcuture to before the previous commit,
and use the system timers to govern resource usage.

Tested with local i386/IDE and the reconstruction of a disk in my
array - performance has improved for reconstruction at no noticable
CPU cost.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_utils.h,v 1.2 1999/02/16 00:03:33 niklas Exp $	*/
/*	$NetBSD: rf_utils.h,v 1.3 1999/02/05 00:06:18 oster Exp $	*/
d55 3
a57 1
#define RF_TIMEVAL_TO_US(_t_) (((_t_).tv_sec) * RF_USEC_PER_SEC + (_t_).tv_usec)
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_utils.h,v 1.1 1999/01/11 14:29:55 niklas Exp $	*/
d55 1
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_utils.h,v 1.1 1998/11/13 04:20:35 oster Exp $	*/
/*	$NetBSD: rf_utils.h,v 1.1 1998/11/13 04:20:35 oster Exp $	*/
a35 23
/* :  
 * Log: rf_utils.h,v 
 * Revision 1.7  1996/06/07 21:33:04  jimz
 * begin using consistent types for sector numbers,
 * stripe numbers, row+col numbers, recon unit numbers
 *
 * Revision 1.6  1996/06/02  17:31:48  jimz
 * Moved a lot of global stuff into array structure, where it belongs.
 * Fixed up paritylogging, pss modules in this manner. Some general
 * code cleanup. Removed lots of dead code, some dead files.
 *
 * Revision 1.5  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.4  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.3  1995/12/06  15:17:53  root
 * added copyright info
 *
 */
d44 9
a52 9
char *rf_find_non_white(char *p);
char *rf_find_white(char *p);
RF_RowCol_t **rf_make_2d_array(int b, int k, RF_AllocListElem_t *allocList);
RF_RowCol_t *rf_make_1d_array(int c, RF_AllocListElem_t *allocList);
void rf_free_2d_array(RF_RowCol_t **a, int b, int k);
void rf_free_1d_array(RF_RowCol_t *a, int n);
int rf_gcd(int m, int n);
int rf_atoi(char *p);
int rf_htoi(char *p);
d67 1
a67 1
#endif /* !_RF__RF_UTILS_H_ */
@

