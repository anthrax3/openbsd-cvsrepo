head	1.6;
access;
symbols
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.38
	OPENBSD_5_0:1.5.0.36
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.34
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.32
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.28
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.30
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.26
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.24
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.22
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.20
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.18
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.16
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.16
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.14
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.12
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.10
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.2
	SMP_BASE:1.4
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.5;

1.5
date	2002.12.16.07.01.04;	author tdeval;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.07.14.50.22;	author peter;	state Exp;
branches
	1.4.2.1
	1.4.12.1;
next	1.3;

1.3
date	99.08.04.13.10.55;	author peter;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.03.03;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.29.33;	author niklas;	state Exp;
branches;
next	;

1.4.2.1
date	2003.03.28.00.38.28;	author niklas;	state Exp;
branches;
next	;

1.4.12.1
date	2003.05.19.22.21.52;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_optnames.h,v 1.5 2002/12/16 07:01:04 tdeval Exp $	*/
/*	$NetBSD: rf_optnames.h,v 1.6 1999/12/07 02:54:08 oster Exp $	*/

/*
 * rf_optnames.h
 */
/*
 * Copyright (c) 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Jim Zelenka
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*
 * Don't protect against multiple inclusion here- we actually want this.
 */

RF_DBG_OPTION(accessDebug, 0)
RF_DBG_OPTION(accessTraceBufSize, 0)
RF_DBG_OPTION(cscanDebug, 0)		/* Debug CSCAN sorting. */
RF_DBG_OPTION(dagDebug, 0)
RF_DBG_OPTION(debugPrintUseBuffer, 0)
RF_DBG_OPTION(degDagDebug, 0)
RF_DBG_OPTION(disableAsyncAccs, 0)
RF_DBG_OPTION(diskDebug, 0)
RF_DBG_OPTION(enableAtomicRMW, 0)	/*
					 * This debug var enables locking of
					 * the disk arm during small-write
					 * operations. Setting this variable
					 * to anything other than 0 will
					 * result in deadlock. (wvcii)
					 */
RF_DBG_OPTION(engineDebug, 0)
RF_DBG_OPTION(fifoDebug, 0)		/* Debug fifo queueing. */
RF_DBG_OPTION(floatingRbufDebug, 0)
RF_DBG_OPTION(forceHeadSepLimit, -1)
RF_DBG_OPTION(forceNumFloatingReconBufs, -1)	/*
						 * Wire down number of extra
						 * recon buffers to use.
						 */
RF_DBG_OPTION(keepAccTotals, 0)		/* Turn on keep_acc_totals. */
RF_DBG_OPTION(lockTableSize, RF_DEFAULT_LOCK_TABLE_SIZE)
RF_DBG_OPTION(mapDebug, 0)
RF_DBG_OPTION(maxNumTraces, -1)

RF_DBG_OPTION(memChunkDebug, 0)
RF_DBG_OPTION(memDebug, 0)
RF_DBG_OPTION(memDebugAddress, 0)
RF_DBG_OPTION(numBufsToAccumulate, 1)	/*
					 * Number of buffers to accumulate
					 * before doing XOR.
					 */
RF_DBG_OPTION(prReconSched, 0)
RF_DBG_OPTION(printDAGsDebug, 0)
RF_DBG_OPTION(printStatesDebug, 0)
RF_DBG_OPTION(protectedSectors, 64L)	/*
					 * # of sectors at start of disk to
					 * exclude from RAID address space.
					 */
RF_DBG_OPTION(pssDebug, 0)
RF_DBG_OPTION(queueDebug, 0)
RF_DBG_OPTION(quiesceDebug, 0)
RF_DBG_OPTION(raidSectorOffset, 0)	/*
					 * Added to all incoming sectors to
					 * debug alignment problems.
					 */
RF_DBG_OPTION(reconDebug, 0)
RF_DBG_OPTION(reconbufferDebug, 0)
RF_DBG_OPTION(scanDebug, 0)		/* Debug SCAN sorting. */
RF_DBG_OPTION(showXorCallCounts, 0)	/* Show n-way Xor call counts. */
RF_DBG_OPTION(shutdownDebug, 0)		/* Show shutdown calls. */
RF_DBG_OPTION(sizePercentage, 100)
RF_DBG_OPTION(sstfDebug, 0)		/*
					 * Turn on debugging info for sstf
					 * queueing.
					 */
RF_DBG_OPTION(stripeLockDebug, 0)
RF_DBG_OPTION(suppressLocksAndLargeWrites, 0)
RF_DBG_OPTION(suppressTraceDelays, 0)
RF_DBG_OPTION(useMemChunks, 1)
RF_DBG_OPTION(validateDAGDebug, 0)
RF_DBG_OPTION(validateVisitedDebug, 1)	/* XXX Turn to zero by default ? */
RF_DBG_OPTION(verifyParityDebug, 0)
RF_DBG_OPTION(debugKernelAccess, 0)	/* DoAccessKernel debugging. */

#if	RF_INCLUDE_PARITYLOGGING > 0
RF_DBG_OPTION(forceParityLogReint, 0)
RF_DBG_OPTION(numParityRegions, 0)	/* Number of regions in the array. */
RF_DBG_OPTION(numReintegrationThreads, 1)
RF_DBG_OPTION(parityLogDebug, 0)	/*
					 * If nonzero, enables debugging of
					 * parity logging.
					 */
RF_DBG_OPTION(totalInCoreLogCapacity, 1024 * 1024)	/*
							 * Target bytes
							 * available for in-core
							 * logs.
							 */
#endif	/* RF_INCLUDE_PARITYLOGGING > 0 */

@


1.5
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_optnames.h,v 1.4 2000/01/07 14:50:22 peter Exp $	*/
@


1.4
log
@sync with work by Greg Oster on NetBSD

Please note: This update has *only* been tested on i386 with IDE
disks. Could someone with a spare box please make sure all is OK with
SCSI and maybe other arches ? sparc testing will follow locally.

* remove rf_sys.h
* many changes to make it more stable
* some performance increases
* All raid threads now get their own kernel process and the calling
  raidctl(8) program will show status progress through a meter.
* In theory FFS_SOFTUPDATES and RAIDframe will now work together - NOT
  TESTED YET

See http://www.cs.usask.ca/staff/oster/raid.html

This updates include Greg's changes to Jan 4th 2000.

TODO:
* some odd behaviour when running raictl -c on an already config'ed
  raid set - problem founf, fix being done
* progress meter is in raidctl(8) - seperate commit, but could do with
  sync'ing with OpenBSD ftp version
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_optnames.h,v 1.3 1999/08/04 13:10:55 peter Exp $	*/
d3 1
d40 1
a40 1
RF_DBG_OPTION(cscanDebug, 0)	/* debug CSCAN sorting */
d46 2
a47 1
RF_DBG_OPTION(enableAtomicRMW, 0)	/* this debug var enables locking of
d49 1
a49 1
					 * operations.  Setting this variable
d51 2
a52 1
					 * result in deadlock.  (wvcii) */
d54 1
a54 1
RF_DBG_OPTION(fifoDebug, 0)	/* debug fifo queueing */
d57 5
a61 4
RF_DBG_OPTION(forceNumFloatingReconBufs, -1)		/* wire down number of
							 * extra recon buffers
							 * to use */
RF_DBG_OPTION(keepAccTotals, 0)		/* turn on keep_acc_totals */
d69 4
a72 2
RF_DBG_OPTION(numBufsToAccumulate, 1)		/* number of buffers to
						 * accumulate before doing XOR */
d76 4
a79 3
RF_DBG_OPTION(protectedSectors, 64L)		/* # of sectors at start of
						 * disk to exclude from RAID
						 * address space */
d83 4
a86 2
RF_DBG_OPTION(raidSectorOffset, 0)	/* added to all incoming sectors to
					 * debug alignment problems */
d89 3
a91 3
RF_DBG_OPTION(scanDebug, 0)	/* debug SCAN sorting */
RF_DBG_OPTION(showXorCallCounts, 0)	/* show n-way Xor call counts */
RF_DBG_OPTION(shutdownDebug, 0)		/* show shutdown calls */
d93 4
a96 1
RF_DBG_OPTION(sstfDebug, 0)	/* turn on debugging info for sstf queueing */
d102 1
a102 2
RF_DBG_OPTION(validateVisitedDebug, 1)		/* XXX turn to zero by
						 * default? */
d104 1
a104 1
RF_DBG_OPTION(debugKernelAccess, 0)	/* DoAccessKernel debugging */
d106 1
a106 1
#if RF_INCLUDE_PARITYLOGGING > 0
d108 1
a108 1
RF_DBG_OPTION(numParityRegions, 0)	/* number of regions in the array */
d110 6
a115 3
RF_DBG_OPTION(parityLogDebug, 0)	/* if nonzero, enables debugging of
					 * parity logging */
RF_DBG_OPTION(totalInCoreLogCapacity, 1024 * 1024)	/* target bytes
d117 3
a119 2
							 * logs */
#endif				/* RF_INCLUDE_PARITYLOGGING > 0 */
@


1.4.12.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d39 1
a39 1
RF_DBG_OPTION(cscanDebug, 0)		/* Debug CSCAN sorting. */
d45 1
a45 2
RF_DBG_OPTION(enableAtomicRMW, 0)	/*
					 * This debug var enables locking of
d47 1
a47 1
					 * operations. Setting this variable
d49 1
a49 2
					 * result in deadlock. (wvcii)
					 */
d51 1
a51 1
RF_DBG_OPTION(fifoDebug, 0)		/* Debug fifo queueing. */
d54 4
a57 5
RF_DBG_OPTION(forceNumFloatingReconBufs, -1)	/*
						 * Wire down number of extra
						 * recon buffers to use.
						 */
RF_DBG_OPTION(keepAccTotals, 0)		/* Turn on keep_acc_totals. */
d65 2
a66 4
RF_DBG_OPTION(numBufsToAccumulate, 1)	/*
					 * Number of buffers to accumulate
					 * before doing XOR.
					 */
d70 3
a72 4
RF_DBG_OPTION(protectedSectors, 64L)	/*
					 * # of sectors at start of disk to
					 * exclude from RAID address space.
					 */
d76 2
a77 4
RF_DBG_OPTION(raidSectorOffset, 0)	/*
					 * Added to all incoming sectors to
					 * debug alignment problems.
					 */
d80 3
a82 3
RF_DBG_OPTION(scanDebug, 0)		/* Debug SCAN sorting. */
RF_DBG_OPTION(showXorCallCounts, 0)	/* Show n-way Xor call counts. */
RF_DBG_OPTION(shutdownDebug, 0)		/* Show shutdown calls. */
d84 1
a84 4
RF_DBG_OPTION(sstfDebug, 0)		/*
					 * Turn on debugging info for sstf
					 * queueing.
					 */
d90 2
a91 1
RF_DBG_OPTION(validateVisitedDebug, 1)	/* XXX Turn to zero by default ? */
d93 1
a93 1
RF_DBG_OPTION(debugKernelAccess, 0)	/* DoAccessKernel debugging. */
d95 1
a95 1
#if	RF_INCLUDE_PARITYLOGGING > 0
d97 1
a97 1
RF_DBG_OPTION(numParityRegions, 0)	/* Number of regions in the array. */
d99 3
a101 6
RF_DBG_OPTION(parityLogDebug, 0)	/*
					 * If nonzero, enables debugging of
					 * parity logging.
					 */
RF_DBG_OPTION(totalInCoreLogCapacity, 1024 * 1024)	/*
							 * Target bytes
d103 2
a104 3
							 * logs.
							 */
#endif	/* RF_INCLUDE_PARITYLOGGING > 0 */
@


1.4.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d39 1
a39 1
RF_DBG_OPTION(cscanDebug, 0)		/* Debug CSCAN sorting. */
d45 1
a45 2
RF_DBG_OPTION(enableAtomicRMW, 0)	/*
					 * This debug var enables locking of
d47 1
a47 1
					 * operations. Setting this variable
d49 1
a49 2
					 * result in deadlock. (wvcii)
					 */
d51 1
a51 1
RF_DBG_OPTION(fifoDebug, 0)		/* Debug fifo queueing. */
d54 4
a57 5
RF_DBG_OPTION(forceNumFloatingReconBufs, -1)	/*
						 * Wire down number of extra
						 * recon buffers to use.
						 */
RF_DBG_OPTION(keepAccTotals, 0)		/* Turn on keep_acc_totals. */
d65 2
a66 4
RF_DBG_OPTION(numBufsToAccumulate, 1)	/*
					 * Number of buffers to accumulate
					 * before doing XOR.
					 */
d70 3
a72 4
RF_DBG_OPTION(protectedSectors, 64L)	/*
					 * # of sectors at start of disk to
					 * exclude from RAID address space.
					 */
d76 2
a77 4
RF_DBG_OPTION(raidSectorOffset, 0)	/*
					 * Added to all incoming sectors to
					 * debug alignment problems.
					 */
d80 3
a82 3
RF_DBG_OPTION(scanDebug, 0)		/* Debug SCAN sorting. */
RF_DBG_OPTION(showXorCallCounts, 0)	/* Show n-way Xor call counts. */
RF_DBG_OPTION(shutdownDebug, 0)		/* Show shutdown calls. */
d84 1
a84 4
RF_DBG_OPTION(sstfDebug, 0)		/*
					 * Turn on debugging info for sstf
					 * queueing.
					 */
d90 2
a91 1
RF_DBG_OPTION(validateVisitedDebug, 1)	/* XXX Turn to zero by default ? */
d93 1
a93 1
RF_DBG_OPTION(debugKernelAccess, 0)	/* DoAccessKernel debugging. */
d95 1
a95 1
#if	RF_INCLUDE_PARITYLOGGING > 0
d97 1
a97 1
RF_DBG_OPTION(numParityRegions, 0)	/* Number of regions in the array. */
d99 3
a101 6
RF_DBG_OPTION(parityLogDebug, 0)	/*
					 * If nonzero, enables debugging of
					 * parity logging.
					 */
RF_DBG_OPTION(totalInCoreLogCapacity, 1024 * 1024)	/*
							 * Target bytes
d103 2
a104 3
							 * logs.
							 */
#endif	/* RF_INCLUDE_PARITYLOGGING > 0 */
@


1.3
log
@* remove redundant rf_ccmn.h

* remove init call to rf_ConfigureEtimer() and rf_sys.c in which it is the
  only function. update conf/files to reflect this.

* update sources to make sure _KERNEL is used not KERNEL

* change rf_etimer.h to protect macros an include of sys/kernel.h with
  a check for _KERNEL - let raidctl compile again.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_optnames.h,v 1.2 1999/02/16 00:03:03 niklas Exp $	*/
/*	$NetBSD: rf_optnames.h,v 1.4 1999/02/05 00:06:13 oster Exp $	*/
a36 1
RF_DBG_OPTION(accSizeKB, 0)	/* if nonzero, the fixed access size to run */
a38 4
RF_DBG_OPTION(alignAccesses, 0)		/* whether accs should be aligned to
					 * their size */
RF_DBG_OPTION(camlayerIOs, 0)
RF_DBG_OPTION(camlayerDebug, 0)		/* debug CAM activity */
a44 2
RF_DBG_OPTION(doDebug, 0)
RF_DBG_OPTION(dtDebug, 0)
d61 1
a61 5
RF_DBG_OPTION(maxRandomSizeKB, 128)	/* if rf_accSizeKB==0, acc sizes are
					 * uniform in [ (1/2)..maxRandomSizeKB
					 * ] */
RF_DBG_OPTION(maxTraceRunTimeSec, 0)
RF_DBG_OPTION(memAmtDebug, 0)		/* trace amount of memory allocated */
a79 2
RF_DBG_OPTION(rewriteParityStripes, 0)		/* debug flag that causes
						 * parity rewrite at startup */
a87 1
RF_DBG_OPTION(testDebug, 0)
a92 1
RF_DBG_OPTION(warnLongIOs, 0)
a93 8
#ifndef _KERNEL
RF_DBG_OPTION(disableParityVerify, 0)		/* supress verification of
						 * parity */
RF_DBG_OPTION(interactiveScript, 0)	/* set as a debug option for now */
RF_DBG_OPTION(looptestShowWrites, 0)		/* user-level loop test write
						 * debugging */
RF_DBG_OPTION(traceDebug, 0)
#endif				/* !_KERNEL */
a105 3
#if DFSTRACE > 0
RF_DBG_OPTION(DFSTraceAccesses, 0)
#endif				/* DFSTRACE > 0 */
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_optnames.h,v 1.1 1999/01/11 14:29:33 niklas Exp $	*/
d116 1
a116 1
#endif				/* !KERNEL */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_optnames.h,v 1.1 1998/11/13 04:20:31 oster Exp $	*/
/*	$NetBSD: rf_optnames.h,v 1.1 1998/11/13 04:20:31 oster Exp $	*/
d37 80
a116 87
#ifdef _KERNEL
#define KERNEL
#endif

RF_DBG_OPTION(accSizeKB,0) /* if nonzero, the fixed access size to run */
RF_DBG_OPTION(accessDebug,0)
RF_DBG_OPTION(accessTraceBufSize,0)
RF_DBG_OPTION(alignAccesses,0) /* whether accs should be aligned to their size */
RF_DBG_OPTION(camlayerIOs,0)
RF_DBG_OPTION(camlayerDebug,0) /* debug CAM activity */
RF_DBG_OPTION(cscanDebug,0) /* debug CSCAN sorting */
RF_DBG_OPTION(dagDebug,0)
RF_DBG_OPTION(debugPrintUseBuffer,0)
RF_DBG_OPTION(degDagDebug,0)
RF_DBG_OPTION(disableAsyncAccs,0)
RF_DBG_OPTION(diskDebug,0)
RF_DBG_OPTION(doDebug,0)
RF_DBG_OPTION(dtDebug,0)
RF_DBG_OPTION(enableAtomicRMW,0) /* this debug var enables locking of the disk
                                  * arm during small-write operations.  Setting
                                  * this variable to anything other than 0 will
                                  * result in deadlock.  (wvcii)
                                  */
RF_DBG_OPTION(engineDebug,0)
RF_DBG_OPTION(fifoDebug,0) /* debug fifo queueing */
RF_DBG_OPTION(floatingRbufDebug,0)
RF_DBG_OPTION(forceHeadSepLimit,-1)
RF_DBG_OPTION(forceNumFloatingReconBufs,-1) /* wire down number of extra recon buffers to use */
RF_DBG_OPTION(keepAccTotals,0) /* turn on keep_acc_totals */
RF_DBG_OPTION(lockTableSize,RF_DEFAULT_LOCK_TABLE_SIZE)
RF_DBG_OPTION(mapDebug,0)
RF_DBG_OPTION(maxNumTraces,-1)
RF_DBG_OPTION(maxRandomSizeKB,128) /* if rf_accSizeKB==0, acc sizes are uniform in [ (1/2)..maxRandomSizeKB ] */
RF_DBG_OPTION(maxTraceRunTimeSec,0)
RF_DBG_OPTION(memAmtDebug,0) /* trace amount of memory allocated */
RF_DBG_OPTION(memChunkDebug,0)
RF_DBG_OPTION(memDebug,0)
RF_DBG_OPTION(memDebugAddress,0)
RF_DBG_OPTION(numBufsToAccumulate,1) /* number of buffers to accumulate before doing XOR */
RF_DBG_OPTION(prReconSched,0)
RF_DBG_OPTION(printDAGsDebug,0)
RF_DBG_OPTION(printStatesDebug,0)
RF_DBG_OPTION(protectedSectors,64L) /* # of sectors at start of disk to
                                       exclude from RAID address space */
RF_DBG_OPTION(pssDebug,0)
RF_DBG_OPTION(queueDebug,0)
RF_DBG_OPTION(quiesceDebug,0)
RF_DBG_OPTION(raidSectorOffset,0) /* added to all incoming sectors to
                                     debug alignment problems */
RF_DBG_OPTION(reconDebug,0)
RF_DBG_OPTION(reconbufferDebug,0)
RF_DBG_OPTION(rewriteParityStripes,0) /* debug flag that causes parity rewrite at startup */
RF_DBG_OPTION(scanDebug,0) /* debug SCAN sorting */
RF_DBG_OPTION(showXorCallCounts,0) /* show n-way Xor call counts */
RF_DBG_OPTION(shutdownDebug,0) /* show shutdown calls */
RF_DBG_OPTION(sizePercentage,100)
RF_DBG_OPTION(sstfDebug,0) /* turn on debugging info for sstf queueing */
RF_DBG_OPTION(stripeLockDebug,0)
RF_DBG_OPTION(suppressLocksAndLargeWrites,0)
RF_DBG_OPTION(suppressTraceDelays,0)
RF_DBG_OPTION(testDebug,0)
RF_DBG_OPTION(useMemChunks,1)
RF_DBG_OPTION(validateDAGDebug,0)
RF_DBG_OPTION(validateVisitedDebug,1) /* XXX turn to zero by default? */
RF_DBG_OPTION(verifyParityDebug,0)
RF_DBG_OPTION(warnLongIOs,0)

#ifdef KERNEL
RF_DBG_OPTION(debugKernelAccess,0) /* DoAccessKernel debugging */
#endif /* KERNEL */

#ifndef KERNEL
RF_DBG_OPTION(disableParityVerify,0) /* supress verification of parity */
RF_DBG_OPTION(interactiveScript,0) /* set as a debug option for now */
RF_DBG_OPTION(looptestShowWrites,0) /* user-level loop test write debugging */
RF_DBG_OPTION(traceDebug,0)
#endif /* !KERNEL */

#ifdef SIMULATE
RF_DBG_OPTION(addrSizePercentage,100)
RF_DBG_OPTION(diskTrace,0) /* ised to turn the timing traces on and of */
RF_DBG_OPTION(eventDebug,0)
RF_DBG_OPTION(mWactive,1500)
RF_DBG_OPTION(mWidle,625)
RF_DBG_OPTION(mWsleep,15)
RF_DBG_OPTION(mWspinup,3500)
#endif /* SIMULATE */
d119 9
a127 6
RF_DBG_OPTION(forceParityLogReint,0)
RF_DBG_OPTION(numParityRegions,0) /* number of regions in the array */
RF_DBG_OPTION(numReintegrationThreads,1)
RF_DBG_OPTION(parityLogDebug,0) /* if nonzero, enables debugging of parity logging */
RF_DBG_OPTION(totalInCoreLogCapacity,1024*1024) /* target bytes available for in-core logs */
#endif /* RF_INCLUDE_PARITYLOGGING > 0 */
d130 2
a131 11
RF_DBG_OPTION(DFSTraceAccesses,0)
#endif /* DFSTRACE > 0 */

#if RF_DEMO > 0
RF_DBG_OPTION(demoMeterHpos,0) /* horizontal position of meters for demo mode */
RF_DBG_OPTION(demoMeterTag,0)
RF_DBG_OPTION(demoMeterVpos,0) /* vertical position of meters for demo mode */
RF_DBG_OPTION(demoMode,0)
RF_DBG_OPTION(demoSMM,0)
RF_DBG_OPTION(demoSuppressReconInitVerify,0) /* supress initialization & verify for recon */
#endif /* RF_DEMO > 0 */
@

