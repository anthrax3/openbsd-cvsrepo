head	1.6;
access;
symbols
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.38
	OPENBSD_5_0:1.5.0.36
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.34
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.32
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.28
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.30
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.26
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.24
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.22
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.20
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.18
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.16
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.16
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.4
	UBC:1.3.0.14
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.12
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.10
	OPENBSD_2_8:1.3.0.8
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.4
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.5;

1.5
date	2002.12.16.07.01.03;	author tdeval;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.22.21.22.32;	author tdeval;	state Exp;
branches;
next	1.3;

1.3
date	99.07.30.14.45.32;	author peter;	state Exp;
branches
	1.3.4.1
	1.3.14.1;
next	1.2;

1.2
date	99.02.16.00.02.26;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.29.02;	author niklas;	state Exp;
branches;
next	;

1.3.4.1
date	2003.03.28.00.38.27;	author niklas;	state Exp;
branches;
next	;

1.3.14.1
date	2002.06.11.03.42.28;	author art;	state Exp;
branches;
next	1.3.14.2;

1.3.14.2
date	2003.05.19.22.21.51;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_configure.h,v 1.5 2002/12/16 07:01:03 tdeval Exp $	*/
/*	$NetBSD: rf_configure.h,v 1.4 1999/03/02 03:18:49 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*****************************************************************************
 *
 * rf_configure.h
 *
 * Header file for RAIDframe configuration in the kernel version only.
 * Configuration is invoked via ioctl rather than at boot time.
 *
 *****************************************************************************/


#ifndef	_RF__RF_CONFIGURE_H_
#define	_RF__RF_CONFIGURE_H_

#include "rf_archs.h"
#include "rf_types.h"

#include <sys/param.h>
#include <sys/proc.h>

#include <sys/ioctl.h>

/*
 * The RAIDframe configuration, passed down through an ioctl.
 * The driver can be reconfigured (with total loss of data) at any time,
 * but it must be shut down first.
 */
struct RF_Config_s {
	/* Number of rows, columns, and spare disks. */
	RF_RowCol_t		 numRow, numCol, numSpare;

	/* Device numbers for disks comprising array. */
	dev_t			 devs[RF_MAXROW][RF_MAXCOL];

	/* Device names. */
	char			 devnames[RF_MAXROW][RF_MAXCOL][50];

	/* Device numbers for spare disks. */
	dev_t			 spare_devs[RF_MAXSPARE];

	/* Device names. */
	char			 spare_names[RF_MAXSPARE][50];

	/* Sectors per stripe unit. */
	RF_SectorNum_t		 sectPerSU;

	/* Stripe units per parity unit. */
	RF_StripeNum_t		 SUsPerPU;

	/* Stripe units per reconstruction unit. */
	RF_StripeNum_t		 SUsPerRU;

	/* Identifies the RAID architecture to be used. */
	RF_ParityConfig_t	 parityConfig;

	/* 'f' = fifo, 'c' = cvscan, not used in kernel. */
	RF_DiskQueueType_t	 diskQueueType;

	/* # concurrent reqs to be sent to a disk.  Not used in kernel. */
	char			 maxOutstandingDiskReqs;

	/* Space for specifying debug variables & their values. */
	char			 debugVars[RF_MAXDBGV][RF_MAXDBGVLEN];

	/* Size in bytes of layout-specific info. */
	unsigned int		 layoutSpecificSize;

	/* A pointer to a layout-specific structure to be copied in. */
	void			*layoutSpecific;

	/* If !0, ignore many fatal configuration conditions. */
	int			 force;
	/*
	 * "force" is used to override cases where the component labels
	 * would indicate that configuration should not proceed without
	 * user intervention.
	*/
};

#ifndef	_KERNEL
int   rf_MakeConfig(char *, RF_Config_t *);
int   rf_MakeLayoutSpecificNULL(FILE *, RF_Config_t *, void *);
int   rf_MakeLayoutSpecificDeclustered(FILE *, RF_Config_t *, void *);
void *rf_ReadSpareTable(RF_SparetWait_t *, char *);
#endif	/* !_KERNEL */

#endif	/* !_RF__RF_CONFIGURE_H_ */
@


1.5
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.h,v 1.4 2002/05/22 21:22:32 tdeval Exp $	*/
@


1.4
log
@max length of debug variables
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.h,v 1.3 1999/07/30 14:45:32 peter Exp $	*/
d3 1
d31 1
a31 1
/********************************
d35 2
a36 2
 * header file for raidframe configuration in the kernel version only.
 * configuration is invoked via ioctl rather than at boot time
d38 1
a38 1
 *******************************/
d41 2
a42 2
#ifndef _RF__RF_CONFIGURE_H_
#define _RF__RF_CONFIGURE_H_
d52 3
a54 2
/* the raidframe configuration, passed down through an ioctl.
 * the driver can be reconfigured (with total loss of data) at any time,
d58 48
a105 30
	RF_RowCol_t numRow, numCol, numSpare;	/* number of rows, columns,
						 * and spare disks */
	dev_t   devs[RF_MAXROW][RF_MAXCOL];	/* device numbers for disks
						 * comprising array */
	char    devnames[RF_MAXROW][RF_MAXCOL][50];	/* device names */
	dev_t   spare_devs[RF_MAXSPARE];	/* device numbers for spare
						 * disks */
	char    spare_names[RF_MAXSPARE][50];	/* device names */
	RF_SectorNum_t sectPerSU;	/* sectors per stripe unit */
	RF_StripeNum_t SUsPerPU;/* stripe units per parity unit */
	RF_StripeNum_t SUsPerRU;/* stripe units per reconstruction unit */
	RF_ParityConfig_t parityConfig;	/* identifies the RAID architecture to
					 * be used */
	RF_DiskQueueType_t diskQueueType;	/* 'f' = fifo, 'c' = cvscan,
						 * not used in kernel */
	char    maxOutstandingDiskReqs;	/* # concurrent reqs to be sent to a
					 * disk.  not used in kernel. */
	char    debugVars[RF_MAXDBGV][RF_MAXDBGVLEN];	/* space for specifying
							 * debug variables &
							 * their values */
	unsigned int layoutSpecificSize;	/* size in bytes of
						 * layout-specific info */
	void   *layoutSpecific;	/* a pointer to a layout-specific structure to
				 * be copied in */
	int     force;                          /* if !0, ignore many fatal
						   configuration conditions */
	/* 
	  "force" is used to override cases where the component labels would 
	  indicate that configuration should not proceed without user 
	  intervention
a107 6
#ifndef _KERNEL
int     rf_MakeConfig(char *configname, RF_Config_t * cfgPtr);
int     rf_MakeLayoutSpecificNULL(FILE * fp, RF_Config_t * cfgPtr, void *arg);
int     rf_MakeLayoutSpecificDeclustered(FILE * configfp, RF_Config_t * cfgPtr, void *arg);
void   *rf_ReadSpareTable(RF_SparetWait_t * req, char *fname);
#endif				/* !_KERNEL */
d109 8
a116 1
#endif				/* !_RF__RF_CONFIGURE_H_ */
@


1.3
log
@Update RAIDframe from NetBSD-current as of 1999/07/26.

Please note that you *must* follow the upgrade instructions at

	http://www.cs.usask.ca/staff/oster/clabel_upgrade.html

before installing the new raidctl and new kernel using this code.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.h,v 1.2 1999/02/16 00:02:26 niklas Exp $	*/
d73 3
a75 2
	char    debugVars[RF_MAXDBGV][50];	/* space for specifying debug
						 * variables & their values */
@


1.3.4.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/*****************************************************************************
d34 2
a35 2
 * Header file for RAIDframe configuration in the kernel version only.
 * Configuration is invoked via ioctl rather than at boot time.
d37 1
a37 1
 *****************************************************************************/
d40 2
a41 2
#ifndef	_RF__RF_CONFIGURE_H_
#define	_RF__RF_CONFIGURE_H_
d51 2
a52 3
/*
 * The RAIDframe configuration, passed down through an ioctl.
 * The driver can be reconfigured (with total loss of data) at any time,
d56 29
a84 48
	/* Number of rows, columns, and spare disks. */
	RF_RowCol_t		 numRow, numCol, numSpare;

	/* Device numbers for disks comprising array. */
	dev_t			 devs[RF_MAXROW][RF_MAXCOL];

	/* Device names. */
	char			 devnames[RF_MAXROW][RF_MAXCOL][50];

	/* Device numbers for spare disks. */
	dev_t			 spare_devs[RF_MAXSPARE];

	/* Device names. */
	char			 spare_names[RF_MAXSPARE][50];

	/* Sectors per stripe unit. */
	RF_SectorNum_t		 sectPerSU;

	/* Stripe units per parity unit. */
	RF_StripeNum_t		 SUsPerPU;

	/* Stripe units per reconstruction unit. */
	RF_StripeNum_t		 SUsPerRU;

	/* Identifies the RAID architecture to be used. */
	RF_ParityConfig_t	 parityConfig;

	/* 'f' = fifo, 'c' = cvscan, not used in kernel. */
	RF_DiskQueueType_t	 diskQueueType;

	/* # concurrent reqs to be sent to a disk.  Not used in kernel. */
	char			 maxOutstandingDiskReqs;

	/* Space for specifying debug variables & their values. */
	char			 debugVars[RF_MAXDBGV][RF_MAXDBGVLEN];

	/* Size in bytes of layout-specific info. */
	unsigned int		 layoutSpecificSize;

	/* A pointer to a layout-specific structure to be copied in. */
	void			*layoutSpecific;

	/* If !0, ignore many fatal configuration conditions. */
	int			 force;
	/*
	 * "force" is used to override cases where the component labels
	 * would indicate that configuration should not proceed without
	 * user intervention.
d87 6
d94 1
a94 8
#ifndef	_KERNEL
int   rf_MakeConfig(char *, RF_Config_t *);
int   rf_MakeLayoutSpecificNULL(FILE *, RF_Config_t *, void *);
int   rf_MakeLayoutSpecificDeclustered(FILE *, RF_Config_t *, void *);
void *rf_ReadSpareTable(RF_SparetWait_t *, char *);
#endif	/* !_KERNEL */

#endif	/* !_RF__RF_CONFIGURE_H_ */
@


1.3.14.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_configure.h,v 1.3 1999/07/30 14:45:32 peter Exp $	*/
d73 2
a74 3
	char    debugVars[RF_MAXDBGV][RF_MAXDBGVLEN];	/* space for specifying
							 * debug variables &
							 * their values */
@


1.3.14.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/*****************************************************************************
d34 2
a35 2
 * Header file for RAIDframe configuration in the kernel version only.
 * Configuration is invoked via ioctl rather than at boot time.
d37 1
a37 1
 *****************************************************************************/
d40 2
a41 2
#ifndef	_RF__RF_CONFIGURE_H_
#define	_RF__RF_CONFIGURE_H_
d51 2
a52 3
/*
 * The RAIDframe configuration, passed down through an ioctl.
 * The driver can be reconfigured (with total loss of data) at any time,
d56 30
a85 48
	/* Number of rows, columns, and spare disks. */
	RF_RowCol_t		 numRow, numCol, numSpare;

	/* Device numbers for disks comprising array. */
	dev_t			 devs[RF_MAXROW][RF_MAXCOL];

	/* Device names. */
	char			 devnames[RF_MAXROW][RF_MAXCOL][50];

	/* Device numbers for spare disks. */
	dev_t			 spare_devs[RF_MAXSPARE];

	/* Device names. */
	char			 spare_names[RF_MAXSPARE][50];

	/* Sectors per stripe unit. */
	RF_SectorNum_t		 sectPerSU;

	/* Stripe units per parity unit. */
	RF_StripeNum_t		 SUsPerPU;

	/* Stripe units per reconstruction unit. */
	RF_StripeNum_t		 SUsPerRU;

	/* Identifies the RAID architecture to be used. */
	RF_ParityConfig_t	 parityConfig;

	/* 'f' = fifo, 'c' = cvscan, not used in kernel. */
	RF_DiskQueueType_t	 diskQueueType;

	/* # concurrent reqs to be sent to a disk.  Not used in kernel. */
	char			 maxOutstandingDiskReqs;

	/* Space for specifying debug variables & their values. */
	char			 debugVars[RF_MAXDBGV][RF_MAXDBGVLEN];

	/* Size in bytes of layout-specific info. */
	unsigned int		 layoutSpecificSize;

	/* A pointer to a layout-specific structure to be copied in. */
	void			*layoutSpecific;

	/* If !0, ignore many fatal configuration conditions. */
	int			 force;
	/*
	 * "force" is used to override cases where the component labels
	 * would indicate that configuration should not proceed without
	 * user intervention.
d88 6
d95 1
a95 8
#ifndef	_KERNEL
int   rf_MakeConfig(char *, RF_Config_t *);
int   rf_MakeLayoutSpecificNULL(FILE *, RF_Config_t *, void *);
int   rf_MakeLayoutSpecificDeclustered(FILE *, RF_Config_t *, void *);
void *rf_ReadSpareTable(RF_SparetWait_t *, char *);
#endif	/* !_KERNEL */

#endif	/* !_RF__RF_CONFIGURE_H_ */
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_configure.h,v 1.1 1999/01/11 14:29:02 niklas Exp $	*/
/*	$NetBSD: rf_configure.h,v 1.3 1999/02/05 00:06:06 oster Exp $	*/
d79 7
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_configure.h,v 1.1 1998/11/13 04:20:26 oster Exp $	*/
/*	$NetBSD: rf_configure.h,v 1.1 1998/11/13 04:20:26 oster Exp $	*/
d32 1
a32 1
 * rf_configure.h 
a38 48
/* :  
 * Log: rf_configure.h,v 
 * Revision 1.16  1996/06/19 14:57:53  jimz
 * move layout-specific config parsing hooks into RF_LayoutSW_t
 * table in rf_layout.c
 *
 * Revision 1.15  1996/06/07  21:33:04  jimz
 * begin using consistent types for sector numbers,
 * stripe numbers, row+col numbers, recon unit numbers
 *
 * Revision 1.14  1996/05/31  22:26:54  jimz
 * fix a lot of mapping problems, memory allocation problems
 * found some weird lock issues, fixed 'em
 * more code cleanup
 *
 * Revision 1.13  1996/05/30  11:29:41  jimz
 * Numerous bug fixes. Stripe lock release code disagreed with the taking code
 * about when stripes should be locked (I made it consistent: no parity, no lock)
 * There was a lot of extra serialization of I/Os which I've removed- a lot of
 * it was to calculate values for the cache code, which is no longer with us.
 * More types, function, macro cleanup. Added code to properly quiesce the array
 * on shutdown. Made a lot of stuff array-specific which was (bogusly) general
 * before. Fixed memory allocation, freeing bugs.
 *
 * Revision 1.12  1996/05/27  18:56:37  jimz
 * more code cleanup
 * better typing
 * compiles in all 3 environments
 *
 * Revision 1.11  1996/05/24  01:59:45  jimz
 * another checkpoint in code cleanup for release
 * time to sync kernel tree
 *
 * Revision 1.10  1996/05/23  00:33:23  jimz
 * code cleanup: move all debug decls to rf_options.c, all extern
 * debug decls to rf_options.h, all debug vars preceded by rf_
 *
 * Revision 1.9  1996/05/18  20:09:51  jimz
 * bit of cleanup to compile cleanly in kernel, once again
 *
 * Revision 1.8  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.7  1995/12/01  15:16:26  root
 * added copyright info
 *
 */
d51 1
a51 1
/* the raidframe configuration, passed down through an ioctl.  
d56 23
a78 14
  RF_RowCol_t         numRow, numCol, numSpare;     /* number of rows, columns, and spare disks */
  dev_t               devs[RF_MAXROW][RF_MAXCOL];   /* device numbers for disks comprising array */
  char                devnames[RF_MAXROW][RF_MAXCOL][50]; /* device names */
  dev_t               spare_devs[RF_MAXSPARE];      /* device numbers for spare disks */
  char                spare_names[RF_MAXSPARE][50]; /* device names */
  RF_SectorNum_t      sectPerSU;                    /* sectors per stripe unit */
  RF_StripeNum_t      SUsPerPU;                     /* stripe units per parity unit */
  RF_StripeNum_t      SUsPerRU;                     /* stripe units per reconstruction unit */
  RF_ParityConfig_t   parityConfig;                 /* identifies the RAID architecture to be used */
  RF_DiskQueueType_t  diskQueueType;                /* 'f' = fifo, 'c' = cvscan, not used in kernel */
  char                maxOutstandingDiskReqs;       /* # concurrent reqs to be sent to a disk.  not used in kernel. */
  char                debugVars[RF_MAXDBGV][50];    /* space for specifying debug variables & their values */
  unsigned int        layoutSpecificSize;           /* size in bytes of layout-specific info */
  void               *layoutSpecific;               /* a pointer to a layout-specific structure to be copied in */
d80 6
d87 1
a87 8
#ifndef KERNEL
int   rf_MakeConfig(char *configname, RF_Config_t *cfgPtr);
int   rf_MakeLayoutSpecificNULL(FILE *fp, RF_Config_t *cfgPtr, void *arg);
int   rf_MakeLayoutSpecificDeclustered(FILE *configfp, RF_Config_t *cfgPtr, void *arg);
void *rf_ReadSpareTable(RF_SparetWait_t *req, char *fname);
#endif /* !KERNEL */

#endif /* !_RF__RF_CONFIGURE_H_ */
@

