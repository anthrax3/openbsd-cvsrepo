head	1.5;
access;
symbols
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.18
	OPENBSD_5_0:1.4.0.16
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.14
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.12
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.8
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.10
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.4;

1.4
date	2007.11.26.09.28.33;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.03;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.02.31;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.10;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.27;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.51;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_dagflags.h,v 1.4 2007/11/26 09:28:33 martynas Exp $	*/
/*	$NetBSD: rf_dagflags.h,v 1.3 1999/02/05 00:06:08 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*****************************************************************************
 *
 * dagflags.h -- Flags that can be given to DoAccess.
 * I pulled these out of dag.h because routines that call DoAccess may need
 * these flags, but certainly do not need the declarations related to the DAG
 * data structures.
 *
 *****************************************************************************/


#ifndef	_RF__RF_DAGFLAGS_H_
#define	_RF__RF_DAGFLAGS_H_

/*
 * Bitmasks for the "flags" parameter (RF_RaidAccessFlags_t) used
 * by DoAccess, SelectAlgorithm, and the DAG creation routines.
 *
 * If USE_DAG or USE_ASM is specified, neither the DAG nor the ASM
 * will be modified, which means that you can't SUPPRESS if you
 * specify USE_DAG.
 */

#define	RF_DAG_FLAGS_NONE		    0	/* No flags */
#define	RF_DAG_SUPPRESS_LOCKS		(1<<0)	/*
						 * Suppress all stripe locks in
						 * the DAG.
						 */
#define	RF_DAG_RETURN_ASM		(1<<1)	/*
						 * Create an ASM and return it
						 * instead of freeing it.
						 */
#define	RF_DAG_RETURN_DAG		(1<<2)	/*
						 * Create a DAG and return it
						 * instead of freeing it.
						 */
#define	RF_DAG_NONBLOCKING_IO		(1<<3)	/*
						 * Cause DoAccess to be
						 * non-blocking.
						 */
#define	RF_DAG_ACCESS_COMPLETE		(1<<4)	/*
						 * The access is complete.
						 */
#define	RF_DAG_DISPATCH_RETURNED	(1<<5)	/*
						 * Used to handle the case
						 * where the dag invokes no
						 * I/O.
						 */
#define	RF_DAG_TEST_ACCESS		(1<<6)	/*
						 * This access came through
						 * rf_ioctl instead of
						 * rf_strategy.
						 */

#endif	/* !_RF__RF_DAGFLAGS_H_ */
@


1.4
log
@typos;  ok jmc@@
sys/netinet/in_pcb.c and sys/net/bridgestp.c ok henning@@
sys/dev/pci/bktr/* ok jakemsr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_dagflags.h,v 1.3 2002/12/16 07:01:03 tdeval Exp $	*/
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_dagflags.h,v 1.2 1999/02/16 00:02:31 niklas Exp $	*/
d49 1
a49 1
 * will be modified, which means that you can't SUPRESS if you
d55 1
a55 1
						 * Supress all stripe locks in
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_dagflags.h,v 1.1 1999/01/11 14:29:10 niklas Exp $	*/
d3 1
d31 1
a31 1
/**************************************************************************************
d33 4
a36 3
 * dagflags.h -- flags that can be given to DoAccess
 * I pulled these out of dag.h because routines that call DoAccess may need these flags,
 * but certainly do not need the declarations related to the DAG data structures.
d38 1
a38 1
 **************************************************************************************/
d41 2
a42 2
#ifndef _RF__RF_DAGFLAGS_H_
#define _RF__RF_DAGFLAGS_H_
d53 22
a74 11
#define RF_DAG_FLAGS_NONE             0	/* no flags */
#define RF_DAG_SUPPRESS_LOCKS     (1<<0)	/* supress all stripe locks in
						 * the DAG */
#define RF_DAG_RETURN_ASM         (1<<1)	/* create an ASM and return it
						 * instead of freeing it */
#define RF_DAG_RETURN_DAG         (1<<2)	/* create a DAG and return it
						 * instead of freeing it */
#define RF_DAG_NONBLOCKING_IO     (1<<3)	/* cause DoAccess to be
						 * non-blocking */
#define RF_DAG_ACCESS_COMPLETE    (1<<4)	/* the access is complete */
#define RF_DAG_DISPATCH_RETURNED  (1<<5)	/* used to handle the case
d76 4
a79 2
						 * I/O */
#define RF_DAG_TEST_ACCESS        (1<<6)	/* this access came through
d81 2
a82 1
						 * rf_strategy */
d84 1
a84 1
#endif				/* !_RF__RF_DAGFLAGS_H_ */
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/*****************************************************************************
d32 3
a34 4
 * dagflags.h -- Flags that can be given to DoAccess.
 * I pulled these out of dag.h because routines that call DoAccess may need
 * these flags, but certainly do not need the declarations related to the DAG
 * data structures.
d36 1
a36 1
 *****************************************************************************/
d39 2
a40 2
#ifndef	_RF__RF_DAGFLAGS_H_
#define	_RF__RF_DAGFLAGS_H_
d51 11
a61 22
#define	RF_DAG_FLAGS_NONE		    0	/* No flags */
#define	RF_DAG_SUPPRESS_LOCKS		(1<<0)	/*
						 * Supress all stripe locks in
						 * the DAG.
						 */
#define	RF_DAG_RETURN_ASM		(1<<1)	/*
						 * Create an ASM and return it
						 * instead of freeing it.
						 */
#define	RF_DAG_RETURN_DAG		(1<<2)	/*
						 * Create a DAG and return it
						 * instead of freeing it.
						 */
#define	RF_DAG_NONBLOCKING_IO		(1<<3)	/*
						 * Cause DoAccess to be
						 * non-blocking.
						 */
#define	RF_DAG_ACCESS_COMPLETE		(1<<4)	/*
						 * The access is complete.
						 */
#define	RF_DAG_DISPATCH_RETURNED	(1<<5)	/*
						 * Used to handle the case
d63 2
a64 4
						 * I/O.
						 */
#define	RF_DAG_TEST_ACCESS		(1<<6)	/*
						 * This access came through
d66 1
a66 2
						 * rf_strategy.
						 */
d68 1
a68 1
#endif	/* !_RF__RF_DAGFLAGS_H_ */
@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/*****************************************************************************
d32 3
a34 4
 * dagflags.h -- Flags that can be given to DoAccess.
 * I pulled these out of dag.h because routines that call DoAccess may need
 * these flags, but certainly do not need the declarations related to the DAG
 * data structures.
d36 1
a36 1
 *****************************************************************************/
d39 2
a40 2
#ifndef	_RF__RF_DAGFLAGS_H_
#define	_RF__RF_DAGFLAGS_H_
d51 11
a61 22
#define	RF_DAG_FLAGS_NONE		    0	/* No flags */
#define	RF_DAG_SUPPRESS_LOCKS		(1<<0)	/*
						 * Supress all stripe locks in
						 * the DAG.
						 */
#define	RF_DAG_RETURN_ASM		(1<<1)	/*
						 * Create an ASM and return it
						 * instead of freeing it.
						 */
#define	RF_DAG_RETURN_DAG		(1<<2)	/*
						 * Create a DAG and return it
						 * instead of freeing it.
						 */
#define	RF_DAG_NONBLOCKING_IO		(1<<3)	/*
						 * Cause DoAccess to be
						 * non-blocking.
						 */
#define	RF_DAG_ACCESS_COMPLETE		(1<<4)	/*
						 * The access is complete.
						 */
#define	RF_DAG_DISPATCH_RETURNED	(1<<5)	/*
						 * Used to handle the case
d63 2
a64 4
						 * I/O.
						 */
#define	RF_DAG_TEST_ACCESS		(1<<6)	/*
						 * This access came through
d66 1
a66 2
						 * rf_strategy.
						 */
d68 1
a68 1
#endif	/* !_RF__RF_DAGFLAGS_H_ */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_dagflags.h,v 1.1 1998/11/13 04:20:27 oster Exp $	*/
/*	$NetBSD: rf_dagflags.h,v 1.1 1998/11/13 04:20:27 oster Exp $	*/
a37 26
/* :  
 * Log: rf_dagflags.h,v 
 * Revision 1.10  1996/06/13 19:08:23  jimz
 * remove unused BD flag
 *
 * Revision 1.9  1996/05/30  11:29:41  jimz
 * Numerous bug fixes. Stripe lock release code disagreed with the taking code
 * about when stripes should be locked (I made it consistent: no parity, no lock)
 * There was a lot of extra serialization of I/Os which I've removed- a lot of
 * it was to calculate values for the cache code, which is no longer with us.
 * More types, function, macro cleanup. Added code to properly quiesce the array
 * on shutdown. Made a lot of stuff array-specific which was (bogusly) general
 * before. Fixed memory allocation, freeing bugs.
 *
 * Revision 1.8  1996/05/24  22:17:04  jimz
 * continue code + namespace cleanup
 * typed a bunch of flags
 *
 * Revision 1.7  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.6  1995/12/01  15:59:40  root
 * added copyright info
 *
 */
d51 16
a66 8
#define RF_DAG_FLAGS_NONE             0  /* no flags */
#define RF_DAG_SUPPRESS_LOCKS     (1<<0) /* supress all stripe locks in the DAG */
#define RF_DAG_RETURN_ASM         (1<<1) /* create an ASM and return it instead of freeing it */
#define RF_DAG_RETURN_DAG         (1<<2) /* create a DAG and return it instead of freeing it */
#define RF_DAG_NONBLOCKING_IO     (1<<3) /* cause DoAccess to be non-blocking */
#define RF_DAG_ACCESS_COMPLETE    (1<<4) /* the access is complete */
#define RF_DAG_DISPATCH_RETURNED  (1<<5) /* used to handle the case where the dag invokes no I/O */
#define RF_DAG_TEST_ACCESS        (1<<6) /* this access came through rf_ioctl instead of rf_strategy */
d68 1
a68 1
#endif /* !_RF__RF_DAGFLAGS_H_ */
@

