head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.06.15.53.59;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.04;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.03.13;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.41;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.29;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.53;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_psstatus.h,v 1.3 2002/12/16 07:01:04 tdeval Exp $	*/
/*	$NetBSD: rf_psstatus.h,v 1.3 1999/02/05 00:06:15 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*****************************************************************************
 *
 * psstatus.h
 *
 * The reconstruction code maintains a bunch of status related to the parity
 * stripes that are currently under reconstruction. This header file defines
 * the status structures.
 *
 *****************************************************************************/

#ifndef	_RF__RF_PSSTATUS_H_
#define	_RF__RF_PSSTATUS_H_

#include "rf_types.h"
#include "rf_threadstuff.h"
#include "rf_callback.h"

#define	RF_PS_MAX_BUFS			 10	/*
						 * Max number of bufs we'll
						 * accumulate before we do
						 * an XOR.
						 */

#define	RF_PSS_DEFAULT_TABLESIZE	200

/*
 * Macros to acquire/release the mutex lock on a parity stripe status
 * descriptor. Note that we use just one lock for the whole hash chain.
 */
/* Simple hash function. */
#define	RF_HASH_PSID(_raid_,_psid_)	((_psid_) % ((_raid_)->pssTableSize))

#define	RF_LOCK_PSS_MUTEX(_raidPtr,_row,_psid)				\
	RF_LOCK_MUTEX((_raidPtr)->reconControl[_row]			\
	    ->pssTable[RF_HASH_PSID(_raidPtr, _psid)].mutex)
#define	RF_UNLOCK_PSS_MUTEX(_raidPtr, _row, _psid)			\
	RF_UNLOCK_MUTEX((_raidPtr)->reconControl[_row]			\
	    ->pssTable[RF_HASH_PSID(_raidPtr, _psid)].mutex)

struct RF_ReconParityStripeStatus_s {
	RF_StripeNum_t		 parityStripeID;/* The parity stripe ID. */
	RF_ReconUnitNum_t	 which_ru;	/*
						 * Which reconstruction unit
						 * with the indicated parity
						 * stripe.
						 */
	RF_PSSFlags_t		 flags;		/*
						 * Flags indicating various
						 * conditions.
						 */
	void			*rbuf;		/*
						 * This is the accumulating
						 * xor sum.
						 */
	void			*writeRbuf;	/*
						 * DEBUG ONLY:  A pointer to
						 * the rbuf after it has filled
						 * & been sent to disk.
						 */
	void			*rbufsForXor[RF_PS_MAX_BUFS];
						/*
						 * These are buffers still to
						 * be xored into the
						 * accumulating sum.
						 */
	int			 xorBufCount;	/*
						 * Num buffers waiting to be
						 * xored.
						 */
	int			 blockCount;	/*
						 * Count of # proc that have
						 * blocked recon on this parity
						 * stripe.
						 */
	char			*issued;	/*
						 * issued[i]==1 <=> column i
						 * has already issued a read
						 * request for the indicated
						 * RU.
						 */
	RF_CallbackDesc_t	*procWaitList;	/*
						 * List of user procs waiting
						 * for recon to be done.
						 */
	RF_CallbackDesc_t	*blockWaitList;	/*
						 * List of disks blocked
						 * waiting for user write to
						 * complete.
						 */
	RF_CallbackDesc_t	*bufWaitList;	/*
						 * List of disks blocked
						 * waiting to acquire a buffer
						 * for this RU.
						 */
	RF_ReconParityStripeStatus_t *next;
};

struct RF_PSStatusHeader_s {
	RF_DECLARE_MUTEX(mutex);		/* Mutex for this hash chain. */
	RF_ReconParityStripeStatus_t *chain;	/* The hash chain. */
};

/* Masks for the "flags" field above. */
#define	RF_PSS_NONE		0x00000000	/* No flags. */
#define	RF_PSS_UNDER_RECON	0x00000001	/*
						 * This parity stripe is
						 * currently under
						 * reconstruction.
						 */
#define	RF_PSS_FORCED_ON_WRITE	0x00000002	/*
						 * Indicates a recon was
						 * forced due to a user-write
						 * operation.
						 */
#define	RF_PSS_FORCED_ON_READ	0x00000004	/*
						 * Ditto for read, but not
						 * currently implemented.
						 */
#define	RF_PSS_RECON_BLOCKED	0x00000008	/*
						 * Reconstruction is currently
						 * blocked due to a pending
						 * user I/O.
						 */
#define	RF_PSS_CREATE		0x00000010	/*
						 * Tells LookupRUStatus to
						 * create the entry.
						 */
#define	RF_PSS_BUFFERWAIT	0x00000020	/*
						 * Someone is waiting for a
						 * buffer for this RU.
						 */

int  rf_ConfigurePSStatus(RF_ShutdownList_t **, RF_Raid_t *, RF_Config_t *);
RF_PSStatusHeader_t *rf_MakeParityStripeStatusTable(RF_Raid_t *);
void rf_FreeParityStripeStatusTable(RF_Raid_t *, RF_PSStatusHeader_t *);
RF_ReconParityStripeStatus_t *rf_LookupRUStatus(RF_Raid_t *,
	RF_PSStatusHeader_t *, RF_StripeNum_t, RF_ReconUnitNum_t,
	RF_PSSFlags_t, int *);
void rf_PSStatusDelete(RF_Raid_t *, RF_PSStatusHeader_t *,
	RF_ReconParityStripeStatus_t *);
void rf_RemoveFromActiveReconTable(RF_Raid_t *, RF_RowCol_t,
	RF_StripeNum_t, RF_ReconUnitNum_t);
RF_ReconParityStripeStatus_t *rf_AllocPSStatus(RF_Raid_t *);
void rf_FreePSStatus(RF_Raid_t *, RF_ReconParityStripeStatus_t *);
void rf_PrintPSStatusTable(RF_Raid_t *, RF_RowCol_t);

#endif	/* !_RF__RF_PSSTATUS_H_ */
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_psstatus.h,v 1.2 1999/02/16 00:03:13 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_psstatus.h,v 1.1 1999/01/11 14:29:41 niklas Exp $	*/
d3 1
d36 1
a36 1
 * stripes that are currently under reconstruction.  This header file defines
d41 2
a42 2
#ifndef _RF__RF_PSSTATUS_H_
#define _RF__RF_PSSTATUS_H_
d48 5
a52 2
#define RF_PS_MAX_BUFS 10	/* max number of bufs we'll accumulate before
				 * we do an XOR */
d54 1
a54 1
#define RF_PSS_DEFAULT_TABLESIZE 200
d60 9
a68 5
#define RF_HASH_PSID(_raid_,_psid_) ( (_psid_) % ((_raid_)->pssTableSize) )	/* simple hash function */
#define RF_LOCK_PSS_MUTEX(_raidPtr, _row, _psid) \
  RF_LOCK_MUTEX((_raidPtr)->reconControl[_row]->pssTable[ RF_HASH_PSID(_raidPtr,_psid) ].mutex)
#define RF_UNLOCK_PSS_MUTEX(_raidPtr, _row, _psid) \
  RF_UNLOCK_MUTEX((_raidPtr)->reconControl[_row]->pssTable[ RF_HASH_PSID(_raidPtr,_psid) ].mutex)
d71 22
a92 8
	RF_StripeNum_t parityStripeID;	/* the parity stripe ID */
	RF_ReconUnitNum_t which_ru;	/* which reconstruction unit with the
					 * indicated parity stripe */
	RF_PSSFlags_t flags;	/* flags indicating various conditions */
	void   *rbuf;		/* this is the accumulating xor sum */
	void   *writeRbuf;	/* DEBUG ONLY:  a pointer to the rbuf after it
				 * has filled & been sent to disk */
	void   *rbufsForXor[RF_PS_MAX_BUFS];	/* these are buffers still to
d94 23
a116 9
						 * accumulating sum */
	int     xorBufCount;	/* num buffers waiting to be xored */
	int     blockCount;	/* count of # proc that have blocked recon on
				 * this parity stripe */
	char   *issued;		/* issued[i]==1 <=> column i has already
				 * issued a read request for the indicated RU */
	RF_CallbackDesc_t *procWaitList;	/* list of user procs waiting
						 * for recon to be done */
	RF_CallbackDesc_t *blockWaitList;	/* list of disks blocked
d118 7
a124 3
						 * complete */
	RF_CallbackDesc_t *bufWaitList;	/* list of disks blocked waiting to
					 * acquire a buffer for this RU */
d129 2
a130 2
	RF_DECLARE_MUTEX(mutex)	/* mutex for this hash chain */
	RF_ReconParityStripeStatus_t *chain;	/* the hash chain */
d132 5
a136 3
/* masks for the "flags" field above */
#define RF_PSS_NONE            0x00000000	/* no flags */
#define RF_PSS_UNDER_RECON     0x00000001	/* this parity stripe is
d138 4
a141 2
						 * reconstruction */
#define RF_PSS_FORCED_ON_WRITE 0x00000002	/* indicates a recon was
d143 8
a150 4
						 * operation */
#define RF_PSS_FORCED_ON_READ  0x00000004	/* ditto for read, but not
						 * currently implemented */
#define RF_PSS_RECON_BLOCKED   0x00000008	/* reconstruction is currently
d152 24
a175 27
						 * user I/O */
#define RF_PSS_CREATE          0x00000010	/* tells LookupRUStatus to
						 * create the entry */
#define RF_PSS_BUFFERWAIT      0x00000020	/* someone is waiting for a
						 * buffer for this RU */

int 
rf_ConfigurePSStatus(RF_ShutdownList_t ** listp, RF_Raid_t * raidPtr,
    RF_Config_t * cfgPtr);

RF_PSStatusHeader_t *rf_MakeParityStripeStatusTable(RF_Raid_t * raidPtr);
void 
rf_FreeParityStripeStatusTable(RF_Raid_t * raidPtr,
    RF_PSStatusHeader_t * pssTable);
RF_ReconParityStripeStatus_t *
rf_LookupRUStatus(RF_Raid_t * raidPtr,
    RF_PSStatusHeader_t * pssTable, RF_StripeNum_t psID,
    RF_ReconUnitNum_t which_ru, RF_PSSFlags_t flags, int *created);
void 
rf_PSStatusDelete(RF_Raid_t * raidPtr, RF_PSStatusHeader_t * pssTable,
    RF_ReconParityStripeStatus_t * pssPtr);
void 
rf_RemoveFromActiveReconTable(RF_Raid_t * raidPtr, RF_RowCol_t row,
    RF_StripeNum_t psid, RF_ReconUnitNum_t which_ru);
RF_ReconParityStripeStatus_t *rf_AllocPSStatus(RF_Raid_t * raidPtr);
void    rf_FreePSStatus(RF_Raid_t * raidPtr, RF_ReconParityStripeStatus_t * p);
void    rf_PrintPSStatusTable(RF_Raid_t * raidPtr, RF_RowCol_t row);
d177 1
a177 1
#endif				/* !_RF__RF_PSSTATUS_H_ */
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d35 1
a35 1
 * stripes that are currently under reconstruction. This header file defines
d40 2
a41 2
#ifndef	_RF__RF_PSSTATUS_H_
#define	_RF__RF_PSSTATUS_H_
d47 2
a48 5
#define	RF_PS_MAX_BUFS			 10	/*
						 * Max number of bufs we'll
						 * accumulate before we do
						 * an XOR.
						 */
d50 1
a50 1
#define	RF_PSS_DEFAULT_TABLESIZE	200
d56 5
a60 9
/* Simple hash function. */
#define	RF_HASH_PSID(_raid_,_psid_)	((_psid_) % ((_raid_)->pssTableSize))

#define	RF_LOCK_PSS_MUTEX(_raidPtr,_row,_psid)				\
	RF_LOCK_MUTEX((_raidPtr)->reconControl[_row]			\
	    ->pssTable[RF_HASH_PSID(_raidPtr, _psid)].mutex)
#define	RF_UNLOCK_PSS_MUTEX(_raidPtr, _row, _psid)			\
	RF_UNLOCK_MUTEX((_raidPtr)->reconControl[_row]			\
	    ->pssTable[RF_HASH_PSID(_raidPtr, _psid)].mutex)
d63 8
a70 22
	RF_StripeNum_t		 parityStripeID;/* The parity stripe ID. */
	RF_ReconUnitNum_t	 which_ru;	/*
						 * Which reconstruction unit
						 * with the indicated parity
						 * stripe.
						 */
	RF_PSSFlags_t		 flags;		/*
						 * Flags indicating various
						 * conditions.
						 */
	void			*rbuf;		/*
						 * This is the accumulating
						 * xor sum.
						 */
	void			*writeRbuf;	/*
						 * DEBUG ONLY:  A pointer to
						 * the rbuf after it has filled
						 * & been sent to disk.
						 */
	void			*rbufsForXor[RF_PS_MAX_BUFS];
						/*
						 * These are buffers still to
d72 9
a80 23
						 * accumulating sum.
						 */
	int			 xorBufCount;	/*
						 * Num buffers waiting to be
						 * xored.
						 */
	int			 blockCount;	/*
						 * Count of # proc that have
						 * blocked recon on this parity
						 * stripe.
						 */
	char			*issued;	/*
						 * issued[i]==1 <=> column i
						 * has already issued a read
						 * request for the indicated
						 * RU.
						 */
	RF_CallbackDesc_t	*procWaitList;	/*
						 * List of user procs waiting
						 * for recon to be done.
						 */
	RF_CallbackDesc_t	*blockWaitList;	/*
						 * List of disks blocked
d82 3
a84 7
						 * complete.
						 */
	RF_CallbackDesc_t	*bufWaitList;	/*
						 * List of disks blocked
						 * waiting to acquire a buffer
						 * for this RU.
						 */
d89 2
a90 2
	RF_DECLARE_MUTEX(mutex);		/* Mutex for this hash chain. */
	RF_ReconParityStripeStatus_t *chain;	/* The hash chain. */
d92 3
a94 5

/* Masks for the "flags" field above. */
#define	RF_PSS_NONE		0x00000000	/* No flags. */
#define	RF_PSS_UNDER_RECON	0x00000001	/*
						 * This parity stripe is
d96 2
a97 4
						 * reconstruction.
						 */
#define	RF_PSS_FORCED_ON_WRITE	0x00000002	/*
						 * Indicates a recon was
d99 4
a102 8
						 * operation.
						 */
#define	RF_PSS_FORCED_ON_READ	0x00000004	/*
						 * Ditto for read, but not
						 * currently implemented.
						 */
#define	RF_PSS_RECON_BLOCKED	0x00000008	/*
						 * Reconstruction is currently
d104 27
a130 24
						 * user I/O.
						 */
#define	RF_PSS_CREATE		0x00000010	/*
						 * Tells LookupRUStatus to
						 * create the entry.
						 */
#define	RF_PSS_BUFFERWAIT	0x00000020	/*
						 * Someone is waiting for a
						 * buffer for this RU.
						 */

int  rf_ConfigurePSStatus(RF_ShutdownList_t **, RF_Raid_t *, RF_Config_t *);
RF_PSStatusHeader_t *rf_MakeParityStripeStatusTable(RF_Raid_t *);
void rf_FreeParityStripeStatusTable(RF_Raid_t *, RF_PSStatusHeader_t *);
RF_ReconParityStripeStatus_t *rf_LookupRUStatus(RF_Raid_t *,
	RF_PSStatusHeader_t *, RF_StripeNum_t, RF_ReconUnitNum_t,
	RF_PSSFlags_t, int *);
void rf_PSStatusDelete(RF_Raid_t *, RF_PSStatusHeader_t *,
	RF_ReconParityStripeStatus_t *);
void rf_RemoveFromActiveReconTable(RF_Raid_t *, RF_RowCol_t,
	RF_StripeNum_t, RF_ReconUnitNum_t);
RF_ReconParityStripeStatus_t *rf_AllocPSStatus(RF_Raid_t *);
void rf_FreePSStatus(RF_Raid_t *, RF_ReconParityStripeStatus_t *);
void rf_PrintPSStatusTable(RF_Raid_t *, RF_RowCol_t);
d132 1
a132 1
#endif	/* !_RF__RF_PSSTATUS_H_ */
@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d35 1
a35 1
 * stripes that are currently under reconstruction. This header file defines
d40 2
a41 2
#ifndef	_RF__RF_PSSTATUS_H_
#define	_RF__RF_PSSTATUS_H_
d47 2
a48 5
#define	RF_PS_MAX_BUFS			 10	/*
						 * Max number of bufs we'll
						 * accumulate before we do
						 * an XOR.
						 */
d50 1
a50 1
#define	RF_PSS_DEFAULT_TABLESIZE	200
d56 5
a60 9
/* Simple hash function. */
#define	RF_HASH_PSID(_raid_,_psid_)	((_psid_) % ((_raid_)->pssTableSize))

#define	RF_LOCK_PSS_MUTEX(_raidPtr,_row,_psid)				\
	RF_LOCK_MUTEX((_raidPtr)->reconControl[_row]			\
	    ->pssTable[RF_HASH_PSID(_raidPtr, _psid)].mutex)
#define	RF_UNLOCK_PSS_MUTEX(_raidPtr, _row, _psid)			\
	RF_UNLOCK_MUTEX((_raidPtr)->reconControl[_row]			\
	    ->pssTable[RF_HASH_PSID(_raidPtr, _psid)].mutex)
d63 8
a70 22
	RF_StripeNum_t		 parityStripeID;/* The parity stripe ID. */
	RF_ReconUnitNum_t	 which_ru;	/*
						 * Which reconstruction unit
						 * with the indicated parity
						 * stripe.
						 */
	RF_PSSFlags_t		 flags;		/*
						 * Flags indicating various
						 * conditions.
						 */
	void			*rbuf;		/*
						 * This is the accumulating
						 * xor sum.
						 */
	void			*writeRbuf;	/*
						 * DEBUG ONLY:  A pointer to
						 * the rbuf after it has filled
						 * & been sent to disk.
						 */
	void			*rbufsForXor[RF_PS_MAX_BUFS];
						/*
						 * These are buffers still to
d72 9
a80 23
						 * accumulating sum.
						 */
	int			 xorBufCount;	/*
						 * Num buffers waiting to be
						 * xored.
						 */
	int			 blockCount;	/*
						 * Count of # proc that have
						 * blocked recon on this parity
						 * stripe.
						 */
	char			*issued;	/*
						 * issued[i]==1 <=> column i
						 * has already issued a read
						 * request for the indicated
						 * RU.
						 */
	RF_CallbackDesc_t	*procWaitList;	/*
						 * List of user procs waiting
						 * for recon to be done.
						 */
	RF_CallbackDesc_t	*blockWaitList;	/*
						 * List of disks blocked
d82 3
a84 7
						 * complete.
						 */
	RF_CallbackDesc_t	*bufWaitList;	/*
						 * List of disks blocked
						 * waiting to acquire a buffer
						 * for this RU.
						 */
d89 2
a90 2
	RF_DECLARE_MUTEX(mutex);		/* Mutex for this hash chain. */
	RF_ReconParityStripeStatus_t *chain;	/* The hash chain. */
d92 3
a94 5

/* Masks for the "flags" field above. */
#define	RF_PSS_NONE		0x00000000	/* No flags. */
#define	RF_PSS_UNDER_RECON	0x00000001	/*
						 * This parity stripe is
d96 2
a97 4
						 * reconstruction.
						 */
#define	RF_PSS_FORCED_ON_WRITE	0x00000002	/*
						 * Indicates a recon was
d99 4
a102 8
						 * operation.
						 */
#define	RF_PSS_FORCED_ON_READ	0x00000004	/*
						 * Ditto for read, but not
						 * currently implemented.
						 */
#define	RF_PSS_RECON_BLOCKED	0x00000008	/*
						 * Reconstruction is currently
d104 27
a130 24
						 * user I/O.
						 */
#define	RF_PSS_CREATE		0x00000010	/*
						 * Tells LookupRUStatus to
						 * create the entry.
						 */
#define	RF_PSS_BUFFERWAIT	0x00000020	/*
						 * Someone is waiting for a
						 * buffer for this RU.
						 */

int  rf_ConfigurePSStatus(RF_ShutdownList_t **, RF_Raid_t *, RF_Config_t *);
RF_PSStatusHeader_t *rf_MakeParityStripeStatusTable(RF_Raid_t *);
void rf_FreeParityStripeStatusTable(RF_Raid_t *, RF_PSStatusHeader_t *);
RF_ReconParityStripeStatus_t *rf_LookupRUStatus(RF_Raid_t *,
	RF_PSStatusHeader_t *, RF_StripeNum_t, RF_ReconUnitNum_t,
	RF_PSSFlags_t, int *);
void rf_PSStatusDelete(RF_Raid_t *, RF_PSStatusHeader_t *,
	RF_ReconParityStripeStatus_t *);
void rf_RemoveFromActiveReconTable(RF_Raid_t *, RF_RowCol_t,
	RF_StripeNum_t, RF_ReconUnitNum_t);
RF_ReconParityStripeStatus_t *rf_AllocPSStatus(RF_Raid_t *);
void rf_FreePSStatus(RF_Raid_t *, RF_ReconParityStripeStatus_t *);
void rf_PrintPSStatusTable(RF_Raid_t *, RF_RowCol_t);
d132 1
a132 1
#endif	/* !_RF__RF_PSSTATUS_H_ */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_psstatus.h,v 1.1 1998/11/13 04:20:32 oster Exp $	*/
/*	$NetBSD: rf_psstatus.h,v 1.1 1998/11/13 04:20:32 oster Exp $	*/
a39 46
/* :  
 * Log: rf_psstatus.h,v 
 * Revision 1.16  1996/06/10 11:55:47  jimz
 * Straightened out some per-array/not-per-array distinctions, fixed
 * a couple bugs related to confusion. Added shutdown lists. Removed
 * layout shutdown function (now subsumed by shutdown lists).
 *
 * Revision 1.15  1996/06/07  22:26:27  jimz
 * type-ify which_ru (RF_ReconUnitNum_t)
 *
 * Revision 1.14  1996/06/07  21:33:04  jimz
 * begin using consistent types for sector numbers,
 * stripe numbers, row+col numbers, recon unit numbers
 *
 * Revision 1.13  1996/06/05  18:06:02  jimz
 * Major code cleanup. The Great Renaming is now done.
 * Better modularity. Better typing. Fixed a bunch of
 * synchronization bugs. Made a lot of global stuff
 * per-desc or per-array. Removed dead code.
 *
 * Revision 1.12  1996/06/02  17:31:48  jimz
 * Moved a lot of global stuff into array structure, where it belongs.
 * Fixed up paritylogging, pss modules in this manner. Some general
 * code cleanup. Removed lots of dead code, some dead files.
 *
 * Revision 1.11  1996/05/24  22:17:04  jimz
 * continue code + namespace cleanup
 * typed a bunch of flags
 *
 * Revision 1.10  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.9  1996/05/23  00:33:23  jimz
 * code cleanup: move all debug decls to rf_options.c, all extern
 * debug decls to rf_options.h, all debug vars preceded by rf_
 *
 * Revision 1.8  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.7  1995/11/30  16:17:28  wvcii
 * added copyright info
 *
 */

d47 2
a48 1
#define RF_PS_MAX_BUFS 10 /* max number of bufs we'll accumulate before we do an XOR */
d56 1
a56 1
#define RF_HASH_PSID(_raid_,_psid_) ( (_psid_) % ((_raid_)->pssTableSize) )   /* simple hash function */
d63 23
a85 13
  RF_StripeNum_t    parityStripeID; /* the parity stripe ID */
  RF_ReconUnitNum_t which_ru;       /* which reconstruction unit with the indicated parity stripe */
  RF_PSSFlags_t     flags;          /* flags indicating various conditions */
  void           *rbuf;         /* this is the accumulating xor sum */
  void           *writeRbuf;    /* DEBUG ONLY:  a pointer to the rbuf after it has filled & been sent to disk */
  void     *rbufsForXor[RF_PS_MAX_BUFS]; /* these are buffers still to be xored into the accumulating sum */
  int             xorBufCount;  /* num buffers waiting to be xored */
  int             blockCount;   /* count of # proc that have blocked recon on this parity stripe */
  char           *issued;       /* issued[i]==1 <=> column i has already issued a read request for the indicated RU */
  RF_CallbackDesc_t *procWaitList; /* list of user procs waiting for recon to be done */
  RF_CallbackDesc_t *blockWaitList;/* list of disks blocked waiting for user write to complete */
  RF_CallbackDesc_t *bufWaitList;  /* list of disks blocked waiting to acquire a buffer for this RU */
  RF_ReconParityStripeStatus_t *next;
d89 2
a90 2
  RF_DECLARE_MUTEX(mutex)               /* mutex for this hash chain */
  RF_ReconParityStripeStatus_t *chain;  /* the hash chain */
a91 1

d93 38
a130 24
#define RF_PSS_NONE            0x00000000      /* no flags */
#define RF_PSS_UNDER_RECON     0x00000001      /* this parity stripe is currently under reconstruction */
#define RF_PSS_FORCED_ON_WRITE 0x00000002      /* indicates a recon was forced due to a user-write operation */
#define RF_PSS_FORCED_ON_READ  0x00000004      /* ditto for read, but not currently implemented */
#define RF_PSS_RECON_BLOCKED   0x00000008      /* reconstruction is currently blocked due to a pending user I/O */
#define RF_PSS_CREATE          0x00000010      /* tells LookupRUStatus to create the entry */
#define RF_PSS_BUFFERWAIT      0x00000020      /* someone is waiting for a buffer for this RU */

int rf_ConfigurePSStatus(RF_ShutdownList_t **listp, RF_Raid_t *raidPtr,
	RF_Config_t *cfgPtr);

RF_PSStatusHeader_t *rf_MakeParityStripeStatusTable(RF_Raid_t *raidPtr);
void rf_FreeParityStripeStatusTable(RF_Raid_t *raidPtr,
	RF_PSStatusHeader_t *pssTable);
RF_ReconParityStripeStatus_t *rf_LookupRUStatus(RF_Raid_t *raidPtr,
	RF_PSStatusHeader_t *pssTable, RF_StripeNum_t psID,
	RF_ReconUnitNum_t which_ru, RF_PSSFlags_t flags, int *created);
void rf_PSStatusDelete(RF_Raid_t *raidPtr, RF_PSStatusHeader_t *pssTable,
	RF_ReconParityStripeStatus_t *pssPtr);
void rf_RemoveFromActiveReconTable(RF_Raid_t *raidPtr, RF_RowCol_t row,
	RF_StripeNum_t psid, RF_ReconUnitNum_t which_ru);
RF_ReconParityStripeStatus_t *rf_AllocPSStatus(RF_Raid_t *raidPtr);
void rf_FreePSStatus(RF_Raid_t *raidPtr, RF_ReconParityStripeStatus_t *p);
void rf_PrintPSStatusTable(RF_Raid_t *raidPtr, RF_RowCol_t row);
d132 1
a132 1
#endif /* !_RF__RF_PSSTATUS_H_ */
@

