head	1.8;
access;
symbols
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.16
	OPENBSD_5_0:1.7.0.14
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.12
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.10
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.6
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.8
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.4
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.5.0.22
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.20
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.18
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.16
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.12
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.10
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.8
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.4
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.7;

1.7
date	2008.06.27.06.03.08;	author ray;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.26.05.42.17;	author ray;	state Exp;
branches;
next	1.5;

1.5
date	2002.12.16.07.01.04;	author tdeval;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.08.16.07.43;	author peter;	state Exp;
branches
	1.4.8.1;
next	1.3;

1.3
date	99.07.30.14.45.32;	author peter;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	99.02.16.00.03.01;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.29.32;	author niklas;	state Exp;
branches;
next	;

1.3.4.1
date	2001.05.14.22.26.12;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2003.03.28.00.38.28;	author niklas;	state Exp;
branches;
next	;

1.4.8.1
date	2003.05.19.22.21.52;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_openbsd.h,v 1.7 2008/06/27 06:03:08 ray Exp $	*/

/*
 * Copyright (c) 1996, 1997, 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Greg Oster
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1996, 1997, 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


#ifndef	_RF__RF_OPENBSD_H_
#define	_RF__RF_OPENBSD_H_

#ifdef	_KERNEL
#include <sys/fcntl.h>
#include <sys/systm.h>
#include <sys/namei.h>
#include <sys/vnode.h>
#endif	/* _KERNEL */

/* The per-component label information that the user can set. */
typedef struct RF_ComponentInfo_s {
	int	row;		/* The row number of this component. */
	int	column;		/* The column number of this component. */
	int	serial_number;	/*
				 * A user-specified serial number for this
				 * RAID set.
				 */
} RF_ComponentInfo_t;

/* The per-component label information. */
typedef struct RF_ComponentLabel_s {
	int	version;	/* The version of this label. */
	int	serial_number;	/*
				 * A user-specified serial number for this
				 * RAID set.
				 */
	int	mod_counter;	/*
				 * Modification counter. Changed (usually
				 * by incrementing) every time the label
				 * is changed.
				 */
	int	row;		/* The row number of this component. */
	int	column;		/* The column number of this component. */
	int	num_rows;	/* Number of rows in this RAID set. */
	int	num_columns;	/* Number of columns in this RAID set. */
	int	clean;		/* 1 when clean, 0 when dirty. */
	int	status;		/*
				 * rf_ds_optimal, rf_ds_dist_spared, whatever.
				 */
	/* Stuff that will be in version 2 of the label. */
	int	sectPerSU;	/* Sectors per Stripe Unit. */
	int	SUsPerPU;	/* Stripe Units per Parity Units. */
	int	SUsPerRU;	/* Stripe Units per Reconstruction Units. */
	int	parityConfig;	/* '0' == RAID0, '1' == RAID1, etc. */
	int	maxOutstanding;	/* maxOutstanding disk requests. */
	int	blockSize;	/*
				 * Size of component block.
				 * (disklabel->d_secsize)
				 */
	int	numBlocks;	/*
				 * Number of blocks on this component. May
				 * be smaller than the partition size.
				 */
	int	partitionSize;	/*
				 * Number of blocks on this *partition*.
				 * Must exactly match the partition size
				 * from the disklabel.
				 */
	int	future_use[33];	/* Future expansion. */
	int	autoconfigure;	/*
				 * Automatically configure this RAID set.
				 * 0 == no, 1 == yes
				 */
	int	root_partition;	/*
				 * Use this set as :
				 * 0 == no, 1 == yes
				 */
	int	last_unit;	/*
				 * Last unit number (e.g. 0 for /dev/raid0)
				 * of this component. Used for autoconfigure
				 * only.
				 */
	int	config_order;	/*
				 * 0 .. n. The order in which the component
				 * should be auto-configured. E.g. 0 is will
				 * done first, (and would become raid0).
				 * This may be in conflict with last_unit !!?!
				 */
				/* Not currently used. */
	int	fut_use2[44];	/* More future expansion. */
} RF_ComponentLabel_t;

typedef struct RF_SingleComponent_s {
	int	row;
	int	column;
	char	component_name[50];	/* name of the component */
} RF_SingleComponent_t;

#ifdef	_KERNEL

struct raidcinfo {
	struct vnode		*ci_vp;		/* Component device's vnode. */
	dev_t			 ci_dev;	/* Component device's dev_t. */
	RF_ComponentLabel_t	 ci_label;	/*
						 * Components RAIDframe label.
						 */
#if 0
	size_t			 ci_size; 	/* Size. */
	char			*ci_path;	/* Path to component. */
	size_t			 ci_pathlen;	/* Length of component path. */
#endif
};

/* XXX Probably belongs in a different .h file. */
typedef struct RF_AutoConfig_s {
	char			 devname[56];	/*
						 * The name of this component.
						 */
	int			 flag;		/* A general-purpose flag. */
	dev_t			 dev;		/*
						 * The device for this
						 * component.
						 */
	struct vnode		*vp;		/* Master Vnode Pointer. */
	RF_ComponentLabel_t	*clabel;	/* The label. */
	struct RF_AutoConfig_s	*next;		/*
						 * The next autoconfig
						 * structure in this set.
						 */
} RF_AutoConfig_t;

typedef struct RF_ConfigSet_s {
	struct RF_AutoConfig_s	*ac;		/*
						 * All of the autoconfig
						 * structures for this
						 * config set.
						 */
	int			 rootable;	/*
						 * Set to 1 if this set can
						 * be root.
						 */
	struct RF_ConfigSet_s	*next;
} RF_ConfigSet_t;


#endif	/* _KERNEL */
#endif	/* _RF__RF_OPENBSD_H_ */
@


1.7
log
@More removal of clauses 3 and 4 from NetBSD licenses.

OK deraadt@@ and millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_openbsd.h,v 1.6 2008/06/26 05:42:17 ray Exp $	*/
@


1.6
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_openbsd.h,v 1.5 2002/12/16 07:01:04 tdeval Exp $	*/
a46 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.5
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_openbsd.h,v 1.4 2000/08/08 16:07:43 peter Exp $	*/
a17 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.4
log
@sync RAIDframe with Gre Oster's work for NetBSD.

This update incorporates changes since January 2000.

RAID1 and RAID5 tested for functionality matching the 2.7 code. A
number of bug fixes (including stopping a parity rebuild when
unconfiguring) have been included. See Greg's RAIDframe info page:

	http://www.cs.usask.ca/staff/oster/raid.html

The RAID_AUTOCONFIG feature set does *NOT* yet work. These features
require more work throughout the boot system and as such are a big
task.

IMPORTANT: As with anything that is this near live data on your
systems, please test carefully with existing configurations before
deploying in a live system.  Feedback via sendbug or mail direct
to peter@@wonderland.org is appreciated.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_openbsd.h,v 1.3 1999/07/30 14:45:32 peter Exp $	*/
d3 1
a3 1
/*-
d20 2
a21 2
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
d39 1
a39 1
/*-
d56 2
a57 2
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
d76 2
a77 2
#ifndef _RF__RF_OPENBSD_H_
#define _RF__RF_OPENBSD_H_
d79 1
a79 1
#ifdef _KERNEL
d84 3
a86 3
#endif /* _KERNEL */
 
/* The per-component label information that the user can set */
d88 6
a93 4
	int row;              /* the row number of this component */
	int column;           /* the column number of this component */
	int serial_number;    /* a user-specified serial number for this
				 RAID set */
d96 1
a96 1
/* The per-component label information */
d98 59
a156 39
	int version;          /* The version of this label. */
	int serial_number;    /* a user-specified serial number for this
				 RAID set */
	int mod_counter;      /* modification counter.  Changed (usually
				 by incrementing) every time the label 
				 is changed */
	int row;              /* the row number of this component */
	int column;           /* the column number of this component */
	int num_rows;         /* number of rows in this RAID set */
	int num_columns;      /* number of columns in this RAID set */
	int clean;            /* 1 when clean, 0 when dirty */
	int status;           /* rf_ds_optimal, rf_ds_dist_spared, whatever. */
	/* stuff that will be in version 2 of the label */
	int sectPerSU;        /* Sectors per Stripe Unit */
	int SUsPerPU;         /* Stripe Units per Parity Units */
	int SUsPerRU;         /* Stripe Units per Reconstruction Units */
	int parityConfig;     /* '0' == RAID0, '1' == RAID1, etc. */
	int maxOutstanding;   /* maxOutstanding disk requests */
	int blockSize;        /* size of component block. 
				 (disklabel->d_secsize) */
	int numBlocks;        /* number of blocks on this component.  May
			         be smaller than the partition size. */
	int partitionSize;    /* number of blocks on this *partition*. 
				 Must exactly match the partition size
				 from the disklabel. */
	int future_use[33];   /* Future expansion */
	int autoconfigure;    /* automatically configure this RAID set. 
				 0 == no, 1 == yes */
	int root_partition;   /* Use this set as /
				 0 == no, 1 == yes*/
	int last_unit;        /* last unit number (e.g. 0 for /dev/raid0) 
				 of this component.  Used for autoconfigure
				 only. */
	int config_order;     /* 0 .. n.  The order in which the component
				 should be auto-configured.  E.g. 0 is will 
				 done first, (and would become raid0).
				 This may be in conflict with last_unit!!?! */
	                      /* Not currently used. */
	int future_use2[44];  /* More future expansion */
d160 6
a165 6
	int row;
	int column;
	char component_name[50]; /* name of the component */
} RF_SingleComponent_t; 
 
#ifdef _KERNEL
d168 5
a172 3
	struct vnode *ci_vp;	/* component device's vnode */
	dev_t   ci_dev;		/* component device's dev_t */
	RF_ComponentLabel_t ci_label; /* components RAIDframe label */
d174 3
a176 3
	size_t	ci_size; 		/* size */
	char   *ci_path;		/* path to component */
	size_t	ci_pathlen;		/* length of component path */
d180 1
a180 1
/* XXX probably belongs in a different .h file. */
d182 14
a195 7
	char devname[56];       /* the name of this component */
	int flag;               /* a general-purpose flag */
	dev_t dev;              /* the device for this component */
	struct vnode *vp;       /* Mr. Vnode Pointer */
	RF_ComponentLabel_t *clabel;  /* the label */
	struct RF_AutoConfig_s *next; /* the next autoconfig structure 
				         in this set. */
d199 10
a208 4
	struct RF_AutoConfig_s *ac; /* all of the autoconfig structures for
				       this config set. */
	int rootable;               /* Set to 1 if this set can be root */
	struct RF_ConfigSet_s *next;
@


1.4.8.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d3 1
a3 1
/*
d20 2
a21 2
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
d39 1
a39 1
/*
d56 2
a57 2
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
d76 2
a77 2
#ifndef	_RF__RF_OPENBSD_H_
#define	_RF__RF_OPENBSD_H_
d79 1
a79 1
#ifdef	_KERNEL
d84 3
a86 3
#endif	/* _KERNEL */

/* The per-component label information that the user can set. */
d88 4
a91 6
	int	row;		/* The row number of this component. */
	int	column;		/* The column number of this component. */
	int	serial_number;	/*
				 * A user-specified serial number for this
				 * RAID set.
				 */
d94 1
a94 1
/* The per-component label information. */
d96 39
a134 59
	int	version;	/* The version of this label. */
	int	serial_number;	/*
				 * A user-specified serial number for this
				 * RAID set.
				 */
	int	mod_counter;	/*
				 * Modification counter. Changed (usually
				 * by incrementing) every time the label
				 * is changed.
				 */
	int	row;		/* The row number of this component. */
	int	column;		/* The column number of this component. */
	int	num_rows;	/* Number of rows in this RAID set. */
	int	num_columns;	/* Number of columns in this RAID set. */
	int	clean;		/* 1 when clean, 0 when dirty. */
	int	status;		/*
				 * rf_ds_optimal, rf_ds_dist_spared, whatever.
				 */
	/* Stuff that will be in version 2 of the label. */
	int	sectPerSU;	/* Sectors per Stripe Unit. */
	int	SUsPerPU;	/* Stripe Units per Parity Units. */
	int	SUsPerRU;	/* Stripe Units per Reconstruction Units. */
	int	parityConfig;	/* '0' == RAID0, '1' == RAID1, etc. */
	int	maxOutstanding;	/* maxOutstanding disk requests. */
	int	blockSize;	/*
				 * Size of component block.
				 * (disklabel->d_secsize)
				 */
	int	numBlocks;	/*
				 * Number of blocks on this component. May
				 * be smaller than the partition size.
				 */
	int	partitionSize;	/*
				 * Number of blocks on this *partition*.
				 * Must exactly match the partition size
				 * from the disklabel.
				 */
	int	future_use[33];	/* Future expansion. */
	int	autoconfigure;	/*
				 * Automatically configure this RAID set.
				 * 0 == no, 1 == yes
				 */
	int	root_partition;	/*
				 * Use this set as :
				 * 0 == no, 1 == yes
				 */
	int	last_unit;	/*
				 * Last unit number (e.g. 0 for /dev/raid0)
				 * of this component. Used for autoconfigure
				 * only.
				 */
	int	config_order;	/*
				 * 0 .. n. The order in which the component
				 * should be auto-configured. E.g. 0 is will
				 * done first, (and would become raid0).
				 * This may be in conflict with last_unit !!?!
				 */
				/* Not currently used. */
	int	fut_use2[44];	/* More future expansion. */
d138 6
a143 6
	int	row;
	int	column;
	char	component_name[50];	/* name of the component */
} RF_SingleComponent_t;

#ifdef	_KERNEL
d146 3
a148 5
	struct vnode		*ci_vp;		/* Component device's vnode. */
	dev_t			 ci_dev;	/* Component device's dev_t. */
	RF_ComponentLabel_t	 ci_label;	/*
						 * Components RAIDframe label.
						 */
d150 3
a152 3
	size_t			 ci_size; 	/* Size. */
	char			*ci_path;	/* Path to component. */
	size_t			 ci_pathlen;	/* Length of component path. */
d156 1
a156 1
/* XXX Probably belongs in a different .h file. */
d158 7
a164 14
	char			 devname[56];	/*
						 * The name of this component.
						 */
	int			 flag;		/* A general-purpose flag. */
	dev_t			 dev;		/*
						 * The device for this
						 * component.
						 */
	struct vnode		*vp;		/* Master Vnode Pointer. */
	RF_ComponentLabel_t	*clabel;	/* The label. */
	struct RF_AutoConfig_s	*next;		/*
						 * The next autoconfig
						 * structure in this set.
						 */
d168 4
a171 10
	struct RF_AutoConfig_s	*ac;		/*
						 * All of the autoconfig
						 * structures for this
						 * config set.
						 */
	int			 rootable;	/*
						 * Set to 1 if this set can
						 * be root.
						 */
	struct RF_ConfigSet_s	*next;
@


1.3
log
@Update RAIDframe from NetBSD-current as of 1999/07/26.

Please note that you *must* follow the upgrade instructions at

	http://www.cs.usask.ca/staff/oster/clabel_upgrade.html

before installing the new raidctl and new kernel using this code.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_openbsd.h,v 1.2 1999/02/16 00:03:01 niklas Exp $	*/
d108 27
a144 5
/* XXX this is *not* the place for these... */
int rf_add_hot_spare(RF_Raid_t *raidPtr, RF_SingleComponent_t *sparePtr);
int rf_remove_hot_spare(RF_Raid_t *raidPtr, RF_SingleComponent_t *sparePtr);
 
 
d155 19
@


1.3.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_openbsd.h,v 1.4 2000/08/08 16:07:43 peter Exp $	*/
a107 27
	/* stuff that will be in version 2 of the label */
	int sectPerSU;        /* Sectors per Stripe Unit */
	int SUsPerPU;         /* Stripe Units per Parity Units */
	int SUsPerRU;         /* Stripe Units per Reconstruction Units */
	int parityConfig;     /* '0' == RAID0, '1' == RAID1, etc. */
	int maxOutstanding;   /* maxOutstanding disk requests */
	int blockSize;        /* size of component block. 
				 (disklabel->d_secsize) */
	int numBlocks;        /* number of blocks on this component.  May
			         be smaller than the partition size. */
	int partitionSize;    /* number of blocks on this *partition*. 
				 Must exactly match the partition size
				 from the disklabel. */
	int future_use[33];   /* Future expansion */
	int autoconfigure;    /* automatically configure this RAID set. 
				 0 == no, 1 == yes */
	int root_partition;   /* Use this set as /
				 0 == no, 1 == yes*/
	int last_unit;        /* last unit number (e.g. 0 for /dev/raid0) 
				 of this component.  Used for autoconfigure
				 only. */
	int config_order;     /* 0 .. n.  The order in which the component
				 should be auto-configured.  E.g. 0 is will 
				 done first, (and would become raid0).
				 This may be in conflict with last_unit!!?! */
	                      /* Not currently used. */
	int future_use2[44];  /* More future expansion */
d118 5
a132 19

/* XXX probably belongs in a different .h file. */
typedef struct RF_AutoConfig_s {
	char devname[56];       /* the name of this component */
	int flag;               /* a general-purpose flag */
	dev_t dev;              /* the device for this component */
	struct vnode *vp;       /* Mr. Vnode Pointer */
	RF_ComponentLabel_t *clabel;  /* the label */
	struct RF_AutoConfig_s *next; /* the next autoconfig structure 
				         in this set. */
} RF_AutoConfig_t;

typedef struct RF_ConfigSet_s {
	struct RF_AutoConfig_s *ac; /* all of the autoconfig structures for
				       this config set. */
	int rootable;               /* Set to 1 if this set can be root */
	struct RF_ConfigSet_s *next;
} RF_ConfigSet_t;

@


1.3.4.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d3 1
a3 1
/*
d20 2
a21 2
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
d39 1
a39 1
/*
d56 2
a57 2
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
d76 2
a77 2
#ifndef	_RF__RF_OPENBSD_H_
#define	_RF__RF_OPENBSD_H_
d79 1
a79 1
#ifdef	_KERNEL
d84 3
a86 3
#endif	/* _KERNEL */

/* The per-component label information that the user can set. */
d88 4
a91 6
	int	row;		/* The row number of this component. */
	int	column;		/* The column number of this component. */
	int	serial_number;	/*
				 * A user-specified serial number for this
				 * RAID set.
				 */
d94 1
a94 1
/* The per-component label information. */
d96 39
a134 59
	int	version;	/* The version of this label. */
	int	serial_number;	/*
				 * A user-specified serial number for this
				 * RAID set.
				 */
	int	mod_counter;	/*
				 * Modification counter. Changed (usually
				 * by incrementing) every time the label
				 * is changed.
				 */
	int	row;		/* The row number of this component. */
	int	column;		/* The column number of this component. */
	int	num_rows;	/* Number of rows in this RAID set. */
	int	num_columns;	/* Number of columns in this RAID set. */
	int	clean;		/* 1 when clean, 0 when dirty. */
	int	status;		/*
				 * rf_ds_optimal, rf_ds_dist_spared, whatever.
				 */
	/* Stuff that will be in version 2 of the label. */
	int	sectPerSU;	/* Sectors per Stripe Unit. */
	int	SUsPerPU;	/* Stripe Units per Parity Units. */
	int	SUsPerRU;	/* Stripe Units per Reconstruction Units. */
	int	parityConfig;	/* '0' == RAID0, '1' == RAID1, etc. */
	int	maxOutstanding;	/* maxOutstanding disk requests. */
	int	blockSize;	/*
				 * Size of component block.
				 * (disklabel->d_secsize)
				 */
	int	numBlocks;	/*
				 * Number of blocks on this component. May
				 * be smaller than the partition size.
				 */
	int	partitionSize;	/*
				 * Number of blocks on this *partition*.
				 * Must exactly match the partition size
				 * from the disklabel.
				 */
	int	future_use[33];	/* Future expansion. */
	int	autoconfigure;	/*
				 * Automatically configure this RAID set.
				 * 0 == no, 1 == yes
				 */
	int	root_partition;	/*
				 * Use this set as :
				 * 0 == no, 1 == yes
				 */
	int	last_unit;	/*
				 * Last unit number (e.g. 0 for /dev/raid0)
				 * of this component. Used for autoconfigure
				 * only.
				 */
	int	config_order;	/*
				 * 0 .. n. The order in which the component
				 * should be auto-configured. E.g. 0 is will
				 * done first, (and would become raid0).
				 * This may be in conflict with last_unit !!?!
				 */
				/* Not currently used. */
	int	fut_use2[44];	/* More future expansion. */
d138 6
a143 6
	int	row;
	int	column;
	char	component_name[50];	/* name of the component */
} RF_SingleComponent_t;

#ifdef	_KERNEL
d146 3
a148 5
	struct vnode		*ci_vp;		/* Component device's vnode. */
	dev_t			 ci_dev;	/* Component device's dev_t. */
	RF_ComponentLabel_t	 ci_label;	/*
						 * Components RAIDframe label.
						 */
d150 3
a152 3
	size_t			 ci_size; 	/* Size. */
	char			*ci_path;	/* Path to component. */
	size_t			 ci_pathlen;	/* Length of component path. */
d156 1
a156 1
/* XXX Probably belongs in a different .h file. */
d158 7
a164 14
	char			 devname[56];	/*
						 * The name of this component.
						 */
	int			 flag;		/* A general-purpose flag. */
	dev_t			 dev;		/*
						 * The device for this
						 * component.
						 */
	struct vnode		*vp;		/* Master Vnode Pointer. */
	RF_ComponentLabel_t	*clabel;	/* The label. */
	struct RF_AutoConfig_s	*next;		/*
						 * The next autoconfig
						 * structure in this set.
						 */
d168 4
a171 10
	struct RF_AutoConfig_s	*ac;		/*
						 * All of the autoconfig
						 * structures for this
						 * config set.
						 */
	int			 rootable;	/*
						 * Set to 1 if this set can
						 * be root.
						 */
	struct RF_ConfigSet_s	*next;
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_openbsd.h,v 1.1 1999/01/11 14:29:32 niklas Exp $	*/
d84 33
d118 5
d124 3
a126 2
	struct vnode *ci_vp;		/* device's vnode */
	dev_t	ci_dev;			/* XXX: device's dev_t */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_netbsd.h,v 1.1 1998/11/13 04:20:31 oster Exp $	*/
d79 1
d86 2
a87 2
	struct vnode	*ci_vp;			/* device's vnode */
	dev_t		ci_dev;			/* XXX: device's dev_t */
d89 3
a91 3
	size_t		ci_size; 		/* size */
	char		*ci_path;		/* path to component */
	size_t		ci_pathlen;		/* length of component path */
d95 2
a96 1
#endif /*  _RF__RF_OPENBSD_H_ */
@

