head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.06.15.53.59;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.04;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.03.10;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.39;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.28;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.53;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_pq.h,v 1.3 2002/12/16 07:01:04 tdeval Exp $	*/
/*	$NetBSD: rf_pq.h,v 1.3 1999/02/05 00:06:15 oster Exp $	*/

/*
 * rf_pq.h
 */
/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Daniel Stodolsky
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#ifndef	_RF__RF_PQ_H_
#define	_RF__RF_PQ_H_

#include "rf_archs.h"

extern RF_RedFuncs_t rf_pFuncs;
extern RF_RedFuncs_t rf_pRecoveryFuncs;

int  rf_RegularONPFunc(RF_DagNode_t *);
int  rf_SimpleONPFunc(RF_DagNode_t *);
int  rf_RecoveryPFunc(RF_DagNode_t *);
int  rf_RegularPFunc(RF_DagNode_t *);

#if	(RF_INCLUDE_DECL_PQ > 0) || (RF_INCLUDE_RAID6 > 0)

extern RF_RedFuncs_t rf_qFuncs;
extern RF_RedFuncs_t rf_qRecoveryFuncs;
extern RF_RedFuncs_t rf_pqRecoveryFuncs;

void rf_PQDagSelect(RF_Raid_t *, RF_IoType_t, RF_AccessStripeMap_t *,
	RF_VoidFuncPtr *);
RF_CREATE_DAG_FUNC_DECL(rf_PQCreateLargeWriteDAG);
int  rf_RegularONQFunc(RF_DagNode_t *);
int  rf_SimpleONQFunc(RF_DagNode_t *);
RF_CREATE_DAG_FUNC_DECL(rf_PQCreateSmallWriteDAG);
int  rf_RegularPQFunc(RF_DagNode_t *);
int  rf_RegularQFunc(RF_DagNode_t *);
void rf_Degraded_100_PQFunc(RF_DagNode_t *);
int  rf_RecoveryQFunc(RF_DagNode_t *);
int  rf_RecoveryPQFunc(RF_DagNode_t *);
void rf_PQ_DegradedWriteQFunc(RF_DagNode_t *);
void rf_IncQ(unsigned long *, unsigned long *, unsigned, unsigned);
void rf_PQ_recover(unsigned long *, unsigned long *, unsigned long *,
	unsigned long *, unsigned, unsigned, unsigned);

#endif	/* (RF_INCLUDE_DECL_PQ > 0) || (RF_INCLUDE_RAID6 > 0) */

#endif	/* !_RF__RF_PQ_H_ */
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_pq.h,v 1.2 1999/02/16 00:03:10 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_pq.h,v 1.1 1999/01/11 14:29:39 niklas Exp $	*/
d3 1
d34 2
a35 2
#ifndef _RF__RF_PQ_H_
#define _RF__RF_PQ_H_
d42 4
a45 4
int     rf_RegularONPFunc(RF_DagNode_t * node);
int     rf_SimpleONPFunc(RF_DagNode_t * node);
int     rf_RecoveryPFunc(RF_DagNode_t * node);
int     rf_RegularPFunc(RF_DagNode_t * node);
d47 1
a47 1
#if (RF_INCLUDE_DECL_PQ > 0) || (RF_INCLUDE_RAID6 > 0)
d53 2
a54 3
void 
rf_PQDagSelect(RF_Raid_t * raidPtr, RF_IoType_t type,
    RF_AccessStripeMap_t * asmap, RF_VoidFuncPtr * createFunc);
d56 2
a57 2
int     rf_RegularONQFunc(RF_DagNode_t * node);
int     rf_SimpleONQFunc(RF_DagNode_t * node);
d59 9
a67 12
int     rf_RegularPQFunc(RF_DagNode_t * node);
int     rf_RegularQFunc(RF_DagNode_t * node);
void    rf_Degraded_100_PQFunc(RF_DagNode_t * node);
int     rf_RecoveryQFunc(RF_DagNode_t * node);
int     rf_RecoveryPQFunc(RF_DagNode_t * node);
void    rf_PQ_DegradedWriteQFunc(RF_DagNode_t * node);
void 
rf_IncQ(unsigned long *dest, unsigned long *buf, unsigned length,
    unsigned coeff);
void 
rf_PQ_recover(unsigned long *pbuf, unsigned long *qbuf, unsigned long *abuf,
    unsigned long *bbuf, unsigned length, unsigned coeff_a, unsigned coeff_b);
d69 1
a69 2
#endif				/* (RF_INCLUDE_DECL_PQ > 0) ||
				 * (RF_INCLUDE_RAID6 > 0) */
d71 1
a71 1
#endif				/* !_RF__RF_PQ_H_ */
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d33 2
a34 2
#ifndef	_RF__RF_PQ_H_
#define	_RF__RF_PQ_H_
d41 4
a44 4
int  rf_RegularONPFunc(RF_DagNode_t *);
int  rf_SimpleONPFunc(RF_DagNode_t *);
int  rf_RecoveryPFunc(RF_DagNode_t *);
int  rf_RegularPFunc(RF_DagNode_t *);
d46 1
a46 1
#if	(RF_INCLUDE_DECL_PQ > 0) || (RF_INCLUDE_RAID6 > 0)
d52 3
a54 2
void rf_PQDagSelect(RF_Raid_t *, RF_IoType_t, RF_AccessStripeMap_t *,
	RF_VoidFuncPtr *);
d56 2
a57 2
int  rf_RegularONQFunc(RF_DagNode_t *);
int  rf_SimpleONQFunc(RF_DagNode_t *);
d59 12
a70 9
int  rf_RegularPQFunc(RF_DagNode_t *);
int  rf_RegularQFunc(RF_DagNode_t *);
void rf_Degraded_100_PQFunc(RF_DagNode_t *);
int  rf_RecoveryQFunc(RF_DagNode_t *);
int  rf_RecoveryPQFunc(RF_DagNode_t *);
void rf_PQ_DegradedWriteQFunc(RF_DagNode_t *);
void rf_IncQ(unsigned long *, unsigned long *, unsigned, unsigned);
void rf_PQ_recover(unsigned long *, unsigned long *, unsigned long *,
	unsigned long *, unsigned, unsigned, unsigned);
d72 2
a73 1
#endif	/* (RF_INCLUDE_DECL_PQ > 0) || (RF_INCLUDE_RAID6 > 0) */
d75 1
a75 1
#endif	/* !_RF__RF_PQ_H_ */
@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d33 2
a34 2
#ifndef	_RF__RF_PQ_H_
#define	_RF__RF_PQ_H_
d41 4
a44 4
int  rf_RegularONPFunc(RF_DagNode_t *);
int  rf_SimpleONPFunc(RF_DagNode_t *);
int  rf_RecoveryPFunc(RF_DagNode_t *);
int  rf_RegularPFunc(RF_DagNode_t *);
d46 1
a46 1
#if	(RF_INCLUDE_DECL_PQ > 0) || (RF_INCLUDE_RAID6 > 0)
d52 3
a54 2
void rf_PQDagSelect(RF_Raid_t *, RF_IoType_t, RF_AccessStripeMap_t *,
	RF_VoidFuncPtr *);
d56 2
a57 2
int  rf_RegularONQFunc(RF_DagNode_t *);
int  rf_SimpleONQFunc(RF_DagNode_t *);
d59 12
a70 9
int  rf_RegularPQFunc(RF_DagNode_t *);
int  rf_RegularQFunc(RF_DagNode_t *);
void rf_Degraded_100_PQFunc(RF_DagNode_t *);
int  rf_RecoveryQFunc(RF_DagNode_t *);
int  rf_RecoveryPQFunc(RF_DagNode_t *);
void rf_PQ_DegradedWriteQFunc(RF_DagNode_t *);
void rf_IncQ(unsigned long *, unsigned long *, unsigned, unsigned);
void rf_PQ_recover(unsigned long *, unsigned long *, unsigned long *,
	unsigned long *, unsigned, unsigned, unsigned);
d72 2
a73 1
#endif	/* (RF_INCLUDE_DECL_PQ > 0) || (RF_INCLUDE_RAID6 > 0) */
d75 1
a75 1
#endif	/* !_RF__RF_PQ_H_ */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_pq.h,v 1.1 1998/11/13 04:20:32 oster Exp $	*/
/*	$NetBSD: rf_pq.h,v 1.1 1998/11/13 04:20:32 oster Exp $	*/
a31 44
/*
 * :  
 * Log: rf_pq.h,v 
 * Revision 1.9  1996/07/31 15:35:05  jimz
 * evenodd changes; bugfixes for double-degraded archs, generalize
 * some formerly PQ-only functions
 *
 * Revision 1.8  1996/07/27  23:36:08  jimz
 * Solaris port of simulator
 *
 * Revision 1.7  1996/06/03  23:28:26  jimz
 * more bugfixes
 * check in tree to sync for IPDS runs with current bugfixes
 * there still may be a problem with threads in the script test
 * getting I/Os stuck- not trivially reproducible (runs ~50 times
 * in a row without getting stuck)
 *
 * Revision 1.6  1996/06/02  17:31:48  jimz
 * Moved a lot of global stuff into array structure, where it belongs.
 * Fixed up paritylogging, pss modules in this manner. Some general
 * code cleanup. Removed lots of dead code, some dead files.
 *
 * Revision 1.5  1996/05/31  22:26:54  jimz
 * fix a lot of mapping problems, memory allocation problems
 * found some weird lock issues, fixed 'em
 * more code cleanup
 *
 * Revision 1.4  1996/05/27  18:56:37  jimz
 * more code cleanup
 * better typing
 * compiles in all 3 environments
 *
 * Revision 1.3  1996/05/24  22:17:04  jimz
 * continue code + namespace cleanup
 * typed a bunch of flags
 *
 * Revision 1.2  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.1  1996/05/18  19:56:21  jimz
 * Initial revision
 *
 */
d41 4
a44 4
int rf_RegularONPFunc(RF_DagNode_t *node);
int rf_SimpleONPFunc(RF_DagNode_t *node);
int rf_RecoveryPFunc(RF_DagNode_t *node);
int rf_RegularPFunc(RF_DagNode_t *node);
d52 3
a54 2
void rf_PQDagSelect(RF_Raid_t *raidPtr, RF_IoType_t type,
	RF_AccessStripeMap_t *asmap, RF_VoidFuncPtr *createFunc);
d56 2
a57 2
int rf_RegularONQFunc(RF_DagNode_t *node);
int rf_SimpleONQFunc(RF_DagNode_t *node);
d59 12
a70 10
int rf_RegularPQFunc(RF_DagNode_t *node);
int rf_RegularQFunc(RF_DagNode_t *node);
void rf_Degraded_100_PQFunc(RF_DagNode_t *node);
int rf_RecoveryQFunc(RF_DagNode_t *node);
int rf_RecoveryPQFunc(RF_DagNode_t *node);
void rf_PQ_DegradedWriteQFunc(RF_DagNode_t *node);
void rf_IncQ(unsigned long *dest, unsigned long *buf, unsigned length,
	unsigned coeff);
void rf_PQ_recover(unsigned long *pbuf, unsigned long *qbuf, unsigned long *abuf,
	unsigned long *bbuf, unsigned length, unsigned coeff_a, unsigned coeff_b);
d72 2
a73 1
#endif /* (RF_INCLUDE_DECL_PQ > 0) || (RF_INCLUDE_RAID6 > 0) */
d75 1
a75 1
#endif /* !_RF__RF_PQ_H_ */
@

