head	1.6;
access;
symbols
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.38
	OPENBSD_5_0:1.5.0.36
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.34
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.32
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.28
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.30
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.26
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.24
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.22
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.20
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.18
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.16
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.12
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.10
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.8
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.4
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.5;

1.5
date	2002.12.16.07.01.03;	author tdeval;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.08.16.07.40;	author peter;	state Exp;
branches
	1.4.8.1;
next	1.3;

1.3
date	99.07.30.14.45.32;	author peter;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	99.02.16.00.02.40;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.29.18;	author niklas;	state Exp;
branches;
next	;

1.3.4.1
date	2001.05.14.22.26.10;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2003.03.28.00.38.27;	author niklas;	state Exp;
branches;
next	;

1.4.8.1
date	2003.05.19.22.21.51;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_disks.h,v 1.5 2002/12/16 07:01:03 tdeval Exp $	*/
/*	$NetBSD: rf_disks.h,v 1.8 2000/03/27 03:25:17 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*
 * rf_disks.h -- Header file for code related to physical disks.
 */

#ifndef	_RF__RF_DISKS_H_
#define	_RF__RF_DISKS_H_

#include <sys/types.h>

#include "rf_archs.h"
#include "rf_types.h"

#if	defined(__NetBSD__)
#include "rf_netbsd.h"
#elif	defined(__OpenBSD__)
#include "rf_openbsd.h"
#endif

/*
 * A physical disk can be in one of several states:
 * IF YOU ADD A STATE, CHECK TO SEE IF YOU NEED TO MODIFY RF_DEAD_DISK() BELOW.
 */
enum RF_DiskStatus_e {
	rf_ds_optimal,		/* No problems. */
	rf_ds_failed,		/* Reconstruction ongoing. */
	rf_ds_reconstructing,	/*
				 * Reconstruction complete to spare, dead disk
				 * not yet replaced.
				 */
	rf_ds_dist_spared,	/*
				 * Reconstruction complete to distributed
				 * spare space, dead disk not yet replaced.
				 */
	rf_ds_spared,		/*
				 * Reconstruction complete to distributed
				 * spare space, dead disk not yet replaced.
				 */
	rf_ds_spare,		/* An available spare disk. */
	rf_ds_used_spare	/*
				 * A spare which has been used, and hence is
				 * not available.
				 */
};
typedef enum RF_DiskStatus_e RF_DiskStatus_t;

struct RF_RaidDisk_s {
	char devname[56];		/* Name of device file. */
	RF_DiskStatus_t status;		/* Whether it is up or down. */
	RF_RowCol_t spareRow;		/*
					 * If in status "spared", this
					 * identifies the spare disk.
					 */
	RF_RowCol_t spareCol;		/*
					 * If in status "spared", this
					 * identifies the spare disk.
					 */
	RF_SectorCount_t numBlocks;	/*
					 * Number of blocks, obtained via
					 * READ CAPACITY.
					 */
	int blockSize;
	RF_SectorCount_t partitionSize; /*
					 * The *actual* and *full* size of
					 * the partition, from the disklabel.
					 */
	int auto_configured;		/*
					 * 1 if this component was
					 * autoconfigured. 0 otherwise.
					 */
	dev_t dev;
};

/*
 * An RF_DiskOp_t ptr is really a pointer to a UAGT_CCB, but I want
 * to isolate the CAM layer from all other layers, so I typecast to/from
 * RF_DiskOp_t * (i.e. void *) at the interfaces.
 */
typedef void RF_DiskOp_t;

/* If a disk is in any of these states, it is inaccessible. */
#define	RF_DEAD_DISK(_dstat_)						\
	(((_dstat_) == rf_ds_spared) ||					\
	 ((_dstat_) == rf_ds_reconstructing) ||				\
	 ((_dstat_) == rf_ds_failed) ||					\
	 ((_dstat_) == rf_ds_dist_spared))

#ifdef	_KERNEL
#if	defined(__NetBSD__)
#include "rf_netbsd.h"
#elif	defined(__OpenBSD__)
#include "rf_openbsd.h"
#endif

int rf_ConfigureDisks(RF_ShutdownList_t **, RF_Raid_t *, RF_Config_t *);
int rf_ConfigureSpareDisks(RF_ShutdownList_t **, RF_Raid_t *, RF_Config_t *);
int rf_ConfigureDisk(RF_Raid_t *, char *, RF_RaidDisk_t *,
	RF_RowCol_t, RF_RowCol_t);
int rf_AutoConfigureDisks(RF_Raid_t *, RF_Config_t *, RF_AutoConfig_t *);
int rf_CheckLabels(RF_Raid_t *, RF_Config_t *);
int rf_add_hot_spare(RF_Raid_t *, RF_SingleComponent_t *);
int rf_remove_hot_spare(RF_Raid_t *, RF_SingleComponent_t *);
int rf_delete_component(RF_Raid_t *, RF_SingleComponent_t *);
int rf_incorporate_hot_spare(RF_Raid_t *, RF_SingleComponent_t *);
#endif	/* _KERNEL */

#endif	/* !_RF__RF_DISKS_H_ */
@


1.5
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_disks.h,v 1.4 2000/08/08 16:07:40 peter Exp $	*/
@


1.4
log
@sync RAIDframe with Gre Oster's work for NetBSD.

This update incorporates changes since January 2000.

RAID1 and RAID5 tested for functionality matching the 2.7 code. A
number of bug fixes (including stopping a parity rebuild when
unconfiguring) have been included. See Greg's RAIDframe info page:

	http://www.cs.usask.ca/staff/oster/raid.html

The RAID_AUTOCONFIG feature set does *NOT* yet work. These features
require more work throughout the boot system and as such are a big
task.

IMPORTANT: As with anything that is this near live data on your
systems, please test carefully with existing configurations before
deploying in a live system.  Feedback via sendbug or mail direct
to peter@@wonderland.org is appreciated.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_disks.h,v 1.3 1999/07/30 14:45:32 peter Exp $	*/
d3 1
d32 1
a32 1
 * rf_disks.h -- header file for code related to physical disks
d35 2
a36 2
#ifndef _RF__RF_DISKS_H_
#define _RF__RF_DISKS_H_
d43 1
a43 1
#if defined(__NetBSD__)
d45 1
a45 1
#elif defined(__OpenBSD__)
d54 19
a72 11
	rf_ds_optimal,		/* no problems */
	rf_ds_failed,		/* reconstruction ongoing */
	rf_ds_reconstructing,	/* reconstruction complete to spare, dead disk
				 * not yet replaced */
	rf_ds_dist_spared,	/* reconstruction complete to distributed
				 * spare space, dead disk not yet replaced */
	rf_ds_spared,		/* reconstruction complete to distributed
				 * spare space, dead disk not yet replaced */
	rf_ds_spare,		/* an available spare disk */
	rf_ds_used_spare	/* a spare which has been used, and hence is
				 * not available */
d77 24
a100 14
	char    devname[56];	/* name of device file */
	RF_DiskStatus_t status;	/* whether it is up or down */
	RF_RowCol_t spareRow;	/* if in status "spared", this identifies the
				 * spare disk */
	RF_RowCol_t spareCol;	/* if in status "spared", this identifies the
				 * spare disk */
	RF_SectorCount_t numBlocks;	/* number of blocks, obtained via READ
					 * CAPACITY */
	int     blockSize;
	RF_SectorCount_t partitionSize; /* The *actual* and *full* size of 
					   the partition, from the disklabel */
	int     auto_configured;/* 1 if this component was autoconfigured.
				   0 otherwise. */
	dev_t   dev;
d102 1
d105 1
a105 1
 * to isolate the cam layer from all other layers, so I typecast to/from
d110 6
a115 4
/* if a disk is in any of these states, it is inaccessible */
#define RF_DEAD_DISK(_dstat_) (((_dstat_) == rf_ds_spared) || \
	((_dstat_) == rf_ds_reconstructing) || ((_dstat_) == rf_ds_failed) || \
	((_dstat_) == rf_ds_dist_spared))
d117 2
a118 2
#ifdef _KERNEL
#if defined(__NetBSD__)
d120 1
a120 1
#elif defined(__OpenBSD__)
d124 11
a134 15
int rf_ConfigureDisks(RF_ShutdownList_t ** listp, RF_Raid_t * raidPtr,
		      RF_Config_t * cfgPtr);
int rf_ConfigureSpareDisks(RF_ShutdownList_t ** listp, RF_Raid_t * raidPtr,
			   RF_Config_t * cfgPtr);
int rf_ConfigureDisk(RF_Raid_t * raidPtr, char *buf, RF_RaidDisk_t * diskPtr,
		     RF_RowCol_t row, RF_RowCol_t col);
int rf_AutoConfigureDisks(RF_Raid_t *raidPtr, RF_Config_t *cfgPtr,
			  RF_AutoConfig_t *auto_config);
int rf_CheckLabels( RF_Raid_t *, RF_Config_t *);
int rf_add_hot_spare(RF_Raid_t *raidPtr, RF_SingleComponent_t *sparePtr);
int rf_remove_hot_spare(RF_Raid_t *raidPtr, RF_SingleComponent_t *sparePtr);
int rf_delete_component(RF_Raid_t *raidPtr, RF_SingleComponent_t *component);
int rf_incorporate_hot_spare(RF_Raid_t *raidPtr, 
			     RF_SingleComponent_t *component);
#endif /* _KERNEL */
d136 1
a136 1
#endif				/* !_RF__RF_DISKS_H_ */
@


1.4.8.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d31 1
a31 1
 * rf_disks.h -- Header file for code related to physical disks.
d34 2
a35 2
#ifndef	_RF__RF_DISKS_H_
#define	_RF__RF_DISKS_H_
d42 1
a42 1
#if	defined(__NetBSD__)
d44 1
a44 1
#elif	defined(__OpenBSD__)
d53 11
a63 19
	rf_ds_optimal,		/* No problems. */
	rf_ds_failed,		/* Reconstruction ongoing. */
	rf_ds_reconstructing,	/*
				 * Reconstruction complete to spare, dead disk
				 * not yet replaced.
				 */
	rf_ds_dist_spared,	/*
				 * Reconstruction complete to distributed
				 * spare space, dead disk not yet replaced.
				 */
	rf_ds_spared,		/*
				 * Reconstruction complete to distributed
				 * spare space, dead disk not yet replaced.
				 */
	rf_ds_spare,		/* An available spare disk. */
	rf_ds_used_spare	/*
				 * A spare which has been used, and hence is
				 * not available.
				 */
d68 14
a81 24
	char devname[56];		/* Name of device file. */
	RF_DiskStatus_t status;		/* Whether it is up or down. */
	RF_RowCol_t spareRow;		/*
					 * If in status "spared", this
					 * identifies the spare disk.
					 */
	RF_RowCol_t spareCol;		/*
					 * If in status "spared", this
					 * identifies the spare disk.
					 */
	RF_SectorCount_t numBlocks;	/*
					 * Number of blocks, obtained via
					 * READ CAPACITY.
					 */
	int blockSize;
	RF_SectorCount_t partitionSize; /*
					 * The *actual* and *full* size of
					 * the partition, from the disklabel.
					 */
	int auto_configured;		/*
					 * 1 if this component was
					 * autoconfigured. 0 otherwise.
					 */
	dev_t dev;
a82 1

d85 1
a85 1
 * to isolate the CAM layer from all other layers, so I typecast to/from
d90 4
a93 6
/* If a disk is in any of these states, it is inaccessible. */
#define	RF_DEAD_DISK(_dstat_)						\
	(((_dstat_) == rf_ds_spared) ||					\
	 ((_dstat_) == rf_ds_reconstructing) ||				\
	 ((_dstat_) == rf_ds_failed) ||					\
	 ((_dstat_) == rf_ds_dist_spared))
d95 2
a96 2
#ifdef	_KERNEL
#if	defined(__NetBSD__)
d98 1
a98 1
#elif	defined(__OpenBSD__)
d102 15
a116 11
int rf_ConfigureDisks(RF_ShutdownList_t **, RF_Raid_t *, RF_Config_t *);
int rf_ConfigureSpareDisks(RF_ShutdownList_t **, RF_Raid_t *, RF_Config_t *);
int rf_ConfigureDisk(RF_Raid_t *, char *, RF_RaidDisk_t *,
	RF_RowCol_t, RF_RowCol_t);
int rf_AutoConfigureDisks(RF_Raid_t *, RF_Config_t *, RF_AutoConfig_t *);
int rf_CheckLabels(RF_Raid_t *, RF_Config_t *);
int rf_add_hot_spare(RF_Raid_t *, RF_SingleComponent_t *);
int rf_remove_hot_spare(RF_Raid_t *, RF_SingleComponent_t *);
int rf_delete_component(RF_Raid_t *, RF_SingleComponent_t *);
int rf_incorporate_hot_spare(RF_Raid_t *, RF_SingleComponent_t *);
#endif	/* _KERNEL */
d118 1
a118 1
#endif	/* !_RF__RF_DISKS_H_ */
@


1.3
log
@Update RAIDframe from NetBSD-current as of 1999/07/26.

Please note that you *must* follow the upgrade instructions at

	http://www.cs.usask.ca/staff/oster/clabel_upgrade.html

before installing the new raidctl and new kernel using this code.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_disks.h,v 1.2 1999/02/16 00:02:40 niklas Exp $	*/
/*	$NetBSD: rf_disks.h,v 1.4 1999/02/24 00:00:03 oster Exp $	*/
d42 6
d77 4
a80 10
	/* XXX the following is needed since we seem to need SIMULATE defined 
	 * in order to get user-land stuff to compile, but we *don't* want this
	 * in the structure for the user-land utilities, as the kernel doesn't
	 * know about it!! (and it messes up the size of the structure, so
	 * there is a communication problem between the kernel and the
	 * userland utils :-(  GO */
#if RF_KEEP_DISKSTATS > 0
	RF_uint64 nreads;
	RF_uint64 nwrites;
#endif				/* RF_KEEP_DISKSTATS > 0 */
d95 22
a116 9
int 
rf_ConfigureDisks(RF_ShutdownList_t ** listp, RF_Raid_t * raidPtr,
    RF_Config_t * cfgPtr);
int 
rf_ConfigureSpareDisks(RF_ShutdownList_t ** listp, RF_Raid_t * raidPtr,
    RF_Config_t * cfgPtr);
int 
rf_ConfigureDisk(RF_Raid_t * raidPtr, char *buf, RF_RaidDisk_t * diskPtr,
    RF_RowCol_t row, RF_RowCol_t col);
@


1.3.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_disks.h,v 1.4 2000/08/08 16:07:40 peter Exp $	*/
/*	$NetBSD: rf_disks.h,v 1.8 2000/03/27 03:25:17 oster Exp $	*/
a41 6
#if defined(__NetBSD__)
#include "rf_netbsd.h"
#elif defined(__OpenBSD__)
#include "rf_openbsd.h"
#endif

d71 10
a80 4
	RF_SectorCount_t partitionSize; /* The *actual* and *full* size of 
					   the partition, from the disklabel */
	int     auto_configured;/* 1 if this component was autoconfigured.
				   0 otherwise. */
d95 9
a103 22
#ifdef _KERNEL
#if defined(__NetBSD__)
#include "rf_netbsd.h"
#elif defined(__OpenBSD__)
#include "rf_openbsd.h"
#endif

int rf_ConfigureDisks(RF_ShutdownList_t ** listp, RF_Raid_t * raidPtr,
		      RF_Config_t * cfgPtr);
int rf_ConfigureSpareDisks(RF_ShutdownList_t ** listp, RF_Raid_t * raidPtr,
			   RF_Config_t * cfgPtr);
int rf_ConfigureDisk(RF_Raid_t * raidPtr, char *buf, RF_RaidDisk_t * diskPtr,
		     RF_RowCol_t row, RF_RowCol_t col);
int rf_AutoConfigureDisks(RF_Raid_t *raidPtr, RF_Config_t *cfgPtr,
			  RF_AutoConfig_t *auto_config);
int rf_CheckLabels( RF_Raid_t *, RF_Config_t *);
int rf_add_hot_spare(RF_Raid_t *raidPtr, RF_SingleComponent_t *sparePtr);
int rf_remove_hot_spare(RF_Raid_t *raidPtr, RF_SingleComponent_t *sparePtr);
int rf_delete_component(RF_Raid_t *raidPtr, RF_SingleComponent_t *component);
int rf_incorporate_hot_spare(RF_Raid_t *raidPtr, 
			     RF_SingleComponent_t *component);
#endif /* _KERNEL */
@


1.3.4.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d31 1
a31 1
 * rf_disks.h -- Header file for code related to physical disks.
d34 2
a35 2
#ifndef	_RF__RF_DISKS_H_
#define	_RF__RF_DISKS_H_
d42 1
a42 1
#if	defined(__NetBSD__)
d44 1
a44 1
#elif	defined(__OpenBSD__)
d53 11
a63 19
	rf_ds_optimal,		/* No problems. */
	rf_ds_failed,		/* Reconstruction ongoing. */
	rf_ds_reconstructing,	/*
				 * Reconstruction complete to spare, dead disk
				 * not yet replaced.
				 */
	rf_ds_dist_spared,	/*
				 * Reconstruction complete to distributed
				 * spare space, dead disk not yet replaced.
				 */
	rf_ds_spared,		/*
				 * Reconstruction complete to distributed
				 * spare space, dead disk not yet replaced.
				 */
	rf_ds_spare,		/* An available spare disk. */
	rf_ds_used_spare	/*
				 * A spare which has been used, and hence is
				 * not available.
				 */
d68 14
a81 24
	char devname[56];		/* Name of device file. */
	RF_DiskStatus_t status;		/* Whether it is up or down. */
	RF_RowCol_t spareRow;		/*
					 * If in status "spared", this
					 * identifies the spare disk.
					 */
	RF_RowCol_t spareCol;		/*
					 * If in status "spared", this
					 * identifies the spare disk.
					 */
	RF_SectorCount_t numBlocks;	/*
					 * Number of blocks, obtained via
					 * READ CAPACITY.
					 */
	int blockSize;
	RF_SectorCount_t partitionSize; /*
					 * The *actual* and *full* size of
					 * the partition, from the disklabel.
					 */
	int auto_configured;		/*
					 * 1 if this component was
					 * autoconfigured. 0 otherwise.
					 */
	dev_t dev;
a82 1

d85 1
a85 1
 * to isolate the CAM layer from all other layers, so I typecast to/from
d90 4
a93 6
/* If a disk is in any of these states, it is inaccessible. */
#define	RF_DEAD_DISK(_dstat_)						\
	(((_dstat_) == rf_ds_spared) ||					\
	 ((_dstat_) == rf_ds_reconstructing) ||				\
	 ((_dstat_) == rf_ds_failed) ||					\
	 ((_dstat_) == rf_ds_dist_spared))
d95 2
a96 2
#ifdef	_KERNEL
#if	defined(__NetBSD__)
d98 1
a98 1
#elif	defined(__OpenBSD__)
d102 15
a116 11
int rf_ConfigureDisks(RF_ShutdownList_t **, RF_Raid_t *, RF_Config_t *);
int rf_ConfigureSpareDisks(RF_ShutdownList_t **, RF_Raid_t *, RF_Config_t *);
int rf_ConfigureDisk(RF_Raid_t *, char *, RF_RaidDisk_t *,
	RF_RowCol_t, RF_RowCol_t);
int rf_AutoConfigureDisks(RF_Raid_t *, RF_Config_t *, RF_AutoConfig_t *);
int rf_CheckLabels(RF_Raid_t *, RF_Config_t *);
int rf_add_hot_spare(RF_Raid_t *, RF_SingleComponent_t *);
int rf_remove_hot_spare(RF_Raid_t *, RF_SingleComponent_t *);
int rf_delete_component(RF_Raid_t *, RF_SingleComponent_t *);
int rf_incorporate_hot_spare(RF_Raid_t *, RF_SingleComponent_t *);
#endif	/* _KERNEL */
d118 1
a118 1
#endif	/* !_RF__RF_DISKS_H_ */
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_disks.h,v 1.1 1999/01/11 14:29:18 niklas Exp $	*/
/*	$NetBSD: rf_disks.h,v 1.3 1999/02/05 00:06:09 oster Exp $	*/
d71 2
a72 2
	/* XXX the folling is needed since we seem to need SIMULATE defined in
	 * order to get user-land stuff to compile, but we *don't* want this
a102 1
    RF_DiskOp_t * rdcap_op, RF_DiskOp_t * tur_op, dev_t dev,
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_disks.h,v 1.1 1998/11/13 04:20:29 oster Exp $	*/
/*	$NetBSD: rf_disks.h,v 1.1 1998/11/13 04:20:29 oster Exp $	*/
d31 1
a31 53
 * rf_disks.h -- header file for code related to physical disks 
 */

/* :  
 * Log: rf_disks.h,v 
 * Revision 1.15  1996/08/20 23:05:13  jimz
 * add nreads, nwrites to RaidDisk
 *
 * Revision 1.14  1996/06/17  03:20:15  jimz
 * increase devname len to 56
 *
 * Revision 1.13  1996/06/10  11:55:47  jimz
 * Straightened out some per-array/not-per-array distinctions, fixed
 * a couple bugs related to confusion. Added shutdown lists. Removed
 * layout shutdown function (now subsumed by shutdown lists).
 *
 * Revision 1.12  1996/06/09  02:36:46  jimz
 * lots of little crufty cleanup- fixup whitespace
 * issues, comment #ifdefs, improve typing in some
 * places (esp size-related)
 *
 * Revision 1.11  1996/06/07  21:33:04  jimz
 * begin using consistent types for sector numbers,
 * stripe numbers, row+col numbers, recon unit numbers
 *
 * Revision 1.10  1996/05/30  11:29:41  jimz
 * Numerous bug fixes. Stripe lock release code disagreed with the taking code
 * about when stripes should be locked (I made it consistent: no parity, no lock)
 * There was a lot of extra serialization of I/Os which I've removed- a lot of
 * it was to calculate values for the cache code, which is no longer with us.
 * More types, function, macro cleanup. Added code to properly quiesce the array
 * on shutdown. Made a lot of stuff array-specific which was (bogusly) general
 * before. Fixed memory allocation, freeing bugs.
 *
 * Revision 1.9  1996/05/27  18:56:37  jimz
 * more code cleanup
 * better typing
 * compiles in all 3 environments
 *
 * Revision 1.8  1996/05/24  01:59:45  jimz
 * another checkpoint in code cleanup for release
 * time to sync kernel tree
 *
 * Revision 1.7  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.6  1996/05/02  22:06:57  jimz
 * add RF_RaidDisk_t
 *
 * Revision 1.5  1995/12/01  15:56:53  root
 * added copyright info
 *
a40 3
#ifdef SIMULATE
#include "rf_geometry.h"
#endif /* SIMULATE  */
d47 11
a57 7
  rf_ds_optimal,        /* no problems */
  rf_ds_failed,         /* reconstruction ongoing */
  rf_ds_reconstructing, /* reconstruction complete to spare, dead disk not yet replaced */
  rf_ds_dist_spared,    /* reconstruction complete to distributed spare space, dead disk not yet replaced */
  rf_ds_spared,         /* reconstruction complete to distributed spare space, dead disk not yet replaced */
  rf_ds_spare,          /* an available spare disk */
  rf_ds_used_spare      /* a spare which has been used, and hence is not available */
d62 15
a76 15
  char              devname[56]; /* name of device file */
  RF_DiskStatus_t   status;      /* whether it is up or down */
  RF_RowCol_t       spareRow;    /* if in status "spared", this identifies the spare disk */
  RF_RowCol_t       spareCol;    /* if in status "spared", this identifies the spare disk */
  RF_SectorCount_t  numBlocks;   /* number of blocks, obtained via READ CAPACITY */
  int               blockSize;
	/* XXX the folling is needed since we seem to need SIMULATE defined
	   in order to get user-land stuff to compile, but we *don't* want
	   this in the structure for the user-land utilities, as the
	   kernel doesn't know about it!! (and it messes up the size of
	   the structure, so there is a communication problem between
	   the kernel and the userland utils :-(  GO */
#if defined(SIMULATE) && !defined(RF_UTILITY)
  RF_DiskState_t    diskState;   /* the name of the disk as used in the disk module */
#endif /* SIMULATE */
d78 4
a81 4
  RF_uint64         nreads;
  RF_uint64         nwrites;
#endif /* RF_KEEP_DISKSTATS > 0 */
  dev_t             dev;
a82 1

d95 10
a104 13
int rf_ConfigureDisks(RF_ShutdownList_t **listp, RF_Raid_t *raidPtr,
	RF_Config_t *cfgPtr);
int rf_ConfigureSpareDisks(RF_ShutdownList_t **listp, RF_Raid_t *raidPtr,
	RF_Config_t *cfgPtr);
int rf_ConfigureDisk(RF_Raid_t *raidPtr, char *buf, RF_RaidDisk_t *diskPtr, 
		     RF_DiskOp_t *rdcap_op, RF_DiskOp_t *tur_op, dev_t dev, 
		     RF_RowCol_t row, RF_RowCol_t col);

#ifdef SIMULATE
void rf_default_disk_names(void);
void rf_set_disk_db_name(char *s);
void rf_set_disk_type_name(char *s);
#endif /* SIMULATE */
d106 1
a106 1
#endif /* !_RF__RF_DISKS_H_ */
@

