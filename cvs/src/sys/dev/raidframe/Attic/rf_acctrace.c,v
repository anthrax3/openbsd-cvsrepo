head	1.5;
access;
symbols
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.38
	OPENBSD_5_0:1.4.0.36
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.34
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.32
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.28
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.30
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.26
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.24
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.22
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.20
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.18
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.16
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.14
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.12
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.10
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.8
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.3.0.16
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.14
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.12
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.10
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.8
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.2
	SMP_BASE:1.3
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.4;

1.4
date	2002.12.16.07.01.02;	author tdeval;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.07.14.50.19;	author peter;	state Exp;
branches
	1.3.2.1
	1.3.12.1;
next	1.2;

1.2
date	99.02.16.00.02.21;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.28.58;	author niklas;	state Exp;
branches;
next	;

1.3.2.1
date	2003.03.28.00.38.26;	author niklas;	state Exp;
branches;
next	;

1.3.12.1
date	2003.05.19.22.21.50;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_acctrace.c,v 1.4 2002/12/16 07:01:02 tdeval Exp $	*/
/*	$NetBSD: rf_acctrace.c,v 1.4 1999/08/13 03:41:52 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*****************************************************************************
 *
 * acctrace.c -- Code to support collecting information about each access.
 *
 *****************************************************************************/


#include <sys/stat.h>
#include <sys/types.h>

#include "rf_threadstuff.h"
#include "rf_types.h"
#include "rf_debugMem.h"
#include "rf_acctrace.h"
#include "rf_general.h"
#include "rf_raid.h"
#include "rf_etimer.h"
#include "rf_hist.h"
#include "rf_shutdown.h"

static long numTracesSoFar;
static int accessTraceBufCount = 0;
static RF_AccTraceEntry_t *access_tracebuf;
static long traceCount;

int	rf_stopCollectingTraces;
RF_DECLARE_MUTEX(rf_tracing_mutex);
int	rf_trace_fd;

void rf_ShutdownAccessTrace(void *);

void
rf_ShutdownAccessTrace(void *ignored)
{
	if (rf_accessTraceBufSize) {
		if (accessTraceBufCount)
			rf_FlushAccessTraceBuf();
		RF_Free(access_tracebuf, rf_accessTraceBufSize *
		    sizeof(RF_AccTraceEntry_t));
	}
	rf_mutex_destroy(&rf_tracing_mutex);
}

int
rf_ConfigureAccessTrace(RF_ShutdownList_t **listp)
{
	int rc;

	numTracesSoFar = accessTraceBufCount = rf_stopCollectingTraces = 0;
	if (rf_accessTraceBufSize) {
		RF_Malloc(access_tracebuf, rf_accessTraceBufSize *
		    sizeof(RF_AccTraceEntry_t), (RF_AccTraceEntry_t *));
		accessTraceBufCount = 0;
	}
	traceCount = 0;
	numTracesSoFar = 0;
	rc = rf_mutex_init(&rf_tracing_mutex);
	if (rc) {
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d.\n",
		    __FILE__, __LINE__, rc);
	}
	rc = rf_ShutdownCreate(listp, rf_ShutdownAccessTrace, NULL);
	if (rc) {
		RF_ERRORMSG3("Unable to add to shutdown list file %s line %d"
		    " rc=%d.\n", __FILE__, __LINE__, rc);
		if (rf_accessTraceBufSize) {
			RF_Free(access_tracebuf, rf_accessTraceBufSize *
			    sizeof(RF_AccTraceEntry_t));
			rf_mutex_destroy(&rf_tracing_mutex);
		}
	}
	return (rc);
}

/*
 * Install a trace record. Cause a flush to disk or to the trace collector
 * daemon if the trace buffer is at least 1/2 full.
 */
void
rf_LogTraceRec(RF_Raid_t *raid, RF_AccTraceEntry_t *rec)
{
	RF_AccTotals_t *acc = &raid->acc_totals;
#if 0
	RF_Etimer_t timer;
	int	i, n;
#endif

	if (rf_stopCollectingTraces || ((rf_maxNumTraces >= 0) &&
	    (numTracesSoFar >= rf_maxNumTraces)))
		return;

	/* Update AccTotals for this device. */
	if (!raid->keep_acc_totals)
		return;

	acc->num_log_ents++;
	if (rec->reconacc) {
		acc->recon_start_to_fetch_us +=
		    rec->specific.recon.recon_start_to_fetch_us;
		acc->recon_fetch_to_return_us +=
		    rec->specific.recon.recon_fetch_to_return_us;
		acc->recon_return_to_submit_us +=
		    rec->specific.recon.recon_return_to_submit_us;
		acc->recon_num_phys_ios += rec->num_phys_ios;
		acc->recon_phys_io_us += rec->phys_io_us;
		acc->recon_diskwait_us += rec->diskwait_us;
		acc->recon_reccount++;
	} else {
		RF_HIST_ADD(acc->tot_hist, rec->total_us);
		RF_HIST_ADD(acc->dw_hist, rec->diskwait_us);
		/*
		 * Count of physical IOs that are too big. (often due to
		 * thermal recalibration)
		 *
		 * If bigvals > 0, you should probably ignore this data set.
		 */
		if (rec->diskwait_us > 100000)
			acc->bigvals++;

		acc->total_us += rec->total_us;
		acc->suspend_ovhd_us += rec->specific.user.suspend_ovhd_us;
		acc->map_us += rec->specific.user.map_us;
		acc->lock_us += rec->specific.user.lock_us;
		acc->dag_create_us += rec->specific.user.dag_create_us;
		acc->dag_retry_us += rec->specific.user.dag_retry_us;
		acc->exec_us += rec->specific.user.exec_us;
		acc->cleanup_us += rec->specific.user.cleanup_us;
		acc->exec_engine_us += rec->specific.user.exec_engine_us;
		acc->xor_us += rec->xor_us;
		acc->q_us += rec->q_us;
		acc->plog_us += rec->plog_us;
		acc->diskqueue_us += rec->diskqueue_us;
		acc->diskwait_us += rec->diskwait_us;
		acc->num_phys_ios += rec->num_phys_ios;
		acc->phys_io_us = rec->phys_io_us;
		acc->user_reccount++;
	}
}


/*
 * Assumes the tracing mutex is locked at entry. In order to allow this to
 * be called from interrupt context, we don't do any copyouts here, but rather
 * just wake the trace buffer collector thread.
 */
void
rf_FlushAccessTraceBuf(void)
{
	accessTraceBufCount = 0;
}
@


1.4
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_acctrace.c,v 1.3 2000/01/07 14:50:19 peter Exp $	*/
@


1.3
log
@sync with work by Greg Oster on NetBSD

Please note: This update has *only* been tested on i386 with IDE
disks. Could someone with a spare box please make sure all is OK with
SCSI and maybe other arches ? sparc testing will follow locally.

* remove rf_sys.h
* many changes to make it more stable
* some performance increases
* All raid threads now get their own kernel process and the calling
  raidctl(8) program will show status progress through a meter.
* In theory FFS_SOFTUPDATES and RAIDframe will now work together - NOT
  TESTED YET

See http://www.cs.usask.ca/staff/oster/raid.html

This updates include Greg's changes to Jan 4th 2000.

TODO:
* some odd behaviour when running raictl -c on an already config'ed
  raid set - problem founf, fix being done
* progress meter is in raidctl(8) - seperate commit, but could do with
  sync'ing with OpenBSD ftp version
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_acctrace.c,v 1.2 1999/02/16 00:02:21 niklas Exp $	*/
d3 1
d33 1
a33 1
 * acctrace.c -- code to support collecting information about each access
d56 3
a58 3
int     rf_stopCollectingTraces;
RF_DECLARE_MUTEX(rf_tracing_mutex)
	int     rf_trace_fd;
d60 1
a60 1
	static void rf_ShutdownAccessTrace(void *);
d62 2
a63 2
	static void rf_ShutdownAccessTrace(ignored)
	void   *ignored;
d68 2
a69 1
		RF_Free(access_tracebuf, rf_accessTraceBufSize * sizeof(RF_AccTraceEntry_t));
d74 2
a75 3
int 
rf_ConfigureAccessTrace(listp)
	RF_ShutdownList_t **listp;
d77 1
a77 1
	int     rc;
d81 2
a82 1
		RF_Malloc(access_tracebuf, rf_accessTraceBufSize * sizeof(RF_AccTraceEntry_t), (RF_AccTraceEntry_t *));
d89 2
a90 2
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d\n", __FILE__,
		    __LINE__, rc);
d94 2
a95 2
		RF_ERRORMSG3("Unable to add to shutdown list file %s line %d rc=%d\n", __FILE__,
		    __LINE__, rc);
d97 2
a98 1
			RF_Free(access_tracebuf, rf_accessTraceBufSize * sizeof(RF_AccTraceEntry_t));
d104 4
a107 2
/* install a trace record.  cause a flush to disk or to the trace collector daemon
 * if the trace buffer is at least 1/2 full.
d109 2
a110 4
void 
rf_LogTraceRec(raid, rec)
	RF_Raid_t *raid;
	RF_AccTraceEntry_t *rec;
d115 1
a115 1
	int     i, n;
d118 2
a119 1
	if (rf_stopCollectingTraces || ((rf_maxNumTraces >= 0) && (numTracesSoFar >= rf_maxNumTraces)))
d122 1
a122 1
	/* update AccTotals for this device */
d125 1
d128 6
a133 3
		acc->recon_start_to_fetch_us += rec->specific.recon.recon_start_to_fetch_us;
		acc->recon_fetch_to_return_us += rec->specific.recon.recon_fetch_to_return_us;
		acc->recon_return_to_submit_us += rec->specific.recon.recon_return_to_submit_us;
d141 6
a146 3
		/* count of physical ios which are too big.  often due to
		 * thermal recalibration */
		/* if bigvals > 0, you should probably ignore this data set */
d149 1
d171 4
a174 3
/* assumes the tracing mutex is locked at entry.  In order to allow this to be called
 * from interrupt context, we don't do any copyouts here, but rather just wake trace
 * buffer collector thread.
d176 2
a177 2
void 
rf_FlushAccessTraceBuf()
@


1.3.12.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d32 1
a32 1
 * acctrace.c -- Code to support collecting information about each access.
d55 3
a57 3
int	rf_stopCollectingTraces;
RF_DECLARE_MUTEX(rf_tracing_mutex);
int	rf_trace_fd;
d59 1
a59 1
void rf_ShutdownAccessTrace(void *);
d61 2
a62 2
void
rf_ShutdownAccessTrace(void *ignored)
d67 1
a67 2
		RF_Free(access_tracebuf, rf_accessTraceBufSize *
		    sizeof(RF_AccTraceEntry_t));
d72 3
a74 2
int
rf_ConfigureAccessTrace(RF_ShutdownList_t **listp)
d76 1
a76 1
	int rc;
d80 1
a80 2
		RF_Malloc(access_tracebuf, rf_accessTraceBufSize *
		    sizeof(RF_AccTraceEntry_t), (RF_AccTraceEntry_t *));
d87 2
a88 2
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d.\n",
		    __FILE__, __LINE__, rc);
d92 2
a93 2
		RF_ERRORMSG3("Unable to add to shutdown list file %s line %d"
		    " rc=%d.\n", __FILE__, __LINE__, rc);
d95 1
a95 2
			RF_Free(access_tracebuf, rf_accessTraceBufSize *
			    sizeof(RF_AccTraceEntry_t));
d101 2
a102 4

/*
 * Install a trace record. Cause a flush to disk or to the trace collector
 * daemon if the trace buffer is at least 1/2 full.
d104 4
a107 2
void
rf_LogTraceRec(RF_Raid_t *raid, RF_AccTraceEntry_t *rec)
d112 1
a112 1
	int	i, n;
d115 1
a115 2
	if (rf_stopCollectingTraces || ((rf_maxNumTraces >= 0) &&
	    (numTracesSoFar >= rf_maxNumTraces)))
d118 1
a118 1
	/* Update AccTotals for this device. */
a120 1

d123 3
a125 6
		acc->recon_start_to_fetch_us +=
		    rec->specific.recon.recon_start_to_fetch_us;
		acc->recon_fetch_to_return_us +=
		    rec->specific.recon.recon_fetch_to_return_us;
		acc->recon_return_to_submit_us +=
		    rec->specific.recon.recon_return_to_submit_us;
d133 3
a135 6
		/*
		 * Count of physical IOs that are too big. (often due to
		 * thermal recalibration)
		 *
		 * If bigvals > 0, you should probably ignore this data set.
		 */
a137 1

d159 3
a161 4
/*
 * Assumes the tracing mutex is locked at entry. In order to allow this to
 * be called from interrupt context, we don't do any copyouts here, but rather
 * just wake the trace buffer collector thread.
d163 2
a164 2
void
rf_FlushAccessTraceBuf(void)
@


1.3.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d32 1
a32 1
 * acctrace.c -- Code to support collecting information about each access.
d55 3
a57 3
int	rf_stopCollectingTraces;
RF_DECLARE_MUTEX(rf_tracing_mutex);
int	rf_trace_fd;
d59 1
a59 1
void rf_ShutdownAccessTrace(void *);
d61 2
a62 2
void
rf_ShutdownAccessTrace(void *ignored)
d67 1
a67 2
		RF_Free(access_tracebuf, rf_accessTraceBufSize *
		    sizeof(RF_AccTraceEntry_t));
d72 3
a74 2
int
rf_ConfigureAccessTrace(RF_ShutdownList_t **listp)
d76 1
a76 1
	int rc;
d80 1
a80 2
		RF_Malloc(access_tracebuf, rf_accessTraceBufSize *
		    sizeof(RF_AccTraceEntry_t), (RF_AccTraceEntry_t *));
d87 2
a88 2
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d.\n",
		    __FILE__, __LINE__, rc);
d92 2
a93 2
		RF_ERRORMSG3("Unable to add to shutdown list file %s line %d"
		    " rc=%d.\n", __FILE__, __LINE__, rc);
d95 1
a95 2
			RF_Free(access_tracebuf, rf_accessTraceBufSize *
			    sizeof(RF_AccTraceEntry_t));
d101 2
a102 4

/*
 * Install a trace record. Cause a flush to disk or to the trace collector
 * daemon if the trace buffer is at least 1/2 full.
d104 4
a107 2
void
rf_LogTraceRec(RF_Raid_t *raid, RF_AccTraceEntry_t *rec)
d112 1
a112 1
	int	i, n;
d115 1
a115 2
	if (rf_stopCollectingTraces || ((rf_maxNumTraces >= 0) &&
	    (numTracesSoFar >= rf_maxNumTraces)))
d118 1
a118 1
	/* Update AccTotals for this device. */
a120 1

d123 3
a125 6
		acc->recon_start_to_fetch_us +=
		    rec->specific.recon.recon_start_to_fetch_us;
		acc->recon_fetch_to_return_us +=
		    rec->specific.recon.recon_fetch_to_return_us;
		acc->recon_return_to_submit_us +=
		    rec->specific.recon.recon_return_to_submit_us;
d133 3
a135 6
		/*
		 * Count of physical IOs that are too big. (often due to
		 * thermal recalibration)
		 *
		 * If bigvals > 0, you should probably ignore this data set.
		 */
a137 1

d159 3
a161 4
/*
 * Assumes the tracing mutex is locked at entry. In order to allow this to
 * be called from interrupt context, we don't do any copyouts here, but rather
 * just wake the trace buffer collector thread.
d163 2
a164 2
void
rf_FlushAccessTraceBuf(void)
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_acctrace.c,v 1.1 1999/01/11 14:28:58 niklas Exp $	*/
/*	$NetBSD: rf_acctrace.c,v 1.3 1999/02/05 00:06:06 oster Exp $	*/
a48 1
#include "rf_sys.h"
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_acctrace.c,v 1.1 1998/11/13 04:20:26 oster Exp $	*/
/*	$NetBSD: rf_acctrace.c,v 1.1 1998/11/13 04:20:26 oster Exp $	*/
d31 1
a31 1
 * 
a35 69
/* :  
 * Log: rf_acctrace.c,v 
 * Revision 1.29  1996/07/27 23:36:08  jimz
 * Solaris port of simulator
 *
 * Revision 1.28  1996/07/17  21:00:58  jimz
 * clean up timer interface, tracing
 *
 * Revision 1.27  1996/06/14  14:35:24  jimz
 * clean up dfstrace protection
 *
 * Revision 1.26  1996/06/13  19:09:04  jimz
 * remove trace.dat file before beginning
 *
 * Revision 1.25  1996/06/12  04:41:26  jimz
 * tweaks to make genplot work with user-level driver
 * (mainly change stat collection)
 *
 * Revision 1.24  1996/06/10  11:55:47  jimz
 * Straightened out some per-array/not-per-array distinctions, fixed
 * a couple bugs related to confusion. Added shutdown lists. Removed
 * layout shutdown function (now subsumed by shutdown lists).
 *
 * Revision 1.23  1996/06/09  02:36:46  jimz
 * lots of little crufty cleanup- fixup whitespace
 * issues, comment #ifdefs, improve typing in some
 * places (esp size-related)
 *
 * Revision 1.22  1996/06/05  18:06:02  jimz
 * Major code cleanup. The Great Renaming is now done.
 * Better modularity. Better typing. Fixed a bunch of
 * synchronization bugs. Made a lot of global stuff
 * per-desc or per-array. Removed dead code.
 *
 * Revision 1.21  1996/05/31  22:26:54  jimz
 * fix a lot of mapping problems, memory allocation problems
 * found some weird lock issues, fixed 'em
 * more code cleanup
 *
 * Revision 1.20  1996/05/30  23:22:16  jimz
 * bugfixes of serialization, timing problems
 * more cleanup
 *
 * Revision 1.19  1996/05/30  12:59:18  jimz
 * make etimer happier, more portable
 *
 * Revision 1.18  1996/05/27  18:56:37  jimz
 * more code cleanup
 * better typing
 * compiles in all 3 environments
 *
 * Revision 1.17  1996/05/23  00:33:23  jimz
 * code cleanup: move all debug decls to rf_options.c, all extern
 * debug decls to rf_options.h, all debug vars preceded by rf_
 *
 * Revision 1.16  1996/05/20  16:15:49  jimz
 * switch to rf_{mutex,cond}_{init,destroy}
 *
 * Revision 1.15  1996/05/18  20:10:00  jimz
 * bit of cleanup to compile cleanly in kernel, once again
 *
 * Revision 1.14  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.13  1995/11/30  16:26:43  wvcii
 * added copyright info
 *
 */
d37 2
a38 3
#ifdef _KERNEL
#define KERNEL
#endif
a41 13
#include <sys/stat.h>
#include <sys/types.h>

#ifdef KERNEL
#if !defined(__NetBSD__) && !defined(__OpenBSD__)
#include <dfstrace.h>
#endif /* !__NetBSD__ && !__OpenBSD__ */
#if DFSTRACE > 0
#include <sys/dfs_log.h>
#include <sys/dfstracebuf.h>
#endif /* DFSTRACE > 0 */
#endif /* KERNEL */

d56 1
a56 1
int  rf_stopCollectingTraces;
d58 1
a58 1
int rf_trace_fd;
d60 1
a60 1
static void rf_ShutdownAccessTrace(void *);
d62 2
a63 2
static void rf_ShutdownAccessTrace(ignored)
  void  *ignored;
d65 6
a70 11
  if (rf_accessTraceBufSize) {
    if (accessTraceBufCount) rf_FlushAccessTraceBuf();
#ifndef KERNEL
    close(rf_trace_fd);
#endif /* !KERNEL */
    RF_Free(access_tracebuf, rf_accessTraceBufSize * sizeof(RF_AccTraceEntry_t));
  }
  rf_mutex_destroy(&rf_tracing_mutex);
#if defined(KERNEL) && DFSTRACE > 0
  printf("RAIDFRAME: %d trace entries were sent to dfstrace\n",traceCount);
#endif /* KERNEL && DFSTRACE > 0 */
d73 3
a75 2
int rf_ConfigureAccessTrace(listp)
  RF_ShutdownList_t  **listp;
d77 1
a77 1
  int rc;
d79 22
a100 37
  numTracesSoFar = accessTraceBufCount = rf_stopCollectingTraces = 0;
  if (rf_accessTraceBufSize) {
    RF_Malloc(access_tracebuf, rf_accessTraceBufSize * sizeof(RF_AccTraceEntry_t), (RF_AccTraceEntry_t *));
    accessTraceBufCount = 0;
#ifndef KERNEL
    rc = unlink("trace.dat");
    if (rc && (errno != ENOENT)) {
      perror("unlink");
      RF_ERRORMSG("Unable to remove existing trace.dat\n");
      return(errno);
    }
    if ((rf_trace_fd = open("trace.dat",O_WRONLY|O_CREAT|O_TRUNC, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH)) < 0 ) {
      perror("Unable to open trace.dat for output");
      return(errno);
    }
#endif /* !KERNEL */
  }
  traceCount = 0;
  numTracesSoFar = 0;
  rc = rf_mutex_init(&rf_tracing_mutex);
  if (rc) {
    RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d\n", __FILE__,
      __LINE__, rc);
  }
  rc = rf_ShutdownCreate(listp, rf_ShutdownAccessTrace, NULL);
  if (rc) {
    RF_ERRORMSG3("Unable to add to shutdown list file %s line %d rc=%d\n", __FILE__,
      __LINE__, rc);
    if (rf_accessTraceBufSize) {
      RF_Free(access_tracebuf, rf_accessTraceBufSize * sizeof(RF_AccTraceEntry_t));
#ifndef KERNEL
      close(rf_trace_fd);
#endif /* !KERNEL */
      rf_mutex_destroy(&rf_tracing_mutex);
    }
  }
  return(rc);
a101 1

d105 4
a108 3
void rf_LogTraceRec(raid, rec)
  RF_Raid_t           *raid;
  RF_AccTraceEntry_t  *rec;
d113 1
a113 1
	int i, n;
d116 2
a117 2
  if (rf_stopCollectingTraces || ((rf_maxNumTraces >= 0) && (numTracesSoFar >= rf_maxNumTraces)))
    return;
a118 16
#ifndef KERNEL
  if (rf_accessTraceBufSize) {
    RF_LOCK_MUTEX(rf_tracing_mutex);
    numTracesSoFar++;
    bcopy((char *)rec, (char *)&access_tracebuf[ accessTraceBufCount++ ], sizeof(RF_AccTraceEntry_t));
    if (accessTraceBufCount == rf_accessTraceBufSize)
      rf_FlushAccessTraceBuf();
    RF_UNLOCK_MUTEX(rf_tracing_mutex);
  }
#endif /* !KERNEL */
#if defined(KERNEL) && DFSTRACE > 0
  rec->index = traceCount++;
  if (traceon & DFS_TRACE_RAIDFRAME) {
    dfs_log(DFS_NOTE, (char *) rec, (int) sizeof(*rec), 0);
  }
#endif /* KERNEL && DFSTRACE > 0 */
d131 1
a131 2
	}
	else {
d134 2
a135 1
		/* count of physical ios which are too big.  often due to thermal recalibration */
d164 2
a165 1
void rf_FlushAccessTraceBuf()
d167 1
a167 11
#ifndef KERNEL
  int size = accessTraceBufCount * sizeof(RF_AccTraceEntry_t);
  
  if (write(rf_trace_fd, (char *) access_tracebuf, size) < size ) {
    fprintf(stderr, "Unable to write traces to file.  tracing disabled\n");
    RF_Free(access_tracebuf, rf_accessTraceBufSize * sizeof(RF_AccTraceEntry_t));
    rf_accessTraceBufSize = 0;
    close(rf_trace_fd);
  }
#endif /* !KERNEL */
  accessTraceBufCount = 0;
@

