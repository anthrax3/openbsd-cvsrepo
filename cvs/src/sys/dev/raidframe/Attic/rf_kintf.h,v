head	1.9;
access;
symbols
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.38
	OPENBSD_5_0:1.8.0.36
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.34
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.32
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.28
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.30
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.26
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.24
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.22
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.20
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.18
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.16
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.14
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.12
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.10
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.8
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.6
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.4
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.6.0.8
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.6
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.2
	SMP_BASE:1.5
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.8;

1.8
date	2002.12.16.07.01.04;	author tdeval;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.29.21.51.18;	author tdeval;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.08.16.07.41;	author peter;	state Exp;
branches
	1.6.8.1;
next	1.5;

1.5
date	2000.01.11.18.02.22;	author peter;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2000.01.07.14.50.21;	author peter;	state Exp;
branches;
next	1.3;

1.3
date	99.07.30.14.45.32;	author peter;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.02.53;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.29.27;	author niklas;	state Exp;
branches;
next	;

1.5.2.1
date	2001.05.14.22.26.11;	author niklas;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2002.03.06.02.11.47;	author niklas;	state Exp;
branches;
next	1.5.2.3;

1.5.2.3
date	2003.03.28.00.38.28;	author niklas;	state Exp;
branches;
next	;

1.6.8.1
date	2002.01.31.22.55.38;	author niklas;	state Exp;
branches;
next	1.6.8.2;

1.6.8.2
date	2003.05.19.22.21.52;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_kintf.h,v 1.8 2002/12/16 07:01:04 tdeval Exp $	*/
/*	$NetBSD: rf_kintf.h,v 1.15 2000/10/20 02:24:45 oster Exp $	*/

/*
 * rf_kintf.h
 *
 * RAIDframe exported kernel interface.
 */
/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Jim Zelenka
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#ifndef	_RF__RF_KINTF_H_
#define	_RF__RF_KINTF_H_

#include "rf_types.h"

int  rf_GetSpareTableFromDaemon(RF_SparetWait_t *);
void raidstart(RF_Raid_t *raidPtr);
int  rf_DispatchKernelIO(RF_DiskQueue_t *, RF_DiskQueueData_t *);

int  raidwrite_component_label(dev_t, struct vnode *, RF_ComponentLabel_t *);
int  raidread_component_label(dev_t, struct vnode *, RF_ComponentLabel_t *);

#define	RF_NORMAL_COMPONENT_UPDATE	0
#define	RF_FINAL_COMPONENT_UPDATE	1
void rf_update_component_labels(RF_Raid_t *, int);
int  raidlookup(char *, struct proc *, struct vnode **);
int  raidmarkclean(dev_t dev, struct vnode *b_vp, int);
int  raidmarkdirty(dev_t dev, struct vnode *b_vp, int);
void raid_init_component_label(RF_Raid_t *, RF_ComponentLabel_t *);
void rf_print_component_label(RF_ComponentLabel_t *);
void rf_UnconfigureVnodes( RF_Raid_t * );
void rf_close_component( RF_Raid_t *, struct vnode *, int);
void rf_disk_unbusy(RF_RaidAccessDesc_t *);
#endif	/* _RF__RF_KINTF_H_ */
@


1.8
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_kintf.h,v 1.7 2001/12/29 21:51:18 tdeval Exp $	*/
@


1.7
log
@Enable the RAIDFrame auto-configuration feature.
This permits one to setup a kernel able to automatically retrieve, during
boot, the raid configuration from disks previously used in a RAIDFrame
set.  Moreover, one can define a raid set to contain a bootable partition
that will be mounted on / before the system has started.
A new RAID_AUTOCONFIG kernel option is used, in conjunction with the raid
pseudo-device, to activate the feature.

ok drahn@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_kintf.h,v 1.6 2000/08/08 16:07:41 peter Exp $	*/
d3 1
d7 1
a7 1
 * RAIDframe exported kernel interface
d36 2
a37 2
#ifndef _RF__RF_KINTF_H_
#define _RF__RF_KINTF_H_
d41 3
a43 3
int     rf_GetSpareTableFromDaemon(RF_SparetWait_t * req);
void    raidstart(RF_Raid_t * raidPtr);
int     rf_DispatchKernelIO(RF_DiskQueue_t * queue, RF_DiskQueueData_t * req);
d45 2
a46 2
int raidwrite_component_label(dev_t, struct vnode *, RF_ComponentLabel_t *);
int raidread_component_label(dev_t, struct vnode *, RF_ComponentLabel_t *);
d48 2
a49 2
#define RF_NORMAL_COMPONENT_UPDATE 0
#define RF_FINAL_COMPONENT_UPDATE 1
d51 3
a53 3
int raidlookup(char *, struct proc *, struct vnode **);
int raidmarkclean(dev_t dev, struct vnode *b_vp, int);
int raidmarkdirty(dev_t dev, struct vnode *b_vp, int);
d59 1
a59 1
#endif				/* _RF__RF_KINTF_H_ */
@


1.6
log
@sync RAIDframe with Gre Oster's work for NetBSD.

This update incorporates changes since January 2000.

RAID1 and RAID5 tested for functionality matching the 2.7 code. A
number of bug fixes (including stopping a parity rebuild when
unconfiguring) have been included. See Greg's RAIDframe info page:

	http://www.cs.usask.ca/staff/oster/raid.html

The RAID_AUTOCONFIG feature set does *NOT* yet work. These features
require more work throughout the boot system and as such are a big
task.

IMPORTANT: As with anything that is this near live data on your
systems, please test carefully with existing configurations before
deploying in a live system.  Feedback via sendbug or mail direct
to peter@@wonderland.org is appreciated.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_kintf.h,v 1.5 2000/01/11 18:02:22 peter Exp $	*/
/*	$NetBSD: rf_kintf.h,v 1.14 2000/06/04 02:05:13 oster Exp $	*/
d57 1
@


1.6.8.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_kintf.h,v 1.7 2001/12/29 21:51:18 tdeval Exp $	*/
/*	$NetBSD: rf_kintf.h,v 1.15 2000/10/20 02:24:45 oster Exp $	*/
a56 1
void rf_disk_unbusy(RF_RaidAccessDesc_t *);
@


1.6.8.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d6 1
a6 1
 * RAIDframe exported kernel interface.
d35 2
a36 2
#ifndef	_RF__RF_KINTF_H_
#define	_RF__RF_KINTF_H_
d40 3
a42 3
int  rf_GetSpareTableFromDaemon(RF_SparetWait_t *);
void raidstart(RF_Raid_t *raidPtr);
int  rf_DispatchKernelIO(RF_DiskQueue_t *, RF_DiskQueueData_t *);
d44 2
a45 2
int  raidwrite_component_label(dev_t, struct vnode *, RF_ComponentLabel_t *);
int  raidread_component_label(dev_t, struct vnode *, RF_ComponentLabel_t *);
d47 2
a48 2
#define	RF_NORMAL_COMPONENT_UPDATE	0
#define	RF_FINAL_COMPONENT_UPDATE	1
d50 3
a52 3
int  raidlookup(char *, struct proc *, struct vnode **);
int  raidmarkclean(dev_t dev, struct vnode *b_vp, int);
int  raidmarkdirty(dev_t dev, struct vnode *b_vp, int);
d58 1
a58 1
#endif	/* _RF__RF_KINTF_H_ */
@


1.5
log
@sync with NetBSD

- removed threadid stuff
- removed unused files
- general tidyup
- you can no longer configure the same unit twice (without
de-configuring first of course).

Again, this has only been tested locally on IDE disks. Further testing
and feedback would be appreciated.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_kintf.h,v 1.4 2000/01/07 14:50:21 peter Exp $	*/
/*	$NetBSD: rf_kintf.h,v 1.7 2000/01/09 01:29:27 oster Exp $	*/
d46 5
a50 2
void rf_update_component_labels( RF_Raid_t *);
int raidlookup __P((char *, struct proc *, struct vnode **));
d53 4
a56 1

@


1.5.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_kintf.h,v 1.6 2000/08/08 16:07:41 peter Exp $	*/
/*	$NetBSD: rf_kintf.h,v 1.14 2000/06/04 02:05:13 oster Exp $	*/
d46 2
a47 5

#define RF_NORMAL_COMPONENT_UPDATE 0
#define RF_FINAL_COMPONENT_UPDATE 1
void rf_update_component_labels(RF_Raid_t *, int);
int raidlookup(char *, struct proc *, struct vnode **);
d50 1
a50 4
void raid_init_component_label(RF_Raid_t *, RF_ComponentLabel_t *);
void rf_print_component_label(RF_ComponentLabel_t *);
void rf_UnconfigureVnodes( RF_Raid_t * );
void rf_close_component( RF_Raid_t *, struct vnode *, int);
@


1.5.2.2
log
@Merge in trunk
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: rf_kintf.h,v 1.15 2000/10/20 02:24:45 oster Exp $	*/
a56 1
void rf_disk_unbusy(RF_RaidAccessDesc_t *);
@


1.5.2.3
log
@Sync the SMP branch with 3.3
@
text
@a2 1

d6 1
a6 1
 * RAIDframe exported kernel interface.
d35 2
a36 2
#ifndef	_RF__RF_KINTF_H_
#define	_RF__RF_KINTF_H_
d40 3
a42 3
int  rf_GetSpareTableFromDaemon(RF_SparetWait_t *);
void raidstart(RF_Raid_t *raidPtr);
int  rf_DispatchKernelIO(RF_DiskQueue_t *, RF_DiskQueueData_t *);
d44 2
a45 2
int  raidwrite_component_label(dev_t, struct vnode *, RF_ComponentLabel_t *);
int  raidread_component_label(dev_t, struct vnode *, RF_ComponentLabel_t *);
d47 2
a48 2
#define	RF_NORMAL_COMPONENT_UPDATE	0
#define	RF_FINAL_COMPONENT_UPDATE	1
d50 3
a52 3
int  raidlookup(char *, struct proc *, struct vnode **);
int  raidmarkclean(dev_t dev, struct vnode *b_vp, int);
int  raidmarkdirty(dev_t dev, struct vnode *b_vp, int);
d58 1
a58 1
#endif	/* _RF__RF_KINTF_H_ */
@


1.4
log
@sync with work by Greg Oster on NetBSD

Please note: This update has *only* been tested on i386 with IDE
disks. Could someone with a spare box please make sure all is OK with
SCSI and maybe other arches ? sparc testing will follow locally.

* remove rf_sys.h
* many changes to make it more stable
* some performance increases
* All raid threads now get their own kernel process and the calling
  raidctl(8) program will show status progress through a meter.
* In theory FFS_SOFTUPDATES and RAIDframe will now work together - NOT
  TESTED YET

See http://www.cs.usask.ca/staff/oster/raid.html

This updates include Greg's changes to Jan 4th 2000.

TODO:
* some odd behaviour when running raictl -c on an already config'ed
  raid set - problem founf, fix being done
* progress meter is in raidctl(8) - seperate commit, but could do with
  sync'ing with OpenBSD ftp version
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_kintf.h,v 1.3 1999/07/30 14:45:32 peter Exp $	*/
/*	$NetBSD: rf_kintf.h,v 1.6 2000/01/05 02:57:29 oster Exp $	*/
d43 7
@


1.3
log
@Update RAIDframe from NetBSD-current as of 1999/07/26.

Please note that you *must* follow the upgrade instructions at

	http://www.cs.usask.ca/staff/oster/clabel_upgrade.html

before installing the new raidctl and new kernel using this code.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_kintf.h,v 1.2 1999/02/16 00:02:53 niklas Exp $	*/
/*	$NetBSD: rf_kintf.h,v 1.4 1999/03/09 03:52:41 oster Exp $	*/
a39 10
int     rf_boot(void);
int     rf_open(dev_t dev, int flag, int fmt);
int     rf_close(dev_t dev, int flag, int fmt);
void    rf_strategy(struct buf * bp);
void    rf_minphys(struct buf * bp);
int     rf_read(dev_t dev, struct uio * uio);
int     rf_write(dev_t dev, struct uio * uio);
int     rf_size(dev_t dev);
int     rf_ioctl(dev_t dev, int cmd, caddr_t data, int flag);
void    rf_ReconKernelThread(void);
d41 2
a42 5
caddr_t rf_MapToKernelSpace(struct buf * bp, caddr_t addr);
int     rf_BzeroWithRemap(struct buf * bp, char *databuf, int len);
int	rf_DoAccessKernel(RF_Raid_t * raidPtr, struct buf * bp,
    RF_RaidAccessFlags_t flags, void (*cbFunc) (struct buf *), void *cbArg);
	int     rf_DispatchKernelIO(RF_DiskQueue_t * queue, RF_DiskQueueData_t * req);
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_kintf.h,v 1.1 1999/01/11 14:29:27 niklas Exp $	*/
/*	$NetBSD: rf_kintf.h,v 1.3 1999/02/05 00:06:12 oster Exp $	*/
d53 1
a53 2
int 
rf_DoAccessKernel(RF_Raid_t * raidPtr, struct buf * bp,
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_kintf.h,v 1.1 1998/11/13 04:20:30 oster Exp $	*/
/*	$NetBSD: rf_kintf.h,v 1.1 1998/11/13 04:20:30 oster Exp $	*/
a33 14
/*
 * :  
 * Log: rf_kintf.h,v 
 * Revision 1.2  1996/06/03 23:28:26  jimz
 * more bugfixes
 * check in tree to sync for IPDS runs with current bugfixes
 * there still may be a problem with threads in the script test
 * getting I/Os stuck- not trivially reproducible (runs ~50 times
 * in a row without getting stuck)
 *
 * Revision 1.1  1996/05/31  18:59:14  jimz
 * Initial revision
 *
 */
d40 17
a56 16
int rf_boot(void);
int rf_open(dev_t dev, int flag, int fmt);
int rf_close(dev_t dev, int flag, int fmt);
void rf_strategy(struct buf *bp);
void rf_minphys(struct buf *bp);
int rf_read(dev_t dev, struct uio *uio);
int rf_write(dev_t dev, struct uio *uio);
int rf_size(dev_t dev);
int rf_ioctl(dev_t dev, int cmd, caddr_t data, int flag);
void rf_ReconKernelThread(void);
int rf_GetSpareTableFromDaemon(RF_SparetWait_t *req);
caddr_t rf_MapToKernelSpace(struct buf *bp, caddr_t addr);
int rf_BzeroWithRemap(struct buf *bp, char *databuf, int len);
int rf_DoAccessKernel(RF_Raid_t *raidPtr, struct buf *bp,
	RF_RaidAccessFlags_t flags, void (*cbFunc)(struct buf *), void *cbArg);
int rf_DispatchKernelIO(RF_DiskQueue_t *queue, RF_DiskQueueData_t *req);
d58 1
a58 1
#endif /* _RF__RF_KINTF_H_ */
@

