head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.03;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.02.24;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.00;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.27;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.51;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_callback.c,v 1.3 2002/12/16 07:01:03 tdeval Exp $	*/
/*	$NetBSD: rf_callback.c,v 1.3 1999/02/05 00:06:06 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Jim Zelenka
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*****************************************************************************
 *
 * rf_callback.c -- Code to manipulate callback descriptor.
 *
 *****************************************************************************/


#include "rf_types.h"
#include "rf_threadstuff.h"
#include "rf_callback.h"
#include "rf_debugMem.h"
#include "rf_freelist.h"
#include "rf_shutdown.h"

static RF_FreeList_t *rf_callback_freelist;

void rf_ShutdownCallback(void *);

#define	RF_MAX_FREE_CALLBACK	64
#define	RF_CALLBACK_INC		 4
#define	RF_CALLBACK_INITIAL	 4

void
rf_ShutdownCallback(void *ignored)
{
	RF_FREELIST_DESTROY(rf_callback_freelist, next, (RF_CallbackDesc_t *));
}

int
rf_ConfigureCallback(RF_ShutdownList_t **listp)
{
	int rc;

	RF_FREELIST_CREATE(rf_callback_freelist, RF_MAX_FREE_CALLBACK,
	    RF_CALLBACK_INC, sizeof(RF_CallbackDesc_t));
	if (rf_callback_freelist == NULL)
		return (ENOMEM);
	rc = rf_ShutdownCreate(listp, rf_ShutdownCallback, NULL);
	if (rc) {
		RF_ERRORMSG3("Unable to add to shutdown list file %s line %d"
		    " rc=%d.\n", __FILE__, __LINE__, rc);
		rf_ShutdownCallback(NULL);
		return (rc);
	}
	RF_FREELIST_PRIME(rf_callback_freelist, RF_CALLBACK_INITIAL, next,
	    (RF_CallbackDesc_t *));
	return (0);
}

RF_CallbackDesc_t *
rf_AllocCallbackDesc(void)
{
	RF_CallbackDesc_t *p;

	RF_FREELIST_GET(rf_callback_freelist, p, next, (RF_CallbackDesc_t *));
	return (p);
}

void
rf_FreeCallbackDesc(RF_CallbackDesc_t *p)
{
	RF_FREELIST_FREE(rf_callback_freelist, p, next);
}
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_callback.c,v 1.2 1999/02/16 00:02:24 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_callback.c,v 1.1 1999/01/11 14:29:00 niklas Exp $	*/
d3 1
d31 1
a31 1
/*****************************************************************************************
d33 1
a33 1
 * callback.c -- code to manipulate callback descriptor
d35 1
a35 1
 ****************************************************************************************/
d47 8
a54 8
#define RF_MAX_FREE_CALLBACK 64
#define RF_CALLBACK_INC       4
#define RF_CALLBACK_INITIAL   4

static void rf_ShutdownCallback(void *);
static void 
rf_ShutdownCallback(ignored)
	void   *ignored;
d59 2
a60 3
int 
rf_ConfigureCallback(listp)
	RF_ShutdownList_t **listp;
d62 1
a62 1
	int     rc;
d70 2
a71 2
		RF_ERRORMSG3("Unable to add to shutdown list file %s line %d rc=%d\n", __FILE__,
		    __LINE__, rc);
d81 1
a81 1
rf_AllocCallbackDesc()
d89 2
a90 3
void 
rf_FreeCallbackDesc(p)
	RF_CallbackDesc_t *p;
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/*****************************************************************************
d32 1
a32 1
 * rf_callback.c -- Code to manipulate callback descriptor.
d34 1
a34 1
 *****************************************************************************/
d46 8
a53 8
void rf_ShutdownCallback(void *);

#define	RF_MAX_FREE_CALLBACK	64
#define	RF_CALLBACK_INC		 4
#define	RF_CALLBACK_INITIAL	 4

void
rf_ShutdownCallback(void *ignored)
d58 3
a60 2
int
rf_ConfigureCallback(RF_ShutdownList_t **listp)
d62 1
a62 1
	int rc;
d70 2
a71 2
		RF_ERRORMSG3("Unable to add to shutdown list file %s line %d"
		    " rc=%d.\n", __FILE__, __LINE__, rc);
d81 1
a81 1
rf_AllocCallbackDesc(void)
d89 3
a91 2
void
rf_FreeCallbackDesc(RF_CallbackDesc_t *p)
@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/*****************************************************************************
d32 1
a32 1
 * rf_callback.c -- Code to manipulate callback descriptor.
d34 1
a34 1
 *****************************************************************************/
d46 8
a53 8
void rf_ShutdownCallback(void *);

#define	RF_MAX_FREE_CALLBACK	64
#define	RF_CALLBACK_INC		 4
#define	RF_CALLBACK_INITIAL	 4

void
rf_ShutdownCallback(void *ignored)
d58 3
a60 2
int
rf_ConfigureCallback(RF_ShutdownList_t **listp)
d62 1
a62 1
	int rc;
d70 2
a71 2
		RF_ERRORMSG3("Unable to add to shutdown list file %s line %d"
		    " rc=%d.\n", __FILE__, __LINE__, rc);
d81 1
a81 1
rf_AllocCallbackDesc(void)
d89 3
a91 2
void
rf_FreeCallbackDesc(RF_CallbackDesc_t *p)
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_callback.c,v 1.1 1998/11/13 04:20:26 oster Exp $	*/
/*	$NetBSD: rf_callback.c,v 1.1 1998/11/13 04:20:26 oster Exp $	*/
a35 31
/* :  
 * Log: rf_callback.c,v 
 * Revision 1.11  1996/06/17 03:18:04  jimz
 * include shutdown.h for macroized ShutdownCreate
 *
 * Revision 1.10  1996/06/10  11:55:47  jimz
 * Straightened out some per-array/not-per-array distinctions, fixed
 * a couple bugs related to confusion. Added shutdown lists. Removed
 * layout shutdown function (now subsumed by shutdown lists).
 *
 * Revision 1.9  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.8  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.7  1996/05/17  16:30:41  jimz
 * convert to RF_FREELIST stuff
 *
 * Revision 1.6  1995/12/01  15:16:04  root
 * added copyright info
 *
 */

#ifndef _KERNEL
#ifdef __NetBSD__
#include <unistd.h>
#endif /* __NetBSD__ */
#endif
d51 3
a53 2
static void rf_ShutdownCallback(ignored)
  void  *ignored;
d55 1
a55 1
	RF_FREELIST_DESTROY(rf_callback_freelist,next,(RF_CallbackDesc_t *));
d58 3
a60 2
int rf_ConfigureCallback(listp)
  RF_ShutdownList_t  **listp;
d62 1
a62 1
	int rc;
d65 1
a65 1
		RF_CALLBACK_INC, sizeof(RF_CallbackDesc_t));
d67 1
a67 1
		return(ENOMEM);
d71 1
a71 1
			__LINE__, rc);
d73 1
a73 1
		return(rc);
d75 3
a77 3
	RF_FREELIST_PRIME(rf_callback_freelist, RF_CALLBACK_INITIAL,next,
		(RF_CallbackDesc_t *));
	return(0);
d80 2
a81 1
RF_CallbackDesc_t *rf_AllocCallbackDesc()
d85 2
a86 2
	RF_FREELIST_GET(rf_callback_freelist,p,next,(RF_CallbackDesc_t *));
	return(p);
d89 3
a91 2
void rf_FreeCallbackDesc(p)
  RF_CallbackDesc_t *p;
d93 1
a93 1
	RF_FREELIST_FREE(rf_callback_freelist,p,next);
@

