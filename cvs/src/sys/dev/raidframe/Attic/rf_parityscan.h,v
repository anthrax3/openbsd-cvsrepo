head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.06.15.53.59;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.04;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.03.09;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.38;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.28;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.52;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_parityscan.h,v 1.3 2002/12/16 07:01:04 tdeval Exp $	*/
/*	$NetBSD: rf_parityscan.h,v 1.3 1999/02/05 00:06:14 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#ifndef	_RF__RF_PARITYSCAN_H_
#define	_RF__RF_PARITYSCAN_H_

#include "rf_types.h"
#include "rf_alloclist.h"

int rf_RewriteParity(RF_Raid_t *);
int rf_VerifyParityBasic(RF_Raid_t *, RF_RaidAddr_t, RF_PhysDiskAddr_t *, int,
	RF_RaidAccessFlags_t);
int rf_VerifyParity(RF_Raid_t *, RF_AccessStripeMap_t *, int,
	RF_RaidAccessFlags_t);
int rf_TryToRedirectPDA(RF_Raid_t *, RF_PhysDiskAddr_t *, int);
int rf_VerifyDegrModeWrite(RF_Raid_t *, RF_AccessStripeMapHeader_t *);
RF_DagHeader_t *rf_MakeSimpleDAG(RF_Raid_t *, int, int, char *,
	int (*) (RF_DagNode_t *), int (*) (RF_DagNode_t *), char *,
	RF_AllocListElem_t *, RF_RaidAccessFlags_t, int);

#define	RF_DO_CORRECT_PARITY		1
#define	RF_DONT_CORRECT_PARITY		0

/*
 * Return vals for VerifyParity operation.
 *
 * Ordering is important here.
 */
#define	RF_PARITY_OKAY			0	/* Or no parity information. */
#define	RF_PARITY_CORRECTED		1
#define	RF_PARITY_BAD			2
#define	RF_PARITY_COULD_NOT_CORRECT	3
#define	RF_PARITY_COULD_NOT_VERIFY	4

#endif	/* !_RF__RF_PARITYSCAN_H_ */
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_parityscan.h,v 1.2 1999/02/16 00:03:09 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_parityscan.h,v 1.1 1999/01/11 14:29:38 niklas Exp $	*/
d3 1
d31 2
a32 2
#ifndef _RF__RF_PARITYSCAN_H_
#define _RF__RF_PARITYSCAN_H_
d37 10
a46 16
int     rf_RewriteParity(RF_Raid_t * raidPtr);
int 
rf_VerifyParityBasic(RF_Raid_t * raidPtr, RF_RaidAddr_t raidAddr,
    RF_PhysDiskAddr_t * parityPDA, int correct_it, RF_RaidAccessFlags_t flags);
int 
rf_VerifyParity(RF_Raid_t * raidPtr, RF_AccessStripeMap_t * stripeMap,
    int correct_it, RF_RaidAccessFlags_t flags);
int     rf_TryToRedirectPDA(RF_Raid_t * raidPtr, RF_PhysDiskAddr_t * pda, int parity);
int     rf_VerifyDegrModeWrite(RF_Raid_t * raidPtr, RF_AccessStripeMapHeader_t * asmh);
RF_DagHeader_t *
rf_MakeSimpleDAG(RF_Raid_t * raidPtr, int nNodes,
    int bytesPerSU, char *databuf,
    int (*doFunc) (RF_DagNode_t *),
    int (*undoFunc) (RF_DagNode_t *),
    char *name, RF_AllocListElem_t * alloclist,
    RF_RaidAccessFlags_t flags, int priority);
d48 2
a49 2
#define RF_DO_CORRECT_PARITY   1
#define RF_DONT_CORRECT_PARITY 0
d52 1
a52 1
 * Return vals for VerifyParity operation
d56 5
a60 5
#define RF_PARITY_OKAY               0	/* or no parity information */
#define RF_PARITY_CORRECTED          1
#define RF_PARITY_BAD                2
#define RF_PARITY_COULD_NOT_CORRECT  3
#define RF_PARITY_COULD_NOT_VERIFY   4
d62 1
a62 1
#endif				/* !_RF__RF_PARITYSCAN_H_ */
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 2
a31 2
#ifndef	_RF__RF_PARITYSCAN_H_
#define	_RF__RF_PARITYSCAN_H_
d36 16
a51 10
int rf_RewriteParity(RF_Raid_t *);
int rf_VerifyParityBasic(RF_Raid_t *, RF_RaidAddr_t, RF_PhysDiskAddr_t *, int,
	RF_RaidAccessFlags_t);
int rf_VerifyParity(RF_Raid_t *, RF_AccessStripeMap_t *, int,
	RF_RaidAccessFlags_t);
int rf_TryToRedirectPDA(RF_Raid_t *, RF_PhysDiskAddr_t *, int);
int rf_VerifyDegrModeWrite(RF_Raid_t *, RF_AccessStripeMapHeader_t *);
RF_DagHeader_t *rf_MakeSimpleDAG(RF_Raid_t *, int, int, char *,
	int (*) (RF_DagNode_t *), int (*) (RF_DagNode_t *), char *,
	RF_AllocListElem_t *, RF_RaidAccessFlags_t, int);
d53 2
a54 2
#define	RF_DO_CORRECT_PARITY		1
#define	RF_DONT_CORRECT_PARITY		0
d57 1
a57 1
 * Return vals for VerifyParity operation.
d61 5
a65 5
#define	RF_PARITY_OKAY			0	/* Or no parity information. */
#define	RF_PARITY_CORRECTED		1
#define	RF_PARITY_BAD			2
#define	RF_PARITY_COULD_NOT_CORRECT	3
#define	RF_PARITY_COULD_NOT_VERIFY	4
d67 1
a67 1
#endif	/* !_RF__RF_PARITYSCAN_H_ */
@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 2
a31 2
#ifndef	_RF__RF_PARITYSCAN_H_
#define	_RF__RF_PARITYSCAN_H_
d36 16
a51 10
int rf_RewriteParity(RF_Raid_t *);
int rf_VerifyParityBasic(RF_Raid_t *, RF_RaidAddr_t, RF_PhysDiskAddr_t *, int,
	RF_RaidAccessFlags_t);
int rf_VerifyParity(RF_Raid_t *, RF_AccessStripeMap_t *, int,
	RF_RaidAccessFlags_t);
int rf_TryToRedirectPDA(RF_Raid_t *, RF_PhysDiskAddr_t *, int);
int rf_VerifyDegrModeWrite(RF_Raid_t *, RF_AccessStripeMapHeader_t *);
RF_DagHeader_t *rf_MakeSimpleDAG(RF_Raid_t *, int, int, char *,
	int (*) (RF_DagNode_t *), int (*) (RF_DagNode_t *), char *,
	RF_AllocListElem_t *, RF_RaidAccessFlags_t, int);
d53 2
a54 2
#define	RF_DO_CORRECT_PARITY		1
#define	RF_DONT_CORRECT_PARITY		0
d57 1
a57 1
 * Return vals for VerifyParity operation.
d61 5
a65 5
#define	RF_PARITY_OKAY			0	/* Or no parity information. */
#define	RF_PARITY_CORRECTED		1
#define	RF_PARITY_BAD			2
#define	RF_PARITY_COULD_NOT_CORRECT	3
#define	RF_PARITY_COULD_NOT_VERIFY	4
d67 1
a67 1
#endif	/* !_RF__RF_PARITYSCAN_H_ */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_parityscan.h,v 1.1 1998/11/13 04:20:32 oster Exp $	*/
/*	$NetBSD: rf_parityscan.h,v 1.1 1998/11/13 04:20:32 oster Exp $	*/
a29 54
/* :  
 * Log: rf_parityscan.h,v 
 * Revision 1.14  1996/07/05 18:01:12  jimz
 * don't make parity protos ndef KERNEL
 *
 * Revision 1.13  1996/06/20  17:41:43  jimz
 * change decl for VerifyParity
 *
 * Revision 1.12  1996/06/20  15:38:39  jimz
 * renumber parityscan return codes
 *
 * Revision 1.11  1996/06/19  22:23:01  jimz
 * parity verification is now a layout-configurable thing
 * not all layouts currently support it (correctly, anyway)
 *
 * Revision 1.10  1996/06/09  02:36:46  jimz
 * lots of little crufty cleanup- fixup whitespace
 * issues, comment #ifdefs, improve typing in some
 * places (esp size-related)
 *
 * Revision 1.9  1996/06/07  21:33:04  jimz
 * begin using consistent types for sector numbers,
 * stripe numbers, row+col numbers, recon unit numbers
 *
 * Revision 1.8  1996/06/02  17:31:48  jimz
 * Moved a lot of global stuff into array structure, where it belongs.
 * Fixed up paritylogging, pss modules in this manner. Some general
 * code cleanup. Removed lots of dead code, some dead files.
 *
 * Revision 1.7  1996/05/31  22:26:54  jimz
 * fix a lot of mapping problems, memory allocation problems
 * found some weird lock issues, fixed 'em
 * more code cleanup
 *
 * Revision 1.6  1996/05/24  22:17:04  jimz
 * continue code + namespace cleanup
 * typed a bunch of flags
 *
 * Revision 1.5  1996/05/24  04:28:55  jimz
 * release cleanup ckpt
 *
 * Revision 1.4  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.3  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.2  1995/11/30  16:20:46  wvcii
 * added copyright info
 *
 */

d36 16
a51 13
int rf_RewriteParity(RF_Raid_t *raidPtr);
int rf_VerifyParityBasic(RF_Raid_t *raidPtr, RF_RaidAddr_t raidAddr,
	RF_PhysDiskAddr_t *parityPDA, int correct_it, RF_RaidAccessFlags_t flags);
int rf_VerifyParity(RF_Raid_t *raidPtr, RF_AccessStripeMap_t *stripeMap,
	int correct_it, RF_RaidAccessFlags_t flags);
int rf_TryToRedirectPDA(RF_Raid_t *raidPtr, RF_PhysDiskAddr_t *pda, int parity);
int rf_VerifyDegrModeWrite(RF_Raid_t *raidPtr, RF_AccessStripeMapHeader_t *asmh);
RF_DagHeader_t *rf_MakeSimpleDAG(RF_Raid_t *raidPtr, int nNodes, 
				 int bytesPerSU, char *databuf, 
				 int (*doFunc)(RF_DagNode_t *), 
				 int (*undoFunc)(RF_DagNode_t *), 
				 char *name, RF_AllocListElem_t *alloclist,
				 RF_RaidAccessFlags_t flags, int priority);
d61 1
a61 1
#define RF_PARITY_OKAY               0 /* or no parity information */
d67 1
a67 1
#endif /* !_RF__RF_PARITYSCAN_H_ */
@

