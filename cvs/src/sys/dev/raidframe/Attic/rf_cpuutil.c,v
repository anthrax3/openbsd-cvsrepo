head	1.4;
access;
symbols
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	UBC_SYNC_A:1.4
	UBC_SYNC_B:1.4
	SMP:1.4.0.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2000.01.11.18.02.20;	author peter;	state dead;
branches;
next	1.3;

1.3
date	2000.01.07.14.50.20;	author peter;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.02.27;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.29.03;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.4
log
@sync with NetBSD

- removed threadid stuff
- removed unused files
- general tidyup
- you can no longer configure the same unit twice (without
de-configuring first of course).

Again, this has only been tested locally on IDE disks. Further testing
and feedback would be appreciated.
@
text
@/*	$OpenBSD: rf_cpuutil.c,v 1.3 2000/01/07 14:50:20 peter Exp $	*/
/*	$NetBSD: rf_cpuutil.c,v 1.4 1999/08/13 03:41:53 oster Exp $	*/
/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Authors: Mark Holland, Jim Zelenka
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */
/*
 * rf_cpuutil.c
 *
 * track cpu utilization
 */

#include "rf_cpuutil.h"

#include "rf_types.h"
#include "rf_general.h"
#include "rf_shutdown.h"


int 
rf_ConfigureCpuMonitor(listp)
	RF_ShutdownList_t **listp;
{
#ifdef AIX
	int     rc;

	rc = knlist(namelist, 1, sizeof(struct nlist));
	if (rc) {
		RF_ERRORMSG("Could not knlist() to config CPU monitor\n");
		return (errno);
	}
	if (namelist[0].n_value == 0) {
		RF_ERRORMSG("Got bogus results from knlist() for CPU monitor\n");
		return (EIO);
	}
	sysinfo_offset = namelist[0].n_value;
	kmem_fd = open("/dev/kmem", O_RDONLY);
	if (kmem_fd < 0) {
		perror("/dev/kmem");
		return (errno);
	}
	rc = rf_ShutdownCreate(listp, rf_ShutdownCpuMonitor, NULL);
	if (rc) {
		RF_ERRORMSG3("Unable to add to shutdown list file %s line %d rc=%d\n", __FILE__,
		    __LINE__, rc);
		rf_ShutdownCpuMonitor(NULL);
		return (rc);
	}
#endif				/* AIX */
	return (0);
}

void 
rf_start_cpu_monitor()
{
#ifdef AIX
	off_t   off;
	int     rc;

	off = lseek(kmem_fd, sysinfo_offset, SEEK_SET);
	RF_ASSERT(off == sysinfo_offset);
	rc = read(kmem_fd, &sysinfo_start, sizeof(struct sysinfo));
	if (rc != sizeof(struct sysinfo)) {
		RF_ERRORMSG2("Starting CPU monitor: rc=%d != %d\n", rc,
		    sizeof(struct sysinfo));
	}
#endif				/* AIX */
}

void 
rf_stop_cpu_monitor()
{
#ifdef AIX
	off_t   off;
	int     rc;

	off = lseek(kmem_fd, sysinfo_offset, SEEK_SET);
	RF_ASSERT(off == sysinfo_offset);
	rc = read(kmem_fd, &sysinfo_stop, sizeof(struct sysinfo));
	if (rc != sizeof(struct sysinfo)) {
		RF_ERRORMSG2("Stopping CPU monitor: rc=%d != %d\n", rc,
		    sizeof(struct sysinfo));
	}
#endif				/* AIX */
}

void 
rf_print_cpu_util(s)
	char   *s;
{
#ifdef AIX
	long    idle;

	/* XXX compute a percentage here */
	idle = (long) (sysinfo_stop.cpu[CPU_IDLE] - sysinfo_start.cpu[CPU_IDLE]);
	printf("%ld idle ticks during %s.\n", idle, s);
#endif				/* AIX */
}
@


1.3
log
@sync with work by Greg Oster on NetBSD

Please note: This update has *only* been tested on i386 with IDE
disks. Could someone with a spare box please make sure all is OK with
SCSI and maybe other arches ? sparc testing will follow locally.

* remove rf_sys.h
* many changes to make it more stable
* some performance increases
* All raid threads now get their own kernel process and the calling
  raidctl(8) program will show status progress through a meter.
* In theory FFS_SOFTUPDATES and RAIDframe will now work together - NOT
  TESTED YET

See http://www.cs.usask.ca/staff/oster/raid.html

This updates include Greg's changes to Jan 4th 2000.

TODO:
* some odd behaviour when running raictl -c on an already config'ed
  raid set - problem founf, fix being done
* progress meter is in raidctl(8) - seperate commit, but could do with
  sync'ing with OpenBSD ftp version
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_cpuutil.c,v 1.2 1999/02/16 00:02:27 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_cpuutil.c,v 1.1 1999/01/11 14:29:03 niklas Exp $	*/
/*	$NetBSD: rf_cpuutil.c,v 1.3 1999/02/05 00:06:07 oster Exp $	*/
a39 1
#include "rf_sys.h"
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_cpuutil.c,v 1.1 1998/11/13 04:20:27 oster Exp $	*/
/*	$NetBSD: rf_cpuutil.c,v 1.1 1998/11/13 04:20:27 oster Exp $	*/
a34 4
#ifdef _KERNEL
#define KERNEL
#endif

a36 3
#ifndef KERNEL
#include <errno.h>
#endif /* !KERNEL */
a40 28
#ifdef __osf__
#include <sys/table.h>
#endif /* __osf__ */
#ifdef AIX
#include <nlist.h>
#include <sys/sysinfo.h>
#endif /* AIX */
#ifdef KERNEL
#if !defined(__NetBSD__) && !defined(__OpenBSD__)
#include <sys/dk.h>
#endif /* __NetBSD__ && !__OpenBSD__ */
#else /* KERNEL */
extern int table(int id, int index, void *addr, int nel, u_int lel);
#endif /* KERNEL */

#ifdef __osf__
static struct tbl_sysinfo start, stop;
#endif /* __osf__ */

#ifdef AIX
static int kmem_fd;
static off_t sysinfo_offset;
static struct sysinfo sysinfo_start, sysinfo_stop;
static struct nlist namelist[] = {
  {{"sysinfo"}},
  {{""}},
};
#endif /* AIX */
a41 7
#ifdef AIX
static void rf_ShutdownCpuMonitor(ignored)
  void  *ignored;
{
  close(kmem_fd);
}
#endif /* AIX */
d43 3
a45 2
int rf_ConfigureCpuMonitor(listp)
  RF_ShutdownList_t  **listp;
d48 1
a48 1
  int rc;
d50 24
a73 24
  rc = knlist(namelist, 1, sizeof(struct nlist));
  if (rc) {
    RF_ERRORMSG("Could not knlist() to config CPU monitor\n");
    return(errno);
  }
  if (namelist[0].n_value == 0) {
    RF_ERRORMSG("Got bogus results from knlist() for CPU monitor\n");
    return(EIO);
  }
  sysinfo_offset = namelist[0].n_value;
  kmem_fd = open("/dev/kmem", O_RDONLY);
  if (kmem_fd < 0) {
    perror("/dev/kmem");
    return(errno);
  }
  rc = rf_ShutdownCreate(listp, rf_ShutdownCpuMonitor, NULL);
  if (rc) {
    RF_ERRORMSG3("Unable to add to shutdown list file %s line %d rc=%d\n", __FILE__,
			__LINE__, rc);
    rf_ShutdownCpuMonitor(NULL);
    return(rc);
  }
#endif /* AIX */
  return(0);
d76 2
a77 1
void rf_start_cpu_monitor()
a78 14
#ifdef __osf__
#ifndef KERNEL
  if (table(TBL_SYSINFO, 0, &start, 1, sizeof(start)) != 1) {
    printf("Unable to get sysinfo for cpu utilization monitor\n");
    perror("start_cpu_monitor");
  }
#else /* !KERNEL */
  /* start.si_user = cp_time[CP_USER];
  start.si_nice = cp_time[CP_NICE];
  start.si_sys  = cp_time[CP_SYS];
  start.si_idle = cp_time[CP_IDLE];
  start.wait    = cp_time[CP_WAIT]; */
#endif /* !KERNEL */
#endif /* __osf__ */
d80 2
a81 2
  off_t off;
  int rc;
d83 8
a90 8
  off = lseek(kmem_fd, sysinfo_offset, SEEK_SET);
  RF_ASSERT(off == sysinfo_offset);
  rc = read(kmem_fd, &sysinfo_start, sizeof(struct sysinfo));
  if (rc != sizeof(struct sysinfo)) {
    RF_ERRORMSG2("Starting CPU monitor: rc=%d != %d\n", rc,
      sizeof(struct sysinfo));
  }
#endif /* AIX */
d93 2
a94 1
void rf_stop_cpu_monitor()
a95 14
#ifdef __osf__
#ifndef KERNEL
  if (table(TBL_SYSINFO, 0, &stop, 1, sizeof(stop)) != 1) {
    printf("Unable to get sysinfo for cpu utilization monitor\n");
    perror("stop_cpu_monitor");
  }
#else /* !KERNEL */
  /* stop.si_user = cp_time[CP_USER];
  stop.si_nice = cp_time[CP_NICE];
  stop.si_sys  = cp_time[CP_SYS];
  stop.si_idle = cp_time[CP_IDLE];
  stop.wait    = cp_time[CP_WAIT]; */
#endif /* !KERNEL */
#endif /* __osf__ */
d97 2
a98 2
  off_t off;
  int rc;
d100 8
a107 8
  off = lseek(kmem_fd, sysinfo_offset, SEEK_SET);
  RF_ASSERT(off == sysinfo_offset);
  rc = read(kmem_fd, &sysinfo_stop, sizeof(struct sysinfo));
  if (rc != sizeof(struct sysinfo)) {
    RF_ERRORMSG2("Stopping CPU monitor: rc=%d != %d\n", rc,
      sizeof(struct sysinfo));
  }
#endif /* AIX */
d110 3
a112 2
void rf_print_cpu_util(s)
  char  *s;
a113 8
#ifdef __osf__
  long totalticks, idleticks;

  idleticks = stop.si_idle - start.si_idle + stop.wait - start.wait;
  totalticks = stop.si_user - start.si_user + stop.si_nice - start.si_nice +
	       stop.si_sys - start.si_sys + idleticks;
  printf("CPU utilization during %s was %d %%\n", s, 100 - 100*idleticks/totalticks);
#endif /* __osf__ */
d115 1
a115 1
  long idle;
d117 4
a120 4
  /* XXX compute a percentage here */
  idle = (long)(sysinfo_stop.cpu[CPU_IDLE] - sysinfo_start.cpu[CPU_IDLE]);
  printf("%ld idle ticks during %s.\n", idle, s);
#endif /* AIX */
@

