head	1.7;
access;
symbols
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.38
	OPENBSD_5_0:1.6.0.36
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.34
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.32
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.28
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.30
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.26
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.24
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.22
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.20
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.18
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.16
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.14
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.12
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.10
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.8
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.5.0.16
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.14
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.12
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.10
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.8
	OPENBSD_2_8:1.5.0.6
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.2
	SMP_BASE:1.5
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.6;

1.6
date	2002.12.16.07.01.03;	author tdeval;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.11.18.02.21;	author peter;	state Exp;
branches
	1.5.2.1
	1.5.12.1;
next	1.4;

1.4
date	2000.01.07.14.50.21;	author peter;	state Exp;
branches;
next	1.3;

1.3
date	99.08.03.13.56.37;	author peter;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.02.38;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.29.15;	author niklas;	state Exp;
branches;
next	;

1.5.2.1
date	2003.03.28.00.38.27;	author niklas;	state Exp;
branches;
next	;

1.5.12.1
date	2003.05.19.22.21.51;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_desc.h,v 1.6 2002/12/16 07:01:03 tdeval Exp $	*/
/*	$NetBSD: rf_desc.h,v 1.5 2000/01/09 00:00:18 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#ifndef	_RF__RF_DESC_H_
#define	_RF__RF_DESC_H_

#include "rf_archs.h"
#include "rf_types.h"
#include "rf_etimer.h"
#include "rf_dag.h"

struct RF_RaidReconDesc_s {
	RF_Raid_t	*raidPtr;	/* Raid device descriptor. */
	RF_RowCol_t	 row;		/* Row of failed disk. */
	RF_RowCol_t	 col;		/* Col of failed disk. */
	int		 state;		/*
					 * How far along the reconstruction
					 * operation has gotten.
					 */
	RF_RaidDisk_t	*spareDiskPtr;	/*
					 * Describes target disk for recon.
					 * (not used in dist sparing)
					 */
	int		 numDisksDone;	/*
					 * The number of surviving disks that
					 * have completed their work.
					 */
	RF_RowCol_t	 srow;		/*
					 * Row ID of the spare disk.
					 * (not used in dist sparing)
					 */
	RF_RowCol_t	 scol;		/*
					 * Col ID of the spare disk.
					 * (not used in dist sparing)
					 */
	/*
         * Prevent recon from hogging CPU
         */
	RF_Etimer_t	 recon_exec_timer;
	RF_uint64	 reconExecTimerRunning;
	RF_uint64	 reconExecTicks;
	RF_uint64	 maxReconExecTicks;

#if	RF_RECON_STATS > 0
	RF_uint64	 hsStallCount;	/* Head sep stall count. */
	RF_uint64	 numReconExecDelays;
	RF_uint64	 numReconEventWaits;
#endif	/* RF_RECON_STATS > 0 */
	RF_RaidReconDesc_t *next;
};

struct RF_RaidAccessDesc_s {
	RF_Raid_t	 *raidPtr;	/* Raid device descriptor. */
	RF_IoType_t	  type;		/* Read or write. */
	RF_RaidAddr_t	  raidAddress;	/*
					 * Starting address in raid address
					 * space.
					 */
	RF_SectorCount_t  numBlocks;	/*
					 * Number of blocks (sectors)
					 * to transfer.
					 */
	RF_StripeCount_t  numStripes;	/*
					 * Number of stripes involved in
					 * access.
					 */
	caddr_t		  bufPtr;	/* Pointer to data buffer. */
	RF_RaidAccessFlags_t flags;	/* Flags controlling operation. */
	int		  state;	/*
					 * Index into states telling how far
					 * along the RAID operation has gotten.
					 */
	RF_AccessState_t *states;	/* Array of states to be run. */
	int		  status;	/*
					 * Pass/fail status of the last
					 * operation.
					 */
	RF_DagList_t	 *dagArray;	/*
					 * Array of DAG lists, one list
					 * per stripe.
					 */
	RF_AccessStripeMapHeader_t *asmap; /* The asm for this I/O. */
	void		 *bp;		/*
					 * Buffer pointer for this RAID acc.
					 * Ignored outside the kernel.
					 */
	RF_DagHeader_t	**paramDAG;	/*
					 * Allows the DAG to be returned to
					 * the caller after I/O completion.
					 */
	RF_AccessStripeMapHeader_t **paramASM;	/*
						 * Allows the ASM to be
						 * returned to the caller
						 * after I/O completion.
						 */
	RF_AccTraceEntry_t tracerec;	/*
					 * Perf monitoring information for a
					 * user access (not for dag stats).
					 */
	void		(*callbackFunc) (RF_CBParam_t);
					/* Callback function for this I/O. */
	void		 *callbackArg;	/* Arg to give to callback func. */

	RF_AllocListElem_t *cleanupList; /*
					  * Memory to be freed at the
					  * end of the access.
					  */

	RF_RaidAccessDesc_t *next;
	RF_RaidAccessDesc_t *head;

	int		  numPending;

	RF_DECLARE_MUTEX( mutex );	/*
					 * These are used to implement
					 * blocking I/O.
					 */
	RF_DECLARE_COND(  cond );
	int		  async_flag;

	RF_Etimer_t	  timer;	/* Used for timing this access. */
};

#endif	/* ! _RF__RF_DESC_H_ */
@


1.6
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_desc.h,v 1.5 2000/01/11 18:02:21 peter Exp $	*/
@


1.5
log
@sync with NetBSD

- removed threadid stuff
- removed unused files
- general tidyup
- you can no longer configure the same unit twice (without
de-configuring first of course).

Again, this has only been tested locally on IDE disks. Further testing
and feedback would be appreciated.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_desc.h,v 1.4 2000/01/07 14:50:21 peter Exp $	*/
d3 1
d31 2
a32 2
#ifndef _RF__RF_DESC_H_
#define _RF__RF_DESC_H_
d40 23
a62 13
	RF_Raid_t *raidPtr;	/* raid device descriptor */
	RF_RowCol_t row;	/* row of failed disk */
	RF_RowCol_t col;	/* col of failed disk */
	int     state;		/* how far along the reconstruction operation
				 * has gotten */
	RF_RaidDisk_t *spareDiskPtr;	/* describes target disk for recon
					 * (not used in dist sparing) */
	int     numDisksDone;	/* the number of surviving disks that have
				 * completed their work */
	RF_RowCol_t srow;	/* row ID of the spare disk (not used in dist
				 * sparing) */
	RF_RowCol_t scol;	/* col ID of the spare disk (not used in dist
				 * sparing) */
d66 10
a75 10
	RF_Etimer_t recon_exec_timer;
	RF_uint64 reconExecTimerRunning;
	RF_uint64 reconExecTicks;
	RF_uint64 maxReconExecTicks;

#if RF_RECON_STATS > 0
	RF_uint64 hsStallCount;	/* head sep stall count */
	RF_uint64 numReconExecDelays;
	RF_uint64 numReconEventWaits;
#endif				/* RF_RECON_STATS > 0 */
d80 40
a119 21
	RF_Raid_t *raidPtr;	/* raid device descriptor */
	RF_IoType_t type;	/* read or write */
	RF_RaidAddr_t raidAddress;	/* starting address in raid address
					 * space */
	RF_SectorCount_t numBlocks;	/* number of blocks (sectors) to
					 * transfer */
	RF_StripeCount_t numStripes;	/* number of stripes involved in
					 * access */
	caddr_t bufPtr;		/* pointer to data buffer */
	RF_RaidAccessFlags_t flags;	/* flags controlling operation */
	int     state;		/* index into states telling how far along the
				 * RAID operation has gotten */
	RF_AccessState_t *states;	/* array of states to be run */
	int     status;		/* pass/fail status of the last operation */
	RF_DagList_t *dagArray;	/* array of dag lists, one list per stripe */
	RF_AccessStripeMapHeader_t *asmap;	/* the asm for this I/O */
	void   *bp;		/* buf pointer for this RAID acc.  ignored
				 * outside the kernel */
	RF_DagHeader_t **paramDAG;	/* allows the DAG to be returned to
					 * the caller after I/O completion */
	RF_AccessStripeMapHeader_t **paramASM;	/* allows the ASM to be
d121 14
a134 9
						 * after I/O completion */
	RF_AccTraceEntry_t tracerec;	/* perf monitoring information for a
					 * user access (not for dag stats) */
	void    (*callbackFunc) (RF_CBParam_t);	/* callback function for this
						 * I/O */
	void   *callbackArg;	/* arg to give to callback func */

	RF_AllocListElem_t *cleanupList;	/* memory to be freed at the
						 * end of the access */
d139 1
a139 1
	int     numPending;
d141 6
a146 4
	        RF_DECLARE_MUTEX(mutex)	/* these are used to implement
					 * blocking I/O */
	        RF_DECLARE_COND(cond)
	int     async_flag;
d148 1
a148 1
	RF_Etimer_t timer;	/* used for timing this access */
d150 2
a151 1
#endif				/* !_RF__RF_DESC_H_ */
@


1.5.12.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 2
a31 2
#ifndef	_RF__RF_DESC_H_
#define	_RF__RF_DESC_H_
d39 13
a51 23
	RF_Raid_t	*raidPtr;	/* Raid device descriptor. */
	RF_RowCol_t	 row;		/* Row of failed disk. */
	RF_RowCol_t	 col;		/* Col of failed disk. */
	int		 state;		/*
					 * How far along the reconstruction
					 * operation has gotten.
					 */
	RF_RaidDisk_t	*spareDiskPtr;	/*
					 * Describes target disk for recon.
					 * (not used in dist sparing)
					 */
	int		 numDisksDone;	/*
					 * The number of surviving disks that
					 * have completed their work.
					 */
	RF_RowCol_t	 srow;		/*
					 * Row ID of the spare disk.
					 * (not used in dist sparing)
					 */
	RF_RowCol_t	 scol;		/*
					 * Col ID of the spare disk.
					 * (not used in dist sparing)
					 */
d55 10
a64 10
	RF_Etimer_t	 recon_exec_timer;
	RF_uint64	 reconExecTimerRunning;
	RF_uint64	 reconExecTicks;
	RF_uint64	 maxReconExecTicks;

#if	RF_RECON_STATS > 0
	RF_uint64	 hsStallCount;	/* Head sep stall count. */
	RF_uint64	 numReconExecDelays;
	RF_uint64	 numReconEventWaits;
#endif	/* RF_RECON_STATS > 0 */
d69 21
a89 40
	RF_Raid_t	 *raidPtr;	/* Raid device descriptor. */
	RF_IoType_t	  type;		/* Read or write. */
	RF_RaidAddr_t	  raidAddress;	/*
					 * Starting address in raid address
					 * space.
					 */
	RF_SectorCount_t  numBlocks;	/*
					 * Number of blocks (sectors)
					 * to transfer.
					 */
	RF_StripeCount_t  numStripes;	/*
					 * Number of stripes involved in
					 * access.
					 */
	caddr_t		  bufPtr;	/* Pointer to data buffer. */
	RF_RaidAccessFlags_t flags;	/* Flags controlling operation. */
	int		  state;	/*
					 * Index into states telling how far
					 * along the RAID operation has gotten.
					 */
	RF_AccessState_t *states;	/* Array of states to be run. */
	int		  status;	/*
					 * Pass/fail status of the last
					 * operation.
					 */
	RF_DagList_t	 *dagArray;	/*
					 * Array of DAG lists, one list
					 * per stripe.
					 */
	RF_AccessStripeMapHeader_t *asmap; /* The asm for this I/O. */
	void		 *bp;		/*
					 * Buffer pointer for this RAID acc.
					 * Ignored outside the kernel.
					 */
	RF_DagHeader_t	**paramDAG;	/*
					 * Allows the DAG to be returned to
					 * the caller after I/O completion.
					 */
	RF_AccessStripeMapHeader_t **paramASM;	/*
						 * Allows the ASM to be
d91 9
a99 14
						 * after I/O completion.
						 */
	RF_AccTraceEntry_t tracerec;	/*
					 * Perf monitoring information for a
					 * user access (not for dag stats).
					 */
	void		(*callbackFunc) (RF_CBParam_t);
					/* Callback function for this I/O. */
	void		 *callbackArg;	/* Arg to give to callback func. */

	RF_AllocListElem_t *cleanupList; /*
					  * Memory to be freed at the
					  * end of the access.
					  */
d104 1
a104 1
	int		  numPending;
d106 4
a109 6
	RF_DECLARE_MUTEX( mutex );	/*
					 * These are used to implement
					 * blocking I/O.
					 */
	RF_DECLARE_COND(  cond );
	int		  async_flag;
d111 1
a111 1
	RF_Etimer_t	  timer;	/* Used for timing this access. */
d113 1
a113 2

#endif	/* ! _RF__RF_DESC_H_ */
@


1.5.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 2
a31 2
#ifndef	_RF__RF_DESC_H_
#define	_RF__RF_DESC_H_
d39 13
a51 23
	RF_Raid_t	*raidPtr;	/* Raid device descriptor. */
	RF_RowCol_t	 row;		/* Row of failed disk. */
	RF_RowCol_t	 col;		/* Col of failed disk. */
	int		 state;		/*
					 * How far along the reconstruction
					 * operation has gotten.
					 */
	RF_RaidDisk_t	*spareDiskPtr;	/*
					 * Describes target disk for recon.
					 * (not used in dist sparing)
					 */
	int		 numDisksDone;	/*
					 * The number of surviving disks that
					 * have completed their work.
					 */
	RF_RowCol_t	 srow;		/*
					 * Row ID of the spare disk.
					 * (not used in dist sparing)
					 */
	RF_RowCol_t	 scol;		/*
					 * Col ID of the spare disk.
					 * (not used in dist sparing)
					 */
d55 10
a64 10
	RF_Etimer_t	 recon_exec_timer;
	RF_uint64	 reconExecTimerRunning;
	RF_uint64	 reconExecTicks;
	RF_uint64	 maxReconExecTicks;

#if	RF_RECON_STATS > 0
	RF_uint64	 hsStallCount;	/* Head sep stall count. */
	RF_uint64	 numReconExecDelays;
	RF_uint64	 numReconEventWaits;
#endif	/* RF_RECON_STATS > 0 */
d69 21
a89 40
	RF_Raid_t	 *raidPtr;	/* Raid device descriptor. */
	RF_IoType_t	  type;		/* Read or write. */
	RF_RaidAddr_t	  raidAddress;	/*
					 * Starting address in raid address
					 * space.
					 */
	RF_SectorCount_t  numBlocks;	/*
					 * Number of blocks (sectors)
					 * to transfer.
					 */
	RF_StripeCount_t  numStripes;	/*
					 * Number of stripes involved in
					 * access.
					 */
	caddr_t		  bufPtr;	/* Pointer to data buffer. */
	RF_RaidAccessFlags_t flags;	/* Flags controlling operation. */
	int		  state;	/*
					 * Index into states telling how far
					 * along the RAID operation has gotten.
					 */
	RF_AccessState_t *states;	/* Array of states to be run. */
	int		  status;	/*
					 * Pass/fail status of the last
					 * operation.
					 */
	RF_DagList_t	 *dagArray;	/*
					 * Array of DAG lists, one list
					 * per stripe.
					 */
	RF_AccessStripeMapHeader_t *asmap; /* The asm for this I/O. */
	void		 *bp;		/*
					 * Buffer pointer for this RAID acc.
					 * Ignored outside the kernel.
					 */
	RF_DagHeader_t	**paramDAG;	/*
					 * Allows the DAG to be returned to
					 * the caller after I/O completion.
					 */
	RF_AccessStripeMapHeader_t **paramASM;	/*
						 * Allows the ASM to be
d91 9
a99 14
						 * after I/O completion.
						 */
	RF_AccTraceEntry_t tracerec;	/*
					 * Perf monitoring information for a
					 * user access (not for dag stats).
					 */
	void		(*callbackFunc) (RF_CBParam_t);
					/* Callback function for this I/O. */
	void		 *callbackArg;	/* Arg to give to callback func. */

	RF_AllocListElem_t *cleanupList; /*
					  * Memory to be freed at the
					  * end of the access.
					  */
d104 1
a104 1
	int		  numPending;
d106 4
a109 6
	RF_DECLARE_MUTEX( mutex );	/*
					 * These are used to implement
					 * blocking I/O.
					 */
	RF_DECLARE_COND(  cond );
	int		  async_flag;
d111 1
a111 1
	RF_Etimer_t	  timer;	/* Used for timing this access. */
d113 1
a113 2

#endif	/* ! _RF__RF_DESC_H_ */
@


1.4
log
@sync with work by Greg Oster on NetBSD

Please note: This update has *only* been tested on i386 with IDE
disks. Could someone with a spare box please make sure all is OK with
SCSI and maybe other arches ? sparc testing will follow locally.

* remove rf_sys.h
* many changes to make it more stable
* some performance increases
* All raid threads now get their own kernel process and the calling
  raidctl(8) program will show status progress through a meter.
* In theory FFS_SOFTUPDATES and RAIDframe will now work together - NOT
  TESTED YET

See http://www.cs.usask.ca/staff/oster/raid.html

This updates include Greg's changes to Jan 4th 2000.

TODO:
* some odd behaviour when running raictl -c on an already config'ed
  raid set - problem founf, fix being done
* progress meter is in raidctl(8) - seperate commit, but could do with
  sync'ing with OpenBSD ftp version
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_desc.h,v 1.3 1999/08/03 13:56:37 peter Exp $	*/
/*	$NetBSD: rf_desc.h,v 1.4 1999/02/05 00:06:09 oster Exp $	*/
a96 2
	int     tid;		/* debug only, user-level only: thread id of
				 * thr that did this access */
@


1.3
log
@* rf_reconstruct.c: adopt nilkas' suggestion regard statics and
__inline__ - this is a proof of concept and will cover the raidframe
source as a whole over coming updates. Update namespace of function to
prefix with rf_ - comments again welcome.

* overall: rework the macros in rf_etimer.h and the resultant changes
to their use to count microseconds and not clock ticks. Restore the code
in rf_revent.c to a similar strcuture to before the previous commit,
and use the system timers to govern resource usage.

Tested with local i386/IDE and the reconstruction of a disk in my
array - performance has improved for reconstruction at no noticable
CPU cost.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_desc.h,v 1.2 1999/02/16 00:02:38 niklas Exp $	*/
d57 2
a58 2
	RF_uint64 reconExecuSecs;
	RF_uint64 maxReconExecuSecs;
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_desc.h,v 1.1 1999/01/11 14:29:15 niklas Exp $	*/
d57 2
a58 2
	RF_uint64 reconExecTicks;
	RF_uint64 maxReconExecTicks;
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_desc.h,v 1.1 1998/11/13 04:20:28 oster Exp $	*/
/*	$NetBSD: rf_desc.h,v 1.1 1998/11/13 04:20:28 oster Exp $	*/
a29 72
/*
 * :  
 * Log: rf_desc.h,v 
 * Revision 1.29  1996/07/22 19:52:16  jimz
 * switched node params to RF_DagParam_t, a union of
 * a 64-bit int and a void *, for better portability
 * attempted hpux port, but failed partway through for
 * lack of a single C compiler capable of compiling all
 * source files
 *
 * Revision 1.28  1996/06/07  22:49:22  jimz
 * fix up raidPtr typing
 *
 * Revision 1.27  1996/06/07  21:33:04  jimz
 * begin using consistent types for sector numbers,
 * stripe numbers, row+col numbers, recon unit numbers
 *
 * Revision 1.26  1996/06/05  18:06:02  jimz
 * Major code cleanup. The Great Renaming is now done.
 * Better modularity. Better typing. Fixed a bunch of
 * synchronization bugs. Made a lot of global stuff
 * per-desc or per-array. Removed dead code.
 *
 * Revision 1.25  1996/06/02  17:31:48  jimz
 * Moved a lot of global stuff into array structure, where it belongs.
 * Fixed up paritylogging, pss modules in this manner. Some general
 * code cleanup. Removed lots of dead code, some dead files.
 *
 * Revision 1.24  1996/05/30  11:29:41  jimz
 * Numerous bug fixes. Stripe lock release code disagreed with the taking code
 * about when stripes should be locked (I made it consistent: no parity, no lock)
 * There was a lot of extra serialization of I/Os which I've removed- a lot of
 * it was to calculate values for the cache code, which is no longer with us.
 * More types, function, macro cleanup. Added code to properly quiesce the array
 * on shutdown. Made a lot of stuff array-specific which was (bogusly) general
 * before. Fixed memory allocation, freeing bugs.
 *
 * Revision 1.23  1996/05/27  18:56:37  jimz
 * more code cleanup
 * better typing
 * compiles in all 3 environments
 *
 * Revision 1.22  1996/05/24  22:17:04  jimz
 * continue code + namespace cleanup
 * typed a bunch of flags
 *
 * Revision 1.21  1996/05/24  04:28:55  jimz
 * release cleanup ckpt
 *
 * Revision 1.20  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.19  1996/05/23  00:33:23  jimz
 * code cleanup: move all debug decls to rf_options.c, all extern
 * debug decls to rf_options.h, all debug vars preceded by rf_
 *
 * Revision 1.18  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.17  1995/12/01  15:58:43  root
 * added copyright info
 *
 * Revision 1.16  1995/11/19  16:31:30  wvcii
 * descriptors now contain an array of dag lists as opposed to a dag header
 *
 * Revision 1.15  1995/11/07  16:24:17  wvcii
 * updated def of _AccessState
 *
 */

d39 20
a58 17
  RF_Raid_t           *raidPtr;      /* raid device descriptor */
  RF_RowCol_t          row;          /* row of failed disk */
  RF_RowCol_t          col;          /* col of failed disk */
  int                  state;        /* how far along the reconstruction operation has gotten */
  RF_RaidDisk_t       *spareDiskPtr; /* describes target disk for recon (not used in dist sparing) */
  int                  numDisksDone; /* the number of surviving disks that have completed their work */
  RF_RowCol_t          srow;         /* row ID of the spare disk (not used in dist sparing) */
  RF_RowCol_t          scol;         /* col ID of the spare disk (not used in dist sparing) */
#ifdef KERNEL
  /*
   * Prevent recon from hogging CPU
   */
  RF_Etimer_t          recon_exec_timer;
  RF_uint64            reconExecTimerRunning;
  RF_uint64            reconExecTicks;
  RF_uint64            maxReconExecTicks;
#endif /* KERNEL */
d61 5
a65 5
  RF_uint64            hsStallCount;       /* head sep stall count */
  RF_uint64            numReconExecDelays;
  RF_uint64            numReconEventWaits;
#endif /* RF_RECON_STATS > 0 */
  RF_RaidReconDesc_t  *next;
d69 43
a111 39
  RF_Raid_t              *raidPtr;          /* raid device descriptor */
  RF_IoType_t             type;             /* read or write */
  RF_RaidAddr_t           raidAddress;      /* starting address in raid address space */
  RF_SectorCount_t        numBlocks;        /* number of blocks (sectors) to transfer */
  RF_StripeCount_t        numStripes;       /* number of stripes involved in access */
  caddr_t                 bufPtr;           /* pointer to data buffer */

#if !defined(KERNEL) && !defined(SIMULATE)
  caddr_t                 obufPtr;          /* real pointer to data buffer */
#endif /* !KERNEL && !SIMULATE */

  RF_RaidAccessFlags_t    flags;            /* flags controlling operation */
  int                     state;            /* index into states telling how far along the RAID operation has gotten */
  RF_AccessState_t       *states;	        /* array of states to be run */
  int                     status;           /* pass/fail status of the last operation */
  RF_DagList_t           *dagArray;         /* array of dag lists, one list per stripe */
  RF_AccessStripeMapHeader_t  *asmap;       /* the asm for this I/O */
  void                   *bp;               /* buf pointer for this RAID acc.  ignored outside the kernel */
  RF_DagHeader_t        **paramDAG;         /* allows the DAG to be returned to the caller after I/O completion */
  RF_AccessStripeMapHeader_t **paramASM;         /* allows the ASM to be returned to the caller after I/O completion */
  RF_AccTraceEntry_t      tracerec;         /* perf monitoring information for a user access (not for dag stats) */
  void                  (*callbackFunc)(RF_CBParam_t);  /* callback function for this I/O */
  void                   *callbackArg;      /* arg to give to callback func */
  int                    tid;               /* debug only, user-level only: thread id of thr that did this access */

  RF_AllocListElem_t    *cleanupList;       /* memory to be freed at the end of the access*/

  RF_RaidAccessDesc_t         *next;
  RF_RaidAccessDesc_t         *head;

  int numPending;

  RF_DECLARE_MUTEX(mutex)   /* these are used to implement blocking I/O */
  RF_DECLARE_COND(cond)

#ifdef SIMULATE
  RF_Owner_t  owner;                            
  int         async_flag;
#endif /* SIMULATE */
d113 1
a113 1
  RF_Etimer_t                 timer;            /* used for timing this access */
d115 1
a115 2

#endif /* !_RF__RF_DESC_H_ */
@

