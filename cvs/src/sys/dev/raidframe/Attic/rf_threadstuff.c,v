head	1.5;
access;
symbols
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.38
	OPENBSD_5_0:1.4.0.36
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.34
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.32
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.28
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.30
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.26
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.24
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.22
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.20
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.18
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.16
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.14
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.12
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.10
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.8
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.3.0.16
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.14
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.12
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.10
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.8
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.2
	SMP_BASE:1.3
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2012.04.06.15.53.59;	author jsing;	state dead;
branches;
next	1.4;

1.4
date	2002.12.16.07.01.05;	author tdeval;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.07.14.50.23;	author peter;	state Exp;
branches
	1.3.2.1
	1.3.12.1;
next	1.2;

1.2
date	99.02.16.00.03.32;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.29.53;	author niklas;	state Exp;
branches;
next	;

1.3.2.1
date	2003.03.28.00.38.29;	author niklas;	state Exp;
branches;
next	;

1.3.12.1
date	2003.05.19.22.21.53;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_threadstuff.c,v 1.4 2002/12/16 07:01:05 tdeval Exp $	*/
/*	$NetBSD: rf_threadstuff.c,v 1.5 1999/12/07 02:13:28 oster Exp $	*/

/*
 * rf_threadstuff.c
 */

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Jim Zelenka
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include "rf_types.h"
#include "rf_threadstuff.h"
#include "rf_general.h"
#include "rf_shutdown.h"

void mutex_destroyer(void *);
void cond_destroyer(void *);

/*
 * Shared stuff.
 */

void
mutex_destroyer(void *arg)
{
	int rc;

	rc = rf_mutex_destroy(arg);
	if (rc) {
		RF_ERRORMSG1("RAIDFRAME: Error %d auto-destroying mutex\n", rc);
	}
}

void
cond_destroyer(void *arg)
{
	int rc;

	rc = rf_cond_destroy(arg);
	if (rc) {
		RF_ERRORMSG1("RAIDFRAME: Error %d auto-destroying condition\n",
		    rc);
	}
}

int
_rf_create_managed_mutex(RF_ShutdownList_t **listp, RF_DECLARE_MUTEX(*m),
    char *file, int line)
{
	int rc, rc1;

	rc = rf_mutex_init(m);
	if (rc)
		return (rc);

	rc = _rf_ShutdownCreate(listp, mutex_destroyer, (void *) m, file, line);
	if (rc) {
		RF_ERRORMSG1("RAIDFRAME: Error %d adding shutdown entry\n", rc);
		rc1 = rf_mutex_destroy(m);
		if (rc1) {
			RF_ERRORMSG1("RAIDFRAME: Error %d destroying mutex\n",
			    rc1);
		}
	}

	return (rc);
}

int
_rf_create_managed_cond(RF_ShutdownList_t **listp, RF_DECLARE_COND(*c),
    char *file, int line)
{
	int rc, rc1;

	rc = rf_cond_init(c);
	if (rc)
		return (rc);

	rc = _rf_ShutdownCreate(listp, cond_destroyer, (void *) c, file, line);
	if (rc) {
		RF_ERRORMSG1("RAIDFRAME: Error %d adding shutdown entry\n", rc);
		rc1 = rf_cond_destroy(c);
		if (rc1) {
			RF_ERRORMSG1("RAIDFRAME: Error %d destroying cond\n",
			    rc1);
		}
	}
	return (rc);
}

int
_rf_init_managed_threadgroup(RF_ShutdownList_t **listp, RF_ThreadGroup_t *g,
    char *file, int line)
{
	int rc;

	rc = _rf_create_managed_mutex(listp, &g->mutex, file, line);
	if (rc)
		return (rc);

	rc = _rf_create_managed_cond(listp, &g->cond, file, line);
	if (rc)
		return (rc);

	g->created = g->running = g->shutdown = 0;
	return (0);
}

int
_rf_destroy_threadgroup(RF_ThreadGroup_t *g, char *file, int line)
{
	int rc1, rc2;

	rc1 = rf_mutex_destroy(&g->mutex);
	rc2 = rf_cond_destroy(&g->cond);

	if (rc1)
		return (rc1);

	return (rc2);
}

int
_rf_init_threadgroup(RF_ThreadGroup_t *g, char *file, int line)
{
	int rc;

	rc = rf_mutex_init(&g->mutex);
	if (rc)
		return (rc);

	rc = rf_cond_init(&g->cond);
	if (rc) {
		rf_mutex_destroy(&g->mutex);
		return (rc);
	}

	g->created = g->running = g->shutdown = 0;
	return (0);
}


/*
 * Kernel.
 */

int
rf_mutex_init(decl_simple_lock_data(, *m))
{
	simple_lock_init(m);
	return (0);
}

int
rf_mutex_destroy(decl_simple_lock_data(, *m))
{
	return (0);
}

int
rf_cond_init(RF_DECLARE_COND(*c))
{
	*c = 0;			/* No reason. */
	return (0);
}

int
rf_cond_destroy(RF_DECLARE_COND(*c))
{
	return (0);
}
@


1.4
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_threadstuff.c,v 1.3 2000/01/07 14:50:23 peter Exp $	*/
@


1.3
log
@sync with work by Greg Oster on NetBSD

Please note: This update has *only* been tested on i386 with IDE
disks. Could someone with a spare box please make sure all is OK with
SCSI and maybe other arches ? sparc testing will follow locally.

* remove rf_sys.h
* many changes to make it more stable
* some performance increases
* All raid threads now get their own kernel process and the calling
  raidctl(8) program will show status progress through a meter.
* In theory FFS_SOFTUPDATES and RAIDframe will now work together - NOT
  TESTED YET

See http://www.cs.usask.ca/staff/oster/raid.html

This updates include Greg's changes to Jan 4th 2000.

TODO:
* some odd behaviour when running raictl -c on an already config'ed
  raid set - problem founf, fix being done
* progress meter is in raidctl(8) - seperate commit, but could do with
  sync'ing with OpenBSD ftp version
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_threadstuff.c,v 1.2 1999/02/16 00:03:32 niklas Exp $	*/
d3 1
d7 1
d40 2
a41 2
static void mutex_destroyer(void *);
static void cond_destroyer(void *);
d44 1
a44 1
 * Shared stuff
d47 2
a48 3
static void 
mutex_destroyer(arg)
	void   *arg;
d50 1
a50 1
	int     rc;
d58 2
a59 3
static void 
cond_destroyer(arg)
	void   *arg;
d61 1
a61 1
	int     rc;
d65 2
a66 1
		RF_ERRORMSG1("RAIDFRAME: Error %d auto-destroying condition\n", rc);
d70 3
a72 6
int 
_rf_create_managed_mutex(listp, m, file, line)
	RF_ShutdownList_t **listp;
RF_DECLARE_MUTEX(*m)
	char   *file;
	int     line;
d74 1
a74 1
	int     rc, rc1;
d79 1
d85 2
a86 1
			RF_ERRORMSG1("RAIDFRAME: Error %d destroying mutex\n", rc1);
d89 1
d93 3
a95 6
int 
_rf_create_managed_cond(listp, c, file, line)
	RF_ShutdownList_t **listp;
RF_DECLARE_COND(*c)
	char   *file;
	int     line;
d97 1
a97 1
	int     rc, rc1;
d102 1
d108 2
a109 1
			RF_ERRORMSG1("RAIDFRAME: Error %d destroying cond\n", rc1);
d115 3
a117 6
int 
_rf_init_managed_threadgroup(listp, g, file, line)
	RF_ShutdownList_t **listp;
	RF_ThreadGroup_t *g;
	char   *file;
	int     line;
d119 1
a119 1
	int     rc;
d124 1
d128 1
d133 2
a134 5
int 
_rf_destroy_threadgroup(g, file, line)
	RF_ThreadGroup_t *g;
	char   *file;
	int     line;
d136 1
a136 1
	int     rc1, rc2;
d140 1
d143 1
d147 2
a148 5
int 
_rf_init_threadgroup(g, file, line)
	RF_ThreadGroup_t *g;
	char   *file;
	int     line;
d150 1
a150 1
	int     rc;
d155 1
d161 1
d168 1
a168 1
 * Kernel
d170 3
a172 3
int 
rf_mutex_init(m)
decl_simple_lock_data(, *m)
d178 2
a179 3
int 
rf_mutex_destroy(m)
decl_simple_lock_data(, *m)
d184 2
a185 3
int 
rf_cond_init(c)
RF_DECLARE_COND(*c)
d187 1
a187 1
	*c = 0;			/* no reason */
d191 2
a192 3
int 
rf_cond_destroy(c)
RF_DECLARE_COND(*c)
@


1.3.12.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

a5 1

d38 2
a39 2
void mutex_destroyer(void *);
void cond_destroyer(void *);
d42 1
a42 1
 * Shared stuff.
d45 3
a47 2
void
mutex_destroyer(void *arg)
d49 1
a49 1
	int rc;
d57 3
a59 2
void
cond_destroyer(void *arg)
d61 1
a61 1
	int rc;
d65 1
a65 2
		RF_ERRORMSG1("RAIDFRAME: Error %d auto-destroying condition\n",
		    rc);
d69 6
a74 3
int
_rf_create_managed_mutex(RF_ShutdownList_t **listp, RF_DECLARE_MUTEX(*m),
    char *file, int line)
d76 1
a76 1
	int rc, rc1;
a80 1

d86 1
a86 2
			RF_ERRORMSG1("RAIDFRAME: Error %d destroying mutex\n",
			    rc1);
a88 1

d92 6
a97 3
int
_rf_create_managed_cond(RF_ShutdownList_t **listp, RF_DECLARE_COND(*c),
    char *file, int line)
d99 1
a99 1
	int rc, rc1;
a103 1

d109 1
a109 2
			RF_ERRORMSG1("RAIDFRAME: Error %d destroying cond\n",
			    rc1);
d115 6
a120 3
int
_rf_init_managed_threadgroup(RF_ShutdownList_t **listp, RF_ThreadGroup_t *g,
    char *file, int line)
d122 1
a122 1
	int rc;
a126 1

a129 1

d134 5
a138 2
int
_rf_destroy_threadgroup(RF_ThreadGroup_t *g, char *file, int line)
d140 1
a140 1
	int rc1, rc2;
a143 1

a145 1

d149 5
a153 2
int
_rf_init_threadgroup(RF_ThreadGroup_t *g, char *file, int line)
d155 1
a155 1
	int rc;
a159 1

a164 1

d171 1
a171 1
 * Kernel.
d173 3
a175 3

int
rf_mutex_init(decl_simple_lock_data(, *m))
d181 3
a183 2
int
rf_mutex_destroy(decl_simple_lock_data(, *m))
d188 3
a190 2
int
rf_cond_init(RF_DECLARE_COND(*c))
d192 1
a192 1
	*c = 0;			/* No reason. */
d196 3
a198 2
int
rf_cond_destroy(RF_DECLARE_COND(*c))
@


1.3.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

a5 1

d38 2
a39 2
void mutex_destroyer(void *);
void cond_destroyer(void *);
d42 1
a42 1
 * Shared stuff.
d45 3
a47 2
void
mutex_destroyer(void *arg)
d49 1
a49 1
	int rc;
d57 3
a59 2
void
cond_destroyer(void *arg)
d61 1
a61 1
	int rc;
d65 1
a65 2
		RF_ERRORMSG1("RAIDFRAME: Error %d auto-destroying condition\n",
		    rc);
d69 6
a74 3
int
_rf_create_managed_mutex(RF_ShutdownList_t **listp, RF_DECLARE_MUTEX(*m),
    char *file, int line)
d76 1
a76 1
	int rc, rc1;
a80 1

d86 1
a86 2
			RF_ERRORMSG1("RAIDFRAME: Error %d destroying mutex\n",
			    rc1);
a88 1

d92 6
a97 3
int
_rf_create_managed_cond(RF_ShutdownList_t **listp, RF_DECLARE_COND(*c),
    char *file, int line)
d99 1
a99 1
	int rc, rc1;
a103 1

d109 1
a109 2
			RF_ERRORMSG1("RAIDFRAME: Error %d destroying cond\n",
			    rc1);
d115 6
a120 3
int
_rf_init_managed_threadgroup(RF_ShutdownList_t **listp, RF_ThreadGroup_t *g,
    char *file, int line)
d122 1
a122 1
	int rc;
a126 1

a129 1

d134 5
a138 2
int
_rf_destroy_threadgroup(RF_ThreadGroup_t *g, char *file, int line)
d140 1
a140 1
	int rc1, rc2;
a143 1

a145 1

d149 5
a153 2
int
_rf_init_threadgroup(RF_ThreadGroup_t *g, char *file, int line)
d155 1
a155 1
	int rc;
a159 1

a164 1

d171 1
a171 1
 * Kernel.
d173 3
a175 3

int
rf_mutex_init(decl_simple_lock_data(, *m))
d181 3
a183 2
int
rf_mutex_destroy(decl_simple_lock_data(, *m))
d188 3
a190 2
int
rf_cond_init(RF_DECLARE_COND(*c))
d192 1
a192 1
	*c = 0;			/* No reason. */
d196 3
a198 2
int
rf_cond_destroy(RF_DECLARE_COND(*c))
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_threadstuff.c,v 1.1 1999/01/11 14:29:53 niklas Exp $	*/
/*	$NetBSD: rf_threadstuff.c,v 1.3 1999/02/05 00:06:18 oster Exp $	*/
a39 1
void    thread_wakeup(void *);
a141 4
#if RF_DEBUG_ATOMIC > 0
	rc1 = _rf_mutex_destroy(&g->mutex, file, line);
	rc2 = _rf_cond_destroy(&g->cond, file, line);
#else				/* RF_DEBUG_ATOMIC > 0 */
a143 1
#endif				/* RF_DEBUG_ATOMIC > 0 */
a156 10
#if RF_DEBUG_ATOMIC > 0
	rc = _rf_mutex_init(&g->mutex, file, line);
	if (rc)
		return (rc);
	rc = _rf_cond_init(&g->cond, file, line);
	if (rc) {
		_rf_mutex_destroy(&g->mutex, file, line);
		return (rc);
	}
#else				/* RF_DEBUG_ATOMIC > 0 */
a164 1
#endif				/* RF_DEBUG_ATOMIC > 0 */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_threadstuff.c,v 1.1 1998/11/13 04:20:35 oster Exp $	*/
/*	$NetBSD: rf_threadstuff.c,v 1.1 1998/11/13 04:20:35 oster Exp $	*/
a32 5
#ifdef _KERNEL
#define KERNEL
#endif


d40 1
a40 1
void thread_wakeup(void *);
d46 3
a48 2
static void mutex_destroyer(arg)
  void  *arg;
d50 1
a50 1
	int rc;
d58 3
a60 2
static void cond_destroyer(arg)
  void  *arg;
d62 1
a62 1
	int rc;
d70 6
a75 5
int _rf_create_managed_mutex(listp, m, file, line)
  RF_ShutdownList_t  **listp;
  RF_DECLARE_MUTEX(*m)
  char  *file;
  int    line;
d77 1
a77 1
	int rc, rc1;
d81 2
a82 2
		return(rc);
	rc = _rf_ShutdownCreate(listp, mutex_destroyer, (void *)m, file, line);
d90 1
a90 1
	return(rc);
d93 6
a98 5
int _rf_create_managed_cond(listp, c, file, line)
  RF_ShutdownList_t  **listp;
  RF_DECLARE_COND(*c)
  char  *file;
  int    line;
d100 1
a100 1
	int rc, rc1;
d104 2
a105 2
		return(rc);
	rc = _rf_ShutdownCreate(listp, cond_destroyer, (void *)c, file, line);
d113 1
a113 1
	return(rc);
d116 6
a121 5
int _rf_init_managed_threadgroup(listp, g, file, line)
  RF_ShutdownList_t  **listp;
  RF_ThreadGroup_t    *g;
  char                *file;
  int                  line;
d123 1
a123 1
	int rc;
d127 1
a127 1
		return(rc);
d130 1
a130 1
		return(rc);
d132 1
a132 1
	return(0);
d135 5
a139 4
int _rf_destroy_threadgroup(g, file, line)
  RF_ThreadGroup_t  *g;
  char              *file;
  int                line;
d141 1
a141 1
  int rc1, rc2;
d144 16
a159 15
  rc1 = _rf_mutex_destroy(&g->mutex, file, line);
  rc2 = _rf_cond_destroy(&g->cond, file, line);
#else /* RF_DEBUG_ATOMIC > 0 */
  rc1 = rf_mutex_destroy(&g->mutex);
  rc2 = rf_cond_destroy(&g->cond);
#endif /* RF_DEBUG_ATOMIC > 0 */
  if (rc1)
    return(rc1);
  return(rc2);
}

int _rf_init_threadgroup(g, file, line)
  RF_ThreadGroup_t  *g;
  char              *file;
  int                line;
d161 1
a161 1
  int rc;
d164 4
a167 40
  rc = _rf_mutex_init(&g->mutex, file, line);
  if (rc)
    return(rc);
  rc = _rf_cond_init(&g->cond, file, line);
  if (rc) {
    _rf_mutex_destroy(&g->mutex, file, line);
    return(rc);
  }
#else /* RF_DEBUG_ATOMIC > 0 */
  rc = rf_mutex_init(&g->mutex);
  if (rc)
    return(rc);
  rc = rf_cond_init(&g->cond);
  if (rc) {
    rf_mutex_destroy(&g->mutex);
    return(rc);
  }
#endif /* RF_DEBUG_ATOMIC > 0 */
  g->created = g->running = g->shutdown = 0;
  return(0);
}

/*
 * User
 */

#if !defined(KERNEL) && !defined(SIMULATE)

#if RF_DEBUG_ATOMIC > 0

static RF_ATEnt_t rf_atent_list;
static RF_ATEnt_t *rf_atent_done_list=NULL;

static pthread_mutex_t rf_atent_mutex;

void rf_atent_init()
{
	int rc;

	rc = pthread_mutex_init(&rf_atent_mutex, pthread_mutexattr_default);
d169 2
a170 3
		fprintf(stderr, "ERROR: rc=%d creating rf_atent_mutex\n", rc);
		fflush(stderr);
		RF_PANIC();
d172 5
a176 19
	rf_atent_list.next = rf_atent_list.prev = &rf_atent_list;
}

#define ATENT_TYPE(_e_) ((((_e_)->type == 0)||((_e_)->type > 2)) ? 0 : (_e_)->type)
#define ATENT_OTYPE(_e_) ((((_e_)->otype == 0)||((_e_)->otype > 2)) ? 0 : (_e_)->otype)

void rf_atent_shutdown()
{
	int rc, num_freed[3], num_not_freed[3];
	RF_ATEnt_t *r, *n;

	num_freed[0] = num_freed[1] = num_freed[2] = 0;
	num_not_freed[0] = num_not_freed[1] = num_not_freed[2] = 0;
	printf("rf_atent_shutdown:\n");
	for(r=rf_atent_list.next;r!=&rf_atent_list;r=r->next) {
		printf("r=%lx type=%d file=%s line=%d\n", r, r->type, r->file, r->line);
		num_not_freed[ATENT_TYPE(r)]++;
	}
	rc = pthread_mutex_destroy(&rf_atent_mutex);
d178 2
a179 3
		fprintf(stderr, "ERROR: rc=%d destroying rf_atent_mutex\n", rc);
		fflush(stderr);
		RF_PANIC();
d181 3
a183 65
	for(r=rf_atent_done_list;r;r=n) {
		n = r->next;
		num_freed[ATENT_OTYPE(r)]++;
		free(r);
	}
	printf("%d mutexes not freed %d conditions not freed %d bogus not freed\n",
		num_not_freed[1], num_not_freed[2], num_not_freed[0]);
	printf("%d mutexes freed %d conditions freed %d bogus freed\n",
		num_freed[1], num_freed[2], num_freed[0]);
	fflush(stdout);
	fflush(stderr);
}

static RF_ATEnt_t *AllocATEnt(file,line)
  char  *file;
  int    line;
{
	RF_ATEnt_t *t;

	t = (RF_ATEnt_t *)malloc(sizeof(RF_ATEnt_t));
	if (t == NULL) {
		RF_PANIC();
	}
	t->file = file;
	t->line = line;
	t->type = 0;
	return(t);
}

static void FreeATEnt(t)
  RF_ATEnt_t  *t;
{
	t->otype = t->type;
	t->type = 0;
	t->next = rf_atent_done_list;
	rf_atent_done_list = t;
}

int _rf_mutex_init(m, file, line)
  RF_ATEnt_t  **m;
  char         *file;
  int           line;
{
	RF_ATEnt_t *a;
	int rc;

	a = AllocATEnt(file,line);
	rc = pthread_mutex_init(&a->m, pthread_mutexattr_default);
	if (rc == 0) {
		pthread_mutex_lock(&rf_atent_mutex);
		a->next = rf_atent_list.next;
		a->prev = &rf_atent_list;
		a->type = RF_ATENT_M;
		a->next->prev = a;
		a->prev->next = a;
		pthread_mutex_unlock(&rf_atent_mutex);
	}
	else {
		fprintf(stderr, "ERROR: rc=%d allocating mutex %s:%d\n",
			rc, file, line);
		fflush(stderr);
		RF_PANIC();
	}
	*m = a;
	return(0);
a185 118
int _rf_mutex_destroy(m, file, line)
  RF_ATEnt_t  **m;
  char         *file;
  int           line;
{
	RF_ATEnt_t *r;
	int rc;

	r = *m;
	rc = pthread_mutex_destroy(&r->m);
	if (rc) {
		fprintf(stderr, "ERROR: rc=%d destroying mutex %s:%d\n",
			rc, file, line);
		fflush(stderr);
		RF_PANIC();
	}
	pthread_mutex_lock(&rf_atent_mutex);
	r->next->prev = r->prev;
	r->prev->next = r->next;
	FreeATEnt(r);
	pthread_mutex_unlock(&rf_atent_mutex);
	*m = NULL;
	return(0);
}

int _rf_cond_init(c, file, line)
  RF_ATEnt_t  **c;
  char         *file;
  int           line;
{
	RF_ATEnt_t *a;
	int rc;

	a = AllocATEnt(file,line);
	rc = pthread_cond_init(&a->c, pthread_condattr_default);
	if (rc == 0) {
		pthread_mutex_lock(&rf_atent_mutex);
		a->next = rf_atent_list.next;
		a->prev = &rf_atent_list;
		a->next->prev = a;
		a->prev->next = a;
		a->type = RF_ATENT_C;
		pthread_mutex_unlock(&rf_atent_mutex);
	}
	else {
		fprintf(stderr, "ERROR: rc=%d allocating cond %s:%d\n",
			rc, file, line);
		fflush(stderr);
		RF_PANIC();
	}
	*c = a;
	return(0);
}

int _rf_cond_destroy(c, file, line)
  RF_ATEnt_t  **c;
  char         *file;
  int           line;
{
	RF_ATEnt_t *r;
	int rc;

	r = *c;
	rc = pthread_cond_destroy(&r->c);
	if (rc) {
		fprintf(stderr, "ERROR: rc=%d destroying cond %s:%d\n",
			rc, file, line);
		fflush(stderr);
		RF_PANIC();
	}
	pthread_mutex_lock(&rf_atent_mutex);
	r->next->prev = r->prev;
	r->prev->next = r->next;
	FreeATEnt(r);
	pthread_mutex_unlock(&rf_atent_mutex);
	*c = NULL;
	return(0);
}

#else /* RF_DEBUG_ATOMIC > 0 */

int rf_mutex_init(m)
  pthread_mutex_t  *m;
{
#ifdef __osf__
	return(pthread_mutex_init(m, pthread_mutexattr_default));
#endif /* __osf__ */
#ifdef AIX
	return(pthread_mutex_init(m, &pthread_mutexattr_default));
#endif /* AIX */
}

int rf_mutex_destroy(m)
  pthread_mutex_t  *m;
{
	return(pthread_mutex_destroy(m));
}

int rf_cond_init(c)
  pthread_cond_t  *c;
{
#ifdef __osf__
	return(pthread_cond_init(c, pthread_condattr_default));
#endif /* __osf__ */
#ifdef AIX
	return(pthread_cond_init(c, &pthread_condattr_default));
#endif /* AIX */
}

int rf_cond_destroy(c)
  pthread_cond_t  *c;
{
	return(pthread_cond_destroy(c));
}

#endif /* RF_DEBUG_ATOMIC > 0 */

#endif /* !KERNEL && !SIMULATE */
d190 3
a192 3
#ifdef KERNEL
int rf_mutex_init(m)
  decl_simple_lock_data(,*m)
d195 1
a195 33
	return(0);
}

int rf_mutex_destroy(m)
  decl_simple_lock_data(,*m)
{
	return(0);
}

int rf_cond_init(c)
  RF_DECLARE_COND(*c)
{
	*c = 0; /* no reason */
	return(0);
}

int rf_cond_destroy(c)
  RF_DECLARE_COND(*c)
{
	return(0);
}


#endif /* KERNEL */

/*
 * Simulator
 */
#ifdef SIMULATE
int rf_mutex_init(m)
  RF_DECLARE_MUTEX(*m)
{
	return(0);
d198 3
a200 2
int rf_mutex_destroy(m)
  RF_DECLARE_MUTEX(*m)
d202 1
a202 1
	return(0);
d205 3
a207 2
int rf_cond_init(c)
  RF_DECLARE_COND(*c)
d209 2
a210 1
	return(0);
d213 3
a215 2
int rf_cond_destroy(c)
  RF_DECLARE_COND(*c)
d217 1
a217 1
	return(0);
a218 1
#endif /* SIMULATE */
@

