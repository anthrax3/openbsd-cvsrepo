head	1.7;
access;
symbols
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.36
	OPENBSD_5_0:1.6.0.34
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.32
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.30
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.26
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.12
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.10
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.8
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.2
	SMP_BASE:1.3
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.6;

1.6
date	2003.04.27.11.22.54;	author ho;	state Exp;
branches;
next	1.5;

1.5
date	2002.12.16.07.01.04;	author tdeval;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.08.16.07.41;	author peter;	state Exp;
branches
	1.4.8.1;
next	1.3;

1.3
date	2000.01.07.14.50.21;	author peter;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	99.02.16.00.02.47;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.29.23;	author niklas;	state Exp;
branches;
next	;

1.3.2.1
date	2001.05.14.22.26.11;	author niklas;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2003.03.28.00.38.28;	author niklas;	state Exp;
branches;
next	1.3.2.3;

1.3.2.3
date	2003.05.13.19.35.10;	author ho;	state Exp;
branches;
next	;

1.4.8.1
date	2003.05.19.22.21.52;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_general.h,v 1.6 2003/04/27 11:22:54 ho Exp $	*/
/*	$NetBSD: rf_general.h,v 1.5 2000/03/03 02:04:48 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*
 * rf_general.h -- Some general-use definitions.
 */

/*#define NOASSERT*/

#ifndef	_RF__RF_GENERAL_H_
#define	_RF__RF_GENERAL_H_

/* Error reporting and handling. */

#ifdef	_KERNEL
#include <sys/systm.h>		/* printf, snprintf, and friends. */
#endif

#define	RF_ERRORMSG(s)		printf((s))
#define	RF_ERRORMSG1(s,a)	printf((s), (a))
#define	RF_ERRORMSG2(s,a,b)	printf((s), (a), (b))
#define	RF_ERRORMSG3(s,a,b,c)	printf((s), (a), (b), (c))

extern char rf_panicbuf[2048];
#define	RF_PANIC()							\
do {									\
	snprintf(rf_panicbuf, sizeof rf_panicbuf,			\
	    "RAIDframe error at line %d file %s",			\
	    __LINE__, __FILE__);					\
	panic(rf_panicbuf);						\
} while (0)

#ifdef	_KERNEL
#ifdef	RF_ASSERT
#undef	RF_ASSERT
#endif	/* RF_ASSERT */
#ifndef	NOASSERT
#define	RF_ASSERT(_x_)							\
do {									\
	if (!(_x_)) {							\
		snprintf(rf_panicbuf, sizeof rf_panicbuf,		\
		    "RAIDframe error at line %d"			\
		    " file %s (failed asserting %s)\n", __LINE__,	\
		     __FILE__, #_x_);					\
		panic(rf_panicbuf);					\
	}								\
} while (0)
#else	/* !NOASSERT */
#define	RF_ASSERT(x)		{/*noop*/}
#endif	/* !NOASSERT */
#else	/* _KERNEL */
#define	RF_ASSERT(x)		{/*noop*/}
#endif	/* _KERNEL */

/* Random stuff. */
#define	RF_MAX(a,b)		(((a) > (b)) ? (a) : (b))
#define	RF_MIN(a,b)		(((a) < (b)) ? (a) : (b))

/* Divide-by-zero check. */
#define	RF_DB0_CHECK(a,b)	(((b)==0) ? 0 : (a)/(b))

/* Get time of day. */
#define	RF_GETTIME(_t)		microtime(&(_t))

/*
 * Zero memory - Not all bzero calls go through here, only
 * those which in the kernel may have a user address.
 */

#define	RF_BZERO(_bp,_b,_l)	bzero(_b, _l)	/*
						 * XXX This is likely
						 * incorrect. GO
						 */

#define	RF_UL(x)		((unsigned long)(x))
#define	RF_PGMASK		RF_UL(NBPG-1)
#define	RF_BLIP(x)		(NBPG - (RF_UL(x) & RF_PGMASK))	/*
								 * Bytes left
								 * in page.
								 */
#define	RF_PAGE_ALIGNED(x)	((RF_UL(x) & RF_PGMASK) == 0)

#ifdef	__STDC__
#define	RF_STRING(_str_)	#_str_
#else	/* __STDC__ */
#define	RF_STRING(_str_)	"_str_"
#endif	/* __STDC__ */

#endif	/* !_RF__RF_GENERAL_H_ */
@


1.6
log
@strcpy/sprintf cleanup of sys/dev. miod@@, deraadt@@ says to commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_general.h,v 1.5 2002/12/16 07:01:04 tdeval Exp $	*/
@


1.5
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_general.h,v 1.4 2000/08/08 16:07:41 peter Exp $	*/
d43 1
a43 1
#include <sys/systm.h>		/* printf, sprintf, and friends. */
d51 1
a51 1
extern char rf_panicbuf[];
d54 2
a55 1
	sprintf(rf_panicbuf, "RAIDframe error at line %d file %s",	\
d68 2
a69 1
		sprintf(rf_panicbuf, "RAIDframe error at line %d"	\
@


1.4
log
@sync RAIDframe with Gre Oster's work for NetBSD.

This update incorporates changes since January 2000.

RAID1 and RAID5 tested for functionality matching the 2.7 code. A
number of bug fixes (including stopping a parity rebuild when
unconfiguring) have been included. See Greg's RAIDframe info page:

	http://www.cs.usask.ca/staff/oster/raid.html

The RAID_AUTOCONFIG feature set does *NOT* yet work. These features
require more work throughout the boot system and as such are a big
task.

IMPORTANT: As with anything that is this near live data on your
systems, please test carefully with existing configurations before
deploying in a live system.  Feedback via sendbug or mail direct
to peter@@wonderland.org is appreciated.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_general.h,v 1.3 2000/01/07 14:50:21 peter Exp $	*/
d3 1
d32 1
a32 1
 * rf_general.h -- some general-use definitions
d37 2
a38 2
#ifndef _RF__RF_GENERAL_H_
#define _RF__RF_GENERAL_H_
d40 1
a40 1
/* error reporting and handling */
d42 2
a43 2
#ifdef _KERNEL
#include<sys/systm.h>		/* printf, sprintf, and friends */
d46 4
a49 4
#define RF_ERRORMSG(s)            printf((s))
#define RF_ERRORMSG1(s,a)         printf((s),(a))
#define RF_ERRORMSG2(s,a,b)       printf((s),(a),(b))
#define RF_ERRORMSG3(s,a,b,c)     printf((s),(a),(b),(c))
d52 31
a82 25
#define RF_PANIC() {sprintf(rf_panicbuf,"raidframe error at line %d file %s",__LINE__,__FILE__); panic(rf_panicbuf);}

#ifdef _KERNEL
#ifdef RF_ASSERT
#undef RF_ASSERT
#endif				/* RF_ASSERT */
#ifndef NOASSERT
#define RF_ASSERT(_x_) { \
  if (!(_x_)) { \
    sprintf(rf_panicbuf, \
        "raidframe error at line %d file %s (failed asserting %s)\n", \
        __LINE__, __FILE__, #_x_); \
    panic(rf_panicbuf); \
  } \
}
#else				/* !NOASSERT */
#define RF_ASSERT(x) {/*noop*/}
#endif				/* !NOASSERT */
#else				/* _KERNEL */
#define RF_ASSERT(x) {/*noop*/}
#endif				/* _KERNEL */

/* random stuff */
#define RF_MAX(a,b) (((a) > (b)) ? (a) : (b))
#define RF_MIN(a,b) (((a) < (b)) ? (a) : (b))
d84 2
a85 2
/* divide-by-zero check */
#define RF_DB0_CHECK(a,b) ( ((b)==0) ? 0 : (a)/(b) )
d87 2
a88 2
/* get time of day */
#define RF_GETTIME(_t) microtime(&(_t))
d91 2
a92 2
 * zero memory- not all bzero calls go through here, only
 * those which in the kernel may have a user address
d95 18
a112 14
#define RF_BZERO(_bp,_b,_l)  bzero(_b,_l)	/* XXX This is likely
						 * incorrect. GO */


#define RF_UL(x)           ((unsigned long) (x))
#define RF_PGMASK          RF_UL(NBPG-1)
#define RF_BLIP(x)         (NBPG - (RF_UL(x) & RF_PGMASK))	/* bytes left in page */
#define RF_PAGE_ALIGNED(x) ((RF_UL(x) & RF_PGMASK) == 0)

#ifdef __STDC__
#define RF_STRING(_str_) #_str_
#else				/* __STDC__ */
#define RF_STRING(_str_) "_str_"
#endif				/* __STDC__ */
d114 1
a114 1
#endif				/* !_RF__RF_GENERAL_H_ */
@


1.4.8.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d31 1
a31 1
 * rf_general.h -- Some general-use definitions.
d36 2
a37 2
#ifndef	_RF__RF_GENERAL_H_
#define	_RF__RF_GENERAL_H_
d39 1
a39 1
/* Error reporting and handling. */
d41 2
a42 2
#ifdef	_KERNEL
#include <sys/systm.h>		/* printf, snprintf, and friends. */
d45 31
a75 39
#define	RF_ERRORMSG(s)		printf((s))
#define	RF_ERRORMSG1(s,a)	printf((s), (a))
#define	RF_ERRORMSG2(s,a,b)	printf((s), (a), (b))
#define	RF_ERRORMSG3(s,a,b,c)	printf((s), (a), (b), (c))

extern char rf_panicbuf[2048];
#define	RF_PANIC()							\
do {									\
	snprintf(rf_panicbuf, sizeof rf_panicbuf,			\
	    "RAIDframe error at line %d file %s",			\
	    __LINE__, __FILE__);					\
	panic(rf_panicbuf);						\
} while (0)

#ifdef	_KERNEL
#ifdef	RF_ASSERT
#undef	RF_ASSERT
#endif	/* RF_ASSERT */
#ifndef	NOASSERT
#define	RF_ASSERT(_x_)							\
do {									\
	if (!(_x_)) {							\
		snprintf(rf_panicbuf, sizeof rf_panicbuf,		\
		    "RAIDframe error at line %d"			\
		    " file %s (failed asserting %s)\n", __LINE__,	\
		     __FILE__, #_x_);					\
		panic(rf_panicbuf);					\
	}								\
} while (0)
#else	/* !NOASSERT */
#define	RF_ASSERT(x)		{/*noop*/}
#endif	/* !NOASSERT */
#else	/* _KERNEL */
#define	RF_ASSERT(x)		{/*noop*/}
#endif	/* _KERNEL */

/* Random stuff. */
#define	RF_MAX(a,b)		(((a) > (b)) ? (a) : (b))
#define	RF_MIN(a,b)		(((a) < (b)) ? (a) : (b))
d77 2
a78 2
/* Divide-by-zero check. */
#define	RF_DB0_CHECK(a,b)	(((b)==0) ? 0 : (a)/(b))
d80 2
a81 2
/* Get time of day. */
#define	RF_GETTIME(_t)		microtime(&(_t))
d84 2
a85 2
 * Zero memory - Not all bzero calls go through here, only
 * those which in the kernel may have a user address.
d88 14
a101 18
#define	RF_BZERO(_bp,_b,_l)	bzero(_b, _l)	/*
						 * XXX This is likely
						 * incorrect. GO
						 */

#define	RF_UL(x)		((unsigned long)(x))
#define	RF_PGMASK		RF_UL(NBPG-1)
#define	RF_BLIP(x)		(NBPG - (RF_UL(x) & RF_PGMASK))	/*
								 * Bytes left
								 * in page.
								 */
#define	RF_PAGE_ALIGNED(x)	((RF_UL(x) & RF_PGMASK) == 0)

#ifdef	__STDC__
#define	RF_STRING(_str_)	#_str_
#else	/* __STDC__ */
#define	RF_STRING(_str_)	"_str_"
#endif	/* __STDC__ */
d103 1
a103 1
#endif	/* !_RF__RF_GENERAL_H_ */
@


1.3
log
@sync with work by Greg Oster on NetBSD

Please note: This update has *only* been tested on i386 with IDE
disks. Could someone with a spare box please make sure all is OK with
SCSI and maybe other arches ? sparc testing will follow locally.

* remove rf_sys.h
* many changes to make it more stable
* some performance increases
* All raid threads now get their own kernel process and the calling
  raidctl(8) program will show status progress through a meter.
* In theory FFS_SOFTUPDATES and RAIDframe will now work together - NOT
  TESTED YET

See http://www.cs.usask.ca/staff/oster/raid.html

This updates include Greg's changes to Jan 4th 2000.

TODO:
* some odd behaviour when running raictl -c on an already config'ed
  raid set - problem founf, fix being done
* progress meter is in raidctl(8) - seperate commit, but could do with
  sync'ing with OpenBSD ftp version
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_general.h,v 1.2 1999/02/16 00:02:47 niklas Exp $	*/
/*	$NetBSD: rf_general.h,v 1.4 1999/12/07 02:40:28 oster Exp $	*/
d49 1
a49 3
#define RF_ERRORMSG4(s,a,b,c,d)   printf((s),(a),(b),(c),(d))
#define RF_ERRORMSG5(s,a,b,c,d,e) printf((s),(a),(b),(c),(d),(e))
#define perror(x)
@


1.3.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_general.h,v 1.4 2000/08/08 16:07:41 peter Exp $	*/
/*	$NetBSD: rf_general.h,v 1.5 2000/03/03 02:04:48 oster Exp $	*/
d49 3
a51 1

@


1.3.2.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d31 1
a31 1
 * rf_general.h -- Some general-use definitions.
d36 2
a37 2
#ifndef	_RF__RF_GENERAL_H_
#define	_RF__RF_GENERAL_H_
d39 1
a39 1
/* Error reporting and handling. */
d41 2
a42 2
#ifdef	_KERNEL
#include <sys/systm.h>		/* printf, sprintf, and friends. */
d45 4
a48 4
#define	RF_ERRORMSG(s)		printf((s))
#define	RF_ERRORMSG1(s,a)	printf((s), (a))
#define	RF_ERRORMSG2(s,a,b)	printf((s), (a), (b))
#define	RF_ERRORMSG3(s,a,b,c)	printf((s), (a), (b), (c))
d51 25
a75 31
#define	RF_PANIC()							\
do {									\
	sprintf(rf_panicbuf, "RAIDframe error at line %d file %s",	\
	    __LINE__, __FILE__);					\
	panic(rf_panicbuf);						\
} while (0)

#ifdef	_KERNEL
#ifdef	RF_ASSERT
#undef	RF_ASSERT
#endif	/* RF_ASSERT */
#ifndef	NOASSERT
#define	RF_ASSERT(_x_)							\
do {									\
	if (!(_x_)) {							\
		sprintf(rf_panicbuf, "RAIDframe error at line %d"	\
		    " file %s (failed asserting %s)\n", __LINE__,	\
		     __FILE__, #_x_);					\
		panic(rf_panicbuf);					\
	}								\
} while (0)
#else	/* !NOASSERT */
#define	RF_ASSERT(x)		{/*noop*/}
#endif	/* !NOASSERT */
#else	/* _KERNEL */
#define	RF_ASSERT(x)		{/*noop*/}
#endif	/* _KERNEL */

/* Random stuff. */
#define	RF_MAX(a,b)		(((a) > (b)) ? (a) : (b))
#define	RF_MIN(a,b)		(((a) < (b)) ? (a) : (b))
d77 2
a78 2
/* Divide-by-zero check. */
#define	RF_DB0_CHECK(a,b)	(((b)==0) ? 0 : (a)/(b))
d80 2
a81 2
/* Get time of day. */
#define	RF_GETTIME(_t)		microtime(&(_t))
d84 2
a85 2
 * Zero memory - Not all bzero calls go through here, only
 * those which in the kernel may have a user address.
d88 14
a101 18
#define	RF_BZERO(_bp,_b,_l)	bzero(_b, _l)	/*
						 * XXX This is likely
						 * incorrect. GO
						 */

#define	RF_UL(x)		((unsigned long)(x))
#define	RF_PGMASK		RF_UL(NBPG-1)
#define	RF_BLIP(x)		(NBPG - (RF_UL(x) & RF_PGMASK))	/*
								 * Bytes left
								 * in page.
								 */
#define	RF_PAGE_ALIGNED(x)	((RF_UL(x) & RF_PGMASK) == 0)

#ifdef	__STDC__
#define	RF_STRING(_str_)	#_str_
#else	/* __STDC__ */
#define	RF_STRING(_str_)	"_str_"
#endif	/* __STDC__ */
d103 1
a103 1
#endif	/* !_RF__RF_GENERAL_H_ */
@


1.3.2.3
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_general.h,v 1.3.2.2 2003/03/28 00:38:28 niklas Exp $	*/
d43 1
a43 1
#include <sys/systm.h>		/* printf, snprintf, and friends. */
d51 1
a51 1
extern char rf_panicbuf[2048];
d54 1
a54 2
	snprintf(rf_panicbuf, sizeof rf_panicbuf,			\
	    "RAIDframe error at line %d file %s",			\
d67 1
a67 2
		snprintf(rf_panicbuf, sizeof rf_panicbuf,		\
		    "RAIDframe error at line %d"			\
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_general.h,v 1.1 1999/01/11 14:29:23 niklas Exp $	*/
/*	$NetBSD: rf_general.h,v 1.3 1999/02/05 00:06:12 oster Exp $	*/
a97 13

#if DKUSAGE > 0
#define RF_DKU_END_IO(_unit_,_bp_) { \
	int s = splbio(); \
	dku_end_io(DKU_RAIDFRAME_BUS, _unit_, 0, \
			(((_bp_)->b_flags&(B_READ|B_WRITE) == B_READ) ? \
		    CAM_DIR_IN : CAM_DIR_OUT), \
			(_bp_)->b_bcount); \
	splx(s); \
}
#else				/* DKUSAGE > 0 */
#define RF_DKU_END_IO(unit) { /* noop */ }
#endif				/* DKUSAGE > 0 */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_general.h,v 1.1 1998/11/13 04:20:30 oster Exp $	*/
/*	$NetBSD: rf_general.h,v 1.1 1998/11/13 04:20:30 oster Exp $	*/
a33 96
/*
 * :  
 * Log: rf_general.h,v 
 * Revision 1.26  1996/08/09 16:44:57  jimz
 * sunos port
 *
 * Revision 1.25  1996/08/07  21:08:57  jimz
 * get NBPG defined for IRIX
 *
 * Revision 1.24  1996/08/06  22:02:06  jimz
 * include linux/user.h for linux to get NBPG
 *
 * Revision 1.23  1996/07/27  23:36:08  jimz
 * Solaris port of simulator
 *
 * Revision 1.22  1996/06/09  02:36:46  jimz
 * lots of little crufty cleanup- fixup whitespace
 * issues, comment #ifdefs, improve typing in some
 * places (esp size-related)
 *
 * Revision 1.21  1996/05/30  23:22:16  jimz
 * bugfixes of serialization, timing problems
 * more cleanup
 *
 * Revision 1.20  1996/05/27  18:56:37  jimz
 * more code cleanup
 * better typing
 * compiles in all 3 environments
 *
 * Revision 1.19  1996/05/24  22:17:04  jimz
 * continue code + namespace cleanup
 * typed a bunch of flags
 *
 * Revision 1.18  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.17  1996/05/23  00:33:23  jimz
 * code cleanup: move all debug decls to rf_options.c, all extern
 * debug decls to rf_options.h, all debug vars preceded by rf_
 *
 * Revision 1.16  1996/05/21  18:53:13  jimz
 * be sure that noop macros don't confuse conditionals and loops
 *
 * Revision 1.15  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.14  1996/05/08  21:01:24  jimz
 * fixed up enum type names that were conflicting with other
 * enums and function names (ie, "panic")
 * future naming trends will be towards RF_ and rf_ for
 * everything raidframe-related
 *
 * Revision 1.13  1995/12/12  18:10:06  jimz
 * MIN -> RF_MIN, MAX -> RF_MAX, ASSERT -> RF_ASSERT
 * fix 80-column brain damage in comments
 *
 * Revision 1.12  1995/12/01  18:29:08  root
 * added copyright info
 *
 * Revision 1.11  1995/09/19  22:59:52  jimz
 * Add kernel macro RF_DKU_END_IO(). When DKUSAGE is not defined,
 * this is a no-op. When it is defined, it calls dku_end_io()
 * correctly given a raidframe unit number and a buf pointer.
 *
 * Revision 1.10  1995/07/03  18:13:56  holland
 * changed kernel defn of GETTIME
 *
 * Revision 1.9  1995/07/02  15:07:42  holland
 * bug fixes related to getting distributed sparing numbers
 *
 * Revision 1.8  1995/06/12  15:54:40  rachad
 * Added garbege collection for log structured storage
 *
 * Revision 1.7  1995/06/03  19:18:16  holland
 * changes related to kernelization: access traces
 * changes related to distributed sparing: some bug fixes
 *
 * Revision 1.6  1995/05/01  13:28:00  holland
 * parity range locks, locking disk requests, recon+parityscan in kernel, etc.
 *
 * Revision 1.5  1995/04/06  14:47:56  rachad
 * merge completed
 *
 * Revision 1.4  1995/03/15  20:45:23  holland
 * distr sparing changes.
 *
 * Revision 1.3  1995/02/03  22:31:36  holland
 * many changes related to kernelization
 *
 * Revision 1.2  1994/11/29  21:37:10  danner
 * Added divide by zero check.
 *
 */

d39 2
d42 1
a42 1
#define KERNEL
a44 25
#if !defined(KERNEL) && !defined(NOASSERT)
#include <assert.h>
#endif /* !KERNEL && !NOASSERT */

/* error reporting and handling */

#ifndef KERNEL

#define RF_ERRORMSG(s)            fprintf(stderr,(s))
#define RF_ERRORMSG1(s,a)         fprintf(stderr,(s),(a))
#define RF_ERRORMSG2(s,a,b)       fprintf(stderr,(s),(a),(b))
#define RF_ERRORMSG3(s,a,b,c)     fprintf(stderr,(s),(a),(b),(c))
#define RF_ERRORMSG4(s,a,b,c,d)   fprintf(stderr,(s),(a),(b),(c),(d))
#define RF_ERRORMSG5(s,a,b,c,d,e) fprintf(stderr,(s),(a),(b),(c),(d),(e))
#ifndef NOASSERT
#define RF_ASSERT(x)   {assert(x);}
#else /* !NOASSERT */
#define RF_ASSERT(x)   {/*noop*/}
#endif /* !NOASSERT */
#define RF_PANIC()              {printf("YIKES!  Something terrible happened at line %d of file %s.  Use a debugger.\n",__LINE__,__FILE__); abort();}

#else /* !KERNEL */
#if (defined(__NetBSD__) || defined(__OpenBSD__)) && defined(_KERNEL)
#include<sys/systm.h> /* printf, sprintf, and friends */
#endif
d55 1
d58 1
a58 1
#endif /* RF_ASSERT */
d68 1
a68 1
#else /* !NOASSERT */
d70 4
a73 3
#endif /* !NOASSERT */

#endif  /* !KERNEL */
a82 4
#ifdef KERNEL
#if !defined(__NetBSD__) && !defined(__OpenBSD__)
extern struct timeval time;
#endif /* !__NetBSD__ && !__OpenBSD__ */
a83 3
#else /* KERNEL */
#define RF_GETTIME(_t) gettimeofday(&(_t), NULL);
#endif /* KERNEL */
d89 4
a92 26
#ifdef KERNEL
#if !defined(__NetBSD__) && !defined(__OpenBSD__)
#define RF_BZERO(_bp,_b,_l) if (IS_SYS_VA(_b)) bzero(_b,_l); else rf_BzeroWithRemap(_bp,_b,_l)
#else 

#define RF_BZERO(_bp,_b,_l)  bzero(_b,_l)  /* XXX This is likely incorrect. GO*/
#endif /* __NetBSD__ || __OpenBSD__ */
#else /* KERNEL */
#define RF_BZERO(_bp,_b,_l) bzero(_b,_l)
#endif /* KERNEL */

#ifdef sun
#include <sys/param.h>
#ifndef NBPG
#define NBPG PAGESIZE
#endif /* !NBPG */
#endif /* sun */

#ifdef IRIX
#include <sys/tfp.h>
#define NBPG _PAGESZ
#endif /* IRIX */

#ifdef LINUX
#include <linux/user.h>
#endif /* LINUX */
d96 1
a96 1
#define RF_BLIP(x)         (NBPG - (RF_UL(x) & RF_PGMASK))    /* bytes left in page */
a98 4
#ifdef KERNEL
#if !defined(__NetBSD__) && !defined(__OpenBSD__)
#include <dkusage.h>
#endif
d108 1
a108 1
#else /* DKUSAGE > 0 */
d110 1
a110 2
#endif /* DKUSAGE > 0 */
#endif /* KERNEL */
d114 1
a114 1
#else /* __STDC__ */
d116 1
a116 1
#endif /* __STDC__ */
d118 1
a118 1
#endif /* !_RF__RF_GENERAL_H_ */
@

