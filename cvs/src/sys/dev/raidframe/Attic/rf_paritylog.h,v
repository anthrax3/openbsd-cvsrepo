head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.06.15.53.59;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.04;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.03.05;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.34;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.28;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.52;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_paritylog.h,v 1.3 2002/12/16 07:01:04 tdeval Exp $	*/
/*	$NetBSD: rf_paritylog.h,v 1.3 1999/02/05 00:06:14 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: William V. Courtright II
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*
 * Header file for parity log.
 */

#ifndef	_RF__RF_PARITYLOG_H_
#define	_RF__RF_PARITYLOG_H_

#include "rf_types.h"

#define	RF_DEFAULT_NUM_SECTORS_PER_LOG		64

typedef int RF_RegionId_t;

typedef enum RF_ParityRecordType_e {
	RF_STOP,
	RF_UPDATE,
	RF_OVERWRITE
} RF_ParityRecordType_t;

struct RF_CommonLogData_s {
	RF_DECLARE_MUTEX(mutex);	/* Protects cnt. */
	int			  cnt;	/* When 0, time to call wakeFunc. */
	RF_Raid_t		 *raidPtr;
/*	int			(*wakeFunc) (struct buf *); */
	int			(*wakeFunc) (RF_DagNode_t *, int);
	void			 *wakeArg;
	RF_AccTraceEntry_t	 *tracerec;
	RF_Etimer_t		  startTime;
	caddr_t			  bufPtr;
	RF_ParityRecordType_t	  operation;
	RF_CommonLogData_t	 *next;
};

struct RF_ParityLogData_s {
	RF_RegionId_t		 regionID;	/*
						 * This struct guaranteed to
						 * span a single region.
						 */
	int			 bufOffset;	/*
						 * Offset from common->bufPtr.
						 */
	RF_PhysDiskAddr_t	 diskAddress;
	RF_CommonLogData_t	*common;	/*
						 * Info shared by one or more
						 * parityLogData structs.
						 */
	RF_ParityLogData_t	*next;
	RF_ParityLogData_t	*prev;
};

struct RF_ParityLogAppendQueue_s {
	RF_DECLARE_MUTEX(mutex);
};

struct RF_ParityLogRecord_s {
	RF_PhysDiskAddr_t	 parityAddr;
	RF_ParityRecordType_t	 operation;
};

struct RF_ParityLog_s {
	RF_RegionId_t		 regionID;
	int			 numRecords;
	int			 diskOffset;
	RF_ParityLogRecord_t	*records;
	caddr_t			 bufPtr;
	RF_ParityLog_t		*next;
};

struct RF_ParityLogQueue_s {
	RF_DECLARE_MUTEX(mutex);
	RF_ParityLog_t	*parityLogs;
};

struct RF_RegionBufferQueue_s {
	RF_DECLARE_MUTEX(mutex);
	RF_DECLARE_COND(cond);
	int	 bufferSize;
	int	 totalBuffers;		/* Size of array 'buffers'. */
	int	 availableBuffers;	/* Num available 'buffers'. */
	int	 emptyBuffersIndex;	/* Stick next freed buffer here. */
	int	 availBuffersIndex;	/* Grab next buffer from here. */
	caddr_t	*buffers;		/* Array buffers used to hold parity. */
};
#define	RF_PLOG_CREATED		(1<<0)	/* Thread is created. */
#define	RF_PLOG_RUNNING		(1<<1)	/* Thread is running. */
#define	RF_PLOG_TERMINATE	(1<<2)	/* Thread is terminated (should exit).*/
#define	RF_PLOG_SHUTDOWN	(1<<3)	/* Thread is aware and exiting/exited.*/

struct RF_ParityLogDiskQueue_s {
	RF_DECLARE_MUTEX(mutex);	/* Protects all vars in this struct. */
	RF_DECLARE_COND(cond);
	int			 threadState;	/*
						 * Is thread running, should it
						 * shutdown ?  (see above)
						 */
	RF_ParityLog_t		*flushQueue;	/*
						 * List of parity logs to be
						 * flushed to log disk.
						 */
	RF_ParityLog_t		*reintQueue;	/*
						 * List of parity logs waiting
						 * to be reintegrated.
						 */
	RF_ParityLogData_t	*bufHead;	/*
						 * Head of FIFO list of log
						 * data, waiting on a buffer.
						 */
	RF_ParityLogData_t	*bufTail;	/*
						 * Tail of FIFO list of log
						 * data, waiting on a buffer.
						 */
	RF_ParityLogData_t	*reintHead;	/*
						 * Head of FIFO list of
						 * log data, waiting on
						 * reintegration.
						 */
	RF_ParityLogData_t	*reintTail;	/*
						 * Tail of FIFO list of
						 * log data, waiting on
						 * reintegration.
						 */
	RF_ParityLogData_t	*logBlockHead;	/*
						 * Queue of work, blocked
						 * until a log is available.
						 */
	RF_ParityLogData_t	*logBlockTail;
	RF_ParityLogData_t	*reintBlockHead;/*
						 * Queue of work, blocked
						 * until reintegration is
						 * complete.
						 */
	RF_ParityLogData_t	*reintBlockTail;
	RF_CommonLogData_t	*freeCommonList;/*
						 * List of unused common
						 * data structs.
						 */
	RF_ParityLogData_t	*freeDataList;	/*
						 * List of unused log
						 * data structs.
						 */
};

struct RF_DiskMap_s {
	RF_PhysDiskAddr_t	parityAddr;
	RF_ParityRecordType_t	operation;
};

struct RF_RegionInfo_s {
	RF_DECLARE_MUTEX(mutex);		/*
						 * Protects: diskCount, diskMap,
						 * loggingEnabled, coreLog.
						 */
	RF_DECLARE_MUTEX(reintMutex);		/* Protects: reintInProgress. */
	int		 reintInProgress;	/*
						 * Flag used to suspend flushing
						 * operations.
						 */
	RF_SectorCount_t capacity;		/*
						 * Capacity of this region
						 * in sectors.
						*/
	RF_SectorNum_t	 regionStartAddr;	/*
						 * Starting disk address for
						 * this region.
						 */
	RF_SectorNum_t	 parityStartAddr;	/*
						 * Starting disk address for
						 * this region.
						 */
	RF_SectorCount_t numSectorsParity;	/*
						 * Number of parity sectors
						 * protected by this region.
						 */
	RF_SectorCount_t diskCount;		/*
						 * Num of sectors written to
						 * this region's disk log.
						 */
	RF_DiskMap_t	*diskMap;		/*
						 * In-core map of what's in
						 * this region's disk log.
						 */
	int		 loggingEnabled;	/*
						 * Logging enable for this
						 * region.
						 */
	RF_ParityLog_t	*coreLog;		/*
						 * In-core log for this region.
						 */
};

RF_ParityLogData_t *rf_CreateParityLogData(RF_ParityRecordType_t,
	RF_PhysDiskAddr_t *, caddr_t, RF_Raid_t *,
	int (*) (RF_DagNode_t *, int), void *,
	RF_AccTraceEntry_t *, RF_Etimer_t);
RF_ParityLogData_t *rf_SearchAndDequeueParityLogData(RF_Raid_t *, RF_RegionId_t,
	RF_ParityLogData_t **, RF_ParityLogData_t **, int);
void rf_ReleaseParityLogs(RF_Raid_t *, RF_ParityLog_t *);
int  rf_ParityLogAppend(RF_ParityLogData_t *, int, RF_ParityLog_t **, int);
void rf_EnableParityLogging(RF_Raid_t *);

#endif	/* !_RF__RF_PARITYLOG_H_ */
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_paritylog.h,v 1.2 1999/02/16 00:03:05 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_paritylog.h,v 1.1 1999/01/11 14:29:34 niklas Exp $	*/
d3 1
d31 2
a32 2
/* header file for parity log
 *
d35 2
a36 2
#ifndef _RF__RF_PARITYLOG_H_
#define _RF__RF_PARITYLOG_H_
d40 1
a40 1
#define RF_DEFAULT_NUM_SECTORS_PER_LOG 64
d48 1
a48 1
}       RF_ParityRecordType_t;
d51 11
a61 11
	RF_DECLARE_MUTEX(mutex)	/* protects cnt */
	int     cnt;		/* when 0, time to call wakeFunc */
	RF_Raid_t *raidPtr;
/*   int                    (*wakeFunc)(struct buf *); */
	int     (*wakeFunc) (RF_DagNode_t * node, int status);
	void   *wakeArg;
	RF_AccTraceEntry_t *tracerec;
	RF_Etimer_t startTime;
	caddr_t bufPtr;
	RF_ParityRecordType_t operation;
	RF_CommonLogData_t *next;
d65 14
a78 8
	RF_RegionId_t regionID;	/* this struct guaranteed to span a single
				 * region */
	int     bufOffset;	/* offset from common->bufPtr */
	RF_PhysDiskAddr_t diskAddress;
	RF_CommonLogData_t *common;	/* info shared by one or more
					 * parityLogData structs */
	RF_ParityLogData_t *next;
	RF_ParityLogData_t *prev;
d82 1
a82 1
	RF_DECLARE_MUTEX(mutex)
d86 2
a87 2
	RF_PhysDiskAddr_t parityAddr;
	RF_ParityRecordType_t operation;
d91 6
a96 6
	RF_RegionId_t regionID;
	int     numRecords;
	int     diskOffset;
	RF_ParityLogRecord_t *records;
	caddr_t bufPtr;
	RF_ParityLog_t *next;
d100 2
a101 2
	RF_DECLARE_MUTEX(mutex)
	RF_ParityLog_t *parityLogs;
d105 13
a117 13
	RF_DECLARE_MUTEX(mutex)
	RF_DECLARE_COND(cond)
	int     bufferSize;
	int     totalBuffers;	/* size of array 'buffers' */
	int     availableBuffers;	/* num available 'buffers' */
	int     emptyBuffersIndex;	/* stick next freed buffer here */
	int     availBuffersIndex;	/* grab next buffer from here */
	caddr_t *buffers;	/* array buffers used to hold parity */
};
#define RF_PLOG_CREATED   (1<<0)/* thread is created */
#define RF_PLOG_RUNNING   (1<<1)/* thread is running */
#define RF_PLOG_TERMINATE (1<<2)/* thread is terminated (should exit) */
#define RF_PLOG_SHUTDOWN  (1<<3)/* thread is aware and exiting/exited */
d120 39
a158 20
	RF_DECLARE_MUTEX(mutex)	/* protects all vars in this struct */
	RF_DECLARE_COND(cond)
	int     threadState;	/* is thread running, should it shutdown  (see
				 * above) */
	RF_ParityLog_t *flushQueue;	/* list of parity logs to be flushed
					 * to log disk */
	RF_ParityLog_t *reintQueue;	/* list of parity logs waiting to be
					 * reintegrated */
	RF_ParityLogData_t *bufHead;	/* head of FIFO list of log data,
					 * waiting on a buffer */
	RF_ParityLogData_t *bufTail;	/* tail of FIFO list of log data,
					 * waiting on a buffer */
	RF_ParityLogData_t *reintHead;	/* head of FIFO list of log data,
					 * waiting on reintegration */
	RF_ParityLogData_t *reintTail;	/* tail of FIFO list of log data,
					 * waiting on reintegration */
	RF_ParityLogData_t *logBlockHead;	/* queue of work, blocked
						 * until a log is available */
	RF_ParityLogData_t *logBlockTail;
	RF_ParityLogData_t *reintBlockHead;	/* queue of work, blocked
d160 11
a170 6
						 * complete */
	RF_ParityLogData_t *reintBlockTail;
	RF_CommonLogData_t *freeCommonList;	/* list of unused common data
						 * structs */
	RF_ParityLogData_t *freeDataList;	/* list of unused log data
						 * structs */
d174 2
a175 2
	RF_PhysDiskAddr_t parityAddr;
	RF_ParityRecordType_t operation;
d179 51
a229 32
	RF_DECLARE_MUTEX(mutex)	/* protects: diskCount, diskMap,
				 * loggingEnabled, coreLog */
	RF_DECLARE_MUTEX(reintMutex)	/* protects: reintInProgress */
	int     reintInProgress;/* flag used to suspend flushing operations */
	RF_SectorCount_t capacity;	/* capacity of this region in sectors */
	RF_SectorNum_t regionStartAddr;	/* starting disk address for this
					 * region */
	RF_SectorNum_t parityStartAddr;	/* starting disk address for this
					 * region */
	RF_SectorCount_t numSectorsParity;	/* number of parity sectors
						 * protected by this region */
	RF_SectorCount_t diskCount;	/* num of sectors written to this
					 * region's disk log */
	RF_DiskMap_t *diskMap;	/* in-core map of what's in this region's disk
				 * log */
	int     loggingEnabled;	/* logging enable for this region */
	RF_ParityLog_t *coreLog;/* in-core log for this region */
};

RF_ParityLogData_t *
rf_CreateParityLogData(RF_ParityRecordType_t operation,
    RF_PhysDiskAddr_t * pda, caddr_t bufPtr, RF_Raid_t * raidPtr,
    int (*wakeFunc) (RF_DagNode_t * node, int status),
    void *wakeArg, RF_AccTraceEntry_t * tracerec,
    RF_Etimer_t startTime);
	RF_ParityLogData_t *rf_SearchAndDequeueParityLogData(RF_Raid_t * raidPtr,
            RF_RegionId_t regionID, RF_ParityLogData_t ** head,
            RF_ParityLogData_t ** tail, int ignoreLocks);
	void    rf_ReleaseParityLogs(RF_Raid_t * raidPtr, RF_ParityLog_t * firstLog);
	int     rf_ParityLogAppend(RF_ParityLogData_t * logData, int finish,
            RF_ParityLog_t ** incomingLog, int clearReintFlag);
	void    rf_EnableParityLogging(RF_Raid_t * raidPtr);
d231 1
a231 1
#endif				/* !_RF__RF_PARITYLOG_H_ */
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 2
a31 2
/*
 * Header file for parity log.
d34 2
a35 2
#ifndef	_RF__RF_PARITYLOG_H_
#define	_RF__RF_PARITYLOG_H_
d39 1
a39 1
#define	RF_DEFAULT_NUM_SECTORS_PER_LOG		64
d47 1
a47 1
} RF_ParityRecordType_t;
d50 11
a60 11
	RF_DECLARE_MUTEX(mutex);	/* Protects cnt. */
	int			  cnt;	/* When 0, time to call wakeFunc. */
	RF_Raid_t		 *raidPtr;
/*	int			(*wakeFunc) (struct buf *); */
	int			(*wakeFunc) (RF_DagNode_t *, int);
	void			 *wakeArg;
	RF_AccTraceEntry_t	 *tracerec;
	RF_Etimer_t		  startTime;
	caddr_t			  bufPtr;
	RF_ParityRecordType_t	  operation;
	RF_CommonLogData_t	 *next;
d64 8
a71 14
	RF_RegionId_t		 regionID;	/*
						 * This struct guaranteed to
						 * span a single region.
						 */
	int			 bufOffset;	/*
						 * Offset from common->bufPtr.
						 */
	RF_PhysDiskAddr_t	 diskAddress;
	RF_CommonLogData_t	*common;	/*
						 * Info shared by one or more
						 * parityLogData structs.
						 */
	RF_ParityLogData_t	*next;
	RF_ParityLogData_t	*prev;
d75 1
a75 1
	RF_DECLARE_MUTEX(mutex);
d79 2
a80 2
	RF_PhysDiskAddr_t	 parityAddr;
	RF_ParityRecordType_t	 operation;
d84 6
a89 6
	RF_RegionId_t		 regionID;
	int			 numRecords;
	int			 diskOffset;
	RF_ParityLogRecord_t	*records;
	caddr_t			 bufPtr;
	RF_ParityLog_t		*next;
d93 2
a94 2
	RF_DECLARE_MUTEX(mutex);
	RF_ParityLog_t	*parityLogs;
d98 13
a110 13
	RF_DECLARE_MUTEX(mutex);
	RF_DECLARE_COND(cond);
	int	 bufferSize;
	int	 totalBuffers;		/* Size of array 'buffers'. */
	int	 availableBuffers;	/* Num available 'buffers'. */
	int	 emptyBuffersIndex;	/* Stick next freed buffer here. */
	int	 availBuffersIndex;	/* Grab next buffer from here. */
	caddr_t	*buffers;		/* Array buffers used to hold parity. */
};
#define	RF_PLOG_CREATED		(1<<0)	/* Thread is created. */
#define	RF_PLOG_RUNNING		(1<<1)	/* Thread is running. */
#define	RF_PLOG_TERMINATE	(1<<2)	/* Thread is terminated (should exit).*/
#define	RF_PLOG_SHUTDOWN	(1<<3)	/* Thread is aware and exiting/exited.*/
d113 20
a132 39
	RF_DECLARE_MUTEX(mutex);	/* Protects all vars in this struct. */
	RF_DECLARE_COND(cond);
	int			 threadState;	/*
						 * Is thread running, should it
						 * shutdown ?  (see above)
						 */
	RF_ParityLog_t		*flushQueue;	/*
						 * List of parity logs to be
						 * flushed to log disk.
						 */
	RF_ParityLog_t		*reintQueue;	/*
						 * List of parity logs waiting
						 * to be reintegrated.
						 */
	RF_ParityLogData_t	*bufHead;	/*
						 * Head of FIFO list of log
						 * data, waiting on a buffer.
						 */
	RF_ParityLogData_t	*bufTail;	/*
						 * Tail of FIFO list of log
						 * data, waiting on a buffer.
						 */
	RF_ParityLogData_t	*reintHead;	/*
						 * Head of FIFO list of
						 * log data, waiting on
						 * reintegration.
						 */
	RF_ParityLogData_t	*reintTail;	/*
						 * Tail of FIFO list of
						 * log data, waiting on
						 * reintegration.
						 */
	RF_ParityLogData_t	*logBlockHead;	/*
						 * Queue of work, blocked
						 * until a log is available.
						 */
	RF_ParityLogData_t	*logBlockTail;
	RF_ParityLogData_t	*reintBlockHead;/*
						 * Queue of work, blocked
d134 6
a139 11
						 * complete.
						 */
	RF_ParityLogData_t	*reintBlockTail;
	RF_CommonLogData_t	*freeCommonList;/*
						 * List of unused common
						 * data structs.
						 */
	RF_ParityLogData_t	*freeDataList;	/*
						 * List of unused log
						 * data structs.
						 */
d143 2
a144 2
	RF_PhysDiskAddr_t	parityAddr;
	RF_ParityRecordType_t	operation;
d148 32
a179 51
	RF_DECLARE_MUTEX(mutex);		/*
						 * Protects: diskCount, diskMap,
						 * loggingEnabled, coreLog.
						 */
	RF_DECLARE_MUTEX(reintMutex);		/* Protects: reintInProgress. */
	int		 reintInProgress;	/*
						 * Flag used to suspend flushing
						 * operations.
						 */
	RF_SectorCount_t capacity;		/*
						 * Capacity of this region
						 * in sectors.
						*/
	RF_SectorNum_t	 regionStartAddr;	/*
						 * Starting disk address for
						 * this region.
						 */
	RF_SectorNum_t	 parityStartAddr;	/*
						 * Starting disk address for
						 * this region.
						 */
	RF_SectorCount_t numSectorsParity;	/*
						 * Number of parity sectors
						 * protected by this region.
						 */
	RF_SectorCount_t diskCount;		/*
						 * Num of sectors written to
						 * this region's disk log.
						 */
	RF_DiskMap_t	*diskMap;		/*
						 * In-core map of what's in
						 * this region's disk log.
						 */
	int		 loggingEnabled;	/*
						 * Logging enable for this
						 * region.
						 */
	RF_ParityLog_t	*coreLog;		/*
						 * In-core log for this region.
						 */
};

RF_ParityLogData_t *rf_CreateParityLogData(RF_ParityRecordType_t,
	RF_PhysDiskAddr_t *, caddr_t, RF_Raid_t *,
	int (*) (RF_DagNode_t *, int), void *,
	RF_AccTraceEntry_t *, RF_Etimer_t);
RF_ParityLogData_t *rf_SearchAndDequeueParityLogData(RF_Raid_t *, RF_RegionId_t,
	RF_ParityLogData_t **, RF_ParityLogData_t **, int);
void rf_ReleaseParityLogs(RF_Raid_t *, RF_ParityLog_t *);
int  rf_ParityLogAppend(RF_ParityLogData_t *, int, RF_ParityLog_t **, int);
void rf_EnableParityLogging(RF_Raid_t *);
d181 1
a181 1
#endif	/* !_RF__RF_PARITYLOG_H_ */
@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 2
a31 2
/*
 * Header file for parity log.
d34 2
a35 2
#ifndef	_RF__RF_PARITYLOG_H_
#define	_RF__RF_PARITYLOG_H_
d39 1
a39 1
#define	RF_DEFAULT_NUM_SECTORS_PER_LOG		64
d47 1
a47 1
} RF_ParityRecordType_t;
d50 11
a60 11
	RF_DECLARE_MUTEX(mutex);	/* Protects cnt. */
	int			  cnt;	/* When 0, time to call wakeFunc. */
	RF_Raid_t		 *raidPtr;
/*	int			(*wakeFunc) (struct buf *); */
	int			(*wakeFunc) (RF_DagNode_t *, int);
	void			 *wakeArg;
	RF_AccTraceEntry_t	 *tracerec;
	RF_Etimer_t		  startTime;
	caddr_t			  bufPtr;
	RF_ParityRecordType_t	  operation;
	RF_CommonLogData_t	 *next;
d64 8
a71 14
	RF_RegionId_t		 regionID;	/*
						 * This struct guaranteed to
						 * span a single region.
						 */
	int			 bufOffset;	/*
						 * Offset from common->bufPtr.
						 */
	RF_PhysDiskAddr_t	 diskAddress;
	RF_CommonLogData_t	*common;	/*
						 * Info shared by one or more
						 * parityLogData structs.
						 */
	RF_ParityLogData_t	*next;
	RF_ParityLogData_t	*prev;
d75 1
a75 1
	RF_DECLARE_MUTEX(mutex);
d79 2
a80 2
	RF_PhysDiskAddr_t	 parityAddr;
	RF_ParityRecordType_t	 operation;
d84 6
a89 6
	RF_RegionId_t		 regionID;
	int			 numRecords;
	int			 diskOffset;
	RF_ParityLogRecord_t	*records;
	caddr_t			 bufPtr;
	RF_ParityLog_t		*next;
d93 2
a94 2
	RF_DECLARE_MUTEX(mutex);
	RF_ParityLog_t	*parityLogs;
d98 13
a110 13
	RF_DECLARE_MUTEX(mutex);
	RF_DECLARE_COND(cond);
	int	 bufferSize;
	int	 totalBuffers;		/* Size of array 'buffers'. */
	int	 availableBuffers;	/* Num available 'buffers'. */
	int	 emptyBuffersIndex;	/* Stick next freed buffer here. */
	int	 availBuffersIndex;	/* Grab next buffer from here. */
	caddr_t	*buffers;		/* Array buffers used to hold parity. */
};
#define	RF_PLOG_CREATED		(1<<0)	/* Thread is created. */
#define	RF_PLOG_RUNNING		(1<<1)	/* Thread is running. */
#define	RF_PLOG_TERMINATE	(1<<2)	/* Thread is terminated (should exit).*/
#define	RF_PLOG_SHUTDOWN	(1<<3)	/* Thread is aware and exiting/exited.*/
d113 20
a132 39
	RF_DECLARE_MUTEX(mutex);	/* Protects all vars in this struct. */
	RF_DECLARE_COND(cond);
	int			 threadState;	/*
						 * Is thread running, should it
						 * shutdown ?  (see above)
						 */
	RF_ParityLog_t		*flushQueue;	/*
						 * List of parity logs to be
						 * flushed to log disk.
						 */
	RF_ParityLog_t		*reintQueue;	/*
						 * List of parity logs waiting
						 * to be reintegrated.
						 */
	RF_ParityLogData_t	*bufHead;	/*
						 * Head of FIFO list of log
						 * data, waiting on a buffer.
						 */
	RF_ParityLogData_t	*bufTail;	/*
						 * Tail of FIFO list of log
						 * data, waiting on a buffer.
						 */
	RF_ParityLogData_t	*reintHead;	/*
						 * Head of FIFO list of
						 * log data, waiting on
						 * reintegration.
						 */
	RF_ParityLogData_t	*reintTail;	/*
						 * Tail of FIFO list of
						 * log data, waiting on
						 * reintegration.
						 */
	RF_ParityLogData_t	*logBlockHead;	/*
						 * Queue of work, blocked
						 * until a log is available.
						 */
	RF_ParityLogData_t	*logBlockTail;
	RF_ParityLogData_t	*reintBlockHead;/*
						 * Queue of work, blocked
d134 6
a139 11
						 * complete.
						 */
	RF_ParityLogData_t	*reintBlockTail;
	RF_CommonLogData_t	*freeCommonList;/*
						 * List of unused common
						 * data structs.
						 */
	RF_ParityLogData_t	*freeDataList;	/*
						 * List of unused log
						 * data structs.
						 */
d143 2
a144 2
	RF_PhysDiskAddr_t	parityAddr;
	RF_ParityRecordType_t	operation;
d148 32
a179 51
	RF_DECLARE_MUTEX(mutex);		/*
						 * Protects: diskCount, diskMap,
						 * loggingEnabled, coreLog.
						 */
	RF_DECLARE_MUTEX(reintMutex);		/* Protects: reintInProgress. */
	int		 reintInProgress;	/*
						 * Flag used to suspend flushing
						 * operations.
						 */
	RF_SectorCount_t capacity;		/*
						 * Capacity of this region
						 * in sectors.
						*/
	RF_SectorNum_t	 regionStartAddr;	/*
						 * Starting disk address for
						 * this region.
						 */
	RF_SectorNum_t	 parityStartAddr;	/*
						 * Starting disk address for
						 * this region.
						 */
	RF_SectorCount_t numSectorsParity;	/*
						 * Number of parity sectors
						 * protected by this region.
						 */
	RF_SectorCount_t diskCount;		/*
						 * Num of sectors written to
						 * this region's disk log.
						 */
	RF_DiskMap_t	*diskMap;		/*
						 * In-core map of what's in
						 * this region's disk log.
						 */
	int		 loggingEnabled;	/*
						 * Logging enable for this
						 * region.
						 */
	RF_ParityLog_t	*coreLog;		/*
						 * In-core log for this region.
						 */
};

RF_ParityLogData_t *rf_CreateParityLogData(RF_ParityRecordType_t,
	RF_PhysDiskAddr_t *, caddr_t, RF_Raid_t *,
	int (*) (RF_DagNode_t *, int), void *,
	RF_AccTraceEntry_t *, RF_Etimer_t);
RF_ParityLogData_t *rf_SearchAndDequeueParityLogData(RF_Raid_t *, RF_RegionId_t,
	RF_ParityLogData_t **, RF_ParityLogData_t **, int);
void rf_ReleaseParityLogs(RF_Raid_t *, RF_ParityLog_t *);
int  rf_ParityLogAppend(RF_ParityLogData_t *, int, RF_ParityLog_t **, int);
void rf_EnableParityLogging(RF_Raid_t *);
d181 1
a181 1
#endif	/* !_RF__RF_PARITYLOG_H_ */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_paritylog.h,v 1.1 1998/11/13 04:20:31 oster Exp $	*/
/*	$NetBSD: rf_paritylog.h,v 1.1 1998/11/13 04:20:31 oster Exp $	*/
a31 64
 * :  
 * Log: rf_paritylog.h,v 
 * Revision 1.21  1996/07/17 21:00:58  jimz
 * clean up timer interface, tracing
 *
 * Revision 1.20  1996/07/15  17:22:18  jimz
 * nit-pick code cleanup
 * resolve stdlib problems on DEC OSF
 *
 * Revision 1.19  1996/06/11  10:17:57  jimz
 * definitions and run state for parity logging thread
 *
 * Revision 1.18  1996/06/07  21:33:04  jimz
 * begin using consistent types for sector numbers,
 * stripe numbers, row+col numbers, recon unit numbers
 *
 * Revision 1.17  1996/06/05  18:06:02  jimz
 * Major code cleanup. The Great Renaming is now done.
 * Better modularity. Better typing. Fixed a bunch of
 * synchronization bugs. Made a lot of global stuff
 * per-desc or per-array. Removed dead code.
 *
 * Revision 1.16  1996/06/02  17:31:48  jimz
 * Moved a lot of global stuff into array structure, where it belongs.
 * Fixed up paritylogging, pss modules in this manner. Some general
 * code cleanup. Removed lots of dead code, some dead files.
 *
 * Revision 1.15  1996/05/31  22:26:54  jimz
 * fix a lot of mapping problems, memory allocation problems
 * found some weird lock issues, fixed 'em
 * more code cleanup
 *
 * Revision 1.14  1996/05/30  11:29:41  jimz
 * Numerous bug fixes. Stripe lock release code disagreed with the taking code
 * about when stripes should be locked (I made it consistent: no parity, no lock)
 * There was a lot of extra serialization of I/Os which I've removed- a lot of
 * it was to calculate values for the cache code, which is no longer with us.
 * More types, function, macro cleanup. Added code to properly quiesce the array
 * on shutdown. Made a lot of stuff array-specific which was (bogusly) general
 * before. Fixed memory allocation, freeing bugs.
 *
 * Revision 1.13  1996/05/23  00:33:23  jimz
 * code cleanup: move all debug decls to rf_options.c, all extern
 * debug decls to rf_options.h, all debug vars preceded by rf_
 *
 * Revision 1.12  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.11  1995/12/06  20:54:58  wvcii
 * added prototyping
 *
 * Revision 1.10  1995/11/30  16:05:50  wvcii
 * added copyright info
 *
 * Revision 1.9  1995/10/07  05:09:27  wvcii
 * removed #define BYTESPERSECTOR 512
 *
 * Revision 1.8  1995/09/06  19:27:52  wvcii
 * added startTime to commonLogData
 *
 * Revision 1.7  1995/07/07  00:13:42  wvcii
 * this version free from deadlock, fails parity verification
 *
d44 4
a47 4
  RF_STOP,
  RF_UPDATE,
  RF_OVERWRITE
} RF_ParityRecordType_t;
d50 3
a52 3
  RF_DECLARE_MUTEX(mutex)               /* protects cnt */
  int                      cnt;         /* when 0, time to call wakeFunc */
  RF_Raid_t               *raidPtr;
d54 7
a60 7
  int                    (*wakeFunc)(RF_DagNode_t *node, int status);
  void                    *wakeArg;
  RF_AccTraceEntry_t      *tracerec;
  RF_Etimer_t              startTime;
  caddr_t                  bufPtr;
  RF_ParityRecordType_t    operation;
  RF_CommonLogData_t      *next;
d64 8
a71 6
  RF_RegionId_t        regionID;    /* this struct guaranteed to span a single region */
  int                  bufOffset;   /* offset from common->bufPtr */
  RF_PhysDiskAddr_t    diskAddress;
  RF_CommonLogData_t  *common;      /* info shared by one or more parityLogData structs */
  RF_ParityLogData_t  *next;
  RF_ParityLogData_t  *prev;
d75 1
a75 1
  RF_DECLARE_MUTEX(mutex)
d79 2
a80 2
  RF_PhysDiskAddr_t      parityAddr;
  RF_ParityRecordType_t  operation;
d84 6
a89 6
  RF_RegionId_t          regionID;
  int                    numRecords;
  int                    diskOffset;
  RF_ParityLogRecord_t  *records;
  caddr_t                bufPtr;
  RF_ParityLog_t        *next;
d93 2
a94 2
  RF_DECLARE_MUTEX(mutex)
  RF_ParityLog_t  *parityLogs;
d98 13
a110 14
  RF_DECLARE_MUTEX(mutex)
  RF_DECLARE_COND(cond)
  int       bufferSize;
  int       totalBuffers;      /* size of array 'buffers' */
  int       availableBuffers;  /* num available 'buffers' */
  int       emptyBuffersIndex; /* stick next freed buffer here */
  int       availBuffersIndex; /* grab next buffer from here */
  caddr_t  *buffers;           /* array buffers used to hold parity */
};

#define RF_PLOG_CREATED   (1<<0) /* thread is created */
#define RF_PLOG_RUNNING   (1<<1) /* thread is running */
#define RF_PLOG_TERMINATE (1<<2) /* thread is terminated (should exit) */
#define RF_PLOG_SHUTDOWN  (1<<3) /* thread is aware and exiting/exited */
d113 27
a139 15
  RF_DECLARE_MUTEX(mutex)          /* protects all vars in this struct */
  RF_DECLARE_COND(cond)
  int                  threadState;    /* is thread running, should it shutdown  (see above) */
  RF_ParityLog_t      *flushQueue;     /* list of parity logs to be flushed to log disk */
  RF_ParityLog_t      *reintQueue;     /* list of parity logs waiting to be reintegrated */
  RF_ParityLogData_t  *bufHead;        /* head of FIFO list of log data, waiting on a buffer */
  RF_ParityLogData_t  *bufTail;        /* tail of FIFO list of log data, waiting on a buffer */
  RF_ParityLogData_t  *reintHead;      /* head of FIFO list of log data, waiting on reintegration */
  RF_ParityLogData_t  *reintTail;      /* tail of FIFO list of log data, waiting on reintegration */
  RF_ParityLogData_t  *logBlockHead;   /* queue of work, blocked until a log is available */
  RF_ParityLogData_t  *logBlockTail;   
  RF_ParityLogData_t  *reintBlockHead; /* queue of work, blocked until reintegration is complete */ 
  RF_ParityLogData_t  *reintBlockTail; 
  RF_CommonLogData_t  *freeCommonList; /* list of unused common data structs */
  RF_ParityLogData_t  *freeDataList;   /* list of unused log data structs */
d143 2
a144 2
  RF_PhysDiskAddr_t      parityAddr;
  RF_ParityRecordType_t  operation;  
d148 32
a179 25
  RF_DECLARE_MUTEX(mutex)            /* protects: diskCount, diskMap, loggingEnabled, coreLog */
  RF_DECLARE_MUTEX(reintMutex)       /* protects: reintInProgress */
  int              reintInProgress;  /* flag used to suspend flushing operations */
  RF_SectorCount_t capacity;         /* capacity of this region in sectors */
  RF_SectorNum_t   regionStartAddr;  /* starting disk address for this region */
  RF_SectorNum_t   parityStartAddr;  /* starting disk address for this region */
  RF_SectorCount_t numSectorsParity; /* number of parity sectors protected by this region */
  RF_SectorCount_t diskCount;        /* num of sectors written to this region's disk log */
  RF_DiskMap_t    *diskMap;          /* in-core map of what's in this region's disk log */
  int              loggingEnabled;   /* logging enable for this region */
  RF_ParityLog_t  *coreLog;          /* in-core log for this region */
};

RF_ParityLogData_t *rf_CreateParityLogData(RF_ParityRecordType_t operation,
	RF_PhysDiskAddr_t *pda, caddr_t bufPtr, RF_Raid_t *raidPtr,
	int (*wakeFunc)(RF_DagNode_t *node, int status), 
	void *wakeArg, RF_AccTraceEntry_t *tracerec,
	RF_Etimer_t startTime);
RF_ParityLogData_t *rf_SearchAndDequeueParityLogData(RF_Raid_t *raidPtr,
	RF_RegionId_t regionID, RF_ParityLogData_t **head,
	RF_ParityLogData_t **tail, int ignoreLocks);
void rf_ReleaseParityLogs(RF_Raid_t *raidPtr, RF_ParityLog_t *firstLog);
int rf_ParityLogAppend(RF_ParityLogData_t *logData, int finish,
	RF_ParityLog_t **incomingLog, int clearReintFlag);
void rf_EnableParityLogging(RF_Raid_t *raidPtr);
d181 1
a181 1
#endif /* !_RF__RF_PARITYLOG_H_ */
@

