head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.04;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.02.56;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.29;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.28;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.52;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_map.h,v 1.3 2002/12/16 07:01:04 tdeval Exp $	*/
/*	$NetBSD: rf_map.h,v 1.3 1999/02/05 00:06:12 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/* rf_map.h */

#ifndef	_RF__RF_MAP_H_
#define	_RF__RF_MAP_H_

#include "rf_types.h"
#include "rf_alloclist.h"
#include "rf_raid.h"

/* Mapping structure allocation and free routines. */
RF_AccessStripeMapHeader_t *rf_MapAccess(RF_Raid_t *, RF_RaidAddr_t,
	RF_SectorCount_t, caddr_t, int);

void rf_MarkFailuresInASMList(RF_Raid_t *, RF_AccessStripeMapHeader_t *);

RF_AccessStripeMap_t *rf_DuplicateASM(RF_AccessStripeMap_t *);

RF_PhysDiskAddr_t *rf_DuplicatePDA(RF_PhysDiskAddr_t *);

int  rf_ConfigureMapModule(RF_ShutdownList_t **);

RF_AccessStripeMapHeader_t *rf_AllocAccessStripeMapHeader(void);

void rf_FreeAccessStripeMapHeader(RF_AccessStripeMapHeader_t *);

RF_PhysDiskAddr_t *rf_AllocPhysDiskAddr(void);

RF_PhysDiskAddr_t *rf_AllocPDAList(int);

void rf_FreePhysDiskAddr(RF_PhysDiskAddr_t *);

RF_AccessStripeMap_t *rf_AllocAccessStripeMapComponent(void);

RF_AccessStripeMap_t *rf_AllocASMList(int);

void rf_FreeAccessStripeMapComponent(RF_AccessStripeMap_t *);

void rf_FreeAccessStripeMap(RF_AccessStripeMapHeader_t *);

int  rf_CheckStripeForFailures(RF_Raid_t *, RF_AccessStripeMap_t *);

int  rf_NumFailedDataUnitsInStripe(RF_Raid_t *, RF_AccessStripeMap_t *);

void rf_PrintAccessStripeMap(RF_AccessStripeMapHeader_t *);

void rf_PrintFullAccessStripeMap(RF_AccessStripeMapHeader_t *, int);

void rf_PrintRaidAddressInfo(RF_Raid_t *, RF_RaidAddr_t, RF_SectorCount_t);

void rf_ASMParityAdjust(RF_PhysDiskAddr_t *, RF_StripeNum_t, RF_SectorNum_t,
	RF_RaidLayout_t *, RF_AccessStripeMap_t *);

void rf_ASMCheckStatus(RF_Raid_t *, RF_PhysDiskAddr_t *,
	RF_AccessStripeMap_t *, RF_RaidDisk_t **, int);

#endif	/* !_RF__RF_MAP_H_ */
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_map.h,v 1.2 1999/02/16 00:02:56 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_map.h,v 1.1 1999/01/11 14:29:29 niklas Exp $	*/
d3 1
d33 2
a34 2
#ifndef _RF__RF_MAP_H_
#define _RF__RF_MAP_H_
d40 3
a42 5
/* mapping structure allocation and free routines */
RF_AccessStripeMapHeader_t *
rf_MapAccess(RF_Raid_t * raidPtr,
    RF_RaidAddr_t raidAddress, RF_SectorCount_t numBlocks,
    caddr_t buffer, int remap);
d44 1
a44 3
void 
rf_MarkFailuresInASMList(RF_Raid_t * raidPtr,
    RF_AccessStripeMapHeader_t * asm_h);
d46 1
a46 1
RF_AccessStripeMap_t *rf_DuplicateASM(RF_AccessStripeMap_t * asmap);
d48 1
a48 1
RF_PhysDiskAddr_t *rf_DuplicatePDA(RF_PhysDiskAddr_t * pda);
d50 1
a50 1
int     rf_ConfigureMapModule(RF_ShutdownList_t ** listp);
d54 1
a54 1
void    rf_FreeAccessStripeMapHeader(RF_AccessStripeMapHeader_t * p);
d58 1
a58 1
RF_PhysDiskAddr_t *rf_AllocPDAList(int count);
d60 1
a60 1
void    rf_FreePhysDiskAddr(RF_PhysDiskAddr_t * p);
d64 1
a64 1
RF_AccessStripeMap_t *rf_AllocASMList(int count);
d66 1
a66 1
void    rf_FreeAccessStripeMapComponent(RF_AccessStripeMap_t * p);
d68 1
a68 1
void    rf_FreeAccessStripeMap(RF_AccessStripeMapHeader_t * hdr);
d70 1
a70 1
int     rf_CheckStripeForFailures(RF_Raid_t * raidPtr, RF_AccessStripeMap_t * asmap);
d72 1
a72 1
int     rf_NumFailedDataUnitsInStripe(RF_Raid_t * raidPtr, RF_AccessStripeMap_t * asmap);
d74 1
a74 1
void    rf_PrintAccessStripeMap(RF_AccessStripeMapHeader_t * asm_h);
d76 1
a76 1
void    rf_PrintFullAccessStripeMap(RF_AccessStripeMapHeader_t * asm_h, int prbuf);
d78 1
a78 3
void 
rf_PrintRaidAddressInfo(RF_Raid_t * raidPtr, RF_RaidAddr_t raidAddr,
    RF_SectorCount_t numBlocks);
d80 2
a81 4
void 
rf_ASMParityAdjust(RF_PhysDiskAddr_t * toAdjust,
    RF_StripeNum_t startAddrWithinStripe, RF_SectorNum_t endAddress,
    RF_RaidLayout_t * layoutPtr, RF_AccessStripeMap_t * asm_p);
d83 2
a84 3
void 
rf_ASMCheckStatus(RF_Raid_t * raidPtr, RF_PhysDiskAddr_t * pda_p,
    RF_AccessStripeMap_t * asm_p, RF_RaidDisk_t ** disks, int parity);
d86 1
a86 1
#endif				/* !_RF__RF_MAP_H_ */
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d32 2
a33 2
#ifndef	_RF__RF_MAP_H_
#define	_RF__RF_MAP_H_
d39 5
a43 3
/* Mapping structure allocation and free routines. */
RF_AccessStripeMapHeader_t *rf_MapAccess(RF_Raid_t *, RF_RaidAddr_t,
	RF_SectorCount_t, caddr_t, int);
d45 3
a47 1
void rf_MarkFailuresInASMList(RF_Raid_t *, RF_AccessStripeMapHeader_t *);
d49 1
a49 1
RF_AccessStripeMap_t *rf_DuplicateASM(RF_AccessStripeMap_t *);
d51 1
a51 1
RF_PhysDiskAddr_t *rf_DuplicatePDA(RF_PhysDiskAddr_t *);
d53 1
a53 1
int  rf_ConfigureMapModule(RF_ShutdownList_t **);
d57 1
a57 1
void rf_FreeAccessStripeMapHeader(RF_AccessStripeMapHeader_t *);
d61 1
a61 1
RF_PhysDiskAddr_t *rf_AllocPDAList(int);
d63 1
a63 1
void rf_FreePhysDiskAddr(RF_PhysDiskAddr_t *);
d67 1
a67 1
RF_AccessStripeMap_t *rf_AllocASMList(int);
d69 1
a69 1
void rf_FreeAccessStripeMapComponent(RF_AccessStripeMap_t *);
d71 1
a71 1
void rf_FreeAccessStripeMap(RF_AccessStripeMapHeader_t *);
d73 1
a73 1
int  rf_CheckStripeForFailures(RF_Raid_t *, RF_AccessStripeMap_t *);
d75 1
a75 1
int  rf_NumFailedDataUnitsInStripe(RF_Raid_t *, RF_AccessStripeMap_t *);
d77 1
a77 1
void rf_PrintAccessStripeMap(RF_AccessStripeMapHeader_t *);
d79 1
a79 1
void rf_PrintFullAccessStripeMap(RF_AccessStripeMapHeader_t *, int);
d81 3
a83 1
void rf_PrintRaidAddressInfo(RF_Raid_t *, RF_RaidAddr_t, RF_SectorCount_t);
d85 4
a88 2
void rf_ASMParityAdjust(RF_PhysDiskAddr_t *, RF_StripeNum_t, RF_SectorNum_t,
	RF_RaidLayout_t *, RF_AccessStripeMap_t *);
d90 3
a92 2
void rf_ASMCheckStatus(RF_Raid_t *, RF_PhysDiskAddr_t *,
	RF_AccessStripeMap_t *, RF_RaidDisk_t **, int);
d94 1
a94 1
#endif	/* !_RF__RF_MAP_H_ */
@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d32 2
a33 2
#ifndef	_RF__RF_MAP_H_
#define	_RF__RF_MAP_H_
d39 5
a43 3
/* Mapping structure allocation and free routines. */
RF_AccessStripeMapHeader_t *rf_MapAccess(RF_Raid_t *, RF_RaidAddr_t,
	RF_SectorCount_t, caddr_t, int);
d45 3
a47 1
void rf_MarkFailuresInASMList(RF_Raid_t *, RF_AccessStripeMapHeader_t *);
d49 1
a49 1
RF_AccessStripeMap_t *rf_DuplicateASM(RF_AccessStripeMap_t *);
d51 1
a51 1
RF_PhysDiskAddr_t *rf_DuplicatePDA(RF_PhysDiskAddr_t *);
d53 1
a53 1
int  rf_ConfigureMapModule(RF_ShutdownList_t **);
d57 1
a57 1
void rf_FreeAccessStripeMapHeader(RF_AccessStripeMapHeader_t *);
d61 1
a61 1
RF_PhysDiskAddr_t *rf_AllocPDAList(int);
d63 1
a63 1
void rf_FreePhysDiskAddr(RF_PhysDiskAddr_t *);
d67 1
a67 1
RF_AccessStripeMap_t *rf_AllocASMList(int);
d69 1
a69 1
void rf_FreeAccessStripeMapComponent(RF_AccessStripeMap_t *);
d71 1
a71 1
void rf_FreeAccessStripeMap(RF_AccessStripeMapHeader_t *);
d73 1
a73 1
int  rf_CheckStripeForFailures(RF_Raid_t *, RF_AccessStripeMap_t *);
d75 1
a75 1
int  rf_NumFailedDataUnitsInStripe(RF_Raid_t *, RF_AccessStripeMap_t *);
d77 1
a77 1
void rf_PrintAccessStripeMap(RF_AccessStripeMapHeader_t *);
d79 1
a79 1
void rf_PrintFullAccessStripeMap(RF_AccessStripeMapHeader_t *, int);
d81 3
a83 1
void rf_PrintRaidAddressInfo(RF_Raid_t *, RF_RaidAddr_t, RF_SectorCount_t);
d85 4
a88 2
void rf_ASMParityAdjust(RF_PhysDiskAddr_t *, RF_StripeNum_t, RF_SectorNum_t,
	RF_RaidLayout_t *, RF_AccessStripeMap_t *);
d90 3
a92 2
void rf_ASMCheckStatus(RF_Raid_t *, RF_PhysDiskAddr_t *,
	RF_AccessStripeMap_t *, RF_RaidDisk_t **, int);
d94 1
a94 1
#endif	/* !_RF__RF_MAP_H_ */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_map.h,v 1.1 1998/11/13 04:20:31 oster Exp $	*/
/*	$NetBSD: rf_map.h,v 1.1 1998/11/13 04:20:31 oster Exp $	*/
a31 45
/* :  
 * Log: rf_map.h,v 
 * Revision 1.9  1996/07/22 19:52:16  jimz
 * switched node params to RF_DagParam_t, a union of
 * a 64-bit int and a void *, for better portability
 * attempted hpux port, but failed partway through for
 * lack of a single C compiler capable of compiling all
 * source files
 *
 * Revision 1.8  1996/06/10  11:55:47  jimz
 * Straightened out some per-array/not-per-array distinctions, fixed
 * a couple bugs related to confusion. Added shutdown lists. Removed
 * layout shutdown function (now subsumed by shutdown lists).
 *
 * Revision 1.7  1996/06/07  21:33:04  jimz
 * begin using consistent types for sector numbers,
 * stripe numbers, row+col numbers, recon unit numbers
 *
 * Revision 1.6  1996/05/31  22:26:54  jimz
 * fix a lot of mapping problems, memory allocation problems
 * found some weird lock issues, fixed 'em
 * more code cleanup
 *
 * Revision 1.5  1996/05/30  11:29:41  jimz
 * Numerous bug fixes. Stripe lock release code disagreed with the taking code
 * about when stripes should be locked (I made it consistent: no parity, no lock)
 * There was a lot of extra serialization of I/Os which I've removed- a lot of
 * it was to calculate values for the cache code, which is no longer with us.
 * More types, function, macro cleanup. Added code to properly quiesce the array
 * on shutdown. Made a lot of stuff array-specific which was (bogusly) general
 * before. Fixed memory allocation, freeing bugs.
 *
 * Revision 1.4  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.3  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.2  1995/12/01  19:25:14  root
 * added copyright info
 *
 */

d40 4
a43 3
RF_AccessStripeMapHeader_t *rf_MapAccess(RF_Raid_t *raidPtr,
	RF_RaidAddr_t raidAddress, RF_SectorCount_t numBlocks,
	caddr_t buffer, int remap);
d45 3
a47 2
void rf_MarkFailuresInASMList(RF_Raid_t *raidPtr,
	RF_AccessStripeMapHeader_t *asm_h);
d49 1
a49 1
RF_AccessStripeMap_t *rf_DuplicateASM(RF_AccessStripeMap_t *asmap);
d51 1
a51 1
RF_PhysDiskAddr_t *rf_DuplicatePDA(RF_PhysDiskAddr_t *pda);
d53 1
a53 1
int rf_ConfigureMapModule(RF_ShutdownList_t **listp);
d57 1
a57 1
void rf_FreeAccessStripeMapHeader(RF_AccessStripeMapHeader_t *p);
d63 1
a63 1
void rf_FreePhysDiskAddr(RF_PhysDiskAddr_t *p);
d69 1
a69 1
void rf_FreeAccessStripeMapComponent(RF_AccessStripeMap_t *p);
d71 1
a71 1
void rf_FreeAccessStripeMap(RF_AccessStripeMapHeader_t *hdr);
d73 1
a73 1
int rf_CheckStripeForFailures(RF_Raid_t *raidPtr, RF_AccessStripeMap_t *asmap);
d75 1
a75 1
int rf_NumFailedDataUnitsInStripe(RF_Raid_t *raidPtr, RF_AccessStripeMap_t *asmap);
d77 1
a77 1
void rf_PrintAccessStripeMap(RF_AccessStripeMapHeader_t *asm_h);
d79 1
a79 1
void rf_PrintFullAccessStripeMap(RF_AccessStripeMapHeader_t *asm_h, int prbuf);
d81 3
a83 2
void rf_PrintRaidAddressInfo(RF_Raid_t *raidPtr, RF_RaidAddr_t raidAddr,
	RF_SectorCount_t numBlocks);
d85 4
a88 3
void rf_ASMParityAdjust(RF_PhysDiskAddr_t *toAdjust,
	RF_StripeNum_t startAddrWithinStripe, RF_SectorNum_t endAddress,
	RF_RaidLayout_t *layoutPtr, RF_AccessStripeMap_t *asm_p);
d90 3
a92 2
void rf_ASMCheckStatus(RF_Raid_t *raidPtr, RF_PhysDiskAddr_t *pda_p,
	RF_AccessStripeMap_t *asm_p, RF_RaidDisk_t **disks, int parity);
d94 1
a94 1
#endif /* !_RF__RF_MAP_H_ */
@

