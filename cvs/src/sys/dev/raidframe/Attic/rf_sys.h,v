head	1.4;
access;
symbols
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	UBC_SYNC_A:1.4
	UBC_SYNC_B:1.4
	SMP:1.4.0.2
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2000.01.07.14.50.23;	author peter;	state dead;
branches;
next	1.3;

1.3
date	99.08.04.13.10.55;	author peter;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.03.31;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.29.53;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.4
log
@sync with work by Greg Oster on NetBSD

Please note: This update has *only* been tested on i386 with IDE
disks. Could someone with a spare box please make sure all is OK with
SCSI and maybe other arches ? sparc testing will follow locally.

* remove rf_sys.h
* many changes to make it more stable
* some performance increases
* All raid threads now get their own kernel process and the calling
  raidctl(8) program will show status progress through a meter.
* In theory FFS_SOFTUPDATES and RAIDframe will now work together - NOT
  TESTED YET

See http://www.cs.usask.ca/staff/oster/raid.html

This updates include Greg's changes to Jan 4th 2000.

TODO:
* some odd behaviour when running raictl -c on an already config'ed
  raid set - problem founf, fix being done
* progress meter is in raidctl(8) - seperate commit, but could do with
  sync'ing with OpenBSD ftp version
@
text
@/*	$OpenBSD: rf_sys.h,v 1.3 1999/08/04 13:10:55 peter Exp $	*/
/*	$NetBSD: rf_sys.h,v 1.3 1999/02/05 00:06:18 oster Exp $	*/
/*
 * rf_sys.h
 *
 * Jim Zelenka, CMU/SCS, 14 June 1996
 */
/*
 * Copyright (c) 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Jim Zelenka
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#ifndef _RF__RF_SYS_H_
#define _RF__RF_SYS_H_

#include "rf_types.h"

#endif				/* !_RF__RF_SYS_H_ */
@


1.3
log
@* remove redundant rf_ccmn.h

* remove init call to rf_ConfigureEtimer() and rf_sys.c in which it is the
  only function. update conf/files to reflect this.

* update sources to make sure _KERNEL is used not KERNEL

* change rf_etimer.h to protect macros an include of sys/kernel.h with
  a check for _KERNEL - let raidctl compile again.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_sys.h,v 1.2 1999/02/16 00:03:31 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_sys.h,v 1.1 1999/01/11 14:29:53 niklas Exp $	*/
a38 2

int     rf_ConfigureEtimer(RF_ShutdownList_t ** listp);
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_sys.h,v 1.1 1998/11/13 04:20:35 oster Exp $	*/
/*	$NetBSD: rf_sys.h,v 1.1 1998/11/13 04:20:35 oster Exp $	*/
d40 1
a40 1
int rf_ConfigureEtimer(RF_ShutdownList_t **listp);
d42 1
a42 28
#if defined(__osf__) && !defined(KERNEL)
int rf_get_cpu_ticks_per_sec(long *ticksp);
#endif /* __osf__ && !KERNEL */

#ifdef AIX
#include <nlist.h>
#include <sys/time.h>
#if RF_AIXVers == 3
int gettimeofday(struct timeval *tp, struct timezone *tzp);
#endif /* RF_AIXVers == 3 */
int knlist(struct nlist *namelist, int nel, int size);
int ffs(int index);
#endif /* AIX */

#ifdef sun
#define bcopy(a,b,n) memcpy(b,a,n)
#define bzero(b,n)   memset(b,0,n)
#define bcmp(a,b,n)  memcmp(a,b,n)
#endif /* sun */

#ifdef __GNUC__
/* we use gcc -Wall to check our anal-retentiveness level, occasionally */
#if defined(DEC_OSF) && !defined(KERNEL)
extern int ioctl(int fd, int req, ...);
#endif /* DEC_OSF && !KERNEL */
#endif /* __GNUC__ */

#endif /* !_RF__RF_SYS_H_ */
@

