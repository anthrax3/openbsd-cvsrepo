head	1.5;
access;
symbols
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.38
	OPENBSD_5_0:1.4.0.36
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.34
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.32
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.28
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.30
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.26
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.24
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.22
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.20
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.18
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.16
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.14
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.12
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.10
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.8
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2012.04.06.15.53.59;	author jsing;	state dead;
branches;
next	1.4;

1.4
date	2002.12.16.07.01.05;	author tdeval;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.06.11.28.27;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.03.26;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.49;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2002.03.28.15.03.52;	author niklas;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2003.03.28.00.38.29;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2002.06.11.03.42.28;	author art;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2003.05.19.22.21.53;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_shutdown.h,v 1.4 2002/12/16 07:01:05 tdeval Exp $	*/
/*	$NetBSD: rf_shutdown.h,v 1.2 1999/02/05 00:06:17 oster Exp $	*/

/*
 * rf_shutdown.h
 */
/*
 * Copyright (c) 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Jim Zelenka
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */
/*
 * Maintain lists of cleanup functions. Also, mechanisms for coordinating
 * thread startup and shutdown.
 */

#ifndef	_RF__RF_SHUTDOWN_H_
#define	_RF__RF_SHUTDOWN_H_

#include "rf_types.h"
#include "rf_threadstuff.h"

/*
 * Important note: The shutdown list is run like a stack, new
 * entries pushed on top. Therefore, the most recently added
 * entry (last started) is the first removed (stopped). This
 * should handle system-dependencies pretty nicely- if a system
 * is there when you start another, it'll be there when you
 * shut down another. Hopefully, this subsystem will remove
 * more complexity than it introduces.
 */

struct RF_ShutdownList_s {
	void		 (*cleanup) (void *arg);
	void		  *arg;
	char		  *file;
	int		   line;
	RF_ShutdownList_t *next;
};
#define	rf_ShutdownCreate(_listp_,_func_,_arg_)				\
	_rf_ShutdownCreate(_listp_, _func_, _arg_, __FILE__, __LINE__)

int  _rf_ShutdownCreate(RF_ShutdownList_t **, void (*) (void *arg), void *,
	char *, int);
int  rf_ShutdownList(RF_ShutdownList_t **);
void rf_shutdown_hook(RF_ThreadArg_t);

#endif	/* !_RF__RF_SHUTDOWN_H_ */
@


1.4
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_shutdown.h,v 1.3 2002/03/06 11:28:27 tdeval Exp $	*/
@


1.3
log
@Implement a shutdown hook.
We now can safely swap on raid.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_shutdown.h,v 1.2 1999/02/16 00:03:26 niklas Exp $	*/
d3 1
d38 2
a39 2
#ifndef _RF__RF_SHUTDOWN_H_
#define _RF__RF_SHUTDOWN_H_
d45 1
a45 1
 * Important note: the shutdown list is run like a stack, new
d55 4
a58 4
	void    (*cleanup) (void *arg);
	void   *arg;
	char   *file;
	int     line;
d61 2
a62 6
#define rf_ShutdownCreate(_listp_,_func_,_arg_) \
  _rf_ShutdownCreate(_listp_,_func_,_arg_,__FILE__,__LINE__)

int     _rf_ShutdownCreate(RF_ShutdownList_t ** listp, void (*cleanup) (void *arg),
            void *arg, char *file, int line);
int     rf_ShutdownList(RF_ShutdownList_t ** listp);
d64 4
a67 1
void	rf_shutdown_hook(RF_ThreadArg_t);
d69 1
a69 1
#endif				/* !_RF__RF_SHUTDOWN_H_ */
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_shutdown.h,v 1.1 1999/01/11 14:29:49 niklas Exp $	*/
d66 2
@


1.2.16.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_shutdown.h,v 1.2 1999/02/16 00:03:26 niklas Exp $	*/
a65 2

void	rf_shutdown_hook(RF_ThreadArg_t);
@


1.2.16.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d37 2
a38 2
#ifndef	_RF__RF_SHUTDOWN_H_
#define	_RF__RF_SHUTDOWN_H_
d44 1
a44 1
 * Important note: The shutdown list is run like a stack, new
d54 4
a57 4
	void		 (*cleanup) (void *arg);
	void		  *arg;
	char		  *file;
	int		   line;
d60 6
a65 2
#define	rf_ShutdownCreate(_listp_,_func_,_arg_)				\
	_rf_ShutdownCreate(_listp_, _func_, _arg_, __FILE__, __LINE__)
d67 1
a67 4
int  _rf_ShutdownCreate(RF_ShutdownList_t **, void (*) (void *arg), void *,
	char *, int);
int  rf_ShutdownList(RF_ShutdownList_t **);
void rf_shutdown_hook(RF_ThreadArg_t);
d69 1
a69 1
#endif	/* !_RF__RF_SHUTDOWN_H_ */
@


1.2.6.1
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a65 2

void	rf_shutdown_hook(RF_ThreadArg_t);
@


1.2.6.2
log
@Sync the SMP branch with 3.3
@
text
@a2 1

d37 2
a38 2
#ifndef	_RF__RF_SHUTDOWN_H_
#define	_RF__RF_SHUTDOWN_H_
d44 1
a44 1
 * Important note: The shutdown list is run like a stack, new
d54 4
a57 4
	void		 (*cleanup) (void *arg);
	void		  *arg;
	char		  *file;
	int		   line;
d60 6
a65 2
#define	rf_ShutdownCreate(_listp_,_func_,_arg_)				\
	_rf_ShutdownCreate(_listp_, _func_, _arg_, __FILE__, __LINE__)
d67 1
a67 4
int  _rf_ShutdownCreate(RF_ShutdownList_t **, void (*) (void *arg), void *,
	char *, int);
int  rf_ShutdownList(RF_ShutdownList_t **);
void rf_shutdown_hook(RF_ThreadArg_t);
d69 1
a69 1
#endif	/* !_RF__RF_SHUTDOWN_H_ */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_shutdown.h,v 1.1 1998/11/13 04:20:34 oster Exp $	*/
/*	$NetBSD: rf_shutdown.h,v 1.1 1998/11/13 04:20:34 oster Exp $	*/
d54 5
a58 5
  void               (*cleanup)(void *arg);
  void                *arg;
  char                *file;
  int                  line;
  RF_ShutdownList_t   *next;
a59 1

d63 3
a65 3
int _rf_ShutdownCreate(RF_ShutdownList_t **listp, void (*cleanup)(void *arg),
	void *arg, char *file, int line);
int rf_ShutdownList(RF_ShutdownList_t **listp);
d67 1
a67 1
#endif /* !_RF__RF_SHUTDOWN_H_ */
@

