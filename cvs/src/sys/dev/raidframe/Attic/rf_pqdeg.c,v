head	1.6;
access;
symbols
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.38
	OPENBSD_5_0:1.5.0.36
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.34
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.32
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.28
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.30
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.26
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.24
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.22
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.20
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.18
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.16
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.16
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.14
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.12
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.10
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.2
	SMP_BASE:1.4
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2012.04.06.15.53.59;	author jsing;	state dead;
branches;
next	1.5;

1.5
date	2002.12.16.07.01.04;	author tdeval;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.11.18.02.22;	author peter;	state Exp;
branches
	1.4.2.1
	1.4.12.1;
next	1.3;

1.3
date	2000.01.07.14.50.22;	author peter;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.03.10;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.29.39;	author niklas;	state Exp;
branches;
next	;

1.4.2.1
date	2003.03.28.00.38.28;	author niklas;	state Exp;
branches;
next	;

1.4.12.1
date	2003.05.19.22.21.53;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_pqdeg.c,v 1.5 2002/12/16 07:01:04 tdeval Exp $	*/
/*	$NetBSD: rf_pqdeg.c,v 1.5 2000/01/07 03:41:04 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Daniel Stodolsky
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include "rf_archs.h"

#if	(RF_INCLUDE_DECL_PQ > 0) || (RF_INCLUDE_RAID6 > 0)

#include "rf_types.h"
#include "rf_raid.h"
#include "rf_dag.h"
#include "rf_dagutils.h"
#include "rf_dagfuncs.h"
#include "rf_dagffrd.h"
#include "rf_dagffwr.h"
#include "rf_dagdegrd.h"
#include "rf_dagdegwr.h"
#include "rf_etimer.h"
#include "rf_pqdeg.h"
#include "rf_general.h"
#include "rf_pqdegdags.h"
#include "rf_pq.h"

/*
 * Degraded mode dag functions for P+Q calculations.
 *
 * The following nomenclature is used.
 *
 *   PQ_<D><P><Q>_Create{Large,Small}<Write|Read>DAG
 *
 * where <D><P><Q> are single digits representing the number of failed
 * data units <D> (0,1,2), parity units <P> (0,1), and Q units <Q>, effecting
 * the I/O. The reads have only  PQ_<D><P><Q>_CreateReadDAG variants, while
 * the single fault writes have both large and small write versions.
 * Single fault PQ is equivalent to normal mode raid 5 in many aspects.
 *
 * Some versions degenerate into the same case, and are grouped together below.
 */


/* Reads, single failure. */

/* We have parity, so we can do a raid 5 reconstruct read. */
RF_CREATE_DAG_FUNC_DECL(rf_PQ_100_CreateReadDAG)
{
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    &rf_pRecoveryFuncs);
}


/* Reads double failure. */

/*
 * Q is lost, but not parity.
 * So we can a raid 5 reconstruct read.
 */
RF_CREATE_DAG_FUNC_DECL(rf_PQ_101_CreateReadDAG)
{
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    &rf_pRecoveryFuncs);
}

/*
 * Parity is lost, so we need to
 * do a reconstruct read and recompute
 * the data with Q.
 */
RF_CREATE_DAG_FUNC_DECL(rf_PQ_110_CreateReadDAG)
{
	RF_PhysDiskAddr_t *temp;
	/* Swap P and Q pointers to fake out the DegradedReadDAG code. */
	temp = asmap->parityInfo;
	asmap->parityInfo = asmap->qInfo;
	asmap->qInfo = temp;
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    &rf_qRecoveryFuncs);
}

/*
 * Two data units are dead in this stripe, so we will need read
 * both P and Q to reconstruct the data. Note that only
 * one data unit we are reading may actually be missing.
 */
RF_CREATE_DAG_FUNC_DECL(rf_CreateDoubleDegradedReadDAG);
RF_CREATE_DAG_FUNC_DECL(rf_CreateDoubleDegradedReadDAG)
{
	rf_PQ_DoubleDegRead(raidPtr, asmap, dag_h, bp, flags, allocList);
}

RF_CREATE_DAG_FUNC_DECL(rf_PQ_200_CreateReadDAG);
RF_CREATE_DAG_FUNC_DECL(rf_PQ_200_CreateReadDAG)
{
	rf_CreateDoubleDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList);
}


/* Writes, single failure. */

RF_CREATE_DAG_FUNC_DECL(rf_PQ_100_CreateWriteDAG);
RF_CREATE_DAG_FUNC_DECL(rf_PQ_100_CreateWriteDAG)
{
	if (asmap->numStripeUnitsAccessed != 1 &&
	    asmap->failedPDAs[0]->numSector !=
	    raidPtr->Layout.sectorsPerStripeUnit)
		RF_PANIC();
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp,
	    flags, allocList, 2, (int (*) (RF_DagNode_t *))
	    rf_Degraded_100_PQFunc, RF_FALSE);
}

/* Dead  P - act like a RAID 5 small write with parity = Q. */
RF_CREATE_DAG_FUNC_DECL(rf_PQ_010_CreateSmallWriteDAG)
{
	RF_PhysDiskAddr_t *temp;
	/* Swap P and Q pointers to fake out the DegradedReadDAG code. */
	temp = asmap->parityInfo;
	asmap->parityInfo = asmap->qInfo;
	asmap->qInfo = temp;
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, &rf_qFuncs, NULL);
}

/* Dead Q - act like a RAID 5 small write. */
RF_CREATE_DAG_FUNC_DECL(rf_PQ_001_CreateSmallWriteDAG)
{
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, &rf_pFuncs, NULL);
}

/* Dead P - act like a RAID 5 large write but for Q. */
RF_CREATE_DAG_FUNC_DECL(rf_PQ_010_CreateLargeWriteDAG)
{
	RF_PhysDiskAddr_t *temp;
	/* Swap P and Q pointers to fake out the code. */
	temp = asmap->parityInfo;
	asmap->parityInfo = asmap->qInfo;
	asmap->qInfo = temp;
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, 1, rf_RegularQFunc, RF_FALSE);
}

/* Dead Q - act like a RAID 5 large write. */
RF_CREATE_DAG_FUNC_DECL(rf_PQ_001_CreateLargeWriteDAG)
{
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, 1, rf_RegularPFunc, RF_FALSE);
}


/* Writes, double failure. */

/* Lost P & Q - do a nonredundant write. */
RF_CREATE_DAG_FUNC_DECL(rf_PQ_011_CreateWriteDAG)
{
	rf_CreateNonRedundantWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, RF_IO_TYPE_WRITE);
}


/*
 * In the two cases below, a nasty case arises when it's a write for a
 * (strict) portion of a failed stripe unit and parts of another su.
 * For now, we do not support this.
 */

/* Lost Data and  P - do a Q write. */
RF_CREATE_DAG_FUNC_DECL(rf_PQ_110_CreateWriteDAG)
{
	RF_PhysDiskAddr_t *temp;

	if (asmap->numStripeUnitsAccessed != 1 &&
	    asmap->failedPDAs[0]->numSector !=
	    raidPtr->Layout.sectorsPerStripeUnit) {
		RF_PANIC();
	}
	/* Swap P and Q to fake out parity code. */
	temp = asmap->parityInfo;
	asmap->parityInfo = asmap->qInfo;
	asmap->qInfo = temp;
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, 1, (int (*) (RF_DagNode_t *))
	    rf_PQ_DegradedWriteQFunc, RF_FALSE);
	/* Is the regular Q func the right one to call ? */
}

/* Lost Data and Q - do degraded mode P write. */
RF_CREATE_DAG_FUNC_DECL(rf_PQ_101_CreateWriteDAG)
{
	if (asmap->numStripeUnitsAccessed != 1 &&
	    asmap->failedPDAs[0]->numSector !=
	    raidPtr->Layout.sectorsPerStripeUnit)
		RF_PANIC();
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, 1, rf_RecoveryXorFunc, RF_FALSE);
}

#endif	/* (RF_INCLUDE_DECL_PQ > 0) || (RF_INCLUDE_RAID6 > 0) */
@


1.5
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_pqdeg.c,v 1.4 2000/01/11 18:02:22 peter Exp $	*/
@


1.4
log
@sync with NetBSD

- removed threadid stuff
- removed unused files
- general tidyup
- you can no longer configure the same unit twice (without
de-configuring first of course).

Again, this has only been tested locally on IDE disks. Further testing
and feedback would be appreciated.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_pqdeg.c,v 1.3 2000/01/07 14:50:22 peter Exp $	*/
d3 1
d33 1
a33 1
#if (RF_INCLUDE_DECL_PQ > 0) || (RF_INCLUDE_RAID6 > 0)
d51 14
a64 14
   Degraded mode dag functions for P+Q calculations.

   The following nomenclature is used.

   PQ_<D><P><Q>_Create{Large,Small}<Write|Read>DAG

   where <D><P><Q> are single digits representing the number of failed
   data units <D> (0,1,2), parity units <P> (0,1), and Q units <Q>, effecting
   the I/O. The reads have only  PQ_<D><P><Q>_CreateReadDAG variants, while
   the single fault writes have both large and small write versions. (Single fault
   PQ is equivalent to normal mode raid 5 in many aspects.

   Some versions degenerate into the same case, and are grouped together below.
*/
a65 1
/* Reads, single failure
d67 1
a67 3
   we have parity, so we can do a raid 5
   reconstruct read.
*/
d69 1
d72 2
a73 1
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_pRecoveryFuncs);
d75 3
a77 1
/* Reads double failure  */
d80 3
a82 4
   Q is lost, but not parity
   so we can a raid 5 reconstruct read.
*/

d85 2
a86 1
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_pRecoveryFuncs);
d88 1
d90 4
a93 5
  parity is lost, so we need to
  do a reconstruct read and recompute
  the data with Q.
*/

d97 1
a97 1
	/* swap P and Q pointers to fake out the DegradedReadDAG code */
d101 2
a102 1
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_qRecoveryFuncs);
d104 1
d106 4
a109 4
  Two data units are dead in this stripe, so we will need read
  both P and Q to reconstruct the data. Note that only
  one data unit we are reading may actually be missing.
*/
d115 1
d119 2
a120 1
	rf_CreateDoubleDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList);
d122 3
a124 1
/* Writes, single failure */
d130 1
a130 1
	    asmap->failedPDAs[0]->numSector != 
d133 3
a135 4
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp, 
		      flags, allocList, 2, 
		      (int (*) (RF_DagNode_t *)) rf_Degraded_100_PQFunc, 
		      RF_FALSE);
d137 2
a138 1
/* Dead  P - act like a RAID 5 small write with parity = Q */
d142 1
a142 1
	/* swap P and Q pointers to fake out the DegradedReadDAG code */
d146 2
a147 2
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags, 
				     allocList, &rf_qFuncs, NULL);
d149 2
a150 1
/* Dead Q - act like a RAID 5 small write */
d153 2
a154 2
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags, 
				     allocList, &rf_pFuncs, NULL);
d156 2
a157 1
/* Dead P - act like a RAID 5 large write but for Q */
d161 1
a161 1
	/* swap P and Q pointers to fake out the code */
d165 2
a166 2
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags, 
				     allocList, 1, rf_RegularQFunc, RF_FALSE);
d168 2
a169 1
/* Dead Q - act like a RAID 5 large write */
d172 2
a173 2
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags, 
				     allocList, 1, rf_RegularPFunc, RF_FALSE);
d177 1
a177 3
/*
 * writes, double failure
 */
d179 1
a179 3
/*
 * Lost P & Q - do a nonredundant write
 */
d182 2
a183 2
	rf_CreateNonRedundantWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    RF_IO_TYPE_WRITE);
d185 2
d188 4
a191 4
   In the two cases below,
   A nasty case arises when the write a (strict) portion of a failed stripe unit
   and parts of another su. For now, we do not support this.
*/
d193 1
a193 3
/*
  Lost Data and  P - do a Q write.
*/
d199 2
a200 1
	    asmap->failedPDAs[0]->numSector != raidPtr->Layout.sectorsPerStripeUnit) {
d203 1
a203 1
	/* swap P and Q to fake out parity code */
d208 3
a210 4
		      allocList, 1, 
		      (int (*) (RF_DagNode_t *)) rf_PQ_DegradedWriteQFunc,
		      RF_FALSE);
	/* is the regular Q func the right one to call? */
d212 2
a213 3
/*
   Lost Data and Q - do degraded mode P write
*/
d217 2
a218 1
	    asmap->failedPDAs[0]->numSector != raidPtr->Layout.sectorsPerStripeUnit)
d223 2
a224 2
#endif				/* (RF_INCLUDE_DECL_PQ > 0) ||
				 * (RF_INCLUDE_RAID6 > 0) */
@


1.4.12.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d32 1
a32 1
#if	(RF_INCLUDE_DECL_PQ > 0) || (RF_INCLUDE_RAID6 > 0)
d50 14
a63 14
 * Degraded mode dag functions for P+Q calculations.
 *
 * The following nomenclature is used.
 *
 *   PQ_<D><P><Q>_Create{Large,Small}<Write|Read>DAG
 *
 * where <D><P><Q> are single digits representing the number of failed
 * data units <D> (0,1,2), parity units <P> (0,1), and Q units <Q>, effecting
 * the I/O. The reads have only  PQ_<D><P><Q>_CreateReadDAG variants, while
 * the single fault writes have both large and small write versions.
 * Single fault PQ is equivalent to normal mode raid 5 in many aspects.
 *
 * Some versions degenerate into the same case, and are grouped together below.
 */
d65 1
d67 3
a69 1
/* Reads, single failure. */
a70 1
/* We have parity, so we can do a raid 5 reconstruct read. */
d73 1
a73 2
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    &rf_pRecoveryFuncs);
d75 1
d77 4
a81 6
/* Reads double failure. */

/*
 * Q is lost, but not parity.
 * So we can a raid 5 reconstruct read.
 */
d84 1
a84 2
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    &rf_pRecoveryFuncs);
d86 5
a91 5
/*
 * Parity is lost, so we need to
 * do a reconstruct read and recompute
 * the data with Q.
 */
d95 1
a95 1
	/* Swap P and Q pointers to fake out the DegradedReadDAG code. */
d99 1
a99 2
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    &rf_qRecoveryFuncs);
a100 1

d102 4
a105 4
 * Two data units are dead in this stripe, so we will need read
 * both P and Q to reconstruct the data. Note that only
 * one data unit we are reading may actually be missing.
 */
a110 1

d114 1
a114 2
	rf_CreateDoubleDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList);
d116 1
a116 3


/* Writes, single failure. */
d122 1
a122 1
	    asmap->failedPDAs[0]->numSector !=
d125 4
a128 3
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp,
	    flags, allocList, 2, (int (*) (RF_DagNode_t *))
	    rf_Degraded_100_PQFunc, RF_FALSE);
d130 1
a130 2

/* Dead  P - act like a RAID 5 small write with parity = Q. */
d134 1
a134 1
	/* Swap P and Q pointers to fake out the DegradedReadDAG code. */
d138 2
a139 2
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, &rf_qFuncs, NULL);
d141 1
a141 2

/* Dead Q - act like a RAID 5 small write. */
d144 2
a145 2
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, &rf_pFuncs, NULL);
d147 1
a147 2

/* Dead P - act like a RAID 5 large write but for Q. */
d151 1
a151 1
	/* Swap P and Q pointers to fake out the code. */
d155 2
a156 2
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, 1, rf_RegularQFunc, RF_FALSE);
d158 1
a158 2

/* Dead Q - act like a RAID 5 large write. */
d161 2
a162 2
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, 1, rf_RegularPFunc, RF_FALSE);
d166 3
a168 1
/* Writes, double failure. */
d170 3
a172 1
/* Lost P & Q - do a nonredundant write. */
d175 2
a176 2
	rf_CreateNonRedundantWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, RF_IO_TYPE_WRITE);
d178 5
a182 1

d185 2
a186 6
 * In the two cases below, a nasty case arises when it's a write for a
 * (strict) portion of a failed stripe unit and parts of another su.
 * For now, we do not support this.
 */

/* Lost Data and  P - do a Q write. */
d192 1
a192 2
	    asmap->failedPDAs[0]->numSector !=
	    raidPtr->Layout.sectorsPerStripeUnit) {
d195 1
a195 1
	/* Swap P and Q to fake out parity code. */
d200 4
a203 3
	    allocList, 1, (int (*) (RF_DagNode_t *))
	    rf_PQ_DegradedWriteQFunc, RF_FALSE);
	/* Is the regular Q func the right one to call ? */
d205 3
a207 2

/* Lost Data and Q - do degraded mode P write. */
d211 1
a211 2
	    asmap->failedPDAs[0]->numSector !=
	    raidPtr->Layout.sectorsPerStripeUnit)
d216 2
a217 2

#endif	/* (RF_INCLUDE_DECL_PQ > 0) || (RF_INCLUDE_RAID6 > 0) */
@


1.4.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d32 1
a32 1
#if	(RF_INCLUDE_DECL_PQ > 0) || (RF_INCLUDE_RAID6 > 0)
d50 14
a63 14
 * Degraded mode dag functions for P+Q calculations.
 *
 * The following nomenclature is used.
 *
 *   PQ_<D><P><Q>_Create{Large,Small}<Write|Read>DAG
 *
 * where <D><P><Q> are single digits representing the number of failed
 * data units <D> (0,1,2), parity units <P> (0,1), and Q units <Q>, effecting
 * the I/O. The reads have only  PQ_<D><P><Q>_CreateReadDAG variants, while
 * the single fault writes have both large and small write versions.
 * Single fault PQ is equivalent to normal mode raid 5 in many aspects.
 *
 * Some versions degenerate into the same case, and are grouped together below.
 */
d65 1
d67 3
a69 1
/* Reads, single failure. */
a70 1
/* We have parity, so we can do a raid 5 reconstruct read. */
d73 1
a73 2
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    &rf_pRecoveryFuncs);
d75 1
d77 4
a81 6
/* Reads double failure. */

/*
 * Q is lost, but not parity.
 * So we can a raid 5 reconstruct read.
 */
d84 1
a84 2
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    &rf_pRecoveryFuncs);
d86 5
a91 5
/*
 * Parity is lost, so we need to
 * do a reconstruct read and recompute
 * the data with Q.
 */
d95 1
a95 1
	/* Swap P and Q pointers to fake out the DegradedReadDAG code. */
d99 1
a99 2
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    &rf_qRecoveryFuncs);
a100 1

d102 4
a105 4
 * Two data units are dead in this stripe, so we will need read
 * both P and Q to reconstruct the data. Note that only
 * one data unit we are reading may actually be missing.
 */
a110 1

d114 1
a114 2
	rf_CreateDoubleDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList);
d116 1
a116 3


/* Writes, single failure. */
d122 1
a122 1
	    asmap->failedPDAs[0]->numSector !=
d125 4
a128 3
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp,
	    flags, allocList, 2, (int (*) (RF_DagNode_t *))
	    rf_Degraded_100_PQFunc, RF_FALSE);
d130 1
a130 2

/* Dead  P - act like a RAID 5 small write with parity = Q. */
d134 1
a134 1
	/* Swap P and Q pointers to fake out the DegradedReadDAG code. */
d138 2
a139 2
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, &rf_qFuncs, NULL);
d141 1
a141 2

/* Dead Q - act like a RAID 5 small write. */
d144 2
a145 2
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, &rf_pFuncs, NULL);
d147 1
a147 2

/* Dead P - act like a RAID 5 large write but for Q. */
d151 1
a151 1
	/* Swap P and Q pointers to fake out the code. */
d155 2
a156 2
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, 1, rf_RegularQFunc, RF_FALSE);
d158 1
a158 2

/* Dead Q - act like a RAID 5 large write. */
d161 2
a162 2
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, 1, rf_RegularPFunc, RF_FALSE);
d166 3
a168 1
/* Writes, double failure. */
d170 3
a172 1
/* Lost P & Q - do a nonredundant write. */
d175 2
a176 2
	rf_CreateNonRedundantWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, RF_IO_TYPE_WRITE);
d178 5
a182 1

d185 2
a186 6
 * In the two cases below, a nasty case arises when it's a write for a
 * (strict) portion of a failed stripe unit and parts of another su.
 * For now, we do not support this.
 */

/* Lost Data and  P - do a Q write. */
d192 1
a192 2
	    asmap->failedPDAs[0]->numSector !=
	    raidPtr->Layout.sectorsPerStripeUnit) {
d195 1
a195 1
	/* Swap P and Q to fake out parity code. */
d200 4
a203 3
	    allocList, 1, (int (*) (RF_DagNode_t *))
	    rf_PQ_DegradedWriteQFunc, RF_FALSE);
	/* Is the regular Q func the right one to call ? */
d205 3
a207 2

/* Lost Data and Q - do degraded mode P write. */
d211 1
a211 2
	    asmap->failedPDAs[0]->numSector !=
	    raidPtr->Layout.sectorsPerStripeUnit)
d216 2
a217 2

#endif	/* (RF_INCLUDE_DECL_PQ > 0) || (RF_INCLUDE_RAID6 > 0) */
@


1.3
log
@sync with work by Greg Oster on NetBSD

Please note: This update has *only* been tested on i386 with IDE
disks. Could someone with a spare box please make sure all is OK with
SCSI and maybe other arches ? sparc testing will follow locally.

* remove rf_sys.h
* many changes to make it more stable
* some performance increases
* All raid threads now get their own kernel process and the calling
  raidctl(8) program will show status progress through a meter.
* In theory FFS_SOFTUPDATES and RAIDframe will now work together - NOT
  TESTED YET

See http://www.cs.usask.ca/staff/oster/raid.html

This updates include Greg's changes to Jan 4th 2000.

TODO:
* some odd behaviour when running raictl -c on an already config'ed
  raid set - problem founf, fix being done
* progress meter is in raidctl(8) - seperate commit, but could do with
  sync'ing with OpenBSD ftp version
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_pqdeg.c,v 1.2 1999/02/16 00:03:10 niklas Exp $	*/
/*	$NetBSD: rf_pqdeg.c,v 1.4 1999/08/15 02:36:40 oster Exp $	*/
a42 1
#include "rf_threadid.h"
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_pqdeg.c,v 1.1 1999/01/11 14:29:39 niklas Exp $	*/
/*	$NetBSD: rf_pqdeg.c,v 1.3 1999/02/05 00:06:15 oster Exp $	*/
d107 1
d112 1
d119 1
d123 2
a124 1
	    asmap->failedPDAs[0]->numSector != raidPtr->Layout.sectorsPerStripeUnit)
d126 4
a129 2
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, 2, (int (*) ()) rf_Degraded_100_PQFunc, RF_FALSE);
d139 2
a140 1
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_qFuncs, NULL);
d145 2
a146 1
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_pFuncs, NULL);
d156 2
a157 1
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, 1, rf_RegularQFunc, RF_FALSE);
d162 2
a163 1
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, 1, rf_RegularPFunc, RF_FALSE);
d201 3
a203 1
	    allocList, 1, (int (*) ()) rf_PQ_DegradedWriteQFunc, RF_FALSE);
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_pqdeg.c,v 1.1 1998/11/13 04:20:32 oster Exp $	*/
/*	$NetBSD: rf_pqdeg.c,v 1.1 1998/11/13 04:20:32 oster Exp $	*/
a29 74
/*
 * Log: rf_pqdeg.c,v 
 * Revision 1.19  1996/11/05 21:10:40  jimz
 * failed pda generalization
 *
 * Revision 1.18  1996/07/31  16:30:01  jimz
 * asm/asmap fix
 *
 * Revision 1.17  1996/07/31  15:35:09  jimz
 * evenodd changes; bugfixes for double-degraded archs, generalize
 * some formerly PQ-only functions
 *
 * Revision 1.16  1996/07/27  23:36:08  jimz
 * Solaris port of simulator
 *
 * Revision 1.15  1996/07/22  19:52:16  jimz
 * switched node params to RF_DagParam_t, a union of
 * a 64-bit int and a void *, for better portability
 * attempted hpux port, but failed partway through for
 * lack of a single C compiler capable of compiling all
 * source files
 *
 * Revision 1.14  1996/06/02  17:31:48  jimz
 * Moved a lot of global stuff into array structure, where it belongs.
 * Fixed up paritylogging, pss modules in this manner. Some general
 * code cleanup. Removed lots of dead code, some dead files.
 *
 * Revision 1.13  1996/05/31  22:26:54  jimz
 * fix a lot of mapping problems, memory allocation problems
 * found some weird lock issues, fixed 'em
 * more code cleanup
 *
 * Revision 1.12  1996/05/27  18:56:37  jimz
 * more code cleanup
 * better typing
 * compiles in all 3 environments
 *
 * Revision 1.11  1996/05/24  22:17:04  jimz
 * continue code + namespace cleanup
 * typed a bunch of flags
 *
 * Revision 1.10  1996/05/24  04:28:55  jimz
 * release cleanup ckpt
 *
 * Revision 1.9  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.8  1996/05/03  19:41:07  wvcii
 * added includes for dag library
 *
 * Revision 1.7  1995/11/30  16:19:36  wvcii
 * added copyright info
 *
 * Revision 1.6  1995/11/07  16:15:08  wvcii
 * updated/added prototyping for dag creation
 *
 * Revision 1.5  1995/03/01  20:25:48  holland
 * kernelization changes
 *
 * Revision 1.4  1995/02/03  22:31:36  holland
 * many changes related to kernelization
 *
 * Revision 1.3  1995/02/01  15:13:05  holland
 * moved #include of general.h out of raid.h and into each file
 *
 * Revision 1.2  1994/12/05  04:50:26  danner
 * additional pq support
 *
 * Revision 1.1  1994/11/29  20:36:02  danner
 * Initial revision
 *
 */

d53 1
a53 1
   The following nomenclature is used. 
d61 1
a61 1
   PQ is equivalent to normal mode raid 5 in many aspects. 
d66 1
a66 1
/* Reads, single failure 
d74 1
a74 1
  rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_pRecoveryFuncs);
a75 1

d85 1
a85 1
  rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_pRecoveryFuncs);
a86 1

d95 6
a100 4
  RF_PhysDiskAddr_t *temp;
  /* swap P and Q pointers to fake out the DegradedReadDAG code */
  temp = asmap->parityInfo; asmap->parityInfo = asmap->qInfo; asmap->qInfo = temp;
  rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_qRecoveryFuncs);
a101 1

d104 2
a105 2
  both P and Q to reconstruct the data. Note that only 
  one data unit we are reading may actually be missing. 
d109 1
a109 1
  rf_PQ_DoubleDegRead(raidPtr, asmap, dag_h, bp, flags, allocList);
a110 1

d113 1
a113 1
  rf_CreateDoubleDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList);
a114 1

d119 5
a123 5
  if (asmap->numStripeUnitsAccessed != 1 && 
      asmap->failedPDAs[0]->numSector != raidPtr->Layout.sectorsPerStripeUnit) 
    RF_PANIC();
  rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp, flags,
    allocList, 2, (int (*)())rf_Degraded_100_PQFunc, RF_FALSE);
a124 1

d128 6
a133 4
  RF_PhysDiskAddr_t *temp;
  /* swap P and Q pointers to fake out the DegradedReadDAG code */
  temp = asmap->parityInfo; asmap->parityInfo = asmap->qInfo; asmap->qInfo = temp;
  rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_qFuncs, NULL);
a134 1

d138 1
a138 1
  rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_pFuncs, NULL);
a139 1

d143 6
a148 4
  RF_PhysDiskAddr_t *temp;
  /* swap P and Q pointers to fake out the code */
  temp = asmap->parityInfo; asmap->parityInfo = asmap->qInfo; asmap->qInfo = temp;
  rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, 1, rf_RegularQFunc, RF_FALSE);
a149 1

d153 1
a153 1
  rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, 1, rf_RegularPFunc, RF_FALSE);
d162 1
a162 1
 * Lost P & Q - do a nonredundant write 
d166 2
a167 2
  rf_CreateNonRedundantWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
    RF_IO_TYPE_WRITE);
a168 1

d180 1
a180 1
  RF_PhysDiskAddr_t *temp;
d182 11
a192 12
  if (asmap->numStripeUnitsAccessed != 1 && 
      asmap->failedPDAs[0]->numSector != raidPtr->Layout.sectorsPerStripeUnit)
  {
    RF_PANIC();
  }
  /* swap P and Q to fake out parity code */
  temp = asmap->parityInfo;
  asmap->parityInfo = asmap->qInfo;
  asmap->qInfo = temp;
  rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp, flags,
    allocList,1, (int (*)())rf_PQ_DegradedWriteQFunc, RF_FALSE); 
  /* is the regular Q func the right one to call? */
a193 1

d199 5
a203 5
  if (asmap->numStripeUnitsAccessed != 1 && 
      asmap->failedPDAs[0]->numSector != raidPtr->Layout.sectorsPerStripeUnit)
    RF_PANIC();
  rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp, flags,
    allocList,1, rf_RecoveryXorFunc, RF_FALSE);
d205 2
a206 2

#endif /* (RF_INCLUDE_DECL_PQ > 0) || (RF_INCLUDE_RAID6 > 0) */
@

