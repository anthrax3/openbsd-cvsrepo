head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.06.15.53.59;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.05;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.03.21;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.46;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.29;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.53;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_reconmap.h,v 1.3 2002/12/16 07:01:05 tdeval Exp $	*/
/*	$NetBSD: rf_reconmap.h,v 1.3 1999/02/05 00:06:16 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/******************************************************************************
 * rf_reconMap.h
 *
 * -- Header file describing reconstruction status data structure.
 ******************************************************************************/

#ifndef	_RF__RF_RECONMAP_H_
#define	_RF__RF_RECONMAP_H_

#include "rf_types.h"
#include "rf_threadstuff.h"

/*
 * Main reconstruction status descriptor; size and maxsize are used for
 * monitoring only: they have no function for reconstruction.
 */
struct RF_ReconMap_s {
	RF_SectorCount_t	  sectorsPerReconUnit;
						/*
						 * Sectors per reconstruct
						 * unit.
						 */
	RF_SectorCount_t	  sectorsInDisk;/* Total sectors in disk. */
	RF_SectorCount_t	  unitsLeft;	/* Recon units left to recon. */
	RF_ReconUnitCount_t	  totalRUs;	/* Total recon units on disk. */
	RF_ReconUnitCount_t	  spareRUs;	/*
						 * Total number of spare RUs on
						 * failed disk.
						 */
	RF_StripeCount_t	  totalParityStripes;
						/*
						 * Total number of parity
						 * stripes in array.
						 */
	u_int			  size;		/*
						 * Overall size of this
						 * structure.
						 */
	u_int			  maxSize;	/* Maximum size so far. */
	RF_ReconMapListElem_t	**status;	/*
						 * Array of ptrs to list
						 * elements.
						 */
	RF_DECLARE_MUTEX	 (mutex);
};

/* A list element. */
struct RF_ReconMapListElem_s {
	/* Bounding sect nums on this block. */
	RF_SectorNum_t		 startSector;
	RF_SectorNum_t		 stopSector;
	RF_ReconMapListElem_t	*next;		/* Next element in list. */
};

RF_ReconMap_t *rf_MakeReconMap(RF_Raid_t *,
	RF_SectorCount_t, RF_SectorCount_t, RF_ReconUnitCount_t);

void rf_ReconMapUpdate(RF_Raid_t *, RF_ReconMap_t *,
	RF_SectorNum_t, RF_SectorNum_t);

void rf_FreeReconMap(RF_ReconMap_t *);

int  rf_CheckRUReconstructed(RF_ReconMap_t *, RF_SectorNum_t);

RF_ReconUnitCount_t rf_UnitsLeftToReconstruct(RF_ReconMap_t *);

void rf_PrintReconMap(RF_Raid_t *, RF_ReconMap_t *, RF_RowCol_t, RF_RowCol_t);

void rf_PrintReconSchedule(RF_ReconMap_t *, struct timeval *);

#endif	/* !_RF__RF_RECONMAP_H_ */
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_reconmap.h,v 1.2 1999/02/16 00:03:21 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_reconmap.h,v 1.1 1999/01/11 14:29:46 niklas Exp $	*/
d3 1
d32 3
a34 1
 * rf_reconMap.h -- Header file describing reconstruction status data structure
d37 2
a38 2
#ifndef _RF__RF_RECONMAP_H_
#define _RF__RF_RECONMAP_H_
d44 2
a45 2
 * Main reconstruction status descriptor. size and maxsize are used for
 * monitoring only:  they have no function for reconstruction.
d48 27
a74 13
	RF_SectorCount_t sectorsPerReconUnit;	/* sectors per reconstruct
						 * unit */
	RF_SectorCount_t sectorsInDisk;	/* total sectors in disk */
	RF_SectorCount_t unitsLeft;	/* recon units left to recon */
	RF_ReconUnitCount_t totalRUs;	/* total recon units on disk */
	RF_ReconUnitCount_t spareRUs;	/* total number of spare RUs on failed
					 * disk */
	RF_StripeCount_t totalParityStripes;	/* total number of parity
						 * stripes in array */
	u_int   size;		/* overall size of this structure */
	u_int   maxSize;	/* maximum size so far */
	RF_ReconMapListElem_t **status;	/* array of ptrs to list elements */
	        RF_DECLARE_MUTEX(mutex)
d76 2
a77 1
/* a list element */
d79 4
a82 3
	RF_SectorNum_t startSector;	/* bounding sect nums on this block */
	RF_SectorNum_t stopSector;
	RF_ReconMapListElem_t *next;	/* next element in list */
d85 2
a86 3
RF_ReconMap_t *
rf_MakeReconMap(RF_Raid_t * raidPtr, RF_SectorCount_t ru_sectors,
    RF_SectorCount_t disk_sectors, RF_ReconUnitCount_t spareUnitsPerDisk);
d88 2
a89 3
void 
rf_ReconMapUpdate(RF_Raid_t * raidPtr, RF_ReconMap_t * mapPtr,
    RF_SectorNum_t startSector, RF_SectorNum_t stopSector);
d91 1
a91 1
void    rf_FreeReconMap(RF_ReconMap_t * mapPtr);
d93 1
a93 1
int     rf_CheckRUReconstructed(RF_ReconMap_t * mapPtr, RF_SectorNum_t startSector);
d95 1
a95 1
RF_ReconUnitCount_t rf_UnitsLeftToReconstruct(RF_ReconMap_t * mapPtr);
d97 1
a97 3
void 
rf_PrintReconMap(RF_Raid_t * raidPtr, RF_ReconMap_t * mapPtr,
    RF_RowCol_t frow, RF_RowCol_t fcol);
d99 1
a99 1
void    rf_PrintReconSchedule(RF_ReconMap_t * mapPtr, struct timeval * starttime);
d101 1
a101 1
#endif				/* !_RF__RF_RECONMAP_H_ */
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d31 1
a31 3
 * rf_reconMap.h
 *
 * -- Header file describing reconstruction status data structure.
d34 2
a35 2
#ifndef	_RF__RF_RECONMAP_H_
#define	_RF__RF_RECONMAP_H_
d41 2
a42 2
 * Main reconstruction status descriptor; size and maxsize are used for
 * monitoring only: they have no function for reconstruction.
d45 13
a57 27
	RF_SectorCount_t	  sectorsPerReconUnit;
						/*
						 * Sectors per reconstruct
						 * unit.
						 */
	RF_SectorCount_t	  sectorsInDisk;/* Total sectors in disk. */
	RF_SectorCount_t	  unitsLeft;	/* Recon units left to recon. */
	RF_ReconUnitCount_t	  totalRUs;	/* Total recon units on disk. */
	RF_ReconUnitCount_t	  spareRUs;	/*
						 * Total number of spare RUs on
						 * failed disk.
						 */
	RF_StripeCount_t	  totalParityStripes;
						/*
						 * Total number of parity
						 * stripes in array.
						 */
	u_int			  size;		/*
						 * Overall size of this
						 * structure.
						 */
	u_int			  maxSize;	/* Maximum size so far. */
	RF_ReconMapListElem_t	**status;	/*
						 * Array of ptrs to list
						 * elements.
						 */
	RF_DECLARE_MUTEX	 (mutex);
d59 1
a59 2

/* A list element. */
d61 3
a63 4
	/* Bounding sect nums on this block. */
	RF_SectorNum_t		 startSector;
	RF_SectorNum_t		 stopSector;
	RF_ReconMapListElem_t	*next;		/* Next element in list. */
d66 3
a68 2
RF_ReconMap_t *rf_MakeReconMap(RF_Raid_t *,
	RF_SectorCount_t, RF_SectorCount_t, RF_ReconUnitCount_t);
d70 3
a72 2
void rf_ReconMapUpdate(RF_Raid_t *, RF_ReconMap_t *,
	RF_SectorNum_t, RF_SectorNum_t);
d74 1
a74 1
void rf_FreeReconMap(RF_ReconMap_t *);
d76 1
a76 1
int  rf_CheckRUReconstructed(RF_ReconMap_t *, RF_SectorNum_t);
d78 1
a78 1
RF_ReconUnitCount_t rf_UnitsLeftToReconstruct(RF_ReconMap_t *);
d80 3
a82 1
void rf_PrintReconMap(RF_Raid_t *, RF_ReconMap_t *, RF_RowCol_t, RF_RowCol_t);
d84 1
a84 1
void rf_PrintReconSchedule(RF_ReconMap_t *, struct timeval *);
d86 1
a86 1
#endif	/* !_RF__RF_RECONMAP_H_ */
@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d31 1
a31 3
 * rf_reconMap.h
 *
 * -- Header file describing reconstruction status data structure.
d34 2
a35 2
#ifndef	_RF__RF_RECONMAP_H_
#define	_RF__RF_RECONMAP_H_
d41 2
a42 2
 * Main reconstruction status descriptor; size and maxsize are used for
 * monitoring only: they have no function for reconstruction.
d45 13
a57 27
	RF_SectorCount_t	  sectorsPerReconUnit;
						/*
						 * Sectors per reconstruct
						 * unit.
						 */
	RF_SectorCount_t	  sectorsInDisk;/* Total sectors in disk. */
	RF_SectorCount_t	  unitsLeft;	/* Recon units left to recon. */
	RF_ReconUnitCount_t	  totalRUs;	/* Total recon units on disk. */
	RF_ReconUnitCount_t	  spareRUs;	/*
						 * Total number of spare RUs on
						 * failed disk.
						 */
	RF_StripeCount_t	  totalParityStripes;
						/*
						 * Total number of parity
						 * stripes in array.
						 */
	u_int			  size;		/*
						 * Overall size of this
						 * structure.
						 */
	u_int			  maxSize;	/* Maximum size so far. */
	RF_ReconMapListElem_t	**status;	/*
						 * Array of ptrs to list
						 * elements.
						 */
	RF_DECLARE_MUTEX	 (mutex);
d59 1
a59 2

/* A list element. */
d61 3
a63 4
	/* Bounding sect nums on this block. */
	RF_SectorNum_t		 startSector;
	RF_SectorNum_t		 stopSector;
	RF_ReconMapListElem_t	*next;		/* Next element in list. */
d66 3
a68 2
RF_ReconMap_t *rf_MakeReconMap(RF_Raid_t *,
	RF_SectorCount_t, RF_SectorCount_t, RF_ReconUnitCount_t);
d70 3
a72 2
void rf_ReconMapUpdate(RF_Raid_t *, RF_ReconMap_t *,
	RF_SectorNum_t, RF_SectorNum_t);
d74 1
a74 1
void rf_FreeReconMap(RF_ReconMap_t *);
d76 1
a76 1
int  rf_CheckRUReconstructed(RF_ReconMap_t *, RF_SectorNum_t);
d78 1
a78 1
RF_ReconUnitCount_t rf_UnitsLeftToReconstruct(RF_ReconMap_t *);
d80 3
a82 1
void rf_PrintReconMap(RF_Raid_t *, RF_ReconMap_t *, RF_RowCol_t, RF_RowCol_t);
d84 1
a84 1
void rf_PrintReconSchedule(RF_ReconMap_t *, struct timeval *);
d86 1
a86 1
#endif	/* !_RF__RF_RECONMAP_H_ */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_reconmap.h,v 1.1 1998/11/13 04:20:33 oster Exp $	*/
/*	$NetBSD: rf_reconmap.h,v 1.1 1998/11/13 04:20:33 oster Exp $	*/
a33 33
/* :  
 * Log: rf_reconmap.h,v 
 * Revision 1.10  1996/08/01 15:59:25  jimz
 * minor cleanup
 *
 * Revision 1.9  1996/06/09  02:36:46  jimz
 * lots of little crufty cleanup- fixup whitespace
 * issues, comment #ifdefs, improve typing in some
 * places (esp size-related)
 *
 * Revision 1.8  1996/06/07  21:33:04  jimz
 * begin using consistent types for sector numbers,
 * stripe numbers, row+col numbers, recon unit numbers
 *
 * Revision 1.7  1996/06/05  18:06:02  jimz
 * Major code cleanup. The Great Renaming is now done.
 * Better modularity. Better typing. Fixed a bunch of
 * synchronization bugs. Made a lot of global stuff
 * per-desc or per-array. Removed dead code.
 *
 * Revision 1.6  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.5  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.4  1995/12/06  15:04:01  root
 * added copyright info
 *
 */

d45 13
a57 10
  RF_SectorCount_t         sectorsPerReconUnit; /* sectors per reconstruct unit */
  RF_SectorCount_t         sectorsInDisk;       /* total sectors in disk */
  RF_SectorCount_t         unitsLeft;           /* recon units left to recon */
  RF_ReconUnitCount_t      totalRUs;            /* total recon units on disk */
  RF_ReconUnitCount_t      spareRUs;            /* total number of spare RUs on failed disk */
  RF_StripeCount_t         totalParityStripes;  /* total number of parity stripes in array */
  u_int                    size;				/* overall size of this structure */
  u_int                    maxSize;			    /* maximum size so far */
  RF_ReconMapListElem_t  **status;              /* array of ptrs to list elements */
  RF_DECLARE_MUTEX(mutex)
a58 1

d61 3
a63 3
  RF_SectorNum_t          startSector; /* bounding sect nums on this block */
  RF_SectorNum_t          stopSector;
  RF_ReconMapListElem_t  *next;        /* next element in list */
d66 3
a68 2
RF_ReconMap_t *rf_MakeReconMap(RF_Raid_t *raidPtr, RF_SectorCount_t ru_sectors,
	RF_SectorCount_t disk_sectors, RF_ReconUnitCount_t spareUnitsPerDisk);
d70 3
a72 2
void rf_ReconMapUpdate(RF_Raid_t *raidPtr, RF_ReconMap_t *mapPtr,
	RF_SectorNum_t startSector, RF_SectorNum_t stopSector);
d74 1
a74 1
void rf_FreeReconMap(RF_ReconMap_t *mapPtr);
d76 1
a76 1
int rf_CheckRUReconstructed(RF_ReconMap_t *mapPtr, RF_SectorNum_t startSector);
d78 1
a78 1
RF_ReconUnitCount_t rf_UnitsLeftToReconstruct(RF_ReconMap_t *mapPtr);
d80 3
a82 2
void rf_PrintReconMap(RF_Raid_t *raidPtr, RF_ReconMap_t *mapPtr,
	RF_RowCol_t frow, RF_RowCol_t fcol);
d84 1
a84 1
void rf_PrintReconSchedule(RF_ReconMap_t *mapPtr, struct timeval *starttime);
d86 1
a86 1
#endif /* !_RF__RF_RECONMAP_H_ */
@

