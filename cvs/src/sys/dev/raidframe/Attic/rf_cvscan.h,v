head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.03;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.02.28;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.06;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.27;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.51;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_cvscan.h,v 1.3 2002/12/16 07:01:03 tdeval Exp $	*/
/*	$NetBSD: rf_cvscan.h,v 1.3 1999/02/05 00:06:07 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*
 *	Disk scheduling by CVSCAN( N, r )
 *
 *	Given a set of requests, partition them into one set on each
 *	side of the current arm position.  The trick is to pick which
 *	side you are going to service next; once a side is picked you will
 *	service the closest request.
 *	Let there be n1 requests on one side and n2 requests on the other
 *	side.  If one of n1 or n2 is zero, select the other side.
 *	If both n1 and n2 are nonzero, select a "range" for examination
 *	that is N' = min( n1, n2, N ).  Average the distance from the
 *	current position to the nearest N' requests on each side giving
 *	d1 and d2.
 *	Suppose the last decision was to move toward set 2, then the
 *	current direction is toward set 2, and you will only switch to set
 *	1 if d1+R < d2 where R is r*(total number of cylinders), r in [0,1].
 *
 *	I extend this by applying only to the set of requests that all
 *	share the same, highest priority level.
 */

#ifndef	_RF__RF_CVSCAN_H_
#define	_RF__RF_CVSCAN_H_

#include "rf_diskqueue.h"

typedef enum RF_CvscanArmDir_e {
	rf_cvscan_LEFT,
	rf_cvscan_RIGHT
} RF_CvscanArmDir_t;

typedef struct RF_CvscanHeader_s {
	long			 range_for_avg;		/* CVSCAN param N */
	long			 change_penalty;	/* CVSCAN param R */
	RF_CvscanArmDir_t	 direction;
	RF_SectorNum_t		 cur_block;
	int			 nxt_priority;
	RF_DiskQueueData_t	*left;
	int			 left_cnt;
	RF_DiskQueueData_t	*right;
	int			 right_cnt;
	RF_DiskQueueData_t	*burner;
} RF_CvscanHeader_t;

int   rf_CvscanConfigure(void);
void *rf_CvscanCreate(RF_SectorCount_t, RF_AllocListElem_t *,
	RF_ShutdownList_t **);
void  rf_CvscanEnqueue(void *, RF_DiskQueueData_t *, int);
RF_DiskQueueData_t *rf_CvscanDequeue(void *);
RF_DiskQueueData_t *rf_CvscanPeek(void *);
int   rf_CvscanPromote(void *, RF_StripeNum_t, RF_ReconUnitNum_t);

#endif	/* !_RF__RF_CVSCAN_H_ */
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_cvscan.h,v 1.2 1999/02/16 00:02:28 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_cvscan.h,v 1.1 1999/01/11 14:29:06 niklas Exp $	*/
d3 1
d32 19
a50 19
**	Disk scheduling by CVSCAN( N, r )
**
**	Given a set of requests, partition them into one set on each
**	side of the current arm position.  The trick is to pick which
**	side you are going to service next; once a side is picked you will
**	service the closest request.
**	Let there be n1 requests on one side and n2 requests on the other
**	side.  If one of n1 or n2 is zero, select the other side.
**	If both n1 and n2 are nonzero, select a "range" for examination
**	that is N' = min( n1, n2, N ).  Average the distance from the
**	current position to the nearest N' requests on each side giving
**	d1 and d2.
**	Suppose the last decision was to move toward set 2, then the
**	current direction is toward set 2, and you will only switch to set
**	1 if d1+R < d2 where R is r*(total number of cylinders), r in [0,1].
**
**	I extend this by applying only to the set of requests that all
**	share the same, highest priority level.
*/
d52 2
a53 2
#ifndef _RF__RF_CVSCAN_H_
#define _RF__RF_CVSCAN_H_
d60 1
a60 1
}       RF_CvscanArmDir_t;
d63 19
a81 22
	long    range_for_avg;	/* CVSCAN param N */
	long    change_penalty;	/* CVSCAN param R */
	RF_CvscanArmDir_t direction;
	RF_SectorNum_t cur_block;
	int     nxt_priority;
	RF_DiskQueueData_t *left;
	int     left_cnt;
	RF_DiskQueueData_t *right;
	int     right_cnt;
	RF_DiskQueueData_t *burner;
}       RF_CvscanHeader_t;

int     rf_CvscanConfigure(void);
void   *
rf_CvscanCreate(RF_SectorCount_t sect_per_disk,
    RF_AllocListElem_t * cl_list, RF_ShutdownList_t ** listp);
void    rf_CvscanEnqueue(void *qptr, RF_DiskQueueData_t * req, int priority);
RF_DiskQueueData_t *rf_CvscanDequeue(void *qptr);
RF_DiskQueueData_t *rf_CvscanPeek(void *qptr);
int 
rf_CvscanPromote(void *qptr, RF_StripeNum_t parityStripeID,
    RF_ReconUnitNum_t which_ru);
d83 1
a83 1
#endif				/* !_RF__RF_CVSCAN_H_ */
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d31 19
a49 19
 *	Disk scheduling by CVSCAN( N, r )
 *
 *	Given a set of requests, partition them into one set on each
 *	side of the current arm position.  The trick is to pick which
 *	side you are going to service next; once a side is picked you will
 *	service the closest request.
 *	Let there be n1 requests on one side and n2 requests on the other
 *	side.  If one of n1 or n2 is zero, select the other side.
 *	If both n1 and n2 are nonzero, select a "range" for examination
 *	that is N' = min( n1, n2, N ).  Average the distance from the
 *	current position to the nearest N' requests on each side giving
 *	d1 and d2.
 *	Suppose the last decision was to move toward set 2, then the
 *	current direction is toward set 2, and you will only switch to set
 *	1 if d1+R < d2 where R is r*(total number of cylinders), r in [0,1].
 *
 *	I extend this by applying only to the set of requests that all
 *	share the same, highest priority level.
 */
d51 2
a52 2
#ifndef	_RF__RF_CVSCAN_H_
#define	_RF__RF_CVSCAN_H_
d59 1
a59 1
} RF_CvscanArmDir_t;
d62 22
a83 19
	long			 range_for_avg;		/* CVSCAN param N */
	long			 change_penalty;	/* CVSCAN param R */
	RF_CvscanArmDir_t	 direction;
	RF_SectorNum_t		 cur_block;
	int			 nxt_priority;
	RF_DiskQueueData_t	*left;
	int			 left_cnt;
	RF_DiskQueueData_t	*right;
	int			 right_cnt;
	RF_DiskQueueData_t	*burner;
} RF_CvscanHeader_t;

int   rf_CvscanConfigure(void);
void *rf_CvscanCreate(RF_SectorCount_t, RF_AllocListElem_t *,
	RF_ShutdownList_t **);
void  rf_CvscanEnqueue(void *, RF_DiskQueueData_t *, int);
RF_DiskQueueData_t *rf_CvscanDequeue(void *);
RF_DiskQueueData_t *rf_CvscanPeek(void *);
int   rf_CvscanPromote(void *, RF_StripeNum_t, RF_ReconUnitNum_t);
d85 1
a85 1
#endif	/* !_RF__RF_CVSCAN_H_ */
@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d31 19
a49 19
 *	Disk scheduling by CVSCAN( N, r )
 *
 *	Given a set of requests, partition them into one set on each
 *	side of the current arm position.  The trick is to pick which
 *	side you are going to service next; once a side is picked you will
 *	service the closest request.
 *	Let there be n1 requests on one side and n2 requests on the other
 *	side.  If one of n1 or n2 is zero, select the other side.
 *	If both n1 and n2 are nonzero, select a "range" for examination
 *	that is N' = min( n1, n2, N ).  Average the distance from the
 *	current position to the nearest N' requests on each side giving
 *	d1 and d2.
 *	Suppose the last decision was to move toward set 2, then the
 *	current direction is toward set 2, and you will only switch to set
 *	1 if d1+R < d2 where R is r*(total number of cylinders), r in [0,1].
 *
 *	I extend this by applying only to the set of requests that all
 *	share the same, highest priority level.
 */
d51 2
a52 2
#ifndef	_RF__RF_CVSCAN_H_
#define	_RF__RF_CVSCAN_H_
d59 1
a59 1
} RF_CvscanArmDir_t;
d62 22
a83 19
	long			 range_for_avg;		/* CVSCAN param N */
	long			 change_penalty;	/* CVSCAN param R */
	RF_CvscanArmDir_t	 direction;
	RF_SectorNum_t		 cur_block;
	int			 nxt_priority;
	RF_DiskQueueData_t	*left;
	int			 left_cnt;
	RF_DiskQueueData_t	*right;
	int			 right_cnt;
	RF_DiskQueueData_t	*burner;
} RF_CvscanHeader_t;

int   rf_CvscanConfigure(void);
void *rf_CvscanCreate(RF_SectorCount_t, RF_AllocListElem_t *,
	RF_ShutdownList_t **);
void  rf_CvscanEnqueue(void *, RF_DiskQueueData_t *, int);
RF_DiskQueueData_t *rf_CvscanDequeue(void *);
RF_DiskQueueData_t *rf_CvscanPeek(void *);
int   rf_CvscanPromote(void *, RF_StripeNum_t, RF_ReconUnitNum_t);
d85 1
a85 1
#endif	/* !_RF__RF_CVSCAN_H_ */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_cvscan.h,v 1.1 1998/11/13 04:20:27 oster Exp $	*/
/*	$NetBSD: rf_cvscan.h,v 1.1 1998/11/13 04:20:27 oster Exp $	*/
a50 14
/* :  
 * Log: rf_cvscan.h,v 
 * Revision 1.3  1996/06/07 22:26:27  jimz
 * type-ify which_ru (RF_ReconUnitNum_t)
 *
 * Revision 1.2  1996/06/07  21:33:04  jimz
 * begin using consistent types for sector numbers,
 * stripe numbers, row+col numbers, recon unit numbers
 *
 * Revision 1.1  1996/06/05  19:17:40  jimz
 * Initial revision
 *
 */

d57 3
a59 3
  rf_cvscan_LEFT,
  rf_cvscan_RIGHT
} RF_CvscanArmDir_t;
d62 17
a78 16
	long		range_for_avg;	/* CVSCAN param N */
	long		change_penalty;	/* CVSCAN param R */
	RF_CvscanArmDir_t	direction;
	RF_SectorNum_t		cur_block;
	int		nxt_priority;
	RF_DiskQueueData_t	*left;
	int		left_cnt;
	RF_DiskQueueData_t	*right;
	int		right_cnt;
	RF_DiskQueueData_t	*burner;
} RF_CvscanHeader_t;

int rf_CvscanConfigure(void);
void *rf_CvscanCreate(RF_SectorCount_t sect_per_disk,
	RF_AllocListElem_t *cl_list, RF_ShutdownList_t **listp);
void rf_CvscanEnqueue(void *qptr, RF_DiskQueueData_t *req, int priority);
d81 3
a83 2
int rf_CvscanPromote(void *qptr, RF_StripeNum_t parityStripeID,
	RF_ReconUnitNum_t which_ru);
d85 1
a85 1
#endif /* !_RF__RF_CVSCAN_H_ */
@

