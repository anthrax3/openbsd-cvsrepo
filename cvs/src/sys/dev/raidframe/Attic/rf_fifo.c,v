head	1.7;
access;
symbols
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.38
	OPENBSD_5_0:1.6.0.36
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.34
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.32
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.28
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.30
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.26
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.24
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.22
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.20
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.18
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.16
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.14
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.12
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.10
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.8
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.5.0.12
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.10
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.8
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.2
	SMP_BASE:1.4
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.6;

1.6
date	2002.12.16.07.01.04;	author tdeval;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.08.16.07.41;	author peter;	state Exp;
branches
	1.5.8.1;
next	1.4;

1.4
date	2000.01.11.18.02.22;	author peter;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	99.08.04.13.10.54;	author peter;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.02.46;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.29.22;	author niklas;	state Exp;
branches;
next	;

1.4.2.1
date	2001.05.14.22.26.11;	author niklas;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2003.03.28.00.38.28;	author niklas;	state Exp;
branches;
next	;

1.5.8.1
date	2003.05.19.22.21.52;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_fifo.c,v 1.6 2002/12/16 07:01:04 tdeval Exp $	*/
/*	$NetBSD: rf_fifo.c,v 1.5 2000/03/04 03:27:13 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/***************************************************
 *
 * rf_fifo.c --  prioritized fifo queue code.
 * There are only two priority levels: hi and lo.
 *
 * Aug 4, 1994, adapted from raidSim version (MCH)
 *
 ***************************************************/

#include "rf_types.h"
#include "rf_alloclist.h"
#include "rf_stripelocks.h"
#include "rf_layout.h"
#include "rf_diskqueue.h"
#include "rf_fifo.h"
#include "rf_debugMem.h"
#include "rf_general.h"
#include "rf_options.h"
#include "rf_raid.h"
#include "rf_types.h"

/* Just malloc a header, zero it (via calloc), and return it. */
/*ARGSUSED*/
void *
rf_FifoCreate(RF_SectorCount_t sectPerDisk, RF_AllocListElem_t *clList,
    RF_ShutdownList_t **listp)
{
	RF_FifoHeader_t *q;

	RF_CallocAndAdd(q, 1, sizeof(RF_FifoHeader_t), (RF_FifoHeader_t *),
	    clList);
	q->hq_count = q->lq_count = 0;
	return ((void *) q);
}

void
rf_FifoEnqueue(void *q_in, RF_DiskQueueData_t *elem, int priority)
{
	RF_FifoHeader_t *q = (RF_FifoHeader_t *) q_in;

	RF_ASSERT(priority == RF_IO_NORMAL_PRIORITY ||
	    priority == RF_IO_LOW_PRIORITY);

	elem->next = NULL;
	if (priority == RF_IO_NORMAL_PRIORITY) {
		if (!q->hq_tail) {
			RF_ASSERT(q->hq_count == 0 && q->hq_head == NULL);
			q->hq_head = q->hq_tail = elem;
		} else {
			RF_ASSERT(q->hq_count != 0 && q->hq_head != NULL);
			q->hq_tail->next = elem;
			q->hq_tail = elem;
		}
		q->hq_count++;
	} else {
		RF_ASSERT(elem->next == NULL);
		if (rf_fifoDebug) {
			printf("raid%d: fifo: ENQ lopri\n",
			    elem->raidPtr->raidid);
		}
		if (!q->lq_tail) {
			RF_ASSERT(q->lq_count == 0 && q->lq_head == NULL);
			q->lq_head = q->lq_tail = elem;
		} else {
			RF_ASSERT(q->lq_count != 0 && q->lq_head != NULL);
			q->lq_tail->next = elem;
			q->lq_tail = elem;
		}
		q->lq_count++;
	}
	if ((q->hq_count + q->lq_count) != elem->queue->queueLength) {
		printf("Queue lengths differ ! : %d %d %d\n",
		    q->hq_count, q->lq_count, (int) elem->queue->queueLength);
		printf("%d %d %d %d\n",
		    (int) elem->queue->numOutstanding,
		    (int) elem->queue->maxOutstanding,
		    (int) elem->queue->row,
		    (int) elem->queue->col);
	}
	RF_ASSERT((q->hq_count + q->lq_count) == elem->queue->queueLength);
}

RF_DiskQueueData_t *
rf_FifoDequeue(void *q_in)
{
	RF_FifoHeader_t *q = (RF_FifoHeader_t *) q_in;
	RF_DiskQueueData_t *nd;

	RF_ASSERT(q);
	if (q->hq_head) {
		RF_ASSERT(q->hq_count != 0 && q->hq_tail != NULL);
		nd = q->hq_head;
		q->hq_head = q->hq_head->next;
		if (!q->hq_head)
			q->hq_tail = NULL;
		nd->next = NULL;
		q->hq_count--;
	} else
		if (q->lq_head) {
			RF_ASSERT(q->lq_count != 0 && q->lq_tail != NULL);
			nd = q->lq_head;
			q->lq_head = q->lq_head->next;
			if (!q->lq_head)
				q->lq_tail = NULL;
			nd->next = NULL;
			q->lq_count--;
			if (rf_fifoDebug) {
				printf("raid%d: fifo: DEQ lopri %lx\n",
				    nd->raidPtr->raidid, (long) nd);
			}
		} else {
			RF_ASSERT(q->hq_count == 0 && q->lq_count == 0 &&
			    q->hq_tail == NULL && q->lq_tail == NULL);
			nd = NULL;
		}
	return (nd);
}

/*
 * Return ptr to item at head of queue. Used to examine request
 * info without actually dequeueing the request.
 */
RF_DiskQueueData_t *
rf_FifoPeek(void *q_in)
{
	RF_DiskQueueData_t *headElement = NULL;
	RF_FifoHeader_t *q = (RF_FifoHeader_t *) q_in;

	RF_ASSERT(q);
	if (q->hq_head)
		headElement = q->hq_head;
	else
		if (q->lq_head)
			headElement = q->lq_head;
	return (headElement);
}

/*
 * We sometimes need to promote a low priority access to a regular priority
 * access. Currently, this is only used when the user wants to write a stripe
 * that is currently under reconstruction.
 * This routine will promote all accesses tagged with the indicated
 * parityStripeID from the low priority queue to the end of the normal
 * priority queue.
 * We assume the queue is locked upon entry.
 */
int
rf_FifoPromote(void *q_in, RF_StripeNum_t parityStripeID,
    RF_ReconUnitNum_t which_ru)
{
	RF_FifoHeader_t *q = (RF_FifoHeader_t *) q_in;
	/* lp = lo-pri queue pointer, pt = trailer */
	RF_DiskQueueData_t *lp = q->lq_head, *pt = NULL;
	int retval = 0;

	while (lp) {

		/*
		 * Search for the indicated parity stripe in the low-pri queue.
		 */
		if (lp->parityStripeID == parityStripeID &&
		    lp->which_ru == which_ru) {
			/* printf("FifoPromote:  promoting access for psid
			 * %ld\n", parityStripeID); */
			if (pt)
				/* Delete an entry other than the first. */
				pt->next = lp->next;
			else
				/* Delete the head entry. */
				q->lq_head = lp->next;

			if (!q->lq_head)
				/* We deleted the only entry. */
				q->lq_tail = NULL;
			else
				if (lp == q->lq_tail)
					/* We deleted the tail entry. */
					q->lq_tail = pt;

			lp->next = NULL;
			q->lq_count--;

			if (q->hq_tail) {
				q->hq_tail->next = lp;
				q->hq_tail = lp;
			}
			 /* Append to hi-priority queue. */
			else {
				q->hq_head = q->hq_tail = lp;
			}
			q->hq_count++;

			/* Deal with this later, if ever. */
			/* UpdateShortestSeekFinishTimeForced(lp->requestPtr,
			 * lp->diskState); */

			/* Reset low-pri pointer and continue. */
			lp = (pt) ? pt->next : q->lq_head;
			retval++;

		} else {
			pt = lp;
			lp = lp->next;
		}
	}

	/*
	 * Sanity check. Delete this if you ever put more than one entry in
	 * the low-pri queue.
	 */
	RF_ASSERT(retval == 0 || retval == 1);
	return (retval);
}
@


1.6
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_fifo.c,v 1.5 2000/08/08 16:07:41 peter Exp $	*/
@


1.5
log
@sync RAIDframe with Gre Oster's work for NetBSD.

This update incorporates changes since January 2000.

RAID1 and RAID5 tested for functionality matching the 2.7 code. A
number of bug fixes (including stopping a parity rebuild when
unconfiguring) have been included. See Greg's RAIDframe info page:

	http://www.cs.usask.ca/staff/oster/raid.html

The RAID_AUTOCONFIG feature set does *NOT* yet work. These features
require more work throughout the boot system and as such are a big
task.

IMPORTANT: As with anything that is this near live data on your
systems, please test carefully with existing configurations before
deploying in a live system.  Feedback via sendbug or mail direct
to peter@@wonderland.org is appreciated.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_fifo.c,v 1.4 2000/01/11 18:02:22 peter Exp $	*/
d3 1
d52 1
a52 1
/* just malloc a header, zero it (via calloc), and return it */
d54 3
a56 5
void   *
rf_FifoCreate(sectPerDisk, clList, listp)
	RF_SectorCount_t sectPerDisk;
	RF_AllocListElem_t *clList;
	RF_ShutdownList_t **listp;
d60 2
a61 1
	RF_CallocAndAdd(q, 1, sizeof(RF_FifoHeader_t), (RF_FifoHeader_t *), clList);
d66 2
a67 5
void 
rf_FifoEnqueue(q_in, elem, priority)
	void   *q_in;
	RF_DiskQueueData_t *elem;
	int     priority;
d71 2
a72 1
	RF_ASSERT(priority == RF_IO_NORMAL_PRIORITY || priority == RF_IO_LOW_PRIORITY);
d88 2
a89 2
			printf("raid%d: fifo: ENQ lopri\n", 
			       elem->raidPtr->raidid);
d102 1
a102 1
		printf("Queue lengths differ!: %d %d %d\n",
d114 1
a114 2
rf_FifoDequeue(q_in)
	void   *q_in;
d138 2
a139 2
				printf("raid%d: fifo: DEQ lopri %lx\n", 
				       nd->raidPtr->raidid, (long) nd);
d142 2
a143 1
			RF_ASSERT(q->hq_count == 0 && q->lq_count == 0 && q->hq_tail == NULL && q->lq_tail == NULL);
d149 2
a150 1
/* Return ptr to item at head of queue.  Used to examine request
d167 8
a174 5
/* We sometimes need to promote a low priority access to a regular priority access.
 * Currently, this is only used when the user wants to write a stripe which is currently
 * under reconstruction.
 * This routine will promote all accesses tagged with the indicated parityStripeID from
 * the low priority queue to the end of the normal priority queue.
d177 3
a179 5
int 
rf_FifoPromote(q_in, parityStripeID, which_ru)
	void   *q_in;
	RF_StripeNum_t parityStripeID;
	RF_ReconUnitNum_t which_ru;
d182 3
a184 3
	RF_DiskQueueData_t *lp = q->lq_head, *pt = NULL;	/* lp = lo-pri queue
								 * pointer, pt = trailer */
	int     retval = 0;
d188 5
a192 2
		/* search for the indicated parity stripe in the low-pri queue */
		if (lp->parityStripeID == parityStripeID && lp->which_ru == which_ru) {
d194 1
a194 1
			 * %ld\n",parityStripeID); */
d196 2
a197 2
				pt->next = lp->next;	/* delete an entry other
							 * than the first */
d199 2
a200 1
				q->lq_head = lp->next;	/* delete the head entry */
d203 2
a204 2
				q->lq_tail = NULL;	/* we deleted the only
							 * entry */
d207 2
a208 2
					q->lq_tail = pt;	/* we deleted the tail
								 * entry */
d217 1
a217 1
			 /* append to hi-priority queue */ 
d223 1
d225 1
a225 1
			 * lp->diskState); *//* deal with this later, if ever */
d227 2
a228 2
			lp = (pt) ? pt->next : q->lq_head;	/* reset low-pri pointer
								 * and continue */
d237 4
a240 2
	/* sanity check.  delete this if you ever put more than one entry in
	 * the low-pri queue */
@


1.5.8.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d51 1
a51 1
/* Just malloc a header, zero it (via calloc), and return it. */
d53 5
a57 3
void *
rf_FifoCreate(RF_SectorCount_t sectPerDisk, RF_AllocListElem_t *clList,
    RF_ShutdownList_t **listp)
d61 1
a61 2
	RF_CallocAndAdd(q, 1, sizeof(RF_FifoHeader_t), (RF_FifoHeader_t *),
	    clList);
d66 5
a70 2
void
rf_FifoEnqueue(void *q_in, RF_DiskQueueData_t *elem, int priority)
d74 1
a74 2
	RF_ASSERT(priority == RF_IO_NORMAL_PRIORITY ||
	    priority == RF_IO_LOW_PRIORITY);
d90 2
a91 2
			printf("raid%d: fifo: ENQ lopri\n",
			    elem->raidPtr->raidid);
d104 1
a104 1
		printf("Queue lengths differ ! : %d %d %d\n",
d116 2
a117 1
rf_FifoDequeue(void *q_in)
d141 2
a142 2
				printf("raid%d: fifo: DEQ lopri %lx\n",
				    nd->raidPtr->raidid, (long) nd);
d145 1
a145 2
			RF_ASSERT(q->hq_count == 0 && q->lq_count == 0 &&
			    q->hq_tail == NULL && q->lq_tail == NULL);
d151 1
a151 2
/*
 * Return ptr to item at head of queue. Used to examine request
d168 5
a172 8

/*
 * We sometimes need to promote a low priority access to a regular priority
 * access. Currently, this is only used when the user wants to write a stripe
 * that is currently under reconstruction.
 * This routine will promote all accesses tagged with the indicated
 * parityStripeID from the low priority queue to the end of the normal
 * priority queue.
d175 5
a179 3
int
rf_FifoPromote(void *q_in, RF_StripeNum_t parityStripeID,
    RF_ReconUnitNum_t which_ru)
d182 3
a184 3
	/* lp = lo-pri queue pointer, pt = trailer */
	RF_DiskQueueData_t *lp = q->lq_head, *pt = NULL;
	int retval = 0;
d188 2
a189 5
		/*
		 * Search for the indicated parity stripe in the low-pri queue.
		 */
		if (lp->parityStripeID == parityStripeID &&
		    lp->which_ru == which_ru) {
d191 1
a191 1
			 * %ld\n", parityStripeID); */
d193 2
a194 2
				/* Delete an entry other than the first. */
				pt->next = lp->next;
d196 1
a196 2
				/* Delete the head entry. */
				q->lq_head = lp->next;
d199 2
a200 2
				/* We deleted the only entry. */
				q->lq_tail = NULL;
d203 2
a204 2
					/* We deleted the tail entry. */
					q->lq_tail = pt;
d213 1
a213 1
			 /* Append to hi-priority queue. */
a218 1
			/* Deal with this later, if ever. */
d220 1
a220 1
			 * lp->diskState); */
d222 2
a223 2
			/* Reset low-pri pointer and continue. */
			lp = (pt) ? pt->next : q->lq_head;
d232 2
a233 4
	/*
	 * Sanity check. Delete this if you ever put more than one entry in
	 * the low-pri queue.
	 */
@


1.4
log
@sync with NetBSD

- removed threadid stuff
- removed unused files
- general tidyup
- you can no longer configure the same unit twice (without
de-configuring first of course).

Again, this has only been tested locally on IDE disks. Further testing
and feedback would be appreciated.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_fifo.c,v 1.3 1999/08/04 13:10:54 peter Exp $	*/
/*	$NetBSD: rf_fifo.c,v 1.4 2000/01/08 23:45:05 oster Exp $	*/
a149 86
/* This never gets used!! No loss (I hope) if we don't include it... GO */
#if !defined(__NetBSD__) && !defined(__OpenBSD__) && !defined(_KERNEL)

static RF_DiskQueueData_t *
n_in_q(headp, tailp, countp, n, deq)
	RF_DiskQueueData_t **headp;
	RF_DiskQueueData_t **tailp;
	int    *countp;
	int     n;
	int     deq;
{
	RF_DiskQueueData_t *r, *s;
	int     i;

	for (s = NULL, i = n, r = *headp; r; s = r, r = r->next) {
		if (i == 0)
			break;
		i--;
	}
	RF_ASSERT(r != NULL);
	if (deq == 0)
		return (r);
	if (s) {
		s->next = r->next;
	} else {
		*headp = r->next;
	}
	if (*tailp == r)
		*tailp = s;
	(*countp)--;
	return (r);
}
#endif

#if !defined(_KERNEL) && RF_INCLUDE_QUEUE_RANDOM > 0
RF_DiskQueueData_t *
rf_RandomPeek(q_in)
	void   *q_in;
{
	RF_FifoHeader_t *q = (RF_FifoHeader_t *) q_in;
	RF_DiskQueueData_t *req;
	int     n;

	if (q->hq_head) {
		n = q->rval % q->hq_count;
		req = n_in_q(&q->hq_head, &q->hq_tail, &q->hq_count, n, 0);
	} else {
		RF_ASSERT(q->hq_count == 0);
		if (q->lq_head == NULL) {
			RF_ASSERT(q->lq_count == 0);
			return (NULL);
		}
		n = q->rval % q->lq_count;
		req = n_in_q(&q->lq_head, &q->lq_tail, &q->lq_count, n, 0);
	}
	RF_ASSERT((q->hq_count + q->lq_count) == req->queue->queueLength);
	RF_ASSERT(req != NULL);
	return (req);
}

RF_DiskQueueData_t *
rf_RandomDequeue(q_in)
	void   *q_in;
{
	RF_FifoHeader_t *q = (RF_FifoHeader_t *) q_in;
	RF_DiskQueueData_t *req;
	int     n;

	if (q->hq_head) {
		n = q->rval % q->hq_count;
		q->rval = (long) RF_STATIC_RANDOM();
		req = n_in_q(&q->hq_head, &q->hq_tail, &q->hq_count, n, 1);
	} else {
		RF_ASSERT(q->hq_count == 0);
		if (q->lq_head == NULL) {
			RF_ASSERT(q->lq_count == 0);
			return (NULL);
		}
		n = q->rval % q->lq_count;
		q->rval = (long) RF_STATIC_RANDOM();
		req = n_in_q(&q->lq_head, &q->lq_tail, &q->lq_count, n, 1);
	}
	RF_ASSERT((q->hq_count + q->lq_count) == (req->queue->queueLength - 1));
	return (req);
}
#endif				/* !_KERNEL && RF_INCLUDE_QUEUE_RANDOM > 0 */
@


1.4.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_fifo.c,v 1.5 2000/08/08 16:07:41 peter Exp $	*/
/*	$NetBSD: rf_fifo.c,v 1.5 2000/03/04 03:27:13 oster Exp $	*/
d150 86
@


1.4.2.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d51 1
a51 1
/* Just malloc a header, zero it (via calloc), and return it. */
d53 5
a57 3
void *
rf_FifoCreate(RF_SectorCount_t sectPerDisk, RF_AllocListElem_t *clList,
    RF_ShutdownList_t **listp)
d61 1
a61 2
	RF_CallocAndAdd(q, 1, sizeof(RF_FifoHeader_t), (RF_FifoHeader_t *),
	    clList);
d66 5
a70 2
void
rf_FifoEnqueue(void *q_in, RF_DiskQueueData_t *elem, int priority)
d74 1
a74 2
	RF_ASSERT(priority == RF_IO_NORMAL_PRIORITY ||
	    priority == RF_IO_LOW_PRIORITY);
d90 2
a91 2
			printf("raid%d: fifo: ENQ lopri\n",
			    elem->raidPtr->raidid);
d104 1
a104 1
		printf("Queue lengths differ ! : %d %d %d\n",
d116 2
a117 1
rf_FifoDequeue(void *q_in)
d141 2
a142 2
				printf("raid%d: fifo: DEQ lopri %lx\n",
				    nd->raidPtr->raidid, (long) nd);
d145 1
a145 2
			RF_ASSERT(q->hq_count == 0 && q->lq_count == 0 &&
			    q->hq_tail == NULL && q->lq_tail == NULL);
d151 1
a151 2
/*
 * Return ptr to item at head of queue. Used to examine request
d168 5
a172 8

/*
 * We sometimes need to promote a low priority access to a regular priority
 * access. Currently, this is only used when the user wants to write a stripe
 * that is currently under reconstruction.
 * This routine will promote all accesses tagged with the indicated
 * parityStripeID from the low priority queue to the end of the normal
 * priority queue.
d175 5
a179 3
int
rf_FifoPromote(void *q_in, RF_StripeNum_t parityStripeID,
    RF_ReconUnitNum_t which_ru)
d182 3
a184 3
	/* lp = lo-pri queue pointer, pt = trailer */
	RF_DiskQueueData_t *lp = q->lq_head, *pt = NULL;
	int retval = 0;
d188 2
a189 5
		/*
		 * Search for the indicated parity stripe in the low-pri queue.
		 */
		if (lp->parityStripeID == parityStripeID &&
		    lp->which_ru == which_ru) {
d191 1
a191 1
			 * %ld\n", parityStripeID); */
d193 2
a194 2
				/* Delete an entry other than the first. */
				pt->next = lp->next;
d196 1
a196 2
				/* Delete the head entry. */
				q->lq_head = lp->next;
d199 2
a200 2
				/* We deleted the only entry. */
				q->lq_tail = NULL;
d203 2
a204 2
					/* We deleted the tail entry. */
					q->lq_tail = pt;
d213 1
a213 1
			 /* Append to hi-priority queue. */
a218 1
			/* Deal with this later, if ever. */
d220 1
a220 1
			 * lp->diskState); */
d222 2
a223 2
			/* Reset low-pri pointer and continue. */
			lp = (pt) ? pt->next : q->lq_head;
d232 2
a233 4
	/*
	 * Sanity check. Delete this if you ever put more than one entry in
	 * the low-pri queue.
	 */
@


1.3
log
@* remove redundant rf_ccmn.h

* remove init call to rf_ConfigureEtimer() and rf_sys.c in which it is the
  only function. update conf/files to reflect this.

* update sources to make sure _KERNEL is used not KERNEL

* change rf_etimer.h to protect macros an include of sys/kernel.h with
  a check for _KERNEL - let raidctl compile again.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_fifo.c,v 1.2 1999/02/16 00:02:46 niklas Exp $	*/
/*	$NetBSD: rf_fifo.c,v 1.3 1999/02/05 00:06:11 oster Exp $	*/
a46 1
#include "rf_threadid.h"
d48 2
d90 2
a91 3
			int     tid;
			rf_get_threadid(tid);
			printf("[%d] fifo: ENQ lopri\n", tid);
d141 2
a142 3
				int     tid;
				rf_get_threadid(tid);
				printf("[%d] fifo: DEQ lopri %lx\n", tid, (long) nd);
a320 5
	if (rf_fifoDebug) {
		int     tid;
		rf_get_threadid(tid);
		printf("[%d] fifo: promote %d\n", tid, retval);
	}
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_fifo.c,v 1.1 1999/01/11 14:29:22 niklas Exp $	*/
d185 1
a185 1
#if !defined(KERNEL) && RF_INCLUDE_QUEUE_RANDOM > 0
d236 1
a236 1
#endif				/* !KERNEL && RF_INCLUDE_QUEUE_RANDOM > 0 */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_fifo.c,v 1.1 1998/11/13 04:20:29 oster Exp $	*/
/*	$NetBSD: rf_fifo.c,v 1.1 1998/11/13 04:20:29 oster Exp $	*/
d32 1
a32 1
 * rf_fifo.c --  prioritized fifo queue code.  
a38 62
/*
 * :  
 * Log: rf_fifo.c,v 
 * Revision 1.20  1996/06/18 20:53:11  jimz
 * fix up disk queueing (remove configure routine,
 * add shutdown list arg to create routines)
 *
 * Revision 1.19  1996/06/14  00:08:21  jimz
 * make happier in all environments
 *
 * Revision 1.18  1996/06/13  20:41:24  jimz
 * add random queueing
 *
 * Revision 1.17  1996/06/09  02:36:46  jimz
 * lots of little crufty cleanup- fixup whitespace
 * issues, comment #ifdefs, improve typing in some
 * places (esp size-related)
 *
 * Revision 1.16  1996/06/07  22:26:27  jimz
 * type-ify which_ru (RF_ReconUnitNum_t)
 *
 * Revision 1.15  1996/06/07  21:33:04  jimz
 * begin using consistent types for sector numbers,
 * stripe numbers, row+col numbers, recon unit numbers
 *
 * Revision 1.14  1996/06/06  01:15:02  jimz
 * added debugging
 *
 * Revision 1.13  1996/05/30  23:22:16  jimz
 * bugfixes of serialization, timing problems
 * more cleanup
 *
 * Revision 1.12  1996/05/30  11:29:41  jimz
 * Numerous bug fixes. Stripe lock release code disagreed with the taking code
 * about when stripes should be locked (I made it consistent: no parity, no lock)
 * There was a lot of extra serialization of I/Os which I've removed- a lot of
 * it was to calculate values for the cache code, which is no longer with us.
 * More types, function, macro cleanup. Added code to properly quiesce the array
 * on shutdown. Made a lot of stuff array-specific which was (bogusly) general
 * before. Fixed memory allocation, freeing bugs.
 *
 * Revision 1.11  1996/05/27  18:56:37  jimz
 * more code cleanup
 * better typing
 * compiles in all 3 environments
 *
 * Revision 1.10  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.9  1995/12/12  18:10:06  jimz
 * MIN -> RF_MIN, MAX -> RF_MAX, ASSERT -> RF_ASSERT
 * fix 80-column brain damage in comments
 *
 * Revision 1.8  1995/12/01  18:22:15  root
 * added copyright info
 *
 * Revision 1.7  1995/11/07  15:32:16  wvcii
 * added function FifoPeek()
 *
 */

a49 5
#if !defined(KERNEL) && RF_INCLUDE_QUEUE_RANDOM > 0
#include "rf_randmacros.h"
RF_DECLARE_STATIC_RANDOM
#endif /* !KERNEL && RF_INCLUDE_QUEUE_RANDOM > 0 */

d52 5
a56 4
void *rf_FifoCreate(sectPerDisk, clList, listp)
  RF_SectorCount_t      sectPerDisk;
  RF_AllocListElem_t   *clList;
  RF_ShutdownList_t   **listp;
d58 1
a58 1
  RF_FifoHeader_t *q;
d60 3
a62 9
#if !defined(KERNEL) && RF_INCLUDE_QUEUE_RANDOM > 0
  RF_INIT_STATIC_RANDOM(1);
#endif /* !KERNEL && RF_INCLUDE_QUEUE_RANDOM > 0 */
  RF_CallocAndAdd(q, 1, sizeof(RF_FifoHeader_t), (RF_FifoHeader_t *), clList);
  q->hq_count = q->lq_count = 0;
#if !defined(KERNEL) && RF_INCLUDE_QUEUE_RANDOM > 0
  q->rval = (long)RF_STATIC_RANDOM();
#endif /* !KERNEL && RF_INCLUDE_QUEUE_RANDOM > 0 */
  return((void *)q);
d65 5
a69 4
void rf_FifoEnqueue(q_in, elem, priority)
  void                *q_in;
  RF_DiskQueueData_t  *elem;
  int                  priority;
d71 1
a71 1
  RF_FifoHeader_t *q = (RF_FifoHeader_t *)q_in;
d73 1
a73 1
  RF_ASSERT(priority == RF_IO_NORMAL_PRIORITY || priority == RF_IO_LOW_PRIORITY);
d75 38
a112 39
  elem->next = NULL;
  if (priority == RF_IO_NORMAL_PRIORITY) {
    if (!q->hq_tail) {
      RF_ASSERT(q->hq_count == 0 && q->hq_head == NULL);
      q->hq_head = q->hq_tail = elem;
    } else {
      RF_ASSERT(q->hq_count != 0 && q->hq_head != NULL);
      q->hq_tail->next = elem;
      q->hq_tail = elem;
    }
    q->hq_count++;
  }
  else {
    RF_ASSERT(elem->next == NULL);
    if (rf_fifoDebug) {
      int tid;
      rf_get_threadid(tid);
      printf("[%d] fifo: ENQ lopri\n", tid);
    }
    if (!q->lq_tail) {
      RF_ASSERT(q->lq_count == 0 && q->lq_head == NULL);
      q->lq_head = q->lq_tail = elem;
    } else {
      RF_ASSERT(q->lq_count != 0 && q->lq_head != NULL);
      q->lq_tail->next = elem;
      q->lq_tail = elem;
    }
    q->lq_count++;
  }
  if ((q->hq_count + q->lq_count)!= elem->queue->queueLength) {
	  printf("Queue lengths differ!: %d %d %d\n",
		 q->hq_count, q->lq_count, (int)elem->queue->queueLength);
	  printf("%d %d %d %d\n",
		 (int)elem->queue->numOutstanding,
		 (int)elem->queue->maxOutstanding,
		 (int)elem->queue->row,
		 (int)elem->queue->col);
  }
  RF_ASSERT((q->hq_count + q->lq_count) == elem->queue->queueLength);
d115 3
a117 2
RF_DiskQueueData_t *rf_FifoDequeue(q_in)
  void  *q_in;
d119 2
a120 2
  RF_FifoHeader_t *q = (RF_FifoHeader_t *) q_in;
  RF_DiskQueueData_t *nd;
d122 28
a149 23
  RF_ASSERT(q);
  if (q->hq_head) {
    RF_ASSERT(q->hq_count != 0 && q->hq_tail != NULL);
    nd = q->hq_head; q->hq_head = q->hq_head->next;
    if (!q->hq_head) q->hq_tail = NULL;
    nd->next = NULL;
    q->hq_count--;
  } else if (q->lq_head) {
    RF_ASSERT(q->lq_count != 0 && q->lq_tail != NULL);
    nd = q->lq_head; q->lq_head = q->lq_head->next;
    if (!q->lq_head) q->lq_tail = NULL;
    nd->next = NULL;
    q->lq_count--;
    if (rf_fifoDebug) {
      int tid;
      rf_get_threadid(tid);
      printf("[%d] fifo: DEQ lopri %lx\n", tid, (long)nd);
    }
  } else {
    RF_ASSERT(q->hq_count == 0 && q->lq_count == 0 && q->hq_tail == NULL && q->lq_tail == NULL);
    nd = NULL;
  }
  return(nd);
a150 1

d154 7
a160 6
static RF_DiskQueueData_t *n_in_q(headp, tailp, countp, n, deq)
  RF_DiskQueueData_t  **headp;
  RF_DiskQueueData_t  **tailp;
  int                  *countp;
  int                   n;
  int                   deq;
d162 2
a163 2
  RF_DiskQueueData_t *r, *s;
  int i;
d165 17
a181 18
  for(s=NULL,i=n,r=*headp;r;s=r,r=r->next) {
    if (i == 0)
      break;
    i--;
  }
  RF_ASSERT(r != NULL);
  if (deq == 0)
    return(r);
  if (s) {
    s->next = r->next;
  }
  else {
    *headp = r->next;
  }
  if (*tailp == r)
    *tailp = s;
  (*countp)--;
  return(r);
d186 3
a188 2
RF_DiskQueueData_t *rf_RandomPeek(q_in)
  void  *q_in;
d190 19
a208 20
  RF_FifoHeader_t *q = (RF_FifoHeader_t *) q_in;
  RF_DiskQueueData_t *req;
  int n;

  if (q->hq_head) {
    n = q->rval % q->hq_count;
    req = n_in_q(&q->hq_head, &q->hq_tail, &q->hq_count, n, 0);
  }
  else {
    RF_ASSERT(q->hq_count == 0);
    if (q->lq_head == NULL) {
      RF_ASSERT(q->lq_count == 0);
      return(NULL);
    }
    n = q->rval % q->lq_count;
    req = n_in_q(&q->lq_head, &q->lq_tail, &q->lq_count, n, 0);
  }
  RF_ASSERT((q->hq_count + q->lq_count) == req->queue->queueLength);
  RF_ASSERT(req != NULL);
  return(req);
d211 3
a213 2
RF_DiskQueueData_t *rf_RandomDequeue(q_in)
  void  *q_in;
d215 20
a234 21
  RF_FifoHeader_t *q = (RF_FifoHeader_t *) q_in;
  RF_DiskQueueData_t *req;
  int n;

  if (q->hq_head) {
    n = q->rval % q->hq_count;
    q->rval = (long)RF_STATIC_RANDOM();
    req = n_in_q(&q->hq_head, &q->hq_tail, &q->hq_count, n, 1);
  }
  else {
    RF_ASSERT(q->hq_count == 0);
    if (q->lq_head == NULL) {
      RF_ASSERT(q->lq_count == 0);
      return(NULL);
    }
    n = q->rval % q->lq_count;
    q->rval = (long)RF_STATIC_RANDOM();
    req = n_in_q(&q->lq_head, &q->lq_tail, &q->lq_count, n, 1);
  }
  RF_ASSERT((q->hq_count + q->lq_count) == (req->queue->queueLength-1));
  return(req);
d236 1
a236 1
#endif /* !KERNEL && RF_INCLUDE_QUEUE_RANDOM > 0 */
d241 2
a242 1
RF_DiskQueueData_t *rf_FifoPeek(void *q_in)
d244 2
a245 2
  RF_DiskQueueData_t *headElement = NULL;
  RF_FifoHeader_t *q = (RF_FifoHeader_t *) q_in;
d247 7
a253 6
  RF_ASSERT(q);
  if (q->hq_head)
    headElement = q->hq_head;
  else if (q->lq_head)
    headElement = q->lq_head;
  return(headElement);
a254 1

d262 5
a266 4
int rf_FifoPromote(q_in, parityStripeID, which_ru)
  void               *q_in;
  RF_StripeNum_t      parityStripeID;
  RF_ReconUnitNum_t   which_ru;
d268 60
a327 38
  RF_FifoHeader_t *q = (RF_FifoHeader_t *) q_in;
  RF_DiskQueueData_t *lp = q->lq_head, *pt = NULL;  /* lp = lo-pri queue pointer, pt = trailer */
  int retval = 0;

  while (lp) {

    /* search for the indicated parity stripe in the low-pri queue */
    if (lp->parityStripeID == parityStripeID && lp->which_ru == which_ru) {
      /*printf("FifoPromote:  promoting access for psid %ld\n",parityStripeID);*/
      if (pt) pt->next = lp->next;                              /* delete an entry other than the first */
      else q->lq_head = lp->next;                               /* delete the head entry */
      
      if (!q->lq_head) q->lq_tail = NULL;                       /* we deleted the only entry */
      else if (lp == q->lq_tail) q->lq_tail = pt;               /* we deleted the tail entry */
      
      lp->next = NULL;
      q->lq_count--;
      
      if (q->hq_tail) {q->hq_tail->next = lp; q->hq_tail = lp;} /* append to hi-priority queue */
      else {q->hq_head = q->hq_tail = lp;}
      q->hq_count++;

      /*UpdateShortestSeekFinishTimeForced(lp->requestPtr, lp->diskState);*/     /* deal with this later, if ever */

      lp = (pt) ? pt->next : q->lq_head;		       /* reset low-pri pointer and continue */
      retval++;
      
    } else {pt = lp; lp = lp->next;}
  }
  
  /* sanity check.  delete this if you ever put more than one entry in the low-pri queue */
  RF_ASSERT(retval == 0 || retval == 1);
  if (rf_fifoDebug) {
    int tid;
    rf_get_threadid(tid);
    printf("[%d] fifo: promote %d\n", tid, retval);
  }
  return(retval);
@

