head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.06.15.53.59;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.05;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.03.29;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.51;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.29;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.53;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_stripelocks.h,v 1.3 2002/12/16 07:01:05 tdeval Exp $	*/
/*	$NetBSD: rf_stripelocks.h,v 1.3 1999/02/05 00:06:18 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*****************************************************************************
 *
 * stripelocks.h -- Header file for locking stripes.
 *
 * Note that these functions are called from the execution routines of certain
 * DAG Nodes, and so they must be NON-BLOCKING to assure maximum parallelism
 * in the DAG. Accordingly, when a node wants to acquire a lock, it calls
 * AcquireStripeLock, supplying a pointer to a callback function. If the lock
 * is free at the time of the call, 0 is returned, indicating that the lock
 * has been acquired. If the lock is not free, 1 is returned, and a copy of
 * the function pointer and argument are held in the lock table. When the
 * lock becomes free, the callback function is invoked.
 *
 *****************************************************************************/

#ifndef	_RF__RF_STRIPELOCKS_H_
#define	_RF__RF_STRIPELOCKS_H_

#include <sys/buf.h>

#include "rf_types.h"
#include "rf_threadstuff.h"
#include "rf_general.h"

struct RF_LockReqDesc_s {
	RF_IoType_t		  type;		/* Read or write. */
	RF_int64		  start, stop;	/*
						 * Start and end of range to
						 * be locked.
						 */
	RF_int64		  start2, stop2;/*
						 * Start and end of 2nd range
						 * to be locked.
						 */
	void			(*cbFunc) (struct buf *);
						/* Callback function. */
	void			 *cbArg;	/*
						 * Argument to callback
						 * function.
						 */
	RF_LockReqDesc_t	 *next;		/* Next element in chain. */
	RF_LockReqDesc_t	 *templink;	/*
						 * For making short-lived lists
						 * of request descriptors.
						 */
};

#define	RF_ASSERT_VALID_LOCKREQ(_lr_)	do {				\
	RF_ASSERT(RF_IO_IS_R_OR_W((_lr_)->type));			\
} while (0)

struct RF_StripeLockDesc_s {
	RF_StripeNum_t		 stripeID;	/* The stripe ID. */
	RF_LockReqDesc_t	*granted;	/*
						 * Unordered list of granted
						 * requests.
						 */
	RF_LockReqDesc_t	*waitersH;	/* FIFO queue of all waiting
						 * reqs, both read and write
						 * (Head and Tail).
						 */
	RF_LockReqDesc_t	*waitersT;
	int			 nWriters;	/*
						 * Number of writers either
						 * granted or waiting.
						 */
	RF_StripeLockDesc_t	*next;		/*
						 * For hash table collision
						 * resolution.
						 */
};

struct RF_LockTableEntry_s {
	RF_DECLARE_MUTEX	(mutex);	/* Mutex on this hash chain. */
	RF_StripeLockDesc_t	*descList;	/*
						 * Hash chain of lock
						 * descriptors.
						 */
};

/*
 * Initializes a stripe lock descriptor. _defSize is the number of sectors
 * that we lock when there is no parity information in the ASM (e.g. RAID0).
 */

#define RF_INIT_LOCK_REQ_DESC(_lrd, _typ, _cbf, _cba, _asm, _defSize)	\
do {									\
	(_lrd).type    = _typ;						\
	(_lrd).start2  = -1;						\
	(_lrd).stop2   = -1;						\
	if ((_asm)->parityInfo) {					\
		(_lrd).start = (_asm)->parityInfo->startSector;		\
		(_lrd).stop  = (_asm)->parityInfo->startSector +	\
		    (_asm)->parityInfo->numSector-1;			\
		if ((_asm)->parityInfo->next) {				\
			(_lrd).start2  =				\
			    (_asm)->parityInfo->next->startSector;	\
			(_lrd).stop2   =				\
			    (_asm)->parityInfo->next->startSector +	\
			    (_asm)->parityInfo->next->numSector-1;	\
		}							\
	} else {							\
		(_lrd).start = 0;					\
		(_lrd).stop  = (_defSize);				\
	}								\
	(_lrd).templink= NULL;						\
	(_lrd).cbFunc  = (_cbf);					\
	(_lrd).cbArg   = (void *) (_cba);				\
} while (0)

int  rf_ConfigureStripeLockFreeList(RF_ShutdownList_t **);
RF_LockTableEntry_t *rf_MakeLockTable(void);
void rf_ShutdownStripeLocks(RF_LockTableEntry_t *);
int  rf_ConfigureStripeLocks(RF_ShutdownList_t **, RF_Raid_t *, RF_Config_t *);
int  rf_AcquireStripeLock(RF_LockTableEntry_t *, RF_StripeNum_t,
	RF_LockReqDesc_t *);
void rf_ReleaseStripeLock(RF_LockTableEntry_t *, RF_StripeNum_t,
	RF_LockReqDesc_t *);

#endif	/* !_RF__RF_STRIPELOCKS_H_ */
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_stripelocks.h,v 1.2 1999/02/16 00:03:29 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_stripelocks.h,v 1.1 1999/01/11 14:29:51 niklas Exp $	*/
d3 1
d33 1
a33 1
 * stripelocks.h -- header file for locking stripes
d37 2
a38 2
 * in the DAG.  Accordingly, when a node wants to acquire a lock, it calls
 * AcquireStripeLock, supplying a pointer to a callback function.  If the lock
d40 2
a41 2
 * has been acquired.  If the lock is not free, 1 is returned, and a copy of
 * the function pointer and argument are held in the lock table.  When the
d46 2
a47 2
#ifndef _RF__RF_STRIPELOCKS_H_
#define _RF__RF_STRIPELOCKS_H_
d56 20
a75 8
	RF_IoType_t type;	/* read or write */
	RF_int64 start, stop;	/* start and end of range to be locked */
	RF_int64 start2, stop2;	/* start and end of 2nd range to be locked */
	void    (*cbFunc) (struct buf *);	/* callback function */
	void   *cbArg;		/* argument to callback function */
	RF_LockReqDesc_t *next;	/* next element in chain */
	RF_LockReqDesc_t *templink;	/* for making short-lived lists of
					 * request descriptors */
d77 4
a80 3
#define RF_ASSERT_VALID_LOCKREQ(_lr_) { \
	RF_ASSERT(RF_IO_IS_R_OR_W((_lr_)->type)); \
}
d83 18
a100 7
	RF_StripeNum_t stripeID;/* the stripe ID */
	RF_LockReqDesc_t *granted;	/* unordered list of granted requests */
	RF_LockReqDesc_t *waitersH;	/* FIFO queue of all waiting reqs,
					 * both read and write (Head and Tail) */
	RF_LockReqDesc_t *waitersT;
	int     nWriters;	/* number of writers either granted or waiting */
	RF_StripeLockDesc_t *next;	/* for hash table collision resolution */
d104 5
a108 2
	RF_DECLARE_MUTEX(mutex)	/* mutex on this hash chain */
	RF_StripeLockDesc_t *descList;	/* hash chain of lock descriptors */
d110 1
d112 1
a112 1
 * Initializes a stripe lock descriptor.  _defSize is the number of sectors
d116 24
a139 20
#define RF_INIT_LOCK_REQ_DESC(_lrd, _typ, _cbf, _cba, _asm, _defSize)                                           \
  {                                                                                                          \
    (_lrd).type    = _typ;                                                                                   \
    (_lrd).start2  = -1;                                                                                     \
    (_lrd).stop2   = -1;                                                                                     \
    if ((_asm)->parityInfo) {                                                                                \
      (_lrd).start = (_asm)->parityInfo->startSector;                                                        \
      (_lrd).stop  = (_asm)->parityInfo->startSector + (_asm)->parityInfo->numSector-1;                      \
      if ((_asm)->parityInfo->next) {                                                                        \
        (_lrd).start2  = (_asm)->parityInfo->next->startSector;                                              \
        (_lrd).stop2   = (_asm)->parityInfo->next->startSector + (_asm)->parityInfo->next->numSector-1;      \
      }                                                                                                      \
    } else {                                                                                                 \
      (_lrd).start = 0;                                                                                      \
      (_lrd).stop  = (_defSize);                                                                             \
    }													     \
    (_lrd).templink= NULL;                                                                                   \
    (_lrd).cbFunc  = (_cbf);                                                                                 \
    (_lrd).cbArg   = (void *) (_cba);                                                                        \
  }
d141 1
a141 1
int     rf_ConfigureStripeLockFreeList(RF_ShutdownList_t ** listp);
d143 6
a148 10
void    rf_ShutdownStripeLocks(RF_LockTableEntry_t * lockTable);
int 
rf_ConfigureStripeLocks(RF_ShutdownList_t ** listp, RF_Raid_t * raidPtr,
    RF_Config_t * cfgPtr);
int 
rf_AcquireStripeLock(RF_LockTableEntry_t * lockTable,
    RF_StripeNum_t stripeID, RF_LockReqDesc_t * lockReqDesc);
void 
rf_ReleaseStripeLock(RF_LockTableEntry_t * lockTable,
    RF_StripeNum_t stripeID, RF_LockReqDesc_t * lockReqDesc);
d150 1
a150 1
#endif				/* !_RF__RF_STRIPELOCKS_H_ */
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d32 1
a32 1
 * stripelocks.h -- Header file for locking stripes.
d36 2
a37 2
 * in the DAG. Accordingly, when a node wants to acquire a lock, it calls
 * AcquireStripeLock, supplying a pointer to a callback function. If the lock
d39 2
a40 2
 * has been acquired. If the lock is not free, 1 is returned, and a copy of
 * the function pointer and argument are held in the lock table. When the
d45 2
a46 2
#ifndef	_RF__RF_STRIPELOCKS_H_
#define	_RF__RF_STRIPELOCKS_H_
d55 8
a62 20
	RF_IoType_t		  type;		/* Read or write. */
	RF_int64		  start, stop;	/*
						 * Start and end of range to
						 * be locked.
						 */
	RF_int64		  start2, stop2;/*
						 * Start and end of 2nd range
						 * to be locked.
						 */
	void			(*cbFunc) (struct buf *);
						/* Callback function. */
	void			 *cbArg;	/*
						 * Argument to callback
						 * function.
						 */
	RF_LockReqDesc_t	 *next;		/* Next element in chain. */
	RF_LockReqDesc_t	 *templink;	/*
						 * For making short-lived lists
						 * of request descriptors.
						 */
d64 3
a66 4

#define	RF_ASSERT_VALID_LOCKREQ(_lr_)	do {				\
	RF_ASSERT(RF_IO_IS_R_OR_W((_lr_)->type));			\
} while (0)
d69 7
a75 18
	RF_StripeNum_t		 stripeID;	/* The stripe ID. */
	RF_LockReqDesc_t	*granted;	/*
						 * Unordered list of granted
						 * requests.
						 */
	RF_LockReqDesc_t	*waitersH;	/* FIFO queue of all waiting
						 * reqs, both read and write
						 * (Head and Tail).
						 */
	RF_LockReqDesc_t	*waitersT;
	int			 nWriters;	/*
						 * Number of writers either
						 * granted or waiting.
						 */
	RF_StripeLockDesc_t	*next;		/*
						 * For hash table collision
						 * resolution.
						 */
d79 2
a80 5
	RF_DECLARE_MUTEX	(mutex);	/* Mutex on this hash chain. */
	RF_StripeLockDesc_t	*descList;	/*
						 * Hash chain of lock
						 * descriptors.
						 */
a81 1

d83 1
a83 1
 * Initializes a stripe lock descriptor. _defSize is the number of sectors
d87 20
a106 24
#define RF_INIT_LOCK_REQ_DESC(_lrd, _typ, _cbf, _cba, _asm, _defSize)	\
do {									\
	(_lrd).type    = _typ;						\
	(_lrd).start2  = -1;						\
	(_lrd).stop2   = -1;						\
	if ((_asm)->parityInfo) {					\
		(_lrd).start = (_asm)->parityInfo->startSector;		\
		(_lrd).stop  = (_asm)->parityInfo->startSector +	\
		    (_asm)->parityInfo->numSector-1;			\
		if ((_asm)->parityInfo->next) {				\
			(_lrd).start2  =				\
			    (_asm)->parityInfo->next->startSector;	\
			(_lrd).stop2   =				\
			    (_asm)->parityInfo->next->startSector +	\
			    (_asm)->parityInfo->next->numSector-1;	\
		}							\
	} else {							\
		(_lrd).start = 0;					\
		(_lrd).stop  = (_defSize);				\
	}								\
	(_lrd).templink= NULL;						\
	(_lrd).cbFunc  = (_cbf);					\
	(_lrd).cbArg   = (void *) (_cba);				\
} while (0)
d108 1
a108 1
int  rf_ConfigureStripeLockFreeList(RF_ShutdownList_t **);
d110 10
a119 6
void rf_ShutdownStripeLocks(RF_LockTableEntry_t *);
int  rf_ConfigureStripeLocks(RF_ShutdownList_t **, RF_Raid_t *, RF_Config_t *);
int  rf_AcquireStripeLock(RF_LockTableEntry_t *, RF_StripeNum_t,
	RF_LockReqDesc_t *);
void rf_ReleaseStripeLock(RF_LockTableEntry_t *, RF_StripeNum_t,
	RF_LockReqDesc_t *);
d121 1
a121 1
#endif	/* !_RF__RF_STRIPELOCKS_H_ */
@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d32 1
a32 1
 * stripelocks.h -- Header file for locking stripes.
d36 2
a37 2
 * in the DAG. Accordingly, when a node wants to acquire a lock, it calls
 * AcquireStripeLock, supplying a pointer to a callback function. If the lock
d39 2
a40 2
 * has been acquired. If the lock is not free, 1 is returned, and a copy of
 * the function pointer and argument are held in the lock table. When the
d45 2
a46 2
#ifndef	_RF__RF_STRIPELOCKS_H_
#define	_RF__RF_STRIPELOCKS_H_
d55 8
a62 20
	RF_IoType_t		  type;		/* Read or write. */
	RF_int64		  start, stop;	/*
						 * Start and end of range to
						 * be locked.
						 */
	RF_int64		  start2, stop2;/*
						 * Start and end of 2nd range
						 * to be locked.
						 */
	void			(*cbFunc) (struct buf *);
						/* Callback function. */
	void			 *cbArg;	/*
						 * Argument to callback
						 * function.
						 */
	RF_LockReqDesc_t	 *next;		/* Next element in chain. */
	RF_LockReqDesc_t	 *templink;	/*
						 * For making short-lived lists
						 * of request descriptors.
						 */
d64 3
a66 4

#define	RF_ASSERT_VALID_LOCKREQ(_lr_)	do {				\
	RF_ASSERT(RF_IO_IS_R_OR_W((_lr_)->type));			\
} while (0)
d69 7
a75 18
	RF_StripeNum_t		 stripeID;	/* The stripe ID. */
	RF_LockReqDesc_t	*granted;	/*
						 * Unordered list of granted
						 * requests.
						 */
	RF_LockReqDesc_t	*waitersH;	/* FIFO queue of all waiting
						 * reqs, both read and write
						 * (Head and Tail).
						 */
	RF_LockReqDesc_t	*waitersT;
	int			 nWriters;	/*
						 * Number of writers either
						 * granted or waiting.
						 */
	RF_StripeLockDesc_t	*next;		/*
						 * For hash table collision
						 * resolution.
						 */
d79 2
a80 5
	RF_DECLARE_MUTEX	(mutex);	/* Mutex on this hash chain. */
	RF_StripeLockDesc_t	*descList;	/*
						 * Hash chain of lock
						 * descriptors.
						 */
a81 1

d83 1
a83 1
 * Initializes a stripe lock descriptor. _defSize is the number of sectors
d87 20
a106 24
#define RF_INIT_LOCK_REQ_DESC(_lrd, _typ, _cbf, _cba, _asm, _defSize)	\
do {									\
	(_lrd).type    = _typ;						\
	(_lrd).start2  = -1;						\
	(_lrd).stop2   = -1;						\
	if ((_asm)->parityInfo) {					\
		(_lrd).start = (_asm)->parityInfo->startSector;		\
		(_lrd).stop  = (_asm)->parityInfo->startSector +	\
		    (_asm)->parityInfo->numSector-1;			\
		if ((_asm)->parityInfo->next) {				\
			(_lrd).start2  =				\
			    (_asm)->parityInfo->next->startSector;	\
			(_lrd).stop2   =				\
			    (_asm)->parityInfo->next->startSector +	\
			    (_asm)->parityInfo->next->numSector-1;	\
		}							\
	} else {							\
		(_lrd).start = 0;					\
		(_lrd).stop  = (_defSize);				\
	}								\
	(_lrd).templink= NULL;						\
	(_lrd).cbFunc  = (_cbf);					\
	(_lrd).cbArg   = (void *) (_cba);				\
} while (0)
d108 1
a108 1
int  rf_ConfigureStripeLockFreeList(RF_ShutdownList_t **);
d110 10
a119 6
void rf_ShutdownStripeLocks(RF_LockTableEntry_t *);
int  rf_ConfigureStripeLocks(RF_ShutdownList_t **, RF_Raid_t *, RF_Config_t *);
int  rf_AcquireStripeLock(RF_LockTableEntry_t *, RF_StripeNum_t,
	RF_LockReqDesc_t *);
void rf_ReleaseStripeLock(RF_LockTableEntry_t *, RF_StripeNum_t,
	RF_LockReqDesc_t *);
d121 1
a121 1
#endif	/* !_RF__RF_STRIPELOCKS_H_ */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_stripelocks.h,v 1.1 1998/11/13 04:20:34 oster Exp $	*/
/*	$NetBSD: rf_stripelocks.h,v 1.1 1998/11/13 04:20:34 oster Exp $	*/
a29 52
/* :  
 * Log: rf_stripelocks.h,v 
 * Revision 1.22  1996/06/10 11:55:47  jimz
 * Straightened out some per-array/not-per-array distinctions, fixed
 * a couple bugs related to confusion. Added shutdown lists. Removed
 * layout shutdown function (now subsumed by shutdown lists).
 *
 * Revision 1.21  1996/06/07  21:33:04  jimz
 * begin using consistent types for sector numbers,
 * stripe numbers, row+col numbers, recon unit numbers
 *
 * Revision 1.20  1996/06/05  18:06:02  jimz
 * Major code cleanup. The Great Renaming is now done.
 * Better modularity. Better typing. Fixed a bunch of
 * synchronization bugs. Made a lot of global stuff
 * per-desc or per-array. Removed dead code.
 *
 * Revision 1.19  1996/05/30  11:29:41  jimz
 * Numerous bug fixes. Stripe lock release code disagreed with the taking code
 * about when stripes should be locked (I made it consistent: no parity, no lock)
 * There was a lot of extra serialization of I/Os which I've removed- a lot of
 * it was to calculate values for the cache code, which is no longer with us.
 * More types, function, macro cleanup. Added code to properly quiesce the array
 * on shutdown. Made a lot of stuff array-specific which was (bogusly) general
 * before. Fixed memory allocation, freeing bugs.
 *
 * Revision 1.18  1996/05/27  18:56:37  jimz
 * more code cleanup
 * better typing
 * compiles in all 3 environments
 *
 * Revision 1.17  1996/05/24  22:17:04  jimz
 * continue code + namespace cleanup
 * typed a bunch of flags
 *
 * Revision 1.16  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.15  1996/05/23  00:33:23  jimz
 * code cleanup: move all debug decls to rf_options.c, all extern
 * debug decls to rf_options.h, all debug vars preceded by rf_
 *
 * Revision 1.14  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.13  1996/05/06  22:08:46  wvcii
 * added copyright info and change log
 *
 */

d32 1
a32 1
 * stripelocks.h -- header file for locking stripes 
d55 8
a62 7
  RF_IoType_t type;            /* read or write */
  RF_int64 start, stop;        /* start and end of range to be locked */
  RF_int64 start2, stop2;      /* start and end of 2nd range to be locked */
  void (*cbFunc)(struct buf *);/* callback function */
  void *cbArg;                 /* argument to callback function */
  RF_LockReqDesc_t *next;      /* next element in chain */
  RF_LockReqDesc_t *templink;  /* for making short-lived lists of request descriptors */
a63 1

d69 7
a75 6
  RF_StripeNum_t     stripeID; /* the stripe ID */
  RF_LockReqDesc_t  *granted;  /* unordered list of granted requests */
  RF_LockReqDesc_t  *waitersH; /* FIFO queue of all waiting reqs, both read and write (Head and Tail) */
  RF_LockReqDesc_t  *waitersT;
  int                nWriters; /* number of writers either granted or waiting */
  RF_StripeLockDesc_t  *next;  /* for hash table collision resolution */
d79 2
a80 2
  RF_DECLARE_MUTEX(mutex)         /* mutex on this hash chain */
  RF_StripeLockDesc_t  *descList; /* hash chain of lock descriptors */
a81 1

d108 1
a108 1
int rf_ConfigureStripeLockFreeList(RF_ShutdownList_t **listp);
d110 10
a119 7
void rf_ShutdownStripeLocks(RF_LockTableEntry_t *lockTable);
int rf_ConfigureStripeLocks(RF_ShutdownList_t **listp, RF_Raid_t *raidPtr,
	RF_Config_t *cfgPtr);
int rf_AcquireStripeLock(RF_LockTableEntry_t *lockTable,
	RF_StripeNum_t stripeID, RF_LockReqDesc_t *lockReqDesc);
void rf_ReleaseStripeLock(RF_LockTableEntry_t *lockTable,
	RF_StripeNum_t stripeID, RF_LockReqDesc_t *lockReqDesc);
d121 1
a121 1
#endif /* !_RF__RF_STRIPELOCKS_H_ */
@

