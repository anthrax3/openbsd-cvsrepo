head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.04;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.02.45;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.22;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.28;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.52;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_evenodd_dags.c,v 1.3 2002/12/16 07:01:04 tdeval Exp $	*/
/*	$NetBSD: rf_evenodd_dags.c,v 1.2 1999/02/05 00:06:11 oster Exp $	*/

/*
 * rf_evenodd_dags.c
 */
/*
 * Copyright (c) 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chang-Ming Wu
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include "rf_archs.h"

#if	RF_INCLUDE_EVENODD > 0

#include "rf_types.h"
#include "rf_raid.h"
#include "rf_dag.h"
#include "rf_dagfuncs.h"
#include "rf_dagutils.h"
#include "rf_etimer.h"
#include "rf_acctrace.h"
#include "rf_general.h"
#include "rf_evenodd_dags.h"
#include "rf_evenodd.h"
#include "rf_evenodd_dagfuncs.h"
#include "rf_pq.h"
#include "rf_dagdegrd.h"
#include "rf_dagdegwr.h"
#include "rf_dagffwr.h"


/*
 * Lost one data.
 * Use P to reconstruct missing data.
 */
RF_CREATE_DAG_FUNC_DECL(rf_EO_100_CreateReadDAG)
{
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    &rf_eoPRecoveryFuncs);
}

/*
 * Lost data + E.
 * Use P to reconstruct missing data.
 */
RF_CREATE_DAG_FUNC_DECL(rf_EO_101_CreateReadDAG)
{
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    &rf_eoPRecoveryFuncs);
}

/*
 * Lost data + P.
 * Make E look like P, and use Eor for Xor, and we can
 * use degraded read DAG.
 */
RF_CREATE_DAG_FUNC_DECL(rf_EO_110_CreateReadDAG)
{
	RF_PhysDiskAddr_t *temp;
	/* Swap P and E pointers to fake out the DegradedReadDAG code. */
	temp = asmap->parityInfo;
	asmap->parityInfo = asmap->qInfo;
	asmap->qInfo = temp;
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    &rf_eoERecoveryFuncs);
}

/*
 * Lost two data.
 */
RF_CREATE_DAG_FUNC_DECL(rf_EOCreateDoubleDegradedReadDAG)
{
	rf_EO_DoubleDegRead(raidPtr, asmap, dag_h, bp, flags, allocList);
}

/*
 * Lost two data.
 */
RF_CREATE_DAG_FUNC_DECL(rf_EO_200_CreateReadDAG)
{
	rf_EOCreateDoubleDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList);
}

RF_CREATE_DAG_FUNC_DECL(rf_EO_100_CreateWriteDAG)
{
	if (asmap->numStripeUnitsAccessed != 1 &&
	    asmap->failedPDAs[0]->numSector !=
	    raidPtr->Layout.sectorsPerStripeUnit)
		RF_PANIC();
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp,
	    flags, allocList, 2,
	    (int (*) (RF_DagNode_t *)) rf_Degraded_100_EOFunc, RF_TRUE);
}

/*
 * E is dead. Small write.
 */
RF_CREATE_DAG_FUNC_DECL(rf_EO_001_CreateSmallWriteDAG)
{
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, &rf_EOSmallWritePFuncs, NULL);
}

/*
 * E is dead. Large write.
 */
RF_CREATE_DAG_FUNC_DECL(rf_EO_001_CreateLargeWriteDAG)
{
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, 1, rf_RegularPFunc, RF_TRUE);
}

/*
 * P is dead. Small write.
 * Swap E + P, use single-degraded stuff.
 */
RF_CREATE_DAG_FUNC_DECL(rf_EO_010_CreateSmallWriteDAG)
{
	RF_PhysDiskAddr_t *temp;
	/* Swap P and E pointers to fake out the DegradedReadDAG code. */
	temp = asmap->parityInfo;
	asmap->parityInfo = asmap->qInfo;
	asmap->qInfo = temp;
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, &rf_EOSmallWriteEFuncs, NULL);
}

/*
 * P is dead. Large write.
 * Swap E + P, use single-degraded stuff.
 */
RF_CREATE_DAG_FUNC_DECL(rf_EO_010_CreateLargeWriteDAG)
{
	RF_PhysDiskAddr_t *temp;
	/* Swap P and E pointers to fake out the code. */
	temp = asmap->parityInfo;
	asmap->parityInfo = asmap->qInfo;
	asmap->qInfo = temp;
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, 1, rf_RegularEFunc, RF_FALSE);
}

RF_CREATE_DAG_FUNC_DECL(rf_EO_011_CreateWriteDAG)
{
	rf_CreateNonRedundantWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, RF_IO_TYPE_WRITE);
}

RF_CREATE_DAG_FUNC_DECL(rf_EO_110_CreateWriteDAG)
{
	RF_PhysDiskAddr_t *temp;

	if (asmap->numStripeUnitsAccessed != 1 &&
	    asmap->failedPDAs[0]->numSector !=
	    raidPtr->Layout.sectorsPerStripeUnit) {
		RF_PANIC();
	}
	/* Swap P and E to fake out parity code. */
	temp = asmap->parityInfo;
	asmap->parityInfo = asmap->qInfo;
	asmap->qInfo = temp;
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp,
	    flags, allocList, 1,
	    (int (*) (RF_DagNode_t *)) rf_EO_DegradedWriteEFunc, RF_FALSE);
	/* Is the regular E func the right one to call ? */
}

RF_CREATE_DAG_FUNC_DECL(rf_EO_101_CreateWriteDAG)
{
	if (asmap->numStripeUnitsAccessed != 1 &&
	    asmap->failedPDAs[0]->numSector !=
	    raidPtr->Layout.sectorsPerStripeUnit)
		RF_PANIC();
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp,
	    flags, allocList, 1, rf_RecoveryXorFunc, RF_TRUE);
}

RF_CREATE_DAG_FUNC_DECL(rf_EO_DoubleDegRead)
{
	rf_DoubleDegRead(raidPtr, asmap, dag_h, bp, flags, allocList,
	    "Re", "EvenOddRecovery", rf_EvenOddDoubleRecoveryFunc);
}

RF_CREATE_DAG_FUNC_DECL(rf_EOCreateSmallWriteDAG)
{
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, &rf_pFuncs, &rf_EOSmallWriteEFuncs);
}

RF_CREATE_DAG_FUNC_DECL(rf_EOCreateLargeWriteDAG)
{
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, 2, rf_RegularPEFunc, RF_FALSE);
}

RF_CREATE_DAG_FUNC_DECL(rf_EO_200_CreateWriteDAG)
{
	rf_DoubleDegSmallWrite(raidPtr, asmap, dag_h, bp, flags, allocList,
	    "Re", "We", "EOWrDDRecovery", rf_EOWriteDoubleRecoveryFunc);
}

#endif	/* RF_INCLUDE_EVENODD > 0 */
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_evenodd_dags.c,v 1.2 1999/02/16 00:02:45 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_evenodd_dags.c,v 1.1 1999/01/11 14:29:22 niklas Exp $	*/
d3 1
d36 1
a36 1
#if RF_INCLUDE_EVENODD > 0
d61 2
a62 1
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_eoPRecoveryFuncs);
d64 1
d71 2
a72 1
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_eoPRecoveryFuncs);
d74 1
d83 1
a83 1
	/* swap P and E pointers to fake out the DegradedReadDAG code */
d87 2
a88 1
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_eoERecoveryFuncs);
d90 1
d98 1
d104 2
a105 1
	rf_EOCreateDoubleDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList);
d107 1
d111 2
a112 1
	    asmap->failedPDAs[0]->numSector != raidPtr->Layout.sectorsPerStripeUnit)
d114 3
a116 1
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, 2, (int (*) (RF_DagNode_t *)) rf_Degraded_100_EOFunc, RF_TRUE);
d118 1
d124 2
a125 1
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_EOSmallWritePFuncs, NULL);
d127 1
d133 2
a134 1
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, 1, rf_RegularPFunc, RF_TRUE);
d136 1
d144 1
a144 1
	/* swap P and E pointers to fake out the DegradedReadDAG code */
d148 2
a149 1
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_EOSmallWriteEFuncs, NULL);
d151 1
d159 1
a159 1
	/* swap P and E pointers to fake out the code */
d163 2
a164 1
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, 1, rf_RegularEFunc, RF_FALSE);
d166 1
d169 2
a170 2
	rf_CreateNonRedundantWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    RF_IO_TYPE_WRITE);
d172 1
d178 2
a179 1
	    asmap->failedPDAs[0]->numSector != raidPtr->Layout.sectorsPerStripeUnit) {
d182 1
a182 1
	/* swap P and E to fake out parity code */
d186 4
a189 2
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, 1, (int (*) (RF_DagNode_t *)) rf_EO_DegradedWriteEFunc, RF_FALSE);
	/* is the regular E func the right one to call? */
d191 1
d195 2
a196 1
	    asmap->failedPDAs[0]->numSector != raidPtr->Layout.sectorsPerStripeUnit)
d198 2
a199 1
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, 1, rf_RecoveryXorFunc, RF_TRUE);
d201 1
d207 1
d210 2
a211 1
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_pFuncs, &rf_EOSmallWriteEFuncs);
d213 1
d216 2
a217 1
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, 2, rf_RegularPEFunc, RF_FALSE);
d219 1
d222 2
a223 1
	rf_DoubleDegSmallWrite(raidPtr, asmap, dag_h, bp, flags, allocList, "Re", "We", "EOWrDDRecovery", rf_EOWriteDoubleRecoveryFunc);
d225 2
a226 1
#endif				/* RF_INCLUDE_EVENODD > 0 */
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d35 1
a35 1
#if	RF_INCLUDE_EVENODD > 0
d60 1
a60 2
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    &rf_eoPRecoveryFuncs);
a61 1

d68 1
a68 2
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    &rf_eoPRecoveryFuncs);
a69 1

d78 1
a78 1
	/* Swap P and E pointers to fake out the DegradedReadDAG code. */
d82 1
a82 2
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    &rf_eoERecoveryFuncs);
a83 1

a90 1

d96 1
a96 2
	rf_EOCreateDoubleDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList);
a97 1

d101 1
a101 2
	    asmap->failedPDAs[0]->numSector !=
	    raidPtr->Layout.sectorsPerStripeUnit)
d103 1
a103 3
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp,
	    flags, allocList, 2,
	    (int (*) (RF_DagNode_t *)) rf_Degraded_100_EOFunc, RF_TRUE);
a104 1

d110 1
a110 2
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, &rf_EOSmallWritePFuncs, NULL);
a111 1

d117 1
a117 2
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, 1, rf_RegularPFunc, RF_TRUE);
a118 1

d126 1
a126 1
	/* Swap P and E pointers to fake out the DegradedReadDAG code. */
d130 1
a130 2
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, &rf_EOSmallWriteEFuncs, NULL);
a131 1

d139 1
a139 1
	/* Swap P and E pointers to fake out the code. */
d143 1
a143 2
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, 1, rf_RegularEFunc, RF_FALSE);
a144 1

d147 2
a148 2
	rf_CreateNonRedundantWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, RF_IO_TYPE_WRITE);
a149 1

d155 1
a155 2
	    asmap->failedPDAs[0]->numSector !=
	    raidPtr->Layout.sectorsPerStripeUnit) {
d158 1
a158 1
	/* Swap P and E to fake out parity code. */
d162 2
a163 4
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp,
	    flags, allocList, 1,
	    (int (*) (RF_DagNode_t *)) rf_EO_DegradedWriteEFunc, RF_FALSE);
	/* Is the regular E func the right one to call ? */
a164 1

d168 1
a168 2
	    asmap->failedPDAs[0]->numSector !=
	    raidPtr->Layout.sectorsPerStripeUnit)
d170 1
a170 2
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp,
	    flags, allocList, 1, rf_RecoveryXorFunc, RF_TRUE);
a171 1

a176 1

d179 1
a179 2
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, &rf_pFuncs, &rf_EOSmallWriteEFuncs);
a180 1

d183 1
a183 2
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, 2, rf_RegularPEFunc, RF_FALSE);
a184 1

d187 1
a187 2
	rf_DoubleDegSmallWrite(raidPtr, asmap, dag_h, bp, flags, allocList,
	    "Re", "We", "EOWrDDRecovery", rf_EOWriteDoubleRecoveryFunc);
d189 1
a189 2

#endif	/* RF_INCLUDE_EVENODD > 0 */
@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d35 1
a35 1
#if	RF_INCLUDE_EVENODD > 0
d60 1
a60 2
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    &rf_eoPRecoveryFuncs);
a61 1

d68 1
a68 2
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    &rf_eoPRecoveryFuncs);
a69 1

d78 1
a78 1
	/* Swap P and E pointers to fake out the DegradedReadDAG code. */
d82 1
a82 2
	rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
	    &rf_eoERecoveryFuncs);
a83 1

a90 1

d96 1
a96 2
	rf_EOCreateDoubleDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList);
a97 1

d101 1
a101 2
	    asmap->failedPDAs[0]->numSector !=
	    raidPtr->Layout.sectorsPerStripeUnit)
d103 1
a103 3
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp,
	    flags, allocList, 2,
	    (int (*) (RF_DagNode_t *)) rf_Degraded_100_EOFunc, RF_TRUE);
a104 1

d110 1
a110 2
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, &rf_EOSmallWritePFuncs, NULL);
a111 1

d117 1
a117 2
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, 1, rf_RegularPFunc, RF_TRUE);
a118 1

d126 1
a126 1
	/* Swap P and E pointers to fake out the DegradedReadDAG code. */
d130 1
a130 2
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, &rf_EOSmallWriteEFuncs, NULL);
a131 1

d139 1
a139 1
	/* Swap P and E pointers to fake out the code. */
d143 1
a143 2
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, 1, rf_RegularEFunc, RF_FALSE);
a144 1

d147 2
a148 2
	rf_CreateNonRedundantWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, RF_IO_TYPE_WRITE);
a149 1

d155 1
a155 2
	    asmap->failedPDAs[0]->numSector !=
	    raidPtr->Layout.sectorsPerStripeUnit) {
d158 1
a158 1
	/* Swap P and E to fake out parity code. */
d162 2
a163 4
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp,
	    flags, allocList, 1,
	    (int (*) (RF_DagNode_t *)) rf_EO_DegradedWriteEFunc, RF_FALSE);
	/* Is the regular E func the right one to call ? */
a164 1

d168 1
a168 2
	    asmap->failedPDAs[0]->numSector !=
	    raidPtr->Layout.sectorsPerStripeUnit)
d170 1
a170 2
	rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp,
	    flags, allocList, 1, rf_RecoveryXorFunc, RF_TRUE);
a171 1

a176 1

d179 1
a179 2
	rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, &rf_pFuncs, &rf_EOSmallWriteEFuncs);
a180 1

d183 1
a183 2
	rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags,
	    allocList, 2, rf_RegularPEFunc, RF_FALSE);
a184 1

d187 1
a187 2
	rf_DoubleDegSmallWrite(raidPtr, asmap, dag_h, bp, flags, allocList,
	    "Re", "We", "EOWrDDRecovery", rf_EOWriteDoubleRecoveryFunc);
d189 1
a189 2

#endif	/* RF_INCLUDE_EVENODD > 0 */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_evenodd_dags.c,v 1.1 1998/11/13 04:20:29 oster Exp $	*/
/*	$NetBSD: rf_evenodd_dags.c,v 1.1 1998/11/13 04:20:29 oster Exp $	*/
d60 1
a60 1
  rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_eoPRecoveryFuncs);
a61 1

d68 1
a68 1
  rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_eoPRecoveryFuncs);
a69 1

d77 6
a82 4
  RF_PhysDiskAddr_t *temp;
  /* swap P and E pointers to fake out the DegradedReadDAG code */
  temp = asmap->parityInfo; asmap->parityInfo = asmap->qInfo; asmap->qInfo = temp;
  rf_CreateDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_eoERecoveryFuncs);
a83 1

d89 1
a89 1
  rf_EO_DoubleDegRead(raidPtr, asmap, dag_h, bp, flags, allocList);
a90 1

d96 1
a96 1
  rf_EOCreateDoubleDegradedReadDAG(raidPtr, asmap, dag_h, bp, flags, allocList);
a97 1

d100 4
a103 4
  if (asmap->numStripeUnitsAccessed != 1 && 
      asmap->failedPDAs[0]->numSector != raidPtr->Layout.sectorsPerStripeUnit) 
    RF_PANIC();
  rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, 2, (int (*)(RF_DagNode_t *))rf_Degraded_100_EOFunc, RF_TRUE);
a104 1

d110 1
a110 1
  rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_EOSmallWritePFuncs, NULL);
a111 1

d117 1
a117 1
  rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, 1, rf_RegularPFunc, RF_TRUE);
a118 1

d125 6
a130 4
  RF_PhysDiskAddr_t *temp;
  /* swap P and E pointers to fake out the DegradedReadDAG code */
  temp = asmap->parityInfo; asmap->parityInfo = asmap->qInfo; asmap->qInfo = temp;
  rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_EOSmallWriteEFuncs, NULL);
a131 1

d138 6
a143 4
  RF_PhysDiskAddr_t *temp;
  /* swap P and E pointers to fake out the code */
  temp = asmap->parityInfo; asmap->parityInfo = asmap->qInfo; asmap->qInfo = temp;
  rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, 1, rf_RegularEFunc, RF_FALSE);
a144 1

d147 2
a148 2
  rf_CreateNonRedundantWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList,
    RF_IO_TYPE_WRITE);
a149 1

d152 1
a152 1
  RF_PhysDiskAddr_t *temp;
d154 10
a163 9
  if (asmap->numStripeUnitsAccessed != 1 && 
      asmap->failedPDAs[0]->numSector != raidPtr->Layout.sectorsPerStripeUnit)
  {
    RF_PANIC();
  }
  /* swap P and E to fake out parity code */
  temp = asmap->parityInfo; asmap->parityInfo = asmap->qInfo; asmap->qInfo = temp;
  rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList,1, (int (*)(RF_DagNode_t *))rf_EO_DegradedWriteEFunc, RF_FALSE); 
  /* is the regular E func the right one to call? */
a164 1

d167 4
a170 4
  if (asmap->numStripeUnitsAccessed != 1 && 
      asmap->failedPDAs[0]->numSector != raidPtr->Layout.sectorsPerStripeUnit)
    RF_PANIC();
  rf_CommonCreateSimpleDegradedWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList,1, rf_RecoveryXorFunc, RF_TRUE);
a171 1

d174 2
a175 2
  rf_DoubleDegRead(raidPtr, asmap, dag_h, bp, flags, allocList,
    "Re", "EvenOddRecovery", rf_EvenOddDoubleRecoveryFunc);
a176 1
  
d179 1
a179 1
  rf_CommonCreateSmallWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, &rf_pFuncs, &rf_EOSmallWriteEFuncs);
a180 1

d183 1
a183 1
  rf_CommonCreateLargeWriteDAG(raidPtr, asmap, dag_h, bp, flags, allocList, 2, rf_RegularPEFunc, RF_FALSE);
a184 1

d187 1
a187 1
  rf_DoubleDegSmallWrite(raidPtr, asmap, dag_h, bp, flags, allocList, "Re", "We", "EOWrDDRecovery", rf_EOWriteDoubleRecoveryFunc);
d189 1
a189 2

#endif /* RF_INCLUDE_EVENODD > 0 */
@

