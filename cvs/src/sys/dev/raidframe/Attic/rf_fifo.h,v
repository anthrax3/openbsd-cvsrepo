head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.04;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.02.46;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.23;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.28;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.52;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_fifo.h,v 1.3 2002/12/16 07:01:04 tdeval Exp $	*/
/*	$NetBSD: rf_fifo.h,v 1.3 1999/02/05 00:06:11 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*
 * rf_fifo.h --  prioritized FIFO queue code.
 *
 * 4-9-93 Created (MCH)
 */


#ifndef	_RF__RF_FIFO_H_
#define	_RF__RF_FIFO_H_

#include "rf_archs.h"
#include "rf_types.h"
#include "rf_diskqueue.h"

typedef struct RF_FifoHeader_s {
	RF_DiskQueueData_t *hq_head, *hq_tail;	/* high priority requests */
	RF_DiskQueueData_t *lq_head, *lq_tail;	/* low priority requests */
	int		    hq_count, lq_count;	/* debug only */
}	RF_FifoHeader_t;

extern void *rf_FifoCreate(RF_SectorCount_t, RF_AllocListElem_t *,
	RF_ShutdownList_t **);
extern void rf_FifoEnqueue(void *, RF_DiskQueueData_t *, int);
extern RF_DiskQueueData_t *rf_FifoDequeue(void *);
extern RF_DiskQueueData_t *rf_FifoPeek(void *);
extern int rf_FifoPromote(void *, RF_StripeNum_t, RF_ReconUnitNum_t);

#endif	/* !_RF__RF_FIFO_H_ */
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_fifo.h,v 1.2 1999/02/16 00:02:46 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_fifo.h,v 1.1 1999/01/11 14:29:23 niklas Exp $	*/
d3 1
d38 2
a39 2
#ifndef _RF__RF_FIFO_H_
#define _RF__RF_FIFO_H_
d48 2
a49 2
	int     hq_count, lq_count;	/* debug only */
}       RF_FifoHeader_t;
d51 6
a56 11
extern void *
rf_FifoCreate(RF_SectorCount_t sectPerDisk,
    RF_AllocListElem_t * clList, RF_ShutdownList_t ** listp);
extern void 
rf_FifoEnqueue(void *q_in, RF_DiskQueueData_t * elem,
    int priority);
extern RF_DiskQueueData_t *rf_FifoDequeue(void *q_in);
extern RF_DiskQueueData_t *rf_FifoPeek(void *q_in);
extern int 
rf_FifoPromote(void *q_in, RF_StripeNum_t parityStripeID,
    RF_ReconUnitNum_t which_ru);
d58 1
a58 1
#endif				/* !_RF__RF_FIFO_H_ */
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d37 2
a38 2
#ifndef	_RF__RF_FIFO_H_
#define	_RF__RF_FIFO_H_
d47 2
a48 2
	int		    hq_count, lq_count;	/* debug only */
}	RF_FifoHeader_t;
d50 11
a60 6
extern void *rf_FifoCreate(RF_SectorCount_t, RF_AllocListElem_t *,
	RF_ShutdownList_t **);
extern void rf_FifoEnqueue(void *, RF_DiskQueueData_t *, int);
extern RF_DiskQueueData_t *rf_FifoDequeue(void *);
extern RF_DiskQueueData_t *rf_FifoPeek(void *);
extern int rf_FifoPromote(void *, RF_StripeNum_t, RF_ReconUnitNum_t);
d62 1
a62 1
#endif	/* !_RF__RF_FIFO_H_ */
@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d37 2
a38 2
#ifndef	_RF__RF_FIFO_H_
#define	_RF__RF_FIFO_H_
d47 2
a48 2
	int		    hq_count, lq_count;	/* debug only */
}	RF_FifoHeader_t;
d50 11
a60 6
extern void *rf_FifoCreate(RF_SectorCount_t, RF_AllocListElem_t *,
	RF_ShutdownList_t **);
extern void rf_FifoEnqueue(void *, RF_DiskQueueData_t *, int);
extern RF_DiskQueueData_t *rf_FifoDequeue(void *);
extern RF_DiskQueueData_t *rf_FifoPeek(void *);
extern int rf_FifoPromote(void *, RF_StripeNum_t, RF_ReconUnitNum_t);
d62 1
a62 1
#endif	/* !_RF__RF_FIFO_H_ */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_fifo.h,v 1.1 1998/11/13 04:20:30 oster Exp $	*/
/*	$NetBSD: rf_fifo.h,v 1.1 1998/11/13 04:20:30 oster Exp $	*/
a35 49
/*
 * :  
 * Log: rf_fifo.h,v 
 * Revision 1.12  1996/06/18 20:53:11  jimz
 * fix up disk queueing (remove configure routine,
 * add shutdown list arg to create routines)
 *
 * Revision 1.11  1996/06/13  20:41:28  jimz
 * add random queueing
 *
 * Revision 1.10  1996/06/13  20:38:28  jimz
 * add random dequeue, peek
 *
 * Revision 1.9  1996/06/09  02:36:46  jimz
 * lots of little crufty cleanup- fixup whitespace
 * issues, comment #ifdefs, improve typing in some
 * places (esp size-related)
 *
 * Revision 1.8  1996/06/07  22:26:27  jimz
 * type-ify which_ru (RF_ReconUnitNum_t)
 *
 * Revision 1.7  1996/06/07  21:33:04  jimz
 * begin using consistent types for sector numbers,
 * stripe numbers, row+col numbers, recon unit numbers
 *
 * Revision 1.6  1996/05/30  23:22:16  jimz
 * bugfixes of serialization, timing problems
 * more cleanup
 *
 * Revision 1.5  1996/05/30  11:29:41  jimz
 * Numerous bug fixes. Stripe lock release code disagreed with the taking code
 * about when stripes should be locked (I made it consistent: no parity, no lock)
 * There was a lot of extra serialization of I/Os which I've removed- a lot of
 * it was to calculate values for the cache code, which is no longer with us.
 * More types, function, macro cleanup. Added code to properly quiesce the array
 * on shutdown. Made a lot of stuff array-specific which was (bogusly) general
 * before. Fixed memory allocation, freeing bugs.
 *
 * Revision 1.4  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.3  1995/12/01  18:22:26  root
 * added copyright info
 *
 * Revision 1.2  1995/11/07  15:31:57  wvcii
 * added Peek() function
 *
 */
d45 11
a55 12
    RF_DiskQueueData_t *hq_head, *hq_tail;	/* high priority requests */
    RF_DiskQueueData_t *lq_head, *lq_tail;	/* low priority requests */
    int                 hq_count, lq_count; /* debug only */
#if !defined(KERNEL) && RF_INCLUDE_QUEUE_RANDOM > 0
    long                rval;               /* next random number (random qpolicy) */
#endif /* !KERNEL && RF_INCLUDE_QUEUE_RANDOM > 0 */
} RF_FifoHeader_t;

extern void *rf_FifoCreate(RF_SectorCount_t sectPerDisk,
	RF_AllocListElem_t *clList, RF_ShutdownList_t **listp);
extern void rf_FifoEnqueue(void *q_in, RF_DiskQueueData_t *elem,
	int priority);
d58 3
a60 6
extern int rf_FifoPromote(void *q_in, RF_StripeNum_t parityStripeID,
	RF_ReconUnitNum_t which_ru);
#if !defined(KERNEL) && RF_INCLUDE_QUEUE_RANDOM > 0
extern RF_DiskQueueData_t *rf_RandomDequeue(void *q_in);
extern RF_DiskQueueData_t *rf_RandomPeek(void *q_in);
#endif /* !KERNEL && RF_INCLUDE_QUEUE_RANDOM > 0 */
d62 1
a62 1
#endif /* !_RF__RF_FIFO_H_ */
@

