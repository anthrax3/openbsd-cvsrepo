head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.06.15.53.59;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.05;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.03.27;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.50;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.29;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.53;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_sstf.h,v 1.3 2002/12/16 07:01:05 tdeval Exp $	*/
/*	$NetBSD: rf_sstf.h,v 1.3 1999/02/05 00:06:17 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Jim Zelenka
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#ifndef	_RF__RF_SSTF_H_
#define	_RF__RF_SSTF_H_

#include "rf_diskqueue.h"

typedef struct RF_SstfQ_s {
	RF_DiskQueueData_t	*queue;
	RF_DiskQueueData_t	*qtail;
	int			 qlen;
} RF_SstfQ_t;

typedef struct RF_Sstf_s {
	RF_SstfQ_t		 left;
	RF_SstfQ_t		 right;
	RF_SstfQ_t		 lopri;
	RF_SectorNum_t		 last_sector;
	int			 dir;
	int			 allow_reverse;
} RF_Sstf_t;

void *rf_SstfCreate(RF_SectorCount_t, RF_AllocListElem_t *,
	RF_ShutdownList_t **);
void *rf_ScanCreate(RF_SectorCount_t, RF_AllocListElem_t *,
	RF_ShutdownList_t **);
void *rf_CscanCreate(RF_SectorCount_t, RF_AllocListElem_t *,
	RF_ShutdownList_t **);
void  rf_SstfEnqueue(void *, RF_DiskQueueData_t *, int);
RF_DiskQueueData_t *rf_SstfDequeue(void *);
RF_DiskQueueData_t *rf_SstfPeek(void *);
int   rf_SstfPromote(void *, RF_StripeNum_t, RF_ReconUnitNum_t);
RF_DiskQueueData_t *rf_ScanDequeue(void *);
RF_DiskQueueData_t *rf_ScanPeek(void *);
RF_DiskQueueData_t *rf_CscanDequeue(void *);
RF_DiskQueueData_t *rf_CscanPeek(void *);

#endif	/* !_RF__RF_SSTF_H_ */
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_sstf.h,v 1.2 1999/02/16 00:03:27 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_sstf.h,v 1.1 1999/01/11 14:29:50 niklas Exp $	*/
d3 1
d31 2
a32 2
#ifndef _RF__RF_SSTF_H_
#define _RF__RF_SSTF_H_
d37 4
a40 4
	RF_DiskQueueData_t *queue;
	RF_DiskQueueData_t *qtail;
	int     qlen;
}       RF_SstfQ_t;
d43 22
a64 27
	RF_SstfQ_t left;
	RF_SstfQ_t right;
	RF_SstfQ_t lopri;
	RF_SectorNum_t last_sector;
	int     dir;
	int     allow_reverse;
}       RF_Sstf_t;

void   *
rf_SstfCreate(RF_SectorCount_t sect_per_disk,
    RF_AllocListElem_t * cl_list, RF_ShutdownList_t ** listp);
void   *
rf_ScanCreate(RF_SectorCount_t sect_per_disk,
    RF_AllocListElem_t * cl_list, RF_ShutdownList_t ** listp);
void   *
rf_CscanCreate(RF_SectorCount_t sect_per_disk,
    RF_AllocListElem_t * cl_list, RF_ShutdownList_t ** listp);
void    rf_SstfEnqueue(void *qptr, RF_DiskQueueData_t * req, int priority);
RF_DiskQueueData_t *rf_SstfDequeue(void *qptr);
RF_DiskQueueData_t *rf_SstfPeek(void *qptr);
int 
rf_SstfPromote(void *qptr, RF_StripeNum_t parityStripeID,
    RF_ReconUnitNum_t which_ru);
RF_DiskQueueData_t *rf_ScanDequeue(void *qptr);
RF_DiskQueueData_t *rf_ScanPeek(void *qptr);
RF_DiskQueueData_t *rf_CscanDequeue(void *qptr);
RF_DiskQueueData_t *rf_CscanPeek(void *qptr);
d66 1
a66 1
#endif				/* !_RF__RF_SSTF_H_ */
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 2
a31 2
#ifndef	_RF__RF_SSTF_H_
#define	_RF__RF_SSTF_H_
d36 4
a39 4
	RF_DiskQueueData_t	*queue;
	RF_DiskQueueData_t	*qtail;
	int			 qlen;
} RF_SstfQ_t;
d42 27
a68 22
	RF_SstfQ_t		 left;
	RF_SstfQ_t		 right;
	RF_SstfQ_t		 lopri;
	RF_SectorNum_t		 last_sector;
	int			 dir;
	int			 allow_reverse;
} RF_Sstf_t;

void *rf_SstfCreate(RF_SectorCount_t, RF_AllocListElem_t *,
	RF_ShutdownList_t **);
void *rf_ScanCreate(RF_SectorCount_t, RF_AllocListElem_t *,
	RF_ShutdownList_t **);
void *rf_CscanCreate(RF_SectorCount_t, RF_AllocListElem_t *,
	RF_ShutdownList_t **);
void  rf_SstfEnqueue(void *, RF_DiskQueueData_t *, int);
RF_DiskQueueData_t *rf_SstfDequeue(void *);
RF_DiskQueueData_t *rf_SstfPeek(void *);
int   rf_SstfPromote(void *, RF_StripeNum_t, RF_ReconUnitNum_t);
RF_DiskQueueData_t *rf_ScanDequeue(void *);
RF_DiskQueueData_t *rf_ScanPeek(void *);
RF_DiskQueueData_t *rf_CscanDequeue(void *);
RF_DiskQueueData_t *rf_CscanPeek(void *);
d70 1
a70 1
#endif	/* !_RF__RF_SSTF_H_ */
@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 2
a31 2
#ifndef	_RF__RF_SSTF_H_
#define	_RF__RF_SSTF_H_
d36 4
a39 4
	RF_DiskQueueData_t	*queue;
	RF_DiskQueueData_t	*qtail;
	int			 qlen;
} RF_SstfQ_t;
d42 27
a68 22
	RF_SstfQ_t		 left;
	RF_SstfQ_t		 right;
	RF_SstfQ_t		 lopri;
	RF_SectorNum_t		 last_sector;
	int			 dir;
	int			 allow_reverse;
} RF_Sstf_t;

void *rf_SstfCreate(RF_SectorCount_t, RF_AllocListElem_t *,
	RF_ShutdownList_t **);
void *rf_ScanCreate(RF_SectorCount_t, RF_AllocListElem_t *,
	RF_ShutdownList_t **);
void *rf_CscanCreate(RF_SectorCount_t, RF_AllocListElem_t *,
	RF_ShutdownList_t **);
void  rf_SstfEnqueue(void *, RF_DiskQueueData_t *, int);
RF_DiskQueueData_t *rf_SstfDequeue(void *);
RF_DiskQueueData_t *rf_SstfPeek(void *);
int   rf_SstfPromote(void *, RF_StripeNum_t, RF_ReconUnitNum_t);
RF_DiskQueueData_t *rf_ScanDequeue(void *);
RF_DiskQueueData_t *rf_ScanPeek(void *);
RF_DiskQueueData_t *rf_CscanDequeue(void *);
RF_DiskQueueData_t *rf_CscanPeek(void *);
d70 1
a70 1
#endif	/* !_RF__RF_SSTF_H_ */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_sstf.h,v 1.1 1998/11/13 04:20:34 oster Exp $	*/
/*	$NetBSD: rf_sstf.h,v 1.1 1998/11/13 04:20:34 oster Exp $	*/
a29 24
/* :  
 * Log: rf_sstf.h,v 
 * Revision 1.6  1996/06/18 20:53:11  jimz
 * fix up disk queueing (remove configure routine,
 * add shutdown list arg to create routines)
 *
 * Revision 1.5  1996/06/13  20:42:08  jimz
 * add scan, cscan
 *
 * Revision 1.4  1996/06/07  22:26:27  jimz
 * type-ify which_ru (RF_ReconUnitNum_t)
 *
 * Revision 1.3  1996/06/07  21:33:04  jimz
 * begin using consistent types for sector numbers,
 * stripe numbers, row+col numbers, recon unit numbers
 *
 * Revision 1.2  1996/06/06  01:22:24  jimz
 * minor cleanup
 *
 * Revision 1.1  1996/06/05  19:17:40  jimz
 * Initial revision
 *
 */

d36 4
a39 4
	RF_DiskQueueData_t  *queue;
	RF_DiskQueueData_t  *qtail;
	int                  qlen;
} RF_SstfQ_t;
d42 18
a59 15
	RF_SstfQ_t        left;
	RF_SstfQ_t        right;
	RF_SstfQ_t        lopri;
	RF_SectorNum_t    last_sector;
	int               dir;
	int               allow_reverse;
} RF_Sstf_t;

void *rf_SstfCreate(RF_SectorCount_t sect_per_disk,
	RF_AllocListElem_t *cl_list, RF_ShutdownList_t **listp);
void *rf_ScanCreate(RF_SectorCount_t sect_per_disk,
	RF_AllocListElem_t *cl_list, RF_ShutdownList_t **listp);
void *rf_CscanCreate(RF_SectorCount_t sect_per_disk,
	RF_AllocListElem_t *cl_list, RF_ShutdownList_t **listp);
void rf_SstfEnqueue(void *qptr, RF_DiskQueueData_t *req, int priority);
d62 3
a64 2
int rf_SstfPromote(void *qptr, RF_StripeNum_t parityStripeID,
	RF_ReconUnitNum_t which_ru);
d70 1
a70 1
#endif /* !_RF__RF_SSTF_H_ */
@

