head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.03;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.02.33;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.12;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.27;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.51;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_dagutils.h,v 1.3 2002/12/16 07:01:03 tdeval Exp $	*/
/*	$NetBSD: rf_dagutils.h,v 1.3 1999/02/05 00:06:08 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland, William V. Courtright II
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*****************************************************************************
 *
 * rf_dagutils.h -- Header file for utility routines for manipulating DAGs.
 *
 *****************************************************************************/


#include "rf_types.h"
#include "rf_dagfuncs.h"
#include "rf_general.h"

#ifndef	_RF__RF_DAGUTILS_H_
#define	_RF__RF_DAGUTILS_H_

struct RF_RedFuncs_s {
	int	(*regular) (RF_DagNode_t *);
	char	 *RegularName;
	int	(*simple) (RF_DagNode_t *);
	char	 *SimpleName;
};

extern RF_RedFuncs_t rf_xorFuncs;
extern RF_RedFuncs_t rf_xorRecoveryFuncs;

void rf_InitNode(RF_DagNode_t *, RF_NodeStatus_t, int, int (*) (RF_DagNode_t *),
	int (*) (RF_DagNode_t *), int (*) (RF_DagNode_t *, int), int, int, int,
	int, RF_DagHeader_t *, char *, RF_AllocListElem_t *);

void rf_FreeDAG(RF_DagHeader_t *);

RF_PropHeader_t *rf_MakePropListEntry(RF_DagHeader_t *, int, int,
RF_PropHeader_t *, RF_AllocListElem_t *);

int  rf_ConfigureDAGs(RF_ShutdownList_t **);

RF_DagHeader_t *rf_AllocDAGHeader(void);

void rf_FreeDAGHeader(RF_DagHeader_t *);

void *rf_AllocBuffer(RF_Raid_t *, RF_DagHeader_t *, RF_PhysDiskAddr_t *,
	RF_AllocListElem_t *);

char *rf_NodeStatusString(RF_DagNode_t *);

void rf_PrintNodeInfoString(RF_DagNode_t *);

int  rf_AssignNodeNums(RF_DagHeader_t *);

int  rf_RecurAssignNodeNums(RF_DagNode_t *, int, int);

void rf_ResetDAGHeaderPointers(RF_DagHeader_t *, RF_DagHeader_t *);

void rf_RecurResetDAGHeaderPointers(RF_DagNode_t *, RF_DagHeader_t *);

void rf_PrintDAGList(RF_DagHeader_t *);

int  rf_ValidateDAG(RF_DagHeader_t *);

void rf_redirect_asm(RF_Raid_t *, RF_AccessStripeMap_t *);

void rf_MapUnaccessedPortionOfStripe(RF_Raid_t *, RF_RaidLayout_t *,
	RF_AccessStripeMap_t *, RF_DagHeader_t *, RF_AccessStripeMapHeader_t **,
	int *, char **, char **, RF_AllocListElem_t *);

int  rf_PDAOverlap(RF_RaidLayout_t *, RF_PhysDiskAddr_t *, RF_PhysDiskAddr_t *);

void rf_GenerateFailedAccessASMs(RF_Raid_t *, RF_AccessStripeMap_t *,
	RF_PhysDiskAddr_t *, RF_DagHeader_t *, RF_AccessStripeMapHeader_t **,
	int *, char **, char *, RF_AllocListElem_t *);

/* Flags used by RangeRestrictPDA. */
#define	RF_RESTRICT_NOBUFFER	0
#define	RF_RESTRICT_DOBUFFER	1

void rf_RangeRestrictPDA(RF_Raid_t *, RF_PhysDiskAddr_t *, RF_PhysDiskAddr_t *,
	int, int);

int  rf_compute_workload_shift(RF_Raid_t *, RF_PhysDiskAddr_t *);
void rf_SelectMirrorDiskIdle(RF_DagNode_t *);
void rf_SelectMirrorDiskPartition(RF_DagNode_t *);

#endif	/* ! _RF__RF_DAGUTILS_H_ */
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_dagutils.h,v 1.2 1999/02/16 00:02:33 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_dagutils.h,v 1.1 1999/01/11 14:29:12 niklas Exp $	*/
d3 1
d31 1
a31 1
/*************************************************************************
d33 1
a33 1
 * rf_dagutils.h -- header file for utility routines for manipulating DAGs
d35 1
a35 1
 *************************************************************************/
d42 2
a43 2
#ifndef _RF__RF_DAGUTILS_H_
#define _RF__RF_DAGUTILS_H_
d46 4
a49 4
	int     (*regular) (RF_DagNode_t *);
	char   *RegularName;
	int     (*simple) (RF_DagNode_t *);
	char   *SimpleName;
d55 3
a57 8
void 
rf_InitNode(RF_DagNode_t * node, RF_NodeStatus_t initstatus,
    int commit,
    int (*doFunc) (RF_DagNode_t * node),
    int (*undoFunc) (RF_DagNode_t * node),
    int (*wakeFunc) (RF_DagNode_t * node, int status),
    int nSucc, int nAnte, int nParam, int nResult,
    RF_DagHeader_t * hdr, char *name, RF_AllocListElem_t * alist);
d59 1
a59 1
	void    rf_FreeDAG(RF_DagHeader_t * dag_h);
d61 2
a62 2
	RF_PropHeader_t *rf_MakePropListEntry(RF_DagHeader_t * dag_h, int resultNum,
            int paramNum, RF_PropHeader_t * next, RF_AllocListElem_t * allocList);
d64 1
a64 1
	int     rf_ConfigureDAGs(RF_ShutdownList_t ** listp);
d66 1
a66 1
	RF_DagHeader_t *rf_AllocDAGHeader(void);
d68 1
a68 1
	void    rf_FreeDAGHeader(RF_DagHeader_t * dh);
d70 2
a71 2
	void   *rf_AllocBuffer(RF_Raid_t * raidPtr, RF_DagHeader_t * dag_h,
            RF_PhysDiskAddr_t * pda, RF_AllocListElem_t * allocList);
d73 1
a73 1
	char   *rf_NodeStatusString(RF_DagNode_t * node);
d75 1
a75 1
	void    rf_PrintNodeInfoString(RF_DagNode_t * node);
d77 1
a77 1
	int     rf_AssignNodeNums(RF_DagHeader_t * dag_h);
d79 1
a79 1
	int     rf_RecurAssignNodeNums(RF_DagNode_t * node, int num, int unvisited);
d81 1
a81 1
	void    rf_ResetDAGHeaderPointers(RF_DagHeader_t * dag_h, RF_DagHeader_t * newptr);
d83 1
a83 1
	void    rf_RecurResetDAGHeaderPointers(RF_DagNode_t * node, RF_DagHeader_t * newptr);
d85 1
a85 1
	void    rf_PrintDAGList(RF_DagHeader_t * dag_h);
d87 1
a87 1
	int     rf_ValidateDAG(RF_DagHeader_t * dag_h);
d89 1
a89 1
	void    rf_redirect_asm(RF_Raid_t * raidPtr, RF_AccessStripeMap_t * asmap);
d91 3
a93 5
	void    rf_MapUnaccessedPortionOfStripe(RF_Raid_t * raidPtr,
            RF_RaidLayout_t * layoutPtr,
            RF_AccessStripeMap_t * asmap, RF_DagHeader_t * dag_h,
            RF_AccessStripeMapHeader_t ** new_asm_h, int *nRodNodes, char **sosBuffer,
            char **eosBuffer, RF_AllocListElem_t * allocList);
d95 1
a95 2
	int     rf_PDAOverlap(RF_RaidLayout_t * layoutPtr, RF_PhysDiskAddr_t * src,
            RF_PhysDiskAddr_t * dest);
d97 3
a99 5
	void    rf_GenerateFailedAccessASMs(RF_Raid_t * raidPtr,
            RF_AccessStripeMap_t * asmap, RF_PhysDiskAddr_t * failedPDA,
            RF_DagHeader_t * dag_h, RF_AccessStripeMapHeader_t ** new_asm_h,
            int *nXorBufs, char **rpBufPtr, char *overlappingPDAs,
            RF_AllocListElem_t * allocList);
d101 3
a103 3
/* flags used by RangeRestrictPDA */
#define RF_RESTRICT_NOBUFFER 0
#define RF_RESTRICT_DOBUFFER 1
d105 2
a106 2
	void    rf_RangeRestrictPDA(RF_Raid_t * raidPtr, RF_PhysDiskAddr_t * src,
            RF_PhysDiskAddr_t * dest, int dobuffer, int doraidaddr);
d108 3
a110 3
	int     rf_compute_workload_shift(RF_Raid_t * raidPtr, RF_PhysDiskAddr_t * pda);
	void    rf_SelectMirrorDiskIdle(RF_DagNode_t * node);
	void    rf_SelectMirrorDiskPartition(RF_DagNode_t * node);
d112 1
a112 1
#endif				/* !_RF__RF_DAGUTILS_H_ */
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/*****************************************************************************
d32 1
a32 1
 * rf_dagutils.h -- Header file for utility routines for manipulating DAGs.
d34 1
a34 1
 *****************************************************************************/
d41 2
a42 2
#ifndef	_RF__RF_DAGUTILS_H_
#define	_RF__RF_DAGUTILS_H_
d45 4
a48 4
	int	(*regular) (RF_DagNode_t *);
	char	 *RegularName;
	int	(*simple) (RF_DagNode_t *);
	char	 *SimpleName;
d54 8
a61 3
void rf_InitNode(RF_DagNode_t *, RF_NodeStatus_t, int, int (*) (RF_DagNode_t *),
	int (*) (RF_DagNode_t *), int (*) (RF_DagNode_t *, int), int, int, int,
	int, RF_DagHeader_t *, char *, RF_AllocListElem_t *);
d63 1
a63 1
void rf_FreeDAG(RF_DagHeader_t *);
d65 2
a66 2
RF_PropHeader_t *rf_MakePropListEntry(RF_DagHeader_t *, int, int,
RF_PropHeader_t *, RF_AllocListElem_t *);
d68 1
a68 1
int  rf_ConfigureDAGs(RF_ShutdownList_t **);
d70 1
a70 1
RF_DagHeader_t *rf_AllocDAGHeader(void);
d72 1
a72 1
void rf_FreeDAGHeader(RF_DagHeader_t *);
d74 2
a75 2
void *rf_AllocBuffer(RF_Raid_t *, RF_DagHeader_t *, RF_PhysDiskAddr_t *,
	RF_AllocListElem_t *);
d77 1
a77 1
char *rf_NodeStatusString(RF_DagNode_t *);
d79 1
a79 1
void rf_PrintNodeInfoString(RF_DagNode_t *);
d81 1
a81 1
int  rf_AssignNodeNums(RF_DagHeader_t *);
d83 1
a83 1
int  rf_RecurAssignNodeNums(RF_DagNode_t *, int, int);
d85 1
a85 1
void rf_ResetDAGHeaderPointers(RF_DagHeader_t *, RF_DagHeader_t *);
d87 1
a87 1
void rf_RecurResetDAGHeaderPointers(RF_DagNode_t *, RF_DagHeader_t *);
d89 1
a89 1
void rf_PrintDAGList(RF_DagHeader_t *);
d91 1
a91 1
int  rf_ValidateDAG(RF_DagHeader_t *);
d93 1
a93 1
void rf_redirect_asm(RF_Raid_t *, RF_AccessStripeMap_t *);
d95 5
a99 3
void rf_MapUnaccessedPortionOfStripe(RF_Raid_t *, RF_RaidLayout_t *,
	RF_AccessStripeMap_t *, RF_DagHeader_t *, RF_AccessStripeMapHeader_t **,
	int *, char **, char **, RF_AllocListElem_t *);
d101 2
a102 1
int  rf_PDAOverlap(RF_RaidLayout_t *, RF_PhysDiskAddr_t *, RF_PhysDiskAddr_t *);
d104 5
a108 3
void rf_GenerateFailedAccessASMs(RF_Raid_t *, RF_AccessStripeMap_t *,
	RF_PhysDiskAddr_t *, RF_DagHeader_t *, RF_AccessStripeMapHeader_t **,
	int *, char **, char *, RF_AllocListElem_t *);
d110 3
a112 3
/* Flags used by RangeRestrictPDA. */
#define	RF_RESTRICT_NOBUFFER	0
#define	RF_RESTRICT_DOBUFFER	1
d114 2
a115 2
void rf_RangeRestrictPDA(RF_Raid_t *, RF_PhysDiskAddr_t *, RF_PhysDiskAddr_t *,
	int, int);
d117 3
a119 3
int  rf_compute_workload_shift(RF_Raid_t *, RF_PhysDiskAddr_t *);
void rf_SelectMirrorDiskIdle(RF_DagNode_t *);
void rf_SelectMirrorDiskPartition(RF_DagNode_t *);
d121 1
a121 1
#endif	/* ! _RF__RF_DAGUTILS_H_ */
@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/*****************************************************************************
d32 1
a32 1
 * rf_dagutils.h -- Header file for utility routines for manipulating DAGs.
d34 1
a34 1
 *****************************************************************************/
d41 2
a42 2
#ifndef	_RF__RF_DAGUTILS_H_
#define	_RF__RF_DAGUTILS_H_
d45 4
a48 4
	int	(*regular) (RF_DagNode_t *);
	char	 *RegularName;
	int	(*simple) (RF_DagNode_t *);
	char	 *SimpleName;
d54 8
a61 3
void rf_InitNode(RF_DagNode_t *, RF_NodeStatus_t, int, int (*) (RF_DagNode_t *),
	int (*) (RF_DagNode_t *), int (*) (RF_DagNode_t *, int), int, int, int,
	int, RF_DagHeader_t *, char *, RF_AllocListElem_t *);
d63 1
a63 1
void rf_FreeDAG(RF_DagHeader_t *);
d65 2
a66 2
RF_PropHeader_t *rf_MakePropListEntry(RF_DagHeader_t *, int, int,
RF_PropHeader_t *, RF_AllocListElem_t *);
d68 1
a68 1
int  rf_ConfigureDAGs(RF_ShutdownList_t **);
d70 1
a70 1
RF_DagHeader_t *rf_AllocDAGHeader(void);
d72 1
a72 1
void rf_FreeDAGHeader(RF_DagHeader_t *);
d74 2
a75 2
void *rf_AllocBuffer(RF_Raid_t *, RF_DagHeader_t *, RF_PhysDiskAddr_t *,
	RF_AllocListElem_t *);
d77 1
a77 1
char *rf_NodeStatusString(RF_DagNode_t *);
d79 1
a79 1
void rf_PrintNodeInfoString(RF_DagNode_t *);
d81 1
a81 1
int  rf_AssignNodeNums(RF_DagHeader_t *);
d83 1
a83 1
int  rf_RecurAssignNodeNums(RF_DagNode_t *, int, int);
d85 1
a85 1
void rf_ResetDAGHeaderPointers(RF_DagHeader_t *, RF_DagHeader_t *);
d87 1
a87 1
void rf_RecurResetDAGHeaderPointers(RF_DagNode_t *, RF_DagHeader_t *);
d89 1
a89 1
void rf_PrintDAGList(RF_DagHeader_t *);
d91 1
a91 1
int  rf_ValidateDAG(RF_DagHeader_t *);
d93 1
a93 1
void rf_redirect_asm(RF_Raid_t *, RF_AccessStripeMap_t *);
d95 5
a99 3
void rf_MapUnaccessedPortionOfStripe(RF_Raid_t *, RF_RaidLayout_t *,
	RF_AccessStripeMap_t *, RF_DagHeader_t *, RF_AccessStripeMapHeader_t **,
	int *, char **, char **, RF_AllocListElem_t *);
d101 2
a102 1
int  rf_PDAOverlap(RF_RaidLayout_t *, RF_PhysDiskAddr_t *, RF_PhysDiskAddr_t *);
d104 5
a108 3
void rf_GenerateFailedAccessASMs(RF_Raid_t *, RF_AccessStripeMap_t *,
	RF_PhysDiskAddr_t *, RF_DagHeader_t *, RF_AccessStripeMapHeader_t **,
	int *, char **, char *, RF_AllocListElem_t *);
d110 3
a112 3
/* Flags used by RangeRestrictPDA. */
#define	RF_RESTRICT_NOBUFFER	0
#define	RF_RESTRICT_DOBUFFER	1
d114 2
a115 2
void rf_RangeRestrictPDA(RF_Raid_t *, RF_PhysDiskAddr_t *, RF_PhysDiskAddr_t *,
	int, int);
d117 3
a119 3
int  rf_compute_workload_shift(RF_Raid_t *, RF_PhysDiskAddr_t *);
void rf_SelectMirrorDiskIdle(RF_DagNode_t *);
void rf_SelectMirrorDiskPartition(RF_DagNode_t *);
d121 1
a121 1
#endif	/* ! _RF__RF_DAGUTILS_H_ */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_dagutils.h,v 1.1 1998/11/13 04:20:28 oster Exp $	*/
/*	$NetBSD: rf_dagutils.h,v 1.1 1998/11/13 04:20:28 oster Exp $	*/
a35 72
/*
 * :  
 * Log: rf_dagutils.h,v 
 * Revision 1.19  1996/07/22 19:52:16  jimz
 * switched node params to RF_DagParam_t, a union of
 * a 64-bit int and a void *, for better portability
 * attempted hpux port, but failed partway through for
 * lack of a single C compiler capable of compiling all
 * source files
 *
 * Revision 1.18  1996/07/15  17:22:18  jimz
 * nit-pick code cleanup
 * resolve stdlib problems on DEC OSF
 *
 * Revision 1.17  1996/06/10  11:55:47  jimz
 * Straightened out some per-array/not-per-array distinctions, fixed
 * a couple bugs related to confusion. Added shutdown lists. Removed
 * layout shutdown function (now subsumed by shutdown lists).
 *
 * Revision 1.16  1996/06/06  17:27:46  jimz
 * added another select mirror func (partitioning), changed names so dag
 * creation routines can use the appropriate one
 *
 * fixed old idle mirror func to pick closest arm if queue lengths are equal
 *
 * Revision 1.15  1996/06/03  23:28:26  jimz
 * more bugfixes
 * check in tree to sync for IPDS runs with current bugfixes
 * there still may be a problem with threads in the script test
 * getting I/Os stuck- not trivially reproducible (runs ~50 times
 * in a row without getting stuck)
 *
 * Revision 1.14  1996/05/27  18:56:37  jimz
 * more code cleanup
 * better typing
 * compiles in all 3 environments
 *
 * Revision 1.13  1996/05/24  22:17:04  jimz
 * continue code + namespace cleanup
 * typed a bunch of flags
 *
 * Revision 1.12  1996/05/24  04:28:55  jimz
 * release cleanup ckpt
 *
 * Revision 1.11  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.10  1996/05/23  00:33:23  jimz
 * code cleanup: move all debug decls to rf_options.c, all extern
 * debug decls to rf_options.h, all debug vars preceded by rf_
 *
 * Revision 1.9  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.8  1996/05/08  21:01:24  jimz
 * fixed up enum type names that were conflicting with other
 * enums and function names (ie, "panic")
 * future naming trends will be towards RF_ and rf_ for
 * everything raidframe-related
 *
 * Revision 1.7  1996/05/03  19:55:27  wvcii
 * added misc routines from old dag creation files
 *
 * Revision 1.6  1995/12/01  15:57:28  root
 * added copyright info
 *
 * Revision 1.5  1995/11/07  16:21:36  wvcii
 * modified InitNode and InitNodeFromBuf prototypes
 *
 */
d45 4
a48 4
  int   (*regular)(RF_DagNode_t *);
  char   *RegularName;
  int   (*simple)(RF_DagNode_t *);
  char   *SimpleName;
d54 8
a61 7
void rf_InitNode(RF_DagNode_t *node, RF_NodeStatus_t initstatus,
	      int commit,
	      int (*doFunc)(RF_DagNode_t *node), 
	      int (*undoFunc)(RF_DagNode_t *node), 
	      int (*wakeFunc)(RF_DagNode_t *node, int status),
	      int nSucc, int nAnte, int nParam, int nResult, 
	      RF_DagHeader_t *hdr, char *name, RF_AllocListElem_t *alist);
d63 1
a63 1
void rf_FreeDAG(RF_DagHeader_t *dag_h);
d65 2
a66 2
RF_PropHeader_t *rf_MakePropListEntry(RF_DagHeader_t *dag_h, int resultNum,
	int paramNum, RF_PropHeader_t *next, RF_AllocListElem_t *allocList);
d68 1
a68 1
int rf_ConfigureDAGs(RF_ShutdownList_t **listp);
d70 1
a70 1
RF_DagHeader_t *rf_AllocDAGHeader(void);
d72 1
a72 1
void rf_FreeDAGHeader(RF_DagHeader_t *dh);
d74 2
a75 2
void *rf_AllocBuffer(RF_Raid_t *raidPtr, RF_DagHeader_t *dag_h,
	RF_PhysDiskAddr_t *pda, RF_AllocListElem_t *allocList);
d77 1
a77 1
char *rf_NodeStatusString(RF_DagNode_t *node);
d79 1
a79 1
void rf_PrintNodeInfoString(RF_DagNode_t *node);
d81 1
a81 1
int rf_AssignNodeNums(RF_DagHeader_t *dag_h);
d83 1
a83 1
int rf_RecurAssignNodeNums(RF_DagNode_t *node, int num, int unvisited);
d85 1
a85 1
void rf_ResetDAGHeaderPointers(RF_DagHeader_t *dag_h, RF_DagHeader_t *newptr);
d87 1
a87 1
void rf_RecurResetDAGHeaderPointers(RF_DagNode_t *node, RF_DagHeader_t *newptr);
d89 1
a89 1
void rf_PrintDAGList(RF_DagHeader_t *dag_h);
d91 1
a91 1
int rf_ValidateDAG(RF_DagHeader_t *dag_h);
d93 1
a93 1
void rf_redirect_asm(RF_Raid_t *raidPtr, RF_AccessStripeMap_t *asmap);
d95 5
a99 5
void rf_MapUnaccessedPortionOfStripe(RF_Raid_t *raidPtr,
	RF_RaidLayout_t *layoutPtr,
	RF_AccessStripeMap_t *asmap, RF_DagHeader_t *dag_h,
	RF_AccessStripeMapHeader_t **new_asm_h, int *nRodNodes, char **sosBuffer,
	char **eosBuffer, RF_AllocListElem_t *allocList);
d101 2
a102 2
int rf_PDAOverlap(RF_RaidLayout_t *layoutPtr, RF_PhysDiskAddr_t *src,
	RF_PhysDiskAddr_t *dest);
d104 5
a108 5
void rf_GenerateFailedAccessASMs(RF_Raid_t *raidPtr,
	RF_AccessStripeMap_t *asmap, RF_PhysDiskAddr_t *failedPDA,
	RF_DagHeader_t *dag_h, RF_AccessStripeMapHeader_t **new_asm_h,
	int *nXorBufs, char **rpBufPtr, char *overlappingPDAs,
	RF_AllocListElem_t *allocList);
d114 2
a115 2
void rf_RangeRestrictPDA(RF_Raid_t *raidPtr, RF_PhysDiskAddr_t *src,
	RF_PhysDiskAddr_t *dest, int dobuffer, int doraidaddr);
d117 3
a119 3
int rf_compute_workload_shift(RF_Raid_t *raidPtr, RF_PhysDiskAddr_t *pda);
void rf_SelectMirrorDiskIdle(RF_DagNode_t *node);
void rf_SelectMirrorDiskPartition(RF_DagNode_t *node);
d121 1
a121 1
#endif /* !_RF__RF_DAGUTILS_H_ */
@

