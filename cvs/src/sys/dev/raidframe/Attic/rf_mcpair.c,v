head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.04;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.02.56;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.29;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.28;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.52;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_mcpair.c,v 1.3 2002/12/16 07:01:04 tdeval Exp $	*/
/*	$NetBSD: rf_mcpair.c,v 1.3 1999/02/05 00:06:13 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Jim Zelenka
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*
 * rf_mcpair.c
 * An mcpair is a structure containing a mutex and a condition variable.
 * It's used to block the current thread until some event occurs.
 */

#include "rf_types.h"
#include "rf_threadstuff.h"
#include "rf_mcpair.h"
#include "rf_debugMem.h"
#include "rf_freelist.h"
#include "rf_shutdown.h"

#include <sys/proc.h>

static RF_FreeList_t *rf_mcpair_freelist;

#define	RF_MAX_FREE_MCPAIR	128
#define	RF_MCPAIR_INC		 16
#define	RF_MCPAIR_INITIAL	 24

int  rf_init_mcpair(RF_MCPair_t *);
void rf_clean_mcpair(RF_MCPair_t *);
void rf_ShutdownMCPair(void *);


int
rf_init_mcpair(RF_MCPair_t *t)
{
	int rc;

	rc = rf_mutex_init(&t->mutex);
	if (rc) {
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d\n",
		    __FILE__, __LINE__, rc);
		return (rc);
	}
	rc = rf_cond_init(&t->cond);
	if (rc) {
		RF_ERRORMSG3("Unable to init cond file %s line %d rc=%d\n",
		    __FILE__, __LINE__, rc);
		rf_mutex_destroy(&t->mutex);
		return (rc);
	}
	return (0);
}

void
rf_clean_mcpair(RF_MCPair_t *t)
{
	rf_mutex_destroy(&t->mutex);
	rf_cond_destroy(&t->cond);
}

void
rf_ShutdownMCPair(void *ignored)
{
	RF_FREELIST_DESTROY_CLEAN(rf_mcpair_freelist, next, (RF_MCPair_t *),
	    rf_clean_mcpair);
}

int
rf_ConfigureMCPair(RF_ShutdownList_t **listp)
{
	int rc;

	RF_FREELIST_CREATE(rf_mcpair_freelist, RF_MAX_FREE_MCPAIR,
	    RF_MCPAIR_INC, sizeof(RF_MCPair_t));
	rc = rf_ShutdownCreate(listp, rf_ShutdownMCPair, NULL);
	if (rc) {
		RF_ERRORMSG3("Unable to add to shutdown list file %s line %d"
		    " rc=%d\n", __FILE__, __LINE__, rc);
		rf_ShutdownMCPair(NULL);
		return (rc);
	}
	RF_FREELIST_PRIME_INIT(rf_mcpair_freelist, RF_MCPAIR_INITIAL, next,
	    (RF_MCPair_t *), rf_init_mcpair);
	return (0);
}

RF_MCPair_t *
rf_AllocMCPair(void)
{
	RF_MCPair_t *t;

	RF_FREELIST_GET_INIT(rf_mcpair_freelist, t, next, (RF_MCPair_t *),
	    rf_init_mcpair);
	if (t) {
		t->flag = 0;
		t->next = NULL;
	}
	return (t);
}

void
rf_FreeMCPair(RF_MCPair_t *t)
{
	RF_FREELIST_FREE_CLEAN(rf_mcpair_freelist, t, next, rf_clean_mcpair);
}

/*
 * The callback function used to wake you up when you use an mcpair to wait
 * for something.
 */
void
rf_MCPairWakeupFunc(RF_MCPair_t *mcpair)
{
	RF_LOCK_MUTEX(mcpair->mutex);
	mcpair->flag = 1;
#if 0
	printf("MCPairWakeupFunc called!\n");
#endif
	wakeup(&(mcpair->flag)); /* XXX Does this do anything useful !!!  GO */
	/*
	 * XXX
	 * Looks like the following is needed to truly get the
	 * functionality they were looking for here...  This could be a
	 * side-effect of my using a tsleep in the Net- and OpenBSD port
	 * though...
	 * XXX
	 */
	wakeup(&(mcpair->cond));	/* XXX XXX XXX GO */
	RF_UNLOCK_MUTEX(mcpair->mutex);
}
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_mcpair.c,v 1.2 1999/02/16 00:02:56 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_mcpair.c,v 1.1 1999/01/11 14:29:29 niklas Exp $	*/
d3 1
d31 4
a34 3
/* rf_mcpair.c
 * an mcpair is a structure containing a mutex and a condition variable.
 * it's used to block the current thread until some event occurs.
d48 3
a50 3
#define RF_MAX_FREE_MCPAIR 128
#define RF_MCPAIR_INC       16
#define RF_MCPAIR_INITIAL   24
d52 3
a54 3
static int init_mcpair(RF_MCPair_t *);
static void clean_mcpair(RF_MCPair_t *);
static void rf_ShutdownMCPair(void *);
d57 2
a58 3
static int 
init_mcpair(t)
	RF_MCPair_t *t;
d60 1
a60 1
	int     rc;
d64 2
a65 2
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d\n", __FILE__,
		    __LINE__, rc);
d70 2
a71 2
		RF_ERRORMSG3("Unable to init cond file %s line %d rc=%d\n", __FILE__,
		    __LINE__, rc);
d78 2
a79 3
static void 
clean_mcpair(t)
	RF_MCPair_t *t;
d85 2
a86 3
static void 
rf_ShutdownMCPair(ignored)
	void   *ignored;
d88 2
a89 1
	RF_FREELIST_DESTROY_CLEAN(rf_mcpair_freelist, next, (RF_MCPair_t *), clean_mcpair);
d92 2
a93 3
int 
rf_ConfigureMCPair(listp)
	RF_ShutdownList_t **listp;
d95 1
a95 1
	int     rc;
d101 2
a102 2
		RF_ERRORMSG3("Unable to add to shutdown list file %s line %d rc=%d\n",
		    __FILE__, __LINE__, rc);
d107 1
a107 1
	    (RF_MCPair_t *), init_mcpair);
d112 1
a112 1
rf_AllocMCPair()
d116 2
a117 1
	RF_FREELIST_GET_INIT(rf_mcpair_freelist, t, next, (RF_MCPair_t *), init_mcpair);
d125 2
a126 3
void 
rf_FreeMCPair(t)
	RF_MCPair_t *t;
d128 1
a128 1
	RF_FREELIST_FREE_CLEAN(rf_mcpair_freelist, t, next, clean_mcpair);
d130 7
a136 4
/* the callback function used to wake you up when you use an mcpair to wait for something */
void 
rf_MCPairWakeupFunc(mcpair)
	RF_MCPair_t *mcpair;
d143 5
a147 3
	wakeup(&(mcpair->flag));/* XXX Does this do anything useful!! GO */
	/* XXX Looks like the following is needed to truly get the
	 * functionality they were looking for here... This could be a
d149 4
a152 2
	 * though... XXX */
	wakeup(&(mcpair->cond));/* XXX XXX XXX GO */
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 3
a32 4
/*
 * rf_mcpair.c
 * An mcpair is a structure containing a mutex and a condition variable.
 * It's used to block the current thread until some event occurs.
d46 3
a48 3
#define	RF_MAX_FREE_MCPAIR	128
#define	RF_MCPAIR_INC		 16
#define	RF_MCPAIR_INITIAL	 24
d50 3
a52 3
int  rf_init_mcpair(RF_MCPair_t *);
void rf_clean_mcpair(RF_MCPair_t *);
void rf_ShutdownMCPair(void *);
d55 3
a57 2
int
rf_init_mcpair(RF_MCPair_t *t)
d59 1
a59 1
	int rc;
d63 2
a64 2
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d\n",
		    __FILE__, __LINE__, rc);
d69 2
a70 2
		RF_ERRORMSG3("Unable to init cond file %s line %d rc=%d\n",
		    __FILE__, __LINE__, rc);
d77 3
a79 2
void
rf_clean_mcpair(RF_MCPair_t *t)
d85 3
a87 2
void
rf_ShutdownMCPair(void *ignored)
d89 1
a89 2
	RF_FREELIST_DESTROY_CLEAN(rf_mcpair_freelist, next, (RF_MCPair_t *),
	    rf_clean_mcpair);
d92 3
a94 2
int
rf_ConfigureMCPair(RF_ShutdownList_t **listp)
d96 1
a96 1
	int rc;
d102 2
a103 2
		RF_ERRORMSG3("Unable to add to shutdown list file %s line %d"
		    " rc=%d\n", __FILE__, __LINE__, rc);
d108 1
a108 1
	    (RF_MCPair_t *), rf_init_mcpair);
d113 1
a113 1
rf_AllocMCPair(void)
d117 1
a117 2
	RF_FREELIST_GET_INIT(rf_mcpair_freelist, t, next, (RF_MCPair_t *),
	    rf_init_mcpair);
d125 3
a127 2
void
rf_FreeMCPair(RF_MCPair_t *t)
d129 1
a129 1
	RF_FREELIST_FREE_CLEAN(rf_mcpair_freelist, t, next, rf_clean_mcpair);
d131 4
a134 7

/*
 * The callback function used to wake you up when you use an mcpair to wait
 * for something.
 */
void
rf_MCPairWakeupFunc(RF_MCPair_t *mcpair)
d141 3
a143 5
	wakeup(&(mcpair->flag)); /* XXX Does this do anything useful !!!  GO */
	/*
	 * XXX
	 * Looks like the following is needed to truly get the
	 * functionality they were looking for here...  This could be a
d145 2
a146 4
	 * though...
	 * XXX
	 */
	wakeup(&(mcpair->cond));	/* XXX XXX XXX GO */
@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 3
a32 4
/*
 * rf_mcpair.c
 * An mcpair is a structure containing a mutex and a condition variable.
 * It's used to block the current thread until some event occurs.
d46 3
a48 3
#define	RF_MAX_FREE_MCPAIR	128
#define	RF_MCPAIR_INC		 16
#define	RF_MCPAIR_INITIAL	 24
d50 3
a52 3
int  rf_init_mcpair(RF_MCPair_t *);
void rf_clean_mcpair(RF_MCPair_t *);
void rf_ShutdownMCPair(void *);
d55 3
a57 2
int
rf_init_mcpair(RF_MCPair_t *t)
d59 1
a59 1
	int rc;
d63 2
a64 2
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d\n",
		    __FILE__, __LINE__, rc);
d69 2
a70 2
		RF_ERRORMSG3("Unable to init cond file %s line %d rc=%d\n",
		    __FILE__, __LINE__, rc);
d77 3
a79 2
void
rf_clean_mcpair(RF_MCPair_t *t)
d85 3
a87 2
void
rf_ShutdownMCPair(void *ignored)
d89 1
a89 2
	RF_FREELIST_DESTROY_CLEAN(rf_mcpair_freelist, next, (RF_MCPair_t *),
	    rf_clean_mcpair);
d92 3
a94 2
int
rf_ConfigureMCPair(RF_ShutdownList_t **listp)
d96 1
a96 1
	int rc;
d102 2
a103 2
		RF_ERRORMSG3("Unable to add to shutdown list file %s line %d"
		    " rc=%d\n", __FILE__, __LINE__, rc);
d108 1
a108 1
	    (RF_MCPair_t *), rf_init_mcpair);
d113 1
a113 1
rf_AllocMCPair(void)
d117 1
a117 2
	RF_FREELIST_GET_INIT(rf_mcpair_freelist, t, next, (RF_MCPair_t *),
	    rf_init_mcpair);
d125 3
a127 2
void
rf_FreeMCPair(RF_MCPair_t *t)
d129 1
a129 1
	RF_FREELIST_FREE_CLEAN(rf_mcpair_freelist, t, next, rf_clean_mcpair);
d131 4
a134 7

/*
 * The callback function used to wake you up when you use an mcpair to wait
 * for something.
 */
void
rf_MCPairWakeupFunc(RF_MCPair_t *mcpair)
d141 3
a143 5
	wakeup(&(mcpair->flag)); /* XXX Does this do anything useful !!!  GO */
	/*
	 * XXX
	 * Looks like the following is needed to truly get the
	 * functionality they were looking for here...  This could be a
d145 2
a146 4
	 * though...
	 * XXX
	 */
	wakeup(&(mcpair->cond));	/* XXX XXX XXX GO */
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_mcpair.c,v 1.1 1998/11/13 04:20:31 oster Exp $	*/
/*	$NetBSD: rf_mcpair.c,v 1.1 1998/11/13 04:20:31 oster Exp $	*/
a34 47
/* :  
 * Log: rf_mcpair.c,v 
 * Revision 1.16  1996/06/19 22:23:01  jimz
 * parity verification is now a layout-configurable thing
 * not all layouts currently support it (correctly, anyway)
 *
 * Revision 1.15  1996/06/17  03:18:04  jimz
 * include shutdown.h for macroized ShutdownCreate
 *
 * Revision 1.14  1996/06/10  11:55:47  jimz
 * Straightened out some per-array/not-per-array distinctions, fixed
 * a couple bugs related to confusion. Added shutdown lists. Removed
 * layout shutdown function (now subsumed by shutdown lists).
 *
 * Revision 1.13  1996/06/05  18:06:02  jimz
 * Major code cleanup. The Great Renaming is now done.
 * Better modularity. Better typing. Fixed a bunch of
 * synchronization bugs. Made a lot of global stuff
 * per-desc or per-array. Removed dead code.
 *
 * Revision 1.12  1996/06/02  17:31:48  jimz
 * Moved a lot of global stuff into array structure, where it belongs.
 * Fixed up paritylogging, pss modules in this manner. Some general
 * code cleanup. Removed lots of dead code, some dead files.
 *
 * Revision 1.11  1996/05/30  23:22:16  jimz
 * bugfixes of serialization, timing problems
 * more cleanup
 *
 * Revision 1.10  1996/05/20  16:15:22  jimz
 * switch to rf_{mutex,cond}_{init,destroy}
 *
 * Revision 1.9  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.8  1996/05/16  16:04:42  jimz
 * convert to return-val on FREELIST init
 *
 * Revision 1.7  1996/05/16  14:47:21  jimz
 * rewrote to use RF_FREELIST
 *
 * Revision 1.6  1995/12/01  19:25:43  root
 * added copyright info
 *
 */

a41 1
#if (defined(__NetBSD__) || defined(__OpenBSD__)) && defined(_KERNEL)
a42 1
#endif
d55 3
a57 3

static int init_mcpair(t)
  RF_MCPair_t  *t;
d59 1
a59 1
	int rc;
d64 2
a65 2
			__LINE__, rc);
		return(rc);
d70 1
a70 1
			__LINE__, rc);
d72 1
a72 1
		return(rc);
d74 1
a74 1
	return(0);
d77 3
a79 2
static void clean_mcpair(t)
  RF_MCPair_t  *t;
d85 3
a87 2
static void rf_ShutdownMCPair(ignored)
  void  *ignored;
d89 1
a89 1
	RF_FREELIST_DESTROY_CLEAN(rf_mcpair_freelist,next,(RF_MCPair_t *),clean_mcpair);
d92 3
a94 2
int rf_ConfigureMCPair(listp)
  RF_ShutdownList_t  **listp;
d96 1
a96 1
	int rc;
d99 1
a99 1
		RF_MCPAIR_INC, sizeof(RF_MCPair_t));
d103 1
a103 1
			__FILE__, __LINE__, rc);
d105 1
a105 1
		return(rc);
d107 3
a109 3
	RF_FREELIST_PRIME_INIT(rf_mcpair_freelist, RF_MCPAIR_INITIAL,next,
		(RF_MCPair_t *),init_mcpair);
	return(0);
d112 2
a113 1
RF_MCPair_t *rf_AllocMCPair()
d117 1
a117 1
	RF_FREELIST_GET_INIT(rf_mcpair_freelist,t,next,(RF_MCPair_t *),init_mcpair);
d122 1
a122 1
	return(t);
d125 3
a127 2
void rf_FreeMCPair(t)
  RF_MCPair_t   *t;
d129 1
a129 1
	RF_FREELIST_FREE_CLEAN(rf_mcpair_freelist,t,next,clean_mcpair);
a130 1

d132 3
a134 2
void rf_MCPairWakeupFunc(mcpair)
  RF_MCPair_t  *mcpair;
d139 1
a139 1
printf("MCPairWakeupFunc called!\n");
d141 2
a142 4
#ifdef KERNEL
	wakeup(&(mcpair->flag)); /* XXX Does this do anything useful!! GO */
	/*
	 * XXX Looks like the following is needed to truly get the 
d145 2
a146 8
	 * though... XXX
	 */
#if (defined(__NetBSD__) || defined(__OpenBSD__)) && defined(_KERNEL)
	wakeup(&(mcpair->cond)); /* XXX XXX XXX GO */
#endif
#else /* KERNEL */
	RF_SIGNAL_COND(mcpair->cond);
#endif /* KERNEL */
@

