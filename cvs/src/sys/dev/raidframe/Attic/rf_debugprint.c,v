head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.16
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2002.12.16.07.01.03;	author tdeval;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.02.34;	author niklas;	state Exp;
branches
	1.2.6.1
	1.2.16.1;
next	1.1;

1.1
date	99.01.11.14.29.13;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.28.00.38.27;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2003.05.19.22.21.51;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_debugprint.c,v 1.3 2002/12/16 07:01:03 tdeval Exp $	*/
/*	$NetBSD: rf_debugprint.c,v 1.3 1999/02/05 00:06:08 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*
 * Code to do debug printfs. Calls to rf_debug_printf cause the corresponding
 * information to be printed to a circular buffer rather than the screen.
 * The point is to try and minimize the timing variations induced by the
 * printfs, and to capture only the printf's immediately preceding a failure.
 */

#include "rf_types.h"
#include "rf_threadstuff.h"
#include "rf_debugprint.h"
#include "rf_general.h"
#include "rf_options.h"

#include <sys/param.h>

struct RF_Entry_s {
	char	*cstring;
	void	*a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8;
};

/* space for 1k lines */
#define	BUFSHIFT		   10
#define	BUFSIZE		(1<<BUFSHIFT)
#define	BUFMASK		  (BUFSIZE-1)

static struct RF_Entry_s rf_debugprint_buf[BUFSIZE];
static int rf_debugprint_index = 0;
RF_DECLARE_STATIC_MUTEX(rf_debug_print_mutex);

int
rf_ConfigureDebugPrint(RF_ShutdownList_t **listp)
{
	int rc;

	rc = rf_create_managed_mutex(listp, &rf_debug_print_mutex);
	if (rc) {
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d\n",
		    __FILE__, __LINE__, rc);
		return (rc);
	}

	rf_clear_debug_print_buffer();
	return (0);
}

void
rf_clear_debug_print_buffer(void)
{
	int i;

	for (i = 0; i < BUFSIZE; i++)
		rf_debugprint_buf[i].cstring = NULL;
	rf_debugprint_index = 0;
}

void
rf_debug_printf(char *s, void *a1, void *a2, void *a3, void *a4, void *a5,
    void *a6, void *a7, void *a8)
{
	int idx;

	if (rf_debugPrintUseBuffer) {

		RF_LOCK_MUTEX(rf_debug_print_mutex);
		idx = rf_debugprint_index;
		rf_debugprint_index = (rf_debugprint_index + 1) & BUFMASK;
		RF_UNLOCK_MUTEX(rf_debug_print_mutex);

		rf_debugprint_buf[idx].cstring = s;
		rf_debugprint_buf[idx].a1 = a1;
		rf_debugprint_buf[idx].a2 = a2;
		rf_debugprint_buf[idx].a3 = a3;
		rf_debugprint_buf[idx].a4 = a4;
		rf_debugprint_buf[idx].a5 = a5;
		rf_debugprint_buf[idx].a6 = a6;
		rf_debugprint_buf[idx].a7 = a7;
		rf_debugprint_buf[idx].a8 = a8;
	} else {
		printf(s, a1, a2, a3, a4, a5, a6, a7, a8);
	}
}

void
rf_print_debug_buffer(void)
{
	rf_spill_debug_buffer(NULL);
}

void
rf_spill_debug_buffer(char *fname)
{
	int i;

	if (!rf_debugPrintUseBuffer)
		return;

	RF_LOCK_MUTEX(rf_debug_print_mutex);

	for (i = rf_debugprint_index + 1; i != rf_debugprint_index;
	     i = (i + 1) & BUFMASK)
		if (rf_debugprint_buf[i].cstring)
			printf(rf_debugprint_buf[i].cstring,
			    rf_debugprint_buf[i].a1, rf_debugprint_buf[i].a2,
			    rf_debugprint_buf[i].a3, rf_debugprint_buf[i].a4,
			    rf_debugprint_buf[i].a5, rf_debugprint_buf[i].a6,
			    rf_debugprint_buf[i].a7, rf_debugprint_buf[i].a8);

	printf(rf_debugprint_buf[i].cstring,
	    rf_debugprint_buf[i].a1, rf_debugprint_buf[i].a2,
	    rf_debugprint_buf[i].a3, rf_debugprint_buf[i].a4,
	    rf_debugprint_buf[i].a5, rf_debugprint_buf[i].a6,
	    rf_debugprint_buf[i].a7, rf_debugprint_buf[i].a8);

	RF_UNLOCK_MUTEX(rf_debug_print_mutex);
}
@


1.3
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_debugprint.c,v 1.2 1999/02/16 00:02:34 niklas Exp $	*/
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_debugprint.c,v 1.1 1999/01/11 14:29:13 niklas Exp $	*/
d3 1
d47 2
a48 2
	char   *cstring;
	void   *a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8;
d50 1
d52 3
a54 3
#define BUFSHIFT 10
#define BUFSIZE  (1<<BUFSHIFT)
#define BUFMASK  (BUFSIZE-1)
d58 4
a61 3
RF_DECLARE_STATIC_MUTEX(rf_debug_print_mutex)
	int     rf_ConfigureDebugPrint(listp)
	RF_ShutdownList_t **listp;
d63 1
a63 1
	int     rc;
d67 2
a68 2
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d\n", __FILE__,
		    __LINE__, rc);
d71 1
d76 2
a77 2
void 
rf_clear_debug_print_buffer()
d79 1
a79 1
	int     i;
d86 3
a88 4
void 
rf_debug_printf(s, a1, a2, a3, a4, a5, a6, a7, a8)
	char   *s;
	void   *a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8;
d90 1
a90 1
	int     idx;
d113 2
a114 2
void 
rf_print_debug_buffer()
d119 2
a120 3
void 
rf_spill_debug_buffer(fname)
	char   *fname;
d122 1
a122 1
	int     i;
d129 2
a130 1
	for (i = rf_debugprint_index + 1; i != rf_debugprint_index; i = (i + 1) & BUFMASK)
d132 12
a143 4
			printf(rf_debugprint_buf[i].cstring, rf_debugprint_buf[i].a1, rf_debugprint_buf[i].a2, rf_debugprint_buf[i].a3,
			    rf_debugprint_buf[i].a4, rf_debugprint_buf[i].a5, rf_debugprint_buf[i].a6, rf_debugprint_buf[i].a7, rf_debugprint_buf[i].a8);
	printf(rf_debugprint_buf[i].cstring, rf_debugprint_buf[i].a1, rf_debugprint_buf[i].a2, rf_debugprint_buf[i].a3,
	    rf_debugprint_buf[i].a4, rf_debugprint_buf[i].a5, rf_debugprint_buf[i].a6, rf_debugprint_buf[i].a7, rf_debugprint_buf[i].a8);
@


1.2.16.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d46 2
a47 2
	char	*cstring;
	void	*a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8;
a48 1

d50 3
a52 3
#define	BUFSHIFT		   10
#define	BUFSIZE		(1<<BUFSHIFT)
#define	BUFMASK		  (BUFSIZE-1)
d56 3
a58 4
RF_DECLARE_STATIC_MUTEX(rf_debug_print_mutex);

int
rf_ConfigureDebugPrint(RF_ShutdownList_t **listp)
d60 1
a60 1
	int rc;
d64 2
a65 2
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d\n",
		    __FILE__, __LINE__, rc);
a67 1

d72 2
a73 2
void
rf_clear_debug_print_buffer(void)
d75 1
a75 1
	int i;
d82 4
a85 3
void
rf_debug_printf(char *s, void *a1, void *a2, void *a3, void *a4, void *a5,
    void *a6, void *a7, void *a8)
d87 1
a87 1
	int idx;
d110 2
a111 2
void
rf_print_debug_buffer(void)
d116 3
a118 2
void
rf_spill_debug_buffer(char *fname)
d120 1
a120 1
	int i;
d127 1
a127 2
	for (i = rf_debugprint_index + 1; i != rf_debugprint_index;
	     i = (i + 1) & BUFMASK)
d129 4
a132 12
			printf(rf_debugprint_buf[i].cstring,
			    rf_debugprint_buf[i].a1, rf_debugprint_buf[i].a2,
			    rf_debugprint_buf[i].a3, rf_debugprint_buf[i].a4,
			    rf_debugprint_buf[i].a5, rf_debugprint_buf[i].a6,
			    rf_debugprint_buf[i].a7, rf_debugprint_buf[i].a8);

	printf(rf_debugprint_buf[i].cstring,
	    rf_debugprint_buf[i].a1, rf_debugprint_buf[i].a2,
	    rf_debugprint_buf[i].a3, rf_debugprint_buf[i].a4,
	    rf_debugprint_buf[i].a5, rf_debugprint_buf[i].a6,
	    rf_debugprint_buf[i].a7, rf_debugprint_buf[i].a8);

@


1.2.6.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d46 2
a47 2
	char	*cstring;
	void	*a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8;
a48 1

d50 3
a52 3
#define	BUFSHIFT		   10
#define	BUFSIZE		(1<<BUFSHIFT)
#define	BUFMASK		  (BUFSIZE-1)
d56 3
a58 4
RF_DECLARE_STATIC_MUTEX(rf_debug_print_mutex);

int
rf_ConfigureDebugPrint(RF_ShutdownList_t **listp)
d60 1
a60 1
	int rc;
d64 2
a65 2
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d\n",
		    __FILE__, __LINE__, rc);
a67 1

d72 2
a73 2
void
rf_clear_debug_print_buffer(void)
d75 1
a75 1
	int i;
d82 4
a85 3
void
rf_debug_printf(char *s, void *a1, void *a2, void *a3, void *a4, void *a5,
    void *a6, void *a7, void *a8)
d87 1
a87 1
	int idx;
d110 2
a111 2
void
rf_print_debug_buffer(void)
d116 3
a118 2
void
rf_spill_debug_buffer(char *fname)
d120 1
a120 1
	int i;
d127 1
a127 2
	for (i = rf_debugprint_index + 1; i != rf_debugprint_index;
	     i = (i + 1) & BUFMASK)
d129 4
a132 12
			printf(rf_debugprint_buf[i].cstring,
			    rf_debugprint_buf[i].a1, rf_debugprint_buf[i].a2,
			    rf_debugprint_buf[i].a3, rf_debugprint_buf[i].a4,
			    rf_debugprint_buf[i].a5, rf_debugprint_buf[i].a6,
			    rf_debugprint_buf[i].a7, rf_debugprint_buf[i].a8);

	printf(rf_debugprint_buf[i].cstring,
	    rf_debugprint_buf[i].a1, rf_debugprint_buf[i].a2,
	    rf_debugprint_buf[i].a3, rf_debugprint_buf[i].a4,
	    rf_debugprint_buf[i].a5, rf_debugprint_buf[i].a6,
	    rf_debugprint_buf[i].a7, rf_debugprint_buf[i].a8);

@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_debugprint.c,v 1.1 1998/11/13 04:20:28 oster Exp $	*/
/*	$NetBSD: rf_debugprint.c,v 1.1 1998/11/13 04:20:28 oster Exp $	*/
d30 1
a30 1
/* 
a36 41
/* :  
 * Log: rf_debugprint.c,v 
 * Revision 1.13  1996/08/07 21:08:31  jimz
 * remove bogus ; from mutex decl
 *
 * Revision 1.12  1996/06/10  11:55:47  jimz
 * Straightened out some per-array/not-per-array distinctions, fixed
 * a couple bugs related to confusion. Added shutdown lists. Removed
 * layout shutdown function (now subsumed by shutdown lists).
 *
 * Revision 1.11  1996/06/05  18:06:02  jimz
 * Major code cleanup. The Great Renaming is now done.
 * Better modularity. Better typing. Fixed a bunch of
 * synchronization bugs. Made a lot of global stuff
 * per-desc or per-array. Removed dead code.
 *
 * Revision 1.10  1996/05/30  23:22:16  jimz
 * bugfixes of serialization, timing problems
 * more cleanup
 *
 * Revision 1.9  1996/05/27  18:56:37  jimz
 * more code cleanup
 * better typing
 * compiles in all 3 environments
 *
 * Revision 1.8  1996/05/23  00:33:23  jimz
 * code cleanup: move all debug decls to rf_options.c, all extern
 * debug decls to rf_options.h, all debug vars preceded by rf_
 *
 * Revision 1.7  1996/05/20  16:16:06  jimz
 * switch to rf_{mutex,cond}_{init,destroy}
 *
 * Revision 1.6  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.5  1995/12/01  16:00:45  root
 * added copyright info
 *
 */

d46 2
a47 2
   char *cstring;
   void *a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8;
a48 1

d57 2
a58 3

int rf_ConfigureDebugPrint(listp)
  RF_ShutdownList_t  **listp;
d60 1
a60 1
  int rc;
d62 8
a69 8
  rc = rf_create_managed_mutex(listp, &rf_debug_print_mutex);
  if (rc) {
    RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d\n", __FILE__,
      __LINE__, rc);
    return(rc);
  }
  rf_clear_debug_print_buffer();
  return(0);
d72 2
a73 1
void rf_clear_debug_print_buffer()
d75 1
a75 1
  int i;
d77 3
a79 3
  for (i=0; i<BUFSIZE; i++)
    rf_debugprint_buf[i].cstring = NULL;
  rf_debugprint_index = 0;
d82 4
a85 3
void rf_debug_printf(s,a1,a2,a3,a4,a5,a6,a7,a8)
char *s;
void *a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8;
d87 1
a87 1
  int idx;
d89 1
a89 1
  if (rf_debugPrintUseBuffer) {
d91 17
a107 18
    RF_LOCK_MUTEX(rf_debug_print_mutex);
    idx = rf_debugprint_index;
    rf_debugprint_index = (rf_debugprint_index+1) & BUFMASK;
    RF_UNLOCK_MUTEX(rf_debug_print_mutex);

    rf_debugprint_buf[idx].cstring = s;
    rf_debugprint_buf[idx].a1 = a1;
    rf_debugprint_buf[idx].a2 = a2;
    rf_debugprint_buf[idx].a3 = a3;
    rf_debugprint_buf[idx].a4 = a4;
    rf_debugprint_buf[idx].a5 = a5;
    rf_debugprint_buf[idx].a6 = a6;
    rf_debugprint_buf[idx].a7 = a7;
    rf_debugprint_buf[idx].a8 = a8;
  }
  else {
    printf(s,a1,a2,a3,a4,a5,a6,a7,a8);
  }
d110 2
a111 1
void rf_print_debug_buffer()
d113 1
a113 1
  rf_spill_debug_buffer(NULL);
d116 3
a118 2
void rf_spill_debug_buffer(fname)
  char  *fname;
d120 14
a133 26
  int i;
#ifndef KERNEL
  FILE *fp;
#endif /* !KERNEL */

  if (!rf_debugPrintUseBuffer)
    return;

  RF_LOCK_MUTEX(rf_debug_print_mutex);
#ifndef KERNEL
  fp = (fname) ? fopen(fname,"w") : stdout;
  if (!fp) {printf("Unable to open file %s for writing\n",fname); return;}
  for (i=rf_debugprint_index+1; i != rf_debugprint_index; i = (i+1)&BUFMASK) if (rf_debugprint_buf[i].cstring)
    fprintf(fp,rf_debugprint_buf[i].cstring,rf_debugprint_buf[i].a1,rf_debugprint_buf[i].a2,rf_debugprint_buf[i].a3,
	    rf_debugprint_buf[i].a4,rf_debugprint_buf[i].a5,rf_debugprint_buf[i].a6,rf_debugprint_buf[i].a7,rf_debugprint_buf[i].a8);
  fprintf(fp,rf_debugprint_buf[i].cstring,rf_debugprint_buf[i].a1,rf_debugprint_buf[i].a2,rf_debugprint_buf[i].a3,
	  rf_debugprint_buf[i].a4,rf_debugprint_buf[i].a5,rf_debugprint_buf[i].a6,rf_debugprint_buf[i].a7,rf_debugprint_buf[i].a8);
  fclose(fp);
#else /* !KERNEL */
  for (i=rf_debugprint_index+1; i != rf_debugprint_index; i = (i+1)&BUFMASK) if (rf_debugprint_buf[i].cstring)
    printf(rf_debugprint_buf[i].cstring,rf_debugprint_buf[i].a1,rf_debugprint_buf[i].a2,rf_debugprint_buf[i].a3,
	   rf_debugprint_buf[i].a4,rf_debugprint_buf[i].a5,rf_debugprint_buf[i].a6,rf_debugprint_buf[i].a7,rf_debugprint_buf[i].a8);
  printf(rf_debugprint_buf[i].cstring,rf_debugprint_buf[i].a1,rf_debugprint_buf[i].a2,rf_debugprint_buf[i].a3,
	 rf_debugprint_buf[i].a4,rf_debugprint_buf[i].a5,rf_debugprint_buf[i].a6,rf_debugprint_buf[i].a7,rf_debugprint_buf[i].a8);
#endif /* !KERNEL */
  RF_UNLOCK_MUTEX(rf_debug_print_mutex);
@

