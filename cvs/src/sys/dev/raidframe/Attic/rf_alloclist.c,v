head	1.6;
access;
symbols
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.34
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.32
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.28
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.30
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.26
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.24
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.22
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.20
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.18
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.16
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.14
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.12
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.10
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.8
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.3.0.16
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.14
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.12
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.10
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.8
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.2
	SMP_BASE:1.3
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.5;

1.5
date	2011.06.21.16.46.00;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2002.12.16.07.01.03;	author tdeval;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.07.14.50.19;	author peter;	state Exp;
branches
	1.3.2.1
	1.3.12.1;
next	1.2;

1.2
date	99.02.16.00.02.23;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.28.58;	author niklas;	state Exp;
branches;
next	;

1.3.2.1
date	2003.03.28.00.38.26;	author niklas;	state Exp;
branches;
next	;

1.3.12.1
date	2003.05.19.22.21.50;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_alloclist.c,v 1.5 2011/06/21 16:46:00 tedu Exp $	*/
/*	$NetBSD: rf_alloclist.c,v 1.4 1999/08/13 03:41:53 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/****************************************************************************
 *
 * Alloclist.c -- Code to manipulate allocation lists.
 *
 * An allocation list is just a list of AllocListElem structures. Each
 * such structure contains a fixed-size array of pointers. Calling
 * FreeAList() causes each pointer to be freed.
 *
 ***************************************************************************/

#include "rf_types.h"
#include "rf_threadstuff.h"
#include "rf_alloclist.h"
#include "rf_debugMem.h"
#include "rf_etimer.h"
#include "rf_general.h"
#include "rf_shutdown.h"

RF_DECLARE_STATIC_MUTEX(alist_mutex);
static unsigned int fl_hit_count, fl_miss_count;

static RF_AllocListElem_t *al_free_list = NULL;
static int al_free_list_count;

#define	RF_AL_FREELIST_MAX	256

#define	DO_FREE(_p,_sz)		RF_Free((_p), (_sz))

void rf_ShutdownAllocList(void *);

void
rf_ShutdownAllocList(void *ignored)
{
	RF_AllocListElem_t *p, *pt;

	for (p = al_free_list; p;) {
		pt = p;
		p = p->next;
		DO_FREE(pt, sizeof(*pt));
	}
	rf_mutex_destroy(&alist_mutex);
	/*
	 * printf("Alloclist: Free list hit count %lu (%lu %%) miss count %lu"
	 *     " (%lu %%).\n", fl_hit_count,
	 *     (100*fl_hit_count)/(fl_hit_count+fl_miss_count),
	 *     fl_miss_count, (100*fl_miss_count)/(fl_hit_count+fl_miss_count));
	 */
}

int
rf_ConfigureAllocList(RF_ShutdownList_t **listp)
{
	int rc;

	rc = rf_mutex_init(&alist_mutex);
	if (rc) {
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d.\n",
		    __FILE__, __LINE__, rc);
		return (rc);
	}
	al_free_list = NULL;
	fl_hit_count = fl_miss_count = al_free_list_count = 0;
	rc = rf_ShutdownCreate(listp, rf_ShutdownAllocList, NULL);
	if (rc) {
		RF_ERRORMSG3("Unable to add to shutdown list file %s line %d"
		    " rc=%d.\n", __FILE__, __LINE__, rc);
		rf_mutex_destroy(&alist_mutex);
		return (rc);
	}
	return (0);
}


/*
 * We expect the lists to have at most one or two elements, so we're willing
 * to search for the end. If you ever observe the lists growing longer,
 * increase POINTERS_PER_ALLOC_LIST_ELEMENT.
 */
void
rf_real_AddToAllocList(RF_AllocListElem_t *l, void *p, int size, int lockflag)
{
	RF_AllocListElem_t *newelem;

	for (; l->next; l = l->next)
		RF_ASSERT(l->numPointers == RF_POINTERS_PER_ALLOC_LIST_ELEMENT);	/* Find end of list. */

	RF_ASSERT(l->numPointers >= 0 &&
	    l->numPointers <= RF_POINTERS_PER_ALLOC_LIST_ELEMENT);
	if (l->numPointers == RF_POINTERS_PER_ALLOC_LIST_ELEMENT) {
		newelem = rf_real_MakeAllocList(lockflag);
		l->next = newelem;
		l = newelem;
	}
	l->pointers[l->numPointers] = p;
	l->sizes[l->numPointers] = size;
	l->numPointers++;

}


/*
 * We use the debug_mem_mutex here because we need to lock it anyway to call
 * free. This is probably a bug somewhere else in the code, but when I call
 * malloc/free outside of any lock, I have endless trouble with malloc
 * appearing to return the same pointer twice. Since we have to lock it
 * anyway, we might as well use it as the lock around the al_free_list.
 * Note that we can't call Free with the debug_mem_mutex locked.
 */
void
rf_FreeAllocList(RF_AllocListElem_t *l)
{
	int i;
	RF_AllocListElem_t *temp, *p;

	for (p = l; p; p = p->next) {
		RF_ASSERT(p->numPointers >= 0 &&
		    p->numPointers <= RF_POINTERS_PER_ALLOC_LIST_ELEMENT);
		for (i = 0; i < p->numPointers; i++) {
			RF_ASSERT(p->pointers[i]);
			RF_Free(p->pointers[i], p->sizes[i]);
		}
	}
	while (l) {
		temp = l;
		l = l->next;
		if (al_free_list_count > RF_AL_FREELIST_MAX) {
			DO_FREE(temp, sizeof(*temp));
		} else {
			temp->next = al_free_list;
			al_free_list = temp;
			al_free_list_count++;
		}
	}
}

RF_AllocListElem_t *
rf_real_MakeAllocList(int lockflag)
{
	RF_AllocListElem_t *p;

	if (al_free_list) {
		fl_hit_count++;
		p = al_free_list;
		al_free_list = p->next;
		al_free_list_count--;
	} else {
		fl_miss_count++;
		RF_Malloc(p, sizeof(RF_AllocListElem_t),
		    (RF_AllocListElem_t *));	/*
						 * No allocation locking
						 * in kernel, so this is
						 * fine.
						 */
	}
	if (p == NULL) {
		return (NULL);
	}
	bzero(p, sizeof(RF_AllocListElem_t));
	return (p);
}
@


1.5
log
@remove stupid casts, ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_alloclist.c,v 1.4 2002/12/16 07:01:03 tdeval Exp $	*/
@


1.4
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_alloclist.c,v 1.3 2000/01/07 14:50:19 peter Exp $	*/
d188 1
a188 1
	bzero((char *) p, sizeof(RF_AllocListElem_t));
@


1.3
log
@sync with work by Greg Oster on NetBSD

Please note: This update has *only* been tested on i386 with IDE
disks. Could someone with a spare box please make sure all is OK with
SCSI and maybe other arches ? sparc testing will follow locally.

* remove rf_sys.h
* many changes to make it more stable
* some performance increases
* All raid threads now get their own kernel process and the calling
  raidctl(8) program will show status progress through a meter.
* In theory FFS_SOFTUPDATES and RAIDframe will now work together - NOT
  TESTED YET

See http://www.cs.usask.ca/staff/oster/raid.html

This updates include Greg's changes to Jan 4th 2000.

TODO:
* some odd behaviour when running raictl -c on an already config'ed
  raid set - problem founf, fix being done
* progress meter is in raidctl(8) - seperate commit, but could do with
  sync'ing with OpenBSD ftp version
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_alloclist.c,v 1.2 1999/02/16 00:02:23 niklas Exp $	*/
d3 1
d33 1
a33 1
 * Alloclist.c -- code to manipulate allocation lists
d35 2
a36 2
 * an allocation list is just a list of AllocListElem structures.  Each
 * such structure contains a fixed-size array of pointers.  Calling
d49 2
a50 2
RF_DECLARE_STATIC_MUTEX(alist_mutex)
	static unsigned int fl_hit_count, fl_miss_count;
d52 2
a53 2
	static RF_AllocListElem_t *al_free_list = NULL;
	static int al_free_list_count;
d55 1
a55 1
#define RF_AL_FREELIST_MAX 256
d57 1
a57 1
#define DO_FREE(_p,_sz) RF_Free((_p),(_sz))
d59 1
a59 1
	static void rf_ShutdownAllocList(void *);
d61 2
a62 2
	static void rf_ShutdownAllocList(ignored)
	void   *ignored;
d73 5
a77 4
        printf("Alloclist: Free list hit count %lu (%lu %%) miss count %lu (%lu %%)\n",
	       fl_hit_count, (100*fl_hit_count)/(fl_hit_count+fl_miss_count),
	       fl_miss_count, (100*fl_miss_count)/(fl_hit_count+fl_miss_count));
        */
d80 2
a81 3
int 
rf_ConfigureAllocList(listp)
	RF_ShutdownList_t **listp;
d83 1
a83 1
	int     rc;
d87 2
a88 2
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d\n", __FILE__,
		    __LINE__, rc);
d95 2
a96 2
		RF_ERRORMSG3("Unable to add to shutdown list file %s line %d rc=%d\n",
		    __FILE__, __LINE__, rc);
d104 3
a106 2
/* we expect the lists to have at most one or two elements, so we're willing
 * to search for the end.  If you ever observe the lists growing longer,
d109 2
a110 6
void 
rf_real_AddToAllocList(l, p, size, lockflag)
	RF_AllocListElem_t *l;
	void   *p;
	int     size;
	int     lockflag;
d115 1
a115 1
		RF_ASSERT(l->numPointers == RF_POINTERS_PER_ALLOC_LIST_ELEMENT);	/* find end of list */
d117 2
a118 1
	RF_ASSERT(l->numPointers >= 0 && l->numPointers <= RF_POINTERS_PER_ALLOC_LIST_ELEMENT);
d131 7
a137 6
/* we use the debug_mem_mutex here because we need to lock it anyway to call free.
 * this is probably a bug somewhere else in the code, but when I call malloc/free
 * outside of any lock I have endless trouble with malloc appearing to return the
 * same pointer twice.  Since we have to lock it anyway, we might as well use it
 * as the lock around the al_free_list.  Note that we can't call Free with the
 * debug_mem_mutex locked.
d139 2
a140 3
void 
rf_FreeAllocList(l)
	RF_AllocListElem_t *l;
d142 1
a142 1
	int     i;
d146 2
a147 1
		RF_ASSERT(p->numPointers >= 0 && p->numPointers <= RF_POINTERS_PER_ALLOC_LIST_ELEMENT);
d167 1
a167 2
rf_real_MakeAllocList(lockflag)
	int     lockflag;
d178 6
a183 3
		RF_Malloc(p, sizeof(RF_AllocListElem_t), (RF_AllocListElem_t *));	/* no allocation locking
											 * in kernel, so this is
											 * fine */
@


1.3.12.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d32 1
a32 1
 * Alloclist.c -- Code to manipulate allocation lists.
d34 2
a35 2
 * An allocation list is just a list of AllocListElem structures. Each
 * such structure contains a fixed-size array of pointers. Calling
d48 2
a49 2
RF_DECLARE_STATIC_MUTEX(alist_mutex);
static unsigned int fl_hit_count, fl_miss_count;
d51 2
a52 2
static RF_AllocListElem_t *al_free_list = NULL;
static int al_free_list_count;
d54 1
a54 1
#define	RF_AL_FREELIST_MAX	256
d56 1
a56 1
#define	DO_FREE(_p,_sz)		RF_Free((_p), (_sz))
d58 1
a58 1
void rf_ShutdownAllocList(void *);
d60 2
a61 2
void
rf_ShutdownAllocList(void *ignored)
d72 4
a75 5
	 * printf("Alloclist: Free list hit count %lu (%lu %%) miss count %lu"
	 *     " (%lu %%).\n", fl_hit_count,
	 *     (100*fl_hit_count)/(fl_hit_count+fl_miss_count),
	 *     fl_miss_count, (100*fl_miss_count)/(fl_hit_count+fl_miss_count));
	 */
d78 3
a80 2
int
rf_ConfigureAllocList(RF_ShutdownList_t **listp)
d82 1
a82 1
	int rc;
d86 2
a87 2
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d.\n",
		    __FILE__, __LINE__, rc);
d94 2
a95 2
		RF_ERRORMSG3("Unable to add to shutdown list file %s line %d"
		    " rc=%d.\n", __FILE__, __LINE__, rc);
d103 2
a104 3
/*
 * We expect the lists to have at most one or two elements, so we're willing
 * to search for the end. If you ever observe the lists growing longer,
d107 6
a112 2
void
rf_real_AddToAllocList(RF_AllocListElem_t *l, void *p, int size, int lockflag)
d117 1
a117 1
		RF_ASSERT(l->numPointers == RF_POINTERS_PER_ALLOC_LIST_ELEMENT);	/* Find end of list. */
d119 1
a119 2
	RF_ASSERT(l->numPointers >= 0 &&
	    l->numPointers <= RF_POINTERS_PER_ALLOC_LIST_ELEMENT);
d132 6
a137 7
/*
 * We use the debug_mem_mutex here because we need to lock it anyway to call
 * free. This is probably a bug somewhere else in the code, but when I call
 * malloc/free outside of any lock, I have endless trouble with malloc
 * appearing to return the same pointer twice. Since we have to lock it
 * anyway, we might as well use it as the lock around the al_free_list.
 * Note that we can't call Free with the debug_mem_mutex locked.
d139 3
a141 2
void
rf_FreeAllocList(RF_AllocListElem_t *l)
d143 1
a143 1
	int i;
d147 1
a147 2
		RF_ASSERT(p->numPointers >= 0 &&
		    p->numPointers <= RF_POINTERS_PER_ALLOC_LIST_ELEMENT);
d167 2
a168 1
rf_real_MakeAllocList(int lockflag)
d179 3
a181 6
		RF_Malloc(p, sizeof(RF_AllocListElem_t),
		    (RF_AllocListElem_t *));	/*
						 * No allocation locking
						 * in kernel, so this is
						 * fine.
						 */
@


1.3.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d32 1
a32 1
 * Alloclist.c -- Code to manipulate allocation lists.
d34 2
a35 2
 * An allocation list is just a list of AllocListElem structures. Each
 * such structure contains a fixed-size array of pointers. Calling
d48 2
a49 2
RF_DECLARE_STATIC_MUTEX(alist_mutex);
static unsigned int fl_hit_count, fl_miss_count;
d51 2
a52 2
static RF_AllocListElem_t *al_free_list = NULL;
static int al_free_list_count;
d54 1
a54 1
#define	RF_AL_FREELIST_MAX	256
d56 1
a56 1
#define	DO_FREE(_p,_sz)		RF_Free((_p), (_sz))
d58 1
a58 1
void rf_ShutdownAllocList(void *);
d60 2
a61 2
void
rf_ShutdownAllocList(void *ignored)
d72 4
a75 5
	 * printf("Alloclist: Free list hit count %lu (%lu %%) miss count %lu"
	 *     " (%lu %%).\n", fl_hit_count,
	 *     (100*fl_hit_count)/(fl_hit_count+fl_miss_count),
	 *     fl_miss_count, (100*fl_miss_count)/(fl_hit_count+fl_miss_count));
	 */
d78 3
a80 2
int
rf_ConfigureAllocList(RF_ShutdownList_t **listp)
d82 1
a82 1
	int rc;
d86 2
a87 2
		RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d.\n",
		    __FILE__, __LINE__, rc);
d94 2
a95 2
		RF_ERRORMSG3("Unable to add to shutdown list file %s line %d"
		    " rc=%d.\n", __FILE__, __LINE__, rc);
d103 2
a104 3
/*
 * We expect the lists to have at most one or two elements, so we're willing
 * to search for the end. If you ever observe the lists growing longer,
d107 6
a112 2
void
rf_real_AddToAllocList(RF_AllocListElem_t *l, void *p, int size, int lockflag)
d117 1
a117 1
		RF_ASSERT(l->numPointers == RF_POINTERS_PER_ALLOC_LIST_ELEMENT);	/* Find end of list. */
d119 1
a119 2
	RF_ASSERT(l->numPointers >= 0 &&
	    l->numPointers <= RF_POINTERS_PER_ALLOC_LIST_ELEMENT);
d132 6
a137 7
/*
 * We use the debug_mem_mutex here because we need to lock it anyway to call
 * free. This is probably a bug somewhere else in the code, but when I call
 * malloc/free outside of any lock, I have endless trouble with malloc
 * appearing to return the same pointer twice. Since we have to lock it
 * anyway, we might as well use it as the lock around the al_free_list.
 * Note that we can't call Free with the debug_mem_mutex locked.
d139 3
a141 2
void
rf_FreeAllocList(RF_AllocListElem_t *l)
d143 1
a143 1
	int i;
d147 1
a147 2
		RF_ASSERT(p->numPointers >= 0 &&
		    p->numPointers <= RF_POINTERS_PER_ALLOC_LIST_ELEMENT);
d167 2
a168 1
rf_real_MakeAllocList(int lockflag)
d179 3
a181 6
		RF_Malloc(p, sizeof(RF_AllocListElem_t),
		    (RF_AllocListElem_t *));	/*
						 * No allocation locking
						 * in kernel, so this is
						 * fine.
						 */
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_alloclist.c,v 1.1 1999/01/11 14:28:58 niklas Exp $	*/
/*	$NetBSD: rf_alloclist.c,v 1.3 1999/02/05 00:06:06 oster Exp $	*/
a46 1
#include "rf_sys.h"
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_alloclist.c,v 1.1 1998/11/13 04:20:26 oster Exp $	*/
/*	$NetBSD: rf_alloclist.c,v 1.1 1998/11/13 04:20:26 oster Exp $	*/
a29 100
/*
 * Log: rf_alloclist.c,v 
 * Revision 1.28  1996/07/27 23:36:08  jimz
 * Solaris port of simulator
 *
 * Revision 1.27  1996/06/12  03:29:54  jimz
 * don't barf just because we can't create an alloclist
 *
 * Revision 1.26  1996/06/10  11:55:47  jimz
 * Straightened out some per-array/not-per-array distinctions, fixed
 * a couple bugs related to confusion. Added shutdown lists. Removed
 * layout shutdown function (now subsumed by shutdown lists).
 *
 * Revision 1.25  1996/06/09  02:36:46  jimz
 * lots of little crufty cleanup- fixup whitespace
 * issues, comment #ifdefs, improve typing in some
 * places (esp size-related)
 *
 * Revision 1.24  1996/06/05  18:06:02  jimz
 * Major code cleanup. The Great Renaming is now done.
 * Better modularity. Better typing. Fixed a bunch of
 * synchronization bugs. Made a lot of global stuff
 * per-desc or per-array. Removed dead code.
 *
 * Revision 1.23  1996/05/30  23:22:16  jimz
 * bugfixes of serialization, timing problems
 * more cleanup
 *
 * Revision 1.22  1996/05/27  18:56:37  jimz
 * more code cleanup
 * better typing
 * compiles in all 3 environments
 *
 * Revision 1.21  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.20  1996/05/20  16:15:59  jimz
 * switch to rf_{mutex,cond}_{init,destroy}
 *
 * Revision 1.19  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.18  1996/05/16  22:27:45  jimz
 * get rid of surreal_MakeAllocList (what was that, anyway?)
 *
 * Revision 1.17  1995/12/12  18:10:06  jimz
 * MIN -> RF_MIN, MAX -> RF_MAX, ASSERT -> RF_ASSERT
 * fix 80-column brain damage in comments
 *
 * Revision 1.16  1995/11/30  16:27:07  wvcii
 * added copyright info
 *
 * Revision 1.15  1995/10/05  20:37:56  jimz
 * assert non-NULLness of pointer to FREE in FreeAllocList()
 *
 * Revision 1.14  1995/06/11  20:11:24  holland
 * changed fl_hist,miss_count from long to int to get around weird kernel bug
 *
 * Revision 1.13  1995/05/01  13:28:00  holland
 * parity range locks, locking disk requests, recon+parityscan in kernel, etc.
 *
 * Revision 1.12  1995/04/21  19:13:04  holland
 * minor change to avoid a syntax error on DO_FREE
 *
 * Revision 1.11  1995/02/17  19:39:56  holland
 * added size param to all calls to Free().
 * this is ignored at user level, but necessary in the kernel.
 *
 * Revision 1.10  1995/02/10  18:08:07  holland
 * added DO_FREE macro to fix what I broke during kernelization
 *
 * Revision 1.9  1995/02/10  17:34:10  holland
 * kernelization changes
 *
 * Revision 1.8  1995/02/03  22:31:36  holland
 * many changes related to kernelization
 *
 * Revision 1.7  1995/02/01  15:13:05  holland
 * moved #include of general.h out of raid.h and into each file
 *
 * Revision 1.6  1995/01/11  19:27:02  holland
 * many changes related to performance tuning
 *
 * Revision 1.5  1994/11/29  20:53:10  danner
 * Marks mods
 *
 * Revision 1.3  1994/11/19  21:01:07  danner
 * First merge with mark
 *
 * Revision 1.1.1.1  1994/11/19  20:23:38  danner
 * First PQ checkin
 *
 * Revision 1.2  1994/11/16  15:45:35  danner
 * fixed free bug in FreeAllocList
 *
 *
 */

d50 1
a50 1
static unsigned int fl_hit_count, fl_miss_count;
d52 2
a53 2
static RF_AllocListElem_t *al_free_list=NULL;
static int al_free_list_count;
a56 3
#ifndef KERNEL
#define DO_FREE(_p,_sz) free((_p))
#else /* !KERNEL */
a57 1
#endif /* !KERNEL */
d59 1
a59 1
static void rf_ShutdownAllocList(void *);
d61 2
a62 2
static void rf_ShutdownAllocList(ignored)
  void  *ignored;
d64 1
a64 1
  RF_AllocListElem_t *p, *pt;
d66 11
a76 11
  for (p = al_free_list; p; ) {
    pt = p;
    p = p->next;
    DO_FREE(pt, sizeof(*pt));
  }
  rf_mutex_destroy(&alist_mutex);
  /*
  printf("Alloclist: Free list hit count %lu (%lu %%) miss count %lu (%lu %%)\n",
	 fl_hit_count, (100*fl_hit_count)/(fl_hit_count+fl_miss_count),
	 fl_miss_count, (100*fl_miss_count)/(fl_hit_count+fl_miss_count));
  */
d79 3
a81 2
int rf_ConfigureAllocList(listp)
  RF_ShutdownList_t  **listp;
d83 1
a83 1
  int rc;
d85 16
a100 16
  rc = rf_mutex_init(&alist_mutex);
  if (rc) {
    RF_ERRORMSG3("Unable to init mutex file %s line %d rc=%d\n", __FILE__,
      __LINE__, rc);
    return(rc);
  }
  al_free_list = NULL;
  fl_hit_count = fl_miss_count = al_free_list_count = 0;
  rc = rf_ShutdownCreate(listp, rf_ShutdownAllocList, NULL);
  if (rc) {
    RF_ERRORMSG3("Unable to add to shutdown list file %s line %d rc=%d\n",
      __FILE__, __LINE__, rc);
    rf_mutex_destroy(&alist_mutex);
    return(rc);
  }
  return(0);
d108 6
a113 5
void rf_real_AddToAllocList(l, p, size, lockflag)
  RF_AllocListElem_t  *l;
  void                *p;
  int                  size;
  int                  lockflag;
d115 4
a118 1
  RF_AllocListElem_t *newelem;
d120 9
a128 12
  for ( ; l->next; l=l->next) 
	  RF_ASSERT(l->numPointers == RF_POINTERS_PER_ALLOC_LIST_ELEMENT);  /* find end of list */
  
  RF_ASSERT(l->numPointers >= 0 && l->numPointers <= RF_POINTERS_PER_ALLOC_LIST_ELEMENT);
  if (l->numPointers == RF_POINTERS_PER_ALLOC_LIST_ELEMENT) {
    newelem = rf_real_MakeAllocList(lockflag);
    l->next = newelem;
    l = newelem;
  }
  l->pointers[ l->numPointers ] = p;
  l->sizes   [ l->numPointers ] = size;
  l->numPointers++;
d140 3
a142 2
void rf_FreeAllocList(l)
  RF_AllocListElem_t  *l;
d144 2
a145 2
  int i;
  RF_AllocListElem_t *temp, *p;
d147 18
a164 19
  for (p=l; p; p=p->next) {
    RF_ASSERT(p->numPointers >= 0 && p->numPointers <= RF_POINTERS_PER_ALLOC_LIST_ELEMENT);
    for (i=0; i<p->numPointers; i++) {
      RF_ASSERT(p->pointers[i]);
      RF_Free(p->pointers[i], p->sizes[i]);
    }
  }
#ifndef KERNEL
  RF_LOCK_MUTEX(rf_debug_mem_mutex);
#endif /* !KERNEL */
  while (l) {
    temp = l;
    l = l->next;
    if (al_free_list_count > RF_AL_FREELIST_MAX) {DO_FREE(temp, sizeof(*temp));}
    else {temp->next = al_free_list; al_free_list = temp; al_free_list_count++;}
  }
#ifndef KERNEL
  RF_UNLOCK_MUTEX(rf_debug_mem_mutex);
#endif /* !KERNEL */
d167 3
a169 2
RF_AllocListElem_t *rf_real_MakeAllocList(lockflag)
  int  lockflag;
d171 1
a171 1
  RF_AllocListElem_t *p;
d173 16
a188 20
#ifndef KERNEL
  if (lockflag) {  RF_LOCK_MUTEX(rf_debug_mem_mutex); }
#endif /* !KERNEL */
  if (al_free_list) {fl_hit_count++; p = al_free_list; al_free_list = p->next; al_free_list_count--;}
  else {
    fl_miss_count++;
#ifndef KERNEL
    p = (RF_AllocListElem_t *) malloc(sizeof(RF_AllocListElem_t));  /* can't use Malloc at user level b/c we already locked the mutex */
#else /* !KERNEL */
    RF_Malloc(p, sizeof(RF_AllocListElem_t), (RF_AllocListElem_t *));  /* no allocation locking in kernel, so this is fine */
#endif /* !KERNEL */
  }
#ifndef KERNEL
  if (lockflag) {  RF_UNLOCK_MUTEX(rf_debug_mem_mutex); }
#endif /* !KERNEL */
  if (p == NULL) {
    return(NULL);
  }
  bzero((char *)p, sizeof(RF_AllocListElem_t));
  return(p);
@

