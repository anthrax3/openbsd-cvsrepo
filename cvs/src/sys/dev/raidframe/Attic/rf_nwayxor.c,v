head	1.5;
access;
symbols
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.38
	OPENBSD_5_0:1.4.0.36
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.34
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.32
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.28
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.30
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.26
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.24
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.22
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.20
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.18
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.16
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.14
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.12
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.10
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.8
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.8
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.6
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.4;

1.4
date	2002.12.16.07.01.04;	author tdeval;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.08.16.07.43;	author peter;	state Exp;
branches
	1.3.8.1;
next	1.2;

1.2
date	99.02.16.00.03.00;	author niklas;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	99.01.11.14.29.31;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2001.05.14.22.26.12;	author niklas;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2003.03.28.00.38.28;	author niklas;	state Exp;
branches;
next	;

1.3.8.1
date	2003.05.19.22.21.52;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_nwayxor.c,v 1.4 2002/12/16 07:01:04 tdeval Exp $	*/
/*	$NetBSD: rf_nwayxor.c,v 1.4 2000/03/30 12:45:41 augustss Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland, Daniel Stodolsky
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*************************************************************
 *
 * nwayxor.c -- Code to do N-way xors for reconstruction.
 *
 * nWayXorN xors N input buffers into the destination buffer.
 * Adapted from danner's longword_bxor code.
 *
 *************************************************************/

#include "rf_nwayxor.h"
#include "rf_shutdown.h"

static int callcount[10];
void rf_ShutdownNWayXor(void *);

void
rf_ShutdownNWayXor(void *ignored)
{
	int i;

	if (rf_showXorCallCounts == 0)
		return;
	printf("Call counts for n-way xor routines:  ");
	for (i = 0; i < 10; i++)
		printf("%d ", callcount[i]);
	printf("\n");
}

int
rf_ConfigureNWayXor(RF_ShutdownList_t **listp)
{
	int i, rc;

	for (i = 0; i < 10; i++)
		callcount[i] = 0;
	rc = rf_ShutdownCreate(listp, rf_ShutdownNWayXor, NULL);
	return (rc);
}

void
rf_nWayXor1(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
{
	unsigned long *src = (unsigned long *) src_rbs[0]->buffer;
	unsigned long *dest = (unsigned long *) dest_rb->buffer;
	unsigned long *end = src + len;
	unsigned long d0, d1, d2, d3, s0, s1, s2, s3;

	callcount[1]++;
	while (len >= 4) {
		d0 = dest[0];
		d1 = dest[1];
		d2 = dest[2];
		d3 = dest[3];
		s0 = src[0];
		s1 = src[1];
		s2 = src[2];
		s3 = src[3];
		dest[0] = d0 ^ s0;
		dest[1] = d1 ^ s1;
		dest[2] = d2 ^ s2;
		dest[3] = d3 ^ s3;
		src += 4;
		dest += 4;
		len -= 4;
	}
	while (src < end) {
		*dest++ ^= *src++;
	}
}

void
rf_nWayXor2(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
{
	unsigned long *dst = (unsigned long *) dest_rb->buffer;
	unsigned long *a = dst;
	unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	unsigned long a0, a1, a2, a3, b0, b1, b2, b3;

	callcount[2]++;
	/* Align dest to cache line. */
	while ((((unsigned long) dst) & 0x1f)) {
		*dst++ = *a++ ^ *b++ ^ *c++;
		len--;
	}
	while (len > 4) {
		a0 = a[0];
		len -= 4;

		a1 = a[1];
		a2 = a[2];

		a3 = a[3];
		a += 4;

		b0 = b[0];
		b1 = b[1];

		b2 = b[2];
		b3 = b[3];
		/* Start dual issue. */
		a0 ^= b0;
		b0 = c[0];

		b += 4;
		a1 ^= b1;

		a2 ^= b2;
		a3 ^= b3;

		b1 = c[1];
		a0 ^= b0;

		b2 = c[2];
		a1 ^= b1;

		b3 = c[3];
		a2 ^= b2;

		dst[0] = a0;
		a3 ^= b3;
		dst[1] = a1;
		c += 4;
		dst[2] = a2;
		dst[3] = a3;
		dst += 4;
	}
	while (len) {
		*dst++ = *a++ ^ *b++ ^ *c++;
		len--;
	}
}

/* Note that first arg is not incremented but 2nd arg is. */
#define	LOAD_FIRST(_dst,_b)						\
	a0 = _dst[0]; len -= 4;						\
	a1 = _dst[1];							\
	a2 = _dst[2];							\
	a3 = _dst[3];							\
	b0 = _b[0];							\
	b1 = _b[1];							\
	b2 = _b[2];							\
	b3 = _b[3];  _b += 4;

/* Note: arg is incremented. */
#define	XOR_AND_LOAD_NEXT(_n)						\
	a0 ^= b0; b0 = _n[0];						\
	a1 ^= b1; b1 = _n[1];						\
	a2 ^= b2; b2 = _n[2];						\
	a3 ^= b3; b3 = _n[3];						\
	_n += 4;

/* Arg is incremented. */
#define	XOR_AND_STORE(_dst)						\
	a0 ^= b0; _dst[0] = a0;						\
	a1 ^= b1; _dst[1] = a1;						\
	a2 ^= b2; _dst[2] = a2;						\
	a3 ^= b3; _dst[3] = a3;						\
	_dst += 4;


void
rf_nWayXor3(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
{
	unsigned long *dst = (unsigned long *) dest_rb->buffer;
	unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	unsigned long a0, a1, a2, a3, b0, b1, b2, b3;

	callcount[3]++;
	/* Align dest to cache line. */
	while ((((unsigned long) dst) & 0x1f)) {
		*dst++ ^= *b++ ^ *c++ ^ *d++;
		len--;
	}
	while (len > 4) {
		LOAD_FIRST(dst, b);
		XOR_AND_LOAD_NEXT(c);
		XOR_AND_LOAD_NEXT(d);
		XOR_AND_STORE(dst);
	}
	while (len) {
		*dst++ ^= *b++ ^ *c++ ^ *d++;
		len--;
	}
}

void
rf_nWayXor4(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
{
	unsigned long *dst = (unsigned long *) dest_rb->buffer;
	unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	unsigned long *e = (unsigned long *) src_rbs[3]->buffer;
	unsigned long a0, a1, a2, a3, b0, b1, b2, b3;

	callcount[4]++;
	/* Align dest to cache line. */
	while ((((unsigned long) dst) & 0x1f)) {
		*dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++;
		len--;
	}
	while (len > 4) {
		LOAD_FIRST(dst, b);
		XOR_AND_LOAD_NEXT(c);
		XOR_AND_LOAD_NEXT(d);
		XOR_AND_LOAD_NEXT(e);
		XOR_AND_STORE(dst);
	}
	while (len) {
		*dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++;
		len--;
	}
}

void
rf_nWayXor5(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
{
	unsigned long *dst = (unsigned long *) dest_rb->buffer;
	unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	unsigned long *e = (unsigned long *) src_rbs[3]->buffer;
	unsigned long *f = (unsigned long *) src_rbs[4]->buffer;
	unsigned long a0, a1, a2, a3, b0, b1, b2, b3;

	callcount[5]++;
	/* Align dest to cache line. */
	while ((((unsigned long) dst) & 0x1f)) {
		*dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++;
		len--;
	}
	while (len > 4) {
		LOAD_FIRST(dst, b);
		XOR_AND_LOAD_NEXT(c);
		XOR_AND_LOAD_NEXT(d);
		XOR_AND_LOAD_NEXT(e);
		XOR_AND_LOAD_NEXT(f);
		XOR_AND_STORE(dst);
	}
	while (len) {
		*dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++;
		len--;
	}
}

void
rf_nWayXor6(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
{
	unsigned long *dst = (unsigned long *) dest_rb->buffer;
	unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	unsigned long *e = (unsigned long *) src_rbs[3]->buffer;
	unsigned long *f = (unsigned long *) src_rbs[4]->buffer;
	unsigned long *g = (unsigned long *) src_rbs[5]->buffer;
	unsigned long a0, a1, a2, a3, b0, b1, b2, b3;

	callcount[6]++;
	/* Align dest to cache line. */
	while ((((unsigned long) dst) & 0x1f)) {
		*dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++ ^ *g++;
		len--;
	}
	while (len > 4) {
		LOAD_FIRST(dst, b);
		XOR_AND_LOAD_NEXT(c);
		XOR_AND_LOAD_NEXT(d);
		XOR_AND_LOAD_NEXT(e);
		XOR_AND_LOAD_NEXT(f);
		XOR_AND_LOAD_NEXT(g);
		XOR_AND_STORE(dst);
	}
	while (len) {
		*dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++ ^ *g++;
		len--;
	}
}

void
rf_nWayXor7(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
{
	unsigned long *dst = (unsigned long *) dest_rb->buffer;
	unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	unsigned long *e = (unsigned long *) src_rbs[3]->buffer;
	unsigned long *f = (unsigned long *) src_rbs[4]->buffer;
	unsigned long *g = (unsigned long *) src_rbs[5]->buffer;
	unsigned long *h = (unsigned long *) src_rbs[6]->buffer;
	unsigned long a0, a1, a2, a3, b0, b1, b2, b3;

	callcount[7]++;
	/* Align dest to cache line. */
	while ((((unsigned long) dst) & 0x1f)) {
		*dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++ ^ *g++ ^ *h++;
		len--;
	}
	while (len > 4) {
		LOAD_FIRST(dst, b);
		XOR_AND_LOAD_NEXT(c);
		XOR_AND_LOAD_NEXT(d);
		XOR_AND_LOAD_NEXT(e);
		XOR_AND_LOAD_NEXT(f);
		XOR_AND_LOAD_NEXT(g);
		XOR_AND_LOAD_NEXT(h);
		XOR_AND_STORE(dst);
	}
	while (len) {
		*dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++ ^ *g++ ^ *h++;
		len--;
	}
}

void
rf_nWayXor8(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
{
	unsigned long *dst = (unsigned long *) dest_rb->buffer;
	unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	unsigned long *e = (unsigned long *) src_rbs[3]->buffer;
	unsigned long *f = (unsigned long *) src_rbs[4]->buffer;
	unsigned long *g = (unsigned long *) src_rbs[5]->buffer;
	unsigned long *h = (unsigned long *) src_rbs[6]->buffer;
	unsigned long *i = (unsigned long *) src_rbs[7]->buffer;
	unsigned long a0, a1, a2, a3, b0, b1, b2, b3;

	callcount[8]++;
	/* Align dest to cache line. */
	while ((((unsigned long) dst) & 0x1f)) {
		*dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++ ^ *g++ ^ *h++ ^ *i++;
		len--;
	}
	while (len > 4) {
		LOAD_FIRST(dst, b);
		XOR_AND_LOAD_NEXT(c);
		XOR_AND_LOAD_NEXT(d);
		XOR_AND_LOAD_NEXT(e);
		XOR_AND_LOAD_NEXT(f);
		XOR_AND_LOAD_NEXT(g);
		XOR_AND_LOAD_NEXT(h);
		XOR_AND_LOAD_NEXT(i);
		XOR_AND_STORE(dst);
	}
	while (len) {
		*dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++ ^ *g++ ^ *h++ ^ *i++;
		len--;
	}
}


void
rf_nWayXor9(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
{
	unsigned long *dst = (unsigned long *) dest_rb->buffer;
	unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	unsigned long *e = (unsigned long *) src_rbs[3]->buffer;
	unsigned long *f = (unsigned long *) src_rbs[4]->buffer;
	unsigned long *g = (unsigned long *) src_rbs[5]->buffer;
	unsigned long *h = (unsigned long *) src_rbs[6]->buffer;
	unsigned long *i = (unsigned long *) src_rbs[7]->buffer;
	unsigned long *j = (unsigned long *) src_rbs[8]->buffer;
	unsigned long a0, a1, a2, a3, b0, b1, b2, b3;

	callcount[9]++;
	/* Align dest to cache line. */
	while ((((unsigned long) dst) & 0x1f)) {
		*dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^
		    *f++ ^ *g++ ^ *h++ ^ *i++ ^ *j++;
		len--;
	}
	while (len > 4) {
		LOAD_FIRST(dst, b);
		XOR_AND_LOAD_NEXT(c);
		XOR_AND_LOAD_NEXT(d);
		XOR_AND_LOAD_NEXT(e);
		XOR_AND_LOAD_NEXT(f);
		XOR_AND_LOAD_NEXT(g);
		XOR_AND_LOAD_NEXT(h);
		XOR_AND_LOAD_NEXT(i);
		XOR_AND_LOAD_NEXT(j);
		XOR_AND_STORE(dst);
	}
	while (len) {
		*dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^
		    *f++ ^ *g++ ^ *h++ ^ *i++ ^ *j++;
		len--;
	}
}
@


1.4
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_nwayxor.c,v 1.3 2000/08/08 16:07:43 peter Exp $	*/
@


1.3
log
@sync RAIDframe with Gre Oster's work for NetBSD.

This update incorporates changes since January 2000.

RAID1 and RAID5 tested for functionality matching the 2.7 code. A
number of bug fixes (including stopping a parity rebuild when
unconfiguring) have been included. See Greg's RAIDframe info page:

	http://www.cs.usask.ca/staff/oster/raid.html

The RAID_AUTOCONFIG feature set does *NOT* yet work. These features
require more work throughout the boot system and as such are a big
task.

IMPORTANT: As with anything that is this near live data on your
systems, please test carefully with existing configurations before
deploying in a live system.  Feedback via sendbug or mail direct
to peter@@wonderland.org is appreciated.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_nwayxor.c,v 1.2 1999/02/16 00:03:00 niklas Exp $	*/
d3 1
d31 1
a31 1
/************************************************************
d33 1
a33 1
 * nwayxor.c -- code to do N-way xors for reconstruction
d36 1
a36 1
 * adapted from danner's longword_bxor code.
d38 1
a38 1
 ************************************************************/
d44 1
a44 1
static void rf_ShutdownNWayXor(void *);
d46 2
a47 3
static void 
rf_ShutdownNWayXor(ignored)
	void   *ignored;
d49 1
a49 1
	int     i;
d59 2
a60 3
int 
rf_ConfigureNWayXor(listp)
	RF_ShutdownList_t **listp;
d62 1
a62 1
	int     i, rc;
d70 6
a75 5
void 
rf_nWayXor1(src_rbs, dest_rb, len)
	RF_ReconBuffer_t **src_rbs;
	RF_ReconBuffer_t *dest_rb;
	int     len;
d105 6
a110 5
void 
rf_nWayXor2(src_rbs, dest_rb, len)
	RF_ReconBuffer_t **src_rbs;
	RF_ReconBuffer_t *dest_rb;
	int     len;
d119 1
a119 1
	/* align dest to cache line */
d139 1
a139 1
		/* start dual issue */
d171 35
a205 33
/* note that first arg is not incremented but 2nd arg is */
#define LOAD_FIRST(_dst,_b) \
  a0 = _dst[0]; len -= 4;   \
  a1 = _dst[1];             \
  a2 = _dst[2];             \
  a3 = _dst[3];             \
  b0 = _b[0];               \
  b1 = _b[1];               \
  b2 = _b[2];               \
  b3 = _b[3];  _b += 4;

/* note: arg is incremented */
#define XOR_AND_LOAD_NEXT(_n) \
  a0 ^= b0; b0 = _n[0];       \
  a1 ^= b1; b1 = _n[1];       \
  a2 ^= b2; b2 = _n[2];       \
  a3 ^= b3; b3 = _n[3];       \
  _n += 4;

/* arg is incremented */
#define XOR_AND_STORE(_dst)       \
  a0 ^= b0; _dst[0] = a0;         \
  a1 ^= b1; _dst[1] = a1;         \
  a2 ^= b2; _dst[2] = a2;         \
  a3 ^= b3; _dst[3] = a3;         \
  _dst += 4;


void 
rf_nWayXor3(src_rbs, dest_rb, len)
	RF_ReconBuffer_t **src_rbs;
	RF_ReconBuffer_t *dest_rb;
	int     len;
d214 1
a214 1
	/* align dest to cache line */
d231 6
a236 5
void 
rf_nWayXor4(src_rbs, dest_rb, len)
	RF_ReconBuffer_t **src_rbs;
	RF_ReconBuffer_t *dest_rb;
	int     len;
d246 1
a246 1
	/* align dest to cache line */
d264 6
a269 5
void 
rf_nWayXor5(src_rbs, dest_rb, len)
	RF_ReconBuffer_t **src_rbs;
	RF_ReconBuffer_t *dest_rb;
	int     len;
d280 1
a280 1
	/* align dest to cache line */
d299 6
a304 5
void 
rf_nWayXor6(src_rbs, dest_rb, len)
	RF_ReconBuffer_t **src_rbs;
	RF_ReconBuffer_t *dest_rb;
	int     len;
d316 1
a316 1
	/* align dest to cache line */
d336 6
a341 5
void 
rf_nWayXor7(src_rbs, dest_rb, len)
	RF_ReconBuffer_t **src_rbs;
	RF_ReconBuffer_t *dest_rb;
	int     len;
d354 1
a354 1
	/* align dest to cache line */
d375 6
a380 5
void 
rf_nWayXor8(src_rbs, dest_rb, len)
	RF_ReconBuffer_t **src_rbs;
	RF_ReconBuffer_t *dest_rb;
	int     len;
d394 1
a394 1
	/* align dest to cache line */
d417 6
a422 5
void 
rf_nWayXor9(src_rbs, dest_rb, len)
	RF_ReconBuffer_t **src_rbs;
	RF_ReconBuffer_t *dest_rb;
	int     len;
d437 1
a437 1
	/* align dest to cache line */
d439 2
a440 1
		*dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++ ^ *g++ ^ *h++ ^ *i++ ^ *j++;
d456 2
a457 1
		*dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++ ^ *g++ ^ *h++ ^ *i++ ^ *j++;
@


1.3.8.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/*************************************************************
d32 1
a32 1
 * nwayxor.c -- Code to do N-way xors for reconstruction.
d35 1
a35 1
 * Adapted from danner's longword_bxor code.
d37 1
a37 1
 *************************************************************/
d43 1
a43 1
void rf_ShutdownNWayXor(void *);
d45 3
a47 2
void
rf_ShutdownNWayXor(void *ignored)
d49 1
a49 1
	int i;
d59 3
a61 2
int
rf_ConfigureNWayXor(RF_ShutdownList_t **listp)
d63 1
a63 1
	int i, rc;
d71 5
a75 6
void
rf_nWayXor1(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
d105 5
a109 6
void
rf_nWayXor2(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
d118 1
a118 1
	/* Align dest to cache line. */
d138 1
a138 1
		/* Start dual issue. */
d170 33
a202 35

/* Note that first arg is not incremented but 2nd arg is. */
#define	LOAD_FIRST(_dst,_b)						\
	a0 = _dst[0]; len -= 4;						\
	a1 = _dst[1];							\
	a2 = _dst[2];							\
	a3 = _dst[3];							\
	b0 = _b[0];							\
	b1 = _b[1];							\
	b2 = _b[2];							\
	b3 = _b[3];  _b += 4;

/* Note: arg is incremented. */
#define	XOR_AND_LOAD_NEXT(_n)						\
	a0 ^= b0; b0 = _n[0];						\
	a1 ^= b1; b1 = _n[1];						\
	a2 ^= b2; b2 = _n[2];						\
	a3 ^= b3; b3 = _n[3];						\
	_n += 4;

/* Arg is incremented. */
#define	XOR_AND_STORE(_dst)						\
	a0 ^= b0; _dst[0] = a0;						\
	a1 ^= b1; _dst[1] = a1;						\
	a2 ^= b2; _dst[2] = a2;						\
	a3 ^= b3; _dst[3] = a3;						\
	_dst += 4;


void
rf_nWayXor3(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
d211 1
a211 1
	/* Align dest to cache line. */
d228 5
a232 6
void
rf_nWayXor4(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
d242 1
a242 1
	/* Align dest to cache line. */
d260 5
a264 6
void
rf_nWayXor5(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
d275 1
a275 1
	/* Align dest to cache line. */
d294 5
a298 6
void
rf_nWayXor6(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
d310 1
a310 1
	/* Align dest to cache line. */
d330 5
a334 6
void
rf_nWayXor7(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
d347 1
a347 1
	/* Align dest to cache line. */
d368 5
a372 6
void
rf_nWayXor8(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
d386 1
a386 1
	/* Align dest to cache line. */
d409 5
a413 6
void
rf_nWayXor9(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
d428 1
a428 1
	/* Align dest to cache line. */
d430 1
a430 2
		*dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^
		    *f++ ^ *g++ ^ *h++ ^ *i++ ^ *j++;
d446 1
a446 2
		*dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^
		    *f++ ^ *g++ ^ *h++ ^ *i++ ^ *j++;
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_nwayxor.c,v 1.1 1999/01/11 14:29:31 niklas Exp $	*/
/*	$NetBSD: rf_nwayxor.c,v 1.3 1999/02/05 00:06:13 oster Exp $	*/
d77 4
a80 4
	register unsigned long *src = (unsigned long *) src_rbs[0]->buffer;
	register unsigned long *dest = (unsigned long *) dest_rb->buffer;
	register unsigned long *end = src + len;
	register unsigned long d0, d1, d2, d3, s0, s1, s2, s3;
d111 4
a114 4
	register unsigned long *dst = (unsigned long *) dest_rb->buffer;
	register unsigned long *a = dst;
	register unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	register unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
d204 4
a207 4
	register unsigned long *dst = (unsigned long *) dest_rb->buffer;
	register unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	register unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	register unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
d234 5
a238 5
	register unsigned long *dst = (unsigned long *) dest_rb->buffer;
	register unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	register unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	register unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	register unsigned long *e = (unsigned long *) src_rbs[3]->buffer;
d266 6
a271 6
	register unsigned long *dst = (unsigned long *) dest_rb->buffer;
	register unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	register unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	register unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	register unsigned long *e = (unsigned long *) src_rbs[3]->buffer;
	register unsigned long *f = (unsigned long *) src_rbs[4]->buffer;
d300 7
a306 7
	register unsigned long *dst = (unsigned long *) dest_rb->buffer;
	register unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	register unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	register unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	register unsigned long *e = (unsigned long *) src_rbs[3]->buffer;
	register unsigned long *f = (unsigned long *) src_rbs[4]->buffer;
	register unsigned long *g = (unsigned long *) src_rbs[5]->buffer;
d336 8
a343 8
	register unsigned long *dst = (unsigned long *) dest_rb->buffer;
	register unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	register unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	register unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	register unsigned long *e = (unsigned long *) src_rbs[3]->buffer;
	register unsigned long *f = (unsigned long *) src_rbs[4]->buffer;
	register unsigned long *g = (unsigned long *) src_rbs[5]->buffer;
	register unsigned long *h = (unsigned long *) src_rbs[6]->buffer;
d374 9
a382 9
	register unsigned long *dst = (unsigned long *) dest_rb->buffer;
	register unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	register unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	register unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	register unsigned long *e = (unsigned long *) src_rbs[3]->buffer;
	register unsigned long *f = (unsigned long *) src_rbs[4]->buffer;
	register unsigned long *g = (unsigned long *) src_rbs[5]->buffer;
	register unsigned long *h = (unsigned long *) src_rbs[6]->buffer;
	register unsigned long *i = (unsigned long *) src_rbs[7]->buffer;
d415 10
a424 10
	register unsigned long *dst = (unsigned long *) dest_rb->buffer;
	register unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	register unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	register unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	register unsigned long *e = (unsigned long *) src_rbs[3]->buffer;
	register unsigned long *f = (unsigned long *) src_rbs[4]->buffer;
	register unsigned long *g = (unsigned long *) src_rbs[5]->buffer;
	register unsigned long *h = (unsigned long *) src_rbs[6]->buffer;
	register unsigned long *i = (unsigned long *) src_rbs[7]->buffer;
	register unsigned long *j = (unsigned long *) src_rbs[8]->buffer;
@


1.2.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_nwayxor.c,v 1.3 2000/08/08 16:07:43 peter Exp $	*/
/*	$NetBSD: rf_nwayxor.c,v 1.4 2000/03/30 12:45:41 augustss Exp $	*/
d77 4
a80 4
	unsigned long *src = (unsigned long *) src_rbs[0]->buffer;
	unsigned long *dest = (unsigned long *) dest_rb->buffer;
	unsigned long *end = src + len;
	unsigned long d0, d1, d2, d3, s0, s1, s2, s3;
d111 4
a114 4
	unsigned long *dst = (unsigned long *) dest_rb->buffer;
	unsigned long *a = dst;
	unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
d204 4
a207 4
	unsigned long *dst = (unsigned long *) dest_rb->buffer;
	unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
d234 5
a238 5
	unsigned long *dst = (unsigned long *) dest_rb->buffer;
	unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	unsigned long *e = (unsigned long *) src_rbs[3]->buffer;
d266 6
a271 6
	unsigned long *dst = (unsigned long *) dest_rb->buffer;
	unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	unsigned long *e = (unsigned long *) src_rbs[3]->buffer;
	unsigned long *f = (unsigned long *) src_rbs[4]->buffer;
d300 7
a306 7
	unsigned long *dst = (unsigned long *) dest_rb->buffer;
	unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	unsigned long *e = (unsigned long *) src_rbs[3]->buffer;
	unsigned long *f = (unsigned long *) src_rbs[4]->buffer;
	unsigned long *g = (unsigned long *) src_rbs[5]->buffer;
d336 8
a343 8
	unsigned long *dst = (unsigned long *) dest_rb->buffer;
	unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	unsigned long *e = (unsigned long *) src_rbs[3]->buffer;
	unsigned long *f = (unsigned long *) src_rbs[4]->buffer;
	unsigned long *g = (unsigned long *) src_rbs[5]->buffer;
	unsigned long *h = (unsigned long *) src_rbs[6]->buffer;
d374 9
a382 9
	unsigned long *dst = (unsigned long *) dest_rb->buffer;
	unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	unsigned long *e = (unsigned long *) src_rbs[3]->buffer;
	unsigned long *f = (unsigned long *) src_rbs[4]->buffer;
	unsigned long *g = (unsigned long *) src_rbs[5]->buffer;
	unsigned long *h = (unsigned long *) src_rbs[6]->buffer;
	unsigned long *i = (unsigned long *) src_rbs[7]->buffer;
d415 10
a424 10
	unsigned long *dst = (unsigned long *) dest_rb->buffer;
	unsigned long *b = (unsigned long *) src_rbs[0]->buffer;
	unsigned long *c = (unsigned long *) src_rbs[1]->buffer;
	unsigned long *d = (unsigned long *) src_rbs[2]->buffer;
	unsigned long *e = (unsigned long *) src_rbs[3]->buffer;
	unsigned long *f = (unsigned long *) src_rbs[4]->buffer;
	unsigned long *g = (unsigned long *) src_rbs[5]->buffer;
	unsigned long *h = (unsigned long *) src_rbs[6]->buffer;
	unsigned long *i = (unsigned long *) src_rbs[7]->buffer;
	unsigned long *j = (unsigned long *) src_rbs[8]->buffer;
@


1.2.6.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 1
a30 1
/*************************************************************
d32 1
a32 1
 * nwayxor.c -- Code to do N-way xors for reconstruction.
d35 1
a35 1
 * Adapted from danner's longword_bxor code.
d37 1
a37 1
 *************************************************************/
d43 1
a43 1
void rf_ShutdownNWayXor(void *);
d45 3
a47 2
void
rf_ShutdownNWayXor(void *ignored)
d49 1
a49 1
	int i;
d59 3
a61 2
int
rf_ConfigureNWayXor(RF_ShutdownList_t **listp)
d63 1
a63 1
	int i, rc;
d71 5
a75 6
void
rf_nWayXor1(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
d105 5
a109 6
void
rf_nWayXor2(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
d118 1
a118 1
	/* Align dest to cache line. */
d138 1
a138 1
		/* Start dual issue. */
d170 33
a202 35

/* Note that first arg is not incremented but 2nd arg is. */
#define	LOAD_FIRST(_dst,_b)						\
	a0 = _dst[0]; len -= 4;						\
	a1 = _dst[1];							\
	a2 = _dst[2];							\
	a3 = _dst[3];							\
	b0 = _b[0];							\
	b1 = _b[1];							\
	b2 = _b[2];							\
	b3 = _b[3];  _b += 4;

/* Note: arg is incremented. */
#define	XOR_AND_LOAD_NEXT(_n)						\
	a0 ^= b0; b0 = _n[0];						\
	a1 ^= b1; b1 = _n[1];						\
	a2 ^= b2; b2 = _n[2];						\
	a3 ^= b3; b3 = _n[3];						\
	_n += 4;

/* Arg is incremented. */
#define	XOR_AND_STORE(_dst)						\
	a0 ^= b0; _dst[0] = a0;						\
	a1 ^= b1; _dst[1] = a1;						\
	a2 ^= b2; _dst[2] = a2;						\
	a3 ^= b3; _dst[3] = a3;						\
	_dst += 4;


void
rf_nWayXor3(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
d211 1
a211 1
	/* Align dest to cache line. */
d228 5
a232 6
void
rf_nWayXor4(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
d242 1
a242 1
	/* Align dest to cache line. */
d260 5
a264 6
void
rf_nWayXor5(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
d275 1
a275 1
	/* Align dest to cache line. */
d294 5
a298 6
void
rf_nWayXor6(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
d310 1
a310 1
	/* Align dest to cache line. */
d330 5
a334 6
void
rf_nWayXor7(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
d347 1
a347 1
	/* Align dest to cache line. */
d368 5
a372 6
void
rf_nWayXor8(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
d386 1
a386 1
	/* Align dest to cache line. */
d409 5
a413 6
void
rf_nWayXor9(
	RF_ReconBuffer_t	**src_rbs,
	RF_ReconBuffer_t	 *dest_rb,
	int			  len
)
d428 1
a428 1
	/* Align dest to cache line. */
d430 1
a430 2
		*dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^
		    *f++ ^ *g++ ^ *h++ ^ *i++ ^ *j++;
d446 1
a446 2
		*dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^
		    *f++ ^ *g++ ^ *h++ ^ *i++ ^ *j++;
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_nwayxor.c,v 1.1 1998/11/13 04:20:31 oster Exp $	*/
/*	$NetBSD: rf_nwayxor.c,v 1.1 1998/11/13 04:20:31 oster Exp $	*/
a38 24
/* :  
 * Log: rf_nwayxor.c,v 
 * Revision 1.6  1996/06/12 03:31:18  jimz
 * only print call counts if rf_showXorCallCounts != 0
 *
 * Revision 1.5  1996/06/10  11:55:47  jimz
 * Straightened out some per-array/not-per-array distinctions, fixed
 * a couple bugs related to confusion. Added shutdown lists. Removed
 * layout shutdown function (now subsumed by shutdown lists).
 *
 * Revision 1.4  1996/06/02  17:31:48  jimz
 * Moved a lot of global stuff into array structure, where it belongs.
 * Fixed up paritylogging, pss modules in this manner. Some general
 * code cleanup. Removed lots of dead code, some dead files.
 *
 * Revision 1.3  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.2  1995/12/01  19:29:14  root
 * added copyright info
 *
 */

d45 12
a56 11
static void rf_ShutdownNWayXor(ignored)
  void  *ignored;
{
  int i;

  if (rf_showXorCallCounts == 0)
    return;
  printf("Call counts for n-way xor routines:  ");
  for (i=0; i<10; i++)
    printf("%d ",callcount[i]);
  printf("\n");
d59 10
a68 9
int rf_ConfigureNWayXor(listp)
  RF_ShutdownList_t  **listp;
{
  int i, rc;

  for (i=0; i<10; i++)
    callcount[i] = 0;
  rc = rf_ShutdownCreate(listp, rf_ShutdownNWayXor, NULL);
  return(rc);
d71 32
a102 30
void rf_nWayXor1(src_rbs, dest_rb, len)
  RF_ReconBuffer_t  **src_rbs;
  RF_ReconBuffer_t   *dest_rb;
  int                 len;
{
  register unsigned long *src = (unsigned long *) src_rbs[0]->buffer;
  register unsigned long *dest= (unsigned long *) dest_rb->buffer;
  register unsigned long *end = src+len;
  register unsigned long d0, d1, d2, d3, s0, s1, s2, s3;

  callcount[1]++;
  while (len >= 4 )
    {
      d0 = dest[0];
      d1 = dest[1];
      d2 = dest[2];
      d3 = dest[3];
      s0 = src[0];
      s1 = src[1];
      s2 = src[2];
      s3 = src[3];
      dest[0] = d0 ^ s0;
      dest[1] = d1 ^ s1;
      dest[2] = d2 ^ s2;
      dest[3] = d3 ^ s3;
      src += 4;
      dest += 4;
      len -= 4;
    }
  while (src < end) {*dest++ ^=  *src++;}
d105 64
a168 55
void rf_nWayXor2(src_rbs, dest_rb, len)
  RF_ReconBuffer_t  **src_rbs;
  RF_ReconBuffer_t   *dest_rb;
  int                 len;
{
  register unsigned long *dst = (unsigned long *) dest_rb->buffer;
  register unsigned long *a   = dst;
  register unsigned long *b   = (unsigned long *) src_rbs[0]->buffer;
  register unsigned long *c   = (unsigned long *) src_rbs[1]->buffer;
  unsigned long a0,a1,a2,a3, b0,b1,b2,b3;
  
  callcount[2]++;
  /* align dest to cache line */
  while ((((unsigned long) dst) & 0x1f))
    {
      *dst++ = *a++ ^ *b++ ^ *c++;
      len--;
    }
  while (len > 4 )
    {
      a0 = a[0]; len -= 4;

      a1 = a[1];
      a2 = a[2];

      a3 = a[3];  a += 4;

      b0 = b[0];
      b1 = b[1];

      b2 = b[2];
      b3 = b[3];
      /* start dual issue */
      a0 ^= b0; b0 =  c[0];

      b += 4;  a1 ^= b1;

      a2 ^= b2; a3 ^= b3;

      b1 =  c[1]; a0 ^= b0;

      b2 =  c[2]; a1 ^= b1;

      b3 =  c[3]; a2 ^= b2;

      dst[0] = a0; a3 ^= b3;
      dst[1] = a1; c += 4;
      dst[2] = a2;
      dst[3] = a3; dst += 4;
    }
  while (len)
    {
      *dst++ = *a++ ^ *b++ ^ *c++;
      len--;
    }
a169 1

d198 28
a225 27
void rf_nWayXor3(src_rbs, dest_rb, len)
  RF_ReconBuffer_t  **src_rbs;
  RF_ReconBuffer_t   *dest_rb;
  int                 len;
{
  register unsigned long *dst = (unsigned long *) dest_rb->buffer;
  register unsigned long *b   = (unsigned long *) src_rbs[0]->buffer;
  register unsigned long *c   = (unsigned long *) src_rbs[1]->buffer;
  register unsigned long *d   = (unsigned long *) src_rbs[2]->buffer;
  unsigned long a0,a1,a2,a3, b0,b1,b2,b3;
  
  callcount[3]++;
  /* align dest to cache line */
  while ((((unsigned long) dst) & 0x1f)) {
    *dst++ ^= *b++ ^ *c++ ^ *d++;
    len--;
  }
  while (len > 4 ) {
    LOAD_FIRST(dst,b);
    XOR_AND_LOAD_NEXT(c);
    XOR_AND_LOAD_NEXT(d);
    XOR_AND_STORE(dst);
  }
  while (len) {
    *dst++ ^=  *b++ ^ *c++ ^ *d++;
    len--;
  }
d228 30
a257 29
void rf_nWayXor4(src_rbs, dest_rb, len)
  RF_ReconBuffer_t  **src_rbs;
  RF_ReconBuffer_t   *dest_rb;
  int                 len;
{
  register unsigned long *dst = (unsigned long *) dest_rb->buffer;
  register unsigned long *b   = (unsigned long *) src_rbs[0]->buffer;
  register unsigned long *c   = (unsigned long *) src_rbs[1]->buffer;
  register unsigned long *d   = (unsigned long *) src_rbs[2]->buffer;
  register unsigned long *e   = (unsigned long *) src_rbs[3]->buffer;
  unsigned long a0,a1,a2,a3, b0,b1,b2,b3;
  
  callcount[4]++;
  /* align dest to cache line */
  while ((((unsigned long) dst) & 0x1f)) {
    *dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++;
    len--;
  }
  while (len > 4 ) {
    LOAD_FIRST(dst,b);
    XOR_AND_LOAD_NEXT(c);
    XOR_AND_LOAD_NEXT(d);
    XOR_AND_LOAD_NEXT(e);
    XOR_AND_STORE(dst);
  }
  while (len) {
    *dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++;
    len--;
  }
d260 32
a291 31
void rf_nWayXor5(src_rbs, dest_rb, len)
  RF_ReconBuffer_t  **src_rbs;
  RF_ReconBuffer_t   *dest_rb;
  int                 len;
{
  register unsigned long *dst = (unsigned long *) dest_rb->buffer;
  register unsigned long *b   = (unsigned long *) src_rbs[0]->buffer;
  register unsigned long *c   = (unsigned long *) src_rbs[1]->buffer;
  register unsigned long *d   = (unsigned long *) src_rbs[2]->buffer;
  register unsigned long *e   = (unsigned long *) src_rbs[3]->buffer;
  register unsigned long *f   = (unsigned long *) src_rbs[4]->buffer;
  unsigned long a0,a1,a2,a3, b0,b1,b2,b3;
  
  callcount[5]++;
  /* align dest to cache line */
  while ((((unsigned long) dst) & 0x1f)) {
    *dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++;
    len--;
  }
  while (len > 4 ) {
    LOAD_FIRST(dst,b);
    XOR_AND_LOAD_NEXT(c);
    XOR_AND_LOAD_NEXT(d);
    XOR_AND_LOAD_NEXT(e);
    XOR_AND_LOAD_NEXT(f);
    XOR_AND_STORE(dst);
  }
  while (len) {
    *dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++;
    len--;
  }
d294 34
a327 33
void rf_nWayXor6(src_rbs, dest_rb, len)
  RF_ReconBuffer_t  **src_rbs;
  RF_ReconBuffer_t   *dest_rb;
  int                 len;
{
  register unsigned long *dst = (unsigned long *) dest_rb->buffer;
  register unsigned long *b   = (unsigned long *) src_rbs[0]->buffer;
  register unsigned long *c   = (unsigned long *) src_rbs[1]->buffer;
  register unsigned long *d   = (unsigned long *) src_rbs[2]->buffer;
  register unsigned long *e   = (unsigned long *) src_rbs[3]->buffer;
  register unsigned long *f   = (unsigned long *) src_rbs[4]->buffer;
  register unsigned long *g   = (unsigned long *) src_rbs[5]->buffer;
  unsigned long a0,a1,a2,a3, b0,b1,b2,b3;
  
  callcount[6]++;
  /* align dest to cache line */
  while ((((unsigned long) dst) & 0x1f)) {
    *dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++ ^ *g++;
    len--;
  }
  while (len > 4 ) {
    LOAD_FIRST(dst,b);
    XOR_AND_LOAD_NEXT(c);
    XOR_AND_LOAD_NEXT(d);
    XOR_AND_LOAD_NEXT(e);
    XOR_AND_LOAD_NEXT(f);
    XOR_AND_LOAD_NEXT(g);
    XOR_AND_STORE(dst);
  }
  while (len) {
    *dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++ ^ *g++;
    len--;
  }
d330 36
a365 35
void rf_nWayXor7(src_rbs, dest_rb, len)
  RF_ReconBuffer_t  **src_rbs;
  RF_ReconBuffer_t   *dest_rb;
  int                 len;
{
  register unsigned long *dst = (unsigned long *) dest_rb->buffer;
  register unsigned long *b   = (unsigned long *) src_rbs[0]->buffer;
  register unsigned long *c   = (unsigned long *) src_rbs[1]->buffer;
  register unsigned long *d   = (unsigned long *) src_rbs[2]->buffer;
  register unsigned long *e   = (unsigned long *) src_rbs[3]->buffer;
  register unsigned long *f   = (unsigned long *) src_rbs[4]->buffer;
  register unsigned long *g   = (unsigned long *) src_rbs[5]->buffer;
  register unsigned long *h   = (unsigned long *) src_rbs[6]->buffer;
  unsigned long a0,a1,a2,a3, b0,b1,b2,b3;
  
  callcount[7]++;
  /* align dest to cache line */
  while ((((unsigned long) dst) & 0x1f)) {
    *dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++ ^ *g++ ^ *h++;
    len--;
  }
  while (len > 4 ) {
    LOAD_FIRST(dst,b);
    XOR_AND_LOAD_NEXT(c);
    XOR_AND_LOAD_NEXT(d);
    XOR_AND_LOAD_NEXT(e);
    XOR_AND_LOAD_NEXT(f);
    XOR_AND_LOAD_NEXT(g);
    XOR_AND_LOAD_NEXT(h);
    XOR_AND_STORE(dst);
  }
  while (len) {
    *dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++ ^ *g++ ^ *h++;
    len--;
  }
d368 38
a405 37
void rf_nWayXor8(src_rbs, dest_rb, len)
  RF_ReconBuffer_t  **src_rbs;
  RF_ReconBuffer_t   *dest_rb;
  int                 len;
{
  register unsigned long *dst = (unsigned long *) dest_rb->buffer;
  register unsigned long *b   = (unsigned long *) src_rbs[0]->buffer;
  register unsigned long *c   = (unsigned long *) src_rbs[1]->buffer;
  register unsigned long *d   = (unsigned long *) src_rbs[2]->buffer;
  register unsigned long *e   = (unsigned long *) src_rbs[3]->buffer;
  register unsigned long *f   = (unsigned long *) src_rbs[4]->buffer;
  register unsigned long *g   = (unsigned long *) src_rbs[5]->buffer;
  register unsigned long *h   = (unsigned long *) src_rbs[6]->buffer;
  register unsigned long *i   = (unsigned long *) src_rbs[7]->buffer;
  unsigned long a0,a1,a2,a3, b0,b1,b2,b3;
  
  callcount[8]++;
  /* align dest to cache line */
  while ((((unsigned long) dst) & 0x1f)) {
    *dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++ ^ *g++ ^ *h++ ^ *i++;
    len--;
  }
  while (len > 4 ) {
    LOAD_FIRST(dst,b);
    XOR_AND_LOAD_NEXT(c);
    XOR_AND_LOAD_NEXT(d);
    XOR_AND_LOAD_NEXT(e);
    XOR_AND_LOAD_NEXT(f);
    XOR_AND_LOAD_NEXT(g);
    XOR_AND_LOAD_NEXT(h);
    XOR_AND_LOAD_NEXT(i);
    XOR_AND_STORE(dst);
  }
  while (len) {
    *dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++ ^ *g++ ^ *h++ ^ *i++;
    len--;
  }
d409 40
a448 39
void rf_nWayXor9(src_rbs, dest_rb, len)
  RF_ReconBuffer_t  **src_rbs;
  RF_ReconBuffer_t   *dest_rb;
  int                 len;
{
  register unsigned long *dst = (unsigned long *) dest_rb->buffer;
  register unsigned long *b   = (unsigned long *) src_rbs[0]->buffer;
  register unsigned long *c   = (unsigned long *) src_rbs[1]->buffer;
  register unsigned long *d   = (unsigned long *) src_rbs[2]->buffer;
  register unsigned long *e   = (unsigned long *) src_rbs[3]->buffer;
  register unsigned long *f   = (unsigned long *) src_rbs[4]->buffer;
  register unsigned long *g   = (unsigned long *) src_rbs[5]->buffer;
  register unsigned long *h   = (unsigned long *) src_rbs[6]->buffer;
  register unsigned long *i   = (unsigned long *) src_rbs[7]->buffer;
  register unsigned long *j   = (unsigned long *) src_rbs[8]->buffer;
  unsigned long a0,a1,a2,a3, b0,b1,b2,b3;
  
  callcount[9]++;
  /* align dest to cache line */
  while ((((unsigned long) dst) & 0x1f)) {
    *dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++ ^ *g++ ^ *h++ ^ *i++ ^ *j++;
    len--;
  }
  while (len > 4 ) {
    LOAD_FIRST(dst,b);
    XOR_AND_LOAD_NEXT(c);
    XOR_AND_LOAD_NEXT(d);
    XOR_AND_LOAD_NEXT(e);
    XOR_AND_LOAD_NEXT(f);
    XOR_AND_LOAD_NEXT(g);
    XOR_AND_LOAD_NEXT(h);
    XOR_AND_LOAD_NEXT(i);
    XOR_AND_LOAD_NEXT(j);
    XOR_AND_STORE(dst);
  }
  while (len) {
    *dst++ ^= *b++ ^ *c++ ^ *d++ ^ *e++ ^ *f++ ^ *g++ ^ *h++ ^ *i++ ^ *j++;
    len--;
  }
@

