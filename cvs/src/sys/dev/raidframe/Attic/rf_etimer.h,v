head	1.8;
access;
symbols
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.32
	OPENBSD_5_0:1.7.0.30
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.28
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.26
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.22
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.24
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.20
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.18
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.16
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.14
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.12
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.10
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.5.0.16
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.14
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.12
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.10
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.8
	OPENBSD_2_8:1.5.0.6
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.2
	SMP_BASE:1.5
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2012.04.06.15.53.58;	author jsing;	state dead;
branches;
next	1.7;

1.7
date	2004.06.24.19.35.24;	author tholo;	state Exp;
branches;
next	1.6;

1.6
date	2002.12.16.07.01.03;	author tdeval;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.07.14.50.21;	author peter;	state Exp;
branches
	1.5.2.1
	1.5.12.1;
next	1.4;

1.4
date	99.08.04.13.10.54;	author peter;	state Exp;
branches;
next	1.3;

1.3
date	99.08.03.13.56.37;	author peter;	state Exp;
branches;
next	1.2;

1.2
date	99.02.16.00.02.43;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.14.29.20;	author niklas;	state Exp;
branches;
next	;

1.5.2.1
date	2003.03.28.00.38.28;	author niklas;	state Exp;
branches;
next	;

1.5.12.1
date	2003.05.19.22.21.51;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Put raidframe in the attic.
@
text
@/*	$OpenBSD: rf_etimer.h,v 1.7 2004/06/24 19:35:24 tholo Exp $	*/
/*	$NetBSD: rf_etimer.h,v 1.4 1999/08/13 03:26:55 oster Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Mark Holland
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#ifndef	_RF__RF_TIMER_H_
#define	_RF__RF_TIMER_H_


#include "rf_options.h"
#include "rf_utils.h"

#include <sys/time.h>

struct RF_Etimer_s {
	struct timeval st;
	struct timeval et;
	struct timeval diff;
};

#if	defined(_KERNEL)
#include <sys/kernel.h>

#define	RF_ETIMER_START(_t_) 						\
	do {								\
		bzero(&(_t_), sizeof (_t_));				\
		getmicrouptime(&(_t_).st);				\
	} while (0)

#define	RF_ETIMER_STOP(_t_) 						\
	do {								\
		getmicrouptime(&(_t_).et);				\
	} while (0)

#define	RF_ETIMER_EVAL(_t_)						\
	do {								\
		RF_TIMEVAL_DIFF(&(_t_).st, &(_t_).et, &(_t_).diff);	\
	} while (0)

#define	RF_ETIMER_VAL_US(_t_)		(RF_TIMEVAL_TO_US((_t_).diff))
#define	RF_ETIMER_VAL_MS(_t_)		(RF_TIMEVAL_TO_US((_t_).diff)/1000)

#endif	/* _KERNEL */

#endif	/* !_RF__RF_TIMER_H_ */
@


1.7
log
@This moves access to wall and uptime variables in MI code,
encapsulating all such access into wall-defined functions
that makes sure locking is done as needed.

It also cleans up some uses of wall time vs. uptime some
places, but there is sure to be more of these needed as
well, particularily in MD code.  Also, many current calls
to microtime() should probably be changed to getmicrotime(),
or to the {,get}microuptime() versions.

ok art@@ deraadt@@ aaron@@ matthieu@@ beck@@ sturm@@ millert@@ others
"Oh, that is not your problem!" from miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_etimer.h,v 1.6 2002/12/16 07:01:03 tdeval Exp $	*/
@


1.6
log
@Major KNF.  Incentive from Tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_etimer.h,v 1.5 2000/01/07 14:50:21 peter Exp $	*/
a50 1
		int s;							\
d52 1
a52 3
		s = splclock();						\
		(_t_).st = mono_time;					\
		splx(s);						\
d57 1
a57 4
		int s;							\
		s = splclock();						\
		(_t_).et = mono_time;					\
		splx(s);						\
@


1.5
log
@sync with work by Greg Oster on NetBSD

Please note: This update has *only* been tested on i386 with IDE
disks. Could someone with a spare box please make sure all is OK with
SCSI and maybe other arches ? sparc testing will follow locally.

* remove rf_sys.h
* many changes to make it more stable
* some performance increases
* All raid threads now get their own kernel process and the calling
  raidctl(8) program will show status progress through a meter.
* In theory FFS_SOFTUPDATES and RAIDframe will now work together - NOT
  TESTED YET

See http://www.cs.usask.ca/staff/oster/raid.html

This updates include Greg's changes to Jan 4th 2000.

TODO:
* some odd behaviour when running raictl -c on an already config'ed
  raid set - problem founf, fix being done
* progress meter is in raidctl(8) - seperate commit, but could do with
  sync'ing with OpenBSD ftp version
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_etimer.h,v 1.4 1999/08/04 13:10:54 peter Exp $	*/
d3 1
d31 2
a32 2
#ifndef _RF__RF_TIMER_H_
#define _RF__RF_TIMER_H_
d46 1
a46 1
#if defined(_KERNEL)
d49 21
a69 21
#define RF_ETIMER_START(_t_) 					\
		{						\
			int s;					\
			bzero(&(_t_), sizeof (_t_));		\
			s = splclock();				\
			(_t_).st = mono_time;			\
			splx(s);				\
		}

#define RF_ETIMER_STOP(_t_) 					\
		{						\
			int s;					\
			s = splclock();				\
			(_t_).et = mono_time;			\
			splx(s);				\
		}

#define RF_ETIMER_EVAL(_t_)					\
	{							\
		RF_TIMEVAL_DIFF(&(_t_).st, &(_t_).et, &(_t_).diff) \
	}
d71 2
a72 2
#define RF_ETIMER_VAL_US(_t_)      (RF_TIMEVAL_TO_US((_t_).diff))
#define RF_ETIMER_VAL_MS(_t_)      (RF_TIMEVAL_TO_US((_t_).diff)/1000)
d74 1
a74 1
#endif /* _KERNEL */
d76 1
a76 1
#endif				/* !_RF__RF_TIMER_H_ */
@


1.5.12.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 2
a31 2
#ifndef	_RF__RF_TIMER_H_
#define	_RF__RF_TIMER_H_
d45 1
a45 1
#if	defined(_KERNEL)
d48 21
a68 21
#define	RF_ETIMER_START(_t_) 						\
	do {								\
		int s;							\
		bzero(&(_t_), sizeof (_t_));				\
		s = splclock();						\
		(_t_).st = mono_time;					\
		splx(s);						\
	} while (0)

#define	RF_ETIMER_STOP(_t_) 						\
	do {								\
		int s;							\
		s = splclock();						\
		(_t_).et = mono_time;					\
		splx(s);						\
	} while (0)

#define	RF_ETIMER_EVAL(_t_)						\
	do {								\
		RF_TIMEVAL_DIFF(&(_t_).st, &(_t_).et, &(_t_).diff);	\
	} while (0)
d70 2
a71 2
#define	RF_ETIMER_VAL_US(_t_)		(RF_TIMEVAL_TO_US((_t_).diff))
#define	RF_ETIMER_VAL_MS(_t_)		(RF_TIMEVAL_TO_US((_t_).diff)/1000)
d73 1
a73 1
#endif	/* _KERNEL */
d75 1
a75 1
#endif	/* !_RF__RF_TIMER_H_ */
@


1.5.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a2 1

d30 2
a31 2
#ifndef	_RF__RF_TIMER_H_
#define	_RF__RF_TIMER_H_
d45 1
a45 1
#if	defined(_KERNEL)
d48 21
a68 21
#define	RF_ETIMER_START(_t_) 						\
	do {								\
		int s;							\
		bzero(&(_t_), sizeof (_t_));				\
		s = splclock();						\
		(_t_).st = mono_time;					\
		splx(s);						\
	} while (0)

#define	RF_ETIMER_STOP(_t_) 						\
	do {								\
		int s;							\
		s = splclock();						\
		(_t_).et = mono_time;					\
		splx(s);						\
	} while (0)

#define	RF_ETIMER_EVAL(_t_)						\
	do {								\
		RF_TIMEVAL_DIFF(&(_t_).st, &(_t_).et, &(_t_).diff);	\
	} while (0)
d70 2
a71 2
#define	RF_ETIMER_VAL_US(_t_)		(RF_TIMEVAL_TO_US((_t_).diff))
#define	RF_ETIMER_VAL_MS(_t_)		(RF_TIMEVAL_TO_US((_t_).diff)/1000)
d73 1
a73 1
#endif	/* _KERNEL */
d75 1
a75 1
#endif	/* !_RF__RF_TIMER_H_ */
@


1.4
log
@* remove redundant rf_ccmn.h

* remove init call to rf_ConfigureEtimer() and rf_sys.c in which it is the
  only function. update conf/files to reflect this.

* update sources to make sure _KERNEL is used not KERNEL

* change rf_etimer.h to protect macros an include of sys/kernel.h with
  a check for _KERNEL - let raidctl compile again.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_etimer.h,v 1.3 1999/08/03 13:56:37 peter Exp $	*/
/*	$NetBSD: rf_etimer.h,v 1.3 1999/02/05 00:06:11 oster Exp $	*/
@


1.3
log
@* rf_reconstruct.c: adopt nilkas' suggestion regard statics and
__inline__ - this is a proof of concept and will cover the raidframe
source as a whole over coming updates. Update namespace of function to
prefix with rf_ - comments again welcome.

* overall: rework the macros in rf_etimer.h and the resultant changes
to their use to count microseconds and not clock ticks. Restore the code
in rf_revent.c to a similar strcuture to before the previous commit,
and use the system timers to govern resource usage.

Tested with local i386/IDE and the reconstruction of a disk in my
array - performance has improved for reconstruction at no noticable
CPU cost.
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_etimer.h,v 1.2 1999/02/16 00:02:43 niklas Exp $	*/
d33 1
a37 1
#include <sys/kernel.h>
d45 3
d72 2
@


1.2
log
@Merge from NetBSD, mostly indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: rf_etimer.h,v 1.1 1999/01/11 14:29:20 niklas Exp $	*/
a29 14
/* rf_etimer.h -- header file for code related to accurate timing
 * This code currently assumes that the elapsed time between START_TIMER
 * and START_TIMER is less than the period of the cycle counter.  This
 * means the events you want to time must be less than:
 *        clock speed               max time
 *        ----------                --------
 *           175 MHz                 24 sec
 *           150 MHz                 28 sec
 *           125 MHz                 34 sec
 *
 *
 */


d34 1
d36 2
a37 8
extern unsigned int rpcc(void);
#define rf_read_cycle_counter rpcc

#define RF_DEF_TIMER_MAX_VAL            0xFFFFFFFF

typedef struct RF_EtimerVal_s {
	unsigned ccnt;		/* cycle count */
}       RF_EtimerVal_t;
d40 3
a42 3
	RF_EtimerVal_t st;
	RF_EtimerVal_t et;
	unsigned long ticks;	/* elapsed time in ticks */
d45 21
a65 17
extern long rf_timer_max_val;
extern long rf_timer_ticks_per_second;
extern unsigned long rf_timer_ticks_per_usec;

#define RF_ETIMER_TICKS2US(_tcks_)  ( (_tcks_) / rf_timer_ticks_per_usec )
#define RF_ETIMER_START(_t_)  { (_t_).st.ccnt = rf_read_cycle_counter(); }
#define RF_ETIMER_STOP(_t_)   { (_t_).et.ccnt = rf_read_cycle_counter(); }
#define RF_ETIMER_EVAL(_t_) { \
	if ((_t_).st.ccnt < (_t_).et.ccnt) \
		(_t_).ticks = (_t_).et.ccnt - (_t_).st.ccnt; \
	else \
		(_t_).ticks = rf_timer_max_val - ((_t_).st.ccnt - (_t_).et.ccnt); \
}

#define RF_ETIMER_VAL_TICKS(_t_)  ((_t_).ticks)
#define RF_ETIMER_VAL_US(_t_)      (RF_ETIMER_TICKS2US((_t_).ticks))
#define RF_ETIMER_VAL_MS(_t_)      (RF_ETIMER_TICKS2US((_t_).ticks)/1000)
d67 2
@


1.1
log
@Import of CMU's RAIDframe via NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: rf_etimer.h,v 1.1 1998/11/13 04:20:29 oster Exp $	*/
/*	$NetBSD: rf_etimer.h,v 1.1 1998/11/13 04:20:29 oster Exp $	*/
a40 97
 * :  
 * Log: rf_etimer.h,v 
 * Revision 1.32  1996/08/13 18:11:09  jimz
 * want MACH&&!__osf__, not just MACH for mach timing (MACH defined under OSF/1)
 *
 * Revision 1.31  1996/08/12  20:11:38  jimz
 * use read_real_time() on AIX4+
 *
 * Revision 1.30  1996/08/09  18:48:12  jimz
 * for now, use gettimeofday() on MACH
 * (should eventually use better clock stuff)
 *
 * Revision 1.29  1996/08/07  21:09:08  jimz
 * add IRIX as a gettimeofday system
 *
 * Revision 1.28  1996/08/06  22:25:23  jimz
 * add LINUX_I386
 *
 * Revision 1.27  1996/07/30  04:45:53  jimz
 * add ultrix stuff
 *
 * Revision 1.26  1996/07/28  20:31:39  jimz
 * i386netbsd port
 * true/false fixup
 *
 * Revision 1.25  1996/07/27  23:36:08  jimz
 * Solaris port of simulator
 *
 * Revision 1.24  1996/07/27  18:40:24  jimz
 * cleanup sweep
 *
 * Revision 1.23  1996/07/22  19:52:16  jimz
 * switched node params to RF_DagParam_t, a union of
 * a 64-bit int and a void *, for better portability
 * attempted hpux port, but failed partway through for
 * lack of a single C compiler capable of compiling all
 * source files
 *
 * Revision 1.22  1996/07/18  22:57:14  jimz
 * port simulator to AIX
 *
 * Revision 1.21  1996/07/17  21:00:58  jimz
 * clean up timer interface, tracing
 *
 * Revision 1.20  1996/07/17  14:26:28  jimz
 * rf_scc -> rf_rpcc
 *
 * Revision 1.19  1996/06/14  21:24:48  jimz
 * move out ConfigureEtimer
 *
 * Revision 1.18  1996/06/03  23:28:26  jimz
 * more bugfixes
 * check in tree to sync for IPDS runs with current bugfixes
 * there still may be a problem with threads in the script test
 * getting I/Os stuck- not trivially reproducible (runs ~50 times
 * in a row without getting stuck)
 *
 * Revision 1.17  1996/05/30  23:22:16  jimz
 * bugfixes of serialization, timing problems
 * more cleanup
 *
 * Revision 1.16  1996/05/30  12:59:18  jimz
 * make etimer happier, more portable
 *
 * Revision 1.15  1996/05/27  18:56:37  jimz
 * more code cleanup
 * better typing
 * compiles in all 3 environments
 *
 * Revision 1.14  1996/05/23  21:46:35  jimz
 * checkpoint in code cleanup (release prep)
 * lots of types, function names have been fixed
 *
 * Revision 1.13  1996/05/23  00:33:23  jimz
 * code cleanup: move all debug decls to rf_options.c, all extern
 * debug decls to rf_options.h, all debug vars preceded by rf_
 *
 * Revision 1.12  1996/05/18  19:51:34  jimz
 * major code cleanup- fix syntax, make some types consistent,
 * add prototypes, clean out dead code, et cetera
 *
 * Revision 1.11  1995/12/01  18:10:40  root
 * added copyright info
 *
 * Revision 1.10  1995/09/29  14:27:32  wvcii
 * removed printfs from ConfigureEtimer()
 *
 * Revision 1.9  95/09/19  22:57:31  jimz
 * added kernel version of ConfigureEtimer
 * 
 * Revision 1.8  1995/09/14  13:03:04  amiri
 * set default CPU speed to 125Mhz to avoid divide by zero problems.
 *
 * Revision 1.7  1995/09/11  19:04:36  wvcii
 * timer autoconfigs using pdl routine to check cpu speed
 * value may still be overridden via config debug var timerTicksPerSec
 *
a48 7
#ifdef _KERNEL
#define KERNEL
#endif

#if defined(__NetBSD__) || defined(__OpenBSD__)

#ifdef KERNEL
a50 50
#else /* KERNEL */
#if !defined(__NetBSD__) && !defined(__OpenBSD__)
/* XXX does this function even exist anywhere??? GO */
extern unsigned int rf_rpcc();
#endif
#define rf_read_cycle_counter rf_rpcc
#endif /* KERNEL */

#define RF_DEF_TIMER_MAX_VAL            0xFFFFFFFF

typedef struct RF_EtimerVal_s {
  unsigned  ccnt; /* cycle count */
} RF_EtimerVal_t;

struct RF_Etimer_s {
  RF_EtimerVal_t  st;
  RF_EtimerVal_t  et;
  unsigned long   ticks; /* elapsed time in ticks */
};

extern long rf_timer_max_val;
extern long rf_timer_ticks_per_second;
extern unsigned long rf_timer_ticks_per_usec;

#define RF_ETIMER_TICKS2US(_tcks_)  ( (_tcks_) / rf_timer_ticks_per_usec )
#define RF_ETIMER_START(_t_)  { (_t_).st.ccnt = rf_read_cycle_counter(); }
#define RF_ETIMER_STOP(_t_)   { (_t_).et.ccnt = rf_read_cycle_counter(); }
#define RF_ETIMER_EVAL(_t_) { \
	if ((_t_).st.ccnt < (_t_).et.ccnt) \
		(_t_).ticks = (_t_).et.ccnt - (_t_).st.ccnt; \
	else \
		(_t_).ticks = rf_timer_max_val - ((_t_).st.ccnt - (_t_).et.ccnt); \
}

#define RF_ETIMER_VAL_TICKS(_t_)  ((_t_).ticks)
#define RF_ETIMER_VAL_US(_t_)      (RF_ETIMER_TICKS2US((_t_).ticks))
#define RF_ETIMER_VAL_MS(_t_)      (RF_ETIMER_TICKS2US((_t_).ticks)/1000)

#endif /* __NetBSD__ || __OpenBSD__ */


#if defined(__alpha) && !defined(__NetBSD__) && !defined(__OpenBSD__)

#ifdef KERNEL
extern unsigned int rpcc();
#define rf_read_cycle_counter rpcc
#else /* KERNEL */
extern unsigned int rf_rpcc();
#define rf_read_cycle_counter rf_rpcc
#endif /* KERNEL */
d55 2
a56 2
  unsigned  ccnt; /* cycle count */
} RF_EtimerVal_t;
d59 3
a61 3
  RF_EtimerVal_t  st;
  RF_EtimerVal_t  et;
  unsigned long   ticks; /* elapsed time in ticks */
a81 116
#endif /* __alpha */

#ifdef _IBMR2

extern void rf_rtclock(unsigned int *secs, unsigned int *nsecs);

#define RF_MSEC_PER_SEC 1000
#define RF_USEC_PER_SEC 1000000
#define RF_NSEC_PER_SEC 1000000000

typedef struct RF_EtimerVal_s {
  unsigned int secs;
  unsigned int nsecs;
} RF_EtimerVal_t;

struct RF_Etimer_s {
  RF_EtimerVal_t  start;
  RF_EtimerVal_t  end;
  RF_EtimerVal_t  elapsed;
};

#if RF_AIXVERS >= 4

#include <sys/time.h>

#define RF_ETIMER_START(_t_) { \
  timebasestruct_t tb; \
  tb.flag = 1; \
  read_real_time(&tb, TIMEBASE_SZ); \
  (_t_).start.secs = tb.tb_high; \
  (_t_).start.nsecs = tb.tb_low; \
}

#define RF_ETIMER_STOP(_t_) { \
  timebasestruct_t tb; \
  tb.flag = 1; \
  read_real_time(&tb, TIMEBASE_SZ); \
  (_t_).end.secs = tb.tb_high; \
  (_t_).end.nsecs = tb.tb_low; \
}

#else /* RF_AIXVERS >= 4 */

#define RF_ETIMER_START(_t_) { \
  rf_rtclock(&((_t_).start.secs), &((_t_).start.nsecs)); \
}

#define RF_ETIMER_STOP(_t_) { \
  rf_rtclock(&((_t_).end.secs), &((_t_).end.nsecs)); \
}

#endif /* RF_AIXVERS >= 4 */

#define RF_ETIMER_EVAL(_t_) { \
  if ((_t_).end.nsecs >= (_t_).start.nsecs) { \
    (_t_).elapsed.nsecs = (_t_).end.nsecs - (_t_).start.nsecs; \
    (_t_).elapsed.secs = (_t_).end.secs - (_t_).start.nsecs; \
  } \
  else { \
    (_t_).elapsed.nsecs = RF_NSEC_PER_SEC + (_t_).end.nsecs; \
    (_t_).elapsed.nsecs -= (_t_).start.nsecs; \
    (_t_).elapsed.secs = (_t_).end.secs - (_t_).start.secs + 1; \
  } \
}

#define RF_ETIMER_VAL_US(_t_) (((_t_).elapsed.secs*RF_USEC_PER_SEC)+((_t_).elapsed.nsecs/1000))
#define RF_ETIMER_VAL_MS(_t_) (((_t_).elapsed.secs*RF_MSEC_PER_SEC)+((_t_).elapsed.nsecs/1000000))

#endif /* _IBMR2 */

/*
 * XXX investigate better timing for these
 */
#if defined(hpux) || defined(sun) || defined(NETBSD_I386) || defined(OPENBSD_I386) || defined(ultrix) || defined(LINUX_I386) || defined(IRIX) || (defined(MACH) && !defined(__osf__))
#include <sys/time.h>

#define RF_USEC_PER_SEC 1000000

struct RF_Etimer_s {
  struct timeval  start;
  struct timeval  end;
  struct timeval  elapsed;
};
#if !defined(__NetBSD__) && !defined(__OpenBSD__)
#define RF_ETIMER_START(_t_) { \
  gettimeofday(&((_t_).start), NULL); \
}

#define RF_ETIMER_STOP(_t_) { \
  gettimeofday(&((_t_).end), NULL); \
}

#else
#define RF_ETIMER_START(_t_) { \
}
/* XXX these just drop off the end of the world... */
#define RF_ETIMER_STOP(_t_) { \
}
#endif 

#define RF_ETIMER_EVAL(_t_) { \
  if ((_t_).end.tv_usec >= (_t_).start.tv_usec) { \
    (_t_).elapsed.tv_usec = (_t_).end.tv_usec - (_t_).start.tv_usec; \
    (_t_).elapsed.tv_sec = (_t_).end.tv_sec - (_t_).start.tv_usec; \
  } \
  else { \
    (_t_).elapsed.tv_usec = RF_USEC_PER_SEC + (_t_).end.tv_usec; \
    (_t_).elapsed.tv_usec -= (_t_).start.tv_usec; \
    (_t_).elapsed.tv_sec = (_t_).end.tv_sec - (_t_).start.tv_sec + 1; \
  } \
}

#define RF_ETIMER_VAL_US(_t_) (((_t_).elapsed.tv_sec*RF_USEC_PER_SEC)+(_t_).elapsed.tv_usec)
#define RF_ETIMER_VAL_MS(_t_) (((_t_).elapsed.tv_sec*RF_MSEC_PER_SEC)+((_t_).elapsed.tv_usec/1000))

#endif /* hpux || sun || NETBSD_I386 || OPENBSD_I386 || ultrix || LINUX_I386 || IRIX || (MACH && !__osf__) */
d83 1
a83 1
#endif /* !_RF__RF_TIMER_H_ */
@

