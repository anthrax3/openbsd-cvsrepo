head	1.45;
access;
symbols
	OPENBSD_6_1:1.45.0.4
	OPENBSD_6_1_BASE:1.45
	OPENBSD_6_0:1.45.0.2
	OPENBSD_6_0_BASE:1.45
	OPENBSD_5_9:1.40.0.6
	OPENBSD_5_9_BASE:1.40
	OPENBSD_5_8:1.40.0.14
	OPENBSD_5_8_BASE:1.40
	OPENBSD_5_7:1.40.0.12
	OPENBSD_5_7_BASE:1.40
	OPENBSD_5_6:1.40.0.10
	OPENBSD_5_6_BASE:1.40
	OPENBSD_5_5:1.40.0.8
	OPENBSD_5_5_BASE:1.40
	OPENBSD_5_4:1.40.0.4
	OPENBSD_5_4_BASE:1.40
	OPENBSD_5_3:1.40.0.2
	OPENBSD_5_3_BASE:1.40
	OPENBSD_5_2:1.39.0.8
	OPENBSD_5_2_BASE:1.39
	OPENBSD_5_1_BASE:1.39
	OPENBSD_5_1:1.39.0.6
	OPENBSD_5_0:1.39.0.4
	OPENBSD_5_0_BASE:1.39
	OPENBSD_4_9:1.39.0.2
	OPENBSD_4_9_BASE:1.39
	OPENBSD_4_8:1.38.0.2
	OPENBSD_4_8_BASE:1.38
	OPENBSD_4_7:1.33.0.2
	OPENBSD_4_7_BASE:1.33
	OPENBSD_4_6:1.32.0.4
	OPENBSD_4_6_BASE:1.32
	OPENBSD_4_5:1.30.0.4
	OPENBSD_4_5_BASE:1.30
	OPENBSD_4_4:1.30.0.2
	OPENBSD_4_4_BASE:1.30
	OPENBSD_4_3:1.25.0.6
	OPENBSD_4_3_BASE:1.25
	OPENBSD_4_2:1.25.0.4
	OPENBSD_4_2_BASE:1.25
	OPENBSD_4_1:1.25.0.2
	OPENBSD_4_1_BASE:1.25
	OPENBSD_4_0:1.15.0.2
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.14.0.2
	OPENBSD_3_9_BASE:1.14;
locks; strict;
comment	@ * @;


1.45
date	2016.05.08.11.08.01;	author kettenis;	state Exp;
branches;
next	1.44;
commitid	SBTJg3diM8lXHXRE;

1.44
date	2016.05.08.10.09.25;	author kettenis;	state Exp;
branches;
next	1.43;
commitid	uJrpYfaaMO9KnwtE;

1.43
date	2016.04.02.00.34.47;	author jsg;	state Exp;
branches;
next	1.42;
commitid	8QnXtI2isFC8GIbE;

1.42
date	2016.03.30.09.56.10;	author kettenis;	state Exp;
branches;
next	1.41;
commitid	m1mxeGggcTdEuQ2L;

1.41
date	2016.03.28.17.27.57;	author kettenis;	state Exp;
branches;
next	1.40;
commitid	wKoXuDHyj7R42mqS;

1.40
date	2012.09.07.19.19.59;	author kettenis;	state Exp;
branches;
next	1.39;

1.39
date	2010.10.15.20.25.04;	author jordan;	state Exp;
branches;
next	1.38;

1.38
date	2010.07.21.19.35.15;	author deraadt;	state Exp;
branches;
next	1.37;

1.37
date	2010.07.08.20.56.31;	author jordan;	state Exp;
branches;
next	1.36;

1.36
date	2010.07.01.06.29.32;	author jordan;	state Exp;
branches;
next	1.35;

1.35
date	2010.06.29.22.08.29;	author jordan;	state Exp;
branches;
next	1.34;

1.34
date	2010.06.27.21.04.22;	author jordan;	state Exp;
branches;
next	1.33;

1.33
date	2009.07.17.21.44.48;	author jordan;	state Exp;
branches;
next	1.32;

1.32
date	2009.05.30.22.49.56;	author jordan;	state Exp;
branches;
next	1.31;

1.31
date	2009.04.27.23.39.14;	author jordan;	state Exp;
branches;
next	1.30;

1.30
date	2008.06.08.02.51.55;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2008.06.01.17.59.55;	author marco;	state Exp;
branches;
next	1.28;

1.28
date	2008.05.16.06.50.55;	author dlg;	state Exp;
branches;
next	1.27;

1.27
date	2008.05.14.05.24.36;	author jordan;	state Exp;
branches;
next	1.26;

1.26
date	2008.05.13.09.05.06;	author jordan;	state Exp;
branches;
next	1.25;

1.25
date	2007.02.06.18.56.31;	author jordan;	state Exp;
branches;
next	1.24;

1.24
date	2007.01.23.04.05.58;	author jordan;	state Exp;
branches;
next	1.23;

1.23
date	2006.12.22.14.24.34;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2006.12.21.11.33.21;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2006.12.21.11.23.41;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2006.11.25.18.24.54;	author marco;	state Exp;
branches;
next	1.19;

1.19
date	2006.10.24.19.45.06;	author marco;	state Exp;
branches;
next	1.18;

1.18
date	2006.10.19.07.02.20;	author jordan;	state Exp;
branches;
next	1.17;

1.17
date	2006.10.16.00.01.05;	author jordan;	state Exp;
branches;
next	1.16;

1.16
date	2006.10.12.16.38.21;	author jordan;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.07.23.13.28;	author marco;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.23.19.56.44;	author jordan;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.16.21.11.13;	author jordan;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.03.23.55.47;	author jordan;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.20.20.20.28;	author jordan;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.18.22.25.44;	author jordan;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.17.23.42.14;	author jordan;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.28.03.04.56;	author jordan;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.13.07.23.34;	author marco;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.13.04.16.56;	author jordan;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.09.02.26.40;	author jordan;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.07.22.34.20;	author jordan;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.07.08.09.05;	author jordan;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.07.07.46.51;	author jordan;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.07.04.24.31;	author jordan;	state Exp;
branches;
next	;


desc
@@


1.45
log
@Add support for writing gpio pins.
@
text
@/* $OpenBSD: amltypes.h,v 1.44 2016/05/08 10:09:25 kettenis Exp $ */
/*
 * Copyright (c) 2005 Jordan Hargrave <jordan@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef __DEV_ACPI_AMLTYPES_H__
#define __DEV_ACPI_AMLTYPES_H__

/* AML Opcodes */
#define AMLOP_ZERO		0x00
#define AMLOP_ONE		0x01
#define AMLOP_ALIAS		0x06
#define AMLOP_NAME		0x08
#define AMLOP_BYTEPREFIX	0x0A
#define AMLOP_WORDPREFIX	0x0B
#define AMLOP_DWORDPREFIX	0x0C
#define AMLOP_STRINGPREFIX	0x0D
#define AMLOP_QWORDPREFIX	0x0E
#define AMLOP_SCOPE		0x10
#define AMLOP_BUFFER		0x11
#define AMLOP_PACKAGE		0x12
#define AMLOP_VARPACKAGE	0x13
#define AMLOP_METHOD		0x14
#define AMLOP_DUALNAMEPREFIX	0x2E
#define AMLOP_MULTINAMEPREFIX	0x2F
#define AMLOP_EXTPREFIX		0x5B
#define AMLOP_MUTEX		0x5B01
#define AMLOP_EVENT		0x5B02
#define AMLOP_CONDREFOF		0x5B12
#define AMLOP_CREATEFIELD	0x5B13
#define AMLOP_LOADTABLE		0x5B1F
#define AMLOP_LOAD		0x5B20
#define AMLOP_STALL		0x5B21
#define AMLOP_SLEEP		0x5B22
#define AMLOP_ACQUIRE		0x5B23
#define AMLOP_SIGNAL		0x5B24
#define AMLOP_WAIT		0x5B25
#define AMLOP_RESET		0x5B26
#define AMLOP_RELEASE		0x5B27
#define AMLOP_FROMBCD		0x5B28
#define AMLOP_TOBCD		0x5B29
#define AMLOP_UNLOAD		0x5B2A
#define AMLOP_REVISION		0x5B30
#define AMLOP_DEBUG		0x5B31
#define AMLOP_FATAL		0x5B32
#define AMLOP_TIMER		0x5B33
#define AMLOP_OPREGION		0x5B80
#define AMLOP_FIELD		0x5B81
#define AMLOP_DEVICE		0x5B82
#define AMLOP_PROCESSOR		0x5B83
#define AMLOP_POWERRSRC		0x5B84
#define AMLOP_THERMALZONE	0x5B85
#define AMLOP_INDEXFIELD	0x5B86
#define AMLOP_BANKFIELD		0x5B87
#define AMLOP_DATAREGION	0x5B88
#define AMLOP_ROOTCHAR		0x5C
#define AMLOP_PARENTPREFIX	0x5E
#define AMLOP_NAMECHAR		0x5F
#define AMLOP_LOCAL0		0x60
#define AMLOP_LOCAL1		0x61
#define AMLOP_LOCAL2		0x62
#define AMLOP_LOCAL3		0x63
#define AMLOP_LOCAL4		0x64
#define AMLOP_LOCAL5		0x65
#define AMLOP_LOCAL6		0x66
#define AMLOP_LOCAL7		0x67
#define AMLOP_ARG0		0x68
#define AMLOP_ARG1		0x69
#define AMLOP_ARG2		0x6A
#define AMLOP_ARG3		0x6B
#define AMLOP_ARG4		0x6C
#define AMLOP_ARG5		0x6D
#define AMLOP_ARG6		0x6E
#define AMLOP_STORE		0x70
#define AMLOP_REFOF		0x71
#define AMLOP_ADD		0x72
#define AMLOP_CONCAT		0x73
#define AMLOP_SUBTRACT		0x74
#define AMLOP_INCREMENT		0x75
#define AMLOP_DECREMENT		0x76
#define AMLOP_MULTIPLY		0x77
#define AMLOP_DIVIDE		0x78
#define AMLOP_SHL		0x79
#define AMLOP_SHR		0x7A
#define AMLOP_AND		0x7B
#define AMLOP_NAND		0x7C
#define AMLOP_OR		0x7D
#define AMLOP_NOR		0x7E
#define AMLOP_XOR		0x7F
#define AMLOP_NOT		0x80
#define AMLOP_FINDSETLEFTBIT	0x81
#define AMLOP_FINDSETRIGHTBIT	0x82
#define AMLOP_DEREFOF		0x83
#define AMLOP_CONCATRES		0x84
#define AMLOP_MOD		0x85
#define AMLOP_NOTIFY		0x86
#define AMLOP_SIZEOF		0x87
#define AMLOP_INDEX		0x88
#define AMLOP_MATCH		0x89
#define AMLOP_CREATEDWORDFIELD	0x8A
#define AMLOP_CREATEWORDFIELD	0x8B
#define AMLOP_CREATEBYTEFIELD	0x8C
#define AMLOP_CREATEBITFIELD	0x8D
#define AMLOP_OBJECTTYPE	0x8E
#define AMLOP_CREATEQWORDFIELD	0x8F
#define AMLOP_LAND		0x90
#define AMLOP_LOR		0x91
#define AMLOP_LNOT		0x92
#define AMLOP_LNOTEQUAL		0x9293
#define AMLOP_LLESSEQUAL	0x9294
#define AMLOP_LGREATEREQUAL	0x9295
#define AMLOP_LEQUAL		0x93
#define AMLOP_LGREATER		0x94
#define AMLOP_LLESS		0x95
#define AMLOP_TOBUFFER		0x96
#define AMLOP_TODECSTRING	0x97
#define AMLOP_TOHEXSTRING	0x98
#define AMLOP_TOINTEGER		0x99
#define AMLOP_TOSTRING		0x9C
#define AMLOP_COPYOBJECT	0x9D
#define AMLOP_MID		0x9E
#define AMLOP_CONTINUE		0x9F
#define AMLOP_IF		0xA0
#define AMLOP_ELSE		0xA1
#define AMLOP_WHILE		0xA2
#define AMLOP_NOP		0xA3
#define AMLOP_RETURN		0xA4
#define AMLOP_BREAK		0xA5
#define AMLOP_BREAKPOINT	0xCC
#define AMLOP_ONES		0xFF

#define AMLOP_FIELDUNIT		0xFE00
#define AML_ANYINT		0xFF00

/*
 * Comparison types for Match()
 *
 *  true,==,<=,<,>=,>
 */
#define AML_MATCH_TR		0
#define AML_MATCH_EQ		1
#define AML_MATCH_LE		2
#define AML_MATCH_LT		3
#define AML_MATCH_GE		4
#define AML_MATCH_GT		5

/* Defined types for ObjectType() */
enum aml_objecttype {
	AML_OBJTYPE_UNINITIALIZED = 0,
	AML_OBJTYPE_INTEGER,
	AML_OBJTYPE_STRING,
	AML_OBJTYPE_BUFFER,
	AML_OBJTYPE_PACKAGE,
	AML_OBJTYPE_FIELDUNIT,
	AML_OBJTYPE_DEVICE,
	AML_OBJTYPE_EVENT,
	AML_OBJTYPE_METHOD,
	AML_OBJTYPE_MUTEX,
	AML_OBJTYPE_OPREGION,
	AML_OBJTYPE_POWERRSRC,
	AML_OBJTYPE_PROCESSOR,
	AML_OBJTYPE_THERMZONE,
	AML_OBJTYPE_BUFFERFIELD,
	AML_OBJTYPE_DDBHANDLE,
	AML_OBJTYPE_DEBUGOBJ,

	AML_OBJTYPE_NAMEREF = 0x100,
	AML_OBJTYPE_OBJREF,
	AML_OBJTYPE_SCOPE,
	AML_OBJTYPE_NOTARGET,
	AML_OBJTYPE_HEXSTRING,
	AML_OBJTYPE_DECSTRING,
};

/* AML Opcode Arguments */
#define AML_ARG_INTEGER		'i'
#define AML_ARG_BYTE		'b'
#define AML_ARG_WORD		'w'
#define AML_ARG_DWORD		'd'
#define AML_ARG_QWORD		'q'
#define AML_ARG_IMPBYTE		'!'
#define AML_ARG_OBJLEN		'p'
#define AML_ARG_STRING		'a'
#define AML_ARG_BYTELIST	'B'
#define AML_ARG_REVISION	'R'

#define AML_ARG_METHOD		'M'
#define AML_ARG_NAMESTRING	'N'
#define AML_ARG_NAMEREF		'n'
#define AML_ARG_FIELDLIST	'F'
#define AML_ARG_FLAG		'f'

#define AML_ARG_DATAOBJLIST	'O'
#define AML_ARG_DATAOBJ		'o'

#define AML_ARG_SIMPLENAME	's'
#define AML_ARG_SUPERNAME	'S'

#define AML_ARG_TERMOBJLIST	'T'
#define AML_ARG_TERMOBJ		't'

#define AML_ARG_IFELSE          'I'
#define AML_ARG_BUFFER          'B'
#define AML_ARG_SEARCHNAME      'n'
#define AML_ARG_CREATENAME      'N'
#define AML_ARG_STKARG          'A'
#define AML_ARG_STKLOCAL        'L'
#define AML_ARG_DEBUG           'D'
#define AML_ARG_CONST           'c'
#define AML_ARG_TARGET          'r'

#define AML_METHOD_ARGCOUNT(v)	 (((v) >> 0) & 0x7)
#define AML_METHOD_SERIALIZED(v) (((v) >> 3) & 0x1)
#define AML_METHOD_SYNCLEVEL(v)	 (((v) >> 4) & 0xF)

#define AML_FIELD_ACCESSMASK	0x0F
#define AML_FIELD_SETATTR(f,t,a) (((f) & 0xF0) | ((t) & 0xF) | ((a)<<8))
#define AML_FIELD_ACCESS(v)	(((v) >> 0) & 0xF)
# define AML_FIELD_ANYACC	0x0
# define AML_FIELD_BYTEACC	0x1
# define AML_FIELD_WORDACC	0x2
# define AML_FIELD_DWORDACC	0x3
# define AML_FIELD_QWORDACC	0x4
# define AML_FIELD_BUFFERACC	0x5
#define AML_FIELD_LOCK(v)	(((v) >> 4) & 0x1)
# define AML_FIELD_LOCK_OFF	0x0
# define AML_FIELD_LOCK_ON	0x1
#define AML_FIELD_UPDATE(v)	(((v) >> 5) & 0x3)
# define AML_FIELD_PRESERVE	0x0
# define AML_FIELD_WRITEASONES	0x1
# define AML_FIELD_WRITEASZEROES 0x2
#define AML_FIELD_ATTR(v)	((v) >> 8)
#define AML_FIELD_RESERVED	0x00
/* XXX fix this name */
#define AML_FIELD_ATTR__		0x01

struct aml_scope;
struct aml_node;

struct aml_waitq {
	struct aml_scope          *scope;
	SIMPLEQ_ENTRY(aml_waitq)   link;
};
SIMPLEQ_HEAD(aml_waitq_head, aml_waitq);

/* AML Object Value */
struct aml_value {
	int	type;
	int	length;
	int	refcnt;
	int	stack;
	struct aml_node *node;
	union {
		int64_t		vinteger;
		char		*vstring;
		u_int8_t	*vbuffer;
		struct aml_value **vpackage;
		struct {
			u_int8_t	iospace;
			u_int64_t	iobase;
			u_int32_t	iolen;
			int		flag;
		} vopregion;
		struct {
			int		flags;
			u_int8_t	*start;
			u_int8_t	*end;
			struct aml_value *(*fneval)(struct aml_scope *, struct aml_value *);
			u_int8_t        *base;
		} vmethod;
		struct {
			u_int16_t	 type;
			u_int16_t	 flags;
			u_int32_t	 bitpos;
			u_int32_t	 bitlen;
			struct aml_value *ref1;
			struct aml_value *ref2;
			int		 ref3;
		} vfield;
		struct {
			u_int8_t	proc_id;
			u_int32_t	proc_addr;
			u_int8_t	proc_len;
		} vprocessor;
		struct {
			int		type;
			int		index;
			struct aml_value *ref;
		} vobjref;
		struct {
			u_int8_t	pwr_level;
			u_int16_t	pwr_order;
		} vpowerrsrc;
		struct acpi_mutex	*vmutex;
		struct {
			u_int8_t         *name;
			struct aml_node  *node;
		} vnameref;
		struct {
			int               synclvl;
			int               savelvl;
			int               count;
			char              ownername[5];
			struct aml_scope *owner;
			struct aml_waitq_head    waiters;
		} Vmutex;
		struct {
			int               state;
			struct aml_waitq_head    waiters;
		} Vevent;
	} _;
};

#define v_nameref		_.vbuffer
#define v_objref		_.vobjref
#define v_integer		_.vinteger
#define v_string		_.vstring
#define v_buffer		_.vbuffer
#define v_package		_.vpackage
#define v_field			_.vfield
#define v_opregion		_.vopregion
#define v_method		_.vmethod
#define v_processor		_.vprocessor
#define v_powerrsrc		_.vpowerrsrc
#define v_mutex			_.vmutex
#define v_mtx                   _.Vmutex
#define v_evt                   _.Vevent

#define xaml_intval(v)		((v)->v_integer)
#define aml_strlen(v)		((v)->length)
#define aml_strval(v)		((v)->v_string ? (v)->v_string : "bad string")
#define aml_buflen(v)		((v)->length)
#define aml_bufval(v)		((v)->v_buffer)
#define aml_pkglen(v)		((v)->length)
#define aml_pkgval(v,i)		(&(v)->v_package[(i)])

struct acpi_pci {
	TAILQ_ENTRY(acpi_pci)		next;

	struct aml_node			*node;
	struct device			*device;

	int				sub;
	int				seg;
	int				bus;
	int				dev;
	int				fun;

	int				_s3d;
	int				_s3w;
	int				_s4d;
	int				_s4w;
};

struct acpi_gpio {
	void	*cookie;
	int	(*read_pin)(void *, int);
	void	(*write_pin)(void *, int, int);
	void	(*intr_establish)(void *, int, int, int (*)(void *), void *);
};

struct aml_node {
	struct aml_node *parent;

	SIMPLEQ_HEAD(,aml_node)	son;
	SIMPLEQ_ENTRY(aml_node)	sib;

	int		attached;

	char		name[5];
	u_int16_t	opcode;
	u_int8_t	*start;
	u_int8_t	*end;

	struct aml_value *value;
	struct acpi_pci  *pci;
	struct acpi_gpio *gpio;
};

#define aml_bitmask(n)		(1L << ((n) & 0x7))
#define aml_bitpos(n)		((n)&0x7)
#define aml_bytepos(n)		((n)>>3)
#define aml_bytelen(n)		(((n)+7)>>3)
#define aml_bytealigned(x)	!((x)&0x7)

#endif /* __DEV_ACPI_AMLTYPES_H__ */
@


1.44
log
@Make sure devices listed by a device's _DEP method are attached before
we attach the device itself.  The _DEP methode, introduced in ACPI 5.0,
is a hint that the device in question depends on OpRegion support from
the devices listed by _DEP, so we have to order them the proper way.
To prevent us from attaching those devices again when we encounter them
later walking down the device tree, keep track of our attempts to
attach a device driver to them using aflag in the aml_node structure.

ok guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.43 2016/04/02 00:34:47 jsg Exp $ */
d370 1
@


1.43
log
@Make the gpio intr_establish callback return an int so the same function
pointer can be used with gpio and acpi intr_establish.

ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.42 2016/03/30 09:56:10 kettenis Exp $ */
d378 2
@


1.42
log
@Add support for gpio-based interrupts.

ok jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.41 2016/03/28 17:27:57 kettenis Exp $ */
d370 1
a370 1
	void	(*intr_establish)(void *, int, int, void (*)(void *), void *);
@


1.41
log
@Add infrastructure that allows gpio drivers to register themselves with
the acpi framework such that we can start adding supportfor GPIO resources.
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.40 2012/09/07 19:19:59 kettenis Exp $ */
d370 1
@


1.40
log
@Add a new function called acpi_pci_min_powerstate() that returns the lowest
power state for a PCI device for the power state (currently S3 or S4) we're
transitioning into.  This function is probably too simplistic; there is a lot
of (silly) complexity in the ACPI spec.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.39 2010/10/15 20:25:04 jordan Exp $ */
d367 5
d385 1
@


1.39
log
@Remove redundant definition
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.38 2010/07/21 19:35:15 deraadt Exp $ */
d360 5
@


1.38
log
@spacing and indents that are driving me crazy
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.37 2010/07/08 20:56:31 jordan Exp $ */
a110 1
#define AMLOP_DEREFOF		0x83
@


1.37
log
@Add mapping for ACPI device to PCI bdf (match autoconf tree)
Simplify resource parsing function to use buffer argument
Convert namespace linked lists to use queue macros
ok marco@@, deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.35 2010/06/29 22:08:29 jordan Exp $ */
d316 1
a316 1
		  	char              ownername[5];
@


1.36
log
@Backout recent AML changes, breaks on R210 and others
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.33 2009/07/17 21:44:48 jordan Exp $ */
d350 13
d365 3
a367 2
	struct aml_node *child;
	struct aml_node *sibling;
a372 2
  //	const char	*name;
  //	const char	*mnem;
d375 1
a375 2

	int		depth;
@


1.35
log
@Add support for mapping ACPI to PCI devices
ok kettenis, deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.34 2010/06/27 21:04:22 jordan Exp $ */
a349 13
struct acpi_pci {
	TAILQ_ENTRY(acpi_pci)		next;

	struct aml_node			*node;
	struct device			*device;

	int				sub;
	int				seg;
	int				bus;
	int				dev;
	int				fun;
};

d352 2
a353 3

	SIMPLEQ_HEAD(,aml_node)	son;
	SIMPLEQ_ENTRY(aml_node)	sib;
d359 2
d363 2
a364 1
	struct acpi_pci  *pci;
@


1.34
log
@Change ACPI namespace to use SIMPLEQ macros
ok mlarkin
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.33 2009/07/17 21:44:48 jordan Exp $ */
d350 13
a372 2
  //	const char	*name;
  //	const char	*mnem;
d375 1
a375 2

	int		depth;
@


1.33
log
@Cleaned up parsing of While loops; iterative If statement
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.32 2009/05/30 22:49:56 jordan Exp $ */
d352 3
a354 2
	struct aml_node *child;
	struct aml_node *sibling;
@


1.32
log
@Added error handler for missing AML nameref; fixes PR6103
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.31 2009/04/27 23:39:14 jordan Exp $ */
a215 1
#define AML_ARG_WHILE           'W'
@


1.31
log
@Remove unnecessary aml_xconvert arg, code cleanup
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.30 2008/06/08 02:51:55 deraadt Exp $ */
a159 2
#define AML_STATIC		0x8000

a183 1
	AML_OBJTYPE_STATICINT = AML_OBJTYPE_INTEGER|AML_STATIC,
@


1.30
log
@unused defines
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.29 2008/06/01 17:59:55 marco Exp $ */
d187 2
@


1.29
log
@Re-enable new parser.  Lots of testing by various folks.  Fits all media
now too.

ok kettenis deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.27 2008/05/14 05:24:36 jordan Exp $ */
d186 1
a186 1
	AML_OBJTYPE_STATICINT=AML_OBJTYPE_INTEGER|AML_STATIC,
d255 1
a255 2
struct aml_waitq
{
a367 3

#define AML_FALSE		(0)
#define AML_TRUE		(1)
@


1.28
log
@back out jordans new parser.

it didnt have enough oks from the right people, it did break machines
that were previously working, and it bloated the RAMDISKS and install
media beyond the constraints of the media.

requested by deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.26 2008/05/13 09:05:06 jordan Exp $ */
d278 1
@


1.27
log
@Adding new ACPI Parser code
Old guts of code still exists, needs to be torn out next
ok marco@@
ok brad@@
@
text
@a277 1
			int		flag;
@


1.26
log
@Adding changes for new parser
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.25 2007/02/06 18:56:31 jordan Exp $ */
d278 1
@


1.25
log
@Added support for calling _OSI method
Display byte/word/string/nameref for aml_mnem function
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.24 2007/01/23 04:05:58 jordan Exp $ */
d184 2
d216 11
d255 7
d284 1
d301 1
d310 16
d341 2
@


1.24
log
@Fixes for static integer setting
thanks to giovanni
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.23 2006/12/22 14:24:34 deraadt Exp $ */
d239 1
d263 1
@


1.23
log
@spacing
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.22 2006/12/21 11:33:21 deraadt Exp $ */
d184 1
@


1.22
log
@spacing
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.21 2006/12/21 11:23:41 deraadt Exp $ */
d22 122
a143 122
#define AMLOP_ZERO             0x00
#define AMLOP_ONE              0x01
#define AMLOP_ALIAS            0x06
#define AMLOP_NAME             0x08
#define AMLOP_BYTEPREFIX       0x0A
#define AMLOP_WORDPREFIX       0x0B
#define AMLOP_DWORDPREFIX      0x0C
#define AMLOP_STRINGPREFIX     0x0D
#define AMLOP_QWORDPREFIX      0x0E
#define AMLOP_SCOPE            0x10
#define AMLOP_BUFFER           0x11
#define AMLOP_PACKAGE          0x12
#define AMLOP_VARPACKAGE       0x13
#define AMLOP_METHOD           0x14
#define AMLOP_DUALNAMEPREFIX   0x2E
#define AMLOP_MULTINAMEPREFIX  0x2F
#define AMLOP_EXTPREFIX        0x5B
#define AMLOP_MUTEX            0x5B01
#define AMLOP_EVENT            0x5B02
#define AMLOP_CONDREFOF        0x5B12
#define AMLOP_CREATEFIELD      0x5B13
#define AMLOP_LOADTABLE        0x5B1F
#define AMLOP_LOAD             0x5B20
#define AMLOP_STALL            0x5B21
#define AMLOP_SLEEP            0x5B22
#define AMLOP_ACQUIRE          0x5B23
#define AMLOP_SIGNAL           0x5B24
#define AMLOP_WAIT             0x5B25
#define AMLOP_RESET            0x5B26
#define AMLOP_RELEASE          0x5B27
#define AMLOP_FROMBCD          0x5B28
#define AMLOP_TOBCD            0x5B29
#define AMLOP_UNLOAD           0x5B2A
#define AMLOP_REVISION         0x5B30
#define AMLOP_DEBUG            0x5B31
#define AMLOP_FATAL            0x5B32
#define AMLOP_TIMER            0x5B33
#define AMLOP_OPREGION         0x5B80
#define AMLOP_FIELD            0x5B81
#define AMLOP_DEVICE           0x5B82
#define AMLOP_PROCESSOR        0x5B83
#define AMLOP_POWERRSRC        0x5B84
#define AMLOP_THERMALZONE      0x5B85
#define AMLOP_INDEXFIELD       0x5B86
#define AMLOP_BANKFIELD        0x5B87
#define AMLOP_DATAREGION       0x5B88
#define AMLOP_ROOTCHAR         0x5C
#define AMLOP_PARENTPREFIX     0x5E
#define AMLOP_NAMECHAR         0x5F
#define AMLOP_LOCAL0           0x60
#define AMLOP_LOCAL1           0x61
#define AMLOP_LOCAL2           0x62
#define AMLOP_LOCAL3           0x63
#define AMLOP_LOCAL4           0x64
#define AMLOP_LOCAL5           0x65
#define AMLOP_LOCAL6           0x66
#define AMLOP_LOCAL7           0x67
#define AMLOP_ARG0             0x68
#define AMLOP_ARG1             0x69
#define AMLOP_ARG2             0x6A
#define AMLOP_ARG3             0x6B
#define AMLOP_ARG4             0x6C
#define AMLOP_ARG5             0x6D
#define AMLOP_ARG6             0x6E
#define AMLOP_STORE            0x70
#define AMLOP_REFOF            0x71
#define AMLOP_ADD              0x72
#define AMLOP_CONCAT           0x73
#define AMLOP_SUBTRACT         0x74
#define AMLOP_INCREMENT        0x75
#define AMLOP_DECREMENT        0x76
#define AMLOP_MULTIPLY         0x77
#define AMLOP_DIVIDE           0x78
#define AMLOP_SHL              0x79
#define AMLOP_SHR              0x7A
#define AMLOP_AND              0x7B
#define AMLOP_NAND             0x7C
#define AMLOP_OR               0x7D
#define AMLOP_NOR              0x7E
#define AMLOP_XOR              0x7F
#define AMLOP_NOT              0x80
#define AMLOP_FINDSETLEFTBIT   0x81
#define AMLOP_FINDSETRIGHTBIT  0x82
#define AMLOP_DEREFOF          0x83
#define AMLOP_CONCATRES        0x84
#define AMLOP_MOD              0x85
#define AMLOP_NOTIFY           0x86
#define AMLOP_SIZEOF           0x87
#define AMLOP_INDEX            0x88
#define AMLOP_DEREFOF          0x83
#define AMLOP_MATCH            0x89
#define AMLOP_CREATEDWORDFIELD 0x8A
#define AMLOP_CREATEWORDFIELD  0x8B
#define AMLOP_CREATEBYTEFIELD  0x8C
#define AMLOP_CREATEBITFIELD   0x8D
#define AMLOP_OBJECTTYPE       0x8E
#define AMLOP_CREATEQWORDFIELD 0x8F
#define AMLOP_LAND             0x90
#define AMLOP_LOR              0x91
#define AMLOP_LNOT             0x92
#define AMLOP_LNOTEQUAL        0x9293
#define AMLOP_LLESSEQUAL       0x9294
#define AMLOP_LGREATEREQUAL    0x9295
#define AMLOP_LEQUAL           0x93
#define AMLOP_LGREATER         0x94
#define AMLOP_LLESS            0x95
#define AMLOP_TOBUFFER         0x96
#define AMLOP_TODECSTRING      0x97
#define AMLOP_TOHEXSTRING      0x98
#define AMLOP_TOINTEGER        0x99
#define AMLOP_TOSTRING         0x9C
#define AMLOP_COPYOBJECT       0x9D
#define AMLOP_MID              0x9E
#define AMLOP_CONTINUE         0x9F
#define AMLOP_IF               0xA0
#define AMLOP_ELSE             0xA1
#define AMLOP_WHILE            0xA2
#define AMLOP_NOP              0xA3
#define AMLOP_RETURN           0xA4
#define AMLOP_BREAK            0xA5
#define AMLOP_BREAKPOINT       0xCC
#define AMLOP_ONES             0xFF
d145 2
a146 2
#define AMLOP_FIELDUNIT        0xFE00
#define AML_ANYINT             0xFF00
d153 6
a158 6
#define AML_MATCH_TR          0
#define AML_MATCH_EQ          1
#define AML_MATCH_LE          2
#define AML_MATCH_LT          3
#define AML_MATCH_GE          4
#define AML_MATCH_GT          5
d160 1
a160 1
#define AML_STATIC            0x8000
d187 48
a234 48
#define AML_ARG_INTEGER     'i'
#define AML_ARG_BYTE        'b'
#define AML_ARG_WORD        'w'
#define AML_ARG_DWORD       'd'
#define AML_ARG_QWORD       'q'
#define AML_ARG_IMPBYTE     '!'
#define AML_ARG_OBJLEN      'p'
#define AML_ARG_STRING      'a'
#define AML_ARG_BYTELIST    'B'
#define AML_ARG_REVISION    'R'

#define AML_ARG_METHOD      'M'
#define AML_ARG_NAMESTRING  'N'
#define AML_ARG_NAMEREF     'n'
#define AML_ARG_FIELDLIST   'F'
#define AML_ARG_FLAG        'f'

#define AML_ARG_DATAOBJLIST 'O'
#define AML_ARG_DATAOBJ     'o'

#define AML_ARG_SIMPLENAME  's'
#define AML_ARG_SUPERNAME   'S'

#define AML_ARG_TERMOBJLIST 'T'
#define AML_ARG_TERMOBJ     't'

#define AML_METHOD_ARGCOUNT(v)     (((v) >> 0) & 0x7)
#define AML_METHOD_SERIALIZED(v)   (((v) >> 3) & 0x1)
#define AML_METHOD_SYNCLEVEL(v)    (((v) >> 4) & 0xF)

#define AML_FIELD_ACCESSMASK       0x0F
#define AML_FIELD_SETATTR(f,t,a)   (((f) & 0xF0) | ((t) & 0xF) | ((a)<<8))
#define AML_FIELD_ACCESS(v)        (((v) >> 0) & 0xF)
# define AML_FIELD_ANYACC            0x0
# define AML_FIELD_BYTEACC           0x1
# define AML_FIELD_WORDACC           0x2
# define AML_FIELD_DWORDACC          0x3
# define AML_FIELD_QWORDACC          0x4
# define AML_FIELD_BUFFERACC         0x5
#define AML_FIELD_LOCK(v)          (((v) >> 4) & 0x1)
# define AML_FIELD_LOCK_OFF          0x0
# define AML_FIELD_LOCK_ON           0x1
#define AML_FIELD_UPDATE(v)        (((v) >> 5) & 0x3)
# define AML_FIELD_PRESERVE          0x0
# define AML_FIELD_WRITEASONES       0x1
# define AML_FIELD_WRITEASZEROES     0x2
#define AML_FIELD_ATTR(v)          ((v) >> 8)
#define AML_FIELD_RESERVED         0x00
d236 1
a236 1
#define AML_FIELD_ATTR__           0x01
d244 2
a245 2
	int     refcnt;
	int     stack;
d248 3
a250 3
		int64_t           vinteger;
		char		 *vstring;
		u_int8_t         *vbuffer;
d258 3
a260 3
			int		  flags;
			u_int8_t	 *start;
			u_int8_t	 *end;
d269 1
a269 1
			int		  ref3;
d277 1
a277 1
			int		  index;
d288 20
a307 20
#define v_nameref   _.vbuffer
#define v_objref    _.vobjref
#define v_integer   _.vinteger
#define v_string    _.vstring
#define v_buffer    _.vbuffer
#define v_package   _.vpackage
#define v_field     _.vfield
#define v_opregion  _.vopregion
#define v_method    _.vmethod
#define v_processor _.vprocessor
#define v_powerrsrc _.vpowerrsrc
#define v_mutex     _.vmutex

#define xaml_intval(v)   ((v)->v_integer)
#define aml_strlen(v)   ((v)->length)
#define aml_strval(v)   ((v)->v_string ? (v)->v_string : "bad string")
#define aml_buflen(v)   ((v)->length)
#define aml_bufval(v)   ((v)->v_buffer)
#define aml_pkglen(v)   ((v)->length)
#define aml_pkgval(v,i) (&(v)->v_package[(i)])
d314 6
a319 6
	char             name[5];
	u_int16_t	 opcode;
        u_int8_t	 *start;
	u_int8_t	 *end;
  //	const char	 *name;
  //	const char	 *mnem;
d323 1
a323 1
	int               depth;
d326 2
a327 2
#define AML_FALSE (0)
#define AML_TRUE  (1)
d329 5
a333 5
#define aml_bitmask(n)     (1L << ((n) & 0x7))
#define aml_bitpos(n)      ((n)&0x7)
#define aml_bytepos(n)     ((n)>>3)
#define aml_bytelen(n)     (((n)+7)>>3)
#define aml_bytealigned(x) !((x)&0x7)
@


1.21
log
@more minor knf
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.20 2006/11/25 18:24:54 marco Exp $ */
d243 1
a243 1
  	int	length;
d272 3
a274 3
			u_int8_t      	proc_id;
			u_int32_t     	proc_addr;
			u_int8_t      	proc_len;
d281 2
a282 2
			u_int8_t      	pwr_level;
			u_int16_t     	pwr_order;
d315 5
a319 5
    	u_int16_t   	 opcode;
        u_int8_t   	 *start;
  	u_int8_t   	 *end;
  //	const char 	 *name;
  //	const char 	 *mnem;
d323 1
a323 1
  	int               depth;
@


1.20
log
@Add mutex.

prodded dlg, ok jordan
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.19 2006/10/24 19:45:06 marco Exp $ */
d150 1
a150 1
 * 
d241 1
a241 2
struct aml_value
{
d309 1
a309 2
struct aml_node
{
@


1.19
log
@Work around PR 5268 by printing "bad string" instead of panicing.  There is
no meanigful way of calling aml_die so we need to isolate these machines
instead.

ok jordan
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.18 2006/10/19 07:02:20 jordan Exp $ */
d285 1
d300 1
@


1.18
log
@Fixed AML debugger code to use new interface
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.17 2006/10/16 00:01:05 jordan Exp $ */
d302 1
a302 1
#define aml_strval(v)   ((v)->v_string)
@


1.17
log
@added amltypes.h stack mod
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.16 2006/10/12 16:38:21 jordan Exp $ */
d146 1
d315 3
a317 3
  	u_int16_t   	 opcode;
	u_int8_t   	 *start;
	u_int8_t   	 *end;
@


1.16
log
@Massive ACPI changes
  Fixed ACPI leaks
  new ACPI API
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.15 2006/03/07 23:13:28 marco Exp $ */
d245 1
@


1.15
log
@Add "disasm" code for ddb.  With this one can disassemble AML code from DDB.
example : "machine acpi disasm \\_SB_.BIF_" dumps the battery AML on my laptop.

Disasm code was written by jordan.  Help from miod on ddb lexer magic.
ok jordan.
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.14 2006/02/23 19:56:44 jordan Exp $ */
d159 2
a182 1
	AML_OBJTYPE_STATICINT,
a244 1
	const char *name;
d286 1
d312 2
a313 1
	u_int16_t   	 opcode;
d316 2
a317 2
	const char 	 *name;
	const char 	 *mnem;
d321 1
a321 1
	int               depth;
@


1.14
log
@Pre-parsing PCI address for opregion
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.13 2006/02/16 21:11:13 jordan Exp $ */
d192 1
a192 1
#define AML_ARG_STRING      's'
d202 6
d232 3
@


1.13
log
@Fixed parser/evaluator to retrieve battery info+state
Cleanup of parser
Dell laptops return battery status
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.12 2006/02/03 23:55:47 jordan Exp $ */
a304 1
	u_int8_t    	 flag;
@


1.12
log
@Rewrote aml parser yet again...
Fixed bus_space_map for i386/amd64
Added _BST and _BIF to acpibat to get status/info
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.11 2006/01/20 20:20:28 jordan Exp $ */
d180 2
a181 1
	AML_OBJTYPE_OBJREF
d236 1
a245 3
#if 0
			u_int8_t       *buf;
#endif
a259 1
		  	const char       *ftyp;
a286 1
#define v_thrmzone  _.vthrmzone
d288 1
a288 1
#define aml_intval(v)   ((v)->v_integer)
@


1.11
log
@More evaluator changes
Removed old evaluator code
Fixed _HID value
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.10 2006/01/18 22:25:44 jordan Exp $ */
d208 1
a232 1
	int	dynamic;
d234 1
a240 4
			const char      *name;
			struct aml_node *ref;
		} vnameref;
		struct {
d244 3
d249 3
a251 3
			struct aml_value *args;
			struct aml_value *locals;
			struct aml_value *result;
d254 1
a254 1
			u_int8_t         acc_size;
d256 6
a261 4
			u_int16_t	 ftype;
			u_int32_t        bitpos;
			u_int32_t        bitlen;
			struct aml_node *ref;
d269 2
a270 2
			int		 index;
			struct aml_node *ref;
a279 1
#define v_nameref   _.vnameref
@


1.10
log
@Added new evaluation routines
Added helper methods for buffer/field evaluation
Fixed broken indentation on dsdt.c

ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.9 2006/01/17 23:42:14 jordan Exp $ */
d179 2
a180 1
	AML_OBJTYPE_NAMEREF = 0x100
d208 1
d223 1
d233 1
d240 4
d254 1
a255 2
			u_int16_t        bitpos;
			u_int16_t        bitlen;
d257 2
d267 3
a269 3
			int		index;
			struct aml_node *refobj;
		} vindex;
d277 2
d312 2
d315 9
@


1.9
log
@Major overhaul of the aml parser.  Evaluater temporarily disabled.

ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.8 2005/12/28 03:04:56 jordan Exp $ */
d144 2
@


1.8
log
@Added new method evaluation code
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.7 2005/12/13 07:23:34 marco Exp $ */
d225 3
a227 2
	int    type;
	int    length;
d230 1
a230 1
		const char       *vstring;
d232 6
a237 2
		struct aml_value *vpackage;
		struct acpi_gas   vopregion;
d244 4
a247 2
			int              bitpos;
			int              bitlen;
d251 3
a253 3
			u_int8_t      proc_id;
			u_int32_t     proc_addr;
			u_int8_t      proc_len;
d256 6
a261 2
			u_int8_t      pwr_level;
			u_int16_t     pwr_order;
d265 1
d278 1
d280 1
d282 2
d291 6
a296 6
	u_int16_t   opcode;
	u_int8_t   *start;
	u_int8_t   *end;
	u_int8_t    flag;
	const char *name;
	const char *mnem;
d298 1
a298 1
	struct aml_value value;
@


1.7
log
@Add glue to attach devices to apci.
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.6 2005/12/13 04:16:56 jordan Exp $ */
d175 3
a177 1
	AML_OBJTYPE_DEBUGOBJ
a190 2
#define AML_ARG_RESULT      'r'
#define AML_ARG_SUPERNAME   'S'
d192 1
a199 2
#define AML_ARG_DATAOBJLIST 'O'
#define AML_ARG_DATAOBJ     'o'
a233 1
			int               argcount;
d264 4
@


1.6
log
@Added new objtype values to amltypes
Added evaluation for match object, logical operations, conversions
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.5 2005/12/09 02:26:40 jordan Exp $ */
d18 2
a19 2
#ifndef __AMLPARSE_H__
#define __AMLPARSE_H__
d283 1
a283 1
#endif /* __AMLPARSE_H__ */
@


1.5
log
@Added aml_value and aml_node types for tree
Added flag macros for methods/fields
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.4 2005/12/07 22:34:20 jordan Exp $ */
d58 1
d207 6
d214 2
d217 3
d233 1
a233 1
		struct acpi_gas   vgas;
d245 9
d261 1
a261 1
#define v_gas       _.vgas
d263 3
@


1.4
log
@Fixed name parse errors
Added nodes for tree structure of AML
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.3 2005/12/07 08:09:05 jordan Exp $ */
d183 1
a183 3
#define AML_ARG_ZERO        '0'
#define AML_ARG_ONE         '1'
#define AML_ARG_ONES        '!'
d201 57
@


1.3
log
@Parsing fieldlist and varobject
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.2 2005/12/07 07:46:51 jordan Exp $ */
d191 1
a191 1
#define AML_ARG_VAROBJ      'v'
d196 1
a196 2
#define AML_ARG_FIELDFLAG   'f'
#define AML_ARG_METHODFLAG  'm'
@


1.2
log
@Parses DSDT table
some cleanup
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: amltypes.h,v 1.1 2005/12/07 04:24:31 jordan Exp $ */
d191 1
@


1.1
log
@Add DSDT table for AML Parser
DO NOT USE YET
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d38 1
a38 1
#define AMLOP_EXTOPPREFIX      0x5B
d176 27
@

