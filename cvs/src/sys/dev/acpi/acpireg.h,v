head	1.39;
access;
symbols
	OPENBSD_6_2:1.39.0.6
	OPENBSD_6_2_BASE:1.39
	OPENBSD_6_1:1.39.0.4
	OPENBSD_6_1_BASE:1.39
	OPENBSD_6_0:1.36.0.2
	OPENBSD_6_0_BASE:1.36
	OPENBSD_5_9:1.34.0.2
	OPENBSD_5_9_BASE:1.34
	OPENBSD_5_8:1.30.0.6
	OPENBSD_5_8_BASE:1.30
	OPENBSD_5_7:1.30.0.4
	OPENBSD_5_7_BASE:1.30
	OPENBSD_5_6:1.29.0.6
	OPENBSD_5_6_BASE:1.29
	OPENBSD_5_5:1.29.0.4
	OPENBSD_5_5_BASE:1.29
	OPENBSD_5_4:1.28.0.6
	OPENBSD_5_4_BASE:1.28
	OPENBSD_5_3:1.28.0.4
	OPENBSD_5_3_BASE:1.28
	OPENBSD_5_2:1.28.0.2
	OPENBSD_5_2_BASE:1.28
	OPENBSD_5_1_BASE:1.27
	OPENBSD_5_1:1.27.0.2
	OPENBSD_5_0:1.26.0.2
	OPENBSD_5_0_BASE:1.26
	OPENBSD_4_9:1.24.0.2
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.23.0.2
	OPENBSD_4_8_BASE:1.23
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.17.0.4
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.16.0.2
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.15.0.2
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.12.0.6
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.4
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.2
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.39
date	2017.03.12.21.30.44;	author jcs;	state Exp;
branches;
next	1.38;
commitid	LbtljK30ETSd9Z21;

1.38
date	2017.02.25.20.09.20;	author jcs;	state Exp;
branches;
next	1.37;
commitid	qLBNvmeyHMMfKdYf;

1.37
date	2017.02.25.19.15.09;	author jcs;	state Exp;
branches;
next	1.36;
commitid	ndUkTPrPGQDT7QJJ;

1.36
date	2016.07.10.20.36.41;	author kettenis;	state Exp;
branches;
next	1.35;
commitid	34iHFpBO6WqQlejB;

1.35
date	2016.05.07.18.03.36;	author kettenis;	state Exp;
branches;
next	1.34;
commitid	vdhqVprlycKG3PQB;

1.34
date	2016.01.14.21.37.18;	author kettenis;	state Exp;
branches;
next	1.33;
commitid	p32tx6SYZLQHvaPh;

1.33
date	2016.01.12.07.42.39;	author kettenis;	state Exp;
branches;
next	1.32;
commitid	3dyMp3MCtw11Jda9;

1.32
date	2016.01.12.01.11.15;	author jcs;	state Exp;
branches;
next	1.31;
commitid	vNDeumNiEMwV2q08;

1.31
date	2016.01.09.11.00.01;	author kettenis;	state Exp;
branches;
next	1.30;
commitid	x70Fde4YON7mleR3;

1.30
date	2015.01.15.01.19.28;	author jsg;	state Exp;
branches;
next	1.29;
commitid	PSdMLDHj2pHrUoMH;

1.29
date	2013.11.06.10.40.36;	author mpi;	state Exp;
branches;
next	1.28;

1.28
date	2012.07.13.11.51.41;	author pirofti;	state Exp;
branches;
next	1.27;

1.27
date	2012.01.07.20.13.17;	author kettenis;	state Exp;
branches;
next	1.26;

1.26
date	2011.06.16.23.02.11;	author pirofti;	state Exp;
branches;
next	1.25;

1.25
date	2011.04.27.20.55.42;	author jcs;	state Exp;
branches;
next	1.24;

1.24
date	2011.01.04.21.17.49;	author kettenis;	state Exp;
branches;
next	1.23;

1.23
date	2010.07.21.19.35.15;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2010.06.29.22.08.29;	author jordan;	state Exp;
branches;
next	1.21;

1.21
date	2010.06.28.06.46.32;	author jordan;	state Exp;
branches;
next	1.20;

1.20
date	2010.06.28.06.35.15;	author jordan;	state Exp;
branches;
next	1.19;

1.19
date	2010.06.27.17.04.27;	author mlarkin;	state Exp;
branches;
next	1.18;

1.18
date	2009.07.23.01.38.16;	author cnst;	state Exp;
branches;
next	1.17;

1.17
date	2009.04.11.08.22.48;	author kettenis;	state Exp;
branches;
next	1.16;

1.16
date	2009.02.19.21.02.05;	author marco;	state Exp;
branches;
next	1.15;

1.15
date	2008.06.24.08.24.57;	author sobrado;	state Exp;
branches;
next	1.14;

1.14
date	2008.04.27.16.23.16;	author jcs;	state Exp;
branches;
next	1.13;

1.13
date	2008.04.24.13.57.49;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2006.12.12.18.07.25;	author mk;	state Exp;
branches;
next	1.11;

1.11
date	2006.10.12.19.17.26;	author marco;	state Exp;
branches;
next	1.10;

1.10
date	2006.10.10.22.34.12;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.19.00.08.46;	author jordan;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.06.16.22.46;	author grange;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.05.21.22.21;	author grange;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.16.18.11.55;	author jordan;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.16.00.08.53;	author jordan;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.14.04.16.25;	author marco;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.07.23.29.00;	author marco;	state Exp;
branches;
next	1.2;

1.2
date	2005.07.10.17.24.18;	author grange;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.02.20.09.39;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.39
log
@try to attach acpisbs first and if successful, don't attach acpibat
@
text
@/*	$OpenBSD: acpireg.h,v 1.38 2017/02/25 20:09:20 jcs Exp $	*/
/*
 * Copyright (c) 2005 Thorsten Lockert <tholo@@sigmasoft.com>
 * Copyright (c) 2005 Marco Peereboom <marco@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _DEV_ACPI_ACPIREG_H_
#define _DEV_ACPI_ACPIREG_H_

/*	Root System Descriptor Pointer */
struct acpi_rsdp1 {
	u_int8_t	signature[8];
#define	RSDP_SIG	"RSD PTR "
#define	rsdp_signaturee	rsdp1.signature
	u_int8_t	checksum;	/* make sum == 0 */
#define	rsdp_checksum	rsdp1.checksum
	u_int8_t	oemid[6];
#define	rsdp_oemid	rsdp1.oemid
	u_int8_t	revision;	/* 0 for 1, 2 for 2 */
#define	rsdp_revision	rsdp1.revision
	u_int32_t	rsdt;		/* physical */
#define	rsdp_rsdt	rsdp1.rsdt
} __packed;

struct acpi_rsdp {
	struct acpi_rsdp1 rsdp1;
	/*
	 * The following values are only valid
	 * when rsdp_revision == 2
	 */
	u_int32_t	rsdp_length;		/* length of rsdp */
	u_int64_t	rsdp_xsdt;		/* physical */
	u_int8_t	rsdp_extchecksum;	/* entire table */
	u_int8_t	rsdp_reserved[3];	/* must be zero */
} __packed;

struct acpi_table_header {
	u_int8_t	signature[4];
#define	hdr_signature		hdr.signature
	u_int32_t	length;
#define	hdr_length		hdr.length
	u_int8_t	revision;
#define	hdr_revision		hdr.revision
	u_int8_t	checksum;
#define	hdr_checksum		hdr.checksum
	u_int8_t	oemid[6];
#define hdr_oemid		hdr.oemid
	u_int8_t	oemtableid[8];
#define hdr_oemtableid		hdr.oemtableid
	u_int32_t	oemrevision;
#define	hdr_oemrevision		hdr.oemrevision
	u_int8_t	aslcompilerid[4];
#define hdr_aslcompilerid	hdr.aslcompilerid
	u_int32_t	aslcompilerrevision;
#define	hdr_aslcompilerrevision	hdr.aslcompilerrevision
} __packed;

struct acpi_rsdt {
	struct acpi_table_header	hdr;
#define RSDT_SIG	"RSDT"
	u_int32_t			table_offsets[1];
} __packed;

struct acpi_xsdt {
	struct acpi_table_header	hdr;
#define XSDT_SIG	"XSDT"
	u_int64_t			table_offsets[1];
} __packed;

struct acpi_gas {
	u_int8_t	address_space_id;
#define GAS_SYSTEM_MEMORY	0
#define GAS_SYSTEM_IOSPACE	1
#define GAS_PCI_CFG_SPACE	2
#define GAS_EMBEDDED		3
#define GAS_SMBUS		4
#define GAS_FUNCTIONAL_FIXED	127
	u_int8_t	register_bit_width;
	u_int8_t	register_bit_offset;
	u_int8_t	access_size;
#define GAS_ACCESS_UNDEFINED	0
#define GAS_ACCESS_BYTE		1
#define GAS_ACCESS_WORD		2
#define GAS_ACCESS_DWORD	3
#define GAS_ACCESS_QWORD	4
	u_int64_t	address;
} __packed;

struct acpi_fadt {
	struct acpi_table_header	hdr;
#define	FADT_SIG	"FACP"
	u_int32_t	firmware_ctl;	/* phys addr FACS */
	u_int32_t	dsdt;		/* phys addr DSDT */
	u_int8_t	int_model;	/* interrupt model (hdr_revision < 3) */
#define	FADT_INT_DUAL_PIC	0
#define	FADT_INT_MULTI_APIC	1
	u_int8_t	pm_profile;	/* power mgmt profile */
#define	FADT_PM_UNSPEC		0
#define	FADT_PM_DESKTOP		1
#define	FADT_PM_MOBILE		2
#define	FADT_PM_WORKSTATION	3
#define	FADT_PM_ENT_SERVER	4
#define	FADT_PM_SOHO_SERVER	5
#define	FADT_PM_APPLIANCE	6
#define	FADT_PM_PERF_SERVER	7
	u_int16_t	sci_int;	/* SCI interrupt */
	u_int32_t	smi_cmd;	/* SMI command port */
	u_int8_t	acpi_enable;	/* value to enable */
	u_int8_t	acpi_disable;	/* value to disable */
	u_int8_t	s4bios_req;	/* value for S4 */
	u_int8_t	pstate_cnt;	/* value for performance (hdr_revision > 2) */
	u_int32_t	pm1a_evt_blk;	/* power management 1a */
	u_int32_t	pm1b_evt_blk;	/* power mangement 1b */
	u_int32_t	pm1a_cnt_blk;	/* pm control 1a */
	u_int32_t	pm1b_cnt_blk;	/* pm control 1b */
	u_int32_t	pm2_cnt_blk;	/* pm control 2 */
	u_int32_t	pm_tmr_blk;
	u_int32_t	gpe0_blk;
	u_int32_t	gpe1_blk;
	u_int8_t	pm1_evt_len;
	u_int8_t	pm1_cnt_len;
	u_int8_t	pm2_cnt_len;
	u_int8_t	pm_tmr_len;
	u_int8_t	gpe0_blk_len;
	u_int8_t	gpe1_blk_len;
	u_int8_t	gpe1_base;
	u_int8_t	cst_cnt;	/* (hdr_revision > 2) */
	u_int16_t	p_lvl2_lat;
	u_int16_t	p_lvl3_lat;
	u_int16_t	flush_size;
	u_int16_t	flush_stride;
	u_int8_t	duty_offset;
	u_int8_t	duty_width;
	u_int8_t	day_alrm;
	u_int8_t	mon_alrm;
	u_int8_t	century;
	u_int16_t	iapc_boot_arch;	/* (hdr_revision > 2) */
#define	FADT_LEGACY_DEVICES		0x0001	/* Legacy devices supported */
#define	FADT_i8042			0x0002	/* Keyboard controller present */
#define	FADT_NO_VGA			0x0004	/* Do not probe VGA */
	u_int8_t	reserved1;
	u_int32_t	flags;
#define	FADT_WBINVD			0x00000001
#define	FADT_WBINVD_FLUSH		0x00000002
#define	FADT_PROC_C1			0x00000004
#define	FADT_P_LVL2_UP			0x00000008
#define	FADT_PWR_BUTTON			0x00000010
#define	FADT_SLP_BUTTON			0x00000020
#define	FADT_FIX_RTC			0x00000040
#define	FADT_RTC_S4			0x00000080
#define	FADT_TMR_VAL_EXT		0x00000100
#define	FADT_DCK_CAP			0x00000200
#define	FADT_RESET_REG_SUP		0x00000400
#define	FADT_SEALED_CASE		0x00000800
#define	FADT_HEADLESS			0x00001000
#define	FADT_CPU_SW_SLP			0x00002000
#define	FADT_PCI_EXP_WAK		0x00004000
#define	FADT_USE_PLATFORM_CLOCK		0x00008000
#define	FADT_S4_RTC_STS_VALID		0x00010000
#define	FADT_REMOTE_POWER_ON_CAPABLE	0x00020000
#define	FADT_FORCE_APIC_CLUSTER_MODEL	0x00040000
#define	FADT_FORCE_APIC_PHYS_DEST_MODE	0x00080000
#define	FADT_HW_REDUCED_ACPI		0x00100000
#define	FADT_POWER_S0_IDLE_CAPABLE	0x00200000
	/*
	 * Following values only exist when rev > 1
	 * If the extended addresses exists, they
	 * must be used in preferense to the non-
	 * extended values above
	 */
	struct acpi_gas	reset_reg;
	u_int8_t	reset_value;
	u_int8_t	reserved2a;
	u_int8_t	reserved2b;
	u_int8_t	reserved2c;
	u_int64_t	x_firmware_ctl;
	u_int64_t	x_dsdt;
	struct acpi_gas	x_pm1a_evt_blk;
	struct acpi_gas	x_pm1b_evt_blk;
	struct acpi_gas	x_pm1a_cnt_blk;
	struct acpi_gas	x_pm1b_cnt_blk;
	struct acpi_gas	x_pm2_cnt_blk;
	struct acpi_gas	x_pm_tmr_blk;
	struct acpi_gas	x_gpe0_blk;
	struct acpi_gas	x_gpe1_blk;
	struct acpi_gas sleep_control_reg;
	struct acpi_gas sleep_status_reg;
} __packed;

struct acpi_dsdt {
	struct acpi_table_header	hdr;
#define DSDT_SIG	"DSDT"
	u_int8_t	aml[1];
} __packed;

struct acpi_ssdt {
	struct acpi_table_header	hdr;
#define SSDT_SIG	"SSDT"
	u_int8_t	aml[1];
} __packed;

/*
 * Table deprecated by ACPI 2.0
 */
struct acpi_psdt {
	struct acpi_table_header	hdr;
#define PSDT_SIG	"PSDT"
} __packed;

struct acpi_madt {
	struct acpi_table_header	hdr;
#define MADT_SIG	"APIC"
	u_int32_t	local_apic_address;
	u_int32_t	flags;
#define ACPI_APIC_PCAT_COMPAT	0x00000001
} __packed;

struct acpi_madt_lapic {
	u_int8_t	apic_type;
#define	ACPI_MADT_LAPIC		0
	u_int8_t	length;
	u_int8_t	acpi_proc_id;
	u_int8_t	apic_id;
	u_int32_t	flags;
#define	ACPI_PROC_ENABLE	0x00000001
} __packed;

struct acpi_madt_ioapic {
	u_int8_t	apic_type;
#define	ACPI_MADT_IOAPIC	1
	u_int8_t	length;
	u_int8_t	acpi_ioapic_id;
	u_int8_t	reserved;
	u_int32_t	address;
	u_int32_t	global_int_base;
} __packed;

struct acpi_madt_override {
	u_int8_t	apic_type;
#define	ACPI_MADT_OVERRIDE	2
	u_int8_t	length;
	u_int8_t	bus;
#define	ACPI_OVERRIDE_BUS_ISA	0
	u_int8_t	source;
	u_int32_t	global_int;
	u_int16_t	flags;
#define	ACPI_OVERRIDE_POLARITY_BITS	0x3
#define	ACPI_OVERRIDE_POLARITY_BUS		0x0
#define	ACPI_OVERRIDE_POLARITY_HIGH		0x1
#define	ACPI_OVERRIDE_POLARITY_LOW		0x3
#define	ACPI_OVERRIDE_TRIGGER_BITS	0xc
#define	ACPI_OVERRIDE_TRIGGER_BUS		0x0
#define	ACPI_OVERRIDE_TRIGGER_EDGE		0x4
#define	ACPI_OVERRIDE_TRIGGER_LEVEL		0xc
} __packed;

struct acpi_madt_nmi {
	u_int8_t	apic_type;
#define	ACPI_MADT_NMI		3
	u_int8_t	length;
	u_int16_t	flags;		/* Same flags as acpi_madt_override */
	u_int32_t	global_int;
} __packed;

struct acpi_madt_lapic_nmi {
	u_int8_t	apic_type;
#define	ACPI_MADT_LAPIC_NMI	4
	u_int8_t	length;
	u_int8_t	acpi_proc_id;
	u_int16_t	flags;		/* Same flags as acpi_madt_override */
	u_int8_t	local_apic_lint;
} __packed;

struct acpi_madt_lapic_override {
	u_int8_t	apic_type;
#define	ACPI_MADT_LAPIC_OVERRIDE	5
	u_int8_t	length;
	u_int16_t	reserved;
	u_int64_t	lapic_address;
} __packed;

struct acpi_madt_io_sapic {
	u_int8_t	apic_type;
#define	ACPI_MADT_IO_SAPIC	6
	u_int8_t	length;
	u_int8_t	iosapic_id;
	u_int8_t	reserved;
	u_int32_t	global_int_base;
	u_int64_t	iosapic_address;
} __packed;

struct acpi_madt_local_sapic {
	u_int8_t	apic_type;
#define	ACPI_MADT_LOCAL_SAPIC	7
	u_int8_t	length;
	u_int8_t	acpi_proc_id;
	u_int8_t	local_sapic_id;
	u_int8_t	local_sapic_eid;
	u_int8_t	reserved[3];
	u_int32_t	flags;		/* Same flags as acpi_madt_lapic */
	u_int32_t	acpi_proc_uid;
	u_int8_t	acpi_proc_uid_string[1];
} __packed;

struct acpi_madt_platform_int {
	u_int8_t	apic_type;
#define	ACPI_MADT_PLATFORM_INT	8
	u_int8_t	length;
	u_int16_t	flags;		/* Same flags as acpi_madt_override */
	u_int8_t	int_type;
#define	ACPI_MADT_PLATFORM_PMI		1
#define	ACPI_MADT_PLATFORM_INIT		2
#define	ACPI_MADT_PLATFORM_CORR_ERROR	3
	u_int8_t	proc_id;
	u_int8_t	proc_eid;
	u_int8_t	io_sapic_vec;
	u_int32_t	global_int;
	u_int32_t	platform_int_flags;
#define	ACPI_MADT_PLATFORM_CPEI		0x00000001
} __packed;

struct acpi_madt_x2apic {
	u_int8_t	apic_type;
#define	ACPI_MADT_X2APIC	9
	u_int8_t	length;
	u_int8_t	reserved[2];
	u_int32_t	apic_id;
	u_int32_t	flags;		/* Same flags as acpi_madt_lapic */
	u_int32_t	acpi_proc_uid;
} __packed;

struct acpi_madt_x2apic_nmi {
	u_int8_t	apic_type;
#define	ACPI_MADT_X2APIC_NMI	10
	u_int8_t	length;
	u_int16_t	flags;		/* Same flags as acpi_madt_override */
	u_int32_t	apic_proc_uid;
	u_int8_t	local_x2apic_lint;
	u_int8_t	reserved[3];
} __packed;

union acpi_madt_entry {
	struct acpi_madt_lapic		madt_lapic;
	struct acpi_madt_ioapic		madt_ioapic;
	struct acpi_madt_override	madt_override;
	struct acpi_madt_nmi		madt_nmi;
	struct acpi_madt_lapic_nmi	madt_lapic_nmi;
	struct acpi_madt_lapic_override	madt_lapic_override;
	struct acpi_madt_io_sapic	madt_io_sapic;
	struct acpi_madt_local_sapic	madt_local_sapic;
	struct acpi_madt_platform_int	madt_platform_int;
	struct acpi_madt_x2apic		madt_x2apic;
	struct acpi_madt_x2apic_nmi	madt_x2apic_nmi;
} __packed;

struct acpi_sbst {
	struct acpi_table_header	hdr;
#define SBST_SIG	"SBST"
	u_int32_t	warning_energy_level;
	u_int32_t	low_energy_level;
	u_int32_t	critical_energy_level;
} __packed;

struct acpi_ecdt {
	struct acpi_table_header	hdr;
#define ECDT_SIG	"ECDT"
	struct acpi_gas	ec_control;
	struct acpi_gas ec_data;
	u_int32_t	uid;
	u_int8_t	gpe_bit;
	u_int8_t	ec_id[1];
} __packed;

struct acpi_srat {
	struct acpi_table_header	hdr;
#define SRAT_SIG	"SRAT"
	u_int32_t	reserved1;
	u_int64_t	reserved2;
} __packed;

struct acpi_slit {
	struct acpi_table_header	hdr;
#define SLIT_SIG	"SLIT"
	u_int64_t	number_of_localities;
} __packed;

struct acpi_hpet {
	struct acpi_table_header	hdr;
#define HPET_SIG	"HPET"
	u_int32_t	event_timer_block_id;
	struct acpi_gas	base_address;
	u_int8_t	hpet_number;
	u_int16_t	main_counter_min_clock_tick;
	u_int8_t	page_protection;
} __packed;

struct acpi_mcfg {
	struct acpi_table_header	hdr;
#define MCFG_SIG	"MCFG"
	u_int8_t	reserved[8];
	u_int64_t	base_address;
	u_int16_t	segment;
	u_int8_t	min_bus_number;
	u_int8_t	max_bus_number;
	u_int32_t	reserved1;
} __packed;

struct acpi_facs {
	u_int8_t	signature[4];
#define	FACS_SIG	"FACS"
	u_int32_t	length;
	u_int32_t	hardware_signature;
	u_int32_t	wakeup_vector;
	u_int32_t	global_lock;
#define	FACS_LOCK_PENDING	0x00000001
#define	FACS_LOCK_OWNED		0x00000002
	u_int32_t	flags;
#define	FACS_S4BIOS_F		0x00000001	/* S4BIOS_REQ supported */
	uint64_t	x_wakeup_vector;
	u_int8_t	version;
	u_int8_t	reserved[31];
} __packed;

/*
 * Intel ACPI DMA Remapping Entries
 */
struct acpidmar_devpath {
	uint8_t		device;
	uint8_t		function;
} __packed;

struct acpidmar_devscope {
	uint8_t		type;
#define DMAR_ENDPOINT			0x1
#define DMAR_BRIDGE			0x2
#define DMAR_IOAPIC			0x3
#define DMAR_HPET			0x4
	uint8_t		length;
	uint16_t	reserved;
	uint8_t		enumid;
	uint8_t		bus;
} __packed;

/* DMA Remapping Hardware Unit */
struct acpidmar_drhd {
	uint16_t	type;
	uint16_t	length;

	uint8_t		flags;
	uint8_t		reserved;
	uint16_t	segment;
	uint64_t	address;
	/* struct acpidmar_devscope[]; */
} __packed;

/* Reserved Memory Region Reporting */
struct acpidmar_rmrr {
	uint16_t	type;
	uint16_t	length;

	uint16_t	reserved;
	uint16_t	segment;
	uint64_t	base;
	uint64_t	limit;
	/* struct acpidmar_devscope[]; */
} __packed;

/* Root Port ATS Capability Reporting */
struct acpidmar_atsr {
	uint16_t	type;
	uint16_t	length;

	uint8_t		flags;
	uint8_t		reserved;
	uint16_t	segment;
	/* struct acpidmar_devscope[]; */
} __packed;

union acpidmar_entry {
	struct {
		uint16_t	type;
#define DMAR_DRHD			0x0
#define DMAR_RMRR			0x1
#define DMAR_ATSR			0x2
#define DMAR_RHSA			0x3
		uint16_t	length;
	} __packed;
	struct acpidmar_drhd	drhd;
	struct acpidmar_rmrr	rmrr;
	struct acpidmar_atsr	atsr;
} __packed;

struct acpi_dmar {
	struct acpi_table_header	hdr;
#define DMAR_SIG	"DMAR"
	uint8_t		haw;
	uint8_t		flags;
	uint8_t		reserved[10];
	/* struct acpidmar_entry[]; */
} __packed;

/*
 * AMD I/O Virtualization Remapping Entries
 */
union acpi_ivhd_entry {
	uint8_t		type;
#define IVHD_ALL			1
#define IVHD_SEL			2
#define IVHD_SOR			3
#define IVHD_EOR			4
#define IVHD_ALIAS_SEL			66
#define IVHD_ALIAS_SOR			67
#define IVHD_EXT_SEL			70
#define IVHD_EXT_SOR			71
#define IVHD_SPECIAL			72
	struct {
		uint8_t		type;
		uint16_t	resvd;
		uint8_t		data;
	} __packed all;
	struct {
		uint8_t		type;
		uint16_t	devid;
		uint8_t		data;
	} __packed sel;
	struct {
		uint8_t		type;
		uint16_t	devid;
		uint8_t		data;
	} __packed sor;
	struct {
		uint8_t		type;
		uint16_t	devid;
		uint8_t		resvd;
	} __packed eor;
	struct {
		uint8_t		type;
		uint16_t	devid;
		uint8_t		data;
		uint8_t		resvd1;
		uint16_t	srcid;
		uint8_t		resvd2;
	} __packed alias;
	struct {
		uint8_t		type;
		uint16_t	devid;
		uint8_t		data;
		uint32_t	extdata;
#define IVHD_ATS_DIS			(1L << 31)
	} __packed ext;
	struct {
		uint8_t		type;
		uint16_t	resvd;
		uint8_t		data;
		uint8_t		handle;
		uint16_t	devid;
		uint8_t		variety;
#define IVHD_IOAPIC			0x01
#define IVHD_HPET			0x02
	} __packed special;
} __packed;

struct acpi_ivmd {
	uint8_t		type;
	uint8_t		flags;
#define	IVMD_EXCLRANGE			(1L << 3)
#define IVMD_IW				(1L << 2)
#define IVMD_IR				(1L << 1)
#define IVMD_UNITY			(1L << 0)
	uint16_t	length;
	uint16_t	devid;
	uint16_t	auxdata;
	uint8_t		reserved[8];
	uint64_t	base;
	uint64_t	limit;
} __packed;

struct acpi_ivhd {
	uint8_t		type;
	uint8_t		flags;
#define IVHD_IOTLB		(1L << 4)
#define IVHD_ISOC		(1L << 3)
#define IVHD_RESPASSPW		(1L << 2)
#define IVHD_PASSPW		(1L << 1)
#define IVHD_HTTUNEN		(1L << 0)
	uint16_t	length;
	uint16_t	devid;
	uint16_t	cap;
	uint64_t	address;
	uint16_t	segment;
	uint16_t	info;
#define IVHD_UNITID_SHIFT	8
#define IVHD_UNITID_MASK	0x1F
#define IVHD_MSINUM_SHIFT	0
#define IVHD_MSINUM_MASK	0x1F
	uint32_t	reserved;
} __packed;

union acpi_ivrs_entry {
	struct {
		uint8_t		type;
#define IVRS_IVHD			0x10
#define IVRS_IVMD_ALL			0x20
#define IVRS_IVMD_SPECIFIED		0x21
#define IVRS_IVMD_RANGE			0x22
		uint8_t		flags;
		uint16_t	length;
	} __packed;
	struct acpi_ivhd	ivhd;
	struct acpi_ivmd	ivmd;
} __packed;

struct acpi_ivrs {
	struct acpi_table_header	hdr;
#define IVRS_SIG	"IVRS"
	uint32_t		ivinfo;
#define IVRS_ATSRNG		(1L << 22)
#define IVRS_VASIZE_SHIFT	15
#define IVRS_VASIZE_MASK	0x7F
#define IVRS_PASIZE_SHIFT	8
#define IVRS_PASIZE_MASK	0x7F
	uint8_t			reserved[8];
} __packed;


#define ACPI_FREQUENCY	3579545		/* Per ACPI spec */

/*
 * PCI Configuration space
 */
#define ACPI_ADR_PCIDEV(addr)	(u_int16_t)(addr >> 16)
#define ACPI_ADR_PCIFUN(addr)	(u_int16_t)(addr & 0xFFFF)
#define ACPI_PCI_BUS(addr) (u_int16_t)((addr) >> 48)
#define ACPI_PCI_DEV(addr) (u_int16_t)((addr) >> 32)
#define ACPI_PCI_FN(addr)  (u_int16_t)((addr) >> 16)
#define ACPI_PCI_REG(addr) (u_int16_t)(addr)
#define ACPI_PCI_ADDR(b,d,f,r) ((u_int64_t)(b)<<48LL | (u_int64_t)(d)<<32LL | (f)<<16LL | (r))

/*
 * PM1 Status Registers Fixed Hardware Feature Status Bits
 */
#define	ACPI_PM1_STATUS			0x00
#define		ACPI_PM1_TMR_STS		0x0001
#define		ACPI_PM1_BM_STS			0x0010
#define		ACPI_PM1_GBL_STS		0x0020
#define		ACPI_PM1_PWRBTN_STS		0x0100
#define		ACPI_PM1_SLPBTN_STS		0x0200
#define		ACPI_PM1_RTC_STS		0x0400
#define		ACPI_PM1_PCIEXP_WAKE_STS	0x4000
#define		ACPI_PM1_WAK_STS		0x8000

#define	ACPI_PM1_ALL_STS (ACPI_PM1_TMR_STS | ACPI_PM1_BM_STS | \
	    ACPI_PM1_GBL_STS | ACPI_PM1_PWRBTN_STS | \
	    ACPI_PM1_SLPBTN_STS | ACPI_PM1_RTC_STS | \
	    ACPI_PM1_PCIEXP_WAKE_STS | ACPI_PM1_WAK_STS )

/*
 * PM1 Enable Registers
 */
#define	ACPI_PM1_ENABLE			0x02
#define		ACPI_PM1_TMR_EN			0x0001
#define		ACPI_PM1_GBL_EN			0x0020
#define		ACPI_PM1_PWRBTN_EN		0x0100
#define		ACPI_PM1_SLPBTN_EN		0x0200
#define		ACPI_PM1_RTC_EN			0x0400
#define		ACPI_PM1_PCIEXP_WAKE_DIS	0x4000

/*
 * PM1 Control Registers
 */
#define	ACPI_PM1_CONTROL		0x00
#define		ACPI_PM1_SCI_EN			0x0001
#define		ACPI_PM1_BM_RLD			0x0002
#define		ACPI_PM1_GBL_RLS		0x0004
#define		ACPI_PM1_SLP_TYPX(x)		((x) << 10)
#define		ACPI_PM1_SLP_TYPX_MASK		0x1c00
#define		ACPI_PM1_SLP_EN			0x2000

/*
 * PM2 Control Registers
 */
#define ACPI_PM2_CONTROL		0x06
#define	ACPI_PM2_ARB_DIS		0x0001

/*
 * Operation Region Address Space Identifiers
 */
#define ACPI_OPREG_SYSMEM	0	/* SystemMemory */
#define ACPI_OPREG_SYSIO	1	/* SystemIO */
#define ACPI_OPREG_PCICFG	2	/* PCI_Config */
#define ACPI_OPREG_EC		3	/* EmbeddedControl */
#define ACPI_OPREG_SMBUS	4	/* SMBus */
#define ACPI_OPREG_CMOS		5	/* CMOS */
#define ACPI_OPREG_PCIBAR	6	/* PCIBARTarget */
#define ACPI_OPREG_IPMI		7	/* IPMI */
#define ACPI_OPREG_GPIO		8	/* GeneralPurposeIO */
#define ACPI_OPREG_GSB		9	/* GenericSerialBus */

/*
 * Sleeping States
 */
#define ACPI_STATE_S0		0
#define ACPI_STATE_S1		1
#define ACPI_STATE_S2		2
#define ACPI_STATE_S3		3
#define ACPI_STATE_S4		4
#define ACPI_STATE_S5		5

/*
 * Device Power States
 */
#define ACPI_STATE_D0		0
#define ACPI_STATE_D1		1
#define ACPI_STATE_D2		2
#define ACPI_STATE_D3		3

/*
 * ACPI Device IDs
 */
#define ACPI_DEV_TIM	"PNP0100"	/* System timer */
#define ACPI_DEV_ACPI	"PNP0C08"	/* ACPI device */
#define ACPI_DEV_PCIB	"PNP0A03"	/* PCI bus */
#define ACPI_DEV_GISAB	"PNP0A05"	/* Generic ISA Bus */
#define ACPI_DEV_EIOB	"PNP0A06"	/* Extended I/O Bus */
#define ACPI_DEV_PCIEB	"PNP0A08"	/* PCIe bus */
#define ACPI_DEV_MR	"PNP0C02"	/* Motherboard resources */
#define ACPI_DEV_NPROC	"PNP0C04"	/* Numeric data processor */
#define ACPI_DEV_CS	"PNP0C08"	/* ACPI-Compliant System */
#define ACPI_DEV_ECD	"PNP0C09"	/* Embedded Controller Device */
#define ACPI_DEV_CMB	"PNP0C0A"	/* Control Method Battery */
#define ACPI_DEV_FAN	"PNP0C0B"	/* Fan Device */
#define ACPI_DEV_PBD	"PNP0C0C"	/* Power Button Device */
#define ACPI_DEV_LD	"PNP0C0D"	/* Lid Device */
#define ACPI_DEV_SBD	"PNP0C0E"	/* Sleep Button Device */
#define ACPI_DEV_PILD	"PNP0C0F"	/* PCI Interrupt Link Device */
#define ACPI_DEV_MEMD	"PNP0C80"	/* Memory Device */
#define ACPI_DEV_MOUSE	"PNP0F13"	/* PS/2 Mouse */
#define ACPI_DEV_SHC	"ACPI0001"	/* SMBus 1.0 Host Controller */
#define ACPI_DEV_SBS	"ACPI0002"	/* Smart Battery Subsystem */
#define ACPI_DEV_AC	"ACPI0003"	/* AC Device */
#define ACPI_DEV_MD	"ACPI0004"	/* Module Device */
#define ACPI_DEV_SMBUS	"ACPI0005"	/* SMBus 2.0 Host Controller */
#define ACPI_DEV_GBD	"ACPI0006"	/* GPE Block Device */
#define ACPI_DEV_PD	"ACPI0007"	/* Processor Device */
#define ACPI_DEV_ALSD	"ACPI0008"	/* Ambient Light Sensor Device */
#define ACPI_DEV_IOXA	"ACPI0009"	/* IO x APIC Device */
#define ACPI_DEV_IOA	"ACPI000A"	/* IO APIC Device */
#define ACPI_DEV_IOSA	"ACPI000B"	/* IO SAPIC Device */
#define ACPI_DEV_THZ	"THERMALZONE"	/* Thermal Zone */
#define ACPI_DEV_FFB	"FIXEDBUTTON"	/* Fixed Feature Button */

#endif	/* !_DEV_ACPI_ACPIREG_H_ */
@


1.38
log
@move vendor HIDs into their drivers, clean up some unused defines

ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.37 2017/02/25 19:15:09 jcs Exp $	*/
d751 1
a751 1
#define ACPI_DEV_SMS1	"ACPI0002"	/* Smart Battery Subsystem */
d754 1
a754 1
#define ACPI_DEV_SMS2	"ACPI0005"	/* SMBus 2.0 Host Controller */
@


1.37
log
@attach acpithinkpad to LEN0268 HID found on newer thinkpads
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.36 2016/07/10 20:36:41 kettenis Exp $	*/
a747 2
#define ACPI_DEV_HIDI2C	"PNP0C50"	/* HID over I2C device */
#define ACPI_DEV_HIDI2C2 "ACPI0C50"	/* HID over I2C device */
a762 16
#define ACPI_DEV_ASUS	"ASUS010"	/* ASUS Hotkeys */
#define ACPI_DEV_ASUS1	"ATK0100"	/* ASUS Special Device */
#define ACPI_DEV_IBM	"IBM0068"	/* IBM ThinkPad support */
#define ACPI_DEV_LENOVO	"LEN0068"	/* Lenovo ThinkPad support */
#define ACPI_DEV_LENOVO2 "LEN0268"	/* Lenovo ThinkPad support */
#define ACPI_DEV_ASUSAIBOOSTER	"ATK0110"	/* ASUSTeK AI Booster */
#define ACPI_DEV_TOSHIBA_LIBRETTO	"TOS6200"	/* Toshiba Libretto support */
#define ACPI_DEV_TOSHIBA_DYNABOOK	"TOS6207"	/* Toshiba Dynabook support */
#define ACPI_DEV_TOSHIBA_SPA40	"TOS6208"	/* Toshiba SPA40 support */

/* Synopsys DesignWare I2C controllers */
#define ACPI_DEV_DWIIC1	"INT33C2"
#define ACPI_DEV_DWIIC2	"INT33C3"
#define ACPI_DEV_DWIIC3	"INT3432"
#define ACPI_DEV_DWIIC4	"INT3433"
#define ACPI_DEV_DWIIC5	"80860F41"
@


1.36
log
@Rename apic_proc_uid field to acpi_proc_uid in the acpi_madt_x2apic struct.
It is the ACPI processor UID that is stored here.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.35 2016/05/07 18:03:36 kettenis Exp $	*/
d769 1
@


1.35
log
@Add defines for Operation Region Address Space Identifiers and use them when
acpiec(4) calls the _REG method.

ok mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.34 2016/01/14 21:37:18 kettenis Exp $	*/
d341 1
a341 1
	u_int32_t	apic_proc_uid;
@


1.34
log
@Attach dwiic(4) on the Intel Bay Trail i2c controllers as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.33 2016/01/12 07:42:39 kettenis Exp $	*/
d697 13
@


1.33
log
@Improve emulation of PM registers on Hardware-redcued ACPI by emulating
SPL_TYPx, SLP_EN and WAK_STS using the new SLEEP_STATUS_REG and
SLEEP_CONTROL_REG registers.  Makes the transition into S5 (powerdown) work
on the ASUS X205TA.

ok deraadt@@, mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.32 2016/01/12 01:11:15 jcs Exp $	*/
d766 1
@


1.32
log
@Add dwiic, a driver for the Synopsys DesignWare i2c controller found
on the Samsung ATIV Book 9 laptop.  This initial version only
supports ACPI config/attachment.

Add ihidev, a HID-over-i2c driver largely based on uhidev.  dwiic
handles attaching ihidev devices found in ACPI.

Add ims, a HID-over-i2c mouse/trackpad driver to get basic cursor
and button functionality from HID-compliant i2c trackpads.

ok kettenis deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.31 2016/01/09 11:00:01 kettenis Exp $	*/
d198 2
@


1.31
log
@Add HW_REDUCED_ACPI and LOW_POWER_S0_IDLE_CAPABLE FADT flags.
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.30 2015/01/15 01:19:28 jsg Exp $	*/
d733 2
d758 6
@


1.30
log
@Define a new wscons mouse type for Synaptics clickpad devices that lack
physical buttons.  This will be used if the acpi pnpid for the mouse
matches a list provided by Synaptics found in Linux.

Combined with the xenocara changes this will remove the need for an xorg
config file for the x240/t440/t540 generation of thinkpads.

ok matthieu@@ shadchin@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.29 2013/11/06 10:40:36 mpi Exp $	*/
d175 2
@


1.29
log
@Add support for Power Resources for Dx states and the necessary hook
for PCI devices.  This hook should be called twice, before and after
changing the power state of a PCI device.

Before setting the device to the new state, the ACPI layer will notify
every power resources linked to the device for that state and make sure
they are turned "_ON".  After changing the state of the device, it will
decrement the reference of every power resources linked to that device
for the old state and turn them "_OFF" if they are no longer referenced.

This fixes the no-USB after resume problem seen on various ThinkPad,
problem initialy diagnosed with Alexander Polakov.

ok kettenis@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.28 2012/07/13 11:51:41 pirofti Exp $	*/
d732 1
@


1.28
log
@Disable acpivideo(4) on ASUS laptops.

There are some models that panic whenever an event is received.
Some cope, some don't. In order to get this right acpiec(4) requires
major rework. Until then let machines boot.

Discussed with deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.27 2012/01/07 20:13:17 kettenis Exp $	*/
d703 8
@


1.27
log
@Add X2APIC-related definitions for the MADT and silently skip them instead
of printing a warning.
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.26 2011/06/16 23:02:11 pirofti Exp $	*/
d738 1
@


1.26
log
@Import acpitoshiba driver.

This is originally written by Hiroyuki Aizu, ported and integrated
in our tree by Javier Vazquez <javama4 AT gmail> with tweaks and
suggestions by me.

Import prodded by deraadt@@ and the lack of testers on tech@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.25 2011/04/27 20:55:42 jcs Exp $	*/
d330 20
d360 2
@


1.25
log
@attach acpithinkpad to newer lenovo models like the x120e

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.24 2011/01/04 21:17:49 kettenis Exp $	*/
d719 3
@


1.24
log
@Add support for Memory Mapped Configuration space access.  This gives us
access to PCIe extended configuration space access on modern i386 and amd64
machines.
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.23 2010/07/21 19:35:15 deraadt Exp $	*/
d716 2
a717 1
#define ACPI_DEV_THINKPAD "IBM0068"	/* ThinkPad support */
@


1.23
log
@spacing and indents that are driving me crazy
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.22 2010/06/29 22:08:29 jordan Exp $	*/
d381 11
@


1.22
log
@Add support for mapping ACPI to PCI devices
ok kettenis, deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.21 2010/06/28 06:46:32 jordan Exp $	*/
d399 2
a400 2
/* 
 * Intel ACPI DMA Remapping Entries 
d409 4
a412 4
#define DMAR_ENDPOINT 			0x1
#define DMAR_BRIDGE 			0x2
#define DMAR_IOAPIC 			0x3
#define DMAR_HPET 			0x4
d457 4
a460 4
#define DMAR_DRHD 			0x0
#define DMAR_RMRR 			0x1
#define DMAR_ATSR 			0x2
#define DMAR_RHSA 			0x3
d477 2
a478 2
/* 
 * AMD I/O Virtualization Remapping Entries 
@


1.21
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.20 2010/06/28 06:35:15 jordan Exp $	*/
d606 2
@


1.20
log
@Add definitions for Intel/AMD IOMMU ACPI tables
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.19 2010/06/27 17:04:27 mlarkin Exp $	*/
d402 1
a402 2
struct acpidmar_devpath
{
d407 1
a407 2
struct acpidmar_devscope
{
d420 1
a420 2
struct acpidmar_drhd
{
d432 1
a432 2
struct acpidmar_rmrr
{
d444 1
a444 2
struct acpidmar_atsr
{
d538 1
a538 2
struct acpi_ivmd
{
d553 1
a553 2
struct acpi_ivhd
{
d588 1
a588 2
struct acpi_ivrs
{
@


1.19
log
@

Clear ACPI fixed event status on resume (power buttons/etc) so that some
machines don't immediately resume after suspending to S3.

Tested by kettenis@@ and I on 5 or 6 machines, deraadt@@ "yeah, looks good"
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.18 2009/07/23 01:38:16 cnst Exp $	*/
d398 210
@


1.18
log
@New aibs(4) driver for ASUSTeK AI Booster (ACPI ATK0110) hardware monitoring,
with sensor state support through limits provided by the ACPI.

Tested on several ASUS motherboards kindly networked by Sam Fourman Jr.

ok deraadt marco jordan
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.17 2009/04/11 08:22:48 kettenis Exp $	*/
d422 5
@


1.17
log
@Add PnP ID for PCIe host bridge.
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.16 2009/02/19 21:02:05 marco Exp $	*/
d497 1
@


1.16
log
@suspend/resume bits so that we can develop this in tree.  This is disabled.
code from mlarkin and me
help from art,toby,jordan and several others
ok jordan, go for it deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.15 2008/06/24 08:24:57 sobrado Exp $	*/
d470 1
@


1.15
log
@Thinkpad -> ThinkPad
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.14 2008/04/27 16:23:16 jcs Exp $	*/
d394 1
a394 1
	struct acpi_gas	x_wakeup_vector;
d444 7
@


1.14
log
@add acpithinkpad(4), an acpi support driver for ibm/lenovo
thinkpads.

provides functionality that the bios did on older, non-acpi
thinkpads like respond to screen brightness keys and toggle the
bluetooth device on and off.

ok deraadt@@ and marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.13 2008/04/24 13:57:49 jsing Exp $	*/
d488 1
a488 1
#define ACPI_DEV_THINKPAD "IBM0068"	/* Thinkpad support */
@


1.13
log
@Introduce acpiasus(4), a driver for the ACPI based hotkeys found in many
ASUS laptops (including the ASUS EeePC) - largely based on NetBSD's
asus(4) driver. On the ASUS EeePC this allows us to enable/disable
wireless, change screen brightness and use the volume keys.

ok jsg@@, weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.12 2006/12/12 18:07:25 mk Exp $	*/
d488 1
@


1.12
log
@Fix a typo to clean M's out of my tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.11 2006/10/12 19:17:26 marco Exp $	*/
d487 1
@


1.11
log
@Fix typo.  Found by: Janek Richter <janek at openbug dot org>
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.10 2006/10/10 22:34:12 brad Exp $	*/
d465 1
a465 1
#define ACPI_DEV_CS	"PNP0C08"	/* ACPI-Complient System */
@


1.10
log
@add a few more ACPI device ids, as found on a Acer Aspire 1360.

From Maxim Bourmistrov <maxim at student dot chalmers dot se>
via marco@@, ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.9 2006/01/19 00:08:46 jordan Exp $	*/
d4 1
a4 1
 * Copyright (c) 2005 Marco Peereboom <marco@@opebsd.org>
@


1.9
log
@Added support for read/write of PCI Config space
Help jason@@
ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.8 2006/01/06 16:22:46 grange Exp $	*/
d458 1
d460 1
d463 3
d485 2
@


1.8
log
@Two helper macros for setting SLP_TYPx values.
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.7 2006/01/05 21:22:21 grange Exp $	*/
d400 9
@


1.7
log
@Provide symbolic names for the acpi sleeping states and use it.
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.6 2005/12/16 18:11:55 jordan Exp $	*/
d432 2
@


1.6
log
@Cleaned up common power management register i/o
Added enter sleep state ioctl
Hooked power button interrupt
ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.5 2005/12/16 00:08:53 jordan Exp $	*/
d433 10
@


1.5
log
@Moved DSDT AML parsing into parent ACPI driver
ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.4 2005/12/14 04:16:25 marco Exp $	*/
a458 14

#define ACPIREG_PM1A_STS    0x00
#define ACPIREG_PM1A_EN     0x01
#define ACPIREG_PM1A_CNT    0x02
#define ACPIREG_PM1B_STS    0x03
#define ACPIREG_PM1B_EN     0x04
#define ACPIREG_PM1B_CNT    0x05
#define ACPIREG_PM2_CNT     0x06
#define ACPIREG_PM_TMR      0x07
#define ACPIREG_GPE0_STS    0x08
#define ACPIREG_GPE0_EN     0x09
#define ACPIREG_GPE1_STS    0x0A
#define ACPIREG_GPE1_EN     0x0B
#define ACPIREG_SMICMD      0x0C
@


1.4
log
@Add AC device glue.
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.3 2005/12/07 23:29:00 marco Exp $	*/
d459 14
@


1.3
log
@Add ACPI device IDs.  ok jordan@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.2 2005/07/10 17:24:18 grange Exp $	*/
d450 1
a450 1
#define ACPI_DEV_AD	"ACPI0003"	/* AC Device */
@


1.2
log
@Protect from multiple inclusion.
@
text
@d1 1
a1 1
/*	$OpenBSD: acpireg.h,v 1.1 2005/06/02 20:09:39 tholo Exp $	*/
d4 1
d433 26
@


1.1
log
@Start on a basic ACPI framework -- does not do much more than read out the
ACPI tables into kernel memory and attach ACPI and HPET timers currently.

In order to test this code, enabling the devices in GENERIC as well as
the ACPI_ENABLE option is needed.  This code does not do any thermal
control yet, so this should be done with care depending on the platform.

In the tree so more people can contribute to making this more fully
featured.

Ok niklas@@ grange@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d18 3
d432 2
@

