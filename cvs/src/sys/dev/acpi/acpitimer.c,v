head	1.12;
access;
symbols
	OPENBSD_6_2:1.11.0.12
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.10
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.6
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.10.0.12
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.10
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.8
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.4
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.8.0.12
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.10
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.6
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.8
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.6.0.4
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.12
date	2017.10.06.13.33.53;	author mikeb;	state Exp;
branches;
next	1.11;
commitid	o1tBclPB4WgTdx2n;

1.11
date	2015.03.14.03.38.46;	author jsg;	state Exp;
branches;
next	1.10;
commitid	p4LJxGKbi0BU2cG6;

1.10
date	2012.08.16.18.41.17;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2011.04.22.18.22.01;	author jordan;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.11.04.42.09;	author marco;	state Exp;
branches;
next	1.7;

1.7
date	2007.11.04.22.25.53;	author mikeb;	state Exp;
branches;
next	1.6;

1.6
date	2007.02.22.07.01.41;	author jordan;	state Exp;
branches;
next	1.5;

1.5
date	2007.02.20.22.10.27;	author marco;	state Exp;
branches;
next	1.4;

1.4
date	2007.02.19.23.42.39;	author jordan;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.07.03.47.44;	author marco;	state Exp;
branches;
next	1.2;

1.2
date	2005.07.10.19.39.01;	author grange;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.02.20.09.39;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Recalibrate TSC timecounter with HPET and PM timer

If frequency of an invariant (non-stop) time stamp counter is measured
using an independent working timecounter that has a known frequency, we
can assume that the measured TSC frequency is as good as the resolution
of the timecounter that we use to perform the measurement. This lets us
switch from this high quality but expensive source to the cheaper TSC
without sacrificing precision on a wide range of modern CPUs.

From Adam Steen <adam@@adamsteen.com.au> with tweaks from reyk@@ and myself.

Tested by brynet@@, sthen@@ and others, OK mlarkin, sthen
@
text
@/* $OpenBSD: acpitimer.c,v 1.11 2015/03/14 03:38:46 jsg Exp $ */
/*
 * Copyright (c) 2005 Thorsten Lockert <tholo@@sigmasoft.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/timetc.h>

#include <machine/bus.h>

#include <dev/acpi/acpireg.h>
#include <dev/acpi/acpivar.h>

int acpitimermatch(struct device *, void *, void *);
void acpitimerattach(struct device *, struct device *, void *);

u_int acpi_get_timecount(struct timecounter *tc);

static struct timecounter acpi_timecounter = {
	acpi_get_timecount,	/* get_timecount */
	0,			/* no poll_pps */
	0x00ffffff,		/* counter_mask (24 bits) */
	ACPI_FREQUENCY,		/* frequency */
	0,			/* name */
	1000			/* quality */
};

struct acpitimer_softc {
	struct device		sc_dev;

	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
};

struct cfattach acpitimer_ca = {
	sizeof(struct acpitimer_softc), acpitimermatch, acpitimerattach
};

struct cfdriver acpitimer_cd = {
	NULL, "acpitimer", DV_DULL
};

int
acpitimermatch(struct device *parent, void *match, void *aux)
{
	struct acpi_attach_args *aa = aux;
	struct cfdata *cf = match;

	/* sanity */
	if (aa->aaa_name == NULL ||
	    strcmp(aa->aaa_name, cf->cf_driver->cd_name) != 0 ||
	    aa->aaa_table != NULL)
		return (0);

	return (1);
}

void
acpitimerattach(struct device *parent, struct device *self, void *aux)
{
	struct acpitimer_softc *sc = (struct acpitimer_softc *) self;
	struct acpi_softc *psc = (struct acpi_softc *) parent;
	int rc;

	if (psc->sc_fadt->hdr_revision >= 3 &&
	    psc->sc_fadt->x_pm_tmr_blk.address != 0)
		rc = acpi_map_address(psc, &psc->sc_fadt->x_pm_tmr_blk, 0,
		    psc->sc_fadt->pm_tmr_len, &sc->sc_ioh, &sc->sc_iot);
	else
		rc = acpi_map_address(psc, NULL, psc->sc_fadt->pm_tmr_blk,
		    psc->sc_fadt->pm_tmr_len, &sc->sc_ioh, &sc->sc_iot);
	if (rc) {
		printf(": can't map i/o space\n");
		return;
	}

	printf(": %d Hz, %d bits\n", ACPI_FREQUENCY,
	    psc->sc_fadt->flags & FADT_TMR_VAL_EXT ? 32 : 24);

	if (psc->sc_fadt->flags & FADT_TMR_VAL_EXT)
		acpi_timecounter.tc_counter_mask = 0xffffffffU;
	acpi_timecounter.tc_priv = sc;
	acpi_timecounter.tc_name = sc->sc_dev.dv_xname;
	tc_init(&acpi_timecounter);
#if defined(__amd64__)
	extern void cpu_recalibrate_tsc(struct timecounter *);
	cpu_recalibrate_tsc(&acpi_timecounter);
#endif
}


u_int
acpi_get_timecount(struct timecounter *tc)
{
	struct acpitimer_softc *sc = tc->tc_priv;
	u_int u1, u2, u3;

	u2 = bus_space_read_4(sc->sc_iot, sc->sc_ioh, 0);
	u3 = bus_space_read_4(sc->sc_iot, sc->sc_ioh, 0);
	do {
		u1 = u2;
		u2 = u3;
		u3 = bus_space_read_4(sc->sc_iot, sc->sc_ioh, 0);
	} while (u1 > u2 || u2 > u3);

	return (u2);
}
@


1.11
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: acpitimer.c,v 1.10 2012/08/16 18:41:17 tedu Exp $ */
d99 4
@


1.10
log
@we are past the point where timecounters may disappear
ok miod
@
text
@d1 1
a1 1
/* $OpenBSD: acpitimer.c,v 1.9 2011/04/22 18:22:01 jordan Exp $ */
a20 1
#include <sys/malloc.h>
@


1.9
log
@Fix uninitialzied variables and formatting strings (-Wxxx errors)
@
text
@d1 1
a1 1
/* $OpenBSD: acpitimer.c,v 1.8 2008/06/11 04:42:09 marco Exp $ */
a21 1
#ifdef __HAVE_TIMECOUNTER
a22 1
#endif
a31 1
#ifdef __HAVE_TIMECOUNTER
a41 1
#endif
a94 1
#ifdef __HAVE_TIMECOUNTER
a99 1
#endif
a102 1
#ifdef __HAVE_TIMECOUNTER
a118 1
#endif
@


1.8
log
@Fix $OpenBSD$ for once and for all
@
text
@d1 1
a1 1
/* $OpenBSD: acpitimer.c,v 1.7 2007/11/04 22:25:53 mikeb Exp $ */
d96 1
a96 1
	printf(": %ld Hz, %d bits\n", ACPI_FREQUENCY,
@


1.7
log
@Check for non-zero address if mapping to the extended addresses.

Patch from Oleg Safiullin (a.k.a form@@)

ok kettenis canacar weingart
@
text
@d1 1
a1 1
/*	$OpenBSD: acpitimer.c,v 1.6 2007/02/22 07:01:41 jordan Exp $	*/
@


1.6
log
@Fixed ACPITIMER header revision for ACPI2.0 only
ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acpitimer.c,v 1.5 2007/02/20 22:10:27 marco Exp $	*/
d84 2
a85 1
	if (psc->sc_fadt->hdr_revision >= 3)
@


1.5
log
@KNF while in here.
@
text
@d1 1
a1 1
/*	$OpenBSD: acpitimer.c,v 1.4 2007/02/19 23:42:39 jordan Exp $	*/
d84 1
a84 1
	if (psc->sc_fadt->hdr_revision > 1)
@


1.4
log
@Added acpi_map_address function for mapping GAS/IO registers
ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acpitimer.c,v 1.3 2005/12/07 03:47:44 marco Exp $	*/
d86 1
a86 2
				      psc->sc_fadt->pm_tmr_len,
				      &sc->sc_ioh, &sc->sc_iot);
d89 1
a89 2
				      psc->sc_fadt->pm_tmr_len,
				      &sc->sc_ioh, &sc->sc_iot);
d122 1
@


1.3
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: acpitimer.c,v 1.2 2005/07/10 19:39:01 grange Exp $	*/
d82 1
a82 34
	struct acpi_attach_args *aa = aux;
	bus_addr_t address;
	bus_size_t size;

	if (psc->sc_fadt->hdr_revision > 1) {
		switch (psc->sc_fadt->x_pm_tmr_blk.address_space_id) {
		case GAS_SYSTEM_MEMORY:
			sc->sc_iot = aa->aaa_memt;
			break;

		case GAS_SYSTEM_IOSPACE:
			sc->sc_iot = aa->aaa_iot;
			break;

#if 0
		case GAS_SYSTEM_PCI_CFG_SPACE:
			sc->sc_iot = aa->aaa_pcit;
			break;

		case GAS_SYSTEM_SMBUS:
			sc->sc_iot = aa->aaa_smbust;
			break;
#endif

		default:
			printf(": can't identify bus\n");
			return;
		}
		address = psc->sc_fadt->x_pm_tmr_blk.address;
	} else {
		sc->sc_iot = aa->aaa_iot;
		address = psc->sc_fadt->pm_tmr_blk;
	}
	size = psc->sc_fadt->pm_tmr_len;
d84 9
a92 1
	if (bus_space_map(sc->sc_iot, address, size, 0, &sc->sc_ioh)) {
@


1.2
log
@Spacing cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: acpitimer.c,v 1.1 2005/06/02 20:09:39 tholo Exp $	*/
d111 1
a111 2
	}
	else {
@


1.1
log
@Start on a basic ACPI framework -- does not do much more than read out the
ACPI tables into kernel memory and attach ACPI and HPET timers currently.

In order to test this code, enabling the devices in GENERIC as well as
the ACPI_ENABLE option is needed.  This code does not do any thermal
control yet, so this should be done with care depending on the platform.

In the tree so more people can contribute to making this more fully
featured.

Ok niklas@@ grange@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d117 5
a121 5
	    
        if (bus_space_map(sc->sc_iot, address, size, 0, &sc->sc_ioh)) {
                printf(": can't map i/o space\n");
                return;
        }
@

