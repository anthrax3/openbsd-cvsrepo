head	1.40;
access;
symbols
	OPENBSD_6_0:1.38.0.4
	OPENBSD_6_0_BASE:1.38
	OPENBSD_5_9:1.38.0.2
	OPENBSD_5_9_BASE:1.38
	OPENBSD_5_8:1.37.0.4
	OPENBSD_5_8_BASE:1.37
	OPENBSD_5_7:1.36.0.4
	OPENBSD_5_7_BASE:1.36
	OPENBSD_5_6:1.34.0.4
	OPENBSD_5_6_BASE:1.34
	OPENBSD_5_5:1.33.0.10
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.33.0.6
	OPENBSD_5_4_BASE:1.33
	OPENBSD_5_3:1.33.0.4
	OPENBSD_5_3_BASE:1.33
	OPENBSD_5_2:1.33.0.2
	OPENBSD_5_2_BASE:1.33
	OPENBSD_5_1_BASE:1.32
	OPENBSD_5_1:1.32.0.8
	OPENBSD_5_0:1.32.0.6
	OPENBSD_5_0_BASE:1.32
	OPENBSD_4_9:1.32.0.4
	OPENBSD_4_9_BASE:1.32
	OPENBSD_4_8:1.32.0.2
	OPENBSD_4_8_BASE:1.32
	OPENBSD_4_7:1.28.0.2
	OPENBSD_4_7_BASE:1.28
	OPENBSD_4_6:1.28.0.4
	OPENBSD_4_6_BASE:1.28
	OPENBSD_4_5:1.26.0.6
	OPENBSD_4_5_BASE:1.26
	OPENBSD_4_4:1.26.0.4
	OPENBSD_4_4_BASE:1.26
	OPENBSD_4_3:1.26.0.2
	OPENBSD_4_3_BASE:1.26
	OPENBSD_4_2:1.25.0.2
	OPENBSD_4_2_BASE:1.25
	OPENBSD_4_1:1.20.0.2
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7;
locks; strict;
comment	@ * @;


1.40
date	2017.02.22.16.39.56;	author jcs;	state Exp;
branches;
next	1.39;
commitid	8xjYWoiSUtOS1eaI;

1.39
date	2016.10.25.06.55.59;	author pirofti;	state Exp;
branches;
next	1.38;
commitid	T6wBjmhxTtwwvjJL;

1.38
date	2015.08.12.05.59.54;	author mlarkin;	state Exp;
branches;
next	1.37;
commitid	yJ9YfqrdiR5zt4wo;

1.37
date	2015.08.04.04.20.35;	author mlarkin;	state Exp;
branches;
next	1.36;
commitid	6TPjkReftj0IAt3c;

1.36
date	2014.11.23.20.33.47;	author mlarkin;	state Exp;
branches;
next	1.35;
commitid	QRJMZUFrgaM56XWw;

1.35
date	2014.11.08.07.45.10;	author mlarkin;	state Exp;
branches;
next	1.34;
commitid	CGxpPhnDADMO822f;

1.34
date	2014.05.23.19.17.39;	author landry;	state Exp;
branches;
next	1.33;

1.33
date	2012.07.13.10.37.40;	author pirofti;	state Exp;
branches;
next	1.32;

1.32
date	2010.08.06.21.12.27;	author marco;	state Exp;
branches;
next	1.31;

1.31
date	2010.08.03.16.55.06;	author marco;	state Exp;
branches;
next	1.30;

1.30
date	2010.07.27.01.21.19;	author jordan;	state Exp;
branches;
next	1.29;

1.29
date	2010.07.26.19.54.06;	author jordan;	state Exp;
branches;
next	1.28;

1.28
date	2009.06.02.23.03.34;	author jordan;	state Exp;
branches;
next	1.27;

1.27
date	2009.03.10.20.36.10;	author jordan;	state Exp;
branches;
next	1.26;

1.26
date	2007.11.12.21.58.14;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2007.05.31.17.49.16;	author gwk;	state Exp;
branches;
next	1.24;

1.24
date	2007.04.23.17.38.30;	author mk;	state Exp;
branches;
next	1.23;

1.23
date	2007.04.22.21.05.29;	author mk;	state Exp;
branches;
next	1.22;

1.22
date	2007.04.22.20.52.27;	author mk;	state Exp;
branches;
next	1.21;

1.21
date	2007.03.22.16.55.31;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2007.01.27.19.37.57;	author marco;	state Exp;
branches;
next	1.19;

1.19
date	2007.01.26.19.54.49;	author mk;	state Exp;
branches;
next	1.18;

1.18
date	2007.01.25.21.25.42;	author mk;	state Exp;
branches;
next	1.17;

1.17
date	2007.01.22.19.45.16;	author mk;	state Exp;
branches;
next	1.16;

1.16
date	2007.01.18.19.49.52;	author kettenis;	state Exp;
branches;
next	1.15;

1.15
date	2007.01.03.05.59.20;	author marco;	state Exp;
branches;
next	1.14;

1.14
date	2006.12.26.23.58.08;	author marco;	state Exp;
branches;
next	1.13;

1.13
date	2006.12.23.17.46.39;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2006.12.21.11.23.41;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.11.29.22.17.07;	author marco;	state Exp;
branches;
next	1.10;

1.10
date	2006.10.19.08.56.46;	author marco;	state Exp;
branches;
next	1.9;

1.9
date	2006.10.12.16.38.21;	author jordan;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.04.05.36.42;	author marco;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.26.17.05.33;	author marco;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.26.02.26.05;	author marco;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.17.00.46.54;	author jordan;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.16.22.14.32;	author marco;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.28.03.08.33;	author marco;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.16.21.11.51;	author marco;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.16.04.20.39;	author marco;	state Exp;
branches;
next	;


desc
@@


1.40
log
@add acpisbs, an acpi smart battery subsystem driver reading data
over smbus

currently disabled because it conflicts with acpibat

ok deraadt, kettenis
@
text
@/* $OpenBSD: acpidev.h,v 1.39 2016/10/25 06:55:59 pirofti Exp $ */
/*
 * Copyright (c) 2005 Marco Peereboom <marco@@openbsd.org>
 * Copyright (c) 2005 Thorsten Lockert <tholo@@sigmasoft.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef __DEV_ACPI_ACPIDEV_H__
#define __DEV_ACPI_ACPIDEV_H__

#include <sys/sensors.h>
#include <sys/rwlock.h>
#include <dev/acpi/acpireg.h>
#include <dev/acpi/smbus.h>

#define DEVNAME(s)  ((s)->sc_dev.dv_xname)

#define ACPIDEV_NOPOLL		0
#define ACPIDEV_POLL		1

/*
 * _BIF (Battery InFormation)
 * Arguments: none
 * Results  : package _BIF (Battery InFormation)
 * Package {
 * 	// ASCIIZ is ASCII character string terminated with a 0x00.
 * 	Power Unit			//DWORD
 * 	Design Capacity			//DWORD
 * 	Last Full Charge Capacity	//DWORD
 * 	Battery Technology		//DWORD
 * 	Design Voltage			//DWORD
 * 	Design Capacity of Warning	//DWORD
 * 	Design Capacity of Low		//DWORD
 * 	Battery Capacity Granularity 1	//DWORD
 * 	Battery Capacity Granularity 2	//DWORD
 * 	Model Number			//ASCIIZ
 * 	Serial Number			//ASCIIZ
 * 	Battery Type			//ASCIIZ
 * 	OEM Information			//ASCIIZ
 * }
 */
struct acpibat_bif {
	u_int32_t	bif_power_unit;
#define BIF_POWER_MW		0x00
#define BIF_POWER_MA		0x01
	u_int32_t	bif_capacity;
#define BIF_UNKNOWN		0xffffffff
	u_int32_t	bif_last_capacity;
	u_int32_t	bif_technology;
#define BIF_TECH_PRIMARY	0x00
#define BIF_TECH_SECONDARY	0x01
	u_int32_t	bif_voltage;
	u_int32_t	bif_warning;
	u_int32_t	bif_low;
	u_int32_t	bif_cap_granu1;
	u_int32_t	bif_cap_granu2;
	char		bif_model[20];
	char		bif_serial[20];
	char		bif_type[20];
	char		bif_oem[20];
};

/*
 * _OSC Definition for Control Method Battery
 * Arguments: none
 * Results  : DWORD flags
 */
#define CMB_OSC_UUID		"f18fc78b-0f15-4978-b793-53f833a1d35b"
#define   CMB_OSC_GRANULARITY	0x01
#define   CMB_OSC_WAKE_ON_LOW	0x02

/*
 * _BST (Battery STatus)
 * Arguments: none
 * Results  : package _BST (Battery STatus)
 * Package {
 * 	Battery State			//DWORD
 * 	Battery Present Rate		//DWORD
 * 	Battery Remaining Capacity	//DWORD
 * 	Battery Present Voltage		//DWORD
 * }
 *
 * Per the spec section 10.2.2.3
 * Remaining Battery Percentage[%] = (Battery Remaining Capacity [=0 ~ 100] /
 *     Last Full Charged Capacity[=100]) * 100
 *
 * Remaining Battery Life [h] = Battery Remaining Capacity [mAh/mWh] /
 *     Battery Present Rate [=0xFFFFFFFF] = unknown
 */
struct acpibat_bst {
	u_int32_t	bst_state;
#define BST_DISCHARGE		0x01
#define BST_CHARGE		0x02
#define BST_CRITICAL		0x04
	u_int32_t	bst_rate;
#define BST_UNKNOWN		0xffffffff
	u_int32_t	bst_capacity;
	u_int32_t	bst_voltage;
};

/*
 * _BTP (Battery Trip Point)
 * Arguments: DWORD level
 * Results  : none
 */
#define BTP_CLEAR_TRIP_POINT	0x00

/*
 * _BTM (Battery TiMe)
 * Arguments: DWORD rate of discharge
 * Results  : DWORD time in seconds or error/unknown
 */
#define BTM_CURRENT_RATE	0x00

#define BTM_RATE_TOO_LARGE	0x00
#define BTM_CRITICAL		0x00
#define BTM_UNKNOWN		0xffffffff

/*
 * _BMD (Battery Maintenance Data)
 * Arguments: none
 * Results  : package _BMD (Battery Maintenance Data)
 * Package {
 * 	Status Flags		//DWORD
 * 	Capability Flags	//DWORD
 * 	Recalibrate Count	//DWORD
 * 	Quick Recalibrate Time	//DWORD
 * 	Slow Recalibrate Time	//DWORD
 * }
 */
struct acpibat_bmd {
	u_int32_t	bmd_status;
#define BMD_AML_CALIBRATE_CYCLE	0x01
#define BMD_CHARGING_DISABLED	0x02
#define BMD_DISCHARGE_WHILE_AC	0x04
#define BMD_RECALIBRATE_BAT	0x08
#define BMD_GOTO_STANDBY_SPEED	0x10
	u_int32_t	bmd_capability;
#define BMD_CB_AML_CALIBRATION	0x01
#define BMD_CB_DISABLE_CHARGER	0x02
#define BMD_CB_DISCH_WHILE_AC	0x04
#define BMD_CB_AFFECT_ALL_BATT	0x08
#define BMD_CB_FULL_CHRG_FIRST	0x10
	u_int32_t	bmd_recalibrate_count;
#define BMD_ONLY_CALIB_IF_ST3	0x00	/* only recal when status bit 3 set */
	u_int32_t	bmd_quick_recalibrate_time;
#define BMD_UNKNOWN		0xffffffff
	u_int32_t	bmd_slow_recalibrate_time;
};

/*
 * _BMC (Battery Maintenance Control)
 * Arguments: DWORD flags
 * Results  : none
 */
#define BMC_AML_CALIBRATE	0x01
#define BMC_DISABLE_CHARGING	0x02
#define BMC_ALLOW_AC_DISCHARGE	0x04

/* AC device */
/*
 * _PSR (Power Source)
 * Arguments: none
 * Results  : DWORD status
 */
#define PSR_OFFLINE		0x00
#define PSR_ONLINE		0x01

/*
 * _PCL (Power Consumer List)
 * Arguments: none
 * Results  : LIST of Power Class pointers
 */

/* hpet device */
#define	HPET_REG_SIZE		1024

#define	HPET_CAPABILITIES	0x000
#define	HPET_CONFIGURATION	0x010
#define	HPET_INTERRUPT_STATUS	0x020
#define	HPET_MAIN_COUNTER	0x0F0
#define	HPET_TIMER0_CONFIG	0x100
#define	HPET_TIMER0_COMPARE	0x108
#define	HPET_TIMER0_INTERRUPT	0x110
#define	HPET_TIMER1_CONFIG	((0x20 * 1) + HPET_TIMER0_CONFIG)
#define	HPET_TIMER1_COMPARE	((0x20 * 1) + HPET_TIMER0_COMPARE)
#define	HPET_TIMER1_INTERRUPT	((0x20 * 1) + HPET_TIMER0_INTERRUPT)
#define	HPET_TIMER2_CONFIG	((0x20 * 2) + HPET_TIMER0_CONFIG)
#define	HPET_TIMER2_COMPARE	((0x20 * 2) + HPET_TIMER0_COMPARE)
#define	HPET_TIMER2_INTERRUPT	((0x20 * 2) + HPET_TIMER0_INTERRUPT)

/* Max period is 10^8 fs (100 ns) == 0x5F5E100 as per the HPET SDM */
#define HPET_MAX_PERIOD		0x5F5E100

#define STA_PRESENT   (1L << 0)
#define STA_ENABLED   (1L << 1)
#define STA_SHOW_UI   (1L << 2)
#define STA_DEV_OK    (1L << 3)
#define STA_BATTERY   (1L << 4)

/*
 * _PSS (Performance Supported States)
 * Arguments: none
 * Results  : package _PSS (Performance Supported States)
 * Package {
 *	CoreFreq		//DWORD
 *	Power			//DWORD
 *	TransitionLatency	//DWORD
 *	BusMasterLatency	//DWORD
 *	Control			//DWORD
 * 	Status			//DWORD
 * }
 */
struct acpicpu_pss {
	u_int32_t	pss_core_freq;
	u_int32_t	pss_power;
	u_int32_t	pss_trans_latency;
	u_int32_t	pss_bus_latency;
	u_int32_t	pss_ctrl;
	u_int32_t	pss_status;
};

int acpicpu_fetch_pss(struct acpicpu_pss **);
void acpicpu_set_notify(void (*)(struct acpicpu_pss *, int));
/*
 * XXX this is returned in a buffer and is not a "natural" type.
 *
 * GRD (Generic Register Descriptor )
 *
 */
struct acpi_grd {
	u_int8_t	grd_descriptor;
	u_int16_t	grd_length;
	struct acpi_gas	grd_gas;
} __packed;

/*
 * _PCT (Performance Control )
 * Arguments: none
 * Results  : package _PCT (Performance Control)
 * Package {
 *	Perf_Ctrl_register	//Register
 *	Perf_Status_register	//Register
 * }
 */
struct acpicpu_pct {
	struct acpi_grd	pct_ctrl;
	struct acpi_grd	pct_status;
};

/* softc for fake apm devices */
struct acpiac_softc {
	struct device		sc_dev;

	struct acpi_softc	*sc_acpi;
	struct aml_node		*sc_devnode;

	int			sc_ac_stat;

	struct ksensor		sc_sens[1];
	struct ksensordev	sc_sensdev;
};

struct acpibat_softc {
	struct device		sc_dev;

	struct acpi_softc	*sc_acpi;
	struct aml_node		*sc_devnode;

	struct acpibat_bif	sc_bif;
	struct acpibat_bst	sc_bst;
	volatile int		sc_bat_present;

	struct ksensor		sc_sens[9];
	struct ksensordev	sc_sensdev;
};

TAILQ_HEAD(aml_nodelisth, aml_nodelist);

struct acpidock_softc {
	struct device		sc_dev;

	struct acpi_softc	*sc_acpi;
	struct aml_node		*sc_devnode;

	struct aml_nodelisth	sc_deps_h;
	struct aml_nodelist	*sc_deps;

	struct ksensor		sc_sens;
	struct ksensordev	sc_sensdev;

	int			sc_docked;
	int			sc_sta;

#define ACPIDOCK_STATUS_UNKNOWN		-1
#define ACPIDOCK_STATUS_UNDOCKED	0
#define ACPIDOCK_STATUS_DOCKED		1
};

#define ACPIDOCK_EVENT_INSERT	0
#define ACPIDOCK_EVENT_DEVCHECK 1
#define	ACPIDOCK_EVENT_EJECT	3

#define ACPIEC_MAX_EVENTS	256

struct acpiec_event {
	struct aml_node *event;
};

struct acpiec_softc {
	struct device		sc_dev;

	int			sc_ecbusy;

	/* command/status register */
	bus_size_t		sc_ec_sc;
	bus_space_tag_t		sc_cmd_bt;
	bus_space_handle_t	sc_cmd_bh;

	/* data register */
	bus_size_t		sc_ec_data;
	bus_space_tag_t		sc_data_bt;
	bus_space_handle_t	sc_data_bh;

	struct acpi_softc	*sc_acpi;
	struct aml_node		*sc_devnode;
	u_int32_t		sc_gpe;
	struct acpiec_event	sc_events[ACPIEC_MAX_EVENTS];
	int			sc_gotsci;
	int			sc_glk;
};

void		acpibtn_disable_psw(void);
void		acpibtn_enable_psw(void);
int		acpibtn_numopenlids(void);

struct acpisbs_battery {
	uint16_t mode;			/* bit flags */
	int	 units;
#define	ACPISBS_UNITS_MW		0
#define	ACPISBS_UNITS_MA		1
	uint16_t at_rate;		/* mAh or mWh */
	uint16_t temperature;		/* 0.1 degK */
	uint16_t voltage;		/* mV */
	uint16_t current;		/* mA */
	uint16_t avg_current;		/* mA */
	uint16_t rel_charge;		/* percent of last_capacity */
	uint16_t abs_charge;		/* percent of design_capacity */
	uint16_t capacity;		/* mAh */
	uint16_t full_capacity;		/* mAh, when fully charged */
	uint16_t run_time;		/* minutes */
	uint16_t avg_empty_time;	/* minutes */
	uint16_t avg_full_time;		/* minutes until full */
	uint16_t charge_current;	/* mA */
	uint16_t charge_voltage;	/* mV */
	uint16_t status;		/* bit flags */
	uint16_t cycle_count;		/* cycles */
	uint16_t design_capacity;	/* mAh */
	uint16_t design_voltage;	/* mV */
	uint16_t spec;			/* formatted */
	uint16_t manufacture_date;	/* formatted */
	uint16_t serial;		/* number */

#define	ACPISBS_VALUE_UNKNOWN		65535

	char	 manufacturer[SMBUS_DATA_SIZE];
	char	 device_name[SMBUS_DATA_SIZE];
	char	 device_chemistry[SMBUS_DATA_SIZE];
	char	 oem_data[SMBUS_DATA_SIZE];
};

struct acpisbs_softc {
	struct device		sc_dev;

	struct acpi_softc	*sc_acpi;
	struct aml_node		*sc_devnode;
	struct acpiec_softc     *sc_ec;
	uint8_t			sc_ec_base;

	struct acpisbs_battery	sc_battery;
	int			sc_batteries_present;

	struct ksensor		*sc_sensors;
	struct ksensordev	sc_sensordev;
	struct sensor_task	*sc_sensor_task;
	struct timeval		sc_lastpoll;
};

#endif /* __DEV_ACPI_ACPIDEV_H__ */
@


1.39
log
@Deduplicate the CRS parsing code and handle broken ACPI implementations.

This change was prompted by a report from Ilya Kaliman where acpiec(4)
failed to initialize on his Acer Aspire S7.

Further investigations showed that the machine had 4 instead of 2 resources
defined inside the EC device which is a violation of all existing ACPI
revisions.


We now handle such machines by using the aml resource parser directly, which
lead to the removal of the existing one from acpiec.c, and ignoring extra
resources (although they are reported in the dmesg).

In the process I also done a couple of more style(9) fixes.


Suggested by and ok guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.38 2015/08/12 05:59:54 mlarkin Exp $ */
d25 1
d347 53
@


1.38
log
@
Check proper HPET period value during attach.

Pointed out by patrick keshishian <pkeshish at gmail.com>, thanks.
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.37 2015/08/04 04:20:35 mlarkin Exp $ */
d326 1
d331 1
@


1.37
log
@
Fix a handful of incorrect register offsets in acpihpet.

from patrick keshishian <pkeshish at gmail.com>

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.36 2014/11/23 20:33:47 mlarkin Exp $ */
d201 3
@


1.36
log
@
If a machine has no _LIDs, then none can be open. This diff fixes a problem
where machines without any _LIDs were going back to sleep after hibernate
due to the recent suspend-if-lid-closed-on-resume diff. Noticed on qemu,
which doesn't have any _LIDs.

discussed with deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.35 2014/11/08 07:45:10 mlarkin Exp $ */
d195 6
a200 6
#define	HPET_TIMER1_CONFIG	0x200
#define	HPET_TIMER1_COMPARE	0x208
#define	HPET_TIMER1_INTERRUPT	0x310
#define	HPET_TIMER2_CONFIG	0x400
#define	HPET_TIMER2_COMPARE	0x408
#define	HPET_TIMER2_INTERRUPT	0x510
@


1.35
log
@
If resuming from sleep (zzz/ZZZ) and the lid is still closed, go back to
sleep. This prevents accidental lid flex or slight opening in a backpack
from waking the machine up and leaving it resumed (powered on).

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.34 2014/05/23 19:17:39 landry Exp $ */
d340 1
a340 1
int		acpibtn_checklidopen(void);
@


1.34
log
@Expose bif_capacity as the 'design capacity' through an acpibat sensor,
giving you the original capacity of the battery:

hw.sensors.acpibat0.watthour0=64.07 Wh (last full capacity)
hw.sensors.acpibat0.watthour4=84.24 Wh (design capacity)

hw.sensors.acpibat0.amphour0=2.03 Ah (last full capacity)
hw.sensors.acpibat0.amphour4=4.40 Ah (design capacity)

Diff from Fabian Raetz on tech@@, thanks!

ok mlarkin@@ zhuk@@ armani@@ kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.33 2012/07/13 10:37:40 pirofti Exp $ */
d340 1
@


1.33
log
@Make the ACPI EC aware of the AML global lock.

Comments from kettenis@@ and matthew@@.

Okay deraadt@@, kettenis@@.
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.32 2010/08/06 21:12:27 marco Exp $ */
d281 1
a281 1
	struct ksensor		sc_sens[8];
@


1.32
log
@Always call _PSW on _LID devices that support it to enable lid open to
resume the machine.  Conversely disable it when the machine wakes up.

Tested by several ok deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.31 2010/08/03 16:55:06 marco Exp $ */
d335 1
@


1.31
log
@Add busy flag so that we don't act on a SCI until a command in progress
completes.  Written with jordan.

ok deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.30 2010/07/27 01:21:19 jordan Exp $ */
d337 2
@


1.30
log
@Add additional Notify handler for dock devices, according to ACPI spec
ok marco
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.29 2010/07/26 19:54:06 jordan Exp $ */
d319 2
@


1.29
log
@Remove unused structure members
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.28 2009/06/02 23:03:34 jordan Exp $ */
d308 1
@


1.28
log
@Added changes for docking station, must eject all children devices
ok marco@@, mlarkin@@
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.27 2009/03/10 20:36:10 jordan Exp $ */
a261 3
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;

a273 3
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;

a288 3

	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
@


1.27
log
@Added sensor devices for Thinkpad (temp+fan)
Exported aml_evalinteger method
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.26 2007/11/12 21:58:14 deraadt Exp $ */
d291 2
d302 1
a302 1
	TAILQ_HEAD(, aml_nodelist)	sc_deps_h;
@


1.26
log
@spacing
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.25 2007/05/31 17:49:16 gwk Exp $ */
d317 23
@


1.25
log
@Make powernow-k8 on amd64 and i386 use the _PSS object from acpi to
retreive p_state data as spelled out in the amd64 bios and kernel
developers guide. This code is still a little rough around the edges but
has been tested by myself on a tyan machine and by phessler at theapt
dot org on an HP DL145. This diff also takes a first stab and cleaning up
the acpicpu dmesg spam.

ok tedu, marco
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.24 2007/04/23 17:38:30 mk Exp $ */
d67 4
a70 4
	char	        bif_model[20];
	char	        bif_serial[20];
	char	        bif_type[20];
	char	        bif_oem[20];
@


1.24
log
@In acpidock_softc, change sc_sens from being a one element long array to
simply being a single struct ksensor.
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.23 2007/04/22 21:05:29 mk Exp $ */
d24 1
d230 2
d296 1
a296 1
			 
@


1.23
log
@Whitespace cleanup.
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.22 2007/04/22 20:52:27 mk Exp $ */
d300 1
a300 1
	struct ksensor		sc_sens[1];
@


1.22
log
@Add a TAILQ, aml_nodelist, of devices depending on the dock device to
struct acpidock_softc and stuff devices into it during attach.

This list is not yet used, but I have code ready to handle the ACPI side
of this.  However, it still doesn't handle that there may in fact be
multiple dock devices in a machine (e.g. on pre-60 series ThinkPads), but
I need to figure out how to do so properly first.  In the mean time I want
this in the tree so I don't lose the code.
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.21 2007/03/22 16:55:31 deraadt Exp $ */
d289 1
a289 1
	struct device           sc_dev;
d291 2
a292 2
	bus_space_tag_t         sc_iot;
	bus_space_handle_t      sc_ioh;
d294 1
a294 1
	struct acpi_softc       *sc_acpi;
@


1.21
log
@split userland & kernel struct sensor/sensordev so that the addition
of new fields in the future is less disruptive.  This is done similar
to how struct proc is handled for ps(1).  ok jmc (man page changes)
tested fkr simon, and more suggestions from millert
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.20 2007/01/27 19:37:57 marco Exp $ */
d296 3
@


1.20
log
@Add some more _STA flags.
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.19 2007/01/26 19:54:49 mk Exp $ */
d267 2
a268 2
	struct sensor		sc_sens[1];
	struct sensordev	sc_sensdev;
d284 2
a285 2
	struct sensor		sc_sens[8];
	struct sensordev	sc_sensdev;
d297 2
a298 2
	struct sensor		sc_sens[1];
	struct sensordev	sc_sensdev;
@


1.19
log
@Actually add the acpidock indicator sensor stuff to the softc struct so
acpidock compiles.  I had this in my tree and forgot to commit with the
acpidock.c change yesterday. :(

Reported by Johan Mson Lindman.
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.17 2007/01/22 19:45:16 mk Exp $ */
d203 2
@


1.18
log
@Remove comment that I committed by accident.
@
text
@d295 3
@


1.17
log
@Add driver for ACPI docking stations.

Not completely functional yet, e.g. undocking doesn't work yet but put
it in the tree to be able to safely work on this.

ok marco
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.16 2007/01/18 19:49:52 kettenis Exp $ */
a284 5


/*
 * ACPI dock (_DCK)
 */
@


1.16
log
@Check whether PCI interrupt link devices are enabled.
Based on a diff from marco@@.
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.15 2007/01/03 05:59:20 marco Exp $ */
d285 27
@


1.15
log
@Oops forgot this bit as part of the cleanup for acpiac.  From Constantine
Murinen.
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.14 2006/12/26 23:58:08 marco Exp $ */
d202 1
@


1.14
log
@Add polling to devices that require it such as acpibat and acpitz.
Use the same tsleep/wakeup mechanism as the interrupt code to keep it non-
concurrent.
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.13 2006/12/23 17:46:39 deraadt Exp $ */
d264 1
a264 1
	struct sensor		sens[1];	/* XXX debug only */
d281 1
a281 1
	struct sensor		sc_sens[8];	/* XXX debug only */
@


1.13
log
@adapt to new two-level sensor api; Constantine A. Murenin
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.12 2006/12/21 11:23:41 deraadt Exp $ */
d26 3
@


1.12
log
@more minor knf
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.11 2006/11/29 22:17:07 marco Exp $ */
d261 2
a262 1
	struct sensor sens[1];	/* XXX debug only */
d278 2
a279 1
	struct sensor		sc_sens[8]; /* XXX debug only */
@


1.11
log
@After a long debate at the hackathon it was decided that the acpi implementation
is not concurrent if the sensors thread goes away.  This makes acpi completly
lockless.

help and ok dlg
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.10 2006/10/19 08:56:46 marco Exp $ */
d88 1
a88 1
 * 
d92 1
a92 1
 * 
@


1.10
log
@Replace ACPI ioctls with APM ioctls.  This makes ACPI talk the same protocol
as APM therefore userspace can now retrieve power information in the same
fashion as all other apm arches (zaurus, macppc, i386 etc).

To use force the use of acpi device like so: apmd -f /dev/acpi

ok jordan@@
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.9 2006/10/12 16:38:21 jordan Exp $ */
a272 1
	struct rwlock		sc_lock;
@


1.9
log
@Massive ACPI changes
  Fixed ACPI leaks
  new ACPI API
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.8 2006/03/04 05:36:42 marco Exp $ */
d22 3
d249 31
@


1.8
log
@Add the gasio magic to slow/speed cpu.
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.7 2006/02/26 17:05:33 marco Exp $ */
d60 4
a63 4
	const char	*bif_model;
	const char	*bif_serial;
	const char	*bif_type;
	const char	*bif_oem;
@


1.7
log
@Add GRD and PCT structures.
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.6 2006/02/26 02:26:05 marco Exp $ */
d229 1
a229 16
	u_int8_t	grd_access_type;
#define GRD_SYS_MEM		0x00
#define GRD_SYS_IO		0x01
#define GRD_SYS_PCICONFIG	0x02
#define GRD_SYS_EMBEDCTRL	0x03
#define GRD_SYS_SMBUS		0x04
#define GRD_SYS_FIXEDHW		0x7f
	u_int8_t	grd_reg_width;
	u_int8_t	grd_reg_bit_offset;
	u_int8_t	grd_address_size;
#define GRD_ADDR_UNDEFINED	0x00
#define GRD_ADDR_BYTE		0x01
#define GRD_ADDR_WORD		0x02
#define GRD_ADDR_DWORD		0x03
#define GRD_ADDR_QWORD		0x04
	u_int64_t	grd_address;
@


1.6
log
@Add _PSS.
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.5 2006/02/17 00:46:54 jordan Exp $ */
d218 41
@


1.5
log
@Fixed code for handling _INI
Rearranged debug statements
ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.4 2006/02/16 22:14:32 marco Exp $ */
d197 22
@


1.4
log
@Print useful information during boot about the battery and power supply.

ok jordan.
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.3 2005/12/28 03:08:33 marco Exp $ */
d194 3
@


1.3
log
@Add 2 methods (Battery Info and Battery Status)
ok jordan@@
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.2 2005/12/16 21:11:51 marco Exp $ */
d169 2
a170 2
#define PSR_ONLINE		0x00
#define PSR_OFFLINE		0x01
@


1.2
log
@Typo and use correct header file.
@
text
@d1 1
a1 1
/* $OpenBSD: acpidev.h,v 1.1 2005/12/16 04:20:39 marco Exp $ */
d22 2
d60 4
a63 1
	char		bif_data[];	/* 4 strings */
@


1.1
log
@Add new unified header file for devices.  Suggested deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d173 1
a173 1
/* hpte device */
@

