head	1.12;
access;
symbols
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.10.0.4
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.16
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.14
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.10
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.8
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5;
locks; strict;
comment	@ * @;


1.12
date	2016.03.29.17.52.04;	author kettenis;	state Exp;
branches;
next	1.11;
commitid	RJrTJ7Ytf8qwI0Bn;

1.11
date	2015.03.14.03.38.47;	author jsg;	state Exp;
branches;
next	1.10;
commitid	p4LJxGKbi0BU2cG6;

1.10
date	2014.12.09.06.58.29;	author doug;	state Exp;
branches;
next	1.9;
commitid	yWAxzpQP2PPpYlfT;

1.9
date	2011.05.23.11.58.03;	author pirofti;	state Exp;
branches;
next	1.8;

1.8
date	2011.04.06.21.16.13;	author martynas;	state Exp;
branches;
next	1.7;

1.7
date	2010.08.08.20.45.18;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2010.07.21.19.35.15;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2009.06.19.06.23.03;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.04.17.25.51;	author pirofti;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.04.17.02.36;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.03.20.27.38;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.03.00.36.59;	author pirofti;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Implement a cleaner way to prevent acpivout(4) from attaching if we have
a platform-specific method of controlling the backlight.

ok millert@@, mlarkin@@, jung@@
@
text
@/*	$OpenBSD: acpivout.c,v 1.11 2015/03/14 03:38:47 jsg Exp $	*/
/*
 * Copyright (c) 2009 Paul Irofti <pirofti@@openbsd.org>
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/malloc.h>

#include <machine/bus.h>

#include <dev/acpi/acpivar.h>
#include <dev/acpi/acpidev.h>
#include <dev/acpi/amltypes.h>
#include <dev/acpi/dsdt.h>

#include <dev/wscons/wsconsio.h>

int	acpivout_match(struct device *, void *, void *);
void	acpivout_attach(struct device *, struct device *, void *);
int	acpivout_notify(struct aml_node *, int, void *);

#ifdef ACPIVIDEO_DEBUG
#define DPRINTF(x)	printf x
#else
#define DPRINTF(x)
#endif

/* Notifications for Output Devices */
#define NOTIFY_BRIGHTNESS_CYCLE		0x85
#define NOTIFY_BRIGHTNESS_UP		0x86
#define NOTIFY_BRIGHTNESS_DOWN		0x87
#define NOTIFY_BRIGHTNESS_ZERO		0x88
#define NOTIFY_DISPLAY_OFF		0x89

struct acpivout_softc {
	struct device		sc_dev;

	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;

	struct acpi_softc	*sc_acpi;
	struct aml_node		*sc_devnode;

	int	*sc_bcl;
	size_t	sc_bcl_len;
};

void	acpivout_brightness_cycle(struct acpivout_softc *);
void	acpivout_brightness_up(struct acpivout_softc *);
void	acpivout_brightness_down(struct acpivout_softc *);
void	acpivout_brightness_zero(struct acpivout_softc *);
int	acpivout_get_brightness(struct acpivout_softc *);
int	acpivout_find_brightness(struct acpivout_softc *, int);
void	acpivout_set_brightness(struct acpivout_softc *, int);
void	acpivout_get_bcl(struct acpivout_softc *);

/* wconsole hook functions */
int	acpivout_get_param(struct wsdisplay_param *);
int	acpivout_set_param(struct wsdisplay_param *);

extern int (*ws_get_param)(struct wsdisplay_param *);
extern int (*ws_set_param)(struct wsdisplay_param *);

struct cfattach acpivout_ca = {
	sizeof(struct acpivout_softc), acpivout_match, acpivout_attach
};

struct cfdriver acpivout_cd = {
	NULL, "acpivout", DV_DULL
};

int
acpivout_match(struct device *parent, void *match, void *aux)
{
	struct acpi_attach_args	*aaa = aux;
	struct cfdata		*cf = match;

	if (aaa->aaa_name == NULL ||
	    strcmp(aaa->aaa_name, cf->cf_driver->cd_name) != 0 ||
	    aaa->aaa_table != NULL)
		return (0);

	if (ws_get_param || ws_set_param)
		return (0);

	return (1);
}

void
acpivout_attach(struct device *parent, struct device *self, void *aux)
{
	struct acpivout_softc	*sc = (struct acpivout_softc *)self;
	struct acpi_attach_args	*aaa = aux;

	sc->sc_acpi = ((struct acpivideo_softc *)parent)->sc_acpi;
	sc->sc_devnode = aaa->aaa_node;

	printf(": %s\n", sc->sc_devnode->name);

	aml_register_notify(sc->sc_devnode, aaa->aaa_dev,
	    acpivout_notify, sc, ACPIDEV_NOPOLL);

	ws_get_param = acpivout_get_param;
	ws_set_param = acpivout_set_param;

	acpivout_get_bcl(sc);
}

int
acpivout_notify(struct aml_node *node, int notify, void *arg)
{
	struct acpivout_softc *sc = arg;

	switch (notify) {
	case NOTIFY_BRIGHTNESS_CYCLE:
		acpivout_brightness_cycle(sc);
		break;
	case NOTIFY_BRIGHTNESS_UP:
		acpivout_brightness_up(sc);
		break;
	case NOTIFY_BRIGHTNESS_DOWN:
		acpivout_brightness_down(sc);
		break;
	case NOTIFY_BRIGHTNESS_ZERO:
		acpivout_brightness_zero(sc);
		break;
	case NOTIFY_DISPLAY_OFF:
		/* TODO: D3 state change */
		break;
	default:
		printf("%s: unknown event 0x%02x\n", DEVNAME(sc), notify);
		break;
	}

	return (0);
}

void
acpivout_brightness_cycle(struct acpivout_softc *sc)
{
	int	cur_level;

	if (sc->sc_bcl_len == 0)
		return;
	cur_level = acpivout_get_brightness(sc);
	if (cur_level == sc->sc_bcl[sc->sc_bcl_len - 1])
		acpivout_brightness_zero(sc);
	else
		acpivout_brightness_up(sc);
}

void
acpivout_brightness_up(struct acpivout_softc *sc)
{
	int i, cur_level;

	if (sc->sc_bcl_len == 0)
		return;
	cur_level = acpivout_get_brightness(sc);
	if (cur_level == -1)
		return;

	/* check for max brightness level */
	if (cur_level == sc->sc_bcl[sc->sc_bcl_len - 1])
		return;

	for (i = 0; i < sc->sc_bcl_len && cur_level != sc->sc_bcl[i]; i++);
	acpivout_set_brightness(sc, sc->sc_bcl[i + 1]);
}

void
acpivout_brightness_down(struct acpivout_softc *sc)
{
	int i, cur_level;

	if (sc->sc_bcl_len == 0)
		return;
	cur_level = acpivout_get_brightness(sc);
	if (cur_level == -1)
		return;

	/* check for min brightness level */
	if (cur_level == sc->sc_bcl[0])
		return;

	for (i = 0; i < sc->sc_bcl_len && cur_level != sc->sc_bcl[i]; i++);
	acpivout_set_brightness(sc, sc->sc_bcl[i - 1]);
}

void
acpivout_brightness_zero(struct acpivout_softc *sc)
{
	if (sc->sc_bcl_len == 0)
		return;
	acpivout_set_brightness(sc, sc->sc_bcl[0]);
}

int
acpivout_get_brightness(struct acpivout_softc *sc)
{
	struct aml_value res;
	int level;

	aml_evalname(sc->sc_acpi, sc->sc_devnode, "_BQC", 0, NULL, &res);
	level = aml_val2int(&res);
	aml_freevalue(&res);
	DPRINTF(("%s: BQC = %d\n", DEVNAME(sc), level));

	if (level < sc->sc_bcl[0] || level > sc->sc_bcl[sc->sc_bcl_len -1])
		level = -1;

	return (level);
}

int
acpivout_find_brightness(struct acpivout_softc *sc, int level)
{
	int i, mid;

	for (i = 0; i < sc->sc_bcl_len - 1; i++) {
		mid = sc->sc_bcl[i] + (sc->sc_bcl[i + 1] - sc->sc_bcl[i]) / 2;
		if (sc->sc_bcl[i] <= level && level <=  mid)
			return sc->sc_bcl[i];
		if  (mid < level && level <= sc->sc_bcl[i + 1])
			return sc->sc_bcl[i + 1];
	}
	if (level < sc->sc_bcl[0])
		return sc->sc_bcl[0];
	else
		return sc->sc_bcl[i];
}

void
acpivout_set_brightness(struct acpivout_softc *sc, int level)
{
	struct aml_value args, res;

	memset(&args, 0, sizeof(args));
	args.v_integer = level;
	args.type = AML_OBJTYPE_INTEGER;

	DPRINTF(("%s: BCM = %d\n", DEVNAME(sc), level));
	aml_evalname(sc->sc_acpi, sc->sc_devnode, "_BCM", 1, &args, &res);

	aml_freevalue(&res);
}

void
acpivout_get_bcl(struct acpivout_softc *sc)
{
	int	i, j, value;
	struct aml_value res;

	DPRINTF(("Getting _BCL!"));
	aml_evalname(sc->sc_acpi, sc->sc_devnode, "_BCL", 0, NULL, &res);
	if (res.type != AML_OBJTYPE_PACKAGE) {
		sc->sc_bcl_len = 0;
		goto err;
	}
	/*
	 * Per the ACPI spec section B.6.2 the _BCL method returns a package.
	 * The first integer in the package is the brightness level
	 * when the computer has full power, and the second is the
	 * brightness level when the computer is on batteries.
	 * All other levels may be used by OSPM.
	 * So we skip the first two integers in the package.
	 */
	if (res.length <= 2) {
		sc->sc_bcl_len = 0;
		goto err;
	}
	sc->sc_bcl_len = res.length - 2;

	sc->sc_bcl = mallocarray(sc->sc_bcl_len, sizeof(int), M_DEVBUF,
	    M_WAITOK | M_ZERO);

	for (i = 0; i < sc->sc_bcl_len; i++) {
		/* Sort darkest to brightest */
		value = aml_val2int(res.v_package[i + 2]);
		for (j = i; j > 0 && sc->sc_bcl[j - 1] > value; j--)
			sc->sc_bcl[j] = sc->sc_bcl[j - 1];
		 sc->sc_bcl[j] = value;
	}

err:
	aml_freevalue(&res);
}


int
acpivout_get_param(struct wsdisplay_param *dp)
{
	struct acpivout_softc	*sc = NULL;
	int i;

	switch (dp->param) {
	case WSDISPLAYIO_PARAM_BRIGHTNESS:
		for (i = 0; i < acpivout_cd.cd_ndevs; i++) {
			if (acpivout_cd.cd_devs[i] == NULL)
				continue;
			sc = (struct acpivout_softc *)acpivout_cd.cd_devs[i];
			/* Ignore device if not connected. */
			if (sc->sc_bcl_len != 0)
				break;
		}
		if (sc != NULL && sc->sc_bcl_len != 0) {
			dp->min = 0;
			dp->max =  sc->sc_bcl[sc->sc_bcl_len - 1];
			rw_enter_write(&sc->sc_acpi->sc_lck);
			dp->curval = acpivout_get_brightness(sc);
			rw_exit_write(&sc->sc_acpi->sc_lck);
			if (dp->curval != -1)
				return 0;
		}
		return -1;
	default:
		return -1;
	}
}

int
acpivout_set_param(struct wsdisplay_param *dp)
{
	struct acpivout_softc	*sc = NULL;
	int i, exact;

	switch (dp->param) {
	case WSDISPLAYIO_PARAM_BRIGHTNESS:
		for (i = 0; i < acpivout_cd.cd_ndevs; i++) {
			if (acpivout_cd.cd_devs[i] == NULL)
				continue;
			sc = (struct acpivout_softc *)acpivout_cd.cd_devs[i];
			/* Ignore device if not connected. */
			if (sc->sc_bcl_len != 0)
				break;
		}
		if (sc != NULL && sc->sc_bcl_len != 0) {
			rw_enter_write(&sc->sc_acpi->sc_lck);
			exact = acpivout_find_brightness(sc, dp->curval);
			acpivout_set_brightness(sc, exact);
			rw_exit_write(&sc->sc_acpi->sc_lck);
			return 0;
		}
		return -1;
	default:
		return -1;
	}
}
@


1.11
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acpivout.c,v 1.10 2014/12/09 06:58:29 doug Exp $	*/
d95 3
@


1.10
log
@Replace some malloc(n*size,...) calls with mallocarray().

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acpivout.c,v 1.9 2011/05/23 11:58:03 pirofti Exp $	*/
a24 1
#include <dev/acpi/acpireg.h>
@


1.9
log
@Do not check malloc return value against NULL, as M_WAITOK is used.
@
text
@d1 1
a1 1
/*	$OpenBSD: acpivout.c,v 1.8 2011/04/06 21:16:13 martynas Exp $	*/
d286 1
a286 1
	sc->sc_bcl = malloc(sc->sc_bcl_len * sizeof(int), M_DEVBUF,
@


1.8
log
@Don't enumerate _DOD for attaching acpivout(4), since:
- ACPI spec. says _DOD is not required for brightness controls,
- The list returned by _DOD might be wrong,
- It's an unnecessary work to do.
Instead, decision to attach will be based on the actual methods
found, similarly like in the other ACPI drivers.
Tested by several on tech@@.
OK kettenis@@, marco@@, pirofti@@.

pirofti@@ asked me to note here that devices not supporting brightness
controls won't attach from now on.  This shouldn't be a concern for
you, since such devices weren't doing anything at all, anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: acpivout.c,v 1.7 2010/08/08 20:45:18 kettenis Exp $	*/
a287 4
	if (sc->sc_bcl == NULL) {
		sc->sc_bcl_len = 0;
		goto err;
	}
@


1.7
log
@Close race between the acpi thread and wscons ioctls running in process
context.  We might rip this out post-release and replace it with a solution
that serializes things in a more obvious way.

ok deraadt@@, miod@@ and "those crazy texans who ok anything"
@
text
@d1 1
a1 1
/*	$OpenBSD: acpivout.c,v 1.6 2010/07/21 19:35:15 deraadt Exp $	*/
a60 10

	int	sc_dod;
	int	sc_vout_type;
#define ACPIVOUT_OTHER		0
#define ACPIVOUT_VGA		1
#define ACPIVOUT_TV		2
#define ACPIVOUT_DVI		3
#define ACPIVOUT_LCD		4

#define	ACPIVOUT_TYPE_MASK	0x0f00
d90 1
a90 1
	struct acpivideo_attach_args *av = aux;
d93 3
a95 3
	if (av->aaa.aaa_name == NULL ||
	    strcmp(av->aaa.aaa_name, cf->cf_driver->cd_name) != 0 ||
	    av->aaa.aaa_table != NULL)
d105 1
a105 1
	struct acpivideo_attach_args *av = aux;
d108 1
a108 3
	sc->sc_devnode = av->aaa.aaa_node;

	sc->sc_vout_type = (av->dod & ACPIVOUT_TYPE_MASK) >> 8;
d112 1
a112 1
	aml_register_notify(sc->sc_devnode, av->aaa.aaa_dev,
d118 1
a118 3
	if (sc->sc_vout_type == ACPIVOUT_LCD ||
	    sc->sc_vout_type == ACPIVOUT_VGA)
		acpivout_get_bcl(sc);
@


1.6
log
@spacing and indents that are driving me crazy
@
text
@d1 1
a1 1
/*	$OpenBSD: acpivout.c,v 1.5 2009/06/19 06:23:03 kettenis Exp $	*/
d339 1
d341 1
d368 1
d371 1
@


1.5
log
@Always report 0 as the minimal brightness level to wscons.  This results in
more reasonable brightness level reporting.  In particular we won't report 0%
if the lowest level supported by the hardware doesn't completely turn the
backlight off.

ok marco@@, pirofti@@
@
text
@d1 1
a1 1
/*	$OpenBSD: acpivout.c,v 1.4 2009/06/04 17:25:51 pirofti Exp $	*/
d64 1
a64 1
#define ACPIVOUT_OTHER	 	0
d66 1
a66 1
#define ACPIVOUT_TV 		2
@


1.4
log
@Even more KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: acpivout.c,v 1.3 2009/06/04 17:02:36 miod Exp $	*/
d253 4
a256 1
	return sc->sc_bcl[i];
d337 1
a337 1
			dp->min = sc->sc_bcl[0];
@


1.3
log
@KNF dammit
@
text
@d1 1
a1 1
/*	$OpenBSD: acpivout.c,v 1.2 2009/06/03 20:27:38 matthieu Exp $	*/
d330 1
a330 1
			 if (sc->sc_bcl_len != 0)
d359 1
a359 1
			 if (sc->sc_bcl_len != 0)
@


1.2
log
@Make sure that the brightness value sent to acpi is one of the values
in the BCL array.

Also add a missing acpivout_get_brightness() call
in acpivout_brightness_cycle().

ok and suggestions from pirofti@@, ok miod@@ deraadt@@ marco@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: acpivout.c,v 1.1 2009/06/03 00:36:59 pirofti Exp $	*/
d65 1
a65 1
#define ACPIVOUT_VGA		1 
d72 1
d120 1
a120 1
	sc->sc_vout_type = (av->dod&ACPIVOUT_TYPE_MASK)>>8;
d217 2
a218 1
acpivout_brightness_zero(struct acpivout_softc *sc) {
d233 1
d237 1
d247 1
a247 1
		mid = sc->sc_bcl[i] + (sc->sc_bcl[i+1] - sc->sc_bcl[i]) / 2;
d250 2
a251 2
		if  (mid < level && level <= sc->sc_bcl[i+1])
			return sc->sc_bcl[i+1];
d260 1
a260 1
	
d265 1
d267 1
a267 1
	
d298 1
a298 1
	    M_WAITOK|M_ZERO);
d325 8
a332 11
		if (acpivout_cd.cd_ndevs != 0)
			for (i = 0; i < acpivout_cd.cd_ndevs; i++) {
				if (acpivout_cd.cd_devs[i] == NULL)
					continue;
				sc = (struct acpivout_softc *)acpivout_cd.cd_devs[i];
				/* 
				 *	Ignore device if not connected.
				 */
				 if (sc->sc_bcl_len != 0)
					break;
			}
d334 4
a337 3
				dp->min = sc->sc_bcl[0];
				dp->max = sc->sc_bcl[sc->sc_bcl_len - 1];
				dp->curval = acpivout_get_brightness(sc);
d354 8
a361 11
		if (acpivout_cd.cd_ndevs != 0)
			for (i = 0; i < acpivout_cd.cd_ndevs; i++) {
				if (acpivout_cd.cd_devs[i] == NULL)
					continue;
				sc = (struct acpivout_softc *)acpivout_cd.cd_devs[i];
				/* 
				 *	Ignore device if not connected.
				 */
				 if (sc->sc_bcl_len != 0)
					break;
			}
@


1.1
log
@Add acpivideo support. This adds brightness support for all laptops
except thinkpads, they will use the acpithinkpad driver. The driver is
also hooked into wsconsole. So brightness can be adjusted via:

$ wsconsctl display.brightness=<percentage>

This is very helpfull on some laptops that have a nasty bios and get two
steps instead of one when pressing the brightness button.

Tested on various dell, fujitsu, acer, samsung and other laptops.

Okay marco@@, miod@@. Suggestions from kettenis@@.
Lots of reviews and help from miod@@, thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d77 1
d170 1
d237 15
d256 1
a256 1

d333 1
a333 1
				dp->max =  sc->sc_bcl[sc->sc_bcl_len - 1];
d347 1
a347 1
	int i;
d363 2
a364 1
			acpivout_set_brightness(sc, dp->curval);
@

