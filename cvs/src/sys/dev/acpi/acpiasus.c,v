head	1.18;
access;
symbols
	OPENBSD_6_0:1.17.0.12
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.10
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.8
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.8
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.6
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.4
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6;
locks; strict;
comment	@ * @;


1.18
date	2017.02.25.20.09.20;	author jcs;	state Exp;
branches;
next	1.17;
commitid	qLBNvmeyHMMfKdYf;

1.17
date	2014.02.21.18.49.06;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2014.01.30.11.51.51;	author pirofti;	state Exp;
branches;
next	1.15;

1.15
date	2013.12.06.21.03.02;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2013.11.04.11.57.26;	author mpi;	state Exp;
branches;
next	1.13;

1.13
date	2013.06.20.09.52.09;	author mpi;	state Exp;
branches;
next	1.12;

1.12
date	2011.06.06.06.13.46;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2010.08.28.17.59.17;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2010.08.27.04.09.17;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2010.07.06.06.26.25;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2008.11.06.23.41.28;	author marco;	state Exp;
branches;
next	1.7;

1.7
date	2008.10.01.19.13.57;	author robert;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.14.17.17.33;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.11.04.42.09;	author marco;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.01.17.59.55;	author marco;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.16.06.50.55;	author dlg;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.14.05.24.36;	author jordan;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.24.13.57.49;	author jsing;	state Exp;
branches;
next	;


desc
@@


1.18
log
@move vendor HIDs into their drivers, clean up some unused defines

ok kettenis
@
text
@/* $OpenBSD: acpiasus.c,v 1.17 2014/02/21 18:49:06 deraadt Exp $ */
/* $NetBSD: asus_acpi.c,v 1.2.2.2 2008/04/03 12:42:37 mjf Exp $ */
/*
 * Copyright (c) 2007, 2008 Jared D. McNeill <jmcneill@@invisible.ca>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ASUS ACPI hotkeys driver.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/systm.h>

#include <dev/acpi/acpireg.h>
#include <dev/acpi/acpivar.h>
#include <dev/acpi/acpidev.h>
#include <dev/acpi/amltypes.h>
#include <dev/acpi/dsdt.h>

#include "audio.h"
#include "wskbd.h"

struct acpiasus_softc {
	struct device		sc_dev;

	struct acpi_softc	*sc_acpi;
	struct aml_node		*sc_devnode;
};

#define ASUS_NOTIFY_WIRELESSON		0x10
#define ASUS_NOTIFY_WIRELESSOFF		0x11
#define ASUS_NOTIFY_TASKSWITCH		0x12
#define ASUS_NOTIFY_VOLUMEMUTE		0x13
#define ASUS_NOTIFY_VOLUMEDOWN		0x14
#define ASUS_NOTIFY_VOLUMEUP		0x15
#define ASUS_NOTIFY_LCDSWITCHOFF0	0x16
#define ASUS_NOTIFY_LCDSWITCHOFF1	0x1a
#define ASUS_NOTIFY_LCDCHANGERES	0x1b
#define ASUS_NOTIFY_USERDEF0		0x1c
#define ASUS_NOTIFY_USERDEF1		0x1d
#define ASUS_NOTIFY_BRIGHTNESSLOW	0x20
#define ASUS_NOTIFY_BRIGHTNESSHIGH	0x2f
#define ASUS_NOTIFY_DISPLAYCYCLEDOWN	0x30
#define ASUS_NOTIFY_DISPLAYCYCLEUP	0x32

#define ASUS_NOTIFY_POWERCONNECT	0x50
#define ASUS_NOTIFY_POWERDISCONNECT	0x51

#define	ASUS_SDSP_LCD			0x01
#define	ASUS_SDSP_CRT			0x02
#define	ASUS_SDSP_TV			0x04
#define	ASUS_SDSP_DVI			0x08
#define	ASUS_SDSP_ALL \
	(ASUS_SDSP_LCD | ASUS_SDSP_CRT | ASUS_SDSP_TV | ASUS_SDSP_DVI)

int	acpiasus_match(struct device *, void *, void *);
void	acpiasus_attach(struct device *, struct device *, void *);
void	acpiasus_init(struct device *);
int	acpiasus_notify(struct aml_node *, int, void *);
int	acpiasus_activate(struct device *, int);

#if NAUDIO > 0 && NWSKBD > 0
extern int wskbd_set_mixervolume(long, long);
#endif

struct cfattach acpiasus_ca = {
	sizeof(struct acpiasus_softc), acpiasus_match, acpiasus_attach,
	NULL, acpiasus_activate
};

struct cfdriver acpiasus_cd = {
	NULL, "acpiasus", DV_DULL
};

const char *acpiasus_hids[] = {
	"ASUS010",
	0
};

int
acpiasus_match(struct device *parent, void *match, void *aux)
{
	struct acpi_attach_args *aa = aux;
	struct cfdata *cf = match;

	return (acpi_matchhids(aa, acpiasus_hids, cf->cf_driver->cd_name));
}

void
acpiasus_attach(struct device *parent, struct device *self, void *aux)
{
	struct acpiasus_softc *sc = (struct acpiasus_softc *)self;
	struct acpi_attach_args *aa = aux;

	sc->sc_acpi = (struct acpi_softc *)parent;
	sc->sc_devnode = aa->aaa_node;

	printf("\n");

	acpiasus_init(self);

	aml_register_notify(sc->sc_devnode, aa->aaa_dev,
	    acpiasus_notify, sc, ACPIDEV_NOPOLL);
}

void
acpiasus_init(struct device *self)
{
	struct acpiasus_softc *sc = (struct acpiasus_softc *)self;
	struct aml_value cmd;
	struct aml_value ret;

	bzero(&cmd, sizeof(cmd));
	cmd.type = AML_OBJTYPE_INTEGER;
	cmd.v_integer = 0x40;		/* Disable ASL display switching. */

	if (aml_evalname(sc->sc_acpi, sc->sc_devnode, "INIT", 1, &cmd, &ret))
		printf("%s: no INIT\n", DEVNAME(sc));
	else
		aml_freevalue(&ret);
}

int
acpiasus_notify(struct aml_node *node, int notify, void *arg)
{
	struct acpiasus_softc *sc = arg;

	if (notify >= ASUS_NOTIFY_BRIGHTNESSLOW &&
	    notify <= ASUS_NOTIFY_BRIGHTNESSHIGH) {
#ifdef ACPIASUS_DEBUG
		printf("%s: brightness %d percent\n", DEVNAME(sc),
		    (notify & 0xf) * 100 / 0xf);
#endif
		return 0;
	}

	switch (notify) {
	case ASUS_NOTIFY_WIRELESSON:	/* Handled by AML. */
	case ASUS_NOTIFY_WIRELESSOFF:	/* Handled by AML. */
		break;
	case ASUS_NOTIFY_TASKSWITCH:
		break;
	case ASUS_NOTIFY_DISPLAYCYCLEDOWN:
	case ASUS_NOTIFY_DISPLAYCYCLEUP:
		break;
#if NAUDIO > 0 && NWSKBD > 0
	case ASUS_NOTIFY_VOLUMEMUTE:
		wskbd_set_mixervolume(0, 1);
		break;
	case ASUS_NOTIFY_VOLUMEDOWN:
		wskbd_set_mixervolume(-1, 1);
		break;
	case ASUS_NOTIFY_VOLUMEUP:
		wskbd_set_mixervolume(1, 1);
		break;
#else
	case ASUS_NOTIFY_VOLUMEMUTE:
	case ASUS_NOTIFY_VOLUMEDOWN:
	case ASUS_NOTIFY_VOLUMEUP:
		break;
#endif
	case ASUS_NOTIFY_POWERCONNECT:
	case ASUS_NOTIFY_POWERDISCONNECT:
		break;

	case ASUS_NOTIFY_LCDSWITCHOFF0:
	case ASUS_NOTIFY_LCDSWITCHOFF1:
		break;

	case ASUS_NOTIFY_LCDCHANGERES:
		break;

	case ASUS_NOTIFY_USERDEF0:
	case ASUS_NOTIFY_USERDEF1:
		break;

	default:
		printf("%s: unknown event 0x%02x\n", DEVNAME(sc), notify);
		break;
	}

	return 0;
}

int
acpiasus_activate(struct device *self, int act)
{
	struct acpiasus_softc *sc = (struct acpiasus_softc *)self;
	struct aml_value cmd;
	struct aml_value ret;

	switch (act) {
	case DVACT_WAKEUP:
		acpiasus_init(self);

		bzero(&cmd, sizeof(cmd));
		cmd.type = AML_OBJTYPE_INTEGER;
		cmd.v_integer = ASUS_SDSP_LCD;

		if (aml_evalname(sc->sc_acpi, sc->sc_devnode, "SDSP", 1,
		    &cmd, &ret))
			printf("%s: no SDSP\n", DEVNAME(sc));
		else
			aml_freevalue(&ret);
		break;
	}
	return (0);
}
@


1.17
log
@these two drivers should be doing their repair at DVACT_WAKEUP time
rather than DVACT_RESUME
in snapshots for a long time, looked at by pirofti kettenis mlarkin
@
text
@d1 1
a1 1
/* $OpenBSD: acpiasus.c,v 1.16 2014/01/30 11:51:51 pirofti Exp $ */
d98 4
a101 1
const char *acpiasus_hids[] = { ACPI_DEV_ASUS, 0 };
@


1.16
log
@The activate function was registered as a detach function.
Put the activate function in the proper place in cfattach.

Tested by jasper@@ on eeepc-900
Okay kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: acpiasus.c,v 1.15 2013/12/06 21:03:02 deraadt Exp $ */
d213 1
a213 1
	case DVACT_RESUME:
@


1.15
log
@Add a DVACT_WAKEUP op to the *_activate() API.  This is called after the
kernel resumes normal (non-cold, able to run processes, etc) operation.
Previously we were relying on specific DVACT_RESUME op's in drivers
creating callback/threads themselves, but that has become too common,
indicating the need for a built-in mechanism.
ok dlg kettenis, tested by a sufficient amount of people
@
text
@d1 1
a1 1
/* $OpenBSD: acpiasus.c,v 1.14 2013/11/04 11:57:26 mpi Exp $ */
d91 1
a91 1
	acpiasus_activate
@


1.14
log
@Convert wskbd_set_mixervolume() to use a task internally instead of
being called in a workq.

ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: acpiasus.c,v 1.13 2013/06/20 09:52:09 mpi Exp $ */
a212 2
	case DVACT_SUSPEND:
		break;
@


1.13
log
@Drop 3rd and 4th clauses from the BSD licence, from the following NetBSD's
revision:
  sys/dev/acpi/asus_acpi.c		r1.4
  sys/dev/cardbus/cardbus_exrom.c	r1.11
  sys/dev/cardbus/cardbus_exrom.h	r1.6

ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: acpiasus.c,v 1.12 2011/06/06 06:13:46 deraadt Exp $ */
a35 1
#include <sys/workq.h>
d86 1
a86 1
extern int wskbd_set_mixervolume(long dir, int out);
d168 1
a168 2
		workq_add_task(NULL, 0, (workq_fn)wskbd_set_mixervolume,
		    (void *)(long)0, (void *)(int)1);
d171 1
a171 2
		workq_add_task(NULL, 0, (workq_fn)wskbd_set_mixervolume,
		    (void *)(long)-1, (void *)(int)1);
d174 1
a174 2
		workq_add_task(NULL, 0, (workq_fn)wskbd_set_mixervolume,
		    (void *)(long)1, (void *)(int)1);
@


1.12
log
@Microphone mute button support from acpithinkpad (or elsewhere).
The audio side is a bit lacking; it does not yet mute all types of
devices.
from Alexander Polakov
ok jakemsr
@
text
@d1 1
a1 1
/* $OpenBSD: acpiasus.c,v 1.11 2010/08/28 17:59:17 deraadt Exp $ */
a14 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by Jared D. McNeill.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.11
log
@powerhooks in acpi drivers?  oh boy.  change this into a (not yet called)
activate function
ok kettenis
@
text
@d1 1
a1 1
/* $OpenBSD: acpiasus.c,v 1.10 2010/08/27 04:09:17 deraadt Exp $ */
d93 1
a93 1
extern int wskbd_set_mixervolume(long dir);
d176 1
a176 1
		    (void *)(long)0, NULL);
d180 1
a180 1
		    (void *)(long)-1, NULL);
d184 1
a184 1
		    (void *)(long)1, NULL);
@


1.10
log
@kill PWR_STANDBY (apm can use PWR_SUSPEND instead).  While here, renumber
PWR_{SUSPEND,RESUME} so that they match the values of DAVCT_{SUSPEND,RESUME}
so that we can eventually (many more steps...) kill the powerhook garbage
and use the activate mechanism.
no objections
@
text
@d1 1
a1 1
/* $OpenBSD: acpiasus.c,v 1.9 2010/07/06 06:26:25 deraadt Exp $ */
a57 2

	void			*sc_powerhook;
d90 1
a90 1
void	acpiasus_power(int, void *);
d97 2
a98 1
	sizeof(struct acpiasus_softc), acpiasus_match, acpiasus_attach
a124 2
	sc->sc_powerhook = powerhook_establish(acpiasus_power, sc);

d215 2
a216 2
void
acpiasus_power(int why, void *arg)
d218 1
a218 1
	struct acpiasus_softc *sc = (struct acpiasus_softc *)arg;
d222 2
a223 2
	switch (why) {
	case PWR_SUSPEND:
d225 2
a226 2
	case PWR_RESUME:
		acpiasus_init(arg);
d239 1
@


1.9
log
@spacing
@
text
@d1 1
a1 1
/* $OpenBSD: acpiasus.c,v 1.8 2008/11/06 23:41:28 marco Exp $ */
a225 1
	case PWR_STANDBY:
@


1.8
log
@Collapse all sanity checks of hids into one function.

Originaly from jordan
@
text
@d1 1
a1 1
/* $OpenBSD: acpiasus.c,v 1.7 2008/10/01 19:13:57 robert Exp $ */
d59 1
a59 1
	void 			*sc_powerhook;
a240 1

@


1.7
log
@The display cycle key generates two ACPI events, so catch both
from jsign@@

Change the camel capitalized key defines to full capitals,
and add some keys found on the eeepc 1000H

ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: acpiasus.c,v 1.6 2008/06/14 17:17:33 jsing Exp $ */
d106 2
d114 1
a114 6
	if (aa->aaa_name == NULL ||
	    strcmp(aa->aaa_name, cf->cf_driver->cd_name) != 0 ||
	    aa->aaa_table != NULL)
		return 0;

	return 1;
@


1.6
log
@Teach acpiasus(4) about some more events. Whilst we're here bzero the cmd
structs and sprinkle some aml_freevalue() (diff initially from deanna@@).

ok marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: acpiasus.c,v 1.5 2008/06/11 04:42:09 marco Exp $ */
d62 15
a76 9
#define ASUS_NOTIFY_WirelessSwitchOn	0x10
#define ASUS_NOTIFY_WirelessSwitchOff	0x11
#define ASUS_NOTIFY_BrightnessLow	0x20
#define ASUS_NOTIFY_BrightnessHigh	0x2f
#define ASUS_NOTIFY_DisplayCycle	0x30
#define ASUS_NOTIFY_TaskSwitch		0x12
#define ASUS_NOTIFY_VolumeMute		0x13
#define ASUS_NOTIFY_VolumeDown		0x14
#define ASUS_NOTIFY_VolumeUp		0x15
d78 2
a79 2
#define ASUS_NOTIFY_PowerConnect	0x50
#define ASUS_NOTIFY_PowerDisconnect	0x51
d161 3
a163 3
	if (notify >= ASUS_NOTIFY_BrightnessLow &&
	    notify <= ASUS_NOTIFY_BrightnessHigh) {
#if ACPIASUS_DEBUG
d171 2
a172 2
	case ASUS_NOTIFY_WirelessSwitchOn:	/* Handled by AML. */
	case ASUS_NOTIFY_WirelessSwitchOff:	/* Handled by AML. */
d174 1
a174 1
	case ASUS_NOTIFY_TaskSwitch:
d176 2
a177 1
	case ASUS_NOTIFY_DisplayCycle:
d180 1
a180 1
	case ASUS_NOTIFY_VolumeMute:
d184 1
a184 1
	case ASUS_NOTIFY_VolumeDown:
d188 1
a188 1
	case ASUS_NOTIFY_VolumeUp:
d193 3
a195 3
	case ASUS_NOTIFY_VolumeMute:
	case ASUS_NOTIFY_VolumeDown:
	case ASUS_NOTIFY_VolumeUp:
d198 13
a210 2
	case ASUS_NOTIFY_PowerConnect:
	case ASUS_NOTIFY_PowerDisconnect:
@


1.5
log
@Fix $OpenBSD$ for once and for all
@
text
@d1 1
a1 1
/* $OpenBSD: acpiasus.c,v 1.4 2008/06/01 17:59:55 marco Exp $ */
d62 2
a63 1
#define ASUS_NOTIFY_WirelessSwitch	0x10
d72 3
d140 1
d146 2
d165 2
a166 1
	case ASUS_NOTIFY_WirelessSwitch:	/* Handled by AML. */
d191 4
d217 1
d224 3
@


1.4
log
@Re-enable new parser.  Lots of testing by various folks.  Fits all media
now too.

ok kettenis deraadt
@
text
@d1 1
a1 1
/* $OpenBSD: acpiasus.c,v 1.2 2008/05/14 05:24:36 jordan Exp $ */
d3 1
a3 2

/*-
@


1.3
log
@back out jordans new parser.

it didnt have enough oks from the right people, it did break machines
that were previously working, and it bloated the RAMDISKS and install
media beyond the constraints of the media.

requested by deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: acpiasus.c,v 1.1 2008/04/24 13:57:49 jsing Exp $ */
d118 1
a118 1
	sc->sc_devnode = aa->aaa_node->child;
d126 1
a126 1
	aml_register_notify(sc->sc_devnode->parent, aa->aaa_dev,
@


1.2
log
@Adding new ACPI Parser code
Old guts of code still exists, needs to be torn out next
ok marco@@
ok brad@@
@
text
@d118 1
a118 1
	sc->sc_devnode = aa->aaa_node;
d126 1
a126 1
	aml_register_notify(sc->sc_devnode, aa->aaa_dev,
@


1.1
log
@Introduce acpiasus(4), a driver for the ACPI based hotkeys found in many
ASUS laptops (including the ASUS EeePC) - largely based on NetBSD's
asus(4) driver. On the ASUS EeePC this allows us to enable/disable
wireless, change screen brightness and use the volume keys.

ok jsg@@, weingart@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d118 1
a118 1
	sc->sc_devnode = aa->aaa_node->child;
d126 1
a126 1
	aml_register_notify(sc->sc_devnode->parent, aa->aaa_dev,
@

