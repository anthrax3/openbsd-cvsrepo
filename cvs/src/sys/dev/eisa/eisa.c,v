head	1.13;
access;
symbols
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.34
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.30
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.20
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.28
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.26
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.24
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.22
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.18
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.16
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.14
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.12
	OPENBSD_5_0:1.13.0.10
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.8
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.6
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.4
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.12.0.8
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.6
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.4
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.11.0.16
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.14
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.12
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.10
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.8.0.6
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.4
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	SMP:1.6.0.14
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.12
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.10
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.8
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.13
date	2009.03.29.21.53.52;	author sthen;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.25.14.13.40;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.27.11.22.52;	author ho;	state Exp;
branches;
next	1.10;

1.10
date	2003.03.29.00.17.44;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.53;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.26.22.23.03;	author mickey;	state Exp;
branches
	1.8.6.1;
next	1.7;

1.7
date	2000.04.14.03.29.01;	author smurph;	state Exp;
branches;
next	1.6;

1.6
date	96.11.28.23.27.38;	author niklas;	state Exp;
branches
	1.6.14.1;
next	1.5;

1.5
date	96.11.23.21.46.31;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.11.12.20.30.09;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.05.05.12.42.23;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.22.20.23;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.04.18.23.47.10;	author niklas;	state Exp;
branches;
next	;

1.6.14.1
date	2001.05.14.22.23.15;	author niklas;	state Exp;
branches;
next	1.6.14.2;

1.6.14.2
date	2002.03.28.12.29.45;	author niklas;	state Exp;
branches;
next	1.6.14.3;

1.6.14.3
date	2003.05.13.19.34.57;	author ho;	state Exp;
branches;
next	;

1.8.6.1
date	2002.06.11.03.42.16;	author art;	state Exp;
branches;
next	1.8.6.2;

1.8.6.2
date	2003.05.19.22.01.43;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.13
log
@make various strings ("can't map mem space" and similar) more consistent
between instances, saving space in the kernel. feedback from many (some
incorporated, some left for future work).

ok deraadt, kettenis, "why not" miod.
@
text
@/*	$OpenBSD: eisa.c,v 1.12 2007/06/25 14:13:40 tom Exp $	*/
/*	$NetBSD: eisa.c,v 1.15 1996/10/21 22:31:01 thorpej Exp $	*/

/*
 * Copyright (c) 1995, 1996 Christopher G. Demetriou
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou
 *      for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * EISA Bus device
 *
 * Makes sure an EISA bus is present, and finds and attaches devices
 * living on it.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/bus.h>

#include <dev/eisa/eisareg.h>
#include <dev/eisa/eisavar.h>
#include <dev/eisa/eisadevs.h>

int	eisamatch(struct device *, void *, void *);
void	eisaattach(struct device *, struct device *, void *);

struct cfattach eisa_ca = {
	sizeof(struct device), eisamatch, eisaattach
};

struct cfdriver eisa_cd = {
	NULL, "eisa", DV_DULL
};

int	eisasubmatch(struct device *, void *, void *);
int	eisaprint(void *, const char *);
void	eisa_devinfo(const char *, char *, size_t);

int
eisamatch(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct cfdata *cf = match;
	struct eisabus_attach_args *eba = aux;

	if (strcmp(eba->eba_busname, cf->cf_driver->cd_name))
		return (0);

	/* XXX check other indicators */

	return (1);
}

int
eisaprint(aux, pnp)
	void *aux;
	const char *pnp;
{
	register struct eisa_attach_args *ea = aux;
	char devinfo[256]; 

	if (pnp) {
		eisa_devinfo(ea->ea_idstring, devinfo, sizeof devinfo);
		printf("%s at %s", devinfo, pnp);
	}
	printf(" slot %d", ea->ea_slot);
	return (UNCONF);
}

int
eisasubmatch(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct cfdata *cf = match;
	struct eisa_attach_args *ea = aux;

	if (cf->eisacf_slot != EISA_UNKNOWN_SLOT &&
	    cf->eisacf_slot != ea->ea_slot)
		return 0;
	return ((*cf->cf_attach->ca_match)(parent, match, aux));
}

void
eisaattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct eisabus_attach_args *eba = aux;
	bus_space_tag_t iot, memt;
	eisa_chipset_tag_t ec;
	int slot, maxnslots;

	eisa_attach_hook(parent, self, eba);
	printf("\n");

	iot = eba->eba_iot;
	memt = eba->eba_memt;
	ec = eba->eba_ec;

	/*
	 * Search for and attach subdevices.
	 *
	 * Slot 0 is the "motherboard" slot, and the code attaching
	 * the EISA bus should have already attached an ISA bus there.
	 */
	maxnslots = eisa_maxslots(ec);
	for (slot = 1; slot < maxnslots; slot++) {
		struct eisa_attach_args ea;
		u_int slotaddr;
		bus_space_handle_t slotioh;
		int i;

		ea.ea_dmat = eba->eba_dmat;
		ea.ea_iot = iot;
		ea.ea_memt = memt;
		ea.ea_ec = ec;
		ea.ea_slot = slot;
		slotaddr = EISA_SLOT_ADDR(slot);

		/*
		 * Get a mapping for the whole slot-specific address
		 * space.  If we can't, assume nothing's there but warn
		 * about it.
		 */
		if (bus_space_map(iot, slotaddr, EISA_SLOT_SIZE, 0, &slotioh)) {
			printf("%s: can't map i/o space for slot %d\n",
			    self->dv_xname, slot);
			continue;
		}

		/* Get the vendor ID bytes */
		for (i = 0; i < EISA_NVIDREGS; i++) {
#ifdef EISA_SLOTOFF_PRIMING
			bus_space_write_1(iot, slotioh,
			    EISA_SLOTOFF_PRIMING, EISA_PRIMING_VID(i));
#endif
			ea.ea_vid[i] = bus_space_read_1(iot, slotioh,
			    EISA_SLOTOFF_VID + i);
		}

		/* Check for device existence */
		if (EISA_VENDID_NODEV(ea.ea_vid)) {
#if 0
			printf("no device at %s slot %d\n", self->dv_xname,
			    slot);
			printf("\t(0x%x, 0x%x)\n", ea.ea_vid[0],
			    ea.ea_vid[1]);
#endif
			bus_space_unmap(iot, slotioh, EISA_SLOT_SIZE);
			continue;
		}

		/* And check that the firmware didn't biff something badly */
		if (EISA_VENDID_IDDELAY(ea.ea_vid)) {
			printf("%s slot %d not configured by BIOS?\n",
			    self->dv_xname, slot);
			bus_space_unmap(iot, slotioh, EISA_SLOT_SIZE);
			continue;
		}

		/* Get the product ID bytes */
		for (i = 0; i < EISA_NPIDREGS; i++) {
#ifdef EISA_SLOTOFF_PRIMING
			bus_space_write_1(iot, slotioh,
			    EISA_SLOTOFF_PRIMING, EISA_PRIMING_PID(i));
#endif
			ea.ea_pid[i] = bus_space_read_1(iot, slotioh,
			    EISA_SLOTOFF_PID + i);
		}

		/* Create the ID string from the vendor and product IDs */
		ea.ea_idstring[0] = EISA_VENDID_0(ea.ea_vid);
		ea.ea_idstring[1] = EISA_VENDID_1(ea.ea_vid);
		ea.ea_idstring[2] = EISA_VENDID_2(ea.ea_vid);
		ea.ea_idstring[3] = EISA_PRODID_0(ea.ea_pid);
		ea.ea_idstring[4] = EISA_PRODID_1(ea.ea_pid);
		ea.ea_idstring[5] = EISA_PRODID_2(ea.ea_pid);
		ea.ea_idstring[6] = EISA_PRODID_3(ea.ea_pid);
		ea.ea_idstring[7] = '\0';		/* sanity */

		/* We no longer need the I/O handle; free it. */
		bus_space_unmap(iot, slotioh, EISA_SLOT_SIZE);

		/* Attach matching device. */
		config_found_sm(self, &ea, eisaprint, eisasubmatch);
	}
}

#ifdef EISAVERBOSE
/*
 * Descriptions of known vendors and devices ("products").
 */
struct eisa_knowndev {
	int	flags;
	char	id[8];
	const char *name;
};
#define EISA_KNOWNDEV_NOPROD	0x01		/* match on vendor only */

#include <dev/eisa/eisadevs_data.h>
#endif /* EISAVERBOSE */

void
eisa_devinfo(const char *id, char *cp, size_t cp_len)
{
	const char *name;
	int onlyvendor;
#ifdef EISAVERBOSE
	const struct eisa_knowndev *edp;
	int match;
	const char *unmatched = "unknown ";
#else
	const char *unmatched = "";
#endif

	onlyvendor = 0;
	name = NULL;

#ifdef EISAVERBOSE
	/* find the device in the table, if possible. */
	edp = eisa_knowndevs;
	while (edp->name != NULL) {
		/* check this entry for a match */
		if ((edp->flags & EISA_KNOWNDEV_NOPROD) != 0)
			match = !strncmp(edp->id, id, 3);
		else
			match = !strcmp(edp->id, id);
		if (match) {
			name = edp->name;
			onlyvendor = (edp->flags & EISA_KNOWNDEV_NOPROD) != 0;
			break;
		}
		edp++;
	}
#endif

	if (name == NULL)
		snprintf(cp, cp_len, "%sdevice %s", unmatched, id);
	else if (onlyvendor)			/* never if not EISAVERBOSE */
		snprintf(cp, cp_len, "unknown %s device %s", name, id);
	else
		snprintf(cp, cp_len, "%s", name);
}
@


1.12
log
@Fix a couple of "of of"s in comments.
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa.c,v 1.11 2003/04/27 11:22:52 ho Exp $	*/
d156 1
a156 1
			printf("%s: can't map I/O space for slot %d\n",
@


1.11
log
@strcpy/sprintf cleanup of sys/dev. miod@@, deraadt@@ says to commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa.c,v 1.10 2003/03/29 00:17:44 mickey Exp $	*/
d221 1
a221 1
 * Descriptions of of known vendors and devices ("products").
@


1.10
log
@device/vendor id is always < 7 chars. store it in the array and save on the extra pointer average of 50% space savings. regen the eisadevs
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa.c,v 1.9 2002/03/14 01:26:53 millert Exp $	*/
d65 1
a65 1
void	eisa_devinfo(const char *, char *);
d92 1
a92 1
		eisa_devinfo(ea->ea_idstring, devinfo);
d234 1
a234 3
eisa_devinfo(id, cp)
	const char *id;
	char *cp;
d268 1
a268 1
		cp += sprintf(cp, "%sdevice %s", unmatched, id);
d270 1
a270 1
		cp += sprintf(cp, "unknown %s device %s", name, id);
d272 1
a272 1
		cp += sprintf(cp, "%s", name);
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa.c,v 1.8 2001/01/26 22:23:03 mickey Exp $	*/
d225 2
a226 1
	const char *id, *name;
d254 1
a254 1
	while (edp->id != NULL) {
@


1.8
log
@constify eisa_knowndevs
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa.c,v 1.7 2000/04/14 03:29:01 smurph Exp $	*/
d52 2
a53 2
int	eisamatch __P((struct device *, void *, void *));
void	eisaattach __P((struct device *, struct device *, void *));
d63 3
a65 3
int	eisasubmatch __P((struct device *, void *, void *));
int	eisaprint __P((void *, const char *));
void	eisa_devinfo __P((const char *, char *));
@


1.8.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa.c,v 1.8 2001/01/26 22:23:03 mickey Exp $	*/
d52 2
a53 2
int	eisamatch(struct device *, void *, void *);
void	eisaattach(struct device *, struct device *, void *);
d63 3
a65 3
int	eisasubmatch(struct device *, void *, void *);
int	eisaprint(void *, const char *);
void	eisa_devinfo(const char *, char *);
@


1.8.6.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d65 1
a65 1
void	eisa_devinfo(const char *, char *, size_t);
d92 1
a92 1
		eisa_devinfo(ea->ea_idstring, devinfo, sizeof devinfo);
d225 1
a225 2
	char	id[8];
	const char *name;
d233 3
a235 1
eisa_devinfo(const char *id, char *cp, size_t cp_len)
d253 1
a253 1
	while (edp->name != NULL) {
d269 1
a269 1
		snprintf(cp, cp_len, "%sdevice %s", unmatched, id);
d271 1
a271 1
		snprintf(cp, cp_len, "unknown %s device %s", name, id);
d273 1
a273 1
		snprintf(cp, cp_len, "%s", name);
@


1.7
log
@This fixes EISA bus_space API.  The bus dma tag was never initialized!!!
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa.c,v 1.6 1996/11/28 23:27:38 niklas Exp $	*/
d240 1
a240 1
	struct eisa_knowndev *edp;
@


1.6
log
@Adaption to new bus.h from NetBSD.  Various driver has been updated to
NetBSD 961107 state.  Other has not, partly because sometimes the bus.h
changes was coupled with other changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa.c,v 1.5 1996/11/23 21:46:31 kstailey Exp $	*/
d143 1
@


1.6.14.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa.c,v 1.8 2001/01/26 22:23:03 mickey Exp $	*/
a142 1
		ea.ea_dmat = eba->eba_dmat;
d239 1
a239 1
	const struct eisa_knowndev *edp;
@


1.6.14.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 2
a53 2
int	eisamatch(struct device *, void *, void *);
void	eisaattach(struct device *, struct device *, void *);
d63 3
a65 3
int	eisasubmatch(struct device *, void *, void *);
int	eisaprint(void *, const char *);
void	eisa_devinfo(const char *, char *);
@


1.6.14.3
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa.c,v 1.6.14.2 2002/03/28 12:29:45 niklas Exp $	*/
d65 1
a65 1
void	eisa_devinfo(const char *, char *, size_t);
d92 1
a92 1
		eisa_devinfo(ea->ea_idstring, devinfo, sizeof devinfo);
d225 1
a225 2
	char	id[8];
	const char *name;
d233 3
a235 1
eisa_devinfo(const char *id, char *cp, size_t cp_len)
d253 1
a253 1
	while (edp->name != NULL) {
d269 1
a269 1
		snprintf(cp, cp_len, "%sdevice %s", unmatched, id);
d271 1
a271 1
		snprintf(cp, cp_len, "unknown %s device %s", name, id);
d273 1
a273 1
		snprintf(cp, cp_len, "%s", name);
@


1.5
log
@added const to second parameter of cfprint_t routines
@
text
@d1 2
a2 2
/*	$OpenBSD: eisa.c,v 1.4 1996/11/12 20:30:09 niklas Exp $	*/
/*	$NetBSD: eisa.c,v 1.11 1996/04/09 22:46:11 cgd Exp $	*/
d46 1
a46 1
#include <machine/bus.old.h>
d119 1
a119 1
	bus_chipset_tag_t bc;
d126 2
a127 1
	bc = eba->eba_bc;
d140 1
a140 1
		bus_io_handle_t slotioh;
d143 2
a144 1
		ea.ea_bc = bc;
d154 1
a154 1
		if (bus_io_map(bc, slotaddr, EISA_SLOT_SIZE, &slotioh)) {
d163 1
a163 1
			bus_io_write_1(bc, slotioh,
d166 1
a166 1
			ea.ea_vid[i] = bus_io_read_1(bc, slotioh,
d178 1
a178 1
			bus_io_unmap(bc, slotioh, EISA_SLOT_SIZE);
d186 1
a186 1
			bus_io_unmap(bc, slotioh, EISA_SLOT_SIZE);
d193 1
a193 1
			bus_io_write_1(bc, slotioh,
d196 1
a196 1
			ea.ea_pid[i] = bus_io_read_1(bc, slotioh,
d211 1
a211 1
		bus_io_unmap(bc, slotioh, EISA_SLOT_SIZE);
@


1.4
log
@s/bus.h/bus.old.h/ to make the transit to the bus_space bus.h an easy road
possibly taken in small steps
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa.c,v 1.3 1996/05/05 12:42:23 deraadt Exp $	*/
d64 1
a64 1
int	eisaprint __P((void *, char *));
d86 1
a86 1
	char *pnp;
@


1.3
log
@ahc/ahe driver update from freebsd; merged by soda@@sra.co.jp and
pete@@demon.net
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa.c,v 1.2 1996/04/21 22:20:23 deraadt Exp $	*/
d46 1
a46 1
#include <machine/bus.h>
@


1.2
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: eisa.c,v 1.1 1996/04/18 23:47:10 niklas Exp $	*/
d159 5
a163 1
		for (i = 0; i < EISA_NVIDREGS; i++)
d166 1
d189 5
a193 1
		for (i = 0; i < EISA_NPIDREGS; i++)
d196 1
@


1.1
log
@NetBSD 960317 merge
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: eisa.c,v 1.7 1996/03/14 04:02:58 cgd Exp $	*/
d55 6
a60 2
struct cfdriver eisacd = {
        NULL, "eisa", eisamatch, eisaattach, DV_DULL, sizeof(struct device)
d69 2
a70 2
        struct device *parent;
        void *match, *aux;
d80 1
a80 1
        return (1);
d110 1
a110 1
	return ((*cf->cf_driver->cd_match)(parent, match, aux));
d115 2
a116 2
        struct device *parent, *self;
        void *aux;
d120 2
a121 1
	int slot;
d123 1
d127 1
d135 2
a136 1
	for (slot = 1; slot < EISA_MAX_SLOT; slot++) {
a137 1
		struct cfdata *cf;
d143 1
d153 2
a154 1
			printf("%s: can't map I/O space for slot %d\n", slot);
d207 1
a207 1
/*      
d209 1
a209 1
 */     
d213 2
a214 2
};      
#define EISA_KNOWNDEV_NOPROD     0x01            /* match on vendor only */
@
