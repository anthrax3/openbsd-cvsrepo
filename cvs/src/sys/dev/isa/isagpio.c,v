head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.30
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.20
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.28
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.26
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.24
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.22
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.18
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.16
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.14
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.12
	OPENBSD_5_0:1.4.0.10
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.8
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.12
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.10
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.8
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2009.03.29.21.53.52;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.01.08.32.52;	author grange;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.27.07.16.04;	author grange;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.26.20.19.53;	author grange;	state Exp;
branches;
next	;


desc
@@


1.4
log
@make various strings ("can't map mem space" and similar) more consistent
between instances, saving space in the kernel. feedback from many (some
incorporated, some left for future work).

ok deraadt, kettenis, "why not" miod.
@
text
@/*	$OpenBSD: isagpio.c,v 1.3 2006/04/01 08:32:52 grange Exp $	*/

/*
 * Copyright (c) 2006 Oleg Safiullin <form@@pdp-11.org.ru>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice unmodified, this list of conditions, and the following
 *    disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/gpio.h>

#include <machine/bus.h>
#include <machine/intr.h>

#include <dev/isa/isavar.h>

#include <dev/gpio/gpiovar.h>

#define ISAGPIO_IOSIZE		1
#define ISAGPIO_NPINS		8

struct isagpio_softc {
	struct device		sc_dev;

	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;

	struct gpio_chipset_tag	sc_gpio_gc;
	struct gpio_pin		sc_gpio_pins[ISAGPIO_NPINS];
	u_int8_t		sc_gpio_mask;
};

int	isagpio_match(struct device *, void *, void *);
void	isagpio_attach(struct device *, struct device *, void *);
int	isagpio_pin_read(void *, int);
void	isagpio_pin_write(void *, int, int);
void	isagpio_pin_ctl(void *, int, int);

struct cfattach isagpio_ca = {
	sizeof(struct isagpio_softc), isagpio_match, isagpio_attach
};

struct cfdriver isagpio_cd = {
	NULL, "isagpio", DV_DULL
};

int
isagpio_match(struct device *parent, void *match, void *aux)
{
	struct isa_attach_args *ia = aux;
	bus_space_handle_t ioh;

	if (ia->ia_iobase == -1 || bus_space_map(ia->ia_iot, ia->ia_iobase,
	    ISAGPIO_IOSIZE, 0, &ioh) != 0)
		return (0);

	bus_space_unmap(ia->ia_iot, ioh, ISAGPIO_IOSIZE);
	ia->ia_iosize = ISAGPIO_IOSIZE;
	ia->ipa_nio = 1;
	ia->ipa_nmem = 0;
	ia->ipa_nirq = 0;
	ia->ipa_ndrq = 0;

	return (1);
}

void
isagpio_attach(struct device *parent, struct device *self, void *aux)
{
	struct isagpio_softc *sc = (void *)self;
	struct isa_attach_args *ia = aux;
	struct gpiobus_attach_args gba;
	int i;

	if (bus_space_map(ia->ia_iot, ia->ia_iobase, ia->ia_iosize, 0,
	    &sc->sc_ioh) != 0) {
		printf(": can't map i/o space\n");
		return;
	}

	printf("\n");

	sc->sc_iot = ia->ia_iot;
	sc->sc_gpio_mask = 0;

	for (i = 0; i < ISAGPIO_NPINS; i++) {
		sc->sc_gpio_pins[i].pin_num = i;
		sc->sc_gpio_pins[i].pin_caps = GPIO_PIN_INPUT | GPIO_PIN_OUTPUT;
		sc->sc_gpio_pins[i].pin_state = GPIO_PIN_LOW;
	}

	sc->sc_gpio_gc.gp_cookie = sc;
	sc->sc_gpio_gc.gp_pin_read = isagpio_pin_read;
	sc->sc_gpio_gc.gp_pin_write = isagpio_pin_write;
	sc->sc_gpio_gc.gp_pin_ctl = isagpio_pin_ctl;

	gba.gba_name = "gpio";
	gba.gba_gc = &sc->sc_gpio_gc;
	gba.gba_pins = sc->sc_gpio_pins;
	gba.gba_npins = ISAGPIO_NPINS;

	(void)config_found(&sc->sc_dev, &gba, gpiobus_print);
}

int
isagpio_pin_read(void *arg, int pin)
{
	struct isagpio_softc *sc = arg;
	u_int8_t mask;

	mask = bus_space_read_1(sc->sc_iot, sc->sc_ioh, 0);
	return ((mask >> pin) & 0x01);
}

void
isagpio_pin_write(void *arg, int pin, int value)
{
	struct isagpio_softc *sc = arg;

	if (value == GPIO_PIN_LOW)
		sc->sc_gpio_mask &= ~(0x01 << pin);
	else if (value == GPIO_PIN_HIGH)
		sc->sc_gpio_mask |= 0x01 << pin;
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, 0, sc->sc_gpio_mask);
}

void
isagpio_pin_ctl(void *arg, int pin, int flags)
{
}
@


1.3
log
@Small fixes from form@@:
- don't allow wildcard port locator
- use GPIO_PIN_LOW instead of 0
@
text
@d1 1
a1 1
/*	$OpenBSD: isagpio.c,v 1.2 2006/03/27 07:16:04 grange Exp $	*/
d101 1
a101 1
		printf(": couldn't map I/O space\n");
@


1.2
log
@Some minor nits from form@@, no functional changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: isagpio.c,v 1.1 2006/03/26 20:19:53 grange Exp $	*/
d77 2
a78 1
	if (bus_space_map(ia->ia_iot, ia->ia_iobase, ISAGPIO_IOSIZE, 0, &ioh))
d113 1
a113 1
		sc->sc_gpio_pins[i].pin_state = 0;
@


1.1
log
@Support for accesing 8-bit ISA I/O throught the gpio(4)
framework. Allows to use stupid GPIO device on the
Acrosser AR-B1662 board.

Work by form@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a95 1
	u_int16_t mask;
d109 1
a109 1
	for (i = 0, mask = 0x01; i < ISAGPIO_NPINS; mask <<= 1, i++) {
d135 1
a135 1
	return ((mask >> pin) & 0x0001);
@

