head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.22
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.12
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.20
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.18
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.16
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.14
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.58
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.56
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.52
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.54
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.50
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.48
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.46
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.44
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.42
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.40
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.38
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.36
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.34
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.32
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.30
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.28
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.26
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.24
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.22
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.20
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.18
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.16
	OPENBSD_2_8:1.4.0.14
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.12
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.10
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.8
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.6
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.4
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2011.06.29.12.17.40;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	97.11.07.08.07.11;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.11.09.08.40.54;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.10.25.08.04.22;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.04.21.22.24.47;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@notyet, notever.  delete a bunch of code we won't be using.
@
text
@/*	$OpenBSD: wdsreg.h,v 1.4 1997/11/07 08:07:11 niklas Exp $	*/

typedef u_int8_t physaddr[3];
typedef u_int8_t physlen[3];
#define	ltophys	_lto3b
#define	phystol	_3btol

/* WD7000 registers */
#define WDS_STAT		0	/* read */
#define WDS_IRQSTAT		1	/* read */

#define WDS_CMD			0	/* write */
#define WDS_IRQACK		1	/* write */
#define WDS_HCR			2	/* write */

#define	WDS_IO_PORTS		8	/* size in I/O-space */

/* WDS_STAT (read) defs */
#define WDSS_IRQ		0x80
#define WDSS_RDY		0x40
#define WDSS_REJ		0x20
#define WDSS_INIT		0x10

/* WDS_IRQSTAT (read) defs */
#define WDSI_MASK		0xc0
#define WDSI_ERR		0x00
#define WDSI_MFREE		0x80
#define WDSI_MSVC		0xc0

/* WDS_CMD (write) defs */
#define WDSC_NOOP		0x00
#define WDSC_INIT		0x01
#define WDSC_DISUNSOL		0x02
#define WDSC_ENAUNSOL		0x03
#define WDSC_IRQMFREE		0x04
#define WDSC_SCSIRESETSOFT	0x05
#define WDSC_SCSIRESETHARD	0x06
#define WDSC_MSTART(m)		(0x80 + (m))
#define WDSC_MMSTART(m)		(0xc0 + (m))

/* WDS_HCR (write) defs */
#define WDSH_IRQEN		0x08
#define WDSH_DRQEN		0x04
#define WDSH_SCSIRESET		0x02
#define WDSH_ASCRESET		0x01

#define WDS_NSEG	17

struct wds_scat_gath {
	physlen seg_len;
	physaddr seg_addr;
};

struct wds_cmd {
	u_int8_t opcode;
	u_int8_t targ;
	struct scsi_generic scb;
	u_int8_t stat;
	u_int8_t venderr;
	physlen len;
	physaddr data;
	physaddr link;
	u_int8_t write;
	u_int8_t xx[6];
};

struct wds_scb {
	struct wds_cmd cmd;
	struct wds_cmd sense;

	struct wds_scat_gath scat_gath[WDS_NSEG];
	struct scsi_sense_data sense_data;
	/*----------------------------------------------------------------*/
#define SCB_PHYS_SIZE ((int)&((struct wds_scb *)0)->chain)

	TAILQ_ENTRY(wds_scb) chain;
	struct wds_scb *nexthash;
	long hashkey;
	struct scsi_xfer *xs;
	int flags;
#define	SCB_ALLOC	0x01
#define	SCB_ABORT	0x02
#ifdef WDSDIAG
#define	SCB_SENDING	0x04
#endif
#define	SCB_POLLED	0x08
#define	SCB_SENSE	0x10
#define	SCB_DONE	0x20	/* for internal commands only */
#define	SCB_BUFFER	0x40
	int timeout;

	struct wds_buf *buf;
};

#define WDSX_SCSICMD		0x00
#define WDSX_SCSISG		0x01
#define WDSX_OPEN_RCVBUF	0x80
#define WDSX_RCV_CMD		0x81
#define WDSX_RCV_DATA		0x82
#define WDSX_RCV_DATASTAT	0x83
#define WDSX_SND_DATA		0x84
#define WDSX_SND_DATASTAT	0x85
#define WDSX_SND_CMDSTAT	0x86
#define WDSX_READINIT		0x88
#define WDSX_READSCSIID		0x89
#define WDSX_SETUNSOLIRQMASK	0x8a
#define WDSX_GETUNSOLIRQMASK	0x8b
#define WDSX_GETFIRMREV		0x8c
#define WDSX_EXECDIAG		0x8d
#define WDSX_SETEXECPARM	0x8e
#define WDSX_GETEXECPARM	0x8f

struct wds_mbx_out {
	u_int8_t cmd;
	physaddr scb_addr;
};

struct wds_mbx_in {
	u_int8_t stat;
	physaddr scb_addr;
};

/*
 * mbo.cmd values
 */
#define	WDS_MBO_FREE		0x0	/* MBO entry is free */
#define	WDS_MBO_START		0x1	/* MBO activate entry */

/*
 * mbi.stat values
 */
#define	WDS_MBI_FREE		0x00	/* MBI entry is free */
#define WDS_MBI_OK		0x01	/* completed without error */
#define WDS_MBI_OKERR		0x02	/* completed with error */
#define WDS_MBI_ETIME		0x04
#define WDS_MBI_ERESET		0x05
#define WDS_MBI_ETARCMD		0x06
#define WDS_MBI_ERESEL		0x80
#define WDS_MBI_ESEL		0x81
#define WDS_MBI_EABORT		0x82
#define WDS_MBI_ESRESET		0x83
#define WDS_MBI_EHRESET		0x84

struct wds_setup {
	u_int8_t opcode;
	u_int8_t scsi_id;
	u_int8_t buson_t;
	u_int8_t busoff_t;
	u_int8_t xx;
	physaddr mbaddr;
	u_int8_t nomb;
	u_int8_t nimb;
};
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a91 5
#ifdef notyet
	struct isadma_seg scb_phys[1];	/* phys segment of this scb */
	struct isadma_seg data_phys[WDS_NSEG];	/* phys segments of data */
	int data_nseg;			/* number of phys segments of data */
#endif
@


1.3
log
@Altered wds_wait's interface as the current one didn't have a chance to work
in early probe code under the bus.h system.  Make debugging runtime
configurable.  Some s/u_char/u_int8_t/ work.  Set ia_iosize to a sane value.
Move wds_init up before the setting of the DMA machinery to cascade mode (from
Charles Hannum).  Add ISA bounce-buffering code inside #ifdef notyet.  In the
-ASC case buffers could never be gotten due to forgetting some braces, added
them.  Removed a possibility of a NULL deref in some diagnostic printouts.
Unmap the I/O area after the probe.  Cache the bustag and the iohandle in
wds_init.  Did set WDS_IO_PORTS to 8 as some code indicated it might take up
that much even though I only know of three ports in there..  This might be
changed down later again.
@
text
@d1 2
@


1.2
log
@Busified
@
text
@d1 2
a2 2
typedef u_char physaddr[3];
typedef u_char physlen[3];
d14 1
a14 1
#define	WDS_IO_PORTS		3	/* size in I/O-space */
d53 2
a54 2
	u_char opcode;
	u_char targ;
d56 2
a57 2
	u_char stat;
	u_char venderr;
d61 2
a62 2
	u_char write;
	u_char xx[6];
d71 2
d90 5
d117 1
a117 1
	u_char cmd;
d122 1
a122 1
	u_char stat;
d148 5
a152 5
	u_char opcode;
	u_char scsi_id;
	u_char buson_t;
	u_char busoff_t;
	u_char xx;
d154 2
a155 2
	u_char nomb;
	u_char nimb;
@


1.1
log
@partial sync with netbsd 960418, more to come
@
text
@d14 2
@
