head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.60
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.58
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.48
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.56
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.54
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.52
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.50
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.46
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.44
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.42
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.40
	OPENBSD_5_0:1.9.0.38
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.36
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.34
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.30
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.32
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.28
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.26
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.24
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.22
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.20
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.18
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.16
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.14
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.12
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.10
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.8
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.6
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.9
	UBC:1.6.0.4
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.2
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2002.09.15.21.30.25;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.14.15.00.03;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.56;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.20.04.41.39;	author smart;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2001.08.19.19.58.56;	author smart;	state Exp;
branches;
next	1.4;

1.4
date	99.11.30.23.48.07;	author aaron;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	96.11.29.22.54.53;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.11.12.20.30.28;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.07.27.07.20.05;	author deraadt;	state Exp;
branches;
next	;

1.4.2.1
date	2001.10.31.03.22.43;	author nate;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2002.03.28.12.11.35;	author niklas;	state Exp;
branches;
next	1.4.2.3;

1.4.2.3
date	2003.03.28.00.38.15;	author niklas;	state Exp;
branches;
next	;

1.6.4.1
date	2002.06.11.03.42.21;	author art;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2002.10.29.00.33.26;	author art;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Add a license from the author Timo Rossi <trossi@@co.jyu.fi>
@
text
@/*	$OpenBSD: cy_isa.c,v 1.8 2002/09/14 15:00:03 art Exp $	*/
/*
 * Copyright (c) 1996 Timo Rossi.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * cy_isa.c
 *
 * Driver for Cyclades Cyclom-8/16/32 multiport serial cards
 * (currently not tested with Cyclom-32 cards)
 *
 * Timo Rossi, 1996
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/bus.h>

#include <dev/isa/isavar.h>
#include <dev/isa/isareg.h>

#include <dev/ic/cd1400reg.h>
#include <dev/ic/cyreg.h>

static int cy_isa_probe(struct device *, void *, void *);
void cy_isa_attach(struct device *, struct device *, void *);

struct cfattach cy_isa_ca = {
	sizeof(struct cy_softc), cy_isa_probe, cy_isa_attach
};

int
cy_isa_probe(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	int card = ((struct device *)match)->dv_unit;
	struct isa_attach_args *ia = aux;
	bus_space_tag_t memt;
	bus_space_handle_t memh;
	int ret;

	if (ia->ia_irq == IRQUNK) {
		printf("cy%d error: interrupt not defined\n", card);
		return (0);
	}

	memt = ia->ia_memt;
	if (bus_space_map(memt, ia->ia_maddr, 0x2000, 0, &memh) != 0)
		return (0);

	ret = cy_probe_common(memt, memh, CY_BUSTYPE_ISA);
	bus_space_unmap(memt, memh, 0x2000);
	if (ret == 0)
		return (0);

	ia->ia_iosize = 0;
	ia->ia_msize = 0x2000;
	return (1);
}

void
cy_isa_attach(parent, self, aux)
        struct device *parent, *self;
        void *aux;
{
	struct cy_softc *sc = (struct cy_softc *)self;
	struct isa_attach_args *ia = aux;

	sc->sc_bustype = CY_BUSTYPE_ISA;
	sc->sc_memt = ia->ia_memt;

	if (bus_space_map(ia->ia_memt, ia->ia_maddr, 0x2000, 0,
	    &sc->sc_memh) != 0)
		return;

	sc->sc_nr_cd1400s = cy_probe_common(sc->sc_memt, sc->sc_memh,
	    CY_BUSTYPE_ISA);

	cy_attach(parent, self);

	sc->sc_ih = isa_intr_establish(ia->ia_ic, ia->ia_irq,
	    IST_EDGE, IPL_TTY, cy_intr, sc, sc->sc_dev.dv_xname);

	if (sc->sc_ih == NULL)
		panic("cy: couldn't establish interrupt");
}
@


1.8
log
@Various fixes and cleanups in the cy driver.
Finally my "Cyclades Cyclom-8Y" works correctly.

Cleanups:
 - no more stupid arrays, we have softc structs, use them.
 - no more global poll timeout that walks an array, timeouts are now cheap,
   one poll per softc.
 - sc_dev.dv_xname is the correct thing to print in diagnostic printfs.
 - don't have bus-specific code in the generic attach for @@#%$! sake, it
   took 20 seconds to fix (I suspect that the workaround took much more
   time to write).
 - spltty, not splhigh.
 - use pci_mapreg_map, not pci_{io,mem}_find + bus_space_map.
 - use defines, not magic constants in a few places.
 - KNF in a few places (much more work needed).
Now the interesting parts:
 - when handling the interrupt, don't just ignore it when the tty is not
   open. Read and discard the data. If we don't read it, the card will
   interrupt again and again and again and ... (inspired by NetBSD).
 - actually enable interrupts on PLX9050
 - From FreeBSD: "Work around a PLX9050 bug that causes system lockup in
   certain systems"

deraadt@@ ok
@
text
@d1 29
a29 1
/*	$OpenBSD: cy_isa.c,v 1.7 2002/03/14 01:26:56 millert Exp $	*/
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: cy_isa.c,v 1.6 2001/08/20 04:41:39 smart Exp $	*/
d40 1
d51 3
a53 2
	if (cy_probe_common(card, memt, memh, CY_BUSTYPE_ISA) == 0) {
		bus_space_unmap(memt, memh, 0x2000);
a54 1
	}
d66 20
a85 1
	cy_attach(parent, self, aux);
@


1.6
log
@Allow driver to recognize Cyclades 4Y and 8Y cards.

Not finished yet, but cleaned up and moved around code for
better organization.  Inspired by NetBSD and other PCI drivers.

From my dmesg:
     cy1 at pci0 dev 10 function 0 "Cyclades Cyclom-8Y" rev 0x01
@
text
@d1 1
a1 1
/*	$OpenBSD: cy_isa.c,v 1.5 2001/08/19 19:58:56 smart Exp $	*/
d24 2
a25 2
static int cy_isa_probe __P((struct device *, void *, void *));
void cy_isa_attach __P((struct device *, struct device *, void *));
@


1.6.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cy_isa.c,v 1.6 2001/08/20 04:41:39 smart Exp $	*/
d24 2
a25 2
static int cy_isa_probe(struct device *, void *, void *);
void cy_isa_attach(struct device *, struct device *, void *);
@


1.6.4.2
log
@sync to -current
@
text
@d1 1
a1 29
/*	$OpenBSD$	*/
/*
 * Copyright (c) 1996 Timo Rossi.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
a39 1
	int ret;
d50 2
a51 3
	ret = cy_probe_common(memt, memh, CY_BUSTYPE_ISA);
	bus_space_unmap(memt, memh, 0x2000);
	if (ret == 0)
d53 1
d65 1
a65 20
	struct cy_softc *sc = (struct cy_softc *)self;
	struct isa_attach_args *ia = aux;

	sc->sc_bustype = CY_BUSTYPE_ISA;
	sc->sc_memt = ia->ia_memt;

	if (bus_space_map(ia->ia_memt, ia->ia_maddr, 0x2000, 0,
	    &sc->sc_memh) != 0)
		return;

	sc->sc_nr_cd1400s = cy_probe_common(sc->sc_memt, sc->sc_memh,
	    CY_BUSTYPE_ISA);

	cy_attach(parent, self);

	sc->sc_ih = isa_intr_establish(ia->ia_ic, ia->ia_irq,
	    IST_EDGE, IPL_TTY, cy_intr, sc, sc->sc_dev.dv_xname);

	if (sc->sc_ih == NULL)
		panic("cy: couldn't establish interrupt");
@


1.5
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: cy_isa.c,v 1.4 1999/11/30 23:48:07 aaron Exp $	*/
d4 1
a4 1
 * cy.c
a9 15
 *
 * Supports both ISA and PCI Cyclom cards
 *
 * Uses CD1400 automatic CTS flow control, and
 * if CY_HW_RTS is defined, uses CD1400 automatic input flow control.
 * This requires a special cable that exchanges the RTS and DTR lines.
 *
 * Lots of debug output can be enabled by defining CY_DEBUG
 * Some debugging counters (number of receive/transmit interrupts etc.)
 * can be enabled by defining CY_DEBUG1
 *
 * This version uses the bus_mem/io_??() stuff
 *
 * NOT TESTED !!!
 *
a11 1
#include <sys/types.h>
d13 1
a13 8
#include <sys/ioctl.h>
#include <sys/syslog.h>
#include <sys/fcntl.h>
#include <sys/tty.h>
#include <sys/proc.h>
#include <sys/conf.h>
#include <sys/user.h>
#include <sys/select.h>
d15 1
a15 2
#include <sys/malloc.h>
#include <sys/systm.h>
d17 1
d24 2
a25 5
int cy_probe_isa __P((struct device *, void *, void *));
int cy_probe_common __P((int card, bus_space_tag_t,
			 bus_space_handle_t, int bustype));

void cyattach __P((struct device *, struct device *, void *));
d28 1
a28 1
	sizeof(struct cy_softc), cy_probe_isa, cyattach
a30 3
/*
 * ISA probe
 */
d32 1
a32 1
cy_probe_isa(parent, match, aux)
d58 8
@


1.4
log
@Remove duplicate #include's.
@
text
@d1 1
a1 1
/*	$OpenBSD: cy_isa.c,v 1.3 1996/11/29 22:54:53 niklas Exp $	*/
d54 1
a54 1
  sizeof(struct cy_softc), cy_probe_isa, cyattach
d62 2
a63 2
     struct device *parent;
     void *match, *aux;
d65 22
a86 22
  int card = ((struct device *)match)->dv_unit;
  struct isa_attach_args *ia = aux;
  bus_space_tag_t memt;
  bus_space_handle_t memh;

  if(ia->ia_irq == IRQUNK) {
    printf("cy%d error: interrupt not defined\n", card);
    return 0;
  }

  memt = ia->ia_memt;
  if(bus_space_map(memt, ia->ia_maddr, 0x2000, 0, &memh) != 0)
    return 0;

  if(cy_probe_common(card, memt, memh, CY_BUSTYPE_ISA) == 0) {
    bus_space_unmap(memt, memh, 0x2000);
    return 0;
  }

  ia->ia_iosize = 0;
  ia->ia_msize = 0x2000;
  return 1;
@


1.4.2.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: cy_isa.c,v 1.4 1999/11/30 23:48:07 aaron Exp $	*/
d4 1
a4 1
 * cy_isa.c
d10 15
d27 1
d29 10
a39 2
#include <sys/device.h>

a40 1

d47 5
a51 2
static int cy_isa_probe __P((struct device *, void *, void *));
void cy_isa_attach __P((struct device *, struct device *, void *));
d54 1
a54 1
	sizeof(struct cy_softc), cy_isa_probe, cy_isa_attach
d57 3
d61 3
a63 32
cy_isa_probe(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	int card = ((struct device *)match)->dv_unit;
	struct isa_attach_args *ia = aux;
	bus_space_tag_t memt;
	bus_space_handle_t memh;

	if (ia->ia_irq == IRQUNK) {
		printf("cy%d error: interrupt not defined\n", card);
		return (0);
	}

	memt = ia->ia_memt;
	if (bus_space_map(memt, ia->ia_maddr, 0x2000, 0, &memh) != 0)
		return (0);

	if (cy_probe_common(card, memt, memh, CY_BUSTYPE_ISA) == 0) {
		bus_space_unmap(memt, memh, 0x2000);
		return (0);
	}

	ia->ia_iosize = 0;
	ia->ia_msize = 0x2000;
	return (1);
}

void
cy_isa_attach(parent, self, aux)
        struct device *parent, *self;
        void *aux;
d65 22
a86 1
	cy_attach(parent, self, aux);
@


1.4.2.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d24 2
a25 2
static int cy_isa_probe(struct device *, void *, void *);
void cy_isa_attach(struct device *, struct device *, void *);
@


1.4.2.3
log
@Sync the SMP branch with 3.3
@
text
@a1 28
/*
 * Copyright (c) 1996 Timo Rossi.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
a39 1
	int ret;
d50 2
a51 3
	ret = cy_probe_common(memt, memh, CY_BUSTYPE_ISA);
	bus_space_unmap(memt, memh, 0x2000);
	if (ret == 0)
d53 1
d65 1
a65 20
	struct cy_softc *sc = (struct cy_softc *)self;
	struct isa_attach_args *ia = aux;

	sc->sc_bustype = CY_BUSTYPE_ISA;
	sc->sc_memt = ia->ia_memt;

	if (bus_space_map(ia->ia_memt, ia->ia_maddr, 0x2000, 0,
	    &sc->sc_memh) != 0)
		return;

	sc->sc_nr_cd1400s = cy_probe_common(sc->sc_memt, sc->sc_memh,
	    CY_BUSTYPE_ISA);

	cy_attach(parent, self);

	sc->sc_ih = isa_intr_establish(ia->ia_ic, ia->ia_irq,
	    IST_EDGE, IPL_TTY, cy_intr, sc, sc->sc_dev.dv_xname);

	if (sc->sc_ih == NULL)
		panic("cy: couldn't establish interrupt");
@


1.3
log
@Missing pieces of new bus.h that CVS lost behind my back
@
text
@d1 1
a1 1
/*	$OpenBSD: cy_isa.c,v 1.2 1996/11/12 20:30:28 niklas Exp $	*/
a35 1
#include <sys/ioctl.h>
@


1.2
log
@s/bus.h/bus.old.h/ to make the transit to the bus_space bus.h an easy road
possibly taken in small steps
@
text
@d1 1
a1 1
/*	$OpenBSD: cy_isa.c,v 1.1 1996/07/27 07:20:05 deraadt Exp $	*/
d41 1
a41 1
#include <machine/bus.old.h>
d49 2
a50 2
int cy_probe_common __P((int card, bus_chipset_tag_t,
			 bus_mem_handle_t, int bustype));
d68 2
a69 2
  bus_chipset_tag_t bc;
  bus_mem_handle_t memh;
d76 2
a77 2
  bc = ia->ia_bc;
  if(bus_mem_map(bc, ia->ia_maddr, 0x2000, 0, &memh) != 0)
d80 2
a81 2
  if(cy_probe_common(card, bc, memh, CY_BUSTYPE_ISA) == 0) {
    bus_mem_unmap(bc, memh, 0x2000);
@


1.1
log
@split cy driver up
@
text
@d1 1
a1 1
/*	$OpenBSD: cy.c,v 1.4 1996/06/23 13:11:05 deraadt Exp $	*/
d41 1
a41 1
#include <machine/bus.h>
@
