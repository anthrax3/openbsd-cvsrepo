head	1.19;
access;
symbols
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.64
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.60
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.50
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.58
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.56
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.54
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.52
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.48
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.46
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.44
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.42
	OPENBSD_5_0:1.19.0.40
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.38
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.36
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.32
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.34
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.30
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.28
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.19.0.26
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.24
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.19.0.22
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.20
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.18
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.19.0.16
	OPENBSD_3_8_BASE:1.19
	OPENBSD_3_7:1.19.0.14
	OPENBSD_3_7_BASE:1.19
	OPENBSD_3_6:1.19.0.12
	OPENBSD_3_6_BASE:1.19
	SMP_SYNC_A:1.19
	SMP_SYNC_B:1.19
	OPENBSD_3_5:1.19.0.10
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.19.0.8
	OPENBSD_3_4_BASE:1.19
	UBC_SYNC_A:1.19
	OPENBSD_3_3:1.19.0.6
	OPENBSD_3_3_BASE:1.19
	OPENBSD_3_2:1.19.0.4
	OPENBSD_3_2_BASE:1.19
	OPENBSD_3_1:1.19.0.2
	OPENBSD_3_1_BASE:1.19
	UBC_SYNC_B:1.19
	UBC:1.18.0.16
	UBC_BASE:1.18
	OPENBSD_3_0:1.18.0.14
	OPENBSD_3_0_BASE:1.18
	OPENBSD_2_9_BASE:1.18
	OPENBSD_2_9:1.18.0.12
	OPENBSD_2_8:1.18.0.10
	OPENBSD_2_8_BASE:1.18
	OPENBSD_2_7:1.18.0.8
	OPENBSD_2_7_BASE:1.18
	SMP:1.18.0.6
	SMP_BASE:1.18
	kame_19991208:1.18
	OPENBSD_2_6:1.18.0.4
	OPENBSD_2_6_BASE:1.18
	OPENBSD_2_5:1.18.0.2
	OPENBSD_2_5_BASE:1.18
	OPENBSD_2_4:1.17.0.6
	OPENBSD_2_4_BASE:1.17
	OPENBSD_2_3:1.17.0.4
	OPENBSD_2_3_BASE:1.17
	OPENBSD_2_2:1.17.0.2
	OPENBSD_2_2_BASE:1.17
	OPENBSD_2_1:1.16.0.2
	OPENBSD_2_1_BASE:1.16
	OPENBSD_2_0:1.10.0.2
	OPENBSD_2_0_BASE:1.10
	netbsd:1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2002.03.14.01.26.56;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	99.01.11.01.57.52;	author millert;	state Exp;
branches
	1.18.6.1
	1.18.16.1;
next	1.17;

1.17
date	97.07.07.16.38.22;	author niklas;	state Exp;
branches;
next	1.16;

1.16
date	97.01.29.06.23.31;	author downsj;	state Exp;
branches;
next	1.15;

1.15
date	96.12.03.07.48.24;	author niklas;	state Exp;
branches;
next	1.14;

1.14
date	96.11.29.22.55.07;	author niklas;	state Exp;
branches;
next	1.13;

1.13
date	96.11.23.21.46.45;	author kstailey;	state Exp;
branches;
next	1.12;

1.12
date	96.11.12.20.30.42;	author niklas;	state Exp;
branches;
next	1.11;

1.11
date	96.10.17.19.04.02;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	96.05.26.00.27.27;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	96.05.10.12.35.41;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	96.04.21.22.24.28;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	96.04.18.23.47.45;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.03.20.01.01.01;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	96.03.19.21.10.30;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.03.08.16.43.12;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.02.20.04.36.05;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.12.27.22.06.34;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.37;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.37;	author deraadt;	state Exp;
branches;
next	;

1.18.6.1
date	2002.03.28.12.11.35;	author niklas;	state Exp;
branches;
next	;

1.18.16.1
date	2002.06.11.03.42.22;	author art;	state Exp;
branches;
next	;


desc
@@


1.19
log
@First round of __P removal in sys
@
text
@/*	$OpenBSD: rtfps.c,v 1.18 1999/01/11 01:57:52 millert Exp $       */
/*	$NetBSD: rtfps.c,v 1.27 1996/10/21 22:41:18 thorpej Exp $	*/

/*
 * Copyright (c) 1996 Christopher G. Demetriou.  All rights reserved.
 * Copyright (c) 1995 Charles Hannum.  All rights reserved.
 *
 * This code is derived from public-domain software written by
 * Roland McGrath.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Charles Hannum.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/termios.h>

#include <machine/bus.h>
#include <machine/intr.h>

#include <dev/isa/isavar.h>
#include <dev/ic/comreg.h>
#include <dev/ic/comvar.h>

#define	NSLAVES	4

struct rtfps_softc {
	struct device sc_dev;
	void *sc_ih;

	bus_space_tag_t sc_iot;
	int sc_iobase;
	int sc_irqport;
	bus_space_handle_t sc_irqioh;

	int sc_alive;			/* mask of slave units attached */
	void *sc_slaves[NSLAVES];	/* com device unit numbers */
	bus_space_handle_t sc_slaveioh[NSLAVES];
};

int rtfpsprobe(struct device *, void *, void *);
void rtfpsattach(struct device *, struct device *, void *);
int rtfpsintr(void *);
int rtfpsprint(void *, const char *);

struct cfattach rtfps_ca = {
	sizeof(struct rtfps_softc), rtfpsprobe, rtfpsattach
};

struct cfdriver rtfps_cd = {
	NULL, "rtfps", DV_TTY
};

int
rtfpsprobe(parent, self, aux)
	struct device *parent;
	void *self;
	void *aux;
{
	struct isa_attach_args *ia = aux;
	int iobase = ia->ia_iobase;
	bus_space_tag_t iot = ia->ia_iot;
	bus_space_handle_t ioh;
	int i, rv = 1;

	/*
	 * Do the normal com probe for the first UART and assume
	 * its presence, and the ability to map the other UARTS,
	 * means there is a multiport board there.
	 * XXX Needs more robustness.
	 */

	/* if the first port is in use as console, then it. */
	if (iobase == comconsaddr && !comconsattached)
		goto checkmappings;

	if (bus_space_map(iot, iobase, COM_NPORTS, 0, &ioh)) {
		rv = 0;
		goto out;
	}
	rv = comprobe1(iot, ioh);
	bus_space_unmap(iot, ioh, COM_NPORTS);
	if (rv == 0)
		goto out;

checkmappings:
	for (i = 1; i < NSLAVES; i++) {
		iobase += COM_NPORTS;

		if (iobase == comconsaddr && !comconsattached)
			continue;

		if (bus_space_map(iot, iobase, COM_NPORTS, 0, &ioh)) {
			rv = 0;
			goto out;
		}
		bus_space_unmap(iot, ioh, COM_NPORTS);
	}

out:
	if (rv)
		ia->ia_iosize = NSLAVES * COM_NPORTS;
	return (rv);
}

int
rtfpsprint(aux, pnp)
	void *aux;
	const char *pnp;
{
	struct commulti_attach_args *ca = aux;

	if (pnp)
		printf("com at %s", pnp);
	printf(" slave %d", ca->ca_slave);
	return (UNCONF);
}

void
rtfpsattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct rtfps_softc *sc = (void *)self;
	struct isa_attach_args *ia = aux;
	struct commulti_attach_args ca;
	static int irqport[] = {
		IOBASEUNK, IOBASEUNK, IOBASEUNK, IOBASEUNK,
		IOBASEUNK, IOBASEUNK, IOBASEUNK, IOBASEUNK,
		IOBASEUNK,     0x2f2,     0x6f2,     0x6f3,
		IOBASEUNK, IOBASEUNK, IOBASEUNK, IOBASEUNK
	};
	bus_space_tag_t iot = ia->ia_iot;
	int i;

	sc->sc_iot = ia->ia_iot;
	sc->sc_iobase = ia->ia_iobase;

	if (ia->ia_irq >= 16 || irqport[ia->ia_irq] == IOBASEUNK)
		panic("rtfpsattach: invalid irq");
	sc->sc_irqport = irqport[ia->ia_irq];

	for (i = 0; i < NSLAVES; i++)
		if (bus_space_map(iot, sc->sc_iobase + i * COM_NPORTS,
		    COM_NPORTS, 0, &sc->sc_slaveioh[i]))
			panic("rtfpsattach: couldn't map slave %d", i);
	if (bus_space_map(iot, sc->sc_irqport, 1, 0, &sc->sc_irqioh))
		panic("rtfpsattach: couldn't map irq port at 0x%x",
		    sc->sc_irqport);

	bus_space_write_1(iot, sc->sc_irqioh, 0, 0);

	printf("\n");

	for (i = 0; i < NSLAVES; i++) {
		ca.ca_slave = i;
		ca.ca_iot = sc->sc_iot;
		ca.ca_ioh = sc->sc_slaveioh[i];
		ca.ca_iobase = sc->sc_iobase + i * COM_NPORTS;
		ca.ca_noien = 0;

		sc->sc_slaves[i] = config_found(self, &ca, rtfpsprint);
		if (sc->sc_slaves[i] != NULL)
			sc->sc_alive |= 1 << i;
	}

	sc->sc_ih = isa_intr_establish(ia->ia_ic, ia->ia_irq, IST_EDGE,
	    IPL_TTY, rtfpsintr, sc, sc->sc_dev.dv_xname);
}

int
rtfpsintr(arg)
	void *arg;
{
	struct rtfps_softc *sc = arg;
	bus_space_tag_t iot = sc->sc_iot;
	int alive = sc->sc_alive;

	bus_space_write_1(iot, sc->sc_irqioh, 0, 0);

#define	TRY(n) \
	if (alive & (1 << (n))) \
		comintr(sc->sc_slaves[n]);
	TRY(0);
	TRY(1);
	TRY(2);
	TRY(3);
#undef TRY

	return (1);
}
@


1.18
log
@panic prints a newline for you, don't do it in the panic string
@
text
@d1 1
a1 1
/*	$OpenBSD: rtfps.c,v 1.17 1997/07/07 16:38:22 niklas Exp $       */
d65 4
a68 4
int rtfpsprobe __P((struct device *, void *, void *));
void rtfpsattach __P((struct device *, struct device *, void *));
int rtfpsintr __P((void *));
int rtfpsprint __P((void *, const char *));
@


1.18.16.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rtfps.c,v 1.18 1999/01/11 01:57:52 millert Exp $       */
d65 4
a68 4
int rtfpsprobe(struct device *, void *, void *);
void rtfpsattach(struct device *, struct device *, void *);
int rtfpsintr(void *);
int rtfpsprint(void *, const char *);
@


1.18.6.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$       */
d65 4
a68 4
int rtfpsprobe(struct device *, void *, void *);
void rtfpsattach(struct device *, struct device *, void *);
int rtfpsintr(void *);
int rtfpsprint(void *, const char *);
@


1.17
log
@Removed the unused arg of comprobe1
@
text
@d1 1
a1 1
/*	$OpenBSD: rtfps.c,v 1.16 1997/01/29 06:23:31 downsj Exp $       */
d172 1
a172 1
		panic("rtfpsattach: couldn't map irq port at 0x%x\n",
@


1.16
log
@Match com changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtfps.c,v 1.15 1996/12/03 07:48:24 niklas Exp $       */
d105 1
a105 1
	rv = comprobe1(iot, ioh, iobase);
@


1.15
log
@DOH, com moved to ic
@
text
@d1 1
a1 1
/*	$OpenBSD: rtfps.c,v 1.14 1996/11/29 22:55:07 niklas Exp $       */
a55 1
	isa_chipset_tag_t sc_ic;
a160 1
	sc->sc_ic = ia->ia_ic;
a181 1
		ca.ca_ic = sc->sc_ic;
@


1.14
log
@Missing pieces of new bus.h that CVS lost behind my back
@
text
@d1 1
a1 1
/*	$OpenBSD: rtfps.c,v 1.13 1996/11/23 21:46:45 kstailey Exp $       */
d46 2
a47 2
#include <dev/isa/comreg.h>
#include <dev/isa/comvar.h>
@


1.13
log
@added const to second parameter of cfprint_t routines
@
text
@d1 2
a2 2
/*	$OpenBSD: rtfps.c,v 1.12 1996/11/12 20:30:42 niklas Exp $       */
/*	$NetBSD: rtfps.c,v 1.23 1996/05/12 23:53:29 mycroft Exp $	*/
d42 1
a42 1
#include <machine/bus.old.h>
d55 2
a56 1
	bus_chipset_tag_t sc_bc;
d59 1
a59 1
	bus_io_handle_t sc_irqioh;
d63 1
a63 1
	bus_io_handle_t sc_slaveioh[NSLAVES];
d87 2
a88 2
	bus_chipset_tag_t bc = ia->ia_bc;
	bus_io_handle_t ioh;
d102 1
a102 1
	if (bus_io_map(bc, iobase, COM_NPORTS, &ioh)) {
d106 2
a107 2
	rv = comprobe1(bc, ioh, iobase);
	bus_io_unmap(bc, ioh, COM_NPORTS);
d118 1
a118 1
		if (bus_io_map(bc, iobase, COM_NPORTS, &ioh)) {
d122 1
a122 1
		bus_io_unmap(bc, ioh, COM_NPORTS);
d158 1
a158 1
	bus_chipset_tag_t bc = ia->ia_bc;
d161 2
a162 1
	sc->sc_bc = ia->ia_bc;
d170 2
a171 2
		if (bus_io_map(bc, sc->sc_iobase + i * COM_NPORTS, COM_NPORTS,
		    &sc->sc_slaveioh[i]))
d173 1
a173 1
	if (bus_io_map(bc, sc->sc_irqport, 1, &sc->sc_irqioh))
d177 1
a177 1
	bus_io_write_1(bc, sc->sc_irqioh, 0, 0);
d183 2
a184 1
		ca.ca_bc = sc->sc_bc;
d203 1
a203 1
	bus_chipset_tag_t bc = sc->sc_bc;
d206 1
a206 1
	bus_io_write_1(bc, sc->sc_irqioh, 0, 0);
@


1.12
log
@s/bus.h/bus.old.h/ to make the transit to the bus_space bus.h an easy road
possibly taken in small steps
@
text
@d1 1
a1 1
/*	$OpenBSD: rtfps.c,v 1.11 1996/10/17 19:04:02 niklas Exp $       */
d68 1
a68 1
int rtfpsprint __P((void *, char *));
d133 1
a133 1
	char *pnp;
@


1.11
log
@REmove unused variable
@
text
@d1 1
a1 1
/*	$OpenBSD: rtfps.c,v 1.10 1996/05/26 00:27:27 deraadt Exp $       */
d42 1
a42 1
#include <machine/bus.h>
@


1.10
log
@sync 0521
@
text
@d1 1
a1 1
/*	$OpenBSD: rtfps.c,v 1.9 1996/05/10 12:35:41 deraadt Exp $       */
a150 1
	struct isa_attach_args isa;
@


1.9
log
@proto updates
@
text
@d1 2
a2 2
/*	$OpenBSD: rtfps.c,v 1.7 1996/04/18 23:47:45 niklas Exp $       */
/*	$NetBSD: rtfps.c,v 1.22 1996/05/05 19:49:51 christos Exp $	*/
d42 1
a42 3
#ifdef i386							/* XXX */
#include <machine/cpu.h>					/* XXX */
#else								/* XXX */
a43 2
#endif								/* XXX */
#include <machine/bus.h>
@


1.8
log
@partial sync with netbsd 960418, more to come
@
text
@d2 1
a2 1
/*	$NetBSD: rtfps.c,v 1.21 1996/04/15 18:55:31 cgd Exp $	*/
d38 1
d69 2
a70 2
int rtfpsprobe();
void rtfpsattach();
d72 1
d84 2
a85 1
	struct device *parent, *self;
d162 2
a163 1
	int i, subunit;
a184 2
		struct cfdata *match;

@


1.7
log
@NetBSD 960317 merge
@
text
@d1 2
a2 2
/*	$OpenBSD: rtfps.c,v 1.6 1996/03/20 01:01:01 mickey Exp $       */
/*	$NetBSD: rtfps.c,v 1.17 1996/03/10 09:01:28 cgd Exp $	*/
d39 1
d41 5
d72 6
a77 2
struct cfdriver rtfpscd = {
	NULL, "rtfps", rtfpsprobe, rtfpsattach, DV_TTY, sizeof(struct rtfps_softc)
d189 2
a190 5
		/* mimic config_found(), but with special functionality */
		if ((match = config_search(NULL, self, &ca)) != NULL) {
			subunit = match->cf_unit; /* can change if unit == * */
			config_attach(self, match, &ca, rtfpsprint);
			sc->sc_slaves[i] = match->cf_driver->cd_devs[subunit];
a191 4
		} else {
			rtfpsprint(&ca, self->dv_xname);
			printf(" not configured\n");
		}
d194 2
a195 2
	sc->sc_ih = isa_intr_establish(ia->ia_irq, IST_EDGE, IPL_TTY,
	    rtfpsintr, sc, sc->sc_dev.dv_xname);
@


1.6
log
@Fix back wrong patches.
@
text
@d1 2
a2 2
/*	$OpenBSD: rtfps.c,v 1.5 1996/03/19 21:10:30 mickey Exp $       */
/*	$NetBSD: rtfps.c,v 1.14 1995/12/24 02:31:48 mycroft Exp $       */
d5 1
d40 1
a40 1
#include <machine/pio.h>
d43 4
d52 1
d55 5
a59 2
	int sc_alive;		/* mask of slave units attached */
	void *sc_slaves[4];	/* com device unit numbers */
d76 4
d83 2
a84 1
	 * its presence means there is a multiport board there.
a86 3
	ia->ia_iosize = 4 * 8;
	return comprobe1(ia->ia_iobase);
}
d88 26
a113 3
struct rtfps_attach_args {
	int ra_slave;
};
d115 4
a118 13
int
rtfpssubmatch(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct rtfps_softc *sc = (void *)parent;
	struct cfdata *cf = match;
	struct isa_attach_args *ia = aux;
	struct rtfps_attach_args *ra = ia->ia_aux;

	if (cf->cf_loc[0] != -1 && cf->cf_loc[0] != ra->ra_slave)
		return (0);
	return ((*cf->cf_driver->cd_match)(parent, match, ia));
d122 1
a122 1
rtfpsprint(aux, rtfps)
d124 1
a124 1
	char *rtfps;
d126 1
a126 2
	struct isa_attach_args *ia = aux;
	struct rtfps_attach_args *ra = ia->ia_aux;
d128 4
a131 1
	printf(" slave %d", ra->ra_slave);
d141 1
a141 1
	struct rtfps_attach_args ra;
d149 1
a149 1
	int subunit;
d151 1
d158 9
a166 1
	outb(sc->sc_irqport, 0);
d170 18
a187 14
	isa.ia_aux = &ra;
	for (ra.ra_slave = 0; ra.ra_slave < 4; ra.ra_slave++) {
		struct cfdata *cf;
		isa.ia_iobase = sc->sc_iobase + 8 * ra.ra_slave;
		isa.ia_iosize = 0x666;
		isa.ia_irq = IRQUNK;
		isa.ia_drq = DRQUNK;
		isa.ia_msize = 0;
		if ((cf = config_search(rtfpssubmatch, self, &isa)) != 0) {
			subunit = cf->cf_unit;	/* can change if unit == * */
			config_attach(self, cf, &isa, rtfpsprint);
			sc->sc_slaves[ra.ra_slave] =
			    cf->cf_driver->cd_devs[subunit];
			sc->sc_alive |= 1 << ra.ra_slave;
d191 2
a192 2
	sc->sc_ih = isa_intr_establish(ia->ia_irq, IST_EDGE, IPL_TTY, rtfpsintr,
				       sc, sc->sc_dev.dv_xname);
d200 1
a200 1
	int iobase = sc->sc_iobase;
d203 1
a203 1
	outb(sc->sc_irqport, 0);
@


1.5
log
@Merging w/ NetBSD 021796.
speaker upgraded to the current.
some changes to the VM stuff (ie kern_thread.c added and so).
@
text
@d1 1
a1 1
/*	$OpenBSD: rtfps.c,v 1.4 1996/03/08 16:43:12 niklas Exp $       */
d152 1
a152 1
				       sc);
@


1.4
log
@From NetBSD: merge of 960217
@
text
@d1 1
a1 1
/*	$OpenBSD$       */
d152 1
a152 1
				       sc, sc->sc_dev.dv_xname);
@


1.3
log
@Pass device name to interrupt establish routines so it can be recorded in
the device interrupt chain structures (isa, pci)

Move interrupt chain structure definition to <machine/psl.h> so vmstat can
get at it (i386)

Remove hack to count interrupts the old way (i386)
@
text
@d1 2
a2 1
/*	$NetBSD: rtfps.c,v 1.13 1995/06/26 04:12:01 cgd Exp $	*/
@


1.2
log
@from netbsd:
The IST_* and IPL_* constants are not bus-specific; don't treat them as such.
Change splimp -> splnet in Ethernet, ARCnet, and FDDI drivers.
@
text
@d150 2
a151 1
	sc->sc_ih = isa_intr_establish(ia->ia_irq, IST_EDGE, IPL_TTY, rtfpsintr,	    sc);
@


1.1
log
@Initial revision
@
text
@d150 1
a150 2
	sc->sc_ih = isa_intr_establish(ia->ia_irq, ISA_IST_EDGE, ISA_IPL_TTY,
	    rtfpsintr, sc);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
