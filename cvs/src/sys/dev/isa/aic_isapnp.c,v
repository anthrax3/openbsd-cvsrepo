head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.66
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.62
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.52
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.60
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.58
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.56
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.54
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.50
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.48
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.46
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.44
	OPENBSD_5_0:1.1.0.42
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.40
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.38
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.34
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.36
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.32
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.30
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.28
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.26
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.24
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.22
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.20
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.18
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.16
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.14
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.12
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.10
	OPENBSD_3_4_BASE:1.1
	UBC_SYNC_A:1.1
	SMP:1.1.0.8
	OPENBSD_3_3:1.1.0.6
	OPENBSD_3_3_BASE:1.1
	UBC:1.1.0.4
	UBC_SYNC_B:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.1
date	2002.09.03.16.30.55;	author mickey;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2002.10.29.00.33.26;	author art;	state Exp;
branches;
next	;


desc
@@


1.1
log
@aic at isapnp, from anders@@Arnholm.nu w/ fixes from me
@
text
@/*	$OpenBSD$	*/

/*
 * Copyright (c) 2002 Anders Arnholm
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Acknowledgements: Many of the algorithms used in this driver are
 * inspired by the work of Julian Elischer (julian@@tfs.com),
 * Charles Hannum (mycroft@@duality.gnu.ai.mit.edu) and Jarle Greipsland.
 * Thanks a million!
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/bus.h>

#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>

#include <dev/isa/isavar.h>

#include <dev/ic/aic6360var.h>

int	aic_isapnp_match(struct device *, void *, void *);
void	aic_isapnp_attach(struct device *, struct device *, void *);

struct cfattach aic_isapnp_ca = {
	sizeof(struct aic_softc), aic_isapnp_match, aic_isapnp_attach
};

/*
 * INITIALIZATION ROUTINES (match, attach ++)
 */
/*
 * aic_isapnp_match: isapnp code does the probing for us, and other configured
 *		     and other configured card are found by aic_isa_match
 */
int
aic_isapnp_match(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	AIC_TRACE(("aic: aic_isapnp_match\n"));
	return(1);
}

/*
 * Attach the AIC6360, takes the data from isapnp and feads into aicattach.
 */
void
aic_isapnp_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct aic_softc *sc = (void *)self;
	struct isa_attach_args *ia = aux;

	AIC_TRACE(("aic: aic_isapnp_attach\n"));

	sc->sc_iot = ia->ia_iot;
	sc->sc_ioh = ia->ia_ioh;
	sc->sc_irq = ia->ia_irq;
	sc->sc_drq = ia->ia_drq;

	AIC_TRACE(("aic: aic_isapnp_attach isa_intr_establish(...)\n"));
	sc->sc_ih = isa_intr_establish(ia->ia_ic, ia->ia_irq, IST_EDGE,
	    IPL_BIO, aicintr, sc, sc->sc_dev.dv_xname);
	AIC_TRACE(("aic: aic_isapnp_attach aicattach(0x%08x, 0x%08x, %d, %d)\n",
		sc->sc_iot, sc->sc_ioh, sc->sc_irq, sc->sc_drq));
	aicattach(sc);
}
@


1.1.4.1
log
@sync to -current
@
text
@@

