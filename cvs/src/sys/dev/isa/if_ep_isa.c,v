head	1.31;
access;
symbols
	OPENBSD_6_2:1.31.0.6
	OPENBSD_6_2_BASE:1.31
	OPENBSD_6_1:1.31.0.8
	OPENBSD_6_1_BASE:1.31
	OPENBSD_6_0:1.31.0.4
	OPENBSD_6_0_BASE:1.31
	OPENBSD_5_9:1.31.0.2
	OPENBSD_5_9_BASE:1.31
	OPENBSD_5_8:1.28.0.6
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.28.0.4
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.27.0.6
	OPENBSD_5_6_BASE:1.27
	OPENBSD_5_5:1.27.0.4
	OPENBSD_5_5_BASE:1.27
	OPENBSD_5_4:1.25.0.24
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.22
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.20
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.18
	OPENBSD_5_0:1.25.0.16
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.14
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.25.0.12
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.8
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.10
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.25.0.6
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.25.0.4
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.25.0.2
	OPENBSD_4_3_BASE:1.25
	OPENBSD_4_2:1.24.0.6
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.24.0.4
	OPENBSD_4_1_BASE:1.24
	OPENBSD_4_0:1.24.0.2
	OPENBSD_4_0_BASE:1.24
	OPENBSD_3_9:1.23.0.2
	OPENBSD_3_9_BASE:1.23
	OPENBSD_3_8:1.22.0.4
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.22.0.2
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.21.0.2
	OPENBSD_3_6_BASE:1.21
	SMP_SYNC_A:1.21
	SMP_SYNC_B:1.21
	OPENBSD_3_5:1.20.0.10
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.20.0.8
	OPENBSD_3_4_BASE:1.20
	UBC_SYNC_A:1.20
	OPENBSD_3_3:1.20.0.6
	OPENBSD_3_3_BASE:1.20
	OPENBSD_3_2:1.20.0.4
	OPENBSD_3_2_BASE:1.20
	OPENBSD_3_1:1.20.0.2
	OPENBSD_3_1_BASE:1.20
	UBC_SYNC_B:1.20
	UBC:1.19.0.8
	UBC_BASE:1.19
	OPENBSD_3_0:1.19.0.6
	OPENBSD_3_0_BASE:1.19
	OPENBSD_2_9_BASE:1.19
	OPENBSD_2_9:1.19.0.4
	OPENBSD_2_8:1.19.0.2
	OPENBSD_2_8_BASE:1.19
	OPENBSD_2_7:1.18.0.6
	OPENBSD_2_7_BASE:1.18
	SMP:1.18.0.4
	SMP_BASE:1.18
	kame_19991208:1.18
	OPENBSD_2_6:1.18.0.2
	OPENBSD_2_6_BASE:1.18
	OPENBSD_2_5:1.17.0.4
	OPENBSD_2_5_BASE:1.17
	OPENBSD_2_4:1.17.0.2
	OPENBSD_2_4_BASE:1.17
	OPENBSD_2_3:1.13.0.2
	OPENBSD_2_3_BASE:1.13
	OPENBSD_2_2:1.9.0.2
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6;
locks; strict;
comment	@ * @;


1.31
date	2015.11.25.11.20.38;	author mpi;	state Exp;
branches;
next	1.30;
commitid	f4dx5ry1aOiKJw33;

1.30
date	2015.11.24.17.11.39;	author mpi;	state Exp;
branches;
next	1.29;
commitid	5gdEnqVoJuTuwdTu;

1.29
date	2015.11.24.13.33.17;	author mpi;	state Exp;
branches;
next	1.28;
commitid	5DvsamK0GblTp8ww;

1.28
date	2014.08.11.12.45.45;	author mpi;	state Exp;
branches;
next	1.27;
commitid	nYggAidK85QbUFh2;

1.27
date	2013.11.15.16.46.27;	author brad;	state Exp;
branches;
next	1.26;

1.26
date	2013.08.07.01.06.32;	author bluhm;	state Exp;
branches;
next	1.25;

1.25
date	2008.02.18.16.24.13;	author krw;	state Exp;
branches;
next	1.24;

1.24
date	2006.06.17.17.57.00;	author brad;	state Exp;
branches;
next	1.23;

1.23
date	2005.11.21.18.16.40;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2004.12.26.21.22.13;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2004.05.12.06.35.11;	author tedu;	state Exp;
branches;
next	1.20;

1.20
date	2002.03.14.01.26.56;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2000.05.29.18.04.08;	author aaron;	state Exp;
branches
	1.19.8.1;
next	1.18;

1.18
date	99.04.23.08.21.05;	author deraadt;	state Exp;
branches
	1.18.4.1;
next	1.17;

1.17
date	98.09.19.10.08.05;	author maja;	state Exp;
branches;
next	1.16;

1.16
date	98.09.16.21.16.36;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	98.09.11.12.06.57;	author fgsch;	state Exp;
branches;
next	1.14;

1.14
date	98.06.02.20.29.02;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	98.03.23.03.06.06;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	98.02.26.06.44.04;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	98.02.26.00.11.28;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	97.11.07.08.06.51;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	97.07.30.11.12.26;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	96.11.29.22.54.59;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	96.11.12.20.30.36;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.07.02.08.00.36;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.05.26.00.27.19;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.05.07.07.36.56;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.05.05.13.38.33;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.05.03.07.59.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.05.02.13.38.12;	author deraadt;	state Exp;
branches;
next	;

1.18.4.1
date	2001.05.14.22.24.42;	author niklas;	state Exp;
branches;
next	1.18.4.2;

1.18.4.2
date	2002.03.28.12.11.35;	author niklas;	state Exp;
branches;
next	1.18.4.3;

1.18.4.3
date	2004.06.05.23.12.45;	author niklas;	state Exp;
branches;
next	;

1.19.8.1
date	2002.06.11.03.42.21;	author art;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Network drivers should not include <net/route.h> or <net/netisr.h>
@
text
@/*	$OpenBSD: if_ep_isa.c,v 1.30 2015/11/24 17:11:39 mpi Exp $	*/
/*	$NetBSD: if_ep_isa.c,v 1.5 1996/05/12 23:52:36 mycroft Exp $	*/

/*
 * Copyright (c) 1996 Jason R. Thorpe <thorpej@@beer.org>
 * Copyright (c) 1994 Herb Peyerl <hpeyerl@@beer.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Herb Peyerl.
 * 4. The name of Herb Peyerl may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Note: Most of the code here was written by Theo de Raadt originally,
 * ie. all the mechanics of probing for all cards on first call and then
 * searching for matching devices on subsequent calls.
 */

#include "bpfilter.h"

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/errno.h>
#include <sys/syslog.h>
#include <sys/selinfo.h>
#include <sys/timeout.h>
#include <sys/device.h>
#include <sys/queue.h>

#include <net/if.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#if NBPFILTER > 0
#include <net/bpf.h>
#endif

#include <machine/cpu.h>
#include <machine/bus.h>
#include <machine/intr.h>

#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>

#include <dev/ic/elink3var.h>
#include <dev/ic/elink3reg.h>

#include <dev/isa/isavar.h>
#include <dev/isa/elink.h>

int ep_isa_probe(struct device *, void *, void *);
void ep_isa_attach(struct device *, struct device *, void *);

struct cfattach ep_isa_ca = {
	sizeof(struct ep_softc), ep_isa_probe, ep_isa_attach
};

static	void epaddcard(int, int, int, u_short);

/*
 * This keeps track of which ISAs have been through an ep probe sequence.
 * A simple static variable isn't enough, since it's conceivable that
 * a system might have more than one ISA bus.
 *
 * The "er_bus" member is the unit number of the parent ISA bus, e.g. "0"
 * for "isa0".
 */
struct ep_isa_done_probe {
	LIST_ENTRY(ep_isa_done_probe)	er_link;
	int				er_bus;
};
static LIST_HEAD(, ep_isa_done_probe) ep_isa_all_probes;
static int ep_isa_probes_initialized;

#define MAXEPCARDS	20	/* if you have more than 20, you lose */

static struct epcard {
	int	bus;
	int	iobase;
	int	irq;
	char	available;
	u_short	model;
} epcards[MAXEPCARDS];
static int nepcards;

static void
epaddcard(int bus, int iobase, int irq, u_short model)
{
	if (nepcards >= MAXEPCARDS)
		return;
	epcards[nepcards].bus = bus;
	epcards[nepcards].iobase = iobase;
	epcards[nepcards].irq = (irq == 2) ? 9 : irq;
	epcards[nepcards].available = 1;
	epcards[nepcards].model = model;
	nepcards++;
}

/*
 * 3c509 cards on the ISA bus are probed in ethernet address order.
 * The probe sequence requires careful orchestration, and we'd like
 * to allow the irq and base address to be wildcarded. So, we
 * probe all the cards the first time epprobe() is called. On subsequent
 * calls we look for matching cards.
 */
int
ep_isa_probe(struct device *parent, void *match, void *aux)
{
	struct isa_attach_args *ia = aux;
	bus_space_tag_t iot = ia->ia_iot;
	bus_space_handle_t ioh;
	int slot, iobase, irq, i, pnp;
	u_int16_t vendor, model;
	struct ep_isa_done_probe *er;
	int bus = parent->dv_unit;

	if (ep_isa_probes_initialized == 0) {
		LIST_INIT(&ep_isa_all_probes);
		ep_isa_probes_initialized = 1;
	}

	/*
	 * Probe this bus if we haven't done so already.
	 */
	LIST_FOREACH(er, &ep_isa_all_probes, er_link)
		if (er->er_bus == parent->dv_unit)
			goto bus_probed;

	/*
	 * Mark this bus so we don't probe it again.
	 */
	er = (struct ep_isa_done_probe *)
	    malloc(sizeof(struct ep_isa_done_probe), M_DEVBUF, M_NOWAIT);
	if (er == NULL)
		panic("ep_isa_probe: can't allocate state storage");

	er->er_bus = bus;
	LIST_INSERT_HEAD(&ep_isa_all_probes, er, er_link);

	/*
	 * Map the Etherlink ID port for the probe sequence.
	 */
	if (bus_space_map(iot, ELINK_ID_PORT, 1, 0, &ioh)) {
		printf("ep_isa_probe: can't map Etherlink ID port\n");
		return 0;
	}

	for (slot = 0; slot < MAXEPCARDS; slot++) {
		elink_reset(iot, ioh, parent->dv_unit);
		elink_idseq(iot, ioh, ELINK_509_POLY);

		/* Untag all the adapters so they will talk to us. */
		if (slot == 0)
			bus_space_write_1(iot, ioh, 0, TAG_ADAPTER + 0);

		vendor = htons(epreadeeprom(iot, ioh, EEPROM_MFG_ID));
		if (vendor != MFG_ID)
			continue;

		model = htons(epreadeeprom(iot, ioh, EEPROM_PROD_ID));
		if ((model & 0xfff0) != PROD_ID_3C509) {
#ifndef trusted
			printf("ep_isa_probe: ignoring model %04x\n",
			    model);
#endif
			continue;
		}

		iobase = epreadeeprom(iot, ioh, EEPROM_ADDR_CFG);
		iobase = (iobase & 0x1f) * 0x10 + 0x200;

		irq = epreadeeprom(iot, ioh, EEPROM_RESOURCE_CFG);
		irq >>= 12;

		pnp = epreadeeprom(iot, ioh, EEPROM_PNP) & 8;

		/* so card will not respond to contention again */
		bus_space_write_1(iot, ioh, 0, TAG_ADAPTER + 1);

		if ((model & 0xfff0) == PROD_ID_3C509 && pnp != 0)
			continue;

		/*
		 * XXX: this should probably not be done here
		 * because it enables the drq/irq lines from
		 * the board. Perhaps it should be done after
		 * we have checked for irq/drq collisions?
		 */
		bus_space_write_1(iot, ioh, 0, ACTIVATE_ADAPTER_TO_CONFIG);
		epaddcard(bus, iobase, irq, model);
	}
	/* XXX should we sort by ethernet address? */

	bus_space_unmap(iot, ioh, 1);

 bus_probed:

	for (i = 0; i < nepcards; i++) {
		if (epcards[i].bus != bus)
			continue;
		if (epcards[i].available == 0)
			continue;
		if (ia->ia_iobase != IOBASEUNK &&
		    ia->ia_iobase != epcards[i].iobase)
			continue;
		if (ia->ia_irq != IRQUNK &&
		    ia->ia_irq != epcards[i].irq)
			continue;
		goto good;
	}
	return 0;

good:
	epcards[i].available = 0;
	ia->ia_iobase = epcards[i].iobase;
	ia->ia_irq = epcards[i].irq;
	ia->ia_iosize = 0x10;
	ia->ia_msize = 0;
	ia->ia_aux = (void *)(long)(epcards[i].model);
	return 1;
}

void
ep_isa_attach(struct device *parent, struct device *self, void *aux)
{
	struct ep_softc *sc = (void *)self;
	struct isa_attach_args *ia = aux;
	bus_space_tag_t iot = ia->ia_iot;
	bus_space_handle_t ioh;
	int chipset;

	/* Map i/o space. */
	if (bus_space_map(iot, ia->ia_iobase, ia->ia_iosize, 0, &ioh))
		panic("ep_isa_attach: can't map i/o space");

	sc->sc_iot = iot;
	sc->sc_ioh = ioh;
	sc->bustype = EP_BUS_ISA;

	printf(":");

	chipset = (int)(long)ia->ia_aux;
	if ((chipset & 0xfff0) == PROD_ID_3C509) {
		epconfig(sc, EP_CHIPSET_3C509, NULL);
	} else {
		/*
		 * XXX: Maybe a 3c515, but the check in ep_isa_probe looks
		 * at the moment only for a 3c509.
		 */
		epconfig(sc, EP_CHIPSET_UNKNOWN, NULL);
	}

	sc->sc_ih = isa_intr_establish(ia->ia_ic, ia->ia_irq, IST_EDGE,
	    IPL_NET, epintr, sc, sc->sc_dev.dv_xname);
}
@


1.30
log
@You only need <net/if_dl.h> if you're using LLADDR() or a sockaddr_dl.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.29 2015/11/24 13:33:17 mpi Exp $	*/
a53 1
#include <net/netisr.h>
@


1.29
log
@The only network driver needing <net/if_types.h> is upl(4) for IFT_OTHER.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.28 2014/08/11 12:45:45 mpi Exp $	*/
a53 1
#include <net/if_dl.h>
@


1.28
log
@Fewer <netinet/in_systm.h>
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.27 2013/11/15 16:46:27 brad Exp $	*/
a54 1
#include <net/if_types.h>
@


1.27
log
@ansify some function definitions.
no functional change.

ok sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.26 2013/08/07 01:06:32 bluhm Exp $	*/
a58 1
#ifdef INET
a59 2
#include <netinet/in_systm.h>
#include <netinet/ip.h>
a60 1
#endif
@


1.26
log
@Most network drivers include netinet/in_var.h, but apparently they
don't have to.  Just remove these include lines.
Compiled on amd64 i386 sparc64; OK henning@@ mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.25 2008/02/18 16:24:13 krw Exp $	*/
d119 1
a119 3
epaddcard(bus, iobase, irq, model)
	int bus, iobase, irq;
	u_short model;
a120 1

d139 1
a139 3
ep_isa_probe(parent, match, aux)
	struct device *parent;
	void *match, *aux;
d256 1
a256 3
ep_isa_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
@


1.25
log
@'like\nlike' -> 'like' in a couple of comments.

From Giovanni Bechis.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.24 2006/06/17 17:57:00 brad Exp $	*/
a61 1
#include <netinet/in_var.h>
@


1.24
log
@add sys/timeout.h
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.23 2005/11/21 18:16:40 millert Exp $	*/
d138 1
a138 1
 * like to allow the irq and base address to be wildcarded. So, we
@


1.23
log
@Move contents of sys/select.h to sys/selinfo.h in preparation for a
userland-visible sys/select.h.  Consistent with what Net and Free do.
OK deraadt@@, tested with full ports build by naddy@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.22 2004/12/26 21:22:13 miod Exp $	*/
d49 1
@


1.22
log
@Use list and queue macros where applicable to make the code easier to read;
no change in compiler assembly output.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.21 2004/05/12 06:35:11 tedu Exp $	*/
d48 1
a48 1
#include <sys/select.h>
@


1.21
log
@network drivers don't need to include bpfdesc.h
ok krw@@ canacar@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.20 2002/03/14 01:26:56 millert Exp $	*/
d162 1
a162 2
	for (er = ep_isa_all_probes.lh_first; er != NULL;
	    er = er->er_link.le_next)
@


1.20
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.19 2000/05/29 18:04:08 aaron Exp $	*/
a67 1
#include <net/bpfdesc.h>
@


1.19
log
@Support for 3c574 and 3CCFEM556BI PCMCIA Ethernet; from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.18 1999/04/23 08:21:05 deraadt Exp $	*/
d84 2
a85 2
int ep_isa_probe __P((struct device *, void *, void *));
void ep_isa_attach __P((struct device *, struct device *, void *));
d91 1
a91 1
static	void epaddcard __P((int, int, int, u_short));
@


1.19.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.19 2000/05/29 18:04:08 aaron Exp $	*/
d84 2
a85 2
int ep_isa_probe(struct device *, void *, void *);
void ep_isa_attach(struct device *, struct device *, void *);
d91 1
a91 1
static	void epaddcard(int, int, int, u_short);
@


1.18
log
@in case PNP OS BIOS option is broken, skip isapnp ep cards
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.17 1998/09/19 10:08:05 maja Exp $	*/
d74 3
@


1.18.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.19 2000/05/29 18:04:08 aaron Exp $	*/
a73 3

#include <dev/mii/mii.h>
#include <dev/mii/miivar.h>
@


1.18.4.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d84 2
a85 2
int ep_isa_probe(struct device *, void *, void *);
void ep_isa_attach(struct device *, struct device *, void *);
d91 1
a91 1
static	void epaddcard(int, int, int, u_short);
@


1.18.4.3
log
@Merge with the trunk
@
text
@d68 1
@


1.17
log
@Added if_media support from NetBSD. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.16 1998/09/16 21:16:36 deraadt Exp $	*/
d146 2
a147 2
	bus_space_handle_t ioh, ioh2;
	int slot, iobase, irq, i;
d211 2
d216 3
a225 14
		/*
		 * Don't attach a 3c509 in PnP mode.
		 */
		if ((model & 0xfff0) == PROD_ID_3C509) {
			if (bus_space_map(iot, iobase, 1, 0, &ioh2)) {
				printf("ep_isa_probe: can't map Etherlink iobase\n");
				return 0;
			}
			if (bus_space_read_2(iot, ioh2,
			    EP_W0_EEPROM_COMMAND) & EEPROM_TST_MODE) {
				continue;
			}
			bus_space_unmap(iot, ioh2, 1);
		}
@


1.16
log
@fix ep probe message printouts
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.15 1998/09/11 12:06:57 fgsch Exp $	*/
d56 1
@


1.15
log
@Add a third parameter to epconfig to get the MAC address if it's a pcmcia
card and support it. Use NULL otherwise.
Update the ep based drivers.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.14 1998/06/02 20:29:02 deraadt Exp $	*/
d285 2
@


1.14
log
@silence
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.13 1998/03/23 03:06:06 deraadt Exp $	*/
d288 1
a288 1
		epconfig(sc, EP_CHIPSET_3C509);
d294 1
a294 1
		epconfig(sc, EP_CHIPSET_UNKNOWN);
@


1.13
log
@fix printing for these; ignore model number
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.12 1998/02/26 06:44:04 deraadt Exp $	*/
d198 2
a199 2
			printf(
			 "ep_isa_probe: ignoring model %04x\n", model);
d202 1
a202 1
			}
d225 1
a225 2
				printf(
				"ep_isa_probe: can't map Etherlink iobase\n");
d228 2
a229 4
			if (bus_space_read_2(iot, ioh2, EP_W0_EEPROM_COMMAND)
			    & EEPROM_TST_MODE) {
				printf(
				 "3COM 3C509 Ethernet card in PnP mode\n");
@


1.12
log
@remember model number; skip PNP cards; etc etc etc
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.11 1998/02/26 00:11:28 deraadt Exp $	*/
a290 1
		printf(": 3Com 3C509 Ethernet");
a296 1
		printf(": unknown card %04x", chipset);
@


1.11
log
@nicer message
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.10 1997/11/07 08:06:51 niklas Exp $	*/
d87 1
a87 1
static	void epaddcard __P((int, int, int));
d111 1
d116 1
a116 1
epaddcard(bus, iobase, irq)
d118 1
d127 1
d145 1
a145 1
	bus_space_handle_t ioh;
a208 1
		epaddcard(bus, iobase, irq);
d220 18
d266 1
d291 1
a291 1
		printf(": 3Com 3C509 Ethernet\n");
@


1.10
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: if_ep_isa.c,v 1.5 1996/05/12 23:52:36 mycroft Exp $	*/
d277 1
a277 1
		printf(": unknown 3Com Ethernet card: %04x\n", chipset);
@


1.9
log
@Sync to NetBSD.  Adapt to use bus_space_multi_raw* interface of OpenBSD.
Some KNF too.
@
text
@d1 1
@


1.8
log
@Missing pieces of new bus.h that CVS lost behind my back
@
text
@d192 1
a192 1
		if ((model & 0xfff0) != PROD_ID) {
d257 1
a257 1
	u_short conn = 0;
d267 12
a278 6
	GO_WINDOW(0);
	conn = bus_space_read_2(iot, ioh, EP_W0_CONFIG_CTRL);

	printf(": <3Com 3C509 Ethernet> ");

	epconfig(sc, conn);
@


1.7
log
@s/bus.h/bus.old.h/ to make the transit to the bus_space bus.h an easy road
possibly taken in small steps
@
text
@d70 1
a70 1
#include <machine/bus.old.h>
d140 2
a141 2
	bus_chipset_tag_t bc = ia->ia_bc;
	bus_io_handle_t ioh;
d174 1
a174 1
	if (bus_io_map(bc, ELINK_ID_PORT, 1, &ioh)) {
d180 2
a181 2
		elink_reset(bc, ioh, parent->dv_unit);
		elink_idseq(bc, ioh, ELINK_509_POLY);
d185 1
a185 1
			bus_io_write_1(bc, ioh, 0, TAG_ADAPTER + 0);
d187 1
a187 1
		vendor = htons(epreadeeprom(bc, ioh, EEPROM_MFG_ID));
d191 1
a191 1
		model = htons(epreadeeprom(bc, ioh, EEPROM_PROD_ID));
d200 1
a200 1
		iobase = epreadeeprom(bc, ioh, EEPROM_ADDR_CFG);
d203 1
a203 1
		irq = epreadeeprom(bc, ioh, EEPROM_RESOURCE_CFG);
d208 1
a208 1
		bus_io_write_1(bc, ioh, 0, TAG_ADAPTER + 1);
d216 1
a216 1
		bus_io_write_1(bc, ioh, 0, ACTIVATE_ADAPTER_TO_CONFIG);
d220 1
a220 1
	bus_io_unmap(bc, ioh, 1);
d255 2
a256 2
	bus_chipset_tag_t bc = ia->ia_bc;
	bus_io_handle_t ioh;
d260 1
a260 1
	if (bus_io_map(bc, ia->ia_iobase, ia->ia_iosize, &ioh))
d263 1
a263 1
	sc->sc_bc = bc;
d268 1
a268 1
	conn = bus_io_read_2(bc, ioh, EP_W0_CONFIG_CTRL);
@


1.6
log
@document
@
text
@d70 1
a70 1
#include <machine/bus.h>
@


1.5
log
@sync 0521
@
text
@d32 4
@


1.4
log
@sync with 0504 -- prototypes and bus.h
@
text
@d1 1
a1 1
/*	$NetBSD: if_ep_isa.c,v 1.3 1996/05/03 19:06:25 christos Exp $	*/
d5 1
a5 1
 * Copyright (c) 1994 Herb Peyerl <hpeyerl@@novatel.ca>
d67 1
@


1.3
log
@add general ether_ioctl call in net/if_ethersubr.c,
NS,IPX,X.25 special processing is now handled in there.
reflect this amazing addition in all the ether ifaces.
ppl, pls check the stuff.
@
text
@d1 1
a1 1
/*	$NetBSD: if_ep_isa.c,v 1.1 1996/04/25 02:15:47 thorpej Exp $	*/
d4 1
d37 1
d45 1
d66 1
a66 1
#include <machine/pio.h>
d81 1
a81 1
static	void epaddcard __P((int, int));
d83 16
a98 1
#define MAXEPCARDS	10	/* 10 ISA slots */
d101 1
d109 2
a110 3
epaddcard(iobase, irq)
	int iobase;
	int irq;
d115 1
d135 2
a136 1
	static int probed;
d138 35
a172 1
	u_short vendor, model;
d174 7
a180 2
	if (!probed) {
		probed = 1;
d182 6
a187 16
		for (slot = 0; slot < MAXEPCARDS; slot++) {
			elink_reset();
			elink_idseq(ELINK_509_POLY);

			/* Untag all the adapters so they will talk to us. */
			if (slot == 0)
				outb(ELINK_ID_PORT, TAG_ADAPTER + 0);

			vendor =
			    htons(epreadeeprom(ELINK_ID_PORT, EEPROM_MFG_ID));
			if (vendor != MFG_ID)
				continue;

			model =
			    htons(epreadeeprom(ELINK_ID_PORT, EEPROM_PROD_ID));
			if ((model & 0xfff0) != PROD_ID) {
d189 2
a190 2
				printf(
				 "ep_isa_probe: ignoring model %04x\n", model);
d192 1
a192 1
				continue;
d195 2
a196 2
			iobase = epreadeeprom(ELINK_ID_PORT, EEPROM_ADDR_CFG);
			iobase = (iobase & 0x1f) * 0x10 + 0x200;
d198 14
a211 16
			irq = epreadeeprom(ELINK_ID_PORT, EEPROM_RESOURCE_CFG);
			irq >>= 12;
			epaddcard(iobase, irq);

			/* so card will not respond to contention again */
			outb(ELINK_ID_PORT, TAG_ADAPTER + 1);

			/*
			 * XXX: this should probably not be done here
			 * because it enables the drq/irq lines from
			 * the board. Perhaps it should be done after
			 * we have checked for irq/drq collisions?
			 */
			outb(ELINK_ID_PORT, ACTIVATE_ADAPTER_TO_CONFIG);
		}
		/* XXX should we sort by ethernet address? */
d213 5
d220 2
d250 2
a252 1
	int iobase;
d254 6
a259 1
	sc->ep_iobase = iobase = ia->ia_iobase;
d263 1
a263 1
	conn = inw(iobase + EP_W0_CONFIG_CTRL);
@


1.2
log
@prettier printf messages
@
text
@a56 5
#ifdef NS
#include <netns/ns.h>
#include <netns/ns_if.h>
#endif

@


1.1
log
@if_ep splitup
@
text
@d210 1
a210 1
	printf(": 3Com 3C509 Ethernet\n");
@

