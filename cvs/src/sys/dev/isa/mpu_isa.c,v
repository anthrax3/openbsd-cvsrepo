head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.10
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.6
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.24
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.22
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.18
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.16
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.14
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.12
	OPENBSD_5_0:1.4.0.10
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.8
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.30
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.28
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.26
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.24
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.22
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.20
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.18
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.16
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.14
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.12
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.10
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.8
	OPENBSD_3_4_BASE:1.3
	UBC:1.3.0.6
	UBC_SYNC_A:1.3
	SMP:1.3.0.4
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.6
date	2015.03.14.03.38.47;	author jsg;	state Exp;
branches;
next	1.5;
commitid	p4LJxGKbi0BU2cG6;

1.5
date	2014.09.14.14.17.25;	author jsg;	state Exp;
branches;
next	1.4;
commitid	uzzBR7hz9ncd4O6G;

1.4
date	2009.03.29.21.53.52;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.29.20.35.13;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.29.20.32.23;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.28.23.24.53;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: mpu_isa.c,v 1.5 2014/09/14 14:17:25 jsg Exp $	*/

/*
 * Copyright (c) 2002 Sergey Smitienko. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/errno.h>
#include <sys/ioctl.h>
#include <sys/syslog.h>
#include <sys/device.h>

#include <machine/bus.h>

#include <sys/audioio.h>
#include <dev/midi_if.h>

#include <dev/isa/isavar.h>
#include <dev/isa/isadmavar.h>

#include <dev/ic/mpuvar.h>

int	mpu_isa_match(struct device *, void *, void *);
void	mpu_isa_attach(struct device *, struct device *, void *);
int	mpu_test(bus_space_tag_t, int);

#ifdef	AUDIO_DEBUG
#define	DPRINTF(x)	if (mpu_debug) printf x
int	mpu_debug = 0;
#else
#define	DPRINTF(x)
#endif

#define MPU_GETSTATUS(iot, ioh) (bus_space_read_1(iot, ioh, MPU_STATUS))

struct mpu_isa_softc {
	struct device sc_dev;

	struct mpu_softc sc_mpu;
};

struct cfattach mpu_isa_ca = {
	sizeof(struct mpu_isa_softc), mpu_isa_match, mpu_isa_attach
};

int
mpu_test (iot, iobase)
	bus_space_tag_t iot;
	int iobase;	/* base port number to try */
{
	bus_space_handle_t ioh;
	int	i, rc;

	rc = 0;
	if (bus_space_map(iot, iobase, MPU401_NPORT, 0, &ioh)) {
		DPRINTF(("mpu_test: can't map: %x/2\n", iobase));
		return (0);
	}

	DPRINTF(("mpu_test: trying: %x\n", iobase));

	/*
	 * The following code is a shameless copy of mpu401.c
	 * it is here until a redesign of mpu_find() interface
	 */

	if (MPU_GETSTATUS(iot, ioh) == 0xff)
		goto done;

	for (i = 0; i < MPU_MAXWAIT; i++) {
		if (!(MPU_GETSTATUS(iot, ioh) & MPU_OUTPUT_BUSY)) {
			rc = 1;
			break;
		}
		delay (10);
	}
	
	if (rc == 1) {	
		bus_space_write_1(iot, ioh, MPU_COMMAND, MPU_RESET);
		rc = 0;
		for (i = 0; i < 2 * MPU_MAXWAIT; i++)
			if (!(MPU_GETSTATUS(iot, ioh) & MPU_INPUT_EMPTY) &&
			    bus_space_read_1(iot, ioh, MPU_DATA) == MPU_ACK) {
				rc = 1;
				break;
			}
	}
done:
	bus_space_unmap(iot, ioh, MPU401_NPORT);

	return (rc);
}

int
mpu_isa_match(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct isa_attach_args *ia = aux;

        if (mpu_test(ia->ia_iot, ia->ia_iobase)) {
		ia->ia_iosize = MPU401_NPORT;
		return (1);
	}

	return (0);
}

void
mpu_isa_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct mpu_isa_softc *sc = (struct mpu_isa_softc *)self;
	struct isa_attach_args *ia = aux;

	sc->sc_mpu.iot = ia->ia_iot;

	if (bus_space_map (ia->ia_iot, ia->ia_iobase, MPU401_NPORT,
	    0, &sc->sc_mpu.ioh)) {
		printf(": can't map i/o space\n");
		return;
	}

	if (!mpu_find(&sc->sc_mpu)) {
		printf(": find failed\n");
		return;
	}

	printf(": generic MPU-401 compatible\n");

	midi_attach_mi(&mpu_midi_hw_if, &sc->sc_mpu, &sc->sc_dev);
}
@


1.5
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu_isa.c,v 1.4 2009/03/29 21:53:52 sthen Exp $	*/
a39 1
#include <dev/audio_if.h>
@


1.4
log
@make various strings ("can't map mem space" and similar) more consistent
between instances, saving space in the kernel. feedback from many (some
incorporated, some left for future work).

ok deraadt, kettenis, "why not" miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu_isa.c,v 1.3 2003/01/29 20:35:13 mickey Exp $	*/
a35 1
#include <sys/proc.h>
@


1.3
log
@oops, test-compiled the wrong source, missing paren
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu_isa.c,v 1.2 2003/01/29 20:32:23 mickey Exp $	*/
d82 1
a82 1
		DPRINTF(("mpu_test: can`t map: %x/2\n", iobase));
d147 1
a147 1
		printf(": can`t map i/o space\n");
@


1.2
log
@make it work on both yamaha and ensoniq mpus; from hunter@@dg.net.ua
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu_isa.c,v 1.1 2002/11/28 23:24:53 mickey Exp $	*/
d97 1
a97 1
		if (!MPU_GETSTATUS(iot, ioh) & MPU_OUTPUT_BUSY)) {
@


1.1
log
@same devices named the same
@
text
@d1 1
a1 1
/*	$OpenBSD: mpu_isa.c,v 1.1 2002/11/28 22:37:20 mickey Exp $	*/
d97 1
a97 9
		if (!(MPU_GETSTATUS(iot, ioh) & MPU_OUTPUT_BUSY))
			goto done;
		delay (10);
	}
	bus_space_write_1(iot, ioh, MPU_COMMAND, MPU_RESET);

	for (i = 0; i < 2 * MPU_MAXWAIT; i++)
		if (!(MPU_GETSTATUS(iot, ioh) & MPU_INPUT_EMPTY) &&
		    bus_space_read_1(iot, ioh, MPU_DATA) == MPU_ACK) {
d101 13
@

