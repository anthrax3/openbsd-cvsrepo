head	1.16;
access;
symbols
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.38
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.34
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.24
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.32
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.30
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.28
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.26
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.22
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.20
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.18
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.16
	OPENBSD_5_0:1.16.0.14
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.12
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.10
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.6
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.8
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.4
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.2
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.15.0.16
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.14
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.12
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.10
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.8
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.6
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.4
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.2
	OPENBSD_3_6_BASE:1.15
	SMP_SYNC_A:1.15
	SMP_SYNC_B:1.15
	OPENBSD_3_5:1.14.0.8
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.6
	OPENBSD_3_4_BASE:1.14
	UBC_SYNC_A:1.14
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	UBC_SYNC_B:1.14
	UBC:1.12.0.2
	UBC_BASE:1.12
	OPENBSD_3_0:1.11.0.18
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.16
	OPENBSD_2_8:1.11.0.14
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.12
	OPENBSD_2_7_BASE:1.11
	SMP:1.11.0.10
	SMP_BASE:1.11
	kame_19991208:1.11
	OPENBSD_2_6:1.11.0.8
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.11.0.6
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.11.0.4
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.11.0.2
	OPENBSD_2_3_BASE:1.11
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd:1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2008.06.26.05.42.16;	author ray;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.20.15.04.10;	author pvalchev;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.10.22.27.33;	author niklas;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.14.01.26.56;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2001.10.31.11.00.24;	author art;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	98.01.20.18.40.31;	author niklas;	state Exp;
branches
	1.11.10.1;
next	1.10;

1.10
date	97.12.25.12.06.48;	author downsj;	state Exp;
branches;
next	1.9;

1.9
date	97.12.21.14.41.24;	author downsj;	state Exp;
branches;
next	1.8;

1.8
date	97.11.04.10.32.51;	author provos;	state Exp;
branches;
next	1.7;

1.7
date	97.09.24.22.28.14;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	97.09.22.21.03.52;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.11.29.22.55.02;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.04.22.20.03.05;	author hannken;	state Exp;
branches;
next	1.3;

1.3
date	96.04.18.23.47.42;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.11.28.16.15.44;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.36;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.36;	author deraadt;	state Exp;
branches;
next	;

1.11.10.1
date	2001.11.13.21.10.01;	author niklas;	state Exp;
branches;
next	1.11.10.2;

1.11.10.2
date	2002.03.28.12.11.35;	author niklas;	state Exp;
branches;
next	1.11.10.3;

1.11.10.3
date	2003.03.28.00.38.16;	author niklas;	state Exp;
branches;
next	1.11.10.4;

1.11.10.4
date	2004.06.05.23.12.46;	author niklas;	state Exp;
branches;
next	;

1.12.2.1
date	2002.06.11.03.42.21;	author art;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2002.10.29.00.33.26;	author art;	state Exp;
branches;
next	;


desc
@@


1.16
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@/*	$OpenBSD: isadmavar.h,v 1.15 2004/04/20 15:04:10 pvalchev Exp $	*/
/*	$NetBSD: isadmavar.h,v 1.10 1997/08/04 22:13:33 augustss Exp $	*/

/*-
 * Copyright (c) 1997 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _DEV_ISA_ISADMAVAR_H
#define _DEV_ISA_ISADMAVAR_H

/* XXX for now... */
#ifndef __ISADMA_COMPAT
#define __ISADMA_COMPAT
#endif /* __ISADMA_COMPAT */

#ifdef __ISADMA_COMPAT

/* XXX ugly.. but it's a deprecated API that uses it so it will go.. */
extern struct device *isa_dev;

#define isadma_acquire(c)		isa_dma_acquire(isa_dev, (c))
#define isadma_release(c)		isa_dma_release(isa_dev, (c))
#define isadma_cascade(c)		isa_dmacascade(isa_dev, (c))
#define isadma_start(a, s, c, f) \
    isa_dmastart(isa_dev, (c), (a), (s), 0, (f), BUS_DMA_WAITOK|BUS_DMA_BUS1)
#define isadma_abort(c)			isa_dmaabort(isa_dev, (c))
#define isadma_finished(c)		isa_dmafinished(isa_dev, (c))
#define isadma_done(c)			isa_dmadone(isa_dev, (c))

#endif /* __ISADMA_COMPAT */

#define MAX_ISADMA	65536

#define	DMAMODE_WRITE	0
#define	DMAMODE_READ	1
#define	DMAMODE_LOOP	2

struct proc;

void	   isa_dmacascade(struct device *, int);

int	   isa_dmamap_create(struct device *, int, bus_size_t, int);
void	   isa_dmamap_destroy(struct device *, int);

int	   isa_dmastart(struct device *, int, void *, bus_size_t,
	       struct proc *, int, int);
void	   isa_dmaabort(struct device *, int);
bus_size_t isa_dmacount(struct device *, int);
int	   isa_dmafinished(struct device *, int);
void	   isa_dmadone(struct device *, int);

int	   isa_dmamem_alloc(struct device *, int, bus_size_t,
	       bus_addr_t *, int);
void	   isa_dmamem_free(struct device *, int, bus_addr_t, bus_size_t);
int	   isa_dmamem_map(struct device *, int, bus_addr_t, bus_size_t,
	       caddr_t *, int);
void	   isa_dmamem_unmap(struct device *, int, caddr_t, size_t);
int	   isa_dmamem_mmap(struct device *, int, bus_addr_t, bus_size_t,
	       int, int, int);

int	   isa_drq_isfree(struct device *, int);

void      *isa_malloc(struct device *, int, size_t, int, int);
void	   isa_free(void *, int);
paddr_t	   isa_mappage(void *, off_t, int);

#endif /* _DEV_ISA_ISADMAVAR_H */
@


1.15
log
@protect from multiple inclusion; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: isadmavar.h,v 1.14 2002/06/10 22:27:33 niklas Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.14
log
@old bouncebuffering api not used anymore
@
text
@d1 1
a1 1
/*	$OpenBSD: isadmavar.h,v 1.13 2002/03/14 01:26:56 millert Exp $	*/
d41 3
d99 2
@


1.13
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: isadmavar.h,v 1.12 2001/10/31 11:00:24 art Exp $	*/
a49 17

#define	ISADMA_MAP_WAITOK	0x0001	/* OK for isadma_map to sleep */
#define	ISADMA_MAP_BOUNCE	0x0002	/* use bounce buffer if necessary */
#define	ISADMA_MAP_CONTIG	0x0004	/* must be physically contiguous */
#define	ISADMA_MAP_8BIT		0x0008	/* must not cross 64k boundary */
#define	ISADMA_MAP_16BIT	0x0010	/* must not cross 128k boundary */

struct isadma_seg {		/* a physical contiguous segment */
	vm_offset_t addr;	/* address of this segment */
	vm_size_t length;	/* length of this segment (bytes) */
	bus_dmamap_t dmam;	/* DMA handle for bus_dma routines. */
};

int isadma_map(caddr_t, vm_size_t, struct isadma_seg *, int);
void isadma_unmap(caddr_t, vm_size_t, int, struct isadma_seg *);
void isadma_copytobuf(caddr_t, vm_size_t, int, struct isadma_seg *);
void isadma_copyfrombuf(caddr_t, vm_size_t, int, struct isadma_seg *);
@


1.12
log
@Change the audio_hm_if->mappage interface to return paddr_t and take off_t
as the mmap offset.
@
text
@d1 1
a1 1
/*	$OpenBSD: isadmavar.h,v 1.11 1998/01/20 18:40:31 niklas Exp $	*/
d63 4
a66 4
int isadma_map __P((caddr_t, vm_size_t, struct isadma_seg *, int));
void isadma_unmap __P((caddr_t, vm_size_t, int, struct isadma_seg *));
void isadma_copytobuf __P((caddr_t, vm_size_t, int, struct isadma_seg *));
void isadma_copyfrombuf __P((caddr_t, vm_size_t, int, struct isadma_seg *));
d87 1
a87 1
void	   isa_dmacascade __P((struct device *, int));
d89 2
a90 2
int	   isa_dmamap_create __P((struct device *, int, bus_size_t, int));
void	   isa_dmamap_destroy __P((struct device *, int));
d92 21
a112 21
int	   isa_dmastart __P((struct device *, int, void *, bus_size_t,
	       struct proc *, int, int));
void	   isa_dmaabort __P((struct device *, int));
bus_size_t isa_dmacount __P((struct device *, int));
int	   isa_dmafinished __P((struct device *, int));
void	   isa_dmadone __P((struct device *, int));

int	   isa_dmamem_alloc __P((struct device *, int, bus_size_t,
	       bus_addr_t *, int));
void	   isa_dmamem_free __P((struct device *, int, bus_addr_t, bus_size_t));
int	   isa_dmamem_map __P((struct device *, int, bus_addr_t, bus_size_t,
	       caddr_t *, int));
void	   isa_dmamem_unmap __P((struct device *, int, caddr_t, size_t));
int	   isa_dmamem_mmap __P((struct device *, int, bus_addr_t, bus_size_t,
	       int, int, int));

int	   isa_drq_isfree __P((struct device *, int));

void      *isa_malloc __P((struct device *, int, size_t, int, int));
void	   isa_free __P((void *, int));
paddr_t	   isa_mappage __P((void *, off_t, int));
@


1.12.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: isadmavar.h,v 1.12 2001/10/31 11:00:24 art Exp $	*/
d63 4
a66 4
int isadma_map(caddr_t, vm_size_t, struct isadma_seg *, int);
void isadma_unmap(caddr_t, vm_size_t, int, struct isadma_seg *);
void isadma_copytobuf(caddr_t, vm_size_t, int, struct isadma_seg *);
void isadma_copyfrombuf(caddr_t, vm_size_t, int, struct isadma_seg *);
d87 1
a87 1
void	   isa_dmacascade(struct device *, int);
d89 2
a90 2
int	   isa_dmamap_create(struct device *, int, bus_size_t, int);
void	   isa_dmamap_destroy(struct device *, int);
d92 21
a112 21
int	   isa_dmastart(struct device *, int, void *, bus_size_t,
	       struct proc *, int, int);
void	   isa_dmaabort(struct device *, int);
bus_size_t isa_dmacount(struct device *, int);
int	   isa_dmafinished(struct device *, int);
void	   isa_dmadone(struct device *, int);

int	   isa_dmamem_alloc(struct device *, int, bus_size_t,
	       bus_addr_t *, int);
void	   isa_dmamem_free(struct device *, int, bus_addr_t, bus_size_t);
int	   isa_dmamem_map(struct device *, int, bus_addr_t, bus_size_t,
	       caddr_t *, int);
void	   isa_dmamem_unmap(struct device *, int, caddr_t, size_t);
int	   isa_dmamem_mmap(struct device *, int, bus_addr_t, bus_size_t,
	       int, int, int);

int	   isa_drq_isfree(struct device *, int);

void      *isa_malloc(struct device *, int, size_t, int, int);
void	   isa_free(void *, int);
paddr_t	   isa_mappage(void *, off_t, int);
@


1.12.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: isadmavar.h,v 1.12.2.1 2002/06/11 03:42:21 art Exp $	*/
d50 17
@


1.11
log
@Merge bus_dma support from NetBSD, mostly by Jason Thorpe.  Only i386 uses it
 so far, the other archs gets placeholders for now.  I wrote a compatibility
layer for OpenBSD's old isadma code so we can still use our old
driver sources.  They will however get changed to native bus_dma use,
on a case by case basis.   Oh yes, I almost forgot, I kept our notion
of isadma being a device so DMA-less ISA-busses still work
@
text
@d1 1
a1 1
/*	$OpenBSD: isadmavar.h,v 1.10 1997/08/04 22:13:33 augustss Exp $	*/
d112 1
a112 1
int	   isa_mappage __P((void *, int, int));
@


1.11.10.1
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d112 1
a112 1
paddr_t	   isa_mappage __P((void *, off_t, int));
@


1.11.10.2
log
@Merge in -current from about a week ago
@
text
@d63 4
a66 4
int isadma_map(caddr_t, vm_size_t, struct isadma_seg *, int);
void isadma_unmap(caddr_t, vm_size_t, int, struct isadma_seg *);
void isadma_copytobuf(caddr_t, vm_size_t, int, struct isadma_seg *);
void isadma_copyfrombuf(caddr_t, vm_size_t, int, struct isadma_seg *);
d87 1
a87 1
void	   isa_dmacascade(struct device *, int);
d89 2
a90 2
int	   isa_dmamap_create(struct device *, int, bus_size_t, int);
void	   isa_dmamap_destroy(struct device *, int);
d92 21
a112 21
int	   isa_dmastart(struct device *, int, void *, bus_size_t,
	       struct proc *, int, int);
void	   isa_dmaabort(struct device *, int);
bus_size_t isa_dmacount(struct device *, int);
int	   isa_dmafinished(struct device *, int);
void	   isa_dmadone(struct device *, int);

int	   isa_dmamem_alloc(struct device *, int, bus_size_t,
	       bus_addr_t *, int);
void	   isa_dmamem_free(struct device *, int, bus_addr_t, bus_size_t);
int	   isa_dmamem_map(struct device *, int, bus_addr_t, bus_size_t,
	       caddr_t *, int);
void	   isa_dmamem_unmap(struct device *, int, caddr_t, size_t);
int	   isa_dmamem_mmap(struct device *, int, bus_addr_t, bus_size_t,
	       int, int, int);

int	   isa_drq_isfree(struct device *, int);

void      *isa_malloc(struct device *, int, size_t, int, int);
void	   isa_free(void *, int);
paddr_t	   isa_mappage(void *, off_t, int);
@


1.11.10.3
log
@Sync the SMP branch with 3.3
@
text
@d51 17
@


1.11.10.4
log
@Merge with the trunk
@
text
@a40 3
#ifndef _DEV_ISA_ISADMAVAR_H
#define _DEV_ISA_ISADMAVAR_H

a95 2

#endif /* _DEV_ISA_ISADMAVAR_H */
@


1.10
log
@Real DRQ usage tracking.
@
text
@d1 2
a2 2
/*	$OpenBSD: isadmavar.h,v 1.9 1997/12/21 14:41:24 downsj Exp $	*/
/*	$NetBSD: isadmavar.h,v 1.4 1996/03/01 04:08:46 mycroft Exp $	*/
d4 43
a46 3
#define	DMAMODE_WRITE	0
#define	DMAMODE_READ	1
#define	DMAMODE_LOOP	2
d48 2
a49 2
#define ISADMA_START_READ	DMAMODE_READ	/* read from device */
#define ISADMA_START_WRITE	DMAMODE_WRITE	/* write to device */
d60 1
d68 12
a79 7
int isadma_acquire __P((int));
void isadma_release __P((int));
void isadma_cascade __P((int));
void isadma_start __P((caddr_t, vm_size_t, int, int));
void isadma_abort __P((int));
int isadma_finished __P((int));
void isadma_done __P((int));
d81 10
a90 3
/*
 * XXX these are needed until all drivers have been cleaned up
 */
d92 21
a112 7
#define isa_dma_acquire(c)       isadma_acquire(c)
#define isa_dma_release(c)       isadma_release(c)
#define isa_dmacascade(c)	isadma_cascade((c))
#define isa_dmastart(f, a, s, c)	isadma_start((a), (s), (c), (f))
#define isa_dmaabort(c)		isadma_abort((c))
#define isa_dmafinished(c)	isadma_finished((c))
#define isa_dmadone(f, a, s, c)	isadma_done((c))
@


1.9
log
@Obliterate old PnP `code' and outright replace with christos' code.
@
text
@d1 1
a1 1
/*	$OpenBSD: isadmavar.h,v 1.8 1997/11/04 10:32:51 provos Exp $	*/
a28 1
int isadma_isdrqfree __P((int));
@


1.8
log
@fix autodma and high dma, also copy data only when using bounce
buffers.
semantics for isadma_acquire and isadma_release from freebsd.
@
text
@d1 1
a1 1
/*	$OpenBSD: isadmavar.h,v 1.7 1997/09/24 22:28:14 niklas Exp $	*/
d29 1
@


1.7
log
@Revert, as we won't have enough time to test this fully before release.
@
text
@d1 1
a1 1
/*	$OpenBSD: isadmavar.h,v 1.5 1996/11/29 22:55:02 niklas Exp $	*/
d27 2
d39 2
@


1.6
log
@Use vm_page_alloc_memory API. Some cleanup.
@
text
@a21 3
vm_offset_t isadma_alloc __P((vm_size_t, vm_offset_t, int));
caddr_t isadma_vaddr __P((vm_offset_t));
void isadma_free __P((vm_offset_t, vm_size_t));
@


1.5
log
@Missing pieces of new bus.h that CVS lost behind my back
@
text
@d1 1
a1 1
/*	$OpenBSD: isadmavar.h,v 1.3 1996/04/18 23:47:42 niklas Exp $	*/
d22 3
@


1.4
log
@Update aha.c to use bounce buffers, fix typos in isadma.c, update bounce buffers
@
text
@@


1.3
log
@NetBSD 960317 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d8 2
a9 2
#define ISADMA_START_READ	0x0001	/* read from device */
#define ISADMA_START_WRITE	0x0002	/* write to device */
d36 1
d41 1
a41 1
#define isa_dmadone(a, s, c, f)	isadma_abort((c))
@


1.2
log
@i386 isa bounce buffers by hannken@@eis.cs.tu-bs.de
ultra14f does not bounce properly yet.
@
text
@d1 6
a6 1
/*	$NetBSD: isadmavar.h,v 1.2 1994/10/27 04:17:09 cgd Exp $	*/
d30 1
d37 1
a37 2
#define isa_dmastart(f, a, s, c) \
    isadma_start((a), (s), (c), (f)&B_READ?ISADMA_START_READ:ISADMA_START_WRITE)
d39 1
@


1.1
log
@Initial revision
@
text
@d3 32
a34 4
void isa_dmacascade __P((int));
void isa_dmastart __P((int, caddr_t, vm_size_t, int));
void isa_dmaabort __P((int));
void isa_dmadone __P((int, caddr_t, vm_size_t, int));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
