head	1.10;
access;
symbols
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.10
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.6
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.9.0.20
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.18
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.16
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.12
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.8
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.36
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.32
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.34
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.30
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.28
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.26
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.24
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.22
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.20
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.18
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.16
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.14
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.12
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.10
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.8
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.7.0.6
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.4
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.6.0.14
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.12
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.10
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.8
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.6
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.4
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6;
locks; strict;
comment	@ * @;


1.10
date	2015.07.18.00.48.05;	author miod;	state Exp;
branches;
next	1.9;
commitid	zOVsbR9piOCLHrSg;

1.9
date	2010.08.28.12.48.14;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.56;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2000.11.15.20.17.38;	author aaron;	state Exp;
branches
	1.7.6.1;
next	1.6;

1.6
date	97.11.06.12.26.55;	author niklas;	state Exp;
branches
	1.6.10.1;
next	1.5;

1.5
date	97.11.06.02.53.42;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	97.11.04.22.07.43;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	97.08.22.22.26.00;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.07.09.02.58.38;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	97.01.24.19.57.29;	author niklas;	state Exp;
branches;
next	;

1.6.10.1
date	2001.05.14.22.24.53;	author niklas;	state Exp;
branches;
next	1.6.10.2;

1.6.10.2
date	2002.03.28.12.11.36;	author niklas;	state Exp;
branches;
next	;

1.7.6.1
date	2002.06.11.03.42.22;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Shuffle include file ordering in preparation for future changes in vgavar.h,
which will have it depend upon wsdisplayvar.h.
@
text
@/* $OpenBSD: vga_isa.c,v 1.9 2010/08/28 12:48:14 miod Exp $ */
/* $NetBSD: vga_isa.c,v 1.3 1998/06/12 18:45:48 drochner Exp $ */

/*
 * Copyright (c) 1995, 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/malloc.h>

#include <dev/isa/isavar.h>

#include <dev/ic/mc6845reg.h>
#include <dev/ic/pcdisplayvar.h>
#include <dev/ic/vgareg.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wsdisplayvar.h>

#include <dev/ic/vgavar.h>
#include <dev/isa/vga_isavar.h>

struct vga_isa_softc {
	struct device sc_dev; 
#if 0
	struct vga_config *sc_vc;	/* VGA configuration */
#endif
};

int	vga_isa_match(struct device *, void *, void *);
void	vga_isa_attach(struct device *, struct device *, void *);

struct cfattach vga_isa_ca = {
	sizeof(struct vga_isa_softc), vga_isa_match, vga_isa_attach,
};

int
vga_isa_match(struct device *parent, void *match, void *aux)
{
	struct isa_attach_args *ia = aux;

	/* If values are hardwired to something that they can't be, punt. */
	if ((ia->ia_iobase != IOBASEUNK && ia->ia_iobase != 0x3b0) ||
	    /* ia->ia_iosize != 0 || XXX isa.c */
	    (ia->ia_maddr != MADDRUNK && ia->ia_maddr != 0xa0000) ||
	    (ia->ia_msize != 0 && ia->ia_msize != 0x20000) ||
	    ia->ia_irq != IRQUNK || ia->ia_drq != DRQUNK)
		return (0);

	if (!vga_is_console(ia->ia_iot, WSDISPLAY_TYPE_ISAVGA) &&
	    !vga_common_probe(ia->ia_iot, ia->ia_memt))
		return (0);

	ia->ia_iobase = 0x3b0;	/* XXX mono 0x3b0 color 0x3c0 */
	ia->ia_iosize = 0x30;	/* XXX 0x20 */
	ia->ia_maddr = 0xa0000;
	ia->ia_msize = 0x20000;
	return (2);	/* more than generic pcdisplay */
}

void
vga_isa_attach(struct device *parent, struct device *self, void *aux)
{
	struct isa_attach_args *ia = aux;
#if 0
	struct vga_isa_softc *sc = (struct vga_isa_softc *)self;
#endif

	printf("\n");

	vga_common_attach(self, ia->ia_iot, ia->ia_memt,
			  WSDISPLAY_TYPE_ISAVGA);
}

int
vga_isa_cnattach(bus_space_tag_t iot, bus_space_tag_t memt)
{
	return (vga_cnattach(iot, memt, WSDISPLAY_TYPE_ISAVGA, 1));
}
@


1.9
log
@ansify function definitions, and constify a few arrays while there.
no functional change.
@
text
@d1 1
a1 1
/* $OpenBSD: vga_isa.c,v 1.8 2002/03/14 01:26:56 millert Exp $ */
a41 2
#include <dev/ic/vgavar.h>
#include <dev/isa/vga_isavar.h>
d45 3
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/* $OpenBSD: vga_isa.c,v 1.7 2000/11/15 20:17:38 aaron Exp $ */
d63 1
a63 4
vga_isa_match(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
d87 1
a87 3
vga_isa_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d101 1
a101 2
vga_isa_cnattach(iot, memt)
	bus_space_tag_t iot, memt;
@


1.7
log
@Updated VGA driver; from NetBSD. Needed for wscons on i386 and alpha. These
files could probably be updated even a bit further (they are from mid-summer).

In addition, I've added support for console scrollback, somewhat inspired by
Linux's vgacon driver. Basically, instead of allocating our own buffer and
doing lots of copies, we take advantage of Video RAM and just modify the VGA
display origin register as appropriate. This approach has a few advantages:
simple to implement, no wasted KVM, it's fast, and after a boot you can now
scroll back all the way to the BIOS messages (assuming your msgbuf is of a
typical length :). Disadvantages are that the VRAM buffer is relatively
small (only 32k) and we do not support raster devices through this method.
(thanks to mickey@@ for pointing this out).

The code for this is fairly unobtrusive, so should we come up with a better
approach to console scrollback at a later time (i.e., even more platform
independent) it should be easy to revert this.

We're one step further in porting nice features of PCVT over to wscons.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d55 2
a56 2
int	vga_isa_match __P((struct device *, void *, void *));
void	vga_isa_attach __P((struct device *, struct device *, void *));
@


1.7.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: vga_isa.c,v 1.7 2000/11/15 20:17:38 aaron Exp $ */
d55 2
a56 2
int	vga_isa_match(struct device *, void *, void *);
void	vga_isa_attach(struct device *, struct device *, void *);
@


1.6
log
@Add some missing things for the MI vga driver.  Move wscons to an MI place as
well.  $OpenBSD$ tagging
@
text
@d1 2
a2 2
/*	$OpenBSD: vga_isa.c,v 1.4 1996/12/05 01:39:32 cgd Exp $	*/
/*	$NetBSD: vga_isa.c,v 1.4 1996/12/05 01:39:32 cgd Exp $	*/
d37 1
a37 2
#include <machine/autoconf.h>
#include <machine/pte.h>
d39 3
a41 1
#include <dev/isa/isavar.h>
d45 3
d50 3
a52 2
 
	struct vga_config *sc_vc;	/* VGA configuration */ 
a54 1
#ifdef __BROKEN_INDIRECT_CONFIG
a55 3
#else
int	vga_isa_match __P((struct device *, struct cfdata *, void *));
#endif
a57 3
int	vgaisammap __P((void *, off_t, int));
int	vgaisaioctl __P((void *, u_long, caddr_t, int, struct proc *));

a61 3
int vga_isa_console_tag;			/* really just a boolean. */
struct vga_config vga_isa_console_vc;

a64 1
#ifdef __BROKEN_INDIRECT_CONFIG
a65 3
#else
	struct cfdata *match;
#endif
a68 6
	int rv;
	static int matched;

	/* There can be only one.  */
	if (matched)
		return (0);
d71 4
a74 3
	if (ia->ia_iobase != IOBASEUNK || /* ia->ia_iosize != 0 || XXX isa.c */
	    (ia->ia_maddr != MADDRUNK && ia->ia_maddr != 0xb8000) ||
	    (ia->ia_msize != 0 && ia->ia_msize != 0x8000) ||
d78 3
a80 1
	rv = vga_isa_console_tag || vga_common_probe(ia->ia_iot, ia->ia_memt);
d82 5
a86 8
	if (rv) {
		ia->ia_iobase = 0x3b0;
		ia->ia_iosize = 0x30;
		ia->ia_maddr = 0xb8000;
		ia->ia_msize = 0x8000;
		matched = 1;
	}
	return (rv);
d95 1
d97 1
a97 15
	struct vga_config *vc;
	int console;

	console = vga_isa_console_tag;
	if (console)
		vc = sc->sc_vc = &vga_isa_console_vc;
	else {
		vc = sc->sc_vc = (struct vga_config *)
		    malloc(sizeof(struct vga_config), M_DEVBUF, M_WAITOK);

		/* set up bus-independent VGA configuration */
		vga_common_setup(ia->ia_iot, ia->ia_memt, vc);
	}
	vc->vc_mmap = vgaisammap;
	vc->vc_ioctl = vgaisaioctl;
d101 2
a102 1
	vga_wscons_attach(self, vc, console);
d106 1
a106 9
vga_isa_console_match(iot, memt)
	bus_space_tag_t iot, memt;
{

	return (vga_common_probe(iot, memt));
}

void
vga_isa_console_attach(iot, memt)
d109 1
a109 33
	struct vga_config *vc = &vga_isa_console_vc;

	/* for later recognition */
	vga_isa_console_tag = 1;

	/* set up bus-independent VGA configuration */
	vga_common_setup(iot, memt, vc);

	vga_wscons_console(vc);
}

int
vgaisaioctl(v, cmd, data, flag, p)
	void *v;
	u_long cmd;
	caddr_t data;
	int flag;
	struct proc *p;
{
	struct vga_isa_softc *sc = v;

	return (vgaioctl(sc->sc_vc, cmd, data, flag, p));
}

int
vgaisammap(v, offset, prot)
	void *v;
	off_t offset;
	int prot;
{
	struct vga_isa_softc *sc = v;

	return (vgammap(sc->sc_vc, offset, prot));
@


1.6.10.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/* $OpenBSD: vga_isa.c,v 1.7 2000/11/15 20:17:38 aaron Exp $ */
/* $NetBSD: vga_isa.c,v 1.3 1998/06/12 18:45:48 drochner Exp $ */
d37 3
a40 4

#include <dev/ic/mc6845reg.h>
#include <dev/ic/pcdisplayvar.h>
#include <dev/ic/vgareg.h>
a43 3
#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wsdisplayvar.h>

d46 2
a47 3
#if 0
	struct vga_config *sc_vc;	/* VGA configuration */
#endif
d50 1
d52 3
d57 3
d64 3
d70 1
d72 3
d78 6
d86 3
a88 4
	if ((ia->ia_iobase != IOBASEUNK && ia->ia_iobase != 0x3b0) ||
	    /* ia->ia_iosize != 0 || XXX isa.c */
	    (ia->ia_maddr != MADDRUNK && ia->ia_maddr != 0xa0000) ||
	    (ia->ia_msize != 0 && ia->ia_msize != 0x20000) ||
d92 1
a92 3
	if (!vga_is_console(ia->ia_iot, WSDISPLAY_TYPE_ISAVGA) &&
	    !vga_common_probe(ia->ia_iot, ia->ia_memt))
		return (0);
d94 8
a101 5
	ia->ia_iobase = 0x3b0;	/* XXX mono 0x3b0 color 0x3c0 */
	ia->ia_iosize = 0x30;	/* XXX 0x20 */
	ia->ia_maddr = 0xa0000;
	ia->ia_msize = 0x20000;
	return (2);	/* more than generic pcdisplay */
a109 1
#if 0
d111 15
a125 1
#endif
d129 1
a129 2
	vga_common_attach(self, ia->ia_iot, ia->ia_memt,
			  WSDISPLAY_TYPE_ISAVGA);
d133 9
a141 1
vga_isa_cnattach(iot, memt)
d144 33
a176 1
	return (vga_cnattach(iot, memt, WSDISPLAY_TYPE_ISAVGA, 1));
@


1.6.10.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d55 2
a56 2
int	vga_isa_match(struct device *, void *, void *);
void	vga_isa_attach(struct device *, struct device *, void *);
@


1.5
log
@We need an MI vga driver.  The alpha one was most MI.  Not entirely yet though.
Some files were move behind CVS back.
@
text
@d1 1
@


1.4
log
@Support ISA VGA for real on DEC AXPPCI 33
@
text
@d40 2
a41 3

#include <alpha/dev/vgavar.h>
#include <alpha/isa/vga_isavar.h>
@


1.3
log
@wscons -> vga_xxx -> vga mmap() support. first cut
@
text
@d79 5
d92 1
a92 4
	if (vga_isa_console_tag)
		return (1);

	rv = vga_common_probe(ia->ia_iot, ia->ia_memt);
d99 1
@


1.2
log
@alpha/common/ insults my filec
@
text
@d57 3
d121 2
d150 24
@


1.1
log
@Sync with NetBSD 961207
@
text
@d41 1
a41 1
#include <alpha/common/vgavar.h>
@
