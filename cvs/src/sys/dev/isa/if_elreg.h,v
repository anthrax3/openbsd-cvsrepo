head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.82
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.84
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.80
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.70
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.78
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.76
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.74
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.72
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.68
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.66
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.64
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.62
	OPENBSD_5_0:1.2.0.60
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.58
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.56
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.52
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.54
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.50
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.48
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.46
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.44
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.42
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.40
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.38
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.36
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.34
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.32
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.30
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.28
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.26
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.24
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.22
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.20
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.18
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.16
	OPENBSD_2_8:1.2.0.14
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.12
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.10
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.8
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd:1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.2
date	97.11.07.08.06.50;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.35;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.35;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.2
log
@$OpenBSD$
@
text
@/*	$OpenBSD: if_elreg.h,v 1.4 1994/10/27 04:17:29 cgd Exp $	*/
/*	$NetBSD: if_elreg.h,v 1.4 1994/10/27 04:17:29 cgd Exp $	*/

/*
 * Copyright (c) 1994, Matthew E. Kimmel.  Permission is hereby granted
 * to use, copy, modify and distribute this software provided that both
 * the copyright notice and this permission notice appear in all copies
 * of the software, derivative works or modified versions, and any
 * portions thereof.
 */

/*
 * 3COM Etherlink 3C501 Register Definitions
 */

/*
 * I/O Ports
 */
#define	EL_RXS		0x6	/* Receive status register */
#define	EL_RXC		0x6	/* Receive command register */
#define	EL_TXS		0x7	/* Transmit status register */
#define	EL_TXC		0x7	/* Transmit command register */
#define	EL_GPBL		0x8	/* GP buffer ptr low byte */
#define	EL_GPBH		0x9	/* GP buffer ptr high byte */
#define	EL_RBL		0xa	/* Receive buffer ptr low byte */
#define	EL_RBC		0xa	/* Receive buffer clear */
#define	EL_RBH		0xb	/* Receive buffer ptr high byte */
#define	EL_EAW		0xc	/* Ethernet address window */
#define	EL_AS		0xe	/* Auxillary status register */
#define	EL_AC		0xe	/* Auxillary command register */
#define	EL_BUF		0xf	/* Data buffer */

/* Receive status register bits */
#define	EL_RXS_OFLOW	0x01	/* Overflow error */
#define	EL_RXS_FCS	0x02	/* FCS error */
#define	EL_RXS_DRIB	0x04	/* Dribble error */
#define	EL_RXS_SHORT	0x08	/* Short frame */
#define	EL_RXS_NOFLOW	0x10	/* No overflow */
#define	EL_RXS_GOOD	0x20	/* Received good frame */
#define	EL_RXS_STALE	0x80	/* Stale receive status */

/* Receive command register bits */
#define	EL_RXC_DISABLE	0x00	/* Receiver disabled */
#define	EL_RXC_DOFLOW	0x01	/* Detect overflow */
#define	EL_RXC_DFCS	0x02	/* Detect FCS errs */
#define	EL_RXC_DDRIB	0x04	/* Detect dribble errors */
#define	EL_RXC_DSHORT	0x08	/* Detect short frames */
#define	EL_RXC_DNOFLOW	0x10	/* Detect frames w/o overflow ??? */
#define	EL_RXC_AGF	0x20	/* Accept Good Frames */
#define	EL_RXC_PROMISC	0x40	/* Promiscuous mode */
#define	EL_RXC_ABROAD	0x80	/* Accept address, broadcast */
#define	EL_RXC_AMULTI	0xc0	/* Accept address, multicast */

/* Transmit status register bits */
#define	EL_TXS_UFLOW	0x01	/* Underflow */
#define	EL_TXS_COLL	0x02	/* Collision */
#define	EL_TXS_COLL16	0x04	/* Collision 16 */
#define	EL_TXS_READY	0x08	/* Ready for new frame */

/* Transmit command register bits */
#define	EL_TXC_DUFLOW	0x01	/* Detect underflow */
#define	EL_TXC_DCOLL	0x02	/* Detect collisions */
#define	EL_TXC_DCOLL16	0x04	/* Detect collision 16 */
#define	EL_TXC_DSUCCESS	0x08	/* Detect success */

/* Auxillary status register bits */
#define	EL_AS_RXBUSY	0x01	/* Receive busy */
#define	EL_AS_DMADONE	0x10	/* DMA finished */
#define	EL_AS_TXBUSY	0x80	/* Transmit busy */

/* Auxillary command register bits */
#define	EL_AC_HOST	0x00	/* System bus can access buffer */
#define	EL_AC_IRQE	0x01	/* IRQ enable */
#define	EL_AC_TXBAD	0x02	/* Transmit frames with bad FCS */
#define	EL_AC_TXFRX	0x04	/* Transmit followed by receive */
#define	EL_AC_RX	0x08	/* Receive */
#define	EL_AC_LB	0x0c	/* Loopback */
#define	EL_AC_DRQ	0x20	/* DMA request */
#define	EL_AC_RIDE	0x40	/* DRQ and IRQ enabled */
#define	EL_AC_RESET	0x80	/* Reset */

/* Packet buffer size */
#define	EL_BUFSIZ	2048
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
