head	1.13;
access;
symbols
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.4
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.10.0.18
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.18
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.14
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.12
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.10
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.8
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.6
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.5.0.16
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.14
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.12
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.10
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.3.0.6
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.8
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.6
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.4
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.01.08.15.54.13;	author jcs;	state Exp;
branches;
next	1.12;
commitid	kI4H556ZKYkRQGw5;

1.12
date	2014.09.21.04.29.42;	author jsg;	state Exp;
branches;
next	1.11;
commitid	R8fkGMRtXH44QjwK;

1.11
date	2014.09.14.14.17.25;	author jsg;	state Exp;
branches;
next	1.10;
commitid	uzzBR7hz9ncd4O6G;

1.10
date	2010.08.20.02.34.15;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2010.07.31.16.04.50;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.13.20.55.41;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.12.20.04.16;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.02.05.21.40;	author brad;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.03.16.05;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.26.56;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.04.17.04.30.50;	author aaron;	state Exp;
branches
	1.3.6.1;
next	1.2;

1.2
date	2000.06.30.06.55.53;	author art;	state Exp;
branches;
next	1.1;

1.1
date	99.01.02.00.02.44;	author niklas;	state Exp;
branches
	1.1.6.1;
next	;

1.1.6.1
date	2001.05.14.22.24.48;	author niklas;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2002.03.28.12.11.35;	author niklas;	state Exp;
branches;
next	;

1.3.6.1
date	2002.06.11.03.42.22;	author art;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Move HID support files out of dev/usb into new dev/hid directory

These files aren't USB-specific and were used by the previous
Bluetooth implementation, and will be used by the upcoming
HID-over-i2C implementation

ok deraadt
previous version ok kettenis and mpi
@
text
@/* $OpenBSD: pcppi.c,v 1.12 2014/09/21 04:29:42 jsg Exp $ */
/* $NetBSD: pcppi.c,v 1.1 1998/04/15 20:26:18 drochner Exp $ */

/*
 * Copyright (c) 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/errno.h>
#include <sys/timeout.h>

#include <machine/bus.h>

#include <dev/isa/isareg.h>
#include <dev/isa/isavar.h>
#include <dev/isa/pcppireg.h>
#include <dev/isa/pcppivar.h>

#include <dev/ic/i8253reg.h>

#include "pckbd.h"
#include "hidkbd.h"
#if NPCKBD > 0 || NHIDKBD > 0
#include <dev/ic/pckbcvar.h>
#include <dev/pckbc/pckbdvar.h>
#include <dev/hid/hidkbdvar.h>
void	pcppi_kbd_bell(void *, u_int, u_int, u_int, int);
#endif

struct pcppi_softc {
	struct device sc_dv;

	bus_space_tag_t sc_iot;
	bus_space_handle_t sc_ppi_ioh, sc_pit1_ioh;

	struct timeout sc_bell_timeout;

	int sc_bellactive, sc_bellpitch;
	int sc_slp;
	int sc_timeout;
};

int	pcppi_match(struct device *, void *, void *);
void	pcppi_attach(struct device *, struct device *, void *);

struct cfattach pcppi_ca = {
	sizeof(struct pcppi_softc), pcppi_match, pcppi_attach,
};

struct cfdriver pcppi_cd = {
	NULL, "pcppi", DV_DULL
};

static void pcppi_bell_stop(void *);

#define PCPPIPRI (PZERO - 1)

int
pcppi_match(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
{
	struct isa_attach_args *ia = aux;
	bus_space_handle_t ppi_ioh, pit1_ioh;
	int have_pit1, have_ppi, rv;
	u_int8_t v, nv;

	/* If values are hardwired to something that they can't be, punt. */
	if ((ia->ia_iobase != IOBASEUNK && ia->ia_iobase != IO_PPI) ||
	    ia->ia_maddr != MADDRUNK || ia->ia_msize != 0 ||
	    ia->ia_irq != IRQUNK || ia->ia_drq != DRQUNK)
		return (0);

	rv = 0;
	have_pit1 = have_ppi = 0;

	if (bus_space_map(ia->ia_iot, IO_TIMER1, 4, 0, &pit1_ioh))
		goto lose;
	have_pit1 = 1;
	if (bus_space_map(ia->ia_iot, IO_PPI, 1, 0, &ppi_ioh))
		goto lose;
	have_ppi = 1;

	/*
	 * Check for existence of PPI.  Realistically, this is either going to
	 * be here or nothing is going to be here.
	 *
	 * We don't want to have any chance of changing speaker output (which
	 * this test might, if it crashes in the middle, or something;
	 * normally it's be to quick to produce anthing audible), but
	 * many "combo chip" mock-PPI's don't seem to support the top bit
	 * of Port B as a settable bit.  The bottom bit has to be settable,
	 * since the speaker driver hardware still uses it.
	 */
	v = bus_space_read_1(ia->ia_iot, ppi_ioh, 0);		/* XXX */
	bus_space_write_1(ia->ia_iot, ppi_ioh, 0, v ^ 0x01);	/* XXX */
	nv = bus_space_read_1(ia->ia_iot, ppi_ioh, 0);		/* XXX */
	if (((nv ^ v) & 0x01) == 0x01)
		rv = 1;
	bus_space_write_1(ia->ia_iot, ppi_ioh, 0, v);		/* XXX */
	nv = bus_space_read_1(ia->ia_iot, ppi_ioh, 0);		/* XXX */
	if (((nv ^ v) & 0x01) != 0x00) {
		rv = 0;
		goto lose;
	}

	/*
	 * We assume that the programmable interval timer is there.
	 */

lose:
	if (have_pit1)
		bus_space_unmap(ia->ia_iot, pit1_ioh, 4);
	if (have_ppi)
		bus_space_unmap(ia->ia_iot, ppi_ioh, 1);
	if (rv) {
		ia->ia_iobase = IO_PPI;
		ia->ia_iosize = 0x1;
		ia->ia_msize = 0x0;
	}
	return (rv);
}

void
pcppi_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct pcppi_softc *sc = (struct pcppi_softc *)self;
	struct isa_attach_args *ia = aux;
	bus_space_tag_t iot;
	struct pcppi_attach_args pa;

	timeout_set(&sc->sc_bell_timeout, pcppi_bell_stop, sc);

	sc->sc_iot = iot = ia->ia_iot;

	if (bus_space_map(iot, IO_TIMER1, 4, 0, &sc->sc_pit1_ioh) ||
	    bus_space_map(iot, IO_PPI, 1, 0, &sc->sc_ppi_ioh))
		panic("pcppi_attach: couldn't map");

	printf("\n");

	sc->sc_bellactive = sc->sc_bellpitch = sc->sc_slp = 0;

	/* Provide a beeper for the keyboard, if there isn't one already. */
#if NPCKBD > 0
	pckbd_hookup_bell(pcppi_kbd_bell, sc);
#endif
#if NHIDKBD > 0
	hidkbd_hookup_bell(pcppi_kbd_bell, sc);
#endif

	pa.pa_cookie = sc;
	while (config_found(self, &pa, 0))
		;
}

void
pcppi_bell(self, pitch, period, slp)
	pcppi_tag_t self;
	int pitch, period;
	int slp;
{
	struct pcppi_softc *sc = self;
	int s1, s2;

	s1 = spltty(); /* ??? */
	if (sc->sc_bellactive) {
		if (sc->sc_timeout) {
			sc->sc_timeout = 0;
			timeout_del(&sc->sc_bell_timeout);
		}
		if (sc->sc_slp)
			wakeup(pcppi_bell_stop);
	}
	if (pitch == 0 || period == 0) {
		pcppi_bell_stop(sc);
		sc->sc_bellpitch = 0;
		splx(s1);
		return;
	}
	if (!sc->sc_bellactive || sc->sc_bellpitch != pitch) {
		s2 = splhigh();
		bus_space_write_1(sc->sc_iot, sc->sc_pit1_ioh, TIMER_MODE,
		    TIMER_SEL2 | TIMER_16BIT | TIMER_SQWAVE);
		bus_space_write_1(sc->sc_iot, sc->sc_pit1_ioh, TIMER_CNTR2,
		    TIMER_DIV(pitch) % 256);
		bus_space_write_1(sc->sc_iot, sc->sc_pit1_ioh, TIMER_CNTR2,
		    TIMER_DIV(pitch) / 256);
		splx(s2);
		/* enable speaker */
		bus_space_write_1(sc->sc_iot, sc->sc_ppi_ioh, 0,
			bus_space_read_1(sc->sc_iot, sc->sc_ppi_ioh, 0)
			| PIT_SPKR);
	}
	sc->sc_bellpitch = pitch;

	sc->sc_bellactive = 1;

	if (slp & PCPPI_BELL_POLL) {
		delay((period * 1000000) / hz);
		pcppi_bell_stop(sc);
	} else {
		sc->sc_timeout = 1;
		timeout_add(&sc->sc_bell_timeout, period);
		if (slp & PCPPI_BELL_SLEEP) {
			sc->sc_slp = 1;
			tsleep(pcppi_bell_stop, PCPPIPRI | PCATCH, "bell", 0);
			sc->sc_slp = 0;
		}
	}
	splx(s1);
}

static void
pcppi_bell_stop(arg)
	void *arg;
{
	struct pcppi_softc *sc = arg;
	int s;

	s = spltty(); /* ??? */
	sc->sc_timeout = 0;

	/* disable bell */
	bus_space_write_1(sc->sc_iot, sc->sc_ppi_ioh, 0,
			  bus_space_read_1(sc->sc_iot, sc->sc_ppi_ioh, 0)
			  & ~PIT_SPKR);
	sc->sc_bellactive = 0;
	if (sc->sc_slp)
		wakeup(pcppi_bell_stop);
	splx(s);
}

#if NPCKBD > 0 || NHIDKBD > 0
void
pcppi_kbd_bell(arg, pitch, period, volume, poll)
	void *arg;
	u_int pitch, period, volume;
	int poll;
{
	/*
	 * Comes in as ms, goes out as ticks; volume ignored.
	 */
	pcppi_bell(arg, volume ? pitch : 0, (period * hz) / 1000,
	    poll ? PCPPI_BELL_POLL : 0);
}
#endif /* NPCKBD > 0 || NHIDKBD > 0 */
@


1.12
log
@Directly include sys/timeout.h so we don't depend on
indirectly including it via dev/ic/pckbcvar.h

Fixes kernel builds without ukbd(4) and pckbd(4).

From Atticus on tech@@
@
text
@d1 1
a1 1
/* $OpenBSD: pcppi.c,v 1.11 2014/09/14 14:17:25 jsg Exp $ */
d52 1
a52 1
#include <dev/usb/hidkbdvar.h>
@


1.11
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/* $OpenBSD: pcppi.c,v 1.10 2010/08/20 02:34:15 deraadt Exp $ */
d36 1
@


1.10
log
@fix an annoying indentation glitch
@
text
@d1 1
a1 1
/* $OpenBSD: pcppi.c,v 1.9 2010/07/31 16:04:50 miod Exp $ */
a33 1
#include <sys/proc.h>
@


1.9
log
@Factorization of the bluetooth and usb hid input driver logic, to reduce code
duplication and divergence.
Thanks to mlarkin@@ for bluetooth devices tests.
@
text
@d1 1
a1 1
/* $OpenBSD: pcppi.c,v 1.8 2009/10/13 20:55:41 miod Exp $ */
d182 2
a183 1
	while (config_found(self, &pa, 0));
@


1.8
log
@Connect pcppi bell to ukbd, so that x86 systems with usb console keyboard
can cause beeps on console. Reported by Greg Jones on misc@@
@
text
@d1 1
a1 1
/* $OpenBSD: pcppi.c,v 1.7 2006/02/12 20:04:16 miod Exp $ */
d48 2
a49 2
#include "ukbd.h"
#if NPCKBD > 0 || NUKBD > 0
d52 1
a52 1
#include <dev/usb/ukbdvar.h>
d177 2
a178 2
#if NUKBD > 0
	ukbd_hookup_bell(pcppi_kbd_bell, sc);
d262 1
a262 1
#if NPCKBD > 0 || NUKBD > 0
d275 1
a275 1
#endif /* NPCKBD > 0 || NUKBD > 0 */
@


1.7
log
@Do not bell if keyboard.bell.volume=0;
reported by Michael Knudsen (mk, molioner dk)
@
text
@d1 1
a1 1
/* $OpenBSD: pcppi.c,v 1.6 2006/01/02 05:21:40 brad Exp $ */
d48 2
a49 1
#if NPCKBD > 0
d52 2
a53 2

void	pcppi_pckbd_bell(void *, u_int, u_int, u_int, int);
d173 1
d175 4
a178 2
	/* Provide a beeper for the PC Keyboard, if there isn't one already. */
	pckbd_hookup_bell(pcppi_pckbd_bell, sc);
d262 1
a262 1
#if NPCKBD > 0
d264 1
a264 1
pcppi_pckbd_bell(arg, pitch, period, volume, poll)
d275 1
a275 1
#endif /* NPCKBD > 0 */
@


1.6
log
@remove last traces of __BROKEN_INDIRECT_CONFIG.

Thanks to aanriot@@ and Michael Knudsen for checking that alpha/i386/macppc
kernels still compile.
@
text
@d1 1
a1 1
/* $OpenBSD: pcppi.c,v 1.5 2002/03/14 03:16:05 millert Exp $ */
d268 1
a268 1
	pcppi_bell(arg, pitch, (period * hz) / 1000,
@


1.5
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/* $OpenBSD: pcppi.c,v 1.4 2002/03/14 01:26:56 millert Exp $ */
a67 2
#define __BROKEN_INDIRECT_CONFIG /* XXX */
#ifdef __BROKEN_INDIRECT_CONFIG
a68 3
#else
int	pcppi_match(struct device *, struct cfdata *, void *);
#endif
a85 1
#ifdef __BROKEN_INDIRECT_CONFIG
a86 3
#else
	struct cfdata *match;
#endif
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/* $OpenBSD: pcppi.c,v 1.3 2001/04/17 04:30:50 aaron Exp $ */
d84 1
a84 1
static void pcppi_bell_stop(void*);
@


1.3
log
@Implement cnbell(), an optional entrypoint that rings the console bell; from
NetBSD. deraadt@@ ok
@
text
@d1 1
a1 1
/* $OpenBSD: pcppi.c,v 1.2 2000/06/30 06:55:53 art Exp $ */
d52 1
a52 1
void	pcppi_pckbd_bell __P((void *, u_int, u_int, u_int, int));
d70 1
a70 1
int	pcppi_match __P((struct device *, void *, void *));
d72 1
a72 1
int	pcppi_match __P((struct device *, struct cfdata *, void *));
d74 1
a74 1
void	pcppi_attach __P((struct device *, struct device *, void *));
d84 1
a84 1
static void pcppi_bell_stop __P((void*));
@


1.3.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: pcppi.c,v 1.3 2001/04/17 04:30:50 aaron Exp $ */
d52 1
a52 1
void	pcppi_pckbd_bell(void *, u_int, u_int, u_int, int);
d70 1
a70 1
int	pcppi_match(struct device *, void *, void *);
d72 1
a72 1
int	pcppi_match(struct device *, struct cfdata *, void *);
d74 1
a74 1
void	pcppi_attach(struct device *, struct device *, void *);
d84 1
a84 1
static void pcppi_bell_stop(void *);
@


1.2
log
@New timeout API.
@
text
@d1 1
a1 1
/* $OpenBSD: pcppi.c,v 1.1 1999/01/02 00:02:44 niklas Exp $ */
d47 8
d61 2
d65 1
a65 1
	struct timeout sc_bell_timeout;
d169 2
d180 5
a184 1
	timeout_set(&sc->sc_bell_timeout, pcppi_bell_stop, sc);
d201 4
a204 1
		timeout_del(&sc->sc_bell_timeout);
d231 12
a242 5
	timeout_add(&sc->sc_bell_timeout, period);
	if (slp) {
		sc->sc_slp = 1;
		tsleep(pcppi_bell_stop, PCPPIPRI | PCATCH, "bell", 0);
		sc->sc_slp = 0;
d255 2
d266 15
@


1.1
log
@Midi & sequencer support from NetBSD, mostly by Lennart Augustsson
@
text
@d1 1
a1 1
/* $OpenBSD: pcppi.c,v 1.1 1998/04/15 20:26:18 drochner Exp $ */
d55 1
d168 1
d185 1
a185 1
		untimeout(pcppi_bell_stop, sc);
d212 1
a212 1
	timeout(pcppi_bell_stop, sc, period);
@


1.1.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/* $OpenBSD: pcppi.c,v 1.3 2001/04/17 04:30:50 aaron Exp $ */
a46 8
#include "pckbd.h"
#if NPCKBD > 0
#include <dev/ic/pckbcvar.h>
#include <dev/pckbc/pckbdvar.h>

void	pcppi_pckbd_bell __P((void *, u_int, u_int, u_int, int));
#endif

a52 2
	struct timeout sc_bell_timeout;

a54 1
	int sc_timeout;
a157 2
	timeout_set(&sc->sc_bell_timeout, pcppi_bell_stop, sc);

a167 5
#if NPCKBD > 0
	/* Provide a beeper for the PC Keyboard, if there isn't one already. */
	pckbd_hookup_bell(pcppi_pckbd_bell, sc);
#endif

d183 1
a183 4
		if (sc->sc_timeout) {
			sc->sc_timeout = 0;
			timeout_del(&sc->sc_bell_timeout);
		}
d210 5
a214 12

	if (slp & PCPPI_BELL_POLL) {
		delay((period * 1000000) / hz);
		pcppi_bell_stop(sc);
	} else {
		sc->sc_timeout = 1;
		timeout_add(&sc->sc_bell_timeout, period);
		if (slp & PCPPI_BELL_SLEEP) {
			sc->sc_slp = 1;
			tsleep(pcppi_bell_stop, PCPPIPRI | PCATCH, "bell", 0);
			sc->sc_slp = 0;
		}
a226 2
	sc->sc_timeout = 0;

a235 15

#if NPCKBD > 0
void
pcppi_pckbd_bell(arg, pitch, period, volume, poll)
	void *arg;
	u_int pitch, period, volume;
	int poll;
{
	/*
	 * Comes in as ms, goes out as ticks; volume ignored.
	 */
	pcppi_bell(arg, pitch, (period * hz) / 1000,
	    poll ? PCPPI_BELL_POLL : 0);
}
#endif /* NPCKBD > 0 */
@


1.1.6.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d52 1
a52 1
void	pcppi_pckbd_bell(void *, u_int, u_int, u_int, int);
d70 1
a70 1
int	pcppi_match(struct device *, void *, void *);
d72 1
a72 1
int	pcppi_match(struct device *, struct cfdata *, void *);
d74 1
a74 1
void	pcppi_attach(struct device *, struct device *, void *);
d84 1
a84 1
static void pcppi_bell_stop(void *);
@


