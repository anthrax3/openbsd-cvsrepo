head	1.18;
access;
symbols
	OPENBSD_6_0:1.17.0.12
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.10
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.8
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.48
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.46
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.44
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.42
	OPENBSD_5_0:1.16.0.40
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.38
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.36
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.32
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.34
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.30
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.28
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.26
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.24
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.22
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.20
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.18
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.16
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.14
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.12
	OPENBSD_3_6_BASE:1.16
	SMP_SYNC_A:1.16
	SMP_SYNC_B:1.16
	OPENBSD_3_5:1.16.0.10
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.8
	OPENBSD_3_4_BASE:1.16
	UBC_SYNC_A:1.16
	OPENBSD_3_3:1.16.0.6
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.16.0.4
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	UBC_SYNC_B:1.16
	UBC:1.13.0.2
	UBC_BASE:1.13
	OPENBSD_3_0:1.12.0.4
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_8:1.11.0.8
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.6
	OPENBSD_2_7_BASE:1.11
	SMP:1.11.0.4
	SMP_BASE:1.11
	kame_19991208:1.11
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd:1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2016.09.14.06.12.19;	author ratchov;	state Exp;
branches;
next	1.17;
commitid	pi1a9KN0itEngOc4;

1.17
date	2013.11.29.03.39.00;	author brad;	state Exp;
branches;
next	1.16;

1.16
date	2002.03.14.03.16.05;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.14.01.26.56;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.20.19.56.53;	author ericj;	state Exp;
branches;
next	1.13;

1.13
date	2001.10.31.11.00.24;	author art;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	2001.02.03.05.22.24;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	99.08.05.05.32.41;	author deraadt;	state Exp;
branches
	1.11.4.1;
next	1.10;

1.10
date	99.07.20.16.36.05;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	99.01.02.00.02.47;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	98.04.26.21.03.01;	author provos;	state Exp;
branches;
next	1.7;

1.7
date	97.07.10.23.06.38;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	96.11.29.22.55.07;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.05.07.07.37.46;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.04.18.23.47.48;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.03.08.16.43.15;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.06.31.55;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.37;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.37;	author deraadt;	state Exp;
branches;
next	;

1.11.4.1
date	2001.05.14.22.24.51;	author niklas;	state Exp;
branches;
next	1.11.4.2;

1.11.4.2
date	2001.11.13.21.10.01;	author niklas;	state Exp;
branches;
next	1.11.4.3;

1.11.4.3
date	2002.03.06.02.11.44;	author niklas;	state Exp;
branches;
next	1.11.4.4;

1.11.4.4
date	2002.03.28.12.11.36;	author niklas;	state Exp;
branches;
next	;

1.13.2.1
date	2002.01.31.22.55.33;	author niklas;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2002.06.11.03.42.22;	author art;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Remove drain(), query_encoding(), mappage() and get_default_params()
methods from all audio drivers and from the audio_if structure as they
are never called.
@
text
@/*	$OpenBSD: sbdspvar.h,v 1.16 2002/03/14 03:16:05 millert Exp $	*/
/*	$NetBSD: sbdspvar.h,v 1.37 1998/08/10 00:20:39 mycroft Exp $	*/

/*
 * Copyright (c) 1991-1993 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the Computer Systems
 *	Engineering Group at Lawrence Berkeley Laboratory.
 * 4. Neither the name of the University nor of the Laboratory may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include "midi.h"
#if NMIDI > 0
#include <dev/ic/mpuvar.h>
#endif

#include <sys/timeout.h>

#define SB_MASTER_VOL	0
#define SB_MIDI_VOL	1
#define SB_CD_VOL	2
#define SB_VOICE_VOL	3
#define SB_OUTPUT_CLASS	4

#define SB_MIC_VOL	5
#define SB_LINE_IN_VOL	6
#define	SB_RECORD_SOURCE 7
#define SB_TREBLE	8
#define SB_BASS		9
#define SB_RECORD_CLASS	10
#define SB_INPUT_CLASS	11

#define SB_PCSPEAKER	12
#define SB_INPUT_GAIN	13
#define SB_OUTPUT_GAIN	14
#define SB_AGC		15
#define SB_EQUALIZATION_CLASS 16

#define SB_CD_IN_MUTE	17
#define SB_MIC_IN_MUTE	18
#define SB_LINE_IN_MUTE	19
#define SB_MIDI_IN_MUTE	20

#define SB_CD_SWAP	21
#define SB_MIC_SWAP	22
#define SB_LINE_SWAP	23
#define SB_MIDI_SWAP	24

#define SB_CD_OUT_MUTE	25
#define SB_MIC_OUT_MUTE	26
#define SB_LINE_OUT_MUTE 27

#define SB_NDEVS	28

#define SB_IS_IN_MUTE(x) ((x) < SB_CD_SWAP)

/*
 * Software state, per SoundBlaster card.
 * The soundblaster has multiple functionality, which we must demultiplex.
 * One approach is to have one major device number for the soundblaster card,
 * and use different minor numbers to indicate which hardware function
 * we want.  This would make for one large driver.  Instead our approach
 * is to partition the design into a set of drivers that share an underlying
 * piece of hardware.  Most things are hard to share, for example, the audio
 * and midi ports.  For audio, we might want to mix two processes' signals,
 * and for midi we might want to merge streams (this is hard due to
 * running status).  Moreover, we should be able to re-use the high-level
 * modules with other kinds of hardware.  In this module, we only handle the
 * most basic communications with the sb card.
 */
struct sbdsp_softc {
	struct	device sc_dev;		/* base device */
	struct	isadev sc_id;		/* ISA device */
	isa_chipset_tag_t sc_ic;
	bus_space_tag_t sc_iot;		/* tag */
	bus_space_handle_t sc_ioh;	/* handle */
	void	*sc_ih;			/* interrupt vectoring */
	struct device *sc_isa;
	struct timeout sc_tmo;

	int	sc_iobase;		/* I/O port base address */
	int	sc_irq;			/* interrupt */
	int	sc_ist;			/* interrupt share type */
	int	sc_drq8;		/* DMA (8-bit) */
	int	sc_drq16;		/* DMA (16-bit) */

	int	sc_open;		/* reference count of open calls */
#define SB_CLOSED 0
#define SB_OPEN_AUDIO 1
#define SB_OPEN_MIDI 2
	int	sc_openflags;		/* flags used on open */
	u_char	sc_fullduplex;		/* can do full duplex */

	u_char	gain[SB_NDEVS][2];	/* kept in input levels */
#define SB_LEFT 0
#define SB_RIGHT 1
#define SB_LR 0

	u_int	in_mask;		/* input ports */
	u_int	in_port;		/* XXX needed for MI interface */
	u_int	in_filter;		/* one of SB_TREBLE_EQ, SB_BASS_EQ, 0 */

	u_int	spkr_state;		/* non-null is on */

	struct sbdsp_state {
		u_int	rate;		/* Sample rate */
		u_char	tc;		/* Time constant */
		struct	sbmode *modep;
		u_char	bmode;
		int	dmachan;	/* DMA channel */
		int	blksize;	/* Block size, preadjusted */
		u_char	run;
#define SB_NOTRUNNING 0		/* Not running, not initialized */
#define SB_RUNNING 3		/* non-looping mode */
#define SB_LOOPING 2		/* DMA&PCM running (looping mode) */
	} sc_i, sc_o;			/* Input and output state */

	u_long	sc_interrupts;		/* number of interrupts taken */

	int	(*sc_intr8)(void *);	/* dma completion intr handler */
	void	*sc_arg8;		/* arg for sc_intr8() */
	int	(*sc_intr16)(void *);	/* dma completion intr handler */
	void	*sc_arg16;		/* arg for sc_intr16() */
	void	(*sc_intrp)(void *);	/* PCM output intr handler */
	void	*sc_argp;		/* arg for sc_intrp() */
	void	(*sc_intrr)(void *);	/* PCM input intr handler */
	void	*sc_argr;		/* arg for sc_intrr() */
	void	(*sc_intrm)(void *, int);/* midi input intr handler */
	void	*sc_argm;		/* arg for sc_intrm() */

	u_int	sc_mixer_model;
#define SBM_NONE	0
#define SBM_CT1335	1
#define SBM_CT1345	2
#define SBM_CT1XX5	3
#define SBM_CT1745	4
#define ISSBM1745(x) ((x)->sc_mixer_model >= SBM_CT1XX5)

	int	sc_model;		/* DSP model */
#define SB_UNK	-1
#define SB_1	0			/* original SB */
#define SB_20	1			/* SB 2 */
#define SB_2x	2			/* SB 2, new version */
#define SB_PRO	3			/* SB Pro */
#define SB_JAZZ	4			/* Jazz 16 */
#define SB_16	5			/* SB 16 */
#define SB_32	6			/* SB AWE 32 */
#define SB_64	7			/* SB AWE 64 */

#define SB_NAMES { "SB_1", "SB_2.0", "SB_2.x", "SB_Pro", "Jazz_16", "SB_16", "SB_AWE_32", "SB_AWE_64" }

	u_int	sc_version;		/* DSP version */
#define SBVER_MAJOR(v)	(((v)>>8) & 0xff)
#define SBVER_MINOR(v)	((v)&0xff)

#if NMIDI > 0
	int	sc_hasmpu;
	struct	mpu_softc sc_mpu_sc;	/* MPU401 Uart state */
#endif
};

#define ISSBPRO(sc) ((sc)->sc_model == SB_PRO || (sc)->sc_model == SB_JAZZ)
#define ISSBPROCLASS(sc) ((sc)->sc_model >= SB_PRO)
#define ISSB16CLASS(sc) ((sc)->sc_model >= SB_16)

#ifdef _KERNEL
int	sbdsp_open(void *, int);
void	sbdsp_close(void *);

int	sbdsp_probe(struct sbdsp_softc *);
void	sbdsp_attach(struct sbdsp_softc *);

int	sbdsp_set_in_gain(void *, u_int, u_char);
int	sbdsp_set_in_gain_real(void *, u_int, u_char);
int	sbdsp_get_in_gain(void *);
int	sbdsp_set_out_gain(void *, u_int, u_char);
int	sbdsp_set_out_gain_real(void *, u_int, u_char);
int	sbdsp_get_out_gain(void *);
int	sbdsp_set_monitor_gain(void *, u_int);
int	sbdsp_get_monitor_gain(void *);
int	sbdsp_set_params(void *, int, int, struct audio_params *, struct audio_params *);
int	sbdsp_round_blocksize(void *, int);
int	sbdsp_get_avail_in_ports(void *);
int	sbdsp_get_avail_out_ports(void *);
int	sbdsp_speaker_ctl(void *, int);

int	sbdsp_commit(void *);
int	sbdsp_trigger_output(void *, void *, void *, int, void (*)(void *),
	    void *, struct audio_params *);
int	sbdsp_trigger_input(void *, void *, void *, int, void (*)(void *),
	    void *, struct audio_params *);

int	sbdsp_haltdma(void *);

void	sbdsp_compress(int, u_char *, int);
void	sbdsp_expand(int, u_char *, int);

int	sbdsp_reset(struct sbdsp_softc *);
void	sbdsp_spkron(struct sbdsp_softc *);
void	sbdsp_spkroff(struct sbdsp_softc *);

int	sbdsp_wdsp(struct sbdsp_softc *, int v);
int	sbdsp_rdsp(struct sbdsp_softc *);

int	sbdsp_intr(void *);

int	sbdsp_set_sr(struct sbdsp_softc *, u_long *, int);

void	sbdsp_mix_write(struct sbdsp_softc *, int, int);
int	sbdsp_mix_read(struct sbdsp_softc *, int);

int	sbdsp_mixer_set_port(void *, mixer_ctrl_t *);
int	sbdsp_mixer_get_port(void *, mixer_ctrl_t *);
int	sbdsp_mixer_query_devinfo(void *, mixer_devinfo_t *);

void	*sb_malloc(void *, int, size_t, int, int);
void	sb_free(void *, void *, int);
size_t sb_round(void *, int, size_t);

int	sbdsp_get_props(void *);


int	sbdsp_midi_open(void *, int,
			     void (*iintr)(void *, int),
			     void (*ointr)(void *), void *arg);
void	sbdsp_midi_close(void *);
int	sbdsp_midi_output(void *, int);
void	sbdsp_midi_getinfo(void *, struct midi_info *);
#endif
@


1.17
log
@Change the sc_model field type from unsigned to signed since the model can be
set to SB_UNK which has a value of -1.

sb.c:307:8: error: comparison of 0 <= unsigned expression is always true [-Werror,-Wtautological-compare]

ok deraadt@@
@
text
@a206 1
int	sbdsp_query_encoding(void *, struct audio_encoding *);
a244 1
paddr_t	sb_mappage(void *, void *, off_t, int);
@


1.16
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: sbdspvar.h,v 1.15 2002/03/14 01:26:56 millert Exp $	*/
d165 1
a165 1
	u_int	sc_model;		/* DSP model */
@


1.15
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: sbdspvar.h,v 1.14 2002/01/20 19:56:53 ericj Exp $	*/
d146 1
a146 1
	int	(*sc_intr8)(void*);	/* dma completion intr handler */
d148 1
a148 1
	int	(*sc_intr16)(void*);	/* dma completion intr handler */
d150 1
a150 1
	void	(*sc_intrp)(void*);	/* PCM output intr handler */
d152 1
a152 1
	void	(*sc_intrr)(void*);	/* PCM input intr handler */
d154 1
a154 1
	void	(*sc_intrm)(void*, int);/* midi input intr handler */
d215 4
a218 4
int	sbdsp_trigger_output __P((void *, void *, void *, int, void (*)(void *),
	    void *, struct audio_params *));
int	sbdsp_trigger_input __P((void *, void *, void *, int, void (*)(void *),
	    void *, struct audio_params *));
d251 1
a251 1
int	sbdsp_midi_open __P((void *, int,
d253 1
a253 1
			     void (*ointr)(void *), void *arg));
@


1.14
log
@
make all audio drivers use the new allocm and round_buffersize decl's.
will ease porting, and generally cleans up a bit
@
text
@d1 1
a1 1
/*	$OpenBSD: sbdspvar.h,v 1.13 2001/10/31 11:00:24 art Exp $	*/
d193 2
a194 2
int	sbdsp_open __P((void *, int));
void	sbdsp_close __P((void *));
d196 2
a197 2
int	sbdsp_probe __P((struct sbdsp_softc *));
void	sbdsp_attach __P((struct sbdsp_softc *));
d199 14
a212 14
int	sbdsp_set_in_gain __P((void *, u_int, u_char));
int	sbdsp_set_in_gain_real __P((void *, u_int, u_char));
int	sbdsp_get_in_gain __P((void *));
int	sbdsp_set_out_gain __P((void *, u_int, u_char));
int	sbdsp_set_out_gain_real __P((void *, u_int, u_char));
int	sbdsp_get_out_gain __P((void *));
int	sbdsp_set_monitor_gain __P((void *, u_int));
int	sbdsp_get_monitor_gain __P((void *));
int	sbdsp_query_encoding __P((void *, struct audio_encoding *));
int	sbdsp_set_params __P((void *, int, int, struct audio_params *, struct audio_params *));
int	sbdsp_round_blocksize __P((void *, int));
int	sbdsp_get_avail_in_ports __P((void *));
int	sbdsp_get_avail_out_ports __P((void *));
int	sbdsp_speaker_ctl __P((void *, int));
d214 1
a214 1
int	sbdsp_commit __P((void *));
d220 1
a220 1
int	sbdsp_haltdma __P((void *));
d222 2
a223 2
void	sbdsp_compress __P((int, u_char *, int));
void	sbdsp_expand __P((int, u_char *, int));
d225 3
a227 3
int	sbdsp_reset __P((struct sbdsp_softc *));
void	sbdsp_spkron __P((struct sbdsp_softc *));
void	sbdsp_spkroff __P((struct sbdsp_softc *));
d229 2
a230 2
int	sbdsp_wdsp __P((struct sbdsp_softc *, int v));
int	sbdsp_rdsp __P((struct sbdsp_softc *));
d232 1
a232 1
int	sbdsp_intr __P((void *));
d234 1
a234 1
int	sbdsp_set_sr __P((struct sbdsp_softc *, u_long *, int));
d236 2
a237 2
void	sbdsp_mix_write __P((struct sbdsp_softc *, int, int));
int	sbdsp_mix_read __P((struct sbdsp_softc *, int));
d239 3
a241 3
int	sbdsp_mixer_set_port __P((void *, mixer_ctrl_t *));
int	sbdsp_mixer_get_port __P((void *, mixer_ctrl_t *));
int	sbdsp_mixer_query_devinfo __P((void *, mixer_devinfo_t *));
d243 4
a246 4
void	*sb_malloc __P((void *, int, size_t, int, int));
void	sb_free __P((void *, void *, int));
size_t sb_round __P((void *, int, size_t));
paddr_t	sb_mappage __P((void *, void *, off_t, int));
d248 1
a248 1
int	sbdsp_get_props __P((void *));
d252 5
a256 5
			     void (*iintr)__P((void *, int)),
			     void (*ointr)__P((void *)), void *arg));
void	sbdsp_midi_close __P((void *));
int	sbdsp_midi_output __P((void *, int));
void	sbdsp_midi_getinfo __P((void *, struct midi_info *));
@


1.13
log
@Change the audio_hm_if->mappage interface to return paddr_t and take off_t
as the mmap offset.
@
text
@d1 1
a1 1
/*	$OpenBSD: sbdspvar.h,v 1.12 2001/02/03 05:22:24 mickey Exp $	*/
d243 1
a243 1
void	*sb_malloc __P((void *, unsigned long, int, int));
d245 1
a245 1
unsigned long sb_round __P((void *, unsigned long));
@


1.13.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: sbdspvar.h,v 1.14 2002/01/20 19:56:53 ericj Exp $	*/
d243 1
a243 1
void	*sb_malloc __P((void *, int, size_t, int, int));
d245 1
a245 1
size_t sb_round __P((void *, int, size_t));
@


1.13.2.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sbdspvar.h,v 1.13.2.1 2002/01/31 22:55:33 niklas Exp $	*/
d146 1
a146 1
	int	(*sc_intr8)(void *);	/* dma completion intr handler */
d148 1
a148 1
	int	(*sc_intr16)(void *);	/* dma completion intr handler */
d150 1
a150 1
	void	(*sc_intrp)(void *);	/* PCM output intr handler */
d152 1
a152 1
	void	(*sc_intrr)(void *);	/* PCM input intr handler */
d154 1
a154 1
	void	(*sc_intrm)(void *, int);/* midi input intr handler */
d193 2
a194 2
int	sbdsp_open(void *, int);
void	sbdsp_close(void *);
d196 2
a197 2
int	sbdsp_probe(struct sbdsp_softc *);
void	sbdsp_attach(struct sbdsp_softc *);
d199 58
a256 58
int	sbdsp_set_in_gain(void *, u_int, u_char);
int	sbdsp_set_in_gain_real(void *, u_int, u_char);
int	sbdsp_get_in_gain(void *);
int	sbdsp_set_out_gain(void *, u_int, u_char);
int	sbdsp_set_out_gain_real(void *, u_int, u_char);
int	sbdsp_get_out_gain(void *);
int	sbdsp_set_monitor_gain(void *, u_int);
int	sbdsp_get_monitor_gain(void *);
int	sbdsp_query_encoding(void *, struct audio_encoding *);
int	sbdsp_set_params(void *, int, int, struct audio_params *, struct audio_params *);
int	sbdsp_round_blocksize(void *, int);
int	sbdsp_get_avail_in_ports(void *);
int	sbdsp_get_avail_out_ports(void *);
int	sbdsp_speaker_ctl(void *, int);

int	sbdsp_commit(void *);
int	sbdsp_trigger_output(void *, void *, void *, int, void (*)(void *),
	    void *, struct audio_params *);
int	sbdsp_trigger_input(void *, void *, void *, int, void (*)(void *),
	    void *, struct audio_params *);

int	sbdsp_haltdma(void *);

void	sbdsp_compress(int, u_char *, int);
void	sbdsp_expand(int, u_char *, int);

int	sbdsp_reset(struct sbdsp_softc *);
void	sbdsp_spkron(struct sbdsp_softc *);
void	sbdsp_spkroff(struct sbdsp_softc *);

int	sbdsp_wdsp(struct sbdsp_softc *, int v);
int	sbdsp_rdsp(struct sbdsp_softc *);

int	sbdsp_intr(void *);

int	sbdsp_set_sr(struct sbdsp_softc *, u_long *, int);

void	sbdsp_mix_write(struct sbdsp_softc *, int, int);
int	sbdsp_mix_read(struct sbdsp_softc *, int);

int	sbdsp_mixer_set_port(void *, mixer_ctrl_t *);
int	sbdsp_mixer_get_port(void *, mixer_ctrl_t *);
int	sbdsp_mixer_query_devinfo(void *, mixer_devinfo_t *);

void	*sb_malloc(void *, int, size_t, int, int);
void	sb_free(void *, void *, int);
size_t sb_round(void *, int, size_t);
paddr_t	sb_mappage(void *, void *, off_t, int);

int	sbdsp_get_props(void *);


int	sbdsp_midi_open(void *, int,
			     void (*iintr)(void *, int),
			     void (*ointr)(void *), void *arg);
void	sbdsp_midi_close(void *);
int	sbdsp_midi_output(void *, int);
void	sbdsp_midi_getinfo(void *, struct midi_info *);
@


1.12
log
@new timeouts, space control
@
text
@d1 1
a1 1
/*	$OpenBSD: sbdspvar.h,v 1.11 1999/08/05 05:32:41 deraadt Exp $	*/
d246 1
a246 1
int	sb_mappage __P((void *, void *, int, int));
@


1.11
log
@mv isa/mpu401var.h ic/mpuvar.h
@
text
@d1 1
a1 1
/*	$OpenBSD: sbdspvar.h,v 1.10 1999/07/20 16:36:05 deraadt Exp $	*/
d43 2
d105 1
d124 1
a124 1
	
d130 1
a130 1
	
d243 1
a243 1
void 	*sb_malloc __P((void *, unsigned long, int, int));
d251 1
a251 1
int	sbdsp_midi_open __P((void *, int, 
@


1.11.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: sbdspvar.h,v 1.12 2001/02/03 05:22:24 mickey Exp $	*/
a42 2
#include <sys/timeout.h>

a102 1
	struct timeout sc_tmo;
d121 1
a121 1

d127 1
a127 1

d240 1
a240 1
void	*sb_malloc __P((void *, unsigned long, int, int));
d248 1
a248 1
int	sbdsp_midi_open __P((void *, int,
@


1.11.4.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d246 1
a246 1
paddr_t	sb_mappage __P((void *, void *, off_t, int));
@


1.11.4.3
log
@Merge in trunk
@
text
@d243 1
a243 1
void	*sb_malloc __P((void *, int, size_t, int, int));
d245 1
a245 1
size_t sb_round __P((void *, int, size_t));
@


1.11.4.4
log
@Merge in -current from about a week ago
@
text
@d146 1
a146 1
	int	(*sc_intr8)(void *);	/* dma completion intr handler */
d148 1
a148 1
	int	(*sc_intr16)(void *);	/* dma completion intr handler */
d150 1
a150 1
	void	(*sc_intrp)(void *);	/* PCM output intr handler */
d152 1
a152 1
	void	(*sc_intrr)(void *);	/* PCM input intr handler */
d154 1
a154 1
	void	(*sc_intrm)(void *, int);/* midi input intr handler */
d193 2
a194 2
int	sbdsp_open(void *, int);
void	sbdsp_close(void *);
d196 2
a197 2
int	sbdsp_probe(struct sbdsp_softc *);
void	sbdsp_attach(struct sbdsp_softc *);
d199 58
a256 58
int	sbdsp_set_in_gain(void *, u_int, u_char);
int	sbdsp_set_in_gain_real(void *, u_int, u_char);
int	sbdsp_get_in_gain(void *);
int	sbdsp_set_out_gain(void *, u_int, u_char);
int	sbdsp_set_out_gain_real(void *, u_int, u_char);
int	sbdsp_get_out_gain(void *);
int	sbdsp_set_monitor_gain(void *, u_int);
int	sbdsp_get_monitor_gain(void *);
int	sbdsp_query_encoding(void *, struct audio_encoding *);
int	sbdsp_set_params(void *, int, int, struct audio_params *, struct audio_params *);
int	sbdsp_round_blocksize(void *, int);
int	sbdsp_get_avail_in_ports(void *);
int	sbdsp_get_avail_out_ports(void *);
int	sbdsp_speaker_ctl(void *, int);

int	sbdsp_commit(void *);
int	sbdsp_trigger_output(void *, void *, void *, int, void (*)(void *),
	    void *, struct audio_params *);
int	sbdsp_trigger_input(void *, void *, void *, int, void (*)(void *),
	    void *, struct audio_params *);

int	sbdsp_haltdma(void *);

void	sbdsp_compress(int, u_char *, int);
void	sbdsp_expand(int, u_char *, int);

int	sbdsp_reset(struct sbdsp_softc *);
void	sbdsp_spkron(struct sbdsp_softc *);
void	sbdsp_spkroff(struct sbdsp_softc *);

int	sbdsp_wdsp(struct sbdsp_softc *, int v);
int	sbdsp_rdsp(struct sbdsp_softc *);

int	sbdsp_intr(void *);

int	sbdsp_set_sr(struct sbdsp_softc *, u_long *, int);

void	sbdsp_mix_write(struct sbdsp_softc *, int, int);
int	sbdsp_mix_read(struct sbdsp_softc *, int);

int	sbdsp_mixer_set_port(void *, mixer_ctrl_t *);
int	sbdsp_mixer_get_port(void *, mixer_ctrl_t *);
int	sbdsp_mixer_query_devinfo(void *, mixer_devinfo_t *);

void	*sb_malloc(void *, int, size_t, int, int);
void	sb_free(void *, void *, int);
size_t sb_round(void *, int, size_t);
paddr_t	sb_mappage(void *, void *, off_t, int);

int	sbdsp_get_props(void *);


int	sbdsp_midi_open(void *, int,
			     void (*iintr)(void *, int),
			     void (*ointr)(void *), void *arg);
void	sbdsp_midi_close(void *);
int	sbdsp_midi_output(void *, int);
void	sbdsp_midi_getinfo(void *, struct midi_info *);
@


1.10
log
@first cut at isapnp and ym mpu
@
text
@d1 1
a1 1
/*	$OpenBSD: sbdspvar.h,v 1.9 1999/01/02 00:02:47 niklas Exp $	*/
d40 1
a40 1
#include <dev/isa/mpu401var.h>
@


1.9
log
@Midi & sequencer support from NetBSD, mostly by Lennart Augustsson
@
text
@d1 1
a1 1
/*	$OpenBSD: sbdspvar.h,v 1.8 1998/04/26 21:03:01 provos Exp $	*/
d181 1
a181 1
	struct	mpu401_softc sc_mpu_sc;	/* MPU401 Uart state */
@


1.8
log
@update audio from NetBSD, mostly by Lennart Augustsson <augustss@@cs.chalmers.se>
@
text
@d1 2
a2 2
/*	$OpenBSD: sbdspvar.h,v 1.7 1997/07/10 23:06:38 provos Exp $	*/
/*	$NetBSD: sbdspvar.h,v 1.33 1997/10/19 07:42:44 augustss Exp $	*/
d38 5
d102 1
d106 1
d110 4
a113 3
	struct	device *sc_isa;		/* pointer to ISA parent */

	u_short	sc_open;		/* reference count of open calls */
d134 1
a136 2
#define SB_DMARUNNING 1		/* DMA has been initialized */
#define SB_PCMRUNNING 2		/* DMA&PCM running (looping mode) */
d138 1
d142 2
a143 1
	void	(*sc_intr8)(void*);	/* dma completion intr handler */
d145 1
a145 1
	void	(*sc_intr16)(void*);	/* dma completion intr handler */
d147 6
a152 1
	void	(*sc_mintr)(void*, int);/* midi input intr handler */
d178 5
d212 4
a215 4
int	sbdsp_dma_init_input __P((void *, void *, int));
int	sbdsp_dma_init_output __P((void *, void *, int));
int	sbdsp_dma_output __P((void *, void *, int, void (*)(void *), void*));
int	sbdsp_dma_input __P((void *, void *, int, void (*)(void *), void*));
d247 7
@


1.7
log
@sync with NETBSD 30/3/97 + adapating aria.c
@
text
@d1 2
a2 2
/*	$OpenBSD: sbdspvar.h,v 1.6 1996/11/29 22:55:07 niklas Exp $	*/
/*	$NetBSD: sbdspvar.h,v 1.13 1996/04/29 20:28:50 christos Exp $	*/
d38 33
a70 18
#define SB_MIC_PORT	0
#define SB_SPEAKER	1
#define SB_INPUT_CLASS	2
#define SB_OUTPUT_CLASS	3
#define SB_LINE_IN_PORT	4
#define SB_DAC_PORT	5
#define SB_FM_PORT	6
#define SB_CD_PORT	7
#define SB_MASTER_VOL	8
#define SB_TREBLE	9
#define SB_BASS		10
#define SB_NDEVS	11		/* XXX include classes above for
					   contiguous number space on
					   original SB */

/*#define SB_OUTPUT_MODE	9
#define 	SB_SPKR_MONO	0
#define 	SB_SPKR_STEREO	1*/
d72 1
a72 3
#define	SB_RECORD_SOURCE 11

#define SB_RECORD_CLASS	12
d74 1
d103 2
d106 2
d109 4
a112 2
	u_int	gain[SB_NDEVS];		/* kept in SB levels: right/left each
					   in a nibble */
d114 2
a115 2
	u_int	out_port;		/* output port */
	u_int	in_port;		/* input port */
d120 12
a131 7
	int	sc_irate, sc_itc;	/* Sample rate for input */
	int	sc_orate, sc_otc;	/* ...and output */

	int	sc_imode;
	int	sc_omode;
#define SB_ADAC_LS 0
#define SB_ADAC_HS 1
d134 4
a137 1
	void	(*sc_intr)(void*);	/* dma completion intr handler */
a138 1
	void	*sc_arg;		/* arg for sc_intr() */
d140 7
a146 14
	int	dmaflags;
	caddr_t	dmaaddr;
	vm_size_t	dmacnt;
	int	dmachan;		/* active DMA channel */
	int	sc_last_hs_size;	/* last HS dma size */

	u_int	sc_encoding;		/* ulaw/linear -- keep track */
	u_int	sc_precision;		/* size of samples */
	int	sc_channels;		/* # of channels */

	int	sc_dmadir;		/* DMA direction */
#define	SB_DMA_NONE	0
#define	SB_DMA_IN	1
#define	SB_DMA_OUT	2
d149 13
a163 2

#define MODEL_JAZZ16 0x80000000
d166 3
a168 15
#define	ISSB2CLASS(sc) \
	(SBVER_MAJOR((sc)->sc_model) >= 2)

#define ISSBPROCLASS(sc) \
	(SBVER_MAJOR((sc)->sc_model) > 2)

#define ISSBPRO(sc) \
	(SBVER_MAJOR((sc)->sc_model) == 3)

#define ISSB16CLASS(sc) \
	(SBVER_MAJOR((sc)->sc_model) > 3)

#define ISJAZZ16(sc) \
	((sc)->sc_model & MODEL_JAZZ16)

d171 1
a171 1
int	sbdsp_open __P((struct sbdsp_softc *, dev_t, int));
a184 6
int	sbdsp_set_in_sr __P((void *, u_long));
int	sbdsp_set_in_sr_real __P((void *, u_long));
u_long	sbdsp_get_in_sr __P((void *));
int	sbdsp_set_out_sr __P((void *, u_long));
int	sbdsp_set_out_sr_real __P((void *, u_long));
u_long	sbdsp_get_out_sr __P((void *));
d186 1
a186 7
int	sbdsp_set_format __P((void *, u_int, u_int));
int	sbdsp_get_encoding __P((void *));
int	sbdsp_get_precision __P((void *));
int	sbdsp_set_channels __P((void *, int));
int	sbdsp_get_channels __P((void *));
int	sbdsp_set_ifilter __P((void *, int));
int	sbdsp_get_ifilter __P((void *));
a187 4
int	sbdsp_set_out_port __P((void *, int));
int	sbdsp_get_out_port __P((void *));
int	sbdsp_set_in_port __P((void *, int));
int	sbdsp_get_in_port __P((void *));
a190 1
int	sbdsp_commit_settings __P((void *));
d192 3
a198 1
int	sbdsp_contdma __P((void *));
a210 1
short	sbversion __P((struct sbdsp_softc *));
a212 1
int	sbdsp_setfd __P((void *, int));
d220 7
@


1.6
log
@Missing pieces of new bus.h that CVS lost behind my back
@
text
@d1 1
a1 1
/*	$OpenBSD: sbdspvar.h,v 1.4 1996/04/18 23:47:48 niklas Exp $	*/
d79 3
d86 1
a86 1
	int	sc_drq;			/* DMA (8-bit) */
a93 2
	u_int	encoding;		/* ulaw/linear -- keep track */

d116 1
d118 3
a120 1
	int	sc_precision;		/* size of samples */
d122 1
d135 3
d173 1
a173 1
int	sbdsp_set_encoding __P((void *, u_int));
a174 1
int	sbdsp_set_precision __P((void *, u_int));
a195 1
u_int	sbdsp_get_silence __P((int));
d203 2
a204 2
int	sbdsp_wdsp(int iobase, int v);
int	sbdsp_rdsp(int iobase);
@


1.5
log
@sync with 0504 -- prototypes and bus.h
@
text
@@


1.4
log
@NetBSD 960317 merge
@
text
@d1 2
a2 2
/*	$OpenBSD: sbdspvar.h,v 1.3 1996/03/08 16:43:15 niklas Exp $	*/
/*	$NetBSD: sbdspvar.h,v 1.12 1996/03/16 04:00:13 jtk Exp $	*/
d183 2
a184 2
int	sbdsp_dma_output __P((void *, void *, int, void (*)(), void*));
int	sbdsp_dma_input __P((void *, void *, int, void (*)(), void*));
@


1.3
log
@From NetBSD: merge of 960217
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: sbdspvar.h,v 1.9 1996/02/16 10:10:23 mycroft Exp $	*/
d40 12
a51 8
#define SB_LINE_IN_PORT	2
#define SB_DAC_PORT	3
#define SB_FM_PORT	4
#define SB_CD_PORT	5
#define SB_MASTER_VOL	6
#define SB_TREBLE	7
#define SB_BASS		8
#define SB_NDEVS	9
d53 1
a53 1
#define SB_OUTPUT_MODE	9
d55 1
a55 1
#define 	SB_SPKR_STEREO	1
d57 1
a57 1
#define	SB_RECORD_SOURCE 10
d59 1
a59 3
#define SB_INPUT_CLASS	11
#define SB_OUTPUT_CLASS	12
#define SB_RECORD_CLASS	13
d83 2
a84 1
	int	sc_drq;			/* DMA */
d95 1
d99 2
a100 2
	int	sc_itc;			/* Sample rate for input */
	int	sc_otc;			/* ...and output */
d116 2
a117 1
	int	sc_chans;		/* # of channels */
d124 1
a124 1
#define SBVER_MAJOR(v)	((v)>>8)
d126 2
d130 3
d136 2
a137 2
#define ISSBPROCLASS(sc) \
	(SBVER_MAJOR((sc)->sc_model) > 2)
d139 2
a140 2
#define ISSB16CLASS(sc) \
      (SBVER_MAJOR((sc)->sc_model) > 3)
d171 2
@


1.2
log
@from netbsd; Convert IRQ, DRQ, and port numbers to int
@
text
@d1 2
a2 1
/*	$NetBSD: sbdspvar.h,v 1.7 1995/11/10 05:01:08 mycroft Exp $	*/
a83 5
	u_short	sc_locked;		/* true when doing HS DMA  */
 	u_short	sc_adacmode;		/* low/high speed mode indicator */

	u_long	sc_irate;		/* Sample rate for input */
	u_long	sc_orate;		/* ...and output */
d95 5
d102 1
a102 1
 	u_short	sc_adactc;		/* current adac time constant */
d111 1
a111 2
	int	sc_last_hsw_size;	/* last HS dma size */
	int	sc_last_hsr_size;	/* last HS dma size */
d113 4
a116 2
	char	sc_dmain_inprogress;	/* DMA input in progress? */
	char	sc_dmaout_inprogress;	/* DMA output in progress? */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: sbdspvar.h,v 1.6 1995/05/08 22:02:24 brezak Exp $	*/
d78 3
a80 3
	u_short	sc_iobase;		/* I/O port base address */
	u_short sc_irq;			/* interrupt */
	u_short sc_drq;			/* DMA */
d183 2
a184 2
int	sbdsp_wdsp(u_short iobase, int v);
int	sbdsp_rdsp(u_short iobase);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
