head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.18
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.16
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.12
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.10
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.8
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.12
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.10
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.8
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.10.0.6
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.9.0.10
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.8
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.6
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.7.0.10
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.6.0.10
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.8
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.4.0.8
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	SMP:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2;
locks; strict;
comment	@ * @;


1.12
date	2013.10.20.20.07.29;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2010.08.28.12.48.14;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.03.29.21.53.52;	author sthen;	state Exp;
branches;
next	1.9;

1.9
date	2006.11.29.19.08.22;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2006.11.29.12.13.54;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.02.04.39.51;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.03.16.05;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.56;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.02.20.25.40;	author aaron;	state Exp;
branches
	1.4.4.1
	1.4.8.1;
next	1.3;

1.3
date	2001.01.31.16.38.02;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.31.02.12.28;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	2000.11.15.20.42.39;	author aaron;	state Exp;
branches;
next	;

1.4.4.1
date	2001.05.14.22.24.47;	author niklas;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2002.03.28.12.11.35;	author niklas;	state Exp;
branches;
next	1.4.4.3;

1.4.4.3
date	2004.06.05.23.12.46;	author niklas;	state Exp;
branches;
next	;

1.4.8.1
date	2002.06.11.03.42.22;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Use C99 named initializers for struct wsdisplay_accessops fields.
No functional change.
@
text
@/* $OpenBSD: pcdisplay.c,v 1.11 2010/08/28 12:48:14 miod Exp $ */
/* $NetBSD: pcdisplay.c,v 1.9.4.1 2000/06/30 16:27:48 simonb Exp $ */

/*
 * Copyright (c) 1998
 *	Matthias Drochner.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/malloc.h>
#include <machine/bus.h>

#include <dev/isa/isavar.h>
#include <dev/isa/isareg.h>

#include <dev/ic/mc6845reg.h>
#include <dev/ic/pcdisplayvar.h>
#include <dev/isa/pcdisplayvar.h>

#include <dev/ic/pcdisplay.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wsdisplayvar.h>

struct pcdisplay_config {
	struct pcdisplayscreen pcs;
	struct pcdisplay_handle dc_ph;
	int mono;
};

struct pcdisplay_softc {
	struct device sc_dev;
	struct pcdisplay_config *sc_dc;
	int nscreens;
};

static int pcdisplayconsole, pcdisplay_console_attached;
static struct pcdisplay_config pcdisplay_console_dc;

int	pcdisplay_match(struct device *, void *, void *);
void	pcdisplay_attach(struct device *, struct device *, void *);

static int pcdisplay_is_console(bus_space_tag_t);
static int pcdisplay_probe_col(bus_space_tag_t, bus_space_tag_t);
static int pcdisplay_probe_mono(bus_space_tag_t, bus_space_tag_t);
static void pcdisplay_init(struct pcdisplay_config *,
			     bus_space_tag_t, bus_space_tag_t,
			     int);
static int pcdisplay_alloc_attr(void *, int, int, int, long *);
static void pcdisplay_unpack_attr(void *, long, int *, int *, int *);

struct cfattach pcdisplay_ca = {
	sizeof(struct pcdisplay_softc), pcdisplay_match, pcdisplay_attach,
};

const struct wsdisplay_emulops pcdisplay_emulops = {
	pcdisplay_cursor,
	pcdisplay_mapchar,
	pcdisplay_putchar,
	pcdisplay_copycols,
	pcdisplay_erasecols,
	pcdisplay_copyrows,
	pcdisplay_eraserows,
	pcdisplay_alloc_attr,
	pcdisplay_unpack_attr
};

const struct wsscreen_descr pcdisplay_scr = {
	"80x25", 80, 25,
	&pcdisplay_emulops,
	0, 0, /* no font support */
	WSSCREEN_REVERSE /* that's minimal... */
};

const struct wsscreen_descr *_pcdisplay_scrlist[] = {
	&pcdisplay_scr,
};

const struct wsscreen_list pcdisplay_screenlist = {
	sizeof(_pcdisplay_scrlist) / sizeof(struct wsscreen_descr *),
	_pcdisplay_scrlist
};

static int pcdisplay_ioctl(void *, u_long, caddr_t, int, struct proc *);
static paddr_t pcdisplay_mmap(void *, off_t, int);
static int pcdisplay_alloc_screen(void *, const struct wsscreen_descr *,
				       void **, int *, int *, long *);
static void pcdisplay_free_screen(void *, void *);
static int pcdisplay_show_screen(void *, void *, int,
				 void (*) (void *, int, int), void *);

const struct wsdisplay_accessops pcdisplay_accessops = {
	.ioctl = pcdisplay_ioctl,
	.mmap = pcdisplay_mmap,
	.alloc_screen = pcdisplay_alloc_screen,
	.free_screen = pcdisplay_free_screen,
	.show_screen = pcdisplay_show_screen
};

static int
pcdisplay_probe_col(bus_space_tag_t iot, bus_space_tag_t memt)
{
	bus_space_handle_t memh, ioh_6845;
	u_int16_t oldval, val;

	if (bus_space_map(memt, 0xb8000, 0x8000, 0, &memh))
		return (0);
	oldval = bus_space_read_2(memt, memh, 0);
	bus_space_write_2(memt, memh, 0, 0xa55a);
	val = bus_space_read_2(memt, memh, 0);
	bus_space_write_2(memt, memh, 0, oldval);
	bus_space_unmap(memt, memh, 0x8000);
	if (val != 0xa55a)
		return (0);

	if (bus_space_map(iot, 0x3d0, 0x10, 0, &ioh_6845))
		return (0);
	bus_space_unmap(iot, ioh_6845, 0x10);

	return (1);
}

static int
pcdisplay_probe_mono(bus_space_tag_t iot, bus_space_tag_t memt)
{
	bus_space_handle_t memh, ioh_6845;
	u_int16_t oldval, val;

	if (bus_space_map(memt, 0xb0000, 0x8000, 0, &memh))
		return (0);
	oldval = bus_space_read_2(memt, memh, 0);
	bus_space_write_2(memt, memh, 0, 0xa55a);
	val = bus_space_read_2(memt, memh, 0);
	bus_space_write_2(memt, memh, 0, oldval);
	bus_space_unmap(memt, memh, 0x8000);
	if (val != 0xa55a)
		return (0);

	if (bus_space_map(iot, 0x3b0, 0x10, 0, &ioh_6845))
		return (0);
	bus_space_unmap(iot, ioh_6845, 0x10);

	return (1);
}

static void
pcdisplay_init(struct pcdisplay_config *dc, bus_space_tag_t iot,
    bus_space_tag_t memt, int mono)
{
	struct pcdisplay_handle *ph = &dc->dc_ph;
	int cpos;

        ph->ph_iot = iot;
        ph->ph_memt = memt;
	dc->mono = mono;

	if (bus_space_map(memt, mono ? 0xb0000 : 0xb8000, 0x8000,
			  0, &ph->ph_memh))
		panic("pcdisplay_init: can't map mem space");
	if (bus_space_map(iot, mono ? 0x3b0 : 0x3d0, 0x10,
			  0, &ph->ph_ioh_6845))
		panic("pcdisplay_init: can't map i/o space");

	/*
	 * initialize the only screen
	 */
	dc->pcs.hdl = ph;
	dc->pcs.type = &pcdisplay_scr;
	dc->pcs.active = 1;
	dc->pcs.mem = NULL;

	cpos = pcdisplay_6845_read(ph, cursorh) << 8;
	cpos |= pcdisplay_6845_read(ph, cursorl);

	/* make sure we have a valid cursor position */
	if (cpos < 0 || cpos >= pcdisplay_scr.nrows * pcdisplay_scr.ncols)
		cpos = 0;

	dc->pcs.dispoffset = 0;
	dc->pcs.visibleoffset = 0;

	dc->pcs.vc_crow = cpos / pcdisplay_scr.ncols;
	dc->pcs.vc_ccol = cpos % pcdisplay_scr.ncols;
	pcdisplay_cursor_init(&dc->pcs, 1);
}

int
pcdisplay_match(struct device *parent, void *match, void *aux)
{
	struct isa_attach_args *ia = aux;
	int mono;

	/* If values are hardwired to something that they can't be, punt. */
	if ((ia->ia_iobase != IOBASEUNK &&
	     ia->ia_iobase != 0x3d0 &&
	     ia->ia_iobase != 0x3b0) ||
	    /* ia->ia_iosize != 0 || XXX isa.c */
	    (ia->ia_maddr != MADDRUNK &&
	     ia->ia_maddr != 0xb8000 &&
	     ia->ia_maddr != 0xb0000) ||
	    (ia->ia_msize != 0 && ia->ia_msize != 0x8000) ||
	    ia->ia_irq != IRQUNK || ia->ia_drq != DRQUNK)
		return (0);

	if (pcdisplay_is_console(ia->ia_iot))
		mono = pcdisplay_console_dc.mono;
	else if (ia->ia_iobase != 0x3b0 && ia->ia_maddr != 0xb0000 &&
		 pcdisplay_probe_col(ia->ia_iot, ia->ia_memt))
		mono = 0;
	else if (ia->ia_iobase != 0x3d0 && ia->ia_maddr != 0xb8000 &&
		 pcdisplay_probe_mono(ia->ia_iot, ia->ia_memt))
		mono = 1;
	else
		return (0);

	ia->ia_iobase = mono ? 0x3b0 : 0x3d0;
	ia->ia_iosize = 0x10;
	ia->ia_maddr = mono ? 0xb0000 : 0xb8000;
	ia->ia_msize = 0x8000;
	return (1);
}

void
pcdisplay_attach(struct device *parent, struct device *self, void *aux)
{
	struct isa_attach_args *ia = aux;
	struct pcdisplay_softc *sc = (struct pcdisplay_softc *)self;
	int console;
	struct pcdisplay_config *dc;
	struct wsemuldisplaydev_attach_args aa;

	printf("\n");

	console = pcdisplay_is_console(ia->ia_iot);

	if (console) {
		dc = &pcdisplay_console_dc;
		sc->nscreens = 1;
		pcdisplay_console_attached = 1;
	} else {
		dc = malloc(sizeof(struct pcdisplay_config),
			    M_DEVBUF, M_WAITOK);
		if (ia->ia_iobase != 0x3b0 && ia->ia_maddr != 0xb0000 &&
		    pcdisplay_probe_col(ia->ia_iot, ia->ia_memt))
			pcdisplay_init(dc, ia->ia_iot, ia->ia_memt, 0);
		else if (ia->ia_iobase != 0x3d0 && ia->ia_maddr != 0xb8000 &&
			 pcdisplay_probe_mono(ia->ia_iot, ia->ia_memt))
			pcdisplay_init(dc, ia->ia_iot, ia->ia_memt, 1);
		else
			panic("pcdisplay_attach: display disappeared");
	}
	sc->sc_dc = dc;

	aa.console = console;
	aa.scrdata = &pcdisplay_screenlist;
	aa.accessops = &pcdisplay_accessops;
	aa.accesscookie = sc;
	aa.defaultscreens = 0;

        config_found(self, &aa, wsemuldisplaydevprint);
}


int
pcdisplay_cnattach(bus_space_tag_t iot, bus_space_tag_t memt)
{
	int mono;

	if (pcdisplay_probe_col(iot, memt))
		mono = 0;
	else if (pcdisplay_probe_mono(iot, memt))
		mono = 1;
	else
		return (ENXIO);

	pcdisplay_init(&pcdisplay_console_dc, iot, memt, mono);

	wsdisplay_cnattach(&pcdisplay_scr, &pcdisplay_console_dc,
			   pcdisplay_console_dc.pcs.vc_ccol,
			   pcdisplay_console_dc.pcs.vc_crow,
			   FG_LIGHTGREY | BG_BLACK);

	pcdisplayconsole = 1;
	return (0);
}

static int
pcdisplay_is_console(bus_space_tag_t iot)
{
	if (pcdisplayconsole &&
	    !pcdisplay_console_attached &&
	    iot == pcdisplay_console_dc.dc_ph.ph_iot)
		return (1);
	return (0);
}

static int
pcdisplay_ioctl(void *v, u_long cmd, caddr_t data, int flag, struct proc *p)
{
	/*
	 * XXX "do something!"
	 */
	return (-1);
}

static paddr_t
pcdisplay_mmap(void *v, off_t offset, int prot)
{
	return (-1);
}

static int
pcdisplay_alloc_screen(void *v, const struct wsscreen_descr *type,
    void **cookiep, int *curxp, int *curyp, long *defattrp)
{
	struct pcdisplay_softc *sc = v;

	if (sc->nscreens > 0)
		return (ENOMEM);

	*cookiep = sc->sc_dc;
	*curxp = 0;
	*curyp = 0;
	*defattrp = FG_LIGHTGREY | BG_BLACK;
	sc->nscreens++;
	return (0);
}

static void
pcdisplay_free_screen(void *v, void *cookie)
{
	struct pcdisplay_softc *sc = v;

	if (sc->sc_dc == &pcdisplay_console_dc)
		panic("pcdisplay_free_screen: console");

	sc->nscreens--;
}

static int
pcdisplay_show_screen(void *v, void *cookie, int waitok,
    void (*cb)(void *, int, int), void *cbarg)
{
#ifdef DIAGNOSTIC
	struct pcdisplay_softc *sc = v;

	if (cookie != sc->sc_dc)
		panic("pcdisplay_show_screen: bad screen");
#endif
	return (0);
}

static int
pcdisplay_alloc_attr(void *id, int fg, int bg, int flags, long *attrp)
{
	if (flags & WSATTR_REVERSE)
		*attrp = FG_BLACK | BG_LIGHTGREY;
	else
		*attrp = FG_LIGHTGREY | BG_BLACK;
	return (0);
}

static void
pcdisplay_unpack_attr(void *id, long attr, int *fg, int *bg, int *ul)
{
	if (attr == (FG_BLACK | BG_LIGHTGREY)) {
		*fg = WSCOL_BLACK;
		*bg = WSCOL_WHITE;
	} else {
		*fg = WSCOL_WHITE;
		*bg = WSCOL_BLACK;
	}
	if (ul != NULL)
		*ul = 0;
}

struct cfdriver pcdisplay_cd = {
	NULL, "pcdisplay", DV_DULL
};
@


1.11
log
@ansify function definitions, and constify a few arrays while there.
no functional change.
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplay.c,v 1.10 2009/03/29 21:53:52 sthen Exp $ */
d117 5
a121 6
	pcdisplay_ioctl,
	pcdisplay_mmap,
	pcdisplay_alloc_screen,
	pcdisplay_free_screen,
	pcdisplay_show_screen,
	0 /* load_font */
@


1.10
log
@make various strings ("can't map mem space" and similar) more consistent
between instances, saving space in the kernel. feedback from many (some
incorporated, some left for future work).

ok deraadt, kettenis, "why not" miod.
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplay.c,v 1.9 2006/11/29 19:08:22 miod Exp $ */
d126 1
a126 2
pcdisplay_probe_col(iot, memt)
	bus_space_tag_t iot, memt;
d149 1
a149 2
pcdisplay_probe_mono(iot, memt)
	bus_space_tag_t iot, memt;
d172 2
a173 4
pcdisplay_init(dc, iot, memt, mono)
	struct pcdisplay_config *dc;
	bus_space_tag_t iot, memt;
	int mono;
d213 1
a213 4
pcdisplay_match(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
d249 1
a249 3
pcdisplay_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d290 1
a290 2
pcdisplay_cnattach(iot, memt)
	bus_space_tag_t iot, memt;
d313 1
a313 2
pcdisplay_is_console(iot)
	bus_space_tag_t iot;
d323 1
a323 6
pcdisplay_ioctl(v, cmd, data, flag, p)
	void *v;
	u_long cmd;
	caddr_t data;
	int flag;
	struct proc *p;
d332 1
a332 4
pcdisplay_mmap(v, offset, prot)
	void *v;
	off_t offset;
	int prot;
d338 2
a339 6
pcdisplay_alloc_screen(v, type, cookiep, curxp, curyp, defattrp)
	void *v;
	const struct wsscreen_descr *type;
	void **cookiep;
	int *curxp, *curyp;
	long *defattrp;
d355 1
a355 3
pcdisplay_free_screen(v, cookie)
	void *v;
	void *cookie;
d366 2
a367 6
pcdisplay_show_screen(v, cookie, waitok, cb, cbarg)
	void *v;
	void *cookie;
	int waitok;
	void (*cb)(void *, int, int);
	void *cbarg;
d379 1
a379 5
pcdisplay_alloc_attr(id, fg, bg, flags, attrp)
	void *id;
	int fg, bg;
	int flags;
	long *attrp;
d389 1
a389 4
pcdisplay_unpack_attr(id, attr, fg, bg, ul)
	void *id;
	long attr;
	int *fg, *bg, *ul;
@


1.9
log
@Add an unpack_attr function to struct wsdisplay_emulops, to match the
existing alloc_attr function. This allows rasops_unpack_attr to be kept
private to rasops, yet available to the screen drivers.
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplay.c,v 1.8 2006/11/29 12:13:54 miod Exp $ */
d188 1
a188 1
		panic("pcdisplay_init: cannot map memory");
d191 1
a191 1
		panic("pcdisplay_init: cannot map io");
@


1.8
log
@Add a new member to struct wsemuldisplaydev_attach_args, for a frame buffer
driver to be able to tell how many wscons screens to attach to it,
instead of WSDISPLAY_DEFAULTSCREENS which is a global setting.
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplay.c,v 1.7 2004/04/02 04:39:51 deraadt Exp $ */
d74 1
d88 2
a89 1
	pcdisplay_alloc_attr
d419 17
@


1.7
log
@remove terms 3 & 4 for drochner@@NetBSD.org; as seen on netbsd lists
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplay.c,v 1.6 2002/03/14 03:16:05 millert Exp $ */
d290 1
@


1.6
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplay.c,v 1.5 2002/03/14 01:26:56 millert Exp $ */
a15 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed for the NetBSD Project
 *	by Matthias Drochner.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplay.c,v 1.4 2001/02/02 20:25:40 aaron Exp $ */
d117 2
a118 2
static int pcdisplay_show_screen __P((void *, void *, int,
				      void (*) (void *, int, int), void *));
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d70 2
a71 2
int	pcdisplay_match __P((struct device *, void *, void *));
void	pcdisplay_attach __P((struct device *, struct device *, void *));
d73 4
a76 4
static int pcdisplay_is_console __P((bus_space_tag_t));
static int pcdisplay_probe_col __P((bus_space_tag_t, bus_space_tag_t));
static int pcdisplay_probe_mono __P((bus_space_tag_t, bus_space_tag_t));
static void pcdisplay_init __P((struct pcdisplay_config *,
d78 2
a79 2
			     int));
static int pcdisplay_alloc_attr __P((void *, int, int, int, long *));
d112 5
a116 5
static int pcdisplay_ioctl __P((void *, u_long, caddr_t, int, struct proc *));
static paddr_t pcdisplay_mmap __P((void *, off_t, int));
static int pcdisplay_alloc_screen __P((void *, const struct wsscreen_descr *,
				       void **, int *, int *, long *));
static void pcdisplay_free_screen __P((void *, void *));
d398 1
a398 1
	void (*cb) __P((void *, int, int));
@


1.4.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplay.c,v 1.4 2001/02/02 20:25:40 aaron Exp $ */
d70 2
a71 2
int	pcdisplay_match(struct device *, void *, void *);
void	pcdisplay_attach(struct device *, struct device *, void *);
d73 4
a76 4
static int pcdisplay_is_console(bus_space_tag_t);
static int pcdisplay_probe_col(bus_space_tag_t, bus_space_tag_t);
static int pcdisplay_probe_mono(bus_space_tag_t, bus_space_tag_t);
static void pcdisplay_init(struct pcdisplay_config *,
d78 2
a79 2
			     int);
static int pcdisplay_alloc_attr(void *, int, int, int, long *);
d112 7
a118 7
static int pcdisplay_ioctl(void *, u_long, caddr_t, int, struct proc *);
static paddr_t pcdisplay_mmap(void *, off_t, int);
static int pcdisplay_alloc_screen(void *, const struct wsscreen_descr *,
				       void **, int *, int *, long *);
static void pcdisplay_free_screen(void *, void *);
static int pcdisplay_show_screen(void *, void *, int,
				 void (*) (void *, int, int), void *);
d398 1
a398 1
	void (*cb)(void *, int, int);
@


1.4.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/* $OpenBSD: pcdisplay.c,v 1.4 2001/02/02 20:25:40 aaron Exp $ */
@


1.4.4.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d70 2
a71 2
int	pcdisplay_match(struct device *, void *, void *);
void	pcdisplay_attach(struct device *, struct device *, void *);
d73 4
a76 4
static int pcdisplay_is_console(bus_space_tag_t);
static int pcdisplay_probe_col(bus_space_tag_t, bus_space_tag_t);
static int pcdisplay_probe_mono(bus_space_tag_t, bus_space_tag_t);
static void pcdisplay_init(struct pcdisplay_config *,
d78 2
a79 2
			     int);
static int pcdisplay_alloc_attr(void *, int, int, int, long *);
d112 7
a118 7
static int pcdisplay_ioctl(void *, u_long, caddr_t, int, struct proc *);
static paddr_t pcdisplay_mmap(void *, off_t, int);
static int pcdisplay_alloc_screen(void *, const struct wsscreen_descr *,
				       void **, int *, int *, long *);
static void pcdisplay_free_screen(void *, void *);
static int pcdisplay_show_screen(void *, void *, int,
				 void (*) (void *, int, int), void *);
d398 1
a398 1
	void (*cb)(void *, int, int);
@


1.4.4.3
log
@Merge with the trunk
@
text
@d16 6
@


1.3
log
@OpenBSD does have paddr_t, I can't explain why I thought it didn't; art@@
@
text
@d1 1
@


1.2
log
@Some int -> u_long (I incorrectly converted paddr_t to int when porting this).
@
text
@d112 1
a112 1
static u_long pcdisplay_mmap __P((void *, off_t, int));
d349 1
a349 1
static u_long
@


1.1
log
@This driver supports PC display adapter hardware within the wscons(4)
console framework. It doesn't provide direct device driver entry points
but makes its functions available via the internal wsdisplay(4) interface.

The pcdisplay driver is indended as a minimal ``catch-all'' driver for
the different kinds of MDA or CGA compatible adapters. It doesn't support
multiple screens, nor colors or font loading.

From NetBSD. Contains routines used by the vga(4) and ega(4) drivers, etc.
This is more MI stuff in prepartion for wscons on i386 and alpha.
@
text
@d112 1
a112 1
static int pcdisplay_mmap __P((void *, off_t, int));
d349 1
a349 1
static int
@

