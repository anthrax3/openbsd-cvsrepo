head	1.8;
access;
symbols
	OPENBSD_6_0:1.7.0.22
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.12
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.20
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.18
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.16
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.14
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.10
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.34
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.32
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.28
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.30
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.26
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.24
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.22
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.20
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.18
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.16
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.14
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.12
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.10
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.8
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.3.0.2
	UBC_BASE:1.3
	SMP:1.1.0.4
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.08.31.15.53.06;	author tedu;	state dead;
branches;
next	1.7;
commitid	m7MmVL2p3FX326F3;

1.7
date	2011.06.20.01.09.25;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.15.15.00.11;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.07.18.32.19;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2002.01.02.19.36.51;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2001.12.18.18.48.08;	author mickey;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2001.12.05.10.27.06;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2001.10.04.20.17.43;	author gluk;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2001.10.31.03.22.43;	author nate;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2002.03.06.02.11.44;	author niklas;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2003.03.28.00.38.16;	author niklas;	state Exp;
branches;
next	;

1.3.2.1
date	2002.01.31.22.55.33;	author niklas;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2002.10.29.00.33.26;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Support A Radio Free Europe!
remove long disabled radio devices
ok deraadt
@
text
@/* $OpenBSD: sf16fmr2.c,v 1.7 2011/06/20 01:09:25 matthew Exp $ */
/* $RuOBSD: sf16fmr2.c,v 1.12 2001/10/18 16:51:36 pva Exp $ */

/*
 * Copyright (c) 2001 Maxim Tsyplakov <tm@@oganer.net>,
 *                    Vladimir Popov <jumbo@@narod.ru>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* SoundForte RadioLink SF16-FMR2 FM Radio Card device driver */

/*
 * Philips TEA5757H AM/FM Self Tuned Radio:
 *	http://www.semiconductors.philips.com/pip/TEA5757H
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/errno.h>
#include <sys/ioctl.h>
#include <sys/device.h>
#include <sys/radioio.h>

#include <dev/isa/isavar.h>
#include <dev/radio_if.h>
#include <dev/ic/tea5757.h>
#include <dev/ic/pt2254a.h>

#define SF16FMR2_BASE_VALID(x)	(x == 0x384)
#define SF16FMR2_CAPABILITIES	RADIO_CAPS_DETECT_STEREO |		\
				RADIO_CAPS_DETECT_SIGNAL |		\
				RADIO_CAPS_SET_MONO |			\
				RADIO_CAPS_LOCK_SENSITIVITY |		\
				RADIO_CAPS_HW_AFC |			\
				RADIO_CAPS_HW_SEARCH

#define SF16FMR2_AMP		0
#define SF16FMR2_NOAMP		1

#define SF16FMR2_AMPLIFIER	(1 << 7)
#define SF16FMR2_SIGNAL		(1 << 3)
#define SF16FMR2_STEREO		(1 << 3)

#define SF16FMR2_MUTE		0x00
#define SF16FMR2_UNMUTE		0x04

#define SF16FMR2_DATA_ON	(1 << 0)
#define SF16FMR2_DATA_OFF	(0 << 0)

#define SF16FMR2_CLCK_ON	(1 << 1)
#define SF16FMR2_CLCK_OFF	(0 << 1)

#define SF16FMR2_WREN_ON	(0 << 2)  /* SF16-FMR2 has inverse WREN */
#define SF16FMR2_WREN_OFF	(1 << 2)

#define SF16FMR2_READ_CLOCK_LOW		\
	SF16FMR2_DATA_ON | SF16FMR2_CLCK_OFF | SF16FMR2_WREN_OFF

#define SF16FMR2_READ_CLOCK_HIGH	\
	SF16FMR2_DATA_ON | SF16FMR2_CLCK_ON | SF16FMR2_WREN_OFF

#define SF16FMR2_VOLU_STROBE_ON		(0 << 2)
#define SF16FMR2_VOLU_STROBE_OFF	(1 << 2)
#define SF16FMR2_VOLU_CLOCK_ON		(1 << 5)
#define SF16FMR2_VOLU_CLOCK_OFF		(0 << 5)
#define SF16FMR2_VOLU_DATA_ON		(1 << 6)
#define SF16FMR2_VOLU_DATA_OFF		(0 << 6)

int	sf2r_probe(struct device *, void *, void *);
void	sf2r_attach(struct device *, struct device * self, void *);

int	sf2r_get_info(void *, struct radio_info *);
int	sf2r_set_info(void *, struct radio_info *);
int	sf2r_search(void *, int);

/* define our interface to the higher level radio driver */
struct radio_hw_if sf2r_hw_if = {
	NULL, /* open */
	NULL, /* close */
	sf2r_get_info,
	sf2r_set_info,
	sf2r_search
};

struct sf2r_softc {
	struct device	sc_dev;

	int		type;
	u_int32_t	freq;
	u_int32_t	stereo;
	u_int32_t	lock;
	u_int8_t	vol;
	int	mute;

	struct tea5757_t	tea;
};

struct cfattach sf2r_ca = {
	sizeof(struct sf2r_softc), sf2r_probe, sf2r_attach
};

struct cfdriver sf2r_cd = {
	NULL, "sf2r", DV_DULL
};

void	sf2r_set_mute(struct sf2r_softc *);
void	sf2r_send_vol_bit(bus_space_tag_t, bus_space_handle_t, u_int32_t);
int	sf2r_find(bus_space_tag_t, bus_space_handle_t, int);

u_int32_t sf2r_read_register(bus_space_tag_t, bus_space_handle_t, bus_size_t);

void	sf2r_init(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
void	sf2r_rset(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
void	sf2r_write_bit(bus_space_tag_t, bus_space_handle_t, bus_size_t, int);

int
sf2r_probe(struct device *parent, void *match, void *aux)
{
	struct isa_attach_args *ia = aux;
	bus_space_tag_t iot = ia->ia_iot;
	bus_space_handle_t ioh;
	struct cfdata *cf = ((struct device *)match)->dv_cfdata;
	int iosize = 1, iobase = ia->ia_iobase;

	if (!SF16FMR2_BASE_VALID(iobase)) {
		printf("sf2r: configured iobase 0x%x invalid\n", iobase);
		return (0);
	}

	if (bus_space_map(iot, iobase, iosize, 0, &ioh))
		return (0);

	if (!sf2r_find(iot, ioh, cf->cf_flags)) {
		bus_space_unmap(iot, ioh, iosize);
		return (0);
	}

	bus_space_unmap(iot, ioh, iosize);
	ia->ia_iosize = iosize;
	return (1);
}

void
sf2r_attach(struct device *parent, struct device *self, void *aux)
{
	struct sf2r_softc *sc = (void *) self;
	struct isa_attach_args *ia = aux;
	struct cfdata *cf = sc->sc_dev.dv_cfdata;
	int type;

	sc->tea.iot = ia->ia_iot;
	sc->mute = 0;
	sc->vol = 0;
	sc->freq = MIN_FM_FREQ;
	sc->stereo = TEA5757_STEREO;
	sc->lock = TEA5757_S030;

	/* remap I/O */
	if (bus_space_map(sc->tea.iot, ia->ia_iobase, ia->ia_iosize,
	    0, &sc->tea.ioh)) {
		printf(": bus_space_map() failed\n");
		return;
	}

	sc->tea.offset = 0;
	sc->tea.flags = cf->cf_flags;

	sc->tea.init = sf2r_init;
	sc->tea.rset = sf2r_rset;
	sc->tea.write_bit = sf2r_write_bit;
	sc->tea.read = sf2r_read_register;

	printf(": SoundForte RadioLink SF16-FMR2\n");
	tea5757_set_freq(&sc->tea, sc->stereo, sc->lock, sc->freq);
	sf2r_set_mute(sc);

	type = sf2r_read_register(sc->tea.iot, sc->tea.ioh, sc->tea.offset);
	sc->type = (type >> 24) & (1 << 1)? SF16FMR2_AMP : SF16FMR2_NOAMP;

	radio_attach_mi(&sf2r_hw_if, sc, &sc->sc_dev);
}

/*
 * Mute/unmute the card
 */
void
sf2r_set_mute(struct sf2r_softc *sc)
{
	u_int8_t mute;
	u_int32_t reg, vol, i;

	if (sc->type == SF16FMR2_NOAMP) {
		mute = (sc->mute || !sc->vol)? SF16FMR2_MUTE : SF16FMR2_UNMUTE;
		bus_space_write_1(sc->tea.iot, sc->tea.ioh, 0, mute);
		DELAY(64);
		bus_space_write_1(sc->tea.iot, sc->tea.ioh, 0, mute);
	} else {
		mute = sc->mute? SF16FMR2_MUTE : SF16FMR2_UNMUTE;
		bus_space_write_1(sc->tea.iot, sc->tea.ioh, 0, mute);
		DELAY(64);
		bus_space_write_1(sc->tea.iot, sc->tea.ioh, 0, mute);

		vol = pt2254a_encode_volume(&sc->vol, 255);
		reg = pt2254a_compose_register(vol, vol,
		    USE_CHANNEL, USE_CHANNEL);

		bus_space_write_1(sc->tea.iot, sc->tea.ioh,
		    0, SF16FMR2_VOLU_STROBE_OFF);

		for (i = 0; i < PT2254A_REGISTER_LENGTH; i++)
			sf2r_send_vol_bit(sc->tea.iot, sc->tea.ioh,
			    reg & (1 << i));

		bus_space_write_1(sc->tea.iot, sc->tea.ioh,
		    0, SF16FMR2_VOLU_STROBE_ON);
		bus_space_write_1(sc->tea.iot, sc->tea.ioh,
		    0, SF16FMR2_VOLU_STROBE_OFF);
		bus_space_write_1(sc->tea.iot, sc->tea.ioh,
		    0, 0x10 | SF16FMR2_VOLU_STROBE_OFF);
	}
}

void
sf2r_init(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off, u_int32_t d)
{
	bus_space_write_1(iot, ioh, off, SF16FMR2_MUTE);
}

void
sf2r_rset(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off, u_int32_t d)
{
	bus_space_write_1(iot, ioh, off, SF16FMR2_MUTE);
	bus_space_write_1(iot, ioh, off, SF16FMR2_UNMUTE);
}

int
sf2r_find(bus_space_tag_t iot, bus_space_handle_t ioh, int flags)
{
	struct sf2r_softc sc;
	u_int32_t freq;

	sc.tea.iot = iot;
	sc.tea.ioh = ioh;
	sc.tea.offset = 0;
	sc.tea.flags = flags;
	sc.tea.init = sf2r_init;
	sc.tea.rset = sf2r_rset;
	sc.tea.write_bit = sf2r_write_bit;
	sc.tea.read = sf2r_read_register;
	sc.lock = TEA5757_S030;
	sc.stereo = TEA5757_STEREO;

	if ((bus_space_read_1(iot, ioh, 0) & 0x70) == 0x30) {
		/*
		 * Let's try to write and read a frequency.
		 * If the written and read frequencies are
		 * the same then success.
		 */
		sc.freq = MIN_FM_FREQ;
		tea5757_set_freq(&sc.tea, sc.stereo, sc.lock, sc.freq);
		sf2r_set_mute(&sc);
		freq = sf2r_read_register(iot, ioh, sc.tea.offset);
		if (tea5757_decode_freq(freq, sc.tea.flags & TEA5757_TEA5759)
		    == sc.freq)
			return 1;
	}

	return 0;
}

void
sf2r_write_bit(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off, int bit)
{
	u_int8_t data;

	data = bit? SF16FMR2_DATA_ON : SF16FMR2_DATA_OFF;

	bus_space_write_1(iot, ioh, off,
	    SF16FMR2_WREN_ON | SF16FMR2_CLCK_OFF | data);
	bus_space_write_1(iot, ioh, off,
	    SF16FMR2_WREN_ON | SF16FMR2_CLCK_ON  | data);
	bus_space_write_1(iot, ioh, off,
	    SF16FMR2_WREN_ON | SF16FMR2_CLCK_OFF | data);
}

u_int32_t
sf2r_read_register(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off)
{
	u_int32_t res = 0;
	u_int8_t i, state = 0;

	bus_space_write_1(iot, ioh, off, SF16FMR2_READ_CLOCK_LOW);
	DELAY(6);
	bus_space_write_1(iot, ioh, off, SF16FMR2_READ_CLOCK_HIGH);

	i = bus_space_read_1(iot, ioh, off);
	DELAY(6);
	/* Amplifier: 0 - not present, 1 - present */
	state = i & SF16FMR2_AMPLIFIER? (1 << 2) : (0 << 2);
	/* Signal: 0 - not tuned, 1 - tuned */
	state |= i & SF16FMR2_SIGNAL? (0 << 1) : (1 << 1);

	bus_space_write_1(iot, ioh, off, SF16FMR2_READ_CLOCK_LOW);
	i = bus_space_read_1(iot, ioh, off);
	/* Stereo: 0 - mono, 1 - stereo */
	state |= i & SF16FMR2_STEREO? (0 << 0) : (1 << 0);
	res = i & SF16FMR2_DATA_ON;

	i = 23;
	while ( i-- ) {
		DELAY(6);
		res <<= 1;
		bus_space_write_1(iot, ioh, off, SF16FMR2_READ_CLOCK_HIGH);
		DELAY(6);
		bus_space_write_1(iot, ioh, off, SF16FMR2_READ_CLOCK_LOW);
		res |= bus_space_read_1(iot, ioh, off) & SF16FMR2_DATA_ON;
	}

	return res | (state << 24);
}

int
sf2r_get_info(void *v, struct radio_info *ri)
{
	struct sf2r_softc *sc = v;
	u_int32_t buf;

	ri->mute = sc->mute;
	ri->volume = sc->vol? 255 : 0;
	ri->stereo = sc->stereo == TEA5757_STEREO? 1 : 0;
	ri->caps = SF16FMR2_CAPABILITIES;
	ri->rfreq = 0;
	ri->lock = tea5757_decode_lock(sc->lock);

	buf = sf2r_read_register(sc->tea.iot, sc->tea.ioh, sc->tea.offset);
	ri->freq  = sc->freq = tea5757_decode_freq(buf,
	    sc->tea.flags & TEA5757_TEA5759);
	ri->info = 3 & (buf >> 24);

	return (0);
}

int
sf2r_set_info(void *v, struct radio_info *ri)
{
	struct sf2r_softc *sc = v;

	sc->mute = ri->mute? 1 : 0;
	sc->vol = ri->volume? 255 : 0;
	sc->stereo = ri->stereo? TEA5757_STEREO: TEA5757_MONO;
	sc->lock = tea5757_encode_lock(ri->lock);
	ri->freq = sc->freq = tea5757_set_freq(&sc->tea,
	    sc->lock, sc->stereo, ri->freq);
	sf2r_set_mute(sc);

	return (0);
}

int
sf2r_search(void *v, int f)
{
	struct sf2r_softc *sc = v;

	tea5757_search(&sc->tea, sc->lock, sc->stereo, f);
	sf2r_set_mute(sc);

	return (0);
}

void
sf2r_send_vol_bit(bus_space_tag_t iot, bus_space_handle_t ioh, u_int32_t d) {
	u_int8_t data;

	data = SF16FMR2_VOLU_STROBE_OFF;
	data |= d? SF16FMR2_VOLU_DATA_ON : SF16FMR2_VOLU_DATA_OFF;

	bus_space_write_1(iot, ioh, 0, data | SF16FMR2_VOLU_CLOCK_OFF);
	bus_space_write_1(iot, ioh, 0, data | SF16FMR2_VOLU_CLOCK_ON);
}
@


1.7
log
@isa(4) is an indirect bus, which means that drivers that attach to it
need to provide an xxxprobe() method instead of an xxxmatch() method.
The critical difference is xxxprobe() is given a device softc for the
second argument, whereas a xxxmatch() is given the cfdata as the
second argument.

This commit fixes the handful of ISA device drivers that incorrectly
cast the second argument to a "struct cfdata *" instead of a "struct
device *".  (Minor complication: unlike isa(4), isapnp(4) is a direct
bus, and if_we.c used the same probe/match code for both; now separate
we_probe and we_match methods are used as appropriate.)

"makes sense to me" krw@@; ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: sf16fmr2.c,v 1.6 2002/10/15 15:00:11 mickey Exp $ */
@


1.6
log
@support sf2r card with attenuator; from jumbo@@ w/ some knf from mickey@@
@
text
@d1 1
a1 1
/* $OpenBSD: sf16fmr2.c,v 1.5 2002/01/07 18:32:19 mickey Exp $ */
d143 1
a143 1
	struct cfdata *cf = match;
@


1.5
log
@use flags instead of options to choose the tea5757 vs tea5759.
from Vladimir Popov <jumbo@@narod.ru>
@
text
@d1 1
a1 1
/* $OpenBSD: sf16fmr2.c,v 1.4 2002/01/02 19:36:51 mickey Exp $ */
d48 1
d58 3
d78 1
a78 1
		SF16FMR2_DATA_ON | SF16FMR2_CLCK_OFF | SF16FMR2_WREN_OFF
d81 8
a88 1
		SF16FMR2_DATA_ON | SF16FMR2_CLCK_ON | SF16FMR2_WREN_OFF
d109 1
d128 1
d131 1
a131 1
u_int32_t	sf2r_read_register(bus_space_tag_t, bus_space_handle_t, bus_size_t);
d170 1
d181 1
a181 1
			  0, &sc->tea.ioh)) {
d198 3
d211 1
d213 29
a241 4
	mute = (sc->mute || !sc->vol) ? SF16FMR2_MUTE : SF16FMR2_UNMUTE;
	bus_space_write_1(sc->tea.iot, sc->tea.ioh, 0, mute);
	DELAY(64);
	bus_space_write_1(sc->tea.iot, sc->tea.ioh, 0, mute);
d285 1
a285 1
				== sc.freq)
d297 1
a297 1
	data = bit ? SF16FMR2_DATA_ON : SF16FMR2_DATA_OFF;
d300 1
a300 1
			SF16FMR2_WREN_ON | SF16FMR2_CLCK_OFF | data);
d302 1
a302 1
			SF16FMR2_WREN_ON | SF16FMR2_CLCK_ON  | data);
d304 1
a304 1
			SF16FMR2_WREN_ON | SF16FMR2_CLCK_OFF | data);
d320 1
a320 1
	state = i & SF16FMR2_AMPLIFIER ? (1 << 2) : (0 << 2);
d322 1
a322 1
	state |= i & SF16FMR2_SIGNAL   ? (0 << 1) : (1 << 1);
d327 1
a327 1
	state |= i & SF16FMR2_STEREO   ? (0 << 0) : (1 << 0);
d350 2
a351 2
	ri->volume = sc->vol ? 255 : 0;
	ri->stereo = sc->stereo == TEA5757_STEREO ? 1 : 0;
d358 1
a358 1
			sc->tea.flags & TEA5757_TEA5759);
d369 3
a371 3
	sc->mute = ri->mute ? 1 : 0;
	sc->vol = ri->volume ? 255 : 0;
	sc->stereo = ri->stereo ? TEA5757_STEREO: TEA5757_MONO;
d374 1
a374 1
			sc->lock, sc->stereo, ri->freq);
d389 11
@


1.4
log
@do not unmap io space while it's still in use (in *probe)
missing new lines and replace panics w/ printf+return.
idea from netbsd's port.
@
text
@d1 1
a1 1
/* $OpenBSD: sf16fmr2.c,v 1.3 2001/12/18 18:48:08 mickey Exp $ */
d116 1
a116 1
int	sf2r_find(bus_space_tag_t, bus_space_handle_t);
d125 1
a125 1
sf2r_probe(struct device *parent, void *self, void *aux)
d130 1
a130 1

d141 1
a141 1
	if (!sf2r_find(iot, ioh)) {
d156 1
d173 1
d215 1
a215 1
sf2r_find(bus_space_tag_t iot, bus_space_handle_t ioh)
d223 1
d241 2
a242 1
		if (tea5757_decode_freq(freq) == sc.freq)
d314 2
a315 1
	ri->freq  = sc->freq = tea5757_decode_freq(buf);
@


1.3
log
@bigger delay in mute; from Maxim V. Tsyplakov <tm@@oganer.net>
@
text
@d1 1
a1 1
/* $OpenBSD: sf16fmr2.c,v 1.2 2001/12/05 10:27:06 mickey Exp $ */
d135 1
a135 1
		return 0;
d139 6
a144 1
		return 0;
a146 4

	if (!sf2r_find(iot, ioh))
		return 0;

d148 1
a148 1
	return 1;
d166 4
a169 2
			  0, &sc->tea.ioh))
		panic("sf2rattach: bus_space_map() failed");
d178 1
a178 1
	printf(": SoundForte RadioLink SF16-FMR2");
@


1.3.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/* $OpenBSD: sf16fmr2.c,v 1.5 2002/01/07 18:32:19 mickey Exp $ */
d116 1
a116 1
int	sf2r_find(bus_space_tag_t, bus_space_handle_t, int);
d125 1
a125 1
sf2r_probe(struct device *parent, void *match, void *aux)
d130 1
a130 1
	struct cfdata *cf = match;
d135 1
a135 1
		return (0);
d139 3
a141 1
		return (0);
d143 2
a144 4
	if (!sf2r_find(iot, ioh, cf->cf_flags)) {
		bus_space_unmap(iot, ioh, iosize);
		return (0);
	}
a145 1
	bus_space_unmap(iot, ioh, iosize);
d147 1
a147 1
	return (1);
a154 1
	struct cfdata *cf = sc->sc_dev.dv_cfdata;
d165 2
a166 4
			  0, &sc->tea.ioh)) {
		printf(": bus_space_map() failed\n");
		return;
	}
a168 1
	sc->tea.flags = cf->cf_flags;
d175 1
a175 1
	printf(": SoundForte RadioLink SF16-FMR2\n");
d210 1
a210 1
sf2r_find(bus_space_tag_t iot, bus_space_handle_t ioh, int flags)
a217 1
	sc.tea.flags = flags;
d235 1
a235 2
		if (tea5757_decode_freq(freq, sc.tea.flags & TEA5757_TEA5759)
				== sc.freq)
d307 1
a307 2
	ri->freq  = sc->freq = tea5757_decode_freq(buf,
			sc->tea.flags & TEA5757_TEA5759);
@


1.3.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/* $OpenBSD: sf16fmr2.c,v 1.3.2.1 2002/01/31 22:55:33 niklas Exp $ */
a47 1
#include <dev/ic/pt2254a.h>
a56 3
#define SF16FMR2_AMP		0
#define SF16FMR2_NOAMP		1

d74 1
a74 1
	SF16FMR2_DATA_ON | SF16FMR2_CLCK_OFF | SF16FMR2_WREN_OFF
d77 1
a77 8
	SF16FMR2_DATA_ON | SF16FMR2_CLCK_ON | SF16FMR2_WREN_OFF

#define SF16FMR2_VOLU_STROBE_ON		(0 << 2)
#define SF16FMR2_VOLU_STROBE_OFF	(1 << 2)
#define SF16FMR2_VOLU_CLOCK_ON		(1 << 5)
#define SF16FMR2_VOLU_CLOCK_OFF		(0 << 5)
#define SF16FMR2_VOLU_DATA_ON		(1 << 6)
#define SF16FMR2_VOLU_DATA_OFF		(0 << 6)
a97 1
	int		type;
a115 1
void	sf2r_send_vol_bit(bus_space_tag_t, bus_space_handle_t, u_int32_t);
d118 1
a118 1
u_int32_t sf2r_read_register(bus_space_tag_t, bus_space_handle_t, bus_size_t);
a156 1
	int type;
d167 1
a167 1
	    0, &sc->tea.ioh)) {
a183 3
	type = sf2r_read_register(sc->tea.iot, sc->tea.ioh, sc->tea.offset);
	sc->type = (type >> 24) & (1 << 1)? SF16FMR2_AMP : SF16FMR2_NOAMP;

a193 1
	u_int32_t reg, vol, i;
d195 4
a198 29
	if (sc->type == SF16FMR2_NOAMP) {
		mute = (sc->mute || !sc->vol)? SF16FMR2_MUTE : SF16FMR2_UNMUTE;
		bus_space_write_1(sc->tea.iot, sc->tea.ioh, 0, mute);
		DELAY(64);
		bus_space_write_1(sc->tea.iot, sc->tea.ioh, 0, mute);
	} else {
		mute = sc->mute? SF16FMR2_MUTE : SF16FMR2_UNMUTE;
		bus_space_write_1(sc->tea.iot, sc->tea.ioh, 0, mute);
		DELAY(64);
		bus_space_write_1(sc->tea.iot, sc->tea.ioh, 0, mute);

		vol = pt2254a_encode_volume(&sc->vol, 255);
		reg = pt2254a_compose_register(vol, vol,
		    USE_CHANNEL, USE_CHANNEL);

		bus_space_write_1(sc->tea.iot, sc->tea.ioh,
		    0, SF16FMR2_VOLU_STROBE_OFF);

		for (i = 0; i < PT2254A_REGISTER_LENGTH; i++)
			sf2r_send_vol_bit(sc->tea.iot, sc->tea.ioh,
			    reg & (1 << i));

		bus_space_write_1(sc->tea.iot, sc->tea.ioh,
		    0, SF16FMR2_VOLU_STROBE_ON);
		bus_space_write_1(sc->tea.iot, sc->tea.ioh,
		    0, SF16FMR2_VOLU_STROBE_OFF);
		bus_space_write_1(sc->tea.iot, sc->tea.ioh,
		    0, 0x10 | SF16FMR2_VOLU_STROBE_OFF);
	}
d242 1
a242 1
		    == sc.freq)
d254 1
a254 1
	data = bit? SF16FMR2_DATA_ON : SF16FMR2_DATA_OFF;
d257 1
a257 1
	    SF16FMR2_WREN_ON | SF16FMR2_CLCK_OFF | data);
d259 1
a259 1
	    SF16FMR2_WREN_ON | SF16FMR2_CLCK_ON  | data);
d261 1
a261 1
	    SF16FMR2_WREN_ON | SF16FMR2_CLCK_OFF | data);
d277 1
a277 1
	state = i & SF16FMR2_AMPLIFIER? (1 << 2) : (0 << 2);
d279 1
a279 1
	state |= i & SF16FMR2_SIGNAL? (0 << 1) : (1 << 1);
d284 1
a284 1
	state |= i & SF16FMR2_STEREO? (0 << 0) : (1 << 0);
d307 2
a308 2
	ri->volume = sc->vol? 255 : 0;
	ri->stereo = sc->stereo == TEA5757_STEREO? 1 : 0;
d315 1
a315 1
	    sc->tea.flags & TEA5757_TEA5759);
d326 3
a328 3
	sc->mute = ri->mute? 1 : 0;
	sc->vol = ri->volume? 255 : 0;
	sc->stereo = ri->stereo? TEA5757_STEREO: TEA5757_MONO;
d331 1
a331 1
	    sc->lock, sc->stereo, ri->freq);
a345 11
}

void
sf2r_send_vol_bit(bus_space_tag_t iot, bus_space_handle_t ioh, u_int32_t d) {
	u_int8_t data;

	data = SF16FMR2_VOLU_STROBE_OFF;
	data |= d? SF16FMR2_VOLU_DATA_ON : SF16FMR2_VOLU_DATA_OFF;

	bus_space_write_1(iot, ioh, 0, data | SF16FMR2_VOLU_CLOCK_OFF);
	bus_space_write_1(iot, ioh, 0, data | SF16FMR2_VOLU_CLOCK_ON);
@


1.2
log
@update for radio drivers from tm@@oganer.net und jumbo@@narod.ru
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d192 1
a192 1
	DELAY(6);
@


1.1
log
@SoundForte RadioLink SF16-FMR2 FM Radio Card device driver

Work by Maxim Tsyplakov <tm@@oganer.net>, Vladimir Popov <jumbo@@narod.ru>
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/* $RuOBSD: sf16fmr2.c,v 1.10 2001/10/04 18:51:50 pva Exp $ */
d81 4
a84 3
int	sf2r_open(dev_t, int, int, struct proc *);
int	sf2r_close(dev_t, int, int, struct proc *);
int	sf2r_ioctl(dev_t, u_long, caddr_t, int, struct proc *);
d88 5
a92 3
	sf2r_open,
	sf2r_close,
	sf2r_ioctl
d98 5
a102 5
	u_long	sc_freq;
	u_long	sc_stereo;
	u_long	sc_lock;
	u_char	sc_vol;
	u_char	sc_mute;
d116 1
a116 2
void	sf2r_search(struct sf2r_softc *, u_char);
u_int	sf2r_find(bus_space_tag_t, bus_space_handle_t);
d118 1
a118 1
u_long	sf2r_read_register(bus_space_tag_t, bus_space_handle_t, bus_size_t);
d120 3
a122 3
void	sf2r_init(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_long);
void	sf2r_rset(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_long);
void	sf2r_write_bit(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_char);
d157 5
a161 17
#ifdef RADIO_INIT_MUTE
	sc->sc_mute = RADIO_INIT_MUTE;
#else
	sc->sc_mute = 1;
#endif /* RADIO_INIT_MUTE */
#ifdef RADIO_INIT_VOL
	sc->sc_vol = RADIO_INIT_VOL;
#else
	sc->sc_vol = 0;
#endif /* RADIO_INIT_VOL */
#ifdef RADIO_INIT_FREQ
	sc->sc_freq = RADIO_INIT_FREQ;
#else
	sc->sc_freq = MIN_FM_FREQ;
#endif /* RADIO_INIT_FREQ */
	sc->sc_stereo = TEA5757_STEREO;
	sc->sc_lock = TEA5757_S030;
d176 1
a176 1
	tea5757_set_freq(&sc->tea, sc->sc_stereo, sc->sc_lock, sc->sc_freq);
a181 88
int
sf2r_open(dev_t dev, int flags, int fmt, struct proc *p)
{
	struct sf2r_softc *sc;
	return !(sc = sf2r_cd.cd_devs[0]) ? ENXIO : 0;
}

int
sf2r_close(dev_t dev, int flags, int fmt, struct proc *p)
{
	return 0;
}

/*
 * Handle the ioctl for the device
 */
int
sf2r_ioctl(dev_t dev, u_long cmd, caddr_t data, int flags, struct proc *p)
{
	struct sf2r_softc *sc = sf2r_cd.cd_devs[0];
	int error;

	error = 0;
	switch (cmd) {
	case RIOCGMUTE:
		*(u_long *)data = sc->sc_mute ? 1 : 0;
		break;
	case RIOCSMUTE:
		sc->sc_mute = *(u_long *)data ? 1 : 0;
		sf2r_set_mute(sc);
		break;
	case RIOCGVOLU:
		*(u_long *)data = sc->sc_vol ? 255 : 0;
		break;
	case RIOCSVOLU:
		sc->sc_vol = *(u_long *)data ? 1 : 0;
		sf2r_set_mute(sc);
		break;
	case RIOCGMONO:
		*(u_long *)data = sc->sc_stereo == TEA5757_STEREO ? 0 : 1;
		break;
	case RIOCSMONO:
		sc->sc_stereo = *(u_long *)data ? TEA5757_MONO : TEA5757_STEREO;
		tea5757_set_freq(&sc->tea, sc->sc_stereo, sc->sc_lock,
				sc->sc_freq);
		sf2r_set_mute(sc);
		break;
	case RIOCGFREQ:
		sc->sc_freq = sf2r_read_register(sc->tea.iot, sc->tea.ioh,
				sc->tea.offset);
		sc->sc_freq = tea5757_decode_freq(sc->sc_freq);
		*(u_long *)data = sc->sc_freq;
		break;
	case RIOCSFREQ:
		sc->sc_freq = tea5757_set_freq(&sc->tea, sc->sc_stereo,
				sc->sc_lock, *(u_long *)data);
		sf2r_set_mute(sc);
		break;
	case RIOCSSRCH:
		tea5757_search(&sc->tea, sc->sc_stereo, sc->sc_lock,
				*(u_long *)data);
		break;
	case RIOCGCAPS:
		*(u_long *)data = SF16FMR2_CAPABILITIES;
		break;
	case RIOCGINFO:
		*(u_long *)data = 3 & (sf2r_read_register(sc->tea.iot,
					sc->tea.ioh, 0) >> 25);
		break;
	case RIOCSLOCK:
		sc->sc_lock = tea5757_encode_lock(*(u_char *)data);
		tea5757_set_freq(&sc->tea, sc->sc_stereo, sc->sc_lock,
				sc->sc_freq);
		sf2r_set_mute(sc);
		break;
	case RIOCGLOCK:
		*(u_long *)data = tea5757_decode_lock(sc->sc_lock);
		break;
	case RIOCSREFF:
		/* FALLTHROUGH */
	case RIOCGREFF:
		/* NOT SUPPORTED */
	default:
		error = EINVAL;	/* invalid agument */
	}
	return error;
}

d188 1
a188 1
	u_char mute;
d190 1
a190 1
	mute = (sc->sc_mute || !sc->sc_vol) ? SF16FMR2_MUTE : SF16FMR2_UNMUTE;
d197 1
a197 1
sf2r_init(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off, u_long d)
d203 1
a203 1
sf2r_rset(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off, u_long d)
d209 1
a209 1
u_int
d213 1
a213 1
	u_long freq;
d222 2
a223 2
	sc.sc_lock = TEA5757_S030;
	sc.sc_stereo = TEA5757_STEREO;
d231 2
a232 6
#ifdef RADIO_INIT_FREQ
		sc.sc_freq = RADIO_INIT_FREQ;
#else
		sc.sc_freq = MIN_FM_FREQ;
#endif /* RADIO_INIT_FREQ */
		tea5757_set_freq(&sc.tea, sc.sc_stereo, sc.sc_lock, sc.sc_freq);
d235 1
a235 1
		if (tea5757_decode_freq(freq) == sc.sc_freq)
d243 1
a243 2
sf2r_write_bit(bus_space_tag_t iot, bus_space_handle_t ioh,
	       bus_size_t off, u_char bit)
d245 1
a245 1
	u_char data;
d257 1
a257 1
u_long
d260 2
a261 3
	u_char i;
	u_long res = 0;
	u_char state = 0;
d290 48
a337 1
	return res | (state<<25);
@


1.1.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.1.4.2
log
@Merge in trunk
@
text
@d1 2
a2 2
/* $OpenBSD$ */
/* $RuOBSD: sf16fmr2.c,v 1.12 2001/10/18 16:51:36 pva Exp $ */
d81 3
a83 4

int	sf2r_get_info(void *, struct radio_info *);
int	sf2r_set_info(void *, struct radio_info *);
int	sf2r_search(void *, int);
d87 3
a89 5
	NULL, /* open */
	NULL, /* close */
	sf2r_get_info,
	sf2r_set_info,
	sf2r_search
d95 5
a99 5
	u_int32_t	freq;
	u_int32_t	stereo;
	u_int32_t	lock;
	u_int8_t	vol;
	int	mute;
d113 2
a114 1
int	sf2r_find(bus_space_tag_t, bus_space_handle_t, int);
d116 1
a116 1
u_int32_t	sf2r_read_register(bus_space_tag_t, bus_space_handle_t, bus_size_t);
d118 3
a120 3
void	sf2r_init(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
void	sf2r_rset(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
void	sf2r_write_bit(bus_space_tag_t, bus_space_handle_t, bus_size_t, int);
d123 1
a123 1
sf2r_probe(struct device *parent, void *match, void *aux)
d128 1
a128 1
	struct cfdata *cf = match;
d133 1
a133 1
		return (0);
d137 3
a139 1
		return (0);
d141 2
a142 4
	if (!sf2r_find(iot, ioh, cf->cf_flags)) {
		bus_space_unmap(iot, ioh, iosize);
		return (0);
	}
a143 1
	bus_space_unmap(iot, ioh, iosize);
d145 1
a145 1
	return (1);
a152 1
	struct cfdata *cf = sc->sc_dev.dv_cfdata;
d155 17
a171 5
	sc->mute = 0;
	sc->vol = 0;
	sc->freq = MIN_FM_FREQ;
	sc->stereo = TEA5757_STEREO;
	sc->lock = TEA5757_S030;
d175 2
a176 4
			  0, &sc->tea.ioh)) {
		printf(": bus_space_map() failed\n");
		return;
	}
a178 1
	sc->tea.flags = cf->cf_flags;
d185 2
a186 2
	printf(": SoundForte RadioLink SF16-FMR2\n");
	tea5757_set_freq(&sc->tea, sc->stereo, sc->lock, sc->freq);
d192 88
d286 1
a286 1
	u_int8_t mute;
d288 1
a288 1
	mute = (sc->mute || !sc->vol) ? SF16FMR2_MUTE : SF16FMR2_UNMUTE;
d290 1
a290 1
	DELAY(64);
d295 1
a295 1
sf2r_init(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off, u_int32_t d)
d301 1
a301 1
sf2r_rset(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off, u_int32_t d)
d307 2
a308 2
int
sf2r_find(bus_space_tag_t iot, bus_space_handle_t ioh, int flags)
d311 1
a311 1
	u_int32_t freq;
a315 1
	sc.tea.flags = flags;
d320 2
a321 2
	sc.lock = TEA5757_S030;
	sc.stereo = TEA5757_STEREO;
d329 6
a334 2
		sc.freq = MIN_FM_FREQ;
		tea5757_set_freq(&sc.tea, sc.stereo, sc.lock, sc.freq);
d337 1
a337 2
		if (tea5757_decode_freq(freq, sc.tea.flags & TEA5757_TEA5759)
				== sc.freq)
d345 2
a346 1
sf2r_write_bit(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off, int bit)
d348 1
a348 1
	u_int8_t data;
d360 1
a360 1
u_int32_t
d363 3
a365 2
	u_int32_t res = 0;
	u_int8_t i, state = 0;
d394 1
a394 49
	return res | (state << 24);
}

int
sf2r_get_info(void *v, struct radio_info *ri)
{
	struct sf2r_softc *sc = v;
	u_int32_t buf;

	ri->mute = sc->mute;
	ri->volume = sc->vol ? 255 : 0;
	ri->stereo = sc->stereo == TEA5757_STEREO ? 1 : 0;
	ri->caps = SF16FMR2_CAPABILITIES;
	ri->rfreq = 0;
	ri->lock = tea5757_decode_lock(sc->lock);

	buf = sf2r_read_register(sc->tea.iot, sc->tea.ioh, sc->tea.offset);
	ri->freq  = sc->freq = tea5757_decode_freq(buf,
			sc->tea.flags & TEA5757_TEA5759);
	ri->info = 3 & (buf >> 24);

	return (0);
}

int
sf2r_set_info(void *v, struct radio_info *ri)
{
	struct sf2r_softc *sc = v;

	sc->mute = ri->mute ? 1 : 0;
	sc->vol = ri->volume ? 255 : 0;
	sc->stereo = ri->stereo ? TEA5757_STEREO: TEA5757_MONO;
	sc->lock = tea5757_encode_lock(ri->lock);
	ri->freq = sc->freq = tea5757_set_freq(&sc->tea,
			sc->lock, sc->stereo, ri->freq);
	sf2r_set_mute(sc);

	return (0);
}

int
sf2r_search(void *v, int f)
{
	struct sf2r_softc *sc = v;

	tea5757_search(&sc->tea, sc->lock, sc->stereo, f);
	sf2r_set_mute(sc);

	return (0);
@


1.1.4.3
log
@Sync the SMP branch with 3.3
@
text
@a47 1
#include <dev/ic/pt2254a.h>
a56 3
#define SF16FMR2_AMP		0
#define SF16FMR2_NOAMP		1

d74 1
a74 1
	SF16FMR2_DATA_ON | SF16FMR2_CLCK_OFF | SF16FMR2_WREN_OFF
d77 1
a77 8
	SF16FMR2_DATA_ON | SF16FMR2_CLCK_ON | SF16FMR2_WREN_OFF

#define SF16FMR2_VOLU_STROBE_ON		(0 << 2)
#define SF16FMR2_VOLU_STROBE_OFF	(1 << 2)
#define SF16FMR2_VOLU_CLOCK_ON		(1 << 5)
#define SF16FMR2_VOLU_CLOCK_OFF		(0 << 5)
#define SF16FMR2_VOLU_DATA_ON		(1 << 6)
#define SF16FMR2_VOLU_DATA_OFF		(0 << 6)
a97 1
	int		type;
a115 1
void	sf2r_send_vol_bit(bus_space_tag_t, bus_space_handle_t, u_int32_t);
d118 1
a118 1
u_int32_t sf2r_read_register(bus_space_tag_t, bus_space_handle_t, bus_size_t);
a156 1
	int type;
d167 1
a167 1
	    0, &sc->tea.ioh)) {
a183 3
	type = sf2r_read_register(sc->tea.iot, sc->tea.ioh, sc->tea.offset);
	sc->type = (type >> 24) & (1 << 1)? SF16FMR2_AMP : SF16FMR2_NOAMP;

a193 1
	u_int32_t reg, vol, i;
d195 4
a198 29
	if (sc->type == SF16FMR2_NOAMP) {
		mute = (sc->mute || !sc->vol)? SF16FMR2_MUTE : SF16FMR2_UNMUTE;
		bus_space_write_1(sc->tea.iot, sc->tea.ioh, 0, mute);
		DELAY(64);
		bus_space_write_1(sc->tea.iot, sc->tea.ioh, 0, mute);
	} else {
		mute = sc->mute? SF16FMR2_MUTE : SF16FMR2_UNMUTE;
		bus_space_write_1(sc->tea.iot, sc->tea.ioh, 0, mute);
		DELAY(64);
		bus_space_write_1(sc->tea.iot, sc->tea.ioh, 0, mute);

		vol = pt2254a_encode_volume(&sc->vol, 255);
		reg = pt2254a_compose_register(vol, vol,
		    USE_CHANNEL, USE_CHANNEL);

		bus_space_write_1(sc->tea.iot, sc->tea.ioh,
		    0, SF16FMR2_VOLU_STROBE_OFF);

		for (i = 0; i < PT2254A_REGISTER_LENGTH; i++)
			sf2r_send_vol_bit(sc->tea.iot, sc->tea.ioh,
			    reg & (1 << i));

		bus_space_write_1(sc->tea.iot, sc->tea.ioh,
		    0, SF16FMR2_VOLU_STROBE_ON);
		bus_space_write_1(sc->tea.iot, sc->tea.ioh,
		    0, SF16FMR2_VOLU_STROBE_OFF);
		bus_space_write_1(sc->tea.iot, sc->tea.ioh,
		    0, 0x10 | SF16FMR2_VOLU_STROBE_OFF);
	}
d242 1
a242 1
		    == sc.freq)
d254 1
a254 1
	data = bit? SF16FMR2_DATA_ON : SF16FMR2_DATA_OFF;
d257 1
a257 1
	    SF16FMR2_WREN_ON | SF16FMR2_CLCK_OFF | data);
d259 1
a259 1
	    SF16FMR2_WREN_ON | SF16FMR2_CLCK_ON  | data);
d261 1
a261 1
	    SF16FMR2_WREN_ON | SF16FMR2_CLCK_OFF | data);
d277 1
a277 1
	state = i & SF16FMR2_AMPLIFIER? (1 << 2) : (0 << 2);
d279 1
a279 1
	state |= i & SF16FMR2_SIGNAL? (0 << 1) : (1 << 1);
d284 1
a284 1
	state |= i & SF16FMR2_STEREO? (0 << 0) : (1 << 0);
d307 2
a308 2
	ri->volume = sc->vol? 255 : 0;
	ri->stereo = sc->stereo == TEA5757_STEREO? 1 : 0;
d315 1
a315 1
	    sc->tea.flags & TEA5757_TEA5759);
d326 3
a328 3
	sc->mute = ri->mute? 1 : 0;
	sc->vol = ri->volume? 255 : 0;
	sc->stereo = ri->stereo? TEA5757_STEREO: TEA5757_MONO;
d331 1
a331 1
	    sc->lock, sc->stereo, ri->freq);
a345 11
}

void
sf2r_send_vol_bit(bus_space_tag_t iot, bus_space_handle_t ioh, u_int32_t d) {
	u_int8_t data;

	data = SF16FMR2_VOLU_STROBE_OFF;
	data |= d? SF16FMR2_VOLU_DATA_ON : SF16FMR2_VOLU_DATA_OFF;

	bus_space_write_1(iot, ioh, 0, data | SF16FMR2_VOLU_CLOCK_OFF);
	bus_space_write_1(iot, ioh, 0, data | SF16FMR2_VOLU_CLOCK_ON);
@


