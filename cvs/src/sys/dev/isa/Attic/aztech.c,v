head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.60
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.50
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.58
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.56
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.54
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.52
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.48
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.46
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.44
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.42
	OPENBSD_5_0:1.4.0.40
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.38
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.36
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.32
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.34
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.30
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.28
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.26
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.24
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.22
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.20
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.18
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.16
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.14
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.12
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.10
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.2.0.2
	UBC_BASE:1.2
	SMP:1.1.0.4
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.08.31.15.53.06;	author tedu;	state dead;
branches;
next	1.4;
commitid	m7MmVL2p3FX326F3;

1.4
date	2002.01.23.20.30.38;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.02.19.36.51;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2001.12.05.10.27.06;	author mickey;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2001.10.04.20.15.42;	author gluk;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2001.10.31.03.22.43;	author nate;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2002.03.06.02.11.44;	author niklas;	state Exp;
branches;
next	;

1.2.2.1
date	2002.01.31.22.55.32;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Support A Radio Free Europe!
remove long disabled radio devices
ok deraadt
@
text
@/* $OpenBSD: aztech.c,v 1.4 2002/01/23 20:30:38 mickey Exp $ */
/* $RuOBSD: aztech.c,v 1.11 2001/10/20 13:23:47 pva Exp $ */

/*
 * Copyright (c) 2001 Maxim Tsyplakov <tm@@oganer.net>,
 *                    Vladimir Popov <jumbo@@narod.ru>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* Aztech/PackardBell FM Radio Card device driver */

/*
 * Sanyo LM7001J Direct PLL Frequency Synthesizer:
 *	??? See http://www.redsword.com/tjacobs/geeb/fmcard.htm
 *
 * Philips TEA5712T AM/FM Stereo DTS Radio:
 *	http://www.semiconductors.philips.com/pip/TEA5712
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/errno.h>
#include <sys/ioctl.h>
#include <sys/device.h>
#include <sys/radioio.h>

#include <machine/bus.h>

#include <dev/isa/isavar.h>
#include <dev/ic/lm700x.h>
#include <dev/radio_if.h>

#define RF_25K	25
#define RF_50K	50
#define RF_100K	100

#define MAX_VOL	3
#define VOLUME_RATIO(x)	(255 * x / MAX_VOL)

#define AZ_BASE_VALID(x)	((x == 0x350) || (x == 0x358))
#define AZTECH_CAPABILITIES	RADIO_CAPS_DETECT_STEREO |		\
				RADIO_CAPS_DETECT_SIGNAL |		\
				RADIO_CAPS_SET_MONO |			\
				RADIO_CAPS_REFERENCE_FREQ


#define AZTECH_STEREO	(1 << 0)
#define AZTECH_SIGNAL	(1 << 1)

#define	AZ_WREN_ON	(1 << 1)
#define	AZ_WREN_OFF	(0 << 1)

#define AZ_CLCK_ON	(1 << 6)
#define AZ_CLCK_OFF	(0 << 6)

#define AZ_DATA_ON	(1 << 7)
#define AZ_DATA_OFF	(0 << 7)

int	az_probe(struct device *, void *, void *);
void	az_attach(struct device *, struct device * self, void *);

int	az_get_info(void *, struct radio_info *);
int	az_set_info(void *, struct radio_info *);

struct radio_hw_if az_hw_if = {
	NULL,	/* open */
	NULL,	/* close */
	az_get_info,
	az_set_info,
	NULL
};

struct az_softc {
	struct device	sc_dev;

	int		mute;
	u_int8_t	vol;
	u_int32_t	freq;
	u_int32_t	rf;
	u_int32_t	stereo;

	struct lm700x_t	lm;
};

struct cfattach az_ca = {
	sizeof(struct az_softc), az_probe, az_attach
};

struct cfdriver az_cd = {
	NULL, "az", DV_DULL
};

u_int	az_find(bus_space_tag_t, bus_space_handle_t);
void	az_set_mute(struct az_softc *);
void	az_set_freq(struct az_softc *, u_int32_t);
u_int8_t	az_state(bus_space_tag_t, bus_space_handle_t);

void	az_lm700x_init(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
void	az_lm700x_rset(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);

u_int8_t	az_conv_vol(u_int8_t);
u_int8_t	az_unconv_vol(u_int8_t);

int
az_probe(struct device *parent, void *self, void *aux)
{
	struct isa_attach_args *ia = aux;
	bus_space_tag_t iot = ia->ia_iot;
	bus_space_handle_t ioh;

	int iosize = 1, iobase = ia->ia_iobase;

	if (!AZ_BASE_VALID(iobase)) {
		printf("az: configured iobase 0x%x invalid\n", iobase);
		return (0);
	}

	if (bus_space_map(iot, iobase, iosize, 0, &ioh))
		return (0);

	if (!az_find(iot, ioh)) {
		bus_space_unmap(iot, ioh, iosize);
		return (0);
	}

	bus_space_unmap(iot, ioh, iosize);
	ia->ia_iosize = iosize;
	return (1);
}

void
az_attach(struct device *parent, struct device *self, void *aux)
{
	struct az_softc *sc = (void *) self;
	struct isa_attach_args *ia = aux;

	sc->lm.iot = ia->ia_iot;
	sc->rf = LM700X_REF_050;
	sc->stereo = LM700X_STEREO;
	sc->mute = 0;
	sc->freq = MIN_FM_FREQ;
	sc->vol = 0;

	/* remap I/O */
	if (bus_space_map(sc->lm.iot, ia->ia_iobase, ia->ia_iosize,
			  0, &sc->lm.ioh)) {
		printf(": bus_space_map() failed\n");
		return;
	}

	printf(": Aztech/PackardBell\n");

	/* Configure struct lm700x_t lm */
	sc->lm.offset = 0;
	sc->lm.wzcl = AZ_WREN_ON | AZ_CLCK_OFF | AZ_DATA_OFF;
	sc->lm.wzch = AZ_WREN_ON | AZ_CLCK_ON  | AZ_DATA_OFF;
	sc->lm.wocl = AZ_WREN_ON | AZ_CLCK_OFF | AZ_DATA_ON;
	sc->lm.woch = AZ_WREN_ON | AZ_CLCK_ON  | AZ_DATA_ON;
	sc->lm.initdata = 0;
	sc->lm.rsetdata = AZ_DATA_ON | AZ_CLCK_ON | AZ_WREN_OFF;
	sc->lm.init = az_lm700x_init;
	sc->lm.rset = az_lm700x_rset;

	az_set_freq(sc, sc->freq);

	radio_attach_mi(&az_hw_if, sc, &sc->sc_dev);
}

/*
 * Mute the card
 */
void
az_set_mute(struct az_softc *sc)
{
	bus_space_write_1(sc->lm.iot, sc->lm.ioh, 0,
	    sc->mute ? 0 : sc->vol);
	DELAY(6);
	bus_space_write_1(sc->lm.iot, sc->lm.ioh, 0,
	    sc->mute ? 0 : sc->vol);
}

void
az_set_freq(struct az_softc *sc, u_int32_t nfreq)
{
	u_int8_t vol;
	u_int32_t reg;

	vol = sc->mute ? 0 : sc->vol;

	if (nfreq > MAX_FM_FREQ)
		nfreq = MAX_FM_FREQ;
	if (nfreq < MIN_FM_FREQ)
		nfreq = MIN_FM_FREQ;

	sc->freq = nfreq;

	reg = lm700x_encode_freq(nfreq, sc->rf);
	reg |= sc->stereo | sc->rf | LM700X_DIVIDER_FM;

	lm700x_hardware_write(&sc->lm, reg, vol);

	az_set_mute(sc);
}

/*
 * Return state of the card - tuned/not tuned, mono/stereo
 */
u_int8_t
az_state(bus_space_tag_t iot, bus_space_handle_t ioh)
{
	u_int8_t info = 0, portdata;

	portdata = bus_space_read_1(iot, ioh, 0);

	info |= portdata & AZTECH_STEREO ? 0 : RADIO_INFO_STEREO;
	info |= portdata & AZTECH_SIGNAL ? 0 : RADIO_INFO_SIGNAL;

	return info;
}

/*
 * Convert volume to hardware representation.
 * The card uses bits 00000x0x to set volume.
 */
u_int8_t
az_conv_vol(u_int8_t vol)
{
	if (vol < VOLUME_RATIO(1))
		return 0;
	else if (vol >= VOLUME_RATIO(1) && vol < VOLUME_RATIO(2))
		return 1;
	else if (vol >= VOLUME_RATIO(2) && vol < VOLUME_RATIO(3))
		return 4;
	else
		return 5;
}

/*
 * Convert volume from hardware representation
 */
u_int8_t
az_unconv_vol(u_int8_t vol)
{
	switch (vol) {
	case 0:
		return VOLUME_RATIO(0);
	case 1:
		return VOLUME_RATIO(1);
	case 4:
		return VOLUME_RATIO(2);
	}
	return VOLUME_RATIO(3);
}

u_int
az_find(bus_space_tag_t iot, bus_space_handle_t ioh)
{
	struct az_softc sc;
	u_int i;

	sc.lm.iot = iot;
	sc.lm.ioh = ioh;
	sc.lm.offset = 0;
	sc.lm.wzcl = AZ_WREN_ON | AZ_CLCK_OFF | AZ_DATA_OFF;
	sc.lm.wzch = AZ_WREN_ON | AZ_CLCK_ON  | AZ_DATA_OFF;
	sc.lm.wocl = AZ_WREN_ON | AZ_CLCK_OFF | AZ_DATA_ON;
	sc.lm.woch = AZ_WREN_ON | AZ_CLCK_ON  | AZ_DATA_ON;
	sc.lm.initdata = 0;
	sc.lm.rsetdata = AZ_DATA_ON | AZ_CLCK_ON | AZ_WREN_OFF;
	sc.lm.init = az_lm700x_init;
	sc.lm.rset = az_lm700x_rset;
	sc.rf = LM700X_REF_050;
	sc.mute = 0;
	sc.stereo = LM700X_STEREO;
	sc.vol = 0;

	/*
	 * Scan whole FM range. If there is a card it'll
	 * respond on some frequency.
	 */
	for (i = MIN_FM_FREQ; i < MAX_FM_FREQ; i += 10) {
		az_set_freq(&sc, i);
		if (az_state(iot, ioh))
			return 1;
	}

	return 0;
}

void
az_lm700x_init(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off,
		u_int32_t data)
{
	/* Do nothing */
	return;
}

void
az_lm700x_rset(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off,
		u_int32_t data)
{
	bus_space_write_1(iot, ioh, off, data);
}

int
az_get_info(void *v, struct radio_info *ri)
{
	struct az_softc *sc = v;

	ri->mute = sc->mute;
	ri->volume = az_unconv_vol(sc->vol);
	ri->stereo = sc->stereo == LM700X_STEREO ? 1 : 0;
	ri->caps = AZTECH_CAPABILITIES;
	ri->rfreq = lm700x_decode_ref(sc->rf);
	ri->info = az_state(sc->lm.iot, sc->lm.ioh);
	ri->freq = sc->freq;

	/* UNSUPPORTED */
	ri->lock = 0;

	return (0);
}

int
az_set_info(void *v, struct radio_info *ri)
{
	struct az_softc *sc = v;

	sc->mute = ri->mute ? 1 : 0;
	sc->vol = az_conv_vol(ri->volume);
	sc->stereo = ri->stereo ? LM700X_STEREO : LM700X_MONO;
	sc->rf = lm700x_encode_ref(ri->rfreq);

	az_set_freq(sc, ri->freq);
	az_set_mute(sc);

	return (0);
}
@


1.4
log
@fix a bug in az_find and make az_staet() more readable; from Vladimir Popov <jumbo@@narod.ru>
@
text
@d1 1
a1 1
/* $OpenBSD: aztech.c,v 1.3 2002/01/02 19:36:51 mickey Exp $ */
@


1.3
log
@do not unmap io space while it's still in use (in *probe)
missing new lines and replace panics w/ printf+return.
idea from netbsd's port.
@
text
@d1 1
a1 1
/* $OpenBSD: aztech.c,v 1.2 2001/12/05 10:27:06 mickey Exp $ */
d34 1
a34 1
 *     ??? See http://www.redsword.com/tjacobs/geeb/fmcard.htm
d37 1
a37 1
 *     http://www.semiconductors.philips.com/pip/TEA5712
d62 3
a64 3
#define AZTECH_CAPABILITIES	RADIO_CAPS_DETECT_STEREO | 		\
				RADIO_CAPS_DETECT_SIGNAL | 		\
				RADIO_CAPS_SET_MONO | 			\
d67 4
d232 8
a239 1
	return (3 ^ bus_space_read_1(iot, ioh, 0)) & 3;
d280 1
a280 1
	u_int i, scanres = 0;
d302 1
a302 1
	for (i = MIN_FM_FREQ; !scanres && i < MAX_FM_FREQ; i += 10) {
d304 2
a305 1
		scanres += 3 - az_state(iot, ioh);
d308 1
a308 1
	return scanres;
@


1.2
log
@update for radio drivers from tm@@oganer.net und jumbo@@narod.ru
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d131 2
a132 2
		printf("az: configured iobase 0x%x invalid", iobase);
		return 0;
d136 6
a141 1
		return 0;
a143 4

	if (!az_find(iot, ioh))
		return 0;

d145 1
a145 1
	return 1;
d163 4
a166 2
			  0, &sc->lm.ioh))
		panic(": bus_space_map() of %s failed", sc->sc_dev.dv_xname);
d168 1
a168 1
	printf(": Aztech/PackardBell");
@


1.2.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/* $OpenBSD: aztech.c,v 1.4 2002/01/23 20:30:38 mickey Exp $ */
d34 1
a34 1
 *	??? See http://www.redsword.com/tjacobs/geeb/fmcard.htm
d37 1
a37 1
 *	http://www.semiconductors.philips.com/pip/TEA5712
d62 3
a64 3
#define AZTECH_CAPABILITIES	RADIO_CAPS_DETECT_STEREO |		\
				RADIO_CAPS_DETECT_SIGNAL |		\
				RADIO_CAPS_SET_MONO |			\
a66 4

#define AZTECH_STEREO	(1 << 0)
#define AZTECH_SIGNAL	(1 << 1)

d131 2
a132 2
		printf("az: configured iobase 0x%x invalid\n", iobase);
		return (0);
d136 1
a136 1
		return (0);
d138 4
a141 4
	if (!az_find(iot, ioh)) {
		bus_space_unmap(iot, ioh, iosize);
		return (0);
	}
a142 1
	bus_space_unmap(iot, ioh, iosize);
d144 1
a144 1
	return (1);
d162 2
a163 4
			  0, &sc->lm.ioh)) {
		printf(": bus_space_map() failed\n");
		return;
	}
d165 1
a165 1
	printf(": Aztech/PackardBell\n");
d225 1
a225 8
	u_int8_t info = 0, portdata;

	portdata = bus_space_read_1(iot, ioh, 0);

	info |= portdata & AZTECH_STEREO ? 0 : RADIO_INFO_STEREO;
	info |= portdata & AZTECH_SIGNAL ? 0 : RADIO_INFO_SIGNAL;

	return info;
d266 1
a266 1
	u_int i;
d288 1
a288 1
	for (i = MIN_FM_FREQ; i < MAX_FM_FREQ; i += 10) {
d290 1
a290 2
		if (az_state(iot, ioh))
			return 1;
d293 1
a293 1
	return 0;
@


1.1
log
@Aztech/PackardBell FM Radio Card device driver

Work by Maxim Tsyplakov <tm@@oganer.net>, Vladimir Popov <jumbo@@narod.ru>
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/* $RuOBSD: aztech.c,v 1.8 2001/10/04 18:51:50 pva Exp $ */
d78 3
a80 3
int	az_open(dev_t, int, int, struct proc *);
int	az_close(dev_t, int, int, struct proc *);
int	az_ioctl(dev_t, u_long, caddr_t, int, struct proc *);
d83 5
a87 3
	az_open,
	az_close,
	az_ioctl
d93 6
a98 5
	u_long		sc_freq;
	u_long		sc_rf;
	u_char		sc_vol;
	u_char		sc_muted;
	u_long		sc_stereo;
d112 2
a113 2
void	az_set_freq(struct az_softc *, u_long);
u_char	az_state(bus_space_tag_t, bus_space_handle_t);
d115 2
a116 2
void	az_lm700x_init(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_long);
void	az_lm700x_rset(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_long);
d118 2
a119 2
u_char	az_conv_vol(u_char);
u_char	az_unconv_vol(u_char);
d154 5
a158 17
	sc->sc_rf = LM700X_REF_050;
	sc->sc_stereo = LM700X_STEREO;
#ifdef RADIO_INIT_MUTE
	sc->sc_muted = RADIO_INIT_MUTE;
#else
	sc->sc_muted = 0;
#endif /* RADIO_INIT_MUTE */
#ifdef RADIO_INIT_FREQ
	sc->sc_freq = RADIO_INIT_FREQ;
#else
	sc->sc_freq = MIN_FM_FREQ;
#endif /* RADIO_INIT_FREQ */
#ifdef RADIO_INIT_VOL
	sc->sc_vol = az_conv_vol(RADIO_INIT_VOL);
#else
	sc->sc_vol = 0;
#endif /* RADIO_INIT_VOL */
d178 1
a178 1
	az_set_freq(sc, sc->sc_freq);
a182 79
int
az_open(dev_t dev, int flags, int fmt, struct proc *p)
{
	struct az_softc *sc;
	return !(sc = az_cd.cd_devs[0]) ? ENXIO : 0;
}

int
az_close(dev_t dev, int flags, int fmt, struct proc *p)
{
	return 0;
}

/*
 * Handle the ioctl for the device
 */
int
az_ioctl(dev_t dev, u_long cmd, caddr_t data, int flags, struct proc *p)
{
	int error;
	struct az_softc *sc = az_cd.cd_devs[0];

	error = 0;
	switch (cmd) {
	case RIOCGMUTE:
		*(u_long *)data = sc->sc_muted ? 1 : 0;
		break;
	case RIOCSMUTE:
		sc->sc_muted = *(u_long *)data ? 1 : 0;
		az_set_mute(sc);
		break;
	case RIOCGVOLU:
		*(u_long *)data = az_unconv_vol(sc->sc_vol);
		break;
	case RIOCSVOLU:
		sc->sc_vol = az_conv_vol(*(u_int *)data);
		az_set_mute(sc);
		break;
	case RIOCGMONO:
		*(u_long *)data = sc->sc_stereo == LM700X_STEREO ? 0 : 1;
		break;
	case RIOCSMONO:
		sc->sc_stereo = *(u_long *)data ? LM700X_MONO : LM700X_STEREO;
		az_set_freq(sc, sc->sc_freq);
		break;
	case RIOCGFREQ:
		*(u_long *)data = sc->sc_freq;
		break;
	case RIOCSFREQ:
		az_set_freq(sc, *(u_long *)data);
		break;
	case RIOCGCAPS:
		*(u_long *)data = AZTECH_CAPABILITIES;
		break;
	case RIOCGINFO: /* Get Info */
		*(u_long *)data = 0x03 &
			(3 ^ az_state(sc->lm.iot, sc->lm.ioh));
		break;
	case RIOCSREFF:
		sc->sc_rf = lm700x_encode_ref(*(u_char *)data);
		az_set_freq(sc, sc->sc_freq);
		break;
	case RIOCGREFF:
		*(u_long *)data = lm700x_decode_ref(sc->sc_rf);
		break;
	case RIOCSSRCH:
		/* FALLTHROUGH */
	case RIOCSLOCK:
		/* FALLTHROUGH */
	case RIOCGLOCK:
		/* NOT SUPPORTED */
		error = ENODEV;
		break;
	default:
		error = EINVAL;
	}
	return (error);
}

d190 1
a190 1
	    sc->sc_muted ? 0 : sc->sc_vol);
d193 1
a193 1
	    sc->sc_muted ? 0 : sc->sc_vol);
d197 1
a197 1
az_set_freq(struct az_softc *sc, u_long nfreq)
d199 2
a200 2
	u_char vol;
	u_long reg;
d202 1
a202 1
	vol = sc->sc_muted ? 0 : sc->sc_vol;
d209 1
a209 1
	sc->sc_freq = nfreq;
d211 2
a212 2
	reg = lm700x_encode_freq(nfreq, sc->sc_rf);
	reg |= sc->sc_stereo | sc->sc_rf | LM700X_DIVIDER_FM;
d222 1
a222 1
u_char
d225 1
a225 1
	return bus_space_read_1(iot, ioh, 0) & 3;
d232 2
a233 2
u_char
az_conv_vol(u_char vol)
d248 2
a249 2
u_char
az_unconv_vol(u_char vol)
d279 4
a282 4
	sc.sc_rf = LM700X_REF_050;
	sc.sc_muted = 0;
	sc.sc_stereo = LM700X_STEREO;
	sc.sc_vol = 0;
d298 1
a298 1
		u_long data)
d306 1
a306 1
		u_long data)
d309 35
@


1.1.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.1.4.2
log
@Merge in trunk
@
text
@d1 2
a2 2
/* $OpenBSD$ */
/* $RuOBSD: aztech.c,v 1.11 2001/10/20 13:23:47 pva Exp $ */
d34 1
a34 1
 *	??? See http://www.redsword.com/tjacobs/geeb/fmcard.htm
d37 1
a37 1
 *	http://www.semiconductors.philips.com/pip/TEA5712
d62 3
a64 3
#define AZTECH_CAPABILITIES	RADIO_CAPS_DETECT_STEREO |		\
				RADIO_CAPS_DETECT_SIGNAL |		\
				RADIO_CAPS_SET_MONO |			\
a66 4

#define AZTECH_STEREO	(1 << 0)
#define AZTECH_SIGNAL	(1 << 1)

d78 3
a80 3

int	az_get_info(void *, struct radio_info *);
int	az_set_info(void *, struct radio_info *);
d83 3
a85 5
	NULL,	/* open */
	NULL,	/* close */
	az_get_info,
	az_set_info,
	NULL
d91 5
a95 6
	int		mute;
	u_int8_t	vol;
	u_int32_t	freq;
	u_int32_t	rf;
	u_int32_t	stereo;

d109 2
a110 2
void	az_set_freq(struct az_softc *, u_int32_t);
u_int8_t	az_state(bus_space_tag_t, bus_space_handle_t);
d112 2
a113 2
void	az_lm700x_init(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
void	az_lm700x_rset(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
d115 2
a116 2
u_int8_t	az_conv_vol(u_int8_t);
u_int8_t	az_unconv_vol(u_int8_t);
d128 2
a129 2
		printf("az: configured iobase 0x%x invalid\n", iobase);
		return (0);
d133 1
a133 1
		return (0);
d135 4
a138 4
	if (!az_find(iot, ioh)) {
		bus_space_unmap(iot, ioh, iosize);
		return (0);
	}
a139 1
	bus_space_unmap(iot, ioh, iosize);
d141 1
a141 1
	return (1);
d151 17
a167 5
	sc->rf = LM700X_REF_050;
	sc->stereo = LM700X_STEREO;
	sc->mute = 0;
	sc->freq = MIN_FM_FREQ;
	sc->vol = 0;
d171 2
a172 4
			  0, &sc->lm.ioh)) {
		printf(": bus_space_map() failed\n");
		return;
	}
d174 1
a174 1
	printf(": Aztech/PackardBell\n");
d187 1
a187 1
	az_set_freq(sc, sc->freq);
d192 79
d278 1
a278 1
	    sc->mute ? 0 : sc->vol);
d281 1
a281 1
	    sc->mute ? 0 : sc->vol);
d285 1
a285 1
az_set_freq(struct az_softc *sc, u_int32_t nfreq)
d287 2
a288 2
	u_int8_t vol;
	u_int32_t reg;
d290 1
a290 1
	vol = sc->mute ? 0 : sc->vol;
d297 1
a297 1
	sc->freq = nfreq;
d299 2
a300 2
	reg = lm700x_encode_freq(nfreq, sc->rf);
	reg |= sc->stereo | sc->rf | LM700X_DIVIDER_FM;
d310 1
a310 1
u_int8_t
d313 1
a313 8
	u_int8_t info = 0, portdata;

	portdata = bus_space_read_1(iot, ioh, 0);

	info |= portdata & AZTECH_STEREO ? 0 : RADIO_INFO_STEREO;
	info |= portdata & AZTECH_SIGNAL ? 0 : RADIO_INFO_SIGNAL;

	return info;
d320 2
a321 2
u_int8_t
az_conv_vol(u_int8_t vol)
d336 2
a337 2
u_int8_t
az_unconv_vol(u_int8_t vol)
d354 1
a354 1
	u_int i;
d367 4
a370 4
	sc.rf = LM700X_REF_050;
	sc.mute = 0;
	sc.stereo = LM700X_STEREO;
	sc.vol = 0;
d376 1
a376 1
	for (i = MIN_FM_FREQ; i < MAX_FM_FREQ; i += 10) {
d378 1
a378 2
		if (az_state(iot, ioh))
			return 1;
d381 1
a381 1
	return 0;
d386 1
a386 1
		u_int32_t data)
d394 1
a394 1
		u_int32_t data)
a396 35
}

int
az_get_info(void *v, struct radio_info *ri)
{
	struct az_softc *sc = v;

	ri->mute = sc->mute;
	ri->volume = az_unconv_vol(sc->vol);
	ri->stereo = sc->stereo == LM700X_STEREO ? 1 : 0;
	ri->caps = AZTECH_CAPABILITIES;
	ri->rfreq = lm700x_decode_ref(sc->rf);
	ri->info = az_state(sc->lm.iot, sc->lm.ioh);
	ri->freq = sc->freq;

	/* UNSUPPORTED */
	ri->lock = 0;

	return (0);
}

int
az_set_info(void *v, struct radio_info *ri)
{
	struct az_softc *sc = v;

	sc->mute = ri->mute ? 1 : 0;
	sc->vol = az_conv_vol(ri->volume);
	sc->stereo = ri->stereo ? LM700X_STEREO : LM700X_MONO;
	sc->rf = lm700x_encode_ref(ri->rfreq);

	az_set_freq(sc, ri->freq);
	az_set_mute(sc);

	return (0);
@


