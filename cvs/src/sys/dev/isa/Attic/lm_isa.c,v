head	1.11;
access;
symbols
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC:1.1.0.4
	UBC_SYNC_A:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.11
date	2006.01.28.11.25.17;	author kettenis;	state dead;
branches;
next	1.10;

1.10
date	2006.01.26.22.07.14;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.23.18.45.33;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.17.20.26.37;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.15.21.40.14;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.14.20.05.06;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.14.15.14.33;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.12.22.34.51;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.29.21.17.07;	author grange;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.28.19.15.37;	author grange;	state Exp;
branches;
next	1.1;

1.1
date	2003.04.25.21.24.15;	author grange;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.05.12.20.00.33;	author ho;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.06.07.11.02.29;	author ho;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.02.19.10.56.22;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Rename lm_isa.c to lm78_isa.c.  Now that there isn't really any NetBSD code
left, replace copyright with my own.
requested by deraadt@@
@
text
@/*	$OpenBSD: lm_isa.c,v 1.10 2006/01/26 22:07:14 kettenis Exp $	*/
/*	$NetBSD: lm_isa.c,v 1.9 2002/11/15 14:55:44 ad Exp $ */

/*-
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Bill Squier.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/sensors.h>
#include <machine/bus.h>

#include <dev/isa/isareg.h>
#include <dev/isa/isavar.h>

#include <dev/ic/lm78var.h>
#include <dev/isa/itvar.h>

/* ISA registers */
#define LMC_ADDR	0x05
#define LMC_DATA	0x06

extern struct cfdriver lm_cd;

#if defined(LMDEBUG)
#define DPRINTF(x)		do { printf x; } while (0)
#else
#define DPRINTF(x)
#endif

struct lm_isa_softc {
	struct lm_softc sc_lmsc;

	bus_space_tag_t sc_iot;
	bus_space_handle_t sc_ioh;
};

int  lm_isa_match(struct device *, void *, void *);
void lm_isa_attach(struct device *, struct device *, void *);
u_int8_t lm_isa_readreg(struct lm_softc *, int);
void lm_isa_writereg(struct lm_softc *, int, int);

struct cfattach lm_isa_ca = {
	sizeof(struct lm_softc),
	lm_isa_match,
	lm_isa_attach
};

int
lm_isa_match(struct device *parent, void *match, void *aux)
{
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	struct isa_attach_args *ia = aux;
	int iobase, banksel, vendid, chipid, addr;

	iot = ia->ia_iot;
	iobase = ia->ipa_io[0].base;

	if (bus_space_map(iot, iobase, 8, 0, &ioh)) {
		DPRINTF(("%s: can't map i/o space\n", __func__));
		return (0);
	}

	/* Probe for Winbond chips. */
	bus_space_write_1(iot, ioh, LMC_ADDR, WB_BANKSEL);
	banksel = bus_space_read_1(iot, ioh, LMC_DATA);
	bus_space_write_1(iot, ioh, LMC_ADDR, WB_VENDID);
	vendid = bus_space_read_1(iot, ioh, LMC_DATA);
	if (((banksel & 0x80) && vendid == (WB_VENDID_WINBOND >> 8)) ||
	    (!(banksel & 0x80) && vendid == (WB_VENDID_WINBOND & 0xff)))
		goto found;

	/* Probe for ITE chips (and don't attach if we find one). */
	bus_space_write_1(iot, ioh, LMC_ADDR, ITD_CHIPID);
	vendid = bus_space_read_1(iot, ioh, LMC_DATA);
	if (vendid == IT_ID_IT87) 
		goto notfound;

	/*
	 * Probe for National Semiconductor LM78/79/81.
	 *
	 * XXX This assumes the address has not been changed from the
	 * power up default.  This is probably a reasonable
	 * assumption, and if it isn't true, we should be able to
	 * access the chip using the serial bus.
	 */
	bus_space_write_1(iot, ioh, LMC_ADDR, LM_SBUSADDR);
	addr = bus_space_read_1(iot, ioh, LMC_DATA);
	if ((addr & 0xfc) == 0x2c) {
		bus_space_write_1(iot, ioh, LMC_ADDR, LM_CHIPID);
		chipid = bus_space_read_1(iot, ioh, LMC_DATA);

		switch (chipid & LM_CHIPID_MASK) {
		case LM_CHIPID_LM78:
		case LM_CHIPID_LM78J:
		case LM_CHIPID_LM79:
		case LM_CHIPID_LM81:
			goto found;
		}
	}

 notfound:
	bus_space_unmap(iot, ioh, 8);

	return (0);

 found:
	bus_space_unmap(iot, ioh, 8);

	ia->ipa_nio = 1;
	ia->ipa_io[0].length = 8;

	ia->ipa_nmem = 0;
	ia->ipa_nirq = 0;
	ia->ipa_ndrq = 0;

	return (1);
}

void
lm_isa_attach(struct device *parent, struct device *self, void *aux)
{
	struct lm_isa_softc *sc = (struct lm_isa_softc *)self;
	struct isa_attach_args *ia = aux;
	struct lm_softc *lmsc;
	int iobase, i;
	u_int8_t sbusaddr;

	sc->sc_iot = ia->ia_iot;
        iobase = ia->ipa_io[0].base;

	if (bus_space_map(sc->sc_iot, iobase, 8, 0, &sc->sc_ioh)) {
		printf(": can't map i/o space\n");
		return;
	}

	/* Bus-independant attachment */
	sc->sc_lmsc.lm_writereg = lm_isa_writereg;
	sc->sc_lmsc.lm_readreg = lm_isa_readreg;
	lm_attach(&sc->sc_lmsc);

	/*
	 * Most devices supported by this driver can attach to iic(4)
	 * as well.  However, we prefer to attach them to isa(4) since
	 * that causes less overhead and is more reliable.  We look
	 * through all previously attached devices, and if we find an
	 * identical chip at the same serial bus address, we stop
	 * updating its sensors and mark them as invalid.
	 */

	sbusaddr = lm_isa_readreg(&sc->sc_lmsc, LM_SBUSADDR);
	if (sbusaddr == 0)
		return;

	for (i = 0; i < lm_cd.cd_ndevs; i++) {
		lmsc = lm_cd.cd_devs[i];
		if (lmsc == &sc->sc_lmsc)
			continue;
		if (lmsc && lmsc->sbusaddr == sbusaddr &&
		    lmsc->chipid == sc->sc_lmsc.chipid)
			config_detach(&lmsc->sc_dev, 0);
	}
}

u_int8_t
lm_isa_readreg(struct lm_softc *lmsc, int reg)
{
	struct lm_isa_softc *sc = (struct lm_isa_softc *)lmsc;

	bus_space_write_1(sc->sc_iot, sc->sc_ioh, LMC_ADDR, reg);
	return (bus_space_read_1(sc->sc_iot, sc->sc_ioh, LMC_DATA));
}

void
lm_isa_writereg(struct lm_softc *lmsc, int reg, int val)
{
	struct lm_isa_softc *sc = (struct lm_isa_softc *)lmsc;

	bus_space_write_1(sc->sc_iot, sc->sc_ioh, LMC_ADDR, reg);
	bus_space_write_1(sc->sc_iot, sc->sc_ioh, LMC_DATA, val);
}
@


1.10
log
@Make lm at iic detach properly, and use config_detach(9) to fully detach
lm at iic if we attach lm at isa for the same chip.
tested by robert@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lm_isa.c,v 1.9 2006/01/23 18:45:33 kettenis Exp $	*/
@


1.9
log
@Don't match ITE chips matched by it(4).
tested by jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lm_isa.c,v 1.8 2006/01/17 20:26:37 kettenis Exp $	*/
d160 1
a160 1
	int iobase, i, j;
d194 2
a195 5
		    lmsc->chipid == sc->sc_lmsc.chipid) {
			sensor_task_unregister(lmsc);
			for (j = 0; j < lmsc->numsensors; j++)
				lmsc->sensors[j].flags = SENSOR_FINVALID;
		}
@


1.8
log
@Check LM78/79/81 chip ID to prevent spurious matches.
tested by bernd@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lm_isa.c,v 1.7 2006/01/15 21:40:14 kettenis Exp $	*/
d50 1
d107 6
d136 1
@


1.7
log
@If we attach an lm(4) to isa(4) that is already attached to iic(4), disable
the one attached to iic(4).
idea from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lm_isa.c,v 1.6 2006/01/14 20:05:06 kettenis Exp $	*/
d87 1
a87 1
	int iobase, banksel, vendid, addr;
d116 12
a127 2
	if ((addr & 0xfc) == 0x2c)
		goto found;
@


1.6
log
@Move isa-specific members of struct lm_softc into lm_isa.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: lm_isa.c,v 1.5 2006/01/14 15:14:33 kettenis Exp $	*/
d55 2
d141 3
a143 1
	int iobase;
d157 25
@


1.5
log
@Rename nslm7x.c into lm78.c and nslm7xvar.h into lm78var.h, and clean up
lm78var.h.
Now that I've completely rewritten the driver, replace copyright with my own.
suggested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lm_isa.c,v 1.4 2006/01/12 22:34:51 kettenis Exp $	*/
d61 7
d137 2
a138 1
	struct lm_softc *sc = (struct lm_softc *)self;
a139 2
	bus_space_tag_t iot;
	struct isa_attach_args *ia = aux;
d141 1
a142 1
	iot = sc->lm_iot = ia->ia_iot;
d144 1
a144 1
	if (bus_space_map(iot, iobase, 8, 0, &sc->lm_ioh)) {
d150 3
a152 3
	sc->lm_writereg = lm_isa_writereg;
	sc->lm_readreg = lm_isa_readreg;
	lm_attach(sc);
d156 1
a156 1
lm_isa_readreg(struct lm_softc *sc, int reg)
d158 4
a161 2
	bus_space_write_1(sc->lm_iot, sc->lm_ioh, LMC_ADDR, reg);
	return (bus_space_read_1(sc->lm_iot, sc->lm_ioh, LMC_DATA));
d165 1
a165 1
lm_isa_writereg(struct lm_softc *sc, int reg, int val)
d167 4
a170 2
	bus_space_write_1(sc->lm_iot, sc->lm_ioh, LMC_ADDR, reg);
	bus_space_write_1(sc->lm_iot, sc->lm_ioh, LMC_DATA, val);
@


1.4
log
@Instead of resetting the device and check whether power-up defaults match
the expected values, detect Winbond chips by checking for the Winbond vendor
ID, and detect LM78/79/81 by checking for a plausible i2c address.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lm_isa.c,v 1.3 2003/06/29 21:17:07 grange Exp $	*/
d49 5
a53 1
#include <dev/ic/nslm7xvar.h>
d98 1
a98 1
	 * Probe for LM78/79/81.
d100 6
a105 4
	 * XXX Assumes the address has not been changed from the
	 * power up default.
	 */ 
	bus_space_write_1(iot, ioh, LMC_ADDR, LMD_SBUSADDR);
@


1.3
log
@Don't check for valid ipa_nio in attach since we don't use pnp here;
from Otto Moerbeek <otto@@drijf.net>.
@
text
@d1 1
a1 1
/*	$OpenBSD: lm_isa.c,v 1.2 2003/05/28 19:15:37 grange Exp $	*/
d74 1
a74 10
	int iobase;
	int rv;

#ifdef __NetBSD__
	if (ISA_DIRECT_CONFIG(ia))
		return (0);

	if (ia->ipa_io[0].ir_addr == ISACF_PORT_DEFAULT)
		return (0);
#endif
d84 19
a102 2
	/* Bus independent probe */
	rv = lm_probe(iot, ioh);
d106 11
a116 8
	if (rv) {
		ia->ipa_nio = 1;
		ia->ipa_io[0].length = 8;

		ia->ipa_nmem = 0;
		ia->ipa_nirq = 0;
		ia->ipa_ndrq = 0;
	}
d118 1
a118 1
	return (rv);
d124 1
a124 1
	struct lm_softc *lmsc = (void *)self;
d130 1
a130 1
	iot = lmsc->lm_iot = ia->ia_iot;
d132 1
a132 1
	if (bus_space_map(iot, iobase, 8, 0, &lmsc->lm_ioh)) {
d138 3
a140 4
	lmsc->lm_writereg = lm_isa_writereg;
	lmsc->lm_readreg = lm_isa_readreg;

	lm_attach(lmsc);
@


1.2
log
@Print some debug info on match routine failure
@
text
@d1 1
a1 1
/*	$OpenBSD: lm_isa.c,v 1.1 2003/04/25 21:24:15 grange Exp $	*/
a75 6

	/* Must supply an address */
	if (ia->ipa_nio < 1) {
		DPRINTF(("%s: ipa_nio=%d\n", __func__, ia->ipa_nio));
		return (0);
	}
@


1.1
log
@lm(4) driver from NetBSD adapted for sysctl interface.
The lm driver provides support for the National Semiconductor LM series
hardware monitors and register compatible chips. It supports LM78,
LM78-J, LM79, Winbond W83697HF, W83627HF, W83781D and W83782D chips.

Tested and ok'ed by millert@@ and henning@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d78 2
a79 1
	if (ia->ipa_nio < 1)
d81 1
d94 2
a95 1
	if (bus_space_map(iot, iobase, 8, 0, &ioh))
d97 1
a97 1

@


1.1.2.1
log
@Add new file to SMP branch
@
text
@@


1.1.2.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lm_isa.c,v 1.1.2.1 2003/05/12 20:00:33 ho Exp $	*/
d78 1
a78 2
	if (ia->ipa_nio < 1) {
		DPRINTF(("%s: ipa_nio=%d\n", __func__, ia->ipa_nio));
a79 1
	}
d92 1
a92 2
	if (bus_space_map(iot, iobase, 8, 0, &ioh)) {
		DPRINTF(("%s: can't map i/o space\n", __func__));
d94 1
a94 1
	}
@


1.1.2.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d76 6
@


