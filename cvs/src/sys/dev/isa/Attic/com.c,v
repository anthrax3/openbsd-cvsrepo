head	1.29;
access;
symbols
	SMP_SYNC_A:1.29
	SMP_SYNC_B:1.29
	UBC_SYNC_A:1.29
	UBC_SYNC_B:1.29
	SMP:1.29.0.2
	OPENBSD_2_0:1.21.0.2
	OPENBSD_2_0_BASE:1.21
	netbsd:1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.29
date	96.11.30.13.39.34;	author niklas;	state dead;
branches;
next	1.28;

1.28
date	96.11.29.22.54.52;	author niklas;	state Exp;
branches;
next	1.27;

1.27
date	96.11.12.20.30.27;	author niklas;	state Exp;
branches;
next	1.26;

1.26
date	96.11.09.21.50.43;	author tholo;	state Exp;
branches;
next	1.25;

1.25
date	96.10.30.15.01.49;	author niklas;	state Exp;
branches;
next	1.24;

1.24
date	96.10.22.01.11.50;	author downsj;	state Exp;
branches;
next	1.23;

1.23
date	96.10.16.23.18.42;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	96.10.16.12.31.58;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	96.08.29.12.58.30;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	96.07.02.09.47.46;	author downsj;	state Exp;
branches;
next	1.19;

1.19
date	96.06.24.20.48.31;	author pefo;	state Exp;
branches;
next	1.18;

1.18
date	96.06.22.23.12.14;	author pefo;	state Exp;
branches;
next	1.17;

1.17
date	96.06.10.19.29.59;	author niklas;	state Exp;
branches;
next	1.16;

1.16
date	96.06.10.07.32.39;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	96.05.26.00.27.14;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	96.05.10.12.37.13;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	96.05.07.07.36.25;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	96.04.29.14.16.15;	author hvozda;	state Exp;
branches;
next	1.11;

1.11
date	96.04.21.22.23.15;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	96.04.18.23.47.32;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	96.03.20.01.00.42;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	96.03.19.21.10.09;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	96.03.08.16.42.51;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.02.20.04.35.49;	author tholo;	state Exp;
branches;
next	1.5;

1.5
date	96.01.16.20.13.02;	author hvozda;	state Exp;
branches;
next	1.4;

1.4
date	96.01.03.05.16.10;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	95.12.27.22.06.17;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.15.02.37.17;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.33;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.33;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Com driver moved, still somewhat ISA-dependent though, but it will
improve.  Pica and PCMCIA-dependent stuff factored out.
@
text
@/*	$OpenBSD: com.c,v 1.28 1996/11/29 22:54:52 niklas Exp $	*/
/*	$NetBSD: com.c,v 1.82.4.1 1996/06/02 09:08:00 mrg Exp $	*/

/*-
 * Copyright (c) 1993, 1994, 1995, 1996
 *	Charles M. Hannum.  All rights reserved.
 * Copyright (c) 1991 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)com.c	7.5 (Berkeley) 5/16/91
 */

/*
 * COM driver, based on HP dca driver
 * uses National Semiconductor NS16450/NS16550AF UART
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/ioctl.h>
#include <sys/select.h>
#include <sys/tty.h>
#include <sys/proc.h>
#include <sys/user.h>
#include <sys/conf.h>
#include <sys/file.h>
#include <sys/uio.h>
#include <sys/kernel.h>
#include <sys/syslog.h>
#include <sys/types.h>
#include <sys/device.h>

#include <machine/bus.h>
#include <machine/intr.h>

#include <dev/isa/isavar.h>
#include <dev/isa/comreg.h>
#include <dev/isa/comvar.h>
#include <dev/ic/ns16550reg.h>
#ifdef COM_HAYESP
#include <dev/ic/hayespreg.h>
#endif
#define	com_lcr	com_cfcr

#include "com.h"


#define	COM_IBUFSIZE	(2 * 512)
#define	COM_IHIGHWATER	((3 * COM_IBUFSIZE) / 4)

struct com_softc {
	struct device sc_dev;
	void *sc_ih;
	bus_space_tag_t sc_iot;
	struct tty *sc_tty;

	int sc_overflows;
	int sc_floods;
	int sc_errors;

	int sc_halt;

	int sc_iobase;
#ifdef COM_HAYESP
	int sc_hayespbase;
#endif

	bus_space_handle_t sc_ioh;
	bus_space_handle_t sc_hayespioh;
	isa_chipset_tag_t sc_ic;

	u_char sc_hwflags;
#define	COM_HW_NOIEN	0x01
#define	COM_HW_FIFO	0x02
#define	COM_HW_HAYESP	0x04
#define	COM_HW_ABSENT_PENDING	0x08	/* reattached, awaiting close/reopen */
#define	COM_HW_ABSENT	0x10		/* configure actually failed, or removed */
#define	COM_HW_REATTACH	0x20		/* reattaching */
#define	COM_HW_CONSOLE	0x40
	u_char sc_swflags;
#define	COM_SW_SOFTCAR	0x01
#define	COM_SW_CLOCAL	0x02
#define	COM_SW_CRTSCTS	0x04
#define	COM_SW_MDMBUF	0x08
	u_char sc_msr, sc_mcr, sc_lcr, sc_ier;
	u_char sc_dtr;

	u_char	sc_cua;

	u_char	sc_initialize;		/* force initialization */

	u_char *sc_ibuf, *sc_ibufp, *sc_ibufhigh, *sc_ibufend;
	u_char sc_ibufs[2][COM_IBUFSIZE];
};

#ifdef COM_HAYESP
int comprobeHAYESP __P((bus_space_handle_t hayespioh, struct com_softc *sc));
#endif
void	comdiag		__P((void *));
int	comspeed	__P((long));
int	comparam	__P((struct tty *, struct termios *));
void	comstart	__P((struct tty *));
void	compoll		__P((void *));

/* XXX: These belong elsewhere */
cdev_decl(com);
bdev_decl(com);

struct consdev;
void	comcnprobe	__P((struct consdev *));
void	comcninit	__P((struct consdev *));
int	comcngetc	__P((dev_t));
void	comcnputc	__P((dev_t, int));
void	comcnpollc	__P((dev_t, int));

static u_char tiocm_xxx2mcr __P((int));

/*
 * XXX the following two cfattach structs should be different, and possibly
 * XXX elsewhere.
 */
int	comprobe __P((struct device *, void *, void *));
void	comattach __P((struct device *, struct device *, void *));
void	com_absent_notify __P((struct com_softc *sc));
void	comstart_pending __P((void *));

#if NCOM_ISA
struct cfattach com_isa_ca = {
	sizeof(struct com_softc), comprobe, comattach
};
#endif

#if NCOM_COMMULTI
struct cfattach com_commulti_ca = {
	sizeof(struct com_softc), comprobe, comattach
};
#endif

#if NCOM_PICA
#undef  CONADDR         /* This is stupid but using devs before config .. */
#define CONADDR 0xe0006000

struct cfattach com_pica_ca = {
	sizeof(struct com_softc), comprobe, comattach
};
#endif

struct cfdriver com_cd = {
	NULL, "com", DV_TTY
};

#ifndef CONSPEED
#define	CONSPEED B9600
#endif

#ifdef COMCONSOLE
int	comdefaultrate = CONSPEED;		/* XXX why set default? */
#else
int	comdefaultrate = TTYDEF_SPEED;
#endif
int	comconsaddr;
int	comconsinit;
int	comconsattached;
bus_space_tag_t comconsiot;
bus_space_handle_t comconsioh;
tcflag_t comconscflag = TTYDEF_CFLAG;

int	commajor;
int	comsopen = 0;
int	comevents = 0;

#ifdef KGDB
#include <machine/remote-sl.h>
extern int kgdb_dev;
extern int kgdb_rate;
extern int kgdb_debug_init;
#endif

#define	DEVUNIT(x)	(minor(x) & 0x7f)
#define	DEVCUA(x)	(minor(x) & 0x80)

/* Macros to clear/set/test flags. */
#define	SET(t, f)	(t) |= (f)
#define	CLR(t, f)	(t) &= ~(f)
#define	ISSET(t, f)	((t) & (f))

#if NCOM_PCMCIA
#include <dev/pcmcia/pcmciavar.h>

int	com_pcmcia_match __P((struct device *, void *, void *));
void	com_pcmcia_attach __P((struct device *, struct device *, void *));
int	com_pcmcia_detach __P((struct device *));

struct cfattach com_pcmcia_ca = {
	sizeof(struct com_softc), com_pcmcia_match, comattach,
	com_pcmcia_detach
};

int	com_pcmcia_mod __P((struct pcmcia_link *pc_link, struct device *self,
	    struct pcmcia_conf *pc_cf, struct cfdata *cf));

/* additional setup needed for pcmcia devices */
/* modify config entry */
int 
com_pcmcia_mod(pc_link, self, pc_cf, cf)
    struct pcmcia_link *pc_link;
    struct device *self;
    struct pcmcia_conf *pc_cf; 
    struct cfdata *cf;
{               
	int err; 

	if (!(err = PCMCIA_BUS_CONFIG(pc_link->adapter, pc_link, self,
	    pc_cf, cf))) {
		pc_cf->memwin = 0;
		if (pc_cf->cfgtype == 0) 
		pc_cf->cfgtype = CFGENTRYID; /* determine from ioaddr */
	}
	return err;
}

int com_pcmcia_isa_attach __P((struct device *, void *, void *,
			       struct pcmcia_link *));
int com_pcmcia_remove __P((struct pcmcia_link *, struct device *));

static struct pcmcia_com {
	struct pcmcia_device pcd;
} pcmcia_com =  {
	{"PCMCIA Modem card", com_pcmcia_mod, com_pcmcia_isa_attach,
	 NULL, com_pcmcia_remove}
};          


struct pcmciadevs pcmcia_com_devs[] = {
	{ "com", 0,
	NULL, "*MODEM*", NULL, NULL,
	NULL, (void *)&pcmcia_com 
	},
	{ "com", 0,
	NULL, NULL, "*MODEM*", NULL,
	NULL, (void *)&pcmcia_com 
	},
	{ "com", 0,
	NULL, NULL, NULL, "*MODEM*",
	NULL, (void *)&pcmcia_com 
	},
	{NULL}
};
#define ncom_pcmcia_devs sizeof(pcmcia_com_devs)/sizeof(pcmcia_com_devs[0])

int
com_pcmcia_match(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	return pcmcia_slave_match(parent, match, aux, pcmcia_com_devs,
	    ncom_pcmcia_devs);
}

int
com_pcmcia_isa_attach(parent, match, aux, pc_link)
	struct device *parent;
	void *match;
	void *aux;
	struct pcmcia_link *pc_link;
{
	struct isa_attach_args *ia = aux;
	struct com_softc *sc = match;
	int rval;

	if ((rval = comprobe(parent, sc->sc_dev.dv_cfdata, ia))) {
		if (ISSET(pc_link->flags, PCMCIA_REATTACH)) {
#ifdef COM_DEBUG
			printf("comreattach, hwflags=%x\n", sc->sc_hwflags);
#endif
			sc->sc_hwflags = COM_HW_REATTACH |
				(sc->sc_hwflags & (COM_HW_ABSENT_PENDING|COM_HW_CONSOLE));
		} else
			sc->sc_hwflags = 0;
		sc->sc_ic = ia->ia_ic;
	}
	return rval;
}


/*
 * Called by config_detach attempts, shortly after com_pcmcia_remove
 * was called.
 */
int
com_pcmcia_detach(self)
	struct device *self;
{
	struct com_softc *sc = (void *)self;

	if (ISSET(sc->sc_hwflags, COM_HW_ABSENT_PENDING)) {
		/* don't let it really be detached, it is still open */
		return EBUSY;
	}
	return 0;		/* OK! */
}

/*
 * called by pcmcia framework to accept/reject remove attempts.
 * If we return 0, then the detach will proceed.
 */
int
com_pcmcia_remove(pc_link, self)
	struct pcmcia_link *pc_link;
	struct device *self;
{
	struct com_softc *sc = (void *)self;
	struct tty *tp;
	int s;

	if (!sc->sc_tty)
		goto ok;
	tp = sc->sc_tty;

	/* not in use ?  if so, return "OK" */
	if (!ISSET(tp->t_state, TS_ISOPEN) &&
	    !ISSET(tp->t_state, TS_WOPEN)) {
		ttyfree(sc->sc_tty);
		sc->sc_tty = NULL;
    ok:
		isa_intr_disestablish(sc->sc_ic, sc->sc_ih);
		sc->sc_ih = NULL;
		SET(sc->sc_hwflags, COM_HW_ABSENT);
		return 0;		/* OK! */
	}
	/*
	 * Not easily removed.  Put device into a dead state, clean state
	 * as best we can.  notify all waiters.
	 */
	SET(sc->sc_hwflags, COM_HW_ABSENT|COM_HW_ABSENT_PENDING);
#ifdef COM_DEBUG
	printf("pending detach flags %x\n", sc->sc_hwflags);
#endif

	s = spltty();
	com_absent_notify(sc);
	splx(s);

	return 0;
}

#if 0
void
com_pcmcia_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct pcmcia_attach_args *paa = aux;
	
	printf("com_pcmcia_attach %p %p %p\n", parent, self, aux);
	delay(2000000);
	if (!pcmcia_configure(parent, self, paa->paa_link)) {
		struct com_softc *sc = (void *)self;
		sc->sc_hwflags |= COM_HW_ABSENT;
		printf(": not attached\n");
	}
}
#endif
#endif

/*
 * must be called at spltty() or higher.
 */
void
com_absent_notify(sc)
	struct com_softc *sc;
{
	struct tty *tp = sc->sc_tty;

	if (tp) {
		CLR(tp->t_state, TS_CARR_ON|TS_BUSY);
		ttyflush(tp, FREAD|FWRITE);
	}
}

int
comspeed(speed)
	long speed;
{
#define	divrnd(n, q)	(((n)*2/(q)+1)/2)	/* divide and round off */

	int x, err;

	if (speed == 0)
		return 0;
	if (speed < 0)
		return -1;
	x = divrnd((COM_FREQ / 16), speed);
	if (x <= 0)
		return -1;
	err = divrnd((COM_FREQ / 16) * 1000, speed * x) - 1000;
	if (err < 0)
		err = -err;
	if (err > COM_TOLERANCE)
		return -1;
	return x;

#undef	divrnd(n, q)
}

int
comprobe1(iot, ioh, iobase)
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	int iobase;
{
	int i, k;

	/* force access to id reg */
	bus_space_write_1(iot, ioh, com_lcr, 0);
	bus_space_write_1(iot, ioh, com_iir, 0);
	for (i = 0; i < 32; i++) {
	    k = bus_space_read_1(iot, ioh, com_iir);
	    if (k & 0x38) {
		bus_space_read_1(iot, ioh, com_data); /* cleanup */
	    } else
		break;
	}
	if (i >= 32) 
	    return 0;

	return 1;
}

#ifdef COM_HAYESP
int
comprobeHAYESP(hayespioh, sc)
	bus_space_handle_t hayespioh;
	struct com_softc *sc;
{
	char	val, dips;
	int	combaselist[] = { 0x3f8, 0x2f8, 0x3e8, 0x2e8 };
	bus_space_tag_t iot = sc->sc_iot;

	/*
	 * Hayes ESP cards have two iobases.  One is for compatibility with
	 * 16550 serial chips, and at the same ISA PC base addresses.  The
	 * other is for ESP-specific enhanced features, and lies at a
	 * different addressing range entirely (0x140, 0x180, 0x280, or 0x300).
	 */

	/* Test for ESP signature */
	if ((bus_space_read_1(iot, hayespioh, 0) & 0xf3) == 0)
		return 0;

	/*
	 * ESP is present at ESP enhanced base address; unknown com port
	 */

	/* Get the dip-switch configurations */
	bus_space_write_1(iot, hayespioh, HAYESP_CMD1, HAYESP_GETDIPS);
	dips = bus_space_read_1(iot, hayespioh, HAYESP_STATUS1);

	/* Determine which com port this ESP card services: bits 0,1 of  */
	/*  dips is the port # (0-3); combaselist[val] is the com_iobase */
	if (sc->sc_iobase != combaselist[dips & 0x03])
		return 0;

	printf(": ESP");

 	/* Check ESP Self Test bits. */
	/* Check for ESP version 2.0: bits 4,5,6 == 010 */
	bus_space_write_1(iot, hayespioh, HAYESP_CMD1, HAYESP_GETTEST);
	val = bus_space_read_1(iot, hayespioh, HAYESP_STATUS1); /* Clear reg 1 */
	val = bus_space_read_1(iot, hayespioh, HAYESP_STATUS2);
	if ((val & 0x70) < 0x20) {
		printf("-old (%o)", val & 0x70);
		/* we do not support the necessary features */
		return 0;
	}

	/* Check for ability to emulate 16550: bit 8 == 1 */
	if ((dips & 0x80) == 0) {
		printf(" slave");
		/* XXX Does slave really mean no 16550 support?? */
		return 0;
	}

	/*
	 * If we made it this far, we are a full-featured ESP v2.0 (or
	 * better), at the correct com port address.
	 */

	SET(sc->sc_hwflags, COM_HW_HAYESP);
	printf(", 1024 byte fifo\n");
	return 1;
}
#endif

int
comprobe(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	int iobase, needioh;
	int rv = 1;

#if NCOM_ISA || NCOM_PCMCIA
#define IS_ISA(parent) \
	(!strcmp((parent)->dv_cfdata->cf_driver->cd_name, "isa") || \
	 !strcmp((parent)->dv_cfdata->cf_driver->cd_name, "pcmcia"))
#elif NCOM_ISA
#define IS_ISA(parent) \
	!strcmp((parent)->dv_cfdata->cf_driver->cd_name, "isa")
#endif
#if NCOM_PICA
#define IS_PICA(parent) \
	!strcmp((parent)->dv_cfdata->cf_driver->cd_name, "pica")
#endif
	/*
	 * XXX should be broken out into functions for isa probe and
	 * XXX for commulti probe, with a helper function that contains
	 * XXX most of the interesting stuff.
	 */
#if NCOM_ISA || NCOM_PCMCIA
	if (IS_ISA(parent)) {
		struct isa_attach_args *ia = aux;

		iot = ia->ia_iot;
		iobase = ia->ia_iobase;
		needioh = 1;
	} else
#endif
#if NCOM_COMMULTI
	if (1) {
		struct cfdata *cf = match;
		struct commulti_attach_args *ca = aux;
 
		if (cf->cf_loc[0] != -1 && cf->cf_loc[0] != ca->ca_slave)
			return (0);

		iot = ca->ca_iot;
		iobase = ca->ca_iobase;
		ioh = ca->ca_ioh;
		needioh = 0;
	} else
#endif
#if NCOM_PICA
	if(IS_PICA(parent)) {
		struct confargs *ca = aux;
		if(!BUS_MATCHNAME(ca, "com"))
			return(0);
		iobase = (long)BUS_CVTADDR(ca);
		iot = 0;
		needioh = 1;
	} else
#endif
		return(0);			/* This cannot happen */

	/* if it's in use as console, it's there. */
	if (iobase == comconsaddr && !comconsattached)
		goto out;

	if (needioh && bus_space_map(iot, iobase, COM_NPORTS, 0, &ioh)) {
		rv = 0;
		goto out;
	}
	rv = comprobe1(iot, ioh, iobase);
	if (needioh)
		bus_space_unmap(iot, ioh, COM_NPORTS);

out:
#if NCOM_ISA || NCOM_PCMCIA
	if (rv && IS_ISA(parent)) {
		struct isa_attach_args *ia = aux;

		ia->ia_iosize = COM_NPORTS;
		ia->ia_msize = 0;
	}
#endif
	return (rv);
}

void
comattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct com_softc *sc = (void *)self;
	int iobase, irq;
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
#ifdef COM_HAYESP
	int	hayesp_ports[] = { 0x140, 0x180, 0x280, 0x300, 0 };
	int	*hayespp;
#endif

	/*
	 * XXX should be broken out into functions for isa attach and
	 * XXX for commulti attach, with a helper function that contains
	 * XXX most of the interesting stuff.
	 */
	if (ISSET(sc->sc_hwflags, COM_HW_REATTACH)) {
		int s;
		s = spltty();
		com_absent_notify(sc);
		splx(s);
	} else
	    sc->sc_hwflags = 0;
	sc->sc_swflags = 0;
#if NCOM_ISA || NCOM_PCMCIA
	if (IS_ISA(parent)) {
		struct isa_attach_args *ia = aux;

		/*
		 * We're living on an isa.
		 */
		iobase = ia->ia_iobase;
		iot = ia->ia_iot;
	        if (iobase != comconsaddr) {
	                if (bus_space_map(iot, iobase, COM_NPORTS, 0, &ioh))
				panic("comattach: io mapping failed");
		} else
	                ioh = comconsioh;
		irq = ia->ia_irq;
	} else
#endif
#if NCOM_COMMULTI
	if (1) {
		struct commulti_attach_args *ca = aux;

		/*
		 * We're living on a commulti.
		 */
		iobase = ca->ca_iobase;
		iot = ca->ca_iot;
		ioh = ca->ca_ioh;
		irq = IRQUNK;

		if (ca->ca_noien)
			SET(sc->sc_hwflags, COM_HW_NOIEN);
	} else
#endif
#if NCOM_PICA
	if(IS_PICA(parent)) {
		struct confargs *ca = aux;
		iobase = (long)BUS_CVTADDR(ca);
		iot = 0;
		irq = 0;
		ioh = iobase;
	} else
#endif
		panic("comattach: impossible");

	sc->sc_iot = iot;
	sc->sc_ioh = ioh;
	sc->sc_iobase = iobase;

	if (iobase == comconsaddr) {
		comconsattached = 1;

		/* 
		 * Need to reset baud rate, etc. of next print so reset
		 * comconsinit.  Also make sure console is always "hardwired".
		 */
		delay(1000);			/* wait for output to finish */
		comconsinit = 0;
		SET(sc->sc_hwflags, COM_HW_CONSOLE);
		SET(sc->sc_swflags, COM_SW_SOFTCAR);
	}

#ifdef COM_HAYESP
	/* Look for a Hayes ESP board. */
	for (hayespp = hayesp_ports; *hayespp != 0; hayespp++) {
		bus_space_handle_t hayespioh;

#define	HAYESP_NPORTS	8			/* XXX XXX XXX ??? ??? ??? */
		if (bus_space_map(iot, *hayespp, HAYESP_NPORTS, 0, &hayespioh))
			continue;
		if (comprobeHAYESP(hayespioh, sc)) {
			sc->sc_hayespbase = *hayespp;
			sc->sc_hayespioh = hayespioh;
			break;
		}
		bus_space_unmap(iot, hayespioh, HAYESP_NPORTS);
	}
	/* No ESP; look for other things. */
	if (*hayespp == 0) {
#endif

	/* look for a NS 16550AF UART with FIFOs */
	bus_space_write_1(iot, ioh, com_fifo,
	    FIFO_ENABLE | FIFO_RCV_RST | FIFO_XMT_RST | FIFO_TRIGGER_14);
	delay(100);
	if (ISSET(bus_space_read_1(iot, ioh, com_iir), IIR_FIFO_MASK) ==
	    IIR_FIFO_MASK)
		if (ISSET(bus_space_read_1(iot, ioh, com_fifo), FIFO_TRIGGER_14) ==
		    FIFO_TRIGGER_14) {
			SET(sc->sc_hwflags, COM_HW_FIFO);
			printf(": ns16550a, working fifo\n");
		} else
			printf(": ns16550, broken fifo\n");
	else
		printf(": ns8250 or ns16450, no fifo\n");
	bus_space_write_1(iot, ioh, com_fifo, 0);
#ifdef COM_HAYESP
	}
#endif

	/* disable interrupts */
	bus_space_write_1(iot, ioh, com_ier, 0);
	bus_space_write_1(iot, ioh, com_mcr, 0);

	if (irq != IRQUNK) {
#if NCOM_ISA || NCOM_PCMCIA
		if (IS_ISA(parent)) {
			struct isa_attach_args *ia = aux;

			sc->sc_ih = isa_intr_establish(ia->ia_ic, irq,
			    IST_EDGE, IPL_TTY, comintr, sc,
			    sc->sc_dev.dv_xname);
		} else
#endif
#if NCOM_PICA
		if (IS_PICA(parent)) {
			struct confargs *ca = aux;
			BUS_INTR_ESTABLISH(ca, comintr, (void *)(long)sc);
		} else
#endif
			panic("comattach: IRQ but can't have one");
	}

#ifdef KGDB
	if (kgdb_dev == makedev(commajor, unit)) {
		if (ISSET(sc->sc_hwflags, COM_HW_CONSOLE))
			kgdb_dev = -1;	/* can't debug over console port */
		else {
			cominit(iot, ioh, kgdb_rate);
			if (kgdb_debug_init) {
				/*
				 * Print prefix of device name,
				 * let kgdb_connect print the rest.
				 */
				printf("%s: ", sc->sc_dev.dv_xname);
				kgdb_connect(1);
			} else
				printf("%s: kgdb enabled\n",
				    sc->sc_dev.dv_xname);
		}
	}
#endif

	/* XXX maybe move up some? */
	if (ISSET(sc->sc_hwflags, COM_HW_CONSOLE))
		printf("%s: console\n", sc->sc_dev.dv_xname);
}

int
comopen(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
{
	int unit = DEVUNIT(dev);
	struct com_softc *sc;
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	struct tty *tp;
	int s;
	int error = 0;
 
	if (unit >= com_cd.cd_ndevs)
		return ENXIO;
	sc = com_cd.cd_devs[unit];
	if (!sc || ISSET(sc->sc_hwflags, COM_HW_ABSENT|COM_HW_ABSENT_PENDING))
		return ENXIO;

	s = spltty();
	if (!sc->sc_tty) {
		tp = sc->sc_tty = ttymalloc();
		tty_attach(tp);
	} else
		tp = sc->sc_tty;
	splx(s);

	tp->t_oproc = comstart;
	tp->t_param = comparam;
	tp->t_dev = dev;
	if (!ISSET(tp->t_state, TS_ISOPEN)) {
		SET(tp->t_state, TS_WOPEN);
		ttychars(tp);
		tp->t_iflag = TTYDEF_IFLAG;
		tp->t_oflag = TTYDEF_OFLAG;
		if (ISSET(sc->sc_hwflags, COM_HW_CONSOLE))
			tp->t_cflag = comconscflag;
		else
			tp->t_cflag = TTYDEF_CFLAG;
		if (ISSET(sc->sc_swflags, COM_SW_CLOCAL))
			SET(tp->t_cflag, CLOCAL);
		if (ISSET(sc->sc_swflags, COM_SW_CRTSCTS))
			SET(tp->t_cflag, CRTSCTS);
		if (ISSET(sc->sc_swflags, COM_SW_MDMBUF))
			SET(tp->t_cflag, MDMBUF);
		tp->t_lflag = TTYDEF_LFLAG;
		tp->t_ispeed = tp->t_ospeed = comdefaultrate;

		s = spltty();

		sc->sc_initialize = 1;
		comparam(tp, &tp->t_termios);
		ttsetwater(tp);

		if (comsopen++ == 0)
			timeout(compoll, NULL, 1);

		sc->sc_ibufp = sc->sc_ibuf = sc->sc_ibufs[0];
		sc->sc_ibufhigh = sc->sc_ibuf + COM_IHIGHWATER;
		sc->sc_ibufend = sc->sc_ibuf + COM_IBUFSIZE;

		iot = sc->sc_iot;
		ioh = sc->sc_ioh;
#ifdef COM_HAYESP
		/* Setup the ESP board */
		if (ISSET(sc->sc_hwflags, COM_HW_HAYESP)) {
			bus_space_handle_t hayespioh = sc->sc_hayespioh;

			bus_space_write_1(iot, ioh, com_fifo,
			     FIFO_DMA_MODE|FIFO_ENABLE|
			     FIFO_RCV_RST|FIFO_XMT_RST|FIFO_TRIGGER_8);

			/* Set 16550 compatibility mode */
			bus_space_write_1(iot, hayespioh, HAYESP_CMD1, HAYESP_SETMODE);
			bus_space_write_1(iot, hayespioh, HAYESP_CMD2, 
			     HAYESP_MODE_FIFO|HAYESP_MODE_RTS|
			     HAYESP_MODE_SCALE);

			/* Set RTS/CTS flow control */
			bus_space_write_1(iot, hayespioh, HAYESP_CMD1, HAYESP_SETFLOWTYPE);
			bus_space_write_1(iot, hayespioh, HAYESP_CMD2, HAYESP_FLOW_RTS);
			bus_space_write_1(iot, hayespioh, HAYESP_CMD2, HAYESP_FLOW_CTS);

			/* Set flow control levels */
			bus_space_write_1(iot, hayespioh, HAYESP_CMD1, HAYESP_SETRXFLOW);
			bus_space_write_1(iot, hayespioh, HAYESP_CMD2, 
			     HAYESP_HIBYTE(HAYESP_RXHIWMARK));
			bus_space_write_1(iot, hayespioh, HAYESP_CMD2,
			     HAYESP_LOBYTE(HAYESP_RXHIWMARK));
			bus_space_write_1(iot, hayespioh, HAYESP_CMD2,
			     HAYESP_HIBYTE(HAYESP_RXLOWMARK));
			bus_space_write_1(iot, hayespioh, HAYESP_CMD2,
			     HAYESP_LOBYTE(HAYESP_RXLOWMARK));
		} else
#endif
		if (ISSET(sc->sc_hwflags, COM_HW_FIFO)) {
			/*
			 * (Re)enable and drain FIFOs.
			 *
			 * Certain SMC chips cause problems if the FIFOs are
			 * enabled while input is ready. Turn off the FIFO
			 * if necessary to clear the input. Test the input
			 * ready bit after enabling the FIFOs to handle races
			 * between enabling and fresh input.
			 *
			 * Set the FIFO threshold based on the receive speed.
			 */
			for (;;) {
			 	bus_space_write_1(iot, ioh, com_fifo, 0);
				delay(100);
				(void) bus_space_read_1(iot, ioh, com_data);
				bus_space_write_1(iot, ioh, com_fifo,
				    FIFO_ENABLE | FIFO_RCV_RST | FIFO_XMT_RST |
				    (tp->t_ispeed <= 1200 ?
				    FIFO_TRIGGER_1 : FIFO_TRIGGER_8));
				delay(100);
				if(!ISSET(bus_space_read_1(iot, ioh,
				    com_lsr), LSR_RXRDY))
				    	break;
			}
		}

		/* flush any pending I/O */
		while (ISSET(bus_space_read_1(iot, ioh, com_lsr), LSR_RXRDY))
			(void) bus_space_read_1(iot, ioh, com_data);
		/* you turn me on, baby */
		sc->sc_mcr = MCR_DTR | MCR_RTS;
		if (!ISSET(sc->sc_hwflags, COM_HW_NOIEN))
			SET(sc->sc_mcr, MCR_IENABLE);
		bus_space_write_1(iot, ioh, com_mcr, sc->sc_mcr);
		sc->sc_ier = IER_ERXRDY | IER_ERLS | IER_EMSC;
		bus_space_write_1(iot, ioh, com_ier, sc->sc_ier);

		sc->sc_msr = bus_space_read_1(iot, ioh, com_msr);
		if (ISSET(sc->sc_swflags, COM_SW_SOFTCAR) || DEVCUA(dev) ||
		    ISSET(sc->sc_msr, MSR_DCD) || ISSET(tp->t_cflag, MDMBUF))
			SET(tp->t_state, TS_CARR_ON);
		else
			CLR(tp->t_state, TS_CARR_ON);
	} else if (ISSET(tp->t_state, TS_XCLUDE) && p->p_ucred->cr_uid != 0)
		return EBUSY;
	else
		s = spltty();

	if (DEVCUA(dev)) {
		if (ISSET(tp->t_state, TS_ISOPEN)) {
			/* Ah, but someone already is dialed in... */
			splx(s);
			return EBUSY;
		}
		sc->sc_cua = 1;		/* We go into CUA mode */
	}

	/* wait for carrier if necessary */
	if (ISSET(flag, O_NONBLOCK)) {
		if (!DEVCUA(dev) && sc->sc_cua) {
			/* Opening TTY non-blocking... but the CUA is busy */
			splx(s);
			return EBUSY;
		}
	} else {
		while (!(DEVCUA(dev) && sc->sc_cua) &&
		    !ISSET(tp->t_cflag, CLOCAL) &&
		    !ISSET(tp->t_state, TS_CARR_ON)) {
			SET(tp->t_state, TS_WOPEN);
			error = ttysleep(tp, &tp->t_rawq, TTIPRI | PCATCH,
			    ttopen, 0);
			if (error) {
				/* XXX should turn off chip if we're the
				   only waiter */
				if (DEVCUA(dev))
					sc->sc_cua = 0;
				splx(s);
				return error;
			}
		}
	}
	splx(s);

	return (*linesw[tp->t_line].l_open)(dev, tp);
}
 
int
comclose(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
{
	int unit = DEVUNIT(dev);
	struct com_softc *sc = com_cd.cd_devs[unit];
	struct tty *tp = sc->sc_tty;
	bus_space_tag_t iot = sc->sc_iot;
	bus_space_handle_t ioh = sc->sc_ioh;
	int s;

	/* XXX This is for cons.c. */
	if (!ISSET(tp->t_state, TS_ISOPEN))
		return 0;

	(*linesw[tp->t_line].l_close)(tp, flag);
	s = spltty();
	if (!ISSET(sc->sc_hwflags, COM_HW_ABSENT|COM_HW_ABSENT_PENDING)) {
		/* can't do any of this stuff .... */
		CLR(sc->sc_lcr, LCR_SBREAK);
		bus_space_write_1(iot, ioh, com_lcr, sc->sc_lcr);
		bus_space_write_1(iot, ioh, com_ier, 0);
		if (ISSET(tp->t_cflag, HUPCL) &&
		    !ISSET(sc->sc_swflags, COM_SW_SOFTCAR)) {
			/* XXX perhaps only clear DTR */
			bus_space_write_1(iot, ioh, com_mcr, 0);
		}
	}
	CLR(tp->t_state, TS_BUSY | TS_FLUSH);
	if (--comsopen == 0)
		untimeout(compoll, NULL);
	sc->sc_cua = 0;
	splx(s);
	ttyclose(tp);
#ifdef COM_DEBUG
	/* mark it ready for more use if reattached earlier */
	if (ISSET(sc->sc_hwflags, COM_HW_ABSENT_PENDING)) {
	    printf("comclose pending cleared\n");
	}
#endif
	CLR(sc->sc_hwflags, COM_HW_ABSENT_PENDING);

#ifdef notyet /* XXXX */
	if (ISSET(sc->sc_hwflags, COM_HW_CONSOLE)) {
		ttyfree(tp);
		sc->sc_tty = 0;
	}
#endif
	return 0;
}
 
int
comread(dev, uio, flag)
	dev_t dev;
	struct uio *uio;
	int flag;
{
	struct com_softc *sc = com_cd.cd_devs[DEVUNIT(dev)];
	struct tty *tp = sc->sc_tty;
 
	if (ISSET(sc->sc_hwflags, COM_HW_ABSENT|COM_HW_ABSENT_PENDING)) {
		int s = spltty();
		com_absent_notify(sc);
		splx(s);
		return EIO;
	}

	return ((*linesw[tp->t_line].l_read)(tp, uio, flag));
}
 
int
comwrite(dev, uio, flag)
	dev_t dev;
	struct uio *uio;
	int flag;
{
	struct com_softc *sc = com_cd.cd_devs[DEVUNIT(dev)];
	struct tty *tp = sc->sc_tty;
 
	if (ISSET(sc->sc_hwflags, COM_HW_ABSENT|COM_HW_ABSENT_PENDING)) {
		int s = spltty();
		com_absent_notify(sc);
		splx(s);
		return EIO;
	}

	return ((*linesw[tp->t_line].l_write)(tp, uio, flag));
}

struct tty *
comtty(dev)
	dev_t dev;
{
	struct com_softc *sc = com_cd.cd_devs[DEVUNIT(dev)];
	struct tty *tp = sc->sc_tty;

	return (tp);
}
 
static u_char
tiocm_xxx2mcr(data)
	int data;
{
	u_char m = 0;

	if (ISSET(data, TIOCM_DTR))
		SET(m, MCR_DTR);
	if (ISSET(data, TIOCM_RTS))
		SET(m, MCR_RTS);
	return m;
}

int
comioctl(dev, cmd, data, flag, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flag;
	struct proc *p;
{
	int unit = DEVUNIT(dev);
	struct com_softc *sc = com_cd.cd_devs[unit];
	struct tty *tp = sc->sc_tty;
	bus_space_tag_t iot = sc->sc_iot;
	bus_space_handle_t ioh = sc->sc_ioh;
	int error;

	if (ISSET(sc->sc_hwflags, COM_HW_ABSENT|COM_HW_ABSENT_PENDING)) {
		int s = spltty();
		com_absent_notify(sc);
		splx(s);
		return EIO;
	}

	error = (*linesw[tp->t_line].l_ioctl)(tp, cmd, data, flag, p);
	if (error >= 0)
		return error;
	error = ttioctl(tp, cmd, data, flag, p);
	if (error >= 0)
		return error;

	switch (cmd) {
	case TIOCSBRK:
		SET(sc->sc_lcr, LCR_SBREAK);
		bus_space_write_1(iot, ioh, com_lcr, sc->sc_lcr);
		break;
	case TIOCCBRK:
		CLR(sc->sc_lcr, LCR_SBREAK);
		bus_space_write_1(iot, ioh, com_lcr, sc->sc_lcr);
		break;
	case TIOCSDTR:
		SET(sc->sc_mcr, sc->sc_dtr);
		bus_space_write_1(iot, ioh, com_mcr, sc->sc_mcr);
		break;
	case TIOCCDTR:
		CLR(sc->sc_mcr, sc->sc_dtr);
		bus_space_write_1(iot, ioh, com_mcr, sc->sc_mcr);
		break;
	case TIOCMSET:
		CLR(sc->sc_mcr, MCR_DTR | MCR_RTS);
	case TIOCMBIS:
		SET(sc->sc_mcr, tiocm_xxx2mcr(*(int *)data));
		bus_space_write_1(iot, ioh, com_mcr, sc->sc_mcr);
		break;
	case TIOCMBIC:
		CLR(sc->sc_mcr, tiocm_xxx2mcr(*(int *)data));
		bus_space_write_1(iot, ioh, com_mcr, sc->sc_mcr);
		break;
	case TIOCMGET: {
		u_char m;
		int bits = 0;

		m = sc->sc_mcr;
		if (ISSET(m, MCR_DTR))
			SET(bits, TIOCM_DTR);
		if (ISSET(m, MCR_RTS))
			SET(bits, TIOCM_RTS);
		m = sc->sc_msr;
		if (ISSET(m, MSR_DCD))
			SET(bits, TIOCM_CD);
		if (ISSET(m, MSR_CTS))
			SET(bits, TIOCM_CTS);
		if (ISSET(m, MSR_DSR))
			SET(bits, TIOCM_DSR);
		if (ISSET(m, MSR_RI | MSR_TERI))
			SET(bits, TIOCM_RI);
		if (bus_space_read_1(iot, ioh, com_ier))
			SET(bits, TIOCM_LE);
		*(int *)data = bits;
		break;
	}
	case TIOCGFLAGS: {
		int driverbits, userbits = 0;

		driverbits = sc->sc_swflags;
		if (ISSET(driverbits, COM_SW_SOFTCAR))
			SET(userbits, TIOCFLAG_SOFTCAR);
		if (ISSET(driverbits, COM_SW_CLOCAL))
			SET(userbits, TIOCFLAG_CLOCAL);
		if (ISSET(driverbits, COM_SW_CRTSCTS))
			SET(userbits, TIOCFLAG_CRTSCTS);
		if (ISSET(driverbits, COM_SW_MDMBUF))
			SET(userbits, TIOCFLAG_MDMBUF);

		*(int *)data = userbits;
		break;
	}
	case TIOCSFLAGS: {
		int userbits, driverbits = 0;

		error = suser(p->p_ucred, &p->p_acflag); 
		if (error != 0)
			return(EPERM); 

		userbits = *(int *)data;
		if (ISSET(userbits, TIOCFLAG_SOFTCAR) ||
		    ISSET(sc->sc_hwflags, COM_HW_CONSOLE))
			SET(driverbits, COM_SW_SOFTCAR);
		if (ISSET(userbits, TIOCFLAG_CLOCAL))
			SET(driverbits, COM_SW_CLOCAL);
		if (ISSET(userbits, TIOCFLAG_CRTSCTS))
			SET(driverbits, COM_SW_CRTSCTS);
		if (ISSET(userbits, TIOCFLAG_MDMBUF))
			SET(driverbits, COM_SW_MDMBUF);

		sc->sc_swflags = driverbits;
		break;
	}
	default:
		return ENOTTY;
	}

	return 0;
}

int
comparam(tp, t)
	struct tty *tp;
	struct termios *t;
{
	struct com_softc *sc = com_cd.cd_devs[DEVUNIT(tp->t_dev)];
	bus_space_tag_t iot = sc->sc_iot;
	bus_space_handle_t ioh = sc->sc_ioh;
	int ospeed = comspeed(t->c_ospeed);
	u_char lcr;
	tcflag_t oldcflag;
	int s;

	if (ISSET(sc->sc_hwflags, COM_HW_ABSENT|COM_HW_ABSENT_PENDING)) {
		int s = spltty();
		com_absent_notify(sc);
		splx(s);
		return EIO;
	}

	/* check requested parameters */
	if (ospeed < 0 || (t->c_ispeed && t->c_ispeed != t->c_ospeed))
		return EINVAL;

	lcr = ISSET(sc->sc_lcr, LCR_SBREAK);

	switch (ISSET(t->c_cflag, CSIZE)) {
	case CS5:
		SET(lcr, LCR_5BITS);
		break;
	case CS6:
		SET(lcr, LCR_6BITS);
		break;
	case CS7:
		SET(lcr, LCR_7BITS);
		break;
	case CS8:
		SET(lcr, LCR_8BITS);
		break;
	}
	if (ISSET(t->c_cflag, PARENB)) {
		SET(lcr, LCR_PENAB);
		if (!ISSET(t->c_cflag, PARODD))
			SET(lcr, LCR_PEVEN);
	}
	if (ISSET(t->c_cflag, CSTOPB))
		SET(lcr, LCR_STOPB);

	sc->sc_lcr = lcr;

	s = spltty();

	if (ospeed == 0) {
		CLR(sc->sc_mcr, MCR_DTR);
		bus_space_write_1(iot, ioh, com_mcr, sc->sc_mcr);
	}

	/*
	 * Set the FIFO threshold based on the receive speed, if we are
	 * changing it.
	 */
	if (sc->sc_initialize || (tp->t_ispeed != t->c_ispeed)) {
		sc->sc_initialize = 0;

		if (ospeed != 0) {
			/*
			 * Make sure the transmit FIFO is empty before
			 * proceeding.  If we don't do this, some revisions
			 * of the UART will hang.  Interestingly enough,
			 * even if we do this will the last character is
			 * still being pushed out, they don't hang.  This
			 * seems good enough.
			 */
			while (ISSET(tp->t_state, TS_BUSY)) {
				int error;

				++sc->sc_halt;
				error = ttysleep(tp, &tp->t_outq,
				    TTOPRI | PCATCH, "comprm", 0);
				--sc->sc_halt;
				if (error) {
					splx(s);
					comstart(tp);
					return (error);
				}
			}

			bus_space_write_1(iot, ioh, com_lcr, lcr | LCR_DLAB);
			bus_space_write_1(iot, ioh, com_dlbl, ospeed);
			bus_space_write_1(iot, ioh, com_dlbh, ospeed >> 8);
			bus_space_write_1(iot, ioh, com_lcr, lcr);
			SET(sc->sc_mcr, MCR_DTR);
			bus_space_write_1(iot, ioh, com_mcr, sc->sc_mcr);
		} else
			bus_space_write_1(iot, ioh, com_lcr, lcr);

		if (!ISSET(sc->sc_hwflags, COM_HW_HAYESP) &&
		    ISSET(sc->sc_hwflags, COM_HW_FIFO))
			bus_space_write_1(iot, ioh, com_fifo,
			    FIFO_ENABLE |
			    (t->c_ispeed <= 1200 ? FIFO_TRIGGER_1 : FIFO_TRIGGER_8));
	} else
		bus_space_write_1(iot, ioh, com_lcr, lcr);

	/* When not using CRTSCTS, RTS follows DTR. */
	if (!ISSET(t->c_cflag, CRTSCTS)) {
		if (ISSET(sc->sc_mcr, MCR_DTR)) {
			if (!ISSET(sc->sc_mcr, MCR_RTS)) {
				SET(sc->sc_mcr, MCR_RTS);
				bus_space_write_1(iot, ioh, com_mcr, sc->sc_mcr);
			}
		} else {
			if (ISSET(sc->sc_mcr, MCR_RTS)) {
				CLR(sc->sc_mcr, MCR_RTS);
				bus_space_write_1(iot, ioh, com_mcr, sc->sc_mcr);
			}
		}
		sc->sc_dtr = MCR_DTR | MCR_RTS;
	} else
		sc->sc_dtr = MCR_DTR;

	/* and copy to tty */
	tp->t_ispeed = t->c_ispeed;
	tp->t_ospeed = t->c_ospeed;
	oldcflag = tp->t_cflag;
	tp->t_cflag = t->c_cflag;

	/*
	 * If DCD is off and MDMBUF is changed, ask the tty layer if we should
	 * stop the device.
	 */
	if (!ISSET(sc->sc_msr, MSR_DCD) &&
	    !ISSET(sc->sc_swflags, COM_SW_SOFTCAR) &&
	    ISSET(oldcflag, MDMBUF) != ISSET(tp->t_cflag, MDMBUF) &&
	    (*linesw[tp->t_line].l_modem)(tp, 0) == 0) {
		CLR(sc->sc_mcr, sc->sc_dtr);
		bus_space_write_1(iot, ioh, com_mcr, sc->sc_mcr);
	}

	/* Just to be sure... */
	splx(s);
	comstart(tp);
	return 0;
}

void
comstart_pending(arg)
	void *arg;
{
	struct com_softc *sc = arg;
	int s;

	s = spltty();
	com_absent_notify(sc);
	splx(s);
}

void
comstart(tp)
	struct tty *tp;
{
	struct com_softc *sc = com_cd.cd_devs[DEVUNIT(tp->t_dev)];
	bus_space_tag_t iot = sc->sc_iot;
	bus_space_handle_t ioh = sc->sc_ioh;
	int s;

	s = spltty();
	if (ISSET(sc->sc_hwflags, COM_HW_ABSENT|COM_HW_ABSENT_PENDING)) {
		/*
		 * not quite good enough: if caller is ttywait() it will
		 * go to sleep immediately, so hang out a bit and then
		 * prod caller again.
		 */
		com_absent_notify(sc);
		timeout(comstart_pending, sc, 1);
		goto out;
	}
	if (ISSET(tp->t_state, TS_BUSY))
		goto out;
	if (ISSET(tp->t_state, TS_TIMEOUT | TS_TTSTOP) ||
	    sc->sc_halt > 0)
		goto stopped;
	if (ISSET(tp->t_cflag, CRTSCTS) && !ISSET(sc->sc_msr, MSR_CTS))
		goto stopped;
	if (tp->t_outq.c_cc <= tp->t_lowat) {
		if (ISSET(tp->t_state, TS_ASLEEP)) {
			CLR(tp->t_state, TS_ASLEEP);
			wakeup(&tp->t_outq);
		}
		if (tp->t_outq.c_cc == 0)
			goto stopped;
		selwakeup(&tp->t_wsel);
	}
	SET(tp->t_state, TS_BUSY);

	if (!ISSET(sc->sc_ier, IER_ETXRDY)) {
		SET(sc->sc_ier, IER_ETXRDY);
		bus_space_write_1(iot, ioh, com_ier, sc->sc_ier);
	}
#ifdef COM_HAYESP
	if (ISSET(sc->sc_hwflags, COM_HW_HAYESP)) {
		u_char buffer[1024], *cp = buffer;
		int n = q_to_b(&tp->t_outq, cp, sizeof buffer);
		do
			bus_space_write_1(iot, ioh, com_data, *cp++);
		while (--n);
	}
	else
#endif
	if (ISSET(sc->sc_hwflags, COM_HW_FIFO)) {
		u_char buffer[16], *cp = buffer;
		int n = q_to_b(&tp->t_outq, cp, sizeof buffer);
		do {
			bus_space_write_1(iot, ioh, com_data, *cp++);
		} while (--n);
	} else
		bus_space_write_1(iot, ioh, com_data, getc(&tp->t_outq));
out:
	splx(s);
	return;
stopped:
	if (ISSET(sc->sc_ier, IER_ETXRDY)) {
		CLR(sc->sc_ier, IER_ETXRDY);
		bus_space_write_1(iot, ioh, com_ier, sc->sc_ier);
	}
	splx(s);
}

/*
 * Stop output on a line.
 */
int
comstop(tp, flag)
	struct tty *tp;
	int flag;
{
	int s;

	s = spltty();
	if (ISSET(tp->t_state, TS_BUSY))
		if (!ISSET(tp->t_state, TS_TTSTOP))
			SET(tp->t_state, TS_FLUSH);
	splx(s);
	return 0;
}

void
comdiag(arg)
	void *arg;
{
	struct com_softc *sc = arg;
	int overflows, floods;
	int s;

	s = spltty();
	sc->sc_errors = 0;
	overflows = sc->sc_overflows;
	sc->sc_overflows = 0;
	floods = sc->sc_floods;
	sc->sc_floods = 0;
	splx(s);

	log(LOG_WARNING, "%s: %d silo overflow%s, %d ibuf overflow%s\n",
	    sc->sc_dev.dv_xname,
	    overflows, overflows == 1 ? "" : "s",
	    floods, floods == 1 ? "" : "s");
}

void
compoll(arg)
	void *arg;
{
	int unit;
	struct com_softc *sc;
	struct tty *tp;
	register u_char *ibufp;
	u_char *ibufend;
	register int c;
	int s;
	static int lsrmap[8] = {
		0,      TTY_PE,
		TTY_FE, TTY_PE|TTY_FE,
		TTY_FE, TTY_PE|TTY_FE,
		TTY_FE, TTY_PE|TTY_FE
	};

	s = spltty();
	if (comevents == 0) {
		splx(s);
		goto out;
	}
	comevents = 0;
	splx(s);

	for (unit = 0; unit < com_cd.cd_ndevs; unit++) {
		sc = com_cd.cd_devs[unit];
		if (sc == 0 || sc->sc_ibufp == sc->sc_ibuf)
			continue;

		tp = sc->sc_tty;

		s = spltty();

		ibufp = sc->sc_ibuf;
		ibufend = sc->sc_ibufp;

		if (ibufp == ibufend) {
			splx(s);
			continue;
		}

		sc->sc_ibufp = sc->sc_ibuf = (ibufp == sc->sc_ibufs[0]) ?
					     sc->sc_ibufs[1] : sc->sc_ibufs[0];
		sc->sc_ibufhigh = sc->sc_ibuf + COM_IHIGHWATER;
		sc->sc_ibufend = sc->sc_ibuf + COM_IBUFSIZE;

		if (tp == 0 || !ISSET(tp->t_state, TS_ISOPEN)) {
			splx(s);
			continue;
		}

		if (ISSET(tp->t_cflag, CRTSCTS) &&
		    !ISSET(sc->sc_mcr, MCR_RTS)) {
			/* XXX */
			SET(sc->sc_mcr, MCR_RTS);
			bus_space_write_1(sc->sc_iot, sc->sc_ioh, com_mcr,
			    sc->sc_mcr);
		}

		splx(s);

		while (ibufp < ibufend) {
			c = *ibufp++;
			if (*ibufp & LSR_OE) {
				sc->sc_overflows++;
				if (sc->sc_errors++ == 0)
					timeout(comdiag, sc, 60 * hz);
			}
			/* This is ugly, but fast. */
			c |= lsrmap[(*ibufp++ & (LSR_BI|LSR_FE|LSR_PE)) >> 2];
			(*linesw[tp->t_line].l_rint)(c, tp);
		}
	}

out:
	timeout(compoll, NULL, 1);
}

int
comintr(arg)
	void *arg;
{
	struct com_softc *sc = arg;
	bus_space_tag_t iot = sc->sc_iot;
	bus_space_handle_t ioh = sc->sc_ioh;
	struct tty *tp;
	u_char lsr, data, msr, delta;
#ifdef COM_DEBUG
	int n;
	struct {
		u_char iir, lsr, msr;
	} iter[32];
#endif

	if (ISSET(sc->sc_hwflags, COM_HW_ABSENT) || !sc->sc_tty)
		return 0;		/* can't do squat. */

#ifdef COM_DEBUG
	n = 0;
	if (ISSET(iter[n].iir = bus_space_read_1(iot, ioh, com_iir), IIR_NOPEND))
		return (0);
#else
	if (ISSET(bus_space_read_1(iot, ioh, com_iir), IIR_NOPEND))
		return (0);
#endif

	tp = sc->sc_tty;

	for (;;) {
#ifdef COM_DEBUG
		iter[n].lsr =
#endif
		lsr = bus_space_read_1(iot, ioh, com_lsr);

		if (ISSET(lsr, LSR_RXRDY)) {
			register u_char *p = sc->sc_ibufp;

			comevents = 1;
			do {
				data = bus_space_read_1(iot, ioh, com_data);
				if (ISSET(lsr, LSR_BI)) {
#ifdef notdef
					printf("break %02x %02x %02x %02x\n",
					    sc->sc_msr, sc->sc_mcr, sc->sc_lcr,
					    sc->sc_dtr);
#endif
#ifdef DDB
					if (ISSET(sc->sc_hwflags,
					    COM_HW_CONSOLE)) {
						Debugger();
						goto next;
					}
#endif
					data = 0;
				}
				if (p >= sc->sc_ibufend) {
					sc->sc_floods++;
					if (sc->sc_errors++ == 0)
						timeout(comdiag, sc, 60 * hz);
				} else {
					*p++ = data;
					*p++ = lsr;
					if (p == sc->sc_ibufhigh &&
					    ISSET(tp->t_cflag, CRTSCTS)) {
						/* XXX */
						CLR(sc->sc_mcr, MCR_RTS);
						bus_space_write_1(iot, ioh, com_mcr,
						    sc->sc_mcr);
					}
				}
#ifdef DDB
			next:
#endif
#ifdef COM_DEBUG
				if (++n >= 32)
					goto ohfudge;
				iter[n].lsr =
#endif
				lsr = bus_space_read_1(iot, ioh, com_lsr);
			} while (ISSET(lsr, LSR_RXRDY));

			sc->sc_ibufp = p;
		}
#ifdef COM_DEBUG
		else if (ISSET(lsr, LSR_BI|LSR_FE|LSR_PE|LSR_OE))
			printf("weird lsr %02x\n", lsr);
#endif

#ifdef COM_DEBUG
		iter[n].msr =
#endif
		msr = bus_space_read_1(iot, ioh, com_msr);

		if (msr != sc->sc_msr) {
			delta = msr ^ sc->sc_msr;
			sc->sc_msr = msr;
			if (ISSET(delta, MSR_DCD) &&
			    !ISSET(sc->sc_swflags, COM_SW_SOFTCAR) &&
			    (*linesw[tp->t_line].l_modem)(tp, ISSET(msr, MSR_DCD)) == 0) {
				CLR(sc->sc_mcr, sc->sc_dtr);
				bus_space_write_1(iot, ioh, com_mcr, sc->sc_mcr);
			}
			if (ISSET(delta & msr, MSR_CTS) &&
			    ISSET(tp->t_cflag, CRTSCTS)) {
				/* the line is up and we want to do rts/cts flow control */
				(*linesw[tp->t_line].l_start)(tp);
			}
		}

		if (ISSET(lsr, LSR_TXRDY) && ISSET(tp->t_state, TS_BUSY)) {
			CLR(tp->t_state, TS_BUSY | TS_FLUSH);
			if (sc->sc_halt > 0)
				wakeup(&tp->t_outq);
			(*linesw[tp->t_line].l_start)(tp);
		}

#ifdef COM_DEBUG
		if (++n >= 32)
			goto ohfudge;
		if (ISSET(iter[n].iir = bus_space_read_1(iot, ioh, com_iir), IIR_NOPEND))
			return (1);
#else
		if (ISSET(bus_space_read_1(iot, ioh, com_iir), IIR_NOPEND))
			return (1);
#endif
	}
#ifdef COM_DEBUG
ohfudge:
	printf("comintr: too many iterations");
	for (n = 0; n < 32; n++) {
		if ((n % 4) == 0)
			printf("\ncomintr: iter[%02d]", n);
		printf("  %02x %02x %02x", iter[n].iir, iter[n].lsr, iter[n].msr);
	}
	printf("\n");
	printf("comintr: msr %02x mcr %02x lcr %02x ier %02x\n",
	    sc->sc_msr, sc->sc_mcr, sc->sc_lcr, sc->sc_ier);
	printf("comintr: state %08x cc %d\n", sc->sc_tty->t_state,
	    sc->sc_tty->t_outq.c_cc);
#endif
}

/*
 * Following are all routines needed for COM to act as console
 */
#include <dev/cons.h>

void
comcnprobe(cp)
	struct consdev *cp;
{
	/* XXX NEEDS TO BE FIXED XXX */
	bus_space_tag_t iot = 0;
	bus_space_handle_t ioh;
	int found;
#if NCOM_PICA
	/* XXX */
#include <arc/arc/arctype.h>
	extern int cputype;

	if(cputype != ACER_PICA_61)
		return;
#endif

	if (bus_space_map(iot, CONADDR, COM_NPORTS, 0, &ioh)) {
		cp->cn_pri = CN_DEAD;
		return;
	}
	found = comprobe1(iot, ioh, CONADDR);
	bus_space_unmap(iot, ioh, COM_NPORTS);
	if (!found) {
		cp->cn_pri = CN_DEAD;
		return;
	}

	/* locate the major number */
	for (commajor = 0; commajor < nchrdev; commajor++)
		if (cdevsw[commajor].d_open == comopen)
			break;

	/* initialize required fields */
	cp->cn_dev = makedev(commajor, CONUNIT);
#ifdef	COMCONSOLE
	cp->cn_pri = CN_REMOTE;		/* Force a serial port console */
#else
	cp->cn_pri = CN_NORMAL;
#endif
}

void
comcninit(cp)
	struct consdev *cp;
{

#if 0
	XXX NEEDS TO BE FIXED XXX
	comconsiot = ???;
#endif
	if (bus_space_map(comconsiot, CONADDR, COM_NPORTS, 0, &comconsioh))
		panic("comcninit: mapping failed");

	cominit(comconsiot, comconsioh, comdefaultrate);
	comconsaddr = CONADDR;
	comconsinit = 0;
}

void
cominit(iot, ioh, rate)
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	int rate;
{
	int s = splhigh();
	u_char stat;

	bus_space_write_1(iot, ioh, com_lcr, LCR_DLAB);
	rate = comspeed(comdefaultrate);
	bus_space_write_1(iot, ioh, com_dlbl, rate);
	bus_space_write_1(iot, ioh, com_dlbh, rate >> 8);
	bus_space_write_1(iot, ioh, com_lcr, LCR_8BITS);
	bus_space_write_1(iot, ioh, com_ier, IER_ERXRDY | IER_ETXRDY);
	bus_space_write_1(iot, ioh, com_fifo, FIFO_ENABLE | FIFO_RCV_RST | FIFO_XMT_RST | FIFO_TRIGGER_4);
	stat = bus_space_read_1(iot, ioh, com_iir);
	splx(s);
}

int
comcngetc(dev)
	dev_t dev;
{
	int s = splhigh();
	bus_space_tag_t iot = comconsiot;
	bus_space_handle_t ioh = comconsioh;
	u_char stat, c;

	while (!ISSET(stat = bus_space_read_1(iot, ioh, com_lsr), LSR_RXRDY))
		;
	c = bus_space_read_1(iot, ioh, com_data);
	stat = bus_space_read_1(iot, ioh, com_iir);
	splx(s);
	return c;
}

/*
 * Console kernel output character routine.
 */
void
comcnputc(dev, c)
	dev_t dev;
	int c;
{
	int s = splhigh();
	bus_space_tag_t iot = comconsiot;
	bus_space_handle_t ioh = comconsioh;
	u_char stat;
	register int timo;

#ifdef KGDB
	if (dev != kgdb_dev)
#endif
	if (comconsinit == 0) {
		cominit(iot, ioh, comdefaultrate);
		comconsinit = 1;
	}
	/* wait for any pending transmission to finish */
	timo = 50000;
	while (!ISSET(stat = bus_space_read_1(iot, ioh, com_lsr), LSR_TXRDY) && --timo)
		;
	bus_space_write_1(iot, ioh, com_data, c);
	/* wait for this transmission to complete */
	timo = 1500000;
	while (!ISSET(stat = bus_space_read_1(iot, ioh, com_lsr), LSR_TXRDY) && --timo)
		;
	/* clear any interrupts generated by this transmission */
	stat = bus_space_read_1(iot, ioh, com_iir);
	splx(s);
}

void
comcnpollc(dev, on)
	dev_t dev;
	int on;
{

}
@


1.28
log
@Missing pieces of new bus.h that CVS lost behind my back
@
text
@d1 1
a1 1
/*	$OpenBSD: com.c,v 1.27 1996/11/12 20:30:27 niklas Exp $	*/
@


1.27
log
@s/bus.h/bus.old.h/ to make the transit to the bus_space bus.h an easy road
possibly taken in small steps
@
text
@d1 1
a1 1
/*	$OpenBSD: com.c,v 1.26 1996/11/09 21:50:43 tholo Exp $	*/
d60 1
a60 1
#include <machine/bus.old.h>
d81 1
a81 1
	bus_chipset_tag_t sc_bc;
d95 3
a97 2
	bus_io_handle_t sc_ioh;
	bus_io_handle_t sc_hayespioh;
d124 1
a124 1
int comprobeHAYESP __P((bus_io_handle_t hayespioh, struct com_softc *sc));
d166 9
d191 2
a192 2
bus_chipset_tag_t comconsbc;
bus_io_handle_t comconsioh;
d307 1
d353 1
a353 1
		isa_intr_disestablish(sc->sc_bc, sc->sc_ih);
d434 3
a436 3
comprobe1(bc, ioh, iobase)
	bus_chipset_tag_t bc;
	bus_io_handle_t ioh;
d442 2
a443 2
	bus_io_write_1(bc, ioh, com_lcr, 0);
	bus_io_write_1(bc, ioh, com_iir, 0);
d445 1
a445 1
	    k = bus_io_read_1(bc, ioh, com_iir);
d447 1
a447 1
		bus_io_read_1(bc, ioh, com_data); /* cleanup */
d460 1
a460 1
	bus_io_handle_t hayespioh;
d465 1
a465 1
	bus_chipset_tag_t bc = sc->sc_bc;
d475 1
a475 1
	if ((bus_io_read_1(bc, hayespioh, 0) & 0xf3) == 0)
d483 2
a484 2
	bus_io_write_1(bc, hayespioh, HAYESP_CMD1, HAYESP_GETDIPS);
	dips = bus_io_read_1(bc, hayespioh, HAYESP_STATUS1);
d495 3
a497 3
	bus_io_write_1(bc, hayespioh, HAYESP_CMD1, HAYESP_GETTEST);
	val = bus_io_read_1(bc, hayespioh, HAYESP_STATUS1); /* Clear reg 1 */
	val = bus_io_read_1(bc, hayespioh, HAYESP_STATUS2);
d527 2
a528 2
	bus_chipset_tag_t bc;
	bus_io_handle_t ioh;
d540 4
d553 1
a553 1
		bc = ia->ia_bc;
d566 1
a566 1
		bc = ca->ca_bc;
d572 10
d588 1
a588 1
	if (needioh && bus_io_map(bc, iobase, COM_NPORTS, &ioh)) {
d592 1
a592 1
	rv = comprobe1(bc, ioh, iobase);
d594 1
a594 1
		bus_io_unmap(bc, ioh, COM_NPORTS);
d615 2
a616 2
	bus_chipset_tag_t bc;
	bus_io_handle_t ioh;
d643 1
a643 1
		bc = ia->ia_bc;
d645 1
a645 1
	                if (bus_io_map(bc, iobase, COM_NPORTS, &ioh))
d660 1
a660 1
		bc = ca->ca_bc;
d668 9
d679 1
a679 1
	sc->sc_bc = bc;
d699 1
a699 1
		bus_io_handle_t hayespioh;
d702 1
a702 1
		if (bus_io_map(bc, *hayespp, HAYESP_NPORTS, &hayespioh))
d709 1
a709 1
		bus_io_unmap(bc, hayespioh, HAYESP_NPORTS);
d716 1
a716 1
	bus_io_write_1(bc, ioh, com_fifo,
d719 1
a719 1
	if (ISSET(bus_io_read_1(bc, ioh, com_iir), IIR_FIFO_MASK) ==
d721 1
a721 1
		if (ISSET(bus_io_read_1(bc, ioh, com_fifo), FIFO_TRIGGER_14) ==
d729 1
a729 1
	bus_io_write_1(bc, ioh, com_fifo, 0);
d735 2
a736 2
	bus_io_write_1(bc, ioh, com_ier, 0);
	bus_io_write_1(bc, ioh, com_mcr, 0);
d748 6
d762 1
a762 1
			cominit(bc, ioh, kgdb_rate);
d790 2
a791 2
	bus_chipset_tag_t bc;
	bus_io_handle_t ioh;
d844 1
a844 1
		bc = sc->sc_bc;
d849 1
a849 1
			bus_io_handle_t hayespioh = sc->sc_hayespioh;
d851 1
a851 1
			bus_io_write_1(bc, ioh, com_fifo,
d856 2
a857 2
			bus_io_write_1(bc, hayespioh, HAYESP_CMD1, HAYESP_SETMODE);
			bus_io_write_1(bc, hayespioh, HAYESP_CMD2, 
d862 3
a864 3
			bus_io_write_1(bc, hayespioh, HAYESP_CMD1, HAYESP_SETFLOWTYPE);
			bus_io_write_1(bc, hayespioh, HAYESP_CMD2, HAYESP_FLOW_RTS);
			bus_io_write_1(bc, hayespioh, HAYESP_CMD2, HAYESP_FLOW_CTS);
d867 2
a868 2
			bus_io_write_1(bc, hayespioh, HAYESP_CMD1, HAYESP_SETRXFLOW);
			bus_io_write_1(bc, hayespioh, HAYESP_CMD2, 
d870 1
a870 1
			bus_io_write_1(bc, hayespioh, HAYESP_CMD2,
d872 1
a872 1
			bus_io_write_1(bc, hayespioh, HAYESP_CMD2,
d874 1
a874 1
			bus_io_write_1(bc, hayespioh, HAYESP_CMD2,
d891 1
a891 1
			 	bus_io_write_1(bc, ioh, com_fifo, 0);
d893 2
a894 2
				(void) bus_io_read_1(bc, ioh, com_data);
				bus_io_write_1(bc, ioh, com_fifo,
d899 1
a899 1
				if(!ISSET(bus_io_read_1(bc, ioh,
d906 2
a907 2
		while (ISSET(bus_io_read_1(bc, ioh, com_lsr), LSR_RXRDY))
			(void) bus_io_read_1(bc, ioh, com_data);
d912 1
a912 1
		bus_io_write_1(bc, ioh, com_mcr, sc->sc_mcr);
d914 1
a914 1
		bus_io_write_1(bc, ioh, com_ier, sc->sc_ier);
d916 1
a916 1
		sc->sc_msr = bus_io_read_1(bc, ioh, com_msr);
d974 2
a975 2
	bus_chipset_tag_t bc = sc->sc_bc;
	bus_io_handle_t ioh = sc->sc_ioh;
d987 2
a988 2
		bus_io_write_1(bc, ioh, com_lcr, sc->sc_lcr);
		bus_io_write_1(bc, ioh, com_ier, 0);
d992 1
a992 1
			bus_io_write_1(bc, ioh, com_mcr, 0);
d1090 2
a1091 2
	bus_chipset_tag_t bc = sc->sc_bc;
	bus_io_handle_t ioh = sc->sc_ioh;
d1111 1
a1111 1
		bus_io_write_1(bc, ioh, com_lcr, sc->sc_lcr);
d1115 1
a1115 1
		bus_io_write_1(bc, ioh, com_lcr, sc->sc_lcr);
d1119 1
a1119 1
		bus_io_write_1(bc, ioh, com_mcr, sc->sc_mcr);
d1123 1
a1123 1
		bus_io_write_1(bc, ioh, com_mcr, sc->sc_mcr);
d1129 1
a1129 1
		bus_io_write_1(bc, ioh, com_mcr, sc->sc_mcr);
d1133 1
a1133 1
		bus_io_write_1(bc, ioh, com_mcr, sc->sc_mcr);
d1153 1
a1153 1
		if (bus_io_read_1(bc, ioh, com_ier))
d1208 2
a1209 2
	bus_chipset_tag_t bc = sc->sc_bc;
	bus_io_handle_t ioh = sc->sc_ioh;
d1256 1
a1256 1
		bus_io_write_1(bc, ioh, com_mcr, sc->sc_mcr);
d1289 4
a1292 4
			bus_io_write_1(bc, ioh, com_lcr, lcr | LCR_DLAB);
			bus_io_write_1(bc, ioh, com_dlbl, ospeed);
			bus_io_write_1(bc, ioh, com_dlbh, ospeed >> 8);
			bus_io_write_1(bc, ioh, com_lcr, lcr);
d1294 1
a1294 1
			bus_io_write_1(bc, ioh, com_mcr, sc->sc_mcr);
d1296 1
a1296 1
			bus_io_write_1(bc, ioh, com_lcr, lcr);
d1300 1
a1300 1
			bus_io_write_1(bc, ioh, com_fifo,
d1304 1
a1304 1
		bus_io_write_1(bc, ioh, com_lcr, lcr);
d1311 1
a1311 1
				bus_io_write_1(bc, ioh, com_mcr, sc->sc_mcr);
d1316 1
a1316 1
				bus_io_write_1(bc, ioh, com_mcr, sc->sc_mcr);
d1338 1
a1338 1
		bus_io_write_1(bc, ioh, com_mcr, sc->sc_mcr);
d1364 2
a1365 2
	bus_chipset_tag_t bc = sc->sc_bc;
	bus_io_handle_t ioh = sc->sc_ioh;
d1399 1
a1399 1
		bus_io_write_1(bc, ioh, com_ier, sc->sc_ier);
d1406 1
a1406 1
			bus_io_write_1(bc, ioh, com_data, *cp++);
d1415 1
a1415 1
			bus_io_write_1(bc, ioh, com_data, *cp++);
d1418 1
a1418 1
		bus_io_write_1(bc, ioh, com_data, getc(&tp->t_outq));
d1425 1
a1425 1
		bus_io_write_1(bc, ioh, com_ier, sc->sc_ier);
d1527 1
a1527 1
			bus_io_write_1(sc->sc_bc, sc->sc_ioh, com_mcr,
d1555 2
a1556 2
	bus_chipset_tag_t bc = sc->sc_bc;
	bus_io_handle_t ioh = sc->sc_ioh;
d1571 1
a1571 1
	if (ISSET(iter[n].iir = bus_io_read_1(bc, ioh, com_iir), IIR_NOPEND))
d1574 1
a1574 1
	if (ISSET(bus_io_read_1(bc, ioh, com_iir), IIR_NOPEND))
d1584 1
a1584 1
		lsr = bus_io_read_1(bc, ioh, com_lsr);
d1591 1
a1591 1
				data = bus_io_read_1(bc, ioh, com_data);
d1618 1
a1618 1
						bus_io_write_1(bc, ioh, com_mcr,
d1630 1
a1630 1
				lsr = bus_io_read_1(bc, ioh, com_lsr);
d1643 1
a1643 1
		msr = bus_io_read_1(bc, ioh, com_msr);
d1652 1
a1652 1
				bus_io_write_1(bc, ioh, com_mcr, sc->sc_mcr);
d1671 1
a1671 1
		if (ISSET(iter[n].iir = bus_io_read_1(bc, ioh, com_iir), IIR_NOPEND))
d1674 1
a1674 1
		if (ISSET(bus_io_read_1(bc, ioh, com_iir), IIR_NOPEND))
d1704 2
a1705 2
	bus_chipset_tag_t bc = 0;
	bus_io_handle_t ioh;
d1707 8
d1716 1
a1716 1
	if (bus_io_map(bc, CONADDR, COM_NPORTS, &ioh)) {
d1720 2
a1721 2
	found = comprobe1(bc, ioh, CONADDR);
	bus_io_unmap(bc, ioh, COM_NPORTS);
d1748 1
a1748 1
	comconsbc = ???;
d1750 1
a1750 1
	if (bus_io_map(comconsbc, CONADDR, COM_NPORTS, &comconsioh))
d1753 1
a1753 1
	cominit(comconsbc, comconsioh, comdefaultrate);
d1759 3
a1761 3
cominit(bc, ioh, rate)
	bus_chipset_tag_t bc;
	bus_io_handle_t ioh;
d1767 1
a1767 1
	bus_io_write_1(bc, ioh, com_lcr, LCR_DLAB);
d1769 6
a1774 6
	bus_io_write_1(bc, ioh, com_dlbl, rate);
	bus_io_write_1(bc, ioh, com_dlbh, rate >> 8);
	bus_io_write_1(bc, ioh, com_lcr, LCR_8BITS);
	bus_io_write_1(bc, ioh, com_ier, IER_ERXRDY | IER_ETXRDY);
	bus_io_write_1(bc, ioh, com_fifo, FIFO_ENABLE | FIFO_RCV_RST | FIFO_XMT_RST | FIFO_TRIGGER_4);
	stat = bus_io_read_1(bc, ioh, com_iir);
d1783 2
a1784 2
	bus_chipset_tag_t bc = comconsbc;
	bus_io_handle_t ioh = comconsioh;
d1787 1
a1787 1
	while (!ISSET(stat = bus_io_read_1(bc, ioh, com_lsr), LSR_RXRDY))
d1789 2
a1790 2
	c = bus_io_read_1(bc, ioh, com_data);
	stat = bus_io_read_1(bc, ioh, com_iir);
d1804 2
a1805 2
	bus_chipset_tag_t bc = comconsbc;
	bus_io_handle_t ioh = comconsioh;
d1813 1
a1813 1
		cominit(bc, ioh, comdefaultrate);
d1818 1
a1818 1
	while (!ISSET(stat = bus_io_read_1(bc, ioh, com_lsr), LSR_TXRDY) && --timo)
d1820 1
a1820 1
	bus_io_write_1(bc, ioh, com_data, c);
d1823 1
a1823 1
	while (!ISSET(stat = bus_io_read_1(bc, ioh, com_lsr), LSR_TXRDY) && --timo)
d1826 1
a1826 1
	stat = bus_io_read_1(bc, ioh, com_iir);
@


1.26
log
@Break shall be handled as data == 0 and FE bit set; from Theo
@
text
@d1 1
a1 1
/*	$OpenBSD: com.c,v 1.25 1996/10/30 15:01:49 niklas Exp $	*/
d60 1
a60 1
#include <machine/bus.h>
@


1.25
log
@cominit is used from the outside (the alpha port)
@
text
@d1 1
a1 1
/*	$OpenBSD: com.c,v 1.24 1996/10/22 01:11:50 downsj Exp $	*/
d1565 1
@


1.24
log
@patch com speed initialization
@
text
@d1 1
a1 1
/*	$OpenBSD: com.c,v 1.23 1996/10/16 23:18:42 deraadt Exp $	*/
a167 2

void cominit __P((bus_chipset_tag_t, bus_io_handle_t, int));
@


1.23
log
@contextual usage
@
text
@d1 1
a1 1
/*	$OpenBSD: com.c,v 1.22 1996/10/16 12:31:58 deraadt Exp $	*/
d116 2
d795 1
d1225 3
a1227 5
#if 1
	if (tp->t_ispeed != t->c_ispeed) {
#else
	if (1) {
#endif
@


1.22
log
@unused variables
@
text
@d1 1
a1 1
/*	$OpenBSD: com.c,v 1.21 1996/08/29 12:58:30 deraadt Exp $	*/
d1582 1
d1584 1
@


1.21
log
@sunos-like cua behaviour; inspired by budd@@cs.bu.edu in his scn.c
@
text
@d1 1
a1 1
/*	$OpenBSD: com.c,v 1.20 1996/07/02 09:47:46 downsj Exp $	*/
d228 9
a236 10
    int err; 
    struct pcmciadevs *dev = pc_link->device;
    struct ed_softc *sc = (void *)self; 
    if (!(err = PCMCIA_BUS_CONFIG(pc_link->adapter, pc_link, self,
				  pc_cf, cf))) {
        pc_cf->memwin = 0;
	if (pc_cf->cfgtype == 0) 
	    pc_cf->cfgtype = CFGENTRYID; /* determine from ioaddr */
    }
    return err;
d244 1
a244 1
    struct pcmcia_device pcd;
d246 2
a247 2
    {"PCMCIA Modem card", com_pcmcia_mod, com_pcmcia_isa_attach,
     NULL, com_pcmcia_remove}
d252 13
a264 13
  { "com", 0,
  NULL, "*MODEM*", NULL, NULL,
  NULL, (void *)&pcmcia_com 
  },
  { "com", 0,
  NULL, NULL, "*MODEM*", NULL,
  NULL, (void *)&pcmcia_com 
  },
  { "com", 0,
  NULL, NULL, NULL, "*MODEM*",
  NULL, (void *)&pcmcia_com 
  },
  {NULL}
d274 1
a274 1
				  ncom_pcmcia_devs);
d286 1
d288 1
a288 2
	int rval;
	if (rval = comprobe(parent, sc->sc_dev.dv_cfdata, ia)) {
@


1.20
log
@better FIFO enabling code; netbsd pr#2574, cliff@@wport.com
@
text
@d1 1
a1 1
/*	$OpenBSD: com.c,v 1.19 1996/06/24 20:48:31 pefo Exp $	*/
d114 2
d196 2
a197 1
#define	COMUNIT(x)	(minor(x))
d749 1
a749 1
	int unit = COMUNIT(dev);
d763 1
d769 1
d877 1
a877 1
		if (ISSET(sc->sc_swflags, COM_SW_SOFTCAR) ||
d887 9
d897 9
a905 2
	if (!ISSET(flag, O_NONBLOCK))
		while (!ISSET(tp->t_cflag, CLOCAL) &&
d913 2
d919 1
d931 1
a931 1
	int unit = COMUNIT(dev);
d958 1
d984 1
a984 1
	struct com_softc *sc = com_cd.cd_devs[COMUNIT(dev)];
d1003 1
a1003 1
	struct com_softc *sc = com_cd.cd_devs[COMUNIT(dev)];
d1020 1
a1020 1
	struct com_softc *sc = com_cd.cd_devs[COMUNIT(dev)];
d1047 1
a1047 1
	int unit = COMUNIT(dev);
d1167 1
a1167 1
	struct com_softc *sc = com_cd.cd_devs[COMUNIT(tp->t_dev)];
d1325 1
a1325 1
	struct com_softc *sc = com_cd.cd_devs[COMUNIT(tp->t_dev)];
@


1.19
log
@pica changes backed out. does not belong here
@
text
@d1 1
a1 1
/*	$OpenBSD: com.c,v 1.18 1996/06/22 23:12:14 pefo Exp $	*/
d833 27
a859 5
		if (ISSET(sc->sc_hwflags, COM_HW_FIFO))
			/* Set the FIFO threshold based on the receive speed. */
			bus_io_write_1(bc, ioh, com_fifo,
			    FIFO_ENABLE | FIFO_RCV_RST | FIFO_XMT_RST |
			    (tp->t_ispeed <= 1200 ? FIFO_TRIGGER_1 : FIFO_TRIGGER_8));
@


1.18
log
@Pica bus support added
@
text
@d1 1
a1 1
/*	$OpenBSD: com.c,v 1.17 1996/06/10 19:29:59 niklas Exp $	*/
a160 10
#if NCOM_PICA
#undef  CONADDR         /* This is stupid but using devs before config .. */
#define CONADDR 0xe0006000

struct cfattach com_pica_ca = {
	sizeof(struct com_softc), comprobe, comattach
};
#endif


a526 4
#if NCOM_PICA
#define IS_PICA(parent) \
	!strcmp((parent)->dv_cfdata->cf_driver->cd_name, "pica")
#endif
a540 10
#if NCOM_PICA
	if(IS_PICA(parent)) {
		struct confargs *ca = aux;
		if(!BUS_MATCHNAME(ca, "com"))
			return(0);
		iobase = (long)BUS_CVTADDR(ca);
		bc = 0;
		needioh = 1;
	} else
#endif
a624 9
#if NCOM_PICA
	if(IS_PICA(parent)) {
		struct confargs *ca = aux;
		iobase = (long)BUS_CVTADDR(ca);
		bc = 0;
		irq = 0;
		ioh = iobase;
	} else
#endif
a711 6
#if NCOM_PICA
		if (IS_PICA(parent)) {
			struct confargs *ca = aux;
			BUS_INTR_ESTABLISH(ca, comintr, (void *)(long)sc);
		} else
#endif
a1619 1
#if 0
a1623 3
#else
	ioh = CONADDR;
#endif
@


1.17
log
@Some cleanup for -Wall -Wstrict-prototypes
@
text
@d1 1
a1 1
/*	$OpenBSD: com.c,v 1.16 1996/06/10 07:32:39 deraadt Exp $	*/
d161 9
d537 4
d555 10
d649 9
d745 6
d1659 1
d1664 3
@


1.16
log
@tty_attach()
@
text
@d1 1
a1 1
/*	$OpenBSD: com.c,v 1.15 1996/05/26 00:27:14 deraadt Exp $	*/
d144 4
a147 2
int comprobe __P((struct device *, void *, void *));
void comattach __P((struct device *, struct device *, void *));
a215 1
void	com_absent_notify __P((struct com_softc *sc));
d388 3
a390 2
	struct tty *tp;
	if (tp = sc->sc_tty) {
d427 1
a427 2
	int tmp;
	int i,k;
@


1.15
log
@sync 0521
@
text
@d1 2
a2 2
/*	$OpenBSD: com.c,v 1.14 1996/05/10 12:37:13 deraadt Exp $	*/
/*	$NetBSD: com.c,v 1.82 1996/05/12 23:52:00 mycroft Exp $	*/
d760 1
a760 1
	if (!sc->sc_tty)
d762 2
a763 1
	else
@


1.14
log
@proto change
@
text
@d1 2
a2 2
/*	$OpenBSD: com.c,v 1.11 1996/04/21 22:23:15 deraadt Exp $	*/
/*	$NetBSD: com.c,v 1.81 1996/05/05 19:50:44 christos Exp $	*/
d60 1
a60 3
#ifdef i386							/* XXX */
#include <machine/cpu.h>					/* XXX */
#else								/* XXX */
a61 2
#endif								/* XXX */
#include <machine/bus.h>
@


1.13
log
@sync with 0504 -- prototypes and bus.h
@
text
@d2 1
a2 1
/*	$NetBSD: com.c,v 1.80 1996/04/29 20:03:00 christos Exp $	*/
a128 1
int	comintr		__P((void *));
@


1.12
log
@Pull in John Kohl's [jtk@@netbsd.org] most recent (15Apr96) APM and PCMCIA work
(original PCMCIA framework  by Stefan Grefen [grefen@@convex.com]).
@
text
@d2 1
a2 1
/*	$NetBSD: com.c,v 1.79 1996/04/15 18:54:31 cgd Exp $	*/
d78 1
d125 19
a143 9
int comopen __P((dev_t, int, int, struct proc *));
int comclose __P((dev_t, int, int, struct proc *));
void comdiag __P((void *));
int comintr __P((void *));
void compoll __P((void *));
int comparam __P((struct tty *, struct termios *));
void comstart __P((struct tty *));
void com_absent_notify __P((struct com_softc *sc));
void comstart_pending __P((void *arg));
d169 1
a169 1
int cominit __P((bus_chipset_tag_t, bus_io_handle_t, int));
d208 3
a210 3
int com_pcmcia_match __P((struct device *, void *, void *));
void com_pcmcia_attach __P((struct device *, struct device *, void *));
int com_pcmcia_detach __P((struct device *));
d217 3
a219 5
int 
com_pcmcia_mod __P((struct pcmcia_link *pc_link,
		    struct device *self,
		    struct pcmcia_conf *pc_cf,
		    struct cfdata *cf));
a518 1
	struct cfdata *cf = match;
d548 1
a591 1
	struct cfdata *cf = sc->sc_dev.dv_cfdata;
a594 1
	struct tty *tp;
d725 1
a725 1
			(void) cominit(bc, ioh, kgdb_rate);
d1352 1
a1352 1
void
d1355 1
d1364 1
d1619 2
a1620 1
	bus_chipset_tag_t bc;
a1623 4
#if 0
	XXX NEEDS TO BE FIXED XXX
	bc = ???;
#endif
d1666 1
d1686 1
d1721 1
a1721 1
		(void) cominit(bc, ioh, comdefaultrate);
@


1.11
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: com.c,v 1.10 1996/04/18 23:47:32 niklas Exp $	*/
d84 1
a97 1
	bus_chipset_tag_t sc_bc;
d105 3
d131 2
d153 1
d160 4
d194 18
a211 2
/*#include "pcmciabus.h"*/
#if NPCMCIABUS >0                       
a212 1
#include <dev/pcmcia/pcmciabus.h>
d214 2
a215 2
static int 
commod(pc_link,self,pc_cf,cf)
d222 1
a222 1
    struct pcmciadevs *dev=pc_link->device;
d224 5
a228 4
    if(!(err=pc_link->adapter->bus_link->bus_config(pc_link,self,pc_cf,cf))) {
        pc_cf->memwin=0;
	if(pc_cf->cfgtype==0) 
	    pc_cf->cfgtype=CFGENTRYID; /* determine from ioaddr */
d232 5
d239 3
a241 2
} pcmcia_com= {
    "PCMCIA Modem card",commod,NULL,NULL,NULL
d243 4
a246 2
struct pcmciadevs pcmcia_com_devs[]={
  { "com", 0, 
d250 1
a250 1
  { "com", 0, 
d254 1
a254 1
  { "com", 0, 
d260 26
d287 102
d516 8
d529 2
a530 2
#if NCOM_ISA
	if (!strcmp(parent->dv_cfdata->cf_driver->cd_name, "isa")) {
d566 2
a567 2
#if NCOM_ISA
	if (rv && !strcmp(parent->dv_cfdata->cf_driver->cd_name, "isa")) {
d598 7
a604 1
	sc->sc_hwflags = 0;
d606 2
a607 2
#if NCOM_ISA
	if (!strcmp(parent->dv_cfdata->cf_driver->cd_name, "isa")) {
d636 1
a636 1
			sc->sc_hwflags |= COM_HW_NOIEN;
d701 2
a702 2
#if NCOM_ISA
		if (!strcmp(parent->dv_cfdata->cf_driver->cd_name, "isa")) {
d755 1
a755 1
	if (!sc)
d895 10
a904 7
	CLR(sc->sc_lcr, LCR_SBREAK);
	bus_io_write_1(bc, ioh, com_lcr, sc->sc_lcr);
	bus_io_write_1(bc, ioh, com_ier, 0);
	if (ISSET(tp->t_cflag, HUPCL) &&
	    !ISSET(sc->sc_swflags, COM_SW_SOFTCAR)) {
		/* XXX perhaps only clear DTR */
		bus_io_write_1(bc, ioh, com_mcr, 0);
d911 8
d937 7
d956 7
d1004 7
d1125 7
d1260 12
d1281 10
d1475 3
@


1.10
log
@NetBSD 960317 merge
@
text
@d1 2
a2 2
/*	$OpenBSD: com.c,v 1.9 1996/03/20 01:00:42 mickey Exp $	*/
/*	$NetBSD: com.c,v 1.75 1996/03/10 09:01:24 cgd Exp $	*/
d60 5
a64 1
#include <machine/cpu.h>
d76 2
a117 1
int comprobe __P((struct device *, void *, void *));
a120 1
void comattach __P((struct device *, struct device *, void *));
d129 18
a146 1
int cominit __P((bus_chipset_tag_t, bus_io_handle_t, int));
d148 2
a149 2
struct cfdriver comcd = {
	NULL, "com", comprobe, comattach, DV_TTY, sizeof(struct com_softc)
d152 2
d164 1
d184 1
a184 1
#include "pcmciabus.h"
d354 6
d366 4
a369 1
	} else {
d379 3
a381 1
	}
d396 1
d403 1
d423 5
d430 1
d445 4
a448 1
	} else {
d461 3
a463 1
	}
d524 12
a535 3
	if (irq != IRQUNK)
		sc->sc_ih = isa_intr_establish(irq, IST_EDGE, IPL_TTY,
		    comintr, sc, sc->sc_dev.dv_xname);
d576 1
a576 1
	if (unit >= comcd.cd_ndevs)
d578 1
a578 1
	sc = comcd.cd_devs[unit];
d595 4
a598 1
		tp->t_cflag = TTYDEF_CFLAG;
d707 1
a707 1
	struct com_softc *sc = comcd.cd_devs[unit];
d747 1
a747 1
	struct com_softc *sc = comcd.cd_devs[COMUNIT(dev)];
d759 1
a759 1
	struct com_softc *sc = comcd.cd_devs[COMUNIT(dev)];
d769 1
a769 1
	struct com_softc *sc = comcd.cd_devs[COMUNIT(dev)];
d797 1
a797 1
	struct com_softc *sc = comcd.cd_devs[unit];
d909 1
a909 1
	struct com_softc *sc = comcd.cd_devs[COMUNIT(tp->t_dev)];
d1048 1
a1048 1
	struct com_softc *sc = comcd.cd_devs[COMUNIT(tp->t_dev)];
d1169 2
a1170 2
	for (unit = 0; unit < comcd.cd_ndevs; unit++) {
		sc = comcd.cd_devs[unit];
@


1.9
log
@Fix back wrong patches.
@
text
@d1 2
a2 2
/*	$OpenBSD: com.c,v 1.8 1996/03/19 21:10:09 mickey Exp $	*/
/*	$NetBSD: com.c,v 1.65 1996/02/10 20:23:18 christos Exp $	*/
d5 2
a6 1
 * Copyright (c) 1993, 1994, 1995 Charles M. Hannum.  All rights reserved.
d61 1
a61 1
#include <machine/pio.h>
d65 1
d84 2
d90 5
d105 1
a105 1
	u_char sc_msr, sc_mcr, sc_lcr;
d113 3
d125 2
a130 1
int	comdefaultrate = TTYDEF_SPEED;
d132 1
a132 1
int	comconsole = COMCONSOLE;
d134 1
a134 1
int	comconsole = -1;
d136 1
d138 4
d230 3
a232 1
comprobe1(iobase)
d239 4
a242 4
	outb(iobase + com_lcr, 0);
	outb(iobase + com_iir, 0);
	for(i=0;i<32;i++) {
	    k=inb(iobase + com_iir);
d244 1
a244 1
		inb(iobase + com_data ); /* cleanup */
d248 1
a248 1
	if(i>=32) 
d256 2
a257 2
comprobeHAYESP(iobase, sc)
	int iobase;
d262 1
d272 1
a272 1
	if ((inb(iobase) & 0xf3) == 0)
d280 2
a281 2
	outb(iobase + HAYESP_CMD1, HAYESP_GETDIPS);
	dips = inb(iobase + HAYESP_STATUS1);
d292 3
a294 3
	outb(iobase + HAYESP_CMD1, HAYESP_GETTEST);
	val = inb(iobase + HAYESP_STATUS1);	/* Clear reg 1 */
	val = inb(iobase + HAYESP_STATUS2);
d314 1
a314 1
	printf(", 1024k fifo\n");
d324 17
a340 2
	struct isa_attach_args *ia = aux;
	int iobase = ia->ia_iobase;
d342 21
a362 2
	if (!comprobe1(iobase))
		return 0;
d364 4
a367 3
	ia->ia_iosize = COM_NPORTS;
	ia->ia_msize = 0;
	return 1;
a375 1
	struct isa_attach_args *ia = aux;
d377 3
a379 1
	int iobase = ia->ia_iobase;
d386 33
a419 2
	sc->sc_hwflags = ISSET(cf->cf_flags, COM_HW_NOIEN);
	sc->sc_swflags = 0;
d421 12
a432 2
	if (sc->sc_dev.dv_unit == comconsole)
		delay(1000);
d436 7
a442 2
	for (hayespp = hayesp_ports; *hayespp != 0; hayespp++)
		if (comprobeHAYESP(*hayespp, sc)) {
d444 1
d447 2
d454 1
a454 1
	outb(iobase + com_fifo,
d457 4
a460 2
	if (ISSET(inb(iobase + com_iir), IIR_FIFO_MASK) == IIR_FIFO_MASK)
		if (ISSET(inb(iobase + com_fifo), FIFO_TRIGGER_14) == FIFO_TRIGGER_14) {
d467 1
a467 1
	outb(iobase + com_fifo, 0);
d473 2
a474 2
	outb(iobase + com_ier, 0);
	outb(iobase + com_mcr, 0);
d476 2
a477 2
	if (ia->ia_irq != IRQUNK)
		sc->sc_ih = isa_intr_establish(ia->ia_irq, IST_EDGE, IPL_TTY,
d482 1
a482 1
		if (comconsole == unit)
d485 1
a485 1
			(void) cominit(unit, kgdb_rate);
d500 3
a502 9
	if (sc->sc_dev.dv_unit == comconsole) {
		/*
		 * Need to reset baud rate, etc. of next print so reset
		 * comconsinit.  Also make sure console is always "hardwired".
		 */
		comconsinit = 0;
		SET(sc->sc_hwflags, COM_HW_CONSOLE);
		SET(sc->sc_swflags, COM_SW_SOFTCAR);
	}
d513 2
a514 1
	int iobase;
d560 2
a561 1
		iobase = sc->sc_iobase;
d565 1
a565 1
			int hayespbase = sc->sc_hayespbase;
d567 1
a567 1
			outb(iobase + com_fifo,
d572 2
a573 2
			outb(hayespbase + HAYESP_CMD1, HAYESP_SETMODE);
			outb(hayespbase + HAYESP_CMD2, 
d578 3
a580 3
			outb(hayespbase + HAYESP_CMD1, HAYESP_SETFLOWTYPE);
			outb(hayespbase + HAYESP_CMD2, HAYESP_FLOW_RTS);
			outb(hayespbase + HAYESP_CMD2, HAYESP_FLOW_CTS);
d583 2
a584 2
			outb(hayespbase + HAYESP_CMD1, HAYESP_SETRXFLOW);
			outb(hayespbase + HAYESP_CMD2, 
d586 1
a586 1
			outb(hayespbase + HAYESP_CMD2,
d588 1
a588 1
			outb(hayespbase + HAYESP_CMD2,
d590 1
a590 1
			outb(hayespbase + HAYESP_CMD2,
d596 1
a596 1
			outb(iobase + com_fifo,
d600 2
a601 2
		while (ISSET(inb(iobase + com_lsr), LSR_RXRDY))
			(void) inb(iobase + com_data);
d606 3
a608 3
		outb(iobase + com_mcr, sc->sc_mcr);
		outb(iobase + com_ier,
		    IER_ERXRDY | IER_ETXRDY | IER_ERLS | IER_EMSC);
d610 1
a610 1
		sc->sc_msr = inb(iobase + com_msr);
d649 2
a650 1
	int iobase = sc->sc_iobase;
d660 2
a661 2
	outb(iobase + com_lcr, sc->sc_lcr);
	outb(iobase + com_ier, 0);
d665 1
a665 1
		outb(iobase + com_mcr, 0);
d673 1
a673 1
	if (unit != comconsole) {
d739 2
a740 1
	int iobase = sc->sc_iobase;
d753 1
a753 1
		outb(iobase + com_lcr, sc->sc_lcr);
d757 1
a757 1
		outb(iobase + com_lcr, sc->sc_lcr);
d761 1
a761 1
		outb(iobase + com_mcr, sc->sc_mcr);
d765 1
a765 1
		outb(iobase + com_mcr, sc->sc_mcr);
d771 1
a771 1
		outb(iobase + com_mcr, sc->sc_mcr);
d775 1
a775 1
		outb(iobase + com_mcr, sc->sc_mcr);
d795 1
a795 1
		if (inb(iobase + com_ier))
d850 2
a851 1
	int iobase = sc->sc_iobase;
d861 1
a861 1
	lcr = sc->sc_lcr & LCR_SBREAK;
d891 1
a891 1
		outb(iobase + com_mcr, sc->sc_mcr);
d898 1
d900 38
a937 2
		if (ISSET(sc->sc_hwflags, COM_HW_FIFO))
			outb(iobase + com_fifo,
a939 9
	}

	if (ospeed != 0) {
		outb(iobase + com_lcr, lcr | LCR_DLAB);
		outb(iobase + com_dlbl, ospeed);
		outb(iobase + com_dlbh, ospeed >> 8);
		outb(iobase + com_lcr, lcr);
		SET(sc->sc_mcr, MCR_DTR);
		outb(iobase + com_mcr, sc->sc_mcr);
d941 1
a941 1
		outb(iobase + com_lcr, lcr);
d948 1
a948 1
				outb(iobase + com_mcr, sc->sc_mcr);
d953 1
a953 1
				outb(iobase + com_mcr, sc->sc_mcr);
d975 1
a975 1
		outb(iobase + com_mcr, sc->sc_mcr);
d978 1
d980 1
d989 2
a990 1
	int iobase = sc->sc_iobase;
d994 1
a994 1
	if (ISSET(tp->t_state, TS_TTSTOP | TS_BUSY))
d996 3
d1000 1
a1000 1
		goto out;
d1007 1
a1007 1
			goto out;
d1012 4
d1021 1
a1021 1
			outb(iobase + com_data, *cp++);
d1030 1
a1030 1
			outb(iobase + com_data, *cp++);
d1033 1
a1033 1
		outb(iobase + com_data, getc(&tp->t_outq));
d1036 7
d1140 2
a1141 1
			outb(sc->sc_iobase + com_mcr, sc->sc_mcr);
d1168 2
a1169 1
	int iobase = sc->sc_iobase;
d1172 6
d1179 6
a1184 1
	if (ISSET(inb(iobase + com_iir), IIR_NOPEND))
d1186 1
d1191 4
a1194 1
		lsr = inb(iobase + com_lsr);
d1196 1
a1196 1
		if (ISSET(lsr, LSR_RCV_MASK)) {
d1201 1
a1201 2
				data = ISSET(lsr, LSR_RXRDY) ?
				    inb(iobase + com_data) : 0;
d1203 5
d1209 2
a1210 1
					if (sc->sc_dev.dv_unit == comconsole) {
a1214 1
					data = '\0';
d1227 2
a1228 2
						outb(iobase + com_mcr,
						     sc->sc_mcr);
d1232 7
a1238 2
				lsr = inb(iobase + com_lsr);
			} while (ISSET(lsr, LSR_RCV_MASK));
d1242 1
a1242 1
#if 0
d1247 4
a1250 1
		msr = inb(iobase + com_msr);
d1259 1
a1259 1
				outb(iobase + com_mcr, sc->sc_mcr);
d1269 4
a1272 5
			CLR(tp->t_state, TS_BUSY);
			if (ISSET(tp->t_state, TS_FLUSH))
				CLR(tp->t_state, TS_FLUSH);
			else
				(*linesw[tp->t_line].l_start)(tp);
d1275 7
a1281 1
		if (ISSET(inb(iobase + com_iir), IIR_NOPEND))
d1283 1
d1285 14
d1310 3
d1314 11
a1324 1
	if (!comprobe1(CONADDR)) {
d1348 9
a1356 2
	cominit(CONUNIT, comdefaultrate);
	comconsole = CONUNIT;
d1360 4
a1363 2
cominit(unit, rate)
	int unit, rate;
a1365 1
	int iobase = CONADDR;
d1368 1
a1368 1
	outb(iobase + com_lcr, LCR_DLAB);
d1370 6
a1375 6
	outb(iobase + com_dlbl, rate);
	outb(iobase + com_dlbh, rate >> 8);
	outb(iobase + com_lcr, LCR_8BITS);
	outb(iobase + com_ier, IER_ERXRDY | IER_ETXRDY);
	outb(iobase + com_fifo, FIFO_ENABLE | FIFO_RCV_RST | FIFO_XMT_RST | FIFO_TRIGGER_4);
	stat = inb(iobase + com_iir);
d1383 2
a1384 1
	int iobase = CONADDR;
d1387 1
a1387 1
	while (!ISSET(stat = inb(iobase + com_lsr), LSR_RXRDY))
d1389 2
a1390 2
	c = inb(iobase + com_data);
	stat = inb(iobase + com_iir);
d1404 2
a1405 1
	int iobase = CONADDR;
d1413 1
a1413 1
		(void) cominit(COMUNIT(dev), comdefaultrate);
d1418 1
a1418 1
	while (!ISSET(stat = inb(iobase + com_lsr), LSR_TXRDY) && --timo)
d1420 1
a1420 1
	outb(iobase + com_data, c);
d1423 1
a1423 1
	while (!ISSET(stat = inb(iobase + com_lsr), LSR_TXRDY) && --timo)
d1426 1
a1426 1
	stat = inb(iobase + com_iir);
@


1.8
log
@Merging w/ NetBSD 021796.
speaker upgraded to the current.
some changes to the VM stuff (ie kern_thread.c added and so).
@
text
@d1 1
a1 1
/*	$OpenBSD: com.c,v 1.7 1996/03/08 16:42:51 niklas Exp $	*/
d370 1
a370 1
		    comintr, sc);
@


1.7
log
@From NetBSD: merge of 960217
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d370 1
a370 1
		    comintr, sc, sc->sc_dev.dv_xname);
@


1.6
log
@Pass device name to interrupt establish routines so it can be recorded in
the device interrupt chain structures (isa, pci)

Move interrupt chain structure definition to <machine/psl.h> so vmstat can
get at it (i386)

Remove hack to count interrupts the old way (i386)
@
text
@d1 2
a2 1
/*	$NetBSD: com.c,v 1.62 1995/10/15 19:43:04 mycroft Exp $	*/
d65 3
a67 1
#include <dev/ic/espreg.h>
d70 1
a70 1
#define	COM_IBUFSIZE	(2 * 256)
d83 3
a85 1
	int sc_espbase;
d89 1
a89 1
#define	COM_HW_ESP	0x04
d234 1
d236 3
a238 3
comprobe(parent, match, aux)
	struct device *parent;
	void *match, *aux;
d240 9
a248 2
	struct isa_attach_args *ia = aux;
	int iobase = ia->ia_iobase;
d250 2
a251 1
	if (!comprobe1(iobase))
d254 3
a256 4
	ia->ia_iosize = COM_NPORTS;
	ia->ia_msize = 0;
	return 1;
}
d258 8
a265 7
int
comprobeESP(esp_port, sc)
	int esp_port;
	struct com_softc *sc;
{
	char	val, dips;
	int	com_base_list[] = { 0x3f8, 0x2f8, 0x3e8, 0x2e8 };
a266 12
	/* Test for ESP signature at the ESP i/o port. */
	if ((inb(esp_port) & 0xf3) == 0)
		return(0);

	/* Check compatibility mode settings */
	outb(esp_port + ESP_CMD1, ESP_GETDIPS);
	dips = inb(esp_port + ESP_STATUS1);

	/* Does this ESP board service this com port?: Bits 0,1 == COM0..3 */
	if (sc->sc_iobase != com_base_list[(dips & 0x03)]) {
		return(0);
	}
d269 1
a269 1
	/* Check ESP Self Test bits. */
d271 3
a273 3
	outb(esp_port + ESP_CMD1, ESP_GETTEST);
	val = inb(esp_port + ESP_STATUS1);	/* Always 0x00 */
	val = inb(esp_port + ESP_STATUS2);
d276 2
a277 1
		return(0);
d280 2
a281 2
	/* Check for ability to emulate 16550: bit 7 set */
	if (ISSET(dips, 0x80) == 0) {
d283 2
a284 1
		return(0);
d287 25
a311 4
	/* We're a full featured ESP card at the right com port. */
	SET(sc->sc_hwflags, COM_HW_ESP);
	printf(", 1024 byte fifo\n");
	return(1);
d324 4
a327 2
	int	esp_ports[] = { 0x140, 0x180, 0x280, 0 };
	int	*espp;
d336 1
d338 3
a340 3
	for (espp = esp_ports; *espp != 0; espp++)
		if (comprobeESP(*espp, sc)) {
			sc->sc_espbase = *espp;
d344 17
a360 15
	if (*espp == 0) {
		/* look for a NS 16550AF UART with FIFOs */
		outb(iobase + com_fifo,
		    FIFO_ENABLE | FIFO_RCV_RST | FIFO_XMT_RST | FIFO_TRIGGER_14);
		delay(100);
		if (ISSET(inb(iobase + com_iir), IIR_FIFO_MASK) == IIR_FIFO_MASK)
			if (ISSET(inb(iobase + com_fifo), FIFO_TRIGGER_14) ==
			    FIFO_TRIGGER_14) {
				SET(sc->sc_hwflags, COM_HW_FIFO);
				printf(": ns16550a, working fifo\n");
			} else
				printf(": ns16550, broken fifo\n");
		else
			printf(": ns8250 or ns16450, no fifo\n");
		outb(iobase + com_fifo, 0);
d362 1
d458 4
a462 2
		/* Set up the ESP board */
		if (ISSET(sc->sc_hwflags, COM_HW_ESP)) {
d464 2
a465 4
			    /* XXX - bug in ESP requires DMA flag set */
			    FIFO_DMA_MODE |
			    FIFO_ENABLE | FIFO_RCV_RST |
			    FIFO_XMT_RST | FIFO_TRIGGER_8);
d468 4
a471 3
			outb(sc->sc_espbase + ESP_CMD1, ESP_SETMODE);
			outb(sc->sc_espbase + ESP_CMD2,
				ESP_MODE_FIFO | ESP_MODE_RTS | ESP_MODE_SCALE);
d474 3
a476 3
			outb(sc->sc_espbase + ESP_CMD1, ESP_SETFLOWTYPE);
			outb(sc->sc_espbase + ESP_CMD2, ESP_FLOW_RTS);
			outb(sc->sc_espbase + ESP_CMD2, ESP_FLOW_CTS);
d479 12
a490 6
			outb(sc->sc_espbase + ESP_CMD1, ESP_SETRXFLOW);
			outb(sc->sc_espbase + ESP_CMD2, HIBYTE(RXHIGHWATER));
			outb(sc->sc_espbase + ESP_CMD2, LOBYTE(RXHIGHWATER));
			outb(sc->sc_espbase + ESP_CMD2, HIBYTE(RXLOWWATER));
			outb(sc->sc_espbase + ESP_CMD2, LOBYTE(RXLOWWATER));
		} else if (ISSET(sc->sc_hwflags, COM_HW_FIFO))
d870 3
a872 1
	if (ISSET(sc->sc_hwflags, COM_HW_ESP)) {
d875 1
a875 1
		do {
d877 5
a881 2
		} while (--n);
	} else if (ISSET(sc->sc_hwflags, COM_HW_FIFO)) {
@


1.5
log
@Last of the glue and devices for for PCMCIA support from Stefan Grefen
<grefen@@convex.com> with modifications by John Kohl <jtk@@kolvir.blrc.ma.us>
@
text
@d339 1
a339 1
		    comintr, sc);
@


1.4
log
@Patches to use Hayes ESP with com.c; from banshee@@gabriella.resort.com;
netbsd pr#1865. the ESP card code is always enabled -- we will have to
see if that fails on any chipsets.
@
text
@d137 44
d210 2
d216 9
a224 2
	if (inb(iobase + com_iir) & 0x38)
		return 0;
@


1.3
log
@from netbsd:
The IST_* and IPL_* constants are not bus-specific; don't treat them as such.
Change splimp -> splnet in Ethernet, ARCnet, and FDDI drivers.
@
text
@d64 1
d80 1
d84 1
d192 44
d246 2
d256 23
a278 13
	/* look for a NS 16550AF UART with FIFOs */
	outb(iobase + com_fifo,
	    FIFO_ENABLE | FIFO_RCV_RST | FIFO_XMT_RST | FIFO_TRIGGER_14);
	delay(100);
	if (ISSET(inb(iobase + com_iir), IIR_FIFO_MASK) == IIR_FIFO_MASK)
		if (ISSET(inb(iobase + com_fifo), FIFO_TRIGGER_14) == FIFO_TRIGGER_14) {
			SET(sc->sc_hwflags, COM_HW_FIFO);
			printf(": ns16550a, working fifo\n");
		} else
			printf(": ns16550, broken fifo\n");
	else
		printf(": ns8250 or ns16450, no fifo\n");
	outb(iobase + com_fifo, 0);
d374 27
a400 2
		/* Set the FIFO threshold based on the receive speed. */
		if (ISSET(sc->sc_hwflags, COM_HW_FIFO))
d779 7
a785 1
	if (ISSET(sc->sc_hwflags, COM_HW_FIFO)) {
@


1.2
log
@update from netbsd
@
text
@d226 2
a227 2
		sc->sc_ih = isa_intr_establish(ia->ia_irq, ISA_IST_EDGE,
		    ISA_IPL_TTY, comintr, sc);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: com.c,v 1.61 1995/07/04 06:47:18 mycroft Exp $	*/
d64 1
d88 1
a88 1
	u_char sc_msr, sc_mcr;
d129 4
a132 4
#define	bis(c, b)	do { const register int com_ad = (c); \
			     outb(com_ad, inb(com_ad) | (b)); } while(0)
#define	bic(c, b)	do { const register int com_ad = (c); \
			     outb(com_ad, inb(com_ad) & ~(b)); } while(0)
d165 1
a165 1
	outb(iobase + com_cfcr, 0);
d201 1
a201 1
	sc->sc_hwflags = cf->cf_flags & COM_HW_NOIEN;
d211 3
a213 3
	if ((inb(iobase + com_iir) & IIR_FIFO_MASK) == IIR_FIFO_MASK)
		if ((inb(iobase + com_fifo) & FIFO_TRIGGER_14) == FIFO_TRIGGER_14) {
			sc->sc_hwflags |= COM_HW_FIFO;
d255 2
a256 2
		sc->sc_hwflags |= COM_HW_CONSOLE;
		sc->sc_swflags |= COM_SW_SOFTCAR;
d287 2
a288 2
	if ((tp->t_state & TS_ISOPEN) == 0) {
		tp->t_state |= TS_WOPEN;
d293 6
a298 6
		if (sc->sc_swflags & COM_SW_CLOCAL)
			tp->t_cflag |= CLOCAL;
		if (sc->sc_swflags & COM_SW_CRTSCTS)
			tp->t_cflag |= CRTSCTS;
		if (sc->sc_swflags & COM_SW_MDMBUF)
			tp->t_cflag |= MDMBUF;
d316 1
a316 1
		if (sc->sc_hwflags & COM_HW_FIFO)
d321 1
a321 1
		while (inb(iobase + com_lsr) & LSR_RXRDY)
d325 2
a326 2
		if ((sc->sc_hwflags & COM_HW_NOIEN) == 0)
			sc->sc_mcr |= MCR_IENABLE;
d332 3
a334 3
		if (sc->sc_swflags & COM_SW_SOFTCAR || sc->sc_msr & MSR_DCD ||
		    tp->t_cflag & MDMBUF)
			tp->t_state |= TS_CARR_ON;
d336 2
a337 2
			tp->t_state &= ~TS_CARR_ON;
	} else if (tp->t_state&TS_XCLUDE && p->p_ucred->cr_uid != 0) {
d339 1
a339 1
	} else
d343 6
a348 6
	if ((flag & O_NONBLOCK) == 0)
		while ((tp->t_cflag & CLOCAL) == 0 &&
		    (tp->t_state & TS_CARR_ON) == 0) {
			tp->t_state |= TS_WOPEN;
			error = ttysleep(tp, (caddr_t)&tp->t_rawq, 
			    TTIPRI | PCATCH, ttopen, 0);
d374 1
a374 1
	if ((tp->t_state & TS_ISOPEN) == 0)
d379 2
a380 1
	bic(iobase + com_cfcr, CFCR_SBREAK);
d382 2
a383 2
	if (tp->t_cflag & HUPCL &&
	    (sc->sc_swflags & COM_SW_SOFTCAR) == 0) {
d387 1
a387 1
	tp->t_state &= ~(TS_BUSY | TS_FLUSH);
d441 4
a444 4
	if (data & TIOCM_DTR)
		m |= MCR_DTR;
	if (data & TIOCM_RTS)
		m |= MCR_RTS;
d471 2
a472 1
		bis(iobase + com_cfcr, CFCR_SBREAK);
d475 2
a476 1
		bic(iobase + com_cfcr, CFCR_SBREAK);
d479 2
a480 1
		outb(iobase + com_mcr, sc->sc_mcr |= sc->sc_dtr);
d483 2
a484 1
		outb(iobase + com_mcr, sc->sc_mcr &= ~sc->sc_dtr);
d487 1
a487 1
		sc->sc_mcr &= ~(MCR_DTR | MCR_RTS);
d489 2
a490 2
		outb(iobase + com_mcr,
		    sc->sc_mcr |= tiocm_xxx2mcr(*(int *)data));
d493 2
a494 2
		outb(iobase + com_mcr,
		    sc->sc_mcr &= ~tiocm_xxx2mcr(*(int *)data));
d501 4
a504 4
		if (m & MCR_DTR)
			bits |= TIOCM_DTR;
		if (m & MCR_RTS)
			bits |= TIOCM_RTS;
d506 8
a513 8
		if (m & MSR_DCD)
			bits |= TIOCM_CD;
		if (m & MSR_CTS)
			bits |= TIOCM_CTS;
		if (m & MSR_DSR)
			bits |= TIOCM_DSR;
		if (m & (MSR_RI | MSR_TERI))
			bits |= TIOCM_RI;
d515 1
a515 1
			bits |= TIOCM_LE;
d520 1
a520 1
		int bits = 0;
d522 9
a530 8
		if (sc->sc_swflags & COM_SW_SOFTCAR)
			bits |= TIOCFLAG_SOFTCAR;
		if (sc->sc_swflags & COM_SW_CLOCAL)
			bits |= TIOCFLAG_CLOCAL;
		if (sc->sc_swflags & COM_SW_CRTSCTS)
			bits |= TIOCFLAG_CRTSCTS;
		if (sc->sc_swflags & COM_SW_MDMBUF)
			bits |= TIOCFLAG_MDMBUF;
d532 1
a532 1
		*(int *)data = bits;
d543 9
a551 9
		if ((userbits & TIOCFLAG_SOFTCAR) ||
		    (sc->sc_hwflags & COM_HW_CONSOLE))
			driverbits |= COM_SW_SOFTCAR;
		if (userbits & TIOCFLAG_CLOCAL)
			driverbits |= COM_SW_CLOCAL;
		if (userbits & TIOCFLAG_CRTSCTS)
			driverbits |= COM_SW_CRTSCTS;
		if (userbits & TIOCFLAG_MDMBUF)
			driverbits |= COM_SW_MDMBUF;
d571 1
a571 1
	u_char cfcr;
d579 3
a581 1
	switch (t->c_cflag & CSIZE) {
d583 1
a583 1
		cfcr = CFCR_5BITS;
d586 1
a586 1
		cfcr = CFCR_6BITS;
d589 1
a589 1
		cfcr = CFCR_7BITS;
d592 1
a592 1
		cfcr = CFCR_8BITS;
d595 4
a598 4
	if (t->c_cflag & PARENB) {
		cfcr |= CFCR_PENAB;
		if ((t->c_cflag & PARODD) == 0)
			cfcr |= CFCR_PEVEN;
d600 4
a603 2
	if (t->c_cflag & CSTOPB)
		cfcr |= CFCR_STOPB;
d607 4
a610 2
	if (ospeed == 0)
		outb(iobase + com_mcr, sc->sc_mcr &= ~MCR_DTR);
d617 1
a617 1
		if (sc->sc_hwflags & COM_HW_FIFO)
d624 1
a624 1
		outb(iobase + com_cfcr, cfcr | CFCR_DLAB);
d627 3
a629 2
		outb(iobase + com_cfcr, cfcr);
		outb(iobase + com_mcr, sc->sc_mcr |= MCR_DTR);
d631 1
a631 1
		outb(iobase + com_cfcr, cfcr);
d634 6
a639 4
	if ((t->c_cflag & CRTSCTS) == 0) {
		if (sc->sc_mcr & MCR_DTR) {
			if ((sc->sc_mcr & MCR_RTS) == 0)
				outb(iobase + com_mcr, sc->sc_mcr |= MCR_RTS);
d641 4
a644 2
			if (sc->sc_mcr & MCR_RTS)
				outb(iobase + com_mcr, sc->sc_mcr &= ~MCR_RTS);
d660 3
a662 3
	if ((sc->sc_msr & MSR_DCD) == 0 &&
	    (sc->sc_swflags & COM_SW_SOFTCAR) == 0 &&
	    (oldcflag & MDMBUF) != (tp->t_cflag & MDMBUF) &&
d664 2
a665 1
		outb(iobase + com_mcr, sc->sc_mcr &= ~sc->sc_dtr);
d681 1
a681 1
	if (tp->t_state & (TS_TTSTOP | TS_BUSY))
d683 1
a683 2
	if ((tp->t_cflag & CRTSCTS) != 0 &&
	    (sc->sc_msr & MSR_CTS) == 0)
d686 3
a688 3
		if (tp->t_state & TS_ASLEEP) {
			tp->t_state &= ~TS_ASLEEP;
			wakeup((caddr_t)&tp->t_outq);
d694 2
a695 2
	tp->t_state |= TS_BUSY;
	if (sc->sc_hwflags & COM_HW_FIFO) {
d717 3
a719 3
	if (tp->t_state & TS_BUSY)
		if ((tp->t_state & TS_TTSTOP) == 0)
			tp->t_state |= TS_FLUSH;
d793 1
a793 1
		if (tp == 0 || (tp->t_state & TS_ISOPEN) == 0) {
d798 6
a803 3
		if ((tp->t_cflag & CRTSCTS) != 0 &&
		    (sc->sc_mcr & MCR_RTS) == 0)
			outb(sc->sc_iobase + com_mcr, sc->sc_mcr |= MCR_RTS);
d833 1
a833 1
	if (inb(iobase + com_iir) & IIR_NOPEND)
d841 1
a841 1
		if (lsr & LSR_RCV_MASK) {
d846 3
a848 1
				if ((lsr & LSR_BI) != 0) {
d856 1
a856 2
				} else
					data = inb(iobase + com_data);
d865 3
a867 1
					    (tp->t_cflag & CRTSCTS) != 0)
d869 2
a870 1
						     sc->sc_mcr &= ~MCR_RTS);
d874 1
a874 1
			} while (lsr & LSR_RCV_MASK);
d878 4
a881 8

		if (lsr & LSR_TXRDY && (tp->t_state & TS_BUSY) != 0) {
			tp->t_state &= ~TS_BUSY;
			if (tp->t_state & TS_FLUSH)
				tp->t_state &= ~TS_FLUSH;
			else
				(*linesw[tp->t_line].l_start)(tp);
		}
d888 5
a892 4
			if ((delta & MSR_DCD) != 0 &&
			    (sc->sc_swflags & COM_SW_SOFTCAR) == 0 &&
			    (*linesw[tp->t_line].l_modem)(tp, (msr & MSR_DCD) != 0) == 0) {
				outb(iobase + com_mcr, sc->sc_mcr &= ~sc->sc_dtr);
d894 2
a895 2
			if ((delta & msr & MSR_CTS) != 0 &&
			    (tp->t_cflag & CRTSCTS) != 0) {
d901 9
a909 1
		if (inb(iobase + com_iir) & IIR_NOPEND)
d960 1
a960 1
	outb(iobase + com_cfcr, CFCR_DLAB);
d964 1
a964 1
	outb(iobase + com_cfcr, CFCR_8BITS);
d978 1
a978 1
	while (((stat = inb(iobase + com_lsr)) & LSR_RXRDY) == 0)
d1008 1
a1008 1
	while (((stat = inb(iobase + com_lsr)) & LSR_TXRDY) == 0 && --timo)
d1013 1
a1013 1
	while (((stat = inb(iobase + com_lsr)) & LSR_TXRDY) == 0 && --timo)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
