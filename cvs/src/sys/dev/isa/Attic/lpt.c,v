head	1.21;
access;
symbols
	SMP_SYNC_A:1.21
	SMP_SYNC_B:1.21
	UBC_SYNC_A:1.21
	UBC_SYNC_B:1.21
	SMP:1.21.0.2
	OPENBSD_2_0:1.18.0.2
	OPENBSD_2_0_BASE:1.18
	netbsd:1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	96.11.30.00.53.37;	author niklas;	state dead;
branches;
next	1.20;

1.20
date	96.11.29.22.55.04;	author niklas;	state Exp;
branches;
next	1.19;

1.19
date	96.11.12.20.30.41;	author niklas;	state Exp;
branches;
next	1.18;

1.18
date	96.06.30.03.51.55;	author dm;	state Exp;
branches;
next	1.17;

1.17
date	96.06.27.21.19.45;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	96.06.27.21.15.51;	author shawn;	state Exp;
branches;
next	1.15;

1.15
date	96.06.25.20.59.05;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	96.06.24.20.48.33;	author pefo;	state Exp;
branches;
next	1.13;

1.13
date	96.06.23.12.53.08;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	96.06.22.23.13.36;	author pefo;	state Exp;
branches;
next	1.11;

1.11
date	96.05.26.00.27.24;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	96.05.07.07.37.16;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	96.04.21.22.24.18;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	96.04.18.23.47.43;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	96.03.20.01.00.55;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	96.03.19.21.10.24;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	96.03.08.16.43.08;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.02.20.21.57.56;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.02.20.04.36.00;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.12.27.22.06.31;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.36;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.36;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Cleaned up.  lpt is MI now.
@
text
@/*	$OpenBSD: lpt.c,v 1.20 1996/11/29 22:55:04 niklas Exp $ */
/*	$NetBSD: lpt.c,v 1.42 1996/10/21 22:41:14 thorpej Exp $	*/

/*
 * Copyright (c) 1993, 1994 Charles Hannum.
 * Copyright (c) 1990 William F. Jolitz, TeleMuse
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This software is a component of "386BSD" developed by 
 *	William F. Jolitz, TeleMuse.
 * 4. Neither the name of the developer nor the name "386BSD"
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS A COMPONENT OF 386BSD DEVELOPED BY WILLIAM F. JOLITZ 
 * AND IS INTENDED FOR RESEARCH AND EDUCATIONAL PURPOSES ONLY. THIS 
 * SOFTWARE SHOULD NOT BE CONSIDERED TO BE A COMMERCIAL PRODUCT. 
 * THE DEVELOPER URGES THAT USERS WHO REQUIRE A COMMERCIAL PRODUCT 
 * NOT MAKE USE OF THIS WORK.
 *
 * FOR USERS WHO WISH TO UNDERSTAND THE 386BSD SYSTEM DEVELOPED
 * BY WILLIAM F. JOLITZ, WE RECOMMEND THE USER STUDY WRITTEN 
 * REFERENCES SUCH AS THE  "PORTING UNIX TO THE 386" SERIES 
 * (BEGINNING JANUARY 1991 "DR. DOBBS JOURNAL", USA AND BEGINNING 
 * JUNE 1991 "UNIX MAGAZIN", GERMANY) BY WILLIAM F. JOLITZ AND 
 * LYNNE GREER JOLITZ, AS WELL AS OTHER BOOKS ON UNIX AND THE 
 * ON-LINE 386BSD USER MANUAL BEFORE USE. A BOOK DISCUSSING THE INTERNALS 
 * OF 386BSD ENTITLED "386BSD FROM THE INSIDE OUT" WILL BE AVAILABLE LATE 1992.
 *
 * THIS SOFTWARE IS PROVIDED BY THE DEVELOPER ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE DEVELOPER BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Device Driver for AT parallel printer port
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/user.h>
#include <sys/buf.h>
#include <sys/kernel.h>
#include <sys/ioctl.h>
#include <sys/uio.h>
#include <sys/device.h>
#include <sys/conf.h>
#include <sys/syslog.h>

#include <machine/bus.h>
#include <machine/intr.h>

#include <dev/isa/isavar.h>
#include <dev/isa/lptreg.h>

#include "lpt.h"

#define	TIMEOUT		hz*16	/* wait up to 16 seconds for a ready */
#define	STEP		hz/4

#define	LPTPRI		(PZERO+8)
#define	LPT_BSIZE	1024

#if !defined(DEBUG) || !defined(notdef)
#define LPRINTF(a)
#else
#define LPRINTF		if (lptdebug) printf a
int lptdebug = 1;
#endif

struct lpt_softc {
	struct device sc_dev;
	void *sc_ih;

	size_t sc_count;
	struct buf *sc_inbuf;
	u_char *sc_cp;
	int sc_spinmax;
	int sc_iobase;
	bus_space_tag_t sc_iot;
	bus_space_handle_t sc_ioh;
	int sc_irq;
	u_char sc_state;
#define	LPT_OPEN	0x01	/* device is open */
#define	LPT_OBUSY	0x02	/* printer is busy doing output */
#define	LPT_INIT	0x04	/* waiting to initialize for open */
	u_char sc_flags;
#define	LPT_AUTOLF	0x20	/* automatic LF on CR */
#define	LPT_NOPRIME	0x40	/* don't prime on open */
#define	LPT_NOINTR	0x80	/* do not use interrupt */
	u_char sc_control;
	u_char sc_laststatus;
};

/* XXX does not belong here */
cdev_decl(lpt);

int lptintr __P((void *));

#if NLPT_ISA
int lpt_isa_probe __P((struct device *, void *, void *));
void lpt_isa_attach __P((struct device *, struct device *, void *));
struct cfattach lpt_isa_ca = {
	sizeof(struct lpt_softc), lpt_isa_probe, lpt_isa_attach
};
#endif

struct cfdriver lpt_cd = {
	NULL, "lpt", DV_TTY
};

#define	LPTUNIT(s)	(minor(s) & 0x1f)
#define	LPTFLAGS(s)	(minor(s) & 0xe0)

#define	LPS_INVERT	(LPS_SELECT|LPS_NERR|LPS_NBSY|LPS_NACK)
#define	LPS_MASK	(LPS_SELECT|LPS_NERR|LPS_NBSY|LPS_NACK|LPS_NOPAPER)
#define	NOT_READY()	((bus_space_read_1(iot, ioh, lpt_status) ^ LPS_INVERT) & LPS_MASK)
#define	NOT_READY_ERR()	not_ready(bus_space_read_1(iot, ioh, lpt_status), sc)
static int not_ready __P((u_char, struct lpt_softc *));

static void lptwakeup __P((void *arg));
static int pushbytes __P((struct lpt_softc *));

int	lpt_port_test __P((bus_space_tag_t, bus_space_handle_t, bus_addr_t,
	    bus_size_t, u_char, u_char));

/*
 * Internal routine to lptprobe to do port tests of one byte value.
 */
int
lpt_port_test(iot, ioh, base, off, data, mask)
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	bus_addr_t base;
	bus_size_t off;
	u_char data, mask;
{
	int timeout;
	u_char temp;

	data &= mask;
	bus_space_write_1(iot, ioh, off, data);
	timeout = 1000;
	do {
		delay(10);
		temp = bus_space_read_1(iot, ioh, off) & mask;
	} while (temp != data && --timeout);
	LPRINTF(("lpt: port=0x%x out=0x%x in=0x%x timeout=%d\n", base + off,
	    data, temp, timeout));
	return (temp == data);
}

/*
 * Logic:
 *	1) You should be able to write to and read back the same value
 *	   to the data port.  Do an alternating zeros, alternating ones,
 *	   walking zero, and walking one test to check for stuck bits.
 *
 *	2) You should be able to write to and read back the same value
 *	   to the control port lower 5 bits, the upper 3 bits are reserved
 *	   per the IBM PC technical reference manauls and different boards
 *	   do different things with them.  Do an alternating zeros, alternating
 *	   ones, walking zero, and walking one test to check for stuck bits.
 *
 *	   Some printers drag the strobe line down when the are powered off
 * 	   so this bit has been masked out of the control port test.
 *
 *	   XXX Some printers may not like a fast pulse on init or strobe, I
 *	   don't know at this point, if that becomes a problem these bits
 *	   should be turned off in the mask byte for the control port test.
 *
 *	3) Set the data and control ports to a value of 0
 */
#if NLPT_ISA
int
lpt_isa_probe(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct isa_attach_args *ia = aux;
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	u_long base;
	u_char mask, data;
	int i, rv;

#ifdef DEBUG
#define	ABORT								     \
	do {								     \
		printf("lpt_isa_probe: mask %x data %x failed\n", mask,	     \
		    data);						     \
		goto out;						     \
	} while (0)
#else
#define	ABORT	goto out
#endif

	iot = ia->ia_iot;
	base = ia->ia_iobase;
	if (bus_space_map(iot, base, LPT_NPORTS, 0, &ioh))
		return 0;

	rv = 0;
	mask = 0xff;

	data = 0x55;				/* Alternating zeros */
	if (!lpt_port_test(iot, ioh, base, lpt_data, data, mask))
		ABORT;

	data = 0xaa;				/* Alternating ones */
	if (!lpt_port_test(iot, ioh, base, lpt_data, data, mask))
		ABORT;

	for (i = 0; i < CHAR_BIT; i++) {	/* Walking zero */
		data = ~(1 << i);
		if (!lpt_port_test(iot, ioh, base, lpt_data, data, mask))
			ABORT;
	}

	for (i = 0; i < CHAR_BIT; i++) {	/* Walking one */
		data = (1 << i);
		if (!lpt_port_test(iot, ioh, base, lpt_data, data, mask))
			ABORT;
	}

	bus_space_write_1(iot, ioh, lpt_data, 0);
	bus_space_write_1(iot, ioh, lpt_control, 0);

	ia->ia_iosize = LPT_NPORTS;
	ia->ia_msize = 0;

	rv = 1;

out:
	bus_space_unmap(iot, ioh, LPT_NPORTS);
	return rv;
}
#endif

#if NLPT_ISA
void
lpt_isa_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct lpt_softc *sc = (void *)self;
	struct isa_attach_args *ia = aux;
	bus_space_tag_t iot;
	bus_space_handle_t ioh;

	if (ia->ia_irq != IRQUNK)
		printf("\n");
	else
		printf(": polled\n");

	sc->sc_iobase = ia->ia_iobase;
	sc->sc_irq = ia->ia_irq;
	sc->sc_state = 0;

	iot = sc->sc_iot = ia->ia_iot;
	if (bus_space_map(iot, sc->sc_iobase, LPT_NPORTS, 0, &ioh))
		panic("lpt_isa_attach: couldn't map I/O ports");
	sc->sc_ioh = ioh;

	bus_space_write_1(iot, ioh, lpt_control, LPC_NINIT);

	if (ia->ia_irq != IRQUNK)
		sc->sc_ih = isa_intr_establish(ia->ia_ic, ia->ia_irq, IST_EDGE,
		    IPL_TTY, lptintr, sc, sc->sc_dev.dv_xname);
}
#endif

/*
 * Reset the printer, then wait until it's selected and not busy.
 */
int
lptopen(dev, flag, mode, p)
	dev_t dev;
	int flag;
	int mode;
	struct proc *p;
{
	int unit = LPTUNIT(dev);
	u_char flags = LPTFLAGS(dev);
	struct lpt_softc *sc;
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
	u_char control;
	int error;
	int spin;

	if (unit >= lpt_cd.cd_ndevs)
		return ENXIO;
	sc = lpt_cd.cd_devs[unit];
	if (!sc)
		return ENXIO;

	if (sc->sc_irq == IRQUNK && (flags & LPT_NOINTR) == 0)
		return ENXIO;

#ifdef DIAGNOSTIC
	if (sc->sc_state)
		printf("%s: stat=0x%x not zero\n", sc->sc_dev.dv_xname,
		    sc->sc_state);
#endif

	if (sc->sc_state)
		return EBUSY;

	sc->sc_state = LPT_INIT;
	sc->sc_flags = flags;
	LPRINTF(("%s: open: flags=0x%x\n", sc->sc_dev.dv_xname, flags));
	iot = sc->sc_iot;
	ioh = sc->sc_ioh;

	if ((flags & LPT_NOPRIME) == 0) {
		/* assert INIT for 100 usec to start up printer */
		bus_space_write_1(iot, ioh, lpt_control, LPC_SELECT);
		delay(100);
	}

	control = LPC_SELECT | LPC_NINIT;
	bus_space_write_1(iot, ioh, lpt_control, control);

	/* wait till ready (printer running diagnostics) */
	for (spin = 0; NOT_READY_ERR(); spin += STEP) {
		if (spin >= TIMEOUT) {
			sc->sc_state = 0;
			return EBUSY;
		}

		/* wait 1/4 second, give up if we get a signal */
		error = tsleep((caddr_t)sc, LPTPRI | PCATCH, "lptopen", STEP);
		if (error != EWOULDBLOCK) {
			sc->sc_state = 0;
			return error;
		}
	}

	if ((flags & LPT_NOINTR) == 0)
		control |= LPC_IENABLE;
	if (flags & LPT_AUTOLF)
		control |= LPC_AUTOLF;
	sc->sc_control = control;
	bus_space_write_1(iot, ioh, lpt_control, control);

	sc->sc_inbuf = geteblk(LPT_BSIZE);
	sc->sc_count = 0;
	sc->sc_state = LPT_OPEN;

	if ((sc->sc_flags & LPT_NOINTR) == 0)
		lptwakeup(sc);

	LPRINTF(("%s: opened\n", sc->sc_dev.dv_xname));
	return 0;
}

int
not_ready(status, sc)
	u_char status;
	struct lpt_softc *sc;
{
	u_char new;

	status = (status ^ LPS_INVERT) & LPS_MASK;
	new = status & ~sc->sc_laststatus;
	sc->sc_laststatus = status;

	if (new & LPS_SELECT)
		log(LOG_NOTICE, "%s: offline\n", sc->sc_dev.dv_xname);
	else if (new & LPS_NOPAPER)
		log(LOG_NOTICE, "%s: out of paper\n", sc->sc_dev.dv_xname);
	else if (new & LPS_NERR)
		log(LOG_NOTICE, "%s: output error\n", sc->sc_dev.dv_xname);

	return status;
}

void
lptwakeup(arg)
	void *arg;
{
	struct lpt_softc *sc = arg;
	int s;

	s = spltty();
	lptintr(sc);
	splx(s);

	timeout(lptwakeup, sc, STEP);
}

/*
 * Close the device, and free the local line buffer.
 */
int
lptclose(dev, flag, mode, p)
	dev_t dev;
	int flag;
	int mode;
	struct proc *p;
{
	int unit = LPTUNIT(dev);
	struct lpt_softc *sc = lpt_cd.cd_devs[unit];
	bus_space_tag_t iot = sc->sc_iot;
	bus_space_handle_t ioh = sc->sc_ioh;

	if (sc->sc_count)
		(void) pushbytes(sc);

	if ((sc->sc_flags & LPT_NOINTR) == 0)
		untimeout(lptwakeup, sc);

	bus_space_write_1(iot, ioh, lpt_control, LPC_NINIT);
	sc->sc_state = 0;
	bus_space_write_1(iot, ioh, lpt_control, LPC_NINIT);
	brelse(sc->sc_inbuf);

	LPRINTF(("%s: closed\n", sc->sc_dev.dv_xname));
	return 0;
}

int
pushbytes(sc)
	struct lpt_softc *sc;
{
	bus_space_tag_t iot = sc->sc_iot;
	bus_space_handle_t ioh = sc->sc_ioh;
	int error;

	if (sc->sc_flags & LPT_NOINTR) {
		int spin, tic;
		u_char control = sc->sc_control;

		while (sc->sc_count > 0) {
			spin = 0;
			while (NOT_READY()) {
				if (++spin < sc->sc_spinmax)
					continue;
				tic = 0;
				/* adapt busy-wait algorithm */
				sc->sc_spinmax++;
				while (NOT_READY_ERR()) {
					/* exponential backoff */
					tic = tic + tic + 1;
					if (tic > TIMEOUT)
						tic = TIMEOUT;
					error = tsleep((caddr_t)sc,
					    LPTPRI | PCATCH, "lptpsh", tic);
					if (error != EWOULDBLOCK)
						return error;
				}
				break;
			}

			bus_space_write_1(iot, ioh, lpt_data, *sc->sc_cp++);
			bus_space_write_1(iot, ioh, lpt_control, control | LPC_STROBE);
			sc->sc_count--;
			bus_space_write_1(iot, ioh, lpt_control, control);

			/* adapt busy-wait algorithm */
			if (spin*2 + 16 < sc->sc_spinmax)
				sc->sc_spinmax--;
		}
	} else {
		int s;

		while (sc->sc_count > 0) {
			/* if the printer is ready for a char, give it one */
			if ((sc->sc_state & LPT_OBUSY) == 0) {
				LPRINTF(("%s: write %d\n", sc->sc_dev.dv_xname,
				    sc->sc_count));
				s = spltty();
				(void) lptintr(sc);
				splx(s);
			}
			error = tsleep((caddr_t)sc, LPTPRI | PCATCH,
			    "lptwrite2", 0);
			if (error)
				return error;
		}
	}
	return 0;
}

/* 
 * Copy a line from user space to a local buffer, then call putc to get the
 * chars moved to the output queue.
 */
int
lptwrite(dev, uio, flags)
	dev_t dev;
	struct uio *uio;
	int flags;
{
	struct lpt_softc *sc = lpt_cd.cd_devs[LPTUNIT(dev)];
	size_t n;
	int error = 0;

	while ((n = min(LPT_BSIZE, uio->uio_resid)) != 0) {
		uiomove(sc->sc_cp = sc->sc_inbuf->b_data, n, uio);
		sc->sc_count = n;
		error = pushbytes(sc);
		if (error) {
			/*
			 * Return accurate residual if interrupted or timed
			 * out.
			 */
			uio->uio_resid += sc->sc_count;
			sc->sc_count = 0;
			return error;
		}
	}
	return 0;
}

/*
 * Handle printer interrupts which occur when the printer is ready to accept
 * another char.
 */
int
lptintr(arg)
	void *arg;
{
	struct lpt_softc *sc = arg;
	bus_space_tag_t iot = sc->sc_iot;
	bus_space_handle_t ioh = sc->sc_ioh;

	if (((sc->sc_state & LPT_OPEN) == 0 && sc->sc_count == 0) || (sc->sc_flags & LPT_NOINTR))
		return 0;

	/* is printer online and ready for output */
	if (NOT_READY() && NOT_READY_ERR())
		return -1;

	if (sc->sc_count) {
		u_char control = sc->sc_control;
		/* send char */
		bus_space_write_1(iot, ioh, lpt_data, *sc->sc_cp++);
		delay (50);
		bus_space_write_1(iot, ioh, lpt_control, control | LPC_STROBE);
		sc->sc_count--;
		bus_space_write_1(iot, ioh, lpt_control, control);
		sc->sc_state |= LPT_OBUSY;
	} else
		sc->sc_state &= ~LPT_OBUSY;

	if (sc->sc_count == 0) {
		/* none, wake up the top half to get more */
		wakeup((caddr_t)sc);
	}

	return 1;
}

int
lptioctl(dev, cmd, data, flag, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flag;
	struct proc *p;
{
	int error = 0;

	switch (cmd) {
	default:
		error = ENODEV;
	}

	return error;
}
@


1.20
log
@Missing pieces of new bus.h that CVS lost behind my back
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt.c,v 1.19 1996/11/12 20:30:41 niklas Exp $ */
@


1.19
log
@s/bus.h/bus.old.h/ to make the transit to the bus_space bus.h an easy road
possibly taken in small steps
@
text
@d1 2
a2 2
/*	$OpenBSD: lpt.c,v 1.18 1996/06/30 03:51:55 dm Exp $ */
/*	$NetBSD: lpt.c,v 1.39 1996/05/12 23:53:06 mycroft Exp $	*/
d69 1
a69 1
#include <machine/bus.old.h>
d75 2
d99 2
a100 2
	bus_chipset_tag_t sc_bc;
	bus_io_handle_t sc_ioh;
d119 3
a121 2
int lptprobe __P((struct device *, void *, void *));
void lptattach __P((struct device *, struct device *, void *));
d123 1
a123 1
	sizeof(struct lpt_softc), lptprobe, lptattach
d125 1
d136 2
a137 2
#define	NOT_READY()	((bus_io_read_1(bc, ioh, lpt_status) ^ LPS_INVERT) & LPS_MASK)
#define	NOT_READY_ERR()	not_ready(bus_io_read_1(bc, ioh, lpt_status), sc)
d143 2
a144 2
int	lpt_port_test __P((bus_chipset_tag_t, bus_io_handle_t, bus_io_addr_t,
	    bus_io_size_t, u_char, u_char));
d150 5
a154 5
lpt_port_test(bc, ioh, base, off, data, mask)
	bus_chipset_tag_t bc;
	bus_io_handle_t ioh;
	bus_io_addr_t base;
	bus_io_size_t off;
d161 1
a161 1
	bus_io_write_1(bc, ioh, off, data);
d165 1
a165 1
		temp = bus_io_read_1(bc, ioh, off) & mask;
d193 1
d195 1
a195 1
lptprobe(parent, match, aux)
d200 2
a201 2
	bus_chipset_tag_t bc;
	bus_io_handle_t ioh;
d207 6
a212 2
#define	ABORT	do {printf("lptprobe: mask %x data %x failed\n", mask, data); \
		    goto out;} while (0)
d217 1
a217 1
	bc = ia->ia_bc;
d219 1
a219 1
	if (bus_io_map(bc, base, LPT_NPORTS, &ioh))
d226 1
a226 1
	if (!lpt_port_test(bc, ioh, base, lpt_data, data, mask))
d230 1
a230 1
	if (!lpt_port_test(bc, ioh, base, lpt_data, data, mask))
d235 1
a235 1
		if (!lpt_port_test(bc, ioh, base, lpt_data, data, mask))
d241 1
a241 1
		if (!lpt_port_test(bc, ioh, base, lpt_data, data, mask))
d245 2
a246 2
	bus_io_write_1(bc, ioh, lpt_data, 0);
	bus_io_write_1(bc, ioh, lpt_control, 0);
d254 1
a254 1
	bus_io_unmap(bc, ioh, LPT_NPORTS);
d257 1
d259 1
d261 1
a261 1
lptattach(parent, self, aux)
d267 2
a268 2
	bus_chipset_tag_t bc;
	bus_io_handle_t ioh;
d279 3
a281 3
	bc = sc->sc_bc = ia->ia_bc;
	if (bus_io_map(bc, sc->sc_iobase, LPT_NPORTS, &ioh))
		panic("lptattach: couldn't map I/O ports");
d284 1
a284 1
	bus_io_write_1(bc, ioh, lpt_control, LPC_NINIT);
d290 1
d305 2
a306 2
	bus_chipset_tag_t bc;
	bus_io_handle_t ioh;
d332 1
a332 1
	bc = sc->sc_bc;
d337 1
a337 1
		bus_io_write_1(bc, ioh, lpt_control, LPC_SELECT);
d342 1
a342 1
	bus_io_write_1(bc, ioh, lpt_control, control);
d364 1
a364 1
	bus_io_write_1(bc, ioh, lpt_control, control);
d424 2
a425 2
	bus_chipset_tag_t bc = sc->sc_bc;
	bus_io_handle_t ioh = sc->sc_ioh;
d433 1
a433 1
	bus_io_write_1(bc, ioh, lpt_control, LPC_NINIT);
d435 1
a435 1
	bus_io_write_1(bc, ioh, lpt_control, LPC_NINIT);
d446 2
a447 2
	bus_chipset_tag_t bc = sc->sc_bc;
	bus_io_handle_t ioh = sc->sc_ioh;
d475 2
a476 2
			bus_io_write_1(bc, ioh, lpt_data, *sc->sc_cp++);
			bus_io_write_1(bc, ioh, lpt_control, control | LPC_STROBE);
d478 1
a478 1
			bus_io_write_1(bc, ioh, lpt_control, control);
d545 2
a546 2
	bus_chipset_tag_t bc = sc->sc_bc;
	bus_io_handle_t ioh = sc->sc_ioh;
d558 1
a558 1
		bus_io_write_1(bc, ioh, lpt_data, *sc->sc_cp++);
d560 1
a560 1
		bus_io_write_1(bc, ioh, lpt_control, control | LPC_STROBE);
d562 1
a562 1
		bus_io_write_1(bc, ioh, lpt_control, control);
@


1.18
log
@Put small delay in lptintr, as suggested by banshee@@gabriella.resort.com
on port-i386@@netbsd.org.
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt.c,v 1.17 1996/06/27 21:19:45 deraadt Exp $ */
d69 1
a69 1
#include <machine/bus.h>
@


1.17
log
@backout spl change
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt.c,v 1.15 1996/06/25 20:59:05 deraadt Exp $ */
d547 1
@


1.16
log
@new 2940 driver merged from freebsd sources 960623
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt.c,v 1.14 1996/06/24 20:48:33 pefo Exp $ */
a474 1
		s = spltty();
d480 1
d482 1
d486 1
a486 2
			if (error) {
				splx(s);
a487 1
			}
a488 1
		splx(s);
d536 1
a536 2
	if (((sc->sc_state & LPT_OPEN) == 0 && sc->sc_count == 0) ||
	    (sc->sc_flags & LPT_NOINTR))
@


1.15
log
@lpt_isa_ca
@
text
@d475 1
a480 1
				s = spltty();
a481 1
				splx(s);
d485 2
a486 1
			if (error)
d488 1
d490 1
d538 2
a539 1
	if (((sc->sc_state & LPT_OPEN) == 0 && sc->sc_count == 0) || (sc->sc_flags & LPT_NOINTR))
@


1.14
log
@pica changes backed out. does not belong here
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt.c,v 1.13 1996/06/23 12:53:08 deraadt Exp $ */
d119 1
a119 1
struct cfattach lpt_ca = {
@


1.13
log
@workaround because of pica stuff
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt.c,v 1.12 1996/06/22 23:13:36 pefo Exp $ */
a74 2
#include <lpt.h>

d117 4
a120 5
#if NLPT_ISA
int lpt_isa_probe __P((struct device *, void *, void *));
void lpt_isa_attach __P((struct device *, struct device *, void *));
struct cfattach lpt_isa_ca = {
	sizeof(struct lpt_softc), lpt_isa_probe, lpt_isa_attach
a121 9
#endif

#if NLPT_PICA
int lpt_pica_probe __P((struct device *, void *, void *));
void lpt_pica_attach __P((struct device *, struct device *, void *));
struct cfattach lpt_pica_ca = {
	sizeof(struct lpt_softc), lpt_pica_probe, lpt_pica_attach
};
#endif
a188 1
#if NLPT_ISA
d190 1
a190 1
lpt_isa_probe(parent, match, aux)
a247 57
#endif

#if NLPT_PICA
int
lpt_pica_probe(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct confargs *ca = aux;
	bus_chipset_tag_t bc;
	bus_io_handle_t ioh;
	u_long base;
	u_char mask, data;
	int i;

#ifdef DEBUG
#define	ABORT	do {printf("lptprobe: mask %x data %x failed\n", mask, data); \
		    return 0;} while (0)
#else
#define	ABORT	return 0
#endif

	if(!BUS_MATCHNAME(ca, "lpt"))
		 return(0);

	bc = 0;
	base = (int)BUS_CVTADDR(ca);
	ioh = base;

	mask = 0xff;

	data = 0x55;				/* Alternating zeros */
	if (!lpt_port_test(bc, ioh, base, lpt_data, data, mask))
		ABORT;

	data = 0xaa;				/* Alternating ones */
	if (!lpt_port_test(bc, ioh, base, lpt_data, data, mask))
		ABORT;

	for (i = 0; i < CHAR_BIT; i++) {	/* Walking zero */
		data = ~(1 << i);
		if (!lpt_port_test(bc, ioh, base, lpt_data, data, mask))
			ABORT;
	}

	for (i = 0; i < CHAR_BIT; i++) {	/* Walking one */
		data = (1 << i);
		if (!lpt_port_test(bc, ioh, base, lpt_data, data, mask))
			ABORT;
	}

	bus_io_write_1(bc, ioh, lpt_data, 0);
	bus_io_write_1(bc, ioh, lpt_control, 0);

	return 1;
}
#endif
a248 1
#if NLPT_ISA
d250 1
a250 1
lpt_isa_attach(parent, self, aux)
a278 27
#endif

#if NLPT_PICA
void
lpt_pica_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct lpt_softc *sc = (void *)self;
	struct confargs *ca = aux;
	bus_chipset_tag_t bc;
	bus_io_handle_t ioh;

	printf("\n");

	sc->sc_iobase = (int)BUS_CVTADDR(ca);
	sc->sc_irq = 0;
	sc->sc_state = 0;

	bc = sc->sc_bc = 0;
	sc->sc_ioh = sc->sc_iobase;

	bus_io_write_1(bc, ioh, lpt_control, LPC_NINIT);

	BUS_INTR_ESTABLISH(ca, lptintr, sc);
}
#endif
@


1.12
log
@Pica bus support added
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt.c,v 1.11 1996/05/26 00:27:24 deraadt Exp $ */
d122 1
a122 1
struct cfattach lpt_ca = {
@


1.11
log
@sync 0521
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt.c,v 1.10 1996/05/07 07:37:16 deraadt Exp $ */
d75 2
a116 2
int lptprobe __P((struct device *, void *, void *));
void lptattach __P((struct device *, struct device *, void *));
d119 3
d123 1
a123 1
	sizeof(struct lpt_softc), lptprobe, lptattach
d125 9
d201 1
d203 1
a203 1
lptprobe(parent, match, aux)
d261 57
d319 1
d321 1
a321 1
lptattach(parent, self, aux)
d350 27
@


1.10
log
@sync with 0504 -- prototypes and bus.h
@
text
@d1 2
a2 2
/*	$OpenBSD: lpt.c,v 1.9 1996/04/21 22:24:18 deraadt Exp $ */
/*	$NetBSD: lpt.c,v 1.38 1996/04/29 20:30:48 christos Exp $	*/
d69 1
a69 3
#ifdef i386							/* XXX */
#include <machine/cpu.h>					/* XXX */
#else								/* XXX */
a70 2
#endif								/* XXX */
#include <machine/bus.h>
@


1.9
log
@partial sync with netbsd 960418, more to come
@
text
@d1 2
a2 2
/*	$OpenBSD: lpt.c,v 1.8 1996/04/18 23:47:43 niklas Exp $ */
/*	$NetBSD: lpt.c,v 1.37 1996/04/11 22:29:37 cgd Exp $	*/
d66 1
d86 1
a86 1
#define lprintf
d88 1
a88 1
#define lprintf		if (lptdebug) printf
d116 3
d167 2
a168 2
	lprintf("lpt: port=0x%x out=0x%x in=0x%x timeout=%d\n", base + off,
	    data, temp, timeout);
d288 1
a288 1
lptopen(dev, flag)
d291 2
d323 1
a323 1
	lprintf("%s: open: flags=0x%x\n", sc->sc_dev.dv_xname, flags);
d344 2
a345 2
		if (error = tsleep((caddr_t)sc, LPTPRI | PCATCH, "lptopen",
		    STEP) != EWOULDBLOCK) {
d365 1
a365 1
	lprintf("%s: opened\n", sc->sc_dev.dv_xname);
d408 1
a408 1
lptclose(dev, flag)
d411 2
d430 1
a430 1
	lprintf("%s: closed\n", sc->sc_dev.dv_xname);
d482 2
a483 2
				lprintf("%s: write %d\n", sc->sc_dev.dv_xname,
				    sc->sc_count);
d488 3
a490 2
			if (error = tsleep((caddr_t)sc, LPTPRI | PCATCH,
			    "lptwrite2", 0))
d502 1
a502 1
lptwrite(dev, uio)
d505 1
d511 1
a511 1
	while (n = min(LPT_BSIZE, uio->uio_resid)) {
d567 1
a567 1
lptioctl(dev, cmd, data, flag)
d572 1
@


1.8
log
@NetBSD 960317 merge
@
text
@d1 2
a2 2
/*	$OpenBSD: lpt.c,v 1.7 1996/03/20 01:00:55 mickey Exp $ */
/*	$NetBSD: lpt.c,v 1.32 1996/03/08 22:17:58 cgd Exp $	*/
d68 5
a72 1
#include <machine/cpu.h>
d119 6
a124 2
struct cfdriver lptcd = {
	NULL, "lpt", lptprobe, lptattach, DV_TTY, sizeof(struct lpt_softc)
d139 3
d146 2
a147 1
lpt_port_test(ioh, off, data, mask, base)
d149 2
a150 1
	size_t off;
a151 1
	u_long base;
d217 1
a217 1
	if (!lpt_port_test(ioh, lpt_data, data, mask, base))
d221 1
a221 1
	if (!lpt_port_test(ioh, lpt_data, data, mask, base))
d226 1
a226 1
		if (!lpt_port_test(ioh, lpt_data, data, mask, base))
d232 1
a232 1
		if (!lpt_port_test(ioh, lpt_data, data, mask, base))
d276 2
a277 2
		sc->sc_ih = isa_intr_establish(ia->ia_irq, IST_EDGE, IPL_NONE,
		    lptintr, sc, sc->sc_dev.dv_xname);
d297 1
a297 1
	if (unit >= lptcd.cd_ndevs)
d299 1
a299 1
	sc = lptcd.cd_devs[unit];
d401 1
d407 1
a407 1
	struct lpt_softc *sc = lptcd.cd_devs[unit];
d492 1
d497 1
a497 1
	struct lpt_softc *sc = lptcd.cd_devs[LPTUNIT(dev)];
@


1.7
log
@Fix back wrong patches.
@
text
@d1 2
a2 2
/*	$OpenBSD: lpt.c,v 1.6 1996/03/19 21:10:24 mickey Exp $ */
/*	$NetBSD: lpt.c,v 1.31 1995/12/24 02:31:40 mycroft Exp $ */
d69 1
a69 1
#include <machine/pio.h>
d96 2
d124 2
a125 2
#define	NOT_READY()	((inb(iobase + lpt_status) ^ LPS_INVERT) & LPS_MASK)
#define	NOT_READY_ERR()	not_ready(inb(iobase + lpt_status), sc)
d135 3
a137 2
lpt_port_test(port, data, mask)
	int port;
d139 1
d145 1
a145 1
	outb(port, data);
d149 1
a149 1
		temp = inb(port) & mask;
d151 2
a152 2
	lprintf("lpt: port=0x%x out=0x%x in=0x%x timeout=%d\n", port, data,
	    temp, timeout);
d183 3
a185 2
	int iobase = ia->ia_iobase;
	int port;
d187 1
a187 1
	int i;
d191 1
a191 1
		    return 0;} while (0)
d193 1
a193 1
#define	ABORT	return 0
d196 6
a201 1
	port = iobase + lpt_data;
d205 1
a205 1
	if (!lpt_port_test(port, data, mask))
d209 1
a209 1
	if (!lpt_port_test(port, data, mask))
d214 1
a214 1
		if (!lpt_port_test(port, data, mask))
d220 1
a220 1
		if (!lpt_port_test(port, data, mask))
d224 2
a225 2
	outb(iobase + lpt_data, 0);
	outb(iobase + lpt_control, 0);
d229 6
a234 1
	return 1;
d244 2
a245 1
	int iobase = ia->ia_iobase;
d252 1
a252 1
	sc->sc_iobase = iobase;
d255 7
a261 1
	outb(iobase + lpt_control, LPC_NINIT);
d279 2
a280 1
	int iobase;
d306 2
a307 1
	iobase = sc->sc_iobase;
d311 1
a311 1
		outb(iobase + lpt_control, LPC_SELECT);
d316 1
a316 1
	outb(iobase + lpt_control, control);
d338 1
a338 1
	outb(iobase + lpt_control, control);
d395 2
a396 1
	int iobase = sc->sc_iobase;
d404 1
a404 1
	outb(iobase + lpt_control, LPC_NINIT);
d406 1
a406 1
	outb(iobase + lpt_control, LPC_NINIT);
d417 2
a418 1
	int iobase = sc->sc_iobase;
d446 2
a447 2
			outb(iobase + lpt_data, *sc->sc_cp++);
			outb(iobase + lpt_control, control | LPC_STROBE);
d449 1
a449 1
			outb(iobase + lpt_control, control);
d513 2
a514 1
	int iobase = sc->sc_iobase;
d526 2
a527 2
		outb(iobase + lpt_data, *sc->sc_cp++);
		outb(iobase + lpt_control, control | LPC_STROBE);
d529 1
a529 1
		outb(iobase + lpt_control, control);
@


1.6
log
@Merging w/ NetBSD 021796.
speaker upgraded to the current.
some changes to the VM stuff (ie kern_thread.c added and so).
@
text
@d1 1
a1 1
/*	$OpenBSD: lpt.c,v 1.5 1996/03/08 16:43:08 niklas Exp $ */
d243 1
a243 1
		    lptintr, sc);
@


1.5
log
@From NetBSD: merge of 960217
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d243 1
a243 1
		    lptintr, sc, sc->sc_dev.dv_xname);
@


1.4
log
@Never claim interrupt if device runs without interrupts enabled
@
text
@d1 2
a2 1
/*	$NetBSD: lpt.c,v 1.30 1995/04/17 12:09:17 cgd Exp $	*/
@


1.3
log
@Pass device name to interrupt establish routines so it can be recorded in
the device interrupt chain structures (isa, pci)

Move interrupt chain structure definition to <machine/psl.h> so vmstat can
get at it (i386)

Remove hack to count interrupts the old way (i386)
@
text
@d488 1
a488 2
#if 0
	if ((sc->sc_state & LPT_OPEN) == 0)
a489 1
#endif
d493 1
a493 1
		return 0;
@


1.2
log
@from netbsd:
The IST_* and IPL_* constants are not bus-specific; don't treat them as such.
Change splimp -> splnet in Ethernet, ARCnet, and FDDI drivers.
@
text
@d242 1
a242 1
		    lptintr, sc);
@


1.1
log
@Initial revision
@
text
@d241 2
a242 2
		sc->sc_ih = isa_intr_establish(ia->ia_irq, ISA_IST_EDGE,
		    ISA_IPL_NONE, lptintr, sc);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
