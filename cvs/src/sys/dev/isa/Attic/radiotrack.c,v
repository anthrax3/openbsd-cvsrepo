head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.58
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.48
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.56
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.54
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.52
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.50
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.46
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.44
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.42
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.40
	OPENBSD_5_0:1.4.0.38
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.36
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.34
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.30
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.32
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.28
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.26
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.24
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.22
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.20
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.18
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	SMP:1.3.0.2
	UBC_SYNC_B:1.4
	UBC:1.1.0.2
	UBC_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.08.31.15.53.06;	author tedu;	state dead;
branches;
next	1.4;
commitid	m7MmVL2p3FX326F3;

1.4
date	2002.08.28.21.20.48;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.07.18.32.19;	author mickey;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2002.01.02.19.36.50;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2001.12.05.10.27.06;	author mickey;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2002.01.31.22.55.33;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.10.29.00.33.26;	author art;	state Exp;
branches;
next	;

1.3.2.1
date	2003.03.28.00.38.16;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Support A Radio Free Europe!
remove long disabled radio devices
ok deraadt
@
text
@/* $OpenBSD: radiotrack.c,v 1.4 2002/08/28 21:20:48 mickey Exp $ */
/* $RuOBSD: radiotrack.c,v 1.3 2001/10/18 16:51:36 pva Exp $ */

/*
 * Copyright (c) 2001, 2002 Maxim Tsyplakov <tm@@oganer.net>,
 *			    Vladimir Popov <jumbo@@narod.ru>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* AIMS Lab Radiotrack FM Radio Card device driver */

/*
 * Sanyo LM7000 Direct PLL Frequency Synthesizer
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/ioctl.h>
#include <sys/device.h>
#include <sys/radioio.h>

#include <machine/bus.h>

#include <dev/ic/lm700x.h>
#include <dev/isa/isavar.h>
#include <dev/isa/rtreg.h>
#include <dev/isa/rtvar.h>
#include <dev/radio_if.h>

void	rtattach(struct rt_softc *);
int	rt_get_info(void *, struct radio_info *);
int	rt_set_info(void *, struct radio_info *);

struct radio_hw_if rt_hw_if = {
	NULL,	/* open */
	NULL,	/* close */
	rt_get_info,
	rt_set_info,
	NULL
};

struct cfdriver rt_cd = {
	NULL, "rt", DV_DULL
};

void	rt_set_mute(struct rt_softc *, int);
void	rt_set_freq(struct rt_softc *, u_int32_t);
u_int8_t	rt_state(bus_space_tag_t, bus_space_handle_t);

void	sfi_lm700x_init(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
void	rt_lm700x_init(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
void	rt_lm700x_rset(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);

u_int8_t	rt_conv_vol(u_int8_t);
u_int8_t	rt_unconv_vol(u_int8_t);

void
rtattach(struct rt_softc *sc) {
	sc->sc_freq = MIN_FM_FREQ;
	sc->sc_mute = 0;
	sc->sc_vol = 0;
	sc->sc_rf = LM700X_REF_050;
	sc->sc_stereo = LM700X_STEREO;

	sc->lm.wzcl = RT_WREN_ON | RT_CLCK_OFF | RT_DATA_OFF;
	sc->lm.wzch = RT_WREN_ON | RT_CLCK_ON  | RT_DATA_OFF;
	sc->lm.wocl = RT_WREN_ON | RT_CLCK_OFF | RT_DATA_ON;
	sc->lm.woch = RT_WREN_ON | RT_CLCK_ON  | RT_DATA_ON;

	switch (sc->sc_ct) {
	case CARD_RADIOTRACK:
		sc->lm.initdata = 0;
		sc->lm.rsetdata = RT_SIGNAL_METER;
		sc->lm.init = rt_lm700x_init;
		sc->lm.rset = rt_lm700x_rset;
		break;
	case CARD_SF16FMI:
		sc->lm.initdata = RT_CARD_OFF;
		sc->lm.rsetdata = RT_CARD_ON;
		sc->lm.init = sfi_lm700x_init;
		sc->lm.rset = sfi_lm700x_init;
		break;
	}

	rt_set_freq(sc, sc->sc_freq);
	rt_set_mute(sc, sc->sc_vol);

	radio_attach_mi(&rt_hw_if, sc, &sc->sc_dev);
}

int
rt_set_info(void *v, struct radio_info *ri)
{
	struct rt_softc *sc = v;

	sc->sc_mute = ri->mute ? 1 : 0;
	sc->sc_rf = lm700x_encode_ref(ri->rfreq);

	switch (sc->sc_ct) {
	case CARD_RADIOTRACK:
		sc->sc_vol = rt_conv_vol(ri->volume);
		break;
	case CARD_SF16FMI:
		sc->sc_vol = ri->volume ? 1 : 0;
		break;
	}
	/*
	 * Though SF16-FMI does not set stereo/mono
	 * it won't hurt to have this
	 */
	sc->sc_stereo = ri->stereo ? LM700X_STEREO : LM700X_MONO;

	rt_set_freq(sc, ri->freq);
	rt_set_mute(sc, sc->sc_vol);

	return (0);
}

int
rt_get_info(void *v, struct radio_info *ri)
{
	struct rt_softc *sc = v;

	switch (sc->sc_ct) {
	case CARD_RADIOTRACK:
		ri->caps = RTRACK_CAPABILITIES;
		ri->info = 3 & rt_state(sc->lm.iot, sc->lm.ioh);
		ri->volume = rt_unconv_vol(sc->sc_vol);
		break;
	case CARD_SF16FMI:
		ri->caps = SF16FMI_CAPABILITIES;
		ri->volume = sc->sc_vol ? 255 : 0;
		ri->info = 0; /* UNSUPPORTED */
		break;
	default:
		/* No such card */
		return (1);
	}

	ri->mute = sc->sc_mute;
	ri->stereo = sc->sc_stereo == LM700X_STEREO ? 0 : 1;
	ri->rfreq = lm700x_decode_ref(sc->sc_rf);
	ri->freq = sc->sc_freq;

	/* UNSUPPORTED */
	ri->lock = 0;

	return (0);
}

/*
 * Mute the card
 */
void
rt_set_mute(struct rt_softc *sc, int vol)
{
	int val;

	if (sc->sc_ct == CARD_UNKNOWN)
		return;

	if (sc->sc_ct == CARD_SF16FMI) {
		val = vol ? RT_CARD_ON : RT_CARD_OFF;
		bus_space_write_1(sc->lm.iot, sc->lm.ioh, 0,
				sc->sc_mute ? RT_CARD_OFF : val);
		return;
	}

	/* CARD_RADIOTRACK */
	if (sc->sc_mute) {
		bus_space_write_1(sc->lm.iot, sc->lm.ioh, 0,
				RT_VOLUME_DOWN | RT_CARD_ON);
		DELAY(MAX_VOL * RT_VOLUME_DELAY);
		bus_space_write_1(sc->lm.iot, sc->lm.ioh, 0,
				RT_VOLUME_STEADY | RT_CARD_ON);
		bus_space_write_1(sc->lm.iot, sc->lm.ioh, 0, RT_CARD_OFF);
		bus_space_write_1(sc->lm.iot, sc->lm.ioh, 0, RT_CARD_OFF);
	} else {
		val = sc->sc_vol - vol;
		if (val < 0) {
			val *= -1;
			bus_space_write_1(sc->lm.iot, sc->lm.ioh, 0,
					RT_VOLUME_DOWN | RT_CARD_ON);
		} else {
			bus_space_write_1(sc->lm.iot, sc->lm.ioh, 0,
					RT_VOLUME_UP | RT_CARD_ON);
		}
		DELAY(val * RT_VOLUME_DELAY);
		bus_space_write_1(sc->lm.iot, sc->lm.ioh, 0,
				RT_VOLUME_STEADY | RT_CARD_ON);
	}
}

void
rt_set_freq(struct rt_softc *sc, u_int32_t nfreq)
{
	u_int32_t reg;

	if (nfreq > MAX_FM_FREQ)
		nfreq = MAX_FM_FREQ;
	if (nfreq < MIN_FM_FREQ)
		nfreq = MIN_FM_FREQ;

	sc->sc_freq = nfreq;

	reg = lm700x_encode_freq(nfreq, sc->sc_rf);
	reg |= sc->sc_stereo | sc->sc_rf | LM700X_DIVIDER_FM;

	lm700x_hardware_write(&sc->lm, reg, RT_VOLUME_STEADY);

	rt_set_mute(sc, sc->sc_vol);
}

/*
 * Return state of the card - tuned/not tuned, mono/stereo
 */
u_int8_t
rt_state(bus_space_tag_t iot, bus_space_handle_t ioh)
{
	u_int8_t ret;

	bus_space_write_1(iot, ioh, 0,
			RT_VOLUME_STEADY | RT_SIGNAL_METER | RT_CARD_ON);
	DELAY(RT_SIGNAL_METER_DELAY);
	ret = bus_space_read_1(iot, ioh, 0);

	switch (ret) {
	case 0xFD:
		ret = RADIO_INFO_SIGNAL | RADIO_INFO_STEREO;
		break;
	case 0xFF:
		ret = 0;
		break;
	default:
		ret = RADIO_INFO_SIGNAL;
		break;
	}

	return ret;
}

/*
 * Convert volume to hardware representation.
 */
u_int8_t
rt_conv_vol(u_int8_t vol)
{
	if (vol < VOLUME_RATIO(1))
		return 0;
	else if (vol >= VOLUME_RATIO(1) && vol < VOLUME_RATIO(2))
		return 1;
	else if (vol >= VOLUME_RATIO(2) && vol < VOLUME_RATIO(3))
		return 2;
	else if (vol >= VOLUME_RATIO(3) && vol < VOLUME_RATIO(4))
		return 3;
	else
		return 4;
}

/*
 * Convert volume from hardware representation
 */
u_int8_t
rt_unconv_vol(u_int8_t vol)
{
	return VOLUME_RATIO(vol);
}

void
sfi_lm700x_init(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off,
		u_int32_t data)
{
	bus_space_write_1(iot, ioh, off, data);
}

void
rt_lm700x_init(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off,
		u_int32_t data)
{
	/* Do nothing */
	return;
}

void
rt_lm700x_rset(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off,
		u_int32_t data)
{
	DELAY(1000);
	bus_space_write_1(iot, ioh, off, RT_CARD_OFF | data);
	DELAY(50000);
	bus_space_write_1(iot, ioh, off, RT_VOLUME_STEADY | RT_CARD_ON | data);
}
@


1.4
log
@update of radiotrack driver, including isapnp support; from jumbo@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.3
log
@use flags instead of options to choose the tea5757 vs tea5759.
from Vladimir Popov <jumbo@@narod.ru>
@
text
@d1 1
a1 1
/* $OpenBSD: radiotrack.c,v 1.2 2002/01/02 19:36:50 mickey Exp $ */
d5 2
a6 2
 * Copyright (c) 2001 Maxim Tsyplakov <tm@@oganer.net>,
 *                    Vladimir Popov <jumbo@@narod.ru>
a37 2
#include <sys/proc.h>
#include <sys/errno.h>
d44 1
d46 2
a47 1
#include <dev/ic/lm700x.h>
d50 1
a50 41
#define RF_25K	25
#define RF_50K	50
#define RF_100K	100

#define MAX_VOL	5	/* XXX Find real value */
#define VOLUME_RATIO(x)	(255 * x / MAX_VOL)

#define RT_BASE_VALID(x)	\
		((x == 0x30C) || (x == 0x20C) || (x == 0x284) || (x == 0x384))

#define CARD_RADIOTRACK		0x01
#define CARD_SF16FMI		0x02
#define CARD_UNKNOWN		0xFF

#define RTRACK_CAPABILITIES	RADIO_CAPS_DETECT_STEREO | 		\
				RADIO_CAPS_DETECT_SIGNAL | 		\
				RADIO_CAPS_SET_MONO | 			\
				RADIO_CAPS_REFERENCE_FREQ

#define	RT_WREN_ON		(1 << 0)
#define	RT_WREN_OFF		(0 << 0)

#define RT_CLCK_ON		(1 << 1)
#define RT_CLCK_OFF		(0 << 1)

#define RT_DATA_ON		(1 << 2)
#define RT_DATA_OFF		(0 << 2)

#define RT_CARD_ON		(1 << 3)
#define RT_CARD_OFF		(0 << 3)

#define RT_SIGNAL_METER		(1 << 4)
#define RT_SIGNAL_METER_DELAY	150000

#define RT_VOLUME_DOWN		(1 << 6)
#define RT_VOLUME_UP		(2 << 6)
#define RT_VOLUME_STEADY	(3 << 6)
#define RT_VOLUME_DELAY		100000

int	rt_probe(struct device *, void *, void *);
void	rt_attach(struct device *, struct device * self, void *);
d55 2
a56 2
	NULL,   /* open */
	NULL,   /* close */
a61 17
struct rt_softc {
	struct device	sc_dev;

	int		mute;
	u_int8_t	vol;
	u_int8_t	cardtype;
	u_int32_t	freq;
	u_int32_t	rf;
	u_int32_t	stereo;

	struct lm700x_t	lm;
};

struct cfattach rt_ca = {
	sizeof(struct rt_softc), rt_probe, rt_attach
};

a65 1
int	rt_find(bus_space_tag_t, bus_space_handle_t);
d70 1
d77 34
d112 1
a112 1
rt_probe(struct device *parent, void *match, void *aux)
d114 1
a114 9
	struct isa_attach_args *ia = aux;
	bus_space_tag_t iot = ia->ia_iot;
	bus_space_handle_t ioh;
	int iosize = 1, iobase = ia->ia_iobase;

	if (!RT_BASE_VALID(iobase)) {
		printf("rt: configured iobase 0x%x invalid\n", iobase);
		return (0);
	}
d116 2
a117 2
	if (bus_space_map(iot, iobase, iosize, 0, &ioh))
		return (0);
d119 7
a125 3
	if (!rt_find(iot, ioh)) {
		bus_space_unmap(iot, ioh, iosize);
		return (0);
d127 8
d136 1
a136 3
	bus_space_unmap(iot, ioh, iosize);
	ia->ia_iosize = iosize;
	return 1;
d139 2
a140 2
void
rt_attach(struct device *parent, struct device *self, void *aux)
d142 1
a142 16
	struct rt_softc *sc = (void *) self;
	struct isa_attach_args *ia = aux;

	sc->lm.iot = ia->ia_iot;
	sc->rf = LM700X_REF_050;
	sc->stereo = LM700X_STEREO;
	sc->mute = 0;
	sc->freq = MIN_FM_FREQ;
	sc->vol = 0;

	/* remap I/O */
	if (bus_space_map(sc->lm.iot, ia->ia_iobase, ia->ia_iosize,
			  0, &sc->lm.ioh)) {
		printf(": bus_space_map() failed\n");
		return;
	}
d144 5
a148 6
	switch (sc->lm.iot) {
	case 0x20C:
		/* FALLTHROUGH */
	case 0x30C:
		sc->cardtype = CARD_RADIOTRACK;
		printf(": AIMS Lab Radiotrack or compatible\n");
d150 4
a153 5
	case 0x284:
		/* FALLTHROUGH */
	case 0x384:
		sc->cardtype = CARD_SF16FMI;
		printf(": SoundForte RadioX SF16-FMI\n");
d156 2
a157 3
		sc->cardtype = CARD_UNKNOWN;
		printf(": Unknown card\n");
		break;
d160 4
a163 10
	/* Configure struct lm700x_t lm */
	sc->lm.offset = 0;
	sc->lm.wzcl = RT_WREN_ON | RT_CLCK_OFF | RT_DATA_OFF;
	sc->lm.wzch = RT_WREN_ON | RT_CLCK_ON  | RT_DATA_OFF;
	sc->lm.wocl = RT_WREN_ON | RT_CLCK_OFF | RT_DATA_ON;
	sc->lm.woch = RT_WREN_ON | RT_CLCK_ON  | RT_DATA_ON;
	sc->lm.initdata = 0;
	sc->lm.rsetdata = RT_DATA_ON | RT_CLCK_ON | RT_WREN_OFF;
	sc->lm.init = rt_lm700x_init;
	sc->lm.rset = rt_lm700x_rset;
d165 2
a166 1
	rt_set_freq(sc, sc->freq);
d168 1
a168 1
	radio_attach_mi(&rt_hw_if, sc, &sc->sc_dev);
d179 12
a190 1
	if (sc->mute) {
d199 1
a199 1
		val = sc->vol - vol;
d224 1
a224 1
	sc->freq = nfreq;
d226 2
a227 2
	reg = lm700x_encode_freq(nfreq, sc->rf);
	reg |= sc->stereo | sc->rf | LM700X_DIVIDER_FM;
d231 1
a231 1
	rt_set_mute(sc, sc->vol);
d258 1
a258 1
	
d289 3
a291 2
int
rt_find(bus_space_tag_t iot, bus_space_handle_t ioh)
d293 1
a293 34
	struct rt_softc sc;
#if 0
	u_int i, scanres = 0;
#endif

	sc.lm.iot = iot;
	sc.lm.ioh = ioh;
	sc.lm.offset = 0;
	sc.lm.wzcl = RT_WREN_ON | RT_CLCK_OFF | RT_DATA_OFF;
	sc.lm.wzch = RT_WREN_ON | RT_CLCK_ON  | RT_DATA_OFF;
	sc.lm.wocl = RT_WREN_ON | RT_CLCK_OFF | RT_DATA_ON;
	sc.lm.woch = RT_WREN_ON | RT_CLCK_ON  | RT_DATA_ON;
	sc.lm.initdata = 0;
	sc.lm.rsetdata = RT_SIGNAL_METER;
	sc.lm.init = rt_lm700x_init;
	sc.lm.rset = rt_lm700x_rset;
	sc.rf = LM700X_REF_050;
	sc.mute = 0;
	sc.stereo = LM700X_STEREO;
	sc.vol = 0;

	/*
	 * Scan whole FM range. If there is a card it'll
	 * respond on some frequency.
	 */
	return 0;
#if 0
	for (i = MIN_FM_FREQ; !scanres && i < MAX_FM_FREQ; i += 10) {
		rt_set_freq(&sc, i);
		scanres += rt_state(iot, ioh);
	}

	return scanres;
#endif
a311 35
}

int
rt_set_info(void *v, struct radio_info *ri)
{
	struct rt_softc *sc = v;

	sc->mute = ri->mute ? 1 : 0;
	sc->vol = rt_conv_vol(ri->volume);
	sc->stereo = ri->stereo ? LM700X_STEREO : LM700X_MONO;
	sc->rf = lm700x_encode_ref(ri->rfreq);

	rt_set_freq(sc, ri->freq);
	rt_set_mute(sc, sc->vol);

	return (0);
}

int
rt_get_info(void *v, struct radio_info *ri)
{
	struct rt_softc *sc = v;

	ri->mute = sc->mute;
	ri->volume = rt_unconv_vol(sc->vol);
	ri->stereo = sc->stereo == LM700X_STEREO ? 0 : 1;
	ri->caps = RTRACK_CAPABILITIES;
	ri->rfreq = lm700x_decode_ref(sc->rf);
	ri->info = 3 & rt_state(sc->lm.iot, sc->lm.ioh);
	ri->freq = sc->freq;

	/* UNSUPPORTED */
	ri->lock = 0;

	return (0);
@


1.3.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d5 2
a6 2
 * Copyright (c) 2001, 2002 Maxim Tsyplakov <tm@@oganer.net>,
 *			    Vladimir Popov <jumbo@@narod.ru>
d38 2
d46 1
a47 3
#include <dev/isa/isavar.h>
#include <dev/isa/rtreg.h>
#include <dev/isa/rtvar.h>
d50 41
a90 1
void	rtattach(struct rt_softc *);
d95 2
a96 2
	NULL,	/* open */
	NULL,	/* close */
d102 17
d123 1
a127 1
void	sfi_lm700x_init(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
d134 12
a145 7
void
rtattach(struct rt_softc *sc) {
	sc->sc_freq = MIN_FM_FREQ;
	sc->sc_mute = 0;
	sc->sc_vol = 0;
	sc->sc_rf = LM700X_REF_050;
	sc->sc_stereo = LM700X_STEREO;
d147 2
a148 4
	sc->lm.wzcl = RT_WREN_ON | RT_CLCK_OFF | RT_DATA_OFF;
	sc->lm.wzch = RT_WREN_ON | RT_CLCK_ON  | RT_DATA_OFF;
	sc->lm.wocl = RT_WREN_ON | RT_CLCK_OFF | RT_DATA_ON;
	sc->lm.woch = RT_WREN_ON | RT_CLCK_ON  | RT_DATA_ON;
d150 3
a152 13
	switch (sc->sc_ct) {
	case CARD_RADIOTRACK:
		sc->lm.initdata = 0;
		sc->lm.rsetdata = RT_SIGNAL_METER;
		sc->lm.init = rt_lm700x_init;
		sc->lm.rset = rt_lm700x_rset;
		break;
	case CARD_SF16FMI:
		sc->lm.initdata = RT_CARD_OFF;
		sc->lm.rsetdata = RT_CARD_ON;
		sc->lm.init = sfi_lm700x_init;
		sc->lm.rset = sfi_lm700x_init;
		break;
d155 3
a157 4
	rt_set_freq(sc, sc->sc_freq);
	rt_set_mute(sc, sc->sc_vol);

	radio_attach_mi(&rt_hw_if, sc, &sc->sc_dev);
d160 2
a161 2
int
rt_set_info(void *v, struct radio_info *ri)
d163 2
a164 1
	struct rt_softc *sc = v;
d166 12
a177 10
	sc->sc_mute = ri->mute ? 1 : 0;
	sc->sc_rf = lm700x_encode_ref(ri->rfreq);

	switch (sc->sc_ct) {
	case CARD_RADIOTRACK:
		sc->sc_vol = rt_conv_vol(ri->volume);
		break;
	case CARD_SF16FMI:
		sc->sc_vol = ri->volume ? 1 : 0;
		break;
a178 16
	/*
	 * Though SF16-FMI does not set stereo/mono
	 * it won't hurt to have this
	 */
	sc->sc_stereo = ri->stereo ? LM700X_STEREO : LM700X_MONO;

	rt_set_freq(sc, ri->freq);
	rt_set_mute(sc, sc->sc_vol);

	return (0);
}

int
rt_get_info(void *v, struct radio_info *ri)
{
	struct rt_softc *sc = v;
d180 6
a185 5
	switch (sc->sc_ct) {
	case CARD_RADIOTRACK:
		ri->caps = RTRACK_CAPABILITIES;
		ri->info = 3 & rt_state(sc->lm.iot, sc->lm.ioh);
		ri->volume = rt_unconv_vol(sc->sc_vol);
d187 5
a191 4
	case CARD_SF16FMI:
		ri->caps = SF16FMI_CAPABILITIES;
		ri->volume = sc->sc_vol ? 255 : 0;
		ri->info = 0; /* UNSUPPORTED */
d194 3
a196 2
		/* No such card */
		return (1);
d199 10
a208 4
	ri->mute = sc->sc_mute;
	ri->stereo = sc->sc_stereo == LM700X_STEREO ? 0 : 1;
	ri->rfreq = lm700x_decode_ref(sc->sc_rf);
	ri->freq = sc->sc_freq;
d210 1
a210 2
	/* UNSUPPORTED */
	ri->lock = 0;
d212 1
a212 1
	return (0);
d223 1
a223 12
	if (sc->sc_ct == CARD_UNKNOWN)
		return;

	if (sc->sc_ct == CARD_SF16FMI) {
		val = vol ? RT_CARD_ON : RT_CARD_OFF;
		bus_space_write_1(sc->lm.iot, sc->lm.ioh, 0,
				sc->sc_mute ? RT_CARD_OFF : val);
		return;
	}

	/* CARD_RADIOTRACK */
	if (sc->sc_mute) {
d232 1
a232 1
		val = sc->sc_vol - vol;
d257 1
a257 1
	sc->sc_freq = nfreq;
d259 2
a260 2
	reg = lm700x_encode_freq(nfreq, sc->sc_rf);
	reg |= sc->sc_stereo | sc->sc_rf | LM700X_DIVIDER_FM;
d264 1
a264 1
	rt_set_mute(sc, sc->sc_vol);
d291 1
a291 1

d322 2
a323 3
void
sfi_lm700x_init(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off,
		u_int32_t data)
d325 34
a358 1
	bus_space_write_1(iot, ioh, off, data);
d377 35
@


1.2
log
@do not unmap io space while it's still in use (in *probe)
missing new lines and replace panics w/ printf+return.
idea from netbsd's port.
@
text
@d1 1
a1 1
/* $OpenBSD: radiotrack.c,v 1.1 2001/12/05 10:27:06 mickey Exp $ */
d135 1
a135 1
rt_probe(struct device *parent, void *self, void *aux)
@


1.1
log
@update for radio drivers from tm@@oganer.net und jumbo@@narod.ru
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a139 1

d143 2
a144 2
		printf("rt: configured iobase 0x%x invalid", iobase);
		return 0;
d148 6
a153 1
		return 0;
a155 4

	if (!rt_find(iot, ioh))
		return 0;

d175 4
a178 2
			  0, &sc->lm.ioh))
		panic(": bus_space_map() of %s failed", sc->sc_dev.dv_xname);
d185 1
a185 1
		printf(": AIMS Lab Radiotrack or compatible");
d191 1
a191 1
		printf(": SoundForte RadioX SF16-FMI");
d195 1
a195 1
		printf(": Unknown card");
@


1.1.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/* $OpenBSD: radiotrack.c,v 1.3 2002/01/07 18:32:19 mickey Exp $ */
d135 1
a135 1
rt_probe(struct device *parent, void *match, void *aux)
d140 1
d144 2
a145 2
		printf("rt: configured iobase 0x%x invalid\n", iobase);
		return (0);
d149 3
a151 1
		return (0);
d153 2
a154 4
	if (!rt_find(iot, ioh)) {
		bus_space_unmap(iot, ioh, iosize);
		return (0);
	}
a155 1
	bus_space_unmap(iot, ioh, iosize);
d175 2
a176 4
			  0, &sc->lm.ioh)) {
		printf(": bus_space_map() failed\n");
		return;
	}
d183 1
a183 1
		printf(": AIMS Lab Radiotrack or compatible\n");
d189 1
a189 1
		printf(": SoundForte RadioX SF16-FMI\n");
d193 1
a193 1
		printf(": Unknown card\n");
@


1.1.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/* $OpenBSD: radiotrack.c,v 1.1.2.1 2002/01/31 22:55:33 niklas Exp $ */
d5 2
a6 2
 * Copyright (c) 2001, 2002 Maxim Tsyplakov <tm@@oganer.net>,
 *			    Vladimir Popov <jumbo@@narod.ru>
d38 2
d46 1
a47 3
#include <dev/isa/isavar.h>
#include <dev/isa/rtreg.h>
#include <dev/isa/rtvar.h>
d50 41
a90 1
void	rtattach(struct rt_softc *);
d95 2
a96 2
	NULL,	/* open */
	NULL,	/* close */
d102 17
d123 1
a127 1
void	sfi_lm700x_init(bus_space_tag_t, bus_space_handle_t, bus_size_t, u_int32_t);
d134 12
a145 7
void
rtattach(struct rt_softc *sc) {
	sc->sc_freq = MIN_FM_FREQ;
	sc->sc_mute = 0;
	sc->sc_vol = 0;
	sc->sc_rf = LM700X_REF_050;
	sc->sc_stereo = LM700X_STEREO;
d147 2
a148 4
	sc->lm.wzcl = RT_WREN_ON | RT_CLCK_OFF | RT_DATA_OFF;
	sc->lm.wzch = RT_WREN_ON | RT_CLCK_ON  | RT_DATA_OFF;
	sc->lm.wocl = RT_WREN_ON | RT_CLCK_OFF | RT_DATA_ON;
	sc->lm.woch = RT_WREN_ON | RT_CLCK_ON  | RT_DATA_ON;
d150 3
a152 13
	switch (sc->sc_ct) {
	case CARD_RADIOTRACK:
		sc->lm.initdata = 0;
		sc->lm.rsetdata = RT_SIGNAL_METER;
		sc->lm.init = rt_lm700x_init;
		sc->lm.rset = rt_lm700x_rset;
		break;
	case CARD_SF16FMI:
		sc->lm.initdata = RT_CARD_OFF;
		sc->lm.rsetdata = RT_CARD_ON;
		sc->lm.init = sfi_lm700x_init;
		sc->lm.rset = sfi_lm700x_init;
		break;
d155 3
a157 4
	rt_set_freq(sc, sc->sc_freq);
	rt_set_mute(sc, sc->sc_vol);

	radio_attach_mi(&rt_hw_if, sc, &sc->sc_dev);
d160 2
a161 2
int
rt_set_info(void *v, struct radio_info *ri)
d163 2
a164 1
	struct rt_softc *sc = v;
d166 12
a177 10
	sc->sc_mute = ri->mute ? 1 : 0;
	sc->sc_rf = lm700x_encode_ref(ri->rfreq);

	switch (sc->sc_ct) {
	case CARD_RADIOTRACK:
		sc->sc_vol = rt_conv_vol(ri->volume);
		break;
	case CARD_SF16FMI:
		sc->sc_vol = ri->volume ? 1 : 0;
		break;
a178 16
	/*
	 * Though SF16-FMI does not set stereo/mono
	 * it won't hurt to have this
	 */
	sc->sc_stereo = ri->stereo ? LM700X_STEREO : LM700X_MONO;

	rt_set_freq(sc, ri->freq);
	rt_set_mute(sc, sc->sc_vol);

	return (0);
}

int
rt_get_info(void *v, struct radio_info *ri)
{
	struct rt_softc *sc = v;
d180 6
a185 5
	switch (sc->sc_ct) {
	case CARD_RADIOTRACK:
		ri->caps = RTRACK_CAPABILITIES;
		ri->info = 3 & rt_state(sc->lm.iot, sc->lm.ioh);
		ri->volume = rt_unconv_vol(sc->sc_vol);
d187 5
a191 4
	case CARD_SF16FMI:
		ri->caps = SF16FMI_CAPABILITIES;
		ri->volume = sc->sc_vol ? 255 : 0;
		ri->info = 0; /* UNSUPPORTED */
d194 3
a196 2
		/* No such card */
		return (1);
d199 10
a208 4
	ri->mute = sc->sc_mute;
	ri->stereo = sc->sc_stereo == LM700X_STEREO ? 0 : 1;
	ri->rfreq = lm700x_decode_ref(sc->sc_rf);
	ri->freq = sc->sc_freq;
d210 1
a210 2
	/* UNSUPPORTED */
	ri->lock = 0;
d212 1
a212 1
	return (0);
d223 1
a223 12
	if (sc->sc_ct == CARD_UNKNOWN)
		return;

	if (sc->sc_ct == CARD_SF16FMI) {
		val = vol ? RT_CARD_ON : RT_CARD_OFF;
		bus_space_write_1(sc->lm.iot, sc->lm.ioh, 0,
				sc->sc_mute ? RT_CARD_OFF : val);
		return;
	}

	/* CARD_RADIOTRACK */
	if (sc->sc_mute) {
d232 1
a232 1
		val = sc->sc_vol - vol;
d257 1
a257 1
	sc->sc_freq = nfreq;
d259 2
a260 2
	reg = lm700x_encode_freq(nfreq, sc->sc_rf);
	reg |= sc->sc_stereo | sc->sc_rf | LM700X_DIVIDER_FM;
d264 1
a264 1
	rt_set_mute(sc, sc->sc_vol);
d291 1
a291 1

d322 2
a323 3
void
sfi_lm700x_init(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off,
		u_int32_t data)
d325 34
a358 1
	bus_space_write_1(iot, ioh, off, data);
d377 35
@


