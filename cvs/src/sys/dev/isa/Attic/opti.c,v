head	1.10;
access;
symbols
	OPENBSD_5_3:1.9.0.8
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.8.0.28
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.26
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.22
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.24
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.20
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.18
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.16
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.14
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.12
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.10
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.8
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.5.0.24
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.22
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.20
	OPENBSD_2_8:1.5.0.18
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.16
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.14
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.10
date	2013.04.05.07.25.26;	author tedu;	state dead;
branches;
next	1.9;

1.9
date	2011.06.23.16.31.16;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2004.06.13.21.49.24;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.19.24.22;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.26.56;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	96.10.16.12.32.48;	author deraadt;	state Exp;
branches
	1.5.14.1
	1.5.24.1;
next	1.4;

1.4
date	96.05.27.07.57.09;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.05.03.12.01.04;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.04.29.09.59.37;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	96.04.24.16.51.14;	author mickey;	state Exp;
branches;
next	;

1.5.14.1
date	2002.03.28.12.11.35;	author niklas;	state Exp;
branches;
next	1.5.14.2;

1.5.14.2
date	2003.06.07.11.02.29;	author ho;	state Exp;
branches;
next	1.5.14.3;

1.5.14.3
date	2004.03.23.08.02.56;	author niklas;	state Exp;
branches;
next	;

1.5.24.1
date	2002.06.11.03.42.22;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@unfinished opti device code is never called or used
@
text
@/*	$OpenBSD: opti.c,v 1.9 2011/06/23 16:31:16 deraadt Exp $	*/

/*
 * Copyright (c) 1996 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

/*
 * Code to setup 82C929 chipset
 */

/* #define	OPTI_DEBUG	9 */

#include <sys/param.h>
#include <sys/types.h>
#include <sys/kernel.h>
#include <sys/conf.h>
#include <sys/device.h>

#include <machine/pio.h>

#include <dev/isa/isavar.h>

#include <dev/isa/opti.h>

#ifdef OPTI_DEBUG
   int opti_debuglevel = OPTI_DEBUG;
#  define XDEBUG(level, data)	((opti_debuglevel >= level)? printf data:0)
#else
#  define XDEBUG(level, data)	/* ((opti_debuglevel >= level)? printf data:0) */
#endif

int	opti_type = OPTI_C929;	/* XXX only one card can be installed */

#define	OPTI_cd_valid_ift(i)	((i)==OPTI_SONY||(i)==OPTI_PANASONIC||\
					(i)==OPTI_MITSUMI||(i)==OPTI_IDE)

static __inline int OPTI_cd_addr(int);
static __inline int OPTI_cd_irq(int);
static __inline int OPTI_cd_drq(int);
static __inline int OPTI_snd_addr(int);
static __inline int OPTI_snd_irq(int);
static __inline int OPTI_snd_drq(int);
static __inline void opti_outb(u_short, u_char);
static __inline u_char opti_inb(u_short);
static int opti_present(void);

static __inline int
OPTI_cd_addr(a)
	int	a;
{
	switch(a) {
	case 0x320:
		return 0xc0;
	case 0x330:
		return 0x40;
	case 0x340:
		return 0x00;
	case 0x360:
		return 0x80;
	default:
		return -1;
	}
}

static __inline int
OPTI_cd_irq(i)
	int	i;
{
	switch(i) {
	case 5:
		return 0x04;
	case 7:
		return 0x08;
	case 3:
		return 0x0c;
	case 9:
		return 0x10;
	case 10:
		return 0x14;
	case 11:
		return 0x18;
	case -1:
		return 0x00;
	default:
		return -1;
	}
}

static __inline int
OPTI_cd_drq(d)
	int	d;
{
	switch(d) {
	case 3:
	case 5:
		return 0;
	case 6:
		return 1;
	case 7:
		return 2;
	default:
		return 3;
	}
}

#define	OPTI_snd_valid_ift(i)	((i)==OPTI_WSS||(i)==OPTI_SB)

static __inline int
OPTI_snd_addr(a)
	int	a;
{
	switch(a) {
	case 0x220:
		return 0x0;
	case 0x240:
		return 0x3;
	case 0x530:
		return 0x8;
	case 0xE80:
		return 0x9;
	case 0xF40:
		return 0xa;
	case 0x604:
		return 0xb;
	default:
		return -1;
	}
}

static __inline int
OPTI_snd_irq(i)
	int	i;
{
	switch(i) {
	case 5:
		return 0x04;
	case 7:
		return 0x08;
	case 3:
		return 0x0c;
	case 9:
		return 0x10;
	case 10:
		return 0x14;
	case 11:
		return 0x18;
	case -1:
		return 0x00;
	default:
		return -1;
	}
}

static __inline int
OPTI_snd_drq(d)
	int	d;
{
	switch(d) {
	case 3:
	case 5:
		return 0;
	case 6:
		return 1;
	case 7:
		return 2;
	default:
		return 3;
	}
}

static __inline void
opti_outb(port, byte)
	u_short port;
	u_char byte;
{
	outb( OPTI_PASSWD, opti_type );
	outb( port, byte );
}

static __inline u_char
opti_inb(port)
	u_short port;
{
	outb( OPTI_PASSWD, opti_type );
	return inb( port );
}

static int
opti_present(void)
{
	register u_char	a, b;
	int s = splhigh();

	a = opti_inb( OPTI_PASSWD );
	opti_outb( OPTI_PASSWD, 0x00 );
	b = opti_inb( OPTI_PASSWD );
	opti_outb( OPTI_PASSWD, a );

	if (b != 2) {
		opti_type = OPTI_C928;

		a = opti_inb( OPTI_PASSWD );
		opti_outb( OPTI_PASSWD, 0x00 );
		b = opti_inb( OPTI_PASSWD );
		opti_outb( OPTI_PASSWD, a );
	}

	splx(s);

	return b == 2;
}

int
opti_cd_setup(ift, addr, irq, drq)
	int	ift, addr, irq, drq;
{
	int	ret = 0;

	XDEBUG( 2, ("opti: do CD setup type=%u, addr=0x%x, irq=%d, drq=%d\n",
		    ift, addr, irq, drq));

	if( !opti_present() )
		XDEBUG( 2, ("opti: not present.\n"));
	else if( !OPTI_cd_valid_ift(ift) )
		XDEBUG( 2, ("opti: invalid CD-ROM interface type.\n"));
	else if( OPTI_cd_addr(addr) == -1)
		XDEBUG( 2, ("opti: illegal CD-ROM interface address.\n"));
	else if( OPTI_cd_irq(irq) == -1)
		XDEBUG( 2, ("opti: wrong CD-ROM irq number.\n"));
	else if( OPTI_cd_drq(drq) == -1)
		XDEBUG( 2, ("opti: bad CD_ROM drq number.\n"));
	else {
			/* so the setup */
		int s = splhigh();
		register u_char	a, b;

			/* set interface type */
		a = opti_inb( OPTI_IFTP );
		b = (opti_inb( OPTI_DATA ) & 0x20) | 3 ;
		opti_outb( OPTI_DATA,  b );
		opti_outb( OPTI_IFTP, (a & OPTI_SND_MASK) | 2 * ift );
		opti_outb( OPTI_ENBL, 0x80 );

			/* we don't need any additional setup for IDE CD-ROM */
		if( ift != OPTI_IDE )
		{
				/* set address */
			a = opti_inb( OPTI_DATA );
			opti_outb( OPTI_DATA, (a & 0x3f) |
			     (0x40 * OPTI_cd_addr(addr)) );

				/* set irq */
			if( irq != IRQUNK )
			{
				a = opti_inb( OPTI_DATA );
				opti_outb( OPTI_DATA,
					  (inb( OPTI_DATA ) & 0xe3) |
					  OPTI_cd_irq(irq) );
			}

				/* set drq */
			if( drq != DRQUNK )
			{
				a = opti_inb( OPTI_DATA );
				opti_outb( OPTI_DATA,
					  (inb( OPTI_DATA ) & 0xfc) |
					  OPTI_cd_drq(drq) );
			}
		}
		splx(s);
		DELAY(1000);
		ret = 1;
	}

	return ret;
}

int
opti_snd_setup(ift, addr, irq, drq)
	int	ift, addr, irq, drq;
{
	XDEBUG( 2, ("opti: do SND setup type=%u,addr=%x,irq=%d,drq=%d\n",
		    ift, addr, irq, drq));

	if( !opti_present() )
		XDEBUG( 2, ("opti: not present.\n"));
	else if( !OPTI_snd_valid_ift(ift) )
		XDEBUG( 2, ("opti: invalid SND interface type.\n"));
	else if( OPTI_snd_addr(addr) == -1)
		XDEBUG( 2, ("opti: illegal SND interface address.\n"));
	else if( OPTI_snd_irq(irq) == -1)
		XDEBUG( 2, ("opti: wrong SND irq number.\n"));
	else if( OPTI_snd_drq(drq) == -1)
		XDEBUG( 2, ("opti: bad SND drq number.\n"));
	else {
			/* so the setup */
		int s = splhigh();
		register u_char	a;

		if (ift == OPTI_WSS) {
			a = opti_inb(OPTI_IFTP);
			opti_outb(OPTI_IFTP, ((a & ~OPTI_SND_MASK)
				  | (OPTI_snd_addr(addr)*16)) + 1);
			opti_outb(OPTI_ENBL, 0x1a);
		}

		splx(s);
		DELAY(1000);
		return 1;
	}

	return 0;
}
@


1.9
log
@a bit more ansi; ok tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: opti.c,v 1.8 2004/06/13 21:49:24 niklas Exp $	*/
@


1.8
log
@debranch SMP, have fun
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d212 1
a212 1
opti_present()
@


1.7
log
@kill the caluses three and four on some of my code
@
text
@d1 1
a1 1
/*	$OpenBSD: opti.c,v 1.6 2002/03/14 01:26:56 millert Exp $	*/
a43 1
#include <i386/isa/icu.h>
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: opti.c,v 1.5 1996/10/16 12:32:48 deraadt Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.5
log
@proto
@
text
@d1 1
a1 1
/*	$OpenBSD: opti.c,v 1.4 1996/05/27 07:57:09 deraadt Exp $	*/
d66 9
a74 9
static __inline int OPTI_cd_addr __P((int));
static __inline int OPTI_cd_irq __P((int));
static __inline int OPTI_cd_drq __P((int));
static __inline int OPTI_snd_addr __P((int));
static __inline int OPTI_snd_irq __P((int));
static __inline int OPTI_snd_drq __P((int));
static __inline void opti_outb __P((u_short, u_char));
static __inline u_char opti_inb __P((u_short));
static int opti_present __P((void));
@


1.5.24.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: opti.c,v 1.5 1996/10/16 12:32:48 deraadt Exp $	*/
d66 9
a74 9
static __inline int OPTI_cd_addr(int);
static __inline int OPTI_cd_irq(int);
static __inline int OPTI_cd_drq(int);
static __inline int OPTI_snd_addr(int);
static __inline int OPTI_snd_irq(int);
static __inline int OPTI_snd_drq(int);
static __inline void opti_outb(u_short, u_char);
static __inline u_char opti_inb(u_short);
static int opti_present(void);
@


1.5.14.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d66 9
a74 9
static __inline int OPTI_cd_addr(int);
static __inline int OPTI_cd_irq(int);
static __inline int OPTI_cd_drq(int);
static __inline int OPTI_snd_addr(int);
static __inline int OPTI_snd_irq(int);
static __inline int OPTI_snd_drq(int);
static __inline void opti_outb(u_short, u_char);
static __inline u_char opti_inb(u_short);
static int opti_present(void);
@


1.5.14.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: opti.c,v 1.5.14.1 2002/03/28 12:11:35 niklas Exp $	*/
d15 5
@


1.5.14.3
log
@a small step towards an integrated PIC/APIC system: move isa/icu.h to
include/i8259.h, and adapt the ACK/MASK/UNMASK macros so we can
reuse the API for APICs.  From NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: opti.c,v 1.5.14.2 2003/06/07 11:02:29 ho Exp $	*/
d44 1
@


1.4
log
@/* /* */ is bad
@
text
@d1 1
a1 1
/*	$OpenBSD: opti.c,v 1.3 1996/05/03 12:01:04 mickey Exp $	*/
d65 11
d81 10
a90 5
		case 0x320:	return 0xc0;
		case 0x330:	return 0x40;
		case 0x340:	return 0x00;
		case 0x360:	return 0x80;
		default:	return -1;
d93 1
d99 16
a114 8
		case 5:	return 0x04;
		case 7:	return 0x08;
		case 3:	return 0x0c;
		case 9:	return 0x10;
		case 10:return 0x14;
		case 11:return 0x18;
		case -1:return 0x00;
		default:return -1;
d117 1
d123 9
a131 5
		case 3:
		case 5:	return 0;
		case 6:	return 1;
		case 7:	return 2;
		default:return 3;
d142 14
a155 7
		case 0x220:	return 0x0;
		case 0x240:	return 0x3;
		case 0x530:	return 0x8;
		case 0xE80:	return 0x9;
		case 0xF40:	return 0xa;
		case 0x604:	return 0xb;
		default:	return -1;
d158 1
d164 16
a179 8
		case 5:	return 0x04;
		case 7:	return 0x08;
		case 3:	return 0x0c;
		case 9:	return 0x10;
		case 10:return 0x14;
		case 11:return 0x18;
		case -1:return 0x00;
		default:return -1;
d182 1
d188 9
a196 5
		case 3:
		case 5:	return 0;
		case 6:	return 1;
		case 7:	return 2;
		default:return 3;
d201 3
a203 1
opti_outb( u_short port, u_char byte )
d210 2
a211 1
opti_inb( u_short port )
d218 1
a218 1
opti_present( void )
d243 1
a243 1
opti_cd_setup( ift, addr, irq, drq )
d261 1
a261 2
	else
	{
d308 1
a308 1
opti_snd_setup( ift, addr, irq, drq )
d324 1
a324 2
	else
	{
d327 1
a327 1
		register u_char	a, b;
d330 4
a333 4
			a = opti_inb( OPTI_IFTP );
			opti_outb( OPTI_IFTP, (a & ~OPTI_SND_MASK)
				  | OPTI_snd_addr(addr)*16 + 1 );
			opti_outb( OPTI_ENBL, 0x1a );
@


1.3
log
@Fix the copyright.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 1
a39 1
/* #define	OPTI_DEBUG	9 /* */
@


1.2
log
@Rewrite a bit w/ a new flavour of behaviour understanding.
Disable debug code by default.
@
text
@d5 1
d18 2
a19 3
 * 4. Neither the name of the University nor of the Laboratory may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
d21 3
a23 3
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
@


1.1
log
@Add OPTi 82C929 chipset support for sound(wss,sb)/cd(mcd,scd,pcd,atapi)
card. This is software programable card.
Missing:	SB support (no srcs available, and dos's exe is too big ;)
Not tested:	pcd(panasonic cd)(no driver); mcd,atapi(have no hw).
@
text
@d39 1
a39 1
#define	OPTI_DEBUG		9
d61 2
d149 14
d169 13
a181 11
	outb( OPTI_CTRL, 0xe3 );
	a = inb( OPTI_CTRL );

	outb( OPTI_CTRL, 0xe3 );
	outb( OPTI_CTRL, 0x00 );

	outb( OPTI_CTRL, 0xe3 );
	b = inb( OPTI_CTRL );

	outb( OPTI_CTRL, 0xe3 );
	outb( OPTI_CTRL,  a );
d194 1
a194 1
	XDEBUG( 2, ("opti: do CD setup t=%u, a=0x%x, i=%d, d=%d\n",
d214 5
a218 14
		outb( OPTI_CTRL, 0xe3 );
		a = inb( OPTI_IFTP );

		outb( OPTI_CTRL, 0xe3 );
		b = (inb( OPTI_DATA ) & 0x20) | 3 ;

		outb( OPTI_CTRL, 0xe3 );
		outb( OPTI_DATA,  b );

		outb( OPTI_CTRL, 0xe3 );
		outb( OPTI_IFTP, (a & 0xf1) | 2*ift );

		outb( OPTI_CTRL, 0xe3 );
		outb( OPTI_ENBL, 0x80 );
d224 2
a225 5
			outb( OPTI_CTRL, 0xe3 );
			a = inb( OPTI_DATA );

			outb( OPTI_CTRL, 0xe3 );
			outb( OPTI_DATA, (a & 0x3f) |
d231 4
a234 6
				outb( OPTI_CTRL, 0xe3 );
				a = inb( OPTI_DATA );

				outb( OPTI_CTRL, 0xe3 );
				outb( OPTI_DATA, (inb( OPTI_DATA ) & 0xe3) |
				     OPTI_cd_irq(irq) );
d240 4
a243 6
				outb( OPTI_CTRL, 0xe3 );
				a = inb( OPTI_DATA );

				outb( OPTI_CTRL, 0xe3 );
				outb( OPTI_DATA, (inb( OPTI_DATA ) & 0xfc) |
				     OPTI_cd_drq(drq) );
d258 1
a258 1
	XDEBUG( 2, ("opti: do SND setup t=%u,a=%x,i=%d,d=%d\n",
d278 4
a281 14
			outb( OPTI_CTRL, 0xe3 );
			a = inb( OPTI_CTRL );

			outb( OPTI_CTRL, 0xe3 );
			outb( OPTI_ENBL, 0x1a );

			outb( OPTI_CTRL, 0xe3 );
			outb( OPTI_IFTP, OPTI_snd_addr(addr)*16 + 1 );

			outb( OPTI_CTRL, 0xe3 );
			outb( OPTI_ENBL, 0x1a );

			outb( OPTI_CTRL, 0xe3 );
			outb( OPTI_CTRL, a );
@
