head	1.38;
access;
symbols
	OPENBSD_6_0:1.38.0.8
	OPENBSD_6_0_BASE:1.38
	OPENBSD_5_9:1.38.0.2
	OPENBSD_5_9_BASE:1.38
	OPENBSD_5_8:1.38.0.6
	OPENBSD_5_8_BASE:1.38
	OPENBSD_5_7:1.38.0.4
	OPENBSD_5_7_BASE:1.38
	OPENBSD_5_6:1.37.0.16
	OPENBSD_5_6_BASE:1.37
	OPENBSD_5_5:1.37.0.14
	OPENBSD_5_5_BASE:1.37
	OPENBSD_5_4:1.37.0.10
	OPENBSD_5_4_BASE:1.37
	OPENBSD_5_3:1.37.0.8
	OPENBSD_5_3_BASE:1.37
	OPENBSD_5_2:1.37.0.6
	OPENBSD_5_2_BASE:1.37
	OPENBSD_5_1_BASE:1.37
	OPENBSD_5_1:1.37.0.4
	OPENBSD_5_0:1.37.0.2
	OPENBSD_5_0_BASE:1.37
	OPENBSD_4_9:1.36.0.4
	OPENBSD_4_9_BASE:1.36
	OPENBSD_4_8:1.36.0.2
	OPENBSD_4_8_BASE:1.36
	OPENBSD_4_7:1.32.0.2
	OPENBSD_4_7_BASE:1.32
	OPENBSD_4_6:1.27.0.6
	OPENBSD_4_6_BASE:1.27
	OPENBSD_4_5:1.27.0.2
	OPENBSD_4_5_BASE:1.27
	OPENBSD_4_4:1.23.0.4
	OPENBSD_4_4_BASE:1.23
	OPENBSD_4_3:1.23.0.2
	OPENBSD_4_3_BASE:1.23
	OPENBSD_4_2:1.21.0.2
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.20.0.2
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.19.0.4
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.2
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.18.0.4
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.18.0.2
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.17.0.12
	OPENBSD_3_6_BASE:1.17
	SMP_SYNC_A:1.17
	SMP_SYNC_B:1.17
	OPENBSD_3_5:1.17.0.10
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.8
	OPENBSD_3_4_BASE:1.17
	UBC_SYNC_A:1.17
	OPENBSD_3_3:1.17.0.6
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.4
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.17.0.2
	OPENBSD_3_1_BASE:1.17
	UBC_SYNC_B:1.17
	UBC:1.16.0.4
	UBC_BASE:1.16
	OPENBSD_3_0:1.16.0.2
	OPENBSD_3_0_BASE:1.16
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_9:1.14.0.2
	OPENBSD_2_8:1.13.0.10
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.13.0.8
	OPENBSD_2_7_BASE:1.13
	SMP:1.13.0.6
	SMP_BASE:1.13
	kame_19991208:1.13
	OPENBSD_2_6:1.13.0.4
	OPENBSD_2_6_BASE:1.13
	OPENBSD_2_5:1.13.0.2
	OPENBSD_2_5_BASE:1.13
	OPENBSD_2_4:1.11.0.4
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.11.0.2
	OPENBSD_2_3_BASE:1.11
	OPENBSD_2_2:1.10.0.4
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.10.0.2
	OPENBSD_2_1_BASE:1.10
	OPENBSD_2_0:1.9.0.2
	OPENBSD_2_0_BASE:1.9
	netbsd:1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.38
date	2014.09.14.14.17.25;	author jsg;	state Exp;
branches;
next	1.37;
commitid	uzzBR7hz9ncd4O6G;

1.37
date	2011.04.03.12.42.36;	author krw;	state Exp;
branches;
next	1.36;

1.36
date	2010.06.28.18.31.02;	author krw;	state Exp;
branches;
next	1.35;

1.35
date	2010.06.26.23.24.44;	author guenther;	state Exp;
branches;
next	1.34;

1.34
date	2010.05.20.00.55.17;	author krw;	state Exp;
branches;
next	1.33;

1.33
date	2010.03.23.01.57.20;	author krw;	state Exp;
branches;
next	1.32;

1.32
date	2010.01.10.00.40.25;	author krw;	state Exp;
branches;
next	1.31;

1.31
date	2010.01.10.00.10.23;	author krw;	state Exp;
branches;
next	1.30;

1.30
date	2009.09.24.19.48.50;	author miod;	state Exp;
branches;
next	1.29;

1.29
date	2009.09.05.11.49.36;	author dlg;	state Exp;
branches;
next	1.28;

1.28
date	2009.08.09.12.59.37;	author jsg;	state Exp;
branches;
next	1.27;

1.27
date	2009.02.16.21.19.07;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2009.01.21.21.54.00;	author grange;	state Exp;
branches;
next	1.25;

1.25
date	2009.01.11.16.54.59;	author blambert;	state Exp;
branches;
next	1.24;

1.24
date	2008.11.25.17.52.02;	author krw;	state Exp;
branches;
next	1.23;

1.23
date	2007.11.05.17.42.26;	author krw;	state Exp;
branches;
next	1.22;

1.22
date	2007.10.01.15.34.48;	author krw;	state Exp;
branches;
next	1.21;

1.21
date	2007.06.29.15.17.02;	author jasper;	state Exp;
branches;
next	1.20;

1.20
date	2006.11.28.23.59.45;	author dlg;	state Exp;
branches;
next	1.19;

1.19
date	2005.12.03.17.13.22;	author krw;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.26.21.22.13;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2002.03.14.01.26.56;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2001.08.26.00.45.08;	author fgsch;	state Exp;
branches
	1.16.4.1;
next	1.15;

1.15
date	2001.06.27.05.44.54;	author nate;	state Exp;
branches;
next	1.14;

1.14
date	2001.01.29.06.49.26;	author mickey;	state Exp;
branches;
next	1.13;

1.13
date	99.01.31.14.56.01;	author espie;	state Exp;
branches
	1.13.6.1;
next	1.12;

1.12
date	99.01.07.06.14.49;	author niklas;	state Exp;
branches;
next	1.11;

1.11
date	97.11.07.08.07.10;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	96.11.23.21.46.46;	author kstailey;	state Exp;
branches;
next	1.9;

1.9
date	96.05.27.07.56.50;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	96.05.26.00.27.29;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	96.05.07.07.37.49;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.04.21.22.24.32;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.03.20.01.01.02;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.03.19.21.10.32;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.02.20.04.36.07;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.12.27.22.06.36;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.37;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.37;	author deraadt;	state Exp;
branches;
next	;

1.13.6.1
date	2001.05.14.22.24.51;	author niklas;	state Exp;
branches;
next	1.13.6.2;

1.13.6.2
date	2001.07.04.10.41.36;	author niklas;	state Exp;
branches;
next	1.13.6.3;

1.13.6.3
date	2001.10.31.03.22.43;	author nate;	state Exp;
branches;
next	1.13.6.4;

1.13.6.4
date	2002.03.28.12.11.36;	author niklas;	state Exp;
branches;
next	;

1.16.4.1
date	2002.06.11.03.42.22;	author art;	state Exp;
branches;
next	;


desc
@@


1.38
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@/*	$OpenBSD: seagate.c,v 1.37 2011/04/03 12:42:36 krw Exp $	*/

/*
 * ST01/02, Future Domain TMC-885, TMC-950 SCSI driver
 *
 * Copyright 1994, Charles Hannum (mycroft@@ai.mit.edu)
 * Copyright 1994, Kent Palmkvist (kentp@@isy.liu.se)
 * Copyright 1994, Robert Knier (rknier@@qgraph.com)
 * Copyright 1992, 1994 Drew Eckhardt (drew@@colorado.edu)
 * Copyright 1994, Julian Elischer (julian@@tfs.com)
 *
 * Others that has contributed by example code is
 *		Glen Overby (overby@@cray.com)
 *		Tatu Yllnen
 *		Brian E Litzinger
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE DEVELOPERS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE DEVELOPERS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * kentp  940307 alpha version based on newscsi-03 version of Julians SCSI-code
 * kentp  940314 Added possibility to not use messages
 * rknier 940331 Added fast transfer code
 * rknier 940407 Added assembler coded data transfers
 */

/*
 * What should really be done:
 *
 * Add missing tests for timeouts
 * Restructure interrupt enable/disable code (runs to long with int disabled)
 * Find bug? giving problem with tape status
 * Add code to handle Future Domain 840, 841, 880 and 881
 * adjust timeouts (startup is very slow)
 * add code to use tagged commands in SCSI2
 * Add code to handle slow devices better (sleep if device not disconnecting)
 * Fix unnecessary interrupts
 */

/*
 * Note to users trying to share a disk between DOS and unix:
 * The ST01/02 is a translating host-adapter. It is not giving DOS
 * the same number of heads/tracks/sectors as specified by the disk.
 * It is therefore important to look at what numbers DOS thinks the
 * disk has. Use these to disklabel your disk in an appropriate manner
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/errno.h>
#include <sys/ioctl.h>
#include <sys/device.h>
#include <sys/buf.h>
#include <sys/queue.h>
#include <sys/malloc.h>

#include <machine/intr.h>
#include <machine/pio.h>

#include <scsi/scsi_all.h>
#include <scsi/scsi_message.h>
#include <scsi/scsiconf.h>

#include <dev/isa/isareg.h>
#include <dev/isa/isavar.h>
#include <i386/isa/isa_machdep.h>	/* XXX USES ISA HOLE DIRECTLY */

#define	SEA_SCB_MAX	32	/* allow maximally 8 scsi control blocks */
#define SCB_TABLE_SIZE	8	/* start with 8 scb entries in table */
#define BLOCK_SIZE	512	/* size of READ/WRITE areas on SCSI card */

/*
 * defining SEA_BLINDTRANSFER will make DATA IN and DATA OUT to be done with
 * blind transfers, i.e. no check is done for scsi phase changes. This will
 * result in data loss if the scsi device does not send its data using
 * BLOCK_SIZE bytes at a time.
 * If SEA_BLINDTRANSFER defined and SEA_ASSEMBLER also defined will result in
 * the use of blind transfers coded in assembler. SEA_ASSEMBLER is no good
 * without SEA_BLINDTRANSFER defined.
 */
#define	SEA_BLINDTRANSFER	/* do blind transfers */
#define	SEA_ASSEMBLER		/* Use assembly code for fast transfers */

/*
 * defining SEA_NOMSGS causes messages not to be used (thereby disabling
 * disconnects)
 */
#undef	SEA_NOMSGS

/*
 * defining SEA_NODATAOUT makes dataout phase being aborted
 */
#undef	SEA_NODATAOUT

/* Debugging definitions. Should not be used unless you want a lot of
   printouts even under normal conditions */

#undef	SEA_DEBUGQUEUE		/* Display info about queue-lengths */

/******************************* board definitions **************************/
/*
 * CONTROL defines
 */
#define CMD_RST		0x01		/* scsi reset */
#define CMD_SEL		0x02		/* scsi select */
#define CMD_BSY		0x04		/* scsi busy */
#define	CMD_ATTN	0x08		/* scsi attention */
#define CMD_START_ARB	0x10		/* start arbitration bit */
#define	CMD_EN_PARITY	0x20		/* enable scsi parity generation */
#define CMD_INTR	0x40		/* enable scsi interrupts */
#define CMD_DRVR_ENABLE	0x80		/* scsi enable */

/*
 * STATUS
 */
#define STAT_BSY	0x01		/* scsi busy */
#define STAT_MSG	0x02		/* scsi msg */
#define STAT_IO		0x04		/* scsi I/O */
#define STAT_CD		0x08		/* scsi C/D */
#define STAT_REQ	0x10		/* scsi req */
#define STAT_SEL	0x20		/* scsi select */
#define STAT_PARITY	0x40		/* parity error bit */
#define STAT_ARB_CMPL	0x80		/* arbitration complete bit */

/*
 * REQUESTS
 */
#define PH_DATAOUT	(0)
#define PH_DATAIN	(STAT_IO)
#define PH_CMD		(STAT_CD)
#define PH_STAT		(STAT_CD | STAT_IO)
#define PH_MSGOUT	(STAT_MSG | STAT_CD)
#define PH_MSGIN	(STAT_MSG | STAT_CD | STAT_IO)

#define PH_MASK		(STAT_MSG | STAT_CD | STAT_IO)

#define PH_INVALID	0xff

#define SEA_RAMOFFSET	0x00001800

#define BASE_CMD	(CMD_INTR | CMD_EN_PARITY)

#define	SEAGATE		1	/* Seagate ST0[12] */
#define	FDOMAIN		2	/* Future Domain TMC-{885,950} */
#define	FDOMAIN840	3	/* Future Domain TMC-{84[01],88[01]} */

/******************************************************************************/

/* scsi control block used to keep info about a scsi command */
struct sea_scb {
        u_char *data;			/* position in data buffer so far */
	int datalen;			/* bytes remaining to transfer */
	TAILQ_ENTRY(sea_scb) chain;
	struct scsi_xfer *xs;		/* the scsi_xfer for this cmd */
	int flags;			/* status of the instruction */
#define	SCB_FREE	0
#define	SCB_ACTIVE	1
#define SCB_ABORTED	2
#define SCB_TIMEOUT	4
#define SCB_ERROR	8
};

/*
 * data structure describing current status of the scsi bus. One for each
 * controller card.
 */
struct sea_softc {
	struct device sc_dev;
	struct isadev sc_id;
	void *sc_ih;

	int type;			/* board type */
	caddr_t	maddr;			/* Base address for card */
	caddr_t	maddr_cr_sr;		/* Address of control and status reg */
	caddr_t	maddr_dr;		/* Address of data register */

	struct scsi_link sc_link;	/* prototype for subdevs */
	TAILQ_HEAD(, sea_scb) free_list, ready_list, nexus_list;
	struct sea_scb *nexus;		/* currently connected command */
	int numscbs;			/* number of scsi control blocks */
	struct sea_scb scb[SCB_TABLE_SIZE];

	struct mutex		sc_scb_mtx;
	struct scsi_iopool	sc_iopool;

	int our_id;			/* our scsi id */
	u_char our_id_mask;
	volatile u_char busy[8];	/* index=target, bit=lun, Keep track of
					   busy luns at device target */
};

/* flag showing if main routine is running. */
static volatile int main_running = 0;

#define	STATUS	(*(volatile u_char *)sea->maddr_cr_sr)
#define CONTROL	STATUS
#define DATA	(*(volatile u_char *)sea->maddr_dr)

/*
 * These are "special" values for the tag parameter passed to sea_select
 * Not implemented right now.
 */
#define TAG_NEXT	-1	/* Use next free tag */
#define TAG_NONE	-2	/*
				 * Establish I_T_L nexus instead of I_T_L_Q
				 * even on SCSI-II devices.
				 */

typedef struct {
	char *signature;
	int offset, length;
	int type;
} BiosSignature;

/*
 * Signatures for automatic recognition of board type
 */
static const BiosSignature signatures[] = {
{"ST01 v1.7  (C) Copyright 1987 Seagate", 15, 37, SEAGATE},
{"SCSI BIOS 2.00  (C) Copyright 1987 Seagate", 15, 40, SEAGATE},

/*
 * The following two lines are NOT mistakes. One detects ROM revision
 * 3.0.0, the other 3.2. Since seagate has only one type of SCSI adapter,
 * and this is not going to change, the "SEAGATE" and "SCSI" together
 * are probably "good enough"
 */
{"SEAGATE SCSI BIOS ", 16, 17, SEAGATE},
{"SEAGATE SCSI BIOS ", 17, 17, SEAGATE},

/*
 * However, future domain makes several incompatible SCSI boards, so specific
 * signatures must be used.
 */
{"FUTURE DOMAIN CORP. (C) 1986-1989 V5.0C2/14/89", 5, 45, FDOMAIN},
{"FUTURE DOMAIN CORP. (C) 1986-1989 V6.0A7/28/89", 5, 46, FDOMAIN},
{"FUTURE DOMAIN CORP. (C) 1986-1990 V6.0105/31/90",5, 47, FDOMAIN},
{"FUTURE DOMAIN CORP. (C) 1986-1990 V6.0209/18/90",5, 47, FDOMAIN},
{"FUTURE DOMAIN CORP. (C) 1986-1990 V7.009/18/90", 5, 46, FDOMAIN},
{"FUTURE DOMAIN CORP. (C) 1992 V8.00.004/02/92",   5, 44, FDOMAIN},
{"FUTURE DOMAIN TMC-950",			   5, 21, FDOMAIN},
};

#define	nsignatures	(sizeof(signatures) / sizeof(signatures[0]))

#ifdef notdef
static const char *bases[] = {
	(char *) 0xc8000, (char *) 0xca000, (char *) 0xcc000,
	(char *) 0xce000, (char *) 0xdc000, (char *) 0xde000
};

#define	nbases		(sizeof(bases) / sizeof(bases[0]))
#endif

void 		*sea_scb_alloc(void *);
int		seaintr(void *);
void		sea_scsi_cmd(struct scsi_xfer *);
int 		sea_poll(struct sea_softc *, struct scsi_xfer *, int);
int		sea_select(struct sea_softc *sea, struct sea_scb *scb);
int		sea_transfer_pio(struct sea_softc *sea, u_char *phase,
		    int *count, u_char **data);
int		sea_abort(struct sea_softc *, struct sea_scb *scb);
static void 	sea_main(void);
static void 	sea_information_transfer(struct sea_softc *);
void		sea_timeout(void *);
void		sea_done(struct sea_softc *, struct sea_scb *);
void		sea_scb_free(void *, void *);
void 		sea_init(struct sea_softc *);
void 		sea_send_scb(struct sea_softc *sea, struct sea_scb *scb);
void		sea_reselect(struct sea_softc *sea);

struct scsi_adapter sea_switch = {
	sea_scsi_cmd,
	scsi_minphys,	/* no special minphys(), since driver uses PIO */
	0,
	0,
};

int	seaprobe(struct device *, void *, void *);
void	seaattach(struct device *, struct device *, void *);
int	seaprint(void *, const char *);

struct cfattach sea_ca = {
	sizeof(struct sea_softc), seaprobe, seaattach
};

struct cfdriver sea_cd = {
	NULL, "sea", DV_DULL
};

#ifdef SEA_DEBUGQUEUE
void
sea_queue_length(struct sea_softc *sea)
{
	struct sea_scb *scb;
	int connected, issued, disconnected;

	connected = sea->nexus ? 1 : 0;
	issued = 0;
	TAILQ_FOREACH(scb, &sea->ready_list, chain)
		issued++;
	disconnected = 0;
	TAILQ_FOREACH(scb, &sea->nexus_list, chain)
		disconnected++;
	printf("%s: length: %d/%d/%d\n", sea->sc_dev.dv_xname, connected,
	    issued, disconnected);
}
#endif

/*
 * Check if the device can be found at the port given and if so, detect the
 * type the type of board.  Set it up ready for further work. Takes the isa_dev
 * structure from autoconf as an argument.
 * Returns 1 if card recognized, 0 if errors.
 */
int
seaprobe(struct device *parent, void *match, void *aux)
{
	struct sea_softc *sea = match;
	struct isa_attach_args *ia = aux;
	int i;

	/*
	 * Could try to find a board by looking through all possible addresses.
	 * This is not done the right way now, because I have not found a way
	 * to get a boards virtual memory address given its physical.  There is
	 * a function that returns the physical address for a given virtual
	 * address, but not the other way around.
	 */

	if (ia->ia_maddr == MADDRUNK) {
		/* XXX */
		return 0;
	} else
		sea->maddr = ISA_HOLE_VADDR(ia->ia_maddr);

	/* check board type */	/* No way to define this through config */
	for (i = 0; i < nsignatures; i++)
		if (!bcmp(sea->maddr + signatures[i].offset,
		    signatures[i].signature, signatures[i].length)) {
			sea->type = signatures[i].type;
			break;
		}

	/* Find controller and data memory addresses */
	switch (sea->type) {
	case SEAGATE:
	case FDOMAIN840:
		sea->maddr_cr_sr =
		    (void *) (((u_char *)sea->maddr) + 0x1a00);
		sea->maddr_dr =
		    (void *) (((u_char *)sea->maddr) + 0x1c00);
		break;
	case FDOMAIN:
		sea->maddr_cr_sr =
		    (void *) (((u_char *)sea->maddr) + 0x1c00);
		sea->maddr_dr =
		    (void *) (((u_char *)sea->maddr) + 0x1e00);
		break;
	default:
#if 0
		printf("%s: board type unknown at address %p\n",
		    sea->sc_dev.dv_xname, sea->maddr);
#endif
		return 0;
	}

	/* Test controller RAM (works the same way on future domain cards?) */
	*((u_char *)sea->maddr + SEA_RAMOFFSET) = 0xa5;
	*((u_char *)sea->maddr + SEA_RAMOFFSET + 1) = 0x5a;

	if ((*((u_char *)sea->maddr + SEA_RAMOFFSET) != 0xa5) ||
	    (*((u_char *)sea->maddr + SEA_RAMOFFSET + 1) != 0x5a)) {
		printf("%s: board RAM failure\n", sea->sc_dev.dv_xname);
		return 0;
	}

	ia->ia_drq = DRQUNK;
	ia->ia_msize = 0x2000;
	ia->ia_iosize = 0;
	return 1;
}

int
seaprint(void *aux, const char *name)
{
	if (name != NULL)
		printf("%s: scsibus ", name);
	return UNCONF;
}

/*
 * Attach all sub-devices we can find
 */
void
seaattach(struct device *parent, struct device *self, void *aux)
{
	struct isa_attach_args *ia = aux;
	struct sea_softc *sea = (void *)self;
	struct scsibus_attach_args saa;

	sea_init(sea);

	/*
	 * fill in the prototype scsi_link.
	 */
	sea->sc_link.adapter_softc = sea;
	sea->sc_link.adapter_target = sea->our_id;
	sea->sc_link.adapter = &sea_switch;
	sea->sc_link.openings = 1;
	sea->sc_link.pool = &sea->sc_iopool;

	printf("\n");

	sea->sc_ih = isa_intr_establish(ia->ia_ic, ia->ia_irq, IST_EDGE,
	    IPL_BIO, seaintr, sea, sea->sc_dev.dv_xname);

	bzero(&saa, sizeof(saa));
	saa.saa_sc_link = &sea->sc_link;

	/*
	 * ask the adapter what subunits are present
	 */
	config_found(self, &saa, seaprint);
}

/*
 * Catch an interrupt from the adaptor
 */
int
seaintr(void *arg)
{
	struct sea_softc *sea = arg;

#ifdef DEBUG	/* extra overhead, and only needed for intr debugging */
	if ((STATUS & STAT_PARITY) == 0 &&
	    (STATUS & (STAT_SEL | STAT_IO)) != (STAT_SEL | STAT_IO))
		return 0;
#endif

loop:
	/* dispatch to appropriate routine if found and done=0 */
	/* should check to see that this card really caused the interrupt */

	if (STATUS & STAT_PARITY) {
		/* Parity error interrupt */
		printf("%s: parity error\n", sea->sc_dev.dv_xname);
		return 1;
	}

	if ((STATUS & (STAT_SEL | STAT_IO)) == (STAT_SEL | STAT_IO)) {
		/* Reselect interrupt */
		sea_reselect(sea);
		if (!main_running)
			sea_main();
		goto loop;
	}

	return 1;
}

/*
 * Setup data structures, and reset the board and the SCSI bus.
 */
void
sea_init(struct sea_softc *sea)
{
	int i;

	/* Reset the scsi bus (I don't know if this is needed */
	CONTROL = BASE_CMD | CMD_DRVR_ENABLE | CMD_RST;
	delay(25);	/* hold reset for at least 25 microseconds */
	CONTROL = BASE_CMD;
	delay(10);	/* wait a Bus Clear Delay (800 ns + bus free delay (800 ns) */

	/* Set our id (don't know anything about this) */
	switch (sea->type) {
	case SEAGATE:
		sea->our_id = 7;
		break;
	case FDOMAIN:
	case FDOMAIN840:
		sea->our_id = 6;
		break;
	}
	sea->our_id_mask = 1 << sea->our_id;

	/* init fields used by our routines */
	sea->nexus = 0;
	TAILQ_INIT(&sea->ready_list);
	TAILQ_INIT(&sea->nexus_list);
	TAILQ_INIT(&sea->free_list);
	mtx_init(&sea->sc_scb_mtx, IPL_BIO);
	scsi_iopool_init(&sea->sc_iopool, sea, sea_scb_alloc, sea_scb_free);

	for (i = 0; i < 8; i++)
		sea->busy[i] = 0x00;

	/* link up the free list of scbs */
	sea->numscbs = SCB_TABLE_SIZE;
	for (i = 0; i < SCB_TABLE_SIZE; i++) {
		TAILQ_INSERT_TAIL(&sea->free_list, &sea->scb[i], chain);
	}
}

/*
 * start a scsi operation given the command and the data address. Also needs
 * the unit, target and lu.
 */
void
sea_scsi_cmd(struct scsi_xfer *xs)
{
	struct scsi_link *sc_link = xs->sc_link;
	struct sea_softc *sea = sc_link->adapter_softc;
	struct sea_scb *scb;
	int flags;
	int s;

	SC_DEBUG(sc_link, SDEV_DB2, ("sea_scsi_cmd\n"));

	flags = xs->flags;
	scb = xs->io;
	scb->flags = SCB_ACTIVE;
	scb->xs = xs;
	timeout_set(&scb->xs->stimeout, sea_timeout, scb);

	if (flags & SCSI_RESET) {
		/*
		 * Try to send a reset command to the card.
		 * XXX Not implemented.
		 */
		printf("%s: resetting\n", sea->sc_dev.dv_xname);
		xs->error = XS_DRIVER_STUFFUP;
		scsi_done(xs);
		return;
	}

	/*
	 * Put all the arguments for the xfer in the scb
	 */
	scb->datalen = xs->datalen;
	scb->data = xs->data;

#ifdef SEA_DEBUGQUEUE
	sea_queue_length(sea);
#endif

	s = splbio();

	sea_send_scb(sea, scb);

	/*
	 * Usually return SUCCESSFULLY QUEUED
	 */
	if ((flags & SCSI_POLL) == 0) {
		timeout_add_msec(&scb->xs->stimeout, xs->timeout);
		splx(s);
		return;
	}

	splx(s);

	/*
	 * If we can't use interrupts, poll on completion
	 */
	if (sea_poll(sea, xs, xs->timeout)) {
		sea_timeout(scb);
		if (sea_poll(sea, xs, 2000))
			sea_timeout(scb);
	}
}

/*
 * Get a free scb.
 */
void *
sea_scb_alloc(void *xsea)
{
	struct sea_softc *sea = xsea; 
	struct sea_scb *scb;

	mtx_enter(&sea->sc_scb_mtx);
	scb = TAILQ_FIRST(&sea->free_list);
	if (scb) {
		TAILQ_REMOVE(&sea->free_list, scb, chain);
	}
	mtx_leave(&sea->sc_scb_mtx);

	return scb;
}

/*
 * Try to send this command to the board. Because this board does not use any
 * mailboxes, this routine simply adds the command to the queue held by the
 * sea_softc structure.
 * A check is done to see if the command contains a REQUEST_SENSE command, and
 * if so the command is put first in the queue, otherwise the command is added
 * to the end of the queue. ?? Not correct ??
 */
void
sea_send_scb(struct sea_softc *sea, struct sea_scb *scb)
{

	TAILQ_INSERT_TAIL(&sea->ready_list, scb, chain);
	/* Try to do some work on the card. */
	if (!main_running)
		sea_main();
}

/*
 * Coroutine that runs as long as more work can be done on the seagate host
 * adapter in a system.  Both sea_scsi_cmd and sea_intr will try to start it in
 * case it is not running.
 */
void
sea_main(void)
{
	struct sea_softc *sea;
	struct sea_scb *scb;
	int done;
	int unit;
	int s;

	main_running = 1;

	/*
	 * This should not be run with interrupts disabled, but use the splx
	 * code instead.
	 */
loop:
	done = 1;
	for (unit = 0; unit < sea_cd.cd_ndevs; unit++) {
		sea = sea_cd.cd_devs[unit];
		if (!sea)
			continue;
		s = splbio();
		if (!sea->nexus) {
			/*
			 * Search through the ready_list for a command
			 * destined for a target that's not busy.
			 */
			TAILQ_FOREACH(scb, &sea->ready_list, chain) {
				if (!(sea->busy[scb->xs->sc_link->target] &
				    (1 << scb->xs->sc_link->lun))) {
					TAILQ_REMOVE(&sea->ready_list, scb,
					    chain);

					/* Re-enable interrupts. */
					splx(s);

					/*
					 * Attempt to establish an I_T_L nexus.
					 * On success, sea->nexus is set.
					 * On failure, we must add the command
					 * back to the issue queue so we can
					 * keep trying.
					 */

					/*
					 * REQUEST_SENSE commands are issued
					 * without tagged queueing, even on
					 * SCSI-II devices because the
					 * contingent alligence condition
					 * exists for the entire unit.
					 */

					/*
					 * First check that if any device has
					 * tried a reconnect while we have done
					 * other things with interrupts
					 * disabled.
					 */

					if ((STATUS & (STAT_SEL | STAT_IO)) ==
					    (STAT_SEL | STAT_IO)) {
						sea_reselect(sea);
						break;
					}
					if (sea_select(sea, scb)) {
						s = splbio();
						TAILQ_INSERT_HEAD(&sea->ready_list,
						    scb, chain);
						splx(s);
					} else
						break;
				} /* if target/lun is not busy */
			} /* for scb */
			if (!sea->nexus) {
				/* check for reselection phase */
				if ((STATUS & (STAT_SEL | STAT_IO)) ==
				    (STAT_SEL | STAT_IO)) {
					sea_reselect(sea);
				}
			}
		} /* if (!sea->nexus) */

		splx(s);
		if (sea->nexus) {	/* we are connected. Do the task */
			sea_information_transfer(sea);
			done = 0;
		} else
			break;
	} /* for instance */

	if (!done)
		goto loop;

	main_running = 0;
}

void
sea_scb_free(void *xsea, void *xscb)
{
	struct sea_softc *sea = xsea;
	struct sea_scb *scb = xscb;

	scb->flags = SCB_FREE;

	mtx_enter(&sea->sc_scb_mtx);
	TAILQ_INSERT_HEAD(&sea->free_list, scb, chain);
	mtx_leave(&sea->sc_scb_mtx);
}

void
sea_timeout(void *arg)
{
	struct sea_scb *scb = arg;
	struct scsi_xfer *xs = scb->xs;
	struct scsi_link *sc_link = xs->sc_link;
	struct sea_softc *sea = sc_link->adapter_softc;
	int s;

	sc_print_addr(sc_link);
	printf("timed out");

	s = splbio();

	/*
	 * If it has been through before, then
	 * a previous abort has failed, don't
	 * try abort again
	 */
	if (scb->flags & SCB_ABORTED) {
		/* abort timed out */
		printf(" AGAIN\n");
		scb->xs->retries = 0;
		scb->flags |= SCB_ABORTED;
		sea_done(sea, scb);
	} else {
		/* abort the operation that has timed out */
		printf("\n");
		scb->flags |= SCB_ABORTED;
		sea_abort(sea, scb);
		/* 2 secs for the abort */
		if ((xs->flags & SCSI_POLL) == 0)
			timeout_add_sec(&scb->xs->stimeout, 2);
	}

	splx(s);
}

void
sea_reselect(struct sea_softc *sea)
{
	u_char target_mask;
	int i;
	u_char lun, phase;
	u_char msg[3];
	int len;
	u_char *data;
	struct sea_scb *scb;
	int abort = 0;

	if (!((target_mask = STATUS) & STAT_SEL)) {
		printf("%s: wrong state 0x%x\n", sea->sc_dev.dv_xname,
		    target_mask);
		return;
	}

	/* wait for a device to win the reselection phase */
	/* signals this by asserting the I/O signal */
	for (i = 10; i && (STATUS & (STAT_SEL | STAT_IO | STAT_BSY)) !=
	    (STAT_SEL | STAT_IO | 0); i--);
	/* !! Check for timeout here */
	/* the data bus contains original initiator id ORed with target id */
	target_mask = DATA;
	/* see that we really are the initiator */
	if (!(target_mask & sea->our_id_mask)) {
		printf("%s: polled reselection was not for me: 0x%x\n",
		    sea->sc_dev.dv_xname, target_mask);
		return;
	}
	/* find target who won */
	target_mask &= ~sea->our_id_mask;
	/* host responds by asserting the BSY signal */
	CONTROL = BASE_CMD | CMD_DRVR_ENABLE | CMD_BSY;
	/* target should respond by deasserting the SEL signal */
	for (i = 50000; i && (STATUS & STAT_SEL); i++);
	/* remove the busy status */
	CONTROL = BASE_CMD | CMD_DRVR_ENABLE;
	/* we are connected. Now we wait for the MSGIN condition */
	for (i = 50000; i && !(STATUS & STAT_REQ); i--);
	/* !! Add timeout check here */
	/* hope we get an IDENTIFY message */
	len = 3;
	data = msg;
	phase = PH_MSGIN;
	sea_transfer_pio(sea, &phase, &len, &data);

	if (MSG_ISIDENTIFY(msg[0])) {
		printf("%s: expecting IDENTIFY message, got 0x%x\n",
		    sea->sc_dev.dv_xname, msg[0]);
		abort = 1;
		scb = NULL;
	} else {
		lun = msg[0] & 0x07;

		/*
		 * Find the command corresponding to the I_T_L or I_T_L_Q nexus
		 * we just reestablished, and remove it from the disconnected
		 * queue.
		 */
		TAILQ_FOREACH(scb, &sea->nexus_list, chain)
			if (target_mask == (1 << scb->xs->sc_link->target) &&
			    lun == scb->xs->sc_link->lun) {
				TAILQ_REMOVE(&sea->nexus_list, scb,
				    chain);
				break;
			}
		if (!scb) {
			printf("%s: target %02x lun %d not disconnected\n",
			    sea->sc_dev.dv_xname, target_mask, lun);
			/*
			 * Since we have an established nexus that we can't do
			 * anything with, we must abort it.
			 */
			abort = 1;
		}
	}

	if (abort) {
		msg[0] = MSG_ABORT;
		len = 1;
		data = msg;
		phase = PH_MSGOUT;
		CONTROL = BASE_CMD | CMD_ATTN;
		sea_transfer_pio(sea, &phase, &len, &data);
	} else
		sea->nexus = scb;

	return;
}

/*
 * Transfer data in given phase using polled I/O.
 */
int
sea_transfer_pio(struct sea_softc *sea, u_char *phase, int *count, u_char **data)
{
	u_char p = *phase, tmp;
	int c = *count;
	u_char *d = *data;
	int timeout;

	do {
		/*
		 * Wait for assertion of REQ, after which the phase bits will
		 * be valid.
		 */
		for (timeout = 0; timeout < 50000; timeout++)
			if ((tmp = STATUS) & STAT_REQ)
				break;
		if (!(tmp & STAT_REQ)) {
			printf("%s: timeout waiting for STAT_REQ\n",
			    sea->sc_dev.dv_xname);
			break;
		}

		/*
		 * Check for phase mismatch.  Reached if the target decides
		 * that it has finished the transfer.
		 */
		if (sea->type == FDOMAIN840)
			tmp = ((tmp & 0x08) >> 2) |
			      ((tmp & 0x02) << 2) |
			       (tmp & 0xf5);
		if ((tmp & PH_MASK) != p)
			break;

		/* Do actual transfer from SCSI bus to/from memory. */
		if (!(p & STAT_IO))
			DATA = *d;
		else
			*d = DATA;
		++d;

		/*
		 * The SCSI standard suggests that in MSGOUT phase, the
		 * initiator should drop ATN on the last byte of the message
		 * phase after REQ has been asserted for the handshake but
		 * before the initiator raises ACK.
		 * Don't know how to accomplish this on the ST01/02.
		 */

#if 0
		/*
		 * XXX
		 * The st01 code doesn't wait for STAT_REQ to be deasserted.
		 * Is this ok?
		 */
		for (timeout = 0; timeout < 200000L; timeout++)
			if (!(STATUS & STAT_REQ))
				break;
		if (STATUS & STAT_REQ)
			printf("%s: timeout on wait for !STAT_REQ",
			    sea->sc_dev.dv_xname);
#endif
	} while (--c);

	*count = c;
	*data = d;
	tmp = STATUS;
	if (tmp & STAT_REQ)
		*phase = tmp & PH_MASK;
	else
		*phase = PH_INVALID;

	if (c && (*phase != p))
		return -1;
	return 0;
}

/*
 * Establish I_T_L or I_T_L_Q nexus for new or existing command including
 * ARBITRATION, SELECTION, and initial message out for IDENTIFY and queue
 * messages.  Return -1 if selection could not execute for some reason, 0 if
 * selection succeded or failed because the target did not respond.
 */
int
sea_select(struct sea_softc *sea, struct sea_scb *scb)
{
	u_char msg[3], phase;
	u_char *data;
	int len;
	int timeout;

	CONTROL = BASE_CMD;
	DATA = sea->our_id_mask;
	CONTROL = (BASE_CMD & ~CMD_INTR) | CMD_START_ARB;

	/* wait for arbitration to complete */
	for (timeout = 0; timeout < 3000000L; timeout++)
		if (STATUS & STAT_ARB_CMPL)
			break;
	if (!(STATUS & STAT_ARB_CMPL)) {
		if (STATUS & STAT_SEL) {
			printf("%s: arbitration lost\n", sea->sc_dev.dv_xname);
			scb->flags |= SCB_ERROR;
		} else {
			printf("%s: arbitration timeout\n",
			    sea->sc_dev.dv_xname);
			scb->flags |= SCB_TIMEOUT;
		}
		CONTROL = BASE_CMD;
		return -1;
	}

	delay(2);
	DATA = (u_char)((1 << scb->xs->sc_link->target) | sea->our_id_mask);
	CONTROL =
#ifdef SEA_NOMSGS
	    (BASE_CMD & ~CMD_INTR) | CMD_DRVR_ENABLE | CMD_SEL;
#else
	    (BASE_CMD & ~CMD_INTR) | CMD_DRVR_ENABLE | CMD_SEL | CMD_ATTN;
#endif
	delay(1);

	/* wait for a bsy from target */
	for (timeout = 0; timeout < 2000000L; timeout++)
		if (STATUS & STAT_BSY)
			break;
	if (!(STATUS & STAT_BSY)) {
		/* should return some error to the higher level driver */
		CONTROL = BASE_CMD;
		scb->flags |= SCB_TIMEOUT;
		return 0;
	}

	/* Try to make the target to take a message from us */
#ifdef SEA_NOMSGS
	CONTROL = (BASE_CMD & ~CMD_INTR) | CMD_DRVR_ENABLE;
#else
	CONTROL = (BASE_CMD & ~CMD_INTR) | CMD_DRVR_ENABLE | CMD_ATTN;
#endif
	delay(1);

	/* should start a msg_out phase */
	for (timeout = 0; timeout < 2000000L; timeout++)
		if (STATUS & STAT_REQ)
			break;
	/* Remove ATN. */
	CONTROL = BASE_CMD | CMD_DRVR_ENABLE;
	if (!(STATUS & STAT_REQ)) {
		/*
		 * This should not be taken as an error, but more like an
		 * unsupported feature!  Should set a flag indicating that the
		 * target don't support messages, and continue without failure.
		 * (THIS IS NOT AN ERROR!)
		 */
	} else {
		msg[0] = MSG_IDENTIFY(scb->xs->sc_link->lun, 1);
		len = 1;
		data = msg;
		phase = PH_MSGOUT;
		/* Should do test on result of sea_transfer_pio(). */
		sea_transfer_pio(sea, &phase, &len, &data);
	}
	if (!(STATUS & STAT_BSY))
		printf("%s: after successful arbitrate: no STAT_BSY!\n",
		    sea->sc_dev.dv_xname);

	sea->nexus = scb;
	sea->busy[scb->xs->sc_link->target] |= 1 << scb->xs->sc_link->lun;
	/* This assignment should depend on possibility to send a message to target. */
	CONTROL = BASE_CMD | CMD_DRVR_ENABLE;
	/* XXX Reset pointer in command? */
	return 0;
}

/*
 * Send an abort to the target.  Return 1 success, 0 on failure.
 */
int
sea_abort(struct sea_softc *sea, struct sea_scb *scb)
{
	struct sea_scb *tmp;
	u_char msg, phase, *msgptr;
	int len;

	/*
	 * If the command hasn't been issued yet, we simply remove it from the
	 * issue queue
	 * XXX Could avoid this loop.
	 */
	TAILQ_FOREACH(tmp, &sea->ready_list, chain)
		if (scb == tmp) {
			TAILQ_REMOVE(&sea->ready_list, scb, chain);
			/* XXX Set some type of error result for operation. */
			return 1;
		}

	/*
	 * If any commands are connected, we're going to fail the abort and let
	 * the high level SCSI driver retry at a later time or issue a reset.
	 */
	if (sea->nexus)
		return 0;

	/*
	 * If the command is currently disconnected from the bus, and there are
	 * no connected commands, we reconnect the I_T_L or I_T_L_Q nexus
	 * associated with it, go into message out, and send an abort message.
	 */
	TAILQ_FOREACH(tmp, &sea->nexus_list, chain)
		if (scb == tmp) {
			if (sea_select(sea, scb))
				return 0;

			msg = MSG_ABORT;
			msgptr = &msg;
			len = 1;
			phase = PH_MSGOUT;
			CONTROL = BASE_CMD | CMD_ATTN;
			sea_transfer_pio(sea, &phase, &len, &msgptr);

			TAILQ_FOREACH(tmp, &sea->nexus_list, chain)
				if (scb == tmp) {
					TAILQ_REMOVE(&sea->nexus_list,
					    scb, chain);
					/* XXX Set some type of error result
					   for the operation. */
					return 1;
				}
		}

	/* Command not found in any queue; race condition? */
	return 1;
}

void
sea_done(struct sea_softc *sea, struct sea_scb *scb)
{
	struct scsi_xfer *xs = scb->xs;

	timeout_del(&scb->xs->stimeout);

	xs->resid = scb->datalen;

	/* XXXX need to get status */
	if (scb->flags == SCB_ACTIVE) {
		xs->resid = 0;
	} else {
		if (scb->flags & (SCB_TIMEOUT | SCB_ABORTED))
			xs->error = XS_TIMEOUT;
		if (scb->flags & SCB_ERROR)
			xs->error = XS_DRIVER_STUFFUP;
	}
	scsi_done(xs);
}

/*
 * Wait for completion of command in polled mode.
 */
int
sea_poll(struct sea_softc *sea, struct scsi_xfer *xs, int count)
{
	int s;

	while (count) {
		/* try to do something */
		s = splbio();
		if (!main_running)
			sea_main();
		splx(s);
		if (xs->flags & ITSDONE)
			return 0;
		delay(1000);
		count--;
	}
	return 1;
}

/*
 * Do the transfer.  We know we are connected.  Update the flags, and call
 * sea_done() when task accomplished.  Dialog controlled by the target.
 */
void
sea_information_transfer(struct sea_softc *sea)
{
	int timeout;
	u_char msgout = MSG_NOOP;
	int len;
	int s;
	u_char *data;
	u_char phase, tmp, old_phase = PH_INVALID;
	struct sea_scb *scb = sea->nexus;
	int loop;

	for (timeout = 0; timeout < 10000000L; timeout++) {
		tmp = STATUS;
		if (tmp & STAT_PARITY)
			printf("%s: parity error detected\n",
			    sea->sc_dev.dv_xname);
		if (!(tmp & STAT_BSY)) {
			for (loop = 0; loop < 20; loop++)
				if ((tmp = STATUS) & STAT_BSY)
					break;
			if (!(tmp & STAT_BSY)) {
				printf("%s: !STAT_BSY unit in data transfer!\n",
				    sea->sc_dev.dv_xname);
				s = splbio();
				sea->nexus = NULL;
				scb->flags = SCB_ERROR;
				splx(s);
				sea_done(sea, scb);
				return;
			}
		}

		/* we only have a valid SCSI phase when REQ is asserted */
		if (!(tmp & STAT_REQ))
			continue;

		if (sea->type == FDOMAIN840)
			tmp = ((tmp & 0x08) >> 2) |
			      ((tmp & 0x02) << 2) |
			       (tmp & 0xf5);
		phase = tmp & PH_MASK;
		if (phase != old_phase)
			old_phase = phase;

		switch (phase) {
		case PH_DATAOUT:
#ifdef SEA_NODATAOUT
			printf("%s: SEA_NODATAOUT set, attempted DATAOUT aborted\n",
			    sea->sc_dev.dv_xname);
			msgout = MSG_ABORT;
			CONTROL = BASE_CMD | CMD_ATTN;
			break;
#endif
		case PH_DATAIN:
			if (!scb->data)
				printf("no data address!\n");
#ifdef SEA_BLINDTRANSFER
			if (scb->datalen && !(scb->datalen % BLOCK_SIZE)) {
				while (scb->datalen) {
					for (loop = 0; loop < 50000; loop++)
						if ((tmp = STATUS) & STAT_REQ)
							break;
					if (!(tmp & STAT_REQ)) {
						printf("%s: timeout waiting for STAT_REQ\n",
						    sea->sc_dev.dv_xname);
						/* XXX Do something? */
					}
					if (sea->type == FDOMAIN840)
						tmp = ((tmp & 0x08) >> 2) |
						      ((tmp & 0x02) << 2) |
						       (tmp & 0xf5);
					if ((tmp & PH_MASK) != phase)
						break;
					if (!(phase & STAT_IO)) {
#ifdef SEA_ASSEMBLER
						int block = BLOCK_SIZE;
						void *a = sea->maddr_dr;
						asm("shr $2, %%ecx\n\t\
						    cld\n\t\
						    rep\n\t\
						    movsl" :
						    "=S" (scb->data),
							"=c" (block) ,
						    "=D" (a) :
						    "0" (scb->data),
						    "2" (a),
						    "1" (block) );
#else
						int count;
						for (count = 0;
						    count < BLOCK_SIZE;
						    count++)
							DATA = *(scb->data++);
#endif
					} else {
#ifdef SEA_ASSEMBLER
						int block = BLOCK_SIZE;
						void *a = sea->maddr_dr;
						asm("shr $2, %%ecx\n\t\
						    cld\n\t\
						    rep\n\t\
						    movsl" :
						    "=D" (scb->data), "=c" (block) ,
						    "=S" (a) :
						    "0" (scb->data),
							"2" (a) ,
						    "1" (block) );
#else
						int count;
					        for (count = 0;
						    count < BLOCK_SIZE;
						    count++)
							*(scb->data++) = DATA;
#endif
					}
					scb->datalen -= BLOCK_SIZE;
				}
			}
#endif
			if (scb->datalen)
				sea_transfer_pio(sea, &phase, &scb->datalen,
				    &scb->data);
			break;
		case PH_MSGIN:
			/* Multibyte messages should not be present here. */
			len = 1;
			data = &tmp;
			sea_transfer_pio(sea, &phase, &len, &data);
			/* scb->MessageIn = tmp; */

			switch (tmp) {
			case MSG_ABORT:
				scb->flags = SCB_ABORTED;
				printf("sea: command aborted by target\n");
				CONTROL = BASE_CMD;
				sea_done(sea, scb);
				return;
			case MSG_CMDCOMPLETE:
				s = splbio();
				sea->nexus = NULL;
				splx(s);
				sea->busy[scb->xs->sc_link->target] &=
				    ~(1 << scb->xs->sc_link->lun);
				CONTROL = BASE_CMD;
				sea_done(sea, scb);
				return;
			case MSG_MESSAGE_REJECT:
				printf("%s: message_reject received\n",
				    sea->sc_dev.dv_xname);
				break;
			case MSG_DISCONNECT:
				s = splbio();
				TAILQ_INSERT_TAIL(&sea->nexus_list,
				    scb, chain);
				sea->nexus = NULL;
				CONTROL = BASE_CMD;
				splx(s);
				return;
			case MSG_SAVEDATAPOINTER:
			case MSG_RESTOREPOINTERS:
				/* save/restore of pointers are ignored */
				break;
			default:
				/*
				 * This should be handled in the pio data
				 * transfer phase, as the ATN should be raised
				 * before ACK goes false when rejecting a
				 * message.
				 */
				printf("%s: unknown message in: %x\n",
				    sea->sc_dev.dv_xname, tmp);
				break;
			} /* switch (tmp) */
			break;
		case PH_MSGOUT:
			len = 1;
			data = &msgout;
			/* sea->last_message = msgout; */
			sea_transfer_pio(sea, &phase, &len, &data);
			if (msgout == MSG_ABORT) {
				printf("%s: sent message abort to target\n",
				    sea->sc_dev.dv_xname);
				s = splbio();
				sea->busy[scb->xs->sc_link->target] &=
				    ~(1 << scb->xs->sc_link->lun);
				sea->nexus = NULL;
				scb->flags = SCB_ABORTED;
				splx(s);
				/* enable interrupt from scsi */
				sea_done(sea, scb);
				return;
			}
			msgout = MSG_NOOP;
			break;
		case PH_CMD:
			len = scb->xs->cmdlen;
			data = (char *) scb->xs->cmd;
			sea_transfer_pio(sea, &phase, &len, &data);
			break;
		case PH_STAT:
			len = 1;
			data = &tmp;
			sea_transfer_pio(sea, &phase, &len, &data);
			scb->xs->status = tmp;
			break;
		default:
			printf("sea: unknown phase\n");
		} /* switch (phase) */
	} /* for (...) */

	/* If we get here we have got a timeout! */
	printf("%s: timeout in data transfer\n", sea->sc_dev.dv_xname);
	scb->flags = SCB_TIMEOUT;
	/* XXX Should I clear scsi-bus state? */
	sea_done(sea, scb);
}
@


1.37
log
@Iopoolification of some less common scsi drivers.

ok dlg@@ ("miod will not object" dlg@@)
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.36 2010/06/28 18:31:02 krw Exp $	*/
a74 1
#include <sys/proc.h>
@


1.36
log
@Remove all adapter-specific 'struct scsi_device's. They are never used. First
step in elminating 'struct scsi_device' entirely.

Spotted and initial diff from matthew@@.

ok matthew@@ dlg@@ deraadt@@ marco@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.35 2010/06/26 23:24:44 guenther Exp $	*/
d205 3
d277 1
a277 1
struct		sea_scb *sea_get_scb(struct sea_softc *, int);
d289 1
a289 1
void		sea_free_scb(struct sea_softc *, struct sea_scb *, int);
d433 1
d515 3
d544 1
a544 5
	if ((scb = sea_get_scb(sea, flags)) == NULL) {
		xs->error = XS_NO_CCB;
		scsi_done(xs);
		return;
	}
d596 1
a596 2
 * Get a free scb. If there are none, see if we can allocate a new one.  If so,
 * put it in the hash table too; otherwise return an error or sleep.
d598 2
a599 2
struct sea_scb *
sea_get_scb(struct sea_softc *sea, int flags)
d601 1
a601 1
	int s;
d604 4
a607 24
	s = splbio();

	/*
	 * If we can and have to, sleep waiting for one to come free
	 * but only if we can't allocate a new one.
	 */
	for (;;) {
		scb = TAILQ_FIRST(&sea->free_list);
		if (scb) {
			TAILQ_REMOVE(&sea->free_list, scb, chain);
			break;
		}
		if (sea->numscbs < SEA_SCB_MAX) {
			scb = malloc(sizeof(*scb), M_TEMP, M_NOWAIT | M_ZERO);
			if (scb) {
				sea->numscbs++;
			} else
				printf("%s: can't malloc scb\n",
				    sea->sc_dev.dv_xname);
			break;
		}
		if ((flags & SCSI_NOSLEEP) != 0)
			break;
		tsleep(&sea->free_list, PRIBIO, "seascb", 0);
d609 1
a610 1
	splx(s);
d734 1
a734 1
sea_free_scb(struct sea_softc *sea, struct sea_scb *scb, int flags)
d736 2
a737 1
	int s;
d739 1
a739 1
	s = splbio();
d741 1
a741 1
	scb->flags = SCB_FREE;
d743 1
a743 9

	/*
	 * If there were none, wake anybody waiting for one to come free,
	 * starting with queued entries.
	 */
	if (TAILQ_NEXT(scb, chain) == NULL)
		wakeup((caddr_t)&sea->free_list);

	splx(s);
a1129 1
	sea_free_scb(sea, scb, xs->flags);
@


1.35
log
@Don't #include <sys/user.h> into files that don't need the stuff
it defines.  In some cases, this means pulling in uvm.h or pcb.h
instead, but most of the inclusions were just noise.  Tested on
alpha, amd64, armish, hppa, i386, macpcc, sgi, sparc64, and vax,
mostly by krw and naddy.
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.34 2010/05/20 00:55:17 krw Exp $	*/
a297 8
/* the below structure is so we have a default dev struct for our link struct */
struct scsi_device sea_dev = {
	NULL,		/* use default error handler */
	NULL,		/* have a queue, served by this */
	NULL,		/* have no async handler */
	NULL,		/* Use default 'done' routine */
};

a428 1
	sea->sc_link.device = &sea_dev;
@


1.34
log
@New scsi code seems to be stable. Pluck previously identified
low-hanging splbio/splx pairs that are no longer needed and see if
this reveals any hidden scsi flaws.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.33 2010/03/23 01:57:20 krw Exp $	*/
a75 1
#include <sys/user.h>
@


1.33
log
@Change the scsi_cmd function member of scsi_adapter from int to
void. Use XS_NO_CCB error in the scsi command (xs) to report the
NO_CCB condition. Eliminates all SUCCESSFULLY_QUEUED and COMPLETE
confusion and untangles the midlayer from the adapter a bit more.

Eyes and some fixes by miod@@

There may be some compile issues on little used (i.e. I don't have
any) drivers but the change is mechanical and thus easy to remedy.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.32 2010/01/10 00:40:25 krw Exp $	*/
a548 1
		s = splbio();
a549 1
		splx(s);
a562 1
		s = splbio();
a563 1
		splx(s);
a1150 1
	int s;
a1165 1
	s = splbio();
a1166 1
	splx(s);
@


1.32
log
@A couple of missed ITSDONE setting before scsi_done().

seagate/trm/aha1742 were the only drivers paranoid enough to check
ITSDONE on getting the xs to execute. And optimistic enough to think
simply restting the flag would be a good thing. Have them chill out
like everyone else, reducing ITSDONE noise some more.
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.31 2010/01/10 00:10:23 krw Exp $	*/
d277 1
a277 1
int		sea_scsi_cmd(struct scsi_xfer *);
d535 1
a535 1
int
d548 5
a552 1
		return (NO_CCB);
d568 1
a568 1
		return COMPLETE;
d591 1
a591 1
		return SUCCESSFULLY_QUEUED;
a603 1
	return COMPLETE;
@


1.31
log
@Set ITSDONE in scsi_done() and zap trivial instances of setting it
in the drivers just before calling scsi_done().

ok dlg@@ beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.30 2009/09/24 19:48:50 miod Exp $	*/
a546 4
	if (flags & ITSDONE) {
		printf("%s: done?\n", sea->sc_dev.dv_xname);
		xs->flags &= ~ITSDONE;
	}
@


1.30
log
@Make sure the scsi_xfer timeout always get initialized with timeout_set(),
since the scsi_done() wrapper will timeout_del() unconditionnaly and the
scsi midlayer no longer provides scsi_xfer with zeroed struct timeout.
ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.29 2009/09/05 11:49:36 dlg Exp $	*/
a1170 1
	xs->flags |= ITSDONE;
@


1.29
log
@scsi_done before COMPLETE.
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.28 2009/08/09 12:59:37 jsg Exp $	*/
d556 1
a588 1
		timeout_set(&scb->xs->stimeout, sea_timeout, scb);
d817 1
a817 2
		if ((xs->flags & SCSI_POLL) == 0) {
			timeout_set(&scb->xs->stimeout, sea_timeout, scb);
a818 1
		}
@


1.28
log
@Make this compile when SEA_ASSEMBLER is not defined.
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.27 2009/02/16 21:19:07 miod Exp $	*/
d564 3
@


1.27
log
@Extend the scsi_adapter minphys() callback to take a struct scsi_link *
as additional argument. This will allow intermediate layers between
scsi devices such as sd and scsi host adapters to take appropriate
action if necessary.
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.26 2009/01/21 21:54:00 grange Exp $	*/
d1278 1
a1280 1
#ifdef SEA_ASSEMBLER
d1292 1
d1299 1
a1301 1
#ifdef SEA_ASSEMBLER
d1312 1
@


1.26
log
@Replace timeout_add(msecs * hz / 1000) with timeout_add_msec(msecs).
No functional changes.

ok krw@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.25 2009/01/11 16:54:59 blambert Exp $	*/
d294 1
a294 1
	minphys,	/* no special minphys(), since driver uses PIO */
@


1.25
log
@Actual final round of timeout_add(to, n * hz) -> timeout_add_sec(to, n)
conversions.

ok kettenis@@
ok krw@@ (possibly for the second time :)
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.24 2008/11/25 17:52:02 krw Exp $	*/
d586 1
a586 1
		timeout_add(&scb->xs->stimeout, (xs->timeout * hz) / 1000);
@


1.24
log
@Another bunch of TRY_AGAIN_LATER -> NO_CCB when no I/O could be started.

"looks sane to me" marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.23 2007/11/05 17:42:26 krw Exp $	*/
d816 1
a816 1
			timeout_add(&scb->xs->stimeout, 2 * hz);
@


1.23
log
@More scsi_done() at SPLBIO.
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.22 2007/10/01 15:34:48 krw Exp $	*/
d552 1
a552 1
		return TRY_AGAIN_LATER;
@


1.22
log
@More easy bzero() -> M_ZERO. Use 'p = malloc(sizeof(*p) ...' where
obvious.
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.21 2007/06/29 15:17:02 jasper Exp $	*/
d1155 1
d1172 1
d1174 1
@


1.21
log
@ansify/de-register
no binary change
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.20 2006/11/28 23:59:45 dlg Exp $	*/
d627 1
a627 2
			scb = (struct sea_scb *) malloc(sizeof(struct sea_scb),
			    M_TEMP, M_NOWAIT);
a628 1
				bzero(scb, sizeof(struct sea_scb));
@


1.20
log
@give scsi controllers a real attach args to fill in when attaching scsibus.

ok miod@@ marco@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.19 2005/12/03 17:13:22 krw Exp $	*/
d275 16
a290 16
int seaintr(void *);
int sea_scsi_cmd(struct scsi_xfer *);
void sea_timeout(void *);
void sea_done(struct sea_softc *, struct sea_scb *);
struct sea_scb *sea_get_scb(struct sea_softc *, int);
void sea_free_scb(struct sea_softc *, struct sea_scb *, int);
static void sea_main(void);
static void sea_information_transfer(struct sea_softc *);
int sea_poll(struct sea_softc *, struct scsi_xfer *, int);
void sea_init(struct sea_softc *);
void sea_send_scb(struct sea_softc *sea, struct sea_scb *scb);
void sea_reselect(struct sea_softc *sea);
int sea_select(struct sea_softc *sea, struct sea_scb *scb);
int sea_transfer_pio(struct sea_softc *sea, u_char *phase,
    int *count, u_char **data);
int sea_abort(struct sea_softc *, struct sea_scb *scb);
d321 1
a321 2
sea_queue_length(sea)
	struct sea_softc *sea;
d345 1
a345 3
seaprobe(parent, match, aux)
	struct device *parent;
	void *match, *aux;
d413 1
a413 3
seaprint(aux, name)
	void *aux;
	const char *name;
d424 1
a424 3
seaattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d459 1
a459 2
seaintr(arg)
	void *arg;
d494 1
a494 2
sea_init(sea)
	struct sea_softc *sea;
d536 1
a536 2
sea_scsi_cmd(xs)
	struct scsi_xfer *xs;
d609 1
a609 3
sea_get_scb(sea, flags)
	struct sea_softc *sea;
	int flags;
d655 1
a655 3
sea_send_scb(sea, scb)
	struct sea_softc *sea;
	struct sea_scb *scb;
d670 1
a670 1
sea_main()
d766 1
a766 4
sea_free_scb(sea, scb, flags)
	struct sea_softc *sea;
	struct sea_scb *scb;
	int flags;
d786 1
a786 2
sea_timeout(arg)
	void *arg;
d826 1
a826 2
sea_reselect(sea)
	struct sea_softc *sea;
d921 1
a921 5
sea_transfer_pio(sea, phase, count, data)
	struct sea_softc *sea;
	u_char *phase;
	int *count;
	u_char **data;
d923 3
a925 3
	register u_char p = *phase, tmp;
	register int c = *count;
	register u_char *d = *data;
d1003 1
a1003 3
sea_select(sea, scb)
	struct sea_softc *sea;
	struct sea_scb *scb;
d1097 1
a1097 3
sea_abort(sea, scb)
	struct sea_softc *sea;
	struct sea_scb *scb;
d1154 1
a1154 3
sea_done(sea, scb)
	struct sea_softc *sea;
	struct sea_scb *scb;
d1180 1
a1180 4
sea_poll(sea, xs, count)
	struct sea_softc *sea;
	struct scsi_xfer *xs;
	int count;
d1203 1
a1203 2
sea_information_transfer(sea)
	struct sea_softc *sea;
@


1.19
log
@The first thing done when XXX_scsi_cmd() returns TRY_AGAIN_LATER is
to set xs->error to XS_BUSY. So it is pointless and misleading to
set xs->error to XS_TIMEOUT, XS_DRIVER_STUFFUP or XS_BUSY just before
returning TRY_AGAIN_LATER.

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.18 2004/12/26 21:22:13 miod Exp $	*/
d435 1
d453 3
d459 1
a459 1
	config_found(self, &sea->sc_link, seaprint);
@


1.18
log
@Use list and queue macros where applicable to make the code easier to read;
no change in compiler assembly output.
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.17 2002/03/14 01:26:56 millert Exp $	*/
a557 1
		xs->error = XS_DRIVER_STUFFUP;
@


1.17
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.16 2001/08/26 00:45:08 fgsch Exp $	*/
d328 6
a333 4
	for (scb = sea->ready_list.tqh_first, issued = 0; scb;
	    scb = scb->chain.tqe_next, issued++);
	for (scb = sea->nexus_list.tqh_first, disconnected = 0; scb;
	    scb = scb->chain.tqe_next, disconnected++);
d630 1
a630 1
		scb = sea->free_list.tqh_first;
d707 1
a707 2
			for (scb = sea->ready_list.tqh_first; scb;
			    scb = scb->chain.tqe_next) {
d793 1
a793 1
	if (!scb->chain.tqe_next)
d902 1
a902 2
		for (scb = sea->nexus_list.tqh_first; scb;
		    scb = scb->chain.tqe_next)
d1132 1
a1132 1
	for (tmp = sea->ready_list.tqh_first; tmp; tmp = tmp->chain.tqe_next)
d1151 1
a1151 2
	for (tmp = sea->nexus_list.tqh_first; tmp;
	    tmp = tmp->chain.tqe_next)
d1163 1
a1163 2
			for (tmp = sea->nexus_list.tqh_first; tmp;
			    tmp = tmp->chain.tqe_next)
@


1.16
log
@remove useless INUSE references from scsi_xfer->flags; art@@ miod@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.15 2001/06/27 05:44:54 nate Exp $	*/
d275 16
a290 16
int seaintr __P((void *));
int sea_scsi_cmd __P((struct scsi_xfer *));
void sea_timeout __P((void *));
void sea_done __P((struct sea_softc *, struct sea_scb *));
struct sea_scb *sea_get_scb __P((struct sea_softc *, int));
void sea_free_scb __P((struct sea_softc *, struct sea_scb *, int));
static void sea_main __P((void));
static void sea_information_transfer __P((struct sea_softc *));
int sea_poll __P((struct sea_softc *, struct scsi_xfer *, int));
void sea_init __P((struct sea_softc *));
void sea_send_scb __P((struct sea_softc *sea, struct sea_scb *scb));
void sea_reselect __P((struct sea_softc *sea));
int sea_select __P((struct sea_softc *sea, struct sea_scb *scb));
int sea_transfer_pio __P((struct sea_softc *sea, u_char *phase,
    int *count, u_char **data));
int sea_abort __P((struct sea_softc *, struct sea_scb *scb));
d307 3
a309 3
int	seaprobe __P((struct device *, void *, void *));
void	seaattach __P((struct device *, struct device *, void *));
int	seaprint __P((void *, const char *));
@


1.16.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.16 2001/08/26 00:45:08 fgsch Exp $	*/
d275 16
a290 16
int seaintr(void *);
int sea_scsi_cmd(struct scsi_xfer *);
void sea_timeout(void *);
void sea_done(struct sea_softc *, struct sea_scb *);
struct sea_scb *sea_get_scb(struct sea_softc *, int);
void sea_free_scb(struct sea_softc *, struct sea_scb *, int);
static void sea_main(void);
static void sea_information_transfer(struct sea_softc *);
int sea_poll(struct sea_softc *, struct scsi_xfer *, int);
void sea_init(struct sea_softc *);
void sea_send_scb(struct sea_softc *sea, struct sea_scb *scb);
void sea_reselect(struct sea_softc *sea);
int sea_select(struct sea_softc *sea, struct sea_scb *scb);
int sea_transfer_pio(struct sea_softc *sea, u_char *phase,
    int *count, u_char **data);
int sea_abort(struct sea_softc *, struct sea_scb *scb);
d307 3
a309 3
int	seaprobe(struct device *, void *, void *);
void	seaattach(struct device *, struct device *, void *);
int	seaprint(void *, const char *);
@


1.15
log
@recieve -> receive
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.14 2001/01/29 06:49:26 mickey Exp $	*/
d551 2
a552 2
	if ((flags & (ITSDONE|INUSE)) != INUSE) {
		printf("%s: done or not in use?\n", sea->sc_dev.dv_xname);
a553 1
		xs->flags |= INUSE;
@


1.14
log
@new timeouts
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.13 1999/01/31 14:56:01 espie Exp $	*/
d1381 1
a1381 1
				printf("%s: message_reject recieved\n",
@


1.13
log
@Fix clobbers so that GENERIC may compile with egcs.

Historically, the documentation of extended asm was lacking, namely you
should NOT specify the same register as an input, and a clobber.
If the register is clobbered, it should be specified as an output as well,
e.g., by linking input and output through the "number" notation.

(Beware of lvalues, some local variables needed...)

In older versions, up-to egcs1.1.1, the compiler did not even warn about
it, but it was liable to output bad code. Newer egcs are pickier and
simply refuse to swallow such code.
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.12 1999/01/07 06:14:49 niklas Exp $	*/
d8 1
a8 1
 * Copyright 1994, Robert Knier (rknier@@qgraph.com) 
d13 1
a13 1
 * 		Glen Overby (overby@@cray.com)
d42 2
a43 2
 * rknier 940331 Added fast transfer code 
 * rknier 940407 Added assembler coded data transfers 
d48 1
a48 1
 * 
d66 1
a66 1
 
d172 1
a172 1
/* scsi control block used to keep info about a scsi command */ 
d365 1
a365 1
	
d406 1
a406 1
  
d418 1
a418 1
	if (name != NULL)       
d444 1
a444 1
  
d500 1
a500 1
  
d505 1
a505 1
	delay(10); 	/* wait a Bus Clear Delay (800 ns + bus free delay (800 ns) */
d591 2
a592 1
		timeout(sea_timeout, scb, (xs->timeout * hz) / 1000);
d712 1
a712 1
	    
d761 1
a761 1
      
d822 1
a822 1
	 	scb->xs->retries = 0;
d831 4
a834 2
		if ((xs->flags & SCSI_POLL) == 0)
			timeout(sea_timeout, scb, 2 * hz);
d839 1
a839 1
 
d852 1
a852 1
  
d887 1
a887 1
	sea_transfer_pio(sea, &phase, &len, &data); 
d1062 1
a1062 1
	delay(1); 
d1082 1
a1082 1
  
d1107 1
a1107 1
  
d1187 1
a1187 1
	untimeout(sea_timeout, scb);
d1310 1
a1310 1
						int block = BLOCK_SIZE; 
d1317 1
a1317 1
						    "=S" (scb->data), 
d1329 1
a1329 1
					} else { 
d1352 1
a1352 1
#endif 
d1375 1
a1375 1
				sea->busy[scb->xs->sc_link->target] &= 
d1417 1
a1417 1
				sea->busy[scb->xs->sc_link->target] &= 
d1421 1
a1421 1
				splx(s); 
@


1.13.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.14 2001/01/29 06:49:26 mickey Exp $	*/
d8 1
a8 1
 * Copyright 1994, Robert Knier (rknier@@qgraph.com)
d13 1
a13 1
 *		Glen Overby (overby@@cray.com)
d42 2
a43 2
 * rknier 940331 Added fast transfer code
 * rknier 940407 Added assembler coded data transfers
d48 1
a48 1
 *
d66 1
a66 1

d172 1
a172 1
/* scsi control block used to keep info about a scsi command */
d365 1
a365 1

d406 1
a406 1

d418 1
a418 1
	if (name != NULL)
d444 1
a444 1

d500 1
a500 1

d505 1
a505 1
	delay(10);	/* wait a Bus Clear Delay (800 ns + bus free delay (800 ns) */
d591 1
a591 2
		timeout_set(&scb->xs->stimeout, sea_timeout, scb);
		timeout_add(&scb->xs->stimeout, (xs->timeout * hz) / 1000);
d711 1
a711 1

d760 1
a760 1

d821 1
a821 1
		scb->xs->retries = 0;
d830 2
a831 4
		if ((xs->flags & SCSI_POLL) == 0) {
			timeout_set(&scb->xs->stimeout, sea_timeout, scb);
			timeout_add(&scb->xs->stimeout, 2 * hz);
		}
d836 1
a836 1

d849 1
a849 1

d884 1
a884 1
	sea_transfer_pio(sea, &phase, &len, &data);
d1059 1
a1059 1
	delay(1);
d1079 1
a1079 1

d1104 1
a1104 1

d1184 1
a1184 1
	timeout_del(&scb->xs->stimeout);
d1307 1
a1307 1
						int block = BLOCK_SIZE;
d1314 1
a1314 1
						    "=S" (scb->data),
d1326 1
a1326 1
					} else {
d1349 1
a1349 1
#endif
d1372 1
a1372 1
				sea->busy[scb->xs->sc_link->target] &=
d1414 1
a1414 1
				sea->busy[scb->xs->sc_link->target] &=
d1418 1
a1418 1
				splx(s);
@


1.13.6.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.13.6.1 2001/05/14 22:24:51 niklas Exp $	*/
d1381 1
a1381 1
				printf("%s: message_reject received\n",
@


1.13.6.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.13.6.2 2001/07/04 10:41:36 niklas Exp $	*/
d551 2
a552 2
	if (flags & ITSDONE) {
		printf("%s: done?\n", sea->sc_dev.dv_xname);
d554 1
@


1.13.6.4
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d275 16
a290 16
int seaintr(void *);
int sea_scsi_cmd(struct scsi_xfer *);
void sea_timeout(void *);
void sea_done(struct sea_softc *, struct sea_scb *);
struct sea_scb *sea_get_scb(struct sea_softc *, int);
void sea_free_scb(struct sea_softc *, struct sea_scb *, int);
static void sea_main(void);
static void sea_information_transfer(struct sea_softc *);
int sea_poll(struct sea_softc *, struct scsi_xfer *, int);
void sea_init(struct sea_softc *);
void sea_send_scb(struct sea_softc *sea, struct sea_scb *scb);
void sea_reselect(struct sea_softc *sea);
int sea_select(struct sea_softc *sea, struct sea_scb *scb);
int sea_transfer_pio(struct sea_softc *sea, u_char *phase,
    int *count, u_char **data);
int sea_abort(struct sea_softc *, struct sea_scb *scb);
d307 3
a309 3
int	seaprobe(struct device *, void *, void *);
void	seaattach(struct device *, struct device *, void *);
int	seaprint(void *, const char *);
@


1.12
log
@Die, NEWCONFIG
@
text
@d1 1
a1 1
/*	$OpenBSD: seagate.c,v 1.11 1997/11/07 08:07:10 niklas Exp $	*/
d1307 2
d1314 3
a1316 1
						    "=S" (scb->data) :
d1318 2
a1319 3
						    "D" (sea->maddr_dr),
						    "c" (BLOCK_SIZE) :
						    "%ecx", "%edi");
d1326 3
a1328 1
					} else {
d1334 2
a1335 2
						    "=D" (scb->data) :
						    "S" (sea->maddr_dr),
d1337 2
a1338 2
						    "c" (BLOCK_SIZE) :
						    "%ecx", "%esi");
@


1.11
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a446 3
#ifdef NEWCONFIG
	isa_establish(&sea->sc_id, &sea->sc_deV);
#endif
@


1.10
log
@added const to second parameter of cfprint_t routines
@
text
@d1 2
@


1.9
log
@verbosity during probe is dumb
@
text
@d307 1
a307 1
int	seaprint __P((void *, char *));
d414 1
a414 1
	char *name;
@


1.8
log
@sync 0521
@
text
@d388 1
a388 1
#ifdef DIAGNOSTIC
@


1.7
log
@sync with 0504 -- prototypes and bus.h
@
text
@d78 1
@


1.6
log
@partial sync with netbsd 960418, more to come
@
text
@d263 1
d270 1
d388 1
a388 1
		printf("%s: board type unknown at address 0x%lx\n",
d634 3
a636 2
			if (scb = (struct sea_scb *) malloc(sizeof(struct sea_scb),
			    M_TEMP, M_NOWAIT)) {
d890 1
@


1.5
log
@Fix back wrong patches.
@
text
@d306 6
a311 2
struct cfdriver seacd = {
	NULL, "sea", seaprobe, seaattach, DV_DULL, sizeof(struct sea_softc)
d445 2
a446 2
	sea->sc_ih = isa_intr_establish(ia->ia_irq, IST_EDGE, IPL_BIO, seaintr,
	    sea, sc->sc_dev.dv_xname);
d692 2
a693 2
	for (unit = 0; unit < seacd.cd_ndevs; unit++) {
		sea = seacd.cd_devs[unit];
@


1.4
log
@Merging w/ NetBSD 021796.
speaker upgraded to the current.
some changes to the VM stuff (ie kern_thread.c added and so).
@
text
@d442 1
a442 1
	    sea);
@


1.3
log
@Pass device name to interrupt establish routines so it can be recorded in
the device interrupt chain structures (isa, pci)

Move interrupt chain structure definition to <machine/psl.h> so vmstat can
get at it (i386)

Remove hack to count interrupts the old way (i386)
@
text
@d442 1
a442 1
	    sea, sea->sc_dev.dv_xname);
@


1.2
log
@from netbsd:
The IST_* and IPL_* constants are not bus-specific; don't treat them as such.
Change splimp -> splnet in Ethernet, ARCnet, and FDDI drivers.
@
text
@d442 1
a442 1
	    sea);
@


1.1
log
@Initial revision
@
text
@d441 2
a442 2
	sea->sc_ih = isa_intr_establish(ia->ia_irq, ISA_IST_EDGE, ISA_IPL_BIO,
	    seaintr, sea);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
